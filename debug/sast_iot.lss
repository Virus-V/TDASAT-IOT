
/home/virusv/TDASAT-IOT/debug/sast_iot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f60  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000000ec  20000000  0800a070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004214  200000ec  0800a15c  000200ec  2**2
                  ALLOC
  4 ._user_heap_stack 00000200  20004300  0800a15c  00024300  2**0
                  ALLOC
  5 .ARM.attributes 00000031  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
  6 .debug_info   00013995  00000000  00000000  0002011d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004116  00000000  00000000  00033ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000012f0  00000000  00000000  00037bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001068  00000000  00000000  00038eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000759b  00000000  00000000  00039f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00005c20  00000000  00000000  000414bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000002b  00000000  00000000  000470db  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00004b58  00000000  00000000  00047108  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000023af  00000000  00000000  0004bc60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20005000 	andcs	r5, r0, r0
 8000004:	0800954d 	stmdaeq	r0, {r0, r2, r3, r6, r8, sl, ip, pc}
 8000008:	08006871 	stmdaeq	r0, {r0, r4, r5, r6, fp, sp, lr}
 800000c:	0800687d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, fp, sp, lr}
 8000010:	08006885 	stmdaeq	r0, {r0, r2, r7, fp, sp, lr}
 8000014:	0800688d 	stmdaeq	r0, {r0, r2, r3, r7, fp, sp, lr}
 8000018:	08006895 	stmdaeq	r0, {r0, r2, r4, r7, fp, sp, lr}
	...
 800002c:	08009301 	stmdaeq	r0, {r0, r8, r9, ip, pc}
 8000030:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	080093f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, ip, pc}
 800003c:	08009439 	stmdaeq	r0, {r0, r3, r4, r5, sl, ip, pc}
 8000040:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 8000044:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 8000048:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 800004c:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 8000050:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 8000054:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 8000058:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 800005c:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 8000060:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 8000064:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 8000068:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 800006c:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 8000070:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 8000074:	080068a9 	stmdaeq	r0, {r0, r3, r5, r7, fp, sp, lr}
 8000078:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 800007c:	0800689d 	stmdaeq	r0, {r0, r2, r3, r4, r7, fp, sp, lr}
 8000080:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 8000084:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 8000088:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 800008c:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 8000090:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 8000094:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 8000098:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 800009c:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 80000a0:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 80000a4:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 80000a8:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 80000ac:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 80000b0:	080068b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, fp, sp, lr}
 80000b4:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 80000b8:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 80000bc:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 80000c0:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 80000c4:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 80000c8:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 80000cc:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 80000d0:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 80000d4:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 80000d8:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 80000dc:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 80000e0:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 80000e4:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 80000e8:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
	...
 8000108:	f108f85f 			; <UNDEFINED> instruction: 0xf108f85f

Disassembly of section .text:

08000110 <memcpy>:
 8000110:	4684      	mov	ip, r0
 8000112:	ea41 0300 	orr.w	r3, r1, r0
 8000116:	f013 0303 	ands.w	r3, r3, #3
 800011a:	d149      	bne.n	80001b0 <memcpy+0xa0>
 800011c:	3a40      	subs	r2, #64	; 0x40
 800011e:	d323      	bcc.n	8000168 <memcpy+0x58>
 8000120:	680b      	ldr	r3, [r1, #0]
 8000122:	6003      	str	r3, [r0, #0]
 8000124:	684b      	ldr	r3, [r1, #4]
 8000126:	6043      	str	r3, [r0, #4]
 8000128:	688b      	ldr	r3, [r1, #8]
 800012a:	6083      	str	r3, [r0, #8]
 800012c:	68cb      	ldr	r3, [r1, #12]
 800012e:	60c3      	str	r3, [r0, #12]
 8000130:	690b      	ldr	r3, [r1, #16]
 8000132:	6103      	str	r3, [r0, #16]
 8000134:	694b      	ldr	r3, [r1, #20]
 8000136:	6143      	str	r3, [r0, #20]
 8000138:	698b      	ldr	r3, [r1, #24]
 800013a:	6183      	str	r3, [r0, #24]
 800013c:	69cb      	ldr	r3, [r1, #28]
 800013e:	61c3      	str	r3, [r0, #28]
 8000140:	6a0b      	ldr	r3, [r1, #32]
 8000142:	6203      	str	r3, [r0, #32]
 8000144:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000146:	6243      	str	r3, [r0, #36]	; 0x24
 8000148:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800014a:	6283      	str	r3, [r0, #40]	; 0x28
 800014c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800014e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000150:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000152:	6303      	str	r3, [r0, #48]	; 0x30
 8000154:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8000156:	6343      	str	r3, [r0, #52]	; 0x34
 8000158:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800015a:	6383      	str	r3, [r0, #56]	; 0x38
 800015c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800015e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000160:	3040      	adds	r0, #64	; 0x40
 8000162:	3140      	adds	r1, #64	; 0x40
 8000164:	3a40      	subs	r2, #64	; 0x40
 8000166:	d2db      	bcs.n	8000120 <memcpy+0x10>
 8000168:	3230      	adds	r2, #48	; 0x30
 800016a:	d30b      	bcc.n	8000184 <memcpy+0x74>
 800016c:	680b      	ldr	r3, [r1, #0]
 800016e:	6003      	str	r3, [r0, #0]
 8000170:	684b      	ldr	r3, [r1, #4]
 8000172:	6043      	str	r3, [r0, #4]
 8000174:	688b      	ldr	r3, [r1, #8]
 8000176:	6083      	str	r3, [r0, #8]
 8000178:	68cb      	ldr	r3, [r1, #12]
 800017a:	60c3      	str	r3, [r0, #12]
 800017c:	3010      	adds	r0, #16
 800017e:	3110      	adds	r1, #16
 8000180:	3a10      	subs	r2, #16
 8000182:	d2f3      	bcs.n	800016c <memcpy+0x5c>
 8000184:	320c      	adds	r2, #12
 8000186:	d305      	bcc.n	8000194 <memcpy+0x84>
 8000188:	f851 3b04 	ldr.w	r3, [r1], #4
 800018c:	f840 3b04 	str.w	r3, [r0], #4
 8000190:	3a04      	subs	r2, #4
 8000192:	d2f9      	bcs.n	8000188 <memcpy+0x78>
 8000194:	3204      	adds	r2, #4
 8000196:	d008      	beq.n	80001aa <memcpy+0x9a>
 8000198:	07d2      	lsls	r2, r2, #31
 800019a:	bf1c      	itt	ne
 800019c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80001a0:	f800 3b01 	strbne.w	r3, [r0], #1
 80001a4:	d301      	bcc.n	80001aa <memcpy+0x9a>
 80001a6:	880b      	ldrh	r3, [r1, #0]
 80001a8:	8003      	strh	r3, [r0, #0]
 80001aa:	4660      	mov	r0, ip
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	2a08      	cmp	r2, #8
 80001b2:	d313      	bcc.n	80001dc <memcpy+0xcc>
 80001b4:	078b      	lsls	r3, r1, #30
 80001b6:	d0b1      	beq.n	800011c <memcpy+0xc>
 80001b8:	f010 0303 	ands.w	r3, r0, #3
 80001bc:	d0ae      	beq.n	800011c <memcpy+0xc>
 80001be:	f1c3 0304 	rsb	r3, r3, #4
 80001c2:	1ad2      	subs	r2, r2, r3
 80001c4:	07db      	lsls	r3, r3, #31
 80001c6:	bf1c      	itt	ne
 80001c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80001cc:	f800 3b01 	strbne.w	r3, [r0], #1
 80001d0:	d3a4      	bcc.n	800011c <memcpy+0xc>
 80001d2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80001d6:	f820 3b02 	strh.w	r3, [r0], #2
 80001da:	e79f      	b.n	800011c <memcpy+0xc>
 80001dc:	3a04      	subs	r2, #4
 80001de:	d3d9      	bcc.n	8000194 <memcpy+0x84>
 80001e0:	3a01      	subs	r2, #1
 80001e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e6:	f800 3b01 	strb.w	r3, [r0], #1
 80001ea:	d2f9      	bcs.n	80001e0 <memcpy+0xd0>
 80001ec:	780b      	ldrb	r3, [r1, #0]
 80001ee:	7003      	strb	r3, [r0, #0]
 80001f0:	784b      	ldrb	r3, [r1, #1]
 80001f2:	7043      	strb	r3, [r0, #1]
 80001f4:	788b      	ldrb	r3, [r1, #2]
 80001f6:	7083      	strb	r3, [r0, #2]
 80001f8:	4660      	mov	r0, ip
 80001fa:	4770      	bx	lr

080001fc <memset>:
 80001fc:	b470      	push	{r4, r5, r6}
 80001fe:	0784      	lsls	r4, r0, #30
 8000200:	d046      	beq.n	8000290 <memset+0x94>
 8000202:	1e54      	subs	r4, r2, #1
 8000204:	2a00      	cmp	r2, #0
 8000206:	d041      	beq.n	800028c <memset+0x90>
 8000208:	b2cd      	uxtb	r5, r1
 800020a:	4603      	mov	r3, r0
 800020c:	e002      	b.n	8000214 <memset+0x18>
 800020e:	1e62      	subs	r2, r4, #1
 8000210:	b3e4      	cbz	r4, 800028c <memset+0x90>
 8000212:	4614      	mov	r4, r2
 8000214:	f803 5b01 	strb.w	r5, [r3], #1
 8000218:	079a      	lsls	r2, r3, #30
 800021a:	d1f8      	bne.n	800020e <memset+0x12>
 800021c:	2c03      	cmp	r4, #3
 800021e:	d92e      	bls.n	800027e <memset+0x82>
 8000220:	b2cd      	uxtb	r5, r1
 8000222:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000226:	2c0f      	cmp	r4, #15
 8000228:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800022c:	d919      	bls.n	8000262 <memset+0x66>
 800022e:	4626      	mov	r6, r4
 8000230:	f103 0210 	add.w	r2, r3, #16
 8000234:	3e10      	subs	r6, #16
 8000236:	2e0f      	cmp	r6, #15
 8000238:	f842 5c10 	str.w	r5, [r2, #-16]
 800023c:	f842 5c0c 	str.w	r5, [r2, #-12]
 8000240:	f842 5c08 	str.w	r5, [r2, #-8]
 8000244:	f842 5c04 	str.w	r5, [r2, #-4]
 8000248:	f102 0210 	add.w	r2, r2, #16
 800024c:	d8f2      	bhi.n	8000234 <memset+0x38>
 800024e:	f1a4 0210 	sub.w	r2, r4, #16
 8000252:	f022 020f 	bic.w	r2, r2, #15
 8000256:	f004 040f 	and.w	r4, r4, #15
 800025a:	3210      	adds	r2, #16
 800025c:	2c03      	cmp	r4, #3
 800025e:	4413      	add	r3, r2
 8000260:	d90d      	bls.n	800027e <memset+0x82>
 8000262:	461e      	mov	r6, r3
 8000264:	4622      	mov	r2, r4
 8000266:	3a04      	subs	r2, #4
 8000268:	2a03      	cmp	r2, #3
 800026a:	f846 5b04 	str.w	r5, [r6], #4
 800026e:	d8fa      	bhi.n	8000266 <memset+0x6a>
 8000270:	1f22      	subs	r2, r4, #4
 8000272:	f022 0203 	bic.w	r2, r2, #3
 8000276:	3204      	adds	r2, #4
 8000278:	4413      	add	r3, r2
 800027a:	f004 0403 	and.w	r4, r4, #3
 800027e:	b12c      	cbz	r4, 800028c <memset+0x90>
 8000280:	b2c9      	uxtb	r1, r1
 8000282:	441c      	add	r4, r3
 8000284:	f803 1b01 	strb.w	r1, [r3], #1
 8000288:	42a3      	cmp	r3, r4
 800028a:	d1fb      	bne.n	8000284 <memset+0x88>
 800028c:	bc70      	pop	{r4, r5, r6}
 800028e:	4770      	bx	lr
 8000290:	4614      	mov	r4, r2
 8000292:	4603      	mov	r3, r0
 8000294:	e7c2      	b.n	800021c <memset+0x20>
 8000296:	bf00      	nop

08000298 <srand>:
 8000298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800029c:	4b16      	ldr	r3, [pc, #88]	; (80002f8 <srand+0x60>)
 800029e:	4605      	mov	r5, r0
 80002a0:	681c      	ldr	r4, [r3, #0]
 80002a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80002a4:	b123      	cbz	r3, 80002b0 <srand+0x18>
 80002a6:	2200      	movs	r2, #0
 80002a8:	611d      	str	r5, [r3, #16]
 80002aa:	615a      	str	r2, [r3, #20]
 80002ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80002b0:	2018      	movs	r0, #24
 80002b2:	f000 fa7b 	bl	80007ac <malloc>
 80002b6:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 80002ba:	f243 310e 	movw	r1, #13070	; 0x330e
 80002be:	4603      	mov	r3, r0
 80002c0:	f241 2e34 	movw	lr, #4660	; 0x1234
 80002c4:	f24e 676d 	movw	r7, #58989	; 0xe66d
 80002c8:	f64d 66ec 	movw	r6, #57068	; 0xdeec
 80002cc:	63a0      	str	r0, [r4, #56]	; 0x38
 80002ce:	8042      	strh	r2, [r0, #2]
 80002d0:	220b      	movs	r2, #11
 80002d2:	8001      	strh	r1, [r0, #0]
 80002d4:	8182      	strh	r2, [r0, #12]
 80002d6:	f04f 0801 	mov.w	r8, #1
 80002da:	f04f 0900 	mov.w	r9, #0
 80002de:	2105      	movs	r1, #5
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c0 8904 	strd	r8, r9, [r0, #16]
 80002e6:	f8a0 e004 	strh.w	lr, [r0, #4]
 80002ea:	80c7      	strh	r7, [r0, #6]
 80002ec:	8106      	strh	r6, [r0, #8]
 80002ee:	8141      	strh	r1, [r0, #10]
 80002f0:	611d      	str	r5, [r3, #16]
 80002f2:	615a      	str	r2, [r3, #20]
 80002f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80002f8:	20000000 	andcs	r0, r0, r0

080002fc <rand>:
 80002fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000300:	4b23      	ldr	r3, [pc, #140]	; (8000390 <rand+0x94>)
 8000302:	681c      	ldr	r4, [r3, #0]
 8000304:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000306:	b199      	cbz	r1, 8000330 <rand+0x34>
 8000308:	690b      	ldr	r3, [r1, #16]
 800030a:	4c22      	ldr	r4, [pc, #136]	; (8000394 <rand+0x98>)
 800030c:	6948      	ldr	r0, [r1, #20]
 800030e:	fb04 f403 	mul.w	r4, r4, r3
 8000312:	4a21      	ldr	r2, [pc, #132]	; (8000398 <rand+0x9c>)
 8000314:	fb02 4000 	mla	r0, r2, r0, r4
 8000318:	fba3 2302 	umull	r2, r3, r3, r2
 800031c:	3201      	adds	r2, #1
 800031e:	4403      	add	r3, r0
 8000320:	f143 0300 	adc.w	r3, r3, #0
 8000324:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8000328:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800032c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000330:	2018      	movs	r0, #24
 8000332:	f000 fa3b 	bl	80007ac <malloc>
 8000336:	a314      	add	r3, pc, #80	; (adr r3, 8000388 <rand+0x8c>)
 8000338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800033c:	4605      	mov	r5, r0
 800033e:	f64a 36cd 	movw	r6, #43981	; 0xabcd
 8000342:	f243 3c0e 	movw	ip, #13070	; 0x330e
 8000346:	f241 2e34 	movw	lr, #4660	; 0x1234
 800034a:	f24e 606d 	movw	r0, #58989	; 0xe66d
 800034e:	f64d 67ec 	movw	r7, #57068	; 0xdeec
 8000352:	4629      	mov	r1, r5
 8000354:	63a5      	str	r5, [r4, #56]	; 0x38
 8000356:	f04f 0801 	mov.w	r8, #1
 800035a:	806e      	strh	r6, [r5, #2]
 800035c:	f04f 0900 	mov.w	r9, #0
 8000360:	2605      	movs	r6, #5
 8000362:	240b      	movs	r4, #11
 8000364:	80e8      	strh	r0, [r5, #6]
 8000366:	e9c5 8904 	strd	r8, r9, [r5, #16]
 800036a:	f8a5 c000 	strh.w	ip, [r5]
 800036e:	f8a5 e004 	strh.w	lr, [r5, #4]
 8000372:	812f      	strh	r7, [r5, #8]
 8000374:	816e      	strh	r6, [r5, #10]
 8000376:	81ac      	strh	r4, [r5, #12]
 8000378:	4806      	ldr	r0, [pc, #24]	; (8000394 <rand+0x98>)
 800037a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800037e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000382:	bf00      	nop
 8000384:	f3af 8000 	nop.w
 8000388:	4c957f2e 	ldcmi	15, cr7, [r5], {46}	; 0x2e
 800038c:	5851f42d 	ldmdapl	r1, {r0, r2, r3, r5, sl, ip, sp, lr, pc}^
 8000390:	20000000 	andcs	r0, r0, r0
 8000394:	5851f42d 	ldmdapl	r1, {r0, r2, r3, r5, sl, ip, sp, lr, pc}^
 8000398:	4c957f2d 	ldcmi	15, cr7, [r5], {45}	; 0x2d

0800039c <_sniprintf_r>:
 800039c:	b408      	push	{r3}
 800039e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	b09c      	sub	sp, #112	; 0x70
 80003a4:	db3b      	blt.n	800041e <_sniprintf_r+0x82>
 80003a6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80003aa:	4614      	mov	r4, r2
 80003ac:	4605      	mov	r5, r0
 80003ae:	9102      	str	r1, [sp, #8]
 80003b0:	9106      	str	r1, [sp, #24]
 80003b2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80003b6:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80003ba:	ae22      	add	r6, sp, #136	; 0x88
 80003bc:	d014      	beq.n	80003e8 <_sniprintf_r+0x4c>
 80003be:	1e54      	subs	r4, r2, #1
 80003c0:	4633      	mov	r3, r6
 80003c2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80003c4:	a902      	add	r1, sp, #8
 80003c6:	9404      	str	r4, [sp, #16]
 80003c8:	9407      	str	r4, [sp, #28]
 80003ca:	f8ad 7016 	strh.w	r7, [sp, #22]
 80003ce:	9601      	str	r6, [sp, #4]
 80003d0:	f000 fb84 	bl	8000adc <_svfiprintf_r>
 80003d4:	1c42      	adds	r2, r0, #1
 80003d6:	db18      	blt.n	800040a <_sniprintf_r+0x6e>
 80003d8:	9b02      	ldr	r3, [sp, #8]
 80003da:	2200      	movs	r2, #0
 80003dc:	701a      	strb	r2, [r3, #0]
 80003de:	b01c      	add	sp, #112	; 0x70
 80003e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80003e4:	b001      	add	sp, #4
 80003e6:	4770      	bx	lr
 80003e8:	4633      	mov	r3, r6
 80003ea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80003ec:	a902      	add	r1, sp, #8
 80003ee:	9404      	str	r4, [sp, #16]
 80003f0:	9407      	str	r4, [sp, #28]
 80003f2:	f8ad 7016 	strh.w	r7, [sp, #22]
 80003f6:	9601      	str	r6, [sp, #4]
 80003f8:	f000 fb70 	bl	8000adc <_svfiprintf_r>
 80003fc:	1c43      	adds	r3, r0, #1
 80003fe:	db07      	blt.n	8000410 <_sniprintf_r+0x74>
 8000400:	b01c      	add	sp, #112	; 0x70
 8000402:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000406:	b001      	add	sp, #4
 8000408:	4770      	bx	lr
 800040a:	238b      	movs	r3, #139	; 0x8b
 800040c:	602b      	str	r3, [r5, #0]
 800040e:	e7e3      	b.n	80003d8 <_sniprintf_r+0x3c>
 8000410:	238b      	movs	r3, #139	; 0x8b
 8000412:	602b      	str	r3, [r5, #0]
 8000414:	b01c      	add	sp, #112	; 0x70
 8000416:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800041a:	b001      	add	sp, #4
 800041c:	4770      	bx	lr
 800041e:	228b      	movs	r2, #139	; 0x8b
 8000420:	6002      	str	r2, [r0, #0]
 8000422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000426:	e7eb      	b.n	8000400 <_sniprintf_r+0x64>

08000428 <sniprintf>:
 8000428:	b40c      	push	{r2, r3}
 800042a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042c:	4b23      	ldr	r3, [pc, #140]	; (80004bc <sniprintf+0x94>)
 800042e:	2900      	cmp	r1, #0
 8000430:	b09d      	sub	sp, #116	; 0x74
 8000432:	681d      	ldr	r5, [r3, #0]
 8000434:	db3c      	blt.n	80004b0 <sniprintf+0x88>
 8000436:	f44f 7302 	mov.w	r3, #520	; 0x208
 800043a:	460c      	mov	r4, r1
 800043c:	9002      	str	r0, [sp, #8]
 800043e:	9006      	str	r0, [sp, #24]
 8000440:	f8ad 3014 	strh.w	r3, [sp, #20]
 8000444:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8000448:	ae23      	add	r6, sp, #140	; 0x8c
 800044a:	d015      	beq.n	8000478 <sniprintf+0x50>
 800044c:	1e4c      	subs	r4, r1, #1
 800044e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8000450:	4633      	mov	r3, r6
 8000452:	a902      	add	r1, sp, #8
 8000454:	4628      	mov	r0, r5
 8000456:	9404      	str	r4, [sp, #16]
 8000458:	9407      	str	r4, [sp, #28]
 800045a:	f8ad 7016 	strh.w	r7, [sp, #22]
 800045e:	9601      	str	r6, [sp, #4]
 8000460:	f000 fb3c 	bl	8000adc <_svfiprintf_r>
 8000464:	1c42      	adds	r2, r0, #1
 8000466:	db19      	blt.n	800049c <sniprintf+0x74>
 8000468:	9b02      	ldr	r3, [sp, #8]
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
 800046e:	b01d      	add	sp, #116	; 0x74
 8000470:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000474:	b002      	add	sp, #8
 8000476:	4770      	bx	lr
 8000478:	4633      	mov	r3, r6
 800047a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800047c:	a902      	add	r1, sp, #8
 800047e:	4628      	mov	r0, r5
 8000480:	9404      	str	r4, [sp, #16]
 8000482:	9407      	str	r4, [sp, #28]
 8000484:	f8ad 7016 	strh.w	r7, [sp, #22]
 8000488:	9601      	str	r6, [sp, #4]
 800048a:	f000 fb27 	bl	8000adc <_svfiprintf_r>
 800048e:	1c43      	adds	r3, r0, #1
 8000490:	db07      	blt.n	80004a2 <sniprintf+0x7a>
 8000492:	b01d      	add	sp, #116	; 0x74
 8000494:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000498:	b002      	add	sp, #8
 800049a:	4770      	bx	lr
 800049c:	238b      	movs	r3, #139	; 0x8b
 800049e:	602b      	str	r3, [r5, #0]
 80004a0:	e7e2      	b.n	8000468 <sniprintf+0x40>
 80004a2:	238b      	movs	r3, #139	; 0x8b
 80004a4:	602b      	str	r3, [r5, #0]
 80004a6:	b01d      	add	sp, #116	; 0x74
 80004a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80004ac:	b002      	add	sp, #8
 80004ae:	4770      	bx	lr
 80004b0:	238b      	movs	r3, #139	; 0x8b
 80004b2:	602b      	str	r3, [r5, #0]
 80004b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004b8:	e7eb      	b.n	8000492 <sniprintf+0x6a>
 80004ba:	bf00      	nop
 80004bc:	20000000 	andcs	r0, r0, r0

080004c0 <strchr>:
 80004c0:	b470      	push	{r4, r5, r6}
 80004c2:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
 80004c6:	d034      	beq.n	8000532 <strchr+0x72>
 80004c8:	0785      	lsls	r5, r0, #30
 80004ca:	d00f      	beq.n	80004ec <strchr+0x2c>
 80004cc:	7803      	ldrb	r3, [r0, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d05a      	beq.n	8000588 <strchr+0xc8>
 80004d2:	429c      	cmp	r4, r3
 80004d4:	d02b      	beq.n	800052e <strchr+0x6e>
 80004d6:	1c43      	adds	r3, r0, #1
 80004d8:	e005      	b.n	80004e6 <strchr+0x26>
 80004da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004de:	2a00      	cmp	r2, #0
 80004e0:	d04f      	beq.n	8000582 <strchr+0xc2>
 80004e2:	4294      	cmp	r4, r2
 80004e4:	d023      	beq.n	800052e <strchr+0x6e>
 80004e6:	079a      	lsls	r2, r3, #30
 80004e8:	4618      	mov	r0, r3
 80004ea:	d1f6      	bne.n	80004da <strchr+0x1a>
 80004ec:	020e      	lsls	r6, r1, #8
 80004ee:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80004f2:	4326      	orrs	r6, r4
 80004f4:	6803      	ldr	r3, [r0, #0]
 80004f6:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 80004fa:	e001      	b.n	8000500 <strchr+0x40>
 80004fc:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8000500:	ea86 0503 	eor.w	r5, r6, r3
 8000504:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 8000508:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
 800050c:	ea22 0205 	bic.w	r2, r2, r5
 8000510:	ea21 0303 	bic.w	r3, r1, r3
 8000514:	4313      	orrs	r3, r2
 8000516:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800051a:	d0ef      	beq.n	80004fc <strchr+0x3c>
 800051c:	7803      	ldrb	r3, [r0, #0]
 800051e:	b923      	cbnz	r3, 800052a <strchr+0x6a>
 8000520:	e032      	b.n	8000588 <strchr+0xc8>
 8000522:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8000526:	2b00      	cmp	r3, #0
 8000528:	d02e      	beq.n	8000588 <strchr+0xc8>
 800052a:	429c      	cmp	r4, r3
 800052c:	d1f9      	bne.n	8000522 <strchr+0x62>
 800052e:	bc70      	pop	{r4, r5, r6}
 8000530:	4770      	bx	lr
 8000532:	0784      	lsls	r4, r0, #30
 8000534:	d00b      	beq.n	800054e <strchr+0x8e>
 8000536:	7803      	ldrb	r3, [r0, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d0f8      	beq.n	800052e <strchr+0x6e>
 800053c:	1c43      	adds	r3, r0, #1
 800053e:	e003      	b.n	8000548 <strchr+0x88>
 8000540:	7802      	ldrb	r2, [r0, #0]
 8000542:	3301      	adds	r3, #1
 8000544:	2a00      	cmp	r2, #0
 8000546:	d0f2      	beq.n	800052e <strchr+0x6e>
 8000548:	0799      	lsls	r1, r3, #30
 800054a:	4618      	mov	r0, r3
 800054c:	d1f8      	bne.n	8000540 <strchr+0x80>
 800054e:	6802      	ldr	r2, [r0, #0]
 8000550:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8000554:	ea23 0302 	bic.w	r3, r3, r2
 8000558:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800055c:	d108      	bne.n	8000570 <strchr+0xb0>
 800055e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8000562:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8000566:	ea23 0302 	bic.w	r3, r3, r2
 800056a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800056e:	d0f6      	beq.n	800055e <strchr+0x9e>
 8000570:	7803      	ldrb	r3, [r0, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0db      	beq.n	800052e <strchr+0x6e>
 8000576:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1fb      	bne.n	8000576 <strchr+0xb6>
 800057e:	bc70      	pop	{r4, r5, r6}
 8000580:	4770      	bx	lr
 8000582:	4610      	mov	r0, r2
 8000584:	bc70      	pop	{r4, r5, r6}
 8000586:	4770      	bx	lr
 8000588:	4618      	mov	r0, r3
 800058a:	bc70      	pop	{r4, r5, r6}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <strcpy>:
 8000590:	ea80 0201 	eor.w	r2, r0, r1
 8000594:	4684      	mov	ip, r0
 8000596:	f012 0f03 	tst.w	r2, #3
 800059a:	d14f      	bne.n	800063c <strcpy+0xac>
 800059c:	f011 0f03 	tst.w	r1, #3
 80005a0:	d132      	bne.n	8000608 <strcpy+0x78>
 80005a2:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80005a6:	f011 0f04 	tst.w	r1, #4
 80005aa:	f851 3b04 	ldr.w	r3, [r1], #4
 80005ae:	d00b      	beq.n	80005c8 <strcpy+0x38>
 80005b0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80005b4:	439a      	bics	r2, r3
 80005b6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80005ba:	bf04      	itt	eq
 80005bc:	f84c 3b04 	streq.w	r3, [ip], #4
 80005c0:	f851 3b04 	ldreq.w	r3, [r1], #4
 80005c4:	d116      	bne.n	80005f4 <strcpy+0x64>
 80005c6:	bf00      	nop
 80005c8:	f851 4b04 	ldr.w	r4, [r1], #4
 80005cc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80005d0:	439a      	bics	r2, r3
 80005d2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80005d6:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80005da:	d10b      	bne.n	80005f4 <strcpy+0x64>
 80005dc:	f84c 3b04 	str.w	r3, [ip], #4
 80005e0:	43a2      	bics	r2, r4
 80005e2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80005e6:	bf04      	itt	eq
 80005e8:	f851 3b04 	ldreq.w	r3, [r1], #4
 80005ec:	f84c 4b04 	streq.w	r4, [ip], #4
 80005f0:	d0ea      	beq.n	80005c8 <strcpy+0x38>
 80005f2:	4623      	mov	r3, r4
 80005f4:	f80c 3b01 	strb.w	r3, [ip], #1
 80005f8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80005fc:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000600:	d1f8      	bne.n	80005f4 <strcpy+0x64>
 8000602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	f011 0f01 	tst.w	r1, #1
 800060c:	d006      	beq.n	800061c <strcpy+0x8c>
 800060e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000612:	f80c 2b01 	strb.w	r2, [ip], #1
 8000616:	2a00      	cmp	r2, #0
 8000618:	bf08      	it	eq
 800061a:	4770      	bxeq	lr
 800061c:	f011 0f02 	tst.w	r1, #2
 8000620:	d0bf      	beq.n	80005a2 <strcpy+0x12>
 8000622:	f831 2b02 	ldrh.w	r2, [r1], #2
 8000626:	f012 0fff 	tst.w	r2, #255	; 0xff
 800062a:	bf16      	itet	ne
 800062c:	f82c 2b02 	strhne.w	r2, [ip], #2
 8000630:	f88c 2000 	strbeq.w	r2, [ip]
 8000634:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8000638:	d1b3      	bne.n	80005a2 <strcpy+0x12>
 800063a:	4770      	bx	lr
 800063c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000640:	f80c 2b01 	strb.w	r2, [ip], #1
 8000644:	2a00      	cmp	r2, #0
 8000646:	d1f9      	bne.n	800063c <strcpy+0xac>
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <strlen>:
 800064c:	f020 0103 	bic.w	r1, r0, #3
 8000650:	f010 0003 	ands.w	r0, r0, #3
 8000654:	f1c0 0000 	rsb	r0, r0, #0
 8000658:	f851 3b04 	ldr.w	r3, [r1], #4
 800065c:	f100 0c04 	add.w	ip, r0, #4
 8000660:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000664:	f06f 0200 	mvn.w	r2, #0
 8000668:	bf1c      	itt	ne
 800066a:	fa22 f20c 	lsrne.w	r2, r2, ip
 800066e:	4313      	orrne	r3, r2
 8000670:	f04f 0c01 	mov.w	ip, #1
 8000674:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8000678:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800067c:	eba3 020c 	sub.w	r2, r3, ip
 8000680:	ea22 0203 	bic.w	r2, r2, r3
 8000684:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8000688:	bf04      	itt	eq
 800068a:	f851 3b04 	ldreq.w	r3, [r1], #4
 800068e:	3004      	addeq	r0, #4
 8000690:	d0f4      	beq.n	800067c <strlen+0x30>
 8000692:	f1c2 0100 	rsb	r1, r2, #0
 8000696:	ea02 0201 	and.w	r2, r2, r1
 800069a:	fab2 f282 	clz	r2, r2
 800069e:	f1c2 021f 	rsb	r2, r2, #31
 80006a2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80006a6:	4770      	bx	lr

080006a8 <strncmp>:
 80006a8:	2a00      	cmp	r2, #0
 80006aa:	d03f      	beq.n	800072c <strncmp+0x84>
 80006ac:	ea40 0301 	orr.w	r3, r0, r1
 80006b0:	f013 0303 	ands.w	r3, r3, #3
 80006b4:	b4f0      	push	{r4, r5, r6, r7}
 80006b6:	d125      	bne.n	8000704 <strncmp+0x5c>
 80006b8:	2a03      	cmp	r2, #3
 80006ba:	d923      	bls.n	8000704 <strncmp+0x5c>
 80006bc:	6804      	ldr	r4, [r0, #0]
 80006be:	680d      	ldr	r5, [r1, #0]
 80006c0:	42ac      	cmp	r4, r5
 80006c2:	d11f      	bne.n	8000704 <strncmp+0x5c>
 80006c4:	3a04      	subs	r2, #4
 80006c6:	d033      	beq.n	8000730 <strncmp+0x88>
 80006c8:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 80006cc:	ea25 0404 	bic.w	r4, r5, r4
 80006d0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80006d4:	d12f      	bne.n	8000736 <strncmp+0x8e>
 80006d6:	1d07      	adds	r7, r0, #4
 80006d8:	1d0d      	adds	r5, r1, #4
 80006da:	e00d      	b.n	80006f8 <strncmp+0x50>
 80006dc:	f857 3b04 	ldr.w	r3, [r7], #4
 80006e0:	680e      	ldr	r6, [r1, #0]
 80006e2:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 80006e6:	42b3      	cmp	r3, r6
 80006e8:	ea24 0403 	bic.w	r4, r4, r3
 80006ec:	d10a      	bne.n	8000704 <strncmp+0x5c>
 80006ee:	3a04      	subs	r2, #4
 80006f0:	d01e      	beq.n	8000730 <strncmp+0x88>
 80006f2:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80006f6:	d121      	bne.n	800073c <strncmp+0x94>
 80006f8:	2a03      	cmp	r2, #3
 80006fa:	4629      	mov	r1, r5
 80006fc:	4638      	mov	r0, r7
 80006fe:	f105 0504 	add.w	r5, r5, #4
 8000702:	d8eb      	bhi.n	80006dc <strncmp+0x34>
 8000704:	7803      	ldrb	r3, [r0, #0]
 8000706:	780c      	ldrb	r4, [r1, #0]
 8000708:	3a01      	subs	r2, #1
 800070a:	429c      	cmp	r4, r3
 800070c:	d10b      	bne.n	8000726 <strncmp+0x7e>
 800070e:	b17a      	cbz	r2, 8000730 <strncmp+0x88>
 8000710:	b914      	cbnz	r4, 8000718 <strncmp+0x70>
 8000712:	e015      	b.n	8000740 <strncmp+0x98>
 8000714:	b162      	cbz	r2, 8000730 <strncmp+0x88>
 8000716:	b173      	cbz	r3, 8000736 <strncmp+0x8e>
 8000718:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800071c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8000720:	3a01      	subs	r2, #1
 8000722:	42a3      	cmp	r3, r4
 8000724:	d0f6      	beq.n	8000714 <strncmp+0x6c>
 8000726:	1b18      	subs	r0, r3, r4
 8000728:	bcf0      	pop	{r4, r5, r6, r7}
 800072a:	4770      	bx	lr
 800072c:	4610      	mov	r0, r2
 800072e:	4770      	bx	lr
 8000730:	4610      	mov	r0, r2
 8000732:	bcf0      	pop	{r4, r5, r6, r7}
 8000734:	4770      	bx	lr
 8000736:	4618      	mov	r0, r3
 8000738:	bcf0      	pop	{r4, r5, r6, r7}
 800073a:	4770      	bx	lr
 800073c:	2000      	movs	r0, #0
 800073e:	e7f3      	b.n	8000728 <strncmp+0x80>
 8000740:	4620      	mov	r0, r4
 8000742:	e7f1      	b.n	8000728 <strncmp+0x80>

08000744 <strncpy>:
 8000744:	ea40 0301 	orr.w	r3, r0, r1
 8000748:	079b      	lsls	r3, r3, #30
 800074a:	b470      	push	{r4, r5, r6}
 800074c:	d12b      	bne.n	80007a6 <strncpy+0x62>
 800074e:	2a03      	cmp	r2, #3
 8000750:	d929      	bls.n	80007a6 <strncpy+0x62>
 8000752:	460c      	mov	r4, r1
 8000754:	4603      	mov	r3, r0
 8000756:	4621      	mov	r1, r4
 8000758:	f854 6b04 	ldr.w	r6, [r4], #4
 800075c:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 8000760:	ea25 0506 	bic.w	r5, r5, r6
 8000764:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8000768:	d106      	bne.n	8000778 <strncpy+0x34>
 800076a:	3a04      	subs	r2, #4
 800076c:	2a03      	cmp	r2, #3
 800076e:	f843 6b04 	str.w	r6, [r3], #4
 8000772:	4621      	mov	r1, r4
 8000774:	d8ef      	bhi.n	8000756 <strncpy+0x12>
 8000776:	b1a2      	cbz	r2, 80007a2 <strncpy+0x5e>
 8000778:	780c      	ldrb	r4, [r1, #0]
 800077a:	3a01      	subs	r2, #1
 800077c:	701c      	strb	r4, [r3, #0]
 800077e:	3101      	adds	r1, #1
 8000780:	3301      	adds	r3, #1
 8000782:	b13c      	cbz	r4, 8000794 <strncpy+0x50>
 8000784:	b16a      	cbz	r2, 80007a2 <strncpy+0x5e>
 8000786:	f811 4b01 	ldrb.w	r4, [r1], #1
 800078a:	3a01      	subs	r2, #1
 800078c:	f803 4b01 	strb.w	r4, [r3], #1
 8000790:	2c00      	cmp	r4, #0
 8000792:	d1f7      	bne.n	8000784 <strncpy+0x40>
 8000794:	b12a      	cbz	r2, 80007a2 <strncpy+0x5e>
 8000796:	441a      	add	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	f803 1b01 	strb.w	r1, [r3], #1
 800079e:	429a      	cmp	r2, r3
 80007a0:	d1fb      	bne.n	800079a <strncpy+0x56>
 80007a2:	bc70      	pop	{r4, r5, r6}
 80007a4:	4770      	bx	lr
 80007a6:	4603      	mov	r3, r0
 80007a8:	e7e5      	b.n	8000776 <strncpy+0x32>
 80007aa:	bf00      	nop

080007ac <malloc>:
 80007ac:	4b02      	ldr	r3, [pc, #8]	; (80007b8 <malloc+0xc>)
 80007ae:	4601      	mov	r1, r0
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	f000 b851 	b.w	8000858 <_malloc_r>
 80007b6:	bf00      	nop
 80007b8:	20000000 	andcs	r0, r0, r0

080007bc <free>:
 80007bc:	4b02      	ldr	r3, [pc, #8]	; (80007c8 <free+0xc>)
 80007be:	4601      	mov	r1, r0
 80007c0:	6818      	ldr	r0, [r3, #0]
 80007c2:	f000 b803 	b.w	80007cc <_free_r>
 80007c6:	bf00      	nop
 80007c8:	20000000 	andcs	r0, r0, r0

080007cc <_free_r>:
 80007cc:	b430      	push	{r4, r5}
 80007ce:	b181      	cbz	r1, 80007f2 <_free_r+0x26>
 80007d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80007d4:	3904      	subs	r1, #4
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	bfb8      	it	lt
 80007da:	18c9      	addlt	r1, r1, r3
 80007dc:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <_free_r+0x88>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	b12a      	cbz	r2, 80007ee <_free_r+0x22>
 80007e2:	428a      	cmp	r2, r1
 80007e4:	d90a      	bls.n	80007fc <_free_r+0x30>
 80007e6:	6808      	ldr	r0, [r1, #0]
 80007e8:	180c      	adds	r4, r1, r0
 80007ea:	42a2      	cmp	r2, r4
 80007ec:	d025      	beq.n	800083a <_free_r+0x6e>
 80007ee:	604a      	str	r2, [r1, #4]
 80007f0:	6019      	str	r1, [r3, #0]
 80007f2:	bc30      	pop	{r4, r5}
 80007f4:	4770      	bx	lr
 80007f6:	428b      	cmp	r3, r1
 80007f8:	d803      	bhi.n	8000802 <_free_r+0x36>
 80007fa:	461a      	mov	r2, r3
 80007fc:	6853      	ldr	r3, [r2, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1f9      	bne.n	80007f6 <_free_r+0x2a>
 8000802:	6814      	ldr	r4, [r2, #0]
 8000804:	1915      	adds	r5, r2, r4
 8000806:	428d      	cmp	r5, r1
 8000808:	d00c      	beq.n	8000824 <_free_r+0x58>
 800080a:	d807      	bhi.n	800081c <_free_r+0x50>
 800080c:	6808      	ldr	r0, [r1, #0]
 800080e:	180c      	adds	r4, r1, r0
 8000810:	429c      	cmp	r4, r3
 8000812:	d018      	beq.n	8000846 <_free_r+0x7a>
 8000814:	bc30      	pop	{r4, r5}
 8000816:	604b      	str	r3, [r1, #4]
 8000818:	6051      	str	r1, [r2, #4]
 800081a:	4770      	bx	lr
 800081c:	230c      	movs	r3, #12
 800081e:	6003      	str	r3, [r0, #0]
 8000820:	bc30      	pop	{r4, r5}
 8000822:	4770      	bx	lr
 8000824:	6809      	ldr	r1, [r1, #0]
 8000826:	440c      	add	r4, r1
 8000828:	1911      	adds	r1, r2, r4
 800082a:	4299      	cmp	r1, r3
 800082c:	6014      	str	r4, [r2, #0]
 800082e:	d1e0      	bne.n	80007f2 <_free_r+0x26>
 8000830:	cb0a      	ldmia	r3, {r1, r3}
 8000832:	440c      	add	r4, r1
 8000834:	6014      	str	r4, [r2, #0]
 8000836:	6053      	str	r3, [r2, #4]
 8000838:	e7db      	b.n	80007f2 <_free_r+0x26>
 800083a:	6814      	ldr	r4, [r2, #0]
 800083c:	6852      	ldr	r2, [r2, #4]
 800083e:	4420      	add	r0, r4
 8000840:	e881 0005 	stmia.w	r1, {r0, r2}
 8000844:	e7d4      	b.n	80007f0 <_free_r+0x24>
 8000846:	681c      	ldr	r4, [r3, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	4420      	add	r0, r4
 800084c:	e881 0009 	stmia.w	r1, {r0, r3}
 8000850:	6051      	str	r1, [r2, #4]
 8000852:	e7ce      	b.n	80007f2 <_free_r+0x26>
 8000854:	200000ec 	andcs	r0, r0, ip, ror #1

08000858 <_malloc_r>:
 8000858:	b570      	push	{r4, r5, r6, lr}
 800085a:	1ccd      	adds	r5, r1, #3
 800085c:	f025 0503 	bic.w	r5, r5, #3
 8000860:	3508      	adds	r5, #8
 8000862:	2d0c      	cmp	r5, #12
 8000864:	bf38      	it	cc
 8000866:	250c      	movcc	r5, #12
 8000868:	2d00      	cmp	r5, #0
 800086a:	4606      	mov	r6, r0
 800086c:	db3b      	blt.n	80008e6 <_malloc_r+0x8e>
 800086e:	42a9      	cmp	r1, r5
 8000870:	d839      	bhi.n	80008e6 <_malloc_r+0x8e>
 8000872:	4927      	ldr	r1, [pc, #156]	; (8000910 <_malloc_r+0xb8>)
 8000874:	680a      	ldr	r2, [r1, #0]
 8000876:	b152      	cbz	r2, 800088e <_malloc_r+0x36>
 8000878:	6813      	ldr	r3, [r2, #0]
 800087a:	1b5b      	subs	r3, r3, r5
 800087c:	d404      	bmi.n	8000888 <_malloc_r+0x30>
 800087e:	e036      	b.n	80008ee <_malloc_r+0x96>
 8000880:	6823      	ldr	r3, [r4, #0]
 8000882:	1b5b      	subs	r3, r3, r5
 8000884:	d51a      	bpl.n	80008bc <_malloc_r+0x64>
 8000886:	4622      	mov	r2, r4
 8000888:	6854      	ldr	r4, [r2, #4]
 800088a:	2c00      	cmp	r4, #0
 800088c:	d1f8      	bne.n	8000880 <_malloc_r+0x28>
 800088e:	6849      	ldr	r1, [r1, #4]
 8000890:	4c1f      	ldr	r4, [pc, #124]	; (8000910 <_malloc_r+0xb8>)
 8000892:	2900      	cmp	r1, #0
 8000894:	d036      	beq.n	8000904 <_malloc_r+0xac>
 8000896:	4629      	mov	r1, r5
 8000898:	4630      	mov	r0, r6
 800089a:	f000 fc2b 	bl	80010f4 <_sbrk_r>
 800089e:	1c43      	adds	r3, r0, #1
 80008a0:	d021      	beq.n	80008e6 <_malloc_r+0x8e>
 80008a2:	1cc4      	adds	r4, r0, #3
 80008a4:	f024 0403 	bic.w	r4, r4, #3
 80008a8:	42a0      	cmp	r0, r4
 80008aa:	d005      	beq.n	80008b8 <_malloc_r+0x60>
 80008ac:	1a21      	subs	r1, r4, r0
 80008ae:	4630      	mov	r0, r6
 80008b0:	f000 fc20 	bl	80010f4 <_sbrk_r>
 80008b4:	3001      	adds	r0, #1
 80008b6:	d016      	beq.n	80008e6 <_malloc_r+0x8e>
 80008b8:	6025      	str	r5, [r4, #0]
 80008ba:	e004      	b.n	80008c6 <_malloc_r+0x6e>
 80008bc:	2b0b      	cmp	r3, #11
 80008be:	d90d      	bls.n	80008dc <_malloc_r+0x84>
 80008c0:	6023      	str	r3, [r4, #0]
 80008c2:	441c      	add	r4, r3
 80008c4:	6025      	str	r5, [r4, #0]
 80008c6:	f104 000b 	add.w	r0, r4, #11
 80008ca:	f020 0007 	bic.w	r0, r0, #7
 80008ce:	1d23      	adds	r3, r4, #4
 80008d0:	1ac3      	subs	r3, r0, r3
 80008d2:	d002      	beq.n	80008da <_malloc_r+0x82>
 80008d4:	425a      	negs	r2, r3
 80008d6:	50e2      	str	r2, [r4, r3]
 80008d8:	bd70      	pop	{r4, r5, r6, pc}
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	4294      	cmp	r4, r2
 80008de:	d00e      	beq.n	80008fe <_malloc_r+0xa6>
 80008e0:	6863      	ldr	r3, [r4, #4]
 80008e2:	6053      	str	r3, [r2, #4]
 80008e4:	e7ef      	b.n	80008c6 <_malloc_r+0x6e>
 80008e6:	230c      	movs	r3, #12
 80008e8:	6033      	str	r3, [r6, #0]
 80008ea:	2000      	movs	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	2b0b      	cmp	r3, #11
 80008f0:	d803      	bhi.n	80008fa <_malloc_r+0xa2>
 80008f2:	4614      	mov	r4, r2
 80008f4:	6853      	ldr	r3, [r2, #4]
 80008f6:	600b      	str	r3, [r1, #0]
 80008f8:	e7e5      	b.n	80008c6 <_malloc_r+0x6e>
 80008fa:	4614      	mov	r4, r2
 80008fc:	e7e0      	b.n	80008c0 <_malloc_r+0x68>
 80008fe:	4613      	mov	r3, r2
 8000900:	4614      	mov	r4, r2
 8000902:	e7f8      	b.n	80008f6 <_malloc_r+0x9e>
 8000904:	4630      	mov	r0, r6
 8000906:	f000 fbf5 	bl	80010f4 <_sbrk_r>
 800090a:	6060      	str	r0, [r4, #4]
 800090c:	e7c3      	b.n	8000896 <_malloc_r+0x3e>
 800090e:	bf00      	nop
 8000910:	200000ec 	andcs	r0, r0, ip, ror #1

08000914 <__ssputs_r>:
 8000914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000918:	688e      	ldr	r6, [r1, #8]
 800091a:	460c      	mov	r4, r1
 800091c:	429e      	cmp	r6, r3
 800091e:	461f      	mov	r7, r3
 8000920:	4690      	mov	r8, r2
 8000922:	d812      	bhi.n	800094a <__ssputs_r+0x36>
 8000924:	898b      	ldrh	r3, [r1, #12]
 8000926:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800092a:	d110      	bne.n	800094e <__ssputs_r+0x3a>
 800092c:	4635      	mov	r5, r6
 800092e:	6820      	ldr	r0, [r4, #0]
 8000930:	462a      	mov	r2, r5
 8000932:	4641      	mov	r1, r8
 8000934:	f000 fc36 	bl	80011a4 <memmove>
 8000938:	68a3      	ldr	r3, [r4, #8]
 800093a:	6822      	ldr	r2, [r4, #0]
 800093c:	1b9e      	subs	r6, r3, r6
 800093e:	4415      	add	r5, r2
 8000940:	60a6      	str	r6, [r4, #8]
 8000942:	6025      	str	r5, [r4, #0]
 8000944:	2000      	movs	r0, #0
 8000946:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800094a:	461e      	mov	r6, r3
 800094c:	e7ee      	b.n	800092c <__ssputs_r+0x18>
 800094e:	694d      	ldr	r5, [r1, #20]
 8000950:	6822      	ldr	r2, [r4, #0]
 8000952:	6909      	ldr	r1, [r1, #16]
 8000954:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000958:	ebc1 0a02 	rsb	sl, r1, r2
 800095c:	4681      	mov	r9, r0
 800095e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000962:	f10a 0001 	add.w	r0, sl, #1
 8000966:	106d      	asrs	r5, r5, #1
 8000968:	4438      	add	r0, r7
 800096a:	42a8      	cmp	r0, r5
 800096c:	462a      	mov	r2, r5
 800096e:	bf84      	itt	hi
 8000970:	4605      	movhi	r5, r0
 8000972:	462a      	movhi	r2, r5
 8000974:	055b      	lsls	r3, r3, #21
 8000976:	d510      	bpl.n	800099a <__ssputs_r+0x86>
 8000978:	4611      	mov	r1, r2
 800097a:	4648      	mov	r0, r9
 800097c:	f7ff ff6c 	bl	8000858 <_malloc_r>
 8000980:	4683      	mov	fp, r0
 8000982:	b1f8      	cbz	r0, 80009c4 <__ssputs_r+0xb0>
 8000984:	4652      	mov	r2, sl
 8000986:	6921      	ldr	r1, [r4, #16]
 8000988:	f7ff fbc2 	bl	8000110 <memcpy>
 800098c:	89a3      	ldrh	r3, [r4, #12]
 800098e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000996:	81a3      	strh	r3, [r4, #12]
 8000998:	e004      	b.n	80009a4 <__ssputs_r+0x90>
 800099a:	4648      	mov	r0, r9
 800099c:	f000 fc66 	bl	800126c <_realloc_r>
 80009a0:	4683      	mov	fp, r0
 80009a2:	b158      	cbz	r0, 80009bc <__ssputs_r+0xa8>
 80009a4:	ebca 0305 	rsb	r3, sl, r5
 80009a8:	eb0b 000a 	add.w	r0, fp, sl
 80009ac:	6165      	str	r5, [r4, #20]
 80009ae:	463e      	mov	r6, r7
 80009b0:	f8c4 b010 	str.w	fp, [r4, #16]
 80009b4:	6020      	str	r0, [r4, #0]
 80009b6:	60a3      	str	r3, [r4, #8]
 80009b8:	463d      	mov	r5, r7
 80009ba:	e7b9      	b.n	8000930 <__ssputs_r+0x1c>
 80009bc:	6921      	ldr	r1, [r4, #16]
 80009be:	4648      	mov	r0, r9
 80009c0:	f7ff ff04 	bl	80007cc <_free_r>
 80009c4:	230c      	movs	r3, #12
 80009c6:	f8c9 3000 	str.w	r3, [r9]
 80009ca:	89a3      	ldrh	r3, [r4, #12]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d4:	81a3      	strh	r3, [r4, #12]
 80009d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009da:	bf00      	nop

080009dc <__ssprint_r>:
 80009dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009e0:	6893      	ldr	r3, [r2, #8]
 80009e2:	b083      	sub	sp, #12
 80009e4:	4690      	mov	r8, r2
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d072      	beq.n	8000ad0 <__ssprint_r+0xf4>
 80009ea:	f04f 0900 	mov.w	r9, #0
 80009ee:	460d      	mov	r5, r1
 80009f0:	464c      	mov	r4, r9
 80009f2:	4683      	mov	fp, r0
 80009f4:	6816      	ldr	r6, [r2, #0]
 80009f6:	6808      	ldr	r0, [r1, #0]
 80009f8:	688b      	ldr	r3, [r1, #8]
 80009fa:	2c00      	cmp	r4, #0
 80009fc:	d045      	beq.n	8000a8a <__ssprint_r+0xae>
 80009fe:	429c      	cmp	r4, r3
 8000a00:	461f      	mov	r7, r3
 8000a02:	469a      	mov	sl, r3
 8000a04:	d346      	bcc.n	8000a94 <__ssprint_r+0xb8>
 8000a06:	89ab      	ldrh	r3, [r5, #12]
 8000a08:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8000a0c:	d02d      	beq.n	8000a6a <__ssprint_r+0x8e>
 8000a0e:	696f      	ldr	r7, [r5, #20]
 8000a10:	6929      	ldr	r1, [r5, #16]
 8000a12:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8000a16:	ebc1 0a00 	rsb	sl, r1, r0
 8000a1a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8000a1e:	1c60      	adds	r0, r4, #1
 8000a20:	107f      	asrs	r7, r7, #1
 8000a22:	4450      	add	r0, sl
 8000a24:	42b8      	cmp	r0, r7
 8000a26:	463a      	mov	r2, r7
 8000a28:	bf84      	itt	hi
 8000a2a:	4607      	movhi	r7, r0
 8000a2c:	463a      	movhi	r2, r7
 8000a2e:	055b      	lsls	r3, r3, #21
 8000a30:	d533      	bpl.n	8000a9a <__ssprint_r+0xbe>
 8000a32:	4611      	mov	r1, r2
 8000a34:	4658      	mov	r0, fp
 8000a36:	f7ff ff0f 	bl	8000858 <_malloc_r>
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	d037      	beq.n	8000aae <__ssprint_r+0xd2>
 8000a3e:	4652      	mov	r2, sl
 8000a40:	6929      	ldr	r1, [r5, #16]
 8000a42:	9001      	str	r0, [sp, #4]
 8000a44:	f7ff fb64 	bl	8000110 <memcpy>
 8000a48:	89aa      	ldrh	r2, [r5, #12]
 8000a4a:	9b01      	ldr	r3, [sp, #4]
 8000a4c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8000a50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a54:	81aa      	strh	r2, [r5, #12]
 8000a56:	ebca 0207 	rsb	r2, sl, r7
 8000a5a:	eb03 000a 	add.w	r0, r3, sl
 8000a5e:	616f      	str	r7, [r5, #20]
 8000a60:	46a2      	mov	sl, r4
 8000a62:	4627      	mov	r7, r4
 8000a64:	612b      	str	r3, [r5, #16]
 8000a66:	6028      	str	r0, [r5, #0]
 8000a68:	60aa      	str	r2, [r5, #8]
 8000a6a:	4652      	mov	r2, sl
 8000a6c:	4649      	mov	r1, r9
 8000a6e:	f000 fb99 	bl	80011a4 <memmove>
 8000a72:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8000a76:	68ab      	ldr	r3, [r5, #8]
 8000a78:	6828      	ldr	r0, [r5, #0]
 8000a7a:	1bdb      	subs	r3, r3, r7
 8000a7c:	4450      	add	r0, sl
 8000a7e:	1b14      	subs	r4, r2, r4
 8000a80:	60ab      	str	r3, [r5, #8]
 8000a82:	6028      	str	r0, [r5, #0]
 8000a84:	f8c8 4008 	str.w	r4, [r8, #8]
 8000a88:	b314      	cbz	r4, 8000ad0 <__ssprint_r+0xf4>
 8000a8a:	f8d6 9000 	ldr.w	r9, [r6]
 8000a8e:	6874      	ldr	r4, [r6, #4]
 8000a90:	3608      	adds	r6, #8
 8000a92:	e7b2      	b.n	80009fa <__ssprint_r+0x1e>
 8000a94:	4627      	mov	r7, r4
 8000a96:	46a2      	mov	sl, r4
 8000a98:	e7e7      	b.n	8000a6a <__ssprint_r+0x8e>
 8000a9a:	4658      	mov	r0, fp
 8000a9c:	f000 fbe6 	bl	800126c <_realloc_r>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	d1d7      	bne.n	8000a56 <__ssprint_r+0x7a>
 8000aa6:	6929      	ldr	r1, [r5, #16]
 8000aa8:	4658      	mov	r0, fp
 8000aaa:	f7ff fe8f 	bl	80007cc <_free_r>
 8000aae:	230c      	movs	r3, #12
 8000ab0:	f8cb 3000 	str.w	r3, [fp]
 8000ab4:	89ab      	ldrh	r3, [r5, #12]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	81ab      	strh	r3, [r5, #12]
 8000ac2:	f8c8 2008 	str.w	r2, [r8, #8]
 8000ac6:	f8c8 2004 	str.w	r2, [r8, #4]
 8000aca:	b003      	add	sp, #12
 8000acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f8c8 0004 	str.w	r0, [r8, #4]
 8000ad6:	b003      	add	sp, #12
 8000ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000adc <_svfiprintf_r>:
 8000adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae0:	460f      	mov	r7, r1
 8000ae2:	8989      	ldrh	r1, [r1, #12]
 8000ae4:	b09d      	sub	sp, #116	; 0x74
 8000ae6:	060c      	lsls	r4, r1, #24
 8000ae8:	4692      	mov	sl, r2
 8000aea:	9303      	str	r3, [sp, #12]
 8000aec:	4680      	mov	r8, r0
 8000aee:	d503      	bpl.n	8000af8 <_svfiprintf_r+0x1c>
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	f000 80f7 	beq.w	8000ce6 <_svfiprintf_r+0x20a>
 8000af8:	2330      	movs	r3, #48	; 0x30
 8000afa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000afe:	f89a 3000 	ldrb.w	r3, [sl]
 8000b02:	2100      	movs	r1, #0
 8000b04:	2220      	movs	r2, #32
 8000b06:	4d7f      	ldr	r5, [pc, #508]	; (8000d04 <_svfiprintf_r+0x228>)
 8000b08:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 8000d08 <_svfiprintf_r+0x22c>
 8000b0c:	9109      	str	r1, [sp, #36]	; 0x24
 8000b0e:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f000 808c 	beq.w	8000c30 <_svfiprintf_r+0x154>
 8000b18:	2b25      	cmp	r3, #37	; 0x25
 8000b1a:	4654      	mov	r4, sl
 8000b1c:	d103      	bne.n	8000b26 <_svfiprintf_r+0x4a>
 8000b1e:	e017      	b.n	8000b50 <_svfiprintf_r+0x74>
 8000b20:	2b25      	cmp	r3, #37	; 0x25
 8000b22:	f000 808e 	beq.w	8000c42 <_svfiprintf_r+0x166>
 8000b26:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1f8      	bne.n	8000b20 <_svfiprintf_r+0x44>
 8000b2e:	ebb4 0b0a 	subs.w	fp, r4, sl
 8000b32:	d07d      	beq.n	8000c30 <_svfiprintf_r+0x154>
 8000b34:	4652      	mov	r2, sl
 8000b36:	465b      	mov	r3, fp
 8000b38:	4639      	mov	r1, r7
 8000b3a:	4640      	mov	r0, r8
 8000b3c:	f7ff feea 	bl	8000914 <__ssputs_r>
 8000b40:	3001      	adds	r0, #1
 8000b42:	d075      	beq.n	8000c30 <_svfiprintf_r+0x154>
 8000b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b46:	7822      	ldrb	r2, [r4, #0]
 8000b48:	445b      	add	r3, fp
 8000b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8000b4c:	2a00      	cmp	r2, #0
 8000b4e:	d06f      	beq.n	8000c30 <_svfiprintf_r+0x154>
 8000b50:	2200      	movs	r2, #0
 8000b52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b56:	1c63      	adds	r3, r4, #1
 8000b58:	9204      	str	r2, [sp, #16]
 8000b5a:	9207      	str	r2, [sp, #28]
 8000b5c:	9206      	str	r2, [sp, #24]
 8000b5e:	f88d 2053 	strb.w	r2, [sp, #83]	; 0x53
 8000b62:	921a      	str	r2, [sp, #104]	; 0x68
 8000b64:	9105      	str	r1, [sp, #20]
 8000b66:	2401      	movs	r4, #1
 8000b68:	e005      	b.n	8000b76 <_svfiprintf_r+0x9a>
 8000b6a:	9a04      	ldr	r2, [sp, #16]
 8000b6c:	1b40      	subs	r0, r0, r5
 8000b6e:	fa04 f000 	lsl.w	r0, r4, r0
 8000b72:	4310      	orrs	r0, r2
 8000b74:	9004      	str	r0, [sp, #16]
 8000b76:	7819      	ldrb	r1, [r3, #0]
 8000b78:	2205      	movs	r2, #5
 8000b7a:	4862      	ldr	r0, [pc, #392]	; (8000d04 <_svfiprintf_r+0x228>)
 8000b7c:	469a      	mov	sl, r3
 8000b7e:	f000 facb 	bl	8001118 <memchr>
 8000b82:	f10a 0301 	add.w	r3, sl, #1
 8000b86:	2800      	cmp	r0, #0
 8000b88:	d1ef      	bne.n	8000b6a <_svfiprintf_r+0x8e>
 8000b8a:	9b04      	ldr	r3, [sp, #16]
 8000b8c:	06d8      	lsls	r0, r3, #27
 8000b8e:	bf44      	itt	mi
 8000b90:	2220      	movmi	r2, #32
 8000b92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000b96:	0719      	lsls	r1, r3, #28
 8000b98:	f89a 1000 	ldrb.w	r1, [sl]
 8000b9c:	bf44      	itt	mi
 8000b9e:	222b      	movmi	r2, #43	; 0x2b
 8000ba0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000ba4:	292a      	cmp	r1, #42	; 0x2a
 8000ba6:	d06f      	beq.n	8000c88 <_svfiprintf_r+0x1ac>
 8000ba8:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000bac:	2a09      	cmp	r2, #9
 8000bae:	d80b      	bhi.n	8000bc8 <_svfiprintf_r+0xec>
 8000bb0:	9b07      	ldr	r3, [sp, #28]
 8000bb2:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8000bb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000bba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000bbe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000bc2:	2a09      	cmp	r2, #9
 8000bc4:	d9f5      	bls.n	8000bb2 <_svfiprintf_r+0xd6>
 8000bc6:	9307      	str	r3, [sp, #28]
 8000bc8:	292e      	cmp	r1, #46	; 0x2e
 8000bca:	d045      	beq.n	8000c58 <_svfiprintf_r+0x17c>
 8000bcc:	2203      	movs	r2, #3
 8000bce:	484e      	ldr	r0, [pc, #312]	; (8000d08 <_svfiprintf_r+0x22c>)
 8000bd0:	f000 faa2 	bl	8001118 <memchr>
 8000bd4:	b150      	cbz	r0, 8000bec <_svfiprintf_r+0x110>
 8000bd6:	9904      	ldr	r1, [sp, #16]
 8000bd8:	ebc9 0000 	rsb	r0, r9, r0
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	fa02 f000 	lsl.w	r0, r2, r0
 8000be2:	ea41 0300 	orr.w	r3, r1, r0
 8000be6:	f10a 0a01 	add.w	sl, sl, #1
 8000bea:	9304      	str	r3, [sp, #16]
 8000bec:	f89a 3000 	ldrb.w	r3, [sl]
 8000bf0:	2206      	movs	r2, #6
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4845      	ldr	r0, [pc, #276]	; (8000d0c <_svfiprintf_r+0x230>)
 8000bf6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8000bfa:	f10a 0a01 	add.w	sl, sl, #1
 8000bfe:	f000 fa8b 	bl	8001118 <memchr>
 8000c02:	2800      	cmp	r0, #0
 8000c04:	d065      	beq.n	8000cd2 <_svfiprintf_r+0x1f6>
 8000c06:	4b42      	ldr	r3, [pc, #264]	; (8000d10 <_svfiprintf_r+0x234>)
 8000c08:	b1fb      	cbz	r3, 8000c4a <_svfiprintf_r+0x16e>
 8000c0a:	ab03      	add	r3, sp, #12
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	463a      	mov	r2, r7
 8000c10:	4b40      	ldr	r3, [pc, #256]	; (8000d14 <_svfiprintf_r+0x238>)
 8000c12:	a904      	add	r1, sp, #16
 8000c14:	4640      	mov	r0, r8
 8000c16:	f3af 8000 	nop.w
 8000c1a:	4606      	mov	r6, r0
 8000c1c:	1c72      	adds	r2, r6, #1
 8000c1e:	d007      	beq.n	8000c30 <_svfiprintf_r+0x154>
 8000c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c22:	4433      	add	r3, r6
 8000c24:	9309      	str	r3, [sp, #36]	; 0x24
 8000c26:	f89a 3000 	ldrb.w	r3, [sl]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f47f af74 	bne.w	8000b18 <_svfiprintf_r+0x3c>
 8000c30:	89bb      	ldrh	r3, [r7, #12]
 8000c32:	065b      	lsls	r3, r3, #25
 8000c34:	bf54      	ite	pl
 8000c36:	9809      	ldrpl	r0, [sp, #36]	; 0x24
 8000c38:	f04f 30ff 	movmi.w	r0, #4294967295	; 0xffffffff
 8000c3c:	b01d      	add	sp, #116	; 0x74
 8000c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c42:	ebb4 0b0a 	subs.w	fp, r4, sl
 8000c46:	d083      	beq.n	8000b50 <_svfiprintf_r+0x74>
 8000c48:	e774      	b.n	8000b34 <_svfiprintf_r+0x58>
 8000c4a:	9b03      	ldr	r3, [sp, #12]
 8000c4c:	3307      	adds	r3, #7
 8000c4e:	f023 0307 	bic.w	r3, r3, #7
 8000c52:	3308      	adds	r3, #8
 8000c54:	9303      	str	r3, [sp, #12]
 8000c56:	e7e3      	b.n	8000c20 <_svfiprintf_r+0x144>
 8000c58:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8000c5c:	292a      	cmp	r1, #42	; 0x2a
 8000c5e:	d01f      	beq.n	8000ca0 <_svfiprintf_r+0x1c4>
 8000c60:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000c64:	2300      	movs	r3, #0
 8000c66:	2a09      	cmp	r2, #9
 8000c68:	f10a 0a01 	add.w	sl, sl, #1
 8000c6c:	9305      	str	r3, [sp, #20]
 8000c6e:	d8ad      	bhi.n	8000bcc <_svfiprintf_r+0xf0>
 8000c70:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8000c74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c78:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000c7c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000c80:	2a09      	cmp	r2, #9
 8000c82:	d9f5      	bls.n	8000c70 <_svfiprintf_r+0x194>
 8000c84:	9305      	str	r3, [sp, #20]
 8000c86:	e7a1      	b.n	8000bcc <_svfiprintf_r+0xf0>
 8000c88:	9a03      	ldr	r2, [sp, #12]
 8000c8a:	6811      	ldr	r1, [r2, #0]
 8000c8c:	3204      	adds	r2, #4
 8000c8e:	2900      	cmp	r1, #0
 8000c90:	9203      	str	r2, [sp, #12]
 8000c92:	db18      	blt.n	8000cc6 <_svfiprintf_r+0x1ea>
 8000c94:	9107      	str	r1, [sp, #28]
 8000c96:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8000c9a:	f10a 0a01 	add.w	sl, sl, #1
 8000c9e:	e793      	b.n	8000bc8 <_svfiprintf_r+0xec>
 8000ca0:	9b03      	ldr	r3, [sp, #12]
 8000ca2:	f10a 0002 	add.w	r0, sl, #2
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2a00      	cmp	r2, #0
 8000cac:	9303      	str	r3, [sp, #12]
 8000cae:	bfb8      	it	lt
 8000cb0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000cb4:	9205      	str	r2, [sp, #20]
 8000cb6:	bfae      	itee	ge
 8000cb8:	f89a 1002 	ldrbge.w	r1, [sl, #2]
 8000cbc:	f89a 1002 	ldrblt.w	r1, [sl, #2]
 8000cc0:	9305      	strlt	r3, [sp, #20]
 8000cc2:	4682      	mov	sl, r0
 8000cc4:	e782      	b.n	8000bcc <_svfiprintf_r+0xf0>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	9107      	str	r1, [sp, #28]
 8000cce:	9304      	str	r3, [sp, #16]
 8000cd0:	e7e1      	b.n	8000c96 <_svfiprintf_r+0x1ba>
 8000cd2:	ab03      	add	r3, sp, #12
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	463a      	mov	r2, r7
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <_svfiprintf_r+0x238>)
 8000cda:	a904      	add	r1, sp, #16
 8000cdc:	4640      	mov	r0, r8
 8000cde:	f000 f8b5 	bl	8000e4c <_printf_i>
 8000ce2:	4606      	mov	r6, r0
 8000ce4:	e79a      	b.n	8000c1c <_svfiprintf_r+0x140>
 8000ce6:	2140      	movs	r1, #64	; 0x40
 8000ce8:	f7ff fdb6 	bl	8000858 <_malloc_r>
 8000cec:	6038      	str	r0, [r7, #0]
 8000cee:	6138      	str	r0, [r7, #16]
 8000cf0:	b110      	cbz	r0, 8000cf8 <_svfiprintf_r+0x21c>
 8000cf2:	2340      	movs	r3, #64	; 0x40
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e6ff      	b.n	8000af8 <_svfiprintf_r+0x1c>
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	f8c8 3000 	str.w	r3, [r8]
 8000cfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d02:	e79b      	b.n	8000c3c <_svfiprintf_r+0x160>
 8000d04:	0800a034 	stmdaeq	r0, {r2, r4, r5, sp, pc}
 8000d08:	0800a03c 	stmdaeq	r0, {r2, r3, r4, r5, sp, pc}
 8000d0c:	0800a040 	stmdaeq	r0, {r6, sp, pc}
 8000d10:	00000000 	andeq	r0, r0, r0
 8000d14:	08000915 	stmdaeq	r0, {r0, r2, r4, r8, fp}

08000d18 <_printf_common>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	690d      	ldr	r5, [r1, #16]
 8000d1e:	460c      	mov	r4, r1
 8000d20:	6889      	ldr	r1, [r1, #8]
 8000d22:	4691      	mov	r9, r2
 8000d24:	428d      	cmp	r5, r1
 8000d26:	462a      	mov	r2, r5
 8000d28:	bfb8      	it	lt
 8000d2a:	460a      	movlt	r2, r1
 8000d2c:	f8c9 2000 	str.w	r2, [r9]
 8000d30:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8000d34:	4606      	mov	r6, r0
 8000d36:	461f      	mov	r7, r3
 8000d38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000d3c:	b111      	cbz	r1, 8000d44 <_printf_common+0x2c>
 8000d3e:	3201      	adds	r2, #1
 8000d40:	f8c9 2000 	str.w	r2, [r9]
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	0699      	lsls	r1, r3, #26
 8000d48:	d55d      	bpl.n	8000e06 <_printf_common+0xee>
 8000d4a:	f8d9 2000 	ldr.w	r2, [r9]
 8000d4e:	3202      	adds	r2, #2
 8000d50:	f8c9 2000 	str.w	r2, [r9]
 8000d54:	6823      	ldr	r3, [r4, #0]
 8000d56:	f013 0f06 	tst.w	r3, #6
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	d11d      	bne.n	8000d9a <_printf_common+0x82>
 8000d5e:	68e1      	ldr	r1, [r4, #12]
 8000d60:	1a8a      	subs	r2, r1, r2
 8000d62:	2a00      	cmp	r2, #0
 8000d64:	bfd8      	it	le
 8000d66:	4619      	movle	r1, r3
 8000d68:	dd17      	ble.n	8000d9a <_printf_common+0x82>
 8000d6a:	f104 0a19 	add.w	sl, r4, #25
 8000d6e:	2500      	movs	r5, #0
 8000d70:	e005      	b.n	8000d7e <_printf_common+0x66>
 8000d72:	68e3      	ldr	r3, [r4, #12]
 8000d74:	f8d9 2000 	ldr.w	r2, [r9]
 8000d78:	1a9b      	subs	r3, r3, r2
 8000d7a:	42ab      	cmp	r3, r5
 8000d7c:	dd0c      	ble.n	8000d98 <_printf_common+0x80>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	4652      	mov	r2, sl
 8000d82:	4639      	mov	r1, r7
 8000d84:	4630      	mov	r0, r6
 8000d86:	47c0      	blx	r8
 8000d88:	3001      	adds	r0, #1
 8000d8a:	f105 0501 	add.w	r5, r5, #1
 8000d8e:	d1f0      	bne.n	8000d72 <_printf_common+0x5a>
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d98:	6821      	ldr	r1, [r4, #0]
 8000d9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8000d9e:	3300      	adds	r3, #0
 8000da0:	bf18      	it	ne
 8000da2:	2301      	movne	r3, #1
 8000da4:	068a      	lsls	r2, r1, #26
 8000da6:	d50a      	bpl.n	8000dbe <_printf_common+0xa6>
 8000da8:	18e2      	adds	r2, r4, r3
 8000daa:	2130      	movs	r1, #48	; 0x30
 8000dac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000db0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000db4:	1c5a      	adds	r2, r3, #1
 8000db6:	4422      	add	r2, r4
 8000db8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	47c0      	blx	r8
 8000dc8:	3001      	adds	r0, #1
 8000dca:	d0e1      	beq.n	8000d90 <_printf_common+0x78>
 8000dcc:	6823      	ldr	r3, [r4, #0]
 8000dce:	f003 0306 	and.w	r3, r3, #6
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	d029      	beq.n	8000e2a <_printf_common+0x112>
 8000dd6:	68a3      	ldr	r3, [r4, #8]
 8000dd8:	6922      	ldr	r2, [r4, #16]
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	bfc8      	it	gt
 8000dde:	f04f 0900 	movgt.w	r9, #0
 8000de2:	dd2f      	ble.n	8000e44 <_printf_common+0x12c>
 8000de4:	1a9b      	subs	r3, r3, r2
 8000de6:	4499      	add	r9, r3
 8000de8:	341a      	adds	r4, #26
 8000dea:	2500      	movs	r5, #0
 8000dec:	e001      	b.n	8000df2 <_printf_common+0xda>
 8000dee:	454d      	cmp	r5, r9
 8000df0:	d028      	beq.n	8000e44 <_printf_common+0x12c>
 8000df2:	2301      	movs	r3, #1
 8000df4:	4622      	mov	r2, r4
 8000df6:	4639      	mov	r1, r7
 8000df8:	4630      	mov	r0, r6
 8000dfa:	47c0      	blx	r8
 8000dfc:	3001      	adds	r0, #1
 8000dfe:	f105 0501 	add.w	r5, r5, #1
 8000e02:	d1f4      	bne.n	8000dee <_printf_common+0xd6>
 8000e04:	e7c4      	b.n	8000d90 <_printf_common+0x78>
 8000e06:	f013 0f06 	tst.w	r3, #6
 8000e0a:	d108      	bne.n	8000e1e <_printf_common+0x106>
 8000e0c:	68e1      	ldr	r1, [r4, #12]
 8000e0e:	f8d9 2000 	ldr.w	r2, [r9]
 8000e12:	1a8a      	subs	r2, r1, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	bfd8      	it	le
 8000e18:	4619      	movle	r1, r3
 8000e1a:	dca6      	bgt.n	8000d6a <_printf_common+0x52>
 8000e1c:	e7bd      	b.n	8000d9a <_printf_common+0x82>
 8000e1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8000e22:	3300      	adds	r3, #0
 8000e24:	bf18      	it	ne
 8000e26:	2301      	movne	r3, #1
 8000e28:	e7c9      	b.n	8000dbe <_printf_common+0xa6>
 8000e2a:	f8d9 0000 	ldr.w	r0, [r9]
 8000e2e:	68e1      	ldr	r1, [r4, #12]
 8000e30:	68a3      	ldr	r3, [r4, #8]
 8000e32:	6922      	ldr	r2, [r4, #16]
 8000e34:	1a09      	subs	r1, r1, r0
 8000e36:	4293      	cmp	r3, r2
 8000e38:	ea21 79e1 	bic.w	r9, r1, r1, asr #31
 8000e3c:	dcd2      	bgt.n	8000de4 <_printf_common+0xcc>
 8000e3e:	f1b9 0f00 	cmp.w	r9, #0
 8000e42:	d1d1      	bne.n	8000de8 <_printf_common+0xd0>
 8000e44:	2000      	movs	r0, #0
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	bf00      	nop

08000e4c <_printf_i>:
 8000e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e50:	460c      	mov	r4, r1
 8000e52:	7e09      	ldrb	r1, [r1, #24]
 8000e54:	b085      	sub	sp, #20
 8000e56:	296e      	cmp	r1, #110	; 0x6e
 8000e58:	4606      	mov	r6, r0
 8000e5a:	4617      	mov	r7, r2
 8000e5c:	4698      	mov	r8, r3
 8000e5e:	f104 0c43 	add.w	ip, r4, #67	; 0x43
 8000e62:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000e64:	d05a      	beq.n	8000f1c <_printf_i+0xd0>
 8000e66:	d81a      	bhi.n	8000e9e <_printf_i+0x52>
 8000e68:	2963      	cmp	r1, #99	; 0x63
 8000e6a:	f000 8112 	beq.w	8001092 <_printf_i+0x246>
 8000e6e:	f200 80d6 	bhi.w	800101e <_printf_i+0x1d2>
 8000e72:	2900      	cmp	r1, #0
 8000e74:	d05c      	beq.n	8000f30 <_printf_i+0xe4>
 8000e76:	2958      	cmp	r1, #88	; 0x58
 8000e78:	f040 80f5 	bne.w	8001066 <_printf_i+0x21a>
 8000e7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8000e80:	6822      	ldr	r2, [r4, #0]
 8000e82:	6803      	ldr	r3, [r0, #0]
 8000e84:	0615      	lsls	r5, r2, #24
 8000e86:	f8df e264 	ldr.w	lr, [pc, #612]	; 80010ec <_printf_i+0x2a0>
 8000e8a:	f103 0104 	add.w	r1, r3, #4
 8000e8e:	d41e      	bmi.n	8000ece <_printf_i+0x82>
 8000e90:	0655      	lsls	r5, r2, #25
 8000e92:	bf53      	iteet	pl
 8000e94:	681b      	ldrpl	r3, [r3, #0]
 8000e96:	6001      	strmi	r1, [r0, #0]
 8000e98:	881b      	ldrhmi	r3, [r3, #0]
 8000e9a:	6001      	strpl	r1, [r0, #0]
 8000e9c:	e019      	b.n	8000ed2 <_printf_i+0x86>
 8000e9e:	2973      	cmp	r1, #115	; 0x73
 8000ea0:	f000 80cf 	beq.w	8001042 <_printf_i+0x1f6>
 8000ea4:	d87e      	bhi.n	8000fa4 <_printf_i+0x158>
 8000ea6:	296f      	cmp	r1, #111	; 0x6f
 8000ea8:	f000 80e4 	beq.w	8001074 <_printf_i+0x228>
 8000eac:	2970      	cmp	r1, #112	; 0x70
 8000eae:	f040 80da 	bne.w	8001066 <_printf_i+0x21a>
 8000eb2:	6822      	ldr	r2, [r4, #0]
 8000eb4:	f042 0220 	orr.w	r2, r2, #32
 8000eb8:	6022      	str	r2, [r4, #0]
 8000eba:	2378      	movs	r3, #120	; 0x78
 8000ebc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000ec0:	6803      	ldr	r3, [r0, #0]
 8000ec2:	0615      	lsls	r5, r2, #24
 8000ec4:	f8df e228 	ldr.w	lr, [pc, #552]	; 80010f0 <_printf_i+0x2a4>
 8000ec8:	f103 0104 	add.w	r1, r3, #4
 8000ecc:	d5e0      	bpl.n	8000e90 <_printf_i+0x44>
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6001      	str	r1, [r0, #0]
 8000ed2:	07d0      	lsls	r0, r2, #31
 8000ed4:	bf44      	itt	mi
 8000ed6:	f042 0220 	orrmi.w	r2, r2, #32
 8000eda:	6022      	strmi	r2, [r4, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f040 8090 	bne.w	8001002 <_printf_i+0x1b6>
 8000ee2:	6822      	ldr	r2, [r4, #0]
 8000ee4:	2110      	movs	r1, #16
 8000ee6:	f022 0220 	bic.w	r2, r2, #32
 8000eea:	6022      	str	r2, [r4, #0]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8000ef2:	6860      	ldr	r0, [r4, #4]
 8000ef4:	2800      	cmp	r0, #0
 8000ef6:	60a0      	str	r0, [r4, #8]
 8000ef8:	f2c0 8088 	blt.w	800100c <_printf_i+0x1c0>
 8000efc:	6822      	ldr	r2, [r4, #0]
 8000efe:	f022 0204 	bic.w	r2, r2, #4
 8000f02:	6022      	str	r2, [r4, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d162      	bne.n	8000fce <_printf_i+0x182>
 8000f08:	2800      	cmp	r0, #0
 8000f0a:	f040 8081 	bne.w	8001010 <_printf_i+0x1c4>
 8000f0e:	4665      	mov	r5, ip
 8000f10:	2908      	cmp	r1, #8
 8000f12:	d06a      	beq.n	8000fea <_printf_i+0x19e>
 8000f14:	ebc5 030c 	rsb	r3, r5, ip
 8000f18:	6123      	str	r3, [r4, #16]
 8000f1a:	e00c      	b.n	8000f36 <_printf_i+0xea>
 8000f1c:	6823      	ldr	r3, [r4, #0]
 8000f1e:	061a      	lsls	r2, r3, #24
 8000f20:	f140 80d5 	bpl.w	80010ce <_printf_i+0x282>
 8000f24:	6803      	ldr	r3, [r0, #0]
 8000f26:	6962      	ldr	r2, [r4, #20]
 8000f28:	1d19      	adds	r1, r3, #4
 8000f2a:	6001      	str	r1, [r0, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	4665      	mov	r5, ip
 8000f32:	2300      	movs	r3, #0
 8000f34:	6123      	str	r3, [r4, #16]
 8000f36:	f8cd 8000 	str.w	r8, [sp]
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	aa03      	add	r2, sp, #12
 8000f3e:	4621      	mov	r1, r4
 8000f40:	4630      	mov	r0, r6
 8000f42:	f7ff fee9 	bl	8000d18 <_printf_common>
 8000f46:	3001      	adds	r0, #1
 8000f48:	d021      	beq.n	8000f8e <_printf_i+0x142>
 8000f4a:	462a      	mov	r2, r5
 8000f4c:	6923      	ldr	r3, [r4, #16]
 8000f4e:	4639      	mov	r1, r7
 8000f50:	4630      	mov	r0, r6
 8000f52:	47c0      	blx	r8
 8000f54:	3001      	adds	r0, #1
 8000f56:	d01a      	beq.n	8000f8e <_printf_i+0x142>
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	9803      	ldr	r0, [sp, #12]
 8000f5c:	f013 0f02 	tst.w	r3, #2
 8000f60:	68e3      	ldr	r3, [r4, #12]
 8000f62:	d019      	beq.n	8000f98 <_printf_i+0x14c>
 8000f64:	1a1a      	subs	r2, r3, r0
 8000f66:	2a00      	cmp	r2, #0
 8000f68:	dd16      	ble.n	8000f98 <_printf_i+0x14c>
 8000f6a:	f104 0919 	add.w	r9, r4, #25
 8000f6e:	2500      	movs	r5, #0
 8000f70:	e004      	b.n	8000f7c <_printf_i+0x130>
 8000f72:	68e3      	ldr	r3, [r4, #12]
 8000f74:	9803      	ldr	r0, [sp, #12]
 8000f76:	1a1a      	subs	r2, r3, r0
 8000f78:	42aa      	cmp	r2, r5
 8000f7a:	dd0d      	ble.n	8000f98 <_printf_i+0x14c>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	464a      	mov	r2, r9
 8000f80:	4639      	mov	r1, r7
 8000f82:	4630      	mov	r0, r6
 8000f84:	47c0      	blx	r8
 8000f86:	3001      	adds	r0, #1
 8000f88:	f105 0501 	add.w	r5, r5, #1
 8000f8c:	d1f1      	bne.n	8000f72 <_printf_i+0x126>
 8000f8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f92:	b005      	add	sp, #20
 8000f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f98:	4298      	cmp	r0, r3
 8000f9a:	bfb8      	it	lt
 8000f9c:	4618      	movlt	r0, r3
 8000f9e:	b005      	add	sp, #20
 8000fa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fa4:	2975      	cmp	r1, #117	; 0x75
 8000fa6:	d065      	beq.n	8001074 <_printf_i+0x228>
 8000fa8:	2978      	cmp	r1, #120	; 0x78
 8000faa:	d15c      	bne.n	8001066 <_printf_i+0x21a>
 8000fac:	6822      	ldr	r2, [r4, #0]
 8000fae:	e784      	b.n	8000eba <_printf_i+0x6e>
 8000fb0:	6861      	ldr	r1, [r4, #4]
 8000fb2:	202d      	movs	r0, #45	; 0x2d
 8000fb4:	2900      	cmp	r1, #0
 8000fb6:	f1c3 0300 	rsb	r3, r3, #0
 8000fba:	60a1      	str	r1, [r4, #8]
 8000fbc:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8000fc0:	db21      	blt.n	8001006 <_printf_i+0x1ba>
 8000fc2:	f022 0204 	bic.w	r2, r2, #4
 8000fc6:	f8df e124 	ldr.w	lr, [pc, #292]	; 80010ec <_printf_i+0x2a0>
 8000fca:	6022      	str	r2, [r4, #0]
 8000fcc:	210a      	movs	r1, #10
 8000fce:	4665      	mov	r5, ip
 8000fd0:	fbb3 f2f1 	udiv	r2, r3, r1
 8000fd4:	fb01 3312 	mls	r3, r1, r2, r3
 8000fd8:	f81e 0003 	ldrb.w	r0, [lr, r3]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	f805 0d01 	strb.w	r0, [r5, #-1]!
 8000fe2:	2a00      	cmp	r2, #0
 8000fe4:	d1f4      	bne.n	8000fd0 <_printf_i+0x184>
 8000fe6:	2908      	cmp	r1, #8
 8000fe8:	d194      	bne.n	8000f14 <_printf_i+0xc8>
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	07d9      	lsls	r1, r3, #31
 8000fee:	d591      	bpl.n	8000f14 <_printf_i+0xc8>
 8000ff0:	6862      	ldr	r2, [r4, #4]
 8000ff2:	6923      	ldr	r3, [r4, #16]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dc8d      	bgt.n	8000f14 <_printf_i+0xc8>
 8000ff8:	2330      	movs	r3, #48	; 0x30
 8000ffa:	f805 3c01 	strb.w	r3, [r5, #-1]
 8000ffe:	3d01      	subs	r5, #1
 8001000:	e788      	b.n	8000f14 <_printf_i+0xc8>
 8001002:	2110      	movs	r1, #16
 8001004:	e772      	b.n	8000eec <_printf_i+0xa0>
 8001006:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 80010ec <_printf_i+0x2a0>
 800100a:	210a      	movs	r1, #10
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1de      	bne.n	8000fce <_printf_i+0x182>
 8001010:	f89e 3000 	ldrb.w	r3, [lr]
 8001014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800101c:	e778      	b.n	8000f10 <_printf_i+0xc4>
 800101e:	2964      	cmp	r1, #100	; 0x64
 8001020:	d001      	beq.n	8001026 <_printf_i+0x1da>
 8001022:	2969      	cmp	r1, #105	; 0x69
 8001024:	d11f      	bne.n	8001066 <_printf_i+0x21a>
 8001026:	6822      	ldr	r2, [r4, #0]
 8001028:	6803      	ldr	r3, [r0, #0]
 800102a:	0615      	lsls	r5, r2, #24
 800102c:	f103 0104 	add.w	r1, r3, #4
 8001030:	d53a      	bpl.n	80010a8 <_printf_i+0x25c>
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6001      	str	r1, [r0, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	dbba      	blt.n	8000fb0 <_printf_i+0x164>
 800103a:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 80010ec <_printf_i+0x2a0>
 800103e:	210a      	movs	r1, #10
 8001040:	e757      	b.n	8000ef2 <_printf_i+0xa6>
 8001042:	6803      	ldr	r3, [r0, #0]
 8001044:	6862      	ldr	r2, [r4, #4]
 8001046:	1d19      	adds	r1, r3, #4
 8001048:	6001      	str	r1, [r0, #0]
 800104a:	681d      	ldr	r5, [r3, #0]
 800104c:	2100      	movs	r1, #0
 800104e:	4628      	mov	r0, r5
 8001050:	f000 f862 	bl	8001118 <memchr>
 8001054:	2800      	cmp	r0, #0
 8001056:	d046      	beq.n	80010e6 <_printf_i+0x29a>
 8001058:	1b40      	subs	r0, r0, r5
 800105a:	6060      	str	r0, [r4, #4]
 800105c:	6120      	str	r0, [r4, #16]
 800105e:	2300      	movs	r3, #0
 8001060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001064:	e767      	b.n	8000f36 <_printf_i+0xea>
 8001066:	2301      	movs	r3, #1
 8001068:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800106c:	6123      	str	r3, [r4, #16]
 800106e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001072:	e7f4      	b.n	800105e <_printf_i+0x212>
 8001074:	6823      	ldr	r3, [r4, #0]
 8001076:	061a      	lsls	r2, r3, #24
 8001078:	d51e      	bpl.n	80010b8 <_printf_i+0x26c>
 800107a:	6803      	ldr	r3, [r0, #0]
 800107c:	1d1a      	adds	r2, r3, #4
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6002      	str	r2, [r0, #0]
 8001082:	7e22      	ldrb	r2, [r4, #24]
 8001084:	f8df e064 	ldr.w	lr, [pc, #100]	; 80010ec <_printf_i+0x2a0>
 8001088:	2a6f      	cmp	r2, #111	; 0x6f
 800108a:	bf14      	ite	ne
 800108c:	210a      	movne	r1, #10
 800108e:	2108      	moveq	r1, #8
 8001090:	e72c      	b.n	8000eec <_printf_i+0xa0>
 8001092:	6803      	ldr	r3, [r0, #0]
 8001094:	2201      	movs	r2, #1
 8001096:	1d19      	adds	r1, r3, #4
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800109e:	6001      	str	r1, [r0, #0]
 80010a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80010a4:	6122      	str	r2, [r4, #16]
 80010a6:	e7da      	b.n	800105e <_printf_i+0x212>
 80010a8:	0655      	lsls	r5, r2, #25
 80010aa:	bf53      	iteet	pl
 80010ac:	681b      	ldrpl	r3, [r3, #0]
 80010ae:	6001      	strmi	r1, [r0, #0]
 80010b0:	f9b3 3000 	ldrshmi.w	r3, [r3]
 80010b4:	6001      	strpl	r1, [r0, #0]
 80010b6:	e7be      	b.n	8001036 <_printf_i+0x1ea>
 80010b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80010bc:	6803      	ldr	r3, [r0, #0]
 80010be:	f103 0204 	add.w	r2, r3, #4
 80010c2:	bf15      	itete	ne
 80010c4:	6002      	strne	r2, [r0, #0]
 80010c6:	681b      	ldreq	r3, [r3, #0]
 80010c8:	881b      	ldrhne	r3, [r3, #0]
 80010ca:	6002      	streq	r2, [r0, #0]
 80010cc:	e7d9      	b.n	8001082 <_printf_i+0x236>
 80010ce:	f013 0f40 	tst.w	r3, #64	; 0x40
 80010d2:	6803      	ldr	r3, [r0, #0]
 80010d4:	6962      	ldr	r2, [r4, #20]
 80010d6:	f103 0104 	add.w	r1, r3, #4
 80010da:	6001      	str	r1, [r0, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	bf14      	ite	ne
 80010e0:	801a      	strhne	r2, [r3, #0]
 80010e2:	601a      	streq	r2, [r3, #0]
 80010e4:	e724      	b.n	8000f30 <_printf_i+0xe4>
 80010e6:	6860      	ldr	r0, [r4, #4]
 80010e8:	e7b8      	b.n	800105c <_printf_i+0x210>
 80010ea:	bf00      	nop
 80010ec:	0800a048 	stmdaeq	r0, {r3, r6, sp, pc}
 80010f0:	0800a05c 	stmdaeq	r0, {r2, r3, r4, r6, sp, pc}

080010f4 <_sbrk_r>:
 80010f4:	b538      	push	{r3, r4, r5, lr}
 80010f6:	4c07      	ldr	r4, [pc, #28]	; (8001114 <_sbrk_r+0x20>)
 80010f8:	2300      	movs	r3, #0
 80010fa:	4605      	mov	r5, r0
 80010fc:	4608      	mov	r0, r1
 80010fe:	6023      	str	r3, [r4, #0]
 8001100:	f000 f8e2 	bl	80012c8 <_sbrk>
 8001104:	1c43      	adds	r3, r0, #1
 8001106:	d000      	beq.n	800110a <_sbrk_r+0x16>
 8001108:	bd38      	pop	{r3, r4, r5, pc}
 800110a:	6823      	ldr	r3, [r4, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0fb      	beq.n	8001108 <_sbrk_r+0x14>
 8001110:	602b      	str	r3, [r5, #0]
 8001112:	bd38      	pop	{r3, r4, r5, pc}
 8001114:	200042fc 	strdcs	r4, [r0], -ip

08001118 <memchr>:
 8001118:	0783      	lsls	r3, r0, #30
 800111a:	b470      	push	{r4, r5, r6}
 800111c:	b2cd      	uxtb	r5, r1
 800111e:	d03d      	beq.n	800119c <memchr+0x84>
 8001120:	1e53      	subs	r3, r2, #1
 8001122:	b302      	cbz	r2, 8001166 <memchr+0x4e>
 8001124:	7802      	ldrb	r2, [r0, #0]
 8001126:	42aa      	cmp	r2, r5
 8001128:	d01e      	beq.n	8001168 <memchr+0x50>
 800112a:	1c42      	adds	r2, r0, #1
 800112c:	e004      	b.n	8001138 <memchr+0x20>
 800112e:	b1d3      	cbz	r3, 8001166 <memchr+0x4e>
 8001130:	7804      	ldrb	r4, [r0, #0]
 8001132:	3b01      	subs	r3, #1
 8001134:	42ac      	cmp	r4, r5
 8001136:	d017      	beq.n	8001168 <memchr+0x50>
 8001138:	f012 0f03 	tst.w	r2, #3
 800113c:	4610      	mov	r0, r2
 800113e:	f102 0201 	add.w	r2, r2, #1
 8001142:	d1f4      	bne.n	800112e <memchr+0x16>
 8001144:	2b03      	cmp	r3, #3
 8001146:	d811      	bhi.n	800116c <memchr+0x54>
 8001148:	b353      	cbz	r3, 80011a0 <memchr+0x88>
 800114a:	7802      	ldrb	r2, [r0, #0]
 800114c:	42aa      	cmp	r2, r5
 800114e:	d00b      	beq.n	8001168 <memchr+0x50>
 8001150:	4403      	add	r3, r0
 8001152:	1c42      	adds	r2, r0, #1
 8001154:	e002      	b.n	800115c <memchr+0x44>
 8001156:	7801      	ldrb	r1, [r0, #0]
 8001158:	42a9      	cmp	r1, r5
 800115a:	d005      	beq.n	8001168 <memchr+0x50>
 800115c:	4293      	cmp	r3, r2
 800115e:	4610      	mov	r0, r2
 8001160:	f102 0201 	add.w	r2, r2, #1
 8001164:	d1f7      	bne.n	8001156 <memchr+0x3e>
 8001166:	2000      	movs	r0, #0
 8001168:	bc70      	pop	{r4, r5, r6}
 800116a:	4770      	bx	lr
 800116c:	4604      	mov	r4, r0
 800116e:	020e      	lsls	r6, r1, #8
 8001170:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8001174:	432e      	orrs	r6, r5
 8001176:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800117a:	6822      	ldr	r2, [r4, #0]
 800117c:	4620      	mov	r0, r4
 800117e:	4072      	eors	r2, r6
 8001180:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
 8001184:	ea21 0202 	bic.w	r2, r1, r2
 8001188:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800118c:	f104 0404 	add.w	r4, r4, #4
 8001190:	d1db      	bne.n	800114a <memchr+0x32>
 8001192:	3b04      	subs	r3, #4
 8001194:	2b03      	cmp	r3, #3
 8001196:	4620      	mov	r0, r4
 8001198:	d8ef      	bhi.n	800117a <memchr+0x62>
 800119a:	e7d5      	b.n	8001148 <memchr+0x30>
 800119c:	4613      	mov	r3, r2
 800119e:	e7d1      	b.n	8001144 <memchr+0x2c>
 80011a0:	4618      	mov	r0, r3
 80011a2:	e7e1      	b.n	8001168 <memchr+0x50>

080011a4 <memmove>:
 80011a4:	4288      	cmp	r0, r1
 80011a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a8:	d90d      	bls.n	80011c6 <memmove+0x22>
 80011aa:	188b      	adds	r3, r1, r2
 80011ac:	4298      	cmp	r0, r3
 80011ae:	d20a      	bcs.n	80011c6 <memmove+0x22>
 80011b0:	1881      	adds	r1, r0, r2
 80011b2:	2a00      	cmp	r2, #0
 80011b4:	d051      	beq.n	800125a <memmove+0xb6>
 80011b6:	1a9a      	subs	r2, r3, r2
 80011b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80011bc:	4293      	cmp	r3, r2
 80011be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80011c2:	d1f9      	bne.n	80011b8 <memmove+0x14>
 80011c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011c6:	2a0f      	cmp	r2, #15
 80011c8:	d948      	bls.n	800125c <memmove+0xb8>
 80011ca:	ea41 0300 	orr.w	r3, r1, r0
 80011ce:	079b      	lsls	r3, r3, #30
 80011d0:	d146      	bne.n	8001260 <memmove+0xbc>
 80011d2:	4615      	mov	r5, r2
 80011d4:	f100 0410 	add.w	r4, r0, #16
 80011d8:	f101 0310 	add.w	r3, r1, #16
 80011dc:	f853 6c10 	ldr.w	r6, [r3, #-16]
 80011e0:	3d10      	subs	r5, #16
 80011e2:	f844 6c10 	str.w	r6, [r4, #-16]
 80011e6:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 80011ea:	2d0f      	cmp	r5, #15
 80011ec:	f844 6c0c 	str.w	r6, [r4, #-12]
 80011f0:	f853 6c08 	ldr.w	r6, [r3, #-8]
 80011f4:	f104 0410 	add.w	r4, r4, #16
 80011f8:	f844 6c18 	str.w	r6, [r4, #-24]
 80011fc:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8001200:	f103 0310 	add.w	r3, r3, #16
 8001204:	f844 6c14 	str.w	r6, [r4, #-20]
 8001208:	d8e8      	bhi.n	80011dc <memmove+0x38>
 800120a:	f1a2 0310 	sub.w	r3, r2, #16
 800120e:	f023 030f 	bic.w	r3, r3, #15
 8001212:	f002 0e0f 	and.w	lr, r2, #15
 8001216:	3310      	adds	r3, #16
 8001218:	f1be 0f03 	cmp.w	lr, #3
 800121c:	4419      	add	r1, r3
 800121e:	4403      	add	r3, r0
 8001220:	d921      	bls.n	8001266 <memmove+0xc2>
 8001222:	460e      	mov	r6, r1
 8001224:	4674      	mov	r4, lr
 8001226:	1f1d      	subs	r5, r3, #4
 8001228:	f856 7b04 	ldr.w	r7, [r6], #4
 800122c:	3c04      	subs	r4, #4
 800122e:	2c03      	cmp	r4, #3
 8001230:	f845 7f04 	str.w	r7, [r5, #4]!
 8001234:	d8f8      	bhi.n	8001228 <memmove+0x84>
 8001236:	f1ae 0404 	sub.w	r4, lr, #4
 800123a:	f024 0403 	bic.w	r4, r4, #3
 800123e:	3404      	adds	r4, #4
 8001240:	4423      	add	r3, r4
 8001242:	4421      	add	r1, r4
 8001244:	f002 0203 	and.w	r2, r2, #3
 8001248:	b162      	cbz	r2, 8001264 <memmove+0xc0>
 800124a:	3b01      	subs	r3, #1
 800124c:	440a      	add	r2, r1
 800124e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001252:	428a      	cmp	r2, r1
 8001254:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001258:	d1f9      	bne.n	800124e <memmove+0xaa>
 800125a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800125c:	4603      	mov	r3, r0
 800125e:	e7f3      	b.n	8001248 <memmove+0xa4>
 8001260:	4603      	mov	r3, r0
 8001262:	e7f2      	b.n	800124a <memmove+0xa6>
 8001264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001266:	4672      	mov	r2, lr
 8001268:	e7ee      	b.n	8001248 <memmove+0xa4>
 800126a:	bf00      	nop

0800126c <_realloc_r>:
 800126c:	b1f9      	cbz	r1, 80012ae <_realloc_r+0x42>
 800126e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001270:	4606      	mov	r6, r0
 8001272:	4615      	mov	r5, r2
 8001274:	b1b2      	cbz	r2, 80012a4 <_realloc_r+0x38>
 8001276:	460c      	mov	r4, r1
 8001278:	f000 f81c 	bl	80012b4 <_malloc_usable_size_r>
 800127c:	4285      	cmp	r5, r0
 800127e:	d801      	bhi.n	8001284 <_realloc_r+0x18>
 8001280:	4620      	mov	r0, r4
 8001282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001284:	4629      	mov	r1, r5
 8001286:	4630      	mov	r0, r6
 8001288:	f7ff fae6 	bl	8000858 <_malloc_r>
 800128c:	4607      	mov	r7, r0
 800128e:	b168      	cbz	r0, 80012ac <_realloc_r+0x40>
 8001290:	462a      	mov	r2, r5
 8001292:	4621      	mov	r1, r4
 8001294:	f7fe ff3c 	bl	8000110 <memcpy>
 8001298:	4630      	mov	r0, r6
 800129a:	4621      	mov	r1, r4
 800129c:	f7ff fa96 	bl	80007cc <_free_r>
 80012a0:	4638      	mov	r0, r7
 80012a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012a4:	f7ff fa92 	bl	80007cc <_free_r>
 80012a8:	4628      	mov	r0, r5
 80012aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012ae:	4611      	mov	r1, r2
 80012b0:	f7ff bad2 	b.w	8000858 <_malloc_r>

080012b4 <_malloc_usable_size_r>:
 80012b4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80012b8:	2800      	cmp	r0, #0
 80012ba:	bfbe      	ittt	lt
 80012bc:	1809      	addlt	r1, r1, r0
 80012be:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 80012c2:	18c0      	addlt	r0, r0, r3
 80012c4:	3804      	subs	r0, #4
 80012c6:	4770      	bx	lr

080012c8 <_sbrk>:
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <_sbrk+0x14>)
 80012ca:	4905      	ldr	r1, [pc, #20]	; (80012e0 <_sbrk+0x18>)
 80012cc:	6813      	ldr	r3, [r2, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	bf08      	it	eq
 80012d2:	460b      	moveq	r3, r1
 80012d4:	4418      	add	r0, r3
 80012d6:	6010      	str	r0, [r2, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	4770      	bx	lr
 80012dc:	200000f4 	strdcs	r0, [r0], -r4
 80012e0:	20004300 	andcs	r4, r0, r0, lsl #6

080012e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80012e8:	4a15      	ldr	r2, [pc, #84]	; (8001340 <SystemInit+0x5c>)
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <SystemInit+0x5c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80012f4:	4912      	ldr	r1, [pc, #72]	; (8001340 <SystemInit+0x5c>)
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <SystemInit+0x5c>)
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <SystemInit+0x60>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001300:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <SystemInit+0x5c>)
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <SystemInit+0x5c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800130a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800130e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001310:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <SystemInit+0x5c>)
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <SystemInit+0x5c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800131c:	4a08      	ldr	r2, [pc, #32]	; (8001340 <SystemInit+0x5c>)
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <SystemInit+0x5c>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001326:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <SystemInit+0x5c>)
 800132a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800132e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001330:	f000 f80c 	bl	800134c <SetSysClock>
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <SystemInit+0x64>)
 8001336:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800133a:	609a      	str	r2, [r3, #8]
#endif 
return;
 800133c:	bf00      	nop
}
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	andmi	r1, r2, r0
 8001344:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000
 8001348:	e000ed00 	and	lr, r0, r0, lsl #26

0800134c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001350:	f000 f802 	bl	8001358 <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}

08001358 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001366:	4a3a      	ldr	r2, [pc, #232]	; (8001450 <SetSysClockTo72+0xf8>)
 8001368:	4b39      	ldr	r3, [pc, #228]	; (8001450 <SetSysClockTo72+0xf8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001370:	6013      	str	r3, [r2, #0]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001372:	4b37      	ldr	r3, [pc, #220]	; (8001450 <SetSysClockTo72+0xf8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3301      	adds	r3, #1
 8001380:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d103      	bne.n	8001390 <SetSysClockTo72+0x38>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800138e:	d1f0      	bne.n	8001372 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001390:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <SetSysClockTo72+0xf8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800139c:	2301      	movs	r3, #1
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	e001      	b.n	80013a6 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80013a2:	2300      	movs	r3, #0
 80013a4:	603b      	str	r3, [r7, #0]
  }  
  
  if (HSEStatus == (uint32_t)0x01)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d14b      	bne.n	8001444 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80013ac:	4a29      	ldr	r2, [pc, #164]	; (8001454 <SetSysClockTo72+0xfc>)
 80013ae:	4b29      	ldr	r3, [pc, #164]	; (8001454 <SetSysClockTo72+0xfc>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f043 0310 	orr.w	r3, r3, #16
 80013b6:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80013b8:	4a26      	ldr	r2, [pc, #152]	; (8001454 <SetSysClockTo72+0xfc>)
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <SetSysClockTo72+0xfc>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f023 0303 	bic.w	r3, r3, #3
 80013c2:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80013c4:	4a23      	ldr	r2, [pc, #140]	; (8001454 <SetSysClockTo72+0xfc>)
 80013c6:	4b23      	ldr	r3, [pc, #140]	; (8001454 <SetSysClockTo72+0xfc>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f043 0302 	orr.w	r3, r3, #2
 80013ce:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80013d0:	4a1f      	ldr	r2, [pc, #124]	; (8001450 <SetSysClockTo72+0xf8>)
 80013d2:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <SetSysClockTo72+0xf8>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80013d8:	4a1d      	ldr	r2, [pc, #116]	; (8001450 <SetSysClockTo72+0xf8>)
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <SetSysClockTo72+0xf8>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80013e0:	4a1b      	ldr	r2, [pc, #108]	; (8001450 <SetSysClockTo72+0xf8>)
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <SetSysClockTo72+0xf8>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ea:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80013ec:	4a18      	ldr	r2, [pc, #96]	; (8001450 <SetSysClockTo72+0xf8>)
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <SetSysClockTo72+0xf8>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80013f6:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80013f8:	4a15      	ldr	r2, [pc, #84]	; (8001450 <SetSysClockTo72+0xf8>)
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <SetSysClockTo72+0xf8>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001402:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */


    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001404:	4a12      	ldr	r2, [pc, #72]	; (8001450 <SetSysClockTo72+0xf8>)
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <SetSysClockTo72+0xf8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800140e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001410:	bf00      	nop
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <SetSysClockTo72+0xf8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f9      	beq.n	8001412 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800141e:	4a0c      	ldr	r2, [pc, #48]	; (8001450 <SetSysClockTo72+0xf8>)
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <SetSysClockTo72+0xf8>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f023 0303 	bic.w	r3, r3, #3
 8001428:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800142a:	4a09      	ldr	r2, [pc, #36]	; (8001450 <SetSysClockTo72+0xf8>)
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <SetSysClockTo72+0xf8>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001436:	bf00      	nop
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <SetSysClockTo72+0xf8>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 030c 	and.w	r3, r3, #12
 8001440:	2b08      	cmp	r3, #8
 8001442:	d1f9      	bne.n	8001438 <SetSysClockTo72+0xe0>
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
  
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40021000 	andmi	r1, r2, r0
 8001454:	40022000 	andmi	r2, r2, r0

08001458 <Driver_OLED_Send_START>:

uint8_t display_on[] = {0x8d, 0x14, 0xaf};
uint8_t display_off[] = {0x8d, 0x10, 0xae};

/* 启动向OLED发送数据或者指令 */
void Driver_OLED_Send_START(uint32_t dataType){
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
    
    /* 发送起始条件 */
    I2C_GenerateSTART(OLED_HARDWARE, ENABLE);
 8001460:	2101      	movs	r1, #1
 8001462:	4818      	ldr	r0, [pc, #96]	; (80014c4 <Driver_OLED_Send_START+0x6c>)
 8001464:	f004 ffb2 	bl	80063cc <I2C_GenerateSTART>
    /* 初始化重试次数 */
    /* 检查当前是否成功占用总线 */
    _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_MODE_SELECT) == ERROR);
 8001468:	bf00      	nop
 800146a:	4917      	ldr	r1, [pc, #92]	; (80014c8 <Driver_OLED_Send_START+0x70>)
 800146c:	4815      	ldr	r0, [pc, #84]	; (80014c4 <Driver_OLED_Send_START+0x6c>)
 800146e:	f005 f81b 	bl	80064a8 <I2C_CheckEvent>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f8      	beq.n	800146a <Driver_OLED_Send_START+0x12>
    /* 发送地址，要往这个地址写数据 */
    I2C_Send7bitAddress(OLED_HARDWARE, 0x78, I2C_Direction_Transmitter);
 8001478:	2200      	movs	r2, #0
 800147a:	2178      	movs	r1, #120	; 0x78
 800147c:	4811      	ldr	r0, [pc, #68]	; (80014c4 <Driver_OLED_Send_START+0x6c>)
 800147e:	f004 ffd5 	bl	800642c <I2C_Send7bitAddress>
    /* 检测当前是否是主发送模式 */
    _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED) == ERROR);
 8001482:	bf00      	nop
 8001484:	4911      	ldr	r1, [pc, #68]	; (80014cc <Driver_OLED_Send_START+0x74>)
 8001486:	480f      	ldr	r0, [pc, #60]	; (80014c4 <Driver_OLED_Send_START+0x6c>)
 8001488:	f005 f80e 	bl	80064a8 <I2C_CheckEvent>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f8      	beq.n	8001484 <Driver_OLED_Send_START+0x2c>
    /* 发送指令：0x00代表指令，0x40代表数据 */
    if(dataType != OLED_COMMAND){
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d004      	beq.n	80014a2 <Driver_OLED_Send_START+0x4a>
        I2C_SendData(OLED_HARDWARE, 0x40);
 8001498:	2140      	movs	r1, #64	; 0x40
 800149a:	480a      	ldr	r0, [pc, #40]	; (80014c4 <Driver_OLED_Send_START+0x6c>)
 800149c:	f004 ffb6 	bl	800640c <I2C_SendData>
 80014a0:	e003      	b.n	80014aa <Driver_OLED_Send_START+0x52>
    }else{
        I2C_SendData(OLED_HARDWARE, 0x00);
 80014a2:	2100      	movs	r1, #0
 80014a4:	4807      	ldr	r0, [pc, #28]	; (80014c4 <Driver_OLED_Send_START+0x6c>)
 80014a6:	f004 ffb1 	bl	800640c <I2C_SendData>
    }
    _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTED) == ERROR);
 80014aa:	bf00      	nop
 80014ac:	4908      	ldr	r1, [pc, #32]	; (80014d0 <Driver_OLED_Send_START+0x78>)
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <Driver_OLED_Send_START+0x6c>)
 80014b0:	f004 fffa 	bl	80064a8 <I2C_CheckEvent>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f8      	beq.n	80014ac <Driver_OLED_Send_START+0x54>
    
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40005800 	andmi	r5, r0, r0, lsl #16
 80014c8:	00030001 	andeq	r0, r3, r1
 80014cc:	00070082 	andeq	r0, r7, r2, lsl #1
 80014d0:	00070084 	andeq	r0, r7, r4, lsl #1

080014d4 <Driver_OLED_SendDatas>:

/* 发送一串数据，数据中不包括地址 */
void Driver_OLED_SendDatas(uint8_t *commands, uint32_t length){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
    
    uint32_t i;
    /* 循环发送数据 */
    for(i=0; i<length; i++){
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e012      	b.n	800150a <Driver_OLED_SendDatas+0x36>
        I2C_SendData(OLED_HARDWARE, commands[i]);
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4413      	add	r3, r2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	480f      	ldr	r0, [pc, #60]	; (800152c <Driver_OLED_SendDatas+0x58>)
 80014f0:	f004 ff8c 	bl	800640c <I2C_SendData>
        //I2C_SendData(OLED_HARDWARE, *(commands + i));
        /* 等待数据发送完成 */
        _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 80014f4:	bf00      	nop
 80014f6:	490e      	ldr	r1, [pc, #56]	; (8001530 <Driver_OLED_SendDatas+0x5c>)
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <Driver_OLED_SendDatas+0x58>)
 80014fa:	f004 ffd5 	bl	80064a8 <I2C_CheckEvent>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f8      	beq.n	80014f6 <Driver_OLED_SendDatas+0x22>
    for(i=0; i<length; i++){
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	3301      	adds	r3, #1
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d3e8      	bcc.n	80014e4 <Driver_OLED_SendDatas+0x10>
    }
    /* 等待最后一个数据发送完 */
    _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
 8001512:	bf00      	nop
 8001514:	4907      	ldr	r1, [pc, #28]	; (8001534 <Driver_OLED_SendDatas+0x60>)
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <Driver_OLED_SendDatas+0x58>)
 8001518:	f004 fff6 	bl	8006508 <I2C_GetFlagStatus>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f8      	beq.n	8001514 <Driver_OLED_SendDatas+0x40>
    
}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40005800 	andmi	r5, r0, r0, lsl #16
 8001530:	00070080 	andeq	r0, r7, r0, lsl #1
 8001534:	10000004 	andne	r0, r0, r4

08001538 <Driver_OLED_Fill>:

/* 屏幕输出 false：全黑，true全白，这是命令*/
void Driver_OLED_Fill(uint8_t data){
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
    uint8_t i,j;
    /* 设置页地址0-7，设置显示位置—列低地址，设置显示位置—列高地址 */
    uint8_t command[] = {0x00, 0x10};
 8001542:	2300      	movs	r3, #0
 8001544:	733b      	strb	r3, [r7, #12]
 8001546:	2310      	movs	r3, #16
 8001548:	737b      	strb	r3, [r7, #13]
    /* 清理八页 */
    for(i=0;i<8;i++){
 800154a:	2300      	movs	r3, #0
 800154c:	73fb      	strb	r3, [r7, #15]
 800154e:	e034      	b.n	80015ba <Driver_OLED_Fill+0x82>
        /* 开始发送指令 */
        Driver_OLED_Send_START(OLED_COMMAND);
 8001550:	2000      	movs	r0, #0
 8001552:	f7ff ff81 	bl	8001458 <Driver_OLED_Send_START>
        /* 设置页地址0-7 */
        I2C_SendData(OLED_HARDWARE, 0xb0+i);
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	3b50      	subs	r3, #80	; 0x50
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4619      	mov	r1, r3
 800155e:	481e      	ldr	r0, [pc, #120]	; (80015d8 <Driver_OLED_Fill+0xa0>)
 8001560:	f004 ff54 	bl	800640c <I2C_SendData>
        _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTED) == ERROR);
 8001564:	bf00      	nop
 8001566:	491d      	ldr	r1, [pc, #116]	; (80015dc <Driver_OLED_Fill+0xa4>)
 8001568:	481b      	ldr	r0, [pc, #108]	; (80015d8 <Driver_OLED_Fill+0xa0>)
 800156a:	f004 ff9d 	bl	80064a8 <I2C_CheckEvent>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f8      	beq.n	8001566 <Driver_OLED_Fill+0x2e>
        /* 发送剩下的指令 */
        Driver_OLED_SendDatas(command, sizeof(command));
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	2102      	movs	r1, #2
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ffaa 	bl	80014d4 <Driver_OLED_SendDatas>
        /* 开始发送数据 */
        Driver_OLED_Send_START(OLED_DATA);
 8001580:	2040      	movs	r0, #64	; 0x40
 8001582:	f7ff ff69 	bl	8001458 <Driver_OLED_Send_START>
        for(j=0;j<128;j++){
 8001586:	2300      	movs	r3, #0
 8001588:	73bb      	strb	r3, [r7, #14]
 800158a:	e00f      	b.n	80015ac <Driver_OLED_Fill+0x74>
            /* 全黑 */
            I2C_SendData(OLED_HARDWARE, data);
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	4619      	mov	r1, r3
 8001590:	4811      	ldr	r0, [pc, #68]	; (80015d8 <Driver_OLED_Fill+0xa0>)
 8001592:	f004 ff3b 	bl	800640c <I2C_SendData>
            /* 等待数据发送完成 */
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 8001596:	bf00      	nop
 8001598:	4911      	ldr	r1, [pc, #68]	; (80015e0 <Driver_OLED_Fill+0xa8>)
 800159a:	480f      	ldr	r0, [pc, #60]	; (80015d8 <Driver_OLED_Fill+0xa0>)
 800159c:	f004 ff84 	bl	80064a8 <I2C_CheckEvent>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f8      	beq.n	8001598 <Driver_OLED_Fill+0x60>
        for(j=0;j<128;j++){
 80015a6:	7bbb      	ldrb	r3, [r7, #14]
 80015a8:	3301      	adds	r3, #1
 80015aa:	73bb      	strb	r3, [r7, #14]
 80015ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	daeb      	bge.n	800158c <Driver_OLED_Fill+0x54>
    for(i=0;i<8;i++){
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	3301      	adds	r3, #1
 80015b8:	73fb      	strb	r3, [r7, #15]
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	2b07      	cmp	r3, #7
 80015be:	d9c7      	bls.n	8001550 <Driver_OLED_Fill+0x18>
        }
    }
    /* 等待最后一个数据发送完 */
    _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
 80015c0:	bf00      	nop
 80015c2:	4908      	ldr	r1, [pc, #32]	; (80015e4 <Driver_OLED_Fill+0xac>)
 80015c4:	4804      	ldr	r0, [pc, #16]	; (80015d8 <Driver_OLED_Fill+0xa0>)
 80015c6:	f004 ff9f 	bl	8006508 <I2C_GetFlagStatus>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f8      	beq.n	80015c2 <Driver_OLED_Fill+0x8a>
    
}
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40005800 	andmi	r5, r0, r0, lsl #16
 80015dc:	00070084 	andeq	r0, r7, r4, lsl #1
 80015e0:	00070080 	andeq	r0, r7, r0, lsl #1
 80015e4:	10000004 	andne	r0, r0, r4

080015e8 <Driver_OLED_ClearRow>:

/* 清除一行,行距地址line 0-7 */
void Driver_OLED_ClearRow(uint8_t line){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
    uint8_t j;
    /* 设置页地址0-7，设置显示位置—列低地址，设置显示位置—列高地址 */
    uint8_t command[] = {0x00, 0x10};
 80015f2:	2300      	movs	r3, #0
 80015f4:	733b      	strb	r3, [r7, #12]
 80015f6:	2310      	movs	r3, #16
 80015f8:	737b      	strb	r3, [r7, #13]
    /* 开始发送指令 */
    Driver_OLED_Send_START(OLED_COMMAND);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f7ff ff2c 	bl	8001458 <Driver_OLED_Send_START>
    /* 设置页地址0-7 */
    I2C_SendData(OLED_HARDWARE, 0xb0+line);
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	3b50      	subs	r3, #80	; 0x50
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4619      	mov	r1, r3
 8001608:	481a      	ldr	r0, [pc, #104]	; (8001674 <Driver_OLED_ClearRow+0x8c>)
 800160a:	f004 feff 	bl	800640c <I2C_SendData>
    _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTED) == ERROR);
 800160e:	bf00      	nop
 8001610:	4919      	ldr	r1, [pc, #100]	; (8001678 <Driver_OLED_ClearRow+0x90>)
 8001612:	4818      	ldr	r0, [pc, #96]	; (8001674 <Driver_OLED_ClearRow+0x8c>)
 8001614:	f004 ff48 	bl	80064a8 <I2C_CheckEvent>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f8      	beq.n	8001610 <Driver_OLED_ClearRow+0x28>
    /* 发送剩下的指令 */
    Driver_OLED_SendDatas(command, sizeof(command));
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	2102      	movs	r1, #2
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff55 	bl	80014d4 <Driver_OLED_SendDatas>
    /* 开始发送数据 */
    Driver_OLED_Send_START(OLED_DATA);
 800162a:	2040      	movs	r0, #64	; 0x40
 800162c:	f7ff ff14 	bl	8001458 <Driver_OLED_Send_START>
    for(j=0;j<128;j++){
 8001630:	2300      	movs	r3, #0
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	e00e      	b.n	8001654 <Driver_OLED_ClearRow+0x6c>
        /* 全黑 */
        I2C_SendData(OLED_HARDWARE, 0x0);
 8001636:	2100      	movs	r1, #0
 8001638:	480e      	ldr	r0, [pc, #56]	; (8001674 <Driver_OLED_ClearRow+0x8c>)
 800163a:	f004 fee7 	bl	800640c <I2C_SendData>
        /* 等待数据发送完成 */
        _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 800163e:	bf00      	nop
 8001640:	490e      	ldr	r1, [pc, #56]	; (800167c <Driver_OLED_ClearRow+0x94>)
 8001642:	480c      	ldr	r0, [pc, #48]	; (8001674 <Driver_OLED_ClearRow+0x8c>)
 8001644:	f004 ff30 	bl	80064a8 <I2C_CheckEvent>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f8      	beq.n	8001640 <Driver_OLED_ClearRow+0x58>
    for(j=0;j<128;j++){
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	3301      	adds	r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
 8001654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001658:	2b00      	cmp	r3, #0
 800165a:	daec      	bge.n	8001636 <Driver_OLED_ClearRow+0x4e>
    }
    /* 等待最后一个数据发送完 */
    _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
 800165c:	bf00      	nop
 800165e:	4908      	ldr	r1, [pc, #32]	; (8001680 <Driver_OLED_ClearRow+0x98>)
 8001660:	4804      	ldr	r0, [pc, #16]	; (8001674 <Driver_OLED_ClearRow+0x8c>)
 8001662:	f004 ff51 	bl	8006508 <I2C_GetFlagStatus>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f8      	beq.n	800165e <Driver_OLED_ClearRow+0x76>
    
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40005800 	andmi	r5, r0, r0, lsl #16
 8001678:	00070084 	andeq	r0, r7, r4, lsl #1
 800167c:	00070080 	andeq	r0, r7, r0, lsl #1
 8001680:	10000004 	andne	r0, r0, r4

08001684 <Driver_OLED_Set_Position>:

/* 设置位置X：0-127，Y：0-7，这是命令*/
void Driver_OLED_Set_Position(uint8_t x, uint8_t y){
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	460a      	mov	r2, r1
 800168e:	71fb      	strb	r3, [r7, #7]
 8001690:	4613      	mov	r3, r2
 8001692:	71bb      	strb	r3, [r7, #6]
    /* 发送列0-7 */
    I2C_SendData(OLED_HARDWARE, 0xb0 + y);
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	3b50      	subs	r3, #80	; 0x50
 8001698:	b2db      	uxtb	r3, r3
 800169a:	4619      	mov	r1, r3
 800169c:	4818      	ldr	r0, [pc, #96]	; (8001700 <Driver_OLED_Set_Position+0x7c>)
 800169e:	f004 feb5 	bl	800640c <I2C_SendData>
    _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 80016a2:	bf00      	nop
 80016a4:	4917      	ldr	r1, [pc, #92]	; (8001704 <Driver_OLED_Set_Position+0x80>)
 80016a6:	4816      	ldr	r0, [pc, #88]	; (8001700 <Driver_OLED_Set_Position+0x7c>)
 80016a8:	f004 fefe 	bl	80064a8 <I2C_CheckEvent>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f8      	beq.n	80016a4 <Driver_OLED_Set_Position+0x20>
    I2C_SendData(OLED_HARDWARE, ((x&0xf0)>>4)|0x10);
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	f043 0310 	orr.w	r3, r3, #16
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	4619      	mov	r1, r3
 80016c0:	480f      	ldr	r0, [pc, #60]	; (8001700 <Driver_OLED_Set_Position+0x7c>)
 80016c2:	f004 fea3 	bl	800640c <I2C_SendData>
    _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 80016c6:	bf00      	nop
 80016c8:	490e      	ldr	r1, [pc, #56]	; (8001704 <Driver_OLED_Set_Position+0x80>)
 80016ca:	480d      	ldr	r0, [pc, #52]	; (8001700 <Driver_OLED_Set_Position+0x7c>)
 80016cc:	f004 feec 	bl	80064a8 <I2C_CheckEvent>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f8      	beq.n	80016c8 <Driver_OLED_Set_Position+0x44>
    I2C_SendData(OLED_HARDWARE, ( x & 0x0f));
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	f003 030f 	and.w	r3, r3, #15
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	4619      	mov	r1, r3
 80016e0:	4807      	ldr	r0, [pc, #28]	; (8001700 <Driver_OLED_Set_Position+0x7c>)
 80016e2:	f004 fe93 	bl	800640c <I2C_SendData>
    _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTED) == ERROR);
 80016e6:	bf00      	nop
 80016e8:	4907      	ldr	r1, [pc, #28]	; (8001708 <Driver_OLED_Set_Position+0x84>)
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <Driver_OLED_Set_Position+0x7c>)
 80016ec:	f004 fedc 	bl	80064a8 <I2C_CheckEvent>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f8      	beq.n	80016e8 <Driver_OLED_Set_Position+0x64>
    
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40005800 	andmi	r5, r0, r0, lsl #16
 8001704:	00070080 	andeq	r0, r7, r0, lsl #1
 8001708:	00070084 	andeq	r0, r7, r4, lsl #1

0800170c <Driver_OLED_Show_Char>:

/* 显示字符，这是数据 */
void Driver_OLED_Show_Char(uint8_t x, uint8_t y, uint8_t chr, uint8_t charSize, uint8_t rever){
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	4604      	mov	r4, r0
 8001714:	4608      	mov	r0, r1
 8001716:	4611      	mov	r1, r2
 8001718:	461a      	mov	r2, r3
 800171a:	4623      	mov	r3, r4
 800171c:	71fb      	strb	r3, [r7, #7]
 800171e:	4603      	mov	r3, r0
 8001720:	71bb      	strb	r3, [r7, #6]
 8001722:	460b      	mov	r3, r1
 8001724:	717b      	strb	r3, [r7, #5]
 8001726:	4613      	mov	r3, r2
 8001728:	713b      	strb	r3, [r7, #4]
    uint8_t charIndex = 0,i;
 800172a:	2300      	movs	r3, #0
 800172c:	73bb      	strb	r3, [r7, #14]
    charIndex = chr-0x20;
 800172e:	797b      	ldrb	r3, [r7, #5]
 8001730:	3b20      	subs	r3, #32
 8001732:	73bb      	strb	r3, [r7, #14]
    /* 转换显示位置 */
    y = (x/128 + y) % 64;
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	09db      	lsrs	r3, r3, #7
 8001738:	b2da      	uxtb	r2, r3
 800173a:	79bb      	ldrb	r3, [r7, #6]
 800173c:	4413      	add	r3, r2
 800173e:	b2db      	uxtb	r3, r3
 8001740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001744:	71bb      	strb	r3, [r7, #6]
    x = x%128;
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800174c:	71fb      	strb	r3, [r7, #7]
    /* 选择显示文字大小 */
    if(charSize == 16){
 800174e:	793b      	ldrb	r3, [r7, #4]
 8001750:	2b10      	cmp	r3, #16
 8001752:	d15e      	bne.n	8001812 <Driver_OLED_Show_Char+0x106>
        /* 发送第一行 */
        Driver_OLED_Send_START(OLED_COMMAND);
 8001754:	2000      	movs	r0, #0
 8001756:	f7ff fe7f 	bl	8001458 <Driver_OLED_Send_START>
           
        Driver_OLED_Set_Position(x,y);
 800175a:	79ba      	ldrb	r2, [r7, #6]
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff8f 	bl	8001684 <Driver_OLED_Set_Position>
        Driver_OLED_Send_START(OLED_DATA);
 8001766:	2040      	movs	r0, #64	; 0x40
 8001768:	f7ff fe76 	bl	8001458 <Driver_OLED_Send_START>
        /* 发送字符数据 */
        for(i=0;i<8;i++) {
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]
 8001770:	e021      	b.n	80017b6 <Driver_OLED_Show_Char+0xaa>
            
            I2C_SendData(OLED_HARDWARE, rever ? ~F8X16[charIndex*16+i] : F8X16[charIndex*16+i]);
 8001772:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d008      	beq.n	800178c <Driver_OLED_Show_Char+0x80>
 800177a:	7bbb      	ldrb	r3, [r7, #14]
 800177c:	011a      	lsls	r2, r3, #4
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	4413      	add	r3, r2
 8001782:	4a48      	ldr	r2, [pc, #288]	; (80018a4 <Driver_OLED_Show_Char+0x198>)
 8001784:	5cd3      	ldrb	r3, [r2, r3]
 8001786:	43db      	mvns	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	e005      	b.n	8001798 <Driver_OLED_Show_Char+0x8c>
 800178c:	7bbb      	ldrb	r3, [r7, #14]
 800178e:	011a      	lsls	r2, r3, #4
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	4413      	add	r3, r2
 8001794:	4a43      	ldr	r2, [pc, #268]	; (80018a4 <Driver_OLED_Show_Char+0x198>)
 8001796:	5cd3      	ldrb	r3, [r2, r3]
 8001798:	4619      	mov	r1, r3
 800179a:	4843      	ldr	r0, [pc, #268]	; (80018a8 <Driver_OLED_Show_Char+0x19c>)
 800179c:	f004 fe36 	bl	800640c <I2C_SendData>
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 80017a0:	bf00      	nop
 80017a2:	4942      	ldr	r1, [pc, #264]	; (80018ac <Driver_OLED_Show_Char+0x1a0>)
 80017a4:	4840      	ldr	r0, [pc, #256]	; (80018a8 <Driver_OLED_Show_Char+0x19c>)
 80017a6:	f004 fe7f 	bl	80064a8 <I2C_CheckEvent>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f8      	beq.n	80017a2 <Driver_OLED_Show_Char+0x96>
        for(i=0;i<8;i++) {
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	3301      	adds	r3, #1
 80017b4:	73fb      	strb	r3, [r7, #15]
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	2b07      	cmp	r3, #7
 80017ba:	d9da      	bls.n	8001772 <Driver_OLED_Show_Char+0x66>
        }
        //发送第二行
        Driver_OLED_Send_START(OLED_COMMAND);
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff fe4b 	bl	8001458 <Driver_OLED_Send_START>
        Driver_OLED_Set_Position(x,y+1);
 80017c2:	79bb      	ldrb	r3, [r7, #6]
 80017c4:	3301      	adds	r3, #1
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff59 	bl	8001684 <Driver_OLED_Set_Position>
        Driver_OLED_Send_START(OLED_DATA);
 80017d2:	2040      	movs	r0, #64	; 0x40
 80017d4:	f7ff fe40 	bl	8001458 <Driver_OLED_Send_START>
        /* 发送字符数据 */
        for(i=0;i<8;i++){
 80017d8:	2300      	movs	r3, #0
 80017da:	73fb      	strb	r3, [r7, #15]
 80017dc:	e015      	b.n	800180a <Driver_OLED_Show_Char+0xfe>
            I2C_SendData(OLED_HARDWARE, F8X16[charIndex*16+i+8]);
 80017de:	7bbb      	ldrb	r3, [r7, #14]
 80017e0:	011a      	lsls	r2, r3, #4
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	4413      	add	r3, r2
 80017e6:	3308      	adds	r3, #8
 80017e8:	4a2e      	ldr	r2, [pc, #184]	; (80018a4 <Driver_OLED_Show_Char+0x198>)
 80017ea:	5cd3      	ldrb	r3, [r2, r3]
 80017ec:	4619      	mov	r1, r3
 80017ee:	482e      	ldr	r0, [pc, #184]	; (80018a8 <Driver_OLED_Show_Char+0x19c>)
 80017f0:	f004 fe0c 	bl	800640c <I2C_SendData>
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 80017f4:	bf00      	nop
 80017f6:	492d      	ldr	r1, [pc, #180]	; (80018ac <Driver_OLED_Show_Char+0x1a0>)
 80017f8:	482b      	ldr	r0, [pc, #172]	; (80018a8 <Driver_OLED_Show_Char+0x19c>)
 80017fa:	f004 fe55 	bl	80064a8 <I2C_CheckEvent>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f8      	beq.n	80017f6 <Driver_OLED_Show_Char+0xea>
        for(i=0;i<8;i++){
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	3301      	adds	r3, #1
 8001808:	73fb      	strb	r3, [r7, #15]
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	2b07      	cmp	r3, #7
 800180e:	d9e6      	bls.n	80017de <Driver_OLED_Show_Char+0xd2>
 8001810:	e03b      	b.n	800188a <Driver_OLED_Show_Char+0x17e>
        }
    }else {	
        Driver_OLED_Send_START(OLED_COMMAND);
 8001812:	2000      	movs	r0, #0
 8001814:	f7ff fe20 	bl	8001458 <Driver_OLED_Send_START>
        Driver_OLED_Set_Position(x,y);
 8001818:	79ba      	ldrb	r2, [r7, #6]
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff30 	bl	8001684 <Driver_OLED_Set_Position>
        Driver_OLED_Send_START(OLED_DATA);
 8001824:	2040      	movs	r0, #64	; 0x40
 8001826:	f7ff fe17 	bl	8001458 <Driver_OLED_Send_START>
        for(i=0;i<6;i++){
 800182a:	2300      	movs	r3, #0
 800182c:	73fb      	strb	r3, [r7, #15]
 800182e:	e029      	b.n	8001884 <Driver_OLED_Show_Char+0x178>
            I2C_SendData(OLED_HARDWARE, rever ? ~F6x8[charIndex][i] : F6x8[charIndex][i]);
 8001830:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00c      	beq.n	8001852 <Driver_OLED_Show_Char+0x146>
 8001838:	7bba      	ldrb	r2, [r7, #14]
 800183a:	7bf9      	ldrb	r1, [r7, #15]
 800183c:	481c      	ldr	r0, [pc, #112]	; (80018b0 <Driver_OLED_Show_Char+0x1a4>)
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4403      	add	r3, r0
 8001848:	440b      	add	r3, r1
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	43db      	mvns	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	e009      	b.n	8001866 <Driver_OLED_Show_Char+0x15a>
 8001852:	7bba      	ldrb	r2, [r7, #14]
 8001854:	7bf9      	ldrb	r1, [r7, #15]
 8001856:	4816      	ldr	r0, [pc, #88]	; (80018b0 <Driver_OLED_Show_Char+0x1a4>)
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4403      	add	r3, r0
 8001862:	440b      	add	r3, r1
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	4619      	mov	r1, r3
 8001868:	480f      	ldr	r0, [pc, #60]	; (80018a8 <Driver_OLED_Show_Char+0x19c>)
 800186a:	f004 fdcf 	bl	800640c <I2C_SendData>
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 800186e:	bf00      	nop
 8001870:	490e      	ldr	r1, [pc, #56]	; (80018ac <Driver_OLED_Show_Char+0x1a0>)
 8001872:	480d      	ldr	r0, [pc, #52]	; (80018a8 <Driver_OLED_Show_Char+0x19c>)
 8001874:	f004 fe18 	bl	80064a8 <I2C_CheckEvent>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f8      	beq.n	8001870 <Driver_OLED_Show_Char+0x164>
        for(i=0;i<6;i++){
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	3301      	adds	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	2b05      	cmp	r3, #5
 8001888:	d9d2      	bls.n	8001830 <Driver_OLED_Show_Char+0x124>
        }
    }
    /* 等待最后一个数据发送完 */
    _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
 800188a:	bf00      	nop
 800188c:	4909      	ldr	r1, [pc, #36]	; (80018b4 <Driver_OLED_Show_Char+0x1a8>)
 800188e:	4806      	ldr	r0, [pc, #24]	; (80018a8 <Driver_OLED_Show_Char+0x19c>)
 8001890:	f004 fe3a 	bl	8006508 <I2C_GetFlagStatus>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f8      	beq.n	800188c <Driver_OLED_Show_Char+0x180>
    
}
 800189a:	bf00      	nop
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd90      	pop	{r4, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	08009a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, ip, pc}
 80018a8:	40005800 	andmi	r5, r0, r0, lsl #16
 80018ac:	00070080 	andeq	r0, r7, r0, lsl #1
 80018b0:	080097ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip, pc}
 80018b4:	10000004 	andne	r0, r0, r4

080018b8 <Driver_OLED_ShowString>:

/* 显示字符串 */
void Driver_OLED_ShowString(uint8_t x,uint8_t y,uint8_t *chr,uint8_t Char_Size, uint8_t rever){
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af02      	add	r7, sp, #8
 80018be:	603a      	str	r2, [r7, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
 80018c6:	460b      	mov	r3, r1
 80018c8:	71bb      	strb	r3, [r7, #6]
 80018ca:	4613      	mov	r3, r2
 80018cc:	717b      	strb	r3, [r7, #5]
    uint8_t j=0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]
    while (chr[j] != '\0'){
 80018d2:	e029      	b.n	8001928 <Driver_OLED_ShowString+0x70>
        Driver_OLED_Show_Char(x,y,chr[j],Char_Size, rever);
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	4413      	add	r3, r2
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	797c      	ldrb	r4, [r7, #5]
 80018de:	79b9      	ldrb	r1, [r7, #6]
 80018e0:	79f8      	ldrb	r0, [r7, #7]
 80018e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	4623      	mov	r3, r4
 80018ea:	f7ff ff0f 	bl	800170c <Driver_OLED_Show_Char>
        if(Char_Size == 16){
 80018ee:	797b      	ldrb	r3, [r7, #5]
 80018f0:	2b10      	cmp	r3, #16
 80018f2:	d10b      	bne.n	800190c <Driver_OLED_ShowString+0x54>
            x+=8;
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	3308      	adds	r3, #8
 80018f8:	71fb      	strb	r3, [r7, #7]
            if(x>120){x=0;y+=2;}
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b78      	cmp	r3, #120	; 0x78
 80018fe:	d910      	bls.n	8001922 <Driver_OLED_ShowString+0x6a>
 8001900:	2300      	movs	r3, #0
 8001902:	71fb      	strb	r3, [r7, #7]
 8001904:	79bb      	ldrb	r3, [r7, #6]
 8001906:	3302      	adds	r3, #2
 8001908:	71bb      	strb	r3, [r7, #6]
 800190a:	e00a      	b.n	8001922 <Driver_OLED_ShowString+0x6a>
        }else{
            x+=6;
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	3306      	adds	r3, #6
 8001910:	71fb      	strb	r3, [r7, #7]
            if(x>120){x=0;y+=1;}
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2b78      	cmp	r3, #120	; 0x78
 8001916:	d904      	bls.n	8001922 <Driver_OLED_ShowString+0x6a>
 8001918:	2300      	movs	r3, #0
 800191a:	71fb      	strb	r3, [r7, #7]
 800191c:	79bb      	ldrb	r3, [r7, #6]
 800191e:	3301      	adds	r3, #1
 8001920:	71bb      	strb	r3, [r7, #6]
        }
        j++;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	3301      	adds	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
    while (chr[j] != '\0'){
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	4413      	add	r3, r2
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1cf      	bne.n	80018d4 <Driver_OLED_ShowString+0x1c>
	}
    
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	bd90      	pop	{r4, r7, pc}

0800193c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4604      	mov	r4, r0
 8001944:	4608      	mov	r0, r1
 8001946:	4611      	mov	r1, r2
 8001948:	461a      	mov	r2, r3
 800194a:	4623      	mov	r3, r4
 800194c:	71fb      	strb	r3, [r7, #7]
 800194e:	4603      	mov	r3, r0
 8001950:	71bb      	strb	r3, [r7, #6]
 8001952:	460b      	mov	r3, r1
 8001954:	80bb      	strh	r3, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2b08      	cmp	r3, #8
 800195e:	d902      	bls.n	8001966 <socket+0x2a>
 8001960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001964:	e0e0      	b.n	8001b28 <socket+0x1ec>
	switch(protocol)
 8001966:	79bb      	ldrb	r3, [r7, #6]
 8001968:	2b01      	cmp	r3, #1
 800196a:	db03      	blt.n	8001974 <socket+0x38>
 800196c:	2b02      	cmp	r3, #2
 800196e:	dd04      	ble.n	800197a <socket+0x3e>
 8001970:	2b04      	cmp	r3, #4
 8001972:	d002      	beq.n	800197a <socket+0x3e>
      case Sn_MR_IPRAW :
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001974:	f06f 0304 	mvn.w	r3, #4
 8001978:	e0d6      	b.n	8001b28 <socket+0x1ec>
         break;
 800197a:	bf00      	nop
	}
	if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	f003 0306 	and.w	r3, r3, #6
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <socket+0x50>
 8001986:	f06f 0305 	mvn.w	r3, #5
 800198a:	e0cd      	b.n	8001b28 <socket+0x1ec>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d028      	beq.n	80019e4 <socket+0xa8>
	{
   	switch(protocol)
 8001992:	79bb      	ldrb	r3, [r7, #6]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d002      	beq.n	800199e <socket+0x62>
 8001998:	2b02      	cmp	r3, #2
 800199a:	d008      	beq.n	80019ae <socket+0x72>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800199c:	e022      	b.n	80019e4 <socket+0xa8>
   	      if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d11a      	bne.n	80019de <socket+0xa2>
 80019a8:	f06f 0305 	mvn.w	r3, #5
 80019ac:	e0bc      	b.n	8001b28 <socket+0x1ec>
   	      if(flag & SF_IGMP_VER2)
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	f003 0320 	and.w	r3, r3, #32
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <socket+0x8a>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80019b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	db02      	blt.n	80019c6 <socket+0x8a>
 80019c0:	f06f 0305 	mvn.w	r3, #5
 80019c4:	e0b0      	b.n	8001b28 <socket+0x1ec>
      	      if(flag & SF_UNI_BLOCK)
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d008      	beq.n	80019e2 <socket+0xa6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80019d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	db04      	blt.n	80019e2 <socket+0xa6>
 80019d8:	f06f 0305 	mvn.w	r3, #5
 80019dc:	e0a4      	b.n	8001b28 <socket+0x1ec>
   	      break;
 80019de:	bf00      	nop
 80019e0:	e000      	b.n	80019e4 <socket+0xa8>
   	      break;
 80019e2:	bf00      	nop
   	}
   }
	close(sn);
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f8ac 	bl	8001b44 <close>
	setSn_MR(sn, (protocol | (flag & 0xF0)));
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	3301      	adds	r3, #1
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4618      	mov	r0, r3
 80019f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019fa:	f023 030f 	bic.w	r3, r3, #15
 80019fe:	b25a      	sxtb	r2, r3
 8001a00:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	b25b      	sxtb	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f001 fc34 	bl	8003278 <WIZCHIP_WRITE>
	if(!port)
 8001a10:	88bb      	ldrh	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d110      	bne.n	8001a38 <socket+0xfc>
	{
	   port = sock_any_port++;
 8001a16:	4b46      	ldr	r3, [pc, #280]	; (8001b30 <socket+0x1f4>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	b291      	uxth	r1, r2
 8001a1e:	4a44      	ldr	r2, [pc, #272]	; (8001b30 <socket+0x1f4>)
 8001a20:	8011      	strh	r1, [r2, #0]
 8001a22:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001a24:	4b42      	ldr	r3, [pc, #264]	; (8001b30 <socket+0x1f4>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d103      	bne.n	8001a38 <socket+0xfc>
 8001a30:	4b3f      	ldr	r3, [pc, #252]	; (8001b30 <socket+0x1f4>)
 8001a32:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001a36:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a44:	461a      	mov	r2, r3
 8001a46:	88bb      	ldrh	r3, [r7, #4]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4610      	mov	r0, r2
 8001a52:	f001 fc11 	bl	8003278 <WIZCHIP_WRITE>
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a62:	461a      	mov	r2, r3
 8001a64:	88bb      	ldrh	r3, [r7, #4]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	f001 fc04 	bl	8003278 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	3301      	adds	r3, #1
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f001 fbfa 	bl	8003278 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001a84:	bf00      	nop
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001a92:	4618      	mov	r0, r3
 8001a94:	f001 fbc0 	bl	8003218 <WIZCHIP_READ>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f3      	bne.n	8001a86 <socket+0x14a>
   // 这儿没有清空socket 的io mode
   sock_io_mode &= ~(1 << sn);      //FIX:清除相应的位
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <socket+0x1f8>)
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <socket+0x1f8>)
 8001aba:	801a      	strh	r2, [r3, #0]
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001abc:	78fb      	ldrb	r3, [r7, #3]
 8001abe:	f003 0201 	and.w	r2, r3, #1
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <socket+0x1f8>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <socket+0x1f8>)
 8001ad8:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	2201      	movs	r2, #1
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	b21a      	sxth	r2, r3
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <socket+0x1fc>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	4013      	ands	r3, r2
 8001af0:	b21b      	sxth	r3, r3
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <socket+0x1fc>)
 8001af6:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	4a10      	ldr	r2, [pc, #64]	; (8001b3c <socket+0x200>)
 8001afc:	2100      	movs	r1, #0
 8001afe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = 0;
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <socket+0x204>)
 8001b06:	2100      	movs	r1, #0
 8001b08:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001b0a:	bf00      	nop
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	3301      	adds	r3, #1
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f001 fb7d 	bl	8003218 <WIZCHIP_READ>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f3      	beq.n	8001b0c <socket+0x1d0>
   return (int8_t)sn;
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd90      	pop	{r4, r7, pc}
 8001b30:	20000080 	andcs	r0, r0, r0, lsl #1
 8001b34:	200000f8 	strdcs	r0, [r0], -r8
 8001b38:	200000fa 	strdcs	r0, [r0], -sl
 8001b3c:	200000fc 	strdcs	r0, [r0], -ip
 8001b40:	2000010c 	andcs	r0, r0, ip, lsl #2

08001b44 <close>:

int8_t close(uint8_t sn)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d902      	bls.n	8001b5a <close+0x16>
 8001b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b58:	e046      	b.n	8001be8 <close+0xa4>
	
	setSn_CR(sn,Sn_CR_CLOSE);
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	3301      	adds	r3, #1
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b66:	2110      	movs	r1, #16
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f001 fb85 	bl	8003278 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001b6e:	bf00      	nop
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	3301      	adds	r3, #1
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f001 fb4b 	bl	8003218 <WIZCHIP_READ>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f3      	bne.n	8001b70 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001b94:	211f      	movs	r1, #31
 8001b96:	4618      	mov	r0, r3
 8001b98:	f001 fb6e 	bl	8003278 <WIZCHIP_WRITE>
	sock_is_sending &= ~(1<<sn);
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	b21b      	sxth	r3, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	b21a      	sxth	r2, r3
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <close+0xac>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <close+0xac>)
 8001bb8:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <close+0xb0>)
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	4a0c      	ldr	r2, [pc, #48]	; (8001bf8 <close+0xb4>)
 8001bc8:	2100      	movs	r1, #0
 8001bca:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001bcc:	bf00      	nop
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f001 fb1c 	bl	8003218 <WIZCHIP_READ>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f3      	bne.n	8001bce <close+0x8a>
	return SOCK_OK;
 8001be6:	2301      	movs	r3, #1
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	200000fa 	strdcs	r0, [r0], -sl
 8001bf4:	200000fc 	strdcs	r0, [r0], -ip
 8001bf8:	2000010c 	andcs	r0, r0, ip, lsl #2

08001bfc <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	6039      	str	r1, [r7, #0]
 8001c06:	71fb      	strb	r3, [r7, #7]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d902      	bls.n	8001c18 <connect+0x1c>
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c16:	e0a1      	b.n	8001d5c <connect+0x160>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4618      	mov	r0, r3
 8001c22:	f001 faf9 	bl	8003218 <WIZCHIP_READ>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d002      	beq.n	8001c36 <connect+0x3a>
 8001c30:	f06f 0304 	mvn.w	r3, #4
 8001c34:	e092      	b.n	8001d5c <connect+0x160>
   CHECK_SOCKINIT();
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001c42:	4618      	mov	r0, r3
 8001c44:	f001 fae8 	bl	8003218 <WIZCHIP_READ>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b13      	cmp	r3, #19
 8001c4c:	d002      	beq.n	8001c54 <connect+0x58>
 8001c4e:	f06f 0302 	mvn.w	r3, #2
 8001c52:	e083      	b.n	8001d5c <connect+0x160>
	if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c5c:	d003      	beq.n	8001c66 <connect+0x6a>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d102      	bne.n	8001c6c <connect+0x70>
 8001c66:	f06f 030b 	mvn.w	r3, #11
 8001c6a:	e077      	b.n	8001d5c <connect+0x160>
	if(port == 0) return SOCKERR_PORTZERO;
 8001c6c:	88bb      	ldrh	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <connect+0x7c>
 8001c72:	f06f 030a 	mvn.w	r3, #10
 8001c76:	e071      	b.n	8001d5c <connect+0x160>
	setSn_DIPR(sn,addr);
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001c84:	2204      	movs	r2, #4
 8001c86:	6839      	ldr	r1, [r7, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f001 fb6f 	bl	800336c <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	3301      	adds	r3, #1
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	88bb      	ldrh	r3, [r7, #4]
 8001c9e:	0a1b      	lsrs	r3, r3, #8
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	f001 fae6 	bl	8003278 <WIZCHIP_WRITE>
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001cb8:	461a      	mov	r2, r3
 8001cba:	88bb      	ldrh	r3, [r7, #4]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	f001 fad9 	bl	8003278 <WIZCHIP_WRITE>
   #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
      setSUBR(0);
   #endif
	setSn_CR(sn,Sn_CR_CONNECT);
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	3301      	adds	r3, #1
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001cd2:	2104      	movs	r1, #4
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f001 facf 	bl	8003278 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001cda:	bf00      	nop
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f001 fa95 	bl	8003218 <WIZCHIP_READ>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f3      	bne.n	8001cdc <connect+0xe0>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <connect+0x168>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	fa42 f303 	asr.w	r3, r2, r3
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01c      	beq.n	8001d42 <connect+0x146>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e027      	b.n	8001d5c <connect+0x160>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {   
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	3301      	adds	r3, #1
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f001 fa7d 	bl	8003218 <WIZCHIP_READ>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00c      	beq.n	8001d42 <connect+0x146>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d34:	2108      	movs	r1, #8
 8001d36:	4618      	mov	r0, r3
 8001d38:	f001 fa9e 	bl	8003278 <WIZCHIP_WRITE>
         #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
            setSUBR((uint8_t*)"\x00\x00\x00\x00");
         #endif
         return SOCKERR_TIMEOUT;
 8001d3c:	f06f 030c 	mvn.w	r3, #12
 8001d40:	e00c      	b.n	8001d5c <connect+0x160>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	3301      	adds	r3, #1
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f001 fa62 	bl	8003218 <WIZCHIP_READ>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b17      	cmp	r3, #23
 8001d58:	d1d8      	bne.n	8001d0c <connect+0x110>
	}
   #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
      setSUBR((uint8_t*)"\x00\x00\x00\x00");
   #endif
   
   return SOCK_OK;
 8001d5a:	2301      	movs	r3, #1
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	200000f8 	strdcs	r0, [r0], -r8

08001d68 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	71fb      	strb	r3, [r7, #7]
 8001d74:	4613      	mov	r3, r2
 8001d76:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d902      	bls.n	8001d8c <send+0x24>
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d8a:	e0de      	b.n	8001f4a <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	3301      	adds	r3, #1
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4618      	mov	r0, r3
 8001d96:	f001 fa3f 	bl	8003218 <WIZCHIP_READ>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d002      	beq.n	8001daa <send+0x42>
 8001da4:	f06f 0304 	mvn.w	r3, #4
 8001da8:	e0cf      	b.n	8001f4a <send+0x1e2>
   CHECK_SOCKDATA();
 8001daa:	88bb      	ldrh	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <send+0x4e>
 8001db0:	f06f 030d 	mvn.w	r3, #13
 8001db4:	e0c9      	b.n	8001f4a <send+0x1e2>
   tmp = getSn_SR(sn);
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	3301      	adds	r3, #1
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f001 fa28 	bl	8003218 <WIZCHIP_READ>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	2b17      	cmp	r3, #23
 8001dd0:	d005      	beq.n	8001dde <send+0x76>
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	2b1c      	cmp	r3, #28
 8001dd6:	d002      	beq.n	8001dde <send+0x76>
 8001dd8:	f06f 0306 	mvn.w	r3, #6
 8001ddc:	e0b5      	b.n	8001f4a <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8001dde:	4b5d      	ldr	r3, [pc, #372]	; (8001f54 <send+0x1ec>)
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	fa42 f303 	asr.w	r3, r2, r3
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d039      	beq.n	8001e66 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	3301      	adds	r3, #1
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f001 fa0a 	bl	8003218 <WIZCHIP_READ>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d019      	beq.n	8001e4a <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001e22:	2110      	movs	r1, #16
 8001e24:	4618      	mov	r0, r3
 8001e26:	f001 fa27 	bl	8003278 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCKERR_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	b21b      	sxth	r3, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	b21a      	sxth	r2, r3
 8001e38:	4b46      	ldr	r3, [pc, #280]	; (8001f54 <send+0x1ec>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	4013      	ands	r3, r2
 8001e40:	b21b      	sxth	r3, r3
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	4b43      	ldr	r3, [pc, #268]	; (8001f54 <send+0x1ec>)
 8001e46:	801a      	strh	r2, [r3, #0]
 8001e48:	e00d      	b.n	8001e66 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d006      	beq.n	8001e62 <send+0xfa>
      {
         close(sn);
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fe74 	bl	8001b44 <close>
         return SOCKERR_TIMEOUT;
 8001e5c:	f06f 030c 	mvn.w	r3, #12
 8001e60:	e073      	b.n	8001f4a <send+0x1e2>
      }
      else return SOCK_BUSY;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e071      	b.n	8001f4a <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001e72:	4618      	mov	r0, r3
 8001e74:	f001 f9d0 	bl	8003218 <WIZCHIP_READ>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	029b      	lsls	r3, r3, #10
 8001e7e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001e80:	88ba      	ldrh	r2, [r7, #4]
 8001e82:	89bb      	ldrh	r3, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d901      	bls.n	8001e8c <send+0x124>
 8001e88:	89bb      	ldrh	r3, [r7, #12]
 8001e8a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f001 fab4 	bl	80033fc <getSn_TX_FSR>
 8001e94:	4603      	mov	r3, r0
 8001e96:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f001 f9b7 	bl	8003218 <WIZCHIP_READ>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	2b17      	cmp	r3, #23
 8001eb2:	d009      	beq.n	8001ec8 <send+0x160>
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	2b1c      	cmp	r3, #28
 8001eb8:	d006      	beq.n	8001ec8 <send+0x160>
      {
         close(sn);
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fe41 	bl	8001b44 <close>
         return SOCKERR_SOCKSTATUS;
 8001ec2:	f06f 0306 	mvn.w	r3, #6
 8001ec6:	e040      	b.n	8001f4a <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001ec8:	4b23      	ldr	r3, [pc, #140]	; (8001f58 <send+0x1f0>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	fa42 f303 	asr.w	r3, r2, r3
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <send+0x180>
 8001edc:	88ba      	ldrh	r2, [r7, #4]
 8001ede:	89bb      	ldrh	r3, [r7, #12]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d901      	bls.n	8001ee8 <send+0x180>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e030      	b.n	8001f4a <send+0x1e2>
      if(len <= freesize) break;
 8001ee8:	88ba      	ldrh	r2, [r7, #4]
 8001eea:	89bb      	ldrh	r3, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d900      	bls.n	8001ef2 <send+0x18a>
   }
 8001ef0:	e7cc      	b.n	8001e8c <send+0x124>
      if(len <= freesize) break;
 8001ef2:	bf00      	nop
   wiz_send_data(sn, buf, len);
 8001ef4:	88ba      	ldrh	r2, [r7, #4]
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	6839      	ldr	r1, [r7, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f001 fb16 	bl	800352c <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif
   setSn_CR(sn,Sn_CR_SEND);
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	3301      	adds	r3, #1
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001f0c:	2120      	movs	r1, #32
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f001 f9b2 	bl	8003278 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8001f14:	bf00      	nop
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001f22:	4618      	mov	r0, r3
 8001f24:	f001 f978 	bl	8003218 <WIZCHIP_READ>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f3      	bne.n	8001f16 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	2201      	movs	r2, #1
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <send+0x1ec>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <send+0x1ec>)
 8001f46:	801a      	strh	r2, [r3, #0]
   return len;
 8001f48:	88bb      	ldrh	r3, [r7, #4]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200000fa 	strdcs	r0, [r0], -sl
 8001f58:	200000f8 	strdcs	r0, [r0], -r8

08001f5c <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	81bb      	strh	r3, [r7, #12]
   CHECK_SOCKNUM();
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d902      	bls.n	8001f80 <recv+0x24>
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f7e:	e09c      	b.n	80020ba <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	3301      	adds	r3, #1
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f001 f945 	bl	8003218 <WIZCHIP_READ>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d002      	beq.n	8001f9e <recv+0x42>
 8001f98:	f06f 0304 	mvn.w	r3, #4
 8001f9c:	e08d      	b.n	80020ba <recv+0x15e>
   CHECK_SOCKDATA();
 8001f9e:	88bb      	ldrh	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d102      	bne.n	8001faa <recv+0x4e>
 8001fa4:	f06f 030d 	mvn.w	r3, #13
 8001fa8:	e087      	b.n	80020ba <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	3301      	adds	r3, #1
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f001 f92e 	bl	8003218 <WIZCHIP_READ>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	029b      	lsls	r3, r3, #10
 8001fc2:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8001fc4:	89ba      	ldrh	r2, [r7, #12]
 8001fc6:	88bb      	ldrh	r3, [r7, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d201      	bcs.n	8001fd0 <recv+0x74>
 8001fcc:	89bb      	ldrh	r3, [r7, #12]
 8001fce:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      recvsize = getSn_RX_RSR(sn);
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f001 fa5e 	bl	8003494 <getSn_RX_RSR>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f001 f915 	bl	8003218 <WIZCHIP_READ>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED)
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	2b17      	cmp	r3, #23
 8001ff6:	d026      	beq.n	8002046 <recv+0xea>
      {
         if(tmp == SOCK_CLOSE_WAIT)
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	2b1c      	cmp	r3, #28
 8001ffc:	d11c      	bne.n	8002038 <recv+0xdc>
         {
            if(recvsize != 0) break;
 8001ffe:	89bb      	ldrh	r3, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d133      	bne.n	800206c <recv+0x110>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	4618      	mov	r0, r3
 8002008:	f001 f9f8 	bl	80033fc <getSn_TX_FSR>
 800200c:	4603      	mov	r3, r0
 800200e:	461c      	mov	r4, r3
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	3301      	adds	r3, #1
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800201c:	4618      	mov	r0, r3
 800201e:	f001 f8fb 	bl	8003218 <WIZCHIP_READ>
 8002022:	4603      	mov	r3, r0
 8002024:	029b      	lsls	r3, r3, #10
 8002026:	429c      	cmp	r4, r3
 8002028:	d10d      	bne.n	8002046 <recv+0xea>
            {
               close(sn);
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fd89 	bl	8001b44 <close>
               return SOCKERR_SOCKSTATUS;
 8002032:	f06f 0306 	mvn.w	r3, #6
 8002036:	e040      	b.n	80020ba <recv+0x15e>
            }
         }
         else
         {
            close(sn);
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fd82 	bl	8001b44 <close>
            return SOCKERR_SOCKSTATUS;
 8002040:	f06f 0306 	mvn.w	r3, #6
 8002044:	e039      	b.n	80020ba <recv+0x15e>
         }
      }
      if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8002046:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <recv+0x168>)
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	fa42 f303 	asr.w	r3, r2, r3
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d004      	beq.n	8002064 <recv+0x108>
 800205a:	89bb      	ldrh	r3, [r7, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <recv+0x108>
 8002060:	2300      	movs	r3, #0
 8002062:	e02a      	b.n	80020ba <recv+0x15e>
      if(recvsize != 0) break;
 8002064:	89bb      	ldrh	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d102      	bne.n	8002070 <recv+0x114>
   };
 800206a:	e7b1      	b.n	8001fd0 <recv+0x74>
            if(recvsize != 0) break;
 800206c:	bf00      	nop
 800206e:	e000      	b.n	8002072 <recv+0x116>
      if(recvsize != 0) break;
 8002070:	bf00      	nop
   if(recvsize < len) len = recvsize;
 8002072:	89ba      	ldrh	r2, [r7, #12]
 8002074:	88bb      	ldrh	r3, [r7, #4]
 8002076:	429a      	cmp	r2, r3
 8002078:	d201      	bcs.n	800207e <recv+0x122>
 800207a:	89bb      	ldrh	r3, [r7, #12]
 800207c:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800207e:	88ba      	ldrh	r2, [r7, #4]
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	6839      	ldr	r1, [r7, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f001 faad 	bl	80035e4 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	3301      	adds	r3, #1
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002096:	2140      	movs	r1, #64	; 0x40
 8002098:	4618      	mov	r0, r3
 800209a:	f001 f8ed 	bl	8003278 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800209e:	bf00      	nop
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	3301      	adds	r3, #1
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80020ac:	4618      	mov	r0, r3
 80020ae:	f001 f8b3 	bl	8003218 <WIZCHIP_READ>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f3      	bne.n	80020a0 <recv+0x144>
   return len;
 80020b8:	88bb      	ldrh	r3, [r7, #4]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd90      	pop	{r4, r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200000f8 	strdcs	r0, [r0], -r8

080020c8 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	4603      	mov	r3, r0
 80020d4:	73fb      	strb	r3, [r7, #15]
 80020d6:	4613      	mov	r3, r2
 80020d8:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	82bb      	strh	r3, [r7, #20]
   CHECK_SOCKNUM();
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d902      	bls.n	80020ee <sendto+0x26>
 80020e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020ec:	e0ea      	b.n	80022c4 <sendto+0x1fc>
   switch(getSn_MR(sn) & 0x0F)
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	3301      	adds	r3, #1
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4618      	mov	r0, r3
 80020f8:	f001 f88e 	bl	8003218 <WIZCHIP_READ>
 80020fc:	4603      	mov	r3, r0
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	2b02      	cmp	r3, #2
 8002104:	d004      	beq.n	8002110 <sendto+0x48>
 8002106:	2b04      	cmp	r3, #4
 8002108:	d002      	beq.n	8002110 <sendto+0x48>
   {
      case Sn_MR_UDP:
      case Sn_MR_MACRAW:
         break;
      default:
         return SOCKERR_SOCKMODE;
 800210a:	f06f 0304 	mvn.w	r3, #4
 800210e:	e0d9      	b.n	80022c4 <sendto+0x1fc>
         break;
 8002110:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8002112:	89bb      	ldrh	r3, [r7, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d102      	bne.n	800211e <sendto+0x56>
 8002118:	f06f 030d 	mvn.w	r3, #13
 800211c:	e0d2      	b.n	80022c4 <sendto+0x1fc>
   if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d102      	bne.n	800212c <sendto+0x64>
 8002126:	f06f 030b 	mvn.w	r3, #11
 800212a:	e0cb      	b.n	80022c4 <sendto+0x1fc>
   if(port == 0)               return SOCKERR_PORTZERO;
 800212c:	8c3b      	ldrh	r3, [r7, #32]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d102      	bne.n	8002138 <sendto+0x70>
 8002132:	f06f 030a 	mvn.w	r3, #10
 8002136:	e0c5      	b.n	80022c4 <sendto+0x1fc>
   tmp = getSn_SR(sn);
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	3301      	adds	r3, #1
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002144:	4618      	mov	r0, r3
 8002146:	f001 f867 	bl	8003218 <WIZCHIP_READ>
 800214a:	4603      	mov	r3, r0
 800214c:	75fb      	strb	r3, [r7, #23]
   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
 800214e:	7dfb      	ldrb	r3, [r7, #23]
 8002150:	2b42      	cmp	r3, #66	; 0x42
 8002152:	d005      	beq.n	8002160 <sendto+0x98>
 8002154:	7dfb      	ldrb	r3, [r7, #23]
 8002156:	2b22      	cmp	r3, #34	; 0x22
 8002158:	d002      	beq.n	8002160 <sendto+0x98>
 800215a:	f06f 0306 	mvn.w	r3, #6
 800215e:	e0b1      	b.n	80022c4 <sendto+0x1fc>
      
   setSn_DIPR(sn,addr);
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	3301      	adds	r3, #1
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800216c:	2204      	movs	r2, #4
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4618      	mov	r0, r3
 8002172:	f001 f8fb 	bl	800336c <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	3301      	adds	r3, #1
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002182:	461a      	mov	r2, r3
 8002184:	8c3b      	ldrh	r3, [r7, #32]
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	b29b      	uxth	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	4619      	mov	r1, r3
 800218e:	4610      	mov	r0, r2
 8002190:	f001 f872 	bl	8003278 <WIZCHIP_WRITE>
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	3301      	adds	r3, #1
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80021a0:	461a      	mov	r2, r3
 80021a2:	8c3b      	ldrh	r3, [r7, #32]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	4619      	mov	r1, r3
 80021a8:	4610      	mov	r0, r2
 80021aa:	f001 f865 	bl	8003278 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	3301      	adds	r3, #1
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80021ba:	4618      	mov	r0, r3
 80021bc:	f001 f82c 	bl	8003218 <WIZCHIP_READ>
 80021c0:	4603      	mov	r3, r0
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	029b      	lsls	r3, r3, #10
 80021c6:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80021c8:	89ba      	ldrh	r2, [r7, #12]
 80021ca:	8abb      	ldrh	r3, [r7, #20]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d901      	bls.n	80021d4 <sendto+0x10c>
 80021d0:	8abb      	ldrh	r3, [r7, #20]
 80021d2:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f001 f910 	bl	80033fc <getSn_TX_FSR>
 80021dc:	4603      	mov	r3, r0
 80021de:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	3301      	adds	r3, #1
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80021ec:	4618      	mov	r0, r3
 80021ee:	f001 f813 	bl	8003218 <WIZCHIP_READ>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d102      	bne.n	80021fe <sendto+0x136>
 80021f8:	f06f 0303 	mvn.w	r3, #3
 80021fc:	e062      	b.n	80022c4 <sendto+0x1fc>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80021fe:	4b33      	ldr	r3, [pc, #204]	; (80022cc <sendto+0x204>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	fa42 f303 	asr.w	r3, r2, r3
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <sendto+0x156>
 8002212:	89ba      	ldrh	r2, [r7, #12]
 8002214:	8abb      	ldrh	r3, [r7, #20]
 8002216:	429a      	cmp	r2, r3
 8002218:	d901      	bls.n	800221e <sendto+0x156>
 800221a:	2300      	movs	r3, #0
 800221c:	e052      	b.n	80022c4 <sendto+0x1fc>
      if(len <= freesize) break;
 800221e:	89ba      	ldrh	r2, [r7, #12]
 8002220:	8abb      	ldrh	r3, [r7, #20]
 8002222:	429a      	cmp	r2, r3
 8002224:	d900      	bls.n	8002228 <sendto+0x160>
   };
 8002226:	e7d5      	b.n	80021d4 <sendto+0x10c>
      if(len <= freesize) break;
 8002228:	bf00      	nop
	wiz_send_data(sn, buf, len);
 800222a:	89ba      	ldrh	r2, [r7, #12]
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	68b9      	ldr	r1, [r7, #8]
 8002230:	4618      	mov	r0, r3
 8002232:	f001 f97b 	bl	800352c <wiz_send_data>

   #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
      setSUBR(0);
   #endif

	setSn_CR(sn,Sn_CR_SEND);
 8002236:	7bfb      	ldrb	r3, [r7, #15]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	3301      	adds	r3, #1
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002242:	2120      	movs	r1, #32
 8002244:	4618      	mov	r0, r3
 8002246:	f001 f817 	bl	8003278 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800224a:	bf00      	nop
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	3301      	adds	r3, #1
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002258:	4618      	mov	r0, r3
 800225a:	f000 ffdd 	bl	8003218 <WIZCHIP_READ>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f3      	bne.n	800224c <sendto+0x184>
   #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
      setSUBR((uint8_t*)"\x00\x00\x00\x00");
   #endif
   while(1)
   {
      tmp = getSn_IR(sn);
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	3301      	adds	r3, #1
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002270:	4618      	mov	r0, r3
 8002272:	f000 ffd1 	bl	8003218 <WIZCHIP_READ>
 8002276:	4603      	mov	r3, r0
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800227e:	7dfb      	ldrb	r3, [r7, #23]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00c      	beq.n	80022a2 <sendto+0x1da>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	3301      	adds	r3, #1
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002294:	2110      	movs	r1, #16
 8002296:	4618      	mov	r0, r3
 8002298:	f000 ffee 	bl	8003278 <WIZCHIP_WRITE>
         break;
 800229c:	bf00      	nop
         setSn_IR(sn, Sn_IR_TIMEOUT);
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
	return len;
 800229e:	89bb      	ldrh	r3, [r7, #12]
 80022a0:	e010      	b.n	80022c4 <sendto+0x1fc>
      else if(tmp & Sn_IR_TIMEOUT)
 80022a2:	7dfb      	ldrb	r3, [r7, #23]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0db      	beq.n	8002264 <sendto+0x19c>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	3301      	adds	r3, #1
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80022b8:	2108      	movs	r1, #8
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 ffdc 	bl	8003278 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80022c0:	f06f 030c 	mvn.w	r3, #12
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	200000f8 	strdcs	r0, [r0], -r8

080022d0 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	4603      	mov	r3, r0
 80022dc:	73fb      	strb	r3, [r7, #15]
 80022de:	4613      	mov	r3, r2
 80022e0:	81bb      	strh	r3, [r7, #12]
   uint8_t  mr;
   uint8_t  head[8];
	uint16_t pack_len=0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d902      	bls.n	80022f2 <recvfrom+0x22>
 80022ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022f0:	e162      	b.n	80025b8 <recvfrom+0x2e8>
   //CHECK_SOCKMODE(Sn_MR_UDP);
   switch((mr=getSn_MR(sn)) & 0x0F)
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	3301      	adds	r3, #1
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 ff8c 	bl	8003218 <WIZCHIP_READ>
 8002300:	4603      	mov	r3, r0
 8002302:	777b      	strb	r3, [r7, #29]
 8002304:	7f7b      	ldrb	r3, [r7, #29]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	2b02      	cmp	r3, #2
 800230c:	d004      	beq.n	8002318 <recvfrom+0x48>
 800230e:	2b04      	cmp	r3, #4
 8002310:	d002      	beq.n	8002318 <recvfrom+0x48>
      case Sn_MR_IPRAW:
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8002312:	f06f 0304 	mvn.w	r3, #4
 8002316:	e14f      	b.n	80025b8 <recvfrom+0x2e8>
         break;
 8002318:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800231a:	89bb      	ldrh	r3, [r7, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d102      	bne.n	8002326 <recvfrom+0x56>
 8002320:	f06f 030d 	mvn.w	r3, #13
 8002324:	e148      	b.n	80025b8 <recvfrom+0x2e8>
   if(sock_remained_size[sn] == 0)
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	4aa5      	ldr	r2, [pc, #660]	; (80025c0 <recvfrom+0x2f0>)
 800232a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d128      	bne.n	8002384 <recvfrom+0xb4>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	4618      	mov	r0, r3
 8002336:	f001 f8ad 	bl	8003494 <getSn_RX_RSR>
 800233a:	4603      	mov	r3, r0
 800233c:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	3301      	adds	r3, #1
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800234a:	4618      	mov	r0, r3
 800234c:	f000 ff64 	bl	8003218 <WIZCHIP_READ>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <recvfrom+0x8c>
 8002356:	f06f 0303 	mvn.w	r3, #3
 800235a:	e12d      	b.n	80025b8 <recvfrom+0x2e8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800235c:	4b99      	ldr	r3, [pc, #612]	; (80025c4 <recvfrom+0x2f4>)
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	fa42 f303 	asr.w	r3, r2, r3
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d004      	beq.n	800237a <recvfrom+0xaa>
 8002370:	8bfb      	ldrh	r3, [r7, #30]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <recvfrom+0xaa>
 8002376:	2300      	movs	r3, #0
 8002378:	e11e      	b.n	80025b8 <recvfrom+0x2e8>
         if(pack_len != 0) break;
 800237a:	8bfb      	ldrh	r3, [r7, #30]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d100      	bne.n	8002382 <recvfrom+0xb2>
      };
 8002380:	e7d7      	b.n	8002332 <recvfrom+0x62>
         if(pack_len != 0) break;
 8002382:	bf00      	nop
   }
   sock_pack_info[sn] = PACK_COMPLETED;
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	4a90      	ldr	r2, [pc, #576]	; (80025c8 <recvfrom+0x2f8>)
 8002388:	2100      	movs	r1, #0
 800238a:	54d1      	strb	r1, [r2, r3]
	switch (mr & 0x07)
 800238c:	7f7b      	ldrb	r3, [r7, #29]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	2b02      	cmp	r3, #2
 8002394:	d002      	beq.n	800239c <recvfrom+0xcc>
 8002396:	2b04      	cmp	r3, #4
 8002398:	d06f      	beq.n	800247a <recvfrom+0x1aa>
 800239a:	e0cf      	b.n	800253c <recvfrom+0x26c>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	4a88      	ldr	r2, [pc, #544]	; (80025c0 <recvfrom+0x2f0>)
 80023a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d152      	bne.n	800244e <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 80023a8:	f107 0114 	add.w	r1, r7, #20
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	2208      	movs	r2, #8
 80023b0:	4618      	mov	r0, r3
 80023b2:	f001 f917 	bl	80035e4 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	3301      	adds	r3, #1
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80023c2:	2140      	movs	r1, #64	; 0x40
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 ff57 	bl	8003278 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80023ca:	bf00      	nop
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	3301      	adds	r3, #1
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 ff1d 	bl	8003218 <WIZCHIP_READ>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1f3      	bne.n	80023cc <recvfrom+0xfc>
   			// read peer's IP address, port number & packet length
    			addr[0] = head[0];
 80023e4:	7d3a      	ldrb	r2, [r7, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3301      	adds	r3, #1
 80023ee:	7d7a      	ldrb	r2, [r7, #21]
 80023f0:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3302      	adds	r3, #2
 80023f6:	7dba      	ldrb	r2, [r7, #22]
 80023f8:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3303      	adds	r3, #3
 80023fe:	7dfa      	ldrb	r2, [r7, #23]
 8002400:	701a      	strb	r2, [r3, #0]
   			*port = head[4];
 8002402:	7e3b      	ldrb	r3, [r7, #24]
 8002404:	b29a      	uxth	r2, r3
 8002406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002408:	801a      	strh	r2, [r3, #0]
   			*port = (*port << 8) + head[5];
 800240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	b29a      	uxth	r2, r3
 8002412:	7e7b      	ldrb	r3, [r7, #25]
 8002414:	b29b      	uxth	r3, r3
 8002416:	4413      	add	r3, r2
 8002418:	b29a      	uxth	r2, r3
 800241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241c:	801a      	strh	r2, [r3, #0]
   			sock_remained_size[sn] = head[6];
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	7eba      	ldrb	r2, [r7, #26]
 8002422:	b291      	uxth	r1, r2
 8002424:	4a66      	ldr	r2, [pc, #408]	; (80025c0 <recvfrom+0x2f0>)
 8002426:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	7bfa      	ldrb	r2, [r7, #15]
 800242e:	4964      	ldr	r1, [pc, #400]	; (80025c0 <recvfrom+0x2f0>)
 8002430:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002434:	0212      	lsls	r2, r2, #8
 8002436:	b291      	uxth	r1, r2
 8002438:	7efa      	ldrb	r2, [r7, #27]
 800243a:	b292      	uxth	r2, r2
 800243c:	440a      	add	r2, r1
 800243e:	b291      	uxth	r1, r2
 8002440:	4a5f      	ldr	r2, [pc, #380]	; (80025c0 <recvfrom+0x2f0>)
 8002442:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8002446:	7bfb      	ldrb	r3, [r7, #15]
 8002448:	4a5f      	ldr	r2, [pc, #380]	; (80025c8 <recvfrom+0x2f8>)
 800244a:	2180      	movs	r1, #128	; 0x80
 800244c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	4a5b      	ldr	r2, [pc, #364]	; (80025c0 <recvfrom+0x2f0>)
 8002452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002456:	89ba      	ldrh	r2, [r7, #12]
 8002458:	429a      	cmp	r2, r3
 800245a:	d202      	bcs.n	8002462 <recvfrom+0x192>
 800245c:	89bb      	ldrh	r3, [r7, #12]
 800245e:	83fb      	strh	r3, [r7, #30]
 8002460:	e004      	b.n	800246c <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	4a56      	ldr	r2, [pc, #344]	; (80025c0 <recvfrom+0x2f0>)
 8002466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800246a:	83fb      	strh	r3, [r7, #30]
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800246c:	8bfa      	ldrh	r2, [r7, #30]
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	4618      	mov	r0, r3
 8002474:	f001 f8b6 	bl	80035e4 <wiz_recv_data>
			break;
 8002478:	e06c      	b.n	8002554 <recvfrom+0x284>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	4a50      	ldr	r2, [pc, #320]	; (80025c0 <recvfrom+0x2f0>)
 800247e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d144      	bne.n	8002510 <recvfrom+0x240>
	      {
   			wiz_recv_data(sn, head, 2);
 8002486:	f107 0114 	add.w	r1, r7, #20
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	2202      	movs	r2, #2
 800248e:	4618      	mov	r0, r3
 8002490:	f001 f8a8 	bl	80035e4 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	3301      	adds	r3, #1
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80024a0:	2140      	movs	r1, #64	; 0x40
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fee8 	bl	8003278 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80024a8:	bf00      	nop
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	3301      	adds	r3, #1
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 feae 	bl	8003218 <WIZCHIP_READ>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f3      	bne.n	80024aa <recvfrom+0x1da>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	7d3a      	ldrb	r2, [r7, #20]
 80024c6:	b291      	uxth	r1, r2
 80024c8:	4a3d      	ldr	r2, [pc, #244]	; (80025c0 <recvfrom+0x2f0>)
 80024ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1];
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	7bfa      	ldrb	r2, [r7, #15]
 80024d2:	493b      	ldr	r1, [pc, #236]	; (80025c0 <recvfrom+0x2f0>)
 80024d4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80024d8:	0212      	lsls	r2, r2, #8
 80024da:	b291      	uxth	r1, r2
 80024dc:	7d7a      	ldrb	r2, [r7, #21]
 80024de:	b292      	uxth	r2, r2
 80024e0:	440a      	add	r2, r1
 80024e2:	b291      	uxth	r1, r2
 80024e4:	4a36      	ldr	r2, [pc, #216]	; (80025c0 <recvfrom+0x2f0>)
 80024e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] > 1514) 
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	4a34      	ldr	r2, [pc, #208]	; (80025c0 <recvfrom+0x2f0>)
 80024ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024f2:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d906      	bls.n	8002508 <recvfrom+0x238>
   			{
   			   close(sn);
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fb21 	bl	8001b44 <close>
   			   return SOCKFATAL_PACKLEN;
 8002502:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8002506:	e057      	b.n	80025b8 <recvfrom+0x2e8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	4a2f      	ldr	r2, [pc, #188]	; (80025c8 <recvfrom+0x2f8>)
 800250c:	2180      	movs	r1, #128	; 0x80
 800250e:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	4a2b      	ldr	r2, [pc, #172]	; (80025c0 <recvfrom+0x2f0>)
 8002514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002518:	89ba      	ldrh	r2, [r7, #12]
 800251a:	429a      	cmp	r2, r3
 800251c:	d202      	bcs.n	8002524 <recvfrom+0x254>
 800251e:	89bb      	ldrh	r3, [r7, #12]
 8002520:	83fb      	strh	r3, [r7, #30]
 8002522:	e004      	b.n	800252e <recvfrom+0x25e>
			else pack_len = sock_remained_size[sn];
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	4a26      	ldr	r2, [pc, #152]	; (80025c0 <recvfrom+0x2f0>)
 8002528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800252c:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 800252e:	8bfa      	ldrh	r2, [r7, #30]
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	68b9      	ldr	r1, [r7, #8]
 8002534:	4618      	mov	r0, r3
 8002536:	f001 f855 	bl	80035e4 <wiz_recv_data>
		   break;
 800253a:	e00b      	b.n	8002554 <recvfrom+0x284>
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
			break;
   #endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 800253c:	8bfa      	ldrh	r2, [r7, #30]
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f001 f8aa 	bl	800369c <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	491d      	ldr	r1, [pc, #116]	; (80025c0 <recvfrom+0x2f0>)
 800254c:	8bfa      	ldrh	r2, [r7, #30]
 800254e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8002552:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	3301      	adds	r3, #1
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002560:	2140      	movs	r1, #64	; 0x40
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fe88 	bl	8003278 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8002568:	bf00      	nop
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	3301      	adds	r3, #1
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002576:	4618      	mov	r0, r3
 8002578:	f000 fe4e 	bl	8003218 <WIZCHIP_READ>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f3      	bne.n	800256a <recvfrom+0x29a>
	sock_remained_size[sn] -= pack_len;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	490e      	ldr	r1, [pc, #56]	; (80025c0 <recvfrom+0x2f0>)
 8002588:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800258c:	8bfa      	ldrh	r2, [r7, #30]
 800258e:	1a8a      	subs	r2, r1, r2
 8002590:	b291      	uxth	r1, r2
 8002592:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <recvfrom+0x2f0>)
 8002594:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <recvfrom+0x2f0>)
 800259c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <recvfrom+0x2e6>
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	7bfa      	ldrb	r2, [r7, #15]
 80025a8:	4907      	ldr	r1, [pc, #28]	; (80025c8 <recvfrom+0x2f8>)
 80025aa:	5c8a      	ldrb	r2, [r1, r2]
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	b2d1      	uxtb	r1, r2
 80025b2:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <recvfrom+0x2f8>)
 80025b4:	54d1      	strb	r1, [r2, r3]
 	return pack_len;
 80025b6:	8bfb      	ldrh	r3, [r7, #30]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3720      	adds	r7, #32
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	200000fc 	strdcs	r0, [r0], -ip
 80025c4:	200000f8 	strdcs	r0, [r0], -r8
 80025c8:	2000010c 	andcs	r0, r0, ip, lsl #2

080025cc <ctlsocket>:


int8_t  ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	603a      	str	r2, [r7, #0]
 80025d6:	71fb      	strb	r3, [r7, #7]
 80025d8:	460b      	mov	r3, r1
 80025da:	71bb      	strb	r3, [r7, #6]
   uint8_t tmp = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	73fb      	strb	r3, [r7, #15]
   CHECK_SOCKNUM();
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d902      	bls.n	80025ec <ctlsocket+0x20>
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ea:	e0c1      	b.n	8002770 <ctlsocket+0x1a4>
   switch(cstype)
 80025ec:	79bb      	ldrb	r3, [r7, #6]
 80025ee:	2b07      	cmp	r3, #7
 80025f0:	f200 80ba 	bhi.w	8002768 <ctlsocket+0x19c>
 80025f4:	a201      	add	r2, pc, #4	; (adr r2, 80025fc <ctlsocket+0x30>)
 80025f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fa:	bf00      	nop
 80025fc:	0800261d 	stmdaeq	r0, {r0, r2, r3, r4, r9, sl, sp}
 8002600:	08002671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, sp}
 8002604:	0800268b 	stmdaeq	r0, {r0, r1, r3, r7, r9, sl, sp}
 8002608:	080026ab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r9, sl, sp}
 800260c:	080026cb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r9, sl, sp}
 8002610:	080026fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sl, sp}
 8002614:	0800271b 	stmdaeq	r0, {r0, r1, r3, r4, r8, r9, sl, sp}
 8002618:	0800274b 	stmdaeq	r0, {r0, r1, r3, r6, r8, r9, sl, sp}
   {
      case CS_SET_IOMODE:
         tmp = *((uint8_t*)arg);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	73fb      	strb	r3, [r7, #15]
         if(tmp == SOCK_IO_NONBLOCK)  sock_io_mode |= (1<<sn);
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d10d      	bne.n	8002644 <ctlsocket+0x78>
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	2201      	movs	r2, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	b21a      	sxth	r2, r3
 8002632:	4b51      	ldr	r3, [pc, #324]	; (8002778 <ctlsocket+0x1ac>)
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	b21b      	sxth	r3, r3
 8002638:	4313      	orrs	r3, r2
 800263a:	b21b      	sxth	r3, r3
 800263c:	b29a      	uxth	r2, r3
 800263e:	4b4e      	ldr	r3, [pc, #312]	; (8002778 <ctlsocket+0x1ac>)
 8002640:	801a      	strh	r2, [r3, #0]
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
         else return SOCKERR_ARG;
         break;
 8002642:	e094      	b.n	800276e <ctlsocket+0x1a2>
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10f      	bne.n	800266a <ctlsocket+0x9e>
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	2201      	movs	r2, #1
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	b21b      	sxth	r3, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	b21a      	sxth	r2, r3
 8002658:	4b47      	ldr	r3, [pc, #284]	; (8002778 <ctlsocket+0x1ac>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	b21b      	sxth	r3, r3
 800265e:	4013      	ands	r3, r2
 8002660:	b21b      	sxth	r3, r3
 8002662:	b29a      	uxth	r2, r3
 8002664:	4b44      	ldr	r3, [pc, #272]	; (8002778 <ctlsocket+0x1ac>)
 8002666:	801a      	strh	r2, [r3, #0]
         break;
 8002668:	e081      	b.n	800276e <ctlsocket+0x1a2>
         else return SOCKERR_ARG;
 800266a:	f06f 0309 	mvn.w	r3, #9
 800266e:	e07f      	b.n	8002770 <ctlsocket+0x1a4>
      case CS_GET_IOMODE:   
         *((uint8_t*)arg) = (sock_io_mode >> sn) & 0x0001;
 8002670:	4b41      	ldr	r3, [pc, #260]	; (8002778 <ctlsocket+0x1ac>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	fa42 f303 	asr.w	r3, r2, r3
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	b2da      	uxtb	r2, r3
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	701a      	strb	r2, [r3, #0]
         break;
 8002688:	e071      	b.n	800276e <ctlsocket+0x1a2>
      case CS_GET_MAXTXBUF:
         *((uint16_t*)arg) = getSn_TxMAX(sn);
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	3301      	adds	r3, #1
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fdbe 	bl	8003218 <WIZCHIP_READ>
 800269c:	4603      	mov	r3, r0
 800269e:	b29b      	uxth	r3, r3
 80026a0:	029b      	lsls	r3, r3, #10
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	801a      	strh	r2, [r3, #0]
         break;
 80026a8:	e061      	b.n	800276e <ctlsocket+0x1a2>
      case CS_GET_MAXRXBUF:    
         *((uint16_t*)arg) = getSn_RxMAX(sn);
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	3301      	adds	r3, #1
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 fdae 	bl	8003218 <WIZCHIP_READ>
 80026bc:	4603      	mov	r3, r0
 80026be:	b29b      	uxth	r3, r3
 80026c0:	029b      	lsls	r3, r3, #10
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	801a      	strh	r2, [r3, #0]
         break;
 80026c8:	e051      	b.n	800276e <ctlsocket+0x1a2>
      case CS_CLR_INTERRUPT:
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b1f      	cmp	r3, #31
 80026d0:	d902      	bls.n	80026d8 <ctlsocket+0x10c>
 80026d2:	f06f 0309 	mvn.w	r3, #9
 80026d6:	e04b      	b.n	8002770 <ctlsocket+0x1a4>
         setSn_IR(sn,*(uint8_t*)arg);
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	3301      	adds	r3, #1
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80026e4:	461a      	mov	r2, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	4619      	mov	r1, r3
 80026f2:	4610      	mov	r0, r2
 80026f4:	f000 fdc0 	bl	8003278 <WIZCHIP_WRITE>
         break;
 80026f8:	e039      	b.n	800276e <ctlsocket+0x1a2>
      case CS_GET_INTERRUPT:
         *((uint8_t*)arg) = getSn_IR(sn);
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	3301      	adds	r3, #1
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fd86 	bl	8003218 <WIZCHIP_READ>
 800270c:	4603      	mov	r3, r0
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	b2da      	uxtb	r2, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	701a      	strb	r2, [r3, #0]
         break;
 8002718:	e029      	b.n	800276e <ctlsocket+0x1a2>
      case CS_SET_INTMASK:  
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b1f      	cmp	r3, #31
 8002720:	d902      	bls.n	8002728 <ctlsocket+0x15c>
 8002722:	f06f 0309 	mvn.w	r3, #9
 8002726:	e023      	b.n	8002770 <ctlsocket+0x1a4>
         setSn_IMR(sn,*(uint8_t*)arg);
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	3301      	adds	r3, #1
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 8002734:	461a      	mov	r2, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	b2db      	uxtb	r3, r3
 8002740:	4619      	mov	r1, r3
 8002742:	4610      	mov	r0, r2
 8002744:	f000 fd98 	bl	8003278 <WIZCHIP_WRITE>
         break;
 8002748:	e011      	b.n	800276e <ctlsocket+0x1a2>
      case CS_GET_INTMASK:   
         *((uint8_t*)arg) = getSn_IMR(sn);
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	3301      	adds	r3, #1
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fd5e 	bl	8003218 <WIZCHIP_READ>
 800275c:	4603      	mov	r3, r0
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	b2da      	uxtb	r2, r3
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	701a      	strb	r2, [r3, #0]
      default:
         return SOCKERR_ARG;
 8002768:	f06f 0309 	mvn.w	r3, #9
 800276c:	e000      	b.n	8002770 <ctlsocket+0x1a4>
   }
   return SOCK_OK;
 800276e:	2301      	movs	r3, #1
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	200000f8 	strdcs	r0, [r0], -r8

0800277c <wizchip_cris_enter>:
/**
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	  wizchip_cris_enter(void)           {};
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <wizchip_cris_exit>:
/**
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	  wizchip_cris_exit(void)          {};
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <wizchip_cs_select>:
/**
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_cs_select(void)            {};
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <wizchip_cs_deselect>:
/**
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_cs_deselect(void)          {};
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <wizchip_bus_readbyte>:
/**
 * @brief Default function to read in direct or indirect interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *) AddrSel); };
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <wizchip_bus_writebyte>:
 * @brief Default function to write in direct or indirect interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 
void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)AddrSel) = wb; };
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	70fb      	strb	r3, [r7, #3]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	78fa      	ldrb	r2, [r7, #3]
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <wizchip_spi_readbyte>:
/**
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
uint8_t wizchip_spi_readbyte(void)        {return 0;};
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	2300      	movs	r3, #0
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop

080027f0 <wizchip_spi_writebyte>:
/**
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_spi_writebyte(uint8_t wb) {};
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <reg_wizchip_cris_cbfunc+0x16>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d106      	bne.n	8002828 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <reg_wizchip_cris_cbfunc+0x3c>)
 800281c:	4a09      	ldr	r2, [pc, #36]	; (8002844 <reg_wizchip_cris_cbfunc+0x40>)
 800281e:	609a      	str	r2, [r3, #8]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <reg_wizchip_cris_cbfunc+0x3c>)
 8002822:	4a09      	ldr	r2, [pc, #36]	; (8002848 <reg_wizchip_cris_cbfunc+0x44>)
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	e005      	b.n	8002834 <reg_wizchip_cris_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8002828:	4a05      	ldr	r2, [pc, #20]	; (8002840 <reg_wizchip_cris_cbfunc+0x3c>)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6093      	str	r3, [r2, #8]
      WIZCHIP.CRIS._exit  = cris_ex;
 800282e:	4a04      	ldr	r2, [pc, #16]	; (8002840 <reg_wizchip_cris_cbfunc+0x3c>)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	60d3      	str	r3, [r2, #12]
   }
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000084 	andcs	r0, r0, r4, lsl #1
 8002844:	0800277d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, sl, sp}
 8002848:	08002789 	stmdaeq	r0, {r0, r3, r7, r8, r9, sl, sp}

0800284c <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <reg_wizchip_cs_cbfunc+0x16>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <reg_wizchip_cs_cbfunc+0x3c>)
 8002864:	4a09      	ldr	r2, [pc, #36]	; (800288c <reg_wizchip_cs_cbfunc+0x40>)
 8002866:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <reg_wizchip_cs_cbfunc+0x3c>)
 800286a:	4a09      	ldr	r2, [pc, #36]	; (8002890 <reg_wizchip_cs_cbfunc+0x44>)
 800286c:	615a      	str	r2, [r3, #20]
 800286e:	e005      	b.n	800287c <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002870:	4a05      	ldr	r2, [pc, #20]	; (8002888 <reg_wizchip_cs_cbfunc+0x3c>)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 8002876:	4a04      	ldr	r2, [pc, #16]	; (8002888 <reg_wizchip_cs_cbfunc+0x3c>)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	6153      	str	r3, [r2, #20]
   }
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000084 	andcs	r0, r0, r4, lsl #1
 800288c:	08002795 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, sl, sp}
 8002890:	080027a1 	stmdaeq	r0, {r0, r5, r7, r8, r9, sl, sp}

08002894 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800289e:	bf00      	nop
 80028a0:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <reg_wizchip_spi_cbfunc+0x48>)
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f9      	beq.n	80028a0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <reg_wizchip_spi_cbfunc+0x24>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d106      	bne.n	80028c6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80028b8:	4b08      	ldr	r3, [pc, #32]	; (80028dc <reg_wizchip_spi_cbfunc+0x48>)
 80028ba:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <reg_wizchip_spi_cbfunc+0x4c>)
 80028bc:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <reg_wizchip_spi_cbfunc+0x48>)
 80028c0:	4a08      	ldr	r2, [pc, #32]	; (80028e4 <reg_wizchip_spi_cbfunc+0x50>)
 80028c2:	61da      	str	r2, [r3, #28]
 80028c4:	e005      	b.n	80028d2 <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80028c6:	4a05      	ldr	r2, [pc, #20]	; (80028dc <reg_wizchip_spi_cbfunc+0x48>)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80028cc:	4a03      	ldr	r2, [pc, #12]	; (80028dc <reg_wizchip_spi_cbfunc+0x48>)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	61d3      	str	r3, [r2, #28]
   }
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	20000084 	andcs	r0, r0, r4, lsl #1
 80028e0:	080027e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, sl, sp}
 80028e4:	080027f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, sl, sp}

080028e8 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	6039      	str	r1, [r7, #0]
 80028f2:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	75fb      	strb	r3, [r7, #23]
   uint8_t* ptmp[2] = {0,0};
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	2300      	movs	r3, #0
 80028fe:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	2b0f      	cmp	r3, #15
 8002904:	f200 80c2 	bhi.w	8002a8c <ctlwizchip+0x1a4>
 8002908:	a201      	add	r2, pc, #4	; (adr r2, 8002910 <ctlwizchip+0x28>)
 800290a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290e:	bf00      	nop
 8002910:	08002951 	stmdaeq	r0, {r0, r4, r6, r8, fp, sp}
 8002914:	08002957 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, fp, sp}
 8002918:	08002983 	stmdaeq	r0, {r0, r1, r7, r8, fp, sp}
 800291c:	08002977 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r8, fp, sp}
 8002920:	08002991 	stmdaeq	r0, {r0, r4, r7, r8, fp, sp}
 8002924:	0800299d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, fp, sp}
 8002928:	080029ab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r8, fp, sp}
 800292c:	080029d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, fp, sp}
 8002930:	080029f7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, fp, sp}
 8002934:	08002a31 	stmdaeq	r0, {r0, r4, r5, r9, fp, sp}
 8002938:	08002a37 	stmdaeq	r0, {r0, r1, r2, r4, r5, r9, fp, sp}
 800293c:	08002a3f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r9, fp, sp}
 8002940:	08002a93 	stmdaeq	r0, {r0, r1, r4, r7, r9, fp, sp}
 8002944:	08002a47 	stmdaeq	r0, {r0, r1, r2, r6, r9, fp, sp}
 8002948:	08002a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp, sp}
 800294c:	08002a71 	stmdaeq	r0, {r0, r4, r5, r6, r9, fp, sp}
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8002950:	f000 f8e6 	bl	8002b20 <wizchip_sw_reset>
         break;
 8002954:	e09e      	b.n	8002a94 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	3308      	adds	r3, #8
 8002964:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f000 f923 	bl	8002bb8 <wizchip_init>
 8002972:	4603      	mov	r3, r0
 8002974:	e08f      	b.n	8002a96 <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f000 f9a8 	bl	8002cd0 <wizchip_clrinterrupt>
         break;
 8002980:	e088      	b.n	8002a94 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8002982:	f000 f9c3 	bl	8002d0c <wizchip_getinterrupt>
 8002986:	4603      	mov	r3, r0
 8002988:	461a      	mov	r2, r3
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	801a      	strh	r2, [r3, #0]
         break;
 800298e:	e081      	b.n	8002a94 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f000 f9df 	bl	8002d58 <wizchip_setinterruptmask>
         break;         
 800299a:	e07b      	b.n	8002a94 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 800299c:	f000 f9f8 	bl	8002d90 <wizchip_getinterruptmask>
 80029a0:	4603      	mov	r3, r0
 80029a2:	461a      	mov	r2, r3
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	801a      	strh	r2, [r3, #0]
         break;
 80029a8:	e074      	b.n	8002a94 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ > 5100
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	4619      	mov	r1, r3
 80029b6:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80029ba:	f000 fc5d 	bl	8003278 <WIZCHIP_WRITE>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	4619      	mov	r1, r3
 80029c6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80029ca:	f000 fc55 	bl	8003278 <WIZCHIP_WRITE>
         break;
 80029ce:	e061      	b.n	8002a94 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80029d0:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80029d4:	f000 fc20 	bl	8003218 <WIZCHIP_READ>
 80029d8:	4603      	mov	r3, r0
 80029da:	b29b      	uxth	r3, r3
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	b29c      	uxth	r4, r3
 80029e0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80029e4:	f000 fc18 	bl	8003218 <WIZCHIP_READ>
 80029e8:	4603      	mov	r3, r0
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	4423      	add	r3, r4
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	801a      	strh	r2, [r3, #0]
         break;
 80029f4:	e04e      	b.n	8002a94 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80029f6:	4b2a      	ldr	r3, [pc, #168]	; (8002aa0 <ctlwizchip+0x1b8>)
 80029f8:	789a      	ldrb	r2, [r3, #2]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	3301      	adds	r3, #1
 8002a02:	4a27      	ldr	r2, [pc, #156]	; (8002aa0 <ctlwizchip+0x1b8>)
 8002a04:	78d2      	ldrb	r2, [r2, #3]
 8002a06:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	3302      	adds	r3, #2
 8002a0c:	4a24      	ldr	r2, [pc, #144]	; (8002aa0 <ctlwizchip+0x1b8>)
 8002a0e:	7912      	ldrb	r2, [r2, #4]
 8002a10:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	3303      	adds	r3, #3
 8002a16:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <ctlwizchip+0x1b8>)
 8002a18:	7952      	ldrb	r2, [r2, #5]
 8002a1a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <ctlwizchip+0x1b8>)
 8002a22:	7992      	ldrb	r2, [r2, #6]
 8002a24:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	3305      	adds	r3, #5
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
         break;
 8002a2e:	e031      	b.n	8002a94 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ ==  5500
      case CW_RESET_PHY:
         wizphy_reset();
 8002a30:	f000 fa04 	bl	8002e3c <wizphy_reset>
         break;
 8002a34:	e02e      	b.n	8002a94 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8002a36:	6838      	ldr	r0, [r7, #0]
 8002a38:	f000 fa28 	bl	8002e8c <wizphy_setphyconf>
         break;
 8002a3c:	e02a      	b.n	8002a94 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8002a3e:	6838      	ldr	r0, [r7, #0]
 8002a40:	f000 fa66 	bl	8002f10 <wizphy_getphyconf>
         break;
 8002a44:	e026      	b.n	8002a94 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 faac 	bl	8002fa8 <wizphy_setphypmode>
 8002a50:	4603      	mov	r3, r0
 8002a52:	e020      	b.n	8002a96 <ctlwizchip+0x1ae>
   #endif
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8002a54:	f000 f9d8 	bl	8002e08 <wizphy_getphypmode>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002a5c:	7dfb      	ldrb	r3, [r7, #23]
 8002a5e:	2bff      	cmp	r3, #255	; 0xff
 8002a60:	d102      	bne.n	8002a68 <ctlwizchip+0x180>
 8002a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a66:	e016      	b.n	8002a96 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	7dfa      	ldrb	r2, [r7, #23]
 8002a6c:	701a      	strb	r2, [r3, #0]
         break;
 8002a6e:	e011      	b.n	8002a94 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8002a70:	f000 f9b2 	bl	8002dd8 <wizphy_getphylink>
 8002a74:	4603      	mov	r3, r0
 8002a76:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002a78:	7dfb      	ldrb	r3, [r7, #23]
 8002a7a:	2bff      	cmp	r3, #255	; 0xff
 8002a7c:	d102      	bne.n	8002a84 <ctlwizchip+0x19c>
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a82:	e008      	b.n	8002a96 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	7dfa      	ldrb	r2, [r7, #23]
 8002a88:	701a      	strb	r2, [r3, #0]
         break;
 8002a8a:	e003      	b.n	8002a94 <ctlwizchip+0x1ac>
      default:
         return -1;
 8002a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a90:	e001      	b.n	8002a96 <ctlwizchip+0x1ae>
         break;
 8002a92:	bf00      	nop
   }
   return 0;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd90      	pop	{r4, r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000084 	andcs	r0, r0, r4, lsl #1

08002aa4 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	6039      	str	r1, [r7, #0]
 8002aae:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	d82c      	bhi.n	8002b10 <ctlnetwork+0x6c>
 8002ab6:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <ctlnetwork+0x18>)
 8002ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abc:	08002ad5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r9, fp, sp}
 8002ac0:	08002add 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, fp, sp}
 8002ac4:	08002ae5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, fp, sp}
 8002ac8:	08002af3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r9, fp, sp}
 8002acc:	08002b01 	stmdaeq	r0, {r0, r8, r9, fp, sp}
 8002ad0:	08002b09 	stmdaeq	r0, {r0, r3, r8, r9, fp, sp}
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8002ad4:	6838      	ldr	r0, [r7, #0]
 8002ad6:	f000 fab1 	bl	800303c <wizchip_setnetinfo>
         break;
 8002ada:	e01c      	b.n	8002b16 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8002adc:	6838      	ldr	r0, [r7, #0]
 8002ade:	f000 faed 	bl	80030bc <wizchip_getnetinfo>
         break;
 8002ae2:	e018      	b.n	8002b16 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fb27 	bl	800313c <wizchip_setnetmode>
 8002aee:	4603      	mov	r3, r0
 8002af0:	e012      	b.n	8002b18 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8002af2:	f000 fb45 	bl	8003180 <wizchip_getnetmode>
 8002af6:	4603      	mov	r3, r0
 8002af8:	461a      	mov	r2, r3
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	701a      	strb	r2, [r3, #0]
         break;
 8002afe:	e00a      	b.n	8002b16 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8002b00:	6838      	ldr	r0, [r7, #0]
 8002b02:	f000 fb45 	bl	8003190 <wizchip_settimeout>
         break;
 8002b06:	e006      	b.n	8002b16 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8002b08:	6838      	ldr	r0, [r7, #0]
 8002b0a:	f000 fb63 	bl	80031d4 <wizchip_gettimeout>
         break;
 8002b0e:	e002      	b.n	8002b16 <ctlnetwork+0x72>
      default:
         return -1;
 8002b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b14:	e000      	b.n	8002b18 <ctlnetwork+0x74>
   }
   return 0;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
   uint8_t gw[4], sn[4], sip[4];
   uint8_t mac[6];
   getSHAR(mac);
 8002b26:	1d3b      	adds	r3, r7, #4
 8002b28:	2206      	movs	r2, #6
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002b30:	f000 fbd8 	bl	80032e4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8002b34:	f107 0314 	add.w	r3, r7, #20
 8002b38:	2204      	movs	r2, #4
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b40:	f000 fbd0 	bl	80032e4 <WIZCHIP_READ_BUF>
 8002b44:	f107 0310 	add.w	r3, r7, #16
 8002b48:	2204      	movs	r2, #4
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002b50:	f000 fbc8 	bl	80032e4 <WIZCHIP_READ_BUF>
 8002b54:	f107 030c 	add.w	r3, r7, #12
 8002b58:	2204      	movs	r2, #4
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002b60:	f000 fbc0 	bl	80032e4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8002b64:	2180      	movs	r1, #128	; 0x80
 8002b66:	2000      	movs	r0, #0
 8002b68:	f000 fb86 	bl	8003278 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f000 fb53 	bl	8003218 <WIZCHIP_READ>
   setSHAR(mac);
 8002b72:	1d3b      	adds	r3, r7, #4
 8002b74:	2206      	movs	r2, #6
 8002b76:	4619      	mov	r1, r3
 8002b78:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002b7c:	f000 fbf6 	bl	800336c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	2204      	movs	r2, #4
 8002b86:	4619      	mov	r1, r3
 8002b88:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b8c:	f000 fbee 	bl	800336c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8002b90:	f107 0310 	add.w	r3, r7, #16
 8002b94:	2204      	movs	r2, #4
 8002b96:	4619      	mov	r1, r3
 8002b98:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002b9c:	f000 fbe6 	bl	800336c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002bac:	f000 fbde 	bl	800336c <WIZCHIP_WRITE_BUF>
}
 8002bb0:	bf00      	nop
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8002bc6:	f7ff ffab 	bl	8002b20 <wizchip_sw_reset>
   if(txsize)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d03b      	beq.n	8002c48 <wizchip_init+0x90>
   {
      tmp = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	73fb      	strb	r3, [r7, #15]
 8002bd8:	e00e      	b.n	8002bf8 <wizchip_init+0x40>
         tmp += txsize[i];
 8002bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	781a      	ldrb	r2, [r3, #0]
 8002be4:	7bbb      	ldrb	r3, [r7, #14]
 8002be6:	4413      	add	r3, r2
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	73fb      	strb	r3, [r7, #15]
 8002bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfc:	2b07      	cmp	r3, #7
 8002bfe:	ddec      	ble.n	8002bda <wizchip_init+0x22>
      if(tmp > 16) return -1;
 8002c00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c04:	2b10      	cmp	r3, #16
 8002c06:	dd02      	ble.n	8002c0e <wizchip_init+0x56>
 8002c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c0c:	e05c      	b.n	8002cc8 <wizchip_init+0x110>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73fb      	strb	r3, [r7, #15]
 8002c12:	e015      	b.n	8002c40 <wizchip_init+0x88>
         setSn_TXBUF_SIZE(i, txsize[i]);
 8002c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002c22:	4618      	mov	r0, r3
 8002c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f000 fb22 	bl	8003278 <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c44:	2b07      	cmp	r3, #7
 8002c46:	dde5      	ble.n	8002c14 <wizchip_init+0x5c>
   }
   if(rxsize)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d03b      	beq.n	8002cc6 <wizchip_init+0x10e>
   {
      tmp = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c52:	2300      	movs	r3, #0
 8002c54:	73fb      	strb	r3, [r7, #15]
 8002c56:	e00e      	b.n	8002c76 <wizchip_init+0xbe>
         tmp += rxsize[i];
 8002c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	4413      	add	r3, r2
 8002c60:	781a      	ldrb	r2, [r3, #0]
 8002c62:	7bbb      	ldrb	r3, [r7, #14]
 8002c64:	4413      	add	r3, r2
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	3301      	adds	r3, #1
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	73fb      	strb	r3, [r7, #15]
 8002c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7a:	2b07      	cmp	r3, #7
 8002c7c:	ddec      	ble.n	8002c58 <wizchip_init+0xa0>
      if(tmp > 16) return -1;
 8002c7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c82:	2b10      	cmp	r3, #16
 8002c84:	dd02      	ble.n	8002c8c <wizchip_init+0xd4>
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c8a:	e01d      	b.n	8002cc8 <wizchip_init+0x110>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	73fb      	strb	r3, [r7, #15]
 8002c90:	e015      	b.n	8002cbe <wizchip_init+0x106>
         setSn_RXBUF_SIZE(i, rxsize[i]);
 8002c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	3301      	adds	r3, #1
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	4413      	add	r3, r2
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	f000 fae3 	bl	8003278 <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	3301      	adds	r3, #1
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	73fb      	strb	r3, [r7, #15]
 8002cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc2:	2b07      	cmp	r3, #7
 8002cc4:	dde5      	ble.n	8002c92 <wizchip_init+0xda>
   }
   return 0;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	0a1b      	lsrs	r3, r3, #8
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ == 5100
   ir |= sir;
   setIR(ir);
#else
   setIR(ir);
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	f023 030f 	bic.w	r3, r3, #15
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	4619      	mov	r1, r3
 8002cf0:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002cf4:	f000 fac0 	bl	8003278 <WIZCHIP_WRITE>
   setSIR(sir);
 8002cf8:	7bbb      	ldrb	r3, [r7, #14]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002d00:	f000 faba 	bl	8003278 <WIZCHIP_WRITE>
#endif   
}
 8002d04:	bf00      	nop
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ == 5100
   ir = getIR();
   sir = ir 0x0F;
#else
   ir  = getIR();
 8002d1e:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002d22:	f000 fa79 	bl	8003218 <WIZCHIP_READ>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f023 030f 	bic.w	r3, r3, #15
 8002d2c:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8002d2e:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002d32:	f000 fa71 	bl	8003218 <WIZCHIP_READ>
 8002d36:	4603      	mov	r3, r0
 8002d38:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == 5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8002d3a:	79bb      	ldrb	r3, [r7, #6]
 8002d3c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8002d3e:	88bb      	ldrh	r3, [r7, #4]
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002d4c:	88bb      	ldrh	r3, [r7, #4]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop

08002d58 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ == 5100
   imr |= simr;
   setIMR(imr);
#else
   setIMR(imr);
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	4619      	mov	r1, r3
 8002d72:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002d76:	f000 fa7f 	bl	8003278 <WIZCHIP_WRITE>
   setSIMR(simr);
 8002d7a:	7bbb      	ldrb	r3, [r7, #14]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002d82:	f000 fa79 	bl	8003278 <WIZCHIP_WRITE>
#endif   
}
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop

08002d90 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ == 5100
   imr  = getIMR();
   simr = imr 0x0F;
#else
   imr  = getIMR();
 8002da2:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002da6:	f000 fa37 	bl	8003218 <WIZCHIP_READ>
 8002daa:	4603      	mov	r3, r0
 8002dac:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8002dae:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002db2:	f000 fa31 	bl	8003218 <WIZCHIP_READ>
 8002db6:	4603      	mov	r3, r0
 8002db8:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == 5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8002dba:	79bb      	ldrb	r3, [r7, #6]
 8002dbc:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8002dbe:	88bb      	ldrh	r3, [r7, #4]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002dcc:	88bb      	ldrh	r3, [r7, #4]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop

08002dd8 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
   else
      tmp = PHY_LINK_OFF;
#elif _WIZCHIP_ == 5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8002dde:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002de2:	f000 fa19 	bl	8003218 <WIZCHIP_READ>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <wizphy_getphylink+0x1e>
      tmp = PHY_LINK_ON;
 8002df0:	2301      	movs	r3, #1
 8002df2:	71fb      	strb	r3, [r7, #7]
 8002df4:	e001      	b.n	8002dfa <wizphy_getphylink+0x22>
   else
      tmp = PHY_LINK_OFF;
 8002df6:	2300      	movs	r3, #0
 8002df8:	71fb      	strb	r3, [r7, #7]
#else
   tmp = -1;
#endif
   return tmp;
 8002dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop

08002e08 <wizphy_getphypmode>:

#if _WIZCHIP_ > 5100

int8_t wizphy_getphypmode(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if(getPHYCFGR() & PHYCFGR_OPMDC_PDOWN)
 8002e12:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e16:	f000 f9ff 	bl	8003218 <WIZCHIP_READ>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8002e24:	2301      	movs	r3, #1
 8002e26:	71fb      	strb	r3, [r7, #7]
 8002e28:	e001      	b.n	8002e2e <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop

08002e3c <wizphy_reset>:
#endif

#if _WIZCHIP_ == 5500
void wizphy_reset(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8002e42:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e46:	f000 f9e7 	bl	8003218 <WIZCHIP_READ>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e54:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e5e:	f000 fa0b 	bl	8003278 <WIZCHIP_WRITE>
   tmp = getPHYCFGR(); 
 8002e62:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e66:	f000 f9d7 	bl	8003218 <WIZCHIP_READ>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e74:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e7e:	f000 f9fb 	bl	8003278 <WIZCHIP_WRITE>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop

08002e8c <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d104      	bne.n	8002eaa <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ea6:	73fb      	strb	r3, [r7, #15]
 8002ea8:	e003      	b.n	8002eb2 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eb0:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	785b      	ldrb	r3, [r3, #1]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d104      	bne.n	8002ec4 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002ec0:	73fb      	strb	r3, [r7, #15]
 8002ec2:	e019      	b.n	8002ef8 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	78db      	ldrb	r3, [r3, #3]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d10d      	bne.n	8002ee8 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	789b      	ldrb	r3, [r3, #2]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d104      	bne.n	8002ede <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
 8002ed6:	f043 0318 	orr.w	r3, r3, #24
 8002eda:	73fb      	strb	r3, [r7, #15]
 8002edc:	e00c      	b.n	8002ef8 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	f043 0308 	orr.w	r3, r3, #8
 8002ee4:	73fb      	strb	r3, [r7, #15]
 8002ee6:	e007      	b.n	8002ef8 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	789b      	ldrb	r3, [r3, #2]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d103      	bne.n	8002ef8 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	f043 0310 	orr.w	r3, r3, #16
 8002ef6:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	4619      	mov	r1, r3
 8002efc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002f00:	f000 f9ba 	bl	8003278 <WIZCHIP_WRITE>
   wizphy_reset();
 8002f04:	f7ff ff9a 	bl	8002e3c <wizphy_reset>
}
 8002f08:	bf00      	nop
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002f1c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002f20:	f000 f97a 	bl	8003218 <WIZCHIP_READ>
 8002f24:	4603      	mov	r3, r0
 8002f26:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	bf14      	ite	ne
 8002f32:	2301      	movne	r3, #1
 8002f34:	2300      	moveq	r3, #0
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	d001      	beq.n	8002f4c <wizphy_getphyconf+0x3c>
 8002f48:	2b38      	cmp	r3, #56	; 0x38
 8002f4a:	d103      	bne.n	8002f54 <wizphy_getphyconf+0x44>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	705a      	strb	r2, [r3, #1]
         break;
 8002f52:	e003      	b.n	8002f5c <wizphy_getphyconf+0x4c>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	705a      	strb	r2, [r3, #1]
         break;
 8002f5a:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f62:	2b18      	cmp	r3, #24
 8002f64:	d003      	beq.n	8002f6e <wizphy_getphyconf+0x5e>
 8002f66:	2b20      	cmp	r3, #32
 8002f68:	d001      	beq.n	8002f6e <wizphy_getphyconf+0x5e>
 8002f6a:	2b10      	cmp	r3, #16
 8002f6c:	d103      	bne.n	8002f76 <wizphy_getphyconf+0x66>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	709a      	strb	r2, [r3, #2]
         break;
 8002f74:	e003      	b.n	8002f7e <wizphy_getphyconf+0x6e>
      default:
         phyconf->speed = PHY_SPEED_10;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	709a      	strb	r2, [r3, #2]
         break;
 8002f7c:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f84:	2b18      	cmp	r3, #24
 8002f86:	d003      	beq.n	8002f90 <wizphy_getphyconf+0x80>
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d001      	beq.n	8002f90 <wizphy_getphyconf+0x80>
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d103      	bne.n	8002f98 <wizphy_getphyconf+0x88>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	70da      	strb	r2, [r3, #3]
         break;
 8002f96:	e003      	b.n	8002fa0 <wizphy_getphyconf+0x90>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	70da      	strb	r2, [r3, #3]
         break;
 8002f9e:	bf00      	nop
   }
}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002fb6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002fba:	f000 f92d 	bl	8003218 <WIZCHIP_READ>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <wizphy_setphypmode+0x2a>
 8002fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fd0:	e030      	b.n	8003034 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002fd8:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d104      	bne.n	8002fea <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002fe6:	73fb      	strb	r3, [r7, #15]
 8002fe8:	e003      	b.n	8002ff2 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002ff0:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002ffa:	f000 f93d 	bl	8003278 <WIZCHIP_WRITE>
   wizphy_reset();
 8002ffe:	f7ff ff1d 	bl	8002e3c <wizphy_reset>
   tmp = getPHYCFGR();
 8003002:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003006:	f000 f907 	bl	8003218 <WIZCHIP_READ>
 800300a:	4603      	mov	r3, r0
 800300c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d106      	bne.n	8003022 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800301a:	2b00      	cmp	r3, #0
 800301c:	d008      	beq.n	8003030 <wizphy_setphypmode+0x88>
 800301e:	2300      	movs	r3, #0
 8003020:	e008      	b.n	8003034 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <wizphy_setphypmode+0x88>
 800302c:	2300      	movs	r3, #0
 800302e:	e001      	b.n	8003034 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8003030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2206      	movs	r2, #6
 8003048:	4619      	mov	r1, r3
 800304a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800304e:	f000 f98d 	bl	800336c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	330e      	adds	r3, #14
 8003056:	2204      	movs	r2, #4
 8003058:	4619      	mov	r1, r3
 800305a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800305e:	f000 f985 	bl	800336c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	330a      	adds	r3, #10
 8003066:	2204      	movs	r2, #4
 8003068:	4619      	mov	r1, r3
 800306a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800306e:	f000 f97d 	bl	800336c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3306      	adds	r3, #6
 8003076:	2204      	movs	r2, #4
 8003078:	4619      	mov	r1, r3
 800307a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800307e:	f000 f975 	bl	800336c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	7c9a      	ldrb	r2, [r3, #18]
 8003086:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <wizchip_setnetinfo+0x78>)
 8003088:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	7cda      	ldrb	r2, [r3, #19]
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <wizchip_setnetinfo+0x78>)
 8003090:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	7d1a      	ldrb	r2, [r3, #20]
 8003096:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <wizchip_setnetinfo+0x78>)
 8003098:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	7d5a      	ldrb	r2, [r3, #21]
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <wizchip_setnetinfo+0x78>)
 80030a0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	7d9a      	ldrb	r2, [r3, #22]
 80030a6:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <wizchip_setnetinfo+0x7c>)
 80030a8:	701a      	strb	r2, [r3, #0]
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000114 	andcs	r0, r0, r4, lsl r1
 80030b8:	20000118 	andcs	r0, r0, r8, lsl r1

080030bc <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2206      	movs	r2, #6
 80030c8:	4619      	mov	r1, r3
 80030ca:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80030ce:	f000 f909 	bl	80032e4 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	330e      	adds	r3, #14
 80030d6:	2204      	movs	r2, #4
 80030d8:	4619      	mov	r1, r3
 80030da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80030de:	f000 f901 	bl	80032e4 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	330a      	adds	r3, #10
 80030e6:	2204      	movs	r2, #4
 80030e8:	4619      	mov	r1, r3
 80030ea:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80030ee:	f000 f8f9 	bl	80032e4 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3306      	adds	r3, #6
 80030f6:	2204      	movs	r2, #4
 80030f8:	4619      	mov	r1, r3
 80030fa:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80030fe:	f000 f8f1 	bl	80032e4 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8003102:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <wizchip_getnetinfo+0x78>)
 8003104:	781a      	ldrb	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <wizchip_getnetinfo+0x78>)
 800310c:	785a      	ldrb	r2, [r3, #1]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8003112:	4b08      	ldr	r3, [pc, #32]	; (8003134 <wizchip_getnetinfo+0x78>)
 8003114:	789a      	ldrb	r2, [r3, #2]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <wizchip_getnetinfo+0x78>)
 800311c:	78da      	ldrb	r2, [r3, #3]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8003122:	4b05      	ldr	r3, [pc, #20]	; (8003138 <wizchip_getnetinfo+0x7c>)
 8003124:	781a      	ldrb	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	759a      	strb	r2, [r3, #22]
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000114 	andcs	r0, r0, r4, lsl r1
 8003138:	20000118 	andcs	r0, r0, r8, lsl r1

0800313c <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != 5500   
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <wizchip_setnetmode+0x1e>
 8003154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003158:	e00e      	b.n	8003178 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 800315a:	2000      	movs	r0, #0
 800315c:	f000 f85c 	bl	8003218 <WIZCHIP_READ>
 8003160:	4603      	mov	r3, r0
 8003162:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	4313      	orrs	r3, r2
 800316a:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	4619      	mov	r1, r3
 8003170:	2000      	movs	r0, #0
 8003172:	f000 f881 	bl	8003278 <WIZCHIP_WRITE>
   return 0;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8003184:	2000      	movs	r0, #0
 8003186:	f000 f847 	bl	8003218 <WIZCHIP_READ>
 800318a:	4603      	mov	r3, r0
}
 800318c:	4618      	mov	r0, r3
 800318e:	bd80      	pop	{r7, pc}

08003190 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	4619      	mov	r1, r3
 800319e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80031a2:	f000 f869 	bl	8003278 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	885b      	ldrh	r3, [r3, #2]
 80031aa:	0a1b      	lsrs	r3, r3, #8
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	4619      	mov	r1, r3
 80031b2:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 80031b6:	f000 f85f 	bl	8003278 <WIZCHIP_WRITE>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	885b      	ldrh	r3, [r3, #2]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	4619      	mov	r1, r3
 80031c2:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80031c6:	f000 f857 	bl	8003278 <WIZCHIP_WRITE>
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop

080031d4 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80031dc:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80031e0:	f000 f81a 	bl	8003218 <WIZCHIP_READ>
 80031e4:	4603      	mov	r3, r0
 80031e6:	461a      	mov	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80031ec:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 80031f0:	f000 f812 	bl	8003218 <WIZCHIP_READ>
 80031f4:	4603      	mov	r3, r0
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	b29c      	uxth	r4, r3
 80031fc:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003200:	f000 f80a 	bl	8003218 <WIZCHIP_READ>
 8003204:	4603      	mov	r3, r0
 8003206:	b29b      	uxth	r3, r3
 8003208:	4423      	add	r3, r4
 800320a:	b29a      	uxth	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	805a      	strh	r2, [r3, #2]
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bd90      	pop	{r4, r7, pc}

08003218 <WIZCHIP_READ>:
#define _W5500_SPI_FDM_OP_LEN4_     0x03

////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 8003220:	4b14      	ldr	r3, [pc, #80]	; (8003274 <WIZCHIP_READ+0x5c>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003226:	4b13      	ldr	r3, [pc, #76]	; (8003274 <WIZCHIP_READ+0x5c>)
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	4798      	blx	r3
   	   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800322c:	4b11      	ldr	r3, [pc, #68]	; (8003274 <WIZCHIP_READ+0x5c>)
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	0c12      	lsrs	r2, r2, #16
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	4610      	mov	r0, r2
 8003238:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800323a:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <WIZCHIP_READ+0x5c>)
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	0a12      	lsrs	r2, r2, #8
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	4610      	mov	r0, r2
 8003246:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003248:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <WIZCHIP_READ+0x5c>)
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	4610      	mov	r0, r2
 8003252:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte();
 8003254:	4b07      	ldr	r3, [pc, #28]	; (8003274 <WIZCHIP_READ+0x5c>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	4798      	blx	r3
 800325a:	4603      	mov	r3, r0
 800325c:	73fb      	strb	r3, [r7, #15]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5000. !!!"   
#endif

   WIZCHIP.CS._deselect();
 800325e:	4b05      	ldr	r3, [pc, #20]	; (8003274 <WIZCHIP_READ+0x5c>)
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <WIZCHIP_READ+0x5c>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4798      	blx	r3
   return ret;
 800326a:	7bfb      	ldrb	r3, [r7, #15]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	20000084 	andcs	r0, r0, r4, lsl #1

08003278 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	70fb      	strb	r3, [r7, #3]
	WIZCHIP_CRITICAL_ENTER();
 8003284:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <WIZCHIP_WRITE+0x68>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	4798      	blx	r3
   WIZCHIP.CS._select();
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <WIZCHIP_WRITE+0x68>)
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f043 0304 	orr.w	r3, r3, #4
 8003296:	607b      	str	r3, [r7, #4]
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003298:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <WIZCHIP_WRITE+0x68>)
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	0c12      	lsrs	r2, r2, #16
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	4610      	mov	r0, r2
 80032a4:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80032a6:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <WIZCHIP_WRITE+0x68>)
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	0a12      	lsrs	r2, r2, #8
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	4610      	mov	r0, r2
 80032b2:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80032b4:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <WIZCHIP_WRITE+0x68>)
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	4610      	mov	r0, r2
 80032be:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);
 80032c0:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <WIZCHIP_WRITE+0x68>)
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	4610      	mov	r0, r2
 80032c8:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!"
#endif

   WIZCHIP.CS._deselect();
 80032ca:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <WIZCHIP_WRITE+0x68>)
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <WIZCHIP_WRITE+0x68>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4798      	blx	r3
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000084 	andcs	r0, r0, r4, lsl #1

080032e4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80032e4:	b590      	push	{r4, r7, lr}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	4613      	mov	r3, r2
 80032f0:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	82fb      	strh	r3, [r7, #22]
   uint16_t j = 0;
 80032f6:	2300      	movs	r3, #0
 80032f8:	82bb      	strh	r3, [r7, #20]
   WIZCHIP_CRITICAL_ENTER();
 80032fa:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <WIZCHIP_READ_BUF+0x84>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003300:	4b19      	ldr	r3, [pc, #100]	; (8003368 <WIZCHIP_READ_BUF+0x84>)
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003306:	4b18      	ldr	r3, [pc, #96]	; (8003368 <WIZCHIP_READ_BUF+0x84>)
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	0c12      	lsrs	r2, r2, #16
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	4610      	mov	r0, r2
 8003312:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003314:	4b14      	ldr	r3, [pc, #80]	; (8003368 <WIZCHIP_READ_BUF+0x84>)
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	0a12      	lsrs	r2, r2, #8
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	4610      	mov	r0, r2
 8003320:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003322:	4b11      	ldr	r3, [pc, #68]	; (8003368 <WIZCHIP_READ_BUF+0x84>)
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	4610      	mov	r0, r2
 800332c:	4798      	blx	r3
      for(i = 0; i < len; i++)
 800332e:	2300      	movs	r3, #0
 8003330:	82fb      	strh	r3, [r7, #22]
 8003332:	e00a      	b.n	800334a <WIZCHIP_READ_BUF+0x66>
        pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8003334:	8afb      	ldrh	r3, [r7, #22]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	18d4      	adds	r4, r2, r3
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <WIZCHIP_READ_BUF+0x84>)
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	4798      	blx	r3
 8003340:	4603      	mov	r3, r0
 8003342:	7023      	strb	r3, [r4, #0]
      for(i = 0; i < len; i++)
 8003344:	8afb      	ldrh	r3, [r7, #22]
 8003346:	3301      	adds	r3, #1
 8003348:	82fb      	strh	r3, [r7, #22]
 800334a:	8afa      	ldrh	r2, [r7, #22]
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	429a      	cmp	r2, r3
 8003350:	d3f0      	bcc.n	8003334 <WIZCHIP_READ_BUF+0x50>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <WIZCHIP_READ_BUF+0x84>)
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003358:	4b03      	ldr	r3, [pc, #12]	; (8003368 <WIZCHIP_READ_BUF+0x84>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4798      	blx	r3
}
 800335e:	bf00      	nop
 8003360:	371c      	adds	r7, #28
 8003362:	46bd      	mov	sp, r7
 8003364:	bd90      	pop	{r4, r7, pc}
 8003366:	bf00      	nop
 8003368:	20000084 	andcs	r0, r0, r4, lsl #1

0800336c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	4613      	mov	r3, r2
 8003378:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 800337a:	2300      	movs	r3, #0
 800337c:	82fb      	strh	r3, [r7, #22]
   uint16_t j = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	82bb      	strh	r3, [r7, #20]
   WIZCHIP_CRITICAL_ENTER();
 8003382:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <WIZCHIP_WRITE_BUF+0x8c>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003388:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <WIZCHIP_WRITE_BUF+0x8c>)
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f043 0304 	orr.w	r3, r3, #4
 8003394:	60fb      	str	r3, [r7, #12]
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003396:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <WIZCHIP_WRITE_BUF+0x8c>)
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	0c12      	lsrs	r2, r2, #16
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	4610      	mov	r0, r2
 80033a2:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80033a4:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <WIZCHIP_WRITE_BUF+0x8c>)
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	0a12      	lsrs	r2, r2, #8
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	4610      	mov	r0, r2
 80033b0:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80033b2:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <WIZCHIP_WRITE_BUF+0x8c>)
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	4610      	mov	r0, r2
 80033bc:	4798      	blx	r3
      for(i = 0; i < len; i++)
 80033be:	2300      	movs	r3, #0
 80033c0:	82fb      	strh	r3, [r7, #22]
 80033c2:	e00a      	b.n	80033da <WIZCHIP_WRITE_BUF+0x6e>
         WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80033c4:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <WIZCHIP_WRITE_BUF+0x8c>)
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	8afa      	ldrh	r2, [r7, #22]
 80033ca:	68b9      	ldr	r1, [r7, #8]
 80033cc:	440a      	add	r2, r1
 80033ce:	7812      	ldrb	r2, [r2, #0]
 80033d0:	4610      	mov	r0, r2
 80033d2:	4798      	blx	r3
      for(i = 0; i < len; i++)
 80033d4:	8afb      	ldrh	r3, [r7, #22]
 80033d6:	3301      	adds	r3, #1
 80033d8:	82fb      	strh	r3, [r7, #22]
 80033da:	8afa      	ldrh	r2, [r7, #22]
 80033dc:	88fb      	ldrh	r3, [r7, #6]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d3f0      	bcc.n	80033c4 <WIZCHIP_WRITE_BUF+0x58>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
 80033e2:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <WIZCHIP_WRITE_BUF+0x8c>)
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80033e8:	4b03      	ldr	r3, [pc, #12]	; (80033f8 <WIZCHIP_WRITE_BUF+0x8c>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4798      	blx	r3
}
 80033ee:	bf00      	nop
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000084 	andcs	r0, r0, r4, lsl #1

080033fc <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003406:	2300      	movs	r3, #0
 8003408:	81fb      	strh	r3, [r7, #14]
 800340a:	2300      	movs	r3, #0
 800340c:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	3301      	adds	r3, #1
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fefc 	bl	8003218 <WIZCHIP_READ>
 8003420:	4603      	mov	r3, r0
 8003422:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003424:	89bb      	ldrh	r3, [r7, #12]
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	b29c      	uxth	r4, r3
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	3301      	adds	r3, #1
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff feee 	bl	8003218 <WIZCHIP_READ>
 800343c:	4603      	mov	r3, r0
 800343e:	b29b      	uxth	r3, r3
 8003440:	4423      	add	r3, r4
 8003442:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003444:	89bb      	ldrh	r3, [r7, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d01a      	beq.n	8003480 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	3301      	adds	r3, #1
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff fede 	bl	8003218 <WIZCHIP_READ>
 800345c:	4603      	mov	r3, r0
 800345e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003460:	89fb      	ldrh	r3, [r7, #14]
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	b29c      	uxth	r4, r3
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	3301      	adds	r3, #1
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fed0 	bl	8003218 <WIZCHIP_READ>
 8003478:	4603      	mov	r3, r0
 800347a:	b29b      	uxth	r3, r3
 800347c:	4423      	add	r3, r4
 800347e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003480:	89fa      	ldrh	r2, [r7, #14]
 8003482:	89bb      	ldrh	r3, [r7, #12]
 8003484:	429a      	cmp	r2, r3
 8003486:	d1c2      	bne.n	800340e <getSn_TX_FSR+0x12>
   return val;
 8003488:	89fb      	ldrh	r3, [r7, #14]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	bd90      	pop	{r4, r7, pc}
 8003492:	bf00      	nop

08003494 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800349e:	2300      	movs	r3, #0
 80034a0:	81fb      	strh	r3, [r7, #14]
 80034a2:	2300      	movs	r3, #0
 80034a4:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	3301      	adds	r3, #1
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff feb0 	bl	8003218 <WIZCHIP_READ>
 80034b8:	4603      	mov	r3, r0
 80034ba:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80034bc:	89bb      	ldrh	r3, [r7, #12]
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	b29c      	uxth	r4, r3
 80034c2:	79fb      	ldrb	r3, [r7, #7]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	3301      	adds	r3, #1
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fea2 	bl	8003218 <WIZCHIP_READ>
 80034d4:	4603      	mov	r3, r0
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	4423      	add	r3, r4
 80034da:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80034dc:	89bb      	ldrh	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d01a      	beq.n	8003518 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	3301      	adds	r3, #1
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff fe92 	bl	8003218 <WIZCHIP_READ>
 80034f4:	4603      	mov	r3, r0
 80034f6:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80034f8:	89fb      	ldrh	r3, [r7, #14]
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	b29c      	uxth	r4, r3
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	3301      	adds	r3, #1
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fe84 	bl	8003218 <WIZCHIP_READ>
 8003510:	4603      	mov	r3, r0
 8003512:	b29b      	uxth	r3, r3
 8003514:	4423      	add	r3, r4
 8003516:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003518:	89fa      	ldrh	r2, [r7, #14]
 800351a:	89bb      	ldrh	r3, [r7, #12]
 800351c:	429a      	cmp	r2, r3
 800351e:	d1c2      	bne.n	80034a6 <getSn_RX_RSR+0x12>
   return val;
 8003520:	89fb      	ldrh	r3, [r7, #14]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	bd90      	pop	{r4, r7, pc}
 800352a:	bf00      	nop

0800352c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800352c:	b590      	push	{r4, r7, lr}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	6039      	str	r1, [r7, #0]
 8003536:	71fb      	strb	r3, [r7, #7]
 8003538:	4613      	mov	r3, r2
 800353a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	60bb      	str	r3, [r7, #8]
   if(len == 0)  return;
 8003544:	88bb      	ldrh	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d048      	beq.n	80035dc <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	3301      	adds	r3, #1
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fe5e 	bl	8003218 <WIZCHIP_READ>
 800355c:	4603      	mov	r3, r0
 800355e:	b29b      	uxth	r3, r3
 8003560:	021b      	lsls	r3, r3, #8
 8003562:	b29c      	uxth	r4, r3
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	3301      	adds	r3, #1
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fe51 	bl	8003218 <WIZCHIP_READ>
 8003576:	4603      	mov	r3, r0
 8003578:	b29b      	uxth	r3, r3
 800357a:	4423      	add	r3, r4
 800357c:	81fb      	strh	r3, [r7, #14]
   
   addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800357e:	89fb      	ldrh	r3, [r7, #14]
 8003580:	021a      	lsls	r2, r3, #8
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	3302      	adds	r3, #2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4413      	add	r3, r2
 800358c:	60bb      	str	r3, [r7, #8]
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800358e:	88bb      	ldrh	r3, [r7, #4]
 8003590:	461a      	mov	r2, r3
 8003592:	6839      	ldr	r1, [r7, #0]
 8003594:	68b8      	ldr	r0, [r7, #8]
 8003596:	f7ff fee9 	bl	800336c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800359a:	89fa      	ldrh	r2, [r7, #14]
 800359c:	88bb      	ldrh	r3, [r7, #4]
 800359e:	4413      	add	r3, r2
 80035a0:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	3301      	adds	r3, #1
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80035ae:	461a      	mov	r2, r3
 80035b0:	89fb      	ldrh	r3, [r7, #14]
 80035b2:	0a1b      	lsrs	r3, r3, #8
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	4619      	mov	r1, r3
 80035ba:	4610      	mov	r0, r2
 80035bc:	f7ff fe5c 	bl	8003278 <WIZCHIP_WRITE>
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	3301      	adds	r3, #1
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80035cc:	461a      	mov	r2, r3
 80035ce:	89fb      	ldrh	r3, [r7, #14]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	4619      	mov	r1, r3
 80035d4:	4610      	mov	r0, r2
 80035d6:	f7ff fe4f 	bl	8003278 <WIZCHIP_WRITE>
 80035da:	e000      	b.n	80035de <wiz_send_data+0xb2>
   if(len == 0)  return;
 80035dc:	bf00      	nop
}
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd90      	pop	{r4, r7, pc}

080035e4 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	6039      	str	r1, [r7, #0]
 80035ee:	71fb      	strb	r3, [r7, #7]
 80035f0:	4613      	mov	r3, r2
 80035f2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80035fc:	88bb      	ldrh	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d048      	beq.n	8003694 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	3301      	adds	r3, #1
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff fe02 	bl	8003218 <WIZCHIP_READ>
 8003614:	4603      	mov	r3, r0
 8003616:	b29b      	uxth	r3, r3
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	b29c      	uxth	r4, r3
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	3301      	adds	r3, #1
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fdf5 	bl	8003218 <WIZCHIP_READ>
 800362e:	4603      	mov	r3, r0
 8003630:	b29b      	uxth	r3, r3
 8003632:	4423      	add	r3, r4
 8003634:	81fb      	strh	r3, [r7, #14]
   addrsel = (ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8003636:	89fb      	ldrh	r3, [r7, #14]
 8003638:	021a      	lsls	r2, r3, #8
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	3303      	adds	r3, #3
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4413      	add	r3, r2
 8003644:	60bb      	str	r3, [r7, #8]
   
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8003646:	88bb      	ldrh	r3, [r7, #4]
 8003648:	461a      	mov	r2, r3
 800364a:	6839      	ldr	r1, [r7, #0]
 800364c:	68b8      	ldr	r0, [r7, #8]
 800364e:	f7ff fe49 	bl	80032e4 <WIZCHIP_READ_BUF>
   ptr += len;
 8003652:	89fa      	ldrh	r2, [r7, #14]
 8003654:	88bb      	ldrh	r3, [r7, #4]
 8003656:	4413      	add	r3, r2
 8003658:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	3301      	adds	r3, #1
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003666:	461a      	mov	r2, r3
 8003668:	89fb      	ldrh	r3, [r7, #14]
 800366a:	0a1b      	lsrs	r3, r3, #8
 800366c:	b29b      	uxth	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f7ff fe00 	bl	8003278 <WIZCHIP_WRITE>
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	3301      	adds	r3, #1
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003684:	461a      	mov	r2, r3
 8003686:	89fb      	ldrh	r3, [r7, #14]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	4619      	mov	r1, r3
 800368c:	4610      	mov	r0, r2
 800368e:	f7ff fdf3 	bl	8003278 <WIZCHIP_WRITE>
 8003692:	e000      	b.n	8003696 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8003694:	bf00      	nop
}
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	bd90      	pop	{r4, r7, pc}

0800369c <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 800369c:	b590      	push	{r4, r7, lr}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	460a      	mov	r2, r1
 80036a6:	71fb      	strb	r3, [r7, #7]
 80036a8:	4613      	mov	r3, r2
 80036aa:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	81fb      	strh	r3, [r7, #14]
   ptr = getSn_RX_RD(sn);
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	3301      	adds	r3, #1
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff fdab 	bl	8003218 <WIZCHIP_READ>
 80036c2:	4603      	mov	r3, r0
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	b29c      	uxth	r4, r3
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	3301      	adds	r3, #1
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fd9e 	bl	8003218 <WIZCHIP_READ>
 80036dc:	4603      	mov	r3, r0
 80036de:	b29b      	uxth	r3, r3
 80036e0:	4423      	add	r3, r4
 80036e2:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 80036e4:	89fa      	ldrh	r2, [r7, #14]
 80036e6:	88bb      	ldrh	r3, [r7, #4]
 80036e8:	4413      	add	r3, r2
 80036ea:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 80036ec:	79fb      	ldrb	r3, [r7, #7]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	3301      	adds	r3, #1
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80036f8:	461a      	mov	r2, r3
 80036fa:	89fb      	ldrh	r3, [r7, #14]
 80036fc:	0a1b      	lsrs	r3, r3, #8
 80036fe:	b29b      	uxth	r3, r3
 8003700:	b2db      	uxtb	r3, r3
 8003702:	4619      	mov	r1, r3
 8003704:	4610      	mov	r0, r2
 8003706:	f7ff fdb7 	bl	8003278 <WIZCHIP_WRITE>
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	3301      	adds	r3, #1
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003716:	461a      	mov	r2, r3
 8003718:	89fb      	ldrh	r3, [r7, #14]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f7ff fdaa 	bl	8003278 <WIZCHIP_WRITE>
}
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	bd90      	pop	{r4, r7, pc}

0800372c <ip_assign>:
********************************************************************************
User's Function Implementation Part
********************************************************************************
*/

static void ip_assign(void) { }
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr

08003738 <ip_update>:

static void ip_update(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
	setMR(MR_RST);
 800373c:	2180      	movs	r1, #128	; 0x80
 800373e:	2000      	movs	r0, #0
 8003740:	f7ff fd9a 	bl	8003278 <WIZCHIP_WRITE>
	getMR(); // for delay
 8003744:	2000      	movs	r0, #0
 8003746:	f7ff fd67 	bl	8003218 <WIZCHIP_READ>
	setSHAR(wizchip_mac);
 800374a:	2206      	movs	r2, #6
 800374c:	4903      	ldr	r1, [pc, #12]	; (800375c <ip_update+0x24>)
 800374e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003752:	f7ff fe0b 	bl	800336c <WIZCHIP_WRITE_BUF>
}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	2000012c 	andcs	r0, r0, ip, lsr #2

08003760 <ip_conflict>:

static void ip_conflict(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8003764:	2180      	movs	r1, #128	; 0x80
 8003766:	2000      	movs	r0, #0
 8003768:	f7ff fd86 	bl	8003278 <WIZCHIP_WRITE>
	getMR(); // for delay
 800376c:	2000      	movs	r0, #0
 800376e:	f7ff fd53 	bl	8003218 <WIZCHIP_READ>
	setSHAR(wizchip_mac);
 8003772:	2206      	movs	r2, #6
 8003774:	4909      	ldr	r1, [pc, #36]	; (800379c <ip_conflict+0x3c>)
 8003776:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800377a:	f7ff fdf7 	bl	800336c <WIZCHIP_WRITE_BUF>

	socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <ip_conflict+0x40>)
 8003780:	7818      	ldrb	r0, [r3, #0]
 8003782:	2300      	movs	r3, #0
 8003784:	2244      	movs	r2, #68	; 0x44
 8003786:	2102      	movs	r1, #2
 8003788:	f7fe f8d8 	bl	800193c <socket>
	send_DHCP_DISCOVER();
 800378c:	f000 f80c 	bl	80037a8 <send_DHCP_DISCOVER>
	dhcp_state = STATE_DHCP_DISCOVER;
 8003790:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <ip_conflict+0x44>)
 8003792:	2201      	movs	r2, #1
 8003794:	701a      	strb	r2, [r3, #0]
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	2000012c 	andcs	r0, r0, ip, lsr #2
 80037a0:	20003670 	andcs	r3, r0, r0, ror r6
 80037a4:	20003644 	andcs	r3, r0, r4, asr #12

080037a8 <send_DHCP_DISCOVER>:
* Returns    : None.
* Note       : 
*********************************************************************************************************
*/
void send_DHCP_DISCOVER(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	80bb      	strh	r3, [r7, #4]

	MSG->op = DHCP_BOOTREQUEST;
 80037b2:	4b4f      	ldr	r3, [pc, #316]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2201      	movs	r2, #1
 80037b8:	701a      	strb	r2, [r3, #0]
	MSG->htype = DHCP_HTYPE10MB;
 80037ba:	4b4d      	ldr	r3, [pc, #308]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2201      	movs	r2, #1
 80037c0:	705a      	strb	r2, [r3, #1]
	MSG->hlen = DHCP_HLENETHERNET;
 80037c2:	4b4b      	ldr	r3, [pc, #300]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2206      	movs	r2, #6
 80037c8:	709a      	strb	r2, [r3, #2]
	MSG->hops = DHCP_HOPS;
 80037ca:	4b49      	ldr	r3, [pc, #292]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2200      	movs	r2, #0
 80037d0:	70da      	strb	r2, [r3, #3]
	MSG->xid = DHCP_XID;
 80037d2:	4b47      	ldr	r3, [pc, #284]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a47      	ldr	r2, [pc, #284]	; (80038f4 <send_DHCP_DISCOVER+0x14c>)
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	605a      	str	r2, [r3, #4]
	MSG->secs = DHCP_SECS;
 80037dc:	4b44      	ldr	r3, [pc, #272]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2200      	movs	r2, #0
 80037e2:	811a      	strh	r2, [r3, #8]
	MSG->flags = DHCP_FLAGSBROADCAST;
 80037e4:	4b42      	ldr	r3, [pc, #264]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2280      	movs	r2, #128	; 0x80
 80037ea:	815a      	strh	r2, [r3, #10]

	MSG->ciaddr[0] = 0;
 80037ec:	4b40      	ldr	r3, [pc, #256]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2200      	movs	r2, #0
 80037f2:	731a      	strb	r2, [r3, #12]
	MSG->ciaddr[1] = 0;
 80037f4:	4b3e      	ldr	r3, [pc, #248]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2200      	movs	r2, #0
 80037fa:	735a      	strb	r2, [r3, #13]
	MSG->ciaddr[2] = 0;
 80037fc:	4b3c      	ldr	r3, [pc, #240]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2200      	movs	r2, #0
 8003802:	739a      	strb	r2, [r3, #14]
	MSG->ciaddr[3] = 0;
 8003804:	4b3a      	ldr	r3, [pc, #232]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2200      	movs	r2, #0
 800380a:	73da      	strb	r2, [r3, #15]

	MSG->yiaddr[0] = 0;
 800380c:	4b38      	ldr	r3, [pc, #224]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2200      	movs	r2, #0
 8003812:	741a      	strb	r2, [r3, #16]
	MSG->yiaddr[1] = 0;
 8003814:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2200      	movs	r2, #0
 800381a:	745a      	strb	r2, [r3, #17]
	MSG->yiaddr[2] = 0;
 800381c:	4b34      	ldr	r3, [pc, #208]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2200      	movs	r2, #0
 8003822:	749a      	strb	r2, [r3, #18]
	MSG->yiaddr[3] = 0;
 8003824:	4b32      	ldr	r3, [pc, #200]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2200      	movs	r2, #0
 800382a:	74da      	strb	r2, [r3, #19]

	MSG->siaddr[0] = 0;
 800382c:	4b30      	ldr	r3, [pc, #192]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2200      	movs	r2, #0
 8003832:	751a      	strb	r2, [r3, #20]
	MSG->siaddr[1] = 0;
 8003834:	4b2e      	ldr	r3, [pc, #184]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2200      	movs	r2, #0
 800383a:	755a      	strb	r2, [r3, #21]
	MSG->siaddr[2] = 0;
 800383c:	4b2c      	ldr	r3, [pc, #176]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2200      	movs	r2, #0
 8003842:	759a      	strb	r2, [r3, #22]
	MSG->siaddr[3] = 0;
 8003844:	4b2a      	ldr	r3, [pc, #168]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2200      	movs	r2, #0
 800384a:	75da      	strb	r2, [r3, #23]

	MSG->giaddr[0] = 0;
 800384c:	4b28      	ldr	r3, [pc, #160]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2200      	movs	r2, #0
 8003852:	761a      	strb	r2, [r3, #24]
	MSG->giaddr[1] = 0;
 8003854:	4b26      	ldr	r3, [pc, #152]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2200      	movs	r2, #0
 800385a:	765a      	strb	r2, [r3, #25]
	MSG->giaddr[2] = 0;
 800385c:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2200      	movs	r2, #0
 8003862:	769a      	strb	r2, [r3, #26]
	MSG->giaddr[3] = 0;
 8003864:	4b22      	ldr	r3, [pc, #136]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2200      	movs	r2, #0
 800386a:	76da      	strb	r2, [r3, #27]

	MSG->chaddr[0] = wizchip_mac[0];
 800386c:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a21      	ldr	r2, [pc, #132]	; (80038f8 <send_DHCP_DISCOVER+0x150>)
 8003872:	7812      	ldrb	r2, [r2, #0]
 8003874:	771a      	strb	r2, [r3, #28]
	MSG->chaddr[1] = wizchip_mac[1];
 8003876:	4b1e      	ldr	r3, [pc, #120]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a1f      	ldr	r2, [pc, #124]	; (80038f8 <send_DHCP_DISCOVER+0x150>)
 800387c:	7852      	ldrb	r2, [r2, #1]
 800387e:	775a      	strb	r2, [r3, #29]
	MSG->chaddr[2] = wizchip_mac[2];
 8003880:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a1c      	ldr	r2, [pc, #112]	; (80038f8 <send_DHCP_DISCOVER+0x150>)
 8003886:	7892      	ldrb	r2, [r2, #2]
 8003888:	779a      	strb	r2, [r3, #30]
	MSG->chaddr[3] = wizchip_mac[3];
 800388a:	4b19      	ldr	r3, [pc, #100]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a1a      	ldr	r2, [pc, #104]	; (80038f8 <send_DHCP_DISCOVER+0x150>)
 8003890:	78d2      	ldrb	r2, [r2, #3]
 8003892:	77da      	strb	r2, [r3, #31]
	MSG->chaddr[4] = wizchip_mac[4];
 8003894:	4b16      	ldr	r3, [pc, #88]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a17      	ldr	r2, [pc, #92]	; (80038f8 <send_DHCP_DISCOVER+0x150>)
 800389a:	7912      	ldrb	r2, [r2, #4]
 800389c:	f883 2020 	strb.w	r2, [r3, #32]
	MSG->chaddr[5] = wizchip_mac[5];
 80038a0:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a14      	ldr	r2, [pc, #80]	; (80038f8 <send_DHCP_DISCOVER+0x150>)
 80038a6:	7952      	ldrb	r2, [r2, #5]
 80038a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++) MSG->chaddr[i] = 0;
 80038ac:	2306      	movs	r3, #6
 80038ae:	80fb      	strh	r3, [r7, #6]
 80038b0:	e008      	b.n	80038c4 <send_DHCP_DISCOVER+0x11c>
 80038b2:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	4413      	add	r3, r2
 80038ba:	2200      	movs	r2, #0
 80038bc:	771a      	strb	r2, [r3, #28]
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	3301      	adds	r3, #1
 80038c2:	80fb      	strh	r3, [r7, #6]
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	2b0f      	cmp	r3, #15
 80038c8:	d9f3      	bls.n	80038b2 <send_DHCP_DISCOVER+0x10a>
	for (i = 0; i < 64; i++) MSG->sname[i] = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	80fb      	strh	r3, [r7, #6]
 80038ce:	e009      	b.n	80038e4 <send_DHCP_DISCOVER+0x13c>
 80038d0:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	4413      	add	r3, r2
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	3301      	adds	r3, #1
 80038e2:	80fb      	strh	r3, [r7, #6]
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	2b3f      	cmp	r3, #63	; 0x3f
 80038e8:	d9f2      	bls.n	80038d0 <send_DHCP_DISCOVER+0x128>
	for (i = 0; i < 128; i++) MSG->file[i] = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	80fb      	strh	r3, [r7, #6]
 80038ee:	e00f      	b.n	8003910 <send_DHCP_DISCOVER+0x168>
 80038f0:	2000366c 	andcs	r3, r0, ip, ror #12
 80038f4:	20003654 	andcs	r3, r0, r4, asr r6
 80038f8:	2000012c 	andcs	r0, r0, ip, lsr #2
 80038fc:	4bab      	ldr	r3, [pc, #684]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	4413      	add	r3, r2
 8003904:	2200      	movs	r2, #0
 8003906:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	3301      	adds	r3, #1
 800390e:	80fb      	strh	r3, [r7, #6]
 8003910:	88fb      	ldrh	r3, [r7, #6]
 8003912:	2b7f      	cmp	r3, #127	; 0x7f
 8003914:	d9f2      	bls.n	80038fc <send_DHCP_DISCOVER+0x154>

	// MAGIC_COOKIE
	MSG->OPT[k++] = 0x63;
 8003916:	4ba5      	ldr	r3, [pc, #660]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	88bb      	ldrh	r3, [r7, #4]
 800391c:	1c59      	adds	r1, r3, #1
 800391e:	80b9      	strh	r1, [r7, #4]
 8003920:	4413      	add	r3, r2
 8003922:	2263      	movs	r2, #99	; 0x63
 8003924:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x82;
 8003928:	4ba0      	ldr	r3, [pc, #640]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	88bb      	ldrh	r3, [r7, #4]
 800392e:	1c59      	adds	r1, r3, #1
 8003930:	80b9      	strh	r1, [r7, #4]
 8003932:	4413      	add	r3, r2
 8003934:	2282      	movs	r2, #130	; 0x82
 8003936:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x53;
 800393a:	4b9c      	ldr	r3, [pc, #624]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	88bb      	ldrh	r3, [r7, #4]
 8003940:	1c59      	adds	r1, r3, #1
 8003942:	80b9      	strh	r1, [r7, #4]
 8003944:	4413      	add	r3, r2
 8003946:	2253      	movs	r2, #83	; 0x53
 8003948:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x63;
 800394c:	4b97      	ldr	r3, [pc, #604]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	88bb      	ldrh	r3, [r7, #4]
 8003952:	1c59      	adds	r1, r3, #1
 8003954:	80b9      	strh	r1, [r7, #4]
 8003956:	4413      	add	r3, r2
 8003958:	2263      	movs	r2, #99	; 0x63
 800395a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	// Option Request Param
	MSG->OPT[k++] = dhcpMessageType;
 800395e:	4b93      	ldr	r3, [pc, #588]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	88bb      	ldrh	r3, [r7, #4]
 8003964:	1c59      	adds	r1, r3, #1
 8003966:	80b9      	strh	r1, [r7, #4]
 8003968:	4413      	add	r3, r2
 800396a:	2235      	movs	r2, #53	; 0x35
 800396c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x01;
 8003970:	4b8e      	ldr	r3, [pc, #568]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	88bb      	ldrh	r3, [r7, #4]
 8003976:	1c59      	adds	r1, r3, #1
 8003978:	80b9      	strh	r1, [r7, #4]
 800397a:	4413      	add	r3, r2
 800397c:	2201      	movs	r2, #1
 800397e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_DISCOVER;
 8003982:	4b8a      	ldr	r3, [pc, #552]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	88bb      	ldrh	r3, [r7, #4]
 8003988:	1c59      	adds	r1, r3, #1
 800398a:	80b9      	strh	r1, [r7, #4]
 800398c:	4413      	add	r3, r2
 800398e:	2201      	movs	r2, #1
 8003990:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	MSG->OPT[k++] = dhcpClientIdentifier;
 8003994:	4b85      	ldr	r3, [pc, #532]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	88bb      	ldrh	r3, [r7, #4]
 800399a:	1c59      	adds	r1, r3, #1
 800399c:	80b9      	strh	r1, [r7, #4]
 800399e:	4413      	add	r3, r2
 80039a0:	223d      	movs	r2, #61	; 0x3d
 80039a2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x07;
 80039a6:	4b81      	ldr	r3, [pc, #516]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	88bb      	ldrh	r3, [r7, #4]
 80039ac:	1c59      	adds	r1, r3, #1
 80039ae:	80b9      	strh	r1, [r7, #4]
 80039b0:	4413      	add	r3, r2
 80039b2:	2207      	movs	r2, #7
 80039b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x01;
 80039b8:	4b7c      	ldr	r3, [pc, #496]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	88bb      	ldrh	r3, [r7, #4]
 80039be:	1c59      	adds	r1, r3, #1
 80039c0:	80b9      	strh	r1, [r7, #4]
 80039c2:	4413      	add	r3, r2
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[0];
 80039ca:	4b78      	ldr	r3, [pc, #480]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	88bb      	ldrh	r3, [r7, #4]
 80039d0:	1c59      	adds	r1, r3, #1
 80039d2:	80b9      	strh	r1, [r7, #4]
 80039d4:	4618      	mov	r0, r3
 80039d6:	4b76      	ldr	r3, [pc, #472]	; (8003bb0 <send_DHCP_DISCOVER+0x408>)
 80039d8:	7819      	ldrb	r1, [r3, #0]
 80039da:	1813      	adds	r3, r2, r0
 80039dc:	460a      	mov	r2, r1
 80039de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[1];
 80039e2:	4b72      	ldr	r3, [pc, #456]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	88bb      	ldrh	r3, [r7, #4]
 80039e8:	1c59      	adds	r1, r3, #1
 80039ea:	80b9      	strh	r1, [r7, #4]
 80039ec:	4618      	mov	r0, r3
 80039ee:	4b70      	ldr	r3, [pc, #448]	; (8003bb0 <send_DHCP_DISCOVER+0x408>)
 80039f0:	7859      	ldrb	r1, [r3, #1]
 80039f2:	1813      	adds	r3, r2, r0
 80039f4:	460a      	mov	r2, r1
 80039f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[2];
 80039fa:	4b6c      	ldr	r3, [pc, #432]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	88bb      	ldrh	r3, [r7, #4]
 8003a00:	1c59      	adds	r1, r3, #1
 8003a02:	80b9      	strh	r1, [r7, #4]
 8003a04:	4618      	mov	r0, r3
 8003a06:	4b6a      	ldr	r3, [pc, #424]	; (8003bb0 <send_DHCP_DISCOVER+0x408>)
 8003a08:	7899      	ldrb	r1, [r3, #2]
 8003a0a:	1813      	adds	r3, r2, r0
 8003a0c:	460a      	mov	r2, r1
 8003a0e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[3];
 8003a12:	4b66      	ldr	r3, [pc, #408]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	88bb      	ldrh	r3, [r7, #4]
 8003a18:	1c59      	adds	r1, r3, #1
 8003a1a:	80b9      	strh	r1, [r7, #4]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	4b64      	ldr	r3, [pc, #400]	; (8003bb0 <send_DHCP_DISCOVER+0x408>)
 8003a20:	78d9      	ldrb	r1, [r3, #3]
 8003a22:	1813      	adds	r3, r2, r0
 8003a24:	460a      	mov	r2, r1
 8003a26:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[4];
 8003a2a:	4b60      	ldr	r3, [pc, #384]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	88bb      	ldrh	r3, [r7, #4]
 8003a30:	1c59      	adds	r1, r3, #1
 8003a32:	80b9      	strh	r1, [r7, #4]
 8003a34:	4618      	mov	r0, r3
 8003a36:	4b5e      	ldr	r3, [pc, #376]	; (8003bb0 <send_DHCP_DISCOVER+0x408>)
 8003a38:	7919      	ldrb	r1, [r3, #4]
 8003a3a:	1813      	adds	r3, r2, r0
 8003a3c:	460a      	mov	r2, r1
 8003a3e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[5];
 8003a42:	4b5a      	ldr	r3, [pc, #360]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	88bb      	ldrh	r3, [r7, #4]
 8003a48:	1c59      	adds	r1, r3, #1
 8003a4a:	80b9      	strh	r1, [r7, #4]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	4b58      	ldr	r3, [pc, #352]	; (8003bb0 <send_DHCP_DISCOVER+0x408>)
 8003a50:	7959      	ldrb	r1, [r3, #5]
 8003a52:	1813      	adds	r3, r2, r0
 8003a54:	460a      	mov	r2, r1
 8003a56:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	MSG->OPT[k++] = hostName;
 8003a5a:	4b54      	ldr	r3, [pc, #336]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	88bb      	ldrh	r3, [r7, #4]
 8003a60:	1c59      	adds	r1, r3, #1
 8003a62:	80b9      	strh	r1, [r7, #4]
 8003a64:	4413      	add	r3, r2
 8003a66:	220c      	movs	r2, #12
 8003a68:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 9; // length of hostname
 8003a6c:	4b4f      	ldr	r3, [pc, #316]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	88bb      	ldrh	r3, [r7, #4]
 8003a72:	1c59      	adds	r1, r3, #1
 8003a74:	80b9      	strh	r1, [r7, #4]
 8003a76:	4413      	add	r3, r2
 8003a78:	2209      	movs	r2, #9
 8003a7a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[0];
 8003a7e:	4b4b      	ldr	r3, [pc, #300]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	88bb      	ldrh	r3, [r7, #4]
 8003a84:	1c59      	adds	r1, r3, #1
 8003a86:	80b9      	strh	r1, [r7, #4]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	4b4a      	ldr	r3, [pc, #296]	; (8003bb4 <send_DHCP_DISCOVER+0x40c>)
 8003a8c:	7819      	ldrb	r1, [r3, #0]
 8003a8e:	1813      	adds	r3, r2, r0
 8003a90:	460a      	mov	r2, r1
 8003a92:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[1];
 8003a96:	4b45      	ldr	r3, [pc, #276]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	88bb      	ldrh	r3, [r7, #4]
 8003a9c:	1c59      	adds	r1, r3, #1
 8003a9e:	80b9      	strh	r1, [r7, #4]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	4b44      	ldr	r3, [pc, #272]	; (8003bb4 <send_DHCP_DISCOVER+0x40c>)
 8003aa4:	7859      	ldrb	r1, [r3, #1]
 8003aa6:	1813      	adds	r3, r2, r0
 8003aa8:	460a      	mov	r2, r1
 8003aaa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[2];
 8003aae:	4b3f      	ldr	r3, [pc, #252]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	88bb      	ldrh	r3, [r7, #4]
 8003ab4:	1c59      	adds	r1, r3, #1
 8003ab6:	80b9      	strh	r1, [r7, #4]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	4b3e      	ldr	r3, [pc, #248]	; (8003bb4 <send_DHCP_DISCOVER+0x40c>)
 8003abc:	7899      	ldrb	r1, [r3, #2]
 8003abe:	1813      	adds	r3, r2, r0
 8003ac0:	460a      	mov	r2, r1
 8003ac2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[3];
 8003ac6:	4b39      	ldr	r3, [pc, #228]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	88bb      	ldrh	r3, [r7, #4]
 8003acc:	1c59      	adds	r1, r3, #1
 8003ace:	80b9      	strh	r1, [r7, #4]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	4b38      	ldr	r3, [pc, #224]	; (8003bb4 <send_DHCP_DISCOVER+0x40c>)
 8003ad4:	78d9      	ldrb	r1, [r3, #3]
 8003ad6:	1813      	adds	r3, r2, r0
 8003ad8:	460a      	mov	r2, r1
 8003ada:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[4];
 8003ade:	4b33      	ldr	r3, [pc, #204]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	88bb      	ldrh	r3, [r7, #4]
 8003ae4:	1c59      	adds	r1, r3, #1
 8003ae6:	80b9      	strh	r1, [r7, #4]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	4b32      	ldr	r3, [pc, #200]	; (8003bb4 <send_DHCP_DISCOVER+0x40c>)
 8003aec:	7919      	ldrb	r1, [r3, #4]
 8003aee:	1813      	adds	r3, r2, r0
 8003af0:	460a      	mov	r2, r1
 8003af2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[5];
 8003af6:	4b2d      	ldr	r3, [pc, #180]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	88bb      	ldrh	r3, [r7, #4]
 8003afc:	1c59      	adds	r1, r3, #1
 8003afe:	80b9      	strh	r1, [r7, #4]
 8003b00:	4618      	mov	r0, r3
 8003b02:	4b2c      	ldr	r3, [pc, #176]	; (8003bb4 <send_DHCP_DISCOVER+0x40c>)
 8003b04:	7959      	ldrb	r1, [r3, #5]
 8003b06:	1813      	adds	r3, r2, r0
 8003b08:	460a      	mov	r2, r1
 8003b0a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[3];
 8003b0e:	4b27      	ldr	r3, [pc, #156]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	88bb      	ldrh	r3, [r7, #4]
 8003b14:	1c59      	adds	r1, r3, #1
 8003b16:	80b9      	strh	r1, [r7, #4]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	4b25      	ldr	r3, [pc, #148]	; (8003bb0 <send_DHCP_DISCOVER+0x408>)
 8003b1c:	78d9      	ldrb	r1, [r3, #3]
 8003b1e:	1813      	adds	r3, r2, r0
 8003b20:	460a      	mov	r2, r1
 8003b22:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[4];
 8003b26:	4b21      	ldr	r3, [pc, #132]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	88bb      	ldrh	r3, [r7, #4]
 8003b2c:	1c59      	adds	r1, r3, #1
 8003b2e:	80b9      	strh	r1, [r7, #4]
 8003b30:	4618      	mov	r0, r3
 8003b32:	4b1f      	ldr	r3, [pc, #124]	; (8003bb0 <send_DHCP_DISCOVER+0x408>)
 8003b34:	7919      	ldrb	r1, [r3, #4]
 8003b36:	1813      	adds	r3, r2, r0
 8003b38:	460a      	mov	r2, r1
 8003b3a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[5];
 8003b3e:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	88bb      	ldrh	r3, [r7, #4]
 8003b44:	1c59      	adds	r1, r3, #1
 8003b46:	80b9      	strh	r1, [r7, #4]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	4b19      	ldr	r3, [pc, #100]	; (8003bb0 <send_DHCP_DISCOVER+0x408>)
 8003b4c:	7959      	ldrb	r1, [r3, #5]
 8003b4e:	1813      	adds	r3, r2, r0
 8003b50:	460a      	mov	r2, r1
 8003b52:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec


	MSG->OPT[k++] = dhcpParamRequest;
 8003b56:	4b15      	ldr	r3, [pc, #84]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	88bb      	ldrh	r3, [r7, #4]
 8003b5c:	1c59      	adds	r1, r3, #1
 8003b5e:	80b9      	strh	r1, [r7, #4]
 8003b60:	4413      	add	r3, r2
 8003b62:	2237      	movs	r2, #55	; 0x37
 8003b64:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x06;	// length of request
 8003b68:	4b10      	ldr	r3, [pc, #64]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	88bb      	ldrh	r3, [r7, #4]
 8003b6e:	1c59      	adds	r1, r3, #1
 8003b70:	80b9      	strh	r1, [r7, #4]
 8003b72:	4413      	add	r3, r2
 8003b74:	2206      	movs	r2, #6
 8003b76:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = subnetMask;
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	88bb      	ldrh	r3, [r7, #4]
 8003b80:	1c59      	adds	r1, r3, #1
 8003b82:	80b9      	strh	r1, [r7, #4]
 8003b84:	4413      	add	r3, r2
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = routersOnSubnet;
 8003b8c:	4b07      	ldr	r3, [pc, #28]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	88bb      	ldrh	r3, [r7, #4]
 8003b92:	1c59      	adds	r1, r3, #1
 8003b94:	80b9      	strh	r1, [r7, #4]
 8003b96:	4413      	add	r3, r2
 8003b98:	2203      	movs	r2, #3
 8003b9a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = dns;
 8003b9e:	4b03      	ldr	r3, [pc, #12]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	88bb      	ldrh	r3, [r7, #4]
 8003ba4:	1c59      	adds	r1, r3, #1
 8003ba6:	80b9      	strh	r1, [r7, #4]
 8003ba8:	4413      	add	r3, r2
 8003baa:	e005      	b.n	8003bb8 <send_DHCP_DISCOVER+0x410>
 8003bac:	2000366c 	andcs	r3, r0, ip, ror #12
 8003bb0:	2000012c 	andcs	r0, r0, ip, lsr #2
 8003bb4:	200000a4 	andcs	r0, r0, r4, lsr #1
 8003bb8:	2206      	movs	r2, #6
 8003bba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = domainName;
 8003bbe:	4b2a      	ldr	r3, [pc, #168]	; (8003c68 <send_DHCP_DISCOVER+0x4c0>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	88bb      	ldrh	r3, [r7, #4]
 8003bc4:	1c59      	adds	r1, r3, #1
 8003bc6:	80b9      	strh	r1, [r7, #4]
 8003bc8:	4413      	add	r3, r2
 8003bca:	220f      	movs	r2, #15
 8003bcc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = dhcpT1value;
 8003bd0:	4b25      	ldr	r3, [pc, #148]	; (8003c68 <send_DHCP_DISCOVER+0x4c0>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	88bb      	ldrh	r3, [r7, #4]
 8003bd6:	1c59      	adds	r1, r3, #1
 8003bd8:	80b9      	strh	r1, [r7, #4]
 8003bda:	4413      	add	r3, r2
 8003bdc:	223a      	movs	r2, #58	; 0x3a
 8003bde:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = dhcpT2value;
 8003be2:	4b21      	ldr	r3, [pc, #132]	; (8003c68 <send_DHCP_DISCOVER+0x4c0>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	88bb      	ldrh	r3, [r7, #4]
 8003be8:	1c59      	adds	r1, r3, #1
 8003bea:	80b9      	strh	r1, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	223b      	movs	r2, #59	; 0x3b
 8003bf0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = endOption;
 8003bf4:	4b1c      	ldr	r3, [pc, #112]	; (8003c68 <send_DHCP_DISCOVER+0x4c0>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	88bb      	ldrh	r3, [r7, #4]
 8003bfa:	1c59      	adds	r1, r3, #1
 8003bfc:	80b9      	strh	r1, [r7, #4]
 8003bfe:	4413      	add	r3, r2
 8003c00:	22ff      	movs	r2, #255	; 0xff
 8003c02:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) MSG->OPT[i] = 0;
 8003c06:	88bb      	ldrh	r3, [r7, #4]
 8003c08:	80fb      	strh	r3, [r7, #6]
 8003c0a:	e009      	b.n	8003c20 <send_DHCP_DISCOVER+0x478>
 8003c0c:	4b16      	ldr	r3, [pc, #88]	; (8003c68 <send_DHCP_DISCOVER+0x4c0>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	4413      	add	r3, r2
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	80fb      	strh	r3, [r7, #6]
 8003c20:	88fb      	ldrh	r3, [r7, #6]
 8003c22:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8003c26:	d3f1      	bcc.n	8003c0c <send_DHCP_DISCOVER+0x464>

	// send broadcasting packet
	for (i = 0; i < 4; i++) ip[i] = 255;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	80fb      	strh	r3, [r7, #6]
 8003c2c:	e009      	b.n	8003c42 <send_DHCP_DISCOVER+0x49a>
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	f107 0208 	add.w	r2, r7, #8
 8003c34:	4413      	add	r3, r2
 8003c36:	22ff      	movs	r2, #255	; 0xff
 8003c38:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	80fb      	strh	r3, [r7, #6]
 8003c42:	88fb      	ldrh	r3, [r7, #6]
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d9f2      	bls.n	8003c2e <send_DHCP_DISCOVER+0x486>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)MSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8003c48:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <send_DHCP_DISCOVER+0x4c4>)
 8003c4a:	7818      	ldrb	r0, [r3, #0]
 8003c4c:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <send_DHCP_DISCOVER+0x4c0>)
 8003c4e:	6819      	ldr	r1, [r3, #0]
 8003c50:	463a      	mov	r2, r7
 8003c52:	2343      	movs	r3, #67	; 0x43
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	4613      	mov	r3, r2
 8003c58:	f44f 7209 	mov.w	r2, #548	; 0x224
 8003c5c:	f7fe fa34 	bl	80020c8 <sendto>
}
 8003c60:	bf00      	nop
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	2000366c 	andcs	r3, r0, ip, ror #12
 8003c6c:	20003670 	andcs	r3, r0, r0, ror r6

08003c70 <send_DHCP_REQUEST>:
* Returns    : None.
* Note       : 
*********************************************************************************************************
*/
void send_DHCP_REQUEST(uint8_t *Cip, uint8_t *d_addr)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	827b      	strh	r3, [r7, #18]

	MSG->op = DHCP_BOOTREQUEST;
 8003c7e:	4b56      	ldr	r3, [pc, #344]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2201      	movs	r2, #1
 8003c84:	701a      	strb	r2, [r3, #0]
	MSG->htype = DHCP_HTYPE10MB;
 8003c86:	4b54      	ldr	r3, [pc, #336]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	705a      	strb	r2, [r3, #1]
	MSG->hlen = DHCP_HLENETHERNET;
 8003c8e:	4b52      	ldr	r3, [pc, #328]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2206      	movs	r2, #6
 8003c94:	709a      	strb	r2, [r3, #2]
	MSG->hops = DHCP_HOPS;
 8003c96:	4b50      	ldr	r3, [pc, #320]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	70da      	strb	r2, [r3, #3]
	MSG->xid = DHCP_XID;
 8003c9e:	4b4e      	ldr	r3, [pc, #312]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a4e      	ldr	r2, [pc, #312]	; (8003ddc <send_DHCP_REQUEST+0x16c>)
 8003ca4:	6812      	ldr	r2, [r2, #0]
 8003ca6:	605a      	str	r2, [r3, #4]
	MSG->secs = DHCP_SECS;
 8003ca8:	4b4b      	ldr	r3, [pc, #300]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2200      	movs	r2, #0
 8003cae:	811a      	strh	r2, [r3, #8]
	//MSG->flags = DHCP_FLAGSBROADCAST;
	if (d_addr[0] == 0xff) 	MSG->flags = DHCP_FLAGSBROADCAST;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2bff      	cmp	r3, #255	; 0xff
 8003cb6:	d104      	bne.n	8003cc2 <send_DHCP_REQUEST+0x52>
 8003cb8:	4b47      	ldr	r3, [pc, #284]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2280      	movs	r2, #128	; 0x80
 8003cbe:	815a      	strh	r2, [r3, #10]
 8003cc0:	e003      	b.n	8003cca <send_DHCP_REQUEST+0x5a>
	else MSG->flags = 0;
 8003cc2:	4b45      	ldr	r3, [pc, #276]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	815a      	strh	r2, [r3, #10]
	
	MSG->ciaddr[0] = Cip[0];
 8003cca:	4b43      	ldr	r3, [pc, #268]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	7812      	ldrb	r2, [r2, #0]
 8003cd2:	731a      	strb	r2, [r3, #12]
	MSG->ciaddr[1] = Cip[1];
 8003cd4:	4b40      	ldr	r3, [pc, #256]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	7852      	ldrb	r2, [r2, #1]
 8003cdc:	735a      	strb	r2, [r3, #13]
	MSG->ciaddr[2] = Cip[2];
 8003cde:	4b3e      	ldr	r3, [pc, #248]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	7892      	ldrb	r2, [r2, #2]
 8003ce6:	739a      	strb	r2, [r3, #14]
	MSG->ciaddr[3] = Cip[3];
 8003ce8:	4b3b      	ldr	r3, [pc, #236]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	78d2      	ldrb	r2, [r2, #3]
 8003cf0:	73da      	strb	r2, [r3, #15]

	MSG->yiaddr[0] = 0;
 8003cf2:	4b39      	ldr	r3, [pc, #228]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	741a      	strb	r2, [r3, #16]
	MSG->yiaddr[1] = 0;
 8003cfa:	4b37      	ldr	r3, [pc, #220]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	745a      	strb	r2, [r3, #17]
	MSG->yiaddr[2] = 0;
 8003d02:	4b35      	ldr	r3, [pc, #212]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2200      	movs	r2, #0
 8003d08:	749a      	strb	r2, [r3, #18]
	MSG->yiaddr[3] = 0;
 8003d0a:	4b33      	ldr	r3, [pc, #204]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	74da      	strb	r2, [r3, #19]

	MSG->siaddr[0] = 0;
 8003d12:	4b31      	ldr	r3, [pc, #196]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2200      	movs	r2, #0
 8003d18:	751a      	strb	r2, [r3, #20]
	MSG->siaddr[1] = 0;
 8003d1a:	4b2f      	ldr	r3, [pc, #188]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	755a      	strb	r2, [r3, #21]
	MSG->siaddr[2] = 0;
 8003d22:	4b2d      	ldr	r3, [pc, #180]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2200      	movs	r2, #0
 8003d28:	759a      	strb	r2, [r3, #22]
	MSG->siaddr[3] = 0;
 8003d2a:	4b2b      	ldr	r3, [pc, #172]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	75da      	strb	r2, [r3, #23]

	MSG->giaddr[0] = 0;
 8003d32:	4b29      	ldr	r3, [pc, #164]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	761a      	strb	r2, [r3, #24]
	MSG->giaddr[1] = 0;
 8003d3a:	4b27      	ldr	r3, [pc, #156]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	765a      	strb	r2, [r3, #25]
	MSG->giaddr[2] = 0;
 8003d42:	4b25      	ldr	r3, [pc, #148]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2200      	movs	r2, #0
 8003d48:	769a      	strb	r2, [r3, #26]
	MSG->giaddr[3] = 0;
 8003d4a:	4b23      	ldr	r3, [pc, #140]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	76da      	strb	r2, [r3, #27]

	MSG->chaddr[0] = wizchip_mac[0];
 8003d52:	4b21      	ldr	r3, [pc, #132]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a22      	ldr	r2, [pc, #136]	; (8003de0 <send_DHCP_REQUEST+0x170>)
 8003d58:	7812      	ldrb	r2, [r2, #0]
 8003d5a:	771a      	strb	r2, [r3, #28]
	MSG->chaddr[1] = wizchip_mac[1];
 8003d5c:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1f      	ldr	r2, [pc, #124]	; (8003de0 <send_DHCP_REQUEST+0x170>)
 8003d62:	7852      	ldrb	r2, [r2, #1]
 8003d64:	775a      	strb	r2, [r3, #29]
	MSG->chaddr[2] = wizchip_mac[2];
 8003d66:	4b1c      	ldr	r3, [pc, #112]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1d      	ldr	r2, [pc, #116]	; (8003de0 <send_DHCP_REQUEST+0x170>)
 8003d6c:	7892      	ldrb	r2, [r2, #2]
 8003d6e:	779a      	strb	r2, [r3, #30]
	MSG->chaddr[3] = wizchip_mac[3];
 8003d70:	4b19      	ldr	r3, [pc, #100]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1a      	ldr	r2, [pc, #104]	; (8003de0 <send_DHCP_REQUEST+0x170>)
 8003d76:	78d2      	ldrb	r2, [r2, #3]
 8003d78:	77da      	strb	r2, [r3, #31]
	MSG->chaddr[4] = wizchip_mac[4];
 8003d7a:	4b17      	ldr	r3, [pc, #92]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a18      	ldr	r2, [pc, #96]	; (8003de0 <send_DHCP_REQUEST+0x170>)
 8003d80:	7912      	ldrb	r2, [r2, #4]
 8003d82:	f883 2020 	strb.w	r2, [r3, #32]
	MSG->chaddr[5] = wizchip_mac[5];
 8003d86:	4b14      	ldr	r3, [pc, #80]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a15      	ldr	r2, [pc, #84]	; (8003de0 <send_DHCP_REQUEST+0x170>)
 8003d8c:	7952      	ldrb	r2, [r2, #5]
 8003d8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++) MSG->chaddr[i] = 0;
 8003d92:	2306      	movs	r3, #6
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	e009      	b.n	8003dac <send_DHCP_REQUEST+0x13c>
 8003d98:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	4413      	add	r3, r2
 8003da0:	331c      	adds	r3, #28
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	3301      	adds	r3, #1
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2b0f      	cmp	r3, #15
 8003db0:	ddf2      	ble.n	8003d98 <send_DHCP_REQUEST+0x128>
	for (i = 0; i < 64; i++) MSG->sname[i] = 0;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	e009      	b.n	8003dcc <send_DHCP_REQUEST+0x15c>
 8003db8:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	332c      	adds	r3, #44	; 0x2c
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	2b3f      	cmp	r3, #63	; 0x3f
 8003dd0:	ddf2      	ble.n	8003db8 <send_DHCP_REQUEST+0x148>
	for (i = 0; i < 128; i++) MSG->file[i] = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	e00f      	b.n	8003df8 <send_DHCP_REQUEST+0x188>
 8003dd8:	2000366c 	andcs	r3, r0, ip, ror #12
 8003ddc:	20003654 	andcs	r3, r0, r4, asr r6
 8003de0:	2000012c 	andcs	r0, r0, ip, lsr #2
 8003de4:	4bab      	ldr	r3, [pc, #684]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	4413      	add	r3, r2
 8003dec:	336c      	adds	r3, #108	; 0x6c
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	3301      	adds	r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8003dfc:	ddf2      	ble.n	8003de4 <send_DHCP_REQUEST+0x174>

	// MAGIC_COOKIE 
	MSG->OPT[k++] = 0x63;
 8003dfe:	4ba5      	ldr	r3, [pc, #660]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	8a7b      	ldrh	r3, [r7, #18]
 8003e04:	1c59      	adds	r1, r3, #1
 8003e06:	8279      	strh	r1, [r7, #18]
 8003e08:	4413      	add	r3, r2
 8003e0a:	2263      	movs	r2, #99	; 0x63
 8003e0c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x82;
 8003e10:	4ba0      	ldr	r3, [pc, #640]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	8a7b      	ldrh	r3, [r7, #18]
 8003e16:	1c59      	adds	r1, r3, #1
 8003e18:	8279      	strh	r1, [r7, #18]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	2282      	movs	r2, #130	; 0x82
 8003e1e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x53;
 8003e22:	4b9c      	ldr	r3, [pc, #624]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	8a7b      	ldrh	r3, [r7, #18]
 8003e28:	1c59      	adds	r1, r3, #1
 8003e2a:	8279      	strh	r1, [r7, #18]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	2253      	movs	r2, #83	; 0x53
 8003e30:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x63;
 8003e34:	4b97      	ldr	r3, [pc, #604]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	8a7b      	ldrh	r3, [r7, #18]
 8003e3a:	1c59      	adds	r1, r3, #1
 8003e3c:	8279      	strh	r1, [r7, #18]
 8003e3e:	4413      	add	r3, r2
 8003e40:	2263      	movs	r2, #99	; 0x63
 8003e42:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	// Option Request Param.
	MSG->OPT[k++] = dhcpMessageType;
 8003e46:	4b93      	ldr	r3, [pc, #588]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	8a7b      	ldrh	r3, [r7, #18]
 8003e4c:	1c59      	adds	r1, r3, #1
 8003e4e:	8279      	strh	r1, [r7, #18]
 8003e50:	4413      	add	r3, r2
 8003e52:	2235      	movs	r2, #53	; 0x35
 8003e54:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x01;
 8003e58:	4b8e      	ldr	r3, [pc, #568]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	8a7b      	ldrh	r3, [r7, #18]
 8003e5e:	1c59      	adds	r1, r3, #1
 8003e60:	8279      	strh	r1, [r7, #18]
 8003e62:	4413      	add	r3, r2
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_REQUEST;
 8003e6a:	4b8a      	ldr	r3, [pc, #552]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	8a7b      	ldrh	r3, [r7, #18]
 8003e70:	1c59      	adds	r1, r3, #1
 8003e72:	8279      	strh	r1, [r7, #18]
 8003e74:	4413      	add	r3, r2
 8003e76:	2203      	movs	r2, #3
 8003e78:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	MSG->OPT[k++] = dhcpClientIdentifier;
 8003e7c:	4b85      	ldr	r3, [pc, #532]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	8a7b      	ldrh	r3, [r7, #18]
 8003e82:	1c59      	adds	r1, r3, #1
 8003e84:	8279      	strh	r1, [r7, #18]
 8003e86:	4413      	add	r3, r2
 8003e88:	223d      	movs	r2, #61	; 0x3d
 8003e8a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x07;
 8003e8e:	4b81      	ldr	r3, [pc, #516]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	8a7b      	ldrh	r3, [r7, #18]
 8003e94:	1c59      	adds	r1, r3, #1
 8003e96:	8279      	strh	r1, [r7, #18]
 8003e98:	4413      	add	r3, r2
 8003e9a:	2207      	movs	r2, #7
 8003e9c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x01;
 8003ea0:	4b7c      	ldr	r3, [pc, #496]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	8a7b      	ldrh	r3, [r7, #18]
 8003ea6:	1c59      	adds	r1, r3, #1
 8003ea8:	8279      	strh	r1, [r7, #18]
 8003eaa:	4413      	add	r3, r2
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[0];
 8003eb2:	4b78      	ldr	r3, [pc, #480]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	8a7b      	ldrh	r3, [r7, #18]
 8003eb8:	1c59      	adds	r1, r3, #1
 8003eba:	8279      	strh	r1, [r7, #18]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	4b76      	ldr	r3, [pc, #472]	; (8004098 <send_DHCP_REQUEST+0x428>)
 8003ec0:	7819      	ldrb	r1, [r3, #0]
 8003ec2:	1813      	adds	r3, r2, r0
 8003ec4:	460a      	mov	r2, r1
 8003ec6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[1];
 8003eca:	4b72      	ldr	r3, [pc, #456]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	8a7b      	ldrh	r3, [r7, #18]
 8003ed0:	1c59      	adds	r1, r3, #1
 8003ed2:	8279      	strh	r1, [r7, #18]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	4b70      	ldr	r3, [pc, #448]	; (8004098 <send_DHCP_REQUEST+0x428>)
 8003ed8:	7859      	ldrb	r1, [r3, #1]
 8003eda:	1813      	adds	r3, r2, r0
 8003edc:	460a      	mov	r2, r1
 8003ede:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[2];
 8003ee2:	4b6c      	ldr	r3, [pc, #432]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	8a7b      	ldrh	r3, [r7, #18]
 8003ee8:	1c59      	adds	r1, r3, #1
 8003eea:	8279      	strh	r1, [r7, #18]
 8003eec:	4618      	mov	r0, r3
 8003eee:	4b6a      	ldr	r3, [pc, #424]	; (8004098 <send_DHCP_REQUEST+0x428>)
 8003ef0:	7899      	ldrb	r1, [r3, #2]
 8003ef2:	1813      	adds	r3, r2, r0
 8003ef4:	460a      	mov	r2, r1
 8003ef6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[3];
 8003efa:	4b66      	ldr	r3, [pc, #408]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	8a7b      	ldrh	r3, [r7, #18]
 8003f00:	1c59      	adds	r1, r3, #1
 8003f02:	8279      	strh	r1, [r7, #18]
 8003f04:	4618      	mov	r0, r3
 8003f06:	4b64      	ldr	r3, [pc, #400]	; (8004098 <send_DHCP_REQUEST+0x428>)
 8003f08:	78d9      	ldrb	r1, [r3, #3]
 8003f0a:	1813      	adds	r3, r2, r0
 8003f0c:	460a      	mov	r2, r1
 8003f0e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[4];
 8003f12:	4b60      	ldr	r3, [pc, #384]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	8a7b      	ldrh	r3, [r7, #18]
 8003f18:	1c59      	adds	r1, r3, #1
 8003f1a:	8279      	strh	r1, [r7, #18]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	4b5e      	ldr	r3, [pc, #376]	; (8004098 <send_DHCP_REQUEST+0x428>)
 8003f20:	7919      	ldrb	r1, [r3, #4]
 8003f22:	1813      	adds	r3, r2, r0
 8003f24:	460a      	mov	r2, r1
 8003f26:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[5];
 8003f2a:	4b5a      	ldr	r3, [pc, #360]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	8a7b      	ldrh	r3, [r7, #18]
 8003f30:	1c59      	adds	r1, r3, #1
 8003f32:	8279      	strh	r1, [r7, #18]
 8003f34:	4618      	mov	r0, r3
 8003f36:	4b58      	ldr	r3, [pc, #352]	; (8004098 <send_DHCP_REQUEST+0x428>)
 8003f38:	7959      	ldrb	r1, [r3, #5]
 8003f3a:	1813      	adds	r3, r2, r0
 8003f3c:	460a      	mov	r2, r1
 8003f3e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	if (d_addr[0] == 0xff) {
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2bff      	cmp	r3, #255	; 0xff
 8003f48:	f040 8084 	bne.w	8004054 <send_DHCP_REQUEST+0x3e4>
		MSG->OPT[k++] = dhcpRequestedIPaddr;
 8003f4c:	4b51      	ldr	r3, [pc, #324]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	8a7b      	ldrh	r3, [r7, #18]
 8003f52:	1c59      	adds	r1, r3, #1
 8003f54:	8279      	strh	r1, [r7, #18]
 8003f56:	4413      	add	r3, r2
 8003f58:	2232      	movs	r2, #50	; 0x32
 8003f5a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = 0x04;
 8003f5e:	4b4d      	ldr	r3, [pc, #308]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	8a7b      	ldrh	r3, [r7, #18]
 8003f64:	1c59      	adds	r1, r3, #1
 8003f66:	8279      	strh	r1, [r7, #18]
 8003f68:	4413      	add	r3, r2
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_allocated_ip[0];
 8003f70:	4b48      	ldr	r3, [pc, #288]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	8a7b      	ldrh	r3, [r7, #18]
 8003f76:	1c59      	adds	r1, r3, #1
 8003f78:	8279      	strh	r1, [r7, #18]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	4b47      	ldr	r3, [pc, #284]	; (800409c <send_DHCP_REQUEST+0x42c>)
 8003f7e:	7819      	ldrb	r1, [r3, #0]
 8003f80:	1813      	adds	r3, r2, r0
 8003f82:	460a      	mov	r2, r1
 8003f84:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_allocated_ip[1];
 8003f88:	4b42      	ldr	r3, [pc, #264]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	8a7b      	ldrh	r3, [r7, #18]
 8003f8e:	1c59      	adds	r1, r3, #1
 8003f90:	8279      	strh	r1, [r7, #18]
 8003f92:	4618      	mov	r0, r3
 8003f94:	4b41      	ldr	r3, [pc, #260]	; (800409c <send_DHCP_REQUEST+0x42c>)
 8003f96:	7859      	ldrb	r1, [r3, #1]
 8003f98:	1813      	adds	r3, r2, r0
 8003f9a:	460a      	mov	r2, r1
 8003f9c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_allocated_ip[2];
 8003fa0:	4b3c      	ldr	r3, [pc, #240]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	8a7b      	ldrh	r3, [r7, #18]
 8003fa6:	1c59      	adds	r1, r3, #1
 8003fa8:	8279      	strh	r1, [r7, #18]
 8003faa:	4618      	mov	r0, r3
 8003fac:	4b3b      	ldr	r3, [pc, #236]	; (800409c <send_DHCP_REQUEST+0x42c>)
 8003fae:	7899      	ldrb	r1, [r3, #2]
 8003fb0:	1813      	adds	r3, r2, r0
 8003fb2:	460a      	mov	r2, r1
 8003fb4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_allocated_ip[3];
 8003fb8:	4b36      	ldr	r3, [pc, #216]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	8a7b      	ldrh	r3, [r7, #18]
 8003fbe:	1c59      	adds	r1, r3, #1
 8003fc0:	8279      	strh	r1, [r7, #18]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	4b35      	ldr	r3, [pc, #212]	; (800409c <send_DHCP_REQUEST+0x42c>)
 8003fc6:	78d9      	ldrb	r1, [r3, #3]
 8003fc8:	1813      	adds	r3, r2, r0
 8003fca:	460a      	mov	r2, r1
 8003fcc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		MSG->OPT[k++] = dhcpServerIdentifier;
 8003fd0:	4b30      	ldr	r3, [pc, #192]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	8a7b      	ldrh	r3, [r7, #18]
 8003fd6:	1c59      	adds	r1, r3, #1
 8003fd8:	8279      	strh	r1, [r7, #18]
 8003fda:	4413      	add	r3, r2
 8003fdc:	2236      	movs	r2, #54	; 0x36
 8003fde:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = 0x04;
 8003fe2:	4b2c      	ldr	r3, [pc, #176]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	8a7b      	ldrh	r3, [r7, #18]
 8003fe8:	1c59      	adds	r1, r3, #1
 8003fea:	8279      	strh	r1, [r7, #18]
 8003fec:	4413      	add	r3, r2
 8003fee:	2204      	movs	r2, #4
 8003ff0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_SIP[0];
 8003ff4:	4b27      	ldr	r3, [pc, #156]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	8a7b      	ldrh	r3, [r7, #18]
 8003ffa:	1c59      	adds	r1, r3, #1
 8003ffc:	8279      	strh	r1, [r7, #18]
 8003ffe:	4618      	mov	r0, r3
 8004000:	4b27      	ldr	r3, [pc, #156]	; (80040a0 <send_DHCP_REQUEST+0x430>)
 8004002:	7819      	ldrb	r1, [r3, #0]
 8004004:	1813      	adds	r3, r2, r0
 8004006:	460a      	mov	r2, r1
 8004008:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_SIP[1];
 800400c:	4b21      	ldr	r3, [pc, #132]	; (8004094 <send_DHCP_REQUEST+0x424>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	8a7b      	ldrh	r3, [r7, #18]
 8004012:	1c59      	adds	r1, r3, #1
 8004014:	8279      	strh	r1, [r7, #18]
 8004016:	4618      	mov	r0, r3
 8004018:	4b21      	ldr	r3, [pc, #132]	; (80040a0 <send_DHCP_REQUEST+0x430>)
 800401a:	7859      	ldrb	r1, [r3, #1]
 800401c:	1813      	adds	r3, r2, r0
 800401e:	460a      	mov	r2, r1
 8004020:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_SIP[2];
 8004024:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	8a7b      	ldrh	r3, [r7, #18]
 800402a:	1c59      	adds	r1, r3, #1
 800402c:	8279      	strh	r1, [r7, #18]
 800402e:	4618      	mov	r0, r3
 8004030:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <send_DHCP_REQUEST+0x430>)
 8004032:	7899      	ldrb	r1, [r3, #2]
 8004034:	1813      	adds	r3, r2, r0
 8004036:	460a      	mov	r2, r1
 8004038:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_SIP[3];
 800403c:	4b15      	ldr	r3, [pc, #84]	; (8004094 <send_DHCP_REQUEST+0x424>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	8a7b      	ldrh	r3, [r7, #18]
 8004042:	1c59      	adds	r1, r3, #1
 8004044:	8279      	strh	r1, [r7, #18]
 8004046:	4618      	mov	r0, r3
 8004048:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <send_DHCP_REQUEST+0x430>)
 800404a:	78d9      	ldrb	r1, [r3, #3]
 800404c:	1813      	adds	r3, r2, r0
 800404e:	460a      	mov	r2, r1
 8004050:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	MSG->OPT[k++] = hostName;
 8004054:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	8a7b      	ldrh	r3, [r7, #18]
 800405a:	1c59      	adds	r1, r3, #1
 800405c:	8279      	strh	r1, [r7, #18]
 800405e:	4413      	add	r3, r2
 8004060:	220c      	movs	r2, #12
 8004062:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 9; // length of hostname
 8004066:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	8a7b      	ldrh	r3, [r7, #18]
 800406c:	1c59      	adds	r1, r3, #1
 800406e:	8279      	strh	r1, [r7, #18]
 8004070:	4413      	add	r3, r2
 8004072:	2209      	movs	r2, #9
 8004074:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[0];
 8004078:	4b06      	ldr	r3, [pc, #24]	; (8004094 <send_DHCP_REQUEST+0x424>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	8a7b      	ldrh	r3, [r7, #18]
 800407e:	1c59      	adds	r1, r3, #1
 8004080:	8279      	strh	r1, [r7, #18]
 8004082:	4618      	mov	r0, r3
 8004084:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <send_DHCP_REQUEST+0x434>)
 8004086:	7819      	ldrb	r1, [r3, #0]
 8004088:	1813      	adds	r3, r2, r0
 800408a:	460a      	mov	r2, r1
 800408c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8004090:	e00a      	b.n	80040a8 <send_DHCP_REQUEST+0x438>
 8004092:	bf00      	nop
 8004094:	2000366c 	andcs	r3, r0, ip, ror #12
 8004098:	2000012c 	andcs	r0, r0, ip, lsr #2
 800409c:	2000011c 	andcs	r0, r0, ip, lsl r1
 80040a0:	20003658 	andcs	r3, r0, r8, asr r6
 80040a4:	200000a4 	andcs	r0, r0, r4, lsr #1
	MSG->OPT[k++] = HOST_NAME[1];
 80040a8:	4b7b      	ldr	r3, [pc, #492]	; (8004298 <send_DHCP_REQUEST+0x628>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	8a7b      	ldrh	r3, [r7, #18]
 80040ae:	1c59      	adds	r1, r3, #1
 80040b0:	8279      	strh	r1, [r7, #18]
 80040b2:	4618      	mov	r0, r3
 80040b4:	4b79      	ldr	r3, [pc, #484]	; (800429c <send_DHCP_REQUEST+0x62c>)
 80040b6:	7859      	ldrb	r1, [r3, #1]
 80040b8:	1813      	adds	r3, r2, r0
 80040ba:	460a      	mov	r2, r1
 80040bc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[2];
 80040c0:	4b75      	ldr	r3, [pc, #468]	; (8004298 <send_DHCP_REQUEST+0x628>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	8a7b      	ldrh	r3, [r7, #18]
 80040c6:	1c59      	adds	r1, r3, #1
 80040c8:	8279      	strh	r1, [r7, #18]
 80040ca:	4618      	mov	r0, r3
 80040cc:	4b73      	ldr	r3, [pc, #460]	; (800429c <send_DHCP_REQUEST+0x62c>)
 80040ce:	7899      	ldrb	r1, [r3, #2]
 80040d0:	1813      	adds	r3, r2, r0
 80040d2:	460a      	mov	r2, r1
 80040d4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[3];
 80040d8:	4b6f      	ldr	r3, [pc, #444]	; (8004298 <send_DHCP_REQUEST+0x628>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	8a7b      	ldrh	r3, [r7, #18]
 80040de:	1c59      	adds	r1, r3, #1
 80040e0:	8279      	strh	r1, [r7, #18]
 80040e2:	4618      	mov	r0, r3
 80040e4:	4b6d      	ldr	r3, [pc, #436]	; (800429c <send_DHCP_REQUEST+0x62c>)
 80040e6:	78d9      	ldrb	r1, [r3, #3]
 80040e8:	1813      	adds	r3, r2, r0
 80040ea:	460a      	mov	r2, r1
 80040ec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[4];
 80040f0:	4b69      	ldr	r3, [pc, #420]	; (8004298 <send_DHCP_REQUEST+0x628>)
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	8a7b      	ldrh	r3, [r7, #18]
 80040f6:	1c59      	adds	r1, r3, #1
 80040f8:	8279      	strh	r1, [r7, #18]
 80040fa:	4618      	mov	r0, r3
 80040fc:	4b67      	ldr	r3, [pc, #412]	; (800429c <send_DHCP_REQUEST+0x62c>)
 80040fe:	7919      	ldrb	r1, [r3, #4]
 8004100:	1813      	adds	r3, r2, r0
 8004102:	460a      	mov	r2, r1
 8004104:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[5];
 8004108:	4b63      	ldr	r3, [pc, #396]	; (8004298 <send_DHCP_REQUEST+0x628>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	8a7b      	ldrh	r3, [r7, #18]
 800410e:	1c59      	adds	r1, r3, #1
 8004110:	8279      	strh	r1, [r7, #18]
 8004112:	4618      	mov	r0, r3
 8004114:	4b61      	ldr	r3, [pc, #388]	; (800429c <send_DHCP_REQUEST+0x62c>)
 8004116:	7959      	ldrb	r1, [r3, #5]
 8004118:	1813      	adds	r3, r2, r0
 800411a:	460a      	mov	r2, r1
 800411c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[3];
 8004120:	4b5d      	ldr	r3, [pc, #372]	; (8004298 <send_DHCP_REQUEST+0x628>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	8a7b      	ldrh	r3, [r7, #18]
 8004126:	1c59      	adds	r1, r3, #1
 8004128:	8279      	strh	r1, [r7, #18]
 800412a:	4618      	mov	r0, r3
 800412c:	4b5c      	ldr	r3, [pc, #368]	; (80042a0 <send_DHCP_REQUEST+0x630>)
 800412e:	78d9      	ldrb	r1, [r3, #3]
 8004130:	1813      	adds	r3, r2, r0
 8004132:	460a      	mov	r2, r1
 8004134:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[4];
 8004138:	4b57      	ldr	r3, [pc, #348]	; (8004298 <send_DHCP_REQUEST+0x628>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	8a7b      	ldrh	r3, [r7, #18]
 800413e:	1c59      	adds	r1, r3, #1
 8004140:	8279      	strh	r1, [r7, #18]
 8004142:	4618      	mov	r0, r3
 8004144:	4b56      	ldr	r3, [pc, #344]	; (80042a0 <send_DHCP_REQUEST+0x630>)
 8004146:	7919      	ldrb	r1, [r3, #4]
 8004148:	1813      	adds	r3, r2, r0
 800414a:	460a      	mov	r2, r1
 800414c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[5];
 8004150:	4b51      	ldr	r3, [pc, #324]	; (8004298 <send_DHCP_REQUEST+0x628>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	8a7b      	ldrh	r3, [r7, #18]
 8004156:	1c59      	adds	r1, r3, #1
 8004158:	8279      	strh	r1, [r7, #18]
 800415a:	4618      	mov	r0, r3
 800415c:	4b50      	ldr	r3, [pc, #320]	; (80042a0 <send_DHCP_REQUEST+0x630>)
 800415e:	7959      	ldrb	r1, [r3, #5]
 8004160:	1813      	adds	r3, r2, r0
 8004162:	460a      	mov	r2, r1
 8004164:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	MSG->OPT[k++] = dhcpParamRequest;
 8004168:	4b4b      	ldr	r3, [pc, #300]	; (8004298 <send_DHCP_REQUEST+0x628>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	8a7b      	ldrh	r3, [r7, #18]
 800416e:	1c59      	adds	r1, r3, #1
 8004170:	8279      	strh	r1, [r7, #18]
 8004172:	4413      	add	r3, r2
 8004174:	2237      	movs	r2, #55	; 0x37
 8004176:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x08;
 800417a:	4b47      	ldr	r3, [pc, #284]	; (8004298 <send_DHCP_REQUEST+0x628>)
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	8a7b      	ldrh	r3, [r7, #18]
 8004180:	1c59      	adds	r1, r3, #1
 8004182:	8279      	strh	r1, [r7, #18]
 8004184:	4413      	add	r3, r2
 8004186:	2208      	movs	r2, #8
 8004188:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = subnetMask;
 800418c:	4b42      	ldr	r3, [pc, #264]	; (8004298 <send_DHCP_REQUEST+0x628>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	8a7b      	ldrh	r3, [r7, #18]
 8004192:	1c59      	adds	r1, r3, #1
 8004194:	8279      	strh	r1, [r7, #18]
 8004196:	4413      	add	r3, r2
 8004198:	2201      	movs	r2, #1
 800419a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = routersOnSubnet;
 800419e:	4b3e      	ldr	r3, [pc, #248]	; (8004298 <send_DHCP_REQUEST+0x628>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	8a7b      	ldrh	r3, [r7, #18]
 80041a4:	1c59      	adds	r1, r3, #1
 80041a6:	8279      	strh	r1, [r7, #18]
 80041a8:	4413      	add	r3, r2
 80041aa:	2203      	movs	r2, #3
 80041ac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = dns;
 80041b0:	4b39      	ldr	r3, [pc, #228]	; (8004298 <send_DHCP_REQUEST+0x628>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	8a7b      	ldrh	r3, [r7, #18]
 80041b6:	1c59      	adds	r1, r3, #1
 80041b8:	8279      	strh	r1, [r7, #18]
 80041ba:	4413      	add	r3, r2
 80041bc:	2206      	movs	r2, #6
 80041be:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = domainName;
 80041c2:	4b35      	ldr	r3, [pc, #212]	; (8004298 <send_DHCP_REQUEST+0x628>)
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	8a7b      	ldrh	r3, [r7, #18]
 80041c8:	1c59      	adds	r1, r3, #1
 80041ca:	8279      	strh	r1, [r7, #18]
 80041cc:	4413      	add	r3, r2
 80041ce:	220f      	movs	r2, #15
 80041d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = dhcpT1value;
 80041d4:	4b30      	ldr	r3, [pc, #192]	; (8004298 <send_DHCP_REQUEST+0x628>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	8a7b      	ldrh	r3, [r7, #18]
 80041da:	1c59      	adds	r1, r3, #1
 80041dc:	8279      	strh	r1, [r7, #18]
 80041de:	4413      	add	r3, r2
 80041e0:	223a      	movs	r2, #58	; 0x3a
 80041e2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = dhcpT2value;
 80041e6:	4b2c      	ldr	r3, [pc, #176]	; (8004298 <send_DHCP_REQUEST+0x628>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	8a7b      	ldrh	r3, [r7, #18]
 80041ec:	1c59      	adds	r1, r3, #1
 80041ee:	8279      	strh	r1, [r7, #18]
 80041f0:	4413      	add	r3, r2
 80041f2:	223b      	movs	r2, #59	; 0x3b
 80041f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = performRouterDiscovery;
 80041f8:	4b27      	ldr	r3, [pc, #156]	; (8004298 <send_DHCP_REQUEST+0x628>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	8a7b      	ldrh	r3, [r7, #18]
 80041fe:	1c59      	adds	r1, r3, #1
 8004200:	8279      	strh	r1, [r7, #18]
 8004202:	4413      	add	r3, r2
 8004204:	221f      	movs	r2, #31
 8004206:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = staticRoute;
 800420a:	4b23      	ldr	r3, [pc, #140]	; (8004298 <send_DHCP_REQUEST+0x628>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	8a7b      	ldrh	r3, [r7, #18]
 8004210:	1c59      	adds	r1, r3, #1
 8004212:	8279      	strh	r1, [r7, #18]
 8004214:	4413      	add	r3, r2
 8004216:	2221      	movs	r2, #33	; 0x21
 8004218:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = endOption;
 800421c:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <send_DHCP_REQUEST+0x628>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	8a7b      	ldrh	r3, [r7, #18]
 8004222:	1c59      	adds	r1, r3, #1
 8004224:	8279      	strh	r1, [r7, #18]
 8004226:	4413      	add	r3, r2
 8004228:	22ff      	movs	r2, #255	; 0xff
 800422a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) MSG->OPT[i] = 0;
 800422e:	8a7b      	ldrh	r3, [r7, #18]
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	e009      	b.n	8004248 <send_DHCP_REQUEST+0x5d8>
 8004234:	4b18      	ldr	r3, [pc, #96]	; (8004298 <send_DHCP_REQUEST+0x628>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	4413      	add	r3, r2
 800423c:	33ec      	adds	r3, #236	; 0xec
 800423e:	2200      	movs	r2, #0
 8004240:	701a      	strb	r2, [r3, #0]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	3301      	adds	r3, #1
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 800424e:	dbf1      	blt.n	8004234 <send_DHCP_REQUEST+0x5c4>

	// send broadcasting packet
	for (i = 0; i < 4; i++) ip[i] = d_addr[i];
 8004250:	2300      	movs	r3, #0
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	e00c      	b.n	8004270 <send_DHCP_REQUEST+0x600>
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	4413      	add	r3, r2
 800425c:	7819      	ldrb	r1, [r3, #0]
 800425e:	f107 020c 	add.w	r2, r7, #12
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	4413      	add	r3, r2
 8004266:	460a      	mov	r2, r1
 8004268:	701a      	strb	r2, [r3, #0]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	3301      	adds	r3, #1
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2b03      	cmp	r3, #3
 8004274:	ddef      	ble.n	8004256 <send_DHCP_REQUEST+0x5e6>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)MSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8004276:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <send_DHCP_REQUEST+0x634>)
 8004278:	7818      	ldrb	r0, [r3, #0]
 800427a:	4b07      	ldr	r3, [pc, #28]	; (8004298 <send_DHCP_REQUEST+0x628>)
 800427c:	6819      	ldr	r1, [r3, #0]
 800427e:	f107 020c 	add.w	r2, r7, #12
 8004282:	2343      	movs	r3, #67	; 0x43
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	4613      	mov	r3, r2
 8004288:	f44f 7209 	mov.w	r2, #548	; 0x224
 800428c:	f7fd ff1c 	bl	80020c8 <sendto>

}
 8004290:	bf00      	nop
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	2000366c 	andcs	r3, r0, ip, ror #12
 800429c:	200000a4 	andcs	r0, r0, r4, lsr #1
 80042a0:	2000012c 	andcs	r0, r0, ip, lsr #2
 80042a4:	20003670 	andcs	r3, r0, r0, ror r6

080042a8 <send_DHCP_DECLINE>:
* Returns    : None.
* Note       : 
*********************************************************************************************************
*/
void send_DHCP_DECLINE(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	817b      	strh	r3, [r7, #10]

	MSG->op = DHCP_BOOTREQUEST;
 80042b2:	4b50      	ldr	r3, [pc, #320]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2201      	movs	r2, #1
 80042b8:	701a      	strb	r2, [r3, #0]
	MSG->htype = DHCP_HTYPE10MB;
 80042ba:	4b4e      	ldr	r3, [pc, #312]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2201      	movs	r2, #1
 80042c0:	705a      	strb	r2, [r3, #1]
	MSG->hlen = DHCP_HLENETHERNET;
 80042c2:	4b4c      	ldr	r3, [pc, #304]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2206      	movs	r2, #6
 80042c8:	709a      	strb	r2, [r3, #2]
	MSG->hops = DHCP_HOPS;
 80042ca:	4b4a      	ldr	r3, [pc, #296]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2200      	movs	r2, #0
 80042d0:	70da      	strb	r2, [r3, #3]
	MSG->xid = DHCP_XID;
 80042d2:	4b48      	ldr	r3, [pc, #288]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a48      	ldr	r2, [pc, #288]	; (80043f8 <send_DHCP_DECLINE+0x150>)
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	605a      	str	r2, [r3, #4]
	MSG->secs = DHCP_SECS;
 80042dc:	4b45      	ldr	r3, [pc, #276]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2200      	movs	r2, #0
 80042e2:	811a      	strh	r2, [r3, #8]
	MSG->flags = 0;
 80042e4:	4b43      	ldr	r3, [pc, #268]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2200      	movs	r2, #0
 80042ea:	815a      	strh	r2, [r3, #10]

	MSG->ciaddr[0] = 0;
 80042ec:	4b41      	ldr	r3, [pc, #260]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2200      	movs	r2, #0
 80042f2:	731a      	strb	r2, [r3, #12]
	MSG->ciaddr[1] = 0;
 80042f4:	4b3f      	ldr	r3, [pc, #252]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2200      	movs	r2, #0
 80042fa:	735a      	strb	r2, [r3, #13]
	MSG->ciaddr[2] = 0;
 80042fc:	4b3d      	ldr	r3, [pc, #244]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2200      	movs	r2, #0
 8004302:	739a      	strb	r2, [r3, #14]
	MSG->ciaddr[3] = 0;
 8004304:	4b3b      	ldr	r3, [pc, #236]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2200      	movs	r2, #0
 800430a:	73da      	strb	r2, [r3, #15]

	MSG->yiaddr[0] = 0;
 800430c:	4b39      	ldr	r3, [pc, #228]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2200      	movs	r2, #0
 8004312:	741a      	strb	r2, [r3, #16]
	MSG->yiaddr[1] = 0;
 8004314:	4b37      	ldr	r3, [pc, #220]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2200      	movs	r2, #0
 800431a:	745a      	strb	r2, [r3, #17]
	MSG->yiaddr[2] = 0;
 800431c:	4b35      	ldr	r3, [pc, #212]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2200      	movs	r2, #0
 8004322:	749a      	strb	r2, [r3, #18]
	MSG->yiaddr[3] = 0;
 8004324:	4b33      	ldr	r3, [pc, #204]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2200      	movs	r2, #0
 800432a:	74da      	strb	r2, [r3, #19]

	MSG->siaddr[0] = 0;
 800432c:	4b31      	ldr	r3, [pc, #196]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2200      	movs	r2, #0
 8004332:	751a      	strb	r2, [r3, #20]
	MSG->siaddr[1] = 0;
 8004334:	4b2f      	ldr	r3, [pc, #188]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2200      	movs	r2, #0
 800433a:	755a      	strb	r2, [r3, #21]
	MSG->siaddr[2] = 0;
 800433c:	4b2d      	ldr	r3, [pc, #180]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2200      	movs	r2, #0
 8004342:	759a      	strb	r2, [r3, #22]
	MSG->siaddr[3] = 0;
 8004344:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2200      	movs	r2, #0
 800434a:	75da      	strb	r2, [r3, #23]

	MSG->giaddr[0] = 0;
 800434c:	4b29      	ldr	r3, [pc, #164]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2200      	movs	r2, #0
 8004352:	761a      	strb	r2, [r3, #24]
	MSG->giaddr[1] = 0;
 8004354:	4b27      	ldr	r3, [pc, #156]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2200      	movs	r2, #0
 800435a:	765a      	strb	r2, [r3, #25]
	MSG->giaddr[2] = 0;
 800435c:	4b25      	ldr	r3, [pc, #148]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2200      	movs	r2, #0
 8004362:	769a      	strb	r2, [r3, #26]
	MSG->giaddr[3] = 0;
 8004364:	4b23      	ldr	r3, [pc, #140]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2200      	movs	r2, #0
 800436a:	76da      	strb	r2, [r3, #27]

	MSG->chaddr[0] = wizchip_mac[0];
 800436c:	4b21      	ldr	r3, [pc, #132]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a22      	ldr	r2, [pc, #136]	; (80043fc <send_DHCP_DECLINE+0x154>)
 8004372:	7812      	ldrb	r2, [r2, #0]
 8004374:	771a      	strb	r2, [r3, #28]
	MSG->chaddr[1] = wizchip_mac[1];
 8004376:	4b1f      	ldr	r3, [pc, #124]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a20      	ldr	r2, [pc, #128]	; (80043fc <send_DHCP_DECLINE+0x154>)
 800437c:	7852      	ldrb	r2, [r2, #1]
 800437e:	775a      	strb	r2, [r3, #29]
	MSG->chaddr[2] = wizchip_mac[2];
 8004380:	4b1c      	ldr	r3, [pc, #112]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1d      	ldr	r2, [pc, #116]	; (80043fc <send_DHCP_DECLINE+0x154>)
 8004386:	7892      	ldrb	r2, [r2, #2]
 8004388:	779a      	strb	r2, [r3, #30]
	MSG->chaddr[3] = wizchip_mac[3];
 800438a:	4b1a      	ldr	r3, [pc, #104]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <send_DHCP_DECLINE+0x154>)
 8004390:	78d2      	ldrb	r2, [r2, #3]
 8004392:	77da      	strb	r2, [r3, #31]
	MSG->chaddr[4] = wizchip_mac[4];
 8004394:	4b17      	ldr	r3, [pc, #92]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a18      	ldr	r2, [pc, #96]	; (80043fc <send_DHCP_DECLINE+0x154>)
 800439a:	7912      	ldrb	r2, [r2, #4]
 800439c:	f883 2020 	strb.w	r2, [r3, #32]
	MSG->chaddr[5] = wizchip_mac[5];
 80043a0:	4b14      	ldr	r3, [pc, #80]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a15      	ldr	r2, [pc, #84]	; (80043fc <send_DHCP_DECLINE+0x154>)
 80043a6:	7952      	ldrb	r2, [r2, #5]
 80043a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++) MSG->chaddr[i] = 0;
 80043ac:	2306      	movs	r3, #6
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	e009      	b.n	80043c6 <send_DHCP_DECLINE+0x11e>
 80043b2:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4413      	add	r3, r2
 80043ba:	331c      	adds	r3, #28
 80043bc:	2200      	movs	r2, #0
 80043be:	701a      	strb	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3301      	adds	r3, #1
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2b0f      	cmp	r3, #15
 80043ca:	ddf2      	ble.n	80043b2 <send_DHCP_DECLINE+0x10a>
	for (i = 0; i < 64; i++) MSG->sname[i] = 0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	e009      	b.n	80043e6 <send_DHCP_DECLINE+0x13e>
 80043d2:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4413      	add	r3, r2
 80043da:	332c      	adds	r3, #44	; 0x2c
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3301      	adds	r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b3f      	cmp	r3, #63	; 0x3f
 80043ea:	ddf2      	ble.n	80043d2 <send_DHCP_DECLINE+0x12a>
	for (i = 0; i < 128; i++) MSG->file[i] = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	e010      	b.n	8004414 <send_DHCP_DECLINE+0x16c>
 80043f2:	bf00      	nop
 80043f4:	2000366c 	andcs	r3, r0, ip, ror #12
 80043f8:	20003654 	andcs	r3, r0, r4, asr r6
 80043fc:	2000012c 	andcs	r0, r0, ip, lsr #2
 8004400:	4b9f      	ldr	r3, [pc, #636]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4413      	add	r3, r2
 8004408:	336c      	adds	r3, #108	; 0x6c
 800440a:	2200      	movs	r2, #0
 800440c:	701a      	strb	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	3301      	adds	r3, #1
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b7f      	cmp	r3, #127	; 0x7f
 8004418:	ddf2      	ble.n	8004400 <send_DHCP_DECLINE+0x158>

	// MAGIC_COOKIE
	MSG->OPT[k++] = 0x63;
 800441a:	4b99      	ldr	r3, [pc, #612]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	897b      	ldrh	r3, [r7, #10]
 8004420:	1c59      	adds	r1, r3, #1
 8004422:	8179      	strh	r1, [r7, #10]
 8004424:	4413      	add	r3, r2
 8004426:	2263      	movs	r2, #99	; 0x63
 8004428:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x82;
 800442c:	4b94      	ldr	r3, [pc, #592]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	897b      	ldrh	r3, [r7, #10]
 8004432:	1c59      	adds	r1, r3, #1
 8004434:	8179      	strh	r1, [r7, #10]
 8004436:	4413      	add	r3, r2
 8004438:	2282      	movs	r2, #130	; 0x82
 800443a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x53;
 800443e:	4b90      	ldr	r3, [pc, #576]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	897b      	ldrh	r3, [r7, #10]
 8004444:	1c59      	adds	r1, r3, #1
 8004446:	8179      	strh	r1, [r7, #10]
 8004448:	4413      	add	r3, r2
 800444a:	2253      	movs	r2, #83	; 0x53
 800444c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x63;
 8004450:	4b8b      	ldr	r3, [pc, #556]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	897b      	ldrh	r3, [r7, #10]
 8004456:	1c59      	adds	r1, r3, #1
 8004458:	8179      	strh	r1, [r7, #10]
 800445a:	4413      	add	r3, r2
 800445c:	2263      	movs	r2, #99	; 0x63
 800445e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	// Option Request Param.
	MSG->OPT[k++] = dhcpMessageType;
 8004462:	4b87      	ldr	r3, [pc, #540]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	897b      	ldrh	r3, [r7, #10]
 8004468:	1c59      	adds	r1, r3, #1
 800446a:	8179      	strh	r1, [r7, #10]
 800446c:	4413      	add	r3, r2
 800446e:	2235      	movs	r2, #53	; 0x35
 8004470:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x01;
 8004474:	4b82      	ldr	r3, [pc, #520]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	897b      	ldrh	r3, [r7, #10]
 800447a:	1c59      	adds	r1, r3, #1
 800447c:	8179      	strh	r1, [r7, #10]
 800447e:	4413      	add	r3, r2
 8004480:	2201      	movs	r2, #1
 8004482:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_DECLINE;
 8004486:	4b7e      	ldr	r3, [pc, #504]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	897b      	ldrh	r3, [r7, #10]
 800448c:	1c59      	adds	r1, r3, #1
 800448e:	8179      	strh	r1, [r7, #10]
 8004490:	4413      	add	r3, r2
 8004492:	2204      	movs	r2, #4
 8004494:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	MSG->OPT[k++] = dhcpClientIdentifier;
 8004498:	4b79      	ldr	r3, [pc, #484]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	897b      	ldrh	r3, [r7, #10]
 800449e:	1c59      	adds	r1, r3, #1
 80044a0:	8179      	strh	r1, [r7, #10]
 80044a2:	4413      	add	r3, r2
 80044a4:	223d      	movs	r2, #61	; 0x3d
 80044a6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x07;
 80044aa:	4b75      	ldr	r3, [pc, #468]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	897b      	ldrh	r3, [r7, #10]
 80044b0:	1c59      	adds	r1, r3, #1
 80044b2:	8179      	strh	r1, [r7, #10]
 80044b4:	4413      	add	r3, r2
 80044b6:	2207      	movs	r2, #7
 80044b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x01;
 80044bc:	4b70      	ldr	r3, [pc, #448]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	897b      	ldrh	r3, [r7, #10]
 80044c2:	1c59      	adds	r1, r3, #1
 80044c4:	8179      	strh	r1, [r7, #10]
 80044c6:	4413      	add	r3, r2
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[0];
 80044ce:	4b6c      	ldr	r3, [pc, #432]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	897b      	ldrh	r3, [r7, #10]
 80044d4:	1c59      	adds	r1, r3, #1
 80044d6:	8179      	strh	r1, [r7, #10]
 80044d8:	4618      	mov	r0, r3
 80044da:	4b6a      	ldr	r3, [pc, #424]	; (8004684 <send_DHCP_DECLINE+0x3dc>)
 80044dc:	7819      	ldrb	r1, [r3, #0]
 80044de:	1813      	adds	r3, r2, r0
 80044e0:	460a      	mov	r2, r1
 80044e2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[1];
 80044e6:	4b66      	ldr	r3, [pc, #408]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	897b      	ldrh	r3, [r7, #10]
 80044ec:	1c59      	adds	r1, r3, #1
 80044ee:	8179      	strh	r1, [r7, #10]
 80044f0:	4618      	mov	r0, r3
 80044f2:	4b64      	ldr	r3, [pc, #400]	; (8004684 <send_DHCP_DECLINE+0x3dc>)
 80044f4:	7859      	ldrb	r1, [r3, #1]
 80044f6:	1813      	adds	r3, r2, r0
 80044f8:	460a      	mov	r2, r1
 80044fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[2];
 80044fe:	4b60      	ldr	r3, [pc, #384]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	897b      	ldrh	r3, [r7, #10]
 8004504:	1c59      	adds	r1, r3, #1
 8004506:	8179      	strh	r1, [r7, #10]
 8004508:	4618      	mov	r0, r3
 800450a:	4b5e      	ldr	r3, [pc, #376]	; (8004684 <send_DHCP_DECLINE+0x3dc>)
 800450c:	7899      	ldrb	r1, [r3, #2]
 800450e:	1813      	adds	r3, r2, r0
 8004510:	460a      	mov	r2, r1
 8004512:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[3];
 8004516:	4b5a      	ldr	r3, [pc, #360]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	897b      	ldrh	r3, [r7, #10]
 800451c:	1c59      	adds	r1, r3, #1
 800451e:	8179      	strh	r1, [r7, #10]
 8004520:	4618      	mov	r0, r3
 8004522:	4b58      	ldr	r3, [pc, #352]	; (8004684 <send_DHCP_DECLINE+0x3dc>)
 8004524:	78d9      	ldrb	r1, [r3, #3]
 8004526:	1813      	adds	r3, r2, r0
 8004528:	460a      	mov	r2, r1
 800452a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[4];
 800452e:	4b54      	ldr	r3, [pc, #336]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	897b      	ldrh	r3, [r7, #10]
 8004534:	1c59      	adds	r1, r3, #1
 8004536:	8179      	strh	r1, [r7, #10]
 8004538:	4618      	mov	r0, r3
 800453a:	4b52      	ldr	r3, [pc, #328]	; (8004684 <send_DHCP_DECLINE+0x3dc>)
 800453c:	7919      	ldrb	r1, [r3, #4]
 800453e:	1813      	adds	r3, r2, r0
 8004540:	460a      	mov	r2, r1
 8004542:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[5];
 8004546:	4b4e      	ldr	r3, [pc, #312]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	897b      	ldrh	r3, [r7, #10]
 800454c:	1c59      	adds	r1, r3, #1
 800454e:	8179      	strh	r1, [r7, #10]
 8004550:	4618      	mov	r0, r3
 8004552:	4b4c      	ldr	r3, [pc, #304]	; (8004684 <send_DHCP_DECLINE+0x3dc>)
 8004554:	7959      	ldrb	r1, [r3, #5]
 8004556:	1813      	adds	r3, r2, r0
 8004558:	460a      	mov	r2, r1
 800455a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	MSG->OPT[k++] = dhcpRequestedIPaddr;
 800455e:	4b48      	ldr	r3, [pc, #288]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	897b      	ldrh	r3, [r7, #10]
 8004564:	1c59      	adds	r1, r3, #1
 8004566:	8179      	strh	r1, [r7, #10]
 8004568:	4413      	add	r3, r2
 800456a:	2232      	movs	r2, #50	; 0x32
 800456c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x04;
 8004570:	4b43      	ldr	r3, [pc, #268]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	897b      	ldrh	r3, [r7, #10]
 8004576:	1c59      	adds	r1, r3, #1
 8004578:	8179      	strh	r1, [r7, #10]
 800457a:	4413      	add	r3, r2
 800457c:	2204      	movs	r2, #4
 800457e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_allocated_ip[0];
 8004582:	4b3f      	ldr	r3, [pc, #252]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	897b      	ldrh	r3, [r7, #10]
 8004588:	1c59      	adds	r1, r3, #1
 800458a:	8179      	strh	r1, [r7, #10]
 800458c:	4618      	mov	r0, r3
 800458e:	4b3e      	ldr	r3, [pc, #248]	; (8004688 <send_DHCP_DECLINE+0x3e0>)
 8004590:	7819      	ldrb	r1, [r3, #0]
 8004592:	1813      	adds	r3, r2, r0
 8004594:	460a      	mov	r2, r1
 8004596:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_allocated_ip[1];
 800459a:	4b39      	ldr	r3, [pc, #228]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	897b      	ldrh	r3, [r7, #10]
 80045a0:	1c59      	adds	r1, r3, #1
 80045a2:	8179      	strh	r1, [r7, #10]
 80045a4:	4618      	mov	r0, r3
 80045a6:	4b38      	ldr	r3, [pc, #224]	; (8004688 <send_DHCP_DECLINE+0x3e0>)
 80045a8:	7859      	ldrb	r1, [r3, #1]
 80045aa:	1813      	adds	r3, r2, r0
 80045ac:	460a      	mov	r2, r1
 80045ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_allocated_ip[2];
 80045b2:	4b33      	ldr	r3, [pc, #204]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	897b      	ldrh	r3, [r7, #10]
 80045b8:	1c59      	adds	r1, r3, #1
 80045ba:	8179      	strh	r1, [r7, #10]
 80045bc:	4618      	mov	r0, r3
 80045be:	4b32      	ldr	r3, [pc, #200]	; (8004688 <send_DHCP_DECLINE+0x3e0>)
 80045c0:	7899      	ldrb	r1, [r3, #2]
 80045c2:	1813      	adds	r3, r2, r0
 80045c4:	460a      	mov	r2, r1
 80045c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_allocated_ip[3];
 80045ca:	4b2d      	ldr	r3, [pc, #180]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	897b      	ldrh	r3, [r7, #10]
 80045d0:	1c59      	adds	r1, r3, #1
 80045d2:	8179      	strh	r1, [r7, #10]
 80045d4:	4618      	mov	r0, r3
 80045d6:	4b2c      	ldr	r3, [pc, #176]	; (8004688 <send_DHCP_DECLINE+0x3e0>)
 80045d8:	78d9      	ldrb	r1, [r3, #3]
 80045da:	1813      	adds	r3, r2, r0
 80045dc:	460a      	mov	r2, r1
 80045de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	MSG->OPT[k++] = dhcpServerIdentifier;
 80045e2:	4b27      	ldr	r3, [pc, #156]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	897b      	ldrh	r3, [r7, #10]
 80045e8:	1c59      	adds	r1, r3, #1
 80045ea:	8179      	strh	r1, [r7, #10]
 80045ec:	4413      	add	r3, r2
 80045ee:	2236      	movs	r2, #54	; 0x36
 80045f0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x04;
 80045f4:	4b22      	ldr	r3, [pc, #136]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	897b      	ldrh	r3, [r7, #10]
 80045fa:	1c59      	adds	r1, r3, #1
 80045fc:	8179      	strh	r1, [r7, #10]
 80045fe:	4413      	add	r3, r2
 8004600:	2204      	movs	r2, #4
 8004602:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_SIP[0];
 8004606:	4b1e      	ldr	r3, [pc, #120]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	897b      	ldrh	r3, [r7, #10]
 800460c:	1c59      	adds	r1, r3, #1
 800460e:	8179      	strh	r1, [r7, #10]
 8004610:	4618      	mov	r0, r3
 8004612:	4b1e      	ldr	r3, [pc, #120]	; (800468c <send_DHCP_DECLINE+0x3e4>)
 8004614:	7819      	ldrb	r1, [r3, #0]
 8004616:	1813      	adds	r3, r2, r0
 8004618:	460a      	mov	r2, r1
 800461a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_SIP[1];
 800461e:	4b18      	ldr	r3, [pc, #96]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	897b      	ldrh	r3, [r7, #10]
 8004624:	1c59      	adds	r1, r3, #1
 8004626:	8179      	strh	r1, [r7, #10]
 8004628:	4618      	mov	r0, r3
 800462a:	4b18      	ldr	r3, [pc, #96]	; (800468c <send_DHCP_DECLINE+0x3e4>)
 800462c:	7859      	ldrb	r1, [r3, #1]
 800462e:	1813      	adds	r3, r2, r0
 8004630:	460a      	mov	r2, r1
 8004632:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_SIP[2];
 8004636:	4b12      	ldr	r3, [pc, #72]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	897b      	ldrh	r3, [r7, #10]
 800463c:	1c59      	adds	r1, r3, #1
 800463e:	8179      	strh	r1, [r7, #10]
 8004640:	4618      	mov	r0, r3
 8004642:	4b12      	ldr	r3, [pc, #72]	; (800468c <send_DHCP_DECLINE+0x3e4>)
 8004644:	7899      	ldrb	r1, [r3, #2]
 8004646:	1813      	adds	r3, r2, r0
 8004648:	460a      	mov	r2, r1
 800464a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_SIP[3];
 800464e:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	897b      	ldrh	r3, [r7, #10]
 8004654:	1c59      	adds	r1, r3, #1
 8004656:	8179      	strh	r1, [r7, #10]
 8004658:	4618      	mov	r0, r3
 800465a:	4b0c      	ldr	r3, [pc, #48]	; (800468c <send_DHCP_DECLINE+0x3e4>)
 800465c:	78d9      	ldrb	r1, [r3, #3]
 800465e:	1813      	adds	r3, r2, r0
 8004660:	460a      	mov	r2, r1
 8004662:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	MSG->OPT[k++] = endOption;
 8004666:	4b06      	ldr	r3, [pc, #24]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	897b      	ldrh	r3, [r7, #10]
 800466c:	1c59      	adds	r1, r3, #1
 800466e:	8179      	strh	r1, [r7, #10]
 8004670:	4413      	add	r3, r2
 8004672:	22ff      	movs	r2, #255	; 0xff
 8004674:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) MSG->OPT[i] = 0;
 8004678:	897b      	ldrh	r3, [r7, #10]
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	e012      	b.n	80046a4 <send_DHCP_DECLINE+0x3fc>
 800467e:	bf00      	nop
 8004680:	2000366c 	andcs	r3, r0, ip, ror #12
 8004684:	2000012c 	andcs	r0, r0, ip, lsr #2
 8004688:	2000011c 	andcs	r0, r0, ip, lsl r1
 800468c:	20003658 	andcs	r3, r0, r8, asr r6
 8004690:	4b12      	ldr	r3, [pc, #72]	; (80046dc <send_DHCP_DECLINE+0x434>)
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4413      	add	r3, r2
 8004698:	33ec      	adds	r3, #236	; 0xec
 800469a:	2200      	movs	r2, #0
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3301      	adds	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80046aa:	dbf1      	blt.n	8004690 <send_DHCP_DECLINE+0x3e8>

	//send broadcasting packet
	ip[0] = 0xFF;
 80046ac:	23ff      	movs	r3, #255	; 0xff
 80046ae:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 80046b0:	23ff      	movs	r3, #255	; 0xff
 80046b2:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 80046b4:	23ff      	movs	r3, #255	; 0xff
 80046b6:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 80046b8:	23ff      	movs	r3, #255	; 0xff
 80046ba:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)MSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80046bc:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <send_DHCP_DECLINE+0x438>)
 80046be:	7818      	ldrb	r0, [r3, #0]
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <send_DHCP_DECLINE+0x434>)
 80046c2:	6819      	ldr	r1, [r3, #0]
 80046c4:	1d3a      	adds	r2, r7, #4
 80046c6:	2343      	movs	r3, #67	; 0x43
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	4613      	mov	r3, r2
 80046cc:	f44f 7209 	mov.w	r2, #548	; 0x224
 80046d0:	f7fd fcfa 	bl	80020c8 <sendto>

}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	2000366c 	andcs	r3, r0, ip, ror #12
 80046e0:	20003670 	andcs	r3, r0, r0, ror r6

080046e4 <parseDHCPMSG>:
* Returns    : None.
* Note       : 
*********************************************************************************************************
*/
int8_t parseDHCPMSG(uint16_t length)
{
 80046e4:	b590      	push	{r4, r7, lr}
 80046e6:	b08d      	sub	sp, #52	; 0x34
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	4603      	mov	r3, r0
 80046ec:	80fb      	strh	r3, [r7, #6]
	uint16_t  svr_port;

	uint16_t i, len;
	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	77fb      	strb	r3, [r7, #31]
	uint8_t opt_len;

	len = recvfrom(DHCP_SOCKET, (uint8_t *)MSG, length, svr_addr, &svr_port);
 80046f2:	4b9a      	ldr	r3, [pc, #616]	; (800495c <parseDHCPMSG+0x278>)
 80046f4:	7818      	ldrb	r0, [r3, #0]
 80046f6:	4b9a      	ldr	r3, [pc, #616]	; (8004960 <parseDHCPMSG+0x27c>)
 80046f8:	6819      	ldr	r1, [r3, #0]
 80046fa:	f107 0410 	add.w	r4, r7, #16
 80046fe:	88fa      	ldrh	r2, [r7, #6]
 8004700:	f107 030e 	add.w	r3, r7, #14
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	4623      	mov	r3, r4
 8004708:	f7fd fde2 	bl	80022d0 <recvfrom>
 800470c:	4603      	mov	r3, r0
 800470e:	83bb      	strh	r3, [r7, #28]

	if (svr_port == DHCP_SERVER_PORT) {
 8004710:	89fb      	ldrh	r3, [r7, #14]
 8004712:	2b43      	cmp	r3, #67	; 0x43
 8004714:	f040 811b 	bne.w	800494e <parseDHCPMSG+0x26a>

		for (i = 0; i < 6; i++)
 8004718:	2300      	movs	r3, #0
 800471a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800471c:	e00f      	b.n	800473e <parseDHCPMSG+0x5a>
			if (MSG->chaddr[i] != wizchip_mac[i]) {
 800471e:	4b90      	ldr	r3, [pc, #576]	; (8004960 <parseDHCPMSG+0x27c>)
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004724:	4413      	add	r3, r2
 8004726:	7f1a      	ldrb	r2, [r3, #28]
 8004728:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800472a:	498e      	ldr	r1, [pc, #568]	; (8004964 <parseDHCPMSG+0x280>)
 800472c:	5ccb      	ldrb	r3, [r1, r3]
 800472e:	429a      	cmp	r2, r3
 8004730:	d002      	beq.n	8004738 <parseDHCPMSG+0x54>
				type = 0;
 8004732:	2300      	movs	r3, #0
 8004734:	77fb      	strb	r3, [r7, #31]
				goto PARSE_END;
 8004736:	e10a      	b.n	800494e <parseDHCPMSG+0x26a>
		for (i = 0; i < 6; i++)
 8004738:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800473a:	3301      	adds	r3, #1
 800473c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800473e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004740:	2b05      	cmp	r3, #5
 8004742:	d9ec      	bls.n	800471e <parseDHCPMSG+0x3a>
			}

		for (i = 0; i < 4; i++) {
 8004744:	2300      	movs	r3, #0
 8004746:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004748:	e00a      	b.n	8004760 <parseDHCPMSG+0x7c>
			DHCP_allocated_ip[i] = MSG->yiaddr[i];
 800474a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800474c:	4a84      	ldr	r2, [pc, #528]	; (8004960 <parseDHCPMSG+0x27c>)
 800474e:	6811      	ldr	r1, [r2, #0]
 8004750:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004752:	440a      	add	r2, r1
 8004754:	7c11      	ldrb	r1, [r2, #16]
 8004756:	4a84      	ldr	r2, [pc, #528]	; (8004968 <parseDHCPMSG+0x284>)
 8004758:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < 4; i++) {
 800475a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800475c:	3301      	adds	r3, #1
 800475e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004760:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004762:	2b03      	cmp	r3, #3
 8004764:	d9f1      	bls.n	800474a <parseDHCPMSG+0x66>
		}
		
		type = 0;
 8004766:	2300      	movs	r3, #0
 8004768:	77fb      	strb	r3, [r7, #31]
		p = (uint8_t *)(&MSG->op);
 800476a:	4b7d      	ldr	r3, [pc, #500]	; (8004960 <parseDHCPMSG+0x27c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	623b      	str	r3, [r7, #32]
		p = p + 240;
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	33f0      	adds	r3, #240	; 0xf0
 8004774:	623b      	str	r3, [r7, #32]
		e = p + (len - 240);
 8004776:	8bbb      	ldrh	r3, [r7, #28]
 8004778:	3bf0      	subs	r3, #240	; 0xf0
 800477a:	6a3a      	ldr	r2, [r7, #32]
 800477c:	4413      	add	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]

		while ( p < e ) {
 8004780:	e0de      	b.n	8004940 <parseDHCPMSG+0x25c>

			switch ( *p ) {
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b06      	cmp	r3, #6
 8004788:	d064      	beq.n	8004854 <parseDHCPMSG+0x170>
 800478a:	2b06      	cmp	r3, #6
 800478c:	dc06      	bgt.n	800479c <parseDHCPMSG+0xb8>
 800478e:	2b01      	cmp	r3, #1
 8004790:	d022      	beq.n	80047d8 <parseDHCPMSG+0xf4>
 8004792:	2b03      	cmp	r3, #3
 8004794:	d037      	beq.n	8004806 <parseDHCPMSG+0x122>
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00e      	beq.n	80047b8 <parseDHCPMSG+0xd4>
 800479a:	e0c4      	b.n	8004926 <parseDHCPMSG+0x242>
 800479c:	2b35      	cmp	r3, #53	; 0x35
 800479e:	d00f      	beq.n	80047c0 <parseDHCPMSG+0xdc>
 80047a0:	2b35      	cmp	r3, #53	; 0x35
 80047a2:	dc02      	bgt.n	80047aa <parseDHCPMSG+0xc6>
 80047a4:	2b33      	cmp	r3, #51	; 0x33
 80047a6:	d07c      	beq.n	80048a2 <parseDHCPMSG+0x1be>
 80047a8:	e0bd      	b.n	8004926 <parseDHCPMSG+0x242>
 80047aa:	2b36      	cmp	r3, #54	; 0x36
 80047ac:	f000 809a 	beq.w	80048e4 <parseDHCPMSG+0x200>
 80047b0:	2bff      	cmp	r3, #255	; 0xff
 80047b2:	f000 80cb 	beq.w	800494c <parseDHCPMSG+0x268>
 80047b6:	e0b6      	b.n	8004926 <parseDHCPMSG+0x242>

			case endOption :
				goto PARSE_END;
       			case padOption :
				p++;
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	3301      	adds	r3, #1
 80047bc:	623b      	str	r3, [r7, #32]
				break;
 80047be:	e0bf      	b.n	8004940 <parseDHCPMSG+0x25c>
			case dhcpMessageType :
				p++;
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	3301      	adds	r3, #1
 80047c4:	623b      	str	r3, [r7, #32]
				p++;
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	3301      	adds	r3, #1
 80047ca:	623b      	str	r3, [r7, #32]
				type = *p++;
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	623a      	str	r2, [r7, #32]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	77fb      	strb	r3, [r7, #31]
				break;
 80047d6:	e0b3      	b.n	8004940 <parseDHCPMSG+0x25c>
			case subnetMask :
				p++;
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	3301      	adds	r3, #1
 80047dc:	623b      	str	r3, [r7, #32]
				p++;
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	3301      	adds	r3, #1
 80047e2:	623b      	str	r3, [r7, #32]
				for (i = 0; i < 4; i++)	 DHCP_allocated_sn[i] = *p++;
 80047e4:	2300      	movs	r3, #0
 80047e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80047e8:	e009      	b.n	80047fe <parseDHCPMSG+0x11a>
 80047ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	1c59      	adds	r1, r3, #1
 80047f0:	6239      	str	r1, [r7, #32]
 80047f2:	7819      	ldrb	r1, [r3, #0]
 80047f4:	4b5d      	ldr	r3, [pc, #372]	; (800496c <parseDHCPMSG+0x288>)
 80047f6:	5499      	strb	r1, [r3, r2]
 80047f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047fa:	3301      	adds	r3, #1
 80047fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80047fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004800:	2b03      	cmp	r3, #3
 8004802:	d9f2      	bls.n	80047ea <parseDHCPMSG+0x106>
				break;
 8004804:	e09c      	b.n	8004940 <parseDHCPMSG+0x25c>
			case routersOnSubnet :
				p++;
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	3301      	adds	r3, #1
 800480a:	623b      	str	r3, [r7, #32]
				opt_len = *p++;       
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	623a      	str	r2, [r7, #32]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	75fb      	strb	r3, [r7, #23]
				for (i = 0; i < 4; i++)	DHCP_allocated_gw[i] = *p++;
 8004816:	2300      	movs	r3, #0
 8004818:	84fb      	strh	r3, [r7, #38]	; 0x26
 800481a:	e009      	b.n	8004830 <parseDHCPMSG+0x14c>
 800481c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	1c59      	adds	r1, r3, #1
 8004822:	6239      	str	r1, [r7, #32]
 8004824:	7819      	ldrb	r1, [r3, #0]
 8004826:	4b52      	ldr	r3, [pc, #328]	; (8004970 <parseDHCPMSG+0x28c>)
 8004828:	5499      	strb	r1, [r3, r2]
 800482a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800482c:	3301      	adds	r3, #1
 800482e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004830:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004832:	2b03      	cmp	r3, #3
 8004834:	d9f2      	bls.n	800481c <parseDHCPMSG+0x138>
				for (i = 0; i < (opt_len-4); i++) p++;
 8004836:	2300      	movs	r3, #0
 8004838:	84fb      	strh	r3, [r7, #38]	; 0x26
 800483a:	e005      	b.n	8004848 <parseDHCPMSG+0x164>
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	3301      	adds	r3, #1
 8004840:	623b      	str	r3, [r7, #32]
 8004842:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004844:	3301      	adds	r3, #1
 8004846:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004848:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800484a:	7dfb      	ldrb	r3, [r7, #23]
 800484c:	3b04      	subs	r3, #4
 800484e:	429a      	cmp	r2, r3
 8004850:	dbf4      	blt.n	800483c <parseDHCPMSG+0x158>
				break;
 8004852:	e075      	b.n	8004940 <parseDHCPMSG+0x25c>
			
			case dns :
				p++;                  
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	3301      	adds	r3, #1
 8004858:	623b      	str	r3, [r7, #32]
				opt_len = *p++;       
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	623a      	str	r2, [r7, #32]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	75fb      	strb	r3, [r7, #23]
				for (i = 0; i < 4; i++)	DHCP_allocated_dns[i] = *p++;
 8004864:	2300      	movs	r3, #0
 8004866:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004868:	e009      	b.n	800487e <parseDHCPMSG+0x19a>
 800486a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	1c59      	adds	r1, r3, #1
 8004870:	6239      	str	r1, [r7, #32]
 8004872:	7819      	ldrb	r1, [r3, #0]
 8004874:	4b3f      	ldr	r3, [pc, #252]	; (8004974 <parseDHCPMSG+0x290>)
 8004876:	5499      	strb	r1, [r3, r2]
 8004878:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800487a:	3301      	adds	r3, #1
 800487c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800487e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004880:	2b03      	cmp	r3, #3
 8004882:	d9f2      	bls.n	800486a <parseDHCPMSG+0x186>
				for (i = 0; i < (opt_len-4); i++) p++;
 8004884:	2300      	movs	r3, #0
 8004886:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004888:	e005      	b.n	8004896 <parseDHCPMSG+0x1b2>
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	3301      	adds	r3, #1
 800488e:	623b      	str	r3, [r7, #32]
 8004890:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004892:	3301      	adds	r3, #1
 8004894:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004896:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004898:	7dfb      	ldrb	r3, [r7, #23]
 800489a:	3b04      	subs	r3, #4
 800489c:	429a      	cmp	r2, r3
 800489e:	dbf4      	blt.n	800488a <parseDHCPMSG+0x1a6>
				break;
 80048a0:	e04e      	b.n	8004940 <parseDHCPMSG+0x25c>
				
				
			case dhcpIPaddrLeaseTime :
				p++;
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	3301      	adds	r3, #1
 80048a6:	623b      	str	r3, [r7, #32]
				opt_len = *p++;
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	623a      	str	r2, [r7, #32]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	75fb      	strb	r3, [r7, #23]
				lease_time.cVal[3] = *p++;
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	623a      	str	r2, [r7, #32]
 80048b8:	781a      	ldrb	r2, [r3, #0]
 80048ba:	4b2f      	ldr	r3, [pc, #188]	; (8004978 <parseDHCPMSG+0x294>)
 80048bc:	70da      	strb	r2, [r3, #3]
				lease_time.cVal[2] = *p++;
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	623a      	str	r2, [r7, #32]
 80048c4:	781a      	ldrb	r2, [r3, #0]
 80048c6:	4b2c      	ldr	r3, [pc, #176]	; (8004978 <parseDHCPMSG+0x294>)
 80048c8:	709a      	strb	r2, [r3, #2]
				lease_time.cVal[1] = *p++;
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	623a      	str	r2, [r7, #32]
 80048d0:	781a      	ldrb	r2, [r3, #0]
 80048d2:	4b29      	ldr	r3, [pc, #164]	; (8004978 <parseDHCPMSG+0x294>)
 80048d4:	705a      	strb	r2, [r3, #1]
				lease_time.cVal[0] = *p++;
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	623a      	str	r2, [r7, #32]
 80048dc:	781a      	ldrb	r2, [r3, #0]
 80048de:	4b26      	ldr	r3, [pc, #152]	; (8004978 <parseDHCPMSG+0x294>)
 80048e0:	701a      	strb	r2, [r3, #0]
				break;
 80048e2:	e02d      	b.n	8004940 <parseDHCPMSG+0x25c>

			case dhcpServerIdentifier :
				p++;
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	3301      	adds	r3, #1
 80048e8:	623b      	str	r3, [r7, #32]
				opt_len = *p++;
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	623a      	str	r2, [r7, #32]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	75fb      	strb	r3, [r7, #23]
				DHCP_SIP[0] = *p++;
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	623a      	str	r2, [r7, #32]
 80048fa:	781a      	ldrb	r2, [r3, #0]
 80048fc:	4b1f      	ldr	r3, [pc, #124]	; (800497c <parseDHCPMSG+0x298>)
 80048fe:	701a      	strb	r2, [r3, #0]
				DHCP_SIP[1] = *p++;
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	623a      	str	r2, [r7, #32]
 8004906:	781a      	ldrb	r2, [r3, #0]
 8004908:	4b1c      	ldr	r3, [pc, #112]	; (800497c <parseDHCPMSG+0x298>)
 800490a:	705a      	strb	r2, [r3, #1]
				DHCP_SIP[2] = *p++;
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	623a      	str	r2, [r7, #32]
 8004912:	781a      	ldrb	r2, [r3, #0]
 8004914:	4b19      	ldr	r3, [pc, #100]	; (800497c <parseDHCPMSG+0x298>)
 8004916:	709a      	strb	r2, [r3, #2]
				DHCP_SIP[3] = *p++;
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	623a      	str	r2, [r7, #32]
 800491e:	781a      	ldrb	r2, [r3, #0]
 8004920:	4b16      	ldr	r3, [pc, #88]	; (800497c <parseDHCPMSG+0x298>)
 8004922:	70da      	strb	r2, [r3, #3]
				break;
 8004924:	e00c      	b.n	8004940 <parseDHCPMSG+0x25c>

			default :
				p++;
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	3301      	adds	r3, #1
 800492a:	623b      	str	r3, [r7, #32]
				opt_len = *p++;
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	623a      	str	r2, [r7, #32]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	75fb      	strb	r3, [r7, #23]
				p += opt_len;
 8004936:	7dfb      	ldrb	r3, [r7, #23]
 8004938:	6a3a      	ldr	r2, [r7, #32]
 800493a:	4413      	add	r3, r2
 800493c:	623b      	str	r3, [r7, #32]
				break;
 800493e:	bf00      	nop
		while ( p < e ) {
 8004940:	6a3a      	ldr	r2, [r7, #32]
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	429a      	cmp	r2, r3
 8004946:	f4ff af1c 	bcc.w	8004782 <parseDHCPMSG+0x9e>
 800494a:	e000      	b.n	800494e <parseDHCPMSG+0x26a>
				goto PARSE_END;
 800494c:	bf00      	nop
			} // switch
		} // while
	} // if

PARSE_END :
	return	type;
 800494e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004952:	4618      	mov	r0, r3
 8004954:	372c      	adds	r7, #44	; 0x2c
 8004956:	46bd      	mov	sp, r7
 8004958:	bd90      	pop	{r4, r7, pc}
 800495a:	bf00      	nop
 800495c:	20003670 	andcs	r3, r0, r0, ror r6
 8004960:	2000366c 	andcs	r3, r0, ip, ror #12
 8004964:	2000012c 	andcs	r0, r0, ip, lsr #2
 8004968:	2000011c 	andcs	r0, r0, ip, lsl r1
 800496c:	20000124 	andcs	r0, r0, r4, lsr #2
 8004970:	20000120 	andcs	r0, r0, r0, lsr #2
 8004974:	20000128 	andcs	r0, r0, r8, lsr #2
 8004978:	20003668 	andcs	r3, r0, r8, ror #12
 800497c:	20003658 	andcs	r3, r0, r8, asr r6

08004980 <check_DHCP_state>:
* 				DHCP_IP_CHANGED
* Note       : 
*********************************************************************************************************
*/
uint8_t check_DHCP_state(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
	uint16_t len, i;
	uint8_t type, DHCP_ip_changed_flag;
	uint8_t d_addr[4];
	uint8_t ret;
	
	ret = DHCP_RUNNING;
 8004986:	2304      	movs	r3, #4
 8004988:	72fb      	strb	r3, [r7, #11]
	type = 0;
 800498a:	2300      	movs	r3, #0
 800498c:	737b      	strb	r3, [r7, #13]
	
	if ((len = getSn_RX_RSR(DHCP_SOCKET)) > 0) {
 800498e:	4b7a      	ldr	r3, [pc, #488]	; (8004b78 <check_DHCP_state+0x1f8>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f7fe fd7e 	bl	8003494 <getSn_RX_RSR>
 8004998:	4603      	mov	r3, r0
 800499a:	813b      	strh	r3, [r7, #8]
 800499c:	893b      	ldrh	r3, [r7, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <check_DHCP_state+0x2e>
		type = parseDHCPMSG(len);
 80049a2:	893b      	ldrh	r3, [r7, #8]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff fe9d 	bl	80046e4 <parseDHCPMSG>
 80049aa:	4603      	mov	r3, r0
 80049ac:	737b      	strb	r3, [r7, #13]
	}
	switch ( dhcp_state ) {
 80049ae:	4b73      	ldr	r3, [pc, #460]	; (8004b7c <check_DHCP_state+0x1fc>)
 80049b0:	f993 3000 	ldrsb.w	r3, [r3]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	f200 80d7 	bhi.w	8004b6a <check_DHCP_state+0x1ea>
 80049bc:	a201      	add	r2, pc, #4	; (adr r2, 80049c4 <check_DHCP_state+0x44>)
 80049be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c2:	bf00      	nop
 80049c4:	080049d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, fp, lr}
 80049c8:	08004a1b 	stmdaeq	r0, {r0, r1, r3, r4, r9, fp, lr}
 80049cc:	08004a69 	stmdaeq	r0, {r0, r3, r5, r6, r9, fp, lr}
 80049d0:	08004afb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, fp, lr}
 80049d4:	08004b6b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r8, r9, fp, lr}
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER) {
 80049d8:	7b7b      	ldrb	r3, [r7, #13]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d118      	bne.n	8004a10 <check_DHCP_state+0x90>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
				
				for (i = 0; i < 4; i++) d_addr[i] = 0xff;
 80049de:	2300      	movs	r3, #0
 80049e0:	81fb      	strh	r3, [r7, #14]
 80049e2:	e009      	b.n	80049f8 <check_DHCP_state+0x78>
 80049e4:	89fb      	ldrh	r3, [r7, #14]
 80049e6:	f107 0210 	add.w	r2, r7, #16
 80049ea:	4413      	add	r3, r2
 80049ec:	22ff      	movs	r2, #255	; 0xff
 80049ee:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80049f2:	89fb      	ldrh	r3, [r7, #14]
 80049f4:	3301      	adds	r3, #1
 80049f6:	81fb      	strh	r3, [r7, #14]
 80049f8:	89fb      	ldrh	r3, [r7, #14]
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	d9f2      	bls.n	80049e4 <check_DHCP_state+0x64>
				send_DHCP_REQUEST(Cip, d_addr);
 80049fe:	1d3b      	adds	r3, r7, #4
 8004a00:	4619      	mov	r1, r3
 8004a02:	485f      	ldr	r0, [pc, #380]	; (8004b80 <check_DHCP_state+0x200>)
 8004a04:	f7ff f934 	bl	8003c70 <send_DHCP_REQUEST>
				
				dhcp_state = STATE_DHCP_REQUEST;
 8004a08:	4b5c      	ldr	r3, [pc, #368]	; (8004b7c <check_DHCP_state+0x1fc>)
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
		break;
 8004a0e:	e0ad      	b.n	8004b6c <check_DHCP_state+0x1ec>
			} else ret = check_DHCP_timeout();
 8004a10:	f000 f8cc 	bl	8004bac <check_DHCP_timeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	72fb      	strb	r3, [r7, #11]
		break;
 8004a18:	e0a8      	b.n	8004b6c <check_DHCP_state+0x1ec>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8004a1a:	7b7b      	ldrb	r3, [r7, #13]
 8004a1c:	2b05      	cmp	r3, #5
 8004a1e:	d115      	bne.n	8004a4c <check_DHCP_state+0xcc>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				
				if (check_DHCP_leasedIP()) {
 8004a20:	f000 f94c 	bl	8004cbc <check_DHCP_leasedIP>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <check_DHCP_state+0xc0>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8004a2a:	4b56      	ldr	r3, [pc, #344]	; (8004b84 <check_DHCP_state+0x204>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4798      	blx	r3
					reset_DHCP_timeout();
 8004a30:	f000 f9dc 	bl	8004dec <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8004a34:	4b51      	ldr	r3, [pc, #324]	; (8004b7c <check_DHCP_state+0x1fc>)
 8004a36:	2203      	movs	r2, #3
 8004a38:	701a      	strb	r2, [r3, #0]
					ret = DHCP_SUCCESS;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	72fb      	strb	r3, [r7, #11]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8004a3e:	e095      	b.n	8004b6c <check_DHCP_state+0x1ec>
					reset_DHCP_timeout();
 8004a40:	f000 f9d4 	bl	8004dec <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8004a44:	4b50      	ldr	r3, [pc, #320]	; (8004b88 <check_DHCP_state+0x208>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4798      	blx	r3
		break;
 8004a4a:	e08f      	b.n	8004b6c <check_DHCP_state+0x1ec>
			} else if (type == DHCP_NAK) {
 8004a4c:	7b7b      	ldrb	r3, [r7, #13]
 8004a4e:	2b06      	cmp	r3, #6
 8004a50:	d105      	bne.n	8004a5e <check_DHCP_state+0xde>
				reset_DHCP_timeout();
 8004a52:	f000 f9cb 	bl	8004dec <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8004a56:	4b49      	ldr	r3, [pc, #292]	; (8004b7c <check_DHCP_state+0x1fc>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	701a      	strb	r2, [r3, #0]
		break;
 8004a5c:	e086      	b.n	8004b6c <check_DHCP_state+0x1ec>
			} else ret = check_DHCP_timeout();
 8004a5e:	f000 f8a5 	bl	8004bac <check_DHCP_timeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	72fb      	strb	r3, [r7, #11]
		break;
 8004a66:	e081      	b.n	8004b6c <check_DHCP_state+0x1ec>

		case STATE_DHCP_LEASED :
			if ((lease_time.lVal != 0xffffffff) && ((lease_time.lVal/2) < my_time)) {
 8004a68:	4b48      	ldr	r3, [pc, #288]	; (8004b8c <check_DHCP_state+0x20c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a70:	d040      	beq.n	8004af4 <check_DHCP_state+0x174>
 8004a72:	4b46      	ldr	r3, [pc, #280]	; (8004b8c <check_DHCP_state+0x20c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	085a      	lsrs	r2, r3, #1
 8004a78:	4b45      	ldr	r3, [pc, #276]	; (8004b90 <check_DHCP_state+0x210>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d239      	bcs.n	8004af4 <check_DHCP_state+0x174>
				
#ifdef _DHCP_DEBUG_
 				printf("> Renewal IP address \r\n");
#endif

				type = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	737b      	strb	r3, [r7, #13]
				for (i = 0; i < 4; i++)	OLD_SIP[i] = DHCP_allocated_ip[i];
 8004a84:	2300      	movs	r3, #0
 8004a86:	81fb      	strh	r3, [r7, #14]
 8004a88:	e008      	b.n	8004a9c <check_DHCP_state+0x11c>
 8004a8a:	89fb      	ldrh	r3, [r7, #14]
 8004a8c:	89fa      	ldrh	r2, [r7, #14]
 8004a8e:	4941      	ldr	r1, [pc, #260]	; (8004b94 <check_DHCP_state+0x214>)
 8004a90:	5c89      	ldrb	r1, [r1, r2]
 8004a92:	4a41      	ldr	r2, [pc, #260]	; (8004b98 <check_DHCP_state+0x218>)
 8004a94:	54d1      	strb	r1, [r2, r3]
 8004a96:	89fb      	ldrh	r3, [r7, #14]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	81fb      	strh	r3, [r7, #14]
 8004a9c:	89fb      	ldrh	r3, [r7, #14]
 8004a9e:	2b03      	cmp	r3, #3
 8004aa0:	d9f3      	bls.n	8004a8a <check_DHCP_state+0x10a>
				for (i = 0; i < 4; i++)	d_addr[i] = DHCP_SIP[i];
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	81fb      	strh	r3, [r7, #14]
 8004aa6:	e00b      	b.n	8004ac0 <check_DHCP_state+0x140>
 8004aa8:	89fb      	ldrh	r3, [r7, #14]
 8004aaa:	89fa      	ldrh	r2, [r7, #14]
 8004aac:	493b      	ldr	r1, [pc, #236]	; (8004b9c <check_DHCP_state+0x21c>)
 8004aae:	5c8a      	ldrb	r2, [r1, r2]
 8004ab0:	f107 0110 	add.w	r1, r7, #16
 8004ab4:	440b      	add	r3, r1
 8004ab6:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8004aba:	89fb      	ldrh	r3, [r7, #14]
 8004abc:	3301      	adds	r3, #1
 8004abe:	81fb      	strh	r3, [r7, #14]
 8004ac0:	89fb      	ldrh	r3, [r7, #14]
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d9f0      	bls.n	8004aa8 <check_DHCP_state+0x128>
				
				DHCP_XID++;
 8004ac6:	4b36      	ldr	r3, [pc, #216]	; (8004ba0 <check_DHCP_state+0x220>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3301      	adds	r3, #1
 8004acc:	4a34      	ldr	r2, [pc, #208]	; (8004ba0 <check_DHCP_state+0x220>)
 8004ace:	6013      	str	r3, [r2, #0]

				socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00); // added
 8004ad0:	4b29      	ldr	r3, [pc, #164]	; (8004b78 <check_DHCP_state+0x1f8>)
 8004ad2:	7818      	ldrb	r0, [r3, #0]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	2244      	movs	r2, #68	; 0x44
 8004ad8:	2102      	movs	r1, #2
 8004ada:	f7fc ff2f 	bl	800193c <socket>
				send_DHCP_REQUEST(DHCP_allocated_ip, d_addr);
 8004ade:	1d3b      	adds	r3, r7, #4
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	482c      	ldr	r0, [pc, #176]	; (8004b94 <check_DHCP_state+0x214>)
 8004ae4:	f7ff f8c4 	bl	8003c70 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8004ae8:	f000 f980 	bl	8004dec <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8004aec:	4b23      	ldr	r3, [pc, #140]	; (8004b7c <check_DHCP_state+0x1fc>)
 8004aee:	2204      	movs	r2, #4
 8004af0:	701a      	strb	r2, [r3, #0]
			} else {
				ret = DHCP_IP_LEASED;
			}
		break;
 8004af2:	e03b      	b.n	8004b6c <check_DHCP_state+0x1ec>
				ret = DHCP_IP_LEASED;
 8004af4:	2303      	movs	r3, #3
 8004af6:	72fb      	strb	r3, [r7, #11]
		break;
 8004af8:	e038      	b.n	8004b6c <check_DHCP_state+0x1ec>

		case STATE_DHCP_REREQUEST :
			if (type == DHCP_ACK) {
 8004afa:	7b7b      	ldrb	r3, [r7, #13]
 8004afc:	2b05      	cmp	r3, #5
 8004afe:	d126      	bne.n	8004b4e <check_DHCP_state+0x1ce>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK, IP Renewal Success\r\n");
#endif

				retry_count = 0;
 8004b00:	4b28      	ldr	r3, [pc, #160]	; (8004ba4 <check_DHCP_state+0x224>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
				DHCP_ip_changed_flag = 0;
 8004b06:	2300      	movs	r3, #0
 8004b08:	733b      	strb	r3, [r7, #12]

				for (i = 0; i < 4; i++)	{
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	81fb      	strh	r3, [r7, #14]
 8004b0e:	e00d      	b.n	8004b2c <check_DHCP_state+0x1ac>
					if (OLD_SIP[i] != DHCP_allocated_ip[i]) {
 8004b10:	89fb      	ldrh	r3, [r7, #14]
 8004b12:	4a21      	ldr	r2, [pc, #132]	; (8004b98 <check_DHCP_state+0x218>)
 8004b14:	5cd2      	ldrb	r2, [r2, r3]
 8004b16:	89fb      	ldrh	r3, [r7, #14]
 8004b18:	491e      	ldr	r1, [pc, #120]	; (8004b94 <check_DHCP_state+0x214>)
 8004b1a:	5ccb      	ldrb	r3, [r1, r3]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d002      	beq.n	8004b26 <check_DHCP_state+0x1a6>
						DHCP_ip_changed_flag = 1;
 8004b20:	2301      	movs	r3, #1
 8004b22:	733b      	strb	r3, [r7, #12]
						break;
 8004b24:	e005      	b.n	8004b32 <check_DHCP_state+0x1b2>
				for (i = 0; i < 4; i++)	{
 8004b26:	89fb      	ldrh	r3, [r7, #14]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	81fb      	strh	r3, [r7, #14]
 8004b2c:	89fb      	ldrh	r3, [r7, #14]
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d9ee      	bls.n	8004b10 <check_DHCP_state+0x190>
					}
				}

				// change to new IP address
				if (DHCP_ip_changed_flag) {
 8004b32:	7b3b      	ldrb	r3, [r7, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d004      	beq.n	8004b42 <check_DHCP_state+0x1c2>
					ret = DHCP_IP_CHANGED;
 8004b38:	2302      	movs	r3, #2
 8004b3a:	72fb      	strb	r3, [r7, #11]
					dhcp_ip_update();
 8004b3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <check_DHCP_state+0x228>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4798      	blx	r3
				}
				reset_DHCP_timeout();
 8004b42:	f000 f953 	bl	8004dec <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_LEASED;
 8004b46:	4b0d      	ldr	r3, [pc, #52]	; (8004b7c <check_DHCP_state+0x1fc>)
 8004b48:	2203      	movs	r2, #3
 8004b4a:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8004b4c:	e00e      	b.n	8004b6c <check_DHCP_state+0x1ec>
			} else if (type == DHCP_NAK) {
 8004b4e:	7b7b      	ldrb	r3, [r7, #13]
 8004b50:	2b06      	cmp	r3, #6
 8004b52:	d105      	bne.n	8004b60 <check_DHCP_state+0x1e0>
				reset_DHCP_timeout();
 8004b54:	f000 f94a 	bl	8004dec <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8004b58:	4b08      	ldr	r3, [pc, #32]	; (8004b7c <check_DHCP_state+0x1fc>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	701a      	strb	r2, [r3, #0]
		break;
 8004b5e:	e005      	b.n	8004b6c <check_DHCP_state+0x1ec>
			} else ret = check_DHCP_timeout();
 8004b60:	f000 f824 	bl	8004bac <check_DHCP_timeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	72fb      	strb	r3, [r7, #11]
		break;
 8004b68:	e000      	b.n	8004b6c <check_DHCP_state+0x1ec>

		case STATE_DHCP_RELEASE :
		break;

		default :
		break;
 8004b6a:	bf00      	nop
	}

	return ret;
 8004b6c:	7afb      	ldrb	r3, [r7, #11]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20003670 	andcs	r3, r0, r0, ror r6
 8004b7c:	20003644 	andcs	r3, r0, r4, asr #12
 8004b80:	20000134 	andcs	r0, r0, r4, lsr r1
 8004b84:	200000ac 	andcs	r0, r0, ip, lsr #1
 8004b88:	200000b4 	strhcs	r0, [r0], -r4
 8004b8c:	20003668 	andcs	r3, r0, r8, ror #12
 8004b90:	2000365c 	andcs	r3, r0, ip, asr r6
 8004b94:	2000011c 	andcs	r0, r0, ip, lsl r1
 8004b98:	20003650 	andcs	r3, r0, r0, asr r6
 8004b9c:	20003658 	andcs	r3, r0, r8, asr r6
 8004ba0:	20003654 	andcs	r3, r0, r4, asr r6
 8004ba4:	20003664 	andcs	r3, r0, r4, ror #12
 8004ba8:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>

08004bac <check_DHCP_timeout>:
* 			   DHCP_RUNNING - No timeout
* Note       : 
*********************************************************************************************************
*/
uint8_t check_DHCP_timeout(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
	uint8_t i, d_addr[4];
	uint8_t ret = DHCP_RUNNING;
 8004bb2:	2304      	movs	r3, #4
 8004bb4:	71bb      	strb	r3, [r7, #6]
	
	if (retry_count < MAX_DHCP_RETRY) {
 8004bb6:	4b3a      	ldr	r3, [pc, #232]	; (8004ca0 <check_DHCP_timeout+0xf4>)
 8004bb8:	f993 3000 	ldrsb.w	r3, [r3]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	dc52      	bgt.n	8004c66 <check_DHCP_timeout+0xba>
		if (next_time < my_time) {
 8004bc0:	4b38      	ldr	r3, [pc, #224]	; (8004ca4 <check_DHCP_timeout+0xf8>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	4b38      	ldr	r3, [pc, #224]	; (8004ca8 <check_DHCP_timeout+0xfc>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d264      	bcs.n	8004c96 <check_DHCP_timeout+0xea>

			switch ( dhcp_state ) {
 8004bcc:	4b37      	ldr	r3, [pc, #220]	; (8004cac <check_DHCP_timeout+0x100>)
 8004bce:	f993 3000 	ldrsb.w	r3, [r3]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d007      	beq.n	8004be6 <check_DHCP_timeout+0x3a>
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d01b      	beq.n	8004c12 <check_DHCP_timeout+0x66>
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d000      	beq.n	8004be0 <check_DHCP_timeout+0x34>
					for (i = 0; i < 4; i++)	d_addr[i] = DHCP_SIP[i];
					send_DHCP_REQUEST(DHCP_allocated_ip, d_addr);
				break;
		
				default :
				break;
 8004bde:	e030      	b.n	8004c42 <check_DHCP_timeout+0x96>
					send_DHCP_DISCOVER();
 8004be0:	f7fe fde2 	bl	80037a8 <send_DHCP_DISCOVER>
				break;
 8004be4:	e02d      	b.n	8004c42 <check_DHCP_timeout+0x96>
					for (i = 0; i < 4; i++) d_addr[i] = 0xff;
 8004be6:	2300      	movs	r3, #0
 8004be8:	71fb      	strb	r3, [r7, #7]
 8004bea:	e009      	b.n	8004c00 <check_DHCP_timeout+0x54>
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	f107 0208 	add.w	r2, r7, #8
 8004bf2:	4413      	add	r3, r2
 8004bf4:	22ff      	movs	r2, #255	; 0xff
 8004bf6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	71fb      	strb	r3, [r7, #7]
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d9f2      	bls.n	8004bec <check_DHCP_timeout+0x40>
					send_DHCP_REQUEST(Cip, d_addr);
 8004c06:	463b      	mov	r3, r7
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4829      	ldr	r0, [pc, #164]	; (8004cb0 <check_DHCP_timeout+0x104>)
 8004c0c:	f7ff f830 	bl	8003c70 <send_DHCP_REQUEST>
				break;
 8004c10:	e017      	b.n	8004c42 <check_DHCP_timeout+0x96>
					for (i = 0; i < 4; i++)	d_addr[i] = DHCP_SIP[i];
 8004c12:	2300      	movs	r3, #0
 8004c14:	71fb      	strb	r3, [r7, #7]
 8004c16:	e00b      	b.n	8004c30 <check_DHCP_timeout+0x84>
 8004c18:	79fb      	ldrb	r3, [r7, #7]
 8004c1a:	79fa      	ldrb	r2, [r7, #7]
 8004c1c:	4925      	ldr	r1, [pc, #148]	; (8004cb4 <check_DHCP_timeout+0x108>)
 8004c1e:	5c8a      	ldrb	r2, [r1, r2]
 8004c20:	f107 0108 	add.w	r1, r7, #8
 8004c24:	440b      	add	r3, r1
 8004c26:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	71fb      	strb	r3, [r7, #7]
 8004c30:	79fb      	ldrb	r3, [r7, #7]
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d9f0      	bls.n	8004c18 <check_DHCP_timeout+0x6c>
					send_DHCP_REQUEST(DHCP_allocated_ip, d_addr);
 8004c36:	463b      	mov	r3, r7
 8004c38:	4619      	mov	r1, r3
 8004c3a:	481f      	ldr	r0, [pc, #124]	; (8004cb8 <check_DHCP_timeout+0x10c>)
 8004c3c:	f7ff f818 	bl	8003c70 <send_DHCP_REQUEST>
				break;
 8004c40:	bf00      	nop
			}

			my_time = 0;
 8004c42:	4b19      	ldr	r3, [pc, #100]	; (8004ca8 <check_DHCP_timeout+0xfc>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
			next_time = my_time + DHCP_WAIT_TIME;
 8004c48:	4b17      	ldr	r3, [pc, #92]	; (8004ca8 <check_DHCP_timeout+0xfc>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	330a      	adds	r3, #10
 8004c4e:	4a15      	ldr	r2, [pc, #84]	; (8004ca4 <check_DHCP_timeout+0xf8>)
 8004c50:	6013      	str	r3, [r2, #0]
			retry_count++;
 8004c52:	4b13      	ldr	r3, [pc, #76]	; (8004ca0 <check_DHCP_timeout+0xf4>)
 8004c54:	f993 3000 	ldrsb.w	r3, [r3]
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	b25a      	sxtb	r2, r3
 8004c60:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <check_DHCP_timeout+0xf4>)
 8004c62:	701a      	strb	r2, [r3, #0]
 8004c64:	e017      	b.n	8004c96 <check_DHCP_timeout+0xea>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8004c66:	4b11      	ldr	r3, [pc, #68]	; (8004cac <check_DHCP_timeout+0x100>)
 8004c68:	f993 3000 	ldrsb.w	r3, [r3]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d00a      	beq.n	8004c86 <check_DHCP_timeout+0xda>
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d008      	beq.n	8004c86 <check_DHCP_timeout+0xda>
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d000      	beq.n	8004c7a <check_DHCP_timeout+0xce>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8004c78:	e00b      	b.n	8004c92 <check_DHCP_timeout+0xe6>
				dhcp_state = STATE_DHCP_INIT;
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <check_DHCP_timeout+0x100>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8004c80:	2300      	movs	r3, #0
 8004c82:	71bb      	strb	r3, [r7, #6]
				break;
 8004c84:	e005      	b.n	8004c92 <check_DHCP_timeout+0xe6>
				send_DHCP_DISCOVER();
 8004c86:	f7fe fd8f 	bl	80037a8 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8004c8a:	4b08      	ldr	r3, [pc, #32]	; (8004cac <check_DHCP_timeout+0x100>)
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	701a      	strb	r2, [r3, #0]
				break;
 8004c90:	bf00      	nop
		}
		reset_DHCP_timeout();
 8004c92:	f000 f8ab 	bl	8004dec <reset_DHCP_timeout>
	}
	return ret;
 8004c96:	79bb      	ldrb	r3, [r7, #6]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20003664 	andcs	r3, r0, r4, ror #12
 8004ca4:	20003660 	andcs	r3, r0, r0, ror #12
 8004ca8:	2000365c 	andcs	r3, r0, ip, asr r6
 8004cac:	20003644 	andcs	r3, r0, r4, asr #12
 8004cb0:	20000134 	andcs	r0, r0, r4, lsr r1
 8004cb4:	20003658 	andcs	r3, r0, r8, asr r6
 8004cb8:	2000011c 	andcs	r0, r0, ip, lsl r1

08004cbc <check_DHCP_leasedIP>:
* Note       :
*********************************************************************************************************
*/
//
int8_t check_DHCP_leasedIP(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8004cc2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8004cc6:	f7fe faa7 	bl	8003218 <WIZCHIP_READ>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8004cce:	2103      	movs	r1, #3
 8004cd0:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8004cd4:	f7fe fad0 	bl	8003278 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8004cd8:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <check_DHCP_leasedIP+0x70>)
 8004cda:	7818      	ldrb	r0, [r3, #0]
 8004cdc:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	4b13      	ldr	r3, [pc, #76]	; (8004d30 <check_DHCP_leasedIP+0x74>)
 8004ce4:	2211      	movs	r2, #17
 8004ce6:	4913      	ldr	r1, [pc, #76]	; (8004d34 <check_DHCP_leasedIP+0x78>)
 8004ce8:	f7fd f9ee 	bl	80020c8 <sendto>
 8004cec:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8004cee:	79fb      	ldrb	r3, [r7, #7]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8004cf6:	f7fe fabf 	bl	8003278 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	f113 0f0d 	cmn.w	r3, #13
 8004d00:	d101      	bne.n	8004d06 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e00e      	b.n	8004d24 <check_DHCP_leasedIP+0x68>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8004d06:	f7ff facf 	bl	80042a8 <send_DHCP_DECLINE>
		for(tmp = 0; tmp < 10; tmp++) getMR(); // for delay
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	71fb      	strb	r3, [r7, #7]
 8004d0e:	e005      	b.n	8004d1c <check_DHCP_leasedIP+0x60>
 8004d10:	2000      	movs	r0, #0
 8004d12:	f7fe fa81 	bl	8003218 <WIZCHIP_READ>
 8004d16:	79fb      	ldrb	r3, [r7, #7]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	71fb      	strb	r3, [r7, #7]
 8004d1c:	79fb      	ldrb	r3, [r7, #7]
 8004d1e:	2b09      	cmp	r3, #9
 8004d20:	d9f6      	bls.n	8004d10 <check_DHCP_leasedIP+0x54>
		return 0;
 8004d22:	2300      	movs	r3, #0
	}
}	
 8004d24:	4618      	mov	r0, r3
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	20003670 	andcs	r3, r0, r0, ror r6
 8004d30:	2000011c 	andcs	r0, r0, ip, lsl r1
 8004d34:	08009594 	stmdaeq	r0, {r2, r4, r7, r8, sl, ip, pc}

08004d38 <DHCP_init>:
* Note       : 
*********************************************************************************************************
*/

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	6039      	str	r1, [r7, #0]
 8004d42:	71fb      	strb	r3, [r7, #7]
	DHCP_SOCKET = s; // SOCK_DHCP
 8004d44:	4a17      	ldr	r2, [pc, #92]	; (8004da4 <DHCP_init+0x6c>)
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	7013      	strb	r3, [r2, #0]
	MSG = (RIP_MSG*)buf;
 8004d4a:	4a17      	ldr	r2, [pc, #92]	; (8004da8 <DHCP_init+0x70>)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8004d50:	4b16      	ldr	r3, [pc, #88]	; (8004dac <DHCP_init+0x74>)
 8004d52:	4a17      	ldr	r2, [pc, #92]	; (8004db0 <DHCP_init+0x78>)
 8004d54:	601a      	str	r2, [r3, #0]

	// Get the MAC address
	getSHAR(wizchip_mac);
 8004d56:	2206      	movs	r2, #6
 8004d58:	4916      	ldr	r1, [pc, #88]	; (8004db4 <DHCP_init+0x7c>)
 8004d5a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004d5e:	f7fe fac1 	bl	80032e4 <WIZCHIP_READ_BUF>

	// WIZchip Netinfo Clear
	setSIPR(Cip);
 8004d62:	2204      	movs	r2, #4
 8004d64:	4914      	ldr	r1, [pc, #80]	; (8004db8 <DHCP_init+0x80>)
 8004d66:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004d6a:	f7fe faff 	bl	800336c <WIZCHIP_WRITE_BUF>
	setSIPR(Cip);
 8004d6e:	2204      	movs	r2, #4
 8004d70:	4911      	ldr	r1, [pc, #68]	; (8004db8 <DHCP_init+0x80>)
 8004d72:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004d76:	f7fe faf9 	bl	800336c <WIZCHIP_WRITE_BUF>
	setGAR(Cip);
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	490e      	ldr	r1, [pc, #56]	; (8004db8 <DHCP_init+0x80>)
 8004d7e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004d82:	f7fe faf3 	bl	800336c <WIZCHIP_WRITE_BUF>

	dhcp_state = STATE_DHCP_INIT;
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <DHCP_init+0x84>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	701a      	strb	r2, [r3, #0]
	socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8004d8c:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <DHCP_init+0x6c>)
 8004d8e:	7818      	ldrb	r0, [r3, #0]
 8004d90:	2300      	movs	r3, #0
 8004d92:	2244      	movs	r2, #68	; 0x44
 8004d94:	2102      	movs	r1, #2
 8004d96:	f7fc fdd1 	bl	800193c <socket>
}
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20003670 	andcs	r3, r0, r0, ror r6
 8004da8:	2000366c 	andcs	r3, r0, ip, ror #12
 8004dac:	20003654 	andcs	r3, r0, r4, asr r6
 8004db0:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000
 8004db4:	2000012c 	andcs	r0, r0, ip, lsr #2
 8004db8:	20000134 	andcs	r0, r0, r4, lsr r1
 8004dbc:	20003644 	andcs	r3, r0, r4, asr #12

08004dc0 <DHCP_run>:
* Note       :
*********************************************************************************************************
*/

uint8_t DHCP_run(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
	if(dhcp_state == STATE_DHCP_INIT) {
 8004dc4:	4b08      	ldr	r3, [pc, #32]	; (8004de8 <DHCP_run+0x28>)
 8004dc6:	f993 3000 	ldrsb.w	r3, [r3]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <DHCP_run+0x1c>
		send_DHCP_DISCOVER();
 8004dce:	f7fe fceb 	bl	80037a8 <send_DHCP_DISCOVER>
		dhcp_state = STATE_DHCP_DISCOVER;
 8004dd2:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <DHCP_run+0x28>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	701a      	strb	r2, [r3, #0]
		reset_DHCP_timeout();
 8004dd8:	f000 f808 	bl	8004dec <reset_DHCP_timeout>
	}

	return check_DHCP_state();
 8004ddc:	f7ff fdd0 	bl	8004980 <check_DHCP_state>
 8004de0:	4603      	mov	r3, r0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20003644 	andcs	r3, r0, r4, asr #12

08004dec <reset_DHCP_timeout>:
* Returns    : None.
* Note       :
*********************************************************************************************************
*/
void reset_DHCP_timeout(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
	my_time = 0;
 8004df0:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <reset_DHCP_timeout+0x20>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
	next_time = DHCP_WAIT_TIME;
 8004df6:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <reset_DHCP_timeout+0x24>)
 8004df8:	220a      	movs	r2, #10
 8004dfa:	601a      	str	r2, [r3, #0]
	retry_count = 0;
 8004dfc:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <reset_DHCP_timeout+0x28>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	701a      	strb	r2, [r3, #0]
}
 8004e02:	bf00      	nop
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	2000365c 	andcs	r3, r0, ip, asr r6
 8004e10:	20003660 	andcs	r3, r0, r0, ror #12
 8004e14:	20003664 	andcs	r3, r0, r4, ror #12

08004e18 <DHCP_timerHandler>:
* Returns    : None.
* Note       :
*********************************************************************************************************
*/
void DHCP_timerHandler(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
	my_time++;
 8004e1c:	4b04      	ldr	r3, [pc, #16]	; (8004e30 <DHCP_timerHandler+0x18>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3301      	adds	r3, #1
 8004e22:	4a03      	ldr	r2, [pc, #12]	; (8004e30 <DHCP_timerHandler+0x18>)
 8004e24:	6013      	str	r3, [r2, #0]
}
 8004e26:	bf00      	nop
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	2000365c 	andcs	r3, r0, ip, asr r6

08004e34 <getIPfromDHCP>:
* 			   getSNfromDHCP,
* 			   getDNSfromDHCP
*********************************************************************************************************
*/
void getIPfromDHCP(uint8_t * ip)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <getIPfromDHCP+0x38>)
 8004e3e:	781a      	ldrb	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3301      	adds	r3, #1
 8004e48:	4a08      	ldr	r2, [pc, #32]	; (8004e6c <getIPfromDHCP+0x38>)
 8004e4a:	7852      	ldrb	r2, [r2, #1]
 8004e4c:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3302      	adds	r3, #2
 8004e52:	4a06      	ldr	r2, [pc, #24]	; (8004e6c <getIPfromDHCP+0x38>)
 8004e54:	7892      	ldrb	r2, [r2, #2]
 8004e56:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3303      	adds	r3, #3
 8004e5c:	4a03      	ldr	r2, [pc, #12]	; (8004e6c <getIPfromDHCP+0x38>)
 8004e5e:	78d2      	ldrb	r2, [r2, #3]
 8004e60:	701a      	strb	r2, [r3, #0]
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bc80      	pop	{r7}
 8004e6a:	4770      	bx	lr
 8004e6c:	2000011c 	andcs	r0, r0, ip, lsl r1

08004e70 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t * gw)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	gw[0] = DHCP_allocated_gw[0];
 8004e78:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <getGWfromDHCP+0x38>)
 8004e7a:	781a      	ldrb	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	701a      	strb	r2, [r3, #0]
	gw[1] = DHCP_allocated_gw[1];
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3301      	adds	r3, #1
 8004e84:	4a08      	ldr	r2, [pc, #32]	; (8004ea8 <getGWfromDHCP+0x38>)
 8004e86:	7852      	ldrb	r2, [r2, #1]
 8004e88:	701a      	strb	r2, [r3, #0]
	gw[2] = DHCP_allocated_gw[2];
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3302      	adds	r3, #2
 8004e8e:	4a06      	ldr	r2, [pc, #24]	; (8004ea8 <getGWfromDHCP+0x38>)
 8004e90:	7892      	ldrb	r2, [r2, #2]
 8004e92:	701a      	strb	r2, [r3, #0]
	gw[3] = DHCP_allocated_gw[3];
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3303      	adds	r3, #3
 8004e98:	4a03      	ldr	r2, [pc, #12]	; (8004ea8 <getGWfromDHCP+0x38>)
 8004e9a:	78d2      	ldrb	r2, [r2, #3]
 8004e9c:	701a      	strb	r2, [r3, #0]
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bc80      	pop	{r7}
 8004ea6:	4770      	bx	lr
 8004ea8:	20000120 	andcs	r0, r0, r0, lsr #2

08004eac <getSNfromDHCP>:

void getSNfromDHCP(uint8_t * sn)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
	sn[0] = DHCP_allocated_sn[0];
 8004eb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <getSNfromDHCP+0x38>)
 8004eb6:	781a      	ldrb	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	701a      	strb	r2, [r3, #0]
	sn[1] = DHCP_allocated_sn[1];
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	4a08      	ldr	r2, [pc, #32]	; (8004ee4 <getSNfromDHCP+0x38>)
 8004ec2:	7852      	ldrb	r2, [r2, #1]
 8004ec4:	701a      	strb	r2, [r3, #0]
	sn[2] = DHCP_allocated_sn[2];
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3302      	adds	r3, #2
 8004eca:	4a06      	ldr	r2, [pc, #24]	; (8004ee4 <getSNfromDHCP+0x38>)
 8004ecc:	7892      	ldrb	r2, [r2, #2]
 8004ece:	701a      	strb	r2, [r3, #0]
	sn[3] = DHCP_allocated_sn[3];
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3303      	adds	r3, #3
 8004ed4:	4a03      	ldr	r2, [pc, #12]	; (8004ee4 <getSNfromDHCP+0x38>)
 8004ed6:	78d2      	ldrb	r2, [r2, #3]
 8004ed8:	701a      	strb	r2, [r3, #0]
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr
 8004ee4:	20000124 	andcs	r0, r0, r4, lsr #2

08004ee8 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t * dns)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
	dns[0] = DHCP_allocated_dns[0];
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <getDNSfromDHCP+0x38>)
 8004ef2:	781a      	ldrb	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	701a      	strb	r2, [r3, #0]
	dns[1] = DHCP_allocated_dns[1];
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3301      	adds	r3, #1
 8004efc:	4a08      	ldr	r2, [pc, #32]	; (8004f20 <getDNSfromDHCP+0x38>)
 8004efe:	7852      	ldrb	r2, [r2, #1]
 8004f00:	701a      	strb	r2, [r3, #0]
	dns[2] = DHCP_allocated_dns[2];
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3302      	adds	r3, #2
 8004f06:	4a06      	ldr	r2, [pc, #24]	; (8004f20 <getDNSfromDHCP+0x38>)
 8004f08:	7892      	ldrb	r2, [r2, #2]
 8004f0a:	701a      	strb	r2, [r3, #0]
	dns[3] = DHCP_allocated_dns[3];
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3303      	adds	r3, #3
 8004f10:	4a03      	ldr	r2, [pc, #12]	; (8004f20 <getDNSfromDHCP+0x38>)
 8004f12:	78d2      	ldrb	r2, [r2, #3]
 8004f14:	701a      	strb	r2, [r3, #0]
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr
 8004f20:	20000128 	andcs	r0, r0, r8, lsr #2

08004f24 <get16>:
* Returns     : host byte order unsigned integer.
* Note        : Internal Function
********************************************************************************
*/
uint16_t get16(uint8_t * s)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
	uint16_t i;

	i = *s++ << 8;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	607a      	str	r2, [r7, #4]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	021b      	lsls	r3, r3, #8
 8004f38:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	89fb      	ldrh	r3, [r7, #14]
 8004f42:	4413      	add	r3, r2
 8004f44:	81fb      	strh	r3, [r7, #14]

	return i;
 8004f46:	89fb      	ldrh	r3, [r7, #14]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop

08004f54 <parse_name>:
* Returns     : the length of compressed message
* Note        :
********************************************************************************
*/
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b08b      	sub	sp, #44	; 0x2c
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 8004f62:	2300      	movs	r3, #0
 8004f64:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 8004f66:	2300      	movs	r3, #0
 8004f68:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]

	cp = compressed;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	623a      	str	r2, [r7, #32]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d102      	bne.n	8004f88 <parse_name+0x34>
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	3301      	adds	r3, #1
 8004f86:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 8004f88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f8e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f90:	d117      	bne.n	8004fc2 <parse_name+0x6e>
		{
			if (!indirect)
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d102      	bne.n	8004f9e <parse_name+0x4a>
				clen++;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 8004fa2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fa4:	021b      	lsls	r3, r3, #8
 8004fa6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8004faa:	6a3a      	ldr	r2, [r7, #32]
 8004fac:	7812      	ldrb	r2, [r2, #0]
 8004fae:	4413      	add	r3, r2
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	623a      	str	r2, [r7, #32]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 8004fc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d02b      	beq.n	8005020 <parse_name+0xcc>
			break;

		len -= slen + 1;
 8004fc8:	887a      	ldrh	r2, [r7, #2]
 8004fca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 8004fd6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	da02      	bge.n	8004fe4 <parse_name+0x90>
 8004fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fe2:	e038      	b.n	8005056 <parse_name+0x102>

		if (!indirect) clen += slen;
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10c      	bne.n	8005004 <parse_name+0xb0>
 8004fea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	4413      	add	r3, r2
 8004ff0:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 8004ff2:	e007      	b.n	8005004 <parse_name+0xb0>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	607a      	str	r2, [r7, #4]
 8004ffa:	6a3a      	ldr	r2, [r7, #32]
 8004ffc:	1c51      	adds	r1, r2, #1
 8004ffe:	6239      	str	r1, [r7, #32]
 8005000:	7812      	ldrb	r2, [r2, #0]
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005006:	1e5a      	subs	r2, r3, #1
 8005008:	84fa      	strh	r2, [r7, #38]	; 0x26
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1f2      	bne.n	8004ff4 <parse_name+0xa0>
		*buf++ = '.';
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	222e      	movs	r2, #46	; 0x2e
 8005016:	701a      	strb	r2, [r3, #0]
		nseg++;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	3301      	adds	r3, #1
 800501c:	617b      	str	r3, [r7, #20]
	}
 800501e:	e7a8      	b.n	8004f72 <parse_name+0x1e>
			break;
 8005020:	bf00      	nop

	if (nseg == 0)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10a      	bne.n	800503e <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	607a      	str	r2, [r7, #4]
 800502e:	222e      	movs	r2, #46	; 0x2e
 8005030:	701a      	strb	r2, [r3, #0]
		len--;
 8005032:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005036:	b29b      	uxth	r3, r3
 8005038:	3b01      	subs	r3, #1
 800503a:	b29b      	uxth	r3, r3
 800503c:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	701a      	strb	r2, [r3, #0]
	len--;
 8005048:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29b      	uxth	r3, r3
 8005052:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 8005054:	69fb      	ldr	r3, [r7, #28]
}
 8005056:	4618      	mov	r0, r3
 8005058:	372c      	adds	r7, #44	; 0x2c
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr

08005060 <dns_question>:
* Returns     : a pointer the to next record.
* Note        :
********************************************************************************
*/
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b0c4      	sub	sp, #272	; 0x110
 8005064:	af00      	add	r7, sp, #0
 8005066:	1d3b      	adds	r3, r7, #4
 8005068:	6018      	str	r0, [r3, #0]
 800506a:	463b      	mov	r3, r7
 800506c:	6019      	str	r1, [r3, #0]
	int len;
	char name[MAX_DNS_BUF_SIZE];

	len = parse_name(msg, cp, name, MAX_DNS_BUF_SIZE);
 800506e:	f107 020c 	add.w	r2, r7, #12
 8005072:	4639      	mov	r1, r7
 8005074:	1d38      	adds	r0, r7, #4
 8005076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800507a:	6809      	ldr	r1, [r1, #0]
 800507c:	6800      	ldr	r0, [r0, #0]
 800507e:	f7ff ff69 	bl	8004f54 <parse_name>
 8005082:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c


	if (len == -1) return 0;
 8005086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800508a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800508e:	d101      	bne.n	8005094 <dns_question+0x34>
 8005090:	2300      	movs	r3, #0
 8005092:	e012      	b.n	80050ba <dns_question+0x5a>

	cp += len;
 8005094:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005098:	463b      	mov	r3, r7
 800509a:	4639      	mov	r1, r7
 800509c:	6809      	ldr	r1, [r1, #0]
 800509e:	440a      	add	r2, r1
 80050a0:	601a      	str	r2, [r3, #0]
	cp += 2;		/* type */
 80050a2:	463b      	mov	r3, r7
 80050a4:	463a      	mov	r2, r7
 80050a6:	6812      	ldr	r2, [r2, #0]
 80050a8:	3202      	adds	r2, #2
 80050aa:	601a      	str	r2, [r3, #0]
	cp += 2;		/* class */
 80050ac:	463b      	mov	r3, r7
 80050ae:	463a      	mov	r2, r7
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	3202      	adds	r2, #2
 80050b4:	601a      	str	r2, [r3, #0]

	return cp;
 80050b6:	463b      	mov	r3, r7
 80050b8:	681b      	ldr	r3, [r3, #0]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <dns_answer>:
* Returns     : a pointer the to next record.
* Note        :
********************************************************************************
*/
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b0c6      	sub	sp, #280	; 0x118
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	f107 030c 	add.w	r3, r7, #12
 80050ce:	6018      	str	r0, [r3, #0]
 80050d0:	f107 0308 	add.w	r3, r7, #8
 80050d4:	6019      	str	r1, [r3, #0]
 80050d6:	1d3b      	adds	r3, r7, #4
 80050d8:	601a      	str	r2, [r3, #0]
	int len, type;
	char name[MAX_DNS_BUF_SIZE];

	len = parse_name(msg, cp, name, MAX_DNS_BUF_SIZE);
 80050da:	f107 0210 	add.w	r2, r7, #16
 80050de:	f107 0108 	add.w	r1, r7, #8
 80050e2:	f107 000c 	add.w	r0, r7, #12
 80050e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050ea:	6809      	ldr	r1, [r1, #0]
 80050ec:	6800      	ldr	r0, [r0, #0]
 80050ee:	f7ff ff31 	bl	8004f54 <parse_name>
 80050f2:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	if (len == -1) return 0;
 80050f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050fe:	d101      	bne.n	8005104 <dns_answer+0x40>
 8005100:	2300      	movs	r3, #0
 8005102:	e155      	b.n	80053b0 <dns_answer+0x2ec>

	cp += len;
 8005104:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005108:	f107 0308 	add.w	r3, r7, #8
 800510c:	f107 0108 	add.w	r1, r7, #8
 8005110:	6809      	ldr	r1, [r1, #0]
 8005112:	440a      	add	r2, r1
 8005114:	601a      	str	r2, [r3, #0]
	type = get16(cp);
 8005116:	f107 0308 	add.w	r3, r7, #8
 800511a:	6818      	ldr	r0, [r3, #0]
 800511c:	f7ff ff02 	bl	8004f24 <get16>
 8005120:	4603      	mov	r3, r0
 8005122:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	cp += 2;		/* type */
 8005126:	f107 0308 	add.w	r3, r7, #8
 800512a:	f107 0208 	add.w	r2, r7, #8
 800512e:	6812      	ldr	r2, [r2, #0]
 8005130:	3202      	adds	r2, #2
 8005132:	601a      	str	r2, [r3, #0]
	cp += 2;		/* class */
 8005134:	f107 0308 	add.w	r3, r7, #8
 8005138:	f107 0208 	add.w	r2, r7, #8
 800513c:	6812      	ldr	r2, [r2, #0]
 800513e:	3202      	adds	r2, #2
 8005140:	601a      	str	r2, [r3, #0]
	cp += 4;		/* ttl */
 8005142:	f107 0308 	add.w	r3, r7, #8
 8005146:	f107 0208 	add.w	r2, r7, #8
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	3204      	adds	r2, #4
 800514e:	601a      	str	r2, [r3, #0]
	cp += 2;		/* len */
 8005150:	f107 0308 	add.w	r3, r7, #8
 8005154:	f107 0208 	add.w	r2, r7, #8
 8005158:	6812      	ldr	r2, [r2, #0]
 800515a:	3202      	adds	r2, #2
 800515c:	601a      	str	r2, [r3, #0]


	switch (type)
 800515e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005162:	3b01      	subs	r3, #1
 8005164:	2b0f      	cmp	r3, #15
 8005166:	f200 811f 	bhi.w	80053a8 <dns_answer+0x2e4>
 800516a:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <dns_answer+0xac>)
 800516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005170:	080051b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, ip, lr}
 8005174:	08005211 	stmdaeq	r0, {r0, r4, r9, ip, lr}
 8005178:	080053a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, ip, lr}
 800517c:	080053a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, ip, lr}
 8005180:	08005211 	stmdaeq	r0, {r0, r4, r9, ip, lr}
 8005184:	080052e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, ip, lr}
 8005188:	08005211 	stmdaeq	r0, {r0, r4, r9, ip, lr}
 800518c:	08005211 	stmdaeq	r0, {r0, r4, r9, ip, lr}
 8005190:	08005211 	stmdaeq	r0, {r0, r4, r9, ip, lr}
 8005194:	080053a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, ip, lr}
 8005198:	080053a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, ip, lr}
 800519c:	08005211 	stmdaeq	r0, {r0, r4, r9, ip, lr}
 80051a0:	0800524f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r9, ip, lr}
 80051a4:	080053a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, ip, lr}
 80051a8:	0800529d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, ip, lr}
 80051ac:	080053a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, ip, lr}
	{
	case TYPE_A:
		/* Just read the address directly into the structure */
		ip_from_dns[0] = *cp++;
 80051b0:	f107 0308 	add.w	r3, r7, #8
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f107 0208 	add.w	r2, r7, #8
 80051ba:	1c59      	adds	r1, r3, #1
 80051bc:	6011      	str	r1, [r2, #0]
 80051be:	781a      	ldrb	r2, [r3, #0]
 80051c0:	1d3b      	adds	r3, r7, #4
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 80051c6:	1d3b      	adds	r3, r7, #4
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	f107 0308 	add.w	r3, r7, #8
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f107 0108 	add.w	r1, r7, #8
 80051d6:	1c58      	adds	r0, r3, #1
 80051d8:	6008      	str	r0, [r1, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 80051de:	1d3b      	adds	r3, r7, #4
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	1c9a      	adds	r2, r3, #2
 80051e4:	f107 0308 	add.w	r3, r7, #8
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f107 0108 	add.w	r1, r7, #8
 80051ee:	1c58      	adds	r0, r3, #1
 80051f0:	6008      	str	r0, [r1, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 80051f6:	1d3b      	adds	r3, r7, #4
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	1cda      	adds	r2, r3, #3
 80051fc:	f107 0308 	add.w	r3, r7, #8
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f107 0108 	add.w	r1, r7, #8
 8005206:	1c58      	adds	r0, r3, #1
 8005208:	6008      	str	r0, [r1, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	7013      	strb	r3, [r2, #0]
		break;
 800520e:	e0cc      	b.n	80053aa <dns_answer+0x2e6>
	case TYPE_MR:
	case TYPE_NS:
	case TYPE_PTR:
		/* These types all consist of a single domain name */
		/* convert it to ascii format */
		len = parse_name(msg, cp, name, MAX_DNS_BUF_SIZE);
 8005210:	f107 0210 	add.w	r2, r7, #16
 8005214:	f107 0108 	add.w	r1, r7, #8
 8005218:	f107 000c 	add.w	r0, r7, #12
 800521c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005220:	6809      	ldr	r1, [r1, #0]
 8005222:	6800      	ldr	r0, [r0, #0]
 8005224:	f7ff fe96 	bl	8004f54 <parse_name>
 8005228:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
		if (len == -1) return 0;
 800522c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005234:	d101      	bne.n	800523a <dns_answer+0x176>
 8005236:	2300      	movs	r3, #0
 8005238:	e0ba      	b.n	80053b0 <dns_answer+0x2ec>

		cp += len;
 800523a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800523e:	f107 0308 	add.w	r3, r7, #8
 8005242:	f107 0108 	add.w	r1, r7, #8
 8005246:	6809      	ldr	r1, [r1, #0]
 8005248:	440a      	add	r2, r1
 800524a:	601a      	str	r2, [r3, #0]
		break;
 800524c:	e0ad      	b.n	80053aa <dns_answer+0x2e6>
	case TYPE_HINFO:
		len = *cp++;
 800524e:	f107 0308 	add.w	r3, r7, #8
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f107 0208 	add.w	r2, r7, #8
 8005258:	1c59      	adds	r1, r3, #1
 800525a:	6011      	str	r1, [r2, #0]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		cp += len;
 8005262:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005266:	f107 0308 	add.w	r3, r7, #8
 800526a:	f107 0108 	add.w	r1, r7, #8
 800526e:	6809      	ldr	r1, [r1, #0]
 8005270:	440a      	add	r2, r1
 8005272:	601a      	str	r2, [r3, #0]

		len = *cp++;
 8005274:	f107 0308 	add.w	r3, r7, #8
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f107 0208 	add.w	r2, r7, #8
 800527e:	1c59      	adds	r1, r3, #1
 8005280:	6011      	str	r1, [r2, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		cp += len;
 8005288:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800528c:	f107 0308 	add.w	r3, r7, #8
 8005290:	f107 0108 	add.w	r1, r7, #8
 8005294:	6809      	ldr	r1, [r1, #0]
 8005296:	440a      	add	r2, r1
 8005298:	601a      	str	r2, [r3, #0]
		break;
 800529a:	e086      	b.n	80053aa <dns_answer+0x2e6>
	case TYPE_MX:
		cp += 2;
 800529c:	f107 0308 	add.w	r3, r7, #8
 80052a0:	f107 0208 	add.w	r2, r7, #8
 80052a4:	6812      	ldr	r2, [r2, #0]
 80052a6:	3202      	adds	r2, #2
 80052a8:	601a      	str	r2, [r3, #0]
		/* Get domain name of exchanger */
		len = parse_name(msg, cp, name, MAX_DNS_BUF_SIZE);
 80052aa:	f107 0210 	add.w	r2, r7, #16
 80052ae:	f107 0108 	add.w	r1, r7, #8
 80052b2:	f107 000c 	add.w	r0, r7, #12
 80052b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052ba:	6809      	ldr	r1, [r1, #0]
 80052bc:	6800      	ldr	r0, [r0, #0]
 80052be:	f7ff fe49 	bl	8004f54 <parse_name>
 80052c2:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
		if (len == -1) return 0;
 80052c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ce:	d101      	bne.n	80052d4 <dns_answer+0x210>
 80052d0:	2300      	movs	r3, #0
 80052d2:	e06d      	b.n	80053b0 <dns_answer+0x2ec>

		cp += len;
 80052d4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80052d8:	f107 0308 	add.w	r3, r7, #8
 80052dc:	f107 0108 	add.w	r1, r7, #8
 80052e0:	6809      	ldr	r1, [r1, #0]
 80052e2:	440a      	add	r2, r1
 80052e4:	601a      	str	r2, [r3, #0]
		break;
 80052e6:	e060      	b.n	80053aa <dns_answer+0x2e6>
	case TYPE_SOA:
		/* Get domain name of name server */
		len = parse_name(msg, cp, name, MAX_DNS_BUF_SIZE);
 80052e8:	f107 0210 	add.w	r2, r7, #16
 80052ec:	f107 0108 	add.w	r1, r7, #8
 80052f0:	f107 000c 	add.w	r0, r7, #12
 80052f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052f8:	6809      	ldr	r1, [r1, #0]
 80052fa:	6800      	ldr	r0, [r0, #0]
 80052fc:	f7ff fe2a 	bl	8004f54 <parse_name>
 8005300:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
		if (len == -1) return 0;
 8005304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800530c:	d101      	bne.n	8005312 <dns_answer+0x24e>
 800530e:	2300      	movs	r3, #0
 8005310:	e04e      	b.n	80053b0 <dns_answer+0x2ec>

		cp += len;
 8005312:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005316:	f107 0308 	add.w	r3, r7, #8
 800531a:	f107 0108 	add.w	r1, r7, #8
 800531e:	6809      	ldr	r1, [r1, #0]
 8005320:	440a      	add	r2, r1
 8005322:	601a      	str	r2, [r3, #0]

		/* Get domain name of responsible person */
		len = parse_name(msg, cp, name, MAX_DNS_BUF_SIZE);
 8005324:	f107 0210 	add.w	r2, r7, #16
 8005328:	f107 0108 	add.w	r1, r7, #8
 800532c:	f107 000c 	add.w	r0, r7, #12
 8005330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005334:	6809      	ldr	r1, [r1, #0]
 8005336:	6800      	ldr	r0, [r0, #0]
 8005338:	f7ff fe0c 	bl	8004f54 <parse_name>
 800533c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
		if (len == -1) return 0;
 8005340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005348:	d101      	bne.n	800534e <dns_answer+0x28a>
 800534a:	2300      	movs	r3, #0
 800534c:	e030      	b.n	80053b0 <dns_answer+0x2ec>

		cp += len;
 800534e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005352:	f107 0308 	add.w	r3, r7, #8
 8005356:	f107 0108 	add.w	r1, r7, #8
 800535a:	6809      	ldr	r1, [r1, #0]
 800535c:	440a      	add	r2, r1
 800535e:	601a      	str	r2, [r3, #0]

		cp += 4;
 8005360:	f107 0308 	add.w	r3, r7, #8
 8005364:	f107 0208 	add.w	r2, r7, #8
 8005368:	6812      	ldr	r2, [r2, #0]
 800536a:	3204      	adds	r2, #4
 800536c:	601a      	str	r2, [r3, #0]
		cp += 4;
 800536e:	f107 0308 	add.w	r3, r7, #8
 8005372:	f107 0208 	add.w	r2, r7, #8
 8005376:	6812      	ldr	r2, [r2, #0]
 8005378:	3204      	adds	r2, #4
 800537a:	601a      	str	r2, [r3, #0]
		cp += 4;
 800537c:	f107 0308 	add.w	r3, r7, #8
 8005380:	f107 0208 	add.w	r2, r7, #8
 8005384:	6812      	ldr	r2, [r2, #0]
 8005386:	3204      	adds	r2, #4
 8005388:	601a      	str	r2, [r3, #0]
		cp += 4;
 800538a:	f107 0308 	add.w	r3, r7, #8
 800538e:	f107 0208 	add.w	r2, r7, #8
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	3204      	adds	r2, #4
 8005396:	601a      	str	r2, [r3, #0]
		cp += 4;
 8005398:	f107 0308 	add.w	r3, r7, #8
 800539c:	f107 0208 	add.w	r2, r7, #8
 80053a0:	6812      	ldr	r2, [r2, #0]
 80053a2:	3204      	adds	r2, #4
 80053a4:	601a      	str	r2, [r3, #0]
		break;
 80053a6:	e000      	b.n	80053aa <dns_answer+0x2e6>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 80053a8:	bf00      	nop
	}

	return cp;
 80053aa:	f107 0308 	add.w	r3, r7, #8
 80053ae:	681b      	ldr	r3, [r3, #0]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop

080053bc <parseMSG>:
* Returns     : 1 - is success, 0 - is fail
* Note        :
********************************************************************************
*/
uint8_t parseMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(pdhdr));
 80053cc:	2204      	movs	r2, #4
 80053ce:	2100      	movs	r1, #0
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f7fa ff13 	bl	80001fc <memset>

	pdhdr->id = get16(&msg[0]);
 80053d6:	6978      	ldr	r0, [r7, #20]
 80053d8:	f7ff fda4 	bl	8004f24 <get16>
 80053dc:	4603      	mov	r3, r0
 80053de:	461a      	mov	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	3302      	adds	r3, #2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff fd9b 	bl	8004f24 <get16>
 80053ee:	4603      	mov	r3, r0
 80053f0:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 80053f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	da02      	bge.n	8005400 <parseMSG+0x44>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 8005400:	8a7b      	ldrh	r3, [r7, #18]
 8005402:	0adb      	lsrs	r3, r3, #11
 8005404:	b29b      	uxth	r3, r3
 8005406:	b2db      	uxtb	r3, r3
 8005408:	f003 030f 	and.w	r3, r3, #15
 800540c:	b2da      	uxtb	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 8005412:	8a7b      	ldrh	r3, [r7, #18]
 8005414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <parseMSG+0x66>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2201      	movs	r2, #1
 8005420:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 8005422:	8a7b      	ldrh	r3, [r7, #18]
 8005424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <parseMSG+0x76>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2201      	movs	r2, #1
 8005430:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 8005432:	8a7b      	ldrh	r3, [r7, #18]
 8005434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <parseMSG+0x86>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 8005442:	8a7b      	ldrh	r3, [r7, #18]
 8005444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <parseMSG+0x96>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2201      	movs	r2, #1
 8005450:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 8005452:	8a7b      	ldrh	r3, [r7, #18]
 8005454:	b2db      	uxtb	r3, r3
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	b2da      	uxtb	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	3304      	adds	r3, #4
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff fd5d 	bl	8004f24 <get16>
 800546a:	4603      	mov	r3, r0
 800546c:	461a      	mov	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	3306      	adds	r3, #6
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff fd54 	bl	8004f24 <get16>
 800547c:	4603      	mov	r3, r0
 800547e:	461a      	mov	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	3308      	adds	r3, #8
 8005488:	4618      	mov	r0, r3
 800548a:	f7ff fd4b 	bl	8004f24 <get16>
 800548e:	4603      	mov	r3, r0
 8005490:	461a      	mov	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	330a      	adds	r3, #10
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff fd42 	bl	8004f24 <get16>
 80054a0:	4603      	mov	r3, r0
 80054a2:	461a      	mov	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	330c      	adds	r3, #12
 80054ac:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 80054ae:	2300      	movs	r3, #0
 80054b0:	83fb      	strh	r3, [r7, #30]
 80054b2:	e007      	b.n	80054c4 <parseMSG+0x108>
	{
		cp = dns_question(msg, cp);
 80054b4:	69b9      	ldr	r1, [r7, #24]
 80054b6:	6978      	ldr	r0, [r7, #20]
 80054b8:	f7ff fdd2 	bl	8005060 <dns_question>
 80054bc:	61b8      	str	r0, [r7, #24]
	for (i = 0; i < pdhdr->qdcount; i++)
 80054be:	8bfb      	ldrh	r3, [r7, #30]
 80054c0:	3301      	adds	r3, #1
 80054c2:	83fb      	strh	r3, [r7, #30]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	895b      	ldrh	r3, [r3, #10]
 80054c8:	8bfa      	ldrh	r2, [r7, #30]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d3f2      	bcc.n	80054b4 <parseMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 80054ce:	2300      	movs	r3, #0
 80054d0:	83fb      	strh	r3, [r7, #30]
 80054d2:	e008      	b.n	80054e6 <parseMSG+0x12a>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	69b9      	ldr	r1, [r7, #24]
 80054d8:	6978      	ldr	r0, [r7, #20]
 80054da:	f7ff fdf3 	bl	80050c4 <dns_answer>
 80054de:	61b8      	str	r0, [r7, #24]
	for (i = 0; i < pdhdr->ancount; i++)
 80054e0:	8bfb      	ldrh	r3, [r7, #30]
 80054e2:	3301      	adds	r3, #1
 80054e4:	83fb      	strh	r3, [r7, #30]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	899b      	ldrh	r3, [r3, #12]
 80054ea:	8bfa      	ldrh	r2, [r7, #30]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d3f1      	bcc.n	80054d4 <parseMSG+0x118>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 80054f0:	2300      	movs	r3, #0
 80054f2:	83fb      	strh	r3, [r7, #30]
 80054f4:	e002      	b.n	80054fc <parseMSG+0x140>
 80054f6:	8bfb      	ldrh	r3, [r7, #30]
 80054f8:	3301      	adds	r3, #1
 80054fa:	83fb      	strh	r3, [r7, #30]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	89db      	ldrh	r3, [r3, #14]
 8005500:	8bfa      	ldrh	r2, [r7, #30]
 8005502:	429a      	cmp	r2, r3
 8005504:	d3f7      	bcc.n	80054f6 <parseMSG+0x13a>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 8005506:	2300      	movs	r3, #0
 8005508:	83fb      	strh	r3, [r7, #30]
 800550a:	e002      	b.n	8005512 <parseMSG+0x156>
 800550c:	8bfb      	ldrh	r3, [r7, #30]
 800550e:	3301      	adds	r3, #1
 8005510:	83fb      	strh	r3, [r7, #30]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8a1b      	ldrh	r3, [r3, #16]
 8005516:	8bfa      	ldrh	r2, [r7, #30]
 8005518:	429a      	cmp	r2, r3
 800551a:	d3f7      	bcc.n	800550c <parseMSG+0x150>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	7a1b      	ldrb	r3, [r3, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <parseMSG+0x16c>
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <parseMSG+0x16e>
	else return 0;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3720      	adds	r7, #32
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop

08005534 <put16>:
* Returns     : a pointer to the buffer.
* Note        : Internal Function
********************************************************************************
*/
uint8_t * put16(uint8_t * s, uint16_t i)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	607a      	str	r2, [r7, #4]
 8005546:	887a      	ldrh	r2, [r7, #2]
 8005548:	0a12      	lsrs	r2, r2, #8
 800554a:	b292      	uxth	r2, r2
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	607a      	str	r2, [r7, #4]
 8005556:	887a      	ldrh	r2, [r7, #2]
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	701a      	strb	r2, [r3, #0]

	return s;
 800555c:	687b      	ldr	r3, [r7, #4]
}
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr

08005568 <dns_makequery>:
* Returns     : the pointer to the DNS message.
* Note        :
********************************************************************************
*/
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 8005568:	b590      	push	{r4, r7, lr}
 800556a:	b0c9      	sub	sp, #292	; 0x124
 800556c:	af00      	add	r7, sp, #0
 800556e:	4604      	mov	r4, r0
 8005570:	f107 0008 	add.w	r0, r7, #8
 8005574:	6001      	str	r1, [r0, #0]
 8005576:	1d39      	adds	r1, r7, #4
 8005578:	600a      	str	r2, [r1, #0]
 800557a:	4619      	mov	r1, r3
 800557c:	f107 030e 	add.w	r3, r7, #14
 8005580:	4622      	mov	r2, r4
 8005582:	801a      	strh	r2, [r3, #0]
 8005584:	f107 030c 	add.w	r3, r7, #12
 8005588:	460a      	mov	r2, r1
 800558a:	801a      	strh	r2, [r3, #0]
	char sname[MAX_DNS_BUF_SIZE];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 800558c:	1d3b      	adds	r3, r7, #4
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	MSG_ID++;
 8005594:	4b62      	ldr	r3, [pc, #392]	; (8005720 <dns_makequery+0x1b8>)
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	3301      	adds	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	4b60      	ldr	r3, [pc, #384]	; (8005720 <dns_makequery+0x1b8>)
 800559e:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, MSG_ID);
 80055a0:	4b5f      	ldr	r3, [pc, #380]	; (8005720 <dns_makequery+0x1b8>)
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	4619      	mov	r1, r3
 80055a6:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80055aa:	f7ff ffc3 	bl	8005534 <put16>
 80055ae:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	p = (op << 11) | 0x0100;			/* Recursion desired */
 80055b2:	f107 030e 	add.w	r3, r7, #14
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	02db      	lsls	r3, r3, #11
 80055ba:	b21b      	sxth	r3, r3
 80055bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c0:	b21b      	sxth	r3, r3
 80055c2:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
	cp = put16(cp, p);
 80055c6:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80055ca:	4619      	mov	r1, r3
 80055cc:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80055d0:	f7ff ffb0 	bl	8005534 <put16>
 80055d4:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	cp = put16(cp, 1);
 80055d8:	2101      	movs	r1, #1
 80055da:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80055de:	f7ff ffa9 	bl	8005534 <put16>
 80055e2:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	cp = put16(cp, 0);
 80055e6:	2100      	movs	r1, #0
 80055e8:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80055ec:	f7ff ffa2 	bl	8005534 <put16>
 80055f0:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	cp = put16(cp, 0);
 80055f4:	2100      	movs	r1, #0
 80055f6:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80055fa:	f7ff ff9b 	bl	8005534 <put16>
 80055fe:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	cp = put16(cp, 0);
 8005602:	2100      	movs	r1, #0
 8005604:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8005608:	f7ff ff94 	bl	8005534 <put16>
 800560c:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

	strcpy(sname, name);
 8005610:	f107 0308 	add.w	r3, r7, #8
 8005614:	f107 0210 	add.w	r2, r7, #16
 8005618:	6819      	ldr	r1, [r3, #0]
 800561a:	4610      	mov	r0, r2
 800561c:	f7fa ffb8 	bl	8000590 <strcpy>
	dname = sname;
 8005620:	f107 0310 	add.w	r3, r7, #16
 8005624:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	dlen = strlen(dname);
 8005628:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800562c:	f7fb f80e 	bl	800064c <strlen>
 8005630:	4603      	mov	r3, r0
 8005632:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 8005636:	212e      	movs	r1, #46	; 0x2e
 8005638:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800563c:	f7fa ff40 	bl	80004c0 <strchr>
 8005640:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 8005644:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005648:	2b00      	cmp	r3, #0
 800564a:	d008      	beq.n	800565e <dns_makequery+0xf6>
 800564c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005650:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005654:	1ad2      	subs	r2, r2, r3
 8005656:	f107 030c 	add.w	r3, r7, #12
 800565a:	801a      	strh	r2, [r3, #0]
 800565c:	e004      	b.n	8005668 <dns_makequery+0x100>
		else len = dlen;			/* Last component */
 800565e:	f107 030c 	add.w	r3, r7, #12
 8005662:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8005666:	801a      	strh	r2, [r3, #0]

		*cp++ = len;				/* Write length of component */
 8005668:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005672:	f107 020c 	add.w	r2, r7, #12
 8005676:	8812      	ldrh	r2, [r2, #0]
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 800567c:	f107 030c 	add.w	r3, r7, #12
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d031      	beq.n	80056ea <dns_makequery+0x182>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 8005686:	f107 030c 	add.w	r3, r7, #12
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	461a      	mov	r2, r3
 800568e:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8005692:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8005696:	f7fb f855 	bl	8000744 <strncpy>
		cp += len;
 800569a:	f107 030c 	add.w	r3, r7, #12
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80056a4:	4413      	add	r3, r2
 80056a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		if (cp1 == NULL)
 80056aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d107      	bne.n	80056c2 <dns_makequery+0x15a>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 80056b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80056bc:	2200      	movs	r2, #0
 80056be:	701a      	strb	r2, [r3, #0]
			break;
 80056c0:	e014      	b.n	80056ec <dns_makequery+0x184>
		}
		dname += len+1;
 80056c2:	f107 030c 	add.w	r3, r7, #12
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	3301      	adds	r3, #1
 80056ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80056ce:	4413      	add	r3, r2
 80056d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		dlen -= len+1;
 80056d4:	f107 030c 	add.w	r3, r7, #12
 80056d8:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
	}
 80056e8:	e7a5      	b.n	8005636 <dns_makequery+0xce>
		if (len == 0) break;
 80056ea:	bf00      	nop

	cp = put16(cp, 0x0001);				/* type */
 80056ec:	2101      	movs	r1, #1
 80056ee:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80056f2:	f7ff ff1f 	bl	8005534 <put16>
 80056f6:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	cp = put16(cp, 0x0001);				/* class */
 80056fa:	2101      	movs	r1, #1
 80056fc:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8005700:	f7ff ff18 	bl	8005534 <put16>
 8005704:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 8005708:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800570c:	1d3b      	adds	r3, r7, #4
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	b21b      	sxth	r3, r3
}
 8005714:	4618      	mov	r0, r3
 8005716:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800571a:	46bd      	mov	sp, r7
 800571c:	bd90      	pop	{r4, r7, pc}
 800571e:	bf00      	nop
 8005720:	20003680 	andcs	r3, r0, r0, lsl #13

08005724 <DNS_query>:
* Returns     : if succeeds : 1, fails : 0
* Note        :
********************************************************************************
*/
uint8_t DNS_query(uint8_t * dns_server, uint8_t * name, uint8_t * ip_from_dns)
{
 8005724:	b590      	push	{r4, r7, lr}
 8005726:	b08f      	sub	sp, #60	; 0x3c
 8005728:	af02      	add	r7, sp, #8
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;
	uint16_t dns_port;

	len = dns_makequery(0, (char *)name, dns_buf, MAX_DNS_BUF_SIZE);
 8005730:	4b3a      	ldr	r3, [pc, #232]	; (800581c <DNS_query+0xf8>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005738:	68b9      	ldr	r1, [r7, #8]
 800573a:	2000      	movs	r0, #0
 800573c:	f7ff ff14 	bl	8005568 <dns_makequery>
 8005740:	4603      	mov	r3, r0
 8005742:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, dns_buf, len, dns_server, IPPORT_DOMAIN);
 8005744:	4b36      	ldr	r3, [pc, #216]	; (8005820 <DNS_query+0xfc>)
 8005746:	7818      	ldrb	r0, [r3, #0]
 8005748:	4b34      	ldr	r3, [pc, #208]	; (800581c <DNS_query+0xf8>)
 800574a:	6819      	ldr	r1, [r3, #0]
 800574c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800574e:	2335      	movs	r3, #53	; 0x35
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f7fc fcb8 	bl	80020c8 <sendto>


	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8005758:	4b31      	ldr	r3, [pc, #196]	; (8005820 <DNS_query+0xfc>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	4618      	mov	r0, r3
 800575e:	f7fd fe99 	bl	8003494 <getSn_RX_RSR>
 8005762:	4603      	mov	r3, r0
 8005764:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005766:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005768:	2b00      	cmp	r3, #0
 800576a:	d020      	beq.n	80057ae <DNS_query+0x8a>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 800576c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800576e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005772:	d902      	bls.n	800577a <DNS_query+0x56>
 8005774:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005778:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, dns_buf, len, ip, &port);
 800577a:	4b29      	ldr	r3, [pc, #164]	; (8005820 <DNS_query+0xfc>)
 800577c:	7818      	ldrb	r0, [r3, #0]
 800577e:	4b27      	ldr	r3, [pc, #156]	; (800581c <DNS_query+0xf8>)
 8005780:	6819      	ldr	r1, [r3, #0]
 8005782:	f107 0414 	add.w	r4, r7, #20
 8005786:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005788:	f107 0312 	add.w	r3, r7, #18
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	4623      	mov	r3, r4
 8005790:	f7fc fd9e 	bl	80022d0 <recvfrom>
 8005794:	4603      	mov	r3, r0
 8005796:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 8005798:	bf00      	nop

			sendto(DNS_SOCKET, dns_buf, len, dns_server, IPPORT_DOMAIN);
		}
	}

	return(parseMSG(&dhp, dns_buf, ip_from_dns));	/* Convert to local format */
 800579a:	4b20      	ldr	r3, [pc, #128]	; (800581c <DNS_query+0xf8>)
 800579c:	6819      	ldr	r1, [r3, #0]
 800579e:	f107 0318 	add.w	r3, r7, #24
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff fe09 	bl	80053bc <parseMSG>
 80057aa:	4603      	mov	r3, r0
 80057ac:	e032      	b.n	8005814 <DNS_query+0xf0>
		ret_check_timeout = check_DNS_timeout();
 80057ae:	f000 f8a1 	bl	80058f4 <check_DNS_timeout>
 80057b2:	4603      	mov	r3, r0
 80057b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 80057b8:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80057bc:	2b00      	cmp	r3, #0
 80057be:	da01      	bge.n	80057c4 <DNS_query+0xa0>
			return 0; // timeout occurred
 80057c0:	2300      	movs	r3, #0
 80057c2:	e027      	b.n	8005814 <DNS_query+0xf0>
		else if (ret_check_timeout == 0) {
 80057c4:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1c5      	bne.n	8005758 <DNS_query+0x34>
			dns_port = rand() % 2000 + 63535; // 63535 ~ 65534
 80057cc:	f7fa fd96 	bl	80002fc <rand>
 80057d0:	4602      	mov	r2, r0
 80057d2:	4b14      	ldr	r3, [pc, #80]	; (8005824 <DNS_query+0x100>)
 80057d4:	fb83 1302 	smull	r1, r3, r3, r2
 80057d8:	11d9      	asrs	r1, r3, #7
 80057da:	17d3      	asrs	r3, r2, #31
 80057dc:	1acb      	subs	r3, r1, r3
 80057de:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80057e2:	fb01 f303 	mul.w	r3, r1, r3
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f2a3 73d1 	subw	r3, r3, #2001	; 0x7d1
 80057ee:	857b      	strh	r3, [r7, #42]	; 0x2a
			socket(DNS_SOCKET, Sn_MR_UDP, dns_port, 0);
 80057f0:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <DNS_query+0xfc>)
 80057f2:	7818      	ldrb	r0, [r3, #0]
 80057f4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80057f6:	2300      	movs	r3, #0
 80057f8:	2102      	movs	r1, #2
 80057fa:	f7fc f89f 	bl	800193c <socket>
			sendto(DNS_SOCKET, dns_buf, len, dns_server, IPPORT_DOMAIN);
 80057fe:	4b08      	ldr	r3, [pc, #32]	; (8005820 <DNS_query+0xfc>)
 8005800:	7818      	ldrb	r0, [r3, #0]
 8005802:	4b06      	ldr	r3, [pc, #24]	; (800581c <DNS_query+0xf8>)
 8005804:	6819      	ldr	r1, [r3, #0]
 8005806:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005808:	2335      	movs	r3, #53	; 0x35
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f7fc fc5b 	bl	80020c8 <sendto>
	}
 8005812:	e7a1      	b.n	8005758 <DNS_query+0x34>
}
 8005814:	4618      	mov	r0, r3
 8005816:	3734      	adds	r7, #52	; 0x34
 8005818:	46bd      	mov	sp, r7
 800581a:	bd90      	pop	{r4, r7, pc}
 800581c:	20003674 	andcs	r3, r0, r4, ror r6
 8005820:	20003678 	andcs	r3, r0, r8, ror r6
 8005824:	10624dd3 	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>

08005828 <DNS_init>:
* Note        :
********************************************************************************
*/

void DNS_init(uint8_t s, uint8_t * buf)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	4603      	mov	r3, r0
 8005830:	6039      	str	r1, [r7, #0]
 8005832:	71fb      	strb	r3, [r7, #7]
	uint16_t dns_port = 3000;
 8005834:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005838:	81fb      	strh	r3, [r7, #14]

	DNS_SOCKET = s; // SOCK_DNS
 800583a:	4a13      	ldr	r2, [pc, #76]	; (8005888 <DNS_init+0x60>)
 800583c:	79fb      	ldrb	r3, [r7, #7]
 800583e:	7013      	strb	r3, [r2, #0]
	dns_buf = buf; // User's shared buffer
 8005840:	4a12      	ldr	r2, [pc, #72]	; (800588c <DNS_init+0x64>)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6013      	str	r3, [r2, #0]
	MSG_ID = 0x1122;
 8005846:	4b12      	ldr	r3, [pc, #72]	; (8005890 <DNS_init+0x68>)
 8005848:	f241 1222 	movw	r2, #4386	; 0x1122
 800584c:	801a      	strh	r2, [r3, #0]

	// Generate random port number
	//srand(seed); users can use the seed value for make random variable.
	dns_port = rand() % 2000 + 63535; // 63535 ~ 65534
 800584e:	f7fa fd55 	bl	80002fc <rand>
 8005852:	4602      	mov	r2, r0
 8005854:	4b0f      	ldr	r3, [pc, #60]	; (8005894 <DNS_init+0x6c>)
 8005856:	fb83 1302 	smull	r1, r3, r3, r2
 800585a:	11d9      	asrs	r1, r3, #7
 800585c:	17d3      	asrs	r3, r2, #31
 800585e:	1acb      	subs	r3, r1, r3
 8005860:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005864:	fb01 f303 	mul.w	r3, r1, r3
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	b29b      	uxth	r3, r3
 800586c:	f2a3 73d1 	subw	r3, r3, #2001	; 0x7d1
 8005870:	81fb      	strh	r3, [r7, #14]
	// Socket open
	socket(DNS_SOCKET, Sn_MR_UDP, dns_port, 0);
 8005872:	4b05      	ldr	r3, [pc, #20]	; (8005888 <DNS_init+0x60>)
 8005874:	7818      	ldrb	r0, [r3, #0]
 8005876:	89fa      	ldrh	r2, [r7, #14]
 8005878:	2300      	movs	r3, #0
 800587a:	2102      	movs	r1, #2
 800587c:	f7fc f85e 	bl	800193c <socket>
}
 8005880:	bf00      	nop
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	20003678 	andcs	r3, r0, r8, ror r6
 800588c:	20003674 	andcs	r3, r0, r4, ror r6
 8005890:	20003680 	andcs	r3, r0, r0, lsl #13
 8005894:	10624dd3 	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>

08005898 <DNS_run>:
* Note        :
********************************************************************************
*/

uint8_t DNS_run(uint8_t * dns_server_1st, uint8_t * dns_server_2nd, uint8_t * name, uint8_t * ip_from_dns)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
 80058a4:	603b      	str	r3, [r7, #0]

#ifdef _DNS_DEBUG_
	printf("> DNS Query to Primary DNS Server : %d.%d.%d.%d\r\n", dns_server_1st[0], dns_server_1st[1], dns_server_1st[2], dns_server_1st[3]);
#endif

	ret = DNS_query(dns_server_1st, name, ip_from_dns);
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f7ff ff3a 	bl	8005724 <DNS_query>
 80058b0:	4603      	mov	r3, r0
 80058b2:	75fb      	strb	r3, [r7, #23]

	if(!ret) {
 80058b4:	7dfb      	ldrb	r3, [r7, #23]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10f      	bne.n	80058da <DNS_run+0x42>
		if(dns_server_2nd != 0) {
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00c      	beq.n	80058da <DNS_run+0x42>

#ifdef _DNS_DEBUG_
			printf("> DNS Query to Secondary DNS Server : %d.%d.%d.%d\r\n", dns_server_2nd[0], dns_server_2nd[1], dns_server_2nd[2], dns_server_2nd[3]);
#endif
			ret = DNS_query(dns_server_2nd, name, ip_from_dns);
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	6879      	ldr	r1, [r7, #4]
 80058c4:	68b8      	ldr	r0, [r7, #8]
 80058c6:	f7ff ff2d 	bl	8005724 <DNS_query>
 80058ca:	4603      	mov	r3, r0
 80058cc:	75fb      	strb	r3, [r7, #23]
			if(ret == 1) ret++;
 80058ce:	7dfb      	ldrb	r3, [r7, #23]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d102      	bne.n	80058da <DNS_run+0x42>
 80058d4:	7dfb      	ldrb	r3, [r7, #23]
 80058d6:	3301      	adds	r3, #1
 80058d8:	75fb      	strb	r3, [r7, #23]
		}
	}

	close(DNS_SOCKET);
 80058da:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <DNS_run+0x58>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fc f930 	bl	8001b44 <close>
	// Return value
	// 0 - both failed / 1 - primary success / 2 - secondary success (primary failed)
	return ret;
 80058e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20003678 	andcs	r3, r0, r8, ror r6

080058f4 <check_DNS_timeout>:
* Note        : timeout : retry count and timer both over.
********************************************************************************
*/

int8_t check_DNS_timeout(void)
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0
	static uint8_t retry_count;

	if(dns_time >= DNS_WAIT_TIME)
 80058f8:	4b0e      	ldr	r3, [pc, #56]	; (8005934 <check_DNS_timeout+0x40>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d914      	bls.n	800592a <check_DNS_timeout+0x36>
	{
		dns_time = 0;
 8005900:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <check_DNS_timeout+0x40>)
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 8005906:	4b0c      	ldr	r3, [pc, #48]	; (8005938 <check_DNS_timeout+0x44>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d905      	bls.n	800591a <check_DNS_timeout+0x26>
			retry_count = 0;
 800590e:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <check_DNS_timeout+0x44>)
 8005910:	2200      	movs	r2, #0
 8005912:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8005914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005918:	e008      	b.n	800592c <check_DNS_timeout+0x38>
		}
		retry_count++;
 800591a:	4b07      	ldr	r3, [pc, #28]	; (8005938 <check_DNS_timeout+0x44>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	3301      	adds	r3, #1
 8005920:	b2da      	uxtb	r2, r3
 8005922:	4b05      	ldr	r3, [pc, #20]	; (8005938 <check_DNS_timeout+0x44>)
 8005924:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 8005926:	2300      	movs	r3, #0
 8005928:	e000      	b.n	800592c <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 800592a:	2301      	movs	r3, #1
}
 800592c:	4618      	mov	r0, r3
 800592e:	46bd      	mov	sp, r7
 8005930:	bc80      	pop	{r7}
 8005932:	4770      	bx	lr
 8005934:	2000367c 	andcs	r3, r0, ip, ror r6
 8005938:	20000138 	andcs	r0, r0, r8, lsr r1

0800593c <DNS_timerHandler>:
* Returns    : None.
* Note       :
*********************************************************************************************************
*/
void DNS_timerHandler(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
	dns_time++;
 8005940:	4b04      	ldr	r3, [pc, #16]	; (8005954 <DNS_timerHandler+0x18>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3301      	adds	r3, #1
 8005946:	4a03      	ldr	r2, [pc, #12]	; (8005954 <DNS_timerHandler+0x18>)
 8005948:	6013      	str	r3, [r2, #0]
}
 800594a:	bf00      	nop
 800594c:	46bd      	mov	sp, r7
 800594e:	bc80      	pop	{r7}
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	2000367c 	andcs	r3, r0, ip, ror r6

08005958 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8005960:	4a05      	ldr	r2, [pc, #20]	; (8005978 <NVIC_PriorityGroupConfig+0x20>)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800596c:	60d3      	str	r3, [r2, #12]
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr
 8005978:	e000ed00 	and	lr, r0, r0, lsl #26

0800597c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8005984:	2300      	movs	r3, #0
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	2300      	movs	r3, #0
 800598a:	613b      	str	r3, [r7, #16]
 800598c:	230f      	movs	r3, #15
 800598e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	78db      	ldrb	r3, [r3, #3]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d03a      	beq.n	8005a0e <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8005998:	4b27      	ldr	r3, [pc, #156]	; (8005a38 <NVIC_Init+0xbc>)
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	43db      	mvns	r3, r3
 800599e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059a2:	0a1b      	lsrs	r3, r3, #8
 80059a4:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f1c3 0304 	rsb	r3, r3, #4
 80059ac:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	fa22 f303 	lsr.w	r3, r2, r3
 80059b6:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	461a      	mov	r2, r3
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	789b      	ldrb	r3, [r3, #2]
 80059ca:	461a      	mov	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4013      	ands	r3, r2
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	011b      	lsls	r3, r3, #4
 80059da:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80059dc:	4a17      	ldr	r2, [pc, #92]	; (8005a3c <NVIC_Init+0xc0>)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	6979      	ldr	r1, [r7, #20]
 80059e4:	b2c9      	uxtb	r1, r1
 80059e6:	4413      	add	r3, r2
 80059e8:	460a      	mov	r2, r1
 80059ea:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80059ee:	4a13      	ldr	r2, [pc, #76]	; (8005a3c <NVIC_Init+0xc0>)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	095b      	lsrs	r3, r3, #5
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	f003 031f 	and.w	r3, r3, #31
 8005a02:	2101      	movs	r1, #1
 8005a04:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005a08:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8005a0c:	e00f      	b.n	8005a2e <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005a0e:	490b      	ldr	r1, [pc, #44]	; (8005a3c <NVIC_Init+0xc0>)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	095b      	lsrs	r3, r3, #5
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	f003 031f 	and.w	r3, r3, #31
 8005a22:	2201      	movs	r2, #1
 8005a24:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005a26:	f100 0320 	add.w	r3, r0, #32
 8005a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005a2e:	bf00      	nop
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr
 8005a38:	e000ed00 	and	lr, r0, r0, lsl #26
 8005a3c:	e000e100 	and	lr, r0, r0, lsl #2

08005a40 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	4603      	mov	r3, r0
 8005a48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8005a4a:	4a04      	ldr	r2, [pc, #16]	; (8005a5c <RCC_LSICmd+0x1c>)
 8005a4c:	79fb      	ldrb	r3, [r7, #7]
 8005a4e:	6013      	str	r3, [r2, #0]
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bc80      	pop	{r7}
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	42420480 	submi	r0, r2, #128, 8	; 0x80000000

08005a60 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	613b      	str	r3, [r7, #16]
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	2300      	movs	r3, #0
 8005a76:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8005a78:	4b4c      	ldr	r3, [pc, #304]	; (8005bac <RCC_GetClocksFreq+0x14c>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f003 030c 	and.w	r3, r3, #12
 8005a80:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d007      	beq.n	8005a98 <RCC_GetClocksFreq+0x38>
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d009      	beq.n	8005aa0 <RCC_GetClocksFreq+0x40>
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d133      	bne.n	8005af8 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a47      	ldr	r2, [pc, #284]	; (8005bb0 <RCC_GetClocksFreq+0x150>)
 8005a94:	601a      	str	r2, [r3, #0]
      break;
 8005a96:	e033      	b.n	8005b00 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a45      	ldr	r2, [pc, #276]	; (8005bb0 <RCC_GetClocksFreq+0x150>)
 8005a9c:	601a      	str	r2, [r3, #0]
      break;
 8005a9e:	e02f      	b.n	8005b00 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8005aa0:	4b42      	ldr	r3, [pc, #264]	; (8005bac <RCC_GetClocksFreq+0x14c>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005aa8:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8005aaa:	4b40      	ldr	r3, [pc, #256]	; (8005bac <RCC_GetClocksFreq+0x14c>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ab2:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	0c9b      	lsrs	r3, r3, #18
 8005ab8:	3302      	adds	r3, #2
 8005aba:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	4a3b      	ldr	r2, [pc, #236]	; (8005bb4 <RCC_GetClocksFreq+0x154>)
 8005ac6:	fb02 f203 	mul.w	r2, r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8005ace:	e017      	b.n	8005b00 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8005ad0:	4b36      	ldr	r3, [pc, #216]	; (8005bac <RCC_GetClocksFreq+0x14c>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d006      	beq.n	8005aea <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4a35      	ldr	r2, [pc, #212]	; (8005bb4 <RCC_GetClocksFreq+0x154>)
 8005ae0:	fb02 f203 	mul.w	r2, r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	601a      	str	r2, [r3, #0]
      break;
 8005ae8:	e00a      	b.n	8005b00 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	4a30      	ldr	r2, [pc, #192]	; (8005bb0 <RCC_GetClocksFreq+0x150>)
 8005aee:	fb02 f203 	mul.w	r2, r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	601a      	str	r2, [r3, #0]
      break;
 8005af6:	e003      	b.n	8005b00 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a2d      	ldr	r2, [pc, #180]	; (8005bb0 <RCC_GetClocksFreq+0x150>)
 8005afc:	601a      	str	r2, [r3, #0]
      break;
 8005afe:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8005b00:	4b2a      	ldr	r3, [pc, #168]	; (8005bac <RCC_GetClocksFreq+0x14c>)
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	091b      	lsrs	r3, r3, #4
 8005b0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8005b10:	4a29      	ldr	r2, [pc, #164]	; (8005bb8 <RCC_GetClocksFreq+0x158>)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	4413      	add	r3, r2
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	40da      	lsrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8005b28:	4b20      	ldr	r3, [pc, #128]	; (8005bac <RCC_GetClocksFreq+0x14c>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b30:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	0a1b      	lsrs	r3, r3, #8
 8005b36:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8005b38:	4a1f      	ldr	r2, [pc, #124]	; (8005bb8 <RCC_GetClocksFreq+0x158>)
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	40da      	lsrs	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8005b50:	4b16      	ldr	r3, [pc, #88]	; (8005bac <RCC_GetClocksFreq+0x14c>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005b58:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	0adb      	lsrs	r3, r3, #11
 8005b5e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8005b60:	4a15      	ldr	r2, [pc, #84]	; (8005bb8 <RCC_GetClocksFreq+0x158>)
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	4413      	add	r3, r2
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	40da      	lsrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8005b78:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <RCC_GetClocksFreq+0x14c>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b80:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	0b9b      	lsrs	r3, r3, #14
 8005b86:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8005b88:	4a0c      	ldr	r2, [pc, #48]	; (8005bbc <RCC_GetClocksFreq+0x15c>)
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	611a      	str	r2, [r3, #16]
}
 8005ba2:	bf00      	nop
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr
 8005bac:	40021000 	andmi	r1, r2, r0
 8005bb0:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8005bb4:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8005bb8:	200000b8 	strhcs	r0, [r0], -r8
 8005bbc:	200000c8 	andcs	r0, r0, r8, asr #1

08005bc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	460b      	mov	r3, r1
 8005bca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005bcc:	78fb      	ldrb	r3, [r7, #3]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d006      	beq.n	8005be0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8005bd2:	4909      	ldr	r1, [pc, #36]	; (8005bf8 <RCC_APB2PeriphClockCmd+0x38>)
 8005bd4:	4b08      	ldr	r3, [pc, #32]	; (8005bf8 <RCC_APB2PeriphClockCmd+0x38>)
 8005bd6:	699a      	ldr	r2, [r3, #24]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8005bde:	e006      	b.n	8005bee <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8005be0:	4905      	ldr	r1, [pc, #20]	; (8005bf8 <RCC_APB2PeriphClockCmd+0x38>)
 8005be2:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <RCC_APB2PeriphClockCmd+0x38>)
 8005be4:	699a      	ldr	r2, [r3, #24]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	43db      	mvns	r3, r3
 8005bea:	4013      	ands	r3, r2
 8005bec:	618b      	str	r3, [r1, #24]
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr
 8005bf8:	40021000 	andmi	r1, r2, r0

08005bfc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d006      	beq.n	8005c1c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8005c0e:	4909      	ldr	r1, [pc, #36]	; (8005c34 <RCC_APB1PeriphClockCmd+0x38>)
 8005c10:	4b08      	ldr	r3, [pc, #32]	; (8005c34 <RCC_APB1PeriphClockCmd+0x38>)
 8005c12:	69da      	ldr	r2, [r3, #28]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8005c1a:	e006      	b.n	8005c2a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8005c1c:	4905      	ldr	r1, [pc, #20]	; (8005c34 <RCC_APB1PeriphClockCmd+0x38>)
 8005c1e:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <RCC_APB1PeriphClockCmd+0x38>)
 8005c20:	69da      	ldr	r2, [r3, #28]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	43db      	mvns	r3, r3
 8005c26:	4013      	ands	r3, r2
 8005c28:	61cb      	str	r3, [r1, #28]
}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr
 8005c34:	40021000 	andmi	r1, r2, r0

08005c38 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	460b      	mov	r3, r1
 8005c42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005c44:	78fb      	ldrb	r3, [r7, #3]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d006      	beq.n	8005c58 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8005c4a:	4909      	ldr	r1, [pc, #36]	; (8005c70 <RCC_APB1PeriphResetCmd+0x38>)
 8005c4c:	4b08      	ldr	r3, [pc, #32]	; (8005c70 <RCC_APB1PeriphResetCmd+0x38>)
 8005c4e:	691a      	ldr	r2, [r3, #16]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8005c56:	e006      	b.n	8005c66 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8005c58:	4905      	ldr	r1, [pc, #20]	; (8005c70 <RCC_APB1PeriphResetCmd+0x38>)
 8005c5a:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <RCC_APB1PeriphResetCmd+0x38>)
 8005c5c:	691a      	ldr	r2, [r3, #16]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	43db      	mvns	r3, r3
 8005c62:	4013      	ands	r3, r2
 8005c64:	610b      	str	r3, [r1, #16]
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr
 8005c70:	40021000 	andmi	r1, r2, r0

08005c74 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8005c82:	2300      	movs	r3, #0
 8005c84:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8005c86:	2300      	movs	r3, #0
 8005c88:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	095b      	lsrs	r3, r3, #5
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d103      	bne.n	8005ca0 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8005c98:	4b12      	ldr	r3, [pc, #72]	; (8005ce4 <RCC_GetFlagStatus+0x70>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	e009      	b.n	8005cb4 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d103      	bne.n	8005cae <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8005ca6:	4b0f      	ldr	r3, [pc, #60]	; (8005ce4 <RCC_GetFlagStatus+0x70>)
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	e002      	b.n	8005cb4 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8005cae:	4b0d      	ldr	r3, [pc, #52]	; (8005ce4 <RCC_GetFlagStatus+0x70>)
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8005cb4:	79fb      	ldrb	r3, [r7, #7]
 8005cb6:	f003 031f 	and.w	r3, r3, #31
 8005cba:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	74fb      	strb	r3, [r7, #19]
 8005cd0:	e001      	b.n	8005cd6 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 8005cd6:	7cfb      	ldrb	r3, [r7, #19]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	371c      	adds	r7, #28
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bc80      	pop	{r7}
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40021000 	andmi	r1, r2, r0

08005ce8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b089      	sub	sp, #36	; 0x24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61fb      	str	r3, [r7, #28]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	613b      	str	r3, [r7, #16]
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61bb      	str	r3, [r7, #24]
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8005d02:	2300      	movs	r3, #0
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	2300      	movs	r3, #0
 8005d08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	78db      	ldrb	r3, [r3, #3]
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	78db      	ldrb	r3, [r3, #3]
 8005d18:	f003 0310 	and.w	r3, r3, #16
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d005      	beq.n	8005d2c <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	789b      	ldrb	r3, [r3, #2]
 8005d24:	461a      	mov	r2, r3
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d044      	beq.n	8005dc0 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	61bb      	str	r3, [r7, #24]
 8005d40:	e038      	b.n	8005db4 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8005d42:	2201      	movs	r2, #1
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4013      	ands	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d126      	bne.n	8005dae <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8005d66:	220f      	movs	r2, #15
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	43db      	mvns	r3, r3
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4013      	ands	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	78db      	ldrb	r3, [r3, #3]
 8005d8c:	2b28      	cmp	r3, #40	; 0x28
 8005d8e:	d105      	bne.n	8005d9c <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8005d90:	2201      	movs	r2, #1
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	409a      	lsls	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	615a      	str	r2, [r3, #20]
 8005d9a:	e008      	b.n	8005dae <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	78db      	ldrb	r3, [r3, #3]
 8005da0:	2b48      	cmp	r3, #72	; 0x48
 8005da2:	d104      	bne.n	8005dae <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8005da4:	2201      	movs	r2, #1
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	409a      	lsls	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	3301      	adds	r3, #1
 8005db2:	61bb      	str	r3, [r7, #24]
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	2b07      	cmp	r3, #7
 8005db8:	d9c3      	bls.n	8005d42 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	2bff      	cmp	r3, #255	; 0xff
 8005dc6:	d946      	bls.n	8005e56 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005dce:	2300      	movs	r3, #0
 8005dd0:	61bb      	str	r3, [r7, #24]
 8005dd2:	e03a      	b.n	8005e4a <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	3308      	adds	r3, #8
 8005dd8:	2201      	movs	r2, #1
 8005dda:	fa02 f303 	lsl.w	r3, r2, r3
 8005dde:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	461a      	mov	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	4013      	ands	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d127      	bne.n	8005e44 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8005dfa:	220f      	movs	r2, #15
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	43db      	mvns	r3, r3
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	fa02 f303 	lsl.w	r3, r2, r3
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	78db      	ldrb	r3, [r3, #3]
 8005e20:	2b28      	cmp	r3, #40	; 0x28
 8005e22:	d105      	bne.n	8005e30 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	3308      	adds	r3, #8
 8005e28:	2201      	movs	r2, #1
 8005e2a:	409a      	lsls	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	78db      	ldrb	r3, [r3, #3]
 8005e34:	2b48      	cmp	r3, #72	; 0x48
 8005e36:	d105      	bne.n	8005e44 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	3308      	adds	r3, #8
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	409a      	lsls	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	3301      	adds	r3, #1
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b07      	cmp	r3, #7
 8005e4e:	d9c1      	bls.n	8005dd4 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	605a      	str	r2, [r3, #4]
  }
}
 8005e56:	bf00      	nop
 8005e58:	3724      	adds	r7, #36	; 0x24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bc80      	pop	{r7}
 8005e5e:	4770      	bx	lr

08005e60 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8005e6c:	887a      	ldrh	r2, [r7, #2]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	611a      	str	r2, [r3, #16]
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bc80      	pop	{r7}
 8005e7a:	4770      	bx	lr

08005e7c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	460b      	mov	r3, r1
 8005e86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8005e88:	887a      	ldrh	r2, [r7, #2]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	615a      	str	r2, [r3, #20]
}
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr

08005e98 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8005eac:	89fb      	ldrh	r3, [r7, #14]
 8005eae:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8005eb2:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	881a      	ldrh	r2, [r3, #0]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	885b      	ldrh	r3, [r3, #2]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005edc:	4313      	orrs	r3, r2
 8005ede:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005eec:	4313      	orrs	r3, r2
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	89fb      	ldrh	r3, [r7, #14]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	89fa      	ldrh	r2, [r7, #14]
 8005efa:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	8b9b      	ldrh	r3, [r3, #28]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	8a1a      	ldrh	r2, [r3, #16]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	821a      	strh	r2, [r3, #16]
}
 8005f14:	bf00      	nop
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bc80      	pop	{r7}
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop

08005f20 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005f2c:	78fb      	ldrb	r3, [r7, #3]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d008      	beq.n	8005f44 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	881b      	ldrh	r3, [r3, #0]
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8005f42:	e007      	b.n	8005f54 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	801a      	strh	r2, [r3, #0]
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bc80      	pop	{r7}
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop

08005f60 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	887a      	ldrh	r2, [r7, #2]
 8005f70:	819a      	strh	r2, [r3, #12]
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bc80      	pop	{r7}
 8005f7a:	4770      	bx	lr

08005f7c <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	899b      	ldrh	r3, [r3, #12]
 8005f88:	b29b      	uxth	r3, r3
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bc80      	pop	{r7}
 8005f92:	4770      	bx	lr

08005f94 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	891b      	ldrh	r3, [r3, #8]
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	887b      	ldrh	r3, [r7, #2]
 8005fac:	4013      	ands	r3, r2
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	73fb      	strb	r3, [r7, #15]
 8005fb8:	e001      	b.n	8005fbe <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bc80      	pop	{r7}
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop

08005fcc <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a2e      	ldr	r2, [pc, #184]	; (800609c <TIM_TimeBaseInit+0xd0>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d013      	beq.n	8006010 <TIM_TimeBaseInit+0x44>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a2d      	ldr	r2, [pc, #180]	; (80060a0 <TIM_TimeBaseInit+0xd4>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d00f      	beq.n	8006010 <TIM_TimeBaseInit+0x44>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff6:	d00b      	beq.n	8006010 <TIM_TimeBaseInit+0x44>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a2a      	ldr	r2, [pc, #168]	; (80060a4 <TIM_TimeBaseInit+0xd8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d007      	beq.n	8006010 <TIM_TimeBaseInit+0x44>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a29      	ldr	r2, [pc, #164]	; (80060a8 <TIM_TimeBaseInit+0xdc>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d003      	beq.n	8006010 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a28      	ldr	r2, [pc, #160]	; (80060ac <TIM_TimeBaseInit+0xe0>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d108      	bne.n	8006022 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8006010:	89fb      	ldrh	r3, [r7, #14]
 8006012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006016:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	885a      	ldrh	r2, [r3, #2]
 800601c:	89fb      	ldrh	r3, [r7, #14]
 800601e:	4313      	orrs	r3, r2
 8006020:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a22      	ldr	r2, [pc, #136]	; (80060b0 <TIM_TimeBaseInit+0xe4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00c      	beq.n	8006044 <TIM_TimeBaseInit+0x78>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a21      	ldr	r2, [pc, #132]	; (80060b4 <TIM_TimeBaseInit+0xe8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d008      	beq.n	8006044 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8006032:	89fb      	ldrh	r3, [r7, #14]
 8006034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006038:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	88da      	ldrh	r2, [r3, #6]
 800603e:	89fb      	ldrh	r3, [r7, #14]
 8006040:	4313      	orrs	r3, r2
 8006042:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	89fa      	ldrh	r2, [r7, #14]
 8006048:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	889a      	ldrh	r2, [r3, #4]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	881a      	ldrh	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a0f      	ldr	r2, [pc, #60]	; (800609c <TIM_TimeBaseInit+0xd0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d00f      	beq.n	8006082 <TIM_TimeBaseInit+0xb6>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a0e      	ldr	r2, [pc, #56]	; (80060a0 <TIM_TimeBaseInit+0xd4>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00b      	beq.n	8006082 <TIM_TimeBaseInit+0xb6>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a12      	ldr	r2, [pc, #72]	; (80060b8 <TIM_TimeBaseInit+0xec>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d007      	beq.n	8006082 <TIM_TimeBaseInit+0xb6>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a11      	ldr	r2, [pc, #68]	; (80060bc <TIM_TimeBaseInit+0xf0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d003      	beq.n	8006082 <TIM_TimeBaseInit+0xb6>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a10      	ldr	r2, [pc, #64]	; (80060c0 <TIM_TimeBaseInit+0xf4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d104      	bne.n	800608c <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	7a1b      	ldrb	r3, [r3, #8]
 8006086:	b29a      	uxth	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	829a      	strh	r2, [r3, #20]
}
 8006092:	bf00      	nop
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr
 800609c:	40012c00 	andmi	r2, r1, r0, lsl #24
 80060a0:	40013400 	andmi	r3, r1, r0, lsl #8
 80060a4:	40000400 	andmi	r0, r0, r0, lsl #8
 80060a8:	40000800 	andmi	r0, r0, r0, lsl #16
 80060ac:	40000c00 	andmi	r0, r0, r0, lsl #24
 80060b0:	40001000 	andmi	r1, r0, r0
 80060b4:	40001400 	andmi	r1, r0, r0, lsl #8
 80060b8:	40014000 	andmi	r4, r1, r0
 80060bc:	40014400 	andmi	r4, r1, r0, lsl #8
 80060c0:	40014800 	andmi	r4, r1, r0, lsl #16

080060c4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80060d0:	78fb      	ldrb	r3, [r7, #3]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d008      	beq.n	80060e8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	f043 0301 	orr.w	r3, r3, #1
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 80060e6:	e007      	b.n	80060f8 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	f023 0301 	bic.w	r3, r3, #1
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	801a      	strh	r2, [r3, #0]
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bc80      	pop	{r7}
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop

08006104 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	807b      	strh	r3, [r7, #2]
 8006110:	4613      	mov	r3, r2
 8006112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006114:	787b      	ldrb	r3, [r7, #1]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d008      	beq.n	800612c <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	899b      	ldrh	r3, [r3, #12]
 800611e:	b29a      	uxth	r2, r3
 8006120:	887b      	ldrh	r3, [r7, #2]
 8006122:	4313      	orrs	r3, r2
 8006124:	b29a      	uxth	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800612a:	e009      	b.n	8006140 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	899b      	ldrh	r3, [r3, #12]
 8006130:	b29a      	uxth	r2, r3
 8006132:	887b      	ldrh	r3, [r7, #2]
 8006134:	43db      	mvns	r3, r3
 8006136:	b29b      	uxth	r3, r3
 8006138:	4013      	ands	r3, r2
 800613a:	b29a      	uxth	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	819a      	strh	r2, [r3, #12]
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	bc80      	pop	{r7}
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop

0800614c <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8006158:	2300      	movs	r3, #0
 800615a:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800615c:	2300      	movs	r3, #0
 800615e:	81bb      	strh	r3, [r7, #12]
 8006160:	2300      	movs	r3, #0
 8006162:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	8a1b      	ldrh	r3, [r3, #16]
 8006168:	b29a      	uxth	r2, r3
 800616a:	887b      	ldrh	r3, [r7, #2]
 800616c:	4013      	ands	r3, r2
 800616e:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	899b      	ldrh	r3, [r3, #12]
 8006174:	b29a      	uxth	r2, r3
 8006176:	887b      	ldrh	r3, [r7, #2]
 8006178:	4013      	ands	r3, r2
 800617a:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800617c:	89bb      	ldrh	r3, [r7, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d005      	beq.n	800618e <TIM_GetITStatus+0x42>
 8006182:	897b      	ldrh	r3, [r7, #10]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8006188:	2301      	movs	r3, #1
 800618a:	73fb      	strb	r3, [r7, #15]
 800618c:	e001      	b.n	8006192 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800618e:	2300      	movs	r3, #0
 8006190:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006192:	7bfb      	ldrb	r3, [r7, #15]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	bc80      	pop	{r7}
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop

080061a0 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80061ac:	887b      	ldrh	r3, [r7, #2]
 80061ae:	43db      	mvns	r3, r3
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	821a      	strh	r2, [r3, #16]
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr

080061c0 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a0e      	ldr	r2, [pc, #56]	; (8006204 <I2C_DeInit+0x44>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d10a      	bne.n	80061e6 <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80061d0:	2101      	movs	r1, #1
 80061d2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80061d6:	f7ff fd2f 	bl	8005c38 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 80061da:	2100      	movs	r1, #0
 80061dc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80061e0:	f7ff fd2a 	bl	8005c38 <RCC_APB1PeriphResetCmd>
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
  }
}
 80061e4:	e009      	b.n	80061fa <I2C_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80061e6:	2101      	movs	r1, #1
 80061e8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80061ec:	f7ff fd24 	bl	8005c38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 80061f0:	2100      	movs	r1, #0
 80061f2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80061f6:	f7ff fd1f 	bl	8005c38 <RCC_APB1PeriphResetCmd>
}
 80061fa:	bf00      	nop
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	40005400 	andmi	r5, r0, r0, lsl #8

08006208 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b08a      	sub	sp, #40	; 0x28
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006216:	2300      	movs	r3, #0
 8006218:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800621a:	2304      	movs	r3, #4
 800621c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800621e:	4b57      	ldr	r3, [pc, #348]	; (800637c <I2C_Init+0x174>)
 8006220:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	889b      	ldrh	r3, [r3, #4]
 8006226:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8006228:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800622a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800622e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8006230:	f107 0308 	add.w	r3, r7, #8
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff fc13 	bl	8005a60 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	4a4f      	ldr	r2, [pc, #316]	; (8006380 <I2C_Init+0x178>)
 8006242:	fba2 2303 	umull	r2, r3, r2, r3
 8006246:	0c9b      	lsrs	r3, r3, #18
 8006248:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800624a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800624c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800624e:	4313      	orrs	r3, r2
 8006250:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006256:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	b29b      	uxth	r3, r3
 800625e:	f023 0301 	bic.w	r3, r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8006268:	2300      	movs	r3, #0
 800626a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a44      	ldr	r2, [pc, #272]	; (8006384 <I2C_Init+0x17c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d815      	bhi.n	80062a2 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	69fa      	ldr	r2, [r7, #28]
 800627e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006282:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8006284:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006286:	2b03      	cmp	r3, #3
 8006288:	d801      	bhi.n	800628e <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800628a:	2304      	movs	r3, #4
 800628c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800628e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006290:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006292:	4313      	orrs	r3, r2
 8006294:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8006296:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006298:	3301      	adds	r3, #1
 800629a:	b29a      	uxth	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	841a      	strh	r2, [r3, #32]
 80062a0:	e040      	b.n	8006324 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	88db      	ldrh	r3, [r3, #6]
 80062a6:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d109      	bne.n	80062c2 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	4613      	mov	r3, r2
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	4413      	add	r3, r2
 80062b8:	69fa      	ldr	r2, [r7, #28]
 80062ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80062be:	84bb      	strh	r3, [r7, #36]	; 0x24
 80062c0:	e00e      	b.n	80062e0 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	4613      	mov	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	009a      	lsls	r2, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	69fa      	ldr	r2, [r7, #28]
 80062d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d6:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80062d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062de:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 80062e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d103      	bne.n	80062f2 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80062ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062ec:	f043 0301 	orr.w	r3, r3, #1
 80062f0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 80062f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80062f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062f6:	4313      	orrs	r3, r2
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006302:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8006304:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006306:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800630a:	fb02 f303 	mul.w	r3, r2, r3
 800630e:	4a1e      	ldr	r2, [pc, #120]	; (8006388 <I2C_Init+0x180>)
 8006310:	fb82 1203 	smull	r1, r2, r2, r3
 8006314:	1192      	asrs	r2, r2, #6
 8006316:	17db      	asrs	r3, r3, #31
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	b29b      	uxth	r3, r3
 800631c:	3301      	adds	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006328:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29b      	uxth	r3, r3
 8006330:	f043 0301 	orr.w	r3, r3, #1
 8006334:	b29a      	uxth	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8006340:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006342:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8006346:	f023 0302 	bic.w	r3, r3, #2
 800634a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	889a      	ldrh	r2, [r3, #4]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	895b      	ldrh	r3, [r3, #10]
 8006354:	4313      	orrs	r3, r2
 8006356:	b29a      	uxth	r2, r3
 8006358:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800635a:	4313      	orrs	r3, r2
 800635c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006362:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	899a      	ldrh	r2, [r3, #12]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	891b      	ldrh	r3, [r3, #8]
 800636c:	4313      	orrs	r3, r2
 800636e:	b29a      	uxth	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	811a      	strh	r2, [r3, #8]
}
 8006374:	bf00      	nop
 8006376:	3728      	adds	r7, #40	; 0x28
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8006380:	431bde83 	tstmi	fp, #2096	; 0x830
 8006384:	000186a0 	andeq	r8, r1, r0, lsr #13
 8006388:	10624dd3 	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>

0800638c <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006398:	78fb      	ldrb	r3, [r7, #3]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d008      	beq.n	80063b0 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	f043 0301 	orr.w	r3, r3, #1
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 80063ae:	e007      	b.n	80063c0 <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	f023 0301 	bic.w	r3, r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	801a      	strh	r2, [r3, #0]
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bc80      	pop	{r7}
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop

080063cc <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	460b      	mov	r3, r1
 80063d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80063d8:	78fb      	ldrb	r3, [r7, #3]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d008      	beq.n	80063f0 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 80063ee:	e007      	b.n	8006400 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	801a      	strh	r2, [r3, #0]
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop

0800640c <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8006418:	78fb      	ldrb	r3, [r7, #3]
 800641a:	b29a      	uxth	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	821a      	strh	r2, [r3, #16]
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	bc80      	pop	{r7}
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop

0800642c <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	70fb      	strb	r3, [r7, #3]
 8006438:	4613      	mov	r3, r2
 800643a:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 800643c:	78bb      	ldrb	r3, [r7, #2]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d004      	beq.n	800644c <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8006442:	78fb      	ldrb	r3, [r7, #3]
 8006444:	f043 0301 	orr.w	r3, r3, #1
 8006448:	70fb      	strb	r3, [r7, #3]
 800644a:	e003      	b.n	8006454 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	f023 0301 	bic.w	r3, r3, #1
 8006452:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8006454:	78fb      	ldrb	r3, [r7, #3]
 8006456:	b29a      	uxth	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	821a      	strh	r2, [r3, #16]
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	bc80      	pop	{r7}
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop

08006468 <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	460b      	mov	r3, r1
 8006472:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8006474:	78fb      	ldrb	r3, [r7, #3]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d108      	bne.n	800648c <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= CR1_NOSTRETCH_Set;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	b29b      	uxth	r3, r3
 8006480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006484:	b29a      	uxth	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= CR1_NOSTRETCH_Reset;
  }
}
 800648a:	e007      	b.n	800649c <I2C_StretchClockCmd+0x34>
    I2Cx->CR1 &= CR1_NOSTRETCH_Reset;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	b29b      	uxth	r3, r3
 8006492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006496:	b29a      	uxth	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	801a      	strh	r2, [r3, #0]
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bc80      	pop	{r7}
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop

080064a8 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80064b2:	2300      	movs	r3, #0
 80064b4:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	2300      	movs	r3, #0
 80064bc:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80064be:	2300      	movs	r3, #0
 80064c0:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	8a9b      	ldrh	r3, [r3, #20]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	8b1b      	ldrh	r3, [r3, #24]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	041b      	lsls	r3, r3, #16
 80064d6:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	4313      	orrs	r3, r2
 80064de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80064e2:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	401a      	ands	r2, r3
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d102      	bne.n	80064f6 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 80064f0:	2301      	movs	r3, #1
 80064f2:	75fb      	strb	r3, [r7, #23]
 80064f4:	e001      	b.n	80064fa <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 80064f6:	2300      	movs	r3, #0
 80064f8:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 80064fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	bc80      	pop	{r7}
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop

08006508 <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8006512:	2300      	movs	r3, #0
 8006514:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8006516:	2300      	movs	r3, #0
 8006518:	613b      	str	r3, [r7, #16]
 800651a:	2300      	movs	r3, #0
 800651c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	0f1b      	lsrs	r3, r3, #28
 8006526:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800652e:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3314      	adds	r3, #20
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	e005      	b.n	800654a <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	0c1b      	lsrs	r3, r3, #16
 8006542:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3318      	adds	r3, #24
 8006548:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	4013      	ands	r3, r2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d002      	beq.n	800655c <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8006556:	2301      	movs	r3, #1
 8006558:	75fb      	strb	r3, [r7, #23]
 800655a:	e001      	b.n	8006560 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 800655c:	2300      	movs	r3, #0
 800655e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8006560:	7dfb      	ldrb	r3, [r7, #23]
}
 8006562:	4618      	mov	r0, r3
 8006564:	371c      	adds	r7, #28
 8006566:	46bd      	mov	sp, r7
 8006568:	bc80      	pop	{r7}
 800656a:	4770      	bx	lr

0800656c <IWDG_WriteAccessCmd>:
  *     @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *     @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	4603      	mov	r3, r0
 8006574:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 8006576:	4a04      	ldr	r2, [pc, #16]	; (8006588 <IWDG_WriteAccessCmd+0x1c>)
 8006578:	88fb      	ldrh	r3, [r7, #6]
 800657a:	6013      	str	r3, [r2, #0]
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	bc80      	pop	{r7}
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40003000 	andmi	r3, r0, r0

0800658c <IWDG_SetPrescaler>:
  *     @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *     @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 8006596:	4a04      	ldr	r2, [pc, #16]	; (80065a8 <IWDG_SetPrescaler+0x1c>)
 8006598:	79fb      	ldrb	r3, [r7, #7]
 800659a:	6053      	str	r3, [r2, #4]
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bc80      	pop	{r7}
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40003000 	andmi	r3, r0, r0

080065ac <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *   This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	4603      	mov	r3, r0
 80065b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 80065b6:	4a04      	ldr	r2, [pc, #16]	; (80065c8 <IWDG_SetReload+0x1c>)
 80065b8:	88fb      	ldrh	r3, [r7, #6]
 80065ba:	6093      	str	r3, [r2, #8]
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bc80      	pop	{r7}
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40003000 	andmi	r3, r0, r0

080065cc <IWDG_ReloadCounter>:
  *   (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_Reload;
 80065d0:	4b03      	ldr	r3, [pc, #12]	; (80065e0 <IWDG_ReloadCounter+0x14>)
 80065d2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80065d6:	601a      	str	r2, [r3, #0]
}
 80065d8:	bf00      	nop
 80065da:	46bd      	mov	sp, r7
 80065dc:	bc80      	pop	{r7}
 80065de:	4770      	bx	lr
 80065e0:	40003000 	andmi	r3, r0, r0

080065e4 <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_Enable;
 80065e8:	4b03      	ldr	r3, [pc, #12]	; (80065f8 <IWDG_Enable+0x14>)
 80065ea:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80065ee:	601a      	str	r2, [r3, #0]
}
 80065f0:	bf00      	nop
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bc80      	pop	{r7}
 80065f6:	4770      	bx	lr
 80065f8:	40003000 	andmi	r3, r0, r0

080065fc <DBGMCU_Config>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006608:	78fb      	ldrb	r3, [r7, #3]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d006      	beq.n	800661c <DBGMCU_Config+0x20>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 800660e:	4909      	ldr	r1, [pc, #36]	; (8006634 <DBGMCU_Config+0x38>)
 8006610:	4b08      	ldr	r3, [pc, #32]	; (8006634 <DBGMCU_Config+0x38>)
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4313      	orrs	r3, r2
 8006618:	604b      	str	r3, [r1, #4]
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
  }
}
 800661a:	e006      	b.n	800662a <DBGMCU_Config+0x2e>
    DBGMCU->CR &= ~DBGMCU_Periph;
 800661c:	4905      	ldr	r1, [pc, #20]	; (8006634 <DBGMCU_Config+0x38>)
 800661e:	4b05      	ldr	r3, [pc, #20]	; (8006634 <DBGMCU_Config+0x38>)
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	43db      	mvns	r3, r3
 8006626:	4013      	ands	r3, r2
 8006628:	604b      	str	r3, [r1, #4]
}
 800662a:	bf00      	nop
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	bc80      	pop	{r7}
 8006632:	4770      	bx	lr
 8006634:	e0042000 	and	r2, r4, r0

08006638 <Init_i2c1_oled>:
 */

#include "stm32f10x.h"
#include "initialize.h"

void Init_i2c1_oled(void){
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef OLED_GPIO_InitStructure;
    I2C_InitTypeDef OLED_I2C_InitStructure;
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
 800663e:	2101      	movs	r1, #1
 8006640:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8006644:	f7ff fada 	bl	8005bfc <RCC_APB1PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8006648:	2101      	movs	r1, #1
 800664a:	2008      	movs	r0, #8
 800664c:	f7ff fab8 	bl	8005bc0 <RCC_APB2PeriphClockCmd>
    OLED_GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 8006650:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006654:	82bb      	strh	r3, [r7, #20]
    OLED_GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8006656:	2301      	movs	r3, #1
 8006658:	75bb      	strb	r3, [r7, #22]
    OLED_GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 800665a:	231c      	movs	r3, #28
 800665c:	75fb      	strb	r3, [r7, #23]
    GPIO_Init(GPIOB, &OLED_GPIO_InitStructure);
 800665e:	f107 0314 	add.w	r3, r7, #20
 8006662:	4619      	mov	r1, r3
 8006664:	4812      	ldr	r0, [pc, #72]	; (80066b0 <Init_i2c1_oled+0x78>)
 8006666:	f7ff fb3f 	bl	8005ce8 <GPIO_Init>

    I2C_DeInit(I2C2); //这句一定要加
 800666a:	4812      	ldr	r0, [pc, #72]	; (80066b4 <Init_i2c1_oled+0x7c>)
 800666c:	f7ff fda8 	bl	80061c0 <I2C_DeInit>
    OLED_I2C_InitStructure.I2C_ClockSpeed = 270000;
 8006670:	4b11      	ldr	r3, [pc, #68]	; (80066b8 <Init_i2c1_oled+0x80>)
 8006672:	607b      	str	r3, [r7, #4]
    OLED_I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8006674:	2300      	movs	r3, #0
 8006676:	813b      	strh	r3, [r7, #8]
    OLED_I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_16_9;
 8006678:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800667c:	817b      	strh	r3, [r7, #10]
    OLED_I2C_InitStructure.I2C_OwnAddress1 = 0x45;
 800667e:	2345      	movs	r3, #69	; 0x45
 8006680:	81bb      	strh	r3, [r7, #12]
    OLED_I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8006682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006686:	81fb      	strh	r3, [r7, #14]
    OLED_I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit; //响应七位地址
 8006688:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800668c:	823b      	strh	r3, [r7, #16]
    I2C_Init(I2C2, &OLED_I2C_InitStructure);
 800668e:	1d3b      	adds	r3, r7, #4
 8006690:	4619      	mov	r1, r3
 8006692:	4808      	ldr	r0, [pc, #32]	; (80066b4 <Init_i2c1_oled+0x7c>)
 8006694:	f7ff fdb8 	bl	8006208 <I2C_Init>
    /* 启动时钟拉长 */
    I2C_StretchClockCmd(I2C2, ENABLE);
 8006698:	2101      	movs	r1, #1
 800669a:	4806      	ldr	r0, [pc, #24]	; (80066b4 <Init_i2c1_oled+0x7c>)
 800669c:	f7ff fee4 	bl	8006468 <I2C_StretchClockCmd>
    I2C_Cmd(I2C2, ENABLE);
 80066a0:	2101      	movs	r1, #1
 80066a2:	4804      	ldr	r0, [pc, #16]	; (80066b4 <Init_i2c1_oled+0x7c>)
 80066a4:	f7ff fe72 	bl	800638c <I2C_Cmd>
}
 80066a8:	bf00      	nop
 80066aa:	3718      	adds	r7, #24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	40010c00 	andmi	r0, r1, r0, lsl #24
 80066b4:	40005800 	andmi	r5, r0, r0, lsl #16
 80066b8:	00041eb0 			; <UNDEFINED> instruction: 0x00041eb0

080066bc <Init_led_lock>:

// 蓝色灯泡引脚和锁控制引脚
void Init_led_lock(void){
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80066c2:	2101      	movs	r1, #1
 80066c4:	2008      	movs	r0, #8
 80066c6:	f7ff fa7b 	bl	8005bc0 <RCC_APB2PeriphClockCmd>
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 80066ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80066ce:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;  	
 80066d0:	2310      	movs	r3, #16
 80066d2:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  
 80066d4:	2303      	movs	r3, #3
 80066d6:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 80066d8:	1d3b      	adds	r3, r7, #4
 80066da:	4619      	mov	r1, r3
 80066dc:	4808      	ldr	r0, [pc, #32]	; (8006700 <Init_led_lock+0x44>)
 80066de:	f7ff fb03 	bl	8005ce8 <GPIO_Init>
    // 熄灭灯
    GPIO_SetBits(GPIOB, GPIO_Pin_9);
 80066e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066e6:	4806      	ldr	r0, [pc, #24]	; (8006700 <Init_led_lock+0x44>)
 80066e8:	f7ff fbba 	bl	8005e60 <GPIO_SetBits>
    GPIO_ResetBits(GPIOB, GPIO_Pin_8);  //开锁
 80066ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066f0:	4803      	ldr	r0, [pc, #12]	; (8006700 <Init_led_lock+0x44>)
 80066f2:	f7ff fbc3 	bl	8005e7c <GPIO_ResetBits>
}
 80066f6:	bf00      	nop
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	40010c00 	andmi	r0, r1, r0, lsl #24

08006704 <Init_spi1_w5500>:

//w5500网卡
void Init_spi1_w5500(void){
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
    SPI_InitTypeDef SPI_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;
    /* 打开SPI1外设和GPIOA的时钟 */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1 | RCC_APB2Periph_GPIOA , ENABLE);
 800670a:	2101      	movs	r1, #1
 800670c:	f241 0004 	movw	r0, #4100	; 0x1004
 8006710:	f7ff fa56 	bl	8005bc0 <RCC_APB2PeriphClockCmd>
     6.PA3=>W5500_RST,Output Push-pull
     7.PA11=>W5500_INT,上拉输入
     8.PA4=>W5500_SCS,推挽输出
    *****************/
    /* SPI1配置 */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_7;
 8006714:	23a0      	movs	r3, #160	; 0xa0
 8006716:	803b      	strh	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006718:	2303      	movs	r3, #3
 800671a:	70bb      	strb	r3, [r7, #2]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; 
 800671c:	2318      	movs	r3, #24
 800671e:	70fb      	strb	r3, [r7, #3]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8006720:	463b      	mov	r3, r7
 8006722:	4619      	mov	r1, r3
 8006724:	4826      	ldr	r0, [pc, #152]	; (80067c0 <Init_spi1_w5500+0xbc>)
 8006726:	f7ff fadf 	bl	8005ce8 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 800672a:	2340      	movs	r3, #64	; 0x40
 800672c:	803b      	strh	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800672e:	2303      	movs	r3, #3
 8006730:	70bb      	strb	r3, [r7, #2]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; 
 8006732:	2348      	movs	r3, #72	; 0x48
 8006734:	70fb      	strb	r3, [r7, #3]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8006736:	463b      	mov	r3, r7
 8006738:	4619      	mov	r1, r3
 800673a:	4821      	ldr	r0, [pc, #132]	; (80067c0 <Init_spi1_w5500+0xbc>)
 800673c:	f7ff fad4 	bl	8005ce8 <GPIO_Init>

    /* W5500_RST引脚初始化配置(PA3) */
    GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_3 | GPIO_Pin_4;
 8006740:	2318      	movs	r3, #24
 8006742:	803b      	strh	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006744:	2303      	movs	r3, #3
 8006746:	70bb      	strb	r3, [r7, #2]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8006748:	2310      	movs	r3, #16
 800674a:	70fb      	strb	r3, [r7, #3]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 800674c:	463b      	mov	r3, r7
 800674e:	4619      	mov	r1, r3
 8006750:	481b      	ldr	r0, [pc, #108]	; (80067c0 <Init_spi1_w5500+0xbc>)
 8006752:	f7ff fac9 	bl	8005ce8 <GPIO_Init>
    GPIO_ResetBits(GPIOA, GPIO_Pin_3);//复位引脚拉低,复位
 8006756:	2108      	movs	r1, #8
 8006758:	4819      	ldr	r0, [pc, #100]	; (80067c0 <Init_spi1_w5500+0xbc>)
 800675a:	f7ff fb8f 	bl	8005e7c <GPIO_ResetBits>

    /* W5500_INT引脚初始化配置(PA11) */	
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 800675e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006762:	803b      	strh	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006764:	2303      	movs	r3, #3
 8006766:	70bb      	strb	r3, [r7, #2]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8006768:	2348      	movs	r3, #72	; 0x48
 800676a:	70fb      	strb	r3, [r7, #3]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 800676c:	463b      	mov	r3, r7
 800676e:	4619      	mov	r1, r3
 8006770:	4813      	ldr	r0, [pc, #76]	; (80067c0 <Init_spi1_w5500+0xbc>)
 8006772:	f7ff fab9 	bl	8005ce8 <GPIO_Init>

    /* SPI1配置 */
    SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex; //双线全双工
 8006776:	2300      	movs	r3, #0
 8006778:	80bb      	strh	r3, [r7, #4]
    SPI_InitStructure.SPI_Mode = SPI_Mode_Master; //作为主机
 800677a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800677e:	80fb      	strh	r3, [r7, #6]
    SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b; //传输数据为8位
 8006780:	2300      	movs	r3, #0
 8006782:	813b      	strh	r3, [r7, #8]
    SPI_InitStructure.SPI_CPOL = SPI_CPOL_High; //时钟初始极性为高
 8006784:	2302      	movs	r3, #2
 8006786:	817b      	strh	r3, [r7, #10]
    SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge; //在第二个跳变同步，W5500总是在上升沿同步数据
 8006788:	2301      	movs	r3, #1
 800678a:	81bb      	strh	r3, [r7, #12]
    SPI_InitStructure.SPI_NSS = SPI_NSS_Soft; //软件管理NSS
 800678c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006790:	81fb      	strh	r3, [r7, #14]
    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;//SPI_BaudRatePrescaler_2;
 8006792:	2308      	movs	r3, #8
 8006794:	823b      	strh	r3, [r7, #16]
    SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8006796:	2300      	movs	r3, #0
 8006798:	827b      	strh	r3, [r7, #18]
    SPI_InitStructure.SPI_CRCPolynomial = 7; //CRC
 800679a:	2307      	movs	r3, #7
 800679c:	82bb      	strh	r3, [r7, #20]
    SPI_Init(SPI1, &SPI_InitStructure);
 800679e:	1d3b      	adds	r3, r7, #4
 80067a0:	4619      	mov	r1, r3
 80067a2:	4808      	ldr	r0, [pc, #32]	; (80067c4 <Init_spi1_w5500+0xc0>)
 80067a4:	f7ff fb78 	bl	8005e98 <SPI_Init>
    /* 启动SPI1 */
    SPI_Cmd(SPI1, ENABLE);
 80067a8:	2101      	movs	r1, #1
 80067aa:	4806      	ldr	r0, [pc, #24]	; (80067c4 <Init_spi1_w5500+0xc0>)
 80067ac:	f7ff fbb8 	bl	8005f20 <SPI_Cmd>
    GPIO_SetBits(GPIOA, GPIO_Pin_3);//复位引脚拉高,取消复位
 80067b0:	2108      	movs	r1, #8
 80067b2:	4803      	ldr	r0, [pc, #12]	; (80067c0 <Init_spi1_w5500+0xbc>)
 80067b4:	f7ff fb54 	bl	8005e60 <GPIO_SetBits>
}
 80067b8:	bf00      	nop
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	40010800 	andmi	r0, r1, r0, lsl #16
 80067c4:	40013000 	andmi	r3, r1, r0

080067c8 <Init_tim2_ms_base>:

// TIM2提供1ms时基
void Init_tim2_ms_base(void){
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
    /* 初始化TIM */
    NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80067ce:	231c      	movs	r3, #28
 80067d0:	703b      	strb	r3, [r7, #0]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 9;
 80067d2:	2309      	movs	r3, #9
 80067d4:	707b      	strb	r3, [r7, #1]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80067d6:	2300      	movs	r3, #0
 80067d8:	70bb      	strb	r3, [r7, #2]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80067da:	2301      	movs	r3, #1
 80067dc:	70fb      	strb	r3, [r7, #3]
    NVIC_Init(&NVIC_InitStructure);
 80067de:	463b      	mov	r3, r7
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff f8cb 	bl	800597c <NVIC_Init>

    //使能Timer2时钟
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80067e6:	2101      	movs	r1, #1
 80067e8:	2001      	movs	r0, #1
 80067ea:	f7ff fa07 	bl	8005bfc <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Period = 9;						//设置在下一个更新事件装入活动的自动重装载寄存器周期的值(计数到10为1ms)
 80067ee:	2309      	movs	r3, #9
 80067f0:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_Prescaler = 7199;					//设置用来作为TIMx时钟频率除数的预分频值(10KHz的计数频率)
 80067f2:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80067f6:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;		//设置时钟分割:TDTS = TIM_CKD_DIV1
 80067f8:	2300      	movs	r3, #0
 80067fa:	817b      	strh	r3, [r7, #10]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;	//TIM向上计数模式
 80067fc:	2300      	movs	r3, #0
 80067fe:	80fb      	strh	r3, [r7, #6]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);				//根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位
 8006800:	1d3b      	adds	r3, r7, #4
 8006802:	4619      	mov	r1, r3
 8006804:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006808:	f7ff fbe0 	bl	8005fcc <TIM_TimeBaseInit>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE); //使能TIM2指定的中断
 800680c:	2201      	movs	r2, #1
 800680e:	2101      	movs	r1, #1
 8006810:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006814:	f7ff fc76 	bl	8006104 <TIM_ITConfig>
	TIM_Cmd(TIM2, ENABLE); //使能TIMx外设
 8006818:	2101      	movs	r1, #1
 800681a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800681e:	f7ff fc51 	bl	80060c4 <TIM_Cmd>
}
 8006822:	bf00      	nop
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop

0800682c <Init_iwdg_reset>:

// 独立看门狗，防止服务器连接意外断开
void Init_iwdg_reset(void){
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
    // 使能独立看门狗使用的LSI时钟
    RCC_LSICmd(ENABLE);
 8006830:	2001      	movs	r0, #1
 8006832:	f7ff f905 	bl	8005a40 <RCC_LSICmd>
    // 等待时钟稳定
    while(RCC_GetFlagStatus(RCC_FLAG_LSIRDY) == RESET);
 8006836:	bf00      	nop
 8006838:	2061      	movs	r0, #97	; 0x61
 800683a:	f7ff fa1b 	bl	8005c74 <RCC_GetFlagStatus>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0f9      	beq.n	8006838 <Init_iwdg_reset+0xc>
    // 在调试的时候暂停看门狗
    DBGMCU_Config(DBGMCU_IWDG_STOP, ENABLE);
 8006844:	2101      	movs	r1, #1
 8006846:	f44f 7080 	mov.w	r0, #256	; 0x100
 800684a:	f7ff fed7 	bl	80065fc <DBGMCU_Config>
    // 开启独立看门狗，使能访问
    IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);
 800684e:	f245 5055 	movw	r0, #21845	; 0x5555
 8006852:	f7ff fe8b 	bl	800656c <IWDG_WriteAccessCmd>
     * 设置预分频
     * 独立看门狗是内部一个独立的40KHz的震荡源提供频率
     * 记录时间为 = (时钟频率(40KHz) / 分频数)* IWDG_SetReload(t)
     * 最大记录时间 = (1/40K) * 256 * 0xFFF = 26.208秒
     */
    IWDG_SetPrescaler(IWDG_Prescaler_256);
 8006856:	2006      	movs	r0, #6
 8006858:	f7ff fe98 	bl	800658c <IWDG_SetPrescaler>
    // 0x30D 等于 4.9984 秒，约为5秒
    IWDG_SetReload(0xFFF);
 800685c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8006860:	f7ff fea4 	bl	80065ac <IWDG_SetReload>
    // 重置计数器
    IWDG_ReloadCounter();
 8006864:	f7ff feb2 	bl	80065cc <IWDG_ReloadCounter>
    // 启动看门狗
    IWDG_Enable();
 8006868:	f7ff febc 	bl	80065e4 <IWDG_Enable>
}
 800686c:	bf00      	nop
 800686e:	bd80      	pop	{r7, pc}

08006870 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
}
 8006874:	bf00      	nop
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr

0800687c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8006880:	e7fe      	b.n	8006880 <HardFault_Handler+0x4>
 8006882:	bf00      	nop

08006884 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8006888:	e7fe      	b.n	8006888 <MemManage_Handler+0x4>
 800688a:	bf00      	nop

0800688c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800688c:	b480      	push	{r7}
 800688e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8006890:	e7fe      	b.n	8006890 <BusFault_Handler+0x4>
 8006892:	bf00      	nop

08006894 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8006898:	e7fe      	b.n	8006898 <UsageFault_Handler+0x4>
 800689a:	bf00      	nop

0800689c <DMA1_Channel5_IRQHandler>:
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32f10x_xx.s).                                            */
/******************************************************************************/

void DMA1_Channel5_IRQHandler(void)
{
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0

}
 80068a0:	bf00      	nop
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bc80      	pop	{r7}
 80068a6:	4770      	bx	lr

080068a8 <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler(void)
{
 80068a8:	b480      	push	{r7}
 80068aa:	af00      	add	r7, sp, #0

}
 80068ac:	bf00      	nop
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bc80      	pop	{r7}
 80068b2:	4770      	bx	lr

080068b4 <TIM2_IRQHandler>:

/* 定时器2的中断函数 */
void TIM2_IRQHandler(void){
 80068b4:	b580      	push	{r7, lr}
 80068b6:	af00      	add	r7, sp, #0
  extern __IO uint32_t Timer2_Counter,Interval_counter;
  static uint32_t timeSecond = 0;
  if(TIM_GetITStatus(TIM2, TIM_IT_Update) == SET){
 80068b8:	2101      	movs	r1, #1
 80068ba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80068be:	f7ff fc45 	bl	800614c <TIM_GetITStatus>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d11f      	bne.n	8006908 <TIM2_IRQHandler+0x54>
    TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 80068c8:	2101      	movs	r1, #1
 80068ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80068ce:	f7ff fc67 	bl	80061a0 <TIM_ClearITPendingBit>
    // 调度dhcp超时函数
    if(++timeSecond > 999){
 80068d2:	4b0e      	ldr	r3, [pc, #56]	; (800690c <TIM2_IRQHandler+0x58>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3301      	adds	r3, #1
 80068d8:	4a0c      	ldr	r2, [pc, #48]	; (800690c <TIM2_IRQHandler+0x58>)
 80068da:	6013      	str	r3, [r2, #0]
 80068dc:	4b0b      	ldr	r3, [pc, #44]	; (800690c <TIM2_IRQHandler+0x58>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068e4:	d306      	bcc.n	80068f4 <TIM2_IRQHandler+0x40>
    	timeSecond = 0;
 80068e6:	4b09      	ldr	r3, [pc, #36]	; (800690c <TIM2_IRQHandler+0x58>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	601a      	str	r2, [r3, #0]
    	DHCP_timerHandler();
 80068ec:	f7fe fa94 	bl	8004e18 <DHCP_timerHandler>
    	DNS_timerHandler();
 80068f0:	f7ff f824 	bl	800593c <DNS_timerHandler>
    }

    Timer2_Counter++;
 80068f4:	4b06      	ldr	r3, [pc, #24]	; (8006910 <TIM2_IRQHandler+0x5c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	3301      	adds	r3, #1
 80068fa:	4a05      	ldr	r2, [pc, #20]	; (8006910 <TIM2_IRQHandler+0x5c>)
 80068fc:	6013      	str	r3, [r2, #0]
    Interval_counter++;
 80068fe:	4b05      	ldr	r3, [pc, #20]	; (8006914 <TIM2_IRQHandler+0x60>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3301      	adds	r3, #1
 8006904:	4a03      	ldr	r2, [pc, #12]	; (8006914 <TIM2_IRQHandler+0x60>)
 8006906:	6013      	str	r3, [r2, #0]
  }
}
 8006908:	bf00      	nop
 800690a:	bd80      	pop	{r7, pc}
 800690c:	2000013c 	andcs	r0, r0, ip, lsr r1
 8006910:	20000144 	andcs	r0, r0, r4, asr #2
 8006914:	20000140 	andcs	r0, r0, r0, asr #2

08006918 <wizchip_select>:
TaskHandle_t lockTask;
TaskHandle_t mainTask;
TaskHandle_t oledTask;

//W5500的片选信号 回调
static void wizchip_select(void){
 8006918:	b580      	push	{r7, lr}
 800691a:	af00      	add	r7, sp, #0
    GPIO_ResetBits(GPIOA, GPIO_Pin_4);//置W5500的SCS为低电平
 800691c:	2110      	movs	r1, #16
 800691e:	4802      	ldr	r0, [pc, #8]	; (8006928 <wizchip_select+0x10>)
 8006920:	f7ff faac 	bl	8005e7c <GPIO_ResetBits>
}
 8006924:	bf00      	nop
 8006926:	bd80      	pop	{r7, pc}
 8006928:	40010800 	andmi	r0, r1, r0, lsl #16

0800692c <wizchip_deselect>:
//W5500的片选信号 回调
static void wizchip_deselect(void){
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
    GPIO_SetBits(GPIOA, GPIO_Pin_4);//置W5500的SCS为高电平
 8006930:	2110      	movs	r1, #16
 8006932:	4802      	ldr	r0, [pc, #8]	; (800693c <wizchip_deselect+0x10>)
 8006934:	f7ff fa94 	bl	8005e60 <GPIO_SetBits>
}
 8006938:	bf00      	nop
 800693a:	bd80      	pop	{r7, pc}
 800693c:	40010800 	andmi	r0, r1, r0, lsl #16

08006940 <wizchip_write>:

//向w5500 写一个字节，回调函数
static void wizchip_write(uint8_t wb){
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	4603      	mov	r3, r0
 8006948:	71fb      	strb	r3, [r7, #7]
    //printf("W%02x ", wb);
    SPI_I2S_SendData(SPI1, wb);//写1个字节数据
 800694a:	79fb      	ldrb	r3, [r7, #7]
 800694c:	b29b      	uxth	r3, r3
 800694e:	4619      	mov	r1, r3
 8006950:	4807      	ldr	r0, [pc, #28]	; (8006970 <wizchip_write+0x30>)
 8006952:	f7ff fb05 	bl	8005f60 <SPI_I2S_SendData>
    while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);//等待数据寄存器空
 8006956:	bf00      	nop
 8006958:	2102      	movs	r1, #2
 800695a:	4805      	ldr	r0, [pc, #20]	; (8006970 <wizchip_write+0x30>)
 800695c:	f7ff fb1a 	bl	8005f94 <SPI_I2S_GetFlagStatus>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0f8      	beq.n	8006958 <wizchip_write+0x18>
}
 8006966:	bf00      	nop
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	40013000 	andmi	r3, r1, r0

08006974 <wizchip_read>:

//从w5500读一个字节，回调函数
static uint8_t wizchip_read(void){
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
    uint8_t i;
    i = SPI_I2S_ReceiveData(SPI1);//读取1个字节数据
 800697a:	4809      	ldr	r0, [pc, #36]	; (80069a0 <wizchip_read+0x2c>)
 800697c:	f7ff fafe 	bl	8005f7c <SPI_I2S_ReceiveData>
 8006980:	4603      	mov	r3, r0
 8006982:	71fb      	strb	r3, [r7, #7]
    wizchip_write(0x00);//发送一个哑数据 !!!
 8006984:	2000      	movs	r0, #0
 8006986:	f7ff ffdb 	bl	8006940 <wizchip_write>
    i = SPI_I2S_ReceiveData(SPI1);//读取1个字节数据
 800698a:	4805      	ldr	r0, [pc, #20]	; (80069a0 <wizchip_read+0x2c>)
 800698c:	f7ff faf6 	bl	8005f7c <SPI_I2S_ReceiveData>
 8006990:	4603      	mov	r3, r0
 8006992:	71fb      	strb	r3, [r7, #7]
    //printf("R%02x ", i);
    return i;//读取1个字节数据
 8006994:	79fb      	ldrb	r3, [r7, #7]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	40013000 	andmi	r3, r1, r0

080069a4 <DNSClient>:

//DNS 客户端，参数是域名，返回ip地址，失败返回0
uint8_t DNSClient(uint8_t *hostname, uint8_t ip_from_dns[]){
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
    uint8_t tmp = 0;
 80069ae:	2300      	movs	r3, #0
 80069b0:	73fb      	strb	r3, [r7, #15]
    /* DNS client initialization */
    xSemaphoreTake(socketLock, portMAX_DELAY);
 80069b2:	4b0f      	ldr	r3, [pc, #60]	; (80069f0 <DNSClient+0x4c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80069ba:	4618      	mov	r0, r3
 80069bc:	f001 fc3c 	bl	8008238 <xQueueSemaphoreTake>
    DNS_init(SOCK_DNS, gDATABUF);
 80069c0:	490c      	ldr	r1, [pc, #48]	; (80069f4 <DNSClient+0x50>)
 80069c2:	2006      	movs	r0, #6
 80069c4:	f7fe ff30 	bl	8005828 <DNS_init>

    /* DNS query & response */
    tmp = DNS_run(gWIZNETINFO.dns, secondary_dns_server, hostname, ip_from_dns);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	490a      	ldr	r1, [pc, #40]	; (80069f8 <DNSClient+0x54>)
 80069ce:	480b      	ldr	r0, [pc, #44]	; (80069fc <DNSClient+0x58>)
 80069d0:	f7fe ff62 	bl	8005898 <DNS_run>
 80069d4:	4603      	mov	r3, r0
 80069d6:	73fb      	strb	r3, [r7, #15]
    xSemaphoreGive(socketLock);
 80069d8:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <DNSClient+0x4c>)
 80069da:	6818      	ldr	r0, [r3, #0]
 80069dc:	2300      	movs	r3, #0
 80069de:	2200      	movs	r2, #0
 80069e0:	2100      	movs	r1, #0
 80069e2:	f001 fb7f 	bl	80080e4 <xQueueGenericSend>
    //tmp = DNS_run(gWIZNETINFO.dns, 0, hostname, ip_from_dns); // if you want to use only primary DNS server, second parameter set to 0
    return tmp;
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	200042f4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
 80069f4:	20003af0 	strdcs	r3, [r0], -r0
 80069f8:	200000e4 	andcs	r0, r0, r4, ror #1
 80069fc:	200000de 	ldrdcs	r0, [r0], -lr

08006a00 <mqtt_send_packet>:

static int mqtt_send_packet(void* socket_info, const void* buf, unsigned int count) {
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
    int32_t ret;uint8_t sn;
    sn = (int)socket_info;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	75fb      	strb	r3, [r7, #23]
    xSemaphoreTake(socketLock, portMAX_DELAY);
 8006a10:	4b0d      	ldr	r3, [pc, #52]	; (8006a48 <mqtt_send_packet+0x48>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f001 fc0d 	bl	8008238 <xQueueSemaphoreTake>
	ret = send(sn, (uint8_t *)buf, count);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	7dfb      	ldrb	r3, [r7, #23]
 8006a24:	68b9      	ldr	r1, [r7, #8]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fb f99e 	bl	8001d68 <send>
 8006a2c:	6138      	str	r0, [r7, #16]
	xSemaphoreGive(socketLock);
 8006a2e:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <mqtt_send_packet+0x48>)
 8006a30:	6818      	ldr	r0, [r3, #0]
 8006a32:	2300      	movs	r3, #0
 8006a34:	2200      	movs	r2, #0
 8006a36:	2100      	movs	r1, #0
 8006a38:	f001 fb54 	bl	80080e4 <xQueueGenericSend>
	return ret;
 8006a3c:	693b      	ldr	r3, [r7, #16]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	200042f4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>

08006a4c <mqtt_read_packet>:

static int mqtt_read_packet(void){
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
    int total_bytes = 0, bytes_rcvd, packet_length;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60fb      	str	r3, [r7, #12]
    uint8_t rem_len_bytes;  // 1~4
    uint16_t rem_len;   // 数据包中数据长度

	memset(packet_buffer, 0, sizeof(packet_buffer));
 8006a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	4832      	ldr	r0, [pc, #200]	; (8006b28 <mqtt_read_packet+0xdc>)
 8006a5e:	f7f9 fbcd 	bl	80001fc <memset>

	xSemaphoreTake(socketLock, portMAX_DELAY);
 8006a62:	4b32      	ldr	r3, [pc, #200]	; (8006b2c <mqtt_read_packet+0xe0>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f001 fbe4 	bl	8008238 <xQueueSemaphoreTake>
	if((bytes_rcvd = recv(SOCK_MQTT, packet_buffer, MQTT_RCVBUFSIZE)) <= 0) {
 8006a70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a74:	492c      	ldr	r1, [pc, #176]	; (8006b28 <mqtt_read_packet+0xdc>)
 8006a76:	2000      	movs	r0, #0
 8006a78:	f7fb fa70 	bl	8001f5c <recv>
 8006a7c:	60b8      	str	r0, [r7, #8]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	dc09      	bgt.n	8006a98 <mqtt_read_packet+0x4c>
		xSemaphoreGive(socketLock);
 8006a84:	4b29      	ldr	r3, [pc, #164]	; (8006b2c <mqtt_read_packet+0xe0>)
 8006a86:	6818      	ldr	r0, [r3, #0]
 8006a88:	2300      	movs	r3, #0
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	f001 fb29 	bl	80080e4 <xQueueGenericSend>
		return -1;
 8006a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a96:	e042      	b.n	8006b1e <mqtt_read_packet+0xd2>
    }
	xSemaphoreGive(socketLock);
 8006a98:	4b24      	ldr	r3, [pc, #144]	; (8006b2c <mqtt_read_packet+0xe0>)
 8006a9a:	6818      	ldr	r0, [r3, #0]
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	f001 fb1f 	bl	80080e4 <xQueueGenericSend>

	total_bytes += bytes_rcvd;
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	4413      	add	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]
	if (total_bytes < 2) return -1;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	dc02      	bgt.n	8006aba <mqtt_read_packet+0x6e>
 8006ab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ab8:	e031      	b.n	8006b1e <mqtt_read_packet+0xd2>

    /* 获得帧中保存载荷数据长度的可变数据长度 */
    rem_len_bytes = mqtt_num_rem_len_bytes(packet_buffer);
 8006aba:	481b      	ldr	r0, [pc, #108]	; (8006b28 <mqtt_read_packet+0xdc>)
 8006abc:	f000 fd9e 	bl	80075fc <mqtt_num_rem_len_bytes>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	71fb      	strb	r3, [r7, #7]
	/* 获得载荷数据长度 */
    rem_len = mqtt_parse_rem_len(packet_buffer);
 8006ac4:	4818      	ldr	r0, [pc, #96]	; (8006b28 <mqtt_read_packet+0xdc>)
 8006ac6:	f000 fdc1 	bl	800764c <mqtt_parse_rem_len>
 8006aca:	4603      	mov	r3, r0
 8006acc:	80bb      	strh	r3, [r7, #4]

	// 数据包总长度 = 载荷长度 + 1byte帧头 + 帧中表示载荷长度的可变数据长度
    packet_length = rem_len + rem_len_bytes + 1;
 8006ace:	88ba      	ldrh	r2, [r7, #4]
 8006ad0:	79fb      	ldrb	r3, [r7, #7]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	603b      	str	r3, [r7, #0]
    // 判断数据长度是否大于缓冲区大小
    if(packet_length >= MQTT_RCVBUFSIZE) return -1;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ade:	db19      	blt.n	8006b14 <mqtt_read_packet+0xc8>
 8006ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ae4:	e01b      	b.n	8006b1e <mqtt_read_packet+0xd2>

	while(total_bytes < packet_length){ //接收剩下的数据
		if((bytes_rcvd = recv(SOCK_MQTT, (packet_buffer+total_bytes), (MQTT_RCVBUFSIZE - total_bytes))) <= 0) return -1;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4a0f      	ldr	r2, [pc, #60]	; (8006b28 <mqtt_read_packet+0xdc>)
 8006aea:	1899      	adds	r1, r3, r2
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	461a      	mov	r2, r3
 8006af8:	2000      	movs	r0, #0
 8006afa:	f7fb fa2f 	bl	8001f5c <recv>
 8006afe:	60b8      	str	r0, [r7, #8]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	dc02      	bgt.n	8006b0c <mqtt_read_packet+0xc0>
 8006b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b0a:	e008      	b.n	8006b1e <mqtt_read_packet+0xd2>
		total_bytes += bytes_rcvd;
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	4413      	add	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]
	while(total_bytes < packet_length){ //接收剩下的数据
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	dbe4      	blt.n	8006ae6 <mqtt_read_packet+0x9a>
	}

	return packet_length;
 8006b1c:	683b      	ldr	r3, [r7, #0]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	20003684 	andcs	r3, r0, r4, lsl #13
 8006b2c:	200042f4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>

08006b30 <main>:
static void vTask_Main(void * pvParameters);
static void vTask_Display(void * pvParameters);
static void vTask_DHCP(void * pvParameters);
static void vTask_LockOn(void * pvParameters);

int main(void){
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af02      	add	r7, sp, #8
    uint8_t tmp = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	71fb      	strb	r3, [r7, #7]
    NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8006b3a:	f44f 7040 	mov.w	r0, #768	; 0x300
 8006b3e:	f7fe ff0b 	bl	8005958 <NVIC_PriorityGroupConfig>
    /* LED和锁 */
    Init_led_lock();
 8006b42:	f7ff fdbb 	bl	80066bc <Init_led_lock>
    /* 产生时基 */
    Init_tim2_ms_base();
 8006b46:	f7ff fe3f 	bl	80067c8 <Init_tim2_ms_base>
    /* OLED硬件初始化 */
    Init_i2c1_oled();
 8006b4a:	f7ff fd75 	bl	8006638 <Init_i2c1_oled>
    /* 初始化W5500 */
    Init_spi1_w5500();
 8006b4e:	f7ff fdd9 	bl	8006704 <Init_spi1_w5500>
    // 初始化独立看门狗
    Init_iwdg_reset();
 8006b52:	f7ff fe6b 	bl	800682c <Init_iwdg_reset>
    // 初始化RTC
	//Init_RTC();

    /* 发送初始化指令序列 */
    Driver_OLED_Send_START(OLED_COMMAND);
 8006b56:	2000      	movs	r0, #0
 8006b58:	f7fa fc7e 	bl	8001458 <Driver_OLED_Send_START>
	Driver_OLED_SendDatas(oled_init, sizeof(oled_init));
 8006b5c:	211b      	movs	r1, #27
 8006b5e:	4850      	ldr	r0, [pc, #320]	; (8006ca0 <main+0x170>)
 8006b60:	f7fa fcb8 	bl	80014d4 <Driver_OLED_SendDatas>
	Driver_OLED_Fill(0x0);
 8006b64:	2000      	movs	r0, #0
 8006b66:	f7fa fce7 	bl	8001538 <Driver_OLED_Fill>

    /* 片选回调函数 */
#if _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_
    reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8006b6a:	494e      	ldr	r1, [pc, #312]	; (8006ca4 <main+0x174>)
 8006b6c:	484e      	ldr	r0, [pc, #312]	; (8006ca8 <main+0x178>)
 8006b6e:	f7fb fe6d 	bl	800284c <reg_wizchip_cs_cbfunc>
    #else
        reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
    #endif
#endif
    /* SPI读写回调函数 */
    reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8006b72:	494e      	ldr	r1, [pc, #312]	; (8006cac <main+0x17c>)
 8006b74:	484e      	ldr	r0, [pc, #312]	; (8006cb0 <main+0x180>)
 8006b76:	f7fb fe8d 	bl	8002894 <reg_wizchip_spi_cbfunc>
    /* 操作系统临界区进出入接口 */
    reg_wizchip_cris_cbfunc(vPortEnterCritical, vPortExitCritical);
 8006b7a:	494e      	ldr	r1, [pc, #312]	; (8006cb4 <main+0x184>)
 8006b7c:	484e      	ldr	r0, [pc, #312]	; (8006cb8 <main+0x188>)
 8006b7e:	f7fb fe41 	bl	8002804 <reg_wizchip_cris_cbfunc>

    /* 喂狗 */
    IWDG_ReloadCounter();
 8006b82:	f7ff fd23 	bl	80065cc <IWDG_ReloadCounter>

    /* PHY 连接状态检查,如果网线没连则一直在这儿 */
    do{
        if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
 8006b86:	1dfb      	adds	r3, r7, #7
 8006b88:	4619      	mov	r1, r3
 8006b8a:	200f      	movs	r0, #15
 8006b8c:	f7fb feac 	bl	80028e8 <ctlwizchip>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b96:	d107      	bne.n	8006ba8 <main+0x78>
            Driver_OLED_ShowString(0, 0, "Unknow PHY Link stat.", 8, 0);
 8006b98:	2300      	movs	r3, #0
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	2308      	movs	r3, #8
 8006b9e:	4a47      	ldr	r2, [pc, #284]	; (8006cbc <main+0x18c>)
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	f7fa fe88 	bl	80018b8 <Driver_OLED_ShowString>
    }while(tmp == PHY_LINK_OFF);
 8006ba8:	79fb      	ldrb	r3, [r7, #7]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0eb      	beq.n	8006b86 <main+0x56>

    /* 喂狗 */
    IWDG_ReloadCounter();
 8006bae:	f7ff fd0d 	bl	80065cc <IWDG_ReloadCounter>

    /* 初始化缓冲区 */
    if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1){
 8006bb2:	4943      	ldr	r1, [pc, #268]	; (8006cc0 <main+0x190>)
 8006bb4:	2001      	movs	r0, #1
 8006bb6:	f7fb fe97 	bl	80028e8 <ctlwizchip>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bc0:	d108      	bne.n	8006bd4 <main+0xa4>
        Driver_OLED_ShowString(0, 0, "NET Initialized fail.", 8, 0);
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	2308      	movs	r3, #8
 8006bc8:	4a3e      	ldr	r2, [pc, #248]	; (8006cc4 <main+0x194>)
 8006bca:	2100      	movs	r1, #0
 8006bcc:	2000      	movs	r0, #0
 8006bce:	f7fa fe73 	bl	80018b8 <Driver_OLED_ShowString>
        while(1);
 8006bd2:	e7fe      	b.n	8006bd2 <main+0xa2>
    }

    // 创建开锁通知信号量
	lockNotify = xSemaphoreCreateBinary();
 8006bd4:	2203      	movs	r2, #3
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	2001      	movs	r0, #1
 8006bda:	f001 fa03 	bl	8007fe4 <xQueueGenericCreate>
 8006bde:	4602      	mov	r2, r0
 8006be0:	4b39      	ldr	r3, [pc, #228]	; (8006cc8 <main+0x198>)
 8006be2:	601a      	str	r2, [r3, #0]
	if(lockNotify == NULL){
 8006be4:	4b38      	ldr	r3, [pc, #224]	; (8006cc8 <main+0x198>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d100      	bne.n	8006bee <main+0xbe>
		// "Failed to Create Lock notify Semaphore!"
		while(1);
 8006bec:	e7fe      	b.n	8006bec <main+0xbc>
	}
	socketLock= xSemaphoreCreateMutex();
 8006bee:	2001      	movs	r0, #1
 8006bf0:	f001 fa60 	bl	80080b4 <xQueueCreateMutex>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	4b35      	ldr	r3, [pc, #212]	; (8006ccc <main+0x19c>)
 8006bf8:	601a      	str	r2, [r3, #0]
	if(socketLock == NULL){
 8006bfa:	4b34      	ldr	r3, [pc, #208]	; (8006ccc <main+0x19c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d100      	bne.n	8006c04 <main+0xd4>
		//"Failed to Create Socket Lock Mutex!"
		while(1);
 8006c02:	e7fe      	b.n	8006c02 <main+0xd2>
	}

    /* 初始化IP配置 */
	ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);	// 配置静态ip
 8006c04:	4932      	ldr	r1, [pc, #200]	; (8006cd0 <main+0x1a0>)
 8006c06:	2000      	movs	r0, #0
 8006c08:	f7fb ff4c 	bl	8002aa4 <ctlnetwork>
    if(gWIZNETINFO.dhcp == NETINFO_DHCP){
 8006c0c:	4b30      	ldr	r3, [pc, #192]	; (8006cd0 <main+0x1a0>)
 8006c0e:	7d9b      	ldrb	r3, [r3, #22]
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d10e      	bne.n	8006c32 <main+0x102>
        /* >> DHCP 客户端 << */
        // 创建DHCP任务
    	if(xTaskCreate(vTask_DHCP, "DHCP Client", 3072 >> 2, NULL, 0, &dhcpClientTask) != pdPASS){
 8006c14:	4b2f      	ldr	r3, [pc, #188]	; (8006cd4 <main+0x1a4>)
 8006c16:	9301      	str	r3, [sp, #4]
 8006c18:	2300      	movs	r3, #0
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006c22:	492d      	ldr	r1, [pc, #180]	; (8006cd8 <main+0x1a8>)
 8006c24:	482d      	ldr	r0, [pc, #180]	; (8006cdc <main+0x1ac>)
 8006c26:	f001 fcd1 	bl	80085cc <xTaskCreate>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d003      	beq.n	8006c38 <main+0x108>
    		//"Failed to Create DHCP Client Task!"
    		while(1);
 8006c30:	e7fe      	b.n	8006c30 <main+0x100>
    	}
    }else{
    	ip_configed = 1;
 8006c32:	4b2b      	ldr	r3, [pc, #172]	; (8006ce0 <main+0x1b0>)
 8006c34:	2201      	movs	r2, #1
 8006c36:	701a      	strb	r2, [r3, #0]
    }

    // 创建开锁任务
    if(xTaskCreate(vTask_LockOn, "Lock Task", 1024 >> 2, NULL, 1, &lockTask) != pdPASS){
 8006c38:	4b2a      	ldr	r3, [pc, #168]	; (8006ce4 <main+0x1b4>)
 8006c3a:	9301      	str	r3, [sp, #4]
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	2300      	movs	r3, #0
 8006c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c46:	4928      	ldr	r1, [pc, #160]	; (8006ce8 <main+0x1b8>)
 8006c48:	4828      	ldr	r0, [pc, #160]	; (8006cec <main+0x1bc>)
 8006c4a:	f001 fcbf 	bl	80085cc <xTaskCreate>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d000      	beq.n	8006c56 <main+0x126>
    	//"Failed to Create Lock Task!"
		while(1);
 8006c54:	e7fe      	b.n	8006c54 <main+0x124>
	}
    // 显示任务
    if(xTaskCreate(vTask_Display, "OLED Task", 2048 >> 2, NULL, 0, &oledTask) != pdPASS){
 8006c56:	4b26      	ldr	r3, [pc, #152]	; (8006cf0 <main+0x1c0>)
 8006c58:	9301      	str	r3, [sp, #4]
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c64:	4923      	ldr	r1, [pc, #140]	; (8006cf4 <main+0x1c4>)
 8006c66:	4824      	ldr	r0, [pc, #144]	; (8006cf8 <main+0x1c8>)
 8006c68:	f001 fcb0 	bl	80085cc <xTaskCreate>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d000      	beq.n	8006c74 <main+0x144>
		//"Failed to Create Main Task!"
		while(1);
 8006c72:	e7fe      	b.n	8006c72 <main+0x142>
	}
    // 创建主任务
    if(xTaskCreate(vTask_Main, "Main Task", 5120 >> 2, NULL, 0, &mainTask) != pdPASS){
 8006c74:	4b21      	ldr	r3, [pc, #132]	; (8006cfc <main+0x1cc>)
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	2300      	movs	r3, #0
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8006c82:	491f      	ldr	r1, [pc, #124]	; (8006d00 <main+0x1d0>)
 8006c84:	481f      	ldr	r0, [pc, #124]	; (8006d04 <main+0x1d4>)
 8006c86:	f001 fca1 	bl	80085cc <xTaskCreate>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d000      	beq.n	8006c92 <main+0x162>
		//"Failed to Create Main Task!"
		while(1);
 8006c90:	e7fe      	b.n	8006c90 <main+0x160>
	}
    // 开始调度
    vTaskStartScheduler();
 8006c92:	f001 fdeb 	bl	800886c <vTaskStartScheduler>
    return 0;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	20000064 	andcs	r0, r0, r4, rrx
 8006ca4:	0800692d 	stmdaeq	r0, {r0, r2, r3, r5, r8, fp, sp, lr}
 8006ca8:	08006919 	stmdaeq	r0, {r0, r3, r4, r8, fp, sp, lr}
 8006cac:	08006941 	stmdaeq	r0, {r0, r6, r8, fp, sp, lr}
 8006cb0:	08006975 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, fp, sp, lr}
 8006cb4:	080093b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, r9, ip, pc}
 8006cb8:	08009389 	stmdaeq	r0, {r0, r3, r7, r8, r9, ip, pc}
 8006cbc:	080095a8 	stmdaeq	r0, {r3, r5, r7, r8, sl, ip, pc}
 8006cc0:	0800a020 	stmdaeq	r0, {r5, sp, pc}
 8006cc4:	080095c0 	stmdaeq	r0, {r6, r7, r8, sl, ip, pc}
 8006cc8:	20003a84 	andcs	r3, r0, r4, lsl #21
 8006ccc:	200042f4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
 8006cd0:	200000cc 	andcs	r0, r0, ip, asr #1
 8006cd4:	200042f0 	strdcs	r4, [r0], -r0
 8006cd8:	080095d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, ip, pc}
 8006cdc:	080074b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, sl, ip, sp, lr}
 8006ce0:	2000014c 	andcs	r0, r0, ip, asr #2
 8006ce4:	20003a8c 	andcs	r3, r0, ip, lsl #21
 8006ce8:	080095e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, ip, pc}
 8006cec:	08007591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, sp, lr}
 8006cf0:	200042f8 	strdcs	r4, [r0], -r8
 8006cf4:	080095f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip, pc}
 8006cf8:	08006d09 	stmdaeq	r0, {r0, r3, r8, sl, fp, sp, lr}
 8006cfc:	20003a88 	andcs	r3, r0, r8, lsl #21
 8006d00:	080095fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, ip, pc}
 8006d04:	08007109 	stmdaeq	r0, {r0, r3, r8, ip, sp, lr}

08006d08 <vTask_Display>:

// 显示任务
static void vTask_Display(void * pvParameters){
 8006d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d0a:	b099      	sub	sp, #100	; 0x64
 8006d0c:	af06      	add	r7, sp, #24
 8006d0e:	6078      	str	r0, [r7, #4]
	uint32_t times = 0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	647b      	str	r3, [r7, #68]	; 0x44
	char tmpstr[6],disp[22];
	wiz_NetInfo netinfo;
	char *msg;

	/* 清空屏幕 */
	Driver_OLED_Fill(0x0);
 8006d14:	2000      	movs	r0, #0
 8006d16:	f7fa fc0f 	bl	8001538 <Driver_OLED_Fill>
	while(1){
		while(!ip_configed) {
 8006d1a:	e007      	b.n	8006d2c <vTask_Display+0x24>
			// 换出当前任务
			taskYIELD();
 8006d1c:	4b17      	ldr	r3, [pc, #92]	; (8006d7c <vTask_Display+0x74>)
 8006d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	f3bf 8f6f 	isb	sy
		while(!ip_configed) {
 8006d2c:	4b14      	ldr	r3, [pc, #80]	; (8006d80 <vTask_Display+0x78>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d0f2      	beq.n	8006d1c <vTask_Display+0x14>
		}

		msg = infoMsg;	// 读msg,发起一次总线读操作,原子
 8006d36:	4b13      	ldr	r3, [pc, #76]	; (8006d84 <vTask_Display+0x7c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	643b      	str	r3, [r7, #64]	; 0x40
		infoMsg = NULL;
 8006d3c:	4b11      	ldr	r3, [pc, #68]	; (8006d84 <vTask_Display+0x7c>)
 8006d3e:	2200      	movs	r2, #0
 8006d40:	601a      	str	r2, [r3, #0]
		ctlnetwork(CN_GET_NETINFO, (void*)&netinfo);
 8006d42:	f107 0308 	add.w	r3, r7, #8
 8006d46:	4619      	mov	r1, r3
 8006d48:	2001      	movs	r0, #1
 8006d4a:	f7fb feab 	bl	8002aa4 <ctlnetwork>
		// 显示网络信息
		ctlwizchip(CW_GET_ID,(void*)tmpstr);
 8006d4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006d52:	4619      	mov	r1, r3
 8006d54:	2008      	movs	r0, #8
 8006d56:	f7fb fdc7 	bl	80028e8 <ctlwizchip>
		/* 打印版本信息 */
		Driver_OLED_ShowString(0, 0, "TDSAST-IOT V2.1.0", 8, times % 2);
 8006d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	2308      	movs	r3, #8
 8006d68:	4a07      	ldr	r2, [pc, #28]	; (8006d88 <vTask_Display+0x80>)
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	f7fa fda3 	bl	80018b8 <Driver_OLED_ShowString>
		snprintf(disp, sizeof(disp), "%s:%s", tmpstr, (netinfo.dhcp == NETINFO_DHCP ? "DHCP" : "STATIC"));
 8006d72:	7fbb      	ldrb	r3, [r7, #30]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d10b      	bne.n	8006d90 <vTask_Display+0x88>
 8006d78:	4b04      	ldr	r3, [pc, #16]	; (8006d8c <vTask_Display+0x84>)
 8006d7a:	e00a      	b.n	8006d92 <vTask_Display+0x8a>
 8006d7c:	e000ed04 	and	lr, r0, r4, lsl #26
 8006d80:	2000014c 	andcs	r0, r0, ip, asr #2
 8006d84:	20000148 	andcs	r0, r0, r8, asr #2
 8006d88:	08009608 	stmdaeq	r0, {r3, r9, sl, ip, pc}
 8006d8c:	0800961c 	stmdaeq	r0, {r2, r3, r4, r9, sl, ip, pc}
 8006d90:	4bc3      	ldr	r3, [pc, #780]	; (80070a0 <vTask_Display+0x398>)
 8006d92:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006d96:	f107 0020 	add.w	r0, r7, #32
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	4ac1      	ldr	r2, [pc, #772]	; (80070a4 <vTask_Display+0x39c>)
 8006da0:	2116      	movs	r1, #22
 8006da2:	f7f9 fb41 	bl	8000428 <sniprintf>
		Driver_OLED_ClearRow(((times) % 6) + 1);
 8006da6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006da8:	4bbf      	ldr	r3, [pc, #764]	; (80070a8 <vTask_Display+0x3a0>)
 8006daa:	fba3 2301 	umull	r2, r3, r3, r1
 8006dae:	089a      	lsrs	r2, r3, #2
 8006db0:	4613      	mov	r3, r2
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	4413      	add	r3, r2
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	1aca      	subs	r2, r1, r3
 8006dba:	b2d3      	uxtb	r3, r2
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7fa fc11 	bl	80015e8 <Driver_OLED_ClearRow>
		Driver_OLED_ShowString(0, ((times) % 6) + 1, disp, 8, 0);
 8006dc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006dc8:	4bb7      	ldr	r3, [pc, #732]	; (80070a8 <vTask_Display+0x3a0>)
 8006dca:	fba3 2301 	umull	r2, r3, r3, r1
 8006dce:	089a      	lsrs	r2, r3, #2
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	005b      	lsls	r3, r3, #1
 8006dd4:	4413      	add	r3, r2
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	1aca      	subs	r2, r1, r3
 8006dda:	b2d3      	uxtb	r3, r2
 8006ddc:	3301      	adds	r3, #1
 8006dde:	b2d9      	uxtb	r1, r3
 8006de0:	f107 0220 	add.w	r2, r7, #32
 8006de4:	2300      	movs	r3, #0
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	2308      	movs	r3, #8
 8006dea:	2000      	movs	r0, #0
 8006dec:	f7fa fd64 	bl	80018b8 <Driver_OLED_ShowString>
		taskYIELD();
 8006df0:	4bae      	ldr	r3, [pc, #696]	; (80070ac <vTask_Display+0x3a4>)
 8006df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df6:	601a      	str	r2, [r3, #0]
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	f3bf 8f6f 	isb	sy

		snprintf(disp, sizeof(disp), "MAC:%02X:%02X:%02X:%02X:%02X:%02X",netinfo.mac[0],netinfo.mac[1],netinfo.mac[2],
 8006e00:	7a3b      	ldrb	r3, [r7, #8]
 8006e02:	461e      	mov	r6, r3
 8006e04:	7a7b      	ldrb	r3, [r7, #9]
 8006e06:	7aba      	ldrb	r2, [r7, #10]
				netinfo.mac[3],netinfo.mac[4],netinfo.mac[5]);
 8006e08:	7af9      	ldrb	r1, [r7, #11]
 8006e0a:	7b38      	ldrb	r0, [r7, #12]
		snprintf(disp, sizeof(disp), "MAC:%02X:%02X:%02X:%02X:%02X:%02X",netinfo.mac[0],netinfo.mac[1],netinfo.mac[2],
 8006e0c:	4604      	mov	r4, r0
				netinfo.mac[3],netinfo.mac[4],netinfo.mac[5]);
 8006e0e:	7b78      	ldrb	r0, [r7, #13]
		snprintf(disp, sizeof(disp), "MAC:%02X:%02X:%02X:%02X:%02X:%02X",netinfo.mac[0],netinfo.mac[1],netinfo.mac[2],
 8006e10:	4605      	mov	r5, r0
 8006e12:	f107 0020 	add.w	r0, r7, #32
 8006e16:	9504      	str	r5, [sp, #16]
 8006e18:	9403      	str	r4, [sp, #12]
 8006e1a:	9102      	str	r1, [sp, #8]
 8006e1c:	9201      	str	r2, [sp, #4]
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	4633      	mov	r3, r6
 8006e22:	4aa3      	ldr	r2, [pc, #652]	; (80070b0 <vTask_Display+0x3a8>)
 8006e24:	2116      	movs	r1, #22
 8006e26:	f7f9 faff 	bl	8000428 <sniprintf>
		Driver_OLED_ClearRow(((times + 4) % 6) + 1);
 8006e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e2c:	1d19      	adds	r1, r3, #4
 8006e2e:	4b9e      	ldr	r3, [pc, #632]	; (80070a8 <vTask_Display+0x3a0>)
 8006e30:	fba3 2301 	umull	r2, r3, r3, r1
 8006e34:	089a      	lsrs	r2, r3, #2
 8006e36:	4613      	mov	r3, r2
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	4413      	add	r3, r2
 8006e3c:	005b      	lsls	r3, r3, #1
 8006e3e:	1aca      	subs	r2, r1, r3
 8006e40:	b2d3      	uxtb	r3, r2
 8006e42:	3301      	adds	r3, #1
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fa fbce 	bl	80015e8 <Driver_OLED_ClearRow>
		Driver_OLED_ShowString(0, ((times + 4) % 6) + 1, disp, 8, 0);
 8006e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e4e:	1d19      	adds	r1, r3, #4
 8006e50:	4b95      	ldr	r3, [pc, #596]	; (80070a8 <vTask_Display+0x3a0>)
 8006e52:	fba3 2301 	umull	r2, r3, r3, r1
 8006e56:	089a      	lsrs	r2, r3, #2
 8006e58:	4613      	mov	r3, r2
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	4413      	add	r3, r2
 8006e5e:	005b      	lsls	r3, r3, #1
 8006e60:	1aca      	subs	r2, r1, r3
 8006e62:	b2d3      	uxtb	r3, r2
 8006e64:	3301      	adds	r3, #1
 8006e66:	b2d9      	uxtb	r1, r3
 8006e68:	f107 0220 	add.w	r2, r7, #32
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	2308      	movs	r3, #8
 8006e72:	2000      	movs	r0, #0
 8006e74:	f7fa fd20 	bl	80018b8 <Driver_OLED_ShowString>
		taskYIELD();
 8006e78:	4b8c      	ldr	r3, [pc, #560]	; (80070ac <vTask_Display+0x3a4>)
 8006e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e7e:	601a      	str	r2, [r3, #0]
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	f3bf 8f6f 	isb	sy

		// 显示当前ip地址
		taskENTER_CRITICAL();
 8006e88:	f002 fa7e 	bl	8009388 <vPortEnterCritical>
		tmpstr[0] = server_ip[0];
 8006e8c:	4b89      	ldr	r3, [pc, #548]	; (80070b4 <vTask_Display+0x3ac>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		tmpstr[1] = server_ip[1];
 8006e94:	4b87      	ldr	r3, [pc, #540]	; (80070b4 <vTask_Display+0x3ac>)
 8006e96:	785b      	ldrb	r3, [r3, #1]
 8006e98:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		tmpstr[2] = server_ip[2];
 8006e9c:	4b85      	ldr	r3, [pc, #532]	; (80070b4 <vTask_Display+0x3ac>)
 8006e9e:	789b      	ldrb	r3, [r3, #2]
 8006ea0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		tmpstr[3] = server_ip[3];
 8006ea4:	4b83      	ldr	r3, [pc, #524]	; (80070b4 <vTask_Display+0x3ac>)
 8006ea6:	78db      	ldrb	r3, [r3, #3]
 8006ea8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		taskEXIT_CRITICAL();
 8006eac:	f002 fa84 	bl	80093b8 <vPortExitCritical>
		snprintf(disp, sizeof(disp), "MQTT:%d.%d.%d.%d",tmpstr[0],tmpstr[1],tmpstr[2],tmpstr[3]);
 8006eb0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006eb4:	461c      	mov	r4, r3
 8006eb6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8006eba:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8006ebe:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 8006ec2:	f107 0020 	add.w	r0, r7, #32
 8006ec6:	9102      	str	r1, [sp, #8]
 8006ec8:	9201      	str	r2, [sp, #4]
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	4623      	mov	r3, r4
 8006ece:	4a7a      	ldr	r2, [pc, #488]	; (80070b8 <vTask_Display+0x3b0>)
 8006ed0:	2116      	movs	r1, #22
 8006ed2:	f7f9 faa9 	bl	8000428 <sniprintf>
		Driver_OLED_ClearRow(((times + 1) % 6) + 1);
 8006ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ed8:	1c59      	adds	r1, r3, #1
 8006eda:	4b73      	ldr	r3, [pc, #460]	; (80070a8 <vTask_Display+0x3a0>)
 8006edc:	fba3 2301 	umull	r2, r3, r3, r1
 8006ee0:	089a      	lsrs	r2, r3, #2
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	4413      	add	r3, r2
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	1aca      	subs	r2, r1, r3
 8006eec:	b2d3      	uxtb	r3, r2
 8006eee:	3301      	adds	r3, #1
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fa fb78 	bl	80015e8 <Driver_OLED_ClearRow>
		Driver_OLED_ShowString(0, ((times + 1) % 6) + 1, disp, 8, 0);
 8006ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006efa:	1c59      	adds	r1, r3, #1
 8006efc:	4b6a      	ldr	r3, [pc, #424]	; (80070a8 <vTask_Display+0x3a0>)
 8006efe:	fba3 2301 	umull	r2, r3, r3, r1
 8006f02:	089a      	lsrs	r2, r3, #2
 8006f04:	4613      	mov	r3, r2
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	4413      	add	r3, r2
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	1aca      	subs	r2, r1, r3
 8006f0e:	b2d3      	uxtb	r3, r2
 8006f10:	3301      	adds	r3, #1
 8006f12:	b2d9      	uxtb	r1, r3
 8006f14:	f107 0220 	add.w	r2, r7, #32
 8006f18:	2300      	movs	r3, #0
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	2308      	movs	r3, #8
 8006f1e:	2000      	movs	r0, #0
 8006f20:	f7fa fcca 	bl	80018b8 <Driver_OLED_ShowString>
		taskYIELD();
 8006f24:	4b61      	ldr	r3, [pc, #388]	; (80070ac <vTask_Display+0x3a4>)
 8006f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	f3bf 8f6f 	isb	sy

		snprintf(disp, sizeof(disp), "IP:%d.%d.%d.%d", netinfo.ip[0],netinfo.ip[1],netinfo.ip[2],netinfo.ip[3]);
 8006f34:	7bbb      	ldrb	r3, [r7, #14]
 8006f36:	461c      	mov	r4, r3
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
 8006f3a:	7c3a      	ldrb	r2, [r7, #16]
 8006f3c:	7c79      	ldrb	r1, [r7, #17]
 8006f3e:	f107 0020 	add.w	r0, r7, #32
 8006f42:	9102      	str	r1, [sp, #8]
 8006f44:	9201      	str	r2, [sp, #4]
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	4623      	mov	r3, r4
 8006f4a:	4a5c      	ldr	r2, [pc, #368]	; (80070bc <vTask_Display+0x3b4>)
 8006f4c:	2116      	movs	r1, #22
 8006f4e:	f7f9 fa6b 	bl	8000428 <sniprintf>
		Driver_OLED_ClearRow(((times + 2) % 6) + 1);
 8006f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f54:	1c99      	adds	r1, r3, #2
 8006f56:	4b54      	ldr	r3, [pc, #336]	; (80070a8 <vTask_Display+0x3a0>)
 8006f58:	fba3 2301 	umull	r2, r3, r3, r1
 8006f5c:	089a      	lsrs	r2, r3, #2
 8006f5e:	4613      	mov	r3, r2
 8006f60:	005b      	lsls	r3, r3, #1
 8006f62:	4413      	add	r3, r2
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	1aca      	subs	r2, r1, r3
 8006f68:	b2d3      	uxtb	r3, r2
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7fa fb3a 	bl	80015e8 <Driver_OLED_ClearRow>
		Driver_OLED_ShowString(0, ((times + 2) % 6) + 1, disp, 8, 0);
 8006f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f76:	1c99      	adds	r1, r3, #2
 8006f78:	4b4b      	ldr	r3, [pc, #300]	; (80070a8 <vTask_Display+0x3a0>)
 8006f7a:	fba3 2301 	umull	r2, r3, r3, r1
 8006f7e:	089a      	lsrs	r2, r3, #2
 8006f80:	4613      	mov	r3, r2
 8006f82:	005b      	lsls	r3, r3, #1
 8006f84:	4413      	add	r3, r2
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	1aca      	subs	r2, r1, r3
 8006f8a:	b2d3      	uxtb	r3, r2
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	b2d9      	uxtb	r1, r3
 8006f90:	f107 0220 	add.w	r2, r7, #32
 8006f94:	2300      	movs	r3, #0
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	2308      	movs	r3, #8
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	f7fa fc8c 	bl	80018b8 <Driver_OLED_ShowString>
		taskYIELD();
 8006fa0:	4b42      	ldr	r3, [pc, #264]	; (80070ac <vTask_Display+0x3a4>)
 8006fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	f3bf 8f6f 	isb	sy

		snprintf(disp, sizeof(disp), "GAW:%d.%d.%d.%d", netinfo.gw[0],netinfo.gw[1],netinfo.gw[2],netinfo.gw[3]);
 8006fb0:	7dbb      	ldrb	r3, [r7, #22]
 8006fb2:	461c      	mov	r4, r3
 8006fb4:	7dfb      	ldrb	r3, [r7, #23]
 8006fb6:	7e3a      	ldrb	r2, [r7, #24]
 8006fb8:	7e79      	ldrb	r1, [r7, #25]
 8006fba:	f107 0020 	add.w	r0, r7, #32
 8006fbe:	9102      	str	r1, [sp, #8]
 8006fc0:	9201      	str	r2, [sp, #4]
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	4623      	mov	r3, r4
 8006fc6:	4a3e      	ldr	r2, [pc, #248]	; (80070c0 <vTask_Display+0x3b8>)
 8006fc8:	2116      	movs	r1, #22
 8006fca:	f7f9 fa2d 	bl	8000428 <sniprintf>
		Driver_OLED_ClearRow(((times + 3) % 6) + 1);
 8006fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd0:	1cd9      	adds	r1, r3, #3
 8006fd2:	4b35      	ldr	r3, [pc, #212]	; (80070a8 <vTask_Display+0x3a0>)
 8006fd4:	fba3 2301 	umull	r2, r3, r3, r1
 8006fd8:	089a      	lsrs	r2, r3, #2
 8006fda:	4613      	mov	r3, r2
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	4413      	add	r3, r2
 8006fe0:	005b      	lsls	r3, r3, #1
 8006fe2:	1aca      	subs	r2, r1, r3
 8006fe4:	b2d3      	uxtb	r3, r2
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fa fafc 	bl	80015e8 <Driver_OLED_ClearRow>
		Driver_OLED_ShowString(0, ((times + 3) % 6) + 1, disp, 8, 0);
 8006ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ff2:	1cd9      	adds	r1, r3, #3
 8006ff4:	4b2c      	ldr	r3, [pc, #176]	; (80070a8 <vTask_Display+0x3a0>)
 8006ff6:	fba3 2301 	umull	r2, r3, r3, r1
 8006ffa:	089a      	lsrs	r2, r3, #2
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	005b      	lsls	r3, r3, #1
 8007000:	4413      	add	r3, r2
 8007002:	005b      	lsls	r3, r3, #1
 8007004:	1aca      	subs	r2, r1, r3
 8007006:	b2d3      	uxtb	r3, r2
 8007008:	3301      	adds	r3, #1
 800700a:	b2d9      	uxtb	r1, r3
 800700c:	f107 0220 	add.w	r2, r7, #32
 8007010:	2300      	movs	r3, #0
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	2308      	movs	r3, #8
 8007016:	2000      	movs	r0, #0
 8007018:	f7fa fc4e 	bl	80018b8 <Driver_OLED_ShowString>
		taskYIELD();
 800701c:	4b23      	ldr	r3, [pc, #140]	; (80070ac <vTask_Display+0x3a4>)
 800701e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	f3bf 8f6f 	isb	sy
//		// 这个可以不要
//		snprintf(disp, sizeof(disp), "MSK:%d.%d.%d.%d", netinfo.sn[0],netinfo.sn[1],netinfo.sn[2],netinfo.sn[3]);
//		Driver_OLED_ClearRow(((times + 4) % 6) + 1);
//		Driver_OLED_ShowString(0, ((times + 4) % 6) + 1, disp, 8, 0);

		snprintf(disp, sizeof(disp), "DNS:%d.%d.%d.%d", netinfo.dns[0],netinfo.dns[1],netinfo.dns[2],netinfo.dns[3]);
 800702c:	7ebb      	ldrb	r3, [r7, #26]
 800702e:	461c      	mov	r4, r3
 8007030:	7efb      	ldrb	r3, [r7, #27]
 8007032:	7f3a      	ldrb	r2, [r7, #28]
 8007034:	7f79      	ldrb	r1, [r7, #29]
 8007036:	f107 0020 	add.w	r0, r7, #32
 800703a:	9102      	str	r1, [sp, #8]
 800703c:	9201      	str	r2, [sp, #4]
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	4623      	mov	r3, r4
 8007042:	4a20      	ldr	r2, [pc, #128]	; (80070c4 <vTask_Display+0x3bc>)
 8007044:	2116      	movs	r1, #22
 8007046:	f7f9 f9ef 	bl	8000428 <sniprintf>
		Driver_OLED_ClearRow(((times + 5) % 6) + 1);
 800704a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800704c:	1d59      	adds	r1, r3, #5
 800704e:	4b16      	ldr	r3, [pc, #88]	; (80070a8 <vTask_Display+0x3a0>)
 8007050:	fba3 2301 	umull	r2, r3, r3, r1
 8007054:	089a      	lsrs	r2, r3, #2
 8007056:	4613      	mov	r3, r2
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	4413      	add	r3, r2
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	1aca      	subs	r2, r1, r3
 8007060:	b2d3      	uxtb	r3, r2
 8007062:	3301      	adds	r3, #1
 8007064:	b2db      	uxtb	r3, r3
 8007066:	4618      	mov	r0, r3
 8007068:	f7fa fabe 	bl	80015e8 <Driver_OLED_ClearRow>
		Driver_OLED_ShowString(0, ((times + 5) % 6) + 1, disp, 8, 0);
 800706c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800706e:	1d59      	adds	r1, r3, #5
 8007070:	4b0d      	ldr	r3, [pc, #52]	; (80070a8 <vTask_Display+0x3a0>)
 8007072:	fba3 2301 	umull	r2, r3, r3, r1
 8007076:	089a      	lsrs	r2, r3, #2
 8007078:	4613      	mov	r3, r2
 800707a:	005b      	lsls	r3, r3, #1
 800707c:	4413      	add	r3, r2
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	1aca      	subs	r2, r1, r3
 8007082:	b2d3      	uxtb	r3, r2
 8007084:	3301      	adds	r3, #1
 8007086:	b2d9      	uxtb	r1, r3
 8007088:	f107 0220 	add.w	r2, r7, #32
 800708c:	2300      	movs	r3, #0
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	2308      	movs	r3, #8
 8007092:	2000      	movs	r0, #0
 8007094:	f7fa fc10 	bl	80018b8 <Driver_OLED_ShowString>
		times++;
 8007098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800709a:	3301      	adds	r3, #1
 800709c:	647b      	str	r3, [r7, #68]	; 0x44
 800709e:	e013      	b.n	80070c8 <vTask_Display+0x3c0>
 80070a0:	08009624 	stmdaeq	r0, {r2, r5, r9, sl, ip, pc}
 80070a4:	0800962c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip, pc}
 80070a8:	aaaaaaab 	bge	6ab1b5c <_Min_Stack_Size+0x6ab195c>
 80070ac:	e000ed04 	and	lr, r0, r4, lsl #26
 80070b0:	08009634 	stmdaeq	r0, {r2, r4, r5, r9, sl, ip, pc}
 80070b4:	20003a90 	mulcs	r0, r0, sl
 80070b8:	08009658 	stmdaeq	r0, {r3, r4, r6, r9, sl, ip, pc}
 80070bc:	0800966c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, ip, pc}
 80070c0:	0800967c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip, pc}
 80070c4:	0800968c 	stmdaeq	r0, {r2, r3, r7, r9, sl, ip, pc}
		taskYIELD();
 80070c8:	4b0e      	ldr	r3, [pc, #56]	; (8007104 <vTask_Display+0x3fc>)
 80070ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	f3bf 8f6f 	isb	sy
		if(msg){
 80070d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d009      	beq.n	80070f2 <vTask_Display+0x3ea>
			Driver_OLED_ShowString(0, 7, msg, 8, 0); // 显示在最后一行
 80070de:	2300      	movs	r3, #0
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	2308      	movs	r3, #8
 80070e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070e6:	2107      	movs	r1, #7
 80070e8:	2000      	movs	r0, #0
 80070ea:	f7fa fbe5 	bl	80018b8 <Driver_OLED_ShowString>
			msg = NULL;
 80070ee:	2300      	movs	r3, #0
 80070f0:	643b      	str	r3, [r7, #64]	; 0x40
		}
		vTaskDelay(pdMS_TO_TICKS(3000));
 80070f2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80070f6:	f001 fb95 	bl	8008824 <vTaskDelay>
		Driver_OLED_ClearRow(7);
 80070fa:	2007      	movs	r0, #7
 80070fc:	f7fa fa74 	bl	80015e8 <Driver_OLED_ClearRow>
	}
 8007100:	e60b      	b.n	8006d1a <vTask_Display+0x12>
 8007102:	bf00      	nop
 8007104:	e000ed04 	and	lr, r0, r4, lsl #26

08007108 <vTask_Main>:
}

static void vTask_Main(void * pvParameters){
 8007108:	b580      	push	{r7, lr}
 800710a:	b0a6      	sub	sp, #152	; 0x98
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
    int packet_length;  // 包长度
	uint16_t msg_id, msg_id_rcv;
	while(1){

		while(!ip_configed) {
 8007110:	e007      	b.n	8007122 <vTask_Main+0x1a>
			// 换出当前任务
			taskYIELD();
 8007112:	4ba6      	ldr	r3, [pc, #664]	; (80073ac <vTask_Main+0x2a4>)
 8007114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007118:	601a      	str	r2, [r3, #0]
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	f3bf 8f6f 	isb	sy
		while(!ip_configed) {
 8007122:	4ba3      	ldr	r3, [pc, #652]	; (80073b0 <vTask_Main+0x2a8>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	d0f2      	beq.n	8007112 <vTask_Main+0xa>
		}

		// 强制上锁标志
		if(force_lock){
 800712c:	4ba1      	ldr	r3, [pc, #644]	; (80073b4 <vTask_Main+0x2ac>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b00      	cmp	r3, #0
 8007134:	d012      	beq.n	800715c <vTask_Main+0x54>
			lock_status = 1;
 8007136:	4ba0      	ldr	r3, [pc, #640]	; (80073b8 <vTask_Main+0x2b0>)
 8007138:	2201      	movs	r2, #1
 800713a:	701a      	strb	r2, [r3, #0]
			GPIO_SetBits(GPIOB, GPIO_Pin_8);  //上锁
 800713c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007140:	489e      	ldr	r0, [pc, #632]	; (80073bc <vTask_Main+0x2b4>)
 8007142:	f7fe fe8d 	bl	8005e60 <GPIO_SetBits>
			/* 喂狗 */
			IWDG_ReloadCounter();
 8007146:	f7ff fa41 	bl	80065cc <IWDG_ReloadCounter>
			if(Timer2_Counter > FORCE_LOCK_TIMEOUT){
 800714a:	4b9d      	ldr	r3, [pc, #628]	; (80073c0 <vTask_Main+0x2b8>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a9d      	ldr	r2, [pc, #628]	; (80073c4 <vTask_Main+0x2bc>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d90b      	bls.n	800716c <vTask_Main+0x64>
				force_lock = 0;
 8007154:	4b97      	ldr	r3, [pc, #604]	; (80073b4 <vTask_Main+0x2ac>)
 8007156:	2200      	movs	r2, #0
 8007158:	701a      	strb	r2, [r3, #0]
 800715a:	e007      	b.n	800716c <vTask_Main+0x64>
			}
		}else{
			lock_status = 0;
 800715c:	4b96      	ldr	r3, [pc, #600]	; (80073b8 <vTask_Main+0x2b0>)
 800715e:	2200      	movs	r2, #0
 8007160:	701a      	strb	r2, [r3, #0]
			GPIO_ResetBits(GPIOB, GPIO_Pin_8);  //开锁
 8007162:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007166:	4895      	ldr	r0, [pc, #596]	; (80073bc <vTask_Main+0x2b4>)
 8007168:	f7fe fe88 	bl	8005e7c <GPIO_ResetBits>
		}

		/* 从DNS获得IP地址,失败返回0 */
		if(DNSClient(MQTT_BROKER_HOST, server_ip) == 0){
 800716c:	4996      	ldr	r1, [pc, #600]	; (80073c8 <vTask_Main+0x2c0>)
 800716e:	4897      	ldr	r0, [pc, #604]	; (80073cc <vTask_Main+0x2c4>)
 8007170:	f7ff fc18 	bl	80069a4 <DNSClient>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d106      	bne.n	8007188 <vTask_Main+0x80>
			infoMsg = "Use Static MQTT!";
 800717a:	4b95      	ldr	r3, [pc, #596]	; (80073d0 <vTask_Main+0x2c8>)
 800717c:	4a95      	ldr	r2, [pc, #596]	; (80073d4 <vTask_Main+0x2cc>)
 800717e:	601a      	str	r2, [r3, #0]
			// 设置成指定的ip,临界区
			memcpy(server_ip, MQTT_BROKER_IP, 4);
 8007180:	4b91      	ldr	r3, [pc, #580]	; (80073c8 <vTask_Main+0x2c0>)
 8007182:	4a95      	ldr	r2, [pc, #596]	; (80073d8 <vTask_Main+0x2d0>)
 8007184:	6810      	ldr	r0, [r2, #0]
 8007186:	6018      	str	r0, [r3, #0]
		}

		xSemaphoreTake(socketLock, portMAX_DELAY);
 8007188:	4b94      	ldr	r3, [pc, #592]	; (80073dc <vTask_Main+0x2d4>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007190:	4618      	mov	r0, r3
 8007192:	f001 f851 	bl	8008238 <xQueueSemaphoreTake>
		/* 先关闭该socket */
		close(SOCK_MQTT);
 8007196:	2000      	movs	r0, #0
 8007198:	f7fa fcd4 	bl	8001b44 <close>
		/* 打开MQTT的socket */
		socket(SOCK_MQTT, Sn_MR_TCP, LOCAL_PORT, Sn_MR_ND | SOCK_IO_BLOCK);
 800719c:	2320      	movs	r3, #32
 800719e:	f240 4264 	movw	r2, #1124	; 0x464
 80071a2:	2101      	movs	r1, #1
 80071a4:	2000      	movs	r0, #0
 80071a6:	f7fa fbc9 	bl	800193c <socket>
		/* 连接MQTT服务器 */
		if(connect(SOCK_MQTT, server_ip, MQTT_BROKER_PORT) != SOCK_OK){
 80071aa:	f240 725b 	movw	r2, #1883	; 0x75b
 80071ae:	4986      	ldr	r1, [pc, #536]	; (80073c8 <vTask_Main+0x2c0>)
 80071b0:	2000      	movs	r0, #0
 80071b2:	f7fa fd23 	bl	8001bfc <connect>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d00a      	beq.n	80071d2 <vTask_Main+0xca>
			infoMsg = "Connect failed!";
 80071bc:	4b84      	ldr	r3, [pc, #528]	; (80073d0 <vTask_Main+0x2c8>)
 80071be:	4a88      	ldr	r2, [pc, #544]	; (80073e0 <vTask_Main+0x2d8>)
 80071c0:	601a      	str	r2, [r3, #0]
			xSemaphoreGive(socketLock);
 80071c2:	4b86      	ldr	r3, [pc, #536]	; (80073dc <vTask_Main+0x2d4>)
 80071c4:	6818      	ldr	r0, [r3, #0]
 80071c6:	2300      	movs	r3, #0
 80071c8:	2200      	movs	r2, #0
 80071ca:	2100      	movs	r1, #0
 80071cc:	f000 ff8a 	bl	80080e4 <xQueueGenericSend>
			continue;
 80071d0:	e161      	b.n	8007496 <vTask_Main+0x38e>
		}
		xSemaphoreGive(socketLock);
 80071d2:	4b82      	ldr	r3, [pc, #520]	; (80073dc <vTask_Main+0x2d4>)
 80071d4:	6818      	ldr	r0, [r3, #0]
 80071d6:	2300      	movs	r3, #0
 80071d8:	2200      	movs	r2, #0
 80071da:	2100      	movs	r1, #0
 80071dc:	f000 ff82 	bl	80080e4 <xQueueGenericSend>

		/* 初始化MQTT客户端 */
		mqtt_init(&broker, MQTT_CLIENT_ID);
 80071e0:	4980      	ldr	r1, [pc, #512]	; (80073e4 <vTask_Main+0x2dc>)
 80071e2:	4881      	ldr	r0, [pc, #516]	; (80073e8 <vTask_Main+0x2e0>)
 80071e4:	f000 fb24 	bl	8007830 <mqtt_init>
		/* 登录MQTT服务器 */
		mqtt_init_auth(&broker, MQTT_USERNAME, MQTT_PASSWORD);
 80071e8:	4a80      	ldr	r2, [pc, #512]	; (80073ec <vTask_Main+0x2e4>)
 80071ea:	4981      	ldr	r1, [pc, #516]	; (80073f0 <vTask_Main+0x2e8>)
 80071ec:	487e      	ldr	r0, [pc, #504]	; (80073e8 <vTask_Main+0x2e0>)
 80071ee:	f000 fb5f 	bl	80078b0 <mqtt_init_auth>
		/* MQTT stuffs */
		mqtt_set_alive(&broker, 30);    // 心跳超时30秒,默认是300秒
 80071f2:	211e      	movs	r1, #30
 80071f4:	487c      	ldr	r0, [pc, #496]	; (80073e8 <vTask_Main+0x2e0>)
 80071f6:	f000 fb81 	bl	80078fc <mqtt_set_alive>
		broker.socket_info = (void*)SOCK_MQTT; //这个只会传给send对应的函数的第一个参数
 80071fa:	4b7b      	ldr	r3, [pc, #492]	; (80073e8 <vTask_Main+0x2e0>)
 80071fc:	2200      	movs	r2, #0
 80071fe:	601a      	str	r2, [r3, #0]
		broker.send = mqtt_send_packet;
 8007200:	4b79      	ldr	r3, [pc, #484]	; (80073e8 <vTask_Main+0x2e0>)
 8007202:	4a7c      	ldr	r2, [pc, #496]	; (80073f4 <vTask_Main+0x2ec>)
 8007204:	605a      	str	r2, [r3, #4]

		/**
		 * 连接MQTT服务器
		 */
		/* 喂狗 */
		IWDG_ReloadCounter();
 8007206:	f7ff f9e1 	bl	80065cc <IWDG_ReloadCounter>
		// >>>>> CONNECT
		//__BKPT(1);
		mqtt_connect(&broker);
 800720a:	4877      	ldr	r0, [pc, #476]	; (80073e8 <vTask_Main+0x2e0>)
 800720c:	f000 fb86 	bl	800791c <mqtt_connect>

		// <<<<< CONNACK
		packet_length = mqtt_read_packet();
 8007210:	f7ff fc1c 	bl	8006a4c <mqtt_read_packet>
 8007214:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

		if(packet_length < 0){
 8007218:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800721c:	2b00      	cmp	r3, #0
 800721e:	da07      	bge.n	8007230 <vTask_Main+0x128>
			infoMsg = "Read CONN pack error.";
 8007220:	4b6b      	ldr	r3, [pc, #428]	; (80073d0 <vTask_Main+0x2c8>)
 8007222:	4a75      	ldr	r2, [pc, #468]	; (80073f8 <vTask_Main+0x2f0>)
 8007224:	601a      	str	r2, [r3, #0]
			vTaskDelay(pdMS_TO_TICKS(1000));
 8007226:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800722a:	f001 fafb 	bl	8008824 <vTaskDelay>
			continue;
 800722e:	e132      	b.n	8007496 <vTask_Main+0x38e>
		}

		// 检查回包类型
		if(MQTTParseMessageType(packet_buffer) != MQTT_MSG_CONNACK){
 8007230:	4b72      	ldr	r3, [pc, #456]	; (80073fc <vTask_Main+0x2f4>)
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007238:	2b20      	cmp	r3, #32
 800723a:	d007      	beq.n	800724c <vTask_Main+0x144>
			infoMsg = "CONNACK expected!";
 800723c:	4b64      	ldr	r3, [pc, #400]	; (80073d0 <vTask_Main+0x2c8>)
 800723e:	4a70      	ldr	r2, [pc, #448]	; (8007400 <vTask_Main+0x2f8>)
 8007240:	601a      	str	r2, [r3, #0]
			vTaskDelay(pdMS_TO_TICKS(1000));
 8007242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007246:	f001 faed 	bl	8008824 <vTaskDelay>
			continue;
 800724a:	e124      	b.n	8007496 <vTask_Main+0x38e>
		}

		// 检查是否成功
		if(packet_buffer[3] != 0x00){
 800724c:	4b6b      	ldr	r3, [pc, #428]	; (80073fc <vTask_Main+0x2f4>)
 800724e:	78db      	ldrb	r3, [r3, #3]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d007      	beq.n	8007264 <vTask_Main+0x15c>
			infoMsg = "CONNACK failed!";
 8007254:	4b5e      	ldr	r3, [pc, #376]	; (80073d0 <vTask_Main+0x2c8>)
 8007256:	4a6b      	ldr	r2, [pc, #428]	; (8007404 <vTask_Main+0x2fc>)
 8007258:	601a      	str	r2, [r3, #0]
			vTaskDelay(pdMS_TO_TICKS(1000));
 800725a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800725e:	f001 fae1 	bl	8008824 <vTaskDelay>
			continue;
 8007262:	e118      	b.n	8007496 <vTask_Main+0x38e>

		/**
		 * MQTT 订阅Topic
		 */
		// >>>>> SUBSCRIBE
		mqtt_subscribe(&broker, MQTT_SUBS_TOPIC, &msg_id);
 8007264:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007268:	461a      	mov	r2, r3
 800726a:	4967      	ldr	r1, [pc, #412]	; (8007408 <vTask_Main+0x300>)
 800726c:	485e      	ldr	r0, [pc, #376]	; (80073e8 <vTask_Main+0x2e0>)
 800726e:	f000 fceb 	bl	8007c48 <mqtt_subscribe>
		// <<<<< SUBACK
		packet_length = mqtt_read_packet();
 8007272:	f7ff fbeb 	bl	8006a4c <mqtt_read_packet>
 8007276:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		if(packet_length < 0){
 800727a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800727e:	2b00      	cmp	r3, #0
 8007280:	da07      	bge.n	8007292 <vTask_Main+0x18a>
			infoMsg = "Read SUBS pack error.";
 8007282:	4b53      	ldr	r3, [pc, #332]	; (80073d0 <vTask_Main+0x2c8>)
 8007284:	4a61      	ldr	r2, [pc, #388]	; (800740c <vTask_Main+0x304>)
 8007286:	601a      	str	r2, [r3, #0]
			vTaskDelay(pdMS_TO_TICKS(1000));
 8007288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800728c:	f001 faca 	bl	8008824 <vTaskDelay>
			continue;
 8007290:	e101      	b.n	8007496 <vTask_Main+0x38e>
		}
		// 检查接收数据包类型
		if(MQTTParseMessageType(packet_buffer) != MQTT_MSG_SUBACK){
 8007292:	4b5a      	ldr	r3, [pc, #360]	; (80073fc <vTask_Main+0x2f4>)
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800729a:	2b90      	cmp	r3, #144	; 0x90
 800729c:	d007      	beq.n	80072ae <vTask_Main+0x1a6>
			infoMsg = "SUBACK expected!";
 800729e:	4b4c      	ldr	r3, [pc, #304]	; (80073d0 <vTask_Main+0x2c8>)
 80072a0:	4a5b      	ldr	r2, [pc, #364]	; (8007410 <vTask_Main+0x308>)
 80072a2:	601a      	str	r2, [r3, #0]
			vTaskDelay(pdMS_TO_TICKS(1000));
 80072a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072a8:	f001 fabc 	bl	8008824 <vTaskDelay>
			continue;
 80072ac:	e0f3      	b.n	8007496 <vTask_Main+0x38e>
		}
		// 检查接收数据包id
		msg_id_rcv = mqtt_parse_msg_id(packet_buffer);
 80072ae:	4853      	ldr	r0, [pc, #332]	; (80073fc <vTask_Main+0x2f4>)
 80072b0:	f000 f9f6 	bl	80076a0 <mqtt_parse_msg_id>
 80072b4:	4603      	mov	r3, r0
 80072b6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		if(msg_id != msg_id_rcv){
 80072ba:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80072be:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d007      	beq.n	80072d6 <vTask_Main+0x1ce>
			// 发送包和接收包的msg id不匹配
			infoMsg = "Msg ID unmatch!";
 80072c6:	4b42      	ldr	r3, [pc, #264]	; (80073d0 <vTask_Main+0x2c8>)
 80072c8:	4a52      	ldr	r2, [pc, #328]	; (8007414 <vTask_Main+0x30c>)
 80072ca:	601a      	str	r2, [r3, #0]
			vTaskDelay(pdMS_TO_TICKS(1000));
 80072cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072d0:	f001 faa8 	bl	8008824 <vTaskDelay>
			continue;
 80072d4:	e0df      	b.n	8007496 <vTask_Main+0x38e>
		}

		// 设置socket为非阻塞模式
		tmp = SOCK_IO_NONBLOCK;
 80072d6:	2301      	movs	r3, #1
 80072d8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		xSemaphoreTake(socketLock, portMAX_DELAY);
 80072dc:	4b3f      	ldr	r3, [pc, #252]	; (80073dc <vTask_Main+0x2d4>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 ffa7 	bl	8008238 <xQueueSemaphoreTake>
		if(ctlsocket(SOCK_MQTT, CS_SET_IOMODE, (void *)&tmp) != SOCK_OK){
 80072ea:	f107 038f 	add.w	r3, r7, #143	; 0x8f
 80072ee:	461a      	mov	r2, r3
 80072f0:	2100      	movs	r1, #0
 80072f2:	2000      	movs	r0, #0
 80072f4:	f7fb f96a 	bl	80025cc <ctlsocket>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d00e      	beq.n	800731c <vTask_Main+0x214>
			xSemaphoreGive(socketLock);
 80072fe:	4b37      	ldr	r3, [pc, #220]	; (80073dc <vTask_Main+0x2d4>)
 8007300:	6818      	ldr	r0, [r3, #0]
 8007302:	2300      	movs	r3, #0
 8007304:	2200      	movs	r2, #0
 8007306:	2100      	movs	r1, #0
 8007308:	f000 feec 	bl	80080e4 <xQueueGenericSend>
			infoMsg = "Set IO Mode Failed!";
 800730c:	4b30      	ldr	r3, [pc, #192]	; (80073d0 <vTask_Main+0x2c8>)
 800730e:	4a42      	ldr	r2, [pc, #264]	; (8007418 <vTask_Main+0x310>)
 8007310:	601a      	str	r2, [r3, #0]
			vTaskDelay(pdMS_TO_TICKS(1000));
 8007312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007316:	f001 fa85 	bl	8008824 <vTaskDelay>
			continue;
 800731a:	e0bc      	b.n	8007496 <vTask_Main+0x38e>
		}
		xSemaphoreGive(socketLock);
 800731c:	4b2f      	ldr	r3, [pc, #188]	; (80073dc <vTask_Main+0x2d4>)
 800731e:	6818      	ldr	r0, [r3, #0]
 8007320:	2300      	movs	r3, #0
 8007322:	2200      	movs	r2, #0
 8007324:	2100      	movs	r1, #0
 8007326:	f000 fedd 	bl	80080e4 <xQueueGenericSend>

		//__BKPT(1);
		GPIO_ResetBits(GPIOB, GPIO_Pin_9);  // 点亮灯,表示已连接
 800732a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800732e:	4823      	ldr	r0, [pc, #140]	; (80073bc <vTask_Main+0x2b4>)
 8007330:	f7fe fda4 	bl	8005e7c <GPIO_ResetBits>
		GPIO_SetBits(GPIOB, GPIO_Pin_8);  //上锁
 8007334:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007338:	4820      	ldr	r0, [pc, #128]	; (80073bc <vTask_Main+0x2b4>)
 800733a:	f7fe fd91 	bl	8005e60 <GPIO_SetBits>
		lock_status = 1;	// 上锁状态
 800733e:	4b1e      	ldr	r3, [pc, #120]	; (80073b8 <vTask_Main+0x2b0>)
 8007340:	2201      	movs	r2, #1
 8007342:	701a      	strb	r2, [r3, #0]

		while(getSn_SR(SOCK_MQTT) == SOCK_ESTABLISHED){
 8007344:	e094      	b.n	8007470 <vTask_Main+0x368>
			/* 喂狗 */
			IWDG_ReloadCounter();
 8007346:	f7ff f941 	bl	80065cc <IWDG_ReloadCounter>

			// 发送心跳包
			if(Interval_counter > 25000){
 800734a:	4b34      	ldr	r3, [pc, #208]	; (800741c <vTask_Main+0x314>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8007352:	4293      	cmp	r3, r2
 8007354:	d908      	bls.n	8007368 <vTask_Main+0x260>
				Interval_counter = 0;
 8007356:	4b31      	ldr	r3, [pc, #196]	; (800741c <vTask_Main+0x314>)
 8007358:	2200      	movs	r2, #0
 800735a:	601a      	str	r2, [r3, #0]
				mqtt_ping(&broker);
 800735c:	4822      	ldr	r0, [pc, #136]	; (80073e8 <vTask_Main+0x2e0>)
 800735e:	f000 fc57 	bl	8007c10 <mqtt_ping>
				infoMsg = "Ping~~~";
 8007362:	4b1b      	ldr	r3, [pc, #108]	; (80073d0 <vTask_Main+0x2c8>)
 8007364:	4a2e      	ldr	r2, [pc, #184]	; (8007420 <vTask_Main+0x318>)
 8007366:	601a      	str	r2, [r3, #0]
			}

			// <<<<<
			packet_length = mqtt_read_packet();
 8007368:	f7ff fb70 	bl	8006a4c <mqtt_read_packet>
 800736c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

			if(packet_length <= 0){
 8007370:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007374:	2b00      	cmp	r3, #0
 8007376:	dc00      	bgt.n	800737a <vTask_Main+0x272>
				continue;
 8007378:	e07a      	b.n	8007470 <vTask_Main+0x368>
			}

			if(MQTTParseMessageType(packet_buffer) == MQTT_MSG_PUBLISH) {
 800737a:	4b20      	ldr	r3, [pc, #128]	; (80073fc <vTask_Main+0x2f4>)
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007382:	2b30      	cmp	r3, #48	; 0x30
 8007384:	d174      	bne.n	8007470 <vTask_Main+0x368>
				infoMsg = "Receive PUB!";
 8007386:	4b12      	ldr	r3, [pc, #72]	; (80073d0 <vTask_Main+0x2c8>)
 8007388:	4a26      	ldr	r2, [pc, #152]	; (8007424 <vTask_Main+0x31c>)
 800738a:	601a      	str	r2, [r3, #0]
				uint8_t msg[128];
				//uint8_t topic[32];
				uint16_t len;
				//len = (len = mqtt_parse_pub_topic(packet_buffer, topic)) >= sizeof(topic) ? sizeof(topic) - 1 : len;
				//topic[len] = '\0';
				len = (len = mqtt_parse_publish_msg(packet_buffer, msg)) >= sizeof(msg) ? sizeof(msg) - 1 : len;
 800738c:	f107 030c 	add.w	r3, r7, #12
 8007390:	4619      	mov	r1, r3
 8007392:	481a      	ldr	r0, [pc, #104]	; (80073fc <vTask_Main+0x2f4>)
 8007394:	f000 f9e4 	bl	8007760 <mqtt_parse_publish_msg>
 8007398:	4603      	mov	r3, r0
 800739a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800739e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80073a2:	2b7f      	cmp	r3, #127	; 0x7f
 80073a4:	d840      	bhi.n	8007428 <vTask_Main+0x320>
 80073a6:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80073aa:	e03e      	b.n	800742a <vTask_Main+0x322>
 80073ac:	e000ed04 	and	lr, r0, r4, lsl #26
 80073b0:	2000014c 	andcs	r0, r0, ip, asr #2
 80073b4:	2000014e 	andcs	r0, r0, lr, asr #2
 80073b8:	2000014d 	andcs	r0, r0, sp, asr #2
 80073bc:	40010c00 	andmi	r0, r1, r0, lsl #24
 80073c0:	20000144 	andcs	r0, r0, r4, asr #2
 80073c4:	000927c0 	andeq	r2, r9, r0, asr #15
 80073c8:	20003a90 	mulcs	r0, r0, sl
 80073cc:	0800969c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, pc}
 80073d0:	20000148 	andcs	r0, r0, r8, asr #2
 80073d4:	080096ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, ip, pc}
 80073d8:	0800a01c 	stmdaeq	r0, {r2, r3, r4, sp, pc}
 80073dc:	200042f4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
 80073e0:	080096c0 	stmdaeq	r0, {r6, r7, r9, sl, ip, pc}
 80073e4:	080096d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, ip, pc}
 80073e8:	20003a94 	mulcs	r0, r4, sl
 80073ec:	080096e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, ip, pc}
 80073f0:	080096f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, ip, pc}
 80073f4:	08006a01 	stmdaeq	r0, {r0, r9, fp, sp, lr}
 80073f8:	080096fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, ip, pc}
 80073fc:	20003684 	andcs	r3, r0, r4, lsl #13
 8007400:	08009714 	stmdaeq	r0, {r2, r4, r8, r9, sl, ip, pc}
 8007404:	08009728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip, pc}
 8007408:	08009738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, pc}
 800740c:	08009754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, ip, pc}
 8007410:	0800976c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, ip, pc}
 8007414:	08009780 	stmdaeq	r0, {r7, r8, r9, sl, ip, pc}
 8007418:	08009790 	stmdaeq	r0, {r4, r7, r8, r9, sl, ip, pc}
 800741c:	20000140 	andcs	r0, r0, r0, asr #2
 8007420:	080097a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, ip, pc}
 8007424:	080097ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, ip, pc}
 8007428:	237f      	movs	r3, #127	; 0x7f
 800742a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
				msg[len] = '\0';
 800742e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8007432:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8007436:	4413      	add	r3, r2
 8007438:	2200      	movs	r2, #0
 800743a:	f803 2c8c 	strb.w	r2, [r3, #-140]
				if(lock_status && strncmp("Lock ON", msg, 7) == 0){  //判断是不是开锁指令
 800743e:	4b16      	ldr	r3, [pc, #88]	; (8007498 <vTask_Main+0x390>)
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b00      	cmp	r3, #0
 8007446:	d013      	beq.n	8007470 <vTask_Main+0x368>
 8007448:	f107 030c 	add.w	r3, r7, #12
 800744c:	2207      	movs	r2, #7
 800744e:	4619      	mov	r1, r3
 8007450:	4812      	ldr	r0, [pc, #72]	; (800749c <vTask_Main+0x394>)
 8007452:	f7f9 f929 	bl	80006a8 <strncmp>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d109      	bne.n	8007470 <vTask_Main+0x368>
					infoMsg = "Lock On~";
 800745c:	4b10      	ldr	r3, [pc, #64]	; (80074a0 <vTask_Main+0x398>)
 800745e:	4a11      	ldr	r2, [pc, #68]	; (80074a4 <vTask_Main+0x39c>)
 8007460:	601a      	str	r2, [r3, #0]
					xSemaphoreGive(lockNotify);	//通知上锁
 8007462:	4b11      	ldr	r3, [pc, #68]	; (80074a8 <vTask_Main+0x3a0>)
 8007464:	6818      	ldr	r0, [r3, #0]
 8007466:	2300      	movs	r3, #0
 8007468:	2200      	movs	r2, #0
 800746a:	2100      	movs	r1, #0
 800746c:	f000 fe3a 	bl	80080e4 <xQueueGenericSend>
		while(getSn_SR(SOCK_MQTT) == SOCK_ESTABLISHED){
 8007470:	f44f 7042 	mov.w	r0, #776	; 0x308
 8007474:	f7fb fed0 	bl	8003218 <WIZCHIP_READ>
 8007478:	4603      	mov	r3, r0
 800747a:	2b17      	cmp	r3, #23
 800747c:	f43f af63 	beq.w	8007346 <vTask_Main+0x23e>
				}
			}
		}
		// 走到这里是刚才连接断开了
		GPIO_SetBits(GPIOB, GPIO_Pin_9); // 熄灭灯
 8007480:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007484:	4809      	ldr	r0, [pc, #36]	; (80074ac <vTask_Main+0x3a4>)
 8007486:	f7fe fceb 	bl	8005e60 <GPIO_SetBits>
		// 设置强制锁定信号
		force_lock = 1;
 800748a:	4b09      	ldr	r3, [pc, #36]	; (80074b0 <vTask_Main+0x3a8>)
 800748c:	2201      	movs	r2, #1
 800748e:	701a      	strb	r2, [r3, #0]
		Timer2_Counter = 0;	// 清零计时器当前值
 8007490:	4b08      	ldr	r3, [pc, #32]	; (80074b4 <vTask_Main+0x3ac>)
 8007492:	2200      	movs	r2, #0
 8007494:	601a      	str	r2, [r3, #0]
	}
 8007496:	e63b      	b.n	8007110 <vTask_Main+0x8>
 8007498:	2000014d 	andcs	r0, r0, sp, asr #2
 800749c:	080097bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip, pc}
 80074a0:	20000148 	andcs	r0, r0, r8, asr #2
 80074a4:	080097c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, ip, pc}
 80074a8:	20003a84 	andcs	r3, r0, r4, lsl #21
 80074ac:	40010c00 	andmi	r0, r1, r0, lsl #24
 80074b0:	2000014e 	andcs	r0, r0, lr, asr #2
 80074b4:	20000144 	andcs	r0, r0, r4, asr #2

080074b8 <vTask_DHCP>:
}

/* DHCP任务 */
static void vTask_DHCP( void * pvParameters ){
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
	uint8_t dhcp_ret = 0; //ip是否被配置
 80074c0:	2300      	movs	r3, #0
 80074c2:	73fb      	strb	r3, [r7, #15]
	xSemaphoreTake(socketLock, portMAX_DELAY);
 80074c4:	4b28      	ldr	r3, [pc, #160]	; (8007568 <vTask_DHCP+0xb0>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80074cc:	4618      	mov	r0, r3
 80074ce:	f000 feb3 	bl	8008238 <xQueueSemaphoreTake>
	DHCP_init(SOCK_DHCP, gDATABUF);
 80074d2:	4926      	ldr	r1, [pc, #152]	; (800756c <vTask_DHCP+0xb4>)
 80074d4:	2007      	movs	r0, #7
 80074d6:	f7fd fc2f 	bl	8004d38 <DHCP_init>
	xSemaphoreGive(socketLock);
 80074da:	4b23      	ldr	r3, [pc, #140]	; (8007568 <vTask_DHCP+0xb0>)
 80074dc:	6818      	ldr	r0, [r3, #0]
 80074de:	2300      	movs	r3, #0
 80074e0:	2200      	movs	r2, #0
 80074e2:	2100      	movs	r1, #0
 80074e4:	f000 fdfe 	bl	80080e4 <xQueueGenericSend>
		 * 自动获得IP地址,然后检查该ip地址是否到期,
		 * 如果到期则再次自动获取,反之直接返回,
		 * 保持该函数在大循环里
		 */
		/* DHCP IP allocation and check the DHCP lease time (for IP renewal) */
		xSemaphoreTake(socketLock, portMAX_DELAY);
 80074e8:	4b1f      	ldr	r3, [pc, #124]	; (8007568 <vTask_DHCP+0xb0>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 fea1 	bl	8008238 <xQueueSemaphoreTake>
		dhcp_ret = DHCP_run();
 80074f6:	f7fd fc63 	bl	8004dc0 <DHCP_run>
 80074fa:	4603      	mov	r3, r0
 80074fc:	73fb      	strb	r3, [r7, #15]
		//IWDG_ReloadCounter();	// DHCP_SUCCESS
		if((dhcp_ret == DHCP_SUCCESS) || (dhcp_ret == DHCP_IP_CHANGED)) {
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d002      	beq.n	800750a <vTask_DHCP+0x52>
 8007504:	7bfb      	ldrb	r3, [r7, #15]
 8007506:	2b02      	cmp	r3, #2
 8007508:	d126      	bne.n	8007558 <vTask_DHCP+0xa0>
			getIPfromDHCP(gWIZNETINFO.ip);
 800750a:	4819      	ldr	r0, [pc, #100]	; (8007570 <vTask_DHCP+0xb8>)
 800750c:	f7fd fc92 	bl	8004e34 <getIPfromDHCP>
			getGWfromDHCP(gWIZNETINFO.gw);
 8007510:	4818      	ldr	r0, [pc, #96]	; (8007574 <vTask_DHCP+0xbc>)
 8007512:	f7fd fcad 	bl	8004e70 <getGWfromDHCP>
			getSNfromDHCP(gWIZNETINFO.sn);
 8007516:	4818      	ldr	r0, [pc, #96]	; (8007578 <vTask_DHCP+0xc0>)
 8007518:	f7fd fcc8 	bl	8004eac <getSNfromDHCP>
			getDNSfromDHCP(gWIZNETINFO.dns);
 800751c:	4817      	ldr	r0, [pc, #92]	; (800757c <vTask_DHCP+0xc4>)
 800751e:	f7fd fce3 	bl	8004ee8 <getDNSfromDHCP>
			gWIZNETINFO.dhcp = NETINFO_DHCP;
 8007522:	4b17      	ldr	r3, [pc, #92]	; (8007580 <vTask_DHCP+0xc8>)
 8007524:	2202      	movs	r2, #2
 8007526:	759a      	strb	r2, [r3, #22]
			ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 8007528:	4915      	ldr	r1, [pc, #84]	; (8007580 <vTask_DHCP+0xc8>)
 800752a:	2000      	movs	r0, #0
 800752c:	f7fb faba 	bl	8002aa4 <ctlnetwork>
			//ip已被成功配置
			ip_configed = 1;
 8007530:	4b14      	ldr	r3, [pc, #80]	; (8007584 <vTask_DHCP+0xcc>)
 8007532:	2201      	movs	r2, #1
 8007534:	701a      	strb	r2, [r3, #0]
			infoMsg = "Get IP!!";
 8007536:	4b14      	ldr	r3, [pc, #80]	; (8007588 <vTask_DHCP+0xd0>)
 8007538:	4a14      	ldr	r2, [pc, #80]	; (800758c <vTask_DHCP+0xd4>)
 800753a:	601a      	str	r2, [r3, #0]
			// 喂狗
			IWDG_ReloadCounter();
 800753c:	f7ff f846 	bl	80065cc <IWDG_ReloadCounter>
			// 显示ip租约时间
			//printf("DHCP IP Leased Time : %ld Sec\r\n", getDHCPLeasetime());
			xSemaphoreGive(socketLock);
 8007540:	4b09      	ldr	r3, [pc, #36]	; (8007568 <vTask_DHCP+0xb0>)
 8007542:	6818      	ldr	r0, [r3, #0]
 8007544:	2300      	movs	r3, #0
 8007546:	2200      	movs	r2, #0
 8007548:	2100      	movs	r1, #0
 800754a:	f000 fdcb 	bl	80080e4 <xQueueGenericSend>
			// 等待60秒,重新检查IP地址
			vTaskDelay(pdMS_TO_TICKS(60 * 1000));
 800754e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8007552:	f001 f967 	bl	8008824 <vTaskDelay>
 8007556:	e006      	b.n	8007566 <vTask_DHCP+0xae>
		}else{
			xSemaphoreGive(socketLock);
 8007558:	4b03      	ldr	r3, [pc, #12]	; (8007568 <vTask_DHCP+0xb0>)
 800755a:	6818      	ldr	r0, [r3, #0]
 800755c:	2300      	movs	r3, #0
 800755e:	2200      	movs	r2, #0
 8007560:	2100      	movs	r1, #0
 8007562:	f000 fdbf 	bl	80080e4 <xQueueGenericSend>
		}
	}
 8007566:	e7bf      	b.n	80074e8 <vTask_DHCP+0x30>
 8007568:	200042f4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
 800756c:	20003af0 	strdcs	r3, [r0], -r0
 8007570:	200000d2 	ldrdcs	r0, [r0], -r2
 8007574:	200000da 	ldrdcs	r0, [r0], -sl
 8007578:	200000d6 	ldrdcs	r0, [r0], -r6
 800757c:	200000de 	ldrdcs	r0, [r0], -lr
 8007580:	200000cc 	andcs	r0, r0, ip, asr #1
 8007584:	2000014c 	andcs	r0, r0, ip, asr #2
 8007588:	20000148 	andcs	r0, r0, r8, asr #2
 800758c:	080097d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, ip, pc}

08007590 <vTask_LockOn>:
}

// 开锁任务
static void vTask_LockOn(void *pvParameters){
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(lockNotify, portMAX_DELAY);
 8007598:	4b0d      	ldr	r3, [pc, #52]	; (80075d0 <vTask_LockOn+0x40>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 fe49 	bl	8008238 <xQueueSemaphoreTake>
		lock_status = 0;
 80075a6:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <vTask_LockOn+0x44>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	701a      	strb	r2, [r3, #0]
		GPIO_ResetBits(GPIOB, GPIO_Pin_8);  //开锁
 80075ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80075b0:	4809      	ldr	r0, [pc, #36]	; (80075d8 <vTask_LockOn+0x48>)
 80075b2:	f7fe fc63 	bl	8005e7c <GPIO_ResetBits>
		vTaskDelay(pdMS_TO_TICKS(3 * 1000));	// 延时3秒
 80075b6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80075ba:	f001 f933 	bl	8008824 <vTaskDelay>
		lock_status = 1;	// 上锁
 80075be:	4b05      	ldr	r3, [pc, #20]	; (80075d4 <vTask_LockOn+0x44>)
 80075c0:	2201      	movs	r2, #1
 80075c2:	701a      	strb	r2, [r3, #0]
		GPIO_SetBits(GPIOB, GPIO_Pin_8);
 80075c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80075c8:	4803      	ldr	r0, [pc, #12]	; (80075d8 <vTask_LockOn+0x48>)
 80075ca:	f7fe fc49 	bl	8005e60 <GPIO_SetBits>
	}
 80075ce:	e7e3      	b.n	8007598 <vTask_LockOn+0x8>
 80075d0:	20003a84 	andcs	r3, r0, r4, lsl #21
 80075d4:	2000014d 	andcs	r0, r0, sp, asr #2
 80075d8:	40010c00 	andmi	r0, r1, r0, lsl #24

080075dc <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80075e6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	60fb      	str	r3, [r7, #12]
	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	//pcTaskGetName(xTaskGetCurrentTaskHandle());
	taskDISABLE_INTERRUPTS();
	for( ;; );
 80075f8:	e7fe      	b.n	80075f8 <vApplicationStackOverflowHook+0x1c>
 80075fa:	bf00      	nop

080075fc <mqtt_num_rem_len_bytes>:
#define MQTT_WILL_RETAIN    1<<5
#define MQTT_USERNAME_FLAG  1<<7
#define MQTT_PASSWORD_FLAG  1<<6


uint8_t mqtt_num_rem_len_bytes(const uint8_t* buf) {
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
	uint8_t num_bytes = 1;
 8007604:	2301      	movs	r3, #1
 8007606:	73fb      	strb	r3, [r7, #15]
	
	//printf("mqtt_num_rem_len_bytes\n");
	
	if ((buf[1] & 0x80) == 0x80) {
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	3301      	adds	r3, #1
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	b25b      	sxtb	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	da14      	bge.n	800763e <mqtt_num_rem_len_bytes+0x42>
		num_bytes++;
 8007614:	7bfb      	ldrb	r3, [r7, #15]
 8007616:	3301      	adds	r3, #1
 8007618:	73fb      	strb	r3, [r7, #15]
		if ((buf[2] & 0x80) == 0x80) {
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	3302      	adds	r3, #2
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	b25b      	sxtb	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	da0b      	bge.n	800763e <mqtt_num_rem_len_bytes+0x42>
			num_bytes ++;
 8007626:	7bfb      	ldrb	r3, [r7, #15]
 8007628:	3301      	adds	r3, #1
 800762a:	73fb      	strb	r3, [r7, #15]
			if ((buf[3] & 0x80) == 0x80) {
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3303      	adds	r3, #3
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	b25b      	sxtb	r3, r3
 8007634:	2b00      	cmp	r3, #0
 8007636:	da02      	bge.n	800763e <mqtt_num_rem_len_bytes+0x42>
				num_bytes ++;
 8007638:	7bfb      	ldrb	r3, [r7, #15]
 800763a:	3301      	adds	r3, #1
 800763c:	73fb      	strb	r3, [r7, #15]
			}
		}
	}
	return num_bytes;
 800763e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	bc80      	pop	{r7}
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop

0800764c <mqtt_parse_rem_len>:

uint16_t mqtt_parse_rem_len(const uint8_t* buf) {
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
	uint16_t multiplier = 1;
 8007654:	2301      	movs	r3, #1
 8007656:	81fb      	strh	r3, [r7, #14]
	uint16_t value = 0;
 8007658:	2300      	movs	r3, #0
 800765a:	81bb      	strh	r3, [r7, #12]
	uint8_t digit;
	
	//printf("mqtt_parse_rem_len\n");
	
	buf++;	// skip "flags" byte in fixed header
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	3301      	adds	r3, #1
 8007660:	607b      	str	r3, [r7, #4]

	do {
		digit = *buf;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	72fb      	strb	r3, [r7, #11]
		value += (digit & 127) * multiplier;
 8007668:	7afb      	ldrb	r3, [r7, #11]
 800766a:	b29b      	uxth	r3, r3
 800766c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007670:	b29b      	uxth	r3, r3
 8007672:	89fa      	ldrh	r2, [r7, #14]
 8007674:	fb02 f303 	mul.w	r3, r2, r3
 8007678:	b29a      	uxth	r2, r3
 800767a:	89bb      	ldrh	r3, [r7, #12]
 800767c:	4413      	add	r3, r2
 800767e:	81bb      	strh	r3, [r7, #12]
		multiplier *= 128;
 8007680:	89fb      	ldrh	r3, [r7, #14]
 8007682:	01db      	lsls	r3, r3, #7
 8007684:	81fb      	strh	r3, [r7, #14]
		buf++;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	3301      	adds	r3, #1
 800768a:	607b      	str	r3, [r7, #4]
	} while ((digit & 128) != 0);
 800768c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007690:	2b00      	cmp	r3, #0
 8007692:	dbe6      	blt.n	8007662 <mqtt_parse_rem_len+0x16>

	return value;
 8007694:	89bb      	ldrh	r3, [r7, #12]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	bc80      	pop	{r7}
 800769e:	4770      	bx	lr

080076a0 <mqtt_parse_msg_id>:

uint16_t mqtt_parse_msg_id(const uint8_t* buf) {
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
	uint8_t type = MQTTParseMessageType(buf);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	f023 030f 	bic.w	r3, r3, #15
 80076b0:	737b      	strb	r3, [r7, #13]
	uint8_t qos = MQTTParseMessageQos(buf);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	105b      	asrs	r3, r3, #1
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	f003 0303 	and.w	r3, r3, #3
 80076be:	733b      	strb	r3, [r7, #12]
	uint16_t id = 0;
 80076c0:	2300      	movs	r3, #0
 80076c2:	81fb      	strh	r3, [r7, #14]
	
	//printf("mqtt_parse_msg_id\n");
	
	if(type >= MQTT_MSG_PUBLISH && type <= MQTT_MSG_UNSUBACK) {
 80076c4:	7b7b      	ldrb	r3, [r7, #13]
 80076c6:	2b2f      	cmp	r3, #47	; 0x2f
 80076c8:	d944      	bls.n	8007754 <mqtt_parse_msg_id+0xb4>
 80076ca:	7b7b      	ldrb	r3, [r7, #13]
 80076cc:	2bb0      	cmp	r3, #176	; 0xb0
 80076ce:	d841      	bhi.n	8007754 <mqtt_parse_msg_id+0xb4>
		if(type == MQTT_MSG_PUBLISH) {
 80076d0:	7b7b      	ldrb	r3, [r7, #13]
 80076d2:	2b30      	cmp	r3, #48	; 0x30
 80076d4:	d128      	bne.n	8007728 <mqtt_parse_msg_id+0x88>
			if(qos != 0) {
 80076d6:	7b3b      	ldrb	r3, [r7, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d03b      	beq.n	8007754 <mqtt_parse_msg_id+0xb4>
				// fixed header length + Topic (UTF encoded)
				// = 1 for "flags" byte + rlb for length bytes + topic size
				uint8_t rlb = mqtt_num_rem_len_bytes(buf);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7ff ff8d 	bl	80075fc <mqtt_num_rem_len_bytes>
 80076e2:	4603      	mov	r3, r0
 80076e4:	72fb      	strb	r3, [r7, #11]
				uint8_t offset = *(buf+1+rlb)<<8;	// topic UTF MSB
 80076e6:	2300      	movs	r3, #0
 80076e8:	72bb      	strb	r3, [r7, #10]
				offset |= *(buf+1+rlb+1);			// topic UTF LSB
 80076ea:	7afb      	ldrb	r3, [r7, #11]
 80076ec:	3302      	adds	r3, #2
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	4413      	add	r3, r2
 80076f2:	781a      	ldrb	r2, [r3, #0]
 80076f4:	7abb      	ldrb	r3, [r7, #10]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	72bb      	strb	r3, [r7, #10]
				offset += (1+rlb+2);					// fixed header + topic size
 80076fa:	7afa      	ldrb	r2, [r7, #11]
 80076fc:	7abb      	ldrb	r3, [r7, #10]
 80076fe:	4413      	add	r3, r2
 8007700:	b2db      	uxtb	r3, r3
 8007702:	3303      	adds	r3, #3
 8007704:	72bb      	strb	r3, [r7, #10]
				id = *(buf+offset)<<8;				// id MSB
 8007706:	7abb      	ldrb	r3, [r7, #10]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	4413      	add	r3, r2
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	b29b      	uxth	r3, r3
 8007710:	021b      	lsls	r3, r3, #8
 8007712:	81fb      	strh	r3, [r7, #14]
				id |= *(buf+offset+1);				// id LSB
 8007714:	7abb      	ldrb	r3, [r7, #10]
 8007716:	3301      	adds	r3, #1
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	4413      	add	r3, r2
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	b29a      	uxth	r2, r3
 8007720:	89fb      	ldrh	r3, [r7, #14]
 8007722:	4313      	orrs	r3, r2
 8007724:	81fb      	strh	r3, [r7, #14]
 8007726:	e015      	b.n	8007754 <mqtt_parse_msg_id+0xb4>
			}
		} else {
			// fixed header length
			// 1 for "flags" byte + rlb for length bytes
			uint8_t rlb = mqtt_num_rem_len_bytes(buf);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7ff ff67 	bl	80075fc <mqtt_num_rem_len_bytes>
 800772e:	4603      	mov	r3, r0
 8007730:	727b      	strb	r3, [r7, #9]
			id = *(buf+1+rlb)<<8;	// id MSB
 8007732:	7a7b      	ldrb	r3, [r7, #9]
 8007734:	3301      	adds	r3, #1
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	4413      	add	r3, r2
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	b29b      	uxth	r3, r3
 800773e:	021b      	lsls	r3, r3, #8
 8007740:	81fb      	strh	r3, [r7, #14]
			id |= *(buf+1+rlb+1);	// id LSB
 8007742:	7a7b      	ldrb	r3, [r7, #9]
 8007744:	3302      	adds	r3, #2
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	4413      	add	r3, r2
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	b29a      	uxth	r2, r3
 800774e:	89fb      	ldrh	r3, [r7, #14]
 8007750:	4313      	orrs	r3, r2
 8007752:	81fb      	strh	r3, [r7, #14]
		}
	}
	return id;
 8007754:	89fb      	ldrh	r3, [r7, #14]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop

08007760 <mqtt_parse_publish_msg>:
		*topic_ptr = NULL;
	}
	return len;
}

uint16_t mqtt_parse_publish_msg(const uint8_t* buf, uint8_t* msg) {
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
	const uint8_t* ptr;
	
	//printf("mqtt_parse_publish_msg\n");
	
	uint16_t msg_len = mqtt_parse_pub_msg_ptr(buf, &ptr);
 800776a:	f107 0308 	add.w	r3, r7, #8
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f813 	bl	800779c <mqtt_parse_pub_msg_ptr>
 8007776:	4603      	mov	r3, r0
 8007778:	81fb      	strh	r3, [r7, #14]
	
	if(msg_len != 0 && ptr != NULL) {
 800777a:	89fb      	ldrh	r3, [r7, #14]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d008      	beq.n	8007792 <mqtt_parse_publish_msg+0x32>
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d005      	beq.n	8007792 <mqtt_parse_publish_msg+0x32>
		memcpy(msg, ptr, msg_len);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	89fa      	ldrh	r2, [r7, #14]
 800778a:	4619      	mov	r1, r3
 800778c:	6838      	ldr	r0, [r7, #0]
 800778e:	f7f8 fcbf 	bl	8000110 <memcpy>
	}
	
	return msg_len;
 8007792:	89fb      	ldrh	r3, [r7, #14]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <mqtt_parse_pub_msg_ptr>:

uint16_t mqtt_parse_pub_msg_ptr(const uint8_t* buf, const uint8_t **msg_ptr) {
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
	uint16_t len = 0;
 80077a6:	2300      	movs	r3, #0
 80077a8:	81fb      	strh	r3, [r7, #14]
	
	//printf("mqtt_parse_pub_msg_ptr\n");
	
	if(MQTTParseMessageType(buf) == MQTT_MSG_PUBLISH) {
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077b2:	2b30      	cmp	r3, #48	; 0x30
 80077b4:	d133      	bne.n	800781e <mqtt_parse_pub_msg_ptr+0x82>
		// message starts at
		// fixed header length + Topic (UTF encoded) + msg id (if QoS>0)
		uint8_t rlb = mqtt_num_rem_len_bytes(buf);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7ff ff20 	bl	80075fc <mqtt_num_rem_len_bytes>
 80077bc:	4603      	mov	r3, r0
 80077be:	733b      	strb	r3, [r7, #12]
		uint8_t offset = (*(buf+1+rlb))<<8;	// topic UTF MSB
 80077c0:	2300      	movs	r3, #0
 80077c2:	737b      	strb	r3, [r7, #13]
		offset |= *(buf+1+rlb+1);			// topic UTF LSB
 80077c4:	7b3b      	ldrb	r3, [r7, #12]
 80077c6:	3302      	adds	r3, #2
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	4413      	add	r3, r2
 80077cc:	781a      	ldrb	r2, [r3, #0]
 80077ce:	7b7b      	ldrb	r3, [r7, #13]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	737b      	strb	r3, [r7, #13]
		offset += (1+rlb+2);				// fixed header + topic size
 80077d4:	7b3a      	ldrb	r2, [r7, #12]
 80077d6:	7b7b      	ldrb	r3, [r7, #13]
 80077d8:	4413      	add	r3, r2
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	3303      	adds	r3, #3
 80077de:	737b      	strb	r3, [r7, #13]

		if(MQTTParseMessageQos(buf)) {
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	105b      	asrs	r3, r3, #1
 80077e6:	f003 0303 	and.w	r3, r3, #3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d002      	beq.n	80077f4 <mqtt_parse_pub_msg_ptr+0x58>
			offset += 2;					// add two bytes of msg id
 80077ee:	7b7b      	ldrb	r3, [r7, #13]
 80077f0:	3302      	adds	r3, #2
 80077f2:	737b      	strb	r3, [r7, #13]
		}

		*msg_ptr = (buf + offset);
 80077f4:	7b7b      	ldrb	r3, [r7, #13]
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	441a      	add	r2, r3
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	601a      	str	r2, [r3, #0]
		// offset is now pointing to start of message
		// length of the message is remaining length - variable header
		// variable header is offset - fixed header
		// fixed header is 1 + rlb
		// so, lom = remlen - (offset - (1+rlb))
      	len = mqtt_parse_rem_len(buf) - (offset-(rlb+1));
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7ff ff24 	bl	800764c <mqtt_parse_rem_len>
 8007804:	4603      	mov	r3, r0
 8007806:	4619      	mov	r1, r3
 8007808:	7b3b      	ldrb	r3, [r7, #12]
 800780a:	b29a      	uxth	r2, r3
 800780c:	7b7b      	ldrb	r3, [r7, #13]
 800780e:	b29b      	uxth	r3, r3
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	b29b      	uxth	r3, r3
 8007814:	440b      	add	r3, r1
 8007816:	b29b      	uxth	r3, r3
 8007818:	3301      	adds	r3, #1
 800781a:	81fb      	strh	r3, [r7, #14]
 800781c:	e002      	b.n	8007824 <mqtt_parse_pub_msg_ptr+0x88>
	} else {
		*msg_ptr = NULL;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]
	}
	return len;
 8007824:	89fb      	ldrh	r3, [r7, #14]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop

08007830 <mqtt_init>:

void mqtt_init(mqtt_broker_handle_t* broker, const char* clientid) {
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
	// Connection options
	broker->alive = 300; // 300 seconds = 5 minutes
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007840:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	broker->seq = 1; // Sequency for message indetifiers
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	// Client options
	memset(broker->clientid, 0, sizeof(broker->clientid));
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	3308      	adds	r3, #8
 8007850:	2232      	movs	r2, #50	; 0x32
 8007852:	2100      	movs	r1, #0
 8007854:	4618      	mov	r0, r3
 8007856:	f7f8 fcd1 	bl	80001fc <memset>
	memset(broker->username, 0, sizeof(broker->username));
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	333a      	adds	r3, #58	; 0x3a
 800785e:	220d      	movs	r2, #13
 8007860:	2100      	movs	r1, #0
 8007862:	4618      	mov	r0, r3
 8007864:	f7f8 fcca 	bl	80001fc <memset>
	memset(broker->password, 0, sizeof(broker->password));
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	3347      	adds	r3, #71	; 0x47
 800786c:	220d      	movs	r2, #13
 800786e:	2100      	movs	r1, #0
 8007870:	4618      	mov	r0, r3
 8007872:	f7f8 fcc3 	bl	80001fc <memset>
	if(clientid) {
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d007      	beq.n	800788c <mqtt_init+0x5c>
		strncpy(broker->clientid, clientid, sizeof(broker->clientid));
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	3308      	adds	r3, #8
 8007880:	2232      	movs	r2, #50	; 0x32
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	4618      	mov	r0, r3
 8007886:	f7f8 ff5d 	bl	8000744 <strncpy>
 800788a:	e006      	b.n	800789a <mqtt_init+0x6a>
	} else {
		strcpy(broker->clientid, "emqtt");
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3308      	adds	r3, #8
 8007890:	4a06      	ldr	r2, [pc, #24]	; (80078ac <mqtt_init+0x7c>)
 8007892:	6810      	ldr	r0, [r2, #0]
 8007894:	6018      	str	r0, [r3, #0]
 8007896:	8892      	ldrh	r2, [r2, #4]
 8007898:	809a      	strh	r2, [r3, #4]
	}
	// Will topic
	broker->clean_session = 1;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
}
 80078a2:	bf00      	nop
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	080097dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, ip, pc}

080078b0 <mqtt_init_auth>:

void mqtt_init_auth(mqtt_broker_handle_t* broker, const char* username, const char* password) {
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
	if(username && username[0] != '\0')
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <mqtt_init_auth+0x28>
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d006      	beq.n	80078d8 <mqtt_init_auth+0x28>
		strncpy(broker->username, username, sizeof(broker->username)-1);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	333a      	adds	r3, #58	; 0x3a
 80078ce:	220c      	movs	r2, #12
 80078d0:	68b9      	ldr	r1, [r7, #8]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7f8 ff36 	bl	8000744 <strncpy>
	if(password && password[0] != '\0')
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00a      	beq.n	80078f4 <mqtt_init_auth+0x44>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d006      	beq.n	80078f4 <mqtt_init_auth+0x44>
		strncpy(broker->password, password, sizeof(broker->password)-1);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	3347      	adds	r3, #71	; 0x47
 80078ea:	220c      	movs	r2, #12
 80078ec:	6879      	ldr	r1, [r7, #4]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7f8 ff28 	bl	8000744 <strncpy>
}
 80078f4:	bf00      	nop
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <mqtt_set_alive>:

void mqtt_set_alive(mqtt_broker_handle_t* broker, uint16_t alive) {
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	807b      	strh	r3, [r7, #2]
	broker->alive = alive;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	887a      	ldrh	r2, [r7, #2]
 800790c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	bc80      	pop	{r7}
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop

0800791c <mqtt_connect>:

int mqtt_connect(mqtt_broker_handle_t* broker)
{
 800791c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007920:	b091      	sub	sp, #68	; 0x44
 8007922:	af00      	add	r7, sp, #0
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	466b      	mov	r3, sp
 8007928:	60bb      	str	r3, [r7, #8]
	uint8_t flags = 0x00;
 800792a:	2300      	movs	r3, #0
 800792c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	uint16_t clientidlen = strlen(broker->clientid);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	3308      	adds	r3, #8
 8007934:	4618      	mov	r0, r3
 8007936:	f7f8 fe89 	bl	800064c <strlen>
 800793a:	4603      	mov	r3, r0
 800793c:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t usernamelen = strlen(broker->username);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	333a      	adds	r3, #58	; 0x3a
 8007942:	4618      	mov	r0, r3
 8007944:	f7f8 fe82 	bl	800064c <strlen>
 8007948:	4603      	mov	r3, r0
 800794a:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t passwordlen = strlen(broker->password);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	3347      	adds	r3, #71	; 0x47
 8007950:	4618      	mov	r0, r3
 8007952:	f7f8 fe7b 	bl	800064c <strlen>
 8007956:	4603      	mov	r3, r0
 8007958:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t payload_len = clientidlen + 2;
 800795a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800795c:	3302      	adds	r3, #2
 800795e:	87bb      	strh	r3, [r7, #60]	; 0x3c

	// Preparing the flags
	if(usernamelen) {
 8007960:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00b      	beq.n	800797e <mqtt_connect+0x62>
		payload_len += usernamelen + 2;
 8007966:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007968:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800796a:	4413      	add	r3, r2
 800796c:	b29b      	uxth	r3, r3
 800796e:	3302      	adds	r3, #2
 8007970:	87bb      	strh	r3, [r7, #60]	; 0x3c
		flags |= MQTT_USERNAME_FLAG;
 8007972:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007976:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800797a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	if(passwordlen) {
 800797e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00b      	beq.n	800799c <mqtt_connect+0x80>
		payload_len += passwordlen + 2;
 8007984:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8007986:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007988:	4413      	add	r3, r2
 800798a:	b29b      	uxth	r3, r3
 800798c:	3302      	adds	r3, #2
 800798e:	87bb      	strh	r3, [r7, #60]	; 0x3c
		flags |= MQTT_PASSWORD_FLAG;
 8007990:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007998:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	if(broker->clean_session) {
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d005      	beq.n	80079b2 <mqtt_connect+0x96>
		flags |= MQTT_CLEAN_SESSION;
 80079a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80079aa:	f043 0302 	orr.w	r3, r3, #2
 80079ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	// Variable header
	uint8_t var_header[] = {
 80079b2:	2300      	movs	r3, #0
 80079b4:	753b      	strb	r3, [r7, #20]
 80079b6:	2306      	movs	r3, #6
 80079b8:	757b      	strb	r3, [r7, #21]
 80079ba:	234d      	movs	r3, #77	; 0x4d
 80079bc:	75bb      	strb	r3, [r7, #22]
 80079be:	2351      	movs	r3, #81	; 0x51
 80079c0:	75fb      	strb	r3, [r7, #23]
 80079c2:	2349      	movs	r3, #73	; 0x49
 80079c4:	763b      	strb	r3, [r7, #24]
 80079c6:	2373      	movs	r3, #115	; 0x73
 80079c8:	767b      	strb	r3, [r7, #25]
 80079ca:	2364      	movs	r3, #100	; 0x64
 80079cc:	76bb      	strb	r3, [r7, #26]
 80079ce:	2370      	movs	r3, #112	; 0x70
 80079d0:	76fb      	strb	r3, [r7, #27]
 80079d2:	2303      	movs	r3, #3
 80079d4:	773b      	strb	r3, [r7, #28]
 80079d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80079da:	777b      	strb	r3, [r7, #29]
		0x00,0x06,0x4d,0x51,0x49,0x73,0x64,0x70, // Protocol name: MQIsdp
		0x03, // Protocol version
		flags, // Connect flags
		broker->alive>>8, broker->alive&0xFF, // Keep alive
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
	uint8_t var_header[] = {
 80079e2:	0a1b      	lsrs	r3, r3, #8
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	77bb      	strb	r3, [r7, #30]
		broker->alive>>8, broker->alive&0xFF, // Keep alive
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
	uint8_t var_header[] = {
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	77fb      	strb	r3, [r7, #31]
	};


   	// Fixed header
    uint8_t fixedHeaderSize = 2;    // Default size = one byte Message Type + one byte Remaining Length
 80079f4:	2302      	movs	r3, #2
 80079f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    uint8_t remainLen = sizeof(var_header)+payload_len;
 80079fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	330c      	adds	r3, #12
 8007a00:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    if (remainLen > 127) {
 8007a04:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	da04      	bge.n	8007a16 <mqtt_connect+0xfa>
        fixedHeaderSize++;          // add an additional byte for Remaining Length
 8007a0c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007a10:	3301      	adds	r3, #1
 8007a12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    }
    uint8_t fixed_header[fixedHeaderSize];
 8007a16:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a22:	b2c2      	uxtb	r2, r0
 8007a24:	f04f 0300 	mov.w	r3, #0
 8007a28:	00d9      	lsls	r1, r3, #3
 8007a2a:	6079      	str	r1, [r7, #4]
 8007a2c:	6879      	ldr	r1, [r7, #4]
 8007a2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a32:	6079      	str	r1, [r7, #4]
 8007a34:	00d2      	lsls	r2, r2, #3
 8007a36:	603a      	str	r2, [r7, #0]
 8007a38:	b2c2      	uxtb	r2, r0
 8007a3a:	f04f 0300 	mov.w	r3, #0
 8007a3e:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 8007a42:	ea4b 7b52 	orr.w	fp, fp, r2, lsr #29
 8007a46:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	3307      	adds	r3, #7
 8007a4e:	08db      	lsrs	r3, r3, #3
 8007a50:	00db      	lsls	r3, r3, #3
 8007a52:	ebad 0d03 	sub.w	sp, sp, r3
 8007a56:	466b      	mov	r3, sp
 8007a58:	3300      	adds	r3, #0
 8007a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    
    // Message Type
    fixed_header[0] = MQTT_MSG_CONNECT;
 8007a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5e:	2210      	movs	r2, #16
 8007a60:	701a      	strb	r2, [r3, #0]

    // Remaining Length
    if (remainLen <= 127) {
 8007a62:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	db04      	blt.n	8007a74 <mqtt_connect+0x158>
        fixed_header[1] = remainLen;
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8007a70:	705a      	strb	r2, [r3, #1]
 8007a72:	e013      	b.n	8007a9c <mqtt_connect+0x180>
    } else {
        // first byte is remainder (mod) of 128, then set the MSB to indicate more bytes
        fixed_header[1] = remainLen % 128;
 8007a74:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a80:	705a      	strb	r2, [r3, #1]
        fixed_header[1] = fixed_header[1] | 0x80;
 8007a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a84:	785b      	ldrb	r3, [r3, #1]
 8007a86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	705a      	strb	r2, [r3, #1]
        // second byte is number of 128s
        fixed_header[2] = remainLen / 128;
 8007a90:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007a94:	09db      	lsrs	r3, r3, #7
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9a:	709a      	strb	r2, [r3, #2]
    }

	uint16_t offset = 0;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+payload_len];
 8007aa0:	4682      	mov	sl, r0
 8007aa2:	4652      	mov	r2, sl
 8007aa4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f103 060c 	add.w	r6, r3, #12
 8007aac:	4633      	mov	r3, r6
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ab2:	4632      	mov	r2, r6
 8007ab4:	f04f 0300 	mov.w	r3, #0
 8007ab8:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8007abc:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8007ac0:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8007ac4:	4632      	mov	r2, r6
 8007ac6:	f04f 0300 	mov.w	r3, #0
 8007aca:	00dd      	lsls	r5, r3, #3
 8007acc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ad0:	00d4      	lsls	r4, r2, #3
 8007ad2:	1df3      	adds	r3, r6, #7
 8007ad4:	08db      	lsrs	r3, r3, #3
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	ebad 0d03 	sub.w	sp, sp, r3
 8007adc:	466b      	mov	r3, sp
 8007ade:	3300      	adds	r3, #0
 8007ae0:	623b      	str	r3, [r7, #32]
	memset(packet, 0, sizeof(packet));
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	4632      	mov	r2, r6
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7f8 fb87 	bl	80001fc <memset>
	memcpy(packet, fixed_header, sizeof(fixed_header));
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007af2:	4652      	mov	r2, sl
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7f8 fb0b 	bl	8000110 <memcpy>
	offset += sizeof(fixed_header);
 8007afa:	fa1f f28a 	uxth.w	r2, sl
 8007afe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b00:	4413      	add	r3, r2
 8007b02:	873b      	strh	r3, [r7, #56]	; 0x38
	memcpy(packet+offset, var_header, sizeof(var_header));
 8007b04:	6a3a      	ldr	r2, [r7, #32]
 8007b06:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b08:	4413      	add	r3, r2
 8007b0a:	461c      	mov	r4, r3
 8007b0c:	f107 0314 	add.w	r3, r7, #20
 8007b10:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007b12:	6020      	str	r0, [r4, #0]
 8007b14:	6061      	str	r1, [r4, #4]
 8007b16:	60a2      	str	r2, [r4, #8]
	offset += sizeof(var_header);
 8007b18:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b1a:	330c      	adds	r3, #12
 8007b1c:	873b      	strh	r3, [r7, #56]	; 0x38
	// Client ID - UTF encoded
	packet[offset++] = clientidlen>>8;
 8007b1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b20:	1c5a      	adds	r2, r3, #1
 8007b22:	873a      	strh	r2, [r7, #56]	; 0x38
 8007b24:	461a      	mov	r2, r3
 8007b26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007b28:	0a1b      	lsrs	r3, r3, #8
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	b2d9      	uxtb	r1, r3
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	5499      	strb	r1, [r3, r2]
	packet[offset++] = clientidlen&0xFF;
 8007b32:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b34:	1c5a      	adds	r2, r3, #1
 8007b36:	873a      	strh	r2, [r7, #56]	; 0x38
 8007b38:	461a      	mov	r2, r3
 8007b3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007b3c:	b2d9      	uxtb	r1, r3
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	5499      	strb	r1, [r3, r2]
	memcpy(packet+offset, broker->clientid, clientidlen);
 8007b42:	6a3a      	ldr	r2, [r7, #32]
 8007b44:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b46:	18d0      	adds	r0, r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007b4e:	4619      	mov	r1, r3
 8007b50:	f7f8 fade 	bl	8000110 <memcpy>
	offset += clientidlen;
 8007b54:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8007b56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007b58:	4413      	add	r3, r2
 8007b5a:	873b      	strh	r3, [r7, #56]	; 0x38

	if(usernamelen) {
 8007b5c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d01e      	beq.n	8007ba0 <mqtt_connect+0x284>
		// Username - UTF encoded
		packet[offset++] = usernamelen>>8;
 8007b62:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b64:	1c5a      	adds	r2, r3, #1
 8007b66:	873a      	strh	r2, [r7, #56]	; 0x38
 8007b68:	461a      	mov	r2, r3
 8007b6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007b6c:	0a1b      	lsrs	r3, r3, #8
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	b2d9      	uxtb	r1, r3
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	5499      	strb	r1, [r3, r2]
		packet[offset++] = usernamelen&0xFF;
 8007b76:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b78:	1c5a      	adds	r2, r3, #1
 8007b7a:	873a      	strh	r2, [r7, #56]	; 0x38
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007b80:	b2d9      	uxtb	r1, r3
 8007b82:	6a3b      	ldr	r3, [r7, #32]
 8007b84:	5499      	strb	r1, [r3, r2]
		memcpy(packet+offset, broker->username, usernamelen);
 8007b86:	6a3a      	ldr	r2, [r7, #32]
 8007b88:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b8a:	18d0      	adds	r0, r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	333a      	adds	r3, #58	; 0x3a
 8007b90:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007b92:	4619      	mov	r1, r3
 8007b94:	f7f8 fabc 	bl	8000110 <memcpy>
		offset += usernamelen;
 8007b98:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8007b9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007b9c:	4413      	add	r3, r2
 8007b9e:	873b      	strh	r3, [r7, #56]	; 0x38
	}

	if(passwordlen) {
 8007ba0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d01e      	beq.n	8007be4 <mqtt_connect+0x2c8>
		// Password - UTF encoded
		packet[offset++] = passwordlen>>8;
 8007ba6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007ba8:	1c5a      	adds	r2, r3, #1
 8007baa:	873a      	strh	r2, [r7, #56]	; 0x38
 8007bac:	461a      	mov	r2, r3
 8007bae:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007bb0:	0a1b      	lsrs	r3, r3, #8
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	b2d9      	uxtb	r1, r3
 8007bb6:	6a3b      	ldr	r3, [r7, #32]
 8007bb8:	5499      	strb	r1, [r3, r2]
		packet[offset++] = passwordlen&0xFF;
 8007bba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007bbc:	1c5a      	adds	r2, r3, #1
 8007bbe:	873a      	strh	r2, [r7, #56]	; 0x38
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007bc4:	b2d9      	uxtb	r1, r3
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	5499      	strb	r1, [r3, r2]
		memcpy(packet+offset, broker->password, passwordlen);
 8007bca:	6a3a      	ldr	r2, [r7, #32]
 8007bcc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007bce:	18d0      	adds	r0, r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	3347      	adds	r3, #71	; 0x47
 8007bd4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	f7f8 fa9a 	bl	8000110 <memcpy>
		offset += passwordlen;
 8007bdc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8007bde:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007be0:	4413      	add	r3, r2
 8007be2:	873b      	strh	r3, [r7, #56]	; 0x38
	}

	// Send the packet
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	6810      	ldr	r0, [r2, #0]
 8007bec:	6a39      	ldr	r1, [r7, #32]
 8007bee:	4632      	mov	r2, r6
 8007bf0:	4798      	blx	r3
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	42b3      	cmp	r3, r6
 8007bf6:	d202      	bcs.n	8007bfe <mqtt_connect+0x2e2>
		return -1;
 8007bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bfc:	e000      	b.n	8007c00 <mqtt_connect+0x2e4>
	}

	return 1;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3744      	adds	r7, #68	; 0x44
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0e:	bf00      	nop

08007c10 <mqtt_ping>:
	}

	return 1;
}

int mqtt_ping(mqtt_broker_handle_t* broker) {
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
	uint8_t packet[] = {
 8007c18:	23c0      	movs	r3, #192	; 0xc0
 8007c1a:	733b      	strb	r3, [r7, #12]
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	737b      	strb	r3, [r7, #13]
		MQTT_MSG_PINGREQ, // Message Type, DUP flag, QoS level, Retain
		0x00 // Remaining length
	};

	// Send the packet
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	6810      	ldr	r0, [r2, #0]
 8007c28:	f107 010c 	add.w	r1, r7, #12
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	4798      	blx	r3
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d802      	bhi.n	8007c3c <mqtt_ping+0x2c>
		return -1;
 8007c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c3a:	e000      	b.n	8007c3e <mqtt_ping+0x2e>
	}

	return 1;
 8007c3c:	2301      	movs	r3, #1
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop

08007c48 <mqtt_subscribe>:
	}

	return 1;
}

int mqtt_subscribe(mqtt_broker_handle_t* broker, const char* topic, uint16_t* message_id) {
 8007c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c4c:	b08f      	sub	sp, #60	; 0x3c
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6178      	str	r0, [r7, #20]
 8007c52:	6139      	str	r1, [r7, #16]
 8007c54:	60fa      	str	r2, [r7, #12]
 8007c56:	466b      	mov	r3, sp
 8007c58:	60bb      	str	r3, [r7, #8]
	uint16_t topiclen = strlen(topic);
 8007c5a:	6938      	ldr	r0, [r7, #16]
 8007c5c:	f7f8 fcf6 	bl	800064c <strlen>
 8007c60:	4603      	mov	r3, r0
 8007c62:	86fb      	strh	r3, [r7, #54]	; 0x36

	// Variable header
	uint8_t var_header[2]; // Message ID
	var_header[0] = broker->seq>>8;
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c6a:	0a1b      	lsrs	r3, r3, #8
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	f887 3020 	strb.w	r3, [r7, #32]
	var_header[1] = broker->seq&0xFF;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(message_id) { // Returning message id
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d004      	beq.n	8007c90 <mqtt_subscribe+0x48>
		*message_id = broker->seq;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	801a      	strh	r2, [r3, #0]
	}
	broker->seq++;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c96:	3301      	adds	r3, #1
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	// utf topic
	uint8_t utf_topic[topiclen+3]; // Topic size (2 bytes), utf-encoded topic, QoS byte
 8007ca0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007ca2:	1cde      	adds	r6, r3, #3
 8007ca4:	1e73      	subs	r3, r6, #1
 8007ca6:	633b      	str	r3, [r7, #48]	; 0x30
 8007ca8:	4633      	mov	r3, r6
 8007caa:	461a      	mov	r2, r3
 8007cac:	f04f 0300 	mov.w	r3, #0
 8007cb0:	00d9      	lsls	r1, r3, #3
 8007cb2:	6079      	str	r1, [r7, #4]
 8007cb4:	6879      	ldr	r1, [r7, #4]
 8007cb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007cba:	6079      	str	r1, [r7, #4]
 8007cbc:	00d3      	lsls	r3, r2, #3
 8007cbe:	603b      	str	r3, [r7, #0]
 8007cc0:	4633      	mov	r3, r6
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	f04f 0300 	mov.w	r3, #0
 8007cc8:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 8007ccc:	ea4b 7b52 	orr.w	fp, fp, r2, lsr #29
 8007cd0:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 8007cd4:	4633      	mov	r3, r6
 8007cd6:	3307      	adds	r3, #7
 8007cd8:	08db      	lsrs	r3, r3, #3
 8007cda:	00db      	lsls	r3, r3, #3
 8007cdc:	ebad 0d03 	sub.w	sp, sp, r3
 8007ce0:	466b      	mov	r3, sp
 8007ce2:	3300      	adds	r3, #0
 8007ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(utf_topic, 0, sizeof(utf_topic));
 8007ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce8:	4632      	mov	r2, r6
 8007cea:	2100      	movs	r1, #0
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7f8 fa85 	bl	80001fc <memset>
	utf_topic[0] = topiclen>>8;
 8007cf2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007cf4:	0a1b      	lsrs	r3, r3, #8
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfc:	701a      	strb	r2, [r3, #0]
	utf_topic[1] = topiclen&0xFF;
 8007cfe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d04:	705a      	strb	r2, [r3, #1]
	memcpy(utf_topic+2, topic, topiclen);
 8007d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d08:	3302      	adds	r3, #2
 8007d0a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007d0c:	6939      	ldr	r1, [r7, #16]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7f8 f9fe 	bl	8000110 <memcpy>

	// Fixed header
	uint8_t fixed_header[] = {
 8007d14:	2382      	movs	r3, #130	; 0x82
 8007d16:	773b      	strb	r3, [r7, #28]
 8007d18:	b2f3      	uxtb	r3, r6
 8007d1a:	3302      	adds	r3, #2
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	777b      	strb	r3, [r7, #29]
		MQTT_MSG_SUBSCRIBE | MQTT_QOS1_FLAG, // Message Type, DUP flag, QoS level, Retain
		sizeof(var_header)+sizeof(utf_topic)
	};

	uint8_t packet[sizeof(var_header)+sizeof(fixed_header)+sizeof(utf_topic)];
 8007d20:	4633      	mov	r3, r6
 8007d22:	3303      	adds	r3, #3
 8007d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d26:	4633      	mov	r3, r6
 8007d28:	3304      	adds	r3, #4
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f04f 0300 	mov.w	r3, #0
 8007d30:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8007d34:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8007d38:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8007d3c:	4633      	mov	r3, r6
 8007d3e:	3304      	adds	r3, #4
 8007d40:	461a      	mov	r2, r3
 8007d42:	f04f 0300 	mov.w	r3, #0
 8007d46:	00dd      	lsls	r5, r3, #3
 8007d48:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d4c:	00d4      	lsls	r4, r2, #3
 8007d4e:	4633      	mov	r3, r6
 8007d50:	3304      	adds	r3, #4
 8007d52:	3307      	adds	r3, #7
 8007d54:	08db      	lsrs	r3, r3, #3
 8007d56:	00db      	lsls	r3, r3, #3
 8007d58:	ebad 0d03 	sub.w	sp, sp, r3
 8007d5c:	466b      	mov	r3, sp
 8007d5e:	3300      	adds	r3, #0
 8007d60:	627b      	str	r3, [r7, #36]	; 0x24
	memset(packet, 0, sizeof(packet));
 8007d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d64:	4632      	mov	r2, r6
 8007d66:	3204      	adds	r2, #4
 8007d68:	2100      	movs	r1, #0
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7f8 fa46 	bl	80001fc <memset>
	memcpy(packet, fixed_header, sizeof(fixed_header));
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	461a      	mov	r2, r3
 8007d74:	f107 031c 	add.w	r3, r7, #28
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	8013      	strh	r3, [r2, #0]
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7e:	3302      	adds	r3, #2
 8007d80:	461a      	mov	r2, r3
 8007d82:	f107 0320 	add.w	r3, r7, #32
 8007d86:	881b      	ldrh	r3, [r3, #0]
 8007d88:	8013      	strh	r3, [r2, #0]
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), utf_topic, sizeof(utf_topic));
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8c:	3304      	adds	r3, #4
 8007d8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d90:	4632      	mov	r2, r6
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7f8 f9bc 	bl	8000110 <memcpy>

	// Send the packet
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	697a      	ldr	r2, [r7, #20]
 8007d9e:	6810      	ldr	r0, [r2, #0]
 8007da0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007da2:	4632      	mov	r2, r6
 8007da4:	3204      	adds	r2, #4
 8007da6:	4798      	blx	r3
 8007da8:	4603      	mov	r3, r0
 8007daa:	461a      	mov	r2, r3
 8007dac:	4633      	mov	r3, r6
 8007dae:	3304      	adds	r3, #4
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d202      	bcs.n	8007dba <mqtt_subscribe+0x172>
		return -1;
 8007db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007db8:	e000      	b.n	8007dbc <mqtt_subscribe+0x174>
	}

	return 1;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	373c      	adds	r7, #60	; 0x3c
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dca:	bf00      	nop

08007dcc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f103 0208 	add.w	r2, r3, #8
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007de4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f103 0208 	add.w	r2, r3, #8
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f103 0208 	add.w	r2, r3, #8
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bc80      	pop	{r7}
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop

08007e0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e1a:	bf00      	nop
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bc80      	pop	{r7}
 8007e22:	4770      	bx	lr

08007e24 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	689a      	ldr	r2, [r3, #8]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	1c5a      	adds	r2, r3, #1
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	601a      	str	r2, [r3, #0]
}
 8007e60:	bf00      	nop
 8007e62:	3714      	adds	r7, #20
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bc80      	pop	{r7}
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop

08007e6c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e82:	d103      	bne.n	8007e8c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	60fb      	str	r3, [r7, #12]
 8007e8a:	e00c      	b.n	8007ea6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	3308      	adds	r3, #8
 8007e90:	60fb      	str	r3, [r7, #12]
 8007e92:	e002      	b.n	8007e9a <vListInsert+0x2e>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	60fb      	str	r3, [r7, #12]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d9f6      	bls.n	8007e94 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	1c5a      	adds	r2, r3, #1
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	601a      	str	r2, [r3, #0]
}
 8007ed2:	bf00      	nop
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bc80      	pop	{r7}
 8007eda:	4770      	bx	lr

08007edc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	6892      	ldr	r2, [r2, #8]
 8007ef2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	6852      	ldr	r2, [r2, #4]
 8007efc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d103      	bne.n	8007f10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689a      	ldr	r2, [r3, #8]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	1e5a      	subs	r2, r3, #1
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bc80      	pop	{r7}
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop

08007f30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8007f3e:	f001 fa23 	bl	8009388 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4a:	68f9      	ldr	r1, [r7, #12]
 8007f4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f4e:	fb01 f303 	mul.w	r3, r1, r3
 8007f52:	441a      	add	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	68f9      	ldr	r1, [r7, #12]
 8007f72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f74:	fb01 f303 	mul.w	r3, r1, r3
 8007f78:	441a      	add	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	22ff      	movs	r2, #255	; 0xff
 8007f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	22ff      	movs	r2, #255	; 0xff
 8007f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d114      	bne.n	8007fbe <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d01a      	beq.n	8007fd2 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	3310      	adds	r3, #16
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f000 fe5f 	bl	8008c64 <xTaskRemoveFromEventList>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d012      	beq.n	8007fd2 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007fac:	4b0c      	ldr	r3, [pc, #48]	; (8007fe0 <xQueueGenericReset+0xb0>)
 8007fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	f3bf 8f4f 	dsb	sy
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	e009      	b.n	8007fd2 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	3310      	adds	r3, #16
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7ff ff02 	bl	8007dcc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	3324      	adds	r3, #36	; 0x24
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7ff fefd 	bl	8007dcc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007fd2:	f001 f9f1 	bl	80093b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007fd6:	2301      	movs	r3, #1
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	e000ed04 	and	lr, r0, r4, lsl #26

08007fe4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b08a      	sub	sp, #40	; 0x28
 8007fe8:	af02      	add	r7, sp, #8
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d102      	bne.n	8007ffe <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	61fb      	str	r3, [r7, #28]
 8007ffc:	e004      	b.n	8008008 <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	fb02 f303 	mul.w	r3, r2, r3
 8008006:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	3348      	adds	r3, #72	; 0x48
 800800c:	4618      	mov	r0, r3
 800800e:	f001 fa4d 	bl	80094ac <pvPortMalloc>
 8008012:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00d      	beq.n	8008036 <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	3348      	adds	r3, #72	; 0x48
 8008022:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008024:	79fa      	ldrb	r2, [r7, #7]
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	4613      	mov	r3, r2
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	68b9      	ldr	r1, [r7, #8]
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f000 f805 	bl	8008040 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008036:	69bb      	ldr	r3, [r7, #24]
	}
 8008038:	4618      	mov	r0, r3
 800803a:	3720      	adds	r7, #32
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
 800804c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d103      	bne.n	800805c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	601a      	str	r2, [r3, #0]
 800805a:	e002      	b.n	8008062 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800806e:	2101      	movs	r1, #1
 8008070:	69b8      	ldr	r0, [r7, #24]
 8008072:	f7ff ff5d 	bl	8007f30 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008076:	bf00      	nop
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop

08008080 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00e      	beq.n	80080ac <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80080a0:	2300      	movs	r3, #0
 80080a2:	2200      	movs	r2, #0
 80080a4:	2100      	movs	r1, #0
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f81c 	bl	80080e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80080ac:	bf00      	nop
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b086      	sub	sp, #24
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	4603      	mov	r3, r0
 80080bc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80080be:	2301      	movs	r3, #1
 80080c0:	617b      	str	r3, [r7, #20]
 80080c2:	2300      	movs	r3, #0
 80080c4:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80080c6:	79fb      	ldrb	r3, [r7, #7]
 80080c8:	461a      	mov	r2, r3
 80080ca:	6939      	ldr	r1, [r7, #16]
 80080cc:	6978      	ldr	r0, [r7, #20]
 80080ce:	f7ff ff89 	bl	8007fe4 <xQueueGenericCreate>
 80080d2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f7ff ffd3 	bl	8008080 <prvInitialiseMutex>

		return xNewQueue;
 80080da:	68fb      	ldr	r3, [r7, #12]
	}
 80080dc:	4618      	mov	r0, r3
 80080de:	3718      	adds	r7, #24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b08a      	sub	sp, #40	; 0x28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
 80080f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80080f2:	2300      	movs	r3, #0
 80080f4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080fa:	f001 f945 	bl	8009388 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080fe:	6a3b      	ldr	r3, [r7, #32]
 8008100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008106:	429a      	cmp	r2, r3
 8008108:	d302      	bcc.n	8008110 <xQueueGenericSend+0x2c>
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b02      	cmp	r3, #2
 800810e:	d129      	bne.n	8008164 <xQueueGenericSend+0x80>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	68b9      	ldr	r1, [r7, #8]
 8008114:	6a38      	ldr	r0, [r7, #32]
 8008116:	f000 f96f 	bl	80083f8 <prvCopyDataToQueue>
 800811a:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	2b00      	cmp	r3, #0
 8008122:	d010      	beq.n	8008146 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	3324      	adds	r3, #36	; 0x24
 8008128:	4618      	mov	r0, r3
 800812a:	f000 fd9b 	bl	8008c64 <xTaskRemoveFromEventList>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d013      	beq.n	800815c <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008134:	4b3f      	ldr	r3, [pc, #252]	; (8008234 <xQueueGenericSend+0x150>)
 8008136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800813a:	601a      	str	r2, [r3, #0]
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	e00a      	b.n	800815c <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d007      	beq.n	800815c <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800814c:	4b39      	ldr	r3, [pc, #228]	; (8008234 <xQueueGenericSend+0x150>)
 800814e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800815c:	f001 f92c 	bl	80093b8 <vPortExitCritical>
				return pdPASS;
 8008160:	2301      	movs	r3, #1
 8008162:	e063      	b.n	800822c <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d103      	bne.n	8008172 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800816a:	f001 f925 	bl	80093b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800816e:	2300      	movs	r3, #0
 8008170:	e05c      	b.n	800822c <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	2b00      	cmp	r3, #0
 8008176:	d106      	bne.n	8008186 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008178:	f107 0314 	add.w	r3, r7, #20
 800817c:	4618      	mov	r0, r3
 800817e:	f000 fdc5 	bl	8008d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008182:	2301      	movs	r3, #1
 8008184:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008186:	f001 f917 	bl	80093b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800818a:	f000 fba5 	bl	80088d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800818e:	f001 f8fb 	bl	8009388 <vPortEnterCritical>
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008198:	b25b      	sxtb	r3, r3
 800819a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800819e:	d103      	bne.n	80081a8 <xQueueGenericSend+0xc4>
 80081a0:	6a3b      	ldr	r3, [r7, #32]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081ae:	b25b      	sxtb	r3, r3
 80081b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081b4:	d103      	bne.n	80081be <xQueueGenericSend+0xda>
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081be:	f001 f8fb 	bl	80093b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081c2:	1d3a      	adds	r2, r7, #4
 80081c4:	f107 0314 	add.w	r3, r7, #20
 80081c8:	4611      	mov	r1, r2
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 fdb4 	bl	8008d38 <xTaskCheckForTimeOut>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d124      	bne.n	8008220 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80081d6:	6a38      	ldr	r0, [r7, #32]
 80081d8:	f000 f9e0 	bl	800859c <prvIsQueueFull>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d018      	beq.n	8008214 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80081e2:	6a3b      	ldr	r3, [r7, #32]
 80081e4:	3310      	adds	r3, #16
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	4611      	mov	r1, r2
 80081ea:	4618      	mov	r0, r3
 80081ec:	f000 fd24 	bl	8008c38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80081f0:	6a38      	ldr	r0, [r7, #32]
 80081f2:	f000 f96b 	bl	80084cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80081f6:	f000 fb7d 	bl	80088f4 <xTaskResumeAll>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f47f af7c 	bne.w	80080fa <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8008202:	4b0c      	ldr	r3, [pc, #48]	; (8008234 <xQueueGenericSend+0x150>)
 8008204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008208:	601a      	str	r2, [r3, #0]
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	e772      	b.n	80080fa <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008214:	6a38      	ldr	r0, [r7, #32]
 8008216:	f000 f959 	bl	80084cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800821a:	f000 fb6b 	bl	80088f4 <xTaskResumeAll>
 800821e:	e76c      	b.n	80080fa <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008220:	6a38      	ldr	r0, [r7, #32]
 8008222:	f000 f953 	bl	80084cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008226:	f000 fb65 	bl	80088f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800822a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800822c:	4618      	mov	r0, r3
 800822e:	3728      	adds	r7, #40	; 0x28
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	e000ed04 	and	lr, r0, r4, lsl #26

08008238 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b08a      	sub	sp, #40	; 0x28
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008242:	2300      	movs	r3, #0
 8008244:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800824a:	2300      	movs	r3, #0
 800824c:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800824e:	f001 f89b 	bl	8009388 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008256:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d024      	beq.n	80082a8 <xQueueSemaphoreTake+0x70>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	1e5a      	subs	r2, r3, #1
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d104      	bne.n	8008278 <xQueueSemaphoreTake+0x40>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800826e:	f000 ff89 	bl	8009184 <pvTaskIncrementMutexHeldCount>
 8008272:	4602      	mov	r2, r0
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00f      	beq.n	80082a0 <xQueueSemaphoreTake+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	3310      	adds	r3, #16
 8008284:	4618      	mov	r0, r3
 8008286:	f000 fced 	bl	8008c64 <xTaskRemoveFromEventList>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d007      	beq.n	80082a0 <xQueueSemaphoreTake+0x68>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008290:	4b4c      	ldr	r3, [pc, #304]	; (80083c4 <xQueueSemaphoreTake+0x18c>)
 8008292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008296:	601a      	str	r2, [r3, #0]
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082a0:	f001 f88a 	bl	80093b8 <vPortExitCritical>
				return pdPASS;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e089      	b.n	80083bc <xQueueSemaphoreTake+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d103      	bne.n	80082b6 <xQueueSemaphoreTake+0x7e>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80082ae:	f001 f883 	bl	80093b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082b2:	2300      	movs	r3, #0
 80082b4:	e082      	b.n	80083bc <xQueueSemaphoreTake+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d106      	bne.n	80082ca <xQueueSemaphoreTake+0x92>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082bc:	f107 030c 	add.w	r3, r7, #12
 80082c0:	4618      	mov	r0, r3
 80082c2:	f000 fd23 	bl	8008d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082c6:	2301      	movs	r3, #1
 80082c8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082ca:	f001 f875 	bl	80093b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082ce:	f000 fb03 	bl	80088d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082d2:	f001 f859 	bl	8009388 <vPortEnterCritical>
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082dc:	b25b      	sxtb	r3, r3
 80082de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082e2:	d103      	bne.n	80082ec <xQueueSemaphoreTake+0xb4>
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082f2:	b25b      	sxtb	r3, r3
 80082f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082f8:	d103      	bne.n	8008302 <xQueueSemaphoreTake+0xca>
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008302:	f001 f859 	bl	80093b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008306:	463a      	mov	r2, r7
 8008308:	f107 030c 	add.w	r3, r7, #12
 800830c:	4611      	mov	r1, r2
 800830e:	4618      	mov	r0, r3
 8008310:	f000 fd12 	bl	8008d38 <xTaskCheckForTimeOut>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d132      	bne.n	8008380 <xQueueSemaphoreTake+0x148>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800831a:	69f8      	ldr	r0, [r7, #28]
 800831c:	f000 f928 	bl	8008570 <prvIsQueueEmpty>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d026      	beq.n	8008374 <xQueueSemaphoreTake+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d109      	bne.n	8008342 <xQueueSemaphoreTake+0x10a>
					{
						taskENTER_CRITICAL();
 800832e:	f001 f82b 	bl	8009388 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	4618      	mov	r0, r3
 8008338:	f000 fdc8 	bl	8008ecc <xTaskPriorityInherit>
 800833c:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800833e:	f001 f83b 	bl	80093b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	3324      	adds	r3, #36	; 0x24
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	4611      	mov	r1, r2
 800834a:	4618      	mov	r0, r3
 800834c:	f000 fc74 	bl	8008c38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008350:	69f8      	ldr	r0, [r7, #28]
 8008352:	f000 f8bb 	bl	80084cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008356:	f000 facd 	bl	80088f4 <xTaskResumeAll>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	f47f af76 	bne.w	800824e <xQueueSemaphoreTake+0x16>
				{
					portYIELD_WITHIN_API();
 8008362:	4b18      	ldr	r3, [pc, #96]	; (80083c4 <xQueueSemaphoreTake+0x18c>)
 8008364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008368:	601a      	str	r2, [r3, #0]
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	e76c      	b.n	800824e <xQueueSemaphoreTake+0x16>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008374:	69f8      	ldr	r0, [r7, #28]
 8008376:	f000 f8a9 	bl	80084cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800837a:	f000 fabb 	bl	80088f4 <xTaskResumeAll>
 800837e:	e766      	b.n	800824e <xQueueSemaphoreTake+0x16>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008380:	69f8      	ldr	r0, [r7, #28]
 8008382:	f000 f8a3 	bl	80084cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008386:	f000 fab5 	bl	80088f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800838a:	69f8      	ldr	r0, [r7, #28]
 800838c:	f000 f8f0 	bl	8008570 <prvIsQueueEmpty>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	f43f af5b 	beq.w	800824e <xQueueSemaphoreTake+0x16>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00d      	beq.n	80083ba <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
 800839e:	f000 fff3 	bl	8009388 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80083a2:	69f8      	ldr	r0, [r7, #28]
 80083a4:	f000 f810 	bl	80083c8 <prvGetDisinheritPriorityAfterTimeout>
 80083a8:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	6979      	ldr	r1, [r7, #20]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 fe6f 	bl	8009094 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80083b6:	f000 ffff 	bl	80093b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3728      	adds	r7, #40	; 0x28
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	e000ed04 	and	lr, r0, r4, lsl #26

080083c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d006      	beq.n	80083e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f1c3 0305 	rsb	r3, r3, #5
 80083e2:	60fb      	str	r3, [r7, #12]
 80083e4:	e001      	b.n	80083ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80083e6:	2300      	movs	r3, #0
 80083e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80083ea:	68fb      	ldr	r3, [r7, #12]
	}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3714      	adds	r7, #20
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bc80      	pop	{r7}
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop

080083f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008404:	2300      	movs	r3, #0
 8008406:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10d      	bne.n	8008432 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d14d      	bne.n	80084ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	4618      	mov	r0, r3
 8008424:	f000 fdd2 	bl	8008fcc <xTaskPriorityDisinherit>
 8008428:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	609a      	str	r2, [r3, #8]
 8008430:	e043      	b.n	80084ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d119      	bne.n	800846c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6858      	ldr	r0, [r3, #4]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008440:	461a      	mov	r2, r3
 8008442:	68b9      	ldr	r1, [r7, #8]
 8008444:	f7f7 fe64 	bl	8000110 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008450:	441a      	add	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	429a      	cmp	r2, r3
 8008460:	d32b      	bcc.n	80084ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	605a      	str	r2, [r3, #4]
 800846a:	e026      	b.n	80084ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	68d8      	ldr	r0, [r3, #12]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008474:	461a      	mov	r2, r3
 8008476:	68b9      	ldr	r1, [r7, #8]
 8008478:	f7f7 fe4a 	bl	8000110 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	68da      	ldr	r2, [r3, #12]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008484:	425b      	negs	r3, r3
 8008486:	441a      	add	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	68da      	ldr	r2, [r3, #12]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	429a      	cmp	r2, r3
 8008496:	d207      	bcs.n	80084a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a0:	425b      	negs	r3, r3
 80084a2:	441a      	add	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d105      	bne.n	80084ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	3b01      	subs	r3, #1
 80084b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	1c5a      	adds	r2, r3, #1
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80084c2:	697b      	ldr	r3, [r7, #20]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3718      	adds	r7, #24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084d4:	f000 ff58 	bl	8009388 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084e0:	e011      	b.n	8008506 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d012      	beq.n	8008510 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3324      	adds	r3, #36	; 0x24
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fbb8 	bl	8008c64 <xTaskRemoveFromEventList>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d001      	beq.n	80084fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80084fa:	f000 fc63 	bl	8008dc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80084fe:	7bfb      	ldrb	r3, [r7, #15]
 8008500:	3b01      	subs	r3, #1
 8008502:	b2db      	uxtb	r3, r3
 8008504:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800850a:	2b00      	cmp	r3, #0
 800850c:	dce9      	bgt.n	80084e2 <prvUnlockQueue+0x16>
 800850e:	e000      	b.n	8008512 <prvUnlockQueue+0x46>
					break;
 8008510:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	22ff      	movs	r2, #255	; 0xff
 8008516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800851a:	f000 ff4d 	bl	80093b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800851e:	f000 ff33 	bl	8009388 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008528:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800852a:	e011      	b.n	8008550 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d012      	beq.n	800855a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	3310      	adds	r3, #16
 8008538:	4618      	mov	r0, r3
 800853a:	f000 fb93 	bl	8008c64 <xTaskRemoveFromEventList>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008544:	f000 fc3e 	bl	8008dc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008548:	7bbb      	ldrb	r3, [r7, #14]
 800854a:	3b01      	subs	r3, #1
 800854c:	b2db      	uxtb	r3, r3
 800854e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008550:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008554:	2b00      	cmp	r3, #0
 8008556:	dce9      	bgt.n	800852c <prvUnlockQueue+0x60>
 8008558:	e000      	b.n	800855c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800855a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	22ff      	movs	r2, #255	; 0xff
 8008560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008564:	f000 ff28 	bl	80093b8 <vPortExitCritical>
}
 8008568:	bf00      	nop
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008578:	f000 ff06 	bl	8009388 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008580:	2b00      	cmp	r3, #0
 8008582:	d102      	bne.n	800858a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008584:	2301      	movs	r3, #1
 8008586:	60fb      	str	r3, [r7, #12]
 8008588:	e001      	b.n	800858e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800858a:	2300      	movs	r3, #0
 800858c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800858e:	f000 ff13 	bl	80093b8 <vPortExitCritical>

	return xReturn;
 8008592:	68fb      	ldr	r3, [r7, #12]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085a4:	f000 fef0 	bl	8009388 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d102      	bne.n	80085ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80085b4:	2301      	movs	r3, #1
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	e001      	b.n	80085be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80085ba:	2300      	movs	r3, #0
 80085bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085be:	f000 fefb 	bl	80093b8 <vPortExitCritical>

	return xReturn;
 80085c2:	68fb      	ldr	r3, [r7, #12]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08c      	sub	sp, #48	; 0x30
 80085d0:	af04      	add	r7, sp, #16
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	603b      	str	r3, [r7, #0]
 80085d8:	4613      	mov	r3, r2
 80085da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80085dc:	88fb      	ldrh	r3, [r7, #6]
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	4618      	mov	r0, r3
 80085e2:	f000 ff63 	bl	80094ac <pvPortMalloc>
 80085e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00e      	beq.n	800860c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80085ee:	2054      	movs	r0, #84	; 0x54
 80085f0:	f000 ff5c 	bl	80094ac <pvPortMalloc>
 80085f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d003      	beq.n	8008604 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	631a      	str	r2, [r3, #48]	; 0x30
 8008602:	e005      	b.n	8008610 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008604:	6978      	ldr	r0, [r7, #20]
 8008606:	f000 ff97 	bl	8009538 <vPortFree>
 800860a:	e001      	b.n	8008610 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800860c:	2300      	movs	r3, #0
 800860e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d013      	beq.n	800863e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008616:	88fa      	ldrh	r2, [r7, #6]
 8008618:	2300      	movs	r3, #0
 800861a:	9303      	str	r3, [sp, #12]
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	9302      	str	r3, [sp, #8]
 8008620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008622:	9301      	str	r3, [sp, #4]
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	68b9      	ldr	r1, [r7, #8]
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f000 f80f 	bl	8008650 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008632:	69f8      	ldr	r0, [r7, #28]
 8008634:	f000 f88c 	bl	8008750 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008638:	2301      	movs	r3, #1
 800863a:	61bb      	str	r3, [r7, #24]
 800863c:	e002      	b.n	8008644 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800863e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008642:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008644:	69bb      	ldr	r3, [r7, #24]
	}
 8008646:	4618      	mov	r0, r3
 8008648:	3720      	adds	r7, #32
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop

08008650 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
 800865c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800865e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008660:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	461a      	mov	r2, r3
 8008668:	21a5      	movs	r1, #165	; 0xa5
 800866a:	f7f7 fdc7 	bl	80001fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800866e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008678:	3b01      	subs	r3, #1
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	4413      	add	r3, r2
 800867e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	f023 0307 	bic.w	r3, r3, #7
 8008686:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d01f      	beq.n	80086ce <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800868e:	2300      	movs	r3, #0
 8008690:	617b      	str	r3, [r7, #20]
 8008692:	e012      	b.n	80086ba <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	4413      	add	r3, r2
 800869a:	7819      	ldrb	r1, [r3, #0]
 800869c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	4413      	add	r3, r2
 80086a2:	3334      	adds	r3, #52	; 0x34
 80086a4:	460a      	mov	r2, r1
 80086a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	4413      	add	r3, r2
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d006      	beq.n	80086c2 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	3301      	adds	r3, #1
 80086b8:	617b      	str	r3, [r7, #20]
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	2b0f      	cmp	r3, #15
 80086be:	d9e9      	bls.n	8008694 <prvInitialiseNewTask+0x44>
 80086c0:	e000      	b.n	80086c4 <prvInitialiseNewTask+0x74>
			{
				break;
 80086c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80086c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086cc:	e003      	b.n	80086d6 <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80086ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	2b04      	cmp	r3, #4
 80086da:	d901      	bls.n	80086e0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80086dc:	2304      	movs	r3, #4
 80086de:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	6a3a      	ldr	r2, [r7, #32]
 80086e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e8:	6a3a      	ldr	r2, [r7, #32]
 80086ea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80086ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ee:	2200      	movs	r2, #0
 80086f0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f4:	3304      	adds	r3, #4
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7ff fb88 	bl	8007e0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fe:	3318      	adds	r3, #24
 8008700:	4618      	mov	r0, r3
 8008702:	f7ff fb83 	bl	8007e0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800870a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	f1c3 0205 	rsb	r2, r3, #5
 8008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008714:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800871a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	2200      	movs	r2, #0
 8008720:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008724:	2200      	movs	r2, #0
 8008726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	68f9      	ldr	r1, [r7, #12]
 800872e:	6938      	ldr	r0, [r7, #16]
 8008730:	f000 fda2 	bl	8009278 <pxPortInitialiseStack>
 8008734:	4602      	mov	r2, r0
 8008736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008738:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008746:	bf00      	nop
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop

08008750 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008758:	f000 fe16 	bl	8009388 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800875c:	4b2a      	ldr	r3, [pc, #168]	; (8008808 <prvAddNewTaskToReadyList+0xb8>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3301      	adds	r3, #1
 8008762:	4a29      	ldr	r2, [pc, #164]	; (8008808 <prvAddNewTaskToReadyList+0xb8>)
 8008764:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008766:	4b29      	ldr	r3, [pc, #164]	; (800880c <prvAddNewTaskToReadyList+0xbc>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d109      	bne.n	8008782 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800876e:	4a27      	ldr	r2, [pc, #156]	; (800880c <prvAddNewTaskToReadyList+0xbc>)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008774:	4b24      	ldr	r3, [pc, #144]	; (8008808 <prvAddNewTaskToReadyList+0xb8>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d110      	bne.n	800879e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800877c:	f000 fb46 	bl	8008e0c <prvInitialiseTaskLists>
 8008780:	e00d      	b.n	800879e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008782:	4b23      	ldr	r3, [pc, #140]	; (8008810 <prvAddNewTaskToReadyList+0xc0>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d109      	bne.n	800879e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800878a:	4b20      	ldr	r3, [pc, #128]	; (800880c <prvAddNewTaskToReadyList+0xbc>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008794:	429a      	cmp	r2, r3
 8008796:	d802      	bhi.n	800879e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008798:	4a1c      	ldr	r2, [pc, #112]	; (800880c <prvAddNewTaskToReadyList+0xbc>)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800879e:	4b1d      	ldr	r3, [pc, #116]	; (8008814 <prvAddNewTaskToReadyList+0xc4>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3301      	adds	r3, #1
 80087a4:	4a1b      	ldr	r2, [pc, #108]	; (8008814 <prvAddNewTaskToReadyList+0xc4>)
 80087a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ac:	2201      	movs	r2, #1
 80087ae:	409a      	lsls	r2, r3
 80087b0:	4b19      	ldr	r3, [pc, #100]	; (8008818 <prvAddNewTaskToReadyList+0xc8>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	4a18      	ldr	r2, [pc, #96]	; (8008818 <prvAddNewTaskToReadyList+0xc8>)
 80087b8:	6013      	str	r3, [r2, #0]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087be:	4613      	mov	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4a15      	ldr	r2, [pc, #84]	; (800881c <prvAddNewTaskToReadyList+0xcc>)
 80087c8:	441a      	add	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	3304      	adds	r3, #4
 80087ce:	4619      	mov	r1, r3
 80087d0:	4610      	mov	r0, r2
 80087d2:	f7ff fb27 	bl	8007e24 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087d6:	f000 fdef 	bl	80093b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087da:	4b0d      	ldr	r3, [pc, #52]	; (8008810 <prvAddNewTaskToReadyList+0xc0>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00e      	beq.n	8008800 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087e2:	4b0a      	ldr	r3, [pc, #40]	; (800880c <prvAddNewTaskToReadyList+0xbc>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d207      	bcs.n	8008800 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087f0:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <prvAddNewTaskToReadyList+0xd0>)
 80087f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	20000210 	andcs	r0, r0, r0, lsl r2
 800880c:	20000150 	andcs	r0, r0, r0, asr r1
 8008810:	2000021c 	andcs	r0, r0, ip, lsl r2
 8008814:	2000022c 	andcs	r0, r0, ip, lsr #4
 8008818:	20000218 	andcs	r0, r0, r8, lsl r2
 800881c:	20000154 	andcs	r0, r0, r4, asr r1
 8008820:	e000ed04 	and	lr, r0, r4, lsl #26

08008824 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800882c:	2300      	movs	r3, #0
 800882e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d008      	beq.n	8008848 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 8008836:	f000 f84f 	bl	80088d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800883a:	2100      	movs	r1, #0
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fcb5 	bl	80091ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008842:	f000 f857 	bl	80088f4 <xTaskResumeAll>
 8008846:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d107      	bne.n	800885e <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 800884e:	4b06      	ldr	r3, [pc, #24]	; (8008868 <vTaskDelay+0x44>)
 8008850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008854:	601a      	str	r2, [r3, #0]
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800885e:	bf00      	nop
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	e000ed04 	and	lr, r0, r4, lsl #26

0800886c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008872:	4b13      	ldr	r3, [pc, #76]	; (80088c0 <vTaskStartScheduler+0x54>)
 8008874:	9301      	str	r3, [sp, #4]
 8008876:	2300      	movs	r3, #0
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	2300      	movs	r3, #0
 800887c:	2280      	movs	r2, #128	; 0x80
 800887e:	4911      	ldr	r1, [pc, #68]	; (80088c4 <vTaskStartScheduler+0x58>)
 8008880:	4811      	ldr	r0, [pc, #68]	; (80088c8 <vTaskStartScheduler+0x5c>)
 8008882:	f7ff fea3 	bl	80085cc <xTaskCreate>
 8008886:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d114      	bne.n	80088b8 <vTaskStartScheduler+0x4c>
 800888e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088a0:	4b0a      	ldr	r3, [pc, #40]	; (80088cc <vTaskStartScheduler+0x60>)
 80088a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088a8:	4b09      	ldr	r3, [pc, #36]	; (80088d0 <vTaskStartScheduler+0x64>)
 80088aa:	2201      	movs	r2, #1
 80088ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088ae:	4b09      	ldr	r3, [pc, #36]	; (80088d4 <vTaskStartScheduler+0x68>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088b4:	f000 fd48 	bl	8009348 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088b8:	bf00      	nop
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	20000234 	andcs	r0, r0, r4, lsr r2
 80088c4:	080097e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, ip, pc}
 80088c8:	08008ddd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sl, fp, pc}
 80088cc:	20000230 	andcs	r0, r0, r0, lsr r2
 80088d0:	2000021c 	andcs	r0, r0, ip, lsl r2
 80088d4:	20000214 	andcs	r0, r0, r4, lsl r2

080088d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088d8:	b480      	push	{r7}
 80088da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80088dc:	4b04      	ldr	r3, [pc, #16]	; (80088f0 <vTaskSuspendAll+0x18>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	3301      	adds	r3, #1
 80088e2:	4a03      	ldr	r2, [pc, #12]	; (80088f0 <vTaskSuspendAll+0x18>)
 80088e4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80088e6:	bf00      	nop
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bc80      	pop	{r7}
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	20000238 	andcs	r0, r0, r8, lsr r2

080088f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088fa:	2300      	movs	r3, #0
 80088fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088fe:	2300      	movs	r3, #0
 8008900:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008902:	f000 fd41 	bl	8009388 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008906:	4b39      	ldr	r3, [pc, #228]	; (80089ec <xTaskResumeAll+0xf8>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3b01      	subs	r3, #1
 800890c:	4a37      	ldr	r2, [pc, #220]	; (80089ec <xTaskResumeAll+0xf8>)
 800890e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008910:	4b36      	ldr	r3, [pc, #216]	; (80089ec <xTaskResumeAll+0xf8>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d161      	bne.n	80089dc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008918:	4b35      	ldr	r3, [pc, #212]	; (80089f0 <xTaskResumeAll+0xfc>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d05d      	beq.n	80089dc <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008920:	e02e      	b.n	8008980 <xTaskResumeAll+0x8c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008922:	4b34      	ldr	r3, [pc, #208]	; (80089f4 <xTaskResumeAll+0x100>)
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3318      	adds	r3, #24
 800892e:	4618      	mov	r0, r3
 8008930:	f7ff fad4 	bl	8007edc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3304      	adds	r3, #4
 8008938:	4618      	mov	r0, r3
 800893a:	f7ff facf 	bl	8007edc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008942:	2201      	movs	r2, #1
 8008944:	409a      	lsls	r2, r3
 8008946:	4b2c      	ldr	r3, [pc, #176]	; (80089f8 <xTaskResumeAll+0x104>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4313      	orrs	r3, r2
 800894c:	4a2a      	ldr	r2, [pc, #168]	; (80089f8 <xTaskResumeAll+0x104>)
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008954:	4613      	mov	r3, r2
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	4413      	add	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4a27      	ldr	r2, [pc, #156]	; (80089fc <xTaskResumeAll+0x108>)
 800895e:	441a      	add	r2, r3
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	3304      	adds	r3, #4
 8008964:	4619      	mov	r1, r3
 8008966:	4610      	mov	r0, r2
 8008968:	f7ff fa5c 	bl	8007e24 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008970:	4b23      	ldr	r3, [pc, #140]	; (8008a00 <xTaskResumeAll+0x10c>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008976:	429a      	cmp	r2, r3
 8008978:	d302      	bcc.n	8008980 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
 800897a:	4b22      	ldr	r3, [pc, #136]	; (8008a04 <xTaskResumeAll+0x110>)
 800897c:	2201      	movs	r2, #1
 800897e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008980:	4b1c      	ldr	r3, [pc, #112]	; (80089f4 <xTaskResumeAll+0x100>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1cc      	bne.n	8008922 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800898e:	f000 fa7d 	bl	8008e8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008992:	4b1d      	ldr	r3, [pc, #116]	; (8008a08 <xTaskResumeAll+0x114>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d010      	beq.n	80089c0 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800899e:	f000 f837 	bl	8008a10 <xTaskIncrementTick>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d002      	beq.n	80089ae <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
 80089a8:	4b16      	ldr	r3, [pc, #88]	; (8008a04 <xTaskResumeAll+0x110>)
 80089aa:	2201      	movs	r2, #1
 80089ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	3b01      	subs	r3, #1
 80089b2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1f1      	bne.n	800899e <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
 80089ba:	4b13      	ldr	r3, [pc, #76]	; (8008a08 <xTaskResumeAll+0x114>)
 80089bc:	2200      	movs	r2, #0
 80089be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089c0:	4b10      	ldr	r3, [pc, #64]	; (8008a04 <xTaskResumeAll+0x110>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d009      	beq.n	80089dc <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089c8:	2301      	movs	r3, #1
 80089ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089cc:	4b0f      	ldr	r3, [pc, #60]	; (8008a0c <xTaskResumeAll+0x118>)
 80089ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089dc:	f000 fcec 	bl	80093b8 <vPortExitCritical>

	return xAlreadyYielded;
 80089e0:	68bb      	ldr	r3, [r7, #8]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	20000238 	andcs	r0, r0, r8, lsr r2
 80089f0:	20000210 	andcs	r0, r0, r0, lsl r2
 80089f4:	200001e8 	andcs	r0, r0, r8, ror #3
 80089f8:	20000218 	andcs	r0, r0, r8, lsl r2
 80089fc:	20000154 	andcs	r0, r0, r4, asr r1
 8008a00:	20000150 	andcs	r0, r0, r0, asr r1
 8008a04:	20000224 	andcs	r0, r0, r4, lsr #4
 8008a08:	20000220 	andcs	r0, r0, r0, lsr #4
 8008a0c:	e000ed04 	and	lr, r0, r4, lsl #26

08008a10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a16:	2300      	movs	r3, #0
 8008a18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a1a:	4b46      	ldr	r3, [pc, #280]	; (8008b34 <xTaskIncrementTick+0x124>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d177      	bne.n	8008b12 <xTaskIncrementTick+0x102>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a22:	4b45      	ldr	r3, [pc, #276]	; (8008b38 <xTaskIncrementTick+0x128>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	3301      	adds	r3, #1
 8008a28:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a2a:	4a43      	ldr	r2, [pc, #268]	; (8008b38 <xTaskIncrementTick+0x128>)
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d110      	bne.n	8008a58 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a36:	4b41      	ldr	r3, [pc, #260]	; (8008b3c <xTaskIncrementTick+0x12c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	4b40      	ldr	r3, [pc, #256]	; (8008b40 <xTaskIncrementTick+0x130>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a3e      	ldr	r2, [pc, #248]	; (8008b3c <xTaskIncrementTick+0x12c>)
 8008a42:	6013      	str	r3, [r2, #0]
 8008a44:	4a3e      	ldr	r2, [pc, #248]	; (8008b40 <xTaskIncrementTick+0x130>)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6013      	str	r3, [r2, #0]
 8008a4a:	4b3e      	ldr	r3, [pc, #248]	; (8008b44 <xTaskIncrementTick+0x134>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	4a3c      	ldr	r2, [pc, #240]	; (8008b44 <xTaskIncrementTick+0x134>)
 8008a52:	6013      	str	r3, [r2, #0]
 8008a54:	f000 fa1a 	bl	8008e8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a58:	4b3b      	ldr	r3, [pc, #236]	; (8008b48 <xTaskIncrementTick+0x138>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d348      	bcc.n	8008af4 <xTaskIncrementTick+0xe4>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a62:	4b36      	ldr	r3, [pc, #216]	; (8008b3c <xTaskIncrementTick+0x12c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d104      	bne.n	8008a76 <xTaskIncrementTick+0x66>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a6c:	4b36      	ldr	r3, [pc, #216]	; (8008b48 <xTaskIncrementTick+0x138>)
 8008a6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a72:	601a      	str	r2, [r3, #0]
					break;
 8008a74:	e03e      	b.n	8008af4 <xTaskIncrementTick+0xe4>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a76:	4b31      	ldr	r3, [pc, #196]	; (8008b3c <xTaskIncrementTick+0x12c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d203      	bcs.n	8008a96 <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a8e:	4a2e      	ldr	r2, [pc, #184]	; (8008b48 <xTaskIncrementTick+0x138>)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a94:	e02e      	b.n	8008af4 <xTaskIncrementTick+0xe4>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	3304      	adds	r3, #4
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7ff fa1e 	bl	8007edc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d004      	beq.n	8008ab2 <xTaskIncrementTick+0xa2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	3318      	adds	r3, #24
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7ff fa15 	bl	8007edc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	409a      	lsls	r2, r3
 8008aba:	4b24      	ldr	r3, [pc, #144]	; (8008b4c <xTaskIncrementTick+0x13c>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	4a22      	ldr	r2, [pc, #136]	; (8008b4c <xTaskIncrementTick+0x13c>)
 8008ac2:	6013      	str	r3, [r2, #0]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac8:	4613      	mov	r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4413      	add	r3, r2
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	4a1f      	ldr	r2, [pc, #124]	; (8008b50 <xTaskIncrementTick+0x140>)
 8008ad2:	441a      	add	r2, r3
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	3304      	adds	r3, #4
 8008ad8:	4619      	mov	r1, r3
 8008ada:	4610      	mov	r0, r2
 8008adc:	f7ff f9a2 	bl	8007e24 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae4:	4b1b      	ldr	r3, [pc, #108]	; (8008b54 <xTaskIncrementTick+0x144>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d3b9      	bcc.n	8008a62 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8008aee:	2301      	movs	r3, #1
 8008af0:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 8008af2:	e7b6      	b.n	8008a62 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008af4:	4b17      	ldr	r3, [pc, #92]	; (8008b54 <xTaskIncrementTick+0x144>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afa:	4915      	ldr	r1, [pc, #84]	; (8008b50 <xTaskIncrementTick+0x140>)
 8008afc:	4613      	mov	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4413      	add	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	440b      	add	r3, r1
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d907      	bls.n	8008b1c <xTaskIncrementTick+0x10c>
			{
				xSwitchRequired = pdTRUE;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	617b      	str	r3, [r7, #20]
 8008b10:	e004      	b.n	8008b1c <xTaskIncrementTick+0x10c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008b12:	4b11      	ldr	r3, [pc, #68]	; (8008b58 <xTaskIncrementTick+0x148>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	3301      	adds	r3, #1
 8008b18:	4a0f      	ldr	r2, [pc, #60]	; (8008b58 <xTaskIncrementTick+0x148>)
 8008b1a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008b1c:	4b0f      	ldr	r3, [pc, #60]	; (8008b5c <xTaskIncrementTick+0x14c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d001      	beq.n	8008b28 <xTaskIncrementTick+0x118>
		{
			xSwitchRequired = pdTRUE;
 8008b24:	2301      	movs	r3, #1
 8008b26:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008b28:	697b      	ldr	r3, [r7, #20]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3718      	adds	r7, #24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	20000238 	andcs	r0, r0, r8, lsr r2
 8008b38:	20000214 	andcs	r0, r0, r4, lsl r2
 8008b3c:	200001e0 	andcs	r0, r0, r0, ror #3
 8008b40:	200001e4 	andcs	r0, r0, r4, ror #3
 8008b44:	20000228 	andcs	r0, r0, r8, lsr #4
 8008b48:	20000230 	andcs	r0, r0, r0, lsr r2
 8008b4c:	20000218 	andcs	r0, r0, r8, lsl r2
 8008b50:	20000154 	andcs	r0, r0, r4, asr r1
 8008b54:	20000150 	andcs	r0, r0, r0, asr r1
 8008b58:	20000220 	andcs	r0, r0, r0, lsr #4
 8008b5c:	20000224 	andcs	r0, r0, r4, lsr #4

08008b60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b66:	4b2f      	ldr	r3, [pc, #188]	; (8008c24 <vTaskSwitchContext+0xc4>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d003      	beq.n	8008b76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b6e:	4b2e      	ldr	r3, [pc, #184]	; (8008c28 <vTaskSwitchContext+0xc8>)
 8008b70:	2201      	movs	r2, #1
 8008b72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b74:	e051      	b.n	8008c1a <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 8008b76:	4b2c      	ldr	r3, [pc, #176]	; (8008c28 <vTaskSwitchContext+0xc8>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008b7c:	4b2b      	ldr	r3, [pc, #172]	; (8008c2c <vTaskSwitchContext+0xcc>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b82:	617b      	str	r3, [r7, #20]
 8008b84:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8008b88:	613b      	str	r3, [r7, #16]
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d111      	bne.n	8008bb8 <vTaskSwitchContext+0x58>
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	3304      	adds	r3, #4
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d10b      	bne.n	8008bb8 <vTaskSwitchContext+0x58>
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	3308      	adds	r3, #8
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d105      	bne.n	8008bb8 <vTaskSwitchContext+0x58>
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	330c      	adds	r3, #12
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d008      	beq.n	8008bca <vTaskSwitchContext+0x6a>
 8008bb8:	4b1c      	ldr	r3, [pc, #112]	; (8008c2c <vTaskSwitchContext+0xcc>)
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	4b1b      	ldr	r3, [pc, #108]	; (8008c2c <vTaskSwitchContext+0xcc>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3334      	adds	r3, #52	; 0x34
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	f7fe fd09 	bl	80075dc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bca:	4b19      	ldr	r3, [pc, #100]	; (8008c30 <vTaskSwitchContext+0xd0>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	fab3 f383 	clz	r3, r3
 8008bd6:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8008bd8:	78fb      	ldrb	r3, [r7, #3]
 8008bda:	f1c3 031f 	rsb	r3, r3, #31
 8008bde:	60fb      	str	r3, [r7, #12]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	4613      	mov	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4413      	add	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4a12      	ldr	r2, [pc, #72]	; (8008c34 <vTaskSwitchContext+0xd4>)
 8008bec:	4413      	add	r3, r2
 8008bee:	60bb      	str	r3, [r7, #8]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	605a      	str	r2, [r3, #4]
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	685a      	ldr	r2, [r3, #4]
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	3308      	adds	r3, #8
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d104      	bne.n	8008c10 <vTaskSwitchContext+0xb0>
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	605a      	str	r2, [r3, #4]
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	4a05      	ldr	r2, [pc, #20]	; (8008c2c <vTaskSwitchContext+0xcc>)
 8008c18:	6013      	str	r3, [r2, #0]
}
 8008c1a:	bf00      	nop
 8008c1c:	3718      	adds	r7, #24
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	20000238 	andcs	r0, r0, r8, lsr r2
 8008c28:	20000224 	andcs	r0, r0, r4, lsr #4
 8008c2c:	20000150 	andcs	r0, r0, r0, asr r1
 8008c30:	20000218 	andcs	r0, r0, r8, lsl r2
 8008c34:	20000154 	andcs	r0, r0, r4, asr r1

08008c38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c42:	4b07      	ldr	r3, [pc, #28]	; (8008c60 <vTaskPlaceOnEventList+0x28>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	3318      	adds	r3, #24
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7ff f90e 	bl	8007e6c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c50:	2101      	movs	r1, #1
 8008c52:	6838      	ldr	r0, [r7, #0]
 8008c54:	f000 faaa 	bl	80091ac <prvAddCurrentTaskToDelayedList>
}
 8008c58:	bf00      	nop
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	20000150 	andcs	r0, r0, r0, asr r1

08008c64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	3318      	adds	r3, #24
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7ff f92f 	bl	8007edc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c7e:	4b1d      	ldr	r3, [pc, #116]	; (8008cf4 <xTaskRemoveFromEventList+0x90>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d11c      	bne.n	8008cc0 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	3304      	adds	r3, #4
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7ff f926 	bl	8007edc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c94:	2201      	movs	r2, #1
 8008c96:	409a      	lsls	r2, r3
 8008c98:	4b17      	ldr	r3, [pc, #92]	; (8008cf8 <xTaskRemoveFromEventList+0x94>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	4a16      	ldr	r2, [pc, #88]	; (8008cf8 <xTaskRemoveFromEventList+0x94>)
 8008ca0:	6013      	str	r3, [r2, #0]
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4413      	add	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4a13      	ldr	r2, [pc, #76]	; (8008cfc <xTaskRemoveFromEventList+0x98>)
 8008cb0:	441a      	add	r2, r3
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	4610      	mov	r0, r2
 8008cba:	f7ff f8b3 	bl	8007e24 <vListInsertEnd>
 8008cbe:	e005      	b.n	8008ccc <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	3318      	adds	r3, #24
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	480e      	ldr	r0, [pc, #56]	; (8008d00 <xTaskRemoveFromEventList+0x9c>)
 8008cc8:	f7ff f8ac 	bl	8007e24 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd0:	4b0c      	ldr	r3, [pc, #48]	; (8008d04 <xTaskRemoveFromEventList+0xa0>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d905      	bls.n	8008ce6 <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008cde:	4b0a      	ldr	r3, [pc, #40]	; (8008d08 <xTaskRemoveFromEventList+0xa4>)
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	e001      	b.n	8008cea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8008cea:	68fb      	ldr	r3, [r7, #12]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	20000238 	andcs	r0, r0, r8, lsr r2
 8008cf8:	20000218 	andcs	r0, r0, r8, lsl r2
 8008cfc:	20000154 	andcs	r0, r0, r4, asr r1
 8008d00:	200001e8 	andcs	r0, r0, r8, ror #3
 8008d04:	20000150 	andcs	r0, r0, r0, asr r1
 8008d08:	20000224 	andcs	r0, r0, r4, lsr #4

08008d0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d14:	4b06      	ldr	r3, [pc, #24]	; (8008d30 <vTaskInternalSetTimeOutState+0x24>)
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d1c:	4b05      	ldr	r3, [pc, #20]	; (8008d34 <vTaskInternalSetTimeOutState+0x28>)
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	605a      	str	r2, [r3, #4]
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bc80      	pop	{r7}
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	20000228 	andcs	r0, r0, r8, lsr #4
 8008d34:	20000214 	andcs	r0, r0, r4, lsl r2

08008d38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8008d42:	f000 fb21 	bl	8009388 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d46:	4b1d      	ldr	r3, [pc, #116]	; (8008dbc <xTaskCheckForTimeOut+0x84>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	1ad3      	subs	r3, r2, r3
 8008d54:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d5e:	d102      	bne.n	8008d66 <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d60:	2300      	movs	r3, #0
 8008d62:	617b      	str	r3, [r7, #20]
 8008d64:	e023      	b.n	8008dae <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	4b15      	ldr	r3, [pc, #84]	; (8008dc0 <xTaskCheckForTimeOut+0x88>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d007      	beq.n	8008d82 <xTaskCheckForTimeOut+0x4a>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	685a      	ldr	r2, [r3, #4]
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d802      	bhi.n	8008d82 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	617b      	str	r3, [r7, #20]
 8008d80:	e015      	b.n	8008dae <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d90b      	bls.n	8008da4 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	1ad2      	subs	r2, r2, r3
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7ff ffb7 	bl	8008d0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	617b      	str	r3, [r7, #20]
 8008da2:	e004      	b.n	8008dae <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	2200      	movs	r2, #0
 8008da8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008daa:	2301      	movs	r3, #1
 8008dac:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8008dae:	f000 fb03 	bl	80093b8 <vPortExitCritical>

	return xReturn;
 8008db2:	697b      	ldr	r3, [r7, #20]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3718      	adds	r7, #24
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	20000214 	andcs	r0, r0, r4, lsl r2
 8008dc0:	20000228 	andcs	r0, r0, r8, lsr #4

08008dc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008dc8:	4b03      	ldr	r3, [pc, #12]	; (8008dd8 <vTaskMissedYield+0x14>)
 8008dca:	2201      	movs	r2, #1
 8008dcc:	601a      	str	r2, [r3, #0]
}
 8008dce:	bf00      	nop
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bc80      	pop	{r7}
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	20000224 	andcs	r0, r0, r4, lsr #4

08008ddc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008de4:	f000 f84c 	bl	8008e80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008de8:	4b06      	ldr	r3, [pc, #24]	; (8008e04 <prvIdleTask+0x28>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d9f9      	bls.n	8008de4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008df0:	4b05      	ldr	r3, [pc, #20]	; (8008e08 <prvIdleTask+0x2c>)
 8008df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8008e00:	e7f0      	b.n	8008de4 <prvIdleTask+0x8>
 8008e02:	bf00      	nop
 8008e04:	20000154 	andcs	r0, r0, r4, asr r1
 8008e08:	e000ed04 	and	lr, r0, r4, lsl #26

08008e0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e12:	2300      	movs	r3, #0
 8008e14:	607b      	str	r3, [r7, #4]
 8008e16:	e00c      	b.n	8008e32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4413      	add	r3, r2
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	4a10      	ldr	r2, [pc, #64]	; (8008e64 <prvInitialiseTaskLists+0x58>)
 8008e24:	4413      	add	r3, r2
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fe ffd0 	bl	8007dcc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	607b      	str	r3, [r7, #4]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b04      	cmp	r3, #4
 8008e36:	d9ef      	bls.n	8008e18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e38:	480b      	ldr	r0, [pc, #44]	; (8008e68 <prvInitialiseTaskLists+0x5c>)
 8008e3a:	f7fe ffc7 	bl	8007dcc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e3e:	480b      	ldr	r0, [pc, #44]	; (8008e6c <prvInitialiseTaskLists+0x60>)
 8008e40:	f7fe ffc4 	bl	8007dcc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e44:	480a      	ldr	r0, [pc, #40]	; (8008e70 <prvInitialiseTaskLists+0x64>)
 8008e46:	f7fe ffc1 	bl	8007dcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e4a:	480a      	ldr	r0, [pc, #40]	; (8008e74 <prvInitialiseTaskLists+0x68>)
 8008e4c:	f7fe ffbe 	bl	8007dcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e50:	4b09      	ldr	r3, [pc, #36]	; (8008e78 <prvInitialiseTaskLists+0x6c>)
 8008e52:	4a05      	ldr	r2, [pc, #20]	; (8008e68 <prvInitialiseTaskLists+0x5c>)
 8008e54:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e56:	4b09      	ldr	r3, [pc, #36]	; (8008e7c <prvInitialiseTaskLists+0x70>)
 8008e58:	4a04      	ldr	r2, [pc, #16]	; (8008e6c <prvInitialiseTaskLists+0x60>)
 8008e5a:	601a      	str	r2, [r3, #0]
}
 8008e5c:	bf00      	nop
 8008e5e:	3708      	adds	r7, #8
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	20000154 	andcs	r0, r0, r4, asr r1
 8008e68:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
 8008e6c:	200001cc 	andcs	r0, r0, ip, asr #3
 8008e70:	200001e8 	andcs	r0, r0, r8, ror #3
 8008e74:	200001fc 	strdcs	r0, [r0], -ip
 8008e78:	200001e0 	andcs	r0, r0, r0, ror #3
 8008e7c:	200001e4 	andcs	r0, r0, r4, ror #3

08008e80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e80:	b480      	push	{r7}
 8008e82:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e84:	bf00      	nop
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bc80      	pop	{r7}
 8008e8a:	4770      	bx	lr

08008e8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e92:	4b0c      	ldr	r3, [pc, #48]	; (8008ec4 <prvResetNextTaskUnblockTime+0x38>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d104      	bne.n	8008ea6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e9c:	4b0a      	ldr	r3, [pc, #40]	; (8008ec8 <prvResetNextTaskUnblockTime+0x3c>)
 8008e9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ea2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ea4:	e008      	b.n	8008eb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ea6:	4b07      	ldr	r3, [pc, #28]	; (8008ec4 <prvResetNextTaskUnblockTime+0x38>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	4a04      	ldr	r2, [pc, #16]	; (8008ec8 <prvResetNextTaskUnblockTime+0x3c>)
 8008eb6:	6013      	str	r3, [r2, #0]
}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bc80      	pop	{r7}
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	200001e0 	andcs	r0, r0, r0, ror #3
 8008ec8:	20000230 	andcs	r0, r0, r0, lsr r2

08008ecc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d069      	beq.n	8008fb6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee6:	4b36      	ldr	r3, [pc, #216]	; (8008fc0 <xTaskPriorityInherit+0xf4>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d259      	bcs.n	8008fa4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	db06      	blt.n	8008f06 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ef8:	4b31      	ldr	r3, [pc, #196]	; (8008fc0 <xTaskPriorityInherit+0xf4>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efe:	f1c3 0205 	rsb	r2, r3, #5
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	6959      	ldr	r1, [r3, #20]
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0e:	4613      	mov	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4a2b      	ldr	r2, [pc, #172]	; (8008fc4 <xTaskPriorityInherit+0xf8>)
 8008f18:	4413      	add	r3, r2
 8008f1a:	4299      	cmp	r1, r3
 8008f1c:	d13a      	bne.n	8008f94 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	3304      	adds	r3, #4
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7fe ffda 	bl	8007edc <uxListRemove>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d115      	bne.n	8008f5a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f32:	4924      	ldr	r1, [pc, #144]	; (8008fc4 <xTaskPriorityInherit+0xf8>)
 8008f34:	4613      	mov	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	4413      	add	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	440b      	add	r3, r1
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d10a      	bne.n	8008f5a <xTaskPriorityInherit+0x8e>
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f48:	2201      	movs	r2, #1
 8008f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4e:	43da      	mvns	r2, r3
 8008f50:	4b1d      	ldr	r3, [pc, #116]	; (8008fc8 <xTaskPriorityInherit+0xfc>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4013      	ands	r3, r2
 8008f56:	4a1c      	ldr	r2, [pc, #112]	; (8008fc8 <xTaskPriorityInherit+0xfc>)
 8008f58:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008f5a:	4b19      	ldr	r3, [pc, #100]	; (8008fc0 <xTaskPriorityInherit+0xf4>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f68:	2201      	movs	r2, #1
 8008f6a:	409a      	lsls	r2, r3
 8008f6c:	4b16      	ldr	r3, [pc, #88]	; (8008fc8 <xTaskPriorityInherit+0xfc>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	4a15      	ldr	r2, [pc, #84]	; (8008fc8 <xTaskPriorityInherit+0xfc>)
 8008f74:	6013      	str	r3, [r2, #0]
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4413      	add	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4a10      	ldr	r2, [pc, #64]	; (8008fc4 <xTaskPriorityInherit+0xf8>)
 8008f84:	441a      	add	r2, r3
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	3304      	adds	r3, #4
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	4610      	mov	r0, r2
 8008f8e:	f7fe ff49 	bl	8007e24 <vListInsertEnd>
 8008f92:	e004      	b.n	8008f9e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008f94:	4b0a      	ldr	r3, [pc, #40]	; (8008fc0 <xTaskPriorityInherit+0xf4>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	60fb      	str	r3, [r7, #12]
 8008fa2:	e008      	b.n	8008fb6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fa8:	4b05      	ldr	r3, [pc, #20]	; (8008fc0 <xTaskPriorityInherit+0xf4>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d201      	bcs.n	8008fb6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
	}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	20000150 	andcs	r0, r0, r0, asr r1
 8008fc4:	20000154 	andcs	r0, r0, r4, asr r1
 8008fc8:	20000218 	andcs	r0, r0, r8, lsl r2

08008fcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d04f      	beq.n	8009082 <xTaskPriorityDisinherit+0xb6>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fe6:	1e5a      	subs	r2, r3, #1
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d044      	beq.n	8009082 <xTaskPriorityDisinherit+0xb6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d140      	bne.n	8009082 <xTaskPriorityDisinherit+0xb6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	3304      	adds	r3, #4
 8009004:	4618      	mov	r0, r3
 8009006:	f7fe ff69 	bl	8007edc <uxListRemove>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d115      	bne.n	800903c <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009014:	491d      	ldr	r1, [pc, #116]	; (800908c <xTaskPriorityDisinherit+0xc0>)
 8009016:	4613      	mov	r3, r2
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	4413      	add	r3, r2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	440b      	add	r3, r1
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10a      	bne.n	800903c <xTaskPriorityDisinherit+0x70>
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902a:	2201      	movs	r2, #1
 800902c:	fa02 f303 	lsl.w	r3, r2, r3
 8009030:	43da      	mvns	r2, r3
 8009032:	4b17      	ldr	r3, [pc, #92]	; (8009090 <xTaskPriorityDisinherit+0xc4>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4013      	ands	r3, r2
 8009038:	4a15      	ldr	r2, [pc, #84]	; (8009090 <xTaskPriorityDisinherit+0xc4>)
 800903a:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009048:	f1c3 0205 	rsb	r2, r3, #5
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009054:	2201      	movs	r2, #1
 8009056:	409a      	lsls	r2, r3
 8009058:	4b0d      	ldr	r3, [pc, #52]	; (8009090 <xTaskPriorityDisinherit+0xc4>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4313      	orrs	r3, r2
 800905e:	4a0c      	ldr	r2, [pc, #48]	; (8009090 <xTaskPriorityDisinherit+0xc4>)
 8009060:	6013      	str	r3, [r2, #0]
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009066:	4613      	mov	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4a07      	ldr	r2, [pc, #28]	; (800908c <xTaskPriorityDisinherit+0xc0>)
 8009070:	441a      	add	r2, r3
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	3304      	adds	r3, #4
 8009076:	4619      	mov	r1, r3
 8009078:	4610      	mov	r0, r2
 800907a:	f7fe fed3 	bl	8007e24 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800907e:	2301      	movs	r3, #1
 8009080:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009082:	68fb      	ldr	r3, [r7, #12]
	}
 8009084:	4618      	mov	r0, r3
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	20000154 	andcs	r0, r0, r4, asr r1
 8009090:	20000218 	andcs	r0, r0, r8, lsl r2

08009094 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80090a2:	2301      	movs	r3, #1
 80090a4:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d063      	beq.n	8009174 <vTaskPriorityDisinheritAfterTimeout+0xe0>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d202      	bcs.n	80090bc <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	617b      	str	r3, [r7, #20]
 80090ba:	e002      	b.n	80090c2 <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090c0:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d053      	beq.n	8009174 <vTaskPriorityDisinheritAfterTimeout+0xe0>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d14e      	bne.n	8009174 <vTaskPriorityDisinheritAfterTimeout+0xe0>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090da:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	697a      	ldr	r2, [r7, #20]
 80090e0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	db04      	blt.n	80090f4 <vTaskPriorityDisinheritAfterTimeout+0x60>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f1c3 0205 	rsb	r2, r3, #5
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	6959      	ldr	r1, [r3, #20]
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	4613      	mov	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	4413      	add	r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	4a1e      	ldr	r2, [pc, #120]	; (800917c <vTaskPriorityDisinheritAfterTimeout+0xe8>)
 8009104:	4413      	add	r3, r2
 8009106:	4299      	cmp	r1, r3
 8009108:	d134      	bne.n	8009174 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	3304      	adds	r3, #4
 800910e:	4618      	mov	r0, r3
 8009110:	f7fe fee4 	bl	8007edc <uxListRemove>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d115      	bne.n	8009146 <vTaskPriorityDisinheritAfterTimeout+0xb2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911e:	4917      	ldr	r1, [pc, #92]	; (800917c <vTaskPriorityDisinheritAfterTimeout+0xe8>)
 8009120:	4613      	mov	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	440b      	add	r3, r1
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d10a      	bne.n	8009146 <vTaskPriorityDisinheritAfterTimeout+0xb2>
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009134:	2201      	movs	r2, #1
 8009136:	fa02 f303 	lsl.w	r3, r2, r3
 800913a:	43da      	mvns	r2, r3
 800913c:	4b10      	ldr	r3, [pc, #64]	; (8009180 <vTaskPriorityDisinheritAfterTimeout+0xec>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4013      	ands	r3, r2
 8009142:	4a0f      	ldr	r2, [pc, #60]	; (8009180 <vTaskPriorityDisinheritAfterTimeout+0xec>)
 8009144:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914a:	2201      	movs	r2, #1
 800914c:	409a      	lsls	r2, r3
 800914e:	4b0c      	ldr	r3, [pc, #48]	; (8009180 <vTaskPriorityDisinheritAfterTimeout+0xec>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4313      	orrs	r3, r2
 8009154:	4a0a      	ldr	r2, [pc, #40]	; (8009180 <vTaskPriorityDisinheritAfterTimeout+0xec>)
 8009156:	6013      	str	r3, [r2, #0]
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800915c:	4613      	mov	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4a05      	ldr	r2, [pc, #20]	; (800917c <vTaskPriorityDisinheritAfterTimeout+0xe8>)
 8009166:	441a      	add	r2, r3
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	3304      	adds	r3, #4
 800916c:	4619      	mov	r1, r3
 800916e:	4610      	mov	r0, r2
 8009170:	f7fe fe58 	bl	8007e24 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009174:	bf00      	nop
 8009176:	3718      	adds	r7, #24
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	20000154 	andcs	r0, r0, r4, asr r1
 8009180:	20000218 	andcs	r0, r0, r8, lsl r2

08009184 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009184:	b480      	push	{r7}
 8009186:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009188:	4b07      	ldr	r3, [pc, #28]	; (80091a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d004      	beq.n	800919a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009190:	4b05      	ldr	r3, [pc, #20]	; (80091a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009196:	3201      	adds	r2, #1
 8009198:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800919a:	4b03      	ldr	r3, [pc, #12]	; (80091a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800919c:	681b      	ldr	r3, [r3, #0]
	}
 800919e:	4618      	mov	r0, r3
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bc80      	pop	{r7}
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	20000150 	andcs	r0, r0, r0, asr r1

080091ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80091b6:	4b29      	ldr	r3, [pc, #164]	; (800925c <prvAddCurrentTaskToDelayedList+0xb0>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091bc:	4b28      	ldr	r3, [pc, #160]	; (8009260 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3304      	adds	r3, #4
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fe fe8a 	bl	8007edc <uxListRemove>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10b      	bne.n	80091e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80091ce:	4b24      	ldr	r3, [pc, #144]	; (8009260 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d4:	2201      	movs	r2, #1
 80091d6:	fa02 f303 	lsl.w	r3, r2, r3
 80091da:	43da      	mvns	r2, r3
 80091dc:	4b21      	ldr	r3, [pc, #132]	; (8009264 <prvAddCurrentTaskToDelayedList+0xb8>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4013      	ands	r3, r2
 80091e2:	4a20      	ldr	r2, [pc, #128]	; (8009264 <prvAddCurrentTaskToDelayedList+0xb8>)
 80091e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091ec:	d10a      	bne.n	8009204 <prvAddCurrentTaskToDelayedList+0x58>
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d007      	beq.n	8009204 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091f4:	4b1a      	ldr	r3, [pc, #104]	; (8009260 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	3304      	adds	r3, #4
 80091fa:	4619      	mov	r1, r3
 80091fc:	481a      	ldr	r0, [pc, #104]	; (8009268 <prvAddCurrentTaskToDelayedList+0xbc>)
 80091fe:	f7fe fe11 	bl	8007e24 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009202:	e026      	b.n	8009252 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4413      	add	r3, r2
 800920a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800920c:	4b14      	ldr	r3, [pc, #80]	; (8009260 <prvAddCurrentTaskToDelayedList+0xb4>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	429a      	cmp	r2, r3
 800921a:	d209      	bcs.n	8009230 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800921c:	4b13      	ldr	r3, [pc, #76]	; (800926c <prvAddCurrentTaskToDelayedList+0xc0>)
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	4b0f      	ldr	r3, [pc, #60]	; (8009260 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3304      	adds	r3, #4
 8009226:	4619      	mov	r1, r3
 8009228:	4610      	mov	r0, r2
 800922a:	f7fe fe1f 	bl	8007e6c <vListInsert>
}
 800922e:	e010      	b.n	8009252 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009230:	4b0f      	ldr	r3, [pc, #60]	; (8009270 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	4b0a      	ldr	r3, [pc, #40]	; (8009260 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3304      	adds	r3, #4
 800923a:	4619      	mov	r1, r3
 800923c:	4610      	mov	r0, r2
 800923e:	f7fe fe15 	bl	8007e6c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009242:	4b0c      	ldr	r3, [pc, #48]	; (8009274 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	429a      	cmp	r2, r3
 800924a:	d202      	bcs.n	8009252 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800924c:	4a09      	ldr	r2, [pc, #36]	; (8009274 <prvAddCurrentTaskToDelayedList+0xc8>)
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	6013      	str	r3, [r2, #0]
}
 8009252:	bf00      	nop
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	20000214 	andcs	r0, r0, r4, lsl r2
 8009260:	20000150 	andcs	r0, r0, r0, asr r1
 8009264:	20000218 	andcs	r0, r0, r8, lsl r2
 8009268:	200001fc 	strdcs	r0, [r0], -ip
 800926c:	200001e4 	andcs	r0, r0, r4, ror #3
 8009270:	200001e0 	andcs	r0, r0, r0, ror #3
 8009274:	20000230 	andcs	r0, r0, r0, lsr r2

08009278 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	3b04      	subs	r3, #4
 8009288:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009290:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	3b04      	subs	r3, #4
 8009296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f023 0201 	bic.w	r2, r3, #1
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	3b04      	subs	r3, #4
 80092a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092a8:	4a08      	ldr	r2, [pc, #32]	; (80092cc <pxPortInitialiseStack+0x54>)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	3b14      	subs	r3, #20
 80092b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3b20      	subs	r3, #32
 80092be:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092c0:	68fb      	ldr	r3, [r7, #12]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bc80      	pop	{r7}
 80092ca:	4770      	bx	lr
 80092cc:	080092d1 	stmdaeq	r0, {r0, r4, r6, r7, r9, ip, pc}

080092d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80092d6:	2300      	movs	r3, #0
 80092d8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80092da:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80092ec:	bf00      	nop
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d0fc      	beq.n	80092ee <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80092f4:	bf00      	nop
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bc80      	pop	{r7}
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop

08009300 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009300:	4b07      	ldr	r3, [pc, #28]	; (8009320 <pxCurrentTCBConst2>)
 8009302:	6819      	ldr	r1, [r3, #0]
 8009304:	6808      	ldr	r0, [r1, #0]
 8009306:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800930a:	f380 8809 	msr	PSP, r0
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f04f 0000 	mov.w	r0, #0
 8009316:	f380 8811 	msr	BASEPRI, r0
 800931a:	f04e 0e0d 	orr.w	lr, lr, #13
 800931e:	4770      	bx	lr

08009320 <pxCurrentTCBConst2>:
 8009320:	20000150 	andcs	r0, r0, r0, asr r1
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009324:	bf00      	nop
 8009326:	bf00      	nop

08009328 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009328:	4806      	ldr	r0, [pc, #24]	; (8009344 <prvPortStartFirstTask+0x1c>)
 800932a:	6800      	ldr	r0, [r0, #0]
 800932c:	6800      	ldr	r0, [r0, #0]
 800932e:	f380 8808 	msr	MSP, r0
 8009332:	b662      	cpsie	i
 8009334:	b661      	cpsie	f
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	df00      	svc	0
 8009340:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009342:	bf00      	nop
 8009344:	e000ed08 	and	lr, r0, r8, lsl #26

08009348 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800934c:	4a0c      	ldr	r2, [pc, #48]	; (8009380 <xPortStartScheduler+0x38>)
 800934e:	4b0c      	ldr	r3, [pc, #48]	; (8009380 <xPortStartScheduler+0x38>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009356:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009358:	4a09      	ldr	r2, [pc, #36]	; (8009380 <xPortStartScheduler+0x38>)
 800935a:	4b09      	ldr	r3, [pc, #36]	; (8009380 <xPortStartScheduler+0x38>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009362:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009364:	f000 f888 	bl	8009478 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009368:	4b06      	ldr	r3, [pc, #24]	; (8009384 <xPortStartScheduler+0x3c>)
 800936a:	2200      	movs	r2, #0
 800936c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800936e:	f7ff ffdb 	bl	8009328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009372:	f7ff fbf5 	bl	8008b60 <vTaskSwitchContext>
	prvTaskExitError();
 8009376:	f7ff ffab 	bl	80092d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	bd80      	pop	{r7, pc}
 8009380:	e000ed20 	and	lr, r0, r0, lsr #26
 8009384:	200000e8 	andcs	r0, r0, r8, ror #1

08009388 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80093a0:	4b04      	ldr	r3, [pc, #16]	; (80093b4 <vPortEnterCritical+0x2c>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	3301      	adds	r3, #1
 80093a6:	4a03      	ldr	r2, [pc, #12]	; (80093b4 <vPortEnterCritical+0x2c>)
 80093a8:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80093aa:	bf00      	nop
 80093ac:	370c      	adds	r7, #12
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bc80      	pop	{r7}
 80093b2:	4770      	bx	lr
 80093b4:	200000e8 	andcs	r0, r0, r8, ror #1

080093b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 80093be:	4b09      	ldr	r3, [pc, #36]	; (80093e4 <vPortExitCritical+0x2c>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	3b01      	subs	r3, #1
 80093c4:	4a07      	ldr	r2, [pc, #28]	; (80093e4 <vPortExitCritical+0x2c>)
 80093c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80093c8:	4b06      	ldr	r3, [pc, #24]	; (80093e4 <vPortExitCritical+0x2c>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d104      	bne.n	80093da <vPortExitCritical+0x22>
 80093d0:	2300      	movs	r3, #0
 80093d2:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80093da:	bf00      	nop
 80093dc:	370c      	adds	r7, #12
 80093de:	46bd      	mov	sp, r7
 80093e0:	bc80      	pop	{r7}
 80093e2:	4770      	bx	lr
 80093e4:	200000e8 	andcs	r0, r0, r8, ror #1
	...

080093f0 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80093f0:	f3ef 8009 	mrs	r0, PSP
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	4b0d      	ldr	r3, [pc, #52]	; (8009430 <pxCurrentTCBConst>)
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009400:	6010      	str	r0, [r2, #0]
 8009402:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009406:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800940a:	f380 8811 	msr	BASEPRI, r0
 800940e:	f7ff fba7 	bl	8008b60 <vTaskSwitchContext>
 8009412:	f04f 0000 	mov.w	r0, #0
 8009416:	f380 8811 	msr	BASEPRI, r0
 800941a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800941e:	6819      	ldr	r1, [r3, #0]
 8009420:	6808      	ldr	r0, [r1, #0]
 8009422:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009426:	f380 8809 	msr	PSP, r0
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	4770      	bx	lr

08009430 <pxCurrentTCBConst>:
 8009430:	20000150 	andcs	r0, r0, r0, asr r1
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009434:	bf00      	nop
 8009436:	bf00      	nop

08009438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
	__asm volatile
 800943e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	603b      	str	r3, [r7, #0]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009450:	f7ff fade 	bl	8008a10 <xTaskIncrementTick>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d003      	beq.n	8009462 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800945a:	4b06      	ldr	r3, [pc, #24]	; (8009474 <xPortSysTickHandler+0x3c>)
 800945c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009460:	601a      	str	r2, [r3, #0]
 8009462:	2300      	movs	r3, #0
 8009464:	607b      	str	r3, [r7, #4]
	__asm volatile
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800946c:	bf00      	nop
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	e000ed04 	and	lr, r0, r4, lsl #26

08009478 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009478:	b480      	push	{r7}
 800947a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800947c:	4b07      	ldr	r3, [pc, #28]	; (800949c <vPortSetupTimerInterrupt+0x24>)
 800947e:	2200      	movs	r2, #0
 8009480:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009482:	4b07      	ldr	r3, [pc, #28]	; (80094a0 <vPortSetupTimerInterrupt+0x28>)
 8009484:	2200      	movs	r2, #0
 8009486:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009488:	4b06      	ldr	r3, [pc, #24]	; (80094a4 <vPortSetupTimerInterrupt+0x2c>)
 800948a:	4a07      	ldr	r2, [pc, #28]	; (80094a8 <vPortSetupTimerInterrupt+0x30>)
 800948c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800948e:	4b03      	ldr	r3, [pc, #12]	; (800949c <vPortSetupTimerInterrupt+0x24>)
 8009490:	2207      	movs	r2, #7
 8009492:	601a      	str	r2, [r3, #0]
}
 8009494:	bf00      	nop
 8009496:	46bd      	mov	sp, r7
 8009498:	bc80      	pop	{r7}
 800949a:	4770      	bx	lr
 800949c:	e000e010 	and	lr, r0, r0, lsl r0
 80094a0:	e000e018 	and	lr, r0, r8, lsl r0
 80094a4:	e000e014 	and	lr, r0, r4, lsl r0
 80094a8:	0001193f 	andeq	r1, r1, pc, lsr r9

080094ac <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 80094b4:	2300      	movs	r3, #0
 80094b6:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f003 0307 	and.w	r3, r3, #7
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d004      	beq.n	80094cc <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f023 0307 	bic.w	r3, r3, #7
 80094c8:	3308      	adds	r3, #8
 80094ca:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 80094cc:	f7ff fa04 	bl	80088d8 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80094d0:	4b16      	ldr	r3, [pc, #88]	; (800952c <pvPortMalloc+0x80>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d105      	bne.n	80094e4 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80094d8:	4b15      	ldr	r3, [pc, #84]	; (8009530 <pvPortMalloc+0x84>)
 80094da:	f023 0307 	bic.w	r3, r3, #7
 80094de:	461a      	mov	r2, r3
 80094e0:	4b12      	ldr	r3, [pc, #72]	; (800952c <pvPortMalloc+0x80>)
 80094e2:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80094e4:	4b13      	ldr	r3, [pc, #76]	; (8009534 <pvPortMalloc+0x88>)
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4413      	add	r3, r2
 80094ec:	f243 32f7 	movw	r2, #13303	; 0x33f7
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d813      	bhi.n	800951c <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80094f4:	4b0f      	ldr	r3, [pc, #60]	; (8009534 <pvPortMalloc+0x88>)
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	441a      	add	r2, r3
 80094fc:	4b0d      	ldr	r3, [pc, #52]	; (8009534 <pvPortMalloc+0x88>)
 80094fe:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8009500:	429a      	cmp	r2, r3
 8009502:	d90b      	bls.n	800951c <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8009504:	4b09      	ldr	r3, [pc, #36]	; (800952c <pvPortMalloc+0x80>)
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <pvPortMalloc+0x88>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4413      	add	r3, r2
 800950e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8009510:	4b08      	ldr	r3, [pc, #32]	; (8009534 <pvPortMalloc+0x88>)
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4413      	add	r3, r2
 8009518:	4a06      	ldr	r2, [pc, #24]	; (8009534 <pvPortMalloc+0x88>)
 800951a:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800951c:	f7ff f9ea 	bl	80088f4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8009520:	68fb      	ldr	r3, [r7, #12]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	20003640 	andcs	r3, r0, r0, asr #12
 8009530:	20000244 	andcs	r0, r0, r4, asr #4
 8009534:	2000363c 	andcs	r3, r0, ip, lsr r6

08009538 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	bc80      	pop	{r7}
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop

0800954c <Reset_Handler>:
 800954c:	2100      	movs	r1, #0
 800954e:	e003      	b.n	8009558 <LoopCopyDataInit>

08009550 <CopyDataInit>:
 8009550:	4b0a      	ldr	r3, [pc, #40]	; (800957c <LoopFillZerobss+0x10>)
 8009552:	585b      	ldr	r3, [r3, r1]
 8009554:	5043      	str	r3, [r0, r1]
 8009556:	3104      	adds	r1, #4

08009558 <LoopCopyDataInit>:
 8009558:	4809      	ldr	r0, [pc, #36]	; (8009580 <LoopFillZerobss+0x14>)
 800955a:	4b0a      	ldr	r3, [pc, #40]	; (8009584 <LoopFillZerobss+0x18>)
 800955c:	1842      	adds	r2, r0, r1
 800955e:	429a      	cmp	r2, r3
 8009560:	d3f6      	bcc.n	8009550 <CopyDataInit>
 8009562:	4a09      	ldr	r2, [pc, #36]	; (8009588 <LoopFillZerobss+0x1c>)
 8009564:	e002      	b.n	800956c <LoopFillZerobss>

08009566 <FillZerobss>:
 8009566:	2300      	movs	r3, #0
 8009568:	f842 3b04 	str.w	r3, [r2], #4

0800956c <LoopFillZerobss>:
 800956c:	4b07      	ldr	r3, [pc, #28]	; (800958c <LoopFillZerobss+0x20>)
 800956e:	429a      	cmp	r2, r3
 8009570:	d3f9      	bcc.n	8009566 <FillZerobss>
 8009572:	f7f7 feb7 	bl	80012e4 <SystemInit>
 8009576:	f7fd fadb 	bl	8006b30 <main>
 800957a:	4770      	bx	lr
 800957c:	0800a070 	stmdaeq	r0, {r4, r5, r6, sp, pc}
 8009580:	20000000 	andcs	r0, r0, r0
 8009584:	200000ec 	andcs	r0, r0, ip, ror #1
 8009588:	200000ec 	andcs	r0, r0, ip, ror #1
 800958c:	20004300 	andcs	r4, r0, r0, lsl #6

08009590 <ADC1_2_IRQHandler>:
 8009590:	e7fe      	b.n	8009590 <ADC1_2_IRQHandler>
 8009592:	0000      	movs	r0, r0
 8009594:	43454843 	movtmi	r4, #22595	; 0x5843
 8009598:	50495f4b 	subpl	r5, r9, fp, asr #30
 800959c:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
 80095a0:	43494c46 	movtmi	r4, #40006	; 0x9c46
 80095a4:	00000054 	andeq	r0, r0, r4, asr r0
 80095a8:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 80095ac:	5020776f 	eorpl	r7, r0, pc, ror #14
 80095b0:	4c205948 			; <UNDEFINED> instruction: 0x4c205948
 80095b4:	206b6e69 	rsbcs	r6, fp, r9, ror #28
 80095b8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 80095bc:	0000002e 	andeq	r0, r0, lr, lsr #32
 80095c0:	2054454e 	subscs	r4, r4, lr, asr #10
 80095c4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
 80095c8:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 80095cc:	2064657a 	rsbcs	r6, r4, sl, ror r5
 80095d0:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 80095d4:	0000002e 	andeq	r0, r0, lr, lsr #32
 80095d8:	50434844 	subpl	r4, r3, r4, asr #16
 80095dc:	696c4320 	stmdbvs	ip!, {r5, r8, r9, lr}^
 80095e0:	00746e65 	rsbseq	r6, r4, r5, ror #28
 80095e4:	6b636f4c 	blvs	98e531c <_etext+0x18db2ac>
 80095e8:	73615420 	cmnvc	r1, #32, 8	; 0x20000000
 80095ec:	0000006b 	andeq	r0, r0, fp, rrx
 80095f0:	44454c4f 	strbmi	r4, [r5], #-3151	; 0xfffff3b1
 80095f4:	73615420 	cmnvc	r1, #32, 8	; 0x20000000
 80095f8:	0000006b 	andeq	r0, r0, fp, rrx
 80095fc:	6e69614d 	powvsem	f6, f1, #5.0
 8009600:	73615420 	cmnvc	r1, #32, 8	; 0x20000000
 8009604:	0000006b 	andeq	r0, r0, fp, rrx
 8009608:	41534454 	cmpmi	r3, r4, asr r4
 800960c:	492d5453 	pushmi	{r0, r1, r4, r6, sl, ip, lr}
 8009610:	5620544f 	strtpl	r5, [r0], -pc, asr #8
 8009614:	2e312e32 	mrccs	14, 1, r2, cr1, cr2, {1}
 8009618:	00000030 	andeq	r0, r0, r0, lsr r0
 800961c:	50434844 	subpl	r4, r3, r4, asr #16
 8009620:	00000000 	andeq	r0, r0, r0
 8009624:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
 8009628:	00004349 	andeq	r4, r0, r9, asr #6
 800962c:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 8009630:	00000073 	andeq	r0, r0, r3, ror r0
 8009634:	3a43414d 	bcc	90d9b70 <_etext+0x10cfb00>
 8009638:	58323025 	ldmdapl	r2!, {r0, r2, r5, ip, sp}
 800963c:	3230253a 	eorscc	r2, r0, #243269632	; 0xe800000
 8009640:	30253a58 	eorcc	r3, r5, r8, asr sl
 8009644:	253a5832 	ldrcs	r5, [sl, #-2098]!	; 0xfffff7ce
 8009648:	3a583230 	bcc	9615f10 <_etext+0x160bea0>
 800964c:	58323025 	ldmdapl	r2!, {r0, r2, r5, ip, sp}
 8009650:	3230253a 	eorscc	r2, r0, #243269632	; 0xe800000
 8009654:	00000058 	andeq	r0, r0, r8, asr r0
 8009658:	5454514d 	ldrbpl	r5, [r4], #-333	; 0xfffffeb3
 800965c:	2e64253a 	mcrcs	5, 3, r2, cr4, cr10, {1}
 8009660:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8009664:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8009668:	00000000 	andeq	r0, r0, r0
 800966c:	253a5049 	ldrcs	r5, [sl, #-73]!	; 0xffffffb7
 8009670:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8009674:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8009678:	00006425 	andeq	r6, r0, r5, lsr #8
 800967c:	3a574147 	bcc	95d9ba0 <_etext+0x15cfb30>
 8009680:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8009684:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8009688:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 800968c:	3a534e44 	bcc	94dcfa4 <_etext+0x14d2f34>
 8009690:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8009694:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8009698:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 800969c:	2e777777 	mrccs	7, 3, r7, cr7, cr7, {3}
 80096a0:	776e6177 			; <UNDEFINED> instruction: 0x776e6177
 80096a4:	6e69782e 	cdpvs	8, 6, cr7, cr9, cr14, {1}
 80096a8:	00000000 	andeq	r0, r0, r0
 80096ac:	20657355 	rsbcs	r7, r5, r5, asr r3
 80096b0:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 80096b4:	4d206369 	stcmi	3, cr6, [r0, #-420]!	; 0xfffffe5c
 80096b8:	21545451 	cmpcs	r4, r1, asr r4
 80096bc:	00000000 	andeq	r0, r0, r0
 80096c0:	6e6e6f43 	cdpvs	15, 6, cr6, cr14, cr3, {2}
 80096c4:	20746365 	rsbscs	r6, r4, r5, ror #6
 80096c8:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 80096cc:	00216465 	eoreq	r6, r1, r5, ror #8
 80096d0:	61736474 	cmnvs	r3, r4, ror r4
 80096d4:	692d7473 	pushvs	{r0, r1, r4, r5, r6, sl, ip, sp, lr}
 80096d8:	652d746f 	strvs	r7, [sp, #-1135]!	; 0xfffffb91
 80096dc:	642d7478 	strtvs	r7, [sp], #-1144	; 0xfffffb88
 80096e0:	00726f6f 	rsbseq	r6, r2, pc, ror #30
 80096e4:	64747865 	ldrbtvs	r7, [r4], #-2149	; 0xfffff79b
 80096e8:	31726f6f 	cmncc	r2, pc, ror #30
 80096ec:	35343332 	ldrcc	r3, [r4, #-818]!	; 0xfffffcce
 80096f0:	00000000 	andeq	r0, r0, r0
 80096f4:	64747865 	ldrbtvs	r7, [r4], #-2149	; 0xfffff79b
 80096f8:	00726f6f 	rsbseq	r6, r2, pc, ror #30
 80096fc:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
 8009700:	4e4f4320 	cdpmi	3, 4, cr4, cr15, cr0, {1}
 8009704:	6170204e 	cmnvs	r0, lr, asr #32
 8009708:	65206b63 	strvs	r6, [r0, #-2915]!	; 0xfffff49d
 800970c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 8009710:	0000002e 	andeq	r0, r0, lr, lsr #32
 8009714:	4e4e4f43 	cdpmi	15, 4, cr4, cr14, cr3, {2}
 8009718:	204b4341 	subcs	r4, fp, r1, asr #6
 800971c:	65707865 	ldrbvs	r7, [r0, #-2149]!	; 0xfffff79b
 8009720:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
 8009724:	00000021 	andeq	r0, r0, r1, lsr #32
 8009728:	4e4e4f43 	cdpmi	15, 4, cr4, cr14, cr3, {2}
 800972c:	204b4341 	subcs	r4, fp, r1, asr #6
 8009730:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 8009734:	00216465 	eoreq	r6, r1, r5, ror #8
 8009738:	635f6474 	cmpvs	pc, #116, 8	; 0x74000000
 800973c:	64756f6c 	ldrbtvs	r6, [r5], #-3948	; 0xfffff094
 8009740:	7364742f 	cmnvc	r4, #788529152	; 0x2f000000
 8009744:	2f747361 	svccs	0x00747361
 8009748:	5f747865 	svcpl	0x00747865
 800974c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
 8009750:	00000000 	andeq	r0, r0, r0
 8009754:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
 8009758:	42555320 	subsmi	r5, r5, #32, 6	; 0x80000000
 800975c:	61702053 	cmnvs	r0, r3, asr r0
 8009760:	65206b63 	strvs	r6, [r0, #-2915]!	; 0xfffff49d
 8009764:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 8009768:	0000002e 	andeq	r0, r0, lr, lsr #32
 800976c:	41425553 	cmpmi	r2, r3, asr r5
 8009770:	65204b43 	strvs	r4, [r0, #-2883]!	; 0xfffff4bd
 8009774:	63657078 	cmnvs	r5, #120	; 0x78
 8009778:	21646574 	smccs	18004	; 0x4654
 800977c:	00000000 	andeq	r0, r0, r0
 8009780:	2067734d 	rsbcs	r7, r7, sp, asr #6
 8009784:	75204449 	strvc	r4, [r0, #-1097]!	; 0xfffffbb7
 8009788:	74616d6e 	strbtvc	r6, [r1], #-3438	; 0xfffff292
 800978c:	00216863 	eoreq	r6, r1, r3, ror #16
 8009790:	20746553 	rsbscs	r6, r4, r3, asr r5
 8009794:	4d204f49 	stcmi	15, cr4, [r0, #-292]!	; 0xfffffedc
 8009798:	2065646f 	rsbcs	r6, r5, pc, ror #8
 800979c:	6c696146 	stfvse	f6, [r9], #-280	; 0xfffffee8
 80097a0:	00216465 	eoreq	r6, r1, r5, ror #8
 80097a4:	676e6950 			; <UNDEFINED> instruction: 0x676e6950
 80097a8:	007e7e7e 	rsbseq	r7, lr, lr, ror lr
 80097ac:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
 80097b0:	20657669 	rsbcs	r7, r5, r9, ror #12
 80097b4:	21425550 	cmpcs	r2, r0, asr r5
 80097b8:	00000000 	andeq	r0, r0, r0
 80097bc:	6b636f4c 	blvs	98e54f4 <_etext+0x18db484>
 80097c0:	004e4f20 	subeq	r4, lr, r0, lsr #30
 80097c4:	6b636f4c 	blvs	98e54fc <_etext+0x18db48c>
 80097c8:	7e6e4f20 	cdpvc	15, 6, cr4, cr14, cr0, {1}
 80097cc:	00000000 	andeq	r0, r0, r0
 80097d0:	20746547 	rsbscs	r6, r4, r7, asr #10
 80097d4:	21215049 			; <UNDEFINED> instruction: 0x21215049
 80097d8:	00000000 	andeq	r0, r0, r0
 80097dc:	74716d65 	ldrbtvc	r6, [r1], #-3429	; 0xfffff29b
 80097e0:	00000074 	andeq	r0, r0, r4, ror r0
 80097e4:	454c4449 	strbmi	r4, [ip, #-1097]	; 0xfffffbb7
 80097e8:	00000000 	andeq	r0, r0, r0

080097ec <F6x8>:
	...
 80097f4:	00002f00 	andeq	r2, r0, r0, lsl #30
 80097f8:	00070000 	andeq	r0, r7, r0
 80097fc:	14000007 	strne	r0, [r0], #-7
 8009800:	147f147f 	ldrbtne	r1, [pc], #-1151	; 8009808 <F6x8+0x1c>
 8009804:	7f2a2400 	svcvc	0x002a2400
 8009808:	6200122a 	andvs	r1, r0, #-1610612734	; 0xa0000002
 800980c:	23130864 	tstcs	r3, #100, 16	; 0x640000
 8009810:	55493600 	strbpl	r3, [r9, #-1536]	; 0xfffffa00
 8009814:	00005022 	andeq	r5, r0, r2, lsr #32
 8009818:	00000305 	andeq	r0, r0, r5, lsl #6
 800981c:	221c0000 	andscs	r0, ip, #0
 8009820:	00000041 	andeq	r0, r0, r1, asr #32
 8009824:	001c2241 	andseq	r2, ip, r1, asr #4
 8009828:	3e081400 	cfcpyscc	mvf1, mvf8
 800982c:	08001408 	stmdaeq	r0, {r3, sl, ip}
 8009830:	08083e08 	stmdaeq	r8, {r3, r9, sl, fp, ip, sp}
 8009834:	a0000000 	andge	r0, r0, r0
 8009838:	08000060 	stmdaeq	r0, {r5, r6}
 800983c:	08080808 	stmdaeq	r8, {r3, fp}
 8009840:	60600000 	rsbvs	r0, r0, r0
 8009844:	20000000 	andcs	r0, r0, r0
 8009848:	02040810 	andeq	r0, r4, #16, 16	; 0x100000
 800984c:	49513e00 	ldmdbmi	r1, {r9, sl, fp, ip, sp}^
 8009850:	00003e45 	andeq	r3, r0, r5, asr #28
 8009854:	00407f42 	subeq	r7, r0, r2, asr #30
 8009858:	51614200 	cmnpl	r1, r0, lsl #4
 800985c:	21004649 	tstcs	r0, r9, asr #12
 8009860:	314b4541 	cmpcc	fp, r1, asr #10
 8009864:	12141800 	andsne	r1, r4, #0, 16
 8009868:	2700107f 	smlsdxcs	r0, pc, r0, r1	; <UNPREDICTABLE>
 800986c:	39454545 	stmdbcc	r5, {r0, r2, r6, r8, sl, lr}^
 8009870:	494a3c00 	stmdbmi	sl, {sl, fp, ip, sp}^
 8009874:	01003049 	tsteq	r0, r9, asr #32
 8009878:	03050971 	movweq	r0, #22897	; 0x5971
 800987c:	49493600 	stmdbmi	r9, {r9, sl, ip, sp}^
 8009880:	06003649 	streq	r3, [r0], -r9, asr #12
 8009884:	1e294949 	vnmulne.f16	s8, s18, s18	; <UNPREDICTABLE>
 8009888:	36360000 	ldrtcc	r0, [r6], -r0
 800988c:	00000000 	andeq	r0, r0, r0
 8009890:	00003656 	andeq	r3, r0, r6, asr r6
 8009894:	22140800 	andscs	r0, r4, #0, 16
 8009898:	14000041 	strne	r0, [r0], #-65	; 0xffffffbf
 800989c:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 80098a0:	22410000 	subcs	r0, r1, #0
 80098a4:	02000814 	andeq	r0, r0, #20, 16	; 0x140000
 80098a8:	06095101 	streq	r5, [r9], -r1, lsl #2
 80098ac:	59493200 	stmdbpl	r9, {r9, ip, sp}^
 80098b0:	7c003e51 	stcvc	14, cr3, [r0], {81}	; 0x51
 80098b4:	7c121112 	ldfvcs	f1, [r2], {18}
 80098b8:	49497f00 	stmdbmi	r9, {r8, r9, sl, fp, ip, sp, lr}^
 80098bc:	3e003649 	cfmadd32cc	mvax2, mvfx3, mvfx0, mvfx9
 80098c0:	22414141 	subcs	r4, r1, #1073741840	; 0x40000010
 80098c4:	41417f00 	cmpmi	r1, r0, lsl #30
 80098c8:	7f001c22 	svcvc	0x00001c22
 80098cc:	41494949 	cmpmi	r9, r9, asr #18
 80098d0:	09097f00 	stmdbeq	r9, {r8, r9, sl, fp, ip, sp, lr}
 80098d4:	3e000109 	adfccs	f0, f0, #1.0
 80098d8:	7a494941 	bvc	925bde4 <_etext+0x1251d74>
 80098dc:	08087f00 	stmdaeq	r8, {r8, r9, sl, fp, ip, sp, lr}
 80098e0:	00007f08 	andeq	r7, r0, r8, lsl #30
 80098e4:	00417f41 	subeq	r7, r1, r1, asr #30
 80098e8:	41402000 	mrsmi	r2, (UNDEF: 64)
 80098ec:	7f00013f 	svcvc	0x0000013f
 80098f0:	41221408 			; <UNDEFINED> instruction: 0x41221408
 80098f4:	40407f00 	submi	r7, r0, r0, lsl #30
 80098f8:	7f004040 	svcvc	0x00004040
 80098fc:	7f020c02 	svcvc	0x00020c02
 8009900:	08047f00 	stmdaeq	r4, {r8, r9, sl, fp, ip, sp, lr}
 8009904:	3e007f10 	mcrcc	15, 0, r7, cr0, cr0, {0}
 8009908:	3e414141 	dvfccsm	f4, f1, f1
 800990c:	09097f00 	stmdbeq	r9, {r8, r9, sl, fp, ip, sp, lr}
 8009910:	3e000609 	cfmadd32cc	mvax0, mvfx0, mvfx0, mvfx9
 8009914:	5e215141 	sufplsm	f5, f1, f1
 8009918:	19097f00 	stmdbne	r9, {r8, r9, sl, fp, ip, sp, lr}
 800991c:	46004629 	strmi	r4, [r0], -r9, lsr #12
 8009920:	31494949 	cmpcc	r9, r9, asr #18
 8009924:	7f010100 	svcvc	0x00010100
 8009928:	3f000101 	svccc	0x00000101
 800992c:	3f404040 	svccc	0x00404040
 8009930:	40201f00 	eormi	r1, r0, r0, lsl #30
 8009934:	3f001f20 	svccc	0x00001f20
 8009938:	3f403840 	svccc	0x00403840
 800993c:	08146300 	ldmdaeq	r4, {r8, r9, sp, lr}
 8009940:	07006314 	smladeq	r0, r4, r3, r6
 8009944:	07087008 	streq	r7, [r8, -r8]
 8009948:	49516100 	ldmdbmi	r1, {r8, sp, lr}^
 800994c:	00004345 	andeq	r4, r0, r5, asr #6
 8009950:	0041417f 	subeq	r4, r1, pc, ror r1
 8009954:	552a5500 	strpl	r5, [sl, #-1280]!	; 0xfffffb00
 8009958:	0000552a 	andeq	r5, r0, sl, lsr #10
 800995c:	007f4141 	rsbseq	r4, pc, r1, asr #2
 8009960:	01020400 	tsteq	r2, r0, lsl #8
 8009964:	40000402 	andmi	r0, r0, r2, lsl #8
 8009968:	40404040 	submi	r4, r0, r0, asr #32
 800996c:	02010000 	andeq	r0, r1, #0
 8009970:	20000004 	andcs	r0, r0, r4
 8009974:	78545454 	ldmdavc	r4, {r2, r4, r6, sl, ip, lr}^
 8009978:	44487f00 	strbmi	r7, [r8], #-3840	; 0xfffff100
 800997c:	38003844 	stmdacc	r0, {r2, r6, fp, ip, sp}
 8009980:	20444444 	subcs	r4, r4, r4, asr #8
 8009984:	44443800 	strbmi	r3, [r4], #-2048	; 0xfffff800
 8009988:	38007f48 	stmdacc	r0, {r3, r6, r8, r9, sl, fp, ip, sp, lr}
 800998c:	18545454 	ldmdane	r4, {r2, r4, r6, sl, ip, lr}^
 8009990:	097e0800 	ldmdbeq	lr!, {fp}^
 8009994:	18000201 	stmdane	r0, {r0, r9}
 8009998:	7ca4a4a4 	cfstrsvc	mvf10, [r4], #656	; 0x290
 800999c:	04087f00 	streq	r7, [r8], #-3840	; 0xfffff100
 80099a0:	00007804 	andeq	r7, r0, r4, lsl #16
 80099a4:	00407d44 	subeq	r7, r0, r4, asr #26
 80099a8:	84804000 	strhi	r4, [r0], #0
 80099ac:	7f00007d 	svcvc	0x0000007d
 80099b0:	00442810 	subeq	r2, r4, r0, lsl r8
 80099b4:	7f410000 	svcvc	0x00410000
 80099b8:	7c000040 	stcvc	0, cr0, [r0], {64}	; 0x40
 80099bc:	78041804 	stmdavc	r4, {r2, fp, ip}
 80099c0:	04087c00 	streq	r7, [r8], #-3072	; 0xfffff400
 80099c4:	38007804 	stmdacc	r0, {r2, fp, ip, sp, lr}
 80099c8:	38444444 	stmdacc	r4, {r2, r6, sl, lr}^
 80099cc:	2424fc00 	strtcs	pc, [r4], #-3072	; 0xfffff400
 80099d0:	18001824 	stmdane	r0, {r2, r5, fp, ip}
 80099d4:	fc182424 	ldc2	4, cr2, [r8], {36}	; 0x24
 80099d8:	04087c00 	streq	r7, [r8], #-3072	; 0xfffff400
 80099dc:	48000804 	stmdami	r0, {r2, fp}
 80099e0:	20545454 	subscs	r5, r4, r4, asr r4
 80099e4:	443f0400 	ldrtmi	r0, [pc], #-1024	; 80099ec <F6x8+0x200>
 80099e8:	3c002040 	stccc	0, cr2, [r0], {64}	; 0x40
 80099ec:	7c204040 	stcvc	0, cr4, [r0], #-256	; 0xffffff00
 80099f0:	40201c00 	eormi	r1, r0, r0, lsl #24
 80099f4:	3c001c20 	stccc	12, cr1, [r0], {32}
 80099f8:	3c403040 	mcrrcc	0, 4, r3, r0, cr0
 80099fc:	10284400 	eorne	r4, r8, r0, lsl #8
 8009a00:	1c004428 	cfstrsne	mvf4, [r0], {40}	; 0x28
 8009a04:	7ca0a0a0 	stcvc	0, cr10, [r0], #640	; 0x280
 8009a08:	54644400 	strbtpl	r4, [r4], #-1024	; 0xfffffc00
 8009a0c:	1000444c 	andne	r4, r0, ip, asr #8
 8009a10:	000082fe 	strdeq	r8, [r0], -lr
 8009a14:	00ff0000 	rscseq	r0, pc, r0
 8009a18:	00000000 	andeq	r0, r0, r0
 8009a1c:	0010fe82 	andseq	pc, r0, r2, lsl #29
 8009a20:	04020204 	streq	r0, [r2], #-516	; 0xfffffdfc
 8009a24:	14140204 	ldrne	r0, [r4], #-516	; 0xfffffdfc
 8009a28:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec

08009a2c <F8X16>:
	...
 8009a3c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
 8009a40:	00000000 	andeq	r0, r0, r0
 8009a44:	33000000 	movwcc	r0, #0
 8009a48:	00000030 	andeq	r0, r0, r0, lsr r0
 8009a4c:	060c1000 	streq	r1, [ip], -r0
 8009a50:	00060c10 	andeq	r0, r6, r0, lsl ip
	...
 8009a5c:	4078c040 	rsbsmi	ip, r8, r0, asr #32
 8009a60:	004078c0 	subeq	r7, r0, r0, asr #17
 8009a64:	04043f04 	streq	r3, [r4], #-3844	; 0xfffff0fc
 8009a68:	0004043f 	andeq	r0, r4, pc, lsr r4
 8009a6c:	fc887000 	stc2	0, cr7, [r8], {0}
 8009a70:	00003008 	andeq	r3, r0, r8
 8009a74:	ff201800 	vcmla.f16	d1, d0, d0[0], #180
 8009a78:	00001e21 	andeq	r1, r0, r1, lsr #28
 8009a7c:	00f008f0 	ldrshteq	r0, [r0], #128	; 0x80
 8009a80:	000018e0 	andeq	r1, r0, r0, ror #17
 8009a84:	031c2100 	tsteq	ip, #0, 2
 8009a88:	001e211e 	andseq	r2, lr, lr, lsl r1
 8009a8c:	8808f000 	stmdahi	r8, {ip, sp, lr, pc}
 8009a90:	00000070 	andeq	r0, r0, r0, ror r0
 8009a94:	2423211e 	strtcs	r2, [r3], #-286	; 0xfffffee2
 8009a98:	10212719 	eorne	r2, r1, r9, lsl r7
 8009a9c:	000e1610 	andeq	r1, lr, r0, lsl r6
	...
 8009aac:	e0000000 	and	r0, r0, r0
 8009ab0:	00020418 	andeq	r0, r2, r8, lsl r4
 8009ab4:	07000000 	streq	r0, [r0, -r0]
 8009ab8:	00402018 	subeq	r2, r0, r8, lsl r0
 8009abc:	18040200 	stmdane	r4, {r9}
 8009ac0:	000000e0 	andeq	r0, r0, r0, ror #1
 8009ac4:	18204000 	stmdane	r0!, {lr}
 8009ac8:	00000007 	andeq	r0, r0, r7
 8009acc:	f0804040 			; <UNDEFINED> instruction: 0xf0804040
 8009ad0:	00404080 	subeq	r4, r0, r0, lsl #1
 8009ad4:	0f010202 	svceq	0x00010202
 8009ad8:	00020201 	andeq	r0, r2, r1, lsl #4
 8009adc:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
 8009ae0:	00000000 	andeq	r0, r0, r0
 8009ae4:	1f010101 	svcne	0x00010101
 8009ae8:	00010101 	andeq	r0, r1, r1, lsl #2
	...
 8009af4:	0070b080 	rsbseq	fp, r0, r0, lsl #1
	...
 8009b04:	01010100 	mrseq	r0, (UNDEF: 17)
 8009b08:	01010101 	tsteq	r1, r1, lsl #2
	...
 8009b14:	00303000 	eorseq	r3, r0, r0
	...
 8009b20:	04186080 	ldreq	r6, [r8], #-128	; 0xffffff80
 8009b24:	06186000 	ldreq	r6, [r8], -r0
 8009b28:	00000001 	andeq	r0, r0, r1
 8009b2c:	0810e000 	ldmdaeq	r0, {sp, lr, pc}
 8009b30:	00e01008 	rsceq	r1, r0, r8
 8009b34:	20100f00 	andscs	r0, r0, r0, lsl #30
 8009b38:	000f1020 	andeq	r1, pc, r0, lsr #32
 8009b3c:	f8101000 			; <UNDEFINED> instruction: 0xf8101000
 8009b40:	00000000 	andeq	r0, r0, r0
 8009b44:	3f202000 	svccc	0x00202000
 8009b48:	00002020 	andeq	r2, r0, r0, lsr #32
 8009b4c:	08087000 	stmdaeq	r8, {ip, sp, lr}
 8009b50:	00708808 	rsbseq	r8, r0, r8, lsl #16
 8009b54:	24283000 	strtcs	r3, [r8], #-0
 8009b58:	00302122 	eorseq	r2, r0, r2, lsr #2
 8009b5c:	88083000 	stmdahi	r8, {ip, sp}
 8009b60:	00304888 	eorseq	r4, r0, r8, lsl #17
 8009b64:	20201800 	eorcs	r1, r0, r0, lsl #16
 8009b68:	000e1120 	andeq	r1, lr, r0, lsr #2
 8009b6c:	20c00000 	sbccs	r0, r0, r0
 8009b70:	0000f810 	andeq	pc, r0, r0, lsl r8	; <UNPREDICTABLE>
 8009b74:	24040700 	strcs	r0, [r4], #-1792	; 0xfffff900
 8009b78:	00243f24 	eoreq	r3, r4, r4, lsr #30
 8009b7c:	8808f800 	stmdahi	r8, {fp, ip, sp, lr, pc}
 8009b80:	00080888 	andeq	r0, r8, r8, lsl #17
 8009b84:	20211900 	eorcs	r1, r1, r0, lsl #18
 8009b88:	000e1120 	andeq	r1, lr, r0, lsr #2
 8009b8c:	8810e000 	ldmdahi	r0, {sp, lr, pc}
 8009b90:	00001888 	andeq	r1, r0, r8, lsl #17
 8009b94:	20110f00 	andscs	r0, r1, r0, lsl #30
 8009b98:	000e1120 	andeq	r1, lr, r0, lsr #2
 8009b9c:	08083800 	stmdaeq	r8, {fp, ip, sp}
 8009ba0:	000838c8 	andeq	r3, r8, r8, asr #17
 8009ba4:	3f000000 	svccc	0x00000000
 8009ba8:	00000000 	andeq	r0, r0, r0
 8009bac:	08887000 	stmeq	r8, {ip, sp, lr}
 8009bb0:	00708808 	rsbseq	r8, r0, r8, lsl #16
 8009bb4:	21221c00 			; <UNDEFINED> instruction: 0x21221c00
 8009bb8:	001c2221 	andseq	r2, ip, r1, lsr #4
 8009bbc:	0810e000 	ldmdaeq	r0, {sp, lr, pc}
 8009bc0:	00e01008 	rsceq	r1, r0, r8
 8009bc4:	22310000 	eorscs	r0, r1, #0
 8009bc8:	000f1122 	andeq	r1, pc, r2, lsr #2
 8009bcc:	c0000000 	andgt	r0, r0, r0
 8009bd0:	000000c0 	andeq	r0, r0, r0, asr #1
 8009bd4:	30000000 	andcc	r0, r0, r0
 8009bd8:	00000030 	andeq	r0, r0, r0, lsr r0
 8009bdc:	80000000 	andhi	r0, r0, r0
 8009be0:	00000000 	andeq	r0, r0, r0
 8009be4:	60800000 	addvs	r0, r0, r0
 8009be8:	00000000 	andeq	r0, r0, r0
 8009bec:	40800000 	addmi	r0, r0, r0
 8009bf0:	00081020 	andeq	r1, r8, r0, lsr #32
 8009bf4:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
 8009bf8:	00201008 	eoreq	r1, r0, r8
 8009bfc:	40404040 	submi	r4, r0, r0, asr #32
 8009c00:	00404040 	subeq	r4, r0, r0, asr #32
 8009c04:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 8009c08:	00040404 	andeq	r0, r4, r4, lsl #8
 8009c0c:	20100800 	andscs	r0, r0, r0, lsl #16
 8009c10:	00008040 	andeq	r8, r0, r0, asr #32
 8009c14:	08102000 	ldmdaeq	r0, {sp}
 8009c18:	00010204 	andeq	r0, r1, r4, lsl #4
 8009c1c:	08487000 	stmdaeq	r8, {ip, sp, lr}^
 8009c20:	00f00808 	rscseq	r0, r0, r8, lsl #16
 8009c24:	30000000 	andcc	r0, r0, r0
 8009c28:	00000136 	andeq	r0, r0, r6, lsr r1
 8009c2c:	28c830c0 	stmiacs	r8, {r6, r7, ip, sp}^
 8009c30:	00e010e8 	rsceq	r1, r0, r8, ror #1
 8009c34:	24271807 	strtcs	r1, [r7], #-2055	; 0xfffff7f9
 8009c38:	000b1423 	andeq	r1, fp, r3, lsr #8
 8009c3c:	38c00000 	stmiacc	r0, {}^	; <UNPREDICTABLE>
 8009c40:	000000e0 	andeq	r0, r0, r0, ror #1
 8009c44:	02233c20 	eoreq	r3, r3, #32, 24	; 0x2000
 8009c48:	20382702 	eorscs	r2, r8, r2, lsl #14
 8009c4c:	8888f808 	stmhi	r8, {r3, fp, ip, sp, lr, pc}
 8009c50:	00007088 	andeq	r7, r0, r8, lsl #1
 8009c54:	20203f20 	eorcs	r3, r0, r0, lsr #30
 8009c58:	000e1120 	andeq	r1, lr, r0, lsr #2
 8009c5c:	080830c0 	stmdaeq	r8, {r6, r7, ip, sp}
 8009c60:	00380808 	eorseq	r0, r8, r8, lsl #16
 8009c64:	20201807 	eorcs	r1, r0, r7, lsl #16
 8009c68:	00081020 	andeq	r1, r8, r0, lsr #32
 8009c6c:	0808f808 	stmdaeq	r8, {r3, fp, ip, sp, lr, pc}
 8009c70:	00e01008 	rsceq	r1, r0, r8
 8009c74:	20203f20 	eorcs	r3, r0, r0, lsr #30
 8009c78:	000f1020 	andeq	r1, pc, r0, lsr #32
 8009c7c:	8888f808 	stmhi	r8, {r3, fp, ip, sp, lr, pc}
 8009c80:	001008e8 	andseq	r0, r0, r8, ror #17
 8009c84:	20203f20 	eorcs	r3, r0, r0, lsr #30
 8009c88:	00182023 	andseq	r2, r8, r3, lsr #32
 8009c8c:	8888f808 	stmhi	r8, {r3, fp, ip, sp, lr, pc}
 8009c90:	001008e8 	andseq	r0, r0, r8, ror #17
 8009c94:	00203f20 	eoreq	r3, r0, r0, lsr #30
 8009c98:	00000003 	andeq	r0, r0, r3
 8009c9c:	080830c0 	stmdaeq	r8, {r6, r7, ip, sp}
 8009ca0:	00003808 	andeq	r3, r0, r8, lsl #16
 8009ca4:	20201807 	eorcs	r1, r0, r7, lsl #16
 8009ca8:	00021e22 	andeq	r1, r2, r2, lsr #28
 8009cac:	0008f808 	andeq	pc, r8, r8, lsl #16
 8009cb0:	08f80800 	ldmeq	r8!, {fp}^
 8009cb4:	01213f20 			; <UNDEFINED> instruction: 0x01213f20
 8009cb8:	203f2101 	eorscs	r2, pc, r1, lsl #2
 8009cbc:	f8080800 			; <UNDEFINED> instruction: 0xf8080800
 8009cc0:	00000808 	andeq	r0, r0, r8, lsl #16
 8009cc4:	3f202000 	svccc	0x00202000
 8009cc8:	00002020 	andeq	r2, r0, r0, lsr #32
 8009ccc:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
 8009cd0:	000808f8 	strdeq	r0, [r8], -r8
 8009cd4:	808080c0 	addhi	r8, r0, r0, asr #1
 8009cd8:	0000007f 	andeq	r0, r0, pc, ror r0
 8009cdc:	c088f808 	addgt	pc, r8, r8, lsl #16
 8009ce0:	00081828 	andeq	r1, r8, r8, lsr #16
 8009ce4:	01203f20 			; <UNDEFINED> instruction: 0x01203f20
 8009ce8:	00203826 	eoreq	r3, r0, r6, lsr #16
 8009cec:	0008f808 	andeq	pc, r8, r8, lsl #16
 8009cf0:	00000000 	andeq	r0, r0, r0
 8009cf4:	20203f20 	eorcs	r3, r0, r0, lsr #30
 8009cf8:	00302020 	eorseq	r2, r0, r0, lsr #32
 8009cfc:	00f8f808 	rscseq	pc, r8, r8, lsl #16
 8009d00:	0008f8f8 	strdeq	pc, [r8], -r8
 8009d04:	3f003f20 	svccc	0x00003f20
 8009d08:	00203f00 	eoreq	r3, r0, r0, lsl #30
 8009d0c:	c030f808 	eorsgt	pc, r0, r8, lsl #16
 8009d10:	08f80800 	ldmeq	r8!, {fp}^
 8009d14:	00203f20 	eoreq	r3, r0, r0, lsr #30
 8009d18:	003f1807 	eorseq	r1, pc, r7, lsl #16
 8009d1c:	080810e0 	stmdaeq	r8, {r5, r6, r7, ip}
 8009d20:	00e01008 	rsceq	r1, r0, r8
 8009d24:	2020100f 	eorcs	r1, r0, pc
 8009d28:	000f1020 	andeq	r1, pc, r0, lsr #32
 8009d2c:	0808f808 	stmdaeq	r8, {r3, fp, ip, sp, lr, pc}
 8009d30:	00f00808 	rscseq	r0, r0, r8, lsl #16
 8009d34:	01213f20 			; <UNDEFINED> instruction: 0x01213f20
 8009d38:	00000101 	andeq	r0, r0, r1, lsl #2
 8009d3c:	080810e0 	stmdaeq	r8, {r5, r6, r7, ip}
 8009d40:	00e01008 	rsceq	r1, r0, r8
 8009d44:	2424180f 	strtcs	r1, [r4], #-2063	; 0xfffff7f1
 8009d48:	004f5038 	subeq	r5, pc, r8, lsr r0	; <UNPREDICTABLE>
 8009d4c:	8888f808 	stmhi	r8, {r3, fp, ip, sp, lr, pc}
 8009d50:	00708888 	rsbseq	r8, r0, r8, lsl #17
 8009d54:	00203f20 	eoreq	r3, r0, r0, lsr #30
 8009d58:	20300c03 	eorscs	r0, r0, r3, lsl #24
 8009d5c:	08887000 	stmeq	r8, {ip, sp, lr}
 8009d60:	00380808 	eorseq	r0, r8, r8, lsl #16
 8009d64:	21203800 			; <UNDEFINED> instruction: 0x21203800
 8009d68:	001c2221 	andseq	r2, ip, r1, lsr #4
 8009d6c:	f8080818 			; <UNDEFINED> instruction: 0xf8080818
 8009d70:	00180808 	andseq	r0, r8, r8, lsl #16
 8009d74:	3f200000 	svccc	0x00200000
 8009d78:	00000020 	andeq	r0, r0, r0, lsr #32
 8009d7c:	0008f808 	andeq	pc, r8, r8, lsl #16
 8009d80:	08f80800 	ldmeq	r8!, {fp}^
 8009d84:	20201f00 	eorcs	r1, r0, r0, lsl #30
 8009d88:	001f2020 	andseq	r2, pc, r0, lsr #32
 8009d8c:	00887808 	addeq	r7, r8, r8, lsl #16
 8009d90:	0838c800 	ldmdaeq	r8!, {fp, lr, pc}
 8009d94:	38070000 	stmdacc	r7, {}	; <UNPREDICTABLE>
 8009d98:	0000010e 	andeq	r0, r0, lr, lsl #2
 8009d9c:	f80008f8 			; <UNDEFINED> instruction: 0xf80008f8
 8009da0:	00f80800 	rscseq	r0, r8, r0, lsl #16
 8009da4:	00073c03 	andeq	r3, r7, r3, lsl #24
 8009da8:	00033c07 	andeq	r3, r3, r7, lsl #24
 8009dac:	80681808 	rsbhi	r1, r8, r8, lsl #16
 8009db0:	08186880 	ldmdaeq	r8, {r7, fp, sp, lr}
 8009db4:	032c3020 			; <UNDEFINED> instruction: 0x032c3020
 8009db8:	20302c03 	eorscs	r2, r0, r3, lsl #24
 8009dbc:	00c83808 	sbceq	r3, r8, r8, lsl #16
 8009dc0:	000838c8 	andeq	r3, r8, r8, asr #17
 8009dc4:	3f200000 	svccc	0x00200000
 8009dc8:	00000020 	andeq	r0, r0, r0, lsr #32
 8009dcc:	08080810 	stmdaeq	r8, {r4, fp}
 8009dd0:	000838c8 	andeq	r3, r8, r8, asr #17
 8009dd4:	21263820 			; <UNDEFINED> instruction: 0x21263820
 8009dd8:	00182020 	andseq	r2, r8, r0, lsr #32
 8009ddc:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
 8009de0:	00020202 	andeq	r0, r2, r2, lsl #4
 8009de4:	7f000000 	svcvc	0x00000000
 8009de8:	00404040 	subeq	r4, r0, r0, asr #32
 8009dec:	c0300c00 	eorsgt	r0, r0, r0, lsl #24
 8009df0:	00000000 	andeq	r0, r0, r0
 8009df4:	01000000 	mrseq	r0, (UNDEF: 0)
 8009df8:	00c03806 	sbceq	r3, r0, r6, lsl #16
 8009dfc:	02020200 	andeq	r0, r2, #0, 4
 8009e00:	000000fe 	strdeq	r0, [r0], -lr
 8009e04:	40404000 	submi	r4, r0, r0
 8009e08:	0000007f 	andeq	r0, r0, pc, ror r0
 8009e0c:	02040000 	andeq	r0, r4, #0
 8009e10:	00040202 	andeq	r0, r4, r2, lsl #4
	...
 8009e24:	80808080 	addhi	r8, r0, r0, lsl #1
 8009e28:	80808080 	addhi	r8, r0, r0, lsl #1
 8009e2c:	04020200 	streq	r0, [r2], #-512	; 0xfffffe00
	...
 8009e3c:	80800000 	addhi	r0, r0, r0
 8009e40:	00008080 	andeq	r8, r0, r0, lsl #1
 8009e44:	22241900 	eorcs	r1, r4, #0, 18
 8009e48:	203f2222 	eorscs	r2, pc, r2, lsr #4
 8009e4c:	8000f808 	andhi	pc, r0, r8, lsl #16
 8009e50:	00000080 	andeq	r0, r0, r0, lsl #1
 8009e54:	20113f00 	andscs	r3, r1, r0, lsl #30
 8009e58:	000e1120 	andeq	r1, lr, r0, lsr #2
 8009e5c:	80000000 	andhi	r0, r0, r0
 8009e60:	00008080 	andeq	r8, r0, r0, lsl #1
 8009e64:	20110e00 	andscs	r0, r1, r0, lsl #28
 8009e68:	00112020 	andseq	r2, r1, r0, lsr #32
 8009e6c:	80000000 	andhi	r0, r0, r0
 8009e70:	00f88880 	rscseq	r8, r8, r0, lsl #17
 8009e74:	20110e00 	andscs	r0, r1, r0, lsl #28
 8009e78:	203f1020 	eorscs	r1, pc, r0, lsr #32
 8009e7c:	80800000 	addhi	r0, r0, r0
 8009e80:	00008080 	andeq	r8, r0, r0, lsl #1
 8009e84:	22221f00 	eorcs	r1, r2, #0, 30
 8009e88:	00132222 	andseq	r2, r3, r2, lsr #4
 8009e8c:	f0808000 			; <UNDEFINED> instruction: 0xf0808000
 8009e90:	18888888 	stmne	r8, {r3, r7, fp, pc}
 8009e94:	3f202000 	svccc	0x00202000
 8009e98:	00002020 	andeq	r2, r0, r0, lsr #32
 8009e9c:	80800000 	addhi	r0, r0, r0
 8009ea0:	00808080 	addeq	r8, r0, r0, lsl #1
 8009ea4:	94946b00 	ldrls	r6, [r4], #2816	; 0xb00
 8009ea8:	00609394 	mlseq	r0, r4, r3, r9
 8009eac:	8000f808 	andhi	pc, r0, r8, lsl #16
 8009eb0:	00008080 	andeq	r8, r0, r0, lsl #1
 8009eb4:	00213f20 	eoreq	r3, r1, r0, lsr #30
 8009eb8:	203f2000 	eorscs	r2, pc, r0
 8009ebc:	98988000 	ldmls	r8, {pc}
 8009ec0:	00000000 	andeq	r0, r0, r0
 8009ec4:	3f202000 	svccc	0x00202000
 8009ec8:	00002020 	andeq	r2, r0, r0, lsr #32
 8009ecc:	80000000 	andhi	r0, r0, r0
 8009ed0:	00009898 	muleq	r0, r8, r8
 8009ed4:	8080c000 	addhi	ip, r0, r0
 8009ed8:	00007f80 	andeq	r7, r0, r0, lsl #31
 8009edc:	0000f808 	andeq	pc, r0, r8, lsl #16
 8009ee0:	00808080 	addeq	r8, r0, r0, lsl #1
 8009ee4:	02243f20 	eoreq	r3, r4, #32, 30	; 0x80
 8009ee8:	0020302d 	eoreq	r3, r0, sp, lsr #32
 8009eec:	f8080800 			; <UNDEFINED> instruction: 0xf8080800
 8009ef0:	00000000 	andeq	r0, r0, r0
 8009ef4:	3f202000 	svccc	0x00202000
 8009ef8:	00002020 	andeq	r2, r0, r0, lsr #32
 8009efc:	80808080 	addhi	r8, r0, r0, lsl #1
 8009f00:	00808080 	addeq	r8, r0, r0, lsl #1
 8009f04:	00203f20 	eoreq	r3, r0, r0, lsr #30
 8009f08:	3f00203f 	svccc	0x0000203f
 8009f0c:	80008080 	andhi	r8, r0, r0, lsl #1
 8009f10:	00008080 	andeq	r8, r0, r0, lsl #1
 8009f14:	00213f20 	eoreq	r3, r1, r0, lsr #30
 8009f18:	203f2000 	eorscs	r2, pc, r0
 8009f1c:	80800000 	addhi	r0, r0, r0
 8009f20:	00008080 	andeq	r8, r0, r0, lsl #1
 8009f24:	20201f00 	eorcs	r1, r0, r0, lsl #30
 8009f28:	001f2020 	andseq	r2, pc, r0, lsr #32
 8009f2c:	80008080 	andhi	r8, r0, r0, lsl #1
 8009f30:	00000080 	andeq	r0, r0, r0, lsl #1
 8009f34:	20a1ff80 	adccs	pc, r1, r0, lsl #31
 8009f38:	000e1120 	andeq	r1, lr, r0, lsr #2
 8009f3c:	80000000 	andhi	r0, r0, r0
 8009f40:	00808080 	addeq	r8, r0, r0, lsl #1
 8009f44:	20110e00 	andscs	r0, r1, r0, lsl #28
 8009f48:	80ffa020 	rscshi	sl, pc, r0, lsr #32
 8009f4c:	00808080 	addeq	r8, r0, r0, lsl #1
 8009f50:	00808080 	addeq	r8, r0, r0, lsl #1
 8009f54:	213f2020 	teqcs	pc, r0, lsr #32
 8009f58:	00010020 	andeq	r0, r1, r0, lsr #32
 8009f5c:	80800000 	addhi	r0, r0, r0
 8009f60:	00808080 	addeq	r8, r0, r0, lsl #1
 8009f64:	24243300 	strtcs	r3, [r4], #-768	; 0xfffffd00
 8009f68:	00192424 	andseq	r2, r9, r4, lsr #8
 8009f6c:	e0808000 	add	r8, r0, r0
 8009f70:	00008080 	andeq	r8, r0, r0, lsl #1
 8009f74:	1f000000 	svcne	0x00000000
 8009f78:	00002020 	andeq	r2, r0, r0, lsr #32
 8009f7c:	00008080 	andeq	r8, r0, r0, lsl #1
 8009f80:	00808000 	addeq	r8, r0, r0
 8009f84:	20201f00 	eorcs	r1, r0, r0, lsl #30
 8009f88:	203f1020 	eorscs	r1, pc, r0, lsr #32
 8009f8c:	00808080 	addeq	r8, r0, r0, lsl #1
 8009f90:	80808000 	addhi	r8, r0, r0
 8009f94:	300e0100 	andcc	r0, lr, r0, lsl #2
 8009f98:	00010608 	andeq	r0, r1, r8, lsl #12
 8009f9c:	80008080 	andhi	r8, r0, r0, lsl #1
 8009fa0:	80808000 	addhi	r8, r0, r0
 8009fa4:	030c300f 	movweq	r3, #49167	; 0xc00f
 8009fa8:	000f300c 	andeq	r3, pc, ip
 8009fac:	00808000 	addeq	r8, r0, r0
 8009fb0:	00808080 	addeq	r8, r0, r0, lsl #1
 8009fb4:	2e312000 	cdpcs	0, 3, cr2, cr1, cr0, {0}
 8009fb8:	0020310e 	eoreq	r3, r0, lr, lsl #2
 8009fbc:	00808080 	addeq	r8, r0, r0, lsl #1
 8009fc0:	80808000 	addhi	r8, r0, r0
 8009fc4:	708e8180 	addvc	r8, lr, r0, lsl #3
 8009fc8:	00010618 	andeq	r0, r1, r8, lsl r6
 8009fcc:	80808000 	addhi	r8, r0, r0
 8009fd0:	00808080 	addeq	r8, r0, r0, lsl #1
 8009fd4:	2c302100 	ldfcss	f2, [r0], #-0
 8009fd8:	00302122 	eorseq	r2, r0, r2, lsr #2
 8009fdc:	00000000 	andeq	r0, r0, r0
 8009fe0:	02027c80 	andeq	r7, r2, #128, 24	; 0x8000
 8009fe4:	00000000 	andeq	r0, r0, r0
 8009fe8:	40403f00 	submi	r3, r0, r0, lsl #30
 8009fec:	00000000 	andeq	r0, r0, r0
 8009ff0:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 8009ff4:	00000000 	andeq	r0, r0, r0
 8009ff8:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 8009ffc:	7c020200 	sfmvc	f0, 4, [r2], {-0}
 800a000:	00000080 	andeq	r0, r0, r0, lsl #1
 800a004:	3f404000 	svccc	0x00404000
 800a008:	00000000 	andeq	r0, r0, r0
 800a00c:	01010600 	tsteq	r1, r0, lsl #12
 800a010:	04040202 	streq	r0, [r4], #-514	; 0xfffffdfe
	...

0800a01c <MQTT_BROKER_IP>:
 800a01c:	00000000 	andeq	r0, r0, r0

0800a020 <memsize>:
 800a020:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800a024:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800a028:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800a02c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800a030:	00000043 	andeq	r0, r0, r3, asr #32
 800a034:	2b302d23 	blcs	8c154c8 <_etext+0xc0b458>
 800a038:	00000020 	andeq	r0, r0, r0, lsr #32
 800a03c:	004c6c68 	subeq	r6, ip, r8, ror #24
 800a040:	45676665 	strbmi	r6, [r7, #-1637]!	; 0xfffff99b
 800a044:	00004746 	andeq	r4, r0, r6, asr #14
 800a048:	33323130 	teqcc	r2, #48, 2
 800a04c:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800a050:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
 800a054:	46454443 	strbmi	r4, [r5], -r3, asr #8
 800a058:	00000000 	andeq	r0, r0, r0
 800a05c:	33323130 	teqcc	r2, #48, 2
 800a060:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800a064:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
 800a068:	66656463 	strbtvs	r6, [r5], -r3, ror #8
 800a06c:	00000000 	andeq	r0, r0, r0

Disassembly of section .data:

20000000 <_impure_ptr>:
20000000:	20000004 	andcs	r0, r0, r4

20000004 <impure_data>:
	...
20000024:	0800a030 	stmdaeq	r0, {r4, r5, sp, pc}
	...

20000064 <oled_init>:
20000064:	401000ae 	andsmi	r0, r0, lr, lsr #1
20000068:	a1ff81b0 	ldrhge	r8, [pc, #16]	; 20000080 <sock_any_port>
2000006c:	c83fa8a6 	ldmdagt	pc!, {r1, r2, r5, r7, fp, sp, pc}	; <UNPREDICTABLE>
20000070:	80d500d3 	ldrsbhi	r0, [r5], #3
20000074:	f1d905d8 			; <UNDEFINED> instruction: 0xf1d905d8
20000078:	30db12da 	ldrsbcc	r1, [fp], #42	; 0x2a
2000007c:	00af148d 	adceq	r1, pc, sp, lsl #9

20000080 <sock_any_port>:
20000080:	0000c000 	andeq	ip, r0, r0

20000084 <WIZCHIP>:
20000084:	35570201 	ldrbcc	r0, [r7, #-513]	; 0xfffffdff
20000088:	00303035 	eorseq	r3, r0, r5, lsr r0
2000008c:	0800277d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, sl, sp}
20000090:	08002789 	stmdaeq	r0, {r0, r3, r7, r8, r9, sl, sp}
20000094:	08002795 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, sl, sp}
20000098:	080027a1 	stmdaeq	r0, {r0, r5, r7, r8, r9, sl, sp}
2000009c:	080027ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, sl, sp}
200000a0:	080027c5 	stmdaeq	r0, {r0, r2, r6, r7, r8, r9, sl, sp}

200000a4 <HOST_NAME>:
200000a4:	41534454 	cmpmi	r3, r4, asr r4
200000a8:	00005453 	andeq	r5, r0, r3, asr r4

200000ac <dhcp_ip_assign>:
200000ac:	0800372d 	stmdaeq	r0, {r0, r2, r3, r5, r8, r9, sl, ip, sp}

200000b0 <dhcp_ip_update>:
200000b0:	08003739 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9, sl, ip, sp}

200000b4 <dhcp_ip_conflict>:
200000b4:	08003761 	stmdaeq	r0, {r0, r5, r6, r8, r9, sl, ip, sp}

200000b8 <APBAHBPrescTable>:
200000b8:	00000000 	andeq	r0, r0, r0
200000bc:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
200000c0:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
200000c4:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

200000c8 <ADCPrescTable>:
200000c8:	08060402 	stmdaeq	r6, {r1, sl}

200000cc <gWIZNETINFO>:
200000cc:	00dc0800 	sbcseq	r0, ip, r0, lsl #16
200000d0:	000acdab 	andeq	ip, sl, fp, lsr #27
200000d4:	00fffd00 	rscseq	pc, pc, r0, lsl #26
200000d8:	000a0000 	andeq	r0, sl, r0
200000dc:	08080100 	stmdaeq	r8, {r8}
200000e0:	00020808 	andeq	r0, r2, r8, lsl #16

200000e4 <secondary_dns_server>:
200000e4:	04040808 	streq	r0, [r4], #-2056	; 0xfffff7f8

200000e8 <uxCriticalNesting>:
200000e8:	aaaaaaaa 	bge	1eaaab98 <__exidx_end+0x16aa0b28>

Disassembly of section .bss:

200000ec <__malloc_free_list>:
200000ec:	00000000 	andeq	r0, r0, r0

200000f0 <__malloc_sbrk_start>:
200000f0:	00000000 	andeq	r0, r0, r0

200000f4 <heap_end.4167>:
200000f4:	00000000 	andeq	r0, r0, r0

200000f8 <sock_io_mode>:
	...

200000fa <sock_is_sending>:
	...

200000fc <sock_remained_size>:
	...

2000010c <sock_pack_info>:
	...

20000114 <_DNS_>:
20000114:	00000000 	andeq	r0, r0, r0

20000118 <_DHCP_>:
20000118:	00000000 	andeq	r0, r0, r0

2000011c <DHCP_allocated_ip>:
2000011c:	00000000 	andeq	r0, r0, r0

20000120 <DHCP_allocated_gw>:
20000120:	00000000 	andeq	r0, r0, r0

20000124 <DHCP_allocated_sn>:
20000124:	00000000 	andeq	r0, r0, r0

20000128 <DHCP_allocated_dns>:
20000128:	00000000 	andeq	r0, r0, r0

2000012c <wizchip_mac>:
	...

20000134 <Cip>:
20000134:	00000000 	andeq	r0, r0, r0

20000138 <retry_count.6115>:
20000138:	00000000 	andeq	r0, r0, r0

2000013c <timeSecond.5993>:
2000013c:	00000000 	andeq	r0, r0, r0

20000140 <Interval_counter>:
20000140:	00000000 	andeq	r0, r0, r0

20000144 <Timer2_Counter>:
20000144:	00000000 	andeq	r0, r0, r0

20000148 <infoMsg>:
20000148:	00000000 	andeq	r0, r0, r0

2000014c <ip_configed>:
	...

2000014d <lock_status>:
	...

2000014e <force_lock>:
	...

20000150 <pxCurrentTCB>:
20000150:	00000000 	andeq	r0, r0, r0

20000154 <pxReadyTasksLists>:
	...

200001b8 <xDelayedTaskList1>:
	...

200001cc <xDelayedTaskList2>:
	...

200001e0 <pxDelayedTaskList>:
200001e0:	00000000 	andeq	r0, r0, r0

200001e4 <pxOverflowDelayedTaskList>:
200001e4:	00000000 	andeq	r0, r0, r0

200001e8 <xPendingReadyList>:
	...

200001fc <xSuspendedTaskList>:
	...

20000210 <uxCurrentNumberOfTasks>:
20000210:	00000000 	andeq	r0, r0, r0

20000214 <xTickCount>:
20000214:	00000000 	andeq	r0, r0, r0

20000218 <uxTopReadyPriority>:
20000218:	00000000 	andeq	r0, r0, r0

2000021c <xSchedulerRunning>:
2000021c:	00000000 	andeq	r0, r0, r0

20000220 <uxPendedTicks>:
20000220:	00000000 	andeq	r0, r0, r0

20000224 <xYieldPending>:
20000224:	00000000 	andeq	r0, r0, r0

20000228 <xNumOfOverflows>:
20000228:	00000000 	andeq	r0, r0, r0

2000022c <uxTaskNumber>:
2000022c:	00000000 	andeq	r0, r0, r0

20000230 <xNextTaskUnblockTime>:
20000230:	00000000 	andeq	r0, r0, r0

20000234 <xIdleTaskHandle>:
20000234:	00000000 	andeq	r0, r0, r0

20000238 <uxSchedulerSuspended>:
20000238:	00000000 	andeq	r0, r0, r0

2000023c <ucHeap>:
	...

2000363c <xNextFreeByte>:
2000363c:	00000000 	andeq	r0, r0, r0

20003640 <pucAlignedHeap.5153>:
20003640:	00000000 	andeq	r0, r0, r0

20003644 <dhcp_state>:
20003644:	00000000 	andeq	r0, r0, r0

20003648 <DHCP_SHA>:
	...

20003650 <OLD_SIP>:
20003650:	00000000 	andeq	r0, r0, r0

20003654 <DHCP_XID>:
20003654:	00000000 	andeq	r0, r0, r0

20003658 <DHCP_SIP>:
20003658:	00000000 	andeq	r0, r0, r0

2000365c <my_time>:
2000365c:	00000000 	andeq	r0, r0, r0

20003660 <next_time>:
20003660:	00000000 	andeq	r0, r0, r0

20003664 <retry_count>:
20003664:	00000000 	andeq	r0, r0, r0

20003668 <lease_time>:
20003668:	00000000 	andeq	r0, r0, r0

2000366c <MSG>:
2000366c:	00000000 	andeq	r0, r0, r0

20003670 <DHCP_SOCKET>:
20003670:	00000000 	andeq	r0, r0, r0

20003674 <dns_buf>:
20003674:	00000000 	andeq	r0, r0, r0

20003678 <DNS_SOCKET>:
20003678:	00000000 	andeq	r0, r0, r0

2000367c <dns_time>:
2000367c:	00000000 	andeq	r0, r0, r0

20003680 <MSG_ID>:
20003680:	00000000 	andeq	r0, r0, r0

20003684 <packet_buffer>:
	...

20003a84 <lockNotify>:
20003a84:	00000000 	andeq	r0, r0, r0

20003a88 <mainTask>:
20003a88:	00000000 	andeq	r0, r0, r0

20003a8c <lockTask>:
20003a8c:	00000000 	andeq	r0, r0, r0

20003a90 <server_ip>:
20003a90:	00000000 	andeq	r0, r0, r0

20003a94 <broker>:
	...

20003af0 <gDATABUF>:
	...

200042f0 <dhcpClientTask>:
200042f0:	00000000 	andeq	r0, r0, r0

200042f4 <socketLock>:
200042f4:	00000000 	andeq	r0, r0, r0

200042f8 <oledTask>:
200042f8:	00000000 	andeq	r0, r0, r0

200042fc <errno>:
200042fc:	00000000 	andeq	r0, r0, r0

Disassembly of section ._user_heap_stack:

20004300 <end>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
{
   0:	00003041 	andeq	r3, r0, r1, asr #32
}
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
*********************************************************************************************************
*/
uint32_t getDHCPLeasetime(void)
{
	return lease_time.lVal;
}
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
}
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
}
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
  {
    bitstatus = SET;
  1c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
  }
  else
  {
    bitstatus = RESET;
  20:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  }
  /* Return the flag status */
  return bitstatus;
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
}
  28:	1a011803 	bne	4603c <_Min_Stack_Size+0x45e3c>
  2c:	22061e01 	andcs	r1, r6, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
{
       0:	00000443 	andeq	r0, r0, r3, asr #8
}
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000111 	andeq	r0, r0, r1, lsl r1
      10:	0000000c 	andeq	r0, r0, ip
	...
    bitstatus = RESET;
      20:	06010200 	streq	r0, [r1], -r0, lsl #4
  return bitstatus;
      24:	00000192 	muleq	r0, r2, r1
}
      28:	0000e303 	andeq	lr, r0, r3, lsl #6
      2c:	331d0200 	tstcc	sp, #0, 4
      30:	02000000 	andeq	r0, r0, #0
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
      34:	01900801 	orrseq	r0, r0, r1, lsl #16
      38:	02020000 	andeq	r0, r2, #0
      3c:	00009505 	andeq	r9, r0, r5, lsl #10
}
      40:	00720300 	rsbseq	r0, r2, r0, lsl #6
      44:	2b020000 	blcs	8004c <_Min_Stack_Size+0x7fe4c>
      48:	0000004c 	andeq	r0, r0, ip, asr #32
      4c:	f2070202 	vhsub.s8	d0, d7, d2
      50:	02000001 	andeq	r0, r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
      54:	00bd0504 	adcseq	r0, sp, r4, lsl #10
}
      58:	67030000 	strvs	r0, [r3, -r0]
	for(y=y0;y<y1;y++){
        /* 开始发送命令 */
        Driver_OLED_Send_START(OLED_COMMAND);
		Driver_OLED_Set_Position(x0,y);
        /* 开始发送数据 */
        Driver_OLED_Send_START(OLED_DATA);
      5c:	02000000 	andeq	r0, r0, #0
        for(x=x0;x<x1;x++){ 
      60:	00006541 	andeq	r6, r0, r1, asr #10
            I2C_SendData(OLED_HARDWARE, BMP[j++]);
      64:	07040200 	streq	r0, [r4, -r0, lsl #4]
      68:	000001c9 	andeq	r0, r0, r9, asr #3
      6c:	b8050802 	stmdalt	r5, {r1, fp}
      70:	02000000 	andeq	r0, r0, #0
      74:	01c40708 	biceq	r0, r4, r8, lsl #14
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);    	
      78:	04040000 	streq	r0, [r4], #-0
      7c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
      80:	07040200 	streq	r0, [r4, -r0, lsl #4]
      84:	000001ce 	andeq	r0, r0, lr, asr #3
        for(x=x0;x<x1;x++){ 
      88:	0000e503 	andeq	lr, r0, r3, lsl #10
      8c:	28180300 	ldmdacs	r8, {r8, r9}
      90:	03000000 	movweq	r0, #0
      94:	00000074 	andeq	r0, r0, r4, ror r0
	    }
        /* 等待最后一个数据发送完 */
        _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
      98:	00412403 	subeq	r2, r1, r3, lsl #8
      9c:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
      a0:	03000000 	movweq	r0, #0
      a4:	00005a30 	andeq	r5, r0, r0, lsr sl
	for(y=y0;y<y1;y++){
      a8:	07040200 	streq	r0, [r4, -r0, lsl #4]
      ac:	00000059 	andeq	r0, r0, r9, asr r0
      b0:	00009e05 	andeq	r9, r0, r5, lsl #28
	}
    
}
      b4:	00880500 	addeq	r0, r8, r0, lsl #10
      b8:	74060000 	strvc	r0, [r6], #-0
      bc:	01a79b04 			; <UNDEFINED> instruction: 0x01a79b04
      c0:	87070000 	strhi	r0, [r7, -r0]
      c4:	04000000 	streq	r0, [r0], #-0
}
      c8:	0001a79d 	muleq	r1, sp, r7
      cc:	9f070000 	svcls	0x00070000
      d0:	04000000 	streq	r0, [r0], #-0
      d4:	0000b09e 	muleq	r0, lr, r0
      d8:	05070400 	streq	r0, [r7, #-1024]	; 0xfffffc00
      dc:	04000002 	streq	r0, [r0], #-2
}
      e0:	0000b09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      e4:	9e070800 	cdpls	8, 0, cr0, cr7, cr0, {0}
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      e8:	04000001 	streq	r0, [r0], #-1
      ec:	0000b0a0 	andeq	fp, r0, r0, lsr #1
      f0:	53080c00 	movwpl	r0, #35840	; 0x8c00
				prvUnlockQueue( pxQueue );
      f4:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
      f8:	0000b0a1 	andeq	fp, r0, r1, lsr #1
				if( xTaskResumeAll() == pdFALSE )
      fc:	43081000 	movwmi	r1, #32768	; 0x8000
     100:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
					portYIELD_WITHIN_API();
     104:	0000b0a2 	andeq	fp, r0, r2, lsr #1
     108:	53081400 	movwpl	r1, #33792	; 0x8400
     10c:	04005048 	streq	r5, [r0], #-72	; 0xffffffb8
     110:	0001bca3 	andeq	fp, r1, r3, lsr #25
     114:	db071800 	blle	1c611c <_Min_Stack_Size+0x1c5f1c>
				prvUnlockQueue( pxQueue );
     118:	04000001 	streq	r0, [r0], #-1
				( void ) xTaskResumeAll();
     11c:	0000b0a4 	andeq	fp, r0, r4, lsr #1
     120:	f2072400 	vshl.s8	d2, d0, d7
			prvUnlockQueue( pxQueue );
     124:	04000000 	streq	r0, [r0], #-0
			( void ) xTaskResumeAll();
     128:	0000b0a5 	andeq	fp, r0, r5, lsr #1
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     12c:	3a072800 	bcc	1ca134 <_Min_Stack_Size+0x1c9f34>
     130:	04000002 	streq	r0, [r0], #-2
     134:	0000b0a6 	andeq	fp, r0, r6, lsr #1
     138:	25072c00 	strcs	r2, [r7, #-3072]	; 0xfffff400
}
     13c:	04000002 	streq	r0, [r0], #-2
     140:	0000b0a7 	andeq	fp, r0, r7, lsr #1
     144:	e1073000 	mrs	r3, (UNDEF: 7)
	}
     148:	04000001 	streq	r0, [r0], #-1
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     14c:	0000b0a8 	andeq	fp, r0, r8, lsr #1
  SPIx->I2SCFGR = tmpreg;   
     150:	c6073400 	strgt	r3, [r7], -r0, lsl #8
     154:	04000000 	streq	r0, [r0], #-0
}
     158:	0000b0a9 	andeq	fp, r0, r9, lsr #1
     15c:	50073800 	andpl	r3, r7, r0, lsl #16
     160:	04000002 	streq	r0, [r0], #-2
     164:	0000b0aa 	andeq	fp, r0, sl, lsr #1
         *(uint16_t*) arg = getSn_DPORT(sn);
         break;
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
         *(uint16_t*) arg = getSn_KPALVTR(sn);
     168:	50083c00 	andpl	r3, r8, r0, lsl #24
         break;
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     16c:	04005246 	streq	r5, [r0], #-582	; 0xfffffdba
     170:	0001d6ab 	andeq	sp, r1, fp, lsr #13
     174:	44084000 	strmi	r4, [r8], #-0
     178:	04005246 	streq	r5, [r0], #-582	; 0xfffffdba
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     17c:	0001a7ac 	andeq	sl, r1, ip, lsr #15
     180:	41084800 	tstmi	r8, r0, lsl #16
     184:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
     188:	0001a7ad 	andeq	sl, r1, sp, lsr #15
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
     18c:	3f074c00 	svccc	0x00074c00
     190:	04000002 	streq	r0, [r0], #-2
     194:	0001f0ae 	andeq	pc, r1, lr, lsr #1
     198:	20075000 	andcs	r5, r7, r0
     19c:	04000002 	streq	r0, [r0], #-2
     1a0:	00020aaf 	andeq	r0, r2, pc, lsr #21
     1a4:	09006000 	stmdbeq	r0, {sp, lr}
         break;
      case SO_REMAINSIZE:
         if(getSn_MR(sn) == Sn_MR_TCP)
     1a8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     1ac:	0000b50a 	andeq	fp, r0, sl, lsl #10
     1b0:	0001bc00 	andeq	fp, r1, r0, lsl #24
     1b4:	00a90b00 	adceq	r0, r9, r0, lsl #22
     1b8:	000b0000 	andeq	r0, fp, r0
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1bc:	0001ac05 	andeq	sl, r1, r5, lsl #24
     1c0:	01a70a00 			; <UNDEFINED> instruction: 0x01a70a00
     1c4:	01d10000 	bicseq	r0, r1, r0
     1c8:	a90b0000 	stmdbge	fp, {}	; <UNPREDICTABLE>
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
     1cc:	01000000 	mrseq	r0, (UNDEF: 0)
            *(uint16_t*)arg = sock_remained_size[sn];
     1d0:	01c10500 	biceq	r0, r1, r0, lsl #10
     1d4:	d1090000 	mrsle	r0, (UNDEF: 9)
     1d8:	0a000001 	beq	1e4 <_Min_Heap_Size+0x1e4>
      case SO_PACKINFO:
         CHECK_SOCKMODE(Sn_MR_TCP);
     1dc:	000001a7 	andeq	r0, r0, r7, lsr #3
     1e0:	000001eb 	andeq	r0, r0, fp, ror #3
     1e4:	0000a90b 	andeq	sl, r0, fp, lsl #18
     1e8:	05000300 	streq	r0, [r0, #-768]	; 0xfffffd00
     1ec:	000001db 	ldrdeq	r0, [r0], -fp
     1f0:	0001eb09 	andeq	lr, r1, r9, lsl #22
     1f4:	01a70a00 			; <UNDEFINED> instruction: 0x01a70a00
     1f8:	02050000 	andeq	r0, r5, #0
         *(uint8_t*)arg = sock_pack_info[sn];
     1fc:	a90b0000 	stmdbge	fp, {}	; <UNPREDICTABLE>
     200:	04000000 	streq	r0, [r0], #-0
         break;
     204:	01f50500 	mvnseq	r0, r0, lsl #10
      default:
         return SOCKERR_SOCKOPT;
     208:	05090000 	streq	r0, [r9, #-0]
   }
   return SOCK_OK;
     20c:	03000002 	movweq	r0, #2
}
     210:	000001a4 	andeq	r0, r0, r4, lsr #3
     214:	00bab004 	adcseq	fp, sl, r4
     218:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
     21c:	05000000 	streq	r0, [r0, #-0]
}
     220:	0000021a 	andeq	r0, r0, sl, lsl r2
     224:	0033010c 	eorseq	r0, r3, ip, lsl #2
     228:	07050000 	streq	r0, [r5, -r0]
	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     22c:	00023e02 	andeq	r3, r2, r2, lsl #28
     230:	1c740d00 	ldclne	13, cr0, [r4], #-0
     234:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     238:	00544553 	subseq	r4, r4, r3, asr r5
     23c:	240f0001 	strcs	r0, [pc], #-1	; 244 <_Min_Stack_Size+0x44>
     240:	ba038505 	blt	e165c <_Min_Stack_Size+0xe145c>
     244:	10000002 	andne	r0, r0, r2
     248:	00524341 	subseq	r4, r2, r1, asr #6
     24c:	b0038705 	andlt	r8, r3, r5, lsl #14
     250:	00000000 	andeq	r0, r0, r0
	memset(packet, 0, sizeof(packet));
     254:	0000b311 	andeq	fp, r0, r1, lsl r3
     258:	03880500 	orreq	r0, r8, #0, 10
     25c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
	memcpy(packet, fixed_header, sizeof(fixed_header));
     260:	00b01104 	adcseq	r1, r0, r4, lsl #2
     264:	89050000 	stmdbhi	r5, {}	; <UNPREDICTABLE>
     268:	0000b003 	andeq	fp, r0, r3
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	53100800 	tstpl	r0, #0, 16
     270:	8a050052 	bhi	1403c0 <_Min_Stack_Size+0x1401c0>
     274:	0000b003 	andeq	fp, r0, r3
     278:	43100c00 	tstmi	r0, #0, 24
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     27c:	8b050052 	blhi	1403cc <_Min_Stack_Size+0x1401cc>
     280:	0000b003 	andeq	fp, r0, r3
     284:	41101000 	tstmi	r0, r0
     288:	8c050052 	stchi	0, cr0, [r5], {82}	; 0x52
     28c:	0000b003 	andeq	fp, r0, r3
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     290:	55111400 	ldrpl	r1, [r1, #-1024]	; 0xfffffc00
     294:	05000002 	streq	r0, [r0, #-2]
     298:	00b0038d 	adcseq	r0, r0, sp, lsl #7
     29c:	10180000 	andsne	r0, r8, r0
     2a0:	0052424f 	subseq	r4, r2, pc, asr #4
		return -1;
     2a4:	b0038e05 	andlt	r8, r3, r5, lsl #28
     2a8:	1c000000 	stcne	0, cr0, [r0], {-0}
	return 1;
     2ac:	0000ed11 	andeq	lr, r0, r1, lsl sp
}
     2b0:	038f0500 	orreq	r0, pc, #0, 10
     2b4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     2b8:	5e120020 	cdppl	0, 1, cr0, cr2, cr0, {1}
     2bc:	05000002 	streq	r0, [r0, #-2]
     2c0:	023e0398 	eorseq	r0, lr, #152, 6	; 0x60000002
     2c4:	280f0000 	stmdacs	pc, {}	; <UNPREDICTABLE>
     2c8:	51043405 	tstpl	r4, r5, lsl #8
     2cc:	10000003 	andne	r0, r0, r3
     2d0:	05005243 	streq	r5, [r0, #-579]	; 0xfffffdbd
     2d4:	00b00436 	adcseq	r0, r0, r6, lsr r4
     2d8:	11000000 	mrsne	r0, (UNDEF: 0)
     2dc:	00002166 	andeq	r2, r0, r6, ror #2
     2e0:	b0043705 	andlt	r3, r4, r5, lsl #14
     2e4:	04000000 	streq	r0, [r0], #-0
     2e8:	52494310 	subpl	r4, r9, #16, 6	; 0x40000000
     2ec:	04380500 	ldrteq	r0, [r8], #-1280	; 0xfffffb00
     2f0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     2f4:	00da1108 	sbcseq	r1, sl, r8, lsl #2
     2f8:	39050000 	stmdbcc	r5, {}	; <UNPREDICTABLE>
     2fc:	0000b004 	andeq	fp, r0, r4
     300:	50110c00 	andspl	r0, r1, r0, lsl #24
     304:	05000000 	streq	r0, [r0, #-0]
     308:	00b0043a 	adcseq	r0, r0, sl, lsr r4
     30c:	11100000 	tstne	r0, r0
     310:	000000d3 	ldrdeq	r0, [r0], -r3
     314:	b0043b05 	andlt	r3, r4, r5, lsl #22
     318:	14000000 	strne	r0, [r0], #-0
     31c:	0001ad11 	andeq	sl, r1, r1, lsl sp
     320:	043c0500 	ldrteq	r0, [ip], #-1280	; 0xfffffb00
     324:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     328:	008d1118 	addeq	r1, sp, r8, lsl r1
     32c:	3d050000 	stccc	0, cr0, [r5, #-0]
     330:	0000b004 	andeq	fp, r0, r4
     334:	62111c00 	andsvs	r1, r1, #0, 24
     338:	05000000 	streq	r0, [r0, #-0]
     33c:	00b0043e 	adcseq	r0, r0, lr, lsr r4
     340:	10200000 	eorne	r0, r0, r0
     344:	00525343 	subseq	r5, r2, r3, asr #6
     348:	b0043f05 	andlt	r3, r4, r5, lsl #30
     34c:	24000000 	strcs	r0, [r0], #-0
     350:	00a41200 	adceq	r1, r4, r0, lsl #4
     354:	4a050000 	bmi	14035c <_Min_Stack_Size+0x14015c>
     358:	0002c604 	andeq	ip, r2, r4, lsl #12
     35c:	01e71300 	mvneq	r1, r0, lsl #6
     360:	d4010000 	strle	r0, [r1], #-0
     364:	080012e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip}
     368:	00000068 	andeq	r0, r0, r8, rrx
     36c:	0a149c01 	beq	527378 <_Min_Stack_Size+0x527178>
     370:	01000002 	tsteq	r0, r2
     374:	00000132 	andeq	r0, r0, r2, lsr r1
     378:	00d80000 	sbcseq	r0, r8, r0
     37c:	9c010000 	stcls	0, cr0, [r1], {-0}
     380:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
     384:	706d7415 	rsbvc	r7, sp, r5, lsl r4
     388:	01340100 	teqeq	r4, r0, lsl #2
     38c:	0000009e 	muleq	r0, lr, r0
     390:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     394:	000000cb 	andeq	r0, r0, fp, asr #1
     398:	9e013401 	cdpls	4, 0, cr3, cr1, cr1, {0}
     39c:	02000000 	andeq	r0, r0, #0
     3a0:	07167091 			; <UNDEFINED> instruction: 0x07167091
     3a4:	01000001 	tsteq	r0, r1
     3a8:	009e0134 	addseq	r0, lr, r4, lsr r1
     3ac:	91020000 	mrsls	r0, (UNDEF: 2)
     3b0:	4417006c 	ldrmi	r0, [r7], #-108	; 0xffffff94
     3b4:	01000002 	tsteq	r0, r2
     3b8:	134c01a3 	movtne	r0, #49571	; 0xc1a3
     3bc:	000c0800 	andeq	r0, ip, r0, lsl #16
     3c0:	9c010000 	stcls	0, cr0, [r1], {-0}
     3c4:	0000f718 	andeq	pc, r0, r8, lsl r7	; <UNPREDICTABLE>
     3c8:	03dc0100 	bicseq	r0, ip, #0, 2
     3cc:	08001358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip}
     3d0:	00000100 	andeq	r0, r0, r0, lsl #2
     3d4:	03f99c01 	mvnseq	r9, #256	; 0x100
     3d8:	b5160000 	ldrlt	r0, [r6, #-0]
     3dc:	01000001 	tsteq	r0, r1
     3e0:	00b003de 	ldrsbteq	r0, [r0], lr
     3e4:	91020000 	mrsls	r0, (UNDEF: 2)
     3e8:	007d1674 	rsbseq	r1, sp, r4, ror r6
     3ec:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
     3f0:	0000b003 	andeq	fp, r0, r3
     3f4:	70910200 	addsvc	r0, r1, r0, lsl #4
     3f8:	026c1900 	rsbeq	r1, ip, #0, 18
     3fc:	ce040000 	cdpgt	0, 0, cr0, cr4, cr0, {0}
     400:	00040506 	andeq	r0, r4, r6, lsl #10
     404:	007a0500 	rsbseq	r0, sl, r0, lsl #10
     408:	2a1a0000 	bcs	680410 <_Min_Stack_Size+0x680210>
     40c:	01000002 	tsteq	r0, r2
     410:	00009ea2 	andeq	r9, r0, r2, lsr #29
     414:	00030500 	andeq	r0, r3, r0, lsl #10
     418:	0a000000 	beq	420 <_Min_Stack_Size+0x220>
     41c:	0000021f 	andeq	r0, r0, pc, lsl r2
     420:	0000042b 	andeq	r0, r0, fp, lsr #8
     424:	0000a90b 	andeq	sl, r0, fp, lsl #18
     428:	1a000f00 	bne	4030 <_Min_Stack_Size+0x3e30>
     42c:	00001b0a 	andeq	r1, r0, sl, lsl #22
     430:	0441a701 	strbeq	sl, [r1], #-1793	; 0xfffff8ff
     434:	03050000 	movweq	r0, #20480	; 0x5000
     438:	00000000 	andeq	r0, r0, r0
     43c:	00041b05 	andeq	r1, r4, r5, lsl #22
     440:	043c0900 	ldrteq	r0, [ip], #-2304	; 0xfffff700
     444:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     448:	04000005 	streq	r0, [r0], #-5
     44c:	00017900 	andeq	r7, r1, r0, lsl #18
     450:	11010400 	tstne	r1, r0, lsl #8
     454:	0c000001 	stceq	0, cr0, [r0], {1}
     458:	00000304 	andeq	r0, r0, r4, lsl #6
     45c:	0000036e 	andeq	r0, r0, lr, ror #6
     460:	00000028 	andeq	r0, r0, r8, lsr #32
     464:	00000000 	andeq	r0, r0, r0
     468:	000001c1 	andeq	r0, r0, r1, asr #3
     46c:	92060102 	andls	r0, r6, #-2147483648	; 0x80000000
     470:	03000001 	movweq	r0, #1
     474:	000000e3 	andeq	r0, r0, r3, ror #1
     478:	00371d02 	eorseq	r1, r7, r2, lsl #26
     47c:	01020000 	mrseq	r0, (UNDEF: 2)
     480:	00019008 	andeq	r9, r1, r8
     484:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
     488:	00000095 	muleq	r0, r5, r0
     48c:	00007203 	andeq	r7, r0, r3, lsl #4
     490:	502b0200 	eorpl	r0, fp, r0, lsl #4
     494:	02000000 	andeq	r0, r0, #0
     498:	01f20702 	mvnseq	r0, r2, lsl #14
     49c:	04020000 	streq	r0, [r2], #-0
     4a0:	0000bd05 	andeq	fp, r0, r5, lsl #26
     4a4:	00670300 	rsbeq	r0, r7, r0, lsl #6
     4a8:	41020000 	mrsmi	r0, (UNDEF: 2)
     4ac:	00000069 	andeq	r0, r0, r9, rrx
     4b0:	c9070402 	stmdbgt	r7, {r1, sl}
     4b4:	02000001 	andeq	r0, r0, #1
     4b8:	00b80508 	adcseq	r0, r8, r8, lsl #10
     4bc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     4c0:	0001c407 	andeq	ip, r1, r7, lsl #8
     4c4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
     4c8:	00746e69 	rsbseq	r6, r4, r9, ror #28
     4cc:	ce070402 	cdpgt	4, 0, cr0, cr7, cr2, {0}
     4d0:	02000001 	andeq	r0, r0, #1
     4d4:	02f80408 	rscseq	r0, r8, #8, 8	; 0x8000000
     4d8:	04020000 	streq	r0, [r2], #-0
     4dc:	00005907 	andeq	r5, r0, r7, lsl #18
     4e0:	08010200 	stmdaeq	r1, {r9}
     4e4:	00000199 	muleq	r0, r9, r1
     4e8:	0000e503 	andeq	lr, r0, r3, lsl #10
     4ec:	2c180300 	ldccs	3, cr0, [r8], {-0}
     4f0:	03000000 	movweq	r0, #0
     4f4:	00000074 	andeq	r0, r0, r4, ror r0
     4f8:	00452403 	subeq	r2, r5, r3, lsl #8
     4fc:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
     500:	03000000 	movweq	r0, #0
     504:	00005e30 	andeq	r5, r0, r0, lsr lr
     508:	00ac0500 	adceq	r0, ip, r0, lsl #10
     50c:	a1060000 	mrsge	r0, (UNDEF: 6)
     510:	07000000 	streq	r0, [r0, -r0]
     514:	00003701 	andeq	r3, r0, r1, lsl #14
     518:	02070400 	andeq	r0, r7, #0, 8
     51c:	000000e6 	andeq	r0, r0, r6, ror #1
     520:	001c7408 	andseq	r7, ip, r8, lsl #8
     524:	53090000 	movwpl	r0, #36864	; 0x9000
     528:	01005445 	tsteq	r0, r5, asr #8
     52c:	37010700 	strcc	r0, [r1, -r0, lsl #14]
     530:	04000000 	streq	r0, [r0], #-0
     534:	01000209 	tsteq	r0, r9, lsl #4
     538:	f0080000 			; <UNDEFINED> instruction: 0xf0080000
     53c:	00000002 	andeq	r0, r0, r2
     540:	00046208 	andeq	r6, r4, r8, lsl #4
     544:	07000100 	streq	r0, [r0, -r0, lsl #2]
     548:	00003701 	andeq	r3, r0, r1, lsl #14
     54c:	020c0400 	andeq	r0, ip, #0, 8
     550:	0000011a 	andeq	r0, r0, sl, lsl r1
     554:	00034108 	andeq	r4, r3, r8, lsl #2
     558:	15080000 	strne	r0, [r8, #-0]
     55c:	01000014 	tsteq	r0, r4, lsl r0
     560:	04240a00 	strteq	r0, [r4], #-2560	; 0xfffff600
     564:	020d0404 	andeq	r0, sp, #4, 8	; 0x4000000
     568:	430b0000 	movwmi	r0, #45056	; 0xb000
     56c:	04003152 	streq	r3, [r0], #-338	; 0xfffffeae
     570:	00c20406 	sbceq	r0, r2, r6, lsl #8
     574:	0c000000 	stceq	0, cr0, [r0], {-0}
     578:	000003c2 	andeq	r0, r0, r2, asr #7
     57c:	ac040704 	stcge	7, cr0, [r4], {4}
     580:	02000000 	andeq	r0, r0, #0
     584:	3252430b 	subscc	r4, r2, #738197504	; 0x2c000000
     588:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
     58c:	000000c2 	andeq	r0, r0, r2, asr #1
     590:	03cc0c04 	biceq	r0, ip, #4, 24	; 0x400
     594:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     598:	0000ac04 	andeq	sl, r0, r4, lsl #24
     59c:	b80c0600 	stmdalt	ip, {r9, sl}
     5a0:	04000003 	streq	r0, [r0], #-3
     5a4:	00c2040a 	sbceq	r0, r2, sl, lsl #8
     5a8:	0c080000 	stceq	0, cr0, [r8], {-0}
     5ac:	000003d6 	ldrdeq	r0, [r0], -r6
     5b0:	ac040b04 			; <UNDEFINED> instruction: 0xac040b04
     5b4:	0a000000 	beq	5bc <_Min_Stack_Size+0x3bc>
     5b8:	0003bd0c 	andeq	fp, r3, ip, lsl #26
     5bc:	040c0400 	streq	r0, [ip], #-1024	; 0xfffffc00
     5c0:	000000c2 	andeq	r0, r0, r2, asr #1
     5c4:	02ab0c0c 	adceq	r0, fp, #12, 24	; 0xc00
     5c8:	0d040000 	stceq	0, cr0, [r4, #-0]
     5cc:	0000ac04 	andeq	sl, r0, r4, lsl #24
     5d0:	440b0e00 	strmi	r0, [fp], #-3584	; 0xfffff200
     5d4:	0e040052 	mcreq	0, 0, r0, cr4, cr2, {2}
     5d8:	0000c204 	andeq	ip, r0, r4, lsl #4
     5dc:	ea0c1000 	b	3045e4 <_Min_Stack_Size+0x3043e4>
     5e0:	04000003 	streq	r0, [r0], #-3
     5e4:	00ac040f 	adceq	r0, ip, pc, lsl #8
     5e8:	0b120000 	bleq	4805f0 <_Min_Stack_Size+0x4803f0>
     5ec:	00315253 	eorseq	r5, r1, r3, asr r2
     5f0:	c2041004 	andgt	r1, r4, #4
     5f4:	14000000 	strne	r0, [r0], #-0
     5f8:	0003f40c 	andeq	pc, r3, ip, lsl #8
     5fc:	04110400 	ldreq	r0, [r1], #-1024	; 0xfffffc00
     600:	000000ac 	andeq	r0, r0, ip, lsr #1
     604:	52530b16 	subspl	r0, r3, #22528	; 0x5800
     608:	12040032 	andne	r0, r4, #50	; 0x32
     60c:	0000c204 	andeq	ip, r0, r4, lsl #4
     610:	d70c1800 	strle	r1, [ip, -r0, lsl #16]
     614:	04000002 	streq	r0, [r0], #-2
     618:	00ac0413 	adceq	r0, ip, r3, lsl r4
     61c:	0b1a0000 	bleq	680624 <_Min_Stack_Size+0x680424>
     620:	00524343 	subseq	r4, r2, r3, asr #6
     624:	c2041404 	andgt	r1, r4, #4, 8	; 0x4000000
     628:	1c000000 	stcne	0, cr0, [r0], {-0}
     62c:	0004150c 	andeq	r1, r4, ip, lsl #10
     630:	04150400 	ldreq	r0, [r5], #-1024	; 0xfffffc00
     634:	000000ac 	andeq	r0, r0, ip, lsr #1
     638:	044b0c1e 	strbeq	r0, [fp], #-3102	; 0xfffff3e2
     63c:	16040000 	strne	r0, [r4], -r0
     640:	0000c204 	andeq	ip, r0, r4, lsl #4
     644:	1f0c2000 	svcne	0x000c2000
     648:	04000004 	streq	r0, [r0], #-4
     64c:	00ac0417 	adceq	r0, ip, r7, lsl r4
     650:	00220000 	eoreq	r0, r2, r0
     654:	0003470d 	andeq	r4, r3, sp, lsl #14
     658:	04180400 	ldreq	r0, [r8], #-1024	; 0xfffffc00
     65c:	0000011a 	andeq	r0, r0, sl, lsl r1
     660:	0003fe0e 	andeq	pc, r3, lr, lsl #28
     664:	58130100 	ldmdapl	r3, {r8}
     668:	7c080014 	stcvc	0, cr0, [r8], {20}
     66c:	01000000 	mrseq	r0, (UNDEF: 0)
     670:	00023d9c 	muleq	r2, ip, sp
     674:	04510f00 	ldrbeq	r0, [r1], #-3840	; 0xfffff100
     678:	13010000 	movwne	r0, #4096	; 0x1000
     67c:	000000b7 	strheq	r0, [r0], -r7
     680:	00749102 	rsbseq	r9, r4, r2, lsl #2
     684:	00028f0e 	andeq	r8, r2, lr, lsl #30
     688:	d4290100 	strtle	r0, [r9], #-256	; 0xffffff00
     68c:	64080014 	strvs	r0, [r8], #-20	; 0xffffffec
     690:	01000000 	mrseq	r0, (UNDEF: 0)
     694:	00027b9c 	muleq	r2, ip, fp
     698:	02ce0f00 	sbceq	r0, lr, #0, 30
     69c:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
     6a0:	0000027b 	andeq	r0, r0, fp, ror r2
     6a4:	0f6c9102 	svceq	0x006c9102
     6a8:	00003a5e 	andeq	r3, r0, lr, asr sl
     6ac:	00b72901 	adcseq	r2, r7, r1, lsl #18
     6b0:	91020000 	mrsls	r0, (UNDEF: 2)
     6b4:	00691068 	rsbeq	r1, r9, r8, rrx
     6b8:	00b72b01 	adcseq	r2, r7, r1, lsl #22
     6bc:	91020000 	mrsls	r0, (UNDEF: 2)
     6c0:	04110074 	ldreq	r0, [r1], #-116	; 0xffffff8c
     6c4:	000000a1 	andeq	r0, r0, r1, lsr #1
     6c8:	0003860e 	andeq	r8, r3, lr, lsl #12
     6cc:	38390100 	ldmdacc	r9!, {r8}
     6d0:	b0080015 	andlt	r0, r8, r5, lsl r0
     6d4:	01000000 	mrseq	r0, (UNDEF: 0)
     6d8:	0002cb9c 	muleq	r2, ip, fp
     6dc:	0dec0f00 	stcleq	15, cr0, [ip]
     6e0:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
     6e4:	000000a1 	andeq	r0, r0, r1, lsr #1
     6e8:	106f9102 	rsbne	r9, pc, r2, lsl #2
     6ec:	3a010069 	bcc	40898 <_Min_Stack_Size+0x40698>
     6f0:	000000a1 	andeq	r0, r0, r1, lsr #1
     6f4:	10779102 	rsbsne	r9, r7, r2, lsl #2
     6f8:	3a01006a 	bcc	408a8 <_Min_Stack_Size+0x406a8>
     6fc:	000000a1 	andeq	r0, r0, r1, lsr #1
     700:	12769102 	rsbsne	r9, r6, #-2147483648	; 0x80000000
     704:	0000045a 	andeq	r0, r0, sl, asr r4
     708:	02cb3c01 	sbceq	r3, fp, #256	; 0x100
     70c:	91020000 	mrsls	r0, (UNDEF: 2)
     710:	a1130074 	tstge	r3, r4, ror r0
     714:	db000000 	blle	71c <_Min_Stack_Size+0x51c>
     718:	14000002 	strne	r0, [r0], #-2
     71c:	00000093 	muleq	r0, r3, r0
     720:	590e0001 	stmdbpl	lr, {r0}
     724:	01000003 	tsteq	r0, r3
     728:	0015e855 	andseq	lr, r5, r5, asr r8
     72c:	00009c08 	andeq	r9, r0, r8, lsl #24
     730:	199c0100 	ldmibne	ip, {r8}
     734:	0f000003 	svceq	0x00000003
     738:	000002eb 	andeq	r0, r0, fp, ror #5
     73c:	00a15501 	adceq	r5, r1, r1, lsl #10
     740:	91020000 	mrsls	r0, (UNDEF: 2)
     744:	006a106f 	rsbeq	r1, sl, pc, rrx
     748:	00a15601 	adceq	r5, r1, r1, lsl #12
     74c:	91020000 	mrsls	r0, (UNDEF: 2)
     750:	045a1277 	ldrbeq	r1, [sl], #-631	; 0xfffffd89
     754:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
     758:	000002cb 	andeq	r0, r0, fp, asr #5
     75c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     760:	0002b50e 	andeq	fp, r2, lr, lsl #10
     764:	846e0100 	strbthi	r0, [lr], #-256	; 0xffffff00
     768:	88080016 	stmdahi	r8, {r1, r2, r4}
     76c:	01000000 	mrseq	r0, (UNDEF: 0)
     770:	0003479c 	muleq	r3, ip, r7
     774:	00781500 	rsbseq	r1, r8, r0, lsl #10
     778:	00a16e01 	adceq	r6, r1, r1, lsl #28
     77c:	91020000 	mrsls	r0, (UNDEF: 2)
     780:	00791577 	rsbseq	r1, r9, r7, ror r5
     784:	00a16e01 	adceq	r6, r1, r1, lsl #28
     788:	91020000 	mrsls	r0, (UNDEF: 2)
     78c:	970e0076 	smlsdxls	lr, r6, r0, r0
     790:	01000003 	tsteq	r0, r3
     794:	00170c7a 	andseq	r0, r7, sl, ror ip
     798:	0001ac08 	andeq	sl, r1, r8, lsl #24
     79c:	b99c0100 	ldmiblt	ip, {r8}
     7a0:	15000003 	strne	r0, [r0, #-3]
     7a4:	7a010078 	bvc	4098c <_Min_Stack_Size+0x4078c>
     7a8:	000000a1 	andeq	r0, r0, r1, lsr #1
     7ac:	15679102 	strbne	r9, [r7, #-258]!	; 0xfffffefe
     7b0:	7a010079 	bvc	4099c <_Min_Stack_Size+0x4079c>
     7b4:	000000a1 	andeq	r0, r0, r1, lsr #1
     7b8:	15669102 	strbne	r9, [r6, #-258]!	; 0xfffffefe
     7bc:	00726863 	rsbseq	r6, r2, r3, ror #16
     7c0:	00a17a01 	adceq	r7, r1, r1, lsl #20
     7c4:	91020000 	mrsls	r0, (UNDEF: 2)
     7c8:	04420f65 	strbeq	r0, [r2], #-3941	; 0xfffff09b
     7cc:	7a010000 	bvc	407d4 <_Min_Stack_Size+0x405d4>
     7d0:	000000a1 	andeq	r0, r0, r1, lsr #1
     7d4:	0f649102 	svceq	0x00649102
     7d8:	00000353 	andeq	r0, r0, r3, asr r3
     7dc:	00a17a01 	adceq	r7, r1, r1, lsl #20
     7e0:	91020000 	mrsls	r0, (UNDEF: 2)
     7e4:	03e01200 	mvneq	r1, #0, 4
     7e8:	7b010000 	blvc	407f0 <_Min_Stack_Size+0x405f0>
     7ec:	000000a1 	andeq	r0, r0, r1, lsr #1
     7f0:	106e9102 	rsbne	r9, lr, r2, lsl #2
     7f4:	7b010069 	blvc	409a0 <_Min_Stack_Size+0x407a0>
     7f8:	000000a1 	andeq	r0, r0, r1, lsr #1
     7fc:	006f9102 	rsbeq	r9, pc, r2, lsl #2
     800:	00032a0e 	andeq	r2, r3, lr, lsl #20
     804:	b8a50100 	stmialt	r5!, {r8}
     808:	84080018 	strhi	r0, [r8], #-24	; 0xffffffe8
     80c:	01000000 	mrseq	r0, (UNDEF: 0)
     810:	00041d9c 	muleq	r4, ip, sp
     814:	00781500 	rsbseq	r1, r8, r0, lsl #10
     818:	00a1a501 	adceq	sl, r1, r1, lsl #10
     81c:	91020000 	mrsls	r0, (UNDEF: 2)
     820:	00791567 	rsbseq	r1, r9, r7, ror #10
     824:	00a1a501 	adceq	sl, r1, r1, lsl #10
     828:	91020000 	mrsls	r0, (UNDEF: 2)
     82c:	68631566 	stmdavs	r3!, {r1, r2, r5, r6, r8, sl, ip}^
     830:	a5010072 	strge	r0, [r1, #-114]	; 0xffffff8e
     834:	0000027b 	andeq	r0, r0, fp, ror r2
     838:	0f609102 	svceq	0x00609102
     83c:	000002e1 	andeq	r0, r0, r1, ror #5
     840:	00a1a501 	adceq	sl, r1, r1, lsl #10
     844:	91020000 	mrsls	r0, (UNDEF: 2)
     848:	03530f65 	cmpeq	r3, #404	; 0x194
     84c:	a5010000 	strge	r0, [r1, #-0]
     850:	000000a1 	andeq	r0, r0, r1, lsr #1
     854:	10009102 	andne	r9, r0, r2, lsl #2
     858:	a601006a 	strge	r0, [r1], -sl, rrx
     85c:	000000a1 	andeq	r0, r0, r1, lsr #1
     860:	006f9102 	rsbeq	r9, pc, r2, lsl #2
     864:	00042e0e 	andeq	r2, r4, lr, lsl #28
     868:	00b60100 	adcseq	r0, r6, r0, lsl #2
     86c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     870:	01000000 	mrseq	r0, (UNDEF: 0)
     874:	0004999c 	muleq	r4, ip, r9
     878:	30781500 	rsbscc	r1, r8, r0, lsl #10
     87c:	a1b60100 			; <UNDEFINED> instruction: 0xa1b60100
     880:	02000000 	andeq	r0, r0, #0
     884:	79156791 	ldmdbvc	r5, {r0, r4, r7, r8, r9, sl, sp, lr}
     888:	b6010030 			; <UNDEFINED> instruction: 0xb6010030
     88c:	000000a1 	andeq	r0, r0, r1, lsr #1
     890:	15669102 	strbne	r9, [r6, #-258]!	; 0xfffffefe
     894:	01003178 	tsteq	r0, r8, ror r1
     898:	0000a1b6 			; <UNDEFINED> instruction: 0x0000a1b6
     89c:	65910200 	ldrvs	r0, [r1, #512]	; 0x200
     8a0:	00317915 	eorseq	r7, r1, r5, lsl r9
     8a4:	00a1b601 	adceq	fp, r1, r1, lsl #12
     8a8:	91020000 	mrsls	r0, (UNDEF: 2)
     8ac:	4d421564 	cfstr64mi	mvdx1, [r2, #-400]	; 0xfffffe70
     8b0:	b6010050 			; <UNDEFINED> instruction: 0xb6010050
     8b4:	00000499 	muleq	r0, r9, r4
     8b8:	10009102 	andne	r9, r0, r2, lsl #2
     8bc:	b701006a 	strlt	r0, [r1, -sl, rrx]
     8c0:	000000b7 	strheq	r0, [r0], -r7
     8c4:	106c9102 	rsbne	r9, ip, r2, lsl #2
     8c8:	b8010078 	stmdalt	r1, {r3, r4, r5, r6}
     8cc:	000000a1 	andeq	r0, r0, r1, lsr #1
     8d0:	106b9102 	rsbne	r9, fp, r2, lsl #2
     8d4:	b8010079 	stmdalt	r1, {r0, r3, r4, r5, r6}
     8d8:	000000a1 	andeq	r0, r0, r1, lsr #1
     8dc:	006a9102 	rsbeq	r9, sl, r2, lsl #2
     8e0:	00c70411 	sbceq	r0, r7, r1, lsl r4
     8e4:	6c160000 	ldcvs	0, cr0, [r6], {-0}
     8e8:	05000002 	streq	r0, [r0, #-2]
     8ec:	04ab06ce 	strteq	r0, [fp], #1742	; 0x6ce
     8f0:	7e050000 	cdpvc	0, 0, cr0, cr5, cr0, {0}
     8f4:	13000000 	movwne	r0, #0
     8f8:	000004c6 	andeq	r0, r0, r6, asr #9
     8fc:	000004c6 	andeq	r0, r0, r6, asr #9
     900:	00009314 	andeq	r9, r0, r4, lsl r3
     904:	93145f00 	tstls	r4, #0, 30
     908:	05000000 	streq	r0, [r0, #-0]
     90c:	00370600 	eorseq	r0, r7, r0, lsl #12
     910:	29170000 	ldmdbcs	r7, {}	; <UNPREDICTABLE>
     914:	06000004 	streq	r0, [r0], -r4
     918:	0004dc09 	andeq	sp, r4, r9, lsl #24
     91c:	ec030500 	cfstr32	mvfx0, [r3], {-0}
     920:	06080097 			; <UNDEFINED> instruction: 0x06080097
     924:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
     928:	0004c613 	andeq	ip, r4, r3, lsl r6
     92c:	0004f200 	andeq	pc, r4, r0, lsl #4
     930:	00931800 	addseq	r1, r3, r0, lsl #16
     934:	05ef0000 	strbeq	r0, [pc, #0]!	; 93c <_Min_Stack_Size+0x73c>
     938:	02a51700 	adceq	r1, r5, #0, 14
     93c:	6d060000 	stcvs	0, cr0, [r6, #-0]
     940:	00000503 	andeq	r0, r0, r3, lsl #10
     944:	9a2c0305 	bls	b01560 <_Min_Stack_Size+0xb01360>
     948:	e1060800 	tst	r6, r0, lsl #16
     94c:	13000004 	movwne	r0, #4
     950:	000000a1 	andeq	r0, r0, r1, lsr #1
     954:	00000518 	andeq	r0, r0, r8, lsl r5
     958:	00009314 	andeq	r9, r0, r4, lsl r3
     95c:	17001a00 	strne	r1, [r0, -r0, lsl #20]
     960:	00000285 	andeq	r0, r0, r5, lsl #5
     964:	05080d01 	streq	r0, [r8, #-3329]	; 0xfffff2ff
     968:	03050000 	movweq	r0, #20480	; 0x5000
     96c:	20000064 	andcs	r0, r0, r4, rrx
     970:	0000a113 	andeq	sl, r0, r3, lsl r1
     974:	00053900 	andeq	r3, r5, r0, lsl #18
     978:	00931400 	addseq	r1, r3, r0, lsl #8
     97c:	00020000 	andeq	r0, r2, r0
     980:	0003ad17 	andeq	sl, r3, r7, lsl sp
     984:	290f0100 	stmdbcs	pc, {r8}	; <UNPREDICTABLE>
     988:	05000005 	streq	r0, [r0, #-5]
     98c:	00000003 	andeq	r0, r0, r3
     990:	02791700 	rsbseq	r1, r9, #0, 14
     994:	10010000 	andne	r0, r1, r0
     998:	00000529 	andeq	r0, r0, r9, lsr #10
     99c:	00000305 	andeq	r0, r0, r5, lsl #6
     9a0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     9a4:	04000006 	streq	r0, [r0], #-6
     9a8:	0002b300 	andeq	fp, r2, r0, lsl #6
     9ac:	11010400 	tstne	r1, r0, lsl #8
     9b0:	0c000001 	stceq	0, cr0, [r0], {1}
     9b4:	000005ce 	andeq	r0, r0, lr, asr #11
     9b8:	0000036e 	andeq	r0, r0, lr, ror #6
     9bc:	00000070 	andeq	r0, r0, r0, ror r0
     9c0:	00000000 	andeq	r0, r0, r0
     9c4:	0000050e 	andeq	r0, r0, lr, lsl #10
     9c8:	0004b302 	andeq	fp, r4, r2, lsl #6
     9cc:	301b0200 	andscc	r0, fp, r0, lsl #4
     9d0:	03000000 	movweq	r0, #0
     9d4:	01920601 	orrseq	r0, r2, r1, lsl #12
     9d8:	e3020000 	movw	r0, #8192	; 0x2000
     9dc:	02000000 	andeq	r0, r0, #0
     9e0:	0000421d 	andeq	r4, r0, sp, lsl r2
     9e4:	08010300 	stmdaeq	r1, {r8, r9}
     9e8:	00000190 	muleq	r0, r0, r1
     9ec:	95050203 	strls	r0, [r5, #-515]	; 0xfffffdfd
     9f0:	02000000 	andeq	r0, r0, #0
     9f4:	00000072 	andeq	r0, r0, r2, ror r0
     9f8:	005b2b02 	subseq	r2, fp, r2, lsl #22
     9fc:	02030000 	andeq	r0, r3, #0
     a00:	0001f207 	andeq	pc, r1, r7, lsl #4
     a04:	066f0200 	strbteq	r0, [pc], -r0, lsl #4
     a08:	3f020000 	svccc	0x00020000
     a0c:	0000006d 	andeq	r0, r0, sp, rrx
     a10:	bd050403 	cfstrslt	mvf0, [r5, #-12]
     a14:	02000000 	andeq	r0, r0, #0
     a18:	00000067 	andeq	r0, r0, r7, rrx
     a1c:	007f4102 	rsbseq	r4, pc, r2, lsl #2
     a20:	04030000 	streq	r0, [r3], #-0
     a24:	0001c907 	andeq	ip, r1, r7, lsl #18
     a28:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
     a2c:	000000b8 	strheq	r0, [r0], -r8
     a30:	c4070803 	strgt	r0, [r7], #-2051	; 0xfffff7fd
     a34:	04000001 	streq	r0, [r0], #-1
     a38:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     a3c:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
     a40:	0001ce07 	andeq	ip, r1, r7, lsl #28
     a44:	04b50200 	ldrteq	r0, [r5], #512	; 0x200
     a48:	14030000 	strne	r0, [r3], #-0
     a4c:	00000025 	andeq	r0, r0, r5, lsr #32
     a50:	0000e502 	andeq	lr, r0, r2, lsl #10
     a54:	37180300 	ldrcc	r0, [r8, -r0, lsl #6]
     a58:	02000000 	andeq	r0, r0, #0
     a5c:	00000074 	andeq	r0, r0, r4, ror r0
     a60:	00502403 	subseq	r2, r0, r3, lsl #8
     a64:	71020000 	mrsvc	r0, (UNDEF: 2)
     a68:	03000006 	movweq	r0, #6
     a6c:	0000622c 	andeq	r6, r0, ip, lsr #4
     a70:	00690200 	rsbeq	r0, r9, r0, lsl #4
     a74:	30030000 	andcc	r0, r3, r0
     a78:	00000074 	andeq	r0, r0, r4, ror r0
     a7c:	59070403 	stmdbpl	r7, {r0, r1, sl}
     a80:	05000000 	streq	r0, [r0, #-0]
     a84:	00004201 	andeq	r4, r0, r1, lsl #4
     a88:	014b0400 	cmpeq	fp, r0, lsl #8
     a8c:	00000112 	andeq	r0, r0, r2, lsl r1
     a90:	00055706 	andeq	r5, r5, r6, lsl #14
     a94:	bd060100 	stflts	f0, [r6, #-0]
     a98:	02000005 	andeq	r0, r0, #5
     a9c:	00060206 	andeq	r0, r6, r6, lsl #4
     aa0:	69060400 	stmdbvs	r6, {sl}
     aa4:	08000004 	stmdaeq	r0, {r2}
     aa8:	00054e06 	andeq	r4, r5, r6, lsl #28
     aac:	d1061000 	mrsle	r1, (UNDEF: 6)
     ab0:	1f000006 	svcne	0x00000006
     ab4:	42010500 	andmi	r0, r1, #0, 10
     ab8:	04000000 	streq	r0, [r0], #-0
     abc:	01500159 	cmpeq	r0, r9, asr r1
     ac0:	8d060000 	stchi	0, cr0, [r6, #-0]
     ac4:	00000006 	andeq	r0, r0, r6
     ac8:	0004bc06 	andeq	fp, r4, r6, lsl #24
     acc:	2f060100 	svccs	0x00060100
     ad0:	02000005 	andeq	r0, r0, #5
     ad4:	00047506 	andeq	r7, r4, r6, lsl #10
     ad8:	b2060300 	andlt	r0, r6, #0, 6
     adc:	04000006 	streq	r0, [r0], #-6
     ae0:	00058b06 	andeq	r8, r5, r6, lsl #22
     ae4:	3f060500 	svccc	0x00060500
     ae8:	06000005 	streq	r0, [r0], -r5
     aec:	00063506 	andeq	r3, r6, r6, lsl #10
     af0:	07000700 	streq	r0, [r0, -r0, lsl #14]
     af4:	00000510 	andeq	r0, r0, r0, lsl r5
     af8:	12016204 	andne	r6, r1, #4, 4	; 0x40000000
     afc:	05000001 	streq	r0, [r0, #-1]
     b00:	00004201 	andeq	r4, r0, r1, lsl #4
     b04:	016a0400 	cmneq	sl, r0, lsl #8
     b08:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     b0c:	0004d506 	andeq	sp, r4, r6, lsl #10
     b10:	1d060000 	stcne	0, cr0, [r6, #-0]
     b14:	01000005 	tsteq	r0, r5
     b18:	00060f06 	andeq	r0, r6, r6, lsl #30
     b1c:	6c060200 	sfmvs	f0, 4, [r6], {-0}
     b20:	03000005 	movweq	r0, #5
     b24:	0005f806 	andeq	pc, r5, r6, lsl #16
     b28:	a6060400 	strge	r0, [r6], -r0, lsl #8
     b2c:	05000006 	streq	r0, [r0, #-6]
     b30:	00065e06 	andeq	r5, r6, r6, lsl #28
     b34:	1f060600 	svcne	0x00060600
     b38:	07000006 	streq	r0, [r0, -r6]
     b3c:	00052406 	andeq	r2, r5, r6, lsl #8
     b40:	82060800 	andhi	r0, r6, #0, 16
     b44:	09000006 	stmdbeq	r0, {r1, r2}
     b48:	00049506 	andeq	r9, r4, r6, lsl #10
     b4c:	c3060a00 	movwgt	r0, #27136	; 0x6a00
     b50:	0b000006 	bleq	b70 <_Min_Stack_Size+0x970>
     b54:	0004dd06 	andeq	sp, r4, r6, lsl #26
     b58:	07000c00 	streq	r0, [r0, -r0, lsl #24]
     b5c:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     b60:	5c017c04 	stcpl	12, cr7, [r1], {4}
     b64:	08000001 	stmdaeq	r0, {r0}
     b68:	00000584 	andeq	r0, r0, r4, lsl #11
     b6c:	00a25001 	adceq	r5, r2, r1
     b70:	193c0000 	ldmdbne	ip!, {}	; <UNPREDICTABLE>
     b74:	02080800 	andeq	r0, r8, #0, 16
     b78:	9c010000 	stcls	0, cr0, [r1], {-0}
     b7c:	00000215 	andeq	r0, r0, r5, lsl r2
     b80:	006e7309 	rsbeq	r7, lr, r9, lsl #6
     b84:	00ad5001 	adceq	r5, sp, r1
     b88:	91020000 	mrsls	r0, (UNDEF: 2)
     b8c:	06160a6f 	ldreq	r0, [r6], -pc, ror #20
     b90:	50010000 	andpl	r0, r1, r0
     b94:	000000ad 	andeq	r0, r0, sp, lsr #1
     b98:	0a6e9102 	beq	1ba4fa8 <_Min_Stack_Size+0x1ba4da8>
     b9c:	00000f3e 	andeq	r0, r0, lr, lsr pc
     ba0:	00b85001 	adcseq	r5, r8, r1
     ba4:	91020000 	mrsls	r0, (UNDEF: 2)
     ba8:	13380a6c 	teqne	r8, #108, 20	; 0x6c000
     bac:	50010000 	andpl	r0, r1, r0
     bb0:	000000ad 	andeq	r0, r0, sp, lsr #1
     bb4:	006b9102 	rsbeq	r9, fp, r2, lsl #2
     bb8:	00533f08 	subseq	r3, r3, r8, lsl #30
     bbc:	a2910100 	addsge	r0, r1, #0, 2
     bc0:	44000000 	strmi	r0, [r0], #-0
     bc4:	b808001b 	stmdalt	r8, {r0, r1, r3, r4}
     bc8:	01000000 	mrseq	r0, (UNDEF: 0)
     bcc:	00023c9c 	muleq	r2, ip, ip
     bd0:	6e730900 	vaddvs.f16	s1, s6, s0	; <UNPREDICTABLE>
     bd4:	ad910100 	ldfges	f0, [r1]
     bd8:	02000000 	andeq	r0, r0, #0
     bdc:	08007791 	stmdaeq	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
     be0:	00000565 	andeq	r0, r0, r5, ror #10
     be4:	00a2a101 	adceq	sl, r2, r1, lsl #2
     be8:	00000000 	andeq	r0, r0, r0
     bec:	00ca0000 	sbceq	r0, sl, r0
     bf0:	9c010000 	stcls	0, cr0, [r1], {-0}
     bf4:	00000263 	andeq	r0, r0, r3, ror #4
     bf8:	006e7309 	rsbeq	r7, lr, r9, lsl #6
     bfc:	00ada101 	adceq	sl, sp, r1, lsl #2
     c00:	91020000 	mrsls	r0, (UNDEF: 2)
     c04:	d2080077 	andle	r0, r8, #119	; 0x77
     c08:	0100003b 	tsteq	r0, fp, lsr r0
     c0c:	0000a2b4 			; <UNDEFINED> instruction: 0x0000a2b4
     c10:	001bfc00 	andseq	pc, fp, r0, lsl #24
     c14:	00016c08 	andeq	r6, r1, r8, lsl #24
     c18:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
     c1c:	09000002 	stmdbeq	r0, {r1}
     c20:	01006e73 	tsteq	r0, r3, ror lr
     c24:	0000adb4 			; <UNDEFINED> instruction: 0x0000adb4
     c28:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     c2c:	000eb60a 	andeq	fp, lr, sl, lsl #12
     c30:	a6b40100 	ldrtge	r0, [r4], r0, lsl #2
     c34:	02000002 	andeq	r0, r0, #2
     c38:	3e0a7091 	mcrcc	0, 0, r7, cr10, cr1, {4}
     c3c:	0100000f 	tsteq	r0, pc
     c40:	0000b8b4 			; <UNDEFINED> instruction: 0x0000b8b4
     c44:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     c48:	ad040b00 	vstrge	d0, [r4, #-0]
     c4c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     c50:	00003c40 	andeq	r3, r0, r0, asr #24
     c54:	00a2d501 	adceq	sp, r2, r1, lsl #10
     c58:	00000000 	andeq	r0, r0, r0
     c5c:	00ec0000 	rsceq	r0, ip, r0
     c60:	9c010000 	stcls	0, cr0, [r1], {-0}
     c64:	000002d3 	ldrdeq	r0, [r0], -r3
     c68:	006e7309 	rsbeq	r7, lr, r9, lsl #6
     c6c:	00add501 	adceq	sp, sp, r1, lsl #10
     c70:	91020000 	mrsls	r0, (UNDEF: 2)
     c74:	b8080077 	stmdalt	r8, {r0, r1, r2, r4, r5, r6}
     c78:	01000005 	tsteq	r0, r5
     c7c:	0000c3e9 	andeq	ip, r0, r9, ror #7
     c80:	001d6800 	andseq	r6, sp, r0, lsl #16
     c84:	0001f408 	andeq	pc, r1, r8, lsl #8
     c88:	329c0100 	addscc	r0, ip, #0, 2
     c8c:	09000003 	stmdbeq	r0, {r0, r1}
     c90:	01006e73 	tsteq	r0, r3, ror lr
     c94:	0000ade9 	andeq	sl, r0, r9, ror #27
     c98:	6f910200 	svcvs	0x00910200
     c9c:	66756209 	ldrbtvs	r6, [r5], -r9, lsl #4
     ca0:	a6e90100 	strbtge	r0, [r9], r0, lsl #2
     ca4:	02000002 	andeq	r0, r0, #2
     ca8:	6c096891 	stcvs	8, cr6, [r9], {145}	; 0x91
     cac:	01006e65 	tsteq	r0, r5, ror #28
     cb0:	0000b8e9 	andeq	fp, r0, r9, ror #17
     cb4:	6c910200 	lfmvs	f0, 4, [r1], {0}
     cb8:	706d740c 	rsbvc	r7, sp, ip, lsl #8
     cbc:	adeb0100 	stfgee	f0, [fp]
     cc0:	02000000 	andeq	r0, r0, #0
     cc4:	020d7791 	andeq	r7, sp, #38010880	; 0x2440000
     cc8:	01000005 	tsteq	r0, r5
     ccc:	0000b8ec 	andeq	fp, r0, ip, ror #17
     cd0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     cd4:	050b0e00 	streq	r0, [fp, #-3584]	; 0xfffff200
     cd8:	24010000 	strcs	r0, [r1], #-0
     cdc:	0000c301 	andeq	ip, r0, r1, lsl #6
     ce0:	001f5c00 	andseq	r5, pc, r0, lsl #24
     ce4:	00016c08 	andeq	r6, r1, r8, lsl #24
     ce8:	979c0100 	ldrls	r0, [ip, r0, lsl #2]
     cec:	0f000003 	svceq	0x00000003
     cf0:	01006e73 	tsteq	r0, r3, ror lr
     cf4:	00ad0124 	adceq	r0, sp, r4, lsr #2
     cf8:	91020000 	mrsls	r0, (UNDEF: 2)
     cfc:	75620f67 	strbvc	r0, [r2, #-3943]!	; 0xfffff099
     d00:	24010066 	strcs	r0, [r1], #-102	; 0xffffff9a
     d04:	0002a601 	andeq	sl, r2, r1, lsl #12
     d08:	60910200 	addsvs	r0, r1, r0, lsl #4
     d0c:	6e656c0f 	cdpvs	12, 6, cr6, cr5, cr15, {0}
     d10:	01240100 			; <UNDEFINED> instruction: 0x01240100
     d14:	000000b8 	strheq	r0, [r0], -r8
     d18:	10649102 	rsbne	r9, r4, r2, lsl #2
     d1c:	00706d74 	rsbseq	r6, r0, r4, ror sp
     d20:	ad012601 	stcge	6, cr2, [r1, #-4]
     d24:	02000000 	andeq	r0, r0, #0
     d28:	79116f91 	ldmdbvc	r1, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
     d2c:	01000006 	tsteq	r0, r6
     d30:	00b80127 	adcseq	r0, r8, r7, lsr #2
     d34:	91020000 	mrsls	r0, (UNDEF: 2)
     d38:	570e006c 	strpl	r0, [lr, -ip, rrx]
     d3c:	01000006 	tsteq	r0, r6
     d40:	00c3014d 	sbceq	r0, r3, sp, asr #2
     d44:	20c80000 	sbccs	r0, r8, r0
     d48:	02080800 	andeq	r0, r8, #0, 16
     d4c:	9c010000 	stcls	0, cr0, [r1], {-0}
     d50:	0000041a 	andeq	r0, r0, sl, lsl r4
     d54:	006e730f 	rsbeq	r7, lr, pc, lsl #6
     d58:	ad014d01 	stcge	13, cr4, [r1, #-4]
     d5c:	02000000 	andeq	r0, r0, #0
     d60:	620f6f91 	andvs	r6, pc, #580	; 0x244
     d64:	01006675 	tsteq	r0, r5, ror r6
     d68:	02a6014d 	adceq	r0, r6, #1073741843	; 0x40000013
     d6c:	91020000 	mrsls	r0, (UNDEF: 2)
     d70:	656c0f68 	strbvs	r0, [ip, #-3944]!	; 0xfffff098
     d74:	4d01006e 	stcmi	0, cr0, [r1, #-440]	; 0xfffffe48
     d78:	0000b801 	andeq	fp, r0, r1, lsl #16
     d7c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     d80:	000eb612 	andeq	fp, lr, r2, lsl r6
     d84:	014d0100 	mrseq	r0, (UNDEF: 93)
     d88:	000002a6 	andeq	r0, r0, r6, lsr #5
     d8c:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
     d90:	00000f3e 	andeq	r0, r0, lr, lsr pc
     d94:	b8014d01 	stmdalt	r1, {r0, r8, sl, fp, lr}
     d98:	02000000 	andeq	r0, r0, #0
     d9c:	74100091 	ldrvc	r0, [r0], #-145	; 0xffffff6f
     da0:	0100706d 	tsteq	r0, sp, rrx
     da4:	00ad014f 	adceq	r0, sp, pc, asr #2
     da8:	91020000 	mrsls	r0, (UNDEF: 2)
     dac:	05021177 	streq	r1, [r2, #-375]	; 0xfffffe89
     db0:	50010000 	andpl	r0, r1, r0
     db4:	0000b801 	andeq	fp, r0, r1, lsl #16
     db8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     dbc:	04f90e00 	ldrbteq	r0, [r9], #3584	; 0xe00
     dc0:	8d010000 	stchi	0, cr0, [r1, #-0]
     dc4:	0000c301 	andeq	ip, r0, r1, lsl #6
     dc8:	0022d000 	eoreq	sp, r2, r0
     dcc:	0002fc08 	andeq	pc, r2, r8, lsl #24
     dd0:	ab9c0100 	blge	fe7011d8 <BootRAM+0xd671979>
     dd4:	0f000004 	svceq	0x00000004
     dd8:	01006e73 	tsteq	r0, r3, ror lr
     ddc:	00ad018d 	adceq	r0, sp, sp, lsl #3
     de0:	91020000 	mrsls	r0, (UNDEF: 2)
     de4:	75620f67 	strbvc	r0, [r2, #-3943]!	; 0xfffff099
     de8:	8d010066 	stchi	0, cr0, [r1, #-408]	; 0xfffffe68
     dec:	0002a601 	andeq	sl, r2, r1, lsl #12
     df0:	60910200 	addsvs	r0, r1, r0, lsl #4
     df4:	6e656c0f 	cdpvs	12, 6, cr6, cr5, cr15, {0}
     df8:	018d0100 	orreq	r0, sp, r0, lsl #2
     dfc:	000000b8 	strheq	r0, [r0], -r8
     e00:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
     e04:	00000eb6 			; <UNDEFINED> instruction: 0x00000eb6
     e08:	a6018d01 	strge	r8, [r1], -r1, lsl #26
     e0c:	02000002 	andeq	r0, r0, #2
     e10:	3e125c91 	mrccc	12, 0, r5, cr2, cr1, {4}
     e14:	0100000f 	tsteq	r0, pc
     e18:	04ab018d 	strteq	r0, [fp], #397	; 0x18d
     e1c:	91020000 	mrsls	r0, (UNDEF: 2)
     e20:	726d1000 	rsbvc	r1, sp, #0
     e24:	018f0100 	orreq	r0, pc, r0, lsl #2
     e28:	000000ad 	andeq	r0, r0, sp, lsr #1
     e2c:	11759102 	cmnne	r5, r2, lsl #2
     e30:	00000630 	andeq	r0, r0, r0, lsr r6
     e34:	b1019001 	tstlt	r1, r1
     e38:	02000004 	andeq	r0, r0, #4
     e3c:	8c116c91 	ldchi	12, cr6, [r1], {145}	; 0x91
     e40:	01000004 	tsteq	r0, r4
     e44:	00b80191 	umlalseq	r0, r8, r1, r1
     e48:	91020000 	mrsls	r0, (UNDEF: 2)
     e4c:	040b0076 	streq	r0, [fp], #-118	; 0xffffff8a
     e50:	000000b8 	strheq	r0, [r0], -r8
     e54:	0000ad13 	andeq	sl, r0, r3, lsl sp
     e58:	0004c100 	andeq	ip, r4, r0, lsl #2
     e5c:	00d91400 	sbcseq	r1, r9, r0, lsl #8
     e60:	00070000 	andeq	r0, r7, r0
     e64:	0005810e 	andeq	r8, r5, lr, lsl #2
     e68:	02010100 	andeq	r0, r1, #0, 2
     e6c:	000000a2 	andeq	r0, r0, r2, lsr #1
     e70:	080025cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, sp}
     e74:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     e78:	05179c01 	ldreq	r9, [r7, #-3073]	; 0xfffff3ff
     e7c:	730f0000 	movwvc	r0, #61440	; 0xf000
     e80:	0101006e 	tsteq	r1, lr, rrx
     e84:	0000ad02 	andeq	sl, r0, r2, lsl #26
     e88:	6f910200 	svcvs	0x00910200
     e8c:	0004ac12 	andeq	sl, r4, r2, lsl ip
     e90:	02010100 	andeq	r0, r1, #0, 2
     e94:	00000150 	andeq	r0, r0, r0, asr r1
     e98:	0f6e9102 	svceq	0x006e9102
     e9c:	00677261 	rsbeq	r7, r7, r1, ror #4
     ea0:	17020101 	strne	r0, [r2, -r1, lsl #2]
     ea4:	02000005 	andeq	r0, r0, #5
     ea8:	74106891 	ldrvc	r6, [r0], #-2193	; 0xfffff76f
     eac:	0100706d 	tsteq	r0, sp, rrx
     eb0:	00ad0203 	adceq	r0, sp, r3, lsl #4
     eb4:	91020000 	mrsls	r0, (UNDEF: 2)
     eb8:	04150077 	ldreq	r0, [r5], #-119	; 0xffffff89
     ebc:	00069b0e 	andeq	r9, r6, lr, lsl #22
     ec0:	02290100 	eoreq	r0, r9, #0, 2
     ec4:	000000a2 	andeq	r0, r0, r2, lsr #1
     ec8:	00000000 	andeq	r0, r0, r0
     ecc:	00000204 	andeq	r0, r0, r4, lsl #4
     ed0:	056f9c01 	strbeq	r9, [pc, #-3073]!	; 2d7 <_Min_Stack_Size+0xd7>
     ed4:	730f0000 	movwvc	r0, #61440	; 0xf000
     ed8:	2901006e 	stmdbcs	r1, {r1, r2, r3, r5, r6}
     edc:	0000ad02 	andeq	sl, r0, r2, lsl #26
     ee0:	6f910200 	svcvs	0x00910200
     ee4:	00048512 	andeq	r8, r4, r2, lsl r5
     ee8:	02290100 	eoreq	r0, r9, #0, 2
     eec:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     ef0:	0f6e9102 	svceq	0x006e9102
     ef4:	00677261 	rsbeq	r7, r7, r1, ror #4
     ef8:	17022901 	strne	r2, [r2, -r1, lsl #18]
     efc:	02000005 	andeq	r0, r0, #5
     f00:	74106891 	ldrvc	r6, [r0], #-2193	; 0xfffff76f
     f04:	0100706d 	tsteq	r0, sp, rrx
     f08:	00ad022b 	adceq	r0, sp, fp, lsr #4
     f0c:	91020000 	mrsls	r0, (UNDEF: 2)
     f10:	ca0e0077 	bgt	3810f4 <_Min_Stack_Size+0x380ef4>
     f14:	01000004 	tsteq	r0, r4
     f18:	00a2025b 	adceq	r0, r2, fp, asr r2
     f1c:	00000000 	andeq	r0, r0, r0
     f20:	02200000 	eoreq	r0, r0, #0
     f24:	9c010000 	stcls	0, cr0, [r1], {-0}
     f28:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
     f2c:	006e730f 	rsbeq	r7, lr, pc, lsl #6
     f30:	ad025b01 	vstrge	d5, [r2, #-4]
     f34:	02000000 	andeq	r0, r0, #0
     f38:	85126f91 	ldrhi	r6, [r2, #-3985]	; 0xfffff06f
     f3c:	01000004 	tsteq	r0, r4
     f40:	01b8025b 			; <UNDEFINED> instruction: 0x01b8025b
     f44:	91020000 	mrsls	r0, (UNDEF: 2)
     f48:	72610f6e 	rsbvc	r0, r1, #440	; 0x1b8
     f4c:	5b010067 	blpl	410f0 <_Min_Stack_Size+0x40ef0>
     f50:	00051702 	andeq	r1, r5, r2, lsl #14
     f54:	68910200 	ldmvs	r1, {r9}
     f58:	05730d00 	ldrbeq	r0, [r3, #-3328]!	; 0xfffff300
     f5c:	30010000 	andcc	r0, r1, r0
     f60:	000000b8 	strheq	r0, [r0], -r8
     f64:	00800305 	addeq	r0, r0, r5, lsl #6
     f68:	9c0d2000 	stcls	0, cr2, [sp], {-0}
     f6c:	01000005 	tsteq	r0, r5
     f70:	0000b831 	andeq	fp, r0, r1, lsr r8
     f74:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
     f78:	0d200000 	stceq	0, cr0, [r0, #-0]
     f7c:	000004e9 	andeq	r0, r0, r9, ror #9
     f80:	00b83201 	adcseq	r3, r8, r1, lsl #4
     f84:	03050000 	movweq	r0, #20480	; 0x5000
     f88:	200000fa 	strdcs	r0, [r0], -sl
     f8c:	0000b813 	andeq	fp, r0, r3, lsl r8
     f90:	0005f900 	andeq	pc, r5, r0, lsl #18
     f94:	00d91400 	sbcseq	r1, r9, r0, lsl #8
     f98:	00070000 	andeq	r0, r7, r0
     f9c:	0006440d 	andeq	r4, r6, sp, lsl #8
     fa0:	e9330100 	ldmdb	r3!, {r8}
     fa4:	05000005 	streq	r0, [r0, #-5]
     fa8:	0000fc03 	andeq	pc, r0, r3, lsl #24
     fac:	05a90d20 	streq	r0, [r9, #3360]!	; 0xd20
     fb0:	34010000 	strcc	r0, [r1], #-0
     fb4:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
     fb8:	010c0305 	tsteq	ip, r5, lsl #6
     fbc:	0a002000 	beq	8fc4 <_Min_Stack_Size+0x8dc4>
     fc0:	0400000b 	streq	r0, [r0], #-11
     fc4:	0003e100 	andeq	lr, r3, r0, lsl #2
     fc8:	11010400 	tstne	r1, r0, lsl #8
     fcc:	0c000001 	stceq	0, cr0, [r0], {1}
     fd0:	00000bcd 	andeq	r0, r0, sp, asr #23
     fd4:	000000d8 	ldrdeq	r0, [r0], -r8
     fd8:	00000000 	andeq	r0, r0, r0
     fdc:	00000a0c 	andeq	r0, r0, ip, lsl #20
     fe0:	0004b302 	andeq	fp, r4, r2, lsl #6
     fe4:	2c1b0200 	lfmcs	f0, 4, [fp], {-0}
     fe8:	03000000 	movweq	r0, #0
     fec:	01920601 	orrseq	r0, r2, r1, lsl #12
     ff0:	e3020000 	movw	r0, #8192	; 0x2000
     ff4:	02000000 	andeq	r0, r0, #0
     ff8:	00003e1d 	andeq	r3, r0, sp, lsl lr
     ffc:	08010300 	stmdaeq	r1, {r8, r9}
    1000:	00000190 	muleq	r0, r0, r1
    1004:	95050203 	strls	r0, [r5, #-515]	; 0xfffffdfd
    1008:	02000000 	andeq	r0, r0, #0
    100c:	00000072 	andeq	r0, r0, r2, ror r0
    1010:	00572b02 	subseq	r2, r7, r2, lsl #22
    1014:	02030000 	andeq	r0, r3, #0
    1018:	0001f207 	andeq	pc, r1, r7, lsl #4
    101c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    1020:	000000bd 	strheq	r0, [r0], -sp
    1024:	00006702 	andeq	r6, r0, r2, lsl #14
    1028:	70410200 	subvc	r0, r1, r0, lsl #4
    102c:	03000000 	movweq	r0, #0
    1030:	01c90704 	biceq	r0, r9, r4, lsl #14
    1034:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1038:	0000b805 	andeq	fp, r0, r5, lsl #16
    103c:	07080300 	streq	r0, [r8, -r0, lsl #6]
    1040:	000001c4 	andeq	r0, r0, r4, asr #3
    1044:	69050404 	stmdbvs	r5, {r2, sl}
    1048:	0300746e 	movweq	r7, #1134	; 0x46e
    104c:	01ce0704 	biceq	r0, lr, r4, lsl #14
    1050:	b5020000 	strlt	r0, [r2, #-0]
    1054:	03000004 	movweq	r0, #4
    1058:	00002114 	andeq	r2, r0, r4, lsl r1
    105c:	00e50200 	rsceq	r0, r5, r0, lsl #4
    1060:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    1064:	00000033 	andeq	r0, r0, r3, lsr r0
    1068:	00007402 	andeq	r7, r0, r2, lsl #8
    106c:	4c240300 	stcmi	3, cr0, [r4], #-0
    1070:	02000000 	andeq	r0, r0, #0
    1074:	00000069 	andeq	r0, r0, r9, rrx
    1078:	00653003 	rsbeq	r3, r5, r3
    107c:	23050000 	movwcs	r0, #20480	; 0x5000
    1080:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1084:	00e49e04 	rsceq	r9, r4, r4, lsl #28
    1088:	4b060000 	blmi	181090 <_Min_Stack_Size+0x180e90>
    108c:	04000007 	streq	r0, [r0], #-7
    1090:	0000e5a0 	andeq	lr, r0, r0, lsr #11
    1094:	45060000 	strmi	r0, [r6, #-0]
    1098:	0400000c 	streq	r0, [r0], #-12
    109c:	0000e5a1 	andeq	lr, r0, r1, lsr #11
    10a0:	07000400 	streq	r0, [r0, -r0, lsl #8]
    10a4:	00e40408 	rsceq	r0, r4, r8, lsl #8
    10a8:	5f090000 	svcpl	0x00090000
    10ac:	08005343 	stmdaeq	r0, {r0, r1, r6, r8, r9, ip, lr}
    10b0:	0110a604 	tsteq	r0, r4, lsl #12
    10b4:	60060000 	andvs	r0, r6, r0
    10b8:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
    10bc:	0000e5a8 	andeq	lr, r0, r8, lsr #11
    10c0:	1c060000 	stcne	0, cr0, [r6], {-0}
    10c4:	0400003a 	streq	r0, [r0], #-58	; 0xffffffc6
    10c8:	0000e5a9 	andeq	lr, r0, r9, lsr #11
    10cc:	0a000400 	beq	20d4 <_Min_Stack_Size+0x1ed4>
    10d0:	31b30408 			; <UNDEFINED> instruction: 0x31b30408
    10d4:	06000001 	streq	r0, [r0], -r1
    10d8:	000008eb 	andeq	r0, r0, fp, ror #17
    10dc:	0140b504 	cmpeq	r0, r4, lsl #10
    10e0:	06000000 	streq	r0, [r0], -r0
    10e4:	00000a12 	andeq	r0, r0, r2, lsl sl
    10e8:	0156b604 	cmpeq	r6, r4, lsl #12
    10ec:	00040000 	andeq	r0, r4, r0
    10f0:	00009e0b 	andeq	r9, r0, fp, lsl #28
    10f4:	00014000 	andeq	r4, r1, r0
    10f8:	00b40c00 	adcseq	r0, r4, r0, lsl #24
    10fc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1100:	00013104 	andeq	r3, r1, r4, lsl #2
    1104:	01560d00 	cmpeq	r6, r0, lsl #26
    1108:	b40c0000 	strlt	r0, [ip], #-0
    110c:	0c000000 	stceq	0, cr0, [r0], {-0}
    1110:	0000009e 	muleq	r0, lr, r0
    1114:	46040800 	strmi	r0, [r4], -r0, lsl #16
    1118:	0a000001 	beq	1124 <_Min_Stack_Size+0xf24>
    111c:	7dbb0408 	cfldrsvc	mvf0, [fp, #32]!
    1120:	06000001 	streq	r0, [r0], -r1
    1124:	000008eb 	andeq	r0, r0, fp, ror #17
    1128:	0182bd04 	orreq	fp, r2, r4, lsl #26
    112c:	06000000 	streq	r0, [r0], -r0
    1130:	00000a12 	andeq	r0, r0, r2, lsl sl
    1134:	0193be04 	orrseq	fp, r3, r4, lsl #28
    1138:	00040000 	andeq	r0, r4, r0
    113c:	00009e0e 	andeq	r9, r0, lr, lsl #28
    1140:	7d040800 	stcvc	8, cr0, [r4, #-0]
    1144:	0d000001 	stceq	0, cr0, [r0, #-4]
    1148:	00000193 	muleq	r0, r3, r1
    114c:	00009e0c 	andeq	r9, r0, ip, lsl #28
    1150:	04080000 	streq	r0, [r8], #-0
    1154:	00000188 	andeq	r0, r0, r8, lsl #3
    1158:	46495f0f 	strbmi	r5, [r9], -pc, lsl #30
    115c:	ae040800 	cdpge	8, 0, cr0, cr4, cr0, {0}
    1160:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    1164:	53554210 	cmppl	r5, #16, 4
    1168:	10b70400 	adcsne	r0, r7, r0, lsl #8
    116c:	10000001 	andne	r0, r0, r1
    1170:	00495053 	subeq	r5, r9, r3, asr r0
    1174:	015cbf04 	cmpeq	ip, r4, lsl #30
    1178:	05000000 	streq	r0, [r0, #-0]
    117c:	00000735 	andeq	r0, r0, r5, lsr r7
    1180:	02970420 	addseq	r0, r7, #32, 8	; 0x20000000
    1184:	06000002 	streq	r0, [r0], -r2
    1188:	00000b58 	andeq	r0, r0, r8, asr fp
    118c:	00a99904 	adceq	r9, r9, r4, lsl #18
    1190:	11000000 	mrsne	r0, (UNDEF: 0)
    1194:	04006469 	streq	r6, [r0], #-1129	; 0xfffffb97
    1198:	0002029a 	muleq	r2, sl, r2
    119c:	24060200 	strcs	r0, [r6], #-512	; 0xfffffe00
    11a0:	0400000b 	streq	r0, [r0], #-11
    11a4:	0000bfa2 	andeq	fp, r0, r2, lsr #31
    11a8:	43110800 	tstmi	r1, #0, 16
    11ac:	aa040053 	bge	101300 <_Min_Stack_Size+0x101100>
    11b0:	000000eb 	andeq	r0, r0, fp, ror #1
    11b4:	46491110 			; <UNDEFINED> instruction: 0x46491110
    11b8:	99c20400 	stmibls	r2, {sl}^
    11bc:	18000001 	stmdane	r0, {r0}
    11c0:	009e1200 	addseq	r1, lr, r0, lsl #4
    11c4:	02120000 	andseq	r0, r2, #0
    11c8:	12130000 	andsne	r0, r3, #0
    11cc:	05000002 	streq	r0, [r0, #-2]
    11d0:	07040300 	streq	r0, [r4, -r0, lsl #6]
    11d4:	00000059 	andeq	r0, r0, r9, asr r0
    11d8:	0008a302 	andeq	sl, r8, r2, lsl #6
    11dc:	bcc30400 	cfstrdlt	mvd0, [r3], {0}
    11e0:	14000001 	strne	r0, [r0], #-1
    11e4:	00003e01 	andeq	r3, r0, r1, lsl #28
    11e8:	91cc0400 	bicls	r0, ip, r0, lsl #8
    11ec:	15000002 	strne	r0, [r0, #-2]
    11f0:	0000089b 	muleq	r0, fp, r8
    11f4:	0c151500 	cfldr32eq	mvfx1, [r5], {-0}
    11f8:	15010000 	strne	r0, [r1, #-0]
    11fc:	00000b47 	andeq	r0, r0, r7, asr #22
    1200:	09d71502 	ldmibeq	r7, {r1, r8, sl, ip}^
    1204:	15030000 	strne	r0, [r3, #-0]
    1208:	0000080c 	andeq	r0, r0, ip, lsl #16
    120c:	0b031504 	bleq	c6624 <_Min_Stack_Size+0xc6424>
    1210:	15050000 	strne	r0, [r5, #-0]
    1214:	0000079e 	muleq	r0, lr, r7
    1218:	0cd51506 	cfldr64eq	mvdx1, [r5], {6}
    121c:	15070000 	strne	r0, [r7, #-0]
    1220:	00000a8f 	andeq	r0, r0, pc, lsl #21
    1224:	0c2c1508 	cfstr32eq	mvfx1, [ip], #-32	; 0xffffffe0
    1228:	15090000 	strne	r0, [r9, #-0]
    122c:	0000086b 	andeq	r0, r0, fp, ror #16
    1230:	0aee150a 	beq	ffb86660 <BootRAM+0xeaf6e01>
    1234:	150b0000 	strne	r0, [fp, #-0]
    1238:	00000765 	andeq	r0, r0, r5, ror #14
    123c:	0a44150c 	beq	1106674 <_Min_Stack_Size+0x1106474>
    1240:	150d0000 	strne	r0, [sp, #-0]
    1244:	000006ec 	andeq	r0, r0, ip, ror #13
    1248:	0b38150e 	bleq	e06688 <_Min_Stack_Size+0xe06488>
    124c:	000f0000 	andeq	r0, pc, r0
    1250:	000a7f02 	andeq	r7, sl, r2, lsl #30
    1254:	24e00400 	strbtcs	r0, [r0], #1024	; 0x400
    1258:	14000002 	strne	r0, [r0], #-2
    125c:	00003e01 	andeq	r3, r0, r1, lsl #28
    1260:	cde70400 	cfstrdgt	mvd0, [r7]
    1264:	15000002 	strne	r0, [r0, #-2]
    1268:	00000974 	andeq	r0, r0, r4, ror r9
    126c:	078f1500 	streq	r1, [pc, r0, lsl #10]
    1270:	15010000 	strne	r0, [r1, #-0]
    1274:	00000a03 	andeq	r0, r0, r3, lsl #20
    1278:	088c1502 	stmeq	ip, {r1, r8, sl, ip}
    127c:	15030000 	strne	r0, [r3, #-0]
    1280:	000009a9 	andeq	r0, r0, r9, lsr #19
    1284:	0c4b1504 	cfstr64eq	mvdx1, [fp], {4}
    1288:	00050000 	andeq	r0, r5, r0
    128c:	000b1302 	andeq	r1, fp, r2, lsl #6
    1290:	9cee0400 	cfstrdls	mvd0, [lr]
    1294:	14000002 	strne	r0, [r0], #-2
    1298:	00005702 	andeq	r5, r0, r2, lsl #14
    129c:	3cf70400 	cfldrdcc	mvd0, [r7]
    12a0:	15000003 	strne	r0, [r0, #-3]
    12a4:	0000096d 	andeq	r0, r0, sp, ror #18
    12a8:	0ada1510 	beq	ff6866f0 <BootRAM+0xe5f6e91>
    12ac:	15200000 	strne	r0, [r0, #-0]!
    12b0:	00000a34 	andeq	r0, r0, r4, lsr sl
    12b4:	08f61540 	ldmeq	r6!, {r6, r8, sl, ip}^
    12b8:	16800000 	strne	r0, [r0], r0
    12bc:	00000b87 	andeq	r0, r0, r7, lsl #23
    12c0:	91160100 	tstls	r6, r0, lsl #2
    12c4:	0000000b 	andeq	r0, r0, fp
    12c8:	0b9b1602 	bleq	fe6c6ad8 <BootRAM+0xd637279>
    12cc:	04000000 	streq	r0, [r0], #-0
    12d0:	000ba516 	andeq	sl, fp, r6, lsl r5
    12d4:	16080000 	strne	r0, [r8], -r0
    12d8:	00000baf 	andeq	r0, r0, pc, lsr #23
    12dc:	b9161000 	ldmdblt	r6, {ip}
    12e0:	0000000b 	andeq	r0, r0, fp
    12e4:	0bc31620 	bleq	ff0c6b6c <BootRAM+0xe03730d>
    12e8:	40000000 	andmi	r0, r0, r0
    12ec:	00081c16 	andeq	r1, r8, r6, lsl ip
    12f0:	16800000 	strne	r0, [r0], r0
    12f4:	00000cc2 	andeq	r0, r0, r2, asr #25
    12f8:	1700ff00 	strne	pc, [r0, -r0, lsl #30]
    12fc:	00000b2e 	andeq	r0, r0, lr, lsr #22
    1300:	d8011404 	stmdale	r1, {r2, sl, ip}
    1304:	18000002 	stmdane	r0, {r1}
    1308:	00000932 	andeq	r0, r0, r2, lsr r9
    130c:	012b0404 			; <UNDEFINED> instruction: 0x012b0404
    1310:	00000389 	andeq	r0, r0, r9, lsl #7
    1314:	00796219 	rsbseq	r6, r9, r9, lsl r2
    1318:	9e012d04 	cdpls	13, 0, cr2, cr1, cr4, {0}
    131c:	00000000 	andeq	r0, r0, r0
    1320:	000b5b1a 	andeq	r5, fp, sl, lsl fp
    1324:	012e0400 			; <UNDEFINED> instruction: 0x012e0400
    1328:	0000009e 	muleq	r0, lr, r0
    132c:	0c961a01 	vldmiaeq	r6, {s2}
    1330:	2f040000 	svccs	0x00040000
    1334:	00009e01 	andeq	r9, r0, r1, lsl #28
    1338:	251a0200 	ldrcs	r0, [sl, #-512]	; 0xfffffe00
    133c:	0400000c 	streq	r0, [r0], #-12
    1340:	009e0130 	addseq	r0, lr, r0, lsr r1
    1344:	00030000 	andeq	r0, r3, r0
    1348:	000c5a17 	andeq	r5, ip, r7, lsl sl
    134c:	01330400 	teqeq	r3, r0, lsl #8
    1350:	00000348 	andeq	r0, r0, r8, asr #6
    1354:	003e011b 	eorseq	r0, lr, fp, lsl r1
    1358:	3b040000 	blcc	101360 <_Min_Stack_Size+0x101160>
    135c:	0003af01 	andeq	sl, r3, r1, lsl #30
    1360:	09f41500 	ldmibeq	r4!, {r8, sl, ip}^
    1364:	15010000 	strne	r0, [r1, #-0]
    1368:	00000d25 	andeq	r0, r0, r5, lsr #26
    136c:	b6170002 	ldrlt	r0, [r7], -r2
    1370:	04000008 	streq	r0, [r0], #-8
    1374:	0395013e 	orrseq	r0, r5, #-2147483633	; 0x8000000f
    1378:	ae180000 	cdpge	0, 1, cr0, cr8, cr0, {0}
    137c:	17000007 	strne	r0, [r0, -r7]
    1380:	14014404 	strne	r4, [r1], #-1028	; 0xfffffbfc
    1384:	19000004 	stmdbne	r0, {r2}
    1388:	0063616d 	rsbeq	r6, r3, sp, ror #2
    138c:	02014604 	andeq	r4, r1, #4, 12	; 0x400000
    1390:	00000002 	andeq	r0, r0, r2
    1394:	00706919 	rsbseq	r6, r0, r9, lsl r9
    1398:	14014704 	strne	r4, [r1], #-1796	; 0xfffff8fc
    139c:	06000004 	streq	r0, [r0], -r4
    13a0:	006e7319 	rsbeq	r7, lr, r9, lsl r3
    13a4:	14014804 	strne	r4, [r1], #-2052	; 0xfffff7fc
    13a8:	0a000004 	beq	13c0 <_Min_Stack_Size+0x11c0>
    13ac:	00776719 	rsbseq	r6, r7, r9, lsl r7
    13b0:	14014904 	strne	r4, [r1], #-2308	; 0xfffff6fc
    13b4:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    13b8:	736e6419 	cmnvc	lr, #419430400	; 0x19000000
    13bc:	014a0400 	cmpeq	sl, r0, lsl #8
    13c0:	00000414 	andeq	r0, r0, r4, lsl r4
    13c4:	0c661a12 			; <UNDEFINED> instruction: 0x0c661a12
    13c8:	4b040000 	blmi	1013d0 <_Min_Stack_Size+0x1011d0>
    13cc:	0003af01 	andeq	sl, r3, r1, lsl #30
    13d0:	12001600 	andne	r1, r0, #0, 12
    13d4:	0000009e 	muleq	r0, lr, r0
    13d8:	00000424 	andeq	r0, r0, r4, lsr #8
    13dc:	00021213 	andeq	r1, r2, r3, lsl r2
    13e0:	17000300 	strne	r0, [r0, -r0, lsl #6]
    13e4:	000009e8 	andeq	r0, r0, r8, ror #19
    13e8:	bb014c04 	bllt	54400 <_Min_Stack_Size+0x54200>
    13ec:	1b000003 	blne	1400 <_Min_Stack_Size+0x1200>
    13f0:	00003e01 	andeq	r3, r0, r1, lsl #28
    13f4:	01530400 	cmpeq	r3, r0, lsl #8
    13f8:	00000456 	andeq	r0, r0, r6, asr r4
    13fc:	00075215 	andeq	r5, r7, r5, lsl r2
    1400:	b5150200 	ldrlt	r0, [r5, #-512]	; 0xfffffe00
    1404:	2000000c 	andcs	r0, r0, ip
    1408:	00082615 	andeq	r2, r8, r5, lsl r6
    140c:	5a151000 	bpl	545414 <_Min_Stack_Size+0x545214>
    1410:	08000008 	stmdaeq	r0, {r3}
    1414:	09551700 	ldmdbeq	r5, {r8, r9, sl, ip}^
    1418:	5a040000 	bpl	101420 <_Min_Stack_Size+0x101220>
    141c:	00043001 	andeq	r3, r4, r1
    1420:	0b651800 	bleq	1947428 <_Min_Stack_Size+0x1947228>
    1424:	04040000 	streq	r0, [r4], #-0
    1428:	048a0160 	streq	r0, [sl], #352	; 0x160
    142c:	ac1a0000 	ldcge	0, cr0, [sl], {-0}
    1430:	04000008 	streq	r0, [r0], #-8
    1434:	009e0162 	addseq	r0, lr, r2, ror #2
    1438:	1a000000 	bne	1440 <_Min_Stack_Size+0x1240>
    143c:	00000962 	andeq	r0, r0, r2, ror #18
    1440:	a9016304 	stmdbge	r1, {r2, r8, r9, sp, lr}
    1444:	02000000 	andeq	r0, r0, #0
    1448:	09051700 	stmdbeq	r5, {r8, r9, sl, ip}
    144c:	64040000 	strvs	r0, [r4], #-0
    1450:	00046201 	andeq	r6, r4, r1, lsl #4
    1454:	073f1c00 	ldreq	r1, [pc, -r0, lsl #24]!
    1458:	2f010000 	svccs	0x00010000
    145c:	0800277c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, sp}
    1460:	0000000c 	andeq	r0, r0, ip
    1464:	391c9c01 	ldmdbcc	ip, {r0, sl, fp, ip, pc}
    1468:	0100000c 	tsteq	r0, ip
    146c:	00278835 	eoreq	r8, r7, r5, lsr r8
    1470:	00000c08 	andeq	r0, r0, r8, lsl #24
    1474:	1c9c0100 	ldfnes	f0, [ip], {0}
    1478:	000008d9 	ldrdeq	r0, [r0], -r9
    147c:	27943b01 	ldrcs	r3, [r4, r1, lsl #22]
    1480:	000c0800 	andeq	r0, ip, r0, lsl #16
    1484:	9c010000 	stcls	0, cr0, [r1], {-0}
    1488:	000abd1c 	andeq	fp, sl, ip, lsl sp
    148c:	a0410100 	subge	r0, r1, r0, lsl #2
    1490:	0c080027 	stceq	0, cr0, [r8], {39}	; 0x27
    1494:	01000000 	mrseq	r0, (UNDEF: 0)
    1498:	09401d9c 	stmdbeq	r0, {r2, r3, r4, r7, r8, sl, fp, ip}^
    149c:	47010000 	strmi	r0, [r1, -r0]
    14a0:	0000009e 	muleq	r0, lr, r0
    14a4:	080027ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, sp}
    14a8:	00000018 	andeq	r0, r0, r8, lsl r0
    14ac:	05029c01 	streq	r9, [r2, #-3073]	; 0xfffff3ff
    14b0:	fd1e0000 	ldc2	0, cr0, [lr, #-0]
    14b4:	0100000b 	tsteq	r0, fp
    14b8:	0000b447 	andeq	fp, r0, r7, asr #8
    14bc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    14c0:	07171f00 	ldreq	r1, [r7, -r0, lsl #30]
    14c4:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    14c8:	080027c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, sp}
    14cc:	0000001c 	andeq	r0, r0, ip, lsl r0
    14d0:	05339c01 	ldreq	r9, [r3, #-3073]!	; 0xfffff3ff
    14d4:	fd1e0000 	ldc2	0, cr0, [lr, #-0]
    14d8:	0100000b 	tsteq	r0, fp
    14dc:	0000b44e 	andeq	fp, r0, lr, asr #8
    14e0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    14e4:	00627720 	rsbeq	r7, r2, r0, lsr #14
    14e8:	009e4e01 	addseq	r4, lr, r1, lsl #28
    14ec:	91020000 	mrsls	r0, (UNDEF: 2)
    14f0:	e9210073 	stmdb	r1!, {r0, r1, r4, r5, r6}
    14f4:	01000007 	tsteq	r0, r7
    14f8:	00009e54 	andeq	r9, r0, r4, asr lr
    14fc:	0027e000 	eoreq	lr, r7, r0
    1500:	00000e08 	andeq	r0, r0, r8, lsl #28
    1504:	1f9c0100 	svcne	0x009c0100
    1508:	000007d3 	ldrdeq	r0, [r0], -r3
    150c:	27f05a01 	ldrbcs	r5, [r0, r1, lsl #20]!
    1510:	00140800 	andseq	r0, r4, r0, lsl #16
    1514:	9c010000 	stcls	0, cr0, [r1], {-0}
    1518:	0000056b 	andeq	r0, r0, fp, ror #10
    151c:	00627720 	rsbeq	r7, r2, r0, lsr #14
    1520:	009e5a01 	addseq	r5, lr, r1, lsl #20
    1524:	91020000 	mrsls	r0, (UNDEF: 2)
    1528:	7e1f0077 	mrcvc	0, 0, r0, cr15, cr7, {3}
    152c:	0100000c 	tsteq	r0, ip
    1530:	00280470 	eoreq	r0, r8, r0, ror r4
    1534:	00004808 	andeq	r4, r0, r8, lsl #16
    1538:	9d9c0100 	ldflss	f0, [ip]
    153c:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    1540:	0000072d 	andeq	r0, r0, sp, lsr #14
    1544:	00e57001 	rsceq	r7, r5, r1
    1548:	91020000 	mrsls	r0, (UNDEF: 2)
    154c:	0a991e74 	beq	fe648f24 <BootRAM+0xd5b96c5>
    1550:	70010000 	andvc	r0, r1, r0
    1554:	000000e5 	andeq	r0, r0, r5, ror #1
    1558:	00709102 	rsbseq	r9, r0, r2, lsl #2
    155c:	000a1e1f 	andeq	r1, sl, pc, lsl lr
    1560:	4c7e0100 	ldfmie	f0, [lr], #-0
    1564:	48080028 	stmdami	r8, {r3, r5}
    1568:	01000000 	mrseq	r0, (UNDEF: 0)
    156c:	0005cf9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    1570:	075e1e00 	ldrbeq	r1, [lr, -r0, lsl #28]
    1574:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    1578:	000000e5 	andeq	r0, r0, r5, ror #1
    157c:	1e749102 	expnes	f1, f2
    1580:	00000c05 	andeq	r0, r0, r5, lsl #24
    1584:	00e57e01 	rsceq	r7, r5, r1, lsl #28
    1588:	91020000 	mrsls	r0, (UNDEF: 2)
    158c:	bc1f0070 	ldclt	0, cr0, [pc], {112}	; 0x70
    1590:	01000007 	tsteq	r0, r7
    1594:	0000008c 	andeq	r0, r0, ip, lsl #1
    1598:	00005400 	andeq	r5, r0, r0, lsl #8
    159c:	019c0100 	orrseq	r0, ip, r0, lsl #2
    15a0:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    15a4:	000008d2 	ldrdeq	r0, [r0], -r2
    15a8:	01408c01 	cmpeq	r0, r1, lsl #24
    15ac:	91020000 	mrsls	r0, (UNDEF: 2)
    15b0:	0cce1e74 	stcleq	14, cr1, [lr], {116}	; 0x74
    15b4:	8c010000 	stchi	0, cr0, [r1], {-0}
    15b8:	00000156 	andeq	r0, r0, r6, asr r1
    15bc:	00709102 	rsbseq	r9, r0, r2, lsl #2
    15c0:	000a561f 	andeq	r5, sl, pc, lsl r6
    15c4:	949c0100 	ldrls	r0, [ip], #256	; 0x100
    15c8:	54080028 	strpl	r0, [r8], #-40	; 0xffffffd8
    15cc:	01000000 	mrseq	r0, (UNDEF: 0)
    15d0:	0006339c 	muleq	r6, ip, r3
    15d4:	0c0e1e00 	stceq	14, cr1, [lr], {-0}
    15d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    15dc:	00000182 	andeq	r0, r0, r2, lsl #3
    15e0:	1e749102 	expnes	f1, f2
    15e4:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    15e8:	01939c01 	orrseq	r9, r3, r1, lsl #24
    15ec:	91020000 	mrsls	r0, (UNDEF: 2)
    15f0:	33220070 			; <UNDEFINED> instruction: 0x33220070
    15f4:	01000008 	tsteq	r0, r8
    15f8:	000093ac 	andeq	r9, r0, ip, lsr #7
    15fc:	0028e800 	eoreq	lr, r8, r0, lsl #16
    1600:	0001bc08 	andeq	fp, r1, r8, lsl #24
    1604:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
    1608:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    160c:	00000aa1 	andeq	r0, r0, r1, lsr #21
    1610:	0291ac01 	addseq	sl, r1, #256	; 0x100
    1614:	91020000 	mrsls	r0, (UNDEF: 2)
    1618:	7261205f 	rsbvc	r2, r1, #95	; 0x5f
    161c:	ac010067 	stcge	0, cr0, [r1], {103}	; 0x67
    1620:	00000685 	andeq	r0, r0, r5, lsl #13
    1624:	23589102 	cmpcs	r8, #-2147483648	; 0x80000000
    1628:	00706d74 	rsbseq	r6, r0, r4, ror sp
    162c:	009eae01 	addseq	sl, lr, r1, lsl #28
    1630:	91020000 	mrsls	r0, (UNDEF: 2)
    1634:	0b29246f 	bleq	a4a7f8 <_Min_Stack_Size+0xa4a5f8>
    1638:	af010000 	svcge	0x00010000
    163c:	00000687 	andeq	r0, r0, r7, lsl #13
    1640:	00649102 	rsbeq	r9, r4, r2, lsl #2
    1644:	97120425 	ldrls	r0, [r2, -r5, lsr #8]
    1648:	97000006 	strls	r0, [r0, -r6]
    164c:	13000006 	movwne	r0, #6
    1650:	00000212 	andeq	r0, r0, r2, lsl r2
    1654:	04080001 	streq	r0, [r8], #-1
    1658:	0000009e 	muleq	r0, lr, r0
    165c:	00092722 	andeq	r2, r9, r2, lsr #14
    1660:	93f80100 	mvnsls	r0, #0, 2
    1664:	a4000000 	strge	r0, [r0], #-0
    1668:	7c08002a 	stcvc	0, cr0, [r8], {42}	; 0x2a
    166c:	01000000 	mrseq	r0, (UNDEF: 0)
    1670:	0006d39c 	muleq	r6, ip, r3
    1674:	08531e00 	ldmdaeq	r3, {r9, sl, fp, ip}^
    1678:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    167c:	000002cd 	andeq	r0, r0, sp, asr #5
    1680:	20779102 	rsbscs	r9, r7, r2, lsl #2
    1684:	00677261 	rsbeq	r7, r7, r1, ror #4
    1688:	0685f801 	streq	pc, [r5], r1, lsl #16
    168c:	91020000 	mrsls	r0, (UNDEF: 2)
    1690:	76260070 			; <UNDEFINED> instruction: 0x76260070
    1694:	0100000b 	tsteq	r0, fp
    1698:	2b200114 	blcs	801af0 <_Min_Stack_Size+0x8018f0>
    169c:	00980800 	addseq	r0, r8, r0, lsl #16
    16a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    16a4:	00000724 	andeq	r0, r0, r4, lsr #14
    16a8:	00776727 	rsbseq	r6, r7, r7, lsr #14
    16ac:	14011601 	strne	r1, [r1], #-1537	; 0xfffff9ff
    16b0:	02000004 	andeq	r0, r0, #4
    16b4:	73277491 			; <UNDEFINED> instruction: 0x73277491
    16b8:	1601006e 	strne	r0, [r1], -lr, rrx
    16bc:	00041401 	andeq	r1, r4, r1, lsl #8
    16c0:	70910200 	addsvc	r0, r1, r0, lsl #4
    16c4:	70697327 	rsbvc	r7, r9, r7, lsr #6
    16c8:	01160100 	tsteq	r6, r0, lsl #2
    16cc:	00000414 	andeq	r0, r0, r4, lsl r4
    16d0:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
    16d4:	0063616d 	rsbeq	r6, r3, sp, ror #2
    16d8:	02011701 	andeq	r1, r1, #262144	; 0x40000
    16dc:	02000002 	andeq	r0, r0, #2
    16e0:	28006491 	stmdacs	r0, {r0, r4, r7, sl, sp, lr}
    16e4:	00000ce5 	andeq	r0, r0, r5, ror #25
    16e8:	93012201 	movwls	r2, #4609	; 0x1201
    16ec:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    16f0:	1808002b 	stmdane	r8, {r0, r1, r3, r5}
    16f4:	01000001 	tsteq	r0, r1
    16f8:	0007799c 	muleq	r7, ip, r9
    16fc:	08052900 	stmdaeq	r5, {r8, fp, sp}
    1700:	22010000 	andcs	r0, r1, #0
    1704:	00069701 	andeq	r9, r6, r1, lsl #14
    1708:	6c910200 	lfmvs	f0, 4, [r1], {0}
    170c:	000cae29 	andeq	sl, ip, r9, lsr #28
    1710:	01220100 			; <UNDEFINED> instruction: 0x01220100
    1714:	00000697 	muleq	r0, r7, r6
    1718:	27689102 	strbcs	r9, [r8, -r2, lsl #2]!
    171c:	24010069 	strcs	r0, [r1], #-105	; 0xffffff97
    1720:	00009301 	andeq	r9, r0, r1, lsl #6
    1724:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1728:	706d7427 	rsbvc	r7, sp, r7, lsr #8
    172c:	01250100 			; <UNDEFINED> instruction: 0x01250100
    1730:	00000093 	muleq	r0, r3, r0
    1734:	00769102 	rsbseq	r9, r6, r2, lsl #2
    1738:	000aa826 	andeq	sl, sl, r6, lsr #16
    173c:	013c0100 	teqeq	ip, r0, lsl #2
    1740:	08002cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, sp}
    1744:	0000003c 	andeq	r0, r0, ip, lsr r0
    1748:	07bc9c01 	ldreq	r9, [ip, r1, lsl #24]!
    174c:	b8290000 	stmdalt	r9!, {}	; <UNPREDICTABLE>
    1750:	01000009 	tsteq	r0, r9
    1754:	033c013c 	teqeq	ip, #60, 2
    1758:	91020000 	mrsls	r0, (UNDEF: 2)
    175c:	7269276e 	rsbvc	r2, r9, #28835840	; 0x1b80000
    1760:	013e0100 	teqeq	lr, r0, lsl #2
    1764:	0000009e 	muleq	r0, lr, r0
    1768:	27779102 	ldrbcs	r9, [r7, -r2, lsl #2]!
    176c:	00726973 	rsbseq	r6, r2, r3, ror r9
    1770:	9e013f01 	cdpls	15, 0, cr3, cr1, cr1, {0}
    1774:	02000000 	andeq	r0, r0, #0
    1778:	28007691 	stmdacs	r0, {r0, r4, r7, r9, sl, ip, sp, lr}
    177c:	0000083e 	andeq	r0, r0, lr, lsr r8
    1780:	3c015401 	cfstrscc	mvf5, [r1], {1}
    1784:	0c000003 	stceq	0, cr0, [r0], {3}
    1788:	4a08002d 	bmi	201844 <_Min_Stack_Size+0x201644>
    178c:	01000000 	mrseq	r0, (UNDEF: 0)
    1790:	0008039c 	muleq	r8, ip, r3
    1794:	72692700 	rsbvc	r2, r9, #0, 14
    1798:	01560100 	cmpeq	r6, r0, lsl #2
    179c:	0000009e 	muleq	r0, lr, r0
    17a0:	27779102 	ldrbcs	r9, [r7, -r2, lsl #2]!
    17a4:	00726973 	rsbseq	r6, r2, r3, ror r9
    17a8:	9e015701 	cdpls	7, 0, cr5, cr1, cr1, {0}
    17ac:	02000000 	andeq	r0, r0, #0
    17b0:	72277691 	eorvc	r7, r7, #152043520	; 0x9100000
    17b4:	01007465 	tsteq	r0, r5, ror #8
    17b8:	00a90158 	adceq	r0, r9, r8, asr r1
    17bc:	91020000 	mrsls	r0, (UNDEF: 2)
    17c0:	fe260074 	mcr2	0, 1, r0, cr6, cr4, {3}
    17c4:	01000006 	tsteq	r0, r6
    17c8:	2d58016c 	ldfcse	f0, [r8, #-432]	; 0xfffffe50
    17cc:	00360800 	eorseq	r0, r6, r0, lsl #16
    17d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    17d4:	00000847 	andeq	r0, r0, r7, asr #16
    17d8:	0009b829 	andeq	fp, r9, r9, lsr #16
    17dc:	016c0100 	cmneq	ip, r0, lsl #2
    17e0:	0000033c 	andeq	r0, r0, ip, lsr r3
    17e4:	276e9102 	strbcs	r9, [lr, -r2, lsl #2]!
    17e8:	00726d69 	rsbseq	r6, r2, r9, ror #26
    17ec:	9e016e01 	cdpls	14, 0, cr6, cr1, cr1, {0}
    17f0:	02000000 	andeq	r0, r0, #0
    17f4:	602a7791 	mlavs	sl, r1, r7, r7
    17f8:	0100000b 	tsteq	r0, fp
    17fc:	009e016f 	addseq	r0, lr, pc, ror #2
    1800:	91020000 	mrsls	r0, (UNDEF: 2)
    1804:	76280076 			; <UNDEFINED> instruction: 0x76280076
    1808:	01000007 	tsteq	r0, r7
    180c:	033c0184 	teqeq	ip, #132, 2	; 0x21
    1810:	2d900000 	ldccs	0, cr0, [r0]
    1814:	00460800 	subeq	r0, r6, r0, lsl #16
    1818:	9c010000 	stcls	0, cr0, [r1], {-0}
    181c:	0000088f 	andeq	r0, r0, pc, lsl #17
    1820:	726d6927 	rsbvc	r6, sp, #638976	; 0x9c000
    1824:	01860100 	orreq	r0, r6, r0, lsl #2
    1828:	0000009e 	muleq	r0, lr, r0
    182c:	2a779102 	bcs	1de5c3c <_Min_Stack_Size+0x1de5a3c>
    1830:	00000b60 	andeq	r0, r0, r0, ror #22
    1834:	9e018701 	cdpls	7, 0, cr8, cr1, cr1, {0}
    1838:	02000000 	andeq	r0, r0, #0
    183c:	72277691 	eorvc	r7, r7, #152043520	; 0x9100000
    1840:	01007465 	tsteq	r0, r5, ror #8
    1844:	00a90188 	adceq	r0, r9, r8, lsl #3
    1848:	91020000 	mrsls	r0, (UNDEF: 2)
    184c:	c0280074 	eorgt	r0, r8, r4, ror r0
    1850:	01000008 	tsteq	r0, r8
    1854:	0093019c 	umullseq	r0, r3, ip, r1
    1858:	2dd80000 	ldclcs	0, cr0, [r8]
    185c:	002e0800 	eoreq	r0, lr, r0, lsl #16
    1860:	9c010000 	stcls	0, cr0, [r1], {-0}
    1864:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
    1868:	706d7427 	rsbvc	r7, sp, r7, lsr #8
    186c:	019e0100 	orrseq	r0, lr, r0, lsl #2
    1870:	00000093 	muleq	r0, r3, r0
    1874:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1878:	000d1228 	andeq	r1, sp, r8, lsr #4
    187c:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    1880:	00000093 	muleq	r0, r3, r0
    1884:	08002e08 	stmdaeq	r0, {r3, r9, sl, fp, sp}
    1888:	00000032 	andeq	r0, r0, r2, lsr r0
    188c:	08e39c01 	stmiaeq	r3!, {r0, sl, fp, ip, pc}^
    1890:	74270000 	strtvc	r0, [r7], #-0
    1894:	0100706d 	tsteq	r0, sp, rrx
    1898:	009301b3 			; <UNDEFINED> instruction: 0x009301b3
    189c:	91020000 	mrsls	r0, (UNDEF: 2)
    18a0:	f2260077 	vqadd.s32	q0, q3, <illegal reg q11.5>
    18a4:	0100000c 	tsteq	r0, ip
    18a8:	2e3c01c6 	rsfcs<illegal precision>m	f0, f4, f6
    18ac:	004e0800 	subeq	r0, lr, r0, lsl #16
    18b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    18b4:	00000909 	andeq	r0, r0, r9, lsl #18
    18b8:	706d7427 	rsbvc	r7, sp, r7, lsr #8
    18bc:	01c80100 	biceq	r0, r8, r0, lsl #2
    18c0:	0000009e 	muleq	r0, lr, r0
    18c4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    18c8:	00087a26 	andeq	r7, r8, r6, lsr #20
    18cc:	01d00100 	bicseq	r0, r0, r0, lsl #2
    18d0:	08002e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, sp}
    18d4:	00000084 	andeq	r0, r0, r4, lsl #1
    18d8:	093e9c01 	ldmdbeq	lr!, {r0, sl, fp, ip, pc}
    18dc:	a6290000 	strtge	r0, [r9], -r0
    18e0:	0100000c 	tsteq	r0, ip
    18e4:	093e01d0 	ldmdbeq	lr!, {r4, r6, r7, r8}
    18e8:	91020000 	mrsls	r0, (UNDEF: 2)
    18ec:	6d74276c 	ldclvs	7, cr2, [r4, #-432]!	; 0xfffffe50
    18f0:	d2010070 	andle	r0, r1, #112	; 0x70
    18f4:	00009e01 	andeq	r9, r0, r1, lsl #28
    18f8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    18fc:	89040800 	stmdbhi	r4, {fp}
    1900:	26000003 	strcs	r0, [r0], -r3
    1904:	00000c9c 	muleq	r0, ip, ip
    1908:	1001ee01 	andne	lr, r1, r1, lsl #28
    190c:	9808002f 	stmdals	r8, {r0, r1, r2, r3, r5}
    1910:	01000000 	mrseq	r0, (UNDEF: 0)
    1914:	0009799c 	muleq	r9, ip, r9
    1918:	0ca62900 			; <UNDEFINED> instruction: 0x0ca62900
    191c:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    1920:	00093e01 	andeq	r3, r9, r1, lsl #28
    1924:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1928:	706d7427 	rsbvc	r7, sp, r7, lsr #8
    192c:	01f00100 	mvnseq	r0, r0, lsl #2
    1930:	0000009e 	muleq	r0, lr, r0
    1934:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1938:	000a6d26 	andeq	r6, sl, r6, lsr #26
    193c:	02150100 	andseq	r0, r5, #0, 2
    1940:	00000000 	andeq	r0, r0, r0
    1944:	00000048 	andeq	r0, r0, r8, asr #32
    1948:	09ae9c01 	stmibeq	lr!, {r0, sl, fp, ip, pc}
    194c:	a6290000 	strtge	r0, [r9], -r0
    1950:	0100000c 	tsteq	r0, ip
    1954:	093e0215 	ldmdbeq	lr!, {r0, r2, r4, r9}
    1958:	91020000 	mrsls	r0, (UNDEF: 2)
    195c:	6d74276c 	ldclvs	7, cr2, [r4, #-432]!	; 0xfffffe50
    1960:	17010070 	smlsdxne	r1, r0, r0, r0
    1964:	00009e02 	andeq	r9, r0, r2, lsl #28
    1968:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    196c:	09832800 	stmibeq	r3, {fp, sp}
    1970:	1c010000 	stcne	0, cr0, [r1], {-0}
    1974:	00009302 	andeq	r9, r0, r2, lsl #6
    1978:	002fa800 	eoreq	sl, pc, r0, lsl #16
    197c:	00009408 	andeq	r9, r0, r8, lsl #8
    1980:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    1984:	29000009 	stmdbcs	r0, {r0, r3}
    1988:	00000d1f 	andeq	r0, r0, pc, lsl sp
    198c:	9e021c01 	cdpls	12, 0, cr1, cr2, cr1, {0}
    1990:	02000000 	andeq	r0, r0, #0
    1994:	74276f91 	strtvc	r6, [r7], #-3985	; 0xfffff06f
    1998:	0100706d 	tsteq	r0, sp, rrx
    199c:	009e021e 	addseq	r0, lr, lr, lsl r2
    19a0:	91020000 	mrsls	r0, (UNDEF: 2)
    19a4:	14260077 	strtne	r0, [r6], #-119	; 0xffffff89
    19a8:	01000009 	tsteq	r0, r9
    19ac:	303c0236 	eorscc	r0, ip, r6, lsr r2
    19b0:	00800800 	addeq	r0, r0, r0, lsl #16
    19b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    19b8:	00000a0d 	andeq	r0, r0, sp, lsl #20
    19bc:	000ad129 	andeq	sp, sl, r9, lsr #2
    19c0:	02360100 	eorseq	r0, r6, #0, 2
    19c4:	00000a0d 	andeq	r0, r0, sp, lsl #20
    19c8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    19cc:	04240408 	strteq	r0, [r4], #-1032	; 0xfffffbf8
    19d0:	96260000 	strtls	r0, [r6], -r0
    19d4:	01000009 	tsteq	r0, r9
    19d8:	30bc0243 	adcscc	r0, ip, r3, asr #4
    19dc:	00800800 	addeq	r0, r0, r0, lsl #16
    19e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    19e4:	00000a39 	andeq	r0, r0, r9, lsr sl
    19e8:	000ad129 	andeq	sp, sl, r9, lsr #2
    19ec:	02430100 	subeq	r0, r3, #0, 2
    19f0:	00000a0d 	andeq	r0, r0, sp, lsl #20
    19f4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    19f8:	000c6b28 	andeq	r6, ip, r8, lsr #22
    19fc:	02500100 	subseq	r0, r0, #0, 2
    1a00:	00000093 	muleq	r0, r3, r0
    1a04:	0800313c 	stmdaeq	r0, {r2, r3, r4, r5, r8, ip, sp}
    1a08:	00000044 	andeq	r0, r0, r4, asr #32
    1a0c:	0a729c01 	beq	1ca8a18 <_Min_Stack_Size+0x1ca8818>
    1a10:	e4290000 	strt	r0, [r9], #-0
    1a14:	01000006 	tsteq	r0, r6
    1a18:	04560250 	ldrbeq	r0, [r6], #-592	; 0xfffffdb0
    1a1c:	91020000 	mrsls	r0, (UNDEF: 2)
    1a20:	6d74276f 	ldclvs	7, cr2, [r4, #-444]!	; 0xfffffe44
    1a24:	52010070 	andpl	r0, r1, #112	; 0x70
    1a28:	00009e02 	andeq	r9, r0, r2, lsl #28
    1a2c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1a30:	06d92b00 	ldrbeq	r2, [r9], r0, lsl #22
    1a34:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    1a38:	00045602 	andeq	r5, r4, r2, lsl #12
    1a3c:	00318000 	eorseq	r8, r1, r0
    1a40:	00001008 	andeq	r1, r0, r8
    1a44:	269c0100 	ldrcs	r0, [ip], r0, lsl #2
    1a48:	000009c4 	andeq	r0, r0, r4, asr #19
    1a4c:	90026301 	andls	r6, r2, r1, lsl #6
    1a50:	42080031 	andmi	r0, r8, #49	; 0x31
    1a54:	01000000 	mrseq	r0, (UNDEF: 0)
    1a58:	000aae9c 	muleq	sl, ip, lr
    1a5c:	08632900 	stmdaeq	r3!, {r8, fp, sp}^
    1a60:	63010000 	movwvs	r0, #4096	; 0x1000
    1a64:	000aae02 	andeq	sl, sl, r2, lsl #28
    1a68:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1a6c:	8a040800 	bhi	103a74 <_Min_Stack_Size+0x103874>
    1a70:	26000004 	strcs	r0, [r0], -r4
    1a74:	00000cff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1a78:	d4026901 	strle	r6, [r2], #-2305	; 0xfffff6ff
    1a7c:	44080031 	strmi	r0, [r8], #-49	; 0xffffffcf
    1a80:	01000000 	mrseq	r0, (UNDEF: 0)
    1a84:	000ada9c 	muleq	sl, ip, sl
    1a88:	08632900 	stmdaeq	r3!, {r8, fp, sp}^
    1a8c:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    1a90:	000aae02 	andeq	sl, sl, r2, lsl #28
    1a94:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1a98:	0afd2400 	beq	fff4aaa0 <BootRAM+0xeebb241>
    1a9c:	6d010000 	stcvs	0, cr0, [r1, #-0]
    1aa0:	00000414 	andeq	r0, r0, r4, lsl r4
    1aa4:	01140305 	tsteq	r4, r5, lsl #6
    1aa8:	fe242000 	cdp2	0, 2, cr2, cr4, cr0, {0}
    1aac:	01000007 	tsteq	r0, r7
    1ab0:	0003af6e 	andeq	sl, r3, lr, ror #30
    1ab4:	18030500 	stmdane	r3, {r8, sl}
    1ab8:	2c200001 	stccs	0, cr0, [r0], #-4
    1abc:	000008a4 	andeq	r0, r0, r4, lsr #17
    1ac0:	02195f01 	andseq	r5, r9, #1, 30
    1ac4:	03050000 	movweq	r0, #20480	; 0x5000
    1ac8:	20000084 	andcs	r0, r0, r4, lsl #1
    1acc:	0004d800 	andeq	sp, r4, r0, lsl #16
    1ad0:	80000400 	andhi	r0, r0, r0, lsl #8
    1ad4:	04000006 	streq	r0, [r0], #-6
    1ad8:	00011101 	andeq	r1, r1, r1, lsl #2
    1adc:	0db40c00 	ldceq	12, cr0, [r4]
    1ae0:	036e0000 	cmneq	lr, #0
    1ae4:	01e80000 	mvneq	r0, r0
    1ae8:	00000000 	andeq	r0, r0, r0
    1aec:	0e8b0000 	cdpeq	0, 8, cr0, cr11, cr0, {0}
    1af0:	01020000 	mrseq	r0, (UNDEF: 2)
    1af4:	00019206 	andeq	r9, r1, r6, lsl #4
    1af8:	00e30300 	rsceq	r0, r3, r0, lsl #6
    1afc:	1d020000 	stcne	0, cr0, [r2, #-0]
    1b00:	00000037 	andeq	r0, r0, r7, lsr r0
    1b04:	90080102 	andls	r0, r8, r2, lsl #2
    1b08:	02000001 	andeq	r0, r0, #1
    1b0c:	00950502 	addseq	r0, r5, r2, lsl #10
    1b10:	72030000 	andvc	r0, r3, #0
    1b14:	02000000 	andeq	r0, r0, #0
    1b18:	0000502b 	andeq	r5, r0, fp, lsr #32
    1b1c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1b20:	000001f2 	strdeq	r0, [r0], -r2
    1b24:	bd050402 	cfstrslt	mvf0, [r5, #-8]
    1b28:	03000000 	movweq	r0, #0
    1b2c:	00000067 	andeq	r0, r0, r7, rrx
    1b30:	00694102 	rsbeq	r4, r9, r2, lsl #2
    1b34:	04020000 	streq	r0, [r2], #-0
    1b38:	0001c907 	andeq	ip, r1, r7, lsl #18
    1b3c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    1b40:	000000b8 	strheq	r0, [r0], -r8
    1b44:	c4070802 	strgt	r0, [r7], #-2050	; 0xfffff7fe
    1b48:	04000001 	streq	r0, [r0], #-1
    1b4c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1b50:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    1b54:	0001ce07 	andeq	ip, r1, r7, lsl #28
    1b58:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
    1b5c:	000002f8 	strdeq	r0, [r0], -r8
    1b60:	59070402 	stmdbpl	r7, {r1, sl}
    1b64:	05000000 	streq	r0, [r0, #-0]
    1b68:	0000a004 	andeq	sl, r0, r4
    1b6c:	01020600 	tsteq	r2, r0, lsl #12
    1b70:	00019908 	andeq	r9, r1, r8, lsl #18
    1b74:	00e50300 	rsceq	r0, r5, r0, lsl #6
    1b78:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    1b7c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1b80:	00007403 	andeq	r7, r0, r3, lsl #8
    1b84:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
    1b88:	03000000 	movweq	r0, #0
    1b8c:	00000069 	andeq	r0, r0, r9, rrx
    1b90:	005e3003 	subseq	r3, lr, r3
    1b94:	23070000 	movwcs	r0, #28672	; 0x7000
    1b98:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1b9c:	00ee9e04 	rsceq	r9, lr, r4, lsl #28
    1ba0:	4b080000 	blmi	201ba8 <_Min_Stack_Size+0x2019a8>
    1ba4:	04000007 	streq	r0, [r0], #-7
    1ba8:	00009aa0 	andeq	r9, r0, r0, lsr #21
    1bac:	45080000 	strmi	r0, [r8, #-0]
    1bb0:	0400000c 	streq	r0, [r0], #-12
    1bb4:	00009aa1 	andeq	r9, r0, r1, lsr #21
    1bb8:	09000400 	stmdbeq	r0, {sl}
    1bbc:	0053435f 	subseq	r4, r3, pc, asr r3
    1bc0:	13a60408 			; <UNDEFINED> instruction: 0x13a60408
    1bc4:	08000001 	stmdaeq	r0, {r0}
    1bc8:	00003860 	andeq	r3, r0, r0, ror #16
    1bcc:	009aa804 	addseq	sl, sl, r4, lsl #16
    1bd0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1bd4:	00003a1c 	andeq	r3, r0, ip, lsl sl
    1bd8:	009aa904 	addseq	sl, sl, r4, lsl #18
    1bdc:	00040000 	andeq	r0, r4, r0
    1be0:	b304080a 	movwlt	r0, #18442	; 0x480a
    1be4:	00000134 	andeq	r0, r0, r4, lsr r1
    1be8:	0008eb08 	andeq	lr, r8, r8, lsl #22
    1bec:	43b50400 			; <UNDEFINED> instruction: 0x43b50400
    1bf0:	00000001 	andeq	r0, r0, r1
    1bf4:	000a1208 	andeq	r1, sl, r8, lsl #4
    1bf8:	59b60400 	ldmibpl	r6!, {sl}
    1bfc:	04000001 	streq	r0, [r0], #-1
    1c00:	00a80b00 	adceq	r0, r8, r0, lsl #22
    1c04:	01430000 	mrseq	r0, (UNDEF: 67)
    1c08:	be0c0000 	cdplt	0, 0, cr0, cr12, cr0, {0}
    1c0c:	00000000 	andeq	r0, r0, r0
    1c10:	01340405 	teqeq	r4, r5, lsl #8
    1c14:	590d0000 	stmdbpl	sp, {}	; <UNPREDICTABLE>
    1c18:	0c000001 	stceq	0, cr0, [r0], {1}
    1c1c:	000000be 	strheq	r0, [r0], -lr
    1c20:	0000a80c 	andeq	sl, r0, ip, lsl #16
    1c24:	04050000 	streq	r0, [r5], #-0
    1c28:	00000149 	andeq	r0, r0, r9, asr #2
    1c2c:	bb04080a 	bllt	103c5c <_Min_Stack_Size+0x103a5c>
    1c30:	00000180 	andeq	r0, r0, r0, lsl #3
    1c34:	0008eb08 	andeq	lr, r8, r8, lsl #22
    1c38:	85bd0400 	ldrhi	r0, [sp, #1024]!	; 0x400
    1c3c:	00000001 	andeq	r0, r0, r1
    1c40:	000a1208 	andeq	r1, sl, r8, lsl #4
    1c44:	96be0400 	ldrtls	r0, [lr], r0, lsl #8
    1c48:	04000001 	streq	r0, [r0], #-1
    1c4c:	00a80e00 	adceq	r0, r8, r0, lsl #28
    1c50:	04050000 	streq	r0, [r5], #-0
    1c54:	00000180 	andeq	r0, r0, r0, lsl #3
    1c58:	0001960d 	andeq	r9, r1, sp, lsl #12
    1c5c:	00a80c00 	adceq	r0, r8, r0, lsl #24
    1c60:	05000000 	streq	r0, [r0, #-0]
    1c64:	00018b04 	andeq	r8, r1, r4, lsl #22
    1c68:	495f0f00 	ldmdbmi	pc, {r8, r9, sl, fp}^	; <UNPREDICTABLE>
    1c6c:	04080046 	streq	r0, [r8], #-70	; 0xffffffba
    1c70:	0001bfae 	andeq	fp, r1, lr, lsr #31
    1c74:	55421000 	strbpl	r1, [r2, #-0]
    1c78:	b7040053 	smlsdlt	r4, r3, r0, r0
    1c7c:	00000113 	andeq	r0, r0, r3, lsl r1
    1c80:	49505310 	ldmdbmi	r0, {r4, r8, r9, ip, lr}^
    1c84:	5fbf0400 	svcpl	0x00bf0400
    1c88:	00000001 	andeq	r0, r0, r1
    1c8c:	00073507 	andeq	r3, r7, r7, lsl #10
    1c90:	97042000 	strls	r2, [r4, -r0]
    1c94:	00000205 	andeq	r0, r0, r5, lsl #4
    1c98:	000b5808 	andeq	r5, fp, r8, lsl #16
    1c9c:	b3990400 	orrslt	r0, r9, #0, 8
    1ca0:	00000000 	andeq	r0, r0, r0
    1ca4:	00646911 	rsbeq	r6, r4, r1, lsl r9
    1ca8:	02059a04 	andeq	r9, r5, #4, 20	; 0x4000
    1cac:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1cb0:	00000b24 	andeq	r0, r0, r4, lsr #22
    1cb4:	00c9a204 	sbceq	sl, r9, r4, lsl #4
    1cb8:	11080000 	mrsne	r0, (UNDEF: 8)
    1cbc:	04005343 	streq	r5, [r0], #-835	; 0xfffffcbd
    1cc0:	0000eeaa 	andeq	lr, r0, sl, lsr #29
    1cc4:	49111000 	ldmdbmi	r1, {ip}
    1cc8:	c2040046 	andgt	r0, r4, #70	; 0x46
    1ccc:	0000019c 	muleq	r0, ip, r1
    1cd0:	a8120018 	ldmdage	r2, {r3, r4}
    1cd4:	15000000 	strne	r0, [r0, #-0]
    1cd8:	13000002 	movwne	r0, #2
    1cdc:	00000093 	muleq	r0, r3, r0
    1ce0:	a3030005 	movwge	r0, #12293	; 0x3005
    1ce4:	04000008 	streq	r0, [r0], #-8
    1ce8:	0001bfc3 	andeq	fp, r1, r3, asr #31
    1cec:	0d5f1400 	cfldrdeq	mvd1, [pc, #-0]	; 1cf4 <_Min_Stack_Size+0x1af4>
    1cf0:	34010000 	strcc	r0, [r1], #-0
    1cf4:	000000a8 	andeq	r0, r0, r8, lsr #1
    1cf8:	08003218 	stmdaeq	r0, {r3, r4, r9, ip, sp}
    1cfc:	00000060 	andeq	r0, r0, r0, rrx
    1d00:	02569c01 	subseq	r9, r6, #256	; 0x100
    1d04:	fd150000 	ldc2	0, cr0, [r5, #-0]
    1d08:	0100000b 	tsteq	r0, fp
    1d0c:	0000be34 	andeq	fp, r0, r4, lsr lr
    1d10:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1d14:	74657216 	strbtvc	r7, [r5], #-534	; 0xfffffdea
    1d18:	a8360100 	ldmdage	r6!, {r8}
    1d1c:	02000000 	andeq	r0, r0, #0
    1d20:	17007791 			; <UNDEFINED> instruction: 0x17007791
    1d24:	00000df1 	strdeq	r0, [r0], -r1
    1d28:	32785c01 	rsbscc	r5, r8, #256	; 0x100
    1d2c:	006c0800 	rsbeq	r0, ip, r0, lsl #16
    1d30:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d34:	00000287 	andeq	r0, r0, r7, lsl #5
    1d38:	000bfd15 	andeq	pc, fp, r5, lsl sp	; <UNPREDICTABLE>
    1d3c:	be5c0100 	rdflte	f0, f4, f0
    1d40:	02000000 	andeq	r0, r0, #0
    1d44:	77187491 			; <UNDEFINED> instruction: 0x77187491
    1d48:	5c010062 	stcpl	0, cr0, [r1], {98}	; 0x62
    1d4c:	000000a8 	andeq	r0, r0, r8, lsr #1
    1d50:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1d54:	000d9617 	andeq	r9, sp, r7, lsl r6
    1d58:	e4810100 	str	r0, [r1], #256	; 0x100
    1d5c:	88080032 	stmdahi	r8, {r1, r4, r5}
    1d60:	01000000 	mrseq	r0, (UNDEF: 0)
    1d64:	0002df9c 	muleq	r2, ip, pc	; <UNPREDICTABLE>
    1d68:	0bfd1500 	bleq	fff47170 <BootRAM+0xeeb7911>
    1d6c:	81010000 	mrshi	r0, (UNDEF: 1)
    1d70:	000000be 	strheq	r0, [r0], -lr
    1d74:	15649102 	strbne	r9, [r4, #-258]!	; 0xfffffefe
    1d78:	00000d5a 	andeq	r0, r0, sl, asr sp
    1d7c:	02df8101 	sbcseq	r8, pc, #1073741824	; 0x40000000
    1d80:	91020000 	mrsls	r0, (UNDEF: 2)
    1d84:	656c1860 	strbvs	r1, [ip, #-2144]!	; 0xfffff7a0
    1d88:	8101006e 	tsthi	r1, lr, rrx
    1d8c:	000000b3 	strheq	r0, [r0], -r3
    1d90:	165e9102 	ldrbne	r9, [lr], -r2, lsl #2
    1d94:	83010069 	movwhi	r0, #4201	; 0x1069
    1d98:	000000b3 	strheq	r0, [r0], -r3
    1d9c:	166e9102 	strbtne	r9, [lr], -r2, lsl #2
    1da0:	8401006a 	strhi	r0, [r1], #-106	; 0xffffff96
    1da4:	000000b3 	strheq	r0, [r0], -r3
    1da8:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1dac:	00a80405 	adceq	r0, r8, r5, lsl #8
    1db0:	3a170000 	bcc	5c1db8 <_Min_Stack_Size+0x5c1bb8>
    1db4:	0100000d 	tsteq	r0, sp
    1db8:	00336cce 	eorseq	r6, r3, lr, asr #25
    1dbc:	00009008 	andeq	r9, r0, r8
    1dc0:	3d9c0100 	ldfccs	f0, [ip]
    1dc4:	15000003 	strne	r0, [r0, #-3]
    1dc8:	00000bfd 	strdeq	r0, [r0], -sp
    1dcc:	00bece01 	adcseq	ip, lr, r1, lsl #28
    1dd0:	91020000 	mrsls	r0, (UNDEF: 2)
    1dd4:	0d5a156c 	cfldr64eq	mvdx1, [sl, #-432]	; 0xfffffe50
    1dd8:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    1ddc:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1de0:	18689102 	stmdane	r8!, {r1, r8, ip, pc}^
    1de4:	006e656c 	rsbeq	r6, lr, ip, ror #10
    1de8:	00b3ce01 	adcseq	ip, r3, r1, lsl #28
    1dec:	91020000 	mrsls	r0, (UNDEF: 2)
    1df0:	00691666 	rsbeq	r1, r9, r6, ror #12
    1df4:	00b3d001 	adcseq	sp, r3, r1
    1df8:	91020000 	mrsls	r0, (UNDEF: 2)
    1dfc:	006a1676 	rsbeq	r1, sl, r6, ror r6
    1e00:	00b3d101 	adcseq	sp, r3, r1, lsl #2
    1e04:	91020000 	mrsls	r0, (UNDEF: 2)
    1e08:	6c190074 	ldcvs	0, cr0, [r9], {116}	; 0x74
    1e0c:	0100000d 	tsteq	r0, sp
    1e10:	00b3011c 	adcseq	r0, r3, ip, lsl r1
    1e14:	33fc0000 	mvnscc	r0, #0
    1e18:	00960800 	addseq	r0, r6, r0, lsl #16
    1e1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e20:	00000384 	andeq	r0, r0, r4, lsl #7
    1e24:	006e731a 	rsbeq	r7, lr, sl, lsl r3
    1e28:	a8011c01 	stmdage	r1, {r0, sl, fp, ip}
    1e2c:	02000000 	andeq	r0, r0, #0
    1e30:	761b6791 			; <UNDEFINED> instruction: 0x761b6791
    1e34:	01006c61 	tsteq	r0, r1, ror #24
    1e38:	00b3011e 	adcseq	r0, r3, lr, lsl r1
    1e3c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e40:	0d791c6e 	ldcleq	12, cr1, [r9, #-440]!	; 0xfffffe48
    1e44:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    1e48:	0000b301 	andeq	fp, r0, r1, lsl #6
    1e4c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1e50:	0da71900 			; <UNDEFINED> instruction: 0x0da71900
    1e54:	2d010000 	stccs	0, cr0, [r1, #-0]
    1e58:	0000b301 	andeq	fp, r0, r1, lsl #6
    1e5c:	00349400 	eorseq	r9, r4, r0, lsl #8
    1e60:	00009608 	andeq	r9, r0, r8, lsl #12
    1e64:	cb9c0100 	blgt	fe70226c <BootRAM+0xd672a0d>
    1e68:	1a000003 	bne	1e7c <_Min_Stack_Size+0x1c7c>
    1e6c:	01006e73 	tsteq	r0, r3, ror lr
    1e70:	00a8012d 	adceq	r0, r8, sp, lsr #2
    1e74:	91020000 	mrsls	r0, (UNDEF: 2)
    1e78:	61761b67 	cmnvs	r6, r7, ror #22
    1e7c:	2f01006c 	svccs	0x0001006c
    1e80:	0000b301 	andeq	fp, r0, r1, lsl #6
    1e84:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    1e88:	000d791c 	andeq	r7, sp, ip, lsl r9
    1e8c:	012f0100 			; <UNDEFINED> instruction: 0x012f0100
    1e90:	000000b3 	strheq	r0, [r0], -r3
    1e94:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1e98:	000de31d 	andeq	lr, sp, sp, lsl r3
    1e9c:	013d0100 	teqeq	sp, r0, lsl #2
    1ea0:	0800352c 	stmdaeq	r0, {r2, r3, r5, r8, sl, ip, sp}
    1ea4:	000000b8 	strheq	r0, [r0], -r8
    1ea8:	042c9c01 	strteq	r9, [ip], #-3073	; 0xfffff3ff
    1eac:	731a0000 	tstvc	sl, #0
    1eb0:	3d01006e 	stccc	0, cr0, [r1, #-440]	; 0xfffffe48
    1eb4:	0000a801 	andeq	sl, r0, r1, lsl #16
    1eb8:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
    1ebc:	000d7e1e 	andeq	r7, sp, lr, lsl lr
    1ec0:	013d0100 	teqeq	sp, r0, lsl #2
    1ec4:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1ec8:	1a609102 	bne	18262d8 <_Min_Stack_Size+0x18260d8>
    1ecc:	006e656c 	rsbeq	r6, lr, ip, ror #10
    1ed0:	b3013d01 	movwlt	r3, #7425	; 0x1d01
    1ed4:	02000000 	andeq	r0, r0, #0
    1ed8:	701b6491 	mulsvc	fp, r1, r4
    1edc:	01007274 	tsteq	r0, r4, ror r2
    1ee0:	00b3013f 	adcseq	r0, r3, pc, lsr r1
    1ee4:	91020000 	mrsls	r0, (UNDEF: 2)
    1ee8:	0d321c6e 	ldceq	12, cr1, [r2, #-440]!	; 0xfffffe48
    1eec:	40010000 	andmi	r0, r1, r0
    1ef0:	0000be01 	andeq	fp, r0, r1, lsl #28
    1ef4:	68910200 	ldmvs	r1, {r9}
    1ef8:	0d4c1d00 	stcleq	13, cr1, [ip, #-0]
    1efc:	4b010000 	blmi	41f04 <_Min_Stack_Size+0x41d04>
    1f00:	0035e401 	eorseq	lr, r5, r1, lsl #8
    1f04:	0000b808 	andeq	fp, r0, r8, lsl #16
    1f08:	8d9c0100 	ldfhis	f0, [ip]
    1f0c:	1a000004 	bne	1f24 <_Min_Stack_Size+0x1d24>
    1f10:	01006e73 	tsteq	r0, r3, ror lr
    1f14:	00a8014b 	adceq	r0, r8, fp, asr #2
    1f18:	91020000 	mrsls	r0, (UNDEF: 2)
    1f1c:	0d7e1e67 	ldcleq	14, cr1, [lr, #-412]!	; 0xfffffe64
    1f20:	4b010000 	blmi	41f28 <_Min_Stack_Size+0x41d28>
    1f24:	0002df01 	andeq	sp, r2, r1, lsl #30
    1f28:	60910200 	addsvs	r0, r1, r0, lsl #4
    1f2c:	6e656c1a 	mcrvs	12, 3, r6, cr5, cr10, {0}
    1f30:	014b0100 	mrseq	r0, (UNDEF: 91)
    1f34:	000000b3 	strheq	r0, [r0], -r3
    1f38:	1b649102 	blne	1926348 <_Min_Stack_Size+0x1926148>
    1f3c:	00727470 	rsbseq	r7, r2, r0, ror r4
    1f40:	b3014d01 	movwlt	r4, #7425	; 0x1d01
    1f44:	02000000 	andeq	r0, r0, #0
    1f48:	321c6e91 	andscc	r6, ip, #2320	; 0x910
    1f4c:	0100000d 	tsteq	r0, sp
    1f50:	00be014e 	adcseq	r0, lr, lr, asr #2
    1f54:	91020000 	mrsls	r0, (UNDEF: 2)
    1f58:	861d0068 	ldrhi	r0, [sp], -r8, rrx
    1f5c:	0100000d 	tsteq	r0, sp
    1f60:	369c015b 			; <UNDEFINED> instruction: 0x369c015b
    1f64:	00900800 	addseq	r0, r0, r0, lsl #16
    1f68:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f6c:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1f70:	006e731a 	rsbeq	r7, lr, sl, lsl r3
    1f74:	a8015b01 	stmdage	r1, {r0, r8, r9, fp, ip, lr}
    1f78:	02000000 	andeq	r0, r0, #0
    1f7c:	6c1a6791 	ldcvs	7, cr6, [sl], {145}	; 0x91
    1f80:	01006e65 	tsteq	r0, r5, ror #28
    1f84:	00b3015b 	adcseq	r0, r3, fp, asr r1
    1f88:	91020000 	mrsls	r0, (UNDEF: 2)
    1f8c:	74701b64 	ldrbtvc	r1, [r0], #-2916	; 0xfffff49c
    1f90:	5d010072 	stcpl	0, cr0, [r1, #-456]	; 0xfffffe38
    1f94:	0000b301 	andeq	fp, r0, r1, lsl #6
    1f98:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    1f9c:	08a41f00 	stmiaeq	r4!, {r8, r9, sl, fp, ip}
    1fa0:	c5040000 	strgt	r0, [r4, #-0]
    1fa4:	00000215 	andeq	r0, r0, r5, lsl r2
    1fa8:	00093200 	andeq	r3, r9, r0, lsl #4
    1fac:	48000400 	stmdami	r0, {sl}
    1fb0:	04000008 	streq	r0, [r0], #-8
    1fb4:	00011101 	andeq	r1, r1, r1, lsl #2
    1fb8:	14600c00 	strbtne	r0, [r0], #-3072	; 0xfffff400
    1fbc:	036e0000 	cmneq	lr, #0
    1fc0:	02380000 	eorseq	r0, r8, #0
    1fc4:	00000000 	andeq	r0, r0, r0
    1fc8:	10670000 	rsbne	r0, r7, r0
    1fcc:	b3020000 	movwlt	r0, #8192	; 0x2000
    1fd0:	02000004 	andeq	r0, r0, #4
    1fd4:	0000301b 	andeq	r3, r0, fp, lsl r0
    1fd8:	06010300 	streq	r0, [r1], -r0, lsl #6
    1fdc:	00000192 	muleq	r0, r2, r1
    1fe0:	0000e302 	andeq	lr, r0, r2, lsl #6
    1fe4:	421d0200 	andsmi	r0, sp, #0, 4
    1fe8:	03000000 	movweq	r0, #0
    1fec:	01900801 	orrseq	r0, r0, r1, lsl #16
    1ff0:	02030000 	andeq	r0, r3, #0
    1ff4:	00009505 	andeq	r9, r0, r5, lsl #10
    1ff8:	00720200 	rsbseq	r0, r2, r0, lsl #4
    1ffc:	2b020000 	blcs	82004 <_Min_Stack_Size+0x81e04>
    2000:	0000005b 	andeq	r0, r0, fp, asr r0
    2004:	f2070203 	vhsub.s8	d0, d7, d3
    2008:	02000001 	andeq	r0, r0, #1
    200c:	0000066f 	andeq	r0, r0, pc, ror #12
    2010:	006d3f02 	rsbeq	r3, sp, r2, lsl #30
    2014:	04030000 	streq	r0, [r3], #-0
    2018:	0000bd05 	andeq	fp, r0, r5, lsl #26
    201c:	00670200 	rsbeq	r0, r7, r0, lsl #4
    2020:	41020000 	mrsmi	r0, (UNDEF: 2)
    2024:	0000007f 	andeq	r0, r0, pc, ror r0
    2028:	c9070403 	stmdbgt	r7, {r0, r1, sl}
    202c:	03000001 	movweq	r0, #1
    2030:	00b80508 	adcseq	r0, r8, r8, lsl #10
    2034:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2038:	0001c407 	andeq	ip, r1, r7, lsl #8
    203c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    2040:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2044:	ce070403 	cdpgt	4, 0, cr0, cr7, cr3, {0}
    2048:	03000001 	movweq	r0, #1
    204c:	02f80408 	rscseq	r0, r8, #8, 8	; 0x8000000
    2050:	04030000 	streq	r0, [r3], #-0
    2054:	00005907 	andeq	r5, r0, r7, lsl #18
    2058:	b6040500 	strlt	r0, [r4], -r0, lsl #10
    205c:	06000000 	streq	r0, [r0], -r0
    2060:	99080103 	stmdbls	r8, {r0, r1, r8}
    2064:	02000001 	andeq	r0, r0, #1
    2068:	000004b5 			; <UNDEFINED> instruction: 0x000004b5
    206c:	00251403 	eoreq	r1, r5, r3, lsl #8
    2070:	e5020000 	str	r0, [r2, #-0]
    2074:	03000000 	movweq	r0, #0
    2078:	00003718 	andeq	r3, r0, r8, lsl r7
    207c:	00740200 	rsbseq	r0, r4, r0, lsl #4
    2080:	24030000 	strcs	r0, [r3], #-0
    2084:	00000050 	andeq	r0, r0, r0, asr r0
    2088:	00067102 	andeq	r7, r6, r2, lsl #2
    208c:	622c0300 	eorvs	r0, ip, #0, 6
    2090:	02000000 	andeq	r0, r0, #0
    2094:	00000069 	andeq	r0, r0, r9, rrx
    2098:	00743003 	rsbseq	r3, r4, r3
    209c:	c9070000 	stmdbgt	r7, {}	; <UNPREDICTABLE>
    20a0:	05000000 	streq	r0, [r0, #-0]
    20a4:	08000001 	stmdaeq	r0, {r0}
    20a8:	000000a9 	andeq	r0, r0, r9, lsr #1
    20ac:	c9070005 	stmdbgt	r7, {r0, r2}
    20b0:	15000000 	strne	r0, [r0, #-0]
    20b4:	08000001 	stmdaeq	r0, {r0}
    20b8:	000000a9 	andeq	r0, r0, r9, lsr #1
    20bc:	01090003 	tsteq	r9, r3
    20c0:	00000042 	andeq	r0, r0, r2, asr #32
    20c4:	01403f04 	cmpeq	r0, r4, lsl #30
    20c8:	490a0000 	stmdbmi	sl, {}	; <UNPREDICTABLE>
    20cc:	0000000e 	andeq	r0, r0, lr
    20d0:	0014100a 	andseq	r1, r4, sl
    20d4:	d90a0100 	stmdble	sl, {r8}
    20d8:	0200000e 	andeq	r0, r0, #14
    20dc:	0013c40a 	andseq	ip, r3, sl, lsl #8
    20e0:	9a0a0300 	bls	282ce8 <_Min_Stack_Size+0x282ae8>
    20e4:	0400000e 	streq	r0, [r0], #-14
    20e8:	42010900 	andmi	r0, r1, #0, 18
    20ec:	04000000 	streq	r0, [r0], #-0
    20f0:	0002c749 	andeq	ip, r2, r9, asr #14
    20f4:	14060a00 	strne	r0, [r6], #-2560	; 0xfffff600
    20f8:	0a000000 	beq	2100 <_Min_Stack_Size+0x1f00>
    20fc:	00000f8c 	andeq	r0, r0, ip, lsl #31
    2100:	12140a01 	andsne	r0, r4, #4096	; 0x1000
    2104:	0a020000 	beq	8210c <_Min_Stack_Size+0x81f0c>
    2108:	000012b6 			; <UNDEFINED> instruction: 0x000012b6
    210c:	0e660a03 	vmuleq.f32	s1, s12, s6
    2110:	0a040000 	beq	102118 <_Min_Stack_Size+0x101f18>
    2114:	000013fb 	strdeq	r1, [r0], -fp
    2118:	6e640b05 	vmulvs.f64	d16, d4, d5
    211c:	0a060073 	beq	1822f0 <_Min_Stack_Size+0x1820f0>
    2120:	00000ec3 	andeq	r0, r0, r3, asr #29
    2124:	117f0a07 	cmnne	pc, r7, lsl #20
    2128:	0a080000 	beq	202130 <_Min_Stack_Size+0x201f30>
    212c:	000011f0 	strdeq	r1, [r0], -r0
    2130:	10740a09 	rsbsne	r0, r4, r9, lsl #20
    2134:	0a0a0000 	beq	28213c <_Min_Stack_Size+0x281f3c>
    2138:	00001362 	andeq	r1, r0, r2, ror #6
    213c:	0e1c0a0b 	vnmlseq.f32	s0, s24, s22
    2140:	0a0c0000 	beq	302148 <_Min_Stack_Size+0x301f48>
    2144:	000013e7 	andeq	r1, r0, r7, ror #7
    2148:	0f650a0d 	svceq	0x00650a0d
    214c:	0a0e0000 	beq	382154 <_Min_Stack_Size+0x381f54>
    2150:	000010fd 	strdeq	r1, [r0], -sp
    2154:	127b0a0f 	rsbsne	r0, fp, #61440	; 0xf000
    2158:	0a100000 	beq	402160 <_Min_Stack_Size+0x401f60>
    215c:	000013bb 			; <UNDEFINED> instruction: 0x000013bb
    2160:	10440a11 	subne	r0, r4, r1, lsl sl
    2164:	0a120000 	beq	48216c <_Min_Stack_Size+0x481f6c>
    2168:	000010aa 	andeq	r1, r0, sl, lsr #1
    216c:	102e0a13 	eorne	r0, lr, r3, lsl sl
    2170:	0a140000 	beq	502178 <_Min_Stack_Size+0x501f78>
    2174:	00000f7f 	andeq	r0, r0, pc, ror pc
    2178:	0fb60a15 	svceq	0x00b60a15
    217c:	0a160000 	beq	582184 <_Min_Stack_Size+0x581f84>
    2180:	000010e8 	andeq	r1, r0, r8, ror #1
    2184:	10820a17 	addne	r0, r2, r7, lsl sl
    2188:	0a180000 	beq	602190 <_Min_Stack_Size+0x601f90>
    218c:	0000143c 	andeq	r1, r0, ip, lsr r4
    2190:	10960a19 	addsne	r0, r6, r9, lsl sl
    2194:	0a1a0000 	beq	68219c <_Min_Stack_Size+0x681f9c>
    2198:	0000122a 	andeq	r1, r0, sl, lsr #4
    219c:	10530a1b 	subsne	r0, r3, fp, lsl sl
    21a0:	0a1c0000 	beq	7021a8 <_Min_Stack_Size+0x701fa8>
    21a4:	000011db 	ldrdeq	r1, [r0], -fp
    21a8:	11be0a1d 			; <UNDEFINED> instruction: 0x11be0a1d
    21ac:	0a1e0000 	beq	7821b4 <_Min_Stack_Size+0x781fb4>
    21b0:	00000ffa 	strdeq	r0, [r0], -sl
    21b4:	0f050a1f 	svceq	0x00050a1f
    21b8:	0a200000 	beq	8021c0 <_Min_Stack_Size+0x801fc0>
    21bc:	0000112c 	andeq	r1, r0, ip, lsr #2
    21c0:	0e850a21 	vdiveq.f32	s0, s10, s3
    21c4:	0a220000 	beq	8821cc <_Min_Stack_Size+0x881fcc>
    21c8:	00001386 	andeq	r1, r0, r6, lsl #7
    21cc:	12c60a23 	sbcne	r0, r6, #143360	; 0x23000
    21d0:	0a240000 	beq	9021d8 <_Min_Stack_Size+0x901fd8>
    21d4:	00000fec 	andeq	r0, r0, ip, ror #31
    21d8:	10d30a25 	sbcsne	r0, r3, r5, lsr #20
    21dc:	0a260000 	beq	9821e4 <_Min_Stack_Size+0x981fe4>
    21e0:	0000123a 	andeq	r1, r0, sl, lsr r2
    21e4:	0f430a27 	svceq	0x00430a27
    21e8:	0a280000 	beq	a021f0 <_Min_Stack_Size+0xa01ff0>
    21ec:	00001270 	andeq	r1, r0, r0, ror r2
    21f0:	12860a29 	addne	r0, r6, #167936	; 0x29000
    21f4:	0a2a0000 	beq	a821fc <_Min_Stack_Size+0xa81ffc>
    21f8:	00001156 	andeq	r1, r0, r6, asr r1
    21fc:	13f40a2b 	mvnsne	r0, #176128	; 0x2b000
    2200:	0a2c0000 	beq	b02208 <_Min_Stack_Size+0xb02008>
    2204:	00001138 	andeq	r1, r0, r8, lsr r1
    2208:	0f970a2d 	svceq	0x00970a2d
    220c:	0a2e0000 	beq	b82214 <_Min_Stack_Size+0xb82014>
    2210:	00000e25 	andeq	r0, r0, r5, lsr #28
    2214:	116e0a2f 	cmnne	lr, pc, lsr #20
    2218:	0a300000 	beq	c02220 <_Min_Stack_Size+0xc02020>
    221c:	000012e8 	andeq	r1, r0, r8, ror #5
    2220:	0ea70a31 			; <UNDEFINED> instruction: 0x0ea70a31
    2224:	0a320000 	beq	c8222c <_Min_Stack_Size+0xc8202c>
    2228:	00000e71 	andeq	r0, r0, r1, ror lr
    222c:	10610a33 	rsbne	r0, r1, r3, lsr sl
    2230:	0a340000 	beq	d02238 <_Min_Stack_Size+0xd02038>
    2234:	0000148d 	andeq	r1, r0, sp, lsl #9
    2238:	139f0a35 	orrsne	r0, pc, #217088	; 0x35000
    223c:	0a360000 	beq	d82244 <_Min_Stack_Size+0xd82044>
    2240:	0000125f 	andeq	r1, r0, pc, asr r2
    2244:	118c0a37 	orrne	r0, ip, r7, lsr sl
    2248:	0a380000 	beq	e02250 <_Min_Stack_Size+0xe02050>
    224c:	00000fa7 	andeq	r0, r0, r7, lsr #31
    2250:	0f590a39 	svceq	0x00590a39
    2254:	0a3a0000 	beq	e8225c <_Min_Stack_Size+0xe8205c>
    2258:	000012dc 	ldrdeq	r1, [r0], -ip
    225c:	0f260a3b 	svceq	0x00260a3b
    2260:	0a3c0000 	beq	f02268 <_Min_Stack_Size+0xf02068>
    2264:	00000ef0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2268:	11220a3d 			; <UNDEFINED> instruction: 0x11220a3d
    226c:	00ff0000 	rscseq	r0, pc, r0
    2270:	0402240c 	streq	r2, [r2], #-1036	; 0xfffffbf4
    2274:	0003848b 	andeq	r8, r3, fp, lsl #9
    2278:	706f0d00 	rsbvc	r0, pc, r0, lsl #26
    227c:	c98c0400 	stmibgt	ip, {sl}
    2280:	00000000 	andeq	r0, r0, r0
    2284:	000e550e 	andeq	r5, lr, lr, lsl #10
    2288:	c98d0400 	stmibgt	sp, {sl}
    228c:	01000000 	mrseq	r0, (UNDEF: 0)
    2290:	000ed40e 	andeq	sp, lr, lr, lsl #8
    2294:	c98e0400 	stmibgt	lr, {sl}
    2298:	02000000 	andeq	r0, r0, #0
    229c:	000e440e 	andeq	r4, lr, lr, lsl #8
    22a0:	c98f0400 	stmibgt	pc, {sl}	; <UNPREDICTABLE>
    22a4:	03000000 	movweq	r0, #0
    22a8:	6469780d 	strbtvs	r7, [r9], #-2061	; 0xfffff7f3
    22ac:	ea900400 	b	fe4032b4 <BootRAM+0xd373a55>
    22b0:	04000000 	streq	r0, [r0], #-0
    22b4:	00117a0e 	andseq	r7, r1, lr, lsl #20
    22b8:	d4910400 	ldrle	r0, [r1], #1024	; 0x400
    22bc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    22c0:	0050640e 	subseq	r6, r0, lr, lsl #8
    22c4:	d4920400 	ldrle	r0, [r2], #1024	; 0x400
    22c8:	0a000000 	beq	22d0 <_Min_Stack_Size+0x20d0>
    22cc:	000ecd0e 	andeq	ip, lr, lr, lsl #26
    22d0:	05930400 	ldreq	r0, [r3, #1024]	; 0x400
    22d4:	0c000001 	stceq	0, cr0, [r0], {1}
    22d8:	00114f0e 	andseq	r4, r1, lr, lsl #30
    22dc:	05940400 	ldreq	r0, [r4, #1024]	; 0x400
    22e0:	10000001 	andne	r0, r0, r1
    22e4:	0013b40e 	andseq	fp, r3, lr, lsl #8
    22e8:	05950400 	ldreq	r0, [r5, #1024]	; 0x400
    22ec:	14000001 	strne	r0, [r0], #-1
    22f0:	0011d40e 	andseq	sp, r1, lr, lsl #8
    22f4:	05960400 	ldreq	r0, [r6, #1024]	; 0x400
    22f8:	18000001 	stmdane	r0, {r0}
    22fc:	000ee90e 	andeq	lr, lr, lr, lsl #18
    2300:	84970400 	ldrhi	r0, [r7], #1024	; 0x400
    2304:	1c000003 	stcne	0, cr0, [r0], {3}
    2308:	00145a0e 	andseq	r5, r4, lr, lsl #20
    230c:	94980400 	ldrls	r0, [r8], #1024	; 0x400
    2310:	2c000003 	stccs	0, cr0, [r0], {3}
    2314:	0052f60e 	subseq	pc, r2, lr, lsl #12
    2318:	a4990400 	ldrge	r0, [r9], #1024	; 0x400
    231c:	6c000003 	stcvs	0, cr0, [r0], {3}
    2320:	54504f0d 	ldrbpl	r4, [r0], #-3853	; 0xfffff0f3
    2324:	b49a0400 	ldrlt	r0, [sl], #1024	; 0x400
    2328:	ec000003 	stc	0, cr0, [r0], {3}
    232c:	00c90700 	sbceq	r0, r9, r0, lsl #14
    2330:	03940000 	orrseq	r0, r4, #0
    2334:	a9080000 	stmdbge	r8, {}	; <UNPREDICTABLE>
    2338:	0f000000 	svceq	0x00000000
    233c:	00c90700 	sbceq	r0, r9, r0, lsl #14
    2340:	03a40000 			; <UNDEFINED> instruction: 0x03a40000
    2344:	a9080000 	stmdbge	r8, {}	; <UNPREDICTABLE>
    2348:	3f000000 	svccc	0x00000000
    234c:	00c90700 	sbceq	r0, r9, r0, lsl #14
    2350:	03b40000 			; <UNDEFINED> instruction: 0x03b40000
    2354:	a9080000 	stmdbge	r8, {}	; <UNPREDICTABLE>
    2358:	7f000000 	svcvc	0x00000000
    235c:	00c90700 	sbceq	r0, r9, r0, lsl #14
    2360:	03c50000 	biceq	r0, r5, #0
    2364:	a90f0000 	stmdbge	pc, {}	; <UNPREDICTABLE>
    2368:	37000000 	strcc	r0, [r0, -r0]
    236c:	f5020001 			; <UNDEFINED> instruction: 0xf5020001
    2370:	04000010 	streq	r0, [r0], #-16
    2374:	0002c79b 	muleq	r2, fp, r7
    2378:	11fa1000 	mvnsne	r1, r0
    237c:	04040000 	streq	r0, [r4], #-0
    2380:	0003f39d 	muleq	r3, sp, r3
    2384:	11691100 	cmnne	r9, r0, lsl #2
    2388:	9e040000 	cdpls	0, 0, cr0, cr4, cr0, {0}
    238c:	000000ea 	andeq	r0, r0, sl, ror #1
    2390:	00102911 	andseq	r2, r0, r1, lsl r9
    2394:	059f0400 	ldreq	r0, [pc, #1024]	; 279c <_Min_Stack_Size+0x259c>
    2398:	00000001 	andeq	r0, r0, r1
    239c:	0011fb02 	andseq	pc, r1, r2, lsl #22
    23a0:	d0a00400 	adcle	r0, r0, r0, lsl #8
    23a4:	12000003 	andne	r0, r0, #3
    23a8:	0000120a 	andeq	r1, r0, sl, lsl #4
    23ac:	372c4b01 	strcc	r4, [ip, -r1, lsl #22]!
    23b0:	000c0800 	andeq	r0, ip, r0, lsl #16
    23b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    23b8:	00101613 	andseq	r1, r0, r3, lsl r6
    23bc:	384d0100 	stmdacc	sp, {r8}^
    23c0:	28080037 	stmdacs	r8, {r0, r1, r2, r4, r5}
    23c4:	01000000 	mrseq	r0, (UNDEF: 0)
    23c8:	1253139c 	subsne	r1, r3, #156, 6	; 0x70000002
    23cc:	55010000 	strpl	r0, [r1, #-0]
    23d0:	08003760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip, sp}
    23d4:	00000048 	andeq	r0, r0, r8, asr #32
    23d8:	ab149c01 	blge	5293e4 <_Min_Stack_Size+0x5291e4>
    23dc:	01000011 	tsteq	r0, r1, lsl r0
    23e0:	0037a876 	eorseq	sl, r7, r6, ror r8
    23e4:	0004c808 	andeq	ip, r4, r8, lsl #16
    23e8:	6c9c0100 	ldfvss	f0, [ip], {0}
    23ec:	15000004 	strne	r0, [r0, #-4]
    23f0:	78010069 	stmdavc	r1, {r0, r3, r5, r6}
    23f4:	000000d4 	ldrdeq	r0, [r0], -r4
    23f8:	15769102 	ldrbne	r9, [r6, #-258]!	; 0xfffffefe
    23fc:	01007069 	tsteq	r0, r9, rrx
    2400:	00010579 	andeq	r0, r1, r9, ror r5
    2404:	70910200 	addsvc	r0, r1, r0, lsl #4
    2408:	01006b15 	tsteq	r0, r5, lsl fp
    240c:	0000d47a 	andeq	sp, r0, sl, ror r4
    2410:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2414:	0fc81400 	svceq	0x00c81400
    2418:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    241c:	08003c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, ip, sp}
    2420:	00000638 	andeq	r0, r0, r8, lsr r6
    2424:	04c39c01 	strbeq	r9, [r3], #3073	; 0xc01
    2428:	43160000 	tstmi	r6, #0
    242c:	01007069 	tsteq	r0, r9, rrx
    2430:	0004c3e8 	andeq	ip, r4, r8, ror #7
    2434:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2438:	004edf17 	subeq	sp, lr, r7, lsl pc
    243c:	c3e80100 	mvngt	r0, #0, 2
    2440:	02000004 	andeq	r0, r0, #4
    2444:	69156091 	ldmdbvs	r5, {r0, r4, r7, sp, lr}
    2448:	94ea0100 	strbtls	r0, [sl], #256	; 0x100
    244c:	02000000 	andeq	r0, r0, #0
    2450:	69157491 	ldmdbvs	r5, {r0, r4, r7, sl, ip, sp, lr}
    2454:	eb010070 	bl	4261c <_Min_Stack_Size+0x4241c>
    2458:	00000105 	andeq	r0, r0, r5, lsl #2
    245c:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    2460:	ec01006b 	stc	0, cr0, [r1], {107}	; 0x6b
    2464:	000000d4 	ldrdeq	r0, [r0], -r4
    2468:	00729102 	rsbseq	r9, r2, r2, lsl #2
    246c:	00c90405 	sbceq	r0, r9, r5, lsl #8
    2470:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    2474:	01000011 	tsteq	r0, r1, lsl r0
    2478:	42a8016c 	adcmi	r0, r8, #108, 2
    247c:	043c0800 	ldrteq	r0, [ip], #-2048	; 0xfffff800
    2480:	9c010000 	stcls	0, cr0, [r1], {-0}
    2484:	00000508 	andeq	r0, r0, r8, lsl #10
    2488:	01006919 	tsteq	r0, r9, lsl r9
    248c:	0094016e 	addseq	r0, r4, lr, ror #2
    2490:	91020000 	mrsls	r0, (UNDEF: 2)
    2494:	70691974 	rsbvc	r1, r9, r4, ror r9
    2498:	016f0100 	cmneq	pc, r0, lsl #2
    249c:	00000105 	andeq	r0, r0, r5, lsl #2
    24a0:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    24a4:	7001006b 	andvc	r0, r1, fp, rrx
    24a8:	0000d401 	andeq	sp, r0, r1, lsl #8
    24ac:	72910200 	addsvc	r0, r1, #0, 4
    24b0:	13791a00 	cmnne	r9, #0, 20
    24b4:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    24b8:	0000be01 	andeq	fp, r0, r1, lsl #28
    24bc:	0046e400 	subeq	lr, r6, r0, lsl #8
    24c0:	00029c08 	andeq	r9, r2, r8, lsl #24
    24c4:	b09c0100 	addslt	r0, ip, r0, lsl #2
    24c8:	1b000005 	blne	24e4 <_Min_Stack_Size+0x22e4>
    24cc:	00003a5e 	andeq	r3, r0, lr, asr sl
    24d0:	d401d901 	strle	sp, [r1], #-2305	; 0xfffff6ff
    24d4:	02000000 	andeq	r0, r0, #0
    24d8:	591c4e91 	ldmdbpl	ip, {r0, r4, r7, r9, sl, fp, lr}
    24dc:	01000013 	tsteq	r0, r3, lsl r0
    24e0:	00f501db 	ldrsbteq	r0, [r5], #27
    24e4:	91020000 	mrsls	r0, (UNDEF: 2)
    24e8:	0f3a1c58 	svceq	0x003a1c58
    24ec:	dc010000 	stcle	0, cr0, [r1], {-0}
    24f0:	0000d401 	andeq	sp, r0, r1, lsl #8
    24f4:	56910200 	ldrpl	r0, [r1], r0, lsl #4
    24f8:	01006919 	tsteq	r0, r9, lsl r9
    24fc:	00d401de 	ldrsbeq	r0, [r4], #30
    2500:	91020000 	mrsls	r0, (UNDEF: 2)
    2504:	656c196e 	strbvs	r1, [ip, #-2414]!	; 0xfffff692
    2508:	de01006e 	cdple	0, 0, cr0, cr1, cr14, {3}
    250c:	0000d401 	andeq	sp, r0, r1, lsl #8
    2510:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2514:	01007019 	tsteq	r0, r9, lsl r0
    2518:	04c301df 	strbeq	r0, [r3], #479	; 0x1df
    251c:	91020000 	mrsls	r0, (UNDEF: 2)
    2520:	00651968 	rsbeq	r1, r5, r8, ror #18
    2524:	c301e001 	movwgt	lr, #4097	; 0x1001
    2528:	02000004 	andeq	r0, r0, #4
    252c:	5d1c6091 	ldcpl	0, cr6, [ip, #-580]	; 0xfffffdbc
    2530:	01000009 	tsteq	r0, r9
    2534:	00c901e1 	sbceq	r0, r9, r1, ror #3
    2538:	91020000 	mrsls	r0, (UNDEF: 2)
    253c:	0ebb1c67 	cdpeq	12, 11, cr1, cr11, cr7, {3}
    2540:	e2010000 	and	r0, r1, #0
    2544:	0000c901 	andeq	ip, r0, r1, lsl #18
    2548:	5f910200 	svcpl	0x00910200
    254c:	0014501d 	andseq	r5, r4, sp, lsl r0
    2550:	02340100 	eorseq	r0, r4, #0, 2
    2554:	0800494e 	stmdaeq	r0, {r1, r2, r3, r6, r8, fp, lr}
    2558:	0dff1a00 			; <UNDEFINED> instruction: 0x0dff1a00
    255c:	46010000 	strmi	r0, [r1], -r0
    2560:	0000c902 	andeq	ip, r0, r2, lsl #18
    2564:	00498000 	subeq	r8, r9, r0
    2568:	00022c08 	andeq	r2, r2, r8, lsl #24
    256c:	239c0100 	orrscs	r0, ip, #0, 2
    2570:	19000006 	stmdbne	r0, {r1, r2}
    2574:	006e656c 	rsbeq	r6, lr, ip, ror #10
    2578:	d4024801 	strle	r4, [r2], #-2049	; 0xfffff7ff
    257c:	02000000 	andeq	r0, r0, #0
    2580:	69197091 	ldmdbvs	r9, {r0, r4, r7, ip, sp, lr}
    2584:	02480100 	subeq	r0, r8, #0, 2
    2588:	000000d4 	ldrdeq	r0, [r0], -r4
    258c:	1c769102 	ldfnep	f1, [r6], #-8
    2590:	0000095d 	andeq	r0, r0, sp, asr r9
    2594:	c9024901 	stmdbgt	r2, {r0, r8, fp, lr}
    2598:	02000000 	andeq	r0, r0, #0
    259c:	281c7591 	ldmdacs	ip, {r0, r4, r7, r8, sl, ip, sp, lr}
    25a0:	01000013 	tsteq	r0, r3, lsl r0
    25a4:	00c90249 	sbceq	r0, r9, r9, asr #4
    25a8:	91020000 	mrsls	r0, (UNDEF: 2)
    25ac:	4edf1c74 	mrcmi	12, 6, r1, cr15, cr4, {3}
    25b0:	4a010000 	bmi	425b8 <_Min_Stack_Size+0x423b8>
    25b4:	00010502 	andeq	r0, r1, r2, lsl #10
    25b8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    25bc:	74657219 	strbtvc	r7, [r5], #-537	; 0xfffffde7
    25c0:	024b0100 	subeq	r0, fp, #0, 2
    25c4:	000000c9 	andeq	r0, r0, r9, asr #1
    25c8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    25cc:	00141d1a 	andseq	r1, r4, sl, lsl sp
    25d0:	02d30100 	sbcseq	r0, r3, #0, 2
    25d4:	000000c9 	andeq	r0, r0, r9, asr #1
    25d8:	08004bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, lr}
    25dc:	00000110 	andeq	r0, r0, r0, lsl r1
    25e0:	06699c01 	strbteq	r9, [r9], -r1, lsl #24
    25e4:	69190000 	ldmdbvs	r9, {}	; <UNPREDICTABLE>
    25e8:	02d50100 	sbcseq	r0, r5, #0, 2
    25ec:	000000c9 	andeq	r0, r0, r9, asr #1
    25f0:	1c779102 	ldfnep	f1, [r7], #-8
    25f4:	00004edf 	ldrdeq	r4, [r0], -pc	; <UNPREDICTABLE>
    25f8:	0502d501 	streq	sp, [r2, #-1281]	; 0xfffffaff
    25fc:	02000001 	andeq	r0, r0, #1
    2600:	72197091 	andsvc	r7, r9, #145	; 0x91
    2604:	01007465 	tsteq	r0, r5, ror #8
    2608:	00c902d6 	ldrdeq	r0, [r9], #38	; 0x26
    260c:	91020000 	mrsls	r0, (UNDEF: 2)
    2610:	d31a0076 	tstle	sl, #118	; 0x76
    2614:	01000013 	tsteq	r0, r3, lsl r0
    2618:	00be0317 	adcseq	r0, lr, r7, lsl r3
    261c:	4cbc0000 	ldcmi	0, cr0, [ip]
    2620:	007c0800 	rsbseq	r0, ip, r0, lsl #16
    2624:	9c010000 	stcls	0, cr0, [r1], {-0}
    2628:	000006a2 	andeq	r0, r0, r2, lsr #13
    262c:	706d7419 	rsbvc	r7, sp, r9, lsl r4
    2630:	03190100 	tsteq	r9, #0, 2
    2634:	000000c9 	andeq	r0, r0, r9, asr #1
    2638:	19779102 	ldmdbne	r7!, {r1, r8, ip, pc}^
    263c:	00746572 	rsbseq	r6, r4, r2, ror r5
    2640:	df031a01 	svcle	0x00031a01
    2644:	02000000 	andeq	r0, r0, #0
    2648:	18007091 	stmdane	r0, {r0, r4, r7, ip, sp, lr}
    264c:	00001220 	andeq	r1, r0, r0, lsr #4
    2650:	38034301 	stmdacc	r3, {r0, r8, r9, lr}
    2654:	8808004d 	stmdahi	r8, {r0, r2, r3, r6}
    2658:	01000000 	mrseq	r0, (UNDEF: 0)
    265c:	0006d59c 	muleq	r6, ip, r5
    2660:	00731e00 	rsbseq	r1, r3, r0, lsl #28
    2664:	c9034301 	stmdbgt	r3, {r0, r8, r9, lr}
    2668:	02000000 	andeq	r0, r0, #0
    266c:	621e7791 	andsvs	r7, lr, #38010880	; 0x2440000
    2670:	01006675 	tsteq	r0, r5, ror r6
    2674:	04c30343 	strbeq	r0, [r3], #835	; 0x343
    2678:	91020000 	mrsls	r0, (UNDEF: 2)
    267c:	961f0070 			; <UNDEFINED> instruction: 0x961f0070
    2680:	01000013 	tsteq	r0, r3, lsl r0
    2684:	00c90364 	sbceq	r0, r9, r4, ror #6
    2688:	4dc00000 	stclmi	0, cr0, [r0]
    268c:	002c0800 	eoreq	r0, ip, r0, lsl #16
    2690:	9c010000 	stcls	0, cr0, [r1], {-0}
    2694:	00129120 	andseq	r9, r2, r0, lsr #2
    2698:	037a0100 	cmneq	sl, #0, 2
    269c:	08004dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, lr}
    26a0:	0000002c 	andeq	r0, r0, ip, lsr #32
    26a4:	a4209c01 	strtge	r9, [r0], #-3073	; 0xfffff3ff
    26a8:	01000012 	tsteq	r0, r2, lsl r0
    26ac:	4e18038b 	cdpmi	3, 1, cr0, cr8, cr11, {4}
    26b0:	001c0800 	andseq	r0, ip, r0, lsl #16
    26b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    26b8:	00109c21 	andseq	r9, r0, r1, lsr #24
    26bc:	039d0100 	orrseq	r0, sp, #0, 2
    26c0:	08004e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, lr}
    26c4:	0000003c 	andeq	r0, r0, ip, lsr r0
    26c8:	07349c01 	ldreq	r9, [r4, -r1, lsl #24]!
    26cc:	691e0000 	ldmdbvs	lr, {}	; <UNPREDICTABLE>
    26d0:	9d010070 	stcls	0, cr0, [r1, #-448]	; 0xfffffe40
    26d4:	0004c303 	andeq	ip, r4, r3, lsl #6
    26d8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    26dc:	11942100 	orrsne	r2, r4, r0, lsl #2
    26e0:	a5010000 	strge	r0, [r1, #-0]
    26e4:	004e7003 	subeq	r7, lr, r3
    26e8:	00003c08 	andeq	r3, r0, r8, lsl #24
    26ec:	599c0100 	ldmibpl	ip, {r8}
    26f0:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    26f4:	01007767 	tsteq	r0, r7, ror #14
    26f8:	04c303a5 	strbeq	r0, [r3], #933	; 0x3a5
    26fc:	91020000 	mrsls	r0, (UNDEF: 2)
    2700:	f8210074 			; <UNDEFINED> instruction: 0xf8210074
    2704:	01000012 	tsteq	r0, r2, lsl r0
    2708:	4eac03ad 	cdpmi	3, 10, cr0, cr12, cr13, {5}
    270c:	003c0800 	eorseq	r0, ip, r0, lsl #16
    2710:	9c010000 	stcls	0, cr0, [r1], {-0}
    2714:	0000077e 	andeq	r0, r0, lr, ror r7
    2718:	006e731e 	rsbeq	r7, lr, lr, lsl r3
    271c:	c303ad01 	movwgt	sl, #15617	; 0x3d01
    2720:	02000004 	andeq	r0, r0, #4
    2724:	21007491 			; <UNDEFINED> instruction: 0x21007491
    2728:	00001319 	andeq	r1, r0, r9, lsl r3
    272c:	e803b501 	stmda	r3, {r0, r8, sl, ip, sp, pc}
    2730:	3c08004e 	stccc	0, cr0, [r8], {78}	; 0x4e
    2734:	01000000 	mrseq	r0, (UNDEF: 0)
    2738:	0007a49c 	muleq	r7, ip, r4
    273c:	6e641e00 	cdpvs	14, 6, cr1, cr4, cr0, {0}
    2740:	b5010073 	strlt	r0, [r1, #-115]	; 0xffffff8d
    2744:	0004c303 	andeq	ip, r4, r3, lsl #6
    2748:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    274c:	13482200 	movtne	r2, #33280	; 0x8200
    2750:	c7010000 	strgt	r0, [r1, -r0]
    2754:	0000ea03 	andeq	lr, r0, r3, lsl #20
    2758:	00000000 	andeq	r0, r0, r0
    275c:	00001400 	andeq	r1, r0, r0, lsl #8
    2760:	239c0100 	orrscs	r0, ip, #0, 2
    2764:	00001020 	andeq	r1, r0, r0, lsr #32
    2768:	01052901 	tsteq	r5, r1, lsl #18
    276c:	03050000 	movweq	r0, #20480	; 0x5000
    2770:	20003658 	andcs	r3, r0, r8, asr r6
    2774:	0011a223 	andseq	sl, r1, r3, lsr #4
    2778:	f52a0100 			; <UNDEFINED> instruction: 0xf52a0100
    277c:	05000000 	streq	r0, [r0, #-0]
    2780:	00364803 	eorseq	r4, r6, r3, lsl #16
    2784:	111a2320 	tstne	sl, r0, lsr #6
    2788:	2b010000 	blcs	42790 <_Min_Stack_Size+0x42590>
    278c:	00000105 	andeq	r0, r0, r5, lsl #2
    2790:	36500305 	ldrbcc	r0, [r0], -r5, lsl #6
    2794:	c1232000 			; <UNDEFINED> instruction: 0xc1232000
    2798:	01000010 	tsteq	r0, r0, lsl r0
    279c:	0001052e 	andeq	r0, r1, lr, lsr #10
    27a0:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    27a4:	23200001 			; <UNDEFINED> instruction: 0x23200001
    27a8:	00000fda 	ldrdeq	r0, [r0], -sl
    27ac:	01052f01 	tsteq	r5, r1, lsl #30
    27b0:	03050000 	movweq	r0, #20480	; 0x5000
    27b4:	20000120 	andcs	r0, r0, r0, lsr #2
    27b8:	000e3223 	andeq	r3, lr, r3, lsr #4
    27bc:	05300100 	ldreq	r0, [r0, #-256]!	; 0xffffff00
    27c0:	05000001 	streq	r0, [r0, #-1]
    27c4:	00012403 	andeq	r2, r1, r3, lsl #8
    27c8:	13062320 	movwne	r2, #25376	; 0x6320
    27cc:	31010000 	mrscc	r0, (UNDEF: 1)
    27d0:	00000105 	andeq	r0, r0, r5, lsl #2
    27d4:	01280305 			; <UNDEFINED> instruction: 0x01280305
    27d8:	73232000 			; <UNDEFINED> instruction: 0x73232000
    27dc:	0100000f 	tsteq	r0, pc
    27e0:	0000c933 	andeq	ip, r0, r3, lsr r9
    27e4:	70030500 	andvc	r0, r3, r0, lsl #10
    27e8:	23200036 			; <UNDEFINED> instruction: 0x23200036
    27ec:	00000e10 	andeq	r0, r0, r0, lsl lr
    27f0:	00f53601 	rscseq	r3, r5, r1, lsl #12
    27f4:	03050000 	movweq	r0, #20480	; 0x5000
    27f8:	2000012c 	andcs	r0, r0, ip, lsr #2
    27fc:	00133d23 	andseq	r3, r3, r3, lsr #26
    2800:	be380100 	rsflte	f0, f0, f0
    2804:	05000000 	streq	r0, [r0, #-0]
    2808:	00364403 	eorseq	r4, r6, r3, lsl #8
    280c:	14302320 	ldrtne	r2, [r0], #-800	; 0xfffffce0
    2810:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    2814:	000000be 	strheq	r0, [r0], -lr
    2818:	36640305 	strbtcc	r0, [r4], -r5, lsl #6
    281c:	5b232000 	blpl	8ca824 <_Min_Stack_Size+0x8ca624>
    2820:	0100000e 	tsteq	r0, lr
    2824:	0003f33b 	andeq	pc, r3, fp, lsr r3	; <UNPREDICTABLE>
    2828:	68030500 	stmdavs	r3, {r8, sl}
    282c:	23200036 			; <UNDEFINED> instruction: 0x23200036
    2830:	00000f51 	andeq	r0, r0, r1, asr pc
    2834:	00ea3c01 	rsceq	r3, sl, r1, lsl #24
    2838:	03050000 	movweq	r0, #20480	; 0x5000
    283c:	2000365c 	andcs	r3, r0, ip, asr r6
    2840:	000f1c23 	andeq	r1, pc, r3, lsr #24
    2844:	ea3c0100 	b	f02c4c <_Min_Stack_Size+0xf02a4c>
    2848:	05000000 	streq	r0, [r0, #-0]
    284c:	00366003 	eorseq	r6, r6, r3
    2850:	11cb2320 	bicne	r2, fp, r0, lsr #6
    2854:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    2858:	000000ea 	andeq	r0, r0, sl, ror #1
    285c:	36540305 	ldrbcc	r0, [r4], -r5, lsl #6
    2860:	4d242000 	stcmi	0, cr2, [r4, #-0]
    2864:	01004753 	tsteq	r0, r3, asr r7
    2868:	0008ca40 	andeq	ip, r8, r0, asr #20
    286c:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
    2870:	05200036 	streq	r0, [r0, #-54]!	; 0xffffffca
    2874:	0003c504 	andeq	ip, r3, r4, lsl #10
    2878:	00c90700 	sbceq	r0, r9, r0, lsl #14
    287c:	08e00000 	stmiaeq	r0!, {}^	; <UNPREDICTABLE>
    2880:	a9080000 	stmdbge	r8, {}	; <UNPREDICTABLE>
    2884:	06000000 	streq	r0, [r0], -r0
    2888:	10b72300 	adcsne	r2, r7, r0, lsl #6
    288c:	42010000 	andmi	r0, r1, #0
    2890:	000008d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2894:	00a40305 	adceq	r0, r4, r5, lsl #6
    2898:	43242000 			; <UNDEFINED> instruction: 0x43242000
    289c:	01007069 	tsteq	r0, r9, rrx
    28a0:	00010543 	andeq	r0, r1, r3, asr #10
    28a4:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    28a8:	23200001 			; <UNDEFINED> instruction: 0x23200001
    28ac:	00001205 	andeq	r1, r0, r5, lsl #4
    28b0:	00b06101 	adcseq	r6, r0, r1, lsl #2
    28b4:	03050000 	movweq	r0, #20480	; 0x5000
    28b8:	200000ac 	andcs	r0, r0, ip, lsr #1
    28bc:	00101123 	andseq	r1, r0, r3, lsr #2
    28c0:	b0620100 	rsblt	r0, r2, r0, lsl #2
    28c4:	05000000 	streq	r0, [r0, #-0]
    28c8:	0000b003 	andeq	fp, r0, r3
    28cc:	124e2320 	subne	r2, lr, #32, 6	; 0x80000000
    28d0:	63010000 	movwvs	r0, #4096	; 0x1000
    28d4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    28d8:	00b40305 	adcseq	r0, r4, r5, lsl #6
    28dc:	7f002000 	svcvc	0x00002000
    28e0:	04000003 	streq	r0, [r0], #-3
    28e4:	000a8c00 	andeq	r8, sl, r0, lsl #24
    28e8:	11010400 	tstne	r1, r0, lsl #8
    28ec:	0c000001 	stceq	0, cr0, [r0], {1}
    28f0:	000014f9 	strdeq	r1, [r0], -r9
    28f4:	0000036e 	andeq	r0, r0, lr, ror #6
    28f8:	000002d8 	ldrdeq	r0, [r0], -r8
    28fc:	00000000 	andeq	r0, r0, r0
    2900:	0000157b 	andeq	r1, r0, fp, ror r5
    2904:	69050402 	stmdbvs	r5, {r1, sl}
    2908:	0300746e 	movweq	r7, #1134	; 0x46e
    290c:	01ce0704 	biceq	r0, lr, r4, lsl #14
    2910:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2914:	0000b805 	andeq	fp, r0, r5, lsl #16
    2918:	04080300 	streq	r0, [r8], #-768	; 0xfffffd00
    291c:	000002f8 	strdeq	r0, [r0], -r8
    2920:	92060103 	andls	r0, r6, #-1073741824	; 0xc0000000
    2924:	04000001 	streq	r0, [r0], #-1
    2928:	000000e3 	andeq	r0, r0, r3, ror #1
    292c:	00531d02 	subseq	r1, r3, r2, lsl #26
    2930:	01030000 	mrseq	r0, (UNDEF: 3)
    2934:	00019008 	andeq	r9, r1, r8
    2938:	14b00400 	ldrtne	r0, [r0], #1024	; 0x400
    293c:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
    2940:	00000065 	andeq	r0, r0, r5, rrx
    2944:	95050203 	strls	r0, [r5, #-515]	; 0xfffffdfd
    2948:	04000000 	streq	r0, [r0], #-0
    294c:	00000072 	andeq	r0, r0, r2, ror r0
    2950:	00772b02 	rsbseq	r2, r7, r2, lsl #22
    2954:	02030000 	andeq	r0, r3, #0
    2958:	0001f207 	andeq	pc, r1, r7, lsl #4
    295c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    2960:	000000bd 	strheq	r0, [r0], -sp
    2964:	c9070403 	stmdbgt	r7, {r0, r1, sl}
    2968:	03000001 	movweq	r0, #1
    296c:	01c40708 	biceq	r0, r4, r8, lsl #14
    2970:	04030000 	streq	r0, [r3], #-0
    2974:	00005907 	andeq	r5, r0, r7, lsl #18
    2978:	a0040500 	andge	r0, r4, r0, lsl #10
    297c:	03000000 	movweq	r0, #0
    2980:	01990801 	orrseq	r0, r9, r1, lsl #16
    2984:	e5040000 	str	r0, [r4, #-0]
    2988:	03000000 	movweq	r0, #0
    298c:	00004818 	andeq	r4, r0, r8, lsl r8
    2990:	14b20400 	ldrtne	r0, [r2], #1024	; 0x400
    2994:	20030000 	andcs	r0, r3, r0
    2998:	0000005a 	andeq	r0, r0, sl, asr r0
    299c:	00007404 	andeq	r7, r0, r4, lsl #8
    29a0:	6c240300 	stcvs	3, cr0, [r4], #-0
    29a4:	06000000 	streq	r0, [r0], -r0
    29a8:	000014bb 			; <UNDEFINED> instruction: 0x000014bb
    29ac:	5f2c0412 	svcpl	0x002c0412
    29b0:	07000001 	streq	r0, [r0, -r1]
    29b4:	04006469 	streq	r6, [r0], #-1129	; 0xfffffb97
    29b8:	0000bd2e 	andeq	fp, r0, lr, lsr #26
    29bc:	71070000 	mrsvc	r0, (UNDEF: 7)
    29c0:	2f040072 	svccs	0x00040072
    29c4:	000000a7 	andeq	r0, r0, r7, lsr #1
    29c8:	15560802 	ldrbne	r0, [r6, #-2050]	; 0xfffff7fe
    29cc:	32040000 	andcc	r0, r4, #0
    29d0:	000000a7 	andeq	r0, r0, r7, lsr #1
    29d4:	61610703 	cmnvs	r1, r3, lsl #14
    29d8:	a7340400 	ldrge	r0, [r4, -r0, lsl #8]!
    29dc:	04000000 	streq	r0, [r0], #-0
    29e0:	00637407 	rsbeq	r7, r3, r7, lsl #8
    29e4:	00a73504 	adceq	r3, r7, r4, lsl #10
    29e8:	07050000 	streq	r0, [r5, -r0]
    29ec:	04006472 	streq	r6, [r0], #-1138	; 0xfffffb8e
    29f0:	0000a736 	andeq	sl, r0, r6, lsr r7
    29f4:	72070600 	andvc	r0, r7, #0, 12
    29f8:	37040061 	strcc	r0, [r4, -r1, rrx]
    29fc:	000000a7 	andeq	r0, r0, r7, lsr #1
    2a00:	152a0807 	strne	r0, [sl, #-2055]!	; 0xfffff7f9
    2a04:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    2a08:	000000a7 	andeq	r0, r0, r7, lsr #1
    2a0c:	14a80808 	strtne	r0, [r8], #2056	; 0x808
    2a10:	3f040000 	svccc	0x00040000
    2a14:	000000bd 	strheq	r0, [r0], -sp
    2a18:	153b080a 	ldrne	r0, [fp, #-2058]!	; 0xfffff7f6
    2a1c:	40040000 	andmi	r0, r4, r0
    2a20:	000000bd 	strheq	r0, [r0], -sp
    2a24:	14de080c 	ldrbne	r0, [lr], #2060	; 0x80c
    2a28:	41040000 	mrsmi	r0, (UNDEF: 4)
    2a2c:	000000bd 	strheq	r0, [r0], -sp
    2a30:	14f1080e 	ldrbtne	r0, [r1], #2062	; 0x80e
    2a34:	42040000 	andmi	r0, r4, #0
    2a38:	000000bd 	strheq	r0, [r0], -sp
    2a3c:	5d090010 	stcpl	0, cr0, [r9, #-64]	; 0xffffffc0
    2a40:	01000015 	tsteq	r0, r5, lsl r0
    2a44:	0000bd11 	andeq	fp, r0, r1, lsl sp
    2a48:	004f2400 	subeq	r2, pc, r0, lsl #8
    2a4c:	00002e08 	andeq	r2, r0, r8, lsl #28
    2a50:	919c0100 	orrsls	r0, ip, r0, lsl #2
    2a54:	0a000001 	beq	2a60 <_Min_Stack_Size+0x2860>
    2a58:	11010073 	tstne	r1, r3, ror r0
    2a5c:	00000191 	muleq	r0, r1, r1
    2a60:	0b6c9102 	bleq	1b26e70 <_Min_Stack_Size+0x1b26c70>
    2a64:	13010069 	movwne	r0, #4201	; 0x1069
    2a68:	000000bd 	strheq	r0, [r0], -sp
    2a6c:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2a70:	00a70405 	adceq	r0, r7, r5, lsl #8
    2a74:	e6090000 	str	r0, [r9], -r0
    2a78:	01000014 	tsteq	r0, r4, lsl r0
    2a7c:	00002528 	andeq	r2, r0, r8, lsr #10
    2a80:	004f5400 	subeq	r5, pc, r0, lsl #8
    2a84:	00010c08 	andeq	r0, r1, r8, lsl #24
    2a88:	2e9c0100 	fmlcse	f0, f4, f0
    2a8c:	0a000002 	beq	2a9c <_Min_Stack_Size+0x289c>
    2a90:	0067736d 	rsbeq	r7, r7, sp, ror #6
    2a94:	01912801 	orrseq	r2, r1, r1, lsl #16
    2a98:	91020000 	mrsls	r0, (UNDEF: 2)
    2a9c:	149d0c5c 	ldrne	r0, [sp], #3164	; 0xc5c
    2aa0:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    2aa4:	00000191 	muleq	r0, r1, r1
    2aa8:	0a589102 	beq	1626eb8 <_Min_Stack_Size+0x1626cb8>
    2aac:	00667562 	rsbeq	r7, r6, r2, ror #10
    2ab0:	009a2801 	addseq	r2, sl, r1, lsl #16
    2ab4:	91020000 	mrsls	r0, (UNDEF: 2)
    2ab8:	656c0a54 	strbvs	r0, [ip, #-2644]!	; 0xfffff5ac
    2abc:	2801006e 	stmdacs	r1, {r1, r2, r3, r5, r6}
    2ac0:	000000b2 	strheq	r0, [r0], -r2
    2ac4:	0d529102 	ldfeqp	f1, [r2, #-8]
    2ac8:	000014cd 	andeq	r1, r0, sp, asr #9
    2acc:	00bd2a01 	adcseq	r2, sp, r1, lsl #20
    2ad0:	91020000 	mrsls	r0, (UNDEF: 2)
    2ad4:	70630b76 	rsbvc	r0, r3, r6, ror fp
    2ad8:	912b0100 			; <UNDEFINED> instruction: 0x912b0100
    2adc:	02000001 	andeq	r0, r0, #1
    2ae0:	670d7091 			; <UNDEFINED> instruction: 0x670d7091
    2ae4:	0100003c 	tsteq	r0, ip, lsr r0
    2ae8:	0000252c 	andeq	r2, r0, ip, lsr #10
    2aec:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2af0:	0015630d 	andseq	r6, r5, sp, lsl #6
    2af4:	252d0100 	strcs	r0, [sp, #-256]!	; 0xffffff00
    2af8:	02000000 	andeq	r0, r0, #0
    2afc:	480d6891 	stmdami	sp, {r0, r4, r7, fp, sp, lr}
    2b00:	01000015 	tsteq	r0, r5, lsl r0
    2b04:	0000252e 	andeq	r2, r0, lr, lsr #10
    2b08:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2b0c:	14c00e00 	strbne	r0, [r0], #3584	; 0xe00
    2b10:	6a010000 	bvs	42b18 <_Min_Stack_Size+0x42918>
    2b14:	00000191 	muleq	r0, r1, r1
    2b18:	08005060 	stmdaeq	r0, {r5, r6, ip, lr}
    2b1c:	00000064 	andeq	r0, r0, r4, rrx
    2b20:	02829c01 	addeq	r9, r2, #256	; 0x100
    2b24:	6d0a0000 	stcvs	0, cr0, [sl, #-0]
    2b28:	01006773 	tsteq	r0, r3, ror r7
    2b2c:	0001916a 	andeq	r9, r1, sl, ror #2
    2b30:	ec910300 	ldc	3, cr0, [r1], {0}
    2b34:	70630a7d 	rsbvc	r0, r3, sp, ror sl
    2b38:	916a0100 	cmnls	sl, r0, lsl #2
    2b3c:	03000001 	movweq	r0, #1
    2b40:	0b7de891 	bleq	1f7cd8c <_Min_Stack_Size+0x1f7cb8c>
    2b44:	006e656c 	rsbeq	r6, lr, ip, ror #10
    2b48:	00256c01 	eoreq	r6, r5, r1, lsl #24
    2b4c:	91020000 	mrsls	r0, (UNDEF: 2)
    2b50:	14ec0d74 	strbtne	r0, [ip], #3444	; 0xd74
    2b54:	6d010000 	stcvs	0, cr0, [r1, #-0]
    2b58:	00000282 	andeq	r0, r0, r2, lsl #5
    2b5c:	7df49103 	ldfvcp	f1, [r4, #12]!
    2b60:	00a00f00 	adceq	r0, r0, r0, lsl #30
    2b64:	02920000 	addseq	r0, r2, #0
    2b68:	93100000 	tstls	r0, #0
    2b6c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    2b70:	15300e00 	ldrne	r0, [r0, #-3584]!	; 0xfffff200
    2b74:	87010000 	strhi	r0, [r1, -r0]
    2b78:	00000191 	muleq	r0, r1, r1
    2b7c:	080050c4 	stmdaeq	r0, {r2, r6, r7, ip, lr}
    2b80:	000002f6 	strdeq	r0, [r0], -r6
    2b84:	03039c01 	movweq	r9, #15361	; 0x3c01
    2b88:	6d0a0000 	stcvs	0, cr0, [sl, #-0]
    2b8c:	01006773 	tsteq	r0, r3, ror r7
    2b90:	00019187 	andeq	r9, r1, r7, lsl #3
    2b94:	ec910300 	ldc	3, cr0, [r1], {0}
    2b98:	70630a7d 	rsbvc	r0, r3, sp, ror sl
    2b9c:	91870100 	orrls	r0, r7, r0, lsl #2
    2ba0:	03000001 	movweq	r0, #1
    2ba4:	0c7de891 	ldcleq	8, cr14, [sp], #-580	; 0xfffffdbc
    2ba8:	000014d2 	ldrdeq	r1, [r0], -r2
    2bac:	01918701 	orrseq	r8, r1, r1, lsl #14
    2bb0:	91030000 	mrsls	r0, (UNDEF: 3)
    2bb4:	6c0b7de4 	stcvs	13, cr7, [fp], {228}	; 0xe4
    2bb8:	01006e65 	tsteq	r0, r5, ror #28
    2bbc:	00002589 	andeq	r2, r0, r9, lsl #11
    2bc0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2bc4:	00095d0d 	andeq	r5, r9, sp, lsl #26
    2bc8:	25890100 	strcs	r0, [r9, #256]	; 0x100
    2bcc:	02000000 	andeq	r0, r0, #0
    2bd0:	ec0d7091 	stc	0, cr7, [sp], {145}	; 0x91
    2bd4:	01000014 	tsteq	r0, r4, lsl r0
    2bd8:	0002828a 	andeq	r8, r2, sl, lsl #5
    2bdc:	f0910300 			; <UNDEFINED> instruction: 0xf0910300
    2be0:	4d0e007d 	stcmi	0, cr0, [lr, #-500]	; 0xfffffe0c
    2be4:	01000015 	tsteq	r0, r5, lsl r0
    2be8:	0000a7e7 	andeq	sl, r0, r7, ror #15
    2bec:	0053bc00 	subseq	fp, r3, r0, lsl #24
    2bf0:	00017608 	andeq	r7, r1, r8, lsl #12
    2bf4:	7c9c0100 	ldfvcs	f0, [ip], {0}
    2bf8:	0c000003 	stceq	0, cr0, [r0], {3}
    2bfc:	000014ba 			; <UNDEFINED> instruction: 0x000014ba
    2c00:	037ce701 	cmneq	ip, #262144	; 0x40000
    2c04:	91020000 	mrsls	r0, (UNDEF: 2)
    2c08:	15430c64 	strbne	r0, [r3, #-3172]	; 0xfffff39c
    2c0c:	e7010000 	str	r0, [r1, -r0]
    2c10:	00000191 	muleq	r0, r1, r1
    2c14:	0c609102 	stfeqp	f1, [r0], #-8
    2c18:	000014d2 	ldrdeq	r1, [r0], -r2
    2c1c:	0191e701 	orrseq	lr, r1, r1, lsl #14
    2c20:	91020000 	mrsls	r0, (UNDEF: 2)
    2c24:	6d740b5c 	vldmdbvs	r4!, {d16-<overflow reg d61>}
    2c28:	e9010070 	stmdb	r1, {r4, r5, r6}
    2c2c:	000000bd 	strheq	r0, [r0], -sp
    2c30:	0b6a9102 	bleq	1aa7040 <_Min_Stack_Size+0x1aa6e40>
    2c34:	ea010069 	b	42de0 <_Min_Stack_Size+0x42be0>
    2c38:	000000bd 	strheq	r0, [r0], -sp
    2c3c:	0b769102 	bleq	1da704c <_Min_Stack_Size+0x1da6e4c>
    2c40:	0067736d 	rsbeq	r7, r7, sp, ror #6
    2c44:	0191eb01 	orrseq	lr, r1, r1, lsl #22
    2c48:	91020000 	mrsls	r0, (UNDEF: 2)
    2c4c:	70630b6c 	rsbvc	r0, r3, ip, ror #22
    2c50:	91ec0100 	mvnls	r0, r0, lsl #2
    2c54:	02000001 	andeq	r0, r0, #1
    2c58:	05007091 	streq	r7, [r0, #-145]	; 0xffffff6f
    2c5c:	0000c804 	andeq	ip, r0, r4, lsl #16
    2c60:	043f0000 	ldrteq	r0, [pc], #-0	; 2c68 <_Min_Stack_Size+0x2a68>
    2c64:	00040000 	andeq	r0, r4, r0
    2c68:	00000b7f 	andeq	r0, r0, pc, ror fp
    2c6c:	01110104 	tsteq	r1, r4, lsl #2
    2c70:	9c0c0000 	stcls	0, cr0, [ip], {-0}
    2c74:	6e000015 	mcrvs	0, 0, r0, cr0, cr5, {0}
    2c78:	08000003 	stmdaeq	r0, {r0, r1}
    2c7c:	00000003 	andeq	r0, r0, r3
    2c80:	a4000000 	strge	r0, [r0], #-0
    2c84:	02000017 	andeq	r0, r0, #23
    2c88:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
    2c8c:	00301b02 	eorseq	r1, r0, r2, lsl #22
    2c90:	01030000 	mrseq	r0, (UNDEF: 3)
    2c94:	00019206 	andeq	r9, r1, r6, lsl #4
    2c98:	00e30200 	rsceq	r0, r3, r0, lsl #4
    2c9c:	1d020000 	stcne	0, cr0, [r2, #-0]
    2ca0:	00000042 	andeq	r0, r0, r2, asr #32
    2ca4:	90080103 	andls	r0, r8, r3, lsl #2
    2ca8:	02000001 	andeq	r0, r0, #1
    2cac:	000014b0 			; <UNDEFINED> instruction: 0x000014b0
    2cb0:	00542902 	subseq	r2, r4, r2, lsl #18
    2cb4:	02030000 	andeq	r0, r3, #0
    2cb8:	00009505 	andeq	r9, r0, r5, lsl #10
    2cbc:	00720200 	rsbseq	r0, r2, r0, lsl #4
    2cc0:	2b020000 	blcs	82cc8 <_Min_Stack_Size+0x82ac8>
    2cc4:	00000066 	andeq	r0, r0, r6, rrx
    2cc8:	f2070203 	vhsub.s8	d0, d7, d3
    2ccc:	03000001 	movweq	r0, #1
    2cd0:	00bd0504 	adcseq	r0, sp, r4, lsl #10
    2cd4:	67020000 	strvs	r0, [r2, -r0]
    2cd8:	02000000 	andeq	r0, r0, #0
    2cdc:	00007f41 	andeq	r7, r0, r1, asr #30
    2ce0:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2ce4:	000001c9 	andeq	r0, r0, r9, asr #3
    2ce8:	b8050803 	stmdalt	r5, {r0, r1, fp}
    2cec:	03000000 	movweq	r0, #0
    2cf0:	01c40708 	biceq	r0, r4, r8, lsl #14
    2cf4:	04040000 	streq	r0, [r4], #-0
    2cf8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    2cfc:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2d00:	000001ce 	andeq	r0, r0, lr, asr #3
    2d04:	f8040803 			; <UNDEFINED> instruction: 0xf8040803
    2d08:	03000002 	movweq	r0, #2
    2d0c:	00590704 	subseq	r0, r9, r4, lsl #14
    2d10:	04050000 	streq	r0, [r5], #-0
    2d14:	000000b6 	strheq	r0, [r0], -r6
    2d18:	99080103 	stmdbls	r8, {r0, r1, r8}
    2d1c:	02000001 	andeq	r0, r0, #1
    2d20:	000004b5 			; <UNDEFINED> instruction: 0x000004b5
    2d24:	00251403 	eoreq	r1, r5, r3, lsl #8
    2d28:	e5020000 	str	r0, [r2, #-0]
    2d2c:	03000000 	movweq	r0, #0
    2d30:	00003718 	andeq	r3, r0, r8, lsl r7
    2d34:	14b20200 	ldrtne	r0, [r2], #512	; 0x200
    2d38:	20030000 	andcs	r0, r3, r0
    2d3c:	00000049 	andeq	r0, r0, r9, asr #32
    2d40:	00007402 	andeq	r7, r0, r2, lsl #8
    2d44:	5b240300 	blpl	90394c <_Min_Stack_Size+0x90374c>
    2d48:	02000000 	andeq	r0, r0, #0
    2d4c:	00000069 	andeq	r0, r0, r9, rrx
    2d50:	00743003 	rsbseq	r3, r4, r3
    2d54:	bb060000 	bllt	182d5c <_Min_Stack_Size+0x182b5c>
    2d58:	12000014 	andne	r0, r0, #20
    2d5c:	018b2c04 	orreq	r2, fp, r4, lsl #24
    2d60:	69070000 	stmdbvs	r7, {}	; <UNPREDICTABLE>
    2d64:	2e040064 	cdpcs	0, 0, cr0, cr4, cr4, {3}
    2d68:	000000de 	ldrdeq	r0, [r0], -lr
    2d6c:	72710700 	rsbsvc	r0, r1, #0, 14
    2d70:	c82f0400 	stmdagt	pc!, {sl}	; <UNPREDICTABLE>
    2d74:	02000000 	andeq	r0, r0, #0
    2d78:	00155608 	andseq	r5, r5, r8, lsl #12
    2d7c:	c8320400 	ldmdagt	r2!, {sl}
    2d80:	03000000 	movweq	r0, #0
    2d84:	00616107 	rsbeq	r6, r1, r7, lsl #2
    2d88:	00c83404 	sbceq	r3, r8, r4, lsl #8
    2d8c:	07040000 	streq	r0, [r4, -r0]
    2d90:	04006374 	streq	r6, [r0], #-884	; 0xfffffc8c
    2d94:	0000c835 	andeq	ip, r0, r5, lsr r8
    2d98:	72070500 	andvc	r0, r7, #0, 10
    2d9c:	36040064 	strcc	r0, [r4], -r4, rrx
    2da0:	000000c8 	andeq	r0, r0, r8, asr #1
    2da4:	61720706 	cmnvs	r2, r6, lsl #14
    2da8:	c8370400 	ldmdagt	r7!, {sl}
    2dac:	07000000 	streq	r0, [r0, -r0]
    2db0:	00152a08 	andseq	r2, r5, r8, lsl #20
    2db4:	c8380400 	ldmdagt	r8!, {sl}
    2db8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2dbc:	0014a808 	andseq	sl, r4, r8, lsl #16
    2dc0:	de3f0400 	cfabssle	mvf0, mvf15
    2dc4:	0a000000 	beq	2dcc <_Min_Stack_Size+0x2bcc>
    2dc8:	00153b08 	andseq	r3, r5, r8, lsl #22
    2dcc:	de400400 	cdple	4, 4, cr0, cr0, cr0, {0}
    2dd0:	0c000000 	stceq	0, cr0, [r0], {-0}
    2dd4:	0014de08 	andseq	sp, r4, r8, lsl #28
    2dd8:	de410400 	cdple	4, 4, cr0, cr1, cr0, {0}
    2ddc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2de0:	0014f108 	andseq	pc, r4, r8, lsl #2
    2de4:	de420400 	cdple	4, 4, cr0, cr2, cr0, {0}
    2de8:	10000000 	andne	r0, r0, r0
    2dec:	00c80900 	sbceq	r0, r8, r0, lsl #18
    2df0:	019b0000 	orrseq	r0, fp, r0
    2df4:	a90a0000 	stmdbge	sl, {}	; <UNPREDICTABLE>
    2df8:	03000000 	movweq	r0, #0
    2dfc:	15d90b00 	ldrbne	r0, [r9, #2816]	; 0xb00
    2e00:	33010000 	movwcc	r0, #4096	; 0x1000
    2e04:	000001cd 	andeq	r0, r0, sp, asr #3
    2e08:	08005534 	stmdaeq	r0, {r2, r4, r5, r8, sl, ip, lr}
    2e0c:	00000034 	andeq	r0, r0, r4, lsr r0
    2e10:	01cd9c01 	biceq	r9, sp, r1, lsl #24
    2e14:	730c0000 	movwvc	r0, #49152	; 0xc000
    2e18:	cd330100 	ldfgts	f0, [r3, #-0]
    2e1c:	02000001 	andeq	r0, r0, #1
    2e20:	690c7491 	stmdbvs	ip, {r0, r4, r7, sl, ip, sp, lr}
    2e24:	de330100 	rsfles	f0, f3, f0
    2e28:	02000000 	andeq	r0, r0, #0
    2e2c:	05007291 	streq	r7, [r0, #-657]	; 0xfffffd6f
    2e30:	0000c804 	andeq	ip, r0, r4, lsl #16
    2e34:	16280d00 	strtne	r0, [r8], -r0, lsl #26
    2e38:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    2e3c:	000000d3 	ldrdeq	r0, [r0], -r3
    2e40:	08005568 	stmdaeq	r0, {r3, r5, r6, r8, sl, ip, lr}
    2e44:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    2e48:	027a9c01 	rsbseq	r9, sl, #256	; 0x100
    2e4c:	6f0c0000 	svcvs	0x000c0000
    2e50:	49010070 	stmdbmi	r1, {r4, r5, r6}
    2e54:	000000de 	ldrdeq	r0, [r0], -lr
    2e58:	7dde9103 	ldfvcp	f1, [lr, #12]
    2e5c:	0014ec0e 	andseq	lr, r4, lr, lsl #24
    2e60:	b0490100 	sublt	r0, r9, r0, lsl #2
    2e64:	03000000 	movweq	r0, #0
    2e68:	0c7dd891 	ldcleq	8, cr13, [sp], #-580	; 0xfffffdbc
    2e6c:	00667562 	rsbeq	r7, r6, r2, ror #10
    2e70:	01cd4901 	biceq	r4, sp, r1, lsl #18
    2e74:	91030000 	mrsls	r0, (UNDEF: 3)
    2e78:	6c0c7dd4 	stcvs	13, cr7, [ip], {212}	; 0xd4
    2e7c:	01006e65 	tsteq	r0, r5, ror #28
    2e80:	0000de49 	andeq	sp, r0, r9, asr #28
    2e84:	dc910300 	ldcle	3, cr0, [r1], {0}
    2e88:	70630f7d 	rsbvc	r0, r3, sp, ror pc
    2e8c:	cd4b0100 	stfgte	f0, [fp, #-0]
    2e90:	02000001 	andeq	r0, r0, #1
    2e94:	630f6c91 	movwvs	r6, #64657	; 0xfc91
    2e98:	01003170 	tsteq	r0, r0, ror r1
    2e9c:	0000b04c 	andeq	fp, r0, ip, asr #32
    2ea0:	60910200 	addsvs	r0, r1, r0, lsl #4
    2ea4:	00145a10 	andseq	r5, r4, r0, lsl sl
    2ea8:	7a4d0100 	bvc	13432b0 <_Min_Stack_Size+0x13430b0>
    2eac:	03000002 	movweq	r0, #2
    2eb0:	107de091 			; <UNDEFINED> instruction: 0x107de091
    2eb4:	00001622 	andeq	r1, r0, r2, lsr #12
    2eb8:	00b04e01 	adcseq	r4, r0, r1, lsl #28
    2ebc:	91020000 	mrsls	r0, (UNDEF: 2)
    2ec0:	00700f68 	rsbseq	r0, r0, r8, ror #30
    2ec4:	00de4f01 	sbcseq	r4, lr, r1, lsl #30
    2ec8:	91020000 	mrsls	r0, (UNDEF: 2)
    2ecc:	3b4e1064 	blcc	1387064 <_Min_Stack_Size+0x1386e64>
    2ed0:	50010000 	andpl	r0, r1, r0
    2ed4:	000000de 	ldrdeq	r0, [r0], -lr
    2ed8:	00669102 	rsbeq	r9, r6, r2, lsl #2
    2edc:	0000b609 	andeq	fp, r0, r9, lsl #12
    2ee0:	00028a00 	andeq	r8, r2, r0, lsl #20
    2ee4:	00a90a00 	adceq	r0, r9, r0, lsl #20
    2ee8:	00ff0000 	rscseq	r0, pc, r0
    2eec:	0016360d 	andseq	r3, r6, sp, lsl #12
    2ef0:	c8870100 	stmgt	r7, {r8}
    2ef4:	24000000 	strcs	r0, [r0], #-0
    2ef8:	04080057 	streq	r0, [r8], #-87	; 0xffffffa9
    2efc:	01000001 	tsteq	r0, r1
    2f00:	0003219c 	muleq	r3, ip, r1
    2f04:	37fe0e00 	ldrbcc	r0, [lr, r0, lsl #28]!
    2f08:	87010000 	strhi	r0, [r1, -r0]
    2f0c:	000001cd 	andeq	r0, r0, sp, asr #3
    2f10:	0e4c9102 	sqteqe	f1, f2
    2f14:	000014ec 	andeq	r1, r0, ip, ror #9
    2f18:	01cd8701 	biceq	r8, sp, r1, lsl #14
    2f1c:	91020000 	mrsls	r0, (UNDEF: 2)
    2f20:	14d20e48 	ldrbne	r0, [r2], #3656	; 0xe48
    2f24:	87010000 	strhi	r0, [r1, -r0]
    2f28:	000001cd 	andeq	r0, r0, sp, asr #3
    2f2c:	0f449102 	svceq	0x00449102
    2f30:	00706864 	rsbseq	r6, r0, r4, ror #16
    2f34:	00f48901 	rscseq	r8, r4, r1, lsl #18
    2f38:	91020000 	mrsls	r0, (UNDEF: 2)
    2f3c:	70690f58 	rsbvc	r0, r9, r8, asr pc
    2f40:	8b8a0100 	blhi	fe283348 <BootRAM+0xd1f3ae9>
    2f44:	02000001 	andeq	r0, r0, #1
    2f48:	6c0f5491 	cfstrsvs	mvf5, [pc], {145}	; 0x91
    2f4c:	01006e65 	tsteq	r0, r5, ror #28
    2f50:	0000de8b 	andeq	sp, r0, fp, lsl #29
    2f54:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    2f58:	000f3e10 	andeq	r3, pc, r0, lsl lr	; <UNPREDICTABLE>
    2f5c:	de8b0100 	rmflee	f0, f3, f0
    2f60:	02000000 	andeq	r0, r0, #0
    2f64:	c7105291 			; <UNDEFINED> instruction: 0xc7105291
    2f68:	01000015 	tsteq	r0, r5, lsl r0
    2f6c:	0000bd8c 	andeq	fp, r0, ip, lsl #27
    2f70:	6d910200 	lfmvs	f0, 4, [r1]
    2f74:	00160710 	andseq	r0, r6, r0, lsl r7
    2f78:	de8d0100 	rmflee	f0, f5, f0
    2f7c:	02000000 	andeq	r0, r0, #0
    2f80:	11006a91 			; <UNDEFINED> instruction: 0x11006a91
    2f84:	000015ee 	andeq	r1, r0, lr, ror #11
    2f88:	5828c401 	stmdapl	r8!, {r0, sl, lr, pc}
    2f8c:	00700800 	rsbseq	r0, r0, r0, lsl #16
    2f90:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f94:	0000035f 	andeq	r0, r0, pc, asr r3
    2f98:	0100730c 	tsteq	r0, ip, lsl #6
    2f9c:	0000c8c4 	andeq	ip, r0, r4, asr #17
    2fa0:	6f910200 	svcvs	0x00910200
    2fa4:	6675620c 	ldrbtvs	r6, [r5], -ip, lsl #4
    2fa8:	cdc40100 	stfgte	f0, [r4]
    2fac:	02000001 	andeq	r0, r0, #1
    2fb0:	07106891 			; <UNDEFINED> instruction: 0x07106891
    2fb4:	01000016 	tsteq	r0, r6, lsl r0
    2fb8:	0000dec6 	andeq	sp, r0, r6, asr #29
    2fbc:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    2fc0:	158c0d00 	strne	r0, [ip, #3328]	; 0xd00
    2fc4:	e1010000 	mrs	r0, (UNDEF: 1)
    2fc8:	000000c8 	andeq	r0, r0, r8, asr #1
    2fcc:	08005898 	stmdaeq	r0, {r3, r4, r7, fp, ip, lr}
    2fd0:	0000005c 	andeq	r0, r0, ip, asr r0
    2fd4:	03bf9c01 			; <UNDEFINED> instruction: 0x03bf9c01
    2fd8:	6c0e0000 	stcvs	0, cr0, [lr], {-0}
    2fdc:	01000015 	tsteq	r0, r5, lsl r0
    2fe0:	0001cde1 	andeq	ip, r1, r1, ror #27
    2fe4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2fe8:	0015df0e 	andseq	sp, r5, lr, lsl #30
    2fec:	cde10100 	stfgte	f0, [r1]
    2ff0:	02000001 	andeq	r0, r0, #1
    2ff4:	ec0e6891 	stc	8, cr6, [lr], {145}	; 0x91
    2ff8:	01000014 	tsteq	r0, r4, lsl r0
    2ffc:	0001cde1 	andeq	ip, r1, r1, ror #27
    3000:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3004:	0014d20e 	andseq	sp, r4, lr, lsl #4
    3008:	cde10100 	stfgte	f0, [r1]
    300c:	02000001 	andeq	r0, r0, #1
    3010:	720f6091 	andvc	r6, pc, #145	; 0x91
    3014:	01007465 	tsteq	r0, r5, ror #8
    3018:	0000c8e3 	andeq	ip, r0, r3, ror #17
    301c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3020:	16101200 	ldrne	r1, [r0], -r0, lsl #4
    3024:	07010000 	streq	r0, [r1, -r0]
    3028:	0000bd01 	andeq	fp, r0, r1, lsl #26
    302c:	0058f400 	subseq	pc, r8, r0, lsl #8
    3030:	00004808 	andeq	r4, r0, r8, lsl #16
    3034:	ec9c0100 	ldfs	f0, [ip], {0}
    3038:	13000003 	movwne	r0, #3
    303c:	00001430 	andeq	r1, r0, r0, lsr r4
    3040:	c8010901 	stmdagt	r1, {r0, r8, fp}
    3044:	05000000 	streq	r0, [r0, #-0]
    3048:	00013803 	andeq	r3, r1, r3, lsl #16
    304c:	7b140020 	blvc	5030d4 <_Min_Stack_Size+0x502ed4>
    3050:	01000015 	tsteq	r0, r5, lsl r0
    3054:	593c0123 	ldmdbpl	ip!, {r0, r1, r5, r8}
    3058:	001c0800 	andseq	r0, ip, r0, lsl #16
    305c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3060:	00159415 	andseq	r9, r5, r5, lsl r4
    3064:	cd160100 	ldfgts	f0, [r6, #-0]
    3068:	05000001 	streq	r0, [r0, #-1]
    306c:	00367403 	eorseq	r7, r6, r3, lsl #8
    3070:	16401520 	strbne	r1, [r0], -r0, lsr #10
    3074:	17010000 	strne	r0, [r1, -r0]
    3078:	000000c8 	andeq	r0, r0, r8, asr #1
    307c:	36780305 	ldrbtcc	r0, [r8], -r5, lsl #6
    3080:	f7152000 			; <UNDEFINED> instruction: 0xf7152000
    3084:	01000015 	tsteq	r0, r5, lsl r0
    3088:	0000de18 	andeq	sp, r0, r8, lsl lr
    308c:	80030500 	andhi	r0, r3, r0, lsl #10
    3090:	15200036 	strne	r0, [r0, #-54]!	; 0xffffffca
    3094:	000015fe 	strdeq	r1, [r0], -lr
    3098:	00e91a01 	rsceq	r1, r9, r1, lsl #20
    309c:	03050000 	movweq	r0, #20480	; 0x5000
    30a0:	2000367c 	andcs	r3, r0, ip, ror r6
    30a4:	0004ee00 	andeq	lr, r4, r0, lsl #28
    30a8:	e0000400 	and	r0, r0, r0, lsl #8
    30ac:	0400000c 	streq	r0, [r0], #-12
    30b0:	00011101 	andeq	r1, r1, r1, lsl #2
    30b4:	16d30c00 	ldrbne	r0, [r3], r0, lsl #24
    30b8:	03480000 	movteq	r0, #32768	; 0x8000
    30bc:	00000000 	andeq	r0, r0, r0
    30c0:	192c0000 	stmdbne	ip!, {}	; <UNPREDICTABLE>
    30c4:	01020000 	mrseq	r0, (UNDEF: 2)
    30c8:	00019206 	andeq	r9, r1, r6, lsl #4
    30cc:	00e30300 	rsceq	r0, r3, r0, lsl #6
    30d0:	1d020000 	stcne	0, cr0, [r2, #-0]
    30d4:	00000033 	andeq	r0, r0, r3, lsr r0
    30d8:	90080102 	andls	r0, r8, r2, lsl #2
    30dc:	02000001 	andeq	r0, r0, #1
    30e0:	00950502 	addseq	r0, r5, r2, lsl #10
    30e4:	02020000 	andeq	r0, r2, #0
    30e8:	0001f207 	andeq	pc, r1, r7, lsl #4
    30ec:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    30f0:	000000bd 	strheq	r0, [r0], -sp
    30f4:	00006703 	andeq	r6, r0, r3, lsl #14
    30f8:	5a410200 	bpl	1043900 <_Min_Stack_Size+0x1043700>
    30fc:	02000000 	andeq	r0, r0, #0
    3100:	01c90704 	biceq	r0, r9, r4, lsl #14
    3104:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    3108:	0000b805 	andeq	fp, r0, r5, lsl #16
    310c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    3110:	000001c4 	andeq	r0, r0, r4, asr #3
    3114:	69050404 	stmdbvs	r5, {r2, sl}
    3118:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    311c:	01ce0704 	biceq	r0, lr, r4, lsl #14
    3120:	e5030000 	str	r0, [r3, #-0]
    3124:	03000000 	movweq	r0, #0
    3128:	00002818 	andeq	r2, r0, r8, lsl r8
    312c:	00690300 	rsbeq	r0, r9, r0, lsl #6
    3130:	30030000 	andcc	r0, r3, r0
    3134:	0000004f 	andeq	r0, r0, pc, asr #32
    3138:	040e0405 	streq	r0, [lr], #-1029	; 0xfffffbfb
    313c:	00014184 	andeq	r4, r1, r4, lsl #3
    3140:	17ad0600 	strne	r0, [sp, r0, lsl #12]!
    3144:	86040000 	strhi	r0, [r4], -r0
    3148:	0000015d 	andeq	r0, r0, sp, asr r1
    314c:	03c20600 	biceq	r0, r2, #0, 12
    3150:	87040000 	strhi	r0, [r4, -r0]
    3154:	00000162 	andeq	r0, r0, r2, ror #2
    3158:	17a80620 	strne	r0, [r8, r0, lsr #12]!
    315c:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
    3160:	00000172 	andeq	r0, r0, r2, ror r1
    3164:	17210680 	strne	r0, [r1, -r0, lsl #13]!
    3168:	89040000 	stmdbhi	r4, {}	; <UNPREDICTABLE>
    316c:	00000162 	andeq	r0, r0, r2, ror #2
    3170:	177807a0 	ldrbne	r0, [r8, -r0, lsr #15]!
    3174:	8a040000 	bhi	10317c <_Min_Stack_Size+0x102f7c>
    3178:	00000177 	andeq	r0, r0, r7, ror r1
    317c:	d6070100 	strle	r0, [r7], -r0, lsl #2
    3180:	04000003 	streq	r0, [r0], #-3
    3184:	0001628b 	andeq	r6, r1, fp, lsl #5
    3188:	07012000 	streq	r2, [r1, -r0]
    318c:	0000173f 	andeq	r1, r0, pc, lsr r7
    3190:	017c8c04 	cmneq	ip, r4, lsl #24
    3194:	01800000 	orreq	r0, r0, r0
    3198:	0002ab07 	andeq	sl, r2, r7, lsl #22
    319c:	628d0400 	addvs	r0, sp, #0, 8
    31a0:	a0000001 	andge	r0, r0, r1
    31a4:	164b0701 	strbne	r0, [fp], -r1, lsl #14
    31a8:	8e040000 	cdphi	0, 0, cr0, cr4, cr0, {0}
    31ac:	00000181 	andeq	r0, r0, r1, lsl #3
    31b0:	ea070200 	b	1c39b8 <_Min_Stack_Size+0x1c37b8>
    31b4:	04000003 	streq	r0, [r0], #-3
    31b8:	0001868f 	andeq	r8, r1, pc, lsl #13
    31bc:	08022000 	stmdaeq	r2, {sp}
    31c0:	04005049 	streq	r5, [r0], #-73	; 0xffffffb7
    31c4:	0001ab90 	muleq	r1, r0, fp
    31c8:	07030000 	streq	r0, [r3, -r0]
    31cc:	000003f4 	strdeq	r0, [r0], -r4
    31d0:	01b09104 	lslseq	r9, r4, #2
    31d4:	03f00000 	mvnseq	r0, #0
    31d8:	00171c07 	andseq	r1, r7, r7, lsl #24
    31dc:	58920400 	ldmpl	r2, {sl}
    31e0:	00000001 	andeq	r0, r0, r1
    31e4:	5809000e 	stmdapl	r9, {r1, r2, r3}
    31e8:	51000001 	tstpl	r0, r1
    31ec:	0a000001 	beq	31f8 <_Min_Stack_Size+0x2ff8>
    31f0:	00000151 	andeq	r0, r0, r1, asr r1
    31f4:	04020007 	streq	r0, [r2], #-7
    31f8:	00005907 	andeq	r5, r0, r7, lsl #18
    31fc:	00880b00 	addeq	r0, r8, r0, lsl #22
    3200:	410b0000 	mrsmi	r0, (UNDEF: 11)
    3204:	09000001 	stmdbeq	r0, {r0}
    3208:	00000088 	andeq	r0, r0, r8, lsl #1
    320c:	00000172 	andeq	r0, r0, r2, ror r1
    3210:	0001510a 	andeq	r5, r1, sl, lsl #2
    3214:	0b001700 	bleq	8e1c <_Min_Stack_Size+0x8c1c>
    3218:	00000141 	andeq	r0, r0, r1, asr #2
    321c:	0001410b 	andeq	r4, r1, fp, lsl #2
    3220:	01410b00 	cmpeq	r1, r0, lsl #22
    3224:	410b0000 	mrsmi	r0, (UNDEF: 11)
    3228:	09000001 	stmdbeq	r0, {r0}
    322c:	00000088 	andeq	r0, r0, r8, lsl #1
    3230:	00000196 	muleq	r0, r6, r1
    3234:	0001510a 	andeq	r5, r1, sl, lsl #2
    3238:	09003700 	stmdbeq	r0, {r8, r9, sl, ip, sp}
    323c:	000001a6 	andeq	r0, r0, r6, lsr #3
    3240:	000001a6 	andeq	r0, r0, r6, lsr #3
    3244:	0001510a 	andeq	r5, r1, sl, lsl #2
    3248:	0b00ef00 	bleq	3ee50 <_Min_Stack_Size+0x3ec50>
    324c:	0000007d 	andeq	r0, r0, sp, ror r0
    3250:	0001960b 	andeq	r9, r1, fp, lsl #12
    3254:	00880900 	addeq	r0, r8, r0, lsl #18
    3258:	01c10000 	biceq	r0, r1, r0
    325c:	510c0000 	mrspl	r0, (UNDEF: 12)
    3260:	83000001 	movwhi	r0, #1
    3264:	35030002 	strcc	r0, [r3, #-2]
    3268:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    326c:	00009393 	muleq	r0, r3, r3
    3270:	04740d00 	ldrbteq	r0, [r4], #-3328	; 0xfffff300
    3274:	0002b99b 	muleq	r2, fp, r9
    3278:	00870600 	addeq	r0, r7, r0, lsl #12
    327c:	9d040000 	stcls	0, cr0, [r4, #-0]
    3280:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    3284:	009f0600 	addseq	r0, pc, r0, lsl #12
    3288:	9e040000 	cdpls	0, 0, cr0, cr4, cr0, {0}
    328c:	00000158 	andeq	r0, r0, r8, asr r1
    3290:	02050604 	andeq	r0, r5, #4, 12	; 0x400000
    3294:	9f040000 	svcls	0x00040000
    3298:	00000158 	andeq	r0, r0, r8, asr r1
    329c:	019e0608 	orrseq	r0, lr, r8, lsl #12
    32a0:	a0040000 	andge	r0, r4, r0
    32a4:	00000158 	andeq	r0, r0, r8, asr r1
    32a8:	43530e0c 	cmpmi	r3, #12, 28	; 0xc0
    32ac:	a1040052 	qaddge	r0, r2, r4
    32b0:	00000158 	andeq	r0, r0, r8, asr r1
    32b4:	43430e10 	movtmi	r0, #15888	; 0x3e10
    32b8:	a2040052 	andge	r0, r4, #82	; 0x52
    32bc:	00000158 	andeq	r0, r0, r8, asr r1
    32c0:	48530e14 	ldmdami	r3, {r2, r4, r9, sl, fp}^
    32c4:	a3040050 	movwge	r0, #16464	; 0x4050
    32c8:	000002ce 	andeq	r0, r0, lr, asr #5
    32cc:	01db0618 	bicseq	r0, fp, r8, lsl r6
    32d0:	a4040000 	strge	r0, [r4], #-0
    32d4:	00000158 	andeq	r0, r0, r8, asr r1
    32d8:	00f20624 	rscseq	r0, r2, r4, lsr #12
    32dc:	a5040000 	strge	r0, [r4, #-0]
    32e0:	00000158 	andeq	r0, r0, r8, asr r1
    32e4:	023a0628 	eorseq	r0, sl, #40, 12	; 0x2800000
    32e8:	a6040000 	strge	r0, [r4], -r0
    32ec:	00000158 	andeq	r0, r0, r8, asr r1
    32f0:	0225062c 	eoreq	r0, r5, #44, 12	; 0x2c00000
    32f4:	a7040000 	strge	r0, [r4, -r0]
    32f8:	00000158 	andeq	r0, r0, r8, asr r1
    32fc:	01e10630 	mvneq	r0, r0, lsr r6
    3300:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    3304:	00000158 	andeq	r0, r0, r8, asr r1
    3308:	00c60634 	sbceq	r0, r6, r4, lsr r6
    330c:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
    3310:	00000158 	andeq	r0, r0, r8, asr r1
    3314:	02500638 	subseq	r0, r0, #56, 12	; 0x3800000
    3318:	aa040000 	bge	103320 <_Min_Stack_Size+0x103120>
    331c:	00000158 	andeq	r0, r0, r8, asr r1
    3320:	46500e3c 			; <UNDEFINED> instruction: 0x46500e3c
    3324:	ab040052 	blge	103474 <_Min_Stack_Size+0x103274>
    3328:	000002e8 	andeq	r0, r0, r8, ror #5
    332c:	46440e40 	strbmi	r0, [r4], -r0, asr #28
    3330:	ac040052 	stcge	0, cr0, [r4], {82}	; 0x52
    3334:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    3338:	44410e48 	strbmi	r0, [r1], #-3656	; 0xfffff1b8
    333c:	ad040052 	stcge	0, cr0, [r4, #-328]	; 0xfffffeb8
    3340:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    3344:	023f064c 	eorseq	r0, pc, #76, 12	; 0x4c00000
    3348:	ae040000 	cdpge	0, 0, cr0, cr4, cr0, {0}
    334c:	00000302 	andeq	r0, r0, r2, lsl #6
    3350:	02200650 	eoreq	r0, r0, #80, 12	; 0x5000000
    3354:	af040000 	svcge	0x00040000
    3358:	0000031c 	andeq	r0, r0, ip, lsl r3
    335c:	580f0060 	stmdapl	pc, {r5, r6}	; <UNPREDICTABLE>
    3360:	09000001 	stmdbeq	r0, {r0}
    3364:	000001a6 	andeq	r0, r0, r6, lsr #3
    3368:	000002ce 	andeq	r0, r0, lr, asr #5
    336c:	0001510a 	andeq	r5, r1, sl, lsl #2
    3370:	0b000b00 	bleq	5f78 <_Min_Stack_Size+0x5d78>
    3374:	000002be 			; <UNDEFINED> instruction: 0x000002be
    3378:	0002b909 	andeq	fp, r2, r9, lsl #18
    337c:	0002e300 	andeq	lr, r2, r0, lsl #6
    3380:	01510a00 	cmpeq	r1, r0, lsl #20
    3384:	00010000 	andeq	r0, r1, r0
    3388:	0002d30b 	andeq	sp, r2, fp, lsl #6
    338c:	02e30f00 	rsceq	r0, r3, #0, 30
    3390:	b9090000 	stmdblt	r9, {}	; <UNPREDICTABLE>
    3394:	fd000002 	stc2	0, cr0, [r0, #-8]
    3398:	0a000002 	beq	33a8 <_Min_Stack_Size+0x31a8>
    339c:	00000151 	andeq	r0, r0, r1, asr r1
    33a0:	ed0b0003 	stc	0, cr0, [fp, #-12]
    33a4:	0f000002 	svceq	0x00000002
    33a8:	000002fd 	strdeq	r0, [r0], -sp
    33ac:	0002b909 	andeq	fp, r2, r9, lsl #18
    33b0:	00031700 	andeq	r1, r3, r0, lsl #14
    33b4:	01510a00 	cmpeq	r1, r0, lsl #20
    33b8:	00040000 	andeq	r0, r4, r0
    33bc:	0003070b 	andeq	r0, r3, fp, lsl #14
    33c0:	03170f00 	tsteq	r7, #0, 30
    33c4:	a4030000 	strge	r0, [r3], #-0
    33c8:	04000001 	streq	r0, [r0], #-1
    33cc:	0001ccb0 			; <UNDEFINED> instruction: 0x0001ccb0
    33d0:	04101000 	ldreq	r1, [r0], #-0
    33d4:	036a016d 	cmneq	sl, #1073741851	; 0x4000001b
    33d8:	30110000 	andscc	r0, r1, r0
    33dc:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    33e0:	0158016f 	cmpeq	r8, pc, ror #2
    33e4:	11000000 	mrsne	r0, (UNDEF: 0)
    33e8:	000017f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    33ec:	58017004 	stmdapl	r1, {r2, ip, sp, lr}
    33f0:	04000001 	streq	r0, [r0], #-1
    33f4:	4c415612 	mcrrmi	6, 1, r5, r1, cr2
    33f8:	01710400 	cmneq	r1, r0, lsl #8
    33fc:	00000158 	andeq	r0, r0, r8, asr r1
    3400:	172a1108 	strne	r1, [sl, -r8, lsl #2]!
    3404:	72040000 	andvc	r0, r4, #0
    3408:	0002b901 	andeq	fp, r2, r1, lsl #18
    340c:	13000c00 	movwne	r0, #3072	; 0xc00
    3410:	0000175f 	andeq	r1, r0, pc, asr r7
    3414:	2c017304 	stccs	3, cr7, [r1], {4}
    3418:	14000003 	strne	r0, [r0], #-3
    341c:	00003301 	andeq	r3, r0, r1, lsl #6
    3420:	02090500 	andeq	r0, r9, #0, 10
    3424:	00000390 	muleq	r0, r0, r3
    3428:	0002f015 	andeq	pc, r2, r5, lsl r0	; <UNPREDICTABLE>
    342c:	62150000 	andsvs	r0, r5, #0
    3430:	01000004 	tsteq	r0, r4
    3434:	17d41300 	ldrbne	r1, [r4, r0, lsl #6]
    3438:	09050000 	stmdbeq	r5, {}	; <UNPREDICTABLE>
    343c:	00037602 	andeq	r7, r3, r2, lsl #12
    3440:	06040d00 	streq	r0, [r4], -r0, lsl #26
    3444:	0003d532 	andeq	sp, r3, r2, lsr r5
    3448:	177d0600 	ldrbne	r0, [sp, -r0, lsl #12]!
    344c:	34060000 	strcc	r0, [r6], #-0
    3450:	0000007d 	andeq	r0, r0, sp, ror r0
    3454:	17b20600 	ldrne	r0, [r2, r0, lsl #12]!
    3458:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
    345c:	0000007d 	andeq	r0, r0, sp, ror r0
    3460:	178d0601 	strne	r0, [sp, r1, lsl #12]
    3464:	3d060000 	stccc	0, cr0, [r6, #-0]
    3468:	0000007d 	andeq	r0, r0, sp, ror r0
    346c:	16610602 	strbtne	r0, [r1], -r2, lsl #12
    3470:	41060000 	mrsmi	r0, (UNDEF: 6)
    3474:	00000390 	muleq	r0, r0, r3
    3478:	50030003 	andpl	r0, r3, r3
    347c:	06000016 			; <UNDEFINED> instruction: 0x06000016
    3480:	00039c44 	andeq	r9, r3, r4, asr #24
    3484:	18031600 	stmdane	r3, {r9, sl, ip}
    3488:	60010000 	andvs	r0, r1, r0
    348c:	08005958 	stmdaeq	r0, {r3, r4, r6, r8, fp, ip, lr}
    3490:	00000024 	andeq	r0, r0, r4, lsr #32
    3494:	04049c01 	streq	r9, [r4], #-3073	; 0xfffff3ff
    3498:	00170000 	andseq	r0, r7, r0
    349c:	01000017 	tsteq	r0, r7, lsl r0
    34a0:	00008860 	andeq	r8, r0, r0, ror #16
    34a4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    34a8:	16c21600 	strbne	r1, [r2], r0, lsl #12
    34ac:	70010000 	andvc	r0, r1, r0
    34b0:	0800597c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, ip, lr}
    34b4:	000000c4 	andeq	r0, r0, r4, asr #1
    34b8:	04529c01 	ldrbeq	r9, [r2], #-3073	; 0xfffff3ff
    34bc:	86170000 	ldrhi	r0, [r7], -r0
    34c0:	01000016 	tsteq	r0, r6, lsl r0
    34c4:	00045270 	andeq	r5, r4, r0, ror r2
    34c8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    34cc:	00176c18 	andseq	r6, r7, r8, lsl ip
    34d0:	88720100 	ldmdahi	r2!, {r8}^
    34d4:	02000000 	andeq	r0, r0, #0
    34d8:	cc187491 	cfldrsgt	mvf7, [r8], {145}	; 0x91
    34dc:	01000016 	tsteq	r0, r6, lsl r0
    34e0:	00008872 	andeq	r8, r0, r2, ror r8
    34e4:	70910200 	addsvc	r0, r1, r0, lsl #4
    34e8:	00174418 	andseq	r4, r7, r8, lsl r4
    34ec:	88720100 	ldmdahi	r2!, {r8}^
    34f0:	02000000 	andeq	r0, r0, #0
    34f4:	19006c91 	stmdbne	r0, {r0, r4, r7, sl, fp, sp, lr}
    34f8:	0003d504 	andeq	sp, r3, r4, lsl #10
    34fc:	16ae1600 	strtne	r1, [lr], r0, lsl #12
    3500:	9c010000 	stcls	0, cr0, [r1], {-0}
    3504:	00000000 	andeq	r0, r0, r0
    3508:	0000002c 	andeq	r0, r0, ip, lsr #32
    350c:	048a9c01 	streq	r9, [sl], #3073	; 0xc01
    3510:	e4170000 	ldr	r0, [r7], #-0
    3514:	01000017 	tsteq	r0, r7, lsl r0
    3518:	0000889c 	muleq	r0, ip, r8
    351c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3520:	00121917 	andseq	r1, r2, r7, lsl r9
    3524:	889c0100 	ldmhi	ip, {r8}
    3528:	02000000 	andeq	r0, r0, #0
    352c:	16007091 			; <UNDEFINED> instruction: 0x16007091
    3530:	0000174b 	andeq	r1, r0, fp, asr #14
    3534:	0000af01 	andeq	sl, r0, r1, lsl #30
    3538:	00400000 	subeq	r0, r0, r0
    353c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3540:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    3544:	0017f617 	andseq	pc, r7, r7, lsl r6	; <UNPREDICTABLE>
    3548:	7daf0100 	stfvcs	f0, [pc]	; 3550 <_Min_Stack_Size+0x3350>
    354c:	02000000 	andeq	r0, r0, #0
    3550:	13177791 	tstne	r7, #38010880	; 0x2440000
    3554:	01000017 	tsteq	r0, r7, lsl r0
    3558:	000390af 	andeq	r9, r3, pc, lsr #1
    355c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    3560:	16961600 	ldrne	r1, [r6], r0, lsl #12
    3564:	c7010000 	strgt	r0, [r1, -r0]
    3568:	00000000 	andeq	r0, r0, r0
    356c:	00000038 	andeq	r0, r0, r8, lsr r0
    3570:	04e09c01 	strbteq	r9, [r0], #3073	; 0xc01
    3574:	74170000 	ldrvc	r0, [r7], #-0
    3578:	01000016 	tsteq	r0, r6, lsl r0
    357c:	000088c7 	andeq	r8, r0, r7, asr #17
    3580:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3584:	026c1a00 	rsbeq	r1, ip, #0, 20
    3588:	ce040000 	cdpgt	0, 0, cr0, cr4, cr0, {0}
    358c:	0004ec06 	andeq	lr, r4, r6, lsl #24
    3590:	006f0b00 	rsbeq	r0, pc, r0, lsl #22
    3594:	89000000 	stmdbhi	r0, {}	; <UNPREDICTABLE>
    3598:	04000008 	streq	r0, [r0], #-8
    359c:	000e3600 	andeq	r3, lr, r0, lsl #12
    35a0:	11010400 	tstne	r1, r0, lsl #8
    35a4:	0c000001 	stceq	0, cr0, [r0], {1}
    35a8:	00001b53 	andeq	r1, r0, r3, asr fp
    35ac:	00000378 	andeq	r0, r0, r8, ror r3
    35b0:	00000000 	andeq	r0, r0, r0
    35b4:	00001af7 	strdeq	r1, [r0], -r7
    35b8:	92060102 	andls	r0, r6, #-2147483648	; 0x80000000
    35bc:	03000001 	movweq	r0, #1
    35c0:	000000e3 	andeq	r0, r0, r3, ror #1
    35c4:	00331d02 	eorseq	r1, r3, r2, lsl #26
    35c8:	01020000 	mrseq	r0, (UNDEF: 2)
    35cc:	00019008 	andeq	r9, r1, r8
    35d0:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    35d4:	00000095 	muleq	r0, r5, r0
    35d8:	00007203 	andeq	r7, r0, r3, lsl #4
    35dc:	4c2b0200 	sfmmi	f0, 4, [fp], #-0
    35e0:	02000000 	andeq	r0, r0, #0
    35e4:	01f20702 	mvnseq	r0, r2, lsl #14
    35e8:	04020000 	streq	r0, [r2], #-0
    35ec:	0000bd05 	andeq	fp, r0, r5, lsl #26
    35f0:	00670300 	rsbeq	r0, r7, r0, lsl #6
    35f4:	41020000 	mrsmi	r0, (UNDEF: 2)
    35f8:	00000065 	andeq	r0, r0, r5, rrx
    35fc:	c9070402 	stmdbgt	r7, {r1, sl}
    3600:	02000001 	andeq	r0, r0, #1
    3604:	00b80508 	adcseq	r0, r8, r8, lsl #10
    3608:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    360c:	0001c407 	andeq	ip, r1, r7, lsl #8
    3610:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    3614:	00746e69 	rsbseq	r6, r4, r9, ror #28
    3618:	ce070402 	cdpgt	4, 0, cr0, cr7, cr2, {0}
    361c:	03000001 	movweq	r0, #1
    3620:	000000e5 	andeq	r0, r0, r5, ror #1
    3624:	00281803 	eoreq	r1, r8, r3, lsl #16
    3628:	74030000 	strvc	r0, [r3], #-0
    362c:	03000000 	movweq	r0, #0
    3630:	00004124 	andeq	r4, r0, r4, lsr #2
    3634:	00690300 	rsbeq	r0, r9, r0, lsl #6
    3638:	30030000 	andcc	r0, r3, r0
    363c:	0000005a 	andeq	r0, r0, sl, asr r0
    3640:	59070402 	stmdbpl	r7, {r1, sl}
    3644:	05000000 	streq	r0, [r0, #-0]
    3648:	0000009e 	muleq	r0, lr, r0
    364c:	00008806 	andeq	r8, r0, r6, lsl #16
    3650:	00b50500 	adcseq	r0, r5, r0, lsl #10
    3654:	01070000 	mrseq	r0, (UNDEF: 7)
    3658:	00000033 	andeq	r0, r0, r3, lsr r0
    365c:	d9020704 	stmdble	r2, {r2, r8, r9, sl}
    3660:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3664:	00001c74 	andeq	r1, r0, r4, ror ip
    3668:	45530900 	ldrbmi	r0, [r3, #-2304]	; 0xfffff700
    366c:	00010054 	andeq	r0, r1, r4, asr r0
    3670:	002e770a 	eoreq	r7, lr, sl, lsl #14
    3674:	02070400 	andeq	r0, r7, #0, 8
    3678:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    367c:	002f950a 	eoreq	r9, pc, sl, lsl #10
    3680:	02070400 	andeq	r0, r7, #0, 8
    3684:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    3688:	00330107 	eorseq	r0, r3, r7, lsl #2
    368c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    3690:	00010b02 	andeq	r0, r1, r2, lsl #22
    3694:	02f00800 	rscseq	r0, r0, #0, 16
    3698:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    369c:	00000462 	andeq	r0, r0, r2, ror #8
    36a0:	d40a0001 	strle	r0, [sl], #-1
    36a4:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    36a8:	00f10209 	rscseq	r0, r1, r9, lsl #4
    36ac:	01070000 	mrseq	r0, (UNDEF: 7)
    36b0:	00000033 	andeq	r0, r0, r3, lsr r0
    36b4:	31020c04 	tstcc	r2, r4, lsl #24
    36b8:	08000001 	stmdaeq	r0, {r0}
    36bc:	00000341 	andeq	r0, r0, r1, asr #6
    36c0:	14150800 	ldrne	r0, [r5], #-2048	; 0xfffff800
    36c4:	00010000 	andeq	r0, r1, r0
    36c8:	00195b0a 	andseq	r5, r9, sl, lsl #22
    36cc:	020c0400 	andeq	r0, ip, #0, 8
    36d0:	00000117 	andeq	r0, r0, r7, lsl r1
    36d4:	3404280b 	strcc	r2, [r4], #-2059	; 0xfffff7f5
    36d8:	0001c804 	andeq	ip, r1, r4, lsl #16
    36dc:	52430c00 	subpl	r0, r3, #0, 24
    36e0:	04360400 	ldrteq	r0, [r6], #-1024	; 0xfffffc00
    36e4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    36e8:	21660d00 	cmncs	r6, r0, lsl #26
    36ec:	37040000 	strcc	r0, [r4, -r0]
    36f0:	0000b004 	andeq	fp, r0, r4
    36f4:	430c0400 	movwmi	r0, #50176	; 0xc400
    36f8:	04005249 	streq	r5, [r0], #-585	; 0xfffffdb7
    36fc:	00b00438 	adcseq	r0, r0, r8, lsr r4
    3700:	0d080000 	stceq	0, cr0, [r8, #-0]
    3704:	000000da 	ldrdeq	r0, [r0], -sl
    3708:	b0043904 	andlt	r3, r4, r4, lsl #18
    370c:	0c000000 	stceq	0, cr0, [r0], {-0}
    3710:	0000500d 	andeq	r5, r0, sp
    3714:	043a0400 	ldrteq	r0, [sl], #-1024	; 0xfffffc00
    3718:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    371c:	00d30d10 	sbcseq	r0, r3, r0, lsl sp
    3720:	3b040000 	blcc	103728 <_Min_Stack_Size+0x103528>
    3724:	0000b004 	andeq	fp, r0, r4
    3728:	ad0d1400 	cfstrsge	mvf1, [sp, #-0]
    372c:	04000001 	streq	r0, [r0], #-1
    3730:	00b0043c 	adcseq	r0, r0, ip, lsr r4
    3734:	0d180000 	ldceq	0, cr0, [r8, #-0]
    3738:	0000008d 	andeq	r0, r0, sp, lsl #1
    373c:	b0043d04 	andlt	r3, r4, r4, lsl #26
    3740:	1c000000 	stcne	0, cr0, [r0], {-0}
    3744:	0000620d 	andeq	r6, r0, sp, lsl #4
    3748:	043e0400 	ldrteq	r0, [lr], #-1024	; 0xfffffc00
    374c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    3750:	53430c20 	movtpl	r0, #15392	; 0x3c20
    3754:	3f040052 	svccc	0x00040052
    3758:	0000b004 	andeq	fp, r0, r4
    375c:	0a002400 	beq	c764 <_Min_Stack_Size+0xc564>
    3760:	000000a4 	andeq	r0, r0, r4, lsr #1
    3764:	3d044a04 	vstrcc	s8, [r4, #-16]
    3768:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    376c:	192e0514 	stmdbne	lr!, {r2, r4, r8, sl}
    3770:	0f000002 	svceq	0x00000002
    3774:	00001a80 	andeq	r1, r0, r0, lsl #21
    3778:	009e3005 	addseq	r3, lr, r5
    377c:	0f000000 	svceq	0x00000000
    3780:	000018d2 	ldrdeq	r1, [r0], -r2
    3784:	009e3105 	addseq	r3, lr, r5, lsl #2
    3788:	0f040000 	svceq	0x00040000
    378c:	00001ae9 	andeq	r1, r0, r9, ror #21
    3790:	009e3205 	addseq	r3, lr, r5, lsl #4
    3794:	0f080000 	svceq	0x00080000
    3798:	00001a9c 	muleq	r0, ip, sl
    379c:	009e3305 	addseq	r3, lr, r5, lsl #6
    37a0:	0f0c0000 	svceq	0x000c0000
    37a4:	00001a61 	andeq	r1, r0, r1, ror #20
    37a8:	009e3405 	addseq	r3, lr, r5, lsl #8
    37ac:	00100000 	andseq	r0, r0, r0
    37b0:	00189f03 	andseq	r9, r8, r3, lsl #30
    37b4:	d4350500 	ldrtle	r0, [r5], #-1280	; 0xfffffb00
    37b8:	10000001 	andne	r0, r0, r1
    37bc:	00001904 	andeq	r1, r0, r4, lsl #18
    37c0:	0000d901 	andeq	sp, r0, r1, lsl #18
    37c4:	005c0000 	subseq	r0, ip, r0
    37c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    37cc:	001a7211 	andseq	r7, sl, r1, lsl r2
    37d0:	010e0100 	mrseq	r0, (UNDEF: 30)
    37d4:	00000000 	andeq	r0, r0, r0
    37d8:	0000005c 	andeq	r0, r0, ip, asr r0
    37dc:	025b9c01 	subseq	r9, fp, #256	; 0x100
    37e0:	d0120000 	andsle	r0, r2, r0
    37e4:	0100001a 	tsteq	r0, sl, lsl r0
    37e8:	009e010e 	addseq	r0, lr, lr, lsl #2
    37ec:	91020000 	mrsls	r0, (UNDEF: 2)
    37f0:	0f130074 	svceq	0x00130074
    37f4:	01000019 	tsteq	r0, r9, lsl r0
    37f8:	01310130 	teqeq	r1, r0, lsr r1
    37fc:	00000000 	andeq	r0, r0, r0
    3800:	00500000 	subseq	r0, r0, r0
    3804:	9c010000 	stcls	0, cr0, [r1], {-0}
    3808:	000002a3 	andeq	r0, r0, r3, lsr #5
    380c:	0001b514 	andeq	fp, r1, r4, lsl r5
    3810:	01320100 	teqeq	r2, r0, lsl #2
    3814:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    3818:	14709102 	ldrbtne	r9, [r0], #-258	; 0xfffffefe
    381c:	0000386d 	andeq	r3, r0, sp, ror #16
    3820:	31013301 	tstcc	r1, r1, lsl #6
    3824:	02000001 	andeq	r0, r0, #1
    3828:	7d147791 	ldcvc	7, cr7, [r4, #-580]	; 0xfffffdbc
    382c:	01000000 	mrseq	r0, (UNDEF: 0)
    3830:	00d90134 	sbcseq	r0, r9, r4, lsr r1
    3834:	91020000 	mrsls	r0, (UNDEF: 2)
    3838:	b2110076 	andslt	r0, r1, #118	; 0x76
    383c:	0100001b 	tsteq	r0, fp, lsl r0
    3840:	0000014e 	andeq	r0, r0, lr, asr #2
    3844:	003c0000 	eorseq	r0, ip, r0
    3848:	9c010000 	stcls	0, cr0, [r1], {-0}
    384c:	000002d8 	ldrdeq	r0, [r0], -r8
    3850:	001bbc12 	andseq	fp, fp, r2, lsl ip
    3854:	014e0100 	mrseq	r0, (UNDEF: 94)
    3858:	00000088 	andeq	r0, r0, r8, lsl #1
    385c:	146f9102 	strbtne	r9, [pc], #-258	; 3864 <_Min_Stack_Size+0x3664>
    3860:	000019a7 	andeq	r1, r0, r7, lsr #19
    3864:	9e015001 	cdpls	0, 0, cr5, cr1, cr1, {0}
    3868:	02000000 	andeq	r0, r0, #0
    386c:	11007491 			; <UNDEFINED> instruction: 0x11007491
    3870:	00001b98 	muleq	r0, r8, fp
    3874:	00016201 	andeq	r6, r1, r1, lsl #4
    3878:	20000000 	andcs	r0, r0, r0
    387c:	01000000 	mrseq	r0, (UNDEF: 0)
    3880:	0002fe9c 	muleq	r2, ip, lr
    3884:	17131200 	ldrne	r1, [r3, -r0, lsl #4]
    3888:	62010000 	andvs	r0, r1, #0
    388c:	00010b01 	andeq	r0, r1, r1, lsl #22
    3890:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3894:	194d1100 	stmdbne	sp, {r8, ip}^
    3898:	7a010000 	bvc	438a0 <_Min_Stack_Size+0x436a0>
    389c:	00000001 	andeq	r0, r0, r1
    38a0:	00003c00 	andeq	r3, r0, r0, lsl #24
    38a4:	429c0100 	addsmi	r0, ip, #0, 2
    38a8:	12000003 	andne	r0, r0, #3
    38ac:	000019f5 	strdeq	r1, [r0], -r5
    38b0:	9e017a01 	vmlals.f32	s14, s2, s2
    38b4:	02000000 	andeq	r0, r0, #0
    38b8:	b1126c91 			; <UNDEFINED> instruction: 0xb1126c91
    38bc:	01000018 	tsteq	r0, r8, lsl r0
    38c0:	009e017a 	addseq	r0, lr, sl, ror r1
    38c4:	91020000 	mrsls	r0, (UNDEF: 2)
    38c8:	19a71468 	stmibne	r7!, {r3, r5, r6, sl, ip}
    38cc:	7c010000 	stcvc	0, cr0, [r1], {-0}
    38d0:	00009e01 	andeq	r9, r0, r1, lsl #28
    38d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    38d8:	18941100 	ldmne	r4, {r8, ip}
    38dc:	91010000 	mrsls	r0, (UNDEF: 1)
    38e0:	00000001 	andeq	r0, r0, r1
    38e4:	00002000 	andeq	r2, r0, r0
    38e8:	689c0100 	ldmvs	ip, {r8}
    38ec:	12000003 	andne	r0, r0, #3
    38f0:	00001713 	andeq	r1, r0, r3, lsl r7
    38f4:	0b019101 	bleq	67d00 <_Min_Stack_Size+0x67b00>
    38f8:	02000001 	andeq	r0, r0, #1
    38fc:	11007791 			; <UNDEFINED> instruction: 0x11007791
    3900:	00001a03 	andeq	r1, r0, r3, lsl #20
    3904:	00023401 	andeq	r3, r2, r1, lsl #8
    3908:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    390c:	01000000 	mrseq	r0, (UNDEF: 0)
    3910:	00039d9c 	muleq	r3, ip, sp
    3914:	1ad81200 	bne	ff60811c <BootRAM+0xe5788bd>
    3918:	34010000 	strcc	r0, [r1], #-0
    391c:	00009e02 	andeq	r9, r0, r2, lsl #28
    3920:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3924:	0019a714 	andseq	sl, r9, r4, lsl r7
    3928:	02360100 	eorseq	r0, r6, #0, 2
    392c:	0000009e 	muleq	r0, lr, r0
    3930:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3934:	00198315 	andseq	r8, r9, r5, lsl r3
    3938:	024b0100 	subeq	r0, fp, #0, 2
    393c:	00000088 	andeq	r0, r0, r8, lsl #1
    3940:	00000000 	andeq	r0, r0, r0
    3944:	0000001c 	andeq	r0, r0, ip, lsl r0
    3948:	89119c01 	ldmdbhi	r1, {r0, sl, fp, ip, pc}
    394c:	0100001b 	tsteq	r0, fp, lsl r0
    3950:	00000260 	andeq	r0, r0, r0, ror #4
    3954:	00380000 	eorseq	r0, r8, r0
    3958:	9c010000 	stcls	0, cr0, [r1], {-0}
    395c:	000003e8 	andeq	r0, r0, r8, ror #7
    3960:	001a5612 	andseq	r5, sl, r2, lsl r6
    3964:	02600100 	rsbeq	r0, r0, #0, 2
    3968:	0000009e 	muleq	r0, lr, r0
    396c:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    3970:	000019a7 	andeq	r1, r0, r7, lsr #19
    3974:	9e026201 	cdpls	2, 0, cr6, cr2, cr1, {0}
    3978:	02000000 	andeq	r0, r0, #0
    397c:	11007491 			; <UNDEFINED> instruction: 0x11007491
    3980:	00001997 	muleq	r0, r7, r9
    3984:	00027a01 	andeq	r7, r2, r1, lsl #20
    3988:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    398c:	01000000 	mrseq	r0, (UNDEF: 0)
    3990:	00041d9c 	muleq	r4, ip, sp
    3994:	181c1200 	ldmdane	ip, {r9, ip}
    3998:	7a010000 	bvc	439a0 <_Min_Stack_Size+0x437a0>
    399c:	00009e02 	andeq	r9, r0, r2, lsl #28
    39a0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    39a4:	0019a714 	andseq	sl, r9, r4, lsl r7
    39a8:	027c0100 	rsbseq	r0, ip, #0, 2
    39ac:	0000009e 	muleq	r0, lr, r0
    39b0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    39b4:	001bde11 	andseq	sp, fp, r1, lsl lr
    39b8:	02940100 	addseq	r0, r4, #0, 2
    39bc:	00000000 	andeq	r0, r0, r0
    39c0:	00000038 	andeq	r0, r0, r8, lsr r0
    39c4:	04529c01 	ldrbeq	r9, [r2], #-3073	; 0xfffff3ff
    39c8:	1c120000 	ldcne	0, cr0, [r2], {-0}
    39cc:	01000018 	tsteq	r0, r8, lsl r0
    39d0:	009e0294 	umullseq	r0, lr, r4, r2
    39d4:	91020000 	mrsls	r0, (UNDEF: 2)
    39d8:	19a7146c 	stmibne	r7!, {r2, r3, r5, r6, sl, ip}
    39dc:	96010000 	strls	r0, [r1], -r0
    39e0:	00009e02 	andeq	r9, r0, r2, lsl #28
    39e4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    39e8:	1aac1100 	bne	feb07df0 <BootRAM+0xda78591>
    39ec:	bc010000 	stclt	0, cr0, [r1], {-0}
    39f0:	00000002 	andeq	r0, r0, r2
    39f4:	00004c00 	andeq	r4, r0, r0, lsl #24
    39f8:	879c0100 	ldrhi	r0, [ip, r0, lsl #2]
    39fc:	12000004 	andne	r0, r0, #4
    3a00:	00001bab 	andeq	r1, r0, fp, lsr #23
    3a04:	8802bc01 	stmdahi	r2, {r0, sl, fp, ip, sp, pc}
    3a08:	02000000 	andeq	r0, r0, #0
    3a0c:	13127791 	tstne	r2, #38010880	; 0x2440000
    3a10:	01000017 	tsteq	r0, r7, lsl r0
    3a14:	010b02bc 			; <UNDEFINED> instruction: 0x010b02bc
    3a18:	91020000 	mrsls	r0, (UNDEF: 2)
    3a1c:	67110076 			; <UNDEFINED> instruction: 0x67110076
    3a20:	01000019 	tsteq	r0, r9, lsl r0
    3a24:	000002d8 	ldrdeq	r0, [r0], -r8
    3a28:	001c0000 	andseq	r0, ip, r0
    3a2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3a30:	000004ad 	andeq	r0, r0, sp, lsr #9
    3a34:	001a3712 	andseq	r3, sl, r2, lsl r7
    3a38:	02d80100 	sbcseq	r0, r8, #0, 2
    3a3c:	0000009e 	muleq	r0, lr, r0
    3a40:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3a44:	00182511 	andseq	r2, r8, r1, lsl r5
    3a48:	02fe0100 	rscseq	r0, lr, #0, 2
    3a4c:	00000000 	andeq	r0, r0, r0
    3a50:	00000038 	andeq	r0, r0, r8, lsr r0
    3a54:	04e29c01 	strbteq	r9, [r2], #3073	; 0xc01
    3a58:	8a120000 	bhi	483a60 <_Min_Stack_Size+0x483860>
    3a5c:	01000018 	tsteq	r0, r8, lsl r0
    3a60:	009e02fe 			; <UNDEFINED> instruction: 0x009e02fe
    3a64:	91020000 	mrsls	r0, (UNDEF: 2)
    3a68:	19a7146c 	stmibne	r7!, {r2, r3, r5, r6, sl, ip}
    3a6c:	00010000 	andeq	r0, r1, r0
    3a70:	00009e03 	andeq	r9, r0, r3, lsl #28
    3a74:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3a78:	1af91100 	bne	ffe47e80 <BootRAM+0xedb8621>
    3a7c:	3d010000 	stccc	0, cr0, [r1, #-0]
    3a80:	00000003 	andeq	r0, r0, r3
    3a84:	00004000 	andeq	r4, r0, r0
    3a88:	089c0100 	ldmeq	ip, {r8}
    3a8c:	12000005 	andne	r0, r0, #5
    3a90:	00001863 	andeq	r1, r0, r3, ror #16
    3a94:	88033d01 	stmdahi	r3, {r0, r8, sl, fp, ip, sp}
    3a98:	02000000 	andeq	r0, r0, #0
    3a9c:	11007791 			; <UNDEFINED> instruction: 0x11007791
    3aa0:	00001978 	andeq	r1, r0, r8, ror r9
    3aa4:	40035e01 	andmi	r5, r3, r1, lsl #28
    3aa8:	2008005a 	andcs	r0, r8, sl, asr r0
    3aac:	01000000 	mrseq	r0, (UNDEF: 0)
    3ab0:	00052e9c 	muleq	r5, ip, lr
    3ab4:	17131200 	ldrne	r1, [r3, -r0, lsl #4]
    3ab8:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    3abc:	00010b03 	andeq	r0, r1, r3, lsl #22
    3ac0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3ac4:	1a261100 	bne	987ecc <_Min_Stack_Size+0x987ccc>
    3ac8:	6f010000 	svcvs	0x00010000
    3acc:	00000003 	andeq	r0, r0, r3
    3ad0:	00002400 	andeq	r2, r0, r0, lsl #8
    3ad4:	549c0100 	ldrpl	r0, [ip], #256	; 0x100
    3ad8:	12000005 	andne	r0, r0, #5
    3adc:	00001925 	andeq	r1, r0, r5, lsr #18
    3ae0:	9e036f01 	cdpls	15, 0, cr6, cr3, cr1, {0}
    3ae4:	02000000 	andeq	r0, r0, #0
    3ae8:	11007491 			; <UNDEFINED> instruction: 0x11007491
    3aec:	00001b2a 	andeq	r1, r0, sl, lsr #22
    3af0:	00037d01 	andeq	r7, r3, r1, lsl #26
    3af4:	20000000 	andcs	r0, r0, r0
    3af8:	01000000 	mrseq	r0, (UNDEF: 0)
    3afc:	00057a9c 	muleq	r5, ip, sl
    3b00:	17131200 	ldrne	r1, [r3, -r0, lsl #4]
    3b04:	7d010000 	stcvc	0, cr0, [r1, #-0]
    3b08:	00010b03 	andeq	r0, r1, r3, lsl #22
    3b0c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3b10:	1b181100 	blne	607f18 <_Min_Stack_Size+0x607d18>
    3b14:	8c010000 	stchi	0, cr0, [r1], {-0}
    3b18:	005a6003 	subseq	r6, sl, r3
    3b1c:	00016008 	andeq	r6, r1, r8
    3b20:	dc9c0100 	ldfles	f0, [ip], {0}
    3b24:	12000005 	andne	r0, r0, #5
    3b28:	00001a91 	muleq	r0, r1, sl
    3b2c:	dc038c01 	stcle	12, cr8, [r3], {1}
    3b30:	02000005 	andeq	r0, r0, #5
    3b34:	74166491 	ldrvc	r6, [r6], #-1169	; 0xfffffb6f
    3b38:	0100706d 	tsteq	r0, sp, rrx
    3b3c:	009e038e 	addseq	r0, lr, lr, lsl #7
    3b40:	91020000 	mrsls	r0, (UNDEF: 2)
    3b44:	00cb1474 	sbceq	r1, fp, r4, ror r4
    3b48:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    3b4c:	00009e03 	andeq	r9, r0, r3, lsl #28
    3b50:	70910200 	addsvc	r0, r1, r0, lsl #4
    3b54:	00010714 	andeq	r0, r1, r4, lsl r7
    3b58:	038e0100 	orreq	r0, lr, #0, 2
    3b5c:	0000009e 	muleq	r0, lr, r0
    3b60:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    3b64:	000018f0 	strdeq	r1, [r0], -r0
    3b68:	9e038e01 	cdpls	14, 0, cr8, cr3, cr1, {0}
    3b6c:	02000000 	andeq	r0, r0, #0
    3b70:	17006891 			; <UNDEFINED> instruction: 0x17006891
    3b74:	00021904 	andeq	r1, r2, r4, lsl #18
    3b78:	18bc1100 	ldmne	ip!, {r8, ip}
    3b7c:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    3b80:	00000004 	andeq	r0, r0, r4
    3b84:	00003c00 	andeq	r3, r0, r0, lsl #24
    3b88:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    3b8c:	12000006 	andne	r0, r0, #6
    3b90:	00001bd0 	ldrdeq	r1, [r0], -r0
    3b94:	9e042801 	cdpls	8, 0, cr2, cr4, cr1, {0}
    3b98:	02000000 	andeq	r0, r0, #0
    3b9c:	13127491 	tstne	r2, #-1862270976	; 0x91000000
    3ba0:	01000017 	tsteq	r0, r7, lsl r0
    3ba4:	010b0428 	tsteq	fp, r8, lsr #8
    3ba8:	91020000 	mrsls	r0, (UNDEF: 2)
    3bac:	b9110073 	ldmdblt	r1, {r0, r1, r4, r5, r6}
    3bb0:	0100001a 	tsteq	r0, sl, lsl r0
    3bb4:	5bc00447 	blpl	ff004cd8 <BootRAM+0xdf75479>
    3bb8:	003c0800 	eorseq	r0, ip, r0, lsl #16
    3bbc:	9c010000 	stcls	0, cr0, [r1], {-0}
    3bc0:	0000064c 	andeq	r0, r0, ip, asr #12
    3bc4:	00187b12 	andseq	r7, r8, r2, lsl fp
    3bc8:	04470100 	strbeq	r0, [r7], #-256	; 0xffffff00
    3bcc:	0000009e 	muleq	r0, lr, r0
    3bd0:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    3bd4:	00001713 	andeq	r1, r0, r3, lsl r7
    3bd8:	0b044701 	bleq	1157e4 <_Min_Stack_Size+0x1155e4>
    3bdc:	02000001 	andeq	r0, r0, #1
    3be0:	11007391 			; <UNDEFINED> instruction: 0x11007391
    3be4:	000019c2 	andeq	r1, r0, r2, asr #19
    3be8:	fc046601 	stc2	6, cr6, [r4], {1}
    3bec:	3c08005b 	stccc	0, cr0, [r8], {91}	; 0x5b
    3bf0:	01000000 	mrseq	r0, (UNDEF: 0)
    3bf4:	0006819c 	muleq	r6, ip, r1
    3bf8:	18e11200 	stmiane	r1!, {r9, ip}^
    3bfc:	66010000 	strvs	r0, [r1], -r0
    3c00:	00009e04 	andeq	r9, r0, r4, lsl #28
    3c04:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3c08:	00171312 	andseq	r1, r7, r2, lsl r3
    3c0c:	04660100 	strbteq	r0, [r6], #-256	; 0xffffff00
    3c10:	0000010b 	andeq	r0, r0, fp, lsl #2
    3c14:	00739102 	rsbseq	r9, r3, r2, lsl #2
    3c18:	00184c11 	andseq	r4, r8, r1, lsl ip
    3c1c:	04a10100 	strteq	r0, [r1], #256	; 0x100
    3c20:	00000000 	andeq	r0, r0, r0
    3c24:	0000003c 	andeq	r0, r0, ip, lsr r0
    3c28:	06b69c01 	ldrteq	r9, [r6], r1, lsl #24
    3c2c:	7b120000 	blvc	483c34 <_Min_Stack_Size+0x483a34>
    3c30:	01000018 	tsteq	r0, r8, lsl r0
    3c34:	009e04a1 	addseq	r0, lr, r1, lsr #9
    3c38:	91020000 	mrsls	r0, (UNDEF: 2)
    3c3c:	17131274 			; <UNDEFINED> instruction: 0x17131274
    3c40:	a1010000 	mrsge	r0, (UNDEF: 1)
    3c44:	00010b04 	andeq	r0, r1, r4, lsl #22
    3c48:	73910200 	orrsvc	r0, r1, #0, 4
    3c4c:	19361100 	ldmdbne	r6!, {r8, ip}
    3c50:	c0010000 	andgt	r0, r1, r0
    3c54:	005c3804 	subseq	r3, ip, r4, lsl #16
    3c58:	00003c08 	andeq	r3, r0, r8, lsl #24
    3c5c:	eb9c0100 	bl	fe704064 <BootRAM+0xd674805>
    3c60:	12000006 	andne	r0, r0, #6
    3c64:	000018e1 	andeq	r1, r0, r1, ror #17
    3c68:	9e04c001 	cdpls	0, 0, cr12, cr4, cr1, {0}
    3c6c:	02000000 	andeq	r0, r0, #0
    3c70:	13127491 	tstne	r2, #-1862270976	; 0x91000000
    3c74:	01000017 	tsteq	r0, r7, lsl r0
    3c78:	010b04c0 	smlabteq	fp, r0, r4, r0
    3c7c:	91020000 	mrsls	r0, (UNDEF: 2)
    3c80:	d9110073 	ldmdble	r1, {r0, r1, r4, r5, r6}
    3c84:	01000019 	tsteq	r0, r9, lsl r0
    3c88:	000004d5 	ldrdeq	r0, [r0], -r5
    3c8c:	00200000 	eoreq	r0, r0, r0
    3c90:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c94:	00000711 	andeq	r0, r0, r1, lsl r7
    3c98:	00171312 	andseq	r1, r7, r2, lsl r3
    3c9c:	04d50100 	ldrbeq	r0, [r5], #256	; 0x100
    3ca0:	0000010b 	andeq	r0, r0, fp, lsl #2
    3ca4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3ca8:	001b3811 	andseq	r3, fp, r1, lsl r8
    3cac:	04e20100 	strbteq	r0, [r2], #256	; 0x100
    3cb0:	00000000 	andeq	r0, r0, r0
    3cb4:	00000020 	andeq	r0, r0, r0, lsr #32
    3cb8:	07379c01 	ldreq	r9, [r7, -r1, lsl #24]!
    3cbc:	13120000 	tstne	r2, #0
    3cc0:	01000017 	tsteq	r0, r7, lsl r0
    3cc4:	010b04e2 	smlatteq	fp, r2, r4, r0
    3cc8:	91020000 	mrsls	r0, (UNDEF: 2)
    3ccc:	f6110077 			; <UNDEFINED> instruction: 0xf6110077
    3cd0:	01000018 	tsteq	r0, r8, lsl r0
    3cd4:	00000502 	andeq	r0, r0, r2, lsl #10
    3cd8:	00200000 	eoreq	r0, r0, r0
    3cdc:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ce0:	0000075d 	andeq	r0, r0, sp, asr r7
    3ce4:	001ba312 	andseq	sl, fp, r2, lsl r3
    3ce8:	05020100 	streq	r0, [r2, #-256]	; 0xffffff00
    3cec:	00000088 	andeq	r0, r0, r8, lsl #1
    3cf0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3cf4:	001a1418 	andseq	r1, sl, r8, lsl r4
    3cf8:	052e0100 	streq	r0, [lr, #-256]!	; 0xffffff00
    3cfc:	000000d9 	ldrdeq	r0, [r0], -r9
    3d00:	08005c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, ip, lr}
    3d04:	00000074 	andeq	r0, r0, r4, ror r0
    3d08:	07b49c01 	ldreq	r9, [r4, r1, lsl #24]!
    3d0c:	ec120000 	ldc	0, cr0, [r2], {-0}
    3d10:	01000019 	tsteq	r0, r9, lsl r0
    3d14:	0088052e 	addeq	r0, r8, lr, lsr #10
    3d18:	91020000 	mrsls	r0, (UNDEF: 2)
    3d1c:	6d741667 	ldclvs	6, cr1, [r4, #-412]!	; 0xfffffe64
    3d20:	30010070 	andcc	r0, r1, r0, ror r0
    3d24:	00009e05 	andeq	r9, r0, r5, lsl #28
    3d28:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3d2c:	0019b814 	andseq	fp, r9, r4, lsl r8
    3d30:	05310100 	ldreq	r0, [r1, #-256]!	; 0xffffff00
    3d34:	0000009e 	muleq	r0, lr, r0
    3d38:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    3d3c:	000019ae 	andeq	r1, r0, lr, lsr #19
    3d40:	d9053201 	stmdble	r5, {r0, r9, ip, sp}
    3d44:	02000000 	andeq	r0, r0, #0
    3d48:	19007391 	stmdbne	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
    3d4c:	00001a48 	andeq	r1, r0, r8, asr #20
    3d50:	00055b01 	andeq	r5, r5, r1, lsl #22
    3d54:	1c000000 	stcne	0, cr0, [r0], {-0}
    3d58:	01000000 	mrseq	r0, (UNDEF: 0)
    3d5c:	186b189c 	stmdane	fp!, {r2, r3, r4, r7, fp, ip}^
    3d60:	7a010000 	bvc	43d68 <_Min_Stack_Size+0x43b68>
    3d64:	0000e505 	andeq	lr, r0, r5, lsl #10
    3d68:	00000000 	andeq	r0, r0, r0
    3d6c:	00003400 	andeq	r3, r0, r0, lsl #8
    3d70:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    3d74:	12000007 	andne	r0, r0, #7
    3d78:	00001bab 	andeq	r1, r0, fp, lsr #23
    3d7c:	88057a01 	stmdahi	r5, {r0, r9, fp, ip, sp, lr}
    3d80:	02000000 	andeq	r0, r0, #0
    3d84:	ae146f91 	mrcge	15, 0, r6, cr4, cr1, {4}
    3d88:	01000019 	tsteq	r0, r9, lsl r0
    3d8c:	00e5057c 	rsceq	r0, r5, ip, ror r5
    3d90:	91020000 	mrsls	r0, (UNDEF: 2)
    3d94:	36110077 			; <UNDEFINED> instruction: 0x36110077
    3d98:	01000018 	tsteq	r0, r8, lsl r0
    3d9c:	000005a8 	andeq	r0, r0, r8, lsr #11
    3da0:	00200000 	eoreq	r0, r0, r0
    3da4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3da8:	00000825 	andeq	r0, r0, r5, lsr #16
    3dac:	001bab12 	andseq	sl, fp, r2, lsl fp
    3db0:	05a80100 	streq	r0, [r8, #256]!	; 0x100
    3db4:	00000088 	andeq	r0, r0, r8, lsl #1
    3db8:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3dbc:	0000ba1a 	andeq	fp, r0, sl, lsl sl
    3dc0:	00083500 	andeq	r3, r8, r0, lsl #10
    3dc4:	00a91b00 	adceq	r1, r9, r0, lsl #22
    3dc8:	000f0000 	andeq	r0, pc, r0
    3dcc:	001b071c 	andseq	r0, fp, ip, lsl r7
    3dd0:	4bc10100 	blmi	ff0441d8 <BootRAM+0xdfb4979>
    3dd4:	05000008 	streq	r0, [r0, #-8]
    3dd8:	0000b803 	andeq	fp, r0, r3, lsl #16
    3ddc:	08250520 	stmdaeq	r5!, {r5, r8, sl}
    3de0:	46060000 	strmi	r0, [r6], -r0
    3de4:	1a000008 	bne	3e0c <_Min_Stack_Size+0x3c0c>
    3de8:	000000ba 	strheq	r0, [r0], -sl
    3dec:	00000860 	andeq	r0, r0, r0, ror #16
    3df0:	0000a91b 	andeq	sl, r0, fp, lsl r9
    3df4:	1c000300 	stcne	3, cr0, [r0], {-0}
    3df8:	00001bee 	andeq	r1, r0, lr, ror #23
    3dfc:	0876c201 	ldmdaeq	r6!, {r0, r9, lr, pc}^
    3e00:	03050000 	movweq	r0, #20480	; 0x5000
    3e04:	200000c8 	andcs	r0, r0, r8, asr #1
    3e08:	00085005 	andeq	r5, r8, r5
    3e0c:	08710600 	ldmdaeq	r1!, {r9, sl}^
    3e10:	6c1d0000 	ldcvs	0, cr0, [sp], {-0}
    3e14:	06000002 	streq	r0, [r0], -r2
    3e18:	088706ce 	stmeq	r7, {r1, r2, r3, r6, r7, r9, sl}
    3e1c:	7a050000 	bvc	143e24 <_Min_Stack_Size+0x143c24>
    3e20:	00000000 	andeq	r0, r0, r0
    3e24:	000006dc 	ldrdeq	r0, [r0], -ip
    3e28:	0ff20004 	svceq	0x00f20004
    3e2c:	01040000 	mrseq	r0, (UNDEF: 4)
    3e30:	00000111 	andeq	r0, r0, r1, lsl r1
    3e34:	001d760c 	andseq	r7, sp, ip, lsl #12
    3e38:	00048000 	andeq	r8, r4, r0
    3e3c:	00000000 	andeq	r0, r0, r0
    3e40:	001f4a00 	andseq	r4, pc, r0, lsl #20
    3e44:	06010200 	streq	r0, [r1], -r0, lsl #4
    3e48:	00000192 	muleq	r0, r2, r1
    3e4c:	0000e303 	andeq	lr, r0, r3, lsl #6
    3e50:	331d0200 	tstcc	sp, #0, 4
    3e54:	02000000 	andeq	r0, r0, #0
    3e58:	01900801 	orrseq	r0, r0, r1, lsl #16
    3e5c:	02020000 	andeq	r0, r2, #0
    3e60:	00009505 	andeq	r9, r0, r5, lsl #10
    3e64:	00720300 	rsbseq	r0, r2, r0, lsl #6
    3e68:	2b020000 	blcs	83e70 <_Min_Stack_Size+0x83c70>
    3e6c:	0000004c 	andeq	r0, r0, ip, asr #32
    3e70:	f2070202 	vhsub.s8	d0, d7, d2
    3e74:	02000001 	andeq	r0, r0, #1
    3e78:	00bd0504 	adcseq	r0, sp, r4, lsl #10
    3e7c:	67030000 	strvs	r0, [r3, -r0]
    3e80:	02000000 	andeq	r0, r0, #0
    3e84:	00006541 	andeq	r6, r0, r1, asr #10
    3e88:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3e8c:	000001c9 	andeq	r0, r0, r9, asr #3
    3e90:	b8050802 	stmdalt	r5, {r1, fp}
    3e94:	02000000 	andeq	r0, r0, #0
    3e98:	01c40708 	biceq	r0, r4, r8, lsl #14
    3e9c:	04040000 	streq	r0, [r4], #-0
    3ea0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    3ea4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3ea8:	000001ce 	andeq	r0, r0, lr, asr #3
    3eac:	0000e503 	andeq	lr, r0, r3, lsl #10
    3eb0:	28180300 	ldmdacs	r8, {r8, r9}
    3eb4:	03000000 	movweq	r0, #0
    3eb8:	00000074 	andeq	r0, r0, r4, ror r0
    3ebc:	00412403 	subeq	r2, r1, r3, lsl #8
    3ec0:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
    3ec4:	03000000 	movweq	r0, #0
    3ec8:	00005a30 	andeq	r5, r0, r0, lsr sl
    3ecc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3ed0:	00000059 	andeq	r0, r0, r9, asr r0
    3ed4:	00009e05 	andeq	r9, r0, r5, lsl #28
    3ed8:	38750600 	ldmdacc	r5!, {r9, sl}^
    3edc:	01f90400 	mvnseq	r0, r0, lsl #8
    3ee0:	00000088 	andeq	r0, r0, r8, lsl #1
    3ee4:	00330107 	eorseq	r0, r3, r7, lsl #2
    3ee8:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    3eec:	0000da02 	andeq	sp, r0, r2, lsl #20
    3ef0:	02f00800 	rscseq	r0, r0, #0, 16
    3ef4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3ef8:	00000462 	andeq	r0, r0, r2, ror #8
    3efc:	d4090001 	strle	r0, [r9], #-1
    3f00:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    3f04:	00c00209 	sbceq	r0, r0, r9, lsl #4
    3f08:	1c0a0000 	stcne	0, cr0, [sl], {-0}
    3f0c:	4b03e904 	blmi	fe324 <_Min_Stack_Size+0xfe124>
    3f10:	0b000001 	bleq	3f1c <_Min_Stack_Size+0x3d1c>
    3f14:	004c5243 	subeq	r5, ip, r3, asr #4
    3f18:	b003eb04 	andlt	lr, r3, r4, lsl #22
    3f1c:	00000000 	andeq	r0, r0, r0
    3f20:	4852430b 	ldmdami	r2, {r0, r1, r3, r8, r9, lr}^
    3f24:	03ec0400 	mvneq	r0, #0, 8
    3f28:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    3f2c:	44490b04 	strbmi	r0, [r9], #-2820	; 0xfffff4fc
    3f30:	ed040052 	stc	0, cr0, [r4, #-328]	; 0xfffffeb8
    3f34:	0000b003 	andeq	fp, r0, r3
    3f38:	4f0b0800 	svcmi	0x000b0800
    3f3c:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
    3f40:	00b003ee 	adcseq	r0, r0, lr, ror #7
    3f44:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    3f48:	00001d04 	andeq	r1, r0, r4, lsl #26
    3f4c:	b003ef04 	andlt	lr, r3, r4, lsl #30
    3f50:	10000000 	andne	r0, r0, r0
    3f54:	5252420b 	subspl	r4, r2, #-1342177280	; 0xb0000000
    3f58:	03f00400 	mvnseq	r0, #0, 8
    3f5c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    3f60:	1dd50c14 	ldclne	12, cr0, [r5, #80]	; 0x50
    3f64:	f1040000 	cps	#0
    3f68:	0000b003 	andeq	fp, r0, r3
    3f6c:	09001800 	stmdbeq	r0, {fp, ip}
    3f70:	00001bfc 	strdeq	r1, [r0], -ip
    3f74:	e603f204 	str	pc, [r3], -r4, lsl #4
    3f78:	0a000000 	beq	3f80 <_Min_Stack_Size+0x3d80>
    3f7c:	03f80420 	mvnseq	r0, #32, 8	; 0x20000000
    3f80:	000001a2 	andeq	r0, r0, r2, lsr #3
    3f84:	001ecc0c 	andseq	ip, lr, ip, lsl #24
    3f88:	03fa0400 	mvnseq	r0, #0, 8
    3f8c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    3f90:	1ea00c00 	cdpne	12, 10, cr0, cr0, cr0, {0}
    3f94:	fb040000 	blx	103f9e <_Min_Stack_Size+0x103d9e>
    3f98:	0000b003 	andeq	fp, r0, r3
    3f9c:	c20c0400 	andgt	r0, ip, #0, 8
    3fa0:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    3fa4:	01b203fc 			; <UNDEFINED> instruction: 0x01b203fc
    3fa8:	0c080000 	stceq	0, cr0, [r8], {-0}
    3fac:	000003c2 	andeq	r0, r0, r2, asr #7
    3fb0:	9e03fd04 	cdpls	13, 0, cr15, cr3, cr4, {0}
    3fb4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3fb8:	001e4e0c 	andseq	r4, lr, ip, lsl #28
    3fbc:	03fe0400 	mvnseq	r0, #0, 8
    3fc0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    3fc4:	b00d001c 	andlt	r0, sp, ip, lsl r0
    3fc8:	b2000000 	andlt	r0, r0, #0
    3fcc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    3fd0:	000000a9 	andeq	r0, r0, r9, lsr #1
    3fd4:	a2050003 	andge	r0, r5, #3
    3fd8:	09000001 	stmdbeq	r0, {r0}
    3fdc:	00001e77 	andeq	r1, r0, r7, ror lr
    3fe0:	5703ff04 	strpl	pc, [r3, -r4, lsl #30]
    3fe4:	0f000001 	svceq	0x00000001
    3fe8:	00003301 	andeq	r3, r0, r1, lsl #6
    3fec:	e23b0500 	eors	r0, fp, #0, 10
    3ff0:	08000001 	stmdaeq	r0, {r0}
    3ff4:	00001d1f 	andeq	r1, r0, pc, lsl sp
    3ff8:	1d550801 	ldclne	8, cr0, [r5, #-4]
    3ffc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4000:	00001ed1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    4004:	8e030003 	cdphi	0, 0, cr0, cr3, cr3, {0}
    4008:	0500001e 	streq	r0, [r0, #-30]	; 0xffffffe2
    400c:	0001c33f 	andeq	ip, r1, pc, lsr r3
    4010:	33010f00 	movwcc	r0, #7936	; 0x1f00
    4014:	05000000 	streq	r0, [r0, #-0]
    4018:	00022a48 	andeq	r2, r2, r8, asr #20
    401c:	1e540800 	cdpne	8, 5, cr0, cr4, cr0, {0}
    4020:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4024:	00001f02 	andeq	r1, r0, r2, lsl #30
    4028:	1e040804 	cdpne	8, 0, cr0, cr4, cr4, {0}
    402c:	08280000 	stmdaeq	r8!, {}	; <UNPREDICTABLE>
    4030:	00001e3b 	andeq	r1, r0, fp, lsr lr
    4034:	1d300848 	ldcne	8, cr0, [r0, #-288]!	; 0xfffffee0
    4038:	08140000 	ldmdaeq	r4, {}	; <UNPREDICTABLE>
    403c:	00001ebb 			; <UNDEFINED> instruction: 0x00001ebb
    4040:	1f3f0810 	svcne	0x003f0810
    4044:	081c0000 	ldmdaeq	ip, {}	; <UNPREDICTABLE>
    4048:	00001c35 	andeq	r1, r0, r5, lsr ip
    404c:	e2030018 	and	r0, r3, #24
    4050:	0500001e 	streq	r0, [r0, #-30]	; 0xffffffe2
    4054:	0001ed50 	andeq	lr, r1, r0, asr sp
    4058:	05041000 	streq	r1, [r4, #-0]
    405c:	0002625b 	andeq	r6, r2, fp, asr r2
    4060:	1c101100 	ldfnes	f1, [r0], {-0}
    4064:	5d050000 	stcpl	0, cr0, [r5, #-0]
    4068:	00000093 	muleq	r0, r3, r0
    406c:	1cad1100 	stfnes	f1, [sp]
    4070:	60050000 	andvs	r0, r5, r0
    4074:	000001e2 	andeq	r0, r0, r2, ror #3
    4078:	1e6d1102 	pownee	f1, f5, f2
    407c:	63050000 	movwvs	r0, #20480	; 0x5000
    4080:	0000022a 	andeq	r0, r0, sl, lsr #4
    4084:	65030003 	strvs	r0, [r3, #-3]
    4088:	0500001d 	streq	r0, [r0, #-29]	; 0xffffffe3
    408c:	00023565 	andeq	r3, r2, r5, ror #10
    4090:	33010f00 	movwcc	r0, #7936	; 0x1f00
    4094:	05000000 	streq	r0, [r0, #-0]
    4098:	0002866d 	andeq	r8, r2, sp, ror #12
    409c:	1c700800 	ldclne	8, cr0, [r0], #-0
    40a0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    40a4:	00001c19 	andeq	r1, r0, r9, lsl ip
    40a8:	84030001 	strhi	r0, [r3], #-1
    40ac:	0500001e 	streq	r0, [r0, #-30]	; 0xffffffe2
    40b0:	00026d6f 	andeq	r6, r2, pc, ror #26
    40b4:	1ce11200 	sfmne	f1, 2, [r1]
    40b8:	6c010000 	stcvs	0, cr0, [r1], {-0}
    40bc:	00000000 	andeq	r0, r0, r0
    40c0:	000000e4 	andeq	r0, r0, r4, ror #1
    40c4:	02b59c01 	adcseq	r9, r5, #256	; 0x100
    40c8:	a5130000 	ldrge	r0, [r3, #-0]
    40cc:	0100001e 	tsteq	r0, lr, lsl r0
    40d0:	0002b56c 	andeq	fp, r2, ip, ror #10
    40d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    40d8:	4b041400 	blmi	1090e0 <_Min_Stack_Size+0x108ee0>
    40dc:	15000001 	strne	r0, [r0, #-1]
    40e0:	00001f2f 	andeq	r1, r0, pc, lsr #30
    40e4:	00009f01 	andeq	r9, r0, r1, lsl #30
    40e8:	00180000 	andseq	r0, r8, r0
    40ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    40f0:	001cb816 	andseq	fp, ip, r6, lsl r8
    40f4:	e8ad0100 	stmia	sp!, {r8}
    40f8:	7808005c 	stmdavc	r8, {r2, r3, r4, r6}
    40fc:	01000001 	tsteq	r0, r1
    4100:	0003529c 	muleq	r3, ip, r2
    4104:	1ea51300 	cdpne	3, 10, cr1, cr5, cr0, {0}
    4108:	ad010000 	stcge	0, cr0, [r1, #-0]
    410c:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    4110:	135c9102 	cmpne	ip, #-2147483648	; 0x80000000
    4114:	00001eab 	andeq	r1, r0, fp, lsr #29
    4118:	0352ad01 	cmpeq	r2, #1, 26	; 0x40
    411c:	91020000 	mrsls	r0, (UNDEF: 2)
    4120:	1db51758 	ldcne	7, cr1, [r5, #352]!	; 0x160
    4124:	af010000 	svcge	0x00010000
    4128:	0000009e 	muleq	r0, lr, r0
    412c:	17749102 	ldrbne	r9, [r4, -r2, lsl #2]!
    4130:	00001e25 	andeq	r1, r0, r5, lsr #28
    4134:	009eaf01 	addseq	sl, lr, r1, lsl #30
    4138:	91020000 	mrsls	r0, (UNDEF: 2)
    413c:	1c091768 	stcne	7, cr1, [r9], {104}	; 0x68
    4140:	af010000 	svcge	0x00010000
    4144:	0000009e 	muleq	r0, lr, r0
    4148:	18709102 	ldmdane	r0!, {r1, r8, ip, pc}^
    414c:	00736f70 	rsbseq	r6, r3, r0, ror pc
    4150:	009eaf01 	addseq	sl, lr, r1, lsl #30
    4154:	91020000 	mrsls	r0, (UNDEF: 2)
    4158:	19a71764 	stmibne	r7!, {r2, r5, r6, r8, r9, sl, ip}
    415c:	b0010000 	andlt	r0, r1, r0
    4160:	0000009e 	muleq	r0, lr, r0
    4164:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    4168:	00001cc9 	andeq	r1, r0, r9, asr #25
    416c:	009eb001 	addseq	fp, lr, r1
    4170:	91020000 	mrsls	r0, (UNDEF: 2)
    4174:	04140060 	ldreq	r0, [r4], #-96	; 0xffffffa0
    4178:	00000262 	andeq	r0, r0, r2, ror #4
    417c:	001c5919 	andseq	r5, ip, r9, lsl r9
    4180:	010a0100 	mrseq	r0, (UNDEF: 26)
    4184:	00000000 	andeq	r0, r0, r0
    4188:	00000026 	andeq	r0, r0, r6, lsr #32
    418c:	037e9c01 	cmneq	lr, #256	; 0x100
    4190:	ab1a0000 	blge	684198 <_Min_Stack_Size+0x683f98>
    4194:	0100001e 	tsteq	r0, lr, lsl r0
    4198:	0352010a 	cmpeq	r2, #-2147483646	; 0x80000002
    419c:	91020000 	mrsls	r0, (UNDEF: 2)
    41a0:	091b0074 	ldmdbeq	fp, {r2, r4, r5, r6}
    41a4:	0100001d 	tsteq	r0, sp, lsl r0
    41a8:	00880119 	addeq	r0, r8, r9, lsl r1
    41ac:	00000000 	andeq	r0, r0, r0
    41b0:	00320000 	eorseq	r0, r2, r0
    41b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    41b8:	000003c6 	andeq	r0, r0, r6, asr #7
    41bc:	001ea51a 	andseq	sl, lr, sl, lsl r5
    41c0:	01190100 	tsteq	r9, r0, lsl #2
    41c4:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    41c8:	1a6c9102 	bne	1b285d8 <_Min_Stack_Size+0x1b283d8>
    41cc:	00001c10 	andeq	r1, r0, r0, lsl ip
    41d0:	93011901 	movwls	r1, #6401	; 0x1901
    41d4:	02000000 	andeq	r0, r0, #0
    41d8:	ae1c6a91 			; <UNDEFINED> instruction: 0xae1c6a91
    41dc:	01000019 	tsteq	r0, r9, lsl r0
    41e0:	0088011b 	addeq	r0, r8, fp, lsl r1
    41e4:	91020000 	mrsls	r0, (UNDEF: 2)
    41e8:	e91b0077 	ldmdb	fp, {r0, r1, r2, r4, r5, r6}
    41ec:	0100001d 	tsteq	r0, sp, lsl r0
    41f0:	00930131 	addseq	r0, r3, r1, lsr r1
    41f4:	00000000 	andeq	r0, r0, r0
    41f8:	00180000 	andseq	r0, r8, r0
    41fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    4200:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4204:	001ea51a 	andseq	sl, lr, sl, lsl r5
    4208:	01310100 	teqeq	r1, r0, lsl #2
    420c:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    4210:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4214:	001f181b 	andseq	r1, pc, fp, lsl r8	; <UNPREDICTABLE>
    4218:	01400100 	mrseq	r0, (UNDEF: 80)
    421c:	00000088 	andeq	r0, r0, r8, lsl #1
    4220:	00000000 	andeq	r0, r0, r0
    4224:	00000032 	andeq	r0, r0, r2, lsr r0
    4228:	04389c01 	ldrteq	r9, [r8], #-3073	; 0xfffff3ff
    422c:	a51a0000 	ldrge	r0, [sl, #-0]
    4230:	0100001e 	tsteq	r0, lr, lsl r0
    4234:	02b50140 	adcseq	r0, r5, #64, 2
    4238:	91020000 	mrsls	r0, (UNDEF: 2)
    423c:	1c101a6c 			; <UNDEFINED> instruction: 0x1c101a6c
    4240:	40010000 	andmi	r0, r1, r0
    4244:	00009301 	andeq	r9, r0, r1, lsl #6
    4248:	6a910200 	bvs	fe444a50 <BootRAM+0xd3b51f1>
    424c:	0019ae1c 	andseq	sl, r9, ip, lsl lr
    4250:	01420100 	mrseq	r0, (UNDEF: 82)
    4254:	00000088 	andeq	r0, r0, r8, lsl #1
    4258:	00779102 	rsbseq	r9, r7, r2, lsl #2
    425c:	001c211b 	andseq	r2, ip, fp, lsl r1
    4260:	01570100 	cmpeq	r7, r0, lsl #2
    4264:	00000093 	muleq	r0, r3, r0
    4268:	00000000 	andeq	r0, r0, r0
    426c:	00000018 	andeq	r0, r0, r8, lsl r0
    4270:	04629c01 	strbteq	r9, [r2], #-3073	; 0xfffff3ff
    4274:	a51a0000 	ldrge	r0, [sl, #-0]
    4278:	0100001e 	tsteq	r0, lr, lsl r0
    427c:	02b50157 	adcseq	r0, r5, #-1073741803	; 0xc0000015
    4280:	91020000 	mrsls	r0, (UNDEF: 2)
    4284:	a0190074 	andsge	r0, r9, r4, ror r0
    4288:	0100001c 	tsteq	r0, ip, lsl r0
    428c:	5e600166 	powplsz	f0, f0, f6
    4290:	001c0800 	andseq	r0, ip, r0, lsl #16
    4294:	9c010000 	stcls	0, cr0, [r1], {-0}
    4298:	00000497 	muleq	r0, r7, r4
    429c:	001ea51a 	andseq	sl, lr, sl, lsl r5
    42a0:	01660100 	cmneq	r6, r0, lsl #2
    42a4:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    42a8:	1a749102 	bne	1d286b8 <_Min_Stack_Size+0x1d284b8>
    42ac:	00001c10 	andeq	r1, r0, r0, lsl ip
    42b0:	93016601 	movwls	r6, #5633	; 0x1601
    42b4:	02000000 	andeq	r0, r0, #0
    42b8:	19007291 	stmdbne	r0, {r0, r4, r7, r9, ip, sp, lr}
    42bc:	00001ef3 	strdeq	r1, [r0], -r3
    42c0:	7c017601 	stcvc	6, cr7, [r1], {1}
    42c4:	1c08005e 	stcne	0, cr0, [r8], {94}	; 0x5e
    42c8:	01000000 	mrseq	r0, (UNDEF: 0)
    42cc:	0004cc9c 	muleq	r4, ip, ip
    42d0:	1ea51a00 	vfmane.f32	s2, s10, s0
    42d4:	76010000 	strvc	r0, [r1], -r0
    42d8:	0002b501 	andeq	fp, r2, r1, lsl #10
    42dc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    42e0:	001c101a 	andseq	r1, ip, sl, lsl r0
    42e4:	01760100 	cmneq	r6, r0, lsl #2
    42e8:	00000093 	muleq	r0, r3, r0
    42ec:	00729102 	rsbseq	r9, r2, r2, lsl #2
    42f0:	001c7a19 	andseq	r7, ip, r9, lsl sl
    42f4:	018a0100 	orreq	r0, sl, r0, lsl #2
    42f8:	00000000 	andeq	r0, r0, r0
    42fc:	0000002e 	andeq	r0, r0, lr, lsr #32
    4300:	05109c01 	ldreq	r9, [r0, #-3073]	; 0xfffff3ff
    4304:	a51a0000 	ldrge	r0, [sl, #-0]
    4308:	0100001e 	tsteq	r0, lr, lsl r0
    430c:	02b5018a 	adcseq	r0, r5, #-2147483614	; 0x80000022
    4310:	91020000 	mrsls	r0, (UNDEF: 2)
    4314:	1c101a74 			; <UNDEFINED> instruction: 0x1c101a74
    4318:	8a010000 	bhi	44320 <_Min_Stack_Size+0x44120>
    431c:	00009301 	andeq	r9, r0, r1, lsl #6
    4320:	72910200 	addsvc	r0, r1, #0, 4
    4324:	001c691a 	andseq	r6, ip, sl, lsl r9
    4328:	018a0100 	orreq	r0, sl, r0, lsl #2
    432c:	00000286 	andeq	r0, r0, r6, lsl #5
    4330:	00719102 	rsbseq	r9, r1, r2, lsl #2
    4334:	001e3019 	andseq	r3, lr, r9, lsl r0
    4338:	01a10100 			; <UNDEFINED> instruction: 0x01a10100
    433c:	00000000 	andeq	r0, r0, r0
    4340:	0000001c 	andeq	r0, r0, ip, lsl r0
    4344:	05459c01 	strbeq	r9, [r5, #-3073]	; 0xfffff3ff
    4348:	a51a0000 	ldrge	r0, [sl, #-0]
    434c:	0100001e 	tsteq	r0, lr, lsl r0
    4350:	02b501a1 	adcseq	r0, r5, #1073741864	; 0x40000028
    4354:	91020000 	mrsls	r0, (UNDEF: 2)
    4358:	1dad1a74 			; <UNDEFINED> instruction: 0x1dad1a74
    435c:	a1010000 	mrsge	r0, (UNDEF: 1)
    4360:	00009301 	andeq	r9, r0, r1, lsl #6
    4364:	72910200 	addsvc	r0, r1, #0, 4
    4368:	1e121900 	vnmlsne.f16	s2, s4, s0	; <UNPREDICTABLE>
    436c:	b0010000 	andlt	r0, r1, r0
    4370:	00000001 	andeq	r0, r0, r1
    4374:	00004200 	andeq	r4, r0, r0, lsl #4
    4378:	899c0100 	ldmibhi	ip, {r8}
    437c:	1a000005 	bne	4398 <_Min_Stack_Size+0x4198>
    4380:	00001ea5 	andeq	r1, r0, r5, lsr #29
    4384:	b501b001 	strlt	fp, [r1, #-1]
    4388:	02000002 	andeq	r0, r0, #2
    438c:	101a6c91 	mulsne	sl, r1, ip
    4390:	0100001c 	tsteq	r0, ip, lsl r0
    4394:	009301b0 			; <UNDEFINED> instruction: 0x009301b0
    4398:	91020000 	mrsls	r0, (UNDEF: 2)
    439c:	6d741d6a 	ldclvs	13, cr1, [r4, #-424]!	; 0xfffffe58
    43a0:	b2010070 	andlt	r0, r1, #112	; 0x70
    43a4:	00009e01 	andeq	r9, r0, r1, lsl #28
    43a8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    43ac:	1ced1900 			; <UNDEFINED> instruction: 0x1ced1900
    43b0:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    43b4:	00000001 	andeq	r0, r0, r1
    43b8:	00004c00 	andeq	r4, r0, r0, lsl #24
    43bc:	cd9c0100 	ldfgts	f0, [ip]
    43c0:	1a000005 	bne	43dc <_Min_Stack_Size+0x41dc>
    43c4:	00001cd1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    43c8:	8801ce01 	stmdahi	r1, {r0, r9, sl, fp, lr, pc}
    43cc:	02000000 	andeq	r0, r0, #0
    43d0:	da1a6f91 	ble	6a021c <_Min_Stack_Size+0x6a001c>
    43d4:	0100001d 	tsteq	r0, sp, lsl r0
    43d8:	008801ce 	addeq	r0, r8, lr, asr #3
    43dc:	91020000 	mrsls	r0, (UNDEF: 2)
    43e0:	19a71c6e 	stmibne	r7!, {r1, r2, r3, r5, r6, sl, fp, ip}
    43e4:	d0010000 	andle	r0, r1, r0
    43e8:	00009e01 	andeq	r9, r0, r1, lsl #28
    43ec:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    43f0:	1c451900 	mcrrne	9, 0, r1, r5, cr0	; <UNPREDICTABLE>
    43f4:	e3010000 	movw	r0, #4096	; 0x1000
    43f8:	00000001 	andeq	r0, r0, r1
    43fc:	00002000 	andeq	r2, r0, r0
    4400:	f39c0100 	vaddw.u16	q0, q6, d0
    4404:	1a000005 	bne	4420 <_Min_Stack_Size+0x4220>
    4408:	00001713 	andeq	r1, r0, r3, lsl r7
    440c:	da01e301 	ble	7d018 <_Min_Stack_Size+0x7ce18>
    4410:	02000000 	andeq	r0, r0, #0
    4414:	19007791 	stmdbne	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    4418:	00001dc1 	andeq	r1, r0, r1, asr #27
    441c:	00022501 	andeq	r2, r2, r1, lsl #10
    4420:	e0000000 	and	r0, r0, r0
    4424:	01000000 	mrseq	r0, (UNDEF: 0)
    4428:	0006649c 	muleq	r6, ip, r4
    442c:	1e621a00 	vmulne.f32	s3, s4, s0
    4430:	25010000 	strcs	r0, [r1, #-0]
    4434:	00009e02 	andeq	r9, r0, r2, lsl #28
    4438:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    443c:	0017131a 	andseq	r1, r7, sl, lsl r3
    4440:	02250100 	eoreq	r0, r5, #0, 2
    4444:	000000da 	ldrdeq	r0, [r0], -sl
    4448:	1d639102 	stfnep	f1, [r3, #-8]!
    444c:	00706d74 	rsbseq	r6, r0, r4, ror sp
    4450:	9e022701 	cdpls	7, 0, cr2, cr2, cr1, {0}
    4454:	02000000 	andeq	r0, r0, #0
    4458:	491c7091 	ldmdbmi	ip, {r0, r4, r7, ip, sp, lr}
    445c:	0100001e 	tsteq	r0, lr, lsl r0
    4460:	009e0227 	addseq	r0, lr, r7, lsr #4
    4464:	91020000 	mrsls	r0, (UNDEF: 2)
    4468:	19a71c6c 	stmibne	r7!, {r2, r3, r5, r6, sl, fp, ip}
    446c:	27010000 	strcs	r0, [r1, -r0]
    4470:	00009e02 	andeq	r9, r0, r2, lsl #28
    4474:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4478:	001dfc1c 	andseq	pc, sp, ip, lsl ip	; <UNPREDICTABLE>
    447c:	02270100 	eoreq	r0, r7, #0, 2
    4480:	0000009e 	muleq	r0, lr, r0
    4484:	00689102 	rsbeq	r9, r8, r2, lsl #2
    4488:	001d4119 	andseq	r4, sp, r9, lsl r1
    448c:	02610100 	rsbeq	r0, r1, #0, 2
    4490:	00000000 	andeq	r0, r0, r0
    4494:	00000084 	andeq	r0, r0, r4, lsl #1
    4498:	06a89c01 	strteq	r9, [r8], r1, lsl #24
    449c:	d11a0000 	tstle	sl, r0
    44a0:	0100001c 	tsteq	r0, ip, lsl r0
    44a4:	00880261 	addeq	r0, r8, r1, ror #4
    44a8:	91020000 	mrsls	r0, (UNDEF: 2)
    44ac:	1dda1a6f 	vldrne	s3, [sl, #444]	; 0x1bc
    44b0:	61010000 	mrsvs	r0, (UNDEF: 1)
    44b4:	00008802 	andeq	r8, r0, r2, lsl #16
    44b8:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    44bc:	706d741d 	rsbvc	r7, sp, sp, lsl r4
    44c0:	02630100 	rsbeq	r0, r3, #0, 2
    44c4:	0000009e 	muleq	r0, lr, r0
    44c8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    44cc:	001f4f19 	andseq	r4, pc, r9, lsl pc	; <UNPREDICTABLE>
    44d0:	02760100 	rsbseq	r0, r6, #0, 2
    44d4:	00000000 	andeq	r0, r0, r0
    44d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    44dc:	06ce9c01 	strbeq	r9, [lr], r1, lsl #24
    44e0:	881a0000 	ldmdahi	sl, {}	; <UNPREDICTABLE>
    44e4:	0100001c 	tsteq	r0, ip, lsl r0
    44e8:	009e0276 	addseq	r0, lr, r6, ror r2
    44ec:	91020000 	mrsls	r0, (UNDEF: 2)
    44f0:	6c1e0074 	ldcvs	0, cr0, [lr], {116}	; 0x74
    44f4:	06000002 	streq	r0, [r0], -r2
    44f8:	06da06ce 	ldrbeq	r0, [sl], lr, asr #13
    44fc:	7a050000 	bvc	144504 <_Min_Stack_Size+0x144304>
    4500:	00000000 	andeq	r0, r0, r0
    4504:	000008e1 	andeq	r0, r0, r1, ror #17
    4508:	11be0004 			; <UNDEFINED> instruction: 0x11be0004
    450c:	01040000 	mrseq	r0, (UNDEF: 4)
    4510:	00000111 	andeq	r0, r0, r1, lsl r1
    4514:	0022500c 	eoreq	r5, r2, ip
    4518:	00051800 	andeq	r1, r5, r0, lsl #16
    451c:	00000000 	andeq	r0, r0, r0
    4520:	0022a200 	eoreq	sl, r2, r0, lsl #4
    4524:	06010200 	streq	r0, [r1], -r0, lsl #4
    4528:	00000192 	muleq	r0, r2, r1
    452c:	0000e303 	andeq	lr, r0, r3, lsl #6
    4530:	331d0200 	tstcc	sp, #0, 4
    4534:	02000000 	andeq	r0, r0, #0
    4538:	01900801 	orrseq	r0, r0, r1, lsl #16
    453c:	02020000 	andeq	r0, r2, #0
    4540:	00009505 	andeq	r9, r0, r5, lsl #10
    4544:	00720300 	rsbseq	r0, r2, r0, lsl #6
    4548:	2b020000 	blcs	84550 <_Min_Stack_Size+0x84350>
    454c:	0000004c 	andeq	r0, r0, ip, asr #32
    4550:	f2070202 	vhsub.s8	d0, d7, d2
    4554:	02000001 	andeq	r0, r0, #1
    4558:	00bd0504 	adcseq	r0, sp, r4, lsl #10
    455c:	67030000 	strvs	r0, [r3, -r0]
    4560:	02000000 	andeq	r0, r0, #0
    4564:	00006541 	andeq	r6, r0, r1, asr #10
    4568:	07040200 	streq	r0, [r4, -r0, lsl #4]
    456c:	000001c9 	andeq	r0, r0, r9, asr #3
    4570:	b8050802 	stmdalt	r5, {r1, fp}
    4574:	02000000 	andeq	r0, r0, #0
    4578:	01c40708 	biceq	r0, r4, r8, lsl #14
    457c:	04040000 	streq	r0, [r4], #-0
    4580:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4584:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4588:	000001ce 	andeq	r0, r0, lr, asr #3
    458c:	0000e503 	andeq	lr, r0, r3, lsl #10
    4590:	28180300 	ldmdacs	r8, {r8, r9}
    4594:	03000000 	movweq	r0, #0
    4598:	00000074 	andeq	r0, r0, r4, ror r0
    459c:	00412403 	subeq	r2, r1, r3, lsl #8
    45a0:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
    45a4:	03000000 	movweq	r0, #0
    45a8:	00005a30 	andeq	r5, r0, r0, lsr sl
    45ac:	07040200 	streq	r0, [r4, -r0, lsl #4]
    45b0:	00000059 	andeq	r0, r0, r9, asr r0
    45b4:	00009305 	andeq	r9, r0, r5, lsl #6
    45b8:	33010600 	movwcc	r0, #5632	; 0x1600
    45bc:	04000000 	streq	r0, [r0], #-0
    45c0:	00cf0207 	sbceq	r0, pc, r7, lsl #4
    45c4:	74070000 	strvc	r0, [r7], #-0
    45c8:	0000001c 	andeq	r0, r0, ip, lsl r0
    45cc:	54455308 	strbpl	r5, [r5], #-776	; 0xfffffcf8
    45d0:	09000100 	stmdbeq	r0, {r8}
    45d4:	00002e77 	andeq	r2, r0, r7, ror lr
    45d8:	b5020704 	strlt	r0, [r2, #-1796]	; 0xfffff8fc
    45dc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    45e0:	00002f95 	muleq	r0, r5, pc	; <UNPREDICTABLE>
    45e4:	b5020704 	strlt	r0, [r2, #-1796]	; 0xfffff8fc
    45e8:	06000000 	streq	r0, [r0], -r0
    45ec:	00003301 	andeq	r3, r0, r1, lsl #6
    45f0:	02090400 	andeq	r0, r9, #0, 8
    45f4:	00000101 	andeq	r0, r0, r1, lsl #2
    45f8:	0002f007 	andeq	pc, r2, r7
    45fc:	62070000 	andvs	r0, r7, #0
    4600:	01000004 	tsteq	r0, r4
    4604:	17d40900 	ldrbne	r0, [r4, r0, lsl #18]
    4608:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    460c:	0000e702 	andeq	lr, r0, r2, lsl #14
    4610:	04240a00 	strteq	r0, [r4], #-2560	; 0xfffff600
    4614:	01ff0488 	mvnseq	r0, r8, lsl #9
    4618:	430b0000 	movwmi	r0, #45056	; 0xb000
    461c:	04003152 	streq	r3, [r0], #-338	; 0xfffffeae
    4620:	00b0048a 	adcseq	r0, r0, sl, lsl #9
    4624:	0c000000 	stceq	0, cr0, [r0], {-0}
    4628:	000003c2 	andeq	r0, r0, r2, asr #7
    462c:	93048b04 	movwls	r8, #19204	; 0x4b04
    4630:	02000000 	andeq	r0, r0, #0
    4634:	3252430b 	subscc	r4, r2, #738197504	; 0x2c000000
    4638:	048c0400 	streq	r0, [ip], #1024	; 0x400
    463c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    4640:	03cc0c04 	biceq	r0, ip, #4, 24	; 0x400
    4644:	8d040000 	stchi	0, cr0, [r4, #-0]
    4648:	00009304 	andeq	r9, r0, r4, lsl #6
    464c:	530b0600 	movwpl	r0, #46592	; 0xb600
    4650:	8e040052 	mcrhi	0, 0, r0, cr4, cr2, {2}
    4654:	0000b004 	andeq	fp, r0, r4
    4658:	d60c0800 	strle	r0, [ip], -r0, lsl #16
    465c:	04000003 	streq	r0, [r0], #-3
    4660:	0093048f 	addseq	r0, r3, pc, lsl #9
    4664:	0b0a0000 	bleq	28466c <_Min_Stack_Size+0x28446c>
    4668:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
    466c:	00b00490 	umlalseq	r0, r0, r0, r4	; <UNPREDICTABLE>
    4670:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    4674:	000002ab 	andeq	r0, r0, fp, lsr #5
    4678:	93049104 	movwls	r9, #16644	; 0x4104
    467c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4680:	00218f0c 	eoreq	r8, r1, ip, lsl #30
    4684:	04920400 	ldreq	r0, [r2], #1024	; 0x400
    4688:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    468c:	03ea0c10 	mvneq	r0, #16, 24	; 0x1000
    4690:	93040000 	movwls	r0, #16384	; 0x4000
    4694:	00009304 	andeq	r9, r0, r4, lsl #6
    4698:	460c1200 	strmi	r1, [ip], -r0, lsl #4
    469c:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    46a0:	00b00494 	umlalseq	r0, r0, r4, r4	; <UNPREDICTABLE>
    46a4:	0c140000 	ldceq	0, cr0, [r4], {-0}
    46a8:	000003f4 	strdeq	r0, [r0], -r4
    46ac:	93049504 	movwls	r9, #17668	; 0x4504
    46b0:	16000000 	strne	r0, [r0], -r0
    46b4:	0020290c 	eoreq	r2, r0, ip, lsl #18
    46b8:	04960400 	ldreq	r0, [r6], #1024	; 0x400
    46bc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    46c0:	02d70c18 	sbcseq	r0, r7, #24, 24	; 0x1800
    46c4:	97040000 	strls	r0, [r4, -r0]
    46c8:	00009304 	andeq	r9, r0, r4, lsl #6
    46cc:	630c1a00 	movwvs	r1, #51712	; 0xca00
    46d0:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    46d4:	00b00498 	umlalseq	r0, r0, r8, r4	; <UNPREDICTABLE>
    46d8:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    46dc:	00000415 	andeq	r0, r0, r5, lsl r4
    46e0:	93049904 	movwls	r9, #18692	; 0x4904
    46e4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    46e8:	0022a70c 	eoreq	sl, r2, ip, lsl #14
    46ec:	049a0400 	ldreq	r0, [sl], #1024	; 0x400
    46f0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    46f4:	041f0c20 	ldreq	r0, [pc], #-3104	; 46fc <_Min_Stack_Size+0x44fc>
    46f8:	9b040000 	blls	104700 <_Min_Stack_Size+0x104500>
    46fc:	00009304 	andeq	r9, r0, r4, lsl #6
    4700:	09002200 	stmdbeq	r0, {r9, sp}
    4704:	0000219e 	muleq	r0, lr, r1
    4708:	0d049c04 	stceq	12, cr9, [r4, #-16]
    470c:	0d000001 	stceq	0, cr0, [r0, #-4]
    4710:	502e0514 	eorpl	r0, lr, r4, lsl r5
    4714:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    4718:	00001a80 	andeq	r1, r0, r0, lsl #21
    471c:	009e3005 	addseq	r3, lr, r5
    4720:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4724:	000018d2 	ldrdeq	r1, [r0], -r2
    4728:	009e3105 	addseq	r3, lr, r5, lsl #2
    472c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    4730:	00001ae9 	andeq	r1, r0, r9, ror #21
    4734:	009e3205 	addseq	r3, lr, r5, lsl #4
    4738:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    473c:	00001a9c 	muleq	r0, ip, sl
    4740:	009e3305 	addseq	r3, lr, r5, lsl #6
    4744:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    4748:	00001a61 	andeq	r1, r0, r1, ror #20
    474c:	009e3405 	addseq	r3, lr, r5, lsl #8
    4750:	00100000 	andseq	r0, r0, r0
    4754:	00189f03 	andseq	r9, r8, r3, lsl #30
    4758:	0b350500 	bleq	d45b60 <_Min_Stack_Size+0xd45960>
    475c:	0d000002 	stceq	0, cr0, [r0, #-8]
    4760:	d0320612 	eorsle	r0, r2, r2, lsl r6
    4764:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    4768:	00001f85 	andeq	r1, r0, r5, lsl #31
    476c:	00933406 	addseq	r3, r3, r6, lsl #8
    4770:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4774:	00002195 	muleq	r0, r5, r1
    4778:	00933706 	addseq	r3, r3, r6, lsl #14
    477c:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    4780:	00001fae 	andeq	r1, r0, lr, lsr #31
    4784:	00933a06 	addseq	r3, r3, r6, lsl #20
    4788:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    478c:	00002286 	andeq	r2, r0, r6, lsl #5
    4790:	00933d06 	addseq	r3, r3, r6, lsl #26
    4794:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    4798:	00001f7c 	andeq	r1, r0, ip, ror pc
    479c:	00934006 	addseq	r4, r3, r6
    47a0:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    47a4:	00002012 	andeq	r2, r0, r2, lsl r0
    47a8:	00934306 	addseq	r4, r3, r6, lsl #6
    47ac:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    47b0:	00002030 	andeq	r2, r0, r0, lsr r0
    47b4:	00934706 	addseq	r4, r3, r6, lsl #14
    47b8:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    47bc:	00001fde 	ldrdeq	r1, [r0], -lr
    47c0:	00934d06 	addseq	r4, r3, r6, lsl #26
    47c4:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
    47c8:	000022b4 			; <UNDEFINED> instruction: 0x000022b4
    47cc:	00935006 	addseq	r5, r3, r6
    47d0:	00100000 	andseq	r0, r0, r0
    47d4:	0022c603 	eoreq	ip, r2, r3, lsl #12
    47d8:	5b510600 	blpl	1445fe0 <_Min_Stack_Size+0x1445de0>
    47dc:	0d000002 	stceq	0, cr0, [r0, #-8]
    47e0:	2c570610 	mrrccs	6, 1, r0, r7, cr0
    47e4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    47e8:	00002215 	andeq	r2, r0, r5, lsl r2
    47ec:	00935a06 	addseq	r5, r3, r6, lsl #20
    47f0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    47f4:	00001fc8 	andeq	r1, r0, r8, asr #31
    47f8:	00935d06 	addseq	r5, r3, r6, lsl #26
    47fc:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    4800:	00002127 	andeq	r2, r0, r7, lsr #2
    4804:	00936006 	addseq	r6, r3, r6
    4808:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    480c:	000020df 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    4810:	00936306 	addseq	r6, r3, r6, lsl #6
    4814:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    4818:	000020d1 	ldrdeq	r2, [r0], -r1
    481c:	009e6606 	addseq	r6, lr, r6, lsl #12
    4820:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    4824:	00001feb 	andeq	r1, r0, fp, ror #31
    4828:	00936906 	addseq	r6, r3, r6, lsl #18
    482c:	000c0000 	andeq	r0, ip, r0
    4830:	00206803 	eoreq	r6, r0, r3, lsl #16
    4834:	db6b0600 	blle	1ac603c <_Min_Stack_Size+0x1ac5e3c>
    4838:	0f000002 	svceq	0x00000002
    483c:	00002136 	andeq	r2, r0, r6, lsr r1
    4840:	00007701 	andeq	r7, r0, r1, lsl #14
    4844:	00740000 	rsbseq	r0, r4, r0
    4848:	9c010000 	stcls	0, cr0, [r1], {-0}
    484c:	0000035b 	andeq	r0, r0, fp, asr r3
    4850:	00223410 	eoreq	r3, r2, r0, lsl r4
    4854:	5b770100 	blpl	1dc4c5c <_Min_Stack_Size+0x1dc4a5c>
    4858:	02000003 	andeq	r0, r0, #3
    485c:	11007491 			; <UNDEFINED> instruction: 0x11007491
    4860:	0001ff04 	andeq	pc, r1, r4, lsl #30
    4864:	1fd51200 	svcne	0x00d51200
    4868:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    486c:	08005e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip, lr}
    4870:	00000086 	andeq	r0, r0, r6, lsl #1
    4874:	03a19c01 			; <UNDEFINED> instruction: 0x03a19c01
    4878:	34100000 	ldrcc	r0, [r0], #-0
    487c:	01000022 	tsteq	r0, r2, lsr #32
    4880:	00035b9e 	muleq	r3, lr, fp
    4884:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4888:	0022d610 	eoreq	sp, r2, r0, lsl r6
    488c:	a19e0100 	orrsge	r0, lr, r0, lsl #2
    4890:	02000003 	andeq	r0, r0, #3
    4894:	a7136891 			; <UNDEFINED> instruction: 0xa7136891
    4898:	01000019 	tsteq	r0, r9, lsl r0
    489c:	000093a0 	andeq	r9, r0, r0, lsr #7
    48a0:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    48a4:	d0041100 	andle	r1, r4, r0, lsl #2
    48a8:	0f000002 	svceq	0x00000002
    48ac:	00002085 	andeq	r2, r0, r5, lsl #1
    48b0:	0000db01 	andeq	sp, r0, r1, lsl #22
    48b4:	01680000 	cmneq	r8, r0
    48b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    48bc:	0000043b 	andeq	r0, r0, fp, lsr r4
    48c0:	00223410 	eoreq	r3, r2, r0, lsl r4
    48c4:	5bdb0100 	blpl	ff6c4ccc <BootRAM+0xe63546d>
    48c8:	02000003 	andeq	r0, r0, #3
    48cc:	59104c91 	ldmdbpl	r0, {r0, r4, r7, sl, fp, lr}
    48d0:	01000020 	tsteq	r0, r0, lsr #32
    48d4:	00043bdb 	ldrdeq	r3, [r4], -fp
    48d8:	48910200 	ldmmi	r1, {r9}
    48dc:	0019a713 	andseq	sl, r9, r3, lsl r7
    48e0:	93dd0100 	bicsls	r0, sp, #0, 2
    48e4:	02000000 	andeq	r0, r0, #0
    48e8:	b9136a91 	ldmdblt	r3, {r0, r4, r7, r9, fp, sp, lr}
    48ec:	01000020 	tsteq	r0, r0, lsr #32
    48f0:	000093dd 	ldrdeq	r9, [r0], -sp
    48f4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    48f8:	00224913 	eoreq	r4, r2, r3, lsl r9
    48fc:	93dd0100 	bicsls	r0, sp, #0, 2
    4900:	02000000 	andeq	r0, r0, #0
    4904:	f4137491 			; <UNDEFINED> instruction: 0xf4137491
    4908:	0100001f 	tsteq	r0, pc, lsl r0
    490c:	000093dd 	ldrdeq	r9, [r0], -sp
    4910:	72910200 	addsvc	r0, r1, #0, 4
    4914:	706d7414 	rsbvc	r7, sp, r4, lsl r4
    4918:	9ede0100 	cdpls	1, 13, cr0, cr14, cr0, {0}
    491c:	02000000 	andeq	r0, r0, #0
    4920:	91136c91 			; <UNDEFINED> instruction: 0x91136c91
    4924:	0100001a 	tsteq	r0, sl, lsl r0
    4928:	000250df 	ldrdeq	r5, [r2], -pc	; <UNPREDICTABLE>
    492c:	50910200 	addspl	r0, r1, r0, lsl #4
    4930:	00204d13 	eoreq	r4, r0, r3, lsl sp
    4934:	9ee00100 	cdpls	1, 14, cr0, cr0, cr0, {0}
    4938:	02000000 	andeq	r0, r0, #0
    493c:	11006491 			; <UNDEFINED> instruction: 0x11006491
    4940:	00032c04 	andeq	r2, r3, r4, lsl #24
    4944:	21ec1500 	mvncs	r1, r0, lsl #10
    4948:	72010000 	andvc	r0, r1, #0
    494c:	00000001 	andeq	r0, r0, r1
    4950:	00004800 	andeq	r4, r0, r0, lsl #16
    4954:	679c0100 	ldrvs	r0, [ip, r0, lsl #2]
    4958:	16000004 	strne	r0, [r0], -r4
    495c:	000022d6 	ldrdeq	r2, [r0], -r6
    4960:	a1017201 	tstge	r1, r1, lsl #4
    4964:	02000003 	andeq	r0, r0, #3
    4968:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    496c:	0000208e 	andeq	r2, r0, lr, lsl #1
    4970:	00018e01 	andeq	r8, r1, r1, lsl #28
    4974:	36000000 	strcc	r0, [r0], -r0
    4978:	01000000 	mrseq	r0, (UNDEF: 0)
    497c:	00048d9c 	muleq	r4, ip, sp
    4980:	20591600 	subscs	r1, r9, r0, lsl #12
    4984:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    4988:	00043b01 	andeq	r3, r4, r1, lsl #22
    498c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4990:	21011500 	tstcs	r1, r0, lsl #10
    4994:	ab010000 	blge	4499c <_Min_Stack_Size+0x4479c>
    4998:	005f2001 	subseq	r2, pc, r1
    499c:	00003e08 	andeq	r3, r0, r8, lsl #28
    49a0:	c29c0100 	addsgt	r0, ip, #0, 2
    49a4:	16000004 	strne	r0, [r0], -r4
    49a8:	00002234 	andeq	r2, r0, r4, lsr r2
    49ac:	5b01ab01 	blpl	6f5b8 <_Min_Stack_Size+0x6f3b8>
    49b0:	02000003 	andeq	r0, r0, #3
    49b4:	13167491 	tstne	r6, #-1862270976	; 0x91000000
    49b8:	01000017 	tsteq	r0, r7, lsl r0
    49bc:	010101ab 	smlatbeq	r1, fp, r1, r0
    49c0:	91020000 	mrsls	r0, (UNDEF: 2)
    49c4:	e4150073 	ldr	r0, [r5], #-115	; 0xffffff8d
    49c8:	01000021 	tsteq	r0, r1, lsr #32
    49cc:	000001c3 	andeq	r0, r0, r3, asr #3
    49d0:	003e0000 	eorseq	r0, lr, r0
    49d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    49d8:	000004f7 	strdeq	r0, [r0], -r7
    49dc:	00223416 	eoreq	r3, r2, r6, lsl r4
    49e0:	01c30100 	biceq	r0, r3, r0, lsl #2
    49e4:	0000035b 	andeq	r0, r0, fp, asr r3
    49e8:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    49ec:	00001713 	andeq	r1, r0, r3, lsl r7
    49f0:	0101c301 	tsteq	r1, r1, lsl #6
    49f4:	02000001 	andeq	r0, r0, #1
    49f8:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
    49fc:	000020c0 	andeq	r2, r0, r0, asr #1
    4a00:	0001e201 	andeq	lr, r1, r1, lsl #4
    4a04:	60000000 	andvs	r0, r0, r0
    4a08:	01000000 	mrseq	r0, (UNDEF: 0)
    4a0c:	0005599c 	muleq	r5, ip, r9
    4a10:	22341600 	eorscs	r1, r4, #0, 12
    4a14:	e2010000 	and	r0, r1, #0
    4a18:	00035b01 	andeq	r5, r3, r1, lsl #22
    4a1c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4a20:	0020f616 	eoreq	pc, r0, r6, lsl r6	; <UNPREDICTABLE>
    4a24:	01e20100 	mvneq	r0, r0, lsl #2
    4a28:	00000088 	andeq	r0, r0, r8, lsl #1
    4a2c:	166b9102 	strbtne	r9, [fp], -r2, lsl #2
    4a30:	00001713 	andeq	r1, r0, r3, lsl r7
    4a34:	0101e201 	tsteq	r1, r1, lsl #4
    4a38:	02000001 	andeq	r0, r0, #1
    4a3c:	a8176a91 	ldmdage	r7, {r0, r4, r7, r9, fp, sp, lr}
    4a40:	0100001f 	tsteq	r0, pc, lsl r0
    4a44:	009301e4 	addseq	r0, r3, r4, ror #3
    4a48:	91020000 	mrsls	r0, (UNDEF: 2)
    4a4c:	228f1776 	addcs	r1, pc, #30932992	; 0x1d80000
    4a50:	e4010000 	str	r0, [r1], #-0
    4a54:	00009301 	andeq	r9, r0, r1, lsl #6
    4a58:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4a5c:	1f6d1500 	svcne	0x006d1500
    4a60:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    4a64:	00000002 	andeq	r0, r0, r2
    4a68:	00004600 	andeq	r4, r0, r0, lsl #12
    4a6c:	9d9c0100 	ldflss	f0, [ip]
    4a70:	16000005 	strne	r0, [r0], -r5
    4a74:	00002234 	andeq	r2, r0, r4, lsr r2
    4a78:	5b020901 	blpl	86e84 <_Min_Stack_Size+0x86c84>
    4a7c:	02000003 	andeq	r0, r0, #3
    4a80:	1a167491 	bne	5a1ccc <_Min_Stack_Size+0x5a1acc>
    4a84:	01000020 	tsteq	r0, r0, lsr #32
    4a88:	00930209 	addseq	r0, r3, r9, lsl #4
    4a8c:	91020000 	mrsls	r0, (UNDEF: 2)
    4a90:	17131672 			; <UNDEFINED> instruction: 0x17131672
    4a94:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    4a98:	00010102 	andeq	r0, r1, r2, lsl #2
    4a9c:	71910200 	orrsvc	r0, r1, r0, lsl #4
    4aa0:	20011500 	andcs	r1, r1, r0, lsl #10
    4aa4:	23010000 	movwcs	r0, #4096	; 0x1000
    4aa8:	005f6002 	subseq	r6, pc, r2
    4aac:	00001c08 	andeq	r1, r0, r8, lsl #24
    4ab0:	d29c0100 	addsle	r0, ip, #0, 2
    4ab4:	16000005 	strne	r0, [r0], -r5
    4ab8:	00002234 	andeq	r2, r0, r4, lsr r2
    4abc:	5b022301 	blpl	8d6c8 <_Min_Stack_Size+0x8d4c8>
    4ac0:	02000003 	andeq	r0, r0, #3
    4ac4:	ab167491 	blge	5a1d10 <_Min_Stack_Size+0x5a1b10>
    4ac8:	01000031 	tsteq	r0, r1, lsr r0
    4acc:	00930223 	addseq	r0, r3, r3, lsr #4
    4ad0:	91020000 	mrsls	r0, (UNDEF: 2)
    4ad4:	aa180072 	bge	604ca4 <_Min_Stack_Size+0x604aa4>
    4ad8:	01000021 	tsteq	r0, r1, lsr #32
    4adc:	00930233 	addseq	r0, r3, r3, lsr r2
    4ae0:	5f7c0000 	svcpl	0x007c0000
    4ae4:	00180800 	andseq	r0, r8, r0, lsl #16
    4ae8:	9c010000 	stcls	0, cr0, [r1], {-0}
    4aec:	000005fc 	strdeq	r0, [r0], -ip
    4af0:	00223416 	eoreq	r3, r2, r6, lsl r4
    4af4:	02330100 	eorseq	r0, r3, #0, 2
    4af8:	0000035b 	andeq	r0, r0, fp, asr r3
    4afc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4b00:	00214515 	eoreq	r4, r1, r5, lsl r5
    4b04:	02450100 	subeq	r0, r5, #0, 2
    4b08:	00000000 	andeq	r0, r0, r0
    4b0c:	00000042 	andeq	r0, r0, r2, asr #32
    4b10:	06319c01 	ldrteq	r9, [r1], -r1, lsl #24
    4b14:	34160000 	ldrcc	r0, [r6], #-0
    4b18:	01000022 	tsteq	r0, r2, lsr #32
    4b1c:	035b0245 	cmpeq	fp, #1342177284	; 0x50000004
    4b20:	91020000 	mrsls	r0, (UNDEF: 2)
    4b24:	21be1674 			; <UNDEFINED> instruction: 0x21be1674
    4b28:	45010000 	strmi	r0, [r1, #-0]
    4b2c:	00009302 	andeq	r9, r0, r2, lsl #6
    4b30:	72910200 	addsvc	r0, r1, #0, 4
    4b34:	22391500 	eorscs	r1, r9, #0, 10
    4b38:	5d010000 	stcpl	0, cr0, [r1, #-0]
    4b3c:	00000002 	andeq	r0, r0, r2
    4b40:	00003e00 	andeq	r3, r0, r0, lsl #28
    4b44:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
    4b48:	16000006 	strne	r0, [r0], -r6
    4b4c:	00002234 	andeq	r2, r0, r4, lsr r2
    4b50:	5b025d01 	blpl	9bf5c <_Min_Stack_Size+0x9bd5c>
    4b54:	02000003 	andeq	r0, r0, #3
    4b58:	13167491 	tstne	r6, #-1862270976	; 0x91000000
    4b5c:	01000017 	tsteq	r0, r7, lsl r0
    4b60:	0101025d 	tsteq	r1, sp, asr r2
    4b64:	91020000 	mrsls	r0, (UNDEF: 2)
    4b68:	14150073 	ldrne	r0, [r5], #-115	; 0xffffff8d
    4b6c:	01000021 	tsteq	r0, r1, lsr #32
    4b70:	00000277 	andeq	r0, r0, r7, ror r2
    4b74:	00360000 	eorseq	r0, r6, r0
    4b78:	9c010000 	stcls	0, cr0, [r1], {-0}
    4b7c:	0000069b 	muleq	r0, fp, r6
    4b80:	00223416 	eoreq	r3, r2, r6, lsl r4
    4b84:	02770100 	rsbseq	r0, r7, #0, 2
    4b88:	0000035b 	andeq	r0, r0, fp, asr r3
    4b8c:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    4b90:	00001fae 	andeq	r1, r0, lr, lsr #31
    4b94:	93027701 	movwls	r7, #9985	; 0x2701
    4b98:	02000000 	andeq	r0, r0, #0
    4b9c:	15007291 	strne	r7, [r0, #-657]	; 0xfffffd6f
    4ba0:	0000217f 	andeq	r2, r0, pc, ror r1
    4ba4:	00028701 	andeq	r8, r2, r1, lsl #14
    4ba8:	22000000 	andcs	r0, r0, #0
    4bac:	01000000 	mrseq	r0, (UNDEF: 0)
    4bb0:	0006c19c 	muleq	r6, ip, r1
    4bb4:	22341600 	eorscs	r1, r4, #0, 12
    4bb8:	87010000 	strhi	r0, [r1, -r0]
    4bbc:	00035b02 	andeq	r5, r3, r2, lsl #22
    4bc0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4bc4:	22961500 	addscs	r1, r6, #0, 10
    4bc8:	97010000 	strls	r0, [r1, -r0]
    4bcc:	00000002 	andeq	r0, r0, r2
    4bd0:	00003e00 	andeq	r3, r0, r0, lsl #28
    4bd4:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    4bd8:	16000006 	strne	r0, [r0], -r6
    4bdc:	00002234 	andeq	r2, r0, r4, lsr r2
    4be0:	5b029701 	blpl	aa7ec <_Min_Stack_Size+0xaa5ec>
    4be4:	02000003 	andeq	r0, r0, #3
    4be8:	13167491 	tstne	r6, #-1862270976	; 0x91000000
    4bec:	01000017 	tsteq	r0, r7, lsl r0
    4bf0:	01010297 			; <UNDEFINED> instruction: 0x01010297
    4bf4:	91020000 	mrsls	r0, (UNDEF: 2)
    4bf8:	09180073 	ldmdbeq	r8, {r0, r1, r4, r5, r6}
    4bfc:	01000021 	tsteq	r0, r1, lsr #32
    4c00:	009302b1 			; <UNDEFINED> instruction: 0x009302b1
    4c04:	00000000 	andeq	r0, r0, r0
    4c08:	00300000 	eorseq	r0, r0, r0
    4c0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4c10:	0000073e 	andeq	r0, r0, lr, lsr r7
    4c14:	00223416 	eoreq	r3, r2, r6, lsl r4
    4c18:	02b10100 	adcseq	r0, r1, #0, 2
    4c1c:	0000035b 	andeq	r0, r0, fp, asr r3
    4c20:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
    4c24:	000020ee 	andeq	r2, r0, lr, ror #1
    4c28:	8802b101 	stmdahi	r2, {r0, r8, ip, sp, pc}
    4c2c:	02000000 	andeq	r0, r0, #0
    4c30:	ad176b91 	vldrge	d6, [r7, #-580]	; 0xfffffdbc
    4c34:	01000022 	tsteq	r0, r2, lsr #32
    4c38:	009302b3 			; <UNDEFINED> instruction: 0x009302b3
    4c3c:	91020000 	mrsls	r0, (UNDEF: 2)
    4c40:	93180076 	tstls	r8, #118	; 0x76
    4c44:	0100001f 	tsteq	r0, pc, lsl r0
    4c48:	009302ca 	addseq	r0, r3, sl, asr #5
    4c4c:	00000000 	andeq	r0, r0, r0
    4c50:	00180000 	andseq	r0, r8, r0
    4c54:	9c010000 	stcls	0, cr0, [r1], {-0}
    4c58:	00000768 	andeq	r0, r0, r8, ror #14
    4c5c:	00223416 	eoreq	r3, r2, r6, lsl r4
    4c60:	02ca0100 	sbceq	r0, sl, #0, 2
    4c64:	0000035b 	andeq	r0, r0, fp, asr r3
    4c68:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4c6c:	00209d15 	eoreq	r9, r0, r5, lsl sp
    4c70:	02dc0100 	sbcseq	r0, ip, #0, 2
    4c74:	00000000 	andeq	r0, r0, r0
    4c78:	00000040 	andeq	r0, r0, r0, asr #32
    4c7c:	079d9c01 	ldreq	r9, [sp, r1, lsl #24]
    4c80:	34160000 	ldrcc	r0, [r6], #-0
    4c84:	01000022 	tsteq	r0, r2, lsr #32
    4c88:	035b02dc 	cmpeq	fp, #220, 4	; 0xc000000d
    4c8c:	91020000 	mrsls	r0, (UNDEF: 2)
    4c90:	1f851674 	svcne	0x00851674
    4c94:	dc010000 	stcle	0, cr0, [r1], {-0}
    4c98:	00009302 	andeq	r9, r0, r2, lsl #6
    4c9c:	72910200 	addsvc	r0, r1, #0, 4
    4ca0:	221e1800 	andscs	r1, lr, #0, 16
    4ca4:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    4ca8:	0000cf02 	andeq	ip, r0, r2, lsl #30
    4cac:	005f9400 	subseq	r9, pc, r0, lsl #8
    4cb0:	00003608 	andeq	r3, r0, r8, lsl #12
    4cb4:	e59c0100 	ldr	r0, [ip, #256]	; 0x100
    4cb8:	16000007 	strne	r0, [r0], -r7
    4cbc:	00002234 	andeq	r2, r0, r4, lsr r2
    4cc0:	5b02fe01 	blpl	c44cc <_Min_Stack_Size+0xc42cc>
    4cc4:	02000003 	andeq	r0, r0, #3
    4cc8:	bb166c91 	bllt	59ff14 <_Min_Stack_Size+0x59fd14>
    4ccc:	0100001f 	tsteq	r0, pc, lsl r0
    4cd0:	009302fe 			; <UNDEFINED> instruction: 0x009302fe
    4cd4:	91020000 	mrsls	r0, (UNDEF: 2)
    4cd8:	19ae176a 	stmibne	lr!, {r1, r3, r5, r6, r8, r9, sl, ip}
    4cdc:	00010000 	andeq	r0, r1, r0
    4ce0:	0000cf03 	andeq	ip, r0, r3, lsl #30
    4ce4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4ce8:	21d21500 	bicscs	r1, r2, r0, lsl #10
    4cec:	24010000 	strcs	r0, [r1], #-0
    4cf0:	00000003 	andeq	r0, r0, r3
    4cf4:	00002000 	andeq	r2, r0, r0
    4cf8:	1a9c0100 	bne	fe705100 <BootRAM+0xd6758a1>
    4cfc:	16000008 	strne	r0, [r0], -r8
    4d00:	00002234 	andeq	r2, r0, r4, lsr r2
    4d04:	5b032401 	blpl	cdd10 <_Min_Stack_Size+0xcdb10>
    4d08:	02000003 	andeq	r0, r0, #3
    4d0c:	bb167491 	bllt	5a1f58 <_Min_Stack_Size+0x5a1d58>
    4d10:	0100001f 	tsteq	r0, pc, lsl r0
    4d14:	00930324 	addseq	r0, r3, r4, lsr #6
    4d18:	91020000 	mrsls	r0, (UNDEF: 2)
    4d1c:	6b180072 	blvs	604eec <_Min_Stack_Size+0x604cec>
    4d20:	01000021 	tsteq	r0, r1, lsr #32
    4d24:	00db033d 	sbcseq	r0, fp, sp, lsr r3
    4d28:	00000000 	andeq	r0, r0, r0
    4d2c:	00740000 	rsbseq	r0, r4, r0
    4d30:	9c010000 	stcls	0, cr0, [r1], {-0}
    4d34:	0000088f 	andeq	r0, r0, pc, lsl #17
    4d38:	00223416 	eoreq	r3, r2, r6, lsl r4
    4d3c:	033d0100 	teqeq	sp, #0, 2
    4d40:	0000035b 	andeq	r0, r0, fp, asr r3
    4d44:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
    4d48:	000020f6 	strdeq	r2, [r0], -r6
    4d4c:	88033d01 	stmdahi	r3, {r0, r8, sl, fp, ip, sp}
    4d50:	02000000 	andeq	r0, r0, #0
    4d54:	ae176b91 	vmovge.32	r6, d23[0]
    4d58:	01000019 	tsteq	r0, r9, lsl r0
    4d5c:	00db033f 	sbcseq	r0, fp, pc, lsr r3
    4d60:	91020000 	mrsls	r0, (UNDEF: 2)
    4d64:	1fa81777 	svcne	0x00a81777
    4d68:	40010000 	andmi	r0, r1, r0
    4d6c:	00009303 	andeq	r9, r0, r3, lsl #6
    4d70:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4d74:	00228f17 	eoreq	r8, r2, r7, lsl pc
    4d78:	03400100 	movteq	r0, #256	; 0x100
    4d7c:	00000093 	muleq	r0, r3, r0
    4d80:	17729102 	ldrbne	r9, [r2, -r2, lsl #2]!
    4d84:	00002078 	andeq	r2, r0, r8, ror r0
    4d88:	93034001 	movwls	r4, #12289	; 0x3001
    4d8c:	02000000 	andeq	r0, r0, #0
    4d90:	15007091 	strne	r7, [r0, #-145]	; 0xffffff6f
    4d94:	000021fb 	strdeq	r2, [r0], -fp
    4d98:	00037301 	andeq	r7, r3, r1, lsl #6
    4d9c:	32000000 	andcc	r0, r0, #0
    4da0:	01000000 	mrseq	r0, (UNDEF: 0)
    4da4:	0008d39c 	muleq	r8, ip, r3
    4da8:	22341600 	eorscs	r1, r4, #0, 12
    4dac:	73010000 	movwvc	r0, #4096	; 0x1000
    4db0:	00035b03 	andeq	r5, r3, r3, lsl #22
    4db4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4db8:	0020f616 	eoreq	pc, r0, r6, lsl r6	; <UNPREDICTABLE>
    4dbc:	03730100 	cmneq	r3, #0, 2
    4dc0:	00000088 	andeq	r0, r0, r8, lsl #1
    4dc4:	176b9102 	strbne	r9, [fp, -r2, lsl #2]!
    4dc8:	00001fa8 	andeq	r1, r0, r8, lsr #31
    4dcc:	93037501 	movwls	r7, #13569	; 0x3501
    4dd0:	02000000 	andeq	r0, r0, #0
    4dd4:	19007691 	stmdbne	r0, {r0, r4, r7, r9, sl, ip, sp, lr}
    4dd8:	0000026c 	andeq	r0, r0, ip, ror #4
    4ddc:	df06ce07 	svcle	0x0006ce07
    4de0:	05000008 	streq	r0, [r0, #-8]
    4de4:	0000007a 	andeq	r0, r0, sl, ror r0
    4de8:	001c4600 	andseq	r4, ip, r0, lsl #12
    4dec:	3e000400 	cfcpyscc	mvf0, mvf0
    4df0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    4df4:	00011101 	andeq	r1, r1, r1, lsl #2
    4df8:	28110c00 	ldmdacs	r1, {sl, fp}
    4dfc:	05d80000 	ldrbeq	r0, [r8]
    4e00:	00000000 	andeq	r0, r0, r0
    4e04:	26570000 	ldrbcs	r0, [r7], -r0
    4e08:	01020000 	mrseq	r0, (UNDEF: 2)
    4e0c:	00019206 	andeq	r9, r1, r6, lsl #4
    4e10:	00e30300 	rsceq	r0, r3, r0, lsl #6
    4e14:	1d020000 	stcne	0, cr0, [r2, #-0]
    4e18:	00000033 	andeq	r0, r0, r3, lsr r0
    4e1c:	90080102 	andls	r0, r8, r2, lsl #2
    4e20:	02000001 	andeq	r0, r0, #1
    4e24:	00950502 	addseq	r0, r5, r2, lsl #10
    4e28:	72030000 	andvc	r0, r3, #0
    4e2c:	02000000 	andeq	r0, r0, #0
    4e30:	00004c2b 	andeq	r4, r0, fp, lsr #24
    4e34:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4e38:	000001f2 	strdeq	r0, [r0], -r2
    4e3c:	bd050402 	cfstrslt	mvf0, [r5, #-8]
    4e40:	03000000 	movweq	r0, #0
    4e44:	00000067 	andeq	r0, r0, r7, rrx
    4e48:	00654102 	rsbeq	r4, r5, r2, lsl #2
    4e4c:	04020000 	streq	r0, [r2], #-0
    4e50:	0001c907 	andeq	ip, r1, r7, lsl #18
    4e54:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    4e58:	000000b8 	strheq	r0, [r0], -r8
    4e5c:	c4070802 	strgt	r0, [r7], #-2050	; 0xfffff7fe
    4e60:	04000001 	streq	r0, [r0], #-1
    4e64:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4e68:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    4e6c:	0001ce07 	andeq	ip, r1, r7, lsl #28
    4e70:	00e50300 	rsceq	r0, r5, r0, lsl #6
    4e74:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    4e78:	00000028 	andeq	r0, r0, r8, lsr #32
    4e7c:	00007403 	andeq	r7, r0, r3, lsl #8
    4e80:	41240300 			; <UNDEFINED> instruction: 0x41240300
    4e84:	03000000 	movweq	r0, #0
    4e88:	00000069 	andeq	r0, r0, r9, rrx
    4e8c:	005a3003 	subseq	r3, sl, r3
    4e90:	04020000 	streq	r0, [r2], #-0
    4e94:	00005907 	andeq	r5, r0, r7, lsl #18
    4e98:	00930500 	addseq	r0, r3, r0, lsl #10
    4e9c:	01060000 	mrseq	r0, (UNDEF: 6)
    4ea0:	00000033 	andeq	r0, r0, r3, lsr r0
    4ea4:	cf020704 	svcgt	0x00020704
    4ea8:	07000000 	streq	r0, [r0, -r0]
    4eac:	00001c74 	andeq	r1, r0, r4, ror ip
    4eb0:	45530800 	ldrbmi	r0, [r3, #-2048]	; 0xfffff800
    4eb4:	00010054 	andeq	r0, r1, r4, asr r0
    4eb8:	002e7709 	eoreq	r7, lr, r9, lsl #14
    4ebc:	02070400 	andeq	r0, r7, #0, 8
    4ec0:	000000b5 	strheq	r0, [r0], -r5
    4ec4:	002f9509 	eoreq	r9, pc, r9, lsl #10
    4ec8:	02070400 	andeq	r0, r7, #0, 8
    4ecc:	000000b5 	strheq	r0, [r0], -r5
    4ed0:	00330106 	eorseq	r0, r3, r6, lsl #2
    4ed4:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    4ed8:	00010102 	andeq	r0, r1, r2, lsl #2
    4edc:	02f00700 	rscseq	r0, r0, #0, 14
    4ee0:	07000000 	streq	r0, [r0, -r0]
    4ee4:	00000462 	andeq	r0, r0, r2, ror #8
    4ee8:	d4090001 	strle	r0, [r9], #-1
    4eec:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    4ef0:	00e70209 	rsceq	r0, r7, r9, lsl #4
    4ef4:	500a0000 	andpl	r0, sl, r0
    4ef8:	1e04a204 	cdpne	2, 0, cr10, cr4, cr4, {0}
    4efc:	0b000003 	bleq	4f10 <_Min_Stack_Size+0x4d10>
    4f00:	00315243 	eorseq	r5, r1, r3, asr #4
    4f04:	b004a404 	andlt	sl, r4, r4, lsl #8
    4f08:	00000000 	andeq	r0, r0, r0
    4f0c:	0003c20c 	andeq	ip, r3, ip, lsl #4
    4f10:	04a50400 	strteq	r0, [r5], #1024	; 0x400
    4f14:	00000093 	muleq	r0, r3, r0
    4f18:	52430b02 	subpl	r0, r3, #2048	; 0x800
    4f1c:	a6040032 			; <UNDEFINED> instruction: 0xa6040032
    4f20:	0000b004 	andeq	fp, r0, r4
    4f24:	cc0c0400 	cfstrsgt	mvf0, [ip], {-0}
    4f28:	04000003 	streq	r0, [r0], #-3
    4f2c:	009304a7 	addseq	r0, r3, r7, lsr #9
    4f30:	0c060000 	stceq	0, cr0, [r6], {-0}
    4f34:	000027bf 			; <UNDEFINED> instruction: 0x000027bf
    4f38:	b004a804 	andlt	sl, r4, r4, lsl #16
    4f3c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4f40:	0003d60c 	andeq	sp, r3, ip, lsl #12
    4f44:	04a90400 	strteq	r0, [r9], #1024	; 0x400
    4f48:	00000093 	muleq	r0, r3, r0
    4f4c:	23260c0a 			; <UNDEFINED> instruction: 0x23260c0a
    4f50:	aa040000 	bge	104f58 <_Min_Stack_Size+0x104d58>
    4f54:	0000b004 	andeq	fp, r0, r4
    4f58:	ab0c0c00 	blge	307f60 <_Min_Stack_Size+0x307d60>
    4f5c:	04000002 	streq	r0, [r0], #-2
    4f60:	009304ab 	addseq	r0, r3, fp, lsr #9
    4f64:	0b0e0000 	bleq	384f6c <_Min_Stack_Size+0x384d6c>
    4f68:	04005253 	streq	r5, [r0], #-595	; 0xfffffdad
    4f6c:	00b004ac 	adcseq	r0, r0, ip, lsr #9
    4f70:	0c100000 	ldceq	0, cr0, [r0], {-0}
    4f74:	000003ea 	andeq	r0, r0, sl, ror #7
    4f78:	9304ad04 	movwls	sl, #19716	; 0x4d04
    4f7c:	12000000 	andne	r0, r0, #0
    4f80:	5247450b 	subpl	r4, r7, #46137344	; 0x2c00000
    4f84:	04ae0400 	strteq	r0, [lr], #1024	; 0x400
    4f88:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    4f8c:	03f40c14 	mvnseq	r0, #20, 24	; 0x1400
    4f90:	af040000 	svcge	0x00040000
    4f94:	00009304 	andeq	r9, r0, r4, lsl #6
    4f98:	c70c1600 	strgt	r1, [ip, -r0, lsl #12]
    4f9c:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    4fa0:	00b004b0 	ldrhteq	r0, [r0], r0
    4fa4:	0c180000 	ldceq	0, cr0, [r8], {-0}
    4fa8:	000002d7 	ldrdeq	r0, [r0], -r7
    4fac:	9304b104 	movwls	fp, #16644	; 0x4104
    4fb0:	1a000000 	bne	4fb8 <_Min_Stack_Size+0x4db8>
    4fb4:	0024cd0c 	eoreq	ip, r4, ip, lsl #26
    4fb8:	04b20400 	ldrteq	r0, [r2], #1024	; 0x400
    4fbc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    4fc0:	04150c1c 	ldreq	r0, [r5], #-3100	; 0xfffff3e4
    4fc4:	b3040000 	movwlt	r0, #16384	; 0x4000
    4fc8:	00009304 	andeq	r9, r0, r4, lsl #6
    4fcc:	9b0c1e00 	blls	30c7d4 <_Min_Stack_Size+0x30c5d4>
    4fd0:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    4fd4:	00b004b4 	ldrhteq	r0, [r0], r4
    4fd8:	0c200000 	stceq	0, cr0, [r0], #-0
    4fdc:	0000041f 	andeq	r0, r0, pc, lsl r4
    4fe0:	9304b504 	movwls	fp, #17668	; 0x4504
    4fe4:	22000000 	andcs	r0, r0, #0
    4fe8:	544e430b 	strbpl	r4, [lr], #-779	; 0xfffffcf5
    4fec:	04b60400 	ldrteq	r0, [r6], #1024	; 0x400
    4ff0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    4ff4:	2a510c24 	bcs	144808c <_Min_Stack_Size+0x1447e8c>
    4ff8:	b7040000 	strlt	r0, [r4, -r0]
    4ffc:	00009304 	andeq	r9, r0, r4, lsl #6
    5000:	500b2600 	andpl	r2, fp, r0, lsl #12
    5004:	04004353 	streq	r4, [r0], #-851	; 0xfffffcad
    5008:	00b004b8 	ldrhteq	r0, [r0], r8
    500c:	0c280000 	stceq	0, cr0, [r8], #-0
    5010:	00002513 	andeq	r2, r0, r3, lsl r5
    5014:	9304b904 	movwls	fp, #18692	; 0x4904
    5018:	2a000000 	bcs	5020 <_Min_Stack_Size+0x4e20>
    501c:	5252410b 	subspl	r4, r2, #-1073741822	; 0xc0000002
    5020:	04ba0400 	ldrteq	r0, [sl], #1024	; 0x400
    5024:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    5028:	251e0c2c 	ldrcs	r0, [lr, #-3116]	; 0xfffff3d4
    502c:	bb040000 	bllt	105034 <_Min_Stack_Size+0x104e34>
    5030:	00009304 	andeq	r9, r0, r4, lsl #6
    5034:	520b2e00 	andpl	r2, fp, #0, 28
    5038:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
    503c:	00b004bc 	ldrhteq	r0, [r0], ip
    5040:	0c300000 	ldceq	0, cr0, [r0], #-0
    5044:	00002529 	andeq	r2, r0, r9, lsr #10
    5048:	9304bd04 	movwls	fp, #19716	; 0x4d04
    504c:	32000000 	andcc	r0, r0, #0
    5050:	002cfa0c 	eoreq	pc, ip, ip, lsl #20
    5054:	04be0400 	ldrteq	r0, [lr], #1024	; 0x400
    5058:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    505c:	25340c34 	ldrcs	r0, [r4, #-3124]!	; 0xfffff3cc
    5060:	bf040000 	svclt	0x00040000
    5064:	00009304 	andeq	r9, r0, r4, lsl #6
    5068:	f90c3600 			; <UNDEFINED> instruction: 0xf90c3600
    506c:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    5070:	00b004c0 	adcseq	r0, r0, r0, asr #9
    5074:	0c380000 	ldceq	0, cr0, [r8], #-0
    5078:	0000253f 	andeq	r2, r0, pc, lsr r5
    507c:	9304c104 	movwls	ip, #16644	; 0x4104
    5080:	3a000000 	bcc	5088 <_Min_Stack_Size+0x4e88>
    5084:	002d170c 	eoreq	r1, sp, ip, lsl #14
    5088:	04c20400 	strbeq	r0, [r2], #1024	; 0x400
    508c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    5090:	254a0c3c 	strbcs	r0, [sl, #-3132]	; 0xfffff3c4
    5094:	c3040000 	movwgt	r0, #16384	; 0x4000
    5098:	00009304 	andeq	r9, r0, r4, lsl #6
    509c:	1c0c3e00 	stcne	14, cr3, [ip], {-0}
    50a0:	0400002d 	streq	r0, [r0], #-45	; 0xffffffd3
    50a4:	00b004c4 	adcseq	r0, r0, r4, asr #9
    50a8:	0c400000 	mareq	acc0, r0, r0
    50ac:	00002555 	andeq	r2, r0, r5, asr r5
    50b0:	9304c504 	movwls	ip, #17668	; 0x4504
    50b4:	42000000 	andmi	r0, r0, #0
    50b8:	002ab40c 	eoreq	fp, sl, ip, lsl #8
    50bc:	04c60400 	strbeq	r0, [r6], #1024	; 0x400
    50c0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    50c4:	25600c44 	strbcs	r0, [r0, #-3140]!	; 0xfffff3bc
    50c8:	c7040000 	strgt	r0, [r4, -r0]
    50cc:	00009304 	andeq	r9, r0, r4, lsl #6
    50d0:	440b4600 	strmi	r4, [fp], #-1536	; 0xfffffa00
    50d4:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
    50d8:	00b004c8 	adcseq	r0, r0, r8, asr #9
    50dc:	0c480000 	mareq	acc0, r0, r8
    50e0:	0000256b 	andeq	r2, r0, fp, ror #10
    50e4:	9304c904 	movwls	ip, #18692	; 0x4904
    50e8:	4a000000 	bmi	50f0 <_Min_Stack_Size+0x4ef0>
    50ec:	002bd00c 	eoreq	sp, fp, ip
    50f0:	04ca0400 	strbeq	r0, [sl], #1024	; 0x400
    50f4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    50f8:	25760c4c 	ldrbcs	r0, [r6, #-3148]!	; 0xfffff3b4
    50fc:	cb040000 	blgt	105104 <_Min_Stack_Size+0x104f04>
    5100:	00009304 	andeq	r9, r0, r4, lsl #6
    5104:	09004e00 	stmdbeq	r0, {r9, sl, fp, lr}
    5108:	00002644 	andeq	r2, r0, r4, asr #12
    510c:	0d04cc04 	stceq	12, cr12, [r4, #-16]
    5110:	0d000001 	stceq	0, cr0, [r0, #-4]
    5114:	6f33050a 	svcvs	0x0033050a
    5118:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    511c:	00002a5b 	andeq	r2, r0, fp, asr sl
    5120:	00933505 	addseq	r3, r3, r5, lsl #10
    5124:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    5128:	00002351 	andeq	r2, r0, r1, asr r3
    512c:	00933805 	addseq	r3, r3, r5, lsl #16
    5130:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    5134:	00002bf5 	strdeq	r2, [r0], -r5
    5138:	00933b05 	addseq	r3, r3, r5, lsl #22
    513c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    5140:	000026ed 	andeq	r2, r0, sp, ror #13
    5144:	00933f05 	addseq	r3, r3, r5, lsl #30
    5148:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    514c:	00002d6d 	andeq	r2, r0, sp, ror #26
    5150:	00884205 	addeq	r4, r8, r5, lsl #4
    5154:	00080000 	andeq	r0, r8, r0
    5158:	002c0003 	eoreq	r0, ip, r3
    515c:	2a4a0500 	bcs	1286564 <_Min_Stack_Size+0x1286364>
    5160:	0d000003 	stceq	0, cr0, [r0, #-12]
    5164:	e3500510 	cmp	r0, #16, 10	; 0x4000000
    5168:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    516c:	00002ca1 	andeq	r2, r0, r1, lsr #25
    5170:	00935205 	addseq	r5, r3, r5, lsl #4
    5174:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    5178:	00002a22 	andeq	r2, r0, r2, lsr #20
    517c:	00935505 	addseq	r5, r3, r5, lsl #10
    5180:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    5184:	00002581 	andeq	r2, r0, r1, lsl #11
    5188:	00935805 	addseq	r5, r3, r5, lsl #16
    518c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    5190:	000023c6 	andeq	r2, r0, r6, asr #7
    5194:	00935c05 	addseq	r5, r3, r5, lsl #24
    5198:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    519c:	000026de 	ldrdeq	r2, [r0], -lr
    51a0:	00935f05 	addseq	r5, r3, r5, lsl #30
    51a4:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    51a8:	00002b95 	muleq	r0, r5, fp
    51ac:	00936205 	addseq	r6, r3, r5, lsl #4
    51b0:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    51b4:	00002dd3 	ldrdeq	r2, [r0], -r3
    51b8:	00936605 	addseq	r6, r3, r5, lsl #12
    51bc:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    51c0:	0000298f 	andeq	r2, r0, pc, lsl #19
    51c4:	00936a05 	addseq	r6, r3, r5, lsl #20
    51c8:	000e0000 	andeq	r0, lr, r0
    51cc:	002d2103 	eoreq	r2, sp, r3, lsl #2
    51d0:	7a6d0500 	bvc	1b465d8 <_Min_Stack_Size+0x1b463d8>
    51d4:	0d000003 	stceq	0, cr0, [r0, #-12]
    51d8:	3373050a 	cmncc	r3, #41943040	; 0x2800000
    51dc:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    51e0:	000024bb 			; <UNDEFINED> instruction: 0x000024bb
    51e4:	00937605 	addseq	r7, r3, r5, lsl #12
    51e8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    51ec:	00002a42 	andeq	r2, r0, r2, asr #20
    51f0:	00937905 	addseq	r7, r3, r5, lsl #18
    51f4:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    51f8:	0000244e 	andeq	r2, r0, lr, asr #8
    51fc:	00937c05 	addseq	r7, r3, r5, lsl #24
    5200:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    5204:	00002973 	andeq	r2, r0, r3, ror r9
    5208:	00937f05 	addseq	r7, r3, r5, lsl #30
    520c:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    5210:	000023fe 	strdeq	r2, [r0], -lr
    5214:	00938205 	addseq	r8, r3, r5, lsl #4
    5218:	00080000 	andeq	r0, r8, r0
    521c:	002c2e03 	eoreq	r2, ip, r3, lsl #28
    5220:	ee840500 	cdp	5, 8, cr0, cr4, cr0, {0}
    5224:	0d000003 	stceq	0, cr0, [r0, #-12]
    5228:	9b8b050e 	blls	fe2c6668 <BootRAM+0xd236e09>
    522c:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    5230:	000027c4 	andeq	r2, r0, r4, asr #15
    5234:	00938e05 	addseq	r8, r3, r5, lsl #28
    5238:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    523c:	00002b14 	andeq	r2, r0, r4, lsl fp
    5240:	00939105 	addseq	r9, r3, r5, lsl #2
    5244:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    5248:	00002a84 	andeq	r2, r0, r4, lsl #21
    524c:	00939405 	addseq	r9, r3, r5, lsl #8
    5250:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    5254:	00002928 	andeq	r2, r0, r8, lsr #18
    5258:	00939705 	addseq	r9, r3, r5, lsl #14
    525c:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    5260:	0000290e 	andeq	r2, r0, lr, lsl #18
    5264:	00939b05 	addseq	r9, r3, r5, lsl #22
    5268:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    526c:	00002cbc 			; <UNDEFINED> instruction: 0x00002cbc
    5270:	00939e05 	addseq	r9, r3, r5, lsl #28
    5274:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    5278:	000027fd 	strdeq	r2, [r0], -sp
    527c:	0093a105 	addseq	sl, r3, r5, lsl #2
    5280:	000c0000 	andeq	r0, ip, r0
    5284:	00279a03 	eoreq	r9, r7, r3, lsl #20
    5288:	3ea30500 	cdpcc	5, 10, cr0, cr3, cr0, {0}
    528c:	0f000004 	svceq	0x00000004
    5290:	00002e07 	andeq	r2, r0, r7, lsl #28
    5294:	00007a01 	andeq	r7, r0, r1, lsl #20
    5298:	022c0000 	eoreq	r0, ip, #0
    529c:	9c010000 	stcls	0, cr0, [r1], {-0}
    52a0:	000004ca 	andeq	r0, r0, sl, asr #9
    52a4:	0027d210 	eoreq	sp, r7, r0, lsl r2
    52a8:	ca7a0100 	bgt	1e856b0 <_Min_Stack_Size+0x1e854b0>
    52ac:	02000004 	andeq	r0, r0, #4
    52b0:	11007491 			; <UNDEFINED> instruction: 0x11007491
    52b4:	00031e04 	andeq	r1, r3, r4, lsl #28
    52b8:	2b291200 	blcs	a49ac0 <_Min_Stack_Size+0xa498c0>
    52bc:	e2010000 	and	r0, r1, #0
    52c0:	08005fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, ip, lr}
    52c4:	000000f8 	strdeq	r0, [r0], -r8
    52c8:	05109c01 	ldreq	r9, [r0, #-3073]	; 0xfffff3ff
    52cc:	d2100000 	andsle	r0, r0, #0
    52d0:	01000027 	tsteq	r0, r7, lsr #32
    52d4:	0004cae2 	andeq	ip, r4, r2, ror #21
    52d8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    52dc:	0029e010 	eoreq	lr, r9, r0, lsl r0
    52e0:	10e20100 	rscne	r0, r2, r0, lsl #2
    52e4:	02000005 	andeq	r0, r0, #5
    52e8:	ec136891 	ldc	8, cr6, [r3], {145}	; 0x91
    52ec:	01000028 	tsteq	r0, r8, lsr #32
    52f0:	000093e4 	andeq	r9, r0, r4, ror #7
    52f4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    52f8:	6f041100 	svcvs	0x00041100
    52fc:	14000003 	strne	r0, [r0], #-3
    5300:	00002d61 	andeq	r2, r0, r1, ror #26
    5304:	00011701 	andeq	r1, r1, r1, lsl #14
    5308:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    530c:	01000001 	tsteq	r0, r1
    5310:	0005789c 	muleq	r5, ip, r8
    5314:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    5318:	17010000 	strne	r0, [r1, -r0]
    531c:	0004ca01 	andeq	ip, r4, r1, lsl #20
    5320:	6c910200 	lfmvs	f0, 4, [r1], {0}
    5324:	0027ae15 	eoreq	sl, r7, r5, lsl lr
    5328:	01170100 	tsteq	r7, r0, lsl #2
    532c:	00000578 	andeq	r0, r0, r8, ror r5
    5330:	16689102 	strbtne	r9, [r8], -r2, lsl #2
    5334:	00002592 	muleq	r0, r2, r5
    5338:	93011901 	movwls	r1, #6401	; 0x1901
    533c:	02000000 	andeq	r0, r0, #0
    5340:	b4167291 	ldrlt	r7, [r6], #-657	; 0xfffffd6f
    5344:	01000026 	tsteq	r0, r6, lsr #32
    5348:	00930119 	addseq	r0, r3, r9, lsl r1
    534c:	91020000 	mrsls	r0, (UNDEF: 2)
    5350:	28f31676 	ldmcs	r3!, {r1, r2, r4, r5, r6, r9, sl, ip}^
    5354:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    5358:	00009301 	andeq	r9, r0, r1, lsl #6
    535c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5360:	e3041100 	movw	r1, #16640	; 0x4100
    5364:	14000003 	strne	r0, [r0], #-3
    5368:	00002be9 	andeq	r2, r0, r9, ror #23
    536c:	00016a01 	andeq	r6, r1, r1, lsl #20
    5370:	10000000 	andne	r0, r0, r0
    5374:	01000001 	tsteq	r0, r1
    5378:	0005e09c 	muleq	r5, ip, r0
    537c:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    5380:	6a010000 	bvs	45388 <_Min_Stack_Size+0x45188>
    5384:	0004ca01 	andeq	ip, r4, r1, lsl #20
    5388:	6c910200 	lfmvs	f0, 4, [r1], {0}
    538c:	0027ae15 	eoreq	sl, r7, r5, lsl lr
    5390:	016a0100 	cmneq	sl, r0, lsl #2
    5394:	00000578 	andeq	r0, r0, r8, ror r5
    5398:	16689102 	strbtne	r9, [r8], -r2, lsl #2
    539c:	00002592 	muleq	r0, r2, r5
    53a0:	93016c01 	movwls	r6, #7169	; 0x1c01
    53a4:	02000000 	andeq	r0, r0, #0
    53a8:	b4167291 	ldrlt	r7, [r6], #-657	; 0xfffffd6f
    53ac:	01000026 	tsteq	r0, r6, lsr #32
    53b0:	0093016c 	addseq	r0, r3, ip, ror #2
    53b4:	91020000 	mrsls	r0, (UNDEF: 2)
    53b8:	28f31676 	ldmcs	r3!, {r1, r2, r4, r5, r6, r9, sl, ip}^
    53bc:	6c010000 	stcvs	0, cr0, [r1], {-0}
    53c0:	00009301 	andeq	r9, r0, r1, lsl #6
    53c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    53c8:	25fb1400 	ldrbcs	r1, [fp, #1024]!	; 0x400
    53cc:	bc010000 	stclt	0, cr0, [r1], {-0}
    53d0:	00000001 	andeq	r0, r0, r1
    53d4:	00010c00 	andeq	r0, r1, r0, lsl #24
    53d8:	429c0100 	addsmi	r0, ip, #0, 2
    53dc:	15000006 	strne	r0, [r0, #-6]
    53e0:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    53e4:	ca01bc01 	bgt	743f0 <_Min_Stack_Size+0x741f0>
    53e8:	02000004 	andeq	r0, r0, #4
    53ec:	ae156c91 	mrcge	12, 0, r6, cr5, cr1, {4}
    53f0:	01000027 	tsteq	r0, r7, lsr #32
    53f4:	057801bc 	ldrbeq	r0, [r8, #-444]!	; 0xfffffe44
    53f8:	91020000 	mrsls	r0, (UNDEF: 2)
    53fc:	25921668 	ldrcs	r1, [r2, #1640]	; 0x668
    5400:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    5404:	00009301 	andeq	r9, r0, r1, lsl #6
    5408:	72910200 	addsvc	r0, r1, #0, 4
    540c:	0026b416 	eoreq	fp, r6, r6, lsl r4
    5410:	01be0100 			; <UNDEFINED> instruction: 0x01be0100
    5414:	00000093 	muleq	r0, r3, r0
    5418:	16769102 	ldrbtne	r9, [r6], -r2, lsl #2
    541c:	000028f3 	strdeq	r2, [r0], -r3
    5420:	9301be01 	movwls	fp, #7681	; 0x1e01
    5424:	02000000 	andeq	r0, r0, #0
    5428:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
    542c:	00002c40 	andeq	r2, r0, r0, asr #24
    5430:	00020b01 	andeq	r0, r2, r1, lsl #22
    5434:	d0000000 	andle	r0, r0, r0
    5438:	01000000 	mrseq	r0, (UNDEF: 0)
    543c:	0006a49c 	muleq	r6, ip, r4
    5440:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    5444:	0b010000 	bleq	4544c <_Min_Stack_Size+0x4524c>
    5448:	0004ca02 	andeq	ip, r4, r2, lsl #20
    544c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    5450:	0027ae15 	eoreq	sl, r7, r5, lsl lr
    5454:	020b0100 	andeq	r0, fp, #0, 2
    5458:	00000578 	andeq	r0, r0, r8, ror r5
    545c:	16689102 	strbtne	r9, [r8], -r2, lsl #2
    5460:	00002592 	muleq	r0, r2, r5
    5464:	93020d01 	movwls	r0, #11521	; 0x2d01
    5468:	02000000 	andeq	r0, r0, #0
    546c:	b4167491 	ldrlt	r7, [r6], #-1169	; 0xfffffb6f
    5470:	01000026 	tsteq	r0, r6, lsr #32
    5474:	0093020d 	addseq	r0, r3, sp, lsl #4
    5478:	91020000 	mrsls	r0, (UNDEF: 2)
    547c:	28f31672 	ldmcs	r3!, {r1, r4, r5, r6, r9, sl, ip}^
    5480:	0d010000 	stceq	0, cr0, [r1, #-0]
    5484:	00009302 	andeq	r9, r0, r2, lsl #6
    5488:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    548c:	2c4c1700 	mcrrcs	7, 0, r1, ip, cr0
    5490:	4b010000 	blmi	45498 <_Min_Stack_Size+0x45298>
    5494:	00000002 	andeq	r0, r0, r2
    5498:	0000a800 	andeq	sl, r0, r0, lsl #16
    549c:	d99c0100 	ldmible	ip, {r8}
    54a0:	15000006 	strne	r0, [r0, #-6]
    54a4:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    54a8:	ca024b01 	bgt	980b4 <_Min_Stack_Size+0x97eb4>
    54ac:	02000004 	andeq	r0, r0, #4
    54b0:	98157491 	ldmdals	r5, {r0, r4, r7, sl, ip, sp, lr}
    54b4:	0100002d 	tsteq	r0, sp, lsr #32
    54b8:	06d9024b 	ldrbeq	r0, [r9], fp, asr #4
    54bc:	91020000 	mrsls	r0, (UNDEF: 2)
    54c0:	04110070 	ldreq	r0, [r1], #-112	; 0xffffff90
    54c4:	00000433 	andeq	r0, r0, r3, lsr r4
    54c8:	00287317 	eoreq	r7, r8, r7, lsl r3
    54cc:	028e0100 	addeq	r0, lr, #0, 2
    54d0:	00000000 	andeq	r0, r0, r0
    54d4:	000000b8 	strheq	r0, [r0], -r8
    54d8:	07329c01 	ldreq	r9, [r2, -r1, lsl #24]!
    54dc:	d2150000 	andsle	r0, r5, #0
    54e0:	01000027 	tsteq	r0, r7, lsr #32
    54e4:	04ca028e 	strbeq	r0, [sl], #654	; 0x28e
    54e8:	91020000 	mrsls	r0, (UNDEF: 2)
    54ec:	2d98156c 	cfldr32cs	mvfx1, [r8, #432]	; 0x1b0
    54f0:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    54f4:	0006d902 	andeq	sp, r6, r2, lsl #18
    54f8:	68910200 	ldmvs	r1, {r9}
    54fc:	00260716 	eoreq	r0, r6, r6, lsl r7
    5500:	02900100 	addseq	r0, r0, #0, 2
    5504:	00000093 	muleq	r0, r3, r0
    5508:	16769102 	ldrbtne	r9, [r6], -r2, lsl #2
    550c:	000029ac 	andeq	r2, r0, ip, lsr #19
    5510:	93029101 	movwls	r9, #8449	; 0x2101
    5514:	02000000 	andeq	r0, r0, #0
    5518:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
    551c:	00002aa5 	andeq	r2, r0, r5, lsr #21
    5520:	0002c801 	andeq	ip, r2, r1, lsl #16
    5524:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    5528:	01000000 	mrseq	r0, (UNDEF: 0)
    552c:	0007679c 	muleq	r7, ip, r7
    5530:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    5534:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    5538:	0004ca02 	andeq	ip, r4, r2, lsl #20
    553c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5540:	002b5315 	eoreq	r5, fp, r5, lsl r3
    5544:	02c80100 	sbceq	r0, r8, #0, 2
    5548:	00000767 	andeq	r0, r0, r7, ror #14
    554c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    5550:	049b0411 	ldreq	r0, [fp], #1041	; 0x411
    5554:	1f140000 	svcne	0x00140000
    5558:	01000027 	tsteq	r0, r7, lsr #32
    555c:	000002e0 	andeq	r0, r0, r0, ror #5
    5560:	00320000 	eorseq	r0, r2, r0
    5564:	9c010000 	stcls	0, cr0, [r1], {-0}
    5568:	00000793 	muleq	r0, r3, r7
    556c:	0029e015 	eoreq	lr, r9, r5, lsl r0
    5570:	02e00100 	rsceq	r0, r0, #0, 2
    5574:	00000510 	andeq	r0, r0, r0, lsl r5
    5578:	00749102 	rsbseq	r9, r4, r2, lsl #2
    557c:	00289b14 	eoreq	r9, r8, r4, lsl fp
    5580:	02f00100 	rscseq	r0, r0, #0, 2
    5584:	00000000 	andeq	r0, r0, r0
    5588:	00000042 	andeq	r0, r0, r2, asr #32
    558c:	07b99c01 	ldreq	r9, [r9, r1, lsl #24]!
    5590:	ae150000 	cdpge	0, 1, cr0, cr5, cr0, {0}
    5594:	01000027 	tsteq	r0, r7, lsr #32
    5598:	057802f0 	ldrbeq	r0, [r8, #-752]!	; 0xfffffd10
    559c:	91020000 	mrsls	r0, (UNDEF: 2)
    55a0:	ba140074 	blt	505778 <_Min_Stack_Size+0x505578>
    55a4:	01000025 	tsteq	r0, r5, lsr #32
    55a8:	00000303 	andeq	r0, r0, r3, lsl #6
    55ac:	00300000 	eorseq	r0, r0, r0
    55b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    55b4:	000007df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    55b8:	002d9815 	eoreq	r9, sp, r5, lsl r8
    55bc:	03030100 	movweq	r0, #12544	; 0x3100
    55c0:	000006d9 	ldrdeq	r0, [r0], -r9
    55c4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    55c8:	0028d914 	eoreq	sp, r8, r4, lsl r9
    55cc:	03130100 	tsteq	r3, #0, 2
    55d0:	00000000 	andeq	r0, r0, r0
    55d4:	0000003c 	andeq	r0, r0, ip, lsr r0
    55d8:	08059c01 	stmdaeq	r5, {r0, sl, fp, ip, pc}
    55dc:	53150000 	tstpl	r5, #0
    55e0:	0100002b 	tsteq	r0, fp, lsr #32
    55e4:	07670313 			; <UNDEFINED> instruction: 0x07670313
    55e8:	91020000 	mrsls	r0, (UNDEF: 2)
    55ec:	c8140074 	ldmdagt	r4, {r2, r4, r5, r6}
    55f0:	0100002b 	tsteq	r0, fp, lsr #32
    55f4:	60c40326 	sbcvs	r0, r4, r6, lsr #6
    55f8:	003e0800 	eorseq	r0, lr, r0, lsl #16
    55fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    5600:	0000083a 	andeq	r0, r0, sl, lsr r8
    5604:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5608:	03260100 			; <UNDEFINED> instruction: 0x03260100
    560c:	000004ca 	andeq	r0, r0, sl, asr #9
    5610:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    5614:	00001713 	andeq	r1, r0, r3, lsl r7
    5618:	01032601 	tsteq	r3, r1, lsl #12
    561c:	02000001 	andeq	r0, r0, #1
    5620:	14007391 	strne	r7, [r0], #-913	; 0xfffffc6f
    5624:	00002a92 	muleq	r0, r2, sl
    5628:	00033f01 	andeq	r3, r3, r1, lsl #30
    562c:	4a000000 	bmi	5634 <_Min_Stack_Size+0x5434>
    5630:	01000000 	mrseq	r0, (UNDEF: 0)
    5634:	00086f9c 	muleq	r8, ip, pc	; <UNPREDICTABLE>
    5638:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    563c:	3f010000 	svccc	0x00010000
    5640:	0004ca03 	andeq	ip, r4, r3, lsl #20
    5644:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5648:	00171315 	andseq	r1, r7, r5, lsl r3
    564c:	033f0100 	teqeq	pc, #0, 2
    5650:	00000101 	andeq	r0, r0, r1, lsl #2
    5654:	00739102 	rsbseq	r9, r3, r2, lsl #2
    5658:	002dc614 	eoreq	ip, sp, r4, lsl r6
    565c:	03680100 	cmneq	r8, #0, 2
    5660:	08006104 	stmdaeq	r0, {r2, r8, sp, lr}
    5664:	00000046 	andeq	r0, r0, r6, asr #32
    5668:	08b39c01 	ldmeq	r3!, {r0, sl, fp, ip, pc}
    566c:	d2150000 	andsle	r0, r5, #0
    5670:	01000027 	tsteq	r0, r7, lsr #32
    5674:	04ca0368 	strbeq	r0, [sl], #872	; 0x368
    5678:	91020000 	mrsls	r0, (UNDEF: 2)
    567c:	2b221574 	blcs	88ac54 <_Min_Stack_Size+0x88aa54>
    5680:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    5684:	00009303 	andeq	r9, r0, r3, lsl #6
    5688:	72910200 	addsvc	r0, r1, #0, 4
    568c:	00171315 	andseq	r1, r7, r5, lsl r3
    5690:	03680100 	cmneq	r8, #0, 2
    5694:	00000101 	andeq	r0, r0, r1, lsl #2
    5698:	00719102 	rsbseq	r9, r1, r2, lsl #2
    569c:	00248e14 	eoreq	r8, r4, r4, lsl lr
    56a0:	038d0100 	orreq	r0, sp, #0, 2
    56a4:	00000000 	andeq	r0, r0, r0
    56a8:	0000001c 	andeq	r0, r0, ip, lsl r0
    56ac:	08e89c01 	stmiaeq	r8!, {r0, sl, fp, ip, pc}^
    56b0:	d2150000 	andsle	r0, r5, #0
    56b4:	01000027 	tsteq	r0, r7, lsr #32
    56b8:	04ca038d 	strbeq	r0, [sl], #909	; 0x38d
    56bc:	91020000 	mrsls	r0, (UNDEF: 2)
    56c0:	2a321574 	bcs	c8ac98 <_Min_Stack_Size+0xc8aa98>
    56c4:	8d010000 	stchi	0, cr0, [r1, #-0]
    56c8:	00009303 	andeq	r9, r0, r3, lsl #6
    56cc:	72910200 	addsvc	r0, r1, #0, 4
    56d0:	29f71400 	ldmibcs	r7!, {sl, ip}^
    56d4:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    56d8:	00000003 	andeq	r0, r0, r3
    56dc:	00002800 	andeq	r2, r0, r0, lsl #16
    56e0:	2c9c0100 	ldfcss	f0, [ip], {0}
    56e4:	15000009 	strne	r0, [r0, #-9]
    56e8:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    56ec:	ca03a901 	bgt	efaf8 <_Min_Stack_Size+0xef8f8>
    56f0:	02000004 	andeq	r0, r0, #4
    56f4:	a0157491 	mulsge	r5, r1, r4
    56f8:	01000029 	tsteq	r0, r9, lsr #32
    56fc:	009303a9 	addseq	r0, r3, r9, lsr #7
    5700:	91020000 	mrsls	r0, (UNDEF: 2)
    5704:	26651572 			; <UNDEFINED> instruction: 0x26651572
    5708:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    570c:	00009303 	andeq	r9, r0, r3, lsl #6
    5710:	70910200 	addsvc	r0, r1, r0, lsl #4
    5714:	231b1400 	tstcs	fp, #0, 8
    5718:	c4010000 	strgt	r0, [r1], #-0
    571c:	00000003 	andeq	r0, r0, r3
    5720:	00004600 	andeq	r4, r0, r0, lsl #12
    5724:	709c0100 	addsvc	r0, ip, r0, lsl #2
    5728:	15000009 	strne	r0, [r0, #-9]
    572c:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    5730:	ca03c401 	bgt	f673c <_Min_Stack_Size+0xf653c>
    5734:	02000004 	andeq	r0, r0, #4
    5738:	8d157491 	cfldrshi	mvf7, [r5, #-580]	; 0xfffffdbc
    573c:	01000028 	tsteq	r0, r8, lsr #32
    5740:	009303c4 	addseq	r0, r3, r4, asr #7
    5744:	91020000 	mrsls	r0, (UNDEF: 2)
    5748:	17131572 			; <UNDEFINED> instruction: 0x17131572
    574c:	c4010000 	strgt	r0, [r1], #-0
    5750:	00010103 	andeq	r0, r1, r3, lsl #2
    5754:	71910200 	orrsvc	r0, r1, r0, lsl #4
    5758:	240b1400 	strcs	r1, [fp], #-1024	; 0xfffffc00
    575c:	dd010000 	stcle	0, cr0, [r1, #-0]
    5760:	00000003 	andeq	r0, r0, r3
    5764:	00002200 	andeq	r2, r0, r0, lsl #4
    5768:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    576c:	15000009 	strne	r0, [r0, #-9]
    5770:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    5774:	ca03dd01 	bgt	fcb80 <_Min_Stack_Size+0xfc980>
    5778:	02000004 	andeq	r0, r0, #4
    577c:	17007491 			; <UNDEFINED> instruction: 0x17007491
    5780:	00002ae1 	andeq	r2, r0, r1, ror #21
    5784:	0003f001 	andeq	pc, r3, r1
    5788:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    578c:	01000000 	mrseq	r0, (UNDEF: 0)
    5790:	0009cb9c 	muleq	r9, ip, fp
    5794:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    5798:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    579c:	0004ca03 	andeq	ip, r4, r3, lsl #20
    57a0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    57a4:	00232b15 	eoreq	r2, r3, r5, lsl fp
    57a8:	03f00100 	mvnseq	r0, #0, 2
    57ac:	00000093 	muleq	r0, r3, r0
    57b0:	00729102 	rsbseq	r9, r2, r2, lsl #2
    57b4:	002a6917 	eoreq	r6, sl, r7, lsl r9
    57b8:	040b0100 	streq	r0, [fp], #-256	; 0xffffff00
    57bc:	00000000 	andeq	r0, r0, r0
    57c0:	0000005c 	andeq	r0, r0, ip, asr r0
    57c4:	0a1e9c01 	beq	7ac7d0 <_Min_Stack_Size+0x7ac5d0>
    57c8:	d2150000 	andsle	r0, r5, #0
    57cc:	01000027 	tsteq	r0, r7, lsr #32
    57d0:	04ca040b 	strbeq	r0, [sl], #1035	; 0x40b
    57d4:	91020000 	mrsls	r0, (UNDEF: 2)
    57d8:	2b3a1574 	blcs	e8adb0 <_Min_Stack_Size+0xe8abb0>
    57dc:	0b010000 	bleq	457e4 <_Min_Stack_Size+0x455e4>
    57e0:	00009304 	andeq	r9, r0, r4, lsl #6
    57e4:	72910200 	addsvc	r0, r1, #0, 4
    57e8:	002a4215 	eoreq	r4, sl, r5, lsl r2
    57ec:	040c0100 	streq	r0, [ip], #-256	; 0xffffff00
    57f0:	00000093 	muleq	r0, r3, r0
    57f4:	15709102 	ldrbne	r9, [r0, #-258]!	; 0xfffffefe
    57f8:	00002402 	andeq	r2, r0, r2, lsl #8
    57fc:	93040c01 	movwls	r0, #19457	; 0x4c01
    5800:	02000000 	andeq	r0, r0, #0
    5804:	17006e91 			; <UNDEFINED> instruction: 0x17006e91
    5808:	00002cff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    580c:	00043301 	andeq	r3, r4, r1, lsl #6
    5810:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    5814:	01000000 	mrseq	r0, (UNDEF: 0)
    5818:	000a809c 	muleq	sl, ip, r0
    581c:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    5820:	33010000 	movwcc	r0, #4096	; 0x1000
    5824:	0004ca04 	andeq	ip, r4, r4, lsl #20
    5828:	6c910200 	lfmvs	f0, 4, [r1], {0}
    582c:	0028fa15 	eoreq	pc, r8, r5, lsl sl	; <UNPREDICTABLE>
    5830:	04330100 	ldrteq	r0, [r3], #-256	; 0xffffff00
    5834:	00000093 	muleq	r0, r3, r0
    5838:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
    583c:	000028c6 	andeq	r2, r0, r6, asr #17
    5840:	93043301 	movwls	r3, #17153	; 0x4301
    5844:	02000000 	andeq	r0, r0, #0
    5848:	b9156891 	ldmdblt	r5, {r0, r4, r7, fp, sp, lr}
    584c:	0100002d 	tsteq	r0, sp, lsr #32
    5850:	00930434 	addseq	r0, r3, r4, lsr r4
    5854:	91020000 	mrsls	r0, (UNDEF: 2)
    5858:	28be1666 	ldmcs	lr!, {r1, r2, r5, r6, r9, sl, ip}
    585c:	36010000 	strcc	r0, [r1], -r0
    5860:	00009304 	andeq	r9, r0, r4, lsl #6
    5864:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    5868:	2ba51700 	blcs	fe94b470 <BootRAM+0xd8bbc11>
    586c:	5d010000 	stcpl	0, cr0, [r1, #-0]
    5870:	00000004 	andeq	r0, r0, r4
    5874:	00003e00 	andeq	r3, r0, r0, lsl #28
    5878:	d39c0100 	orrsle	r0, ip, #0, 2
    587c:	1500000a 	strne	r0, [r0, #-10]
    5880:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    5884:	ca045d01 	bgt	11cc90 <_Min_Stack_Size+0x11ca90>
    5888:	02000004 	andeq	r0, r0, #4
    588c:	fa157491 	blx	562ad8 <_Min_Stack_Size+0x5628d8>
    5890:	01000028 	tsteq	r0, r8, lsr #32
    5894:	0093045d 	addseq	r0, r3, sp, asr r4
    5898:	91020000 	mrsls	r0, (UNDEF: 2)
    589c:	28c61572 	stmiacs	r6, {r1, r4, r5, r6, r8, sl, ip}^
    58a0:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    58a4:	00009304 	andeq	r9, r0, r4, lsl #6
    58a8:	70910200 	addsvc	r0, r1, r0, lsl #4
    58ac:	002db915 	eoreq	fp, sp, r5, lsl r9
    58b0:	045e0100 	ldrbeq	r0, [lr], #-256	; 0xffffff00
    58b4:	00000093 	muleq	r0, r3, r0
    58b8:	006e9102 	rsbeq	r9, lr, r2, lsl #2
    58bc:	002df914 	eoreq	pc, sp, r4, lsl r9	; <UNPREDICTABLE>
    58c0:	047c0100 	ldrbteq	r0, [ip], #-256	; 0xffffff00
    58c4:	00000000 	andeq	r0, r0, r0
    58c8:	00000052 	andeq	r0, r0, r2, asr r0
    58cc:	0b359c01 	bleq	d6c8d8 <_Min_Stack_Size+0xd6c6d8>
    58d0:	d2150000 	andsle	r0, r5, #0
    58d4:	01000027 	tsteq	r0, r7, lsr #32
    58d8:	04ca047c 	strbeq	r0, [sl], #1148	; 0x47c
    58dc:	91020000 	mrsls	r0, (UNDEF: 2)
    58e0:	28fa156c 	ldmcs	sl!, {r2, r3, r5, r6, r8, sl, ip}^
    58e4:	7c010000 	stcvc	0, cr0, [r1], {-0}
    58e8:	00009304 	andeq	r9, r0, r4, lsl #6
    58ec:	6a910200 	bvs	fe4460f4 <BootRAM+0xd3b6895>
    58f0:	0028c615 	eoreq	ip, r8, r5, lsl r6
    58f4:	047c0100 	ldrbteq	r0, [ip], #-256	; 0xffffff00
    58f8:	00000093 	muleq	r0, r3, r0
    58fc:	15689102 	strbne	r9, [r8, #-258]!	; 0xfffffefe
    5900:	00002db9 			; <UNDEFINED> instruction: 0x00002db9
    5904:	93047d01 	movwls	r7, #19713	; 0x4d01
    5908:	02000000 	andeq	r0, r0, #0
    590c:	be166691 	mrclt	6, 0, r6, cr6, cr1, {4}
    5910:	01000028 	tsteq	r0, r8, lsr #32
    5914:	0093047f 	addseq	r0, r3, pc, ror r4
    5918:	91020000 	mrsls	r0, (UNDEF: 2)
    591c:	cd140076 	ldcgt	0, cr0, [r4, #-472]	; 0xfffffe28
    5920:	0100002a 	tsteq	r0, sl, lsr #32
    5924:	00000498 	muleq	r0, r8, r4
    5928:	00260000 	eoreq	r0, r6, r0
    592c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5930:	00000b79 	andeq	r0, r0, r9, ror fp
    5934:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5938:	04980100 	ldreq	r0, [r8], #256	; 0x100
    593c:	000004ca 	andeq	r0, r0, sl, asr #9
    5940:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    5944:	00002869 	andeq	r2, r0, r9, ror #16
    5948:	93049801 	movwls	r9, #18433	; 0x4801
    594c:	02000000 	andeq	r0, r0, #0
    5950:	ac157291 	lfmge	f7, 4, [r5], {145}	; 0x91
    5954:	01000028 	tsteq	r0, r8, lsr #32
    5958:	00930498 	umullseq	r0, r3, r8, r4
    595c:	91020000 	mrsls	r0, (UNDEF: 2)
    5960:	d3140070 	tstle	r4, #112	; 0x70
    5964:	01000024 	tsteq	r0, r4, lsr #32
    5968:	000004af 	andeq	r0, r0, pc, lsr #9
    596c:	00360000 	eorseq	r0, r6, r0
    5970:	9c010000 	stcls	0, cr0, [r1], {-0}
    5974:	00000bbd 			; <UNDEFINED> instruction: 0x00000bbd
    5978:	0027d215 	eoreq	sp, r7, r5, lsl r2
    597c:	04af0100 	strteq	r0, [pc], #256	; 5984 <_Min_Stack_Size+0x5784>
    5980:	000004ca 	andeq	r0, r0, sl, asr #9
    5984:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5988:	00002351 	andeq	r2, r0, r1, asr r3
    598c:	9304af01 	movwls	sl, #20225	; 0x4f01
    5990:	02000000 	andeq	r0, r0, #0
    5994:	ec166a91 			; <UNDEFINED> instruction: 0xec166a91
    5998:	01000028 	tsteq	r0, r8, lsr #32
    599c:	009304b1 			; <UNDEFINED> instruction: 0x009304b1
    59a0:	91020000 	mrsls	r0, (UNDEF: 2)
    59a4:	e2140076 	ands	r0, r4, #118	; 0x76
    59a8:	01000023 	tsteq	r0, r3, lsr #32
    59ac:	000004cd 	andeq	r0, r0, sp, asr #9
    59b0:	00360000 	eorseq	r0, r6, r0
    59b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    59b8:	00000c01 	andeq	r0, r0, r1, lsl #24
    59bc:	0027d215 	eoreq	sp, r7, r5, lsl r2
    59c0:	04cd0100 	strbeq	r0, [sp], #256	; 0x100
    59c4:	000004ca 	andeq	r0, r0, sl, asr #9
    59c8:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    59cc:	0000232b 	andeq	r2, r0, fp, lsr #6
    59d0:	9304cd01 	movwls	ip, #19713	; 0x4d01
    59d4:	02000000 	andeq	r0, r0, #0
    59d8:	be166a91 			; <UNDEFINED> instruction: 0xbe166a91
    59dc:	01000028 	tsteq	r0, r8, lsr #32
    59e0:	009304cf 	addseq	r0, r3, pc, asr #9
    59e4:	91020000 	mrsls	r0, (UNDEF: 2)
    59e8:	5e140076 	mrcpl	0, 0, r0, cr4, cr6, {3}
    59ec:	01000024 	tsteq	r0, r4, lsr #32
    59f0:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    59f4:	00960000 	addseq	r0, r6, r0
    59f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    59fc:	00000c81 	andeq	r0, r0, r1, lsl #25
    5a00:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5a04:	04f00100 	ldrbteq	r0, [r0], #256	; 0x100
    5a08:	000004ca 	andeq	r0, r0, sl, asr #9
    5a0c:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5a10:	000027d7 	ldrdeq	r2, [r0], -r7
    5a14:	9304f001 	movwls	pc, #16385	; 0x4001	; <UNPREDICTABLE>
    5a18:	02000000 	andeq	r0, r0, #0
    5a1c:	a0156a91 	mulsge	r5, r1, sl
    5a20:	01000024 	tsteq	r0, r4, lsr #32
    5a24:	009304f1 			; <UNDEFINED> instruction: 0x009304f1
    5a28:	91020000 	mrsls	r0, (UNDEF: 2)
    5a2c:	239e1568 	orrscs	r1, lr, #104, 10	; 0x1a000000
    5a30:	f1010000 	setend	le
    5a34:	00009304 	andeq	r9, r0, r4, lsl #6
    5a38:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    5a3c:	0028be16 	eoreq	fp, r8, r6, lsl lr
    5a40:	04f30100 	ldrbteq	r0, [r3], #256	; 0x100
    5a44:	00000093 	muleq	r0, r3, r0
    5a48:	16769102 	ldrbtne	r9, [r6], -r2, lsl #2
    5a4c:	000023d0 	ldrdeq	r2, [r0], -r0
    5a50:	9304f401 	movwls	pc, #17409	; 0x4401	; <UNPREDICTABLE>
    5a54:	02000000 	andeq	r0, r0, #0
    5a58:	b4167491 	ldrlt	r7, [r6], #-1169	; 0xfffffb6f
    5a5c:	01000026 	tsteq	r0, r6, lsr #32
    5a60:	009304f5 			; <UNDEFINED> instruction: 0x009304f5
    5a64:	91020000 	mrsls	r0, (UNDEF: 2)
    5a68:	4b140072 	blmi	505c38 <_Min_Stack_Size+0x505a38>
    5a6c:	01000029 	tsteq	r0, r9, lsr #32
    5a70:	00000523 	andeq	r0, r0, r3, lsr #10
    5a74:	00360000 	eorseq	r0, r6, r0
    5a78:	9c010000 	stcls	0, cr0, [r1], {-0}
    5a7c:	00000cc5 	andeq	r0, r0, r5, asr #25
    5a80:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5a84:	05230100 	streq	r0, [r3, #-256]!	; 0xffffff00
    5a88:	000004ca 	andeq	r0, r0, sl, asr #9
    5a8c:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5a90:	000024e9 	andeq	r2, r0, r9, ror #9
    5a94:	93052301 	movwls	r2, #21249	; 0x5301
    5a98:	02000000 	andeq	r0, r0, #0
    5a9c:	d0166a91 	mulsle	r6, r1, sl
    5aa0:	01000023 	tsteq	r0, r3, lsr #32
    5aa4:	00930525 	addseq	r0, r3, r5, lsr #10
    5aa8:	91020000 	mrsls	r0, (UNDEF: 2)
    5aac:	f0140076 			; <UNDEFINED> instruction: 0xf0140076
    5ab0:	01000022 	tsteq	r0, r2, lsr #32
    5ab4:	0000053b 	andeq	r0, r0, fp, lsr r5
    5ab8:	003a0000 	eorseq	r0, sl, r0
    5abc:	9c010000 	stcls	0, cr0, [r1], {-0}
    5ac0:	00000d09 	andeq	r0, r0, r9, lsl #26
    5ac4:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5ac8:	053b0100 	ldreq	r0, [fp, #-256]!	; 0xffffff00
    5acc:	000004ca 	andeq	r0, r0, sl, asr #9
    5ad0:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5ad4:	000024e9 	andeq	r2, r0, r9, ror #9
    5ad8:	93053b01 	movwls	r3, #23297	; 0x5b01
    5adc:	02000000 	andeq	r0, r0, #0
    5ae0:	d0166a91 	mulsle	r6, r1, sl
    5ae4:	01000023 	tsteq	r0, r3, lsr #32
    5ae8:	0093053d 	addseq	r0, r3, sp, lsr r5
    5aec:	91020000 	mrsls	r0, (UNDEF: 2)
    5af0:	5f140076 	svcpl	0x00140076
    5af4:	01000029 	tsteq	r0, r9, lsr #32
    5af8:	00000553 	andeq	r0, r0, r3, asr r5
    5afc:	00360000 	eorseq	r0, r6, r0
    5b00:	9c010000 	stcls	0, cr0, [r1], {-0}
    5b04:	00000d4d 	andeq	r0, r0, sp, asr #26
    5b08:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5b0c:	05530100 	ldrbeq	r0, [r3, #-256]	; 0xffffff00
    5b10:	000004ca 	andeq	r0, r0, sl, asr #9
    5b14:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5b18:	000024e9 	andeq	r2, r0, r9, ror #9
    5b1c:	93055301 	movwls	r5, #21249	; 0x5301
    5b20:	02000000 	andeq	r0, r0, #0
    5b24:	d9166a91 	ldmdble	r6, {r0, r4, r7, r9, fp, sp, lr}
    5b28:	01000023 	tsteq	r0, r3, lsr #32
    5b2c:	00930555 	addseq	r0, r3, r5, asr r5
    5b30:	91020000 	mrsls	r0, (UNDEF: 2)
    5b34:	61140076 	tstvs	r4, r6, ror r0
    5b38:	01000023 	tsteq	r0, r3, lsr #32
    5b3c:	0000056b 	andeq	r0, r0, fp, ror #10
    5b40:	003a0000 	eorseq	r0, sl, r0
    5b44:	9c010000 	stcls	0, cr0, [r1], {-0}
    5b48:	00000d91 	muleq	r0, r1, sp
    5b4c:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5b50:	056b0100 	strbeq	r0, [fp, #-256]!	; 0xffffff00
    5b54:	000004ca 	andeq	r0, r0, sl, asr #9
    5b58:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5b5c:	000024e9 	andeq	r2, r0, r9, ror #9
    5b60:	93056b01 	movwls	r6, #23297	; 0x5b01
    5b64:	02000000 	andeq	r0, r0, #0
    5b68:	d9166a91 	ldmdble	r6, {r0, r4, r7, r9, fp, sp, lr}
    5b6c:	01000023 	tsteq	r0, r3, lsr #32
    5b70:	0093056d 	addseq	r0, r3, sp, ror #10
    5b74:	91020000 	mrsls	r0, (UNDEF: 2)
    5b78:	39140076 	ldmdbcc	r4, {r1, r2, r4, r5, r6}
    5b7c:	01000024 	tsteq	r0, r4, lsr #32
    5b80:	00000581 	andeq	r0, r0, r1, lsl #11
    5b84:	003e0000 	eorseq	r0, lr, r0
    5b88:	9c010000 	stcls	0, cr0, [r1], {-0}
    5b8c:	00000dc6 	andeq	r0, r0, r6, asr #27
    5b90:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5b94:	05810100 	streq	r0, [r1, #256]	; 0x100
    5b98:	000004ca 	andeq	r0, r0, sl, asr #9
    5b9c:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    5ba0:	00001713 	andeq	r1, r0, r3, lsl r7
    5ba4:	01058101 	tsteq	r5, r1, lsl #2
    5ba8:	02000001 	andeq	r0, r0, #1
    5bac:	14007391 	strne	r7, [r0], #-913	; 0xfffffc6f
    5bb0:	000026a6 	andeq	r2, r0, r6, lsr #13
    5bb4:	00059901 	andeq	r9, r5, r1, lsl #18
    5bb8:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    5bbc:	01000000 	mrseq	r0, (UNDEF: 0)
    5bc0:	000dfb9c 	muleq	sp, ip, fp
    5bc4:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    5bc8:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    5bcc:	0004ca05 	andeq	ip, r4, r5, lsl #20
    5bd0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5bd4:	00171315 	andseq	r1, r7, r5, lsl r3
    5bd8:	05990100 	ldreq	r0, [r9, #256]	; 0x100
    5bdc:	00000101 	andeq	r0, r0, r1, lsl #2
    5be0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    5be4:	00263414 	eoreq	r3, r6, r4, lsl r4
    5be8:	05b20100 	ldreq	r0, [r2, #256]!	; 0x100
    5bec:	00000000 	andeq	r0, r0, r0
    5bf0:	0000003e 	andeq	r0, r0, lr, lsr r0
    5bf4:	0e309c01 	cdpeq	12, 3, cr9, cr0, cr1, {0}
    5bf8:	d2150000 	andsle	r0, r5, #0
    5bfc:	01000027 	tsteq	r0, r7, lsr #32
    5c00:	04ca05b2 	strbeq	r0, [sl], #1458	; 0x5b2
    5c04:	91020000 	mrsls	r0, (UNDEF: 2)
    5c08:	17131574 			; <UNDEFINED> instruction: 0x17131574
    5c0c:	b2010000 	andlt	r0, r1, #0
    5c10:	00010105 	andeq	r0, r1, r5, lsl #2
    5c14:	73910200 	orrsvc	r0, r1, #0, 4
    5c18:	2ce51400 	cfstrdcs	mvd1, [r5]
    5c1c:	cb010000 	blgt	45c24 <_Min_Stack_Size+0x45a24>
    5c20:	00000005 	andeq	r0, r0, r5
    5c24:	00003e00 	andeq	r3, r0, r0, lsl #28
    5c28:	659c0100 	ldrvs	r0, [ip, #256]	; 0x100
    5c2c:	1500000e 	strne	r0, [r0, #-14]
    5c30:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    5c34:	ca05cb01 	bgt	178840 <_Min_Stack_Size+0x178640>
    5c38:	02000004 	andeq	r0, r0, #4
    5c3c:	13157491 	tstne	r5, #-1862270976	; 0x91000000
    5c40:	01000017 	tsteq	r0, r7, lsl r0
    5c44:	010105cb 	smlabteq	r1, fp, r5, r0
    5c48:	91020000 	mrsls	r0, (UNDEF: 2)
    5c4c:	50140073 	andspl	r0, r4, r3, ror r0
    5c50:	01000026 	tsteq	r0, r6, lsr #32
    5c54:	000005e5 	andeq	r0, r0, r5, ror #11
    5c58:	00360000 	eorseq	r0, r6, r0
    5c5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5c60:	00000ea9 	andeq	r0, r0, r9, lsr #29
    5c64:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5c68:	05e50100 	strbeq	r0, [r5, #256]!	; 0x100
    5c6c:	000004ca 	andeq	r0, r0, sl, asr #9
    5c70:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5c74:	00002505 	andeq	r2, r0, r5, lsl #10
    5c78:	9305e501 	movwls	lr, #21761	; 0x5501
    5c7c:	02000000 	andeq	r0, r0, #0
    5c80:	d0166a91 	mulsle	r6, r1, sl
    5c84:	01000023 	tsteq	r0, r3, lsr #32
    5c88:	009305e7 	addseq	r0, r3, r7, ror #11
    5c8c:	91020000 	mrsls	r0, (UNDEF: 2)
    5c90:	79140076 	ldmdbvc	r4, {r1, r2, r4, r5, r6}
    5c94:	01000024 	tsteq	r0, r4, lsr #32
    5c98:	000005fe 	strdeq	r0, [r0], -lr
    5c9c:	003a0000 	eorseq	r0, sl, r0
    5ca0:	9c010000 	stcls	0, cr0, [r1], {-0}
    5ca4:	00000eed 	andeq	r0, r0, sp, ror #29
    5ca8:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5cac:	05fe0100 	ldrbeq	r0, [lr, #256]!	; 0x100
    5cb0:	000004ca 	andeq	r0, r0, sl, asr #9
    5cb4:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5cb8:	00002505 	andeq	r2, r0, r5, lsl #10
    5cbc:	9305fe01 	movwls	pc, #24065	; 0x5e01	; <UNPREDICTABLE>
    5cc0:	02000000 	andeq	r0, r0, #0
    5cc4:	d0166a91 	mulsle	r6, r1, sl
    5cc8:	01000023 	tsteq	r0, r3, lsr #32
    5ccc:	00930600 	addseq	r0, r3, r0, lsl #12
    5cd0:	91020000 	mrsls	r0, (UNDEF: 2)
    5cd4:	24140076 	ldrcs	r0, [r4], #-118	; 0xffffff8a
    5cd8:	0100002e 	tsteq	r0, lr, lsr #32
    5cdc:	00000616 	andeq	r0, r0, r6, lsl r6
    5ce0:	00360000 	eorseq	r0, r6, r0
    5ce4:	9c010000 	stcls	0, cr0, [r1], {-0}
    5ce8:	00000f31 	andeq	r0, r0, r1, lsr pc
    5cec:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5cf0:	06160100 	ldreq	r0, [r6], -r0, lsl #2
    5cf4:	000004ca 	andeq	r0, r0, sl, asr #9
    5cf8:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5cfc:	00002505 	andeq	r2, r0, r5, lsl #10
    5d00:	93061601 	movwls	r1, #26113	; 0x6601
    5d04:	02000000 	andeq	r0, r0, #0
    5d08:	d9166a91 	ldmdble	r6, {r0, r4, r7, r9, fp, sp, lr}
    5d0c:	01000023 	tsteq	r0, r3, lsr #32
    5d10:	00930618 	addseq	r0, r3, r8, lsl r6
    5d14:	91020000 	mrsls	r0, (UNDEF: 2)
    5d18:	7e140076 	mrcvc	0, 0, r0, cr4, cr6, {3}
    5d1c:	0100002c 	tsteq	r0, ip, lsr #32
    5d20:	0000062e 	andeq	r0, r0, lr, lsr #12
    5d24:	003a0000 	eorseq	r0, sl, r0
    5d28:	9c010000 	stcls	0, cr0, [r1], {-0}
    5d2c:	00000f75 	andeq	r0, r0, r5, ror pc
    5d30:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5d34:	062e0100 	strteq	r0, [lr], -r0, lsl #2
    5d38:	000004ca 	andeq	r0, r0, sl, asr #9
    5d3c:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5d40:	00002505 	andeq	r2, r0, r5, lsl #10
    5d44:	93062e01 	movwls	r2, #28161	; 0x6e01
    5d48:	02000000 	andeq	r0, r0, #0
    5d4c:	d9166a91 	ldmdble	r6, {r0, r4, r7, r9, fp, sp, lr}
    5d50:	01000023 	tsteq	r0, r3, lsr #32
    5d54:	00930630 	addseq	r0, r3, r0, lsr r6
    5d58:	91020000 	mrsls	r0, (UNDEF: 2)
    5d5c:	4d140076 	ldcmi	0, cr0, [r4, #-472]	; 0xfffffe28
    5d60:	0100002e 	tsteq	r0, lr, lsr #32
    5d64:	00000646 	andeq	r0, r0, r6, asr #12
    5d68:	00360000 	eorseq	r0, r6, r0
    5d6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5d70:	00000fb9 			; <UNDEFINED> instruction: 0x00000fb9
    5d74:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5d78:	06460100 	strbeq	r0, [r6], -r0, lsl #2
    5d7c:	000004ca 	andeq	r0, r0, sl, asr #9
    5d80:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5d84:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
    5d88:	93064601 	movwls	r4, #26113	; 0x6601
    5d8c:	02000000 	andeq	r0, r0, #0
    5d90:	d0166a91 	mulsle	r6, r1, sl
    5d94:	01000023 	tsteq	r0, r3, lsr #32
    5d98:	00930648 	addseq	r0, r3, r8, asr #12
    5d9c:	91020000 	mrsls	r0, (UNDEF: 2)
    5da0:	71140076 	tstvc	r4, r6, ror r0
    5da4:	0100002b 	tsteq	r0, fp, lsr #32
    5da8:	00000660 	andeq	r0, r0, r0, ror #12
    5dac:	003a0000 	eorseq	r0, sl, r0
    5db0:	9c010000 	stcls	0, cr0, [r1], {-0}
    5db4:	00000ffd 	strdeq	r0, [r0], -sp
    5db8:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5dbc:	06600100 	strbteq	r0, [r0], -r0, lsl #2
    5dc0:	000004ca 	andeq	r0, r0, sl, asr #9
    5dc4:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5dc8:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
    5dcc:	93066001 	movwls	r6, #24577	; 0x6001
    5dd0:	02000000 	andeq	r0, r0, #0
    5dd4:	d0166a91 	mulsle	r6, r1, sl
    5dd8:	01000023 	tsteq	r0, r3, lsr #32
    5ddc:	00930662 	addseq	r0, r3, r2, ror #12
    5de0:	91020000 	mrsls	r0, (UNDEF: 2)
    5de4:	12140076 	andsne	r0, r4, #118	; 0x76
    5de8:	0100002e 	tsteq	r0, lr, lsr #32
    5dec:	00000679 	andeq	r0, r0, r9, ror r6
    5df0:	00360000 	eorseq	r0, r6, r0
    5df4:	9c010000 	stcls	0, cr0, [r1], {-0}
    5df8:	00001041 	andeq	r1, r0, r1, asr #32
    5dfc:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5e00:	06790100 	ldrbteq	r0, [r9], -r0, lsl #2
    5e04:	000004ca 	andeq	r0, r0, sl, asr #9
    5e08:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5e0c:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
    5e10:	93067901 	movwls	r7, #26881	; 0x6901
    5e14:	02000000 	andeq	r0, r0, #0
    5e18:	d9166a91 	ldmdble	r6, {r0, r4, r7, r9, fp, sp, lr}
    5e1c:	01000023 	tsteq	r0, r3, lsr #32
    5e20:	0093067b 	addseq	r0, r3, fp, ror r6
    5e24:	91020000 	mrsls	r0, (UNDEF: 2)
    5e28:	83140076 	tsthi	r4, #118	; 0x76
    5e2c:	0100002b 	tsteq	r0, fp, lsr #32
    5e30:	00000692 	muleq	r0, r2, r6
    5e34:	003a0000 	eorseq	r0, sl, r0
    5e38:	9c010000 	stcls	0, cr0, [r1], {-0}
    5e3c:	00001085 	andeq	r1, r0, r5, lsl #1
    5e40:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5e44:	06920100 	ldreq	r0, [r2], r0, lsl #2
    5e48:	000004ca 	andeq	r0, r0, sl, asr #9
    5e4c:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5e50:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
    5e54:	93069201 	movwls	r9, #25089	; 0x6201
    5e58:	02000000 	andeq	r0, r0, #0
    5e5c:	d9166a91 	ldmdble	r6, {r0, r4, r7, r9, fp, sp, lr}
    5e60:	01000023 	tsteq	r0, r3, lsr #32
    5e64:	00930694 	umullseq	r0, r3, r4, r6
    5e68:	91020000 	mrsls	r0, (UNDEF: 2)
    5e6c:	75140076 	ldrvc	r0, [r4, #-118]	; 0xffffff8a
    5e70:	01000023 	tsteq	r0, r3, lsr #32
    5e74:	000006ab 	andeq	r0, r0, fp, lsr #13
    5e78:	00360000 	eorseq	r0, r6, r0
    5e7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5e80:	000010c9 	andeq	r1, r0, r9, asr #1
    5e84:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5e88:	06ab0100 	strteq	r0, [fp], r0, lsl #2
    5e8c:	000004ca 	andeq	r0, r0, sl, asr #9
    5e90:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5e94:	00002de3 	andeq	r2, r0, r3, ror #27
    5e98:	9306ab01 	movwls	sl, #27393	; 0x6b01
    5e9c:	02000000 	andeq	r0, r0, #0
    5ea0:	d0166a91 	mulsle	r6, r1, sl
    5ea4:	01000023 	tsteq	r0, r3, lsr #32
    5ea8:	009306ad 	addseq	r0, r3, sp, lsr #13
    5eac:	91020000 	mrsls	r0, (UNDEF: 2)
    5eb0:	a9140076 	ldmdbge	r4, {r1, r2, r4, r5, r6}
    5eb4:	0100002d 	tsteq	r0, sp, lsr #32
    5eb8:	000006c5 	andeq	r0, r0, r5, asr #13
    5ebc:	003a0000 	eorseq	r0, sl, r0
    5ec0:	9c010000 	stcls	0, cr0, [r1], {-0}
    5ec4:	0000110d 	andeq	r1, r0, sp, lsl #2
    5ec8:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5ecc:	06c50100 	strbeq	r0, [r5], r0, lsl #2
    5ed0:	000004ca 	andeq	r0, r0, sl, asr #9
    5ed4:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5ed8:	00002de3 	andeq	r2, r0, r3, ror #27
    5edc:	9306c501 	movwls	ip, #25857	; 0x6501
    5ee0:	02000000 	andeq	r0, r0, #0
    5ee4:	d0166a91 	mulsle	r6, r1, sl
    5ee8:	01000023 	tsteq	r0, r3, lsr #32
    5eec:	009306c7 	addseq	r0, r3, r7, asr #13
    5ef0:	91020000 	mrsls	r0, (UNDEF: 2)
    5ef4:	18140076 	ldmdane	r4, {r1, r2, r4, r5, r6}
    5ef8:	01000029 	tsteq	r0, r9, lsr #32
    5efc:	000006dd 	ldrdeq	r0, [r0], -sp
    5f00:	00360000 	eorseq	r0, r6, r0
    5f04:	9c010000 	stcls	0, cr0, [r1], {-0}
    5f08:	00001151 	andeq	r1, r0, r1, asr r1
    5f0c:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5f10:	06dd0100 	ldrbeq	r0, [sp], r0, lsl #2
    5f14:	000004ca 	andeq	r0, r0, sl, asr #9
    5f18:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5f1c:	00002de3 	andeq	r2, r0, r3, ror #27
    5f20:	9306dd01 	movwls	sp, #27905	; 0x6d01
    5f24:	02000000 	andeq	r0, r0, #0
    5f28:	d9166a91 	ldmdble	r6, {r0, r4, r7, r9, fp, sp, lr}
    5f2c:	01000023 	tsteq	r0, r3, lsr #32
    5f30:	009306df 			; <UNDEFINED> instruction: 0x009306df
    5f34:	91020000 	mrsls	r0, (UNDEF: 2)
    5f38:	ac140076 	ldcge	0, cr0, [r4], {118}	; 0x76
    5f3c:	0100002c 	tsteq	r0, ip, lsr #32
    5f40:	000006f5 	strdeq	r0, [r0], -r5
    5f44:	003a0000 	eorseq	r0, sl, r0
    5f48:	9c010000 	stcls	0, cr0, [r1], {-0}
    5f4c:	00001195 	muleq	r0, r5, r1
    5f50:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5f54:	06f50100 	ldrbteq	r0, [r5], r0, lsl #2
    5f58:	000004ca 	andeq	r0, r0, sl, asr #9
    5f5c:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5f60:	00002de3 	andeq	r2, r0, r3, ror #27
    5f64:	9306f501 	movwls	pc, #25857	; 0x6501	; <UNPREDICTABLE>
    5f68:	02000000 	andeq	r0, r0, #0
    5f6c:	d9166a91 	ldmdble	r6, {r0, r4, r7, r9, fp, sp, lr}
    5f70:	01000023 	tsteq	r0, r3, lsr #32
    5f74:	009306f7 			; <UNDEFINED> instruction: 0x009306f7
    5f78:	91020000 	mrsls	r0, (UNDEF: 2)
    5f7c:	35140076 	ldrcc	r0, [r4, #-118]	; 0xffffff8a
    5f80:	01000029 	tsteq	r0, r9, lsr #32
    5f84:	0000070d 	andeq	r0, r0, sp, lsl #14
    5f88:	00360000 	eorseq	r0, r6, r0
    5f8c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5f90:	000011d9 	ldrdeq	r1, [r0], -r9
    5f94:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5f98:	070d0100 	streq	r0, [sp, -r0, lsl #2]
    5f9c:	000004ca 	andeq	r0, r0, sl, asr #9
    5fa0:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5fa4:	000026de 	ldrdeq	r2, [r0], -lr
    5fa8:	93070d01 	movwls	r0, #32001	; 0x7d01
    5fac:	02000000 	andeq	r0, r0, #0
    5fb0:	b4166a91 	ldrlt	r6, [r6], #-2705	; 0xfffff56f
    5fb4:	01000026 	tsteq	r0, r6, lsr #32
    5fb8:	0093070f 	addseq	r0, r3, pc, lsl #14
    5fbc:	91020000 	mrsls	r0, (UNDEF: 2)
    5fc0:	ce140076 	mrcgt	0, 0, r0, cr4, cr6, {3}
    5fc4:	0100002c 	tsteq	r0, ip, lsr #32
    5fc8:	00000724 	andeq	r0, r0, r4, lsr #14
    5fcc:	00360000 	eorseq	r0, r6, r0
    5fd0:	9c010000 	stcls	0, cr0, [r1], {-0}
    5fd4:	0000121d 	andeq	r1, r0, sp, lsl r2
    5fd8:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5fdc:	07240100 	streq	r0, [r4, -r0, lsl #2]!
    5fe0:	000004ca 	andeq	r0, r0, sl, asr #9
    5fe4:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5fe8:	00002b95 	muleq	r0, r5, fp
    5fec:	93072401 	movwls	r2, #29697	; 0x7401
    5ff0:	02000000 	andeq	r0, r0, #0
    5ff4:	b4166a91 	ldrlt	r6, [r6], #-2705	; 0xfffff56f
    5ff8:	01000026 	tsteq	r0, r6, lsr #32
    5ffc:	00930726 	addseq	r0, r3, r6, lsr #14
    6000:	91020000 	mrsls	r0, (UNDEF: 2)
    6004:	23140076 	tstcs	r4, #118	; 0x76
    6008:	01000024 	tsteq	r0, r4, lsr #32
    600c:	0000073c 	andeq	r0, r0, ip, lsr r7
    6010:	003a0000 	eorseq	r0, sl, r0
    6014:	9c010000 	stcls	0, cr0, [r1], {-0}
    6018:	00001261 	andeq	r1, r0, r1, ror #4
    601c:	0027d215 	eoreq	sp, r7, r5, lsl r2
    6020:	073c0100 	ldreq	r0, [ip, -r0, lsl #2]!
    6024:	000004ca 	andeq	r0, r0, sl, asr #9
    6028:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    602c:	000026de 	ldrdeq	r2, [r0], -lr
    6030:	93073c01 	movwls	r3, #31745	; 0x7c01
    6034:	02000000 	andeq	r0, r0, #0
    6038:	b4166a91 	ldrlt	r6, [r6], #-2705	; 0xfffff56f
    603c:	01000026 	tsteq	r0, r6, lsr #32
    6040:	0093073e 	addseq	r0, r3, lr, lsr r7
    6044:	91020000 	mrsls	r0, (UNDEF: 2)
    6048:	bc140076 	ldclt	0, cr0, [r4], {118}	; 0x76
    604c:	01000026 	tsteq	r0, r6, lsr #32
    6050:	00000753 	andeq	r0, r0, r3, asr r7
    6054:	003a0000 	eorseq	r0, sl, r0
    6058:	9c010000 	stcls	0, cr0, [r1], {-0}
    605c:	000012a5 	andeq	r1, r0, r5, lsr #5
    6060:	0027d215 	eoreq	sp, r7, r5, lsl r2
    6064:	07530100 	ldrbeq	r0, [r3, -r0, lsl #2]
    6068:	000004ca 	andeq	r0, r0, sl, asr #9
    606c:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    6070:	00002b95 	muleq	r0, r5, fp
    6074:	93075301 	movwls	r5, #29441	; 0x7301
    6078:	02000000 	andeq	r0, r0, #0
    607c:	b4166a91 	ldrlt	r6, [r6], #-2705	; 0xfffff56f
    6080:	01000026 	tsteq	r0, r6, lsr #32
    6084:	00930755 	addseq	r0, r3, r5, asr r7
    6088:	91020000 	mrsls	r0, (UNDEF: 2)
    608c:	4b140076 	blmi	50626c <_Min_Stack_Size+0x50606c>
    6090:	0100002d 	tsteq	r0, sp, lsr #32
    6094:	0000076b 	andeq	r0, r0, fp, ror #14
    6098:	003a0000 	eorseq	r0, sl, r0
    609c:	9c010000 	stcls	0, cr0, [r1], {-0}
    60a0:	000012e9 	andeq	r1, r0, r9, ror #5
    60a4:	0027d215 	eoreq	sp, r7, r5, lsl r2
    60a8:	076b0100 	strbeq	r0, [fp, -r0, lsl #2]!
    60ac:	000004ca 	andeq	r0, r0, sl, asr #9
    60b0:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    60b4:	000026de 	ldrdeq	r2, [r0], -lr
    60b8:	93076b01 	movwls	r6, #31489	; 0x7b01
    60bc:	02000000 	andeq	r0, r0, #0
    60c0:	b4166a91 	ldrlt	r6, [r6], #-2705	; 0xfffff56f
    60c4:	01000026 	tsteq	r0, r6, lsr #32
    60c8:	0093076d 	addseq	r0, r3, sp, ror #14
    60cc:	91020000 	mrsls	r0, (UNDEF: 2)
    60d0:	fd140076 	ldc2	0, cr0, [r4, #-472]	; 0xfffffe28
    60d4:	0100002a 	tsteq	r0, sl, lsr #32
    60d8:	00000782 	andeq	r0, r0, r2, lsl #15
    60dc:	003a0000 	eorseq	r0, sl, r0
    60e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    60e4:	0000132d 	andeq	r1, r0, sp, lsr #6
    60e8:	0027d215 	eoreq	sp, r7, r5, lsl r2
    60ec:	07820100 	streq	r0, [r2, r0, lsl #2]
    60f0:	000004ca 	andeq	r0, r0, sl, asr #9
    60f4:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    60f8:	00002b95 	muleq	r0, r5, fp
    60fc:	93078201 	movwls	r8, #29185	; 0x7201
    6100:	02000000 	andeq	r0, r0, #0
    6104:	b4166a91 	ldrlt	r6, [r6], #-2705	; 0xfffff56f
    6108:	01000026 	tsteq	r0, r6, lsr #32
    610c:	00930784 	addseq	r0, r3, r4, lsl #15
    6110:	91020000 	mrsls	r0, (UNDEF: 2)
    6114:	e7140076 			; <UNDEFINED> instruction: 0xe7140076
    6118:	01000027 	tsteq	r0, r7, lsr #32
    611c:	0000079b 	muleq	r0, fp, r7
    6120:	003a0000 	eorseq	r0, sl, r0
    6124:	9c010000 	stcls	0, cr0, [r1], {-0}
    6128:	00001371 	andeq	r1, r0, r1, ror r3
    612c:	0027d215 	eoreq	sp, r7, r5, lsl r2
    6130:	079b0100 	ldreq	r0, [fp, r0, lsl #2]
    6134:	000004ca 	andeq	r0, r0, sl, asr #9
    6138:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    613c:	000026de 	ldrdeq	r2, [r0], -lr
    6140:	93079b01 	movwls	r9, #31489	; 0x7b01
    6144:	02000000 	andeq	r0, r0, #0
    6148:	b4166a91 	ldrlt	r6, [r6], #-2705	; 0xfffff56f
    614c:	01000026 	tsteq	r0, r6, lsr #32
    6150:	0093079d 	umullseq	r0, r3, sp, r7
    6154:	91020000 	mrsls	r0, (UNDEF: 2)
    6158:	fa140076 	blx	506338 <_Min_Stack_Size+0x506138>
    615c:	01000024 	tsteq	r0, r4, lsr #32
    6160:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
    6164:	00540000 	subseq	r0, r4, r0
    6168:	9c010000 	stcls	0, cr0, [r1], {-0}
    616c:	000013c4 	andeq	r1, r0, r4, asr #7
    6170:	0027d215 	eoreq	sp, r7, r5, lsl r2
    6174:	07b60100 	ldreq	r0, [r6, r0, lsl #2]!
    6178:	000004ca 	andeq	r0, r0, sl, asr #9
    617c:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    6180:	000024bb 			; <UNDEFINED> instruction: 0x000024bb
    6184:	9307b601 	movwls	fp, #30209	; 0x7601
    6188:	02000000 	andeq	r0, r0, #0
    618c:	1a156a91 	bne	560bd8 <_Min_Stack_Size+0x5609d8>
    6190:	0100002a 	tsteq	r0, sl, lsr #32
    6194:	009307b6 			; <UNDEFINED> instruction: 0x009307b6
    6198:	91020000 	mrsls	r0, (UNDEF: 2)
    619c:	6d741868 	ldclvs	8, cr1, [r4, #-416]!	; 0xfffffe60
    61a0:	b8010070 	stmdalt	r1, {r4, r5, r6}
    61a4:	00009307 	andeq	r9, r0, r7, lsl #6
    61a8:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    61ac:	29831400 	stmibcs	r3, {sl, ip}
    61b0:	d4010000 	strle	r0, [r1], #-0
    61b4:	00000007 	andeq	r0, r0, r7
    61b8:	00005400 	andeq	r5, r0, r0, lsl #8
    61bc:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    61c0:	15000014 	strne	r0, [r0, #-20]	; 0xffffffec
    61c4:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    61c8:	ca07d401 	bgt	1fb1d4 <_Min_Stack_Size+0x1fafd4>
    61cc:	02000004 	andeq	r0, r0, #4
    61d0:	bb156c91 	bllt	56141c <_Min_Stack_Size+0x56121c>
    61d4:	01000024 	tsteq	r0, r4, lsr #32
    61d8:	009307d4 			; <UNDEFINED> instruction: 0x009307d4
    61dc:	91020000 	mrsls	r0, (UNDEF: 2)
    61e0:	262b156a 	strtcs	r1, [fp], -sl, ror #10
    61e4:	d4010000 	strle	r0, [r1], #-0
    61e8:	00009307 	andeq	r9, r0, r7, lsl #6
    61ec:	68910200 	ldmvs	r1, {r9}
    61f0:	706d7418 	rsbvc	r7, sp, r8, lsl r4
    61f4:	07d60100 	ldrbeq	r0, [r6, r0, lsl #2]
    61f8:	00000093 	muleq	r0, r3, r0
    61fc:	00769102 	rsbseq	r9, r6, r2, lsl #2
    6200:	002c5714 	eoreq	r5, ip, r4, lsl r7
    6204:	07fd0100 	ldrbeq	r0, [sp, r0, lsl #2]!
    6208:	00000000 	andeq	r0, r0, r0
    620c:	000000ac 	andeq	r0, r0, ip, lsr #1
    6210:	14799c01 	ldrbtne	r9, [r9], #-3073	; 0xfffff3ff
    6214:	d2150000 	andsle	r0, r5, #0
    6218:	01000027 	tsteq	r0, r7, lsr #32
    621c:	04ca07fd 	strbeq	r0, [sl], #2045	; 0x7fd
    6220:	91020000 	mrsls	r0, (UNDEF: 2)
    6224:	24bb156c 	ldrtcs	r1, [fp], #1388	; 0x56c
    6228:	fd010000 	stc2	0, cr0, [r1, #-0]
    622c:	00009307 	andeq	r9, r0, r7, lsl #6
    6230:	6a910200 	bvs	fe446a38 <BootRAM+0xd3b71d9>
    6234:	002ca115 	eoreq	sl, ip, r5, lsl r1
    6238:	07fd0100 	ldrbeq	r0, [sp, r0, lsl #2]!
    623c:	00000093 	muleq	r0, r3, r0
    6240:	18689102 	stmdane	r8!, {r1, r8, ip, pc}^
    6244:	00706d74 	rsbseq	r6, r0, r4, ror sp
    6248:	9e07ff01 	cdpls	15, 0, cr15, cr7, cr1, {0}
    624c:	02000000 	andeq	r0, r0, #0
    6250:	49167491 	ldmdbmi	r6, {r0, r4, r7, sl, ip, sp, lr}
    6254:	0100001e 	tsteq	r0, lr, lsl r0
    6258:	00930800 	addseq	r0, r3, r0, lsl #16
    625c:	91020000 	mrsls	r0, (UNDEF: 2)
    6260:	ae140072 	mrcge	0, 0, r0, cr4, cr2, {3}
    6264:	01000023 	tsteq	r0, r3, lsr #32
    6268:	0000082c 	andeq	r0, r0, ip, lsr #16
    626c:	003e0000 	eorseq	r0, lr, r0
    6270:	9c010000 	stcls	0, cr0, [r1], {-0}
    6274:	000014ae 	andeq	r1, r0, lr, lsr #9
    6278:	0027d215 	eoreq	sp, r7, r5, lsl r2
    627c:	082c0100 	stmdaeq	ip!, {r8}
    6280:	000004ca 	andeq	r0, r0, sl, asr #9
    6284:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    6288:	00001713 	andeq	r1, r0, r3, lsl r7
    628c:	01082c01 	tsteq	r8, r1, lsl #24
    6290:	02000001 	andeq	r0, r0, #1
    6294:	14007391 	strne	r7, [r0], #-913	; 0xfffffc6f
    6298:	00002c66 	andeq	r2, r0, r6, ror #24
    629c:	00084801 	andeq	r4, r8, r1, lsl #16
    62a0:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    62a4:	01000000 	mrseq	r0, (UNDEF: 0)
    62a8:	0014e39c 	mulseq	r4, ip, r3
    62ac:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    62b0:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    62b4:	0004ca08 	andeq	ip, r4, r8, lsl #20
    62b8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    62bc:	00261a15 	eoreq	r1, r6, r5, lsl sl
    62c0:	08480100 	stmdaeq	r8, {r8}^
    62c4:	00000093 	muleq	r0, r3, r0
    62c8:	00729102 	rsbseq	r9, r2, r2, lsl #2
    62cc:	002d8314 	eoreq	r8, sp, r4, lsl r3
    62d0:	08600100 	stmdaeq	r0!, {r8}^
    62d4:	00000000 	andeq	r0, r0, r0
    62d8:	0000003e 	andeq	r0, r0, lr, lsr r0
    62dc:	15189c01 	ldrne	r9, [r8, #-3073]	; 0xfffff3ff
    62e0:	d2150000 	andsle	r0, r5, #0
    62e4:	01000027 	tsteq	r0, r7, lsr #32
    62e8:	04ca0860 	strbeq	r0, [sl], #2144	; 0x860
    62ec:	91020000 	mrsls	r0, (UNDEF: 2)
    62f0:	17131574 			; <UNDEFINED> instruction: 0x17131574
    62f4:	60010000 	andvs	r0, r1, r0
    62f8:	00010108 	andeq	r0, r1, r8, lsl #2
    62fc:	73910200 	orrsvc	r0, r1, #0, 4
    6300:	23041400 	movwcs	r1, #17408	; 0x4400
    6304:	7a010000 	bvc	4630c <_Min_Stack_Size+0x4610c>
    6308:	00000008 	andeq	r0, r0, r8
    630c:	00003600 	andeq	r3, r0, r0, lsl #12
    6310:	4d9c0100 	ldfmis	f0, [ip]
    6314:	15000015 	strne	r0, [r0, #-21]	; 0xffffffeb
    6318:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    631c:	ca087a01 	bgt	224b28 <_Min_Stack_Size+0x224928>
    6320:	02000004 	andeq	r0, r0, #4
    6324:	e5157491 	ldr	r7, [r5, #-1169]	; 0xfffffb6f
    6328:	01000022 	tsteq	r0, r2, lsr #32
    632c:	0093087a 	addseq	r0, r3, sl, ror r8
    6330:	91020000 	mrsls	r0, (UNDEF: 2)
    6334:	47140072 			; <UNDEFINED> instruction: 0x47140072
    6338:	01000028 	tsteq	r0, r8, lsr #32
    633c:	0000089a 	muleq	r0, sl, r8
    6340:	00360000 	eorseq	r0, r6, r0
    6344:	9c010000 	stcls	0, cr0, [r1], {-0}
    6348:	00001582 	andeq	r1, r0, r2, lsl #11
    634c:	0027d215 	eoreq	sp, r7, r5, lsl r2
    6350:	089a0100 	ldmeq	sl, {r8}
    6354:	000004ca 	andeq	r0, r0, sl, asr #9
    6358:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    635c:	00002342 	andeq	r2, r0, r2, asr #6
    6360:	93089a01 	movwls	r9, #35329	; 0x8a01
    6364:	02000000 	andeq	r0, r0, #0
    6368:	14007291 	strne	r7, [r0], #-657	; 0xfffffd6f
    636c:	0000275a 	andeq	r2, r0, sl, asr r7
    6370:	0008b101 	andeq	fp, r8, r1, lsl #2
    6374:	36000000 	strcc	r0, [r0], -r0
    6378:	01000000 	mrseq	r0, (UNDEF: 0)
    637c:	0015b79c 	mulseq	r5, ip, r7
    6380:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    6384:	b1010000 	mrslt	r0, (UNDEF: 1)
    6388:	0004ca08 	andeq	ip, r4, r8, lsl #20
    638c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6390:	002c9315 	eoreq	r9, ip, r5, lsl r3
    6394:	08b10100 	ldmeq	r1!, {r8}
    6398:	00000093 	muleq	r0, r3, r0
    639c:	00729102 	rsbseq	r9, r2, r2, lsl #2
    63a0:	00276e14 	eoreq	r6, r7, r4, lsl lr
    63a4:	08c60100 	stmiaeq	r6, {r8}^
    63a8:	00000000 	andeq	r0, r0, r0
    63ac:	00000036 	andeq	r0, r0, r6, lsr r0
    63b0:	15ec9c01 	strbne	r9, [ip, #3073]!	; 0xc01
    63b4:	d2150000 	andsle	r0, r5, #0
    63b8:	01000027 	tsteq	r0, r7, lsr #32
    63bc:	04ca08c6 	strbeq	r0, [sl], #2246	; 0x8c6
    63c0:	91020000 	mrsls	r0, (UNDEF: 2)
    63c4:	27461574 	smlsldxcs	r1, r6, r4, r5
    63c8:	c6010000 	strgt	r0, [r1], -r0
    63cc:	00009308 	andeq	r9, r0, r8, lsl #6
    63d0:	72910200 	addsvc	r0, r1, #0, 4
    63d4:	2d331400 	cfldrscs	mvf1, [r3, #-0]
    63d8:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    63dc:	00000008 	andeq	r0, r0, r8
    63e0:	00001c00 	andeq	r1, r0, r0, lsl #24
    63e4:	219c0100 	orrscs	r0, ip, r0, lsl #2
    63e8:	15000016 	strne	r0, [r0, #-22]	; 0xffffffea
    63ec:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    63f0:	ca08d801 	bgt	23c3fc <_Min_Stack_Size+0x23c1fc>
    63f4:	02000004 	andeq	r0, r0, #4
    63f8:	3d157491 	cfldrscc	mvf7, [r5, #-580]	; 0xfffffdbc
    63fc:	01000037 	tsteq	r0, r7, lsr r0
    6400:	009308d8 			; <UNDEFINED> instruction: 0x009308d8
    6404:	91020000 	mrsls	r0, (UNDEF: 2)
    6408:	a8140072 	ldmdage	r4, {r1, r4, r5, r6}
    640c:	01000025 	tsteq	r0, r5, lsr #32
    6410:	000008e6 	andeq	r0, r0, r6, ror #17
    6414:	001c0000 	andseq	r0, ip, r0
    6418:	9c010000 	stcls	0, cr0, [r1], {-0}
    641c:	00001656 	andeq	r1, r0, r6, asr r6
    6420:	0027d215 	eoreq	sp, r7, r5, lsl r2
    6424:	08e60100 	stmiaeq	r6!, {r8}^
    6428:	000004ca 	andeq	r0, r0, sl, asr #9
    642c:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    6430:	000025af 	andeq	r2, r0, pc, lsr #11
    6434:	9308e601 	movwls	lr, #34305	; 0x8601
    6438:	02000000 	andeq	r0, r0, #0
    643c:	14007291 	strne	r7, [r0], #-657	; 0xfffffd6f
    6440:	0000238e 	andeq	r2, r0, lr, lsl #7
    6444:	0008f401 	andeq	pc, r8, r1, lsl #8
    6448:	1c000000 	stcne	0, cr0, [r0], {-0}
    644c:	01000000 	mrseq	r0, (UNDEF: 0)
    6450:	00168b9c 	mulseq	r6, ip, fp
    6454:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    6458:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    645c:	0004ca08 	andeq	ip, r4, r8, lsl #20
    6460:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6464:	00239515 	eoreq	r9, r3, r5, lsl r5
    6468:	08f40100 	ldmeq	r4!, {r8}^
    646c:	00000093 	muleq	r0, r3, r0
    6470:	00729102 	rsbseq	r9, r2, r2, lsl #2
    6474:	00268614 	eoreq	r8, r6, r4, lsl r6
    6478:	09020100 	stmdbeq	r2, {r8}
    647c:	00000000 	andeq	r0, r0, r0
    6480:	0000001c 	andeq	r0, r0, ip, lsl r0
    6484:	16c09c01 	strbne	r9, [r0], r1, lsl #24
    6488:	d2150000 	andsle	r0, r5, #0
    648c:	01000027 	tsteq	r0, r7, lsr #32
    6490:	04ca0902 	strbeq	r0, [sl], #2306	; 0x902
    6494:	91020000 	mrsls	r0, (UNDEF: 2)
    6498:	268d1574 			; <UNDEFINED> instruction: 0x268d1574
    649c:	02010000 	andeq	r0, r1, #0
    64a0:	00009309 	andeq	r9, r0, r9, lsl #6
    64a4:	72910200 	addsvc	r0, r1, #0, 4
    64a8:	26961400 	ldrcs	r1, [r6], r0, lsl #8
    64ac:	10010000 	andne	r0, r1, r0
    64b0:	00000009 	andeq	r0, r0, r9
    64b4:	00001c00 	andeq	r1, r0, r0, lsl #24
    64b8:	f59c0100 			; <UNDEFINED> instruction: 0xf59c0100
    64bc:	15000016 	strne	r0, [r0, #-22]	; 0xffffffea
    64c0:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    64c4:	ca091001 	bgt	24a4d0 <_Min_Stack_Size+0x24a2d0>
    64c8:	02000004 	andeq	r0, r0, #4
    64cc:	9d157491 	cfldrsls	mvf7, [r5, #-580]	; 0xfffffdbc
    64d0:	01000026 	tsteq	r0, r6, lsr #32
    64d4:	00930910 	addseq	r0, r3, r0, lsl r9
    64d8:	91020000 	mrsls	r0, (UNDEF: 2)
    64dc:	c0140072 	andsgt	r0, r4, r2, ror r0
    64e0:	01000029 	tsteq	r0, r9, lsr #32
    64e4:	0000091e 	andeq	r0, r0, lr, lsl r9
    64e8:	001e0000 	andseq	r0, lr, r0
    64ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    64f0:	0000172a 	andeq	r1, r0, sl, lsr #14
    64f4:	0027d215 	eoreq	sp, r7, r5, lsl r2
    64f8:	091e0100 	ldmdbeq	lr, {r8}
    64fc:	000004ca 	andeq	r0, r0, sl, asr #9
    6500:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    6504:	000029c7 	andeq	r2, r0, r7, asr #19
    6508:	93091e01 	movwls	r1, #40449	; 0x9e01
    650c:	02000000 	andeq	r0, r0, #0
    6510:	14007291 	strne	r7, [r0], #-657	; 0xfffffd6f
    6514:	0000285f 	andeq	r2, r0, pc, asr r8
    6518:	00093101 	andeq	r3, r9, r1, lsl #2
    651c:	36000000 	strcc	r0, [r0], -r0
    6520:	01000000 	mrseq	r0, (UNDEF: 0)
    6524:	00175f9c 	mulseq	r7, ip, pc	; <UNPREDICTABLE>
    6528:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    652c:	31010000 	mrscc	r0, (UNDEF: 1)
    6530:	0004ca09 	andeq	ip, r4, r9, lsl #20
    6534:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6538:	002def15 	eoreq	lr, sp, r5, lsl pc
    653c:	09310100 	ldmdbeq	r1!, {r8}
    6540:	00000093 	muleq	r0, r3, r0
    6544:	00729102 	rsbseq	r9, r2, r2, lsl #2
    6548:	002ab914 	eoreq	fp, sl, r4, lsl r9
    654c:	09470100 	stmdbeq	r7, {r8}^
    6550:	00000000 	andeq	r0, r0, r0
    6554:	0000003a 	andeq	r0, r0, sl, lsr r0
    6558:	17949c01 	ldrne	r9, [r4, r1, lsl #24]
    655c:	d2150000 	andsle	r0, r5, #0
    6560:	01000027 	tsteq	r0, r7, lsr #32
    6564:	04ca0947 	strbeq	r0, [sl], #2375	; 0x947
    6568:	91020000 	mrsls	r0, (UNDEF: 2)
    656c:	2def1574 	cfstr64cs	mvdx1, [pc, #464]!	; 6744 <_Min_Stack_Size+0x6544>
    6570:	47010000 	strmi	r0, [r1, -r0]
    6574:	00009309 	andeq	r9, r0, r9, lsl #6
    6578:	72910200 	addsvc	r0, r1, #0, 4
    657c:	2bd51400 	blcs	ff54b584 <BootRAM+0xe4bbd25>
    6580:	5d010000 	stcpl	0, cr0, [r1, #-0]
    6584:	00000009 	andeq	r0, r0, r9
    6588:	00003600 	andeq	r3, r0, r0, lsl #12
    658c:	c99c0100 	ldmibgt	ip, {r8}
    6590:	15000017 	strne	r0, [r0, #-23]	; 0xffffffe9
    6594:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    6598:	ca095d01 	bgt	25d9a4 <_Min_Stack_Size+0x25d7a4>
    659c:	02000004 	andeq	r0, r0, #4
    65a0:	ef157491 	svc	0x00157491
    65a4:	0100002d 	tsteq	r0, sp, lsr #32
    65a8:	0093095d 	addseq	r0, r3, sp, asr r9
    65ac:	91020000 	mrsls	r0, (UNDEF: 2)
    65b0:	39140072 	ldmdbcc	r4, {r1, r4, r5, r6}
    65b4:	0100002e 	tsteq	r0, lr, lsr #32
    65b8:	00000973 	andeq	r0, r0, r3, ror r9
    65bc:	003a0000 	eorseq	r0, sl, r0
    65c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    65c4:	000017fe 	strdeq	r1, [r0], -lr
    65c8:	0027d215 	eoreq	sp, r7, r5, lsl r2
    65cc:	09730100 	ldmdbeq	r3!, {r8}^
    65d0:	000004ca 	andeq	r0, r0, sl, asr #9
    65d4:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    65d8:	00002def 	andeq	r2, r0, pc, ror #27
    65dc:	93097301 	movwls	r7, #37633	; 0x9301
    65e0:	02000000 	andeq	r0, r0, #0
    65e4:	14007291 	strne	r7, [r0], #-657	; 0xfffffd6f
    65e8:	00002a05 	andeq	r2, r0, r5, lsl #20
    65ec:	00098901 	andeq	r8, r9, r1, lsl #18
    65f0:	36000000 	strcc	r0, [r0], -r0
    65f4:	01000000 	mrseq	r0, (UNDEF: 0)
    65f8:	0018339c 	mulseq	r8, ip, r3
    65fc:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    6600:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    6604:	0004ca09 	andeq	ip, r4, r9, lsl #20
    6608:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    660c:	0025a015 	eoreq	sl, r5, r5, lsl r0
    6610:	09890100 	stmibeq	r9, {r8}
    6614:	00000093 	muleq	r0, r3, r0
    6618:	00729102 	rsbseq	r9, r2, r2, lsl #2
    661c:	00273619 	eoreq	r3, r7, r9, lsl r6
    6620:	09990100 	ldmibeq	r9, {r8}
    6624:	00000093 	muleq	r0, r3, r0
    6628:	00000000 	andeq	r0, r0, r0
    662c:	00000018 	andeq	r0, r0, r8, lsl r0
    6630:	185d9c01 	ldmdane	sp, {r0, sl, fp, ip, pc}^
    6634:	d2150000 	andsle	r0, r5, #0
    6638:	01000027 	tsteq	r0, r7, lsr #32
    663c:	04ca0999 	strbeq	r0, [sl], #2457	; 0x999
    6640:	91020000 	mrsls	r0, (UNDEF: 2)
    6644:	cb190074 	blgt	64681c <_Min_Stack_Size+0x64661c>
    6648:	01000025 	tsteq	r0, r5, lsr #32
    664c:	009309a6 	addseq	r0, r3, r6, lsr #19
    6650:	00000000 	andeq	r0, r0, r0
    6654:	00180000 	andseq	r0, r8, r0
    6658:	9c010000 	stcls	0, cr0, [r1], {-0}
    665c:	00001887 	andeq	r1, r0, r7, lsl #17
    6660:	0027d215 	eoreq	sp, r7, r5, lsl r2
    6664:	09a60100 	stmibeq	r6!, {r8}
    6668:	000004ca 	andeq	r0, r0, sl, asr #9
    666c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    6670:	0025db19 	eoreq	sp, r5, r9, lsl fp
    6674:	09b30100 	ldmibeq	r3!, {r8}
    6678:	00000093 	muleq	r0, r3, r0
    667c:	00000000 	andeq	r0, r0, r0
    6680:	00000018 	andeq	r0, r0, r8, lsl r0
    6684:	18b19c01 	ldmne	r1!, {r0, sl, fp, ip, pc}
    6688:	d2150000 	andsle	r0, r5, #0
    668c:	01000027 	tsteq	r0, r7, lsr #32
    6690:	04ca09b3 	strbeq	r0, [sl], #2483	; 0x9b3
    6694:	91020000 	mrsls	r0, (UNDEF: 2)
    6698:	eb190074 	bl	646870 <_Min_Stack_Size+0x646670>
    669c:	01000025 	tsteq	r0, r5, lsr #32
    66a0:	009309c0 	addseq	r0, r3, r0, asr #19
    66a4:	00000000 	andeq	r0, r0, r0
    66a8:	001a0000 	andseq	r0, sl, r0
    66ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    66b0:	000018db 	ldrdeq	r1, [r0], -fp
    66b4:	0027d215 	eoreq	sp, r7, r5, lsl r2
    66b8:	09c00100 	stmibeq	r0, {r8}^
    66bc:	000004ca 	andeq	r0, r0, sl, asr #9
    66c0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    66c4:	00271019 	eoreq	r1, r7, r9, lsl r0
    66c8:	09cd0100 	stmibeq	sp, {r8}^
    66cc:	00000093 	muleq	r0, r3, r0
    66d0:	00000000 	andeq	r0, r0, r0
    66d4:	00000018 	andeq	r0, r0, r8, lsl r0
    66d8:	19059c01 	stmdbne	r5, {r0, sl, fp, ip, pc}
    66dc:	d2150000 	andsle	r0, r5, #0
    66e0:	01000027 	tsteq	r0, r7, lsr #32
    66e4:	04ca09cd 	strbeq	r0, [sl], #2509	; 0x9cd
    66e8:	91020000 	mrsls	r0, (UNDEF: 2)
    66ec:	ff190074 			; <UNDEFINED> instruction: 0xff190074
    66f0:	01000026 	tsteq	r0, r6, lsr #32
    66f4:	009309da 			; <UNDEFINED> instruction: 0x009309da
    66f8:	00000000 	andeq	r0, r0, r0
    66fc:	00180000 	andseq	r0, r8, r0
    6700:	9c010000 	stcls	0, cr0, [r1], {-0}
    6704:	0000192f 	andeq	r1, r0, pc, lsr #18
    6708:	0027d215 	eoreq	sp, r7, r5, lsl r2
    670c:	09da0100 	ldmibeq	sl, {r8}^
    6710:	000004ca 	andeq	r0, r0, sl, asr #9
    6714:	00749102 	rsbseq	r9, r4, r2, lsl #2
    6718:	00278819 	eoreq	r8, r7, r9, lsl r8
    671c:	09fc0100 	ldmibeq	ip!, {r8}^
    6720:	000000cf 	andeq	r0, r0, pc, asr #1
    6724:	00000000 	andeq	r0, r0, r0
    6728:	00000036 	andeq	r0, r0, r6, lsr r0
    672c:	19779c01 	ldmdbne	r7!, {r0, sl, fp, ip, pc}^
    6730:	d2150000 	andsle	r0, r5, #0
    6734:	01000027 	tsteq	r0, r7, lsr #32
    6738:	04ca09fc 	strbeq	r0, [sl], #2556	; 0x9fc
    673c:	91020000 	mrsls	r0, (UNDEF: 2)
    6740:	2385156c 	orrcs	r1, r5, #108, 10	; 0x1b000000
    6744:	fc010000 	stc2	0, cr0, [r1], {-0}
    6748:	00009309 	andeq	r9, r0, r9, lsl #6
    674c:	6a910200 	bvs	fe446f54 <BootRAM+0xd3b76f5>
    6750:	0019ae16 	andseq	sl, r9, r6, lsl lr
    6754:	09fe0100 	ldmibeq	lr!, {r8}^
    6758:	000000db 	ldrdeq	r0, [r0], -fp
    675c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    6760:	00267814 	eoreq	r7, r6, r4, lsl r8
    6764:	0a280100 	beq	a06b6c <_Min_Stack_Size+0xa0696c>
    6768:	00000000 	andeq	r0, r0, r0
    676c:	00000020 	andeq	r0, r0, r0, lsr #32
    6770:	19ac9c01 	stmibne	ip!, {r0, sl, fp, ip, pc}
    6774:	d2150000 	andsle	r0, r5, #0
    6778:	01000027 	tsteq	r0, r7, lsr #32
    677c:	04ca0a28 	strbeq	r0, [sl], #2600	; 0xa28
    6780:	91020000 	mrsls	r0, (UNDEF: 2)
    6784:	23851574 	orrcs	r1, r5, #116, 10	; 0x1d000000
    6788:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    678c:	0000930a 	andeq	r9, r0, sl, lsl #6
    6790:	72910200 	addsvc	r0, r1, #0, 4
    6794:	29d01900 	ldmibcs	r0, {r8, fp, ip}^
    6798:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    679c:	0000db0a 	andeq	sp, r0, sl, lsl #22
    67a0:	00614c00 	rsbeq	r4, r1, r0, lsl #24
    67a4:	00005208 	andeq	r5, r0, r8, lsl #4
    67a8:	129c0100 	addsne	r0, ip, #0, 2
    67ac:	1500001a 	strne	r0, [r0, #-26]	; 0xffffffe6
    67b0:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    67b4:	ca0a4801 	bgt	2987c0 <_Min_Stack_Size+0x2985c0>
    67b8:	02000004 	andeq	r0, r0, #4
    67bc:	22156c91 	andscs	r6, r5, #37120	; 0x9100
    67c0:	0100002b 	tsteq	r0, fp, lsr #32
    67c4:	00930a48 	addseq	r0, r3, r8, asr #20
    67c8:	91020000 	mrsls	r0, (UNDEF: 2)
    67cc:	19ae166a 	stmibne	lr!, {r1, r3, r5, r6, r9, sl, ip}
    67d0:	4a010000 	bmi	467d8 <_Min_Stack_Size+0x465d8>
    67d4:	0000db0a 	andeq	sp, r0, sl, lsl #22
    67d8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    67dc:	0019af16 	andseq	sl, r9, r6, lsl pc
    67e0:	0a4b0100 	beq	12c6be8 <_Min_Stack_Size+0x12c69e8>
    67e4:	00000093 	muleq	r0, r3, r0
    67e8:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    67ec:	00002d42 	andeq	r2, r0, r2, asr #26
    67f0:	930a4b01 	movwls	r4, #43777	; 0xab01
    67f4:	02000000 	andeq	r0, r0, #0
    67f8:	14007291 	strne	r7, [r0], #-657	; 0xfffffd6f
    67fc:	00002c18 	andeq	r2, r0, r8, lsl ip
    6800:	a00a7401 	andge	r7, sl, r1, lsl #8
    6804:	20080061 	andcs	r0, r8, r1, rrx
    6808:	01000000 	mrseq	r0, (UNDEF: 0)
    680c:	001a479c 	mulseq	sl, ip, r7
    6810:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    6814:	74010000 	strvc	r0, [r1], #-0
    6818:	0004ca0a 	andeq	ip, r4, sl, lsl #20
    681c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6820:	002b2215 	eoreq	r2, fp, r5, lsl r2
    6824:	0a740100 	beq	1d06c2c <_Min_Stack_Size+0x1d06a2c>
    6828:	00000093 	muleq	r0, r3, r0
    682c:	00729102 	rsbseq	r9, r2, r2, lsl #2
    6830:	002bbd1a 	eoreq	fp, fp, sl, lsl sp
    6834:	0a8d0100 	beq	fe346c3c <BootRAM+0xd2b73dd>
    6838:	00000000 	andeq	r0, r0, r0
    683c:	000000e0 	andeq	r0, r0, r0, ror #1
    6840:	1ab89c01 	bne	fee2d84c <BootRAM+0xdd9dfed>
    6844:	d2150000 	andsle	r0, r5, #0
    6848:	01000027 	tsteq	r0, r7, lsr #32
    684c:	04ca0a8d 	strbeq	r0, [sl], #2701	; 0xa8d
    6850:	91020000 	mrsls	r0, (UNDEF: 2)
    6854:	2a42156c 	bcs	108be0c <_Min_Stack_Size+0x108bc0c>
    6858:	8d010000 	stchi	0, cr0, [r1, #-0]
    685c:	0000930a 	andeq	r9, r0, sl, lsl #6
    6860:	6a910200 	bvs	fe447068 <BootRAM+0xd3b7809>
    6864:	00244e15 	eoreq	r4, r4, r5, lsl lr
    6868:	0a8d0100 	beq	fe346c70 <BootRAM+0xd2b7411>
    686c:	00000093 	muleq	r0, r3, r0
    6870:	15689102 	strbne	r9, [r8, #-258]!	; 0xfffffefe
    6874:	000023fe 	strdeq	r2, [r0], -lr
    6878:	930a8e01 	movwls	r8, #44545	; 0xae01
    687c:	02000000 	andeq	r0, r0, #0
    6880:	d0166691 	mulsle	r6, r1, r6
    6884:	01000023 	tsteq	r0, r3, lsr #32
    6888:	00930a90 	umullseq	r0, r3, r0, sl
    688c:	91020000 	mrsls	r0, (UNDEF: 2)
    6890:	26b41674 			; <UNDEFINED> instruction: 0x26b41674
    6894:	90010000 	andls	r0, r1, r0
    6898:	0000930a 	andeq	r9, r0, sl, lsl #6
    689c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    68a0:	2b661a00 	blcs	198d0a8 <_Min_Stack_Size+0x198cea8>
    68a4:	bc010000 	stclt	0, cr0, [r1], {-0}
    68a8:	0000000a 	andeq	r0, r0, sl
    68ac:	0000f400 	andeq	pc, r0, r0, lsl #8
    68b0:	389c0100 	ldmcc	ip, {r8}
    68b4:	1500001b 	strne	r0, [r0, #-27]	; 0xffffffe5
    68b8:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    68bc:	ca0abc01 	bgt	2b58c8 <_Min_Stack_Size+0x2b56c8>
    68c0:	02000004 	andeq	r0, r0, #4
    68c4:	42156c91 	andsmi	r6, r5, #37120	; 0x9100
    68c8:	0100002a 	tsteq	r0, sl, lsr #32
    68cc:	00930abc 			; <UNDEFINED> instruction: 0x00930abc
    68d0:	91020000 	mrsls	r0, (UNDEF: 2)
    68d4:	244e156a 	strbcs	r1, [lr], #-1386	; 0xfffffa96
    68d8:	bc010000 	stclt	0, cr0, [r1], {-0}
    68dc:	0000930a 	andeq	r9, r0, sl, lsl #6
    68e0:	68910200 	ldmvs	r1, {r9}
    68e4:	0023fe15 	eoreq	pc, r3, r5, lsl lr	; <UNPREDICTABLE>
    68e8:	0abd0100 	beq	fef46cf0 <BootRAM+0xdeb7491>
    68ec:	00000093 	muleq	r0, r3, r0
    68f0:	16669102 	strbtne	r9, [r6], -r2, lsl #2
    68f4:	000023d0 	ldrdeq	r2, [r0], -r0
    68f8:	930abf01 	movwls	fp, #44801	; 0xaf01
    68fc:	02000000 	andeq	r0, r0, #0
    6900:	b4167491 	ldrlt	r7, [r6], #-1169	; 0xfffffb6f
    6904:	01000026 	tsteq	r0, r6, lsr #32
    6908:	00930abf 			; <UNDEFINED> instruction: 0x00930abf
    690c:	91020000 	mrsls	r0, (UNDEF: 2)
    6910:	6d741876 	ldclvs	8, cr1, [r4, #-472]!	; 0xfffffe28
    6914:	bf010070 	svclt	0x00010070
    6918:	0000930a 	andeq	r9, r0, sl, lsl #6
    691c:	72910200 	addsvc	r0, r1, #0, 4
    6920:	28821a00 	stmcs	r2, {r9, fp, ip}
    6924:	ed010000 	stc	0, cr0, [r1, #-0]
    6928:	0000000a 	andeq	r0, r0, sl
    692c:	0000ec00 	andeq	lr, r0, r0, lsl #24
    6930:	b89c0100 	ldmlt	ip, {r8}
    6934:	1500001b 	strne	r0, [r0, #-27]	; 0xffffffe5
    6938:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    693c:	ca0aed01 	bgt	2c1d48 <_Min_Stack_Size+0x2c1b48>
    6940:	02000004 	andeq	r0, r0, #4
    6944:	42156c91 	andsmi	r6, r5, #37120	; 0x9100
    6948:	0100002a 	tsteq	r0, sl, lsr #32
    694c:	00930aed 	addseq	r0, r3, sp, ror #21
    6950:	91020000 	mrsls	r0, (UNDEF: 2)
    6954:	244e156a 	strbcs	r1, [lr], #-1386	; 0xfffffa96
    6958:	ed010000 	stc	0, cr0, [r1, #-0]
    695c:	0000930a 	andeq	r9, r0, sl, lsl #6
    6960:	68910200 	ldmvs	r1, {r9}
    6964:	0023fe15 	eoreq	pc, r3, r5, lsl lr	; <UNPREDICTABLE>
    6968:	0aee0100 	beq	ffb86d70 <BootRAM+0xeaf7511>
    696c:	00000093 	muleq	r0, r3, r0
    6970:	16669102 	strbtne	r9, [r6], -r2, lsl #2
    6974:	000023d9 	ldrdeq	r2, [r0], -r9
    6978:	930af001 	movwls	pc, #40961	; 0xa001	; <UNPREDICTABLE>
    697c:	02000000 	andeq	r0, r0, #0
    6980:	b4167491 	ldrlt	r7, [r6], #-1169	; 0xfffffb6f
    6984:	01000026 	tsteq	r0, r6, lsr #32
    6988:	00930af0 			; <UNDEFINED> instruction: 0x00930af0
    698c:	91020000 	mrsls	r0, (UNDEF: 2)
    6990:	6d741876 	ldclvs	8, cr1, [r4, #-472]!	; 0xfffffe28
    6994:	f0010070 			; <UNDEFINED> instruction: 0xf0010070
    6998:	0000930a 	andeq	r9, r0, sl, lsl #6
    699c:	72910200 	addsvc	r0, r1, #0, 4
    69a0:	26d31a00 	ldrbcs	r1, [r3], r0, lsl #20
    69a4:	1d010000 	stcne	0, cr0, [r1, #-0]
    69a8:	0000000b 	andeq	r0, r0, fp
    69ac:	0000f800 	andeq	pc, r0, r0, lsl #16
    69b0:	389c0100 	ldmcc	ip, {r8}
    69b4:	1500001c 	strne	r0, [r0, #-28]	; 0xffffffe4
    69b8:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    69bc:	ca0b1d01 	bgt	2cddc8 <_Min_Stack_Size+0x2cdbc8>
    69c0:	02000004 	andeq	r0, r0, #4
    69c4:	42156c91 	andsmi	r6, r5, #37120	; 0x9100
    69c8:	0100002a 	tsteq	r0, sl, lsr #32
    69cc:	00930b1d 	addseq	r0, r3, sp, lsl fp
    69d0:	91020000 	mrsls	r0, (UNDEF: 2)
    69d4:	244e156a 	strbcs	r1, [lr], #-1386	; 0xfffffa96
    69d8:	1d010000 	stcne	0, cr0, [r1, #-0]
    69dc:	0000930b 	andeq	r9, r0, fp, lsl #6
    69e0:	68910200 	ldmvs	r1, {r9}
    69e4:	0023fe15 	eoreq	pc, r3, r5, lsl lr	; <UNPREDICTABLE>
    69e8:	0b1e0100 	bleq	786df0 <_Min_Stack_Size+0x786bf0>
    69ec:	00000093 	muleq	r0, r3, r0
    69f0:	16669102 	strbtne	r9, [r6], -r2, lsl #2
    69f4:	000023d9 	ldrdeq	r2, [r0], -r9
    69f8:	930b2001 	movwls	r2, #45057	; 0xb001
    69fc:	02000000 	andeq	r0, r0, #0
    6a00:	b4167491 	ldrlt	r7, [r6], #-1169	; 0xfffffb6f
    6a04:	01000026 	tsteq	r0, r6, lsr #32
    6a08:	00930b20 	addseq	r0, r3, r0, lsr #22
    6a0c:	91020000 	mrsls	r0, (UNDEF: 2)
    6a10:	6d741876 	ldclvs	8, cr1, [r4, #-472]!	; 0xfffffe28
    6a14:	20010070 	andcs	r0, r1, r0, ror r0
    6a18:	0000930b 	andeq	r9, r0, fp, lsl #6
    6a1c:	72910200 	addsvc	r0, r1, #0, 4
    6a20:	026c1b00 	rsbeq	r1, ip, #0, 22
    6a24:	ce060000 	cdpgt	0, 0, cr0, cr6, cr0, {0}
    6a28:	001c4406 	andseq	r4, ip, r6, lsl #8
    6a2c:	007a0500 	rsbseq	r0, sl, r0, lsl #10
    6a30:	f2000000 	vhadd.s8	d0, d0, d0
    6a34:	0400000a 	streq	r0, [r0], #-10
    6a38:	0014f000 	andseq	pc, r4, r0
    6a3c:	11010400 	tstne	r1, r0, lsl #8
    6a40:	0c000001 	stceq	0, cr0, [r0], {1}
    6a44:	00002eda 	ldrdeq	r2, [r0], -sl
    6a48:	000008b8 			; <UNDEFINED> instruction: 0x000008b8
    6a4c:	00000000 	andeq	r0, r0, r0
    6a50:	0000312f 	andeq	r3, r0, pc, lsr #2
    6a54:	92060102 	andls	r0, r6, #-2147483648	; 0x80000000
    6a58:	03000001 	movweq	r0, #1
    6a5c:	000000e3 	andeq	r0, r0, r3, ror #1
    6a60:	00331d02 	eorseq	r1, r3, r2, lsl #26
    6a64:	01020000 	mrseq	r0, (UNDEF: 2)
    6a68:	00019008 	andeq	r9, r1, r8
    6a6c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    6a70:	00000095 	muleq	r0, r5, r0
    6a74:	00007203 	andeq	r7, r0, r3, lsl #4
    6a78:	4c2b0200 	sfmmi	f0, 4, [fp], #-0
    6a7c:	02000000 	andeq	r0, r0, #0
    6a80:	01f20702 	mvnseq	r0, r2, lsl #14
    6a84:	04020000 	streq	r0, [r2], #-0
    6a88:	0000bd05 	andeq	fp, r0, r5, lsl #26
    6a8c:	00670300 	rsbeq	r0, r7, r0, lsl #6
    6a90:	41020000 	mrsmi	r0, (UNDEF: 2)
    6a94:	00000065 	andeq	r0, r0, r5, rrx
    6a98:	c9070402 	stmdbgt	r7, {r1, sl}
    6a9c:	02000001 	andeq	r0, r0, #1
    6aa0:	00b80508 	adcseq	r0, r8, r8, lsl #10
    6aa4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6aa8:	0001c407 	andeq	ip, r1, r7, lsl #8
    6aac:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    6ab0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    6ab4:	ce070402 	cdpgt	4, 0, cr0, cr7, cr2, {0}
    6ab8:	03000001 	movweq	r0, #1
    6abc:	000000e5 	andeq	r0, r0, r5, ror #1
    6ac0:	00281803 	eoreq	r1, r8, r3, lsl #16
    6ac4:	74030000 	strvc	r0, [r3], #-0
    6ac8:	03000000 	movweq	r0, #0
    6acc:	00004124 	andeq	r4, r0, r4, lsr #2
    6ad0:	00690300 	rsbeq	r0, r9, r0, lsl #6
    6ad4:	30030000 	andcc	r0, r3, r0
    6ad8:	0000005a 	andeq	r0, r0, sl, asr r0
    6adc:	59070402 	stmdbpl	r7, {r1, sl}
    6ae0:	05000000 	streq	r0, [r0, #-0]
    6ae4:	0000009e 	muleq	r0, lr, r0
    6ae8:	00009305 	andeq	r9, r0, r5, lsl #6
    6aec:	33010600 	movwcc	r0, #5632	; 0x1600
    6af0:	04000000 	streq	r0, [r0], #-0
    6af4:	00d40207 	sbcseq	r0, r4, r7, lsl #4
    6af8:	74070000 	strvc	r0, [r7], #-0
    6afc:	0000001c 	andeq	r0, r0, ip, lsl r0
    6b00:	54455308 	strbpl	r5, [r5], #-776	; 0xfffffcf8
    6b04:	09000100 	stmdbeq	r0, {r8}
    6b08:	00002e77 	andeq	r2, r0, r7, ror lr
    6b0c:	ba020704 	blt	88724 <_Min_Stack_Size+0x88524>
    6b10:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    6b14:	00002f95 	muleq	r0, r5, pc	; <UNPREDICTABLE>
    6b18:	ba020704 	blt	88730 <_Min_Stack_Size+0x88530>
    6b1c:	06000000 	streq	r0, [r0], -r0
    6b20:	00003301 	andeq	r3, r0, r1, lsl #6
    6b24:	02090400 	andeq	r0, r9, #0, 8
    6b28:	00000106 	andeq	r0, r0, r6, lsl #2
    6b2c:	0002f007 	andeq	pc, r2, r7
    6b30:	62070000 	andvs	r0, r7, #0
    6b34:	01000004 	tsteq	r0, r4
    6b38:	17d40900 	ldrbne	r0, [r4, r0, lsl #18]
    6b3c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    6b40:	0000ec02 	andeq	lr, r0, r2, lsl #24
    6b44:	33010600 	movwcc	r0, #5632	; 0x1600
    6b48:	04000000 	streq	r0, [r0], #-0
    6b4c:	012c020c 			; <UNDEFINED> instruction: 0x012c020c
    6b50:	41070000 	mrsmi	r0, (UNDEF: 7)
    6b54:	00000003 	andeq	r0, r0, r3
    6b58:	00141507 	andseq	r1, r4, r7, lsl #10
    6b5c:	09000100 	stmdbeq	r0, {r8}
    6b60:	0000195b 	andeq	r1, r0, fp, asr r9
    6b64:	12020c04 	andne	r0, r2, #4, 24	; 0x400
    6b68:	0a000001 	beq	6b74 <_Min_Stack_Size+0x6974>
    6b6c:	04040424 	streq	r0, [r4], #-1060	; 0xfffffbdc
    6b70:	0000022b 	andeq	r0, r0, fp, lsr #4
    6b74:	3152430b 	cmpcc	r2, fp, lsl #6
    6b78:	04060400 	streq	r0, [r6], #-1024	; 0xfffffc00
    6b7c:	000000b5 	strheq	r0, [r0], -r5
    6b80:	03c20c00 	biceq	r0, r2, #0, 24
    6b84:	07040000 	streq	r0, [r4, -r0]
    6b88:	00009304 	andeq	r9, r0, r4, lsl #6
    6b8c:	430b0200 	movwmi	r0, #45568	; 0xb200
    6b90:	04003252 	streq	r3, [r0], #-594	; 0xfffffdae
    6b94:	00b50408 	adcseq	r0, r5, r8, lsl #8
    6b98:	0c040000 	stceq	0, cr0, [r4], {-0}
    6b9c:	000003cc 	andeq	r0, r0, ip, asr #7
    6ba0:	93040904 	movwls	r0, #18692	; 0x4904
    6ba4:	06000000 	streq	r0, [r0], -r0
    6ba8:	0003b80c 	andeq	fp, r3, ip, lsl #16
    6bac:	040a0400 	streq	r0, [sl], #-1024	; 0xfffffc00
    6bb0:	000000b5 	strheq	r0, [r0], -r5
    6bb4:	03d60c08 	bicseq	r0, r6, #8, 24	; 0x800
    6bb8:	0b040000 	bleq	106bc0 <_Min_Stack_Size+0x1069c0>
    6bbc:	00009304 	andeq	r9, r0, r4, lsl #6
    6bc0:	bd0c0a00 	vstrlt	s0, [ip, #-0]
    6bc4:	04000003 	streq	r0, [r0], #-3
    6bc8:	00b5040c 	adcseq	r0, r5, ip, lsl #8
    6bcc:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    6bd0:	000002ab 	andeq	r0, r0, fp, lsr #5
    6bd4:	93040d04 	movwls	r0, #19716	; 0x4d04
    6bd8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    6bdc:	0052440b 	subseq	r4, r2, fp, lsl #8
    6be0:	b5040e04 	strlt	r0, [r4, #-3588]	; 0xfffff1fc
    6be4:	10000000 	andne	r0, r0, r0
    6be8:	0003ea0c 	andeq	lr, r3, ip, lsl #20
    6bec:	040f0400 	streq	r0, [pc], #-1024	; 6bf4 <_Min_Stack_Size+0x69f4>
    6bf0:	00000093 	muleq	r0, r3, r0
    6bf4:	52530b12 	subspl	r0, r3, #18432	; 0x4800
    6bf8:	10040031 	andne	r0, r4, r1, lsr r0
    6bfc:	0000b504 	andeq	fp, r0, r4, lsl #10
    6c00:	f40c1400 	vst3.8	{d1-d3}, [ip], r0
    6c04:	04000003 	streq	r0, [r0], #-3
    6c08:	00930411 	addseq	r0, r3, r1, lsl r4
    6c0c:	0b160000 	bleq	586c14 <_Min_Stack_Size+0x586a14>
    6c10:	00325253 	eorseq	r5, r2, r3, asr r2
    6c14:	b5041204 	strlt	r1, [r4, #-516]	; 0xfffffdfc
    6c18:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6c1c:	0002d70c 	andeq	sp, r2, ip, lsl #14
    6c20:	04130400 	ldreq	r0, [r3], #-1024	; 0xfffffc00
    6c24:	00000093 	muleq	r0, r3, r0
    6c28:	43430b1a 	movtmi	r0, #15130	; 0x3b1a
    6c2c:	14040052 	strne	r0, [r4], #-82	; 0xffffffae
    6c30:	0000b504 	andeq	fp, r0, r4, lsl #10
    6c34:	150c1c00 	strne	r1, [ip, #-3072]	; 0xfffff400
    6c38:	04000004 	streq	r0, [r0], #-4
    6c3c:	00930415 	addseq	r0, r3, r5, lsl r4
    6c40:	0c1e0000 	ldceq	0, cr0, [lr], {-0}
    6c44:	0000044b 	andeq	r0, r0, fp, asr #8
    6c48:	b5041604 	strlt	r1, [r4, #-1540]	; 0xfffff9fc
    6c4c:	20000000 	andcs	r0, r0, r0
    6c50:	00041f0c 	andeq	r1, r4, ip, lsl #30
    6c54:	04170400 	ldreq	r0, [r7], #-1024	; 0xfffffc00
    6c58:	00000093 	muleq	r0, r3, r0
    6c5c:	47090022 	strmi	r0, [r9, -r2, lsr #32]
    6c60:	04000003 	streq	r0, [r0], #-3
    6c64:	01380418 	teqeq	r8, r8, lsl r4
    6c68:	140d0000 	strne	r0, [sp], #-0
    6c6c:	027c2e05 	rsbseq	r2, ip, #5, 28	; 0x50
    6c70:	800e0000 	andhi	r0, lr, r0
    6c74:	0500001a 	streq	r0, [r0, #-26]	; 0xffffffe6
    6c78:	00009e30 	andeq	r9, r0, r0, lsr lr
    6c7c:	d20e0000 	andle	r0, lr, #0
    6c80:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    6c84:	00009e31 	andeq	r9, r0, r1, lsr lr
    6c88:	e90e0400 	stmdb	lr, {sl}
    6c8c:	0500001a 	streq	r0, [r0, #-26]	; 0xffffffe6
    6c90:	00009e32 	andeq	r9, r0, r2, lsr lr
    6c94:	9c0e0800 	stcls	8, cr0, [lr], {-0}
    6c98:	0500001a 	streq	r0, [r0, #-26]	; 0xffffffe6
    6c9c:	00009e33 	andeq	r9, r0, r3, lsr lr
    6ca0:	610e0c00 	tstvs	lr, r0, lsl #24
    6ca4:	0500001a 	streq	r0, [r0, #-26]	; 0xffffffe6
    6ca8:	00009e34 	andeq	r9, r0, r4, lsr lr
    6cac:	03001000 	movweq	r1, #0
    6cb0:	0000189f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    6cb4:	02373505 	eorseq	r3, r7, #20971520	; 0x1400000
    6cb8:	100d0000 	andne	r0, sp, r0
    6cbc:	02d83206 	sbcseq	r3, r8, #1610612736	; 0x60000000
    6cc0:	5e0e0000 	cdppl	0, 0, cr0, cr14, cr0, {0}
    6cc4:	06000031 			; <UNDEFINED> instruction: 0x06000031
    6cc8:	00009e34 	andeq	r9, r0, r4, lsr lr
    6ccc:	210e0000 	mrscs	r0, (UNDEF: 14)
    6cd0:	06000030 			; <UNDEFINED> instruction: 0x06000030
    6cd4:	00009337 	andeq	r9, r0, r7, lsr r3
    6cd8:	8c0e0400 	cfstrshi	mvf0, [lr], {-0}
    6cdc:	06000031 			; <UNDEFINED> instruction: 0x06000031
    6ce0:	0000933a 	andeq	r9, r0, sl, lsr r3
    6ce4:	d20e0600 	andle	r0, lr, #0, 12
    6ce8:	06000030 			; <UNDEFINED> instruction: 0x06000030
    6cec:	0000933d 	andeq	r9, r0, sp, lsr r3
    6cf0:	e20e0800 	and	r0, lr, #0, 16
    6cf4:	06000030 			; <UNDEFINED> instruction: 0x06000030
    6cf8:	00009340 	andeq	r9, r0, r0, asr #6
    6cfc:	930e0a00 	movwls	r0, #59904	; 0xea00
    6d00:	0600002e 	streq	r0, [r0], -lr, lsr #32
    6d04:	00009343 	andeq	r9, r0, r3, asr #6
    6d08:	03000c00 	movweq	r0, #3072	; 0xc00
    6d0c:	0000310a 	andeq	r3, r0, sl, lsl #2
    6d10:	02874506 	addeq	r4, r7, #25165824	; 0x1800000
    6d14:	290f0000 	stmdbcs	pc, {}	; <UNPREDICTABLE>
    6d18:	01000031 	tsteq	r0, r1, lsr r0
    6d1c:	0061c0a2 	rsbeq	ip, r1, r2, lsr #1
    6d20:	00004808 	andeq	r4, r0, r8, lsl #16
    6d24:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
    6d28:	10000003 	andne	r0, r0, r3
    6d2c:	00002f39 	andeq	r2, r0, r9, lsr pc
    6d30:	0307a201 	movweq	sl, #29185	; 0x7201
    6d34:	91020000 	mrsls	r0, (UNDEF: 2)
    6d38:	04110074 	ldreq	r0, [r1], #-116	; 0xffffff8c
    6d3c:	0000022b 	andeq	r0, r0, fp, lsr #4
    6d40:	00319a0f 	eorseq	r9, r1, pc, lsl #20
    6d44:	08bf0100 	ldmeq	pc!, {r8}	; <UNPREDICTABLE>
    6d48:	84080062 	strhi	r0, [r8], #-98	; 0xffffff9e
    6d4c:	01000001 	tsteq	r0, r1
    6d50:	0003859c 	muleq	r3, ip, r5
    6d54:	2f391000 	svccs	0x00391000
    6d58:	bf010000 	svclt	0x00010000
    6d5c:	00000307 	andeq	r0, r0, r7, lsl #6
    6d60:	10549102 	subsne	r9, r4, r2, lsl #2
    6d64:	00002f79 	andeq	r2, r0, r9, ror pc
    6d68:	0385bf01 	orreq	fp, r5, #1, 30
    6d6c:	91020000 	mrsls	r0, (UNDEF: 2)
    6d70:	19a71250 	stmibne	r7!, {r4, r6, r9, ip}
    6d74:	c1010000 	mrsgt	r0, (UNDEF: 1)
    6d78:	00000093 	muleq	r0, r3, r0
    6d7c:	12769102 	rsbsne	r9, r6, #-2147483648	; 0x80000000
    6d80:	00003100 	andeq	r3, r0, r0, lsl #2
    6d84:	0093c101 	addseq	ip, r3, r1, lsl #2
    6d88:	91020000 	mrsls	r0, (UNDEF: 2)
    6d8c:	517a1272 	cmnpl	sl, r2, ror r2
    6d90:	c2010000 	andgt	r0, r1, #0
    6d94:	00000093 	muleq	r0, r3, r0
    6d98:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    6d9c:	00002fa9 	andeq	r2, r0, r9, lsr #31
    6da0:	009ec301 	addseq	ip, lr, r1, lsl #6
    6da4:	91020000 	mrsls	r0, (UNDEF: 2)
    6da8:	2f3e126c 	svccs	0x003e126c
    6dac:	c4010000 	strgt	r0, [r1], #-0
    6db0:	0000027c 	andeq	r0, r0, ip, ror r2
    6db4:	00589102 	subseq	r9, r8, r2, lsl #2
    6db8:	02d80411 	sbcseq	r0, r8, #285212672	; 0x11000000
    6dbc:	1a130000 	bne	4c6dc4 <_Min_Stack_Size+0x4c6bc4>
    6dc0:	01000031 	tsteq	r0, r1, lsr r0
    6dc4:	0000012a 	andeq	r0, r0, sl, lsr #2
    6dc8:	003c0000 	eorseq	r0, ip, r0
    6dcc:	9c010000 	stcls	0, cr0, [r1], {-0}
    6dd0:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
    6dd4:	002f7914 	eoreq	r7, pc, r4, lsl r9	; <UNPREDICTABLE>
    6dd8:	012a0100 			; <UNDEFINED> instruction: 0x012a0100
    6ddc:	00000385 	andeq	r0, r0, r5, lsl #7
    6de0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    6de4:	002f2113 	eoreq	r2, pc, r3, lsl r1	; <UNPREDICTABLE>
    6de8:	01420100 	mrseq	r0, (UNDEF: 82)
    6dec:	0800638c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sp, lr}
    6df0:	0000003e 	andeq	r0, r0, lr, lsr r0
    6df4:	03e69c01 	mvneq	r9, #256	; 0x100
    6df8:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    6dfc:	0100002f 	tsteq	r0, pc, lsr #32
    6e00:	03070142 	movweq	r0, #28994	; 0x7142
    6e04:	91020000 	mrsls	r0, (UNDEF: 2)
    6e08:	17131474 			; <UNDEFINED> instruction: 0x17131474
    6e0c:	42010000 	andmi	r0, r1, #0
    6e10:	00010601 	andeq	r0, r1, r1, lsl #12
    6e14:	73910200 	orrsvc	r0, r1, #0, 4
    6e18:	2faf1300 	svccs	0x00af1300
    6e1c:	5a010000 	bpl	46e24 <_Min_Stack_Size+0x46c24>
    6e20:	00000001 	andeq	r0, r0, r1
    6e24:	00003e00 	andeq	r3, r0, r0, lsl #28
    6e28:	1b9c0100 	blne	fe707230 <BootRAM+0xd6779d1>
    6e2c:	14000004 	strne	r0, [r0], #-4
    6e30:	00002f39 	andeq	r2, r0, r9, lsr pc
    6e34:	07015a01 	streq	r5, [r1, -r1, lsl #20]
    6e38:	02000003 	andeq	r0, r0, #3
    6e3c:	13147491 	tstne	r4, #-1862270976	; 0x91000000
    6e40:	01000017 	tsteq	r0, r7, lsl r0
    6e44:	0106015a 	tsteq	r6, sl, asr r1
    6e48:	91020000 	mrsls	r0, (UNDEF: 2)
    6e4c:	ba130073 	blt	4c7020 <_Min_Stack_Size+0x4c6e20>
    6e50:	0100002f 	tsteq	r0, pc, lsr #32
    6e54:	00000172 	andeq	r0, r0, r2, ror r1
    6e58:	003e0000 	eorseq	r0, lr, r0
    6e5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6e60:	00000450 	andeq	r0, r0, r0, asr r4
    6e64:	002f3914 	eoreq	r3, pc, r4, lsl r9	; <UNPREDICTABLE>
    6e68:	01720100 	cmneq	r2, r0, lsl #2
    6e6c:	00000307 	andeq	r0, r0, r7, lsl #6
    6e70:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    6e74:	00001713 	andeq	r1, r0, r3, lsl r7
    6e78:	06017201 	streq	r7, [r1], -r1, lsl #4
    6e7c:	02000001 	andeq	r0, r0, #1
    6e80:	13007391 	movwne	r7, #913	; 0x391
    6e84:	000030c0 	andeq	r3, r0, r0, asr #1
    6e88:	cc018a01 			; <UNDEFINED> instruction: 0xcc018a01
    6e8c:	3e080063 	cdpcc	0, 0, cr0, cr8, cr3, {3}
    6e90:	01000000 	mrseq	r0, (UNDEF: 0)
    6e94:	0004859c 	muleq	r4, ip, r5
    6e98:	2f391400 	svccs	0x00391400
    6e9c:	8a010000 	bhi	46ea4 <_Min_Stack_Size+0x46ca4>
    6ea0:	00030701 	andeq	r0, r3, r1, lsl #14
    6ea4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6ea8:	00171314 	andseq	r1, r7, r4, lsl r3
    6eac:	018a0100 	orreq	r0, sl, r0, lsl #2
    6eb0:	00000106 	andeq	r0, r0, r6, lsl #2
    6eb4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    6eb8:	002f1013 	eoreq	r1, pc, r3, lsl r0	; <UNPREDICTABLE>
    6ebc:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
    6ec0:	00000000 	andeq	r0, r0, r0
    6ec4:	0000003e 	andeq	r0, r0, lr, lsr r0
    6ec8:	04ba9c01 	ldrteq	r9, [sl], #3073	; 0xc01
    6ecc:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    6ed0:	0100002f 	tsteq	r0, pc, lsr #32
    6ed4:	030701a2 	movweq	r0, #29090	; 0x71a2
    6ed8:	91020000 	mrsls	r0, (UNDEF: 2)
    6edc:	17131474 			; <UNDEFINED> instruction: 0x17131474
    6ee0:	a2010000 	andge	r0, r1, #0
    6ee4:	00010601 	andeq	r0, r1, r1, lsl #12
    6ee8:	73910200 	orrsvc	r0, r1, #0, 4
    6eec:	30891300 	addcc	r1, r9, r0, lsl #6
    6ef0:	ba010000 	blt	46ef8 <_Min_Stack_Size+0x46cf8>
    6ef4:	00000001 	andeq	r0, r0, r1
    6ef8:	00003e00 	andeq	r3, r0, r0, lsl #28
    6efc:	ef9c0100 	svc	0x009c0100
    6f00:	14000004 	strne	r0, [r0], #-4
    6f04:	00002f39 	andeq	r2, r0, r9, lsr pc
    6f08:	0701ba01 	streq	fp, [r1, -r1, lsl #20]
    6f0c:	02000003 	andeq	r0, r0, #3
    6f10:	13147491 	tstne	r4, #-1862270976	; 0x91000000
    6f14:	01000017 	tsteq	r0, r7, lsl r0
    6f18:	010601ba 			; <UNDEFINED> instruction: 0x010601ba
    6f1c:	91020000 	mrsls	r0, (UNDEF: 2)
    6f20:	34130073 	ldrcc	r0, [r3], #-115	; 0xffffff8d
    6f24:	01000031 	tsteq	r0, r1, lsr r0
    6f28:	000001d1 	ldrdeq	r0, [r0], -r1
    6f2c:	00420000 	subeq	r0, r2, r0
    6f30:	9c010000 	stcls	0, cr0, [r1], {-0}
    6f34:	00000533 	andeq	r0, r0, r3, lsr r5
    6f38:	002f3914 	eoreq	r3, pc, r4, lsl r9	; <UNPREDICTABLE>
    6f3c:	01d10100 	bicseq	r0, r1, r0, lsl #2
    6f40:	00000307 	andeq	r0, r0, r7, lsl #6
    6f44:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    6f48:	00002ea3 	andeq	r2, r0, r3, lsr #29
    6f4c:	8801d101 	stmdahi	r1, {r0, r8, ip, lr, pc}
    6f50:	02000000 	andeq	r0, r0, #0
    6f54:	a7156b91 			; <UNDEFINED> instruction: 0xa7156b91
    6f58:	01000019 	tsteq	r0, r9, lsl r0
    6f5c:	009301d3 			; <UNDEFINED> instruction: 0x009301d3
    6f60:	91020000 	mrsls	r0, (UNDEF: 2)
    6f64:	dc130076 	ldcle	0, cr0, [r3], {118}	; 0x76
    6f68:	0100002f 	tsteq	r0, pc, lsr #32
    6f6c:	000001ec 	andeq	r0, r0, ip, ror #3
    6f70:	003e0000 	eorseq	r0, lr, r0
    6f74:	9c010000 	stcls	0, cr0, [r1], {-0}
    6f78:	00000568 	andeq	r0, r0, r8, ror #10
    6f7c:	002f3914 	eoreq	r3, pc, r4, lsl r9	; <UNPREDICTABLE>
    6f80:	01ec0100 	mvneq	r0, r0, lsl #2
    6f84:	00000307 	andeq	r0, r0, r7, lsl #6
    6f88:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    6f8c:	00001713 	andeq	r1, r0, r3, lsl r7
    6f90:	0601ec01 	streq	lr, [r1], -r1, lsl #24
    6f94:	02000001 	andeq	r0, r0, #1
    6f98:	13007391 	movwne	r7, #913	; 0x391
    6f9c:	00002fef 	andeq	r2, r0, pc, ror #31
    6fa0:	00020401 	andeq	r0, r2, r1, lsl #8
    6fa4:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    6fa8:	01000000 	mrseq	r0, (UNDEF: 0)
    6fac:	00059d9c 	muleq	r5, ip, sp
    6fb0:	2f391400 	svccs	0x00391400
    6fb4:	04010000 	streq	r0, [r1], #-0
    6fb8:	00030702 	andeq	r0, r3, r2, lsl #14
    6fbc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6fc0:	00171314 	andseq	r1, r7, r4, lsl r3
    6fc4:	02040100 	andeq	r0, r4, #0, 2
    6fc8:	00000106 	andeq	r0, r0, r6, lsl #2
    6fcc:	00739102 	rsbseq	r9, r3, r2, lsl #2
    6fd0:	00307213 	eorseq	r7, r0, r3, lsl r2
    6fd4:	02210100 	eoreq	r0, r1, #0, 2
    6fd8:	00000000 	andeq	r0, r0, r0
    6fdc:	00000046 	andeq	r0, r0, r6, asr #32
    6fe0:	05e19c01 	strbeq	r9, [r1, #3073]!	; 0xc01
    6fe4:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    6fe8:	0100002f 	tsteq	r0, pc, lsr #32
    6fec:	03070221 	movweq	r0, #29217	; 0x7221
    6ff0:	91020000 	mrsls	r0, (UNDEF: 2)
    6ff4:	2ec01474 	mcrcs	4, 6, r1, cr0, cr4, {3}
    6ff8:	21010000 	mrscs	r0, (UNDEF: 1)
    6ffc:	00009302 	andeq	r9, r0, r2, lsl #6
    7000:	72910200 	addsvc	r0, r1, #0, 4
    7004:	00171314 	andseq	r1, r7, r4, lsl r3
    7008:	02210100 	eoreq	r0, r1, #0, 2
    700c:	00000106 	andeq	r0, r0, r6, lsl #2
    7010:	00719102 	rsbseq	r9, r1, r2, lsl #2
    7014:	0031a313 	eorseq	sl, r1, r3, lsl r3
    7018:	023a0100 	eorseq	r0, sl, #0, 2
    701c:	0800640c 	stmdaeq	r0, {r2, r3, sl, sp, lr}
    7020:	0000001e 	andeq	r0, r0, lr, lsl r0
    7024:	06169c01 	ldreq	r9, [r6], -r1, lsl #24
    7028:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    702c:	0100002f 	tsteq	r0, pc, lsr #32
    7030:	0307023a 	movweq	r0, #29242	; 0x723a
    7034:	91020000 	mrsls	r0, (UNDEF: 2)
    7038:	31ab1474 			; <UNDEFINED> instruction: 0x31ab1474
    703c:	3a010000 	bcc	47044 <_Min_Stack_Size+0x46e44>
    7040:	00008802 	andeq	r8, r0, r2, lsl #16
    7044:	73910200 	orrsvc	r0, r1, #0, 4
    7048:	30311600 	eorscc	r1, r1, r0, lsl #12
    704c:	47010000 	strmi	r0, [r1, -r0]
    7050:	00008802 	andeq	r8, r0, r2, lsl #16
    7054:	00000000 	andeq	r0, r0, r0
    7058:	00001a00 	andeq	r1, r0, r0, lsl #20
    705c:	409c0100 	addsmi	r0, ip, r0, lsl #2
    7060:	14000006 	strne	r0, [r0], #-6
    7064:	00002f39 	andeq	r2, r0, r9, lsr pc
    7068:	07024701 	streq	r4, [r2, -r1, lsl #14]
    706c:	02000003 	andeq	r0, r0, #3
    7070:	13007491 	movwne	r7, #1169	; 0x491
    7074:	000031b0 			; <UNDEFINED> instruction: 0x000031b0
    7078:	2c025901 			; <UNDEFINED> instruction: 0x2c025901
    707c:	3a080064 	bcc	207214 <_Min_Stack_Size+0x207014>
    7080:	01000000 	mrseq	r0, (UNDEF: 0)
    7084:	0006849c 	muleq	r6, ip, r4
    7088:	2f391400 	svccs	0x00391400
    708c:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    7090:	00030702 	andeq	r0, r3, r2, lsl #14
    7094:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    7098:	002ea314 	eoreq	sl, lr, r4, lsl r3
    709c:	02590100 	subseq	r0, r9, #0, 2
    70a0:	00000088 	andeq	r0, r0, r8, lsl #1
    70a4:	14739102 	ldrbtne	r9, [r3], #-258	; 0xfffffefe
    70a8:	000031d3 	ldrdeq	r3, [r0], -r3	; <UNPREDICTABLE>
    70ac:	88025901 	stmdahi	r2, {r0, r8, fp, ip, lr}
    70b0:	02000000 	andeq	r0, r0, #0
    70b4:	16007291 			; <UNDEFINED> instruction: 0x16007291
    70b8:	00002e5f 	andeq	r2, r0, pc, asr lr
    70bc:	93027c01 	movwls	r7, #11265	; 0x2c01
    70c0:	00000000 	andeq	r0, r0, r0
    70c4:	2c000000 	stccs	0, cr0, [r0], {-0}
    70c8:	01000000 	mrseq	r0, (UNDEF: 0)
    70cc:	0006cc9c 	muleq	r6, ip, ip
    70d0:	2f391400 	svccs	0x00391400
    70d4:	7c010000 	stcvc	0, cr0, [r1], {-0}
    70d8:	00030702 	andeq	r0, r3, r2, lsl #14
    70dc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    70e0:	0030b314 	eorseq	fp, r0, r4, lsl r3
    70e4:	027c0100 	rsbseq	r0, ip, #0, 2
    70e8:	00000088 	andeq	r0, r0, r8, lsl #1
    70ec:	176b9102 	strbne	r9, [fp, -r2, lsl #2]!
    70f0:	00706d74 	rsbseq	r6, r0, r4, ror sp
    70f4:	b0027e01 	andlt	r7, r2, r1, lsl #28
    70f8:	02000000 	andeq	r0, r0, #0
    70fc:	13007491 	movwne	r7, #1169	; 0x491
    7100:	00002eab 	andeq	r2, r0, fp, lsr #29
    7104:	00029201 	andeq	r9, r2, r1, lsl #4
    7108:	42000000 	andmi	r0, r0, #0
    710c:	01000000 	mrseq	r0, (UNDEF: 0)
    7110:	0007019c 	muleq	r7, ip, r1
    7114:	2f391400 	svccs	0x00391400
    7118:	92010000 	andls	r0, r1, #0
    711c:	00030702 	andeq	r0, r3, r2, lsl #14
    7120:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    7124:	00171314 	andseq	r1, r7, r4, lsl r3
    7128:	02920100 	addseq	r0, r2, #0, 2
    712c:	00000106 	andeq	r0, r0, r6, lsl #2
    7130:	00739102 	rsbseq	r9, r3, r2, lsl #2
    7134:	00300213 	eorseq	r0, r0, r3, lsl r2
    7138:	02b80100 	adcseq	r0, r8, #0, 2
    713c:	00000000 	andeq	r0, r0, r0
    7140:	00000040 	andeq	r0, r0, r0, asr #32
    7144:	07369c01 	ldreq	r9, [r6, -r1, lsl #24]!
    7148:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    714c:	0100002f 	tsteq	r0, pc, lsr #32
    7150:	030702b8 	movweq	r0, #29368	; 0x72b8
    7154:	91020000 	mrsls	r0, (UNDEF: 2)
    7158:	2f681474 	svccs	0x00681474
    715c:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    7160:	00009302 	andeq	r9, r0, r2, lsl #6
    7164:	72910200 	addsvc	r0, r1, #0, 4
    7168:	305d1300 	subscc	r1, sp, r0, lsl #6
    716c:	d4010000 	strle	r0, [r1], #-0
    7170:	00000002 	andeq	r0, r0, r2
    7174:	00004000 	andeq	r4, r0, r0
    7178:	6b9c0100 	blvs	fe707580 <BootRAM+0xd677d21>
    717c:	14000007 	strne	r0, [r0], #-7
    7180:	00002f39 	andeq	r2, r0, r9, lsr pc
    7184:	0702d401 	streq	sp, [r2, -r1, lsl #8]
    7188:	02000003 	andeq	r0, r0, #3
    718c:	7d147491 	cfldrsvc	mvf7, [r4, #-580]	; 0xfffffdbc
    7190:	01000031 	tsteq	r0, r1, lsr r0
    7194:	009302d4 			; <UNDEFINED> instruction: 0x009302d4
    7198:	91020000 	mrsls	r0, (UNDEF: 2)
    719c:	29130072 	ldmdbcs	r3, {r1, r4, r5, r6}
    71a0:	0100002f 	tsteq	r0, pc, lsr #32
    71a4:	000002ec 	andeq	r0, r0, ip, ror #5
    71a8:	003e0000 	eorseq	r0, lr, r0
    71ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    71b0:	000007a0 	andeq	r0, r0, r0, lsr #15
    71b4:	002f3914 	eoreq	r3, pc, r4, lsl r9	; <UNPREDICTABLE>
    71b8:	02ec0100 	rsceq	r0, ip, #0, 2
    71bc:	00000307 	andeq	r0, r0, r7, lsl #6
    71c0:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    71c4:	00001713 	andeq	r1, r0, r3, lsl r7
    71c8:	0602ec01 	streq	lr, [r2], -r1, lsl #24
    71cc:	02000001 	andeq	r0, r0, #1
    71d0:	13007391 	movwne	r7, #913	; 0x391
    71d4:	000030ea 	andeq	r3, r0, sl, ror #1
    71d8:	00030b01 	andeq	r0, r3, r1, lsl #22
    71dc:	40000000 	andmi	r0, r0, r0
    71e0:	01000000 	mrseq	r0, (UNDEF: 0)
    71e4:	0007d59c 	muleq	r7, ip, r5
    71e8:	2f391400 	svccs	0x00391400
    71ec:	0b010000 	bleq	471f4 <_Min_Stack_Size+0x46ff4>
    71f0:	00030703 	andeq	r0, r3, r3, lsl #14
    71f4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    71f8:	00316d14 	eorseq	r6, r1, r4, lsl sp
    71fc:	030b0100 	movweq	r0, #45312	; 0xb100
    7200:	00000093 	muleq	r0, r3, r0
    7204:	00729102 	rsbseq	r9, r2, r2, lsl #2
    7208:	002e8213 	eoreq	r8, lr, r3, lsl r2
    720c:	03230100 			; <UNDEFINED> instruction: 0x03230100
    7210:	00000000 	andeq	r0, r0, r0
    7214:	0000003e 	andeq	r0, r0, lr, lsr r0
    7218:	080a9c01 	stmdaeq	sl, {r0, sl, fp, ip, pc}
    721c:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    7220:	0100002f 	tsteq	r0, pc, lsr #32
    7224:	03070323 	movweq	r0, #29475	; 0x7323
    7228:	91020000 	mrsls	r0, (UNDEF: 2)
    722c:	17131474 			; <UNDEFINED> instruction: 0x17131474
    7230:	23010000 	movwcs	r0, #4096	; 0x1000
    7234:	00010603 	andeq	r0, r1, r3, lsl #12
    7238:	73910200 	orrsvc	r0, r1, #0, 4
    723c:	2fd11600 	svccs	0x00d11600
    7240:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    7244:	00008803 	andeq	r8, r0, r3, lsl #16
    7248:	00000000 	andeq	r0, r0, r0
    724c:	00001e00 	andeq	r1, r0, r0, lsl #28
    7250:	349c0100 	ldrcc	r0, [ip], #256	; 0x100
    7254:	14000008 	strne	r0, [r0], #-8
    7258:	00002f39 	andeq	r2, r0, r9, lsr pc
    725c:	07033901 	streq	r3, [r3, -r1, lsl #18]
    7260:	02000003 	andeq	r0, r0, #3
    7264:	13007491 	movwne	r7, #1169	; 0x491
    7268:	00002f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
    726c:	00034801 	andeq	r4, r3, r1, lsl #16
    7270:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    7274:	01000000 	mrseq	r0, (UNDEF: 0)
    7278:	0008699c 	muleq	r8, ip, r9
    727c:	2f391400 	svccs	0x00391400
    7280:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    7284:	00030703 	andeq	r0, r3, r3, lsl #14
    7288:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    728c:	00171314 	andseq	r1, r7, r4, lsl r3
    7290:	03480100 	movteq	r0, #33024	; 0x8100
    7294:	00000106 	andeq	r0, r0, r6, lsl #2
    7298:	00739102 	rsbseq	r9, r3, r2, lsl #2
    729c:	00314a13 	eorseq	r4, r1, r3, lsl sl
    72a0:	03600100 	cmneq	r0, #0, 2
    72a4:	08006468 	stmdaeq	r0, {r3, r5, r6, sl, sp, lr}
    72a8:	0000003e 	andeq	r0, r0, lr, lsr r0
    72ac:	089e9c01 	ldmeq	lr, {r0, sl, fp, ip, pc}
    72b0:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    72b4:	0100002f 	tsteq	r0, pc, lsr #32
    72b8:	03070360 	movweq	r0, #29536	; 0x7360
    72bc:	91020000 	mrsls	r0, (UNDEF: 2)
    72c0:	17131474 			; <UNDEFINED> instruction: 0x17131474
    72c4:	60010000 	andvs	r0, r1, r0
    72c8:	00010603 	andeq	r0, r1, r3, lsl #12
    72cc:	73910200 	orrsvc	r0, r1, #0, 4
    72d0:	30411300 	subcc	r1, r1, r0, lsl #6
    72d4:	7a010000 	bvc	472dc <_Min_Stack_Size+0x470dc>
    72d8:	00000003 	andeq	r0, r0, r3
    72dc:	00004000 	andeq	r4, r0, r0
    72e0:	d39c0100 	orrsle	r0, ip, #0, 2
    72e4:	14000008 	strne	r0, [r0], #-8
    72e8:	00002f39 	andeq	r2, r0, r9, lsr pc
    72ec:	07037a01 	streq	r7, [r3, -r1, lsl #20]
    72f0:	02000003 	andeq	r0, r0, #3
    72f4:	8c147491 	cfldrshi	mvf7, [r4], {145}	; 0x91
    72f8:	01000031 	tsteq	r0, r1, lsr r0
    72fc:	0093037a 	addseq	r0, r3, sl, ror r3
    7300:	91020000 	mrsls	r0, (UNDEF: 2)
    7304:	c4160072 	ldrgt	r0, [r6], #-114	; 0xffffff8e
    7308:	01000031 	tsteq	r0, r1, lsr r0
    730c:	012c0406 			; <UNDEFINED> instruction: 0x012c0406
    7310:	64a80000 	strtvs	r0, [r8], #0
    7314:	005e0800 	subseq	r0, lr, r0, lsl #16
    7318:	9c010000 	stcls	0, cr0, [r1], {-0}
    731c:	00000948 	andeq	r0, r0, r8, asr #18
    7320:	002f3914 	eoreq	r3, pc, r4, lsl r9	; <UNPREDICTABLE>
    7324:	04060100 	streq	r0, [r6], #-256	; 0xffffff00
    7328:	00000307 	andeq	r0, r0, r7, lsl #6
    732c:	14649102 	strbtne	r9, [r4], #-258	; 0xfffffefe
    7330:	0000307f 	andeq	r3, r0, pc, ror r0
    7334:	9e040601 	cfmadd32ls	mvax0, mvfx0, mvfx4, mvfx1
    7338:	02000000 	andeq	r0, r0, #0
    733c:	d0156091 	mulsle	r5, r1, r0
    7340:	0100002e 	tsteq	r0, lr, lsr #32
    7344:	009e0408 	addseq	r0, lr, r8, lsl #8
    7348:	91020000 	mrsls	r0, (UNDEF: 2)
    734c:	2f881570 	svccs	0x00881570
    7350:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    7354:	00009e04 	andeq	r9, r0, r4, lsl #28
    7358:	6c910200 	lfmvs	f0, 4, [r1], {0}
    735c:	00309f15 	eorseq	r9, r0, r5, lsl pc
    7360:	04090100 	streq	r0, [r9], #-256	; 0xffffff00
    7364:	0000009e 	muleq	r0, lr, r0
    7368:	15689102 	strbne	r9, [r8, #-258]!	; 0xfffffefe
    736c:	0000386d 	andeq	r3, r0, sp, ror #16
    7370:	2c040a01 			; <UNDEFINED> instruction: 0x2c040a01
    7374:	02000001 	andeq	r0, r0, #1
    7378:	16007791 			; <UNDEFINED> instruction: 0x16007791
    737c:	000031e1 	andeq	r3, r0, r1, ror #3
    7380:	9e043601 	cfmadd32ls	mvax0, mvfx3, mvfx4, mvfx1
    7384:	00000000 	andeq	r0, r0, r0
    7388:	42000000 	andmi	r0, r0, #0
    738c:	01000000 	mrseq	r0, (UNDEF: 0)
    7390:	00099f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    7394:	2f391400 	svccs	0x00391400
    7398:	36010000 	strcc	r0, [r1], -r0
    739c:	00030704 	andeq	r0, r3, r4, lsl #14
    73a0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    73a4:	002ed015 	eoreq	sp, lr, r5, lsl r0
    73a8:	04380100 	ldrteq	r0, [r8], #-256	; 0xffffff00
    73ac:	0000009e 	muleq	r0, lr, r0
    73b0:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    73b4:	00002f88 	andeq	r2, r0, r8, lsl #31
    73b8:	9e043901 	vmlals.f16	s6, s8, s2	; <UNPREDICTABLE>
    73bc:	02000000 	andeq	r0, r0, #0
    73c0:	9f157091 	svcls	0x00157091
    73c4:	01000030 	tsteq	r0, r0, lsr r0
    73c8:	009e0439 	addseq	r0, lr, r9, lsr r4
    73cc:	91020000 	mrsls	r0, (UNDEF: 2)
    73d0:	7016006c 	andsvc	r0, r6, ip, rrx
    73d4:	0100002e 	tsteq	r0, lr, lsr #32
    73d8:	00d4046d 	sbcseq	r0, r4, sp, ror #8
    73dc:	65080000 	strvs	r0, [r8, #-0]
    73e0:	00640800 	rsbeq	r0, r4, r0, lsl #16
    73e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    73e8:	00000a05 	andeq	r0, r0, r5, lsl #20
    73ec:	002f3914 	eoreq	r3, pc, r4, lsl r9	; <UNPREDICTABLE>
    73f0:	046d0100 	strbteq	r0, [sp], #-256	; 0xffffff00
    73f4:	00000307 	andeq	r0, r0, r7, lsl #6
    73f8:	14649102 	strbtne	r9, [r4], #-258	; 0xfffffefe
    73fc:	00002f5f 	andeq	r2, r0, pc, asr pc
    7400:	9e046d01 	cdpls	13, 0, cr6, cr4, cr1, {0}
    7404:	02000000 	andeq	r0, r0, #0
    7408:	ae156091 	mrcge	0, 0, r6, cr5, cr1, {4}
    740c:	01000019 	tsteq	r0, r9, lsl r0
    7410:	00d4046f 	sbcseq	r0, r4, pc, ror #8
    7414:	91020000 	mrsls	r0, (UNDEF: 2)
    7418:	302a1577 	eorcc	r1, sl, r7, ror r5
    741c:	70010000 	andvc	r0, r1, r0
    7420:	0000b004 	andeq	fp, r0, r4
    7424:	70910200 	addsvc	r0, r1, r0, lsl #4
    7428:	002ec715 	eoreq	ip, lr, r5, lsl r7
    742c:	04700100 	ldrbteq	r0, [r0], #-256	; 0xffffff00
    7430:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    7434:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    7438:	0030a513 	eorseq	sl, r0, r3, lsl r5
    743c:	04bc0100 	ldrteq	r0, [ip], #256	; 0x100
    7440:	00000000 	andeq	r0, r0, r0
    7444:	0000002c 	andeq	r0, r0, ip, lsr #32
    7448:	0a499c01 	beq	126e454 <_Min_Stack_Size+0x126e254>
    744c:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    7450:	0100002f 	tsteq	r0, pc, lsr #32
    7454:	030704bc 	movweq	r0, #29884	; 0x74bc
    7458:	91020000 	mrsls	r0, (UNDEF: 2)
    745c:	2f5f146c 	svccs	0x005f146c
    7460:	bc010000 	stclt	0, cr0, [r1], {-0}
    7464:	00009e04 	andeq	r9, r0, r4, lsl #28
    7468:	68910200 	ldmvs	r1, {r9}
    746c:	00301915 	eorseq	r1, r0, r5, lsl r9
    7470:	04be0100 	ldrteq	r0, [lr], #256	; 0x100
    7474:	0000009e 	muleq	r0, lr, r0
    7478:	00749102 	rsbseq	r9, r4, r2, lsl #2
    747c:	002f8e16 	eoreq	r8, pc, r6, lsl lr	; <UNPREDICTABLE>
    7480:	04de0100 	ldrbeq	r0, [lr], #256	; 0x100
    7484:	000000e0 	andeq	r0, r0, r0, ror #1
    7488:	00000000 	andeq	r0, r0, r0
    748c:	00000058 	andeq	r0, r0, r8, asr r0
    7490:	0aa09c01 	beq	fe82e49c <BootRAM+0xd79ec3d>
    7494:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    7498:	0100002f 	tsteq	r0, pc, lsr #32
    749c:	030704de 	movweq	r0, #29918	; 0x74de
    74a0:	91020000 	mrsls	r0, (UNDEF: 2)
    74a4:	2ec0146c 	cdpcs	4, 12, cr1, cr0, cr12, {3}
    74a8:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    74ac:	00009e04 	andeq	r9, r0, r4, lsl #28
    74b0:	68910200 	ldmvs	r1, {r9}
    74b4:	0019ae15 	andseq	sl, r9, r5, lsl lr
    74b8:	04e00100 	strbteq	r0, [r0], #256	; 0x100
    74bc:	000000e0 	andeq	r0, r0, r0, ror #1
    74c0:	15779102 	ldrbne	r9, [r7, #-258]!	; 0xfffffefe
    74c4:	00002078 	andeq	r2, r0, r8, ror r0
    74c8:	9e04e101 	mvflss	f6, f1
    74cc:	02000000 	andeq	r0, r0, #0
    74d0:	13007091 	movwne	r7, #145	; 0x91
    74d4:	00002f49 	andeq	r2, r0, r9, asr #30
    74d8:	00051b01 	andeq	r1, r5, r1, lsl #22
    74dc:	2c000000 	stccs	0, cr0, [r0], {-0}
    74e0:	01000000 	mrseq	r0, (UNDEF: 0)
    74e4:	000ae49c 	muleq	sl, ip, r4
    74e8:	2f391400 	svccs	0x00391400
    74ec:	1b010000 	blne	474f4 <_Min_Stack_Size+0x472f4>
    74f0:	00030705 	andeq	r0, r3, r5, lsl #14
    74f4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    74f8:	002ec014 	eoreq	ip, lr, r4, lsl r0
    74fc:	051b0100 	ldreq	r0, [fp, #-256]	; 0xffffff00
    7500:	0000009e 	muleq	r0, lr, r0
    7504:	15689102 	strbne	r9, [r8, #-258]!	; 0xfffffefe
    7508:	00003019 	andeq	r3, r0, r9, lsl r0
    750c:	9e051d01 	cdpls	13, 0, cr1, cr5, cr1, {0}
    7510:	02000000 	andeq	r0, r0, #0
    7514:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    7518:	0000026c 	andeq	r0, r0, ip, ror #4
    751c:	f006ce07 			; <UNDEFINED> instruction: 0xf006ce07
    7520:	0500000a 	streq	r0, [r0, #-10]
    7524:	0000007a 	andeq	r0, r0, sl, ror r0
    7528:	0001f400 	andeq	pc, r1, r0, lsl #8
    752c:	56000400 	strpl	r0, [r0], -r0, lsl #8
    7530:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    7534:	00011101 	andeq	r1, r1, r1, lsl #2
    7538:	32550c00 	subscc	r0, r5, #0, 24
    753c:	09c80000 	stmibeq	r8, {}^	; <UNPREDICTABLE>
    7540:	00000000 	andeq	r0, r0, r0
    7544:	359c0000 	ldrcc	r0, [ip]
    7548:	01020000 	mrseq	r0, (UNDEF: 2)
    754c:	00019206 	andeq	r9, r1, r6, lsl #4
    7550:	00e30300 	rsceq	r0, r3, r0, lsl #6
    7554:	1d020000 	stcne	0, cr0, [r2, #-0]
    7558:	00000033 	andeq	r0, r0, r3, lsr r0
    755c:	90080102 	andls	r0, r8, r2, lsl #2
    7560:	02000001 	andeq	r0, r0, #1
    7564:	00950502 	addseq	r0, r5, r2, lsl #10
    7568:	72030000 	andvc	r0, r3, #0
    756c:	02000000 	andeq	r0, r0, #0
    7570:	00004c2b 	andeq	r4, r0, fp, lsr #24
    7574:	07020200 	streq	r0, [r2, -r0, lsl #4]
    7578:	000001f2 	strdeq	r0, [r0], -r2
    757c:	bd050402 	cfstrslt	mvf0, [r5, #-8]
    7580:	03000000 	movweq	r0, #0
    7584:	00000067 	andeq	r0, r0, r7, rrx
    7588:	00654102 	rsbeq	r4, r5, r2, lsl #2
    758c:	04020000 	streq	r0, [r2], #-0
    7590:	0001c907 	andeq	ip, r1, r7, lsl #18
    7594:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    7598:	000000b8 	strheq	r0, [r0], -r8
    759c:	c4070802 	strgt	r0, [r7], #-2050	; 0xfffff7fe
    75a0:	04000001 	streq	r0, [r0], #-1
    75a4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    75a8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    75ac:	0001ce07 	andeq	ip, r1, r7, lsl #28
    75b0:	00e50300 	rsceq	r0, r5, r0, lsl #6
    75b4:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    75b8:	00000028 	andeq	r0, r0, r8, lsr #32
    75bc:	00007403 	andeq	r7, r0, r3, lsl #8
    75c0:	41240300 			; <UNDEFINED> instruction: 0x41240300
    75c4:	03000000 	movweq	r0, #0
    75c8:	00000069 	andeq	r0, r0, r9, rrx
    75cc:	005a3003 	subseq	r3, sl, r3
    75d0:	04020000 	streq	r0, [r2], #-0
    75d4:	00005907 	andeq	r5, r0, r7, lsl #18
    75d8:	009e0500 	addseq	r0, lr, r0, lsl #10
    75dc:	01060000 	mrseq	r0, (UNDEF: 6)
    75e0:	00000033 	andeq	r0, r0, r3, lsr r0
    75e4:	cf020704 	svcgt	0x00020704
    75e8:	07000000 	streq	r0, [r0, -r0]
    75ec:	00001c74 	andeq	r1, r0, r4, ror ip
    75f0:	45530800 	ldrbmi	r0, [r3, #-2048]	; 0xfffff800
    75f4:	00010054 	andeq	r0, r1, r4, asr r0
    75f8:	002e7709 	eoreq	r7, lr, r9, lsl #14
    75fc:	02070400 	andeq	r0, r7, #0, 8
    7600:	000000b5 	strheq	r0, [r0], -r5
    7604:	1e04100a 	cdpne	0, 0, cr1, cr4, cr10, {0}
    7608:	00011604 	andeq	r1, r1, r4, lsl #12
    760c:	524b0b00 	subpl	r0, fp, #0, 22
    7610:	04200400 	strteq	r0, [r0], #-1024	; 0xfffffc00
    7614:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    7618:	52500b00 	subspl	r0, r0, #0, 22
    761c:	04210400 	strteq	r0, [r1], #-1024	; 0xfffffc00
    7620:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    7624:	4c520b04 	mrrcmi	11, 0, r0, r2, cr4
    7628:	22040052 	andcs	r0, r4, #82	; 0x52
    762c:	0000b004 	andeq	fp, r0, r4
    7630:	530b0800 	movwpl	r0, #47104	; 0xb800
    7634:	23040052 	movwcs	r0, #16466	; 0x4052
    7638:	0000b004 	andeq	fp, r0, r4
    763c:	09000c00 	stmdbeq	r0, {sl, fp}
    7640:	000032ba 			; <UNDEFINED> instruction: 0x000032ba
    7644:	db042404 	blle	11065c <_Min_Stack_Size+0x11045c>
    7648:	0c000000 	stceq	0, cr0, [r0], {-0}
    764c:	00003241 	andeq	r3, r0, r1, asr #4
    7650:	656c5c01 	strbvs	r5, [ip, #-3073]!	; 0xfffff3ff
    7654:	00200800 	eoreq	r0, r0, r0, lsl #16
    7658:	9c010000 	stcls	0, cr0, [r1], {-0}
    765c:	00000146 	andeq	r0, r0, r6, asr #2
    7660:	00328c0d 	eorseq	r8, r2, sp, lsl #24
    7664:	935c0100 	cmpls	ip, #0, 2
    7668:	02000000 	andeq	r0, r0, #0
    766c:	0c007691 	stceq	6, cr7, [r0], {145}	; 0x91
    7670:	0000320d 	andeq	r3, r0, sp, lsl #4
    7674:	658c7001 	strvs	r7, [ip, #1]
    7678:	00200800 	eoreq	r0, r0, r0, lsl #16
    767c:	9c010000 	stcls	0, cr0, [r1], {-0}
    7680:	0000016a 	andeq	r0, r0, sl, ror #2
    7684:	0031fe0d 	eorseq	pc, r1, sp, lsl #28
    7688:	88700100 	ldmdahi	r0!, {r8}^
    768c:	02000000 	andeq	r0, r0, #0
    7690:	0c007791 	stceq	7, cr7, [r0], {145}	; 0x91
    7694:	0000321f 	andeq	r3, r0, pc, lsl r2
    7698:	65ac7d01 	strvs	r7, [ip, #3329]!	; 0xd01
    769c:	00200800 	eoreq	r0, r0, r0, lsl #16
    76a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    76a4:	0000018e 	andeq	r0, r0, lr, lsl #3
    76a8:	0032270d 	eorseq	r2, r2, sp, lsl #14
    76ac:	937d0100 	cmnls	sp, #0, 2
    76b0:	02000000 	andeq	r0, r0, #0
    76b4:	0e007691 	mcreq	6, 0, r7, cr0, cr1, {4}
    76b8:	0000322e 	andeq	r3, r0, lr, lsr #4
    76bc:	65cc8a01 	strbvs	r8, [ip, #2561]	; 0xa01
    76c0:	00180800 	andseq	r0, r8, r0, lsl #16
    76c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    76c8:	0031f20e 	eorseq	pc, r1, lr, lsl #4
    76cc:	e4940100 	ldr	r0, [r4], #256	; 0x100
    76d0:	18080065 	stmdane	r8, {r0, r2, r5, r6}
    76d4:	01000000 	mrseq	r0, (UNDEF: 0)
    76d8:	32a70f9c 	adccc	r0, r7, #156, 30	; 0x270
    76dc:	a1010000 	mrsge	r0, (UNDEF: 1)
    76e0:	000000cf 	andeq	r0, r0, pc, asr #1
    76e4:	00000000 	andeq	r0, r0, r0
    76e8:	00000034 	andeq	r0, r0, r4, lsr r0
    76ec:	01e69c01 	mvneq	r9, r1, lsl #24
    76f0:	9d0d0000 	stcls	0, cr0, [sp, #-0]
    76f4:	01000032 	tsteq	r0, r2, lsr r0
    76f8:	000093a1 	andeq	r9, r0, r1, lsr #7
    76fc:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    7700:	0019ae10 	andseq	sl, r9, r0, lsl lr
    7704:	cfa30100 	svcgt	0x00a30100
    7708:	02000000 	andeq	r0, r0, #0
    770c:	11007791 			; <UNDEFINED> instruction: 0x11007791
    7710:	0000026c 	andeq	r0, r0, ip, ror #4
    7714:	f206ce05 	vceq.f32	d12, d6, d5
    7718:	05000001 	streq	r0, [r0, #-1]
    771c:	0000007a 	andeq	r0, r0, sl, ror r0
    7720:	00014800 	andeq	r4, r1, r0, lsl #16
    7724:	59000400 	stmdbpl	r0, {sl}
    7728:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    772c:	00011101 	andeq	r1, r1, r1, lsl #2
    7730:	32d60c00 	sbcscc	r0, r6, #0, 24
    7734:	0a000000 	beq	773c <_Min_Stack_Size+0x753c>
    7738:	00000000 	andeq	r0, r0, r0
    773c:	37400000 	strbcc	r0, [r0, -r0]
    7740:	01020000 	mrseq	r0, (UNDEF: 2)
    7744:	00019206 	andeq	r9, r1, r6, lsl #4
    7748:	08010200 	stmdaeq	r1, {r9}
    774c:	00000190 	muleq	r0, r0, r1
    7750:	95050202 	strls	r0, [r5, #-514]	; 0xfffffdfe
    7754:	02000000 	andeq	r0, r0, #0
    7758:	01f20702 	mvnseq	r0, r2, lsl #14
    775c:	04020000 	streq	r0, [r2], #-0
    7760:	0000bd05 	andeq	fp, r0, r5, lsl #26
    7764:	00670300 	rsbeq	r0, r7, r0, lsl #6
    7768:	41020000 	mrsmi	r0, (UNDEF: 2)
    776c:	0000004f 	andeq	r0, r0, pc, asr #32
    7770:	c9070402 	stmdbgt	r7, {r1, sl}
    7774:	02000001 	andeq	r0, r0, #1
    7778:	00b80508 	adcseq	r0, r8, r8, lsl #10
    777c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7780:	0001c407 	andeq	ip, r1, r7, lsl #8
    7784:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    7788:	00746e69 	rsbseq	r6, r4, r9, ror #28
    778c:	ce070402 	cdpgt	4, 0, cr0, cr7, cr2, {0}
    7790:	03000001 	movweq	r0, #1
    7794:	00000069 	andeq	r0, r0, r9, rrx
    7798:	00443003 	subeq	r3, r4, r3
    779c:	04020000 	streq	r0, [r2], #-0
    77a0:	00005907 	andeq	r5, r0, r7, lsl #18
    77a4:	00720500 	rsbseq	r0, r2, r0, lsl #10
    77a8:	01060000 	mrseq	r0, (UNDEF: 6)
    77ac:	00000028 	andeq	r0, r0, r8, lsr #32
    77b0:	a3020904 	movwge	r0, #10500	; 0x2904
    77b4:	07000000 	streq	r0, [r0, -r0]
    77b8:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    77bc:	04620700 	strbteq	r0, [r2], #-1792	; 0xfffff900
    77c0:	00010000 	andeq	r0, r1, r0
    77c4:	0017d408 	andseq	sp, r7, r8, lsl #8
    77c8:	02090400 	andeq	r0, r9, #0, 8
    77cc:	00000089 	andeq	r0, r0, r9, lsl #1
    77d0:	14040809 	strne	r0, [r4], #-2057	; 0xfffff7f7
    77d4:	0000d203 	andeq	sp, r0, r3, lsl #4
    77d8:	333b0a00 	teqcc	fp, #0, 20
    77dc:	16040000 	strne	r0, [r4], -r0
    77e0:	00008403 	andeq	r8, r0, r3, lsl #8
    77e4:	430b0000 	movwmi	r0, #45056	; 0xb000
    77e8:	17040052 	smlsdne	r4, r2, r0, r0
    77ec:	00008403 	andeq	r8, r0, r3, lsl #8
    77f0:	08000400 	stmdaeq	r0, {sl}
    77f4:	000032c7 	andeq	r3, r0, r7, asr #5
    77f8:	af031804 	svcge	0x00031804
    77fc:	0c000000 	stceq	0, cr0, [r0], {-0}
    7800:	0000331d 	andeq	r3, r0, sp, lsl r3
    7804:	00725401 	rsbseq	r5, r2, r1, lsl #8
    7808:	00000000 	andeq	r0, r0, r0
    780c:	00180000 	andseq	r0, r8, r0
    7810:	9c010000 	stcls	0, cr0, [r1], {-0}
    7814:	0033420c 	eorseq	r4, r3, ip, lsl #4
    7818:	725e0100 	subsvc	r0, lr, #0, 2
    781c:	00000000 	andeq	r0, r0, r0
    7820:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    7824:	01000000 	mrseq	r0, (UNDEF: 0)
    7828:	330f0d9c 	movwcc	r0, #64924	; 0xfd9c
    782c:	86010000 	strhi	r0, [r1], -r0
    7830:	080065fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, sp, lr}
    7834:	0000003c 	andeq	r0, r0, ip, lsr r0
    7838:	013a9c01 	teqeq	sl, r1, lsl #24
    783c:	2d0e0000 	stccs	0, cr0, [lr, #-0]
    7840:	01000033 	tsteq	r0, r3, lsr r0
    7844:	00007286 	andeq	r7, r0, r6, lsl #5
    7848:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    784c:	0017130e 	andseq	r1, r7, lr, lsl #6
    7850:	a3860100 	orrge	r0, r6, #0, 2
    7854:	02000000 	andeq	r0, r0, #0
    7858:	0f007391 	svceq	0x00007391
    785c:	0000026c 	andeq	r0, r0, ip, ror #4
    7860:	4606ce05 	strmi	ip, [r6], -r5, lsl #28
    7864:	05000001 	streq	r0, [r0, #-1]
    7868:	00000064 	andeq	r0, r0, r4, rrx
    786c:	0009bb00 	andeq	fp, r9, r0, lsl #22
    7870:	39000400 	stmdbcc	r0, {sl}
    7874:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    7878:	00011101 	andeq	r1, r1, r1, lsl #2
    787c:	36aa0c00 	strtcc	r0, [sl], r0, lsl #24
    7880:	0a200000 	beq	807888 <_Min_Stack_Size+0x807688>
    7884:	00000000 	andeq	r0, r0, r0
    7888:	38af0000 	stmiacc	pc!, {}	; <UNPREDICTABLE>
    788c:	e4020000 	str	r0, [r2], #-0
    7890:	01000033 	tsteq	r0, r3, lsr r0
    7894:	00000164 	andeq	r0, r0, r4, ror #2
    7898:	0164a704 	cmneq	r4, r4, lsl #14
    789c:	b3030000 	movwlt	r0, #12288	; 0x3000
    78a0:	72000035 	andvc	r0, r0, #53	; 0x35
    78a4:	00341003 	eorseq	r1, r4, r3
    78a8:	40037400 	andmi	r7, r3, r0, lsl #8
    78ac:	75000035 	strvc	r0, [r0, #-53]	; 0xffffffcb
    78b0:	00363d03 	eorseq	r3, r6, r3, lsl #26
    78b4:	5a037600 	bpl	e50bc <_Min_Stack_Size+0xe4ebc>
    78b8:	7b000036 	blvc	7998 <_Min_Stack_Size+0x7798>
    78bc:	00362b03 	eorseq	r2, r6, r3, lsl #22
    78c0:	e9037c00 	stmdb	r3, {sl, fp, ip, sp, lr}
    78c4:	7e000033 	mcrvc	0, 0, r0, cr0, cr3, {1}
    78c8:	0035fe03 	eorseq	pc, r5, r3, lsl #28
    78cc:	28047f00 	stmdacs	r4, {r8, r9, sl, fp, ip, sp, lr}
    78d0:	00000035 	andeq	r0, r0, r5, lsr r0
    78d4:	00355904 	eorseq	r5, r5, r4, lsl #18
    78d8:	e0040100 	and	r0, r4, r0, lsl #2
    78dc:	02000036 	andeq	r0, r0, #54	; 0x36
    78e0:	00359e04 	eorseq	r9, r5, r4, lsl #28
    78e4:	c4040300 	strgt	r0, [r4], #-768	; 0xfffffd00
    78e8:	04000033 	streq	r0, [r0], #-51	; 0xffffffcd
    78ec:	00340704 	eorseq	r0, r4, r4, lsl #14
    78f0:	cf040500 	svcgt	0x00040500
    78f4:	06000033 			; <UNDEFINED> instruction: 0x06000033
    78f8:	0035d404 	eorseq	sp, r5, r4, lsl #8
    78fc:	97040700 	strls	r0, [r4, -r0, lsl #14]
    7900:	08000034 	stmdaeq	r0, {r2, r4, r5}
    7904:	00368304 	eorseq	r8, r6, r4, lsl #6
    7908:	4e040900 	vmlami.f16	s0, s8, s0	; <UNPREDICTABLE>
    790c:	0a000035 	beq	79e8 <_Min_Stack_Size+0x77e8>
    7910:	0034df04 	eorseq	sp, r4, r4, lsl #30
    7914:	b1040b00 	tstlt	r4, r0, lsl #22
    7918:	0c000033 	stceq	0, cr0, [r0], {51}	; 0x33
    791c:	00356204 	eorseq	r6, r5, r4, lsl #4
    7920:	3e040d00 	cdpcc	13, 0, cr0, cr4, cr0, {0}
    7924:	0e000034 	mcreq	0, 0, r0, cr0, cr4, {1}
    7928:	00367004 	eorseq	r7, r6, r4
    792c:	af040f00 	svcge	0x00040f00
    7930:	10000034 	andne	r0, r0, r4, lsr r0
    7934:	00337504 	eorseq	r7, r3, r4, lsl #10
    7938:	9e041100 	adflss	f1, f4, f0
    793c:	12000036 	andne	r0, r0, #54	; 0x36
    7940:	00345f04 	eorseq	r5, r4, r4, lsl #30
    7944:	52041300 	andpl	r1, r4, #0, 6
    7948:	14000033 	strne	r0, [r0], #-51	; 0xffffffcd
    794c:	00345104 	eorseq	r5, r4, r4, lsl #2
    7950:	67041500 	strvs	r1, [r4, -r0, lsl #10]
    7954:	16000033 			; <UNDEFINED> instruction: 0x16000033
    7958:	00364d04 	eorseq	r4, r6, r4, lsl #26
    795c:	26041700 	strcs	r1, [r4], -r0, lsl #14
    7960:	18000034 	stmdane	r0, {r2, r4, r5}
    7964:	00359104 	eorseq	r9, r5, r4, lsl #2
    7968:	df041900 	svcle	0x00041900
    796c:	1a000035 	bne	7a48 <_Min_Stack_Size+0x7848>
    7970:	0035c704 	eorseq	ip, r5, r4, lsl #14
    7974:	0b041b00 	bleq	10e57c <_Min_Stack_Size+0x10e37c>
    7978:	1c000036 	stcne	0, cr0, [r0], {54}	; 0x36
    797c:	0034d504 	eorseq	sp, r4, r4, lsl #10
    7980:	a7041d00 	strge	r1, [r4, -r0, lsl #26]
    7984:	1e000033 	mcrne	0, 0, r0, cr0, cr3, {1}
    7988:	00357504 	eorseq	r7, r5, r4, lsl #10
    798c:	f1041f00 			; <UNDEFINED> instruction: 0xf1041f00
    7990:	20000035 	andcs	r0, r0, r5, lsr r0
    7994:	0034a204 	eorseq	sl, r4, r4, lsl #4
    7998:	88042100 	stmdahi	r4, {r8, sp}
    799c:	22000033 	andcs	r0, r0, #51	; 0x33
    79a0:	00343404 	eorseq	r3, r4, r4, lsl #8
    79a4:	66042300 	strvs	r2, [r4], -r0, lsl #6
    79a8:	24000036 	strcs	r0, [r0], #-54	; 0xffffffca
    79ac:	0035a704 	eorseq	sl, r5, r4, lsl #14
    79b0:	73042500 	movwvc	r2, #17664	; 0x4500
    79b4:	26000034 			; <UNDEFINED> instruction: 0x26000034
    79b8:	0036d404 	eorseq	sp, r6, r4, lsl #8
    79bc:	da042700 	ble	1115c4 <_Min_Stack_Size+0x1113c4>
    79c0:	28000033 	stmdacs	r0, {r0, r1, r4, r5}
    79c4:	0036ec04 	eorseq	lr, r6, r4, lsl #24
    79c8:	19042900 	stmdbne	r4, {r8, fp, sp}
    79cc:	2a000035 	bcs	7aa8 <_Min_Stack_Size+0x78a8>
    79d0:	06010500 	streq	r0, [r1], -r0, lsl #10
    79d4:	00000192 	muleq	r0, r2, r1
    79d8:	0000e306 	andeq	lr, r0, r6, lsl #6
    79dc:	761d0200 	ldrvc	r0, [sp], -r0, lsl #4
    79e0:	05000001 	streq	r0, [r0, #-1]
    79e4:	01900801 	orrseq	r0, r0, r1, lsl #16
    79e8:	02050000 	andeq	r0, r5, #0
    79ec:	00009505 	andeq	r9, r0, r5, lsl #10
    79f0:	00720600 	rsbseq	r0, r2, r0, lsl #12
    79f4:	2b020000 	blcs	879fc <_Min_Stack_Size+0x877fc>
    79f8:	0000018f 	andeq	r0, r0, pc, lsl #3
    79fc:	f2070205 	vhsub.s8	d0, d7, d5
    7a00:	05000001 	streq	r0, [r0, #-1]
    7a04:	00bd0504 	adcseq	r0, sp, r4, lsl #10
    7a08:	67060000 	strvs	r0, [r6, -r0]
    7a0c:	02000000 	andeq	r0, r0, #0
    7a10:	0001a841 	andeq	sl, r1, r1, asr #16
    7a14:	07040500 	streq	r0, [r4, -r0, lsl #10]
    7a18:	000001c9 	andeq	r0, r0, r9, asr #3
    7a1c:	b8050805 	stmdalt	r5, {r0, r2, fp}
    7a20:	05000000 	streq	r0, [r0, #-0]
    7a24:	01c40708 	biceq	r0, r4, r8, lsl #14
    7a28:	04070000 	streq	r0, [r7], #-0
    7a2c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    7a30:	07040500 	streq	r0, [r4, -r0, lsl #10]
    7a34:	000001ce 	andeq	r0, r0, lr, asr #3
    7a38:	0000e506 	andeq	lr, r0, r6, lsl #10
    7a3c:	6b180300 	blvs	608644 <_Min_Stack_Size+0x608444>
    7a40:	06000001 	streq	r0, [r0], -r1
    7a44:	00000074 	andeq	r0, r0, r4, ror r0
    7a48:	01842403 	orreq	r2, r4, r3, lsl #8
    7a4c:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    7a50:	03000000 	movweq	r0, #0
    7a54:	00019d30 	andeq	r9, r1, r0, lsr sp
    7a58:	07040500 	streq	r0, [r4, -r0, lsl #10]
    7a5c:	00000059 	andeq	r0, r0, r9, asr r0
    7a60:	0001e108 	andeq	lr, r1, r8, lsl #2
    7a64:	01d60800 	bicseq	r0, r6, r0, lsl #16
    7a68:	01090000 	mrseq	r0, (UNDEF: 9)
    7a6c:	00000176 	andeq	r0, r0, r6, ror r1
    7a70:	17020704 	strne	r0, [r2, -r4, lsl #14]
    7a74:	04000002 	streq	r0, [r0], #-2
    7a78:	00001c74 	andeq	r1, r0, r4, ror ip
    7a7c:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xfffff600
    7a80:	00010054 	andeq	r0, r1, r4, asr r0
    7a84:	01760109 	cmneq	r6, r9, lsl #2
    7a88:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    7a8c:	00023102 	andeq	r3, r2, r2, lsl #2
    7a90:	02f00400 	rscseq	r0, r0, #0, 8
    7a94:	04000000 	streq	r0, [r0], #-0
    7a98:	00000462 	andeq	r0, r0, r2, ror #8
    7a9c:	d40b0001 	strle	r0, [fp], #-1
    7aa0:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    7aa4:	02170209 	andseq	r0, r7, #-1879048192	; 0x90000000
    7aa8:	1c0c0000 	stcne	0, cr0, [ip], {-0}
    7aac:	a203e904 	andge	lr, r3, #4, 18	; 0x10000
    7ab0:	0d000002 	stceq	0, cr0, [r0, #-8]
    7ab4:	004c5243 	subeq	r5, ip, r3, asr #4
    7ab8:	f303eb04 	vqrdmulh.s<illegal width 8>	d14, d3, d4
    7abc:	00000001 	andeq	r0, r0, r1
    7ac0:	4852430d 	ldmdami	r2, {r0, r2, r3, r8, r9, lr}^
    7ac4:	03ec0400 	mvneq	r0, #0, 8
    7ac8:	000001f3 	strdeq	r0, [r0], -r3
    7acc:	44490d04 	strbmi	r0, [r9], #-3332	; 0xfffff2fc
    7ad0:	ed040052 	stc	0, cr0, [r4, #-328]	; 0xfffffeb8
    7ad4:	0001f303 	andeq	pc, r1, r3, lsl #6
    7ad8:	4f0d0800 	svcmi	0x000d0800
    7adc:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
    7ae0:	01f303ee 	mvnseq	r0, lr, ror #7
    7ae4:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    7ae8:	00001d04 	andeq	r1, r0, r4, lsl #26
    7aec:	f303ef04 	vpmax.f32	d14, d3, d4
    7af0:	10000001 	andne	r0, r0, r1
    7af4:	5252420d 	subspl	r4, r2, #-805306368	; 0xd0000000
    7af8:	03f00400 	mvnseq	r0, #0, 8
    7afc:	000001f3 	strdeq	r0, [r0], -r3
    7b00:	1dd50e14 	ldclne	14, cr0, [r5, #80]	; 0x50
    7b04:	f1040000 	cps	#0
    7b08:	0001f303 	andeq	pc, r1, r3, lsl #6
    7b0c:	0b001800 	bleq	db14 <_Min_Stack_Size+0xd914>
    7b10:	00001bfc 	strdeq	r1, [r0], -ip
    7b14:	3d03f204 	sfmcc	f7, 1, [r3, #-16]
    7b18:	0c000002 	stceq	0, cr0, [r0], {2}
    7b1c:	04040424 	streq	r0, [r4], #-1060	; 0xfffffbdc
    7b20:	000003a1 	andeq	r0, r0, r1, lsr #7
    7b24:	3152430d 	cmpcc	r2, sp, lsl #6
    7b28:	04060400 	streq	r0, [r6], #-1024	; 0xfffffc00
    7b2c:	000001f8 	strdeq	r0, [r0], -r8
    7b30:	03c20e00 	biceq	r0, r2, #0, 28
    7b34:	07040000 	streq	r0, [r4, -r0]
    7b38:	0001d604 	andeq	sp, r1, r4, lsl #12
    7b3c:	430d0200 	movwmi	r0, #53760	; 0xd200
    7b40:	04003252 	streq	r3, [r0], #-594	; 0xfffffdae
    7b44:	01f80408 	mvnseq	r0, r8, lsl #8
    7b48:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    7b4c:	000003cc 	andeq	r0, r0, ip, asr #7
    7b50:	d6040904 	strle	r0, [r4], -r4, lsl #18
    7b54:	06000001 	streq	r0, [r0], -r1
    7b58:	0003b80e 	andeq	fp, r3, lr, lsl #16
    7b5c:	040a0400 	streq	r0, [sl], #-1024	; 0xfffffc00
    7b60:	000001f8 	strdeq	r0, [r0], -r8
    7b64:	03d60e08 	bicseq	r0, r6, #8, 28	; 0x80
    7b68:	0b040000 	bleq	107b70 <_Min_Stack_Size+0x107970>
    7b6c:	0001d604 	andeq	sp, r1, r4, lsl #12
    7b70:	bd0e0a00 	vstrlt	s0, [lr, #-0]
    7b74:	04000003 	streq	r0, [r0], #-3
    7b78:	01f8040c 	mvnseq	r0, ip, lsl #8
    7b7c:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    7b80:	000002ab 	andeq	r0, r0, fp, lsr #5
    7b84:	d6040d04 	strle	r0, [r4], -r4, lsl #26
    7b88:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    7b8c:	0052440d 	subseq	r4, r2, sp, lsl #8
    7b90:	f8040e04 			; <UNDEFINED> instruction: 0xf8040e04
    7b94:	10000001 	andne	r0, r0, r1
    7b98:	0003ea0e 	andeq	lr, r3, lr, lsl #20
    7b9c:	040f0400 	streq	r0, [pc], #-1024	; 7ba4 <_Min_Stack_Size+0x79a4>
    7ba0:	000001d6 	ldrdeq	r0, [r0], -r6
    7ba4:	52530d12 	subspl	r0, r3, #1152	; 0x480
    7ba8:	10040031 	andne	r0, r4, r1, lsr r0
    7bac:	0001f804 	andeq	pc, r1, r4, lsl #16
    7bb0:	f40e1400 	vst3.8	{d1-d3}, [lr], r0
    7bb4:	04000003 	streq	r0, [r0], #-3
    7bb8:	01d60411 	bicseq	r0, r6, r1, lsl r4
    7bbc:	0d160000 	ldceq	0, cr0, [r6, #-0]
    7bc0:	00325253 	eorseq	r5, r2, r3, asr r2
    7bc4:	f8041204 			; <UNDEFINED> instruction: 0xf8041204
    7bc8:	18000001 	stmdane	r0, {r0}
    7bcc:	0002d70e 	andeq	sp, r2, lr, lsl #14
    7bd0:	04130400 	ldreq	r0, [r3], #-1024	; 0xfffffc00
    7bd4:	000001d6 	ldrdeq	r0, [r0], -r6
    7bd8:	43430d1a 	movtmi	r0, #15642	; 0x3d1a
    7bdc:	14040052 	strne	r0, [r4], #-82	; 0xffffffae
    7be0:	0001f804 	andeq	pc, r1, r4, lsl #16
    7be4:	150e1c00 	strne	r1, [lr, #-3072]	; 0xfffff400
    7be8:	04000004 	streq	r0, [r0], #-4
    7bec:	01d60415 	bicseq	r0, r6, r5, lsl r4
    7bf0:	0e1e0000 	cdpeq	0, 1, cr0, cr14, cr0, {0}
    7bf4:	0000044b 	andeq	r0, r0, fp, asr #8
    7bf8:	f8041604 			; <UNDEFINED> instruction: 0xf8041604
    7bfc:	20000001 	andcs	r0, r0, r1
    7c00:	00041f0e 	andeq	r1, r4, lr, lsl #30
    7c04:	04170400 	ldreq	r0, [r7], #-1024	; 0xfffffc00
    7c08:	000001d6 	ldrdeq	r0, [r0], -r6
    7c0c:	470b0022 	strmi	r0, [fp, -r2, lsr #32]
    7c10:	04000003 	streq	r0, [r0], #-3
    7c14:	02ae0418 	adceq	r0, lr, #24, 8	; 0x18000000
    7c18:	240c0000 	strcs	r0, [ip], #-0
    7c1c:	9f048804 	svcls	0x00048804
    7c20:	0d000004 	stceq	0, cr0, [r0, #-16]
    7c24:	00315243 	eorseq	r5, r1, r3, asr #4
    7c28:	f8048a04 			; <UNDEFINED> instruction: 0xf8048a04
    7c2c:	00000001 	andeq	r0, r0, r1
    7c30:	0003c20e 	andeq	ip, r3, lr, lsl #4
    7c34:	048b0400 	streq	r0, [fp], #1024	; 0x400
    7c38:	000001d6 	ldrdeq	r0, [r0], -r6
    7c3c:	52430d02 	subpl	r0, r3, #2, 26	; 0x80
    7c40:	8c040032 	stchi	0, cr0, [r4], {50}	; 0x32
    7c44:	0001f804 	andeq	pc, r1, r4, lsl #16
    7c48:	cc0e0400 	cfstrsgt	mvf0, [lr], {-0}
    7c4c:	04000003 	streq	r0, [r0], #-3
    7c50:	01d6048d 	bicseq	r0, r6, sp, lsl #9
    7c54:	0d060000 	stceq	0, cr0, [r6, #-0]
    7c58:	04005253 	streq	r5, [r0], #-595	; 0xfffffdad
    7c5c:	01f8048e 	mvnseq	r0, lr, lsl #9
    7c60:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    7c64:	000003d6 	ldrdeq	r0, [r0], -r6
    7c68:	d6048f04 	strle	r8, [r4], -r4, lsl #30
    7c6c:	0a000001 	beq	7c78 <_Min_Stack_Size+0x7a78>
    7c70:	0052440d 	subseq	r4, r2, sp, lsl #8
    7c74:	f8049004 			; <UNDEFINED> instruction: 0xf8049004
    7c78:	0c000001 	stceq	0, cr0, [r0], {1}
    7c7c:	0002ab0e 	andeq	sl, r2, lr, lsl #22
    7c80:	04910400 	ldreq	r0, [r1], #1024	; 0x400
    7c84:	000001d6 	ldrdeq	r0, [r0], -r6
    7c88:	218f0e0e 	orrcs	r0, pc, lr, lsl #28
    7c8c:	92040000 	andls	r0, r4, #0
    7c90:	0001f804 	andeq	pc, r1, r4, lsl #16
    7c94:	ea0e1000 	b	38bc9c <_Min_Stack_Size+0x38ba9c>
    7c98:	04000003 	streq	r0, [r0], #-3
    7c9c:	01d60493 			; <UNDEFINED> instruction: 0x01d60493
    7ca0:	0e120000 	cdpeq	0, 1, cr0, cr2, cr0, {0}
    7ca4:	00002046 	andeq	r2, r0, r6, asr #32
    7ca8:	f8049404 			; <UNDEFINED> instruction: 0xf8049404
    7cac:	14000001 	strne	r0, [r0], #-1
    7cb0:	0003f40e 	andeq	pc, r3, lr, lsl #8
    7cb4:	04950400 	ldreq	r0, [r5], #1024	; 0x400
    7cb8:	000001d6 	ldrdeq	r0, [r0], -r6
    7cbc:	20290e16 	eorcs	r0, r9, r6, lsl lr
    7cc0:	96040000 	strls	r0, [r4], -r0
    7cc4:	0001f804 	andeq	pc, r1, r4, lsl #16
    7cc8:	d70e1800 	strle	r1, [lr, -r0, lsl #16]
    7ccc:	04000002 	streq	r0, [r0], #-2
    7cd0:	01d60497 			; <UNDEFINED> instruction: 0x01d60497
    7cd4:	0e1a0000 	cdpeq	0, 1, cr0, cr10, cr0, {0}
    7cd8:	00002163 	andeq	r2, r0, r3, ror #2
    7cdc:	f8049804 			; <UNDEFINED> instruction: 0xf8049804
    7ce0:	1c000001 	stcne	0, cr0, [r0], {1}
    7ce4:	0004150e 	andeq	r1, r4, lr, lsl #10
    7ce8:	04990400 	ldreq	r0, [r9], #1024	; 0x400
    7cec:	000001d6 	ldrdeq	r0, [r0], -r6
    7cf0:	22a70e1e 	adccs	r0, r7, #480	; 0x1e0
    7cf4:	9a040000 	bls	107cfc <_Min_Stack_Size+0x107afc>
    7cf8:	0001f804 	andeq	pc, r1, r4, lsl #16
    7cfc:	1f0e2000 	svcne	0x000e2000
    7d00:	04000004 	streq	r0, [r0], #-4
    7d04:	01d6049b 			; <UNDEFINED> instruction: 0x01d6049b
    7d08:	00220000 	eoreq	r0, r2, r0
    7d0c:	00219e0b 	eoreq	r9, r1, fp, lsl #28
    7d10:	049c0400 	ldreq	r0, [ip], #1024	; 0x400
    7d14:	000003ad 	andeq	r0, r0, sp, lsr #7
    7d18:	a204500c 	andge	r5, r4, #12
    7d1c:	0006bc04 	andeq	fp, r6, r4, lsl #24
    7d20:	52430d00 	subpl	r0, r3, #0, 26
    7d24:	a4040031 	strge	r0, [r4], #-49	; 0xffffffcf
    7d28:	0001f804 	andeq	pc, r1, r4, lsl #16
    7d2c:	c20e0000 	andgt	r0, lr, #0
    7d30:	04000003 	streq	r0, [r0], #-3
    7d34:	01d604a5 	bicseq	r0, r6, r5, lsr #9
    7d38:	0d020000 	stceq	0, cr0, [r2, #-0]
    7d3c:	00325243 	eorseq	r5, r2, r3, asr #4
    7d40:	f804a604 			; <UNDEFINED> instruction: 0xf804a604
    7d44:	04000001 	streq	r0, [r0], #-1
    7d48:	0003cc0e 	andeq	ip, r3, lr, lsl #24
    7d4c:	04a70400 	strteq	r0, [r7], #1024	; 0x400
    7d50:	000001d6 	ldrdeq	r0, [r0], -r6
    7d54:	27bf0e06 	ldrcs	r0, [pc, r6, lsl #28]!
    7d58:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    7d5c:	0001f804 	andeq	pc, r1, r4, lsl #16
    7d60:	d60e0800 	strle	r0, [lr], -r0, lsl #16
    7d64:	04000003 	streq	r0, [r0], #-3
    7d68:	01d604a9 	bicseq	r0, r6, r9, lsr #9
    7d6c:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    7d70:	00002326 	andeq	r2, r0, r6, lsr #6
    7d74:	f804aa04 			; <UNDEFINED> instruction: 0xf804aa04
    7d78:	0c000001 	stceq	0, cr0, [r0], {1}
    7d7c:	0002ab0e 	andeq	sl, r2, lr, lsl #22
    7d80:	04ab0400 	strteq	r0, [fp], #1024	; 0x400
    7d84:	000001d6 	ldrdeq	r0, [r0], -r6
    7d88:	52530d0e 	subspl	r0, r3, #896	; 0x380
    7d8c:	04ac0400 	strteq	r0, [ip], #1024	; 0x400
    7d90:	000001f8 	strdeq	r0, [r0], -r8
    7d94:	03ea0e10 	mvneq	r0, #16, 28	; 0x100
    7d98:	ad040000 	stcge	0, cr0, [r4, #-0]
    7d9c:	0001d604 	andeq	sp, r1, r4, lsl #12
    7da0:	450d1200 	strmi	r1, [sp, #-512]	; 0xfffffe00
    7da4:	04005247 	streq	r5, [r0], #-583	; 0xfffffdb9
    7da8:	01f804ae 	mvnseq	r0, lr, lsr #9
    7dac:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    7db0:	000003f4 	strdeq	r0, [r0], -r4
    7db4:	d604af04 	strle	sl, [r4], -r4, lsl #30
    7db8:	16000001 	strne	r0, [r0], -r1
    7dbc:	0024c70e 	eoreq	ip, r4, lr, lsl #14
    7dc0:	04b00400 	ldrteq	r0, [r0], #1024	; 0x400
    7dc4:	000001f8 	strdeq	r0, [r0], -r8
    7dc8:	02d70e18 	sbcseq	r0, r7, #24, 28	; 0x180
    7dcc:	b1040000 	mrslt	r0, (UNDEF: 4)
    7dd0:	0001d604 	andeq	sp, r1, r4, lsl #12
    7dd4:	cd0e1a00 	vstrgt	s2, [lr, #-0]
    7dd8:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    7ddc:	01f804b2 	ldrheq	r0, [r8, #66]!	; 0x42
    7de0:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
    7de4:	00000415 	andeq	r0, r0, r5, lsl r4
    7de8:	d604b304 	strle	fp, [r4], -r4, lsl #6
    7dec:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    7df0:	00259b0e 	eoreq	r9, r5, lr, lsl #22
    7df4:	04b40400 	ldrteq	r0, [r4], #1024	; 0x400
    7df8:	000001f8 	strdeq	r0, [r0], -r8
    7dfc:	041f0e20 	ldreq	r0, [pc], #-3616	; 7e04 <_Min_Stack_Size+0x7c04>
    7e00:	b5040000 	strlt	r0, [r4, #-0]
    7e04:	0001d604 	andeq	sp, r1, r4, lsl #12
    7e08:	430d2200 	movwmi	r2, #53760	; 0xd200
    7e0c:	0400544e 	streq	r5, [r0], #-1102	; 0xfffffbb2
    7e10:	01f804b6 	ldrheq	r0, [r8, #70]!	; 0x46
    7e14:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
    7e18:	00002a51 	andeq	r2, r0, r1, asr sl
    7e1c:	d604b704 	strle	fp, [r4], -r4, lsl #14
    7e20:	26000001 	strcs	r0, [r0], -r1
    7e24:	4353500d 	cmpmi	r3, #13
    7e28:	04b80400 	ldrteq	r0, [r8], #1024	; 0x400
    7e2c:	000001f8 	strdeq	r0, [r0], -r8
    7e30:	25130e28 	ldrcs	r0, [r3, #-3624]	; 0xfffff1d8
    7e34:	b9040000 	stmdblt	r4, {}	; <UNPREDICTABLE>
    7e38:	0001d604 	andeq	sp, r1, r4, lsl #12
    7e3c:	410d2a00 	tstmi	sp, r0, lsl #20
    7e40:	04005252 	streq	r5, [r0], #-594	; 0xfffffdae
    7e44:	01f804ba 	ldrheq	r0, [r8, #74]!	; 0x4a
    7e48:	0e2c0000 	cdpeq	0, 2, cr0, cr12, cr0, {0}
    7e4c:	0000251e 	andeq	r2, r0, lr, lsl r5
    7e50:	d604bb04 	strle	fp, [r4], -r4, lsl #22
    7e54:	2e000001 	cdpcs	0, 0, cr0, cr0, cr1, {0}
    7e58:	5243520d 	subpl	r5, r3, #-805306368	; 0xd0000000
    7e5c:	04bc0400 	ldrteq	r0, [ip], #1024	; 0x400
    7e60:	000001f8 	strdeq	r0, [r0], -r8
    7e64:	25290e30 	strcs	r0, [r9, #-3632]!	; 0xfffff1d0
    7e68:	bd040000 	stclt	0, cr0, [r4, #-0]
    7e6c:	0001d604 	andeq	sp, r1, r4, lsl #12
    7e70:	fa0e3200 	blx	394678 <_Min_Stack_Size+0x394478>
    7e74:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    7e78:	01f804be 	ldrheq	r0, [r8, #78]!	; 0x4e
    7e7c:	0e340000 	cdpeq	0, 3, cr0, cr4, cr0, {0}
    7e80:	00002534 	andeq	r2, r0, r4, lsr r5
    7e84:	d604bf04 	strle	fp, [r4], -r4, lsl #30
    7e88:	36000001 	strcc	r0, [r0], -r1
    7e8c:	0023f90e 	eoreq	pc, r3, lr, lsl #18
    7e90:	04c00400 	strbeq	r0, [r0], #1024	; 0x400
    7e94:	000001f8 	strdeq	r0, [r0], -r8
    7e98:	253f0e38 	ldrcs	r0, [pc, #-3640]!	; 7068 <_Min_Stack_Size+0x6e68>
    7e9c:	c1040000 	mrsgt	r0, (UNDEF: 4)
    7ea0:	0001d604 	andeq	sp, r1, r4, lsl #12
    7ea4:	170e3a00 	strne	r3, [lr, -r0, lsl #20]
    7ea8:	0400002d 	streq	r0, [r0], #-45	; 0xffffffd3
    7eac:	01f804c2 	mvnseq	r0, r2, asr #9
    7eb0:	0e3c0000 	cdpeq	0, 3, cr0, cr12, cr0, {0}
    7eb4:	0000254a 	andeq	r2, r0, sl, asr #10
    7eb8:	d604c304 	strle	ip, [r4], -r4, lsl #6
    7ebc:	3e000001 	cdpcc	0, 0, cr0, cr0, cr1, {0}
    7ec0:	002d1c0e 	eoreq	r1, sp, lr, lsl #24
    7ec4:	04c40400 	strbeq	r0, [r4], #1024	; 0x400
    7ec8:	000001f8 	strdeq	r0, [r0], -r8
    7ecc:	25550e40 	ldrbcs	r0, [r5, #-3648]	; 0xfffff1c0
    7ed0:	c5040000 	strgt	r0, [r4, #-0]
    7ed4:	0001d604 	andeq	sp, r1, r4, lsl #12
    7ed8:	b40e4200 	strlt	r4, [lr], #-512	; 0xfffffe00
    7edc:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    7ee0:	01f804c6 	mvnseq	r0, r6, asr #9
    7ee4:	0e440000 	cdpeq	0, 4, cr0, cr4, cr0, {0}
    7ee8:	00002560 	andeq	r2, r0, r0, ror #10
    7eec:	d604c704 	strle	ip, [r4], -r4, lsl #14
    7ef0:	46000001 	strmi	r0, [r0], -r1
    7ef4:	5243440d 	subpl	r4, r3, #218103808	; 0xd000000
    7ef8:	04c80400 	strbeq	r0, [r8], #1024	; 0x400
    7efc:	000001f8 	strdeq	r0, [r0], -r8
    7f00:	256b0e48 	strbcs	r0, [fp, #-3656]!	; 0xfffff1b8
    7f04:	c9040000 	stmdbgt	r4, {}	; <UNPREDICTABLE>
    7f08:	0001d604 	andeq	sp, r1, r4, lsl #12
    7f0c:	d00e4a00 	andle	r4, lr, r0, lsl #20
    7f10:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    7f14:	01f804ca 	mvnseq	r0, sl, asr #9
    7f18:	0e4c0000 	cdpeq	0, 4, cr0, cr12, cr0, {0}
    7f1c:	00002576 	andeq	r2, r0, r6, ror r5
    7f20:	d604cb04 	strle	ip, [r4], -r4, lsl #22
    7f24:	4e000001 	cdpmi	0, 0, cr0, cr0, cr1, {0}
    7f28:	26440b00 	strbcs	r0, [r4], -r0, lsl #22
    7f2c:	cc040000 	stcgt	0, cr0, [r4], {-0}
    7f30:	0004ab04 	andeq	sl, r4, r4, lsl #22
    7f34:	76010f00 	strvc	r0, [r1], -r0, lsl #30
    7f38:	05000001 	streq	r0, [r0, #-1]
    7f3c:	0006e73b 	andeq	lr, r6, fp, lsr r7
    7f40:	1d1f0400 	cfldrsne	mvf0, [pc, #-0]	; 7f48 <_Min_Stack_Size+0x7d48>
    7f44:	04010000 	streq	r0, [r1], #-0
    7f48:	00001d55 	andeq	r1, r0, r5, asr sp
    7f4c:	1ed10402 	cdpne	4, 13, cr0, cr1, cr2, {0}
    7f50:	00030000 	andeq	r0, r3, r0
    7f54:	001e8e06 	andseq	r8, lr, r6, lsl #28
    7f58:	c83f0500 	ldmdagt	pc!, {r8, sl}	; <UNPREDICTABLE>
    7f5c:	0f000006 	svceq	0x00000006
    7f60:	00017601 	andeq	r7, r1, r1, lsl #12
    7f64:	2f480500 	svccs	0x00480500
    7f68:	04000007 	streq	r0, [r0], #-7
    7f6c:	00001e54 	andeq	r1, r0, r4, asr lr
    7f70:	1f020400 	svcne	0x00020400
    7f74:	04040000 	streq	r0, [r4], #-0
    7f78:	00001e04 	andeq	r1, r0, r4, lsl #28
    7f7c:	1e3b0428 	cdpne	4, 3, cr0, cr11, cr8, {1}
    7f80:	04480000 	strbeq	r0, [r8], #-0
    7f84:	00001d30 	andeq	r1, r0, r0, lsr sp
    7f88:	1ebb0414 	mrcne	4, 5, r0, cr11, cr4, {0}
    7f8c:	04100000 	ldreq	r0, [r0], #-0
    7f90:	00001f3f 	andeq	r1, r0, pc, lsr pc
    7f94:	1c35041c 	cfldrsne	mvf0, [r5], #-112	; 0xffffff90
    7f98:	00180000 	andseq	r0, r8, r0
    7f9c:	001ee206 	andseq	lr, lr, r6, lsl #4
    7fa0:	f2500500 	vrshl.s16	d16, d0, d0
    7fa4:	10000006 	andne	r0, r0, r6
    7fa8:	675b0504 	ldrbvs	r0, [fp, -r4, lsl #10]
    7fac:	11000007 	tstne	r0, r7
    7fb0:	00001c10 	andeq	r1, r0, r0, lsl ip
    7fb4:	01d65d05 	bicseq	r5, r6, r5, lsl #26
    7fb8:	11000000 	mrsne	r0, (UNDEF: 0)
    7fbc:	00001cad 	andeq	r1, r0, sp, lsr #25
    7fc0:	06e76005 	strbteq	r6, [r7], r5
    7fc4:	11020000 	mrsne	r0, (UNDEF: 2)
    7fc8:	00001e6d 	andeq	r1, r0, sp, ror #28
    7fcc:	072f6305 	streq	r6, [pc, -r5, lsl #6]!
    7fd0:	00030000 	andeq	r0, r3, r0
    7fd4:	001d6506 	andseq	r6, sp, r6, lsl #10
    7fd8:	3a650500 	bcc	19493e0 <_Min_Stack_Size+0x19491e0>
    7fdc:	10000007 	andne	r0, r0, r7
    7fe0:	c3320610 	teqgt	r2, #16, 12	; 0x1000000
    7fe4:	11000007 	tstne	r0, r7
    7fe8:	0000315e 	andeq	r3, r0, lr, asr r1
    7fec:	01e13406 	mvneq	r3, r6, lsl #8
    7ff0:	11000000 	mrsne	r0, (UNDEF: 0)
    7ff4:	00003021 	andeq	r3, r0, r1, lsr #32
    7ff8:	01d63706 	bicseq	r3, r6, r6, lsl #14
    7ffc:	11040000 	mrsne	r0, (UNDEF: 4)
    8000:	0000318c 	andeq	r3, r0, ip, lsl #3
    8004:	01d63a06 	bicseq	r3, r6, r6, lsl #20
    8008:	11060000 	mrsne	r0, (UNDEF: 6)
    800c:	000030d2 	ldrdeq	r3, [r0], -r2
    8010:	01d63d06 	bicseq	r3, r6, r6, lsl #26
    8014:	11080000 	mrsne	r0, (UNDEF: 8)
    8018:	000030e2 	andeq	r3, r0, r2, ror #1
    801c:	01d64006 	bicseq	r4, r6, r6
    8020:	110a0000 	mrsne	r0, (UNDEF: 10)
    8024:	00002e93 	muleq	r0, r3, lr
    8028:	01d64306 	bicseq	r4, r6, r6, lsl #6
    802c:	000c0000 	andeq	r0, ip, r0
    8030:	00310a06 	eorseq	r0, r1, r6, lsl #20
    8034:	72450600 	subvc	r0, r5, #0, 12
    8038:	10000007 	andne	r0, r0, r7
    803c:	43320712 	teqmi	r2, #4718592	; 0x480000
    8040:	11000008 	tstne	r0, r8
    8044:	00001f85 	andeq	r1, r0, r5, lsl #31
    8048:	01d63407 	bicseq	r3, r6, r7, lsl #8
    804c:	11000000 	mrsne	r0, (UNDEF: 0)
    8050:	00002195 	muleq	r0, r5, r1
    8054:	01d63707 	bicseq	r3, r6, r7, lsl #14
    8058:	11020000 	mrsne	r0, (UNDEF: 2)
    805c:	00001fae 	andeq	r1, r0, lr, lsr #31
    8060:	01d63a07 	bicseq	r3, r6, r7, lsl #20
    8064:	11040000 	mrsne	r0, (UNDEF: 4)
    8068:	00002286 	andeq	r2, r0, r6, lsl #5
    806c:	01d63d07 	bicseq	r3, r6, r7, lsl #26
    8070:	11060000 	mrsne	r0, (UNDEF: 6)
    8074:	00001f7c 	andeq	r1, r0, ip, ror pc
    8078:	01d64007 	bicseq	r4, r6, r7
    807c:	11080000 	mrsne	r0, (UNDEF: 8)
    8080:	00002012 	andeq	r2, r0, r2, lsl r0
    8084:	01d64307 	bicseq	r4, r6, r7, lsl #6
    8088:	110a0000 	mrsne	r0, (UNDEF: 10)
    808c:	00002030 	andeq	r2, r0, r0, lsr r0
    8090:	01d64707 	bicseq	r4, r6, r7, lsl #14
    8094:	110c0000 	mrsne	r0, (UNDEF: 12)
    8098:	00001fde 	ldrdeq	r1, [r0], -lr
    809c:	01d64d07 	bicseq	r4, r6, r7, lsl #26
    80a0:	110e0000 	mrsne	r0, (UNDEF: 14)
    80a4:	000022b4 			; <UNDEFINED> instruction: 0x000022b4
    80a8:	01d65007 	bicseq	r5, r6, r7
    80ac:	00100000 	andseq	r0, r0, r0
    80b0:	0022c606 	eoreq	ip, r2, r6, lsl #12
    80b4:	ce510700 	cdpgt	7, 5, cr0, cr1, cr0, {0}
    80b8:	10000007 	andne	r0, r0, r7
    80bc:	9333080a 	teqls	r3, #655360	; 0xa0000
    80c0:	11000008 	tstne	r0, r8
    80c4:	00002a5b 	andeq	r2, r0, fp, asr sl
    80c8:	01d63508 	bicseq	r3, r6, r8, lsl #10
    80cc:	11000000 	mrsne	r0, (UNDEF: 0)
    80d0:	00002351 	andeq	r2, r0, r1, asr r3
    80d4:	01d63808 	bicseq	r3, r6, r8, lsl #16
    80d8:	11020000 	mrsne	r0, (UNDEF: 2)
    80dc:	00002bf5 	strdeq	r2, [r0], -r5
    80e0:	01d63b08 	bicseq	r3, r6, r8, lsl #22
    80e4:	11040000 	mrsne	r0, (UNDEF: 4)
    80e8:	000026ed 	andeq	r2, r0, sp, ror #13
    80ec:	01d63f08 	bicseq	r3, r6, r8, lsl #30
    80f0:	11060000 	mrsne	r0, (UNDEF: 6)
    80f4:	00002d6d 	andeq	r2, r0, sp, ror #26
    80f8:	01cb4208 	biceq	r4, fp, r8, lsl #4
    80fc:	00080000 	andeq	r0, r8, r0
    8100:	002c0006 	eoreq	r0, ip, r6
    8104:	4e4a0800 	cdpmi	8, 4, cr0, cr10, cr0, {0}
    8108:	10000008 	andne	r0, r0, r8
    810c:	d7320904 	ldrle	r0, [r2, -r4, lsl #18]!
    8110:	11000008 	tstne	r0, r8
    8114:	0000177d 	andeq	r1, r0, sp, ror r7
    8118:	01cb3409 	biceq	r3, fp, r9, lsl #8
    811c:	11000000 	mrsne	r0, (UNDEF: 0)
    8120:	000017b2 			; <UNDEFINED> instruction: 0x000017b2
    8124:	01cb3909 	biceq	r3, fp, r9, lsl #18
    8128:	11010000 	mrsne	r0, (UNDEF: 1)
    812c:	0000178d 	andeq	r1, r0, sp, lsl #15
    8130:	01cb3d09 	biceq	r3, fp, r9, lsl #26
    8134:	11020000 	mrsne	r0, (UNDEF: 2)
    8138:	00001661 	andeq	r1, r0, r1, ror #12
    813c:	02314109 	eorseq	r4, r1, #1073741826	; 0x40000002
    8140:	00030000 	andeq	r0, r3, r0
    8144:	00165006 	andseq	r5, r6, r6
    8148:	9e440900 	vmlals.f16	s1, s8, s0	; <UNPREDICTABLE>
    814c:	12000008 	andne	r0, r0, #8
    8150:	00003582 	andeq	r3, r0, r2, lsl #11
    8154:	66381e01 	ldrtvs	r1, [r8], -r1, lsl #28
    8158:	00840800 	addeq	r0, r4, r0, lsl #16
    815c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8160:	00000914 	andeq	r0, r0, r4, lsl r9
    8164:	00347f13 	eorseq	r7, r4, r3, lsl pc
    8168:	671f0100 	ldrvs	r0, [pc, -r0, lsl #2]
    816c:	02000007 	andeq	r0, r0, #7
    8170:	02137491 	andseq	r7, r3, #-1862270976	; 0x91000000
    8174:	01000035 	tsteq	r0, r5, lsr r0
    8178:	0007c320 	andeq	ip, r7, r0, lsr #6
    817c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    8180:	35321200 	ldrcc	r1, [r2, #-512]!	; 0xfffffe00
    8184:	36010000 	strcc	r0, [r1], -r0
    8188:	080066bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, sp, lr}
    818c:	00000048 	andeq	r0, r0, r8, asr #32
    8190:	09389c01 	ldmdbeq	r8!, {r0, sl, fp, ip, pc}
    8194:	84130000 	ldrhi	r0, [r3], #-0
    8198:	01000034 	tsteq	r0, r4, lsr r0
    819c:	00076737 	andeq	r6, r7, r7, lsr r7
    81a0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    81a4:	34f21200 	ldrbtcc	r1, [r2], #512	; 0x200
    81a8:	43010000 	movwmi	r0, #4096	; 0x1000
    81ac:	08006704 	stmdaeq	r0, {r2, r8, r9, sl, sp, lr}
    81b0:	000000c4 	andeq	r0, r0, r4, asr #1
    81b4:	096a9c01 	stmdbeq	sl!, {r0, sl, fp, ip, pc}^
    81b8:	f5130000 			; <UNDEFINED> instruction: 0xf5130000
    81bc:	01000033 	tsteq	r0, r3, lsr r0
    81c0:	00084344 	andeq	r4, r8, r4, asr #6
    81c4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    81c8:	00348413 	eorseq	r8, r4, r3, lsl r4
    81cc:	67450100 	strbvs	r0, [r5, -r0, lsl #2]
    81d0:	02000007 	andeq	r0, r0, #7
    81d4:	12006091 	andne	r6, r0, #145	; 0x91
    81d8:	00003395 	muleq	r0, r5, r3
    81dc:	67c87901 	strbvs	r7, [r8, r1, lsl #18]
    81e0:	00620800 	rsbeq	r0, r2, r0, lsl #16
    81e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    81e8:	0000099c 	muleq	r0, ip, r9
    81ec:	00361513 	eorseq	r1, r6, r3, lsl r5
    81f0:	937a0100 	cmnls	sl, #0, 2
    81f4:	02000008 	andeq	r0, r0, #8
    81f8:	c2136c91 	andsgt	r6, r3, #37120	; 0x9100
    81fc:	01000034 	tsteq	r0, r4, lsr r0
    8200:	0008d77b 	andeq	sp, r8, fp, ror r7
    8204:	68910200 	ldmvs	r1, {r9}
    8208:	368e1400 	strcc	r1, [lr], r0, lsl #8
    820c:	8f010000 	svchi	0x00010000
    8210:	0800682c 	stmdaeq	r0, {r2, r3, r5, fp, sp, lr}
    8214:	00000044 	andeq	r0, r0, r4, asr #32
    8218:	6c159c01 	ldcvs	12, cr9, [r5], {1}
    821c:	0a000002 	beq	822c <_Min_Stack_Size+0x802c>
    8220:	09b906ce 	ldmibeq	r9!, {r1, r2, r3, r6, r7, r9, sl}
    8224:	bd080000 	stclt	0, cr0, [r8, #-0]
    8228:	00000001 	andeq	r0, r0, r1
    822c:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
    8230:	19650004 	stmdbne	r5!, {r2}^
    8234:	01040000 	mrseq	r0, (UNDEF: 4)
    8238:	00000111 	andeq	r0, r0, r1, lsl r1
    823c:	0037730c 	eorseq	r7, r7, ip, lsl #6
    8240:	000a5000 	andeq	r5, sl, r0
    8244:	00000000 	andeq	r0, r0, r0
    8248:	003af900 	eorseq	pc, sl, r0, lsl #18
    824c:	06010200 	streq	r0, [r1], -r0, lsl #4
    8250:	00000192 	muleq	r0, r2, r1
    8254:	90080102 	andls	r0, r8, r2, lsl #2
    8258:	02000001 	andeq	r0, r0, #1
    825c:	00950502 	addseq	r0, r5, r2, lsl #10
    8260:	72030000 	andvc	r0, r3, #0
    8264:	02000000 	andeq	r0, r0, #0
    8268:	0000412b 	andeq	r4, r0, fp, lsr #2
    826c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    8270:	000001f2 	strdeq	r0, [r0], -r2
    8274:	bd050402 	cfstrslt	mvf0, [r5, #-8]
    8278:	03000000 	movweq	r0, #0
    827c:	00000067 	andeq	r0, r0, r7, rrx
    8280:	005a4102 	subseq	r4, sl, r2, lsl #2
    8284:	04020000 	streq	r0, [r2], #-0
    8288:	0001c907 	andeq	ip, r1, r7, lsl #18
    828c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    8290:	000000b8 	strheq	r0, [r0], -r8
    8294:	c4070802 	strgt	r0, [r7], #-2050	; 0xfffff7fe
    8298:	04000001 	streq	r0, [r0], #-1
    829c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    82a0:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    82a4:	0001ce07 	andeq	ip, r1, r7, lsl #28
    82a8:	00740300 	rsbseq	r0, r4, r0, lsl #6
    82ac:	24030000 	strcs	r0, [r3], #-0
    82b0:	00000036 	andeq	r0, r0, r6, lsr r0
    82b4:	00006903 	andeq	r6, r0, r3, lsl #18
    82b8:	4f300300 	svcmi	0x00300300
    82bc:	02000000 	andeq	r0, r0, #0
    82c0:	00590704 	subseq	r0, r9, r4, lsl #14
    82c4:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
    82c8:	05000000 	streq	r0, [r0, #-0]
    82cc:	0000007d 	andeq	r0, r0, sp, ror r0
    82d0:	00280106 	eoreq	r0, r8, r6, lsl #2
    82d4:	07040000 	streq	r0, [r4, -r0]
    82d8:	0000be02 	andeq	fp, r0, r2, lsl #28
    82dc:	1c740700 	ldclne	7, cr0, [r4], #-0
    82e0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    82e4:	00544553 	subseq	r4, r4, r3, asr r5
    82e8:	50090001 	andpl	r0, r9, r1
    82ec:	cf04a204 	svcgt	0x0004a204
    82f0:	0a000002 	beq	8300 <_Min_Stack_Size+0x8100>
    82f4:	00315243 	eorseq	r5, r1, r3, asr #4
    82f8:	9f04a404 	svcls	0x0004a404
    82fc:	00000000 	andeq	r0, r0, r0
    8300:	0003c20b 	andeq	ip, r3, fp, lsl #4
    8304:	04a50400 	strteq	r0, [r5], #1024	; 0x400
    8308:	0000007d 	andeq	r0, r0, sp, ror r0
    830c:	52430a02 	subpl	r0, r3, #8192	; 0x2000
    8310:	a6040032 			; <UNDEFINED> instruction: 0xa6040032
    8314:	00009f04 	andeq	r9, r0, r4, lsl #30
    8318:	cc0b0400 	cfstrsgt	mvf0, [fp], {-0}
    831c:	04000003 	streq	r0, [r0], #-3
    8320:	007d04a7 	rsbseq	r0, sp, r7, lsr #9
    8324:	0b060000 	bleq	18832c <_Min_Stack_Size+0x18812c>
    8328:	000027bf 			; <UNDEFINED> instruction: 0x000027bf
    832c:	9f04a804 	svcls	0x0004a804
    8330:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8334:	0003d60b 	andeq	sp, r3, fp, lsl #12
    8338:	04a90400 	strteq	r0, [r9], #1024	; 0x400
    833c:	0000007d 	andeq	r0, r0, sp, ror r0
    8340:	23260b0a 			; <UNDEFINED> instruction: 0x23260b0a
    8344:	aa040000 	bge	10834c <_Min_Stack_Size+0x10814c>
    8348:	00009f04 	andeq	r9, r0, r4, lsl #30
    834c:	ab0b0c00 	blge	2cb354 <_Min_Stack_Size+0x2cb154>
    8350:	04000002 	streq	r0, [r0], #-2
    8354:	007d04ab 	rsbseq	r0, sp, fp, lsr #9
    8358:	0a0e0000 	beq	388360 <_Min_Stack_Size+0x388160>
    835c:	04005253 	streq	r5, [r0], #-595	; 0xfffffdad
    8360:	009f04ac 	addseq	r0, pc, ip, lsr #9
    8364:	0b100000 	bleq	40836c <_Min_Stack_Size+0x40816c>
    8368:	000003ea 	andeq	r0, r0, sl, ror #7
    836c:	7d04ad04 	stcvc	13, cr10, [r4, #-16]
    8370:	12000000 	andne	r0, r0, #0
    8374:	5247450a 	subpl	r4, r7, #41943040	; 0x2800000
    8378:	04ae0400 	strteq	r0, [lr], #1024	; 0x400
    837c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8380:	03f40b14 	mvnseq	r0, #20, 22	; 0x5000
    8384:	af040000 	svcge	0x00040000
    8388:	00007d04 	andeq	r7, r0, r4, lsl #26
    838c:	c70b1600 	strgt	r1, [fp, -r0, lsl #12]
    8390:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    8394:	009f04b0 			; <UNDEFINED> instruction: 0x009f04b0
    8398:	0b180000 	bleq	6083a0 <_Min_Stack_Size+0x6081a0>
    839c:	000002d7 	ldrdeq	r0, [r0], -r7
    83a0:	7d04b104 	stfvcd	f3, [r4, #-16]
    83a4:	1a000000 	bne	83ac <_Min_Stack_Size+0x81ac>
    83a8:	0024cd0b 	eoreq	ip, r4, fp, lsl #26
    83ac:	04b20400 	ldrteq	r0, [r2], #1024	; 0x400
    83b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    83b4:	04150b1c 	ldreq	r0, [r5], #-2844	; 0xfffff4e4
    83b8:	b3040000 	movwlt	r0, #16384	; 0x4000
    83bc:	00007d04 	andeq	r7, r0, r4, lsl #26
    83c0:	9b0b1e00 	blls	2cfbc8 <_Min_Stack_Size+0x2cf9c8>
    83c4:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    83c8:	009f04b4 			; <UNDEFINED> instruction: 0x009f04b4
    83cc:	0b200000 	bleq	8083d4 <_Min_Stack_Size+0x8081d4>
    83d0:	0000041f 	andeq	r0, r0, pc, lsl r4
    83d4:	7d04b504 	cfstr32vc	mvfx11, [r4, #-16]
    83d8:	22000000 	andcs	r0, r0, #0
    83dc:	544e430a 	strbpl	r4, [lr], #-778	; 0xfffffcf6
    83e0:	04b60400 	ldrteq	r0, [r6], #1024	; 0x400
    83e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    83e8:	2a510b24 	bcs	144b080 <_Min_Stack_Size+0x144ae80>
    83ec:	b7040000 	strlt	r0, [r4, -r0]
    83f0:	00007d04 	andeq	r7, r0, r4, lsl #26
    83f4:	500a2600 	andpl	r2, sl, r0, lsl #12
    83f8:	04004353 	streq	r4, [r0], #-851	; 0xfffffcad
    83fc:	009f04b8 			; <UNDEFINED> instruction: 0x009f04b8
    8400:	0b280000 	bleq	a08408 <_Min_Stack_Size+0xa08208>
    8404:	00002513 	andeq	r2, r0, r3, lsl r5
    8408:	7d04b904 	vstrvc.16	s22, [r4, #-8]	; <UNPREDICTABLE>
    840c:	2a000000 	bcs	8414 <_Min_Stack_Size+0x8214>
    8410:	5252410a 	subspl	r4, r2, #-2147483646	; 0x80000002
    8414:	04ba0400 	ldrteq	r0, [sl], #1024	; 0x400
    8418:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    841c:	251e0b2c 	ldrcs	r0, [lr, #-2860]	; 0xfffff4d4
    8420:	bb040000 	bllt	108428 <_Min_Stack_Size+0x108228>
    8424:	00007d04 	andeq	r7, r0, r4, lsl #26
    8428:	520a2e00 	andpl	r2, sl, #0, 28
    842c:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
    8430:	009f04bc 			; <UNDEFINED> instruction: 0x009f04bc
    8434:	0b300000 	bleq	c0843c <_Min_Stack_Size+0xc0823c>
    8438:	00002529 	andeq	r2, r0, r9, lsr #10
    843c:	7d04bd04 	stcvc	13, cr11, [r4, #-16]
    8440:	32000000 	andcc	r0, r0, #0
    8444:	002cfa0b 	eoreq	pc, ip, fp, lsl #20
    8448:	04be0400 	ldrteq	r0, [lr], #1024	; 0x400
    844c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8450:	25340b34 	ldrcs	r0, [r4, #-2868]!	; 0xfffff4cc
    8454:	bf040000 	svclt	0x00040000
    8458:	00007d04 	andeq	r7, r0, r4, lsl #26
    845c:	f90b3600 			; <UNDEFINED> instruction: 0xf90b3600
    8460:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    8464:	009f04c0 	addseq	r0, pc, r0, asr #9
    8468:	0b380000 	bleq	e08470 <_Min_Stack_Size+0xe08270>
    846c:	0000253f 	andeq	r2, r0, pc, lsr r5
    8470:	7d04c104 	stfvcd	f4, [r4, #-16]
    8474:	3a000000 	bcc	847c <_Min_Stack_Size+0x827c>
    8478:	002d170b 	eoreq	r1, sp, fp, lsl #14
    847c:	04c20400 	strbeq	r0, [r2], #1024	; 0x400
    8480:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8484:	254a0b3c 	strbcs	r0, [sl, #-2876]	; 0xfffff4c4
    8488:	c3040000 	movwgt	r0, #16384	; 0x4000
    848c:	00007d04 	andeq	r7, r0, r4, lsl #26
    8490:	1c0b3e00 	stcne	14, cr3, [fp], {-0}
    8494:	0400002d 	streq	r0, [r0], #-45	; 0xffffffd3
    8498:	009f04c4 	addseq	r0, pc, r4, asr #9
    849c:	0b400000 	bleq	10084a4 <_Min_Stack_Size+0x10082a4>
    84a0:	00002555 	andeq	r2, r0, r5, asr r5
    84a4:	7d04c504 	cfstr32vc	mvfx12, [r4, #-16]
    84a8:	42000000 	andmi	r0, r0, #0
    84ac:	002ab40b 	eoreq	fp, sl, fp, lsl #8
    84b0:	04c60400 	strbeq	r0, [r6], #1024	; 0x400
    84b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    84b8:	25600b44 	strbcs	r0, [r0, #-2884]!	; 0xfffff4bc
    84bc:	c7040000 	strgt	r0, [r4, -r0]
    84c0:	00007d04 	andeq	r7, r0, r4, lsl #26
    84c4:	440a4600 	strmi	r4, [sl], #-1536	; 0xfffffa00
    84c8:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
    84cc:	009f04c8 	addseq	r0, pc, r8, asr #9
    84d0:	0b480000 	bleq	12084d8 <_Min_Stack_Size+0x12082d8>
    84d4:	0000256b 	andeq	r2, r0, fp, ror #10
    84d8:	7d04c904 	vstrvc.16	s24, [r4, #-8]	; <UNPREDICTABLE>
    84dc:	4a000000 	bmi	84e4 <_Min_Stack_Size+0x82e4>
    84e0:	002bd00b 	eoreq	sp, fp, fp
    84e4:	04ca0400 	strbeq	r0, [sl], #1024	; 0x400
    84e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    84ec:	25760b4c 	ldrbcs	r0, [r6, #-2892]!	; 0xfffff4b4
    84f0:	cb040000 	blgt	1084f8 <_Min_Stack_Size+0x1082f8>
    84f4:	00007d04 	andeq	r7, r0, r4, lsl #26
    84f8:	0c004e00 	stceq	14, cr4, [r0], {-0}
    84fc:	00002644 	andeq	r2, r0, r4, asr #12
    8500:	be04cc04 	cdplt	12, 0, cr12, cr4, cr4, {0}
    8504:	0d000000 	stceq	0, cr0, [r0, #-0]
    8508:	000037c2 	andeq	r3, r0, r2, asr #15
    850c:	68703001 	ldmdavs	r0!, {r0, ip, sp}^
    8510:	000c0800 	andeq	r0, ip, r0, lsl #16
    8514:	9c010000 	stcls	0, cr0, [r1], {-0}
    8518:	0037610d 	eorseq	r6, r7, sp, lsl #2
    851c:	7c390100 	ldfvcs	f0, [r9], #-0
    8520:	06080068 	streq	r0, [r8], -r8, rrx
    8524:	01000000 	mrseq	r0, (UNDEF: 0)
    8528:	37b00d9c 			; <UNDEFINED> instruction: 0x37b00d9c
    852c:	46010000 	strmi	r0, [r1], -r0
    8530:	08006884 	stmdaeq	r0, {r2, r7, fp, sp, lr}
    8534:	00000006 	andeq	r0, r0, r6
    8538:	9f0d9c01 	svcls	0x000d9c01
    853c:	01000037 	tsteq	r0, r7, lsr r0
    8540:	00688c53 	rsbeq	r8, r8, r3, asr ip
    8544:	00000608 	andeq	r0, r0, r8, lsl #12
    8548:	0d9c0100 	ldfeqs	f0, [ip]
    854c:	00003713 	andeq	r3, r0, r3, lsl r7
    8550:	68946001 	ldmvs	r4, {r0, sp, lr}
    8554:	00060800 	andeq	r0, r6, r0, lsl #16
    8558:	9c010000 	stcls	0, cr0, [r1], {-0}
    855c:	0036fa0d 	eorseq	pc, r6, sp, lsl #20
    8560:	9c930100 	ldflss	f0, [r3], {0}
    8564:	0c080068 	stceq	0, cr0, [r8], {104}	; 0x68
    8568:	01000000 	mrseq	r0, (UNDEF: 0)
    856c:	37ce0d9c 	bficc	r0, ip, (invalid: 27:14)
    8570:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    8574:	080068a8 	stmdaeq	r0, {r3, r5, r7, fp, sp, lr}
    8578:	0000000c 	andeq	r0, r0, ip
    857c:	260e9c01 	strcs	r9, [lr], -r1, lsl #24
    8580:	01000037 	tsteq	r0, r7, lsr r0
    8584:	0068b49e 	mlseq	r8, lr, r4, fp
    8588:	00006408 	andeq	r6, r0, r8, lsl #8
    858c:	8f9c0100 	svchi	0x009c0100
    8590:	0f000003 	svceq	0x00000003
    8594:	00003736 	andeq	r3, r0, r6, lsr r7
    8598:	009a9f01 	addseq	r9, sl, r1, lsl #30
    859c:	450f0000 	strmi	r0, [pc, #-0]	; 85a4 <_Min_Stack_Size+0x83a4>
    85a0:	01000037 	tsteq	r0, r7, lsr r0
    85a4:	00009a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    85a8:	37561000 	ldrbcc	r1, [r6, -r0]
    85ac:	a0010000 	andge	r0, r1, r0
    85b0:	00000088 	andeq	r0, r0, r8, lsl #1
    85b4:	013c0305 	teqeq	ip, r5, lsl #6
    85b8:	11002000 	mrsne	r2, (UNDEF: 0)
    85bc:	0000026c 	andeq	r0, r0, ip, ror #4
    85c0:	9b06ce05 	blls	1bbddc <_Min_Stack_Size+0x1bbbdc>
    85c4:	05000003 	streq	r0, [r0, #-3]
    85c8:	0000006f 	andeq	r0, r0, pc, rrx
    85cc:	0037360f 	eorseq	r3, r7, pc, lsl #12
    85d0:	9a9f0100 	bls	fe7c89d8 <BootRAM+0xd739179>
    85d4:	0f000000 	svceq	0x00000000
    85d8:	00003745 	andeq	r3, r0, r5, asr #14
    85dc:	009a9f01 	addseq	r9, sl, r1, lsl #30
    85e0:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    85e4:	0400000a 	streq	r0, [r0], #-10
    85e8:	001a5d00 	andseq	r5, sl, r0, lsl #26
    85ec:	11010400 	tstne	r1, r0, lsl #8
    85f0:	0c000001 	stceq	0, cr0, [r0], {1}
    85f4:	00003897 	muleq	r0, r7, r8
    85f8:	0000036e 	andeq	r0, r0, lr, ror #6
    85fc:	00000a98 	muleq	r0, r8, sl
    8600:	00000000 	andeq	r0, r0, r0
    8604:	00003cc0 	andeq	r3, r0, r0, asr #25
    8608:	92060102 	andls	r0, r6, #-2147483648	; 0x80000000
    860c:	03000001 	movweq	r0, #1
    8610:	000000e3 	andeq	r0, r0, r3, ror #1
    8614:	00371d03 	eorseq	r1, r7, r3, lsl #26
    8618:	01020000 	mrseq	r0, (UNDEF: 2)
    861c:	00019008 	andeq	r9, r1, r8
    8620:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    8624:	00000095 	muleq	r0, r5, r0
    8628:	00007203 	andeq	r7, r0, r3, lsl #4
    862c:	502b0300 	eorpl	r0, fp, r0, lsl #6
    8630:	02000000 	andeq	r0, r0, #0
    8634:	01f20702 	mvnseq	r0, r2, lsl #14
    8638:	6f030000 	svcvs	0x00030000
    863c:	03000006 	movweq	r0, #6
    8640:	0000623f 	andeq	r6, r0, pc, lsr r2
    8644:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    8648:	000000bd 	strheq	r0, [r0], -sp
    864c:	00006703 	andeq	r6, r0, r3, lsl #14
    8650:	74410300 	strbvc	r0, [r1], #-768	; 0xfffffd00
    8654:	02000000 	andeq	r0, r0, #0
    8658:	01c90704 	biceq	r0, r9, r4, lsl #14
    865c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    8660:	0000b805 	andeq	fp, r0, r5, lsl #16
    8664:	07080200 	streq	r0, [r8, -r0, lsl #4]
    8668:	000001c4 	andeq	r0, r0, r4, asr #3
    866c:	69050404 	stmdbvs	r5, {r2, sl}
    8670:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    8674:	01ce0704 	biceq	r0, lr, r4, lsl #14
    8678:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    867c:	0002f804 	andeq	pc, r2, r4, lsl #16
    8680:	02040500 	andeq	r0, r4, #0, 10
    8684:	00590704 	subseq	r0, r9, r4, lsl #14
    8688:	04060000 	streq	r0, [r6], #-0
    868c:	000000ad 	andeq	r0, r0, sp, lsr #1
    8690:	99080102 	stmdbls	r8, {r1, r8}
    8694:	03000001 	movweq	r0, #1
    8698:	000000e5 	andeq	r0, r0, r5, ror #1
    869c:	002c1804 	eoreq	r1, ip, r4, lsl #16
    86a0:	74030000 	strvc	r0, [r3], #-0
    86a4:	04000000 	streq	r0, [r0], #-0
    86a8:	00004524 	andeq	r4, r0, r4, lsr #10
    86ac:	06710300 	ldrbteq	r0, [r1], -r0, lsl #6
    86b0:	2c040000 	stccs	0, cr0, [r4], {-0}
    86b4:	00000057 	andeq	r0, r0, r7, asr r0
    86b8:	00006903 	andeq	r6, r0, r3, lsl #18
    86bc:	69300400 	ldmdbvs	r0!, {sl}
    86c0:	03000000 	movweq	r0, #0
    86c4:	00003ace 	andeq	r3, r0, lr, asr #21
    86c8:	00623802 	rsbeq	r3, r2, r2, lsl #16
    86cc:	cd030000 	stcgt	0, cr0, [r3, #-0]
    86d0:	0200003a 	andeq	r0, r0, #58	; 0x3a
    86d4:	00007439 	andeq	r7, r0, r9, lsr r4
    86d8:	3a9e0300 	bcc	fe7892e0 <BootRAM+0xd6f9a81>
    86dc:	3f020000 	svccc	0x00020000
    86e0:	000000d5 	ldrdeq	r0, [r0], -r5
    86e4:	00b40406 	adcseq	r0, r4, r6, lsl #8
    86e8:	bb030000 	bllt	c86f0 <_Min_Stack_Size+0xc84f0>
    86ec:	05000038 	streq	r0, [r0, #-56]	; 0xffffffc8
    86f0:	00011246 	andeq	r1, r1, r6, asr #4
    86f4:	18040600 	stmdane	r4, {r9, sl}
    86f8:	07000001 	streq	r0, [r0, -r1]
    86fc:	00003a43 	andeq	r3, r0, r3, asr #20
    8700:	00382803 	eorseq	r2, r8, r3, lsl #16
    8704:	28300600 	ldmdacs	r0!, {r9, sl}
    8708:	06000001 	streq	r0, [r0], -r1
    870c:	00012e04 	andeq	r2, r1, r4, lsl #28
    8710:	39cb0700 	stmibcc	fp, {r8, r9, sl}^
    8714:	26030000 	strcs	r0, [r3], -r0
    8718:	0700003a 	smladxeq	r0, sl, r0, r0
    871c:	00011d25 	andeq	r1, r1, r5, lsr #26
    8720:	00d50800 	sbcseq	r0, r5, r0, lsl #16
    8724:	b4080000 	strlt	r0, [r8], #-0
    8728:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    872c:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    8730:	0000b409 	andeq	fp, r0, r9, lsl #8
    8734:	37010a00 	strcc	r0, [r1, -r0, lsl #20]
    8738:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    873c:	016c0207 	cmneq	ip, r7, lsl #4
    8740:	740b0000 	strvc	r0, [fp], #-0
    8744:	0000001c 	andeq	r0, r0, ip, lsl r0
    8748:	5445530c 	strbpl	r5, [r5], #-780	; 0xfffffcf4
    874c:	0d000100 	stfeqs	f0, [r0, #-0]
    8750:	03e9081c 	mvneq	r0, #28, 16	; 0x1c0000
    8754:	000001d1 	ldrdeq	r0, [r0], -r1
    8758:	4c52430e 	mrrcmi	3, 0, r4, r2, cr14
    875c:	03eb0800 	mvneq	r0, #0, 16
    8760:	0000013e 	andeq	r0, r0, lr, lsr r1
    8764:	52430e00 	subpl	r0, r3, #0, 28
    8768:	ec080048 	stc	0, cr0, [r8], {72}	; 0x48
    876c:	00013e03 	andeq	r3, r1, r3, lsl #28
    8770:	490e0400 	stmdbmi	lr, {sl}
    8774:	08005244 	stmdaeq	r0, {r2, r6, r9, ip, lr}
    8778:	013e03ed 	teqeq	lr, sp, ror #7
    877c:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    8780:	0052444f 	subseq	r4, r2, pc, asr #8
    8784:	3e03ee08 	cdpcc	14, 0, cr14, cr3, cr8, {0}
    8788:	0c000001 	stceq	0, cr0, [r0], {1}
    878c:	001d040f 	andseq	r0, sp, pc, lsl #8
    8790:	03ef0800 	mvneq	r0, #0, 16
    8794:	0000013e 	andeq	r0, r0, lr, lsr r1
    8798:	52420e10 	subpl	r0, r2, #16, 28	; 0x100
    879c:	f0080052 			; <UNDEFINED> instruction: 0xf0080052
    87a0:	00013e03 	andeq	r3, r1, r3, lsl #28
    87a4:	d50f1400 	strle	r1, [pc, #-1024]	; 83ac <_Min_Stack_Size+0x81ac>
    87a8:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    87ac:	013e03f1 	teqeq	lr, r1	; <illegal shifter operand>
    87b0:	00180000 	andseq	r0, r8, r0
    87b4:	001bfc10 	andseq	pc, fp, r0, lsl ip	; <UNPREDICTABLE>
    87b8:	03f20800 	mvnseq	r0, #0, 16
    87bc:	0000016c 	andeq	r0, r0, ip, ror #2
    87c0:	8808240d 	stmdahi	r8, {r0, r2, r3, sl, sp}
    87c4:	0002cf04 	andeq	ip, r2, r4, lsl #30
    87c8:	52430e00 	subpl	r0, r3, #0, 28
    87cc:	8a080031 	bhi	208898 <_Min_Stack_Size+0x208698>
    87d0:	00014804 	andeq	r4, r1, r4, lsl #16
    87d4:	c20f0000 	andgt	r0, pc, #0
    87d8:	08000003 	stmdaeq	r0, {r0, r1}
    87dc:	00bf048b 	adcseq	r0, pc, fp, lsl #9
    87e0:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    87e4:	00325243 	eorseq	r5, r2, r3, asr #4
    87e8:	48048c08 	stmdami	r4, {r3, sl, fp, pc}
    87ec:	04000001 	streq	r0, [r0], #-1
    87f0:	0003cc0f 	andeq	ip, r3, pc, lsl #24
    87f4:	048d0800 	streq	r0, [sp], #2048	; 0x800
    87f8:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    87fc:	52530e06 	subspl	r0, r3, #6, 28	; 0x60
    8800:	048e0800 	streq	r0, [lr], #2048	; 0x800
    8804:	00000148 	andeq	r0, r0, r8, asr #2
    8808:	03d60f08 	bicseq	r0, r6, #8, 30
    880c:	8f080000 	svchi	0x00080000
    8810:	0000bf04 	andeq	fp, r0, r4, lsl #30
    8814:	440e0a00 	strmi	r0, [lr], #-2560	; 0xfffff600
    8818:	90080052 	andls	r0, r8, r2, asr r0
    881c:	00014804 	andeq	r4, r1, r4, lsl #16
    8820:	ab0f0c00 	blge	3cb828 <_Min_Stack_Size+0x3cb628>
    8824:	08000002 	stmdaeq	r0, {r1}
    8828:	00bf0491 	umlalseq	r0, pc, r1, r4	; <UNPREDICTABLE>
    882c:	0f0e0000 	svceq	0x000e0000
    8830:	0000218f 	andeq	r2, r0, pc, lsl #3
    8834:	48049208 	stmdami	r4, {r3, r9, ip, pc}
    8838:	10000001 	andne	r0, r0, r1
    883c:	0003ea0f 	andeq	lr, r3, pc, lsl #20
    8840:	04930800 	ldreq	r0, [r3], #2048	; 0x800
    8844:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    8848:	20460f12 	subcs	r0, r6, r2, lsl pc
    884c:	94080000 	strls	r0, [r8], #-0
    8850:	00014804 	andeq	r4, r1, r4, lsl #16
    8854:	f40f1400 	vst3.8	{d1-d3}, [pc], r0
    8858:	08000003 	stmdaeq	r0, {r0, r1}
    885c:	00bf0495 	umlalseq	r0, pc, r5, r4	; <UNPREDICTABLE>
    8860:	0f160000 	svceq	0x00160000
    8864:	00002029 	andeq	r2, r0, r9, lsr #32
    8868:	48049608 	stmdami	r4, {r3, r9, sl, ip, pc}
    886c:	18000001 	stmdane	r0, {r0}
    8870:	0002d70f 	andeq	sp, r2, pc, lsl #14
    8874:	04970800 	ldreq	r0, [r7], #2048	; 0x800
    8878:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    887c:	21630f1a 	cmncs	r3, sl, lsl pc
    8880:	98080000 	stmdals	r8, {}	; <UNPREDICTABLE>
    8884:	00014804 	andeq	r4, r1, r4, lsl #16
    8888:	150f1c00 	strne	r1, [pc, #-3072]	; 7c90 <_Min_Stack_Size+0x7a90>
    888c:	08000004 	stmdaeq	r0, {r2}
    8890:	00bf0499 	umlalseq	r0, pc, r9, r4	; <UNPREDICTABLE>
    8894:	0f1e0000 	svceq	0x001e0000
    8898:	000022a7 	andeq	r2, r0, r7, lsr #5
    889c:	48049a08 	stmdami	r4, {r3, r9, fp, ip, pc}
    88a0:	20000001 	andcs	r0, r0, r1
    88a4:	00041f0f 	andeq	r1, r4, pc, lsl #30
    88a8:	049b0800 	ldreq	r0, [fp], #2048	; 0x800
    88ac:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    88b0:	9e100022 	cdpls	0, 1, cr0, cr0, cr2, {1}
    88b4:	08000021 	stmdaeq	r0, {r0, r5}
    88b8:	01dd049c 			; <UNDEFINED> instruction: 0x01dd049c
    88bc:	b4110000 	ldrlt	r0, [r1], #-0
    88c0:	eb000000 	bl	88c8 <_Min_Stack_Size+0x86c8>
    88c4:	12000002 	andne	r0, r0, #2
    88c8:	000000a0 	andeq	r0, r0, r0, lsr #1
    88cc:	01130005 	tsteq	r3, r5
    88d0:	00000037 	andeq	r0, r0, r7, lsr r0
    88d4:	0358cc09 	cmpeq	r8, #2304	; 0x900
    88d8:	9b0b0000 	blls	2c88e0 <_Min_Stack_Size+0x2c86e0>
    88dc:	00000008 	andeq	r0, r0, r8
    88e0:	000c150b 	andeq	r1, ip, fp, lsl #10
    88e4:	470b0100 	strmi	r0, [fp, -r0, lsl #2]
    88e8:	0200000b 	andeq	r0, r0, #11
    88ec:	0009d70b 	andeq	sp, r9, fp, lsl #14
    88f0:	0c0b0300 	stceq	3, cr0, [fp], {-0}
    88f4:	04000008 	streq	r0, [r0], #-8
    88f8:	000b030b 	andeq	r0, fp, fp, lsl #6
    88fc:	9e0b0500 	cfsh32ls	mvfx0, mvfx11, #0
    8900:	06000007 	streq	r0, [r0], -r7
    8904:	000cd50b 	andeq	sp, ip, fp, lsl #10
    8908:	8f0b0700 	svchi	0x000b0700
    890c:	0800000a 	stmdaeq	r0, {r1, r3}
    8910:	000c2c0b 	andeq	r2, ip, fp, lsl #24
    8914:	6b0b0900 	blvs	2cad1c <_Min_Stack_Size+0x2cab1c>
    8918:	0a000008 	beq	8940 <_Min_Stack_Size+0x8740>
    891c:	000aee0b 	andeq	lr, sl, fp, lsl #28
    8920:	650b0b00 	strvs	r0, [fp, #-2816]	; 0xfffff500
    8924:	0c000007 	stceq	0, cr0, [r0], {7}
    8928:	000a440b 	andeq	r4, sl, fp, lsl #8
    892c:	ec0b0d00 	stc	13, cr0, [fp], {-0}
    8930:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    8934:	000b380b 	andeq	r3, fp, fp, lsl #16
    8938:	13000f00 	movwne	r0, #3840	; 0xf00
    893c:	00003701 	andeq	r3, r0, r1, lsl #14
    8940:	89e70900 	stmibhi	r7!, {r8, fp}^
    8944:	0b000003 	bleq	8958 <_Min_Stack_Size+0x8758>
    8948:	00000974 	andeq	r0, r0, r4, ror r9
    894c:	078f0b00 	streq	r0, [pc, r0, lsl #22]
    8950:	0b010000 	bleq	48958 <_Min_Stack_Size+0x48758>
    8954:	00000a03 	andeq	r0, r0, r3, lsl #20
    8958:	088c0b02 	stmeq	ip, {r1, r8, r9, fp}
    895c:	0b030000 	bleq	c8964 <_Min_Stack_Size+0xc8764>
    8960:	000009a9 	andeq	r0, r0, r9, lsr #19
    8964:	0c4b0b04 	mcrreq	11, 0, r0, fp, cr4
    8968:	00050000 	andeq	r0, r5, r0
    896c:	0037010a 	eorseq	r0, r7, sl, lsl #2
    8970:	3b090000 	blcc	248978 <_Min_Stack_Size+0x248778>
    8974:	0003a301 	andeq	sl, r3, r1, lsl #6
    8978:	09f40b00 	ldmibeq	r4!, {r8, r9, fp}^
    897c:	0b010000 	bleq	48984 <_Min_Stack_Size+0x48784>
    8980:	00000d25 	andeq	r0, r0, r5, lsr #26
    8984:	b6100002 	ldrlt	r0, [r0], -r2
    8988:	09000008 	stmdbeq	r0, {r3}
    898c:	0389013e 	orreq	r0, r9, #-2147483633	; 0x8000000f
    8990:	ae140000 	cdpge	0, 1, cr0, cr4, cr0, {0}
    8994:	17000007 	strne	r0, [r0, -r7]
    8998:	08014409 	stmdaeq	r1, {r0, r3, sl, lr}
    899c:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    89a0:	0063616d 	rsbeq	r6, r3, sp, ror #2
    89a4:	db014609 	blle	5a1d0 <_Min_Stack_Size+0x59fd0>
    89a8:	00000002 	andeq	r0, r0, r2
    89ac:	0070690e 	rsbseq	r6, r0, lr, lsl #18
    89b0:	08014709 	stmdaeq	r1, {r0, r3, r8, r9, sl, lr}
    89b4:	06000004 	streq	r0, [r0], -r4
    89b8:	006e730e 	rsbeq	r7, lr, lr, lsl #6
    89bc:	08014809 	stmdaeq	r1, {r0, r3, fp, lr}
    89c0:	0a000004 	beq	89d8 <_Min_Stack_Size+0x87d8>
    89c4:	0077670e 	rsbseq	r6, r7, lr, lsl #14
    89c8:	08014909 	stmdaeq	r1, {r0, r3, r8, fp, lr}
    89cc:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    89d0:	736e640e 	cmnvc	lr, #234881024	; 0xe000000
    89d4:	014a0900 	cmpeq	sl, r0, lsl #18
    89d8:	00000408 	andeq	r0, r0, r8, lsl #8
    89dc:	0c660f12 	stcleq	15, cr0, [r6], #-72	; 0xffffffb8
    89e0:	4b090000 	blmi	2489e8 <_Min_Stack_Size+0x2487e8>
    89e4:	0003a301 	andeq	sl, r3, r1, lsl #6
    89e8:	11001600 	tstne	r0, r0, lsl #12
    89ec:	000000b4 	strheq	r0, [r0], -r4
    89f0:	00000418 	andeq	r0, r0, r8, lsl r4
    89f4:	0000a012 	andeq	sl, r0, r2, lsl r0
    89f8:	10000300 	andne	r0, r0, r0, lsl #6
    89fc:	000009e8 	andeq	r0, r0, r8, ror #19
    8a00:	af014c09 	svcge	0x00014c09
    8a04:	0a000003 	beq	8a18 <_Min_Stack_Size+0x8818>
    8a08:	00003701 	andeq	r3, r0, r1, lsl #14
    8a0c:	01590a00 	cmpeq	r9, r0, lsl #20
    8a10:	00000462 	andeq	r0, r0, r2, ror #8
    8a14:	00068d0b 	andeq	r8, r6, fp, lsl #26
    8a18:	bc0b0000 	stclt	0, cr0, [fp], {-0}
    8a1c:	01000004 	tsteq	r0, r4
    8a20:	00052f0b 	andeq	r2, r5, fp, lsl #30
    8a24:	750b0200 	strvc	r0, [fp, #-512]	; 0xfffffe00
    8a28:	03000004 	movweq	r0, #4
    8a2c:	0006b20b 	andeq	fp, r6, fp, lsl #4
    8a30:	8b0b0400 	blhi	2c9a38 <_Min_Stack_Size+0x2c9838>
    8a34:	05000005 	streq	r0, [r0, #-5]
    8a38:	00053f0b 	andeq	r3, r5, fp, lsl #30
    8a3c:	350b0600 	strcc	r0, [fp, #-1536]	; 0xfffffa00
    8a40:	07000006 	streq	r0, [r0, -r6]
    8a44:	37011300 	strcc	r1, [r1, -r0, lsl #6]
    8a48:	0b000000 	bleq	8a50 <_Min_Stack_Size+0x8850>
    8a4c:	00048d3f 	andeq	r8, r4, pc, lsr sp
    8a50:	0e490b00 	vmlaeq.f64	d16, d9, d0
    8a54:	0b000000 	bleq	8a5c <_Min_Stack_Size+0x885c>
    8a58:	00001410 	andeq	r1, r0, r0, lsl r4
    8a5c:	0ed90b01 	vfnmseq.f64	d16, d9, d1
    8a60:	0b020000 	bleq	88a68 <_Min_Stack_Size+0x88868>
    8a64:	000013c4 	andeq	r1, r0, r4, asr #7
    8a68:	0e9a0b03 	vfnmseq.f64	d0, d10, d3
    8a6c:	00040000 	andeq	r0, r4, r0
    8a70:	0000b411 	andeq	fp, r0, r1, lsl r4
    8a74:	00049d00 	andeq	r9, r4, r0, lsl #26
    8a78:	00a01200 	adceq	r1, r0, r0, lsl #4
    8a7c:	007f0000 	rsbseq	r0, pc, r0
    8a80:	9c0c5c15 	stcls	12, cr5, [ip], {21}
    8a84:	0000051e 	andeq	r0, r0, lr, lsl r5
    8a88:	00398f16 	eorseq	r8, r9, r6, lsl pc
    8a8c:	9e9d0c00 	cdpls	12, 9, cr0, cr13, cr0, {0}
    8a90:	00000000 	andeq	r0, r0, r0
    8a94:	0005b816 	andeq	fp, r5, r6, lsl r8
    8a98:	3e9e0c00 	cdpcc	12, 9, cr0, cr14, cr0, {0}
    8a9c:	04000005 	streq	r0, [r0], #-5
    8aa0:	00391b16 	eorseq	r1, r9, r6, lsl fp
    8aa4:	44a00c00 	strtmi	r0, [r0], #3072	; 0xc00
    8aa8:	08000005 	stmdaeq	r0, {r0, r2}
    8aac:	00393c16 	eorseq	r3, r9, r6, lsl ip
    8ab0:	54a20c00 	strtpl	r0, [r2], #3072	; 0xc00
    8ab4:	3a000005 	bcc	8ad0 <_Min_Stack_Size+0x88d0>
    8ab8:	00380916 	eorseq	r0, r8, r6, lsl r9
    8abc:	54a30c00 	strtpl	r0, [r3], #3072	; 0xc00
    8ac0:	47000005 	strmi	r0, [r0, -r5]
    8ac4:	0039f416 	eorseq	pc, r9, r6, lsl r4	; <UNPREDICTABLE>
    8ac8:	b4a50c00 	strtlt	r0, [r5], #3072	; 0xc00
    8acc:	54000000 	strpl	r0, [r0], #-0
    8ad0:	00397416 	eorseq	r7, r9, r6, lsl r4
    8ad4:	b4a60c00 	strtlt	r0, [r6], #3072	; 0xc00
    8ad8:	55000000 	strpl	r0, [r0, #-0]
    8adc:	00383616 	eorseq	r3, r8, r6, lsl r6
    8ae0:	b4a70c00 	strtlt	r0, [r7], #3072	; 0xc00
    8ae4:	56000000 	strpl	r0, [r0], -r0
    8ae8:	71657317 	cmnvc	r5, r7, lsl r3
    8aec:	bfa90c00 	svclt	0x00a90c00
    8af0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    8af4:	003cdb16 	eorseq	sp, ip, r6, lsl fp
    8af8:	bfaa0c00 	svclt	0x00aa0c00
    8afc:	5a000000 	bpl	8b04 <_Min_Stack_Size+0x8904>
    8b00:	00891800 	addeq	r1, r9, r0, lsl #16
    8b04:	05370000 	ldreq	r0, [r7, #-0]!
    8b08:	9e190000 	cdpls	0, 1, cr0, cr9, cr0, {0}
    8b0c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    8b10:	00000537 	andeq	r0, r0, r7, lsr r5
    8b14:	00009019 	andeq	r9, r0, r9, lsl r0
    8b18:	04060000 	streq	r0, [r6], #-0
    8b1c:	0000053d 	andeq	r0, r0, sp, lsr r5
    8b20:	1e04061a 	mcrne	6, 0, r0, cr4, cr10, {0}
    8b24:	11000005 	tstne	r0, r5
    8b28:	000000ad 	andeq	r0, r0, sp, lsr #1
    8b2c:	00000554 	andeq	r0, r0, r4, asr r5
    8b30:	0000a012 	andeq	sl, r0, r2, lsl r0
    8b34:	11003100 	mrsne	r3, (UNDEF: 16)
    8b38:	000000ad 	andeq	r0, r0, sp, lsr #1
    8b3c:	00000564 	andeq	r0, r0, r4, ror #10
    8b40:	0000a012 	andeq	sl, r0, r2, lsl r0
    8b44:	03000c00 	movweq	r0, #3072	; 0xc00
    8b48:	00003844 	andeq	r3, r0, r4, asr #16
    8b4c:	049dab0c 	ldreq	sl, [sp], #2828	; 0xb0c
    8b50:	7d1b0000 	ldcvc	0, cr0, [fp, #-0]
    8b54:	02000039 	andeq	r0, r0, #57	; 0x39
    8b58:	058703bf 	streq	r0, [r7, #959]	; 0x3bf
    8b5c:	1b1c0000 	blne	708b64 <_Min_Stack_Size+0x708964>
    8b60:	02000038 	andeq	r0, r0, #56	; 0x38
    8b64:	0000d5c1 	andeq	sp, r0, r1, asr #11
    8b68:	591d0000 	ldmdbpl	sp, {}	; <UNPREDICTABLE>
    8b6c:	01000038 	tsteq	r0, r8, lsr r0
    8b70:	00691864 	rsbeq	r1, r9, r4, ror #16
    8b74:	00001408 	andeq	r1, r0, r8, lsl #8
    8b78:	1d9c0100 	ldfnes	f0, [ip]
    8b7c:	00003a15 	andeq	r3, r0, r5, lsl sl
    8b80:	692c6801 	stmdbvs	ip!, {r0, fp, sp, lr}
    8b84:	00140800 	andseq	r0, r4, r0, lsl #16
    8b88:	9c010000 	stcls	0, cr0, [r1], {-0}
    8b8c:	0039db1e 	eorseq	sp, r9, lr, lsl fp
    8b90:	406d0100 	rsbmi	r0, sp, r0, lsl #2
    8b94:	34080069 	strcc	r0, [r8], #-105	; 0xffffff97
    8b98:	01000000 	mrseq	r0, (UNDEF: 0)
    8b9c:	0005cc9c 	muleq	r5, ip, ip
    8ba0:	62771f00 	rsbsvs	r1, r7, #0, 30
    8ba4:	b46d0100 	strbtlt	r0, [sp], #-256	; 0xffffff00
    8ba8:	02000000 	andeq	r0, r0, #0
    8bac:	20007791 	mulcs	r0, r1, r7
    8bb0:	00003a80 	andeq	r3, r0, r0, lsl #21
    8bb4:	00b47401 	adcseq	r7, r4, r1, lsl #8
    8bb8:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
    8bbc:	00300800 	eorseq	r0, r0, r0, lsl #16
    8bc0:	9c010000 	stcls	0, cr0, [r1], {-0}
    8bc4:	000005f2 	strdeq	r0, [r0], -r2
    8bc8:	01006921 	tsteq	r0, r1, lsr #18
    8bcc:	0000b475 	andeq	fp, r0, r5, ror r4
    8bd0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    8bd4:	3ad92200 	bcc	ff6513dc <BootRAM+0xe5c1b7d>
    8bd8:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    8bdc:	000000b4 	strheq	r0, [r0], -r4
    8be0:	080069a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, sp, lr}
    8be4:	0000005c 	andeq	r0, r0, ip, asr r0
    8be8:	06369c01 	ldrteq	r9, [r6], -r1, lsl #24
    8bec:	74230000 	strtvc	r0, [r3], #-0
    8bf0:	01000038 	tsteq	r0, r8, lsr r0
    8bf4:	0001017e 	andeq	r0, r1, lr, ror r1
    8bf8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    8bfc:	0014d223 	andseq	sp, r4, r3, lsr #4
    8c00:	017e0100 	cmneq	lr, r0, lsl #2
    8c04:	02000001 	andeq	r0, r0, #1
    8c08:	74216891 	strtvc	r6, [r1], #-2193	; 0xfffff76f
    8c0c:	0100706d 	tsteq	r0, sp, rrx
    8c10:	0000b47f 	andeq	fp, r0, pc, ror r4
    8c14:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    8c18:	38e52000 	stmiacc	r5!, {sp}^
    8c1c:	8b010000 	blhi	48c24 <_Min_Stack_Size+0x48a24>
    8c20:	00000089 	andeq	r0, r0, r9, lsl #1
    8c24:	08006a00 	stmdaeq	r0, {r9, fp, sp, lr}
    8c28:	0000004c 	andeq	r0, r0, ip, asr #32
    8c2c:	06959c01 	ldreq	r9, [r5], r1, lsl #24
    8c30:	8f230000 	svchi	0x00230000
    8c34:	01000039 	tsteq	r0, r9, lsr r0
    8c38:	00009e8b 	andeq	r9, r0, fp, lsl #29
    8c3c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    8c40:	6675621f 			; <UNDEFINED> instruction: 0x6675621f
    8c44:	378b0100 	strcc	r0, [fp, r0, lsl #2]
    8c48:	02000005 	andeq	r0, r0, #5
    8c4c:	90236891 	mlals	r3, r1, r8, r6
    8c50:	01000052 	qaddeq	r0, r2, r0
    8c54:	0000908b 	andeq	r9, r0, fp, lsl #1
    8c58:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    8c5c:	74657221 	strbtvc	r7, [r5], #-545	; 0xfffffddf
    8c60:	ca8c0100 	bgt	fe309068 <BootRAM+0xd279809>
    8c64:	02000000 	andeq	r0, r0, #0
    8c68:	73217091 			; <UNDEFINED> instruction: 0x73217091
    8c6c:	8c01006e 	stchi	0, cr0, [r1], {110}	; 0x6e
    8c70:	000000b4 	strheq	r0, [r0], -r4
    8c74:	00779102 	rsbseq	r9, r7, r2, lsl #2
    8c78:	00394520 	eorseq	r4, r9, r0, lsr #10
    8c7c:	89940100 	ldmibhi	r4, {r8}
    8c80:	4c000000 	stcmi	0, cr0, [r0], {-0}
    8c84:	e408006a 	str	r0, [r8], #-106	; 0xffffff96
    8c88:	01000000 	mrseq	r0, (UNDEF: 0)
    8c8c:	0006f59c 	muleq	r6, ip, r5
    8c90:	38fd2400 	ldmcc	sp!, {sl, sp}^
    8c94:	95010000 	strls	r0, [r1, #-0]
    8c98:	00000089 	andeq	r0, r0, r9, lsl #1
    8c9c:	24749102 	ldrbtcs	r9, [r4], #-258	; 0xfffffefe
    8ca0:	00003910 	andeq	r3, r0, r0, lsl r9
    8ca4:	00899501 	addeq	r9, r9, r1, lsl #10
    8ca8:	91020000 	mrsls	r0, (UNDEF: 2)
    8cac:	3a572470 	bcc	15d1e74 <_Min_Stack_Size+0x15d1c74>
    8cb0:	95010000 	strls	r0, [r1, #-0]
    8cb4:	00000089 	andeq	r0, r0, r9, lsl #1
    8cb8:	24689102 	strbtcs	r9, [r8], #-258	; 0xfffffefe
    8cbc:	00003cc4 	andeq	r3, r0, r4, asr #25
    8cc0:	00b49601 	adcseq	r9, r4, r1, lsl #12
    8cc4:	91020000 	mrsls	r0, (UNDEF: 2)
    8cc8:	3b5e246f 	blcc	1791e8c <_Min_Stack_Size+0x1791c8c>
    8ccc:	97010000 	strls	r0, [r1, -r0]
    8cd0:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    8cd4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    8cd8:	003ac822 	eorseq	ip, sl, r2, lsr #16
    8cdc:	89bd0100 	ldmibhi	sp!, {r8}
    8ce0:	30000000 	andcc	r0, r0, r0
    8ce4:	d808006b 	stmdale	r8, {r0, r1, r3, r5, r6}
    8ce8:	01000001 	tsteq	r0, r1
    8cec:	00071d9c 	muleq	r7, ip, sp
    8cf0:	6d742100 	ldfvse	f2, [r4, #-0]
    8cf4:	be010070 	mcrlt	0, 0, r0, cr1, cr0, {3}
    8cf8:	000000b4 	strheq	r0, [r0], -r4
    8cfc:	00779102 	rsbseq	r9, r7, r2, lsl #2
    8d00:	0039a425 	eorseq	sl, r9, r5, lsr #8
    8d04:	01230100 			; <UNDEFINED> instruction: 0x01230100
    8d08:	08006d08 	stmdaeq	r0, {r3, r8, sl, fp, sp, lr}
    8d0c:	00000400 	andeq	r0, r0, r0, lsl #8
    8d10:	07909c01 	ldreq	r9, [r0, r1, lsl #24]
    8d14:	2f260000 	svccs	0x00260000
    8d18:	01000039 	tsteq	r0, r9, lsr r0
    8d1c:	009e0123 	addseq	r0, lr, r3, lsr #2
    8d20:	91030000 	mrsls	r0, (UNDEF: 3)
    8d24:	98277fa4 	stmdals	r7!, {r2, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    8d28:	0100003a 	tsteq	r0, sl, lsr r0
    8d2c:	00d50124 	sbcseq	r0, r5, r4, lsr #2
    8d30:	91020000 	mrsls	r0, (UNDEF: 2)
    8d34:	3ae32764 	bcc	ff8d2acc <BootRAM+0xe84326d>
    8d38:	25010000 	strcs	r0, [r1, #-0]
    8d3c:	00079001 	andeq	r9, r7, r1
    8d40:	58910200 	ldmpl	r1, {r9}
    8d44:	003a6527 	eorseq	r6, sl, r7, lsr #10
    8d48:	01250100 			; <UNDEFINED> instruction: 0x01250100
    8d4c:	000007a0 	andeq	r0, r0, r0, lsr #15
    8d50:	27409102 	strbcs	r9, [r0, -r2, lsl #2]
    8d54:	00000ad2 	ldrdeq	r0, [r0], -r2
    8d58:	18012601 	stmdane	r1, {r0, r9, sl, sp}
    8d5c:	03000004 	movweq	r0, #4
    8d60:	287fa891 	ldmdacs	pc!, {r0, r4, r7, fp, sp, pc}^	; <UNPREDICTABLE>
    8d64:	0067736d 	rsbeq	r7, r7, sp, ror #6
    8d68:	a7012701 	strge	r2, [r1, -r1, lsl #14]
    8d6c:	02000000 	andeq	r0, r0, #0
    8d70:	11006091 	swpne	r6, r1, [r0]
    8d74:	000000ad 	andeq	r0, r0, sp, lsr #1
    8d78:	000007a0 	andeq	r0, r0, r0, lsr #15
    8d7c:	0000a012 	andeq	sl, r0, r2, lsl r0
    8d80:	11000500 	tstne	r0, r0, lsl #10
    8d84:	000000ad 	andeq	r0, r0, sp, lsr #1
    8d88:	000007b0 			; <UNDEFINED> instruction: 0x000007b0
    8d8c:	0000a012 	andeq	sl, r0, r2, lsl r0
    8d90:	25001500 	strcs	r1, [r0, #-1280]	; 0xfffffb00
    8d94:	00003a38 	andeq	r3, r0, r8, lsr sl
    8d98:	08016c01 	stmdaeq	r1, {r0, sl, fp, sp, lr}
    8d9c:	b0080071 	andlt	r0, r8, r1, ror r0
    8da0:	01000003 	tsteq	r0, r3
    8da4:	00083c9c 	muleq	r8, ip, ip
    8da8:	392f2600 	stmdbcc	pc!, {r9, sl, sp}	; <UNPREDICTABLE>
    8dac:	6c010000 	stcvs	0, cr0, [r1], {-0}
    8db0:	00009e01 	andeq	r9, r0, r1, lsl #28
    8db4:	e4910300 	ldr	r0, [r1], #768	; 0x300
    8db8:	6d74287e 	ldclvs	8, cr2, [r4, #-504]!	; 0xfffffe08
    8dbc:	6d010070 	stcvs	0, cr0, [r1, #-448]	; 0xfffffe40
    8dc0:	0000b401 	andeq	fp, r0, r1, lsl #8
    8dc4:	6f910200 	svcvs	0x00910200
    8dc8:	003a5727 	eorseq	r5, sl, r7, lsr #14
    8dcc:	016e0100 	cmneq	lr, r0, lsl #2
    8dd0:	00000089 	andeq	r0, r0, r9, lsl #1
    8dd4:	27749102 	ldrbcs	r9, [r4, -r2, lsl #2]!
    8dd8:	00003cf9 	strdeq	r3, [r0], -r9
    8ddc:	bf016f01 	svclt	0x00016f01
    8de0:	02000000 	andeq	r0, r0, #0
    8de4:	24276c91 	strtcs	r6, [r7], #-3217	; 0xfffff36f
    8de8:	01000039 	tsteq	r0, r9, lsr r0
    8dec:	00bf016f 	adcseq	r0, pc, pc, ror #2
    8df0:	91020000 	mrsls	r0, (UNDEF: 2)
    8df4:	73862972 	orrvc	r2, r6, #1867776	; 0x1c8000
    8df8:	00ea0800 	rsceq	r0, sl, r0, lsl #16
    8dfc:	6d280000 	stcvs	0, cr0, [r8, #-0]
    8e00:	01006773 	tsteq	r0, r3, ror r7
    8e04:	048d0201 	streq	r0, [sp], #513	; 0x201
    8e08:	91030000 	mrsls	r0, (UNDEF: 3)
    8e0c:	6c287eec 	stcvs	14, cr7, [r8], #-944	; 0xfffffc50
    8e10:	01006e65 	tsteq	r0, r5, ror #28
    8e14:	00bf0203 	adcseq	r0, pc, r3, lsl #4
    8e18:	91020000 	mrsls	r0, (UNDEF: 2)
    8e1c:	25000070 	strcs	r0, [r0, #-112]	; 0xffffff90
    8e20:	000039e9 	andeq	r3, r0, r9, ror #19
    8e24:	b8021701 	stmdalt	r2, {r0, r8, r9, sl, ip}
    8e28:	d8080074 	stmdale	r8, {r2, r4, r5, r6}
    8e2c:	01000000 	mrseq	r0, (UNDEF: 0)
    8e30:	0008719c 	muleq	r8, ip, r1
    8e34:	392f2600 	stmdbcc	pc!, {r9, sl, sp}	; <UNPREDICTABLE>
    8e38:	17010000 	strne	r0, [r1, -r0]
    8e3c:	00009e02 	andeq	r9, r0, r2, lsl #28
    8e40:	6c910200 	lfmvs	f0, 4, [r1], {0}
    8e44:	00381227 	eorseq	r1, r8, r7, lsr #4
    8e48:	02180100 	andseq	r0, r8, #0, 2
    8e4c:	000000b4 	strheq	r0, [r0], -r4
    8e50:	00779102 	rsbseq	r9, r7, r2, lsl #2
    8e54:	0037e725 	eorseq	lr, r7, r5, lsr #14
    8e58:	023e0100 	eorseq	r0, lr, #0, 2
    8e5c:	08007590 	stmdaeq	r0, {r4, r7, r8, sl, ip, sp, lr}
    8e60:	0000004c 	andeq	r0, r0, ip, asr #32
    8e64:	08979c01 	ldmeq	r7, {r0, sl, fp, ip, pc}
    8e68:	2f260000 	svccs	0x00260000
    8e6c:	01000039 	tsteq	r0, r9, lsr r0
    8e70:	009e023e 	addseq	r0, lr, lr, lsr r2
    8e74:	91020000 	mrsls	r0, (UNDEF: 2)
    8e78:	562a0074 			; <UNDEFINED> instruction: 0x562a0074
    8e7c:	01000039 	tsteq	r0, r9, lsr r0
    8e80:	75dc0249 	ldrbvc	r0, [ip, #585]	; 0x249
    8e84:	001e0800 	andseq	r0, lr, r0, lsl #16
    8e88:	9c010000 	stcls	0, cr0, [r1], {-0}
    8e8c:	000008ef 	andeq	r0, r0, pc, ror #17
    8e90:	0038f626 	eorseq	pc, r8, r6, lsr #12
    8e94:	02490100 	subeq	r0, r9, #0, 2
    8e98:	00000107 	andeq	r0, r0, r7, lsl #2
    8e9c:	266c9102 	strbtcs	r9, [ip], -r2, lsl #2
    8ea0:	00003a8d 	andeq	r3, r0, sp, lsl #21
    8ea4:	a7024901 	strge	r4, [r2, -r1, lsl #18]
    8ea8:	02000000 	andeq	r0, r0, #0
    8eac:	6f2b6891 	svcvs	0x002b6891
    8eb0:	e6000005 	str	r0, [r0], -r5
    8eb4:	12080075 	andne	r0, r8, #117	; 0x75
    8eb8:	01000000 	mrseq	r0, (UNDEF: 0)
    8ebc:	e6290252 			; <UNDEFINED> instruction: 0xe6290252
    8ec0:	12080075 	andne	r0, r8, #117	; 0x75
    8ec4:	2c000000 	stccs	0, cr0, [r0], {-0}
    8ec8:	0000057b 	andeq	r0, r0, fp, ror r5
    8ecc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    8ed0:	6c2d0000 	stcvs	0, cr0, [sp], #-0
    8ed4:	0d000002 	stceq	0, cr0, [r0, #-8]
    8ed8:	08fb06ce 	ldmeq	fp!, {r1, r2, r3, r6, r7, r9, sl}^
    8edc:	89080000 	stmdbhi	r8, {}	; <UNPREDICTABLE>
    8ee0:	11000000 	mrsne	r0, (UNDEF: 0)
    8ee4:	000000b4 	strheq	r0, [r0], -r4
    8ee8:	00000910 	andeq	r0, r0, r0, lsl r9
    8eec:	0000a012 	andeq	sl, r0, r2, lsl r0
    8ef0:	2e001a00 	vmlacs.f32	s2, s0, s0
    8ef4:	00000285 	andeq	r0, r0, r5, lsl #5
    8ef8:	0900090e 	stmdbeq	r0, {r1, r2, r3, r8, fp}
    8efc:	452f0000 	strmi	r0, [pc, #-0]!	; 8f04 <_Min_Stack_Size+0x8d04>
    8f00:	01000037 	tsteq	r0, r7, lsr r0
    8f04:	00013e32 	andeq	r3, r1, r2, lsr lr
    8f08:	40030500 	andmi	r0, r3, r0, lsl #10
    8f0c:	2f200001 	svccs	0x00200001
    8f10:	00003736 	andeq	r3, r0, r6, lsr r7
    8f14:	013e3301 	teqeq	lr, r1, lsl #6
    8f18:	03050000 	movweq	r0, #20480	; 0x5000
    8f1c:	20000144 	andcs	r0, r0, r4, asr #2
    8f20:	00014d11 	andeq	r4, r1, r1, lsl sp
    8f24:	00094d00 	andeq	r4, r9, r0, lsl #26
    8f28:	00a01200 	adceq	r1, r0, r0, lsl #4
    8f2c:	00030000 	andeq	r0, r3, r0
    8f30:	0039b22f 	eorseq	fp, r9, pc, lsr #4
    8f34:	5e380100 	rsfple	f0, f0, f0
    8f38:	05000009 	streq	r0, [r0, #-9]
    8f3c:	00a01c03 	adceq	r1, r0, r3, lsl #24
    8f40:	093d0908 	ldmdbeq	sp!, {r3, r8, fp}
    8f44:	c02f0000 	eorgt	r0, pc, r0
    8f48:	0100003a 	tsteq	r0, sl, lsr r0
    8f4c:	00097445 	andeq	r7, r9, r5, asr #8
    8f50:	48030500 	stmdami	r3, {r8, sl}
    8f54:	06200001 	strteq	r0, [r0], -r1
    8f58:	00097a04 	andeq	r7, r9, r4, lsl #20
    8f5c:	00ad0800 	adceq	r0, sp, r0, lsl #16
    8f60:	4d110000 	ldcmi	0, cr0, [r1, #-0]
    8f64:	95000001 	strls	r0, [r0, #-1]
    8f68:	12000009 	andne	r0, r0, #9
    8f6c:	000000a0 	andeq	r0, r0, r0, lsr #1
    8f70:	00a01201 	adceq	r1, r0, r1, lsl #4
    8f74:	00070000 	andeq	r0, r7, r0
    8f78:	003a782f 	eorseq	r7, sl, pc, lsr #16
    8f7c:	a6460100 	strbge	r0, [r6], -r0, lsl #2
    8f80:	05000009 	streq	r0, [r0, #-9]
    8f84:	00a02003 	adceq	r2, r0, r3
    8f88:	097f0908 	ldmdbeq	pc!, {r3, r8, fp}^	; <UNPREDICTABLE>
    8f8c:	c12f0000 			; <UNDEFINED> instruction: 0xc12f0000
    8f90:	01000039 	tsteq	r0, r9, lsr r0
    8f94:	00040848 	andeq	r0, r4, r8, asr #16
    8f98:	90030500 	andls	r0, r3, r0, lsl #10
    8f9c:	1120003a 			; <UNDEFINED> instruction: 0x1120003a
    8fa0:	000000b4 	strheq	r0, [r0], -r4
    8fa4:	000009cd 	andeq	r0, r0, sp, asr #19
    8fa8:	0000a030 	andeq	sl, r0, r0, lsr r0
    8fac:	0007ff00 	andeq	pc, r7, r0, lsl #30
    8fb0:	003a002f 	eorseq	r0, sl, pc, lsr #32
    8fb4:	bc4a0100 	stflte	f0, [sl], {-0}
    8fb8:	05000009 	streq	r0, [r0, #-9]
    8fbc:	003af003 	eorseq	pc, sl, r3
    8fc0:	00b41120 	adcseq	r1, r4, r0, lsr #2
    8fc4:	09ef0000 	stmibeq	pc!, {}^	; <UNPREDICTABLE>
    8fc8:	a0300000 	eorsge	r0, r0, r0
    8fcc:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    8fd0:	6a2f0003 	bvs	bc8fe4 <_Min_Stack_Size+0xbc8de4>
    8fd4:	0100003a 	tsteq	r0, sl, lsr r0
    8fd8:	0009de4c 	andeq	sp, r9, ip, asr #28
    8fdc:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
    8fe0:	2f200036 	svccs	0x00200036
    8fe4:	00003a09 	andeq	r3, r0, r9, lsl #20
    8fe8:	04184e01 	ldreq	r4, [r8], #-3585	; 0xfffff1ff
    8fec:	03050000 	movweq	r0, #20480	; 0x5000
    8ff0:	200000cc 	andcs	r0, r0, ip, asr #1
    8ff4:	0037f42f 	eorseq	pc, r7, pc, lsr #8
    8ff8:	08550100 	ldmdaeq	r5, {r8}^
    8ffc:	05000004 	streq	r0, [r0, #-4]
    9000:	0000e403 	andeq	lr, r0, r3, lsl #8
    9004:	3aa92f20 	bcc	fea54c8c <BootRAM+0xd9c542d>
    9008:	57010000 	strpl	r0, [r1, -r0]
    900c:	00000143 	andeq	r0, r0, r3, asr #2
    9010:	014c0305 	cmpeq	ip, r5, lsl #6
    9014:	682f2000 	stmdavs	pc!, {sp}	; <UNPREDICTABLE>
    9018:	01000038 	tsteq	r0, r8, lsr r0
    901c:	00014357 	andeq	r4, r1, r7, asr r3
    9020:	4d030500 	cfstr32mi	mvfx0, [r3, #-0]
    9024:	2f200001 	svccs	0x00200001
    9028:	000038c8 	andeq	r3, r0, r8, asr #17
    902c:	01435701 	cmpeq	r3, r1, lsl #14
    9030:	03050000 	movweq	r0, #20480	; 0x5000
    9034:	2000014e 	andcs	r0, r0, lr, asr #2
    9038:	0039092f 	eorseq	r0, r9, pc, lsr #18
    903c:	64590100 	ldrbvs	r0, [r9], #-256	; 0xffffff00
    9040:	05000005 	streq	r0, [r0, #-5]
    9044:	003a9403 	eorseq	r9, sl, r3, lsl #8
    9048:	3ab52f20 	bcc	fed54cd0 <BootRAM+0xdcc5471>
    904c:	5b010000 	blpl	49054 <_Min_Stack_Size+0x48e54>
    9050:	00000133 	andeq	r0, r0, r3, lsr r1
    9054:	3a840305 	bcc	fe109c70 <BootRAM+0xd07a411>
    9058:	7d2f2000 	stcvc	0, cr2, [pc, #-0]	; 9060 <_Min_Stack_Size+0x8e60>
    905c:	01000038 	tsteq	r0, r8, lsr r0
    9060:	0001335c 	andeq	r3, r1, ip, asr r3
    9064:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    9068:	2f200042 	svccs	0x00200042
    906c:	00003888 	andeq	r3, r0, r8, lsl #17
    9070:	01075e01 	tsteq	r7, r1, lsl #28
    9074:	03050000 	movweq	r0, #20480	; 0x5000
    9078:	200042f0 	strdcs	r4, [r0], -r0
    907c:	00399b2f 	eorseq	r9, r9, pc, lsr #22
    9080:	075f0100 	ldrbeq	r0, [pc, -r0, lsl #2]
    9084:	05000001 	streq	r0, [r0, #-1]
    9088:	003a8c03 	eorseq	r8, sl, r3, lsl #24
    908c:	38dc2f20 	ldmcc	ip, {r5, r8, r9, sl, fp, sp}^
    9090:	60010000 	andvs	r0, r1, r0
    9094:	00000107 	andeq	r0, r0, r7, lsl #2
    9098:	3a880305 	bcc	fe209cb4 <BootRAM+0xd17a455>
    909c:	d32f2000 			; <UNDEFINED> instruction: 0xd32f2000
    90a0:	01000038 	tsteq	r0, r8, lsr r0
    90a4:	00010761 	andeq	r0, r1, r1, ror #14
    90a8:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
    90ac:	00200042 	eoreq	r0, r0, r2, asr #32
    90b0:	000009ba 			; <UNDEFINED> instruction: 0x000009ba
    90b4:	1d000004 	stcne	0, cr0, [r0, #-16]
    90b8:	01040000 	mrseq	r0, (UNDEF: 4)
    90bc:	00000111 	andeq	r0, r0, r1, lsl r1
    90c0:	003c820c 	eorseq	r8, ip, ip, lsl #4
    90c4:	000b0800 	andeq	r0, fp, r0, lsl #16
    90c8:	00000000 	andeq	r0, r0, r0
    90cc:	00424900 	subeq	r4, r2, r0, lsl #18
    90d0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    90d4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    90d8:	ce070403 	cdpgt	4, 0, cr0, cr7, cr3, {0}
    90dc:	03000001 	movweq	r0, #1
    90e0:	00b80508 	adcseq	r0, r8, r8, lsl #10
    90e4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    90e8:	0002f804 	andeq	pc, r2, r4, lsl #16
    90ec:	06010300 	streq	r0, [r1], -r0, lsl #6
    90f0:	00000192 	muleq	r0, r2, r1
    90f4:	0000e304 	andeq	lr, r0, r4, lsl #6
    90f8:	4f1d0200 	svcmi	0x001d0200
    90fc:	03000000 	movweq	r0, #0
    9100:	01900801 	orrseq	r0, r0, r1, lsl #16
    9104:	02030000 	andeq	r0, r3, #0
    9108:	00009505 	andeq	r9, r0, r5, lsl #10
    910c:	00720400 	rsbseq	r0, r2, r0, lsl #8
    9110:	2b020000 	blcs	89118 <_Min_Stack_Size+0x88f18>
    9114:	00000068 	andeq	r0, r0, r8, rrx
    9118:	f2070203 	vhsub.s8	d0, d7, d3
    911c:	03000001 	movweq	r0, #1
    9120:	00bd0504 	adcseq	r0, sp, r4, lsl #10
    9124:	04030000 	streq	r0, [r3], #-0
    9128:	0001c907 	andeq	ip, r1, r7, lsl #18
    912c:	07080300 	streq	r0, [r8, -r0, lsl #6]
    9130:	000001c4 	andeq	r0, r0, r4, asr #3
    9134:	59070403 	stmdbpl	r7, {r0, r1, sl}
    9138:	05000000 	streq	r0, [r0, #-0]
    913c:	08010304 	stmdaeq	r1, {r2, r8, r9}
    9140:	00000199 	muleq	r0, r9, r1
    9144:	009a0406 	addseq	r0, sl, r6, lsl #8
    9148:	8d070000 	stchi	0, cr0, [r7, #-0]
    914c:	04000000 	streq	r0, [r0], #-0
    9150:	000000e5 	andeq	r0, r0, r5, ror #1
    9154:	00441803 	subeq	r1, r4, r3, lsl #16
    9158:	74040000 	strvc	r0, [r4], #-0
    915c:	03000000 	movweq	r0, #0
    9160:	00005d24 	andeq	r5, r0, r4, lsr #26
    9164:	045c0800 	ldrbeq	r0, [ip], #-2048	; 0xfffff800
    9168:	0001369c 	muleq	r1, ip, r6
    916c:	398f0900 	stmibcc	pc, {r8, fp}	; <UNPREDICTABLE>
    9170:	9d040000 	stcls	0, cr0, [r4, #-0]
    9174:	0000008b 	andeq	r0, r0, fp, lsl #1
    9178:	05b80900 	ldreq	r0, [r8, #2304]!	; 0x900
    917c:	9e040000 	cdpls	0, 0, cr0, cr4, cr0, {0}
    9180:	00000156 	andeq	r0, r0, r6, asr r1
    9184:	391b0904 	ldmdbcc	fp, {r2, r8, fp}
    9188:	a0040000 	andge	r0, r4, r0
    918c:	0000015c 	andeq	r0, r0, ip, asr r1
    9190:	393c0908 	ldmdbcc	ip!, {r3, r8, fp}
    9194:	a2040000 	andge	r0, r4, #0
    9198:	0000016c 	andeq	r0, r0, ip, ror #2
    919c:	3809093a 	stmdacc	r9, {r1, r3, r4, r5, r8, fp}
    91a0:	a3040000 	movwge	r0, #16384	; 0x4000
    91a4:	0000016c 	andeq	r0, r0, ip, ror #2
    91a8:	39f40947 	ldmibcc	r4!, {r0, r1, r2, r6, r8, fp}^
    91ac:	a5040000 	strge	r0, [r4, #-0]
    91b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    91b4:	39740954 	ldmdbcc	r4!, {r2, r4, r6, r8, fp}^
    91b8:	a6040000 	strge	r0, [r4], -r0
    91bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    91c0:	38360955 	ldmdacc	r6!, {r0, r2, r4, r6, r8, fp}
    91c4:	a7040000 	strge	r0, [r4, -r0]
    91c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    91cc:	65730a56 	ldrbvs	r0, [r3, #-2646]!	; 0xfffff5aa
    91d0:	a9040071 	stmdbge	r4, {r0, r4, r5, r6}
    91d4:	000000aa 	andeq	r0, r0, sl, lsr #1
    91d8:	3cdb0958 			; <UNDEFINED> instruction: 0x3cdb0958
    91dc:	aa040000 	bge	1091e4 <_Min_Stack_Size+0x108fe4>
    91e0:	000000aa 	andeq	r0, r0, sl, lsr #1
    91e4:	210b005a 	qaddcs	r0, sl, fp
    91e8:	4f000000 	svcmi	0x00000000
    91ec:	0c000001 	stceq	0, cr0, [r0], {1}
    91f0:	0000008b 	andeq	r0, r0, fp, lsl #1
    91f4:	00014f0c 	andeq	r4, r1, ip, lsl #30
    91f8:	00280c00 	eoreq	r0, r8, r0, lsl #24
    91fc:	06000000 	streq	r0, [r0], -r0
    9200:	00015504 	andeq	r5, r1, r4, lsl #10
    9204:	04060d00 	streq	r0, [r6], #-3328	; 0xfffff300
    9208:	00000136 	andeq	r0, r0, r6, lsr r1
    920c:	00008d0e 	andeq	r8, r0, lr, lsl #26
    9210:	00016c00 	andeq	r6, r1, r0, lsl #24
    9214:	00840f00 	addeq	r0, r4, r0, lsl #30
    9218:	00310000 	eorseq	r0, r1, r0
    921c:	00008d0e 	andeq	r8, r0, lr, lsl #26
    9220:	00017c00 	andeq	r7, r1, r0, lsl #24
    9224:	00840f00 	addeq	r0, r4, r0, lsl #30
    9228:	000c0000 	andeq	r0, ip, r0
    922c:	00384404 	eorseq	r4, r8, r4, lsl #8
    9230:	b5ab0400 	strlt	r0, [fp, #1024]!	; 0x400
    9234:	10000000 	andne	r0, r0, r0
    9238:	00003cbb 			; <UNDEFINED> instruction: 0x00003cbb
    923c:	009f2d01 	addseq	r2, pc, r1, lsl #26
    9240:	75fc0000 	ldrbvc	r0, [ip, #0]!
    9244:	004e0800 	subeq	r0, lr, r0, lsl #16
    9248:	9c010000 	stcls	0, cr0, [r1], {-0}
    924c:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
    9250:	66756211 			; <UNDEFINED> instruction: 0x66756211
    9254:	bd2d0100 	stflts	f0, [sp, #-0]
    9258:	02000001 	andeq	r0, r0, #1
    925c:	6c126c91 	ldcvs	12, cr6, [r2], {145}	; 0x91
    9260:	0100003c 	tsteq	r0, ip, lsr r0
    9264:	00009f2e 	andeq	r9, r0, lr, lsr #30
    9268:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    926c:	c3040600 	movwgt	r0, #17920	; 0x4600
    9270:	07000001 	streq	r0, [r0, -r1]
    9274:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9278:	003b5310 	eorseq	r5, fp, r0, lsl r3
    927c:	aa3e0100 	bge	f89684 <_Min_Stack_Size+0xf89484>
    9280:	4c000000 	stcmi	0, cr0, [r0], {-0}
    9284:	54080076 	strpl	r0, [r8], #-118	; 0xffffff8a
    9288:	01000000 	mrseq	r0, (UNDEF: 0)
    928c:	00021a9c 	muleq	r2, ip, sl
    9290:	75621100 	strbvc	r1, [r2, #-256]!	; 0xffffff00
    9294:	3e010066 	cdpcc	0, 0, cr0, cr1, cr6, {3}
    9298:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
    929c:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    92a0:	00003bc2 	andeq	r3, r0, r2, asr #23
    92a4:	00aa3f01 	adceq	r3, sl, r1, lsl #30
    92a8:	91020000 	mrsls	r0, (UNDEF: 2)
    92ac:	0f5f1276 	svceq	0x005f1276
    92b0:	40010000 	andmi	r0, r1, r0
    92b4:	000000aa 	andeq	r0, r0, sl, lsr #1
    92b8:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    92bc:	00003b41 	andeq	r3, r0, r1, asr #22
    92c0:	009f4101 	addseq	r4, pc, r1, lsl #2
    92c4:	91020000 	mrsls	r0, (UNDEF: 2)
    92c8:	ee130073 	mrc	0, 0, r0, cr3, cr3, {3}
    92cc:	0100003c 	tsteq	r0, ip, lsr r0
    92d0:	0000aa51 	andeq	sl, r0, r1, asr sl
    92d4:	0076a000 	rsbseq	sl, r6, r0
    92d8:	0000be08 	andeq	fp, r0, r8, lsl #28
    92dc:	ad9c0100 	ldfges	f0, [ip]
    92e0:	11000002 	tstne	r0, r2
    92e4:	00667562 	rsbeq	r7, r6, r2, ror #10
    92e8:	01bd5101 			; <UNDEFINED> instruction: 0x01bd5101
    92ec:	91020000 	mrsls	r0, (UNDEF: 2)
    92f0:	095d126c 	ldmdbeq	sp, {r2, r3, r5, r6, r9, ip}^
    92f4:	52010000 	andpl	r0, r1, #0
    92f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    92fc:	14759102 	ldrbtne	r9, [r5], #-258	; 0xfffffefe
    9300:	00736f71 	rsbseq	r6, r3, r1, ror pc
    9304:	009f5301 	addseq	r5, pc, r1, lsl #6
    9308:	91020000 	mrsls	r0, (UNDEF: 2)
    930c:	64691474 	strbtvs	r1, [r9], #-1140	; 0xfffffb8c
    9310:	aa540100 	bge	1509718 <_Min_Stack_Size+0x1509518>
    9314:	02000000 	andeq	r0, r0, #0
    9318:	dc157691 	ldcle	6, cr7, [r5], {145}	; 0x91
    931c:	4c080076 	stcmi	0, cr0, [r8], {118}	; 0x76
    9320:	94000000 	strls	r0, [r0], #-0
    9324:	14000002 	strne	r0, [r0], #-2
    9328:	00626c72 	rsbeq	r6, r2, r2, ror ip
    932c:	009f5d01 	addseq	r5, pc, r1, lsl #26
    9330:	91020000 	mrsls	r0, (UNDEF: 2)
    9334:	5b4d1273 	blpl	134dd08 <_Min_Stack_Size+0x134db08>
    9338:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    933c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9340:	00729102 	rsbseq	r9, r2, r2, lsl #2
    9344:	00772816 	rsbseq	r2, r7, r6, lsl r8
    9348:	00002c08 	andeq	r2, r0, r8, lsl #24
    934c:	6c721400 	cfldrdvs	mvd1, [r2], #-0
    9350:	67010062 	strvs	r0, [r1, -r2, rrx]
    9354:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9358:	00719102 	rsbseq	r9, r1, r2, lsl #2
    935c:	3c261300 	stccc	3, cr1, [r6], #-0
    9360:	6f010000 	svcvs	0x00010000
    9364:	000000aa 	andeq	r0, r0, sl, lsr #1
    9368:	00000000 	andeq	r0, r0, r0
    936c:	0000003c 	andeq	r0, r0, ip, lsr r0
    9370:	02ff9c01 	rscseq	r9, pc, #256	; 0x100
    9374:	62110000 	andsvs	r0, r1, #0
    9378:	01006675 	tsteq	r0, r5, ror r6
    937c:	0001bd6f 	andeq	fp, r1, pc, ror #26
    9380:	6c910200 	lfmvs	f0, 4, [r1], {0}
    9384:	003c3517 	eorseq	r3, ip, r7, lsl r5
    9388:	ff6f0100 			; <UNDEFINED> instruction: 0xff6f0100
    938c:	02000002 	andeq	r0, r0, #2
    9390:	70146891 	mulsvc	r4, r1, r8
    9394:	01007274 	tsteq	r0, r4, ror r2
    9398:	0001bd70 	andeq	fp, r1, r0, ror sp
    939c:	70910200 	addsvc	r0, r1, r0, lsl #4
    93a0:	003b8112 	eorseq	r8, fp, r2, lsl r1
    93a4:	aa710100 	bge	1c497ac <_Min_Stack_Size+0x1c495ac>
    93a8:	02000000 	andeq	r0, r0, #0
    93ac:	06007691 			; <UNDEFINED> instruction: 0x06007691
    93b0:	00009f04 	andeq	r9, r0, r4, lsl #30
    93b4:	3b281300 	blcc	a0dfbc <_Min_Stack_Size+0xa0ddbc>
    93b8:	7c010000 	stcvc	0, cr0, [r1], {-0}
    93bc:	000000aa 	andeq	r0, r0, sl, lsr #1
    93c0:	00000000 	andeq	r0, r0, r0
    93c4:	00000064 	andeq	r0, r0, r4, rrx
    93c8:	03619c01 	cmneq	r1, #256	; 0x100
    93cc:	62110000 	andsvs	r0, r1, #0
    93d0:	01006675 	tsteq	r0, r5, ror r6
    93d4:	0001bd7c 	andeq	fp, r1, ip, ror sp
    93d8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    93dc:	003b3717 	eorseq	r3, fp, r7, lsl r7
    93e0:	617c0100 	cmnvs	ip, r0, lsl #2
    93e4:	02000003 	andeq	r0, r0, #3
    93e8:	6c146891 	ldcvs	8, cr6, [r4], {145}	; 0x91
    93ec:	01006e65 	tsteq	r0, r5, ror #28
    93f0:	0000aa7d 	andeq	sl, r0, sp, ror sl
    93f4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    93f8:	00000016 	andeq	r0, r0, r6, lsl r0
    93fc:	00003800 	andeq	r3, r0, r0, lsl #16
    9400:	6c721400 	cfldrdvs	mvd1, [r2], #-0
    9404:	83010062 	movwhi	r0, #4194	; 0x1062
    9408:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    940c:	00759102 	rsbseq	r9, r5, r2, lsl #2
    9410:	bd040600 	stclt	6, cr0, [r4, #-0]
    9414:	13000001 	movwne	r0, #1
    9418:	00003b11 	andeq	r3, r0, r1, lsl fp
    941c:	00aa8e01 	adceq	r8, sl, r1, lsl #28
    9420:	77600000 	strbvc	r0, [r0, -r0]!
    9424:	003c0800 	eorseq	r0, ip, r0, lsl #16
    9428:	9c010000 	stcls	0, cr0, [r1], {-0}
    942c:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    9430:	66756211 			; <UNDEFINED> instruction: 0x66756211
    9434:	bd8e0100 	stflts	f0, [lr]
    9438:	02000001 	andeq	r0, r0, #1
    943c:	6d116c91 	ldcvs	12, cr6, [r1, #-580]	; 0xfffffdbc
    9440:	01006773 	tsteq	r0, r3, ror r7
    9444:	0002ff8e 	andeq	pc, r2, lr, lsl #31
    9448:	68910200 	ldmvs	r1, {r9}
    944c:	72747014 	rsbsvc	r7, r4, #20
    9450:	bd8f0100 	stflts	f0, [pc]	; 9458 <_Min_Stack_Size+0x9258>
    9454:	02000001 	andeq	r0, r0, #1
    9458:	66127091 			; <UNDEFINED> instruction: 0x66127091
    945c:	0100003b 	tsteq	r0, fp, lsr r0
    9460:	0000aa93 	muleq	r0, r3, sl
    9464:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    9468:	3bab1300 	blcc	feace070 <BootRAM+0xda3e811>
    946c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9470:	000000aa 	andeq	r0, r0, sl, lsr #1
    9474:	0800779c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip, sp, lr}
    9478:	00000092 	muleq	r0, r2, r0
    947c:	04239c01 	strteq	r9, [r3], #-3073	; 0xfffff3ff
    9480:	62110000 	andsvs	r0, r1, #0
    9484:	01006675 	tsteq	r0, r5, ror r6
    9488:	0001bd9c 	muleq	r1, ip, sp
    948c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    9490:	003bba17 	eorseq	fp, fp, r7, lsl sl
    9494:	619c0100 	orrsvs	r0, ip, r0, lsl #2
    9498:	02000003 	andeq	r0, r0, #3
    949c:	6c146891 	ldcvs	8, cr6, [r4], {145}	; 0x91
    94a0:	01006e65 	tsteq	r0, r5, ror #28
    94a4:	0000aa9d 	muleq	r0, sp, sl
    94a8:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    94ac:	0077b616 	rsbseq	fp, r7, r6, lsl r6
    94b0:	00006608 	andeq	r6, r0, r8, lsl #12
    94b4:	6c721400 	cfldrdvs	mvd1, [r2], #-0
    94b8:	a4010062 	strge	r0, [r1], #-98	; 0xffffff9e
    94bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    94c0:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    94c4:	00005b4d 	andeq	r5, r0, sp, asr #22
    94c8:	009fa501 	addseq	sl, pc, r1, lsl #10
    94cc:	91020000 	mrsls	r0, (UNDEF: 2)
    94d0:	18000075 	stmdane	r0, {r0, r2, r4, r5, r6}
    94d4:	00003c01 	andeq	r3, r0, r1, lsl #24
    94d8:	7830bb01 	ldmdavc	r0!, {r0, r8, r9, fp, ip, sp, pc}
    94dc:	00800800 	addeq	r0, r0, r0, lsl #16
    94e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    94e4:	00000455 	andeq	r0, r0, r5, asr r4
    94e8:	00390917 	eorseq	r0, r9, r7, lsl r9
    94ec:	55bb0100 	ldrpl	r0, [fp, #256]!	; 0x100
    94f0:	02000004 	andeq	r0, r0, #4
    94f4:	1b177491 	blne	5e6740 <_Min_Stack_Size+0x5e6540>
    94f8:	01000039 	tsteq	r0, r9, lsr r0
    94fc:	000094bb 			; <UNDEFINED> instruction: 0x000094bb
    9500:	70910200 	addsvc	r0, r1, r0, lsl #4
    9504:	7c040600 	stcvc	6, cr0, [r4], {-0}
    9508:	18000001 	stmdane	r0, {r0}
    950c:	00003be1 	andeq	r3, r0, r1, ror #23
    9510:	78b0cc01 	ldmvc	r0!, {r0, sl, fp, lr, pc}
    9514:	004c0800 	subeq	r0, ip, r0, lsl #16
    9518:	9c010000 	stcls	0, cr0, [r1], {-0}
    951c:	0000049b 	muleq	r0, fp, r4
    9520:	00390917 	eorseq	r0, r9, r7, lsl r9
    9524:	55cc0100 	strbpl	r0, [ip, #256]	; 0x100
    9528:	02000004 	andeq	r0, r0, #4
    952c:	3c177491 	cfldrscc	mvf7, [r7], {145}	; 0x91
    9530:	01000039 	tsteq	r0, r9, lsr r0
    9534:	000094cc 	andeq	r9, r0, ip, asr #9
    9538:	70910200 	addsvc	r0, r1, r0, lsl #4
    953c:	00380917 	eorseq	r0, r8, r7, lsl r9
    9540:	94cc0100 	strbls	r0, [ip], #256	; 0x100
    9544:	02000000 	andeq	r0, r0, #0
    9548:	19006c91 	stmdbne	r0, {r0, r4, r7, sl, fp, sp, lr}
    954c:	00003cd2 	ldrdeq	r3, [r0], -r2
    9550:	78fcd301 	ldmvc	ip!, {r0, r8, r9, ip, lr, pc}^
    9554:	001e0800 	andseq	r0, lr, r0, lsl #16
    9558:	9c010000 	stcls	0, cr0, [r1], {-0}
    955c:	000004cd 	andeq	r0, r0, sp, asr #9
    9560:	00390917 	eorseq	r0, r9, r7, lsl r9
    9564:	55d30100 	ldrbpl	r0, [r3, #256]	; 0x100
    9568:	02000004 	andeq	r0, r0, #4
    956c:	db177491 	blle	5e67b8 <_Min_Stack_Size+0x5e65b8>
    9570:	0100003c 	tsteq	r0, ip, lsr r0
    9574:	0000aad3 	ldrdeq	sl, [r0], -r3
    9578:	72910200 	addsvc	r0, r1, #0, 4
    957c:	3bcd1300 	blcc	ff34e184 <BootRAM+0xe2be925>
    9580:	d7010000 	strle	r0, [r1, -r0]
    9584:	00000021 	andeq	r0, r0, r1, lsr #32
    9588:	0800791c 	stmdaeq	r0, {r2, r3, r4, r8, fp, ip, sp, lr}
    958c:	000002f2 	strdeq	r0, [r0], -r2
    9590:	05969c01 	ldreq	r9, [r6, #3073]	; 0xc01
    9594:	09170000 	ldmdbeq	r7, {}	; <UNPREDICTABLE>
    9598:	01000039 	tsteq	r0, r9, lsr r0
    959c:	000455d7 	ldrdeq	r5, [r4], -r7
    95a0:	a4910300 	ldrge	r0, [r1], #768	; 0x300
    95a4:	5064127f 	rsbpl	r1, r4, pc, ror r2
    95a8:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    95ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    95b0:	12579102 	subsne	r9, r7, #-2147483648	; 0x80000000
    95b4:	00003b47 	andeq	r3, r0, r7, asr #22
    95b8:	00aadb01 	adceq	sp, sl, r1, lsl #22
    95bc:	91020000 	mrsls	r0, (UNDEF: 2)
    95c0:	3c4b124e 	sfmcc	f1, 2, [fp], {78}	; 0x4e
    95c4:	dc010000 	stcle	0, cr0, [r1], {-0}
    95c8:	000000aa 	andeq	r0, r0, sl, lsr #1
    95cc:	124c9102 	subne	r9, ip, #-2147483648	; 0x80000000
    95d0:	00003c0b 	andeq	r3, r0, fp, lsl #24
    95d4:	00aadd01 	adceq	sp, sl, r1, lsl #26
    95d8:	91020000 	mrsls	r0, (UNDEF: 2)
    95dc:	3c57124a 	lfmcc	f1, 2, [r7], {74}	; 0x4a
    95e0:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    95e4:	000000aa 	andeq	r0, r0, sl, lsr #1
    95e8:	12549102 	subsne	r9, r4, #-2147483648	; 0x80000000
    95ec:	00003ba0 	andeq	r3, r0, r0, lsr #23
    95f0:	0596ee01 	ldreq	lr, [r6, #3585]	; 0xe01
    95f4:	91030000 	mrsls	r0, (UNDEF: 3)
    95f8:	ea127fac 	b	4a94b0 <_Min_Stack_Size+0x4a92b0>
    95fc:	0100003a 	tsteq	r0, sl, lsr r0
    9600:	00009ff7 	strdeq	r9, [r0], -r7
    9604:	53910200 	orrspl	r0, r1, #0, 4
    9608:	003afa12 	eorseq	pc, sl, r2, lsl sl	; <UNPREDICTABLE>
    960c:	9ff80100 	svcls	0x00f80100
    9610:	02000000 	andeq	r0, r0, #0
    9614:	04124991 	ldreq	r4, [r2], #-2449	; 0xfffff66f
    9618:	0100003b 	tsteq	r0, fp, lsr r0
    961c:	0005a6fc 	strdeq	sl, [r5], -ip
    9620:	40910300 	addsmi	r0, r1, r0, lsl #6
    9624:	5b4d1a06 	blpl	134fe44 <_Min_Stack_Size+0x134fc44>
    9628:	0c010000 	stceq	0, cr0, [r1], {-0}
    962c:	0000aa01 	andeq	sl, r0, r1, lsl #20
    9630:	50910200 	addspl	r0, r1, r0, lsl #4
    9634:	00394f1a 	eorseq	r4, r9, sl, lsl pc
    9638:	010d0100 	mrseq	r0, (UNDEF: 29)
    963c:	000005b9 			; <UNDEFINED> instruction: 0x000005b9
    9640:	7fb89104 	svcvc	0x00b89104
    9644:	9f0e0006 	svcls	0x000e0006
    9648:	a6000000 	strge	r0, [r0], -r0
    964c:	0f000005 	svceq	0x00000005
    9650:	00000084 	andeq	r0, r0, r4, lsl #1
    9654:	9f0e000b 	svcls	0x000e000b
    9658:	b9000000 	stmdblt	r0, {}	; <UNPREDICTABLE>
    965c:	1b000005 	blne	9678 <_Min_Stack_Size+0x9478>
    9660:	00000084 	andeq	r0, r0, r4, lsl #1
    9664:	06449103 	strbeq	r9, [r4], -r3, lsl #2
    9668:	009f0e00 	addseq	r0, pc, r0, lsl #28
    966c:	05cd0000 	strbeq	r0, [sp]
    9670:	841b0000 	ldrhi	r0, [fp], #-0
    9674:	04000000 	streq	r0, [r0], #-0
    9678:	067fbc91 			; <UNDEFINED> instruction: 0x067fbc91
    967c:	3c3b1c00 	ldccc	12, cr1, [fp], #-0
    9680:	31010000 	mrscc	r0, (UNDEF: 1)
    9684:	00002101 	andeq	r2, r0, r1, lsl #2
    9688:	00000000 	andeq	r0, r0, r0
    968c:	00003600 	andeq	r3, r0, r0, lsl #12
    9690:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    9694:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    9698:	00003909 	andeq	r3, r0, r9, lsl #18
    969c:	55013101 	strpl	r3, [r1, #-257]	; 0xfffffeff
    96a0:	02000004 	andeq	r0, r0, #4
    96a4:	4f1a6c91 	svcmi	0x001a6c91
    96a8:	01000039 	tsteq	r0, r9, lsr r0
    96ac:	06060132 			; <UNDEFINED> instruction: 0x06060132
    96b0:	91020000 	mrsls	r0, (UNDEF: 2)
    96b4:	9f0e0074 	svcls	0x000e0074
    96b8:	16000000 	strne	r0, [r0], -r0
    96bc:	0f000006 	svceq	0x00000006
    96c0:	00000084 	andeq	r0, r0, r4, lsl #1
    96c4:	961c0001 	ldrls	r0, [ip], -r1
    96c8:	0100003b 	tsteq	r0, fp, lsr r0
    96cc:	0021013f 	eoreq	r0, r1, pc, lsr r1
    96d0:	7c100000 	ldcvc	0, cr0, [r0], {-0}
    96d4:	00360800 	eorseq	r0, r6, r0, lsl #16
    96d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    96dc:	0000064f 	andeq	r0, r0, pc, asr #12
    96e0:	0039091d 	eorseq	r0, r9, sp, lsl r9
    96e4:	013f0100 	teqeq	pc, r0, lsl #2
    96e8:	00000455 	andeq	r0, r0, r5, asr r4
    96ec:	1a6c9102 	bne	1b2dafc <_Min_Stack_Size+0x1b2d8fc>
    96f0:	0000394f 	andeq	r3, r0, pc, asr #18
    96f4:	06014001 	streq	r4, [r1], -r1
    96f8:	02000006 	andeq	r0, r0, #6
    96fc:	1c007491 	cfstrsne	mvf7, [r0], {145}	; 0x91
    9700:	00003ce1 	andeq	r3, r0, r1, ror #25
    9704:	21014d01 	tstcs	r1, r1, lsl #26
    9708:	00000000 	andeq	r0, r0, r0
    970c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    9710:	01000000 	mrseq	r0, (UNDEF: 0)
    9714:	0006a69c 	muleq	r6, ip, r6
    9718:	39091d00 	stmdbcc	r9, {r8, sl, fp, ip}
    971c:	4d010000 	stcmi	0, cr0, [r1, #-0]
    9720:	00045501 	andeq	r5, r4, r1, lsl #10
    9724:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    9728:	003c351d 	eorseq	r3, ip, sp, lsl r5
    972c:	014d0100 	mrseq	r0, (UNDEF: 93)
    9730:	00000094 	muleq	r0, r4, r0
    9734:	1e709102 	expnes	f1, f2
    9738:	0067736d 	rsbeq	r7, r7, sp, ror #6
    973c:	94014d01 	strls	r4, [r1], #-3329	; 0xfffff2ff
    9740:	02000000 	andeq	r0, r0, #0
    9744:	f91d6c91 			; <UNDEFINED> instruction: 0xf91d6c91
    9748:	01000039 	tsteq	r0, r9, lsr r0
    974c:	009f014d 	addseq	r0, pc, sp, asr #2
    9750:	91020000 	mrsls	r0, (UNDEF: 2)
    9754:	001c006b 	andseq	r0, ip, fp, rrx
    9758:	0100003d 	tsteq	r0, sp, lsr r0
    975c:	00210151 	eoreq	r0, r1, r1, asr r1
    9760:	00000000 	andeq	r0, r0, r0
    9764:	02b80000 	adcseq	r0, r8, #0
    9768:	9c010000 	stcls	0, cr0, [r1], {-0}
    976c:	000007ab 	andeq	r0, r0, fp, lsr #15
    9770:	0039091d 	eorseq	r0, r9, sp, lsl r9
    9774:	01510100 	cmpeq	r1, r0, lsl #2
    9778:	00000455 	andeq	r0, r0, r5, asr r4
    977c:	7fac9103 	svcvc	0x00ac9103
    9780:	003c351d 	eorseq	r3, ip, sp, lsl r5
    9784:	01510100 	cmpeq	r1, r0, lsl #2
    9788:	00000094 	muleq	r0, r4, r0
    978c:	7fa89103 	svcvc	0x00a89103
    9790:	67736d1e 			; <UNDEFINED> instruction: 0x67736d1e
    9794:	01510100 	cmpeq	r1, r0, lsl #2
    9798:	00000094 	muleq	r0, r4, r0
    979c:	7fa49103 	svcvc	0x00a49103
    97a0:	0039f91d 	eorseq	pc, r9, sp, lsl r9	; <UNPREDICTABLE>
    97a4:	01510100 	cmpeq	r1, r0, lsl #2
    97a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    97ac:	7fa39103 	svcvc	0x00a39103
    97b0:	736f711e 	cmnvc	pc, #-2147483641	; 0x80000007
    97b4:	01510100 	cmpeq	r1, r0, lsl #2
    97b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    97bc:	1d009102 	stfned	f1, [r0, #-8]
    97c0:	00003b8b 	andeq	r3, r0, fp, lsl #23
    97c4:	ab015101 	blge	5dbd0 <_Min_Stack_Size+0x5d9d0>
    97c8:	02000007 	andeq	r0, r0, #7
    97cc:	631a0491 	tstvs	sl, #-1862270976	; 0x91000000
    97d0:	0100003c 	tsteq	r0, ip, lsr r0
    97d4:	00aa0152 	adceq	r0, sl, r2, asr r1
    97d8:	91020000 	mrsls	r0, (UNDEF: 2)
    97dc:	3bda1a52 	blcc	ff69012c <BootRAM+0xe6008cd>
    97e0:	53010000 	movwpl	r0, #4096	; 0x1000
    97e4:	0000aa01 	andeq	sl, r0, r1, lsl #20
    97e8:	50910200 	addspl	r0, r1, r0, lsl #4
    97ec:	003cb21a 	eorseq	fp, ip, sl, lsl r2
    97f0:	01550100 	cmpeq	r5, r0, lsl #2
    97f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    97f8:	1a579102 	bne	15edc08 <_Min_Stack_Size+0x15eda08>
    97fc:	00003b78 	andeq	r3, r0, r8, ror fp
    9800:	9f015601 	svcls	0x00015601
    9804:	02000000 	andeq	r0, r0, #0
    9808:	a01a5691 	mulsge	sl, r1, r6
    980c:	0100003b 	tsteq	r0, fp, lsr r0
    9810:	07b10161 	ldreq	r0, [r1, r1, ror #2]!
    9814:	91030000 	mrsls	r0, (UNDEF: 3)
    9818:	ea1a0648 	b	68b140 <_Min_Stack_Size+0x68af40>
    981c:	0100003a 	tsteq	r0, sl, lsr r0
    9820:	009f0173 	addseq	r0, pc, r3, ror r1	; <UNPREDICTABLE>
    9824:	91020000 	mrsls	r0, (UNDEF: 2)
    9828:	3afa1a55 	bcc	ffe90184 <BootRAM+0xee00925>
    982c:	74010000 	strvc	r0, [r1], #-0
    9830:	0000aa01 	andeq	sl, r0, r1, lsl #20
    9834:	46910200 	ldrmi	r0, [r1], r0, lsl #4
    9838:	003b041a 	eorseq	r0, fp, sl, lsl r4
    983c:	01780100 	cmneq	r8, r0, lsl #2
    9840:	000007c4 	andeq	r0, r0, r4, asr #15
    9844:	7fbc9104 	svcvc	0x00bc9104
    9848:	394f1a06 	stmdbcc	pc, {r1, r2, r9, fp, ip}^	; <UNPREDICTABLE>
    984c:	8a010000 	bhi	49854 <_Min_Stack_Size+0x49654>
    9850:	0007d701 	andeq	sp, r7, r1, lsl #14
    9854:	b4910400 	ldrlt	r0, [r1], #1024	; 0x400
    9858:	0600067f 			; <UNDEFINED> instruction: 0x0600067f
    985c:	0000aa04 	andeq	sl, r0, r4, lsl #20
    9860:	009f0e00 	addseq	r0, pc, r0, lsl #28
    9864:	07c40000 	strbeq	r0, [r4, r0]
    9868:	841b0000 	ldrhi	r0, [fp], #-0
    986c:	03000000 	movweq	r0, #0
    9870:	00064c91 	muleq	r6, r1, ip
    9874:	00009f0e 	andeq	r9, r0, lr, lsl #30
    9878:	0007d700 	andeq	sp, r7, r0, lsl #14
    987c:	00841b00 	addeq	r1, r4, r0, lsl #22
    9880:	91030000 	mrsls	r0, (UNDEF: 3)
    9884:	0e000640 	cfmadd32eq	mvax2, mvfx0, mvfx0, mvfx0
    9888:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    988c:	000007eb 	andeq	r0, r0, fp, ror #15
    9890:	0000841b 	andeq	r8, r0, fp, lsl r4
    9894:	b8910400 	ldmlt	r1, {sl}
    9898:	1c00067f 	stcne	6, cr0, [r0], {127}	; 0x7f
    989c:	00003c76 	andeq	r3, r0, r6, ror ip
    98a0:	21019801 	tstcs	r1, r1, lsl #16
    98a4:	00000000 	andeq	r0, r0, r0
    98a8:	4a000000 	bmi	98b0 <_Min_Stack_Size+0x96b0>
    98ac:	01000000 	mrseq	r0, (UNDEF: 0)
    98b0:	0008339c 	muleq	r8, ip, r3
    98b4:	39091d00 	stmdbcc	r9, {r8, sl, fp, ip}
    98b8:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    98bc:	00045501 	andeq	r5, r4, r1, lsl #10
    98c0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    98c4:	003b8b1d 	eorseq	r8, fp, sp, lsl fp
    98c8:	01980100 	orrseq	r0, r8, r0, lsl #2
    98cc:	000000aa 	andeq	r0, r0, sl, lsr #1
    98d0:	1a6a9102 	bne	1aadce0 <_Min_Stack_Size+0x1aadae0>
    98d4:	0000394f 	andeq	r3, r0, pc, asr #18
    98d8:	33019901 	movwcc	r9, #6401	; 0x1901
    98dc:	02000008 	andeq	r0, r0, #8
    98e0:	0e007491 	mcreq	4, 0, r7, cr0, cr1, {4}
    98e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    98e8:	00000843 	andeq	r0, r0, r3, asr #16
    98ec:	0000840f 	andeq	r8, r0, pc, lsl #8
    98f0:	1c000300 	stcne	3, cr0, [r0], {-0}
    98f4:	00003c17 	andeq	r3, r0, r7, lsl ip
    98f8:	2101a801 	tstcs	r1, r1, lsl #16
    98fc:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    9900:	8208007c 	andhi	r0, r8, #124	; 0x7c
    9904:	01000001 	tsteq	r0, r1
    9908:	0008dc9c 	muleq	r8, ip, ip
    990c:	39091d00 	stmdbcc	r9, {r8, sl, fp, ip}
    9910:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    9914:	00045501 	andeq	r5, r4, r1, lsl #10
    9918:	b4910300 	ldrlt	r0, [r1], #768	; 0x300
    991c:	3c351d7f 	ldccc	13, cr1, [r5], #-508	; 0xfffffe04
    9920:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    9924:	00009401 	andeq	r9, r0, r1, lsl #8
    9928:	b0910300 	addslt	r0, r1, r0, lsl #6
    992c:	3b8b1d7f 	blcc	fe2d0f30 <BootRAM+0xd2416d1>
    9930:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    9934:	0007ab01 	andeq	sl, r7, r1, lsl #22
    9938:	ac910300 	ldcge	3, cr0, [r1], {0}
    993c:	3c631a7f 			; <UNDEFINED> instruction: 0x3c631a7f
    9940:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    9944:	0000aa01 	andeq	sl, r0, r1, lsl #20
    9948:	56910200 	ldrpl	r0, [r1], r0, lsl #4
    994c:	003ba01a 	eorseq	sl, fp, sl, lsl r0
    9950:	01ac0100 			; <UNDEFINED> instruction: 0x01ac0100
    9954:	00000606 	andeq	r0, r0, r6, lsl #12
    9958:	1a409102 	bne	102dd68 <_Min_Stack_Size+0x102db68>
    995c:	00003b6e 	andeq	r3, r0, lr, ror #22
    9960:	dc01b501 	cfstr32le	mvfx11, [r1], {1}
    9964:	03000008 	movweq	r0, #8
    9968:	1a064c91 	bne	19cbb4 <_Min_Stack_Size+0x19c9b4>
    996c:	00003b04 	andeq	r3, r0, r4, lsl #22
    9970:	0601bc01 	streq	fp, [r1], -r1, lsl #24
    9974:	03000006 	movweq	r0, #6
    9978:	1a7fbc91 	bne	1ff8bc4 <_Min_Stack_Size+0x1ff89c4>
    997c:	0000394f 	andeq	r3, r0, pc, asr #18
    9980:	ef01c101 	svc	0x0001c101
    9984:	03000008 	movweq	r0, #8
    9988:	00064491 	muleq	r6, r1, r4
    998c:	00009f0e 	andeq	r9, r0, lr, lsl #30
    9990:	0008ef00 	andeq	lr, r8, r0, lsl #30
    9994:	00841b00 	addeq	r1, r4, r0, lsl #22
    9998:	91030000 	mrsls	r0, (UNDEF: 3)
    999c:	0e000650 	mcreq	6, 0, r0, cr0, cr0, {2}
    99a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    99a4:	00000902 	andeq	r0, r0, r2, lsl #18
    99a8:	0000841b 	andeq	r8, r0, fp, lsl r4
    99ac:	48910300 	ldmmi	r1, {r8, r9}
    99b0:	f01c0006 			; <UNDEFINED> instruction: 0xf01c0006
    99b4:	0100003b 	tsteq	r0, fp, lsr r0
    99b8:	002101cf 	eoreq	r0, r1, pc, asr #3
    99bc:	00000000 	andeq	r0, r0, r0
    99c0:	01820000 	orreq	r0, r2, r0
    99c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    99c8:	0000099b 	muleq	r0, fp, r9
    99cc:	0039091d 	eorseq	r0, r9, sp, lsl r9
    99d0:	01cf0100 	biceq	r0, pc, r0, lsl #2
    99d4:	00000455 	andeq	r0, r0, r5, asr r4
    99d8:	7fb49103 	svcvc	0x00b49103
    99dc:	003c351d 	eorseq	r3, ip, sp, lsl r5
    99e0:	01cf0100 	biceq	r0, pc, r0, lsl #2
    99e4:	00000094 	muleq	r0, r4, r0
    99e8:	7fb09103 	svcvc	0x00b09103
    99ec:	003b8b1d 	eorseq	r8, fp, sp, lsl fp
    99f0:	01cf0100 	biceq	r0, pc, r0, lsl #2
    99f4:	000007ab 	andeq	r0, r0, fp, lsr #15
    99f8:	7fac9103 	svcvc	0x00ac9103
    99fc:	003c631a 	eorseq	r6, ip, sl, lsl r3
    9a00:	01d00100 	bicseq	r0, r0, r0, lsl #2
    9a04:	000000aa 	andeq	r0, r0, sl, lsr #1
    9a08:	1a569102 	bne	15ade18 <_Min_Stack_Size+0x15adc18>
    9a0c:	00003ba0 	andeq	r3, r0, r0, lsr #23
    9a10:	0601d301 	streq	sp, [r1], -r1, lsl #6
    9a14:	02000006 	andeq	r0, r0, #6
    9a18:	6e1a4091 	mrcvs	0, 0, r4, cr10, cr1, {4}
    9a1c:	0100003b 	tsteq	r0, fp, lsr r0
    9a20:	099b01dc 	ldmibeq	fp, {r2, r3, r4, r6, r7, r8}
    9a24:	91030000 	mrsls	r0, (UNDEF: 3)
    9a28:	041a064c 	ldreq	r0, [sl], #-1612	; 0xfffff9b4
    9a2c:	0100003b 	tsteq	r0, fp, lsr r0
    9a30:	060601e3 	streq	r0, [r6], -r3, ror #3
    9a34:	91030000 	mrsls	r0, (UNDEF: 3)
    9a38:	4f1a7fbc 	svcmi	0x001a7fbc
    9a3c:	01000039 	tsteq	r0, r9, lsr r0
    9a40:	09ae01e8 	stmibeq	lr!, {r3, r5, r6, r7, r8}
    9a44:	91030000 	mrsls	r0, (UNDEF: 3)
    9a48:	0e000644 	cfmadd32eq	mvax2, mvfx0, mvfx0, mvfx4
    9a4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9a50:	000009ae 	andeq	r0, r0, lr, lsr #19
    9a54:	0000841b 	andeq	r8, r0, fp, lsl r4
    9a58:	50910300 	addspl	r0, r1, r0, lsl #6
    9a5c:	9f1f0006 	svcls	0x001f0006
    9a60:	1b000000 	blne	9a68 <_Min_Stack_Size+0x9868>
    9a64:	00000084 	andeq	r0, r0, r4, lsl #1
    9a68:	06489103 	strbeq	r9, [r8], -r3, lsl #2
    9a6c:	02a70000 	adceq	r0, r7, #0
    9a70:	00040000 	andeq	r0, r4, r0
    9a74:	00001eb5 			; <UNDEFINED> instruction: 0x00001eb5
    9a78:	01110104 	tsteq	r1, r4, lsl #2
    9a7c:	160c0000 	strne	r0, [ip], -r0
    9a80:	a000003d 	andge	r0, r0, sp, lsr r0
    9a84:	0000000b 	andeq	r0, r0, fp
    9a88:	8d000000 	stchi	0, cr0, [r0, #-0]
    9a8c:	02000045 	andeq	r0, r0, #69	; 0x45
    9a90:	01ce0704 	biceq	r0, lr, r4, lsl #14
    9a94:	04030000 	streq	r0, [r3], #-0
    9a98:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    9a9c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    9aa0:	000000b8 	strheq	r0, [r0], -r8
    9aa4:	f8040802 			; <UNDEFINED> instruction: 0xf8040802
    9aa8:	02000002 	andeq	r0, r0, #2
    9aac:	01920601 	orrseq	r0, r2, r1, lsl #12
    9ab0:	01020000 	mrseq	r0, (UNDEF: 2)
    9ab4:	00019008 	andeq	r9, r1, r8
    9ab8:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    9abc:	00000095 	muleq	r0, r5, r0
    9ac0:	f2070202 	vhsub.s8	d0, d7, d2
    9ac4:	02000001 	andeq	r0, r0, #1
    9ac8:	00bd0504 	adcseq	r0, sp, r4, lsl #10
    9acc:	67040000 	strvs	r0, [r4, -r0]
    9ad0:	02000000 	andeq	r0, r0, #0
    9ad4:	00006b41 	andeq	r6, r0, r1, asr #22
    9ad8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    9adc:	000001c9 	andeq	r0, r0, r9, asr #3
    9ae0:	c4070802 	strgt	r0, [r7], #-2050	; 0xfffff7fe
    9ae4:	02000001 	andeq	r0, r0, #1
    9ae8:	00590704 	subseq	r0, r9, r4, lsl #14
    9aec:	04050000 	streq	r0, [r5], #-0
    9af0:	99080102 	stmdbls	r8, {r1, r8}
    9af4:	04000001 	streq	r0, [r0], #-1
    9af8:	00000069 	andeq	r0, r0, r9, rrx
    9afc:	00603003 	rsbeq	r3, r0, r3
    9b00:	cd040000 	stcgt	0, cr0, [r4, #-0]
    9b04:	0400003a 	streq	r0, [r0], #-58	; 0xffffffc6
    9b08:	00006b39 	andeq	r6, r0, r9, lsr fp
    9b0c:	3a9e0400 	bcc	fe78ab14 <BootRAM+0xd6fb2b5>
    9b10:	3f040000 	svccc	0x00040000
    9b14:	00000089 	andeq	r0, r0, r9, lsl #1
    9b18:	003d6f06 	eorseq	r6, sp, r6, lsl #30
    9b1c:	8c051400 	cfstrshi	mvf1, [r5], {-0}
    9b20:	000000f3 	strdeq	r0, [r0], -r3
    9b24:	003d5307 	eorseq	r5, sp, r7, lsl #6
    9b28:	9f8f0500 	svcls	0x008f0500
    9b2c:	00000000 	andeq	r0, r0, r0
    9b30:	003dc307 	eorseq	ip, sp, r7, lsl #6
    9b34:	f3900500 	vabal.u16	q0, d0, d0
    9b38:	04000000 	streq	r0, [r0], #-0
    9b3c:	003e0607 	eorseq	r0, lr, r7, lsl #12
    9b40:	f3910500 	vabal.u16	q0, d1, d0
    9b44:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9b48:	003d6707 	eorseq	r6, sp, r7, lsl #14
    9b4c:	80920500 	addshi	r0, r2, r0, lsl #10
    9b50:	0c000000 	stceq	0, cr0, [r0], {-0}
    9b54:	003d3807 	eorseq	r3, sp, r7, lsl #16
    9b58:	2a930500 	bcs	fe4caf60 <BootRAM+0xd43b701>
    9b5c:	10000001 	andne	r0, r0, r1
    9b60:	aa040800 	bge	10bb68 <_Min_Stack_Size+0x10b968>
    9b64:	06000000 	streq	r0, [r0], -r0
    9b68:	00003e28 	andeq	r3, r0, r8, lsr #28
    9b6c:	2aa40514 	bcs	fe90afc4 <BootRAM+0xd87b765>
    9b70:	07000001 	streq	r0, [r0, -r1]
    9b74:	00003da4 	andeq	r3, r0, r4, lsr #27
    9b78:	0177a705 	cmneq	r7, r5, lsl #14
    9b7c:	07000000 	streq	r0, [r0, -r0]
    9b80:	00003dfe 	strdeq	r3, [r0], -lr
    9b84:	017ca805 	cmneq	ip, r5, lsl #16
    9b88:	07040000 	streq	r0, [r4, -r0]
    9b8c:	00003d5e 	andeq	r3, r0, lr, asr sp
    9b90:	016ca905 	cmneq	ip, r5, lsl #18
    9b94:	00080000 	andeq	r0, r8, r0
    9b98:	00f90408 	rscseq	r0, r9, r8, lsl #8
    9b9c:	48040000 	stmdami	r4, {}	; <UNPREDICTABLE>
    9ba0:	0500003d 	streq	r0, [r0, #-61]	; 0xffffffc3
    9ba4:	0000aa96 	muleq	r0, r6, sl
    9ba8:	3e110600 	cfmsub32cc	mvax0, mvfx0, mvfx1, mvfx0
    9bac:	050c0000 	streq	r0, [ip, #-0]
    9bb0:	00016c98 	muleq	r1, r8, ip
    9bb4:	3d530700 	ldclcc	7, cr0, [r3, #-0]
    9bb8:	9b050000 	blls	149bc0 <_Min_Stack_Size+0x1499c0>
    9bbc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9bc0:	3dc30700 	stclcc	7, cr0, [r3]
    9bc4:	9c050000 	stcls	0, cr0, [r5], {-0}
    9bc8:	000000f3 	strdeq	r0, [r0], -r3
    9bcc:	3e060704 	cdpcc	7, 0, cr0, cr6, cr4, {0}
    9bd0:	9d050000 	stcls	0, cr0, [r5, #-0]
    9bd4:	000000f3 	strdeq	r0, [r0], -r3
    9bd8:	44040008 	strmi	r0, [r4], #-8
    9bdc:	0500003d 	streq	r0, [r0, #-61]	; 0xffffffc3
    9be0:	00013b9f 	muleq	r1, pc, fp	; <UNPREDICTABLE>
    9be4:	00940900 	addseq	r0, r4, r0, lsl #18
    9be8:	04080000 	streq	r0, [r8], #-0
    9bec:	00000130 	andeq	r0, r0, r0, lsr r1
    9bf0:	003d9d04 	eorseq	r9, sp, r4, lsl #26
    9bf4:	f9ab0500 			; <UNDEFINED> instruction: 0xf9ab0500
    9bf8:	0a000000 	beq	9c00 <_Min_Stack_Size+0x9a00>
    9bfc:	00003dca 	andeq	r3, r0, sl, asr #27
    9c00:	7dcc2501 	cfstr64vc	mvdx2, [ip, #4]
    9c04:	003e0800 	eorseq	r0, lr, r0, lsl #16
    9c08:	9c010000 	stcls	0, cr0, [r1], {-0}
    9c0c:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    9c10:	003e210b 	eorseq	r2, lr, fp, lsl #2
    9c14:	b7250100 	strlt	r0, [r5, -r0, lsl #2]!
    9c18:	02000001 	andeq	r0, r0, #1
    9c1c:	08007491 	stmdaeq	r0, {r0, r4, r7, sl, ip, sp, lr}
    9c20:	00018204 	andeq	r8, r1, r4, lsl #4
    9c24:	01b10c00 			; <UNDEFINED> instruction: 0x01b10c00
    9c28:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
    9c2c:	0100003d 	tsteq	r0, sp, lsr r0
    9c30:	007e0c3e 	rsbseq	r0, lr, lr, lsr ip
    9c34:	00001808 	andeq	r1, r0, r8, lsl #16
    9c38:	e09c0100 	adds	r0, ip, r0, lsl #2
    9c3c:	0b000001 	bleq	9c48 <_Min_Stack_Size+0x9a48>
    9c40:	00003dec 	andeq	r3, r0, ip, ror #27
    9c44:	01e03e01 	mvneq	r3, r1, lsl #28
    9c48:	91020000 	mrsls	r0, (UNDEF: 2)
    9c4c:	7c0c0074 	stcvc	0, cr0, [ip], {116}	; 0x74
    9c50:	0a000001 	beq	9c5c <_Min_Stack_Size+0x9a5c>
    9c54:	00003db4 			; <UNDEFINED> instruction: 0x00003db4
    9c58:	7e244a01 	vmulvc.f32	s8, s8, s2
    9c5c:	00460800 	subeq	r0, r6, r0, lsl #16
    9c60:	9c010000 	stcls	0, cr0, [r1], {-0}
    9c64:	00000225 	andeq	r0, r0, r5, lsr #4
    9c68:	003e210b 	eorseq	r2, lr, fp, lsl #2
    9c6c:	b74a0100 	strblt	r0, [sl, -r0, lsl #2]
    9c70:	02000001 	andeq	r0, r0, #1
    9c74:	3b0b6c91 	blcc	2e4ec0 <_Min_Stack_Size+0x2e4cc0>
    9c78:	0100003e 	tsteq	r0, lr, lsr r0
    9c7c:	0001e04a 	andeq	lr, r1, sl, asr #32
    9c80:	68910200 	ldmvs	r1, {r9}
    9c84:	003dfe0d 	eorseq	pc, sp, sp, lsl #28
    9c88:	e04c0100 	sub	r0, ip, r0, lsl #2
    9c8c:	02000001 	andeq	r0, r0, #1
    9c90:	0a007491 	beq	26edc <_Min_Stack_Size+0x26cdc>
    9c94:	00003e49 	andeq	r3, r0, r9, asr #28
    9c98:	7e6c6701 	cdpvc	7, 6, cr6, cr12, cr1, {0}
    9c9c:	00700800 	rsbseq	r0, r0, r0, lsl #16
    9ca0:	9c010000 	stcls	0, cr0, [r1], {-0}
    9ca4:	00000273 	andeq	r0, r0, r3, ror r2
    9ca8:	003e210b 	eorseq	r2, lr, fp, lsl #2
    9cac:	b7670100 	strblt	r0, [r7, -r0, lsl #2]!
    9cb0:	02000001 	andeq	r0, r0, #1
    9cb4:	3b0b6c91 	blcc	2e4f00 <_Min_Stack_Size+0x2e4d00>
    9cb8:	0100003e 	tsteq	r0, lr, lsr r0
    9cbc:	0001e067 	andeq	lr, r1, r7, rrx
    9cc0:	68910200 	ldmvs	r1, {r9}
    9cc4:	003df30d 	eorseq	pc, sp, sp, lsl #6
    9cc8:	7c690100 	stfvce	f0, [r9], #-0
    9ccc:	02000001 	andeq	r0, r0, #1
    9cd0:	da0d7491 	ble	366f1c <_Min_Stack_Size+0x366d1c>
    9cd4:	0100003d 	tsteq	r0, sp, lsr r0
    9cd8:	0002736a 	andeq	r7, r2, sl, ror #6
    9cdc:	70910200 	addsvc	r0, r1, r0, lsl #4
    9ce0:	009f0c00 	addseq	r0, pc, r0, lsl #24
    9ce4:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    9ce8:	0100003e 	tsteq	r0, lr, lsr r0
    9cec:	000094aa 	andeq	r9, r0, sl, lsr #9
    9cf0:	007edc00 	rsbseq	sp, lr, r0, lsl #24
    9cf4:	00005208 	andeq	r5, r0, r8, lsl #4
    9cf8:	0b9c0100 	bleq	fe70a100 <BootRAM+0xd67a8a1>
    9cfc:	00003d7a 	andeq	r3, r0, sl, ror sp
    9d00:	01e0aa01 	mvneq	sl, r1, lsl #20
    9d04:	91020000 	mrsls	r0, (UNDEF: 2)
    9d08:	3e210d6c 	cdpcc	13, 2, cr0, cr1, cr12, {3}
    9d0c:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    9d10:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
    9d14:	00749102 	rsbseq	r9, r4, r2, lsl #2
    9d18:	000e8600 	andeq	r8, lr, r0, lsl #12
    9d1c:	78000400 	stmdavc	r0, {sl}
    9d20:	0400001f 	streq	r0, [r0], #-31	; 0xffffffe1
    9d24:	00011101 	andeq	r1, r1, r1, lsl #2
    9d28:	40fc0c00 	rscsmi	r0, ip, r0, lsl #24
    9d2c:	0bd00000 	bleq	ff409d34 <BootRAM+0xe37a4d5>
    9d30:	00000000 	andeq	r0, r0, r0
    9d34:	47140000 	ldrmi	r0, [r4, -r0]
    9d38:	13020000 	movwne	r0, #8192	; 0x2000
    9d3c:	03000057 	movweq	r0, #87	; 0x57
    9d40:	00002cd8 	ldrdeq	r2, [r0], -r8
    9d44:	07040300 	streq	r0, [r4, -r0, lsl #6]
    9d48:	000001ce 	andeq	r0, r0, lr, asr #3
    9d4c:	69050404 	stmdbvs	r5, {r2, sl}
    9d50:	0300746e 	movweq	r7, #1134	; 0x46e
    9d54:	00b80508 	adcseq	r0, r8, r8, lsl #10
    9d58:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    9d5c:	0002f804 	andeq	pc, r2, r4, lsl #16
    9d60:	04b30200 	ldrteq	r0, [r3], #512	; 0x200
    9d64:	1b040000 	blne	109d6c <_Min_Stack_Size+0x109b6c>
    9d68:	00000053 	andeq	r0, r0, r3, asr r0
    9d6c:	92060103 	andls	r0, r6, #-1073741824	; 0xc0000000
    9d70:	02000001 	andeq	r0, r0, #1
    9d74:	000000e3 	andeq	r0, r0, r3, ror #1
    9d78:	00651d04 	rsbeq	r1, r5, r4, lsl #26
    9d7c:	01030000 	mrseq	r0, (UNDEF: 3)
    9d80:	00019008 	andeq	r9, r1, r8
    9d84:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    9d88:	00000095 	muleq	r0, r5, r0
    9d8c:	f2070203 	vhsub.s8	d0, d7, d3
    9d90:	03000001 	movweq	r0, #1
    9d94:	00bd0504 	adcseq	r0, sp, r4, lsl #10
    9d98:	67020000 	strvs	r0, [r2, -r0]
    9d9c:	04000000 	streq	r0, [r0], #-0
    9da0:	00008c41 	andeq	r8, r0, r1, asr #24
    9da4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    9da8:	000001c9 	andeq	r0, r0, r9, asr #3
    9dac:	c4070803 	strgt	r0, [r7], #-2051	; 0xfffff7fd
    9db0:	03000001 	movweq	r0, #1
    9db4:	00590704 	subseq	r0, r9, r4, lsl #14
    9db8:	04050000 	streq	r0, [r5], #-0
    9dbc:	99080103 	stmdbls	r8, {r0, r1, r8}
    9dc0:	06000001 	streq	r0, [r0], -r1
    9dc4:	0000b004 	andeq	fp, r0, r4
    9dc8:	b5020700 	strlt	r0, [r2, #-1792]	; 0xfffff900
    9dcc:	05000004 	streq	r0, [r0, #-4]
    9dd0:	00004814 	andeq	r4, r0, r4, lsl r8
    9dd4:	00e50200 	rsceq	r0, r5, r0, lsl #4
    9dd8:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
    9ddc:	0000005a 	andeq	r0, r0, sl, asr r0
    9de0:	00006902 	andeq	r6, r0, r2, lsl #18
    9de4:	81300500 	teqhi	r0, r0, lsl #10
    9de8:	02000000 	andeq	r0, r0, #0
    9dec:	00003ace 	andeq	r3, r0, lr, asr #21
    9df0:	007a3802 	rsbseq	r3, sl, r2, lsl #16
    9df4:	cd020000 	stcgt	0, cr0, [r2, #-0]
    9df8:	0200003a 	andeq	r0, r0, #58	; 0x3a
    9dfc:	00008c39 	andeq	r8, r0, r9, lsr ip
    9e00:	3a9e0200 	bcc	fe78a608 <BootRAM+0xd6fada9>
    9e04:	3f020000 	svccc	0x00020000
    9e08:	000000c7 	andeq	r0, r0, r7, asr #1
    9e0c:	00bc0406 	adcseq	r0, ip, r6, lsl #8
    9e10:	6f080000 	svcvs	0x00080000
    9e14:	1400003d 	strne	r0, [r0], #-61	; 0xffffffc3
    9e18:	01428c06 	cmpeq	r2, r6, lsl #24
    9e1c:	53090000 	movwpl	r0, #36864	; 0x9000
    9e20:	0600003d 			; <UNDEFINED> instruction: 0x0600003d
    9e24:	0000e88f 	andeq	lr, r0, pc, lsl #17
    9e28:	c3090000 	movwgt	r0, #36864	; 0x9000
    9e2c:	0600003d 			; <UNDEFINED> instruction: 0x0600003d
    9e30:	00014290 	muleq	r1, r0, r2
    9e34:	06090400 	streq	r0, [r9], -r0, lsl #8
    9e38:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
    9e3c:	00014291 	muleq	r1, r1, r2
    9e40:	67090800 	strvs	r0, [r9, -r0, lsl #16]
    9e44:	0600003d 			; <UNDEFINED> instruction: 0x0600003d
    9e48:	0000a192 	muleq	r0, r2, r1
    9e4c:	38090c00 	stmdacc	r9, {sl, fp}
    9e50:	0600003d 			; <UNDEFINED> instruction: 0x0600003d
    9e54:	00017993 	muleq	r1, r3, r9
    9e58:	06001000 	streq	r1, [r0], -r0
    9e5c:	0000f904 	andeq	pc, r0, r4, lsl #18
    9e60:	3e280800 	cdpcc	8, 2, cr0, cr8, cr0, {0}
    9e64:	06140000 	ldreq	r0, [r4], -r0
    9e68:	000179a4 	andeq	r7, r1, r4, lsr #19
    9e6c:	3da40900 			; <UNDEFINED> instruction: 0x3da40900
    9e70:	a7060000 	strge	r0, [r6, -r0]
    9e74:	000001c6 	andeq	r0, r0, r6, asr #3
    9e78:	3dfe0900 			; <UNDEFINED> instruction: 0x3dfe0900
    9e7c:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
    9e80:	000001cb 	andeq	r0, r0, fp, asr #3
    9e84:	3d5e0904 	vldrcc.16	s1, [lr, #-8]	; <UNPREDICTABLE>
    9e88:	a9060000 	stmdbge	r6, {}	; <UNPREDICTABLE>
    9e8c:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    9e90:	04060008 	streq	r0, [r6], #-8
    9e94:	00000148 	andeq	r0, r0, r8, asr #2
    9e98:	003d4802 	eorseq	r4, sp, r2, lsl #16
    9e9c:	f9960600 			; <UNDEFINED> instruction: 0xf9960600
    9ea0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9ea4:	00003e11 	andeq	r3, r0, r1, lsl lr
    9ea8:	bb98060c 	bllt	fe60b6e0 <BootRAM+0xd57be81>
    9eac:	09000001 	stmdbeq	r0, {r0}
    9eb0:	00003d53 	andeq	r3, r0, r3, asr sp
    9eb4:	00e89b06 	rsceq	r9, r8, r6, lsl #22
    9eb8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    9ebc:	00003dc3 	andeq	r3, r0, r3, asr #27
    9ec0:	01429c06 	cmpeq	r2, r6, lsl #24
    9ec4:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    9ec8:	00003e06 	andeq	r3, r0, r6, lsl #28
    9ecc:	01429d06 	cmpeq	r2, r6, lsl #26
    9ed0:	00080000 	andeq	r0, r8, r0
    9ed4:	003d4402 	eorseq	r4, sp, r2, lsl #8
    9ed8:	8a9f0600 	bhi	fe7cb6e0 <BootRAM+0xd73be81>
    9edc:	0a000001 	beq	9ee8 <_Min_Stack_Size+0x9ce8>
    9ee0:	000000dd 	ldrdeq	r0, [r0], -sp
    9ee4:	017f0406 	cmneq	pc, r6, lsl #8
    9ee8:	9d020000 	stcls	0, cr0, [r2, #-0]
    9eec:	0600003d 			; <UNDEFINED> instruction: 0x0600003d
    9ef0:	000148ab 	andeq	r4, r1, fp, lsr #17
    9ef4:	38bb0200 	ldmcc	fp!, {r9}
    9ef8:	46070000 	strmi	r0, [r7], -r0
    9efc:	000001e7 	andeq	r0, r0, r7, ror #3
    9f00:	01ed0406 	mvneq	r0, r6, lsl #8
    9f04:	430b0000 	movwmi	r0, #45056	; 0xb000
    9f08:	0800003a 	stmdaeq	r0, {r1, r3, r4, r5}
    9f0c:	00003e87 	andeq	r3, r0, r7, lsl #29
    9f10:	17660708 	strbne	r0, [r6, -r8, lsl #14]!
    9f14:	09000002 	stmdbeq	r0, {r1}
    9f18:	000040d3 	ldrdeq	r4, [r0], -r3
    9f1c:	00d26807 	sbcseq	r6, r2, r7, lsl #16
    9f20:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    9f24:	000040c3 	andeq	r4, r0, r3, asr #1
    9f28:	00e86907 	rsceq	r6, r8, r7, lsl #18
    9f2c:	00040000 	andeq	r0, r4, r0
    9f30:	003e9102 	eorseq	r9, lr, r2, lsl #2
    9f34:	f26a0700 	vabd.s32	d16, d10, d0
    9f38:	02000001 	andeq	r0, r0, #1
    9f3c:	00003828 	andeq	r3, r0, r8, lsr #16
    9f40:	022d3008 	eoreq	r3, sp, #8
    9f44:	04060000 	streq	r0, [r6], #-0
    9f48:	00000233 	andeq	r0, r0, r3, lsr r2
    9f4c:	0039cb08 	eorseq	ip, r9, r8, lsl #22
    9f50:	61014800 	tstvs	r1, r0, lsl #16
    9f54:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    9f58:	003fb609 	eorseq	fp, pc, r9, lsl #12
    9f5c:	db630100 	blle	18ca364 <_Min_Stack_Size+0x18ca164>
    9f60:	00000002 	andeq	r0, r0, r2
    9f64:	0041b609 	subeq	fp, r1, r9, lsl #12
    9f68:	db640100 	blle	190a370 <_Min_Stack_Size+0x190a170>
    9f6c:	04000002 	streq	r0, [r0], #-2
    9f70:	0100750c 	tsteq	r0, ip, lsl #10
    9f74:	00031c6a 	andeq	r1, r3, sl, ror #24
    9f78:	0e090800 	cdpeq	8, 0, cr0, cr9, cr0, {0}
    9f7c:	01000043 	tsteq	r0, r3, asr #32
    9f80:	0001d16c 	andeq	sp, r1, ip, ror #2
    9f84:	4f091000 	svcmi	0x00091000
    9f88:	01000041 	tsteq	r0, r1, asr #32
    9f8c:	0001d16d 	andeq	sp, r1, sp, ror #2
    9f90:	90092400 	andls	r2, r9, r0, lsl #8
    9f94:	01000042 	tsteq	r0, r2, asr #32
    9f98:	0001c66f 	andeq	ip, r1, pc, ror #12
    9f9c:	ed093800 	stc	8, cr3, [r9, #-0]
    9fa0:	0100003f 	tsteq	r0, pc, lsr r0
    9fa4:	0000dd70 	andeq	sp, r0, r0, ror sp
    9fa8:	66093c00 	strvs	r3, [r9], -r0, lsl #24
    9fac:	01000040 	tsteq	r0, r0, asr #32
    9fb0:	0000dd71 	andeq	sp, r0, r1, ror sp
    9fb4:	35094000 	strcc	r4, [r9, #-0]
    9fb8:	01000043 	tsteq	r0, r3, asr #32
    9fbc:	00033b73 	andeq	r3, r3, r3, ror fp
    9fc0:	71094400 	tstvc	r9, r0, lsl #8
    9fc4:	01000040 	tsteq	r0, r0, asr #32
    9fc8:	00033b74 	andeq	r3, r3, r4, ror fp
    9fcc:	08004500 	stmdaeq	r0, {r8, sl, lr}
    9fd0:	000042db 	ldrdeq	r4, [r0], -fp
    9fd4:	db430108 	blle	10ca3fc <_Min_Stack_Size+0x10ca1fc>
    9fd8:	09000002 	stmdbeq	r0, {r1}
    9fdc:	00003f67 	andeq	r3, r0, r7, ror #30
    9fe0:	02db4501 	sbcseq	r4, fp, #4194304	; 0x400000
    9fe4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    9fe8:	000041eb 	andeq	r4, r0, fp, ror #3
    9fec:	02db4601 	sbcseq	r4, fp, #1048576	; 0x100000
    9ff0:	00040000 	andeq	r0, r4, r0
    9ff4:	00b10406 	adcseq	r0, r1, r6, lsl #8
    9ff8:	cb020000 	blgt	8a000 <_Min_Stack_Size+0x89e00>
    9ffc:	01000042 	tsteq	r0, r2, asr #32
    a000:	0002b647 	andeq	fp, r2, r7, asr #12
    a004:	411f0800 	tstmi	pc, r0, lsl #16
    a008:	01080000 	mrseq	r0, (UNDEF: 8)
    a00c:	00031149 	andeq	r1, r3, r9, asr #2
    a010:	49f80900 	ldmibmi	r8!, {r8, fp}^
    a014:	4b010000 	blmi	4a01c <_Min_Stack_Size+0x49e1c>
    a018:	000001dc 	ldrdeq	r0, [r0], -ip
    a01c:	40ae0900 	adcmi	r0, lr, r0, lsl #18
    a020:	4c010000 	stcmi	0, cr0, [r1], {-0}
    a024:	000000dd 	ldrdeq	r0, [r0], -sp
    a028:	31020004 	tstcc	r2, r4
    a02c:	0100003f 	tsteq	r0, pc, lsr r0
    a030:	0002ec4d 	andeq	lr, r2, sp, asr #24
    a034:	01080d00 	tsteq	r8, r0, lsl #26
    a038:	00033b66 	andeq	r3, r3, r6, ror #22
    a03c:	41960e00 	orrsmi	r0, r6, r0, lsl #28
    a040:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    a044:	000002e1 	andeq	r0, r0, r1, ror #5
    a048:	003ed10e 	eorseq	sp, lr, lr, lsl #2
    a04c:	11690100 	cmnne	r9, r0, lsl #2
    a050:	00000003 	andeq	r0, r0, r3
    a054:	0000b10a 	andeq	fp, r0, sl, lsl #2
    a058:	405f0200 	subsmi	r0, pc, r0, lsl #4
    a05c:	83010000 	movwhi	r0, #4096	; 0x1000
    a060:	00000233 	andeq	r0, r0, r3, lsr r2
    a064:	0040f402 	subeq	pc, r0, r2, lsl #8
    a068:	40870100 	addmi	r0, r7, r0, lsl #2
    a06c:	0f000003 	svceq	0x00000003
    a070:	00004322 	andeq	r4, r0, r2, lsr #6
    a074:	00c7cf02 	sbceq	ip, r7, r2, lsl #30
    a078:	7d030000 	stcvc	0, cr0, [r3, #-0]
    a07c:	10000003 	andne	r0, r0, r3
    a080:	000040e2 	andeq	r4, r0, r2, ror #1
    a084:	00c7d102 	sbceq	sp, r7, r2, lsl #2
    a088:	1b100000 	blne	40a090 <_Min_Stack_Size+0x409e90>
    a08c:	02000038 	andeq	r0, r0, #56	; 0x38
    a090:	0000c7d1 	ldrdeq	ip, [r0], -r1
    a094:	7d110000 	ldcvc	0, cr0, [r1, #-0]
    a098:	0200003f 	andeq	r0, r0, #63	; 0x3f
    a09c:	039503e3 	orrseq	r0, r5, #-1946157053	; 0x8c000003
    a0a0:	17120000 	ldrne	r0, [r2, -r0]
    a0a4:	02000042 	andeq	r0, r0, #66	; 0x42
    a0a8:	0000c7e3 	andeq	ip, r0, r3, ror #15
    a0ac:	66130000 	ldrvs	r0, [r3], -r0
    a0b0:	0100003e 	tsteq	r0, lr, lsr r0
    a0b4:	0000d2ff 	strdeq	sp, [r0], -pc	; <UNPREDICTABLE>
    a0b8:	007f3000 	rsbseq	r3, pc, r0
    a0bc:	0000b408 	andeq	fp, r0, r8, lsl #8
    a0c0:	da9c0100 	ble	fe70a4c8 <BootRAM+0xd67ac69>
    a0c4:	14000003 	strne	r0, [r0], #-3
    a0c8:	00004196 	muleq	r0, r6, r1
    a0cc:	0222ff01 	eoreq	pc, r2, #1, 30
    a0d0:	91020000 	mrsls	r0, (UNDEF: 2)
    a0d4:	40a4146c 	adcmi	r1, r4, ip, ror #8
    a0d8:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    a0dc:	000000d2 	ldrdeq	r0, [r0], -r2
    a0e0:	15689102 	strbne	r9, [r8, #-258]!	; 0xfffffefe
    a0e4:	00004195 	muleq	r0, r5, r1
    a0e8:	e0010101 	and	r0, r1, r1, lsl #2
    a0ec:	02000003 	andeq	r0, r0, #3
    a0f0:	06007491 			; <UNDEFINED> instruction: 0x06007491
    a0f4:	00034b04 	andeq	r4, r3, r4, lsl #22
    a0f8:	03da1600 	bicseq	r1, sl, #0, 12
    a0fc:	8f170000 	svchi	0x00170000
    a100:	01000040 	tsteq	r0, r0, asr #32
    a104:	02220170 	eoreq	r0, r2, #112, 2
    a108:	7fe40000 	svcvc	0x00e40000
    a10c:	005c0800 	subseq	r0, ip, r0, lsl #16
    a110:	9c010000 	stcls	0, cr0, [r1], {-0}
    a114:	0000045a 	andeq	r0, r0, sl, asr r4
    a118:	00418718 	subeq	r8, r1, r8, lsl r7
    a11c:	01700100 	cmneq	r0, r0, lsl #2
    a120:	0000045a 	andeq	r0, r0, sl, asr r4
    a124:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
    a128:	00004066 	andeq	r4, r0, r6, rrx
    a12c:	5a017001 	bpl	66138 <_Min_Stack_Size+0x65f38>
    a130:	02000004 	andeq	r0, r0, #4
    a134:	35186091 	ldrcc	r6, [r8, #-145]	; 0xffffff6f
    a138:	01000040 	tsteq	r0, r0, asr #32
    a13c:	045f0170 	ldrbeq	r0, [pc], #-368	; a144 <_Min_Stack_Size+0x9f44>
    a140:	91020000 	mrsls	r0, (UNDEF: 2)
    a144:	40a3155f 	adcmi	r1, r3, pc, asr r5
    a148:	72010000 	andvc	r0, r1, #0
    a14c:	0003da01 	andeq	sp, r3, r1, lsl #20
    a150:	70910200 	addsvc	r0, r1, r0, lsl #4
    a154:	00416615 	subeq	r6, r1, r5, lsl r6
    a158:	01730100 	cmneq	r3, r0, lsl #2
    a15c:	00000021 	andeq	r0, r0, r1, lsr #32
    a160:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    a164:	00003fbd 			; <UNDEFINED> instruction: 0x00003fbd
    a168:	f3017401 	vshl.u8	d7, d1, d1
    a16c:	02000000 	andeq	r0, r0, #0
    a170:	16006c91 			; <UNDEFINED> instruction: 0x16006c91
    a174:	000000dd 	ldrdeq	r0, [r0], -sp
    a178:	0000bc16 	andeq	fp, r0, r6, lsl ip
    a17c:	40791900 	rsbsmi	r1, r9, r0, lsl #18
    a180:	ad010000 	stcge	0, cr0, [r1, #-0]
    a184:	00804001 	addeq	r4, r0, r1
    a188:	00003e08 	andeq	r3, r0, r8, lsl #28
    a18c:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
    a190:	18000004 	stmdane	r0, {r2}
    a194:	00004187 	andeq	r4, r0, r7, lsl #3
    a198:	5a01ad01 	bpl	755a4 <_Min_Stack_Size+0x753a4>
    a19c:	02000004 	andeq	r0, r0, #4
    a1a0:	66187491 			; <UNDEFINED> instruction: 0x66187491
    a1a4:	01000040 	tsteq	r0, r0, asr #32
    a1a8:	045a01ad 	ldrbeq	r0, [sl], #-429	; 0xfffffe53
    a1ac:	91020000 	mrsls	r0, (UNDEF: 2)
    a1b0:	3fbd1870 	svccc	0x00bd1870
    a1b4:	ad010000 	stcge	0, cr0, [r1, #-0]
    a1b8:	0000f301 	andeq	pc, r0, r1, lsl #6
    a1bc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a1c0:	00403518 	subeq	r3, r0, r8, lsl r5
    a1c4:	01ad0100 			; <UNDEFINED> instruction: 0x01ad0100
    a1c8:	0000045f 	andeq	r0, r0, pc, asr r4
    a1cc:	186b9102 	stmdane	fp!, {r1, r8, ip, pc}^
    a1d0:	000040a3 	andeq	r4, r0, r3, lsr #1
    a1d4:	da01ad01 	ble	755e0 <_Min_Stack_Size+0x753e0>
    a1d8:	02000003 	andeq	r0, r0, #3
    a1dc:	19000091 	stmdbne	r0, {r0, r4, r7}
    a1e0:	00004226 	andeq	r4, r0, r6, lsr #4
    a1e4:	8001d901 	andhi	sp, r1, r1, lsl #18
    a1e8:	34080080 	strcc	r0, [r8], #-128	; 0xffffff80
    a1ec:	01000000 	mrseq	r0, (UNDEF: 0)
    a1f0:	0004ec9c 	muleq	r4, ip, ip
    a1f4:	40a31800 	adcmi	r1, r3, r0, lsl #16
    a1f8:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    a1fc:	0003da01 	andeq	sp, r3, r1, lsl #20
    a200:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    a204:	3fdb1700 	svccc	0x00db1700
    a208:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    a20c:	00022201 	andeq	r2, r2, r1, lsl #4
    a210:	0080b400 	addeq	fp, r0, r0, lsl #8
    a214:	00003008 	andeq	r3, r0, r8
    a218:	439c0100 	orrsmi	r0, ip, #0, 2
    a21c:	18000005 	stmdane	r0, {r0, r2}
    a220:	00004035 	andeq	r4, r0, r5, lsr r0
    a224:	5f01f701 	svcpl	0x0001f701
    a228:	02000004 	andeq	r0, r0, #4
    a22c:	a4156791 	ldrge	r6, [r5], #-1937	; 0xfffff86f
    a230:	01000040 	tsteq	r0, r0, asr #32
    a234:	022201f9 	eoreq	r0, r2, #1073741886	; 0x4000003e
    a238:	91020000 	mrsls	r0, (UNDEF: 2)
    a23c:	3fcd156c 	svccc	0x00cd156c
    a240:	fa010000 	blx	4a248 <_Min_Stack_Size+0x4a048>
    a244:	00045a01 	andeq	r5, r4, r1, lsl #20
    a248:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    a24c:	0041f615 	subeq	pc, r1, r5, lsl r6	; <UNPREDICTABLE>
    a250:	01fa0100 	mvnseq	r0, r0, lsl #2
    a254:	0000045a 	andeq	r0, r0, sl, asr r4
    a258:	00709102 	rsbseq	r9, r0, r2, lsl #2
    a25c:	0042b917 	subeq	fp, r2, r7, lsl r9
    a260:	02eb0100 	rsceq	r0, fp, #0, 2
    a264:	000000d2 	ldrdeq	r0, [r0], -r2
    a268:	080080e4 	stmdaeq	r0, {r2, r5, r6, r7, pc}
    a26c:	00000154 	andeq	r0, r0, r4, asr r1
    a270:	05d69c01 	ldrbeq	r9, [r6, #3073]	; 0xc01
    a274:	96180000 	ldrls	r0, [r8], -r0
    a278:	01000041 	tsteq	r0, r1, asr #32
    a27c:	022202eb 	eoreq	r0, r2, #-1342177266	; 0xb000000e
    a280:	91020000 	mrsls	r0, (UNDEF: 2)
    a284:	4141185c 	cmpmi	r1, ip, asr r8
    a288:	eb010000 	bl	4a290 <_Min_Stack_Size+0x4a090>
    a28c:	0005d602 	andeq	sp, r5, r2, lsl #12
    a290:	58910200 	ldmpl	r1, {r9}
    a294:	004b4918 	subeq	r4, fp, r8, lsl r9
    a298:	02eb0100 	rsceq	r0, fp, #0, 2
    a29c:	000000e8 	andeq	r0, r0, r8, ror #1
    a2a0:	18549102 	ldmdane	r4, {r1, r8, ip, pc}^
    a2a4:	00004272 	andeq	r4, r0, r2, ror r2
    a2a8:	db02eb01 	blle	c4eb4 <_Min_Stack_Size+0xc4cb4>
    a2ac:	02000005 	andeq	r0, r0, #5
    a2b0:	39155091 	ldmdbcc	r5, {r0, r4, r7, ip, lr}
    a2b4:	01000042 	tsteq	r0, r2, asr #32
    a2b8:	00d202ed 	sbcseq	r0, r2, sp, ror #5
    a2bc:	91020000 	mrsls	r0, (UNDEF: 2)
    a2c0:	3f6e1574 	svccc	0x006e1574
    a2c4:	ed010000 	stc	0, cr0, [r1, #-0]
    a2c8:	0000d202 	andeq	sp, r0, r2, lsl #4
    a2cc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a2d0:	00485f15 	subeq	r5, r8, r5, lsl pc
    a2d4:	02ee0100 	rsceq	r0, lr, #0, 2
    a2d8:	00000217 	andeq	r0, r0, r7, lsl r2
    a2dc:	15649102 	strbne	r9, [r4, #-258]!	; 0xfffffefe
    a2e0:	00004195 	muleq	r0, r5, r1
    a2e4:	e002ef01 	and	lr, r2, r1, lsl #30
    a2e8:	02000003 	andeq	r0, r0, #3
    a2ec:	16007091 			; <UNDEFINED> instruction: 0x16007091
    a2f0:	000000aa 	andeq	r0, r0, sl, lsr #1
    a2f4:	0000d216 	andeq	sp, r0, r6, lsl r2
    a2f8:	419d1700 	orrsmi	r1, sp, r0, lsl #14
    a2fc:	bd010000 	stclt	0, cr0, [r1, #-0]
    a300:	0000d203 	andeq	sp, r0, r3, lsl #4
    a304:	00000000 	andeq	r0, r0, r0
    a308:	0000ae00 	andeq	sl, r0, r0, lsl #28
    a30c:	c99c0100 	ldmibgt	ip, {r8}
    a310:	18000006 	stmdane	r0, {r1, r2}
    a314:	00004196 	muleq	r0, r6, r1
    a318:	2203bd01 	andcs	fp, r3, #1, 26	; 0x40
    a31c:	02000002 	andeq	r0, r0, #2
    a320:	41185491 			; <UNDEFINED> instruction: 0x41185491
    a324:	01000041 	tsteq	r0, r1, asr #32
    a328:	05d603bd 	ldrbeq	r0, [r6, #957]	; 0x3bd
    a32c:	91020000 	mrsls	r0, (UNDEF: 2)
    a330:	42e91850 	rscmi	r1, r9, #80, 16	; 0x500000
    a334:	bd010000 	stclt	0, cr0, [r1, #-0]
    a338:	0006cf03 	andeq	ip, r6, r3, lsl #30
    a33c:	4c910200 	lfmmi	f0, 4, [r1], {0}
    a340:	00427218 	subeq	r7, r2, r8, lsl r2
    a344:	03bd0100 			; <UNDEFINED> instruction: 0x03bd0100
    a348:	000005db 	ldrdeq	r0, [r0], -fp
    a34c:	15489102 	strbne	r9, [r8, #-258]	; 0xfffffefe
    a350:	00004255 	andeq	r4, r0, r5, asr r2
    a354:	d203bf01 	andle	fp, r3, #1, 30
    a358:	02000000 	andeq	r0, r0, #0
    a35c:	a2157491 	andsge	r7, r5, #-1862270976	; 0x91000000
    a360:	01000042 	tsteq	r0, r2, asr #32
    a364:	00dd03c0 	sbcseq	r0, sp, r0, asr #7
    a368:	91020000 	mrsls	r0, (UNDEF: 2)
    a36c:	41951568 	orrsmi	r1, r5, r8, ror #10
    a370:	c1010000 	mrsgt	r0, (UNDEF: 1)
    a374:	0003e003 	andeq	lr, r3, r3
    a378:	70910200 	addsvc	r0, r1, r0, lsl #4
    a37c:	0003561a 	andeq	r5, r3, sl, lsl r6
    a380:	00000000 	andeq	r0, r0, r0
    a384:	00001a00 	andeq	r1, r0, r0, lsl #20
    a388:	03dc0100 	bicseq	r0, ip, #0, 2
    a38c:	00000692 	muleq	r0, r2, r6
    a390:	0000001b 	andeq	r0, r0, fp, lsl r0
    a394:	00001a00 	andeq	r1, r0, r0, lsl #20
    a398:	03661c00 	cmneq	r6, #0, 24
    a39c:	91020000 	mrsls	r0, (UNDEF: 2)
    a3a0:	03711c60 	cmneq	r1, #96, 24	; 0x6000
    a3a4:	91020000 	mrsls	r0, (UNDEF: 2)
    a3a8:	1d00005c 	stcne	0, cr0, [r0, #-368]	; 0xfffffe90
    a3ac:	00000000 	andeq	r0, r0, r0
    a3b0:	00000054 	andeq	r0, r0, r4, asr r0
    a3b4:	000006af 	andeq	r0, r0, pc, lsr #13
    a3b8:	00407115 	subeq	r7, r0, r5, lsl r1
    a3bc:	03e00100 	mvneq	r0, #0, 2
    a3c0:	000006d4 	ldrdeq	r0, [r0], -r4
    a3c4:	00679102 	rsbeq	r9, r7, r2, lsl #2
    a3c8:	00037d1e 	andeq	r7, r3, lr, lsl sp
    a3cc:	00000000 	andeq	r0, r0, r0
    a3d0:	00000600 	andeq	r0, r0, r0, lsl #12
    a3d4:	044e0100 	strbeq	r0, [lr], #-256	; 0xffffff00
    a3d8:	0003891f 	andeq	r8, r3, pc, lsl r9
    a3dc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a3e0:	04060000 	streq	r0, [r6], #-0
    a3e4:	000000d2 	ldrdeq	r0, [r0], -r2
    a3e8:	0006c916 	andeq	ip, r6, r6, lsl r9
    a3ec:	00b11600 	adcseq	r1, r1, r0, lsl #12
    a3f0:	c0170000 	andsgt	r0, r7, r0
    a3f4:	01000041 	tsteq	r0, r1, asr #32
    a3f8:	00d20454 	sbcseq	r0, r2, r4, asr r4
    a3fc:	00000000 	andeq	r0, r0, r0
    a400:	00a60000 	adceq	r0, r6, r0
    a404:	9c010000 	stcls	0, cr0, [r1], {-0}
    a408:	000007bd 			; <UNDEFINED> instruction: 0x000007bd
    a40c:	00419618 	subeq	r9, r1, r8, lsl r6
    a410:	04540100 	ldrbeq	r0, [r4], #-256	; 0xffffff00
    a414:	00000222 	andeq	r0, r0, r2, lsr #4
    a418:	18549102 	ldmdane	r4, {r1, r8, ip, pc}^
    a41c:	000042e9 	andeq	r4, r0, r9, ror #5
    a420:	cf045401 	svcgt	0x00045401
    a424:	02000006 	andeq	r0, r0, #6
    a428:	55155091 	ldrpl	r5, [r5, #-145]	; 0xffffff6f
    a42c:	01000042 	tsteq	r0, r2, asr #32
    a430:	00d20456 	sbcseq	r0, r2, r6, asr r4
    a434:	91020000 	mrsls	r0, (UNDEF: 2)
    a438:	42a21574 	adcmi	r1, r2, #116, 10	; 0x1d000000
    a43c:	57010000 	strpl	r0, [r1, -r0]
    a440:	0000dd04 	andeq	sp, r0, r4, lsl #26
    a444:	68910200 	ldmvs	r1, {r9}
    a448:	00419515 	subeq	r9, r1, r5, lsl r5
    a44c:	04580100 	ldrbeq	r0, [r8], #-256	; 0xffffff00
    a450:	000003e0 	andeq	r0, r0, r0, ror #7
    a454:	1a709102 	bne	1c2e864 <_Min_Stack_Size+0x1c2e664>
    a458:	00000356 	andeq	r0, r0, r6, asr r3
    a45c:	00000000 	andeq	r0, r0, r0
    a460:	0000001a 	andeq	r0, r0, sl, lsl r0
    a464:	6d047b01 	vstrvs	d7, [r4, #-4]
    a468:	1b000007 	blne	a48c <_Min_Stack_Size+0xa28c>
    a46c:	00000000 	andeq	r0, r0, r0
    a470:	0000001a 	andeq	r0, r0, sl, lsl r0
    a474:	0003661c 	andeq	r6, r3, ip, lsl r6
    a478:	5c910200 	lfmpl	f0, 4, [r1], {0}
    a47c:	0003711c 	andeq	r7, r3, ip, lsl r1
    a480:	58910200 	ldmpl	r1, {r9}
    a484:	001d0000 	andseq	r0, sp, r0
    a488:	6c000000 	stcvs	0, cr0, [r0], {-0}
    a48c:	a3000000 	movwge	r0, #0
    a490:	15000007 	strne	r0, [r0, #-7]
    a494:	00004290 	muleq	r0, r0, r2
    a498:	5a047d01 	bpl	1298a4 <_Min_Stack_Size+0x1296a4>
    a49c:	02000004 	andeq	r0, r0, #4
    a4a0:	001b6491 	mulseq	fp, r1, r4
    a4a4:	52000000 	andpl	r0, r0, #0
    a4a8:	15000000 	strne	r0, [r0, #-0]
    a4ac:	00004071 	andeq	r4, r0, r1, ror r0
    a4b0:	d4048401 	strle	r8, [r4], #-1025	; 0xfffffbff
    a4b4:	02000006 	andeq	r0, r0, #6
    a4b8:	00006391 	muleq	r0, r1, r3
    a4bc:	00037d1e 	andeq	r7, r3, lr, lsl sp
    a4c0:	00000000 	andeq	r0, r0, r0
    a4c4:	00000600 	andeq	r0, r0, r0, lsl #12
    a4c8:	04f30100 	ldrbteq	r0, [r3], #256	; 0x100
    a4cc:	0003891f 	andeq	r8, r3, pc, lsl r9
    a4d0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a4d4:	79170000 	ldmdbvc	r7, {}	; <UNPREDICTABLE>
    a4d8:	0100003e 	tsteq	r0, lr, lsr r0
    a4dc:	00d204f9 	ldrsheq	r0, [r2], #73	; 0x49
    a4e0:	00000000 	andeq	r0, r0, r0
    a4e4:	01440000 	mrseq	r0, (UNDEF: 68)
    a4e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    a4ec:	0000084b 	andeq	r0, r0, fp, asr #16
    a4f0:	00419618 	subeq	r9, r1, r8, lsl r6
    a4f4:	04f90100 	ldrbteq	r0, [r9], #256	; 0x100
    a4f8:	00000222 	andeq	r0, r0, r2, lsr #4
    a4fc:	185c9102 	ldmdane	ip, {r1, r8, ip, pc}^
    a500:	00003fad 	andeq	r3, r0, sp, lsr #31
    a504:	4b04f901 	blmi	148910 <_Min_Stack_Size+0x148710>
    a508:	02000008 	andeq	r0, r0, #8
    a50c:	49185891 	ldmdbmi	r8, {r0, r4, r7, fp, ip, lr}
    a510:	0100004b 	tsteq	r0, fp, asr #32
    a514:	00e804f9 	strdeq	r0, [r8], #73	; 0x49	; <UNPREDICTABLE>
    a518:	91020000 	mrsls	r0, (UNDEF: 2)
    a51c:	42391554 	eorsmi	r1, r9, #84, 10	; 0x15000000
    a520:	fb010000 	blx	4a52a <_Min_Stack_Size+0x4a32a>
    a524:	0000d204 	andeq	sp, r0, r4, lsl #4
    a528:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    a52c:	00485f15 	subeq	r5, r8, r5, lsl pc
    a530:	04fc0100 	ldrbteq	r0, [ip], #256	; 0x100
    a534:	00000217 	andeq	r0, r0, r7, lsl r2
    a538:	15649102 	strbne	r9, [r4, #-258]!	; 0xfffffefe
    a53c:	00004195 	muleq	r0, r5, r1
    a540:	e004fd01 	and	pc, r4, r1, lsl #26
    a544:	02000003 	andeq	r0, r0, #3
    a548:	001b7091 	mulseq	fp, r1, r0
    a54c:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    a550:	15000000 	strne	r0, [r0, #-0]
    a554:	00004290 	muleq	r0, r0, r2
    a558:	5a051501 	bpl	14f964 <_Min_Stack_Size+0x14f764>
    a55c:	02000004 	andeq	r0, r0, #4
    a560:	00006c91 	muleq	r0, r1, ip
    a564:	0000a116 	andeq	sl, r0, r6, lsl r1
    a568:	412d1700 			; <UNDEFINED> instruction: 0x412d1700
    a56c:	86010000 	strhi	r0, [r1], -r0
    a570:	0000d205 	andeq	sp, r0, r5, lsl #4
    a574:	00823800 	addeq	r3, r2, r0, lsl #16
    a578:	00019008 	andeq	r9, r1, r8
    a57c:	fb9c0100 	blx	fe70a986 <BootRAM+0xd67b127>
    a580:	18000008 	stmdane	r0, {r3}
    a584:	00004196 	muleq	r0, r6, r1
    a588:	22058601 	andcs	r8, r5, #1048576	; 0x100000
    a58c:	02000002 	andeq	r0, r0, #2
    a590:	49185491 	ldmdbmi	r8, {r0, r4, r7, sl, ip, lr}
    a594:	0100004b 	tsteq	r0, fp, asr #32
    a598:	00e80586 	rsceq	r0, r8, r6, lsl #11
    a59c:	91020000 	mrsls	r0, (UNDEF: 2)
    a5a0:	42391550 	eorsmi	r1, r9, #80, 10	; 0x14000000
    a5a4:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    a5a8:	0000d205 	andeq	sp, r0, r5, lsl #4
    a5ac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    a5b0:	00485f15 	subeq	r5, r8, r5, lsl pc
    a5b4:	05890100 	streq	r0, [r9, #256]	; 0x100
    a5b8:	00000217 	andeq	r0, r0, r7, lsl r2
    a5bc:	155c9102 	ldrbne	r9, [ip, #-258]	; 0xfffffefe
    a5c0:	00004195 	muleq	r0, r5, r1
    a5c4:	e0058a01 	and	r8, r5, r1, lsl #20
    a5c8:	02000003 	andeq	r0, r0, #3
    a5cc:	5d156c91 	ldcpl	12, cr6, [r5, #-580]	; 0xfffffdbc
    a5d0:	01000042 	tsteq	r0, r2, asr #32
    a5d4:	00d2058d 	sbcseq	r0, r2, sp, lsl #11
    a5d8:	91020000 	mrsls	r0, (UNDEF: 2)
    a5dc:	82521d70 	subshi	r1, r2, #112, 26	; 0x1c00
    a5e0:	00780800 	rsbseq	r0, r8, r0, lsl #16
    a5e4:	08e10000 	stmiaeq	r1!, {}^	; <UNPREDICTABLE>
    a5e8:	55150000 	ldrpl	r0, [r5, #-0]
    a5ec:	0100003e 	tsteq	r0, lr, lsr r0
    a5f0:	045a05a8 	ldrbeq	r0, [sl], #-1448	; 0xfffffa58
    a5f4:	91020000 	mrsls	r0, (UNDEF: 2)
    a5f8:	a21b0068 	andsge	r0, fp, #104	; 0x68
    a5fc:	14080083 	strne	r0, [r8], #-131	; 0xffffff7d
    a600:	15000000 	strne	r0, [r0, #-0]
    a604:	00003eb8 			; <UNDEFINED> instruction: 0x00003eb8
    a608:	dd064501 	cfstr32le	mvfx4, [r6, #-4]
    a60c:	02000000 	andeq	r0, r0, #0
    a610:	00006491 	muleq	r0, r1, r4
    a614:	00430317 	subeq	r0, r3, r7, lsl r3
    a618:	06600100 	strbteq	r0, [r0], -r0, lsl #2
    a61c:	000000d2 	ldrdeq	r0, [r0], -r2
    a620:	00000000 	andeq	r0, r0, r0
    a624:	00000148 	andeq	r0, r0, r8, asr #2
    a628:	09989c01 	ldmibeq	r8, {r0, sl, fp, ip, pc}
    a62c:	96180000 	ldrls	r0, [r8], -r0
    a630:	01000041 	tsteq	r0, r1, asr #32
    a634:	02220660 	eoreq	r0, r2, #96, 12	; 0x6000000
    a638:	91020000 	mrsls	r0, (UNDEF: 2)
    a63c:	3fad185c 	svccc	0x00ad185c
    a640:	60010000 	andvs	r0, r1, r0
    a644:	00084b06 	andeq	r4, r8, r6, lsl #22
    a648:	58910200 	ldmpl	r1, {r9}
    a64c:	004b4918 	subeq	r4, fp, r8, lsl r9
    a650:	06600100 	strbteq	r0, [r0], -r0, lsl #2
    a654:	000000e8 	andeq	r0, r0, r8, ror #1
    a658:	15549102 	ldrbne	r9, [r4, #-258]	; 0xfffffefe
    a65c:	00004239 	andeq	r4, r0, r9, lsr r2
    a660:	d2066201 	andle	r6, r6, #268435456	; 0x10000000
    a664:	02000000 	andeq	r0, r0, #0
    a668:	5f157491 	svcpl	0x00157491
    a66c:	01000048 	tsteq	r0, r8, asr #32
    a670:	02170663 	andseq	r0, r7, #103809024	; 0x6300000
    a674:	91020000 	mrsls	r0, (UNDEF: 2)
    a678:	3f411560 	svccc	0x00411560
    a67c:	64010000 	strvs	r0, [r1], #-0
    a680:	0002db06 	andeq	sp, r2, r6, lsl #22
    a684:	68910200 	ldmvs	r1, {r9}
    a688:	00419515 	subeq	r9, r1, r5, lsl r5
    a68c:	06650100 	strbteq	r0, [r5], -r0, lsl #2
    a690:	000003e0 	andeq	r0, r0, r0, ror #7
    a694:	1b709102 	blne	1c2eaa4 <_Min_Stack_Size+0x1c2e8a4>
    a698:	00000000 	andeq	r0, r0, r0
    a69c:	00000072 	andeq	r0, r0, r2, ror r0
    a6a0:	00429015 	subeq	r9, r2, r5, lsl r0
    a6a4:	067d0100 	ldrbteq	r0, [sp], -r0, lsl #2
    a6a8:	0000045a 	andeq	r0, r0, sl, asr r4
    a6ac:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    a6b0:	3f1c1700 	svccc	0x001c1700
    a6b4:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    a6b8:	0000d206 	andeq	sp, r0, r6, lsl #4
    a6bc:	00000000 	andeq	r0, r0, r0
    a6c0:	0000ac00 	andeq	sl, r0, r0, lsl #24
    a6c4:	8b9c0100 	blhi	fe70aacc <BootRAM+0xd67b26d>
    a6c8:	1800000a 	stmdane	r0, {r1, r3}
    a6cc:	00004196 	muleq	r0, r6, r1
    a6d0:	2206f501 	andcs	pc, r6, #4194304	; 0x400000
    a6d4:	02000002 	andeq	r0, r0, #2
    a6d8:	ad185491 	cfldrsge	mvf5, [r8, #-580]	; 0xfffffdbc
    a6dc:	0100003f 	tsteq	r0, pc, lsr r0
    a6e0:	084b06f5 	stmdaeq	fp, {r0, r2, r4, r5, r6, r7, r9, sl}^
    a6e4:	91020000 	mrsls	r0, (UNDEF: 2)
    a6e8:	42e91850 	rscmi	r1, r9, #80, 16	; 0x500000
    a6ec:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    a6f0:	0006cf06 	andeq	ip, r6, r6, lsl #30
    a6f4:	4c910200 	lfmmi	f0, 4, [r1], {0}
    a6f8:	00425515 	subeq	r5, r2, r5, lsl r5
    a6fc:	06f70100 	ldrbteq	r0, [r7], r0, lsl #2
    a700:	000000d2 	ldrdeq	r0, [r0], -r2
    a704:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    a708:	000042a2 	andeq	r4, r0, r2, lsr #5
    a70c:	dd06f801 	stcle	8, cr15, [r6, #-4]
    a710:	02000000 	andeq	r0, r0, #0
    a714:	95156891 	ldrls	r6, [r5, #-2193]	; 0xfffff76f
    a718:	01000041 	tsteq	r0, r1, asr #32
    a71c:	03e006f9 	mvneq	r0, #261095424	; 0xf900000
    a720:	91020000 	mrsls	r0, (UNDEF: 2)
    a724:	03561a70 	cmpeq	r6, #112, 20	; 0x70000
    a728:	00000000 	andeq	r0, r0, r0
    a72c:	001a0000 	andseq	r0, sl, r0
    a730:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    a734:	000a3b07 	andeq	r3, sl, r7, lsl #22
    a738:	00001b00 	andeq	r1, r0, r0, lsl #22
    a73c:	001a0000 	andseq	r0, sl, r0
    a740:	661c0000 	ldrvs	r0, [ip], -r0
    a744:	02000003 	andeq	r0, r0, #3
    a748:	711c5c91 			; <UNDEFINED> instruction: 0x711c5c91
    a74c:	02000003 	andeq	r0, r0, #3
    a750:	00005891 	muleq	r0, r1, r8
    a754:	0000001d 	andeq	r0, r0, sp, lsl r0
    a758:	00007000 	andeq	r7, r0, r0
    a75c:	000a7100 	andeq	r7, sl, r0, lsl #2
    a760:	42901500 	addsmi	r1, r0, #0, 10
    a764:	10010000 	andne	r0, r1, r0
    a768:	00045a07 	andeq	r5, r4, r7, lsl #20
    a76c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    a770:	0000001b 	andeq	r0, r0, fp, lsl r0
    a774:	00005a00 	andeq	r5, r0, r0, lsl #20
    a778:	43351500 	teqmi	r5, #0, 10
    a77c:	15010000 	strne	r0, [r1, #-0]
    a780:	0006d407 	andeq	sp, r6, r7, lsl #8
    a784:	63910200 	orrsvs	r0, r1, #0, 4
    a788:	7d1e0000 	ldcvc	0, cr0, [lr, #-0]
    a78c:	00000003 	andeq	r0, r0, r3
    a790:	06000000 	streq	r0, [r0], -r0
    a794:	01000000 	mrseq	r0, (UNDEF: 0)
    a798:	891f074a 	ldmdbhi	pc, {r1, r3, r6, r8, r9, sl}	; <UNPREDICTABLE>
    a79c:	02000003 	andeq	r0, r0, #3
    a7a0:	00006c91 	muleq	r0, r1, ip
    a7a4:	003ef317 	eorseq	pc, lr, r7, lsl r3	; <UNPREDICTABLE>
    a7a8:	07500100 	ldrbeq	r0, [r0, -r0, lsl #2]
    a7ac:	000000d2 	ldrdeq	r0, [r0], -r2
    a7b0:	00000000 	andeq	r0, r0, r0
    a7b4:	00000064 	andeq	r0, r0, r4, rrx
    a7b8:	0b489c01 	bleq	12317c4 <_Min_Stack_Size+0x12315c4>
    a7bc:	96180000 	ldrls	r0, [r8], -r0
    a7c0:	01000041 	tsteq	r0, r1, asr #32
    a7c4:	02220750 	eoreq	r0, r2, #80, 14	; 0x1400000
    a7c8:	91020000 	mrsls	r0, (UNDEF: 2)
    a7cc:	3fad1854 	svccc	0x00ad1854
    a7d0:	50010000 	andpl	r0, r1, r0
    a7d4:	00084b07 	andeq	r4, r8, r7, lsl #22
    a7d8:	50910200 	addspl	r0, r1, r0, lsl #4
    a7dc:	00425515 	subeq	r5, r2, r5, lsl r5
    a7e0:	07520100 	ldrbeq	r0, [r2, -r0, lsl #2]
    a7e4:	000000d2 	ldrdeq	r0, [r0], -r2
    a7e8:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    a7ec:	000042a2 	andeq	r4, r0, r2, lsr #5
    a7f0:	dd075301 	stcle	3, cr5, [r7, #-4]
    a7f4:	02000000 	andeq	r0, r0, #0
    a7f8:	41156891 			; <UNDEFINED> instruction: 0x41156891
    a7fc:	0100003f 	tsteq	r0, pc, lsr r0
    a800:	02db0754 	sbcseq	r0, fp, #84, 14	; 0x1500000
    a804:	91020000 	mrsls	r0, (UNDEF: 2)
    a808:	41951564 	orrsmi	r1, r5, r4, ror #10
    a80c:	55010000 	strpl	r0, [r1, #-0]
    a810:	0003e007 	andeq	lr, r3, r7
    a814:	70910200 	addsvc	r0, r1, r0, lsl #4
    a818:	0003561a 	andeq	r5, r3, sl, lsl r6
    a81c:	00000000 	andeq	r0, r0, r0
    a820:	00001a00 	andeq	r1, r0, r0, lsl #20
    a824:	076b0100 	strbeq	r0, [fp, -r0, lsl #2]!
    a828:	00000b2e 	andeq	r0, r0, lr, lsr #22
    a82c:	0000001b 	andeq	r0, r0, fp, lsl r0
    a830:	00001a00 	andeq	r1, r0, r0, lsl #20
    a834:	03661c00 	cmneq	r6, #0, 24
    a838:	91020000 	mrsls	r0, (UNDEF: 2)
    a83c:	03711c60 	cmneq	r1, #96, 24	; 0x6000
    a840:	91020000 	mrsls	r0, (UNDEF: 2)
    a844:	1e00005c 	mcrne	0, 0, r0, cr0, cr12, {2}
    a848:	0000037d 	andeq	r0, r0, sp, ror r3
    a84c:	00000000 	andeq	r0, r0, r0
    a850:	00000006 	andeq	r0, r0, r6
    a854:	1f078001 	svcne	0x00078001
    a858:	00000389 	andeq	r0, r0, r9, lsl #7
    a85c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    a860:	3edc1700 	cdpcc	7, 13, cr1, cr12, cr0, {0}
    a864:	86010000 	strhi	r0, [r1], -r0
    a868:	0000dd07 	andeq	sp, r0, r7, lsl #26
    a86c:	00000000 	andeq	r0, r0, r0
    a870:	00002000 	andeq	r2, r0, r0
    a874:	819c0100 	orrshi	r0, ip, r0, lsl #2
    a878:	1800000b 	stmdane	r0, {r0, r1, r3}
    a87c:	00004196 	muleq	r0, r6, r1
    a880:	81078601 	tsthi	r7, r1, lsl #12
    a884:	0200000b 	andeq	r0, r0, #11
    a888:	54156c91 	ldrpl	r6, [r5], #-3217	; 0xfffff36f
    a88c:	01000042 	tsteq	r0, r2, asr #32
    a890:	00dd0788 	sbcseq	r0, sp, r8, lsl #15
    a894:	91020000 	mrsls	r0, (UNDEF: 2)
    a898:	22160074 	andscs	r0, r6, #116	; 0x74
    a89c:	17000002 	strne	r0, [r0, -r2]
    a8a0:	00003f05 	andeq	r3, r0, r5, lsl #30
    a8a4:	dd079601 	stcle	6, cr9, [r7, #-4]
    a8a8:	00000000 	andeq	r0, r0, r0
    a8ac:	2a000000 	bcs	a8b4 <_Min_Stack_Size+0xa6b4>
    a8b0:	01000000 	mrseq	r0, (UNDEF: 0)
    a8b4:	000bce9c 	muleq	fp, ip, lr
    a8b8:	41961800 	orrsmi	r1, r6, r0, lsl #16
    a8bc:	96010000 	strls	r0, [r1], -r0
    a8c0:	000b8107 	andeq	r8, fp, r7, lsl #2
    a8c4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a8c8:	00425415 	subeq	r5, r2, r5, lsl r4
    a8cc:	07980100 	ldreq	r0, [r8, r0, lsl #2]
    a8d0:	000000dd 	ldrdeq	r0, [r0], -sp
    a8d4:	15709102 	ldrbne	r9, [r0, #-258]!	; 0xfffffefe
    a8d8:	00004195 	muleq	r0, r5, r1
    a8dc:	e0079901 	and	r9, r7, r1, lsl #18
    a8e0:	02000003 	andeq	r0, r0, #3
    a8e4:	20007491 	mulcs	r0, r1, r4
    a8e8:	00004041 	andeq	r4, r0, r1, asr #32
    a8ec:	dd07a701 	stcle	7, cr10, [r7, #-4]
    a8f0:	00000000 	andeq	r0, r0, r0
    a8f4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    a8f8:	01000000 	mrseq	r0, (UNDEF: 0)
    a8fc:	000c169c 	muleq	ip, ip, r6
    a900:	41961800 	orrsmi	r1, r6, r0, lsl #16
    a904:	a7010000 	strge	r0, [r1, -r0]
    a908:	000b8107 	andeq	r8, fp, r7, lsl #2
    a90c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a910:	00425415 	subeq	r5, r2, r5, lsl r4
    a914:	07a90100 	streq	r0, [r9, r0, lsl #2]!
    a918:	000000dd 	ldrdeq	r0, [r0], -sp
    a91c:	15709102 	ldrbne	r9, [r0, #-258]!	; 0xfffffefe
    a920:	00004195 	muleq	r0, r5, r1
    a924:	e007aa01 	and	sl, r7, r1, lsl #20
    a928:	02000003 	andeq	r0, r0, #3
    a92c:	21007491 			; <UNDEFINED> instruction: 0x21007491
    a930:	00004247 	andeq	r4, r0, r7, asr #4
    a934:	0007b301 	andeq	fp, r7, r1, lsl #6
    a938:	1a000000 	bne	a940 <_Min_Stack_Size+0xa740>
    a93c:	01000000 	mrseq	r0, (UNDEF: 0)
    a940:	000c4b9c 	muleq	ip, ip, fp
    a944:	41961800 	orrsmi	r1, r6, r0, lsl #16
    a948:	b3010000 	movwlt	r0, #4096	; 0x1000
    a94c:	00022207 	andeq	r2, r2, r7, lsl #4
    a950:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a954:	00419515 	subeq	r9, r1, r5, lsl r5
    a958:	07b50100 	ldreq	r0, [r5, r0, lsl #2]!
    a95c:	000003e0 	andeq	r0, r0, r0, ror #7
    a960:	00749102 	rsbseq	r9, r4, r2, lsl #2
    a964:	003ff622 	eorseq	pc, pc, r2, lsr #12
    a968:	07fd0100 	ldrbeq	r0, [sp, r0, lsl #2]!
    a96c:	000000dd 	ldrdeq	r0, [r0], -sp
    a970:	080083c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, pc}
    a974:	0000002e 	andeq	r0, r0, lr, lsr #32
    a978:	0c849c01 	stceq	12, cr9, [r4], {1}
    a97c:	95180000 	ldrls	r0, [r8, #-0]
    a980:	01000041 	tsteq	r0, r1, asr #32
    a984:	0c8f07fd 	stceq	7, cr0, [pc], {253}	; 0xfd
    a988:	91020000 	mrsls	r0, (UNDEF: 2)
    a98c:	3f8d156c 	svccc	0x008d156c
    a990:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    a994:	0000dd07 	andeq	sp, r0, r7, lsl #26
    a998:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    a99c:	8a040600 	bhi	10c1a4 <_Min_Stack_Size+0x10bfa4>
    a9a0:	1600000c 	strne	r0, [r0], -ip
    a9a4:	0000034b 	andeq	r0, r0, fp, asr #6
    a9a8:	000c8416 	andeq	r8, ip, r6, lsl r4
    a9ac:	3e9b2300 	cdpcc	3, 9, cr2, cr11, cr0, {0}
    a9b0:	16010000 	strne	r0, [r1], -r0
    a9b4:	0000d208 	andeq	sp, r0, r8, lsl #4
    a9b8:	0083f800 	addeq	pc, r3, r0, lsl #16
    a9bc:	0000d408 	andeq	sp, r0, r8, lsl #8
    a9c0:	fa9c0100 	blx	fe70adc8 <BootRAM+0xd67b569>
    a9c4:	1800000c 	stmdane	r0, {r2, r3}
    a9c8:	00004195 	muleq	r0, r5, r1
    a9cc:	e0081601 	and	r1, r8, r1, lsl #12
    a9d0:	02000003 	andeq	r0, r0, #3
    a9d4:	41186c91 			; <UNDEFINED> instruction: 0x41186c91
    a9d8:	01000041 	tsteq	r0, r1, asr #32
    a9dc:	00aa0816 	adceq	r0, sl, r6, lsl r8
    a9e0:	91020000 	mrsls	r0, (UNDEF: 2)
    a9e4:	3eae1868 	cdpcc	8, 10, cr1, cr14, cr8, {3}
    a9e8:	16010000 	strne	r0, [r1], -r0
    a9ec:	0005db08 	andeq	sp, r5, r8, lsl #22
    a9f0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    a9f4:	00425515 	subeq	r5, r2, r5, lsl r5
    a9f8:	08180100 	ldmdaeq	r8, {r8}
    a9fc:	000000d2 	ldrdeq	r0, [r0], -r2
    aa00:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    aa04:	00004290 	muleq	r0, r0, r2
    aa08:	dd081901 	vstrle.16	s2, [r8, #-2]	; <UNPREDICTABLE>
    aa0c:	02000000 	andeq	r0, r0, #0
    aa10:	19007091 	stmdbne	r0, {r0, r4, r7, ip, sp, lr}
    aa14:	00004202 	andeq	r4, r0, r2, lsl #4
    aa18:	00086501 	andeq	r6, r8, r1, lsl #10
    aa1c:	4c000000 	stcmi	0, cr0, [r0], {-0}
    aa20:	01000000 	mrseq	r0, (UNDEF: 0)
    aa24:	000d2f9c 	muleq	sp, ip, pc	; <UNPREDICTABLE>
    aa28:	41951800 	orrsmi	r1, r5, r0, lsl #16
    aa2c:	65010000 	strvs	r0, [r1, #-0]
    aa30:	0003e008 	andeq	lr, r3, r8
    aa34:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    aa38:	003fad18 	eorseq	sl, pc, r8, lsl sp	; <UNPREDICTABLE>
    aa3c:	08650100 	stmdaeq	r5!, {r8}^
    aa40:	0000084b 	andeq	r0, r0, fp, asr #16
    aa44:	00709102 	rsbseq	r9, r0, r2, lsl #2
    aa48:	00417819 	subeq	r7, r1, r9, lsl r8
    aa4c:	08770100 	ldmdaeq	r7!, {r8}^
    aa50:	080084cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, pc}
    aa54:	000000a4 	andeq	r0, r0, r4, lsr #1
    aa58:	0d8b9c01 	stceq	12, cr9, [fp, #4]
    aa5c:	95180000 	ldrls	r0, [r8, #-0]
    aa60:	01000041 	tsteq	r0, r1, asr #32
    aa64:	03e00877 	mvneq	r0, #7798784	; 0x770000
    aa68:	91020000 	mrsls	r0, (UNDEF: 2)
    aa6c:	84d81d6c 	ldrbhi	r1, [r8], #3436	; 0xd6c
    aa70:	00420800 	subeq	r0, r2, r0, lsl #16
    aa74:	0d710000 	ldcleq	0, cr0, [r1, #-0]
    aa78:	71150000 	tstvc	r5, r0
    aa7c:	01000040 	tsteq	r0, r0, asr #32
    aa80:	00b10881 	adcseq	r0, r1, r1, lsl #17
    aa84:	91020000 	mrsls	r0, (UNDEF: 2)
    aa88:	221b0077 	andscs	r0, fp, #119	; 0x77
    aa8c:	42080085 	andmi	r0, r8, #133	; 0x85
    aa90:	15000000 	strne	r0, [r0, #-0]
    aa94:	00004335 	andeq	r4, r0, r5, lsr r3
    aa98:	b108d201 	tstlt	r8, r1, lsl #4
    aa9c:	02000000 	andeq	r0, r0, #0
    aaa0:	00007691 	muleq	r0, r1, r6
    aaa4:	00428023 	subeq	r8, r2, r3, lsr #32
    aaa8:	08ef0100 	stmiaeq	pc!, {r8}^	; <UNPREDICTABLE>
    aaac:	000000d2 	ldrdeq	r0, [r0], -r2
    aab0:	08008570 	stmdaeq	r0, {r4, r5, r6, r8, sl, pc}
    aab4:	0000002c 	andeq	r0, r0, ip, lsr #32
    aab8:	0dc49c01 	stcleq	12, cr9, [r4, #4]
    aabc:	95180000 	ldrls	r0, [r8, #-0]
    aac0:	01000041 	tsteq	r0, r1, asr #32
    aac4:	0c8408ef 	stceq	8, cr0, [r4], {239}	; 0xef
    aac8:	91020000 	mrsls	r0, (UNDEF: 2)
    aacc:	4255156c 	subsmi	r1, r5, #108, 10	; 0x1b000000
    aad0:	f1010000 	setend	le
    aad4:	0000d208 	andeq	sp, r0, r8, lsl #4
    aad8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    aadc:	401b2000 	andsmi	r2, fp, r0
    aae0:	04010000 	streq	r0, [r1], #-0
    aae4:	0000d209 	andeq	sp, r0, r9, lsl #4
    aae8:	00000000 	andeq	r0, r0, r0
    aaec:	00002a00 	andeq	r2, r0, r0, lsl #20
    aaf0:	0c9c0100 	ldfeqs	f0, [ip], {0}
    aaf4:	1800000e 	stmdane	r0, {r1, r2, r3}
    aaf8:	00004196 	muleq	r0, r6, r1
    aafc:	81090401 	tsthi	r9, r1, lsl #8
    ab00:	0200000b 	andeq	r0, r0, #11
    ab04:	55156c91 	ldrpl	r6, [r5, #-3217]	; 0xfffff36f
    ab08:	01000042 	tsteq	r0, r2, asr #32
    ab0c:	00d20906 	sbcseq	r0, r2, r6, lsl #18
    ab10:	91020000 	mrsls	r0, (UNDEF: 2)
    ab14:	41951574 	orrsmi	r1, r5, r4, ror r5
    ab18:	07010000 	streq	r0, [r1, -r0]
    ab1c:	0003e009 	andeq	lr, r3, r9
    ab20:	70910200 	addsvc	r0, r1, r0, lsl #4
    ab24:	3f582300 	svccc	0x00582300
    ab28:	17010000 	strne	r0, [r1, -r0]
    ab2c:	0000d209 	andeq	sp, r0, r9, lsl #4
    ab30:	00859c00 	addeq	r9, r5, r0, lsl #24
    ab34:	00003008 	andeq	r3, r0, r8
    ab38:	459c0100 	ldrmi	r0, [ip, #256]	; 0x100
    ab3c:	1800000e 	stmdane	r0, {r1, r2, r3}
    ab40:	00004195 	muleq	r0, r5, r1
    ab44:	84091701 	strhi	r1, [r9], #-1793	; 0xfffff8ff
    ab48:	0200000c 	andeq	r0, r0, #12
    ab4c:	55156c91 	ldrpl	r6, [r5, #-3217]	; 0xfffff36f
    ab50:	01000042 	tsteq	r0, r2, asr #32
    ab54:	00d20919 	sbcseq	r0, r2, r9, lsl r9
    ab58:	91020000 	mrsls	r0, (UNDEF: 2)
    ab5c:	d2240074 	eorle	r0, r4, #116	; 0x74
    ab60:	01000041 	tsteq	r0, r1, asr #32
    ab64:	00d2092c 	sbcseq	r0, r2, ip, lsr #18
    ab68:	00000000 	andeq	r0, r0, r0
    ab6c:	002e0000 	eoreq	r0, lr, r0
    ab70:	9c010000 	stcls	0, cr0, [r1], {-0}
    ab74:	00419618 	subeq	r9, r1, r8, lsl r6
    ab78:	092c0100 	stmdbeq	ip!, {r8}
    ab7c:	00000b81 	andeq	r0, r0, r1, lsl #23
    ab80:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    ab84:	00004255 	andeq	r4, r0, r5, asr r2
    ab88:	d2092e01 	andle	r2, r9, #1, 28
    ab8c:	02000000 	andeq	r0, r0, #0
    ab90:	95157491 	ldrls	r7, [r5, #-1169]	; 0xfffffb6f
    ab94:	01000041 	tsteq	r0, r1, asr #32
    ab98:	03e0092f 	mvneq	r0, #770048	; 0xbc000
    ab9c:	91020000 	mrsls	r0, (UNDEF: 2)
    aba0:	d6000070 			; <UNDEFINED> instruction: 0xd6000070
    aba4:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    aba8:	0021a500 	eoreq	sl, r1, r0, lsl #10
    abac:	11010400 	tstne	r1, r0, lsl #8
    abb0:	0c000001 	stceq	0, cr0, [r0], {1}
    abb4:	00004377 	andeq	r4, r0, r7, ror r3
    abb8:	00000ca0 	andeq	r0, r0, r0, lsr #25
    abbc:	00000000 	andeq	r0, r0, r0
    abc0:	00004c98 	muleq	r0, r8, ip
    abc4:	00571302 	subseq	r1, r7, r2, lsl #6
    abc8:	2cd80300 	ldclcs	3, cr0, [r8], {0}
    abcc:	03000000 	movweq	r0, #0
    abd0:	01ce0704 	biceq	r0, lr, r4, lsl #14
    abd4:	04040000 	streq	r0, [r4], #-0
    abd8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    abdc:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
    abe0:	000000b8 	strheq	r0, [r0], -r8
    abe4:	f8040803 			; <UNDEFINED> instruction: 0xf8040803
    abe8:	03000002 	movweq	r0, #2
    abec:	01920601 	orrseq	r0, r2, r1, lsl #12
    abf0:	e3020000 	movw	r0, #8192	; 0x2000
    abf4:	04000000 	streq	r0, [r0], #-0
    abf8:	00005a1d 	andeq	r5, r0, sp, lsl sl
    abfc:	08010300 	stmdaeq	r1, {r8, r9}
    ac00:	00000190 	muleq	r0, r0, r1
    ac04:	95050203 	strls	r0, [r5, #-515]	; 0xfffffdfd
    ac08:	02000000 	andeq	r0, r0, #0
    ac0c:	00000072 	andeq	r0, r0, r2, ror r0
    ac10:	00732b04 	rsbseq	r2, r3, r4, lsl #22
    ac14:	02030000 	andeq	r0, r3, #0
    ac18:	0001f207 	andeq	pc, r1, r7, lsl #4
    ac1c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    ac20:	000000bd 	strheq	r0, [r0], -sp
    ac24:	00006702 	andeq	r6, r0, r2, lsl #14
    ac28:	8c410400 	cfstrdhi	mvd0, [r1], {-0}
    ac2c:	03000000 	movweq	r0, #0
    ac30:	01c90704 	biceq	r0, r9, r4, lsl #14
    ac34:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    ac38:	0001c407 	andeq	ip, r1, r7, lsl #8
    ac3c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    ac40:	00000059 	andeq	r0, r0, r9, asr r0
    ac44:	04060405 	streq	r0, [r6], #-1029	; 0xfffffbfb
    ac48:	000000a9 	andeq	r0, r0, r9, lsr #1
    ac4c:	99080103 	stmdbls	r8, {r0, r1, r8}
    ac50:	06000001 	streq	r0, [r0], -r1
    ac54:	0000b604 	andeq	fp, r0, r4, lsl #12
    ac58:	00a90700 	adceq	r0, r9, r0, lsl #14
    ac5c:	e5020000 	str	r0, [r2, #-0]
    ac60:	05000000 	streq	r0, [r0, #-0]
    ac64:	00004f18 	andeq	r4, r0, r8, lsl pc
    ac68:	00740200 	rsbseq	r0, r4, r0, lsl #4
    ac6c:	24050000 	strcs	r0, [r5], #-0
    ac70:	00000068 	andeq	r0, r0, r8, rrx
    ac74:	00006902 	andeq	r6, r0, r2, lsl #18
    ac78:	81300500 	teqhi	r0, r0, lsl #10
    ac7c:	02000000 	andeq	r0, r0, #0
    ac80:	00004832 	andeq	r4, r0, r2, lsr r8
    ac84:	00e72306 	rsceq	r2, r7, r6, lsl #6
    ac88:	04060000 	streq	r0, [r6], #-0
    ac8c:	000000ed 	andeq	r0, r0, sp, ror #1
    ac90:	0000f808 	andeq	pc, r0, r8, lsl #16
    ac94:	00a10900 	adceq	r0, r1, r0, lsl #18
    ac98:	02000000 	andeq	r0, r0, #0
    ac9c:	000043d5 	ldrdeq	r4, [r0], -r5
    aca0:	00d13702 	sbcseq	r3, r1, r2, lsl #14
    aca4:	ce020000 	cdpgt	0, 0, cr0, cr2, cr0, {0}
    aca8:	0200003a 	andeq	r0, r0, #58	; 0x3a
    acac:	00007a38 	andeq	r7, r0, r8, lsr sl
    acb0:	3acd0200 	bcc	ff34b4b8 <BootRAM+0xe2bbc59>
    acb4:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    acb8:	0000008c 	andeq	r0, r0, ip, lsl #1
    acbc:	003a9e02 	eorseq	r9, sl, r2, lsl #28
    acc0:	d13f0200 	teqle	pc, r0, lsl #4
    acc4:	0a000000 	beq	accc <_Min_Stack_Size+0xaacc>
    acc8:	00003d6f 	andeq	r3, r0, pc, ror #26
    accc:	6d8c0714 	stcvs	7, cr0, [ip, #80]	; 0x50
    acd0:	0b000001 	bleq	acdc <_Min_Stack_Size+0xaadc>
    acd4:	00003d53 	andeq	r3, r0, r3, asr sp
    acd8:	01198f07 	tsteq	r9, r7, lsl #30
    acdc:	0b000000 	bleq	ace4 <_Min_Stack_Size+0xaae4>
    ace0:	00003dc3 	andeq	r3, r0, r3, asr #27
    ace4:	016d9007 	cmneq	sp, r7
    ace8:	0b040000 	bleq	10acf0 <_Min_Stack_Size+0x10aaf0>
    acec:	00003e06 	andeq	r3, r0, r6, lsl #28
    acf0:	016d9107 	cmneq	sp, r7, lsl #2
    acf4:	0b080000 	bleq	20acfc <_Min_Stack_Size+0x20aafc>
    acf8:	00003d67 	andeq	r3, r0, r7, ror #26
    acfc:	00a19207 	adceq	r9, r1, r7, lsl #4
    ad00:	0b0c0000 	bleq	30ad08 <_Min_Stack_Size+0x30ab08>
    ad04:	00003d38 	andeq	r3, r0, r8, lsr sp
    ad08:	01a49307 			; <UNDEFINED> instruction: 0x01a49307
    ad0c:	00100000 	andseq	r0, r0, r0
    ad10:	01240406 			; <UNDEFINED> instruction: 0x01240406
    ad14:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    ad18:	1400003e 	strne	r0, [r0], #-62	; 0xffffffc2
    ad1c:	01a4a407 			; <UNDEFINED> instruction: 0x01a4a407
    ad20:	a40b0000 	strge	r0, [fp], #-0
    ad24:	0700003d 	smladxeq	r0, sp, r0, r0
    ad28:	0001f1a7 	andeq	pc, r1, r7, lsr #3
    ad2c:	fe0b0000 	cdp2	0, 0, cr0, cr11, cr0, {0}
    ad30:	0700003d 	smladxeq	r0, sp, r0, r0
    ad34:	0001f6a8 	andeq	pc, r1, r8, lsr #13
    ad38:	5e0b0400 	cfcpyspl	mvf0, mvf11
    ad3c:	0700003d 	smladxeq	r0, sp, r0, r0
    ad40:	0001e6a9 	andeq	lr, r1, r9, lsr #13
    ad44:	06000800 	streq	r0, [r0], -r0, lsl #16
    ad48:	00017304 	andeq	r7, r1, r4, lsl #6
    ad4c:	3d480200 	sfmcc	f0, 2, [r8, #-0]
    ad50:	96070000 	strls	r0, [r7], -r0
    ad54:	00000124 	andeq	r0, r0, r4, lsr #2
    ad58:	003e110a 	eorseq	r1, lr, sl, lsl #2
    ad5c:	98070c00 	stmdals	r7, {sl, fp}
    ad60:	000001e6 	andeq	r0, r0, r6, ror #3
    ad64:	003d530b 	eorseq	r5, sp, fp, lsl #6
    ad68:	199b0700 	ldmibne	fp, {r8, r9, sl}
    ad6c:	00000001 	andeq	r0, r0, r1
    ad70:	003dc30b 	eorseq	ip, sp, fp, lsl #6
    ad74:	6d9c0700 	ldcvs	7, cr0, [ip]
    ad78:	04000001 	streq	r0, [r0], #-1
    ad7c:	003e060b 	eorseq	r0, lr, fp, lsl #12
    ad80:	6d9d0700 	ldcvs	7, cr0, [sp]
    ad84:	08000001 	stmdaeq	r0, {r0}
    ad88:	3d440200 	sfmcc	f0, 2, [r4, #-0]
    ad8c:	9f070000 	svcls	0x00070000
    ad90:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
    ad94:	00010e0c 	andeq	r0, r1, ip, lsl #28
    ad98:	aa040600 	bge	10c5a0 <_Min_Stack_Size+0x10c3a0>
    ad9c:	02000001 	andeq	r0, r0, #1
    ada0:	00003d9d 	muleq	r0, sp, sp
    ada4:	0173ab07 	cmneq	r3, r7, lsl #22
    ada8:	bb020000 	bllt	8adb0 <_Min_Stack_Size+0x8abb0>
    adac:	08000038 	stmdaeq	r0, {r3, r4, r5}
    adb0:	00021246 	andeq	r1, r2, r6, asr #4
    adb4:	18040600 	stmdane	r4, {r9, sl}
    adb8:	0a000002 	beq	adc8 <_Min_Stack_Size+0xabc8>
    adbc:	00003a43 	andeq	r3, r0, r3, asr #20
    adc0:	a6fc0154 	usatge	r0, #28, r4, asr #2
    adc4:	0b000002 	bleq	add4 <_Min_Stack_Size+0xabd4>
    adc8:	00004c67 	andeq	r4, r0, r7, ror #24
    adcc:	0353fe01 	cmpeq	r3, #1, 28	; <UNPREDICTABLE>
    add0:	0d000000 	stceq	0, cr0, [r0, #-0]
    add4:	00004c3d 	andeq	r4, r0, sp, lsr ip
    add8:	aa010401 	bge	4bde4 <_Min_Stack_Size+0x4bbe4>
    addc:	04000001 	streq	r0, [r0], #-1
    ade0:	004c980d 	subeq	r9, ip, sp, lsl #16
    ade4:	01050100 	mrseq	r0, (UNDEF: 21)
    ade8:	000001aa 	andeq	r0, r0, sl, lsr #3
    adec:	433d0d18 	teqmi	sp, #24, 26	; 0x600
    adf0:	06010000 	streq	r0, [r1], -r0
    adf4:	00010e01 	andeq	r0, r1, r1, lsl #28
    adf8:	050d2c00 	streq	r2, [sp, #-3072]	; 0xfffff400
    adfc:	0100004a 	tsteq	r0, sl, asr #32
    ae00:	034d0107 	movteq	r0, #53511	; 0xd107
    ae04:	0d300000 	ldceq	0, cr0, [r0, #-0]
    ae08:	00003a8d 	andeq	r3, r0, sp, lsl #21
    ae0c:	5e010801 	cdppl	8, 0, cr0, cr1, cr1, {0}
    ae10:	34000003 	strcc	r0, [r0], #-3
    ae14:	004b640d 	subeq	r6, fp, sp, lsl #8
    ae18:	01180100 	tsteq	r8, r0, lsl #2
    ae1c:	0000010e 	andeq	r0, r0, lr, lsl #2
    ae20:	46c20d44 	strbmi	r0, [r2], r4, asr #26
    ae24:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    ae28:	00010e01 	andeq	r0, r1, r1, lsl #28
    ae2c:	900d4800 	andls	r4, sp, r0, lsl #16
    ae30:	01000046 	tsteq	r0, r6, asr #32
    ae34:	036e0134 	cmneq	lr, #52, 2
    ae38:	0d4c0000 	stcleq	0, cr0, [ip, #-0]
    ae3c:	000044b8 			; <UNDEFINED> instruction: 0x000044b8
    ae40:	73013501 	movwvc	r3, #5377	; 0x1501
    ae44:	50000003 	andpl	r0, r0, r3
    ae48:	5a010e00 	bpl	4e650 <_Min_Stack_Size+0x4e450>
    ae4c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    ae50:	0002d15b 	andeq	sp, r2, fp, asr r1
    ae54:	439a0f00 	orrsmi	r0, sl, #0, 30
    ae58:	0f000000 	svceq	0x00000000
    ae5c:	0000490b 	andeq	r4, r0, fp, lsl #18
    ae60:	4c260f01 	stcmi	15, cr0, [r6], #-4
    ae64:	0f020000 	svceq	0x00020000
    ae68:	00004514 	andeq	r4, r0, r4, lsl r5
    ae6c:	47010f03 	strmi	r0, [r1, -r3, lsl #30]
    ae70:	00040000 	andeq	r0, r4, r0
    ae74:	0045c802 	subeq	ip, r5, r2, lsl #16
    ae78:	a6610800 	strbtge	r0, [r1], -r0, lsl #16
    ae7c:	0a000002 	beq	ae8c <_Min_Stack_Size+0xac8c>
    ae80:	00003e87 	andeq	r3, r0, r7, lsl #29
    ae84:	01660808 	cmneq	r6, r8, lsl #16
    ae88:	0b000003 	bleq	ae9c <_Min_Stack_Size+0xac9c>
    ae8c:	000040d3 	ldrdeq	r4, [r0], -r3
    ae90:	01036808 	tsteq	r3, r8, lsl #16
    ae94:	0b000000 	bleq	ae9c <_Min_Stack_Size+0xac9c>
    ae98:	000040c3 	andeq	r4, r0, r3, asr #1
    ae9c:	01196908 	tsteq	r9, r8, lsl #18
    aea0:	00040000 	andeq	r0, r4, r0
    aea4:	003e9102 	eorseq	r9, lr, r2, lsl #2
    aea8:	dc6a0800 	stclle	8, cr0, [sl], #-0
    aeac:	0a000002 	beq	aebc <_Min_Stack_Size+0xacbc>
    aeb0:	00004914 	andeq	r4, r0, r4, lsl r9
    aeb4:	3d6f080c 	stclcc	8, cr0, [pc, #-48]!	; ae8c <_Min_Stack_Size+0xac8c>
    aeb8:	0b000003 	bleq	aecc <_Min_Stack_Size+0xaccc>
    aebc:	00004af7 	strdeq	r4, [r0], -r7
    aec0:	00a17108 	adceq	r7, r1, r8, lsl #2
    aec4:	0b000000 	bleq	aecc <_Min_Stack_Size+0xaccc>
    aec8:	000047eb 	andeq	r4, r0, fp, ror #15
    aecc:	00d17208 	sbcseq	r7, r1, r8, lsl #4
    aed0:	0b040000 	bleq	10aed8 <_Min_Stack_Size+0x10acd8>
    aed4:	00004478 	andeq	r4, r0, r8, ror r4
    aed8:	00d17308 	sbcseq	r7, r1, r8, lsl #6
    aedc:	00080000 	andeq	r0, r8, r0
    aee0:	00479b02 	subeq	r9, r7, r2, lsl #22
    aee4:	0c740800 	ldcleq	8, cr0, [r4], #-0
    aee8:	07000003 	streq	r0, [r0, -r3]
    aeec:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    aef0:	00f80406 	rscseq	r0, r8, r6, lsl #8
    aef4:	04060000 	streq	r0, [r6], #-0
    aef8:	00000359 	andeq	r0, r0, r9, asr r3
    aefc:	0000f80c 	andeq	pc, r0, ip, lsl #16
    af00:	00a91000 	adceq	r1, r9, r0
    af04:	036e0000 	cmneq	lr, #0
    af08:	9a110000 	bls	44af10 <_Min_Stack_Size+0x44ad10>
    af0c:	0f000000 	svceq	0x00000000
    af10:	00d10c00 	sbcseq	r0, r1, r0, lsl #24
    af14:	bb0c0000 	bllt	30af1c <_Min_Stack_Size+0x30ad1c>
    af18:	12000000 	andne	r0, r0, #0
    af1c:	000044b1 			; <UNDEFINED> instruction: 0x000044b1
    af20:	18014601 	stmdane	r1, {r0, r9, sl, lr}
    af24:	12000002 	andne	r0, r0, #2
    af28:	00004b99 	muleq	r0, r9, fp
    af2c:	78014a01 	stmdavc	r1, {r0, r9, fp, lr}
    af30:	13000003 	movwne	r0, #3
    af34:	00004322 	andeq	r4, r0, r2, lsr #6
    af38:	00d1cf02 	sbcseq	ip, r1, r2, lsl #30
    af3c:	b7030000 	strlt	r0, [r3, -r0]
    af40:	14000003 	strne	r0, [r0], #-3
    af44:	000040e2 	andeq	r4, r0, r2, ror #1
    af48:	00d1d102 	sbcseq	sp, r1, r2, lsl #2
    af4c:	1b140000 	blne	50af54 <_Min_Stack_Size+0x50ad54>
    af50:	02000038 	andeq	r0, r0, #56	; 0x38
    af54:	0000d1d1 	ldrdeq	sp, [r0], -r1
    af58:	7d150000 	ldcvc	0, cr0, [r5, #-0]
    af5c:	0200003f 	andeq	r0, r0, #63	; 0x3f
    af60:	03cf03e3 	biceq	r0, pc, #-1946157053	; 0x8c000003
    af64:	17160000 	ldrne	r0, [r6, -r0]
    af68:	02000042 	andeq	r0, r0, #66	; 0x42
    af6c:	0000d1e3 	andeq	sp, r0, r3, ror #3
    af70:	7d150000 	ldcvc	0, cr0, [r5, #-0]
    af74:	02000039 	andeq	r0, r0, #57	; 0x39
    af78:	03e703bf 	mvneq	r0, #-67108862	; 0xfc000002
    af7c:	1b140000 	blne	50af84 <_Min_Stack_Size+0x50ad84>
    af80:	02000038 	andeq	r0, r0, #56	; 0x38
    af84:	0000d1c1 	andeq	sp, r0, r1, asr #3
    af88:	d3130000 	tstle	r3, #0
    af8c:	02000047 	andeq	r0, r0, #71	; 0x47
    af90:	0000bb82 	andeq	fp, r0, r2, lsl #23
    af94:	040e0300 	streq	r0, [lr], #-768	; 0xfffffd00
    af98:	4b160000 	blmi	58afa0 <_Min_Stack_Size+0x58ada0>
    af9c:	02000044 	andeq	r0, r0, #68	; 0x44
    afa0:	0000d182 	andeq	sp, r0, r2, lsl #3
    afa4:	4a4c1400 	bmi	130ffac <_Min_Stack_Size+0x130fdac>
    afa8:	84020000 	strhi	r0, [r2], #-0
    afac:	000000bb 	strheq	r0, [r0], -fp
    afb0:	47621700 	strbmi	r1, [r2, -r0, lsl #14]!
    afb4:	da010000 	ble	4afbc <_Min_Stack_Size+0x4adbc>
    afb8:	00010302 	andeq	r0, r1, r2, lsl #6
    afbc:	0085cc00 	addeq	ip, r5, r0, lsl #24
    afc0:	00008208 	andeq	r8, r0, r8, lsl #4
    afc4:	ba9c0100 	blt	fe70b3cc <BootRAM+0xd67bb6d>
    afc8:	18000004 	stmdane	r0, {r2}
    afcc:	00004790 	muleq	r0, r0, r7
    afd0:	dc02da01 			; <UNDEFINED> instruction: 0xdc02da01
    afd4:	02000000 	andeq	r0, r0, #0
    afd8:	aa186491 	bge	624224 <_Min_Stack_Size+0x624024>
    afdc:	01000044 	tsteq	r0, r4, asr #32
    afe0:	034802db 	movteq	r0, #33499	; 0x82db
    afe4:	91020000 	mrsls	r0, (UNDEF: 2)
    afe8:	44e81860 	strbtmi	r1, [r8], #2144	; 0x860
    afec:	dc010000 	stcle	0, cr0, [r1], {-0}
    aff0:	0004ba02 	andeq	fp, r4, r2, lsl #20
    aff4:	5e910200 	cdppl	2, 9, cr0, cr1, cr0, {0}
    aff8:	00392f18 	eorseq	r2, r9, r8, lsl pc
    affc:	02dd0100 	sbcseq	r0, sp, #0, 2
    b000:	000004bf 			; <UNDEFINED> instruction: 0x000004bf
    b004:	18589102 	ldmdane	r8, {r1, r8, ip, pc}^
    b008:	0000433d 	andeq	r4, r0, sp, lsr r3
    b00c:	0e02de01 	cdpeq	14, 0, cr13, cr2, cr1, {0}
    b010:	02000001 	andeq	r0, r0, #1
    b014:	a7180091 			; <UNDEFINED> instruction: 0xa7180091
    b018:	0100004c 	tsteq	r0, ip, asr #32
    b01c:	04ca02df 	strbeq	r0, [sl], #735	; 0x2df
    b020:	91020000 	mrsls	r0, (UNDEF: 2)
    b024:	47871904 	strmi	r1, [r7, r4, lsl #18]
    b028:	e1010000 	mrs	r0, (UNDEF: 1)
    b02c:	0004cf02 	andeq	ip, r4, r2, lsl #30
    b030:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    b034:	00425519 	subeq	r5, r2, r9, lsl r5
    b038:	02e20100 	rsceq	r0, r2, #0, 2
    b03c:	00000103 	andeq	r0, r0, r3, lsl #2
    b040:	1a709102 	bne	1c2f450 <_Min_Stack_Size+0x1c2f250>
    b044:	080085dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, pc}
    b048:	00000034 	andeq	r0, r0, r4, lsr r0
    b04c:	004a0519 	subeq	r0, sl, r9, lsl r5
    b050:	02ff0100 	rscseq	r0, pc, #0, 2
    b054:	0000034d 	andeq	r0, r0, sp, asr #6
    b058:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    b05c:	00c60700 	sbceq	r0, r6, r0, lsl #14
    b060:	a1070000 	mrsge	r0, (UNDEF: 7)
    b064:	06000000 	streq	r0, [r0], -r0
    b068:	00020704 	andeq	r0, r2, r4, lsl #14
    b06c:	04c40700 	strbeq	r0, [r4], #1792	; 0x700
    b070:	04060000 	streq	r0, [r6], #-0
    b074:	00000384 	andeq	r0, r0, r4, lsl #7
    b078:	0049831b 	subeq	r8, r9, fp, lsl r3
    b07c:	03350100 	teqeq	r5, #0, 2
    b080:	08008650 	stmdaeq	r0, {r4, r6, r9, sl, pc}
    b084:	000000fe 	strdeq	r0, [r0], -lr
    b088:	05809c01 	streq	r9, [r0, #3073]	; 0xc01
    b08c:	90180000 	andsls	r0, r8, r0
    b090:	01000047 	tsteq	r0, r7, asr #32
    b094:	00dc0335 	sbcseq	r0, ip, r5, lsr r3
    b098:	91020000 	mrsls	r0, (UNDEF: 2)
    b09c:	44aa186c 	strtmi	r1, [sl], #2156	; 0x86c
    b0a0:	36010000 	strcc	r0, [r1], -r0
    b0a4:	00034803 	andeq	r4, r3, r3, lsl #16
    b0a8:	68910200 	ldmvs	r1, {r9}
    b0ac:	00471b18 	subeq	r1, r7, r8, lsl fp
    b0b0:	03370100 	teqeq	r7, #0, 2
    b0b4:	00000580 	andeq	r0, r0, r0, lsl #11
    b0b8:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
    b0bc:	0000392f 	andeq	r3, r0, pc, lsr #18
    b0c0:	bf033801 	svclt	0x00033801
    b0c4:	02000004 	andeq	r0, r0, #4
    b0c8:	3d186091 	ldccc	0, cr6, [r8, #-580]	; 0xfffffdbc
    b0cc:	01000043 	tsteq	r0, r3, asr #32
    b0d0:	010e0339 	tsteq	lr, r9, lsr r3
    b0d4:	91020000 	mrsls	r0, (UNDEF: 2)
    b0d8:	4ca71800 	stcmi	8, cr1, [r7]
    b0dc:	3a010000 	bcc	4b0e4 <_Min_Stack_Size+0x4aee4>
    b0e0:	0004ca03 	andeq	ip, r4, r3, lsl #20
    b0e4:	04910200 	ldreq	r0, [r1], #512	; 0x200
    b0e8:	00478718 	subeq	r8, r7, r8, lsl r7
    b0ec:	033b0100 	teqeq	fp, #0, 2
    b0f0:	000004cf 	andeq	r0, r0, pc, asr #9
    b0f4:	18089102 	stmdane	r8, {r1, r8, ip, pc}
    b0f8:	00004bd6 	ldrdeq	r4, [r0], -r6
    b0fc:	90033c01 	andls	r3, r3, r1, lsl #24
    b100:	02000005 	andeq	r0, r0, #5
    b104:	67190c91 			; <UNDEFINED> instruction: 0x67190c91
    b108:	0100004c 	tsteq	r0, ip, asr #32
    b10c:	034d033e 	movteq	r0, #54078	; 0xd33e
    b110:	91020000 	mrsls	r0, (UNDEF: 2)
    b114:	00781c70 	rsbseq	r1, r8, r0, ror ip
    b118:	0e033f01 	cdpeq	15, 0, cr3, cr3, cr1, {0}
    b11c:	02000001 	andeq	r0, r0, #1
    b120:	07007491 			; <UNDEFINED> instruction: 0x07007491
    b124:	000000d1 	ldrdeq	r0, [r0], -r1
    b128:	058b0406 	streq	r0, [fp, #1030]	; 0x406
    b12c:	3d070000 	stccc	0, cr0, [r7, #-0]
    b130:	07000003 	streq	r0, [r0, -r3]
    b134:	00000585 	andeq	r0, r0, r5, lsl #11
    b138:	00476e1b 	subeq	r6, r7, fp, lsl lr
    b13c:	04300100 	ldrteq	r0, [r0], #-256	; 0xffffff00
    b140:	08008750 	stmdaeq	r0, {r4, r6, r8, r9, sl, pc}
    b144:	000000d4 	ldrdeq	r0, [r0], -r4
    b148:	05bb9c01 	ldreq	r9, [fp, #3073]!	; 0xc01
    b14c:	87180000 	ldrhi	r0, [r8, -r0]
    b150:	01000047 	tsteq	r0, r7, asr #32
    b154:	04cf0430 	strbeq	r0, [pc], #1072	; b15c <_Min_Stack_Size+0xaf5c>
    b158:	91020000 	mrsls	r0, (UNDEF: 2)
    b15c:	731d0074 	tstvc	sp, #116	; 0x74
    b160:	0100004b 	tsteq	r0, fp, asr #32
    b164:	000004e1 	andeq	r0, r0, r1, ror #9
    b168:	00a00000 	adceq	r0, r0, r0
    b16c:	9c010000 	stcls	0, cr0, [r1], {-0}
    b170:	00000636 	andeq	r0, r0, r6, lsr r6
    b174:	004a3918 	subeq	r3, sl, r8, lsl r9
    b178:	04e10100 	strbteq	r0, [r1], #256	; 0x100
    b17c:	0000063c 	andeq	r0, r0, ip, lsr r6
    b180:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
    b184:	00004c22 	andeq	r4, r0, r2, lsr #24
    b188:	4104e101 	tstmi	r4, r1, lsl #2
    b18c:	02000006 	andeq	r0, r0, #6
    b190:	31196091 			; <UNDEFINED> instruction: 0x31196091
    b194:	0100004c 	tsteq	r0, ip, asr #32
    b198:	011904e3 	tsteq	r9, r3, ror #9
    b19c:	91020000 	mrsls	r0, (UNDEF: 2)
    b1a0:	4bac196c 	blmi	feb11758 <BootRAM+0xda81ef9>
    b1a4:	e4010000 	str	r0, [r1], #-0
    b1a8:	00010304 	andeq	r0, r1, r4, lsl #6
    b1ac:	68910200 	ldmvs	r1, {r9}
    b1b0:	00472819 	subeq	r2, r7, r9, lsl r8
    b1b4:	04e40100 	strbteq	r0, [r4], #256	; 0x100
    b1b8:	00000103 	andeq	r0, r0, r3, lsl #2
    b1bc:	1a749102 	bne	1d2f5cc <_Min_Stack_Size+0x1d2f3cc>
    b1c0:	00000000 	andeq	r0, r0, r0
    b1c4:	00000062 	andeq	r0, r0, r2, rrx
    b1c8:	00460d19 	subeq	r0, r6, r9, lsl sp
    b1cc:	04ee0100 	strbteq	r0, [lr], #256	; 0x100
    b1d0:	00000641 	andeq	r0, r0, r1, asr #12
    b1d4:	00709102 	rsbseq	r9, r0, r2, lsl #2
    b1d8:	19040600 	stmdbne	r4, {r9, sl}
    b1dc:	07000001 	streq	r0, [r0, -r1]
    b1e0:	00000636 	andeq	r0, r0, r6, lsr r6
    b1e4:	00011907 	andeq	r1, r1, r7, lsl #18
    b1e8:	46671d00 	strbtmi	r1, [r7], -r0, lsl #26
    b1ec:	35010000 	strcc	r0, [r1, #-0]
    b1f0:	00882405 	addeq	r2, r8, r5, lsl #8
    b1f4:	00004808 	andeq	r4, r0, r8, lsl #16
    b1f8:	7b9c0100 	blvc	fe70b600 <BootRAM+0xd67bda1>
    b1fc:	18000006 	stmdane	r0, {r1, r2}
    b200:	00004b05 	andeq	r4, r0, r5, lsl #22
    b204:	41053501 	tstmi	r5, r1, lsl #10
    b208:	02000006 	andeq	r0, r0, #6
    b20c:	ac196c91 	ldcge	12, cr6, [r9], {145}	; 0x91
    b210:	0100004b 	tsteq	r0, fp, asr #32
    b214:	01030537 	tsteq	r3, r7, lsr r5
    b218:	91020000 	mrsls	r0, (UNDEF: 2)
    b21c:	fb170074 	blx	5cb3f6 <_Min_Stack_Size+0x5cb1f6>
    b220:	01000045 	tsteq	r0, r5, asr #32
    b224:	010e05be 			; <UNDEFINED> instruction: 0x010e05be
    b228:	00000000 	andeq	r0, r0, r0
    b22c:	00340000 	eorseq	r0, r4, r0
    b230:	9c010000 	stcls	0, cr0, [r1], {-0}
    b234:	000006c3 	andeq	r0, r0, r3, asr #13
    b238:	0038f718 	eorseq	pc, r8, r8, lsl r7	; <UNPREDICTABLE>
    b23c:	05be0100 	ldreq	r0, [lr, #256]!	; 0x100
    b240:	000006c3 	andeq	r0, r0, r3, asr #13
    b244:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    b248:	00004c4c 	andeq	r4, r0, ip, asr #24
    b24c:	c805c001 	stmdagt	r5, {r0, lr, pc}
    b250:	02000006 	andeq	r0, r0, #6
    b254:	54197491 	ldrpl	r7, [r9], #-1169	; 0xfffffb6f
    b258:	01000042 	tsteq	r0, r2, asr #32
    b25c:	010e05c1 	smlabteq	lr, r1, r5, r0
    b260:	91020000 	mrsls	r0, (UNDEF: 2)
    b264:	07070070 	smlsdxeq	r7, r0, r0, r0
    b268:	06000002 	streq	r0, [r0], -r2
    b26c:	0006ce04 	andeq	ip, r6, r4, lsl #28
    b270:	03840700 	orreq	r0, r4, #0, 14
    b274:	681e0000 	ldmdavs	lr, {}	; <UNPREDICTABLE>
    b278:	01000048 	tsteq	r0, r8, asr #32
    b27c:	010e05d4 	ldrdeq	r0, [lr, -r4]
    b280:	00000000 	andeq	r0, r0, r0
    b284:	00540000 	subseq	r0, r4, r0
    b288:	9c010000 	stcls	0, cr0, [r1], {-0}
    b28c:	00000772 	andeq	r0, r0, r2, ror r7
    b290:	0038f718 	eorseq	pc, r8, r8, lsl r7	; <UNPREDICTABLE>
    b294:	05d40100 	ldrbeq	r0, [r4, #256]	; 0x100
    b298:	000006c3 	andeq	r0, r0, r3, asr #13
    b29c:	195c9102 	ldmdbne	ip, {r1, r8, ip, pc}^
    b2a0:	00004c4c 	andeq	r4, r0, ip, asr #24
    b2a4:	c805d601 	stmdagt	r5, {r0, r9, sl, ip, lr, pc}
    b2a8:	02000006 	andeq	r0, r0, #6
    b2ac:	54196c91 	ldrpl	r6, [r9], #-3217	; 0xfffff36f
    b2b0:	01000042 	tsteq	r0, r2, asr #32
    b2b4:	010e05d7 	ldrdeq	r0, [lr, -r7]
    b2b8:	91020000 	mrsls	r0, (UNDEF: 2)
    b2bc:	45441968 	strbmi	r1, [r4, #-2408]	; 0xfffff698
    b2c0:	d7010000 	strle	r0, [r1, -r0]
    b2c4:	00010e05 	andeq	r0, r1, r5, lsl #28
    b2c8:	70910200 	addsvc	r0, r1, r0, lsl #4
    b2cc:	0003901f 	andeq	r9, r3, pc, lsl r0
    b2d0:	00000000 	andeq	r0, r0, r0
    b2d4:	00001a00 	andeq	r1, r0, r0, lsl #20
    b2d8:	05eb0100 	strbeq	r0, [fp, #256]!	; 0x100
    b2dc:	00000758 	andeq	r0, r0, r8, asr r7
    b2e0:	0000001a 	andeq	r0, r0, sl, lsl r0
    b2e4:	00001a00 	andeq	r1, r0, r0, lsl #20
    b2e8:	03a02000 	moveq	r2, #0
    b2ec:	91020000 	mrsls	r0, (UNDEF: 2)
    b2f0:	03ab2064 			; <UNDEFINED> instruction: 0x03ab2064
    b2f4:	91020000 	mrsls	r0, (UNDEF: 2)
    b2f8:	21000060 	tstcs	r0, r0, rrx
    b2fc:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    b300:	00000000 	andeq	r0, r0, r0
    b304:	00000006 	andeq	r0, r0, r6
    b308:	2205f201 	andcs	pc, r5, #268435456	; 0x10000000
    b30c:	000003c3 	andeq	r0, r0, r3, asr #7
    b310:	00749102 	rsbseq	r9, r4, r2, lsl #2
    b314:	48df1d00 	ldmmi	pc, {r8, sl, fp, ip}^	; <UNPREDICTABLE>
    b318:	fc010000 	stc2	0, cr0, [r1], {-0}
    b31c:	00000005 	andeq	r0, r0, r5
    b320:	00013800 	andeq	r3, r1, r0, lsl #16
    b324:	e39c0100 	orrs	r0, ip, #0, 2
    b328:	18000007 	stmdane	r0, {r0, r1, r2}
    b32c:	000038f7 	strdeq	r3, [r0], -r7
    b330:	0705fc01 	streq	pc, [r5, -r1, lsl #24]
    b334:	02000002 	andeq	r0, r0, #2
    b338:	24186491 	ldrcs	r6, [r8], #-1169	; 0xfffffb6f
    b33c:	01000048 	tsteq	r0, r8, asr #32
    b340:	010e05fc 	strdeq	r0, [lr, -ip]
    b344:	91020000 	mrsls	r0, (UNDEF: 2)
    b348:	4c4c1960 	mcrrmi	9, 6, r1, ip, cr0	; <UNPREDICTABLE>
    b34c:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    b350:	0004cf05 	andeq	ip, r4, r5, lsl #30
    b354:	70910200 	addsvc	r0, r1, r0, lsl #4
    b358:	004cd519 	subeq	sp, ip, r9, lsl r5
    b35c:	05ff0100 	ldrbeq	r0, [pc, #256]!	; b464 <_Min_Stack_Size+0xb264>
    b360:	0000010e 	andeq	r0, r0, lr, lsl #2
    b364:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    b368:	00004b83 	andeq	r4, r0, r3, lsl #23
    b36c:	0e05ff01 	cdpeq	15, 0, cr15, cr5, cr1, {0}
    b370:	02000001 	andeq	r0, r0, #1
    b374:	6e196891 	mrcvs	8, 0, r6, cr9, cr1, {4}
    b378:	0100003f 	tsteq	r0, pc, lsr r0
    b37c:	01030600 	tsteq	r3, r0, lsl #12
    b380:	91020000 	mrsls	r0, (UNDEF: 2)
    b384:	9f1d0074 	svcls	0x001d0074
    b388:	0100004b 	tsteq	r0, fp, asr #32
    b38c:	000006a0 	andeq	r0, r0, r0, lsr #13
    b390:	01040000 	mrseq	r0, (UNDEF: 4)
    b394:	9c010000 	stcls	0, cr0, [r1], {-0}
    b398:	00000818 	andeq	r0, r0, r8, lsl r8
    b39c:	004a1518 	subeq	r1, sl, r8, lsl r5
    b3a0:	06a00100 	strteq	r0, [r0], r0, lsl #2
    b3a4:	00000207 	andeq	r0, r0, r7, lsl #4
    b3a8:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    b3ac:	00004c4c 	andeq	r4, r0, ip, asr #24
    b3b0:	cf06a201 	svcgt	0x0006a201
    b3b4:	02000004 	andeq	r0, r0, #4
    b3b8:	23007491 	movwcs	r7, #1169	; 0x491
    b3bc:	000049d0 	ldrdeq	r4, [r0], -r0
    b3c0:	03070501 	movweq	r0, #29953	; 0x7501
    b3c4:	00000001 	andeq	r0, r0, r1
    b3c8:	44000000 	strmi	r0, [r0], #-0
    b3cc:	01000000 	mrseq	r0, (UNDEF: 0)
    b3d0:	0008609c 	muleq	r8, ip, r0
    b3d4:	38f71800 	ldmcc	r7!, {fp, ip}^
    b3d8:	05010000 	streq	r0, [r1, #-0]
    b3dc:	0006c307 	andeq	ip, r6, r7, lsl #6
    b3e0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    b3e4:	00425519 	subeq	r5, r2, r9, lsl r5
    b3e8:	07070100 	streq	r0, [r7, -r0, lsl #2]
    b3ec:	00000103 	andeq	r0, r0, r3, lsl #2
    b3f0:	19749102 	ldmdbne	r4!, {r1, r8, ip, pc}^
    b3f4:	00004c4c 	andeq	r4, r0, ip, asr #24
    b3f8:	60070801 	andvs	r0, r7, r1, lsl #16
    b3fc:	02000008 	andeq	r0, r0, #8
    b400:	07007091 			; <UNDEFINED> instruction: 0x07007091
    b404:	000006c8 	andeq	r0, r0, r8, asr #13
    b408:	004c741d 	subeq	r7, ip, sp, lsl r4
    b40c:	07330100 	ldreq	r0, [r3, -r0, lsl #2]!
    b410:	00000000 	andeq	r0, r0, r0
    b414:	000000a0 	andeq	r0, r0, r0, lsr #1
    b418:	089a9c01 	ldmeq	sl, {r0, sl, fp, ip, pc}
    b41c:	85180000 	ldrhi	r0, [r8, #-0]
    b420:	01000044 	tsteq	r0, r4, asr #32
    b424:	02070733 	andeq	r0, r7, #13369344	; 0xcc0000
    b428:	91020000 	mrsls	r0, (UNDEF: 2)
    b42c:	4c4c196c 	mcrrmi	9, 6, r1, ip, cr12	; <UNPREDICTABLE>
    b430:	35010000 	strcc	r0, [r1, #-0]
    b434:	00089a07 	andeq	r9, r8, r7, lsl #20
    b438:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    b43c:	04cf0700 	strbeq	r0, [pc], #1792	; b444 <_Min_Stack_Size+0xb244>
    b440:	a5170000 	ldrge	r0, [r7, #-0]
    b444:	01000045 	tsteq	r0, r5, asr #32
    b448:	01030769 	tsteq	r3, r9, ror #14
    b44c:	00000000 	andeq	r0, r0, r0
    b450:	00c00000 	sbceq	r0, r0, r0
    b454:	9c010000 	stcls	0, cr0, [r1], {-0}
    b458:	0000093e 	andeq	r0, r0, lr, lsr r9
    b45c:	00448518 	subeq	r8, r4, r8, lsl r5
    b460:	07690100 	strbeq	r0, [r9, -r0, lsl #2]!
    b464:	00000207 	andeq	r0, r0, r7, lsl #4
    b468:	195c9102 	ldmdbne	ip, {r1, r8, ip, pc}^
    b46c:	00003f6e 	andeq	r3, r0, lr, ror #30
    b470:	03076b01 	movweq	r6, #31489	; 0x7b01
    b474:	02000001 	andeq	r0, r0, #1
    b478:	4c197491 	cfldrsmi	mvf7, [r9], {145}	; 0x91
    b47c:	0100004c 	tsteq	r0, ip, asr #32
    b480:	089a076c 	ldmeq	sl, {r2, r3, r5, r6, r8, r9, sl}
    b484:	91020000 	mrsls	r0, (UNDEF: 2)
    b488:	42a21970 	adcmi	r1, r2, #112, 18	; 0x1c0000
    b48c:	6d010000 	stcvs	0, cr0, [r1, #-0]
    b490:	00010e07 	andeq	r0, r1, r7, lsl #28
    b494:	68910200 	ldmvs	r1, {r9}
    b498:	0003901f 	andeq	r9, r3, pc, lsl r0
    b49c:	00000000 	andeq	r0, r0, r0
    b4a0:	00001a00 	andeq	r1, r0, r0, lsl #20
    b4a4:	07830100 	streq	r0, [r3, r0, lsl #2]
    b4a8:	00000924 	andeq	r0, r0, r4, lsr #18
    b4ac:	0000001a 	andeq	r0, r0, sl, lsl r0
    b4b0:	00001a00 	andeq	r1, r0, r0, lsl #20
    b4b4:	03a02000 	moveq	r2, #0
    b4b8:	91020000 	mrsls	r0, (UNDEF: 2)
    b4bc:	03ab2064 			; <UNDEFINED> instruction: 0x03ab2064
    b4c0:	91020000 	mrsls	r0, (UNDEF: 2)
    b4c4:	21000060 	tstcs	r0, r0, rrx
    b4c8:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    b4cc:	00000000 	andeq	r0, r0, r0
    b4d0:	00000006 	andeq	r0, r0, r6
    b4d4:	2207a701 	andcs	sl, r7, #262144	; 0x40000
    b4d8:	000003c3 	andeq	r0, r0, r3, asr #7
    b4dc:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    b4e0:	4ac41d00 	bmi	ff1128e8 <BootRAM+0xe083089>
    b4e4:	af010000 	svcge	0x00010000
    b4e8:	00886c07 	addeq	r6, r8, r7, lsl #24
    b4ec:	00006c08 	andeq	r6, r0, r8, lsl #24
    b4f0:	879c0100 	ldrhi	r0, [ip, r0, lsl #2]
    b4f4:	19000009 	stmdbne	r0, {r0, r3}
    b4f8:	00004255 	andeq	r4, r0, r5, asr r2
    b4fc:	0307b101 	movweq	fp, #28929	; 0x7101
    b500:	02000001 	andeq	r0, r0, #1
    b504:	cf217491 	svcgt	0x00217491
    b508:	8e000003 	cdphi	0, 0, cr0, cr0, cr3, {0}
    b50c:	12080088 	andne	r0, r8, #136	; 0x88
    b510:	01000000 	mrseq	r0, (UNDEF: 0)
    b514:	8e1a07f7 	mrchi	7, 0, r0, cr10, cr7, {7}
    b518:	12080088 	andne	r0, r8, #136	; 0x88
    b51c:	20000000 	andcs	r0, r0, r0
    b520:	000003db 	ldrdeq	r0, [r0], -fp
    b524:	00709102 	rsbseq	r9, r0, r2, lsl #2
    b528:	e91d0000 	ldmdb	sp, {}	; <UNPREDICTABLE>
    b52c:	01000045 	tsteq	r0, r5, asr #32
    b530:	00000829 	andeq	r0, r0, r9, lsr #16
    b534:	00300000 	eorseq	r0, r0, r0
    b538:	9c010000 	stcls	0, cr0, [r1], {-0}
    b53c:	000009c1 	andeq	r0, r0, r1, asr #19
    b540:	0003cf21 	andeq	ip, r3, r1, lsr #30
    b544:	00000000 	andeq	r0, r0, r0
    b548:	00001200 	andeq	r1, r0, r0, lsl #4
    b54c:	082e0100 	stmdaeq	lr!, {r8}
    b550:	0000001a 	andeq	r0, r0, sl, lsl r0
    b554:	00001200 	andeq	r1, r0, r0, lsl #4
    b558:	03db2000 	bicseq	r2, fp, #0
    b55c:	91020000 	mrsls	r0, (UNDEF: 2)
    b560:	00000074 	andeq	r0, r0, r4, ror r0
    b564:	0045b824 	subeq	fp, r5, r4, lsr #16
    b568:	08340100 	ldmdaeq	r4!, {r8}
    b56c:	080088d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, pc}
    b570:	0000001c 	andeq	r0, r0, ip, lsl r0
    b574:	98179c01 	ldmdals	r7, {r0, sl, fp, ip, pc}
    b578:	01000049 	tsteq	r0, r9, asr #32
    b57c:	0103087e 	tsteq	r3, lr, ror r8
    b580:	88f40000 	ldmhi	r4!, {}^	; <UNPREDICTABLE>
    b584:	011c0800 	tsteq	ip, r0, lsl #16
    b588:	9c010000 	stcls	0, cr0, [r1], {-0}
    b58c:	00000a25 	andeq	r0, r0, r5, lsr #20
    b590:	004c4c19 	subeq	r4, ip, r9, lsl ip
    b594:	08800100 	stmeq	r0, {r8}
    b598:	000004cf 	andeq	r0, r0, pc, asr #9
    b59c:	19749102 	ldmdbne	r4!, {r1, r8, ip, pc}^
    b5a0:	00004bac 	andeq	r4, r0, ip, lsr #23
    b5a4:	03088101 	movweq	r8, #33025	; 0x8101
    b5a8:	02000001 	andeq	r0, r0, #1
    b5ac:	921a7091 	andsls	r7, sl, #145	; 0x91
    b5b0:	2e080089 	cdpcs	0, 0, cr0, cr8, cr9, {4}
    b5b4:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    b5b8:	00004354 	andeq	r4, r0, r4, asr r3
    b5bc:	0e08b901 	vmlaeq.f16	s22, s16, s2	; <UNPREDICTABLE>
    b5c0:	02000001 	andeq	r0, r0, #1
    b5c4:	00006c91 	muleq	r0, r1, ip
    b5c8:	0048811e 	subeq	r8, r8, lr, lsl r1
    b5cc:	08ec0100 	stmiaeq	ip!, {r8}^
    b5d0:	00000119 	andeq	r0, r0, r9, lsl r1
    b5d4:	00000000 	andeq	r0, r0, r0
    b5d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    b5dc:	0a4f9c01 	beq	13f25e8 <_Min_Stack_Size+0x13f23e8>
    b5e0:	bd190000 	ldclt	0, cr0, [r9, #-0]
    b5e4:	0100004a 	tsteq	r0, sl, asr #32
    b5e8:	011908ee 	tsteq	r9, lr, ror #17
    b5ec:	91020000 	mrsls	r0, (UNDEF: 2)
    b5f0:	2b1e0074 	blcs	78b7c8 <_Min_Stack_Size+0x78b5c8>
    b5f4:	01000045 	tsteq	r0, r5, asr #32
    b5f8:	011908fb 			; <UNDEFINED> instruction: 0x011908fb
    b5fc:	00000000 	andeq	r0, r0, r0
    b600:	00200000 	eoreq	r0, r0, r0
    b604:	9c010000 	stcls	0, cr0, [r1], {-0}
    b608:	00000a88 	andeq	r0, r0, r8, lsl #21
    b60c:	00425519 	subeq	r5, r2, r9, lsl r5
    b610:	08fd0100 	ldmeq	sp!, {r8}^
    b614:	00000119 	andeq	r0, r0, r9, lsl r1
    b618:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
    b61c:	000042a2 	andeq	r4, r0, r2, lsr #5
    b620:	0e08fe01 	cdpeq	14, 0, cr15, cr8, cr1, {0}
    b624:	02000001 	andeq	r0, r0, #1
    b628:	25007491 	strcs	r7, [r0, #-1169]	; 0xfffffb6f
    b62c:	00004493 	muleq	r0, r3, r4
    b630:	0e091a01 	vmlaeq.f32	s2, s18, s2
    b634:	00000001 	andeq	r0, r0, r1
    b638:	14000000 	strne	r0, [r0], #-0
    b63c:	01000000 	mrseq	r0, (UNDEF: 0)
    b640:	4aaf1e9c 	bmi	febd30b8 <BootRAM+0xdb43859>
    b644:	22010000 	andcs	r0, r1, #0
    b648:	0000a309 	andeq	sl, r0, r9, lsl #6
    b64c:	00000000 	andeq	r0, r0, r0
    b650:	00002c00 	andeq	r2, r0, r0, lsl #24
    b654:	d79c0100 	ldrle	r0, [ip, r0, lsl #2]
    b658:	1800000a 	stmdane	r0, {r1, r3}
    b65c:	000048f0 	strdeq	r4, [r0], -r0
    b660:	07092201 	streq	r2, [r9, -r1, lsl #4]
    b664:	02000002 	andeq	r0, r0, #2
    b668:	4c196c91 	ldcmi	12, cr6, [r9], {145}	; 0x91
    b66c:	0100004c 	tsteq	r0, ip, asr #32
    b670:	04cf0924 	strbeq	r0, [pc], #2340	; b678 <_Min_Stack_Size+0xb478>
    b674:	91020000 	mrsls	r0, (UNDEF: 2)
    b678:	38170074 	ldmdacc	r7, {r2, r4, r5, r6}
    b67c:	01000044 	tsteq	r0, r4, asr #32
    b680:	01030a69 	tsteq	r3, r9, ror #20
    b684:	8a100000 	bhi	40b68c <_Min_Stack_Size+0x40b48c>
    b688:	01500800 	cmpeq	r0, r0, lsl #16
    b68c:	9c010000 	stcls	0, cr0, [r1], {-0}
    b690:	00000b51 	andeq	r0, r0, r1, asr fp
    b694:	004c4c19 	subeq	r4, ip, r9, lsl ip
    b698:	0a6b0100 	beq	1acbaa0 <_Min_Stack_Size+0x1acb8a0>
    b69c:	000004cf 	andeq	r0, r0, pc, asr #9
    b6a0:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
    b6a4:	00003d53 	andeq	r3, r0, r3, asr sp
    b6a8:	190a6c01 	stmdbne	sl, {r0, sl, fp, sp, lr}
    b6ac:	02000001 	andeq	r0, r0, #1
    b6b0:	e7196491 			; <UNDEFINED> instruction: 0xe7196491
    b6b4:	01000049 	tsteq	r0, r9, asr #32
    b6b8:	01030a6d 	tsteq	r3, sp, ror #20
    b6bc:	91020000 	mrsls	r0, (UNDEF: 2)
    b6c0:	8a221a74 	bhi	892098 <_Min_Stack_Size+0x891e98>
    b6c4:	00f00800 	rscseq	r0, r0, r0, lsl #16
    b6c8:	0d190000 	ldceq	0, cr0, [r9, #-0]
    b6cc:	01000046 	tsteq	r0, r6, asr #32
    b6d0:	06410a77 			; <UNDEFINED> instruction: 0x06410a77
    b6d4:	91020000 	mrsls	r0, (UNDEF: 2)
    b6d8:	8a361a70 	bhi	d920a0 <_Min_Stack_Size+0xd91ea0>
    b6dc:	00220800 	eoreq	r0, r2, r0, lsl #16
    b6e0:	4a190000 	bmi	64b6e8 <_Min_Stack_Size+0x64b4e8>
    b6e4:	01000046 	tsteq	r0, r6, asr #32
    b6e8:	0b510a7f 	bleq	144e0ec <_Min_Stack_Size+0x144deec>
    b6ec:	91020000 	mrsls	r0, (UNDEF: 2)
    b6f0:	0000006c 	andeq	r0, r0, ip, rrx
    b6f4:	01fc0406 	mvnseq	r0, r6, lsl #8
    b6f8:	331d0000 	tstcc	sp, #0
    b6fc:	01000049 	tsteq	r0, r9, asr #32
    b700:	8b600b83 	blhi	180e514 <_Min_Stack_Size+0x180e314>
    b704:	00d80800 	sbcseq	r0, r8, r0, lsl #16
    b708:	9c010000 	stcls	0, cr0, [r1], {-0}
    b70c:	00000bfb 	strdeq	r0, [r0], -fp
    b710:	008b7c26 	addeq	r7, fp, r6, lsr #24
    b714:	00004e08 	andeq	r4, r0, r8, lsl #28
    b718:	000b9900 	andeq	r9, fp, r0, lsl #18
    b71c:	4aee1900 	bmi	ffb91b24 <BootRAM+0xeb022c5>
    b720:	ac010000 	stcge	0, cr0, [r1], {-0}
    b724:	000c010b 	andeq	r0, ip, fp, lsl #2
    b728:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    b72c:	0047fb19 	subeq	pc, r7, r9, lsl fp	; <UNPREDICTABLE>
    b730:	0bac0100 	bleq	feb0bb38 <BootRAM+0xda7c2d9>
    b734:	00000580 	andeq	r0, r0, r0, lsl #11
    b738:	00709102 	rsbseq	r9, r0, r2, lsl #2
    b73c:	008bca1a 	addeq	ip, fp, sl, lsl sl
    b740:	00005008 	andeq	r5, r0, r8
    b744:	4b561900 	blmi	1591b4c <_Min_Stack_Size+0x159194c>
    b748:	b7010000 	strlt	r0, [r1, -r0]
    b74c:	00010e0b 	andeq	r0, r1, fp, lsl #28
    b750:	6c910200 	lfmvs	f0, 4, [r1], {0}
    b754:	0003e71f 	andeq	lr, r3, pc, lsl r7
    b758:	008bd000 	addeq	sp, fp, r0
    b75c:	00000a08 	andeq	r0, r0, r8, lsl #20
    b760:	0bb70100 	bleq	fedcbb68 <BootRAM+0xdd3c309>
    b764:	00000be0 	andeq	r0, r0, r0, ror #23
    b768:	0003f722 	andeq	pc, r3, r2, lsr #14
    b76c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    b770:	008bd01a 	addeq	sp, fp, sl, lsl r0
    b774:	00000a08 	andeq	r0, r0, r8, lsl #20
    b778:	04022000 	streq	r2, [r2], #-0
    b77c:	91020000 	mrsls	r0, (UNDEF: 2)
    b780:	1a000063 	bne	b914 <_Min_Stack_Size+0xb714>
    b784:	08008be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp, pc}
    b788:	0000003a 	andeq	r0, r0, sl, lsr r0
    b78c:	00434819 	subeq	r4, r3, r9, lsl r8
    b790:	0bb70100 	bleq	fedcbb98 <BootRAM+0xdd3c339>
    b794:	00000c06 	andeq	r0, r0, r6, lsl #24
    b798:	00689102 	rsbeq	r9, r8, r2, lsl #2
    b79c:	04060000 	streq	r0, [r6], #-0
    b7a0:	00000580 	andeq	r0, r0, r0, lsl #11
    b7a4:	000bfb07 	andeq	pc, fp, r7, lsl #22
    b7a8:	0b510700 	bleq	144d3b0 <_Min_Stack_Size+0x144d1b0>
    b7ac:	511d0000 	tstpl	sp, r0
    b7b0:	01000046 	tsteq	r0, r6, asr #32
    b7b4:	8c380bcc 			; <UNDEFINED> instruction: 0x8c380bcc
    b7b8:	002c0800 	eoreq	r0, ip, r0, lsl #16
    b7bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    b7c0:	00000c40 	andeq	r0, r0, r0, asr #24
    b7c4:	0043b718 	subeq	fp, r3, r8, lsl r7
    b7c8:	0bcc0100 	bleq	ff30bbd0 <BootRAM+0xe27c371>
    b7cc:	00000c06 	andeq	r0, r0, r6, lsl #24
    b7d0:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    b7d4:	00004b49 	andeq	r4, r0, r9, asr #22
    b7d8:	410bcc01 	tstmi	fp, r1, lsl #24
    b7dc:	02000006 	andeq	r0, r0, #6
    b7e0:	1d007091 	stcne	0, cr7, [r0, #-580]	; 0xfffffdbc
    b7e4:	00004b13 	andeq	r4, r0, r3, lsl fp
    b7e8:	000bdd01 	andeq	sp, fp, r1, lsl #26
    b7ec:	3c000000 	stccc	0, cr0, [r0], {-0}
    b7f0:	01000000 	mrseq	r0, (UNDEF: 0)
    b7f4:	000c849c 	muleq	ip, ip, r4
    b7f8:	43b71800 			; <UNDEFINED> instruction: 0x43b71800
    b7fc:	dd010000 	stcle	0, cr0, [r1, #-0]
    b800:	000b510b 	andeq	r5, fp, fp, lsl #2
    b804:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    b808:	003d5318 	eorseq	r5, sp, r8, lsl r3
    b80c:	0bdd0100 	bleq	ff74bc14 <BootRAM+0xe6bc3b5>
    b810:	00000641 	andeq	r0, r0, r1, asr #12
    b814:	18709102 	ldmdane	r0!, {r1, r8, ip, pc}^
    b818:	00004b49 	andeq	r4, r0, r9, asr #22
    b81c:	410bdd01 	tstmi	fp, r1, lsl #26
    b820:	02000006 	andeq	r0, r0, #6
    b824:	17006c91 			; <UNDEFINED> instruction: 0x17006c91
    b828:	000046e8 	andeq	r4, r0, r8, ror #13
    b82c:	030c1601 	movweq	r1, #50689	; 0xc601
    b830:	64000001 	strvs	r0, [r0], #-1
    b834:	a808008c 	stmdage	r8, {r2, r3, r7}
    b838:	01000000 	mrseq	r0, (UNDEF: 0)
    b83c:	000ccc9c 	muleq	ip, ip, ip
    b840:	43b71800 			; <UNDEFINED> instruction: 0x43b71800
    b844:	16010000 	strne	r0, [r1], -r0
    b848:	000cd70c 	andeq	sp, ip, ip, lsl #14
    b84c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    b850:	0044d919 	subeq	sp, r4, r9, lsl r9
    b854:	0c180100 	ldfeqs	f0, [r8], {-0}
    b858:	000004cf 	andeq	r0, r0, pc, asr #9
    b85c:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
    b860:	00004255 	andeq	r4, r0, r5, asr r2
    b864:	030c1901 	movweq	r1, #51457	; 0xc901
    b868:	02000001 	andeq	r0, r0, #1
    b86c:	06007491 			; <UNDEFINED> instruction: 0x06007491
    b870:	000cd204 	andeq	sp, ip, r4, lsl #4
    b874:	01fc0700 	mvnseq	r0, r0, lsl #14
    b878:	cc070000 	stcgt	0, cr0, [r7], {-0}
    b87c:	1d00000c 	stcne	0, cr0, [r0, #-48]	; 0xffffffd0
    b880:	000046a0 	andeq	r4, r0, r0, lsr #13
    b884:	000c5a01 	andeq	r5, ip, r1, lsl #20
    b888:	84000000 	strhi	r0, [r0], #-0
    b88c:	01000000 	mrseq	r0, (UNDEF: 0)
    b890:	000d209c 	muleq	sp, ip, r0
    b894:	4c971800 	ldcmi	8, cr1, [r7], {0}
    b898:	5a010000 	bpl	4b8a0 <_Min_Stack_Size+0x4b6a0>
    b89c:	0001f60c 	andeq	pc, r1, ip, lsl #12
    b8a0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    b8a4:	003d5318 	eorseq	r5, sp, r8, lsl r3
    b8a8:	0c5a0100 	ldfeqe	f0, [sl], {-0}
    b8ac:	00000641 	andeq	r0, r0, r1, asr #12
    b8b0:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
    b8b4:	000044d9 	ldrdeq	r4, [r0], -r9
    b8b8:	cf0c5c01 	svcgt	0x000c5c01
    b8bc:	02000004 	andeq	r0, r0, #4
    b8c0:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
    b8c4:	00004409 	andeq	r4, r0, r9, lsl #8
    b8c8:	000c7c01 	andeq	r7, ip, r1, lsl #24
    b8cc:	30000000 	andcc	r0, r0, r0
    b8d0:	01000000 	mrseq	r0, (UNDEF: 0)
    b8d4:	000d469c 	muleq	sp, ip, r6
    b8d8:	485e1800 	ldmdami	lr, {fp, ip}^
    b8dc:	7c010000 	stcvc	0, cr0, [r1], {-0}
    b8e0:	000d4c0c 	andeq	r4, sp, ip, lsl #24
    b8e4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    b8e8:	01040600 	tsteq	r4, r0, lsl #12
    b8ec:	07000003 	streq	r0, [r0, -r3]
    b8f0:	00000d46 	andeq	r0, r0, r6, asr #26
    b8f4:	00489327 	subeq	r9, r8, r7, lsr #6
    b8f8:	0c880100 	stfeqs	f0, [r8], {0}
    b8fc:	08008d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, pc}
    b900:	0000002c 	andeq	r0, r0, ip, lsr #32
    b904:	0d779c01 	ldcleq	12, cr9, [r7, #-4]!
    b908:	5e180000 	cdppl	0, 1, cr0, cr8, cr0, {0}
    b90c:	01000048 	tsteq	r0, r8, asr #32
    b910:	0d4c0c88 	stcleq	12, cr0, [ip, #-544]	; 0xfffffde0
    b914:	91020000 	mrsls	r0, (UNDEF: 2)
    b918:	24170074 	ldrcs	r0, [r7], #-116	; 0xffffff8c
    b91c:	0100004a 	tsteq	r0, sl, asr #32
    b920:	01030c90 			; <UNDEFINED> instruction: 0x01030c90
    b924:	8d380000 	ldchi	0, cr0, [r8, #-0]
    b928:	008c0800 	addeq	r0, ip, r0, lsl #16
    b92c:	9c010000 	stcls	0, cr0, [r1], {-0}
    b930:	00000de7 	andeq	r0, r0, r7, ror #27
    b934:	00485e18 	subeq	r5, r8, r8, lsl lr
    b938:	0c900100 	ldfeqs	f0, [r0], {0}
    b93c:	00000d4c 	andeq	r0, r0, ip, asr #26
    b940:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
    b944:	00004b48 	andeq	r4, r0, r8, asr #22
    b948:	3c0c9001 	stccc	0, cr9, [ip], {1}
    b94c:	02000006 	andeq	r0, r0, #6
    b950:	55196091 	ldrpl	r6, [r9, #-145]	; 0xffffff6f
    b954:	01000042 	tsteq	r0, r2, asr #32
    b958:	01030c92 			; <UNDEFINED> instruction: 0x01030c92
    b95c:	91020000 	mrsls	r0, (UNDEF: 2)
    b960:	8d461a74 	vstrhi	s3, [r6, #-464]	; 0xfffffe30
    b964:	00680800 	rsbeq	r0, r8, r0, lsl #16
    b968:	0d190000 	ldceq	0, cr0, [r9, #-0]
    b96c:	01000046 	tsteq	r0, r6, asr #32
    b970:	06410c9a 			; <UNDEFINED> instruction: 0x06410c9a
    b974:	91020000 	mrsls	r0, (UNDEF: 2)
    b978:	45071970 	strmi	r1, [r7, #-2416]	; 0xfffff690
    b97c:	9b010000 	blls	4b984 <_Min_Stack_Size+0x4b784>
    b980:	0006410c 	andeq	r4, r6, ip, lsl #2
    b984:	6c910200 	lfmvs	f0, 4, [r1], {0}
    b988:	6a240000 	bvs	90b990 <_Min_Stack_Size+0x90b790>
    b98c:	0100004a 	tsteq	r0, sl, asr #32
    b990:	8dc40ccf 	stclhi	12, cr0, [r4, #828]	; 0x33c
    b994:	00180800 	andseq	r0, r8, r0, lsl #16
    b998:	9c010000 	stcls	0, cr0, [r1], {-0}
    b99c:	0047351b 	subeq	r3, r7, fp, lsl r5
    b9a0:	0d060100 	stfeqs	f0, [r6, #-0]
    b9a4:	08008ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, pc}
    b9a8:	00000030 	andeq	r0, r0, r0, lsr r0
    b9ac:	0e1f9c01 	cdpeq	12, 1, cr9, cr15, cr1, {0}
    b9b0:	2f180000 	svccs	0x00180000
    b9b4:	01000039 	tsteq	r0, r9, lsr r0
    b9b8:	00a10d06 	adceq	r0, r1, r6, lsl #26
    b9bc:	91020000 	mrsls	r0, (UNDEF: 2)
    b9c0:	801b0074 	andshi	r0, fp, r4, ror r0
    b9c4:	0100004c 	tsteq	r0, ip, asr #32
    b9c8:	8e0c0dda 	mcrhi	13, 0, r0, cr12, cr10, {6}
    b9cc:	00740800 	rsbseq	r0, r4, r0, lsl #16
    b9d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    b9d4:	00000e45 	andeq	r0, r0, r5, asr #28
    b9d8:	00433d19 	subeq	r3, r3, r9, lsl sp
    b9dc:	0ddc0100 	ldfeqe	f0, [ip]
    b9e0:	0000010e 	andeq	r0, r0, lr, lsl #2
    b9e4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    b9e8:	004cb528 	subeq	fp, ip, r8, lsr #10
    b9ec:	0dfa0100 	ldfeqe	f0, [sl]
    b9f0:	08008e80 	stmdaeq	r0, {r7, r9, sl, fp, pc}
    b9f4:	0000000c 	andeq	r0, r0, ip
    b9f8:	08299c01 	stmdaeq	r9!, {r0, sl, fp, ip, pc}
    b9fc:	01000048 	tsteq	r0, r8, asr #32
    ba00:	8e8c0f28 	cdphi	15, 8, cr0, cr12, cr8, {1}
    ba04:	00400800 	subeq	r0, r0, r0, lsl #16
    ba08:	9c010000 	stcls	0, cr0, [r1], {-0}
    ba0c:	00000e7d 	andeq	r0, r0, sp, ror lr
    ba10:	004c4c19 	subeq	r4, ip, r9, lsl ip
    ba14:	0f2a0100 	svceq	0x002a0100
    ba18:	000004cf 	andeq	r0, r0, pc, asr #9
    ba1c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    ba20:	004bbc1e 	subeq	fp, fp, lr, lsl ip
    ba24:	0f420100 	svceq	0x00420100
    ba28:	00000207 	andeq	r0, r0, r7, lsl #4
    ba2c:	00000000 	andeq	r0, r0, r0
    ba30:	0000001c 	andeq	r0, r0, ip, lsl r0
    ba34:	0ea79c01 	cdpeq	12, 10, cr9, cr7, cr1, {0}
    ba38:	55190000 	ldrpl	r0, [r9, #-0]
    ba3c:	01000042 	tsteq	r0, r2, asr #32
    ba40:	02070f44 	andeq	r0, r7, #68, 30	; 0x110
    ba44:	91020000 	mrsls	r0, (UNDEF: 2)
    ba48:	89170074 	ldmdbhi	r7, {r2, r4, r5, r6}
    ba4c:	0100004a 	tsteq	r0, sl, asr #32
    ba50:	01030f6f 	tsteq	r3, pc, ror #30
    ba54:	8ecc0000 	cdphi	0, 12, cr0, cr12, cr0, {0}
    ba58:	01000800 	tsteq	r0, r0, lsl #16
    ba5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    ba60:	00000eef 	andeq	r0, r0, pc, ror #29
    ba64:	0049f718 	subeq	pc, r9, r8, lsl r7	; <UNPREDICTABLE>
    ba68:	0f6f0100 	svceq	0x006f0100
    ba6c:	000006c3 	andeq	r0, r0, r3, asr #13
    ba70:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    ba74:	00004a9e 	muleq	r0, lr, sl
    ba78:	9a0f7101 	bls	3e7e84 <_Min_Stack_Size+0x3e7c84>
    ba7c:	02000008 	andeq	r0, r0, #8
    ba80:	55197091 	ldrpl	r7, [r9, #-145]	; 0xffffff6f
    ba84:	01000042 	tsteq	r0, r2, asr #32
    ba88:	01030f72 	tsteq	r3, r2, ror pc
    ba8c:	91020000 	mrsls	r0, (UNDEF: 2)
    ba90:	d0170074 	andsle	r0, r7, r4, ror r0
    ba94:	01000046 	tsteq	r0, r6, asr #32
    ba98:	01030fc6 	smlabteq	r3, r6, pc, r0	; <UNPREDICTABLE>
    ba9c:	8fcc0000 	svchi	0x00cc0000
    baa0:	00c80800 	sbceq	r0, r8, r0, lsl #16
    baa4:	9c010000 	stcls	0, cr0, [r1], {-0}
    baa8:	00000f37 	andeq	r0, r0, r7, lsr pc
    baac:	0049f718 	subeq	pc, r9, r8, lsl r7	; <UNPREDICTABLE>
    bab0:	0fc60100 	svceq	0x00c60100
    bab4:	000006c3 	andeq	r0, r0, r3, asr #13
    bab8:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    babc:	00004c4c 	andeq	r4, r0, ip, asr #24
    bac0:	9a0fc801 	bls	3fdacc <_Min_Stack_Size+0x3fd8cc>
    bac4:	02000008 	andeq	r0, r0, #8
    bac8:	55197091 	ldrpl	r7, [r9, #-145]	; 0xffffff6f
    bacc:	01000042 	tsteq	r0, r2, asr #32
    bad0:	01030fc9 	smlabteq	r3, r9, pc, r0	; <UNPREDICTABLE>
    bad4:	91020000 	mrsls	r0, (UNDEF: 2)
    bad8:	811d0074 	tsthi	sp, r4, ror r0
    badc:	01000045 	tsteq	r0, r5, asr #32
    bae0:	90941016 	addsls	r1, r4, r6, lsl r0
    bae4:	00f00800 	rscseq	r0, r0, r0, lsl #16
    bae8:	9c010000 	stcls	0, cr0, [r1], {-0}
    baec:	00000fa8 	andeq	r0, r0, r8, lsr #31
    baf0:	0049f718 	subeq	pc, r9, r8, lsl r7	; <UNPREDICTABLE>
    baf4:	10160100 	andsne	r0, r6, r0, lsl #2
    baf8:	000006c3 	andeq	r0, r0, r3, asr #13
    bafc:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
    bb00:	00004966 	andeq	r4, r0, r6, ror #18
    bb04:	0e101601 	cfmsub32eq	mvax0, mvfx1, mvfx0, mvfx1
    bb08:	02000001 	andeq	r0, r0, #1
    bb0c:	4c196091 	ldcmi	0, cr6, [r9], {145}	; 0x91
    bb10:	0100004c 	tsteq	r0, ip, asr #32
    bb14:	089a1018 	ldmeq	sl, {r3, r4, ip}
    bb18:	91020000 	mrsls	r0, (UNDEF: 2)
    bb1c:	4b831970 	blmi	fe0d20e4 <BootRAM+0xd042885>
    bb20:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    bb24:	00010e10 	andeq	r0, r1, r0, lsl lr
    bb28:	68910200 	ldmvs	r1, {r9}
    bb2c:	00492319 	subeq	r2, r9, r9, lsl r3
    bb30:	10190100 	andsne	r0, r9, r0, lsl #2
    bb34:	0000010e 	andeq	r0, r0, lr, lsl #2
    bb38:	19749102 	ldmdbne	r4!, {r1, r8, ip, pc}^
    bb3c:	000045d6 	ldrdeq	r4, [r0], -r6
    bb40:	a8101a01 	ldmdage	r0, {r0, r9, fp, ip}
    bb44:	0200000f 	andeq	r0, r0, #15
    bb48:	07006c91 			; <UNDEFINED> instruction: 0x07006c91
    bb4c:	0000010e 	andeq	r0, r0, lr, lsl #2
    bb50:	0048c51e 	subeq	ip, r8, lr, lsl r5
    bb54:	11b50100 			; <UNDEFINED> instruction: 0x11b50100
    bb58:	00000119 	andeq	r0, r0, r9, lsl r1
    bb5c:	00000000 	andeq	r0, r0, r0
    bb60:	00000030 	andeq	r0, r0, r0, lsr r0
    bb64:	0fd79c01 	svceq	0x00d79c01
    bb68:	54190000 	ldrpl	r0, [r9], #-0
    bb6c:	01000042 	tsteq	r0, r2, asr #32
    bb70:	011911b7 			; <UNDEFINED> instruction: 0x011911b7
    bb74:	91020000 	mrsls	r0, (UNDEF: 2)
    bb78:	72250074 	eorvc	r0, r5, #116	; 0x74
    bb7c:	01000046 	tsteq	r0, r6, asr #32
    bb80:	020711c5 	andeq	r1, r7, #1073741873	; 0x40000031
    bb84:	91840000 	orrls	r0, r4, r0
    bb88:	00280800 	eoreq	r0, r8, r0, lsl #16
    bb8c:	9c010000 	stcls	0, cr0, [r1], {-0}
    bb90:	00474117 	subeq	r4, r7, r7, lsl r1
    bb94:	11d60100 	bicsne	r0, r6, r0, lsl #2
    bb98:	000000d1 	ldrdeq	r0, [r0], -r1
    bb9c:	00000000 	andeq	r0, r0, r0
    bba0:	00000090 	muleq	r0, r0, r0
    bba4:	10359c01 	eorsne	r9, r5, r1, lsl #24
    bba8:	f5180000 			; <UNDEFINED> instruction: 0xf5180000
    bbac:	01000044 	tsteq	r0, r4, asr #32
    bbb0:	010311d6 	ldrdeq	r1, [r3, -r6]
    bbb4:	91020000 	mrsls	r0, (UNDEF: 2)
    bbb8:	4b49186c 	blmi	1251d70 <_Min_Stack_Size+0x1251b70>
    bbbc:	d6010000 	strle	r0, [r1], -r0
    bbc0:	00011911 	andeq	r1, r1, r1, lsl r9
    bbc4:	68910200 	ldmvs	r1, {r9}
    bbc8:	0047ca19 	subeq	ip, r7, r9, lsl sl
    bbcc:	11d80100 	bicsne	r0, r8, r0, lsl #2
    bbd0:	000000d1 	ldrdeq	r0, [r0], -r1
    bbd4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    bbd8:	00475217 	subeq	r5, r7, r7, lsl r2
    bbdc:	121a0100 	andsne	r0, sl, #0, 2
    bbe0:	00000103 	andeq	r0, r0, r3, lsl #2
    bbe4:	00000000 	andeq	r0, r0, r0
    bbe8:	000000b4 	strheq	r0, [r0], -r4
    bbec:	109b9c01 	addsne	r9, fp, r1, lsl #24
    bbf0:	5a180000 	bpl	60bbf8 <_Min_Stack_Size+0x60b9f8>
    bbf4:	01000045 	tsteq	r0, r5, asr #32
    bbf8:	00d1121a 	sbcseq	r1, r1, sl, lsl r2
    bbfc:	91020000 	mrsls	r0, (UNDEF: 2)
    bc00:	4363186c 	cmnmi	r3, #108, 16	; 0x6c0000
    bc04:	1a010000 	bne	4bc0c <_Min_Stack_Size+0x4ba0c>
    bc08:	0000d112 	andeq	sp, r0, r2, lsl r1
    bc0c:	68910200 	ldmvs	r1, {r9}
    bc10:	004a5518 	subeq	r5, sl, r8, lsl r5
    bc14:	121a0100 	andsne	r0, sl, #0, 2
    bc18:	0000109b 	muleq	r0, fp, r0
    bc1c:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
    bc20:	00004b49 	andeq	r4, r0, r9, asr #22
    bc24:	19121a01 	ldmdbne	r2, {r0, r9, fp, ip}
    bc28:	02000001 	andeq	r0, r0, #1
    bc2c:	55196091 	ldrpl	r6, [r9, #-145]	; 0xffffff6f
    bc30:	01000042 	tsteq	r0, r2, asr #32
    bc34:	0103121c 	tsteq	r3, ip, lsl r2
    bc38:	91020000 	mrsls	r0, (UNDEF: 2)
    bc3c:	04060074 	streq	r0, [r6], #-116	; 0xffffff8c
    bc40:	000000d1 	ldrdeq	r0, [r0], -r1
    bc44:	0044c617 	subeq	ip, r4, r7, lsl r6
    bc48:	126a0100 	rsbne	r0, sl, #0, 2
    bc4c:	00000103 	andeq	r0, r0, r3, lsl #2
    bc50:	00000000 	andeq	r0, r0, r0
    bc54:	00000110 	andeq	r0, r0, r0, lsl r1
    bc58:	11259c01 			; <UNDEFINED> instruction: 0x11259c01
    bc5c:	fd180000 	ldc2	0, cr0, [r8, #-0]
    bc60:	01000048 	tsteq	r0, r8, asr #32
    bc64:	0207126a 	andeq	r1, r7, #-1610612730	; 0xa0000006
    bc68:	91020000 	mrsls	r0, (UNDEF: 2)
    bc6c:	4a0d1864 	bmi	351e04 <_Min_Stack_Size+0x351c04>
    bc70:	6a010000 	bvs	4bc78 <_Min_Stack_Size+0x4ba78>
    bc74:	0000d112 	andeq	sp, r0, r2, lsl r1
    bc78:	60910200 	addsvs	r0, r1, r0, lsl #4
    bc7c:	0048bd18 	subeq	fp, r8, r8, lsl sp
    bc80:	126a0100 	rsbne	r0, sl, #0, 2
    bc84:	000002d1 	ldrdeq	r0, [r0], -r1
    bc88:	185f9102 	ldmdane	pc, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
    bc8c:	00004841 	andeq	r4, r0, r1, asr #16
    bc90:	9b126a01 	blls	4a649c <_Min_Stack_Size+0x4a629c>
    bc94:	02000010 	andeq	r0, r0, #16
    bc98:	4c195891 	ldcmi	8, cr5, [r9], {145}	; 0x91
    bc9c:	0100004c 	tsteq	r0, ip, asr #32
    bca0:	04cf126c 	strbeq	r1, [pc], #620	; bca8 <_Min_Stack_Size+0xbaa8>
    bca4:	91020000 	mrsls	r0, (UNDEF: 2)
    bca8:	42551970 	subsmi	r1, r5, #112, 18	; 0x1c0000
    bcac:	6d010000 	stcvs	0, cr0, [r1, #-0]
    bcb0:	00010312 	andeq	r0, r1, r2, lsl r3
    bcb4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    bcb8:	0043f319 	subeq	pc, r3, r9, lsl r3	; <UNPREDICTABLE>
    bcbc:	126e0100 	rsbne	r0, lr, #0, 2
    bcc0:	000000bb 	strheq	r0, [r0], -fp
    bcc4:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    bcc8:	00441e17 	subeq	r1, r4, r7, lsl lr
    bccc:	12dc0100 	sbcsne	r0, ip, #0, 2
    bcd0:	00000103 	andeq	r0, r0, r3, lsl #2
    bcd4:	00000000 	andeq	r0, r0, r0
    bcd8:	0000014c 	andeq	r0, r0, ip, asr #2
    bcdc:	120f9c01 	andne	r9, pc, #256	; 0x100
    bce0:	fd180000 	ldc2	0, cr0, [r8, #-0]
    bce4:	01000048 	tsteq	r0, r8, asr #32
    bce8:	020712dc 	andeq	r1, r7, #220, 4	; 0xc000000d
    bcec:	91020000 	mrsls	r0, (UNDEF: 2)
    bcf0:	4a0d1854 	bmi	351e48 <_Min_Stack_Size+0x351c48>
    bcf4:	dc010000 	stcle	0, cr0, [r1], {-0}
    bcf8:	0000d112 	andeq	sp, r0, r2, lsl r1
    bcfc:	50910200 	addspl	r0, r1, r0, lsl #4
    bd00:	0048bd18 	subeq	fp, r8, r8, lsl sp
    bd04:	12dc0100 	sbcsne	r0, ip, #0, 2
    bd08:	000002d1 	ldrdeq	r0, [r0], -r1
    bd0c:	184f9102 	stmdane	pc, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
    bd10:	00004841 	andeq	r4, r0, r1, asr #16
    bd14:	9b12dc01 	blls	4c2d20 <_Min_Stack_Size+0x4c2b20>
    bd18:	02000010 	andeq	r0, r0, #16
    bd1c:	e9184891 	ldmdb	r8, {r0, r4, r7, fp, lr}
    bd20:	01000042 	tsteq	r0, r2, asr #32
    bd24:	120f12dc 	andne	r1, pc, #220, 4	; 0xc000000d
    bd28:	91020000 	mrsls	r0, (UNDEF: 2)
    bd2c:	4c4c1900 	mcrrmi	9, 0, r1, ip, cr0	; <UNPREDICTABLE>
    bd30:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    bd34:	0004cf12 	andeq	ip, r4, r2, lsl pc
    bd38:	70910200 	addsvc	r0, r1, r0, lsl #4
    bd3c:	0043f319 	subeq	pc, r3, r9, lsl r3	; <UNPREDICTABLE>
    bd40:	12df0100 	sbcsne	r0, pc, #0, 2
    bd44:	000000bb 	strheq	r0, [r0], -fp
    bd48:	19679102 	stmdbne	r7!, {r1, r8, ip, pc}^
    bd4c:	00004255 	andeq	r4, r0, r5, asr r2
    bd50:	0312e001 	tsteq	r2, #1
    bd54:	02000001 	andeq	r0, r0, #1
    bd58:	a2197491 	andsge	r7, r9, #-1862270976	; 0x91000000
    bd5c:	01000042 	tsteq	r0, r2, asr #32
    bd60:	010e12e1 	smlatteq	lr, r1, r2, r1
    bd64:	91020000 	mrsls	r0, (UNDEF: 2)
    bd68:	03901f68 	orrseq	r1, r0, #104, 30	; 0x1a0
    bd6c:	00000000 	andeq	r0, r0, r0
    bd70:	001a0000 	andseq	r0, sl, r0
    bd74:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    bd78:	0011f512 	andseq	pc, r1, r2, lsl r5	; <UNPREDICTABLE>
    bd7c:	00001a00 	andeq	r1, r0, r0, lsl #20
    bd80:	001a0000 	andseq	r0, sl, r0
    bd84:	a0200000 	eorge	r0, r0, r0
    bd88:	02000003 	andeq	r0, r0, #3
    bd8c:	ab206091 	blge	823fd8 <_Min_Stack_Size+0x823dd8>
    bd90:	02000003 	andeq	r0, r0, #3
    bd94:	00005c91 	muleq	r0, r1, ip
    bd98:	0003b721 	andeq	fp, r3, r1, lsr #14
    bd9c:	00000000 	andeq	r0, r0, r0
    bda0:	00000600 	andeq	r0, r0, r0, lsl #12
    bda4:	13530100 	cmpne	r3, #0, 2
    bda8:	0003c322 	andeq	ip, r3, r2, lsr #6
    bdac:	6c910200 	lfmvs	f0, 4, [r1], {0}
    bdb0:	04060000 	streq	r0, [r6], #-0
    bdb4:	00000103 	andeq	r0, r0, r3, lsl #2
    bdb8:	0049a71d 	subeq	sl, r9, sp, lsl r7
    bdbc:	135d0100 	cmpne	sp, #0, 2
    bdc0:	00000000 	andeq	r0, r0, r0
    bdc4:	000000e4 	andeq	r0, r0, r4, ror #1
    bdc8:	12bf9c01 	adcsne	r9, pc, #256	; 0x100
    bdcc:	fd180000 	ldc2	0, cr0, [r8, #-0]
    bdd0:	01000048 	tsteq	r0, r8, asr #32
    bdd4:	0207135d 	andeq	r1, r7, #1946157057	; 0x74000001
    bdd8:	91020000 	mrsls	r0, (UNDEF: 2)
    bddc:	42e9185c 	rscmi	r1, r9, #92, 16	; 0x5c0000
    bde0:	5d010000 	stcpl	0, cr0, [r1, #-0]
    bde4:	00120f13 	andseq	r0, r2, r3, lsl pc
    bde8:	58910200 	ldmpl	r1, {r9}
    bdec:	004c4c19 	subeq	r4, ip, r9, lsl ip
    bdf0:	135f0100 	cmpne	pc, #0, 2
    bdf4:	000004cf 	andeq	r0, r0, pc, asr #9
    bdf8:	19749102 	ldmdbne	r4!, {r1, r8, ip, pc}^
    bdfc:	000043f3 	strdeq	r4, [r0], -r3
    be00:	bb136001 	bllt	4e3e0c <_Min_Stack_Size+0x4e3c0c>
    be04:	02000000 	andeq	r0, r0, #0
    be08:	a2196b91 	andsge	r6, r9, #148480	; 0x24400
    be0c:	01000042 	tsteq	r0, r2, asr #32
    be10:	010e1361 	tsteq	lr, r1, ror #6
    be14:	91020000 	mrsls	r0, (UNDEF: 2)
    be18:	03901f6c 	orrseq	r1, r0, #108, 30	; 0x1b0
    be1c:	00000000 	andeq	r0, r0, r0
    be20:	001a0000 	andseq	r0, sl, r0
    be24:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    be28:	0012a513 	andseq	sl, r2, r3, lsl r5
    be2c:	00001a00 	andeq	r1, r0, r0, lsl #20
    be30:	001a0000 	andseq	r0, sl, r0
    be34:	a0200000 	eorge	r0, r0, r0
    be38:	02000003 	andeq	r0, r0, #3
    be3c:	ab206491 	blge	825088 <_Min_Stack_Size+0x824e88>
    be40:	02000003 	andeq	r0, r0, #3
    be44:	00006091 	muleq	r0, r1, r0
    be48:	0003b721 	andeq	fp, r3, r1, lsr #14
    be4c:	00000000 	andeq	r0, r0, r0
    be50:	00000600 	andeq	r0, r0, r0, lsl #12
    be54:	13ab0100 			; <UNDEFINED> instruction: 0x13ab0100
    be58:	0003c322 	andeq	ip, r3, r2, lsr #6
    be5c:	70910200 	addsvc	r0, r1, r0, lsl #4
    be60:	32170000 	andscc	r0, r7, #0
    be64:	0100004b 	tsteq	r0, fp, asr #32
    be68:	010313b4 			; <UNDEFINED> instruction: 0x010313b4
    be6c:	00000000 	andeq	r0, r0, r0
    be70:	004c0000 	subeq	r0, ip, r0
    be74:	9c010000 	stcls	0, cr0, [r1], {-0}
    be78:	00001307 	andeq	r1, r0, r7, lsl #6
    be7c:	0038f718 	eorseq	pc, r8, r8, lsl r7	; <UNPREDICTABLE>
    be80:	13b40100 			; <UNDEFINED> instruction: 0x13b40100
    be84:	00000207 	andeq	r0, r0, r7, lsl #4
    be88:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    be8c:	00004c4c 	andeq	r4, r0, ip, asr #24
    be90:	cf13b601 	svcgt	0x0013b601
    be94:	02000004 	andeq	r0, r0, #4
    be98:	55197091 	ldrpl	r7, [r9, #-145]	; 0xffffff6f
    be9c:	01000042 	tsteq	r0, r2, asr #32
    bea0:	010313b7 			; <UNDEFINED> instruction: 0x010313b7
    bea4:	91020000 	mrsls	r0, (UNDEF: 2)
    bea8:	df1b0074 	svcle	0x001b0074
    beac:	0100004b 	tsteq	r0, fp, asr #32
    beb0:	91ac13d9 	ldrdls	r1, [ip, r9]!
    beb4:	00cc0800 	sbceq	r0, ip, r0, lsl #16
    beb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    bebc:	0000135a 	andeq	r1, r0, sl, asr r3
    bec0:	004b4918 	subeq	r4, fp, r8, lsl r9
    bec4:	13d90100 	bicsne	r0, r9, #0, 2
    bec8:	00000119 	andeq	r0, r0, r9, lsl r1
    becc:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    bed0:	00004ad8 	ldrdeq	r4, [r0], -r8
    bed4:	5a13d901 	bpl	5022e0 <_Min_Stack_Size+0x5020e0>
    bed8:	02000013 	andeq	r0, r0, #19
    bedc:	31196891 			; <UNDEFINED> instruction: 0x31196891
    bee0:	0100004c 	tsteq	r0, ip, asr #32
    bee4:	011913db 			; <UNDEFINED> instruction: 0x011913db
    bee8:	91020000 	mrsls	r0, (UNDEF: 2)
    beec:	460d1970 			; <UNDEFINED> instruction: 0x460d1970
    bef0:	dc010000 	stcle	0, cr0, [r1], {-0}
    bef4:	00064113 	andeq	r4, r6, r3, lsl r1
    bef8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    befc:	01030700 	tsteq	r3, r0, lsl #14
    bf00:	fc100000 	ldc2	0, cr0, [r0], {-0}
    bf04:	6f000001 	svcvs	0x00000001
    bf08:	11000013 	tstne	r0, r3, lsl r0
    bf0c:	0000009a 	muleq	r0, sl, r0
    bf10:	e1190004 	tst	r9, r4
    bf14:	01000043 	tsteq	r0, r3, asr #32
    bf18:	135f0154 	cmpne	pc, #84, 2
    bf1c:	03050000 	movweq	r0, #20480	; 0x5000
    bf20:	20000154 	andcs	r0, r0, r4, asr r1
    bf24:	00445419 	subeq	r5, r4, r9, lsl r4
    bf28:	01550100 	cmpeq	r5, r0, lsl #2
    bf2c:	000001fc 	strdeq	r0, [r0], -ip
    bf30:	01b80305 			; <UNDEFINED> instruction: 0x01b80305
    bf34:	66192000 	ldrvs	r2, [r9], -r0
    bf38:	01000044 	tsteq	r0, r4, asr #32
    bf3c:	01fc0156 	mvnseq	r0, r6, asr r1
    bf40:	03050000 	movweq	r0, #20480	; 0x5000
    bf44:	200001cc 	andcs	r0, r0, ip, asr #3
    bf48:	0049be19 	subeq	fp, r9, r9, lsl lr
    bf4c:	01570100 	cmpeq	r7, r0, lsl #2
    bf50:	000013b7 			; <UNDEFINED> instruction: 0x000013b7
    bf54:	01e00305 	mvneq	r0, r5, lsl #6
    bf58:	510c2000 	mrspl	r2, (UNDEF: 12)
    bf5c:	1900000b 	stmdbne	r0, {r0, r1, r3}
    bf60:	00004630 	andeq	r4, r0, r0, lsr r6
    bf64:	b7015801 	strlt	r5, [r1, -r1, lsl #16]
    bf68:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    bf6c:	0001e403 	andeq	lr, r1, r3, lsl #8
    bf70:	456f1920 	strbmi	r1, [pc, #-2336]!	; b658 <_Min_Stack_Size+0xb458>
    bf74:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    bf78:	0001fc01 	andeq	pc, r1, r1, lsl #24
    bf7c:	e8030500 	stmda	r3, {r8, sl}
    bf80:	19200001 	stmdbne	r0!, {r0}
    bf84:	0000461d 	andeq	r4, r0, sp, lsl r6
    bf88:	fc016401 	stc2	4, cr6, [r1], {1}
    bf8c:	05000001 	streq	r0, [r0, #-1]
    bf90:	0001fc03 	andeq	pc, r1, r3, lsl #24
    bf94:	4c0b1920 			; <UNDEFINED> instruction: 0x4c0b1920
    bf98:	6f010000 	svcvs	0x00010000
    bf9c:	0001f101 	andeq	pc, r1, r1, lsl #2
    bfa0:	10030500 	andne	r0, r3, r0, lsl #10
    bfa4:	19200002 	stmdbne	r0!, {r1}
    bfa8:	000047bf 			; <UNDEFINED> instruction: 0x000047bf
    bfac:	16017001 	strne	r7, [r1], -r1
    bfb0:	05000014 	streq	r0, [r0, #-20]	; 0xffffffec
    bfb4:	00021403 	andeq	r1, r2, r3, lsl #8
    bfb8:	01190c20 	tsteq	r9, r0, lsr #24
    bfbc:	a4190000 	ldrge	r0, [r9], #-0
    bfc0:	01000043 	tsteq	r0, r3, asr #32
    bfc4:	01f10171 	mvnseq	r0, r1, ror r1
    bfc8:	03050000 	movweq	r0, #20480	; 0x5000
    bfcc:	20000218 	andcs	r0, r0, r8, lsl r2
    bfd0:	0043c319 	subeq	ip, r3, r9, lsl r3
    bfd4:	01720100 	cmneq	r2, r0, lsl #2
    bfd8:	0000143f 	andeq	r1, r0, pc, lsr r4
    bfdc:	021c0305 	andseq	r0, ip, #335544320	; 0x14000000
    bfe0:	030c2000 	movweq	r2, #49152	; 0xc000
    bfe4:	19000001 	stmdbne	r0, {r0}
    bfe8:	00004a7b 	andeq	r4, r0, fp, ror sl
    bfec:	f1017301 			; <UNDEFINED> instruction: 0xf1017301
    bff0:	05000001 	streq	r0, [r0, #-1]
    bff4:	00022003 	andeq	r2, r2, r3
    bff8:	4ceb1920 			; <UNDEFINED> instruction: 0x4ceb1920
    bffc:	74010000 	strvc	r0, [r1], #-0
    c000:	00143f01 	andseq	r3, r4, r1, lsl #30
    c004:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
    c008:	19200002 	stmdbne	r0!, {r1}
    c00c:	00004946 	andeq	r4, r0, r6, asr #18
    c010:	3f017501 	svccc	0x00017501
    c014:	05000014 	streq	r0, [r0, #-20]	; 0xffffffec
    c018:	00022803 	andeq	r2, r2, r3, lsl #16
    c01c:	48b01920 	ldmmi	r0!, {r5, r8, fp, ip}
    c020:	76010000 	strvc	r0, [r1], -r0
    c024:	00010e01 	andeq	r0, r1, r1, lsl #28
    c028:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
    c02c:	19200002 	stmdbne	r0!, {r1}
    c030:	000047aa 	andeq	r4, r0, sl, lsr #15
    c034:	16017701 	strne	r7, [r1], -r1, lsl #14
    c038:	05000014 	streq	r0, [r0, #-20]	; 0xffffffec
    c03c:	00023003 	andeq	r3, r2, r3
    c040:	49561920 	ldmdbmi	r6, {r5, r8, fp, ip}^
    c044:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    c048:	00020701 	andeq	r0, r2, r1, lsl #14
    c04c:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    c050:	19200002 	stmdbne	r0!, {r1}
    c054:	00004c52 	andeq	r4, r0, r2, asr ip
    c058:	f1018201 			; <UNDEFINED> instruction: 0xf1018201
    c05c:	05000001 	streq	r0, [r0, #-1]
    c060:	00023803 	andeq	r3, r2, r3, lsl #16
    c064:	4bfe2a20 	blmi	fff968ec <BootRAM+0xef0708d>
    c068:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    c06c:	0014d401 	andseq	sp, r4, r1, lsl #8
    c070:	50030500 	andpl	r0, r3, r0, lsl #10
    c074:	0c200001 	stceq	0, cr0, [r0], #-4
    c078:	000004cf 	andeq	r0, r0, pc, asr #9
    c07c:	0002de00 	andeq	sp, r2, r0, lsl #28
    c080:	2c000400 	cfstrscs	mvf0, [r0], {-0}
    c084:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    c088:	00011101 	andeq	r1, r1, r1, lsl #2
    c08c:	4d7b0c00 	ldclmi	12, cr0, [fp, #-0]
    c090:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
    c094:	00000000 	andeq	r0, r0, r0
    c098:	55510000 	ldrbpl	r0, [r1, #-0]
    c09c:	04020000 	streq	r0, [r2], #-0
    c0a0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    c0a4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    c0a8:	000001ce 	andeq	r0, r0, lr, asr #3
    c0ac:	b8050803 	stmdalt	r5, {r0, r1, fp}
    c0b0:	03000000 	movweq	r0, #0
    c0b4:	02f80408 	rscseq	r0, r8, #8, 8	; 0x8000000
    c0b8:	01030000 	mrseq	r0, (UNDEF: 3)
    c0bc:	00019206 	andeq	r9, r1, r6, lsl #4
    c0c0:	08010300 	stmdaeq	r1, {r8, r9}
    c0c4:	00000190 	muleq	r0, r0, r1
    c0c8:	95050203 	strls	r0, [r5, #-515]	; 0xfffffdfd
    c0cc:	03000000 	movweq	r0, #0
    c0d0:	01f20702 	mvnseq	r0, r2, lsl #14
    c0d4:	04030000 	streq	r0, [r3], #-0
    c0d8:	0000bd05 	andeq	fp, r0, r5, lsl #26
    c0dc:	00670400 	rsbeq	r0, r7, r0, lsl #8
    c0e0:	41030000 	mrsmi	r0, (UNDEF: 3)
    c0e4:	0000006b 	andeq	r0, r0, fp, rrx
    c0e8:	c9070403 	stmdbgt	r7, {r0, r1, sl}
    c0ec:	03000001 	movweq	r0, #1
    c0f0:	01c40708 	biceq	r0, r4, r8, lsl #14
    c0f4:	69040000 	stmdbvs	r4, {}	; <UNPREDICTABLE>
    c0f8:	04000000 	streq	r0, [r0], #-0
    c0fc:	00006030 	andeq	r6, r0, r0, lsr r0
    c100:	48320400 	ldmdami	r2!, {sl}
    c104:	23050000 	movwcs	r0, #20480	; 0x5000
    c108:	0000008f 	andeq	r0, r0, pc, lsl #1
    c10c:	00950405 	addseq	r0, r5, r5, lsl #8
    c110:	a0060000 	andge	r0, r6, r0
    c114:	07000000 	streq	r0, [r0, -r0]
    c118:	000000a0 	andeq	r0, r0, r0, lsr #1
    c11c:	04040800 	streq	r0, [r4], #-2048	; 0xfffff800
    c120:	000043d5 	ldrdeq	r4, [r0], -r5
    c124:	00793702 	rsbseq	r3, r9, r2, lsl #14
    c128:	ce040000 	cdpgt	0, 0, cr0, cr4, cr0, {0}
    c12c:	0200003a 	andeq	r0, r0, #58	; 0x3a
    c130:	00005938 	andeq	r5, r0, r8, lsr r9
    c134:	3acd0400 	bcc	ff34d13c <BootRAM+0xe2bd8dd>
    c138:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    c13c:	0000006b 	andeq	r0, r0, fp, rrx
    c140:	003a9e04 	eorseq	r9, sl, r4, lsl #28
    c144:	793f0200 	ldmdbvc	pc!, {r9}	; <UNPREDICTABLE>
    c148:	03000000 	movweq	r0, #0
    c14c:	00590704 	subseq	r0, r9, r4, lsl #14
    c150:	01030000 	mrseq	r0, (UNDEF: 3)
    c154:	00019908 	andeq	r9, r1, r8, lsl #18
    c158:	a2040500 	andge	r0, r4, #0, 10
    c15c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    c160:	0000397d 	andeq	r3, r0, sp, ror r9
    c164:	fa03bf02 	blx	fbd74 <_Min_Stack_Size+0xfbb74>
    c168:	0a000000 	beq	c170 <_Min_Stack_Size+0xbf70>
    c16c:	0000381b 	andeq	r3, r0, fp, lsl r8
    c170:	0079c102 	rsbseq	ip, r9, r2, lsl #2
    c174:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    c178:	00003f7d 	andeq	r3, r0, sp, ror pc
    c17c:	1203e302 	andne	lr, r3, #134217728	; 0x8000000
    c180:	0b000001 	bleq	c18c <_Min_Stack_Size+0xbf8c>
    c184:	00004217 	andeq	r4, r0, r7, lsl r2
    c188:	0079e302 	rsbseq	lr, r9, r2, lsl #6
    c18c:	0c000000 	stceq	0, cr0, [r0], {-0}
    c190:	00004d51 	andeq	r4, r0, r1, asr sp
    c194:	00dcae01 	sbcseq	sl, ip, r1, lsl #28
    c198:	92780000 	rsbsls	r0, r8, #0
    c19c:	00580800 	subseq	r0, r8, r0, lsl #16
    c1a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    c1a4:	00000156 	andeq	r0, r0, r6, asr r1
    c1a8:	004c670d 	subeq	r6, ip, sp, lsl #14
    c1ac:	dcae0100 	stfles	f0, [lr]
    c1b0:	02000000 	andeq	r0, r0, #0
    c1b4:	0c0d7491 	cfstrseq	mvf7, [sp], {145}	; 0x91
    c1b8:	0100004d 	tsteq	r0, sp, asr #32
    c1bc:	000084ae 	andeq	r8, r0, lr, lsr #9
    c1c0:	70910200 	addsvc	r0, r1, r0, lsl #4
    c1c4:	00392f0d 	eorseq	r2, r9, sp, lsl #30
    c1c8:	a0ae0100 	adcge	r0, lr, r0, lsl #2
    c1cc:	02000000 	andeq	r0, r0, #0
    c1d0:	0e006c91 	mcreq	12, 0, r6, cr0, cr1, {4}
    c1d4:	00004d38 	andeq	r4, r0, r8, lsr sp
    c1d8:	92d0c001 	sbcsls	ip, r0, #1
    c1dc:	002e0800 	eoreq	r0, lr, r0, lsl #16
    c1e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    c1e4:	0000019c 	muleq	r0, ip, r1
    c1e8:	004d490f 	subeq	r4, sp, pc, lsl #18
    c1ec:	9cc20100 	stflse	f0, [r2], {0}
    c1f0:	02000001 	andeq	r0, r0, #1
    c1f4:	e2107091 	ands	r7, r0, #145	; 0x91
    c1f8:	da000000 	ble	c200 <_Min_Stack_Size+0xc000>
    c1fc:	12080092 	andne	r0, r8, #146	; 0x92
    c200:	01000000 	mrseq	r0, (UNDEF: 0)
    c204:	92da11cb 	sbcsls	r1, sl, #-1073741774	; 0xc0000032
    c208:	00120800 	andseq	r0, r2, r0, lsl #16
    c20c:	ee120000 	cdp	0, 1, cr0, cr2, cr0, {0}
    c210:	02000000 	andeq	r0, r0, #0
    c214:	00007491 	muleq	r0, r1, r4
    c218:	00791300 	rsbseq	r1, r9, r0, lsl #6
    c21c:	dd140000 	ldcle	0, cr0, [r4, #-0]
    c220:	0100004d 	tsteq	r0, sp, asr #32
    c224:	009300d9 	ldrsbeq	r0, [r3], r9
    c228:	00002608 	andeq	r2, r0, r8, lsl #12
    c22c:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    c230:	00004dff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
    c234:	9328ed01 			; <UNDEFINED> instruction: 0x9328ed01
    c238:	001c0800 	andseq	r0, ip, r0, lsl #16
    c23c:	9c010000 	stcls	0, cr0, [r1], {-0}
    c240:	004e1516 	subeq	r1, lr, r6, lsl r5
    c244:	01010100 	mrseq	r0, (UNDEF: 17)
    c248:	000000ad 	andeq	r0, r0, sp, lsr #1
    c24c:	08009348 	stmdaeq	r0, {r3, r6, r8, r9, ip, pc}
    c250:	00000040 	andeq	r0, r0, r0, asr #32
    c254:	13179c01 	tstne	r7, #256	; 0x100
    c258:	0100004d 	tsteq	r0, sp, asr #32
    c25c:	00000161 	andeq	r0, r0, r1, ror #2
    c260:	000c0000 	andeq	r0, ip, r0
    c264:	9c010000 	stcls	0, cr0, [r1], {-0}
    c268:	004cf918 	subeq	pc, ip, r8, lsl r9	; <UNPREDICTABLE>
    c26c:	01690100 	cmneq	r9, r0, lsl #2
    c270:	08009388 	stmdaeq	r0, {r3, r7, r8, r9, ip, pc}
    c274:	00000030 	andeq	r0, r0, r0, lsr r0
    c278:	02259c01 	eoreq	r9, r5, #256	; 0x100
    c27c:	e2190000 	ands	r0, r9, #0
    c280:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    c284:	12080093 	andne	r0, r8, #147	; 0x93
    c288:	01000000 	mrseq	r0, (UNDEF: 0)
    c28c:	8e11016b 	mufhisz	f0, f1, #3.0
    c290:	12080093 	andne	r0, r8, #147	; 0x93
    c294:	12000000 	andne	r0, r0, #0
    c298:	000000ee 	andeq	r0, r0, lr, ror #1
    c29c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    c2a0:	ed180000 	ldc	0, cr0, [r8, #-0]
    c2a4:	0100004d 	tsteq	r0, sp, asr #32
    c2a8:	93b8017a 			; <UNDEFINED> instruction: 0x93b8017a
    c2ac:	00300800 	eorseq	r0, r0, r0, lsl #16
    c2b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    c2b4:	00000255 	andeq	r0, r0, r5, asr r2
    c2b8:	0000fa19 	andeq	pc, r0, r9, lsl sl	; <UNPREDICTABLE>
    c2bc:	0093d400 	addseq	sp, r3, r0, lsl #8
    c2c0:	00000608 	andeq	r0, r0, r8, lsl #12
    c2c4:	01800100 	orreq	r0, r0, r0, lsl #2
    c2c8:	0001061a 	andeq	r0, r1, sl, lsl r6
    c2cc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    c2d0:	25170000 	ldrcs	r0, [r7, #-0]
    c2d4:	0100004d 	tsteq	r0, sp, asr #32
    c2d8:	93f00185 	mvnsls	r0, #1073741857	; 0x40000021
    c2dc:	00460800 	subeq	r0, r6, r0, lsl #16
    c2e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    c2e4:	004d671b 	subeq	r6, sp, fp, lsl r7
    c2e8:	01aa0100 			; <UNDEFINED> instruction: 0x01aa0100
    c2ec:	08009438 	stmdaeq	r0, {r3, r4, r5, sl, ip, pc}
    c2f0:	00000040 	andeq	r0, r0, r0, asr #32
    c2f4:	02be9c01 	adcseq	r9, lr, #256	; 0x100
    c2f8:	e21c0000 	ands	r0, ip, #0
    c2fc:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    c300:	12080094 	andne	r0, r8, #148	; 0x94
    c304:	01000000 	mrseq	r0, (UNDEF: 0)
    c308:	02a401b0 	adceq	r0, r4, #176, 2	; 0x2c
    c30c:	3e110000 	cdpcc	0, 1, cr0, cr1, cr0, {0}
    c310:	12080094 	andne	r0, r8, #148	; 0x94
    c314:	12000000 	andne	r0, r0, #0
    c318:	000000ee 	andeq	r0, r0, lr, ror #1
    c31c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    c320:	00fa1900 	rscseq	r1, sl, r0, lsl #18
    c324:	94660000 	strbtls	r0, [r6], #-0
    c328:	00060800 	andeq	r0, r6, r0, lsl #16
    c32c:	ba010000 	blt	4c334 <_Min_Stack_Size+0x4c134>
    c330:	01061a01 	tsteq	r6, r1, lsl #20
    c334:	91020000 	mrsls	r0, (UNDEF: 2)
    c338:	17000074 	smlsdxne	r0, r4, r0, r0
    c33c:	00004dc4 	andeq	r4, r0, r4, asr #27
    c340:	78026901 	stmdavc	r2, {r0, r8, fp, sp, lr}
    c344:	34080094 	strcc	r0, [r8], #-148	; 0xffffff6c
    c348:	01000000 	mrseq	r0, (UNDEF: 0)
    c34c:	4db20f9c 	ldcmi	15, cr0, [r2, #624]!	; 0x270
    c350:	85010000 	strhi	r0, [r1, #-0]
    c354:	000000b8 	strheq	r0, [r0], -r8
    c358:	00e80305 	rsceq	r0, r8, r5, lsl #6
    c35c:	7b002000 	blvc	14364 <_Min_Stack_Size+0x14164>
    c360:	04000001 	streq	r0, [r0], #-1
    c364:	0025e300 	eoreq	lr, r5, r0, lsl #6
    c368:	11010400 	tstne	r1, r0, lsl #8
    c36c:	0c000001 	stceq	0, cr0, [r0], {1}
    c370:	00004e29 	andeq	r4, r0, r9, lsr #28
    c374:	00000e80 	andeq	r0, r0, r0, lsl #29
    c378:	00000000 	andeq	r0, r0, r0
    c37c:	00005764 	andeq	r5, r0, r4, ror #14
    c380:	00571302 	subseq	r1, r7, r2, lsl #6
    c384:	2cd80200 	lfmcs	f0, 2, [r8], {0}
    c388:	03000000 	movweq	r0, #0
    c38c:	01ce0704 	biceq	r0, lr, r4, lsl #14
    c390:	04040000 	streq	r0, [r4], #-0
    c394:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    c398:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
    c39c:	000000b8 	strheq	r0, [r0], -r8
    c3a0:	f8040803 			; <UNDEFINED> instruction: 0xf8040803
    c3a4:	03000002 	movweq	r0, #2
    c3a8:	01920601 	orrseq	r0, r2, r1, lsl #12
    c3ac:	e3020000 	movw	r0, #8192	; 0x2000
    c3b0:	03000000 	movweq	r0, #0
    c3b4:	00005a1d 	andeq	r5, r0, sp, lsl sl
    c3b8:	08010300 	stmdaeq	r1, {r8, r9}
    c3bc:	00000190 	muleq	r0, r0, r1
    c3c0:	95050203 	strls	r0, [r5, #-515]	; 0xfffffdfd
    c3c4:	03000000 	movweq	r0, #0
    c3c8:	01f20702 	mvnseq	r0, r2, lsl #14
    c3cc:	04030000 	streq	r0, [r3], #-0
    c3d0:	0000bd05 	andeq	fp, r0, r5, lsl #26
    c3d4:	00670200 	rsbeq	r0, r7, r0, lsl #4
    c3d8:	41030000 	mrsmi	r0, (UNDEF: 3)
    c3dc:	00000081 	andeq	r0, r0, r1, lsl #1
    c3e0:	c9070403 	stmdbgt	r7, {r0, r1, sl}
    c3e4:	03000001 	movweq	r0, #1
    c3e8:	01c40708 	biceq	r0, r4, r8, lsl #14
    c3ec:	04030000 	streq	r0, [r3], #-0
    c3f0:	00005907 	andeq	r5, r0, r7, lsl #18
    c3f4:	03040500 	movweq	r0, #17664	; 0x4500
    c3f8:	01990801 	orrseq	r0, r9, r1, lsl #16
    c3fc:	e5020000 	str	r0, [r2, #-0]
    c400:	04000000 	streq	r0, [r0], #-0
    c404:	00004f18 	andeq	r4, r0, r8, lsl pc
    c408:	00690200 	rsbeq	r0, r9, r0, lsl #4
    c40c:	30040000 	andcc	r0, r4, r0
    c410:	00000076 	andeq	r0, r0, r6, ror r0
    c414:	009f0406 	addseq	r0, pc, r6, lsl #8
    c418:	af070000 	svcge	0x00070000
    c41c:	0100004e 	tsteq	r0, lr, asr #32
    c420:	00009645 	andeq	r9, r0, r5, asr #12
    c424:	0094ac00 	addseq	sl, r4, r0, lsl #24
    c428:	00008c08 	andeq	r8, r0, r8, lsl #24
    c42c:	029c0100 	addseq	r0, ip, #0, 2
    c430:	08000001 	stmdaeq	r0, {r0}
    c434:	00004ec3 	andeq	r4, r0, r3, asr #29
    c438:	00214501 	eoreq	r4, r1, r1, lsl #10
    c43c:	91020000 	mrsls	r0, (UNDEF: 2)
    c440:	4e89096c 			; <UNDEFINED> instruction: 0x4e89096c
    c444:	47010000 	strmi	r0, [r1, -r0]
    c448:	00000096 	muleq	r0, r6, r0
    c44c:	09749102 	ldmdbeq	r4!, {r1, r8, ip, pc}^
    c450:	00004ea0 	andeq	r4, r0, r0, lsr #29
    c454:	00b54801 	adcseq	r4, r5, r1, lsl #16
    c458:	03050000 	movweq	r0, #20480	; 0x5000
    c45c:	20003640 	andcs	r3, r0, r0, asr #12
    c460:	4ecf0a00 	vdivmi.f32	s1, s30, s0
    c464:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    c468:	08009538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip, pc}
    c46c:	00000012 	andeq	r0, r0, r2, lsl r0
    c470:	01259c01 			; <UNDEFINED> instruction: 0x01259c01
    c474:	700b0000 	andvc	r0, fp, r0
    c478:	79010076 	stmdbvc	r1, {r1, r2, r4, r5, r6}
    c47c:	00000096 	muleq	r0, r6, r0
    c480:	00749102 	rsbseq	r9, r4, r2, lsl #2
    c484:	004e5e0c 	subeq	r5, lr, ip, lsl #28
    c488:	00850100 	addeq	r0, r5, r0, lsl #2
    c48c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    c490:	01000000 	mrseq	r0, (UNDEF: 0)
    c494:	4e740d9c 	mrcmi	13, 3, r0, cr4, cr12, {4}
    c498:	8c010000 	stchi	0, cr0, [r1], {-0}
    c49c:	00000021 	andeq	r0, r0, r1, lsr #32
    c4a0:	00000000 	andeq	r0, r0, r0
    c4a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    c4a8:	9f0e9c01 	svcls	0x000e9c01
    c4ac:	5c000000 	stcpl	0, cr0, [r0], {-0}
    c4b0:	0f000001 	svceq	0x00000001
    c4b4:	0000008f 	andeq	r0, r0, pc, lsl #1
    c4b8:	090033ff 	stmdbeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, ip, sp}
    c4bc:	00004ebc 			; <UNDEFINED> instruction: 0x00004ebc
    c4c0:	014b3d01 	cmpeq	fp, r1, lsl #26
    c4c4:	03050000 	movweq	r0, #20480	; 0x5000
    c4c8:	2000023c 	andcs	r0, r0, ip, lsr r2
    c4cc:	004e9209 	subeq	r9, lr, r9, lsl #4
    c4d0:	21410100 	mrscs	r0, (UNDEF: 81)
    c4d4:	05000000 	streq	r0, [r0, #-0]
    c4d8:	00363c03 	eorseq	r3, r6, r3, lsl #24
    c4dc:	00c30020 	sbceq	r0, r3, r0, lsr #32
    c4e0:	00020000 	andeq	r0, r2, r0
    c4e4:	000026cf 	andeq	r2, r0, pc, asr #13
    c4e8:	58a00104 	stmiapl	r0!, {r2, r8}
    c4ec:	01100000 	tsteq	r0, r0
    c4f0:	01fc0800 	mvnseq	r0, r0, lsl #16
    c4f4:	2e2e0800 	cdpcs	8, 2, cr0, cr14, cr0, {0}
    c4f8:	2f2e2e2f 	svccs	0x002e2e2f
    c4fc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    c500:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    c504:	2f2e2e2f 	svccs	0x002e2e2f
    c508:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    c50c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    c510:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    c514:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; c394 <_Min_Stack_Size+0xc194>
    c518:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    c51c:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    c520:	6d2f6d72 	stcvs	13, cr6, [pc, #-456]!	; c360 <_Min_Stack_Size+0xc160>
    c524:	70636d65 	rsbvc	r6, r3, r5, ror #26
    c528:	72612d79 	rsbvc	r2, r1, #7744	; 0x1e40
    c52c:	6d37766d 	ldcvs	6, cr7, [r7, #-436]!	; 0xfffffe4c
    c530:	2f00532e 	svccs	0x0000532e
    c534:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    c538:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    c53c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    c540:	7541582d 	strbvc	r5, [r1, #-2093]	; 0xfffff7d3
    c544:	2f50317a 	svccs	0x0050317a
    c548:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    c54c:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    c550:	302e342e 	eorcc	r3, lr, lr, lsr #8
    c554:	3130322e 	teqcc	r0, lr, lsr #4
    c558:	32353036 	eorscc	r3, r5, #54	; 0x36
    c55c:	75622f37 	strbvc	r2, [r2, #-3895]!	; 0xfffff0c9
    c560:	5f646c69 	svcpl	0x00646c69
    c564:	6f6e616e 	svcvs	0x006e616e
    c568:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    c56c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    c570:	61652d65 	cmnvs	r5, r5, ror #26
    c574:	612f6962 			; <UNDEFINED> instruction: 0x612f6962
    c578:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    c57c:	6e2f6d2d 	cdpvs	13, 2, cr6, cr15, cr13, {1}
    c580:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    c584:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    c588:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; c408 <_Min_Stack_Size+0xc208>
    c58c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    c590:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    c594:	47006d72 	smlsdxmi	r0, r2, sp, r6
    c598:	4120554e 			; <UNDEFINED> instruction: 0x4120554e
    c59c:	2e322053 	mrccs	0, 1, r2, cr2, cr3, {2}
    c5a0:	01003732 	tsteq	r0, r2, lsr r7
    c5a4:	00011a80 	andeq	r1, r1, r0, lsl #21
    c5a8:	e3000400 	movw	r0, #1024	; 0x400
    c5ac:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    c5b0:	004ee601 	subeq	lr, lr, r1, lsl #12
    c5b4:	4f9e0c00 	svcmi	0x009e0c00
    c5b8:	4f3f0000 	svcmi	0x003f0000
    c5bc:	01fc0000 	mvnseq	r0, r0
    c5c0:	009a0800 	addseq	r0, sl, r0, lsl #16
    c5c4:	595b0000 	ldmdbpl	fp, {}^	; <UNPREDICTABLE>
    c5c8:	04020000 	streq	r0, [r2], #-0
    c5cc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    c5d0:	57130300 	ldrpl	r0, [r3, -r0, lsl #6]
    c5d4:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
    c5d8:	00000037 	andeq	r0, r0, r7, lsr r0
    c5dc:	ce070404 	cdpgt	4, 0, cr0, cr7, cr4, {0}
    c5e0:	04000001 	streq	r0, [r0], #-1
    c5e4:	00b80508 	adcseq	r0, r8, r8, lsl #10
    c5e8:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    c5ec:	0002f804 	andeq	pc, r2, r4, lsl #16
    c5f0:	06010400 	streq	r0, [r1], -r0, lsl #8
    c5f4:	00000192 	muleq	r0, r2, r1
    c5f8:	90080104 	andls	r0, r8, r4, lsl #2
    c5fc:	04000001 	streq	r0, [r0], #-1
    c600:	00950502 	addseq	r0, r5, r2, lsl #10
    c604:	02040000 	andeq	r0, r4, #0
    c608:	0001f207 	andeq	pc, r1, r7, lsl #4
    c60c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    c610:	000000bd 	strheq	r0, [r0], -sp
    c614:	c9070404 	stmdbgt	r7, {r2, sl}
    c618:	04000001 	streq	r0, [r0], #-1
    c61c:	01c40708 	biceq	r0, r4, r8, lsl #14
    c620:	04040000 	streq	r0, [r4], #-0
    c624:	00005907 	andeq	r5, r0, r7, lsl #18
    c628:	06040500 	streq	r0, [r4], -r0, lsl #10
    c62c:	00008c04 	andeq	r8, r0, r4, lsl #24
    c630:	08010400 	stmdaeq	r1, {sl}
    c634:	00000199 	muleq	r0, r9, r1
    c638:	004fcc07 	subeq	ip, pc, r7, lsl #24
    c63c:	84190300 	ldrhi	r0, [r9], #-768	; 0xfffffd00
    c640:	fc000000 	stc2	0, cr0, [r0], {-0}
    c644:	9a080001 	bls	20c650 <_Min_Stack_Size+0x20c450>
    c648:	01000000 	mrseq	r0, (UNDEF: 0)
    c64c:	0001179c 	muleq	r1, ip, r7
    c650:	006d0800 	rsbeq	r0, sp, r0, lsl #16
    c654:	00842d01 	addeq	r2, r4, r1, lsl #26
    c658:	50010000 	andpl	r0, r1, r0
    c65c:	01006309 	tsteq	r0, r9, lsl #6
    c660:	0000252d 	andeq	r2, r0, sp, lsr #10
    c664:	00000000 	andeq	r0, r0, r0
    c668:	006e0900 	rsbeq	r0, lr, r0, lsl #18
    c66c:	002c2d01 	eoreq	r2, ip, r1, lsl #26
    c670:	002c0000 	eoreq	r0, ip, r0
    c674:	730a0000 	movwvc	r0, #40960	; 0xa000
    c678:	86320100 	ldrthi	r0, [r2], -r0, lsl #2
    c67c:	b1000000 	mrslt	r0, (UNDEF: 0)
    c680:	0a000000 	beq	c688 <_Min_Stack_Size+0xc488>
    c684:	35010069 	strcc	r0, [r1, #-105]	; 0xffffff97
    c688:	00000037 	andeq	r0, r0, r7, lsr r0
    c68c:	000000e5 	andeq	r0, r0, r5, ror #1
    c690:	003a710b 	eorseq	r7, sl, fp, lsl #2
    c694:	6f360100 	svcvs	0x00360100
    c698:	fa000000 	blx	c6a0 <_Min_Stack_Size+0xc4a0>
    c69c:	0b000000 	bleq	c6a4 <_Min_Stack_Size+0xc4a4>
    c6a0:	00004ed9 	ldrdeq	r4, [r0], -r9
    c6a4:	01173701 	tsteq	r7, r1, lsl #14
    c6a8:	010d0000 	mrseq	r0, (UNDEF: 13)
    c6ac:	640a0000 	strvs	r0, [sl], #-0
    c6b0:	37380100 	ldrcc	r0, [r8, -r0, lsl #2]!
    c6b4:	75000000 	strvc	r0, [r0, #-0]
    c6b8:	00000001 	andeq	r0, r0, r1
    c6bc:	006f0406 	rsbeq	r0, pc, r6, lsl #8
    c6c0:	fb000000 	blx	c6ca <_Min_Stack_Size+0xc4ca>
    c6c4:	04000007 	streq	r0, [r0], #-7
    c6c8:	00278200 	eoreq	r8, r7, r0, lsl #4
    c6cc:	e6010400 	str	r0, [r1], -r0, lsl #8
    c6d0:	0c00004e 	stceq	0, cr0, [r0], {78}	; 0x4e
    c6d4:	000051e3 	andeq	r5, r0, r3, ror #3
    c6d8:	0000510d 	andeq	r5, r0, sp, lsl #2
    c6dc:	08000298 	stmdaeq	r0, {r3, r4, r7, r9}
    c6e0:	00000104 	andeq	r0, r0, r4, lsl #2
    c6e4:	00005a69 	andeq	r5, r0, r9, ror #20
    c6e8:	ce070402 	cdpgt	4, 0, cr0, cr7, cr2, {0}
    c6ec:	03000001 	movweq	r0, #1
    c6f0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    c6f4:	08020074 	stmdaeq	r2, {r2, r4, r5, r6}
    c6f8:	0000b805 	andeq	fp, r0, r5, lsl #16
    c6fc:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
    c700:	000002f8 	strdeq	r0, [r0], -r8
    c704:	92060102 	andls	r0, r6, #-2147483648	; 0x80000000
    c708:	02000001 	andeq	r0, r0, #1
    c70c:	01900801 	orrseq	r0, r0, r1, lsl #16
    c710:	02020000 	andeq	r0, r2, #0
    c714:	00009505 	andeq	r9, r0, r5, lsl #10
    c718:	07020200 	streq	r0, [r2, -r0, lsl #4]
    c71c:	000001f2 	strdeq	r0, [r0], -r2
    c720:	bd050402 	cfstrslt	mvf0, [r5, #-8]
    c724:	02000000 	andeq	r0, r0, #0
    c728:	01c90704 	biceq	r0, r9, r4, lsl #14
    c72c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    c730:	0001c407 	andeq	ip, r1, r7, lsl #8
    c734:	51cb0400 	bicpl	r0, fp, r0, lsl #8
    c738:	07020000 	streq	r0, [r2, -r0]
    c73c:	0000002c 	andeq	r0, r0, ip, lsr #32
    c740:	0051ba04 	subseq	fp, r1, r4, lsl #20
    c744:	5d2c0300 	stcpl	3, cr0, [ip, #-0]
    c748:	04000000 	streq	r0, [r0], #-0
    c74c:	000052a4 	andeq	r5, r0, r4, lsr #5
    c750:	005d7203 	subseq	r7, sp, r3, lsl #4
    c754:	87050000 	strhi	r0, [r5, -r0]
    c758:	04000051 	streq	r0, [r0], #-81	; 0xffffffaf
    c75c:	00250165 	eoreq	r0, r5, r5, ror #2
    c760:	04060000 	streq	r0, [r6], #-0
    c764:	00bea603 	adcseq	sl, lr, r3, lsl #12
    c768:	81070000 	mrshi	r0, (UNDEF: 7)
    c76c:	03000051 	movweq	r0, #81	; 0x51
    c770:	000093a8 	andeq	r9, r0, r8, lsr #7
    c774:	50cf0700 	sbcpl	r0, pc, r0, lsl #14
    c778:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    c77c:	000000be 	strheq	r0, [r0], -lr
    c780:	00480800 	subeq	r0, r8, r0, lsl #16
    c784:	00ce0000 	sbceq	r0, lr, r0
    c788:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    c78c:	03000000 	movweq	r0, #0
    c790:	07040200 	streq	r0, [r4, -r0, lsl #4]
    c794:	00000059 	andeq	r0, r0, r9, asr r0
    c798:	a303080a 	movwge	r0, #14346	; 0x380a
    c79c:	000000f6 	strdeq	r0, [r0], -r6
    c7a0:	00528e0b 	subseq	r8, r2, fp, lsl #28
    c7a4:	2ca50300 	stccs	3, cr0, [r5]
    c7a8:	00000000 	andeq	r0, r0, r0
    c7ac:	0052960b 	subseq	r9, r2, fp, lsl #12
    c7b0:	9faa0300 	svcls	0x00aa0300
    c7b4:	04000000 	streq	r0, [r0], #-0
    c7b8:	522d0400 	eorpl	r0, sp, #0, 8
    c7bc:	ab030000 	blge	cc7c4 <_Min_Stack_Size+0xcc5c4>
    c7c0:	000000d5 	ldrdeq	r0, [r0], -r5
    c7c4:	0050a004 	subseq	sl, r0, r4
    c7c8:	72af0300 	adcvc	r0, pc, #0, 6
    c7cc:	0c000000 	stceq	0, cr0, [r0], {-0}
    c7d0:	14040d04 	strne	r0, [r4], #-3332	; 0xfffff2fc
    c7d4:	02000001 	andeq	r0, r0, #1
    c7d8:	01990801 	orrseq	r0, r9, r1, lsl #16
    c7dc:	e0040000 	and	r0, r4, r0
    c7e0:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    c7e4:	00006416 	andeq	r6, r0, r6, lsl r4
    c7e8:	50a90e00 	adcpl	r0, r9, r0, lsl #28
    c7ec:	05180000 	ldreq	r0, [r8, #-0]
    c7f0:	0001792d 	andeq	r7, r1, sp, lsr #18
    c7f4:	524e0b00 	subpl	r0, lr, #0, 22
    c7f8:	2f050000 	svccs	0x00050000
    c7fc:	00000179 	andeq	r0, r0, r9, ror r1
    c800:	6b5f0f00 	blvs	17d0408 <_Min_Stack_Size+0x17d0208>
    c804:	2c300500 	cfldr32cs	mvfx0, [r0], #-0
    c808:	04000000 	streq	r0, [r0], #-0
    c80c:	0052800b 	subseq	r8, r2, fp
    c810:	2c300500 	cfldr32cs	mvfx0, [r0], #-0
    c814:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c818:	00509a0b 	subseq	r9, r0, fp, lsl #20
    c81c:	2c300500 	cfldr32cs	mvfx0, [r0], #-0
    c820:	0c000000 	stceq	0, cr0, [r0], {-0}
    c824:	0052fb0b 	subseq	pc, r2, fp, lsl #22
    c828:	2c300500 	cfldr32cs	mvfx0, [r0], #-0
    c82c:	10000000 	andne	r0, r0, r0
    c830:	00785f0f 	rsbseq	r5, r8, pc, lsl #30
    c834:	017f3105 	cmneq	pc, r5, lsl #2
    c838:	00140000 	andseq	r0, r4, r0
    c83c:	0126040d 			; <UNDEFINED> instruction: 0x0126040d
    c840:	1b080000 	blne	20c848 <_Min_Stack_Size+0x20c648>
    c844:	8f000001 	svchi	0x00000001
    c848:	09000001 	stmdbeq	r0, {r0}
    c84c:	000000ce 	andeq	r0, r0, lr, asr #1
    c850:	ca0e0000 	bgt	38c858 <_Min_Stack_Size+0x38c658>
    c854:	24000050 	strcs	r0, [r0], #-80	; 0xffffffb0
    c858:	02083505 	andeq	r3, r8, #20971520	; 0x1400000
    c85c:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
    c860:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    c864:	00002c37 	andeq	r2, r0, r7, lsr ip
    c868:	b30b0000 	movwlt	r0, #45056	; 0xb000
    c86c:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    c870:	00002c38 	andeq	r2, r0, r8, lsr ip
    c874:	3d0b0400 	cfstrscc	mvf0, [fp, #-0]
    c878:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    c87c:	00002c39 	andeq	r2, r0, r9, lsr ip
    c880:	580b0800 	stmdapl	fp, {fp}
    c884:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
    c888:	00002c3a 	andeq	r2, r0, sl, lsr ip
    c88c:	a60b0c00 	strge	r0, [fp], -r0, lsl #24
    c890:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
    c894:	00002c3b 	andeq	r2, r0, fp, lsr ip
    c898:	960b1000 	strls	r1, [fp], -r0
    c89c:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
    c8a0:	00002c3c 	andeq	r2, r0, ip, lsr ip
    c8a4:	000b1400 	andeq	r1, fp, r0, lsl #8
    c8a8:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
    c8ac:	00002c3d 	andeq	r2, r0, sp, lsr ip
    c8b0:	150b1800 	strne	r1, [fp, #-2048]	; 0xfffff800
    c8b4:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    c8b8:	00002c3e 	andeq	r2, r0, lr, lsr ip
    c8bc:	240b1c00 	strcs	r1, [fp], #-3072	; 0xfffff400
    c8c0:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
    c8c4:	00002c3f 	andeq	r2, r0, pc, lsr ip
    c8c8:	0e002000 	cdpeq	0, 0, cr2, cr0, cr0, {0}
    c8cc:	0000521f 	andeq	r5, r0, pc, lsl r2
    c8d0:	2d730508 	cfldr64cs	mvdx0, [r3, #-32]!	; 0xffffffe0
    c8d4:	0b000002 	bleq	c8e4 <_Min_Stack_Size+0xc6e4>
    c8d8:	000033a1 	andeq	r3, r0, r1, lsr #7
    c8dc:	022d7405 	eoreq	r7, sp, #83886080	; 0x5000000
    c8e0:	0b000000 	bleq	c8e8 <_Min_Stack_Size+0xc6e8>
    c8e4:	000057ca 	andeq	r5, r0, sl, asr #15
    c8e8:	002c7505 	eoreq	r7, ip, r5, lsl #10
    c8ec:	00040000 	andeq	r0, r4, r0
    c8f0:	0048040d 	subeq	r0, r8, sp, lsl #8
    c8f4:	d4100000 	ldrle	r0, [r0], #-0
    c8f8:	60000052 	andvs	r0, r0, r2, asr r0
    c8fc:	5f017205 	svcpl	0x00017205
    c900:	11000003 	tstne	r0, r3
    c904:	000052ac 	andeq	r5, r0, ip, lsr #5
    c908:	2c017605 	stccs	6, cr7, [r1], {5}
    c90c:	00000000 	andeq	r0, r0, r0
    c910:	0055ed11 	subseq	lr, r5, r1, lsl sp
    c914:	017b0500 	cmneq	fp, r0, lsl #10
    c918:	00000587 	andeq	r0, r0, r7, lsl #11
    c91c:	55fd1104 	ldrbpl	r1, [sp, #260]!	; 0x104
    c920:	7b050000 	blvc	14c928 <_Min_Stack_Size+0x14c728>
    c924:	00058701 	andeq	r8, r5, r1, lsl #14
    c928:	b8110800 	ldmdalt	r1, {fp}
    c92c:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    c930:	0587017b 	streq	r0, [r7, #379]	; 0x17b
    c934:	110c0000 	mrsne	r0, (UNDEF: 12)
    c938:	00005261 	andeq	r5, r0, r1, ror #4
    c93c:	2c017d05 	stccs	13, cr7, [r1], {5}
    c940:	10000000 	andne	r0, r0, r0
    c944:	004fe211 	subeq	lr, pc, r1, lsl r2	; <UNPREDICTABLE>
    c948:	017f0500 	cmneq	pc, r0, lsl #10
    c94c:	0000010e 	andeq	r0, r0, lr, lsl #2
    c950:	51af1114 			; <UNDEFINED> instruction: 0x51af1114
    c954:	81050000 	mrshi	r0, (UNDEF: 5)
    c958:	00002c01 	andeq	r2, r0, r1, lsl #24
    c95c:	e7111800 	ldr	r1, [r1, -r0, lsl #16]
    c960:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    c964:	002c0183 	eoreq	r0, ip, r3, lsl #3
    c968:	111c0000 	tstne	ip, r0
    c96c:	00005266 	andeq	r5, r0, r6, ror #4
    c970:	d1018405 	tstle	r1, r5, lsl #8
    c974:	20000004 	andcs	r0, r0, r4
    c978:	706d5f12 	rsbvc	r5, sp, r2, lsl pc
    c97c:	01860500 	orreq	r0, r6, r0, lsl #10
    c980:	000006d4 	ldrdeq	r0, [r0], -r4
    c984:	52761124 	rsbspl	r1, r6, #36, 2
    c988:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
    c98c:	0006e501 	andeq	lr, r6, r1, lsl #10
    c990:	b1112800 	tstlt	r1, r0, lsl #16
    c994:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    c998:	002c018a 	eoreq	r0, ip, sl, lsl #3
    c99c:	112c0000 			; <UNDEFINED> instruction: 0x112c0000
    c9a0:	000050f9 	strdeq	r5, [r0], -r9
    c9a4:	2c018d05 	stccs	13, cr8, [r1], {5}
    c9a8:	30000000 	andcc	r0, r0, r0
    c9ac:	00507311 	subseq	r7, r0, r1, lsl r3
    c9b0:	018e0500 	orreq	r0, lr, r0, lsl #10
    c9b4:	0000010e 	andeq	r0, r0, lr, lsl #2
    c9b8:	51011134 	tstpl	r1, r4, lsr r1
    c9bc:	90050000 	andls	r0, r5, r0
    c9c0:	0006eb01 	andeq	lr, r6, r1, lsl #22
    c9c4:	2f113800 	svccs	0x00113800
    c9c8:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
    c9cc:	06f10191 	usateq	r0, #17, r1, lsl #3
    c9d0:	113c0000 	teqne	ip, r0
    c9d4:	0000516c 	andeq	r5, r0, ip, ror #2
    c9d8:	0e019205 	cdpeq	2, 0, cr9, cr1, cr5, {0}
    c9dc:	40000001 	andmi	r0, r0, r1
    c9e0:	00531411 	subseq	r1, r3, r1, lsl r4
    c9e4:	01950500 	orrseq	r0, r5, r0, lsl #10
    c9e8:	00000702 	andeq	r0, r0, r2, lsl #14
    c9ec:	50541144 	subspl	r1, r4, r4, asr #2
    c9f0:	9d050000 	stcls	0, cr0, [r5, #-0]
    c9f4:	00054c01 	andeq	r4, r5, r1, lsl #24
    c9f8:	47114800 	ldrmi	r4, [r1, -r0, lsl #16]
    c9fc:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    ca00:	0587019e 	streq	r0, [r7, #414]	; 0x19e
    ca04:	11540000 	cmpne	r4, r0
    ca08:	000051a0 	andeq	r5, r0, r0, lsr #3
    ca0c:	0e019f05 	cdpeq	15, 0, cr9, cr1, cr5, {0}
    ca10:	58000007 	stmdapl	r0, {r0, r1, r2}
    ca14:	004ffc11 	subeq	pc, pc, r1, lsl ip	; <UNPREDICTABLE>
    ca18:	01a00500 	lsleq	r0, r0, #10
    ca1c:	0000010e 	andeq	r0, r0, lr, lsl #2
    ca20:	040d005c 	streq	r0, [sp], #-92	; 0xffffffa4
    ca24:	00000233 	andeq	r0, r0, r3, lsr r2
    ca28:	0052380e 	subseq	r3, r2, lr, lsl #16
    ca2c:	b3056800 	movwlt	r6, #22528	; 0x5800
    ca30:	0000048f 	andeq	r0, r0, pc, lsl #9
    ca34:	00705f0f 	rsbseq	r5, r0, pc, lsl #30
    ca38:	022db405 	eoreq	fp, sp, #83886080	; 0x5000000
    ca3c:	0f000000 	svceq	0x00000000
    ca40:	0500725f 	streq	r7, [r0, #-607]	; 0xfffffda1
    ca44:	00002cb5 			; <UNDEFINED> instruction: 0x00002cb5
    ca48:	5f0f0400 	svcpl	0x000f0400
    ca4c:	b6050077 			; <UNDEFINED> instruction: 0xb6050077
    ca50:	0000002c 	andeq	r0, r0, ip, lsr #32
    ca54:	50630b08 	rsbpl	r0, r3, r8, lsl #22
    ca58:	b7050000 	strlt	r0, [r5, -r0]
    ca5c:	0000004f 	andeq	r0, r0, pc, asr #32
    ca60:	52f50b0c 	rscspl	r0, r5, #12, 22	; 0x3000
    ca64:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    ca68:	0000004f 	andeq	r0, r0, pc, asr #32
    ca6c:	625f0f0e 	subsvs	r0, pc, #14, 30	; 0x38
    ca70:	b9050066 	stmdblt	r5, {r1, r2, r5, r6}
    ca74:	00000208 	andeq	r0, r0, r8, lsl #4
    ca78:	50080b10 	andpl	r0, r8, r0, lsl fp
    ca7c:	ba050000 	blt	14ca84 <_Min_Stack_Size+0x14c884>
    ca80:	0000002c 	andeq	r0, r0, ip, lsr #32
    ca84:	0deb0b18 			; <UNDEFINED> instruction: 0x0deb0b18
    ca88:	bd050000 	stclt	0, cr0, [r5, #-0]
    ca8c:	0000035f 	andeq	r0, r0, pc, asr r3
    ca90:	504c0b1c 	subpl	r0, ip, ip, lsl fp
    ca94:	c1050000 	mrsgt	r0, (UNDEF: 5)
    ca98:	0000010c 	andeq	r0, r0, ip, lsl #2
    ca9c:	3a870b20 	bcc	fe1cf724 <BootRAM+0xd13fec5>
    caa0:	c3050000 	movwgt	r0, #20480	; 0x5000
    caa4:	000004ad 	andeq	r0, r0, sp, lsr #9
    caa8:	39e20b24 	stmibcc	r2!, {r2, r5, r8, r9, fp}^
    caac:	c5050000 	strgt	r0, [r5, #-0]
    cab0:	000004dc 	ldrdeq	r0, [r0], -ip
    cab4:	529e0b28 	addspl	r0, lr, #40, 22	; 0xa000
    cab8:	c8050000 	stmdagt	r5, {}	; <UNPREDICTABLE>
    cabc:	00000500 	andeq	r0, r0, r0, lsl #10
    cac0:	533e0b2c 	teqpl	lr, #44, 22	; 0xb000
    cac4:	c9050000 	stmdbgt	r5, {}	; <UNPREDICTABLE>
    cac8:	0000051a 	andeq	r0, r0, sl, lsl r5
    cacc:	755f0f30 	ldrbvc	r0, [pc, #-3888]	; bba4 <_Min_Stack_Size+0xb9a4>
    cad0:	cc050062 	stcgt	0, cr0, [r5], {98}	; 0x62
    cad4:	00000208 	andeq	r0, r0, r8, lsl #4
    cad8:	755f0f34 	ldrbvc	r0, [pc, #-3892]	; bbac <_Min_Stack_Size+0xb9ac>
    cadc:	cd050070 	stcgt	0, cr0, [r5, #-448]	; 0xfffffe40
    cae0:	0000022d 	andeq	r0, r0, sp, lsr #4
    cae4:	755f0f3c 	ldrbvc	r0, [pc, #-3900]	; bbb0 <_Min_Stack_Size+0xb9b0>
    cae8:	ce050072 	mcrgt	0, 0, r0, cr5, cr2, {3}
    caec:	0000002c 	andeq	r0, r0, ip, lsr #32
    caf0:	50370b40 	eorspl	r0, r7, r0, asr #22
    caf4:	d1050000 	mrsle	r0, (UNDEF: 5)
    caf8:	00000520 	andeq	r0, r0, r0, lsr #10
    cafc:	531e0b44 	tstpl	lr, #68, 22	; 0x11000
    cb00:	d2050000 	andle	r0, r5, #0
    cb04:	00000530 	andeq	r0, r0, r0, lsr r5
    cb08:	6c5f0f47 	mrrcvs	15, 4, r0, pc, cr7	; <UNPREDICTABLE>
    cb0c:	d5050062 	strle	r0, [r5, #-98]	; 0xffffff9e
    cb10:	00000208 	andeq	r0, r0, r8, lsl #4
    cb14:	506a0b48 	rsbpl	r0, sl, r8, asr #22
    cb18:	d8050000 	stmdale	r5, {}	; <UNPREDICTABLE>
    cb1c:	0000002c 	andeq	r0, r0, ip, lsr #32
    cb20:	5b4c0b50 	blpl	130f868 <_Min_Stack_Size+0x130f668>
    cb24:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
    cb28:	0000007d 	andeq	r0, r0, sp, ror r0
    cb2c:	353a0b54 	ldrcc	r0, [sl, #-2900]!	; 0xfffff4ac
    cb30:	e0050000 	and	r0, r5, r0
    cb34:	00000101 	andeq	r0, r0, r1, lsl #2
    cb38:	52400b58 	subpl	r0, r0, #88, 22	; 0x16000
    cb3c:	e2050000 	and	r0, r5, #0
    cb40:	000000f6 	strdeq	r0, [r0], -r6
    cb44:	518e0b5c 	orrpl	r0, lr, ip, asr fp
    cb48:	e3050000 	movw	r0, #20480	; 0x5000
    cb4c:	0000002c 	andeq	r0, r0, ip, lsr #32
    cb50:	2c130064 	ldccs	0, cr0, [r3], {100}	; 0x64
    cb54:	ad000000 	stcge	0, cr0, [r0, #-0]
    cb58:	14000004 	strne	r0, [r0], #-4
    cb5c:	0000035f 	andeq	r0, r0, pc, asr r3
    cb60:	00010c14 	andeq	r0, r1, r4, lsl ip
    cb64:	010e1400 	tsteq	lr, r0, lsl #8
    cb68:	2c140000 	ldccs	0, cr0, [r4], {-0}
    cb6c:	00000000 	andeq	r0, r0, r0
    cb70:	048f040d 	streq	r0, [pc], #1037	; cb78 <_Min_Stack_Size+0xc978>
    cb74:	2c130000 	ldccs	0, cr0, [r3], {-0}
    cb78:	d1000000 	mrsle	r0, (UNDEF: 0)
    cb7c:	14000004 	strne	r0, [r0], #-4
    cb80:	0000035f 	andeq	r0, r0, pc, asr r3
    cb84:	00010c14 	andeq	r0, r1, r4, lsl ip
    cb88:	04d11400 	ldrbeq	r1, [r1], #1024	; 0x400
    cb8c:	2c140000 	ldccs	0, cr0, [r4], {-0}
    cb90:	00000000 	andeq	r0, r0, r0
    cb94:	04d7040d 	ldrbeq	r0, [r7], #1037	; 0x40d
    cb98:	14150000 	ldrne	r0, [r5], #-0
    cb9c:	0d000001 	stceq	0, cr0, [r0, #-4]
    cba0:	0004b304 	andeq	fp, r4, r4, lsl #6
    cba4:	00881300 	addeq	r1, r8, r0, lsl #6
    cba8:	05000000 	streq	r0, [r0, #-0]
    cbac:	5f140000 	svcpl	0x00140000
    cbb0:	14000003 	strne	r0, [r0], #-3
    cbb4:	0000010c 	andeq	r0, r0, ip, lsl #2
    cbb8:	00008814 	andeq	r8, r0, r4, lsl r8
    cbbc:	002c1400 	eoreq	r1, ip, r0, lsl #8
    cbc0:	0d000000 	stceq	0, cr0, [r0, #-0]
    cbc4:	0004e204 	andeq	lr, r4, r4, lsl #4
    cbc8:	002c1300 	eoreq	r1, ip, r0, lsl #6
    cbcc:	051a0000 	ldreq	r0, [sl, #-0]
    cbd0:	5f140000 	svcpl	0x00140000
    cbd4:	14000003 	strne	r0, [r0], #-3
    cbd8:	0000010c 	andeq	r0, r0, ip, lsl #2
    cbdc:	06040d00 	streq	r0, [r4], -r0, lsl #26
    cbe0:	08000005 	stmdaeq	r0, {r0, r2}
    cbe4:	00000048 	andeq	r0, r0, r8, asr #32
    cbe8:	00000530 	andeq	r0, r0, r0, lsr r5
    cbec:	0000ce09 	andeq	ip, r0, r9, lsl #28
    cbf0:	08000200 	stmdaeq	r0, {r9}
    cbf4:	00000048 	andeq	r0, r0, r8, asr #32
    cbf8:	00000540 	andeq	r0, r0, r0, asr #10
    cbfc:	0000ce09 	andeq	ip, r0, r9, lsl #28
    cc00:	05000000 	streq	r0, [r0, #-0]
    cc04:	00005226 	andeq	r5, r0, r6, lsr #4
    cc08:	65011d05 	strvs	r1, [r1, #-3333]	; 0xfffff2fb
    cc0c:	10000003 	andne	r0, r0, r3
    cc10:	00005b0b 	andeq	r5, r0, fp, lsl #22
    cc14:	0121050c 			; <UNDEFINED> instruction: 0x0121050c
    cc18:	00000581 	andeq	r0, r0, r1, lsl #11
    cc1c:	00524e11 	subseq	r4, r2, r1, lsl lr
    cc20:	01230500 			; <UNDEFINED> instruction: 0x01230500
    cc24:	00000581 	andeq	r0, r0, r1, lsl #11
    cc28:	51061100 	mrspl	r1, (UNDEF: 22)
    cc2c:	24050000 	strcs	r0, [r5], #-0
    cc30:	00002c01 	andeq	r2, r0, r1, lsl #24
    cc34:	0f110400 	svceq	0x00110400
    cc38:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    cc3c:	05870125 	streq	r0, [r7, #293]	; 0x125
    cc40:	00080000 	andeq	r0, r8, r0
    cc44:	054c040d 	strbeq	r0, [ip, #-1037]	; 0xfffffbf3
    cc48:	040d0000 	streq	r0, [sp], #-0
    cc4c:	00000540 	andeq	r0, r0, r0, asr #10
    cc50:	004fda10 	subeq	sp, pc, r0, lsl sl	; <UNPREDICTABLE>
    cc54:	3d051800 	stccc	8, cr1, [r5, #-0]
    cc58:	0005cf01 	andeq	ip, r5, r1, lsl #30
    cc5c:	52881100 	addpl	r1, r8, #0, 2
    cc60:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    cc64:	0005cf01 	andeq	ip, r5, r1, lsl #30
    cc68:	bc110000 	ldclt	0, cr0, [r1], {-0}
    cc6c:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    cc70:	05cf013f 	strbeq	r0, [pc, #319]	; cdb7 <_Min_Stack_Size+0xcbb7>
    cc74:	11060000 	mrsne	r0, (UNDEF: 6)
    cc78:	000052db 	ldrdeq	r5, [r0], -fp
    cc7c:	56014005 	strpl	r4, [r1], -r5
    cc80:	0c000000 	stceq	0, cr0, [r0], {-0}
    cc84:	00524911 	subseq	r4, r2, r1, lsl r9
    cc88:	01430500 	cmpeq	r3, r0, lsl #10
    cc8c:	0000006b 	andeq	r0, r0, fp, rrx
    cc90:	56080010 			; <UNDEFINED> instruction: 0x56080010
    cc94:	df000000 	svcle	0x00000000
    cc98:	09000005 	stmdbeq	r0, {r0, r2}
    cc9c:	000000ce 	andeq	r0, r0, lr, asr #1
    cca0:	5c100002 	ldcpl	0, cr0, [r0], {2}
    cca4:	10000050 	andne	r0, r0, r0, asr r0
    cca8:	21015605 	tstcs	r1, r5, lsl #12
    ccac:	11000006 	tstne	r0, r6
    ccb0:	00005179 	andeq	r5, r0, r9, ror r1
    ccb4:	79015905 	stmdbvc	r1, {r0, r2, r8, fp, ip, lr}
    ccb8:	00000001 	andeq	r0, r0, r1
    ccbc:	0050c011 	subseq	ip, r0, r1, lsl r0
    ccc0:	015a0500 	cmpeq	sl, r0, lsl #10
    ccc4:	0000002c 	andeq	r0, r0, ip, lsr #32
    ccc8:	53531104 	cmppl	r3, #4, 2
    cccc:	5b050000 	blpl	14ccd4 <_Min_Stack_Size+0x14cad4>
    ccd0:	00017901 	andeq	r7, r1, r1, lsl #18
    ccd4:	c1110800 	tstgt	r1, r0, lsl #16
    ccd8:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
    ccdc:	0621015c 			; <UNDEFINED> instruction: 0x0621015c
    cce0:	000c0000 	andeq	r0, ip, r0
    cce4:	0179040d 	cmneq	r9, sp, lsl #8
    cce8:	cf100000 	svcgt	0x00100000
    ccec:	50000052 	andpl	r0, r0, r2, asr r0
    ccf0:	c4016005 	strgt	r6, [r1], #-5
    ccf4:	11000006 	tstne	r0, r6
    ccf8:	000052c2 	andeq	r5, r0, r2, asr #5
    ccfc:	0e016305 	cdpeq	3, 0, cr6, cr1, cr5, {0}
    cd00:	00000001 	andeq	r0, r0, r1
    cd04:	00525411 	subseq	r5, r2, r1, lsl r4
    cd08:	01640500 	cmneq	r4, r0, lsl #10
    cd0c:	000000f6 	strdeq	r0, [r0], -r6
    cd10:	50201104 	eorpl	r1, r0, r4, lsl #2
    cd14:	65050000 	strvs	r0, [r5, #-0]
    cd18:	0000f601 	andeq	pc, r0, r1, lsl #12
    cd1c:	45110c00 	ldrmi	r0, [r1, #-3072]	; 0xfffff400
    cd20:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
    cd24:	00f60166 	rscseq	r0, r6, r6, ror #2
    cd28:	11140000 	tstne	r4, r0
    cd2c:	0000530a 	andeq	r5, r0, sl, lsl #6
    cd30:	c4016705 	strgt	r6, [r1], #-1797	; 0xfffff8fb
    cd34:	1c000006 	stcne	0, cr0, [r0], {6}
    cd38:	0052e811 	subseq	lr, r2, r1, lsl r8
    cd3c:	01680500 	cmneq	r8, r0, lsl #10
    cd40:	0000002c 	andeq	r0, r0, ip, lsr #32
    cd44:	508c1124 	addpl	r1, ip, r4, lsr #2
    cd48:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
    cd4c:	0000f601 	andeq	pc, r0, r1, lsl #12
    cd50:	11112800 	tstne	r1, r0, lsl #16
    cd54:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    cd58:	00f6016a 	rscseq	r0, r6, sl, ror #2
    cd5c:	11300000 	teqne	r0, r0
    cd60:	0000507b 	andeq	r5, r0, fp, ror r0
    cd64:	f6016b05 			; <UNDEFINED> instruction: 0xf6016b05
    cd68:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    cd6c:	004fed11 	subeq	lr, pc, r1, lsl sp	; <UNPREDICTABLE>
    cd70:	016c0500 	cmneq	ip, r0, lsl #10
    cd74:	000000f6 	strdeq	r0, [r0], -r6
    cd78:	50d61140 	sbcspl	r1, r6, r0, asr #2
    cd7c:	6d050000 	stcvs	0, cr0, [r5, #-0]
    cd80:	0000f601 	andeq	pc, r0, r1, lsl #12
    cd84:	08004800 	stmdaeq	r0, {fp, lr}
    cd88:	00000114 	andeq	r0, r0, r4, lsl r1
    cd8c:	000006d4 	ldrdeq	r0, [r0], -r4
    cd90:	0000ce09 	andeq	ip, r0, r9, lsl #28
    cd94:	0d000700 	stceq	7, cr0, [r0, #-0]
    cd98:	0005df04 	andeq	sp, r5, r4, lsl #30
    cd9c:	06e51600 	strbteq	r1, [r5], r0, lsl #12
    cda0:	5f140000 	svcpl	0x00140000
    cda4:	00000003 	andeq	r0, r0, r3
    cda8:	06da040d 	ldrbeq	r0, [sl], sp, lsl #8
    cdac:	040d0000 	streq	r0, [sp], #-0
    cdb0:	0000058d 	andeq	r0, r0, sp, lsl #11
    cdb4:	018f040d 	orreq	r0, pc, sp, lsl #8
    cdb8:	02160000 	andseq	r0, r6, #0
    cdbc:	14000007 	strne	r0, [r0], #-7
    cdc0:	0000002c 	andeq	r0, r0, ip, lsr #32
    cdc4:	08040d00 	stmdaeq	r4, {r8, sl, fp}
    cdc8:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    cdcc:	0006f704 	andeq	pc, r6, r4, lsl #14
    cdd0:	27040d00 	strcs	r0, [r4, -r0, lsl #26]
    cdd4:	17000006 	strne	r0, [r0, -r6]
    cdd8:	000051dd 	ldrdeq	r5, [r0], -sp
    cddc:	02989306 	addseq	r9, r8, #402653184	; 0x18000000
    cde0:	00640800 	rsbeq	r0, r4, r0, lsl #16
    cde4:	9c010000 	stcls	0, cr0, [r1], {-0}
    cde8:	00000783 	andeq	r0, r0, r3, lsl #15
    cdec:	00528918 	subseq	r8, r2, r8, lsl r9
    cdf0:	25490100 	strbcs	r0, [r9, #-256]	; 0xffffff00
    cdf4:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    cdf8:	19000001 	stmdbne	r0, {r0}
    cdfc:	0000565d 	andeq	r5, r0, sp, asr r6
    ce00:	035f4b01 	cmpeq	pc, #1024	; 0x400
    ce04:	01d80000 	bicseq	r0, r8, r0
    ce08:	a81a0000 	ldmdage	sl, {}	; <UNPREDICTABLE>
    ce0c:	1b00000e 	blne	ce4c <_Min_Stack_Size+0xcc4c>
    ce10:	0100725f 	tsteq	r0, pc, asr r2
    ce14:	00035f4d 	andeq	r5, r3, sp, asr #30
    ce18:	0001d800 	andeq	sp, r1, r0, lsl #16
    ce1c:	0ec81c00 	cdpeq	12, 12, cr1, cr8, cr0, {0}
    ce20:	07720000 	ldrbeq	r0, [r2, -r0]!
    ce24:	5f1b0000 	svcpl	0x001b0000
    ce28:	4d010072 	stcmi	0, cr0, [r1, #-456]	; 0xfffffe38
    ce2c:	0000035f 	andeq	r0, r0, pc, asr r3
    ce30:	000001eb 	andeq	r0, r0, fp, ror #3
    ce34:	02b61d00 	adcseq	r1, r6, #0, 26
    ce38:	07f30800 	ldrbeq	r0, [r3, r0, lsl #16]!
    ce3c:	011e0000 	tsteq	lr, r0
    ce40:	00480150 	subeq	r0, r8, r0, asr r1
    ce44:	de1f0000 	cdple	0, 1, cr0, cr15, cr0, {0}
    ce48:	06000051 			; <UNDEFINED> instruction: 0x06000051
    ce4c:	00002c88 	andeq	r2, r0, r8, lsl #25
    ce50:	0002fc00 	andeq	pc, r2, r0, lsl #24
    ce54:	0000a008 	andeq	sl, r0, r8
    ce58:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    ce5c:	19000007 	stmdbne	r0, {r0, r1, r2}
    ce60:	0000565d 	andeq	r5, r0, sp, asr r6
    ce64:	035f5401 	cmpeq	pc, #16777216	; 0x1000000
    ce68:	01fe0000 	mvnseq	r0, r0
    ce6c:	e81a0000 	ldmda	sl, {}	; <UNPREDICTABLE>
    ce70:	1b00000e 	blne	ceb0 <_Min_Stack_Size+0xccb0>
    ce74:	0100725f 	tsteq	r0, pc, asr r2
    ce78:	00035f59 	andeq	r5, r3, r9, asr pc
    ce7c:	0001fe00 	andeq	pc, r1, r0, lsl #28
    ce80:	0f001c00 	svceq	0x00001c00
    ce84:	07d60000 	ldrbeq	r0, [r6, r0]
    ce88:	5f1b0000 	svcpl	0x001b0000
    ce8c:	59010072 	stmdbpl	r1, {r1, r4, r5, r6}
    ce90:	0000035f 	andeq	r0, r0, pc, asr r3
    ce94:	0000021c 	andeq	r0, r0, ip, lsl r2
    ce98:	03361d00 	teqeq	r6, #0, 26
    ce9c:	07f30800 	ldrbeq	r0, [r3, r0, lsl #16]!
    cea0:	011e0000 	tsteq	lr, r0
    cea4:	00480150 	subeq	r0, r8, r0, asr r1
    cea8:	a3200000 	nopge	{0}	; <UNPREDICTABLE>
    ceac:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    ceb0:	035f02fd 	cmpeq	pc, #-805306353	; 0xd000000f
    ceb4:	d3210000 			; <UNDEFINED> instruction: 0xd3210000
    ceb8:	d300004f 	movwle	r0, #79	; 0x4f
    cebc:	0600004f 	streq	r0, [r0], -pc, asr #32
    cec0:	09080064 	stmdbeq	r8, {r2, r5, r6}
    cec4:	00040000 	andeq	r0, r4, r0
    cec8:	00002937 	andeq	r2, r0, r7, lsr r9
    cecc:	4ee60104 	cdpmi	1, 14, cr0, cr6, cr4, {0}
    ced0:	d60c0000 	strle	r0, [ip], -r0
    ced4:	6e000053 	mcrvs	0, 0, r0, cr0, cr3, {2}
    ced8:	9c000053 	stcls	0, cr0, [r0], {83}	; 0x53
    cedc:	24080003 	strcs	r0, [r8], #-3
    cee0:	da000001 	ble	ceec <_Min_Stack_Size+0xccec>
    cee4:	0200005b 	andeq	r0, r0, #91	; 0x5b
    cee8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    ceec:	13030074 	movwne	r0, #12404	; 0x3074
    cef0:	02000057 	andeq	r0, r0, #87	; 0x57
    cef4:	000037d8 	ldrdeq	r3, [r0], -r8
    cef8:	07040400 	streq	r0, [r4, -r0, lsl #8]
    cefc:	000001ce 	andeq	r0, r0, lr, asr #3
    cf00:	b8050804 	stmdalt	r5, {r2, fp}
    cf04:	04000000 	streq	r0, [r0], #-0
    cf08:	02f80408 	rscseq	r0, r8, #8, 8	; 0x8000000
    cf0c:	01040000 	mrseq	r0, (UNDEF: 4)
    cf10:	00019206 	andeq	r9, r1, r6, lsl #4
    cf14:	08010400 	stmdaeq	r1, {sl}
    cf18:	00000190 	muleq	r0, r0, r1
    cf1c:	95050204 	strls	r0, [r5, #-516]	; 0xfffffdfc
    cf20:	04000000 	streq	r0, [r0], #-0
    cf24:	01f20702 	mvnseq	r0, r2, lsl #14
    cf28:	04040000 	streq	r0, [r4], #-0
    cf2c:	0000bd05 	andeq	fp, r0, r5, lsl #26
    cf30:	07040400 	streq	r0, [r4, -r0, lsl #8]
    cf34:	000001c9 	andeq	r0, r0, r9, asr #3
    cf38:	c4070804 	strgt	r0, [r7], #-2052	; 0xfffff7fc
    cf3c:	03000001 	movweq	r0, #1
    cf40:	000051cb 	andeq	r5, r0, fp, asr #3
    cf44:	00250703 	eoreq	r0, r5, r3, lsl #14
    cf48:	ba030000 	blt	ccf50 <_Min_Stack_Size+0xccd50>
    cf4c:	04000051 	streq	r0, [r0], #-81	; 0xffffffaf
    cf50:	0000682c 	andeq	r6, r0, ip, lsr #16
    cf54:	52a40300 	adcpl	r0, r4, #0, 6
    cf58:	72040000 	andvc	r0, r4, #0
    cf5c:	00000068 	andeq	r0, r0, r8, rrx
    cf60:	00518705 	subseq	r8, r1, r5, lsl #14
    cf64:	01650200 	cmneq	r5, r0, lsl #4
    cf68:	00000037 	andeq	r0, r0, r7, lsr r0
    cf6c:	a6040406 	strge	r0, [r4], -r6, lsl #8
    cf70:	000000c9 	andeq	r0, r0, r9, asr #1
    cf74:	00518107 	subseq	r8, r1, r7, lsl #2
    cf78:	9ea80400 	cdpls	4, 10, cr0, cr8, cr0, {0}
    cf7c:	07000000 	streq	r0, [r0, -r0]
    cf80:	000050cf 	andeq	r5, r0, pc, asr #1
    cf84:	00c9a904 	sbceq	sl, r9, r4, lsl #18
    cf88:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    cf8c:	00000053 	andeq	r0, r0, r3, asr r0
    cf90:	000000d9 	ldrdeq	r0, [r0], -r9
    cf94:	0000d909 	andeq	sp, r0, r9, lsl #18
    cf98:	04000300 	streq	r0, [r0], #-768	; 0xfffffd00
    cf9c:	00590704 	subseq	r0, r9, r4, lsl #14
    cfa0:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
    cfa4:	0101a304 	tsteq	r1, r4, lsl #6
    cfa8:	8e0b0000 	cdphi	0, 0, cr0, cr11, cr0, {0}
    cfac:	04000052 	streq	r0, [r0], #-82	; 0xffffffae
    cfb0:	000025a5 	andeq	r2, r0, r5, lsr #11
    cfb4:	960b0000 	strls	r0, [fp], -r0
    cfb8:	04000052 	streq	r0, [r0], #-82	; 0xffffffae
    cfbc:	0000aaaa 	andeq	sl, r0, sl, lsr #21
    cfc0:	03000400 	movweq	r0, #1024	; 0x400
    cfc4:	0000522d 	andeq	r5, r0, sp, lsr #4
    cfc8:	00e0ab04 	rsceq	sl, r0, r4, lsl #22
    cfcc:	a0030000 	andge	r0, r3, r0
    cfd0:	04000050 	streq	r0, [r0], #-80	; 0xffffffb0
    cfd4:	00007daf 	andeq	r7, r0, pc, lsr #27
    cfd8:	0d040c00 	stceq	12, cr0, [r4, #-0]
    cfdc:	00011f04 	andeq	r1, r1, r4, lsl #30
    cfe0:	08010400 	stmdaeq	r1, {sl}
    cfe4:	00000199 	muleq	r0, r9, r1
    cfe8:	0052e003 	subseq	lr, r2, r3
    cfec:	6f160500 	svcvs	0x00160500
    cff0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    cff4:	000050a9 	andeq	r5, r0, r9, lsr #1
    cff8:	842d0518 	strthi	r0, [sp], #-1304	; 0xfffffae8
    cffc:	0b000001 	bleq	d008 <_Min_Stack_Size+0xce08>
    d000:	0000524e 	andeq	r5, r0, lr, asr #4
    d004:	01842f05 	orreq	r2, r4, r5, lsl #30
    d008:	0f000000 	svceq	0x00000000
    d00c:	05006b5f 	streq	r6, [r0, #-2911]	; 0xfffff4a1
    d010:	00002530 	andeq	r2, r0, r0, lsr r5
    d014:	800b0400 	andhi	r0, fp, r0, lsl #8
    d018:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    d01c:	00002530 	andeq	r2, r0, r0, lsr r5
    d020:	9a0b0800 	bls	2cf028 <_Min_Stack_Size+0x2cee28>
    d024:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    d028:	00002530 	andeq	r2, r0, r0, lsr r5
    d02c:	fb0b0c00 	blx	2d0036 <_Min_Stack_Size+0x2cfe36>
    d030:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    d034:	00002530 	andeq	r2, r0, r0, lsr r5
    d038:	5f0f1000 	svcpl	0x000f1000
    d03c:	31050078 	tstcc	r5, r8, ror r0
    d040:	0000018a 	andeq	r0, r0, sl, lsl #3
    d044:	040d0014 	streq	r0, [sp], #-20	; 0xffffffec
    d048:	00000131 	andeq	r0, r0, r1, lsr r1
    d04c:	00012608 	andeq	r2, r1, r8, lsl #12
    d050:	00019a00 	andeq	r9, r1, r0, lsl #20
    d054:	00d90900 	sbcseq	r0, r9, r0, lsl #18
    d058:	00000000 	andeq	r0, r0, r0
    d05c:	0050ca0e 	subseq	ip, r0, lr, lsl #20
    d060:	35052400 	strcc	r2, [r5, #-1024]	; 0xfffffc00
    d064:	00000213 	andeq	r0, r0, r3, lsl r2
    d068:	00502e0b 	subseq	r2, r0, fp, lsl #28
    d06c:	25370500 	ldrcs	r0, [r7, #-1280]!	; 0xfffffb00
    d070:	00000000 	andeq	r0, r0, r0
    d074:	0052b30b 	subseq	fp, r2, fp, lsl #6
    d078:	25380500 	ldrcs	r0, [r8, #-1280]!	; 0xfffffb00
    d07c:	04000000 	streq	r0, [r0], #-0
    d080:	00503d0b 	subseq	r3, r0, fp, lsl #26
    d084:	25390500 	ldrcs	r0, [r9, #-1280]!	; 0xfffffb00
    d088:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    d08c:	0053580b 	subseq	r5, r3, fp, lsl #16
    d090:	253a0500 	ldrcs	r0, [sl, #-1280]!	; 0xfffffb00
    d094:	0c000000 	stceq	0, cr0, [r0], {-0}
    d098:	0051a60b 	subseq	sl, r1, fp, lsl #12
    d09c:	253b0500 	ldrcs	r0, [fp, #-1280]!	; 0xfffffb00
    d0a0:	10000000 	andne	r0, r0, r0
    d0a4:	0051960b 	subseq	r9, r1, fp, lsl #12
    d0a8:	253c0500 	ldrcs	r0, [ip, #-1280]!	; 0xfffffb00
    d0ac:	14000000 	strne	r0, [r0], #-0
    d0b0:	0053000b 	subseq	r0, r3, fp
    d0b4:	253d0500 	ldrcs	r0, [sp, #-1280]!	; 0xfffffb00
    d0b8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    d0bc:	0052150b 	subseq	r1, r2, fp, lsl #10
    d0c0:	253e0500 	ldrcs	r0, [lr, #-1280]!	; 0xfffffb00
    d0c4:	1c000000 	stcne	0, cr0, [r0], {-0}
    d0c8:	0053240b 	subseq	r2, r3, fp, lsl #8
    d0cc:	253f0500 	ldrcs	r0, [pc, #-1280]!	; cbd4 <_Min_Stack_Size+0xc9d4>
    d0d0:	20000000 	andcs	r0, r0, r0
    d0d4:	521f0e00 	andspl	r0, pc, #0, 28
    d0d8:	05080000 	streq	r0, [r8, #-0]
    d0dc:	00023873 	andeq	r3, r2, r3, ror r8
    d0e0:	33a10b00 			; <UNDEFINED> instruction: 0x33a10b00
    d0e4:	74050000 	strvc	r0, [r5], #-0
    d0e8:	00000238 	andeq	r0, r0, r8, lsr r2
    d0ec:	57ca0b00 	strbpl	r0, [sl, r0, lsl #22]
    d0f0:	75050000 	strvc	r0, [r5, #-0]
    d0f4:	00000025 	andeq	r0, r0, r5, lsr #32
    d0f8:	040d0004 	streq	r0, [sp], #-4
    d0fc:	00000053 	andeq	r0, r0, r3, asr r0
    d100:	0052d410 	subseq	sp, r2, r0, lsl r4
    d104:	72056000 	andvc	r6, r5, #0
    d108:	00036a01 	andeq	r6, r3, r1, lsl #20
    d10c:	52ac1100 	adcpl	r1, ip, #0, 2
    d110:	76050000 	strvc	r0, [r5], -r0
    d114:	00002501 	andeq	r2, r0, r1, lsl #10
    d118:	ed110000 	ldc	0, cr0, [r1, #-0]
    d11c:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
    d120:	0592017b 	ldreq	r0, [r2, #379]	; 0x17b
    d124:	11040000 	mrsne	r0, (UNDEF: 4)
    d128:	000055fd 	strdeq	r5, [r0], -sp
    d12c:	92017b05 	andls	r7, r1, #5120	; 0x1400
    d130:	08000005 	stmdaeq	r0, {r0, r2}
    d134:	0056b811 	subseq	fp, r6, r1, lsl r8
    d138:	017b0500 	cmneq	fp, r0, lsl #10
    d13c:	00000592 	muleq	r0, r2, r5
    d140:	5261110c 	rsbpl	r1, r1, #12, 2
    d144:	7d050000 	stcvc	0, cr0, [r5, #-0]
    d148:	00002501 	andeq	r2, r0, r1, lsl #10
    d14c:	e2111000 	ands	r1, r1, #0
    d150:	0500004f 	streq	r0, [r0, #-79]	; 0xffffffb1
    d154:	0119017f 	tsteq	r9, pc, ror r1
    d158:	11140000 	tstne	r4, r0
    d15c:	000051af 	andeq	r5, r0, pc, lsr #3
    d160:	25018105 	strcs	r8, [r1, #-261]	; 0xfffffefb
    d164:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    d168:	0050e711 	subseq	lr, r0, r1, lsl r7
    d16c:	01830500 	orreq	r0, r3, r0, lsl #10
    d170:	00000025 	andeq	r0, r0, r5, lsr #32
    d174:	5266111c 	rsbpl	r1, r6, #28, 2
    d178:	84050000 	strhi	r0, [r5], #-0
    d17c:	0004dc01 	andeq	sp, r4, r1, lsl #24
    d180:	5f122000 	svcpl	0x00122000
    d184:	0500706d 	streq	r7, [r0, #-109]	; 0xffffff93
    d188:	06df0186 	ldrbeq	r0, [pc], r6, lsl #3
    d18c:	11240000 			; <UNDEFINED> instruction: 0x11240000
    d190:	00005276 	andeq	r5, r0, r6, ror r2
    d194:	f0018805 			; <UNDEFINED> instruction: 0xf0018805
    d198:	28000006 	stmdacs	r0, {r1, r2}
    d19c:	0050b111 	subseq	fp, r0, r1, lsl r1
    d1a0:	018a0500 	orreq	r0, sl, r0, lsl #10
    d1a4:	00000025 	andeq	r0, r0, r5, lsr #32
    d1a8:	50f9112c 	rscspl	r1, r9, ip, lsr #2
    d1ac:	8d050000 	stchi	0, cr0, [r5, #-0]
    d1b0:	00002501 	andeq	r2, r0, r1, lsl #10
    d1b4:	73113000 	tstvc	r1, #0
    d1b8:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    d1bc:	0119018e 	tsteq	r9, lr, lsl #3
    d1c0:	11340000 	teqne	r4, r0
    d1c4:	00005101 	andeq	r5, r0, r1, lsl #2
    d1c8:	f6019005 			; <UNDEFINED> instruction: 0xf6019005
    d1cc:	38000006 	stmdacc	r0, {r1, r2}
    d1d0:	00532f11 	subseq	r2, r3, r1, lsl pc
    d1d4:	01910500 	orrseq	r0, r1, r0, lsl #10
    d1d8:	000006fc 	strdeq	r0, [r0], -ip
    d1dc:	516c113c 	cmnpl	ip, ip, lsr r1
    d1e0:	92050000 	andls	r0, r5, #0
    d1e4:	00011901 	andeq	r1, r1, r1, lsl #18
    d1e8:	14114000 	ldrne	r4, [r1], #-0
    d1ec:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
    d1f0:	070d0195 			; <UNDEFINED> instruction: 0x070d0195
    d1f4:	11440000 	mrsne	r0, (UNDEF: 68)
    d1f8:	00005054 	andeq	r5, r0, r4, asr r0
    d1fc:	57019d05 	strpl	r9, [r1, -r5, lsl #26]
    d200:	48000005 	stmdami	r0, {r0, r2}
    d204:	00504711 	subseq	r4, r0, r1, lsl r7
    d208:	019e0500 	orrseq	r0, lr, r0, lsl #10
    d20c:	00000592 	muleq	r0, r2, r5
    d210:	51a01154 	asrpl	r1, r4, r1
    d214:	9f050000 	svcls	0x00050000
    d218:	00071901 	andeq	r1, r7, r1, lsl #18
    d21c:	fc115800 	ldc2	8, cr5, [r1], {-0}
    d220:	0500004f 	streq	r0, [r0, #-79]	; 0xffffffb1
    d224:	011901a0 	tsteq	r9, r0, lsr #3
    d228:	005c0000 	subseq	r0, ip, r0
    d22c:	023e040d 	eorseq	r0, lr, #218103808	; 0xd000000
    d230:	380e0000 	stmdacc	lr, {}	; <UNPREDICTABLE>
    d234:	68000052 	stmdavs	r0, {r1, r4, r6}
    d238:	049ab305 	ldreq	fp, [sl], #773	; 0x305
    d23c:	5f0f0000 	svcpl	0x000f0000
    d240:	b4050070 	strlt	r0, [r5], #-112	; 0xffffff90
    d244:	00000238 	andeq	r0, r0, r8, lsr r2
    d248:	725f0f00 	subsvc	r0, pc, #0, 30
    d24c:	25b50500 	ldrcs	r0, [r5, #1280]!	; 0x500
    d250:	04000000 	streq	r0, [r0], #-0
    d254:	00775f0f 	rsbseq	r5, r7, pc, lsl #30
    d258:	0025b605 	eoreq	fp, r5, r5, lsl #12
    d25c:	0b080000 	bleq	20d264 <_Min_Stack_Size+0x20d064>
    d260:	00005063 	andeq	r5, r0, r3, rrx
    d264:	005ab705 	subseq	fp, sl, r5, lsl #14
    d268:	0b0c0000 	bleq	30d270 <_Min_Stack_Size+0x30d070>
    d26c:	000052f5 	strdeq	r5, [r0], -r5	; <UNPREDICTABLE>
    d270:	005ab805 	subseq	fp, sl, r5, lsl #16
    d274:	0f0e0000 	svceq	0x000e0000
    d278:	0066625f 	rsbeq	r6, r6, pc, asr r2
    d27c:	0213b905 	andseq	fp, r3, #81920	; 0x14000
    d280:	0b100000 	bleq	40d288 <_Min_Stack_Size+0x40d088>
    d284:	00005008 	andeq	r5, r0, r8
    d288:	0025ba05 	eoreq	fp, r5, r5, lsl #20
    d28c:	0b180000 	bleq	60d294 <_Min_Stack_Size+0x60d094>
    d290:	00000deb 	andeq	r0, r0, fp, ror #27
    d294:	036abd05 	cmneq	sl, #320	; 0x140
    d298:	0b1c0000 	bleq	70d2a0 <_Min_Stack_Size+0x70d0a0>
    d29c:	0000504c 	andeq	r5, r0, ip, asr #32
    d2a0:	0117c105 	tsteq	r7, r5, lsl #2
    d2a4:	0b200000 	bleq	80d2ac <_Min_Stack_Size+0x80d0ac>
    d2a8:	00003a87 	andeq	r3, r0, r7, lsl #21
    d2ac:	04b8c305 	ldrteq	ip, [r8], #773	; 0x305
    d2b0:	0b240000 	bleq	90d2b8 <_Min_Stack_Size+0x90d0b8>
    d2b4:	000039e2 	andeq	r3, r0, r2, ror #19
    d2b8:	04e7c505 	strbteq	ip, [r7], #1285	; 0x505
    d2bc:	0b280000 	bleq	a0d2c4 <_Min_Stack_Size+0xa0d0c4>
    d2c0:	0000529e 	muleq	r0, lr, r2
    d2c4:	050bc805 	streq	ip, [fp, #-2053]	; 0xfffff7fb
    d2c8:	0b2c0000 	bleq	b0d2d0 <_Min_Stack_Size+0xb0d0d0>
    d2cc:	0000533e 	andeq	r5, r0, lr, lsr r3
    d2d0:	0525c905 	streq	ip, [r5, #-2309]!	; 0xfffff6fb
    d2d4:	0f300000 	svceq	0x00300000
    d2d8:	0062755f 	rsbeq	r7, r2, pc, asr r5
    d2dc:	0213cc05 	andseq	ip, r3, #1280	; 0x500
    d2e0:	0f340000 	svceq	0x00340000
    d2e4:	0070755f 	rsbseq	r7, r0, pc, asr r5
    d2e8:	0238cd05 	eorseq	ip, r8, #320	; 0x140
    d2ec:	0f3c0000 	svceq	0x003c0000
    d2f0:	0072755f 	rsbseq	r7, r2, pc, asr r5
    d2f4:	0025ce05 	eoreq	ip, r5, r5, lsl #28
    d2f8:	0b400000 	bleq	100d300 <_Min_Stack_Size+0x100d100>
    d2fc:	00005037 	andeq	r5, r0, r7, lsr r0
    d300:	052bd105 	streq	sp, [fp, #-261]!	; 0xfffffefb
    d304:	0b440000 	bleq	110d30c <_Min_Stack_Size+0x110d10c>
    d308:	0000531e 	andeq	r5, r0, lr, lsl r3
    d30c:	053bd205 	ldreq	sp, [fp, #-517]!	; 0xfffffdfb
    d310:	0f470000 	svceq	0x00470000
    d314:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    d318:	0213d505 	andseq	sp, r3, #20971520	; 0x1400000
    d31c:	0b480000 	bleq	120d324 <_Min_Stack_Size+0x120d124>
    d320:	0000506a 	andeq	r5, r0, sl, rrx
    d324:	0025d805 	eoreq	sp, r5, r5, lsl #16
    d328:	0b500000 	bleq	140d330 <_Min_Stack_Size+0x140d130>
    d32c:	00005b4c 	andeq	r5, r0, ip, asr #22
    d330:	0088d905 	addeq	sp, r8, r5, lsl #18
    d334:	0b540000 	bleq	150d33c <_Min_Stack_Size+0x150d13c>
    d338:	0000353a 	andeq	r3, r0, sl, lsr r5
    d33c:	010ce005 	tsteq	ip, r5
    d340:	0b580000 	bleq	160d348 <_Min_Stack_Size+0x160d148>
    d344:	00005240 	andeq	r5, r0, r0, asr #4
    d348:	0101e205 	tsteq	r1, r5, lsl #4
    d34c:	0b5c0000 	bleq	170d354 <_Min_Stack_Size+0x170d154>
    d350:	0000518e 	andeq	r5, r0, lr, lsl #3
    d354:	0025e305 	eoreq	lr, r5, r5, lsl #6
    d358:	00640000 	rsbeq	r0, r4, r0
    d35c:	00002513 	andeq	r2, r0, r3, lsl r5
    d360:	0004b800 	andeq	fp, r4, r0, lsl #16
    d364:	036a1400 	cmneq	sl, #0, 8
    d368:	17140000 	ldrne	r0, [r4, -r0]
    d36c:	14000001 	strne	r0, [r0], #-1
    d370:	00000119 	andeq	r0, r0, r9, lsl r1
    d374:	00002514 	andeq	r2, r0, r4, lsl r5
    d378:	040d0000 	streq	r0, [sp], #-0
    d37c:	0000049a 	muleq	r0, sl, r4
    d380:	00002513 	andeq	r2, r0, r3, lsl r5
    d384:	0004dc00 	andeq	sp, r4, r0, lsl #24
    d388:	036a1400 	cmneq	sl, #0, 8
    d38c:	17140000 	ldrne	r0, [r4, -r0]
    d390:	14000001 	strne	r0, [r0], #-1
    d394:	000004dc 	ldrdeq	r0, [r0], -ip
    d398:	00002514 	andeq	r2, r0, r4, lsl r5
    d39c:	040d0000 	streq	r0, [sp], #-0
    d3a0:	000004e2 	andeq	r0, r0, r2, ror #9
    d3a4:	00011f15 	andeq	r1, r1, r5, lsl pc
    d3a8:	be040d00 	cdplt	13, 0, cr0, cr4, cr0, {0}
    d3ac:	13000004 	movwne	r0, #4
    d3b0:	00000093 	muleq	r0, r3, r0
    d3b4:	0000050b 	andeq	r0, r0, fp, lsl #10
    d3b8:	00036a14 	andeq	r6, r3, r4, lsl sl
    d3bc:	01171400 	tsteq	r7, r0, lsl #8
    d3c0:	93140000 	tstls	r4, #0
    d3c4:	14000000 	strne	r0, [r0], #-0
    d3c8:	00000025 	andeq	r0, r0, r5, lsr #32
    d3cc:	ed040d00 	stc	13, cr0, [r4, #-0]
    d3d0:	13000004 	movwne	r0, #4
    d3d4:	00000025 	andeq	r0, r0, r5, lsr #32
    d3d8:	00000525 	andeq	r0, r0, r5, lsr #10
    d3dc:	00036a14 	andeq	r6, r3, r4, lsl sl
    d3e0:	01171400 	tsteq	r7, r0, lsl #8
    d3e4:	0d000000 	stceq	0, cr0, [r0, #-0]
    d3e8:	00051104 	andeq	r1, r5, r4, lsl #2
    d3ec:	00530800 	subseq	r0, r3, r0, lsl #16
    d3f0:	053b0000 	ldreq	r0, [fp, #-0]!
    d3f4:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
    d3f8:	02000000 	andeq	r0, r0, #0
    d3fc:	00530800 	subseq	r0, r3, r0, lsl #16
    d400:	054b0000 	strbeq	r0, [fp, #-0]
    d404:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
    d408:	00000000 	andeq	r0, r0, r0
    d40c:	52260500 	eorpl	r0, r6, #0, 10
    d410:	1d050000 	stcne	0, cr0, [r5, #-0]
    d414:	00037001 	andeq	r7, r3, r1
    d418:	5b0b1000 	blpl	2d1420 <_Min_Stack_Size+0x2d1220>
    d41c:	050c0000 	streq	r0, [ip, #-0]
    d420:	058c0121 	streq	r0, [ip, #289]	; 0x121
    d424:	4e110000 	cdpmi	0, 1, cr0, cr1, cr0, {0}
    d428:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    d42c:	058c0123 	streq	r0, [ip, #291]	; 0x123
    d430:	11000000 	mrsne	r0, (UNDEF: 0)
    d434:	00005106 	andeq	r5, r0, r6, lsl #2
    d438:	25012405 	strcs	r2, [r1, #-1029]	; 0xfffffbfb
    d43c:	04000000 	streq	r0, [r0], #-0
    d440:	00520f11 	subseq	r0, r2, r1, lsl pc
    d444:	01250500 			; <UNDEFINED> instruction: 0x01250500
    d448:	00000592 	muleq	r0, r2, r5
    d44c:	040d0008 	streq	r0, [sp], #-8
    d450:	00000557 	andeq	r0, r0, r7, asr r5
    d454:	054b040d 	strbeq	r0, [fp, #-1037]	; 0xfffffbf3
    d458:	da100000 	ble	40d460 <_Min_Stack_Size+0x40d260>
    d45c:	1800004f 	stmdane	r0, {r0, r1, r2, r3, r6}
    d460:	da013d05 	ble	5c87c <_Min_Stack_Size+0x5c67c>
    d464:	11000005 	tstne	r0, r5
    d468:	00005288 	andeq	r5, r0, r8, lsl #5
    d46c:	da013e05 	ble	5cc88 <_Min_Stack_Size+0x5ca88>
    d470:	00000005 	andeq	r0, r0, r5
    d474:	0052bc11 	subseq	fp, r2, r1, lsl ip
    d478:	013f0500 	teqeq	pc, r0, lsl #10
    d47c:	000005da 	ldrdeq	r0, [r0], -sl
    d480:	52db1106 	sbcspl	r1, fp, #-2147483647	; 0x80000001
    d484:	40050000 	andmi	r0, r5, r0
    d488:	00006101 	andeq	r6, r0, r1, lsl #2
    d48c:	49110c00 	ldmdbmi	r1, {sl, fp}
    d490:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    d494:	00760143 	rsbseq	r0, r6, r3, asr #2
    d498:	00100000 	andseq	r0, r0, r0
    d49c:	00006108 	andeq	r6, r0, r8, lsl #2
    d4a0:	0005ea00 	andeq	lr, r5, r0, lsl #20
    d4a4:	00d90900 	sbcseq	r0, r9, r0, lsl #18
    d4a8:	00020000 	andeq	r0, r2, r0
    d4ac:	00505c10 	subseq	r5, r0, r0, lsl ip
    d4b0:	56051000 	strpl	r1, [r5], -r0
    d4b4:	00062c01 	andeq	r2, r6, r1, lsl #24
    d4b8:	51791100 	cmnpl	r9, r0, lsl #2
    d4bc:	59050000 	stmdbpl	r5, {}	; <UNPREDICTABLE>
    d4c0:	00018401 	andeq	r8, r1, r1, lsl #8
    d4c4:	c0110000 	andsgt	r0, r1, r0
    d4c8:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    d4cc:	0025015a 	eoreq	r0, r5, sl, asr r1
    d4d0:	11040000 	mrsne	r0, (UNDEF: 4)
    d4d4:	00005353 	andeq	r5, r0, r3, asr r3
    d4d8:	84015b05 	strhi	r5, [r1], #-2821	; 0xfffff4fb
    d4dc:	08000001 	stmdaeq	r0, {r0}
    d4e0:	0051c111 	subseq	ip, r1, r1, lsl r1
    d4e4:	015c0500 	cmpeq	ip, r0, lsl #10
    d4e8:	0000062c 	andeq	r0, r0, ip, lsr #12
    d4ec:	040d000c 	streq	r0, [sp], #-12
    d4f0:	00000184 	andeq	r0, r0, r4, lsl #3
    d4f4:	0052cf10 	subseq	ip, r2, r0, lsl pc
    d4f8:	60055000 	andvs	r5, r5, r0
    d4fc:	0006cf01 	andeq	ip, r6, r1, lsl #30
    d500:	52c21100 	sbcpl	r1, r2, #0, 2
    d504:	63050000 	movwvs	r0, #20480	; 0x5000
    d508:	00011901 	andeq	r1, r1, r1, lsl #18
    d50c:	54110000 	ldrpl	r0, [r1], #-0
    d510:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    d514:	01010164 	tsteq	r1, r4, ror #2
    d518:	11040000 	mrsne	r0, (UNDEF: 4)
    d51c:	00005020 	andeq	r5, r0, r0, lsr #32
    d520:	01016505 	tsteq	r1, r5, lsl #10
    d524:	0c000001 	stceq	0, cr0, [r0], {1}
    d528:	00534511 	subseq	r4, r3, r1, lsl r5
    d52c:	01660500 	cmneq	r6, r0, lsl #10
    d530:	00000101 	andeq	r0, r0, r1, lsl #2
    d534:	530a1114 	movwpl	r1, #41236	; 0xa114
    d538:	67050000 	strvs	r0, [r5, -r0]
    d53c:	0006cf01 	andeq	ip, r6, r1, lsl #30
    d540:	e8111c00 	ldmda	r1, {sl, fp, ip}
    d544:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    d548:	00250168 	eoreq	r0, r5, r8, ror #2
    d54c:	11240000 			; <UNDEFINED> instruction: 0x11240000
    d550:	0000508c 	andeq	r5, r0, ip, lsl #1
    d554:	01016905 	tsteq	r1, r5, lsl #18
    d558:	28000001 	stmdacs	r0, {r0}
    d55c:	00501111 	subseq	r1, r0, r1, lsl r1
    d560:	016a0500 	cmneq	sl, r0, lsl #10
    d564:	00000101 	andeq	r0, r0, r1, lsl #2
    d568:	507b1130 	rsbspl	r1, fp, r0, lsr r1
    d56c:	6b050000 	blvs	14d574 <_Min_Stack_Size+0x14d374>
    d570:	00010101 	andeq	r0, r1, r1, lsl #2
    d574:	ed113800 	ldc	8, cr3, [r1, #-0]
    d578:	0500004f 	streq	r0, [r0, #-79]	; 0xffffffb1
    d57c:	0101016c 	tsteq	r1, ip, ror #2
    d580:	11400000 	mrsne	r0, (UNDEF: 64)
    d584:	000050d6 	ldrdeq	r5, [r0], -r6
    d588:	01016d05 	tsteq	r1, r5, lsl #26
    d58c:	48000001 	stmdami	r0, {r0}
    d590:	011f0800 	tsteq	pc, r0, lsl #16
    d594:	06df0000 	ldrbeq	r0, [pc], r0
    d598:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
    d59c:	07000000 	streq	r0, [r0, -r0]
    d5a0:	ea040d00 	b	1109a8 <_Min_Stack_Size+0x1107a8>
    d5a4:	16000005 	strne	r0, [r0], -r5
    d5a8:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    d5ac:	00036a14 	andeq	r6, r3, r4, lsl sl
    d5b0:	040d0000 	streq	r0, [sp], #-0
    d5b4:	000006e5 	andeq	r0, r0, r5, ror #13
    d5b8:	0598040d 	ldreq	r0, [r8, #1037]	; 0x40d
    d5bc:	040d0000 	streq	r0, [sp], #-0
    d5c0:	0000019a 	muleq	r0, sl, r1
    d5c4:	00070d16 	andeq	r0, r7, r6, lsl sp
    d5c8:	00251400 	eoreq	r1, r5, r0, lsl #8
    d5cc:	0d000000 	stceq	0, cr0, [r0, #-0]
    d5d0:	00071304 	andeq	r1, r7, r4, lsl #6
    d5d4:	02040d00 	andeq	r0, r4, #0, 26
    d5d8:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    d5dc:	00063204 	andeq	r3, r6, r4, lsl #4
    d5e0:	54050300 	strpl	r0, [r5], #-768	; 0xfffffd00
    d5e4:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
    d5e8:	0000072a 	andeq	r0, r0, sl, lsr #14
    d5ec:	0053cc0e 	subseq	ip, r3, lr, lsl #24
    d5f0:	00070400 	andeq	r0, r7, r0, lsl #8
    d5f4:	00000741 	andeq	r0, r0, r1, asr #14
    d5f8:	00541417 	subseq	r1, r4, r7, lsl r4
    d5fc:	00011700 	andeq	r1, r1, r0, lsl #14
    d600:	03000000 	movweq	r0, #0
    d604:	00005228 	andeq	r5, r0, r8, lsr #4
    d608:	054b3508 	strbeq	r3, [fp, #-1288]	; 0xfffffaf8
    d60c:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    d610:	06000053 			; <UNDEFINED> instruction: 0x06000053
    d614:	00071f62 	andeq	r1, r7, r2, ror #30
    d618:	53621800 	cmnpl	r2, #0, 16
    d61c:	cd080000 	stcgt	0, cr0, [r8, #-0]
    d620:	00002501 	andeq	r2, r0, r1, lsl #10
    d624:	00039c00 	andeq	r9, r3, r0, lsl #24
    d628:	00008c08 	andeq	r8, r0, r8, lsl #24
    d62c:	1e9c0100 	fmlnee	f0, f4, f0
    d630:	19000008 	stmdbne	r0, {r3}
    d634:	00727470 	rsbseq	r7, r2, r0, ror r4
    d638:	036a2201 	cmneq	sl, #268435456	; 0x10000000
    d63c:	022f0000 	eoreq	r0, pc, #0
    d640:	73190000 	tstvc	r9, #0
    d644:	01007274 	tsteq	r0, r4, ror r2
    d648:	00081e22 	andeq	r1, r8, r2, lsr #28
    d64c:	0002b100 	andeq	fp, r2, r0, lsl #2
    d650:	57cb1a00 	strbpl	r1, [fp, r0, lsl #20]
    d654:	22010000 	andcs	r0, r1, #0
    d658:	0000002c 	andeq	r0, r0, ip, lsr #32
    d65c:	0000030e 	andeq	r0, r0, lr, lsl #6
    d660:	746d661b 	strbtvc	r6, [sp], #-1563	; 0xfffff9e5
    d664:	23220100 			; <UNDEFINED> instruction: 0x23220100
    d668:	02000008 	andeq	r0, r0, #8
    d66c:	1d1c7c91 	ldcne	12, cr7, [ip, #-580]	; 0xfffffdbc
    d670:	00746572 	rsbseq	r6, r4, r2, ror r5
    d674:	00253001 	eoreq	r3, r5, r1
    d678:	03920000 	orrseq	r0, r2, #0
    d67c:	611e0000 	tstvs	lr, r0
    d680:	31010070 	tstcc	r1, r0, ror r0
    d684:	0000074c 	andeq	r0, r0, ip, asr #14
    d688:	7efc9103 	nrmvce	f1, f3
    d68c:	0100661e 	tsteq	r0, lr, lsl r6
    d690:	00074132 	andeq	r4, r7, r2, lsr r1
    d694:	80910300 	addshi	r0, r1, r0, lsl #6
    d698:	03d41f7f 	bicseq	r1, r4, #508	; 0x1fc
    d69c:	09000800 	stmdbeq	r0, {fp}
    d6a0:	07ff0000 	ldrbeq	r0, [pc, r0]!
    d6a4:	01200000 			; <UNDEFINED> instruction: 0x01200000
    d6a8:	00750250 	rsbseq	r0, r5, r0, asr r2
    d6ac:	03510120 	cmpeq	r1, #32, 2
    d6b0:	207ef891 			; <UNDEFINED> instruction: 0x207ef891
    d6b4:	91035201 	tstls	r3, r1, lsl #4
    d6b8:	01200674 			; <UNDEFINED> instruction: 0x01200674
    d6bc:	00760253 	rsbseq	r0, r6, r3, asr r2
    d6c0:	03fc2100 	mvnseq	r2, #0, 2
    d6c4:	09000800 	stmdbeq	r0, {fp}
    d6c8:	01200000 			; <UNDEFINED> instruction: 0x01200000
    d6cc:	f8910351 			; <UNDEFINED> instruction: 0xf8910351
    d6d0:	5201207e 	andpl	r2, r1, #126	; 0x7e
    d6d4:	06749103 	ldrbteq	r9, [r4], -r3, lsl #2
    d6d8:	02530120 	subseq	r0, r3, #32, 2
    d6dc:	00000076 	andeq	r0, r0, r6, ror r0
    d6e0:	00011922 	andeq	r1, r1, r2, lsr #18
    d6e4:	04dc2200 	ldrbeq	r2, [ip], #512	; 0x200
    d6e8:	19230000 	stmdbne	r3!, {}	; <UNPREDICTABLE>
    d6ec:	08000054 	stmdaeq	r0, {r2, r4, r6}
    d6f0:	000025fd 	strdeq	r2, [r0], -sp
    d6f4:	00042800 	andeq	r2, r4, r0, lsl #16
    d6f8:	00009808 	andeq	r9, r0, r8, lsl #16
    d6fc:	f49c0100 			; <UNDEFINED> instruction: 0xf49c0100
    d700:	19000008 	stmdbne	r0, {r3}
    d704:	00727473 	rsbseq	r7, r2, r3, ror r4
    d708:	081e5501 	ldmdaeq	lr, {r0, r8, sl, ip, lr}
    d70c:	03bb0000 			; <UNDEFINED> instruction: 0x03bb0000
    d710:	cb1a0000 	blgt	68d718 <_Min_Stack_Size+0x68d518>
    d714:	01000057 	qaddeq	r0, r7, r0
    d718:	00002c55 	andeq	r2, r0, r5, asr ip
    d71c:	00042600 	andeq	r2, r4, r0, lsl #12
    d720:	6d661b00 	vstmdbvs	r6!, {d17-d16}
    d724:	55010074 	strpl	r0, [r1, #-116]	; 0xffffff8c
    d728:	00000823 	andeq	r0, r0, r3, lsr #16
    d72c:	1c789102 	ldfnep	f1, [r8], #-8
    d730:	7465721d 	strbtvc	r7, [r5], #-541	; 0xfffffde3
    d734:	25610100 	strbcs	r0, [r1, #-256]!	; 0xffffff00
    d738:	9c000000 	stcls	0, cr0, [r0], {-0}
    d73c:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    d740:	01007061 	tsteq	r0, r1, rrx
    d744:	00074c62 	andeq	r4, r7, r2, ror #24
    d748:	f4910300 			; <UNDEFINED> instruction: 0xf4910300
    d74c:	00661e7e 	rsbeq	r1, r6, lr, ror lr
    d750:	07416301 	strbeq	r6, [r1, -r1, lsl #6]
    d754:	91030000 	mrsls	r0, (UNDEF: 3)
    d758:	701d7ef8 			; <UNDEFINED> instruction: 0x701d7ef8
    d75c:	01007274 	tsteq	r0, r4, ror r2
    d760:	00036a64 	andeq	r6, r3, r4, ror #20
    d764:	0004c500 	andeq	ip, r4, r0, lsl #10
    d768:	04641f00 	strbteq	r1, [r4], #-3840	; 0xfffff100
    d76c:	09000800 	stmdbeq	r0, {fp}
    d770:	08cf0000 	stmiaeq	pc, {}^	; <UNPREDICTABLE>
    d774:	01200000 			; <UNDEFINED> instruction: 0x01200000
    d778:	00750250 	rsbseq	r0, r5, r0, asr r2
    d77c:	03510120 	cmpeq	r1, #32, 2
    d780:	207ee891 			; <UNDEFINED> instruction: 0x207ee891
    d784:	91035201 	tstls	r3, r1, lsl #4
    d788:	01200668 			; <UNDEFINED> instruction: 0x01200668
    d78c:	00760253 	rsbseq	r0, r6, r3, asr r2
    d790:	048e2100 	streq	r2, [lr], #256	; 0x100
    d794:	09000800 	stmdbeq	r0, {fp}
    d798:	01200000 			; <UNDEFINED> instruction: 0x01200000
    d79c:	00750250 	rsbseq	r0, r5, r0, asr r2
    d7a0:	03510120 	cmpeq	r1, #32, 2
    d7a4:	207ee891 			; <UNDEFINED> instruction: 0x207ee891
    d7a8:	91035201 	tstls	r3, r1, lsl #4
    d7ac:	01200668 			; <UNDEFINED> instruction: 0x01200668
    d7b0:	00760253 	rsbseq	r0, r6, r3, asr r2
    d7b4:	a3240000 			; <UNDEFINED> instruction: 0xa3240000
    d7b8:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    d7bc:	036a02fd 	cmneq	sl, #-805306353	; 0xd000000f
    d7c0:	22250000 	eorcs	r0, r5, #0
    d7c4:	22000054 	andcs	r0, r0, #84	; 0x54
    d7c8:	09000054 	stmdbeq	r0, {r2, r4, r6}
    d7cc:	0119009a 			; <UNDEFINED> instruction: 0x0119009a
    d7d0:	00040000 	andeq	r0, r4, r0
    d7d4:	00002b22 	andeq	r2, r0, r2, lsr #22
    d7d8:	4ee60104 	cdpmi	1, 14, cr0, cr6, cr4, {0}
    d7dc:	360c0000 	strcc	r0, [ip], -r0
    d7e0:	3f000054 	svccc	0x00000054
    d7e4:	c000004f 	andgt	r0, r0, pc, asr #32
    d7e8:	ce080004 	cdpgt	0, 0, cr0, cr8, cr4, {0}
    d7ec:	cd000000 	stcgt	0, cr0, [r0, #-0]
    d7f0:	0200005d 	andeq	r0, r0, #93	; 0x5d
    d7f4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    d7f8:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
    d7fc:	0001ce07 	andeq	ip, r1, r7, lsl #28
    d800:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
    d804:	000000b8 	strheq	r0, [r0], -r8
    d808:	f8040803 			; <UNDEFINED> instruction: 0xf8040803
    d80c:	03000002 	movweq	r0, #2
    d810:	01920601 	orrseq	r0, r2, r1, lsl #12
    d814:	01030000 	mrseq	r0, (UNDEF: 3)
    d818:	00019008 	andeq	r9, r1, r8
    d81c:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    d820:	00000095 	muleq	r0, r5, r0
    d824:	f2070203 	vhsub.s8	d0, d7, d3
    d828:	03000001 	movweq	r0, #1
    d82c:	00bd0504 	adcseq	r0, sp, r4, lsl #10
    d830:	04030000 	streq	r0, [r3], #-0
    d834:	0001c907 	andeq	ip, r1, r7, lsl #18
    d838:	07080300 	streq	r0, [r8, -r0, lsl #6]
    d83c:	000001c4 	andeq	r0, r0, r4, asr #3
    d840:	59070403 	stmdbpl	r7, {r0, r1, sl}
    d844:	04000000 	streq	r0, [r0], #-0
    d848:	00007f04 	andeq	r7, r0, r4, lsl #30
    d84c:	08010300 	stmdaeq	r1, {r8, r9}
    d850:	00000199 	muleq	r0, r9, r1
    d854:	008c0404 	addeq	r0, ip, r4, lsl #8
    d858:	7f050000 	svcvc	0x00050000
    d85c:	06000000 	streq	r0, [r0], -r0
    d860:	0000542f 	andeq	r5, r0, pc, lsr #8
    d864:	00791b02 	rsbseq	r1, r9, r2, lsl #22
    d868:	04c00000 	strbeq	r0, [r0], #0
    d86c:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    d870:	9c010000 	stcls	0, cr0, [r1], {-0}
    d874:	0000010b 	andeq	r0, r0, fp, lsl #2
    d878:	00317307 	eorseq	r7, r1, r7, lsl #6
    d87c:	00863d01 	addeq	r3, r6, r1, lsl #26
    d880:	04f90000 	ldrbteq	r0, [r9], #0
    d884:	69070000 	stmdbvs	r7, {}	; <UNPREDICTABLE>
    d888:	253d0100 	ldrcs	r0, [sp, #-256]!	; 0xffffff00
    d88c:	33000000 	movwcc	r0, #0
    d890:	08000005 	stmdaeq	r0, {r0, r2}
    d894:	41010073 	tstmi	r1, r3, ror r0
    d898:	0000010b 	andeq	r0, r0, fp, lsl #2
    d89c:	00000586 	andeq	r0, r0, r6, lsl #11
    d8a0:	01006308 	tsteq	r0, r8, lsl #6
    d8a4:	00004842 	andeq	r4, r0, r2, asr #16
    d8a8:	00063200 	andeq	r3, r6, r0, lsl #4
    d8ac:	1ccc0900 			; <UNDEFINED> instruction: 0x1ccc0900
    d8b0:	45010000 	strmi	r0, [r1, #-0]
    d8b4:	00000064 	andeq	r0, r0, r4, rrx
    d8b8:	00000685 	andeq	r0, r0, r5, lsl #13
    d8bc:	01006a08 	tsteq	r0, r8, lsl #20
    d8c0:	00006445 	andeq	r6, r0, r5, asr #8
    d8c4:	0006c400 	andeq	ip, r6, r0, lsl #8
    d8c8:	4ed90900 	vfnmsmi.f16	s1, s18, s0	; <UNPREDICTABLE>
    d8cc:	46010000 	strmi	r0, [r1], -r0
    d8d0:	00000116 	andeq	r0, r0, r6, lsl r1
    d8d4:	000006f1 	strdeq	r0, [r0], -r1
    d8d8:	11040400 	tstne	r4, r0, lsl #8
    d8dc:	05000001 	streq	r0, [r0, #-1]
    d8e0:	00000048 	andeq	r0, r0, r8, asr #32
    d8e4:	00640404 	rsbeq	r0, r4, r4, lsl #8
    d8e8:	c0000000 	andgt	r0, r0, r0
    d8ec:	04000000 	streq	r0, [r0], #-0
    d8f0:	002ba500 	eoreq	sl, fp, r0, lsl #10
    d8f4:	e6010400 	str	r0, [r1], -r0, lsl #8
    d8f8:	0c00004e 	stceq	0, cr0, [r0], {78}	; 0x4e
    d8fc:	0000546b 	andeq	r5, r0, fp, ror #8
    d900:	000054a1 	andeq	r5, r0, r1, lsr #9
    d904:	00000f20 	andeq	r0, r0, r0, lsr #30
    d908:	00000000 	andeq	r0, r0, r0
    d90c:	00005ea7 	andeq	r5, r0, r7, lsr #29
    d910:	69050402 	stmdbvs	r5, {r1, sl}
    d914:	0300746e 	movweq	r7, #1134	; 0x46e
    d918:	01ce0704 	biceq	r0, lr, r4, lsl #14
    d91c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    d920:	0000b805 	andeq	fp, r0, r5, lsl #16
    d924:	04080300 	streq	r0, [r8], #-768	; 0xfffffd00
    d928:	000002f8 	strdeq	r0, [r0], -r8
    d92c:	92060103 	andls	r0, r6, #-1073741824	; 0xc0000000
    d930:	03000001 	movweq	r0, #1
    d934:	01900801 	orrseq	r0, r0, r1, lsl #16
    d938:	02030000 	andeq	r0, r3, #0
    d93c:	00009505 	andeq	r9, r0, r5, lsl #10
    d940:	07020300 	streq	r0, [r2, -r0, lsl #6]
    d944:	000001f2 	strdeq	r0, [r0], -r2
    d948:	bd050403 	cfstrslt	mvf0, [r5, #-12]
    d94c:	03000000 	movweq	r0, #0
    d950:	01c90704 	biceq	r0, r9, r4, lsl #14
    d954:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    d958:	0001c407 	andeq	ip, r1, r7, lsl #8
    d95c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    d960:	00000059 	andeq	r0, r0, r9, asr r0
    d964:	007f0404 	rsbseq	r0, pc, r4, lsl #8
    d968:	01030000 	mrseq	r0, (UNDEF: 3)
    d96c:	00019908 	andeq	r9, r1, r8, lsl #18
    d970:	8c040400 	cfstrshi	mvf0, [r4], {-0}
    d974:	05000000 	streq	r0, [r0, #-0]
    d978:	0000007f 	andeq	r0, r0, pc, ror r0
    d97c:	00546406 	subseq	r6, r4, r6, lsl #8
    d980:	791e0200 	ldmdbvc	lr, {r9}
    d984:	90000000 	andls	r0, r0, r0
    d988:	ba080005 	blt	20d9a4 <_Min_Stack_Size+0x20d7a4>
    d98c:	01000000 	mrseq	r0, (UNDEF: 0)
    d990:	7364079c 	cmnvc	r4, #156, 14	; 0x2700000
    d994:	2a010074 	bcs	4db6c <_Min_Stack_Size+0x4d96c>
    d998:	00000079 	andeq	r0, r0, r9, ror r0
    d99c:	0000071c 	andeq	r0, r0, ip, lsl r7
    d9a0:	63727308 	cmnvs	r2, #8, 6	; 0x20000000
    d9a4:	862a0100 	strthi	r0, [sl], -r0, lsl #2
    d9a8:	01000000 	mrseq	r0, (UNDEF: 0)
    d9ac:	b8000051 	stmdalt	r0, {r0, r4, r6}
    d9b0:	04000000 	streq	r0, [r0], #-0
    d9b4:	002c1700 	eoreq	r1, ip, r0, lsl #14
    d9b8:	e6010400 	str	r0, [r1], -r0, lsl #8
    d9bc:	0c00004e 	stceq	0, cr0, [r0], {78}	; 0x4e
    d9c0:	00005505 	andeq	r5, r0, r5, lsl #10
    d9c4:	000054a1 	andeq	r5, r0, r1, lsr #9
    d9c8:	00000f30 	andeq	r0, r0, r0, lsr pc
    d9cc:	00000000 	andeq	r0, r0, r0
    d9d0:	00005f58 	andeq	r5, r0, r8, asr pc
    d9d4:	69050402 	stmdbvs	r5, {r1, sl}
    d9d8:	0300746e 	movweq	r7, #1134	; 0x46e
    d9dc:	00005713 	andeq	r5, r0, r3, lsl r7
    d9e0:	0037d802 	eorseq	sp, r7, r2, lsl #16
    d9e4:	04040000 	streq	r0, [r4], #-0
    d9e8:	0001ce07 	andeq	ip, r1, r7, lsl #28
    d9ec:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    d9f0:	000000b8 	strheq	r0, [r0], -r8
    d9f4:	f8040804 			; <UNDEFINED> instruction: 0xf8040804
    d9f8:	04000002 	streq	r0, [r0], #-2
    d9fc:	01920601 	orrseq	r0, r2, r1, lsl #12
    da00:	01040000 	mrseq	r0, (UNDEF: 4)
    da04:	00019008 	andeq	r9, r1, r8
    da08:	05020400 	streq	r0, [r2, #-1024]	; 0xfffffc00
    da0c:	00000095 	muleq	r0, r5, r0
    da10:	f2070204 	vhsub.s8	d0, d7, d4
    da14:	04000001 	streq	r0, [r0], #-1
    da18:	00bd0504 	adcseq	r0, sp, r4, lsl #10
    da1c:	04040000 	streq	r0, [r4], #-0
    da20:	0001c907 	andeq	ip, r1, r7, lsl #18
    da24:	07080400 	streq	r0, [r8, -r0, lsl #8]
    da28:	000001c4 	andeq	r0, r0, r4, asr #3
    da2c:	59070404 	stmdbpl	r7, {r2, sl}
    da30:	04000000 	streq	r0, [r0], #-0
    da34:	01990801 	orrseq	r0, r9, r1, lsl #16
    da38:	04050000 	streq	r0, [r5], #-0
    da3c:	00000091 	muleq	r0, r1, r0
    da40:	00008406 	andeq	r8, r0, r6, lsl #8
    da44:	55400700 	strbpl	r0, [r0, #-1792]	; 0xfffff900
    da48:	21030000 	mrscs	r0, (UNDEF: 3)
    da4c:	0000002c 	andeq	r0, r0, ip, lsr #32
    da50:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
    da54:	0000005c 	andeq	r0, r0, ip, asr r0
    da58:	73089c01 	movwvc	r9, #35841	; 0x8c01
    da5c:	01007274 	tsteq	r0, r4, ror r2
    da60:	00008b37 	andeq	r8, r0, r7, lsr fp
    da64:	00073d00 	andeq	r3, r7, r0, lsl #26
    da68:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    da6c:	04000000 	streq	r0, [r0], #-0
    da70:	002c8700 	eoreq	r8, ip, r0, lsl #14
    da74:	e6010400 	str	r0, [r1], -r0, lsl #8
    da78:	0c00004e 	stceq	0, cr0, [r0], {78}	; 0x4e
    da7c:	00005547 	andeq	r5, r0, r7, asr #10
    da80:	00004f3f 	andeq	r4, r0, pc, lsr pc
    da84:	080006a8 	stmdaeq	r0, {r3, r5, r7, r9, sl}
    da88:	0000009c 	muleq	r0, ip, r0
    da8c:	00006043 	andeq	r6, r0, r3, asr #32
    da90:	69050402 	stmdbvs	r5, {r1, sl}
    da94:	0300746e 	movweq	r7, #1134	; 0x46e
    da98:	00005713 	andeq	r5, r0, r3, lsl r7
    da9c:	0037d802 	eorseq	sp, r7, r2, lsl #16
    daa0:	04040000 	streq	r0, [r4], #-0
    daa4:	0001ce07 	andeq	ip, r1, r7, lsl #28
    daa8:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    daac:	000000b8 	strheq	r0, [r0], -r8
    dab0:	f8040804 			; <UNDEFINED> instruction: 0xf8040804
    dab4:	04000002 	streq	r0, [r0], #-2
    dab8:	01920601 	orrseq	r0, r2, r1, lsl #12
    dabc:	01040000 	mrseq	r0, (UNDEF: 4)
    dac0:	00019008 	andeq	r9, r1, r8
    dac4:	05020400 	streq	r0, [r2, #-1024]	; 0xfffffc00
    dac8:	00000095 	muleq	r0, r5, r0
    dacc:	f2070204 	vhsub.s8	d0, d7, d4
    dad0:	04000001 	streq	r0, [r0], #-1
    dad4:	00bd0504 	adcseq	r0, sp, r4, lsl #10
    dad8:	04040000 	streq	r0, [r4], #-0
    dadc:	0001c907 	andeq	ip, r1, r7, lsl #18
    dae0:	07080400 	streq	r0, [r8, -r0, lsl #8]
    dae4:	000001c4 	andeq	r0, r0, r4, asr #3
    dae8:	59070404 	stmdbpl	r7, {r2, sl}
    daec:	04000000 	streq	r0, [r0], #-0
    daf0:	01990801 	orrseq	r0, r9, r1, lsl #16
    daf4:	04050000 	streq	r0, [r5], #-0
    daf8:	00000091 	muleq	r0, r1, r0
    dafc:	00008406 	andeq	r8, r0, r6, lsl #8
    db00:	55760700 	ldrbpl	r0, [r6, #-1792]!	; 0xfffff900
    db04:	23030000 	movwcs	r0, #12288	; 0x3000
    db08:	00000025 	andeq	r0, r0, r5, lsr #32
    db0c:	080006a8 	stmdaeq	r0, {r3, r5, r7, r9, sl}
    db10:	0000009c 	muleq	r0, ip, r0
    db14:	00f59c01 	rscseq	r9, r5, r1, lsl #24
    db18:	73080000 	movwvc	r0, #32768	; 0x8000
    db1c:	3e010031 	mcrcc	0, 0, r0, cr1, cr1, {1}
    db20:	0000008b 	andeq	r0, r0, fp, lsl #1
    db24:	0000075e 	andeq	r0, r0, lr, asr r7
    db28:	00327308 	eorseq	r7, r2, r8, lsl #6
    db2c:	008b3e01 	addeq	r3, fp, r1, lsl #28
    db30:	07d40000 	ldrbeq	r0, [r4, r0]
    db34:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    db38:	2c3e0100 	ldfcss	f0, [lr], #-0
    db3c:	24000000 	strcs	r0, [r0], #-0
    db40:	09000008 	stmdbeq	r0, {r3}
    db44:	01003161 	tsteq	r0, r1, ror #2
    db48:	0000f551 	andeq	pc, r0, r1, asr r5	; <UNPREDICTABLE>
    db4c:	00089500 	andeq	r9, r8, r0, lsl #10
    db50:	32610900 	rsbcc	r0, r1, #0, 18
    db54:	f5520100 			; <UNDEFINED> instruction: 0xf5520100
    db58:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    db5c:	00000008 	andeq	r0, r0, r8
    db60:	006f0405 	rsbeq	r0, pc, r5, lsl #8
    db64:	35000000 	strcc	r0, [r0, #-0]
    db68:	04000001 	streq	r0, [r0], #-1
    db6c:	002d0800 	eoreq	r0, sp, r0, lsl #16
    db70:	e6010400 	str	r0, [r1], -r0, lsl #8
    db74:	0c00004e 	stceq	0, cr0, [r0], {78}	; 0x4e
    db78:	00005583 	andeq	r5, r0, r3, lsl #11
    db7c:	00004f3f 	andeq	r4, r0, pc, lsr pc
    db80:	08000744 	stmdaeq	r0, {r2, r6, r8, r9, sl}
    db84:	00000066 	andeq	r0, r0, r6, rrx
    db88:	00006184 	andeq	r6, r0, r4, lsl #3
    db8c:	69050402 	stmdbvs	r5, {r1, sl}
    db90:	0300746e 	movweq	r7, #1134	; 0x46e
    db94:	00005713 	andeq	r5, r0, r3, lsl r7
    db98:	0037d802 	eorseq	sp, r7, r2, lsl #16
    db9c:	04040000 	streq	r0, [r4], #-0
    dba0:	0001ce07 	andeq	ip, r1, r7, lsl #28
    dba4:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    dba8:	000000b8 	strheq	r0, [r0], -r8
    dbac:	f8040804 			; <UNDEFINED> instruction: 0xf8040804
    dbb0:	04000002 	streq	r0, [r0], #-2
    dbb4:	01920601 	orrseq	r0, r2, r1, lsl #12
    dbb8:	01040000 	mrseq	r0, (UNDEF: 4)
    dbbc:	00019008 	andeq	r9, r1, r8
    dbc0:	05020400 	streq	r0, [r2, #-1024]	; 0xfffffc00
    dbc4:	00000095 	muleq	r0, r5, r0
    dbc8:	f2070204 	vhsub.s8	d0, d7, d4
    dbcc:	04000001 	streq	r0, [r0], #-1
    dbd0:	00bd0504 	adcseq	r0, sp, r4, lsl #10
    dbd4:	04040000 	streq	r0, [r4], #-0
    dbd8:	0001c907 	andeq	ip, r1, r7, lsl #18
    dbdc:	07080400 	streq	r0, [r8, -r0, lsl #8]
    dbe0:	000001c4 	andeq	r0, r0, r4, asr #3
    dbe4:	59070404 	stmdbpl	r7, {r2, sl}
    dbe8:	05000000 	streq	r0, [r0, #-0]
    dbec:	00008a04 	andeq	r8, r0, r4, lsl #20
    dbf0:	08010400 	stmdaeq	r1, {sl}
    dbf4:	00000199 	muleq	r0, r9, r1
    dbf8:	00970405 	addseq	r0, r7, r5, lsl #8
    dbfc:	8a060000 	bhi	18dc04 <_Min_Stack_Size+0x18da04>
    dc00:	07000000 	streq	r0, [r0, -r0]
    dc04:	000055b7 			; <UNDEFINED> instruction: 0x000055b7
    dc08:	00842403 	addeq	r2, r4, r3, lsl #8
    dc0c:	07440000 	strbeq	r0, [r4, -r0]
    dc10:	00660800 	rsbeq	r0, r6, r0, lsl #16
    dc14:	9c010000 	stcls	0, cr0, [r1], {-0}
    dc18:	0000011d 	andeq	r0, r0, sp, lsl r1
    dc1c:	0055b208 	subseq	fp, r5, r8, lsl #4
    dc20:	1d450100 	stfnee	f0, [r5, #-0]
    dc24:	01000001 	tsteq	r0, r1
    dc28:	557e0950 	ldrbpl	r0, [lr, #-2384]!	; 0xfffff6b0
    dc2c:	45010000 	strmi	r0, [r1, #-0]
    dc30:	00000122 	andeq	r0, r0, r2, lsr #2
    dc34:	0000090e 	andeq	r0, r0, lr, lsl #18
    dc38:	00529009 	subseq	r9, r2, r9
    dc3c:	2c450100 	stfcse	f0, [r5], {-0}
    dc40:	3a000000 	bcc	dc48 <_Min_Stack_Size+0xda48>
    dc44:	0a000009 	beq	dc70 <_Min_Stack_Size+0xda70>
    dc48:	00747364 	rsbseq	r7, r4, r4, ror #6
    dc4c:	00845b01 	addeq	r5, r4, r1, lsl #22
    dc50:	09880000 	stmibeq	r8, {}	; <UNPREDICTABLE>
    dc54:	730a0000 	movwvc	r0, #40960	; 0xa000
    dc58:	01006372 	tsteq	r0, r2, ror r3
    dc5c:	0000915c 	andeq	r9, r0, ip, asr r1
    dc60:	0009c900 	andeq	ip, r9, r0, lsl #18
    dc64:	55bf0b00 	ldrpl	r0, [pc, #2816]!	; e76c <_Min_Stack_Size+0xe56c>
    dc68:	5d010000 	stcpl	0, cr0, [r1, #-0]
    dc6c:	00000127 	andeq	r0, r0, r7, lsr #2
    dc70:	00000a25 	andeq	r0, r0, r5, lsr #20
    dc74:	0055cb0b 	subseq	ip, r5, fp, lsl #22
    dc78:	2d5e0100 	ldfcse	f0, [lr, #-0]
    dc7c:	50000001 	andpl	r0, r0, r1
    dc80:	0000000a 	andeq	r0, r0, sl
    dc84:	0000840c 	andeq	r8, r0, ip, lsl #8
    dc88:	00910c00 	addseq	r0, r1, r0, lsl #24
    dc8c:	04050000 	streq	r0, [r5], #-0
    dc90:	00000068 	andeq	r0, r0, r8, rrx
    dc94:	01330405 	teqeq	r3, r5, lsl #8
    dc98:	68060000 	stmdavs	r6, {}	; <UNPREDICTABLE>
    dc9c:	00000000 	andeq	r0, r0, r0
    dca0:	000007d6 	ldrdeq	r0, [r0], -r6
    dca4:	2dae0004 	stccs	0, cr0, [lr, #16]!
    dca8:	01040000 	mrseq	r0, (UNDEF: 4)
    dcac:	00004ee6 	andeq	r4, r0, r6, ror #29
    dcb0:	00566f0c 	subseq	r6, r6, ip, lsl #30
    dcb4:	00560500 	subseq	r0, r6, r0, lsl #10
    dcb8:	00628d00 	rsbeq	r8, r2, r0, lsl #26
    dcbc:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    dcc0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    dcc4:	ce070403 	cdpgt	4, 0, cr0, cr7, cr3, {0}
    dcc8:	03000001 	movweq	r0, #1
    dccc:	00b80508 	adcseq	r0, r8, r8, lsl #10
    dcd0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    dcd4:	0002f804 	andeq	pc, r2, r4, lsl #16
    dcd8:	06010300 	streq	r0, [r1], -r0, lsl #6
    dcdc:	00000192 	muleq	r0, r2, r1
    dce0:	90080103 	andls	r0, r8, r3, lsl #2
    dce4:	03000001 	movweq	r0, #1
    dce8:	00950502 	addseq	r0, r5, r2, lsl #10
    dcec:	02030000 	andeq	r0, r3, #0
    dcf0:	0001f207 	andeq	pc, r1, r7, lsl #4
    dcf4:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    dcf8:	000000bd 	strheq	r0, [r0], -sp
    dcfc:	c9070403 	stmdbgt	r7, {r0, r1, sl}
    dd00:	03000001 	movweq	r0, #1
    dd04:	01c40708 	biceq	r0, r4, r8, lsl #14
    dd08:	cb040000 	blgt	10dd10 <_Min_Stack_Size+0x10db10>
    dd0c:	01000051 	qaddeq	r0, r1, r0
    dd10:	00001d07 	andeq	r1, r0, r7, lsl #26
    dd14:	51ba0400 			; <UNDEFINED> instruction: 0x51ba0400
    dd18:	2c020000 	stccs	0, cr0, [r2], {-0}
    dd1c:	00000055 	andeq	r0, r0, r5, asr r0
    dd20:	0052a404 	subseq	sl, r2, r4, lsl #8
    dd24:	55720200 	ldrbpl	r0, [r2, #-512]!	; 0xfffffe00
    dd28:	05000000 	streq	r0, [r0, #-0]
    dd2c:	00005187 	andeq	r5, r0, r7, lsl #3
    dd30:	24016503 	strcs	r6, [r1], #-1283	; 0xfffffafd
    dd34:	06000000 	streq	r0, [r0], -r0
    dd38:	b6a60204 	strtlt	r0, [r6], r4, lsl #4
    dd3c:	07000000 	streq	r0, [r0, -r0]
    dd40:	00005181 	andeq	r5, r0, r1, lsl #3
    dd44:	008ba802 	addeq	sl, fp, r2, lsl #16
    dd48:	cf070000 	svcgt	0x00070000
    dd4c:	02000050 	andeq	r0, r0, #80	; 0x50
    dd50:	0000b6a9 	andeq	fp, r0, r9, lsr #13
    dd54:	40080000 	andmi	r0, r8, r0
    dd58:	c6000000 	strgt	r0, [r0], -r0
    dd5c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    dd60:	000000c6 	andeq	r0, r0, r6, asr #1
    dd64:	04030003 	streq	r0, [r3], #-3
    dd68:	00005907 	andeq	r5, r0, r7, lsl #18
    dd6c:	02080a00 	andeq	r0, r8, #0, 20
    dd70:	0000eea3 	andeq	lr, r0, r3, lsr #29
    dd74:	528e0b00 	addpl	r0, lr, #0, 22
    dd78:	a5020000 	strge	r0, [r2, #-0]
    dd7c:	0000001d 	andeq	r0, r0, sp, lsl r0
    dd80:	52960b00 	addspl	r0, r6, #0, 22
    dd84:	aa020000 	bge	8dd8c <_Min_Stack_Size+0x8db8c>
    dd88:	00000097 	muleq	r0, r7, r0
    dd8c:	2d040004 	stccs	0, cr0, [r4, #-16]
    dd90:	02000052 	andeq	r0, r0, #82	; 0x52
    dd94:	0000cdab 	andeq	ip, r0, fp, lsr #27
    dd98:	50a00400 	adcpl	r0, r0, r0, lsl #8
    dd9c:	af020000 	svcge	0x00020000
    dda0:	0000006a 	andeq	r0, r0, sl, rrx
    dda4:	040d040c 	streq	r0, [sp], #-1036	; 0xfffffbf4
    dda8:	0000010c 	andeq	r0, r0, ip, lsl #2
    ddac:	99080103 	stmdbls	r8, {r0, r1, r8}
    ddb0:	04000001 	streq	r0, [r0], #-1
    ddb4:	000052e0 	andeq	r5, r0, r0, ror #5
    ddb8:	005c1604 	subseq	r1, ip, r4, lsl #12
    ddbc:	a90e0000 	stmdbge	lr, {}	; <UNPREDICTABLE>
    ddc0:	18000050 	stmdane	r0, {r4, r6}
    ddc4:	01712d04 	cmneq	r1, r4, lsl #26
    ddc8:	4e0b0000 	cdpmi	0, 0, cr0, cr11, cr0, {0}
    ddcc:	04000052 	streq	r0, [r0], #-82	; 0xffffffae
    ddd0:	0001712f 	andeq	r7, r1, pc, lsr #2
    ddd4:	5f0f0000 	svcpl	0x000f0000
    ddd8:	3004006b 	andcc	r0, r4, fp, rrx
    dddc:	0000001d 	andeq	r0, r0, sp, lsl r0
    dde0:	52800b04 	addpl	r0, r0, #4, 22	; 0x1000
    dde4:	30040000 	andcc	r0, r4, r0
    dde8:	0000001d 	andeq	r0, r0, sp, lsl r0
    ddec:	509a0b08 	addspl	r0, sl, r8, lsl #22
    ddf0:	30040000 	andcc	r0, r4, r0
    ddf4:	0000001d 	andeq	r0, r0, sp, lsl r0
    ddf8:	52fb0b0c 	rscspl	r0, fp, #12, 22	; 0x3000
    ddfc:	30040000 	andcc	r0, r4, r0
    de00:	0000001d 	andeq	r0, r0, sp, lsl r0
    de04:	785f0f10 	ldmdavc	pc, {r4, r8, r9, sl, fp}^	; <UNPREDICTABLE>
    de08:	77310400 	ldrvc	r0, [r1, -r0, lsl #8]!
    de0c:	14000001 	strne	r0, [r0], #-1
    de10:	1e040d00 	cdpne	13, 0, cr0, cr4, cr0, {0}
    de14:	08000001 	stmdaeq	r0, {r0}
    de18:	00000113 	andeq	r0, r0, r3, lsl r1
    de1c:	00000187 	andeq	r0, r0, r7, lsl #3
    de20:	0000c609 	andeq	ip, r0, r9, lsl #12
    de24:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    de28:	000050ca 	andeq	r5, r0, sl, asr #1
    de2c:	00350424 	eorseq	r0, r5, r4, lsr #8
    de30:	0b000002 	bleq	de40 <_Min_Stack_Size+0xdc40>
    de34:	0000502e 	andeq	r5, r0, lr, lsr #32
    de38:	001d3704 	andseq	r3, sp, r4, lsl #14
    de3c:	0b000000 	bleq	de44 <_Min_Stack_Size+0xdc44>
    de40:	000052b3 			; <UNDEFINED> instruction: 0x000052b3
    de44:	001d3804 	andseq	r3, sp, r4, lsl #16
    de48:	0b040000 	bleq	10de50 <_Min_Stack_Size+0x10dc50>
    de4c:	0000503d 	andeq	r5, r0, sp, lsr r0
    de50:	001d3904 	andseq	r3, sp, r4, lsl #18
    de54:	0b080000 	bleq	20de5c <_Min_Stack_Size+0x20dc5c>
    de58:	00005358 	andeq	r5, r0, r8, asr r3
    de5c:	001d3a04 	andseq	r3, sp, r4, lsl #20
    de60:	0b0c0000 	bleq	30de68 <_Min_Stack_Size+0x30dc68>
    de64:	000051a6 	andeq	r5, r0, r6, lsr #3
    de68:	001d3b04 	andseq	r3, sp, r4, lsl #22
    de6c:	0b100000 	bleq	40de74 <_Min_Stack_Size+0x40dc74>
    de70:	00005196 	muleq	r0, r6, r1
    de74:	001d3c04 	andseq	r3, sp, r4, lsl #24
    de78:	0b140000 	bleq	50de80 <_Min_Stack_Size+0x50dc80>
    de7c:	00005300 	andeq	r5, r0, r0, lsl #6
    de80:	001d3d04 	andseq	r3, sp, r4, lsl #26
    de84:	0b180000 	bleq	60de8c <_Min_Stack_Size+0x60dc8c>
    de88:	00005215 	andeq	r5, r0, r5, lsl r2
    de8c:	001d3e04 	andseq	r3, sp, r4, lsl #28
    de90:	0b1c0000 	bleq	70de98 <_Min_Stack_Size+0x70dc98>
    de94:	00005324 	andeq	r5, r0, r4, lsr #6
    de98:	001d3f04 	andseq	r3, sp, r4, lsl #30
    de9c:	00200000 	eoreq	r0, r0, r0
    dea0:	00521f0e 	subseq	r1, r2, lr, lsl #30
    dea4:	73040800 	movwvc	r0, #18432	; 0x4800
    dea8:	00000225 	andeq	r0, r0, r5, lsr #4
    deac:	0033a10b 	eorseq	sl, r3, fp, lsl #2
    deb0:	25740400 	ldrbcs	r0, [r4, #-1024]!	; 0xfffffc00
    deb4:	00000002 	andeq	r0, r0, r2
    deb8:	0057ca0b 	subseq	ip, r7, fp, lsl #20
    debc:	1d750400 	cfldrdne	mvd0, [r5, #-0]
    dec0:	04000000 	streq	r0, [r0], #-0
    dec4:	40040d00 	andmi	r0, r4, r0, lsl #26
    dec8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    decc:	000055d7 	ldrdeq	r5, [r0], -r7
    ded0:	95970420 	ldrls	r0, [r7, #1056]	; 0x420
    ded4:	0f000002 	svceq	0x00000002
    ded8:	0400705f 	streq	r7, [r0], #-95	; 0xffffffa1
    dedc:	00022598 	muleq	r2, r8, r5
    dee0:	5f0f0000 	svcpl	0x000f0000
    dee4:	99040072 	stmdbls	r4, {r1, r4, r5, r6}
    dee8:	0000001d 	andeq	r0, r0, sp, lsl r0
    deec:	775f0f04 	ldrbvc	r0, [pc, -r4, lsl #30]
    def0:	1d9a0400 	cfldrsne	mvf0, [sl]
    def4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    def8:	0050630b 	subseq	r6, r0, fp, lsl #6
    defc:	479b0400 	ldrmi	r0, [fp, r0, lsl #8]
    df00:	0c000000 	stceq	0, cr0, [r0], {-0}
    df04:	0052f50b 	subseq	pc, r2, fp, lsl #10
    df08:	479c0400 	ldrmi	r0, [ip, r0, lsl #8]
    df0c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    df10:	66625f0f 	strbtvs	r5, [r2], -pc, lsl #30
    df14:	009d0400 	addseq	r0, sp, r0, lsl #8
    df18:	10000002 	andne	r0, r0, r2
    df1c:	0050080b 	subseq	r0, r0, fp, lsl #16
    df20:	1d9e0400 	cfldrsne	mvf0, [lr]
    df24:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    df28:	000deb0b 	andeq	lr, sp, fp, lsl #22
    df2c:	c1a00400 	lslgt	r0, r0, #8
    df30:	1c000003 	stcne	0, cr0, [r0], {3}
    df34:	52d41000 	sbcspl	r1, r4, #0
    df38:	04600000 	strbteq	r0, [r0], #-0
    df3c:	03c10172 	biceq	r0, r1, #-2147483620	; 0x8000001c
    df40:	ac110000 	ldcge	0, cr0, [r1], {-0}
    df44:	04000052 	streq	r0, [r0], #-82	; 0xffffffae
    df48:	001d0176 	andseq	r0, sp, r6, ror r1
    df4c:	11000000 	mrsne	r0, (UNDEF: 0)
    df50:	000055ed 	andeq	r5, r0, sp, ror #11
    df54:	e9017b04 	stmdb	r1, {r2, r8, r9, fp, ip, sp, lr}
    df58:	04000005 	streq	r0, [r0], #-5
    df5c:	0055fd11 	subseq	pc, r5, r1, lsl sp	; <UNPREDICTABLE>
    df60:	017b0400 	cmneq	fp, r0, lsl #8
    df64:	000005e9 	andeq	r0, r0, r9, ror #11
    df68:	56b81108 	ldrtpl	r1, [r8], r8, lsl #2
    df6c:	7b040000 	blvc	10df74 <_Min_Stack_Size+0x10dd74>
    df70:	0005e901 	andeq	lr, r5, r1, lsl #18
    df74:	61110c00 	tstvs	r1, r0, lsl #24
    df78:	04000052 	streq	r0, [r0], #-82	; 0xffffffae
    df7c:	001d017d 	andseq	r0, sp, sp, ror r1
    df80:	11100000 	tstne	r0, r0
    df84:	00004fe2 	andeq	r4, r0, r2, ror #31
    df88:	06017f04 	streq	r7, [r1], -r4, lsl #30
    df8c:	14000001 	strne	r0, [r0], #-1
    df90:	0051af11 	subseq	sl, r1, r1, lsl pc
    df94:	01810400 	orreq	r0, r1, r0, lsl #8
    df98:	0000001d 	andeq	r0, r0, sp, lsl r0
    df9c:	50e71118 	rscpl	r1, r7, r8, lsl r1
    dfa0:	83040000 	movwhi	r0, #16384	; 0x4000
    dfa4:	00001d01 	andeq	r1, r0, r1, lsl #26
    dfa8:	66111c00 	ldrvs	r1, [r1], -r0, lsl #24
    dfac:	04000052 	streq	r0, [r0], #-82	; 0xffffffae
    dfb0:	05330184 	ldreq	r0, [r3, #-388]!	; 0xfffffe7c
    dfb4:	12200000 	eorne	r0, r0, #0
    dfb8:	00706d5f 	rsbseq	r6, r0, pc, asr sp
    dfbc:	36018604 	strcc	r8, [r1], -r4, lsl #12
    dfc0:	24000007 	strcs	r0, [r0], #-7
    dfc4:	00527611 	subseq	r7, r2, r1, lsl r6
    dfc8:	01880400 	orreq	r0, r8, r0, lsl #8
    dfcc:	00000747 	andeq	r0, r0, r7, asr #14
    dfd0:	50b11128 	adcspl	r1, r1, r8, lsr #2
    dfd4:	8a040000 	bhi	10dfdc <_Min_Stack_Size+0x10dddc>
    dfd8:	00001d01 	andeq	r1, r0, r1, lsl #26
    dfdc:	f9112c00 			; <UNDEFINED> instruction: 0xf9112c00
    dfe0:	04000050 	streq	r0, [r0], #-80	; 0xffffffb0
    dfe4:	001d018d 	andseq	r0, sp, sp, lsl #3
    dfe8:	11300000 	teqne	r0, r0
    dfec:	00005073 	andeq	r5, r0, r3, ror r0
    dff0:	06018e04 	streq	r8, [r1], -r4, lsl #28
    dff4:	34000001 	strcc	r0, [r0], #-1
    dff8:	00510111 	subseq	r0, r1, r1, lsl r1
    dffc:	01900400 	orrseq	r0, r0, r0, lsl #8
    e000:	0000074d 	andeq	r0, r0, sp, asr #14
    e004:	532f1138 			; <UNDEFINED> instruction: 0x532f1138
    e008:	91040000 	mrsls	r0, (UNDEF: 4)
    e00c:	00075301 	andeq	r5, r7, r1, lsl #6
    e010:	6c113c00 	ldcvs	12, cr3, [r1], {-0}
    e014:	04000051 	streq	r0, [r0], #-81	; 0xffffffaf
    e018:	01060192 			; <UNDEFINED> instruction: 0x01060192
    e01c:	11400000 	mrsne	r0, (UNDEF: 64)
    e020:	00005314 	andeq	r5, r0, r4, lsl r3
    e024:	64019504 	strvs	r9, [r1], #-1284	; 0xfffffafc
    e028:	44000007 	strmi	r0, [r0], #-7
    e02c:	00505411 	subseq	r5, r0, r1, lsl r4
    e030:	019d0400 	orrseq	r0, sp, r0, lsl #8
    e034:	000005ae 	andeq	r0, r0, lr, lsr #11
    e038:	50471148 	subpl	r1, r7, r8, asr #2
    e03c:	9e040000 	cdpls	0, 0, cr0, cr4, cr0, {0}
    e040:	0005e901 	andeq	lr, r5, r1, lsl #18
    e044:	a0115400 	andsge	r5, r1, r0, lsl #8
    e048:	04000051 	streq	r0, [r0], #-81	; 0xffffffaf
    e04c:	0770019f 			; <UNDEFINED> instruction: 0x0770019f
    e050:	11580000 	cmpne	r8, r0
    e054:	00004ffc 	strdeq	r4, [r0], -ip
    e058:	0601a004 	streq	sl, [r1], -r4
    e05c:	5c000001 	stcpl	0, cr0, [r0], {1}
    e060:	95040d00 	strls	r0, [r4, #-3328]	; 0xfffff300
    e064:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    e068:	00005238 	andeq	r5, r0, r8, lsr r2
    e06c:	f1b30468 			; <UNDEFINED> instruction: 0xf1b30468
    e070:	0f000004 	svceq	0x00000004
    e074:	0400705f 	streq	r7, [r0], #-95	; 0xffffffa1
    e078:	000225b4 			; <UNDEFINED> instruction: 0x000225b4
    e07c:	5f0f0000 	svcpl	0x000f0000
    e080:	b5040072 	strlt	r0, [r4, #-114]	; 0xffffff8e
    e084:	0000001d 	andeq	r0, r0, sp, lsl r0
    e088:	775f0f04 	ldrbvc	r0, [pc, -r4, lsl #30]
    e08c:	1db60400 	cfldrsne	mvf0, [r6]
    e090:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e094:	0050630b 	subseq	r6, r0, fp, lsl #6
    e098:	47b70400 	ldrmi	r0, [r7, r0, lsl #8]!
    e09c:	0c000000 	stceq	0, cr0, [r0], {-0}
    e0a0:	0052f50b 	subseq	pc, r2, fp, lsl #10
    e0a4:	47b80400 	ldrmi	r0, [r8, r0, lsl #8]!
    e0a8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    e0ac:	66625f0f 	strbtvs	r5, [r2], -pc, lsl #30
    e0b0:	00b90400 	adcseq	r0, r9, r0, lsl #8
    e0b4:	10000002 	andne	r0, r0, r2
    e0b8:	0050080b 	subseq	r0, r0, fp, lsl #16
    e0bc:	1dba0400 	cfldrsne	mvf0, [sl]
    e0c0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    e0c4:	000deb0b 	andeq	lr, sp, fp, lsl #22
    e0c8:	c1bd0400 			; <UNDEFINED> instruction: 0xc1bd0400
    e0cc:	1c000003 	stcne	0, cr0, [r0], {3}
    e0d0:	00504c0b 	subseq	r4, r0, fp, lsl #24
    e0d4:	04c10400 	strbeq	r0, [r1], #1024	; 0x400
    e0d8:	20000001 	andcs	r0, r0, r1
    e0dc:	003a870b 	eorseq	r8, sl, fp, lsl #14
    e0e0:	0fc30400 	svceq	0x00c30400
    e0e4:	24000005 	strcs	r0, [r0], #-5
    e0e8:	0039e20b 	eorseq	lr, r9, fp, lsl #4
    e0ec:	3ec50400 	cdpcc	4, 12, cr0, cr5, cr0, {0}
    e0f0:	28000005 	stmdacs	r0, {r0, r2}
    e0f4:	00529e0b 	subseq	r9, r2, fp, lsl #28
    e0f8:	62c80400 	sbcvs	r0, r8, #0, 8
    e0fc:	2c000005 	stccs	0, cr0, [r0], {5}
    e100:	00533e0b 	subseq	r3, r3, fp, lsl #28
    e104:	7cc90400 	cfstrdvc	mvd0, [r9], {0}
    e108:	30000005 	andcc	r0, r0, r5
    e10c:	62755f0f 	rsbsvs	r5, r5, #15, 30	; 0x3c
    e110:	00cc0400 	sbceq	r0, ip, r0, lsl #8
    e114:	34000002 	strcc	r0, [r0], #-2
    e118:	70755f0f 	rsbsvc	r5, r5, pc, lsl #30
    e11c:	25cd0400 	strbcs	r0, [sp, #1024]	; 0x400
    e120:	3c000002 	stccc	0, cr0, [r0], {2}
    e124:	72755f0f 	rsbsvc	r5, r5, #15, 30	; 0x3c
    e128:	1dce0400 	cfstrdne	mvd0, [lr]
    e12c:	40000000 	andmi	r0, r0, r0
    e130:	0050370b 	subseq	r3, r0, fp, lsl #14
    e134:	82d10400 	sbcshi	r0, r1, #0, 8
    e138:	44000005 	strmi	r0, [r0], #-5
    e13c:	00531e0b 	subseq	r1, r3, fp, lsl #28
    e140:	92d20400 	sbcsls	r0, r2, #0, 8
    e144:	47000005 	strmi	r0, [r0, -r5]
    e148:	626c5f0f 	rsbvs	r5, ip, #15, 30	; 0x3c
    e14c:	00d50400 	sbcseq	r0, r5, r0, lsl #8
    e150:	48000002 	stmdami	r0, {r1}
    e154:	00506a0b 	subseq	r6, r0, fp, lsl #20
    e158:	1dd80400 	cfldrdne	mvd0, [r8]
    e15c:	50000000 	andpl	r0, r0, r0
    e160:	005b4c0b 	subseq	r4, fp, fp, lsl #24
    e164:	75d90400 	ldrbvc	r0, [r9, #1024]	; 0x400
    e168:	54000000 	strpl	r0, [r0], #-0
    e16c:	00353a0b 	eorseq	r3, r5, fp, lsl #20
    e170:	f9e00400 			; <UNDEFINED> instruction: 0xf9e00400
    e174:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    e178:	0052400b 	subseq	r4, r2, fp
    e17c:	eee20400 	cdp	4, 14, cr0, cr2, cr0, {0}
    e180:	5c000000 	stcpl	0, cr0, [r0], {-0}
    e184:	00518e0b 	subseq	r8, r1, fp, lsl #28
    e188:	1de30400 	cfstrdne	mvd0, [r3]
    e18c:	64000000 	strvs	r0, [r0], #-0
    e190:	001d1300 	andseq	r1, sp, r0, lsl #6
    e194:	050f0000 	streq	r0, [pc, #-0]	; e19c <_Min_Stack_Size+0xdf9c>
    e198:	c1140000 	tstgt	r4, r0
    e19c:	14000003 	strne	r0, [r0], #-3
    e1a0:	00000104 	andeq	r0, r0, r4, lsl #2
    e1a4:	00010614 	andeq	r0, r1, r4, lsl r6
    e1a8:	001d1400 	andseq	r1, sp, r0, lsl #8
    e1ac:	0d000000 	stceq	0, cr0, [r0, #-0]
    e1b0:	0004f104 	andeq	pc, r4, r4, lsl #2
    e1b4:	001d1300 	andseq	r1, sp, r0, lsl #6
    e1b8:	05330000 	ldreq	r0, [r3, #-0]!
    e1bc:	c1140000 	tstgt	r4, r0
    e1c0:	14000003 	strne	r0, [r0], #-3
    e1c4:	00000104 	andeq	r0, r0, r4, lsl #2
    e1c8:	00053314 	andeq	r3, r5, r4, lsl r3
    e1cc:	001d1400 	andseq	r1, sp, r0, lsl #8
    e1d0:	0d000000 	stceq	0, cr0, [r0, #-0]
    e1d4:	00053904 	andeq	r3, r5, r4, lsl #18
    e1d8:	010c1500 	tsteq	ip, r0, lsl #10
    e1dc:	040d0000 	streq	r0, [sp], #-0
    e1e0:	00000515 	andeq	r0, r0, r5, lsl r5
    e1e4:	00008013 	andeq	r8, r0, r3, lsl r0
    e1e8:	00056200 	andeq	r6, r5, r0, lsl #4
    e1ec:	03c11400 	biceq	r1, r1, #0, 8
    e1f0:	04140000 	ldreq	r0, [r4], #-0
    e1f4:	14000001 	strne	r0, [r0], #-1
    e1f8:	00000080 	andeq	r0, r0, r0, lsl #1
    e1fc:	00001d14 	andeq	r1, r0, r4, lsl sp
    e200:	040d0000 	streq	r0, [sp], #-0
    e204:	00000544 	andeq	r0, r0, r4, asr #10
    e208:	00001d13 	andeq	r1, r0, r3, lsl sp
    e20c:	00057c00 	andeq	r7, r5, r0, lsl #24
    e210:	03c11400 	biceq	r1, r1, #0, 8
    e214:	04140000 	ldreq	r0, [r4], #-0
    e218:	00000001 	andeq	r0, r0, r1
    e21c:	0568040d 	strbeq	r0, [r8, #-1037]!	; 0xfffffbf3
    e220:	40080000 	andmi	r0, r8, r0
    e224:	92000000 	andls	r0, r0, #0
    e228:	09000005 	stmdbeq	r0, {r0, r2}
    e22c:	000000c6 	andeq	r0, r0, r6, asr #1
    e230:	40080002 	andmi	r0, r8, r2
    e234:	a2000000 	andge	r0, r0, #0
    e238:	09000005 	stmdbeq	r0, {r0, r2}
    e23c:	000000c6 	andeq	r0, r0, r6, asr #1
    e240:	26050000 	strcs	r0, [r5], -r0
    e244:	04000052 	streq	r0, [r0], #-82	; 0xffffffae
    e248:	03c7011d 	biceq	r0, r7, #1073741831	; 0x40000007
    e24c:	0b100000 	bleq	40e254 <_Min_Stack_Size+0x40e054>
    e250:	0c00005b 	stceq	0, cr0, [r0], {91}	; 0x5b
    e254:	e3012104 	movw	r2, #4356	; 0x1104
    e258:	11000005 	tstne	r0, r5
    e25c:	0000524e 	andeq	r5, r0, lr, asr #4
    e260:	e3012304 	movw	r2, #4868	; 0x1304
    e264:	00000005 	andeq	r0, r0, r5
    e268:	00510611 	subseq	r0, r1, r1, lsl r6
    e26c:	01240400 			; <UNDEFINED> instruction: 0x01240400
    e270:	0000001d 	andeq	r0, r0, sp, lsl r0
    e274:	520f1104 	andpl	r1, pc, #4, 2
    e278:	25040000 	strcs	r0, [r4, #-0]
    e27c:	0005e901 	andeq	lr, r5, r1, lsl #18
    e280:	0d000800 	stceq	8, cr0, [r0, #-0]
    e284:	0005ae04 	andeq	sl, r5, r4, lsl #28
    e288:	a2040d00 	andge	r0, r4, #0, 26
    e28c:	10000005 	andne	r0, r0, r5
    e290:	00004fda 	ldrdeq	r4, [r0], -sl
    e294:	013d0418 	teqeq	sp, r8, lsl r4
    e298:	00000631 	andeq	r0, r0, r1, lsr r6
    e29c:	00528811 	subseq	r8, r2, r1, lsl r8
    e2a0:	013e0400 	teqeq	lr, r0, lsl #8
    e2a4:	00000631 	andeq	r0, r0, r1, lsr r6
    e2a8:	52bc1100 	adcspl	r1, ip, #0, 2
    e2ac:	3f040000 	svccc	0x00040000
    e2b0:	00063101 	andeq	r3, r6, r1, lsl #2
    e2b4:	db110600 	blle	44fabc <_Min_Stack_Size+0x44f8bc>
    e2b8:	04000052 	streq	r0, [r0], #-82	; 0xffffffae
    e2bc:	004e0140 	subeq	r0, lr, r0, asr #2
    e2c0:	110c0000 	mrsne	r0, (UNDEF: 12)
    e2c4:	00005249 	andeq	r5, r0, r9, asr #4
    e2c8:	63014304 	movwvs	r4, #4868	; 0x1304
    e2cc:	10000000 	andne	r0, r0, r0
    e2d0:	004e0800 	subeq	r0, lr, r0, lsl #16
    e2d4:	06410000 	strbeq	r0, [r1], -r0
    e2d8:	c6090000 	strgt	r0, [r9], -r0
    e2dc:	02000000 	andeq	r0, r0, #0
    e2e0:	505c1000 	subspl	r1, ip, r0
    e2e4:	04100000 	ldreq	r0, [r0], #-0
    e2e8:	06830156 	pkhtbeq	r0, r3, r6, asr #2
    e2ec:	79110000 	ldmdbvc	r1, {}	; <UNPREDICTABLE>
    e2f0:	04000051 	streq	r0, [r0], #-81	; 0xffffffaf
    e2f4:	01710159 	cmneq	r1, r9, asr r1
    e2f8:	11000000 	mrsne	r0, (UNDEF: 0)
    e2fc:	000050c0 	andeq	r5, r0, r0, asr #1
    e300:	1d015a04 	vstrne	s10, [r1, #-16]
    e304:	04000000 	streq	r0, [r0], #-0
    e308:	00535311 	subseq	r5, r3, r1, lsl r3
    e30c:	015b0400 	cmpeq	fp, r0, lsl #8
    e310:	00000171 	andeq	r0, r0, r1, ror r1
    e314:	51c11108 	bicpl	r1, r1, r8, lsl #2
    e318:	5c040000 	stcpl	0, cr0, [r4], {-0}
    e31c:	00068301 	andeq	r8, r6, r1, lsl #6
    e320:	0d000c00 	stceq	12, cr0, [r0, #-0]
    e324:	00017104 	andeq	r7, r1, r4, lsl #2
    e328:	52cf1000 	sbcpl	r1, pc, #0
    e32c:	04500000 	ldrbeq	r0, [r0], #-0
    e330:	07260160 	streq	r0, [r6, -r0, ror #2]!
    e334:	c2110000 	andsgt	r0, r1, #0
    e338:	04000052 	streq	r0, [r0], #-82	; 0xffffffae
    e33c:	01060163 	tsteq	r6, r3, ror #2
    e340:	11000000 	mrsne	r0, (UNDEF: 0)
    e344:	00005254 	andeq	r5, r0, r4, asr r2
    e348:	ee016404 	cdp	4, 0, cr6, cr1, cr4, {0}
    e34c:	04000000 	streq	r0, [r0], #-0
    e350:	00502011 	subseq	r2, r0, r1, lsl r0
    e354:	01650400 	cmneq	r5, r0, lsl #8
    e358:	000000ee 	andeq	r0, r0, lr, ror #1
    e35c:	5345110c 	movtpl	r1, #20748	; 0x510c
    e360:	66040000 	strvs	r0, [r4], -r0
    e364:	0000ee01 	andeq	lr, r0, r1, lsl #28
    e368:	0a111400 	beq	453370 <_Min_Stack_Size+0x453170>
    e36c:	04000053 	streq	r0, [r0], #-83	; 0xffffffad
    e370:	07260167 	streq	r0, [r6, -r7, ror #2]!
    e374:	111c0000 	tstne	ip, r0
    e378:	000052e8 	andeq	r5, r0, r8, ror #5
    e37c:	1d016804 	stcne	8, cr6, [r1, #-16]
    e380:	24000000 	strcs	r0, [r0], #-0
    e384:	00508c11 	subseq	r8, r0, r1, lsl ip
    e388:	01690400 	cmneq	r9, r0, lsl #8
    e38c:	000000ee 	andeq	r0, r0, lr, ror #1
    e390:	50111128 	andspl	r1, r1, r8, lsr #2
    e394:	6a040000 	bvs	10e39c <_Min_Stack_Size+0x10e19c>
    e398:	0000ee01 	andeq	lr, r0, r1, lsl #28
    e39c:	7b113000 	blvc	45a3a4 <_Min_Stack_Size+0x45a1a4>
    e3a0:	04000050 	streq	r0, [r0], #-80	; 0xffffffb0
    e3a4:	00ee016b 	rsceq	r0, lr, fp, ror #2
    e3a8:	11380000 	teqne	r8, r0
    e3ac:	00004fed 	andeq	r4, r0, sp, ror #31
    e3b0:	ee016c04 	cdp	12, 0, cr6, cr1, cr4, {0}
    e3b4:	40000000 	andmi	r0, r0, r0
    e3b8:	0050d611 	subseq	sp, r0, r1, lsl r6
    e3bc:	016d0400 	cmneq	sp, r0, lsl #8
    e3c0:	000000ee 	andeq	r0, r0, lr, ror #1
    e3c4:	0c080048 	stceq	0, cr0, [r8], {72}	; 0x48
    e3c8:	36000001 	strcc	r0, [r0], -r1
    e3cc:	09000007 	stmdbeq	r0, {r0, r1, r2}
    e3d0:	000000c6 	andeq	r0, r0, r6, asr #1
    e3d4:	040d0007 	streq	r0, [sp], #-7
    e3d8:	00000641 	andeq	r0, r0, r1, asr #12
    e3dc:	00074716 	andeq	r4, r7, r6, lsl r7
    e3e0:	03c11400 	biceq	r1, r1, #0, 8
    e3e4:	0d000000 	stceq	0, cr0, [r0, #-0]
    e3e8:	00073c04 	andeq	r3, r7, r4, lsl #24
    e3ec:	ef040d00 	svc	0x00040d00
    e3f0:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    e3f4:	00018704 	andeq	r8, r1, r4, lsl #14
    e3f8:	07641600 	strbeq	r1, [r4, -r0, lsl #12]!
    e3fc:	1d140000 	ldcne	0, cr0, [r4, #-0]
    e400:	00000000 	andeq	r0, r0, r0
    e404:	076a040d 	strbeq	r0, [sl, -sp, lsl #8]!
    e408:	040d0000 	streq	r0, [sp], #-0
    e40c:	00000759 	andeq	r0, r0, r9, asr r7
    e410:	0689040d 	streq	r0, [r9], sp, lsl #8
    e414:	63170000 	tstvs	r7, #0
    e418:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    e41c:	00029517 	andeq	r9, r2, r7, lsl r5
    e420:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
    e424:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
    e428:	000055e4 	andeq	r5, r0, r4, ror #11
    e42c:	9301a304 	movwls	sl, #4868	; 0x1304
    e430:	15000007 	strne	r0, [r0, #-7]
    e434:	0000022b 	andeq	r0, r0, fp, lsr #4
    e438:	0055f418 	subseq	pc, r5, r8, lsl r4	; <UNPREDICTABLE>
    e43c:	01a40400 			; <UNDEFINED> instruction: 0x01a40400
    e440:	00000793 	muleq	r0, r3, r7
    e444:	0056af18 	subseq	sl, r6, r8, lsl pc
    e448:	01a50400 			; <UNDEFINED> instruction: 0x01a50400
    e44c:	00000793 	muleq	r0, r3, r7
    e450:	0056a319 	subseq	sl, r6, r9, lsl r3
    e454:	02fd0400 	rscseq	r0, sp, #0, 8
    e458:	000003c1 	andeq	r0, r0, r1, asr #7
    e45c:	00000305 	andeq	r0, r0, r5, lsl #6
    e460:	9c192000 	ldcls	0, cr2, [r9], {-0}
    e464:	04000056 	streq	r0, [r0], #-86	; 0xffffffaa
    e468:	07d402fe 			; <UNDEFINED> instruction: 0x07d402fe
    e46c:	03050000 	movweq	r0, #20480	; 0x5000
    e470:	00000000 	andeq	r0, r0, r0
    e474:	0003c115 	andeq	ip, r3, r5, lsl r1
    e478:	07ae0000 	streq	r0, [lr, r0]!
    e47c:	00040000 	andeq	r0, r4, r0
    e480:	00002ee4 	andeq	r2, r0, r4, ror #29
    e484:	4ee60104 	cdpmi	1, 14, cr0, cr6, cr4, {0}
    e488:	c50c0000 	strgt	r0, [ip, #-0]
    e48c:	0d000056 	stceq	0, cr0, [r0, #-344]	; 0xfffffea8
    e490:	ac000051 	stcge	0, cr0, [r0], {81}	; 0x51
    e494:	20080007 	andcs	r0, r8, r7
    e498:	73000000 	movwvc	r0, #0
    e49c:	02000063 	andeq	r0, r0, #99	; 0x63
    e4a0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    e4a4:	13030074 	movwne	r0, #12404	; 0x3074
    e4a8:	02000057 	andeq	r0, r0, #87	; 0x57
    e4ac:	000037d8 	ldrdeq	r3, [r0], -r8
    e4b0:	07040400 	streq	r0, [r4, -r0, lsl #8]
    e4b4:	000001ce 	andeq	r0, r0, lr, asr #3
    e4b8:	b8050804 	stmdalt	r5, {r2, fp}
    e4bc:	04000000 	streq	r0, [r0], #-0
    e4c0:	02f80408 	rscseq	r0, r8, #8, 8	; 0x8000000
    e4c4:	01040000 	mrseq	r0, (UNDEF: 4)
    e4c8:	00019206 	andeq	r9, r1, r6, lsl #4
    e4cc:	08010400 	stmdaeq	r1, {sl}
    e4d0:	00000190 	muleq	r0, r0, r1
    e4d4:	95050204 	strls	r0, [r5, #-516]	; 0xfffffdfc
    e4d8:	04000000 	streq	r0, [r0], #-0
    e4dc:	01f20702 	mvnseq	r0, r2, lsl #14
    e4e0:	04040000 	streq	r0, [r4], #-0
    e4e4:	0000bd05 	andeq	fp, r0, r5, lsl #26
    e4e8:	07040400 	streq	r0, [r4, -r0, lsl #8]
    e4ec:	000001c9 	andeq	r0, r0, r9, asr #3
    e4f0:	c4070804 	strgt	r0, [r7], #-2052	; 0xfffff7fc
    e4f4:	03000001 	movweq	r0, #1
    e4f8:	000051cb 	andeq	r5, r0, fp, asr #3
    e4fc:	00250703 	eoreq	r0, r5, r3, lsl #14
    e500:	ba030000 	blt	ce508 <_Min_Stack_Size+0xce308>
    e504:	04000051 	streq	r0, [r0], #-81	; 0xffffffaf
    e508:	0000682c 	andeq	r6, r0, ip, lsr #16
    e50c:	52a40300 	adcpl	r0, r4, #0, 6
    e510:	72040000 	andvc	r0, r4, #0
    e514:	00000068 	andeq	r0, r0, r8, rrx
    e518:	00518705 	subseq	r8, r1, r5, lsl #14
    e51c:	01650200 	cmneq	r5, r0, lsl #4
    e520:	00000037 	andeq	r0, r0, r7, lsr r0
    e524:	a6040406 	strge	r0, [r4], -r6, lsl #8
    e528:	000000c9 	andeq	r0, r0, r9, asr #1
    e52c:	00518107 	subseq	r8, r1, r7, lsl #2
    e530:	9ea80400 	cdpls	4, 10, cr0, cr8, cr0, {0}
    e534:	07000000 	streq	r0, [r0, -r0]
    e538:	000050cf 	andeq	r5, r0, pc, asr #1
    e53c:	00c9a904 	sbceq	sl, r9, r4, lsl #18
    e540:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e544:	00000053 	andeq	r0, r0, r3, asr r0
    e548:	000000d9 	ldrdeq	r0, [r0], -r9
    e54c:	0000d909 	andeq	sp, r0, r9, lsl #18
    e550:	04000300 	streq	r0, [r0], #-768	; 0xfffffd00
    e554:	00590704 	subseq	r0, r9, r4, lsl #14
    e558:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
    e55c:	0101a304 	tsteq	r1, r4, lsl #6
    e560:	8e0b0000 	cdphi	0, 0, cr0, cr11, cr0, {0}
    e564:	04000052 	streq	r0, [r0], #-82	; 0xffffffae
    e568:	000025a5 	andeq	r2, r0, r5, lsr #11
    e56c:	960b0000 	strls	r0, [fp], -r0
    e570:	04000052 	streq	r0, [r0], #-82	; 0xffffffae
    e574:	0000aaaa 	andeq	sl, r0, sl, lsr #21
    e578:	03000400 	movweq	r0, #1024	; 0x400
    e57c:	0000522d 	andeq	r5, r0, sp, lsr #4
    e580:	00e0ab04 	rsceq	sl, r0, r4, lsl #22
    e584:	a0030000 	andge	r0, r3, r0
    e588:	04000050 	streq	r0, [r0], #-80	; 0xffffffb0
    e58c:	00007daf 	andeq	r7, r0, pc, lsr #27
    e590:	0d040c00 	stceq	12, cr0, [r4, #-0]
    e594:	00011f04 	andeq	r1, r1, r4, lsl #30
    e598:	08010400 	stmdaeq	r1, {sl}
    e59c:	00000199 	muleq	r0, r9, r1
    e5a0:	0052e003 	subseq	lr, r2, r3
    e5a4:	6f160500 	svcvs	0x00160500
    e5a8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    e5ac:	000050a9 	andeq	r5, r0, r9, lsr #1
    e5b0:	842d0518 	strthi	r0, [sp], #-1304	; 0xfffffae8
    e5b4:	0b000001 	bleq	e5c0 <_Min_Stack_Size+0xe3c0>
    e5b8:	0000524e 	andeq	r5, r0, lr, asr #4
    e5bc:	01842f05 	orreq	r2, r4, r5, lsl #30
    e5c0:	0f000000 	svceq	0x00000000
    e5c4:	05006b5f 	streq	r6, [r0, #-2911]	; 0xfffff4a1
    e5c8:	00002530 	andeq	r2, r0, r0, lsr r5
    e5cc:	800b0400 	andhi	r0, fp, r0, lsl #8
    e5d0:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    e5d4:	00002530 	andeq	r2, r0, r0, lsr r5
    e5d8:	9a0b0800 	bls	2d05e0 <_Min_Stack_Size+0x2d03e0>
    e5dc:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    e5e0:	00002530 	andeq	r2, r0, r0, lsr r5
    e5e4:	fb0b0c00 	blx	2d15ee <_Min_Stack_Size+0x2d13ee>
    e5e8:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    e5ec:	00002530 	andeq	r2, r0, r0, lsr r5
    e5f0:	5f0f1000 	svcpl	0x000f1000
    e5f4:	31050078 	tstcc	r5, r8, ror r0
    e5f8:	0000018a 	andeq	r0, r0, sl, lsl #3
    e5fc:	040d0014 	streq	r0, [sp], #-20	; 0xffffffec
    e600:	00000131 	andeq	r0, r0, r1, lsr r1
    e604:	00012608 	andeq	r2, r1, r8, lsl #12
    e608:	00019a00 	andeq	r9, r1, r0, lsl #20
    e60c:	00d90900 	sbcseq	r0, r9, r0, lsl #18
    e610:	00000000 	andeq	r0, r0, r0
    e614:	0050ca0e 	subseq	ip, r0, lr, lsl #20
    e618:	35052400 	strcc	r2, [r5, #-1024]	; 0xfffffc00
    e61c:	00000213 	andeq	r0, r0, r3, lsl r2
    e620:	00502e0b 	subseq	r2, r0, fp, lsl #28
    e624:	25370500 	ldrcs	r0, [r7, #-1280]!	; 0xfffffb00
    e628:	00000000 	andeq	r0, r0, r0
    e62c:	0052b30b 	subseq	fp, r2, fp, lsl #6
    e630:	25380500 	ldrcs	r0, [r8, #-1280]!	; 0xfffffb00
    e634:	04000000 	streq	r0, [r0], #-0
    e638:	00503d0b 	subseq	r3, r0, fp, lsl #26
    e63c:	25390500 	ldrcs	r0, [r9, #-1280]!	; 0xfffffb00
    e640:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e644:	0053580b 	subseq	r5, r3, fp, lsl #16
    e648:	253a0500 	ldrcs	r0, [sl, #-1280]!	; 0xfffffb00
    e64c:	0c000000 	stceq	0, cr0, [r0], {-0}
    e650:	0051a60b 	subseq	sl, r1, fp, lsl #12
    e654:	253b0500 	ldrcs	r0, [fp, #-1280]!	; 0xfffffb00
    e658:	10000000 	andne	r0, r0, r0
    e65c:	0051960b 	subseq	r9, r1, fp, lsl #12
    e660:	253c0500 	ldrcs	r0, [ip, #-1280]!	; 0xfffffb00
    e664:	14000000 	strne	r0, [r0], #-0
    e668:	0053000b 	subseq	r0, r3, fp
    e66c:	253d0500 	ldrcs	r0, [sp, #-1280]!	; 0xfffffb00
    e670:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    e674:	0052150b 	subseq	r1, r2, fp, lsl #10
    e678:	253e0500 	ldrcs	r0, [lr, #-1280]!	; 0xfffffb00
    e67c:	1c000000 	stcne	0, cr0, [r0], {-0}
    e680:	0053240b 	subseq	r2, r3, fp, lsl #8
    e684:	253f0500 	ldrcs	r0, [pc, #-1280]!	; e18c <_Min_Stack_Size+0xdf8c>
    e688:	20000000 	andcs	r0, r0, r0
    e68c:	521f0e00 	andspl	r0, pc, #0, 28
    e690:	05080000 	streq	r0, [r8, #-0]
    e694:	00023873 	andeq	r3, r2, r3, ror r8
    e698:	33a10b00 			; <UNDEFINED> instruction: 0x33a10b00
    e69c:	74050000 	strvc	r0, [r5], #-0
    e6a0:	00000238 	andeq	r0, r0, r8, lsr r2
    e6a4:	57ca0b00 	strbpl	r0, [sl, r0, lsl #22]
    e6a8:	75050000 	strvc	r0, [r5, #-0]
    e6ac:	00000025 	andeq	r0, r0, r5, lsr #32
    e6b0:	040d0004 	streq	r0, [sp], #-4
    e6b4:	00000053 	andeq	r0, r0, r3, asr r0
    e6b8:	0052d410 	subseq	sp, r2, r0, lsl r4
    e6bc:	72056000 	andvc	r6, r5, #0
    e6c0:	00036a01 	andeq	r6, r3, r1, lsl #20
    e6c4:	52ac1100 	adcpl	r1, ip, #0, 2
    e6c8:	76050000 	strvc	r0, [r5], -r0
    e6cc:	00002501 	andeq	r2, r0, r1, lsl #10
    e6d0:	ed110000 	ldc	0, cr0, [r1, #-0]
    e6d4:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
    e6d8:	0592017b 	ldreq	r0, [r2, #379]	; 0x17b
    e6dc:	11040000 	mrsne	r0, (UNDEF: 4)
    e6e0:	000055fd 	strdeq	r5, [r0], -sp
    e6e4:	92017b05 	andls	r7, r1, #5120	; 0x1400
    e6e8:	08000005 	stmdaeq	r0, {r0, r2}
    e6ec:	0056b811 	subseq	fp, r6, r1, lsl r8
    e6f0:	017b0500 	cmneq	fp, r0, lsl #10
    e6f4:	00000592 	muleq	r0, r2, r5
    e6f8:	5261110c 	rsbpl	r1, r1, #12, 2
    e6fc:	7d050000 	stcvc	0, cr0, [r5, #-0]
    e700:	00002501 	andeq	r2, r0, r1, lsl #10
    e704:	e2111000 	ands	r1, r1, #0
    e708:	0500004f 	streq	r0, [r0, #-79]	; 0xffffffb1
    e70c:	0119017f 	tsteq	r9, pc, ror r1
    e710:	11140000 	tstne	r4, r0
    e714:	000051af 	andeq	r5, r0, pc, lsr #3
    e718:	25018105 	strcs	r8, [r1, #-261]	; 0xfffffefb
    e71c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    e720:	0050e711 	subseq	lr, r0, r1, lsl r7
    e724:	01830500 	orreq	r0, r3, r0, lsl #10
    e728:	00000025 	andeq	r0, r0, r5, lsr #32
    e72c:	5266111c 	rsbpl	r1, r6, #28, 2
    e730:	84050000 	strhi	r0, [r5], #-0
    e734:	0004dc01 	andeq	sp, r4, r1, lsl #24
    e738:	5f122000 	svcpl	0x00122000
    e73c:	0500706d 	streq	r7, [r0, #-109]	; 0xffffff93
    e740:	06df0186 	ldrbeq	r0, [pc], r6, lsl #3
    e744:	11240000 			; <UNDEFINED> instruction: 0x11240000
    e748:	00005276 	andeq	r5, r0, r6, ror r2
    e74c:	f0018805 			; <UNDEFINED> instruction: 0xf0018805
    e750:	28000006 	stmdacs	r0, {r1, r2}
    e754:	0050b111 	subseq	fp, r0, r1, lsl r1
    e758:	018a0500 	orreq	r0, sl, r0, lsl #10
    e75c:	00000025 	andeq	r0, r0, r5, lsr #32
    e760:	50f9112c 	rscspl	r1, r9, ip, lsr #2
    e764:	8d050000 	stchi	0, cr0, [r5, #-0]
    e768:	00002501 	andeq	r2, r0, r1, lsl #10
    e76c:	73113000 	tstvc	r1, #0
    e770:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    e774:	0119018e 	tsteq	r9, lr, lsl #3
    e778:	11340000 	teqne	r4, r0
    e77c:	00005101 	andeq	r5, r0, r1, lsl #2
    e780:	f6019005 			; <UNDEFINED> instruction: 0xf6019005
    e784:	38000006 	stmdacc	r0, {r1, r2}
    e788:	00532f11 	subseq	r2, r3, r1, lsl pc
    e78c:	01910500 	orrseq	r0, r1, r0, lsl #10
    e790:	000006fc 	strdeq	r0, [r0], -ip
    e794:	516c113c 	cmnpl	ip, ip, lsr r1
    e798:	92050000 	andls	r0, r5, #0
    e79c:	00011901 	andeq	r1, r1, r1, lsl #18
    e7a0:	14114000 	ldrne	r4, [r1], #-0
    e7a4:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
    e7a8:	070d0195 			; <UNDEFINED> instruction: 0x070d0195
    e7ac:	11440000 	mrsne	r0, (UNDEF: 68)
    e7b0:	00005054 	andeq	r5, r0, r4, asr r0
    e7b4:	57019d05 	strpl	r9, [r1, -r5, lsl #26]
    e7b8:	48000005 	stmdami	r0, {r0, r2}
    e7bc:	00504711 	subseq	r4, r0, r1, lsl r7
    e7c0:	019e0500 	orrseq	r0, lr, r0, lsl #10
    e7c4:	00000592 	muleq	r0, r2, r5
    e7c8:	51a01154 	asrpl	r1, r4, r1
    e7cc:	9f050000 	svcls	0x00050000
    e7d0:	00071901 	andeq	r1, r7, r1, lsl #18
    e7d4:	fc115800 	ldc2	8, cr5, [r1], {-0}
    e7d8:	0500004f 	streq	r0, [r0, #-79]	; 0xffffffb1
    e7dc:	011901a0 	tsteq	r9, r0, lsr #3
    e7e0:	005c0000 	subseq	r0, ip, r0
    e7e4:	023e040d 	eorseq	r0, lr, #218103808	; 0xd000000
    e7e8:	380e0000 	stmdacc	lr, {}	; <UNPREDICTABLE>
    e7ec:	68000052 	stmdavs	r0, {r1, r4, r6}
    e7f0:	049ab305 	ldreq	fp, [sl], #773	; 0x305
    e7f4:	5f0f0000 	svcpl	0x000f0000
    e7f8:	b4050070 	strlt	r0, [r5], #-112	; 0xffffff90
    e7fc:	00000238 	andeq	r0, r0, r8, lsr r2
    e800:	725f0f00 	subsvc	r0, pc, #0, 30
    e804:	25b50500 	ldrcs	r0, [r5, #1280]!	; 0x500
    e808:	04000000 	streq	r0, [r0], #-0
    e80c:	00775f0f 	rsbseq	r5, r7, pc, lsl #30
    e810:	0025b605 	eoreq	fp, r5, r5, lsl #12
    e814:	0b080000 	bleq	20e81c <_Min_Stack_Size+0x20e61c>
    e818:	00005063 	andeq	r5, r0, r3, rrx
    e81c:	005ab705 	subseq	fp, sl, r5, lsl #14
    e820:	0b0c0000 	bleq	30e828 <_Min_Stack_Size+0x30e628>
    e824:	000052f5 	strdeq	r5, [r0], -r5	; <UNPREDICTABLE>
    e828:	005ab805 	subseq	fp, sl, r5, lsl #16
    e82c:	0f0e0000 	svceq	0x000e0000
    e830:	0066625f 	rsbeq	r6, r6, pc, asr r2
    e834:	0213b905 	andseq	fp, r3, #81920	; 0x14000
    e838:	0b100000 	bleq	40e840 <_Min_Stack_Size+0x40e640>
    e83c:	00005008 	andeq	r5, r0, r8
    e840:	0025ba05 	eoreq	fp, r5, r5, lsl #20
    e844:	0b180000 	bleq	60e84c <_Min_Stack_Size+0x60e64c>
    e848:	00000deb 	andeq	r0, r0, fp, ror #27
    e84c:	036abd05 	cmneq	sl, #320	; 0x140
    e850:	0b1c0000 	bleq	70e858 <_Min_Stack_Size+0x70e658>
    e854:	0000504c 	andeq	r5, r0, ip, asr #32
    e858:	0117c105 	tsteq	r7, r5, lsl #2
    e85c:	0b200000 	bleq	80e864 <_Min_Stack_Size+0x80e664>
    e860:	00003a87 	andeq	r3, r0, r7, lsl #21
    e864:	04b8c305 	ldrteq	ip, [r8], #773	; 0x305
    e868:	0b240000 	bleq	90e870 <_Min_Stack_Size+0x90e670>
    e86c:	000039e2 	andeq	r3, r0, r2, ror #19
    e870:	04e7c505 	strbteq	ip, [r7], #1285	; 0x505
    e874:	0b280000 	bleq	a0e87c <_Min_Stack_Size+0xa0e67c>
    e878:	0000529e 	muleq	r0, lr, r2
    e87c:	050bc805 	streq	ip, [fp, #-2053]	; 0xfffff7fb
    e880:	0b2c0000 	bleq	b0e888 <_Min_Stack_Size+0xb0e688>
    e884:	0000533e 	andeq	r5, r0, lr, lsr r3
    e888:	0525c905 	streq	ip, [r5, #-2309]!	; 0xfffff6fb
    e88c:	0f300000 	svceq	0x00300000
    e890:	0062755f 	rsbeq	r7, r2, pc, asr r5
    e894:	0213cc05 	andseq	ip, r3, #1280	; 0x500
    e898:	0f340000 	svceq	0x00340000
    e89c:	0070755f 	rsbseq	r7, r0, pc, asr r5
    e8a0:	0238cd05 	eorseq	ip, r8, #320	; 0x140
    e8a4:	0f3c0000 	svceq	0x003c0000
    e8a8:	0072755f 	rsbseq	r7, r2, pc, asr r5
    e8ac:	0025ce05 	eoreq	ip, r5, r5, lsl #28
    e8b0:	0b400000 	bleq	100e8b8 <_Min_Stack_Size+0x100e6b8>
    e8b4:	00005037 	andeq	r5, r0, r7, lsr r0
    e8b8:	052bd105 	streq	sp, [fp, #-261]!	; 0xfffffefb
    e8bc:	0b440000 	bleq	110e8c4 <_Min_Stack_Size+0x110e6c4>
    e8c0:	0000531e 	andeq	r5, r0, lr, lsl r3
    e8c4:	053bd205 	ldreq	sp, [fp, #-517]!	; 0xfffffdfb
    e8c8:	0f470000 	svceq	0x00470000
    e8cc:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    e8d0:	0213d505 	andseq	sp, r3, #20971520	; 0x1400000
    e8d4:	0b480000 	bleq	120e8dc <_Min_Stack_Size+0x120e6dc>
    e8d8:	0000506a 	andeq	r5, r0, sl, rrx
    e8dc:	0025d805 	eoreq	sp, r5, r5, lsl #16
    e8e0:	0b500000 	bleq	140e8e8 <_Min_Stack_Size+0x140e6e8>
    e8e4:	00005b4c 	andeq	r5, r0, ip, asr #22
    e8e8:	0088d905 	addeq	sp, r8, r5, lsl #18
    e8ec:	0b540000 	bleq	150e8f4 <_Min_Stack_Size+0x150e6f4>
    e8f0:	0000353a 	andeq	r3, r0, sl, lsr r5
    e8f4:	010ce005 	tsteq	ip, r5
    e8f8:	0b580000 	bleq	160e900 <_Min_Stack_Size+0x160e700>
    e8fc:	00005240 	andeq	r5, r0, r0, asr #4
    e900:	0101e205 	tsteq	r1, r5, lsl #4
    e904:	0b5c0000 	bleq	170e90c <_Min_Stack_Size+0x170e70c>
    e908:	0000518e 	andeq	r5, r0, lr, lsl #3
    e90c:	0025e305 	eoreq	lr, r5, r5, lsl #6
    e910:	00640000 	rsbeq	r0, r4, r0
    e914:	00002513 	andeq	r2, r0, r3, lsl r5
    e918:	0004b800 	andeq	fp, r4, r0, lsl #16
    e91c:	036a1400 	cmneq	sl, #0, 8
    e920:	17140000 	ldrne	r0, [r4, -r0]
    e924:	14000001 	strne	r0, [r0], #-1
    e928:	00000119 	andeq	r0, r0, r9, lsl r1
    e92c:	00002514 	andeq	r2, r0, r4, lsl r5
    e930:	040d0000 	streq	r0, [sp], #-0
    e934:	0000049a 	muleq	r0, sl, r4
    e938:	00002513 	andeq	r2, r0, r3, lsl r5
    e93c:	0004dc00 	andeq	sp, r4, r0, lsl #24
    e940:	036a1400 	cmneq	sl, #0, 8
    e944:	17140000 	ldrne	r0, [r4, -r0]
    e948:	14000001 	strne	r0, [r0], #-1
    e94c:	000004dc 	ldrdeq	r0, [r0], -ip
    e950:	00002514 	andeq	r2, r0, r4, lsl r5
    e954:	040d0000 	streq	r0, [sp], #-0
    e958:	000004e2 	andeq	r0, r0, r2, ror #9
    e95c:	00011f15 	andeq	r1, r1, r5, lsl pc
    e960:	be040d00 	cdplt	13, 0, cr0, cr4, cr0, {0}
    e964:	13000004 	movwne	r0, #4
    e968:	00000093 	muleq	r0, r3, r0
    e96c:	0000050b 	andeq	r0, r0, fp, lsl #10
    e970:	00036a14 	andeq	r6, r3, r4, lsl sl
    e974:	01171400 	tsteq	r7, r0, lsl #8
    e978:	93140000 	tstls	r4, #0
    e97c:	14000000 	strne	r0, [r0], #-0
    e980:	00000025 	andeq	r0, r0, r5, lsr #32
    e984:	ed040d00 	stc	13, cr0, [r4, #-0]
    e988:	13000004 	movwne	r0, #4
    e98c:	00000025 	andeq	r0, r0, r5, lsr #32
    e990:	00000525 	andeq	r0, r0, r5, lsr #10
    e994:	00036a14 	andeq	r6, r3, r4, lsl sl
    e998:	01171400 	tsteq	r7, r0, lsl #8
    e99c:	0d000000 	stceq	0, cr0, [r0, #-0]
    e9a0:	00051104 	andeq	r1, r5, r4, lsl #2
    e9a4:	00530800 	subseq	r0, r3, r0, lsl #16
    e9a8:	053b0000 	ldreq	r0, [fp, #-0]!
    e9ac:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
    e9b0:	02000000 	andeq	r0, r0, #0
    e9b4:	00530800 	subseq	r0, r3, r0, lsl #16
    e9b8:	054b0000 	strbeq	r0, [fp, #-0]
    e9bc:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
    e9c0:	00000000 	andeq	r0, r0, r0
    e9c4:	52260500 	eorpl	r0, r6, #0, 10
    e9c8:	1d050000 	stcne	0, cr0, [r5, #-0]
    e9cc:	00037001 	andeq	r7, r3, r1
    e9d0:	5b0b1000 	blpl	2d29d8 <_Min_Stack_Size+0x2d27d8>
    e9d4:	050c0000 	streq	r0, [ip, #-0]
    e9d8:	058c0121 	streq	r0, [ip, #289]	; 0x121
    e9dc:	4e110000 	cdpmi	0, 1, cr0, cr1, cr0, {0}
    e9e0:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    e9e4:	058c0123 	streq	r0, [ip, #291]	; 0x123
    e9e8:	11000000 	mrsne	r0, (UNDEF: 0)
    e9ec:	00005106 	andeq	r5, r0, r6, lsl #2
    e9f0:	25012405 	strcs	r2, [r1, #-1029]	; 0xfffffbfb
    e9f4:	04000000 	streq	r0, [r0], #-0
    e9f8:	00520f11 	subseq	r0, r2, r1, lsl pc
    e9fc:	01250500 			; <UNDEFINED> instruction: 0x01250500
    ea00:	00000592 	muleq	r0, r2, r5
    ea04:	040d0008 	streq	r0, [sp], #-8
    ea08:	00000557 	andeq	r0, r0, r7, asr r5
    ea0c:	054b040d 	strbeq	r0, [fp, #-1037]	; 0xfffffbf3
    ea10:	da100000 	ble	40ea18 <_Min_Stack_Size+0x40e818>
    ea14:	1800004f 	stmdane	r0, {r0, r1, r2, r3, r6}
    ea18:	da013d05 	ble	5de34 <_Min_Stack_Size+0x5dc34>
    ea1c:	11000005 	tstne	r0, r5
    ea20:	00005288 	andeq	r5, r0, r8, lsl #5
    ea24:	da013e05 	ble	5e240 <_Min_Stack_Size+0x5e040>
    ea28:	00000005 	andeq	r0, r0, r5
    ea2c:	0052bc11 	subseq	fp, r2, r1, lsl ip
    ea30:	013f0500 	teqeq	pc, r0, lsl #10
    ea34:	000005da 	ldrdeq	r0, [r0], -sl
    ea38:	52db1106 	sbcspl	r1, fp, #-2147483647	; 0x80000001
    ea3c:	40050000 	andmi	r0, r5, r0
    ea40:	00006101 	andeq	r6, r0, r1, lsl #2
    ea44:	49110c00 	ldmdbmi	r1, {sl, fp}
    ea48:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    ea4c:	00760143 	rsbseq	r0, r6, r3, asr #2
    ea50:	00100000 	andseq	r0, r0, r0
    ea54:	00006108 	andeq	r6, r0, r8, lsl #2
    ea58:	0005ea00 	andeq	lr, r5, r0, lsl #20
    ea5c:	00d90900 	sbcseq	r0, r9, r0, lsl #18
    ea60:	00020000 	andeq	r0, r2, r0
    ea64:	00505c10 	subseq	r5, r0, r0, lsl ip
    ea68:	56051000 	strpl	r1, [r5], -r0
    ea6c:	00062c01 	andeq	r2, r6, r1, lsl #24
    ea70:	51791100 	cmnpl	r9, r0, lsl #2
    ea74:	59050000 	stmdbpl	r5, {}	; <UNPREDICTABLE>
    ea78:	00018401 	andeq	r8, r1, r1, lsl #8
    ea7c:	c0110000 	andsgt	r0, r1, r0
    ea80:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    ea84:	0025015a 	eoreq	r0, r5, sl, asr r1
    ea88:	11040000 	mrsne	r0, (UNDEF: 4)
    ea8c:	00005353 	andeq	r5, r0, r3, asr r3
    ea90:	84015b05 	strhi	r5, [r1], #-2821	; 0xfffff4fb
    ea94:	08000001 	stmdaeq	r0, {r0}
    ea98:	0051c111 	subseq	ip, r1, r1, lsl r1
    ea9c:	015c0500 	cmpeq	ip, r0, lsl #10
    eaa0:	0000062c 	andeq	r0, r0, ip, lsr #12
    eaa4:	040d000c 	streq	r0, [sp], #-12
    eaa8:	00000184 	andeq	r0, r0, r4, lsl #3
    eaac:	0052cf10 	subseq	ip, r2, r0, lsl pc
    eab0:	60055000 	andvs	r5, r5, r0
    eab4:	0006cf01 	andeq	ip, r6, r1, lsl #30
    eab8:	52c21100 	sbcpl	r1, r2, #0, 2
    eabc:	63050000 	movwvs	r0, #20480	; 0x5000
    eac0:	00011901 	andeq	r1, r1, r1, lsl #18
    eac4:	54110000 	ldrpl	r0, [r1], #-0
    eac8:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    eacc:	01010164 	tsteq	r1, r4, ror #2
    ead0:	11040000 	mrsne	r0, (UNDEF: 4)
    ead4:	00005020 	andeq	r5, r0, r0, lsr #32
    ead8:	01016505 	tsteq	r1, r5, lsl #10
    eadc:	0c000001 	stceq	0, cr0, [r0], {1}
    eae0:	00534511 	subseq	r4, r3, r1, lsl r5
    eae4:	01660500 	cmneq	r6, r0, lsl #10
    eae8:	00000101 	andeq	r0, r0, r1, lsl #2
    eaec:	530a1114 	movwpl	r1, #41236	; 0xa114
    eaf0:	67050000 	strvs	r0, [r5, -r0]
    eaf4:	0006cf01 	andeq	ip, r6, r1, lsl #30
    eaf8:	e8111c00 	ldmda	r1, {sl, fp, ip}
    eafc:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    eb00:	00250168 	eoreq	r0, r5, r8, ror #2
    eb04:	11240000 			; <UNDEFINED> instruction: 0x11240000
    eb08:	0000508c 	andeq	r5, r0, ip, lsl #1
    eb0c:	01016905 	tsteq	r1, r5, lsl #18
    eb10:	28000001 	stmdacs	r0, {r0}
    eb14:	00501111 	subseq	r1, r0, r1, lsl r1
    eb18:	016a0500 	cmneq	sl, r0, lsl #10
    eb1c:	00000101 	andeq	r0, r0, r1, lsl #2
    eb20:	507b1130 	rsbspl	r1, fp, r0, lsr r1
    eb24:	6b050000 	blvs	14eb2c <_Min_Stack_Size+0x14e92c>
    eb28:	00010101 	andeq	r0, r1, r1, lsl #2
    eb2c:	ed113800 	ldc	8, cr3, [r1, #-0]
    eb30:	0500004f 	streq	r0, [r0, #-79]	; 0xffffffb1
    eb34:	0101016c 	tsteq	r1, ip, ror #2
    eb38:	11400000 	mrsne	r0, (UNDEF: 64)
    eb3c:	000050d6 	ldrdeq	r5, [r0], -r6
    eb40:	01016d05 	tsteq	r1, r5, lsl #26
    eb44:	48000001 	stmdami	r0, {r0}
    eb48:	011f0800 	tsteq	pc, r0, lsl #16
    eb4c:	06df0000 	ldrbeq	r0, [pc], r0
    eb50:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
    eb54:	07000000 	streq	r0, [r0, -r0]
    eb58:	ea040d00 	b	111f60 <_Min_Stack_Size+0x111d60>
    eb5c:	16000005 	strne	r0, [r0], -r5
    eb60:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    eb64:	00036a14 	andeq	r6, r3, r4, lsl sl
    eb68:	040d0000 	streq	r0, [sp], #-0
    eb6c:	000006e5 	andeq	r0, r0, r5, ror #13
    eb70:	0598040d 	ldreq	r0, [r8, #1037]	; 0x40d
    eb74:	040d0000 	streq	r0, [sp], #-0
    eb78:	0000019a 	muleq	r0, sl, r1
    eb7c:	00070d16 	andeq	r0, r7, r6, lsl sp
    eb80:	00251400 	eoreq	r1, r5, r0, lsl #8
    eb84:	0d000000 	stceq	0, cr0, [r0, #-0]
    eb88:	00071304 	andeq	r1, r7, r4, lsl #6
    eb8c:	02040d00 	andeq	r0, r4, #0, 26
    eb90:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    eb94:	00063204 	andeq	r3, r6, r4, lsl #4
    eb98:	4fd31700 	svcmi	0x00d31700
    eb9c:	25060000 	strcs	r0, [r6, #-0]
    eba0:	00000117 	andeq	r0, r0, r7, lsl r1
    eba4:	080007ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl}
    eba8:	00000010 	andeq	r0, r0, r0, lsl r0
    ebac:	07599c01 	ldrbeq	r9, [r9, -r1, lsl #24]
    ebb0:	f3180000 	vhadd.u16	d0, d8, d0
    ebb4:	01000056 	qaddeq	r0, r6, r0
    ebb8:	00002cd4 	ldrdeq	r2, [r0], -r4
    ebbc:	000a6300 	andeq	r6, sl, r0, lsl #6
    ebc0:	07b61900 	ldreq	r1, [r6, r0, lsl #18]!
    ebc4:	079b0800 	ldreq	r0, [fp, r0, lsl #16]
    ebc8:	011a0000 	tsteq	sl, r0
    ebcc:	01f30351 	mvnseq	r0, r1, asr r3
    ebd0:	1b000050 	blne	ed18 <_Min_Stack_Size+0xeb18>
    ebd4:	00005753 	andeq	r5, r0, r3, asr r7
    ebd8:	07bc2d06 	ldreq	r2, [ip, r6, lsl #26]!
    ebdc:	00100800 	andseq	r0, r0, r0, lsl #16
    ebe0:	9c010000 	stcls	0, cr0, [r1], {-0}
    ebe4:	0000078f 	andeq	r0, r0, pc, lsl #15
    ebe8:	0056c018 	subseq	ip, r6, r8, lsl r0
    ebec:	17db0100 	ldrbne	r0, [fp, r0, lsl #2]
    ebf0:	8f000001 	svchi	0x00000001
    ebf4:	1900000a 	stmdbne	r0, {r1, r3}
    ebf8:	080007c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, sl}
    ebfc:	000007a6 	andeq	r0, r0, r6, lsr #15
    ec00:	0351011a 	cmpeq	r1, #-2147483642	; 0x80000006
    ec04:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    ec08:	56a31c00 	strtpl	r1, [r3], r0, lsl #24
    ec0c:	fd050000 	stc2	0, cr0, [r5, #-0]
    ec10:	00036a02 	andeq	r6, r3, r2, lsl #20
    ec14:	57021d00 	strpl	r1, [r2, -r0, lsl #26]
    ec18:	57020000 	strpl	r0, [r2, -r0]
    ec1c:	2a060000 	bcs	18ec24 <_Min_Stack_Size+0x18ea24>
    ec20:	0056fa1d 	subseq	pc, r6, sp, lsl sl	; <UNPREDICTABLE>
    ec24:	0056fa00 	subseq	pc, r6, r0, lsl #20
    ec28:	00320600 	eorseq	r0, r2, r0, lsl #12
    ec2c:	00000821 	andeq	r0, r0, r1, lsr #16
    ec30:	306e0004 	rsbcc	r0, lr, r4
    ec34:	01040000 	mrseq	r0, (UNDEF: 4)
    ec38:	00004ee6 	andeq	r4, r0, r6, ror #29
    ec3c:	00571a0c 	subseq	r1, r7, ip, lsl #20
    ec40:	00510d00 	subseq	r0, r1, r0, lsl #26
    ec44:	0007cc00 	andeq	ip, r7, r0, lsl #24
    ec48:	00008c08 	andeq	r8, r0, r8, lsl #24
    ec4c:	0064b800 	rsbeq	fp, r4, r0, lsl #16
    ec50:	06010200 	streq	r0, [r1], -r0, lsl #4
    ec54:	00000192 	muleq	r0, r2, r1
    ec58:	90080102 	andls	r0, r8, r2, lsl #2
    ec5c:	02000001 	andeq	r0, r0, #1
    ec60:	00950502 	addseq	r0, r5, r2, lsl #10
    ec64:	02020000 	andeq	r0, r2, #0
    ec68:	0001f207 	andeq	pc, r1, r7, lsl #4
    ec6c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    ec70:	000000bd 	strheq	r0, [r0], -sp
    ec74:	c9070402 	stmdbgt	r7, {r1, sl}
    ec78:	02000001 	andeq	r0, r0, #1
    ec7c:	00b80508 	adcseq	r0, r8, r8, lsl #10
    ec80:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    ec84:	0001c407 	andeq	ip, r1, r7, lsl #8
    ec88:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    ec8c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    ec90:	ce070402 	cdpgt	4, 0, cr0, cr7, cr2, {0}
    ec94:	04000001 	streq	r0, [r0], #-1
    ec98:	00005713 	andeq	r5, r0, r3, lsl r7
    ec9c:	0064d802 	rsbeq	sp, r4, r2, lsl #16
    eca0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    eca4:	0002f804 	andeq	pc, r2, r4, lsl #16
    eca8:	04040500 	streq	r0, [r4], #-1280	; 0xfffffb00
    ecac:	000051cb 	andeq	r5, r0, fp, asr #3
    ecb0:	005d0703 	subseq	r0, sp, r3, lsl #14
    ecb4:	ba040000 	blt	10ecbc <_Min_Stack_Size+0x10eabc>
    ecb8:	04000051 	streq	r0, [r0], #-81	; 0xffffffaf
    ecbc:	0000412c 	andeq	r4, r0, ip, lsr #2
    ecc0:	52a40400 	adcpl	r0, r4, #0, 8
    ecc4:	72040000 	andvc	r0, r4, #0
    ecc8:	00000041 	andeq	r0, r0, r1, asr #32
    eccc:	00518706 	subseq	r8, r1, r6, lsl #14
    ecd0:	01650200 	cmneq	r5, r0, lsl #4
    ecd4:	00000064 	andeq	r0, r0, r4, rrx
    ecd8:	a6040407 	strge	r0, [r4], -r7, lsl #8
    ecdc:	000000cb 	andeq	r0, r0, fp, asr #1
    ece0:	00518108 	subseq	r8, r1, r8, lsl #2
    ece4:	a0a80400 	adcge	r0, r8, r0, lsl #8
    ece8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    ecec:	000050cf 	andeq	r5, r0, pc, asr #1
    ecf0:	00cba904 	sbceq	sl, fp, r4, lsl #18
    ecf4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    ecf8:	0000002c 	andeq	r0, r0, ip, lsr #32
    ecfc:	000000db 	ldrdeq	r0, [r0], -fp
    ed00:	0000db0a 	andeq	sp, r0, sl, lsl #22
    ed04:	02000300 	andeq	r0, r0, #0, 6
    ed08:	00590704 	subseq	r0, r9, r4, lsl #14
    ed0c:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    ed10:	0103a304 	tsteq	r3, r4, lsl #6
    ed14:	8e0c0000 	cdphi	0, 0, cr0, cr12, cr0, {0}
    ed18:	04000052 	streq	r0, [r0], #-82	; 0xffffffae
    ed1c:	00005da5 	andeq	r5, r0, r5, lsr #27
    ed20:	960c0000 	strls	r0, [ip], -r0
    ed24:	04000052 	streq	r0, [r0], #-82	; 0xffffffae
    ed28:	0000acaa 	andeq	sl, r0, sl, lsr #25
    ed2c:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
    ed30:	0000522d 	andeq	r5, r0, sp, lsr #4
    ed34:	00e2ab04 	rsceq	sl, r2, r4, lsl #22
    ed38:	a0040000 	andge	r0, r4, r0
    ed3c:	04000050 	streq	r0, [r0], #-80	; 0xffffffb0
    ed40:	00007faf 	andeq	r7, r0, pc, lsr #31
    ed44:	52e00400 	rscpl	r0, r0, #0, 8
    ed48:	16050000 	strne	r0, [r5], -r0
    ed4c:	00000048 	andeq	r0, r0, r8, asr #32
    ed50:	0050a90d 	subseq	sl, r0, sp, lsl #18
    ed54:	2d051800 	stccs	8, cr1, [r5, #-0]
    ed58:	00000177 	andeq	r0, r0, r7, ror r1
    ed5c:	00524e0c 	subseq	r4, r2, ip, lsl #28
    ed60:	772f0500 	strvc	r0, [pc, -r0, lsl #10]!
    ed64:	00000001 	andeq	r0, r0, r1
    ed68:	006b5f0e 	rsbeq	r5, fp, lr, lsl #30
    ed6c:	005d3005 	subseq	r3, sp, r5
    ed70:	0c040000 	stceq	0, cr0, [r4], {-0}
    ed74:	00005280 	andeq	r5, r0, r0, lsl #5
    ed78:	005d3005 	subseq	r3, sp, r5
    ed7c:	0c080000 	stceq	0, cr0, [r8], {-0}
    ed80:	0000509a 	muleq	r0, sl, r0
    ed84:	005d3005 	subseq	r3, sp, r5
    ed88:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    ed8c:	000052fb 	strdeq	r5, [r0], -fp
    ed90:	005d3005 	subseq	r3, sp, r5
    ed94:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    ed98:	0500785f 	streq	r7, [r0, #-2143]	; 0xfffff7a1
    ed9c:	00017d31 	andeq	r7, r1, r1, lsr sp
    eda0:	0f001400 	svceq	0x00001400
    eda4:	00012404 	andeq	r2, r1, r4, lsl #8
    eda8:	01190900 	tsteq	r9, r0, lsl #18
    edac:	018d0000 	orreq	r0, sp, r0
    edb0:	db0a0000 	blle	28edb8 <_Min_Stack_Size+0x28ebb8>
    edb4:	00000000 	andeq	r0, r0, r0
    edb8:	50ca0d00 	sbcpl	r0, sl, r0, lsl #26
    edbc:	05240000 	streq	r0, [r4, #-0]!
    edc0:	00020635 	andeq	r0, r2, r5, lsr r6
    edc4:	502e0c00 	eorpl	r0, lr, r0, lsl #24
    edc8:	37050000 	strcc	r0, [r5, -r0]
    edcc:	0000005d 	andeq	r0, r0, sp, asr r0
    edd0:	52b30c00 	adcspl	r0, r3, #0, 24
    edd4:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    edd8:	0000005d 	andeq	r0, r0, sp, asr r0
    eddc:	503d0c04 	eorspl	r0, sp, r4, lsl #24
    ede0:	39050000 	stmdbcc	r5, {}	; <UNPREDICTABLE>
    ede4:	0000005d 	andeq	r0, r0, sp, asr r0
    ede8:	53580c08 	cmppl	r8, #8, 24	; 0x800
    edec:	3a050000 	bcc	14edf4 <_Min_Stack_Size+0x14ebf4>
    edf0:	0000005d 	andeq	r0, r0, sp, asr r0
    edf4:	51a60c0c 			; <UNDEFINED> instruction: 0x51a60c0c
    edf8:	3b050000 	blcc	14ee00 <_Min_Stack_Size+0x14ec00>
    edfc:	0000005d 	andeq	r0, r0, sp, asr r0
    ee00:	51960c10 	orrspl	r0, r6, r0, lsl ip
    ee04:	3c050000 	stccc	0, cr0, [r5], {-0}
    ee08:	0000005d 	andeq	r0, r0, sp, asr r0
    ee0c:	53000c14 	movwpl	r0, #3092	; 0xc14
    ee10:	3d050000 	stccc	0, cr0, [r5, #-0]
    ee14:	0000005d 	andeq	r0, r0, sp, asr r0
    ee18:	52150c18 	andspl	r0, r5, #24, 24	; 0x1800
    ee1c:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    ee20:	0000005d 	andeq	r0, r0, sp, asr r0
    ee24:	53240c1c 			; <UNDEFINED> instruction: 0x53240c1c
    ee28:	3f050000 	svccc	0x00050000
    ee2c:	0000005d 	andeq	r0, r0, sp, asr r0
    ee30:	1f0d0020 	svcne	0x000d0020
    ee34:	08000052 	stmdaeq	r0, {r1, r4, r6}
    ee38:	022b7305 	eoreq	r7, fp, #335544320	; 0x14000000
    ee3c:	a10c0000 	mrsge	r0, (UNDEF: 12)
    ee40:	05000033 	streq	r0, [r0, #-51]	; 0xffffffcd
    ee44:	00022b74 	andeq	r2, r2, r4, ror fp
    ee48:	ca0c0000 	bgt	30ee50 <_Min_Stack_Size+0x30ec50>
    ee4c:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
    ee50:	00005d75 	andeq	r5, r0, r5, ror sp
    ee54:	0f000400 	svceq	0x00000400
    ee58:	00002c04 	andeq	r2, r0, r4, lsl #24
    ee5c:	52d41000 	sbcspl	r1, r4, #0
    ee60:	05600000 	strbeq	r0, [r0, #-0]!
    ee64:	035d0172 	cmpeq	sp, #-2147483620	; 0x8000001c
    ee68:	ac110000 	ldcge	0, cr0, [r1], {-0}
    ee6c:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    ee70:	005d0176 	subseq	r0, sp, r6, ror r1
    ee74:	11000000 	mrsne	r0, (UNDEF: 0)
    ee78:	000055ed 	andeq	r5, r0, sp, ror #11
    ee7c:	92017b05 	andls	r7, r1, #5120	; 0x1400
    ee80:	04000005 	streq	r0, [r0], #-5
    ee84:	0055fd11 	subseq	pc, r5, r1, lsl sp	; <UNPREDICTABLE>
    ee88:	017b0500 	cmneq	fp, r0, lsl #10
    ee8c:	00000592 	muleq	r0, r2, r5
    ee90:	56b81108 	ldrtpl	r1, [r8], r8, lsl #2
    ee94:	7b050000 	blvc	14ee9c <_Min_Stack_Size+0x14ec9c>
    ee98:	00059201 	andeq	r9, r5, r1, lsl #4
    ee9c:	61110c00 	tstvs	r1, r0, lsl #24
    eea0:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    eea4:	005d017d 	subseq	r0, sp, sp, ror r1
    eea8:	11100000 	tstne	r0, r0
    eeac:	00004fe2 	andeq	r4, r0, r2, ror #31
    eeb0:	ab017f05 	blge	6eacc <_Min_Stack_Size+0x6e8cc>
    eeb4:	14000004 	strne	r0, [r0], #-4
    eeb8:	0051af11 	subseq	sl, r1, r1, lsl pc
    eebc:	01810500 	orreq	r0, r1, r0, lsl #10
    eec0:	0000005d 	andeq	r0, r0, sp, asr r0
    eec4:	50e71118 	rscpl	r1, r7, r8, lsl r1
    eec8:	83050000 	movwhi	r0, #20480	; 0x5000
    eecc:	00005d01 	andeq	r5, r0, r1, lsl #26
    eed0:	66111c00 	ldrvs	r1, [r1], -r0, lsl #24
    eed4:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    eed8:	04dc0184 	ldrbeq	r0, [ip], #388	; 0x184
    eedc:	12200000 	eorne	r0, r0, #0
    eee0:	00706d5f 	rsbseq	r6, r0, pc, asr sp
    eee4:	df018605 	svcle	0x00018605
    eee8:	24000006 	strcs	r0, [r0], #-6
    eeec:	00527611 	subseq	r7, r2, r1, lsl r6
    eef0:	01880500 	orreq	r0, r8, r0, lsl #10
    eef4:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    eef8:	50b11128 	adcspl	r1, r1, r8, lsr #2
    eefc:	8a050000 	bhi	14ef04 <_Min_Stack_Size+0x14ed04>
    ef00:	00005d01 	andeq	r5, r0, r1, lsl #26
    ef04:	f9112c00 			; <UNDEFINED> instruction: 0xf9112c00
    ef08:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    ef0c:	005d018d 	subseq	r0, sp, sp, lsl #3
    ef10:	11300000 	teqne	r0, r0
    ef14:	00005073 	andeq	r5, r0, r3, ror r0
    ef18:	ab018e05 	blge	72734 <_Min_Stack_Size+0x72534>
    ef1c:	34000004 	strcc	r0, [r0], #-4
    ef20:	00510111 	subseq	r0, r1, r1, lsl r1
    ef24:	01900500 	orrseq	r0, r0, r0, lsl #10
    ef28:	000006f6 	strdeq	r0, [r0], -r6
    ef2c:	532f1138 			; <UNDEFINED> instruction: 0x532f1138
    ef30:	91050000 	mrsls	r0, (UNDEF: 5)
    ef34:	0006fc01 	andeq	pc, r6, r1, lsl #24
    ef38:	6c113c00 	ldcvs	12, cr3, [r1], {-0}
    ef3c:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
    ef40:	04ab0192 	strteq	r0, [fp], #402	; 0x192
    ef44:	11400000 	mrsne	r0, (UNDEF: 64)
    ef48:	00005314 	andeq	r5, r0, r4, lsl r3
    ef4c:	0d019505 	cfstr32eq	mvfx9, [r1, #-20]	; 0xffffffec
    ef50:	44000007 	strmi	r0, [r0], #-7
    ef54:	00505411 	subseq	r5, r0, r1, lsl r4
    ef58:	019d0500 	orrseq	r0, sp, r0, lsl #10
    ef5c:	00000557 	andeq	r0, r0, r7, asr r5
    ef60:	50471148 	subpl	r1, r7, r8, asr #2
    ef64:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
    ef68:	00059201 	andeq	r9, r5, r1, lsl #4
    ef6c:	a0115400 	andsge	r5, r1, r0, lsl #8
    ef70:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
    ef74:	0719019f 			; <UNDEFINED> instruction: 0x0719019f
    ef78:	11580000 	cmpne	r8, r0
    ef7c:	00004ffc 	strdeq	r4, [r0], -ip
    ef80:	ab01a005 	blge	76f9c <_Min_Stack_Size+0x76d9c>
    ef84:	5c000004 	stcpl	0, cr0, [r0], {4}
    ef88:	31040f00 	tstcc	r4, r0, lsl #30
    ef8c:	0d000002 	stceq	0, cr0, [r0, #-8]
    ef90:	00005238 	andeq	r5, r0, r8, lsr r2
    ef94:	8db30568 	cfldr32hi	mvfx0, [r3, #416]!	; 0x1a0
    ef98:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    ef9c:	0500705f 	streq	r7, [r0, #-95]	; 0xffffffa1
    efa0:	00022bb4 			; <UNDEFINED> instruction: 0x00022bb4
    efa4:	5f0e0000 	svcpl	0x000e0000
    efa8:	b5050072 	strlt	r0, [r5, #-114]	; 0xffffff8e
    efac:	0000005d 	andeq	r0, r0, sp, asr r0
    efb0:	775f0e04 	ldrbvc	r0, [pc, -r4, lsl #28]
    efb4:	5db60500 	cfldr32pl	mvfx0, [r6]
    efb8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    efbc:	0050630c 	subseq	r6, r0, ip, lsl #6
    efc0:	33b70500 			; <UNDEFINED> instruction: 0x33b70500
    efc4:	0c000000 	stceq	0, cr0, [r0], {-0}
    efc8:	0052f50c 	subseq	pc, r2, ip, lsl #10
    efcc:	33b80500 			; <UNDEFINED> instruction: 0x33b80500
    efd0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    efd4:	66625f0e 	strbtvs	r5, [r2], -lr, lsl #30
    efd8:	06b90500 	ldrteq	r0, [r9], r0, lsl #10
    efdc:	10000002 	andne	r0, r0, r2
    efe0:	0050080c 	subseq	r0, r0, ip, lsl #16
    efe4:	5dba0500 	cfldr32pl	mvfx0, [sl]
    efe8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    efec:	000deb0c 	andeq	lr, sp, ip, lsl #22
    eff0:	5dbd0500 	cfldr32pl	mvfx0, [sp]
    eff4:	1c000003 	stcne	0, cr0, [r0], {3}
    eff8:	00504c0c 	subseq	r4, r0, ip, lsl #24
    effc:	7dc10500 	cfstr64vc	mvdx0, [r1]
    f000:	20000000 	andcs	r0, r0, r0
    f004:	003a870c 	eorseq	r8, sl, ip, lsl #14
    f008:	b8c30500 	stmialt	r3, {r8, sl}^
    f00c:	24000004 	strcs	r0, [r0], #-4
    f010:	0039e20c 	eorseq	lr, r9, ip, lsl #4
    f014:	e7c50500 	strb	r0, [r5, r0, lsl #10]
    f018:	28000004 	stmdacs	r0, {r2}
    f01c:	00529e0c 	subseq	r9, r2, ip, lsl #28
    f020:	0bc80500 	bleq	ff210428 <BootRAM+0xe180bc9>
    f024:	2c000005 	stccs	0, cr0, [r0], {5}
    f028:	00533e0c 	subseq	r3, r3, ip, lsl #28
    f02c:	25c90500 	strbcs	r0, [r9, #1280]	; 0x500
    f030:	30000005 	andcc	r0, r0, r5
    f034:	62755f0e 	rsbsvs	r5, r5, #14, 30	; 0x38
    f038:	06cc0500 	strbeq	r0, [ip], r0, lsl #10
    f03c:	34000002 	strcc	r0, [r0], #-2
    f040:	70755f0e 	rsbsvc	r5, r5, lr, lsl #30
    f044:	2bcd0500 	blcs	ff35044c <BootRAM+0xe2c0bed>
    f048:	3c000002 	stccc	0, cr0, [r0], {2}
    f04c:	72755f0e 	rsbsvc	r5, r5, #14, 30	; 0x38
    f050:	5dce0500 	cfstr64pl	mvdx0, [lr]
    f054:	40000000 	andmi	r0, r0, r0
    f058:	0050370c 	subseq	r3, r0, ip, lsl #14
    f05c:	2bd10500 	blcs	ff450464 <BootRAM+0xe3c0c05>
    f060:	44000005 	strmi	r0, [r0], #-5
    f064:	00531e0c 	subseq	r1, r3, ip, lsl #28
    f068:	3bd20500 	blcc	ff490470 <BootRAM+0xe400c11>
    f06c:	47000005 	strmi	r0, [r0, -r5]
    f070:	626c5f0e 	rsbvs	r5, ip, #14, 30	; 0x38
    f074:	06d50500 	ldrbeq	r0, [r5], r0, lsl #10
    f078:	48000002 	stmdami	r0, {r1}
    f07c:	00506a0c 	subseq	r6, r0, ip, lsl #20
    f080:	5dd80500 	cfldr64pl	mvdx0, [r8]
    f084:	50000000 	andpl	r0, r0, r0
    f088:	005b4c0c 	subseq	r4, fp, ip, lsl #24
    f08c:	8ad90500 	bhi	ff650494 <BootRAM+0xe5c0c35>
    f090:	54000000 	strpl	r0, [r0], #-0
    f094:	00353a0c 	eorseq	r3, r5, ip, lsl #20
    f098:	0ee00500 	cdpeq	5, 14, cr0, cr0, cr0, {0}
    f09c:	58000001 	stmdapl	r0, {r0}
    f0a0:	0052400c 	subseq	r4, r2, ip
    f0a4:	03e20500 	mvneq	r0, #0, 10
    f0a8:	5c000001 	stcpl	0, cr0, [r0], {1}
    f0ac:	00518e0c 	subseq	r8, r1, ip, lsl #28
    f0b0:	5de30500 	cfstr64pl	mvdx0, [r3]
    f0b4:	64000000 	strvs	r0, [r0], #-0
    f0b8:	005d1300 	subseq	r1, sp, r0, lsl #6
    f0bc:	04ab0000 	strteq	r0, [fp], #0
    f0c0:	5d140000 	ldcpl	0, cr0, [r4, #-0]
    f0c4:	14000003 	strne	r0, [r0], #-3
    f0c8:	0000007d 	andeq	r0, r0, sp, ror r0
    f0cc:	0004ab14 	andeq	sl, r4, r4, lsl fp
    f0d0:	005d1400 	subseq	r1, sp, r0, lsl #8
    f0d4:	0f000000 	svceq	0x00000000
    f0d8:	0004b104 	andeq	fp, r4, r4, lsl #2
    f0dc:	08010200 	stmdaeq	r1, {r9}
    f0e0:	00000199 	muleq	r0, r9, r1
    f0e4:	048d040f 	streq	r0, [sp], #1039	; 0x40f
    f0e8:	5d130000 	ldcpl	0, cr0, [r3, #-0]
    f0ec:	dc000000 	stcle	0, cr0, [r0], {-0}
    f0f0:	14000004 	strne	r0, [r0], #-4
    f0f4:	0000035d 	andeq	r0, r0, sp, asr r3
    f0f8:	00007d14 	andeq	r7, r0, r4, lsl sp
    f0fc:	04dc1400 	ldrbeq	r1, [ip], #1024	; 0x400
    f100:	5d140000 	ldcpl	0, cr0, [r4, #-0]
    f104:	00000000 	andeq	r0, r0, r0
    f108:	04e2040f 	strbteq	r0, [r2], #1039	; 0x40f
    f10c:	b1150000 	tstlt	r5, r0
    f110:	0f000004 	svceq	0x00000004
    f114:	0004be04 	andeq	fp, r4, r4, lsl #28
    f118:	00951300 	addseq	r1, r5, r0, lsl #6
    f11c:	050b0000 	streq	r0, [fp, #-0]
    f120:	5d140000 	ldcpl	0, cr0, [r4, #-0]
    f124:	14000003 	strne	r0, [r0], #-3
    f128:	0000007d 	andeq	r0, r0, sp, ror r0
    f12c:	00009514 	andeq	r9, r0, r4, lsl r5
    f130:	005d1400 	subseq	r1, sp, r0, lsl #8
    f134:	0f000000 	svceq	0x00000000
    f138:	0004ed04 	andeq	lr, r4, r4, lsl #26
    f13c:	005d1300 	subseq	r1, sp, r0, lsl #6
    f140:	05250000 	streq	r0, [r5, #-0]!
    f144:	5d140000 	ldcpl	0, cr0, [r4, #-0]
    f148:	14000003 	strne	r0, [r0], #-3
    f14c:	0000007d 	andeq	r0, r0, sp, ror r0
    f150:	11040f00 	tstne	r4, r0, lsl #30
    f154:	09000005 	stmdbeq	r0, {r0, r2}
    f158:	0000002c 	andeq	r0, r0, ip, lsr #32
    f15c:	0000053b 	andeq	r0, r0, fp, lsr r5
    f160:	0000db0a 	andeq	sp, r0, sl, lsl #22
    f164:	09000200 	stmdbeq	r0, {r9}
    f168:	0000002c 	andeq	r0, r0, ip, lsr #32
    f16c:	0000054b 	andeq	r0, r0, fp, asr #10
    f170:	0000db0a 	andeq	sp, r0, sl, lsl #22
    f174:	06000000 	streq	r0, [r0], -r0
    f178:	00005226 	andeq	r5, r0, r6, lsr #4
    f17c:	63011d05 	movwvs	r1, #7429	; 0x1d05
    f180:	10000003 	andne	r0, r0, r3
    f184:	00005b0b 	andeq	r5, r0, fp, lsl #22
    f188:	0121050c 			; <UNDEFINED> instruction: 0x0121050c
    f18c:	0000058c 	andeq	r0, r0, ip, lsl #11
    f190:	00524e11 	subseq	r4, r2, r1, lsl lr
    f194:	01230500 			; <UNDEFINED> instruction: 0x01230500
    f198:	0000058c 	andeq	r0, r0, ip, lsl #11
    f19c:	51061100 	mrspl	r1, (UNDEF: 22)
    f1a0:	24050000 	strcs	r0, [r5], #-0
    f1a4:	00005d01 	andeq	r5, r0, r1, lsl #26
    f1a8:	0f110400 	svceq	0x00110400
    f1ac:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    f1b0:	05920125 	ldreq	r0, [r2, #293]	; 0x125
    f1b4:	00080000 	andeq	r0, r8, r0
    f1b8:	0557040f 	ldrbeq	r0, [r7, #-1039]	; 0xfffffbf1
    f1bc:	040f0000 	streq	r0, [pc], #-0	; f1c4 <_Min_Stack_Size+0xefc4>
    f1c0:	0000054b 	andeq	r0, r0, fp, asr #10
    f1c4:	004fda10 	subeq	sp, pc, r0, lsl sl	; <UNPREDICTABLE>
    f1c8:	3d051800 	stccc	8, cr1, [r5, #-0]
    f1cc:	0005da01 	andeq	sp, r5, r1, lsl #20
    f1d0:	52881100 	addpl	r1, r8, #0, 2
    f1d4:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    f1d8:	0005da01 	andeq	sp, r5, r1, lsl #20
    f1dc:	bc110000 	ldclt	0, cr0, [r1], {-0}
    f1e0:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    f1e4:	05da013f 	ldrbeq	r0, [sl, #319]	; 0x13f
    f1e8:	11060000 	mrsne	r0, (UNDEF: 6)
    f1ec:	000052db 	ldrdeq	r5, [r0], -fp
    f1f0:	3a014005 	bcc	5f20c <_Min_Stack_Size+0x5f00c>
    f1f4:	0c000000 	stceq	0, cr0, [r0], {-0}
    f1f8:	00524911 	subseq	r4, r2, r1, lsl r9
    f1fc:	01430500 	cmpeq	r3, r0, lsl #10
    f200:	00000056 	andeq	r0, r0, r6, asr r0
    f204:	3a090010 	bcc	24f24c <_Min_Stack_Size+0x24f04c>
    f208:	ea000000 	b	f210 <_Min_Stack_Size+0xf010>
    f20c:	0a000005 	beq	f228 <_Min_Stack_Size+0xf028>
    f210:	000000db 	ldrdeq	r0, [r0], -fp
    f214:	5c100002 	ldcpl	0, cr0, [r0], {2}
    f218:	10000050 	andne	r0, r0, r0, asr r0
    f21c:	2c015605 	stccs	6, cr5, [r1], {5}
    f220:	11000006 	tstne	r0, r6
    f224:	00005179 	andeq	r5, r0, r9, ror r1
    f228:	77015905 	strvc	r5, [r1, -r5, lsl #18]
    f22c:	00000001 	andeq	r0, r0, r1
    f230:	0050c011 	subseq	ip, r0, r1, lsl r0
    f234:	015a0500 	cmpeq	sl, r0, lsl #10
    f238:	0000005d 	andeq	r0, r0, sp, asr r0
    f23c:	53531104 	cmppl	r3, #4, 2
    f240:	5b050000 	blpl	14f248 <_Min_Stack_Size+0x14f048>
    f244:	00017701 	andeq	r7, r1, r1, lsl #14
    f248:	c1110800 	tstgt	r1, r0, lsl #16
    f24c:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
    f250:	062c015c 			; <UNDEFINED> instruction: 0x062c015c
    f254:	000c0000 	andeq	r0, ip, r0
    f258:	0177040f 	cmneq	r7, pc, lsl #8
    f25c:	cf100000 	svcgt	0x00100000
    f260:	50000052 	andpl	r0, r0, r2, asr r0
    f264:	cf016005 	svcgt	0x00016005
    f268:	11000006 	tstne	r0, r6
    f26c:	000052c2 	andeq	r5, r0, r2, asr #5
    f270:	ab016305 	blge	67e8c <_Min_Stack_Size+0x67c8c>
    f274:	00000004 	andeq	r0, r0, r4
    f278:	00525411 	subseq	r5, r2, r1, lsl r4
    f27c:	01640500 	cmneq	r4, r0, lsl #10
    f280:	00000103 	andeq	r0, r0, r3, lsl #2
    f284:	50201104 	eorpl	r1, r0, r4, lsl #2
    f288:	65050000 	strvs	r0, [r5, #-0]
    f28c:	00010301 	andeq	r0, r1, r1, lsl #6
    f290:	45110c00 	ldrmi	r0, [r1, #-3072]	; 0xfffff400
    f294:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
    f298:	01030166 	tsteq	r3, r6, ror #2
    f29c:	11140000 	tstne	r4, r0
    f2a0:	0000530a 	andeq	r5, r0, sl, lsl #6
    f2a4:	cf016705 	svcgt	0x00016705
    f2a8:	1c000006 	stcne	0, cr0, [r0], {6}
    f2ac:	0052e811 	subseq	lr, r2, r1, lsl r8
    f2b0:	01680500 	cmneq	r8, r0, lsl #10
    f2b4:	0000005d 	andeq	r0, r0, sp, asr r0
    f2b8:	508c1124 	addpl	r1, ip, r4, lsr #2
    f2bc:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
    f2c0:	00010301 	andeq	r0, r1, r1, lsl #6
    f2c4:	11112800 	tstne	r1, r0, lsl #16
    f2c8:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    f2cc:	0103016a 	tsteq	r3, sl, ror #2
    f2d0:	11300000 	teqne	r0, r0
    f2d4:	0000507b 	andeq	r5, r0, fp, ror r0
    f2d8:	03016b05 	movweq	r6, #6917	; 0x1b05
    f2dc:	38000001 	stmdacc	r0, {r0}
    f2e0:	004fed11 	subeq	lr, pc, r1, lsl sp	; <UNPREDICTABLE>
    f2e4:	016c0500 	cmneq	ip, r0, lsl #10
    f2e8:	00000103 	andeq	r0, r0, r3, lsl #2
    f2ec:	50d61140 	sbcspl	r1, r6, r0, asr #2
    f2f0:	6d050000 	stcvs	0, cr0, [r5, #-0]
    f2f4:	00010301 	andeq	r0, r1, r1, lsl #6
    f2f8:	09004800 	stmdbeq	r0, {fp, lr}
    f2fc:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    f300:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    f304:	0000db0a 	andeq	sp, r0, sl, lsl #22
    f308:	0f000700 	svceq	0x00000700
    f30c:	0005ea04 	andeq	lr, r5, r4, lsl #20
    f310:	06f01600 	ldrbteq	r1, [r0], r0, lsl #12
    f314:	5d140000 	ldcpl	0, cr0, [r4, #-0]
    f318:	00000003 	andeq	r0, r0, r3
    f31c:	06e5040f 	strbteq	r0, [r5], pc, lsl #8
    f320:	040f0000 	streq	r0, [pc], #-0	; f328 <_Min_Stack_Size+0xf128>
    f324:	00000598 	muleq	r0, r8, r5
    f328:	018d040f 	orreq	r0, sp, pc, lsl #8
    f32c:	0d160000 	ldceq	0, cr0, [r6, #-0]
    f330:	14000007 	strne	r0, [r0], #-7
    f334:	0000005d 	andeq	r0, r0, sp, asr r0
    f338:	13040f00 	movwne	r0, #20224	; 0x4f00
    f33c:	0f000007 	svceq	0x00000007
    f340:	00070204 	andeq	r0, r7, r4, lsl #4
    f344:	32040f00 	andcc	r0, r4, #0, 30
    f348:	04000006 	streq	r0, [r0], #-6
    f34c:	0000570c 	andeq	r5, r0, ip, lsl #14
    f350:	006b7b01 	rsbeq	r7, fp, r1, lsl #22
    f354:	5f0d0000 	svcpl	0x000d0000
    f358:	08000057 	stmdaeq	r0, {r0, r1, r2, r4, r6}
    f35c:	074f7d01 	strbeq	r7, [pc, -r1, lsl #26]
    f360:	cb0c0000 	blgt	30f368 <_Min_Stack_Size+0x30f168>
    f364:	01000057 	qaddeq	r0, r7, r0
    f368:	0000418f 	andeq	r4, r0, pc, lsl #3
    f36c:	4f0c0000 	svcmi	0x000c0000
    f370:	01000052 	qaddeq	r0, r2, r0
    f374:	00074f92 	muleq	r7, r2, pc	; <UNPREDICTABLE>
    f378:	0f000400 	svceq	0x00000400
    f37c:	00072a04 	andeq	r2, r7, r4, lsl #20
    f380:	57660400 	strbpl	r0, [r6, -r0, lsl #8]!
    f384:	93010000 	movwls	r0, #4096	; 0x1000
    f388:	0000072a 	andeq	r0, r0, sl, lsr #14
    f38c:	00577617 	subseq	r7, r7, r7, lsl r6
    f390:	85bd0100 	ldrhi	r0, [sp, #256]!	; 0x100
    f394:	03000007 	movweq	r0, #7
    f398:	00000785 	andeq	r0, r0, r5, lsl #15
    f39c:	72747018 	rsbsvc	r7, r4, #24
    f3a0:	7dbd0100 	ldfvcs	f0, [sp]
    f3a4:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    f3a8:	bf010063 	svclt	0x00010063
    f3ac:	00000785 	andeq	r0, r0, r5, lsl #15
    f3b0:	55040f00 	strpl	r0, [r4, #-3840]	; 0xfffff100
    f3b4:	1a000007 	bne	f3d8 <_Min_Stack_Size+0xf1d8>
    f3b8:	000056fa 	strdeq	r5, [r0], -sl
    f3bc:	cc015201 	sfmgt	f5, 4, [r1], {1}
    f3c0:	8c080007 	stchi	0, cr0, [r8], {7}
    f3c4:	01000000 	mrseq	r0, (UNDEF: 0)
    f3c8:	0008199c 	muleq	r8, ip, r9
    f3cc:	576c1b00 	strbpl	r1, [ip, -r0, lsl #22]!
    f3d0:	52010000 	andpl	r0, r1, #0
    f3d4:	00035d01 	andeq	r5, r3, r1, lsl #26
    f3d8:	000abb00 	andeq	fp, sl, r0, lsl #22
    f3dc:	57581b00 	ldrbpl	r1, [r8, -r0, lsl #22]
    f3e0:	52010000 	andpl	r0, r1, #0
    f3e4:	00007d01 	andeq	r7, r0, r1, lsl #26
    f3e8:	000b0e00 	andeq	r0, fp, r0, lsl #28
    f3ec:	574e1c00 	strbpl	r1, [lr, -r0, lsl #24]
    f3f0:	54010000 	strpl	r0, [r1], #-0
    f3f4:	00078501 	andeq	r8, r7, r1, lsl #10
    f3f8:	1d510100 	ldfnee	f0, [r1, #-0]
    f3fc:	55010070 	strpl	r0, [r1, #-112]	; 0xffffff90
    f400:	00078501 	andeq	r8, r7, r1, lsl #10
    f404:	000b3c00 	andeq	r3, fp, r0, lsl #24
    f408:	00711d00 	rsbseq	r1, r1, r0, lsl #26
    f40c:	85015501 	strhi	r5, [r1, #-1281]	; 0xfffffaff
    f410:	5a000007 	bpl	f434 <_Min_Stack_Size+0xf234>
    f414:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
    f418:	00000760 	andeq	r0, r0, r0, ror #14
    f41c:	080007d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl}
    f420:	0000000c 	andeq	r0, r0, ip
    f424:	1f015901 	svcne	0x00015901
    f428:	00000770 	andeq	r0, r0, r0, ror r7
    f42c:	00000bbd 			; <UNDEFINED> instruction: 0x00000bbd
    f430:	0007d020 	andeq	sp, r7, r0, lsr #32
    f434:	00000c08 	andeq	r0, r0, r8, lsl #24
    f438:	077b2100 	ldrbeq	r2, [fp, -r0, lsl #2]!
    f43c:	0bdd0000 	bleq	ff74f444 <BootRAM+0xe6bfbe5>
    f440:	00000000 	andeq	r0, r0, r0
    f444:	57892200 	strpl	r2, [r9, r0, lsl #4]
    f448:	ab010000 	blge	4f450 <_Min_Stack_Size+0x4f250>
    f44c:	00000785 	andeq	r0, r0, r5, lsl #15
    f450:	0008e800 	andeq	lr, r8, r0, lsl #16
    f454:	26000400 	strcs	r0, [r0], -r0, lsl #8
    f458:	04000032 	streq	r0, [r0], #-50	; 0xffffffce
    f45c:	004ee601 	subeq	lr, lr, r1, lsl #12
    f460:	571a0c00 	ldrpl	r0, [sl, -r0, lsl #24]
    f464:	510d0000 	mrspl	r0, (UNDEF: 13)
    f468:	08580000 	ldmdaeq	r8, {}^	; <UNPREDICTABLE>
    f46c:	00bc0800 	adcseq	r0, ip, r0, lsl #16
    f470:	66030000 	strvs	r0, [r3], -r0
    f474:	01020000 	mrseq	r0, (UNDEF: 2)
    f478:	00019206 	andeq	r9, r1, r6, lsl #4
    f47c:	08010200 	stmdaeq	r1, {r9}
    f480:	00000190 	muleq	r0, r0, r1
    f484:	95050202 	strls	r0, [r5, #-514]	; 0xfffffdfe
    f488:	02000000 	andeq	r0, r0, #0
    f48c:	01f20702 	mvnseq	r0, r2, lsl #14
    f490:	04020000 	streq	r0, [r2], #-0
    f494:	0000bd05 	andeq	fp, r0, r5, lsl #26
    f498:	07040200 	streq	r0, [r4, -r0, lsl #4]
    f49c:	000001c9 	andeq	r0, r0, r9, asr #3
    f4a0:	b8050802 	stmdalt	r5, {r1, fp}
    f4a4:	02000000 	andeq	r0, r0, #0
    f4a8:	01c40708 	biceq	r0, r4, r8, lsl #14
    f4ac:	04030000 	streq	r0, [r3], #-0
    f4b0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    f4b4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    f4b8:	000001ce 	andeq	r0, r0, lr, asr #3
    f4bc:	00571304 	subseq	r1, r7, r4, lsl #6
    f4c0:	64d80200 	ldrbvs	r0, [r8], #512	; 0x200
    f4c4:	02000000 	andeq	r0, r0, #0
    f4c8:	02f80408 	rscseq	r0, r8, #8, 8	; 0x8000000
    f4cc:	04050000 	streq	r0, [r5], #-0
    f4d0:	0051cb04 	subseq	ip, r1, r4, lsl #22
    f4d4:	5d070300 	stcpl	3, cr0, [r7, #-0]
    f4d8:	04000000 	streq	r0, [r0], #-0
    f4dc:	000051ba 			; <UNDEFINED> instruction: 0x000051ba
    f4e0:	00412c04 	subeq	r2, r1, r4, lsl #24
    f4e4:	a4040000 	strge	r0, [r4], #-0
    f4e8:	04000052 	streq	r0, [r0], #-82	; 0xffffffae
    f4ec:	00004172 	andeq	r4, r0, r2, ror r1
    f4f0:	51870600 	orrpl	r0, r7, r0, lsl #12
    f4f4:	65020000 	strvs	r0, [r2, #-0]
    f4f8:	00006401 	andeq	r6, r0, r1, lsl #8
    f4fc:	04040700 	streq	r0, [r4], #-1792	; 0xfffff900
    f500:	0000cba6 	andeq	ip, r0, r6, lsr #23
    f504:	51810800 	orrpl	r0, r1, r0, lsl #16
    f508:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    f50c:	000000a0 	andeq	r0, r0, r0, lsr #1
    f510:	0050cf08 	subseq	ip, r0, r8, lsl #30
    f514:	cba90400 	blgt	fea5051c <BootRAM+0xd9c0cbd>
    f518:	00000000 	andeq	r0, r0, r0
    f51c:	00002c09 	andeq	r2, r0, r9, lsl #24
    f520:	0000db00 	andeq	sp, r0, r0, lsl #22
    f524:	00db0a00 	sbcseq	r0, fp, r0, lsl #20
    f528:	00030000 	andeq	r0, r3, r0
    f52c:	59070402 	stmdbpl	r7, {r1, sl}
    f530:	0b000000 	bleq	f538 <_Min_Stack_Size+0xf338>
    f534:	03a30408 			; <UNDEFINED> instruction: 0x03a30408
    f538:	0c000001 	stceq	0, cr0, [r0], {1}
    f53c:	0000528e 	andeq	r5, r0, lr, lsl #5
    f540:	005da504 	subseq	sl, sp, r4, lsl #10
    f544:	0c000000 	stceq	0, cr0, [r0], {-0}
    f548:	00005296 	muleq	r0, r6, r2
    f54c:	00acaa04 	adceq	sl, ip, r4, lsl #20
    f550:	00040000 	andeq	r0, r4, r0
    f554:	00522d04 	subseq	r2, r2, r4, lsl #26
    f558:	e2ab0400 	adc	r0, fp, #0, 8
    f55c:	04000000 	streq	r0, [r0], #-0
    f560:	000050a0 	andeq	r5, r0, r0, lsr #1
    f564:	007faf04 	rsbseq	sl, pc, r4, lsl #30
    f568:	e0040000 	and	r0, r4, r0
    f56c:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    f570:	00004816 	andeq	r4, r0, r6, lsl r8
    f574:	50a90d00 	adcpl	r0, r9, r0, lsl #26
    f578:	05180000 	ldreq	r0, [r8, #-0]
    f57c:	0001772d 	andeq	r7, r1, sp, lsr #14
    f580:	524e0c00 	subpl	r0, lr, #0, 24
    f584:	2f050000 	svccs	0x00050000
    f588:	00000177 	andeq	r0, r0, r7, ror r1
    f58c:	6b5f0e00 	blvs	17d2d94 <_Min_Stack_Size+0x17d2b94>
    f590:	5d300500 	cfldr32pl	mvfx0, [r0, #-0]
    f594:	04000000 	streq	r0, [r0], #-0
    f598:	0052800c 	subseq	r8, r2, ip
    f59c:	5d300500 	cfldr32pl	mvfx0, [r0, #-0]
    f5a0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f5a4:	00509a0c 	subseq	r9, r0, ip, lsl #20
    f5a8:	5d300500 	cfldr32pl	mvfx0, [r0, #-0]
    f5ac:	0c000000 	stceq	0, cr0, [r0], {-0}
    f5b0:	0052fb0c 	subseq	pc, r2, ip, lsl #22
    f5b4:	5d300500 	cfldr32pl	mvfx0, [r0, #-0]
    f5b8:	10000000 	andne	r0, r0, r0
    f5bc:	00785f0e 	rsbseq	r5, r8, lr, lsl #30
    f5c0:	017d3105 	cmneq	sp, r5, lsl #2
    f5c4:	00140000 	andseq	r0, r4, r0
    f5c8:	0124040f 			; <UNDEFINED> instruction: 0x0124040f
    f5cc:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    f5d0:	8d000001 	stchi	0, cr0, [r0, #-4]
    f5d4:	0a000001 	beq	f5e0 <_Min_Stack_Size+0xf3e0>
    f5d8:	000000db 	ldrdeq	r0, [r0], -fp
    f5dc:	ca0d0000 	bgt	34f5e4 <_Min_Stack_Size+0x34f3e4>
    f5e0:	24000050 	strcs	r0, [r0], #-80	; 0xffffffb0
    f5e4:	02063505 	andeq	r3, r6, #20971520	; 0x1400000
    f5e8:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
    f5ec:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    f5f0:	00005d37 	andeq	r5, r0, r7, lsr sp
    f5f4:	b30c0000 	movwlt	r0, #49152	; 0xc000
    f5f8:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    f5fc:	00005d38 	andeq	r5, r0, r8, lsr sp
    f600:	3d0c0400 	cfstrscc	mvf0, [ip, #-0]
    f604:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    f608:	00005d39 	andeq	r5, r0, r9, lsr sp
    f60c:	580c0800 	stmdapl	ip, {fp}
    f610:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
    f614:	00005d3a 	andeq	r5, r0, sl, lsr sp
    f618:	a60c0c00 	strge	r0, [ip], -r0, lsl #24
    f61c:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
    f620:	00005d3b 	andeq	r5, r0, fp, lsr sp
    f624:	960c1000 	strls	r1, [ip], -r0
    f628:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
    f62c:	00005d3c 	andeq	r5, r0, ip, lsr sp
    f630:	000c1400 	andeq	r1, ip, r0, lsl #8
    f634:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
    f638:	00005d3d 	andeq	r5, r0, sp, lsr sp
    f63c:	150c1800 	strne	r1, [ip, #-2048]	; 0xfffff800
    f640:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    f644:	00005d3e 	andeq	r5, r0, lr, lsr sp
    f648:	240c1c00 	strcs	r1, [ip], #-3072	; 0xfffff400
    f64c:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
    f650:	00005d3f 	andeq	r5, r0, pc, lsr sp
    f654:	0d002000 	stceq	0, cr2, [r0, #-0]
    f658:	0000521f 	andeq	r5, r0, pc, lsl r2
    f65c:	2b730508 	blcs	1cd0a84 <_Min_Stack_Size+0x1cd0884>
    f660:	0c000002 	stceq	0, cr0, [r0], {2}
    f664:	000033a1 	andeq	r3, r0, r1, lsr #7
    f668:	022b7405 	eoreq	r7, fp, #83886080	; 0x5000000
    f66c:	0c000000 	stceq	0, cr0, [r0], {-0}
    f670:	000057ca 	andeq	r5, r0, sl, asr #15
    f674:	005d7505 	subseq	r7, sp, r5, lsl #10
    f678:	00040000 	andeq	r0, r4, r0
    f67c:	002c040f 	eoreq	r0, ip, pc, lsl #8
    f680:	d4100000 	ldrle	r0, [r0], #-0
    f684:	60000052 	andvs	r0, r0, r2, asr r0
    f688:	5d017205 	sfmpl	f7, 4, [r1, #-20]	; 0xffffffec
    f68c:	11000003 	tstne	r0, r3
    f690:	000052ac 	andeq	r5, r0, ip, lsr #5
    f694:	5d017605 	stcpl	6, cr7, [r1, #-20]	; 0xffffffec
    f698:	00000000 	andeq	r0, r0, r0
    f69c:	0055ed11 	subseq	lr, r5, r1, lsl sp
    f6a0:	017b0500 	cmneq	fp, r0, lsl #10
    f6a4:	00000592 	muleq	r0, r2, r5
    f6a8:	55fd1104 	ldrbpl	r1, [sp, #260]!	; 0x104
    f6ac:	7b050000 	blvc	14f6b4 <_Min_Stack_Size+0x14f4b4>
    f6b0:	00059201 	andeq	r9, r5, r1, lsl #4
    f6b4:	b8110800 	ldmdalt	r1, {fp}
    f6b8:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    f6bc:	0592017b 	ldreq	r0, [r2, #379]	; 0x17b
    f6c0:	110c0000 	mrsne	r0, (UNDEF: 12)
    f6c4:	00005261 	andeq	r5, r0, r1, ror #4
    f6c8:	5d017d05 	stcpl	13, cr7, [r1, #-20]	; 0xffffffec
    f6cc:	10000000 	andne	r0, r0, r0
    f6d0:	004fe211 	subeq	lr, pc, r1, lsl r2	; <UNPREDICTABLE>
    f6d4:	017f0500 	cmneq	pc, r0, lsl #10
    f6d8:	000004ab 	andeq	r0, r0, fp, lsr #9
    f6dc:	51af1114 			; <UNDEFINED> instruction: 0x51af1114
    f6e0:	81050000 	mrshi	r0, (UNDEF: 5)
    f6e4:	00005d01 	andeq	r5, r0, r1, lsl #26
    f6e8:	e7111800 	ldr	r1, [r1, -r0, lsl #16]
    f6ec:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    f6f0:	005d0183 	subseq	r0, sp, r3, lsl #3
    f6f4:	111c0000 	tstne	ip, r0
    f6f8:	00005266 	andeq	r5, r0, r6, ror #4
    f6fc:	dc018405 	cfstrsle	mvf8, [r1], {5}
    f700:	20000004 	andcs	r0, r0, r4
    f704:	706d5f12 	rsbvc	r5, sp, r2, lsl pc
    f708:	01860500 	orreq	r0, r6, r0, lsl #10
    f70c:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    f710:	52761124 	rsbspl	r1, r6, #36, 2
    f714:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
    f718:	0006f001 	andeq	pc, r6, r1
    f71c:	b1112800 	tstlt	r1, r0, lsl #16
    f720:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    f724:	005d018a 	subseq	r0, sp, sl, lsl #3
    f728:	112c0000 			; <UNDEFINED> instruction: 0x112c0000
    f72c:	000050f9 	strdeq	r5, [r0], -r9
    f730:	5d018d05 	stcpl	13, cr8, [r1, #-20]	; 0xffffffec
    f734:	30000000 	andcc	r0, r0, r0
    f738:	00507311 	subseq	r7, r0, r1, lsl r3
    f73c:	018e0500 	orreq	r0, lr, r0, lsl #10
    f740:	000004ab 	andeq	r0, r0, fp, lsr #9
    f744:	51011134 	tstpl	r1, r4, lsr r1
    f748:	90050000 	andls	r0, r5, r0
    f74c:	0006f601 	andeq	pc, r6, r1, lsl #12
    f750:	2f113800 	svccs	0x00113800
    f754:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
    f758:	06fc0191 	usateq	r0, #28, r1, lsl #3
    f75c:	113c0000 	teqne	ip, r0
    f760:	0000516c 	andeq	r5, r0, ip, ror #2
    f764:	ab019205 	blge	73f80 <_Min_Stack_Size+0x73d80>
    f768:	40000004 	andmi	r0, r0, r4
    f76c:	00531411 	subseq	r1, r3, r1, lsl r4
    f770:	01950500 	orrseq	r0, r5, r0, lsl #10
    f774:	0000070d 	andeq	r0, r0, sp, lsl #14
    f778:	50541144 	subspl	r1, r4, r4, asr #2
    f77c:	9d050000 	stcls	0, cr0, [r5, #-0]
    f780:	00055701 	andeq	r5, r5, r1, lsl #14
    f784:	47114800 	ldrmi	r4, [r1, -r0, lsl #16]
    f788:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    f78c:	0592019e 	ldreq	r0, [r2, #414]	; 0x19e
    f790:	11540000 	cmpne	r4, r0
    f794:	000051a0 	andeq	r5, r0, r0, lsr #3
    f798:	19019f05 	stmdbne	r1, {r0, r2, r8, r9, sl, fp, ip, pc}
    f79c:	58000007 	stmdapl	r0, {r0, r1, r2}
    f7a0:	004ffc11 	subeq	pc, pc, r1, lsl ip	; <UNPREDICTABLE>
    f7a4:	01a00500 	lsleq	r0, r0, #10
    f7a8:	000004ab 	andeq	r0, r0, fp, lsr #9
    f7ac:	040f005c 	streq	r0, [pc], #-92	; f7b4 <_Min_Stack_Size+0xf5b4>
    f7b0:	00000231 	andeq	r0, r0, r1, lsr r2
    f7b4:	0052380d 	subseq	r3, r2, sp, lsl #16
    f7b8:	b3056800 	movwlt	r6, #22528	; 0x5800
    f7bc:	0000048d 	andeq	r0, r0, sp, lsl #9
    f7c0:	00705f0e 	rsbseq	r5, r0, lr, lsl #30
    f7c4:	022bb405 	eoreq	fp, fp, #83886080	; 0x5000000
    f7c8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    f7cc:	0500725f 	streq	r7, [r0, #-607]	; 0xfffffda1
    f7d0:	00005db5 			; <UNDEFINED> instruction: 0x00005db5
    f7d4:	5f0e0400 	svcpl	0x000e0400
    f7d8:	b6050077 			; <UNDEFINED> instruction: 0xb6050077
    f7dc:	0000005d 	andeq	r0, r0, sp, asr r0
    f7e0:	50630c08 	rsbpl	r0, r3, r8, lsl #24
    f7e4:	b7050000 	strlt	r0, [r5, -r0]
    f7e8:	00000033 	andeq	r0, r0, r3, lsr r0
    f7ec:	52f50c0c 	rscspl	r0, r5, #12, 24	; 0xc00
    f7f0:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    f7f4:	00000033 	andeq	r0, r0, r3, lsr r0
    f7f8:	625f0e0e 	subsvs	r0, pc, #14, 28	; 0xe0
    f7fc:	b9050066 	stmdblt	r5, {r1, r2, r5, r6}
    f800:	00000206 	andeq	r0, r0, r6, lsl #4
    f804:	50080c10 	andpl	r0, r8, r0, lsl ip
    f808:	ba050000 	blt	14f810 <_Min_Stack_Size+0x14f610>
    f80c:	0000005d 	andeq	r0, r0, sp, asr r0
    f810:	0deb0c18 	stcleq	12, cr0, [fp, #96]!	; 0x60
    f814:	bd050000 	stclt	0, cr0, [r5, #-0]
    f818:	0000035d 	andeq	r0, r0, sp, asr r3
    f81c:	504c0c1c 	subpl	r0, ip, ip, lsl ip
    f820:	c1050000 	mrsgt	r0, (UNDEF: 5)
    f824:	0000007d 	andeq	r0, r0, sp, ror r0
    f828:	3a870c20 	bcc	fe1d28b0 <BootRAM+0xd143051>
    f82c:	c3050000 	movwgt	r0, #20480	; 0x5000
    f830:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    f834:	39e20c24 	stmibcc	r2!, {r2, r5, sl, fp}^
    f838:	c5050000 	strgt	r0, [r5, #-0]
    f83c:	000004e7 	andeq	r0, r0, r7, ror #9
    f840:	529e0c28 	addspl	r0, lr, #40, 24	; 0x2800
    f844:	c8050000 	stmdagt	r5, {}	; <UNPREDICTABLE>
    f848:	0000050b 	andeq	r0, r0, fp, lsl #10
    f84c:	533e0c2c 	teqpl	lr, #44, 24	; 0x2c00
    f850:	c9050000 	stmdbgt	r5, {}	; <UNPREDICTABLE>
    f854:	00000525 	andeq	r0, r0, r5, lsr #10
    f858:	755f0e30 	ldrbvc	r0, [pc, #-3632]	; ea30 <_Min_Stack_Size+0xe830>
    f85c:	cc050062 	stcgt	0, cr0, [r5], {98}	; 0x62
    f860:	00000206 	andeq	r0, r0, r6, lsl #4
    f864:	755f0e34 	ldrbvc	r0, [pc, #-3636]	; ea38 <_Min_Stack_Size+0xe838>
    f868:	cd050070 	stcgt	0, cr0, [r5, #-448]	; 0xfffffe40
    f86c:	0000022b 	andeq	r0, r0, fp, lsr #4
    f870:	755f0e3c 	ldrbvc	r0, [pc, #-3644]	; ea3c <_Min_Stack_Size+0xe83c>
    f874:	ce050072 	mcrgt	0, 0, r0, cr5, cr2, {3}
    f878:	0000005d 	andeq	r0, r0, sp, asr r0
    f87c:	50370c40 	eorspl	r0, r7, r0, asr #24
    f880:	d1050000 	mrsle	r0, (UNDEF: 5)
    f884:	0000052b 	andeq	r0, r0, fp, lsr #10
    f888:	531e0c44 	tstpl	lr, #68, 24	; 0x4400
    f88c:	d2050000 	andle	r0, r5, #0
    f890:	0000053b 	andeq	r0, r0, fp, lsr r5
    f894:	6c5f0e47 	mrrcvs	14, 4, r0, pc, cr7	; <UNPREDICTABLE>
    f898:	d5050062 	strle	r0, [r5, #-98]	; 0xffffff9e
    f89c:	00000206 	andeq	r0, r0, r6, lsl #4
    f8a0:	506a0c48 	rsbpl	r0, sl, r8, asr #24
    f8a4:	d8050000 	stmdale	r5, {}	; <UNPREDICTABLE>
    f8a8:	0000005d 	andeq	r0, r0, sp, asr r0
    f8ac:	5b4c0c50 	blpl	13129f4 <_Min_Stack_Size+0x13127f4>
    f8b0:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
    f8b4:	0000008a 	andeq	r0, r0, sl, lsl #1
    f8b8:	353a0c54 	ldrcc	r0, [sl, #-3156]!	; 0xfffff3ac
    f8bc:	e0050000 	and	r0, r5, r0
    f8c0:	0000010e 	andeq	r0, r0, lr, lsl #2
    f8c4:	52400c58 	subpl	r0, r0, #88, 24	; 0x5800
    f8c8:	e2050000 	and	r0, r5, #0
    f8cc:	00000103 	andeq	r0, r0, r3, lsl #2
    f8d0:	518e0c5c 	orrpl	r0, lr, ip, asr ip
    f8d4:	e3050000 	movw	r0, #20480	; 0x5000
    f8d8:	0000005d 	andeq	r0, r0, sp, asr r0
    f8dc:	5d130064 	ldcpl	0, cr0, [r3, #-400]	; 0xfffffe70
    f8e0:	ab000000 	blge	f8e8 <_Min_Stack_Size+0xf6e8>
    f8e4:	14000004 	strne	r0, [r0], #-4
    f8e8:	0000035d 	andeq	r0, r0, sp, asr r3
    f8ec:	00007d14 	andeq	r7, r0, r4, lsl sp
    f8f0:	04ab1400 	strteq	r1, [fp], #1024	; 0x400
    f8f4:	5d140000 	ldcpl	0, cr0, [r4, #-0]
    f8f8:	00000000 	andeq	r0, r0, r0
    f8fc:	04b1040f 	ldrteq	r0, [r1], #1039	; 0x40f
    f900:	01020000 	mrseq	r0, (UNDEF: 2)
    f904:	00019908 	andeq	r9, r1, r8, lsl #18
    f908:	8d040f00 	stchi	15, cr0, [r4, #-0]
    f90c:	13000004 	movwne	r0, #4
    f910:	0000005d 	andeq	r0, r0, sp, asr r0
    f914:	000004dc 	ldrdeq	r0, [r0], -ip
    f918:	00035d14 	andeq	r5, r3, r4, lsl sp
    f91c:	007d1400 	rsbseq	r1, sp, r0, lsl #8
    f920:	dc140000 	ldcle	0, cr0, [r4], {-0}
    f924:	14000004 	strne	r0, [r0], #-4
    f928:	0000005d 	andeq	r0, r0, sp, asr r0
    f92c:	e2040f00 	and	r0, r4, #0, 30
    f930:	15000004 	strne	r0, [r0, #-4]
    f934:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    f938:	04be040f 	ldrteq	r0, [lr], #1039	; 0x40f
    f93c:	95130000 	ldrls	r0, [r3, #-0]
    f940:	0b000000 	bleq	f948 <_Min_Stack_Size+0xf748>
    f944:	14000005 	strne	r0, [r0], #-5
    f948:	0000035d 	andeq	r0, r0, sp, asr r3
    f94c:	00007d14 	andeq	r7, r0, r4, lsl sp
    f950:	00951400 	addseq	r1, r5, r0, lsl #8
    f954:	5d140000 	ldcpl	0, cr0, [r4, #-0]
    f958:	00000000 	andeq	r0, r0, r0
    f95c:	04ed040f 	strbteq	r0, [sp], #1039	; 0x40f
    f960:	5d130000 	ldcpl	0, cr0, [r3, #-0]
    f964:	25000000 	strcs	r0, [r0, #-0]
    f968:	14000005 	strne	r0, [r0], #-5
    f96c:	0000035d 	andeq	r0, r0, sp, asr r3
    f970:	00007d14 	andeq	r7, r0, r4, lsl sp
    f974:	040f0000 	streq	r0, [pc], #-0	; f97c <_Min_Stack_Size+0xf77c>
    f978:	00000511 	andeq	r0, r0, r1, lsl r5
    f97c:	00002c09 	andeq	r2, r0, r9, lsl #24
    f980:	00053b00 	andeq	r3, r5, r0, lsl #22
    f984:	00db0a00 	sbcseq	r0, fp, r0, lsl #20
    f988:	00020000 	andeq	r0, r2, r0
    f98c:	00002c09 	andeq	r2, r0, r9, lsl #24
    f990:	00054b00 	andeq	r4, r5, r0, lsl #22
    f994:	00db0a00 	sbcseq	r0, fp, r0, lsl #20
    f998:	00000000 	andeq	r0, r0, r0
    f99c:	00522606 	subseq	r2, r2, r6, lsl #12
    f9a0:	011d0500 	tsteq	sp, r0, lsl #10
    f9a4:	00000363 	andeq	r0, r0, r3, ror #6
    f9a8:	005b0b10 	subseq	r0, fp, r0, lsl fp
    f9ac:	21050c00 	tstcs	r5, r0, lsl #24
    f9b0:	00058c01 	andeq	r8, r5, r1, lsl #24
    f9b4:	524e1100 	subpl	r1, lr, #0, 2
    f9b8:	23050000 	movwcs	r0, #20480	; 0x5000
    f9bc:	00058c01 	andeq	r8, r5, r1, lsl #24
    f9c0:	06110000 	ldreq	r0, [r1], -r0
    f9c4:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
    f9c8:	005d0124 	subseq	r0, sp, r4, lsr #2
    f9cc:	11040000 	mrsne	r0, (UNDEF: 4)
    f9d0:	0000520f 	andeq	r5, r0, pc, lsl #4
    f9d4:	92012505 	andls	r2, r1, #20971520	; 0x1400000
    f9d8:	08000005 	stmdaeq	r0, {r0, r2}
    f9dc:	57040f00 	strpl	r0, [r4, -r0, lsl #30]
    f9e0:	0f000005 	svceq	0x00000005
    f9e4:	00054b04 	andeq	r4, r5, r4, lsl #22
    f9e8:	4fda1000 	svcmi	0x00da1000
    f9ec:	05180000 	ldreq	r0, [r8, #-0]
    f9f0:	05da013d 	ldrbeq	r0, [sl, #317]	; 0x13d
    f9f4:	88110000 	ldmdahi	r1, {}	; <UNPREDICTABLE>
    f9f8:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    f9fc:	05da013e 	ldrbeq	r0, [sl, #318]	; 0x13e
    fa00:	11000000 	mrsne	r0, (UNDEF: 0)
    fa04:	000052bc 			; <UNDEFINED> instruction: 0x000052bc
    fa08:	da013f05 	ble	5f624 <_Min_Stack_Size+0x5f424>
    fa0c:	06000005 	streq	r0, [r0], -r5
    fa10:	0052db11 	subseq	sp, r2, r1, lsl fp
    fa14:	01400500 	cmpeq	r0, r0, lsl #10
    fa18:	0000003a 	andeq	r0, r0, sl, lsr r0
    fa1c:	5249110c 	subpl	r1, r9, #12, 2
    fa20:	43050000 	movwmi	r0, #20480	; 0x5000
    fa24:	00005601 	andeq	r5, r0, r1, lsl #12
    fa28:	09001000 	stmdbeq	r0, {ip}
    fa2c:	0000003a 	andeq	r0, r0, sl, lsr r0
    fa30:	000005ea 	andeq	r0, r0, sl, ror #11
    fa34:	0000db0a 	andeq	sp, r0, sl, lsl #22
    fa38:	10000200 	andne	r0, r0, r0, lsl #4
    fa3c:	0000505c 	andeq	r5, r0, ip, asr r0
    fa40:	01560510 	cmpeq	r6, r0, lsl r5
    fa44:	0000062c 	andeq	r0, r0, ip, lsr #12
    fa48:	00517911 	subseq	r7, r1, r1, lsl r9
    fa4c:	01590500 	cmpeq	r9, r0, lsl #10
    fa50:	00000177 	andeq	r0, r0, r7, ror r1
    fa54:	50c01100 	sbcpl	r1, r0, r0, lsl #2
    fa58:	5a050000 	bpl	14fa60 <_Min_Stack_Size+0x14f860>
    fa5c:	00005d01 	andeq	r5, r0, r1, lsl #26
    fa60:	53110400 	tstpl	r1, #0, 8
    fa64:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
    fa68:	0177015b 	cmneq	r7, fp, asr r1
    fa6c:	11080000 	mrsne	r0, (UNDEF: 8)
    fa70:	000051c1 	andeq	r5, r0, r1, asr #3
    fa74:	2c015c05 	stccs	12, cr5, [r1], {5}
    fa78:	0c000006 	stceq	0, cr0, [r0], {6}
    fa7c:	77040f00 	strvc	r0, [r4, -r0, lsl #30]
    fa80:	10000001 	andne	r0, r0, r1
    fa84:	000052cf 	andeq	r5, r0, pc, asr #5
    fa88:	01600550 	cmneq	r0, r0, asr r5
    fa8c:	000006cf 	andeq	r0, r0, pc, asr #13
    fa90:	0052c211 	subseq	ip, r2, r1, lsl r2
    fa94:	01630500 	cmneq	r3, r0, lsl #10
    fa98:	000004ab 	andeq	r0, r0, fp, lsr #9
    fa9c:	52541100 	subspl	r1, r4, #0, 2
    faa0:	64050000 	strvs	r0, [r5], #-0
    faa4:	00010301 	andeq	r0, r1, r1, lsl #6
    faa8:	20110400 	andscs	r0, r1, r0, lsl #8
    faac:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    fab0:	01030165 	tsteq	r3, r5, ror #2
    fab4:	110c0000 	mrsne	r0, (UNDEF: 12)
    fab8:	00005345 	andeq	r5, r0, r5, asr #6
    fabc:	03016605 	movweq	r6, #5637	; 0x1605
    fac0:	14000001 	strne	r0, [r0], #-1
    fac4:	00530a11 	subseq	r0, r3, r1, lsl sl
    fac8:	01670500 	cmneq	r7, r0, lsl #10
    facc:	000006cf 	andeq	r0, r0, pc, asr #13
    fad0:	52e8111c 	rscpl	r1, r8, #28, 2
    fad4:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
    fad8:	00005d01 	andeq	r5, r0, r1, lsl #26
    fadc:	8c112400 	cfldrshi	mvf2, [r1], {-0}
    fae0:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    fae4:	01030169 	tsteq	r3, r9, ror #2
    fae8:	11280000 			; <UNDEFINED> instruction: 0x11280000
    faec:	00005011 	andeq	r5, r0, r1, lsl r0
    faf0:	03016a05 	movweq	r6, #6661	; 0x1a05
    faf4:	30000001 	andcc	r0, r0, r1
    faf8:	00507b11 	subseq	r7, r0, r1, lsl fp
    fafc:	016b0500 	cmneq	fp, r0, lsl #10
    fb00:	00000103 	andeq	r0, r0, r3, lsl #2
    fb04:	4fed1138 	svcmi	0x00ed1138
    fb08:	6c050000 	stcvs	0, cr0, [r5], {-0}
    fb0c:	00010301 	andeq	r0, r1, r1, lsl #6
    fb10:	d6114000 	ldrle	r4, [r1], -r0
    fb14:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
    fb18:	0103016d 	tsteq	r3, sp, ror #2
    fb1c:	00480000 	subeq	r0, r8, r0
    fb20:	0004b109 	andeq	fp, r4, r9, lsl #2
    fb24:	0006df00 	andeq	sp, r6, r0, lsl #30
    fb28:	00db0a00 	sbcseq	r0, fp, r0, lsl #20
    fb2c:	00070000 	andeq	r0, r7, r0
    fb30:	05ea040f 	strbeq	r0, [sl, #1039]!	; 0x40f
    fb34:	f0160000 			; <UNDEFINED> instruction: 0xf0160000
    fb38:	14000006 	strne	r0, [r0], #-6
    fb3c:	0000035d 	andeq	r0, r0, sp, asr r3
    fb40:	e5040f00 	str	r0, [r4, #-3840]	; 0xfffff100
    fb44:	0f000006 	svceq	0x00000006
    fb48:	00059804 	andeq	r9, r5, r4, lsl #16
    fb4c:	8d040f00 	stchi	15, cr0, [r4, #-0]
    fb50:	16000001 	strne	r0, [r0], -r1
    fb54:	0000070d 	andeq	r0, r0, sp, lsl #14
    fb58:	00005d14 	andeq	r5, r0, r4, lsl sp
    fb5c:	040f0000 	streq	r0, [pc], #-0	; fb64 <_Min_Stack_Size+0xf964>
    fb60:	00000713 	andeq	r0, r0, r3, lsl r7
    fb64:	0702040f 	streq	r0, [r2, -pc, lsl #8]
    fb68:	040f0000 	streq	r0, [pc], #-0	; fb70 <_Min_Stack_Size+0xf970>
    fb6c:	00000632 	andeq	r0, r0, r2, lsr r6
    fb70:	00570c04 	subseq	r0, r7, r4, lsl #24
    fb74:	6b7b0100 	blvs	1ecff7c <_Min_Stack_Size+0x1ecfd7c>
    fb78:	0d000000 	stceq	0, cr0, [r0, #-0]
    fb7c:	0000575f 	andeq	r5, r0, pc, asr r7
    fb80:	4f7d0108 	svcmi	0x007d0108
    fb84:	0c000007 	stceq	0, cr0, [r0], {7}
    fb88:	000057cb 	andeq	r5, r0, fp, asr #15
    fb8c:	00418f01 	subeq	r8, r1, r1, lsl #30
    fb90:	0c000000 	stceq	0, cr0, [r0], {-0}
    fb94:	0000524f 	andeq	r5, r0, pc, asr #4
    fb98:	074f9201 	strbeq	r9, [pc, -r1, lsl #4]
    fb9c:	00040000 	andeq	r0, r4, r0
    fba0:	072a040f 	streq	r0, [sl, -pc, lsl #8]!
    fba4:	66040000 	strvs	r0, [r4], -r0
    fba8:	01000057 	qaddeq	r0, r7, r0
    fbac:	00072a93 	muleq	r7, r3, sl
    fbb0:	57b81700 	ldrpl	r1, [r8, r0, lsl #14]!
    fbb4:	d2010000 	andle	r0, r1, #0
    fbb8:	0000007d 	andeq	r0, r0, sp, ror r0
    fbbc:	00079901 	andeq	r9, r7, r1, lsl #18
    fbc0:	576c1800 	strbpl	r1, [ip, -r0, lsl #16]!
    fbc4:	d2010000 	andle	r0, r1, #0
    fbc8:	0000035d 	andeq	r0, r0, sp, asr r3
    fbcc:	01007319 	tsteq	r0, r9, lsl r3
    fbd0:	00071fd2 	ldrdeq	r1, [r7], -r2
    fbd4:	00701a00 	rsbseq	r1, r0, r0, lsl #20
    fbd8:	04abd401 	strteq	sp, [fp], #1025	; 0x401
    fbdc:	b01b0000 	andslt	r0, fp, r0
    fbe0:	01000057 	qaddeq	r0, r7, r0
    fbe4:	0004abd4 	ldrdeq	sl, [r4], -r4
    fbe8:	021c0000 	andseq	r0, ip, #0
    fbec:	01000057 	qaddeq	r0, r7, r0
    fbf0:	00007def 	andeq	r7, r0, pc, ror #27
    fbf4:	00085800 	andeq	r5, r8, r0, lsl #16
    fbf8:	0000bc08 	andeq	fp, r0, r8, lsl #24
    fbfc:	b89c0100 	ldmlt	ip, {r8}
    fc00:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    fc04:	0000576c 	andeq	r5, r0, ip, ror #14
    fc08:	035def01 	cmpeq	sp, #1, 30
    fc0c:	0bf00000 	bleq	ffc0fc14 <BootRAM+0xeb803b5>
    fc10:	731e0000 	tstvc	lr, #0
    fc14:	1fef0100 	svcne	0x00ef0100
    fc18:	50000007 	andpl	r0, r0, r7
    fc1c:	1f00000c 	svcne	0x0000000c
    fc20:	f1010070 	setend	le
    fc24:	000008b8 			; <UNDEFINED> instruction: 0x000008b8
    fc28:	00000c71 	andeq	r0, r0, r1, ror ip
    fc2c:	0100721f 	tsteq	r0, pc, lsl r2
    fc30:	0008b8f1 	strdeq	fp, [r8], -r1
    fc34:	000cb000 	andeq	fp, ip, r0
    fc38:	74701f00 	ldrbtvc	r1, [r0], #-3840	; 0xfffff100
    fc3c:	f2010072 	vqadd.s8	q0, <illegal reg q0.5>, q9
    fc40:	000004ab 	andeq	r0, r0, fp, lsr #9
    fc44:	00000d34 	andeq	r0, r0, r4, lsr sp
    fc48:	0057d820 	subseq	sp, r7, r0, lsr #16
    fc4c:	abf20100 	blge	ffc90054 <BootRAM+0xec007f5>
    fc50:	54000004 	strpl	r0, [r0], #-4
    fc54:	2000000d 	andcs	r0, r0, sp
    fc58:	00005b4d 	andeq	r5, r0, sp, asr #22
    fc5c:	005df301 	subseq	pc, sp, r1, lsl #6
    fc60:	0d670000 	stcleq	0, cr0, [r7, #-0]
    fc64:	c5200000 	strgt	r0, [r0, #-0]!
    fc68:	01000057 	qaddeq	r0, r7, r0
    fc6c:	00071ff5 	strdeq	r1, [r7], -r5
    fc70:	000d8a00 	andeq	r8, sp, r0, lsl #20
    fc74:	0f402100 	svceq	0x00402100
    fc78:	083e0000 	ldmdaeq	lr!, {}	; <UNPREDICTABLE>
    fc7c:	72220000 	eorvc	r0, r2, #0
    fc80:	01006d65 	tsteq	r0, r5, ror #26
    fc84:	005d0109 	subseq	r0, sp, r9, lsl #2
    fc88:	0df50000 	ldcleq	0, cr0, [r5]
    fc8c:	23000000 	movwcs	r0, #0
    fc90:	00000760 	andeq	r0, r0, r0, ror #14
    fc94:	0800088e 	stmdaeq	r0, {r1, r2, r3, r7, fp}
    fc98:	00000f68 	andeq	r0, r0, r8, ror #30
    fc9c:	24012a01 	strcs	r2, [r1], #-2561	; 0xfffff5ff
    fca0:	0000077b 	andeq	r0, r0, fp, ror r7
    fca4:	00000e93 	muleq	r0, r3, lr
    fca8:	00077024 	andeq	r7, r7, r4, lsr #32
    fcac:	000ee900 	andeq	lr, lr, r0, lsl #18
    fcb0:	0f682500 	svceq	0x00682500
    fcb4:	84260000 	strthi	r0, [r6], #-0
    fcb8:	1d000007 	stcne	0, cr0, [r0, #-28]	; 0xffffffe4
    fcbc:	2600000f 	strcs	r0, [r0], -pc
    fcc0:	0000078d 	andeq	r0, r0, sp, lsl #15
    fcc4:	00000f55 	andeq	r0, r0, r5, asr pc
    fcc8:	00089e27 	andeq	r9, r8, r7, lsr #28
    fccc:	0008e008 	andeq	lr, r8, r8
    fcd0:	00089100 	andeq	r9, r8, r0, lsl #2
    fcd4:	50012800 	andpl	r2, r1, r0, lsl #16
    fcd8:	28007602 	stmdacs	r0, {r1, r9, sl, ip, sp, lr}
    fcdc:	75025101 	strvc	r5, [r2, #-257]	; 0xfffffeff
    fce0:	b4270000 	strtlt	r0, [r7], #-0
    fce4:	e0080008 	and	r0, r8, r8
    fce8:	a5000008 	strge	r0, [r0, #-8]
    fcec:	28000008 	stmdacs	r0, {r3}
    fcf0:	76025001 	strvc	r5, [r2], -r1
    fcf4:	0a290000 	beq	a4fcfc <_Min_Stack_Size+0xa4fafc>
    fcf8:	e0080009 	and	r0, r8, r9
    fcfc:	28000008 	stmdacs	r0, {r3}
    fd00:	76025001 	strvc	r5, [r2], -r1
    fd04:	00000000 	andeq	r0, r0, r0
    fd08:	55040f00 	strpl	r0, [r4, #-3840]	; 0xfffff100
    fd0c:	2a000007 	bcs	fd30 <_Min_Stack_Size+0xfb30>
    fd10:	00005789 	andeq	r5, r0, r9, lsl #15
    fd14:	08b8c701 	ldmeq	r8!, {r0, r8, r9, sl, lr, pc}
    fd18:	03050000 	movweq	r0, #20480	; 0x5000
    fd1c:	200000ec 	andcs	r0, r0, ip, ror #1
    fd20:	00579c2a 	subseq	r9, r7, sl, lsr #24
    fd24:	abca0100 	blge	ff29012c <BootRAM+0xe2008cd>
    fd28:	05000004 	streq	r0, [r0, #-4]
    fd2c:	0000f003 	andeq	pc, r0, r3
    fd30:	57d02b20 	ldrbpl	r2, [r0, r0, lsr #22]
    fd34:	57d00000 	ldrbpl	r0, [r0, r0]
    fd38:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    fd3c:	000d3300 	andeq	r3, sp, r0, lsl #6
    fd40:	54000400 	strpl	r0, [r0], #-1024	; 0xfffffc00
    fd44:	04000034 	streq	r0, [r0], #-52	; 0xffffffcc
    fd48:	0057e201 	subseq	lr, r7, r1, lsl #4
    fd4c:	58960c00 	ldmpl	r6, {sl, fp}
    fd50:	536e0000 	cmnpl	lr, #0
    fd54:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    fd58:	04040800 	streq	r0, [r4], #-2048	; 0xfffff800
    fd5c:	67970000 	ldrvs	r0, [r7, r0]
    fd60:	04020000 	streq	r0, [r2], #-0
    fd64:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    fd68:	57130300 	ldrpl	r0, [r3, -r0, lsl #6]
    fd6c:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
    fd70:	00000037 	andeq	r0, r0, r7, lsr r0
    fd74:	ce070404 	cdpgt	4, 0, cr0, cr7, cr4, {0}
    fd78:	04000001 	streq	r0, [r0], #-1
    fd7c:	00b80508 	adcseq	r0, r8, r8, lsl #10
    fd80:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    fd84:	0002f804 	andeq	pc, r2, r4, lsl #16
    fd88:	06010400 	streq	r0, [r1], -r0, lsl #8
    fd8c:	00000192 	muleq	r0, r2, r1
    fd90:	90080104 	andls	r0, r8, r4, lsl #2
    fd94:	04000001 	streq	r0, [r0], #-1
    fd98:	00950502 	addseq	r0, r5, r2, lsl #10
    fd9c:	02040000 	andeq	r0, r4, #0
    fda0:	0001f207 	andeq	pc, r1, r7, lsl #4
    fda4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    fda8:	000000bd 	strheq	r0, [r0], -sp
    fdac:	c9070404 	stmdbgt	r7, {r2, sl}
    fdb0:	04000001 	streq	r0, [r0], #-1
    fdb4:	01c40708 	biceq	r0, r4, r8, lsl #14
    fdb8:	cb030000 	blgt	cfdc0 <_Min_Stack_Size+0xcfbc0>
    fdbc:	03000051 	movweq	r0, #81	; 0x51
    fdc0:	00002507 	andeq	r2, r0, r7, lsl #10
    fdc4:	51ba0300 			; <UNDEFINED> instruction: 0x51ba0300
    fdc8:	2c040000 	stccs	0, cr0, [r4], {-0}
    fdcc:	00000068 	andeq	r0, r0, r8, rrx
    fdd0:	0052a403 	subseq	sl, r2, r3, lsl #8
    fdd4:	68720400 	ldmdavs	r2!, {sl}^
    fdd8:	05000000 	streq	r0, [r0, #-0]
    fddc:	00005187 	andeq	r5, r0, r7, lsl #3
    fde0:	37016502 	strcc	r6, [r1, -r2, lsl #10]
    fde4:	06000000 	streq	r0, [r0], -r0
    fde8:	c9a60404 	stmibgt	r6!, {r2, sl}
    fdec:	07000000 	streq	r0, [r0, -r0]
    fdf0:	00005181 	andeq	r5, r0, r1, lsl #3
    fdf4:	009ea804 	addseq	sl, lr, r4, lsl #16
    fdf8:	cf070000 	svcgt	0x00070000
    fdfc:	04000050 	streq	r0, [r0], #-80	; 0xffffffb0
    fe00:	0000c9a9 	andeq	ip, r0, r9, lsr #19
    fe04:	53080000 	movwpl	r0, #32768	; 0x8000
    fe08:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
    fe0c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    fe10:	000000d9 	ldrdeq	r0, [r0], -r9
    fe14:	04040003 	streq	r0, [r4], #-3
    fe18:	00005907 	andeq	r5, r0, r7, lsl #18
    fe1c:	04080a00 	streq	r0, [r8], #-2560	; 0xfffff600
    fe20:	000101a3 	andeq	r0, r1, r3, lsr #3
    fe24:	528e0b00 	addpl	r0, lr, #0, 22
    fe28:	a5040000 	strge	r0, [r4, #-0]
    fe2c:	00000025 	andeq	r0, r0, r5, lsr #32
    fe30:	52960b00 	addspl	r0, r6, #0, 22
    fe34:	aa040000 	bge	10fe3c <_Min_Stack_Size+0x10fc3c>
    fe38:	000000aa 	andeq	r0, r0, sl, lsr #1
    fe3c:	2d030004 	stccs	0, cr0, [r3, #-16]
    fe40:	04000052 	streq	r0, [r0], #-82	; 0xffffffae
    fe44:	0000e0ab 	andeq	lr, r0, fp, lsr #1
    fe48:	50a00300 	adcpl	r0, r0, r0, lsl #6
    fe4c:	af040000 	svcge	0x00040000
    fe50:	0000007d 	andeq	r0, r0, sp, ror r0
    fe54:	040d040c 	streq	r0, [sp], #-1036	; 0xfffffbf4
    fe58:	0000011f 	andeq	r0, r0, pc, lsl r1
    fe5c:	99080104 	stmdbls	r8, {r2, r8}
    fe60:	03000001 	movweq	r0, #1
    fe64:	000052e0 	andeq	r5, r0, r0, ror #5
    fe68:	006f1605 	rsbeq	r1, pc, r5, lsl #12
    fe6c:	a90e0000 	stmdbge	lr, {}	; <UNPREDICTABLE>
    fe70:	18000050 	stmdane	r0, {r4, r6}
    fe74:	01842d05 	orreq	r2, r4, r5, lsl #26
    fe78:	4e0b0000 	cdpmi	0, 0, cr0, cr11, cr0, {0}
    fe7c:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
    fe80:	0001842f 	andeq	r8, r1, pc, lsr #8
    fe84:	5f0f0000 	svcpl	0x000f0000
    fe88:	3005006b 	andcc	r0, r5, fp, rrx
    fe8c:	00000025 	andeq	r0, r0, r5, lsr #32
    fe90:	52800b04 	addpl	r0, r0, #4, 22	; 0x1000
    fe94:	30050000 	andcc	r0, r5, r0
    fe98:	00000025 	andeq	r0, r0, r5, lsr #32
    fe9c:	509a0b08 	addspl	r0, sl, r8, lsl #22
    fea0:	30050000 	andcc	r0, r5, r0
    fea4:	00000025 	andeq	r0, r0, r5, lsr #32
    fea8:	52fb0b0c 	rscspl	r0, fp, #12, 22	; 0x3000
    feac:	30050000 	andcc	r0, r5, r0
    feb0:	00000025 	andeq	r0, r0, r5, lsr #32
    feb4:	785f0f10 	ldmdavc	pc, {r4, r8, r9, sl, fp}^	; <UNPREDICTABLE>
    feb8:	8a310500 	bhi	c512c0 <_Min_Stack_Size+0xc510c0>
    febc:	14000001 	strne	r0, [r0], #-1
    fec0:	31040d00 	tstcc	r4, r0, lsl #26
    fec4:	08000001 	stmdaeq	r0, {r0}
    fec8:	00000126 	andeq	r0, r0, r6, lsr #2
    fecc:	0000019a 	muleq	r0, sl, r1
    fed0:	0000d909 	andeq	sp, r0, r9, lsl #18
    fed4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    fed8:	000050ca 	andeq	r5, r0, sl, asr #1
    fedc:	13350524 	teqne	r5, #36, 10	; 0x9000000
    fee0:	0b000002 	bleq	fef0 <_Min_Stack_Size+0xfcf0>
    fee4:	0000502e 	andeq	r5, r0, lr, lsr #32
    fee8:	00253705 	eoreq	r3, r5, r5, lsl #14
    feec:	0b000000 	bleq	fef4 <_Min_Stack_Size+0xfcf4>
    fef0:	000052b3 			; <UNDEFINED> instruction: 0x000052b3
    fef4:	00253805 	eoreq	r3, r5, r5, lsl #16
    fef8:	0b040000 	bleq	10ff00 <_Min_Stack_Size+0x10fd00>
    fefc:	0000503d 	andeq	r5, r0, sp, lsr r0
    ff00:	00253905 	eoreq	r3, r5, r5, lsl #18
    ff04:	0b080000 	bleq	20ff0c <_Min_Stack_Size+0x20fd0c>
    ff08:	00005358 	andeq	r5, r0, r8, asr r3
    ff0c:	00253a05 	eoreq	r3, r5, r5, lsl #20
    ff10:	0b0c0000 	bleq	30ff18 <_Min_Stack_Size+0x30fd18>
    ff14:	000051a6 	andeq	r5, r0, r6, lsr #3
    ff18:	00253b05 	eoreq	r3, r5, r5, lsl #22
    ff1c:	0b100000 	bleq	40ff24 <_Min_Stack_Size+0x40fd24>
    ff20:	00005196 	muleq	r0, r6, r1
    ff24:	00253c05 	eoreq	r3, r5, r5, lsl #24
    ff28:	0b140000 	bleq	50ff30 <_Min_Stack_Size+0x50fd30>
    ff2c:	00005300 	andeq	r5, r0, r0, lsl #6
    ff30:	00253d05 	eoreq	r3, r5, r5, lsl #26
    ff34:	0b180000 	bleq	60ff3c <_Min_Stack_Size+0x60fd3c>
    ff38:	00005215 	andeq	r5, r0, r5, lsl r2
    ff3c:	00253e05 	eoreq	r3, r5, r5, lsl #28
    ff40:	0b1c0000 	bleq	70ff48 <_Min_Stack_Size+0x70fd48>
    ff44:	00005324 	andeq	r5, r0, r4, lsr #6
    ff48:	00253f05 	eoreq	r3, r5, r5, lsl #30
    ff4c:	00200000 	eoreq	r0, r0, r0
    ff50:	00521f0e 	subseq	r1, r2, lr, lsl #30
    ff54:	73050800 	movwvc	r0, #22528	; 0x5800
    ff58:	00000238 	andeq	r0, r0, r8, lsr r2
    ff5c:	0033a10b 	eorseq	sl, r3, fp, lsl #2
    ff60:	38740500 	ldmdacc	r4!, {r8, sl}^
    ff64:	00000002 	andeq	r0, r0, r2
    ff68:	0057ca0b 	subseq	ip, r7, fp, lsl #20
    ff6c:	25750500 	ldrbcs	r0, [r5, #-1280]!	; 0xfffffb00
    ff70:	04000000 	streq	r0, [r0], #-0
    ff74:	53040d00 	movwpl	r0, #19712	; 0x4d00
    ff78:	10000000 	andne	r0, r0, r0
    ff7c:	000052d4 	ldrdeq	r5, [r0], -r4
    ff80:	01720560 	cmneq	r2, r0, ror #10
    ff84:	0000036a 	andeq	r0, r0, sl, ror #6
    ff88:	0052ac11 	subseq	sl, r2, r1, lsl ip
    ff8c:	01760500 	cmneq	r6, r0, lsl #10
    ff90:	00000025 	andeq	r0, r0, r5, lsr #32
    ff94:	55ed1100 	strbpl	r1, [sp, #256]!	; 0x100
    ff98:	7b050000 	blvc	14ffa0 <_Min_Stack_Size+0x14fda0>
    ff9c:	00059201 	andeq	r9, r5, r1, lsl #4
    ffa0:	fd110400 	ldc2	4, cr0, [r1, #-0]
    ffa4:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
    ffa8:	0592017b 	ldreq	r0, [r2, #379]	; 0x17b
    ffac:	11080000 	mrsne	r0, (UNDEF: 8)
    ffb0:	000056b8 			; <UNDEFINED> instruction: 0x000056b8
    ffb4:	92017b05 	andls	r7, r1, #5120	; 0x1400
    ffb8:	0c000005 	stceq	0, cr0, [r0], {5}
    ffbc:	00526111 	subseq	r6, r2, r1, lsl r1
    ffc0:	017d0500 	cmneq	sp, r0, lsl #10
    ffc4:	00000025 	andeq	r0, r0, r5, lsr #32
    ffc8:	4fe21110 	svcmi	0x00e21110
    ffcc:	7f050000 	svcvc	0x00050000
    ffd0:	00011901 	andeq	r1, r1, r1, lsl #18
    ffd4:	af111400 	svcge	0x00111400
    ffd8:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
    ffdc:	00250181 	eoreq	r0, r5, r1, lsl #3
    ffe0:	11180000 	tstne	r8, r0
    ffe4:	000050e7 	andeq	r5, r0, r7, ror #1
    ffe8:	25018305 	strcs	r8, [r1, #-773]	; 0xfffffcfb
    ffec:	1c000000 	stcne	0, cr0, [r0], {-0}
    fff0:	00526611 	subseq	r6, r2, r1, lsl r6
    fff4:	01840500 	orreq	r0, r4, r0, lsl #10
    fff8:	000004dc 	ldrdeq	r0, [r0], -ip
    fffc:	6d5f1220 	lfmvs	f1, 2, [pc, #-128]	; ff84 <_Min_Stack_Size+0xfd84>
   10000:	86050070 			; <UNDEFINED> instruction: 0x86050070
   10004:	0006df01 	andeq	sp, r6, r1, lsl #30
   10008:	76112400 	ldrvc	r2, [r1], -r0, lsl #8
   1000c:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   10010:	06f00188 	ldrbteq	r0, [r0], r8, lsl #3
   10014:	11280000 			; <UNDEFINED> instruction: 0x11280000
   10018:	000050b1 	strheq	r5, [r0], -r1
   1001c:	25018a05 	strcs	r8, [r1, #-2565]	; 0xfffff5fb
   10020:	2c000000 	stccs	0, cr0, [r0], {-0}
   10024:	0050f911 	subseq	pc, r0, r1, lsl r9	; <UNPREDICTABLE>
   10028:	018d0500 	orreq	r0, sp, r0, lsl #10
   1002c:	00000025 	andeq	r0, r0, r5, lsr #32
   10030:	50731130 	rsbspl	r1, r3, r0, lsr r1
   10034:	8e050000 	cdphi	0, 0, cr0, cr5, cr0, {0}
   10038:	00011901 	andeq	r1, r1, r1, lsl #18
   1003c:	01113400 	tsteq	r1, r0, lsl #8
   10040:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
   10044:	06f60190 	usateq	r0, #22, r0, lsl #3
   10048:	11380000 	teqne	r8, r0
   1004c:	0000532f 	andeq	r5, r0, pc, lsr #6
   10050:	fc019105 	stc2	1, cr9, [r1], {5}
   10054:	3c000006 	stccc	0, cr0, [r0], {6}
   10058:	00516c11 	subseq	r6, r1, r1, lsl ip
   1005c:	01920500 	orrseq	r0, r2, r0, lsl #10
   10060:	00000119 	andeq	r0, r0, r9, lsl r1
   10064:	53141140 	tstpl	r4, #64, 2
   10068:	95050000 	strls	r0, [r5, #-0]
   1006c:	00070d01 	andeq	r0, r7, r1, lsl #26
   10070:	54114400 	ldrpl	r4, [r1], #-1024	; 0xfffffc00
   10074:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   10078:	0557019d 	ldrbeq	r0, [r7, #-413]	; 0xfffffe63
   1007c:	11480000 	mrsne	r0, (UNDEF: 72)
   10080:	00005047 	andeq	r5, r0, r7, asr #32
   10084:	92019e05 	andls	r9, r1, #5, 28	; 0x50
   10088:	54000005 	strpl	r0, [r0], #-5
   1008c:	0051a011 	subseq	sl, r1, r1, lsl r0
   10090:	019f0500 	orrseq	r0, pc, r0, lsl #10
   10094:	00000719 	andeq	r0, r0, r9, lsl r7
   10098:	4ffc1158 	svcmi	0x00fc1158
   1009c:	a0050000 	andge	r0, r5, r0
   100a0:	00011901 	andeq	r1, r1, r1, lsl #18
   100a4:	0d005c00 	stceq	12, cr5, [r0, #-0]
   100a8:	00023e04 	andeq	r3, r2, r4, lsl #28
   100ac:	52380e00 	eorspl	r0, r8, #0, 28
   100b0:	05680000 	strbeq	r0, [r8, #-0]!
   100b4:	00049ab3 			; <UNDEFINED> instruction: 0x00049ab3
   100b8:	705f0f00 	subsvc	r0, pc, r0, lsl #30
   100bc:	38b40500 	ldmcc	r4!, {r8, sl}
   100c0:	00000002 	andeq	r0, r0, r2
   100c4:	00725f0f 	rsbseq	r5, r2, pc, lsl #30
   100c8:	0025b505 	eoreq	fp, r5, r5, lsl #10
   100cc:	0f040000 	svceq	0x00040000
   100d0:	0500775f 	streq	r7, [r0, #-1887]	; 0xfffff8a1
   100d4:	000025b6 			; <UNDEFINED> instruction: 0x000025b6
   100d8:	630b0800 	movwvs	r0, #47104	; 0xb800
   100dc:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   100e0:	00005ab7 			; <UNDEFINED> instruction: 0x00005ab7
   100e4:	f50b0c00 			; <UNDEFINED> instruction: 0xf50b0c00
   100e8:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   100ec:	00005ab8 			; <UNDEFINED> instruction: 0x00005ab8
   100f0:	5f0f0e00 	svcpl	0x000f0e00
   100f4:	05006662 	streq	r6, [r0, #-1634]	; 0xfffff99e
   100f8:	000213b9 			; <UNDEFINED> instruction: 0x000213b9
   100fc:	080b1000 	stmdaeq	fp, {ip}
   10100:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   10104:	000025ba 			; <UNDEFINED> instruction: 0x000025ba
   10108:	eb0b1800 	bl	2d6110 <_Min_Stack_Size+0x2d5f10>
   1010c:	0500000d 	streq	r0, [r0, #-13]
   10110:	00036abd 			; <UNDEFINED> instruction: 0x00036abd
   10114:	4c0b1c00 	stcmi	12, cr1, [fp], {-0}
   10118:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   1011c:	000117c1 	andeq	r1, r1, r1, asr #15
   10120:	870b2000 	strhi	r2, [fp, -r0]
   10124:	0500003a 	streq	r0, [r0, #-58]	; 0xffffffc6
   10128:	0004b8c3 	andeq	fp, r4, r3, asr #17
   1012c:	e20b2400 	and	r2, fp, #0, 8
   10130:	05000039 	streq	r0, [r0, #-57]	; 0xffffffc7
   10134:	0004e7c5 	andeq	lr, r4, r5, asr #15
   10138:	9e0b2800 	cdpls	8, 0, cr2, cr11, cr0, {0}
   1013c:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   10140:	00050bc8 	andeq	r0, r5, r8, asr #23
   10144:	3e0b2c00 	cdpcc	12, 0, cr2, cr11, cr0, {0}
   10148:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
   1014c:	000525c9 	andeq	r2, r5, r9, asr #11
   10150:	5f0f3000 	svcpl	0x000f3000
   10154:	05006275 	streq	r6, [r0, #-629]	; 0xfffffd8b
   10158:	000213cc 	andeq	r1, r2, ip, asr #7
   1015c:	5f0f3400 	svcpl	0x000f3400
   10160:	05007075 	streq	r7, [r0, #-117]	; 0xffffff8b
   10164:	000238cd 	andeq	r3, r2, sp, asr #17
   10168:	5f0f3c00 	svcpl	0x000f3c00
   1016c:	05007275 	streq	r7, [r0, #-629]	; 0xfffffd8b
   10170:	000025ce 	andeq	r2, r0, lr, asr #11
   10174:	370b4000 	strcc	r4, [fp, -r0]
   10178:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   1017c:	00052bd1 	ldrdeq	r2, [r5], -r1
   10180:	1e0b4400 	cfcpysne	mvf4, mvf11
   10184:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
   10188:	00053bd2 	ldrdeq	r3, [r5], -r2
   1018c:	5f0f4700 	svcpl	0x000f4700
   10190:	0500626c 	streq	r6, [r0, #-620]	; 0xfffffd94
   10194:	000213d5 	ldrdeq	r1, [r2], -r5
   10198:	6a0b4800 	bvs	2e21a0 <_Min_Stack_Size+0x2e1fa0>
   1019c:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   101a0:	000025d8 	ldrdeq	r2, [r0], -r8
   101a4:	4c0b5000 	stcmi	0, cr5, [fp], {-0}
   101a8:	0500005b 	streq	r0, [r0, #-91]	; 0xffffffa5
   101ac:	000088d9 	ldrdeq	r8, [r0], -r9
   101b0:	3a0b5400 	bcc	2e51b8 <_Min_Stack_Size+0x2e4fb8>
   101b4:	05000035 	streq	r0, [r0, #-53]	; 0xffffffcb
   101b8:	00010ce0 	andeq	r0, r1, r0, ror #25
   101bc:	400b5800 	andmi	r5, fp, r0, lsl #16
   101c0:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   101c4:	000101e2 	andeq	r0, r1, r2, ror #3
   101c8:	8e0b5c00 	cdphi	12, 0, cr5, cr11, cr0, {0}
   101cc:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
   101d0:	000025e3 	andeq	r2, r0, r3, ror #11
   101d4:	13006400 	movwne	r6, #1024	; 0x400
   101d8:	00000025 	andeq	r0, r0, r5, lsr #32
   101dc:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
   101e0:	00036a14 	andeq	r6, r3, r4, lsl sl
   101e4:	01171400 	tsteq	r7, r0, lsl #8
   101e8:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
   101ec:	14000001 	strne	r0, [r0], #-1
   101f0:	00000025 	andeq	r0, r0, r5, lsr #32
   101f4:	9a040d00 	bls	1135fc <_Min_Stack_Size+0x1133fc>
   101f8:	13000004 	movwne	r0, #4
   101fc:	00000025 	andeq	r0, r0, r5, lsr #32
   10200:	000004dc 	ldrdeq	r0, [r0], -ip
   10204:	00036a14 	andeq	r6, r3, r4, lsl sl
   10208:	01171400 	tsteq	r7, r0, lsl #8
   1020c:	dc140000 	ldcle	0, cr0, [r4], {-0}
   10210:	14000004 	strne	r0, [r0], #-4
   10214:	00000025 	andeq	r0, r0, r5, lsr #32
   10218:	e2040d00 	and	r0, r4, #0, 26
   1021c:	15000004 	strne	r0, [r0, #-4]
   10220:	0000011f 	andeq	r0, r0, pc, lsl r1
   10224:	04be040d 	ldrteq	r0, [lr], #1037	; 0x40d
   10228:	93130000 	tstls	r3, #0
   1022c:	0b000000 	bleq	10234 <_Min_Stack_Size+0x10034>
   10230:	14000005 	strne	r0, [r0], #-5
   10234:	0000036a 	andeq	r0, r0, sl, ror #6
   10238:	00011714 	andeq	r1, r1, r4, lsl r7
   1023c:	00931400 	addseq	r1, r3, r0, lsl #8
   10240:	25140000 	ldrcs	r0, [r4, #-0]
   10244:	00000000 	andeq	r0, r0, r0
   10248:	04ed040d 	strbteq	r0, [sp], #1037	; 0x40d
   1024c:	25130000 	ldrcs	r0, [r3, #-0]
   10250:	25000000 	strcs	r0, [r0, #-0]
   10254:	14000005 	strne	r0, [r0], #-5
   10258:	0000036a 	andeq	r0, r0, sl, ror #6
   1025c:	00011714 	andeq	r1, r1, r4, lsl r7
   10260:	040d0000 	streq	r0, [sp], #-0
   10264:	00000511 	andeq	r0, r0, r1, lsl r5
   10268:	00005308 	andeq	r5, r0, r8, lsl #6
   1026c:	00053b00 	andeq	r3, r5, r0, lsl #22
   10270:	00d90900 	sbcseq	r0, r9, r0, lsl #18
   10274:	00020000 	andeq	r0, r2, r0
   10278:	00005308 	andeq	r5, r0, r8, lsl #6
   1027c:	00054b00 	andeq	r4, r5, r0, lsl #22
   10280:	00d90900 	sbcseq	r0, r9, r0, lsl #18
   10284:	00000000 	andeq	r0, r0, r0
   10288:	00522605 	subseq	r2, r2, r5, lsl #12
   1028c:	011d0500 	tsteq	sp, r0, lsl #10
   10290:	00000370 	andeq	r0, r0, r0, ror r3
   10294:	005b0b10 	subseq	r0, fp, r0, lsl fp
   10298:	21050c00 	tstcs	r5, r0, lsl #24
   1029c:	00058c01 	andeq	r8, r5, r1, lsl #24
   102a0:	524e1100 	subpl	r1, lr, #0, 2
   102a4:	23050000 	movwcs	r0, #20480	; 0x5000
   102a8:	00058c01 	andeq	r8, r5, r1, lsl #24
   102ac:	06110000 	ldreq	r0, [r1], -r0
   102b0:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
   102b4:	00250124 	eoreq	r0, r5, r4, lsr #2
   102b8:	11040000 	mrsne	r0, (UNDEF: 4)
   102bc:	0000520f 	andeq	r5, r0, pc, lsl #4
   102c0:	92012505 	andls	r2, r1, #20971520	; 0x1400000
   102c4:	08000005 	stmdaeq	r0, {r0, r2}
   102c8:	57040d00 	strpl	r0, [r4, -r0, lsl #26]
   102cc:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
   102d0:	00054b04 	andeq	r4, r5, r4, lsl #22
   102d4:	4fda1000 	svcmi	0x00da1000
   102d8:	05180000 	ldreq	r0, [r8, #-0]
   102dc:	05da013d 	ldrbeq	r0, [sl, #317]	; 0x13d
   102e0:	88110000 	ldmdahi	r1, {}	; <UNPREDICTABLE>
   102e4:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   102e8:	05da013e 	ldrbeq	r0, [sl, #318]	; 0x13e
   102ec:	11000000 	mrsne	r0, (UNDEF: 0)
   102f0:	000052bc 			; <UNDEFINED> instruction: 0x000052bc
   102f4:	da013f05 	ble	5ff10 <_Min_Stack_Size+0x5fd10>
   102f8:	06000005 	streq	r0, [r0], -r5
   102fc:	0052db11 	subseq	sp, r2, r1, lsl fp
   10300:	01400500 	cmpeq	r0, r0, lsl #10
   10304:	00000061 	andeq	r0, r0, r1, rrx
   10308:	5249110c 	subpl	r1, r9, #12, 2
   1030c:	43050000 	movwmi	r0, #20480	; 0x5000
   10310:	00007601 	andeq	r7, r0, r1, lsl #12
   10314:	08001000 	stmdaeq	r0, {ip}
   10318:	00000061 	andeq	r0, r0, r1, rrx
   1031c:	000005ea 	andeq	r0, r0, sl, ror #11
   10320:	0000d909 	andeq	sp, r0, r9, lsl #18
   10324:	10000200 	andne	r0, r0, r0, lsl #4
   10328:	0000505c 	andeq	r5, r0, ip, asr r0
   1032c:	01560510 	cmpeq	r6, r0, lsl r5
   10330:	0000062c 	andeq	r0, r0, ip, lsr #12
   10334:	00517911 	subseq	r7, r1, r1, lsl r9
   10338:	01590500 	cmpeq	r9, r0, lsl #10
   1033c:	00000184 	andeq	r0, r0, r4, lsl #3
   10340:	50c01100 	sbcpl	r1, r0, r0, lsl #2
   10344:	5a050000 	bpl	15034c <_Min_Stack_Size+0x15014c>
   10348:	00002501 	andeq	r2, r0, r1, lsl #10
   1034c:	53110400 	tstpl	r1, #0, 8
   10350:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
   10354:	0184015b 	orreq	r0, r4, fp, asr r1
   10358:	11080000 	mrsne	r0, (UNDEF: 8)
   1035c:	000051c1 	andeq	r5, r0, r1, asr #3
   10360:	2c015c05 	stccs	12, cr5, [r1], {5}
   10364:	0c000006 	stceq	0, cr0, [r0], {6}
   10368:	84040d00 	strhi	r0, [r4], #-3328	; 0xfffff300
   1036c:	10000001 	andne	r0, r0, r1
   10370:	000052cf 	andeq	r5, r0, pc, asr #5
   10374:	01600550 	cmneq	r0, r0, asr r5
   10378:	000006cf 	andeq	r0, r0, pc, asr #13
   1037c:	0052c211 	subseq	ip, r2, r1, lsl r2
   10380:	01630500 	cmneq	r3, r0, lsl #10
   10384:	00000119 	andeq	r0, r0, r9, lsl r1
   10388:	52541100 	subspl	r1, r4, #0, 2
   1038c:	64050000 	strvs	r0, [r5], #-0
   10390:	00010101 	andeq	r0, r1, r1, lsl #2
   10394:	20110400 	andscs	r0, r1, r0, lsl #8
   10398:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   1039c:	01010165 	tsteq	r1, r5, ror #2
   103a0:	110c0000 	mrsne	r0, (UNDEF: 12)
   103a4:	00005345 	andeq	r5, r0, r5, asr #6
   103a8:	01016605 	tsteq	r1, r5, lsl #12
   103ac:	14000001 	strne	r0, [r0], #-1
   103b0:	00530a11 	subseq	r0, r3, r1, lsl sl
   103b4:	01670500 	cmneq	r7, r0, lsl #10
   103b8:	000006cf 	andeq	r0, r0, pc, asr #13
   103bc:	52e8111c 	rscpl	r1, r8, #28, 2
   103c0:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
   103c4:	00002501 	andeq	r2, r0, r1, lsl #10
   103c8:	8c112400 	cfldrshi	mvf2, [r1], {-0}
   103cc:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   103d0:	01010169 	tsteq	r1, r9, ror #2
   103d4:	11280000 			; <UNDEFINED> instruction: 0x11280000
   103d8:	00005011 	andeq	r5, r0, r1, lsl r0
   103dc:	01016a05 	tsteq	r1, r5, lsl #20
   103e0:	30000001 	andcc	r0, r0, r1
   103e4:	00507b11 	subseq	r7, r0, r1, lsl fp
   103e8:	016b0500 	cmneq	fp, r0, lsl #10
   103ec:	00000101 	andeq	r0, r0, r1, lsl #2
   103f0:	4fed1138 	svcmi	0x00ed1138
   103f4:	6c050000 	stcvs	0, cr0, [r5], {-0}
   103f8:	00010101 	andeq	r0, r1, r1, lsl #2
   103fc:	d6114000 	ldrle	r4, [r1], -r0
   10400:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   10404:	0101016d 	tsteq	r1, sp, ror #2
   10408:	00480000 	subeq	r0, r8, r0
   1040c:	00011f08 	andeq	r1, r1, r8, lsl #30
   10410:	0006df00 	andeq	sp, r6, r0, lsl #30
   10414:	00d90900 	sbcseq	r0, r9, r0, lsl #18
   10418:	00070000 	andeq	r0, r7, r0
   1041c:	05ea040d 	strbeq	r0, [sl, #1037]!	; 0x40d
   10420:	f0160000 			; <UNDEFINED> instruction: 0xf0160000
   10424:	14000006 	strne	r0, [r0], #-6
   10428:	0000036a 	andeq	r0, r0, sl, ror #6
   1042c:	e5040d00 	str	r0, [r4, #-3328]	; 0xfffff300
   10430:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
   10434:	00059804 	andeq	r9, r5, r4, lsl #16
   10438:	9a040d00 	bls	113840 <_Min_Stack_Size+0x113640>
   1043c:	16000001 	strne	r0, [r0], -r1
   10440:	0000070d 	andeq	r0, r0, sp, lsl #14
   10444:	00002514 	andeq	r2, r0, r4, lsl r5
   10448:	040d0000 	streq	r0, [sp], #-0
   1044c:	00000713 	andeq	r0, r0, r3, lsl r7
   10450:	0702040d 	streq	r0, [r2, -sp, lsl #8]
   10454:	040d0000 	streq	r0, [sp], #-0
   10458:	00000632 	andeq	r0, r0, r2, lsr r6
   1045c:	00540503 	subseq	r0, r4, r3, lsl #10
   10460:	2a280600 	bcs	a11c68 <_Min_Stack_Size+0xa11a68>
   10464:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
   10468:	000053cc 	andeq	r5, r0, ip, asr #7
   1046c:	41000704 	tstmi	r0, r4, lsl #14
   10470:	17000007 	strne	r0, [r0, -r7]
   10474:	00005414 	andeq	r5, r0, r4, lsl r4
   10478:	00000117 	andeq	r0, r0, r7, lsl r1
   1047c:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
   10480:	08000052 	stmdaeq	r0, {r1, r4, r6}
   10484:	00054b35 	andeq	r4, r5, r5, lsr fp
   10488:	52040d00 	andpl	r0, r4, #0, 26
   1048c:	18000007 	stmdane	r0, {r0, r1, r2}
   10490:	0053ce03 	subseq	ip, r3, r3, lsl #28
   10494:	1f620600 	svcne	0x00620600
   10498:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
   1049c:	000058ca 	andeq	r5, r0, sl, asr #17
   104a0:	83180908 	tsthi	r8, #8, 18	; 0x20000
   104a4:	0b000007 	bleq	104c8 <_Min_Stack_Size+0x102c8>
   104a8:	00005904 	andeq	r5, r0, r4, lsl #18
   104ac:	074c1909 	strbeq	r1, [ip, -r9, lsl #18]
   104b0:	0b000000 	bleq	104b8 <_Min_Stack_Size+0x102b8>
   104b4:	0000591a 	andeq	r5, r0, sl, lsl r9
   104b8:	002c1a09 	eoreq	r1, ip, r9, lsl #20
   104bc:	00040000 	andeq	r0, r4, r0
   104c0:	00592f0e 	subseq	r2, r9, lr, lsl #30
   104c4:	1c090c00 	stcne	12, cr0, [r9], {-0}
   104c8:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
   104cc:	00590d0b 	subseq	r0, r9, fp, lsl #26
   104d0:	b41d0900 	ldrlt	r0, [sp], #-2304	; 0xfffff700
   104d4:	00000007 	andeq	r0, r0, r7
   104d8:	00596f0b 	subseq	r6, r9, fp, lsl #30
   104dc:	251e0900 	ldrcs	r0, [lr, #-2304]	; 0xfffff700
   104e0:	04000000 	streq	r0, [r0], #-0
   104e4:	00588c0b 	subseq	r8, r8, fp, lsl #24
   104e8:	2c1f0900 			; <UNDEFINED> instruction: 0x2c1f0900
   104ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   104f0:	5e040d00 	cdppl	13, 0, cr0, cr4, cr0, {0}
   104f4:	04000007 	streq	r0, [r0], #-7
   104f8:	02fd0408 	rscseq	r0, sp, #8, 8	; 0x8000000
   104fc:	04040000 	streq	r0, [r4], #-0
   10500:	00585104 	subseq	r5, r8, r4, lsl #2
   10504:	58680e00 	stmdapl	r8!, {r9, sl, fp}^
   10508:	0a600000 	beq	1810510 <_Min_Stack_Size+0x1810310>
   1050c:	00087dc0 	andeq	r7, r8, r0, asr #27
   10510:	50640b00 	rsbpl	r0, r4, r0, lsl #22
   10514:	c20a0000 	andgt	r0, sl, #0
   10518:	00000025 	andeq	r0, r0, r5, lsr #32
   1051c:	59420b00 	stmdbpl	r2, {r8, r9, fp}^
   10520:	c30a0000 	movwgt	r0, #40960	; 0xa000
   10524:	00000025 	andeq	r0, r0, r5, lsr #32
   10528:	59410b04 	stmdbpl	r1, {r2, r8, r9, fp}^
   1052c:	c40a0000 	strgt	r0, [sl], #-0
   10530:	00000025 	andeq	r0, r0, r5, lsr #32
   10534:	58dc0b08 	ldmpl	ip, {r3, r8, r9, fp}^
   10538:	c50a0000 	strgt	r0, [sl, #-0]
   1053c:	00000025 	andeq	r0, r0, r5, lsr #32
   10540:	57cb0b0c 	strbpl	r0, [fp, ip, lsl #22]
   10544:	c60a0000 	strgt	r0, [sl], -r0
   10548:	00000025 	andeq	r0, r0, r5, lsr #32
   1054c:	65720f10 	ldrbvs	r0, [r2, #-3856]!	; 0xfffff0f0
   10550:	c70a0074 	smlsdxgt	sl, r4, r0, r0
   10554:	00000025 	andeq	r0, r0, r5, lsr #32
   10558:	15580b14 	ldrbne	r0, [r8, #-2836]	; 0xfffff4ec
   1055c:	c80a0000 	stmdagt	sl, {}	; <UNPREDICTABLE>
   10560:	0000011f 	andeq	r0, r0, pc, lsl r1
   10564:	59620b18 	stmdbpl	r2!, {r3, r4, r8, r9, fp}^
   10568:	c90a0000 	stmdbgt	sl, {}	; <UNPREDICTABLE>
   1056c:	0000011f 	andeq	r0, r0, pc, lsl r1
   10570:	59150b19 	ldmdbpl	r5, {r0, r3, r4, r8, r9, fp}
   10574:	ca0a0000 	bgt	29057c <_Min_Stack_Size+0x29037c>
   10578:	0000011f 	andeq	r0, r0, pc, lsl r1
   1057c:	75620f1a 	strbvc	r0, [r2, #-3866]!	; 0xfffff0e6
   10580:	cb0a0066 	blgt	290720 <_Min_Stack_Size+0x290520>
   10584:	0000087d 	andeq	r0, r0, sp, ror r8
   10588:	50020b1b 	andpl	r0, r2, fp, lsl fp
   1058c:	cc0a0000 	stcgt	0, cr0, [sl], {-0}
   10590:	0000088d 	andeq	r0, r0, sp, lsl #17
   10594:	587c0b43 	ldmdapl	ip!, {r0, r1, r6, r8, r9, fp}^
   10598:	ce0a0000 	cdpgt	0, 0, cr0, cr10, cr0, {0}
   1059c:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
   105a0:	59500b48 	ldmdbpl	r0, {r3, r6, r8, r9, fp}^
   105a4:	cf0a0000 	svcgt	0x000a0000
   105a8:	0000089d 	muleq	r0, sp, r8
   105ac:	58f50b50 	ldmpl	r5!, {r4, r6, r8, r9, fp}^
   105b0:	d00a0000 	andle	r0, sl, r0
   105b4:	00000025 	andeq	r0, r0, r5, lsr #32
   105b8:	1f080058 	svcne	0x00080058
   105bc:	8d000001 	stchi	0, cr0, [r0, #-4]
   105c0:	09000008 	stmdbeq	r0, {r3}
   105c4:	000000d9 	ldrdeq	r0, [r0], -r9
   105c8:	1f080027 	svcne	0x00080027
   105cc:	9d000001 	stcls	0, cr0, [r0, #-4]
   105d0:	09000008 	stmdbeq	r0, {r3}
   105d4:	000000d9 	ldrdeq	r0, [r0], -r9
   105d8:	1f080002 	svcne	0x00080002
   105dc:	ad000001 	stcge	0, cr0, [r0, #-4]
   105e0:	09000008 	stmdbeq	r0, {r3}
   105e4:	000000d9 	ldrdeq	r0, [r0], -r9
   105e8:	57190006 	ldrpl	r0, [r9, -r6]
   105ec:	01000059 	qaddeq	r0, r9, r0
   105f0:	000025af 	andeq	r2, r0, pc, lsr #11
   105f4:	00091400 	andeq	r1, r9, r0, lsl #8
   105f8:	0000c608 	andeq	ip, r0, r8, lsl #12
   105fc:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
   10600:	1a000009 	bne	1062c <_Min_Stack_Size+0x1042c>
   10604:	00727470 	rsbseq	r7, r2, r0, ror r4
   10608:	036aaf01 	cmneq	sl, #1, 30
   1060c:	0f680000 	svceq	0x00680000
   10610:	661a0000 	ldrvs	r0, [sl], -r0
   10614:	af010070 	svcge	0x00010070
   10618:	000009b7 			; <UNDEFINED> instruction: 0x000009b7
   1061c:	00000f9f 	muleq	r0, pc, pc	; <UNPREDICTABLE>
   10620:	6675621a 			; <UNDEFINED> instruction: 0x6675621a
   10624:	dcaf0100 	stfles	f0, [pc]	; 1062c <_Min_Stack_Size+0x1042c>
   10628:	d3000004 	movwle	r0, #4
   1062c:	1a00000f 	bne	10670 <_Min_Stack_Size+0x10470>
   10630:	006e656c 	rsbeq	r6, lr, ip, ror #10
   10634:	002caf01 	eoreq	sl, ip, r1, lsl #30
   10638:	10070000 	andne	r0, r7, r0
   1063c:	771b0000 	ldrvc	r0, [fp, -r0]
   10640:	25b50100 	ldrcs	r0, [r5, #256]!	; 0x100
   10644:	3b000000 	blcc	1064c <_Min_Stack_Size+0x1044c>
   10648:	1c000010 	stcne	0, cr0, [r0], {16}
   1064c:	00727265 	rsbseq	r7, r2, r5, ror #4
   10650:	09c4ed01 	stmibeq	r4, {r0, r8, sl, fp, sp, lr, pc}^
   10654:	801d0800 	andshi	r0, sp, r0, lsl #16
   10658:	a000000f 	andge	r0, r0, pc
   1065c:	1b000009 	blne	10688 <_Min_Stack_Size+0x10488>
   10660:	00727473 	rsbseq	r7, r2, r3, ror r4
   10664:	0238bb01 	eorseq	fp, r8, #1024	; 0x400
   10668:	10640000 	rsbne	r0, r4, r0
   1066c:	851e0000 	ldrhi	r0, [lr, #-0]
   10670:	01000058 	qaddeq	r0, r8, r0
   10674:	000025bc 			; <UNDEFINED> instruction: 0x000025bc
   10678:	1f5a0100 	svcne	0x005a0100
   1067c:	00005922 	andeq	r5, r0, r2, lsr #18
   10680:	0025c401 	eoreq	ip, r5, r1, lsl #8
   10684:	10ae0000 	adcne	r0, lr, r0
   10688:	80200000 	eorhi	r0, r0, r0
   1068c:	db080009 	blle	2106b8 <_Min_Stack_Size+0x2104b8>
   10690:	6100000c 	tstvs	r0, ip
   10694:	21000009 	tstcs	r0, r9
   10698:	79025001 	stmdbvc	r2, {r0, ip, lr}
   1069c:	8c200000 	stchi	0, cr0, [r0], #-0
   106a0:	e7080009 	str	r0, [r8, -r9]
   106a4:	7b00000c 	blvc	106dc <_Min_Stack_Size+0x104dc>
   106a8:	21000009 	tstcs	r0, r9
   106ac:	7b025001 	blvc	a46b8 <_Min_Stack_Size+0xa44b8>
   106b0:	52012100 	andpl	r2, r1, #0, 2
   106b4:	00007a02 	andeq	r7, r0, r2, lsl #20
   106b8:	0009a020 	andeq	sl, r9, r0, lsr #32
   106bc:	000cf208 	andeq	pc, ip, r8, lsl #4
   106c0:	00098f00 	andeq	r8, r9, r0, lsl #30
   106c4:	50012100 	andpl	r2, r1, r0, lsl #2
   106c8:	00007902 	andeq	r7, r0, r2, lsl #18
   106cc:	0009c422 	andeq	ip, r9, r2, lsr #8
   106d0:	000cfe08 	andeq	pc, ip, r8, lsl #28
   106d4:	50012100 	andpl	r2, r1, r0, lsl #2
   106d8:	00007902 	andeq	r7, r0, r2, lsl #18
   106dc:	09382200 	ldmdbeq	r8!, {r9, sp}
   106e0:	0d0a0800 	stceq	8, cr0, [sl, #-0]
   106e4:	01210000 			; <UNDEFINED> instruction: 0x01210000
   106e8:	00780251 	rsbseq	r0, r8, r1, asr r2
   106ec:	02520121 	subseq	r0, r2, #1073741832	; 0x40000008
   106f0:	00000075 	andeq	r0, r0, r5, ror r0
   106f4:	0741040d 	strbeq	r0, [r1, -sp, lsl #8]
   106f8:	e2190000 	ands	r0, r9, #0
   106fc:	01000058 	qaddeq	r0, r8, r0
   10700:	000025f6 	strdeq	r2, [r0], -r6
   10704:	0009dc00 	andeq	sp, r9, r0, lsl #24
   10708:	00010008 	andeq	r0, r1, r8
   1070c:	ea9c0100 	b	fe710b14 <BootRAM+0xd6812b5>
   10710:	1a00000a 	bne	10740 <_Min_Stack_Size+0x10540>
   10714:	00727470 	rsbseq	r7, r2, r0, ror r4
   10718:	036af601 	msreq	SPSR_fx, #1048576	; 0x100000
   1071c:	10d80000 	sbcsne	r0, r8, r0
   10720:	661a0000 	ldrvs	r0, [sl], -r0
   10724:	f6010070 			; <UNDEFINED> instruction: 0xf6010070
   10728:	000009b7 			; <UNDEFINED> instruction: 0x000009b7
   1072c:	00001104 	andeq	r1, r0, r4, lsl #2
   10730:	6f69751a 	svcvs	0x0069751a
   10734:	eaf60100 	b	ffd90b3c <BootRAM+0xed012dd>
   10738:	3000000a 	andcc	r0, r0, sl
   1073c:	1b000011 	blne	10788 <_Min_Stack_Size+0x10588>
   10740:	006e656c 	rsbeq	r6, lr, ip, ror #10
   10744:	002cfb01 	eoreq	pc, ip, r1, lsl #22
   10748:	114e0000 	mrsne	r0, (UNDEF: 78)
   1074c:	771b0000 	ldrvc	r0, [fp, -r0]
   10750:	25fc0100 	ldrbcs	r0, [ip, #256]!	; 0x100
   10754:	90000000 	andls	r0, r0, r0
   10758:	1b000011 	blne	107a4 <_Min_Stack_Size+0x105a4>
   1075c:	00766f69 	rsbseq	r6, r6, r9, ror #30
   10760:	07b4fd01 	ldreq	pc, [r4, r1, lsl #26]!
   10764:	11cf0000 	bicne	r0, pc, r0
   10768:	701b0000 	andsvc	r0, fp, r0
   1076c:	dcfe0100 	ldflee	f0, [lr]
   10770:	ee000004 	cdp	0, 0, cr0, cr0, cr4, {0}
   10774:	23000011 	movwcs	r0, #17
   10778:	00727265 	rsbseq	r7, r2, r5, ror #4
   1077c:	ae015201 	cdpge	2, 0, cr5, cr1, cr1, {0}
   10780:	1d08000a 	stcne	0, cr0, [r8, #-40]	; 0xffffffd8
   10784:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
   10788:	00000ad3 	ldrdeq	r0, [r0], -r3
   1078c:	72747324 	rsbsvc	r7, r4, #36, 6	; 0x90000000
   10790:	01150100 	tsteq	r5, r0, lsl #2
   10794:	00000238 	andeq	r0, r0, r8, lsr r2
   10798:	00001219 	andeq	r1, r0, r9, lsl r2
   1079c:	00588525 	subseq	r8, r8, r5, lsr #10
   107a0:	01160100 	tsteq	r6, r0, lsl #2
   107a4:	00000025 	andeq	r0, r0, r5, lsr #32
   107a8:	00001259 	andeq	r1, r0, r9, asr r2
   107ac:	00592225 	subseq	r2, r9, r5, lsr #4
   107b0:	011e0100 	tsteq	lr, r0, lsl #2
   107b4:	00000025 	andeq	r0, r0, r5, lsr #32
   107b8:	00001277 	andeq	r1, r0, r7, ror r2
   107bc:	000a3a20 	andeq	r3, sl, r0, lsr #20
   107c0:	000cdb08 	andeq	sp, ip, r8, lsl #22
   107c4:	000a9300 	andeq	r9, sl, r0, lsl #6
   107c8:	50012100 	andpl	r2, r1, r0, lsl #2
   107cc:	00007b02 	andeq	r7, r0, r2, lsl #22
   107d0:	000a4820 	andeq	r4, sl, r0, lsr #16
   107d4:	000ce708 	andeq	lr, ip, r8, lsl #14
   107d8:	000aae00 	andeq	sl, sl, r0, lsl #28
   107dc:	50012100 	andpl	r2, r1, r0, lsl #2
   107e0:	06549103 	ldrbeq	r9, [r4], -r3, lsl #2
   107e4:	02520121 	subseq	r0, r2, #1073741832	; 0x40000008
   107e8:	2000007a 	andcs	r0, r0, sl, ror r0
   107ec:	08000aa0 	stmdaeq	r0, {r5, r7, r9, fp}
   107f0:	00000cf2 	strdeq	r0, [r0], -r2
   107f4:	00000ac2 	andeq	r0, r0, r2, asr #21
   107f8:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
   107fc:	2200007b 	andcs	r0, r0, #123	; 0x7b
   10800:	08000aae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, fp}
   10804:	00000cfe 	strdeq	r0, [r0], -lr
   10808:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
   1080c:	0000007b 	andeq	r0, r0, fp, ror r0
   10810:	000a7222 	andeq	r7, sl, r2, lsr #4
   10814:	000d0a08 	andeq	r0, sp, r8, lsl #20
   10818:	51012100 	mrspl	r2, (UNDEF: 17)
   1081c:	21007902 	tstcs	r0, r2, lsl #18
   10820:	77025201 	strvc	r5, [r2, -r1, lsl #4]
   10824:	0d000000 	stceq	0, cr0, [r0, #-0]
   10828:	00078304 	andeq	r8, r7, r4, lsl #6
   1082c:	54222600 	strtpl	r2, [r2], #-1536	; 0xfffffa00
   10830:	da010000 	ble	50838 <_Min_Stack_Size+0x50638>
   10834:	00002501 	andeq	r2, r0, r1, lsl #10
   10838:	000adc00 	andeq	sp, sl, r0, lsl #24
   1083c:	00023c08 	andeq	r3, r2, r8, lsl #24
   10840:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
   10844:	2700000c 	strcs	r0, [r0, -ip]
   10848:	00000dec 	andeq	r0, r0, ip, ror #27
   1084c:	6a01da01 	bvs	87058 <_Min_Stack_Size+0x86e58>
   10850:	a1000003 	tstge	r0, r3
   10854:	28000012 	stmdacs	r0, {r1, r4}
   10858:	01007066 	tsteq	r0, r6, rrx
   1085c:	09b701da 	ldmibeq	r7!, {r1, r3, r4, r6, r7, r8}
   10860:	12d50000 	sbcsne	r0, r5, #0
   10864:	d7270000 	strle	r0, [r7, -r0]!
   10868:	01000058 	qaddeq	r0, r8, r0
   1086c:	04dc01da 	ldrbeq	r0, [ip], #474	; 0x1da
   10870:	12f30000 	rscsne	r0, r3, #0
   10874:	61290000 			; <UNDEFINED> instruction: 0x61290000
   10878:	da010070 	ble	50a40 <_Min_Stack_Size+0x50840>
   1087c:	00075301 	andeq	r5, r7, r1, lsl #6
   10880:	f4910300 			; <UNDEFINED> instruction: 0xf4910300
   10884:	6d66247e 	cfstrdvs	mvd2, [r6, #-504]!	; 0xfffffe08
   10888:	e0010074 	and	r0, r1, r4, ror r0
   1088c:	00011901 	andeq	r1, r1, r1, lsl #18
   10890:	00133500 	andseq	r3, r3, r0, lsl #10
   10894:	006e2400 	rsbeq	r2, lr, r0, lsl #8
   10898:	2501e101 	strcs	lr, [r1, #-257]	; 0xfffffeff
   1089c:	4c000000 	stcmi	0, cr0, [r0], {-0}
   108a0:	24000014 	strcs	r0, [r0], #-20	; 0xffffffec
   108a4:	e101006d 	tst	r1, sp, rrx
   108a8:	00002501 	andeq	r2, r0, r1, lsl #10
   108ac:	00148b00 	andseq	r8, r4, r0, lsl #22
   108b0:	70632400 	rsbvc	r2, r3, r0, lsl #8
   108b4:	01e20100 	mvneq	r0, r0, lsl #2
   108b8:	00000119 	andeq	r0, r0, r9, lsl r1
   108bc:	000014b3 			; <UNDEFINED> instruction: 0x000014b3
   108c0:	00585d25 	subseq	r5, r8, r5, lsr #26
   108c4:	01e30100 	mvneq	r0, r0, lsl #2
   108c8:	000004dc 	ldrdeq	r0, [r0], -ip
   108cc:	00001534 	andeq	r1, r0, r4, lsr r5
   108d0:	0059472a 	subseq	r4, r9, sl, lsr #14
   108d4:	01e40100 	mvneq	r0, r0, lsl #2
   108d8:	000007c8 	andeq	r0, r0, r8, asr #15
   108dc:	7ef89103 	nrmvce	f1, f3
   108e0:	0058d12a 	subseq	sp, r8, sl, lsr #2
   108e4:	01e70100 	mvneq	r0, r0, lsl #2
   108e8:	00000cd5 	ldrdeq	r0, [r0], -r5
   108ec:	09150306 	ldmdbeq	r5, {r1, r2, r8, r9}
   108f0:	2b9f0800 	blcs	fe7d28f8 <BootRAM+0xd743099>
   108f4:	00005857 	andeq	r5, r0, r7, asr r8
   108f8:	30028a01 	andcc	r8, r2, r1, lsl #20
   108fc:	2b08000c 	blcs	210934 <_Min_Stack_Size+0x210734>
   10900:	0000592a 	andeq	r5, r0, sl, lsr #18
   10904:	30028801 	andcc	r8, r2, r1, lsl #16
   10908:	2008000c 	andcs	r0, r8, ip
   1090c:	08000b40 	stmdaeq	r0, {r6, r8, r9, fp}
   10910:	000008ad 	andeq	r0, r0, sp, lsr #17
   10914:	00000bf4 	strdeq	r0, [r0], -r4
   10918:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
   1091c:	01210078 			; <UNDEFINED> instruction: 0x01210078
   10920:	00770251 	rsbseq	r0, r7, r1, asr r2
   10924:	02520121 	subseq	r0, r2, #1073741832	; 0x40000008
   10928:	0121007a 			; <UNDEFINED> instruction: 0x0121007a
   1092c:	007b0253 	rsbseq	r0, fp, r3, asr r2
   10930:	0b822000 	bleq	fe098938 <BootRAM+0xd0090d9>
   10934:	0d150800 	ldceq	8, cr0, [r5, #-0]
   10938:	0c0d0000 	stceq	0, cr0, [sp], {-0}
   1093c:	01210000 			; <UNDEFINED> instruction: 0x01210000
   10940:	00750250 	rsbseq	r0, r5, r0, asr r2
   10944:	01520121 	cmpeq	r2, r1, lsr #2
   10948:	d4200035 	strtle	r0, [r0], #-53	; 0xffffffcb
   1094c:	1508000b 	strne	r0, [r8, #-11]
   10950:	2600000d 	strcs	r0, [r0], -sp
   10954:	2100000c 	tstcs	r0, ip
   10958:	79025001 	stmdbvc	r2, {r0, ip, lr}
   1095c:	52012100 	andpl	r2, r1, #0, 2
   10960:	20003301 	andcs	r3, r0, r1, lsl #6
   10964:	08000c02 	stmdaeq	r0, {r1, sl, fp}
   10968:	00000d15 	andeq	r0, r0, r5, lsl sp
   1096c:	00000c42 	andeq	r0, r0, r2, asr #24
   10970:	05500121 	ldrbeq	r0, [r0, #-289]	; 0xfffffedf
   10974:	00a04003 	adceq	r4, r0, r3
   10978:	52012108 	andpl	r2, r1, #8, 2
   1097c:	20003601 	andcs	r3, r0, r1, lsl #12
   10980:	08000c1a 	stmdaeq	r0, {r1, r3, r4, sl, fp}
   10984:	00000d20 	andeq	r0, r0, r0, lsr #26
   10988:	00000c74 	andeq	r0, r0, r4, ror ip
   1098c:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
   10990:	01210078 			; <UNDEFINED> instruction: 0x01210078
   10994:	f8910351 			; <UNDEFINED> instruction: 0xf8910351
   10998:	5201217e 	andpl	r2, r1, #-2147483617	; 0x8000001f
   1099c:	21007702 	tstcs	r0, r2, lsl #14
   109a0:	03055301 	movweq	r5, #21249	; 0x5301
   109a4:	08000915 	stmdaeq	r0, {r0, r2, r4, r8, fp}
   109a8:	007d0221 	rsbseq	r0, sp, r1, lsr #4
   109ac:	7ef49103 	nrmvcs	f1, f3
   109b0:	0ce22000 	stcleq	0, cr2, [r2]
   109b4:	0d2b0800 	stceq	8, cr0, [fp, #-0]
   109b8:	0ca60000 	stceq	0, cr0, [r6]
   109bc:	01210000 			; <UNDEFINED> instruction: 0x01210000
   109c0:	00780250 	rsbseq	r0, r8, r0, asr r2
   109c4:	03510121 	cmpeq	r1, #1073741832	; 0x40000008
   109c8:	217ef891 			; <UNDEFINED> instruction: 0x217ef891
   109cc:	77025201 	strvc	r5, [r2, -r1, lsl #4]
   109d0:	53012100 	movwpl	r2, #4352	; 0x1100
   109d4:	09150305 	ldmdbeq	r5, {r0, r2, r8, r9}
   109d8:	02210800 	eoreq	r0, r1, #0, 16
   109dc:	9103007d 	tstls	r3, sp, ror r0
   109e0:	22007ef4 	andcs	r7, r0, #244, 28	; 0xf40
   109e4:	08000cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp}
   109e8:	00000cdb 	ldrdeq	r0, [r0], -fp
   109ec:	02510121 	subseq	r0, r1, #1073741832	; 0x40000008
   109f0:	00004008 	andeq	r4, r0, r8
   109f4:	00002513 	andeq	r2, r0, r3, lsl r5
   109f8:	000cd500 	andeq	sp, ip, r0, lsl #10
   109fc:	036a1400 	cmneq	sl, #0, 8
   10a00:	b7140000 	ldrlt	r0, [r4, -r0]
   10a04:	14000009 	strne	r0, [r0], #-9
   10a08:	000004dc 	ldrdeq	r0, [r0], -ip
   10a0c:	00002c14 	andeq	r2, r0, r4, lsl ip
   10a10:	040d0000 	streq	r0, [sp], #-0
   10a14:	00000cb7 			; <UNDEFINED> instruction: 0x00000cb7
   10a18:	0057022c 	subseq	r0, r7, ip, lsr #4
   10a1c:	00570200 	subseq	r0, r7, r0, lsl #4
   10a20:	010a0b00 	tsteq	sl, r0, lsl #22
   10a24:	0059682d 	subseq	r6, r9, sp, lsr #16
   10a28:	00596800 	subseq	r6, r9, r0, lsl #16
   10a2c:	2c170c00 	ldccs	12, cr0, [r7], {-0}
   10a30:	00005936 	andeq	r5, r0, r6, lsr r9
   10a34:	00005936 	andeq	r5, r0, r6, lsr r9
   10a38:	2c010d0b 	stccs	13, cr0, [r1], {11}
   10a3c:	000056fa 	strdeq	r5, [r0], -sl
   10a40:	000056fa 	strdeq	r5, [r0], -sl
   10a44:	2d010c0b 	stccs	12, cr0, [r1, #-44]	; 0xffffffd4
   10a48:	00005874 	andeq	r5, r0, r4, ror r8
   10a4c:	00005874 	andeq	r5, r0, r4, ror r8
   10a50:	ee2d180c 	cdp	8, 2, cr1, cr13, cr12, {0}
   10a54:	ee000058 	mcr	0, 0, r0, cr0, cr8, {2}
   10a58:	0c000058 	stceq	0, cr0, [r0], {88}	; 0x58
   10a5c:	58492d15 	stmdapl	r9, {r0, r2, r4, r8, sl, fp, sp}^
   10a60:	58490000 	stmdapl	r9, {}^	; <UNPREDICTABLE>
   10a64:	e40a0000 	str	r0, [sl], #-0
   10a68:	0058fa2d 	subseq	pc, r8, sp, lsr #20
   10a6c:	0058fa00 	subseq	pc, r8, r0, lsl #20
   10a70:	00dd0a00 	sbcseq	r0, sp, r0, lsl #20
   10a74:	00000b37 	andeq	r0, r0, r7, lsr fp
   10a78:	36b30004 	ldrtcc	r0, [r3], r4
   10a7c:	01040000 	mrseq	r0, (UNDEF: 4)
   10a80:	000057e2 	andeq	r5, r0, r2, ror #15
   10a84:	00598e0c 	subseq	r8, r9, ip, lsl #28
   10a88:	00536e00 	subseq	r6, r3, r0, lsl #28
   10a8c:	000d1800 	andeq	r1, sp, r0, lsl #16
   10a90:	0003dc08 	andeq	sp, r3, r8, lsl #24
   10a94:	006ab400 	rsbeq	fp, sl, r0, lsl #8
   10a98:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
   10a9c:	00746e69 	rsbseq	r6, r4, r9, ror #28
   10aa0:	00571303 	subseq	r1, r7, r3, lsl #6
   10aa4:	37d80200 	ldrbcc	r0, [r8, r0, lsl #4]
   10aa8:	04000000 	streq	r0, [r0], #-0
   10aac:	01ce0704 	biceq	r0, lr, r4, lsl #14
   10ab0:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
   10ab4:	0000b805 	andeq	fp, r0, r5, lsl #16
   10ab8:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
   10abc:	000002f8 	strdeq	r0, [r0], -r8
   10ac0:	92060104 	andls	r0, r6, #4, 2
   10ac4:	04000001 	streq	r0, [r0], #-1
   10ac8:	01900801 	orrseq	r0, r0, r1, lsl #16
   10acc:	02040000 	andeq	r0, r4, #0
   10ad0:	00009505 	andeq	r9, r0, r5, lsl #10
   10ad4:	07020400 	streq	r0, [r2, -r0, lsl #8]
   10ad8:	000001f2 	strdeq	r0, [r0], -r2
   10adc:	bd050404 	cfstrslt	mvf0, [r5, #-16]
   10ae0:	04000000 	streq	r0, [r0], #-0
   10ae4:	01c90704 	biceq	r0, r9, r4, lsl #14
   10ae8:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
   10aec:	0001c407 	andeq	ip, r1, r7, lsl #8
   10af0:	51cb0300 	bicpl	r0, fp, r0, lsl #6
   10af4:	07030000 	streq	r0, [r3, -r0]
   10af8:	00000025 	andeq	r0, r0, r5, lsr #32
   10afc:	0051ba03 	subseq	fp, r1, r3, lsl #20
   10b00:	682c0400 	stmdavs	ip!, {sl}
   10b04:	03000000 	movweq	r0, #0
   10b08:	000052a4 	andeq	r5, r0, r4, lsr #5
   10b0c:	00687204 	rsbeq	r7, r8, r4, lsl #4
   10b10:	87050000 	strhi	r0, [r5, -r0]
   10b14:	02000051 	andeq	r0, r0, #81	; 0x51
   10b18:	00370165 	eorseq	r0, r7, r5, ror #2
   10b1c:	04060000 	streq	r0, [r6], #-0
   10b20:	00c9a604 	sbceq	sl, r9, r4, lsl #12
   10b24:	81070000 	mrshi	r0, (UNDEF: 7)
   10b28:	04000051 	streq	r0, [r0], #-81	; 0xffffffaf
   10b2c:	00009ea8 	andeq	r9, r0, r8, lsr #29
   10b30:	50cf0700 	sbcpl	r0, pc, r0, lsl #14
   10b34:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
   10b38:	000000c9 	andeq	r0, r0, r9, asr #1
   10b3c:	00530800 	subseq	r0, r3, r0, lsl #16
   10b40:	00d90000 	sbcseq	r0, r9, r0
   10b44:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
   10b48:	03000000 	movweq	r0, #0
   10b4c:	07040400 	streq	r0, [r4, -r0, lsl #8]
   10b50:	00000059 	andeq	r0, r0, r9, asr r0
   10b54:	a304080a 	movwge	r0, #18442	; 0x480a
   10b58:	00000101 	andeq	r0, r0, r1, lsl #2
   10b5c:	00528e0b 	subseq	r8, r2, fp, lsl #28
   10b60:	25a50400 	strcs	r0, [r5, #1024]!	; 0x400
   10b64:	00000000 	andeq	r0, r0, r0
   10b68:	0052960b 	subseq	r9, r2, fp, lsl #12
   10b6c:	aaaa0400 	bge	fea91b74 <BootRAM+0xda02315>
   10b70:	04000000 	streq	r0, [r0], #-0
   10b74:	522d0300 	eorpl	r0, sp, #0, 6
   10b78:	ab040000 	blge	110b80 <_Min_Stack_Size+0x110980>
   10b7c:	000000e0 	andeq	r0, r0, r0, ror #1
   10b80:	0050a003 	subseq	sl, r0, r3
   10b84:	7daf0400 	cfstrsvc	mvf0, [pc]	; 10b8c <_Min_Stack_Size+0x1098c>
   10b88:	0c000000 	stceq	0, cr0, [r0], {-0}
   10b8c:	1f040d04 	svcne	0x00040d04
   10b90:	04000001 	streq	r0, [r0], #-1
   10b94:	01990801 	orrseq	r0, r9, r1, lsl #16
   10b98:	e0030000 	and	r0, r3, r0
   10b9c:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   10ba0:	00006f16 	andeq	r6, r0, r6, lsl pc
   10ba4:	50a90e00 	adcpl	r0, r9, r0, lsl #28
   10ba8:	05180000 	ldreq	r0, [r8, #-0]
   10bac:	0001842d 	andeq	r8, r1, sp, lsr #8
   10bb0:	524e0b00 	subpl	r0, lr, #0, 22
   10bb4:	2f050000 	svccs	0x00050000
   10bb8:	00000184 	andeq	r0, r0, r4, lsl #3
   10bbc:	6b5f0f00 	blvs	17d47c4 <_Min_Stack_Size+0x17d45c4>
   10bc0:	25300500 	ldrcs	r0, [r0, #-1280]!	; 0xfffffb00
   10bc4:	04000000 	streq	r0, [r0], #-0
   10bc8:	0052800b 	subseq	r8, r2, fp
   10bcc:	25300500 	ldrcs	r0, [r0, #-1280]!	; 0xfffffb00
   10bd0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   10bd4:	00509a0b 	subseq	r9, r0, fp, lsl #20
   10bd8:	25300500 	ldrcs	r0, [r0, #-1280]!	; 0xfffffb00
   10bdc:	0c000000 	stceq	0, cr0, [r0], {-0}
   10be0:	0052fb0b 	subseq	pc, r2, fp, lsl #22
   10be4:	25300500 	ldrcs	r0, [r0, #-1280]!	; 0xfffffb00
   10be8:	10000000 	andne	r0, r0, r0
   10bec:	00785f0f 	rsbseq	r5, r8, pc, lsl #30
   10bf0:	018a3105 	orreq	r3, sl, r5, lsl #2
   10bf4:	00140000 	andseq	r0, r4, r0
   10bf8:	0131040d 	teqeq	r1, sp, lsl #8
   10bfc:	26080000 	strcs	r0, [r8], -r0
   10c00:	9a000001 	bls	10c0c <_Min_Stack_Size+0x10a0c>
   10c04:	09000001 	stmdbeq	r0, {r0}
   10c08:	000000d9 	ldrdeq	r0, [r0], -r9
   10c0c:	ca0e0000 	bgt	390c14 <_Min_Stack_Size+0x390a14>
   10c10:	24000050 	strcs	r0, [r0], #-80	; 0xffffffb0
   10c14:	02133505 	andseq	r3, r3, #20971520	; 0x1400000
   10c18:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
   10c1c:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   10c20:	00002537 	andeq	r2, r0, r7, lsr r5
   10c24:	b30b0000 	movwlt	r0, #45056	; 0xb000
   10c28:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   10c2c:	00002538 	andeq	r2, r0, r8, lsr r5
   10c30:	3d0b0400 	cfstrscc	mvf0, [fp, #-0]
   10c34:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   10c38:	00002539 	andeq	r2, r0, r9, lsr r5
   10c3c:	580b0800 	stmdapl	fp, {fp}
   10c40:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
   10c44:	0000253a 	andeq	r2, r0, sl, lsr r5
   10c48:	a60b0c00 	strge	r0, [fp], -r0, lsl #24
   10c4c:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
   10c50:	0000253b 	andeq	r2, r0, fp, lsr r5
   10c54:	960b1000 	strls	r1, [fp], -r0
   10c58:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
   10c5c:	0000253c 	andeq	r2, r0, ip, lsr r5
   10c60:	000b1400 	andeq	r1, fp, r0, lsl #8
   10c64:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
   10c68:	0000253d 	andeq	r2, r0, sp, lsr r5
   10c6c:	150b1800 	strne	r1, [fp, #-2048]	; 0xfffff800
   10c70:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   10c74:	0000253e 	andeq	r2, r0, lr, lsr r5
   10c78:	240b1c00 	strcs	r1, [fp], #-3072	; 0xfffff400
   10c7c:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
   10c80:	0000253f 	andeq	r2, r0, pc, lsr r5
   10c84:	0e002000 	cdpeq	0, 0, cr2, cr0, cr0, {0}
   10c88:	0000521f 	andeq	r5, r0, pc, lsl r2
   10c8c:	38730508 	ldmdacc	r3!, {r3, r8, sl}^
   10c90:	0b000002 	bleq	10ca0 <_Min_Stack_Size+0x10aa0>
   10c94:	000033a1 	andeq	r3, r0, r1, lsr #7
   10c98:	02387405 	eorseq	r7, r8, #83886080	; 0x5000000
   10c9c:	0b000000 	bleq	10ca4 <_Min_Stack_Size+0x10aa4>
   10ca0:	000057ca 	andeq	r5, r0, sl, asr #15
   10ca4:	00257505 	eoreq	r7, r5, r5, lsl #10
   10ca8:	00040000 	andeq	r0, r4, r0
   10cac:	0053040d 	subseq	r0, r3, sp, lsl #8
   10cb0:	d4100000 	ldrle	r0, [r0], #-0
   10cb4:	60000052 	andvs	r0, r0, r2, asr r0
   10cb8:	6a017205 	bvs	6d4d4 <_Min_Stack_Size+0x6d2d4>
   10cbc:	11000003 	tstne	r0, r3
   10cc0:	000052ac 	andeq	r5, r0, ip, lsr #5
   10cc4:	25017605 	strcs	r7, [r1, #-1541]	; 0xfffff9fb
   10cc8:	00000000 	andeq	r0, r0, r0
   10ccc:	0055ed11 	subseq	lr, r5, r1, lsl sp
   10cd0:	017b0500 	cmneq	fp, r0, lsl #10
   10cd4:	00000592 	muleq	r0, r2, r5
   10cd8:	55fd1104 	ldrbpl	r1, [sp, #260]!	; 0x104
   10cdc:	7b050000 	blvc	150ce4 <_Min_Stack_Size+0x150ae4>
   10ce0:	00059201 	andeq	r9, r5, r1, lsl #4
   10ce4:	b8110800 	ldmdalt	r1, {fp}
   10ce8:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   10cec:	0592017b 	ldreq	r0, [r2, #379]	; 0x17b
   10cf0:	110c0000 	mrsne	r0, (UNDEF: 12)
   10cf4:	00005261 	andeq	r5, r0, r1, ror #4
   10cf8:	25017d05 	strcs	r7, [r1, #-3333]	; 0xfffff2fb
   10cfc:	10000000 	andne	r0, r0, r0
   10d00:	004fe211 	subeq	lr, pc, r1, lsl r2	; <UNPREDICTABLE>
   10d04:	017f0500 	cmneq	pc, r0, lsl #10
   10d08:	00000119 	andeq	r0, r0, r9, lsl r1
   10d0c:	51af1114 			; <UNDEFINED> instruction: 0x51af1114
   10d10:	81050000 	mrshi	r0, (UNDEF: 5)
   10d14:	00002501 	andeq	r2, r0, r1, lsl #10
   10d18:	e7111800 	ldr	r1, [r1, -r0, lsl #16]
   10d1c:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   10d20:	00250183 	eoreq	r0, r5, r3, lsl #3
   10d24:	111c0000 	tstne	ip, r0
   10d28:	00005266 	andeq	r5, r0, r6, ror #4
   10d2c:	dc018405 	cfstrsle	mvf8, [r1], {5}
   10d30:	20000004 	andcs	r0, r0, r4
   10d34:	706d5f12 	rsbvc	r5, sp, r2, lsl pc
   10d38:	01860500 	orreq	r0, r6, r0, lsl #10
   10d3c:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   10d40:	52761124 	rsbspl	r1, r6, #36, 2
   10d44:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
   10d48:	0006f001 	andeq	pc, r6, r1
   10d4c:	b1112800 	tstlt	r1, r0, lsl #16
   10d50:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   10d54:	0025018a 	eoreq	r0, r5, sl, lsl #3
   10d58:	112c0000 			; <UNDEFINED> instruction: 0x112c0000
   10d5c:	000050f9 	strdeq	r5, [r0], -r9
   10d60:	25018d05 	strcs	r8, [r1, #-3333]	; 0xfffff2fb
   10d64:	30000000 	andcc	r0, r0, r0
   10d68:	00507311 	subseq	r7, r0, r1, lsl r3
   10d6c:	018e0500 	orreq	r0, lr, r0, lsl #10
   10d70:	00000119 	andeq	r0, r0, r9, lsl r1
   10d74:	51011134 	tstpl	r1, r4, lsr r1
   10d78:	90050000 	andls	r0, r5, r0
   10d7c:	0006f601 	andeq	pc, r6, r1, lsl #12
   10d80:	2f113800 	svccs	0x00113800
   10d84:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
   10d88:	06fc0191 	usateq	r0, #28, r1, lsl #3
   10d8c:	113c0000 	teqne	ip, r0
   10d90:	0000516c 	andeq	r5, r0, ip, ror #2
   10d94:	19019205 	stmdbne	r1, {r0, r2, r9, ip, pc}
   10d98:	40000001 	andmi	r0, r0, r1
   10d9c:	00531411 	subseq	r1, r3, r1, lsl r4
   10da0:	01950500 	orrseq	r0, r5, r0, lsl #10
   10da4:	0000070d 	andeq	r0, r0, sp, lsl #14
   10da8:	50541144 	subspl	r1, r4, r4, asr #2
   10dac:	9d050000 	stcls	0, cr0, [r5, #-0]
   10db0:	00055701 	andeq	r5, r5, r1, lsl #14
   10db4:	47114800 	ldrmi	r4, [r1, -r0, lsl #16]
   10db8:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   10dbc:	0592019e 	ldreq	r0, [r2, #414]	; 0x19e
   10dc0:	11540000 	cmpne	r4, r0
   10dc4:	000051a0 	andeq	r5, r0, r0, lsr #3
   10dc8:	19019f05 	stmdbne	r1, {r0, r2, r8, r9, sl, fp, ip, pc}
   10dcc:	58000007 	stmdapl	r0, {r0, r1, r2}
   10dd0:	004ffc11 	subeq	pc, pc, r1, lsl ip	; <UNPREDICTABLE>
   10dd4:	01a00500 	lsleq	r0, r0, #10
   10dd8:	00000119 	andeq	r0, r0, r9, lsl r1
   10ddc:	040d005c 	streq	r0, [sp], #-92	; 0xffffffa4
   10de0:	0000023e 	andeq	r0, r0, lr, lsr r2
   10de4:	0052380e 	subseq	r3, r2, lr, lsl #16
   10de8:	b3056800 	movwlt	r6, #22528	; 0x5800
   10dec:	0000049a 	muleq	r0, sl, r4
   10df0:	00705f0f 	rsbseq	r5, r0, pc, lsl #30
   10df4:	0238b405 	eorseq	fp, r8, #83886080	; 0x5000000
   10df8:	0f000000 	svceq	0x00000000
   10dfc:	0500725f 	streq	r7, [r0, #-607]	; 0xfffffda1
   10e00:	000025b5 			; <UNDEFINED> instruction: 0x000025b5
   10e04:	5f0f0400 	svcpl	0x000f0400
   10e08:	b6050077 			; <UNDEFINED> instruction: 0xb6050077
   10e0c:	00000025 	andeq	r0, r0, r5, lsr #32
   10e10:	50630b08 	rsbpl	r0, r3, r8, lsl #22
   10e14:	b7050000 	strlt	r0, [r5, -r0]
   10e18:	0000005a 	andeq	r0, r0, sl, asr r0
   10e1c:	52f50b0c 	rscspl	r0, r5, #12, 22	; 0x3000
   10e20:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
   10e24:	0000005a 	andeq	r0, r0, sl, asr r0
   10e28:	625f0f0e 	subsvs	r0, pc, #14, 30	; 0x38
   10e2c:	b9050066 	stmdblt	r5, {r1, r2, r5, r6}
   10e30:	00000213 	andeq	r0, r0, r3, lsl r2
   10e34:	50080b10 	andpl	r0, r8, r0, lsl fp
   10e38:	ba050000 	blt	150e40 <_Min_Stack_Size+0x150c40>
   10e3c:	00000025 	andeq	r0, r0, r5, lsr #32
   10e40:	0deb0b18 			; <UNDEFINED> instruction: 0x0deb0b18
   10e44:	bd050000 	stclt	0, cr0, [r5, #-0]
   10e48:	0000036a 	andeq	r0, r0, sl, ror #6
   10e4c:	504c0b1c 	subpl	r0, ip, ip, lsl fp
   10e50:	c1050000 	mrsgt	r0, (UNDEF: 5)
   10e54:	00000117 	andeq	r0, r0, r7, lsl r1
   10e58:	3a870b20 	bcc	fe1d3ae0 <BootRAM+0xd144281>
   10e5c:	c3050000 	movwgt	r0, #20480	; 0x5000
   10e60:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
   10e64:	39e20b24 	stmibcc	r2!, {r2, r5, r8, r9, fp}^
   10e68:	c5050000 	strgt	r0, [r5, #-0]
   10e6c:	000004e7 	andeq	r0, r0, r7, ror #9
   10e70:	529e0b28 	addspl	r0, lr, #40, 22	; 0xa000
   10e74:	c8050000 	stmdagt	r5, {}	; <UNPREDICTABLE>
   10e78:	0000050b 	andeq	r0, r0, fp, lsl #10
   10e7c:	533e0b2c 	teqpl	lr, #44, 22	; 0xb000
   10e80:	c9050000 	stmdbgt	r5, {}	; <UNPREDICTABLE>
   10e84:	00000525 	andeq	r0, r0, r5, lsr #10
   10e88:	755f0f30 	ldrbvc	r0, [pc, #-3888]	; ff60 <_Min_Stack_Size+0xfd60>
   10e8c:	cc050062 	stcgt	0, cr0, [r5], {98}	; 0x62
   10e90:	00000213 	andeq	r0, r0, r3, lsl r2
   10e94:	755f0f34 	ldrbvc	r0, [pc, #-3892]	; ff68 <_Min_Stack_Size+0xfd68>
   10e98:	cd050070 	stcgt	0, cr0, [r5, #-448]	; 0xfffffe40
   10e9c:	00000238 	andeq	r0, r0, r8, lsr r2
   10ea0:	755f0f3c 	ldrbvc	r0, [pc, #-3900]	; ff6c <_Min_Stack_Size+0xfd6c>
   10ea4:	ce050072 	mcrgt	0, 0, r0, cr5, cr2, {3}
   10ea8:	00000025 	andeq	r0, r0, r5, lsr #32
   10eac:	50370b40 	eorspl	r0, r7, r0, asr #22
   10eb0:	d1050000 	mrsle	r0, (UNDEF: 5)
   10eb4:	0000052b 	andeq	r0, r0, fp, lsr #10
   10eb8:	531e0b44 	tstpl	lr, #68, 22	; 0x11000
   10ebc:	d2050000 	andle	r0, r5, #0
   10ec0:	0000053b 	andeq	r0, r0, fp, lsr r5
   10ec4:	6c5f0f47 	mrrcvs	15, 4, r0, pc, cr7	; <UNPREDICTABLE>
   10ec8:	d5050062 	strle	r0, [r5, #-98]	; 0xffffff9e
   10ecc:	00000213 	andeq	r0, r0, r3, lsl r2
   10ed0:	506a0b48 	rsbpl	r0, sl, r8, asr #22
   10ed4:	d8050000 	stmdale	r5, {}	; <UNPREDICTABLE>
   10ed8:	00000025 	andeq	r0, r0, r5, lsr #32
   10edc:	5b4c0b50 	blpl	1313c24 <_Min_Stack_Size+0x1313a24>
   10ee0:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
   10ee4:	00000088 	andeq	r0, r0, r8, lsl #1
   10ee8:	353a0b54 	ldrcc	r0, [sl, #-2900]!	; 0xfffff4ac
   10eec:	e0050000 	and	r0, r5, r0
   10ef0:	0000010c 	andeq	r0, r0, ip, lsl #2
   10ef4:	52400b58 	subpl	r0, r0, #88, 22	; 0x16000
   10ef8:	e2050000 	and	r0, r5, #0
   10efc:	00000101 	andeq	r0, r0, r1, lsl #2
   10f00:	518e0b5c 	orrpl	r0, lr, ip, asr fp
   10f04:	e3050000 	movw	r0, #20480	; 0x5000
   10f08:	00000025 	andeq	r0, r0, r5, lsr #32
   10f0c:	25130064 	ldrcs	r0, [r3, #-100]	; 0xffffff9c
   10f10:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
   10f14:	14000004 	strne	r0, [r0], #-4
   10f18:	0000036a 	andeq	r0, r0, sl, ror #6
   10f1c:	00011714 	andeq	r1, r1, r4, lsl r7
   10f20:	01191400 	tsteq	r9, r0, lsl #8
   10f24:	25140000 	ldrcs	r0, [r4, #-0]
   10f28:	00000000 	andeq	r0, r0, r0
   10f2c:	049a040d 	ldreq	r0, [sl], #1037	; 0x40d
   10f30:	25130000 	ldrcs	r0, [r3, #-0]
   10f34:	dc000000 	stcle	0, cr0, [r0], {-0}
   10f38:	14000004 	strne	r0, [r0], #-4
   10f3c:	0000036a 	andeq	r0, r0, sl, ror #6
   10f40:	00011714 	andeq	r1, r1, r4, lsl r7
   10f44:	04dc1400 	ldrbeq	r1, [ip], #1024	; 0x400
   10f48:	25140000 	ldrcs	r0, [r4, #-0]
   10f4c:	00000000 	andeq	r0, r0, r0
   10f50:	04e2040d 	strbteq	r0, [r2], #1037	; 0x40d
   10f54:	1f150000 	svcne	0x00150000
   10f58:	0d000001 	stceq	0, cr0, [r0, #-4]
   10f5c:	0004be04 	andeq	fp, r4, r4, lsl #28
   10f60:	00931300 	addseq	r1, r3, r0, lsl #6
   10f64:	050b0000 	streq	r0, [fp, #-0]
   10f68:	6a140000 	bvs	510f70 <_Min_Stack_Size+0x510d70>
   10f6c:	14000003 	strne	r0, [r0], #-3
   10f70:	00000117 	andeq	r0, r0, r7, lsl r1
   10f74:	00009314 	andeq	r9, r0, r4, lsl r3
   10f78:	00251400 	eoreq	r1, r5, r0, lsl #8
   10f7c:	0d000000 	stceq	0, cr0, [r0, #-0]
   10f80:	0004ed04 	andeq	lr, r4, r4, lsl #26
   10f84:	00251300 	eoreq	r1, r5, r0, lsl #6
   10f88:	05250000 	streq	r0, [r5, #-0]!
   10f8c:	6a140000 	bvs	510f94 <_Min_Stack_Size+0x510d94>
   10f90:	14000003 	strne	r0, [r0], #-3
   10f94:	00000117 	andeq	r0, r0, r7, lsl r1
   10f98:	11040d00 	tstne	r4, r0, lsl #26
   10f9c:	08000005 	stmdaeq	r0, {r0, r2}
   10fa0:	00000053 	andeq	r0, r0, r3, asr r0
   10fa4:	0000053b 	andeq	r0, r0, fp, lsr r5
   10fa8:	0000d909 	andeq	sp, r0, r9, lsl #18
   10fac:	08000200 	stmdaeq	r0, {r9}
   10fb0:	00000053 	andeq	r0, r0, r3, asr r0
   10fb4:	0000054b 	andeq	r0, r0, fp, asr #10
   10fb8:	0000d909 	andeq	sp, r0, r9, lsl #18
   10fbc:	05000000 	streq	r0, [r0, #-0]
   10fc0:	00005226 	andeq	r5, r0, r6, lsr #4
   10fc4:	70011d05 	andvc	r1, r1, r5, lsl #26
   10fc8:	10000003 	andne	r0, r0, r3
   10fcc:	00005b0b 	andeq	r5, r0, fp, lsl #22
   10fd0:	0121050c 			; <UNDEFINED> instruction: 0x0121050c
   10fd4:	0000058c 	andeq	r0, r0, ip, lsl #11
   10fd8:	00524e11 	subseq	r4, r2, r1, lsl lr
   10fdc:	01230500 			; <UNDEFINED> instruction: 0x01230500
   10fe0:	0000058c 	andeq	r0, r0, ip, lsl #11
   10fe4:	51061100 	mrspl	r1, (UNDEF: 22)
   10fe8:	24050000 	strcs	r0, [r5], #-0
   10fec:	00002501 	andeq	r2, r0, r1, lsl #10
   10ff0:	0f110400 	svceq	0x00110400
   10ff4:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   10ff8:	05920125 	ldreq	r0, [r2, #293]	; 0x125
   10ffc:	00080000 	andeq	r0, r8, r0
   11000:	0557040d 	ldrbeq	r0, [r7, #-1037]	; 0xfffffbf3
   11004:	040d0000 	streq	r0, [sp], #-0
   11008:	0000054b 	andeq	r0, r0, fp, asr #10
   1100c:	004fda10 	subeq	sp, pc, r0, lsl sl	; <UNPREDICTABLE>
   11010:	3d051800 	stccc	8, cr1, [r5, #-0]
   11014:	0005da01 	andeq	sp, r5, r1, lsl #20
   11018:	52881100 	addpl	r1, r8, #0, 2
   1101c:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
   11020:	0005da01 	andeq	sp, r5, r1, lsl #20
   11024:	bc110000 	ldclt	0, cr0, [r1], {-0}
   11028:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   1102c:	05da013f 	ldrbeq	r0, [sl, #319]	; 0x13f
   11030:	11060000 	mrsne	r0, (UNDEF: 6)
   11034:	000052db 	ldrdeq	r5, [r0], -fp
   11038:	61014005 	tstvs	r1, r5
   1103c:	0c000000 	stceq	0, cr0, [r0], {-0}
   11040:	00524911 	subseq	r4, r2, r1, lsl r9
   11044:	01430500 	cmpeq	r3, r0, lsl #10
   11048:	00000076 	andeq	r0, r0, r6, ror r0
   1104c:	61080010 	tstvs	r8, r0, lsl r0
   11050:	ea000000 	b	11058 <_Min_Stack_Size+0x10e58>
   11054:	09000005 	stmdbeq	r0, {r0, r2}
   11058:	000000d9 	ldrdeq	r0, [r0], -r9
   1105c:	5c100002 	ldcpl	0, cr0, [r0], {2}
   11060:	10000050 	andne	r0, r0, r0, asr r0
   11064:	2c015605 	stccs	6, cr5, [r1], {5}
   11068:	11000006 	tstne	r0, r6
   1106c:	00005179 	andeq	r5, r0, r9, ror r1
   11070:	84015905 	strhi	r5, [r1], #-2309	; 0xfffff6fb
   11074:	00000001 	andeq	r0, r0, r1
   11078:	0050c011 	subseq	ip, r0, r1, lsl r0
   1107c:	015a0500 	cmpeq	sl, r0, lsl #10
   11080:	00000025 	andeq	r0, r0, r5, lsr #32
   11084:	53531104 	cmppl	r3, #4, 2
   11088:	5b050000 	blpl	151090 <_Min_Stack_Size+0x150e90>
   1108c:	00018401 	andeq	r8, r1, r1, lsl #8
   11090:	c1110800 	tstgt	r1, r0, lsl #16
   11094:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
   11098:	062c015c 			; <UNDEFINED> instruction: 0x062c015c
   1109c:	000c0000 	andeq	r0, ip, r0
   110a0:	0184040d 	orreq	r0, r4, sp, lsl #8
   110a4:	cf100000 	svcgt	0x00100000
   110a8:	50000052 	andpl	r0, r0, r2, asr r0
   110ac:	cf016005 	svcgt	0x00016005
   110b0:	11000006 	tstne	r0, r6
   110b4:	000052c2 	andeq	r5, r0, r2, asr #5
   110b8:	19016305 	stmdbne	r1, {r0, r2, r8, r9, sp, lr}
   110bc:	00000001 	andeq	r0, r0, r1
   110c0:	00525411 	subseq	r5, r2, r1, lsl r4
   110c4:	01640500 	cmneq	r4, r0, lsl #10
   110c8:	00000101 	andeq	r0, r0, r1, lsl #2
   110cc:	50201104 	eorpl	r1, r0, r4, lsl #2
   110d0:	65050000 	strvs	r0, [r5, #-0]
   110d4:	00010101 	andeq	r0, r1, r1, lsl #2
   110d8:	45110c00 	ldrmi	r0, [r1, #-3072]	; 0xfffff400
   110dc:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
   110e0:	01010166 	tsteq	r1, r6, ror #2
   110e4:	11140000 	tstne	r4, r0
   110e8:	0000530a 	andeq	r5, r0, sl, lsl #6
   110ec:	cf016705 	svcgt	0x00016705
   110f0:	1c000006 	stcne	0, cr0, [r0], {6}
   110f4:	0052e811 	subseq	lr, r2, r1, lsl r8
   110f8:	01680500 	cmneq	r8, r0, lsl #10
   110fc:	00000025 	andeq	r0, r0, r5, lsr #32
   11100:	508c1124 	addpl	r1, ip, r4, lsr #2
   11104:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
   11108:	00010101 	andeq	r0, r1, r1, lsl #2
   1110c:	11112800 	tstne	r1, r0, lsl #16
   11110:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   11114:	0101016a 	tsteq	r1, sl, ror #2
   11118:	11300000 	teqne	r0, r0
   1111c:	0000507b 	andeq	r5, r0, fp, ror r0
   11120:	01016b05 	tsteq	r1, r5, lsl #22
   11124:	38000001 	stmdacc	r0, {r0}
   11128:	004fed11 	subeq	lr, pc, r1, lsl sp	; <UNPREDICTABLE>
   1112c:	016c0500 	cmneq	ip, r0, lsl #10
   11130:	00000101 	andeq	r0, r0, r1, lsl #2
   11134:	50d61140 	sbcspl	r1, r6, r0, asr #2
   11138:	6d050000 	stcvs	0, cr0, [r5, #-0]
   1113c:	00010101 	andeq	r0, r1, r1, lsl #2
   11140:	08004800 	stmdaeq	r0, {fp, lr}
   11144:	0000011f 	andeq	r0, r0, pc, lsl r1
   11148:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1114c:	0000d909 	andeq	sp, r0, r9, lsl #18
   11150:	0d000700 	stceq	7, cr0, [r0, #-0]
   11154:	0005ea04 	andeq	lr, r5, r4, lsl #20
   11158:	06f01600 	ldrbteq	r1, [r0], r0, lsl #12
   1115c:	6a140000 	bvs	511164 <_Min_Stack_Size+0x510f64>
   11160:	00000003 	andeq	r0, r0, r3
   11164:	06e5040d 	strbteq	r0, [r5], sp, lsl #8
   11168:	040d0000 	streq	r0, [sp], #-0
   1116c:	00000598 	muleq	r0, r8, r5
   11170:	019a040d 	orrseq	r0, sl, sp, lsl #8
   11174:	0d160000 	ldceq	0, cr0, [r6, #-0]
   11178:	14000007 	strne	r0, [r0], #-7
   1117c:	00000025 	andeq	r0, r0, r5, lsr #32
   11180:	13040d00 	movwne	r0, #19712	; 0x4d00
   11184:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
   11188:	00070204 	andeq	r0, r7, r4, lsl #4
   1118c:	32040d00 	andcc	r0, r4, #0, 26
   11190:	03000006 	movweq	r0, #6
   11194:	00005405 	andeq	r5, r0, r5, lsl #8
   11198:	072a2806 	streq	r2, [sl, -r6, lsl #16]!
   1119c:	cc0e0000 	stcgt	0, cr0, [lr], {-0}
   111a0:	04000053 	streq	r0, [r0], #-83	; 0xffffffad
   111a4:	07410007 	strbeq	r0, [r1, -r7]
   111a8:	14170000 	ldrne	r0, [r7], #-0
   111ac:	17000054 	smlsdne	r0, r4, r0, r0
   111b0:	00000001 	andeq	r0, r0, r1
   111b4:	59e40300 	stmibpl	r4!, {r8, r9}^
   111b8:	5b080000 	blpl	2111c0 <_Min_Stack_Size+0x210fc0>
   111bc:	00000061 	andeq	r0, r0, r1, rrx
   111c0:	0059f203 	subseq	pc, r9, r3, lsl #4
   111c4:	6f630800 	svcvs	0x00630800
   111c8:	03000000 	movweq	r0, #0
   111cc:	00005228 	andeq	r5, r0, r8, lsr #4
   111d0:	054b3509 	strbeq	r3, [fp, #-1289]	; 0xfffffaf7
   111d4:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
   111d8:	06000053 			; <UNDEFINED> instruction: 0x06000053
   111dc:	00071f62 	andeq	r1, r7, r2, ror #30
   111e0:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
   111e4:	000002fd 	strdeq	r0, [r0], -sp
   111e8:	51040404 	tstpl	r4, r4, lsl #8
   111ec:	0d000058 	stceq	0, cr0, [r0, #-352]	; 0xfffffea0
   111f0:	00002504 	andeq	r2, r0, r4, lsl #10
   111f4:	58680e00 	stmdapl	r8!, {r9, sl, fp}^
   111f8:	0a600000 	beq	1811200 <_Min_Stack_Size+0x1811000>
   111fc:	000836c0 	andeq	r3, r8, r0, asr #13
   11200:	50640b00 	rsbpl	r0, r4, r0, lsl #22
   11204:	c20a0000 	andgt	r0, sl, #0
   11208:	00000025 	andeq	r0, r0, r5, lsr #32
   1120c:	59420b00 	stmdbpl	r2, {r8, r9, fp}^
   11210:	c30a0000 	movwgt	r0, #40960	; 0xa000
   11214:	00000025 	andeq	r0, r0, r5, lsr #32
   11218:	59410b04 	stmdbpl	r1, {r2, r8, r9, fp}^
   1121c:	c40a0000 	strgt	r0, [sl], #-0
   11220:	00000025 	andeq	r0, r0, r5, lsr #32
   11224:	58dc0b08 	ldmpl	ip, {r3, r8, r9, fp}^
   11228:	c50a0000 	strgt	r0, [sl, #-0]
   1122c:	00000025 	andeq	r0, r0, r5, lsr #32
   11230:	57cb0b0c 	strbpl	r0, [fp, ip, lsl #22]
   11234:	c60a0000 	strgt	r0, [sl], -r0
   11238:	00000025 	andeq	r0, r0, r5, lsr #32
   1123c:	65720f10 	ldrbvs	r0, [r2, #-3856]!	; 0xfffff0f0
   11240:	c70a0074 	smlsdxgt	sl, r4, r0, r0
   11244:	00000025 	andeq	r0, r0, r5, lsr #32
   11248:	15580b14 	ldrbne	r0, [r8, #-2836]	; 0xfffff4ec
   1124c:	c80a0000 	stmdagt	sl, {}	; <UNPREDICTABLE>
   11250:	0000011f 	andeq	r0, r0, pc, lsl r1
   11254:	59620b18 	stmdbpl	r2!, {r3, r4, r8, r9, fp}^
   11258:	c90a0000 	stmdbgt	sl, {}	; <UNPREDICTABLE>
   1125c:	0000011f 	andeq	r0, r0, pc, lsl r1
   11260:	59150b19 	ldmdbpl	r5, {r0, r3, r4, r8, r9, fp}
   11264:	ca0a0000 	bgt	29126c <_Min_Stack_Size+0x29106c>
   11268:	0000011f 	andeq	r0, r0, pc, lsl r1
   1126c:	75620f1a 	strbvc	r0, [r2, #-3866]!	; 0xfffff0e6
   11270:	cb0a0066 	blgt	291410 <_Min_Stack_Size+0x291210>
   11274:	00000836 	andeq	r0, r0, r6, lsr r8
   11278:	50020b1b 	andpl	r0, r2, fp, lsl fp
   1127c:	cc0a0000 	stcgt	0, cr0, [sl], {-0}
   11280:	00000846 	andeq	r0, r0, r6, asr #16
   11284:	587c0b43 	ldmdapl	ip!, {r0, r1, r6, r8, r9, fp}^
   11288:	ce0a0000 	cdpgt	0, 0, cr0, cr10, cr0, {0}
   1128c:	0000076d 	andeq	r0, r0, sp, ror #14
   11290:	59500b48 	ldmdbpl	r0, {r3, r6, r8, r9, fp}^
   11294:	cf0a0000 	svcgt	0x000a0000
   11298:	00000856 	andeq	r0, r0, r6, asr r8
   1129c:	58f50b50 	ldmpl	r5!, {r4, r6, r8, r9, fp}^
   112a0:	d00a0000 	andle	r0, sl, r0
   112a4:	00000025 	andeq	r0, r0, r5, lsr #32
   112a8:	1f080058 	svcne	0x00080058
   112ac:	46000001 	strmi	r0, [r0], -r1
   112b0:	09000008 	stmdbeq	r0, {r3}
   112b4:	000000d9 	ldrdeq	r0, [r0], -r9
   112b8:	1f080027 	svcne	0x00080027
   112bc:	56000001 	strpl	r0, [r0], -r1
   112c0:	09000008 	stmdbeq	r0, {r3}
   112c4:	000000d9 	ldrdeq	r0, [r0], -r9
   112c8:	1f080002 	svcne	0x00080002
   112cc:	66000001 	strvs	r0, [r0], -r1
   112d0:	09000008 	stmdbeq	r0, {r3}
   112d4:	000000d9 	ldrdeq	r0, [r0], -r9
   112d8:	f9180006 			; <UNDEFINED> instruction: 0xf9180006
   112dc:	01000059 	qaddeq	r0, r9, r0
   112e0:	00002531 	andeq	r2, r0, r1, lsr r5
   112e4:	000d1800 	andeq	r1, sp, r0, lsl #16
   112e8:	00013208 	andeq	r3, r1, r8, lsl #4
   112ec:	639c0100 	orrsvs	r0, ip, #0, 2
   112f0:	19000009 	stmdbne	r0, {r0, r3}
   112f4:	00000dec 	andeq	r0, r0, ip, ror #27
   112f8:	036a3101 	cmneq	sl, #1073741824	; 0x40000000
   112fc:	158c0000 	strne	r0, [ip]
   11300:	ec190000 	ldc	0, cr0, [r9], {-0}
   11304:	01000059 	qaddeq	r0, r9, r0
   11308:	00096332 	andeq	r6, r9, r2, lsr r3
   1130c:	0015c000 	andseq	ip, r5, r0
   11310:	59d61900 	ldmibpl	r6, {r8, fp, ip}^
   11314:	33010000 	movwcc	r0, #4096	; 0x1000
   11318:	0000077b 	andeq	r0, r0, fp, ror r7
   1131c:	0000161d 	andeq	r1, r0, sp, lsl r6
   11320:	0070661a 	rsbseq	r6, r0, sl, lsl r6
   11324:	09693401 	stmdbeq	r9!, {r0, sl, ip, sp}^
   11328:	167b0000 	ldrbtne	r0, [fp], -r0
   1132c:	d1190000 	tstle	r9, r0
   11330:	01000058 	qaddeq	r0, r8, r0
   11334:	00098d35 	andeq	r8, r9, r5, lsr sp
   11338:	00169900 	andseq	r9, r6, r0, lsl #18
   1133c:	006e1b00 	rsbeq	r1, lr, r0, lsl #22
   11340:	00253801 	eoreq	r3, r5, r1, lsl #16
   11344:	16b90000 	ldrtne	r0, [r9], r0
   11348:	571c0000 	ldrpl	r0, [ip, -r0]
   1134c:	01000058 	qaddeq	r0, r8, r0
   11350:	0fb81d68 	svceq	0x00b81d68
   11354:	09130000 	ldmdbeq	r3, {}	; <UNPREDICTABLE>
   11358:	7a1e0000 	bvc	791360 <_Min_Stack_Size+0x791160>
   1135c:	01000059 	qaddeq	r0, r9, r0
   11360:	00002551 	andeq	r2, r0, r1, asr r5
   11364:	00175800 	andseq	r5, r7, r0, lsl #16
   11368:	0d881f00 	stceq	15, cr1, [r8]
   1136c:	01200800 			; <UNDEFINED> instruction: 0x01200800
   11370:	00760250 	rsbseq	r0, r6, r0, asr r2
   11374:	02510120 	subseq	r0, r1, #32, 2
   11378:	01200077 			; <UNDEFINED> instruction: 0x01200077
   1137c:	007a0252 	rsbseq	r0, sl, r2, asr r2
   11380:	01530120 	cmpeq	r3, r0, lsr #2
   11384:	1d000031 	stcne	0, cr0, [r0, #-196]	; 0xffffff3c
   11388:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1138c:	00000949 	andeq	r0, r0, r9, asr #18
   11390:	00597a1e 	subseq	r7, r9, lr, lsl sl
   11394:	25660100 	strbcs	r0, [r6, #-256]!	; 0xffffff00
   11398:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
   1139c:	1f000017 	svcne	0x00000017
   113a0:	08000dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp}
   113a4:	02500120 	subseq	r0, r0, #32, 2
   113a8:	01200076 			; <UNDEFINED> instruction: 0x01200076
   113ac:	00770251 	rsbseq	r0, r7, r1, asr r2
   113b0:	02520120 	subseq	r0, r2, #32, 2
   113b4:	01200074 			; <UNDEFINED> instruction: 0x01200074
   113b8:	00310153 	eorseq	r0, r1, r3, asr r1
   113bc:	0dc81f00 	stcleq	15, cr1, [r8]
   113c0:	01200800 			; <UNDEFINED> instruction: 0x01200800
   113c4:	00760250 	rsbseq	r0, r6, r0, asr r2
   113c8:	02510120 	subseq	r0, r1, #32, 2
   113cc:	01200077 			; <UNDEFINED> instruction: 0x01200077
   113d0:	c3740352 	cmngt	r4, #1207959553	; 0x48000001
   113d4:	0d000000 	stceq	0, cr0, [r0, #-0]
   113d8:	00078104 	andeq	r8, r7, r4, lsl #2
   113dc:	57040d00 	strpl	r0, [r4, -r0, lsl #26]
   113e0:	13000007 	movwne	r0, #7
   113e4:	00000025 	andeq	r0, r0, r5, lsr #32
   113e8:	0000098d 	andeq	r0, r0, sp, lsl #19
   113ec:	00036a14 	andeq	r6, r3, r4, lsl sl
   113f0:	09691400 	stmdbeq	r9!, {sl, ip}^
   113f4:	dc140000 	ldcle	0, cr0, [r4], {-0}
   113f8:	14000004 	strne	r0, [r0], #-4
   113fc:	0000002c 	andeq	r0, r0, ip, lsr #32
   11400:	6f040d00 	svcvs	0x00040d00
   11404:	18000009 	stmdane	r0, {r0, r3}
   11408:	000058fa 	strdeq	r5, [r0], -sl
   1140c:	00256c01 	eoreq	r6, r5, r1, lsl #24
   11410:	0e4c0000 	cdpeq	0, 4, cr0, cr12, cr0, {0}
   11414:	02a80800 	adceq	r0, r8, #0, 16
   11418:	9c010000 	stcls	0, cr0, [r1], {-0}
   1141c:	00000b29 	andeq	r0, r0, r9, lsr #22
   11420:	000dec19 	andeq	lr, sp, r9, lsl ip
   11424:	6a6c0100 	bvs	1b1182c <_Min_Stack_Size+0x1b1162c>
   11428:	b9000003 	stmdblt	r0, {r0, r1}
   1142c:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
   11430:	000059ec 	andeq	r5, r0, ip, ror #19
   11434:	09636c01 	stmdbeq	r3!, {r0, sl, fp, sp, lr}^
   11438:	17d70000 	ldrbne	r0, [r7, r0]
   1143c:	661a0000 	ldrvs	r0, [sl], -r0
   11440:	6c010070 	stcvs	0, cr0, [r1], {112}	; 0x70
   11444:	00000969 	andeq	r0, r0, r9, ror #18
   11448:	000017f5 	strdeq	r1, [r0], -r5
   1144c:	0058d119 	subseq	sp, r8, r9, lsl r1
   11450:	8d6d0100 	stfhie	f0, [sp, #-0]
   11454:	ad000009 	stcge	0, cr0, [r0, #-36]	; 0xffffffdc
   11458:	1a000018 	bne	114c0 <_Min_Stack_Size+0x112c0>
   1145c:	01007061 	tsteq	r0, r1, rrx
   11460:	000b296e 	andeq	r2, fp, lr, ror #18
   11464:	00197b00 	andseq	r7, r9, r0, lsl #22
   11468:	59d62100 	ldmibpl	r6, {r8, sp}^
   1146c:	71010000 	mrsvc	r0, (UNDEF: 1)
   11470:	00000025 	andeq	r0, r0, r5, lsr #32
   11474:	1e5c9102 	lognee	f1, f2
   11478:	00005987 	andeq	r5, r0, r7, lsl #19
   1147c:	006f7201 	rsbeq	r7, pc, r1, lsl #4
   11480:	19a70000 	stmibne	r7!, {}	; <UNPREDICTABLE>
   11484:	a21e0000 	andsge	r0, lr, #0
   11488:	01000033 	tsteq	r0, r3, lsr r0
   1148c:	00002573 	andeq	r2, r0, r3, ror r5
   11490:	0019fd00 	andseq	pc, r9, r0, lsl #26
   11494:	006e1b00 	rsbeq	r1, lr, r0, lsl #22
   11498:	00257401 	eoreq	r7, r5, r1, lsl #8
   1149c:	1a400000 	bne	10114a4 <_Min_Stack_Size+0x10112a4>
   114a0:	631b0000 	tstvs	fp, #0
   114a4:	75010070 	strvc	r0, [r1, #-112]	; 0xffffff90
   114a8:	00000119 	andeq	r0, r0, r9, lsl r1
   114ac:	00001a60 	andeq	r1, r0, r0, ror #20
   114b0:	0059811e 	subseq	r8, r9, lr, lsl r1
   114b4:	19760100 	ldmdbne	r6!, {r8}^
   114b8:	48000001 	stmdami	r0, {r0}
   114bc:	2200001b 	andcs	r0, r0, #27
   114c0:	000059c4 	andeq	r5, r0, r4, asr #19
   114c4:	105ee701 	subsne	lr, lr, r1, lsl #14
   114c8:	dd220800 	stcle	8, cr0, [r2, #-0]
   114cc:	01000059 	qaddeq	r0, r9, r0
   114d0:	000ef2b2 			; <UNDEFINED> instruction: 0x000ef2b2
   114d4:	59cf2208 	stmibpl	pc, {r3, r9, sp}^	; <UNPREDICTABLE>
   114d8:	ab010000 	blge	514e0 <_Min_Stack_Size+0x512e0>
   114dc:	08000eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp}
   114e0:	78656823 	stmdavc	r5!, {r0, r1, r5, fp, sp, lr}^
   114e4:	baa00100 	blt	fe8118ec <BootRAM+0xd78208d>
   114e8:	1c08000e 	stcne	0, cr0, [r8], {14}
   114ec:	00005857 	andeq	r5, r0, r7, asr r8
   114f0:	e81df701 	ldmda	sp, {r0, r8, r9, sl, ip, sp, lr, pc}
   114f4:	aa00000f 	bge	11538 <_Min_Stack_Size+0x11338>
   114f8:	1b00000a 	blne	11528 <_Min_Stack_Size+0x11328>
   114fc:	db010070 	blle	516c4 <_Min_Stack_Size+0x514c4>
   11500:	00000119 	andeq	r0, r0, r9, lsl r1
   11504:	00001be1 	andeq	r1, r0, r1, ror #23
   11508:	00105424 	andseq	r5, r0, r4, lsr #8
   1150c:	000b2f08 	andeq	r2, fp, r8, lsl #30
   11510:	50012000 	andpl	r2, r1, r0
   11514:	20007502 	andcs	r7, r0, r2, lsl #10
   11518:	30015101 	andcc	r5, r1, r1, lsl #2
   1151c:	481d0000 	ldmdami	sp, {}	; <UNPREDICTABLE>
   11520:	e0000010 	and	r0, r0, r0, lsl r0
   11524:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
   11528:	0000597a 	andeq	r5, r0, sl, ror r9
   1152c:	0025f401 	eoreq	pc, r5, r1, lsl #8
   11530:	1bff0000 	blne	fffd1538 <BootRAM+0xef41cd9>
   11534:	861f0000 	ldrhi	r0, [pc], -r0
   11538:	2008000f 	andcs	r0, r8, pc
   1153c:	76025001 	strvc	r5, [r2], -r1
   11540:	51012000 	mrspl	r2, (UNDEF: 1)
   11544:	20007702 	andcs	r7, r0, r2, lsl #14
   11548:	79025201 	stmdbvc	r2, {r0, r9, ip, lr}
   1154c:	53012000 	movwpl	r2, #4096	; 0x1000
   11550:	00003101 	andeq	r3, r0, r1, lsl #2
   11554:	000f4625 	andeq	r4, pc, r5, lsr #12
   11558:	00086608 	andeq	r6, r8, r8, lsl #12
   1155c:	000b0d00 	andeq	r0, fp, r0, lsl #26
   11560:	50012000 	andpl	r2, r1, r0
   11564:	20007602 	andcs	r7, r0, r2, lsl #12
   11568:	74025101 	strvc	r5, [r2], #-257	; 0xfffffeff
   1156c:	52012000 	andpl	r2, r1, #0
   11570:	205c9102 	subscs	r9, ip, r2, lsl #2
   11574:	77025301 	strvc	r5, [r2, -r1, lsl #6]
   11578:	7d022000 	stcvc	0, cr2, [r2, #-0]
   1157c:	00780200 	rsbseq	r0, r8, r0, lsl #4
   11580:	0f542600 	svceq	0x00542600
   11584:	78020800 	stmdavc	r2, {fp}
   11588:	50012000 	andpl	r2, r1, r0
   1158c:	20007602 	andcs	r7, r0, r2, lsl #12
   11590:	77025101 	strvc	r5, [r2, -r1, lsl #2]
   11594:	52012000 	andpl	r2, r1, #0
   11598:	00007502 	andeq	r7, r0, r2, lsl #10
   1159c:	62040d00 	andvs	r0, r4, #0, 26
   115a0:	27000007 	strcs	r0, [r0, -r7]
   115a4:	000058ee 	andeq	r5, r0, lr, ror #17
   115a8:	000058ee 	andeq	r5, r0, lr, ror #17
   115ac:	9d00150b 	cfstr32ls	mvfx1, [r0, #-44]	; 0xffffffd4
   115b0:	04000007 	streq	r0, [r0], #-7
   115b4:	0038a800 	eorseq	sl, r8, r0, lsl #16
   115b8:	e6010400 	str	r0, [r1], -r0, lsl #8
   115bc:	0c00004e 	stceq	0, cr0, [r0], {78}	; 0x4e
   115c0:	00005a17 	andeq	r5, r0, r7, lsl sl
   115c4:	00005605 	andeq	r5, r0, r5, lsl #12
   115c8:	080010f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, ip}
   115cc:	00000024 	andeq	r0, r0, r4, lsr #32
   115d0:	00006de1 	andeq	r6, r0, r1, ror #27
   115d4:	005a0d02 	subseq	r0, sl, r2, lsl #26
   115d8:	30950200 	addscc	r0, r5, r0, lsl #4
   115dc:	03000000 	movweq	r0, #0
   115e0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   115e4:	04040074 	streq	r0, [r4], #-116	; 0xffffff8c
   115e8:	0001ce07 	andeq	ip, r1, r7, lsl #28
   115ec:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
   115f0:	000000b8 	strheq	r0, [r0], -r8
   115f4:	f8040804 			; <UNDEFINED> instruction: 0xf8040804
   115f8:	04000002 	streq	r0, [r0], #-2
   115fc:	01920601 	orrseq	r0, r2, r1, lsl #12
   11600:	01040000 	mrseq	r0, (UNDEF: 4)
   11604:	00019008 	andeq	r9, r1, r8
   11608:	05020400 	streq	r0, [r2, #-1024]	; 0xfffffc00
   1160c:	00000095 	muleq	r0, r5, r0
   11610:	f2070204 	vhsub.s8	d0, d7, d4
   11614:	04000001 	streq	r0, [r0], #-1
   11618:	00bd0504 	adcseq	r0, sp, r4, lsl #10
   1161c:	04040000 	streq	r0, [r4], #-0
   11620:	0001c907 	andeq	ip, r1, r7, lsl #18
   11624:	07080400 	streq	r0, [r8, -r0, lsl #8]
   11628:	000001c4 	andeq	r0, r0, r4, asr #3
   1162c:	0051cb02 	subseq	ip, r1, r2, lsl #22
   11630:	30070300 	andcc	r0, r7, r0, lsl #6
   11634:	02000000 	andeq	r0, r0, #0
   11638:	000051ba 			; <UNDEFINED> instruction: 0x000051ba
   1163c:	00682c04 	rsbeq	r2, r8, r4, lsl #24
   11640:	a4020000 	strge	r0, [r2], #-0
   11644:	04000052 	streq	r0, [r0], #-82	; 0xffffffae
   11648:	00006872 	andeq	r6, r0, r2, ror r8
   1164c:	51870500 	orrpl	r0, r7, r0, lsl #10
   11650:	65020000 	strvs	r0, [r2, #-0]
   11654:	00003701 	andeq	r3, r0, r1, lsl #14
   11658:	04040600 	streq	r0, [r4], #-1536	; 0xfffffa00
   1165c:	0000c9a6 	andeq	ip, r0, r6, lsr #19
   11660:	51810700 	orrpl	r0, r1, r0, lsl #14
   11664:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
   11668:	0000009e 	muleq	r0, lr, r0
   1166c:	0050cf07 	subseq	ip, r0, r7, lsl #30
   11670:	c9a90400 	stmibgt	r9!, {sl}
   11674:	00000000 	andeq	r0, r0, r0
   11678:	00005308 	andeq	r5, r0, r8, lsl #6
   1167c:	0000d900 	andeq	sp, r0, r0, lsl #18
   11680:	00d90900 	sbcseq	r0, r9, r0, lsl #18
   11684:	00030000 	andeq	r0, r3, r0
   11688:	59070404 	stmdbpl	r7, {r2, sl}
   1168c:	0a000000 	beq	11694 <_Min_Stack_Size+0x11494>
   11690:	01a30408 			; <UNDEFINED> instruction: 0x01a30408
   11694:	0b000001 	bleq	116a0 <_Min_Stack_Size+0x114a0>
   11698:	0000528e 	andeq	r5, r0, lr, lsl #5
   1169c:	0030a504 	eorseq	sl, r0, r4, lsl #10
   116a0:	0b000000 	bleq	116a8 <_Min_Stack_Size+0x114a8>
   116a4:	00005296 	muleq	r0, r6, r2
   116a8:	00aaaa04 	adceq	sl, sl, r4, lsl #20
   116ac:	00040000 	andeq	r0, r4, r0
   116b0:	00522d02 	subseq	r2, r2, r2, lsl #26
   116b4:	e0ab0400 	adc	r0, fp, r0, lsl #8
   116b8:	02000000 	andeq	r0, r0, #0
   116bc:	000050a0 	andeq	r5, r0, r0, lsr #1
   116c0:	007daf04 	rsbseq	sl, sp, r4, lsl #30
   116c4:	040c0000 	streq	r0, [ip], #-0
   116c8:	011f040d 	tsteq	pc, sp, lsl #8
   116cc:	01040000 	mrseq	r0, (UNDEF: 4)
   116d0:	00019908 	andeq	r9, r1, r8, lsl #18
   116d4:	52e00200 	rscpl	r0, r0, #0, 4
   116d8:	16050000 	strne	r0, [r5], -r0
   116dc:	0000006f 	andeq	r0, r0, pc, rrx
   116e0:	0050a90e 	subseq	sl, r0, lr, lsl #18
   116e4:	2d051800 	stccs	8, cr1, [r5, #-0]
   116e8:	00000184 	andeq	r0, r0, r4, lsl #3
   116ec:	00524e0b 	subseq	r4, r2, fp, lsl #28
   116f0:	842f0500 	strthi	r0, [pc], #-1280	; 116f8 <_Min_Stack_Size+0x114f8>
   116f4:	00000001 	andeq	r0, r0, r1
   116f8:	006b5f0f 	rsbeq	r5, fp, pc, lsl #30
   116fc:	00303005 	eorseq	r3, r0, r5
   11700:	0b040000 	bleq	111708 <_Min_Stack_Size+0x111508>
   11704:	00005280 	andeq	r5, r0, r0, lsl #5
   11708:	00303005 	eorseq	r3, r0, r5
   1170c:	0b080000 	bleq	211714 <_Min_Stack_Size+0x211514>
   11710:	0000509a 	muleq	r0, sl, r0
   11714:	00303005 	eorseq	r3, r0, r5
   11718:	0b0c0000 	bleq	311720 <_Min_Stack_Size+0x311520>
   1171c:	000052fb 	strdeq	r5, [r0], -fp
   11720:	00303005 	eorseq	r3, r0, r5
   11724:	0f100000 	svceq	0x00100000
   11728:	0500785f 	streq	r7, [r0, #-2143]	; 0xfffff7a1
   1172c:	00018a31 	andeq	r8, r1, r1, lsr sl
   11730:	0d001400 	cfstrseq	mvf1, [r0, #-0]
   11734:	00013104 	andeq	r3, r1, r4, lsl #2
   11738:	01260800 			; <UNDEFINED> instruction: 0x01260800
   1173c:	019a0000 	orrseq	r0, sl, r0
   11740:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
   11744:	00000000 	andeq	r0, r0, r0
   11748:	50ca0e00 	sbcpl	r0, sl, r0, lsl #28
   1174c:	05240000 	streq	r0, [r4, #-0]!
   11750:	00021335 	andeq	r1, r2, r5, lsr r3
   11754:	502e0b00 	eorpl	r0, lr, r0, lsl #22
   11758:	37050000 	strcc	r0, [r5, -r0]
   1175c:	00000030 	andeq	r0, r0, r0, lsr r0
   11760:	52b30b00 	adcspl	r0, r3, #0, 22
   11764:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
   11768:	00000030 	andeq	r0, r0, r0, lsr r0
   1176c:	503d0b04 	eorspl	r0, sp, r4, lsl #22
   11770:	39050000 	stmdbcc	r5, {}	; <UNPREDICTABLE>
   11774:	00000030 	andeq	r0, r0, r0, lsr r0
   11778:	53580b08 	cmppl	r8, #8, 22	; 0x2000
   1177c:	3a050000 	bcc	151784 <_Min_Stack_Size+0x151584>
   11780:	00000030 	andeq	r0, r0, r0, lsr r0
   11784:	51a60b0c 			; <UNDEFINED> instruction: 0x51a60b0c
   11788:	3b050000 	blcc	151790 <_Min_Stack_Size+0x151590>
   1178c:	00000030 	andeq	r0, r0, r0, lsr r0
   11790:	51960b10 	orrspl	r0, r6, r0, lsl fp
   11794:	3c050000 	stccc	0, cr0, [r5], {-0}
   11798:	00000030 	andeq	r0, r0, r0, lsr r0
   1179c:	53000b14 	movwpl	r0, #2836	; 0xb14
   117a0:	3d050000 	stccc	0, cr0, [r5, #-0]
   117a4:	00000030 	andeq	r0, r0, r0, lsr r0
   117a8:	52150b18 	andspl	r0, r5, #24, 22	; 0x6000
   117ac:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
   117b0:	00000030 	andeq	r0, r0, r0, lsr r0
   117b4:	53240b1c 			; <UNDEFINED> instruction: 0x53240b1c
   117b8:	3f050000 	svccc	0x00050000
   117bc:	00000030 	andeq	r0, r0, r0, lsr r0
   117c0:	1f0e0020 	svcne	0x000e0020
   117c4:	08000052 	stmdaeq	r0, {r1, r4, r6}
   117c8:	02387305 	eorseq	r7, r8, #335544320	; 0x14000000
   117cc:	a10b0000 	mrsge	r0, (UNDEF: 11)
   117d0:	05000033 	streq	r0, [r0, #-51]	; 0xffffffcd
   117d4:	00023874 	andeq	r3, r2, r4, ror r8
   117d8:	ca0b0000 	bgt	2d17e0 <_Min_Stack_Size+0x2d15e0>
   117dc:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
   117e0:	00003075 	andeq	r3, r0, r5, ror r0
   117e4:	0d000400 	cfstrseq	mvf0, [r0, #-0]
   117e8:	00005304 	andeq	r5, r0, r4, lsl #6
   117ec:	52d41000 	sbcspl	r1, r4, #0
   117f0:	05600000 	strbeq	r0, [r0, #-0]!
   117f4:	036a0172 	cmneq	sl, #-2147483620	; 0x8000001c
   117f8:	ac110000 	ldcge	0, cr0, [r1], {-0}
   117fc:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   11800:	00300176 	eorseq	r0, r0, r6, ror r1
   11804:	11000000 	mrsne	r0, (UNDEF: 0)
   11808:	000055ed 	andeq	r5, r0, sp, ror #11
   1180c:	92017b05 	andls	r7, r1, #5120	; 0x1400
   11810:	04000005 	streq	r0, [r0], #-5
   11814:	0055fd11 	subseq	pc, r5, r1, lsl sp	; <UNPREDICTABLE>
   11818:	017b0500 	cmneq	fp, r0, lsl #10
   1181c:	00000592 	muleq	r0, r2, r5
   11820:	56b81108 	ldrtpl	r1, [r8], r8, lsl #2
   11824:	7b050000 	blvc	15182c <_Min_Stack_Size+0x15162c>
   11828:	00059201 	andeq	r9, r5, r1, lsl #4
   1182c:	61110c00 	tstvs	r1, r0, lsl #24
   11830:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   11834:	0030017d 	eorseq	r0, r0, sp, ror r1
   11838:	11100000 	tstne	r0, r0
   1183c:	00004fe2 	andeq	r4, r0, r2, ror #31
   11840:	19017f05 	stmdbne	r1, {r0, r2, r8, r9, sl, fp, ip, sp, lr}
   11844:	14000001 	strne	r0, [r0], #-1
   11848:	0051af11 	subseq	sl, r1, r1, lsl pc
   1184c:	01810500 	orreq	r0, r1, r0, lsl #10
   11850:	00000030 	andeq	r0, r0, r0, lsr r0
   11854:	50e71118 	rscpl	r1, r7, r8, lsl r1
   11858:	83050000 	movwhi	r0, #20480	; 0x5000
   1185c:	00003001 	andeq	r3, r0, r1
   11860:	66111c00 	ldrvs	r1, [r1], -r0, lsl #24
   11864:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   11868:	04dc0184 	ldrbeq	r0, [ip], #388	; 0x184
   1186c:	12200000 	eorne	r0, r0, #0
   11870:	00706d5f 	rsbseq	r6, r0, pc, asr sp
   11874:	df018605 	svcle	0x00018605
   11878:	24000006 	strcs	r0, [r0], #-6
   1187c:	00527611 	subseq	r7, r2, r1, lsl r6
   11880:	01880500 	orreq	r0, r8, r0, lsl #10
   11884:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11888:	50b11128 	adcspl	r1, r1, r8, lsr #2
   1188c:	8a050000 	bhi	151894 <_Min_Stack_Size+0x151694>
   11890:	00003001 	andeq	r3, r0, r1
   11894:	f9112c00 			; <UNDEFINED> instruction: 0xf9112c00
   11898:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   1189c:	0030018d 	eorseq	r0, r0, sp, lsl #3
   118a0:	11300000 	teqne	r0, r0
   118a4:	00005073 	andeq	r5, r0, r3, ror r0
   118a8:	19018e05 	stmdbne	r1, {r0, r2, r9, sl, fp, pc}
   118ac:	34000001 	strcc	r0, [r0], #-1
   118b0:	00510111 	subseq	r0, r1, r1, lsl r1
   118b4:	01900500 	orrseq	r0, r0, r0, lsl #10
   118b8:	000006f6 	strdeq	r0, [r0], -r6
   118bc:	532f1138 			; <UNDEFINED> instruction: 0x532f1138
   118c0:	91050000 	mrsls	r0, (UNDEF: 5)
   118c4:	0006fc01 	andeq	pc, r6, r1, lsl #24
   118c8:	6c113c00 	ldcvs	12, cr3, [r1], {-0}
   118cc:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
   118d0:	01190192 			; <UNDEFINED> instruction: 0x01190192
   118d4:	11400000 	mrsne	r0, (UNDEF: 64)
   118d8:	00005314 	andeq	r5, r0, r4, lsl r3
   118dc:	0d019505 	cfstr32eq	mvfx9, [r1, #-20]	; 0xffffffec
   118e0:	44000007 	strmi	r0, [r0], #-7
   118e4:	00505411 	subseq	r5, r0, r1, lsl r4
   118e8:	019d0500 	orrseq	r0, sp, r0, lsl #10
   118ec:	00000557 	andeq	r0, r0, r7, asr r5
   118f0:	50471148 	subpl	r1, r7, r8, asr #2
   118f4:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
   118f8:	00059201 	andeq	r9, r5, r1, lsl #4
   118fc:	a0115400 	andsge	r5, r1, r0, lsl #8
   11900:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
   11904:	0719019f 			; <UNDEFINED> instruction: 0x0719019f
   11908:	11580000 	cmpne	r8, r0
   1190c:	00004ffc 	strdeq	r4, [r0], -ip
   11910:	1901a005 	stmdbne	r1, {r0, r2, sp, pc}
   11914:	5c000001 	stcpl	0, cr0, [r0], {1}
   11918:	3e040d00 	cdpcc	13, 0, cr0, cr4, cr0, {0}
   1191c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
   11920:	00005238 	andeq	r5, r0, r8, lsr r2
   11924:	9ab30568 	bls	fecd2ecc <BootRAM+0xdc4366d>
   11928:	0f000004 	svceq	0x00000004
   1192c:	0500705f 	streq	r7, [r0, #-95]	; 0xffffffa1
   11930:	000238b4 			; <UNDEFINED> instruction: 0x000238b4
   11934:	5f0f0000 	svcpl	0x000f0000
   11938:	b5050072 	strlt	r0, [r5, #-114]	; 0xffffff8e
   1193c:	00000030 	andeq	r0, r0, r0, lsr r0
   11940:	775f0f04 	ldrbvc	r0, [pc, -r4, lsl #30]
   11944:	30b60500 	adcscc	r0, r6, r0, lsl #10
   11948:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   1194c:	0050630b 	subseq	r6, r0, fp, lsl #6
   11950:	5ab70500 	bpl	fedd2d58 <BootRAM+0xdd434f9>
   11954:	0c000000 	stceq	0, cr0, [r0], {-0}
   11958:	0052f50b 	subseq	pc, r2, fp, lsl #10
   1195c:	5ab80500 	bpl	fee12d64 <BootRAM+0xdd83505>
   11960:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   11964:	66625f0f 	strbtvs	r5, [r2], -pc, lsl #30
   11968:	13b90500 			; <UNDEFINED> instruction: 0x13b90500
   1196c:	10000002 	andne	r0, r0, r2
   11970:	0050080b 	subseq	r0, r0, fp, lsl #16
   11974:	30ba0500 	adcscc	r0, sl, r0, lsl #10
   11978:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   1197c:	000deb0b 	andeq	lr, sp, fp, lsl #22
   11980:	6abd0500 	bvs	fef52d88 <BootRAM+0xdec3529>
   11984:	1c000003 	stcne	0, cr0, [r0], {3}
   11988:	00504c0b 	subseq	r4, r0, fp, lsl #24
   1198c:	17c10500 	strbne	r0, [r1, r0, lsl #10]
   11990:	20000001 	andcs	r0, r0, r1
   11994:	003a870b 	eorseq	r8, sl, fp, lsl #14
   11998:	b8c30500 	stmialt	r3, {r8, sl}^
   1199c:	24000004 	strcs	r0, [r0], #-4
   119a0:	0039e20b 	eorseq	lr, r9, fp, lsl #4
   119a4:	e7c50500 	strb	r0, [r5, r0, lsl #10]
   119a8:	28000004 	stmdacs	r0, {r2}
   119ac:	00529e0b 	subseq	r9, r2, fp, lsl #28
   119b0:	0bc80500 	bleq	ff212db8 <BootRAM+0xe183559>
   119b4:	2c000005 	stccs	0, cr0, [r0], {5}
   119b8:	00533e0b 	subseq	r3, r3, fp, lsl #28
   119bc:	25c90500 	strbcs	r0, [r9, #1280]	; 0x500
   119c0:	30000005 	andcc	r0, r0, r5
   119c4:	62755f0f 	rsbsvs	r5, r5, #15, 30	; 0x3c
   119c8:	13cc0500 	bicne	r0, ip, #0, 10
   119cc:	34000002 	strcc	r0, [r0], #-2
   119d0:	70755f0f 	rsbsvc	r5, r5, pc, lsl #30
   119d4:	38cd0500 	stmiacc	sp, {r8, sl}^
   119d8:	3c000002 	stccc	0, cr0, [r0], {2}
   119dc:	72755f0f 	rsbsvc	r5, r5, #15, 30	; 0x3c
   119e0:	30ce0500 	sbccc	r0, lr, r0, lsl #10
   119e4:	40000000 	andmi	r0, r0, r0
   119e8:	0050370b 	subseq	r3, r0, fp, lsl #14
   119ec:	2bd10500 	blcs	ff452df4 <BootRAM+0xe3c3595>
   119f0:	44000005 	strmi	r0, [r0], #-5
   119f4:	00531e0b 	subseq	r1, r3, fp, lsl #28
   119f8:	3bd20500 	blcc	ff492e00 <BootRAM+0xe4035a1>
   119fc:	47000005 	strmi	r0, [r0, -r5]
   11a00:	626c5f0f 	rsbvs	r5, ip, #15, 30	; 0x3c
   11a04:	13d50500 	bicsne	r0, r5, #0, 10
   11a08:	48000002 	stmdami	r0, {r1}
   11a0c:	00506a0b 	subseq	r6, r0, fp, lsl #20
   11a10:	30d80500 	sbcscc	r0, r8, r0, lsl #10
   11a14:	50000000 	andpl	r0, r0, r0
   11a18:	005b4c0b 	subseq	r4, fp, fp, lsl #24
   11a1c:	88d90500 	ldmhi	r9, {r8, sl}^
   11a20:	54000000 	strpl	r0, [r0], #-0
   11a24:	00353a0b 	eorseq	r3, r5, fp, lsl #20
   11a28:	0ce00500 	cfstr64eq	mvdx0, [r0]
   11a2c:	58000001 	stmdapl	r0, {r0}
   11a30:	0052400b 	subseq	r4, r2, fp
   11a34:	01e20500 	mvneq	r0, r0, lsl #10
   11a38:	5c000001 	stcpl	0, cr0, [r0], {1}
   11a3c:	00518e0b 	subseq	r8, r1, fp, lsl #28
   11a40:	30e30500 	rsccc	r0, r3, r0, lsl #10
   11a44:	64000000 	strvs	r0, [r0], #-0
   11a48:	00301300 	eorseq	r1, r0, r0, lsl #6
   11a4c:	04b80000 	ldrteq	r0, [r8], #0
   11a50:	6a140000 	bvs	511a58 <_Min_Stack_Size+0x511858>
   11a54:	14000003 	strne	r0, [r0], #-3
   11a58:	00000117 	andeq	r0, r0, r7, lsl r1
   11a5c:	00011914 	andeq	r1, r1, r4, lsl r9
   11a60:	00301400 	eorseq	r1, r0, r0, lsl #8
   11a64:	0d000000 	stceq	0, cr0, [r0, #-0]
   11a68:	00049a04 	andeq	r9, r4, r4, lsl #20
   11a6c:	00301300 	eorseq	r1, r0, r0, lsl #6
   11a70:	04dc0000 	ldrbeq	r0, [ip], #0
   11a74:	6a140000 	bvs	511a7c <_Min_Stack_Size+0x51187c>
   11a78:	14000003 	strne	r0, [r0], #-3
   11a7c:	00000117 	andeq	r0, r0, r7, lsl r1
   11a80:	0004dc14 	andeq	sp, r4, r4, lsl ip
   11a84:	00301400 	eorseq	r1, r0, r0, lsl #8
   11a88:	0d000000 	stceq	0, cr0, [r0, #-0]
   11a8c:	0004e204 	andeq	lr, r4, r4, lsl #4
   11a90:	011f1500 	tsteq	pc, r0, lsl #10
   11a94:	040d0000 	streq	r0, [sp], #-0
   11a98:	000004be 			; <UNDEFINED> instruction: 0x000004be
   11a9c:	00009313 	andeq	r9, r0, r3, lsl r3
   11aa0:	00050b00 	andeq	r0, r5, r0, lsl #22
   11aa4:	036a1400 	cmneq	sl, #0, 8
   11aa8:	17140000 	ldrne	r0, [r4, -r0]
   11aac:	14000001 	strne	r0, [r0], #-1
   11ab0:	00000093 	muleq	r0, r3, r0
   11ab4:	00003014 	andeq	r3, r0, r4, lsl r0
   11ab8:	040d0000 	streq	r0, [sp], #-0
   11abc:	000004ed 	andeq	r0, r0, sp, ror #9
   11ac0:	00003013 	andeq	r3, r0, r3, lsl r0
   11ac4:	00052500 	andeq	r2, r5, r0, lsl #10
   11ac8:	036a1400 	cmneq	sl, #0, 8
   11acc:	17140000 	ldrne	r0, [r4, -r0]
   11ad0:	00000001 	andeq	r0, r0, r1
   11ad4:	0511040d 	ldreq	r0, [r1, #-1037]	; 0xfffffbf3
   11ad8:	53080000 	movwpl	r0, #32768	; 0x8000
   11adc:	3b000000 	blcc	11ae4 <_Min_Stack_Size+0x118e4>
   11ae0:	09000005 	stmdbeq	r0, {r0, r2}
   11ae4:	000000d9 	ldrdeq	r0, [r0], -r9
   11ae8:	53080002 	movwpl	r0, #32770	; 0x8002
   11aec:	4b000000 	blmi	11af4 <_Min_Stack_Size+0x118f4>
   11af0:	09000005 	stmdbeq	r0, {r0, r2}
   11af4:	000000d9 	ldrdeq	r0, [r0], -r9
   11af8:	26050000 	strcs	r0, [r5], -r0
   11afc:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   11b00:	0370011d 	cmneq	r0, #1073741831	; 0x40000007
   11b04:	0b100000 	bleq	411b0c <_Min_Stack_Size+0x41190c>
   11b08:	0c00005b 	stceq	0, cr0, [r0], {91}	; 0x5b
   11b0c:	8c012105 	stfhis	f2, [r1], {5}
   11b10:	11000005 	tstne	r0, r5
   11b14:	0000524e 	andeq	r5, r0, lr, asr #4
   11b18:	8c012305 	stchi	3, cr2, [r1], {5}
   11b1c:	00000005 	andeq	r0, r0, r5
   11b20:	00510611 	subseq	r0, r1, r1, lsl r6
   11b24:	01240500 			; <UNDEFINED> instruction: 0x01240500
   11b28:	00000030 	andeq	r0, r0, r0, lsr r0
   11b2c:	520f1104 	andpl	r1, pc, #4, 2
   11b30:	25050000 	strcs	r0, [r5, #-0]
   11b34:	00059201 	andeq	r9, r5, r1, lsl #4
   11b38:	0d000800 	stceq	8, cr0, [r0, #-0]
   11b3c:	00055704 	andeq	r5, r5, r4, lsl #14
   11b40:	4b040d00 	blmi	114f48 <_Min_Stack_Size+0x114d48>
   11b44:	10000005 	andne	r0, r0, r5
   11b48:	00004fda 	ldrdeq	r4, [r0], -sl
   11b4c:	013d0518 	teqeq	sp, r8, lsl r5
   11b50:	000005da 	ldrdeq	r0, [r0], -sl
   11b54:	00528811 	subseq	r8, r2, r1, lsl r8
   11b58:	013e0500 	teqeq	lr, r0, lsl #10
   11b5c:	000005da 	ldrdeq	r0, [r0], -sl
   11b60:	52bc1100 	adcspl	r1, ip, #0, 2
   11b64:	3f050000 	svccc	0x00050000
   11b68:	0005da01 	andeq	sp, r5, r1, lsl #20
   11b6c:	db110600 	blle	453374 <_Min_Stack_Size+0x453174>
   11b70:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   11b74:	00610140 	rsbeq	r0, r1, r0, asr #2
   11b78:	110c0000 	mrsne	r0, (UNDEF: 12)
   11b7c:	00005249 	andeq	r5, r0, r9, asr #4
   11b80:	76014305 	strvc	r4, [r1], -r5, lsl #6
   11b84:	10000000 	andne	r0, r0, r0
   11b88:	00610800 	rsbeq	r0, r1, r0, lsl #16
   11b8c:	05ea0000 	strbeq	r0, [sl, #0]!
   11b90:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
   11b94:	02000000 	andeq	r0, r0, #0
   11b98:	505c1000 	subspl	r1, ip, r0
   11b9c:	05100000 	ldreq	r0, [r0, #-0]
   11ba0:	062c0156 			; <UNDEFINED> instruction: 0x062c0156
   11ba4:	79110000 	ldmdbvc	r1, {}	; <UNPREDICTABLE>
   11ba8:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
   11bac:	01840159 	orreq	r0, r4, r9, asr r1
   11bb0:	11000000 	mrsne	r0, (UNDEF: 0)
   11bb4:	000050c0 	andeq	r5, r0, r0, asr #1
   11bb8:	30015a05 	andcc	r5, r1, r5, lsl #20
   11bbc:	04000000 	streq	r0, [r0], #-0
   11bc0:	00535311 	subseq	r5, r3, r1, lsl r3
   11bc4:	015b0500 	cmpeq	fp, r0, lsl #10
   11bc8:	00000184 	andeq	r0, r0, r4, lsl #3
   11bcc:	51c11108 	bicpl	r1, r1, r8, lsl #2
   11bd0:	5c050000 	stcpl	0, cr0, [r5], {-0}
   11bd4:	00062c01 	andeq	r2, r6, r1, lsl #24
   11bd8:	0d000c00 	stceq	12, cr0, [r0, #-0]
   11bdc:	00018404 	andeq	r8, r1, r4, lsl #8
   11be0:	52cf1000 	sbcpl	r1, pc, #0
   11be4:	05500000 	ldrbeq	r0, [r0, #-0]
   11be8:	06cf0160 	strbeq	r0, [pc], r0, ror #2
   11bec:	c2110000 	andsgt	r0, r1, #0
   11bf0:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   11bf4:	01190163 	tsteq	r9, r3, ror #2
   11bf8:	11000000 	mrsne	r0, (UNDEF: 0)
   11bfc:	00005254 	andeq	r5, r0, r4, asr r2
   11c00:	01016405 	tsteq	r1, r5, lsl #8
   11c04:	04000001 	streq	r0, [r0], #-1
   11c08:	00502011 	subseq	r2, r0, r1, lsl r0
   11c0c:	01650500 	cmneq	r5, r0, lsl #10
   11c10:	00000101 	andeq	r0, r0, r1, lsl #2
   11c14:	5345110c 	movtpl	r1, #20748	; 0x510c
   11c18:	66050000 	strvs	r0, [r5], -r0
   11c1c:	00010101 	andeq	r0, r1, r1, lsl #2
   11c20:	0a111400 	beq	456c28 <_Min_Stack_Size+0x456a28>
   11c24:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
   11c28:	06cf0167 	strbeq	r0, [pc], r7, ror #2
   11c2c:	111c0000 	tstne	ip, r0
   11c30:	000052e8 	andeq	r5, r0, r8, ror #5
   11c34:	30016805 	andcc	r6, r1, r5, lsl #16
   11c38:	24000000 	strcs	r0, [r0], #-0
   11c3c:	00508c11 	subseq	r8, r0, r1, lsl ip
   11c40:	01690500 	cmneq	r9, r0, lsl #10
   11c44:	00000101 	andeq	r0, r0, r1, lsl #2
   11c48:	50111128 	andspl	r1, r1, r8, lsr #2
   11c4c:	6a050000 	bvs	151c54 <_Min_Stack_Size+0x151a54>
   11c50:	00010101 	andeq	r0, r1, r1, lsl #2
   11c54:	7b113000 	blvc	45dc5c <_Min_Stack_Size+0x45da5c>
   11c58:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   11c5c:	0101016b 	tsteq	r1, fp, ror #2
   11c60:	11380000 	teqne	r8, r0
   11c64:	00004fed 	andeq	r4, r0, sp, ror #31
   11c68:	01016c05 	tsteq	r1, r5, lsl #24
   11c6c:	40000001 	andmi	r0, r0, r1
   11c70:	0050d611 	subseq	sp, r0, r1, lsl r6
   11c74:	016d0500 	cmneq	sp, r0, lsl #10
   11c78:	00000101 	andeq	r0, r0, r1, lsl #2
   11c7c:	1f080048 	svcne	0x00080048
   11c80:	df000001 	svcle	0x00000001
   11c84:	09000006 	stmdbeq	r0, {r1, r2}
   11c88:	000000d9 	ldrdeq	r0, [r0], -r9
   11c8c:	040d0007 	streq	r0, [sp], #-7
   11c90:	000005ea 	andeq	r0, r0, sl, ror #11
   11c94:	0006f016 	andeq	pc, r6, r6, lsl r0	; <UNPREDICTABLE>
   11c98:	036a1400 	cmneq	sl, #0, 8
   11c9c:	0d000000 	stceq	0, cr0, [r0, #-0]
   11ca0:	0006e504 	andeq	lr, r6, r4, lsl #10
   11ca4:	98040d00 	stmdals	r4, {r8, sl, fp}
   11ca8:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
   11cac:	00019a04 	andeq	r9, r1, r4, lsl #20
   11cb0:	070d1600 	streq	r1, [sp, -r0, lsl #12]
   11cb4:	30140000 	andscc	r0, r4, r0
   11cb8:	00000000 	andeq	r0, r0, r0
   11cbc:	0713040d 	ldreq	r0, [r3, -sp, lsl #8]
   11cc0:	040d0000 	streq	r0, [sp], #-0
   11cc4:	00000702 	andeq	r0, r0, r2, lsl #14
   11cc8:	0632040d 	ldrteq	r0, [r2], -sp, lsl #8
   11ccc:	d0170000 	andsle	r0, r7, r0
   11cd0:	06000057 			; <UNDEFINED> instruction: 0x06000057
   11cd4:	00011799 	muleq	r1, r9, r7
   11cd8:	0010f400 	andseq	pc, r0, r0, lsl #8
   11cdc:	00002408 	andeq	r2, r0, r8, lsl #8
   11ce0:	8a9c0100 	bhi	fe7120e8 <BootRAM+0xd682889>
   11ce4:	18000007 	stmdane	r0, {r0, r1, r2}
   11ce8:	00727470 	rsbseq	r7, r2, r0, ror r4
   11cec:	036a3201 	cmneq	sl, #268435456	; 0x10000000
   11cf0:	1c1e0000 	ldcne	0, cr0, [lr], {-0}
   11cf4:	08190000 	ldmdaeq	r9, {}	; <UNPREDICTABLE>
   11cf8:	0100005a 	qaddeq	r0, sl, r0
   11cfc:	00002532 	andeq	r2, r0, r2, lsr r5
   11d00:	001c4a00 	andseq	r4, ip, r0, lsl #20
   11d04:	65721a00 	ldrbvs	r1, [r2, #-2560]!	; 0xfffff600
   11d08:	36010074 			; <UNDEFINED> instruction: 0x36010074
   11d0c:	00000119 	andeq	r0, r0, r9, lsl r1
   11d10:	431b5001 	tstmi	fp, #1
   11d14:	0100005a 	qaddeq	r0, sl, r0
   11d18:	00011737 	andeq	r1, r1, r7, lsr r7
   11d1c:	00077800 	andeq	r7, r7, r0, lsl #16
   11d20:	00251400 	eoreq	r1, r5, r0, lsl #8
   11d24:	1c000000 	stcne	0, cr0, [r0], {-0}
   11d28:	08001104 	stmdaeq	r0, {r2, r8, ip}
   11d2c:	00000795 	muleq	r0, r5, r7
   11d30:	0350011d 	cmpeq	r0, #1073741831	; 0x40000007
   11d34:	005101f3 	ldrsheq	r0, [r1], #-19	; 0xffffffed
   11d38:	52ad1e00 	adcpl	r1, sp, #0, 28
   11d3c:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
   11d40:	00000030 	andeq	r0, r0, r0, lsr r0
   11d44:	005a431f 	subseq	r4, sl, pc, lsl r3
   11d48:	005a4300 	subseq	r4, sl, r0, lsl #6
   11d4c:	00370100 	eorseq	r0, r7, r0, lsl #2
   11d50:	0000012e 	andeq	r0, r0, lr, lsr #2
   11d54:	3a480004 	bcc	1211d6c <_Min_Stack_Size+0x1211b6c>
   11d58:	01040000 	mrseq	r0, (UNDEF: 4)
   11d5c:	00004ee6 	andeq	r4, r0, r6, ror #29
   11d60:	005a4e0c 	subseq	r4, sl, ip, lsl #28
   11d64:	0054a100 	subseq	sl, r4, r0, lsl #2
   11d68:	00111800 	andseq	r1, r1, r0, lsl #16
   11d6c:	00008c08 	andeq	r8, r0, r8, lsl #24
   11d70:	006f2c00 	rsbeq	r2, pc, r0, lsl #24
   11d74:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
   11d78:	00746e69 	rsbseq	r6, r4, r9, ror #28
   11d7c:	00571303 	subseq	r1, r7, r3, lsl #6
   11d80:	37d80200 	ldrbcc	r0, [r8, r0, lsl #4]
   11d84:	04000000 	streq	r0, [r0], #-0
   11d88:	01ce0704 	biceq	r0, lr, r4, lsl #14
   11d8c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
   11d90:	0000b805 	andeq	fp, r0, r5, lsl #16
   11d94:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
   11d98:	000002f8 	strdeq	r0, [r0], -r8
   11d9c:	92060104 	andls	r0, r6, #4, 2
   11da0:	04000001 	streq	r0, [r0], #-1
   11da4:	01900801 	orrseq	r0, r0, r1, lsl #16
   11da8:	02040000 	andeq	r0, r4, #0
   11dac:	00009505 	andeq	r9, r0, r5, lsl #10
   11db0:	07020400 	streq	r0, [r2, -r0, lsl #8]
   11db4:	000001f2 	strdeq	r0, [r0], -r2
   11db8:	bd050404 	cfstrslt	mvf0, [r5, #-16]
   11dbc:	04000000 	streq	r0, [r0], #-0
   11dc0:	01c90704 	biceq	r0, r9, r4, lsl #14
   11dc4:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
   11dc8:	0001c407 	andeq	ip, r1, r7, lsl #8
   11dcc:	07040400 	streq	r0, [r4, -r0, lsl #8]
   11dd0:	00000059 	andeq	r0, r0, r9, asr r0
   11dd4:	01040405 	tsteq	r4, r5, lsl #8
   11dd8:	00019908 	andeq	r9, r1, r8, lsl #18
   11ddc:	58ee0600 	stmiapl	lr!, {r9, sl}^
   11de0:	15030000 	strne	r0, [r3, #-0]
   11de4:	00000084 	andeq	r0, r0, r4, lsl #1
   11de8:	08001118 	stmdaeq	r0, {r3, r4, r8, ip}
   11dec:	0000008c 	andeq	r0, r0, ip, lsl #1
   11df0:	01199c01 	tsteq	r9, r1, lsl #24
   11df4:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
   11df8:	0100005a 	qaddeq	r0, sl, r0
   11dfc:	00011948 	andeq	r1, r1, r8, asr #18
   11e00:	001c6b00 	andseq	r6, ip, r0, lsl #22
   11e04:	00630800 	rsbeq	r0, r3, r0, lsl #16
   11e08:	00254801 	eoreq	r4, r5, r1, lsl #16
   11e0c:	1ca50000 	stcne	0, cr0, [r5]
   11e10:	5e070000 	cdppl	0, 0, cr0, cr7, cr0, {0}
   11e14:	0100003a 	tsteq	r0, sl, lsr r0
   11e18:	00002c48 	andeq	r2, r0, r8, asr #24
   11e1c:	001cf800 	andseq	pc, ip, r0, lsl #16
   11e20:	72730900 	rsbsvc	r0, r3, #0, 18
   11e24:	4d010063 	stcmi	0, cr0, [r1, #-396]	; 0xfffffe74
   11e28:	00000120 	andeq	r0, r0, r0, lsr #2
   11e2c:	00001d39 	andeq	r1, r0, r9, lsr sp
   11e30:	01006409 	tsteq	r0, r9, lsl #8
   11e34:	0000534e 	andeq	r5, r0, lr, asr #6
   11e38:	001db300 	andseq	fp, sp, r0, lsl #6
   11e3c:	5a490a00 	bpl	1254644 <_Min_Stack_Size+0x1254444>
   11e40:	51010000 	mrspl	r0, (UNDEF: 1)
   11e44:	0000012b 	andeq	r0, r0, fp, lsr #2
   11e48:	00001ddf 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   11e4c:	001ccc0a 	andseq	ip, ip, sl, lsl #24
   11e50:	6f520100 	svcvs	0x00520100
   11e54:	fd000000 	stc2	0, cr0, [r0, #-0]
   11e58:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
   11e5c:	53010069 	movwpl	r0, #4201	; 0x1069
   11e60:	00000037 	andeq	r0, r0, r7, lsr r0
   11e64:	00001e10 	andeq	r1, r0, r0, lsl lr
   11e68:	1f040b00 	svcne	0x00040b00
   11e6c:	0c000001 	stceq	0, cr0, [r0], {1}
   11e70:	0126040b 			; <UNDEFINED> instruction: 0x0126040b
   11e74:	530d0000 	movwpl	r0, #53248	; 0xd000
   11e78:	0b000000 	bleq	11e80 <_Min_Stack_Size+0x11c80>
   11e7c:	00006f04 	andeq	r6, r0, r4, lsl #30
   11e80:	01340000 	teqeq	r4, r0
   11e84:	00040000 	andeq	r0, r4, r0
   11e88:	00003af3 	strdeq	r3, [r0], -r3	; <UNPREDICTABLE>
   11e8c:	4ee60104 	cdpmi	1, 14, cr0, cr6, cr4, {0}
   11e90:	920c0000 	andls	r0, ip, #0
   11e94:	3f00005a 	svccc	0x0000005a
   11e98:	a400004f 	strge	r0, [r0], #-79	; 0xffffffb1
   11e9c:	c6080011 			; <UNDEFINED> instruction: 0xc6080011
   11ea0:	4d000000 	stcmi	0, cr0, [r0, #-0]
   11ea4:	02000070 	andeq	r0, r0, #112	; 0x70
   11ea8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   11eac:	13030074 	movwne	r0, #12404	; 0x3074
   11eb0:	02000057 	andeq	r0, r0, #87	; 0x57
   11eb4:	000037d8 	ldrdeq	r3, [r0], -r8
   11eb8:	07040400 	streq	r0, [r4, -r0, lsl #8]
   11ebc:	000001ce 	andeq	r0, r0, lr, asr #3
   11ec0:	b8050804 	stmdalt	r5, {r2, fp}
   11ec4:	04000000 	streq	r0, [r0], #-0
   11ec8:	02f80408 	rscseq	r0, r8, #8, 8	; 0x8000000
   11ecc:	01040000 	mrseq	r0, (UNDEF: 4)
   11ed0:	00019206 	andeq	r9, r1, r6, lsl #4
   11ed4:	08010400 	stmdaeq	r1, {sl}
   11ed8:	00000190 	muleq	r0, r0, r1
   11edc:	95050204 	strls	r0, [r5, #-516]	; 0xfffffdfc
   11ee0:	04000000 	streq	r0, [r0], #-0
   11ee4:	01f20702 	mvnseq	r0, r2, lsl #14
   11ee8:	04040000 	streq	r0, [r4], #-0
   11eec:	0000bd05 	andeq	fp, r0, r5, lsl #26
   11ef0:	07040400 	streq	r0, [r4, -r0, lsl #8]
   11ef4:	000001c9 	andeq	r0, r0, r9, asr #3
   11ef8:	c4070804 	strgt	r0, [r7], #-2052	; 0xfffff7fc
   11efc:	04000001 	streq	r0, [r0], #-1
   11f00:	00590704 	subseq	r0, r9, r4, lsl #14
   11f04:	04050000 	streq	r0, [r5], #-0
   11f08:	008c0406 	addeq	r0, ip, r6, lsl #8
   11f0c:	01040000 	mrseq	r0, (UNDEF: 4)
   11f10:	00019908 	andeq	r9, r1, r8, lsl #18
   11f14:	99040600 	stmdbls	r4, {r9, sl}
   11f18:	07000000 	streq	r0, [r0, -r0]
   11f1c:	0000008c 	andeq	r0, r0, ip, lsl #1
   11f20:	00587408 	subseq	r7, r8, r8, lsl #8
   11f24:	84180300 	ldrhi	r0, [r8], #-768	; 0xfffffd00
   11f28:	a4000000 	strge	r0, [r0], #-0
   11f2c:	c6080011 			; <UNDEFINED> instruction: 0xc6080011
   11f30:	01000000 	mrseq	r0, (UNDEF: 0)
   11f34:	00011f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
   11f38:	5ac10900 	bpl	ff054340 <BootRAM+0xdfc4ae1>
   11f3c:	3c010000 	stccc	0, cr0, [r1], {-0}
   11f40:	00000084 	andeq	r0, r0, r4, lsl #1
   11f44:	890a5001 	stmdbhi	sl, {r0, ip, lr}
   11f48:	0100005a 	qaddeq	r0, sl, r0
   11f4c:	00011f3c 	andeq	r1, r1, ip, lsr pc
   11f50:	001e2500 	andseq	r2, lr, r0, lsl #10
   11f54:	3a5e0a00 	bcc	179475c <_Min_Stack_Size+0x179455c>
   11f58:	3c010000 	stccc	0, cr0, [r1], {-0}
   11f5c:	0000002c 	andeq	r0, r0, ip, lsr #32
   11f60:	00001e78 	andeq	r1, r0, r8, ror lr
   11f64:	7473640b 	ldrbtvc	r6, [r3], #-1035	; 0xfffffbf5
   11f68:	86590100 	ldrbhi	r0, [r9], -r0, lsl #2
   11f6c:	21000000 	mrscs	r0, (UNDEF: 0)
   11f70:	0b00001f 	bleq	11ff4 <_Min_Stack_Size+0x11df4>
   11f74:	00637273 	rsbeq	r7, r3, r3, ror r2
   11f78:	00935a01 	addseq	r5, r3, r1, lsl #20
   11f7c:	1f960000 	svcne	0x00960000
   11f80:	bf0c0000 	svclt	0x000c0000
   11f84:	01000055 	qaddeq	r0, r5, r0
   11f88:	0001265b 	andeq	r2, r1, fp, asr r6
   11f8c:	00202100 	eoreq	r2, r0, r0, lsl #2
   11f90:	55cb0c00 	strbpl	r0, [fp, #3072]	; 0xc00
   11f94:	5c010000 	stcpl	0, cr0, [r1], {-0}
   11f98:	0000012c 	andeq	r0, r0, ip, lsr #2
   11f9c:	0000204f 	andeq	r2, r0, pc, asr #32
   11fa0:	25040600 	strcs	r0, [r4, #-1536]	; 0xfffffa00
   11fa4:	0d000001 	stceq	0, cr0, [r0, #-4]
   11fa8:	00680406 	rsbeq	r0, r8, r6, lsl #8
   11fac:	04060000 	streq	r0, [r6], #-0
   11fb0:	00000132 	andeq	r0, r0, r2, lsr r1
   11fb4:	00006807 	andeq	r6, r0, r7, lsl #16
   11fb8:	087e0000 	ldmdaeq	lr!, {}^	; <UNPREDICTABLE>
   11fbc:	00040000 	andeq	r0, r4, r0
   11fc0:	00003b9e 	muleq	r0, lr, fp
   11fc4:	4ee60104 	cdpmi	1, 14, cr0, cr6, cr4, {0}
   11fc8:	1a0c0000 	bne	311fd0 <_Min_Stack_Size+0x311dd0>
   11fcc:	0d000057 	stceq	0, cr0, [r0, #-348]	; 0xfffffea4
   11fd0:	6c000051 	stcvs	0, cr0, [r0], {81}	; 0x51
   11fd4:	48080012 	stmdami	r8, {r1, r4}
   11fd8:	6a000000 	bvs	11fe0 <_Min_Stack_Size+0x11de0>
   11fdc:	02000071 	andeq	r0, r0, #113	; 0x71
   11fe0:	01920601 	orrseq	r0, r2, r1, lsl #12
   11fe4:	01020000 	mrseq	r0, (UNDEF: 2)
   11fe8:	00019008 	andeq	r9, r1, r8
   11fec:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
   11ff0:	00000095 	muleq	r0, r5, r0
   11ff4:	f2070202 	vhsub.s8	d0, d7, d2
   11ff8:	02000001 	andeq	r0, r0, #1
   11ffc:	00bd0504 	adcseq	r0, sp, r4, lsl #10
   12000:	04020000 	streq	r0, [r2], #-0
   12004:	0001c907 	andeq	ip, r1, r7, lsl #18
   12008:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
   1200c:	000000b8 	strheq	r0, [r0], -r8
   12010:	c4070802 	strgt	r0, [r7], #-2050	; 0xfffff7fe
   12014:	03000001 	movweq	r0, #1
   12018:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   1201c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
   12020:	0001ce07 	andeq	ip, r1, r7, lsl #28
   12024:	57130400 	ldrpl	r0, [r3, -r0, lsl #8]
   12028:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
   1202c:	00000064 	andeq	r0, r0, r4, rrx
   12030:	f8040802 			; <UNDEFINED> instruction: 0xf8040802
   12034:	05000002 	streq	r0, [r0, #-2]
   12038:	51cb0404 	bicpl	r0, fp, r4, lsl #8
   1203c:	07030000 	streq	r0, [r3, -r0]
   12040:	0000005d 	andeq	r0, r0, sp, asr r0
   12044:	0051ba04 	subseq	fp, r1, r4, lsl #20
   12048:	412c0400 			; <UNDEFINED> instruction: 0x412c0400
   1204c:	04000000 	streq	r0, [r0], #-0
   12050:	000052a4 	andeq	r5, r0, r4, lsr #5
   12054:	00417204 	subeq	r7, r1, r4, lsl #4
   12058:	87060000 	strhi	r0, [r6, -r0]
   1205c:	02000051 	andeq	r0, r0, #81	; 0x51
   12060:	00640165 	rsbeq	r0, r4, r5, ror #2
   12064:	04070000 	streq	r0, [r7], #-0
   12068:	00cba604 	sbceq	sl, fp, r4, lsl #12
   1206c:	81080000 	mrshi	r0, (UNDEF: 8)
   12070:	04000051 	streq	r0, [r0], #-81	; 0xffffffaf
   12074:	0000a0a8 	andeq	sl, r0, r8, lsr #1
   12078:	50cf0800 	sbcpl	r0, pc, r0, lsl #16
   1207c:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
   12080:	000000cb 	andeq	r0, r0, fp, asr #1
   12084:	002c0900 	eoreq	r0, ip, r0, lsl #18
   12088:	00db0000 	sbcseq	r0, fp, r0
   1208c:	db0a0000 	blle	292094 <_Min_Stack_Size+0x291e94>
   12090:	03000000 	movweq	r0, #0
   12094:	07040200 	streq	r0, [r4, -r0, lsl #4]
   12098:	00000059 	andeq	r0, r0, r9, asr r0
   1209c:	a304080b 	movwge	r0, #18443	; 0x480b
   120a0:	00000103 	andeq	r0, r0, r3, lsl #2
   120a4:	00528e0c 	subseq	r8, r2, ip, lsl #28
   120a8:	5da50400 	cfstrspl	mvf0, [r5]
   120ac:	00000000 	andeq	r0, r0, r0
   120b0:	0052960c 	subseq	r9, r2, ip, lsl #12
   120b4:	acaa0400 	cfstrsge	mvf0, [sl]
   120b8:	04000000 	streq	r0, [r0], #-0
   120bc:	522d0400 	eorpl	r0, sp, #0, 8
   120c0:	ab040000 	blge	1120c8 <_Min_Stack_Size+0x111ec8>
   120c4:	000000e2 	andeq	r0, r0, r2, ror #1
   120c8:	0050a004 	subseq	sl, r0, r4
   120cc:	7faf0400 	svcvc	0x00af0400
   120d0:	04000000 	streq	r0, [r0], #-0
   120d4:	000052e0 	andeq	r5, r0, r0, ror #5
   120d8:	00481605 	subeq	r1, r8, r5, lsl #12
   120dc:	a90d0000 	stmdbge	sp, {}	; <UNPREDICTABLE>
   120e0:	18000050 	stmdane	r0, {r4, r6}
   120e4:	01772d05 	cmneq	r7, r5, lsl #26
   120e8:	4e0c0000 	cdpmi	0, 0, cr0, cr12, cr0, {0}
   120ec:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   120f0:	0001772f 	andeq	r7, r1, pc, lsr #14
   120f4:	5f0e0000 	svcpl	0x000e0000
   120f8:	3005006b 	andcc	r0, r5, fp, rrx
   120fc:	0000005d 	andeq	r0, r0, sp, asr r0
   12100:	52800c04 	addpl	r0, r0, #4, 24	; 0x400
   12104:	30050000 	andcc	r0, r5, r0
   12108:	0000005d 	andeq	r0, r0, sp, asr r0
   1210c:	509a0c08 	addspl	r0, sl, r8, lsl #24
   12110:	30050000 	andcc	r0, r5, r0
   12114:	0000005d 	andeq	r0, r0, sp, asr r0
   12118:	52fb0c0c 	rscspl	r0, fp, #12, 24	; 0xc00
   1211c:	30050000 	andcc	r0, r5, r0
   12120:	0000005d 	andeq	r0, r0, sp, asr r0
   12124:	785f0e10 	ldmdavc	pc, {r4, r9, sl, fp}^	; <UNPREDICTABLE>
   12128:	7d310500 	cfldr32vc	mvfx0, [r1, #-0]
   1212c:	14000001 	strne	r0, [r0], #-1
   12130:	24040f00 	strcs	r0, [r4], #-3840	; 0xfffff100
   12134:	09000001 	stmdbeq	r0, {r0}
   12138:	00000119 	andeq	r0, r0, r9, lsl r1
   1213c:	0000018d 	andeq	r0, r0, sp, lsl #3
   12140:	0000db0a 	andeq	sp, r0, sl, lsl #22
   12144:	0d000000 	stceq	0, cr0, [r0, #-0]
   12148:	000050ca 	andeq	r5, r0, sl, asr #1
   1214c:	06350524 	ldrteq	r0, [r5], -r4, lsr #10
   12150:	0c000002 	stceq	0, cr0, [r0], {2}
   12154:	0000502e 	andeq	r5, r0, lr, lsr #32
   12158:	005d3705 	subseq	r3, sp, r5, lsl #14
   1215c:	0c000000 	stceq	0, cr0, [r0], {-0}
   12160:	000052b3 			; <UNDEFINED> instruction: 0x000052b3
   12164:	005d3805 	subseq	r3, sp, r5, lsl #16
   12168:	0c040000 	stceq	0, cr0, [r4], {-0}
   1216c:	0000503d 	andeq	r5, r0, sp, lsr r0
   12170:	005d3905 	subseq	r3, sp, r5, lsl #18
   12174:	0c080000 	stceq	0, cr0, [r8], {-0}
   12178:	00005358 	andeq	r5, r0, r8, asr r3
   1217c:	005d3a05 	subseq	r3, sp, r5, lsl #20
   12180:	0c0c0000 	stceq	0, cr0, [ip], {-0}
   12184:	000051a6 	andeq	r5, r0, r6, lsr #3
   12188:	005d3b05 	subseq	r3, sp, r5, lsl #22
   1218c:	0c100000 	ldceq	0, cr0, [r0], {-0}
   12190:	00005196 	muleq	r0, r6, r1
   12194:	005d3c05 	subseq	r3, sp, r5, lsl #24
   12198:	0c140000 	ldceq	0, cr0, [r4], {-0}
   1219c:	00005300 	andeq	r5, r0, r0, lsl #6
   121a0:	005d3d05 	subseq	r3, sp, r5, lsl #26
   121a4:	0c180000 	ldceq	0, cr0, [r8], {-0}
   121a8:	00005215 	andeq	r5, r0, r5, lsl r2
   121ac:	005d3e05 	subseq	r3, sp, r5, lsl #28
   121b0:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
   121b4:	00005324 	andeq	r5, r0, r4, lsr #6
   121b8:	005d3f05 	subseq	r3, sp, r5, lsl #30
   121bc:	00200000 	eoreq	r0, r0, r0
   121c0:	00521f0d 	subseq	r1, r2, sp, lsl #30
   121c4:	73050800 	movwvc	r0, #22528	; 0x5800
   121c8:	0000022b 	andeq	r0, r0, fp, lsr #4
   121cc:	0033a10c 	eorseq	sl, r3, ip, lsl #2
   121d0:	2b740500 	blcs	1d135d8 <_Min_Stack_Size+0x1d133d8>
   121d4:	00000002 	andeq	r0, r0, r2
   121d8:	0057ca0c 	subseq	ip, r7, ip, lsl #20
   121dc:	5d750500 	cfldr64pl	mvdx0, [r5, #-0]
   121e0:	04000000 	streq	r0, [r0], #-0
   121e4:	2c040f00 	stccs	15, cr0, [r4], {-0}
   121e8:	10000000 	andne	r0, r0, r0
   121ec:	000052d4 	ldrdeq	r5, [r0], -r4
   121f0:	01720560 	cmneq	r2, r0, ror #10
   121f4:	0000035d 	andeq	r0, r0, sp, asr r3
   121f8:	0052ac11 	subseq	sl, r2, r1, lsl ip
   121fc:	01760500 	cmneq	r6, r0, lsl #10
   12200:	0000005d 	andeq	r0, r0, sp, asr r0
   12204:	55ed1100 	strbpl	r1, [sp, #256]!	; 0x100
   12208:	7b050000 	blvc	152210 <_Min_Stack_Size+0x152010>
   1220c:	00059201 	andeq	r9, r5, r1, lsl #4
   12210:	fd110400 	ldc2	4, cr0, [r1, #-0]
   12214:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
   12218:	0592017b 	ldreq	r0, [r2, #379]	; 0x17b
   1221c:	11080000 	mrsne	r0, (UNDEF: 8)
   12220:	000056b8 			; <UNDEFINED> instruction: 0x000056b8
   12224:	92017b05 	andls	r7, r1, #5120	; 0x1400
   12228:	0c000005 	stceq	0, cr0, [r0], {5}
   1222c:	00526111 	subseq	r6, r2, r1, lsl r1
   12230:	017d0500 	cmneq	sp, r0, lsl #10
   12234:	0000005d 	andeq	r0, r0, sp, asr r0
   12238:	4fe21110 	svcmi	0x00e21110
   1223c:	7f050000 	svcvc	0x00050000
   12240:	0004ab01 	andeq	sl, r4, r1, lsl #22
   12244:	af111400 	svcge	0x00111400
   12248:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
   1224c:	005d0181 	subseq	r0, sp, r1, lsl #3
   12250:	11180000 	tstne	r8, r0
   12254:	000050e7 	andeq	r5, r0, r7, ror #1
   12258:	5d018305 	stcpl	3, cr8, [r1, #-20]	; 0xffffffec
   1225c:	1c000000 	stcne	0, cr0, [r0], {-0}
   12260:	00526611 	subseq	r6, r2, r1, lsl r6
   12264:	01840500 	orreq	r0, r4, r0, lsl #10
   12268:	000004dc 	ldrdeq	r0, [r0], -ip
   1226c:	6d5f1220 	lfmvs	f1, 2, [pc, #-128]	; 121f4 <_Min_Stack_Size+0x11ff4>
   12270:	86050070 			; <UNDEFINED> instruction: 0x86050070
   12274:	0006df01 	andeq	sp, r6, r1, lsl #30
   12278:	76112400 	ldrvc	r2, [r1], -r0, lsl #8
   1227c:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   12280:	06f00188 	ldrbteq	r0, [r0], r8, lsl #3
   12284:	11280000 			; <UNDEFINED> instruction: 0x11280000
   12288:	000050b1 	strheq	r5, [r0], -r1
   1228c:	5d018a05 	vstrpl	s16, [r1, #-20]	; 0xffffffec
   12290:	2c000000 	stccs	0, cr0, [r0], {-0}
   12294:	0050f911 	subseq	pc, r0, r1, lsl r9	; <UNPREDICTABLE>
   12298:	018d0500 	orreq	r0, sp, r0, lsl #10
   1229c:	0000005d 	andeq	r0, r0, sp, asr r0
   122a0:	50731130 	rsbspl	r1, r3, r0, lsr r1
   122a4:	8e050000 	cdphi	0, 0, cr0, cr5, cr0, {0}
   122a8:	0004ab01 	andeq	sl, r4, r1, lsl #22
   122ac:	01113400 	tsteq	r1, r0, lsl #8
   122b0:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
   122b4:	06f60190 	usateq	r0, #22, r0, lsl #3
   122b8:	11380000 	teqne	r8, r0
   122bc:	0000532f 	andeq	r5, r0, pc, lsr #6
   122c0:	fc019105 	stc2	1, cr9, [r1], {5}
   122c4:	3c000006 	stccc	0, cr0, [r0], {6}
   122c8:	00516c11 	subseq	r6, r1, r1, lsl ip
   122cc:	01920500 	orrseq	r0, r2, r0, lsl #10
   122d0:	000004ab 	andeq	r0, r0, fp, lsr #9
   122d4:	53141140 	tstpl	r4, #64, 2
   122d8:	95050000 	strls	r0, [r5, #-0]
   122dc:	00070d01 	andeq	r0, r7, r1, lsl #26
   122e0:	54114400 	ldrpl	r4, [r1], #-1024	; 0xfffffc00
   122e4:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   122e8:	0557019d 	ldrbeq	r0, [r7, #-413]	; 0xfffffe63
   122ec:	11480000 	mrsne	r0, (UNDEF: 72)
   122f0:	00005047 	andeq	r5, r0, r7, asr #32
   122f4:	92019e05 	andls	r9, r1, #5, 28	; 0x50
   122f8:	54000005 	strpl	r0, [r0], #-5
   122fc:	0051a011 	subseq	sl, r1, r1, lsl r0
   12300:	019f0500 	orrseq	r0, pc, r0, lsl #10
   12304:	00000719 	andeq	r0, r0, r9, lsl r7
   12308:	4ffc1158 	svcmi	0x00fc1158
   1230c:	a0050000 	andge	r0, r5, r0
   12310:	0004ab01 	andeq	sl, r4, r1, lsl #22
   12314:	0f005c00 	svceq	0x00005c00
   12318:	00023104 	andeq	r3, r2, r4, lsl #2
   1231c:	52380d00 	eorspl	r0, r8, #0, 26
   12320:	05680000 	strbeq	r0, [r8, #-0]!
   12324:	00048db3 			; <UNDEFINED> instruction: 0x00048db3
   12328:	705f0e00 	subsvc	r0, pc, r0, lsl #28
   1232c:	2bb40500 	blcs	fed13734 <BootRAM+0xdc83ed5>
   12330:	00000002 	andeq	r0, r0, r2
   12334:	00725f0e 	rsbseq	r5, r2, lr, lsl #30
   12338:	005db505 	subseq	fp, sp, r5, lsl #10
   1233c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
   12340:	0500775f 	streq	r7, [r0, #-1887]	; 0xfffff8a1
   12344:	00005db6 			; <UNDEFINED> instruction: 0x00005db6
   12348:	630c0800 	movwvs	r0, #51200	; 0xc800
   1234c:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   12350:	000033b7 			; <UNDEFINED> instruction: 0x000033b7
   12354:	f50c0c00 			; <UNDEFINED> instruction: 0xf50c0c00
   12358:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   1235c:	000033b8 			; <UNDEFINED> instruction: 0x000033b8
   12360:	5f0e0e00 	svcpl	0x000e0e00
   12364:	05006662 	streq	r6, [r0, #-1634]	; 0xfffff99e
   12368:	000206b9 			; <UNDEFINED> instruction: 0x000206b9
   1236c:	080c1000 	stmdaeq	ip, {ip}
   12370:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   12374:	00005dba 			; <UNDEFINED> instruction: 0x00005dba
   12378:	eb0c1800 	bl	318380 <_Min_Stack_Size+0x318180>
   1237c:	0500000d 	streq	r0, [r0, #-13]
   12380:	00035dbd 			; <UNDEFINED> instruction: 0x00035dbd
   12384:	4c0c1c00 	stcmi	12, cr1, [ip], {-0}
   12388:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   1238c:	00007dc1 	andeq	r7, r0, r1, asr #27
   12390:	870c2000 	strhi	r2, [ip, -r0]
   12394:	0500003a 	streq	r0, [r0, #-58]	; 0xffffffc6
   12398:	0004b8c3 	andeq	fp, r4, r3, asr #17
   1239c:	e20c2400 	and	r2, ip, #0, 8
   123a0:	05000039 	streq	r0, [r0, #-57]	; 0xffffffc7
   123a4:	0004e7c5 	andeq	lr, r4, r5, asr #15
   123a8:	9e0c2800 	cdpls	8, 0, cr2, cr12, cr0, {0}
   123ac:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   123b0:	00050bc8 	andeq	r0, r5, r8, asr #23
   123b4:	3e0c2c00 	cdpcc	12, 0, cr2, cr12, cr0, {0}
   123b8:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
   123bc:	000525c9 	andeq	r2, r5, r9, asr #11
   123c0:	5f0e3000 	svcpl	0x000e3000
   123c4:	05006275 	streq	r6, [r0, #-629]	; 0xfffffd8b
   123c8:	000206cc 	andeq	r0, r2, ip, asr #13
   123cc:	5f0e3400 	svcpl	0x000e3400
   123d0:	05007075 	streq	r7, [r0, #-117]	; 0xffffff8b
   123d4:	00022bcd 	andeq	r2, r2, sp, asr #23
   123d8:	5f0e3c00 	svcpl	0x000e3c00
   123dc:	05007275 	streq	r7, [r0, #-629]	; 0xfffffd8b
   123e0:	00005dce 	andeq	r5, r0, lr, asr #27
   123e4:	370c4000 	strcc	r4, [ip, -r0]
   123e8:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   123ec:	00052bd1 	ldrdeq	r2, [r5], -r1
   123f0:	1e0c4400 	cfcpysne	mvf4, mvf12
   123f4:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
   123f8:	00053bd2 	ldrdeq	r3, [r5], -r2
   123fc:	5f0e4700 	svcpl	0x000e4700
   12400:	0500626c 	streq	r6, [r0, #-620]	; 0xfffffd94
   12404:	000206d5 	ldrdeq	r0, [r2], -r5
   12408:	6a0c4800 	bvs	324410 <_Min_Stack_Size+0x324210>
   1240c:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   12410:	00005dd8 	ldrdeq	r5, [r0], -r8
   12414:	4c0c5000 	stcmi	0, cr5, [ip], {-0}
   12418:	0500005b 	streq	r0, [r0, #-91]	; 0xffffffa5
   1241c:	00008ad9 	ldrdeq	r8, [r0], -r9
   12420:	3a0c5400 	bcc	327428 <_Min_Stack_Size+0x327228>
   12424:	05000035 	streq	r0, [r0, #-53]	; 0xffffffcb
   12428:	00010ee0 	andeq	r0, r1, r0, ror #29
   1242c:	400c5800 	andmi	r5, ip, r0, lsl #16
   12430:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   12434:	000103e2 	andeq	r0, r1, r2, ror #7
   12438:	8e0c5c00 	cdphi	12, 0, cr5, cr12, cr0, {0}
   1243c:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
   12440:	00005de3 	andeq	r5, r0, r3, ror #27
   12444:	13006400 	movwne	r6, #1024	; 0x400
   12448:	0000005d 	andeq	r0, r0, sp, asr r0
   1244c:	000004ab 	andeq	r0, r0, fp, lsr #9
   12450:	00035d14 	andeq	r5, r3, r4, lsl sp
   12454:	007d1400 	rsbseq	r1, sp, r0, lsl #8
   12458:	ab140000 	blge	512460 <_Min_Stack_Size+0x512260>
   1245c:	14000004 	strne	r0, [r0], #-4
   12460:	0000005d 	andeq	r0, r0, sp, asr r0
   12464:	b1040f00 	tstlt	r4, r0, lsl #30
   12468:	02000004 	andeq	r0, r0, #4
   1246c:	01990801 	orrseq	r0, r9, r1, lsl #16
   12470:	040f0000 	streq	r0, [pc], #-0	; 12478 <_Min_Stack_Size+0x12278>
   12474:	0000048d 	andeq	r0, r0, sp, lsl #9
   12478:	00005d13 	andeq	r5, r0, r3, lsl sp
   1247c:	0004dc00 	andeq	sp, r4, r0, lsl #24
   12480:	035d1400 	cmpeq	sp, #0, 8
   12484:	7d140000 	ldcvc	0, cr0, [r4, #-0]
   12488:	14000000 	strne	r0, [r0], #-0
   1248c:	000004dc 	ldrdeq	r0, [r0], -ip
   12490:	00005d14 	andeq	r5, r0, r4, lsl sp
   12494:	040f0000 	streq	r0, [pc], #-0	; 1249c <_Min_Stack_Size+0x1229c>
   12498:	000004e2 	andeq	r0, r0, r2, ror #9
   1249c:	0004b115 	andeq	fp, r4, r5, lsl r1
   124a0:	be040f00 	cdplt	15, 0, cr0, cr4, cr0, {0}
   124a4:	13000004 	movwne	r0, #4
   124a8:	00000095 	muleq	r0, r5, r0
   124ac:	0000050b 	andeq	r0, r0, fp, lsl #10
   124b0:	00035d14 	andeq	r5, r3, r4, lsl sp
   124b4:	007d1400 	rsbseq	r1, sp, r0, lsl #8
   124b8:	95140000 	ldrls	r0, [r4, #-0]
   124bc:	14000000 	strne	r0, [r0], #-0
   124c0:	0000005d 	andeq	r0, r0, sp, asr r0
   124c4:	ed040f00 	stc	15, cr0, [r4, #-0]
   124c8:	13000004 	movwne	r0, #4
   124cc:	0000005d 	andeq	r0, r0, sp, asr r0
   124d0:	00000525 	andeq	r0, r0, r5, lsr #10
   124d4:	00035d14 	andeq	r5, r3, r4, lsl sp
   124d8:	007d1400 	rsbseq	r1, sp, r0, lsl #8
   124dc:	0f000000 	svceq	0x00000000
   124e0:	00051104 	andeq	r1, r5, r4, lsl #2
   124e4:	002c0900 	eoreq	r0, ip, r0, lsl #18
   124e8:	053b0000 	ldreq	r0, [fp, #-0]!
   124ec:	db0a0000 	blle	2924f4 <_Min_Stack_Size+0x2922f4>
   124f0:	02000000 	andeq	r0, r0, #0
   124f4:	002c0900 	eoreq	r0, ip, r0, lsl #18
   124f8:	054b0000 	strbeq	r0, [fp, #-0]
   124fc:	db0a0000 	blle	292504 <_Min_Stack_Size+0x292304>
   12500:	00000000 	andeq	r0, r0, r0
   12504:	52260600 	eorpl	r0, r6, #0, 12
   12508:	1d050000 	stcne	0, cr0, [r5, #-0]
   1250c:	00036301 	andeq	r6, r3, r1, lsl #6
   12510:	5b0b1000 	blpl	2d6518 <_Min_Stack_Size+0x2d6318>
   12514:	050c0000 	streq	r0, [ip, #-0]
   12518:	058c0121 	streq	r0, [ip, #289]	; 0x121
   1251c:	4e110000 	cdpmi	0, 1, cr0, cr1, cr0, {0}
   12520:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   12524:	058c0123 	streq	r0, [ip, #291]	; 0x123
   12528:	11000000 	mrsne	r0, (UNDEF: 0)
   1252c:	00005106 	andeq	r5, r0, r6, lsl #2
   12530:	5d012405 	cfstrspl	mvf2, [r1, #-20]	; 0xffffffec
   12534:	04000000 	streq	r0, [r0], #-0
   12538:	00520f11 	subseq	r0, r2, r1, lsl pc
   1253c:	01250500 			; <UNDEFINED> instruction: 0x01250500
   12540:	00000592 	muleq	r0, r2, r5
   12544:	040f0008 	streq	r0, [pc], #-8	; 1254c <_Min_Stack_Size+0x1234c>
   12548:	00000557 	andeq	r0, r0, r7, asr r5
   1254c:	054b040f 	strbeq	r0, [fp, #-1039]	; 0xfffffbf1
   12550:	da100000 	ble	412558 <_Min_Stack_Size+0x412358>
   12554:	1800004f 	stmdane	r0, {r0, r1, r2, r3, r6}
   12558:	da013d05 	ble	61974 <_Min_Stack_Size+0x61774>
   1255c:	11000005 	tstne	r0, r5
   12560:	00005288 	andeq	r5, r0, r8, lsl #5
   12564:	da013e05 	ble	61d80 <_Min_Stack_Size+0x61b80>
   12568:	00000005 	andeq	r0, r0, r5
   1256c:	0052bc11 	subseq	fp, r2, r1, lsl ip
   12570:	013f0500 	teqeq	pc, r0, lsl #10
   12574:	000005da 	ldrdeq	r0, [r0], -sl
   12578:	52db1106 	sbcspl	r1, fp, #-2147483647	; 0x80000001
   1257c:	40050000 	andmi	r0, r5, r0
   12580:	00003a01 	andeq	r3, r0, r1, lsl #20
   12584:	49110c00 	ldmdbmi	r1, {sl, fp}
   12588:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   1258c:	00560143 	subseq	r0, r6, r3, asr #2
   12590:	00100000 	andseq	r0, r0, r0
   12594:	00003a09 	andeq	r3, r0, r9, lsl #20
   12598:	0005ea00 	andeq	lr, r5, r0, lsl #20
   1259c:	00db0a00 	sbcseq	r0, fp, r0, lsl #20
   125a0:	00020000 	andeq	r0, r2, r0
   125a4:	00505c10 	subseq	r5, r0, r0, lsl ip
   125a8:	56051000 	strpl	r1, [r5], -r0
   125ac:	00062c01 	andeq	r2, r6, r1, lsl #24
   125b0:	51791100 	cmnpl	r9, r0, lsl #2
   125b4:	59050000 	stmdbpl	r5, {}	; <UNPREDICTABLE>
   125b8:	00017701 	andeq	r7, r1, r1, lsl #14
   125bc:	c0110000 	andsgt	r0, r1, r0
   125c0:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   125c4:	005d015a 	subseq	r0, sp, sl, asr r1
   125c8:	11040000 	mrsne	r0, (UNDEF: 4)
   125cc:	00005353 	andeq	r5, r0, r3, asr r3
   125d0:	77015b05 	strvc	r5, [r1, -r5, lsl #22]
   125d4:	08000001 	stmdaeq	r0, {r0}
   125d8:	0051c111 	subseq	ip, r1, r1, lsl r1
   125dc:	015c0500 	cmpeq	ip, r0, lsl #10
   125e0:	0000062c 	andeq	r0, r0, ip, lsr #12
   125e4:	040f000c 	streq	r0, [pc], #-12	; 125ec <_Min_Stack_Size+0x123ec>
   125e8:	00000177 	andeq	r0, r0, r7, ror r1
   125ec:	0052cf10 	subseq	ip, r2, r0, lsl pc
   125f0:	60055000 	andvs	r5, r5, r0
   125f4:	0006cf01 	andeq	ip, r6, r1, lsl #30
   125f8:	52c21100 	sbcpl	r1, r2, #0, 2
   125fc:	63050000 	movwvs	r0, #20480	; 0x5000
   12600:	0004ab01 	andeq	sl, r4, r1, lsl #22
   12604:	54110000 	ldrpl	r0, [r1], #-0
   12608:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   1260c:	01030164 	tsteq	r3, r4, ror #2
   12610:	11040000 	mrsne	r0, (UNDEF: 4)
   12614:	00005020 	andeq	r5, r0, r0, lsr #32
   12618:	03016505 	movweq	r6, #5381	; 0x1505
   1261c:	0c000001 	stceq	0, cr0, [r0], {1}
   12620:	00534511 	subseq	r4, r3, r1, lsl r5
   12624:	01660500 	cmneq	r6, r0, lsl #10
   12628:	00000103 	andeq	r0, r0, r3, lsl #2
   1262c:	530a1114 	movwpl	r1, #41236	; 0xa114
   12630:	67050000 	strvs	r0, [r5, -r0]
   12634:	0006cf01 	andeq	ip, r6, r1, lsl #30
   12638:	e8111c00 	ldmda	r1, {sl, fp, ip}
   1263c:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   12640:	005d0168 	subseq	r0, sp, r8, ror #2
   12644:	11240000 			; <UNDEFINED> instruction: 0x11240000
   12648:	0000508c 	andeq	r5, r0, ip, lsl #1
   1264c:	03016905 	movweq	r6, #6405	; 0x1905
   12650:	28000001 	stmdacs	r0, {r0}
   12654:	00501111 	subseq	r1, r0, r1, lsl r1
   12658:	016a0500 	cmneq	sl, r0, lsl #10
   1265c:	00000103 	andeq	r0, r0, r3, lsl #2
   12660:	507b1130 	rsbspl	r1, fp, r0, lsr r1
   12664:	6b050000 	blvs	15266c <_Min_Stack_Size+0x15246c>
   12668:	00010301 	andeq	r0, r1, r1, lsl #6
   1266c:	ed113800 	ldc	8, cr3, [r1, #-0]
   12670:	0500004f 	streq	r0, [r0, #-79]	; 0xffffffb1
   12674:	0103016c 	tsteq	r3, ip, ror #2
   12678:	11400000 	mrsne	r0, (UNDEF: 64)
   1267c:	000050d6 	ldrdeq	r5, [r0], -r6
   12680:	03016d05 	movweq	r6, #7429	; 0x1d05
   12684:	48000001 	stmdami	r0, {r0}
   12688:	04b10900 	ldrteq	r0, [r1], #2304	; 0x900
   1268c:	06df0000 	ldrbeq	r0, [pc], r0
   12690:	db0a0000 	blle	292698 <_Min_Stack_Size+0x292498>
   12694:	07000000 	streq	r0, [r0, -r0]
   12698:	ea040f00 	b	1162a0 <_Min_Stack_Size+0x1160a0>
   1269c:	16000005 	strne	r0, [r0], -r5
   126a0:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   126a4:	00035d14 	andeq	r5, r3, r4, lsl sp
   126a8:	040f0000 	streq	r0, [pc], #-0	; 126b0 <_Min_Stack_Size+0x124b0>
   126ac:	000006e5 	andeq	r0, r0, r5, ror #13
   126b0:	0598040f 	ldreq	r0, [r8, #1039]	; 0x40f
   126b4:	040f0000 	streq	r0, [pc], #-0	; 126bc <_Min_Stack_Size+0x124bc>
   126b8:	0000018d 	andeq	r0, r0, sp, lsl #3
   126bc:	00070d16 	andeq	r0, r7, r6, lsl sp
   126c0:	005d1400 	subseq	r1, sp, r0, lsl #8
   126c4:	0f000000 	svceq	0x00000000
   126c8:	00071304 	andeq	r1, r7, r4, lsl #6
   126cc:	02040f00 	andeq	r0, r4, #0, 30
   126d0:	0f000007 	svceq	0x00000007
   126d4:	00063204 	andeq	r3, r6, r4, lsl #4
   126d8:	570c0400 	strpl	r0, [ip, -r0, lsl #8]
   126dc:	7b010000 	blvc	526e4 <_Min_Stack_Size+0x524e4>
   126e0:	0000006b 	andeq	r0, r0, fp, rrx
   126e4:	00575f0d 	subseq	r5, r7, sp, lsl #30
   126e8:	7d010800 	stcvc	8, cr0, [r1, #-0]
   126ec:	0000074f 	andeq	r0, r0, pc, asr #14
   126f0:	0057cb0c 	subseq	ip, r7, ip, lsl #22
   126f4:	418f0100 	orrmi	r0, pc, r0, lsl #2
   126f8:	00000000 	andeq	r0, r0, r0
   126fc:	00524f0c 	subseq	r4, r2, ip, lsl #30
   12700:	4f920100 	svcmi	0x00920100
   12704:	04000007 	streq	r0, [r0], #-7
   12708:	2a040f00 	bcs	116310 <_Min_Stack_Size+0x116110>
   1270c:	04000007 	streq	r0, [r0], #-7
   12710:	00005766 	andeq	r5, r0, r6, ror #14
   12714:	072a9301 	streq	r9, [sl, -r1, lsl #6]!
   12718:	36170000 	ldrcc	r0, [r7], -r0
   1271c:	01000059 	qaddeq	r0, r9, r0
   12720:	007d01c1 	rsbseq	r0, sp, r1, asr #3
   12724:	126c0000 	rsbne	r0, ip, #0
   12728:	00480800 	subeq	r0, r8, r0, lsl #16
   1272c:	9c010000 	stcls	0, cr0, [r1], {-0}
   12730:	0000084f 	andeq	r0, r0, pc, asr #16
   12734:	00576c18 	subseq	r6, r7, r8, lsl ip
   12738:	01c10100 	biceq	r0, r1, r0, lsl #2
   1273c:	0000035d 	andeq	r0, r0, sp, asr r3
   12740:	000020cf 	andeq	r2, r0, pc, asr #1
   12744:	72747019 	rsbsvc	r7, r4, #25
   12748:	01c10100 	biceq	r0, r1, r0, lsl #2
   1274c:	0000007d 	andeq	r0, r0, sp, ror r0
   12750:	0000211c 	andeq	r2, r0, ip, lsl r1
   12754:	0057cb18 	subseq	ip, r7, r8, lsl fp
   12758:	01c10100 	biceq	r0, r1, r0, lsl #2
   1275c:	0000071f 	andeq	r0, r0, pc, lsl r7
   12760:	00002177 	andeq	r2, r0, r7, ror r1
   12764:	6d656d1a 	stclvs	13, cr6, [r5, #-104]!	; 0xffffff98
   12768:	01c30100 	biceq	r0, r3, r0, lsl #2
   1276c:	0000007d 	andeq	r0, r0, sp, ror r0
   12770:	000021c4 	andeq	r2, r0, r4, asr #3
   12774:	005aca1b 	subseq	ip, sl, fp, lsl sl
   12778:	01c40100 	biceq	r0, r4, r0, lsl #2
   1277c:	0000084f 	andeq	r0, r0, pc, asr #16
   12780:	00127c1c 	andseq	r7, r2, ip, lsl ip
   12784:	00085508 	andeq	r5, r8, r8, lsl #10
   12788:	0007e000 	andeq	lr, r7, r0
   1278c:	50011d00 	andpl	r1, r1, r0, lsl #26
   12790:	1d007602 	stcne	6, cr7, [r0, #-8]
   12794:	74025101 	strvc	r5, [r2], #-257	; 0xfffffeff
   12798:	8c1c0000 	ldchi	0, cr0, [ip], {-0}
   1279c:	60080012 	andvs	r0, r8, r2, lsl r0
   127a0:	fa000008 	blx	127c8 <_Min_Stack_Size+0x125c8>
   127a4:	1d000007 	stcne	0, cr0, [r0, #-28]	; 0xffffffe4
   127a8:	76025001 	strvc	r5, [r2], -r1
   127ac:	51011d00 	tstpl	r1, r0, lsl #26
   127b0:	00007502 	andeq	r7, r0, r2, lsl #10
   127b4:	0012981c 	andseq	r9, r2, ip, lsl r8
   127b8:	00086b08 	andeq	r6, r8, r8, lsl #22
   127bc:	00081a00 	andeq	r1, r8, r0, lsl #20
   127c0:	50011d00 	andpl	r1, r1, r0, lsl #26
   127c4:	1d007702 	stcne	7, cr7, [r0, #-8]
   127c8:	74025101 	strvc	r5, [r2], #-257	; 0xfffffeff
   127cc:	52011d00 	andpl	r1, r1, #0, 26
   127d0:	00007502 	andeq	r7, r0, r2, lsl #10
   127d4:	0012a01c 	andseq	sl, r2, ip, lsl r0
   127d8:	00087608 	andeq	r7, r8, r8, lsl #12
   127dc:	00083400 	andeq	r3, r8, r0, lsl #8
   127e0:	50011d00 	andpl	r1, r1, r0, lsl #26
   127e4:	1d007602 	stcne	6, cr7, [r0, #-8]
   127e8:	74025101 	strvc	r5, [r2], #-257	; 0xfffffeff
   127ec:	a81e0000 	ldmdage	lr, {}	; <UNPREDICTABLE>
   127f0:	76080012 			; <UNDEFINED> instruction: 0x76080012
   127f4:	1f000008 	svcne	0x00000008
   127f8:	080012b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, ip}
   127fc:	00000860 	andeq	r0, r0, r0, ror #16
   12800:	0351011d 	cmpeq	r1, #1073741831	; 0x40000007
   12804:	005201f3 	ldrsheq	r0, [r2], #-19	; 0xffffffed
   12808:	55040f00 	strpl	r0, [r4, #-3840]	; 0xfffff100
   1280c:	20000007 	andcs	r0, r0, r7
   12810:	00005ad7 	ldrdeq	r5, [r0], -r7
   12814:	00005ad7 	ldrdeq	r5, [r0], -r7
   12818:	0220b601 	eoreq	fp, r0, #1048576	; 0x100000
   1281c:	02000057 	andeq	r0, r0, #87	; 0x57
   12820:	01000057 	qaddeq	r0, r7, r0
   12824:	596820b0 	stmdbpl	r8!, {r4, r5, r7, sp}^
   12828:	59680000 	stmdbpl	r8!, {}^	; <UNPREDICTABLE>
   1282c:	17060000 	strne	r0, [r6, -r0]
   12830:	0056fa20 	subseq	pc, r6, r0, lsr #20
   12834:	0056fa00 	subseq	pc, r6, r0, lsl #20
   12838:	00b10100 	adcseq	r0, r1, r0, lsl #2
   1283c:	000008f8 	strdeq	r0, [r0], -r8
   12840:	3d400004 	stclcc	0, cr0, [r0, #-16]
   12844:	01040000 	mrseq	r0, (UNDEF: 4)
   12848:	00004ee6 	andeq	r4, r0, r6, ror #29
   1284c:	005b110c 	subseq	r1, fp, ip, lsl #2
   12850:	00560500 	subseq	r0, r6, r0, lsl #10
   12854:	00000000 	andeq	r0, r0, r0
   12858:	0000e000 	andeq	lr, r0, r0
   1285c:	0072c800 	rsbseq	ip, r2, r0, lsl #16
   12860:	07040200 	streq	r0, [r4, -r0, lsl #4]
   12864:	000001ce 	andeq	r0, r0, lr, asr #3
   12868:	69050403 	stmdbvs	r5, {r0, r1, sl}
   1286c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
   12870:	00b80508 	adcseq	r0, r8, r8, lsl #10
   12874:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   12878:	0002f804 	andeq	pc, r2, r4, lsl #16
   1287c:	06010200 	streq	r0, [r1], -r0, lsl #4
   12880:	00000192 	muleq	r0, r2, r1
   12884:	90080102 	andls	r0, r8, r2, lsl #2
   12888:	02000001 	andeq	r0, r0, #1
   1288c:	00950502 	addseq	r0, r5, r2, lsl #10
   12890:	02020000 	andeq	r0, r2, #0
   12894:	0001f207 	andeq	pc, r1, r7, lsl #4
   12898:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
   1289c:	000000bd 	strheq	r0, [r0], -sp
   128a0:	c9070402 	stmdbgt	r7, {r1, sl}
   128a4:	02000001 	andeq	r0, r0, #1
   128a8:	01c40708 	biceq	r0, r4, r8, lsl #14
   128ac:	cb040000 	blgt	1128b4 <_Min_Stack_Size+0x1126b4>
   128b0:	02000051 	andeq	r0, r0, #81	; 0x51
   128b4:	00002c07 	andeq	r2, r0, r7, lsl #24
   128b8:	51ba0400 			; <UNDEFINED> instruction: 0x51ba0400
   128bc:	2c030000 	stccs	0, cr0, [r3], {-0}
   128c0:	0000005d 	andeq	r0, r0, sp, asr r0
   128c4:	0052a404 	subseq	sl, r2, r4, lsl #8
   128c8:	5d720300 	ldclpl	3, cr0, [r2, #-0]
   128cc:	05000000 	streq	r0, [r0, #-0]
   128d0:	00005187 	andeq	r5, r0, r7, lsl #3
   128d4:	25016504 	strcs	r6, [r1, #-1284]	; 0xfffffafc
   128d8:	06000000 	streq	r0, [r0], -r0
   128dc:	bea60304 	cdplt	3, 10, cr0, cr6, cr4, {0}
   128e0:	07000000 	streq	r0, [r0, -r0]
   128e4:	00005181 	andeq	r5, r0, r1, lsl #3
   128e8:	0093a803 	addseq	sl, r3, r3, lsl #16
   128ec:	cf070000 	svcgt	0x00070000
   128f0:	03000050 	movweq	r0, #80	; 0x50
   128f4:	0000bea9 	andeq	fp, r0, r9, lsr #29
   128f8:	48080000 	stmdami	r8, {}	; <UNPREDICTABLE>
   128fc:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
   12900:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   12904:	000000ce 	andeq	r0, r0, lr, asr #1
   12908:	04020003 	streq	r0, [r2], #-3
   1290c:	00005907 	andeq	r5, r0, r7, lsl #18
   12910:	03080a00 	movweq	r0, #35328	; 0x8a00
   12914:	0000f6a3 	andeq	pc, r0, r3, lsr #13
   12918:	528e0b00 	addpl	r0, lr, #0, 22
   1291c:	a5030000 	strge	r0, [r3, #-0]
   12920:	0000002c 	andeq	r0, r0, ip, lsr #32
   12924:	52960b00 	addspl	r0, r6, #0, 22
   12928:	aa030000 	bge	d2930 <_Min_Stack_Size+0xd2730>
   1292c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
   12930:	2d040004 	stccs	0, cr0, [r4, #-16]
   12934:	03000052 	movweq	r0, #82	; 0x52
   12938:	0000d5ab 	andeq	sp, r0, fp, lsr #11
   1293c:	50a00400 	adcpl	r0, r0, r0, lsl #8
   12940:	af030000 	svcge	0x00030000
   12944:	00000072 	andeq	r0, r0, r2, ror r0
   12948:	040d040c 	streq	r0, [sp], #-1036	; 0xfffffbf4
   1294c:	00000114 	andeq	r0, r0, r4, lsl r1
   12950:	99080102 	stmdbls	r8, {r1, r8}
   12954:	04000001 	streq	r0, [r0], #-1
   12958:	000052e0 	andeq	r5, r0, r0, ror #5
   1295c:	00641605 	rsbeq	r1, r4, r5, lsl #12
   12960:	a90e0000 	stmdbge	lr, {}	; <UNPREDICTABLE>
   12964:	18000050 	stmdane	r0, {r4, r6}
   12968:	01792d05 	cmneq	r9, r5, lsl #26
   1296c:	4e0b0000 	cdpmi	0, 0, cr0, cr11, cr0, {0}
   12970:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   12974:	0001792f 	andeq	r7, r1, pc, lsr #18
   12978:	5f0f0000 	svcpl	0x000f0000
   1297c:	3005006b 	andcc	r0, r5, fp, rrx
   12980:	0000002c 	andeq	r0, r0, ip, lsr #32
   12984:	52800b04 	addpl	r0, r0, #4, 22	; 0x1000
   12988:	30050000 	andcc	r0, r5, r0
   1298c:	0000002c 	andeq	r0, r0, ip, lsr #32
   12990:	509a0b08 	addspl	r0, sl, r8, lsl #22
   12994:	30050000 	andcc	r0, r5, r0
   12998:	0000002c 	andeq	r0, r0, ip, lsr #32
   1299c:	52fb0b0c 	rscspl	r0, fp, #12, 22	; 0x3000
   129a0:	30050000 	andcc	r0, r5, r0
   129a4:	0000002c 	andeq	r0, r0, ip, lsr #32
   129a8:	785f0f10 	ldmdavc	pc, {r4, r8, r9, sl, fp}^	; <UNPREDICTABLE>
   129ac:	7f310500 	svcvc	0x00310500
   129b0:	14000001 	strne	r0, [r0], #-1
   129b4:	26040d00 	strcs	r0, [r4], -r0, lsl #26
   129b8:	08000001 	stmdaeq	r0, {r0}
   129bc:	0000011b 	andeq	r0, r0, fp, lsl r1
   129c0:	0000018f 	andeq	r0, r0, pc, lsl #3
   129c4:	0000ce09 	andeq	ip, r0, r9, lsl #28
   129c8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   129cc:	000050ca 	andeq	r5, r0, sl, asr #1
   129d0:	08350524 	ldmdaeq	r5!, {r2, r5, r8, sl}
   129d4:	0b000002 	bleq	129e4 <_Min_Stack_Size+0x127e4>
   129d8:	0000502e 	andeq	r5, r0, lr, lsr #32
   129dc:	002c3705 	eoreq	r3, ip, r5, lsl #14
   129e0:	0b000000 	bleq	129e8 <_Min_Stack_Size+0x127e8>
   129e4:	000052b3 			; <UNDEFINED> instruction: 0x000052b3
   129e8:	002c3805 	eoreq	r3, ip, r5, lsl #16
   129ec:	0b040000 	bleq	1129f4 <_Min_Stack_Size+0x1127f4>
   129f0:	0000503d 	andeq	r5, r0, sp, lsr r0
   129f4:	002c3905 	eoreq	r3, ip, r5, lsl #18
   129f8:	0b080000 	bleq	212a00 <_Min_Stack_Size+0x212800>
   129fc:	00005358 	andeq	r5, r0, r8, asr r3
   12a00:	002c3a05 	eoreq	r3, ip, r5, lsl #20
   12a04:	0b0c0000 	bleq	312a0c <_Min_Stack_Size+0x31280c>
   12a08:	000051a6 	andeq	r5, r0, r6, lsr #3
   12a0c:	002c3b05 	eoreq	r3, ip, r5, lsl #22
   12a10:	0b100000 	bleq	412a18 <_Min_Stack_Size+0x412818>
   12a14:	00005196 	muleq	r0, r6, r1
   12a18:	002c3c05 	eoreq	r3, ip, r5, lsl #24
   12a1c:	0b140000 	bleq	512a24 <_Min_Stack_Size+0x512824>
   12a20:	00005300 	andeq	r5, r0, r0, lsl #6
   12a24:	002c3d05 	eoreq	r3, ip, r5, lsl #26
   12a28:	0b180000 	bleq	612a30 <_Min_Stack_Size+0x612830>
   12a2c:	00005215 	andeq	r5, r0, r5, lsl r2
   12a30:	002c3e05 	eoreq	r3, ip, r5, lsl #28
   12a34:	0b1c0000 	bleq	712a3c <_Min_Stack_Size+0x71283c>
   12a38:	00005324 	andeq	r5, r0, r4, lsr #6
   12a3c:	002c3f05 	eoreq	r3, ip, r5, lsl #30
   12a40:	00200000 	eoreq	r0, r0, r0
   12a44:	00521f0e 	subseq	r1, r2, lr, lsl #30
   12a48:	73050800 	movwvc	r0, #22528	; 0x5800
   12a4c:	0000022d 	andeq	r0, r0, sp, lsr #4
   12a50:	0033a10b 	eorseq	sl, r3, fp, lsl #2
   12a54:	2d740500 	cfldr64cs	mvdx0, [r4, #-0]
   12a58:	00000002 	andeq	r0, r0, r2
   12a5c:	0057ca0b 	subseq	ip, r7, fp, lsl #20
   12a60:	2c750500 	cfldr64cs	mvdx0, [r5], #-0
   12a64:	04000000 	streq	r0, [r0], #-0
   12a68:	48040d00 	stmdami	r4, {r8, sl, fp}
   12a6c:	10000000 	andne	r0, r0, r0
   12a70:	000052d4 	ldrdeq	r5, [r0], -r4
   12a74:	01720560 	cmneq	r2, r0, ror #10
   12a78:	0000035f 	andeq	r0, r0, pc, asr r3
   12a7c:	0052ac11 	subseq	sl, r2, r1, lsl ip
   12a80:	01760500 	cmneq	r6, r0, lsl #10
   12a84:	0000002c 	andeq	r0, r0, ip, lsr #32
   12a88:	55ed1100 	strbpl	r1, [sp, #256]!	; 0x100
   12a8c:	7b050000 	blvc	152a94 <_Min_Stack_Size+0x152894>
   12a90:	00058701 	andeq	r8, r5, r1, lsl #14
   12a94:	fd110400 	ldc2	4, cr0, [r1, #-0]
   12a98:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
   12a9c:	0587017b 	streq	r0, [r7, #379]	; 0x17b
   12aa0:	11080000 	mrsne	r0, (UNDEF: 8)
   12aa4:	000056b8 			; <UNDEFINED> instruction: 0x000056b8
   12aa8:	87017b05 	strhi	r7, [r1, -r5, lsl #22]
   12aac:	0c000005 	stceq	0, cr0, [r0], {5}
   12ab0:	00526111 	subseq	r6, r2, r1, lsl r1
   12ab4:	017d0500 	cmneq	sp, r0, lsl #10
   12ab8:	0000002c 	andeq	r0, r0, ip, lsr #32
   12abc:	4fe21110 	svcmi	0x00e21110
   12ac0:	7f050000 	svcvc	0x00050000
   12ac4:	00010e01 	andeq	r0, r1, r1, lsl #28
   12ac8:	af111400 	svcge	0x00111400
   12acc:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
   12ad0:	002c0181 	eoreq	r0, ip, r1, lsl #3
   12ad4:	11180000 	tstne	r8, r0
   12ad8:	000050e7 	andeq	r5, r0, r7, ror #1
   12adc:	2c018305 	stccs	3, cr8, [r1], {5}
   12ae0:	1c000000 	stcne	0, cr0, [r0], {-0}
   12ae4:	00526611 	subseq	r6, r2, r1, lsl r6
   12ae8:	01840500 	orreq	r0, r4, r0, lsl #10
   12aec:	000004d1 	ldrdeq	r0, [r0], -r1
   12af0:	6d5f1220 	lfmvs	f1, 2, [pc, #-128]	; 12a78 <_Min_Stack_Size+0x12878>
   12af4:	86050070 			; <UNDEFINED> instruction: 0x86050070
   12af8:	0006d401 	andeq	sp, r6, r1, lsl #8
   12afc:	76112400 	ldrvc	r2, [r1], -r0, lsl #8
   12b00:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   12b04:	06e50188 	strbteq	r0, [r5], r8, lsl #3
   12b08:	11280000 			; <UNDEFINED> instruction: 0x11280000
   12b0c:	000050b1 	strheq	r5, [r0], -r1
   12b10:	2c018a05 			; <UNDEFINED> instruction: 0x2c018a05
   12b14:	2c000000 	stccs	0, cr0, [r0], {-0}
   12b18:	0050f911 	subseq	pc, r0, r1, lsl r9	; <UNPREDICTABLE>
   12b1c:	018d0500 	orreq	r0, sp, r0, lsl #10
   12b20:	0000002c 	andeq	r0, r0, ip, lsr #32
   12b24:	50731130 	rsbspl	r1, r3, r0, lsr r1
   12b28:	8e050000 	cdphi	0, 0, cr0, cr5, cr0, {0}
   12b2c:	00010e01 	andeq	r0, r1, r1, lsl #28
   12b30:	01113400 	tsteq	r1, r0, lsl #8
   12b34:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
   12b38:	06eb0190 	usateq	r0, #11, r0, lsl #3
   12b3c:	11380000 	teqne	r8, r0
   12b40:	0000532f 	andeq	r5, r0, pc, lsr #6
   12b44:	f1019105 			; <UNDEFINED> instruction: 0xf1019105
   12b48:	3c000006 	stccc	0, cr0, [r0], {6}
   12b4c:	00516c11 	subseq	r6, r1, r1, lsl ip
   12b50:	01920500 	orrseq	r0, r2, r0, lsl #10
   12b54:	0000010e 	andeq	r0, r0, lr, lsl #2
   12b58:	53141140 	tstpl	r4, #64, 2
   12b5c:	95050000 	strls	r0, [r5, #-0]
   12b60:	00070201 	andeq	r0, r7, r1, lsl #4
   12b64:	54114400 	ldrpl	r4, [r1], #-1024	; 0xfffffc00
   12b68:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   12b6c:	054c019d 	strbeq	r0, [ip, #-413]	; 0xfffffe63
   12b70:	11480000 	mrsne	r0, (UNDEF: 72)
   12b74:	00005047 	andeq	r5, r0, r7, asr #32
   12b78:	87019e05 	strhi	r9, [r1, -r5, lsl #28]
   12b7c:	54000005 	strpl	r0, [r0], #-5
   12b80:	0051a011 	subseq	sl, r1, r1, lsl r0
   12b84:	019f0500 	orrseq	r0, pc, r0, lsl #10
   12b88:	0000070e 	andeq	r0, r0, lr, lsl #14
   12b8c:	4ffc1158 	svcmi	0x00fc1158
   12b90:	a0050000 	andge	r0, r5, r0
   12b94:	00010e01 	andeq	r0, r1, r1, lsl #28
   12b98:	0d005c00 	stceq	12, cr5, [r0, #-0]
   12b9c:	00023304 	andeq	r3, r2, r4, lsl #6
   12ba0:	52380e00 	eorspl	r0, r8, #0, 28
   12ba4:	05680000 	strbeq	r0, [r8, #-0]!
   12ba8:	00048fb3 			; <UNDEFINED> instruction: 0x00048fb3
   12bac:	705f0f00 	subsvc	r0, pc, r0, lsl #30
   12bb0:	2db40500 	cfldr32cs	mvfx0, [r4]
   12bb4:	00000002 	andeq	r0, r0, r2
   12bb8:	00725f0f 	rsbseq	r5, r2, pc, lsl #30
   12bbc:	002cb505 	eoreq	fp, ip, r5, lsl #10
   12bc0:	0f040000 	svceq	0x00040000
   12bc4:	0500775f 	streq	r7, [r0, #-1887]	; 0xfffff8a1
   12bc8:	00002cb6 			; <UNDEFINED> instruction: 0x00002cb6
   12bcc:	630b0800 	movwvs	r0, #47104	; 0xb800
   12bd0:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   12bd4:	00004fb7 			; <UNDEFINED> instruction: 0x00004fb7
   12bd8:	f50b0c00 			; <UNDEFINED> instruction: 0xf50b0c00
   12bdc:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   12be0:	00004fb8 			; <UNDEFINED> instruction: 0x00004fb8
   12be4:	5f0f0e00 	svcpl	0x000f0e00
   12be8:	05006662 	streq	r6, [r0, #-1634]	; 0xfffff99e
   12bec:	000208b9 			; <UNDEFINED> instruction: 0x000208b9
   12bf0:	080b1000 	stmdaeq	fp, {ip}
   12bf4:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   12bf8:	00002cba 			; <UNDEFINED> instruction: 0x00002cba
   12bfc:	eb0b1800 	bl	2d8c04 <_Min_Stack_Size+0x2d8a04>
   12c00:	0500000d 	streq	r0, [r0, #-13]
   12c04:	00035fbd 			; <UNDEFINED> instruction: 0x00035fbd
   12c08:	4c0b1c00 	stcmi	12, cr1, [fp], {-0}
   12c0c:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   12c10:	00010cc1 	andeq	r0, r1, r1, asr #25
   12c14:	870b2000 	strhi	r2, [fp, -r0]
   12c18:	0500003a 	streq	r0, [r0, #-58]	; 0xffffffc6
   12c1c:	0004adc3 	andeq	sl, r4, r3, asr #27
   12c20:	e20b2400 	and	r2, fp, #0, 8
   12c24:	05000039 	streq	r0, [r0, #-57]	; 0xffffffc7
   12c28:	0004dcc5 	andeq	sp, r4, r5, asr #25
   12c2c:	9e0b2800 	cdpls	8, 0, cr2, cr11, cr0, {0}
   12c30:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   12c34:	000500c8 	andeq	r0, r5, r8, asr #1
   12c38:	3e0b2c00 	cdpcc	12, 0, cr2, cr11, cr0, {0}
   12c3c:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
   12c40:	00051ac9 	andeq	r1, r5, r9, asr #21
   12c44:	5f0f3000 	svcpl	0x000f3000
   12c48:	05006275 	streq	r6, [r0, #-629]	; 0xfffffd8b
   12c4c:	000208cc 	andeq	r0, r2, ip, asr #17
   12c50:	5f0f3400 	svcpl	0x000f3400
   12c54:	05007075 	streq	r7, [r0, #-117]	; 0xffffff8b
   12c58:	00022dcd 	andeq	r2, r2, sp, asr #27
   12c5c:	5f0f3c00 	svcpl	0x000f3c00
   12c60:	05007275 	streq	r7, [r0, #-629]	; 0xfffffd8b
   12c64:	00002cce 	andeq	r2, r0, lr, asr #25
   12c68:	370b4000 	strcc	r4, [fp, -r0]
   12c6c:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   12c70:	000520d1 	ldrdeq	r2, [r5], -r1
   12c74:	1e0b4400 	cfcpysne	mvf4, mvf11
   12c78:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
   12c7c:	000530d2 	ldrdeq	r3, [r5], -r2
   12c80:	5f0f4700 	svcpl	0x000f4700
   12c84:	0500626c 	streq	r6, [r0, #-620]	; 0xfffffd94
   12c88:	000208d5 	ldrdeq	r0, [r2], -r5
   12c8c:	6a0b4800 	bvs	2e4c94 <_Min_Stack_Size+0x2e4a94>
   12c90:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   12c94:	00002cd8 	ldrdeq	r2, [r0], -r8
   12c98:	4c0b5000 	stcmi	0, cr5, [fp], {-0}
   12c9c:	0500005b 	streq	r0, [r0, #-91]	; 0xffffffa5
   12ca0:	00007dd9 	ldrdeq	r7, [r0], -r9
   12ca4:	3a0b5400 	bcc	2e7cac <_Min_Stack_Size+0x2e7aac>
   12ca8:	05000035 	streq	r0, [r0, #-53]	; 0xffffffcb
   12cac:	000101e0 	andeq	r0, r1, r0, ror #3
   12cb0:	400b5800 	andmi	r5, fp, r0, lsl #16
   12cb4:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   12cb8:	0000f6e2 	andeq	pc, r0, r2, ror #13
   12cbc:	8e0b5c00 	cdphi	12, 0, cr5, cr11, cr0, {0}
   12cc0:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
   12cc4:	00002ce3 	andeq	r2, r0, r3, ror #25
   12cc8:	13006400 	movwne	r6, #1024	; 0x400
   12ccc:	0000002c 	andeq	r0, r0, ip, lsr #32
   12cd0:	000004ad 	andeq	r0, r0, sp, lsr #9
   12cd4:	00035f14 	andeq	r5, r3, r4, lsl pc
   12cd8:	010c1400 	tsteq	ip, r0, lsl #8
   12cdc:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
   12ce0:	14000001 	strne	r0, [r0], #-1
   12ce4:	0000002c 	andeq	r0, r0, ip, lsr #32
   12ce8:	8f040d00 	svchi	0x00040d00
   12cec:	13000004 	movwne	r0, #4
   12cf0:	0000002c 	andeq	r0, r0, ip, lsr #32
   12cf4:	000004d1 	ldrdeq	r0, [r0], -r1
   12cf8:	00035f14 	andeq	r5, r3, r4, lsl pc
   12cfc:	010c1400 	tsteq	ip, r0, lsl #8
   12d00:	d1140000 	tstle	r4, r0
   12d04:	14000004 	strne	r0, [r0], #-4
   12d08:	0000002c 	andeq	r0, r0, ip, lsr #32
   12d0c:	d7040d00 	strle	r0, [r4, -r0, lsl #26]
   12d10:	15000004 	strne	r0, [r0, #-4]
   12d14:	00000114 	andeq	r0, r0, r4, lsl r1
   12d18:	04b3040d 	ldrteq	r0, [r3], #1037	; 0x40d
   12d1c:	88130000 	ldmdahi	r3, {}	; <UNPREDICTABLE>
   12d20:	00000000 	andeq	r0, r0, r0
   12d24:	14000005 	strne	r0, [r0], #-5
   12d28:	0000035f 	andeq	r0, r0, pc, asr r3
   12d2c:	00010c14 	andeq	r0, r1, r4, lsl ip
   12d30:	00881400 	addeq	r1, r8, r0, lsl #8
   12d34:	2c140000 	ldccs	0, cr0, [r4], {-0}
   12d38:	00000000 	andeq	r0, r0, r0
   12d3c:	04e2040d 	strbteq	r0, [r2], #1037	; 0x40d
   12d40:	2c130000 	ldccs	0, cr0, [r3], {-0}
   12d44:	1a000000 	bne	12d4c <_Min_Stack_Size+0x12b4c>
   12d48:	14000005 	strne	r0, [r0], #-5
   12d4c:	0000035f 	andeq	r0, r0, pc, asr r3
   12d50:	00010c14 	andeq	r0, r1, r4, lsl ip
   12d54:	040d0000 	streq	r0, [sp], #-0
   12d58:	00000506 	andeq	r0, r0, r6, lsl #10
   12d5c:	00004808 	andeq	r4, r0, r8, lsl #16
   12d60:	00053000 	andeq	r3, r5, r0
   12d64:	00ce0900 	sbceq	r0, lr, r0, lsl #18
   12d68:	00020000 	andeq	r0, r2, r0
   12d6c:	00004808 	andeq	r4, r0, r8, lsl #16
   12d70:	00054000 	andeq	r4, r5, r0
   12d74:	00ce0900 	sbceq	r0, lr, r0, lsl #18
   12d78:	00000000 	andeq	r0, r0, r0
   12d7c:	00522605 	subseq	r2, r2, r5, lsl #12
   12d80:	011d0500 	tsteq	sp, r0, lsl #10
   12d84:	00000365 	andeq	r0, r0, r5, ror #6
   12d88:	005b0b10 	subseq	r0, fp, r0, lsl fp
   12d8c:	21050c00 	tstcs	r5, r0, lsl #24
   12d90:	00058101 	andeq	r8, r5, r1, lsl #2
   12d94:	524e1100 	subpl	r1, lr, #0, 2
   12d98:	23050000 	movwcs	r0, #20480	; 0x5000
   12d9c:	00058101 	andeq	r8, r5, r1, lsl #2
   12da0:	06110000 	ldreq	r0, [r1], -r0
   12da4:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
   12da8:	002c0124 	eoreq	r0, ip, r4, lsr #2
   12dac:	11040000 	mrsne	r0, (UNDEF: 4)
   12db0:	0000520f 	andeq	r5, r0, pc, lsl #4
   12db4:	87012505 	strhi	r2, [r1, -r5, lsl #10]
   12db8:	08000005 	stmdaeq	r0, {r0, r2}
   12dbc:	4c040d00 	stcmi	13, cr0, [r4], {-0}
   12dc0:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
   12dc4:	00054004 	andeq	r4, r5, r4
   12dc8:	4fda1000 	svcmi	0x00da1000
   12dcc:	05180000 	ldreq	r0, [r8, #-0]
   12dd0:	05cf013d 	strbeq	r0, [pc, #317]	; 12f15 <_Min_Stack_Size+0x12d15>
   12dd4:	88110000 	ldmdahi	r1, {}	; <UNPREDICTABLE>
   12dd8:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   12ddc:	05cf013e 	strbeq	r0, [pc, #318]	; 12f22 <_Min_Stack_Size+0x12d22>
   12de0:	11000000 	mrsne	r0, (UNDEF: 0)
   12de4:	000052bc 			; <UNDEFINED> instruction: 0x000052bc
   12de8:	cf013f05 	svcgt	0x00013f05
   12dec:	06000005 	streq	r0, [r0], -r5
   12df0:	0052db11 	subseq	sp, r2, r1, lsl fp
   12df4:	01400500 	cmpeq	r0, r0, lsl #10
   12df8:	00000056 	andeq	r0, r0, r6, asr r0
   12dfc:	5249110c 	subpl	r1, r9, #12, 2
   12e00:	43050000 	movwmi	r0, #20480	; 0x5000
   12e04:	00006b01 	andeq	r6, r0, r1, lsl #22
   12e08:	08001000 	stmdaeq	r0, {ip}
   12e0c:	00000056 	andeq	r0, r0, r6, asr r0
   12e10:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12e14:	0000ce09 	andeq	ip, r0, r9, lsl #28
   12e18:	10000200 	andne	r0, r0, r0, lsl #4
   12e1c:	0000505c 	andeq	r5, r0, ip, asr r0
   12e20:	01560510 	cmpeq	r6, r0, lsl r5
   12e24:	00000621 	andeq	r0, r0, r1, lsr #12
   12e28:	00517911 	subseq	r7, r1, r1, lsl r9
   12e2c:	01590500 	cmpeq	r9, r0, lsl #10
   12e30:	00000179 	andeq	r0, r0, r9, ror r1
   12e34:	50c01100 	sbcpl	r1, r0, r0, lsl #2
   12e38:	5a050000 	bpl	152e40 <_Min_Stack_Size+0x152c40>
   12e3c:	00002c01 	andeq	r2, r0, r1, lsl #24
   12e40:	53110400 	tstpl	r1, #0, 8
   12e44:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
   12e48:	0179015b 	cmneq	r9, fp, asr r1
   12e4c:	11080000 	mrsne	r0, (UNDEF: 8)
   12e50:	000051c1 	andeq	r5, r0, r1, asr #3
   12e54:	21015c05 	tstcs	r1, r5, lsl #24
   12e58:	0c000006 	stceq	0, cr0, [r0], {6}
   12e5c:	79040d00 	stmdbvc	r4, {r8, sl, fp}
   12e60:	10000001 	andne	r0, r0, r1
   12e64:	000052cf 	andeq	r5, r0, pc, asr #5
   12e68:	01600550 	cmneq	r0, r0, asr r5
   12e6c:	000006c4 	andeq	r0, r0, r4, asr #13
   12e70:	0052c211 	subseq	ip, r2, r1, lsl r2
   12e74:	01630500 	cmneq	r3, r0, lsl #10
   12e78:	0000010e 	andeq	r0, r0, lr, lsl #2
   12e7c:	52541100 	subspl	r1, r4, #0, 2
   12e80:	64050000 	strvs	r0, [r5], #-0
   12e84:	0000f601 	andeq	pc, r0, r1, lsl #12
   12e88:	20110400 	andscs	r0, r1, r0, lsl #8
   12e8c:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   12e90:	00f60165 	rscseq	r0, r6, r5, ror #2
   12e94:	110c0000 	mrsne	r0, (UNDEF: 12)
   12e98:	00005345 	andeq	r5, r0, r5, asr #6
   12e9c:	f6016605 			; <UNDEFINED> instruction: 0xf6016605
   12ea0:	14000000 	strne	r0, [r0], #-0
   12ea4:	00530a11 	subseq	r0, r3, r1, lsl sl
   12ea8:	01670500 	cmneq	r7, r0, lsl #10
   12eac:	000006c4 	andeq	r0, r0, r4, asr #13
   12eb0:	52e8111c 	rscpl	r1, r8, #28, 2
   12eb4:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
   12eb8:	00002c01 	andeq	r2, r0, r1, lsl #24
   12ebc:	8c112400 	cfldrshi	mvf2, [r1], {-0}
   12ec0:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   12ec4:	00f60169 	rscseq	r0, r6, r9, ror #2
   12ec8:	11280000 			; <UNDEFINED> instruction: 0x11280000
   12ecc:	00005011 	andeq	r5, r0, r1, lsl r0
   12ed0:	f6016a05 			; <UNDEFINED> instruction: 0xf6016a05
   12ed4:	30000000 	andcc	r0, r0, r0
   12ed8:	00507b11 	subseq	r7, r0, r1, lsl fp
   12edc:	016b0500 	cmneq	fp, r0, lsl #10
   12ee0:	000000f6 	strdeq	r0, [r0], -r6
   12ee4:	4fed1138 	svcmi	0x00ed1138
   12ee8:	6c050000 	stcvs	0, cr0, [r5], {-0}
   12eec:	0000f601 	andeq	pc, r0, r1, lsl #12
   12ef0:	d6114000 	ldrle	r4, [r1], -r0
   12ef4:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   12ef8:	00f6016d 	rscseq	r0, r6, sp, ror #2
   12efc:	00480000 	subeq	r0, r8, r0
   12f00:	00011408 	andeq	r1, r1, r8, lsl #8
   12f04:	0006d400 	andeq	sp, r6, r0, lsl #8
   12f08:	00ce0900 	sbceq	r0, lr, r0, lsl #18
   12f0c:	00070000 	andeq	r0, r7, r0
   12f10:	05df040d 	ldrbeq	r0, [pc, #1037]	; 13325 <_Min_Stack_Size+0x13125>
   12f14:	e5160000 	ldr	r0, [r6, #-0]
   12f18:	14000006 	strne	r0, [r0], #-6
   12f1c:	0000035f 	andeq	r0, r0, pc, asr r3
   12f20:	da040d00 	ble	116328 <_Min_Stack_Size+0x116128>
   12f24:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
   12f28:	00058d04 	andeq	r8, r5, r4, lsl #26
   12f2c:	8f040d00 	svchi	0x00040d00
   12f30:	16000001 	strne	r0, [r0], -r1
   12f34:	00000702 	andeq	r0, r0, r2, lsl #14
   12f38:	00002c14 	andeq	r2, r0, r4, lsl ip
   12f3c:	040d0000 	streq	r0, [sp], #-0
   12f40:	00000708 	andeq	r0, r0, r8, lsl #14
   12f44:	06f7040d 	ldrbteq	r0, [r7], sp, lsl #8
   12f48:	040d0000 	streq	r0, [sp], #-0
   12f4c:	00000627 	andeq	r0, r0, r7, lsr #12
   12f50:	005b0417 	subseq	r0, fp, r7, lsl r4
   12f54:	00210100 	eoreq	r0, r1, r0, lsl #2
   12f58:	1a000000 	bne	12f60 <_Min_Stack_Size+0x12d60>
   12f5c:	01000000 	mrseq	r0, (UNDEF: 0)
   12f60:	0007749c 	muleq	r7, ip, r4
   12f64:	74701800 	ldrbtvc	r1, [r0], #-2048	; 0xfffff800
   12f68:	21010072 	tstcs	r1, r2, ror r0
   12f6c:	0000035f 	andeq	r0, r0, pc, asr r3
   12f70:	000021ed 	andeq	r2, r0, sp, ror #3
   12f74:	005b0c19 	subseq	r0, fp, r9, lsl ip
   12f78:	81210100 			; <UNDEFINED> instruction: 0x81210100
   12f7c:	24000005 	strcs	r0, [r0], #-5
   12f80:	1a000022 	bne	13010 <_Min_Stack_Size+0x12e10>
   12f84:	00000000 	andeq	r0, r0, r0
   12f88:	00000714 	andeq	r0, r0, r4, lsl r7
   12f8c:	0000075b 	andeq	r0, r0, fp, asr r7
   12f90:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
   12f94:	1c000075 	stcne	0, cr0, [r0], {117}	; 0x75
   12f98:	00000000 	andeq	r0, r0, r0
   12f9c:	000008ef 	andeq	r0, r0, pc, ror #17
   12fa0:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
   12fa4:	1b5001f3 	blne	1413778 <_Min_Stack_Size+0x1413578>
   12fa8:	f3035101 	vrhadd.u8	d5, d3, d1
   12fac:	00005101 	andeq	r5, r0, r1, lsl #2
   12fb0:	005aed1d 	subseq	lr, sl, sp, lsl sp
   12fb4:	03000500 	movweq	r0, #1280	; 0x500
   12fb8:	00000000 	andeq	r0, r0, r0
   12fbc:	000000c4 	andeq	r0, r0, r4, asr #1
   12fc0:	08d29c01 	ldmeq	r2, {r0, sl, fp, ip, pc}^
   12fc4:	70180000 	andsvc	r0, r8, r0
   12fc8:	01007274 	tsteq	r0, r4, ror r2
   12fcc:	00035f2d 	andeq	r5, r3, sp, lsr #30
   12fd0:	00225b00 	eoreq	r5, r2, r0, lsl #22
   12fd4:	00001e00 	andeq	r1, r0, r0, lsl #28
   12fd8:	00260000 	eoreq	r0, r6, r0
   12fdc:	07fc0000 	ldrbeq	r0, [ip, r0]!
   12fe0:	691f0000 	ldmdbvs	pc, {}	; <UNPREDICTABLE>
   12fe4:	2c390100 	ldfcss	f0, [r9], #-0
   12fe8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   12fec:	00000000 	andeq	r0, r0, r0
   12ff0:	00000018 	andeq	r0, r0, r8, lsl r0
   12ff4:	000007eb 	andeq	r0, r0, fp, ror #15
   12ff8:	005afc20 	subseq	pc, sl, r0, lsr #24
   12ffc:	793c0100 	ldmdbvc	ip!, {r8}
   13000:	9d000001 	stcls	0, cr0, [r0, #-4]
   13004:	20000022 	andcs	r0, r0, r2, lsr #32
   13008:	00005b3d 	andeq	r5, r0, sp, lsr fp
   1300c:	01793c01 	cmneq	r9, r1, lsl #24
   13010:	22b00000 	adcscs	r0, r0, #0
   13014:	00210000 	eoreq	r0, r1, r0
   13018:	ef000000 	svc	0x00000000
   1301c:	1b000008 	blne	13044 <_Min_Stack_Size+0x12e44>
   13020:	75025001 	strvc	r5, [r2, #-1]
   13024:	21000000 	mrscs	r0, (UNDEF: 0)
   13028:	00000000 	andeq	r0, r0, r0
   1302c:	000008ef 	andeq	r0, r0, pc, ror #17
   13030:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
   13034:	00000075 	andeq	r0, r0, r5, ror r0
   13038:	0000001a 	andeq	r0, r0, sl, lsl r0
   1303c:	0008ef00 	andeq	lr, r8, r0, lsl #30
   13040:	00081000 	andeq	r1, r8, r0
   13044:	50011b00 	andpl	r1, r1, r0, lsl #22
   13048:	00007502 	andeq	r7, r0, r2, lsl #10
   1304c:	0000001a 	andeq	r0, r0, sl, lsl r0
   13050:	0008ef00 	andeq	lr, r8, r0, lsl #30
   13054:	00082400 	andeq	r2, r8, r0, lsl #8
   13058:	50011b00 	andpl	r1, r1, r0, lsl #22
   1305c:	00007502 	andeq	r7, r0, r2, lsl #10
   13060:	0000001a 	andeq	r0, r0, sl, lsl r0
   13064:	0008ef00 	andeq	lr, r8, r0, lsl #30
   13068:	00083800 	andeq	r3, r8, r0, lsl #16
   1306c:	50011b00 	andpl	r1, r1, r0, lsl #22
   13070:	00007502 	andeq	r7, r0, r2, lsl #10
   13074:	0000001a 	andeq	r0, r0, sl, lsl r0
   13078:	0008ef00 	andeq	lr, r8, r0, lsl #30
   1307c:	00084c00 	andeq	r4, r8, r0, lsl #24
   13080:	50011b00 	andpl	r1, r1, r0, lsl #22
   13084:	00007502 	andeq	r7, r0, r2, lsl #10
   13088:	0000001a 	andeq	r0, r0, sl, lsl r0
   1308c:	0008ef00 	andeq	lr, r8, r0, lsl #30
   13090:	00086000 	andeq	r6, r8, r0
   13094:	50011b00 	andpl	r1, r1, r0, lsl #22
   13098:	00007502 	andeq	r7, r0, r2, lsl #10
   1309c:	0000001a 	andeq	r0, r0, sl, lsl r0
   130a0:	0008ef00 	andeq	lr, r8, r0, lsl #30
   130a4:	00087400 	andeq	r7, r8, r0, lsl #8
   130a8:	50011b00 	andpl	r1, r1, r0, lsl #22
   130ac:	00007502 	andeq	r7, r0, r2, lsl #10
   130b0:	0000001a 	andeq	r0, r0, sl, lsl r0
   130b4:	0008ef00 	andeq	lr, r8, r0, lsl #30
   130b8:	00088800 	andeq	r8, r8, r0, lsl #16
   130bc:	50011b00 	andpl	r1, r1, r0, lsl #22
   130c0:	00007502 	andeq	r7, r0, r2, lsl #10
   130c4:	0000001a 	andeq	r0, r0, sl, lsl r0
   130c8:	0008ef00 	andeq	lr, r8, r0, lsl #30
   130cc:	00089c00 	andeq	r9, r8, r0, lsl #24
   130d0:	50011b00 	andpl	r1, r1, r0, lsl #22
   130d4:	00007502 	andeq	r7, r0, r2, lsl #10
   130d8:	0000001a 	andeq	r0, r0, sl, lsl r0
   130dc:	0008ef00 	andeq	lr, r8, r0, lsl #30
   130e0:	0008b000 	andeq	fp, r8, r0
   130e4:	50011b00 	andpl	r1, r1, r0, lsl #22
   130e8:	00007502 	andeq	r7, r0, r2, lsl #10
   130ec:	00000022 	andeq	r0, r0, r2, lsr #32
   130f0:	0008c000 	andeq	ip, r8, r0
   130f4:	50011b00 	andpl	r1, r1, r0, lsl #22
   130f8:	00007502 	andeq	r7, r0, r2, lsl #10
   130fc:	0000001c 	andeq	r0, r0, ip, lsl r0
   13100:	00071400 	andeq	r1, r7, r0, lsl #8
   13104:	50011b00 	andpl	r1, r1, r0, lsl #22
   13108:	5001f303 	andpl	pc, r1, r3, lsl #6
   1310c:	a3230000 			; <UNDEFINED> instruction: 0xa3230000
   13110:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   13114:	035f02fd 	cmpeq	pc, #-805306353	; 0xd000000f
   13118:	ad240000 	stcge	0, cr0, [r4, #-0]
   1311c:	01000052 	qaddeq	r0, r2, r0
   13120:	00002c1a 	andeq	r2, r0, sl, lsl ip
   13124:	fc030500 	stc2	5, cr0, [r3], {-0}
   13128:	25200042 	strcs	r0, [r0, #-66]!	; 0xffffffbe
   1312c:	000056fa 	strdeq	r5, [r0], -sl
   13130:	000056fa 	strdeq	r5, [r0], -sl
   13134:	00010c06 	andeq	r0, r1, r6, lsl #24
   13138:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
   1313c:	3f320004 	svccc	0x00320004
   13140:	01040000 	mrseq	r0, (UNDEF: 4)
   13144:	00004ee6 	andeq	r4, r0, r6, ror #29
   13148:	00571a0c 	subseq	r1, r7, ip, lsl #20
   1314c:	00510d00 	subseq	r0, r1, r0, lsl #26
   13150:	0012b400 	andseq	fp, r2, r0, lsl #8
   13154:	00001408 	andeq	r1, r0, r8, lsl #8
   13158:	00744100 	rsbseq	r4, r4, r0, lsl #2
   1315c:	06010200 	streq	r0, [r1], -r0, lsl #4
   13160:	00000192 	muleq	r0, r2, r1
   13164:	90080102 	andls	r0, r8, r2, lsl #2
   13168:	02000001 	andeq	r0, r0, #1
   1316c:	00950502 	addseq	r0, r5, r2, lsl #10
   13170:	02020000 	andeq	r0, r2, #0
   13174:	0001f207 	andeq	pc, r1, r7, lsl #4
   13178:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
   1317c:	000000bd 	strheq	r0, [r0], -sp
   13180:	c9070402 	stmdbgt	r7, {r1, sl}
   13184:	02000001 	andeq	r0, r0, #1
   13188:	00b80508 	adcseq	r0, r8, r8, lsl #10
   1318c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   13190:	0001c407 	andeq	ip, r1, r7, lsl #8
   13194:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
   13198:	00746e69 	rsbseq	r6, r4, r9, ror #28
   1319c:	ce070402 	cdpgt	4, 0, cr0, cr7, cr2, {0}
   131a0:	04000001 	streq	r0, [r0], #-1
   131a4:	00005713 	andeq	r5, r0, r3, lsl r7
   131a8:	0064d802 	rsbeq	sp, r4, r2, lsl #16
   131ac:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   131b0:	0002f804 	andeq	pc, r2, r4, lsl #16
   131b4:	04040500 	streq	r0, [r4], #-1280	; 0xfffffb00
   131b8:	000051cb 	andeq	r5, r0, fp, asr #3
   131bc:	005d0703 	subseq	r0, sp, r3, lsl #14
   131c0:	ba040000 	blt	1131c8 <_Min_Stack_Size+0x112fc8>
   131c4:	04000051 	streq	r0, [r0], #-81	; 0xffffffaf
   131c8:	0000412c 	andeq	r4, r0, ip, lsr #2
   131cc:	52a40400 	adcpl	r0, r4, #0, 8
   131d0:	72040000 	andvc	r0, r4, #0
   131d4:	00000041 	andeq	r0, r0, r1, asr #32
   131d8:	00518706 	subseq	r8, r1, r6, lsl #14
   131dc:	01650200 	cmneq	r5, r0, lsl #4
   131e0:	00000064 	andeq	r0, r0, r4, rrx
   131e4:	a6040407 	strge	r0, [r4], -r7, lsl #8
   131e8:	000000cb 	andeq	r0, r0, fp, asr #1
   131ec:	00518108 	subseq	r8, r1, r8, lsl #2
   131f0:	a0a80400 	adcge	r0, r8, r0, lsl #8
   131f4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   131f8:	000050cf 	andeq	r5, r0, pc, asr #1
   131fc:	00cba904 	sbceq	sl, fp, r4, lsl #18
   13200:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   13204:	0000002c 	andeq	r0, r0, ip, lsr #32
   13208:	000000db 	ldrdeq	r0, [r0], -fp
   1320c:	0000db0a 	andeq	sp, r0, sl, lsl #22
   13210:	02000300 	andeq	r0, r0, #0, 6
   13214:	00590704 	subseq	r0, r9, r4, lsl #14
   13218:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
   1321c:	0103a304 	tsteq	r3, r4, lsl #6
   13220:	8e0c0000 	cdphi	0, 0, cr0, cr12, cr0, {0}
   13224:	04000052 	streq	r0, [r0], #-82	; 0xffffffae
   13228:	00005da5 	andeq	r5, r0, r5, lsr #27
   1322c:	960c0000 	strls	r0, [ip], -r0
   13230:	04000052 	streq	r0, [r0], #-82	; 0xffffffae
   13234:	0000acaa 	andeq	sl, r0, sl, lsr #25
   13238:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
   1323c:	0000522d 	andeq	r5, r0, sp, lsr #4
   13240:	00e2ab04 	rsceq	sl, r2, r4, lsl #22
   13244:	a0040000 	andge	r0, r4, r0
   13248:	04000050 	streq	r0, [r0], #-80	; 0xffffffb0
   1324c:	00007faf 	andeq	r7, r0, pc, lsr #31
   13250:	52e00400 	rscpl	r0, r0, #0, 8
   13254:	16050000 	strne	r0, [r5], -r0
   13258:	00000048 	andeq	r0, r0, r8, asr #32
   1325c:	0050a90d 	subseq	sl, r0, sp, lsl #18
   13260:	2d051800 	stccs	8, cr1, [r5, #-0]
   13264:	00000177 	andeq	r0, r0, r7, ror r1
   13268:	00524e0c 	subseq	r4, r2, ip, lsl #28
   1326c:	772f0500 	strvc	r0, [pc, -r0, lsl #10]!
   13270:	00000001 	andeq	r0, r0, r1
   13274:	006b5f0e 	rsbeq	r5, fp, lr, lsl #30
   13278:	005d3005 	subseq	r3, sp, r5
   1327c:	0c040000 	stceq	0, cr0, [r4], {-0}
   13280:	00005280 	andeq	r5, r0, r0, lsl #5
   13284:	005d3005 	subseq	r3, sp, r5
   13288:	0c080000 	stceq	0, cr0, [r8], {-0}
   1328c:	0000509a 	muleq	r0, sl, r0
   13290:	005d3005 	subseq	r3, sp, r5
   13294:	0c0c0000 	stceq	0, cr0, [ip], {-0}
   13298:	000052fb 	strdeq	r5, [r0], -fp
   1329c:	005d3005 	subseq	r3, sp, r5
   132a0:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
   132a4:	0500785f 	streq	r7, [r0, #-2143]	; 0xfffff7a1
   132a8:	00017d31 	andeq	r7, r1, r1, lsr sp
   132ac:	0f001400 	svceq	0x00001400
   132b0:	00012404 	andeq	r2, r1, r4, lsl #8
   132b4:	01190900 	tsteq	r9, r0, lsl #18
   132b8:	018d0000 	orreq	r0, sp, r0
   132bc:	db0a0000 	blle	2932c4 <_Min_Stack_Size+0x2930c4>
   132c0:	00000000 	andeq	r0, r0, r0
   132c4:	50ca0d00 	sbcpl	r0, sl, r0, lsl #26
   132c8:	05240000 	streq	r0, [r4, #-0]!
   132cc:	00020635 	andeq	r0, r2, r5, lsr r6
   132d0:	502e0c00 	eorpl	r0, lr, r0, lsl #24
   132d4:	37050000 	strcc	r0, [r5, -r0]
   132d8:	0000005d 	andeq	r0, r0, sp, asr r0
   132dc:	52b30c00 	adcspl	r0, r3, #0, 24
   132e0:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
   132e4:	0000005d 	andeq	r0, r0, sp, asr r0
   132e8:	503d0c04 	eorspl	r0, sp, r4, lsl #24
   132ec:	39050000 	stmdbcc	r5, {}	; <UNPREDICTABLE>
   132f0:	0000005d 	andeq	r0, r0, sp, asr r0
   132f4:	53580c08 	cmppl	r8, #8, 24	; 0x800
   132f8:	3a050000 	bcc	153300 <_Min_Stack_Size+0x153100>
   132fc:	0000005d 	andeq	r0, r0, sp, asr r0
   13300:	51a60c0c 			; <UNDEFINED> instruction: 0x51a60c0c
   13304:	3b050000 	blcc	15330c <_Min_Stack_Size+0x15310c>
   13308:	0000005d 	andeq	r0, r0, sp, asr r0
   1330c:	51960c10 	orrspl	r0, r6, r0, lsl ip
   13310:	3c050000 	stccc	0, cr0, [r5], {-0}
   13314:	0000005d 	andeq	r0, r0, sp, asr r0
   13318:	53000c14 	movwpl	r0, #3092	; 0xc14
   1331c:	3d050000 	stccc	0, cr0, [r5, #-0]
   13320:	0000005d 	andeq	r0, r0, sp, asr r0
   13324:	52150c18 	andspl	r0, r5, #24, 24	; 0x1800
   13328:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
   1332c:	0000005d 	andeq	r0, r0, sp, asr r0
   13330:	53240c1c 			; <UNDEFINED> instruction: 0x53240c1c
   13334:	3f050000 	svccc	0x00050000
   13338:	0000005d 	andeq	r0, r0, sp, asr r0
   1333c:	1f0d0020 	svcne	0x000d0020
   13340:	08000052 	stmdaeq	r0, {r1, r4, r6}
   13344:	022b7305 	eoreq	r7, fp, #335544320	; 0x14000000
   13348:	a10c0000 	mrsge	r0, (UNDEF: 12)
   1334c:	05000033 	streq	r0, [r0, #-51]	; 0xffffffcd
   13350:	00022b74 	andeq	r2, r2, r4, ror fp
   13354:	ca0c0000 	bgt	31335c <_Min_Stack_Size+0x31315c>
   13358:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
   1335c:	00005d75 	andeq	r5, r0, r5, ror sp
   13360:	0f000400 	svceq	0x00000400
   13364:	00002c04 	andeq	r2, r0, r4, lsl #24
   13368:	52d41000 	sbcspl	r1, r4, #0
   1336c:	05600000 	strbeq	r0, [r0, #-0]!
   13370:	035d0172 	cmpeq	sp, #-2147483620	; 0x8000001c
   13374:	ac110000 	ldcge	0, cr0, [r1], {-0}
   13378:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   1337c:	005d0176 	subseq	r0, sp, r6, ror r1
   13380:	11000000 	mrsne	r0, (UNDEF: 0)
   13384:	000055ed 	andeq	r5, r0, sp, ror #11
   13388:	92017b05 	andls	r7, r1, #5120	; 0x1400
   1338c:	04000005 	streq	r0, [r0], #-5
   13390:	0055fd11 	subseq	pc, r5, r1, lsl sp	; <UNPREDICTABLE>
   13394:	017b0500 	cmneq	fp, r0, lsl #10
   13398:	00000592 	muleq	r0, r2, r5
   1339c:	56b81108 	ldrtpl	r1, [r8], r8, lsl #2
   133a0:	7b050000 	blvc	1533a8 <_Min_Stack_Size+0x1531a8>
   133a4:	00059201 	andeq	r9, r5, r1, lsl #4
   133a8:	61110c00 	tstvs	r1, r0, lsl #24
   133ac:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   133b0:	005d017d 	subseq	r0, sp, sp, ror r1
   133b4:	11100000 	tstne	r0, r0
   133b8:	00004fe2 	andeq	r4, r0, r2, ror #31
   133bc:	ab017f05 	blge	72fd8 <_Min_Stack_Size+0x72dd8>
   133c0:	14000004 	strne	r0, [r0], #-4
   133c4:	0051af11 	subseq	sl, r1, r1, lsl pc
   133c8:	01810500 	orreq	r0, r1, r0, lsl #10
   133cc:	0000005d 	andeq	r0, r0, sp, asr r0
   133d0:	50e71118 	rscpl	r1, r7, r8, lsl r1
   133d4:	83050000 	movwhi	r0, #20480	; 0x5000
   133d8:	00005d01 	andeq	r5, r0, r1, lsl #26
   133dc:	66111c00 	ldrvs	r1, [r1], -r0, lsl #24
   133e0:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   133e4:	04dc0184 	ldrbeq	r0, [ip], #388	; 0x184
   133e8:	12200000 	eorne	r0, r0, #0
   133ec:	00706d5f 	rsbseq	r6, r0, pc, asr sp
   133f0:	df018605 	svcle	0x00018605
   133f4:	24000006 	strcs	r0, [r0], #-6
   133f8:	00527611 	subseq	r7, r2, r1, lsl r6
   133fc:	01880500 	orreq	r0, r8, r0, lsl #10
   13400:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13404:	50b11128 	adcspl	r1, r1, r8, lsr #2
   13408:	8a050000 	bhi	153410 <_Min_Stack_Size+0x153210>
   1340c:	00005d01 	andeq	r5, r0, r1, lsl #26
   13410:	f9112c00 			; <UNDEFINED> instruction: 0xf9112c00
   13414:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   13418:	005d018d 	subseq	r0, sp, sp, lsl #3
   1341c:	11300000 	teqne	r0, r0
   13420:	00005073 	andeq	r5, r0, r3, ror r0
   13424:	ab018e05 	blge	76c40 <_Min_Stack_Size+0x76a40>
   13428:	34000004 	strcc	r0, [r0], #-4
   1342c:	00510111 	subseq	r0, r1, r1, lsl r1
   13430:	01900500 	orrseq	r0, r0, r0, lsl #10
   13434:	000006f6 	strdeq	r0, [r0], -r6
   13438:	532f1138 			; <UNDEFINED> instruction: 0x532f1138
   1343c:	91050000 	mrsls	r0, (UNDEF: 5)
   13440:	0006fc01 	andeq	pc, r6, r1, lsl #24
   13444:	6c113c00 	ldcvs	12, cr3, [r1], {-0}
   13448:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
   1344c:	04ab0192 	strteq	r0, [fp], #402	; 0x192
   13450:	11400000 	mrsne	r0, (UNDEF: 64)
   13454:	00005314 	andeq	r5, r0, r4, lsl r3
   13458:	0d019505 	cfstr32eq	mvfx9, [r1, #-20]	; 0xffffffec
   1345c:	44000007 	strmi	r0, [r0], #-7
   13460:	00505411 	subseq	r5, r0, r1, lsl r4
   13464:	019d0500 	orrseq	r0, sp, r0, lsl #10
   13468:	00000557 	andeq	r0, r0, r7, asr r5
   1346c:	50471148 	subpl	r1, r7, r8, asr #2
   13470:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
   13474:	00059201 	andeq	r9, r5, r1, lsl #4
   13478:	a0115400 	andsge	r5, r1, r0, lsl #8
   1347c:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
   13480:	0719019f 			; <UNDEFINED> instruction: 0x0719019f
   13484:	11580000 	cmpne	r8, r0
   13488:	00004ffc 	strdeq	r4, [r0], -ip
   1348c:	ab01a005 	blge	7b4a8 <_Min_Stack_Size+0x7b2a8>
   13490:	5c000004 	stcpl	0, cr0, [r0], {4}
   13494:	31040f00 	tstcc	r4, r0, lsl #30
   13498:	0d000002 	stceq	0, cr0, [r0, #-8]
   1349c:	00005238 	andeq	r5, r0, r8, lsr r2
   134a0:	8db30568 	cfldr32hi	mvfx0, [r3, #416]!	; 0x1a0
   134a4:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
   134a8:	0500705f 	streq	r7, [r0, #-95]	; 0xffffffa1
   134ac:	00022bb4 			; <UNDEFINED> instruction: 0x00022bb4
   134b0:	5f0e0000 	svcpl	0x000e0000
   134b4:	b5050072 	strlt	r0, [r5, #-114]	; 0xffffff8e
   134b8:	0000005d 	andeq	r0, r0, sp, asr r0
   134bc:	775f0e04 	ldrbvc	r0, [pc, -r4, lsl #28]
   134c0:	5db60500 	cfldr32pl	mvfx0, [r6]
   134c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   134c8:	0050630c 	subseq	r6, r0, ip, lsl #6
   134cc:	33b70500 			; <UNDEFINED> instruction: 0x33b70500
   134d0:	0c000000 	stceq	0, cr0, [r0], {-0}
   134d4:	0052f50c 	subseq	pc, r2, ip, lsl #10
   134d8:	33b80500 			; <UNDEFINED> instruction: 0x33b80500
   134dc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   134e0:	66625f0e 	strbtvs	r5, [r2], -lr, lsl #30
   134e4:	06b90500 	ldrteq	r0, [r9], r0, lsl #10
   134e8:	10000002 	andne	r0, r0, r2
   134ec:	0050080c 	subseq	r0, r0, ip, lsl #16
   134f0:	5dba0500 	cfldr32pl	mvfx0, [sl]
   134f4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   134f8:	000deb0c 	andeq	lr, sp, ip, lsl #22
   134fc:	5dbd0500 	cfldr32pl	mvfx0, [sp]
   13500:	1c000003 	stcne	0, cr0, [r0], {3}
   13504:	00504c0c 	subseq	r4, r0, ip, lsl #24
   13508:	7dc10500 	cfstr64vc	mvdx0, [r1]
   1350c:	20000000 	andcs	r0, r0, r0
   13510:	003a870c 	eorseq	r8, sl, ip, lsl #14
   13514:	b8c30500 	stmialt	r3, {r8, sl}^
   13518:	24000004 	strcs	r0, [r0], #-4
   1351c:	0039e20c 	eorseq	lr, r9, ip, lsl #4
   13520:	e7c50500 	strb	r0, [r5, r0, lsl #10]
   13524:	28000004 	stmdacs	r0, {r2}
   13528:	00529e0c 	subseq	r9, r2, ip, lsl #28
   1352c:	0bc80500 	bleq	ff214934 <BootRAM+0xe1850d5>
   13530:	2c000005 	stccs	0, cr0, [r0], {5}
   13534:	00533e0c 	subseq	r3, r3, ip, lsl #28
   13538:	25c90500 	strbcs	r0, [r9, #1280]	; 0x500
   1353c:	30000005 	andcc	r0, r0, r5
   13540:	62755f0e 	rsbsvs	r5, r5, #14, 30	; 0x38
   13544:	06cc0500 	strbeq	r0, [ip], r0, lsl #10
   13548:	34000002 	strcc	r0, [r0], #-2
   1354c:	70755f0e 	rsbsvc	r5, r5, lr, lsl #30
   13550:	2bcd0500 	blcs	ff354958 <BootRAM+0xe2c50f9>
   13554:	3c000002 	stccc	0, cr0, [r0], {2}
   13558:	72755f0e 	rsbsvc	r5, r5, #14, 30	; 0x38
   1355c:	5dce0500 	cfstr64pl	mvdx0, [lr]
   13560:	40000000 	andmi	r0, r0, r0
   13564:	0050370c 	subseq	r3, r0, ip, lsl #14
   13568:	2bd10500 	blcs	ff454970 <BootRAM+0xe3c5111>
   1356c:	44000005 	strmi	r0, [r0], #-5
   13570:	00531e0c 	subseq	r1, r3, ip, lsl #28
   13574:	3bd20500 	blcc	ff49497c <BootRAM+0xe40511d>
   13578:	47000005 	strmi	r0, [r0, -r5]
   1357c:	626c5f0e 	rsbvs	r5, ip, #14, 30	; 0x38
   13580:	06d50500 	ldrbeq	r0, [r5], r0, lsl #10
   13584:	48000002 	stmdami	r0, {r1}
   13588:	00506a0c 	subseq	r6, r0, ip, lsl #20
   1358c:	5dd80500 	cfldr64pl	mvdx0, [r8]
   13590:	50000000 	andpl	r0, r0, r0
   13594:	005b4c0c 	subseq	r4, fp, ip, lsl #24
   13598:	8ad90500 	bhi	ff6549a0 <BootRAM+0xe5c5141>
   1359c:	54000000 	strpl	r0, [r0], #-0
   135a0:	00353a0c 	eorseq	r3, r5, ip, lsl #20
   135a4:	0ee00500 	cdpeq	5, 14, cr0, cr0, cr0, {0}
   135a8:	58000001 	stmdapl	r0, {r0}
   135ac:	0052400c 	subseq	r4, r2, ip
   135b0:	03e20500 	mvneq	r0, #0, 10
   135b4:	5c000001 	stcpl	0, cr0, [r0], {1}
   135b8:	00518e0c 	subseq	r8, r1, ip, lsl #28
   135bc:	5de30500 	cfstr64pl	mvdx0, [r3]
   135c0:	64000000 	strvs	r0, [r0], #-0
   135c4:	005d1300 	subseq	r1, sp, r0, lsl #6
   135c8:	04ab0000 	strteq	r0, [fp], #0
   135cc:	5d140000 	ldcpl	0, cr0, [r4, #-0]
   135d0:	14000003 	strne	r0, [r0], #-3
   135d4:	0000007d 	andeq	r0, r0, sp, ror r0
   135d8:	0004ab14 	andeq	sl, r4, r4, lsl fp
   135dc:	005d1400 	subseq	r1, sp, r0, lsl #8
   135e0:	0f000000 	svceq	0x00000000
   135e4:	0004b104 	andeq	fp, r4, r4, lsl #2
   135e8:	08010200 	stmdaeq	r1, {r9}
   135ec:	00000199 	muleq	r0, r9, r1
   135f0:	048d040f 	streq	r0, [sp], #1039	; 0x40f
   135f4:	5d130000 	ldcpl	0, cr0, [r3, #-0]
   135f8:	dc000000 	stcle	0, cr0, [r0], {-0}
   135fc:	14000004 	strne	r0, [r0], #-4
   13600:	0000035d 	andeq	r0, r0, sp, asr r3
   13604:	00007d14 	andeq	r7, r0, r4, lsl sp
   13608:	04dc1400 	ldrbeq	r1, [ip], #1024	; 0x400
   1360c:	5d140000 	ldcpl	0, cr0, [r4, #-0]
   13610:	00000000 	andeq	r0, r0, r0
   13614:	04e2040f 	strbteq	r0, [r2], #1039	; 0x40f
   13618:	b1150000 	tstlt	r5, r0
   1361c:	0f000004 	svceq	0x00000004
   13620:	0004be04 	andeq	fp, r4, r4, lsl #28
   13624:	00951300 	addseq	r1, r5, r0, lsl #6
   13628:	050b0000 	streq	r0, [fp, #-0]
   1362c:	5d140000 	ldcpl	0, cr0, [r4, #-0]
   13630:	14000003 	strne	r0, [r0], #-3
   13634:	0000007d 	andeq	r0, r0, sp, ror r0
   13638:	00009514 	andeq	r9, r0, r4, lsl r5
   1363c:	005d1400 	subseq	r1, sp, r0, lsl #8
   13640:	0f000000 	svceq	0x00000000
   13644:	0004ed04 	andeq	lr, r4, r4, lsl #26
   13648:	005d1300 	subseq	r1, sp, r0, lsl #6
   1364c:	05250000 	streq	r0, [r5, #-0]!
   13650:	5d140000 	ldcpl	0, cr0, [r4, #-0]
   13654:	14000003 	strne	r0, [r0], #-3
   13658:	0000007d 	andeq	r0, r0, sp, ror r0
   1365c:	11040f00 	tstne	r4, r0, lsl #30
   13660:	09000005 	stmdbeq	r0, {r0, r2}
   13664:	0000002c 	andeq	r0, r0, ip, lsr #32
   13668:	0000053b 	andeq	r0, r0, fp, lsr r5
   1366c:	0000db0a 	andeq	sp, r0, sl, lsl #22
   13670:	09000200 	stmdbeq	r0, {r9}
   13674:	0000002c 	andeq	r0, r0, ip, lsr #32
   13678:	0000054b 	andeq	r0, r0, fp, asr #10
   1367c:	0000db0a 	andeq	sp, r0, sl, lsl #22
   13680:	06000000 	streq	r0, [r0], -r0
   13684:	00005226 	andeq	r5, r0, r6, lsr #4
   13688:	63011d05 	movwvs	r1, #7429	; 0x1d05
   1368c:	10000003 	andne	r0, r0, r3
   13690:	00005b0b 	andeq	r5, r0, fp, lsl #22
   13694:	0121050c 			; <UNDEFINED> instruction: 0x0121050c
   13698:	0000058c 	andeq	r0, r0, ip, lsl #11
   1369c:	00524e11 	subseq	r4, r2, r1, lsl lr
   136a0:	01230500 			; <UNDEFINED> instruction: 0x01230500
   136a4:	0000058c 	andeq	r0, r0, ip, lsl #11
   136a8:	51061100 	mrspl	r1, (UNDEF: 22)
   136ac:	24050000 	strcs	r0, [r5], #-0
   136b0:	00005d01 	andeq	r5, r0, r1, lsl #26
   136b4:	0f110400 	svceq	0x00110400
   136b8:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   136bc:	05920125 	ldreq	r0, [r2, #293]	; 0x125
   136c0:	00080000 	andeq	r0, r8, r0
   136c4:	0557040f 	ldrbeq	r0, [r7, #-1039]	; 0xfffffbf1
   136c8:	040f0000 	streq	r0, [pc], #-0	; 136d0 <_Min_Stack_Size+0x134d0>
   136cc:	0000054b 	andeq	r0, r0, fp, asr #10
   136d0:	004fda10 	subeq	sp, pc, r0, lsl sl	; <UNPREDICTABLE>
   136d4:	3d051800 	stccc	8, cr1, [r5, #-0]
   136d8:	0005da01 	andeq	sp, r5, r1, lsl #20
   136dc:	52881100 	addpl	r1, r8, #0, 2
   136e0:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
   136e4:	0005da01 	andeq	sp, r5, r1, lsl #20
   136e8:	bc110000 	ldclt	0, cr0, [r1], {-0}
   136ec:	05000052 	streq	r0, [r0, #-82]	; 0xffffffae
   136f0:	05da013f 	ldrbeq	r0, [sl, #319]	; 0x13f
   136f4:	11060000 	mrsne	r0, (UNDEF: 6)
   136f8:	000052db 	ldrdeq	r5, [r0], -fp
   136fc:	3a014005 	bcc	63718 <_Min_Stack_Size+0x63518>
   13700:	0c000000 	stceq	0, cr0, [r0], {-0}
   13704:	00524911 	subseq	r4, r2, r1, lsl r9
   13708:	01430500 	cmpeq	r3, r0, lsl #10
   1370c:	00000056 	andeq	r0, r0, r6, asr r0
   13710:	3a090010 	bcc	253758 <_Min_Stack_Size+0x253558>
   13714:	ea000000 	b	1371c <_Min_Stack_Size+0x1351c>
   13718:	0a000005 	beq	13734 <_Min_Stack_Size+0x13534>
   1371c:	000000db 	ldrdeq	r0, [r0], -fp
   13720:	5c100002 	ldcpl	0, cr0, [r0], {2}
   13724:	10000050 	andne	r0, r0, r0, asr r0
   13728:	2c015605 	stccs	6, cr5, [r1], {5}
   1372c:	11000006 	tstne	r0, r6
   13730:	00005179 	andeq	r5, r0, r9, ror r1
   13734:	77015905 	strvc	r5, [r1, -r5, lsl #18]
   13738:	00000001 	andeq	r0, r0, r1
   1373c:	0050c011 	subseq	ip, r0, r1, lsl r0
   13740:	015a0500 	cmpeq	sl, r0, lsl #10
   13744:	0000005d 	andeq	r0, r0, sp, asr r0
   13748:	53531104 	cmppl	r3, #4, 2
   1374c:	5b050000 	blpl	153754 <_Min_Stack_Size+0x153554>
   13750:	00017701 	andeq	r7, r1, r1, lsl #14
   13754:	c1110800 	tstgt	r1, r0, lsl #16
   13758:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
   1375c:	062c015c 			; <UNDEFINED> instruction: 0x062c015c
   13760:	000c0000 	andeq	r0, ip, r0
   13764:	0177040f 	cmneq	r7, pc, lsl #8
   13768:	cf100000 	svcgt	0x00100000
   1376c:	50000052 	andpl	r0, r0, r2, asr r0
   13770:	cf016005 	svcgt	0x00016005
   13774:	11000006 	tstne	r0, r6
   13778:	000052c2 	andeq	r5, r0, r2, asr #5
   1377c:	ab016305 	blge	6c398 <_Min_Stack_Size+0x6c198>
   13780:	00000004 	andeq	r0, r0, r4
   13784:	00525411 	subseq	r5, r2, r1, lsl r4
   13788:	01640500 	cmneq	r4, r0, lsl #10
   1378c:	00000103 	andeq	r0, r0, r3, lsl #2
   13790:	50201104 	eorpl	r1, r0, r4, lsl #2
   13794:	65050000 	strvs	r0, [r5, #-0]
   13798:	00010301 	andeq	r0, r1, r1, lsl #6
   1379c:	45110c00 	ldrmi	r0, [r1, #-3072]	; 0xfffff400
   137a0:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
   137a4:	01030166 	tsteq	r3, r6, ror #2
   137a8:	11140000 	tstne	r4, r0
   137ac:	0000530a 	andeq	r5, r0, sl, lsl #6
   137b0:	cf016705 	svcgt	0x00016705
   137b4:	1c000006 	stcne	0, cr0, [r0], {6}
   137b8:	0052e811 	subseq	lr, r2, r1, lsl r8
   137bc:	01680500 	cmneq	r8, r0, lsl #10
   137c0:	0000005d 	andeq	r0, r0, sp, asr r0
   137c4:	508c1124 	addpl	r1, ip, r4, lsr #2
   137c8:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
   137cc:	00010301 	andeq	r0, r1, r1, lsl #6
   137d0:	11112800 	tstne	r1, r0, lsl #16
   137d4:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   137d8:	0103016a 	tsteq	r3, sl, ror #2
   137dc:	11300000 	teqne	r0, r0
   137e0:	0000507b 	andeq	r5, r0, fp, ror r0
   137e4:	03016b05 	movweq	r6, #6917	; 0x1b05
   137e8:	38000001 	stmdacc	r0, {r0}
   137ec:	004fed11 	subeq	lr, pc, r1, lsl sp	; <UNPREDICTABLE>
   137f0:	016c0500 	cmneq	ip, r0, lsl #10
   137f4:	00000103 	andeq	r0, r0, r3, lsl #2
   137f8:	50d61140 	sbcspl	r1, r6, r0, asr #2
   137fc:	6d050000 	stcvs	0, cr0, [r5, #-0]
   13800:	00010301 	andeq	r0, r1, r1, lsl #6
   13804:	09004800 	stmdbeq	r0, {fp, lr}
   13808:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
   1380c:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   13810:	0000db0a 	andeq	sp, r0, sl, lsl #22
   13814:	0f000700 	svceq	0x00000700
   13818:	0005ea04 	andeq	lr, r5, r4, lsl #20
   1381c:	06f01600 	ldrbteq	r1, [r0], r0, lsl #12
   13820:	5d140000 	ldcpl	0, cr0, [r4, #-0]
   13824:	00000003 	andeq	r0, r0, r3
   13828:	06e5040f 	strbteq	r0, [r5], pc, lsl #8
   1382c:	040f0000 	streq	r0, [pc], #-0	; 13834 <_Min_Stack_Size+0x13634>
   13830:	00000598 	muleq	r0, r8, r5
   13834:	018d040f 	orreq	r0, sp, pc, lsl #8
   13838:	0d160000 	ldceq	0, cr0, [r6, #-0]
   1383c:	14000007 	strne	r0, [r0], #-7
   13840:	0000005d 	andeq	r0, r0, sp, asr r0
   13844:	13040f00 	movwne	r0, #20224	; 0x4f00
   13848:	0f000007 	svceq	0x00000007
   1384c:	00070204 	andeq	r0, r7, r4, lsl #4
   13850:	32040f00 	andcc	r0, r4, #0, 30
   13854:	04000006 	streq	r0, [r0], #-6
   13858:	0000570c 	andeq	r5, r0, ip, lsl #14
   1385c:	006b7b01 	rsbeq	r7, fp, r1, lsl #22
   13860:	5f0d0000 	svcpl	0x000d0000
   13864:	08000057 	stmdaeq	r0, {r0, r1, r2, r4, r6}
   13868:	074f7d01 	strbeq	r7, [pc, -r1, lsl #26]
   1386c:	cb0c0000 	blgt	313874 <_Min_Stack_Size+0x313674>
   13870:	01000057 	qaddeq	r0, r7, r0
   13874:	0000418f 	andeq	r4, r0, pc, lsl #3
   13878:	4f0c0000 	svcmi	0x000c0000
   1387c:	01000052 	qaddeq	r0, r2, r0
   13880:	00074f92 	muleq	r7, r2, pc	; <UNPREDICTABLE>
   13884:	0f000400 	svceq	0x00000400
   13888:	00072a04 	andeq	r2, r7, r4, lsl #20
   1388c:	57660400 	strbpl	r0, [r6, -r0, lsl #8]!
   13890:	93010000 	movwls	r0, #4096	; 0x1000
   13894:	0000072a 	andeq	r0, r0, sl, lsr #14
   13898:	005ad717 	subseq	sp, sl, r7, lsl r7
   1389c:	020d0100 	andeq	r0, sp, #0, 2
   138a0:	0000071f 	andeq	r0, r0, pc, lsl r7
   138a4:	080012b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, ip}
   138a8:	00000014 	andeq	r0, r0, r4, lsl r0
   138ac:	07b99c01 	ldreq	r9, [r9, r1, lsl #24]!
   138b0:	6c180000 	ldcvs	0, cr0, [r8], {-0}
   138b4:	01000057 	qaddeq	r0, r7, r0
   138b8:	035d020d 	cmpeq	sp, #-805306368	; 0xd0000000
   138bc:	22d90000 	sbcscs	r0, r9, #0
   138c0:	70190000 	andsvc	r0, r9, r0
   138c4:	01007274 	tsteq	r0, r4, ror r2
   138c8:	007d020d 	rsbseq	r0, sp, sp, lsl #4
   138cc:	22fa0000 	rscscs	r0, sl, #0
   138d0:	631a0000 	tstvs	sl, #0
   138d4:	020f0100 	andeq	r0, pc, #0, 2
   138d8:	000007b9 			; <UNDEFINED> instruction: 0x000007b9
   138dc:	0000231b 	andeq	r2, r0, fp, lsl r3
   138e0:	005b451b 	subseq	r4, fp, fp, lsl r5
   138e4:	02100100 	andseq	r0, r0, #0, 2
   138e8:	0000005d 	andeq	r0, r0, sp, asr r0
   138ec:	0000236c 	andeq	r2, r0, ip, ror #6
   138f0:	55040f00 	strpl	r0, [r4, #-3840]	; 0xfffff100
   138f4:	00000007 	andeq	r0, r0, r7
   138f8:	00000099 	muleq	r0, r9, r0
   138fc:	40930004 	addsmi	r0, r3, r4
   13900:	01040000 	mrseq	r0, (UNDEF: 4)
   13904:	00005be3 	andeq	r5, r0, r3, ror #23
   13908:	005bad0c 	subseq	sl, fp, ip, lsl #26
   1390c:	005b5400 	subseq	r5, fp, r0, lsl #8
   13910:	0012c800 	andseq	ip, r2, r0, lsl #16
   13914:	00001c08 	andeq	r1, r0, r8, lsl #24
   13918:	00754300 	rsbseq	r4, r5, r0, lsl #6
   1391c:	5a430200 	bpl	10d4124 <_Min_Stack_Size+0x10d3f24>
   13920:	07010000 	streq	r0, [r1, -r0]
   13924:	0000007b 	andeq	r0, r0, fp, ror r0
   13928:	080012c8 	stmdaeq	r0, {r3, r6, r7, r9, ip}
   1392c:	0000001c 	andeq	r0, r0, ip, lsl r0
   13930:	007b9c01 	rsbseq	r9, fp, r1, lsl #24
   13934:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
   13938:	0100005a 	qaddeq	r0, sl, r0
   1393c:	00007d08 	andeq	r7, r0, r8, lsl #26
   13940:	00238e00 	eoreq	r8, r3, r0, lsl #28
   13944:	6e650400 	cdpvs	4, 6, cr0, cr5, cr0, {0}
   13948:	0a010064 	beq	53ae0 <_Min_Stack_Size+0x538e0>
   1394c:	00000084 	andeq	r0, r0, r4, lsl #1
   13950:	005bda05 	subseq	sp, fp, r5, lsl #20
   13954:	8b0b0100 	blhi	2d3d5c <_Min_Stack_Size+0x2d3b5c>
   13958:	05000000 	streq	r0, [r0, #-0]
   1395c:	0000f403 	andeq	pc, r0, r3, lsl #8
   13960:	5bd50520 	blpl	ff554de8 <BootRAM+0xe4c5589>
   13964:	0c010000 	stceq	0, cr0, [r1], {-0}
   13968:	0000008b 	andeq	r0, r0, fp, lsl #1
   1396c:	00f40305 	rscseq	r0, r4, r5, lsl #6
   13970:	06002000 	streq	r2, [r0], -r0
   13974:	05040704 	streq	r0, [r4, #-1796]	; 0xfffff8fc
   13978:	00746e69 	rsbseq	r6, r4, r9, ror #28
   1397c:	99080108 	stmdbls	r8, {r3, r8}
   13980:	09000001 	stmdbeq	r0, {r0}
   13984:	00008404 	andeq	r8, r0, r4, lsl #8
   13988:	6e650400 	cdpvs	4, 6, cr0, cr5, cr0, {0}
   1398c:	0a010064 	beq	53b24 <_Min_Stack_Size+0x53924>
   13990:	00000084 	andeq	r0, r0, r4, lsl #1
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
{
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
}
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	1117550e 	tstne	r7, lr, lsl #10
       c:	00171001 	andseq	r1, r7, r1
      10:	00240200 	eoreq	r0, r4, r0, lsl #4
      14:	0b3e0b0b 	bleq	f82c48 <_Min_Stack_Size+0xf82a48>
      18:	00000e03 	andeq	r0, r0, r3, lsl #28
    bitstatus = SET;
      1c:	03001603 	movweq	r1, #1539	; 0x603
    bitstatus = RESET;
      20:	3b0b3a0e 	blcc	2ce860 <_Min_Stack_Size+0x2ce660>
  return bitstatus;
      24:	0013490b 	andseq	r4, r3, fp, lsl #18
}
      28:	00240400 	eoreq	r0, r4, r0, lsl #8
      2c:	0b3e0b0b 	bleq	f82c60 <_Min_Stack_Size+0xf82a60>
      30:	00000803 	andeq	r0, r0, r3, lsl #16
      34:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
      38:	06000013 			; <UNDEFINED> instruction: 0x06000013
      3c:	0b0b0113 	bleq	2c0490 <_Min_Stack_Size+0x2c0290>
      40:	0b3b0b3a 	bleq	ec2d30 <_Min_Stack_Size+0xec2b30>
      44:	00001301 	andeq	r1, r0, r1, lsl #6
      48:	03000d07 	movweq	r0, #3335	; 0xd07
      4c:	3b0b3a0e 	blcc	2ce88c <_Min_Stack_Size+0x2ce68c>
      50:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      54:	0800000b 	stmdaeq	r0, {r0, r1, r3}
      58:	0803000d 	stmdaeq	r3, {r0, r2, r3}
        Driver_OLED_Send_START(OLED_DATA);
      5c:	0b3b0b3a 	bleq	ec2d4c <_Min_Stack_Size+0xec2b4c>
        for(x=x0;x<x1;x++){ 
      60:	0b381349 	bleq	e04d8c <_Min_Stack_Size+0xe04b8c>
            I2C_SendData(OLED_HARDWARE, BMP[j++]);
      64:	26090000 	strcs	r0, [r9], -r0
      68:	00134900 	andseq	r4, r3, r0, lsl #18
      6c:	01010a00 	tsteq	r1, r0, lsl #20
      70:	13011349 	movwne	r1, #4937	; 0x1349
      74:	210b0000 	mrscs	r0, (UNDEF: 11)
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);    	
      78:	2f134900 	svccs	0x00134900
      7c:	0c00000b 	stceq	0, cr0, [r0], {11}
      80:	0b0b0104 	bleq	2c0498 <_Min_Stack_Size+0x2c0298>
      84:	0b3a1349 	bleq	e84db0 <_Min_Stack_Size+0xe84bb0>
        for(x=x0;x<x1;x++){ 
      88:	1301053b 	movwne	r0, #5435	; 0x153b
      8c:	280d0000 	stmdacs	sp, {}	; <UNPREDICTABLE>
      90:	1c0e0300 	stcne	3, cr0, [lr], {-0}
      94:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
        _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
      98:	08030028 	stmdaeq	r3, {r3, r5}
      9c:	00000b1c 	andeq	r0, r0, ip, lsl fp
      a0:	0b01130f 	bleq	44ce4 <_Min_Stack_Size+0x44ae4>
      a4:	3b0b3a0b 	blcc	2ce8d8 <_Min_Stack_Size+0x2ce6d8>
	for(y=y0;y<y1;y++){
      a8:	00130105 	andseq	r0, r3, r5, lsl #2
      ac:	000d1000 	andeq	r1, sp, r0
      b0:	0b3a0803 	bleq	e820c4 <_Min_Stack_Size+0xe81ec4>
}
      b4:	1349053b 	movtne	r0, #38203	; 0x953b
      b8:	00000b38 	andeq	r0, r0, r8, lsr fp
      bc:	03000d11 	movweq	r0, #3345	; 0xd11
      c0:	3b0b3a0e 	blcc	2ce900 <_Min_Stack_Size+0x2ce700>
      c4:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
      c8:	1200000b 	andne	r0, r0, #11
      cc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      d4:	00001349 	andeq	r1, r0, r9, asr #6
      d8:	3f002e13 	svccc	0x00002e13
      dc:	3a0e0319 	bcc	380d48 <_Min_Stack_Size+0x380b48>
      e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      e4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      e8:	96184006 	ldrls	r4, [r8], -r6
      ec:	00001942 	andeq	r1, r0, r2, asr #18
      f0:	3f012e14 	svccc	0x00012e14
				prvUnlockQueue( pxQueue );
      f4:	3a0e0319 	bcc	380d60 <_Min_Stack_Size+0x380b60>
      f8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
				if( xTaskResumeAll() == pdFALSE )
      fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     100:	97184006 	ldrls	r4, [r8, -r6]
					portYIELD_WITHIN_API();
     104:	13011942 	movwne	r1, #6466	; 0x1942
     108:	34150000 	ldrcc	r0, [r5], #-0
     10c:	3a080300 	bcc	200d14 <_Min_Stack_Size+0x200b14>
     110:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     114:	00180213 	andseq	r0, r8, r3, lsl r2
				prvUnlockQueue( pxQueue );
     118:	00341600 	eorseq	r1, r4, r0, lsl #12
				( void ) xTaskResumeAll();
     11c:	0b3a0e03 	bleq	e83930 <_Min_Stack_Size+0xe83730>
     120:	1349053b 	movtne	r0, #38203	; 0x953b
			prvUnlockQueue( pxQueue );
     124:	00001802 	andeq	r1, r0, r2, lsl #16
			( void ) xTaskResumeAll();
     128:	03002e17 	movweq	r2, #3607	; 0xe17
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     12c:	3b0b3a0e 	blcc	2ce96c <_Min_Stack_Size+0x2ce76c>
     130:	11192705 	tstne	r9, r5, lsl #14
     134:	40061201 	andmi	r1, r6, r1, lsl #4
     138:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
}
     13c:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     140:	3a0e0301 	bcc	380d4c <_Min_Stack_Size+0x380b4c>
     144:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     148:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     14c:	97184006 	ldrls	r4, [r8, -r6]
  SPIx->I2SCFGR = tmpreg;   
     150:	13011942 	movwne	r1, #6466	; 0x1942
     154:	34190000 	ldrcc	r0, [r9], #-0
}
     158:	3a0e0300 	bcc	380d60 <_Min_Stack_Size+0x380b60>
     15c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     160:	3c193f13 	ldccc	15, cr3, [r9], {19}
     164:	1a000019 	bne	1d0 <_Min_Heap_Size+0x1d0>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
     168:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     16c:	0b3b0b3a 	bleq	ec2e5c <_Min_Stack_Size+0xec2c5c>
     170:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     174:	00001802 	andeq	r1, r0, r2, lsl #16
     178:	01110100 	tsteq	r1, r0, lsl #2
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     17c:	0b130e25 	bleq	4c3a18 <_Min_Stack_Size+0x4c3818>
     180:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     184:	01111755 	tsteq	r1, r5, asr r7
     188:	00001710 	andeq	r1, r0, r0, lsl r7
         *(uint8_t*) arg = getSn_SR(sn);
     18c:	0b002402 	bleq	919c <_Min_Stack_Size+0x8f9c>
     190:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     194:	0300000e 	movweq	r0, #14
     198:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     19c:	0b3b0b3a 	bleq	ec2e8c <_Min_Stack_Size+0xec2c8c>
     1a0:	00001349 	andeq	r1, r0, r9, asr #6
     1a4:	0b002404 	bleq	91bc <_Min_Stack_Size+0x8fbc>
         if(getSn_MR(sn) == Sn_MR_TCP)
     1a8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     1ac:	05000008 	streq	r0, [r0, #-8]
     1b0:	13490035 	movtne	r0, #36917	; 0x9035
     1b4:	26060000 	strcs	r0, [r6], -r0
     1b8:	00134900 	andseq	r4, r3, r0, lsl #18
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1bc:	01040700 	tsteq	r4, r0, lsl #14
     1c0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     1c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     1c8:	00001301 	andeq	r1, r0, r1, lsl #6
         break;
     1cc:	03002808 	movweq	r2, #2056	; 0x808
            *(uint16_t*)arg = sock_remained_size[sn];
     1d0:	000b1c0e 	andeq	r1, fp, lr, lsl #24
     1d4:	00280900 	eoreq	r0, r8, r0, lsl #18
     1d8:	0b1c0803 	bleq	7021ec <_Min_Stack_Size+0x701fec>
         CHECK_SOCKMODE(Sn_MR_TCP);
     1dc:	130a0000 	movwne	r0, #40960	; 0xa000
     1e0:	3a0b0b01 	bcc	2c2dec <_Min_Stack_Size+0x2c2bec>
     1e4:	01053b0b 	tsteq	r5, fp, lsl #22
     1e8:	0b000013 	bleq	23c <_Min_Stack_Size+0x3c>
     1ec:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     1f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     1f4:	0b381349 	bleq	e04f20 <_Min_Stack_Size+0xe04d20>
     1f8:	0d0c0000 	stceq	0, cr0, [ip, #-0]
         *(uint8_t*)arg = sock_pack_info[sn];
     1fc:	3a0e0300 	bcc	380e04 <_Min_Stack_Size+0x380c04>
     200:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
         break;
     204:	000b3813 	andeq	r3, fp, r3, lsl r8
         return SOCKERR_SOCKOPT;
     208:	00160d00 	andseq	r0, r6, r0, lsl #26
   return SOCK_OK;
     20c:	0b3a0e03 	bleq	e83a20 <_Min_Stack_Size+0xe83820>
}
     210:	1349053b 	movtne	r0, #38203	; 0x953b
     214:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
     218:	03193f01 	tsteq	r9, #1, 30
     21c:	3b0b3a0e 	blcc	2cea5c <_Min_Stack_Size+0x2ce85c>
     220:	1119270b 	tstne	r9, fp, lsl #14
     224:	40061201 	andmi	r1, r6, r1, lsl #4
     228:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     22c:	00001301 	andeq	r1, r0, r1, lsl #6
     230:	0300050f 	movweq	r0, #1295	; 0x50f
     234:	3b0b3a0e 	blcc	2cea74 <_Min_Stack_Size+0x2ce874>
     238:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     23c:	10000018 	andne	r0, r0, r8, lsl r0
     240:	08030034 	stmdaeq	r3, {r2, r4, r5}
     244:	0b3b0b3a 	bleq	ec2f34 <_Min_Stack_Size+0xec2d34>
     248:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     24c:	0f110000 	svceq	0x00110000
     250:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
	memset(packet, 0, sizeof(packet));
     254:	12000013 	andne	r0, r0, #19
     258:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     25c:	0b3b0b3a 	bleq	ec2f4c <_Min_Stack_Size+0xec2d4c>
	memcpy(packet, fixed_header, sizeof(fixed_header));
     260:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     264:	01130000 	tsteq	r3, r0
     268:	01134901 	tsteq	r3, r1, lsl #18
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
     270:	13490021 	movtne	r0, #36897	; 0x9021
     274:	00000b2f 	andeq	r0, r0, pc, lsr #22
     278:	03000515 	movweq	r0, #1301	; 0x515
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     27c:	3b0b3a08 	blcc	2ceaa4 <_Min_Stack_Size+0x2ce8a4>
     280:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     284:	16000018 			; <UNDEFINED> instruction: 0x16000018
     288:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     28c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     290:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     294:	0000193c 	andeq	r1, r0, ip, lsr r9
     298:	03003417 	movweq	r3, #1047	; 0x417
     29c:	3b0b3a0e 	blcc	2ceadc <_Min_Stack_Size+0x2ce8dc>
     2a0:	3f13490b 	svccc	0x0013490b
		return -1;
     2a4:	00180219 	andseq	r0, r8, r9, lsl r2
     2a8:	00211800 	eoreq	r1, r1, r0, lsl #16
	return 1;
     2ac:	052f1349 	streq	r1, [pc, #-841]!	; ffffff6b <BootRAM+0xef7070c>
}
     2b0:	01000000 	mrseq	r0, (UNDEF: 0)
     2b4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     2b8:	0e030b13 	vmoveq.32	d3[0], r0
     2bc:	17550e1b 	smmlane	r5, fp, lr, r0
     2c0:	17100111 			; <UNDEFINED> instruction: 0x17100111
     2c4:	16020000 	strne	r0, [r2], -r0
     2c8:	3a0e0300 	bcc	380ed0 <_Min_Stack_Size+0x380cd0>
     2cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2d0:	03000013 	movweq	r0, #19
     2d4:	0b0b0024 	bleq	2c036c <_Min_Stack_Size+0x2c016c>
     2d8:	0e030b3e 	vmoveq.16	d3[0], r0
     2dc:	24040000 	strcs	r0, [r4], #-0
     2e0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     2e4:	0008030b 	andeq	r0, r8, fp, lsl #6
     2e8:	01040500 	tsteq	r4, r0, lsl #10
     2ec:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     2f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     2f4:	00001301 	andeq	r1, r0, r1, lsl #6
     2f8:	03002806 	movweq	r2, #2054	; 0x806
     2fc:	000b1c0e 	andeq	r1, fp, lr, lsl #24
     300:	00160700 	andseq	r0, r6, r0, lsl #14
     304:	0b3a0e03 	bleq	e83b18 <_Min_Stack_Size+0xe83918>
     308:	1349053b 	movtne	r0, #38203	; 0x953b
     30c:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
     310:	03193f01 	tsteq	r9, #1, 30
     314:	3b0b3a0e 	blcc	2ceb54 <_Min_Stack_Size+0x2ce954>
     318:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     31c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     320:	96184006 	ldrls	r4, [r8], -r6
     324:	13011942 	movwne	r1, #6466	; 0x1942
     328:	05090000 	streq	r0, [r9, #-0]
     32c:	3a080300 	bcc	200f34 <_Min_Stack_Size+0x200d34>
     330:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     334:	00180213 	andseq	r0, r8, r3, lsl r2
     338:	00050a00 	andeq	r0, r5, r0, lsl #20
     33c:	0b3a0e03 	bleq	e83b50 <_Min_Stack_Size+0xe83950>
     340:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     344:	00001802 	andeq	r1, r0, r2, lsl #16
     348:	0b000f0b 	bleq	3f7c <_Min_Stack_Size+0x3d7c>
     34c:	0013490b 	andseq	r4, r3, fp, lsl #18
     350:	00340c00 	eorseq	r0, r4, r0, lsl #24
     354:	0b3a0803 	bleq	e82368 <_Min_Stack_Size+0xe82168>
     358:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     35c:	00001802 	andeq	r1, r0, r2, lsl #16
     360:	0300340d 	movweq	r3, #1037	; 0x40d
     364:	3b0b3a0e 	blcc	2ceba4 <_Min_Stack_Size+0x2ce9a4>
     368:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     36c:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
     370:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     374:	0b3a0e03 	bleq	e83b88 <_Min_Stack_Size+0xe83988>
     378:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     37c:	01111349 	tsteq	r1, r9, asr #6
     380:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     384:	01194296 			; <UNDEFINED> instruction: 0x01194296
     388:	0f000013 	svceq	0x00000013
     38c:	08030005 	stmdaeq	r3, {r0, r2}
     390:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     394:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     398:	34100000 	ldrcc	r0, [r0], #-0
     39c:	3a080300 	bcc	200fa4 <_Min_Stack_Size+0x200da4>
     3a0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     3a4:	00180213 	andseq	r0, r8, r3, lsl r2
     3a8:	00341100 	eorseq	r1, r4, r0, lsl #2
     3ac:	0b3a0e03 	bleq	e83bc0 <_Min_Stack_Size+0xe839c0>
     3b0:	1349053b 	movtne	r0, #38203	; 0x953b
     3b4:	00001802 	andeq	r1, r0, r2, lsl #16
     3b8:	03000512 	movweq	r0, #1298	; 0x512
     3bc:	3b0b3a0e 	blcc	2cebfc <_Min_Stack_Size+0x2ce9fc>
     3c0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     3c4:	13000018 	movwne	r0, #24
     3c8:	13490101 	movtne	r0, #37121	; 0x9101
     3cc:	00001301 	andeq	r1, r0, r1, lsl #6
     3d0:	49002114 	stmdbmi	r0, {r2, r4, r8, sp}
     3d4:	000b2f13 	andeq	r2, fp, r3, lsl pc
     3d8:	000f1500 	andeq	r1, pc, r0, lsl #10
     3dc:	00000b0b 	andeq	r0, r0, fp, lsl #22
     3e0:	01110100 	tsteq	r1, r0, lsl #2
     3e4:	0b130e25 	bleq	4c3c80 <_Min_Stack_Size+0x4c3a80>
     3e8:	17550e03 	ldrbne	r0, [r5, -r3, lsl #28]
     3ec:	17100111 			; <UNDEFINED> instruction: 0x17100111
     3f0:	16020000 	strne	r0, [r2], -r0
     3f4:	3a0e0300 	bcc	380ffc <_Min_Stack_Size+0x380dfc>
     3f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3fc:	03000013 	movweq	r0, #19
     400:	0b0b0024 	bleq	2c0498 <_Min_Stack_Size+0x2c0298>
     404:	0e030b3e 	vmoveq.16	d3[0], r0
     408:	24040000 	strcs	r0, [r4], #-0
     40c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     410:	0008030b 	andeq	r0, r8, fp, lsl #6
     414:	01130500 	tsteq	r3, r0, lsl #10
     418:	0b0b0e03 	bleq	2c3c2c <_Min_Stack_Size+0x2c3a2c>
     41c:	0b3b0b3a 	bleq	ec310c <_Min_Stack_Size+0xec2f0c>
     420:	00001301 	andeq	r1, r0, r1, lsl #6
     424:	03000d06 	movweq	r0, #3334	; 0xd06
     428:	3b0b3a0e 	blcc	2cec68 <_Min_Stack_Size+0x2cea68>
     42c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     430:	0700000b 	streq	r0, [r0, -fp]
     434:	19270015 	stmdbne	r7!, {r0, r2, r4}
     438:	0f080000 	svceq	0x00080000
     43c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     440:	09000013 	stmdbeq	r0, {r0, r1, r4}
     444:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
     448:	0b3a0b0b 	bleq	e8307c <_Min_Stack_Size+0xe82e7c>
     44c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     450:	130a0000 	movwne	r0, #40960	; 0xa000
     454:	3a0b0b01 	bcc	2c3060 <_Min_Stack_Size+0x2c2e60>
     458:	010b3b0b 	tsteq	fp, fp, lsl #22
     45c:	0b000013 	bleq	4b0 <_Min_Stack_Size+0x2b0>
     460:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     464:	13011349 	movwne	r1, #4937	; 0x1349
     468:	050c0000 	streq	r0, [ip, #-0]
     46c:	00134900 	andseq	r4, r3, r0, lsl #18
     470:	01150d00 	tsteq	r5, r0, lsl #26
     474:	13011927 	movwne	r1, #6439	; 0x1927
     478:	150e0000 	strne	r0, [lr, #-0]
     47c:	49192700 	ldmdbmi	r9, {r8, r9, sl, sp}
     480:	0f000013 	svceq	0x00000013
     484:	08030117 	stmdaeq	r3, {r0, r1, r2, r4, r8}
     488:	0b3a0b0b 	bleq	e830bc <_Min_Stack_Size+0xe82ebc>
     48c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     490:	0d100000 	ldceq	0, cr0, [r0, #-0]
     494:	3a080300 	bcc	20109c <_Min_Stack_Size+0x200e9c>
     498:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     49c:	11000013 	tstne	r0, r3, lsl r0
     4a0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     4a4:	0b3b0b3a 	bleq	ec3194 <_Min_Stack_Size+0xec2f94>
     4a8:	0b381349 	bleq	e051d4 <_Min_Stack_Size+0xe04fd4>
     4ac:	01120000 	tsteq	r2, r0
     4b0:	01134901 	tsteq	r3, r1, lsl #18
     4b4:	13000013 	movwne	r0, #19
     4b8:	13490021 	movtne	r0, #36897	; 0x9021
     4bc:	00000b2f 	andeq	r0, r0, pc, lsr #22
     4c0:	0b010414 	bleq	41518 <_Min_Stack_Size+0x41318>
     4c4:	3a13490b 	bcc	4d28f8 <_Min_Stack_Size+0x4d26f8>
     4c8:	010b3b0b 	tsteq	fp, fp, lsl #22
     4cc:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
     4d0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     4d4:	00000b1c 	andeq	r0, r0, ip, lsl fp
     4d8:	03002816 	movweq	r2, #2070	; 0x816
     4dc:	00051c0e 	andeq	r1, r5, lr, lsl #24
     4e0:	00161700 	andseq	r1, r6, r0, lsl #14
     4e4:	0b3a0e03 	bleq	e83cf8 <_Min_Stack_Size+0xe83af8>
     4e8:	1349053b 	movtne	r0, #38203	; 0x953b
     4ec:	13180000 	tstne	r8, #0
     4f0:	0b0e0301 	bleq	3810fc <_Min_Stack_Size+0x380efc>
     4f4:	3b0b3a0b 	blcc	2ced28 <_Min_Stack_Size+0x2ceb28>
     4f8:	00130105 	andseq	r0, r3, r5, lsl #2
     4fc:	000d1900 	andeq	r1, sp, r0, lsl #18
     500:	0b3a0803 	bleq	e82514 <_Min_Stack_Size+0xe82314>
     504:	1349053b 	movtne	r0, #38203	; 0x953b
     508:	00000b38 	andeq	r0, r0, r8, lsr fp
     50c:	03000d1a 	movweq	r0, #3354	; 0xd1a
     510:	3b0b3a0e 	blcc	2ced50 <_Min_Stack_Size+0x2ceb50>
     514:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     518:	1b00000b 	blne	54c <_Min_Stack_Size+0x34c>
     51c:	0b0b0104 	bleq	2c0934 <_Min_Stack_Size+0x2c0734>
     520:	0b3a1349 	bleq	e8524c <_Min_Stack_Size+0xe8504c>
     524:	1301053b 	movwne	r0, #5435	; 0x153b
     528:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
     52c:	03193f00 	tsteq	r9, #0, 30
     530:	3b0b3a0e 	blcc	2ced70 <_Min_Stack_Size+0x2ceb70>
     534:	1119270b 	tstne	r9, fp, lsl #14
     538:	40061201 	andmi	r1, r6, r1, lsl #4
     53c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     540:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
     544:	03193f01 	tsteq	r9, #1, 30
     548:	3b0b3a0e 	blcc	2ced88 <_Min_Stack_Size+0x2ceb88>
     54c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     550:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     554:	97184006 	ldrls	r4, [r8, -r6]
     558:	13011942 	movwne	r1, #6466	; 0x1942
     55c:	051e0000 	ldreq	r0, [lr, #-0]
     560:	3a0e0300 	bcc	381168 <_Min_Stack_Size+0x380f68>
     564:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     568:	00180213 	andseq	r0, r8, r3, lsl r2
     56c:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
     570:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     574:	0b3b0b3a 	bleq	ec3264 <_Min_Stack_Size+0xec3064>
     578:	01111927 	tsteq	r1, r7, lsr #18
     57c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     580:	01194297 			; <UNDEFINED> instruction: 0x01194297
     584:	20000013 	andcs	r0, r0, r3, lsl r0
     588:	08030005 	stmdaeq	r3, {r0, r2}
     58c:	0b3b0b3a 	bleq	ec327c <_Min_Stack_Size+0xec307c>
     590:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     594:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     598:	03193f00 	tsteq	r9, #0, 30
     59c:	3b0b3a0e 	blcc	2ceddc <_Min_Stack_Size+0x2cebdc>
     5a0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     5a4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     5a8:	97184006 	ldrls	r4, [r8, -r6]
     5ac:	00001942 	andeq	r1, r0, r2, asr #18
     5b0:	3f012e22 	svccc	0x00012e22
     5b4:	3a0e0319 	bcc	381220 <_Min_Stack_Size+0x381020>
     5b8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     5bc:	11134919 	tstne	r3, r9, lsl r9
     5c0:	40061201 	andmi	r1, r6, r1, lsl #4
     5c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     5c8:	00001301 	andeq	r1, r0, r1, lsl #6
     5cc:	03003423 	movweq	r3, #1059	; 0x423
     5d0:	3b0b3a08 	blcc	2cedf8 <_Min_Stack_Size+0x2cebf8>
     5d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     5d8:	24000018 	strcs	r0, [r0], #-24	; 0xffffffe8
     5dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     5e0:	0b3b0b3a 	bleq	ec32d0 <_Min_Stack_Size+0xec30d0>
     5e4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     5e8:	0f250000 	svceq	0x00250000
     5ec:	000b0b00 	andeq	r0, fp, r0, lsl #22
     5f0:	012e2600 			; <UNDEFINED> instruction: 0x012e2600
     5f4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     5f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     5fc:	01111927 	tsteq	r1, r7, lsr #18
     600:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     604:	01194296 			; <UNDEFINED> instruction: 0x01194296
     608:	27000013 	smladcs	r0, r3, r0, r0
     60c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     610:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     614:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     618:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
     61c:	03193f01 	tsteq	r9, #1, 30
     620:	3b0b3a0e 	blcc	2cee60 <_Min_Stack_Size+0x2cec60>
     624:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     628:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     62c:	96184006 	ldrls	r4, [r8], -r6
     630:	13011942 	movwne	r1, #6466	; 0x1942
     634:	05290000 	streq	r0, [r9, #-0]!
     638:	3a0e0300 	bcc	381240 <_Min_Stack_Size+0x381040>
     63c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     640:	00180213 	andseq	r0, r8, r3, lsl r2
     644:	00342a00 	eorseq	r2, r4, r0, lsl #20
     648:	0b3a0e03 	bleq	e83e5c <_Min_Stack_Size+0xe83c5c>
     64c:	1349053b 	movtne	r0, #38203	; 0x953b
     650:	00001802 	andeq	r1, r0, r2, lsl #16
     654:	3f002e2b 	svccc	0x00002e2b
     658:	3a0e0319 	bcc	3812c4 <_Min_Stack_Size+0x3810c4>
     65c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     660:	11134919 	tstne	r3, r9, lsl r9
     664:	40061201 	andmi	r1, r6, r1, lsl #4
     668:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     66c:	342c0000 	strtcc	r0, [ip], #-0
     670:	3a0e0300 	bcc	381278 <_Min_Stack_Size+0x381078>
     674:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     678:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     67c:	00000018 	andeq	r0, r0, r8, lsl r0
     680:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     684:	030b130e 	movweq	r1, #45838	; 0xb30e
     688:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     68c:	10011117 	andne	r1, r1, r7, lsl r1
     690:	02000017 	andeq	r0, r0, #23
     694:	0b0b0024 	bleq	2c072c <_Min_Stack_Size+0x2c052c>
     698:	0e030b3e 	vmoveq.16	d3[0], r0
     69c:	16030000 	strne	r0, [r3], -r0
     6a0:	3a0e0300 	bcc	3812a8 <_Min_Stack_Size+0x3810a8>
     6a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6a8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     6ac:	0b0b0024 	bleq	2c0744 <_Min_Stack_Size+0x2c0544>
     6b0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     6b4:	0f050000 	svceq	0x00050000
     6b8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     6bc:	06000013 			; <UNDEFINED> instruction: 0x06000013
     6c0:	19270015 	stmdbne	r7!, {r0, r2, r4}
     6c4:	13070000 	movwne	r0, #28672	; 0x7000
     6c8:	0b0e0301 	bleq	3812d4 <_Min_Stack_Size+0x3810d4>
     6cc:	3b0b3a0b 	blcc	2cef00 <_Min_Stack_Size+0x2ced00>
     6d0:	0013010b 	andseq	r0, r3, fp, lsl #2
     6d4:	000d0800 	andeq	r0, sp, r0, lsl #16
     6d8:	0b3a0e03 	bleq	e83eec <_Min_Stack_Size+0xe83cec>
     6dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     6e0:	00000b38 	andeq	r0, r0, r8, lsr fp
     6e4:	03011309 	movweq	r1, #4873	; 0x1309
     6e8:	3a0b0b08 	bcc	2c3310 <_Min_Stack_Size+0x2c3110>
     6ec:	010b3b0b 	tsteq	fp, fp, lsl #22
     6f0:	0a000013 	beq	744 <_Min_Stack_Size+0x544>
     6f4:	0b0b0113 	bleq	2c0b48 <_Min_Stack_Size+0x2c0948>
     6f8:	0b3b0b3a 	bleq	ec33e8 <_Min_Stack_Size+0xec31e8>
     6fc:	00001301 	andeq	r1, r0, r1, lsl #6
     700:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
     704:	01134919 	tsteq	r3, r9, lsl r9
     708:	0c000013 	stceq	0, cr0, [r0], {19}
     70c:	13490005 	movtne	r0, #36869	; 0x9005
     710:	150d0000 	strne	r0, [sp, #-0]
     714:	01192701 	tsteq	r9, r1, lsl #14
     718:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     71c:	19270015 	stmdbne	r7!, {r0, r2, r4}
     720:	00001349 	andeq	r1, r0, r9, asr #6
     724:	0301170f 	movweq	r1, #5903	; 0x170f
     728:	3a0b0b08 	bcc	2c3350 <_Min_Stack_Size+0x2c3150>
     72c:	010b3b0b 	tsteq	fp, fp, lsl #22
     730:	10000013 	andne	r0, r0, r3, lsl r0
     734:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     738:	0b3b0b3a 	bleq	ec3428 <_Min_Stack_Size+0xec3228>
     73c:	00001349 	andeq	r1, r0, r9, asr #6
     740:	03000d11 	movweq	r0, #3345	; 0xd11
     744:	3b0b3a08 	blcc	2cef6c <_Min_Stack_Size+0x2ced6c>
     748:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     74c:	1200000b 	andne	r0, r0, #11
     750:	13490101 	movtne	r0, #37121	; 0x9101
     754:	00001301 	andeq	r1, r0, r1, lsl #6
     758:	49002113 	stmdbmi	r0, {r0, r1, r4, r8, sp}
     75c:	000b2f13 	andeq	r2, fp, r3, lsl pc
     760:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
     764:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     768:	0b3b0b3a 	bleq	ec3458 <_Min_Stack_Size+0xec3258>
     76c:	13491927 	movtne	r1, #39207	; 0x9927
     770:	06120111 			; <UNDEFINED> instruction: 0x06120111
     774:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     778:	00130119 	andseq	r0, r3, r9, lsl r1
     77c:	00051500 	andeq	r1, r5, r0, lsl #10
     780:	0b3a0e03 	bleq	e83f94 <_Min_Stack_Size+0xe83d94>
     784:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     788:	00001802 	andeq	r1, r0, r2, lsl #16
     78c:	03003416 	movweq	r3, #1046	; 0x416
     790:	3b0b3a08 	blcc	2cefb8 <_Min_Stack_Size+0x2cedb8>
     794:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     798:	17000018 	smladne	r0, r8, r0, r0
     79c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     7a0:	0b3a0e03 	bleq	e83fb4 <_Min_Stack_Size+0xe83db4>
     7a4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     7a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7ac:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     7b0:	00130119 	andseq	r0, r3, r9, lsl r1
     7b4:	00051800 	andeq	r1, r5, r0, lsl #16
     7b8:	0b3a0803 	bleq	e827cc <_Min_Stack_Size+0xe825cc>
     7bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     7c0:	00001802 	andeq	r1, r0, r2, lsl #16
     7c4:	3f012e19 	svccc	0x00012e19
     7c8:	3a0e0319 	bcc	381434 <_Min_Stack_Size+0x381234>
     7cc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     7d0:	11134919 	tstne	r3, r9, lsl r9
     7d4:	40061201 	andmi	r1, r6, r1, lsl #4
     7d8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     7dc:	00001301 	andeq	r1, r0, r1, lsl #6
     7e0:	0300051a 	movweq	r0, #1306	; 0x51a
     7e4:	3b0b3a08 	blcc	2cf00c <_Min_Stack_Size+0x2cee0c>
     7e8:	02134905 	andseq	r4, r3, #81920	; 0x14000
     7ec:	1b000018 	blne	854 <_Min_Stack_Size+0x654>
     7f0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     7f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     7f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     7fc:	341c0000 	ldrcc	r0, [ip], #-0
     800:	3a0e0300 	bcc	381408 <_Min_Stack_Size+0x381208>
     804:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     808:	00180213 	andseq	r0, r8, r3, lsl r2
     80c:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
     810:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     814:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     818:	01111927 	tsteq	r1, r7, lsr #18
     81c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     820:	01194296 			; <UNDEFINED> instruction: 0x01194296
     824:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     828:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     82c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     830:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     834:	341f0000 	ldrcc	r0, [pc], #-0	; 83c <_Min_Stack_Size+0x63c>
     838:	3a0e0300 	bcc	381440 <_Min_Stack_Size+0x381240>
     83c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     840:	3c193f13 	ldccc	15, cr3, [r9], {19}
     844:	00000019 	andeq	r0, r0, r9, lsl r0
     848:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     84c:	030b130e 	movweq	r1, #45838	; 0xb30e
     850:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     854:	10011117 	andne	r1, r1, r7, lsl r1
     858:	02000017 	andeq	r0, r0, #23
     85c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     860:	0b3b0b3a 	bleq	ec3550 <_Min_Stack_Size+0xec3350>
     864:	00001349 	andeq	r1, r0, r9, asr #6
     868:	0b002403 	bleq	987c <_Min_Stack_Size+0x967c>
     86c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     870:	0400000e 	streq	r0, [r0], #-14
     874:	0b0b0024 	bleq	2c090c <_Min_Stack_Size+0x2c070c>
     878:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     87c:	0f050000 	svceq	0x00050000
     880:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     884:	06000013 			; <UNDEFINED> instruction: 0x06000013
     888:	19270015 	stmdbne	r7!, {r0, r2, r4}
     88c:	01070000 	mrseq	r0, (UNDEF: 7)
     890:	01134901 	tsteq	r3, r1, lsl #18
     894:	08000013 	stmdaeq	r0, {r0, r1, r4}
     898:	13490021 	movtne	r0, #36897	; 0x9021
     89c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     8a0:	0b010409 	bleq	418cc <_Min_Stack_Size+0x416cc>
     8a4:	3a13490b 	bcc	4d2cd8 <_Min_Stack_Size+0x4d2ad8>
     8a8:	010b3b0b 	tsteq	fp, fp, lsl #22
     8ac:	0a000013 	beq	900 <_Min_Stack_Size+0x700>
     8b0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     8b4:	00000b1c 	andeq	r0, r0, ip, lsl fp
     8b8:	0300280b 	movweq	r2, #2059	; 0x80b
     8bc:	000b1c08 	andeq	r1, fp, r8, lsl #24
     8c0:	01130c00 	tsteq	r3, r0, lsl #24
     8c4:	0b3a050b 	bleq	e81cf8 <_Min_Stack_Size+0xe81af8>
     8c8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     8cc:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     8d0:	3a080300 	bcc	2014d8 <_Min_Stack_Size+0x2012d8>
     8d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8d8:	000b3813 	andeq	r3, fp, r3, lsl r8
     8dc:	000d0e00 	andeq	r0, sp, r0, lsl #28
     8e0:	0b3a0e03 	bleq	e840f4 <_Min_Stack_Size+0xe83ef4>
     8e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     8e8:	00000b38 	andeq	r0, r0, r8, lsr fp
     8ec:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
     8f0:	00052f13 	andeq	r2, r5, r3, lsl pc
     8f4:	01171000 	tsteq	r7, r0
     8f8:	0b0b0e03 	bleq	2c410c <_Min_Stack_Size+0x2c3f0c>
     8fc:	0b3b0b3a 	bleq	ec35ec <_Min_Stack_Size+0xec33ec>
     900:	00001301 	andeq	r1, r0, r1, lsl #6
     904:	03000d11 	movweq	r0, #3345	; 0xd11
     908:	3b0b3a0e 	blcc	2cf148 <_Min_Stack_Size+0x2cef48>
     90c:	0013490b 	andseq	r4, r3, fp, lsl #18
     910:	002e1200 	eoreq	r1, lr, r0, lsl #4
     914:	0b3a0e03 	bleq	e84128 <_Min_Stack_Size+0xe83f28>
     918:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     91c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     920:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     924:	13000019 	movwne	r0, #25
     928:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     92c:	0b3b0b3a 	bleq	ec361c <_Min_Stack_Size+0xec341c>
     930:	01111927 	tsteq	r1, r7, lsr #18
     934:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     938:	00194296 	mulseq	r9, r6, r2
     93c:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
     940:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     944:	0b3b0b3a 	bleq	ec3634 <_Min_Stack_Size+0xec3434>
     948:	01111927 	tsteq	r1, r7, lsr #18
     94c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     950:	01194296 			; <UNDEFINED> instruction: 0x01194296
     954:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
     958:	08030034 	stmdaeq	r3, {r2, r4, r5}
     95c:	0b3b0b3a 	bleq	ec364c <_Min_Stack_Size+0xec344c>
     960:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     964:	05160000 	ldreq	r0, [r6, #-0]
     968:	3a080300 	bcc	201570 <_Min_Stack_Size+0x201370>
     96c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     970:	00180213 	andseq	r0, r8, r3, lsl r2
     974:	00051700 	andeq	r1, r5, r0, lsl #14
     978:	0b3a0e03 	bleq	e8418c <_Min_Stack_Size+0xe83f8c>
     97c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     980:	00001802 	andeq	r1, r0, r2, lsl #16
     984:	3f012e18 	svccc	0x00012e18
     988:	3a0e0319 	bcc	3815f4 <_Min_Stack_Size+0x3813f4>
     98c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     990:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     994:	96184006 	ldrls	r4, [r8], -r6
     998:	13011942 	movwne	r1, #6466	; 0x1942
     99c:	34190000 	ldrcc	r0, [r9], #-0
     9a0:	3a080300 	bcc	2015a8 <_Min_Stack_Size+0x2013a8>
     9a4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9a8:	00180213 	andseq	r0, r8, r3, lsl r2
     9ac:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
     9b0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     9b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     9b8:	13491927 	movtne	r1, #39207	; 0x9927
     9bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     9c0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     9c4:	00130119 	andseq	r0, r3, r9, lsl r1
     9c8:	00051b00 	andeq	r1, r5, r0, lsl #22
     9cc:	0b3a0e03 	bleq	e841e0 <_Min_Stack_Size+0xe83fe0>
     9d0:	1349053b 	movtne	r0, #38203	; 0x953b
     9d4:	00001802 	andeq	r1, r0, r2, lsl #16
     9d8:	0300341c 	movweq	r3, #1052	; 0x41c
     9dc:	3b0b3a0e 	blcc	2cf21c <_Min_Stack_Size+0x2cf01c>
     9e0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     9e4:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
     9e8:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     9ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     9f0:	00000111 	andeq	r0, r0, r1, lsl r1
     9f4:	0300051e 	movweq	r0, #1310	; 0x51e
     9f8:	3b0b3a08 	blcc	2cf220 <_Min_Stack_Size+0x2cf020>
     9fc:	02134905 	andseq	r4, r3, #81920	; 0x14000
     a00:	1f000018 	svcne	0x00000018
     a04:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     a08:	0b3a0e03 	bleq	e8421c <_Min_Stack_Size+0xe8401c>
     a0c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     a10:	01111349 	tsteq	r1, r9, asr #6
     a14:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a18:	00194296 	mulseq	r9, r6, r2
     a1c:	002e2000 	eoreq	r2, lr, r0
     a20:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     a24:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a28:	01111927 	tsteq	r1, r7, lsr #18
     a2c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a30:	00194297 	mulseq	r9, r7, r2
     a34:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
     a38:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     a3c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a40:	01111927 	tsteq	r1, r7, lsr #18
     a44:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a48:	01194297 			; <UNDEFINED> instruction: 0x01194297
     a4c:	22000013 	andcs	r0, r0, #19
     a50:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     a54:	0b3a0e03 	bleq	e84268 <_Min_Stack_Size+0xe84068>
     a58:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     a5c:	01111349 	tsteq	r1, r9, asr #6
     a60:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a64:	00194297 	mulseq	r9, r7, r2
     a68:	00342300 	eorseq	r2, r4, r0, lsl #6
     a6c:	0b3a0e03 	bleq	e84280 <_Min_Stack_Size+0xe84080>
     a70:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a74:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     a78:	34240000 	strtcc	r0, [r4], #-0
     a7c:	3a080300 	bcc	201684 <_Min_Stack_Size+0x201484>
     a80:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a84:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     a88:	00000018 	andeq	r0, r0, r8, lsl r0
     a8c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     a90:	030b130e 	movweq	r1, #45838	; 0xb30e
     a94:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     a98:	10011117 	andne	r1, r1, r7, lsl r1
     a9c:	02000017 	andeq	r0, r0, #23
     aa0:	0b0b0024 	bleq	2c0b38 <_Min_Stack_Size+0x2c0938>
     aa4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     aa8:	24030000 	strcs	r0, [r3], #-0
     aac:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     ab0:	000e030b 	andeq	r0, lr, fp, lsl #6
     ab4:	00160400 	andseq	r0, r6, r0, lsl #8
     ab8:	0b3a0e03 	bleq	e842cc <_Min_Stack_Size+0xe840cc>
     abc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ac0:	0f050000 	svceq	0x00050000
     ac4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     ac8:	06000013 			; <UNDEFINED> instruction: 0x06000013
     acc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     ad0:	0b3a0b0b 	bleq	e83704 <_Min_Stack_Size+0xe83504>
     ad4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     ad8:	0d070000 	stceq	0, cr0, [r7, #-0]
     adc:	3a080300 	bcc	2016e4 <_Min_Stack_Size+0x2014e4>
     ae0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ae4:	000b3813 	andeq	r3, fp, r3, lsl r8
     ae8:	000d0800 	andeq	r0, sp, r0, lsl #16
     aec:	0b3a0e03 	bleq	e84300 <_Min_Stack_Size+0xe84100>
     af0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     af4:	00000b38 	andeq	r0, r0, r8, lsr fp
     af8:	3f012e09 	svccc	0x00012e09
     afc:	3a0e0319 	bcc	381768 <_Min_Stack_Size+0x381568>
     b00:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     b04:	11134919 	tstne	r3, r9, lsl r9
     b08:	40061201 	andmi	r1, r6, r1, lsl #4
     b0c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b10:	00001301 	andeq	r1, r0, r1, lsl #6
     b14:	0300050a 	movweq	r0, #1290	; 0x50a
     b18:	3b0b3a08 	blcc	2cf340 <_Min_Stack_Size+0x2cf140>
     b1c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b20:	0b000018 	bleq	b88 <_Min_Stack_Size+0x988>
     b24:	08030034 	stmdaeq	r3, {r2, r4, r5}
     b28:	0b3b0b3a 	bleq	ec3818 <_Min_Stack_Size+0xec3618>
     b2c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     b30:	050c0000 	streq	r0, [ip, #-0]
     b34:	3a0e0300 	bcc	38173c <_Min_Stack_Size+0x38153c>
     b38:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b3c:	00180213 	andseq	r0, r8, r3, lsl r2
     b40:	00340d00 	eorseq	r0, r4, r0, lsl #26
     b44:	0b3a0e03 	bleq	e84358 <_Min_Stack_Size+0xe84158>
     b48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     b4c:	00001802 	andeq	r1, r0, r2, lsl #16
     b50:	3f012e0e 	svccc	0x00012e0e
     b54:	3a0e0319 	bcc	3817c0 <_Min_Stack_Size+0x3815c0>
     b58:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     b5c:	11134919 	tstne	r3, r9, lsl r9
     b60:	40061201 	andmi	r1, r6, r1, lsl #4
     b64:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     b68:	00001301 	andeq	r1, r0, r1, lsl #6
     b6c:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
     b70:	00130113 	andseq	r0, r3, r3, lsl r1
     b74:	00211000 	eoreq	r1, r1, r0
     b78:	0b2f1349 	bleq	bc58a4 <_Min_Stack_Size+0xbc56a4>
     b7c:	01000000 	mrseq	r0, (UNDEF: 0)
     b80:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     b84:	0e030b13 	vmoveq.32	d3[0], r0
     b88:	17550e1b 	smmlane	r5, fp, lr, r0
     b8c:	17100111 			; <UNDEFINED> instruction: 0x17100111
     b90:	16020000 	strne	r0, [r2], -r0
     b94:	3a0e0300 	bcc	38179c <_Min_Stack_Size+0x38159c>
     b98:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b9c:	03000013 	movweq	r0, #19
     ba0:	0b0b0024 	bleq	2c0c38 <_Min_Stack_Size+0x2c0a38>
     ba4:	0e030b3e 	vmoveq.16	d3[0], r0
     ba8:	24040000 	strcs	r0, [r4], #-0
     bac:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     bb0:	0008030b 	andeq	r0, r8, fp, lsl #6
     bb4:	000f0500 	andeq	r0, pc, r0, lsl #10
     bb8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     bbc:	13060000 	movwne	r0, #24576	; 0x6000
     bc0:	0b0e0301 	bleq	3817cc <_Min_Stack_Size+0x3815cc>
     bc4:	3b0b3a0b 	blcc	2cf3f8 <_Min_Stack_Size+0x2cf1f8>
     bc8:	0013010b 	andseq	r0, r3, fp, lsl #2
     bcc:	000d0700 	andeq	r0, sp, r0, lsl #14
     bd0:	0b3a0803 	bleq	e82be4 <_Min_Stack_Size+0xe829e4>
     bd4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     bd8:	00000b38 	andeq	r0, r0, r8, lsr fp
     bdc:	03000d08 	movweq	r0, #3336	; 0xd08
     be0:	3b0b3a0e 	blcc	2cf420 <_Min_Stack_Size+0x2cf220>
     be4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     be8:	0900000b 	stmdbeq	r0, {r0, r1, r3}
     bec:	13490101 	movtne	r0, #37121	; 0x9101
     bf0:	00001301 	andeq	r1, r0, r1, lsl #6
     bf4:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
     bf8:	000b2f13 	andeq	r2, fp, r3, lsl pc
     bfc:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
     c00:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     c04:	0b3b0b3a 	bleq	ec38f4 <_Min_Stack_Size+0xec36f4>
     c08:	13491927 	movtne	r1, #39207	; 0x9927
     c0c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c10:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     c14:	00130119 	andseq	r0, r3, r9, lsl r1
     c18:	00050c00 	andeq	r0, r5, r0, lsl #24
     c1c:	0b3a0803 	bleq	e82c30 <_Min_Stack_Size+0xe82a30>
     c20:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c24:	00001802 	andeq	r1, r0, r2, lsl #16
     c28:	3f012e0d 	svccc	0x00012e0d
     c2c:	3a0e0319 	bcc	381898 <_Min_Stack_Size+0x381698>
     c30:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     c34:	11134919 	tstne	r3, r9, lsl r9
     c38:	40061201 	andmi	r1, r6, r1, lsl #4
     c3c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     c40:	00001301 	andeq	r1, r0, r1, lsl #6
     c44:	0300050e 	movweq	r0, #1294	; 0x50e
     c48:	3b0b3a0e 	blcc	2cf488 <_Min_Stack_Size+0x2cf288>
     c4c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     c50:	0f000018 	svceq	0x00000018
     c54:	08030034 	stmdaeq	r3, {r2, r4, r5}
     c58:	0b3b0b3a 	bleq	ec3948 <_Min_Stack_Size+0xec3748>
     c5c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     c60:	34100000 	ldrcc	r0, [r0], #-0
     c64:	3a0e0300 	bcc	38186c <_Min_Stack_Size+0x38166c>
     c68:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c6c:	00180213 	andseq	r0, r8, r3, lsl r2
     c70:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
     c74:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     c78:	0b3b0b3a 	bleq	ec3968 <_Min_Stack_Size+0xec3768>
     c7c:	01111927 	tsteq	r1, r7, lsr #18
     c80:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     c84:	01194296 			; <UNDEFINED> instruction: 0x01194296
     c88:	12000013 	andne	r0, r0, #19
     c8c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     c90:	0b3a0e03 	bleq	e844a4 <_Min_Stack_Size+0xe842a4>
     c94:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     c98:	01111349 	tsteq	r1, r9, asr #6
     c9c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     ca0:	01194297 			; <UNDEFINED> instruction: 0x01194297
     ca4:	13000013 	movwne	r0, #19
     ca8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     cac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     cb0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     cb4:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     cb8:	03193f00 	tsteq	r9, #0, 30
     cbc:	3b0b3a0e 	blcc	2cf4fc <_Min_Stack_Size+0x2cf2fc>
     cc0:	11192705 	tstne	r9, r5, lsl #14
     cc4:	40061201 	andmi	r1, r6, r1, lsl #4
     cc8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     ccc:	34150000 	ldrcc	r0, [r5], #-0
     cd0:	3a0e0300 	bcc	3818d8 <_Min_Stack_Size+0x3816d8>
     cd4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cd8:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     cdc:	00000018 	andeq	r0, r0, r8, lsl r0
     ce0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     ce4:	030b130e 	movweq	r1, #45838	; 0xb30e
     ce8:	1117550e 	tstne	r7, lr, lsl #10
     cec:	00171001 	andseq	r1, r7, r1
     cf0:	00240200 	eoreq	r0, r4, r0, lsl #4
     cf4:	0b3e0b0b 	bleq	f83928 <_Min_Stack_Size+0xf83728>
     cf8:	00000e03 	andeq	r0, r0, r3, lsl #28
     cfc:	03001603 	movweq	r1, #1539	; 0x603
     d00:	3b0b3a0e 	blcc	2cf540 <_Min_Stack_Size+0x2cf340>
     d04:	0013490b 	andseq	r4, r3, fp, lsl #18
     d08:	00240400 	eoreq	r0, r4, r0, lsl #8
     d0c:	0b3e0b0b 	bleq	f83940 <_Min_Stack_Size+0xf83740>
     d10:	00000803 	andeq	r0, r0, r3, lsl #16
     d14:	0b011305 	bleq	45930 <_Min_Stack_Size+0x45730>
     d18:	3b0b3a05 	blcc	2cf534 <_Min_Stack_Size+0x2cf334>
     d1c:	0013010b 	andseq	r0, r3, fp, lsl #2
     d20:	000d0600 	andeq	r0, sp, r0, lsl #12
     d24:	0b3a0e03 	bleq	e84538 <_Min_Stack_Size+0xe84338>
     d28:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d2c:	00000b38 	andeq	r0, r0, r8, lsr fp
     d30:	03000d07 	movweq	r0, #3335	; 0xd07
     d34:	3b0b3a0e 	blcc	2cf574 <_Min_Stack_Size+0x2cf374>
     d38:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     d3c:	08000005 	stmdaeq	r0, {r0, r2}
     d40:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     d44:	0b3b0b3a 	bleq	ec3a34 <_Min_Stack_Size+0xec3834>
     d48:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     d4c:	01090000 	mrseq	r0, (UNDEF: 9)
     d50:	01134901 	tsteq	r3, r1, lsl #18
     d54:	0a000013 	beq	da8 <_Min_Stack_Size+0xba8>
     d58:	13490021 	movtne	r0, #36897	; 0x9021
     d5c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     d60:	4900350b 	stmdbmi	r0, {r0, r1, r3, r8, sl, ip, sp}
     d64:	0c000013 	stceq	0, cr0, [r0], {19}
     d68:	13490021 	movtne	r0, #36897	; 0x9021
     d6c:	0000052f 	andeq	r0, r0, pc, lsr #10
     d70:	0b01130d 	bleq	459ac <_Min_Stack_Size+0x457ac>
     d74:	3b0b3a0b 	blcc	2cf5a8 <_Min_Stack_Size+0x2cf3a8>
     d78:	0013010b 	andseq	r0, r3, fp, lsl #2
     d7c:	000d0e00 	andeq	r0, sp, r0, lsl #28
     d80:	0b3a0803 	bleq	e82d94 <_Min_Stack_Size+0xe82b94>
     d84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d88:	00000b38 	andeq	r0, r0, r8, lsr fp
     d8c:	4900260f 	stmdbmi	r0, {r0, r1, r2, r3, r9, sl, sp}
     d90:	10000013 	andne	r0, r0, r3, lsl r0
     d94:	0b0b0113 	bleq	2c11e8 <_Min_Stack_Size+0x2c0fe8>
     d98:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     d9c:	00001301 	andeq	r1, r0, r1, lsl #6
     da0:	03000d11 	movweq	r0, #3345	; 0xd11
     da4:	3b0b3a0e 	blcc	2cf5e4 <_Min_Stack_Size+0x2cf3e4>
     da8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     dac:	1200000b 	andne	r0, r0, #11
     db0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     db4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     db8:	0b381349 	bleq	e05ae4 <_Min_Stack_Size+0xe058e4>
     dbc:	16130000 	ldrne	r0, [r3], -r0
     dc0:	3a0e0300 	bcc	3819c8 <_Min_Stack_Size+0x3817c8>
     dc4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     dc8:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
     dcc:	0b0b0104 	bleq	2c11e4 <_Min_Stack_Size+0x2c0fe4>
     dd0:	0b3a1349 	bleq	e85afc <_Min_Stack_Size+0xe858fc>
     dd4:	1301053b 	movwne	r0, #5435	; 0x153b
     dd8:	28150000 	ldmdacs	r5, {}	; <UNPREDICTABLE>
     ddc:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     de0:	1600000b 	strne	r0, [r0], -fp
     de4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     de8:	0b3a0e03 	bleq	e845fc <_Min_Stack_Size+0xe843fc>
     dec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     df0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     df4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     df8:	00130119 	andseq	r0, r3, r9, lsl r1
     dfc:	00051700 	andeq	r1, r5, r0, lsl #14
     e00:	0b3a0e03 	bleq	e84614 <_Min_Stack_Size+0xe84414>
     e04:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e08:	00001802 	andeq	r1, r0, r2, lsl #16
     e0c:	03003418 	movweq	r3, #1048	; 0x418
     e10:	3b0b3a0e 	blcc	2cf650 <_Min_Stack_Size+0x2cf450>
     e14:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e18:	19000018 	stmdbne	r0, {r3, r4}
     e1c:	0b0b000f 	bleq	2c0e60 <_Min_Stack_Size+0x2c0c60>
     e20:	00001349 	andeq	r1, r0, r9, asr #6
     e24:	0300341a 	movweq	r3, #1050	; 0x41a
     e28:	3b0b3a0e 	blcc	2cf668 <_Min_Stack_Size+0x2cf468>
     e2c:	3f134905 	svccc	0x00134905
     e30:	00193c19 	andseq	r3, r9, r9, lsl ip
     e34:	11010000 	mrsne	r0, (UNDEF: 1)
     e38:	130e2501 	movwne	r2, #58625	; 0xe501
     e3c:	550e030b 	strpl	r0, [lr, #-779]	; 0xfffffcf5
     e40:	10011117 	andne	r1, r1, r7, lsl r1
     e44:	02000017 	andeq	r0, r0, #23
     e48:	0b0b0024 	bleq	2c0ee0 <_Min_Stack_Size+0x2c0ce0>
     e4c:	0e030b3e 	vmoveq.16	d3[0], r0
     e50:	16030000 	strne	r0, [r3], -r0
     e54:	3a0e0300 	bcc	381a5c <_Min_Stack_Size+0x38185c>
     e58:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e5c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     e60:	0b0b0024 	bleq	2c0ef8 <_Min_Stack_Size+0x2c0cf8>
     e64:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     e68:	35050000 	strcc	r0, [r5, #-0]
     e6c:	00134900 	andseq	r4, r3, r0, lsl #18
     e70:	00260600 	eoreq	r0, r6, r0, lsl #12
     e74:	00001349 	andeq	r1, r0, r9, asr #6
     e78:	0b010407 	bleq	41e9c <_Min_Stack_Size+0x41c9c>
     e7c:	3a13490b 	bcc	4d32b0 <_Min_Stack_Size+0x4d30b0>
     e80:	01053b0b 	tsteq	r5, fp, lsl #22
     e84:	08000013 	stmdaeq	r0, {r0, r1, r4}
     e88:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     e8c:	00000b1c 	andeq	r0, r0, ip, lsl fp
     e90:	03002809 	movweq	r2, #2057	; 0x809
     e94:	000b1c08 	andeq	r1, fp, r8, lsl #24
     e98:	00160a00 	andseq	r0, r6, r0, lsl #20
     e9c:	0b3a0e03 	bleq	e846b0 <_Min_Stack_Size+0xe844b0>
     ea0:	1349053b 	movtne	r0, #38203	; 0x953b
     ea4:	130b0000 	movwne	r0, #45056	; 0xb000
     ea8:	3a0b0b01 	bcc	2c3ab4 <_Min_Stack_Size+0x2c38b4>
     eac:	01053b0b 	tsteq	r5, fp, lsl #22
     eb0:	0c000013 	stceq	0, cr0, [r0], {19}
     eb4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     eb8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ebc:	0b381349 	bleq	e05be8 <_Min_Stack_Size+0xe059e8>
     ec0:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     ec4:	3a0e0300 	bcc	381acc <_Min_Stack_Size+0x3818cc>
     ec8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ecc:	000b3813 	andeq	r3, fp, r3, lsl r8
     ed0:	01130e00 	tsteq	r3, r0, lsl #28
     ed4:	0b3a0b0b 	bleq	e83b08 <_Min_Stack_Size+0xe83908>
     ed8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     edc:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; ee4 <_Min_Stack_Size+0xce4>
     ee0:	3a0e0300 	bcc	381ae8 <_Min_Stack_Size+0x3818e8>
     ee4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ee8:	000b3813 	andeq	r3, fp, r3, lsl r8
     eec:	002e1000 	eoreq	r1, lr, r0
     ef0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     ef4:	0b3b0b3a 	bleq	ec3be4 <_Min_Stack_Size+0xec39e4>
     ef8:	01111927 	tsteq	r1, r7, lsr #18
     efc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f00:	00194297 	mulseq	r9, r7, r2
     f04:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
     f08:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     f0c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f10:	01111927 	tsteq	r1, r7, lsr #18
     f14:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f18:	01194297 			; <UNDEFINED> instruction: 0x01194297
     f1c:	12000013 	andne	r0, r0, #19
     f20:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     f24:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f28:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     f2c:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     f30:	03193f01 	tsteq	r9, #1, 30
     f34:	3b0b3a0e 	blcc	2cf774 <_Min_Stack_Size+0x2cf574>
     f38:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     f3c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     f40:	96184006 	ldrls	r4, [r8], -r6
     f44:	13011942 	movwne	r1, #6466	; 0x1942
     f48:	34140000 	ldrcc	r0, [r4], #-0
     f4c:	3a0e0300 	bcc	381b54 <_Min_Stack_Size+0x381954>
     f50:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f54:	00180213 	andseq	r0, r8, r3, lsl r2
     f58:	002e1500 	eoreq	r1, lr, r0, lsl #10
     f5c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     f60:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f64:	13491927 	movtne	r1, #39207	; 0x9927
     f68:	06120111 			; <UNDEFINED> instruction: 0x06120111
     f6c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     f70:	16000019 			; <UNDEFINED> instruction: 0x16000019
     f74:	08030034 	stmdaeq	r3, {r2, r4, r5}
     f78:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f7c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     f80:	0f170000 	svceq	0x00170000
     f84:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     f88:	18000013 	stmdane	r0, {r0, r1, r4}
     f8c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     f90:	0b3a0e03 	bleq	e847a4 <_Min_Stack_Size+0xe845a4>
     f94:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     f98:	01111349 	tsteq	r1, r9, asr #6
     f9c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     fa0:	01194297 			; <UNDEFINED> instruction: 0x01194297
     fa4:	19000013 	stmdbne	r0, {r0, r1, r4}
     fa8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     fac:	0b3a0e03 	bleq	e847c0 <_Min_Stack_Size+0xe845c0>
     fb0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     fb4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     fb8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     fbc:	1a000019 	bne	1028 <_Min_Stack_Size+0xe28>
     fc0:	13490101 	movtne	r0, #37121	; 0x9101
     fc4:	00001301 	andeq	r1, r0, r1, lsl #6
     fc8:	4900211b 	stmdbmi	r0, {r0, r1, r3, r4, r8, sp}
     fcc:	000b2f13 	andeq	r2, fp, r3, lsl pc
     fd0:	00341c00 	eorseq	r1, r4, r0, lsl #24
     fd4:	0b3a0e03 	bleq	e847e8 <_Min_Stack_Size+0xe845e8>
     fd8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     fdc:	00001802 	andeq	r1, r0, r2, lsl #16
     fe0:	0300341d 	movweq	r3, #1053	; 0x41d
     fe4:	3b0b3a0e 	blcc	2cf824 <_Min_Stack_Size+0x2cf624>
     fe8:	3f134905 	svccc	0x00134905
     fec:	00193c19 	andseq	r3, r9, r9, lsl ip
     ff0:	11010000 	mrsne	r0, (UNDEF: 1)
     ff4:	130e2501 	movwne	r2, #58625	; 0xe501
     ff8:	550e030b 	strpl	r0, [lr, #-779]	; 0xfffffcf5
     ffc:	10011117 	andne	r1, r1, r7, lsl r1
    1000:	02000017 	andeq	r0, r0, #23
    1004:	0b0b0024 	bleq	2c109c <_Min_Stack_Size+0x2c0e9c>
    1008:	0e030b3e 	vmoveq.16	d3[0], r0
    100c:	16030000 	strne	r0, [r3], -r0
    1010:	3a0e0300 	bcc	381c18 <_Min_Stack_Size+0x381a18>
    1014:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1018:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    101c:	0b0b0024 	bleq	2c10b4 <_Min_Stack_Size+0x2c0eb4>
    1020:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1024:	35050000 	strcc	r0, [r5, #-0]
    1028:	00134900 	andseq	r4, r3, r0, lsl #18
    102c:	00160600 	andseq	r0, r6, r0, lsl #12
    1030:	0b3a0803 	bleq	e83044 <_Min_Stack_Size+0xe82e44>
    1034:	1349053b 	movtne	r0, #38203	; 0x953b
    1038:	04070000 	streq	r0, [r7], #-0
    103c:	490b0b01 	stmdbmi	fp, {r0, r8, r9, fp}
    1040:	3b0b3a13 	blcc	2cf894 <_Min_Stack_Size+0x2cf694>
    1044:	00130105 	andseq	r0, r3, r5, lsl #2
    1048:	00280800 	eoreq	r0, r8, r0, lsl #16
    104c:	0b1c0e03 	bleq	704860 <_Min_Stack_Size+0x704660>
    1050:	16090000 	strne	r0, [r9], -r0
    1054:	3a0e0300 	bcc	381c5c <_Min_Stack_Size+0x381a5c>
    1058:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    105c:	0a000013 	beq	10b0 <_Min_Stack_Size+0xeb0>
    1060:	0b0b0113 	bleq	2c14b4 <_Min_Stack_Size+0x2c12b4>
    1064:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1068:	00001301 	andeq	r1, r0, r1, lsl #6
    106c:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1070:	3b0b3a08 	blcc	2cf898 <_Min_Stack_Size+0x2cf698>
    1074:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1078:	0c00000b 	stceq	0, cr0, [r0], {11}
    107c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1080:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1084:	0b381349 	bleq	e05db0 <_Min_Stack_Size+0xe05bb0>
    1088:	010d0000 	mrseq	r0, (UNDEF: 13)
    108c:	01134901 	tsteq	r3, r1, lsl #18
    1090:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1094:	13490021 	movtne	r0, #36897	; 0x9021
    1098:	00000b2f 	andeq	r0, r0, pc, lsr #22
    109c:	0b01040f 	bleq	420e0 <_Min_Stack_Size+0x41ee0>
    10a0:	3a13490b 	bcc	4d34d4 <_Min_Stack_Size+0x4d32d4>
    10a4:	010b3b0b 	tsteq	fp, fp, lsl #22
    10a8:	10000013 	andne	r0, r0, r3, lsl r0
    10ac:	0b0b0113 	bleq	2c1500 <_Min_Stack_Size+0x2c1300>
    10b0:	0b3b0b3a 	bleq	ec3da0 <_Min_Stack_Size+0xec3ba0>
    10b4:	00001301 	andeq	r1, r0, r1, lsl #6
    10b8:	03000d11 	movweq	r0, #3345	; 0xd11
    10bc:	3b0b3a0e 	blcc	2cf8fc <_Min_Stack_Size+0x2cf6fc>
    10c0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    10c4:	1200000b 	andne	r0, r0, #11
    10c8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    10cc:	0b3a0e03 	bleq	e848e0 <_Min_Stack_Size+0xe846e0>
    10d0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    10d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    10d8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    10dc:	00130119 	andseq	r0, r3, r9, lsl r1
    10e0:	00051300 	andeq	r1, r5, r0, lsl #6
    10e4:	0b3a0e03 	bleq	e848f8 <_Min_Stack_Size+0xe846f8>
    10e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    10ec:	00001802 	andeq	r1, r0, r2, lsl #16
    10f0:	0b000f14 	bleq	4d48 <_Min_Stack_Size+0x4b48>
    10f4:	0013490b 	andseq	r4, r3, fp, lsl #18
    10f8:	002e1500 	eoreq	r1, lr, r0, lsl #10
    10fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1100:	0b3b0b3a 	bleq	ec3df0 <_Min_Stack_Size+0xec3bf0>
    1104:	01111927 	tsteq	r1, r7, lsr #18
    1108:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    110c:	00194296 	mulseq	r9, r6, r2
    1110:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    1114:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1118:	0b3b0b3a 	bleq	ec3e08 <_Min_Stack_Size+0xec3c08>
    111c:	01111927 	tsteq	r1, r7, lsr #18
    1120:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1124:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1128:	17000013 	smladne	r0, r3, r0, r0
    112c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1130:	0b3b0b3a 	bleq	ec3e20 <_Min_Stack_Size+0xec3c20>
    1134:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1138:	34180000 	ldrcc	r0, [r8], #-0
    113c:	3a080300 	bcc	201d44 <_Min_Stack_Size+0x201b44>
    1140:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1144:	00180213 	andseq	r0, r8, r3, lsl r2
    1148:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
    114c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1150:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1154:	01111927 	tsteq	r1, r7, lsr #18
    1158:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    115c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1160:	1a000013 	bne	11b4 <_Min_Stack_Size+0xfb4>
    1164:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1168:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    116c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1170:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    1174:	03193f01 	tsteq	r9, #1, 30
    1178:	3b0b3a0e 	blcc	2cf9b8 <_Min_Stack_Size+0x2cf7b8>
    117c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1180:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1184:	97184006 	ldrls	r4, [r8, -r6]
    1188:	13011942 	movwne	r1, #6466	; 0x1942
    118c:	341c0000 	ldrcc	r0, [ip], #-0
    1190:	3a0e0300 	bcc	381d98 <_Min_Stack_Size+0x381b98>
    1194:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1198:	00180213 	andseq	r0, r8, r3, lsl r2
    119c:	00341d00 	eorseq	r1, r4, r0, lsl #26
    11a0:	0b3a0803 	bleq	e831b4 <_Min_Stack_Size+0xe82fb4>
    11a4:	1349053b 	movtne	r0, #38203	; 0x953b
    11a8:	00001802 	andeq	r1, r0, r2, lsl #16
    11ac:	0300341e 	movweq	r3, #1054	; 0x41e
    11b0:	3b0b3a0e 	blcc	2cf9f0 <_Min_Stack_Size+0x2cf7f0>
    11b4:	3f134905 	svccc	0x00134905
    11b8:	00193c19 	andseq	r3, r9, r9, lsl ip
    11bc:	11010000 	mrsne	r0, (UNDEF: 1)
    11c0:	130e2501 	movwne	r2, #58625	; 0xe501
    11c4:	550e030b 	strpl	r0, [lr, #-779]	; 0xfffffcf5
    11c8:	10011117 	andne	r1, r1, r7, lsl r1
    11cc:	02000017 	andeq	r0, r0, #23
    11d0:	0b0b0024 	bleq	2c1268 <_Min_Stack_Size+0x2c1068>
    11d4:	0e030b3e 	vmoveq.16	d3[0], r0
    11d8:	16030000 	strne	r0, [r3], -r0
    11dc:	3a0e0300 	bcc	381de4 <_Min_Stack_Size+0x381be4>
    11e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    11e4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    11e8:	0b0b0024 	bleq	2c1280 <_Min_Stack_Size+0x2c1080>
    11ec:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    11f0:	35050000 	strcc	r0, [r5, #-0]
    11f4:	00134900 	andseq	r4, r3, r0, lsl #18
    11f8:	01040600 	tsteq	r4, r0, lsl #12
    11fc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1200:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1204:	00001301 	andeq	r1, r0, r1, lsl #6
    1208:	03002807 	movweq	r2, #2055	; 0x807
    120c:	000b1c0e 	andeq	r1, fp, lr, lsl #24
    1210:	00280800 	eoreq	r0, r8, r0, lsl #16
    1214:	0b1c0803 	bleq	703228 <_Min_Stack_Size+0x703028>
    1218:	16090000 	strne	r0, [r9], -r0
    121c:	3a0e0300 	bcc	381e24 <_Min_Stack_Size+0x381c24>
    1220:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1224:	0a000013 	beq	1278 <_Min_Stack_Size+0x1078>
    1228:	0b0b0113 	bleq	2c167c <_Min_Stack_Size+0x2c147c>
    122c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1230:	00001301 	andeq	r1, r0, r1, lsl #6
    1234:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1238:	3b0b3a08 	blcc	2cfa60 <_Min_Stack_Size+0x2cf860>
    123c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1240:	0c00000b 	stceq	0, cr0, [r0], {11}
    1244:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1248:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    124c:	0b381349 	bleq	e05f78 <_Min_Stack_Size+0xe05d78>
    1250:	130d0000 	movwne	r0, #53248	; 0xd000
    1254:	3a0b0b01 	bcc	2c3e60 <_Min_Stack_Size+0x2c3c60>
    1258:	010b3b0b 	tsteq	fp, fp, lsl #22
    125c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1260:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1264:	0b3b0b3a 	bleq	ec3f54 <_Min_Stack_Size+0xec3d54>
    1268:	0b381349 	bleq	e05f94 <_Min_Stack_Size+0xe05d94>
    126c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    1270:	03193f01 	tsteq	r9, #1, 30
    1274:	3b0b3a0e 	blcc	2cfab4 <_Min_Stack_Size+0x2cf8b4>
    1278:	1119270b 	tstne	r9, fp, lsl #14
    127c:	40061201 	andmi	r1, r6, r1, lsl #4
    1280:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1284:	00001301 	andeq	r1, r0, r1, lsl #6
    1288:	03000510 	movweq	r0, #1296	; 0x510
    128c:	3b0b3a0e 	blcc	2cfacc <_Min_Stack_Size+0x2cf8cc>
    1290:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1294:	11000018 	tstne	r0, r8, lsl r0
    1298:	0b0b000f 	bleq	2c12dc <_Min_Stack_Size+0x2c10dc>
    129c:	00001349 	andeq	r1, r0, r9, asr #6
    12a0:	3f012e12 	svccc	0x00012e12
    12a4:	3a0e0319 	bcc	381f10 <_Min_Stack_Size+0x381d10>
    12a8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    12ac:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    12b0:	97184006 	ldrls	r4, [r8, -r6]
    12b4:	13011942 	movwne	r1, #6466	; 0x1942
    12b8:	34130000 	ldrcc	r0, [r3], #-0
    12bc:	3a0e0300 	bcc	381ec4 <_Min_Stack_Size+0x381cc4>
    12c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12c4:	00180213 	andseq	r0, r8, r3, lsl r2
    12c8:	00341400 	eorseq	r1, r4, r0, lsl #8
    12cc:	0b3a0803 	bleq	e832e0 <_Min_Stack_Size+0xe830e0>
    12d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    12d4:	00001802 	andeq	r1, r0, r2, lsl #16
    12d8:	3f012e15 	svccc	0x00012e15
    12dc:	3a0e0319 	bcc	381f48 <_Min_Stack_Size+0x381d48>
    12e0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    12e4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    12e8:	97184006 	ldrls	r4, [r8, -r6]
    12ec:	13011942 	movwne	r1, #6466	; 0x1942
    12f0:	05160000 	ldreq	r0, [r6, #-0]
    12f4:	3a0e0300 	bcc	381efc <_Min_Stack_Size+0x381cfc>
    12f8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    12fc:	00180213 	andseq	r0, r8, r3, lsl r2
    1300:	00341700 	eorseq	r1, r4, r0, lsl #14
    1304:	0b3a0e03 	bleq	e84b18 <_Min_Stack_Size+0xe84918>
    1308:	1349053b 	movtne	r0, #38203	; 0x953b
    130c:	00001802 	andeq	r1, r0, r2, lsl #16
    1310:	3f012e18 	svccc	0x00012e18
    1314:	3a0e0319 	bcc	381f80 <_Min_Stack_Size+0x381d80>
    1318:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    131c:	11134919 	tstne	r3, r9, lsl r9
    1320:	40061201 	andmi	r1, r6, r1, lsl #4
    1324:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1328:	00001301 	andeq	r1, r0, r1, lsl #6
    132c:	03003419 	movweq	r3, #1049	; 0x419
    1330:	3b0b3a0e 	blcc	2cfb70 <_Min_Stack_Size+0x2cf970>
    1334:	3f134905 	svccc	0x00134905
    1338:	00193c19 	andseq	r3, r9, r9, lsl ip
    133c:	11010000 	mrsne	r0, (UNDEF: 1)
    1340:	130e2501 	movwne	r2, #58625	; 0xe501
    1344:	550e030b 	strpl	r0, [lr, #-779]	; 0xfffffcf5
    1348:	10011117 	andne	r1, r1, r7, lsl r1
    134c:	02000017 	andeq	r0, r0, #23
    1350:	0b0b0024 	bleq	2c13e8 <_Min_Stack_Size+0x2c11e8>
    1354:	0e030b3e 	vmoveq.16	d3[0], r0
    1358:	16030000 	strne	r0, [r3], -r0
    135c:	3a0e0300 	bcc	381f64 <_Min_Stack_Size+0x381d64>
    1360:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1364:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1368:	0b0b0024 	bleq	2c1400 <_Min_Stack_Size+0x2c1200>
    136c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1370:	35050000 	strcc	r0, [r5, #-0]
    1374:	00134900 	andseq	r4, r3, r0, lsl #18
    1378:	01040600 	tsteq	r4, r0, lsl #12
    137c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1380:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1384:	00001301 	andeq	r1, r0, r1, lsl #6
    1388:	03002807 	movweq	r2, #2055	; 0x807
    138c:	000b1c0e 	andeq	r1, fp, lr, lsl #24
    1390:	00280800 	eoreq	r0, r8, r0, lsl #16
    1394:	0b1c0803 	bleq	7033a8 <_Min_Stack_Size+0x7031a8>
    1398:	16090000 	strne	r0, [r9], -r0
    139c:	3a0e0300 	bcc	381fa4 <_Min_Stack_Size+0x381da4>
    13a0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    13a4:	0a000013 	beq	13f8 <_Min_Stack_Size+0x11f8>
    13a8:	0b0b0113 	bleq	2c17fc <_Min_Stack_Size+0x2c15fc>
    13ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    13b0:	00001301 	andeq	r1, r0, r1, lsl #6
    13b4:	03000d0b 	movweq	r0, #3339	; 0xd0b
    13b8:	3b0b3a08 	blcc	2cfbe0 <_Min_Stack_Size+0x2cf9e0>
    13bc:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    13c0:	0c00000b 	stceq	0, cr0, [r0], {11}
    13c4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    13c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    13cc:	0b381349 	bleq	e060f8 <_Min_Stack_Size+0xe05ef8>
    13d0:	130d0000 	movwne	r0, #53248	; 0xd000
    13d4:	3a0b0b01 	bcc	2c3fe0 <_Min_Stack_Size+0x2c3de0>
    13d8:	010b3b0b 	tsteq	fp, fp, lsl #22
    13dc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    13e0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    13e4:	0b3b0b3a 	bleq	ec40d4 <_Min_Stack_Size+0xec3ed4>
    13e8:	0b381349 	bleq	e06114 <_Min_Stack_Size+0xe05f14>
    13ec:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    13f0:	03193f01 	tsteq	r9, #1, 30
    13f4:	3b0b3a0e 	blcc	2cfc34 <_Min_Stack_Size+0x2cfa34>
    13f8:	1119270b 	tstne	r9, fp, lsl #14
    13fc:	40061201 	andmi	r1, r6, r1, lsl #4
    1400:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1404:	00001301 	andeq	r1, r0, r1, lsl #6
    1408:	03000510 	movweq	r0, #1296	; 0x510
    140c:	3b0b3a0e 	blcc	2cfc4c <_Min_Stack_Size+0x2cfa4c>
    1410:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1414:	11000018 	tstne	r0, r8, lsl r0
    1418:	0b0b000f 	bleq	2c145c <_Min_Stack_Size+0x2c125c>
    141c:	00001349 	andeq	r1, r0, r9, asr #6
    1420:	3f012e12 	svccc	0x00012e12
    1424:	3a0e0319 	bcc	382090 <_Min_Stack_Size+0x381e90>
    1428:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    142c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1430:	97184006 	ldrls	r4, [r8, -r6]
    1434:	13011942 	movwne	r1, #6466	; 0x1942
    1438:	34130000 	ldrcc	r0, [r3], #-0
    143c:	3a0e0300 	bcc	382044 <_Min_Stack_Size+0x381e44>
    1440:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1444:	00180213 	andseq	r0, r8, r3, lsl r2
    1448:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    144c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1450:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1454:	01111927 	tsteq	r1, r7, lsr #18
    1458:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    145c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1460:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    1464:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1468:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    146c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1470:	34160000 	ldrcc	r0, [r6], #-0
    1474:	3a0e0300 	bcc	38207c <_Min_Stack_Size+0x381e7c>
    1478:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    147c:	00180213 	andseq	r0, r8, r3, lsl r2
    1480:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
    1484:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1488:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    148c:	01111927 	tsteq	r1, r7, lsr #18
    1490:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1494:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1498:	18000013 	stmdane	r0, {r0, r1, r4}
    149c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    14a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    14a4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    14a8:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    14ac:	03193f01 	tsteq	r9, #1, 30
    14b0:	3b0b3a0e 	blcc	2cfcf0 <_Min_Stack_Size+0x2cfaf0>
    14b4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    14b8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    14bc:	97184006 	ldrls	r4, [r8, -r6]
    14c0:	13011942 	movwne	r1, #6466	; 0x1942
    14c4:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
    14c8:	3a0e0301 	bcc	3820d4 <_Min_Stack_Size+0x381ed4>
    14cc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    14d0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    14d4:	97184006 	ldrls	r4, [r8, -r6]
    14d8:	13011942 	movwne	r1, #6466	; 0x1942
    14dc:	341b0000 	ldrcc	r0, [fp], #-0
    14e0:	3a0e0300 	bcc	3820e8 <_Min_Stack_Size+0x381ee8>
    14e4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    14e8:	3c193f13 	ldccc	15, cr3, [r9], {19}
    14ec:	00000019 	andeq	r0, r0, r9, lsl r0
    14f0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    14f4:	030b130e 	movweq	r1, #45838	; 0xb30e
    14f8:	1117550e 	tstne	r7, lr, lsl #10
    14fc:	00171001 	andseq	r1, r7, r1
    1500:	00240200 	eoreq	r0, r4, r0, lsl #4
    1504:	0b3e0b0b 	bleq	f84138 <_Min_Stack_Size+0xf83f38>
    1508:	00000e03 	andeq	r0, r0, r3, lsl #28
    150c:	03001603 	movweq	r1, #1539	; 0x603
    1510:	3b0b3a0e 	blcc	2cfd50 <_Min_Stack_Size+0x2cfb50>
    1514:	0013490b 	andseq	r4, r3, fp, lsl #18
    1518:	00240400 	eoreq	r0, r4, r0, lsl #8
    151c:	0b3e0b0b 	bleq	f84150 <_Min_Stack_Size+0xf83f50>
    1520:	00000803 	andeq	r0, r0, r3, lsl #16
    1524:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
    1528:	06000013 			; <UNDEFINED> instruction: 0x06000013
    152c:	0b0b0104 	bleq	2c1944 <_Min_Stack_Size+0x2c1744>
    1530:	0b3a1349 	bleq	e8625c <_Min_Stack_Size+0xe8605c>
    1534:	1301053b 	movwne	r0, #5435	; 0x153b
    1538:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
    153c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1540:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1544:	08030028 	stmdaeq	r3, {r3, r5}
    1548:	00000b1c 	andeq	r0, r0, ip, lsl fp
    154c:	03001609 	movweq	r1, #1545	; 0x609
    1550:	3b0b3a0e 	blcc	2cfd90 <_Min_Stack_Size+0x2cfb90>
    1554:	00134905 	andseq	r4, r3, r5, lsl #18
    1558:	01130a00 	tsteq	r3, r0, lsl #20
    155c:	0b3a0b0b 	bleq	e84190 <_Min_Stack_Size+0xe83f90>
    1560:	1301053b 	movwne	r0, #5435	; 0x153b
    1564:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    1568:	3a080300 	bcc	202170 <_Min_Stack_Size+0x201f70>
    156c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1570:	000b3813 	andeq	r3, fp, r3, lsl r8
    1574:	000d0c00 	andeq	r0, sp, r0, lsl #24
    1578:	0b3a0e03 	bleq	e84d8c <_Min_Stack_Size+0xe84b8c>
    157c:	1349053b 	movtne	r0, #38203	; 0x953b
    1580:	00000b38 	andeq	r0, r0, r8, lsr fp
    1584:	0b01130d 	bleq	461c0 <_Min_Stack_Size+0x45fc0>
    1588:	3b0b3a0b 	blcc	2cfdbc <_Min_Stack_Size+0x2cfbbc>
    158c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1590:	000d0e00 	andeq	r0, sp, r0, lsl #28
    1594:	0b3a0e03 	bleq	e84da8 <_Min_Stack_Size+0xe84ba8>
    1598:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    159c:	00000b38 	andeq	r0, r0, r8, lsr fp
    15a0:	3f012e0f 	svccc	0x00012e0f
    15a4:	3a0e0319 	bcc	382210 <_Min_Stack_Size+0x382010>
    15a8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    15ac:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    15b0:	96184006 	ldrls	r4, [r8], -r6
    15b4:	13011942 	movwne	r1, #6466	; 0x1942
    15b8:	05100000 	ldreq	r0, [r0, #-0]
    15bc:	3a0e0300 	bcc	3821c4 <_Min_Stack_Size+0x381fc4>
    15c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15c4:	00180213 	andseq	r0, r8, r3, lsl r2
    15c8:	000f1100 	andeq	r1, pc, r0, lsl #2
    15cc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    15d0:	34120000 	ldrcc	r0, [r2], #-0
    15d4:	3a0e0300 	bcc	3821dc <_Min_Stack_Size+0x381fdc>
    15d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15dc:	00180213 	andseq	r0, r8, r3, lsl r2
    15e0:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
    15e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    15e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    15ec:	01111927 	tsteq	r1, r7, lsr #18
    15f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    15f4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    15f8:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    15fc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1600:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1604:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1608:	34150000 	ldrcc	r0, [r5], #-0
    160c:	3a0e0300 	bcc	382214 <_Min_Stack_Size+0x382014>
    1610:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1614:	00180213 	andseq	r0, r8, r3, lsl r2
    1618:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    161c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1620:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1624:	13491927 	movtne	r1, #39207	; 0x9927
    1628:	06120111 			; <UNDEFINED> instruction: 0x06120111
    162c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1630:	00130119 	andseq	r0, r3, r9, lsl r1
    1634:	00341700 	eorseq	r1, r4, r0, lsl #14
    1638:	0b3a0803 	bleq	e8364c <_Min_Stack_Size+0xe8344c>
    163c:	1349053b 	movtne	r0, #38203	; 0x953b
    1640:	00001802 	andeq	r1, r0, r2, lsl #16
    1644:	03003418 	movweq	r3, #1048	; 0x418
    1648:	3b0b3a0e 	blcc	2cfe88 <_Min_Stack_Size+0x2cfc88>
    164c:	3f134905 	svccc	0x00134905
    1650:	00193c19 	andseq	r3, r9, r9, lsl ip
    1654:	11010000 	mrsne	r0, (UNDEF: 1)
    1658:	130e2501 	movwne	r2, #58625	; 0xe501
    165c:	550e030b 	strpl	r0, [lr, #-779]	; 0xfffffcf5
    1660:	10011117 	andne	r1, r1, r7, lsl r1
    1664:	02000017 	andeq	r0, r0, #23
    1668:	0b0b0024 	bleq	2c1700 <_Min_Stack_Size+0x2c1500>
    166c:	0e030b3e 	vmoveq.16	d3[0], r0
    1670:	16030000 	strne	r0, [r3], -r0
    1674:	3a0e0300 	bcc	38227c <_Min_Stack_Size+0x38207c>
    1678:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    167c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1680:	0b0b0024 	bleq	2c1718 <_Min_Stack_Size+0x2c1518>
    1684:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1688:	35050000 	strcc	r0, [r5, #-0]
    168c:	00134900 	andseq	r4, r3, r0, lsl #18
    1690:	01040600 	tsteq	r4, r0, lsl #12
    1694:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1698:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    169c:	00001301 	andeq	r1, r0, r1, lsl #6
    16a0:	03002807 	movweq	r2, #2055	; 0x807
    16a4:	000b1c0e 	andeq	r1, fp, lr, lsl #24
    16a8:	00280800 	eoreq	r0, r8, r0, lsl #16
    16ac:	0b1c0803 	bleq	7036c0 <_Min_Stack_Size+0x7034c0>
    16b0:	16090000 	strne	r0, [r9], -r0
    16b4:	3a0e0300 	bcc	3822bc <_Min_Stack_Size+0x3820bc>
    16b8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    16bc:	0a000013 	beq	1710 <_Min_Stack_Size+0x1510>
    16c0:	0b0b0113 	bleq	2c1b14 <_Min_Stack_Size+0x2c1914>
    16c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    16c8:	00001301 	andeq	r1, r0, r1, lsl #6
    16cc:	03000d0b 	movweq	r0, #3339	; 0xd0b
    16d0:	3b0b3a08 	blcc	2cfef8 <_Min_Stack_Size+0x2cfcf8>
    16d4:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    16d8:	0c00000b 	stceq	0, cr0, [r0], {11}
    16dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    16e0:	0b3a0e03 	bleq	e84ef4 <_Min_Stack_Size+0xe84cf4>
    16e4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    16e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    16ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    16f0:	00130119 	andseq	r0, r3, r9, lsl r1
    16f4:	00050d00 	andeq	r0, r5, r0, lsl #26
    16f8:	0b3a0e03 	bleq	e84f0c <_Min_Stack_Size+0xe84d0c>
    16fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1700:	00001802 	andeq	r1, r0, r2, lsl #16
    1704:	3f002e0e 	svccc	0x00002e0e
    1708:	3a0e0319 	bcc	382374 <_Min_Stack_Size+0x382174>
    170c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1710:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1714:	97184006 	ldrls	r4, [r8, -r6]
    1718:	00001942 	andeq	r1, r0, r2, asr #18
    171c:	3f012e0f 	svccc	0x00012e0f
    1720:	3a0e0319 	bcc	38238c <_Min_Stack_Size+0x38218c>
    1724:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1728:	11134919 	tstne	r3, r9, lsl r9
    172c:	40061201 	andmi	r1, r6, r1, lsl #4
    1730:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1734:	00001301 	andeq	r1, r0, r1, lsl #6
    1738:	03003410 	movweq	r3, #1040	; 0x410
    173c:	3b0b3a0e 	blcc	2cff7c <_Min_Stack_Size+0x2cfd7c>
    1740:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1744:	11000018 	tstne	r0, r8, lsl r0
    1748:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    174c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1750:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1754:	0000193c 	andeq	r1, r0, ip, lsr r9
    1758:	01110100 	tsteq	r1, r0, lsl #2
    175c:	0b130e25 	bleq	4c4ff8 <_Min_Stack_Size+0x4c4df8>
    1760:	17550e03 	ldrbne	r0, [r5, -r3, lsl #28]
    1764:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1768:	24020000 	strcs	r0, [r2], #-0
    176c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1770:	000e030b 	andeq	r0, lr, fp, lsl #6
    1774:	00160300 	andseq	r0, r6, r0, lsl #6
    1778:	0b3a0e03 	bleq	e84f8c <_Min_Stack_Size+0xe84d8c>
    177c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1780:	24040000 	strcs	r0, [r4], #-0
    1784:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1788:	0008030b 	andeq	r0, r8, fp, lsl #6
    178c:	00350500 	eorseq	r0, r5, r0, lsl #10
    1790:	00001349 	andeq	r1, r0, r9, asr #6
    1794:	0b010406 	bleq	427b4 <_Min_Stack_Size+0x425b4>
    1798:	3a13490b 	bcc	4d3bcc <_Min_Stack_Size+0x4d39cc>
    179c:	01053b0b 	tsteq	r5, fp, lsl #22
    17a0:	07000013 	smladeq	r0, r3, r0, r0
    17a4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    17a8:	00000b1c 	andeq	r0, r0, ip, lsl fp
    17ac:	03001608 	movweq	r1, #1544	; 0x608
    17b0:	3b0b3a0e 	blcc	2cfff0 <_Min_Stack_Size+0x2cfdf0>
    17b4:	00134905 	andseq	r4, r3, r5, lsl #18
    17b8:	01130900 	tsteq	r3, r0, lsl #18
    17bc:	0b3a0b0b 	bleq	e843f0 <_Min_Stack_Size+0xe841f0>
    17c0:	1301053b 	movwne	r0, #5435	; 0x153b
    17c4:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    17c8:	3a0e0300 	bcc	3823d0 <_Min_Stack_Size+0x3821d0>
    17cc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    17d0:	000b3813 	andeq	r3, fp, r3, lsl r8
    17d4:	000d0b00 	andeq	r0, sp, r0, lsl #22
    17d8:	0b3a0803 	bleq	e837ec <_Min_Stack_Size+0xe835ec>
    17dc:	1349053b 	movtne	r0, #38203	; 0x953b
    17e0:	00000b38 	andeq	r0, r0, r8, lsr fp
    17e4:	3f002e0c 	svccc	0x00002e0c
    17e8:	3a0e0319 	bcc	382454 <_Min_Stack_Size+0x382254>
    17ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    17f0:	11134919 	tstne	r3, r9, lsl r9
    17f4:	40061201 	andmi	r1, r6, r1, lsl #4
    17f8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    17fc:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    1800:	03193f01 	tsteq	r9, #1, 30
    1804:	3b0b3a0e 	blcc	2d0044 <_Min_Stack_Size+0x2cfe44>
    1808:	1119270b 	tstne	r9, fp, lsl #14
    180c:	40061201 	andmi	r1, r6, r1, lsl #4
    1810:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1814:	00001301 	andeq	r1, r0, r1, lsl #6
    1818:	0300050e 	movweq	r0, #1294	; 0x50e
    181c:	3b0b3a0e 	blcc	2d005c <_Min_Stack_Size+0x2cfe5c>
    1820:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1824:	0f000018 	svceq	0x00000018
    1828:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    182c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1830:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1834:	0000193c 	andeq	r1, r0, ip, lsr r9
    1838:	01110100 	tsteq	r1, r0, lsl #2
    183c:	0b130e25 	bleq	4c50d8 <_Min_Stack_Size+0x4c4ed8>
    1840:	17550e03 	ldrbne	r0, [r5, -r3, lsl #28]
    1844:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1848:	04020000 	streq	r0, [r2], #-0
    184c:	0b0e0301 	bleq	382458 <_Min_Stack_Size+0x382258>
    1850:	3a13490b 	bcc	4d3c84 <_Min_Stack_Size+0x4d3a84>
    1854:	010b3b0b 	tsteq	fp, fp, lsl #22
    1858:	03000013 	movweq	r0, #19
    185c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1860:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1864:	03002804 	movweq	r2, #2052	; 0x804
    1868:	000b1c0e 	andeq	r1, fp, lr, lsl #24
    186c:	00240500 	eoreq	r0, r4, r0, lsl #10
    1870:	0b3e0b0b 	bleq	f844a4 <_Min_Stack_Size+0xf842a4>
    1874:	00000e03 	andeq	r0, r0, r3, lsl #28
    1878:	03001606 	movweq	r1, #1542	; 0x606
    187c:	3b0b3a0e 	blcc	2d00bc <_Min_Stack_Size+0x2cfebc>
    1880:	0013490b 	andseq	r4, r3, fp, lsl #18
    1884:	00240700 	eoreq	r0, r4, r0, lsl #14
    1888:	0b3e0b0b 	bleq	f844bc <_Min_Stack_Size+0xf842bc>
    188c:	00000803 	andeq	r0, r0, r3, lsl #16
    1890:	49003508 	stmdbmi	r0, {r3, r8, sl, ip, sp}
    1894:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1898:	0b0b0104 	bleq	2c1cb0 <_Min_Stack_Size+0x2c1ab0>
    189c:	0b3a1349 	bleq	e865c8 <_Min_Stack_Size+0xe863c8>
    18a0:	1301053b 	movwne	r0, #5435	; 0x153b
    18a4:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    18a8:	1c080300 	stcne	3, cr0, [r8], {-0}
    18ac:	0b00000b 	bleq	18e0 <_Min_Stack_Size+0x16e0>
    18b0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    18b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    18b8:	00001349 	andeq	r1, r0, r9, asr #6
    18bc:	0b01130c 	bleq	464f4 <_Min_Stack_Size+0x462f4>
    18c0:	3b0b3a0b 	blcc	2d00f4 <_Min_Stack_Size+0x2cfef4>
    18c4:	00130105 	andseq	r0, r3, r5, lsl #2
    18c8:	000d0d00 	andeq	r0, sp, r0, lsl #26
    18cc:	0b3a0803 	bleq	e838e0 <_Min_Stack_Size+0xe836e0>
    18d0:	1349053b 	movtne	r0, #38203	; 0x953b
    18d4:	00000b38 	andeq	r0, r0, r8, lsr fp
    18d8:	03000d0e 	movweq	r0, #3342	; 0xd0e
    18dc:	3b0b3a0e 	blcc	2d011c <_Min_Stack_Size+0x2cff1c>
    18e0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    18e4:	0f00000b 	svceq	0x0000000b
    18e8:	0b0b0104 	bleq	2c1d00 <_Min_Stack_Size+0x2c1b00>
    18ec:	0b3a1349 	bleq	e86618 <_Min_Stack_Size+0xe86418>
    18f0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    18f4:	13100000 	tstne	r0, #0
    18f8:	3a0b0b01 	bcc	2c4504 <_Min_Stack_Size+0x2c4304>
    18fc:	010b3b0b 	tsteq	fp, fp, lsl #22
    1900:	11000013 	tstne	r0, r3, lsl r0
    1904:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1908:	0b3b0b3a 	bleq	ec45f8 <_Min_Stack_Size+0xec43f8>
    190c:	0b381349 	bleq	e06638 <_Min_Stack_Size+0xe06438>
    1910:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
    1914:	03193f01 	tsteq	r9, #1, 30
    1918:	3b0b3a0e 	blcc	2d0158 <_Min_Stack_Size+0x2cff58>
    191c:	1119270b 	tstne	r9, fp, lsl #14
    1920:	40061201 	andmi	r1, r6, r1, lsl #4
    1924:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1928:	00001301 	andeq	r1, r0, r1, lsl #6
    192c:	03003413 	movweq	r3, #1043	; 0x413
    1930:	3b0b3a0e 	blcc	2d0170 <_Min_Stack_Size+0x2cff70>
    1934:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1938:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
    193c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1940:	0b3a0e03 	bleq	e85154 <_Min_Stack_Size+0xe84f54>
    1944:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1948:	06120111 			; <UNDEFINED> instruction: 0x06120111
    194c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1950:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
    1954:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1958:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    195c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1960:	0000193c 	andeq	r1, r0, ip, lsr r9
    1964:	01110100 	tsteq	r1, r0, lsl #2
    1968:	0b130e25 	bleq	4c5204 <_Min_Stack_Size+0x4c5004>
    196c:	17550e03 	ldrbne	r0, [r5, -r3, lsl #28]
    1970:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1974:	24020000 	strcs	r0, [r2], #-0
    1978:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    197c:	000e030b 	andeq	r0, lr, fp, lsl #6
    1980:	00160300 	andseq	r0, r6, r0, lsl #6
    1984:	0b3a0e03 	bleq	e85198 <_Min_Stack_Size+0xe84f98>
    1988:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    198c:	24040000 	strcs	r0, [r4], #-0
    1990:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1994:	0008030b 	andeq	r0, r8, fp, lsl #6
    1998:	00350500 	eorseq	r0, r5, r0, lsl #10
    199c:	00001349 	andeq	r1, r0, r9, asr #6
    19a0:	0b010406 	bleq	429c0 <_Min_Stack_Size+0x427c0>
    19a4:	3a13490b 	bcc	4d3dd8 <_Min_Stack_Size+0x4d3bd8>
    19a8:	01053b0b 	tsteq	r5, fp, lsl #22
    19ac:	07000013 	smladeq	r0, r3, r0, r0
    19b0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    19b4:	00000b1c 	andeq	r0, r0, ip, lsl fp
    19b8:	03002808 	movweq	r2, #2056	; 0x808
    19bc:	000b1c08 	andeq	r1, fp, r8, lsl #24
    19c0:	01130900 	tsteq	r3, r0, lsl #18
    19c4:	0b3a0b0b 	bleq	e845f8 <_Min_Stack_Size+0xe843f8>
    19c8:	1301053b 	movwne	r0, #5435	; 0x153b
    19cc:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    19d0:	3a080300 	bcc	2025d8 <_Min_Stack_Size+0x2023d8>
    19d4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    19d8:	000b3813 	andeq	r3, fp, r3, lsl r8
    19dc:	000d0b00 	andeq	r0, sp, r0, lsl #22
    19e0:	0b3a0e03 	bleq	e851f4 <_Min_Stack_Size+0xe84ff4>
    19e4:	1349053b 	movtne	r0, #38203	; 0x953b
    19e8:	00000b38 	andeq	r0, r0, r8, lsr fp
    19ec:	0300160c 	movweq	r1, #1548	; 0x60c
    19f0:	3b0b3a0e 	blcc	2d0230 <_Min_Stack_Size+0x2d0030>
    19f4:	00134905 	andseq	r4, r3, r5, lsl #18
    19f8:	002e0d00 	eoreq	r0, lr, r0, lsl #26
    19fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1a00:	0b3b0b3a 	bleq	ec46f0 <_Min_Stack_Size+0xec44f0>
    1a04:	01111927 	tsteq	r1, r7, lsr #18
    1a08:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1a0c:	00194297 	mulseq	r9, r7, r2
    1a10:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
    1a14:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1a18:	0b3b0b3a 	bleq	ec4708 <_Min_Stack_Size+0xec4508>
    1a1c:	01111927 	tsteq	r1, r7, lsr #18
    1a20:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1a24:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1a28:	0f000013 	svceq	0x00000013
    1a2c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1a30:	0b3b0b3a 	bleq	ec4720 <_Min_Stack_Size+0xec4520>
    1a34:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1a38:	0000193c 	andeq	r1, r0, ip, lsr r9
    1a3c:	03003410 	movweq	r3, #1040	; 0x410
    1a40:	3b0b3a0e 	blcc	2d0280 <_Min_Stack_Size+0x2d0080>
    1a44:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1a48:	11000018 	tstne	r0, r8, lsl r0
    1a4c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1a50:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1a54:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1a58:	0000193c 	andeq	r1, r0, ip, lsr r9
    1a5c:	01110100 	tsteq	r1, r0, lsl #2
    1a60:	0b130e25 	bleq	4c52fc <_Min_Stack_Size+0x4c50fc>
    1a64:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1a68:	01111755 	tsteq	r1, r5, asr r7
    1a6c:	00001710 	andeq	r1, r0, r0, lsl r7
    1a70:	0b002402 	bleq	aa80 <_Min_Stack_Size+0xa880>
    1a74:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1a78:	0300000e 	movweq	r0, #14
    1a7c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1a80:	0b3b0b3a 	bleq	ec4770 <_Min_Stack_Size+0xec4570>
    1a84:	00001349 	andeq	r1, r0, r9, asr #6
    1a88:	0b002404 	bleq	aaa0 <_Min_Stack_Size+0xa8a0>
    1a8c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1a90:	05000008 	streq	r0, [r0, #-8]
    1a94:	0b0b000f 	bleq	2c1ad8 <_Min_Stack_Size+0x2c18d8>
    1a98:	0f060000 	svceq	0x00060000
    1a9c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1aa0:	07000013 	smladeq	r0, r3, r0, r0
    1aa4:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    1aa8:	0000193c 	andeq	r1, r0, ip, lsr r9
    1aac:	49003508 	stmdbmi	r0, {r3, r8, sl, ip, sp}
    1ab0:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1ab4:	13490026 	movtne	r0, #36902	; 0x9026
    1ab8:	040a0000 	streq	r0, [sl], #-0
    1abc:	490b0b01 	stmdbmi	fp, {r0, r8, r9, fp}
    1ac0:	3b0b3a13 	blcc	2d0314 <_Min_Stack_Size+0x2d0114>
    1ac4:	00130105 	andseq	r0, r3, r5, lsl #2
    1ac8:	00280b00 	eoreq	r0, r8, r0, lsl #22
    1acc:	0b1c0e03 	bleq	7052e0 <_Min_Stack_Size+0x7050e0>
    1ad0:	280c0000 	stmdacs	ip, {}	; <UNPREDICTABLE>
    1ad4:	1c080300 	stcne	3, cr0, [r8], {-0}
    1ad8:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    1adc:	0b0b0113 	bleq	2c1f30 <_Min_Stack_Size+0x2c1d30>
    1ae0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1ae4:	00001301 	andeq	r1, r0, r1, lsl #6
    1ae8:	03000d0e 	movweq	r0, #3342	; 0xd0e
    1aec:	3b0b3a08 	blcc	2d0314 <_Min_Stack_Size+0x2d0114>
    1af0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1af4:	0f00000b 	svceq	0x0000000b
    1af8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1afc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1b00:	0b381349 	bleq	e0682c <_Min_Stack_Size+0xe0662c>
    1b04:	16100000 	ldrne	r0, [r0], -r0
    1b08:	3a0e0300 	bcc	382710 <_Min_Stack_Size+0x382510>
    1b0c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b10:	11000013 	tstne	r0, r3, lsl r0
    1b14:	13490101 	movtne	r0, #37121	; 0x9101
    1b18:	00001301 	andeq	r1, r0, r1, lsl #6
    1b1c:	49002112 	stmdbmi	r0, {r1, r4, r8, sp}
    1b20:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1b24:	01041300 	mrseq	r1, LR_abt
    1b28:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1b2c:	0b3b0b3a 	bleq	ec481c <_Min_Stack_Size+0xec461c>
    1b30:	00001301 	andeq	r1, r0, r1, lsl #6
    1b34:	03011314 	movweq	r1, #4884	; 0x1314
    1b38:	3a0b0b0e 	bcc	2c4778 <_Min_Stack_Size+0x2c4578>
    1b3c:	01053b0b 	tsteq	r5, fp, lsl #22
    1b40:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    1b44:	0b0b0113 	bleq	2c1f98 <_Min_Stack_Size+0x2c1d98>
    1b48:	0b3b0b3a 	bleq	ec4838 <_Min_Stack_Size+0xec4638>
    1b4c:	00001301 	andeq	r1, r0, r1, lsl #6
    1b50:	03000d16 	movweq	r0, #3350	; 0xd16
    1b54:	3b0b3a0e 	blcc	2d0394 <_Min_Stack_Size+0x2d0194>
    1b58:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1b5c:	1700000b 	strne	r0, [r0, -fp]
    1b60:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1b64:	0b3b0b3a 	bleq	ec4854 <_Min_Stack_Size+0xec4654>
    1b68:	0b381349 	bleq	e06894 <_Min_Stack_Size+0xe06694>
    1b6c:	15180000 	ldrne	r0, [r8, #-0]
    1b70:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    1b74:	00130113 	andseq	r0, r3, r3, lsl r1
    1b78:	00051900 	andeq	r1, r5, r0, lsl #18
    1b7c:	00001349 	andeq	r1, r0, r9, asr #6
    1b80:	0000261a 	andeq	r2, r0, sl, lsl r6
    1b84:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
    1b88:	0b3a0e03 	bleq	e8539c <_Min_Stack_Size+0xe8519c>
    1b8c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1b90:	13010b20 	movwne	r0, #6944	; 0x1b20
    1b94:	341c0000 	ldrcc	r0, [ip], #-0
    1b98:	3a0e0300 	bcc	3827a0 <_Min_Stack_Size+0x3825a0>
    1b9c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ba0:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    1ba4:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    1ba8:	0b3b0b3a 	bleq	ec4898 <_Min_Stack_Size+0xec4698>
    1bac:	01111927 	tsteq	r1, r7, lsr #18
    1bb0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1bb4:	00194296 	mulseq	r9, r6, r2
    1bb8:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
    1bbc:	0b3a0e03 	bleq	e853d0 <_Min_Stack_Size+0xe851d0>
    1bc0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1bc4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1bc8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1bcc:	00130119 	andseq	r0, r3, r9, lsl r1
    1bd0:	00051f00 	andeq	r1, r5, r0, lsl #30
    1bd4:	0b3a0803 	bleq	e83be8 <_Min_Stack_Size+0xe839e8>
    1bd8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1bdc:	00001802 	andeq	r1, r0, r2, lsl #16
    1be0:	03012e20 	movweq	r2, #7712	; 0x1e20
    1be4:	3b0b3a0e 	blcc	2d0424 <_Min_Stack_Size+0x2d0224>
    1be8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1bec:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1bf0:	96184006 	ldrls	r4, [r8], -r6
    1bf4:	13011942 	movwne	r1, #6466	; 0x1942
    1bf8:	34210000 	strtcc	r0, [r1], #-0
    1bfc:	3a080300 	bcc	202804 <_Min_Stack_Size+0x202604>
    1c00:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c04:	00180213 	andseq	r0, r8, r3, lsl r2
    1c08:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
    1c0c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1c10:	0b3b0b3a 	bleq	ec4900 <_Min_Stack_Size+0xec4700>
    1c14:	13491927 	movtne	r1, #39207	; 0x9927
    1c18:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1c1c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1c20:	00130119 	andseq	r0, r3, r9, lsl r1
    1c24:	00052300 	andeq	r2, r5, r0, lsl #6
    1c28:	0b3a0e03 	bleq	e8543c <_Min_Stack_Size+0xe8523c>
    1c2c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1c30:	00001802 	andeq	r1, r0, r2, lsl #16
    1c34:	03003424 	movweq	r3, #1060	; 0x424
    1c38:	3b0b3a0e 	blcc	2d0478 <_Min_Stack_Size+0x2d0278>
    1c3c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1c40:	25000018 	strcs	r0, [r0, #-24]	; 0xffffffe8
    1c44:	0e03012e 	adfeqsp	f0, f3, #0.5
    1c48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1c4c:	01111927 	tsteq	r1, r7, lsr #18
    1c50:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1c54:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1c58:	26000013 			; <UNDEFINED> instruction: 0x26000013
    1c5c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1c60:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1c64:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1c68:	34270000 	strtcc	r0, [r7], #-0
    1c6c:	3a0e0300 	bcc	382874 <_Min_Stack_Size+0x382674>
    1c70:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c74:	00180213 	andseq	r0, r8, r3, lsl r2
    1c78:	00342800 	eorseq	r2, r4, r0, lsl #16
    1c7c:	0b3a0803 	bleq	e83c90 <_Min_Stack_Size+0xe83a90>
    1c80:	1349053b 	movtne	r0, #38203	; 0x953b
    1c84:	00001802 	andeq	r1, r0, r2, lsl #16
    1c88:	11010b29 	tstne	r1, r9, lsr #22
    1c8c:	00061201 	andeq	r1, r6, r1, lsl #4
    1c90:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
    1c94:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1c98:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1c9c:	01111927 	tsteq	r1, r7, lsr #18
    1ca0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1ca4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1ca8:	2b000013 	blcs	1cfc <_Min_Stack_Size+0x1afc>
    1cac:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1cb0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1cb4:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    1cb8:	342c0000 	strtcc	r0, [ip], #-0
    1cbc:	02133100 	andseq	r3, r3, #0, 2
    1cc0:	2d000018 	stccs	0, cr0, [r0, #-96]	; 0xffffffa0
    1cc4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1cc8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1ccc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1cd0:	0000193c 	andeq	r1, r0, ip, lsr r9
    1cd4:	0300342e 	movweq	r3, #1070	; 0x42e
    1cd8:	3b0b3a0e 	blcc	2d0518 <_Min_Stack_Size+0x2d0318>
    1cdc:	3f13490b 	svccc	0x0013490b
    1ce0:	00193c19 	andseq	r3, r9, r9, lsl ip
    1ce4:	00342f00 	eorseq	r2, r4, r0, lsl #30
    1ce8:	0b3a0e03 	bleq	e854fc <_Min_Stack_Size+0xe852fc>
    1cec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1cf0:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1cf4:	21300000 	teqcs	r0, r0
    1cf8:	2f134900 	svccs	0x00134900
    1cfc:	00000005 	andeq	r0, r0, r5
    1d00:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1d04:	030b130e 	movweq	r1, #45838	; 0xb30e
    1d08:	1117550e 	tstne	r7, lr, lsl #10
    1d0c:	00171001 	andseq	r1, r7, r1
    1d10:	00240200 	eoreq	r0, r4, r0, lsl #4
    1d14:	0b3e0b0b 	bleq	f84948 <_Min_Stack_Size+0xf84748>
    1d18:	00000803 	andeq	r0, r0, r3, lsl #16
    1d1c:	0b002403 	bleq	ad30 <_Min_Stack_Size+0xab30>
    1d20:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1d24:	0400000e 	streq	r0, [r0], #-14
    1d28:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1d2c:	0b3b0b3a 	bleq	ec4a1c <_Min_Stack_Size+0xec481c>
    1d30:	00001349 	andeq	r1, r0, r9, asr #6
    1d34:	0b000f05 	bleq	5950 <_Min_Stack_Size+0x5750>
    1d38:	0600000b 	streq	r0, [r0], -fp
    1d3c:	0b0b000f 	bleq	2c1d80 <_Min_Stack_Size+0x2c1b80>
    1d40:	00001349 	andeq	r1, r0, r9, asr #6
    1d44:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
    1d48:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1d4c:	0b0b0113 	bleq	2c21a0 <_Min_Stack_Size+0x2c1fa0>
    1d50:	0b3b0b3a 	bleq	ec4a40 <_Min_Stack_Size+0xec4840>
    1d54:	00001301 	andeq	r1, r0, r1, lsl #6
    1d58:	03000d09 	movweq	r0, #3337	; 0xd09
    1d5c:	3b0b3a0e 	blcc	2d059c <_Min_Stack_Size+0x2d039c>
    1d60:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1d64:	0a00000b 	beq	1d98 <_Min_Stack_Size+0x1b98>
    1d68:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1d6c:	0b3b0b3a 	bleq	ec4a5c <_Min_Stack_Size+0xec485c>
    1d70:	0b381349 	bleq	e06a9c <_Min_Stack_Size+0xe0689c>
    1d74:	150b0000 	strne	r0, [fp, #-0]
    1d78:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    1d7c:	00130113 	andseq	r0, r3, r3, lsl r1
    1d80:	00050c00 	andeq	r0, r5, r0, lsl #24
    1d84:	00001349 	andeq	r1, r0, r9, asr #6
    1d88:	0000260d 	andeq	r2, r0, sp, lsl #12
    1d8c:	01010e00 	tsteq	r1, r0, lsl #28
    1d90:	13011349 	movwne	r1, #4937	; 0x1349
    1d94:	210f0000 	mrscs	r0, CPSR
    1d98:	2f134900 	svccs	0x00134900
    1d9c:	1000000b 	andne	r0, r0, fp
    1da0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1da4:	0b3a0e03 	bleq	e855b8 <_Min_Stack_Size+0xe853b8>
    1da8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1dac:	01111349 	tsteq	r1, r9, asr #6
    1db0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1db4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1db8:	11000013 	tstne	r0, r3, lsl r0
    1dbc:	08030005 	stmdaeq	r3, {r0, r2}
    1dc0:	0b3b0b3a 	bleq	ec4ab0 <_Min_Stack_Size+0xec48b0>
    1dc4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1dc8:	34120000 	ldrcc	r0, [r2], #-0
    1dcc:	3a0e0300 	bcc	3829d4 <_Min_Stack_Size+0x3827d4>
    1dd0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1dd4:	00180213 	andseq	r0, r8, r3, lsl r2
    1dd8:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
    1ddc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1de0:	0b3b0b3a 	bleq	ec4ad0 <_Min_Stack_Size+0xec48d0>
    1de4:	13491927 	movtne	r1, #39207	; 0x9927
    1de8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1dec:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1df0:	00130119 	andseq	r0, r3, r9, lsl r1
    1df4:	00341400 	eorseq	r1, r4, r0, lsl #8
    1df8:	0b3a0803 	bleq	e83e0c <_Min_Stack_Size+0xe83c0c>
    1dfc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1e00:	00001802 	andeq	r1, r0, r2, lsl #16
    1e04:	11010b15 	tstne	r1, r5, lsl fp
    1e08:	01061201 	tsteq	r6, r1, lsl #4
    1e0c:	16000013 			; <UNDEFINED> instruction: 0x16000013
    1e10:	0111010b 	tsteq	r1, fp, lsl #2
    1e14:	00000612 	andeq	r0, r0, r2, lsl r6
    1e18:	03000517 	movweq	r0, #1303	; 0x517
    1e1c:	3b0b3a0e 	blcc	2d065c <_Min_Stack_Size+0x2d045c>
    1e20:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1e24:	18000018 	stmdane	r0, {r3, r4}
    1e28:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1e2c:	0b3a0e03 	bleq	e85640 <_Min_Stack_Size+0xe85440>
    1e30:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1e34:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1e38:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1e3c:	00130119 	andseq	r0, r3, r9, lsl r1
    1e40:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
    1e44:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1e48:	0b3b0b3a 	bleq	ec4b38 <_Min_Stack_Size+0xec4938>
    1e4c:	01111927 	tsteq	r1, r7, lsr #18
    1e50:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1e54:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1e58:	1a000013 	bne	1eac <_Min_Stack_Size+0x1cac>
    1e5c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1e60:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1e64:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1e68:	211b0000 	tstcs	fp, r0
    1e6c:	2f134900 	svccs	0x00134900
    1e70:	1c000018 	stcne	0, cr0, [r0], {24}
    1e74:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1e78:	0b3a0e03 	bleq	e8568c <_Min_Stack_Size+0xe8548c>
    1e7c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1e80:	01111349 	tsteq	r1, r9, asr #6
    1e84:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1e88:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1e8c:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    1e90:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1e94:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1e98:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1e9c:	051e0000 	ldreq	r0, [lr, #-0]
    1ea0:	3a080300 	bcc	202aa8 <_Min_Stack_Size+0x2028a8>
    1ea4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ea8:	00180213 	andseq	r0, r8, r3, lsl r2
    1eac:	01011f00 	tsteq	r1, r0, lsl #30
    1eb0:	00001349 	andeq	r1, r0, r9, asr #6
    1eb4:	01110100 	tsteq	r1, r0, lsl #2
    1eb8:	0b130e25 	bleq	4c5754 <_Min_Stack_Size+0x4c5554>
    1ebc:	17550e03 	ldrbne	r0, [r5, -r3, lsl #28]
    1ec0:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1ec4:	24020000 	strcs	r0, [r2], #-0
    1ec8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1ecc:	000e030b 	andeq	r0, lr, fp, lsl #6
    1ed0:	00240300 	eoreq	r0, r4, r0, lsl #6
    1ed4:	0b3e0b0b 	bleq	f84b08 <_Min_Stack_Size+0xf84908>
    1ed8:	00000803 	andeq	r0, r0, r3, lsl #16
    1edc:	03001604 	movweq	r1, #1540	; 0x604
    1ee0:	3b0b3a0e 	blcc	2d0720 <_Min_Stack_Size+0x2d0520>
    1ee4:	0013490b 	andseq	r4, r3, fp, lsl #18
    1ee8:	000f0500 	andeq	r0, pc, r0, lsl #10
    1eec:	00000b0b 	andeq	r0, r0, fp, lsl #22
    1ef0:	03011306 	movweq	r1, #4870	; 0x1306
    1ef4:	3a0b0b0e 	bcc	2c4b34 <_Min_Stack_Size+0x2c4934>
    1ef8:	010b3b0b 	tsteq	fp, fp, lsl #22
    1efc:	07000013 	smladeq	r0, r3, r0, r0
    1f00:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1f04:	0b3b0b3a 	bleq	ec4bf4 <_Min_Stack_Size+0xec49f4>
    1f08:	0b381349 	bleq	e06c34 <_Min_Stack_Size+0xe06a34>
    1f0c:	0f080000 	svceq	0x00080000
    1f10:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1f14:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1f18:	13490035 	movtne	r0, #36917	; 0x9035
    1f1c:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
    1f20:	03193f01 	tsteq	r9, #1, 30
    1f24:	3b0b3a0e 	blcc	2d0764 <_Min_Stack_Size+0x2d0564>
    1f28:	1119270b 	tstne	r9, fp, lsl #14
    1f2c:	40061201 	andmi	r1, r6, r1, lsl #4
    1f30:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1f34:	00001301 	andeq	r1, r0, r1, lsl #6
    1f38:	0300050b 	movweq	r0, #1291	; 0x50b
    1f3c:	3b0b3a0e 	blcc	2d077c <_Min_Stack_Size+0x2d057c>
    1f40:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1f44:	0c000018 	stceq	0, cr0, [r0], {24}
    1f48:	13490026 	movtne	r0, #36902	; 0x9026
    1f4c:	340d0000 	strcc	r0, [sp], #-0
    1f50:	3a0e0300 	bcc	382b58 <_Min_Stack_Size+0x382958>
    1f54:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f58:	00180213 	andseq	r0, r8, r3, lsl r2
    1f5c:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
    1f60:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1f64:	0b3b0b3a 	bleq	ec4c54 <_Min_Stack_Size+0xec4a54>
    1f68:	13491927 	movtne	r1, #39207	; 0x9927
    1f6c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1f70:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1f74:	00000019 	andeq	r0, r0, r9, lsl r0
    1f78:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1f7c:	030b130e 	movweq	r1, #45838	; 0xb30e
    1f80:	1117550e 	tstne	r7, lr, lsl #10
    1f84:	00171001 	andseq	r1, r7, r1
    1f88:	00160200 	andseq	r0, r6, r0, lsl #4
    1f8c:	0b3a0e03 	bleq	e857a0 <_Min_Stack_Size+0xe855a0>
    1f90:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1f94:	24030000 	strcs	r0, [r3], #-0
    1f98:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1f9c:	000e030b 	andeq	r0, lr, fp, lsl #6
    1fa0:	00240400 	eoreq	r0, r4, r0, lsl #8
    1fa4:	0b3e0b0b 	bleq	f84bd8 <_Min_Stack_Size+0xf849d8>
    1fa8:	00000803 	andeq	r0, r0, r3, lsl #16
    1fac:	0b000f05 	bleq	5bc8 <_Min_Stack_Size+0x59c8>
    1fb0:	0600000b 	streq	r0, [r0], -fp
    1fb4:	0b0b000f 	bleq	2c1ff8 <_Min_Stack_Size+0x2c1df8>
    1fb8:	00001349 	andeq	r1, r0, r9, asr #6
    1fbc:	00002607 	andeq	r2, r0, r7, lsl #12
    1fc0:	01130800 	tsteq	r3, r0, lsl #16
    1fc4:	0b0b0e03 	bleq	2c57d8 <_Min_Stack_Size+0x2c55d8>
    1fc8:	0b3b0b3a 	bleq	ec4cb8 <_Min_Stack_Size+0xec4ab8>
    1fcc:	00001301 	andeq	r1, r0, r1, lsl #6
    1fd0:	03000d09 	movweq	r0, #3337	; 0xd09
    1fd4:	3b0b3a0e 	blcc	2d0814 <_Min_Stack_Size+0x2d0614>
    1fd8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1fdc:	0a00000b 	beq	2010 <_Min_Stack_Size+0x1e10>
    1fe0:	13490035 	movtne	r0, #36917	; 0x9035
    1fe4:	130b0000 	movwne	r0, #45056	; 0xb000
    1fe8:	3c0e0300 	stccc	3, cr0, [lr], {-0}
    1fec:	0c000019 	stceq	0, cr0, [r0], {25}
    1ff0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1ff4:	0b3b0b3a 	bleq	ec4ce4 <_Min_Stack_Size+0xec4ae4>
    1ff8:	0b381349 	bleq	e06d24 <_Min_Stack_Size+0xe06b24>
    1ffc:	170d0000 	strne	r0, [sp, -r0]
    2000:	3a0b0b01 	bcc	2c4c0c <_Min_Stack_Size+0x2c4a0c>
    2004:	010b3b0b 	tsteq	fp, fp, lsl #22
    2008:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    200c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2010:	0b3b0b3a 	bleq	ec4d00 <_Min_Stack_Size+0xec4b00>
    2014:	00001349 	andeq	r1, r0, r9, asr #6
    2018:	03012e0f 	movweq	r2, #7695	; 0x1e0f
    201c:	3b0b3a0e 	blcc	2d085c <_Min_Stack_Size+0x2d065c>
    2020:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2024:	010b2013 	tsteq	fp, r3, lsl r0
    2028:	10000013 	andne	r0, r0, r3, lsl r0
    202c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2030:	0b3b0b3a 	bleq	ec4d20 <_Min_Stack_Size+0xec4b20>
    2034:	00001349 	andeq	r1, r0, r9, asr #6
    2038:	03012e11 	movweq	r2, #7697	; 0x1e11
    203c:	3b0b3a0e 	blcc	2d087c <_Min_Stack_Size+0x2d067c>
    2040:	2019270b 	andscs	r2, r9, fp, lsl #14
    2044:	0013010b 	andseq	r0, r3, fp, lsl #2
    2048:	00051200 	andeq	r1, r5, r0, lsl #4
    204c:	0b3a0e03 	bleq	e85860 <_Min_Stack_Size+0xe85660>
    2050:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2054:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    2058:	03193f01 	tsteq	r9, #1, 30
    205c:	3b0b3a0e 	blcc	2d089c <_Min_Stack_Size+0x2d069c>
    2060:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2064:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2068:	96184006 	ldrls	r4, [r8], -r6
    206c:	13011942 	movwne	r1, #6466	; 0x1942
    2070:	05140000 	ldreq	r0, [r4, #-0]
    2074:	3a0e0300 	bcc	382c7c <_Min_Stack_Size+0x382a7c>
    2078:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    207c:	00180213 	andseq	r0, r8, r3, lsl r2
    2080:	00341500 	eorseq	r1, r4, r0, lsl #10
    2084:	0b3a0e03 	bleq	e85898 <_Min_Stack_Size+0xe85698>
    2088:	1349053b 	movtne	r0, #38203	; 0x953b
    208c:	00001802 	andeq	r1, r0, r2, lsl #16
    2090:	49002616 	stmdbmi	r0, {r1, r2, r4, r9, sl, sp}
    2094:	17000013 	smladne	r0, r3, r0, r0
    2098:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    209c:	0b3a0e03 	bleq	e858b0 <_Min_Stack_Size+0xe856b0>
    20a0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    20a4:	01111349 	tsteq	r1, r9, asr #6
    20a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    20ac:	01194296 			; <UNDEFINED> instruction: 0x01194296
    20b0:	18000013 	stmdane	r0, {r0, r1, r4}
    20b4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    20b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    20bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    20c0:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    20c4:	3a0e0301 	bcc	382cd0 <_Min_Stack_Size+0x382ad0>
    20c8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    20cc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    20d0:	96184006 	ldrls	r4, [r8], -r6
    20d4:	13011942 	movwne	r1, #6466	; 0x1942
    20d8:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    20dc:	11133101 	tstne	r3, r1, lsl #2
    20e0:	58061201 	stmdapl	r6, {r0, r9, ip}
    20e4:	0105590b 	tsteq	r5, fp, lsl #18
    20e8:	1b000013 	blne	213c <_Min_Stack_Size+0x1f3c>
    20ec:	0111010b 	tsteq	r1, fp, lsl #2
    20f0:	00000612 	andeq	r0, r0, r2, lsl r6
    20f4:	3100341c 	tstcc	r0, ip, lsl r4
    20f8:	00180213 	andseq	r0, r8, r3, lsl r2
    20fc:	010b1d00 	tsteq	fp, r0, lsl #26
    2100:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2104:	00001301 	andeq	r1, r0, r1, lsl #6
    2108:	31011d1e 	tstcc	r1, lr, lsl sp
    210c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2110:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2114:	1f000005 	svcne	0x00000005
    2118:	13310005 	teqne	r1, #5
    211c:	00001802 	andeq	r1, r0, r2, lsl #16
    2120:	3f012e20 	svccc	0x00012e20
    2124:	3a0e0319 	bcc	382d90 <_Min_Stack_Size+0x382b90>
    2128:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    212c:	11134919 	tstne	r3, r9, lsl r9
    2130:	40061201 	andmi	r1, r6, r1, lsl #4
    2134:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2138:	00001301 	andeq	r1, r0, r1, lsl #6
    213c:	3f012e21 	svccc	0x00012e21
    2140:	3a0e0319 	bcc	382dac <_Min_Stack_Size+0x382bac>
    2144:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2148:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    214c:	96184006 	ldrls	r4, [r8], -r6
    2150:	13011942 	movwne	r1, #6466	; 0x1942
    2154:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
    2158:	3a0e0301 	bcc	382d64 <_Min_Stack_Size+0x382b64>
    215c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2160:	11134919 	tstne	r3, r9, lsl r9
    2164:	40061201 	andmi	r1, r6, r1, lsl #4
    2168:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    216c:	00001301 	andeq	r1, r0, r1, lsl #6
    2170:	03012e23 	movweq	r2, #7715	; 0x1e23
    2174:	3b0b3a0e 	blcc	2d09b4 <_Min_Stack_Size+0x2d07b4>
    2178:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    217c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2180:	96184006 	ldrls	r4, [r8], -r6
    2184:	13011942 	movwne	r1, #6466	; 0x1942
    2188:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
    218c:	03193f01 	tsteq	r9, #1, 30
    2190:	3b0b3a0e 	blcc	2d09d0 <_Min_Stack_Size+0x2d07d0>
    2194:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2198:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    219c:	97184006 	ldrls	r4, [r8, -r6]
    21a0:	00001942 	andeq	r1, r0, r2, asr #18
    21a4:	01110100 	tsteq	r1, r0, lsl #2
    21a8:	0b130e25 	bleq	4c5a44 <_Min_Stack_Size+0x4c5844>
    21ac:	17550e03 	ldrbne	r0, [r5, -r3, lsl #28]
    21b0:	17100111 			; <UNDEFINED> instruction: 0x17100111
    21b4:	16020000 	strne	r0, [r2], -r0
    21b8:	3a0e0300 	bcc	382dc0 <_Min_Stack_Size+0x382bc0>
    21bc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    21c0:	03000013 	movweq	r0, #19
    21c4:	0b0b0024 	bleq	2c225c <_Min_Stack_Size+0x2c205c>
    21c8:	0e030b3e 	vmoveq.16	d3[0], r0
    21cc:	24040000 	strcs	r0, [r4], #-0
    21d0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    21d4:	0008030b 	andeq	r0, r8, fp, lsl #6
    21d8:	000f0500 	andeq	r0, pc, r0, lsl #10
    21dc:	00000b0b 	andeq	r0, r0, fp, lsl #22
    21e0:	0b000f06 	bleq	5e00 <_Min_Stack_Size+0x5c00>
    21e4:	0013490b 	andseq	r4, r3, fp, lsl #18
    21e8:	00260700 	eoreq	r0, r6, r0, lsl #14
    21ec:	00001349 	andeq	r1, r0, r9, asr #6
    21f0:	27011508 	strcs	r1, [r1, -r8, lsl #10]
    21f4:	00130119 	andseq	r0, r3, r9, lsl r1
    21f8:	00050900 	andeq	r0, r5, r0, lsl #18
    21fc:	00001349 	andeq	r1, r0, r9, asr #6
    2200:	0301130a 	movweq	r1, #4874	; 0x130a
    2204:	3a0b0b0e 	bcc	2c4e44 <_Min_Stack_Size+0x2c4c44>
    2208:	010b3b0b 	tsteq	fp, fp, lsl #22
    220c:	0b000013 	bleq	2260 <_Min_Stack_Size+0x2060>
    2210:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2214:	0b3b0b3a 	bleq	ec4f04 <_Min_Stack_Size+0xec4d04>
    2218:	0b381349 	bleq	e06f44 <_Min_Stack_Size+0xe06d44>
    221c:	350c0000 	strcc	r0, [ip, #-0]
    2220:	00134900 	andseq	r4, r3, r0, lsl #18
    2224:	000d0d00 	andeq	r0, sp, r0, lsl #26
    2228:	0b3a0e03 	bleq	e85a3c <_Min_Stack_Size+0xe8583c>
    222c:	1349053b 	movtne	r0, #38203	; 0x953b
    2230:	00000b38 	andeq	r0, r0, r8, lsr fp
    2234:	0b01040e 	bleq	43274 <_Min_Stack_Size+0x43074>
    2238:	3a13490b 	bcc	4d466c <_Min_Stack_Size+0x4d446c>
    223c:	010b3b0b 	tsteq	fp, fp, lsl #22
    2240:	0f000013 	svceq	0x00000013
    2244:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    2248:	00000b1c 	andeq	r0, r0, ip, lsl fp
    224c:	49010110 	stmdbmi	r1, {r4, r8}
    2250:	00130113 	andseq	r0, r3, r3, lsl r1
    2254:	00211100 	eoreq	r1, r1, r0, lsl #2
    2258:	0b2f1349 	bleq	bc6f84 <_Min_Stack_Size+0xbc6d84>
    225c:	16120000 	ldrne	r0, [r2], -r0
    2260:	3a0e0300 	bcc	382e68 <_Min_Stack_Size+0x382c68>
    2264:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2268:	13000013 	movwne	r0, #19
    226c:	0e03012e 	adfeqsp	f0, f3, #0.5
    2270:	0b3b0b3a 	bleq	ec4f60 <_Min_Stack_Size+0xec4d60>
    2274:	13491927 	movtne	r1, #39207	; 0x9927
    2278:	13010b20 	movwne	r0, #6944	; 0x1b20
    227c:	34140000 	ldrcc	r0, [r4], #-0
    2280:	3a0e0300 	bcc	382e88 <_Min_Stack_Size+0x382c88>
    2284:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2288:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    228c:	0e03012e 	adfeqsp	f0, f3, #0.5
    2290:	0b3b0b3a 	bleq	ec4f80 <_Min_Stack_Size+0xec4d80>
    2294:	0b201927 	bleq	808738 <_Min_Stack_Size+0x808538>
    2298:	00001301 	andeq	r1, r0, r1, lsl #6
    229c:	03000516 	movweq	r0, #1302	; 0x516
    22a0:	3b0b3a0e 	blcc	2d0ae0 <_Min_Stack_Size+0x2d08e0>
    22a4:	0013490b 	andseq	r4, r3, fp, lsl #18
    22a8:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
    22ac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    22b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    22b4:	13491927 	movtne	r1, #39207	; 0x9927
    22b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    22bc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    22c0:	00130119 	andseq	r0, r3, r9, lsl r1
    22c4:	00051800 	andeq	r1, r5, r0, lsl #16
    22c8:	0b3a0e03 	bleq	e85adc <_Min_Stack_Size+0xe858dc>
    22cc:	1349053b 	movtne	r0, #38203	; 0x953b
    22d0:	00001802 	andeq	r1, r0, r2, lsl #16
    22d4:	03003419 	movweq	r3, #1049	; 0x419
    22d8:	3b0b3a0e 	blcc	2d0b18 <_Min_Stack_Size+0x2d0918>
    22dc:	02134905 	andseq	r4, r3, #81920	; 0x14000
    22e0:	1a000018 	bne	2348 <_Min_Stack_Size+0x2148>
    22e4:	0111010b 	tsteq	r1, fp, lsl #2
    22e8:	00000612 	andeq	r0, r0, r2, lsl r6
    22ec:	03012e1b 	movweq	r2, #7707	; 0x1e1b
    22f0:	3b0b3a0e 	blcc	2d0b30 <_Min_Stack_Size+0x2d0930>
    22f4:	11192705 	tstne	r9, r5, lsl #14
    22f8:	40061201 	andmi	r1, r6, r1, lsl #4
    22fc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2300:	00001301 	andeq	r1, r0, r1, lsl #6
    2304:	0300341c 	movweq	r3, #1052	; 0x41c
    2308:	3b0b3a08 	blcc	2d0b30 <_Min_Stack_Size+0x2d0930>
    230c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2310:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
    2314:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2318:	0b3a0e03 	bleq	e85b2c <_Min_Stack_Size+0xe8592c>
    231c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2320:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2324:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    2328:	00130119 	andseq	r0, r3, r9, lsl r1
    232c:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
    2330:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2334:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2338:	13491927 	movtne	r1, #39207	; 0x9927
    233c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2340:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2344:	00130119 	andseq	r0, r3, r9, lsl r1
    2348:	011d1f00 	tsteq	sp, r0, lsl #30
    234c:	01111331 	tsteq	r1, r1, lsr r3
    2350:	0b580612 	bleq	1603ba0 <_Min_Stack_Size+0x16039a0>
    2354:	13010559 	movwne	r0, #5465	; 0x1559
    2358:	34200000 	strtcc	r0, [r0], #-0
    235c:	02133100 	andseq	r3, r3, #0, 2
    2360:	21000018 	tstcs	r0, r8, lsl r0
    2364:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2368:	06120111 			; <UNDEFINED> instruction: 0x06120111
    236c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    2370:	05220000 	streq	r0, [r2, #-0]!
    2374:	02133100 	andseq	r3, r3, #0, 2
    2378:	23000018 	movwcs	r0, #24
    237c:	0e03012e 	adfeqsp	f0, f3, #0.5
    2380:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2384:	13491927 	movtne	r1, #39207	; 0x9927
    2388:	06120111 			; <UNDEFINED> instruction: 0x06120111
    238c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2390:	00130119 	andseq	r0, r3, r9, lsl r1
    2394:	002e2400 	eoreq	r2, lr, r0, lsl #8
    2398:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    239c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    23a0:	01111927 	tsteq	r1, r7, lsr #18
    23a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    23a8:	00194297 	mulseq	r9, r7, r2
    23ac:	002e2500 	eoreq	r2, lr, r0, lsl #10
    23b0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    23b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    23b8:	13491927 	movtne	r1, #39207	; 0x9927
    23bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    23c0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    23c4:	26000019 			; <UNDEFINED> instruction: 0x26000019
    23c8:	0111010b 	tsteq	r1, fp, lsl #2
    23cc:	13010612 	movwne	r0, #5650	; 0x1612
    23d0:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
    23d4:	03193f01 	tsteq	r9, #1, 30
    23d8:	3b0b3a0e 	blcc	2d0c18 <_Min_Stack_Size+0x2d0a18>
    23dc:	11192705 	tstne	r9, r5, lsl #14
    23e0:	40061201 	andmi	r1, r6, r1, lsl #4
    23e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    23e8:	00001301 	andeq	r1, r0, r1, lsl #6
    23ec:	03002e28 	movweq	r2, #3624	; 0xe28
    23f0:	3b0b3a0e 	blcc	2d0c30 <_Min_Stack_Size+0x2d0a30>
    23f4:	11192705 	tstne	r9, r5, lsl #14
    23f8:	40061201 	andmi	r1, r6, r1, lsl #4
    23fc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2400:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
    2404:	3a0e0301 	bcc	383010 <_Min_Stack_Size+0x382e10>
    2408:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    240c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2410:	97184006 	ldrls	r4, [r8, -r6]
    2414:	13011942 	movwne	r1, #6466	; 0x1942
    2418:	342a0000 	strtcc	r0, [sl], #-0
    241c:	3a0e0300 	bcc	383024 <_Min_Stack_Size+0x382e24>
    2420:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2424:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    2428:	00000018 	andeq	r0, r0, r8, lsl r0
    242c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2430:	030b130e 	movweq	r1, #45838	; 0xb30e
    2434:	1117550e 	tstne	r7, lr, lsl #10
    2438:	00171001 	andseq	r1, r7, r1
    243c:	00240200 	eoreq	r0, r4, r0, lsl #4
    2440:	0b3e0b0b 	bleq	f85074 <_Min_Stack_Size+0xf84e74>
    2444:	00000803 	andeq	r0, r0, r3, lsl #16
    2448:	0b002403 	bleq	b45c <_Min_Stack_Size+0xb25c>
    244c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2450:	0400000e 	streq	r0, [r0], #-14
    2454:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2458:	0b3b0b3a 	bleq	ec5148 <_Min_Stack_Size+0xec4f48>
    245c:	00001349 	andeq	r1, r0, r9, asr #6
    2460:	0b000f05 	bleq	607c <_Min_Stack_Size+0x5e7c>
    2464:	0013490b 	andseq	r4, r3, fp, lsl #18
    2468:	01150600 	tsteq	r5, r0, lsl #12
    246c:	13011927 	movwne	r1, #6439	; 0x1927
    2470:	05070000 	streq	r0, [r7, #-0]
    2474:	00134900 	andseq	r4, r3, r0, lsl #18
    2478:	000f0800 	andeq	r0, pc, r0, lsl #16
    247c:	00000b0b 	andeq	r0, r0, fp, lsl #22
    2480:	03012e09 	movweq	r2, #7689	; 0x1e09
    2484:	3b0b3a0e 	blcc	2d0cc4 <_Min_Stack_Size+0x2d0ac4>
    2488:	2019270b 	andscs	r2, r9, fp, lsl #14
    248c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2490:	00340a00 	eorseq	r0, r4, r0, lsl #20
    2494:	0b3a0e03 	bleq	e85ca8 <_Min_Stack_Size+0xe85aa8>
    2498:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    249c:	050b0000 	streq	r0, [fp, #-0]
    24a0:	3a0e0300 	bcc	3830a8 <_Min_Stack_Size+0x382ea8>
    24a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    24a8:	0c000013 	stceq	0, cr0, [r0], {19}
    24ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    24b0:	0b3a0e03 	bleq	e85cc4 <_Min_Stack_Size+0xe85ac4>
    24b4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    24b8:	01111349 	tsteq	r1, r9, asr #6
    24bc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    24c0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    24c4:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    24c8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    24cc:	0b3b0b3a 	bleq	ec51bc <_Min_Stack_Size+0xec4fbc>
    24d0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    24d4:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    24d8:	3a0e0301 	bcc	3830e4 <_Min_Stack_Size+0x382ee4>
    24dc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    24e0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    24e4:	97184006 	ldrls	r4, [r8, -r6]
    24e8:	13011942 	movwne	r1, #6466	; 0x1942
    24ec:	340f0000 	strcc	r0, [pc], #-0	; 24f4 <_Min_Stack_Size+0x22f4>
    24f0:	3a0e0300 	bcc	3830f8 <_Min_Stack_Size+0x382ef8>
    24f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    24f8:	00180213 	andseq	r0, r8, r3, lsl r2
    24fc:	011d1000 	tsteq	sp, r0
    2500:	01111331 	tsteq	r1, r1, lsr r3
    2504:	0b580612 	bleq	1603d54 <_Min_Stack_Size+0x1603b54>
    2508:	00000b59 	andeq	r0, r0, r9, asr fp
    250c:	11010b11 	tstne	r1, r1, lsl fp
    2510:	00061201 	andeq	r1, r6, r1, lsl #4
    2514:	00341200 	eorseq	r1, r4, r0, lsl #4
    2518:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    251c:	35130000 	ldrcc	r0, [r3, #-0]
    2520:	00134900 	andseq	r4, r3, r0, lsl #18
    2524:	002e1400 	eoreq	r1, lr, r0, lsl #8
    2528:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    252c:	0b3b0b3a 	bleq	ec521c <_Min_Stack_Size+0xec501c>
    2530:	01111927 	tsteq	r1, r7, lsr #18
    2534:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2538:	00194297 	mulseq	r9, r7, r2
    253c:	002e1500 	eoreq	r1, lr, r0, lsl #10
    2540:	0b3a0e03 	bleq	e85d54 <_Min_Stack_Size+0xe85b54>
    2544:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2548:	06120111 			; <UNDEFINED> instruction: 0x06120111
    254c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2550:	16000019 			; <UNDEFINED> instruction: 0x16000019
    2554:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2558:	0b3a0e03 	bleq	e85d6c <_Min_Stack_Size+0xe85b6c>
    255c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2560:	01111349 	tsteq	r1, r9, asr #6
    2564:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2568:	00194296 	mulseq	r9, r6, r2
    256c:	002e1700 	eoreq	r1, lr, r0, lsl #14
    2570:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2574:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2578:	01111927 	tsteq	r1, r7, lsr #18
    257c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2580:	00194297 	mulseq	r9, r7, r2
    2584:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
    2588:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    258c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2590:	01111927 	tsteq	r1, r7, lsr #18
    2594:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2598:	01194297 			; <UNDEFINED> instruction: 0x01194297
    259c:	19000013 	stmdbne	r0, {r0, r1, r4}
    25a0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    25a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    25a8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    25ac:	051a0000 	ldreq	r0, [sl, #-0]
    25b0:	02133100 	andseq	r3, r3, #0, 2
    25b4:	1b000018 	blne	261c <_Min_Stack_Size+0x241c>
    25b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    25bc:	0b3a0e03 	bleq	e85dd0 <_Min_Stack_Size+0xe85bd0>
    25c0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    25c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    25c8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    25cc:	00130119 	andseq	r0, r3, r9, lsl r1
    25d0:	011d1c00 	tsteq	sp, r0, lsl #24
    25d4:	01111331 	tsteq	r1, r1, lsr r3
    25d8:	0b580612 	bleq	1603e28 <_Min_Stack_Size+0x1603c28>
    25dc:	13010559 	movwne	r0, #5465	; 0x1559
    25e0:	01000000 	mrseq	r0, (UNDEF: 0)
    25e4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    25e8:	0e030b13 	vmoveq.32	d3[0], r0
    25ec:	01111755 	tsteq	r1, r5, asr r7
    25f0:	00001710 	andeq	r1, r0, r0, lsl r7
    25f4:	03001602 	movweq	r1, #1538	; 0x602
    25f8:	3b0b3a0e 	blcc	2d0e38 <_Min_Stack_Size+0x2d0c38>
    25fc:	0013490b 	andseq	r4, r3, fp, lsl #18
    2600:	00240300 	eoreq	r0, r4, r0, lsl #6
    2604:	0b3e0b0b 	bleq	f85238 <_Min_Stack_Size+0xf85038>
    2608:	00000e03 	andeq	r0, r0, r3, lsl #28
    260c:	0b002404 	bleq	b624 <_Min_Stack_Size+0xb424>
    2610:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2614:	05000008 	streq	r0, [r0, #-8]
    2618:	0b0b000f 	bleq	2c265c <_Min_Stack_Size+0x2c245c>
    261c:	0f060000 	svceq	0x00060000
    2620:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2624:	07000013 	smladeq	r0, r3, r0, r0
    2628:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    262c:	0b3a0e03 	bleq	e85e40 <_Min_Stack_Size+0xe85c40>
    2630:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2634:	01111349 	tsteq	r1, r9, asr #6
    2638:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    263c:	01194296 			; <UNDEFINED> instruction: 0x01194296
    2640:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2644:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2648:	0b3b0b3a 	bleq	ec5338 <_Min_Stack_Size+0xec5138>
    264c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2650:	34090000 	strcc	r0, [r9], #-0
    2654:	3a0e0300 	bcc	38325c <_Min_Stack_Size+0x38305c>
    2658:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    265c:	00180213 	andseq	r0, r8, r3, lsl r2
    2660:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
    2664:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2668:	0b3b0b3a 	bleq	ec5358 <_Min_Stack_Size+0xec5158>
    266c:	01111927 	tsteq	r1, r7, lsr #18
    2670:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2674:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2678:	0b000013 	bleq	26cc <_Min_Stack_Size+0x24cc>
    267c:	08030005 	stmdaeq	r3, {r0, r2}
    2680:	0b3b0b3a 	bleq	ec5370 <_Min_Stack_Size+0xec5170>
    2684:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2688:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
    268c:	03193f00 	tsteq	r9, #0, 30
    2690:	3b0b3a0e 	blcc	2d0ed0 <_Min_Stack_Size+0x2d0cd0>
    2694:	1119270b 	tstne	r9, fp, lsl #14
    2698:	40061201 	andmi	r1, r6, r1, lsl #4
    269c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    26a0:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    26a4:	03193f00 	tsteq	r9, #0, 30
    26a8:	3b0b3a0e 	blcc	2d0ee8 <_Min_Stack_Size+0x2d0ce8>
    26ac:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    26b0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    26b4:	97184006 	ldrls	r4, [r8, -r6]
    26b8:	00001942 	andeq	r1, r0, r2, asr #18
    26bc:	4901010e 	stmdbmi	r1, {r1, r2, r3, r8}
    26c0:	00130113 	andseq	r0, r3, r3, lsl r1
    26c4:	00210f00 	eoreq	r0, r1, r0, lsl #30
    26c8:	052f1349 	streq	r1, [pc, #-841]!	; 2387 <_Min_Stack_Size+0x2187>
    26cc:	01000000 	mrseq	r0, (UNDEF: 0)
    26d0:	06100011 			; <UNDEFINED> instruction: 0x06100011
    26d4:	01120111 	tsteq	r2, r1, lsl r1
    26d8:	081b0803 	ldmdaeq	fp, {r0, r1, fp}
    26dc:	05130825 	ldreq	r0, [r3, #-2085]	; 0xfffff7db
    26e0:	01000000 	mrseq	r0, (UNDEF: 0)
    26e4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    26e8:	0e030b13 	vmoveq.32	d3[0], r0
    26ec:	01110e1b 	tsteq	r1, fp, lsl lr
    26f0:	17100612 			; <UNDEFINED> instruction: 0x17100612
    26f4:	24020000 	strcs	r0, [r2], #-0
    26f8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    26fc:	0008030b 	andeq	r0, r8, fp, lsl #6
    2700:	00160300 	andseq	r0, r6, r0, lsl #6
    2704:	0b3a0e03 	bleq	e85f18 <_Min_Stack_Size+0xe85d18>
    2708:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    270c:	24040000 	strcs	r0, [r4], #-0
    2710:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2714:	000e030b 	andeq	r0, lr, fp, lsl #6
    2718:	000f0500 	andeq	r0, pc, r0, lsl #10
    271c:	00000b0b 	andeq	r0, r0, fp, lsl #22
    2720:	0b000f06 	bleq	6340 <_Min_Stack_Size+0x6140>
    2724:	0013490b 	andseq	r4, r3, fp, lsl #18
    2728:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
    272c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2730:	0b3b0b3a 	bleq	ec5420 <_Min_Stack_Size+0xec5220>
    2734:	13491927 	movtne	r1, #39207	; 0x9927
    2738:	06120111 			; <UNDEFINED> instruction: 0x06120111
    273c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2740:	00130119 	andseq	r0, r3, r9, lsl r1
    2744:	00050800 	andeq	r0, r5, r0, lsl #16
    2748:	0b3a0803 	bleq	e8475c <_Min_Stack_Size+0xe8455c>
    274c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2750:	00001802 	andeq	r1, r0, r2, lsl #16
    2754:	03000509 	movweq	r0, #1289	; 0x509
    2758:	3b0b3a08 	blcc	2d0f80 <_Min_Stack_Size+0x2d0d80>
    275c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2760:	0a000017 	beq	27c4 <_Min_Stack_Size+0x25c4>
    2764:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2768:	0b3b0b3a 	bleq	ec5458 <_Min_Stack_Size+0xec5258>
    276c:	17021349 	strne	r1, [r2, -r9, asr #6]
    2770:	340b0000 	strcc	r0, [fp], #-0
    2774:	3a0e0300 	bcc	38337c <_Min_Stack_Size+0x38317c>
    2778:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    277c:	00170213 	andseq	r0, r7, r3, lsl r2
    2780:	11010000 	mrsne	r0, (UNDEF: 1)
    2784:	130e2501 	movwne	r2, #58625	; 0xe501
    2788:	1b0e030b 	blne	3833bc <_Min_Stack_Size+0x3831bc>
    278c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    2790:	00171006 	andseq	r1, r7, r6
    2794:	00240200 	eoreq	r0, r4, r0, lsl #4
    2798:	0b3e0b0b 	bleq	f853cc <_Min_Stack_Size+0xf851cc>
    279c:	00000e03 	andeq	r0, r0, r3, lsl #28
    27a0:	0b002403 	bleq	b7b4 <_Min_Stack_Size+0xb5b4>
    27a4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    27a8:	04000008 	streq	r0, [r0], #-8
    27ac:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    27b0:	0b3b0b3a 	bleq	ec54a0 <_Min_Stack_Size+0xec52a0>
    27b4:	00001349 	andeq	r1, r0, r9, asr #6
    27b8:	03001605 	movweq	r1, #1541	; 0x605
    27bc:	3b0b3a0e 	blcc	2d0ffc <_Min_Stack_Size+0x2d0dfc>
    27c0:	00134905 	andseq	r4, r3, r5, lsl #18
    27c4:	01170600 	tsteq	r7, r0, lsl #12
    27c8:	0b3a0b0b 	bleq	e853fc <_Min_Stack_Size+0xe851fc>
    27cc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    27d0:	0d070000 	stceq	0, cr0, [r7, #-0]
    27d4:	3a0e0300 	bcc	3833dc <_Min_Stack_Size+0x3831dc>
    27d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    27dc:	08000013 	stmdaeq	r0, {r0, r1, r4}
    27e0:	13490101 	movtne	r0, #37121	; 0x9101
    27e4:	00001301 	andeq	r1, r0, r1, lsl #6
    27e8:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
    27ec:	000b2f13 	andeq	r2, fp, r3, lsl pc
    27f0:	01130a00 	tsteq	r3, r0, lsl #20
    27f4:	0b3a0b0b 	bleq	e85428 <_Min_Stack_Size+0xe85228>
    27f8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    27fc:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    2800:	3a0e0300 	bcc	383408 <_Min_Stack_Size+0x383208>
    2804:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2808:	000b3813 	andeq	r3, fp, r3, lsl r8
    280c:	000f0c00 	andeq	r0, pc, r0, lsl #24
    2810:	00000b0b 	andeq	r0, r0, fp, lsl #22
    2814:	0b000f0d 	bleq	6450 <_Min_Stack_Size+0x6250>
    2818:	0013490b 	andseq	r4, r3, fp, lsl #18
    281c:	01130e00 	tsteq	r3, r0, lsl #28
    2820:	0b0b0e03 	bleq	2c6034 <_Min_Stack_Size+0x2c5e34>
    2824:	0b3b0b3a 	bleq	ec5514 <_Min_Stack_Size+0xec5314>
    2828:	00001301 	andeq	r1, r0, r1, lsl #6
    282c:	03000d0f 	movweq	r0, #3343	; 0xd0f
    2830:	3b0b3a08 	blcc	2d1058 <_Min_Stack_Size+0x2d0e58>
    2834:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2838:	1000000b 	andne	r0, r0, fp
    283c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2840:	0b3a0b0b 	bleq	e85474 <_Min_Stack_Size+0xe85274>
    2844:	1301053b 	movwne	r0, #5435	; 0x153b
    2848:	0d110000 	ldceq	0, cr0, [r1, #-0]
    284c:	3a0e0300 	bcc	383454 <_Min_Stack_Size+0x383254>
    2850:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2854:	000b3813 	andeq	r3, fp, r3, lsl r8
    2858:	000d1200 	andeq	r1, sp, r0, lsl #4
    285c:	0b3a0803 	bleq	e84870 <_Min_Stack_Size+0xe84670>
    2860:	1349053b 	movtne	r0, #38203	; 0x953b
    2864:	00000b38 	andeq	r0, r0, r8, lsr fp
    2868:	27011513 	smladcs	r1, r3, r5, r1
    286c:	01134919 	tsteq	r3, r9, lsl r9
    2870:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    2874:	13490005 	movtne	r0, #36869	; 0x9005
    2878:	26150000 	ldrcs	r0, [r5], -r0
    287c:	00134900 	andseq	r4, r3, r0, lsl #18
    2880:	01151600 	tsteq	r5, r0, lsl #12
    2884:	13011927 	movwne	r1, #6439	; 0x1927
    2888:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    288c:	03193f01 	tsteq	r9, #1, 30
    2890:	3b0b3a0e 	blcc	2d10d0 <_Min_Stack_Size+0x2d0ed0>
    2894:	1119270b 	tstne	r9, fp, lsl #14
    2898:	40061201 	andmi	r1, r6, r1, lsl #4
    289c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    28a0:	00001301 	andeq	r1, r0, r1, lsl #6
    28a4:	03000518 	movweq	r0, #1304	; 0x518
    28a8:	3b0b3a0e 	blcc	2d10e8 <_Min_Stack_Size+0x2d0ee8>
    28ac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    28b0:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    28b4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    28b8:	0b3b0b3a 	bleq	ec55a8 <_Min_Stack_Size+0xec53a8>
    28bc:	17021349 	strne	r1, [r2, -r9, asr #6]
    28c0:	0b1a0000 	bleq	6828c8 <_Min_Stack_Size+0x6826c8>
    28c4:	00175501 	andseq	r5, r7, r1, lsl #10
    28c8:	00341b00 	eorseq	r1, r4, r0, lsl #22
    28cc:	0b3a0803 	bleq	e848e0 <_Min_Stack_Size+0xe846e0>
    28d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    28d4:	00001702 	andeq	r1, r0, r2, lsl #14
    28d8:	55010b1c 	strpl	r0, [r1, #-2844]	; 0xfffff4e4
    28dc:	00130117 	andseq	r0, r3, r7, lsl r1
    28e0:	82891d00 	addhi	r1, r9, #0, 26
    28e4:	01110101 	tsteq	r1, r1, lsl #2
    28e8:	00001331 	andeq	r1, r0, r1, lsr r3
    28ec:	01828a1e 	orreq	r8, r2, lr, lsl sl
    28f0:	91180200 	tstls	r8, r0, lsl #4
    28f4:	00001842 	andeq	r1, r0, r2, asr #16
    28f8:	3f012e1f 	svccc	0x00012e1f
    28fc:	3a0e0319 	bcc	383568 <_Min_Stack_Size+0x383368>
    2900:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2904:	11134919 	tstne	r3, r9, lsl r9
    2908:	40061201 	andmi	r1, r6, r1, lsl #4
    290c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2910:	00001301 	andeq	r1, r0, r1, lsl #6
    2914:	03003420 	movweq	r3, #1056	; 0x420
    2918:	3b0b3a0e 	blcc	2d1158 <_Min_Stack_Size+0x2d0f58>
    291c:	3f134905 	svccc	0x00134905
    2920:	00193c19 	andseq	r3, r9, r9, lsl ip
    2924:	002e2100 	eoreq	r2, lr, r0, lsl #2
    2928:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    292c:	0e030e6e 	cdpeq	14, 0, cr0, cr3, cr14, {3}
    2930:	0b3b0b3a 	bleq	ec5620 <_Min_Stack_Size+0xec5420>
    2934:	01000000 	mrseq	r0, (UNDEF: 0)
    2938:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    293c:	0e030b13 	vmoveq.32	d3[0], r0
    2940:	01110e1b 	tsteq	r1, fp, lsl lr
    2944:	17100612 			; <UNDEFINED> instruction: 0x17100612
    2948:	24020000 	strcs	r0, [r2], #-0
    294c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2950:	0008030b 	andeq	r0, r8, fp, lsl #6
    2954:	00160300 	andseq	r0, r6, r0, lsl #6
    2958:	0b3a0e03 	bleq	e8616c <_Min_Stack_Size+0xe85f6c>
    295c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2960:	24040000 	strcs	r0, [r4], #-0
    2964:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2968:	000e030b 	andeq	r0, lr, fp, lsl #6
    296c:	00160500 	andseq	r0, r6, r0, lsl #10
    2970:	0b3a0e03 	bleq	e86184 <_Min_Stack_Size+0xe85f84>
    2974:	1349053b 	movtne	r0, #38203	; 0x953b
    2978:	17060000 	strne	r0, [r6, -r0]
    297c:	3a0b0b01 	bcc	2c5588 <_Min_Stack_Size+0x2c5388>
    2980:	010b3b0b 	tsteq	fp, fp, lsl #22
    2984:	07000013 	smladeq	r0, r3, r0, r0
    2988:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    298c:	0b3b0b3a 	bleq	ec567c <_Min_Stack_Size+0xec547c>
    2990:	00001349 	andeq	r1, r0, r9, asr #6
    2994:	49010108 	stmdbmi	r1, {r3, r8}
    2998:	00130113 	andseq	r0, r3, r3, lsl r1
    299c:	00210900 	eoreq	r0, r1, r0, lsl #18
    29a0:	0b2f1349 	bleq	bc76cc <_Min_Stack_Size+0xbc74cc>
    29a4:	130a0000 	movwne	r0, #40960	; 0xa000
    29a8:	3a0b0b01 	bcc	2c55b4 <_Min_Stack_Size+0x2c53b4>
    29ac:	010b3b0b 	tsteq	fp, fp, lsl #22
    29b0:	0b000013 	bleq	2a04 <_Min_Stack_Size+0x2804>
    29b4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    29b8:	0b3b0b3a 	bleq	ec56a8 <_Min_Stack_Size+0xec54a8>
    29bc:	0b381349 	bleq	e076e8 <_Min_Stack_Size+0xe074e8>
    29c0:	0f0c0000 	svceq	0x000c0000
    29c4:	000b0b00 	andeq	r0, fp, r0, lsl #22
    29c8:	000f0d00 	andeq	r0, pc, r0, lsl #26
    29cc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    29d0:	130e0000 	movwne	r0, #57344	; 0xe000
    29d4:	0b0e0301 	bleq	3835e0 <_Min_Stack_Size+0x3833e0>
    29d8:	3b0b3a0b 	blcc	2d120c <_Min_Stack_Size+0x2d100c>
    29dc:	0013010b 	andseq	r0, r3, fp, lsl #2
    29e0:	000d0f00 	andeq	r0, sp, r0, lsl #30
    29e4:	0b3a0803 	bleq	e849f8 <_Min_Stack_Size+0xe847f8>
    29e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    29ec:	00000b38 	andeq	r0, r0, r8, lsr fp
    29f0:	03011310 	movweq	r1, #4880	; 0x1310
    29f4:	3a0b0b0e 	bcc	2c5634 <_Min_Stack_Size+0x2c5434>
    29f8:	01053b0b 	tsteq	r5, fp, lsl #22
    29fc:	11000013 	tstne	r0, r3, lsl r0
    2a00:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2a04:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2a08:	0b381349 	bleq	e07734 <_Min_Stack_Size+0xe07534>
    2a0c:	0d120000 	ldceq	0, cr0, [r2, #-0]
    2a10:	3a080300 	bcc	203618 <_Min_Stack_Size+0x203418>
    2a14:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a18:	000b3813 	andeq	r3, fp, r3, lsl r8
    2a1c:	01151300 	tsteq	r5, r0, lsl #6
    2a20:	13491927 	movtne	r1, #39207	; 0x9927
    2a24:	00001301 	andeq	r1, r0, r1, lsl #6
    2a28:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    2a2c:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    2a30:	13490026 	movtne	r0, #36902	; 0x9026
    2a34:	15160000 	ldrne	r0, [r6, #-0]
    2a38:	01192701 	tsteq	r9, r1, lsl #14
    2a3c:	17000013 	smladne	r0, r3, r0, r0
    2a40:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2a44:	0b381349 	bleq	e07770 <_Min_Stack_Size+0xe07570>
    2a48:	00001934 	andeq	r1, r0, r4, lsr r9
    2a4c:	3f012e18 	svccc	0x00012e18
    2a50:	3a0e0319 	bcc	3836bc <_Min_Stack_Size+0x3834bc>
    2a54:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2a58:	11134919 	tstne	r3, r9, lsl r9
    2a5c:	40061201 	andmi	r1, r6, r1, lsl #4
    2a60:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2a64:	00001301 	andeq	r1, r0, r1, lsl #6
    2a68:	03000519 	movweq	r0, #1305	; 0x519
    2a6c:	3b0b3a08 	blcc	2d1294 <_Min_Stack_Size+0x2d1094>
    2a70:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2a74:	1a000017 	bne	2ad8 <_Min_Stack_Size+0x28d8>
    2a78:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2a7c:	0b3b0b3a 	bleq	ec576c <_Min_Stack_Size+0xec556c>
    2a80:	17021349 	strne	r1, [r2, -r9, asr #6]
    2a84:	051b0000 	ldreq	r0, [fp, #-0]
    2a88:	3a080300 	bcc	203690 <_Min_Stack_Size+0x203490>
    2a8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a90:	00180213 	andseq	r0, r8, r3, lsl r2
    2a94:	00181c00 	andseq	r1, r8, r0, lsl #24
    2a98:	341d0000 	ldrcc	r0, [sp], #-0
    2a9c:	3a080300 	bcc	2036a4 <_Min_Stack_Size+0x2034a4>
    2aa0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2aa4:	00170213 	andseq	r0, r7, r3, lsl r2
    2aa8:	00341e00 	eorseq	r1, r4, r0, lsl #28
    2aac:	0b3a0803 	bleq	e84ac0 <_Min_Stack_Size+0xe848c0>
    2ab0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ab4:	00001802 	andeq	r1, r0, r2, lsl #16
    2ab8:	0182891f 	orreq	r8, r2, pc, lsl r9
    2abc:	31011101 	tstcc	r1, r1, lsl #2
    2ac0:	00130113 	andseq	r0, r3, r3, lsl r1
    2ac4:	828a2000 	addhi	r2, sl, #0
    2ac8:	18020001 	stmdane	r2, {r0}
    2acc:	00184291 	mulseq	r8, r1, r2
    2ad0:	82892100 	addhi	r2, r9, #0, 2
    2ad4:	01110101 	tsteq	r1, r1, lsl #2
    2ad8:	00001331 	andeq	r1, r0, r1, lsr r3
    2adc:	49003722 	stmdbmi	r0, {r1, r5, r8, r9, sl, ip, sp}
    2ae0:	23000013 	movwcs	r0, #19
    2ae4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2ae8:	0b3a0e03 	bleq	e862fc <_Min_Stack_Size+0xe860fc>
    2aec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2af0:	01111349 	tsteq	r1, r9, asr #6
    2af4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2af8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2afc:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    2b00:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2b04:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2b08:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    2b0c:	0000193c 	andeq	r1, r0, ip, lsr r9
    2b10:	3f002e25 	svccc	0x00002e25
    2b14:	6e193c19 	mrcvs	12, 0, r3, cr9, cr9, {0}
    2b18:	3a0e030e 	bcc	383758 <_Min_Stack_Size+0x383558>
    2b1c:	000b3b0b 	andeq	r3, fp, fp, lsl #22
    2b20:	11010000 	mrsne	r0, (UNDEF: 1)
    2b24:	130e2501 	movwne	r2, #58625	; 0xe501
    2b28:	1b0e030b 	blne	38375c <_Min_Stack_Size+0x38355c>
    2b2c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    2b30:	00171006 	andseq	r1, r7, r6
    2b34:	00240200 	eoreq	r0, r4, r0, lsl #4
    2b38:	0b3e0b0b 	bleq	f8576c <_Min_Stack_Size+0xf8556c>
    2b3c:	00000803 	andeq	r0, r0, r3, lsl #16
    2b40:	0b002403 	bleq	bb54 <_Min_Stack_Size+0xb954>
    2b44:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2b48:	0400000e 	streq	r0, [r0], #-14
    2b4c:	0b0b000f 	bleq	2c2b90 <_Min_Stack_Size+0x2c2990>
    2b50:	00001349 	andeq	r1, r0, r9, asr #6
    2b54:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    2b58:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2b5c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2b60:	0b3a0e03 	bleq	e86374 <_Min_Stack_Size+0xe86174>
    2b64:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2b68:	01111349 	tsteq	r1, r9, asr #6
    2b6c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2b70:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2b74:	07000013 	smladeq	r0, r3, r0, r0
    2b78:	08030005 	stmdaeq	r3, {r0, r2}
    2b7c:	0b3b0b3a 	bleq	ec586c <_Min_Stack_Size+0xec566c>
    2b80:	17021349 	strne	r1, [r2, -r9, asr #6]
    2b84:	34080000 	strcc	r0, [r8], #-0
    2b88:	3a080300 	bcc	203790 <_Min_Stack_Size+0x203590>
    2b8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b90:	00170213 	andseq	r0, r7, r3, lsl r2
    2b94:	00340900 	eorseq	r0, r4, r0, lsl #18
    2b98:	0b3a0e03 	bleq	e863ac <_Min_Stack_Size+0xe861ac>
    2b9c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ba0:	00001702 	andeq	r1, r0, r2, lsl #14
    2ba4:	01110100 	tsteq	r1, r0, lsl #2
    2ba8:	0b130e25 	bleq	4c6444 <_Min_Stack_Size+0x4c6244>
    2bac:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2bb0:	01111755 	tsteq	r1, r5, asr r7
    2bb4:	00001710 	andeq	r1, r0, r0, lsl r7
    2bb8:	0b002402 	bleq	bbc8 <_Min_Stack_Size+0xb9c8>
    2bbc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2bc0:	03000008 	movweq	r0, #8
    2bc4:	0b0b0024 	bleq	2c2c5c <_Min_Stack_Size+0x2c2a5c>
    2bc8:	0e030b3e 	vmoveq.16	d3[0], r0
    2bcc:	0f040000 	svceq	0x00040000
    2bd0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2bd4:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    2bd8:	13490026 	movtne	r0, #36902	; 0x9026
    2bdc:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    2be0:	03193f01 	tsteq	r9, #1, 30
    2be4:	3b0b3a0e 	blcc	2d1424 <_Min_Stack_Size+0x2d1224>
    2be8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2bec:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2bf0:	97184006 	ldrls	r4, [r8, -r6]
    2bf4:	00001942 	andeq	r1, r0, r2, asr #18
    2bf8:	03000507 	movweq	r0, #1287	; 0x507
    2bfc:	3b0b3a08 	blcc	2d1424 <_Min_Stack_Size+0x2d1224>
    2c00:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2c04:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    2c08:	08030005 	stmdaeq	r3, {r0, r2}
    2c0c:	0b3b0b3a 	bleq	ec58fc <_Min_Stack_Size+0xec56fc>
    2c10:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2c14:	01000000 	mrseq	r0, (UNDEF: 0)
    2c18:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2c1c:	0e030b13 	vmoveq.32	d3[0], r0
    2c20:	17550e1b 	smmlane	r5, fp, lr, r0
    2c24:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2c28:	24020000 	strcs	r0, [r2], #-0
    2c2c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2c30:	0008030b 	andeq	r0, r8, fp, lsl #6
    2c34:	00160300 	andseq	r0, r6, r0, lsl #6
    2c38:	0b3a0e03 	bleq	e8644c <_Min_Stack_Size+0xe8624c>
    2c3c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2c40:	24040000 	strcs	r0, [r4], #-0
    2c44:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2c48:	000e030b 	andeq	r0, lr, fp, lsl #6
    2c4c:	000f0500 	andeq	r0, pc, r0, lsl #10
    2c50:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2c54:	26060000 	strcs	r0, [r6], -r0
    2c58:	00134900 	andseq	r4, r3, r0, lsl #18
    2c5c:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
    2c60:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2c64:	0b3b0b3a 	bleq	ec5954 <_Min_Stack_Size+0xec5754>
    2c68:	13491927 	movtne	r1, #39207	; 0x9927
    2c6c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2c70:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2c74:	08000019 	stmdaeq	r0, {r0, r3, r4}
    2c78:	08030005 	stmdaeq	r3, {r0, r2}
    2c7c:	0b3b0b3a 	bleq	ec596c <_Min_Stack_Size+0xec576c>
    2c80:	17021349 	strne	r1, [r2, -r9, asr #6]
    2c84:	01000000 	mrseq	r0, (UNDEF: 0)
    2c88:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2c8c:	0e030b13 	vmoveq.32	d3[0], r0
    2c90:	01110e1b 	tsteq	r1, fp, lsl lr
    2c94:	17100612 			; <UNDEFINED> instruction: 0x17100612
    2c98:	24020000 	strcs	r0, [r2], #-0
    2c9c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2ca0:	0008030b 	andeq	r0, r8, fp, lsl #6
    2ca4:	00160300 	andseq	r0, r6, r0, lsl #6
    2ca8:	0b3a0e03 	bleq	e864bc <_Min_Stack_Size+0xe862bc>
    2cac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2cb0:	24040000 	strcs	r0, [r4], #-0
    2cb4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2cb8:	000e030b 	andeq	r0, lr, fp, lsl #6
    2cbc:	000f0500 	andeq	r0, pc, r0, lsl #10
    2cc0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2cc4:	26060000 	strcs	r0, [r6], -r0
    2cc8:	00134900 	andseq	r4, r3, r0, lsl #18
    2ccc:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
    2cd0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2cd4:	0b3b0b3a 	bleq	ec59c4 <_Min_Stack_Size+0xec57c4>
    2cd8:	13491927 	movtne	r1, #39207	; 0x9927
    2cdc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2ce0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2ce4:	00130119 	andseq	r0, r3, r9, lsl r1
    2ce8:	00050800 	andeq	r0, r5, r0, lsl #16
    2cec:	0b3a0803 	bleq	e84d00 <_Min_Stack_Size+0xe84b00>
    2cf0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2cf4:	00001702 	andeq	r1, r0, r2, lsl #14
    2cf8:	03003409 	movweq	r3, #1033	; 0x409
    2cfc:	3b0b3a08 	blcc	2d1524 <_Min_Stack_Size+0x2d1324>
    2d00:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2d04:	00000017 	andeq	r0, r0, r7, lsl r0
    2d08:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2d0c:	030b130e 	movweq	r1, #45838	; 0xb30e
    2d10:	110e1b0e 	tstne	lr, lr, lsl #22
    2d14:	10061201 	andne	r1, r6, r1, lsl #4
    2d18:	02000017 	andeq	r0, r0, #23
    2d1c:	0b0b0024 	bleq	2c2db4 <_Min_Stack_Size+0x2c2bb4>
    2d20:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2d24:	16030000 	strne	r0, [r3], -r0
    2d28:	3a0e0300 	bcc	383930 <_Min_Stack_Size+0x383730>
    2d2c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2d30:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2d34:	0b0b0024 	bleq	2c2dcc <_Min_Stack_Size+0x2c2bcc>
    2d38:	0e030b3e 	vmoveq.16	d3[0], r0
    2d3c:	0f050000 	svceq	0x00050000
    2d40:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2d44:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2d48:	13490026 	movtne	r0, #36902	; 0x9026
    2d4c:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
    2d50:	03193f01 	tsteq	r9, #1, 30
    2d54:	3b0b3a0e 	blcc	2d1594 <_Min_Stack_Size+0x2d1394>
    2d58:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2d5c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2d60:	97184006 	ldrls	r4, [r8, -r6]
    2d64:	13011942 	movwne	r1, #6466	; 0x1942
    2d68:	05080000 	streq	r0, [r8, #-0]
    2d6c:	3a0e0300 	bcc	383974 <_Min_Stack_Size+0x383774>
    2d70:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2d74:	00180213 	andseq	r0, r8, r3, lsl r2
    2d78:	00050900 	andeq	r0, r5, r0, lsl #18
    2d7c:	0b3a0e03 	bleq	e86590 <_Min_Stack_Size+0xe86390>
    2d80:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2d84:	00001702 	andeq	r1, r0, r2, lsl #14
    2d88:	0300340a 	movweq	r3, #1034	; 0x40a
    2d8c:	3b0b3a08 	blcc	2d15b4 <_Min_Stack_Size+0x2d13b4>
    2d90:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2d94:	0b000017 	bleq	2df8 <_Min_Stack_Size+0x2bf8>
    2d98:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2d9c:	0b3b0b3a 	bleq	ec5a8c <_Min_Stack_Size+0xec588c>
    2da0:	17021349 	strne	r1, [r2, -r9, asr #6]
    2da4:	370c0000 	strcc	r0, [ip, -r0]
    2da8:	00134900 	andseq	r4, r3, r0, lsl #18
    2dac:	11010000 	mrsne	r0, (UNDEF: 1)
    2db0:	130e2501 	movwne	r2, #58625	; 0xe501
    2db4:	1b0e030b 	blne	3839e8 <_Min_Stack_Size+0x3837e8>
    2db8:	0017100e 	andseq	r1, r7, lr
    2dbc:	00240200 	eoreq	r0, r4, r0, lsl #4
    2dc0:	0b3e0b0b 	bleq	f859f4 <_Min_Stack_Size+0xf857f4>
    2dc4:	00000803 	andeq	r0, r0, r3, lsl #16
    2dc8:	0b002403 	bleq	bddc <_Min_Stack_Size+0xbbdc>
    2dcc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2dd0:	0400000e 	streq	r0, [r0], #-14
    2dd4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2dd8:	0b3b0b3a 	bleq	ec5ac8 <_Min_Stack_Size+0xec58c8>
    2ddc:	00001349 	andeq	r1, r0, r9, asr #6
    2de0:	03001605 	movweq	r1, #1541	; 0x605
    2de4:	3b0b3a0e 	blcc	2d1624 <_Min_Stack_Size+0x2d1424>
    2de8:	00134905 	andseq	r4, r3, r5, lsl #18
    2dec:	01170600 	tsteq	r7, r0, lsl #12
    2df0:	0b3a0b0b 	bleq	e85a24 <_Min_Stack_Size+0xe85824>
    2df4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2df8:	0d070000 	stceq	0, cr0, [r7, #-0]
    2dfc:	3a0e0300 	bcc	383a04 <_Min_Stack_Size+0x383804>
    2e00:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e04:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2e08:	13490101 	movtne	r0, #37121	; 0x9101
    2e0c:	00001301 	andeq	r1, r0, r1, lsl #6
    2e10:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
    2e14:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2e18:	01130a00 	tsteq	r3, r0, lsl #20
    2e1c:	0b3a0b0b 	bleq	e85a50 <_Min_Stack_Size+0xe85850>
    2e20:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2e24:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    2e28:	3a0e0300 	bcc	383a30 <_Min_Stack_Size+0x383830>
    2e2c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e30:	000b3813 	andeq	r3, fp, r3, lsl r8
    2e34:	000f0c00 	andeq	r0, pc, r0, lsl #24
    2e38:	00000b0b 	andeq	r0, r0, fp, lsl #22
    2e3c:	0b000f0d 	bleq	6a78 <_Min_Stack_Size+0x6878>
    2e40:	0013490b 	andseq	r4, r3, fp, lsl #18
    2e44:	01130e00 	tsteq	r3, r0, lsl #28
    2e48:	0b0b0e03 	bleq	2c665c <_Min_Stack_Size+0x2c645c>
    2e4c:	0b3b0b3a 	bleq	ec5b3c <_Min_Stack_Size+0xec593c>
    2e50:	00001301 	andeq	r1, r0, r1, lsl #6
    2e54:	03000d0f 	movweq	r0, #3343	; 0xd0f
    2e58:	3b0b3a08 	blcc	2d1680 <_Min_Stack_Size+0x2d1480>
    2e5c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2e60:	1000000b 	andne	r0, r0, fp
    2e64:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2e68:	0b3a0b0b 	bleq	e85a9c <_Min_Stack_Size+0xe8589c>
    2e6c:	1301053b 	movwne	r0, #5435	; 0x153b
    2e70:	0d110000 	ldceq	0, cr0, [r1, #-0]
    2e74:	3a0e0300 	bcc	383a7c <_Min_Stack_Size+0x38387c>
    2e78:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e7c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2e80:	000d1200 	andeq	r1, sp, r0, lsl #4
    2e84:	0b3a0803 	bleq	e84e98 <_Min_Stack_Size+0xe84c98>
    2e88:	1349053b 	movtne	r0, #38203	; 0x953b
    2e8c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2e90:	27011513 	smladcs	r1, r3, r5, r1
    2e94:	01134919 	tsteq	r3, r9, lsl r9
    2e98:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    2e9c:	13490005 	movtne	r0, #36869	; 0x9005
    2ea0:	26150000 	ldrcs	r0, [r5], -r0
    2ea4:	00134900 	andseq	r4, r3, r0, lsl #18
    2ea8:	01151600 	tsteq	r5, r0, lsl #12
    2eac:	13011927 	movwne	r1, #6439	; 0x1927
    2eb0:	34170000 	ldrcc	r0, [r7], #-0
    2eb4:	3a0e0300 	bcc	383abc <_Min_Stack_Size+0x3838bc>
    2eb8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ebc:	00180213 	andseq	r0, r8, r3, lsl r2
    2ec0:	00341800 	eorseq	r1, r4, r0, lsl #16
    2ec4:	0b3a0e03 	bleq	e866d8 <_Min_Stack_Size+0xe864d8>
    2ec8:	1349053b 	movtne	r0, #38203	; 0x953b
    2ecc:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    2ed0:	34190000 	ldrcc	r0, [r9], #-0
    2ed4:	3a0e0300 	bcc	383adc <_Min_Stack_Size+0x3838dc>
    2ed8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2edc:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    2ee0:	00000018 	andeq	r0, r0, r8, lsl r0
    2ee4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2ee8:	030b130e 	movweq	r1, #45838	; 0xb30e
    2eec:	110e1b0e 	tstne	lr, lr, lsl #22
    2ef0:	10061201 	andne	r1, r6, r1, lsl #4
    2ef4:	02000017 	andeq	r0, r0, #23
    2ef8:	0b0b0024 	bleq	2c2f90 <_Min_Stack_Size+0x2c2d90>
    2efc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2f00:	16030000 	strne	r0, [r3], -r0
    2f04:	3a0e0300 	bcc	383b0c <_Min_Stack_Size+0x38390c>
    2f08:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2f0c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2f10:	0b0b0024 	bleq	2c2fa8 <_Min_Stack_Size+0x2c2da8>
    2f14:	0e030b3e 	vmoveq.16	d3[0], r0
    2f18:	16050000 	strne	r0, [r5], -r0
    2f1c:	3a0e0300 	bcc	383b24 <_Min_Stack_Size+0x383924>
    2f20:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2f24:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2f28:	0b0b0117 	bleq	2c338c <_Min_Stack_Size+0x2c318c>
    2f2c:	0b3b0b3a 	bleq	ec5c1c <_Min_Stack_Size+0xec5a1c>
    2f30:	00001301 	andeq	r1, r0, r1, lsl #6
    2f34:	03000d07 	movweq	r0, #3335	; 0xd07
    2f38:	3b0b3a0e 	blcc	2d1778 <_Min_Stack_Size+0x2d1578>
    2f3c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2f40:	01010800 	tsteq	r1, r0, lsl #16
    2f44:	13011349 	movwne	r1, #4937	; 0x1349
    2f48:	21090000 	mrscs	r0, (UNDEF: 9)
    2f4c:	2f134900 	svccs	0x00134900
    2f50:	0a00000b 	beq	2f84 <_Min_Stack_Size+0x2d84>
    2f54:	0b0b0113 	bleq	2c33a8 <_Min_Stack_Size+0x2c31a8>
    2f58:	0b3b0b3a 	bleq	ec5c48 <_Min_Stack_Size+0xec5a48>
    2f5c:	00001301 	andeq	r1, r0, r1, lsl #6
    2f60:	03000d0b 	movweq	r0, #3339	; 0xd0b
    2f64:	3b0b3a0e 	blcc	2d17a4 <_Min_Stack_Size+0x2d15a4>
    2f68:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2f6c:	0c00000b 	stceq	0, cr0, [r0], {11}
    2f70:	0b0b000f 	bleq	2c2fb4 <_Min_Stack_Size+0x2c2db4>
    2f74:	0f0d0000 	svceq	0x000d0000
    2f78:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2f7c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    2f80:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2f84:	0b3a0b0b 	bleq	e85bb8 <_Min_Stack_Size+0xe859b8>
    2f88:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2f8c:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 2f94 <_Min_Stack_Size+0x2d94>
    2f90:	3a080300 	bcc	203b98 <_Min_Stack_Size+0x203998>
    2f94:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2f98:	000b3813 	andeq	r3, fp, r3, lsl r8
    2f9c:	01131000 	tsteq	r3, r0
    2fa0:	0b0b0e03 	bleq	2c67b4 <_Min_Stack_Size+0x2c65b4>
    2fa4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2fa8:	00001301 	andeq	r1, r0, r1, lsl #6
    2fac:	03000d11 	movweq	r0, #3345	; 0xd11
    2fb0:	3b0b3a0e 	blcc	2d17f0 <_Min_Stack_Size+0x2d15f0>
    2fb4:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    2fb8:	1200000b 	andne	r0, r0, #11
    2fbc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    2fc0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2fc4:	0b381349 	bleq	e07cf0 <_Min_Stack_Size+0xe07af0>
    2fc8:	15130000 	ldrne	r0, [r3, #-0]
    2fcc:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    2fd0:	00130113 	andseq	r0, r3, r3, lsl r1
    2fd4:	00051400 	andeq	r1, r5, r0, lsl #8
    2fd8:	00001349 	andeq	r1, r0, r9, asr #6
    2fdc:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    2fe0:	16000013 			; <UNDEFINED> instruction: 0x16000013
    2fe4:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    2fe8:	00001301 	andeq	r1, r0, r1, lsl #6
    2fec:	3f012e17 	svccc	0x00012e17
    2ff0:	3a0e0319 	bcc	383c5c <_Min_Stack_Size+0x383a5c>
    2ff4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2ff8:	11134919 	tstne	r3, r9, lsl r9
    2ffc:	40061201 	andmi	r1, r6, r1, lsl #4
    3000:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3004:	00001301 	andeq	r1, r0, r1, lsl #6
    3008:	03000518 	movweq	r0, #1304	; 0x518
    300c:	3b0b3a0e 	blcc	2d184c <_Min_Stack_Size+0x2d164c>
    3010:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3014:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    3018:	01018289 	smlabbeq	r1, r9, r2, r8
    301c:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    3020:	00133119 	andseq	r3, r3, r9, lsl r1
    3024:	828a1a00 	addhi	r1, sl, #0, 20
    3028:	18020001 	stmdane	r2, {r0}
    302c:	00184291 	mulseq	r8, r1, r2
    3030:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
    3034:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3038:	0b3b0b3a 	bleq	ec5d28 <_Min_Stack_Size+0xec5b28>
    303c:	01111927 	tsteq	r1, r7, lsr #18
    3040:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3044:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3048:	1c000013 	stcne	0, cr0, [r0], {19}
    304c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3050:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3054:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    3058:	0000193c 	andeq	r1, r0, ip, lsr r9
    305c:	3f002e1d 	svccc	0x00002e1d
    3060:	6e193c19 	mrcvs	12, 0, r3, cr9, cr9, {0}
    3064:	3a0e030e 	bcc	383ca4 <_Min_Stack_Size+0x383aa4>
    3068:	000b3b0b 	andeq	r3, fp, fp, lsl #22
    306c:	11010000 	mrsne	r0, (UNDEF: 1)
    3070:	130e2501 	movwne	r2, #58625	; 0xe501
    3074:	1b0e030b 	blne	383ca8 <_Min_Stack_Size+0x383aa8>
    3078:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    307c:	00171006 	andseq	r1, r7, r6
    3080:	00240200 	eoreq	r0, r4, r0, lsl #4
    3084:	0b3e0b0b 	bleq	f85cb8 <_Min_Stack_Size+0xf85ab8>
    3088:	00000e03 	andeq	r0, r0, r3, lsl #28
    308c:	0b002403 	bleq	c0a0 <_Min_Stack_Size+0xbea0>
    3090:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3094:	04000008 	streq	r0, [r0], #-8
    3098:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    309c:	0b3b0b3a 	bleq	ec5d8c <_Min_Stack_Size+0xec5b8c>
    30a0:	00001349 	andeq	r1, r0, r9, asr #6
    30a4:	0b000f05 	bleq	6cc0 <_Min_Stack_Size+0x6ac0>
    30a8:	0600000b 	streq	r0, [r0], -fp
    30ac:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    30b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    30b4:	00001349 	andeq	r1, r0, r9, asr #6
    30b8:	0b011707 	bleq	48cdc <_Min_Stack_Size+0x48adc>
    30bc:	3b0b3a0b 	blcc	2d18f0 <_Min_Stack_Size+0x2d16f0>
    30c0:	0013010b 	andseq	r0, r3, fp, lsl #2
    30c4:	000d0800 	andeq	r0, sp, r0, lsl #16
    30c8:	0b3a0e03 	bleq	e868dc <_Min_Stack_Size+0xe866dc>
    30cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    30d0:	01090000 	mrseq	r0, (UNDEF: 9)
    30d4:	01134901 	tsteq	r3, r1, lsl #18
    30d8:	0a000013 	beq	312c <_Min_Stack_Size+0x2f2c>
    30dc:	13490021 	movtne	r0, #36897	; 0x9021
    30e0:	00000b2f 	andeq	r0, r0, pc, lsr #22
    30e4:	0b01130b 	bleq	47d18 <_Min_Stack_Size+0x47b18>
    30e8:	3b0b3a0b 	blcc	2d191c <_Min_Stack_Size+0x2d171c>
    30ec:	0013010b 	andseq	r0, r3, fp, lsl #2
    30f0:	000d0c00 	andeq	r0, sp, r0, lsl #24
    30f4:	0b3a0e03 	bleq	e86908 <_Min_Stack_Size+0xe86708>
    30f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    30fc:	00000b38 	andeq	r0, r0, r8, lsr fp
    3100:	0301130d 	movweq	r1, #4877	; 0x130d
    3104:	3a0b0b0e 	bcc	2c5d44 <_Min_Stack_Size+0x2c5b44>
    3108:	010b3b0b 	tsteq	fp, fp, lsl #22
    310c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    3110:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    3114:	0b3b0b3a 	bleq	ec5e04 <_Min_Stack_Size+0xec5c04>
    3118:	0b381349 	bleq	e07e44 <_Min_Stack_Size+0xe07c44>
    311c:	0f0f0000 	svceq	0x000f0000
    3120:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3124:	10000013 	andne	r0, r0, r3, lsl r0
    3128:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    312c:	0b3a0b0b 	bleq	e85d60 <_Min_Stack_Size+0xe85b60>
    3130:	1301053b 	movwne	r0, #5435	; 0x153b
    3134:	0d110000 	ldceq	0, cr0, [r1, #-0]
    3138:	3a0e0300 	bcc	383d40 <_Min_Stack_Size+0x383b40>
    313c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3140:	000b3813 	andeq	r3, fp, r3, lsl r8
    3144:	000d1200 	andeq	r1, sp, r0, lsl #4
    3148:	0b3a0803 	bleq	e8515c <_Min_Stack_Size+0xe84f5c>
    314c:	1349053b 	movtne	r0, #38203	; 0x953b
    3150:	00000b38 	andeq	r0, r0, r8, lsr fp
    3154:	27011513 	smladcs	r1, r3, r5, r1
    3158:	01134919 	tsteq	r3, r9, lsl r9
    315c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    3160:	13490005 	movtne	r0, #36869	; 0x9005
    3164:	26150000 	ldrcs	r0, [r5], -r0
    3168:	00134900 	andseq	r4, r3, r0, lsl #18
    316c:	01151600 	tsteq	r5, r0, lsl #12
    3170:	13011927 	movwne	r1, #6439	; 0x1927
    3174:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    3178:	3a0e0301 	bcc	383d84 <_Min_Stack_Size+0x383b84>
    317c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3180:	20134919 	andscs	r4, r3, r9, lsl r9
    3184:	0013010b 	andseq	r0, r3, fp, lsl #2
    3188:	00051800 	andeq	r1, r5, r0, lsl #16
    318c:	0b3a0803 	bleq	e851a0 <_Min_Stack_Size+0xe84fa0>
    3190:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3194:	34190000 	ldrcc	r0, [r9], #-0
    3198:	3a080300 	bcc	203da0 <_Min_Stack_Size+0x203ba0>
    319c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    31a0:	1a000013 	bne	31f4 <_Min_Stack_Size+0x2ff4>
    31a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    31a8:	0b3a0e03 	bleq	e869bc <_Min_Stack_Size+0xe867bc>
    31ac:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    31b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    31b4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    31b8:	00130119 	andseq	r0, r3, r9, lsl r1
    31bc:	00051b00 	andeq	r1, r5, r0, lsl #22
    31c0:	0b3a0e03 	bleq	e869d4 <_Min_Stack_Size+0xe867d4>
    31c4:	1349053b 	movtne	r0, #38203	; 0x953b
    31c8:	00001702 	andeq	r1, r0, r2, lsl #14
    31cc:	0300341c 	movweq	r3, #1052	; 0x41c
    31d0:	3b0b3a0e 	blcc	2d1a10 <_Min_Stack_Size+0x2d1810>
    31d4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    31d8:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
    31dc:	08030034 	stmdaeq	r3, {r2, r4, r5}
    31e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    31e4:	17021349 	strne	r1, [r2, -r9, asr #6]
    31e8:	1d1e0000 	ldcne	0, cr0, [lr, #-0]
    31ec:	11133101 	tstne	r3, r1, lsl #2
    31f0:	58061201 	stmdapl	r6, {r0, r9, ip}
    31f4:	0005590b 	andeq	r5, r5, fp, lsl #18
    31f8:	00051f00 	andeq	r1, r5, r0, lsl #30
    31fc:	17021331 	smladxne	r2, r1, r3, r1
    3200:	0b200000 	bleq	803208 <_Min_Stack_Size+0x803008>
    3204:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    3208:	21000006 	tstcs	r0, r6
    320c:	13310034 	teqne	r1, #52	; 0x34
    3210:	00001702 	andeq	r1, r0, r2, lsl #14
    3214:	03003422 	movweq	r3, #1058	; 0x422
    3218:	3b0b3a0e 	blcc	2d1a58 <_Min_Stack_Size+0x2d1858>
    321c:	3f13490b 	svccc	0x0013490b
    3220:	00193c19 	andseq	r3, r9, r9, lsl ip
    3224:	11010000 	mrsne	r0, (UNDEF: 1)
    3228:	130e2501 	movwne	r2, #58625	; 0xe501
    322c:	1b0e030b 	blne	383e60 <_Min_Stack_Size+0x383c60>
    3230:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    3234:	00171006 	andseq	r1, r7, r6
    3238:	00240200 	eoreq	r0, r4, r0, lsl #4
    323c:	0b3e0b0b 	bleq	f85e70 <_Min_Stack_Size+0xf85c70>
    3240:	00000e03 	andeq	r0, r0, r3, lsl #28
    3244:	0b002403 	bleq	c258 <_Min_Stack_Size+0xc058>
    3248:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    324c:	04000008 	streq	r0, [r0], #-8
    3250:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3254:	0b3b0b3a 	bleq	ec5f44 <_Min_Stack_Size+0xec5d44>
    3258:	00001349 	andeq	r1, r0, r9, asr #6
    325c:	0b000f05 	bleq	6e78 <_Min_Stack_Size+0x6c78>
    3260:	0600000b 	streq	r0, [r0], -fp
    3264:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3268:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    326c:	00001349 	andeq	r1, r0, r9, asr #6
    3270:	0b011707 	bleq	48e94 <_Min_Stack_Size+0x48c94>
    3274:	3b0b3a0b 	blcc	2d1aa8 <_Min_Stack_Size+0x2d18a8>
    3278:	0013010b 	andseq	r0, r3, fp, lsl #2
    327c:	000d0800 	andeq	r0, sp, r0, lsl #16
    3280:	0b3a0e03 	bleq	e86a94 <_Min_Stack_Size+0xe86894>
    3284:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3288:	01090000 	mrseq	r0, (UNDEF: 9)
    328c:	01134901 	tsteq	r3, r1, lsl #18
    3290:	0a000013 	beq	32e4 <_Min_Stack_Size+0x30e4>
    3294:	13490021 	movtne	r0, #36897	; 0x9021
    3298:	00000b2f 	andeq	r0, r0, pc, lsr #22
    329c:	0b01130b 	bleq	47ed0 <_Min_Stack_Size+0x47cd0>
    32a0:	3b0b3a0b 	blcc	2d1ad4 <_Min_Stack_Size+0x2d18d4>
    32a4:	0013010b 	andseq	r0, r3, fp, lsl #2
    32a8:	000d0c00 	andeq	r0, sp, r0, lsl #24
    32ac:	0b3a0e03 	bleq	e86ac0 <_Min_Stack_Size+0xe868c0>
    32b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    32b4:	00000b38 	andeq	r0, r0, r8, lsr fp
    32b8:	0301130d 	movweq	r1, #4877	; 0x130d
    32bc:	3a0b0b0e 	bcc	2c5efc <_Min_Stack_Size+0x2c5cfc>
    32c0:	010b3b0b 	tsteq	fp, fp, lsl #22
    32c4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    32c8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    32cc:	0b3b0b3a 	bleq	ec5fbc <_Min_Stack_Size+0xec5dbc>
    32d0:	0b381349 	bleq	e07ffc <_Min_Stack_Size+0xe07dfc>
    32d4:	0f0f0000 	svceq	0x000f0000
    32d8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    32dc:	10000013 	andne	r0, r0, r3, lsl r0
    32e0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    32e4:	0b3a0b0b 	bleq	e85f18 <_Min_Stack_Size+0xe85d18>
    32e8:	1301053b 	movwne	r0, #5435	; 0x153b
    32ec:	0d110000 	ldceq	0, cr0, [r1, #-0]
    32f0:	3a0e0300 	bcc	383ef8 <_Min_Stack_Size+0x383cf8>
    32f4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    32f8:	000b3813 	andeq	r3, fp, r3, lsl r8
    32fc:	000d1200 	andeq	r1, sp, r0, lsl #4
    3300:	0b3a0803 	bleq	e85314 <_Min_Stack_Size+0xe85114>
    3304:	1349053b 	movtne	r0, #38203	; 0x953b
    3308:	00000b38 	andeq	r0, r0, r8, lsr fp
    330c:	27011513 	smladcs	r1, r3, r5, r1
    3310:	01134919 	tsteq	r3, r9, lsl r9
    3314:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    3318:	13490005 	movtne	r0, #36869	; 0x9005
    331c:	26150000 	ldrcs	r0, [r5], -r0
    3320:	00134900 	andseq	r4, r3, r0, lsl #18
    3324:	01151600 	tsteq	r5, r0, lsl #12
    3328:	13011927 	movwne	r1, #6439	; 0x1927
    332c:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    3330:	3a0e0301 	bcc	383f3c <_Min_Stack_Size+0x383d3c>
    3334:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3338:	20134919 	andscs	r4, r3, r9, lsl r9
    333c:	0013010b 	andseq	r0, r3, fp, lsl #2
    3340:	00051800 	andeq	r1, r5, r0, lsl #16
    3344:	0b3a0e03 	bleq	e86b58 <_Min_Stack_Size+0xe86958>
    3348:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    334c:	05190000 	ldreq	r0, [r9, #-0]
    3350:	3a080300 	bcc	203f58 <_Min_Stack_Size+0x203d58>
    3354:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3358:	1a000013 	bne	33ac <_Min_Stack_Size+0x31ac>
    335c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    3360:	0b3b0b3a 	bleq	ec6050 <_Min_Stack_Size+0xec5e50>
    3364:	00001349 	andeq	r1, r0, r9, asr #6
    3368:	0300341b 	movweq	r3, #1051	; 0x41b
    336c:	3b0b3a0e 	blcc	2d1bac <_Min_Stack_Size+0x2d19ac>
    3370:	0013490b 	andseq	r4, r3, fp, lsl #18
    3374:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
    3378:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    337c:	0b3b0b3a 	bleq	ec606c <_Min_Stack_Size+0xec5e6c>
    3380:	13491927 	movtne	r1, #39207	; 0x9927
    3384:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3388:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    338c:	00130119 	andseq	r0, r3, r9, lsl r1
    3390:	00051d00 	andeq	r1, r5, r0, lsl #26
    3394:	0b3a0e03 	bleq	e86ba8 <_Min_Stack_Size+0xe869a8>
    3398:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    339c:	00001702 	andeq	r1, r0, r2, lsl #14
    33a0:	0300051e 	movweq	r0, #1310	; 0x51e
    33a4:	3b0b3a08 	blcc	2d1bcc <_Min_Stack_Size+0x2d19cc>
    33a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    33ac:	1f000017 	svcne	0x00000017
    33b0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    33b4:	0b3b0b3a 	bleq	ec60a4 <_Min_Stack_Size+0xec5ea4>
    33b8:	17021349 	strne	r1, [r2, -r9, asr #6]
    33bc:	34200000 	strtcc	r0, [r0], #-0
    33c0:	3a0e0300 	bcc	383fc8 <_Min_Stack_Size+0x383dc8>
    33c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    33c8:	00170213 	andseq	r0, r7, r3, lsl r2
    33cc:	010b2100 	mrseq	r2, (UNDEF: 27)
    33d0:	13011755 	movwne	r1, #5973	; 0x1755
    33d4:	34220000 	strtcc	r0, [r2], #-0
    33d8:	3a080300 	bcc	203fe0 <_Min_Stack_Size+0x203de0>
    33dc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    33e0:	00170213 	andseq	r0, r7, r3, lsl r2
    33e4:	011d2300 	tsteq	sp, r0, lsl #6
    33e8:	01521331 	cmpeq	r2, r1, lsr r3
    33ec:	0b581755 	bleq	1609148 <_Min_Stack_Size+0x1608f48>
    33f0:	00000559 	andeq	r0, r0, r9, asr r5
    33f4:	31000524 	tstcc	r0, r4, lsr #10
    33f8:	00170213 	andseq	r0, r7, r3, lsl r2
    33fc:	010b2500 	tsteq	fp, r0, lsl #10
    3400:	00001755 	andeq	r1, r0, r5, asr r7
    3404:	31003426 	tstcc	r0, r6, lsr #8
    3408:	00170213 	andseq	r0, r7, r3, lsl r2
    340c:	82892700 	addhi	r2, r9, #0, 14
    3410:	01110101 	tsteq	r1, r1, lsl #2
    3414:	13011331 	movwne	r1, #4913	; 0x1331
    3418:	8a280000 	bhi	a03420 <_Min_Stack_Size+0xa03220>
    341c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    3420:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    3424:	89290000 	stmdbhi	r9!, {}	; <UNPREDICTABLE>
    3428:	11010182 	smlabbne	r1, r2, r1, r0
    342c:	00133101 	andseq	r3, r3, r1, lsl #2
    3430:	00342a00 	eorseq	r2, r4, r0, lsl #20
    3434:	0b3a0e03 	bleq	e86c48 <_Min_Stack_Size+0xe86a48>
    3438:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    343c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    3440:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
    3444:	3c193f00 	ldccc	15, cr3, [r9], {-0}
    3448:	030e6e19 	movweq	r6, #60953	; 0xee19
    344c:	3b0b3a0e 	blcc	2d1c8c <_Min_Stack_Size+0x2d1a8c>
    3450:	0000000b 	andeq	r0, r0, fp
    3454:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3458:	030b130e 	movweq	r1, #45838	; 0xb30e
    345c:	110e1b0e 	tstne	lr, lr, lsl #22
    3460:	10061201 	andne	r1, r6, r1, lsl #4
    3464:	02000017 	andeq	r0, r0, #23
    3468:	0b0b0024 	bleq	2c3500 <_Min_Stack_Size+0x2c3300>
    346c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3470:	16030000 	strne	r0, [r3], -r0
    3474:	3a0e0300 	bcc	38407c <_Min_Stack_Size+0x383e7c>
    3478:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    347c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    3480:	0b0b0024 	bleq	2c3518 <_Min_Stack_Size+0x2c3318>
    3484:	0e030b3e 	vmoveq.16	d3[0], r0
    3488:	16050000 	strne	r0, [r5], -r0
    348c:	3a0e0300 	bcc	384094 <_Min_Stack_Size+0x383e94>
    3490:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3494:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3498:	0b0b0117 	bleq	2c38fc <_Min_Stack_Size+0x2c36fc>
    349c:	0b3b0b3a 	bleq	ec618c <_Min_Stack_Size+0xec5f8c>
    34a0:	00001301 	andeq	r1, r0, r1, lsl #6
    34a4:	03000d07 	movweq	r0, #3335	; 0xd07
    34a8:	3b0b3a0e 	blcc	2d1ce8 <_Min_Stack_Size+0x2d1ae8>
    34ac:	0013490b 	andseq	r4, r3, fp, lsl #18
    34b0:	01010800 	tsteq	r1, r0, lsl #16
    34b4:	13011349 	movwne	r1, #4937	; 0x1349
    34b8:	21090000 	mrscs	r0, (UNDEF: 9)
    34bc:	2f134900 	svccs	0x00134900
    34c0:	0a00000b 	beq	34f4 <_Min_Stack_Size+0x32f4>
    34c4:	0b0b0113 	bleq	2c3918 <_Min_Stack_Size+0x2c3718>
    34c8:	0b3b0b3a 	bleq	ec61b8 <_Min_Stack_Size+0xec5fb8>
    34cc:	00001301 	andeq	r1, r0, r1, lsl #6
    34d0:	03000d0b 	movweq	r0, #3339	; 0xd0b
    34d4:	3b0b3a0e 	blcc	2d1d14 <_Min_Stack_Size+0x2d1b14>
    34d8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    34dc:	0c00000b 	stceq	0, cr0, [r0], {11}
    34e0:	0b0b000f 	bleq	2c3524 <_Min_Stack_Size+0x2c3324>
    34e4:	0f0d0000 	svceq	0x000d0000
    34e8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    34ec:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    34f0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    34f4:	0b3a0b0b 	bleq	e86128 <_Min_Stack_Size+0xe85f28>
    34f8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    34fc:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 3504 <_Min_Stack_Size+0x3304>
    3500:	3a080300 	bcc	204108 <_Min_Stack_Size+0x203f08>
    3504:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3508:	000b3813 	andeq	r3, fp, r3, lsl r8
    350c:	01131000 	tsteq	r3, r0
    3510:	0b0b0e03 	bleq	2c6d24 <_Min_Stack_Size+0x2c6b24>
    3514:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3518:	00001301 	andeq	r1, r0, r1, lsl #6
    351c:	03000d11 	movweq	r0, #3345	; 0xd11
    3520:	3b0b3a0e 	blcc	2d1d60 <_Min_Stack_Size+0x2d1b60>
    3524:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    3528:	1200000b 	andne	r0, r0, #11
    352c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    3530:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3534:	0b381349 	bleq	e08260 <_Min_Stack_Size+0xe08060>
    3538:	15130000 	ldrne	r0, [r3, #-0]
    353c:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    3540:	00130113 	andseq	r0, r3, r3, lsl r1
    3544:	00051400 	andeq	r1, r5, r0, lsl #8
    3548:	00001349 	andeq	r1, r0, r9, asr #6
    354c:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    3550:	16000013 			; <UNDEFINED> instruction: 0x16000013
    3554:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    3558:	00001301 	andeq	r1, r0, r1, lsl #6
    355c:	03000d17 	movweq	r0, #3351	; 0xd17
    3560:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
    3564:	0019340b 	andseq	r3, r9, fp, lsl #8
    3568:	00261800 	eoreq	r1, r6, r0, lsl #16
    356c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    3570:	03193f01 	tsteq	r9, #1, 30
    3574:	3b0b3a0e 	blcc	2d1db4 <_Min_Stack_Size+0x2d1bb4>
    3578:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    357c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3580:	97184006 	ldrls	r4, [r8, -r6]
    3584:	13011942 	movwne	r1, #6466	; 0x1942
    3588:	051a0000 	ldreq	r0, [sl, #-0]
    358c:	3a080300 	bcc	204194 <_Min_Stack_Size+0x203f94>
    3590:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3594:	00170213 	andseq	r0, r7, r3, lsl r2
    3598:	00341b00 	eorseq	r1, r4, r0, lsl #22
    359c:	0b3a0803 	bleq	e855b0 <_Min_Stack_Size+0xe853b0>
    35a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    35a4:	00001702 	andeq	r1, r0, r2, lsl #14
    35a8:	03000a1c 	movweq	r0, #2588	; 0xa1c
    35ac:	3b0b3a08 	blcc	2d1dd4 <_Min_Stack_Size+0x2d1bd4>
    35b0:	0001110b 	andeq	r1, r1, fp, lsl #2
    35b4:	010b1d00 	tsteq	fp, r0, lsl #26
    35b8:	13011755 	movwne	r1, #5973	; 0x1755
    35bc:	341e0000 	ldrcc	r0, [lr], #-0
    35c0:	3a0e0300 	bcc	3841c8 <_Min_Stack_Size+0x383fc8>
    35c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    35c8:	00180213 	andseq	r0, r8, r3, lsl r2
    35cc:	00341f00 	eorseq	r1, r4, r0, lsl #30
    35d0:	0b3a0e03 	bleq	e86de4 <_Min_Stack_Size+0xe86be4>
    35d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    35d8:	00001702 	andeq	r1, r0, r2, lsl #14
    35dc:	01828920 	orreq	r8, r2, r0, lsr #18
    35e0:	31011101 	tstcc	r1, r1, lsl #2
    35e4:	00130113 	andseq	r0, r3, r3, lsl r1
    35e8:	828a2100 	addhi	r2, sl, #0, 2
    35ec:	18020001 	stmdane	r2, {r0}
    35f0:	00184291 	mulseq	r8, r1, r2
    35f4:	82892200 	addhi	r2, r9, #0, 4
    35f8:	01110101 	tsteq	r1, r1, lsl #2
    35fc:	00001331 	andeq	r1, r0, r1, lsr r3
    3600:	03000a23 	movweq	r0, #2595	; 0xa23
    3604:	3b0b3a08 	blcc	2d1e2c <_Min_Stack_Size+0x2d1c2c>
    3608:	00011105 	andeq	r1, r1, r5, lsl #2
    360c:	00342400 	eorseq	r2, r4, r0, lsl #8
    3610:	0b3a0803 	bleq	e85624 <_Min_Stack_Size+0xe85424>
    3614:	1349053b 	movtne	r0, #38203	; 0x953b
    3618:	00001702 	andeq	r1, r0, r2, lsl #14
    361c:	03003425 	movweq	r3, #1061	; 0x425
    3620:	3b0b3a0e 	blcc	2d1e60 <_Min_Stack_Size+0x2d1c60>
    3624:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3628:	26000017 			; <UNDEFINED> instruction: 0x26000017
    362c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3630:	0b3a0e03 	bleq	e86e44 <_Min_Stack_Size+0xe86c44>
    3634:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3638:	01111349 	tsteq	r1, r9, asr #6
    363c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3640:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3644:	27000013 	smladcs	r0, r3, r0, r0
    3648:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    364c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3650:	17021349 	strne	r1, [r2, -r9, asr #6]
    3654:	05280000 	streq	r0, [r8, #-0]!
    3658:	3a080300 	bcc	204260 <_Min_Stack_Size+0x204060>
    365c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3660:	00170213 	andseq	r0, r7, r3, lsl r2
    3664:	00052900 	andeq	r2, r5, r0, lsl #18
    3668:	0b3a0803 	bleq	e8567c <_Min_Stack_Size+0xe8547c>
    366c:	1349053b 	movtne	r0, #38203	; 0x953b
    3670:	00001802 	andeq	r1, r0, r2, lsl #16
    3674:	0300342a 	movweq	r3, #1066	; 0x42a
    3678:	3b0b3a0e 	blcc	2d1eb8 <_Min_Stack_Size+0x2d1cb8>
    367c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3680:	2b000018 	blcs	36e8 <_Min_Stack_Size+0x34e8>
    3684:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    3688:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    368c:	00000111 	andeq	r0, r0, r1, lsl r1
    3690:	3f002e2c 	svccc	0x00002e2c
    3694:	6e193c19 	mrcvs	12, 0, r3, cr9, cr9, {0}
    3698:	3a0e030e 	bcc	3842d8 <_Min_Stack_Size+0x3840d8>
    369c:	00053b0b 	andeq	r3, r5, fp, lsl #22
    36a0:	002e2d00 	eoreq	r2, lr, r0, lsl #26
    36a4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    36a8:	0e030e6e 	cdpeq	14, 0, cr0, cr3, cr14, {3}
    36ac:	0b3b0b3a 	bleq	ec639c <_Min_Stack_Size+0xec619c>
    36b0:	01000000 	mrseq	r0, (UNDEF: 0)
    36b4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    36b8:	0e030b13 	vmoveq.32	d3[0], r0
    36bc:	01110e1b 	tsteq	r1, fp, lsl lr
    36c0:	17100612 			; <UNDEFINED> instruction: 0x17100612
    36c4:	24020000 	strcs	r0, [r2], #-0
    36c8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    36cc:	0008030b 	andeq	r0, r8, fp, lsl #6
    36d0:	00160300 	andseq	r0, r6, r0, lsl #6
    36d4:	0b3a0e03 	bleq	e86ee8 <_Min_Stack_Size+0xe86ce8>
    36d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    36dc:	24040000 	strcs	r0, [r4], #-0
    36e0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    36e4:	000e030b 	andeq	r0, lr, fp, lsl #6
    36e8:	00160500 	andseq	r0, r6, r0, lsl #10
    36ec:	0b3a0e03 	bleq	e86f00 <_Min_Stack_Size+0xe86d00>
    36f0:	1349053b 	movtne	r0, #38203	; 0x953b
    36f4:	17060000 	strne	r0, [r6, -r0]
    36f8:	3a0b0b01 	bcc	2c6304 <_Min_Stack_Size+0x2c6104>
    36fc:	010b3b0b 	tsteq	fp, fp, lsl #22
    3700:	07000013 	smladeq	r0, r3, r0, r0
    3704:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3708:	0b3b0b3a 	bleq	ec63f8 <_Min_Stack_Size+0xec61f8>
    370c:	00001349 	andeq	r1, r0, r9, asr #6
    3710:	49010108 	stmdbmi	r1, {r3, r8}
    3714:	00130113 	andseq	r0, r3, r3, lsl r1
    3718:	00210900 	eoreq	r0, r1, r0, lsl #18
    371c:	0b2f1349 	bleq	bc8448 <_Min_Stack_Size+0xbc8248>
    3720:	130a0000 	movwne	r0, #40960	; 0xa000
    3724:	3a0b0b01 	bcc	2c6330 <_Min_Stack_Size+0x2c6130>
    3728:	010b3b0b 	tsteq	fp, fp, lsl #22
    372c:	0b000013 	bleq	3780 <_Min_Stack_Size+0x3580>
    3730:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3734:	0b3b0b3a 	bleq	ec6424 <_Min_Stack_Size+0xec6224>
    3738:	0b381349 	bleq	e08464 <_Min_Stack_Size+0xe08264>
    373c:	0f0c0000 	svceq	0x000c0000
    3740:	000b0b00 	andeq	r0, fp, r0, lsl #22
    3744:	000f0d00 	andeq	r0, pc, r0, lsl #26
    3748:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    374c:	130e0000 	movwne	r0, #57344	; 0xe000
    3750:	0b0e0301 	bleq	38435c <_Min_Stack_Size+0x38415c>
    3754:	3b0b3a0b 	blcc	2d1f88 <_Min_Stack_Size+0x2d1d88>
    3758:	0013010b 	andseq	r0, r3, fp, lsl #2
    375c:	000d0f00 	andeq	r0, sp, r0, lsl #30
    3760:	0b3a0803 	bleq	e85774 <_Min_Stack_Size+0xe85574>
    3764:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3768:	00000b38 	andeq	r0, r0, r8, lsr fp
    376c:	03011310 	movweq	r1, #4880	; 0x1310
    3770:	3a0b0b0e 	bcc	2c63b0 <_Min_Stack_Size+0x2c61b0>
    3774:	01053b0b 	tsteq	r5, fp, lsl #22
    3778:	11000013 	tstne	r0, r3, lsl r0
    377c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3780:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3784:	0b381349 	bleq	e084b0 <_Min_Stack_Size+0xe082b0>
    3788:	0d120000 	ldceq	0, cr0, [r2, #-0]
    378c:	3a080300 	bcc	204394 <_Min_Stack_Size+0x204194>
    3790:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3794:	000b3813 	andeq	r3, fp, r3, lsl r8
    3798:	01151300 	tsteq	r5, r0, lsl #6
    379c:	13491927 	movtne	r1, #39207	; 0x9927
    37a0:	00001301 	andeq	r1, r0, r1, lsl #6
    37a4:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    37a8:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    37ac:	13490026 	movtne	r0, #36902	; 0x9026
    37b0:	15160000 	ldrne	r0, [r6, #-0]
    37b4:	01192701 	tsteq	r9, r1, lsl #14
    37b8:	17000013 	smladne	r0, r3, r0, r0
    37bc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    37c0:	0b381349 	bleq	e084ec <_Min_Stack_Size+0xe082ec>
    37c4:	00001934 	andeq	r1, r0, r4, lsr r9
    37c8:	3f012e18 	svccc	0x00012e18
    37cc:	3a0e0319 	bcc	384438 <_Min_Stack_Size+0x384238>
    37d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    37d4:	11134919 	tstne	r3, r9, lsl r9
    37d8:	40061201 	andmi	r1, r6, r1, lsl #4
    37dc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    37e0:	00001301 	andeq	r1, r0, r1, lsl #6
    37e4:	03000519 	movweq	r0, #1305	; 0x519
    37e8:	3b0b3a0e 	blcc	2d2028 <_Min_Stack_Size+0x2d1e28>
    37ec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    37f0:	1a000017 	bne	3854 <_Min_Stack_Size+0x3654>
    37f4:	08030005 	stmdaeq	r3, {r0, r2}
    37f8:	0b3b0b3a 	bleq	ec64e8 <_Min_Stack_Size+0xec62e8>
    37fc:	17021349 	strne	r1, [r2, -r9, asr #6]
    3800:	341b0000 	ldrcc	r0, [fp], #-0
    3804:	3a080300 	bcc	20440c <_Min_Stack_Size+0x20420c>
    3808:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    380c:	00170213 	andseq	r0, r7, r3, lsl r2
    3810:	000a1c00 	andeq	r1, sl, r0, lsl #24
    3814:	0b3a0e03 	bleq	e87028 <_Min_Stack_Size+0xe86e28>
    3818:	00000b3b 	andeq	r0, r0, fp, lsr fp
    381c:	55010b1d 	strpl	r0, [r1, #-2845]	; 0xfffff4e3
    3820:	00130117 	andseq	r0, r3, r7, lsl r1
    3824:	00341e00 	eorseq	r1, r4, r0, lsl #28
    3828:	0b3a0e03 	bleq	e8703c <_Min_Stack_Size+0xe86e3c>
    382c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3830:	00001702 	andeq	r1, r0, r2, lsl #14
    3834:	0182891f 	orreq	r8, r2, pc, lsl r9
    3838:	00011101 	andeq	r1, r1, r1, lsl #2
    383c:	828a2000 	addhi	r2, sl, #0
    3840:	18020001 	stmdane	r2, {r0}
    3844:	00184291 	mulseq	r8, r1, r2
    3848:	00342100 	eorseq	r2, r4, r0, lsl #2
    384c:	0b3a0e03 	bleq	e87060 <_Min_Stack_Size+0xe86e60>
    3850:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3854:	00001802 	andeq	r1, r0, r2, lsl #16
    3858:	03000a22 	movweq	r0, #2594	; 0xa22
    385c:	3b0b3a0e 	blcc	2d209c <_Min_Stack_Size+0x2d1e9c>
    3860:	0001110b 	andeq	r1, r1, fp, lsl #2
    3864:	000a2300 	andeq	r2, sl, r0, lsl #6
    3868:	0b3a0803 	bleq	e8587c <_Min_Stack_Size+0xe8567c>
    386c:	01110b3b 	tsteq	r1, fp, lsr fp
    3870:	89240000 	stmdbhi	r4!, {}	; <UNPREDICTABLE>
    3874:	11010182 	smlabbne	r1, r2, r1, r0
    3878:	00133101 	andseq	r3, r3, r1, lsl #2
    387c:	82892500 	addhi	r2, r9, #0, 10
    3880:	01110101 	tsteq	r1, r1, lsl #2
    3884:	13011331 	movwne	r1, #4913	; 0x1331
    3888:	89260000 	stmdbhi	r6!, {}	; <UNPREDICTABLE>
    388c:	11010182 	smlabbne	r1, r2, r1, r0
    3890:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    3894:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
    3898:	3c193f00 	ldccc	15, cr3, [r9], {-0}
    389c:	030e6e19 	movweq	r6, #60953	; 0xee19
    38a0:	3b0b3a0e 	blcc	2d20e0 <_Min_Stack_Size+0x2d1ee0>
    38a4:	0000000b 	andeq	r0, r0, fp
    38a8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    38ac:	030b130e 	movweq	r1, #45838	; 0xb30e
    38b0:	110e1b0e 	tstne	lr, lr, lsl #22
    38b4:	10061201 	andne	r1, r6, r1, lsl #4
    38b8:	02000017 	andeq	r0, r0, #23
    38bc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    38c0:	0b3b0b3a 	bleq	ec65b0 <_Min_Stack_Size+0xec63b0>
    38c4:	00001349 	andeq	r1, r0, r9, asr #6
    38c8:	0b002403 	bleq	c8dc <_Min_Stack_Size+0xc6dc>
    38cc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    38d0:	04000008 	streq	r0, [r0], #-8
    38d4:	0b0b0024 	bleq	2c396c <_Min_Stack_Size+0x2c376c>
    38d8:	0e030b3e 	vmoveq.16	d3[0], r0
    38dc:	16050000 	strne	r0, [r5], -r0
    38e0:	3a0e0300 	bcc	3844e8 <_Min_Stack_Size+0x3842e8>
    38e4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    38e8:	06000013 			; <UNDEFINED> instruction: 0x06000013
    38ec:	0b0b0117 	bleq	2c3d50 <_Min_Stack_Size+0x2c3b50>
    38f0:	0b3b0b3a 	bleq	ec65e0 <_Min_Stack_Size+0xec63e0>
    38f4:	00001301 	andeq	r1, r0, r1, lsl #6
    38f8:	03000d07 	movweq	r0, #3335	; 0xd07
    38fc:	3b0b3a0e 	blcc	2d213c <_Min_Stack_Size+0x2d1f3c>
    3900:	0013490b 	andseq	r4, r3, fp, lsl #18
    3904:	01010800 	tsteq	r1, r0, lsl #16
    3908:	13011349 	movwne	r1, #4937	; 0x1349
    390c:	21090000 	mrscs	r0, (UNDEF: 9)
    3910:	2f134900 	svccs	0x00134900
    3914:	0a00000b 	beq	3948 <_Min_Stack_Size+0x3748>
    3918:	0b0b0113 	bleq	2c3d6c <_Min_Stack_Size+0x2c3b6c>
    391c:	0b3b0b3a 	bleq	ec660c <_Min_Stack_Size+0xec640c>
    3920:	00001301 	andeq	r1, r0, r1, lsl #6
    3924:	03000d0b 	movweq	r0, #3339	; 0xd0b
    3928:	3b0b3a0e 	blcc	2d2168 <_Min_Stack_Size+0x2d1f68>
    392c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    3930:	0c00000b 	stceq	0, cr0, [r0], {11}
    3934:	0b0b000f 	bleq	2c3978 <_Min_Stack_Size+0x2c3778>
    3938:	0f0d0000 	svceq	0x000d0000
    393c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3940:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    3944:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    3948:	0b3a0b0b 	bleq	e8657c <_Min_Stack_Size+0xe8637c>
    394c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    3950:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 3958 <_Min_Stack_Size+0x3758>
    3954:	3a080300 	bcc	20455c <_Min_Stack_Size+0x20435c>
    3958:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    395c:	000b3813 	andeq	r3, fp, r3, lsl r8
    3960:	01131000 	tsteq	r3, r0
    3964:	0b0b0e03 	bleq	2c7178 <_Min_Stack_Size+0x2c6f78>
    3968:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    396c:	00001301 	andeq	r1, r0, r1, lsl #6
    3970:	03000d11 	movweq	r0, #3345	; 0xd11
    3974:	3b0b3a0e 	blcc	2d21b4 <_Min_Stack_Size+0x2d1fb4>
    3978:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    397c:	1200000b 	andne	r0, r0, #11
    3980:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    3984:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3988:	0b381349 	bleq	e086b4 <_Min_Stack_Size+0xe084b4>
    398c:	15130000 	ldrne	r0, [r3, #-0]
    3990:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    3994:	00130113 	andseq	r0, r3, r3, lsl r1
    3998:	00051400 	andeq	r1, r5, r0, lsl #8
    399c:	00001349 	andeq	r1, r0, r9, asr #6
    39a0:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    39a4:	16000013 			; <UNDEFINED> instruction: 0x16000013
    39a8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    39ac:	00001301 	andeq	r1, r0, r1, lsl #6
    39b0:	3f012e17 	svccc	0x00012e17
    39b4:	3a0e0319 	bcc	384620 <_Min_Stack_Size+0x384420>
    39b8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    39bc:	11134919 	tstne	r3, r9, lsl r9
    39c0:	40061201 	andmi	r1, r6, r1, lsl #4
    39c4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    39c8:	00001301 	andeq	r1, r0, r1, lsl #6
    39cc:	03000518 	movweq	r0, #1304	; 0x518
    39d0:	3b0b3a08 	blcc	2d21f8 <_Min_Stack_Size+0x2d1ff8>
    39d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    39d8:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    39dc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    39e0:	0b3b0b3a 	bleq	ec66d0 <_Min_Stack_Size+0xec64d0>
    39e4:	17021349 	strne	r1, [r2, -r9, asr #6]
    39e8:	341a0000 	ldrcc	r0, [sl], #-0
    39ec:	3a080300 	bcc	2045f4 <_Min_Stack_Size+0x2043f4>
    39f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    39f4:	00180213 	andseq	r0, r8, r3, lsl r2
    39f8:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
    39fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3a00:	0b3b0b3a 	bleq	ec66f0 <_Min_Stack_Size+0xec64f0>
    3a04:	13491927 	movtne	r1, #39207	; 0x9927
    3a08:	1301193c 	movwne	r1, #6460	; 0x193c
    3a0c:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
    3a10:	11010182 	smlabbne	r1, r2, r1, r0
    3a14:	00133101 	andseq	r3, r3, r1, lsl #2
    3a18:	828a1d00 	addhi	r1, sl, #0, 26
    3a1c:	18020001 	stmdane	r2, {r0}
    3a20:	00184291 	mulseq	r8, r1, r2
    3a24:	00341e00 	eorseq	r1, r4, r0, lsl #28
    3a28:	0b3a0e03 	bleq	e8723c <_Min_Stack_Size+0xe8703c>
    3a2c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3a30:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    3a34:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    3a38:	3c193f00 	ldccc	15, cr3, [r9], {-0}
    3a3c:	030e6e19 	movweq	r6, #60953	; 0xee19
    3a40:	3b0b3a0e 	blcc	2d2280 <_Min_Stack_Size+0x2d2080>
    3a44:	0000000b 	andeq	r0, r0, fp
    3a48:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3a4c:	030b130e 	movweq	r1, #45838	; 0xb30e
    3a50:	110e1b0e 	tstne	lr, lr, lsl #22
    3a54:	10061201 	andne	r1, r6, r1, lsl #4
    3a58:	02000017 	andeq	r0, r0, #23
    3a5c:	0b0b0024 	bleq	2c3af4 <_Min_Stack_Size+0x2c38f4>
    3a60:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3a64:	16030000 	strne	r0, [r3], -r0
    3a68:	3a0e0300 	bcc	384670 <_Min_Stack_Size+0x384470>
    3a6c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3a70:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    3a74:	0b0b0024 	bleq	2c3b0c <_Min_Stack_Size+0x2c390c>
    3a78:	0e030b3e 	vmoveq.16	d3[0], r0
    3a7c:	0f050000 	svceq	0x00050000
    3a80:	000b0b00 	andeq	r0, fp, r0, lsl #22
    3a84:	012e0600 			; <UNDEFINED> instruction: 0x012e0600
    3a88:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3a8c:	0b3b0b3a 	bleq	ec677c <_Min_Stack_Size+0xec657c>
    3a90:	13491927 	movtne	r1, #39207	; 0x9927
    3a94:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3a98:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3a9c:	00130119 	andseq	r0, r3, r9, lsl r1
    3aa0:	00050700 	andeq	r0, r5, r0, lsl #14
    3aa4:	0b3a0e03 	bleq	e872b8 <_Min_Stack_Size+0xe870b8>
    3aa8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3aac:	00001702 	andeq	r1, r0, r2, lsl #14
    3ab0:	03000508 	movweq	r0, #1288	; 0x508
    3ab4:	3b0b3a08 	blcc	2d22dc <_Min_Stack_Size+0x2d20dc>
    3ab8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3abc:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    3ac0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    3ac4:	0b3b0b3a 	bleq	ec67b4 <_Min_Stack_Size+0xec65b4>
    3ac8:	17021349 	strne	r1, [r2, -r9, asr #6]
    3acc:	340a0000 	strcc	r0, [sl], #-0
    3ad0:	3a0e0300 	bcc	3846d8 <_Min_Stack_Size+0x3844d8>
    3ad4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3ad8:	00170213 	andseq	r0, r7, r3, lsl r2
    3adc:	000f0b00 	andeq	r0, pc, r0, lsl #22
    3ae0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    3ae4:	260c0000 	strcs	r0, [ip], -r0
    3ae8:	0d000000 	stceq	0, cr0, [r0, #-0]
    3aec:	13490026 	movtne	r0, #36902	; 0x9026
    3af0:	01000000 	mrseq	r0, (UNDEF: 0)
    3af4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    3af8:	0e030b13 	vmoveq.32	d3[0], r0
    3afc:	01110e1b 	tsteq	r1, fp, lsl lr
    3b00:	17100612 			; <UNDEFINED> instruction: 0x17100612
    3b04:	24020000 	strcs	r0, [r2], #-0
    3b08:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3b0c:	0008030b 	andeq	r0, r8, fp, lsl #6
    3b10:	00160300 	andseq	r0, r6, r0, lsl #6
    3b14:	0b3a0e03 	bleq	e87328 <_Min_Stack_Size+0xe87128>
    3b18:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3b1c:	24040000 	strcs	r0, [r4], #-0
    3b20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3b24:	000e030b 	andeq	r0, lr, fp, lsl #6
    3b28:	000f0500 	andeq	r0, pc, r0, lsl #10
    3b2c:	00000b0b 	andeq	r0, r0, fp, lsl #22
    3b30:	0b000f06 	bleq	7750 <_Min_Stack_Size+0x7550>
    3b34:	0013490b 	andseq	r4, r3, fp, lsl #18
    3b38:	00260700 	eoreq	r0, r6, r0, lsl #14
    3b3c:	00001349 	andeq	r1, r0, r9, asr #6
    3b40:	3f012e08 	svccc	0x00012e08
    3b44:	3a0e0319 	bcc	3847b0 <_Min_Stack_Size+0x3845b0>
    3b48:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3b4c:	11134919 	tstne	r3, r9, lsl r9
    3b50:	40061201 	andmi	r1, r6, r1, lsl #4
    3b54:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3b58:	00001301 	andeq	r1, r0, r1, lsl #6
    3b5c:	03000509 	movweq	r0, #1289	; 0x509
    3b60:	3b0b3a0e 	blcc	2d23a0 <_Min_Stack_Size+0x2d21a0>
    3b64:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3b68:	0a000018 	beq	3bd0 <_Min_Stack_Size+0x39d0>
    3b6c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3b70:	0b3b0b3a 	bleq	ec6860 <_Min_Stack_Size+0xec6660>
    3b74:	17021349 	strne	r1, [r2, -r9, asr #6]
    3b78:	340b0000 	strcc	r0, [fp], #-0
    3b7c:	3a080300 	bcc	204784 <_Min_Stack_Size+0x204584>
    3b80:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3b84:	00170213 	andseq	r0, r7, r3, lsl r2
    3b88:	00340c00 	eorseq	r0, r4, r0, lsl #24
    3b8c:	0b3a0e03 	bleq	e873a0 <_Min_Stack_Size+0xe871a0>
    3b90:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3b94:	00001702 	andeq	r1, r0, r2, lsl #14
    3b98:	0000260d 	andeq	r2, r0, sp, lsl #12
    3b9c:	11010000 	mrsne	r0, (UNDEF: 1)
    3ba0:	130e2501 	movwne	r2, #58625	; 0xe501
    3ba4:	1b0e030b 	blne	3847d8 <_Min_Stack_Size+0x3845d8>
    3ba8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    3bac:	00171006 	andseq	r1, r7, r6
    3bb0:	00240200 	eoreq	r0, r4, r0, lsl #4
    3bb4:	0b3e0b0b 	bleq	f867e8 <_Min_Stack_Size+0xf865e8>
    3bb8:	00000e03 	andeq	r0, r0, r3, lsl #28
    3bbc:	0b002403 	bleq	cbd0 <_Min_Stack_Size+0xc9d0>
    3bc0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3bc4:	04000008 	streq	r0, [r0], #-8
    3bc8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3bcc:	0b3b0b3a 	bleq	ec68bc <_Min_Stack_Size+0xec66bc>
    3bd0:	00001349 	andeq	r1, r0, r9, asr #6
    3bd4:	0b000f05 	bleq	77f0 <_Min_Stack_Size+0x75f0>
    3bd8:	0600000b 	streq	r0, [r0], -fp
    3bdc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3be0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3be4:	00001349 	andeq	r1, r0, r9, asr #6
    3be8:	0b011707 	bleq	4980c <_Min_Stack_Size+0x4960c>
    3bec:	3b0b3a0b 	blcc	2d2420 <_Min_Stack_Size+0x2d2220>
    3bf0:	0013010b 	andseq	r0, r3, fp, lsl #2
    3bf4:	000d0800 	andeq	r0, sp, r0, lsl #16
    3bf8:	0b3a0e03 	bleq	e8740c <_Min_Stack_Size+0xe8720c>
    3bfc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3c00:	01090000 	mrseq	r0, (UNDEF: 9)
    3c04:	01134901 	tsteq	r3, r1, lsl #18
    3c08:	0a000013 	beq	3c5c <_Min_Stack_Size+0x3a5c>
    3c0c:	13490021 	movtne	r0, #36897	; 0x9021
    3c10:	00000b2f 	andeq	r0, r0, pc, lsr #22
    3c14:	0b01130b 	bleq	48848 <_Min_Stack_Size+0x48648>
    3c18:	3b0b3a0b 	blcc	2d244c <_Min_Stack_Size+0x2d224c>
    3c1c:	0013010b 	andseq	r0, r3, fp, lsl #2
    3c20:	000d0c00 	andeq	r0, sp, r0, lsl #24
    3c24:	0b3a0e03 	bleq	e87438 <_Min_Stack_Size+0xe87238>
    3c28:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3c2c:	00000b38 	andeq	r0, r0, r8, lsr fp
    3c30:	0301130d 	movweq	r1, #4877	; 0x130d
    3c34:	3a0b0b0e 	bcc	2c6874 <_Min_Stack_Size+0x2c6674>
    3c38:	010b3b0b 	tsteq	fp, fp, lsl #22
    3c3c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    3c40:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    3c44:	0b3b0b3a 	bleq	ec6934 <_Min_Stack_Size+0xec6734>
    3c48:	0b381349 	bleq	e08974 <_Min_Stack_Size+0xe08774>
    3c4c:	0f0f0000 	svceq	0x000f0000
    3c50:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3c54:	10000013 	andne	r0, r0, r3, lsl r0
    3c58:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    3c5c:	0b3a0b0b 	bleq	e86890 <_Min_Stack_Size+0xe86690>
    3c60:	1301053b 	movwne	r0, #5435	; 0x153b
    3c64:	0d110000 	ldceq	0, cr0, [r1, #-0]
    3c68:	3a0e0300 	bcc	384870 <_Min_Stack_Size+0x384670>
    3c6c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3c70:	000b3813 	andeq	r3, fp, r3, lsl r8
    3c74:	000d1200 	andeq	r1, sp, r0, lsl #4
    3c78:	0b3a0803 	bleq	e85c8c <_Min_Stack_Size+0xe85a8c>
    3c7c:	1349053b 	movtne	r0, #38203	; 0x953b
    3c80:	00000b38 	andeq	r0, r0, r8, lsr fp
    3c84:	27011513 	smladcs	r1, r3, r5, r1
    3c88:	01134919 	tsteq	r3, r9, lsl r9
    3c8c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    3c90:	13490005 	movtne	r0, #36869	; 0x9005
    3c94:	26150000 	ldrcs	r0, [r5], -r0
    3c98:	00134900 	andseq	r4, r3, r0, lsl #18
    3c9c:	01151600 	tsteq	r5, r0, lsl #12
    3ca0:	13011927 	movwne	r1, #6439	; 0x1927
    3ca4:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    3ca8:	03193f01 	tsteq	r9, #1, 30
    3cac:	3b0b3a0e 	blcc	2d24ec <_Min_Stack_Size+0x2d22ec>
    3cb0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3cb4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3cb8:	97184006 	ldrls	r4, [r8, -r6]
    3cbc:	13011942 	movwne	r1, #6466	; 0x1942
    3cc0:	05180000 	ldreq	r0, [r8, #-0]
    3cc4:	3a0e0300 	bcc	3848cc <_Min_Stack_Size+0x3846cc>
    3cc8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3ccc:	00170213 	andseq	r0, r7, r3, lsl r2
    3cd0:	00051900 	andeq	r1, r5, r0, lsl #18
    3cd4:	0b3a0803 	bleq	e85ce8 <_Min_Stack_Size+0xe85ae8>
    3cd8:	1349053b 	movtne	r0, #38203	; 0x953b
    3cdc:	00001702 	andeq	r1, r0, r2, lsl #14
    3ce0:	0300341a 	movweq	r3, #1050	; 0x41a
    3ce4:	3b0b3a08 	blcc	2d250c <_Min_Stack_Size+0x2d230c>
    3ce8:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3cec:	1b000017 	blne	3d50 <_Min_Stack_Size+0x3b50>
    3cf0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3cf4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3cf8:	00001349 	andeq	r1, r0, r9, asr #6
    3cfc:	0182891c 	orreq	r8, r2, ip, lsl r9
    3d00:	31011101 	tstcc	r1, r1, lsl #2
    3d04:	00130113 	andseq	r0, r3, r3, lsl r1
    3d08:	828a1d00 	addhi	r1, sl, #0, 26
    3d0c:	18020001 	stmdane	r2, {r0}
    3d10:	00184291 	mulseq	r8, r1, r2
    3d14:	82891e00 	addhi	r1, r9, #0, 28
    3d18:	01110001 	tsteq	r1, r1
    3d1c:	00001331 	andeq	r1, r0, r1, lsr r3
    3d20:	0182891f 	orreq	r8, r2, pc, lsl r9
    3d24:	95011101 	strls	r1, [r1, #-257]	; 0xfffffeff
    3d28:	13311942 	teqne	r1, #1081344	; 0x108000
    3d2c:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    3d30:	3c193f00 	ldccc	15, cr3, [r9], {-0}
    3d34:	030e6e19 	movweq	r6, #60953	; 0xee19
    3d38:	3b0b3a0e 	blcc	2d2578 <_Min_Stack_Size+0x2d2378>
    3d3c:	0000000b 	andeq	r0, r0, fp
    3d40:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3d44:	030b130e 	movweq	r1, #45838	; 0xb30e
    3d48:	110e1b0e 	tstne	lr, lr, lsl #22
    3d4c:	10061201 	andne	r1, r6, r1, lsl #4
    3d50:	02000017 	andeq	r0, r0, #23
    3d54:	0b0b0024 	bleq	2c3dec <_Min_Stack_Size+0x2c3bec>
    3d58:	0e030b3e 	vmoveq.16	d3[0], r0
    3d5c:	24030000 	strcs	r0, [r3], #-0
    3d60:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3d64:	0008030b 	andeq	r0, r8, fp, lsl #6
    3d68:	00160400 	andseq	r0, r6, r0, lsl #8
    3d6c:	0b3a0e03 	bleq	e87580 <_Min_Stack_Size+0xe87380>
    3d70:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3d74:	16050000 	strne	r0, [r5], -r0
    3d78:	3a0e0300 	bcc	384980 <_Min_Stack_Size+0x384780>
    3d7c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3d80:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3d84:	0b0b0117 	bleq	2c41e8 <_Min_Stack_Size+0x2c3fe8>
    3d88:	0b3b0b3a 	bleq	ec6a78 <_Min_Stack_Size+0xec6878>
    3d8c:	00001301 	andeq	r1, r0, r1, lsl #6
    3d90:	03000d07 	movweq	r0, #3335	; 0xd07
    3d94:	3b0b3a0e 	blcc	2d25d4 <_Min_Stack_Size+0x2d23d4>
    3d98:	0013490b 	andseq	r4, r3, fp, lsl #18
    3d9c:	01010800 	tsteq	r1, r0, lsl #16
    3da0:	13011349 	movwne	r1, #4937	; 0x1349
    3da4:	21090000 	mrscs	r0, (UNDEF: 9)
    3da8:	2f134900 	svccs	0x00134900
    3dac:	0a00000b 	beq	3de0 <_Min_Stack_Size+0x3be0>
    3db0:	0b0b0113 	bleq	2c4204 <_Min_Stack_Size+0x2c4004>
    3db4:	0b3b0b3a 	bleq	ec6aa4 <_Min_Stack_Size+0xec68a4>
    3db8:	00001301 	andeq	r1, r0, r1, lsl #6
    3dbc:	03000d0b 	movweq	r0, #3339	; 0xd0b
    3dc0:	3b0b3a0e 	blcc	2d2600 <_Min_Stack_Size+0x2d2400>
    3dc4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    3dc8:	0c00000b 	stceq	0, cr0, [r0], {11}
    3dcc:	0b0b000f 	bleq	2c3e10 <_Min_Stack_Size+0x2c3c10>
    3dd0:	0f0d0000 	svceq	0x000d0000
    3dd4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3dd8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    3ddc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    3de0:	0b3a0b0b 	bleq	e86a14 <_Min_Stack_Size+0xe86814>
    3de4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    3de8:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 3df0 <_Min_Stack_Size+0x3bf0>
    3dec:	3a080300 	bcc	2049f4 <_Min_Stack_Size+0x2047f4>
    3df0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3df4:	000b3813 	andeq	r3, fp, r3, lsl r8
    3df8:	01131000 	tsteq	r3, r0
    3dfc:	0b0b0e03 	bleq	2c7610 <_Min_Stack_Size+0x2c7410>
    3e00:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3e04:	00001301 	andeq	r1, r0, r1, lsl #6
    3e08:	03000d11 	movweq	r0, #3345	; 0xd11
    3e0c:	3b0b3a0e 	blcc	2d264c <_Min_Stack_Size+0x2d244c>
    3e10:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    3e14:	1200000b 	andne	r0, r0, #11
    3e18:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    3e1c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3e20:	0b381349 	bleq	e08b4c <_Min_Stack_Size+0xe0894c>
    3e24:	15130000 	ldrne	r0, [r3, #-0]
    3e28:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    3e2c:	00130113 	andseq	r0, r3, r3, lsl r1
    3e30:	00051400 	andeq	r1, r5, r0, lsl #8
    3e34:	00001349 	andeq	r1, r0, r9, asr #6
    3e38:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    3e3c:	16000013 			; <UNDEFINED> instruction: 0x16000013
    3e40:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    3e44:	00001301 	andeq	r1, r0, r1, lsl #6
    3e48:	3f012e17 	svccc	0x00012e17
    3e4c:	3a0e0319 	bcc	384ab8 <_Min_Stack_Size+0x3848b8>
    3e50:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3e54:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3e58:	97184006 	ldrls	r4, [r8, -r6]
    3e5c:	13011942 	movwne	r1, #6466	; 0x1942
    3e60:	05180000 	ldreq	r0, [r8, #-0]
    3e64:	3a080300 	bcc	204a6c <_Min_Stack_Size+0x20486c>
    3e68:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3e6c:	00170213 	andseq	r0, r7, r3, lsl r2
    3e70:	00051900 	andeq	r1, r5, r0, lsl #18
    3e74:	0b3a0e03 	bleq	e87688 <_Min_Stack_Size+0xe87488>
    3e78:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3e7c:	00001702 	andeq	r1, r0, r2, lsl #14
    3e80:	0182891a 	orreq	r8, r2, sl, lsl r9
    3e84:	31011101 	tstcc	r1, r1, lsl #2
    3e88:	00130113 	andseq	r0, r3, r3, lsl r1
    3e8c:	828a1b00 	addhi	r1, sl, #0, 22
    3e90:	18020001 	stmdane	r2, {r0}
    3e94:	00184291 	mulseq	r8, r1, r2
    3e98:	82891c00 	addhi	r1, r9, #0, 24
    3e9c:	01110101 	tsteq	r1, r1, lsl #2
    3ea0:	31194295 			; <UNDEFINED> instruction: 0x31194295
    3ea4:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    3ea8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3eac:	0b3a0e03 	bleq	e876c0 <_Min_Stack_Size+0xe874c0>
    3eb0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3eb4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3eb8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3ebc:	00130119 	andseq	r0, r3, r9, lsl r1
    3ec0:	010b1e00 	tsteq	fp, r0, lsl #28
    3ec4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3ec8:	00001301 	andeq	r1, r0, r1, lsl #6
    3ecc:	0300341f 	movweq	r3, #1055	; 0x41f
    3ed0:	3b0b3a08 	blcc	2d26f8 <_Min_Stack_Size+0x2d24f8>
    3ed4:	0013490b 	andseq	r4, r3, fp, lsl #18
    3ed8:	00342000 	eorseq	r2, r4, r0
    3edc:	0b3a0e03 	bleq	e876f0 <_Min_Stack_Size+0xe874f0>
    3ee0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3ee4:	00001702 	andeq	r1, r0, r2, lsl #14
    3ee8:	01828921 	orreq	r8, r2, r1, lsr #18
    3eec:	31011101 	tstcc	r1, r1, lsl #2
    3ef0:	22000013 	andcs	r0, r0, #19
    3ef4:	01018289 	smlabbeq	r1, r9, r2, r8
    3ef8:	13010111 	movwne	r0, #4369	; 0x1111
    3efc:	34230000 	strtcc	r0, [r3], #-0
    3f00:	3a0e0300 	bcc	384b08 <_Min_Stack_Size+0x384908>
    3f04:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3f08:	3c193f13 	ldccc	15, cr3, [r9], {19}
    3f0c:	24000019 	strcs	r0, [r0], #-25	; 0xffffffe7
    3f10:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3f14:	0b3b0b3a 	bleq	ec6c04 <_Min_Stack_Size+0xec6a04>
    3f18:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    3f1c:	00001802 	andeq	r1, r0, r2, lsl #16
    3f20:	3f002e25 	svccc	0x00002e25
    3f24:	6e193c19 	mrcvs	12, 0, r3, cr9, cr9, {0}
    3f28:	3a0e030e 	bcc	384b68 <_Min_Stack_Size+0x384968>
    3f2c:	00053b0b 	andeq	r3, r5, fp, lsl #22
    3f30:	11010000 	mrsne	r0, (UNDEF: 1)
    3f34:	130e2501 	movwne	r2, #58625	; 0xe501
    3f38:	1b0e030b 	blne	384b6c <_Min_Stack_Size+0x38496c>
    3f3c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    3f40:	00171006 	andseq	r1, r7, r6
    3f44:	00240200 	eoreq	r0, r4, r0, lsl #4
    3f48:	0b3e0b0b 	bleq	f86b7c <_Min_Stack_Size+0xf8697c>
    3f4c:	00000e03 	andeq	r0, r0, r3, lsl #28
    3f50:	0b002403 	bleq	cf64 <_Min_Stack_Size+0xcd64>
    3f54:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3f58:	04000008 	streq	r0, [r0], #-8
    3f5c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3f60:	0b3b0b3a 	bleq	ec6c50 <_Min_Stack_Size+0xec6a50>
    3f64:	00001349 	andeq	r1, r0, r9, asr #6
    3f68:	0b000f05 	bleq	7b84 <_Min_Stack_Size+0x7984>
    3f6c:	0600000b 	streq	r0, [r0], -fp
    3f70:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3f74:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3f78:	00001349 	andeq	r1, r0, r9, asr #6
    3f7c:	0b011707 	bleq	49ba0 <_Min_Stack_Size+0x499a0>
    3f80:	3b0b3a0b 	blcc	2d27b4 <_Min_Stack_Size+0x2d25b4>
    3f84:	0013010b 	andseq	r0, r3, fp, lsl #2
    3f88:	000d0800 	andeq	r0, sp, r0, lsl #16
    3f8c:	0b3a0e03 	bleq	e877a0 <_Min_Stack_Size+0xe875a0>
    3f90:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3f94:	01090000 	mrseq	r0, (UNDEF: 9)
    3f98:	01134901 	tsteq	r3, r1, lsl #18
    3f9c:	0a000013 	beq	3ff0 <_Min_Stack_Size+0x3df0>
    3fa0:	13490021 	movtne	r0, #36897	; 0x9021
    3fa4:	00000b2f 	andeq	r0, r0, pc, lsr #22
    3fa8:	0b01130b 	bleq	48bdc <_Min_Stack_Size+0x489dc>
    3fac:	3b0b3a0b 	blcc	2d27e0 <_Min_Stack_Size+0x2d25e0>
    3fb0:	0013010b 	andseq	r0, r3, fp, lsl #2
    3fb4:	000d0c00 	andeq	r0, sp, r0, lsl #24
    3fb8:	0b3a0e03 	bleq	e877cc <_Min_Stack_Size+0xe875cc>
    3fbc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3fc0:	00000b38 	andeq	r0, r0, r8, lsr fp
    3fc4:	0301130d 	movweq	r1, #4877	; 0x130d
    3fc8:	3a0b0b0e 	bcc	2c6c08 <_Min_Stack_Size+0x2c6a08>
    3fcc:	010b3b0b 	tsteq	fp, fp, lsl #22
    3fd0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    3fd4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    3fd8:	0b3b0b3a 	bleq	ec6cc8 <_Min_Stack_Size+0xec6ac8>
    3fdc:	0b381349 	bleq	e08d08 <_Min_Stack_Size+0xe08b08>
    3fe0:	0f0f0000 	svceq	0x000f0000
    3fe4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3fe8:	10000013 	andne	r0, r0, r3, lsl r0
    3fec:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    3ff0:	0b3a0b0b 	bleq	e86c24 <_Min_Stack_Size+0xe86a24>
    3ff4:	1301053b 	movwne	r0, #5435	; 0x153b
    3ff8:	0d110000 	ldceq	0, cr0, [r1, #-0]
    3ffc:	3a0e0300 	bcc	384c04 <_Min_Stack_Size+0x384a04>
    4000:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4004:	000b3813 	andeq	r3, fp, r3, lsl r8
    4008:	000d1200 	andeq	r1, sp, r0, lsl #4
    400c:	0b3a0803 	bleq	e86020 <_Min_Stack_Size+0xe85e20>
    4010:	1349053b 	movtne	r0, #38203	; 0x953b
    4014:	00000b38 	andeq	r0, r0, r8, lsr fp
    4018:	27011513 	smladcs	r1, r3, r5, r1
    401c:	01134919 	tsteq	r3, r9, lsl r9
    4020:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    4024:	13490005 	movtne	r0, #36869	; 0x9005
    4028:	26150000 	ldrcs	r0, [r5], -r0
    402c:	00134900 	andseq	r4, r3, r0, lsl #18
    4030:	01151600 	tsteq	r5, r0, lsl #12
    4034:	13011927 	movwne	r1, #6439	; 0x1927
    4038:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    403c:	03193f01 	tsteq	r9, #1, 30
    4040:	3b0b3a0e 	blcc	2d2880 <_Min_Stack_Size+0x2d2680>
    4044:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    4048:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    404c:	97184006 	ldrls	r4, [r8, -r6]
    4050:	13011942 	movwne	r1, #6466	; 0x1942
    4054:	05180000 	ldreq	r0, [r8, #-0]
    4058:	3a0e0300 	bcc	384c60 <_Min_Stack_Size+0x384a60>
    405c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4060:	00170213 	andseq	r0, r7, r3, lsl r2
    4064:	00051900 	andeq	r1, r5, r0, lsl #18
    4068:	0b3a0803 	bleq	e8607c <_Min_Stack_Size+0xe85e7c>
    406c:	1349053b 	movtne	r0, #38203	; 0x953b
    4070:	00001702 	andeq	r1, r0, r2, lsl #14
    4074:	0300341a 	movweq	r3, #1050	; 0x41a
    4078:	3b0b3a08 	blcc	2d28a0 <_Min_Stack_Size+0x2d26a0>
    407c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    4080:	1b000017 	blne	40e4 <_Min_Stack_Size+0x3ee4>
    4084:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    4088:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    408c:	17021349 	strne	r1, [r2, -r9, asr #6]
    4090:	01000000 	mrseq	r0, (UNDEF: 0)
    4094:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    4098:	0e030b13 	vmoveq.32	d3[0], r0
    409c:	01110e1b 	tsteq	r1, fp, lsl lr
    40a0:	17100612 			; <UNDEFINED> instruction: 0x17100612
    40a4:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    40a8:	03193f01 	tsteq	r9, #1, 30
    40ac:	3b0b3a0e 	blcc	2d28ec <_Min_Stack_Size+0x2d26ec>
    40b0:	1113490b 	tstne	r3, fp, lsl #18
    40b4:	40061201 	andmi	r1, r6, r1, lsl #4
    40b8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    40bc:	00001301 	andeq	r1, r0, r1, lsl #6
    40c0:	03000503 	movweq	r0, #1283	; 0x503
    40c4:	3b0b3a0e 	blcc	2d2904 <_Min_Stack_Size+0x2d2704>
    40c8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    40cc:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    40d0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    40d4:	0b3b0b3a 	bleq	ec6dc4 <_Min_Stack_Size+0xec6bc4>
    40d8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    40dc:	0000193c 	andeq	r1, r0, ip, lsr r9
    40e0:	03003405 	movweq	r3, #1029	; 0x405
    40e4:	3b0b3a0e 	blcc	2d2924 <_Min_Stack_Size+0x2d2724>
    40e8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    40ec:	06000018 			; <UNDEFINED> instruction: 0x06000018
    40f0:	0b0b000f 	bleq	2c4134 <_Min_Stack_Size+0x2c3f34>
    40f4:	24070000 	strcs	r0, [r7], #-0
    40f8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    40fc:	0008030b 	andeq	r0, r8, fp, lsl #6
    4100:	00240800 	eoreq	r0, r4, r0, lsl #16
    4104:	0b3e0b0b 	bleq	f86d38 <_Min_Stack_Size+0xf86b38>
    4108:	00000e03 	andeq	r0, r0, r3, lsl #28
    410c:	0b000f09 	bleq	7d38 <_Min_Stack_Size+0x7b38>
    4110:	0013490b 	andseq	r4, r3, fp, lsl #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
{
       0:	00000034 	andeq	r0, r0, r4, lsr r0
}
       4:	00000002 	andeq	r0, r0, r2
       8:	00040000 	andeq	r0, r4, r0
       c:	00000000 	andeq	r0, r0, r0
      10:	080012e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip}
      14:	00000068 	andeq	r0, r0, r8, rrx
      18:	00000000 	andeq	r0, r0, r0
    bitstatus = SET;
      1c:	000000d8 	ldrdeq	r0, [r0], -r8
    bitstatus = RESET;
      20:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
  return bitstatus;
      24:	0000000c 	andeq	r0, r0, ip
}
      28:	08001358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip}
      2c:	00000100 	andeq	r0, r0, r0, lsl #2
	...
      38:	00000054 	andeq	r0, r0, r4, asr r0
      3c:	04470002 	strbeq	r0, [r7], #-2
      40:	00040000 	andeq	r0, r4, r0
      44:	00000000 	andeq	r0, r0, r0
      48:	08001458 	stmdaeq	r0, {r3, r4, r6, sl, ip}
      4c:	0000007c 	andeq	r0, r0, ip, ror r0
      50:	080014d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, ip}
      54:	00000064 	andeq	r0, r0, r4, rrx
      58:	08001538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip}
        Driver_OLED_Send_START(OLED_DATA);
      5c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
        for(x=x0;x<x1;x++){ 
      60:	080015e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip}
            I2C_SendData(OLED_HARDWARE, BMP[j++]);
      64:	0000009c 	muleq	r0, ip, r0
      68:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
      6c:	00000088 	andeq	r0, r0, r8, lsl #1
      70:	0800170c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip}
      74:	000001ac 	andeq	r0, r0, ip, lsr #3
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);    	
      78:	080018b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, ip}
      7c:	00000084 	andeq	r0, r0, r4, lsl #1
      80:	00000000 	andeq	r0, r0, r0
      84:	000000c8 	andeq	r0, r0, r8, asr #1
	...
        for(x=x0;x<x1;x++){ 
      90:	00000074 	andeq	r0, r0, r4, ror r0
      94:	09a30002 	stmibeq	r3!, {r1}
        _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
      98:	00040000 	andeq	r0, r4, r0
      9c:	00000000 	andeq	r0, r0, r0
      a0:	0800193c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip}
      a4:	00000208 	andeq	r0, r0, r8, lsl #4
	for(y=y0;y<y1;y++){
      a8:	08001b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip}
      ac:	000000b8 	strheq	r0, [r0], -r8
      b0:	00000000 	andeq	r0, r0, r0
}
      b4:	000000ca 	andeq	r0, r0, sl, asr #1
      b8:	08001bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip}
      bc:	0000016c 	andeq	r0, r0, ip, ror #2
      c0:	00000000 	andeq	r0, r0, r0
      c4:	000000ec 	andeq	r0, r0, ip, ror #1
      c8:	08001d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip}
      cc:	000001f4 	strdeq	r0, [r0], -r4
      d0:	08001f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip}
      d4:	0000016c 	andeq	r0, r0, ip, ror #2
      d8:	080020c8 	stmdaeq	r0, {r3, r6, r7, sp}
      dc:	00000208 	andeq	r0, r0, r8, lsl #4
      e0:	080022d0 	stmdaeq	r0, {r4, r6, r7, r9, sp}
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      e4:	000002fc 	strdeq	r0, [r0], -ip
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      e8:	080025cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, sp}
      ec:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
      f0:	00000000 	andeq	r0, r0, r0
				prvUnlockQueue( pxQueue );
      f4:	00000204 	andeq	r0, r0, r4, lsl #4
      f8:	00000000 	andeq	r0, r0, r0
				if( xTaskResumeAll() == pdFALSE )
      fc:	00000220 	andeq	r0, r0, r0, lsr #4
	...
					portYIELD_WITHIN_API();
     108:	0000011c 	andeq	r0, r0, ip, lsl r1
     10c:	0fbf0002 	svceq	0x00bf0002
     110:	00040000 	andeq	r0, r4, r0
     114:	00000000 	andeq	r0, r0, r0
				prvUnlockQueue( pxQueue );
     118:	0800277c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, sp}
				( void ) xTaskResumeAll();
     11c:	0000000c 	andeq	r0, r0, ip
     120:	08002788 	stmdaeq	r0, {r3, r7, r8, r9, sl, sp}
			prvUnlockQueue( pxQueue );
     124:	0000000c 	andeq	r0, r0, ip
			( void ) xTaskResumeAll();
     128:	08002794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, sp}
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     12c:	0000000c 	andeq	r0, r0, ip
     130:	080027a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, sp}
     134:	0000000c 	andeq	r0, r0, ip
     138:	080027ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, sp}
}
     13c:	00000018 	andeq	r0, r0, r8, lsl r0
     140:	080027c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, sp}
     144:	0000001c 	andeq	r0, r0, ip, lsl r0
     148:	080027e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, sp}
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     14c:	0000000e 	andeq	r0, r0, lr
  SPIx->I2SCFGR = tmpreg;   
     150:	080027f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, sp}
     154:	00000014 	andeq	r0, r0, r4, lsl r0
}
     158:	08002804 	stmdaeq	r0, {r2, fp, sp}
     15c:	00000048 	andeq	r0, r0, r8, asr #32
     160:	0800284c 	stmdaeq	r0, {r2, r3, r6, fp, sp}
     164:	00000048 	andeq	r0, r0, r8, asr #32
         *(uint16_t*) arg = getSn_KPALVTR(sn);
     168:	00000000 	andeq	r0, r0, r0
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     16c:	00000054 	andeq	r0, r0, r4, asr r0
     170:	08002894 	stmdaeq	r0, {r2, r4, r7, fp, sp}
     174:	00000054 	andeq	r0, r0, r4, asr r0
     178:	080028e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, sp}
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     17c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     180:	08002aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, sp}
     184:	0000007c 	andeq	r0, r0, ip, ror r0
     188:	08002b20 	stmdaeq	r0, {r5, r8, r9, fp, sp}
         *(uint8_t*) arg = getSn_SR(sn);
     18c:	00000098 	muleq	r0, r8, r0
     190:	08002bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, sp}
     194:	00000118 	andeq	r0, r0, r8, lsl r1
     198:	08002cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, sp}
     19c:	0000003c 	andeq	r0, r0, ip, lsr r0
     1a0:	08002d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, sp}
     1a4:	0000004a 	andeq	r0, r0, sl, asr #32
         if(getSn_MR(sn) == Sn_MR_TCP)
     1a8:	08002d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, sp}
     1ac:	00000036 	andeq	r0, r0, r6, lsr r0
     1b0:	08002d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, sp}
     1b4:	00000046 	andeq	r0, r0, r6, asr #32
     1b8:	08002dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, sp}
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1bc:	0000002e 	andeq	r0, r0, lr, lsr #32
     1c0:	08002e08 	stmdaeq	r0, {r3, r9, sl, fp, sp}
     1c4:	00000032 	andeq	r0, r0, r2, lsr r0
     1c8:	08002e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, sp}
         break;
     1cc:	0000004e 	andeq	r0, r0, lr, asr #32
            *(uint16_t*)arg = sock_remained_size[sn];
     1d0:	08002e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, sp}
     1d4:	00000084 	andeq	r0, r0, r4, lsl #1
     1d8:	08002f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, sp}
         CHECK_SOCKMODE(Sn_MR_TCP);
     1dc:	00000098 	muleq	r0, r8, r0
     1e0:	00000000 	andeq	r0, r0, r0
     1e4:	00000048 	andeq	r0, r0, r8, asr #32
     1e8:	08002fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp, sp}
     1ec:	00000094 	muleq	r0, r4, r0
     1f0:	0800303c 	stmdaeq	r0, {r2, r3, r4, r5, ip, sp}
     1f4:	00000080 	andeq	r0, r0, r0, lsl #1
     1f8:	080030bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, sp}
         *(uint8_t*)arg = sock_pack_info[sn];
     1fc:	00000080 	andeq	r0, r0, r0, lsl #1
     200:	0800313c 	stmdaeq	r0, {r2, r3, r4, r5, r8, ip, sp}
         break;
     204:	00000044 	andeq	r0, r0, r4, asr #32
         return SOCKERR_SOCKOPT;
     208:	08003180 	stmdaeq	r0, {r7, r8, ip, sp}
   return SOCK_OK;
     20c:	00000010 	andeq	r0, r0, r0, lsl r0
}
     210:	08003190 	stmdaeq	r0, {r4, r7, r8, ip, sp}
     214:	00000042 	andeq	r0, r0, r2, asr #32
     218:	080031d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, ip, sp}
     21c:	00000044 	andeq	r0, r0, r4, asr #32
	...
     228:	0000005c 	andeq	r0, r0, ip, asr r0
	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     22c:	1acd0002 	bne	ff34023c <BootRAM+0xe2b09dd>
     230:	00040000 	andeq	r0, r4, r0
     234:	00000000 	andeq	r0, r0, r0
     238:	08003218 	stmdaeq	r0, {r3, r4, r9, ip, sp}
     23c:	00000060 	andeq	r0, r0, r0, rrx
     240:	08003278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, sp}
     244:	0000006c 	andeq	r0, r0, ip, rrx
     248:	080032e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip, sp}
     24c:	00000088 	andeq	r0, r0, r8, lsl #1
     250:	0800336c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, ip, sp}
	memset(packet, 0, sizeof(packet));
     254:	00000090 	muleq	r0, r0, r0
     258:	080033fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, ip, sp}
     25c:	00000096 	muleq	r0, r6, r0
	memcpy(packet, fixed_header, sizeof(fixed_header));
     260:	08003494 	stmdaeq	r0, {r2, r4, r7, sl, ip, sp}
     264:	00000096 	muleq	r0, r6, r0
     268:	0800352c 	stmdaeq	r0, {r2, r3, r5, r8, sl, ip, sp}
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	000000b8 	strheq	r0, [r0], -r8
     270:	080035e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, ip, sp}
     274:	000000b8 	strheq	r0, [r0], -r8
     278:	0800369c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, sp}
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     27c:	00000090 	muleq	r0, r0, r0
	...
     288:	000000ac 	andeq	r0, r0, ip, lsr #1
     28c:	1fa90002 	svcne	0x00a90002
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     290:	00040000 	andeq	r0, r4, r0
     294:	00000000 	andeq	r0, r0, r0
     298:	0800372c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, ip, sp}
     29c:	0000000c 	andeq	r0, r0, ip
     2a0:	08003738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, sp}
		return -1;
     2a4:	00000028 	andeq	r0, r0, r8, lsr #32
     2a8:	08003760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip, sp}
	return 1;
     2ac:	00000048 	andeq	r0, r0, r8, asr #32
}
     2b0:	080037a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, ip, sp}
     2b4:	000004c8 	andeq	r0, r0, r8, asr #9
     2b8:	08003c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, ip, sp}
     2bc:	00000638 	andeq	r0, r0, r8, lsr r6
     2c0:	080042a8 	stmdaeq	r0, {r3, r5, r7, r9, lr}
     2c4:	0000043c 	andeq	r0, r0, ip, lsr r4
     2c8:	080046e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, lr}
     2cc:	0000029c 	muleq	r0, ip, r2
     2d0:	08004980 	stmdaeq	r0, {r7, r8, fp, lr}
     2d4:	0000022c 	andeq	r0, r0, ip, lsr #4
     2d8:	08004bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, lr}
     2dc:	00000110 	andeq	r0, r0, r0, lsl r1
     2e0:	08004cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, lr}
     2e4:	0000007c 	andeq	r0, r0, ip, ror r0
     2e8:	08004d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, lr}
     2ec:	00000088 	andeq	r0, r0, r8, lsl #1
     2f0:	08004dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, lr}
     2f4:	0000002c 	andeq	r0, r0, ip, lsr #32
     2f8:	08004dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, lr}
     2fc:	0000002c 	andeq	r0, r0, ip, lsr #32
     300:	08004e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, lr}
     304:	0000001c 	andeq	r0, r0, ip, lsl r0
     308:	08004e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, lr}
     30c:	0000003c 	andeq	r0, r0, ip, lsr r0
     310:	08004e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, lr}
     314:	0000003c 	andeq	r0, r0, ip, lsr r0
     318:	08004eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, lr}
     31c:	0000003c 	andeq	r0, r0, ip, lsr r0
     320:	08004ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp, lr}
     324:	0000003c 	andeq	r0, r0, ip, lsr r0
     328:	00000000 	andeq	r0, r0, r0
     32c:	00000014 	andeq	r0, r0, r4, lsl r0
	...
     338:	0000003c 	andeq	r0, r0, ip, lsr r0
     33c:	28df0002 	ldmcs	pc, {r1}^	; <UNPREDICTABLE>
     340:	00040000 	andeq	r0, r4, r0
     344:	00000000 	andeq	r0, r0, r0
     348:	08004f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, lr}
     34c:	0000002e 	andeq	r0, r0, lr, lsr #32
     350:	08004f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, lr}
     354:	0000010c 	andeq	r0, r0, ip, lsl #2
     358:	08005060 	stmdaeq	r0, {r5, r6, ip, lr}
     35c:	00000064 	andeq	r0, r0, r4, rrx
     360:	080050c4 	stmdaeq	r0, {r2, r6, r7, ip, lr}
     364:	000002f6 	strdeq	r0, [r0], -r6
     368:	080053bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, ip, lr}
     36c:	00000176 	andeq	r0, r0, r6, ror r1
	...
     378:	0000004c 	andeq	r0, r0, ip, asr #32
     37c:	2c620002 	stclcs	0, cr0, [r2], #-8
     380:	00040000 	andeq	r0, r4, r0
     384:	00000000 	andeq	r0, r0, r0
     388:	08005534 	stmdaeq	r0, {r2, r4, r5, r8, sl, ip, lr}
     38c:	00000034 	andeq	r0, r0, r4, lsr r0
     390:	08005568 	stmdaeq	r0, {r3, r5, r6, r8, sl, ip, lr}
     394:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     398:	08005724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip, lr}
     39c:	00000104 	andeq	r0, r0, r4, lsl #2
     3a0:	08005828 	stmdaeq	r0, {r3, r5, fp, ip, lr}
     3a4:	00000070 	andeq	r0, r0, r0, ror r0
     3a8:	08005898 	stmdaeq	r0, {r3, r4, r7, fp, ip, lr}
     3ac:	0000005c 	andeq	r0, r0, ip, asr r0
     3b0:	080058f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, lr}
     3b4:	00000048 	andeq	r0, r0, r8, asr #32
     3b8:	0800593c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip, lr}
     3bc:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
     3c8:	0000003c 	andeq	r0, r0, ip, lsr r0
     3cc:	30a50002 	adccc	r0, r5, r2
     3d0:	00040000 	andeq	r0, r4, r0
     3d4:	00000000 	andeq	r0, r0, r0
     3d8:	08005958 	stmdaeq	r0, {r3, r4, r6, r8, fp, ip, lr}
     3dc:	00000024 	andeq	r0, r0, r4, lsr #32
     3e0:	0800597c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, ip, lr}
     3e4:	000000c4 	andeq	r0, r0, r4, asr #1
     3e8:	00000000 	andeq	r0, r0, r0
     3ec:	0000002c 	andeq	r0, r0, ip, lsr #32
     3f0:	00000000 	andeq	r0, r0, r0
     3f4:	00000040 	andeq	r0, r0, r0, asr #32
     3f8:	00000000 	andeq	r0, r0, r0
     3fc:	00000038 	andeq	r0, r0, r8, lsr r0
	...
     408:	00000114 	andeq	r0, r0, r4, lsl r1
     40c:	35970002 	ldrcc	r0, [r7, #2]
     410:	00040000 	andeq	r0, r4, r0
	...
     41c:	0000005c 	andeq	r0, r0, ip, asr r0
     420:	00000000 	andeq	r0, r0, r0
     424:	0000005c 	andeq	r0, r0, ip, asr r0
     428:	00000000 	andeq	r0, r0, r0
     42c:	00000050 	andeq	r0, r0, r0, asr r0
     430:	00000000 	andeq	r0, r0, r0
     434:	0000003c 	andeq	r0, r0, ip, lsr r0
     438:	00000000 	andeq	r0, r0, r0
     43c:	00000020 	andeq	r0, r0, r0, lsr #32
     440:	00000000 	andeq	r0, r0, r0
     444:	0000003c 	andeq	r0, r0, ip, lsr r0
     448:	00000000 	andeq	r0, r0, r0
     44c:	00000020 	andeq	r0, r0, r0, lsr #32
     450:	00000000 	andeq	r0, r0, r0
     454:	00000038 	andeq	r0, r0, r8, lsr r0
     458:	00000000 	andeq	r0, r0, r0
     45c:	0000001c 	andeq	r0, r0, ip, lsl r0
     460:	00000000 	andeq	r0, r0, r0
     464:	00000038 	andeq	r0, r0, r8, lsr r0
     468:	00000000 	andeq	r0, r0, r0
     46c:	00000038 	andeq	r0, r0, r8, lsr r0
     470:	00000000 	andeq	r0, r0, r0
     474:	00000038 	andeq	r0, r0, r8, lsr r0
     478:	00000000 	andeq	r0, r0, r0
     47c:	0000004c 	andeq	r0, r0, ip, asr #32
     480:	00000000 	andeq	r0, r0, r0
     484:	0000001c 	andeq	r0, r0, ip, lsl r0
     488:	00000000 	andeq	r0, r0, r0
     48c:	00000038 	andeq	r0, r0, r8, lsr r0
     490:	00000000 	andeq	r0, r0, r0
     494:	00000040 	andeq	r0, r0, r0, asr #32
     498:	08005a40 	stmdaeq	r0, {r6, r9, fp, ip, lr}
     49c:	00000020 	andeq	r0, r0, r0, lsr #32
     4a0:	00000000 	andeq	r0, r0, r0
     4a4:	00000024 	andeq	r0, r0, r4, lsr #32
     4a8:	00000000 	andeq	r0, r0, r0
     4ac:	00000020 	andeq	r0, r0, r0, lsr #32
     4b0:	08005a60 	stmdaeq	r0, {r5, r6, r9, fp, ip, lr}
     4b4:	00000160 	andeq	r0, r0, r0, ror #2
     4b8:	00000000 	andeq	r0, r0, r0
     4bc:	0000003c 	andeq	r0, r0, ip, lsr r0
     4c0:	08005bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp, ip, lr}
     4c4:	0000003c 	andeq	r0, r0, ip, lsr r0
     4c8:	08005bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr}
     4cc:	0000003c 	andeq	r0, r0, ip, lsr r0
     4d0:	00000000 	andeq	r0, r0, r0
     4d4:	0000003c 	andeq	r0, r0, ip, lsr r0
     4d8:	08005c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, ip, lr}
     4dc:	0000003c 	andeq	r0, r0, ip, lsr r0
     4e0:	00000000 	andeq	r0, r0, r0
     4e4:	00000020 	andeq	r0, r0, r0, lsr #32
     4e8:	00000000 	andeq	r0, r0, r0
     4ec:	00000020 	andeq	r0, r0, r0, lsr #32
     4f0:	00000000 	andeq	r0, r0, r0
     4f4:	00000020 	andeq	r0, r0, r0, lsr #32
     4f8:	08005c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, ip, lr}
     4fc:	00000074 	andeq	r0, r0, r4, ror r0
     500:	00000000 	andeq	r0, r0, r0
     504:	0000001c 	andeq	r0, r0, ip, lsl r0
     508:	00000000 	andeq	r0, r0, r0
     50c:	00000034 	andeq	r0, r0, r4, lsr r0
     510:	00000000 	andeq	r0, r0, r0
     514:	00000020 	andeq	r0, r0, r0, lsr #32
	...
     520:	000000a4 	andeq	r0, r0, r4, lsr #1
     524:	3e240002 	cdpcc	0, 2, cr0, cr4, cr2, {0}
     528:	00040000 	andeq	r0, r4, r0
	...
     534:	000000e4 	andeq	r0, r0, r4, ror #1
     538:	00000000 	andeq	r0, r0, r0
     53c:	00000018 	andeq	r0, r0, r8, lsl r0
     540:	08005ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp, ip, lr}
     544:	00000178 	andeq	r0, r0, r8, ror r1
     548:	00000000 	andeq	r0, r0, r0
     54c:	00000026 	andeq	r0, r0, r6, lsr #32
     550:	00000000 	andeq	r0, r0, r0
     554:	00000032 	andeq	r0, r0, r2, lsr r0
     558:	00000000 	andeq	r0, r0, r0
     55c:	00000018 	andeq	r0, r0, r8, lsl r0
     560:	00000000 	andeq	r0, r0, r0
     564:	00000032 	andeq	r0, r0, r2, lsr r0
     568:	00000000 	andeq	r0, r0, r0
     56c:	00000018 	andeq	r0, r0, r8, lsl r0
     570:	08005e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip, lr}
     574:	0000001c 	andeq	r0, r0, ip, lsl r0
     578:	08005e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp, ip, lr}
     57c:	0000001c 	andeq	r0, r0, ip, lsl r0
     580:	00000000 	andeq	r0, r0, r0
     584:	0000002e 	andeq	r0, r0, lr, lsr #32
     588:	00000000 	andeq	r0, r0, r0
     58c:	0000001c 	andeq	r0, r0, ip, lsl r0
     590:	00000000 	andeq	r0, r0, r0
     594:	00000042 	andeq	r0, r0, r2, asr #32
     598:	00000000 	andeq	r0, r0, r0
     59c:	0000004c 	andeq	r0, r0, ip, asr #32
     5a0:	00000000 	andeq	r0, r0, r0
     5a4:	00000020 	andeq	r0, r0, r0, lsr #32
     5a8:	00000000 	andeq	r0, r0, r0
     5ac:	000000e0 	andeq	r0, r0, r0, ror #1
     5b0:	00000000 	andeq	r0, r0, r0
     5b4:	00000084 	andeq	r0, r0, r4, lsl #1
     5b8:	00000000 	andeq	r0, r0, r0
     5bc:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
     5c8:	000000cc 	andeq	r0, r0, ip, asr #1
     5cc:	45040002 	strmi	r0, [r4, #-2]
     5d0:	00040000 	andeq	r0, r4, r0
	...
     5dc:	00000074 	andeq	r0, r0, r4, ror r0
     5e0:	08005e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip, lr}
     5e4:	00000086 	andeq	r0, r0, r6, lsl #1
     5e8:	00000000 	andeq	r0, r0, r0
     5ec:	00000168 	andeq	r0, r0, r8, ror #2
     5f0:	00000000 	andeq	r0, r0, r0
     5f4:	00000048 	andeq	r0, r0, r8, asr #32
     5f8:	00000000 	andeq	r0, r0, r0
     5fc:	00000036 	andeq	r0, r0, r6, lsr r0
     600:	08005f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip, lr}
     604:	0000003e 	andeq	r0, r0, lr, lsr r0
     608:	00000000 	andeq	r0, r0, r0
     60c:	0000003e 	andeq	r0, r0, lr, lsr r0
     610:	00000000 	andeq	r0, r0, r0
     614:	00000060 	andeq	r0, r0, r0, rrx
     618:	00000000 	andeq	r0, r0, r0
     61c:	00000046 	andeq	r0, r0, r6, asr #32
     620:	08005f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, ip, lr}
     624:	0000001c 	andeq	r0, r0, ip, lsl r0
     628:	08005f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}
     62c:	00000018 	andeq	r0, r0, r8, lsl r0
     630:	00000000 	andeq	r0, r0, r0
     634:	00000042 	andeq	r0, r0, r2, asr #32
     638:	00000000 	andeq	r0, r0, r0
     63c:	0000003e 	andeq	r0, r0, lr, lsr r0
     640:	00000000 	andeq	r0, r0, r0
     644:	00000036 	andeq	r0, r0, r6, lsr r0
     648:	00000000 	andeq	r0, r0, r0
     64c:	00000022 	andeq	r0, r0, r2, lsr #32
     650:	00000000 	andeq	r0, r0, r0
     654:	0000003e 	andeq	r0, r0, lr, lsr r0
     658:	00000000 	andeq	r0, r0, r0
     65c:	00000030 	andeq	r0, r0, r0, lsr r0
     660:	00000000 	andeq	r0, r0, r0
     664:	00000018 	andeq	r0, r0, r8, lsl r0
     668:	00000000 	andeq	r0, r0, r0
     66c:	00000040 	andeq	r0, r0, r0, asr #32
     670:	08005f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, ip, lr}
     674:	00000036 	andeq	r0, r0, r6, lsr r0
     678:	00000000 	andeq	r0, r0, r0
     67c:	00000020 	andeq	r0, r0, r0, lsr #32
     680:	00000000 	andeq	r0, r0, r0
     684:	00000074 	andeq	r0, r0, r4, ror r0
     688:	00000000 	andeq	r0, r0, r0
     68c:	00000032 	andeq	r0, r0, r2, lsr r0
	...
     698:	000002ec 	andeq	r0, r0, ip, ror #5
     69c:	4de90002 	stclmi	0, cr0, [r9, #8]!
     6a0:	00040000 	andeq	r0, r4, r0
	...
     6ac:	0000022c 	andeq	r0, r0, ip, lsr #4
     6b0:	08005fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, ip, lr}
     6b4:	000000f8 	strdeq	r0, [r0], -r8
     6b8:	00000000 	andeq	r0, r0, r0
     6bc:	00000118 	andeq	r0, r0, r8, lsl r1
     6c0:	00000000 	andeq	r0, r0, r0
     6c4:	00000110 	andeq	r0, r0, r0, lsl r1
     6c8:	00000000 	andeq	r0, r0, r0
     6cc:	0000010c 	andeq	r0, r0, ip, lsl #2
     6d0:	00000000 	andeq	r0, r0, r0
     6d4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     6d8:	00000000 	andeq	r0, r0, r0
     6dc:	000000a8 	andeq	r0, r0, r8, lsr #1
     6e0:	00000000 	andeq	r0, r0, r0
     6e4:	000000b8 	strheq	r0, [r0], -r8
     6e8:	00000000 	andeq	r0, r0, r0
     6ec:	0000004e 	andeq	r0, r0, lr, asr #32
     6f0:	00000000 	andeq	r0, r0, r0
     6f4:	00000032 	andeq	r0, r0, r2, lsr r0
     6f8:	00000000 	andeq	r0, r0, r0
     6fc:	00000042 	andeq	r0, r0, r2, asr #32
     700:	00000000 	andeq	r0, r0, r0
     704:	00000030 	andeq	r0, r0, r0, lsr r0
     708:	00000000 	andeq	r0, r0, r0
     70c:	0000003c 	andeq	r0, r0, ip, lsr r0
     710:	080060c4 	stmdaeq	r0, {r2, r6, r7, sp, lr}
     714:	0000003e 	andeq	r0, r0, lr, lsr r0
     718:	00000000 	andeq	r0, r0, r0
     71c:	0000004a 	andeq	r0, r0, sl, asr #32
     720:	08006104 	stmdaeq	r0, {r2, r8, sp, lr}
     724:	00000046 	andeq	r0, r0, r6, asr #32
     728:	00000000 	andeq	r0, r0, r0
     72c:	0000001c 	andeq	r0, r0, ip, lsl r0
     730:	00000000 	andeq	r0, r0, r0
     734:	00000028 	andeq	r0, r0, r8, lsr #32
     738:	00000000 	andeq	r0, r0, r0
     73c:	00000046 	andeq	r0, r0, r6, asr #32
     740:	00000000 	andeq	r0, r0, r0
     744:	00000022 	andeq	r0, r0, r2, lsr #32
     748:	00000000 	andeq	r0, r0, r0
     74c:	0000002e 	andeq	r0, r0, lr, lsr #32
     750:	00000000 	andeq	r0, r0, r0
     754:	0000005c 	andeq	r0, r0, ip, asr r0
     758:	00000000 	andeq	r0, r0, r0
     75c:	0000005e 	andeq	r0, r0, lr, asr r0
     760:	00000000 	andeq	r0, r0, r0
     764:	0000003e 	andeq	r0, r0, lr, lsr r0
     768:	00000000 	andeq	r0, r0, r0
     76c:	00000052 	andeq	r0, r0, r2, asr r0
     770:	00000000 	andeq	r0, r0, r0
     774:	00000026 	andeq	r0, r0, r6, lsr #32
     778:	00000000 	andeq	r0, r0, r0
     77c:	00000036 	andeq	r0, r0, r6, lsr r0
     780:	00000000 	andeq	r0, r0, r0
     784:	00000036 	andeq	r0, r0, r6, lsr r0
     788:	00000000 	andeq	r0, r0, r0
     78c:	00000096 	muleq	r0, r6, r0
     790:	00000000 	andeq	r0, r0, r0
     794:	00000036 	andeq	r0, r0, r6, lsr r0
     798:	00000000 	andeq	r0, r0, r0
     79c:	0000003a 	andeq	r0, r0, sl, lsr r0
     7a0:	00000000 	andeq	r0, r0, r0
     7a4:	00000036 	andeq	r0, r0, r6, lsr r0
     7a8:	00000000 	andeq	r0, r0, r0
     7ac:	0000003a 	andeq	r0, r0, sl, lsr r0
     7b0:	00000000 	andeq	r0, r0, r0
     7b4:	0000003e 	andeq	r0, r0, lr, lsr r0
     7b8:	00000000 	andeq	r0, r0, r0
     7bc:	0000003e 	andeq	r0, r0, lr, lsr r0
     7c0:	00000000 	andeq	r0, r0, r0
     7c4:	0000003e 	andeq	r0, r0, lr, lsr r0
     7c8:	00000000 	andeq	r0, r0, r0
     7cc:	0000003e 	andeq	r0, r0, lr, lsr r0
     7d0:	00000000 	andeq	r0, r0, r0
     7d4:	00000036 	andeq	r0, r0, r6, lsr r0
     7d8:	00000000 	andeq	r0, r0, r0
     7dc:	0000003a 	andeq	r0, r0, sl, lsr r0
     7e0:	00000000 	andeq	r0, r0, r0
     7e4:	00000036 	andeq	r0, r0, r6, lsr r0
     7e8:	00000000 	andeq	r0, r0, r0
     7ec:	0000003a 	andeq	r0, r0, sl, lsr r0
     7f0:	00000000 	andeq	r0, r0, r0
     7f4:	00000036 	andeq	r0, r0, r6, lsr r0
     7f8:	00000000 	andeq	r0, r0, r0
     7fc:	0000003a 	andeq	r0, r0, sl, lsr r0
     800:	00000000 	andeq	r0, r0, r0
     804:	00000036 	andeq	r0, r0, r6, lsr r0
     808:	00000000 	andeq	r0, r0, r0
     80c:	0000003a 	andeq	r0, r0, sl, lsr r0
     810:	00000000 	andeq	r0, r0, r0
     814:	00000036 	andeq	r0, r0, r6, lsr r0
     818:	00000000 	andeq	r0, r0, r0
     81c:	0000003a 	andeq	r0, r0, sl, lsr r0
     820:	00000000 	andeq	r0, r0, r0
     824:	00000036 	andeq	r0, r0, r6, lsr r0
     828:	00000000 	andeq	r0, r0, r0
     82c:	0000003a 	andeq	r0, r0, sl, lsr r0
     830:	00000000 	andeq	r0, r0, r0
     834:	00000036 	andeq	r0, r0, r6, lsr r0
     838:	00000000 	andeq	r0, r0, r0
     83c:	00000036 	andeq	r0, r0, r6, lsr r0
     840:	00000000 	andeq	r0, r0, r0
     844:	0000003a 	andeq	r0, r0, sl, lsr r0
     848:	00000000 	andeq	r0, r0, r0
     84c:	0000003a 	andeq	r0, r0, sl, lsr r0
     850:	00000000 	andeq	r0, r0, r0
     854:	0000003a 	andeq	r0, r0, sl, lsr r0
     858:	00000000 	andeq	r0, r0, r0
     85c:	0000003a 	andeq	r0, r0, sl, lsr r0
     860:	00000000 	andeq	r0, r0, r0
     864:	0000003a 	andeq	r0, r0, sl, lsr r0
     868:	00000000 	andeq	r0, r0, r0
     86c:	00000054 	andeq	r0, r0, r4, asr r0
     870:	00000000 	andeq	r0, r0, r0
     874:	00000054 	andeq	r0, r0, r4, asr r0
     878:	00000000 	andeq	r0, r0, r0
     87c:	000000ac 	andeq	r0, r0, ip, lsr #1
     880:	00000000 	andeq	r0, r0, r0
     884:	0000003e 	andeq	r0, r0, lr, lsr r0
     888:	00000000 	andeq	r0, r0, r0
     88c:	0000003e 	andeq	r0, r0, lr, lsr r0
     890:	00000000 	andeq	r0, r0, r0
     894:	0000003e 	andeq	r0, r0, lr, lsr r0
     898:	00000000 	andeq	r0, r0, r0
     89c:	00000036 	andeq	r0, r0, r6, lsr r0
     8a0:	00000000 	andeq	r0, r0, r0
     8a4:	00000036 	andeq	r0, r0, r6, lsr r0
     8a8:	00000000 	andeq	r0, r0, r0
     8ac:	00000036 	andeq	r0, r0, r6, lsr r0
     8b0:	00000000 	andeq	r0, r0, r0
     8b4:	00000036 	andeq	r0, r0, r6, lsr r0
     8b8:	00000000 	andeq	r0, r0, r0
     8bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     8c0:	00000000 	andeq	r0, r0, r0
     8c4:	0000001c 	andeq	r0, r0, ip, lsl r0
     8c8:	00000000 	andeq	r0, r0, r0
     8cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     8d0:	00000000 	andeq	r0, r0, r0
     8d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     8d8:	00000000 	andeq	r0, r0, r0
     8dc:	0000001c 	andeq	r0, r0, ip, lsl r0
     8e0:	00000000 	andeq	r0, r0, r0
     8e4:	0000001e 	andeq	r0, r0, lr, lsl r0
     8e8:	00000000 	andeq	r0, r0, r0
     8ec:	00000036 	andeq	r0, r0, r6, lsr r0
     8f0:	00000000 	andeq	r0, r0, r0
     8f4:	0000003a 	andeq	r0, r0, sl, lsr r0
     8f8:	00000000 	andeq	r0, r0, r0
     8fc:	00000036 	andeq	r0, r0, r6, lsr r0
     900:	00000000 	andeq	r0, r0, r0
     904:	0000003a 	andeq	r0, r0, sl, lsr r0
     908:	00000000 	andeq	r0, r0, r0
     90c:	00000036 	andeq	r0, r0, r6, lsr r0
     910:	00000000 	andeq	r0, r0, r0
     914:	00000018 	andeq	r0, r0, r8, lsl r0
     918:	00000000 	andeq	r0, r0, r0
     91c:	00000018 	andeq	r0, r0, r8, lsl r0
     920:	00000000 	andeq	r0, r0, r0
     924:	00000018 	andeq	r0, r0, r8, lsl r0
     928:	00000000 	andeq	r0, r0, r0
     92c:	0000001a 	andeq	r0, r0, sl, lsl r0
     930:	00000000 	andeq	r0, r0, r0
     934:	00000018 	andeq	r0, r0, r8, lsl r0
     938:	00000000 	andeq	r0, r0, r0
     93c:	00000018 	andeq	r0, r0, r8, lsl r0
     940:	00000000 	andeq	r0, r0, r0
     944:	00000036 	andeq	r0, r0, r6, lsr r0
     948:	00000000 	andeq	r0, r0, r0
     94c:	00000020 	andeq	r0, r0, r0, lsr #32
     950:	0800614c 	stmdaeq	r0, {r2, r3, r6, r8, sp, lr}
     954:	00000052 	andeq	r0, r0, r2, asr r0
     958:	080061a0 	stmdaeq	r0, {r5, r7, r8, sp, lr}
     95c:	00000020 	andeq	r0, r0, r0, lsr #32
     960:	00000000 	andeq	r0, r0, r0
     964:	000000e0 	andeq	r0, r0, r0, ror #1
     968:	00000000 	andeq	r0, r0, r0
     96c:	000000f4 	strdeq	r0, [r0], -r4
     970:	00000000 	andeq	r0, r0, r0
     974:	000000ec 	andeq	r0, r0, ip, ror #1
     978:	00000000 	andeq	r0, r0, r0
     97c:	000000f8 	strdeq	r0, [r0], -r8
	...
     988:	0000011c 	andeq	r0, r0, ip, lsl r1
     98c:	6a330002 	bvs	cc099c <_Min_Stack_Size+0xcc079c>
     990:	00040000 	andeq	r0, r4, r0
     994:	00000000 	andeq	r0, r0, r0
     998:	080061c0 	stmdaeq	r0, {r6, r7, r8, sp, lr}
     99c:	00000048 	andeq	r0, r0, r8, asr #32
     9a0:	08006208 	stmdaeq	r0, {r3, r9, sp, lr}
     9a4:	00000184 	andeq	r0, r0, r4, lsl #3
     9a8:	00000000 	andeq	r0, r0, r0
     9ac:	0000003c 	andeq	r0, r0, ip, lsr r0
     9b0:	0800638c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sp, lr}
     9b4:	0000003e 	andeq	r0, r0, lr, lsr r0
     9b8:	00000000 	andeq	r0, r0, r0
     9bc:	0000003e 	andeq	r0, r0, lr, lsr r0
     9c0:	00000000 	andeq	r0, r0, r0
     9c4:	0000003e 	andeq	r0, r0, lr, lsr r0
     9c8:	080063cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sp, lr}
     9cc:	0000003e 	andeq	r0, r0, lr, lsr r0
     9d0:	00000000 	andeq	r0, r0, r0
     9d4:	0000003e 	andeq	r0, r0, lr, lsr r0
     9d8:	00000000 	andeq	r0, r0, r0
     9dc:	0000003e 	andeq	r0, r0, lr, lsr r0
     9e0:	00000000 	andeq	r0, r0, r0
     9e4:	00000042 	andeq	r0, r0, r2, asr #32
     9e8:	00000000 	andeq	r0, r0, r0
     9ec:	0000003e 	andeq	r0, r0, lr, lsr r0
     9f0:	00000000 	andeq	r0, r0, r0
     9f4:	0000003e 	andeq	r0, r0, lr, lsr r0
     9f8:	00000000 	andeq	r0, r0, r0
     9fc:	00000046 	andeq	r0, r0, r6, asr #32
     a00:	0800640c 	stmdaeq	r0, {r2, r3, sl, sp, lr}
     a04:	0000001e 	andeq	r0, r0, lr, lsl r0
     a08:	00000000 	andeq	r0, r0, r0
     a0c:	0000001a 	andeq	r0, r0, sl, lsl r0
     a10:	0800642c 	stmdaeq	r0, {r2, r3, r5, sl, sp, lr}
     a14:	0000003a 	andeq	r0, r0, sl, lsr r0
     a18:	00000000 	andeq	r0, r0, r0
     a1c:	0000002c 	andeq	r0, r0, ip, lsr #32
     a20:	00000000 	andeq	r0, r0, r0
     a24:	00000042 	andeq	r0, r0, r2, asr #32
     a28:	00000000 	andeq	r0, r0, r0
     a2c:	00000040 	andeq	r0, r0, r0, asr #32
     a30:	00000000 	andeq	r0, r0, r0
     a34:	00000040 	andeq	r0, r0, r0, asr #32
     a38:	00000000 	andeq	r0, r0, r0
     a3c:	0000003e 	andeq	r0, r0, lr, lsr r0
     a40:	00000000 	andeq	r0, r0, r0
     a44:	00000040 	andeq	r0, r0, r0, asr #32
     a48:	00000000 	andeq	r0, r0, r0
     a4c:	0000003e 	andeq	r0, r0, lr, lsr r0
     a50:	00000000 	andeq	r0, r0, r0
     a54:	0000001e 	andeq	r0, r0, lr, lsl r0
     a58:	00000000 	andeq	r0, r0, r0
     a5c:	0000003e 	andeq	r0, r0, lr, lsr r0
     a60:	08006468 	stmdaeq	r0, {r3, r5, r6, sl, sp, lr}
     a64:	0000003e 	andeq	r0, r0, lr, lsr r0
     a68:	00000000 	andeq	r0, r0, r0
     a6c:	00000040 	andeq	r0, r0, r0, asr #32
     a70:	080064a8 	stmdaeq	r0, {r3, r5, r7, sl, sp, lr}
     a74:	0000005e 	andeq	r0, r0, lr, asr r0
     a78:	00000000 	andeq	r0, r0, r0
     a7c:	00000042 	andeq	r0, r0, r2, asr #32
     a80:	08006508 	stmdaeq	r0, {r3, r8, sl, sp, lr}
     a84:	00000064 	andeq	r0, r0, r4, rrx
     a88:	00000000 	andeq	r0, r0, r0
     a8c:	0000002c 	andeq	r0, r0, ip, lsr #32
     a90:	00000000 	andeq	r0, r0, r0
     a94:	00000058 	andeq	r0, r0, r8, asr r0
     a98:	00000000 	andeq	r0, r0, r0
     a9c:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
     aa8:	00000044 	andeq	r0, r0, r4, asr #32
     aac:	75290002 	strvc	r0, [r9, #-2]!
     ab0:	00040000 	andeq	r0, r4, r0
     ab4:	00000000 	andeq	r0, r0, r0
     ab8:	0800656c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     abc:	00000020 	andeq	r0, r0, r0, lsr #32
     ac0:	0800658c 	stmdaeq	r0, {r2, r3, r7, r8, sl, sp, lr}
     ac4:	00000020 	andeq	r0, r0, r0, lsr #32
     ac8:	080065ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, sp, lr}
     acc:	00000020 	andeq	r0, r0, r0, lsr #32
     ad0:	080065cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, sp, lr}
     ad4:	00000018 	andeq	r0, r0, r8, lsl r0
     ad8:	080065e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, sp, lr}
     adc:	00000018 	andeq	r0, r0, r8, lsl r0
     ae0:	00000000 	andeq	r0, r0, r0
     ae4:	00000034 	andeq	r0, r0, r4, lsr r0
	...
     af0:	0000002c 	andeq	r0, r0, ip, lsr #32
     af4:	77210002 	strvc	r0, [r1, -r2]!
     af8:	00040000 	andeq	r0, r4, r0
	...
     b04:	00000018 	andeq	r0, r0, r8, lsl r0
     b08:	00000000 	andeq	r0, r0, r0
     b0c:	00000018 	andeq	r0, r0, r8, lsl r0
     b10:	080065fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, sp, lr}
     b14:	0000003c 	andeq	r0, r0, ip, lsr r0
	...
     b20:	0000003c 	andeq	r0, r0, ip, lsr r0
     b24:	786d0002 	stmdavc	sp!, {r1}^
     b28:	00040000 	andeq	r0, r4, r0
     b2c:	00000000 	andeq	r0, r0, r0
     b30:	08006638 	stmdaeq	r0, {r3, r4, r5, r9, sl, sp, lr}
     b34:	00000084 	andeq	r0, r0, r4, lsl #1
     b38:	080066bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, sp, lr}
     b3c:	00000048 	andeq	r0, r0, r8, asr #32
     b40:	08006704 	stmdaeq	r0, {r2, r8, r9, sl, sp, lr}
     b44:	000000c4 	andeq	r0, r0, r4, asr #1
     b48:	080067c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, sp, lr}
     b4c:	00000062 	andeq	r0, r0, r2, rrx
     b50:	0800682c 	stmdaeq	r0, {r2, r3, r5, fp, sp, lr}
     b54:	00000044 	andeq	r0, r0, r4, asr #32
	...
     b60:	00000054 	andeq	r0, r0, r4, asr r0
     b64:	822c0002 	eorhi	r0, ip, #2
     b68:	00040000 	andeq	r0, r4, r0
     b6c:	00000000 	andeq	r0, r0, r0
     b70:	08006870 	stmdaeq	r0, {r4, r5, r6, fp, sp, lr}
     b74:	0000000c 	andeq	r0, r0, ip
     b78:	0800687c 	stmdaeq	r0, {r2, r3, r4, r5, r6, fp, sp, lr}
     b7c:	00000006 	andeq	r0, r0, r6
     b80:	08006884 	stmdaeq	r0, {r2, r7, fp, sp, lr}
     b84:	00000006 	andeq	r0, r0, r6
     b88:	0800688c 	stmdaeq	r0, {r2, r3, r7, fp, sp, lr}
     b8c:	00000006 	andeq	r0, r0, r6
     b90:	08006894 	stmdaeq	r0, {r2, r4, r7, fp, sp, lr}
     b94:	00000006 	andeq	r0, r0, r6
     b98:	0800689c 	stmdaeq	r0, {r2, r3, r4, r7, fp, sp, lr}
     b9c:	0000000c 	andeq	r0, r0, ip
     ba0:	080068a8 	stmdaeq	r0, {r3, r5, r7, fp, sp, lr}
     ba4:	0000000c 	andeq	r0, r0, ip
     ba8:	080068b4 	stmdaeq	r0, {r2, r4, r5, r7, fp, sp, lr}
     bac:	00000064 	andeq	r0, r0, r4, rrx
	...
     bb8:	0000007c 	andeq	r0, r0, ip, ror r0
     bbc:	85e30002 	strbhi	r0, [r3, #2]!
     bc0:	00040000 	andeq	r0, r4, r0
     bc4:	00000000 	andeq	r0, r0, r0
     bc8:	08006918 	stmdaeq	r0, {r3, r4, r8, fp, sp, lr}
     bcc:	00000014 	andeq	r0, r0, r4, lsl r0
     bd0:	0800692c 	stmdaeq	r0, {r2, r3, r5, r8, fp, sp, lr}
     bd4:	00000014 	andeq	r0, r0, r4, lsl r0
     bd8:	08006940 	stmdaeq	r0, {r6, r8, fp, sp, lr}
     bdc:	00000034 	andeq	r0, r0, r4, lsr r0
     be0:	08006974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp, sp, lr}
     be4:	00000030 	andeq	r0, r0, r0, lsr r0
     be8:	080069a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, sp, lr}
     bec:	0000005c 	andeq	r0, r0, ip, asr r0
     bf0:	08006a00 	stmdaeq	r0, {r9, fp, sp, lr}
     bf4:	0000004c 	andeq	r0, r0, ip, asr #32
     bf8:	08006a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp, sp, lr}
     bfc:	000000e4 	andeq	r0, r0, r4, ror #1
     c00:	08006b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, sp, lr}
     c04:	000001d8 	ldrdeq	r0, [r0], -r8
     c08:	08006d08 	stmdaeq	r0, {r3, r8, sl, fp, sp, lr}
     c0c:	00000400 	andeq	r0, r0, r0, lsl #8
     c10:	08007108 	stmdaeq	r0, {r3, r8, ip, sp, lr}
     c14:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
     c18:	080074b8 	stmdaeq	r0, {r3, r4, r5, r7, sl, ip, sp, lr}
     c1c:	000000d8 	ldrdeq	r0, [r0], -r8
     c20:	08007590 	stmdaeq	r0, {r4, r7, r8, sl, ip, sp, lr}
     c24:	0000004c 	andeq	r0, r0, ip, asr #32
     c28:	080075dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, ip, sp, lr}
     c2c:	0000001e 	andeq	r0, r0, lr, lsl r0
	...
     c38:	000000a4 	andeq	r0, r0, r4, lsr #1
     c3c:	90b00002 	adcsls	r0, r0, r2
     c40:	00040000 	andeq	r0, r4, r0
     c44:	00000000 	andeq	r0, r0, r0
     c48:	080075fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, ip, sp, lr}
     c4c:	0000004e 	andeq	r0, r0, lr, asr #32
     c50:	0800764c 	stmdaeq	r0, {r2, r3, r6, r9, sl, ip, sp, lr}
     c54:	00000054 	andeq	r0, r0, r4, asr r0
     c58:	080076a0 	stmdaeq	r0, {r5, r7, r9, sl, ip, sp, lr}
     c5c:	000000be 	strheq	r0, [r0], -lr
     c60:	00000000 	andeq	r0, r0, r0
     c64:	0000003c 	andeq	r0, r0, ip, lsr r0
     c68:	00000000 	andeq	r0, r0, r0
     c6c:	00000064 	andeq	r0, r0, r4, rrx
     c70:	08007760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip, sp, lr}
     c74:	0000003c 	andeq	r0, r0, ip, lsr r0
     c78:	0800779c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip, sp, lr}
     c7c:	00000092 	muleq	r0, r2, r0
     c80:	08007830 	stmdaeq	r0, {r4, r5, fp, ip, sp, lr}
     c84:	00000080 	andeq	r0, r0, r0, lsl #1
     c88:	080078b0 	stmdaeq	r0, {r4, r5, r7, fp, ip, sp, lr}
     c8c:	0000004c 	andeq	r0, r0, ip, asr #32
     c90:	080078fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, ip, sp, lr}
     c94:	0000001e 	andeq	r0, r0, lr, lsl r0
     c98:	0800791c 	stmdaeq	r0, {r2, r3, r4, r8, fp, ip, sp, lr}
     c9c:	000002f2 	strdeq	r0, [r0], -r2
     ca0:	00000000 	andeq	r0, r0, r0
     ca4:	00000036 	andeq	r0, r0, r6, lsr r0
     ca8:	08007c10 	stmdaeq	r0, {r4, sl, fp, ip, sp, lr}
     cac:	00000036 	andeq	r0, r0, r6, lsr r0
     cb0:	00000000 	andeq	r0, r0, r0
     cb4:	0000002e 	andeq	r0, r0, lr, lsr #32
     cb8:	00000000 	andeq	r0, r0, r0
     cbc:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     cc0:	00000000 	andeq	r0, r0, r0
     cc4:	0000004a 	andeq	r0, r0, sl, asr #32
     cc8:	08007c48 	stmdaeq	r0, {r3, r6, sl, fp, ip, sp, lr}
     ccc:	00000182 	andeq	r0, r0, r2, lsl #3
     cd0:	00000000 	andeq	r0, r0, r0
     cd4:	00000182 	andeq	r0, r0, r2, lsl #3
	...
     ce0:	0000003c 	andeq	r0, r0, ip, lsr r0
     ce4:	9a6e0002 	bls	1b80cf4 <_Min_Stack_Size+0x1b80af4>
     ce8:	00040000 	andeq	r0, r4, r0
     cec:	00000000 	andeq	r0, r0, r0
     cf0:	08007dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, ip, sp, lr}
     cf4:	0000003e 	andeq	r0, r0, lr, lsr r0
     cf8:	08007e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, ip, sp, lr}
     cfc:	00000018 	andeq	r0, r0, r8, lsl r0
     d00:	08007e24 	stmdaeq	r0, {r2, r5, r9, sl, fp, ip, sp, lr}
     d04:	00000046 	andeq	r0, r0, r6, asr #32
     d08:	08007e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
     d0c:	00000070 	andeq	r0, r0, r0, ror r0
     d10:	08007edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
     d14:	00000052 	andeq	r0, r0, r2, asr r0
	...
     d20:	000000dc 	ldrdeq	r0, [r0], -ip
     d24:	9d190002 	ldcls	0, cr0, [r9, #-8]
     d28:	00040000 	andeq	r0, r4, r0
     d2c:	00000000 	andeq	r0, r0, r0
     d30:	08007f30 	stmdaeq	r0, {r4, r5, r8, r9, sl, fp, ip, sp, lr}
     d34:	000000b4 	strheq	r0, [r0], -r4
     d38:	08007fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
     d3c:	0000005c 	andeq	r0, r0, ip, asr r0
     d40:	08008040 	stmdaeq	r0, {r6, pc}
     d44:	0000003e 	andeq	r0, r0, lr, lsr r0
     d48:	08008080 	stmdaeq	r0, {r7, pc}
     d4c:	00000034 	andeq	r0, r0, r4, lsr r0
     d50:	080080b4 	stmdaeq	r0, {r2, r4, r5, r7, pc}
     d54:	00000030 	andeq	r0, r0, r0, lsr r0
     d58:	080080e4 	stmdaeq	r0, {r2, r5, r6, r7, pc}
     d5c:	00000154 	andeq	r0, r0, r4, asr r1
     d60:	00000000 	andeq	r0, r0, r0
     d64:	000000ae 	andeq	r0, r0, lr, lsr #1
     d68:	00000000 	andeq	r0, r0, r0
     d6c:	000000a6 	andeq	r0, r0, r6, lsr #1
     d70:	00000000 	andeq	r0, r0, r0
     d74:	00000144 	andeq	r0, r0, r4, asr #2
     d78:	08008238 	stmdaeq	r0, {r3, r4, r5, r9, pc}
     d7c:	00000190 	muleq	r0, r0, r1
     d80:	00000000 	andeq	r0, r0, r0
     d84:	00000148 	andeq	r0, r0, r8, asr #2
     d88:	00000000 	andeq	r0, r0, r0
     d8c:	000000ac 	andeq	r0, r0, ip, lsr #1
     d90:	00000000 	andeq	r0, r0, r0
     d94:	00000064 	andeq	r0, r0, r4, rrx
     d98:	00000000 	andeq	r0, r0, r0
     d9c:	00000020 	andeq	r0, r0, r0, lsr #32
     da0:	00000000 	andeq	r0, r0, r0
     da4:	0000002a 	andeq	r0, r0, sl, lsr #32
     da8:	00000000 	andeq	r0, r0, r0
     dac:	0000001e 	andeq	r0, r0, lr, lsl r0
     db0:	00000000 	andeq	r0, r0, r0
     db4:	0000001a 	andeq	r0, r0, sl, lsl r0
     db8:	080083c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, pc}
     dbc:	0000002e 	andeq	r0, r0, lr, lsr #32
     dc0:	080083f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, pc}
     dc4:	000000d4 	ldrdeq	r0, [r0], -r4
     dc8:	00000000 	andeq	r0, r0, r0
     dcc:	0000004c 	andeq	r0, r0, ip, asr #32
     dd0:	080084cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, pc}
     dd4:	000000a4 	andeq	r0, r0, r4, lsr #1
     dd8:	08008570 	stmdaeq	r0, {r4, r5, r6, r8, sl, pc}
     ddc:	0000002c 	andeq	r0, r0, ip, lsr #32
     de0:	00000000 	andeq	r0, r0, r0
     de4:	0000002a 	andeq	r0, r0, sl, lsr #32
     de8:	0800859c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, pc}
     dec:	00000030 	andeq	r0, r0, r0, lsr r0
     df0:	00000000 	andeq	r0, r0, r0
     df4:	0000002e 	andeq	r0, r0, lr, lsr #32
	...
     e00:	0000018c 	andeq	r0, r0, ip, lsl #3
     e04:	aba30002 	blge	fe8c0e14 <BootRAM+0xd8315b5>
     e08:	00040000 	andeq	r0, r4, r0
     e0c:	00000000 	andeq	r0, r0, r0
     e10:	080085cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, pc}
     e14:	00000082 	andeq	r0, r0, r2, lsl #1
     e18:	08008650 	stmdaeq	r0, {r4, r6, r9, sl, pc}
     e1c:	000000fe 	strdeq	r0, [r0], -lr
     e20:	08008750 	stmdaeq	r0, {r4, r6, r8, r9, sl, pc}
     e24:	000000d4 	ldrdeq	r0, [r0], -r4
     e28:	00000000 	andeq	r0, r0, r0
     e2c:	000000a0 	andeq	r0, r0, r0, lsr #1
     e30:	08008824 	stmdaeq	r0, {r2, r5, fp, pc}
     e34:	00000048 	andeq	r0, r0, r8, asr #32
     e38:	00000000 	andeq	r0, r0, r0
     e3c:	00000034 	andeq	r0, r0, r4, lsr r0
     e40:	00000000 	andeq	r0, r0, r0
     e44:	00000054 	andeq	r0, r0, r4, asr r0
     e48:	00000000 	andeq	r0, r0, r0
     e4c:	00000138 	andeq	r0, r0, r8, lsr r1
     e50:	00000000 	andeq	r0, r0, r0
     e54:	00000104 	andeq	r0, r0, r4, lsl #2
     e58:	00000000 	andeq	r0, r0, r0
     e5c:	00000044 	andeq	r0, r0, r4, asr #32
     e60:	00000000 	andeq	r0, r0, r0
     e64:	000000a0 	andeq	r0, r0, r0, lsr #1
     e68:	00000000 	andeq	r0, r0, r0
     e6c:	000000c0 	andeq	r0, r0, r0, asr #1
     e70:	0800886c 	stmdaeq	r0, {r2, r3, r5, r6, fp, pc}
     e74:	0000006c 	andeq	r0, r0, ip, rrx
     e78:	00000000 	andeq	r0, r0, r0
     e7c:	00000030 	andeq	r0, r0, r0, lsr r0
     e80:	080088d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, pc}
     e84:	0000001c 	andeq	r0, r0, ip, lsl r0
     e88:	080088f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, pc}
     e8c:	0000011c 	andeq	r0, r0, ip, lsl r1
     e90:	00000000 	andeq	r0, r0, r0
     e94:	0000001c 	andeq	r0, r0, ip, lsl r0
     e98:	00000000 	andeq	r0, r0, r0
     e9c:	00000020 	andeq	r0, r0, r0, lsr #32
     ea0:	00000000 	andeq	r0, r0, r0
     ea4:	00000014 	andeq	r0, r0, r4, lsl r0
     ea8:	00000000 	andeq	r0, r0, r0
     eac:	0000002c 	andeq	r0, r0, ip, lsr #32
     eb0:	08008a10 	stmdaeq	r0, {r4, r9, fp, pc}
     eb4:	00000150 	andeq	r0, r0, r0, asr r1
     eb8:	08008b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, pc}
     ebc:	000000d8 	ldrdeq	r0, [r0], -r8
     ec0:	08008c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, pc}
     ec4:	0000002c 	andeq	r0, r0, ip, lsr #32
     ec8:	00000000 	andeq	r0, r0, r0
     ecc:	0000003c 	andeq	r0, r0, ip, lsr r0
     ed0:	08008c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, pc}
     ed4:	000000a8 	andeq	r0, r0, r8, lsr #1
     ed8:	00000000 	andeq	r0, r0, r0
     edc:	00000084 	andeq	r0, r0, r4, lsl #1
     ee0:	00000000 	andeq	r0, r0, r0
     ee4:	00000030 	andeq	r0, r0, r0, lsr r0
     ee8:	08008d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, pc}
     eec:	0000002c 	andeq	r0, r0, ip, lsr #32
     ef0:	08008d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, pc}
     ef4:	0000008c 	andeq	r0, r0, ip, lsl #1
     ef8:	08008dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp, pc}
     efc:	00000018 	andeq	r0, r0, r8, lsl r0
     f00:	08008ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, pc}
     f04:	00000030 	andeq	r0, r0, r0, lsr r0
     f08:	08008e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, pc}
     f0c:	00000074 	andeq	r0, r0, r4, ror r0
     f10:	08008e80 	stmdaeq	r0, {r7, r9, sl, fp, pc}
     f14:	0000000c 	andeq	r0, r0, ip
     f18:	08008e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, pc}
     f1c:	00000040 	andeq	r0, r0, r0, asr #32
     f20:	00000000 	andeq	r0, r0, r0
     f24:	0000001c 	andeq	r0, r0, ip, lsl r0
     f28:	08008ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, pc}
     f2c:	00000100 	andeq	r0, r0, r0, lsl #2
     f30:	08008fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, pc}
     f34:	000000c8 	andeq	r0, r0, r8, asr #1
     f38:	08009094 	stmdaeq	r0, {r2, r4, r7, ip, pc}
     f3c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     f40:	00000000 	andeq	r0, r0, r0
     f44:	00000030 	andeq	r0, r0, r0, lsr r0
     f48:	08009184 	stmdaeq	r0, {r2, r7, r8, ip, pc}
     f4c:	00000028 	andeq	r0, r0, r8, lsr #32
     f50:	00000000 	andeq	r0, r0, r0
     f54:	00000090 	muleq	r0, r0, r0
     f58:	00000000 	andeq	r0, r0, r0
     f5c:	000000b4 	strheq	r0, [r0], -r4
     f60:	00000000 	andeq	r0, r0, r0
     f64:	00000110 	andeq	r0, r0, r0, lsl r1
     f68:	00000000 	andeq	r0, r0, r0
     f6c:	0000014c 	andeq	r0, r0, ip, asr #2
     f70:	00000000 	andeq	r0, r0, r0
     f74:	000000e4 	andeq	r0, r0, r4, ror #1
     f78:	00000000 	andeq	r0, r0, r0
     f7c:	0000004c 	andeq	r0, r0, ip, asr #32
     f80:	080091ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, ip, pc}
     f84:	000000cc 	andeq	r0, r0, ip, asr #1
	...
     f90:	0000006c 	andeq	r0, r0, ip, rrx
     f94:	c07d0002 	rsbsgt	r0, sp, r2
     f98:	00040000 	andeq	r0, r4, r0
     f9c:	00000000 	andeq	r0, r0, r0
     fa0:	08009278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, pc}
     fa4:	00000058 	andeq	r0, r0, r8, asr r0
     fa8:	080092d0 	stmdaeq	r0, {r4, r6, r7, r9, ip, pc}
     fac:	0000002e 	andeq	r0, r0, lr, lsr #32
     fb0:	08009300 	stmdaeq	r0, {r8, r9, ip, pc}
     fb4:	00000026 	andeq	r0, r0, r6, lsr #32
     fb8:	08009328 	stmdaeq	r0, {r3, r5, r8, r9, ip, pc}
     fbc:	0000001c 	andeq	r0, r0, ip, lsl r0
     fc0:	08009348 	stmdaeq	r0, {r3, r6, r8, r9, ip, pc}
     fc4:	00000040 	andeq	r0, r0, r0, asr #32
     fc8:	00000000 	andeq	r0, r0, r0
     fcc:	0000000c 	andeq	r0, r0, ip
     fd0:	08009388 	stmdaeq	r0, {r3, r7, r8, r9, ip, pc}
     fd4:	00000030 	andeq	r0, r0, r0, lsr r0
     fd8:	080093b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, ip, pc}
     fdc:	00000030 	andeq	r0, r0, r0, lsr r0
     fe0:	080093f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip, pc}
     fe4:	00000046 	andeq	r0, r0, r6, asr #32
     fe8:	08009438 	stmdaeq	r0, {r3, r4, r5, sl, ip, pc}
     fec:	00000040 	andeq	r0, r0, r0, asr #32
     ff0:	08009478 	stmdaeq	r0, {r3, r4, r5, r6, sl, ip, pc}
     ff4:	00000034 	andeq	r0, r0, r4, lsr r0
	...
    1000:	00000034 	andeq	r0, r0, r4, lsr r0
    1004:	c35f0002 	cmpgt	pc, #2
    1008:	00040000 	andeq	r0, r4, r0
    100c:	00000000 	andeq	r0, r0, r0
    1010:	080094ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, ip, pc}
    1014:	0000008c 	andeq	r0, r0, ip, lsl #1
    1018:	08009538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip, pc}
    101c:	00000012 	andeq	r0, r0, r2, lsl r0
    1020:	00000000 	andeq	r0, r0, r0
    1024:	00000018 	andeq	r0, r0, r8, lsl r0
    1028:	00000000 	andeq	r0, r0, r0
    102c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
    1038:	0000001c 	andeq	r0, r0, ip, lsl r0
    103c:	c4de0002 	ldrbgt	r0, [lr], #2
    1040:	00040000 	andeq	r0, r4, r0
    1044:	00000000 	andeq	r0, r0, r0
    1048:	08000110 	stmdaeq	r0, {r4, r8}
    104c:	000000ec 	andeq	r0, r0, ip, ror #1
	...
    1058:	0000001c 	andeq	r0, r0, ip, lsl r0
    105c:	c5a50002 	strgt	r0, [r5, #2]!
    1060:	00040000 	andeq	r0, r4, r0
    1064:	00000000 	andeq	r0, r0, r0
    1068:	080001fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8}
    106c:	0000009a 	muleq	r0, sl, r0
	...
    1078:	0000001c 	andeq	r0, r0, ip, lsl r0
    107c:	c6c30002 	strbgt	r0, [r3], r2
    1080:	00040000 	andeq	r0, r4, r0
    1084:	00000000 	andeq	r0, r0, r0
    1088:	08000298 	stmdaeq	r0, {r3, r4, r7, r9}
    108c:	00000104 	andeq	r0, r0, r4, lsl #2
	...
    1098:	0000001c 	andeq	r0, r0, ip, lsl r0
    109c:	cec20002 	cdpgt	0, 12, cr0, cr2, cr2, {0}
    10a0:	00040000 	andeq	r0, r4, r0
    10a4:	00000000 	andeq	r0, r0, r0
    10a8:	0800039c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9}
    10ac:	00000124 	andeq	r0, r0, r4, lsr #2
	...
    10b8:	0000001c 	andeq	r0, r0, ip, lsl r0
    10bc:	d7ce0002 	strble	r0, [lr, r2]
    10c0:	00040000 	andeq	r0, r4, r0
    10c4:	00000000 	andeq	r0, r0, r0
    10c8:	080004c0 	stmdaeq	r0, {r6, r7, sl}
    10cc:	000000ce 	andeq	r0, r0, lr, asr #1
	...
    10d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    10dc:	d8eb0002 	stmiale	fp!, {r1}^
    10e0:	00040000 	andeq	r0, r4, r0
    10e4:	00000000 	andeq	r0, r0, r0
    10e8:	08000590 	stmdaeq	r0, {r4, r7, r8, sl}
    10ec:	000000ba 	strheq	r0, [r0], -sl
	...
    10f8:	0000001c 	andeq	r0, r0, ip, lsl r0
    10fc:	d9af0002 	stmible	pc!, {r1}	; <UNPREDICTABLE>
    1100:	00040000 	andeq	r0, r4, r0
    1104:	00000000 	andeq	r0, r0, r0
    1108:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
    110c:	0000005c 	andeq	r0, r0, ip, asr r0
	...
    1118:	0000001c 	andeq	r0, r0, ip, lsl r0
    111c:	da6b0002 	ble	1ac112c <_Min_Stack_Size+0x1ac0f2c>
    1120:	00040000 	andeq	r0, r4, r0
    1124:	00000000 	andeq	r0, r0, r0
    1128:	080006a8 	stmdaeq	r0, {r3, r5, r7, r9, sl}
    112c:	0000009c 	muleq	r0, ip, r0
	...
    1138:	0000001c 	andeq	r0, r0, ip, lsl r0
    113c:	db670002 	blle	19c114c <_Min_Stack_Size+0x19c0f4c>
    1140:	00040000 	andeq	r0, r4, r0
    1144:	00000000 	andeq	r0, r0, r0
    1148:	08000744 	stmdaeq	r0, {r2, r6, r8, r9, sl}
    114c:	00000066 	andeq	r0, r0, r6, rrx
	...
    1158:	00000014 	andeq	r0, r0, r4, lsl r0
    115c:	dca00002 	stcle	0, cr0, [r0], #8
    1160:	00040000 	andeq	r0, r4, r0
	...
    1170:	0000001c 	andeq	r0, r0, ip, lsl r0
    1174:	e47a0002 	ldrbt	r0, [sl], #-2
    1178:	00040000 	andeq	r0, r4, r0
    117c:	00000000 	andeq	r0, r0, r0
    1180:	080007ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl}
    1184:	00000020 	andeq	r0, r0, r0, lsr #32
	...
    1190:	0000001c 	andeq	r0, r0, ip, lsl r0
    1194:	ec2c0002 	stc	0, cr0, [ip], #-8
    1198:	00040000 	andeq	r0, r4, r0
    119c:	00000000 	andeq	r0, r0, r0
    11a0:	080007cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl}
    11a4:	0000008c 	andeq	r0, r0, ip, lsl #1
	...
    11b0:	0000001c 	andeq	r0, r0, ip, lsl r0
    11b4:	f4510002 			; <UNDEFINED> instruction: 0xf4510002
    11b8:	00040000 	andeq	r0, r4, r0
    11bc:	00000000 	andeq	r0, r0, r0
    11c0:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
    11c4:	000000bc 	strheq	r0, [r0], -ip
	...
    11d0:	0000001c 	andeq	r0, r0, ip, lsl r0
    11d4:	fd3d0002 	ldc2	0, cr0, [sp, #-8]!
    11d8:	00040000 	andeq	r0, r4, r0
    11dc:	00000000 	andeq	r0, r0, r0
    11e0:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
    11e4:	00000404 	andeq	r0, r0, r4, lsl #8
	...
    11f0:	0000001c 	andeq	r0, r0, ip, lsl r0
    11f4:	0a740002 	beq	1d01204 <_Min_Stack_Size+0x1d01004>
    11f8:	00040001 	andeq	r0, r4, r1
    11fc:	00000000 	andeq	r0, r0, r0
    1200:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
    1204:	000003dc 	ldrdeq	r0, [r0], -ip
	...
    1210:	0000001c 	andeq	r0, r0, ip, lsl r0
    1214:	15af0002 	strne	r0, [pc, #2]!	; 121e <_Min_Stack_Size+0x101e>
    1218:	00040001 	andeq	r0, r4, r1
    121c:	00000000 	andeq	r0, r0, r0
    1220:	080010f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, ip}
    1224:	00000024 	andeq	r0, r0, r4, lsr #32
	...
    1230:	0000001c 	andeq	r0, r0, ip, lsl r0
    1234:	1d500002 	ldclne	0, cr0, [r0, #-8]
    1238:	00040001 	andeq	r0, r4, r1
    123c:	00000000 	andeq	r0, r0, r0
    1240:	08001118 	stmdaeq	r0, {r3, r4, r8, ip}
    1244:	0000008c 	andeq	r0, r0, ip, lsl #1
	...
    1250:	0000001c 	andeq	r0, r0, ip, lsl r0
    1254:	1e820002 	cdpne	0, 8, cr0, cr2, cr2, {0}
    1258:	00040001 	andeq	r0, r4, r1
    125c:	00000000 	andeq	r0, r0, r0
    1260:	080011a4 	stmdaeq	r0, {r2, r5, r7, r8, ip}
    1264:	000000c6 	andeq	r0, r0, r6, asr #1
	...
    1270:	0000001c 	andeq	r0, r0, ip, lsl r0
    1274:	1fba0002 	svcne	0x00ba0002
    1278:	00040001 	andeq	r0, r4, r1
    127c:	00000000 	andeq	r0, r0, r0
    1280:	0800126c 	stmdaeq	r0, {r2, r3, r5, r6, r9, ip}
    1284:	00000048 	andeq	r0, r0, r8, asr #32
	...
    1290:	0000001c 	andeq	r0, r0, ip, lsl r0
    1294:	283c0002 	ldmdacs	ip!, {r1}
    1298:	00040001 	andeq	r0, r4, r1
	...
    12a4:	000000e0 	andeq	r0, r0, r0, ror #1
	...
    12b0:	0000001c 	andeq	r0, r0, ip, lsl r0
    12b4:	31380002 	teqcc	r8, r2
    12b8:	00040001 	andeq	r0, r4, r1
    12bc:	00000000 	andeq	r0, r0, r0
    12c0:	080012b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, ip}
    12c4:	00000014 	andeq	r0, r0, r4, lsl r0
	...
    12d0:	0000001c 	andeq	r0, r0, ip, lsl r0
    12d4:	38f80002 	ldmcc	r8!, {r1}^
    12d8:	00040001 	andeq	r0, r4, r1
    12dc:	00000000 	andeq	r0, r0, r0
    12e0:	080012c8 	stmdaeq	r0, {r3, r6, r7, r9, ip}
    12e4:	0000001c 	andeq	r0, r0, ip, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
{
       0:	080012e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip}
}
       4:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
       8:	00000001 	andeq	r0, r0, r1
       c:	00000001 	andeq	r0, r0, r1
      10:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
      14:	08001358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip}
      18:	08001358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip}
    bitstatus = SET;
      1c:	08001458 	stmdaeq	r0, {r3, r4, r6, sl, ip}
	...
}
      28:	08001458 	stmdaeq	r0, {r3, r4, r6, sl, ip}
      2c:	080014d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, ip}
      30:	080014d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, ip}
      34:	08001538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip}
      38:	08001538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip}
      3c:	080015e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip}
      40:	080015e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip}
      44:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
      48:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
      4c:	0800170c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip}
      50:	0800170c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip}
      54:	080018b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, ip}
      58:	080018b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, ip}
        Driver_OLED_Send_START(OLED_DATA);
      5c:	0800193c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip}
        for(x=x0;x<x1;x++){ 
      60:	00000001 	andeq	r0, r0, r1
            I2C_SendData(OLED_HARDWARE, BMP[j++]);
      64:	00000001 	andeq	r0, r0, r1
	...
      70:	0800193c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip}
      74:	08001b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip}
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);    	
      78:	08001b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip}
      7c:	08001bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip}
      80:	00000001 	andeq	r0, r0, r1
      84:	00000001 	andeq	r0, r0, r1
        for(x=x0;x<x1;x++){ 
      88:	08001bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip}
      8c:	08001d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip}
      90:	00000001 	andeq	r0, r0, r1
      94:	00000001 	andeq	r0, r0, r1
        _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
      98:	08001d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip}
      9c:	08001f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip}
      a0:	08001f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip}
      a4:	080020c8 	stmdaeq	r0, {r3, r6, r7, sp}
	for(y=y0;y<y1;y++){
      a8:	080020c8 	stmdaeq	r0, {r3, r6, r7, sp}
      ac:	080022d0 	stmdaeq	r0, {r4, r6, r7, r9, sp}
      b0:	080022d0 	stmdaeq	r0, {r4, r6, r7, r9, sp}
}
      b4:	080025cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, sp}
      b8:	080025cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, sp}
      bc:	0800277c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, sp}
      c0:	00000001 	andeq	r0, r0, r1
      c4:	00000001 	andeq	r0, r0, r1
      c8:	00000001 	andeq	r0, r0, r1
      cc:	00000001 	andeq	r0, r0, r1
	...
      d8:	0800277c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, sp}
      dc:	08002788 	stmdaeq	r0, {r3, r7, r8, r9, sl, sp}
      e0:	08002788 	stmdaeq	r0, {r3, r7, r8, r9, sl, sp}
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      e4:	08002794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, sp}
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      e8:	08002794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, sp}
      ec:	080027a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, sp}
      f0:	080027a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, sp}
				prvUnlockQueue( pxQueue );
      f4:	080027ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, sp}
      f8:	080027ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, sp}
				if( xTaskResumeAll() == pdFALSE )
      fc:	080027c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, sp}
     100:	080027c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, sp}
					portYIELD_WITHIN_API();
     104:	080027e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, sp}
     108:	080027e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, sp}
     10c:	080027ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, sp}
     110:	080027f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, sp}
     114:	08002804 	stmdaeq	r0, {r2, fp, sp}
				prvUnlockQueue( pxQueue );
     118:	08002804 	stmdaeq	r0, {r2, fp, sp}
				( void ) xTaskResumeAll();
     11c:	0800284c 	stmdaeq	r0, {r2, r3, r6, fp, sp}
     120:	0800284c 	stmdaeq	r0, {r2, r3, r6, fp, sp}
			prvUnlockQueue( pxQueue );
     124:	08002894 	stmdaeq	r0, {r2, r4, r7, fp, sp}
			( void ) xTaskResumeAll();
     128:	00000001 	andeq	r0, r0, r1
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     12c:	00000001 	andeq	r0, r0, r1
     130:	08002894 	stmdaeq	r0, {r2, r4, r7, fp, sp}
     134:	080028e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, sp}
     138:	080028e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, sp}
}
     13c:	08002aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, sp}
     140:	08002aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, sp}
     144:	08002b20 	stmdaeq	r0, {r5, r8, r9, fp, sp}
     148:	08002b20 	stmdaeq	r0, {r5, r8, r9, fp, sp}
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     14c:	08002bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, sp}
  SPIx->I2SCFGR = tmpreg;   
     150:	08002bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, sp}
     154:	08002cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, sp}
}
     158:	08002cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, sp}
     15c:	08002d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, sp}
     160:	08002d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, sp}
     164:	08002d56 	stmdaeq	r0, {r1, r2, r4, r6, r8, sl, fp, sp}
         *(uint16_t*) arg = getSn_KPALVTR(sn);
     168:	08002d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, sp}
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     16c:	08002d8e 	stmdaeq	r0, {r1, r2, r3, r7, r8, sl, fp, sp}
     170:	08002d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, sp}
     174:	08002dd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, fp, sp}
     178:	08002dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, sp}
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     17c:	08002e06 	stmdaeq	r0, {r1, r2, r9, sl, fp, sp}
     180:	08002e08 	stmdaeq	r0, {r3, r9, sl, fp, sp}
     184:	08002e3a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl, fp, sp}
     188:	08002e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, sp}
         *(uint8_t*) arg = getSn_SR(sn);
     18c:	08002e8a 	stmdaeq	r0, {r1, r3, r7, r9, sl, fp, sp}
     190:	08002e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, sp}
     194:	08002f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, sp}
     198:	08002f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, sp}
     19c:	08002fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp, sp}
     1a0:	00000001 	andeq	r0, r0, r1
     1a4:	00000001 	andeq	r0, r0, r1
         if(getSn_MR(sn) == Sn_MR_TCP)
     1a8:	08002fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp, sp}
     1ac:	0800303c 	stmdaeq	r0, {r2, r3, r4, r5, ip, sp}
     1b0:	0800303c 	stmdaeq	r0, {r2, r3, r4, r5, ip, sp}
     1b4:	080030bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, sp}
     1b8:	080030bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, sp}
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1bc:	0800313c 	stmdaeq	r0, {r2, r3, r4, r5, r8, ip, sp}
     1c0:	0800313c 	stmdaeq	r0, {r2, r3, r4, r5, r8, ip, sp}
     1c4:	08003180 	stmdaeq	r0, {r7, r8, ip, sp}
     1c8:	08003180 	stmdaeq	r0, {r7, r8, ip, sp}
         break;
     1cc:	08003190 	stmdaeq	r0, {r4, r7, r8, ip, sp}
            *(uint16_t*)arg = sock_remained_size[sn];
     1d0:	08003190 	stmdaeq	r0, {r4, r7, r8, ip, sp}
     1d4:	080031d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, ip, sp}
     1d8:	080031d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, ip, sp}
         CHECK_SOCKMODE(Sn_MR_TCP);
     1dc:	08003218 	stmdaeq	r0, {r3, r4, r9, ip, sp}
	...
     1e8:	08003218 	stmdaeq	r0, {r3, r4, r9, ip, sp}
     1ec:	08003278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, sp}
     1f0:	08003278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, sp}
     1f4:	080032e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip, sp}
     1f8:	080032e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip, sp}
         *(uint8_t*)arg = sock_pack_info[sn];
     1fc:	0800336c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, ip, sp}
     200:	0800336c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, ip, sp}
         break;
     204:	080033fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, ip, sp}
         return SOCKERR_SOCKOPT;
     208:	080033fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, ip, sp}
   return SOCK_OK;
     20c:	08003492 	stmdaeq	r0, {r1, r4, r7, sl, ip, sp}
}
     210:	08003494 	stmdaeq	r0, {r2, r4, r7, sl, ip, sp}
     214:	0800352a 	stmdaeq	r0, {r1, r3, r5, r8, sl, ip, sp}
     218:	0800352c 	stmdaeq	r0, {r2, r3, r5, r8, sl, ip, sp}
     21c:	080035e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, ip, sp}
     220:	080035e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, ip, sp}
     224:	0800369c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, sp}
     228:	0800369c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, sp}
	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     22c:	0800372c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, ip, sp}
	...
     238:	0800372c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, ip, sp}
     23c:	08003738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, sp}
     240:	08003738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, sp}
     244:	08003760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip, sp}
     248:	08003760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip, sp}
     24c:	080037a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, ip, sp}
     250:	080037a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, ip, sp}
	memset(packet, 0, sizeof(packet));
     254:	08003c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, ip, sp}
     258:	08003c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, ip, sp}
     25c:	080042a8 	stmdaeq	r0, {r3, r5, r7, r9, lr}
	memcpy(packet, fixed_header, sizeof(fixed_header));
     260:	080042a8 	stmdaeq	r0, {r3, r5, r7, r9, lr}
     264:	080046e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, lr}
     268:	080046e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, lr}
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	08004980 	stmdaeq	r0, {r7, r8, fp, lr}
     270:	08004980 	stmdaeq	r0, {r7, r8, fp, lr}
     274:	08004bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, lr}
     278:	08004bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, lr}
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     27c:	08004cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, lr}
     280:	08004cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, lr}
     284:	08004d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, lr}
     288:	08004d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, lr}
     28c:	08004dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, lr}
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     290:	08004dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, lr}
     294:	08004dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, lr}
     298:	08004dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, lr}
     29c:	08004e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, lr}
     2a0:	08004e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, lr}
		return -1;
     2a4:	08004e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, lr}
     2a8:	08004e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, lr}
	return 1;
     2ac:	08004e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, lr}
}
     2b0:	08004e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, lr}
     2b4:	08004eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, lr}
     2b8:	08004eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, lr}
     2bc:	08004ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp, lr}
     2c0:	08004ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp, lr}
     2c4:	08004f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, lr}
     2c8:	00000001 	andeq	r0, r0, r1
     2cc:	00000001 	andeq	r0, r0, r1
	...
     2d8:	08004f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, lr}
     2dc:	08004f52 	stmdaeq	r0, {r1, r4, r6, r8, r9, sl, fp, lr}
     2e0:	08004f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, lr}
     2e4:	08005060 	stmdaeq	r0, {r5, r6, ip, lr}
     2e8:	08005060 	stmdaeq	r0, {r5, r6, ip, lr}
     2ec:	080050c4 	stmdaeq	r0, {r2, r6, r7, ip, lr}
     2f0:	080050c4 	stmdaeq	r0, {r2, r6, r7, ip, lr}
     2f4:	080053ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, ip, lr}
     2f8:	080053bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, ip, lr}
     2fc:	08005532 	stmdaeq	r0, {r1, r4, r5, r8, sl, ip, lr}
	...
     308:	08005534 	stmdaeq	r0, {r2, r4, r5, r8, sl, ip, lr}
     30c:	08005568 	stmdaeq	r0, {r3, r5, r6, r8, sl, ip, lr}
     310:	08005568 	stmdaeq	r0, {r3, r5, r6, r8, sl, ip, lr}
     314:	08005724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip, lr}
     318:	08005724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip, lr}
     31c:	08005828 	stmdaeq	r0, {r3, r5, fp, ip, lr}
     320:	08005828 	stmdaeq	r0, {r3, r5, fp, ip, lr}
     324:	08005898 	stmdaeq	r0, {r3, r4, r7, fp, ip, lr}
     328:	08005898 	stmdaeq	r0, {r3, r4, r7, fp, ip, lr}
     32c:	080058f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, lr}
     330:	080058f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, lr}
     334:	0800593c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip, lr}
     338:	0800593c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip, lr}
     33c:	08005958 	stmdaeq	r0, {r3, r4, r6, r8, fp, ip, lr}
	...
     348:	08005958 	stmdaeq	r0, {r3, r4, r6, r8, fp, ip, lr}
     34c:	0800597c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, ip, lr}
     350:	0800597c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, ip, lr}
     354:	08005a40 	stmdaeq	r0, {r6, r9, fp, ip, lr}
     358:	00000001 	andeq	r0, r0, r1
     35c:	00000001 	andeq	r0, r0, r1
     360:	00000001 	andeq	r0, r0, r1
     364:	00000001 	andeq	r0, r0, r1
     368:	00000001 	andeq	r0, r0, r1
     36c:	00000001 	andeq	r0, r0, r1
	...
     378:	00000001 	andeq	r0, r0, r1
     37c:	00000001 	andeq	r0, r0, r1
     380:	00000001 	andeq	r0, r0, r1
     384:	00000001 	andeq	r0, r0, r1
     388:	00000001 	andeq	r0, r0, r1
     38c:	00000001 	andeq	r0, r0, r1
     390:	00000001 	andeq	r0, r0, r1
     394:	00000001 	andeq	r0, r0, r1
     398:	00000001 	andeq	r0, r0, r1
     39c:	00000001 	andeq	r0, r0, r1
     3a0:	00000001 	andeq	r0, r0, r1
     3a4:	00000001 	andeq	r0, r0, r1
     3a8:	00000001 	andeq	r0, r0, r1
     3ac:	00000001 	andeq	r0, r0, r1
     3b0:	00000001 	andeq	r0, r0, r1
     3b4:	00000001 	andeq	r0, r0, r1
     3b8:	00000001 	andeq	r0, r0, r1
     3bc:	00000001 	andeq	r0, r0, r1
     3c0:	00000001 	andeq	r0, r0, r1
     3c4:	00000001 	andeq	r0, r0, r1
     3c8:	00000001 	andeq	r0, r0, r1
     3cc:	00000001 	andeq	r0, r0, r1
     3d0:	00000001 	andeq	r0, r0, r1
     3d4:	00000001 	andeq	r0, r0, r1
     3d8:	00000001 	andeq	r0, r0, r1
     3dc:	00000001 	andeq	r0, r0, r1
     3e0:	00000001 	andeq	r0, r0, r1
     3e4:	00000001 	andeq	r0, r0, r1
     3e8:	00000001 	andeq	r0, r0, r1
     3ec:	00000001 	andeq	r0, r0, r1
     3f0:	00000001 	andeq	r0, r0, r1
     3f4:	00000001 	andeq	r0, r0, r1
     3f8:	08005a40 	stmdaeq	r0, {r6, r9, fp, ip, lr}
     3fc:	08005a60 	stmdaeq	r0, {r5, r6, r9, fp, ip, lr}
     400:	00000001 	andeq	r0, r0, r1
     404:	00000001 	andeq	r0, r0, r1
     408:	00000001 	andeq	r0, r0, r1
     40c:	00000001 	andeq	r0, r0, r1
     410:	08005a60 	stmdaeq	r0, {r5, r6, r9, fp, ip, lr}
     414:	08005bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp, ip, lr}
     418:	00000001 	andeq	r0, r0, r1
     41c:	00000001 	andeq	r0, r0, r1
     420:	08005bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp, ip, lr}
     424:	08005bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr}
     428:	08005bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr}
     42c:	08005c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, ip, lr}
     430:	00000001 	andeq	r0, r0, r1
     434:	00000001 	andeq	r0, r0, r1
     438:	08005c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, ip, lr}
     43c:	08005c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, ip, lr}
     440:	00000001 	andeq	r0, r0, r1
     444:	00000001 	andeq	r0, r0, r1
     448:	00000001 	andeq	r0, r0, r1
     44c:	00000001 	andeq	r0, r0, r1
     450:	00000001 	andeq	r0, r0, r1
     454:	00000001 	andeq	r0, r0, r1
     458:	08005c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, ip, lr}
     45c:	08005ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp, ip, lr}
     460:	00000001 	andeq	r0, r0, r1
     464:	00000001 	andeq	r0, r0, r1
     468:	00000001 	andeq	r0, r0, r1
     46c:	00000001 	andeq	r0, r0, r1
     470:	00000001 	andeq	r0, r0, r1
     474:	00000001 	andeq	r0, r0, r1
	...
     480:	00000001 	andeq	r0, r0, r1
     484:	00000001 	andeq	r0, r0, r1
     488:	00000001 	andeq	r0, r0, r1
     48c:	00000001 	andeq	r0, r0, r1
     490:	08005ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp, ip, lr}
     494:	08005e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip, lr}
     498:	00000001 	andeq	r0, r0, r1
     49c:	00000001 	andeq	r0, r0, r1
     4a0:	00000001 	andeq	r0, r0, r1
     4a4:	00000001 	andeq	r0, r0, r1
     4a8:	00000001 	andeq	r0, r0, r1
     4ac:	00000001 	andeq	r0, r0, r1
     4b0:	00000001 	andeq	r0, r0, r1
     4b4:	00000001 	andeq	r0, r0, r1
     4b8:	00000001 	andeq	r0, r0, r1
     4bc:	00000001 	andeq	r0, r0, r1
     4c0:	08005e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip, lr}
     4c4:	08005e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp, ip, lr}
     4c8:	08005e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp, ip, lr}
     4cc:	08005e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip, lr}
     4d0:	00000001 	andeq	r0, r0, r1
     4d4:	00000001 	andeq	r0, r0, r1
     4d8:	00000001 	andeq	r0, r0, r1
     4dc:	00000001 	andeq	r0, r0, r1
     4e0:	00000001 	andeq	r0, r0, r1
     4e4:	00000001 	andeq	r0, r0, r1
     4e8:	00000001 	andeq	r0, r0, r1
     4ec:	00000001 	andeq	r0, r0, r1
     4f0:	00000001 	andeq	r0, r0, r1
     4f4:	00000001 	andeq	r0, r0, r1
     4f8:	00000001 	andeq	r0, r0, r1
     4fc:	00000001 	andeq	r0, r0, r1
     500:	00000001 	andeq	r0, r0, r1
     504:	00000001 	andeq	r0, r0, r1
     508:	00000001 	andeq	r0, r0, r1
     50c:	00000001 	andeq	r0, r0, r1
	...
     518:	00000001 	andeq	r0, r0, r1
     51c:	00000001 	andeq	r0, r0, r1
     520:	08005e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip, lr}
     524:	08005f1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, fp, ip, lr}
     528:	00000001 	andeq	r0, r0, r1
     52c:	00000001 	andeq	r0, r0, r1
     530:	00000001 	andeq	r0, r0, r1
     534:	00000001 	andeq	r0, r0, r1
     538:	00000001 	andeq	r0, r0, r1
     53c:	00000001 	andeq	r0, r0, r1
     540:	08005f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip, lr}
     544:	08005f5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}
     548:	00000001 	andeq	r0, r0, r1
     54c:	00000001 	andeq	r0, r0, r1
     550:	00000001 	andeq	r0, r0, r1
     554:	00000001 	andeq	r0, r0, r1
     558:	00000001 	andeq	r0, r0, r1
     55c:	00000001 	andeq	r0, r0, r1
     560:	08005f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, ip, lr}
     564:	08005f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}
     568:	08005f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}
     56c:	08005f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, ip, lr}
     570:	00000001 	andeq	r0, r0, r1
     574:	00000001 	andeq	r0, r0, r1
     578:	00000001 	andeq	r0, r0, r1
     57c:	00000001 	andeq	r0, r0, r1
     580:	00000001 	andeq	r0, r0, r1
     584:	00000001 	andeq	r0, r0, r1
     588:	00000001 	andeq	r0, r0, r1
     58c:	00000001 	andeq	r0, r0, r1
     590:	00000001 	andeq	r0, r0, r1
     594:	00000001 	andeq	r0, r0, r1
     598:	00000001 	andeq	r0, r0, r1
     59c:	00000001 	andeq	r0, r0, r1
     5a0:	00000001 	andeq	r0, r0, r1
     5a4:	00000001 	andeq	r0, r0, r1
     5a8:	00000001 	andeq	r0, r0, r1
     5ac:	00000001 	andeq	r0, r0, r1
     5b0:	08005f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, ip, lr}
     5b4:	08005fca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, sl, fp, ip, lr}
     5b8:	00000001 	andeq	r0, r0, r1
     5bc:	00000001 	andeq	r0, r0, r1
     5c0:	00000001 	andeq	r0, r0, r1
     5c4:	00000001 	andeq	r0, r0, r1
     5c8:	00000001 	andeq	r0, r0, r1
     5cc:	00000001 	andeq	r0, r0, r1
	...
     5d8:	00000001 	andeq	r0, r0, r1
     5dc:	00000001 	andeq	r0, r0, r1
     5e0:	08005fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, ip, lr}
     5e4:	080060c4 	stmdaeq	r0, {r2, r6, r7, sp, lr}
     5e8:	00000001 	andeq	r0, r0, r1
     5ec:	00000001 	andeq	r0, r0, r1
     5f0:	00000001 	andeq	r0, r0, r1
     5f4:	00000001 	andeq	r0, r0, r1
     5f8:	00000001 	andeq	r0, r0, r1
     5fc:	00000001 	andeq	r0, r0, r1
     600:	00000001 	andeq	r0, r0, r1
     604:	00000001 	andeq	r0, r0, r1
     608:	00000001 	andeq	r0, r0, r1
     60c:	00000001 	andeq	r0, r0, r1
     610:	00000001 	andeq	r0, r0, r1
     614:	00000001 	andeq	r0, r0, r1
     618:	00000001 	andeq	r0, r0, r1
     61c:	00000001 	andeq	r0, r0, r1
     620:	00000001 	andeq	r0, r0, r1
     624:	00000001 	andeq	r0, r0, r1
     628:	00000001 	andeq	r0, r0, r1
     62c:	00000001 	andeq	r0, r0, r1
     630:	00000001 	andeq	r0, r0, r1
     634:	00000001 	andeq	r0, r0, r1
     638:	00000001 	andeq	r0, r0, r1
     63c:	00000001 	andeq	r0, r0, r1
     640:	080060c4 	stmdaeq	r0, {r2, r6, r7, sp, lr}
     644:	08006102 	stmdaeq	r0, {r1, r8, sp, lr}
     648:	00000001 	andeq	r0, r0, r1
     64c:	00000001 	andeq	r0, r0, r1
     650:	08006104 	stmdaeq	r0, {r2, r8, sp, lr}
     654:	0800614a 	stmdaeq	r0, {r1, r3, r6, r8, sp, lr}
     658:	00000001 	andeq	r0, r0, r1
     65c:	00000001 	andeq	r0, r0, r1
     660:	00000001 	andeq	r0, r0, r1
     664:	00000001 	andeq	r0, r0, r1
     668:	00000001 	andeq	r0, r0, r1
     66c:	00000001 	andeq	r0, r0, r1
     670:	00000001 	andeq	r0, r0, r1
     674:	00000001 	andeq	r0, r0, r1
     678:	00000001 	andeq	r0, r0, r1
     67c:	00000001 	andeq	r0, r0, r1
     680:	00000001 	andeq	r0, r0, r1
     684:	00000001 	andeq	r0, r0, r1
     688:	00000001 	andeq	r0, r0, r1
     68c:	00000001 	andeq	r0, r0, r1
     690:	00000001 	andeq	r0, r0, r1
     694:	00000001 	andeq	r0, r0, r1
     698:	00000001 	andeq	r0, r0, r1
     69c:	00000001 	andeq	r0, r0, r1
     6a0:	00000001 	andeq	r0, r0, r1
     6a4:	00000001 	andeq	r0, r0, r1
     6a8:	00000001 	andeq	r0, r0, r1
     6ac:	00000001 	andeq	r0, r0, r1
     6b0:	00000001 	andeq	r0, r0, r1
     6b4:	00000001 	andeq	r0, r0, r1
     6b8:	00000001 	andeq	r0, r0, r1
     6bc:	00000001 	andeq	r0, r0, r1
     6c0:	00000001 	andeq	r0, r0, r1
     6c4:	00000001 	andeq	r0, r0, r1
     6c8:	00000001 	andeq	r0, r0, r1
     6cc:	00000001 	andeq	r0, r0, r1
     6d0:	00000001 	andeq	r0, r0, r1
     6d4:	00000001 	andeq	r0, r0, r1
     6d8:	00000001 	andeq	r0, r0, r1
     6dc:	00000001 	andeq	r0, r0, r1
     6e0:	00000001 	andeq	r0, r0, r1
     6e4:	00000001 	andeq	r0, r0, r1
     6e8:	00000001 	andeq	r0, r0, r1
     6ec:	00000001 	andeq	r0, r0, r1
     6f0:	00000001 	andeq	r0, r0, r1
     6f4:	00000001 	andeq	r0, r0, r1
     6f8:	00000001 	andeq	r0, r0, r1
     6fc:	00000001 	andeq	r0, r0, r1
     700:	00000001 	andeq	r0, r0, r1
     704:	00000001 	andeq	r0, r0, r1
     708:	00000001 	andeq	r0, r0, r1
     70c:	00000001 	andeq	r0, r0, r1
     710:	00000001 	andeq	r0, r0, r1
     714:	00000001 	andeq	r0, r0, r1
     718:	00000001 	andeq	r0, r0, r1
     71c:	00000001 	andeq	r0, r0, r1
     720:	00000001 	andeq	r0, r0, r1
     724:	00000001 	andeq	r0, r0, r1
     728:	00000001 	andeq	r0, r0, r1
     72c:	00000001 	andeq	r0, r0, r1
     730:	00000001 	andeq	r0, r0, r1
     734:	00000001 	andeq	r0, r0, r1
     738:	00000001 	andeq	r0, r0, r1
     73c:	00000001 	andeq	r0, r0, r1
     740:	00000001 	andeq	r0, r0, r1
     744:	00000001 	andeq	r0, r0, r1
     748:	00000001 	andeq	r0, r0, r1
     74c:	00000001 	andeq	r0, r0, r1
     750:	00000001 	andeq	r0, r0, r1
     754:	00000001 	andeq	r0, r0, r1
     758:	00000001 	andeq	r0, r0, r1
     75c:	00000001 	andeq	r0, r0, r1
     760:	00000001 	andeq	r0, r0, r1
     764:	00000001 	andeq	r0, r0, r1
     768:	00000001 	andeq	r0, r0, r1
     76c:	00000001 	andeq	r0, r0, r1
     770:	00000001 	andeq	r0, r0, r1
     774:	00000001 	andeq	r0, r0, r1
     778:	00000001 	andeq	r0, r0, r1
     77c:	00000001 	andeq	r0, r0, r1
     780:	00000001 	andeq	r0, r0, r1
     784:	00000001 	andeq	r0, r0, r1
     788:	00000001 	andeq	r0, r0, r1
     78c:	00000001 	andeq	r0, r0, r1
     790:	00000001 	andeq	r0, r0, r1
     794:	00000001 	andeq	r0, r0, r1
     798:	00000001 	andeq	r0, r0, r1
     79c:	00000001 	andeq	r0, r0, r1
     7a0:	00000001 	andeq	r0, r0, r1
     7a4:	00000001 	andeq	r0, r0, r1
     7a8:	00000001 	andeq	r0, r0, r1
     7ac:	00000001 	andeq	r0, r0, r1
     7b0:	00000001 	andeq	r0, r0, r1
     7b4:	00000001 	andeq	r0, r0, r1
     7b8:	00000001 	andeq	r0, r0, r1
     7bc:	00000001 	andeq	r0, r0, r1
     7c0:	00000001 	andeq	r0, r0, r1
     7c4:	00000001 	andeq	r0, r0, r1
     7c8:	00000001 	andeq	r0, r0, r1
     7cc:	00000001 	andeq	r0, r0, r1
     7d0:	00000001 	andeq	r0, r0, r1
     7d4:	00000001 	andeq	r0, r0, r1
     7d8:	00000001 	andeq	r0, r0, r1
     7dc:	00000001 	andeq	r0, r0, r1
     7e0:	00000001 	andeq	r0, r0, r1
     7e4:	00000001 	andeq	r0, r0, r1
     7e8:	00000001 	andeq	r0, r0, r1
     7ec:	00000001 	andeq	r0, r0, r1
     7f0:	00000001 	andeq	r0, r0, r1
     7f4:	00000001 	andeq	r0, r0, r1
     7f8:	00000001 	andeq	r0, r0, r1
     7fc:	00000001 	andeq	r0, r0, r1
     800:	00000001 	andeq	r0, r0, r1
     804:	00000001 	andeq	r0, r0, r1
     808:	00000001 	andeq	r0, r0, r1
     80c:	00000001 	andeq	r0, r0, r1
     810:	00000001 	andeq	r0, r0, r1
     814:	00000001 	andeq	r0, r0, r1
     818:	00000001 	andeq	r0, r0, r1
     81c:	00000001 	andeq	r0, r0, r1
     820:	00000001 	andeq	r0, r0, r1
     824:	00000001 	andeq	r0, r0, r1
     828:	00000001 	andeq	r0, r0, r1
     82c:	00000001 	andeq	r0, r0, r1
     830:	00000001 	andeq	r0, r0, r1
     834:	00000001 	andeq	r0, r0, r1
     838:	00000001 	andeq	r0, r0, r1
     83c:	00000001 	andeq	r0, r0, r1
     840:	00000001 	andeq	r0, r0, r1
     844:	00000001 	andeq	r0, r0, r1
     848:	00000001 	andeq	r0, r0, r1
     84c:	00000001 	andeq	r0, r0, r1
     850:	00000001 	andeq	r0, r0, r1
     854:	00000001 	andeq	r0, r0, r1
     858:	00000001 	andeq	r0, r0, r1
     85c:	00000001 	andeq	r0, r0, r1
     860:	00000001 	andeq	r0, r0, r1
     864:	00000001 	andeq	r0, r0, r1
     868:	00000001 	andeq	r0, r0, r1
     86c:	00000001 	andeq	r0, r0, r1
     870:	00000001 	andeq	r0, r0, r1
     874:	00000001 	andeq	r0, r0, r1
     878:	00000001 	andeq	r0, r0, r1
     87c:	00000001 	andeq	r0, r0, r1
     880:	0800614c 	stmdaeq	r0, {r2, r3, r6, r8, sp, lr}
     884:	0800619e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, sp, lr}
     888:	080061a0 	stmdaeq	r0, {r5, r7, r8, sp, lr}
     88c:	080061c0 	stmdaeq	r0, {r6, r7, r8, sp, lr}
     890:	00000001 	andeq	r0, r0, r1
     894:	00000001 	andeq	r0, r0, r1
     898:	00000001 	andeq	r0, r0, r1
     89c:	00000001 	andeq	r0, r0, r1
     8a0:	00000001 	andeq	r0, r0, r1
     8a4:	00000001 	andeq	r0, r0, r1
     8a8:	00000001 	andeq	r0, r0, r1
     8ac:	00000001 	andeq	r0, r0, r1
	...
     8b8:	080061c0 	stmdaeq	r0, {r6, r7, r8, sp, lr}
     8bc:	08006208 	stmdaeq	r0, {r3, r9, sp, lr}
     8c0:	08006208 	stmdaeq	r0, {r3, r9, sp, lr}
     8c4:	0800638c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sp, lr}
     8c8:	00000001 	andeq	r0, r0, r1
     8cc:	00000001 	andeq	r0, r0, r1
     8d0:	0800638c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sp, lr}
     8d4:	080063ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, sp, lr}
     8d8:	00000001 	andeq	r0, r0, r1
     8dc:	00000001 	andeq	r0, r0, r1
     8e0:	00000001 	andeq	r0, r0, r1
     8e4:	00000001 	andeq	r0, r0, r1
     8e8:	080063cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sp, lr}
     8ec:	0800640a 	stmdaeq	r0, {r1, r3, sl, sp, lr}
     8f0:	00000001 	andeq	r0, r0, r1
     8f4:	00000001 	andeq	r0, r0, r1
     8f8:	00000001 	andeq	r0, r0, r1
     8fc:	00000001 	andeq	r0, r0, r1
     900:	00000001 	andeq	r0, r0, r1
     904:	00000001 	andeq	r0, r0, r1
     908:	00000001 	andeq	r0, r0, r1
     90c:	00000001 	andeq	r0, r0, r1
     910:	00000001 	andeq	r0, r0, r1
     914:	00000001 	andeq	r0, r0, r1
     918:	00000001 	andeq	r0, r0, r1
     91c:	00000001 	andeq	r0, r0, r1
     920:	0800640c 	stmdaeq	r0, {r2, r3, sl, sp, lr}
     924:	0800642a 	stmdaeq	r0, {r1, r3, r5, sl, sp, lr}
     928:	00000001 	andeq	r0, r0, r1
     92c:	00000001 	andeq	r0, r0, r1
     930:	0800642c 	stmdaeq	r0, {r2, r3, r5, sl, sp, lr}
     934:	08006466 	stmdaeq	r0, {r1, r2, r5, r6, sl, sp, lr}
     938:	00000001 	andeq	r0, r0, r1
     93c:	00000001 	andeq	r0, r0, r1
     940:	00000001 	andeq	r0, r0, r1
     944:	00000001 	andeq	r0, r0, r1
     948:	00000001 	andeq	r0, r0, r1
     94c:	00000001 	andeq	r0, r0, r1
     950:	00000001 	andeq	r0, r0, r1
     954:	00000001 	andeq	r0, r0, r1
     958:	00000001 	andeq	r0, r0, r1
     95c:	00000001 	andeq	r0, r0, r1
     960:	00000001 	andeq	r0, r0, r1
     964:	00000001 	andeq	r0, r0, r1
     968:	00000001 	andeq	r0, r0, r1
     96c:	00000001 	andeq	r0, r0, r1
     970:	00000001 	andeq	r0, r0, r1
     974:	00000001 	andeq	r0, r0, r1
     978:	00000001 	andeq	r0, r0, r1
     97c:	00000001 	andeq	r0, r0, r1
     980:	08006468 	stmdaeq	r0, {r3, r5, r6, sl, sp, lr}
     984:	080064a6 	stmdaeq	r0, {r1, r2, r5, r7, sl, sp, lr}
     988:	00000001 	andeq	r0, r0, r1
     98c:	00000001 	andeq	r0, r0, r1
     990:	080064a8 	stmdaeq	r0, {r3, r5, r7, sl, sp, lr}
     994:	08006506 	stmdaeq	r0, {r1, r2, r8, sl, sp, lr}
     998:	00000001 	andeq	r0, r0, r1
     99c:	00000001 	andeq	r0, r0, r1
     9a0:	08006508 	stmdaeq	r0, {r3, r8, sl, sp, lr}
     9a4:	0800656c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     9a8:	00000001 	andeq	r0, r0, r1
     9ac:	00000001 	andeq	r0, r0, r1
     9b0:	00000001 	andeq	r0, r0, r1
     9b4:	00000001 	andeq	r0, r0, r1
     9b8:	00000001 	andeq	r0, r0, r1
     9bc:	00000001 	andeq	r0, r0, r1
	...
     9c8:	0800656c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     9cc:	0800658c 	stmdaeq	r0, {r2, r3, r7, r8, sl, sp, lr}
     9d0:	0800658c 	stmdaeq	r0, {r2, r3, r7, r8, sl, sp, lr}
     9d4:	080065ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, sp, lr}
     9d8:	080065ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, sp, lr}
     9dc:	080065cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, sp, lr}
     9e0:	080065cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, sp, lr}
     9e4:	080065e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, sp, lr}
     9e8:	080065e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, sp, lr}
     9ec:	080065fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, sp, lr}
     9f0:	00000001 	andeq	r0, r0, r1
     9f4:	00000001 	andeq	r0, r0, r1
	...
     a00:	00000001 	andeq	r0, r0, r1
     a04:	00000001 	andeq	r0, r0, r1
     a08:	00000001 	andeq	r0, r0, r1
     a0c:	00000001 	andeq	r0, r0, r1
     a10:	080065fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, sp, lr}
     a14:	08006638 	stmdaeq	r0, {r3, r4, r5, r9, sl, sp, lr}
	...
     a20:	08006638 	stmdaeq	r0, {r3, r4, r5, r9, sl, sp, lr}
     a24:	080066bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, sp, lr}
     a28:	080066bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, sp, lr}
     a2c:	08006704 	stmdaeq	r0, {r2, r8, r9, sl, sp, lr}
     a30:	08006704 	stmdaeq	r0, {r2, r8, r9, sl, sp, lr}
     a34:	080067c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, sp, lr}
     a38:	080067c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, sp, lr}
     a3c:	0800682a 	stmdaeq	r0, {r1, r3, r5, fp, sp, lr}
     a40:	0800682c 	stmdaeq	r0, {r2, r3, r5, fp, sp, lr}
     a44:	08006870 	stmdaeq	r0, {r4, r5, r6, fp, sp, lr}
	...
     a50:	08006870 	stmdaeq	r0, {r4, r5, r6, fp, sp, lr}
     a54:	0800687c 	stmdaeq	r0, {r2, r3, r4, r5, r6, fp, sp, lr}
     a58:	0800687c 	stmdaeq	r0, {r2, r3, r4, r5, r6, fp, sp, lr}
     a5c:	08006882 	stmdaeq	r0, {r1, r7, fp, sp, lr}
     a60:	08006884 	stmdaeq	r0, {r2, r7, fp, sp, lr}
     a64:	0800688a 	stmdaeq	r0, {r1, r3, r7, fp, sp, lr}
     a68:	0800688c 	stmdaeq	r0, {r2, r3, r7, fp, sp, lr}
     a6c:	08006892 	stmdaeq	r0, {r1, r4, r7, fp, sp, lr}
     a70:	08006894 	stmdaeq	r0, {r2, r4, r7, fp, sp, lr}
     a74:	0800689a 	stmdaeq	r0, {r1, r3, r4, r7, fp, sp, lr}
     a78:	0800689c 	stmdaeq	r0, {r2, r3, r4, r7, fp, sp, lr}
     a7c:	080068a8 	stmdaeq	r0, {r3, r5, r7, fp, sp, lr}
     a80:	080068a8 	stmdaeq	r0, {r3, r5, r7, fp, sp, lr}
     a84:	080068b4 	stmdaeq	r0, {r2, r4, r5, r7, fp, sp, lr}
     a88:	080068b4 	stmdaeq	r0, {r2, r4, r5, r7, fp, sp, lr}
     a8c:	08006918 	stmdaeq	r0, {r3, r4, r8, fp, sp, lr}
	...
     a98:	08006918 	stmdaeq	r0, {r3, r4, r8, fp, sp, lr}
     a9c:	0800692c 	stmdaeq	r0, {r2, r3, r5, r8, fp, sp, lr}
     aa0:	0800692c 	stmdaeq	r0, {r2, r3, r5, r8, fp, sp, lr}
     aa4:	08006940 	stmdaeq	r0, {r6, r8, fp, sp, lr}
     aa8:	08006940 	stmdaeq	r0, {r6, r8, fp, sp, lr}
     aac:	08006974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp, sp, lr}
     ab0:	08006974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp, sp, lr}
     ab4:	080069a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, sp, lr}
     ab8:	080069a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, sp, lr}
     abc:	08006a00 	stmdaeq	r0, {r9, fp, sp, lr}
     ac0:	08006a00 	stmdaeq	r0, {r9, fp, sp, lr}
     ac4:	08006a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp, sp, lr}
     ac8:	08006a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp, sp, lr}
     acc:	08006b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, sp, lr}
     ad0:	08006b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, sp, lr}
     ad4:	08006d08 	stmdaeq	r0, {r3, r8, sl, fp, sp, lr}
     ad8:	08006d08 	stmdaeq	r0, {r3, r8, sl, fp, sp, lr}
     adc:	08007108 	stmdaeq	r0, {r3, r8, ip, sp, lr}
     ae0:	08007108 	stmdaeq	r0, {r3, r8, ip, sp, lr}
     ae4:	080074b8 	stmdaeq	r0, {r3, r4, r5, r7, sl, ip, sp, lr}
     ae8:	080074b8 	stmdaeq	r0, {r3, r4, r5, r7, sl, ip, sp, lr}
     aec:	08007590 	stmdaeq	r0, {r4, r7, r8, sl, ip, sp, lr}
     af0:	08007590 	stmdaeq	r0, {r4, r7, r8, sl, ip, sp, lr}
     af4:	080075dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, ip, sp, lr}
     af8:	080075dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, ip, sp, lr}
     afc:	080075fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, ip, sp, lr}
	...
     b08:	080075fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, ip, sp, lr}
     b0c:	0800764a 	stmdaeq	r0, {r1, r3, r6, r9, sl, ip, sp, lr}
     b10:	0800764c 	stmdaeq	r0, {r2, r3, r6, r9, sl, ip, sp, lr}
     b14:	080076a0 	stmdaeq	r0, {r5, r7, r9, sl, ip, sp, lr}
     b18:	080076a0 	stmdaeq	r0, {r5, r7, r9, sl, ip, sp, lr}
     b1c:	0800775e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}
     b20:	00000001 	andeq	r0, r0, r1
     b24:	00000001 	andeq	r0, r0, r1
     b28:	00000001 	andeq	r0, r0, r1
     b2c:	00000001 	andeq	r0, r0, r1
     b30:	08007760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip, sp, lr}
     b34:	0800779c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip, sp, lr}
     b38:	0800779c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip, sp, lr}
     b3c:	0800782e 	stmdaeq	r0, {r1, r2, r3, r5, fp, ip, sp, lr}
     b40:	08007830 	stmdaeq	r0, {r4, r5, fp, ip, sp, lr}
     b44:	080078b0 	stmdaeq	r0, {r4, r5, r7, fp, ip, sp, lr}
     b48:	080078b0 	stmdaeq	r0, {r4, r5, r7, fp, ip, sp, lr}
     b4c:	080078fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, ip, sp, lr}
     b50:	080078fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, ip, sp, lr}
     b54:	0800791a 	stmdaeq	r0, {r1, r3, r4, r8, fp, ip, sp, lr}
     b58:	0800791c 	stmdaeq	r0, {r2, r3, r4, r8, fp, ip, sp, lr}
     b5c:	08007c0e 	stmdaeq	r0, {r1, r2, r3, sl, fp, ip, sp, lr}
     b60:	00000001 	andeq	r0, r0, r1
     b64:	00000001 	andeq	r0, r0, r1
     b68:	08007c10 	stmdaeq	r0, {r4, sl, fp, ip, sp, lr}
     b6c:	08007c46 	stmdaeq	r0, {r1, r2, r6, sl, fp, ip, sp, lr}
     b70:	00000001 	andeq	r0, r0, r1
     b74:	00000001 	andeq	r0, r0, r1
     b78:	00000001 	andeq	r0, r0, r1
     b7c:	00000001 	andeq	r0, r0, r1
     b80:	00000001 	andeq	r0, r0, r1
     b84:	00000001 	andeq	r0, r0, r1
     b88:	08007c48 	stmdaeq	r0, {r3, r6, sl, fp, ip, sp, lr}
     b8c:	08007dca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sl, fp, ip, sp, lr}
     b90:	00000001 	andeq	r0, r0, r1
     b94:	00000001 	andeq	r0, r0, r1
	...
     ba0:	08007dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, ip, sp, lr}
     ba4:	08007e0a 	stmdaeq	r0, {r1, r3, r9, sl, fp, ip, sp, lr}
     ba8:	08007e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, ip, sp, lr}
     bac:	08007e24 	stmdaeq	r0, {r2, r5, r9, sl, fp, ip, sp, lr}
     bb0:	08007e24 	stmdaeq	r0, {r2, r5, r9, sl, fp, ip, sp, lr}
     bb4:	08007e6a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sl, fp, ip, sp, lr}
     bb8:	08007e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
     bbc:	08007edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
     bc0:	08007edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
     bc4:	08007f2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, sl, fp, ip, sp, lr}
	...
     bd0:	08007f30 	stmdaeq	r0, {r4, r5, r8, r9, sl, fp, ip, sp, lr}
     bd4:	08007fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
     bd8:	08007fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
     bdc:	08008040 	stmdaeq	r0, {r6, pc}
     be0:	08008040 	stmdaeq	r0, {r6, pc}
     be4:	0800807e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, pc}
     be8:	08008080 	stmdaeq	r0, {r7, pc}
     bec:	080080b4 	stmdaeq	r0, {r2, r4, r5, r7, pc}
     bf0:	080080b4 	stmdaeq	r0, {r2, r4, r5, r7, pc}
     bf4:	080080e4 	stmdaeq	r0, {r2, r5, r6, r7, pc}
     bf8:	080080e4 	stmdaeq	r0, {r2, r5, r6, r7, pc}
     bfc:	08008238 	stmdaeq	r0, {r3, r4, r5, r9, pc}
     c00:	00000001 	andeq	r0, r0, r1
     c04:	00000001 	andeq	r0, r0, r1
     c08:	00000001 	andeq	r0, r0, r1
     c0c:	00000001 	andeq	r0, r0, r1
     c10:	00000001 	andeq	r0, r0, r1
     c14:	00000001 	andeq	r0, r0, r1
     c18:	08008238 	stmdaeq	r0, {r3, r4, r5, r9, pc}
     c1c:	080083c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, pc}
     c20:	00000001 	andeq	r0, r0, r1
     c24:	00000001 	andeq	r0, r0, r1
     c28:	00000001 	andeq	r0, r0, r1
     c2c:	00000001 	andeq	r0, r0, r1
     c30:	00000001 	andeq	r0, r0, r1
     c34:	00000001 	andeq	r0, r0, r1
     c38:	00000001 	andeq	r0, r0, r1
     c3c:	00000001 	andeq	r0, r0, r1
     c40:	00000001 	andeq	r0, r0, r1
     c44:	00000001 	andeq	r0, r0, r1
     c48:	00000001 	andeq	r0, r0, r1
     c4c:	00000001 	andeq	r0, r0, r1
     c50:	00000001 	andeq	r0, r0, r1
     c54:	00000001 	andeq	r0, r0, r1
     c58:	080083c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, pc}
     c5c:	080083f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, pc}
     c60:	080083f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, pc}
     c64:	080084cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, pc}
     c68:	00000001 	andeq	r0, r0, r1
     c6c:	00000001 	andeq	r0, r0, r1
     c70:	080084cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, pc}
     c74:	08008570 	stmdaeq	r0, {r4, r5, r6, r8, sl, pc}
     c78:	08008570 	stmdaeq	r0, {r4, r5, r6, r8, sl, pc}
     c7c:	0800859c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, pc}
     c80:	00000001 	andeq	r0, r0, r1
     c84:	00000001 	andeq	r0, r0, r1
     c88:	0800859c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, pc}
     c8c:	080085cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, pc}
     c90:	00000001 	andeq	r0, r0, r1
     c94:	00000001 	andeq	r0, r0, r1
	...
     ca0:	080085cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, pc}
     ca4:	0800864e 	stmdaeq	r0, {r1, r2, r3, r6, r9, sl, pc}
     ca8:	08008650 	stmdaeq	r0, {r4, r6, r9, sl, pc}
     cac:	0800874e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, sl, pc}
     cb0:	08008750 	stmdaeq	r0, {r4, r6, r8, r9, sl, pc}
     cb4:	08008824 	stmdaeq	r0, {r2, r5, fp, pc}
     cb8:	00000001 	andeq	r0, r0, r1
     cbc:	00000001 	andeq	r0, r0, r1
     cc0:	08008824 	stmdaeq	r0, {r2, r5, fp, pc}
     cc4:	0800886c 	stmdaeq	r0, {r2, r3, r5, r6, fp, pc}
     cc8:	00000001 	andeq	r0, r0, r1
     ccc:	00000001 	andeq	r0, r0, r1
     cd0:	00000001 	andeq	r0, r0, r1
     cd4:	00000001 	andeq	r0, r0, r1
     cd8:	00000001 	andeq	r0, r0, r1
     cdc:	00000001 	andeq	r0, r0, r1
     ce0:	00000001 	andeq	r0, r0, r1
     ce4:	00000001 	andeq	r0, r0, r1
     ce8:	00000001 	andeq	r0, r0, r1
     cec:	00000001 	andeq	r0, r0, r1
     cf0:	00000001 	andeq	r0, r0, r1
     cf4:	00000001 	andeq	r0, r0, r1
     cf8:	00000001 	andeq	r0, r0, r1
     cfc:	00000001 	andeq	r0, r0, r1
     d00:	0800886c 	stmdaeq	r0, {r2, r3, r5, r6, fp, pc}
     d04:	080088d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, pc}
     d08:	00000001 	andeq	r0, r0, r1
     d0c:	00000001 	andeq	r0, r0, r1
     d10:	080088d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, pc}
     d14:	080088f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, pc}
     d18:	080088f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, pc}
     d1c:	08008a10 	stmdaeq	r0, {r4, r9, fp, pc}
     d20:	00000001 	andeq	r0, r0, r1
     d24:	00000001 	andeq	r0, r0, r1
     d28:	00000001 	andeq	r0, r0, r1
     d2c:	00000001 	andeq	r0, r0, r1
     d30:	00000001 	andeq	r0, r0, r1
     d34:	00000001 	andeq	r0, r0, r1
     d38:	00000001 	andeq	r0, r0, r1
     d3c:	00000001 	andeq	r0, r0, r1
     d40:	08008a10 	stmdaeq	r0, {r4, r9, fp, pc}
     d44:	08008b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, pc}
     d48:	08008b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, pc}
     d4c:	08008c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, pc}
     d50:	08008c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, pc}
     d54:	08008c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, pc}
     d58:	00000001 	andeq	r0, r0, r1
     d5c:	00000001 	andeq	r0, r0, r1
     d60:	08008c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, pc}
     d64:	08008d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, pc}
     d68:	00000001 	andeq	r0, r0, r1
     d6c:	00000001 	andeq	r0, r0, r1
     d70:	00000001 	andeq	r0, r0, r1
     d74:	00000001 	andeq	r0, r0, r1
     d78:	08008d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, pc}
     d7c:	08008d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, pc}
     d80:	08008d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, pc}
     d84:	08008dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp, pc}
     d88:	08008dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp, pc}
     d8c:	08008ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, pc}
     d90:	08008ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, pc}
     d94:	08008e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, pc}
     d98:	08008e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, pc}
     d9c:	08008e80 	stmdaeq	r0, {r7, r9, sl, fp, pc}
     da0:	08008e80 	stmdaeq	r0, {r7, r9, sl, fp, pc}
     da4:	08008e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, pc}
     da8:	08008e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, pc}
     dac:	08008ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, pc}
     db0:	00000001 	andeq	r0, r0, r1
     db4:	00000001 	andeq	r0, r0, r1
     db8:	08008ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, pc}
     dbc:	08008fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, pc}
     dc0:	08008fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, pc}
     dc4:	08009094 	stmdaeq	r0, {r2, r4, r7, ip, pc}
     dc8:	08009094 	stmdaeq	r0, {r2, r4, r7, ip, pc}
     dcc:	08009184 	stmdaeq	r0, {r2, r7, r8, ip, pc}
     dd0:	00000001 	andeq	r0, r0, r1
     dd4:	00000001 	andeq	r0, r0, r1
     dd8:	08009184 	stmdaeq	r0, {r2, r7, r8, ip, pc}
     ddc:	080091ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, ip, pc}
     de0:	00000001 	andeq	r0, r0, r1
     de4:	00000001 	andeq	r0, r0, r1
     de8:	00000001 	andeq	r0, r0, r1
     dec:	00000001 	andeq	r0, r0, r1
     df0:	00000001 	andeq	r0, r0, r1
     df4:	00000001 	andeq	r0, r0, r1
     df8:	00000001 	andeq	r0, r0, r1
     dfc:	00000001 	andeq	r0, r0, r1
     e00:	00000001 	andeq	r0, r0, r1
     e04:	00000001 	andeq	r0, r0, r1
     e08:	00000001 	andeq	r0, r0, r1
     e0c:	00000001 	andeq	r0, r0, r1
     e10:	080091ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, ip, pc}
     e14:	08009278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, pc}
	...
     e20:	08009278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, pc}
     e24:	080092d0 	stmdaeq	r0, {r4, r6, r7, r9, ip, pc}
     e28:	080092d0 	stmdaeq	r0, {r4, r6, r7, r9, ip, pc}
     e2c:	080092fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, ip, pc}
     e30:	08009300 	stmdaeq	r0, {r8, r9, ip, pc}
     e34:	08009326 	stmdaeq	r0, {r1, r2, r5, r8, r9, ip, pc}
     e38:	08009328 	stmdaeq	r0, {r3, r5, r8, r9, ip, pc}
     e3c:	08009344 	stmdaeq	r0, {r2, r6, r8, r9, ip, pc}
     e40:	08009348 	stmdaeq	r0, {r3, r6, r8, r9, ip, pc}
     e44:	08009388 	stmdaeq	r0, {r3, r7, r8, r9, ip, pc}
     e48:	00000001 	andeq	r0, r0, r1
     e4c:	00000001 	andeq	r0, r0, r1
     e50:	08009388 	stmdaeq	r0, {r3, r7, r8, r9, ip, pc}
     e54:	080093b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, ip, pc}
     e58:	080093b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, ip, pc}
     e5c:	080093e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, ip, pc}
     e60:	080093f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip, pc}
     e64:	08009436 	stmdaeq	r0, {r1, r2, r4, r5, sl, ip, pc}
     e68:	08009438 	stmdaeq	r0, {r3, r4, r5, sl, ip, pc}
     e6c:	08009478 	stmdaeq	r0, {r3, r4, r5, r6, sl, ip, pc}
     e70:	08009478 	stmdaeq	r0, {r3, r4, r5, r6, sl, ip, pc}
     e74:	080094ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, ip, pc}
	...
     e80:	080094ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, ip, pc}
     e84:	08009538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip, pc}
     e88:	08009538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip, pc}
     e8c:	0800954a 	stmdaeq	r0, {r1, r3, r6, r8, sl, ip, pc}
     e90:	00000001 	andeq	r0, r0, r1
     e94:	00000001 	andeq	r0, r0, r1
     e98:	00000001 	andeq	r0, r0, r1
     e9c:	00000001 	andeq	r0, r0, r1
	...
     ea8:	0000000a 	andeq	r0, r0, sl
     eac:	0000000e 	andeq	r0, r0, lr
     eb0:	00000018 	andeq	r0, r0, r8, lsl r0
     eb4:	00000048 	andeq	r0, r0, r8, asr #32
     eb8:	0000004a 	andeq	r0, r0, sl, asr #32
     ebc:	00000058 	andeq	r0, r0, r8, asr r0
	...
     ec8:	0000001e 	andeq	r0, r0, lr, lsl r0
     ecc:	00000034 	andeq	r0, r0, r4, lsr r0
     ed0:	00000036 	andeq	r0, r0, r6, lsr r0
     ed4:	00000048 	andeq	r0, r0, r8, asr #32
     ed8:	0000004a 	andeq	r0, r0, sl, asr #32
     edc:	00000058 	andeq	r0, r0, r8, asr r0
	...
     ee8:	0000006c 	andeq	r0, r0, ip, rrx
     eec:	00000090 	muleq	r0, r0, r0
     ef0:	00000098 	muleq	r0, r8, r0
     ef4:	000000e2 	andeq	r0, r0, r2, ror #1
	...
     f00:	0000009e 	muleq	r0, lr, r0
     f04:	000000a4 	andeq	r0, r0, r4, lsr #1
     f08:	000000a6 	andeq	r0, r0, r6, lsr #1
     f0c:	000000bc 	strheq	r0, [r0], -ip
     f10:	000000be 	strheq	r0, [r0], -lr
     f14:	000000e2 	andeq	r0, r0, r2, ror #1
	...
     f20:	08000590 	stmdaeq	r0, {r4, r7, r8, sl}
     f24:	0800064a 	stmdaeq	r0, {r1, r3, r6, r9, sl}
	...
     f30:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
     f34:	080006a8 	stmdaeq	r0, {r3, r5, r7, r9, sl}
	...
     f40:	00000020 	andeq	r0, r0, r0, lsr #32
     f44:	00000032 	andeq	r0, r0, r2, lsr r0
     f48:	00000064 	andeq	r0, r0, r4, rrx
     f4c:	0000006e 	andeq	r0, r0, lr, rrx
     f50:	00000084 	andeq	r0, r0, r4, lsl #1
     f54:	0000008e 	andeq	r0, r0, lr, lsl #1
     f58:	00000096 	muleq	r0, r6, r0
     f5c:	000000ac 	andeq	r0, r0, ip, lsr #1
	...
     f68:	00000036 	andeq	r0, r0, r6, lsr r0
     f6c:	00000060 	andeq	r0, r0, r0, rrx
     f70:	000000ac 	andeq	r0, r0, ip, lsr #1
     f74:	000000bc 	strheq	r0, [r0], -ip
	...
     f80:	0000003a 	andeq	r0, r0, sl, lsr r0
     f84:	000000a4 	andeq	r0, r0, r4, lsr #1
     f88:	000000a8 	andeq	r0, r0, r8, lsr #1
     f8c:	000000b6 	strheq	r0, [r0], -r6
	...
     f98:	000000fa 	strdeq	r0, [r0], -sl
     f9c:	0000014c 	andeq	r0, r0, ip, asr #2
     fa0:	0000014e 	andeq	r0, r0, lr, asr #2
     fa4:	00000156 	andeq	r0, r0, r6, asr r1
     fa8:	00000186 	andeq	r0, r0, r6, lsl #3
     fac:	000001a0 	andeq	r0, r0, r0, lsr #3
	...
     fb8:	00000046 	andeq	r0, r0, r6, asr #32
     fbc:	00000078 	andeq	r0, r0, r8, ror r0
     fc0:	000000f4 	strdeq	r0, [r0], -r4
     fc4:	00000106 	andeq	r0, r0, r6, lsl #2
	...
     fd0:	000000d6 	ldrdeq	r0, [r0], -r6
     fd4:	000000ec 	andeq	r0, r0, ip, ror #1
     fd8:	00000126 	andeq	r0, r0, r6, lsr #2
     fdc:	0000012c 	andeq	r0, r0, ip, lsr #2
	...
     fe8:	00000164 	andeq	r0, r0, r4, ror #2
     fec:	0000016e 	andeq	r0, r0, lr, ror #2
     ff0:	00000172 	andeq	r0, r0, r2, ror r1
     ff4:	00000186 	andeq	r0, r0, r6, lsl #3
     ff8:	0000019a 	muleq	r0, sl, r1
     ffc:	000001f6 	strdeq	r0, [r0], -r6
    1000:	000001f8 	strdeq	r0, [r0], -r8
    1004:	00000218 	andeq	r0, r0, r8, lsl r2
    1008:	0000021a 	andeq	r0, r0, sl, lsl r2
    100c:	0000021e 	andeq	r0, r0, lr, lsl r2
    1010:	00000298 	muleq	r0, r8, r2
    1014:	000002ae 	andeq	r0, r0, lr, lsr #5
    1018:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    101c:	000002ee 	andeq	r0, r0, lr, ror #5
    1020:	000002f2 	strdeq	r0, [r0], -r2
    1024:	00000306 	andeq	r0, r0, r6, lsl #6
    1028:	0000030e 	andeq	r0, r0, lr, lsl #6
    102c:	00000322 	andeq	r0, r0, r2, lsr #6
    1030:	00000326 	andeq	r0, r0, r6, lsr #6
    1034:	0000036c 	andeq	r0, r0, ip, ror #6
    1038:	00000378 	andeq	r0, r0, r8, ror r3
    103c:	000003dc 	ldrdeq	r0, [r0], -ip
	...
    1048:	00000242 	andeq	r0, r0, r2, asr #4
    104c:	00000244 	andeq	r0, r0, r4, asr #4
    1050:	00000248 	andeq	r0, r0, r8, asr #4
    1054:	0000024a 	andeq	r0, r0, sl, asr #4
    1058:	0000024c 	andeq	r0, r0, ip, asr #4
    105c:	00000276 	andeq	r0, r0, r6, ror r2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
{
       0:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
}
       4:	01060002 	tsteq	r6, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
    bitstatus = SET;
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    bitstatus = RESET;
      20:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
  return bitstatus;
      24:	2f767375 	svccs	0x00767375
}
      28:	53414454 	movtpl	r4, #5204	; 0x1454
      2c:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
      30:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
      34:	5349534d 	movtpl	r5, #37709	; 0x934d
      38:	334d432f 	movtcc	r4, #54063	; 0xd32f
      3c:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
      40:	53656369 	cmnpl	r5, #-1543503871	; 0xa4000001
      44:	6f707075 	svcvs	0x00707075
      48:	532f7472 			; <UNDEFINED> instruction: 0x532f7472
      4c:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xfffff0ac
      50:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      54:	00783031 	rsbseq	r3, r8, r1, lsr r0
      58:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
        Driver_OLED_Send_START(OLED_DATA);
      5c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
        for(x=x0;x<x1;x++){ 
      60:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
            I2C_SendData(OLED_HARDWARE, BMP[j++]);
      64:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      68:	2f62696c 	svccs	0x0062696c
      6c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
      70:	00656e69 	rsbeq	r6, r5, r9, ror #28
      74:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);    	
      78:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      7c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      80:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      84:	2f62696c 	svccs	0x0062696c
        for(x=x0;x<x1;x++){ 
      88:	00737973 	rsbseq	r7, r3, r3, ror r9
      8c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffd8 <BootRAM+0xef70779>
      90:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
      94:	76737572 			; <UNDEFINED> instruction: 0x76737572
        _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
      98:	4144542f 	cmpmi	r4, pc, lsr #8
      9c:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
      a0:	2f544f49 	svccs	0x00544f49
      a4:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
	for(y=y0;y<y1;y++){
      a8:	4d432f53 	stclmi	15, cr2, [r3, #-332]	; 0xfffffeb4
      ac:	6f432f33 	svcvs	0x00432f33
      b0:	75536572 	ldrbvc	r6, [r3, #-1394]	; 0xfffffa8e
}
      b4:	726f7070 	rsbvc	r7, pc, #112	; 0x70
      b8:	73000074 	movwvc	r0, #116	; 0x74
      bc:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
      c0:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
      c4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
      c8:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
      cc:	00010063 	andeq	r0, r1, r3, rrx
      d0:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
      d4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
      d8:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
      dc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
      e0:	00020068 	andeq	r0, r2, r8, rrx
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      e4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      e8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
      ec:	0300682e 	movweq	r6, #2094	; 0x82e
      f0:	6f630000 	svcvs	0x00630000
				prvUnlockQueue( pxQueue );
      f4:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
      f8:	682e336d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
				if( xTaskResumeAll() == pdFALSE )
      fc:	00000400 	andeq	r0, r0, r0, lsl #8
     100:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
					portYIELD_WITHIN_API();
     104:	30316632 	eorscc	r6, r1, r2, lsr r6
     108:	00682e78 	rsbeq	r2, r8, r8, ror lr
     10c:	00000001 	andeq	r0, r0, r1
     110:	e4020500 	str	r0, [r2], #-1280	; 0xfffffb00
     114:	03080012 	movweq	r0, #32786	; 0x8012
				prvUnlockQueue( pxQueue );
     118:	310101d4 	ldrdcc	r0, [r1, -r4]
				( void ) xTaskResumeAll();
     11c:	69856c6a 	stmibvs	r5, {r1, r3, r5, r6, sl, fp, sp, lr}
     120:	03661303 	cmneq	r6, #201326592	; 0xc000000
			prvUnlockQueue( pxQueue );
     124:	4c324a0b 			; <UNDEFINED> instruction: 0x4c324a0b
			( void ) xTaskResumeAll();
     128:	00070221 	andeq	r0, r7, r1, lsr #4
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     12c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     130:	00000002 	andeq	r0, r0, r2
     134:	02b20300 	adcseq	r0, r2, #0, 6
     138:	0b033d01 	bleq	cf544 <_Min_Stack_Size+0xcf344>
}
     13c:	3d775a66 	vldmdbcc	r7!, {s11-s112}
     140:	59243d22 	stmdbpl	r4!, {r1, r5, r8, sl, fp, ip, sp}
     144:	033f4c5b 	teqeq	pc, #23296	; 0x5b00
     148:	4f03663b 	svcmi	0x0003663b
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     14c:	2f036820 	svccs	0x00036820
  SPIx->I2SCFGR = tmpreg;   
     150:	20550366 	subscs	r0, r5, r6, ror #6
     154:	23662b03 	cmncs	r6, #3072	; 0xc00
}
     158:	7592253d 	ldrvc	r2, [r2, #1341]	; 0x53d
     15c:	01000f02 	tsteq	r0, r2, lsl #30
     160:	02050001 	andeq	r0, r5, #1
     164:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
         *(uint16_t*) arg = getSn_KPALVTR(sn);
     168:	0103a303 	tsteq	r3, r3, lsl #6
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     16c:	332e0d03 			; <UNDEFINED> instruction: 0x332e0d03
     170:	01000202 	tsteq	r0, r2, lsl #4
     174:	02050001 	andeq	r0, r5, #1
     178:	08001358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip}
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     17c:	0107dc03 	tsteq	r7, r3, lsl #24
     180:	02004e3d 	andeq	r4, r0, #976	; 0x3d0
     184:	006b0204 	rsbeq	r0, fp, r4, lsl #4
     188:	59020402 	stmdbpl	r2, {r1, sl}
         *(uint8_t*) arg = getSn_SR(sn);
     18c:	02040200 	andeq	r0, r4, #0, 4
     190:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     194:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     198:	3140684c 	cmpcc	r0, ip, asr #16
     19c:	6a67693f 	bvs	19da6a0 <_Min_Stack_Size+0x19da4a0>
     1a0:	1a034d4d 	bne	d36dc <_Min_Stack_Size+0xd34dc>
     1a4:	696b6866 	stmdbvs	fp!, {r1, r2, r5, r6, fp, sp, lr}^
         if(getSn_MR(sn) == Sn_MR_TCP)
     1a8:	01040200 	mrseq	r0, R12_usr
     1ac:	6b062006 	blvs	1881cc <_Min_Stack_Size+0x187fcc>
     1b0:	02006967 	andeq	r6, r0, #1687552	; 0x19c000
     1b4:	20060104 	andcs	r0, r6, r4, lsl #2
     1b8:	66090306 	strvs	r0, [r9], -r6, lsl #6
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1bc:	01000a02 	tsteq	r0, r2, lsl #20
     1c0:	00034901 	andeq	r4, r3, r1, lsl #18
     1c4:	27000200 	strcs	r0, [r0, -r0, lsl #4]
     1c8:	02000001 	andeq	r0, r0, #1
         break;
     1cc:	0d0efb01 	vstreq	d15, [lr, #-4]
            *(uint16_t*)arg = sock_remained_size[sn];
     1d0:	01010100 	mrseq	r0, (UNDEF: 17)
     1d4:	00000001 	andeq	r0, r0, r1
     1d8:	01000001 	tsteq	r0, r1
         CHECK_SOCKMODE(Sn_MR_TCP);
     1dc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 128 <_Min_Heap_Size+0x128>
     1e0:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     1e4:	76737572 			; <UNDEFINED> instruction: 0x76737572
     1e8:	4144542f 	cmpmi	r4, pc, lsr #8
     1ec:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
     1f0:	2f544f49 	svccs	0x00544f49
     1f4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     1f8:	2f007265 	svccs	0x00007265
         *(uint8_t*)arg = sock_pack_info[sn];
     1fc:	2f727375 	svccs	0x00727375
     200:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
         break;
     204:	2f656475 	svccs	0x00656475
         return SOCKERR_SOCKOPT;
     208:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
   return SOCK_OK;
     20c:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 70 <_Min_Heap_Size+0x70>
}
     210:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     214:	2f00656e 	svccs	0x0000656e
     218:	2f727375 	svccs	0x00727375
     21c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     220:	2f656475 	svccs	0x00656475
     224:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     228:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     22c:	2f007379 	svccs	0x00007379
     230:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     234:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
     238:	2f767375 	svccs	0x00767375
     23c:	53414454 	movtpl	r4, #5204	; 0x1454
     240:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
     244:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
     248:	5349534d 	movtpl	r5, #37709	; 0x934d
     24c:	334d432f 	movtcc	r4, #54063	; 0xd32f
     250:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
	memset(packet, 0, sizeof(packet));
     254:	53656369 	cmnpl	r5, #-1543503871	; 0xa4000001
     258:	6f707075 	svcvs	0x00707075
     25c:	532f7472 			; <UNDEFINED> instruction: 0x532f7472
	memcpy(packet, fixed_header, sizeof(fixed_header));
     260:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xfffff0ac
     264:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     268:	00783031 	rsbseq	r3, r8, r1, lsr r0
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1b8 <_Min_Heap_Size+0x1b8>
     270:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     274:	76737572 			; <UNDEFINED> instruction: 0x76737572
     278:	4144542f 	cmpmi	r4, pc, lsr #8
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     27c:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
     280:	2f544f49 	svccs	0x00544f49
     284:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     288:	4d432f53 	stclmi	15, cr2, [r3, #-332]	; 0xfffffeb4
     28c:	6f432f33 	svcvs	0x00432f33
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     290:	75536572 	ldrbvc	r6, [r3, #-1394]	; 0xfffffa8e
     294:	726f7070 	rsbvc	r7, pc, #112	; 0x70
     298:	4f000074 	svcmi	0x00000074
     29c:	2e44454c 	cdpcs	5, 4, cr4, cr4, cr12, {2}
     2a0:	00010063 	andeq	r0, r1, r3, rrx
		return -1;
     2a4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     2a8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
	return 1;
     2ac:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
}
     2b0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     2b4:	00020068 	andeq	r0, r2, r8, rrx
     2b8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     2bc:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     2c0:	0300682e 	movweq	r6, #2094	; 0x82e
     2c4:	74730000 	ldrbtvc	r0, [r3], #-0
     2c8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     2cc:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
     2d0:	00040068 	andeq	r0, r4, r8, rrx
     2d4:	726f6300 	rsbvc	r6, pc, #0, 6
     2d8:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     2dc:	00682e33 	rsbeq	r2, r8, r3, lsr lr
     2e0:	6f000005 	svcvs	0x00000005
     2e4:	6664656c 	strbtvs	r6, [r4], -ip, ror #10
     2e8:	2e746e6f 	cdpcs	14, 7, cr6, cr4, cr15, {3}
     2ec:	00010068 	andeq	r0, r1, r8, rrx
     2f0:	05000000 	streq	r0, [r0, #-0]
     2f4:	00145802 	andseq	r5, r4, r2, lsl #16
     2f8:	01120308 	tsteq	r2, r8, lsl #6
     2fc:	02004d4d 	andeq	r4, r0, #4928	; 0x1340
     300:	20060104 	andcs	r0, r6, r4, lsl #2
     304:	005a7606 	subseq	r7, sl, r6, lsl #12
     308:	06010402 	streq	r0, [r1], -r2, lsl #8
     30c:	3d760620 	ldclcc	6, cr0, [r6, #-128]!	; 0xffffff80
     310:	02004c5a 	andeq	r4, r0, #23040	; 0x5a00
     314:	20060104 	andcs	r0, r6, r4, lsl #2
     318:	0d027606 	stceq	6, cr7, [r2, #-24]	; 0xffffffe8
     31c:	00010100 	andeq	r0, r1, r0, lsl #2
     320:	14d40205 	ldrbne	r0, [r4], #517	; 0x205
     324:	28030800 	stmdacs	r3, {fp}
     328:	853d5c01 	ldrhi	r5, [sp, #-3073]!	; 0xfffff3ff
     32c:	01040200 	mrseq	r0, R12_usr
     330:	02002006 	andeq	r2, r0, #6
     334:	70060204 	andvc	r0, r6, r4, lsl #4
     338:	01040200 	mrseq	r0, R12_usr
     33c:	51063c06 	tstpl	r6, r6, lsl #24
     340:	01040200 	mrseq	r0, R12_usr
     344:	76062006 	strvc	r2, [r6], -r6
     348:	01000b02 	tsteq	r0, r2, lsl #22
     34c:	02050001 	andeq	r0, r5, #1
     350:	08001538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip}
     354:	5b013803 	blpl	4e368 <_Min_Stack_Size+0x4e168>
     358:	753e3e4c 	ldrvc	r3, [lr, #-3660]!	; 0xfffff1b4
     35c:	01040200 	mrseq	r0, R12_usr
     360:	76062006 	strvc	r2, [r6], -r6
     364:	5a3e3d68 	bpl	f8f90c <_Min_Stack_Size+0xf8f70c>
     368:	01040200 	mrseq	r0, R12_usr
     36c:	02002006 	andeq	r2, r0, #6
     370:	70060204 	andvc	r0, r6, r4, lsl #4
     374:	01040200 	mrseq	r0, R12_usr
     378:	02003c06 	andeq	r3, r0, #1536	; 0x600
     37c:	03060204 	movweq	r0, #25092	; 0x6204
     380:	02004a76 	andeq	r4, r0, #483328	; 0x76000
     384:	3c060104 	stfccs	f0, [r6], {4}
     388:	3c120306 	ldccc	3, cr0, [r2], {6}
     38c:	01040200 	mrseq	r0, R12_usr
     390:	76062006 	strvc	r2, [r6], -r6
     394:	01000c02 	tsteq	r0, r2, lsl #24
     398:	02050001 	andeq	r0, r5, #1
     39c:	080015e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip}
     3a0:	0100d403 	tsteq	r0, r3, lsl #8
     3a4:	753e4c5b 	ldrvc	r4, [lr, #-3163]!	; 0xfffff3a5
     3a8:	01040200 	mrseq	r0, R12_usr
     3ac:	76062006 	strvc	r2, [r6], -r6
     3b0:	4c3e3d68 	ldcmi	13, cr3, [lr], #-416	; 0xfffffe60
     3b4:	01040200 	mrseq	r0, R12_usr
     3b8:	02002006 	andeq	r2, r0, #6
     3bc:	70060204 	andvc	r0, r6, r4, lsl #4
     3c0:	01040200 	mrseq	r0, R12_usr
     3c4:	51063c06 	tstpl	r6, r6, lsl #24
     3c8:	01040200 	mrseq	r0, R12_usr
     3cc:	76062006 	strvc	r2, [r6], -r6
     3d0:	01000c02 	tsteq	r0, r2, lsl #24
     3d4:	02050001 	andeq	r0, r5, #1
     3d8:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
     3dc:	0100ed03 	tsteq	r0, r3, lsl #26
     3e0:	02007584 	andeq	r7, r0, #132, 10	; 0x21000000
     3e4:	20060104 	andcs	r0, r6, r4, lsl #2
     3e8:	009f7506 	addseq	r7, pc, r6, lsl #10
     3ec:	06010402 	streq	r0, [r1], -r2, lsl #8
     3f0:	83750620 	cmnhi	r5, #32, 12	; 0x2000000
     3f4:	01040200 	mrseq	r0, R12_usr
     3f8:	76062006 	strvc	r2, [r6], -r6
     3fc:	01000b02 	tsteq	r0, r2, lsl #22
     400:	02050001 	andeq	r0, r5, #1
     404:	0800170c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip}
     408:	0100f903 	tsteq	r0, r3, lsl #18	; <UNPREDICTABLE>
     40c:	913e2fe5 	teqls	lr, r5, ror #31
     410:	673e3e4c 	ldrvs	r3, [lr, -ip, asr #28]!
     414:	02003e3e 	andeq	r3, r0, #992	; 0x3e0
     418:	4a060104 	bmi	180830 <_Min_Stack_Size+0x180630>
     41c:	02040200 	andeq	r0, r4, #0, 4
     420:	04020090 	streq	r0, [r2], #-144	; 0xffffff70
     424:	02006604 	andeq	r6, r0, #4, 12	; 0x400000
     428:	4b060404 	blmi	181440 <_Min_Stack_Size+0x181240>
     42c:	01040200 	mrseq	r0, R12_usr
     430:	02002006 	andeq	r2, r0, #6
     434:	71060204 	tstvc	r6, r4, lsl #4
     438:	01040200 	mrseq	r0, R12_usr
     43c:	42063c06 	andmi	r3, r6, #1536	; 0x600
     440:	3d3e833d 	ldccc	3, cr8, [lr, #-244]!	; 0xffffff0c
     444:	040200ad 	streq	r0, [r2], #-173	; 0xffffff53
     448:	00200601 	eoreq	r0, r0, r1, lsl #12
     44c:	06020402 	streq	r0, [r2], -r2, lsl #8
     450:	04020072 	streq	r0, [r2], #-114	; 0xffffff8e
     454:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     458:	3d673d4f 	stclcc	13, cr3, [r7, #-316]!	; 0xfffffec4
     45c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     460:	004a0601 	subeq	r0, sl, r1, lsl #12
     464:	c8020402 	stmdagt	r2, {r1, sl}
     468:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     46c:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     470:	004b0604 	subeq	r0, fp, r4, lsl #12
     474:	06010402 	streq	r0, [r1], -r2, lsl #8
     478:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
     47c:	00720602 	rsbseq	r0, r2, r2, lsl #12
     480:	06010402 	streq	r0, [r1], -r2, lsl #8
     484:	0042063c 	subeq	r0, r2, ip, lsr r6
     488:	06010402 	streq	r0, [r1], -r2, lsl #8
     48c:	02760620 	rsbseq	r0, r6, #32, 12	; 0x2000000
     490:	0101000f 	tsteq	r1, pc
     494:	b8020500 	stmdalt	r2, {r8, sl}
     498:	03080018 	movweq	r0, #32792	; 0x8018
     49c:	ad0101a4 	stfges	f0, [r1, #-656]	; 0xfffffd70
     4a0:	3dc9212f 	stfcce	f2, [r9, #188]	; 0xbc
     4a4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     4a8:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     4ac:	02003d68 	andeq	r3, r0, #104, 26	; 0x1a00
     4b0:	3c060104 	stfccs	f0, [r6], {4}
     4b4:	77035a06 	strvc	r5, [r3, -r6, lsl #20]
     4b8:	660c033c 			; <UNDEFINED> instruction: 0x660c033c
     4bc:	01000402 	tsteq	r0, r2, lsl #8
     4c0:	02050001 	andeq	r0, r5, #1
     4c4:	00000000 	andeq	r0, r0, r0
     4c8:	0101b503 	tsteq	r1, r3, lsl #10
     4cc:	020030e5 	andeq	r3, r0, #229	; 0xe5
     4d0:	66060104 	strvs	r0, [r6], -r4, lsl #2
     4d4:	3e594b06 	vnmlscc.f64	d20, d9, d6
     4d8:	3d3d683d 	ldccc	8, cr6, [sp, #-244]!	; 0xffffff0c
     4dc:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
     4e0:	00200601 	eoreq	r0, r0, r1, lsl #12
     4e4:	06020402 	streq	r0, [r2], -r2, lsl #8
     4e8:	04020072 	streq	r0, [r2], #-114	; 0xffffff8e
     4ec:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     4f0:	0402004f 	streq	r0, [r2], #-79	; 0xffffffb1
     4f4:	00200601 	eoreq	r0, r0, r1, lsl #12
     4f8:	06020402 	streq	r0, [r2], -r2, lsl #8
     4fc:	00747503 	rsbseq	r7, r4, r3, lsl #10
     500:	06010402 	streq	r0, [r1], -r2, lsl #8
     504:	0e03063c 	mcreq	6, 0, r0, cr3, cr12, {1}
     508:	000a024a 	andeq	r0, sl, sl, asr #4
     50c:	04fa0101 	ldrbteq	r0, [sl], #257	; 0x101
     510:	00020000 	andeq	r0, r2, r0
     514:	000000a1 	andeq	r0, r0, r1, lsr #1
     518:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     51c:	0101000d 	tsteq	r1, sp
     520:	00000101 	andeq	r0, r0, r1, lsl #2
     524:	00000100 	andeq	r0, r0, r0, lsl #2
     528:	6f682f01 	svcvs	0x00682f01
     52c:	762f656d 	strtvc	r6, [pc], -sp, ror #10
     530:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
     534:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
     538:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
     53c:	544f492d 	strbpl	r4, [pc], #-2349	; 544 <_Min_Stack_Size+0x344>
     540:	6874452f 	ldmdavs	r4!, {r0, r1, r2, r3, r5, r8, sl, lr}^
     544:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     548:	752f0074 	strvc	r0, [pc, #-116]!	; 4dc <_Min_Stack_Size+0x2dc>
     54c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     550:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     554:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     558:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     55c:	616d2f62 	cmnvs	sp, r2, ror #30
     560:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     564:	752f0065 	strvc	r0, [pc, #-101]!	; 507 <_Min_Stack_Size+0x307>
     568:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     56c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     570:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     574:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     578:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
     57c:	73000073 	movwvc	r0, #115	; 0x73
     580:	656b636f 	strbvs	r6, [fp, #-879]!	; 0xfffffc91
     584:	00632e74 	rsbeq	r2, r3, r4, ror lr
     588:	5f000001 	svcpl	0x00000001
     58c:	61666564 	cmnvs	r6, r4, ror #10
     590:	5f746c75 	svcpl	0x00746c75
     594:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     598:	00682e73 	rsbeq	r2, r8, r3, ror lr
     59c:	5f000002 	svcpl	0x00000002
     5a0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     5a4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     5a8:	00000300 	andeq	r0, r0, r0, lsl #6
     5ac:	6b636f73 	blvs	18dc380 <_Min_Stack_Size+0x18dc180>
     5b0:	682e7465 	stmdavs	lr!, {r0, r2, r5, r6, sl, ip, sp, lr}
     5b4:	00000100 	andeq	r0, r0, r0, lsl #2
     5b8:	02050000 	andeq	r0, r5, #0
     5bc:	0800193c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip}
     5c0:	0100d003 	tsteq	r0, r3
     5c4:	040200e5 	streq	r0, [r2], #-229	; 0xffffff1b
     5c8:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     5cc:	740c033d 	strvc	r0, [ip], #-829	; 0xfffffcc3
     5d0:	033c7903 	teqeq	ip, #49152	; 0xc000
     5d4:	02002009 	andeq	r2, r0, #9
     5d8:	58060104 	stmdapl	r6, {r2, r8}
     5dc:	033e4106 	teqeq	lr, #-2147483647	; 0x80000001
     5e0:	71035812 	tstvc	r3, r2, lsl r8
     5e4:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
     5e8:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     5ec:	02005a3f 	andeq	r5, r0, #258048	; 0x3f000
     5f0:	4a060104 	bmi	180a08 <_Min_Stack_Size+0x180808>
     5f4:	005a3f06 	subseq	r3, sl, r6, lsl #30
     5f8:	06010402 	streq	r0, [r1], -r2, lsl #8
     5fc:	7703064a 	strvc	r0, [r3, -sl, asr #12]
     600:	2e0c033c 	mcrcs	3, 0, r0, cr12, cr12, {1}
     604:	21084b25 	tstcs	r8, r5, lsr #22
     608:	0200753e 	andeq	r7, r0, #260046848	; 0xf800000
     60c:	66060104 	strvs	r0, [r6], -r4, lsl #2
     610:	ad084c06 	stcge	12, cr4, [r8, #-24]	; 0xffffffe8
     614:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
     618:	06200601 	strteq	r0, [r0], -r1, lsl #12
     61c:	e5e5e5bc 	strb	lr, [r5, #1468]!	; 0x5bc
     620:	02004b59 	andeq	r4, r0, #91136	; 0x16400
     624:	20060104 	andcs	r0, r6, r4, lsl #2
     628:	022fbb06 	eoreq	fp, pc, #6144	; 0x1800
     62c:	0101000e 	tsteq	r1, lr
     630:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
     634:	0308001b 	movweq	r0, #32795	; 0x801b
     638:	59010191 	stmdbpl	r1, {r0, r4, r7, r8}
     63c:	01040200 	mrseq	r0, R12_usr
     640:	3e063c06 	cdpcc	12, 0, cr3, cr6, cr6, {0}
     644:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
     648:	06200601 	strteq	r0, [r0], -r1, lsl #12
     64c:	59e59fbc 	stmibpl	r5!, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip, pc}^
     650:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
     654:	06200601 	strteq	r0, [r0], -r1, lsl #12
     658:	0a0221bb 	beq	88d4c <_Min_Stack_Size+0x88b4c>
     65c:	00010100 	andeq	r0, r1, r0, lsl #2
     660:	00000205 	andeq	r0, r0, r5, lsl #4
     664:	a1030000 	mrsge	r0, (UNDEF: 3)
     668:	00590101 	subseq	r0, r9, r1, lsl #2
     66c:	06010402 	streq	r0, [r1], -r2, lsl #8
     670:	003d063c 	eorseq	r0, sp, ip, lsr r6
     674:	06010402 	streq	r0, [r1], -r2, lsl #8
     678:	003d06ba 	ldrhteq	r0, [sp], -sl
     67c:	06010402 	streq	r0, [r1], -r2, lsl #8
     680:	9f3d06ba 	svcls	0x003d06ba
     684:	01040200 	mrseq	r0, R12_usr
     688:	bb062006 	bllt	1886a8 <_Min_Stack_Size+0x1884a8>
     68c:	374bbc22 	strbcc	fp, [fp, -r2, lsr #24]
     690:	040221c2 	streq	r2, [r2], #-450	; 0xfffffe3e
     694:	00010100 	andeq	r0, r1, r0, lsl #2
     698:	1bfc0205 	blne	fff00eb4 <BootRAM+0xee71655>
     69c:	b4030800 	strlt	r0, [r3], #-2048	; 0xfffff800
     6a0:	00830101 	addeq	r0, r3, r1, lsl #2
     6a4:	06010402 	streq	r0, [r1], -r2, lsl #8
     6a8:	003d063c 	eorseq	r0, sp, ip, lsr r6
     6ac:	06010402 	streq	r0, [r1], -r2, lsl #8
     6b0:	003d06ba 	ldrhteq	r0, [sp], -sl
     6b4:	06010402 	streq	r0, [r1], -r2, lsl #8
     6b8:	003d06ba 	ldrhteq	r0, [sp], -sl
     6bc:	06020402 	streq	r0, [r2], -r2, lsl #8
     6c0:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
     6c4:	3d064a03 	vstrcc	s8, [r6, #-12]
     6c8:	01040200 	mrseq	r0, R12_usr
     6cc:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
     6d0:	9fb008ad 	svcls	0x00b008ad
     6d4:	01040200 	mrseq	r0, R12_usr
     6d8:	bb062006 	bllt	1886f8 <_Min_Stack_Size+0x1884f8>
     6dc:	01040200 	mrseq	r0, R12_usr
     6e0:	31069e06 	tstcc	r6, r6, lsl #28
     6e4:	7803a2d8 	stmdavc	r3, {r3, r4, r6, r7, r9, sp, pc}
     6e8:	ba0f033c 	blt	3c13e0 <_Min_Stack_Size+0x3c11e0>
     6ec:	00060221 	andeq	r0, r6, r1, lsr #4
     6f0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     6f4:	00000002 	andeq	r0, r0, r2
     6f8:	01d50300 	bicseq	r0, r5, r0, lsl #6
     6fc:	02005901 	andeq	r5, r0, #16384	; 0x4000
     700:	3c060104 	stfccs	f0, [r6], {4}
     704:	02003d06 	andeq	r3, r0, #384	; 0x180
     708:	ba060104 	blt	180b20 <_Min_Stack_Size+0x180920>
     70c:	00a03d06 	adceq	r3, r0, r6, lsl #26
     710:	06010402 	streq	r0, [r1], -r2, lsl #8
     714:	e5bb0620 	ldr	r0, [fp, #1568]!	; 0x620
     718:	01040200 	mrseq	r0, R12_usr
     71c:	31069e06 	tstcc	r6, r6, lsl #28
     720:	c2374bd8 	eorsgt	r4, r7, #216, 22	; 0x36000
     724:	00080221 	andeq	r0, r8, r1, lsr #4
     728:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     72c:	001d6802 	andseq	r6, sp, r2, lsl #16
     730:	01e90308 	mvneq	r0, r8, lsl #6
     734:	302f8301 	eorcc	r8, pc, r1, lsl #6
     738:	01040200 	mrseq	r0, R12_usr
     73c:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
     740:	01040200 	mrseq	r0, R12_usr
     744:	3d06ba06 	vstrcc	s22, [r6, #-24]	; 0xffffffe8
     748:	01040200 	mrseq	r0, R12_usr
     74c:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
     750:	040200ad 	streq	r0, [r2], #-173	; 0xffffff53
     754:	003c0601 	eorseq	r0, ip, r1, lsl #12
     758:	3c020402 	cfstrscc	mvf0, [r2], {2}
     75c:	c9a03d06 	stmibgt	r0!, {r1, r2, r8, sl, fp, ip, sp}
     760:	9e09035a 	mcrls	3, 0, r0, cr9, cr10, {2}
     764:	3e4b5af4 			; <UNDEFINED> instruction: 0x3e4b5af4
     768:	0200c930 	andeq	ip, r0, #48, 18	; 0xc0000
     76c:	4a060104 	bmi	180b84 <_Min_Stack_Size+0x180984>
     770:	ad673106 	stfgee	f3, [r7, #-24]!	; 0xffffffe8
     774:	01040200 	mrseq	r0, R12_usr
     778:	3e063c06 	cdpcc	12, 0, cr3, cr6, cr6, {0}
     77c:	02003e4b 	andeq	r3, r0, #1200	; 0x4b0
     780:	9e060104 	adflss	f0, f6, f4
     784:	02040200 	andeq	r0, r4, #0, 4
     788:	4b2f064a 	blmi	bc20b8 <_Min_Stack_Size+0xbc1eb8>
     78c:	a06a221f 	rsbge	r2, sl, pc, lsl r2
     790:	01040200 	mrseq	r0, R12_usr
     794:	bb062006 	bllt	1887b4 <_Min_Stack_Size+0x1885b4>
     798:	090221c9 	stmdbeq	r2, {r0, r3, r6, r7, r8, sp}
     79c:	00010100 	andeq	r0, r1, r0, lsl #2
     7a0:	1f5c0205 	svcne	0x005c0205
     7a4:	a4030800 	strge	r0, [r3], #-2048	; 0xfffff800
     7a8:	2f830102 	svccs	0x00830102
     7ac:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     7b0:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     7b4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     7b8:	06ba0601 	ldrteq	r0, [sl], r1, lsl #12
     7bc:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     7c0:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     7c4:	0200c93e 	andeq	ip, r0, #1015808	; 0xf8000
     7c8:	4a060104 	bmi	180be0 <_Min_Stack_Size+0x1809e0>
     7cc:	ad673106 	stfgee	f3, [r7, #-24]!	; 0xffffffe8
     7d0:	083d3e3e 	ldmdaeq	sp!, {r1, r2, r3, r4, r5, r9, sl, fp, ip, sp}
     7d4:	4b414b30 	blmi	105349c <_Min_Stack_Size+0x105329c>
     7d8:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
     7dc:	009e0601 	addseq	r0, lr, r1, lsl #12
     7e0:	3c020402 	cfstrscc	mvf0, [r2], {2}
     7e4:	033d2f06 	teqeq	sp, #6, 30
     7e8:	0e032071 	mcreq	0, 0, r2, cr3, cr1, {3}
     7ec:	0200222e 	andeq	r2, r0, #-536870910	; 0xe0000002
     7f0:	4a060104 	bmi	180c08 <_Min_Stack_Size+0x180a08>
     7f4:	9f672f06 	svcls	0x00672f06
     7f8:	01040200 	mrseq	r0, R12_usr
     7fc:	bb062006 	bllt	18881c <_Min_Stack_Size+0x18861c>
     800:	00070221 	andeq	r0, r7, r1, lsr #4
     804:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     808:	0020c802 	eoreq	ip, r0, r2, lsl #16
     80c:	02cd0308 	sbceq	r0, sp, #8, 6	; 0x20000000
     810:	2f2f9101 	svccs	0x002f9101
     814:	01040200 	mrseq	r0, R12_usr
     818:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
     81c:	00243adc 	ldrdeq	r3, [r4], -ip	; <UNPREDICTABLE>
     820:	06010402 	streq	r0, [r1], -r2, lsl #8
     824:	003d063c 	eorseq	r0, sp, ip, lsr r6
     828:	06010402 	streq	r0, [r1], -r2, lsl #8
     82c:	003d064a 	eorseq	r0, sp, sl, asr #12
     830:	06010402 	streq	r0, [r1], -r2, lsl #8
     834:	ad3d063c 	ldcge	6, cr0, [sp, #-240]!	; 0xffffff10
     838:	01040200 	mrseq	r0, R12_usr
     83c:	02003c06 	andeq	r3, r0, #1536	; 0x600
     840:	063c0204 	ldrteq	r0, [ip], -r4, lsl #4
     844:	ad08ad3e 	stcge	13, cr10, [r8, #-248]	; 0xffffff08
     848:	040200c9 	streq	r0, [r2], #-201	; 0xffffff37
     84c:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     850:	02006731 	andeq	r6, r0, #12845056	; 0xc40000
     854:	ba060104 	blt	180c6c <_Min_Stack_Size+0x180a6c>
     858:	02003d06 	andeq	r3, r0, #384	; 0x180
     85c:	9e060104 	adflss	f0, f6, f4
     860:	02040200 	andeq	r0, r4, #0, 4
     864:	4b2f064a 	blmi	bc2194 <_Min_Stack_Size+0xbc1f94>
     868:	a06c221f 	rsbge	r2, ip, pc, lsl r2
     86c:	01040200 	mrseq	r0, R12_usr
     870:	c0062006 	andgt	r2, r6, r6
     874:	039f5ac9 	orrseq	r5, pc, #823296	; 0xc9000
     878:	7903200b 	stmdbvc	r3, {r0, r1, r3, sp}
     87c:	339f5a2e 	orrscc	r5, pc, #188416	; 0x2e000
     880:	01000602 	tsteq	r0, r2, lsl #12
     884:	02050001 	andeq	r0, r5, #1
     888:	080022d0 	stmdaeq	r0, {r4, r6, r7, r9, sp}
     88c:	01038d03 	tsteq	r3, r3, lsl #26
     890:	02003093 	andeq	r3, r0, #147	; 0x93
     894:	3c060104 	stfccs	f0, [r6], {4}
     898:	0b033e06 	bleq	d00b8 <_Min_Stack_Size+0xcfeb8>
     89c:	3c7903f2 	ldclcc	3, cr0, [r9], #-968	; 0xfffffc38
     8a0:	00200903 	eoreq	r0, r0, r3, lsl #18
     8a4:	06010402 	streq	r0, [r1], -r2, lsl #8
     8a8:	6a3d063c 	bvs	f421a0 <_Min_Stack_Size+0xf41fa0>
     8ac:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
     8b0:	06ba0601 	ldrteq	r0, [sl], r1, lsl #12
     8b4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     8b8:	009e0601 	addseq	r0, lr, r1, lsl #12
     8bc:	3c020402 	cfstrscc	mvf0, [r2], {2}
     8c0:	1f3d2f06 	svcne	0x003d2f06
     8c4:	68854b23 	stmvs	r5, {r0, r1, r5, r8, r9, fp, lr}
     8c8:	02009f75 	andeq	r9, r0, #468	; 0x1d4
     8cc:	20060104 	andcs	r0, r6, r4, lsl #2
     8d0:	4b3dbc06 	blmi	f6f8f0 <_Min_Stack_Size+0xf6f6f0>
     8d4:	9f4b4b4b 	svcls	0x004b4b4b
     8d8:	004cd767 	subeq	sp, ip, r7, ror #14
     8dc:	06010402 	streq	r0, [r1], -r2, lsl #8
     8e0:	5c3d0674 	ldcpl	6, cr0, [sp], #-464	; 0xfffffe30
     8e4:	75682267 	strbvc	r2, [r8, #-615]!	; 0xfffffd99
     8e8:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
     8ec:	06200601 	strteq	r0, [r0], -r1, lsl #12
     8f0:	84d767bc 	ldrbhi	r6, [r7], #1980	; 0x7bc
     8f4:	004c3e4b 	subeq	r3, ip, fp, asr #28
     8f8:	06010402 	streq	r0, [r1], -r2, lsl #8
     8fc:	593d0674 	ldmdbpl	sp!, {r2, r4, r5, r6, r9, sl}
     900:	20190367 	andscs	r0, r9, r7, ror #6
     904:	a0225967 	eorge	r5, r2, r7, ror #18
     908:	01040200 	mrseq	r0, R12_usr
     90c:	bb062006 	bllt	18892c <_Min_Stack_Size+0x18872c>
     910:	040200ad 	streq	r0, [r2], #-173	; 0xffffff53
     914:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     918:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
     91c:	0a022101 	beq	88d28 <_Min_Stack_Size+0x88b28>
     920:	00010100 	andeq	r0, r1, r0, lsl #2
     924:	25cc0205 	strbcs	r0, [ip, #517]	; 0x205
     928:	81030800 	tsthi	r3, r0, lsl #16
     92c:	2f830104 	svccs	0x00830104
     930:	01040200 	mrseq	r0, R12_usr
     934:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
     938:	003d7708 	eorseq	r7, sp, r8, lsl #14
     93c:	06010402 	streq	r0, [r1], -r2, lsl #8
     940:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
     944:	1ecb0601 	cdpne	6, 12, cr0, cr11, cr1, {0}
     948:	01040200 	mrseq	r0, R12_usr
     94c:	02003c06 	andeq	r3, r0, #1536	; 0x600
     950:	e6060104 	str	r0, [r6], -r4, lsl #2
     954:	22bb3f1f 	adcscs	r3, fp, #31, 30	; 0x7c
     958:	22e522e5 	rsccs	r2, r5, #1342177294	; 0x5000000e
     95c:	01040200 	mrseq	r0, R12_usr
     960:	3d064a06 	vstrcc	s8, [r6, #-24]	; 0xffffffe8
     964:	22e522f3 	rsccs	r2, r5, #805306383	; 0x3000000f
     968:	01040200 	mrseq	r0, R12_usr
     96c:	3d064a06 	vstrcc	s8, [r6, #-24]	; 0xffffffe8
     970:	3ee622f3 	mcrcc	2, 7, r2, cr6, cr3, {7}
     974:	00060221 	andeq	r0, r6, r1, lsr #4
     978:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     97c:	00000002 	andeq	r0, r0, r2
     980:	04a90300 	strteq	r0, [r9], #768	; 0x300
     984:	02008401 	andeq	r8, r0, #16777216	; 0x1000000
     988:	3c060104 	stfccs	f0, [r6], {4}
     98c:	5b083d06 	blpl	20fdac <_Min_Stack_Size+0x20fbac>
     990:	22c922c9 	sbccs	r2, r9, #-1879048180	; 0x9000000c
     994:	ad22c908 			; <UNDEFINED> instruction: 0xad22c908
     998:	23c90822 	biccs	r0, r9, #2228224	; 0x220000
     99c:	01040200 	mrseq	r0, R12_usr
     9a0:	3e06ba06 	vmlacc.f32	s22, s12, s12
     9a4:	01040200 	mrseq	r0, R12_usr
     9a8:	3e06ba06 	vmlacc.f32	s22, s12, s12
     9ac:	9fd8229f 	svcls	0x00d8229f
     9b0:	0023de37 	eoreq	sp, r3, r7, lsr lr
     9b4:	06010402 	streq	r0, [r1], -r2, lsl #8
     9b8:	c93d06ba 	ldmdbgt	sp!, {r1, r3, r4, r5, r7, r9, sl}
     9bc:	02213e24 	eoreq	r3, r1, #36, 28	; 0x240
     9c0:	01010004 	tsteq	r1, r4
     9c4:	00020500 	andeq	r0, r2, r0, lsl #10
     9c8:	03000000 	movweq	r0, #0
     9cc:	830104db 	movwhi	r0, #5339	; 0x14db
     9d0:	01040200 	mrseq	r0, R12_usr
     9d4:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
     9d8:	c9152202 	ldmdbgt	r5, {r1, r9, sp}
     9dc:	c922c922 	stmdbgt	r2!, {r1, r5, r8, fp, lr, pc}
     9e0:	ad5a0822 	ldclge	8, cr0, [sl, #-136]	; 0xffffff78
     9e4:	23ad0822 			; <UNDEFINED> instruction: 0x23ad0822
     9e8:	01040200 	mrseq	r0, R12_usr
     9ec:	3d06ba06 	vstrcc	s22, [r6, #-24]	; 0xffffffe8
     9f0:	848423c9 	strhi	r2, [r4], #969	; 0x3c9
     9f4:	859f22c9 	ldrhi	r2, [pc, #713]	; cc5 <_Min_Stack_Size+0xac5>
     9f8:	0022671f 	eoreq	r6, r2, pc, lsl r7
     9fc:	06010402 	streq	r0, [r1], -r2, lsl #8
     a00:	593d06ba 	ldmdbpl	sp!, {r1, r3, r4, r5, r7, r9, sl}
     a04:	02213e22 	eoreq	r3, r1, #544	; 0x220
     a08:	01010009 	tsteq	r1, r9
     a0c:	0000047b 	andeq	r0, r0, fp, ror r4
     a10:	00ad0002 	adceq	r0, sp, r2
     a14:	01020000 	mrseq	r0, (UNDEF: 2)
     a18:	000d0efb 	strdeq	r0, [sp], -fp
     a1c:	01010101 	tsteq	r1, r1, lsl #2
     a20:	01000000 	mrseq	r0, (UNDEF: 0)
     a24:	2f010000 	svccs	0x00010000
     a28:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     a2c:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
     a30:	2f767375 	svccs	0x00767375
     a34:	53414454 	movtpl	r4, #5204	; 0x1454
     a38:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
     a3c:	452f544f 	strmi	r5, [pc, #-1103]!	; 5f5 <_Min_Stack_Size+0x3f5>
     a40:	72656874 	rsbvc	r6, r5, #116, 16	; 0x740000
     a44:	0074656e 	rsbseq	r6, r4, lr, ror #10
     a48:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     a4c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     a50:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     a54:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
     a58:	2f62696c 	svccs	0x0062696c
     a5c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     a60:	00656e69 	rsbeq	r6, r5, r9, ror #28
     a64:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     a68:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     a6c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     a70:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
     a74:	2f62696c 	svccs	0x0062696c
     a78:	00737973 	rsbseq	r7, r3, r3, ror r9
     a7c:	7a697700 	bvc	1a5e684 <_Min_Stack_Size+0x1a5e484>
     a80:	70696863 	rsbvc	r6, r9, r3, ror #16
     a84:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     a88:	00632e66 	rsbeq	r2, r3, r6, ror #28
     a8c:	5f000001 	svcpl	0x00000001
     a90:	61666564 	cmnvs	r6, r4, ror #10
     a94:	5f746c75 	svcpl	0x00746c75
     a98:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     a9c:	00682e73 	rsbeq	r2, r8, r3, ror lr
     aa0:	5f000002 	svcpl	0x00000002
     aa4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     aa8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     aac:	00000300 	andeq	r0, r0, r0, lsl #6
     ab0:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     ab4:	5f706968 	svcpl	0x00706968
     ab8:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     abc:	0100682e 	tsteq	r0, lr, lsr #16
     ac0:	00000000 	andeq	r0, r0, r0
     ac4:	277c0205 	ldrbcs	r0, [ip, -r5, lsl #4]!
     ac8:	2e030800 	cdpcs	8, 0, cr0, cr3, cr0, {0}
     acc:	04022e01 	streq	r2, [r2], #-3585	; 0xfffff1ff
     ad0:	00010100 	andeq	r0, r1, r0, lsl #2
     ad4:	27880205 	strcs	r0, [r8, r5, lsl #4]
     ad8:	34030800 	strcc	r0, [r3], #-2048	; 0xfffff800
     adc:	04022e01 	streq	r2, [r2], #-3585	; 0xfffff1ff
     ae0:	00010100 	andeq	r0, r1, r0, lsl #2
     ae4:	27940205 	ldrcs	r0, [r4, r5, lsl #4]
     ae8:	3a030800 	bcc	c2af0 <_Min_Stack_Size+0xc28f0>
     aec:	04022e01 	streq	r2, [r2], #-3585	; 0xfffff1ff
     af0:	00010100 	andeq	r0, r1, r0, lsl #2
     af4:	27a00205 	strcs	r0, [r0, r5, lsl #4]!
     af8:	c0030800 	andgt	r0, r3, r0, lsl #16
     afc:	022e0100 	eoreq	r0, lr, #0, 2
     b00:	01010004 	tsteq	r1, r4
     b04:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
     b08:	03080027 	movweq	r0, #32807	; 0x8027
     b0c:	4a0100c6 	bmi	40e2c <_Min_Stack_Size+0x40c2c>
     b10:	01000802 	tsteq	r0, r2, lsl #16
     b14:	02050001 	andeq	r0, r5, #1
     b18:	080027c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, sp}
     b1c:	0100cd03 	tsteq	r0, r3, lsl #26
     b20:	00080266 	andeq	r0, r8, r6, ror #4
     b24:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     b28:	0027e002 	eoreq	lr, r7, r2
     b2c:	00d30308 	sbcseq	r0, r3, r8, lsl #6
     b30:	05022e01 	streq	r2, [r2, #-3585]	; 0xfffff1ff
     b34:	00010100 	andeq	r0, r1, r0, lsl #2
     b38:	27f00205 	ldrbcs	r0, [r0, r5, lsl #4]!
     b3c:	d9030800 	stmdble	r3, {fp}
     b40:	02580100 	subseq	r0, r8, #0, 2
     b44:	01010005 	tsteq	r1, r5
     b48:	04020500 	streq	r0, [r2], #-1280	; 0xfffffb00
     b4c:	03080028 	movweq	r0, #32808	; 0x8028
     b50:	590100f0 	stmdbpl	r1, {r4, r5, r6, r7}
     b54:	01040200 	mrseq	r0, R12_usr
     b58:	3e063c06 	cdpcc	12, 0, cr3, cr6, cr6, {0}
     b5c:	3e3d4e3d 	mrccc	14, 1, r4, cr13, cr13, {1}
     b60:	01000c02 	tsteq	r0, r2, lsl #24
     b64:	02050001 	andeq	r0, r5, #1
     b68:	0800284c 	stmdaeq	r0, {r2, r3, r6, fp, sp}
     b6c:	0100fe03 	tsteq	r0, r3, lsl #28	; <UNPREDICTABLE>
     b70:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
     b74:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     b78:	3d4e3d3e 	stclcc	13, cr3, [lr, #-248]	; 0xffffff08
     b7c:	000c023e 	andeq	r0, ip, lr, lsr r2
     b80:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     b84:	00000002 	andeq	r0, r0, r2
     b88:	018c0300 	orreq	r0, ip, r0, lsl #6
     b8c:	02005901 	andeq	r5, r0, #16384	; 0x4000
     b90:	20060104 	andcs	r0, r6, r4, lsl #2
     b94:	02006806 	andeq	r6, r0, #393216	; 0x60000
     b98:	3c060104 	stfccs	f0, [r6], {4}
     b9c:	4e3d3e06 	cdpmi	14, 3, cr3, cr13, cr6, {0}
     ba0:	0b023e3d 	bleq	9049c <_Min_Stack_Size+0x9029c>
     ba4:	00010100 	andeq	r0, r1, r0, lsl #2
     ba8:	28940205 	ldmcs	r4, {r0, r2, r9}
     bac:	9c030800 	stcls	8, cr0, [r3], {-0}
     bb0:	00590101 	subseq	r0, r9, r1, lsl #2
     bb4:	06010402 	streq	r0, [r1], -r2, lsl #8
     bb8:	00680620 	rsbeq	r0, r8, r0, lsr #12
     bbc:	06010402 	streq	r0, [r1], -r2, lsl #8
     bc0:	3d3e063c 	ldccc	6, cr0, [lr, #-240]!	; 0xffffff10
     bc4:	023e3d4e 	eorseq	r3, lr, #4992	; 0x1380
     bc8:	0101000b 	tsteq	r1, fp
     bcc:	e8020500 	stmda	r2, {r8, sl}
     bd0:	03080028 	movweq	r0, #32808	; 0x8028
     bd4:	670101ac 	strvs	r0, [r1, -ip, lsr #3]
     bd8:	28024b2f 	stmdacs	r2, {r0, r1, r2, r3, r5, r8, r9, fp, lr}
     bdc:	3e222f15 	mcrcc	15, 1, r2, cr2, cr5, {0}
     be0:	59843e2f 	stmibpl	r4, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
     be4:	59226722 	stmdbpl	r2!, {r1, r5, r8, r9, sl, sp, lr}
     be8:	08236722 	stmdaeq	r3!, {r1, r5, r8, r9, sl, sp, lr}
     bec:	21082221 	tstcs	r8, r1, lsr #4
     bf0:	59594b23 	ldmdbpl	r9, {r0, r1, r5, r8, r9, fp, lr}^
     bf4:	234b5959 	movtcs	r5, #47449	; 0xb959
     bf8:	223d222f 	eorscs	r2, sp, #-268435454	; 0xf0000002
     bfc:	4b77243d 	blmi	1dc9cf8 <_Min_Stack_Size+0x1dc9af8>
     c00:	01040200 	mrseq	r0, R12_usr
     c04:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
     c08:	004b223d 	subeq	r2, fp, sp, lsr r2
     c0c:	06010402 	streq	r0, [r1], -r2, lsl #8
     c10:	3d3d063c 	ldccc	6, cr0, [sp, #-240]!	; 0xffffff10
     c14:	3c710322 	ldclcc	3, cr0, [r1], #-136	; 0xffffff78
     c18:	00201103 	eoreq	r1, r0, r3, lsl #2
     c1c:	21010402 	tstcs	r1, r2, lsl #8
     c20:	01000702 	tsteq	r0, r2, lsl #14
     c24:	02050001 	andeq	r0, r5, #1
     c28:	08002aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, sp}
     c2c:	0101f803 	tsteq	r1, r3, lsl #16	; <UNPREDICTABLE>
     c30:	3d230868 	stccc	8, cr0, [r3, #-416]!	; 0xfffffe60
     c34:	76223d22 	strtvc	r3, [r2], -r2, lsr #26
     c38:	223d2267 	eorscs	r2, sp, #1879048198	; 0x70000006
     c3c:	213e223d 	teqcs	lr, sp, lsr r2
     c40:	01000402 	tsteq	r0, r2, lsl #8
     c44:	02050001 	andeq	r0, r5, #1
     c48:	08002b20 	stmdaeq	r0, {r5, r8, r9, fp, sp}
     c4c:	01029403 	tsteq	r2, r3, lsl #8
     c50:	7508753f 	strvc	r7, [r8, #-1343]	; 0xfffffac1
     c54:	83753d4b 	cmnhi	r5, #4800	; 0x12c0
     c58:	04028383 	streq	r8, [r2], #-899	; 0xfffffc7d
     c5c:	00010100 	andeq	r0, r1, r0, lsl #2
     c60:	2bb80205 	blcs	fee0147c <BootRAM+0xdd71c1d>
     c64:	a2030800 	andge	r0, r3, #0, 16
     c68:	2f5a0102 	svccs	0x005a0102
     c6c:	002f3e2f 	eoreq	r3, pc, pc, lsr #28
     c70:	3d030402 	cfstrscc	mvf0, [r3, #-8]
     c74:	03040200 	movweq	r0, #16896	; 0x4200
     c78:	0402008f 	streq	r0, [r2], #-143	; 0xffffff71
     c7c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     c80:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
     c84:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     c88:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     c8c:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
     c90:	00f10304 	rscseq	r0, r1, r4, lsl #6
     c94:	06010402 	streq	r0, [r1], -r2, lsl #8
     c98:	3e4d0666 	cdpcc	6, 4, cr0, cr13, cr6, {3}
     c9c:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     ca0:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
     ca4:	008f0304 	addeq	r0, pc, r4, lsl #6
     ca8:	06010402 	streq	r0, [r1], -r2, lsl #8
     cac:	004c0666 	subeq	r0, ip, r6, ror #12
     cb0:	06010402 	streq	r0, [r1], -r2, lsl #8
     cb4:	003d064a 	eorseq	r0, sp, sl, asr #12
     cb8:	3d030402 	cfstrscc	mvf0, [r3, #-8]
     cbc:	03040200 	movweq	r0, #16896	; 0x4200
     cc0:	040200f1 	streq	r0, [r2], #-241	; 0xffffff0f
     cc4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     cc8:	0402214d 	streq	r2, [r2], #-333	; 0xfffffeb3
     ccc:	00010100 	andeq	r0, r1, r0, lsl #2
     cd0:	2cd00205 	lfmcs	f0, 2, [r0], {5}
     cd4:	bc030800 	stclt	8, cr0, [r3], {-0}
     cd8:	2f590102 	svccs	0x00590102
     cdc:	914a1003 	cmpls	sl, r3
     ce0:	00040268 	andeq	r0, r4, r8, ror #4
     ce4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     ce8:	002d0c02 	eoreq	r0, sp, r2, lsl #24
     cec:	02d40308 	sbcseq	r0, r4, #8, 6	; 0x20000000
     cf0:	2f2f3d01 	svccs	0x002f3d01
     cf4:	09038333 	stmdbeq	r3, {r0, r1, r4, r5, r8, r9, pc}
     cf8:	21752f66 	cmncs	r5, r6, ror #30
     cfc:	01000402 	tsteq	r0, r2, lsl #8
     d00:	02050001 	andeq	r0, r5, #1
     d04:	08002d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, sp}
     d08:	0102ec03 	tsteq	r2, r3, lsl #24
     d0c:	10032f59 	andne	r2, r3, r9, asr pc
     d10:	0268674a 	rsbeq	r6, r8, #19398656	; 0x1280000
     d14:	01010004 	tsteq	r1, r4
     d18:	90020500 	andls	r0, r2, r0, lsl #10
     d1c:	0308002d 	movweq	r0, #32813	; 0x802d
     d20:	3d010384 	stccc	3, cr0, [r1, #-528]	; 0xfffffdf0
     d24:	67332f2f 	ldrvs	r2, [r3, -pc, lsr #30]!
     d28:	2f660903 	svccs	0x00660903
     d2c:	04022175 	streq	r2, [r2], #-373	; 0xfffffe8b
     d30:	00010100 	andeq	r0, r1, r0, lsl #2
     d34:	2dd80205 	lfmcs	f0, 2, [r8, #20]
     d38:	9c030800 	stcls	8, cr0, [r3], {-0}
     d3c:	91440103 	cmpls	r4, r3, lsl #2
     d40:	022f323e 	eoreq	r3, pc, #-536870909	; 0xe0000003
     d44:	01010004 	tsteq	r1, r4
     d48:	08020500 	stmdaeq	r2, {r8, sl}
     d4c:	0308002e 	movweq	r0, #32814	; 0x802e
     d50:	3d0103b1 	stccc	3, cr0, [r1, #-708]	; 0xfffffd3c
     d54:	323e9135 	eorscc	r9, lr, #1073741837	; 0x4000000d
     d58:	0004022f 	andeq	r0, r4, pc, lsr #4
     d5c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     d60:	002e3c02 	eoreq	r3, lr, r2, lsl #24
     d64:	03c60308 	biceq	r0, r6, #8, 6	; 0x20000000
     d68:	4b673d01 	blmi	19d0174 <_Min_Stack_Size+0x19cff74>
     d6c:	674b6767 	strbvs	r6, [fp, -r7, ror #14]
     d70:	01000402 	tsteq	r0, r2, lsl #8
     d74:	02050001 	andeq	r0, r5, #1
     d78:	08002e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, sp}
     d7c:	0103d003 	tsteq	r3, r3
     d80:	5a4b2f4b 	bpl	12ccab4 <_Min_Stack_Size+0x12cc8b4>
     d84:	4c5b4b4b 	mrrcmi	11, 4, r4, fp, cr11
     d88:	4b5c5a4b 	blmi	17176bc <_Min_Stack_Size+0x17174bc>
     d8c:	022f674f 	eoreq	r6, pc, #20709376	; 0x13c0000
     d90:	01010004 	tsteq	r1, r4
     d94:	10020500 	andne	r0, r2, r0, lsl #10
     d98:	0308002f 	movweq	r0, #32815	; 0x802f
     d9c:	4b0103ee 	blmi	41d5c <_Min_Stack_Size+0x41b5c>
     da0:	78ad672f 	stmiavc	sp!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}
     da4:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
     da8:	3d223d95 	stccc	13, cr3, [r2, #-596]!	; 0xfffffdac
     dac:	223d9522 	eorscs	r9, sp, #142606336	; 0x8800000
     db0:	0402223d 	streq	r2, [r2], #-573	; 0xfffffdc3
     db4:	00010100 	andeq	r0, r1, r0, lsl #2
     db8:	00000205 	andeq	r0, r0, r5, lsl #4
     dbc:	95030000 	strls	r0, [r3, #-0]
     dc0:	674b0104 	strbvs	r0, [fp, -r4, lsl #2]
     dc4:	0402adad 	streq	sl, [r2], #-3501	; 0xfffff253
     dc8:	00010100 	andeq	r0, r1, r0, lsl #2
     dcc:	2fa80205 	svccs	0x00a80205
     dd0:	9c030800 	stcls	8, cr0, [r3], {-0}
     dd4:	2f590104 	svccs	0x00590104
     dd8:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
     ddc:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     de0:	5a3d4b3d 	bpl	f53adc <_Min_Stack_Size+0xf538dc>
     de4:	672f674b 	strvs	r6, [pc, -fp, asr #14]!
     de8:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
     dec:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     df0:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
     df4:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     df8:	04022f30 	streq	r2, [r2], #-3888	; 0xfffff0d0
     dfc:	00010100 	andeq	r0, r1, r0, lsl #2
     e00:	303c0205 	eorscc	r0, ip, r5, lsl #4
     e04:	b6030800 	strlt	r0, [r3], -r0, lsl #16
     e08:	754b0104 	strbvc	r0, [fp, #-260]	; 0xfffffefc
     e0c:	4b838383 	blmi	fe0e1c20 <BootRAM+0xd0523c1>
     e10:	4b4b4b4b 	blmi	12d3b44 <_Min_Stack_Size+0x12d3944>
     e14:	01000902 	tsteq	r0, r2, lsl #18
     e18:	02050001 	andeq	r0, r5, #1
     e1c:	080030bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, sp}
     e20:	0104c303 	tsteq	r4, r3, lsl #6
     e24:	8383754b 	orrhi	r7, r3, #314572800	; 0x12c00000
     e28:	4b4b4b83 	blmi	12d3c3c <_Min_Stack_Size+0x12d3a3c>
     e2c:	09024b4b 	stmdbeq	r2, {r0, r1, r3, r6, r8, r9, fp, lr}
     e30:	00010100 	andeq	r0, r1, r0, lsl #2
     e34:	313c0205 	teqcc	ip, r5, lsl #4
     e38:	d0030800 	andle	r0, r3, r0, lsl #16
     e3c:	32590104 	subscc	r0, r9, #4, 2
     e40:	01040200 	mrseq	r0, R12_usr
     e44:	3e065806 	cdpcc	8, 0, cr5, cr6, cr6, {0}
     e48:	21594b59 	cmpcs	r9, r9, asr fp
     e4c:	01000402 	tsteq	r0, r2, lsl #8
     e50:	02050001 	andeq	r0, r5, #1
     e54:	08003180 	stmdaeq	r0, {r7, r8, ip, sp}
     e58:	0104de03 	tsteq	r4, r3, lsl #28
     e5c:	02024b2f 	andeq	r4, r2, #48128	; 0xbc00
     e60:	00010100 	andeq	r0, r1, r0, lsl #2
     e64:	31900205 	orrscc	r0, r0, r5, lsl #4
     e68:	e3030800 	movw	r0, #14336	; 0x3800
     e6c:	754b0104 	strbvc	r0, [fp, #-260]	; 0xfffffefc
     e70:	04022108 	streq	r2, [r2], #-264	; 0xfffffef8
     e74:	00010100 	andeq	r0, r1, r0, lsl #2
     e78:	31d40205 	bicscc	r0, r4, r5, lsl #4
     e7c:	e9030800 	stmdb	r3, {fp}
     e80:	834b0104 	movthi	r0, #45316	; 0xb104
     e84:	04022108 	streq	r2, [r2], #-264	; 0xfffffef8
     e88:	d8010100 	stmdale	r1, {r8}
     e8c:	02000001 	andeq	r0, r0, #1
     e90:	0000b700 	andeq	fp, r0, r0, lsl #14
     e94:	fb010200 	blx	4169e <_Min_Stack_Size+0x4149e>
     e98:	01000d0e 	tsteq	r0, lr, lsl #26
     e9c:	00010101 	andeq	r0, r1, r1, lsl #2
     ea0:	00010000 	andeq	r0, r1, r0
     ea4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     ea8:	2f656d6f 	svccs	0x00656d6f
     eac:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
     eb0:	542f7673 	strtpl	r7, [pc], #-1651	; eb8 <_Min_Stack_Size+0xcb8>
     eb4:	41534144 	cmpmi	r3, r4, asr #2
     eb8:	4f492d54 	svcmi	0x00492d54
     ebc:	74452f54 	strbvc	r2, [r5], #-3924	; 0xfffff0ac
     ec0:	6e726568 	cdpvs	5, 7, cr6, cr2, cr8, {3}
     ec4:	572f7465 	strpl	r7, [pc, -r5, ror #8]!
     ec8:	30303535 	eorscc	r3, r0, r5, lsr r5
     ecc:	73752f00 	cmnvc	r5, #0, 30
     ed0:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     ed4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     ed8:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     edc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     ee0:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
     ee4:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
     ee8:	73752f00 	cmnvc	r5, #0, 30
     eec:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     ef0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     ef4:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     ef8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     efc:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
     f00:	452f2e00 	strmi	r2, [pc, #-3584]!	; 108 <_Min_Heap_Size+0x108>
     f04:	72656874 	rsbvc	r6, r5, #116, 16	; 0x740000
     f08:	0074656e 	rsbseq	r6, r4, lr, ror #10
     f0c:	35357700 	ldrcc	r7, [r5, #-1792]!	; 0xfffff900
     f10:	632e3030 			; <UNDEFINED> instruction: 0x632e3030
     f14:	00000100 	andeq	r0, r0, r0, lsl #2
     f18:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     f1c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     f20:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     f24:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     f28:	00000200 	andeq	r0, r0, r0, lsl #4
     f2c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     f30:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     f34:	00030068 	andeq	r0, r3, r8, rrx
     f38:	7a697700 	bvc	1a5eb40 <_Min_Stack_Size+0x1a5e940>
     f3c:	70696863 	rsbvc	r6, r9, r3, ror #16
     f40:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     f44:	00682e66 	rsbeq	r2, r8, r6, ror #28
     f48:	00000004 	andeq	r0, r0, r4
     f4c:	18020500 	stmdane	r2, {r8, sl}
     f50:	03080032 	movweq	r0, #32818	; 0x8032
     f54:	3d4d0134 	stfcce	f0, [sp, #-208]	; 0xffffff30
     f58:	753c0c03 	ldrvc	r0, [ip, #-3075]!	; 0xfffff3fd
     f5c:	0f036775 	svceq	0x00036775
     f60:	213d3d58 	teqcs	sp, r8, asr sp
     f64:	01000602 	tsteq	r0, r2, lsl #12
     f68:	02050001 	andeq	r0, r5, #1
     f6c:	08003278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, sp}
     f70:	0100dc03 	tsteq	r0, r3, lsl #24
     f74:	51413d67 	cmppl	r1, r7, ror #26
     f78:	03677575 	cmneq	r7, #490733568	; 0x1d400000
     f7c:	3d3d580f 	ldccc	8, cr5, [sp, #-60]!	; 0xffffffc4
     f80:	01000702 	tsteq	r0, r2, lsl #14
     f84:	02050001 	andeq	r0, r5, #1
     f88:	080032e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip, sp}
     f8c:	01018103 	tsteq	r1, r3, lsl #2
     f90:	3d2f2f75 	stccc	15, cr2, [pc, #-468]!	; dc4 <_Min_Stack_Size+0xbc4>
     f94:	67757542 	ldrbvs	r7, [r5, -r2, asr #10]!
     f98:	03040200 	movweq	r0, #16896	; 0x4200
     f9c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     fa0:	02008103 	andeq	r8, r0, #-1073741824	; 0xc0000000
     fa4:	3c060104 	stfccs	f0, [r6], {4}
     fa8:	4a3b0306 	bmi	ec1bc8 <_Min_Stack_Size+0xec19c8>
     fac:	07023d3d 	smladxeq	r2, sp, sp, r3
     fb0:	00010100 	andeq	r0, r1, r0, lsl #2
     fb4:	336c0205 	cmncc	ip, #1342177280	; 0x50000000
     fb8:	ce030800 	cdpgt	8, 0, cr0, cr3, cr0, {0}
     fbc:	2f750101 	svccs	0x00750101
     fc0:	4b413d2f 	blmi	1050484 <_Min_Stack_Size+0x1050284>
     fc4:	00677575 	rsbeq	r7, r7, r5, ror r5
     fc8:	3d030402 	cfstrscc	mvf0, [r3, #-8]
     fcc:	03040200 	movweq	r0, #16896	; 0x4200
     fd0:	04020081 	streq	r0, [r2], #-129	; 0xffffff7f
     fd4:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     fd8:	3d4a3b03 	vstrcc	d19, [sl, #-12]
     fdc:	0007023d 	andeq	r0, r7, sp, lsr r2
     fe0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     fe4:	0033fc02 	eorseq	pc, r3, r2, lsl #24
     fe8:	029c0308 	addseq	r0, ip, #8, 6	; 0x20000000
     fec:	ad4d5901 	vstrge.16	s11, [sp, #-2]	; <UNPREDICTABLE>
     ff0:	f4ad3ef3 	vld3.<illegal width 64>	{d3[],d5[],d7[]}, [sp :<bad align 192>], r3
     ff4:	0402214b 	streq	r2, [r2], #-331	; 0xfffffeb5
     ff8:	00010100 	andeq	r0, r1, r0, lsl #2
     ffc:	34940205 	ldrcc	r0, [r4], #517	; 0x205
    1000:	ad030800 	stcge	8, cr0, [r3, #-0]
    1004:	4d590102 	ldfmie	f0, [r9, #-8]
    1008:	ad3ef3ad 	ldcge	3, cr15, [lr, #-692]!	; 0xfffffd4c
    100c:	02214bf4 	eoreq	r4, r1, #244, 22	; 0x3d000
    1010:	01010004 	tsteq	r1, r4
    1014:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    1018:	03080035 	movweq	r0, #32821	; 0x8035
    101c:	830102bd 	movwhi	r0, #4797	; 0x12bd
    1020:	083d2f2f 	ldmdaeq	sp!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
    1024:	4b688392 	blmi	1a21e74 <_Min_Stack_Size+0x1a21c74>
    1028:	ba087903 	blt	21f43c <_Min_Stack_Size+0x21f23c>
    102c:	00030228 	andeq	r0, r3, r8, lsr #4
    1030:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1034:	0035e402 	eorseq	lr, r5, r2, lsl #8
    1038:	02cb0308 	sbceq	r0, fp, #8, 6	; 0x20000000
    103c:	302f8301 	eorcc	r8, pc, r1, lsl #6
    1040:	8491083d 	ldrhi	r0, [r1], #2109	; 0x83d
    1044:	79034c67 	stmdbvc	r3, {r0, r1, r2, r5, r6, sl, fp, lr}
    1048:	0228ba08 	eoreq	fp, r8, #8, 20	; 0x8000
    104c:	01010003 	tsteq	r1, r3
    1050:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    1054:	03080036 	movweq	r0, #32822	; 0x8036
    1058:	830102db 	movwhi	r0, #4827	; 0x12db
    105c:	4b91082f 	blmi	fe443120 <BootRAM+0xd3b38c1>
    1060:	0402ad08 	streq	sl, [r2], #-3336	; 0xfffff2f8
    1064:	10010100 	andne	r0, r1, r0, lsl #2
    1068:	02000005 	andeq	r0, r0, #5
    106c:	0000a200 	andeq	sl, r0, r0, lsl #4
    1070:	fb010200 	blx	4187a <_Min_Stack_Size+0x4167a>
    1074:	01000d0e 	tsteq	r0, lr, lsl #26
    1078:	00010101 	andeq	r0, r1, r1, lsl #2
    107c:	00010000 	andeq	r0, r1, r0
    1080:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    1084:	2f656d6f 	svccs	0x00656d6f
    1088:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    108c:	542f7673 	strtpl	r7, [pc], #-1651	; 1094 <_Min_Stack_Size+0xe94>
    1090:	41534144 	cmpmi	r3, r4, asr #2
    1094:	4f492d54 	svcmi	0x00492d54
    1098:	6e492f54 	mcrvs	15, 2, r2, cr9, cr4, {2}
    109c:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    10a0:	442f7465 	strtmi	r7, [pc], #-1125	; 10a8 <_Min_Stack_Size+0xea8>
    10a4:	00504348 	subseq	r4, r0, r8, asr #6
    10a8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    10ac:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    10b0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    10b4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    10b8:	2f62696c 	svccs	0x0062696c
    10bc:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    10c0:	00656e69 	rsbeq	r6, r5, r9, ror #28
    10c4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    10c8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    10cc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    10d0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    10d4:	2f62696c 	svccs	0x0062696c
    10d8:	00737973 	rsbseq	r7, r3, r3, ror r9
    10dc:	63686400 	cmnvs	r8, #0, 8
    10e0:	00632e70 	rsbeq	r2, r3, r0, ror lr
    10e4:	5f000001 	svcpl	0x00000001
    10e8:	61666564 	cmnvs	r6, r4, ror #10
    10ec:	5f746c75 	svcpl	0x00746c75
    10f0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    10f4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    10f8:	5f000002 	svcpl	0x00000002
    10fc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1100:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1104:	00000300 	andeq	r0, r0, r0, lsl #6
    1108:	70636864 	rsbvc	r6, r3, r4, ror #16
    110c:	0100682e 	tsteq	r0, lr, lsr #16
    1110:	00000000 	andeq	r0, r0, r0
    1114:	372c0205 	strcc	r0, [ip, -r5, lsl #4]!
    1118:	ca030800 	bgt	c3120 <_Min_Stack_Size+0xc2f20>
    111c:	022e0100 	eoreq	r0, lr, #0, 2
    1120:	01010004 	tsteq	r1, r4
    1124:	38020500 	stmdacc	r2, {r8, sl}
    1128:	03080037 	movweq	r0, #32823	; 0x8037
    112c:	300100cd 	andcc	r0, r1, sp, asr #1
    1130:	02673d4b 	rsbeq	r3, r7, #4800	; 0x12c0
    1134:	01010005 	tsteq	r1, r5
    1138:	60020500 	andvs	r0, r2, r0, lsl #10
    113c:	03080037 	movweq	r0, #32823	; 0x8037
    1140:	300100d5 	ldrdcc	r0, [r1], -r5
    1144:	75683d4b 	strbvc	r3, [r8, #-3403]!	; 0xfffff2b5
    1148:	09023d2f 	stmdbeq	r2, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}
    114c:	00010100 	andeq	r0, r1, r0, lsl #2
    1150:	37a80205 	strcc	r0, [r8, r5, lsl #4]!
    1154:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
    1158:	303f0100 	eorscc	r0, pc, r0, lsl #2
    115c:	4b4b4b4b 	blmi	12d3e90 <_Min_Stack_Size+0x12d3c90>
    1160:	4b4c4b59 	blmi	1313ecc <_Min_Stack_Size+0x1313ccc>
    1164:	4b4c4b4b 	blmi	1313e98 <_Min_Stack_Size+0x1313c98>
    1168:	4b4c4b4b 	blmi	1313e9c <_Min_Stack_Size+0x1313c9c>
    116c:	4b4c4b4b 	blmi	1313ea0 <_Min_Stack_Size+0x1313ca0>
    1170:	594c4b4b 	stmdbpl	ip, {r0, r1, r3, r6, r8, r9, fp, lr}^
    1174:	67595959 			; <UNDEFINED> instruction: 0x67595959
    1178:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
    117c:	003c0603 	eorseq	r0, ip, r3, lsl #12
    1180:	90010402 	andls	r0, r1, r2, lsl #8
    1184:	02003d06 	andeq	r3, r0, #384	; 0x180
    1188:	3c060304 	stccc	3, cr0, [r6], {4}
    118c:	01040200 	mrseq	r0, R12_usr
    1190:	003d069e 	mlaseq	sp, lr, r6, r0
    1194:	06030402 	streq	r0, [r3], -r2, lsl #8
    1198:	04020090 	streq	r0, [r2], #-144	; 0xffffff70
    119c:	3f069e01 	svccc	0x00069e01
    11a0:	93919191 	orrsls	r9, r1, #1073741860	; 0x40000024
    11a4:	91939191 			; <UNDEFINED> instruction: 0x91939191
    11a8:	bbbb9191 	bllt	feee57f4 <BootRAM+0xde55f95>
    11ac:	bdbbbbbb 			; <UNDEFINED> instruction: 0xbdbbbbbb
    11b0:	bbbb9191 	bllt	feee57fc <BootRAM+0xde55f9d>
    11b4:	bbbbbbbb 	bllt	feef00a8 <BootRAM+0xde60849>
    11b8:	91bdbbbb 			; <UNDEFINED> instruction: 0x91bdbbbb
    11bc:	f3919191 	vsra.u64	d9, d1, #47
    11c0:	92919191 	addsls	r9, r1, #1073741860	; 0x40000024
    11c4:	03040200 	movweq	r0, #16896	; 0x4200
    11c8:	02003c06 	andeq	r3, r0, #1536	; 0x600
    11cc:	069e0104 	ldreq	r0, [lr], r4, lsl #2
    11d0:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
    11d4:	003c0603 	eorseq	r0, ip, r3, lsl #12
    11d8:	9e010402 	cdpls	4, 0, cr0, cr1, cr2, {0}
    11dc:	02bb4206 	adcseq	r4, fp, #1610612736	; 0x60000000
    11e0:	01010008 	tsteq	r1, r8
    11e4:	70020500 	andvc	r0, r2, r0, lsl #10
    11e8:	0308003c 	movweq	r0, #32828	; 0x803c
    11ec:	5b0101e8 	blpl	41994 <_Min_Stack_Size+0x41794>
    11f0:	4b4b4b30 	blmi	12d3eb8 <_Min_Stack_Size+0x12d3cb8>
    11f4:	004c594b 	subeq	r5, ip, fp, asr #18
    11f8:	06010402 	streq	r0, [r1], -r2, lsl #8
    11fc:	4c59064a 	mrrcmi	6, 4, r0, r9, cr10
    1200:	5a595959 	bpl	165776c <_Min_Stack_Size+0x165756c>
    1204:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
    1208:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
    120c:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
    1210:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    1214:	02006867 	andeq	r6, r0, #6750208	; 0x670000
    1218:	3c060304 	stccc	3, cr0, [r6], {4}
    121c:	01040200 	mrseq	r0, R12_usr
    1220:	003d069e 	mlaseq	sp, lr, r6, r0
    1224:	06030402 	streq	r0, [r3], -r2, lsl #8
    1228:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    122c:	3d069e01 	stccc	14, cr9, [r6, #-4]
    1230:	03040200 	movweq	r0, #16896	; 0x4200
    1234:	02009006 	andeq	r9, r0, #6
    1238:	069e0104 	ldreq	r0, [lr], r4, lsl #2
    123c:	9191913f 	orrsls	r9, r1, pc, lsr r1
    1240:	92919193 	addsls	r9, r1, #-1073741788	; 0xc0000024
    1244:	bb919191 	bllt	fe465890 <BootRAM+0xd3d6031>
    1248:	bbbbbbbb 	bllt	feef013c <BootRAM+0xde608dd>
    124c:	919159bc 			; <UNDEFINED> instruction: 0x919159bc
    1250:	bcbbbbbb 	fldmiaxlt	fp!, {d11-d103}	;@ Deprecated
    1254:	bbbb9191 	bllt	feee58a0 <BootRAM+0xde56041>
    1258:	9191bebb 			; <UNDEFINED> instruction: 0x9191bebb
    125c:	bbbb7508 	bllt	feede684 <BootRAM+0xde4ee25>
    1260:	bbbbbbbb 	bllt	feef0154 <BootRAM+0xde608f5>
    1264:	9191bcbb 			; <UNDEFINED> instruction: 0x9191bcbb
    1268:	91919191 			; <UNDEFINED> instruction: 0x91919191
    126c:	91919191 			; <UNDEFINED> instruction: 0x91919191
    1270:	04020092 	streq	r0, [r2], #-146	; 0xffffff6e
    1274:	003c0603 	eorseq	r0, ip, r3, lsl #12
    1278:	9e010402 	cdpls	4, 0, cr0, cr1, cr2, {0}
    127c:	02004d06 	andeq	r4, r0, #384	; 0x180
    1280:	3c060304 	stccc	3, cr0, [r6], {4}
    1284:	01040200 	mrseq	r0, R12_usr
    1288:	ca4206c8 	bgt	1082db0 <_Min_Stack_Size+0x1082bb0>
    128c:	01000c02 	tsteq	r0, r2, lsl #24
    1290:	02050001 	andeq	r0, r5, #1
    1294:	080042a8 	stmdaeq	r0, {r3, r5, r7, r9, lr}
    1298:	0102ec03 	tsteq	r2, r3, lsl #24
    129c:	4b4b303f 	blmi	12cd3a0 <_Min_Stack_Size+0x12cd1a0>
    12a0:	4b594b4b 	blmi	1653fd4 <_Min_Stack_Size+0x1653dd4>
    12a4:	4b4b4b4c 	blmi	12d3fdc <_Min_Stack_Size+0x12d3ddc>
    12a8:	4b4b4b4c 	blmi	12d3fe0 <_Min_Stack_Size+0x12d3de0>
    12ac:	4b4b4b4c 	blmi	12d3fe4 <_Min_Stack_Size+0x12d3de4>
    12b0:	4b4b4b4c 	blmi	12d3fe8 <_Min_Stack_Size+0x12d3de8>
    12b4:	5959594c 	ldmdbpl	r9, {r2, r3, r6, r8, fp, ip, lr}^
    12b8:	00686759 	rsbeq	r6, r8, r9, asr r7
    12bc:	06030402 	streq	r0, [r3], -r2, lsl #8
    12c0:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    12c4:	3d069e01 	stccc	14, cr9, [r6, #-4]
    12c8:	03040200 	movweq	r0, #16896	; 0x4200
    12cc:	02003c06 	andeq	r3, r0, #1536	; 0x600
    12d0:	069e0104 	ldreq	r0, [lr], r4, lsl #2
    12d4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    12d8:	009e0603 	addseq	r0, lr, r3, lsl #12
    12dc:	9e010402 	cdpls	4, 0, cr0, cr1, cr2, {0}
    12e0:	91913f06 	orrsls	r3, r1, r6, lsl #30
    12e4:	91919391 			; <UNDEFINED> instruction: 0x91919391
    12e8:	91919192 			; <UNDEFINED> instruction: 0x91919192
    12ec:	bbbbbbbb 	bllt	feef01e0 <BootRAM+0xde60981>
    12f0:	9191bcbb 			; <UNDEFINED> instruction: 0x9191bcbb
    12f4:	bcbbbbbb 	fldmiaxlt	fp!, {d11-d103}	;@ Deprecated
    12f8:	bbbb9191 	bllt	feee5944 <BootRAM+0xde560e5>
    12fc:	0092bcbb 			; <UNDEFINED> instruction: 0x0092bcbb
    1300:	06030402 	streq	r0, [r3], -r2, lsl #8
    1304:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
    1308:	4d069e01 	stcmi	14, cr9, [r6, #-4]
    130c:	342f2f2f 	strtcc	r2, [pc], #-3887	; 1314 <_Min_Stack_Size+0x1114>
    1310:	000802bc 			; <UNDEFINED> instruction: 0x000802bc
    1314:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1318:	0046e402 	subeq	lr, r6, r2, lsl #8
    131c:	03d90308 	bicseq	r0, r9, #8, 6	; 0x20000000
    1320:	e6315f01 	ldrt	r5, [r1], -r1, lsl #30
    1324:	2f9f3d4c 	svccs	0x009f3d4c
    1328:	02040200 	andeq	r0, r4, #0, 4
    132c:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    1330:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    1334:	04020042 	streq	r0, [r2], #-66	; 0xffffffbe
    1338:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
    133c:	00810304 	addeq	r0, r1, r4, lsl #6
    1340:	06010402 	streq	r0, [r1], -r2, lsl #8
    1344:	2f40063c 	svccs	0x0040063c
    1348:	225a3d3d 	subscs	r3, sl, #3904	; 0xf40
    134c:	223da308 	eorscs	sl, sp, #8, 6	; 0x20000000
    1350:	22593d3d 	subscs	r3, r9, #3904	; 0xf40
    1354:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
    1358:	3c060304 	stccc	3, cr0, [r6], {4}
    135c:	01040200 	mrseq	r0, R12_usr
    1360:	223d069e 	eorscs	r0, sp, #165675008	; 0x9e00000
    1364:	0200593d 	andeq	r5, r0, #999424	; 0xf4000
    1368:	3c060304 	stccc	3, cr0, [r6], {4}
    136c:	01040200 	mrseq	r0, R12_usr
    1370:	003d069e 	mlaseq	sp, lr, r6, r0
    1374:	06030402 	streq	r0, [r3], -r2, lsl #8
    1378:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    137c:	59066601 	stmdbpl	r6, {r0, r9, sl, sp, lr}
    1380:	00593d23 	subseq	r3, r9, r3, lsr #26
    1384:	06030402 	streq	r0, [r3], -r2, lsl #8
    1388:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    138c:	3d069e01 	stccc	14, cr9, [r6, #-4]
    1390:	03040200 	movweq	r0, #16896	; 0x4200
    1394:	02003c06 	andeq	r3, r0, #1536	; 0x600
    1398:	06660104 	strbteq	r0, [r6], -r4, lsl #2
    139c:	593d2459 	ldmdbpl	sp!, {r0, r3, r4, r6, sl, sp}
    13a0:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    13a4:	67593d23 	ldrbvs	r3, [r9, -r3, lsr #26]
    13a8:	23676767 	cmncs	r7, #27000832	; 0x19c0000
    13ac:	034b593d 	movteq	r5, #47421	; 0xb93d
    13b0:	036b2048 	cmneq	fp, #72	; 0x48
    13b4:	022f2039 	eoreq	r2, pc, #57	; 0x39
    13b8:	01010017 	tsteq	r1, r7, lsl r0
    13bc:	80020500 	andhi	r0, r2, r0, lsl #10
    13c0:	03080049 	movweq	r0, #32841	; 0x8049
    13c4:	420104c6 	andmi	r0, r1, #-973078528	; 0xc6000000
    13c8:	689f302f 	ldmvs	pc, {r0, r1, r2, r3, r5, ip, sp}	; <UNPREDICTABLE>
    13cc:	00424c08 	subeq	r4, r2, r8, lsl #24
    13d0:	06030402 	streq	r0, [r3], -r2, lsl #8
    13d4:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    13d8:	3d069e01 	stccc	14, cr9, [r6, #-4]
    13dc:	4b1f3e5a 	blmi	7d0d4c <_Min_Stack_Size+0x7d0b4c>
    13e0:	3d5a4223 	lfmcc	f4, 2, [sl, #-140]	; 0xffffff74
    13e4:	10033d30 	andne	r3, r3, r0, lsr sp
    13e8:	2073032e 	rsbscs	r0, r3, lr, lsr #6
    13ec:	3c0c032f 	stccc	3, cr0, [ip], {47}	; 0x2f
    13f0:	42207603 	eormi	r7, r0, #3145728	; 0x300000
    13f4:	4b1f3e30 	blmi	7d0cbc <_Min_Stack_Size+0x7d0abc>
    13f8:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    13fc:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    1400:	02002f7a 	andeq	r2, r0, #488	; 0x1e8
    1404:	3c060304 	stccc	3, cr0, [r6], {4}
    1408:	01040200 	mrseq	r0, R12_usr
    140c:	003d0690 	mlaseq	sp, r0, r6, r0
    1410:	06030402 	streq	r0, [r3], -r2, lsl #8
    1414:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    1418:	3e06ba01 	vmlacc.f32	s22, s12, s2
    141c:	305a755a 	subscc	r7, sl, sl, asr r5
    1420:	23301e40 	teqcs	r0, #64, 28	; 0x400
    1424:	3d303d42 	ldccc	13, cr3, [r0, #-264]!	; 0xfffffef8
    1428:	02002f83 	andeq	r2, r0, #524	; 0x20c
    142c:	001d0204 	andseq	r0, sp, r4, lsl #4
    1430:	06010402 	streq	r0, [r1], -r2, lsl #8
    1434:	3d44063c 	stclcc	6, cr0, [r4, #-240]	; 0xffffff10
    1438:	03303e2f 	teqeq	r0, #752	; 0x2f0
    143c:	76033c0b 	strvc	r3, [r3], -fp, lsl #24
    1440:	3e304220 	cdpcc	2, 3, cr4, cr0, cr0, {1}
    1444:	23264b1f 			; <UNDEFINED> instruction: 0x23264b1f
    1448:	001f0221 	andseq	r0, pc, r1, lsr #4
    144c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1450:	004bac02 	subeq	sl, fp, r2, lsl #24
    1454:	05d30308 	ldrbeq	r0, [r3, #776]	; 0x308
    1458:	59303e01 	ldmdbpl	r0!, {r0, r9, sl, fp, ip, sp}
    145c:	90150368 	andsls	r0, r5, r8, ror #6
    1460:	2f206e03 	svccs	0x00206e03
    1464:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
    1468:	003c0603 	eorseq	r0, ip, r3, lsl #12
    146c:	9e010402 	cdpls	4, 0, cr0, cr1, cr2, {0}
    1470:	25593d06 	ldrbcs	r3, [r9, #-3334]	; 0xfffff2fa
    1474:	03040200 	movweq	r0, #16896	; 0x4200
    1478:	02003c06 	andeq	r3, r0, #1536	; 0x600
    147c:	06ba0104 	ldrteq	r0, [sl], r4, lsl #2
    1480:	3d26593d 			; <UNDEFINED> instruction: 0x3d26593d
    1484:	0b03a259 	bleq	e9df0 <_Min_Stack_Size+0xe9bf0>
    1488:	20770390 			; <UNDEFINED> instruction: 0x20770390
    148c:	2f232f3d 	svccs	0x00232f3d
    1490:	2130243d 	teqcs	r0, sp, lsr r4
    1494:	01001202 	tsteq	r0, r2, lsl #4
    1498:	02050001 	andeq	r0, r5, #1
    149c:	08004cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, lr}
    14a0:	01069703 	tsteq	r6, r3, lsl #14
    14a4:	af5c6741 	svcge	0x005c6741
    14a8:	2f315168 	svccs	0x00315168
    14ac:	03040200 	movweq	r0, #16896	; 0x4200
    14b0:	02003c06 	andeq	r3, r0, #1536	; 0x600
    14b4:	06660104 	strbteq	r0, [r6], -r4, lsl #2
    14b8:	0a02223d 	beq	89db4 <_Min_Stack_Size+0x89bb4>
    14bc:	00010100 	andeq	r0, r1, r0, lsl #2
    14c0:	4d380205 	lfmmi	f0, 4, [r8, #-20]!	; 0xffffffec
    14c4:	c3030800 	movwgt	r0, #14336	; 0x3800
    14c8:	3d670106 	stfcce	f0, [r7, #-24]!	; 0xffffffe8
    14cc:	67693f3d 			; <UNDEFINED> instruction: 0x67693f3d
    14d0:	753d6867 	ldrvc	r6, [sp, #-2151]!	; 0xfffff799
    14d4:	01001302 	tsteq	r0, r2, lsl #6
    14d8:	02050001 	andeq	r0, r5, #1
    14dc:	08004dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, lr}
    14e0:	0106e403 	tsteq	r6, r3, lsl #8
    14e4:	3d2f592f 			; <UNDEFINED> instruction: 0x3d2f592f
    14e8:	05023d31 	streq	r3, [r2, #-3377]	; 0xfffff2cf
    14ec:	00010100 	andeq	r0, r1, r0, lsl #2
    14f0:	4dec0205 	sfmmi	f0, 2, [ip, #20]!
    14f4:	fa030800 	blx	c34fc <_Min_Stack_Size+0xc32fc>
    14f8:	3d2f0106 	stfccs	f0, [pc, #-24]!	; 14e8 <_Min_Stack_Size+0x12e8>
    14fc:	0b023d3d 	bleq	909f8 <_Min_Stack_Size+0x907f8>
    1500:	00010100 	andeq	r0, r1, r0, lsl #2
    1504:	4e180205 	cdpmi	2, 1, cr0, cr8, cr5, {0}
    1508:	8b030800 	blhi	c3510 <_Min_Stack_Size+0xc3310>
    150c:	592f0107 	stmdbpl	pc!, {r0, r1, r2, r8}	; <UNPREDICTABLE>
    1510:	01000702 	tsteq	r0, r2, lsl #14
    1514:	02050001 	andeq	r0, r5, #1
    1518:	08004e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, lr}
    151c:	01079d03 	tsteq	r7, r3, lsl #26
    1520:	59594b4b 	ldmdbpl	r9, {r0, r1, r3, r6, r8, r9, fp, lr}^
    1524:	00070259 	andeq	r0, r7, r9, asr r2
    1528:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    152c:	004e7002 	subeq	r7, lr, r2
    1530:	07a50308 	streq	r0, [r5, r8, lsl #6]!
    1534:	594b4b01 	stmdbpl	fp, {r0, r8, r9, fp, lr}^
    1538:	07025959 	smlsdeq	r2, r9, r9, r5
    153c:	00010100 	andeq	r0, r1, r0, lsl #2
    1540:	4eac0205 	cdpmi	2, 10, cr0, cr12, cr5, {0}
    1544:	ad030800 	stcge	8, cr0, [r3, #-0]
    1548:	4b4b0107 	blmi	12c196c <_Min_Stack_Size+0x12c176c>
    154c:	02595959 	subseq	r5, r9, #1458176	; 0x164000
    1550:	01010007 	tsteq	r1, r7
    1554:	e8020500 	stmda	r2, {r8, sl}
    1558:	0308004e 	movweq	r0, #32846	; 0x804e
    155c:	4b0107b5 	blmi	43438 <_Min_Stack_Size+0x43238>
    1560:	5959594b 	ldmdbpl	r9, {r0, r1, r3, r6, r8, fp, ip, lr}^
    1564:	01000702 	tsteq	r0, r2, lsl #14
    1568:	02050001 	andeq	r0, r5, #1
    156c:	00000000 	andeq	r0, r0, r0
    1570:	0107c703 	tsteq	r7, r3, lsl #14
    1574:	06022f2f 	streq	r2, [r2], -pc, lsr #30
    1578:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    157c:	02000002 	andeq	r0, r0, #2
    1580:	0000a500 	andeq	sl, r0, r0, lsl #10
    1584:	fb010200 	blx	41d8e <_Min_Stack_Size+0x41b8e>
    1588:	01000d0e 	tsteq	r0, lr, lsl #26
    158c:	00010101 	andeq	r0, r1, r1, lsl #2
    1590:	00010000 	andeq	r0, r1, r0
    1594:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    1598:	2f656d6f 	svccs	0x00656d6f
    159c:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    15a0:	542f7673 	strtpl	r7, [pc], #-1651	; 15a8 <_Min_Stack_Size+0x13a8>
    15a4:	41534144 	cmpmi	r3, r4, asr #2
    15a8:	4f492d54 	svcmi	0x00492d54
    15ac:	6e492f54 	mcrvs	15, 2, r2, cr9, cr4, {2}
    15b0:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    15b4:	442f7465 	strtmi	r7, [pc], #-1125	; 15bc <_Min_Stack_Size+0x13bc>
    15b8:	2f00534e 	svccs	0x0000534e
    15bc:	2f727375 	svccs	0x00727375
    15c0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    15c4:	2f656475 	svccs	0x00656475
    15c8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    15cc:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 1430 <_Min_Stack_Size+0x1230>
    15d0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    15d4:	2f00656e 	svccs	0x0000656e
    15d8:	2f727375 	svccs	0x00727375
    15dc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    15e0:	2f656475 	svccs	0x00656475
    15e4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    15e8:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    15ec:	00007379 	andeq	r7, r0, r9, ror r3
    15f0:	5f736e64 	svcpl	0x00736e64
    15f4:	73726170 	cmnvc	r2, #112, 2
    15f8:	00632e65 	rsbeq	r2, r3, r5, ror #28
    15fc:	5f000001 	svcpl	0x00000001
    1600:	61666564 	cmnvs	r6, r4, ror #10
    1604:	5f746c75 	svcpl	0x00746c75
    1608:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    160c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1610:	5f000002 	svcpl	0x00000002
    1614:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1618:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    161c:	00000300 	andeq	r0, r0, r0, lsl #6
    1620:	2e736e64 	cdpcs	14, 7, cr6, cr3, cr4, {3}
    1624:	00010068 	andeq	r0, r1, r8, rrx
    1628:	05000000 	streq	r0, [r0, #-0]
    162c:	004f2402 	subeq	r2, pc, r2, lsl #8
    1630:	01110308 	tsteq	r1, r8, lsl #6
    1634:	2168754d 	cmncs	r8, sp, asr #10
    1638:	01000502 	tsteq	r0, r2, lsl #10
    163c:	02050001 	andeq	r0, r5, #1
    1640:	08004f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, lr}
    1644:	77012803 	strvc	r2, [r1, -r3, lsl #16]
    1648:	32302f2f 	eorscc	r2, r0, #47, 30	; 0xbc
    164c:	0402005a 	streq	r0, [r2], #-90	; 0xffffffa6
    1650:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    1654:	3d3d5a3e 	vldmdbcc	sp!, {s10-s71}
    1658:	3f5bad30 	svccc	0x005bad30
    165c:	04020076 	streq	r0, [r2], #-118	; 0xffffff8a
    1660:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    1664:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    1668:	003c0601 	eorseq	r0, ip, r1, lsl #12
    166c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1670:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
    1674:	00200602 	eoreq	r0, r0, r2, lsl #12
    1678:	82010402 	andhi	r0, r1, #33554432	; 0x2000000
    167c:	3d595906 	vldrcc.16	s11, [r9, #-12]	; <UNPREDICTABLE>
    1680:	03207503 			; <UNDEFINED> instruction: 0x03207503
    1684:	593f200d 	ldmdbpl	pc!, {r0, r2, r3, sp}	; <UNPREDICTABLE>
    1688:	21685969 	cmncs	r8, r9, ror #18
    168c:	01000502 	tsteq	r0, r2, lsl #10
    1690:	02050001 	andeq	r0, r5, #1
    1694:	08005060 	stmdaeq	r0, {r5, r6, ip, lr}
    1698:	0100ea03 	tsteq	r0, r3, lsl #20
    169c:	0200bd78 	andeq	fp, r0, #120, 26	; 0x1e00
    16a0:	58060104 	stmdapl	r6, {r2, r8}
    16a4:	59753006 	ldmdbpl	r5!, {r1, r2, ip, sp}^
    16a8:	0402005a 	streq	r0, [r2], #-90	; 0xffffffa6
    16ac:	05022f01 	streq	r2, [r2, #-3841]	; 0xfffff0ff
    16b0:	00010100 	andeq	r0, r1, r0, lsl #2
    16b4:	50c40205 	sbcpl	r0, r4, r5, lsl #4
    16b8:	87030800 	strhi	r0, [r3, -r0, lsl #16]
    16bc:	d8b00101 	ldmle	r0!, {r0, r8}
    16c0:	01040200 	mrseq	r0, R12_usr
    16c4:	30065806 	andcc	r5, r6, r6, lsl #16
    16c8:	75758391 	ldrbvc	r8, [r5, #-913]!	; 0xfffffc6f
    16cc:	29027775 	stmdbcs	r2, {r0, r2, r4, r5, r6, r8, r9, sl, ip, sp, lr}
    16d0:	bbbbad16 	bllt	feeecb30 <BootRAM+0xde5d2d1>
    16d4:	200903bb 			; <UNDEFINED> instruction: 0x200903bb
    16d8:	040200d7 	streq	r0, [r2], #-215	; 0xffffff29
    16dc:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    16e0:	9f229130 	svcls	0x00229130
    16e4:	22919f92 	addscs	r9, r1, #584	; 0x248
    16e8:	0200d776 	andeq	sp, r0, #30932992	; 0x1d80000
    16ec:	58060104 	stmdapl	r6, {r2, r8}
    16f0:	23913006 	orrscs	r3, r1, #6
    16f4:	040200d7 	streq	r0, [r2], #-215	; 0xffffff29
    16f8:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    16fc:	00d79330 	sbcseq	r9, r7, r0, lsr r3
    1700:	06010402 	streq	r0, [r1], -r2, lsl #8
    1704:	92300658 	eorsls	r0, r0, #88, 12	; 0x5800000
    1708:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
    170c:	00232675 	eoreq	r2, r3, r5, ror r6
    1710:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    1714:	01000502 	tsteq	r0, r2, lsl #10
    1718:	02050001 	andeq	r0, r5, #1
    171c:	080053bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, ip, lr}
    1720:	0101e703 	tsteq	r1, r3, lsl #14
    1724:	755a2f6c 	ldrbvc	r2, [sl, #-3948]	; 0xfffff094
    1728:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
    172c:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    1730:	0200923e 	andeq	r9, r0, #-536870909	; 0xe0000003
    1734:	58060104 	stmdapl	r6, {r2, r8}
    1738:	02003d06 	andeq	r3, r0, #384	; 0x180
    173c:	58060104 	stmdapl	r6, {r2, r8}
    1740:	02003d06 	andeq	r3, r0, #384	; 0x180
    1744:	58060104 	stmdapl	r6, {r2, r8}
    1748:	02003d06 	andeq	r3, r0, #384	; 0x180
    174c:	58060104 	stmdapl	r6, {r2, r8}
    1750:	91753e06 	cmnls	r5, r6, lsl #28
    1754:	3f949191 	svccc	0x00949191
    1758:	03040200 	movweq	r0, #16896	; 0x4200
    175c:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    1760:	02005603 	andeq	r5, r0, #3145728	; 0x300000
    1764:	3c060104 	stfccs	f0, [r6], {4}
    1768:	02005e06 	andeq	r5, r0, #6, 28	; 0x60
    176c:	003e0304 	eorseq	r0, lr, r4, lsl #6
    1770:	64030402 	strvs	r0, [r3], #-1026	; 0xfffffbfe
    1774:	01040200 	mrseq	r0, R12_usr
    1778:	5e063c06 	cdppl	12, 0, cr3, cr6, cr6, {0}
    177c:	03040200 	movweq	r0, #16896	; 0x4200
    1780:	02003c06 	andeq	r3, r0, #1536	; 0x600
    1784:	063c0104 	ldrteq	r0, [ip], -r4, lsl #2
    1788:	0402005e 	streq	r0, [r2], #-94	; 0xffffffa2
    178c:	003c0603 	eorseq	r0, ip, r3, lsl #12
    1790:	3c010402 	cfstrscc	mvf0, [r1], {2}
    1794:	02005d06 	andeq	r5, r0, #384	; 0x180
    1798:	4a060104 	bmi	181bb0 <_Min_Stack_Size+0x1819b0>
    179c:	02212f06 	eoreq	r2, r1, #6, 30
    17a0:	01010004 	tsteq	r1, r4
    17a4:	00000184 	andeq	r0, r0, r4, lsl #3
    17a8:	009f0002 	addseq	r0, pc, r2
    17ac:	01020000 	mrseq	r0, (UNDEF: 2)
    17b0:	000d0efb 	strdeq	r0, [sp], -fp
    17b4:	01010101 	tsteq	r1, r1, lsl #2
    17b8:	01000000 	mrseq	r0, (UNDEF: 0)
    17bc:	2f010000 	svccs	0x00010000
    17c0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    17c4:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    17c8:	2f767375 	svccs	0x00767375
    17cc:	53414454 	movtpl	r4, #5204	; 0x1454
    17d0:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    17d4:	492f544f 	stmdbmi	pc!, {r0, r1, r2, r3, r6, sl, ip, lr}	; <UNPREDICTABLE>
    17d8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    17dc:	2f74656e 	svccs	0x0074656e
    17e0:	00534e44 	subseq	r4, r3, r4, asr #28
    17e4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    17e8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    17ec:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    17f0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    17f4:	2f62696c 	svccs	0x0062696c
    17f8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    17fc:	00656e69 	rsbeq	r6, r5, r9, ror #28
    1800:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1804:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1808:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    180c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1810:	2f62696c 	svccs	0x0062696c
    1814:	00737973 	rsbseq	r7, r3, r3, ror r9
    1818:	736e6400 	cmnvc	lr, #0, 8
    181c:	0100632e 	tsteq	r0, lr, lsr #6
    1820:	645f0000 	ldrbvs	r0, [pc], #-0	; 1828 <_Min_Stack_Size+0x1628>
    1824:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    1828:	745f746c 	ldrbvc	r7, [pc], #-1132	; 1830 <_Min_Stack_Size+0x1630>
    182c:	73657079 	cmnvc	r5, #121	; 0x79
    1830:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1834:	735f0000 	cmpvc	pc, #0
    1838:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    183c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1840:	64000003 	strvs	r0, [r0], #-3
    1844:	682e736e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
    1848:	00000100 	andeq	r0, r0, r0, lsl #2
    184c:	02050000 	andeq	r0, r5, #0
    1850:	08005534 	stmdaeq	r0, {r2, r4, r5, r8, sl, ip, lr}
    1854:	67013303 	strvs	r3, [r1, -r3, lsl #6]
    1858:	02216883 	eoreq	r6, r1, #8585216	; 0x830000
    185c:	01010005 	tsteq	r1, r5
    1860:	68020500 	stmdavs	r2, {r8, sl}
    1864:	03080055 	movweq	r0, #32853	; 0x8055
    1868:	080100c9 	stmdaeq	r1, {r0, r3, r6, r7}
    186c:	91674c28 	cmnls	r7, r8, lsr #24
    1870:	7575919f 	ldrbvc	r9, [r5, #-415]!	; 0xfffffe61
    1874:	4b837675 	blmi	fe0df250 <BootRAM+0xd04f9f1>
    1878:	02007678 	andeq	r7, r0, #120, 12	; 0x7800000
    187c:	4a060104 	bmi	181c94 <_Min_Stack_Size+0x181a94>
    1880:	9f5a9106 	svcls	0x005a9106
    1884:	4c839f5b 	stcmi	15, cr9, [r3], {91}	; 0x5b
    1888:	9f912275 	svcls	0x00912275
    188c:	03207403 			; <UNDEFINED> instruction: 0x03207403
    1890:	7675200e 	ldrbtvc	r2, [r5], -lr
    1894:	00080267 	andeq	r0, r8, r7, ror #4
    1898:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    189c:	00572402 	subseq	r2, r7, r2, lsl #8
    18a0:	01870308 	orreq	r0, r7, r8, lsl #6
    18a4:	a39f6d01 	orrsge	r6, pc, #1, 26	; 0x40
    18a8:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
    18ac:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    18b0:	1d03e53d 	cfstr32ne	mvfx14, [r3, #-244]	; 0xffffff0c
    18b4:	9e670320 	cdpls	3, 6, cr0, cr7, cr0, {1}
    18b8:	51304f5a 	teqpl	r0, sl, asr pc
    18bc:	a0762308 	rsbsge	r2, r6, r8, lsl #6
    18c0:	01040200 	mrseq	r0, R12_usr
    18c4:	000a0223 	andeq	r0, sl, r3, lsr #4
    18c8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    18cc:	00582802 	subseq	r2, r8, r2, lsl #16
    18d0:	01c40308 	biceq	r0, r4, r8, lsl #6
    18d4:	3d3e6701 	ldccc	7, cr6, [lr, #-4]!
    18d8:	22084e3d 	andcs	r4, r8, #976	; 0x3d0
    18dc:	000c0275 	andeq	r0, ip, r5, ror r2
    18e0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    18e4:	00589802 	subseq	r9, r8, r2, lsl #16
    18e8:	01e10308 	mvneq	r0, r8, lsl #6
    18ec:	3d767b01 	fldmdbxcc	r6!, {d23-d22}	;@ Deprecated
    18f0:	02007541 	andeq	r7, r0, #272629760	; 0x10400000
    18f4:	3c060104 	stfccs	f0, [r6], {4}
    18f8:	215b4006 	cmpcs	fp, r6
    18fc:	01000702 	tsteq	r0, r2, lsl #14
    1900:	02050001 	andeq	r0, r5, #1
    1904:	080058f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, lr}
    1908:	01028703 	tsteq	r2, r3, lsl #14
    190c:	4b3d4c31 	blmi	f549d8 <_Min_Stack_Size+0xf547d8>
    1910:	31673e3d 	cmncc	r7, sp, lsr lr
    1914:	00080221 	andeq	r0, r8, r1, lsr #4
    1918:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    191c:	00593c02 	subseq	r3, r9, r2, lsl #24
    1920:	02a30308 	adceq	r0, r3, #8, 6	; 0x20000000
    1924:	02592f01 	subseq	r2, r9, #1, 30
    1928:	01010007 	tsteq	r1, r7
    192c:	000001c7 	andeq	r0, r0, r7, asr #3
    1930:	01500002 	cmpeq	r0, r2
    1934:	01020000 	mrseq	r0, (UNDEF: 2)
    1938:	000d0efb 	strdeq	r0, [sp], -fp
    193c:	01010101 	tsteq	r1, r1, lsl #2
    1940:	01000000 	mrseq	r0, (UNDEF: 0)
    1944:	2f010000 	svccs	0x00010000
    1948:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    194c:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    1950:	2f767375 	svccs	0x00767375
    1954:	53414454 	movtpl	r4, #5204	; 0x1454
    1958:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    195c:	4c2f544f 	cfstrsmi	mvf5, [pc], #-316	; 1828 <_Min_Stack_Size+0x1628>
    1960:	61726269 	cmnvs	r2, r9, ror #4
    1964:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    1968:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    196c:	73752f00 	cmnvc	r5, #0, 30
    1970:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1974:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1978:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    197c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1980:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    1984:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    1988:	73752f00 	cmnvc	r5, #0, 30
    198c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1990:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1994:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    1998:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    199c:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    19a0:	6f682f00 	svcvs	0x00682f00
    19a4:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    19a8:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    19ac:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    19b0:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    19b4:	544f492d 	strbpl	r4, [pc], #-2349	; 19bc <_Min_Stack_Size+0x17bc>
    19b8:	534d432f 	movtpl	r4, #54063	; 0xd32f
    19bc:	432f5349 			; <UNDEFINED> instruction: 0x432f5349
    19c0:	432f334d 			; <UNDEFINED> instruction: 0x432f334d
    19c4:	5365726f 	cmnpl	r5, #-268435450	; 0xf0000006
    19c8:	6f707075 	svcvs	0x00707075
    19cc:	2f007472 	svccs	0x00007472
    19d0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    19d4:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    19d8:	2f767375 	svccs	0x00767375
    19dc:	53414454 	movtpl	r4, #5204	; 0x1454
    19e0:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    19e4:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    19e8:	5349534d 	movtpl	r5, #37709	; 0x934d
    19ec:	334d432f 	movtcc	r4, #54063	; 0xd32f
    19f0:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    19f4:	53656369 	cmnpl	r5, #-1543503871	; 0xa4000001
    19f8:	6f707075 	svcvs	0x00707075
    19fc:	532f7472 			; <UNDEFINED> instruction: 0x532f7472
    1a00:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xfffff0ac
    1a04:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1a08:	00783031 	rsbseq	r3, r8, r1, lsr r0
    1a0c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1958 <_Min_Stack_Size+0x1758>
    1a10:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1a14:	76737572 			; <UNDEFINED> instruction: 0x76737572
    1a18:	4144542f 	cmpmi	r4, pc, lsr #8
    1a1c:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    1a20:	2f544f49 	svccs	0x00544f49
    1a24:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1a28:	65697261 	strbvs	r7, [r9, #-609]!	; 0xfffffd9f
    1a2c:	6e692f73 	mcrvs	15, 3, r2, cr9, cr3, {3}
    1a30:	6d000063 	stcvs	0, cr0, [r0, #-396]	; 0xfffffe74
    1a34:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
    1a38:	00010063 	andeq	r0, r1, r3, rrx
    1a3c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    1a40:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1a44:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1a48:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    1a4c:	00020068 	andeq	r0, r2, r8, rrx
    1a50:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    1a54:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    1a58:	0300682e 	movweq	r6, #2094	; 0x82e
    1a5c:	6f630000 	svcvs	0x00630000
    1a60:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    1a64:	682e336d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
    1a68:	00000400 	andeq	r0, r0, r0, lsl #8
    1a6c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1a70:	30316632 	eorscc	r6, r1, r2, lsr r6
    1a74:	00682e78 	rsbeq	r2, r8, r8, ror lr
    1a78:	6d000005 	stcvs	0, cr0, [r0, #-20]	; 0xffffffec
    1a7c:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
    1a80:	00060068 	andeq	r0, r6, r8, rrx
    1a84:	05000000 	streq	r0, [r0, #-0]
    1a88:	00595802 	subseq	r5, r9, r2, lsl #16
    1a8c:	00e00308 	rsceq	r0, r0, r8, lsl #6
    1a90:	02754f01 	rsbseq	r4, r5, #1, 30
    1a94:	01010007 	tsteq	r1, r7
    1a98:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
    1a9c:	03080059 	movweq	r0, #32857	; 0x8059
    1aa0:	4b0100f0 	blmi	41e68 <_Min_Stack_Size+0x41c68>
    1aa4:	4b754d6d 	blmi	1d55060 <_Min_Stack_Size+0x1d54e60>
    1aa8:	3e83755a 	mcrcc	5, 4, r7, cr3, cr10, {2}
    1aac:	03736793 	cmneq	r3, #38535168	; 0x24c0000
    1ab0:	671d2e09 	ldrvs	r2, [sp, -r9, lsl #28]
    1ab4:	09024d65 	stmdbeq	r2, {r0, r2, r5, r6, r8, sl, fp, lr}
    1ab8:	00010100 	andeq	r0, r1, r0, lsl #2
    1abc:	00000205 	andeq	r0, r0, r5, lsl #4
    1ac0:	9c030000 	stcls	0, cr0, [r3], {-0}
    1ac4:	915d0101 	cmpls	sp, r1, lsl #2
    1ac8:	01000802 	tsteq	r0, r2, lsl #16
    1acc:	02050001 	andeq	r0, r5, #1
    1ad0:	00000000 	andeq	r0, r0, r0
    1ad4:	0101af03 	tsteq	r1, r3, lsl #30
    1ad8:	1e6c3e87 	cdpne	14, 6, cr3, cr12, cr7, {4}
    1adc:	00070276 	andeq	r0, r7, r6, ror r2
    1ae0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1ae4:	00000002 	andeq	r0, r0, r2
    1ae8:	01c70300 	biceq	r0, r7, r0, lsl #6
    1aec:	6c3e4d01 	ldcvs	13, cr4, [lr], #-4
    1af0:	0802681e 	stmdaeq	r2, {r1, r2, r3, r4, fp, sp, lr}
    1af4:	4f010100 	svcmi	0x00010100
    1af8:	02000004 	andeq	r0, r0, #4
    1afc:	00016200 	andeq	r6, r1, r0, lsl #4
    1b00:	fb010200 	blx	4230a <_Min_Stack_Size+0x4210a>
    1b04:	01000d0e 	tsteq	r0, lr, lsl #26
    1b08:	00010101 	andeq	r0, r1, r1, lsl #2
    1b0c:	00010000 	andeq	r0, r1, r0
    1b10:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    1b14:	2f656d6f 	svccs	0x00656d6f
    1b18:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    1b1c:	542f7673 	strtpl	r7, [pc], #-1651	; 1b24 <_Min_Stack_Size+0x1924>
    1b20:	41534144 	cmpmi	r3, r4, asr #2
    1b24:	4f492d54 	svcmi	0x00492d54
    1b28:	694c2f54 	stmdbvs	ip, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1b2c:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    1b30:	2f736569 	svccs	0x00736569
    1b34:	00637273 	rsbeq	r7, r3, r3, ror r2
    1b38:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1b3c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1b40:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1b44:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1b48:	2f62696c 	svccs	0x0062696c
    1b4c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    1b50:	00656e69 	rsbeq	r6, r5, r9, ror #28
    1b54:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1b58:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1b5c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1b60:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1b64:	2f62696c 	svccs	0x0062696c
    1b68:	00737973 	rsbseq	r7, r3, r3, ror r9
    1b6c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1ab8 <_Min_Stack_Size+0x18b8>
    1b70:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1b74:	76737572 			; <UNDEFINED> instruction: 0x76737572
    1b78:	4144542f 	cmpmi	r4, pc, lsr #8
    1b7c:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    1b80:	2f544f49 	svccs	0x00544f49
    1b84:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    1b88:	4d432f53 	stclmi	15, cr2, [r3, #-332]	; 0xfffffeb4
    1b8c:	65442f33 	strbvs	r2, [r4, #-3891]	; 0xfffff0cd
    1b90:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    1b94:	70707553 	rsbsvc	r7, r0, r3, asr r5
    1b98:	2f74726f 	svccs	0x0074726f
    1b9c:	532f5453 			; <UNDEFINED> instruction: 0x532f5453
    1ba0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1ba4:	78303146 	ldmdavc	r0!, {r1, r2, r6, r8, ip, sp}
    1ba8:	6f682f00 	svcvs	0x00682f00
    1bac:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    1bb0:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    1bb4:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    1bb8:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    1bbc:	544f492d 	strbpl	r4, [pc], #-2349	; 1bc4 <_Min_Stack_Size+0x19c4>
    1bc0:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1bc4:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1bc8:	692f7365 	stmdbvs	pc!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1bcc:	2f00636e 	svccs	0x0000636e
    1bd0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1bd4:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    1bd8:	2f767375 	svccs	0x00767375
    1bdc:	53414454 	movtpl	r4, #5204	; 0x1454
    1be0:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    1be4:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    1be8:	5349534d 	movtpl	r5, #37709	; 0x934d
    1bec:	334d432f 	movtcc	r4, #54063	; 0xd32f
    1bf0:	726f432f 	rsbvc	r4, pc, #-1140850688	; 0xbc000000
    1bf4:	70755365 	rsbsvc	r5, r5, r5, ror #6
    1bf8:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    1bfc:	74730000 	ldrbtvc	r0, [r3], #-0
    1c00:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1c04:	5f783031 	svcpl	0x00783031
    1c08:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    1c0c:	00010063 	andeq	r0, r1, r3, rrx
    1c10:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    1c14:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1c18:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1c1c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    1c20:	00020068 	andeq	r0, r2, r8, rrx
    1c24:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    1c28:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    1c2c:	0300682e 	movweq	r6, #2094	; 0x82e
    1c30:	74730000 	ldrbtvc	r0, [r3], #-0
    1c34:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1c38:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
    1c3c:	00040068 	andeq	r0, r4, r8, rrx
    1c40:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1c44:	31663233 	cmncc	r6, r3, lsr r2
    1c48:	725f7830 	subsvc	r7, pc, #48, 16	; 0x300000
    1c4c:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    1c50:	00000500 	andeq	r0, r0, r0, lsl #10
    1c54:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    1c58:	336d635f 	cmncc	sp, #2080374785	; 0x7c000001
    1c5c:	0600682e 	streq	r6, [r0], -lr, lsr #16
    1c60:	00000000 	andeq	r0, r0, r0
    1c64:	00000205 	andeq	r0, r0, r5, lsl #4
    1c68:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    1c6c:	6a300101 	bvs	c02078 <_Min_Stack_Size+0xc01e78>
    1c70:	0369856c 	cmneq	r9, #108, 10	; 0x1b000000
    1c74:	024d6613 	subeq	r6, sp, #19922944	; 0x1300000
    1c78:	01010008 	tsteq	r1, r8
    1c7c:	00020500 	andeq	r0, r2, r0, lsl #10
    1c80:	03000000 	movweq	r0, #0
    1c84:	4f01028e 	svcmi	0x0001028e
    1c88:	0d036868 	stceq	8, cr6, [r3, #-416]	; 0xfffffe60
    1c8c:	20770374 	rsbscs	r0, r7, r4, ror r3
    1c90:	25672467 	strbcs	r2, [r7, #-1127]!	; 0xfffffb99
    1c94:	01000802 	tsteq	r0, r2, lsl #16
    1c98:	02050001 	andeq	r0, r5, #1
    1c9c:	00000000 	andeq	r0, r0, r0
    1ca0:	0102b003 	tsteq	r2, r3
    1ca4:	002f2f3d 	eoreq	r2, pc, sp, lsr pc	; <UNPREDICTABLE>
    1ca8:	33020402 	movwcc	r0, #9218	; 0x2402
    1cac:	02040200 	andeq	r0, r4, #0, 4
    1cb0:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
    1cb4:	02003d02 	andeq	r3, r0, #2, 26	; 0x80
    1cb8:	4a060104 	bmi	1820d0 <_Min_Stack_Size+0x181ed0>
    1cbc:	40683e06 	rsbmi	r3, r8, r6, lsl #28
    1cc0:	04022130 	streq	r2, [r2], #-304	; 0xfffffed0
    1cc4:	00010100 	andeq	r0, r1, r0, lsl #2
    1cc8:	00000205 	andeq	r0, r0, r5, lsl #4
    1ccc:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    1cd0:	31590102 	cmpcc	r9, r2, lsl #2
    1cd4:	3d5a4c3e 	ldclcc	12, cr4, [sl, #-248]	; 0xffffff08
    1cd8:	01000802 	tsteq	r0, r2, lsl #16
    1cdc:	02050001 	andeq	r0, r5, #1
    1ce0:	00000000 	andeq	r0, r0, r0
    1ce4:	0102e203 	tsteq	r2, r3, lsl #4
    1ce8:	08023d5b 	stmdaeq	r2, {r0, r1, r3, r4, r6, r8, sl, fp, ip, sp}
    1cec:	00010100 	andeq	r0, r1, r0, lsl #2
    1cf0:	00000205 	andeq	r0, r0, r5, lsl #4
    1cf4:	fa030000 	blx	c1cfc <_Min_Stack_Size+0xc1afc>
    1cf8:	34590102 	ldrbcc	r0, [r9], #-258	; 0xfffffefe
    1cfc:	3d684c3e 	stclcc	12, cr4, [r8, #-248]!	; 0xffffff08
    1d00:	01000702 	tsteq	r0, r2, lsl #14
    1d04:	02050001 	andeq	r0, r5, #1
    1d08:	00000000 	andeq	r0, r0, r0
    1d0c:	01039103 	tsteq	r3, r3, lsl #2
    1d10:	08023d5c 	stmdaeq	r2, {r2, r3, r4, r6, r8, sl, fp, ip, sp}
    1d14:	00010100 	andeq	r0, r1, r0, lsl #2
    1d18:	00000205 	andeq	r0, r0, r5, lsl #4
    1d1c:	b4030000 	strlt	r0, [r3], #-0
    1d20:	314b0104 	cmpcc	fp, r4, lsl #2
    1d24:	3d4c4c3e 	stclcc	12, cr4, [ip, #-248]	; 0xffffff08
    1d28:	01000802 	tsteq	r0, r2, lsl #16
    1d2c:	02050001 	andeq	r0, r5, #1
    1d30:	00000000 	andeq	r0, r0, r0
    1d34:	0104cb03 	tsteq	r4, r3, lsl #22
    1d38:	0602672f 	streq	r6, [r2], -pc, lsr #14
    1d3c:	00010100 	andeq	r0, r1, r0, lsl #2
    1d40:	00000205 	andeq	r0, r0, r5, lsl #4
    1d44:	e0030000 	and	r0, r3, r0
    1d48:	314b0104 	cmpcc	fp, r4, lsl #2
    1d4c:	3d4c4c3e 	stclcc	12, cr4, [ip, #-248]	; 0xffffff08
    1d50:	01000802 	tsteq	r0, r2, lsl #16
    1d54:	02050001 	andeq	r0, r5, #1
    1d58:	00000000 	andeq	r0, r0, r0
    1d5c:	0104fa03 	tsteq	r4, r3, lsl #20	; <UNPREDICTABLE>
    1d60:	4c3e314b 	ldfmis	f3, [lr], #-300	; 0xfffffed4
    1d64:	08023d4c 	stmdaeq	r2, {r2, r3, r6, r8, sl, fp, ip, sp}
    1d68:	00010100 	andeq	r0, r1, r0, lsl #2
    1d6c:	00000205 	andeq	r0, r0, r5, lsl #4
    1d70:	94030000 	strls	r0, [r3], #-0
    1d74:	314b0105 	cmpcc	fp, r5, lsl #2
    1d78:	3d5a4c3e 	ldclcc	12, cr4, [sl, #-248]	; 0xffffff08
    1d7c:	01000702 	tsteq	r0, r2, lsl #14
    1d80:	02050001 	andeq	r0, r5, #1
    1d84:	00000000 	andeq	r0, r0, r0
    1d88:	0105bc03 	tsteq	r5, r3, lsl #24
    1d8c:	1e893f86 	cdpne	15, 8, cr3, cr9, cr6, {4}
    1d90:	000802a0 	andeq	r0, r8, r0, lsr #5
    1d94:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1d98:	00000002 	andeq	r0, r0, r2
    1d9c:	05d80300 	ldrbeq	r0, [r8, #768]	; 0x300
    1da0:	023d4e01 	eorseq	r4, sp, #1, 28
    1da4:	01010007 	tsteq	r1, r7
    1da8:	00020500 	andeq	r0, r2, r0, lsl #10
    1dac:	03000000 	movweq	r0, #0
    1db0:	4b0105fe 	blmi	435b0 <_Min_Stack_Size+0x433b0>
    1db4:	4c4c3e31 	mcrrmi	14, 3, r3, ip, cr1
    1db8:	0008023d 	andeq	r0, r8, sp, lsr r2
    1dbc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1dc0:	00000002 	andeq	r0, r0, r2
    1dc4:	06bd0300 	ldrteq	r0, [sp], r0, lsl #6
    1dc8:	3e3e5d01 	cdpcc	13, 3, cr5, cr14, cr1, {0}
    1dcc:	03580d03 	cmpeq	r8, #3, 26	; 0xc0
    1dd0:	243d2077 	ldrtcs	r2, [sp], #-119	; 0xffffff89
    1dd4:	0702253d 	smladxeq	r2, sp, r5, r2
    1dd8:	00010100 	andeq	r0, r1, r0, lsl #2
    1ddc:	5a400205 	bpl	10025f8 <_Min_Stack_Size+0x10023f8>
    1de0:	de030800 	cdple	8, 0, cr0, cr3, cr0, {0}
    1de4:	3d5b0106 	ldfcce	f0, [fp, #-24]	; 0xffffffe8
    1de8:	01000802 	tsteq	r0, r2, lsl #16
    1dec:	02050001 	andeq	r0, r5, #1
    1df0:	00000000 	andeq	r0, r0, r0
    1df4:	0106ef03 	tsteq	r6, r3, lsl #30
    1df8:	0802674e 	stmdaeq	r2, {r1, r2, r3, r6, r8, r9, sl, sp, lr}
    1dfc:	00010100 	andeq	r0, r1, r0, lsl #2
    1e00:	00000205 	andeq	r0, r0, r5, lsl #4
    1e04:	fd030000 	stc2	0, cr0, [r3, #-0]
    1e08:	3d5b0106 	ldfcce	f0, [fp, #-24]	; 0xffffffe8
    1e0c:	01000802 	tsteq	r0, r2, lsl #16
    1e10:	02050001 	andeq	r0, r5, #1
    1e14:	08005a60 	stmdaeq	r0, {r5, r6, r9, fp, ip, lr}
    1e18:	01078c03 	tsteq	r7, r3, lsl #24
    1e1c:	820b034b 	andhi	r0, fp, #738197505	; 0x2c000001
    1e20:	223d775a 	eorscs	r7, sp, #23592960	; 0x1680000
    1e24:	5b59243d 	blpl	164af20 <_Min_Stack_Size+0x164ad20>
    1e28:	39033e4c 	stmdbcc	r3, {r2, r3, r6, r9, sl, fp, ip, sp}
    1e2c:	20510366 	subscs	r0, r1, r6, ror #6
    1e30:	662d0368 	strtvs	r0, [sp], -r8, ror #6
    1e34:	03205703 			; <UNDEFINED> instruction: 0x03205703
    1e38:	3d236629 	stccc	6, cr6, [r3, #-164]!	; 0xffffff5c
    1e3c:	683d5925 	ldmdavs	sp!, {r0, r2, r5, r8, fp, ip, lr}
    1e40:	683d5968 	ldmdavs	sp!, {r3, r5, r6, r8, fp, ip, lr}
    1e44:	683d5968 	ldmdavs	sp!, {r3, r5, r6, r8, fp, ip, lr}
    1e48:	683d5968 	ldmdavs	sp!, {r3, r5, r6, r8, fp, ip, lr}
    1e4c:	000f0275 	andeq	r0, pc, r5, ror r2	; <UNPREDICTABLE>
    1e50:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1e54:	00000002 	andeq	r0, r0, r2
    1e58:	08a80300 	stmiaeq	r8!, {r8, r9}
    1e5c:	6c3e6b01 			; <UNDEFINED> instruction: 0x6c3e6b01
    1e60:	0702761e 	smladeq	r2, lr, r6, r7
    1e64:	00010100 	andeq	r0, r1, r0, lsl #2
    1e68:	5bc00205 	blpl	ff002684 <BootRAM+0xdf72e25>
    1e6c:	c7030800 	strgt	r0, [r3, -r0, lsl #16]
    1e70:	3e6a0108 	powcce	f0, f2, #0.0
    1e74:	02761e6c 	rsbseq	r1, r6, #108, 28	; 0x6c0
    1e78:	01010007 	tsteq	r1, r7
    1e7c:	fc020500 	stc2	5, cr0, [r2], {-0}
    1e80:	0308005b 	movweq	r0, #32859	; 0x805b
    1e84:	6a0108e6 	bvs	44224 <_Min_Stack_Size+0x44024>
    1e88:	761e6c3e 			; <UNDEFINED> instruction: 0x761e6c3e
    1e8c:	01000702 	tsteq	r0, r2, lsl #14
    1e90:	02050001 	andeq	r0, r5, #1
    1e94:	00000000 	andeq	r0, r0, r0
    1e98:	0109a103 	tsteq	r9, r3, lsl #2
    1e9c:	1e6c3e6a 	cdpne	14, 6, cr3, cr12, cr10, {3}
    1ea0:	00070276 	andeq	r0, r7, r6, ror r2
    1ea4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1ea8:	005c3802 	subseq	r3, ip, r2, lsl #16
    1eac:	09c00308 	stmibeq	r0, {r3, r8, r9}^
    1eb0:	6c3e6a01 			; <UNDEFINED> instruction: 0x6c3e6a01
    1eb4:	0702761e 	smladeq	r2, lr, r6, r7
    1eb8:	00010100 	andeq	r0, r1, r0, lsl #2
    1ebc:	00000205 	andeq	r0, r0, r5, lsl #4
    1ec0:	d5030000 	strle	r0, [r3, #-0]
    1ec4:	3d5b0109 	ldfcce	f0, [fp, #-36]	; 0xffffffdc
    1ec8:	01000802 	tsteq	r0, r2, lsl #16
    1ecc:	02050001 	andeq	r0, r5, #1
    1ed0:	00000000 	andeq	r0, r0, r0
    1ed4:	0109e203 	tsteq	r9, r3, lsl #4
    1ed8:	08023d5b 	stmdaeq	r2, {r0, r1, r3, r4, r6, r8, sl, fp, ip, sp}
    1edc:	00010100 	andeq	r0, r1, r0, lsl #2
    1ee0:	00000205 	andeq	r0, r0, r5, lsl #4
    1ee4:	82030000 	andhi	r0, r3, #0
    1ee8:	3d5d010a 	ldfcce	f0, [sp, #-40]	; 0xffffffd8
    1eec:	01000802 	tsteq	r0, r2, lsl #16
    1ef0:	02050001 	andeq	r0, r5, #1
    1ef4:	08005c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, ip, lr}
    1ef8:	010aae03 	tsteq	sl, r3, lsl #28
    1efc:	332f2f59 			; <UNDEFINED> instruction: 0x332f2f59
    1f00:	3e4c3e4b 	cdpcc	14, 4, cr3, cr12, cr11, {2}
    1f04:	844b404e 	strbhi	r4, [fp], #-78	; 0xffffffb2
    1f08:	02213240 	eoreq	r3, r1, #64, 4
    1f0c:	01010008 	tsteq	r1, r8
    1f10:	00020500 	andeq	r0, r2, r0, lsl #10
    1f14:	03000000 	movweq	r0, #0
    1f18:	30010adb 	ldrdcc	r0, [r1], -fp
    1f1c:	00060267 	andeq	r0, r6, r7, ror #4
    1f20:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1f24:	00000002 	andeq	r0, r0, r2
    1f28:	0afa0300 	beq	ffe82b30 <BootRAM+0xedf32d1>
    1f2c:	68335901 	ldmdavs	r3!, {r0, r8, fp, ip, lr}
    1f30:	02213240 	eoreq	r3, r1, #64, 4
    1f34:	01010007 	tsteq	r1, r7
    1f38:	00020500 	andeq	r0, r2, r0, lsl #10
    1f3c:	03000000 	movweq	r0, #0
    1f40:	5e010ba8 	vmlapl.f64	d0, d17, d24
    1f44:	0008023d 	andeq	r0, r8, sp, lsr r2
    1f48:	03540101 	cmpeq	r4, #1073741824	; 0x40000000
    1f4c:	00020000 	andeq	r0, r2, r0
    1f50:	00000164 	andeq	r0, r0, r4, ror #2
    1f54:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1f58:	0101000d 	tsteq	r1, sp
    1f5c:	00000101 	andeq	r0, r0, r1, lsl #2
    1f60:	00000100 	andeq	r0, r0, r0, lsl #2
    1f64:	6f682f01 	svcvs	0x00682f01
    1f68:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    1f6c:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    1f70:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    1f74:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    1f78:	544f492d 	strbpl	r4, [pc], #-2349	; 1f80 <_Min_Stack_Size+0x1d80>
    1f7c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1f80:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1f84:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
    1f88:	2f006372 	svccs	0x00006372
    1f8c:	2f727375 	svccs	0x00727375
    1f90:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1f94:	2f656475 	svccs	0x00656475
    1f98:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1f9c:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 1e00 <_Min_Stack_Size+0x1c00>
    1fa0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    1fa4:	2f00656e 	svccs	0x0000656e
    1fa8:	2f727375 	svccs	0x00727375
    1fac:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1fb0:	2f656475 	svccs	0x00656475
    1fb4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1fb8:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    1fbc:	2f007379 	svccs	0x00007379
    1fc0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1fc4:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    1fc8:	2f767375 	svccs	0x00767375
    1fcc:	53414454 	movtpl	r4, #5204	; 0x1454
    1fd0:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    1fd4:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    1fd8:	5349534d 	movtpl	r5, #37709	; 0x934d
    1fdc:	334d432f 	movtcc	r4, #54063	; 0xd32f
    1fe0:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    1fe4:	53656369 	cmnpl	r5, #-1543503871	; 0xa4000001
    1fe8:	6f707075 	svcvs	0x00707075
    1fec:	532f7472 			; <UNDEFINED> instruction: 0x532f7472
    1ff0:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xfffff0ac
    1ff4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1ff8:	00783031 	rsbseq	r3, r8, r1, lsr r0
    1ffc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1f48 <_Min_Stack_Size+0x1d48>
    2000:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    2004:	76737572 			; <UNDEFINED> instruction: 0x76737572
    2008:	4144542f 	cmpmi	r4, pc, lsr #8
    200c:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    2010:	2f544f49 	svccs	0x00544f49
    2014:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    2018:	65697261 	strbvs	r7, [r9, #-609]!	; 0xfffffd9f
    201c:	6e692f73 	mcrvs	15, 3, r2, cr9, cr3, {3}
    2020:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
    2024:	2f656d6f 	svccs	0x00656d6f
    2028:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    202c:	542f7673 	strtpl	r7, [pc], #-1651	; 2034 <_Min_Stack_Size+0x1e34>
    2030:	41534144 	cmpmi	r3, r4, asr #2
    2034:	4f492d54 	svcmi	0x00492d54
    2038:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    203c:	2f534953 	svccs	0x00534953
    2040:	2f334d43 	svccs	0x00334d43
    2044:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    2048:	70707553 	rsbsvc	r7, r0, r3, asr r5
    204c:	0074726f 	rsbseq	r7, r4, pc, ror #4
    2050:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2054:	31663233 	cmncc	r6, r3, lsr r2
    2058:	675f7830 	smmlarvs	pc, r0, r8, r7	; <UNPREDICTABLE>
    205c:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    2060:	00010063 	andeq	r0, r1, r3, rrx
    2064:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    2068:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    206c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2070:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    2074:	00020068 	andeq	r0, r2, r8, rrx
    2078:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    207c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    2080:	0300682e 	movweq	r6, #2094	; 0x82e
    2084:	74730000 	ldrbtvc	r0, [r3], #-0
    2088:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    208c:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
    2090:	00040068 	andeq	r0, r4, r8, rrx
    2094:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2098:	31663233 	cmncc	r6, r3, lsr r2
    209c:	675f7830 	smmlarvs	pc, r0, r8, r7	; <UNPREDICTABLE>
    20a0:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    20a4:	00050068 	andeq	r0, r5, r8, rrx
    20a8:	726f6300 	rsbvc	r6, pc, #0, 6
    20ac:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    20b0:	00682e33 	rsbeq	r2, r8, r3, lsr lr
    20b4:	00000006 	andeq	r0, r0, r6
    20b8:	00020500 	andeq	r0, r2, r0, lsl #10
    20bc:	03000000 	movweq	r0, #0
    20c0:	4e0100ec 	cdpmi	0, 0, cr0, cr1, cr12, {7}
    20c4:	23034b4c 	movwcs	r4, #15180	; 0x3b4c
    20c8:	205f034a 	subscs	r0, pc, sl, asr #6
    20cc:	1e034b4c 	vmlsne.f64	d4, d3, d12
    20d0:	2064034a 	rsbcs	r0, r4, sl, asr #6
    20d4:	19034b4c 	stmdbne	r3, {r2, r3, r6, r8, r9, fp, lr}
    20d8:	2069034a 	rsbcs	r0, r9, sl, asr #6
    20dc:	14034b4c 	strne	r4, [r3], #-2892	; 0xfffff4b4
    20e0:	206e034a 	rsbcs	r0, lr, sl, asr #6
    20e4:	0f034b4c 	svceq	0x00034b4c
    20e8:	2073034a 	rsbscs	r0, r3, sl, asr #6
    20ec:	0a034b4c 	beq	d4e24 <_Min_Stack_Size+0xd4c24>
    20f0:	207a034a 	rsbscs	r0, sl, sl, asr #6
    20f4:	025b594c 	subseq	r5, fp, #76, 18	; 0x130000
    20f8:	01010012 	tsteq	r1, r2, lsl r0
    20fc:	00020500 	andeq	r0, r2, r0, lsl #10
    2100:	03000000 	movweq	r0, #0
    2104:	2f01019f 	svccs	0x0001019f
    2108:	02024b4b 	andeq	r4, r2, #76800	; 0x12c00
    210c:	00010100 	andeq	r0, r1, r0, lsl #2
    2110:	5ce80205 	sfmpl	f0, 2, [r8], #20
    2114:	ad030800 	stcge	8, cr0, [r3, #-0]
    2118:	83590101 	cmphi	r9, #1073741824	; 0x40000000
    211c:	6a6b5951 	bvs	1ad8668 <_Min_Stack_Size+0x1ad8468>
    2120:	5a3e3d5a 	bpl	f91690 <_Min_Stack_Size+0xf91490>
    2124:	593e4c67 	ldmdbpl	lr!, {r0, r1, r2, r5, r6, sl, fp, lr}
    2128:	6b4c765a 	blvs	131fa98 <_Min_Stack_Size+0x131f898>
    212c:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
    2130:	58690302 	stmdapl	r9!, {r1, r8, r9}^
    2134:	01040200 	mrseq	r0, R12_usr
    2138:	03063c06 	movweq	r3, #27654	; 0x6c06
    213c:	4c403c1c 	mcrrmi	12, 1, r3, r0, cr12
    2140:	67683e3d 			; <UNDEFINED> instruction: 0x67683e3d
    2144:	5a593e4c 	bpl	1651a7c <_Min_Stack_Size+0x165187c>
    2148:	4c694c76 	stclmi	12, cr4, [r9], #-472	; 0xfffffe28
    214c:	02040200 	andeq	r0, r4, #0, 4
    2150:	00666b03 	rsbeq	r6, r6, r3, lsl #22
    2154:	06010402 	streq	r0, [r1], -r2, lsl #8
    2158:	1903063c 	stmdbne	r3, {r2, r3, r4, r5, r9, sl}
    215c:	05023e3c 	streq	r3, [r2, #-3644]	; 0xfffff1c4
    2160:	00010100 	andeq	r0, r1, r0, lsl #2
    2164:	00000205 	andeq	r0, r0, r5, lsl #4
    2168:	8a030000 	bhi	c2170 <_Min_Stack_Size+0xc1f70>
    216c:	4b4c0102 	blmi	130257c <_Min_Stack_Size+0x130237c>
    2170:	05023d3d 	streq	r3, [r2, #-3389]	; 0xfffff2c3
    2174:	00010100 	andeq	r0, r1, r0, lsl #2
    2178:	00000205 	andeq	r0, r0, r5, lsl #4
    217c:	99030000 	stmdbls	r3, {}	; <UNPREDICTABLE>
    2180:	34670102 	strbtcc	r0, [r7], #-258	; 0xfffffefe
    2184:	21304068 	teqcs	r0, r8, rrx
    2188:	01000502 	tsteq	r0, r2, lsl #10
    218c:	02050001 	andeq	r0, r5, #1
    2190:	00000000 	andeq	r0, r0, r0
    2194:	0102b103 	tsteq	r2, r3, lsl #2
    2198:	05023d4e 	streq	r3, [r2, #-3406]	; 0xfffff2b2
    219c:	00010100 	andeq	r0, r1, r0, lsl #2
    21a0:	00000205 	andeq	r0, r0, r5, lsl #4
    21a4:	c0030000 	andgt	r0, r3, r0
    21a8:	33670102 	cmncc	r7, #-2147483648	; 0x80000000
    21ac:	21304068 	teqcs	r0, r8, rrx
    21b0:	01000502 	tsteq	r0, r2, lsl #10
    21b4:	02050001 	andeq	r0, r5, #1
    21b8:	00000000 	andeq	r0, r0, r0
    21bc:	0102d703 	tsteq	r2, r3, lsl #14
    21c0:	05023d4e 	streq	r3, [r2, #-3406]	; 0xfffff2b2
    21c4:	00010100 	andeq	r0, r1, r0, lsl #2
    21c8:	5e600205 	cdppl	2, 6, cr0, cr0, cr5, {0}
    21cc:	e6030800 	str	r0, [r3], -r0, lsl #16
    21d0:	3d6b0102 	stfcce	f0, [fp, #-8]!
    21d4:	01000502 	tsteq	r0, r2, lsl #10
    21d8:	02050001 	andeq	r0, r5, #1
    21dc:	08005e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp, ip, lr}
    21e0:	0102f603 	tsteq	r2, r3, lsl #12	; <UNPREDICTABLE>
    21e4:	05023d6b 	streq	r3, [r2, #-3435]	; 0xfffff295
    21e8:	00010100 	andeq	r0, r1, r0, lsl #2
    21ec:	00000205 	andeq	r0, r0, r5, lsl #4
    21f0:	8a030000 	bhi	c21f8 <_Min_Stack_Size+0xc1ff8>
    21f4:	3e880103 	rmfcce	f0, f0, f3
    21f8:	023e1e42 	eorseq	r1, lr, #1056	; 0x420
    21fc:	01010005 	tsteq	r1, r5
    2200:	00020500 	andeq	r0, r2, r0, lsl #10
    2204:	03000000 	movweq	r0, #0
    2208:	6a0103a1 	bvs	43094 <_Min_Stack_Size+0x42e94>
    220c:	0005023d 	andeq	r0, r5, sp, lsr r2
    2210:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2214:	00000002 	andeq	r0, r0, r2
    2218:	03b00300 	movseq	r0, #0, 6
    221c:	4c426701 	mcrrmi	7, 0, r6, r2, cr1
    2220:	3e3e3e3e 	mrccc	14, 1, r3, cr14, cr14, {1}
    2224:	0005023d 	andeq	r0, r5, sp, lsr r2
    2228:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    222c:	00000002 	andeq	r0, r0, r2
    2230:	03ce0300 	biceq	r0, lr, #0, 6
    2234:	3e338301 	cdpcc	3, 3, cr8, cr3, cr1, {0}
    2238:	3d4b5959 	vstrcc.16	s11, [fp, #-178]	; 0xffffff4e	; <UNPREDICTABLE>
    223c:	01000802 	tsteq	r0, r2, lsl #16
    2240:	02050001 	andeq	r0, r5, #1
    2244:	00000000 	andeq	r0, r0, r0
    2248:	0103e303 	tsteq	r3, r3, lsl #6
    224c:	08023d5c 	stmdaeq	r2, {r2, r3, r4, r6, r8, sl, fp, ip, sp}
    2250:	00010100 	andeq	r0, r1, r0, lsl #2
    2254:	00000205 	andeq	r0, r0, r5, lsl #4
    2258:	a5030000 	strge	r0, [r3, #-0]
    225c:	88670104 	stmdahi	r7!, {r2, r8}^
    2260:	593f4e3e 	ldmdbpl	pc!, {r1, r2, r3, r4, r5, r9, sl, fp, lr}	; <UNPREDICTABLE>
    2264:	764b683e 			; <UNDEFINED> instruction: 0x764b683e
    2268:	5c59595a 	mrrcpl	9, 5, r5, r9, cr10	; <UNPREDICTABLE>
    226c:	933e4d9f 	teqls	lr, #10176	; 0x27c0
    2270:	3e1e423e 	mrccc	2, 0, r4, cr14, cr14, {1}
    2274:	01000702 	tsteq	r0, r2, lsl #14
    2278:	02050001 	andeq	r0, r5, #1
    227c:	00000000 	andeq	r0, r0, r0
    2280:	0104e103 	tsteq	r4, r3, lsl #2
    2284:	08833383 	stmeq	r3, {r0, r1, r7, r8, r9, ip, sp}
    2288:	02670821 	rsbeq	r0, r7, #2162688	; 0x210000
    228c:	01010007 	tsteq	r1, r7
    2290:	00020500 	andeq	r0, r2, r0, lsl #10
    2294:	03000000 	movweq	r0, #0
    2298:	4e0104f6 	mcrmi	4, 0, r0, cr1, cr6, {7}
    229c:	0007023d 	andeq	r0, r7, sp, lsr r2
    22a0:	03b10101 			; <UNDEFINED> instruction: 0x03b10101
    22a4:	00020000 	andeq	r0, r2, r0
    22a8:	00000175 	andeq	r0, r0, r5, ror r1
    22ac:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    22b0:	0101000d 	tsteq	r1, sp
    22b4:	00000101 	andeq	r0, r0, r1, lsl #2
    22b8:	00000100 	andeq	r0, r0, r0, lsl #2
    22bc:	6f682f01 	svcvs	0x00682f01
    22c0:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    22c4:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    22c8:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    22cc:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    22d0:	544f492d 	strbpl	r4, [pc], #-2349	; 22d8 <_Min_Stack_Size+0x20d8>
    22d4:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    22d8:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    22dc:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
    22e0:	2f006372 	svccs	0x00006372
    22e4:	2f727375 	svccs	0x00727375
    22e8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    22ec:	2f656475 	svccs	0x00656475
    22f0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    22f4:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 2158 <_Min_Stack_Size+0x1f58>
    22f8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    22fc:	2f00656e 	svccs	0x0000656e
    2300:	2f727375 	svccs	0x00727375
    2304:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2308:	2f656475 	svccs	0x00656475
    230c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    2310:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    2314:	2f007379 	svccs	0x00007379
    2318:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    231c:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    2320:	2f767375 	svccs	0x00767375
    2324:	53414454 	movtpl	r4, #5204	; 0x1454
    2328:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    232c:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    2330:	5349534d 	movtpl	r5, #37709	; 0x934d
    2334:	334d432f 	movtcc	r4, #54063	; 0xd32f
    2338:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    233c:	53656369 	cmnpl	r5, #-1543503871	; 0xa4000001
    2340:	6f707075 	svcvs	0x00707075
    2344:	532f7472 			; <UNDEFINED> instruction: 0x532f7472
    2348:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xfffff0ac
    234c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2350:	00783031 	rsbseq	r3, r8, r1, lsr r0
    2354:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 22a0 <_Min_Stack_Size+0x20a0>
    2358:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    235c:	76737572 			; <UNDEFINED> instruction: 0x76737572
    2360:	4144542f 	cmpmi	r4, pc, lsr #8
    2364:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    2368:	2f544f49 	svccs	0x00544f49
    236c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    2370:	65697261 	strbvs	r7, [r9, #-609]!	; 0xfffffd9f
    2374:	6e692f73 	mcrvs	15, 3, r2, cr9, cr3, {3}
    2378:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
    237c:	2f656d6f 	svccs	0x00656d6f
    2380:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    2384:	542f7673 	strtpl	r7, [pc], #-1651	; 238c <_Min_Stack_Size+0x218c>
    2388:	41534144 	cmpmi	r3, r4, asr #2
    238c:	4f492d54 	svcmi	0x00492d54
    2390:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    2394:	2f534953 	svccs	0x00534953
    2398:	2f334d43 	svccs	0x00334d43
    239c:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    23a0:	70707553 	rsbsvc	r7, r0, r3, asr r5
    23a4:	0074726f 	rsbseq	r7, r4, pc, ror #4
    23a8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    23ac:	31663233 	cmncc	r6, r3, lsr r2
    23b0:	735f7830 	cmpvc	pc, #48, 16	; 0x300000
    23b4:	632e6970 			; <UNDEFINED> instruction: 0x632e6970
    23b8:	00000100 	andeq	r0, r0, r0, lsl #2
    23bc:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    23c0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    23c4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    23c8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    23cc:	00000200 	andeq	r0, r0, r0, lsl #4
    23d0:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    23d4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    23d8:	00030068 	andeq	r0, r3, r8, rrx
    23dc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    23e0:	31663233 	cmncc	r6, r3, lsr r2
    23e4:	682e7830 	stmdavs	lr!, {r4, r5, fp, ip, sp, lr}
    23e8:	00000400 	andeq	r0, r0, r0, lsl #8
    23ec:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    23f0:	30316632 	eorscc	r6, r1, r2, lsr r6
    23f4:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
    23f8:	00682e63 	rsbeq	r2, r8, r3, ror #28
    23fc:	73000005 	movwvc	r0, #5
    2400:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2404:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2408:	6970735f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    240c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    2410:	6f630000 	svcvs	0x00630000
    2414:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    2418:	682e336d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
    241c:	00000600 	andeq	r0, r0, r0, lsl #12
    2420:	02050000 	andeq	r0, r5, #0
    2424:	00000000 	andeq	r0, r0, r0
    2428:	0100f703 	tsteq	r0, r3, lsl #14	; <UNPREDICTABLE>
    242c:	035a4d4e 	cmpeq	sl, #4992	; 0x1380
    2430:	6f035813 	svcvs	0x00035813
    2434:	035a4d20 	cmpeq	sl, #32, 26	; 0x800
    2438:	7803580c 	stmdavc	r3, {r2, r3, fp, ip, lr}
    243c:	5b5a4d20 	blpl	16958c4 <_Min_Stack_Size+0x16956c4>
    2440:	01000a02 	tsteq	r0, r2, lsl #20
    2444:	02050001 	andeq	r0, r5, #1
    2448:	08005e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip, lr}
    244c:	01019e03 	tsteq	r1, r3, lsl #28
    2450:	2e120359 	mrccs	3, 0, r0, cr2, cr9, {2}
    2454:	4a09033e 	bmi	243154 <_Min_Stack_Size+0x242f54>
    2458:	2d2f2d67 	stccs	13, cr2, [pc, #-412]!	; 22c4 <_Min_Stack_Size+0x20c4>
    245c:	2c302c30 	ldccs	12, cr2, [r0], #-192	; 0xffffff40
    2460:	2b312b31 	blcs	c4d12c <_Min_Stack_Size+0xc4cf2c>
    2464:	4b863f5d 	blmi	fe1921e0 <BootRAM+0xd102981>
    2468:	01000502 	tsteq	r0, r2, lsl #10
    246c:	02050001 	andeq	r0, r5, #1
    2470:	00000000 	andeq	r0, r0, r0
    2474:	0101db03 	tsteq	r1, r3, lsl #22
    2478:	03308359 	teqeq	r0, #1677721601	; 0x64000001
    247c:	3f9f2e0d 	svccc	0x009f2e0d
    2480:	422f4c3f 	eormi	r4, pc, #16128	; 0x3f00
    2484:	4d32414d 	ldfmis	f4, [r2, #-308]!	; 0xfffffecc
    2488:	3c29034f 	stccc	3, cr0, [r9], #-316	; 0xfffffec4
    248c:	f75b325b 			; <UNDEFINED> instruction: 0xf75b325b
    2490:	5b693208 	blpl	1a4ecb8 <_Min_Stack_Size+0x1a4eab8>
    2494:	0200405b 	andeq	r4, r0, #91	; 0x5b
    2498:	3c060104 	stfccs	f0, [r6], {4}
    249c:	322f3f06 	eorcc	r3, pc, #6, 30
    24a0:	2d4b2fa1 	stclcs	15, cr2, [fp, #-644]	; 0xfffffd7c
    24a4:	023d8749 	eorseq	r8, sp, #19136512	; 0x1240000
    24a8:	01010009 	tsteq	r1, r9
    24ac:	00020500 	andeq	r0, r2, r0, lsl #10
    24b0:	03000000 	movweq	r0, #0
    24b4:	4d0102f2 	sfmmi	f0, 4, [r1, #-968]	; 0xfffffc38
    24b8:	3e3e3e3e 	mrccc	14, 1, r3, cr14, cr14, {1}
    24bc:	3e3e3e3e 	mrccc	14, 1, r3, cr14, cr14, {1}
    24c0:	0005023d 	andeq	r0, r5, sp, lsr r2
    24c4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    24c8:	00000002 	andeq	r0, r0, r2
    24cc:	038e0300 	orreq	r0, lr, #0, 6
    24d0:	3f3f4d01 	svccc	0x003f4d01
    24d4:	3d3f3f3f 	ldccc	15, cr3, [pc, #-252]!	; 23e0 <_Min_Stack_Size+0x21e0>
    24d8:	01000502 	tsteq	r0, r2, lsl #10
    24dc:	02050001 	andeq	r0, r5, #1
    24e0:	08005f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip, lr}
    24e4:	0103ab03 	tsteq	r3, r3, lsl #22
    24e8:	1e893f6a 	cdpne	15, 8, cr3, cr9, cr10, {3}
    24ec:	00050284 	andeq	r0, r5, r4, lsl #5
    24f0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    24f4:	00000002 	andeq	r0, r0, r2
    24f8:	03c30300 	biceq	r0, r3, #0, 6
    24fc:	893f6a01 	ldmdbhi	pc!, {r0, r9, fp, sp, lr}	; <UNPREDICTABLE>
    2500:	0502841e 	streq	r8, [r2, #-1054]	; 0xfffffbe2
    2504:	00010100 	andeq	r0, r1, r0, lsl #2
    2508:	00000205 	andeq	r0, r0, r5, lsl #4
    250c:	e2030000 	and	r0, r3, #0
    2510:	51830103 	orrpl	r0, r3, r3, lsl #2
    2514:	893f5a4d 	ldmdbhi	pc!, {r0, r2, r3, r6, r9, fp, ip, lr}	; <UNPREDICTABLE>
    2518:	0502a01e 	streq	sl, [r2, #-30]	; 0xffffffe2
    251c:	00010100 	andeq	r0, r1, r0, lsl #2
    2520:	00000205 	andeq	r0, r0, r5, lsl #4
    2524:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
    2528:	3f870104 	svccc	0x00870104
    252c:	02a01e89 	adceq	r1, r0, #2192	; 0x890
    2530:	01010005 	tsteq	r1, r5
    2534:	60020500 	andvs	r0, r2, r0, lsl #10
    2538:	0308005f 	movweq	r0, #32863	; 0x805f
    253c:	6b0104a3 	blvs	437d0 <_Min_Stack_Size+0x435d0>
    2540:	0005023d 	andeq	r0, r5, sp, lsr r2
    2544:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2548:	005f7c02 	subseq	r7, pc, r2, lsl #24
    254c:	04b30308 	ldrteq	r0, [r3], #776	; 0x308
    2550:	023d4f01 	eorseq	r4, sp, #1, 30
    2554:	01010005 	tsteq	r1, r5
    2558:	00020500 	andeq	r0, r2, r0, lsl #10
    255c:	03000000 	movweq	r0, #0
    2560:	6a0104c5 	bvs	4387c <_Min_Stack_Size+0x4367c>
    2564:	841e895b 	ldrhi	r8, [lr], #-2395	; 0xfffff6a5
    2568:	01000502 	tsteq	r0, r2, lsl #10
    256c:	02050001 	andeq	r0, r5, #1
    2570:	00000000 	andeq	r0, r0, r0
    2574:	0104dd03 	tsteq	r4, r3, lsl #26
    2578:	1e893f6a 	cdpne	15, 8, cr3, cr9, cr10, {3}
    257c:	00050284 	andeq	r0, r5, r4, lsl #5
    2580:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2584:	00000002 	andeq	r0, r0, r2
    2588:	04f70300 	ldrbteq	r0, [r7], #768	; 0x300
    258c:	83846b01 	orrhi	r6, r4, #1024	; 0x400
    2590:	01000502 	tsteq	r0, r2, lsl #10
    2594:	02050001 	andeq	r0, r5, #1
    2598:	00000000 	andeq	r0, r0, r0
    259c:	01058703 	tsteq	r5, r3, lsl #14
    25a0:	0502834f 	streq	r8, [r2, #-847]	; 0xfffffcb1
    25a4:	00010100 	andeq	r0, r1, r0, lsl #2
    25a8:	00000205 	andeq	r0, r0, r5, lsl #4
    25ac:	97030000 	strls	r0, [r3, -r0]
    25b0:	3f6a0105 	svccc	0x006a0105
    25b4:	02841e89 	addeq	r1, r4, #2192	; 0x890
    25b8:	01010005 	tsteq	r1, r5
    25bc:	00020500 	andeq	r0, r2, r0, lsl #10
    25c0:	03000000 	movweq	r0, #0
    25c4:	670105b1 			; <UNDEFINED> instruction: 0x670105b1
    25c8:	3f4f3f32 	svccc	0x004f3f32
    25cc:	00050221 	andeq	r0, r5, r1, lsr #4
    25d0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    25d4:	00000002 	andeq	r0, r0, r2
    25d8:	05ca0300 	strbeq	r0, [sl, #768]	; 0x300
    25dc:	023d4f01 	eorseq	r4, sp, #1, 30
    25e0:	01010005 	tsteq	r1, r5
    25e4:	00020500 	andeq	r0, r2, r0, lsl #10
    25e8:	03000000 	movweq	r0, #0
    25ec:	6a0105dc 	bvs	43d64 <_Min_Stack_Size+0x43b64>
    25f0:	841e894d 	ldrhi	r8, [lr], #-2381	; 0xfffff6b3
    25f4:	01000502 	tsteq	r0, r2, lsl #10
    25f8:	02050001 	andeq	r0, r5, #1
    25fc:	08005f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, ip, lr}
    2600:	0105fe03 	tsteq	r5, r3, lsl #28	; <UNPREDICTABLE>
    2604:	41853367 	orrmi	r3, r5, r7, ror #6
    2608:	05022131 	streq	r2, [r2, #-305]	; 0xfffffecf
    260c:	00010100 	andeq	r0, r1, r0, lsl #2
    2610:	00000205 	andeq	r0, r0, r5, lsl #4
    2614:	a4030000 	strge	r0, [r3], #-0
    2618:	596c0106 	stmdbpl	ip!, {r1, r2, r8}^
    261c:	01000502 	tsteq	r0, r2, lsl #10
    2620:	02050001 	andeq	r0, r5, #1
    2624:	00000000 	andeq	r0, r0, r0
    2628:	0106bd03 	tsteq	r6, r3, lsl #26
    262c:	776d2f67 	strbvc	r2, [sp, -r7, ror #30]!
    2630:	00695b4d 	rsbeq	r5, r9, sp, asr #22
    2634:	06010402 	streq	r0, [r1], -r2, lsl #8
    2638:	413f0682 	teqmi	pc, r2, lsl #13
    263c:	05022131 	streq	r2, [r2, #-305]	; 0xfffffecf
    2640:	00010100 	andeq	r0, r1, r0, lsl #2
    2644:	00000205 	andeq	r0, r0, r5, lsl #4
    2648:	f3030000 	vhadd.u8	d0, d3, d0
    264c:	34670106 	strbtcc	r0, [r7], #-262	; 0xfffffefa
    2650:	05025977 	streq	r5, [r2, #-2423]	; 0xfffff689
    2654:	d4010100 	strle	r0, [r1], #-256	; 0xffffff00
    2658:	0200000a 	andeq	r0, r0, #10
    265c:	00016200 	andeq	r6, r1, r0, lsl #4
    2660:	fb010200 	blx	42e6a <_Min_Stack_Size+0x42c6a>
    2664:	01000d0e 	tsteq	r0, lr, lsl #26
    2668:	00010101 	andeq	r0, r1, r1, lsl #2
    266c:	00010000 	andeq	r0, r1, r0
    2670:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    2674:	2f656d6f 	svccs	0x00656d6f
    2678:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    267c:	542f7673 	strtpl	r7, [pc], #-1651	; 2684 <_Min_Stack_Size+0x2484>
    2680:	41534144 	cmpmi	r3, r4, asr #2
    2684:	4f492d54 	svcmi	0x00492d54
    2688:	694c2f54 	stmdbvs	ip, {r2, r4, r6, r8, r9, sl, fp, sp}^
    268c:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    2690:	2f736569 	svccs	0x00736569
    2694:	00637273 	rsbeq	r7, r3, r3, ror r2
    2698:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    269c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    26a0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    26a4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    26a8:	2f62696c 	svccs	0x0062696c
    26ac:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    26b0:	00656e69 	rsbeq	r6, r5, r9, ror #28
    26b4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    26b8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    26bc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    26c0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    26c4:	2f62696c 	svccs	0x0062696c
    26c8:	00737973 	rsbseq	r7, r3, r3, ror r9
    26cc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2618 <_Min_Stack_Size+0x2418>
    26d0:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    26d4:	76737572 			; <UNDEFINED> instruction: 0x76737572
    26d8:	4144542f 	cmpmi	r4, pc, lsr #8
    26dc:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    26e0:	2f544f49 	svccs	0x00544f49
    26e4:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    26e8:	4d432f53 	stclmi	15, cr2, [r3, #-332]	; 0xfffffeb4
    26ec:	65442f33 	strbvs	r2, [r4, #-3891]	; 0xfffff0cd
    26f0:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    26f4:	70707553 	rsbsvc	r7, r0, r3, asr r5
    26f8:	2f74726f 	svccs	0x0074726f
    26fc:	532f5453 			; <UNDEFINED> instruction: 0x532f5453
    2700:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2704:	78303146 	ldmdavc	r0!, {r1, r2, r6, r8, ip, sp}
    2708:	6f682f00 	svcvs	0x00682f00
    270c:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    2710:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    2714:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    2718:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    271c:	544f492d 	strbpl	r4, [pc], #-2349	; 2724 <_Min_Stack_Size+0x2524>
    2720:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    2724:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2728:	692f7365 	stmdbvs	pc!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
    272c:	2f00636e 	svccs	0x0000636e
    2730:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    2734:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    2738:	2f767375 	svccs	0x00767375
    273c:	53414454 	movtpl	r4, #5204	; 0x1454
    2740:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    2744:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    2748:	5349534d 	movtpl	r5, #37709	; 0x934d
    274c:	334d432f 	movtcc	r4, #54063	; 0xd32f
    2750:	726f432f 	rsbvc	r4, pc, #-1140850688	; 0xbc000000
    2754:	70755365 	rsbsvc	r5, r5, r5, ror #6
    2758:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    275c:	74730000 	ldrbtvc	r0, [r3], #-0
    2760:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2764:	5f783031 	svcpl	0x00783031
    2768:	2e6d6974 			; <UNDEFINED> instruction: 0x2e6d6974
    276c:	00010063 	andeq	r0, r1, r3, rrx
    2770:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    2774:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    2778:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    277c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    2780:	00020068 	andeq	r0, r2, r8, rrx
    2784:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    2788:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    278c:	0300682e 	movweq	r6, #2094	; 0x82e
    2790:	74730000 	ldrbtvc	r0, [r3], #-0
    2794:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2798:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
    279c:	00040068 	andeq	r0, r4, r8, rrx
    27a0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    27a4:	31663233 	cmncc	r6, r3, lsr r2
    27a8:	745f7830 	ldrbvc	r7, [pc], #-2096	; 27b0 <_Min_Stack_Size+0x25b0>
    27ac:	682e6d69 	stmdavs	lr!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}
    27b0:	00000500 	andeq	r0, r0, r0, lsl #10
    27b4:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    27b8:	336d635f 	cmncc	sp, #2080374785	; 0x7c000001
    27bc:	0600682e 	streq	r6, [r0], -lr, lsr #16
    27c0:	00000000 	andeq	r0, r0, r0
    27c4:	00000205 	andeq	r0, r0, r5, lsl #4
    27c8:	fa030000 	blx	c27d0 <_Min_Stack_Size+0xc25d0>
    27cc:	4c4e0100 	stfmie	f0, [lr], {-0}
    27d0:	00d50359 	sbcseq	r0, r5, r9, asr r3
    27d4:	7fad0358 	svcvc	0x00ad0358
    27d8:	034b4c20 	movteq	r4, #48160	; 0xbc20
    27dc:	034a00d0 	movteq	r0, #41168	; 0xa0d0
    27e0:	4c207fb2 	stcmi	15, cr7, [r0], #-712	; 0xfffffd38
    27e4:	00cb034b 	sbceq	r0, fp, fp, asr #6
    27e8:	7fb7034a 	svcvc	0x00b7034a
    27ec:	034b4c20 	movteq	r4, #48160	; 0xbc20
    27f0:	034a00c6 	movteq	r0, #41158	; 0xa0c6
    27f4:	4c207fbc 	stcmi	15, cr7, [r0], #-752	; 0xfffffd10
    27f8:	00c1034b 	sbceq	r0, r1, fp, asr #6
    27fc:	2041034a 	subcs	r0, r1, sl, asr #6
    2800:	3c034b4c 			; <UNDEFINED> instruction: 0x3c034b4c
    2804:	2046034a 	subcs	r0, r6, sl, asr #6
    2808:	37034b4c 	strcc	r4, [r3, -ip, asr #22]
    280c:	204b034a 	subcs	r0, fp, sl, asr #6
    2810:	3203594c 	andcc	r5, r3, #76, 18	; 0x130000
    2814:	20500358 	subscs	r0, r0, r8, asr r3
    2818:	2d03594c 	vstrcs.16	s10, [r3, #-152]	; 0xffffff68	; <UNPREDICTABLE>
    281c:	20550358 	subscs	r0, r5, r8, asr r3
    2820:	2803594c 	stmdacs	r3, {r2, r3, r6, r8, fp, ip, lr}
    2824:	205a0358 	subscs	r0, sl, r8, asr r3
    2828:	2303594c 	movwcs	r5, #14668	; 0x394c
    282c:	205f0358 	subscs	r0, pc, r8, asr r3	; <UNPREDICTABLE>
    2830:	1e034b4c 	vmlsne.f64	d4, d3, d12
    2834:	2064034a 	rsbcs	r0, r4, sl, asr #6
    2838:	19034b4c 	stmdbne	r3, {r2, r3, r6, r8, r9, fp, lr}
    283c:	2069034a 	rsbcs	r0, r9, sl, asr #6
    2840:	1403594c 	strne	r5, [r3], #-2380	; 0xfffff6b4
    2844:	206e0358 	rsbcs	r0, lr, r8, asr r3
    2848:	0f03594c 	svceq	0x0003594c
    284c:	20730358 	rsbscs	r0, r3, r8, asr r3
    2850:	0a03594c 	beq	d8d88 <_Min_Stack_Size+0xd8b88>
    2854:	207a0358 	rsbscs	r0, sl, r8, asr r3
    2858:	025b594c 	subseq	r5, fp, #76, 18	; 0x130000
    285c:	01010024 	tsteq	r1, r4, lsr #32
    2860:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    2864:	0308005f 	movweq	r0, #32863	; 0x805f
    2868:	590101e2 	stmdbpl	r1, {r1, r5, r6, r7, r8}
    286c:	02003e35 	andeq	r3, r0, #848	; 0x350
    2870:	4a060104 	bmi	182c88 <_Min_Stack_Size+0x182a88>
    2874:	02040200 	andeq	r0, r4, #0, 4
    2878:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    287c:	02004a03 	andeq	r4, r0, #12288	; 0x3000
    2880:	064a0404 	strbeq	r0, [sl], -r4, lsl #8
    2884:	5b4b4d4b 	blpl	12d5db8 <_Min_Stack_Size+0x12d5bb8>
    2888:	01040200 	mrseq	r0, R12_usr
    288c:	4d064a06 	vstrmi	s8, [r6, #-24]	; 0xffffffe8
    2890:	4d3f5b4b 	fldmdbxmi	pc!, {d5-d41}	;@ Deprecated
    2894:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
    2898:	004a0601 	subeq	r0, sl, r1, lsl #12
    289c:	4a020402 	bmi	838ac <_Min_Stack_Size+0x836ac>
    28a0:	03040200 	movweq	r0, #16896	; 0x4200
    28a4:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    28a8:	4d064a04 	vstrmi	s8, [r6, #-16]
    28ac:	19023d5d 	stmdbne	r2, {r0, r2, r3, r4, r6, r8, sl, fp, ip, sp}
    28b0:	00010100 	andeq	r0, r1, r0, lsl #2
    28b4:	00000205 	andeq	r0, r0, r5, lsl #4
    28b8:	97030000 	strls	r0, [r3, -r0]
    28bc:	6e590102 	rdfvse	f0, f1, f2
    28c0:	3f3f3e84 	svccc	0x003f3e84
    28c4:	4c5b4d4b 	mrrcmi	13, 4, r4, fp, cr11
    28c8:	02005a5b 	andeq	r5, r0, #372736	; 0x5b000
    28cc:	4a060104 	bmi	182ce4 <_Min_Stack_Size+0x182ae4>
    28d0:	02040200 	andeq	r0, r4, #0, 4
    28d4:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    28d8:	4b064a03 	blmi	1950ec <_Min_Stack_Size+0x194eec>
    28dc:	4c5b4c52 	mrrcmi	12, 5, r4, fp, cr2
    28e0:	5a4d4b5b 	bpl	1355654 <_Min_Stack_Size+0x1355454>
    28e4:	4d3f3f5b 	ldcmi	15, cr3, [pc, #-364]!	; 2780 <_Min_Stack_Size+0x2580>
    28e8:	0010023d 	andseq	r0, r0, sp, lsr r2
    28ec:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    28f0:	00000002 	andeq	r0, r0, r2
    28f4:	02ea0300 	rsceq	r0, sl, #0, 6
    28f8:	856e5901 	strbhi	r5, [lr, #-2305]!	; 0xfffff6ff
    28fc:	4b3f3f3e 	blmi	fd25fc <_Min_Stack_Size+0xfd23fc>
    2900:	774c774d 	strbvc	r7, [ip, -sp, asr #14]
    2904:	04020076 	streq	r0, [r2], #-118	; 0xffffff8a
    2908:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    290c:	4c774c52 	ldclmi	12, cr4, [r7], #-328	; 0xfffffeb8
    2910:	764d4b77 			; <UNDEFINED> instruction: 0x764d4b77
    2914:	4d3f3f77 	ldcmi	15, cr3, [pc, #-476]!	; 2740 <_Min_Stack_Size+0x2540>
    2918:	000a023d 	andeq	r0, sl, sp, lsr r2
    291c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2920:	00000002 	andeq	r0, r0, r2
    2924:	03bc0300 			; <UNDEFINED> instruction: 0x03bc0300
    2928:	856e5901 	strbhi	r5, [lr, #-2305]!	; 0xfffff6ff
    292c:	4b3f3f3e 	blmi	fd262c <_Min_Stack_Size+0xfd242c>
    2930:	774c5b4c 	strbvc	r5, [ip, -ip, asr #22]
    2934:	04020076 	streq	r0, [r2], #-118	; 0xffffff8a
    2938:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    293c:	4d764c52 	ldclmi	12, cr4, [r6, #-328]!	; 0xfffffeb8
    2940:	764c4b76 			; <UNDEFINED> instruction: 0x764c4b76
    2944:	4d3f3f77 	ldcmi	15, cr3, [pc, #-476]!	; 2770 <_Min_Stack_Size+0x2570>
    2948:	000a023d 	andeq	r0, sl, sp, lsr r2
    294c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2950:	00000002 	andeq	r0, r0, r2
    2954:	048b0300 	streq	r0, [fp], #768	; 0x300
    2958:	856e5901 	strbhi	r5, [lr, #-2305]!	; 0xfffff6ff
    295c:	4b3f3f3e 	blmi	fd265c <_Min_Stack_Size+0xfd245c>
    2960:	774c774d 	strbvc	r7, [ip, -sp, asr #14]
    2964:	04020076 	streq	r0, [r2], #-118	; 0xffffff8a
    2968:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    296c:	3f774c4e 	svccc	0x00774c4e
    2970:	023d5b3f 	eorseq	r5, sp, #64512	; 0xfc00
    2974:	0101000a 	tsteq	r1, sl
    2978:	00020500 	andeq	r0, r2, r0, lsl #10
    297c:	03000000 	movweq	r0, #0
    2980:	030104cb 	movweq	r0, #5323	; 0x14cb
    2984:	944e5810 	strbls	r5, [lr], #-2064	; 0xfffff7f0
    2988:	03662003 	cmneq	r6, #3
    298c:	944e2062 	strbls	r2, [lr], #-98	; 0xffffff9e
    2990:	03661603 	cmneq	r6, #3145728	; 0x300000
    2994:	944e206c 	strbls	r2, [lr], #-108	; 0xffffff94
    2998:	03660c03 	cmneq	r6, #768	; 0x300
    299c:	6894207a 	ldmvs	r4, {r1, r3, r4, r5, r6, sp}
    29a0:	01000402 	tsteq	r0, r2, lsl #8
    29a4:	02050001 	andeq	r0, r5, #1
    29a8:	00000000 	andeq	r0, r0, r0
    29ac:	01058e03 	tsteq	r5, r3, lsl #28
    29b0:	4c322f59 	ldcmi	15, cr2, [r2], #-356	; 0xfffffe9c
    29b4:	404c3140 	submi	r3, ip, r0, asr #2
    29b8:	68934d30 	ldmvs	r3, {r4, r5, r8, sl, fp, lr}
    29bc:	660e0376 			; <UNDEFINED> instruction: 0x660e0376
    29c0:	93207703 			; <UNDEFINED> instruction: 0x93207703
    29c4:	02687668 	rsbeq	r7, r8, #104, 12	; 0x6800000
    29c8:	01010004 	tsteq	r1, r4
    29cc:	00020500 	andeq	r0, r2, r0, lsl #10
    29d0:	03000000 	movweq	r0, #0
    29d4:	030105c8 	movweq	r0, #5576	; 0x15c8
    29d8:	2d67580b 	stclcs	8, cr5, [r7, #-44]!	; 0xffffffd4
    29dc:	2c302d2f 	ldccs	13, cr2, [r0], #-188	; 0xffffff44
    29e0:	2b312c30 	blcs	c4daa8 <_Min_Stack_Size+0xc4d8a8>
    29e4:	0005025c 	andeq	r0, r5, ip, asr r2
    29e8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    29ec:	00000002 	andeq	r0, r0, r2
    29f0:	05e00300 	strbeq	r0, [r0, #768]!	; 0x300
    29f4:	3d4b4c01 	stclcc	12, cr4, [fp, #-4]
    29f8:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
    29fc:	01010005 	tsteq	r1, r5
    2a00:	00020500 	andeq	r0, r2, r0, lsl #10
    2a04:	03000000 	movweq	r0, #0
    2a08:	4c0105f0 	cfstr32mi	mvfx0, [r1], {240}	; 0xf0
    2a0c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2a10:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2a14:	01000502 	tsteq	r0, r2, lsl #10
    2a18:	02050001 	andeq	r0, r5, #1
    2a1c:	00000000 	andeq	r0, r0, r0
    2a20:	01068303 	tsteq	r6, r3, lsl #6
    2a24:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
    2a28:	05023d3d 	streq	r3, [r2, #-3389]	; 0xfffff2c3
    2a2c:	00010100 	andeq	r0, r1, r0, lsl #2
    2a30:	00000205 	andeq	r0, r0, r5, lsl #4
    2a34:	93030000 	movwls	r0, #12288	; 0x3000
    2a38:	3d4c0106 	stfcce	f0, [ip, #-24]	; 0xffffffe8
    2a3c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2a40:	05023d3d 	streq	r3, [r2, #-3389]	; 0xfffff2c3
    2a44:	00010100 	andeq	r0, r1, r0, lsl #2
    2a48:	60c40205 	sbcvs	r0, r4, r5, lsl #4
    2a4c:	a6030800 	strge	r0, [r3], -r0, lsl #16
    2a50:	3f6b0106 	svccc	0x006b0106
    2a54:	02841e89 	addeq	r1, r4, #2192	; 0x890
    2a58:	01010005 	tsteq	r1, r5
    2a5c:	00020500 	andeq	r0, r2, r0, lsl #10
    2a60:	03000000 	movweq	r0, #0
    2a64:	6a0106bf 	bvs	44568 <_Min_Stack_Size+0x44368>
    2a68:	a01ec13f 	andsge	ip, lr, pc, lsr r1
    2a6c:	01000502 	tsteq	r0, r2, lsl #10
    2a70:	02050001 	andeq	r0, r5, #1
    2a74:	08006104 	stmdaeq	r0, {r2, r8, sp, lr}
    2a78:	0106e803 	tsteq	r6, r3, lsl #16
    2a7c:	1e893f88 	cdpne	15, 8, cr3, cr9, cr8, {4}
    2a80:	000502a0 	andeq	r0, r5, r0, lsr #5
    2a84:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2a88:	00000002 	andeq	r0, r0, r2
    2a8c:	078d0300 	streq	r0, [sp, r0, lsl #6]
    2a90:	023d6c01 	eorseq	r6, sp, #256	; 0x100
    2a94:	01010005 	tsteq	r1, r5
    2a98:	00020500 	andeq	r0, r2, r0, lsl #10
    2a9c:	03000000 	movweq	r0, #0
    2aa0:	880107a9 	stmdahi	r1, {r0, r3, r5, r7, r8, r9, sl}
    2aa4:	00050275 	andeq	r0, r5, r5, ror r2
    2aa8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2aac:	00000002 	andeq	r0, r0, r2
    2ab0:	07c40300 	strbeq	r0, [r4, r0, lsl #6]
    2ab4:	893f8801 	ldmdbhi	pc!, {r0, fp, pc}	; <UNPREDICTABLE>
    2ab8:	0502a01e 	streq	sl, [r2, #-30]	; 0xffffffe2
    2abc:	00010100 	andeq	r0, r1, r0, lsl #2
    2ac0:	00000205 	andeq	r0, r0, r5, lsl #4
    2ac4:	dd030000 	stcle	0, cr0, [r3, #-0]
    2ac8:	834e0107 	movthi	r0, #57607	; 0xe107
    2acc:	01000502 	tsteq	r0, r2, lsl #10
    2ad0:	02050001 	andeq	r0, r5, #1
    2ad4:	00000000 	andeq	r0, r0, r0
    2ad8:	0107f003 	tsteq	r7, r3	; <UNPREDICTABLE>
    2adc:	02835a6b 	addeq	r5, r3, #438272	; 0x6b000
    2ae0:	01010004 	tsteq	r1, r4
    2ae4:	00020500 	andeq	r0, r2, r0, lsl #10
    2ae8:	03000000 	movweq	r0, #0
    2aec:	cf01088c 	svcgt	0x0001088c
    2af0:	5a69783e 	bpl	1a60bf0 <_Min_Stack_Size+0x1a609f0>
    2af4:	00040283 	andeq	r0, r4, r3, lsl #5
    2af8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2afc:	00000002 	andeq	r0, r0, r2
    2b00:	08b40300 	ldmeq	r4!, {r8, r9}
    2b04:	6935c901 	ldmdbvs	r5!, {r0, r8, fp, lr, pc}
    2b08:	4b4c4c3e 	blmi	1315c08 <_Min_Stack_Size+0x1315a08>
    2b0c:	04023d4c 	streq	r3, [r2], #-3404	; 0xfffff2b4
    2b10:	00010100 	andeq	r0, r1, r0, lsl #2
    2b14:	00000205 	andeq	r0, r0, r5, lsl #4
    2b18:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    2b1c:	68cf0108 	stmiavs	pc, {r3, r8}^	; <UNPREDICTABLE>
    2b20:	00040283 	andeq	r0, r4, r3, lsl #5
    2b24:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2b28:	00000002 	andeq	r0, r0, r2
    2b2c:	08fd0300 	ldmeq	sp!, {r8, r9}^
    2b30:	3e34c901 	vaddcc.f16	s24, s8, s2	; <UNPREDICTABLE>
    2b34:	023dbc3e 	eorseq	fp, sp, #15872	; 0x3e00
    2b38:	01010005 	tsteq	r1, r5
    2b3c:	00020500 	andeq	r0, r2, r0, lsl #10
    2b40:	03000000 	movweq	r0, #0
    2b44:	87010998 			; <UNDEFINED> instruction: 0x87010998
    2b48:	05023d3e 	streq	r3, [r2, #-3390]	; 0xfffff2c2
    2b4c:	00010100 	andeq	r0, r1, r0, lsl #2
    2b50:	00000205 	andeq	r0, r0, r5, lsl #4
    2b54:	af030000 	svcge	0x00030000
    2b58:	32670109 	rsbcc	r0, r7, #1073741826	; 0x40000002
    2b5c:	3d4c4c3e 	stclcc	12, cr4, [ip, #-248]	; 0xffffff08
    2b60:	01000502 	tsteq	r0, r2, lsl #10
    2b64:	02050001 	andeq	r0, r5, #1
    2b68:	00000000 	andeq	r0, r0, r0
    2b6c:	0109cd03 	tsteq	r9, r3, lsl #26
    2b70:	4c3e3367 	ldcmi	3, cr3, [lr], #-412	; 0xfffffe64
    2b74:	05023d4c 	streq	r3, [r2, #-3404]	; 0xfffff2b4
    2b78:	00010100 	andeq	r0, r1, r0, lsl #2
    2b7c:	00000205 	andeq	r0, r0, r5, lsl #4
    2b80:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    2b84:	2fc90109 	svccs	0x00c90109
    2b88:	2e09032f 	cdpcs	3, 0, cr0, cr9, cr15, {1}
    2b8c:	4b3f3f3f 	blmi	fd2890 <_Min_Stack_Size+0xfd2690>
    2b90:	4b69674d 	blmi	1a5c8cc <_Min_Stack_Size+0x1a5c6cc>
    2b94:	3d3e3e93 	ldccc	14, cr3, [lr, #-588]!	; 0xfffffdb4
    2b98:	01000502 	tsteq	r0, r2, lsl #10
    2b9c:	02050001 	andeq	r0, r5, #1
    2ba0:	00000000 	andeq	r0, r0, r0
    2ba4:	010aa303 	tsteq	sl, r3, lsl #6
    2ba8:	4c3e3267 	lfmmi	f3, 4, [lr], #-412	; 0xfffffe64
    2bac:	05023d4c 	streq	r3, [r2, #-3404]	; 0xfffff2b4
    2bb0:	00010100 	andeq	r0, r1, r0, lsl #2
    2bb4:	00000205 	andeq	r0, r0, r5, lsl #4
    2bb8:	bb030000 	bllt	c2bc0 <_Min_Stack_Size+0xc29c0>
    2bbc:	3267010a 	rsbcc	r0, r7, #-2147483646	; 0x80000002
    2bc0:	3d684c3e 	stclcc	12, cr4, [r8, #-248]!	; 0xffffff08
    2bc4:	01000502 	tsteq	r0, r2, lsl #10
    2bc8:	02050001 	andeq	r0, r5, #1
    2bcc:	00000000 	andeq	r0, r0, r0
    2bd0:	010ad303 	tsteq	sl, r3, lsl #6
    2bd4:	4c3e3267 	lfmmi	f3, 4, [lr], #-412	; 0xfffffe64
    2bd8:	05023d4c 	streq	r3, [r2, #-3404]	; 0xfffff2b4
    2bdc:	00010100 	andeq	r0, r1, r0, lsl #2
    2be0:	00000205 	andeq	r0, r0, r5, lsl #4
    2be4:	eb030000 	bl	c2bec <_Min_Stack_Size+0xc29ec>
    2be8:	3267010a 	rsbcc	r0, r7, #-2147483646	; 0x80000002
    2bec:	3d684c3e 	stclcc	12, cr4, [r8, #-248]!	; 0xffffff08
    2bf0:	01000502 	tsteq	r0, r2, lsl #10
    2bf4:	02050001 	andeq	r0, r5, #1
    2bf8:	00000000 	andeq	r0, r0, r0
    2bfc:	010b8103 	tsteq	fp, r3, lsl #2
    2c00:	1e893f6a 	cdpne	15, 8, cr3, cr9, cr10, {3}
    2c04:	00050284 	andeq	r0, r5, r4, lsl #5
    2c08:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2c0c:	00000002 	andeq	r0, r0, r2
    2c10:	0b990300 	bleq	fe643818 <BootRAM+0xd5b3fb9>
    2c14:	893f6a01 	ldmdbhi	pc!, {r0, r9, fp, sp, lr}	; <UNPREDICTABLE>
    2c18:	0502841e 	streq	r8, [r2, #-1054]	; 0xfffffbe2
    2c1c:	00010100 	andeq	r0, r1, r0, lsl #2
    2c20:	00000205 	andeq	r0, r0, r5, lsl #4
    2c24:	b2030000 	andlt	r0, r3, #0
    2c28:	3f6a010b 	svccc	0x006a010b
    2c2c:	02841e89 	addeq	r1, r4, #2192	; 0x890
    2c30:	01010005 	tsteq	r1, r5
    2c34:	00020500 	andeq	r0, r2, r0, lsl #10
    2c38:	03000000 	movweq	r0, #0
    2c3c:	6a010bcb 	bvs	45b70 <_Min_Stack_Size+0x45970>
    2c40:	841e893f 	ldrhi	r8, [lr], #-2367	; 0xfffff6c1
    2c44:	01000502 	tsteq	r0, r2, lsl #10
    2c48:	02050001 	andeq	r0, r5, #1
    2c4c:	00000000 	andeq	r0, r0, r0
    2c50:	010be503 	tsteq	fp, r3, lsl #10
    2c54:	4c3e3267 	lfmmi	f3, 4, [lr], #-412	; 0xfffffe64
    2c58:	05023d4c 	streq	r3, [r2, #-3404]	; 0xfffff2b4
    2c5c:	00010100 	andeq	r0, r1, r0, lsl #2
    2c60:	00000205 	andeq	r0, r0, r5, lsl #4
    2c64:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    2c68:	3267010b 	rsbcc	r0, r7, #-1073741822	; 0xc0000002
    2c6c:	3d684c3e 	stclcc	12, cr4, [r8, #-248]!	; 0xffffff08
    2c70:	01000502 	tsteq	r0, r2, lsl #10
    2c74:	02050001 	andeq	r0, r5, #1
    2c78:	00000000 	andeq	r0, r0, r0
    2c7c:	010c9603 	tsteq	ip, r3, lsl #12
    2c80:	4c3e3267 	lfmmi	f3, 4, [lr], #-412	; 0xfffffe64
    2c84:	05023d4c 	streq	r3, [r2, #-3404]	; 0xfffff2b4
    2c88:	00010100 	andeq	r0, r1, r0, lsl #2
    2c8c:	00000205 	andeq	r0, r0, r5, lsl #4
    2c90:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    2c94:	3267010c 	rsbcc	r0, r7, #12, 2
    2c98:	3d684c3e 	stclcc	12, cr4, [r8, #-248]!	; 0xffffff08
    2c9c:	01000502 	tsteq	r0, r2, lsl #10
    2ca0:	02050001 	andeq	r0, r5, #1
    2ca4:	00000000 	andeq	r0, r0, r0
    2ca8:	010cc603 	tsteq	ip, r3, lsl #12
    2cac:	4c3e3367 	ldcmi	3, cr3, [lr], #-412	; 0xfffffe64
    2cb0:	05023d4c 	streq	r3, [r2, #-3404]	; 0xfffff2b4
    2cb4:	00010100 	andeq	r0, r1, r0, lsl #2
    2cb8:	00000205 	andeq	r0, r0, r5, lsl #4
    2cbc:	e0030000 	and	r0, r3, r0
    2cc0:	3367010c 	cmncc	r7, #12, 2
    2cc4:	3d684c3e 	stclcc	12, cr4, [r8, #-248]!	; 0xffffff08
    2cc8:	01000502 	tsteq	r0, r2, lsl #10
    2ccc:	02050001 	andeq	r0, r5, #1
    2cd0:	00000000 	andeq	r0, r0, r0
    2cd4:	010cf903 	tsteq	ip, r3, lsl #18	; <UNPREDICTABLE>
    2cd8:	4c3e3367 	ldcmi	3, cr3, [lr], #-412	; 0xfffffe64
    2cdc:	05023d4c 	streq	r3, [r2, #-3404]	; 0xfffff2b4
    2ce0:	00010100 	andeq	r0, r1, r0, lsl #2
    2ce4:	00000205 	andeq	r0, r0, r5, lsl #4
    2ce8:	92030000 	andls	r0, r3, #0
    2cec:	3367010d 	cmncc	r7, #1073741827	; 0x40000003
    2cf0:	3d684c3e 	stclcc	12, cr4, [r8, #-248]!	; 0xffffff08
    2cf4:	01000502 	tsteq	r0, r2, lsl #10
    2cf8:	02050001 	andeq	r0, r5, #1
    2cfc:	00000000 	andeq	r0, r0, r0
    2d00:	010dab03 	tsteq	sp, r3, lsl #22
    2d04:	4c3f3367 	ldcmi	3, cr3, [pc], #-412	; 2b70 <_Min_Stack_Size+0x2970>
    2d08:	05023d4c 	streq	r3, [r2, #-3404]	; 0xfffff2b4
    2d0c:	00010100 	andeq	r0, r1, r0, lsl #2
    2d10:	00000205 	andeq	r0, r0, r5, lsl #4
    2d14:	c5030000 	strgt	r0, [r3, #-0]
    2d18:	3267010d 	rsbcc	r0, r7, #1073741827	; 0x40000003
    2d1c:	3d684c3e 	stclcc	12, cr4, [r8, #-248]!	; 0xffffff08
    2d20:	01000502 	tsteq	r0, r2, lsl #10
    2d24:	02050001 	andeq	r0, r5, #1
    2d28:	00000000 	andeq	r0, r0, r0
    2d2c:	010ddd03 	tsteq	sp, r3, lsl #26
    2d30:	4c3e3267 	lfmmi	f3, 4, [lr], #-412	; 0xfffffe64
    2d34:	05023d4c 	streq	r3, [r2, #-3404]	; 0xfffff2b4
    2d38:	00010100 	andeq	r0, r1, r0, lsl #2
    2d3c:	00000205 	andeq	r0, r0, r5, lsl #4
    2d40:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
    2d44:	3267010d 	rsbcc	r0, r7, #1073741827	; 0x40000003
    2d48:	3d684c3e 	stclcc	12, cr4, [r8, #-248]!	; 0xffffff08
    2d4c:	01000502 	tsteq	r0, r2, lsl #10
    2d50:	02050001 	andeq	r0, r5, #1
    2d54:	00000000 	andeq	r0, r0, r0
    2d58:	010e8d03 	tsteq	lr, r3, lsl #26
    2d5c:	4b3e3267 	blmi	f8f700 <_Min_Stack_Size+0xf8f500>
    2d60:	05023d4c 	streq	r3, [r2, #-3404]	; 0xfffff2b4
    2d64:	00010100 	andeq	r0, r1, r0, lsl #2
    2d68:	00000205 	andeq	r0, r0, r5, lsl #4
    2d6c:	a4030000 	strge	r0, [r3], #-0
    2d70:	3367010e 	cmncc	r7, #-2147483645	; 0x80000003
    2d74:	3d4c4b3e 	vstrcc	d20, [ip, #-248]	; 0xffffff08
    2d78:	01000502 	tsteq	r0, r2, lsl #10
    2d7c:	02050001 	andeq	r0, r5, #1
    2d80:	00000000 	andeq	r0, r0, r0
    2d84:	010ebc03 	tsteq	lr, r3, lsl #24
    2d88:	4b3e3267 	blmi	f8f72c <_Min_Stack_Size+0xf8f52c>
    2d8c:	05023d68 	streq	r3, [r2, #-3432]	; 0xfffff298
    2d90:	00010100 	andeq	r0, r1, r0, lsl #2
    2d94:	00000205 	andeq	r0, r0, r5, lsl #4
    2d98:	d3030000 	movwle	r0, #12288	; 0x3000
    2d9c:	3367010e 	cmncc	r7, #-2147483645	; 0x80000003
    2da0:	3d684b3e 	vstmdbcc	r8!, {d20-<overflow reg d50>}
    2da4:	01000502 	tsteq	r0, r2, lsl #10
    2da8:	02050001 	andeq	r0, r5, #1
    2dac:	00000000 	andeq	r0, r0, r0
    2db0:	010eeb03 	tsteq	lr, r3, lsl #22
    2db4:	4b3e3267 	blmi	f8f758 <_Min_Stack_Size+0xf8f558>
    2db8:	05023d68 	streq	r3, [r2, #-3432]	; 0xfffff298
    2dbc:	00010100 	andeq	r0, r1, r0, lsl #2
    2dc0:	00000205 	andeq	r0, r0, r5, lsl #4
    2dc4:	82030000 	andhi	r0, r3, #0
    2dc8:	3467010f 	strbtcc	r0, [r7], #-271	; 0xfffffef1
    2dcc:	3d684b3e 	vstmdbcc	r8!, {d20-<overflow reg d50>}
    2dd0:	01000502 	tsteq	r0, r2, lsl #10
    2dd4:	02050001 	andeq	r0, r5, #1
    2dd8:	00000000 	andeq	r0, r0, r0
    2ddc:	010f9b03 	tsteq	pc, r3, lsl #22
    2de0:	4b3e3267 	blmi	f8f784 <_Min_Stack_Size+0xf8f584>
    2de4:	05023d68 	streq	r3, [r2, #-3432]	; 0xfffff298
    2de8:	00010100 	andeq	r0, r1, r0, lsl #2
    2dec:	00000205 	andeq	r0, r0, r5, lsl #4
    2df0:	b6030000 	strlt	r0, [r3], -r0
    2df4:	3583010f 	strcc	r0, [r3, #271]	; 0x10f
    2df8:	02bba15b 	adcseq	sl, fp, #-1073741802	; 0xc0000016
    2dfc:	01010005 	tsteq	r1, r5
    2e00:	00020500 	andeq	r0, r2, r0, lsl #10
    2e04:	03000000 	movweq	r0, #0
    2e08:	83010fd4 	movwhi	r0, #8148	; 0x1fd4
    2e0c:	bba15b35 	bllt	fe859ae8 <BootRAM+0xd7ca289>
    2e10:	01000502 	tsteq	r0, r2, lsl #10
    2e14:	02050001 	andeq	r0, r5, #1
    2e18:	00000000 	andeq	r0, r0, r0
    2e1c:	010ffd03 	tsteq	pc, r3, lsl #26	; <UNPREDICTABLE>
    2e20:	2f352f83 	svccs	0x00352f83
    2e24:	00a05b3e 	adceq	r5, r0, lr, lsr fp
    2e28:	06010402 	streq	r0, [r1], -r2, lsl #8
    2e2c:	773e063c 			; <UNDEFINED> instruction: 0x773e063c
    2e30:	69937869 	ldmibvs	r3, {r0, r3, r5, r6, fp, ip, sp, lr}
    2e34:	00050284 	andeq	r0, r5, r4, lsl #5
    2e38:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2e3c:	00000002 	andeq	r0, r0, r2
    2e40:	10ac0300 	adcne	r0, ip, r0, lsl #6
    2e44:	893f6a01 	ldmdbhi	pc!, {r0, r9, fp, sp, lr}	; <UNPREDICTABLE>
    2e48:	0502841e 	streq	r8, [r2, #-1054]	; 0xfffffbe2
    2e4c:	00010100 	andeq	r0, r1, r0, lsl #2
    2e50:	00000205 	andeq	r0, r0, r5, lsl #4
    2e54:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    2e58:	3f6a0110 	svccc	0x006a0110
    2e5c:	02841e89 	addeq	r1, r4, #2192	; 0x890
    2e60:	01010005 	tsteq	r1, r5
    2e64:	00020500 	andeq	r0, r2, r0, lsl #10
    2e68:	03000000 	movweq	r0, #0
    2e6c:	6a0110e0 	bvs	471f4 <_Min_Stack_Size+0x46ff4>
    2e70:	841e893f 	ldrhi	r8, [lr], #-2367	; 0xfffff6c1
    2e74:	01000502 	tsteq	r0, r2, lsl #10
    2e78:	02050001 	andeq	r0, r5, #1
    2e7c:	00000000 	andeq	r0, r0, r0
    2e80:	0110fa03 	tsteq	r0, r3, lsl #20	; <UNPREDICTABLE>
    2e84:	0283846b 	addeq	r8, r3, #1795162112	; 0x6b000000
    2e88:	01010005 	tsteq	r1, r5
    2e8c:	00020500 	andeq	r0, r2, r0, lsl #10
    2e90:	03000000 	movweq	r0, #0
    2e94:	6b01119a 	blvs	47504 <_Min_Stack_Size+0x47304>
    2e98:	05028384 	streq	r8, [r2, #-900]	; 0xfffffc7c
    2e9c:	00010100 	andeq	r0, r1, r0, lsl #2
    2ea0:	00000205 	andeq	r0, r0, r5, lsl #4
    2ea4:	b1030000 	mrslt	r0, (UNDEF: 3)
    2ea8:	846b0111 	strbthi	r0, [fp], #-273	; 0xfffffeef
    2eac:	00050283 	andeq	r0, r5, r3, lsl #5
    2eb0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2eb4:	00000002 	andeq	r0, r0, r2
    2eb8:	11c60300 	bicne	r0, r6, r0, lsl #6
    2ebc:	83856b01 	orrhi	r6, r5, #1024	; 0x400
    2ec0:	01000502 	tsteq	r0, r2, lsl #10
    2ec4:	02050001 	andeq	r0, r5, #1
    2ec8:	00000000 	andeq	r0, r0, r0
    2ecc:	0111d803 	tsteq	r1, r3, lsl #16
    2ed0:	05023d6a 	streq	r3, [r2, #-3434]	; 0xfffff296
    2ed4:	00010100 	andeq	r0, r1, r0, lsl #2
    2ed8:	00000205 	andeq	r0, r0, r5, lsl #4
    2edc:	e6030000 	str	r0, [r3], -r0
    2ee0:	3d6a0111 	stfcce	f0, [sl, #-68]!	; 0xffffffbc
    2ee4:	01000502 	tsteq	r0, r2, lsl #10
    2ee8:	02050001 	andeq	r0, r5, #1
    2eec:	00000000 	andeq	r0, r0, r0
    2ef0:	0111f403 	tsteq	r1, r3, lsl #8	; <UNPREDICTABLE>
    2ef4:	05023d6a 	streq	r3, [r2, #-3434]	; 0xfffff296
    2ef8:	00010100 	andeq	r0, r1, r0, lsl #2
    2efc:	00000205 	andeq	r0, r0, r5, lsl #4
    2f00:	82030000 	andhi	r0, r3, #0
    2f04:	3d6a0112 	stfcce	f0, [sl, #-72]!	; 0xffffffb8
    2f08:	01000502 	tsteq	r0, r2, lsl #10
    2f0c:	02050001 	andeq	r0, r5, #1
    2f10:	00000000 	andeq	r0, r0, r0
    2f14:	01129003 	tsteq	r2, r3
    2f18:	05023d6a 	streq	r3, [r2, #-3434]	; 0xfffff296
    2f1c:	00010100 	andeq	r0, r1, r0, lsl #2
    2f20:	00000205 	andeq	r0, r0, r5, lsl #4
    2f24:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
    2f28:	4b6a0112 	blmi	1a83378 <_Min_Stack_Size+0x1a83178>
    2f2c:	01000502 	tsteq	r0, r2, lsl #10
    2f30:	02050001 	andeq	r0, r5, #1
    2f34:	00000000 	andeq	r0, r0, r0
    2f38:	0112b103 	tsteq	r2, r3, lsl #2
    2f3c:	0283846b 	addeq	r8, r3, #1795162112	; 0x6b000000
    2f40:	01010005 	tsteq	r1, r5
    2f44:	00020500 	andeq	r0, r2, r0, lsl #10
    2f48:	03000000 	movweq	r0, #0
    2f4c:	6b0112c7 	blvs	47a70 <_Min_Stack_Size+0x47870>
    2f50:	05029f84 	streq	r9, [r2, #-3972]	; 0xfffff07c
    2f54:	00010100 	andeq	r0, r1, r0, lsl #2
    2f58:	00000205 	andeq	r0, r0, r5, lsl #4
    2f5c:	dd030000 	stcle	0, cr0, [r3, #-0]
    2f60:	846b0112 	strbthi	r0, [fp], #-274	; 0xfffffeee
    2f64:	00050283 	andeq	r0, r5, r3, lsl #5
    2f68:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2f6c:	00000002 	andeq	r0, r0, r2
    2f70:	12f30300 	rscsne	r0, r3, #0, 6
    2f74:	9f846b01 	svcls	0x00846b01
    2f78:	01000502 	tsteq	r0, r2, lsl #10
    2f7c:	02050001 	andeq	r0, r5, #1
    2f80:	00000000 	andeq	r0, r0, r0
    2f84:	01138903 	tsteq	r3, r3, lsl #18
    2f88:	0283846b 	addeq	r8, r3, #1795162112	; 0x6b000000
    2f8c:	01010005 	tsteq	r1, r5
    2f90:	00020500 	andeq	r0, r2, r0, lsl #10
    2f94:	03000000 	movweq	r0, #0
    2f98:	4e011399 	mcrmi	3, 0, r1, cr1, cr9, {4}
    2f9c:	0005023d 	andeq	r0, r5, sp, lsr r2
    2fa0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2fa4:	00000002 	andeq	r0, r0, r2
    2fa8:	13a60300 			; <UNDEFINED> instruction: 0x13a60300
    2fac:	023d4e01 	eorseq	r4, sp, #1, 28
    2fb0:	01010005 	tsteq	r1, r5
    2fb4:	00020500 	andeq	r0, r2, r0, lsl #10
    2fb8:	03000000 	movweq	r0, #0
    2fbc:	4e0113b3 	mcrmi	3, 0, r1, cr1, cr3, {5}
    2fc0:	0005023d 	andeq	r0, r5, sp, lsr r2
    2fc4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2fc8:	00000002 	andeq	r0, r0, r2
    2fcc:	13c00300 	bicne	r0, r0, #0, 6
    2fd0:	024b4e01 	subeq	r4, fp, #1, 28
    2fd4:	01010005 	tsteq	r1, r5
    2fd8:	00020500 	andeq	r0, r2, r0, lsl #10
    2fdc:	03000000 	movweq	r0, #0
    2fe0:	4e0113cd 	cdpmi	3, 0, cr1, cr1, cr13, {6}
    2fe4:	0005023d 	andeq	r0, r5, sp, lsr r2
    2fe8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2fec:	00000002 	andeq	r0, r0, r2
    2ff0:	13da0300 	bicsne	r0, sl, #0, 6
    2ff4:	023d4e01 	eorseq	r4, sp, #1, 28
    2ff8:	01010005 	tsteq	r1, r5
    2ffc:	00020500 	andeq	r0, r2, r0, lsl #10
    3000:	03000000 	movweq	r0, #0
    3004:	670113fc 			; <UNDEFINED> instruction: 0x670113fc
    3008:	30408433 	subcc	r8, r0, r3, lsr r4
    300c:	00050221 	andeq	r0, r5, r1, lsr #4
    3010:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3014:	00000002 	andeq	r0, r0, r2
    3018:	14a80300 	strtne	r0, [r8], #768	; 0x300
    301c:	02596c01 	subseq	r6, r9, #256	; 0x100
    3020:	01010005 	tsteq	r1, r5
    3024:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    3028:	03080061 	movweq	r0, #32865	; 0x8061
    302c:	670114c8 	strvs	r1, [r1, -r8, asr #9]
    3030:	67684f2f 	strbvs	r4, [r8, -pc, lsr #30]!
    3034:	01040200 	mrseq	r0, R12_usr
    3038:	3e063c06 	cdpcc	12, 0, cr3, cr6, cr6, {0}
    303c:	02213040 	eoreq	r3, r1, #64	; 0x40
    3040:	01010005 	tsteq	r1, r5
    3044:	a0020500 	andge	r0, r2, r0, lsl #10
    3048:	03080061 	movweq	r0, #32865	; 0x8061
    304c:	6b0114f4 	blvs	48424 <_Min_Stack_Size+0x48224>
    3050:	00050259 	andeq	r0, r5, r9, asr r2
    3054:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3058:	00000002 	andeq	r0, r0, r2
    305c:	158e0300 	strne	r0, [lr, #768]	; 0x300
    3060:	834cc901 	movthi	ip, #51457	; 0xc901
    3064:	924b3e3d 	subls	r3, fp, #976	; 0x3d0
    3068:	01040200 	mrseq	r0, R12_usr
    306c:	02004a06 	andeq	r4, r0, #24576	; 0x6000
    3070:	004a0204 	subeq	r0, sl, r4, lsl #4
    3074:	4a030402 	bmi	c4084 <_Min_Stack_Size+0xc3e84>
    3078:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    307c:	4d4b064a 	stclmi	6, cr0, [fp, #-296]	; 0xfffffed8
    3080:	784b874b 	stmdavc	fp, {r0, r1, r3, r6, r8, r9, sl, pc}^
    3084:	0f023d3d 	svceq	0x00023d3d
    3088:	00010100 	andeq	r0, r1, r0, lsl #2
    308c:	00000205 	andeq	r0, r0, r5, lsl #4
    3090:	bd030000 	stclt	0, cr0, [r3, #-0]
    3094:	68c90115 	stmiavs	r9, {r0, r2, r4, r8}^
    3098:	3e3d3d83 	cdpcc	13, 3, cr3, cr13, cr3, {4}
    309c:	00686767 	rsbeq	r6, r8, r7, ror #14
    30a0:	06010402 	streq	r0, [r1], -r2, lsl #8
    30a4:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    30a8:	02004a02 	andeq	r4, r0, #8192	; 0x2000
    30ac:	004a0304 	subeq	r0, sl, r4, lsl #6
    30b0:	4a040402 	bmi	1040c0 <_Min_Stack_Size+0x103ec0>
    30b4:	4b4d4b06 	blmi	1355cd4 <_Min_Stack_Size+0x1355ad4>
    30b8:	3d784b87 	fldmdbxcc	r8!, {d20-d86}	;@ Deprecated
    30bc:	000f023d 	andeq	r0, pc, sp, lsr r2	; <UNPREDICTABLE>
    30c0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    30c4:	00000002 	andeq	r0, r0, r2
    30c8:	15ee0300 	strbne	r0, [lr, #768]!	; 0x300
    30cc:	8368c901 	cmnhi	r8, #16384	; 0x4000
    30d0:	4b3e3d3d 	blmi	f925cc <_Min_Stack_Size+0xf923cc>
    30d4:	04020092 	streq	r0, [r2], #-146	; 0xffffff6e
    30d8:	004a0601 	subeq	r0, sl, r1, lsl #12
    30dc:	4a020402 	bmi	840ec <_Min_Stack_Size+0x83eec>
    30e0:	03040200 	movweq	r0, #16896	; 0x4200
    30e4:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    30e8:	4b064a04 	blmi	195900 <_Min_Stack_Size+0x195700>
    30ec:	4b874b4d 	blmi	fe1d5e28 <BootRAM+0xd1465c9>
    30f0:	023d3d78 	eorseq	r3, sp, #120, 26	; 0x1e00
    30f4:	01010010 	tsteq	r1, r0, lsl r0
    30f8:	00020500 	andeq	r0, r2, r0, lsl #10
    30fc:	03000000 	movweq	r0, #0
    3100:	c901169e 	stmdbgt	r1, {r1, r2, r3, r4, r7, r9, sl, ip}
    3104:	3d3d8369 	ldccc	3, cr8, [sp, #-420]!	; 0xfffffe5c
    3108:	6867673e 	stmdavs	r7!, {r1, r2, r3, r4, r5, r8, r9, sl, sp, lr}^
    310c:	01040200 	mrseq	r0, R12_usr
    3110:	02004a06 	andeq	r4, r0, #24576	; 0x6000
    3114:	004a0204 	subeq	r0, sl, r4, lsl #4
    3118:	4a030402 	bmi	c4128 <_Min_Stack_Size+0xc3f28>
    311c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    3120:	4d4b064a 	stclmi	6, cr0, [fp, #-296]	; 0xfffffed8
    3124:	7767874b 	strbvc	r8, [r7, -fp, asr #14]!
    3128:	0f023d3d 	svceq	0x00023d3d
    312c:	69010100 	stmdbvs	r1, {r8}
    3130:	02000004 	andeq	r0, r0, #4
    3134:	00017500 	andeq	r7, r1, r0, lsl #10
    3138:	fb010200 	blx	43942 <_Min_Stack_Size+0x43742>
    313c:	01000d0e 	tsteq	r0, lr, lsl #26
    3140:	00010101 	andeq	r0, r1, r1, lsl #2
    3144:	00010000 	andeq	r0, r1, r0
    3148:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    314c:	2f656d6f 	svccs	0x00656d6f
    3150:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    3154:	542f7673 	strtpl	r7, [pc], #-1651	; 315c <_Min_Stack_Size+0x2f5c>
    3158:	41534144 	cmpmi	r3, r4, asr #2
    315c:	4f492d54 	svcmi	0x00492d54
    3160:	694c2f54 	stmdbvs	ip, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3164:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    3168:	2f736569 	svccs	0x00736569
    316c:	00637273 	rsbeq	r7, r3, r3, ror r2
    3170:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3174:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3178:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    317c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3180:	2f62696c 	svccs	0x0062696c
    3184:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3188:	00656e69 	rsbeq	r6, r5, r9, ror #28
    318c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3190:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3194:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3198:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    319c:	2f62696c 	svccs	0x0062696c
    31a0:	00737973 	rsbseq	r7, r3, r3, ror r9
    31a4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 30f0 <_Min_Stack_Size+0x2ef0>
    31a8:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    31ac:	76737572 			; <UNDEFINED> instruction: 0x76737572
    31b0:	4144542f 	cmpmi	r4, pc, lsr #8
    31b4:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    31b8:	2f544f49 	svccs	0x00544f49
    31bc:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    31c0:	4d432f53 	stclmi	15, cr2, [r3, #-332]	; 0xfffffeb4
    31c4:	65442f33 	strbvs	r2, [r4, #-3891]	; 0xfffff0cd
    31c8:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    31cc:	70707553 	rsbsvc	r7, r0, r3, asr r5
    31d0:	2f74726f 	svccs	0x0074726f
    31d4:	532f5453 			; <UNDEFINED> instruction: 0x532f5453
    31d8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    31dc:	78303146 	ldmdavc	r0!, {r1, r2, r6, r8, ip, sp}
    31e0:	6f682f00 	svcvs	0x00682f00
    31e4:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    31e8:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    31ec:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    31f0:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    31f4:	544f492d 	strbpl	r4, [pc], #-2349	; 31fc <_Min_Stack_Size+0x2ffc>
    31f8:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    31fc:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3200:	692f7365 	stmdbvs	pc!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3204:	2f00636e 	svccs	0x0000636e
    3208:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    320c:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    3210:	2f767375 	svccs	0x00767375
    3214:	53414454 	movtpl	r4, #5204	; 0x1454
    3218:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    321c:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    3220:	5349534d 	movtpl	r5, #37709	; 0x934d
    3224:	334d432f 	movtcc	r4, #54063	; 0xd32f
    3228:	726f432f 	rsbvc	r4, pc, #-1140850688	; 0xbc000000
    322c:	70755365 	rsbsvc	r5, r5, r5, ror #6
    3230:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    3234:	74730000 	ldrbtvc	r0, [r3], #-0
    3238:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    323c:	5f783031 	svcpl	0x00783031
    3240:	2e633269 	cdpcs	2, 6, cr3, cr3, cr9, {3}
    3244:	00010063 	andeq	r0, r1, r3, rrx
    3248:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    324c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    3250:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3254:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    3258:	00020068 	andeq	r0, r2, r8, rrx
    325c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    3260:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    3264:	0300682e 	movweq	r6, #2094	; 0x82e
    3268:	74730000 	ldrbtvc	r0, [r3], #-0
    326c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3270:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
    3274:	00040068 	andeq	r0, r4, r8, rrx
    3278:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    327c:	31663233 	cmncc	r6, r3, lsr r2
    3280:	725f7830 	subsvc	r7, pc, #48, 16	; 0x300000
    3284:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    3288:	00000500 	andeq	r0, r0, r0, lsl #10
    328c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3290:	30316632 	eorscc	r6, r1, r2, lsr r6
    3294:	32695f78 	rsbcc	r5, r9, #120, 30	; 0x1e0
    3298:	00682e63 	rsbeq	r2, r8, r3, ror #28
    329c:	63000005 	movwvs	r0, #5
    32a0:	5f65726f 	svcpl	0x0065726f
    32a4:	2e336d63 	cdpcs	13, 3, cr6, cr3, cr3, {3}
    32a8:	00060068 	andeq	r0, r6, r8, rrx
    32ac:	05000000 	streq	r0, [r0, #-0]
    32b0:	0061c002 	rsbeq	ip, r1, r2
    32b4:	01a20308 			; <UNDEFINED> instruction: 0x01a20308
    32b8:	5a4d4e01 	bpl	1356ac4 <_Min_Stack_Size+0x13568c4>
    32bc:	1c580903 	mrrcne	9, 0, r0, r8, cr3	; <UNPREDICTABLE>
    32c0:	07025a5a 	smlsdeq	r2, sl, sl, r5
    32c4:	00010100 	andeq	r0, r1, r0, lsl #2
    32c8:	62080205 	andvs	r0, r8, #1342177280	; 0x50000000
    32cc:	bf030800 	svclt	0x00030800
    32d0:	4b590101 	blmi	16436dc <_Min_Stack_Size+0x16434dc>
    32d4:	2e0d032f 	cdpcs	3, 0, cr0, cr13, cr15, {1}
    32d8:	30594c3e 	subscc	r4, r9, lr, lsr ip
    32dc:	85404c67 	strbhi	r4, [r0, #-3175]	; 0xfffff399
    32e0:	3f765b31 	svccc	0x00765b31
    32e4:	696b4c31 	stmdbvs	fp!, {r0, r4, r5, sl, fp, lr}^
    32e8:	5b4eaea3 	blpl	13aed7c <_Min_Stack_Size+0x13aeb7c>
    32ec:	3ef6924d 	cdpcc	2, 15, cr9, cr6, cr13, {2}
    32f0:	926a3e86 	rsbls	r3, sl, #2144	; 0x860
    32f4:	0c028340 	stceq	3, cr8, [r2], {64}	; 0x40
    32f8:	00010100 	andeq	r0, r1, r0, lsl #2
    32fc:	00000205 	andeq	r0, r0, r5, lsl #4
    3300:	aa030000 	bge	c3308 <_Min_Stack_Size+0xc3108>
    3304:	4c4d0102 	stfmie	f0, [sp], {2}
    3308:	3e3e4c3e 	mrccc	12, 1, r4, cr14, cr14, {1}
    330c:	0005024b 	andeq	r0, r5, fp, asr #4
    3310:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3314:	00638c02 	rsbeq	r8, r3, r2, lsl #24
    3318:	02c20308 	sbceq	r0, r2, #8, 6	; 0x20000000
    331c:	893f6a01 	ldmdbhi	pc!, {r0, r9, fp, sp, lr}	; <UNPREDICTABLE>
    3320:	0502841e 	streq	r8, [r2, #-1054]	; 0xfffffbe2
    3324:	00010100 	andeq	r0, r1, r0, lsl #2
    3328:	00000205 	andeq	r0, r0, r5, lsl #4
    332c:	da030000 	ble	c3334 <_Min_Stack_Size+0xc3134>
    3330:	3f6a0102 	svccc	0x006a0102
    3334:	02841e89 	addeq	r1, r4, #2192	; 0x890
    3338:	01010005 	tsteq	r1, r5
    333c:	00020500 	andeq	r0, r2, r0, lsl #10
    3340:	03000000 	movweq	r0, #0
    3344:	6a0102f2 	bvs	43f14 <_Min_Stack_Size+0x43d14>
    3348:	841e893f 	ldrhi	r8, [lr], #-2367	; 0xfffff6c1
    334c:	01000502 	tsteq	r0, r2, lsl #10
    3350:	02050001 	andeq	r0, r5, #1
    3354:	080063cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sp, lr}
    3358:	01038a03 	tsteq	r3, r3, lsl #20
    335c:	1e893f6a 	cdpne	15, 8, cr3, cr9, cr10, {3}
    3360:	00050284 	andeq	r0, r5, r4, lsl #5
    3364:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3368:	00000002 	andeq	r0, r0, r2
    336c:	03a20300 			; <UNDEFINED> instruction: 0x03a20300
    3370:	893f6a01 	ldmdbhi	pc!, {r0, r9, fp, sp, lr}	; <UNPREDICTABLE>
    3374:	0502841e 	streq	r8, [r2, #-1054]	; 0xfffffbe2
    3378:	00010100 	andeq	r0, r1, r0, lsl #2
    337c:	00000205 	andeq	r0, r0, r5, lsl #4
    3380:	ba030000 	blt	c3388 <_Min_Stack_Size+0xc3188>
    3384:	3f6a0103 	svccc	0x006a0103
    3388:	02841e89 	addeq	r1, r4, #2192	; 0x890
    338c:	01010005 	tsteq	r1, r5
    3390:	00020500 	andeq	r0, r2, r0, lsl #10
    3394:	03000000 	movweq	r0, #0
    3398:	670103d1 			; <UNDEFINED> instruction: 0x670103d1
    339c:	a14d3f34 	cmpge	sp, r4, lsr pc
    33a0:	0005023d 	andeq	r0, r5, sp, lsr r2
    33a4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    33a8:	00000002 	andeq	r0, r0, r2
    33ac:	03ec0300 	mvneq	r0, #0, 6
    33b0:	893f6a01 	ldmdbhi	pc!, {r0, r9, fp, sp, lr}	; <UNPREDICTABLE>
    33b4:	0502841e 	streq	r8, [r2, #-1054]	; 0xfffffbe2
    33b8:	00010100 	andeq	r0, r1, r0, lsl #2
    33bc:	00000205 	andeq	r0, r0, r5, lsl #4
    33c0:	84030000 	strhi	r0, [r3], #-0
    33c4:	3f6a0104 	svccc	0x006a0104
    33c8:	02841e89 	addeq	r1, r4, #2192	; 0x890
    33cc:	01010005 	tsteq	r1, r5
    33d0:	00020500 	andeq	r0, r2, r0, lsl #10
    33d4:	03000000 	movweq	r0, #0
    33d8:	880104a1 	stmdahi	r1, {r0, r5, r7, sl}
    33dc:	a01e893f 	andsge	r8, lr, pc, lsr r9
    33e0:	01000502 	tsteq	r0, r2, lsl #10
    33e4:	02050001 	andeq	r0, r5, #1
    33e8:	0800640c 	stmdaeq	r0, {r2, r3, sl, sp, lr}
    33ec:	0104ba03 	tsteq	r4, r3, lsl #20
    33f0:	05024b6a 	streq	r4, [r2, #-2922]	; 0xfffff496
    33f4:	00010100 	andeq	r0, r1, r0, lsl #2
    33f8:	00000205 	andeq	r0, r0, r5, lsl #4
    33fc:	c7030000 	strgt	r0, [r3, -r0]
    3400:	4b4e0104 	blmi	1383818 <_Min_Stack_Size+0x1383618>
    3404:	01000502 	tsteq	r0, r2, lsl #10
    3408:	02050001 	andeq	r0, r5, #1
    340c:	0800642c 	stmdaeq	r0, {r2, r3, r5, sl, sp, lr}
    3410:	0104d903 	tsteq	r4, r3, lsl #18
    3414:	4d5d3f87 	ldclmi	15, cr3, [sp, #-540]	; 0xfffffde4
    3418:	0005024b 	andeq	r0, r5, fp, asr #4
    341c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3420:	00000002 	andeq	r0, r0, r2
    3424:	04fc0300 	ldrbteq	r0, [ip], #768	; 0x300
    3428:	2f346701 	svccs	0x00346701
    342c:	05023d4d 	streq	r3, [r2, #-3405]	; 0xfffff2b3
    3430:	00010100 	andeq	r0, r1, r0, lsl #2
    3434:	00000205 	andeq	r0, r0, r5, lsl #4
    3438:	92030000 	andls	r0, r3, #0
    343c:	3f6a0105 	svccc	0x006a0105
    3440:	02841ea5 	addeq	r1, r4, #2640	; 0xa50
    3444:	01010005 	tsteq	r1, r5
    3448:	00020500 	andeq	r0, r2, r0, lsl #10
    344c:	03000000 	movweq	r0, #0
    3450:	6c0105b8 	cfstr32vs	mvfx0, [r1], {184}	; 0xb8
    3454:	841e894d 	ldrhi	r8, [lr], #-2381	; 0xfffff6b3
    3458:	01000502 	tsteq	r0, r2, lsl #10
    345c:	02050001 	andeq	r0, r5, #1
    3460:	00000000 	andeq	r0, r0, r0
    3464:	0105d403 	tsteq	r5, r3, lsl #8
    3468:	1e894d6a 	cdpne	13, 8, cr4, cr9, cr10, {3}
    346c:	00050284 	andeq	r0, r5, r4, lsl #5
    3470:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3474:	00000002 	andeq	r0, r0, r2
    3478:	05ec0300 	strbeq	r0, [ip, #768]!	; 0x300
    347c:	893f6a01 	ldmdbhi	pc!, {r0, r9, fp, sp, lr}	; <UNPREDICTABLE>
    3480:	0502841e 	streq	r8, [r2, #-1054]	; 0xfffffbe2
    3484:	00010100 	andeq	r0, r1, r0, lsl #2
    3488:	00000205 	andeq	r0, r0, r5, lsl #4
    348c:	8b030000 	blhi	c3494 <_Min_Stack_Size+0xc3294>
    3490:	4d6a0106 	stfmie	f0, [sl, #-24]!	; 0xffffffe8
    3494:	02841e89 	addeq	r1, r4, #2192	; 0x890
    3498:	01010005 	tsteq	r1, r5
    349c:	00020500 	andeq	r0, r2, r0, lsl #10
    34a0:	03000000 	movweq	r0, #0
    34a4:	6a0106a3 	bvs	44f38 <_Min_Stack_Size+0x44d38>
    34a8:	841e893f 	ldrhi	r8, [lr], #-2367	; 0xfffff6c1
    34ac:	01000502 	tsteq	r0, r2, lsl #10
    34b0:	02050001 	andeq	r0, r5, #1
    34b4:	00000000 	andeq	r0, r0, r0
    34b8:	0106b903 	tsteq	r6, r3, lsl #18
    34bc:	0502674e 	streq	r6, [r2, #-1870]	; 0xfffff8b2
    34c0:	00010100 	andeq	r0, r1, r0, lsl #2
    34c4:	00000205 	andeq	r0, r0, r5, lsl #4
    34c8:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    34cc:	3f6a0106 	svccc	0x006a0106
    34d0:	02841e89 	addeq	r1, r4, #2192	; 0x890
    34d4:	01010005 	tsteq	r1, r5
    34d8:	68020500 	stmdavs	r2, {r8, sl}
    34dc:	03080064 	movweq	r0, #32868	; 0x8064
    34e0:	6a0106e0 	bvs	45068 <_Min_Stack_Size+0x44e68>
    34e4:	841e893f 	ldrhi	r8, [lr], #-2367	; 0xfffff6c1
    34e8:	01000502 	tsteq	r0, r2, lsl #10
    34ec:	02050001 	andeq	r0, r5, #1
    34f0:	00000000 	andeq	r0, r0, r0
    34f4:	0106fa03 	tsteq	r6, r3, lsl #20	; <UNPREDICTABLE>
    34f8:	1e894d6a 	cdpne	13, 8, cr4, cr9, cr10, {3}
    34fc:	00050284 	andeq	r0, r5, r4, lsl #5
    3500:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3504:	0064a802 	rsbeq	sl, r4, r2, lsl #16
    3508:	08860308 	stmeq	r6, {r3, r8, r9}
    350c:	4b2f5901 	blmi	bd9918 <_Min_Stack_Size+0xbd9718>
    3510:	3f4b4b35 	svccc	0x004b4b35
    3514:	31416969 	cmpcc	r1, r9, ror #18
    3518:	00050221 	andeq	r0, r5, r1, lsr #4
    351c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3520:	00000002 	andeq	r0, r0, r2
    3524:	08b60300 	ldmeq	r6!, {r8, r9}
    3528:	502f4b01 	eorpl	r4, pc, r1, lsl #22
    352c:	693f4b4b 	ldmdbvs	pc!, {r0, r1, r3, r6, r8, r9, fp, lr}	; <UNPREDICTABLE>
    3530:	00050221 	andeq	r0, r5, r1, lsr #4
    3534:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3538:	00650802 	rsbeq	r0, r5, r2, lsl #16
    353c:	08ed0308 	stmiaeq	sp!, {r3, r8, r9}^
    3540:	512f5901 			; <UNDEFINED> instruction: 0x512f5901
    3544:	3f4c3f31 	svccc	0x004c3f31
    3548:	693f3e4f 	ldmdbvs	pc!, {r0, r1, r2, r3, r6, r9, sl, fp, ip, sp}	; <UNPREDICTABLE>
    354c:	02213241 	eoreq	r3, r1, #268435460	; 0x10000004
    3550:	01010005 	tsteq	r1, r5
    3554:	00020500 	andeq	r0, r2, r0, lsl #10
    3558:	03000000 	movweq	r0, #0
    355c:	590109bc 	stmdbpl	r1, {r2, r3, r4, r5, r7, r8, fp}
    3560:	02674c33 	rsbeq	r4, r7, #13056	; 0x3300
    3564:	01010005 	tsteq	r1, r5
    3568:	00020500 	andeq	r0, r2, r0, lsl #10
    356c:	03000000 	movweq	r0, #0
    3570:	590109de 	stmdbpl	r1, {r1, r2, r3, r4, r6, r7, r8, fp}
    3574:	4d93352f 	cfldr32mi	mvfx3, [r3, #188]	; 0xbc
    3578:	01040200 	mrseq	r0, R12_usr
    357c:	3f068206 	svccc	0x00068206
    3580:	02213141 	eoreq	r3, r1, #1073741840	; 0x40000010
    3584:	01010005 	tsteq	r1, r5
    3588:	00020500 	andeq	r0, r2, r0, lsl #10
    358c:	03000000 	movweq	r0, #0
    3590:	59010a9b 	stmdbpl	r1, {r0, r1, r3, r4, r7, r9, fp}
    3594:	02674c33 	rsbeq	r4, r7, #13056	; 0x3300
    3598:	01010005 	tsteq	r1, r5
    359c:	000001a0 	andeq	r0, r0, r0, lsr #3
    35a0:	012a0002 			; <UNDEFINED> instruction: 0x012a0002
    35a4:	01020000 	mrseq	r0, (UNDEF: 2)
    35a8:	000d0efb 	strdeq	r0, [sp], -fp
    35ac:	01010101 	tsteq	r1, r1, lsl #2
    35b0:	01000000 	mrseq	r0, (UNDEF: 0)
    35b4:	2f010000 	svccs	0x00010000
    35b8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    35bc:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    35c0:	2f767375 	svccs	0x00767375
    35c4:	53414454 	movtpl	r4, #5204	; 0x1454
    35c8:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    35cc:	4c2f544f 	cfstrsmi	mvf5, [pc], #-316	; 3498 <_Min_Stack_Size+0x3298>
    35d0:	61726269 	cmnvs	r2, r9, ror #4
    35d4:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    35d8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    35dc:	73752f00 	cmnvc	r5, #0, 30
    35e0:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    35e4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    35e8:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    35ec:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    35f0:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    35f4:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    35f8:	73752f00 	cmnvc	r5, #0, 30
    35fc:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    3600:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3604:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    3608:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    360c:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    3610:	6f682f00 	svcvs	0x00682f00
    3614:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    3618:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    361c:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    3620:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    3624:	544f492d 	strbpl	r4, [pc], #-2349	; 362c <_Min_Stack_Size+0x342c>
    3628:	534d432f 	movtpl	r4, #54063	; 0xd32f
    362c:	432f5349 			; <UNDEFINED> instruction: 0x432f5349
    3630:	442f334d 	strtmi	r3, [pc], #-845	; 3638 <_Min_Stack_Size+0x3438>
    3634:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3638:	70755365 	rsbsvc	r5, r5, r5, ror #6
    363c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    3640:	2f54532f 	svccs	0x0054532f
    3644:	334d5453 	movtcc	r5, #54355	; 0xd453
    3648:	30314632 	eorscc	r4, r1, r2, lsr r6
    364c:	682f0078 	stmdavs	pc!, {r3, r4, r5, r6}	; <UNPREDICTABLE>
    3650:	2f656d6f 	svccs	0x00656d6f
    3654:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    3658:	542f7673 	strtpl	r7, [pc], #-1651	; 3660 <_Min_Stack_Size+0x3460>
    365c:	41534144 	cmpmi	r3, r4, asr #2
    3660:	4f492d54 	svcmi	0x00492d54
    3664:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    3668:	2f534953 	svccs	0x00534953
    366c:	2f334d43 	svccs	0x00334d43
    3670:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    3674:	70707553 	rsbsvc	r7, r0, r3, asr r5
    3678:	0074726f 	rsbseq	r7, r4, pc, ror #4
    367c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3680:	31663233 	cmncc	r6, r3, lsr r2
    3684:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    3688:	2e676477 	mcrcs	4, 3, r6, cr7, cr7, {3}
    368c:	00010063 	andeq	r0, r1, r3, rrx
    3690:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    3694:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    3698:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    369c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    36a0:	00020068 	andeq	r0, r2, r8, rrx
    36a4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    36a8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    36ac:	0300682e 	movweq	r6, #2094	; 0x82e
    36b0:	74730000 	ldrbtvc	r0, [r3], #-0
    36b4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    36b8:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
    36bc:	00040068 	andeq	r0, r4, r8, rrx
    36c0:	726f6300 	rsbvc	r6, pc, #0, 6
    36c4:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    36c8:	00682e33 	rsbeq	r2, r8, r3, lsr lr
    36cc:	00000005 	andeq	r0, r0, r5
    36d0:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
    36d4:	03080065 	movweq	r0, #32869	; 0x8065
    36d8:	5b0100dc 	blpl	43a50 <_Min_Stack_Size+0x43850>
    36dc:	0008023d 	andeq	r0, r8, sp, lsr r2
    36e0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    36e4:	00658c02 	rsbeq	r8, r5, r2, lsl #24
    36e8:	00f00308 	rscseq	r0, r0, r8, lsl #6
    36ec:	023d5b01 	eorseq	r5, sp, #1024	; 0x400
    36f0:	01010008 	tsteq	r1, r8
    36f4:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
    36f8:	03080065 	movweq	r0, #32869	; 0x8065
    36fc:	5b0100fd 	blpl	43af8 <_Min_Stack_Size+0x438f8>
    3700:	0008023d 	andeq	r0, r8, sp, lsr r2
    3704:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3708:	0065cc02 	rsbeq	ip, r5, r2, lsl #24
    370c:	018a0308 	orreq	r0, sl, r8, lsl #6
    3710:	024b2f01 	subeq	r2, fp, #1, 30
    3714:	01010006 	tsteq	r1, r6
    3718:	e4020500 	str	r0, [r2], #-1280	; 0xfffffb00
    371c:	03080065 	movweq	r0, #32869	; 0x8065
    3720:	2f010194 	svccs	0x00010194
    3724:	0006024b 	andeq	r0, r6, fp, asr #4
    3728:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    372c:	00000002 	andeq	r0, r0, r2
    3730:	01a10300 			; <UNDEFINED> instruction: 0x01a10300
    3734:	68315901 	ldmdavs	r1!, {r0, r8, fp, ip, lr}
    3738:	02213140 	eoreq	r3, r1, #64, 2
    373c:	01010007 	tsteq	r1, r7
    3740:	0000016b 	andeq	r0, r0, fp, ror #2
    3744:	012c0002 			; <UNDEFINED> instruction: 0x012c0002
    3748:	01020000 	mrseq	r0, (UNDEF: 2)
    374c:	000d0efb 	strdeq	r0, [sp], -fp
    3750:	01010101 	tsteq	r1, r1, lsl #2
    3754:	01000000 	mrseq	r0, (UNDEF: 0)
    3758:	2f010000 	svccs	0x00010000
    375c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3760:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    3764:	2f767375 	svccs	0x00767375
    3768:	53414454 	movtpl	r4, #5204	; 0x1454
    376c:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    3770:	4c2f544f 	cfstrsmi	mvf5, [pc], #-316	; 363c <_Min_Stack_Size+0x343c>
    3774:	61726269 	cmnvs	r2, r9, ror #4
    3778:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    377c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    3780:	73752f00 	cmnvc	r5, #0, 30
    3784:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    3788:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    378c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    3790:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3794:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    3798:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    379c:	73752f00 	cmnvc	r5, #0, 30
    37a0:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    37a4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    37a8:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    37ac:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    37b0:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    37b4:	6f682f00 	svcvs	0x00682f00
    37b8:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    37bc:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    37c0:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    37c4:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    37c8:	544f492d 	strbpl	r4, [pc], #-2349	; 37d0 <_Min_Stack_Size+0x35d0>
    37cc:	534d432f 	movtpl	r4, #54063	; 0xd32f
    37d0:	432f5349 			; <UNDEFINED> instruction: 0x432f5349
    37d4:	442f334d 	strtmi	r3, [pc], #-845	; 37dc <_Min_Stack_Size+0x35dc>
    37d8:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    37dc:	70755365 	rsbsvc	r5, r5, r5, ror #6
    37e0:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    37e4:	2f54532f 	svccs	0x0054532f
    37e8:	334d5453 	movtcc	r5, #54355	; 0xd453
    37ec:	30314632 	eorscc	r4, r1, r2, lsr r6
    37f0:	682f0078 	stmdavs	pc!, {r3, r4, r5, r6}	; <UNPREDICTABLE>
    37f4:	2f656d6f 	svccs	0x00656d6f
    37f8:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    37fc:	542f7673 	strtpl	r7, [pc], #-1651	; 3804 <_Min_Stack_Size+0x3604>
    3800:	41534144 	cmpmi	r3, r4, asr #2
    3804:	4f492d54 	svcmi	0x00492d54
    3808:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    380c:	2f534953 	svccs	0x00534953
    3810:	2f334d43 	svccs	0x00334d43
    3814:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    3818:	70707553 	rsbsvc	r7, r0, r3, asr r5
    381c:	0074726f 	rsbseq	r7, r4, pc, ror #4
    3820:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3824:	31663233 	cmncc	r6, r3, lsr r2
    3828:	645f7830 	ldrbvs	r7, [pc], #-2096	; 3830 <_Min_Stack_Size+0x3630>
    382c:	636d6762 	cmnvs	sp, #25690112	; 0x1880000
    3830:	00632e75 	rsbeq	r2, r3, r5, ror lr
    3834:	5f000001 	svcpl	0x00000001
    3838:	61666564 	cmnvs	r6, r4, ror #10
    383c:	5f746c75 	svcpl	0x00746c75
    3840:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    3844:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3848:	5f000002 	svcpl	0x00000002
    384c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3850:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3854:	00000300 	andeq	r0, r0, r0, lsl #6
    3858:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    385c:	30316632 	eorscc	r6, r1, r2, lsr r6
    3860:	00682e78 	rsbeq	r2, r8, r8, ror lr
    3864:	63000004 	movwvs	r0, #4
    3868:	5f65726f 	svcpl	0x0065726f
    386c:	2e336d63 	cdpcs	13, 3, cr6, cr3, cr3, {3}
    3870:	00050068 	andeq	r0, r5, r8, rrx
    3874:	05000000 	streq	r0, [r0, #-0]
    3878:	00000002 	andeq	r0, r0, r2
    387c:	00d40300 	sbcseq	r0, r4, r0, lsl #6
    3880:	023d2f01 	eorseq	r2, sp, #1, 30
    3884:	01010007 	tsteq	r1, r7
    3888:	00020500 	andeq	r0, r2, r0, lsl #10
    388c:	03000000 	movweq	r0, #0
    3890:	2f0100de 	svccs	0x000100de
    3894:	0006024b 	andeq	r0, r6, fp, asr #4
    3898:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    389c:	0065fc02 	rsbeq	pc, r5, r2, lsl #24
    38a0:	01860308 	orreq	r0, r6, r8, lsl #6
    38a4:	6c3e6b01 			; <UNDEFINED> instruction: 0x6c3e6b01
    38a8:	0702761e 	smladeq	r2, lr, r6, r7
    38ac:	46010100 	strmi	r0, [r1], -r0, lsl #2
    38b0:	02000002 	andeq	r0, r0, #2
    38b4:	00019a00 	andeq	r9, r1, r0, lsl #20
    38b8:	fb010200 	blx	440c2 <_Min_Stack_Size+0x43ec2>
    38bc:	01000d0e 	tsteq	r0, lr, lsl #26
    38c0:	00010101 	andeq	r0, r1, r1, lsl #2
    38c4:	00010000 	andeq	r0, r1, r0
    38c8:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    38cc:	2f656d6f 	svccs	0x00656d6f
    38d0:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    38d4:	542f7673 	strtpl	r7, [pc], #-1651	; 38dc <_Min_Stack_Size+0x36dc>
    38d8:	41534144 	cmpmi	r3, r4, asr #2
    38dc:	4f492d54 	svcmi	0x00492d54
    38e0:	73552f54 	cmpvc	r5, #84, 30	; 0x150
    38e4:	2f007265 	svccs	0x00007265
    38e8:	2f727375 	svccs	0x00727375
    38ec:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    38f0:	2f656475 	svccs	0x00656475
    38f4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    38f8:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 375c <_Min_Stack_Size+0x355c>
    38fc:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    3900:	2f00656e 	svccs	0x0000656e
    3904:	2f727375 	svccs	0x00727375
    3908:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    390c:	2f656475 	svccs	0x00656475
    3910:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    3914:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    3918:	2f007379 	svccs	0x00007379
    391c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3920:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    3924:	2f767375 	svccs	0x00767375
    3928:	53414454 	movtpl	r4, #5204	; 0x1454
    392c:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    3930:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    3934:	5349534d 	movtpl	r5, #37709	; 0x934d
    3938:	334d432f 	movtcc	r4, #54063	; 0xd32f
    393c:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    3940:	53656369 	cmnpl	r5, #-1543503871	; 0xa4000001
    3944:	6f707075 	svcvs	0x00707075
    3948:	532f7472 			; <UNDEFINED> instruction: 0x532f7472
    394c:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xfffff0ac
    3950:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3954:	00783031 	rsbseq	r3, r8, r1, lsr r0
    3958:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 38a4 <_Min_Stack_Size+0x36a4>
    395c:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    3960:	76737572 			; <UNDEFINED> instruction: 0x76737572
    3964:	4144542f 	cmpmi	r4, pc, lsr #8
    3968:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    396c:	2f544f49 	svccs	0x00544f49
    3970:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    3974:	65697261 	strbvs	r7, [r9, #-609]!	; 0xfffffd9f
    3978:	6e692f73 	mcrvs	15, 3, r2, cr9, cr3, {3}
    397c:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
    3980:	2f656d6f 	svccs	0x00656d6f
    3984:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    3988:	542f7673 	strtpl	r7, [pc], #-1651	; 3990 <_Min_Stack_Size+0x3790>
    398c:	41534144 	cmpmi	r3, r4, asr #2
    3990:	4f492d54 	svcmi	0x00492d54
    3994:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    3998:	2f534953 	svccs	0x00534953
    399c:	2f334d43 	svccs	0x00334d43
    39a0:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    39a4:	70707553 	rsbsvc	r7, r0, r3, asr r5
    39a8:	0074726f 	rsbseq	r7, r4, pc, ror #4
    39ac:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
    39b0:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
    39b4:	2e657a69 	vnmulcs.f32	s15, s10, s19
    39b8:	00010063 	andeq	r0, r1, r3, rrx
    39bc:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    39c0:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    39c4:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    39c8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    39cc:	00020068 	andeq	r0, r2, r8, rrx
    39d0:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    39d4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    39d8:	0300682e 	movweq	r6, #2094	; 0x82e
    39dc:	74730000 	ldrbtvc	r0, [r3], #-0
    39e0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    39e4:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
    39e8:	00040068 	andeq	r0, r4, r8, rrx
    39ec:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    39f0:	31663233 	cmncc	r6, r3, lsr r2
    39f4:	675f7830 	smmlarvs	pc, r0, r8, r7	; <UNPREDICTABLE>
    39f8:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    39fc:	00050068 	andeq	r0, r5, r8, rrx
    3a00:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3a04:	31663233 	cmncc	r6, r3, lsr r2
    3a08:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    3a0c:	682e6332 	stmdavs	lr!, {r1, r4, r5, r8, r9, sp, lr}
    3a10:	00000500 	andeq	r0, r0, r0, lsl #10
    3a14:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3a18:	30316632 	eorscc	r6, r1, r2, lsr r6
    3a1c:	70735f78 	rsbsvc	r5, r3, r8, ror pc
    3a20:	00682e69 	rsbeq	r2, r8, r9, ror #28
    3a24:	73000005 	movwvc	r0, #5
    3a28:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3a2c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    3a30:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    3a34:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    3a38:	696d0000 	stmdbvs	sp!, {}^	; <UNPREDICTABLE>
    3a3c:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    3a40:	00000500 	andeq	r0, r0, r0, lsl #10
    3a44:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    3a48:	336d635f 	cmncc	sp, #2080374785	; 0x7c000001
    3a4c:	0600682e 	streq	r6, [r0], -lr, lsr #16
    3a50:	00000000 	andeq	r0, r0, r0
    3a54:	66380205 	ldrtvs	r0, [r8], -r5, lsl #4
    3a58:	1d030800 	stcne	8, cr0, [r3, #-0]
    3a5c:	4b593f01 	blmi	1653668 <_Min_Stack_Size+0x1653468>
    3a60:	682f2f3d 	stmdavs	pc!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
    3a64:	3d2f2f3d 	stccc	15, cr2, [pc, #-244]!	; 3978 <_Min_Stack_Size+0x3778>
    3a68:	5a3d3d2f 	bpl	f52f2c <_Min_Stack_Size+0xf52d2c>
    3a6c:	0a024b4b 	beq	967a0 <_Min_Stack_Size+0x965a0>
    3a70:	00010100 	andeq	r0, r1, r0, lsl #2
    3a74:	66bc0205 	ldrtvs	r0, [ip], r5, lsl #4
    3a78:	35030800 	strcc	r0, [r3, #-2048]	; 0xfffff800
    3a7c:	3d4b3e01 	stclcc	14, cr3, [fp, #-4]
    3a80:	595a2f2f 	ldmdbpl	sl, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    3a84:	00070259 	andeq	r0, r7, r9, asr r2
    3a88:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3a8c:	00670402 	rsbeq	r0, r7, r2, lsl #8
    3a90:	00c20308 	sbceq	r0, r2, r8, lsl #6
    3a94:	0a034001 	beq	d3aa0 <_Min_Stack_Size+0xd38a0>
    3a98:	2f2f2f58 	svccs	0x002f2f58
    3a9c:	2f2f2f5a 	svccs	0x002f2f5a
    3aa0:	2f2f2f5b 	svccs	0x002f2f5b
    3aa4:	2f3d4d59 	svccs	0x003d4d59
    3aa8:	3d2f5b2f 	fstmdbxcc	pc!, {d5-d27}	;@ Deprecated
    3aac:	3d2f2f2f 	stccc	15, cr2, [pc, #-188]!	; 39f8 <_Min_Stack_Size+0x37f8>
    3ab0:	5a2f2f2f 	bpl	bcf774 <_Min_Stack_Size+0xbcf574>
    3ab4:	08024b4b 	stmdaeq	r2, {r0, r1, r3, r6, r8, r9, fp, lr}
    3ab8:	00010100 	andeq	r0, r1, r0, lsl #2
    3abc:	67c80205 	strbvs	r0, [r8, r5, lsl #4]
    3ac0:	f8030800 			; <UNDEFINED> instruction: 0xf8030800
    3ac4:	2f400100 	svccs	0x00400100
    3ac8:	4d2f2f2f 	stcmi	15, cr2, [pc, #-188]!	; 3a14 <_Min_Stack_Size+0x3814>
    3acc:	2f3d2f4b 	svccs	0x003d2f4b
    3ad0:	5967672f 	stmdbpl	r7!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}^
    3ad4:	01000402 	tsteq	r0, r2, lsl #8
    3ad8:	02050001 	andeq	r0, r5, #1
    3adc:	0800682c 	stmdaeq	r0, {r2, r3, r5, fp, sp, lr}
    3ae0:	01018e03 	tsteq	r1, r3, lsl #28
    3ae4:	02003e30 	andeq	r3, r0, #48, 28	; 0x300
    3ae8:	20060104 	andcs	r0, r6, r4, lsl #2
    3aec:	515a6806 	cmppl	sl, r6, lsl #16
    3af0:	2f304c3e 	svccs	0x00304c3e
    3af4:	01000202 	tsteq	r0, r2, lsl #4
    3af8:	0001c301 	andeq	ip, r1, r1, lsl #6
    3afc:	1f000200 	svcne	0x00000200
    3b00:	02000001 	andeq	r0, r0, #1
    3b04:	0d0efb01 	vstreq	d15, [lr, #-4]
    3b08:	01010100 	mrseq	r0, (UNDEF: 17)
    3b0c:	00000001 	andeq	r0, r0, r1
    3b10:	01000001 	tsteq	r0, r1
    3b14:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3a60 <_Min_Stack_Size+0x3860>
    3b18:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    3b1c:	76737572 			; <UNDEFINED> instruction: 0x76737572
    3b20:	4144542f 	cmpmi	r4, pc, lsr #8
    3b24:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    3b28:	2f544f49 	svccs	0x00544f49
    3b2c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    3b30:	73752f00 	cmnvc	r5, #0, 30
    3b34:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    3b38:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3b3c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    3b40:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3b44:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    3b48:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    3b4c:	73752f00 	cmnvc	r5, #0, 30
    3b50:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    3b54:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3b58:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    3b5c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3b60:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    3b64:	6f682f00 	svcvs	0x00682f00
    3b68:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    3b6c:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    3b70:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    3b74:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    3b78:	544f492d 	strbpl	r4, [pc], #-2349	; 3b80 <_Min_Stack_Size+0x3980>
    3b7c:	534d432f 	movtpl	r4, #54063	; 0xd32f
    3b80:	432f5349 			; <UNDEFINED> instruction: 0x432f5349
    3b84:	442f334d 	strtmi	r3, [pc], #-845	; 3b8c <_Min_Stack_Size+0x398c>
    3b88:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3b8c:	70755365 	rsbsvc	r5, r5, r5, ror #6
    3b90:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    3b94:	2f54532f 	svccs	0x0054532f
    3b98:	334d5453 	movtcc	r5, #54355	; 0xd453
    3b9c:	30314632 	eorscc	r4, r1, r2, lsr r6
    3ba0:	682f0078 	stmdavs	pc!, {r3, r4, r5, r6}	; <UNPREDICTABLE>
    3ba4:	2f656d6f 	svccs	0x00656d6f
    3ba8:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    3bac:	542f7673 	strtpl	r7, [pc], #-1651	; 3bb4 <_Min_Stack_Size+0x39b4>
    3bb0:	41534144 	cmpmi	r3, r4, asr #2
    3bb4:	4f492d54 	svcmi	0x00492d54
    3bb8:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    3bbc:	2f534953 	svccs	0x00534953
    3bc0:	2f334d43 	svccs	0x00334d43
    3bc4:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    3bc8:	70707553 	rsbsvc	r7, r0, r3, asr r5
    3bcc:	0074726f 	rsbseq	r7, r4, pc, ror #4
    3bd0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3bd4:	31663233 	cmncc	r6, r3, lsr r2
    3bd8:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    3bdc:	00632e74 	rsbeq	r2, r3, r4, ror lr
    3be0:	5f000001 	svcpl	0x00000001
    3be4:	61666564 	cmnvs	r6, r4, ror #10
    3be8:	5f746c75 	svcpl	0x00746c75
    3bec:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    3bf0:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3bf4:	5f000002 	svcpl	0x00000002
    3bf8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3bfc:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3c00:	00000300 	andeq	r0, r0, r0, lsl #6
    3c04:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3c08:	30316632 	eorscc	r6, r1, r2, lsr r6
    3c0c:	00682e78 	rsbeq	r2, r8, r8, ror lr
    3c10:	63000004 	movwvs	r0, #4
    3c14:	5f65726f 	svcpl	0x0065726f
    3c18:	2e336d63 	cdpcs	13, 3, cr6, cr3, cr3, {3}
    3c1c:	00050068 	andeq	r0, r5, r8, rrx
    3c20:	05000000 	streq	r0, [r0, #-0]
    3c24:	00687002 	rsbeq	r7, r8, r2
    3c28:	01300308 	teqeq	r0, r8, lsl #6
    3c2c:	0004022f 	andeq	r0, r4, pc, lsr #4
    3c30:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3c34:	00687c02 	rsbeq	r7, r8, r2, lsl #24
    3c38:	01390308 	teqeq	r9, r8, lsl #6
    3c3c:	01040200 	mrseq	r0, R12_usr
    3c40:	00010232 	andeq	r0, r1, r2, lsr r2
    3c44:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3c48:	00688402 	rsbeq	r8, r8, r2, lsl #8
    3c4c:	00c60308 	sbceq	r0, r6, r8, lsl #6
    3c50:	04020001 	streq	r0, [r2], #-1
    3c54:	01023201 	tsteq	r2, r1, lsl #4
    3c58:	00010100 	andeq	r0, r1, r0, lsl #2
    3c5c:	688c0205 	stmvs	ip, {r0, r2, r9}
    3c60:	d3030800 	movwle	r0, #14336	; 0x3800
    3c64:	02000100 	andeq	r0, r0, #0, 2
    3c68:	02320104 	eorseq	r0, r2, #4, 2
    3c6c:	01010001 	tsteq	r1, r1
    3c70:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
    3c74:	03080068 	movweq	r0, #32872	; 0x8068
    3c78:	000100e0 	andeq	r0, r1, r0, ror #1
    3c7c:	32010402 	andcc	r0, r1, #33554432	; 0x2000000
    3c80:	01000102 	tsteq	r0, r2, lsl #2
    3c84:	02050001 	andeq	r0, r5, #1
    3c88:	0800689c 	stmdaeq	r0, {r2, r3, r4, r7, fp, sp, lr}
    3c8c:	01019303 	tsteq	r1, r3, lsl #6
    3c90:	00040230 	andeq	r0, r4, r0, lsr r2
    3c94:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3c98:	0068a802 	rsbeq	sl, r8, r2, lsl #16
    3c9c:	01980308 	orrseq	r0, r8, r8, lsl #6
    3ca0:	04023001 	streq	r3, [r2], #-1
    3ca4:	00010100 	andeq	r0, r1, r0, lsl #2
    3ca8:	68b40205 	ldmvs	r4!, {r0, r2, r9}
    3cac:	9d030800 	stcls	8, cr0, [r3, #-0]
    3cb0:	83310101 	teqhi	r1, #1073741824	; 0x40000000
    3cb4:	2f3d9f5a 	svccs	0x003d9f5a
    3cb8:	025a5931 	subseq	r5, sl, #802816	; 0xc4000
    3cbc:	01010008 	tsteq	r1, r8
    3cc0:	00000585 	andeq	r0, r0, r5, lsl #11
    3cc4:	02740002 	rsbseq	r0, r4, #2
    3cc8:	01020000 	mrseq	r0, (UNDEF: 2)
    3ccc:	000d0efb 	strdeq	r0, [sp], -fp
    3cd0:	01010101 	tsteq	r1, r1, lsl #2
    3cd4:	01000000 	mrseq	r0, (UNDEF: 0)
    3cd8:	2f010000 	svccs	0x00010000
    3cdc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3ce0:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    3ce4:	2f767375 	svccs	0x00767375
    3ce8:	53414454 	movtpl	r4, #5204	; 0x1454
    3cec:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    3cf0:	552f544f 	strpl	r5, [pc, #-1103]!	; 38a9 <_Min_Stack_Size+0x36a9>
    3cf4:	00726573 	rsbseq	r6, r2, r3, ror r5
    3cf8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3c44 <_Min_Stack_Size+0x3a44>
    3cfc:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    3d00:	76737572 			; <UNDEFINED> instruction: 0x76737572
    3d04:	4144542f 	cmpmi	r4, pc, lsr #8
    3d08:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    3d0c:	2f544f49 	svccs	0x00544f49
    3d10:	702f534f 	eorvc	r5, pc, pc, asr #6
    3d14:	6174726f 	cmnvs	r4, pc, ror #4
    3d18:	2f656c62 	svccs	0x00656c62
    3d1c:	2f434347 	svccs	0x00434347
    3d20:	5f4d5241 	svcpl	0x004d5241
    3d24:	00334d43 	eorseq	r4, r3, r3, asr #26
    3d28:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3d2c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3d30:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3d34:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3d38:	2f62696c 	svccs	0x0062696c
    3d3c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3d40:	00656e69 	rsbeq	r6, r5, r9, ror #28
    3d44:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3d48:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3d4c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3d50:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3d54:	2f62696c 	svccs	0x0062696c
    3d58:	00737973 	rsbseq	r7, r3, r3, ror r9
    3d5c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3ca8 <_Min_Stack_Size+0x3aa8>
    3d60:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    3d64:	76737572 			; <UNDEFINED> instruction: 0x76737572
    3d68:	4144542f 	cmpmi	r4, pc, lsr #8
    3d6c:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    3d70:	2f544f49 	svccs	0x00544f49
    3d74:	692f534f 	stmdbvs	pc!, {r0, r1, r2, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    3d78:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3d7c:	2f006564 	svccs	0x00006564
    3d80:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3d84:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    3d88:	2f767375 	svccs	0x00767375
    3d8c:	53414454 	movtpl	r4, #5204	; 0x1454
    3d90:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    3d94:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    3d98:	5349534d 	movtpl	r5, #37709	; 0x934d
    3d9c:	334d432f 	movtcc	r4, #54063	; 0xd32f
    3da0:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    3da4:	53656369 	cmnpl	r5, #-1543503871	; 0xa4000001
    3da8:	6f707075 	svcvs	0x00707075
    3dac:	532f7472 			; <UNDEFINED> instruction: 0x532f7472
    3db0:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xfffff0ac
    3db4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3db8:	00783031 	rsbseq	r3, r8, r1, lsr r0
    3dbc:	74452f2e 	strbvc	r2, [r5], #-3886	; 0xfffff0d2
    3dc0:	6e726568 	cdpvs	5, 7, cr6, cr2, cr8, {3}
    3dc4:	2f007465 	svccs	0x00007465
    3dc8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3dcc:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    3dd0:	2f767375 	svccs	0x00767375
    3dd4:	53414454 	movtpl	r4, #5204	; 0x1454
    3dd8:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    3ddc:	452f544f 	strmi	r5, [pc, #-1103]!	; 3995 <_Min_Stack_Size+0x3795>
    3de0:	72656874 	rsbvc	r6, r5, #116, 16	; 0x740000
    3de4:	0074656e 	rsbseq	r6, r4, lr, ror #10
    3de8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3d34 <_Min_Stack_Size+0x3b34>
    3dec:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    3df0:	76737572 			; <UNDEFINED> instruction: 0x76737572
    3df4:	4144542f 	cmpmi	r4, pc, lsr #8
    3df8:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    3dfc:	2f544f49 	svccs	0x00544f49
    3e00:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    3e04:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
    3e08:	4348442f 	movtmi	r4, #33839	; 0x842f
    3e0c:	682f0050 	stmdavs	pc!, {r4, r6}	; <UNPREDICTABLE>
    3e10:	2f656d6f 	svccs	0x00656d6f
    3e14:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    3e18:	542f7673 	strtpl	r7, [pc], #-1651	; 3e20 <_Min_Stack_Size+0x3c20>
    3e1c:	41534144 	cmpmi	r3, r4, asr #2
    3e20:	4f492d54 	svcmi	0x00492d54
    3e24:	696c2f54 	stmdbvs	ip!, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3e28:	716d6562 	cmnvc	sp, r2, ror #10
    3e2c:	692f7474 	stmdbvs	pc!, {r2, r4, r5, r6, sl, ip, sp, lr}	; <UNPREDICTABLE>
    3e30:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3e34:	2f006564 	svccs	0x00006564
    3e38:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3e3c:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    3e40:	2f767375 	svccs	0x00767375
    3e44:	53414454 	movtpl	r4, #5204	; 0x1454
    3e48:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    3e4c:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    3e50:	5349534d 	movtpl	r5, #37709	; 0x934d
    3e54:	334d432f 	movtcc	r4, #54063	; 0xd32f
    3e58:	726f432f 	rsbvc	r4, pc, #-1140850688	; 0xbc000000
    3e5c:	70755365 	rsbsvc	r5, r5, r5, ror #6
    3e60:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    3e64:	6f682f00 	svcvs	0x00682f00
    3e68:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    3e6c:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    3e70:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    3e74:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    3e78:	544f492d 	strbpl	r4, [pc], #-2349	; 3e80 <_Min_Stack_Size+0x3c80>
    3e7c:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    3e80:	00726576 	rsbseq	r6, r2, r6, ror r5
    3e84:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
    3e88:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    3e8c:	70000001 	andvc	r0, r0, r1
    3e90:	6d74726f 	lfmvs	f7, 2, [r4, #-444]!	; 0xfffffe44
    3e94:	6f726361 	svcvs	0x00726361
    3e98:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3e9c:	645f0000 	ldrbvs	r0, [pc], #-0	; 3ea4 <_Min_Stack_Size+0x3ca4>
    3ea0:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    3ea4:	745f746c 	ldrbvc	r7, [pc], #-1132	; 3eac <_Min_Stack_Size+0x3cac>
    3ea8:	73657079 	cmnvc	r5, #121	; 0x79
    3eac:	0300682e 	movweq	r6, #2094	; 0x82e
    3eb0:	735f0000 	cmpvc	pc, #0
    3eb4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    3eb8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3ebc:	74000004 	strvc	r0, [r0], #-4
    3ec0:	2e6b7361 	cdpcs	3, 6, cr7, cr11, cr1, {3}
    3ec4:	00050068 	andeq	r0, r5, r8, rrx
    3ec8:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0xffffff00
    3ecc:	682e6575 	stmdavs	lr!, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    3ed0:	00000500 	andeq	r0, r0, r0, lsl #10
    3ed4:	706d6573 	rsbvc	r6, sp, r3, ror r5
    3ed8:	682e7268 	stmdavs	lr!, {r3, r5, r6, r9, ip, sp, lr}
    3edc:	00000500 	andeq	r0, r0, r0, lsl #10
    3ee0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3ee4:	30316632 	eorscc	r6, r1, r2, lsr r6
    3ee8:	00682e78 	rsbeq	r2, r8, r8, ror lr
    3eec:	77000006 	strvc	r0, [r0, -r6]
    3ef0:	68637a69 	stmdavs	r3!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
    3ef4:	635f7069 	cmpvs	pc, #105	; 0x69
    3ef8:	2e666e6f 	cdpcs	14, 6, cr6, cr6, cr15, {3}
    3efc:	00070068 	andeq	r0, r7, r8, rrx
    3f00:	636f7300 	cmnvs	pc, #0, 6
    3f04:	2e74656b 	cdpcs	5, 7, cr6, cr4, cr11, {3}
    3f08:	00080068 	andeq	r0, r8, r8, rrx
    3f0c:	63686400 	cmnvs	r8, #0, 8
    3f10:	00682e70 	rsbeq	r2, r8, r0, ror lr
    3f14:	6c000009 	stcvs	0, cr0, [r0], {9}
    3f18:	6d656269 	sfmvs	f6, 2, [r5, #-420]!	; 0xfffffe5c
    3f1c:	2e747471 	mrccs	4, 3, r7, cr4, cr1, {3}
    3f20:	000a0068 	andeq	r0, sl, r8, rrx
    3f24:	726f6300 	rsbvc	r6, pc, #0, 6
    3f28:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    3f2c:	00682e33 	rsbeq	r2, r8, r3, lsr lr
    3f30:	4f00000b 	svcmi	0x0000000b
    3f34:	2e44454c 	cdpcs	5, 4, cr4, cr4, cr12, {2}
    3f38:	000c0068 	andeq	r0, ip, r8, rrx
    3f3c:	05000000 	streq	r0, [r0, #-0]
    3f40:	00691802 	rsbeq	r1, r9, r2, lsl #16
    3f44:	00e30308 	rsceq	r0, r3, r8, lsl #6
    3f48:	024b2f01 	subeq	r2, fp, #1, 30
    3f4c:	01010004 	tsteq	r1, r4
    3f50:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    3f54:	03080069 	movweq	r0, #32873	; 0x8069
    3f58:	2f0100e7 	svccs	0x000100e7
    3f5c:	0004024b 	andeq	r0, r4, fp, asr #4
    3f60:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3f64:	00694002 	rsbeq	r4, r9, r2
    3f68:	00ec0308 	rsceq	r0, ip, r8, lsl #6
    3f6c:	00675a01 	rsbeq	r5, r7, r1, lsl #20
    3f70:	06010402 	streq	r0, [r1], -r2, lsl #8
    3f74:	02750620 	rsbseq	r0, r5, #32, 12	; 0x2000000
    3f78:	01010007 	tsteq	r1, r7
    3f7c:	74020500 	strvc	r0, [r2], #-1280	; 0xfffffb00
    3f80:	03080069 	movweq	r0, #32873	; 0x8069
    3f84:	3e0100f3 	mcrcc	0, 0, r0, cr1, cr3, {7}
    3f88:	215a3d59 	cmpcs	sl, r9, asr sp
    3f8c:	01000702 	tsteq	r0, r2, lsl #14
    3f90:	02050001 	andeq	r0, r5, #1
    3f94:	080069a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, sp, lr}
    3f98:	0100fd03 	tsteq	r0, r3, lsl #26	; <UNPREDICTABLE>
    3f9c:	4d753059 	ldclmi	0, cr3, [r5, #-356]!	; 0xfffffe9c
    3fa0:	02217683 	eoreq	r7, r1, #137363456	; 0x8300000
    3fa4:	0101000c 	tsteq	r1, ip
    3fa8:	00020500 	andeq	r0, r2, r0, lsl #10
    3fac:	0308006a 	movweq	r0, #32874	; 0x806a
    3fb0:	6801018a 	stmdavs	r1, {r1, r3, r7, r8}
    3fb4:	7583752f 	strvc	r7, [r3, #1327]	; 0x52f
    3fb8:	00070221 	andeq	r0, r7, r1, lsr #4
    3fbc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3fc0:	006a4c02 	rsbeq	r4, sl, r2, lsl #24
    3fc4:	01930308 	orrseq	r0, r3, r8, lsl #6
    3fc8:	68323d01 	ldmdavs	r2!, {r0, r8, sl, fp, ip, sp}
    3fcc:	3e759f75 	mrccc	15, 3, r9, cr5, cr5, {3}
    3fd0:	02004b76 	andeq	r4, r0, #120832	; 0x1d800
    3fd4:	3c060104 	stfccs	f0, [r6], {4}
    3fd8:	5b5a3f06 	blpl	1693bf8 <_Min_Stack_Size+0x16939f8>
    3fdc:	0402005a 	streq	r0, [r2], #-90	; 0xffffffa6
    3fe0:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    3fe4:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
    3fe8:	06f20601 	ldrbteq	r0, [r2], r1, lsl #12
    3fec:	214f483d 	cmpcs	pc, sp, lsr r8	; <UNPREDICTABLE>
    3ff0:	01000902 	tsteq	r0, r2, lsl #18
    3ff4:	02050001 	andeq	r0, r5, #1
    3ff8:	08006b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, sp, lr}
    3ffc:	0101bc03 	tsteq	r1, r3, lsl #24
    4000:	304c2f3d 	subcc	r2, ip, sp, lsr pc
    4004:	33303030 	teqcc	r0, #48	; 0x30
    4008:	03404b3d 	movteq	r4, #2877	; 0xb3d
    400c:	4d4c4a0b 	vstrmi	s9, [ip, #-44]	; 0xffffffd4
    4010:	3f839132 	svccc	0x00839132
    4014:	02008331 	andeq	r8, r0, #-1006632960	; 0xc4000000
    4018:	24830104 	strcs	r0, [r3], #260	; 0x104
    401c:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
    4020:	67224c02 	strvs	r4, [r2, -r2, lsl #24]!
    4024:	03040200 	movweq	r0, #16896	; 0x4200
    4028:	4d4b244c 	cfstrdmi	mvd2, [fp, #-304]	; 0xfffffed0
    402c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    4030:	004023d8 	ldrdeq	r2, [r0], #-56	; 0xffffffc8
    4034:	d8050402 	stmdale	r5, {r1, sl}
    4038:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    403c:	0023d806 	eoreq	sp, r3, r6, lsl #16
    4040:	d8070402 	stmdale	r7, {r1, sl}
    4044:	02212f23 	eoreq	r2, r1, #35, 30	; 0x8c
    4048:	01010038 	tsteq	r1, r8, lsr r0
    404c:	08020500 	stmdaeq	r2, {r8, sl}
    4050:	0308006d 	movweq	r0, #32877	; 0x806d
    4054:	4b0102a2 	blmi	44ae4 <_Min_Stack_Size+0x448e4>
    4058:	80223e34 	eorhi	r3, r2, r4, lsr lr
    405c:	683d3d5d 	ldmdavs	sp!, {r0, r2, r3, r4, r6, r8, sl, fp, ip, sp}
    4060:	0200bb68 	andeq	fp, r0, #104, 22	; 0x1a000
    4064:	3c060104 	stfccs	f0, [r6], {4}
    4068:	02040200 	andeq	r0, r4, #0, 4
    406c:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
    4070:	02002004 	andeq	r2, r0, #4
    4074:	9f060404 	svcls	0x00060404
    4078:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    407c:	040200f3 	streq	r0, [r2], #-243	; 0xffffff0d
    4080:	004b0804 	subeq	r0, fp, r4, lsl #16
    4084:	84040402 	strhi	r0, [r4], #-1026	; 0xfffffbfe
    4088:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    408c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    4090:	02002d04 	andeq	r2, r0, #4, 26	; 0x100
    4094:	00210404 	eoreq	r0, r1, r4, lsl #8
    4098:	1f040402 	svcne	0x00040402
    409c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    40a0:	040200ca 	streq	r0, [r2], #-202	; 0xffffff36
    40a4:	00130804 	andseq	r0, r3, r4, lsl #16
    40a8:	08040402 	stmdaeq	r4, {r1, sl}
    40ac:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
    40b0:	02008504 	andeq	r8, r0, #4, 10	; 0x1000000
    40b4:	002f0404 	eoreq	r0, pc, r4, lsl #8
    40b8:	4b040402 	blmi	1050c8 <_Min_Stack_Size+0x104ec8>
    40bc:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    40c0:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    40c4:	02004b04 	andeq	r4, r0, #4, 22	; 0x1000
    40c8:	004b0404 	subeq	r0, fp, r4, lsl #8
    40cc:	2f040402 	svccs	0x00040402
    40d0:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    40d4:	02002f08 	andeq	r2, r0, #8, 30
    40d8:	13080404 	movwne	r0, #33796	; 0x8404
    40dc:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    40e0:	02005908 	andeq	r5, r0, #8, 18	; 0x20000
    40e4:	00840404 	addeq	r0, r4, r4, lsl #8
    40e8:	e5040402 	str	r0, [r4, #-1026]	; 0xfffffbfe
    40ec:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    40f0:	02001308 	andeq	r1, r0, #8, 6	; 0x20000000
    40f4:	59080404 	stmdbpl	r8, {r2, sl}
    40f8:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    40fc:	04020084 	streq	r0, [r2], #-132	; 0xffffff7c
    4100:	0200e504 	andeq	lr, r0, #4, 10	; 0x1000000
    4104:	13080404 	movwne	r0, #33796	; 0x8404
    4108:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    410c:	02005908 	andeq	r5, r0, #8, 18	; 0x20000
    4110:	00890404 	addeq	r0, r9, r4, lsl #8
    4114:	e5040402 	str	r0, [r4, #-1026]	; 0xfffffbfe
    4118:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    411c:	02001308 	andeq	r1, r0, #8, 6	; 0x20000000
    4120:	59080404 	stmdbpl	r8, {r2, sl}
    4124:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    4128:	02007508 	andeq	r7, r0, #8, 10	; 0x2000000
    412c:	3d830404 	cfstrscc	mvf0, [r3, #16]
    4130:	3d4b3083 	stclcc	0, cr3, [fp, #-524]	; 0xfffffdf4
    4134:	01000402 	tsteq	r0, r2, lsl #8
    4138:	02050001 	andeq	r0, r5, #1
    413c:	08007108 	stmdaeq	r0, {r3, r8, ip, sp, lr}
    4140:	0102eb03 	tsteq	r2, r3, lsl #22
    4144:	01040200 	mrseq	r0, R12_usr
    4148:	5e802250 	mcrpl	2, 4, r2, cr0, cr0, {2}
    414c:	2f5a3d59 	svccs	0x005a3d59
    4150:	5c3d4d59 	ldcpl	13, cr4, [sp], #-356	; 0xfffffe9c
    4154:	764d3e75 			; <UNDEFINED> instruction: 0x764d3e75
    4158:	3d91763e 	ldccc	6, cr7, [r1, #248]	; 0xf8
    415c:	4c772275 	lfmmi	f2, 2, [r7], #-468	; 0xfffffe2c
    4160:	423d4b5a 	eorsmi	r4, sp, #92160	; 0x16800
    4164:	4b4c3f31 	blmi	1313e30 <_Min_Stack_Size+0x1313c30>
    4168:	67244b3d 			; <UNDEFINED> instruction: 0x67244b3d
    416c:	4b244b3d 	blmi	916e68 <_Min_Stack_Size+0x916c68>
    4170:	76274b3d 			; <UNDEFINED> instruction: 0x76274b3d
    4174:	4b3d4b4b 	blmi	f56ea8 <_Min_Stack_Size+0xf56ca8>
    4178:	4b3d6723 	blmi	f5de0c <_Min_Stack_Size+0xf5dc0c>
    417c:	3d686723 	stclcc	7, cr6, [r8, #-140]!	; 0xffffff74
    4180:	753d244b 	ldrvc	r2, [sp, #-1099]!	; 0xfffffbb5
    4184:	4b3d759f 	blmi	f61808 <_Min_Stack_Size+0xf61608>
    4188:	59597722 	ldmdbpl	r9, {r1, r5, r8, r9, sl, ip, sp, lr}^
    418c:	6731223e 			; <UNDEFINED> instruction: 0x6731223e
    4190:	4c403d3d 	mcrrmi	13, 3, r3, r0, cr13
    4194:	4267234b 	rsbmi	r2, r7, #738197505	; 0x2c000001
    4198:	01040200 	mrseq	r0, R12_usr
    419c:	0200c806 	andeq	ip, r0, #393216	; 0x60000
    41a0:	41020204 	tstmi	r2, r4, lsl #4
    41a4:	04020012 	streq	r0, [r2], #-18	; 0xffffffee
    41a8:	02002004 	andeq	r2, r0, #4
    41ac:	2f060404 	svccs	0x00060404
    41b0:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    41b4:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
    41b8:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    41bc:	63033d9f 	movwvs	r3, #15775	; 0x3d9f
    41c0:	82220374 	eorhi	r0, r2, #116, 6	; 0xd0000001
    41c4:	083d3d5a 	ldmdaeq	sp!, {r1, r3, r4, r6, r8, sl, fp, ip, sp}
    41c8:	00010100 	andeq	r0, r1, r0, lsl #2
    41cc:	74b80205 	ldrtvc	r0, [r8], #517	; 0x205
    41d0:	96030800 	strls	r0, [r3], -r0, lsl #16
    41d4:	2f4b0104 	svccs	0x004b0104
    41d8:	757c4b75 	ldrbvc	r4, [ip, #-2933]!	; 0xfffff48b
    41dc:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
    41e0:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    41e4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    41e8:	3d4c3d3d 	stclcc	13, cr3, [ip, #-244]	; 0xffffff0c
    41ec:	5a76313e 	bpl	1d906ec <_Min_Stack_Size+0x1d904ec>
    41f0:	00150276 	andseq	r0, r5, r6, ror r2
    41f4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    41f8:	00759002 	rsbseq	r9, r5, r2
    41fc:	04bd0308 	ldrteq	r0, [sp], #776	; 0x308
    4200:	04020001 	streq	r0, [r2], #-1
    4204:	02004c01 	andeq	r4, r0, #256	; 0x100
    4208:	00750104 	rsbseq	r0, r5, r4, lsl #2
    420c:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    4210:	01040200 	mrseq	r0, R12_usr
    4214:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
    4218:	02004b01 	andeq	r4, r0, #1024	; 0x400
    421c:	003d0104 	eorseq	r0, sp, r4, lsl #2
    4220:	59010402 	stmdbpl	r1, {r1, sl}
    4224:	01000702 	tsteq	r0, r2, lsl #14
    4228:	02050001 	andeq	r0, r5, #1
    422c:	080075dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, ip, sp, lr}
    4230:	0104c903 	tsteq	r4, r3, lsl #18
    4234:	f9030204 			; <UNDEFINED> instruction: 0xf9030204
    4238:	0104587c 	tsteq	r4, ip, ror r8
    423c:	01040200 	mrseq	r0, R12_usr
    4240:	90039003 	andls	r9, r3, r3
    4244:	01000102 	tsteq	r0, r2, lsl #2
    4248:	00034001 	andeq	r4, r3, r1
    424c:	d2000200 	andle	r0, r0, #0, 4
    4250:	02000000 	andeq	r0, r0, #0
    4254:	0d0efb01 	vstreq	d15, [lr, #-4]
    4258:	01010100 	mrseq	r0, (UNDEF: 17)
    425c:	00000001 	andeq	r0, r0, r1
    4260:	01000001 	tsteq	r0, r1
    4264:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 41b0 <_Min_Stack_Size+0x3fb0>
    4268:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    426c:	76737572 			; <UNDEFINED> instruction: 0x76737572
    4270:	4144542f 	cmpmi	r4, pc, lsr #8
    4274:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    4278:	2f544f49 	svccs	0x00544f49
    427c:	6562696c 	strbvs	r6, [r2, #-2412]!	; 0xfffff694
    4280:	7474716d 	ldrbtvc	r7, [r4], #-365	; 0xfffffe93
    4284:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    4288:	73752f00 	cmnvc	r5, #0, 30
    428c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    4290:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4294:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    4298:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    429c:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    42a0:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    42a4:	73752f00 	cmnvc	r5, #0, 30
    42a8:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    42ac:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    42b0:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    42b4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    42b8:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    42bc:	6f682f00 	svcvs	0x00682f00
    42c0:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    42c4:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    42c8:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    42cc:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    42d0:	544f492d 	strbpl	r4, [pc], #-2349	; 42d8 <_Min_Stack_Size+0x40d8>
    42d4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    42d8:	74716d65 	ldrbtvc	r6, [r1], #-3429	; 0xfffff29b
    42dc:	6e692f74 	mcrvs	15, 3, r2, cr9, cr4, {3}
    42e0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    42e4:	6c000065 	stcvs	0, cr0, [r0], {101}	; 0x65
    42e8:	6d656269 	sfmvs	f6, 2, [r5, #-420]!	; 0xfffffe5c
    42ec:	2e747471 	mrccs	4, 3, r7, cr4, cr1, {3}
    42f0:	00010063 	andeq	r0, r1, r3, rrx
    42f4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    42f8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    42fc:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4300:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    4304:	00020068 	andeq	r0, r2, r8, rrx
    4308:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    430c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    4310:	0300682e 	movweq	r6, #2094	; 0x82e
    4314:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    4318:	716d6562 	cmnvc	sp, r2, ror #10
    431c:	682e7474 	stmdavs	lr!, {r2, r4, r5, r6, sl, ip, sp, lr}
    4320:	00000400 	andeq	r0, r0, r0, lsl #8
    4324:	02050000 	andeq	r0, r5, #0
    4328:	080075fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, ip, sp, lr}
    432c:	4b012c03 	blmi	4f340 <_Min_Stack_Size+0x4f140>
    4330:	673d6732 			; <UNDEFINED> instruction: 0x673d6732
    4334:	2140673d 	cmpcs	r0, sp, lsr r7
    4338:	01000502 	tsteq	r0, r2, lsl #10
    433c:	02050001 	andeq	r0, r5, #1
    4340:	0800764c 	stmdaeq	r0, {r2, r3, r6, r9, sl, ip, sp, lr}
    4344:	4b013d03 	blmi	53758 <_Min_Stack_Size+0x53558>
    4348:	0200332f 	andeq	r3, r0, #-1140850688	; 0xbc000000
    434c:	003f0104 	eorseq	r0, pc, r4, lsl #2
    4350:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    4354:	01040200 	mrseq	r0, R12_usr
    4358:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    435c:	02003d01 	andeq	r3, r0, #1, 26	; 0x40
    4360:	4c3d0104 	ldfmis	f0, [sp], #-16
    4364:	00050221 	andeq	r0, r5, r1, lsr #4
    4368:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    436c:	0076a002 	rsbseq	sl, r6, r2
    4370:	00d00308 	sbcseq	r0, r0, r8, lsl #6
    4374:	75594b01 	ldrbvc	r4, [r9, #-2817]	; 0xfffff4ff
    4378:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
    437c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    4380:	593f3d3d 	ldmdbpl	pc!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}	; <UNPREDICTABLE>
    4384:	7567832f 	strbvc	r8, [r7, #-815]!	; 0xfffffcd1
    4388:	938359a3 	orrls	r5, r3, #2670592	; 0x28c000
    438c:	00040221 	andeq	r0, r4, r1, lsr #4
    4390:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4394:	00000002 	andeq	r0, r0, r2
    4398:	00ee0300 	rsceq	r0, lr, r0, lsl #6
    439c:	00865a01 	addeq	r5, r6, r1, lsl #20
    43a0:	06010402 	streq	r0, [r1], -r2, lsl #8
    43a4:	693d063c 	ldmdbvs	sp!, {r2, r3, r4, r5, r9, sl}
    43a8:	00040221 	andeq	r0, r4, r1, lsr #4
    43ac:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    43b0:	00000002 	andeq	r0, r0, r2
    43b4:	00fb0300 	rscseq	r0, fp, r0, lsl #6
    43b8:	68325901 	ldmdavs	r2!, {r0, r8, fp, ip, lr}
    43bc:	76928359 			; <UNDEFINED> instruction: 0x76928359
    43c0:	0402213e 	streq	r2, [r2], #-318	; 0xfffffec2
    43c4:	00010100 	andeq	r0, r1, r0, lsl #2
    43c8:	77600205 	strbvc	r0, [r0, -r5, lsl #4]!
    43cc:	8d030800 	stchi	8, cr0, [r3, #-0]
    43d0:	845d0101 	ldrbhi	r0, [sp], #-257	; 0xfffffeff
    43d4:	01040200 	mrseq	r0, R12_usr
    43d8:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
    43dc:	04022169 	streq	r2, [r2], #-361	; 0xfffffe97
    43e0:	00010100 	andeq	r0, r1, r0, lsl #2
    43e4:	779c0205 	ldrvc	r0, [ip, r5, lsl #4]
    43e8:	9b030800 	blls	c63f0 <_Min_Stack_Size+0xc61f0>
    43ec:	32590101 	subscc	r0, r9, #1073741824	; 0x40000000
    43f0:	832f5969 			; <UNDEFINED> instruction: 0x832f5969
    43f4:	5f3f7568 	svcpl	0x003f7568
    43f8:	02213ef4 	eoreq	r3, r1, #244, 28	; 0xf40
    43fc:	01010004 	tsteq	r1, r4
    4400:	30020500 	andcc	r0, r2, r0, lsl #10
    4404:	03080078 	movweq	r0, #32888	; 0x8078
    4408:	5a0101ba 	bpl	44af8 <_Min_Stack_Size+0x448f8>
    440c:	75754c59 	ldrbvc	r4, [r5, #-3161]!	; 0xfffff3a7
    4410:	77843d75 			; <UNDEFINED> instruction: 0x77843d75
    4414:	0007024b 	andeq	r0, r7, fp, asr #4
    4418:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    441c:	0078b002 	rsbseq	fp, r8, r2
    4420:	01cb0308 	biceq	r0, fp, r8, lsl #6
    4424:	02006701 	andeq	r6, r0, #262144	; 0x40000
    4428:	3c060104 	stfccs	f0, [r6], {4}
    442c:	00754b06 	rsbseq	r4, r5, r6, lsl #22
    4430:	06010402 	streq	r0, [r1], -r2, lsl #8
    4434:	754b063c 	strbvc	r0, [fp, #-1596]	; 0xfffff9c4
    4438:	01000402 	tsteq	r0, r2, lsl #8
    443c:	02050001 	andeq	r0, r5, #1
    4440:	080078fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, ip, sp, lr}
    4444:	0101d203 	tsteq	r1, r3, lsl #4
    4448:	05024b67 	streq	r4, [r2, #-2919]	; 0xfffff499
    444c:	00010100 	andeq	r0, r1, r0, lsl #2
    4450:	791c0205 	ldmdbvc	ip, {r0, r2, r9}
    4454:	d7030800 	strle	r0, [r3, -r0, lsl #16]
    4458:	2f580101 	svccs	0x00580101
    445c:	7575753e 	ldrbvc	r7, [r5, #-1342]!	; 0xfffffac2
    4460:	68673d3f 	stmdavs	r7!, {r0, r1, r2, r3, r4, r5, r8, sl, fp, ip, sp}^
    4464:	5968673d 	stmdbpl	r8!, {r0, r2, r3, r4, r5, r8, r9, sl, sp, lr}^
    4468:	384e086a 	stmdacc	lr, {r1, r3, r5, r6, fp}^
    446c:	0903384e 	stmdbeq	r3, {r1, r2, r3, r6, fp, ip, sp}
    4470:	4b593d2e 	blmi	1653930 <_Min_Stack_Size+0x1653730>
    4474:	1523025a 	strne	r0, [r3, #-602]!	; 0xfffffda6
    4478:	755b4b3f 	ldrbvc	r4, [fp, #-2879]	; 0xfffff4c1
    447c:	082f6976 	stmdaeq	pc!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    4480:	596767f3 	stmdbpl	r7!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, sp, lr}^
    4484:	839f3e9f 	orrshi	r3, pc, #2544	; 0x9f0
    4488:	9f3e4c91 	svcls	0x003e4c91
    448c:	3e4d9183 	sqtcc<illegal precision>	f1, f3
    4490:	4e91839f 	mrcmi	3, 4, r8, cr1, cr15, {4}
    4494:	023d3f9f 	eorseq	r3, sp, #636	; 0x27c
    4498:	01010005 	tsteq	r1, r5
    449c:	00020500 	andeq	r0, r2, r0, lsl #10
    44a0:	03000000 	movweq	r0, #0
    44a4:	4b0102b0 	blmi	44f6c <_Min_Stack_Size+0x44d6c>
    44a8:	003fad50 	eorseq	sl, pc, r0, asr sp	; <UNPREDICTABLE>
    44ac:	21010402 	tstcs	r1, r2, lsl #8
    44b0:	01000402 	tsteq	r0, r2, lsl #8
    44b4:	02050001 	andeq	r0, r5, #1
    44b8:	08007c10 	stmdaeq	r0, {r4, sl, fp, ip, sp, lr}
    44bc:	0102be03 	tsteq	r2, r3, lsl #28
    44c0:	3fad504b 	svccc	0x00ad504b
    44c4:	01040200 	mrseq	r0, R12_usr
    44c8:	00040221 	andeq	r0, r4, r1, lsr #4
    44cc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    44d0:	00000002 	andeq	r0, r0, r2
    44d4:	02cc0300 	sbceq	r0, ip, #0, 6
    44d8:	02bb7501 	adcseq	r7, fp, #4194304	; 0x400000
    44dc:	01010004 	tsteq	r1, r4
    44e0:	00020500 	andeq	r0, r2, r0, lsl #10
    44e4:	03000000 	movweq	r0, #0
    44e8:	900102d0 	ldrdls	r0, [r1], -r0	; <UNPREDICTABLE>
    44ec:	3d68672f 	stclcc	7, cr6, [r8, #-188]!	; 0xffffff44
    44f0:	4c3d4b3d 			; <UNDEFINED> instruction: 0x4c3d4b3d
    44f4:	02403d4b 	subeq	r3, r0, #4800	; 0x12c0
    44f8:	75671323 	strbvc	r1, [r7, #-803]!	; 0xfffffcdd
    44fc:	ad4b8359 	stclge	3, cr8, [fp, #-356]	; 0xfffffe9c
    4500:	89684b91 	stmdbhi	r8!, {r0, r4, r7, r8, r9, fp, lr}^
    4504:	5a4b753d 	bpl	12e1a00 <_Min_Stack_Size+0x12e1800>
    4508:	75152402 	ldrvc	r2, [r5, #-1026]	; 0xfffffbfe
    450c:	694b774b 	stmdbvs	fp, {r0, r1, r3, r6, r8, r9, sl, ip, sp, lr}^
    4510:	02777683 	rsbseq	r7, r7, #137363456	; 0x8300000
    4514:	67671327 	strbvs	r1, [r7, -r7, lsr #6]!
    4518:	3f9faf83 	svccc	0x009faf83
    451c:	0005022f 	andeq	r0, r5, pc, lsr #4
    4520:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4524:	00000002 	andeq	r0, r0, r2
    4528:	03970300 	orrseq	r0, r7, #0, 6
    452c:	adc26701 	stclge	7, cr6, [r2, #4]
    4530:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
    4534:	04022101 	streq	r2, [r2], #-257	; 0xfffffeff
    4538:	00010100 	andeq	r0, r1, r0, lsl #2
    453c:	7c480205 	sfmvc	f0, 2, [r8], {5}
    4540:	a7030800 	strge	r0, [r3, -r0, lsl #16]
    4544:	2f740103 	svccs	0x00740103
    4548:	3d67835c 	stclcc	3, cr8, [r7, #-368]!	; 0xfffffe90
    454c:	2302855a 	movwcs	r8, #9562	; 0x255a
    4550:	4b676713 	blmi	19de1a4 <_Min_Stack_Size+0x19ddfa4>
    4554:	f3086b77 	vqrdmlah.s<illegal width 8>	q3, q4, <illegal reg q11.5>
    4558:	77756775 			; <UNDEFINED> instruction: 0x77756775
    455c:	023d3fd7 	eorseq	r3, sp, #860	; 0x35c
    4560:	01010005 	tsteq	r1, r5
    4564:	00020500 	andeq	r0, r2, r0, lsl #10
    4568:	03000000 	movweq	r0, #0
    456c:	740103ce 	strvc	r0, [r1], #-974	; 0xfffffc32
    4570:	67835c2f 	strvs	r5, [r3, pc, lsr #24]
    4574:	02855a3d 	addeq	r5, r5, #249856	; 0x3d000
    4578:	67671323 	strbvs	r1, [r7, -r3, lsr #6]!
    457c:	086b774b 	stmdaeq	fp!, {r0, r1, r3, r6, r8, r9, sl, ip, sp, lr}^
    4580:	756775f3 	strbvc	r7, [r7, #-1523]!	; 0xfffffa0d
    4584:	3d3fd777 	ldccc	7, cr13, [pc, #-476]!	; 43b0 <_Min_Stack_Size+0x41b0>
    4588:	01000502 	tsteq	r0, r2, lsl #10
    458c:	00018301 	andeq	r8, r1, r1, lsl #6
    4590:	f9000200 			; <UNDEFINED> instruction: 0xf9000200
    4594:	02000000 	andeq	r0, r0, #0
    4598:	0d0efb01 	vstreq	d15, [lr, #-4]
    459c:	01010100 	mrseq	r0, (UNDEF: 17)
    45a0:	00000001 	andeq	r0, r0, r1
    45a4:	01000001 	tsteq	r0, r1
    45a8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 44f4 <_Min_Stack_Size+0x42f4>
    45ac:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    45b0:	76737572 			; <UNDEFINED> instruction: 0x76737572
    45b4:	4144542f 	cmpmi	r4, pc, lsr #8
    45b8:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    45bc:	2f544f49 	svccs	0x00544f49
    45c0:	2f00534f 	svccs	0x0000534f
    45c4:	2f727375 	svccs	0x00727375
    45c8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    45cc:	2f656475 	svccs	0x00656475
    45d0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    45d4:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 4438 <_Min_Stack_Size+0x4238>
    45d8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    45dc:	2f00656e 	svccs	0x0000656e
    45e0:	2f727375 	svccs	0x00727375
    45e4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    45e8:	2f656475 	svccs	0x00656475
    45ec:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    45f0:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    45f4:	2f007379 	svccs	0x00007379
    45f8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    45fc:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    4600:	2f767375 	svccs	0x00767375
    4604:	53414454 	movtpl	r4, #5204	; 0x1454
    4608:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    460c:	4f2f544f 	svcmi	0x002f544f
    4610:	6f702f53 	svcvs	0x00702f53
    4614:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
    4618:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
    461c:	412f4343 			; <UNDEFINED> instruction: 0x412f4343
    4620:	435f4d52 	cmpmi	pc, #5248	; 0x1480
    4624:	2f00334d 	svccs	0x0000334d
    4628:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    462c:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    4630:	2f767375 	svccs	0x00767375
    4634:	53414454 	movtpl	r4, #5204	; 0x1454
    4638:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    463c:	4f2f544f 	svcmi	0x002f544f
    4640:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
    4644:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4648:	6c000065 	stcvs	0, cr0, [r0], {101}	; 0x65
    464c:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
    4650:	00010063 	andeq	r0, r1, r3, rrx
    4654:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    4658:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    465c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4660:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    4664:	00020068 	andeq	r0, r2, r8, rrx
    4668:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    466c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    4670:	0300682e 	movweq	r6, #2094	; 0x82e
    4674:	6f700000 	svcvs	0x00700000
    4678:	616d7472 	smcvs	55106	; 0xd742
    467c:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
    4680:	00040068 	andeq	r0, r4, r8, rrx
    4684:	73696c00 	cmnvc	r9, #0, 24
    4688:	00682e74 	rsbeq	r2, r8, r4, ror lr
    468c:	00000005 	andeq	r0, r0, r5
    4690:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    4694:	0308007d 	movweq	r0, #32893	; 0x807d
    4698:	5c4e0125 	stfple	f0, [lr], {37}	; 0x25
    469c:	425a594e 	subsmi	r5, sl, #1277952	; 0x138000
    46a0:	01000502 	tsteq	r0, r2, lsl #10
    46a4:	02050001 	andeq	r0, r5, #1
    46a8:	08007e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, ip, sp, lr}
    46ac:	4c013e03 	stcmi	14, cr3, [r1], {3}
    46b0:	00050242 	andeq	r0, r5, r2, asr #4
    46b4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    46b8:	007e2402 	rsbseq	r2, lr, r2, lsl #8
    46bc:	00ca0308 	sbceq	r0, sl, r8, lsl #6
    46c0:	0b035901 	bleq	daacc <_Min_Stack_Size+0xda8cc>
    46c4:	4b4f3d3c 	blmi	13d3bbc <_Min_Stack_Size+0x13d39bc>
    46c8:	02593e3f 	subseq	r3, r9, #1008	; 0x3f0
    46cc:	01010005 	tsteq	r1, r5
    46d0:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
    46d4:	0308007e 	movweq	r0, #32894	; 0x807e
    46d8:	5a0100e7 	bpl	44a7c <_Min_Stack_Size+0x4487c>
    46dc:	4c3c1003 	ldcmi	0, cr1, [ip], #-12
    46e0:	004a1a03 	subeq	r1, sl, r3, lsl #20
    46e4:	06030402 	streq	r0, [r3], -r2, lsl #8
    46e8:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    46ec:	6d063c01 	stcvs	12, cr3, [r6, #-4]
    46f0:	403d4b4b 	eorsmi	r4, sp, fp, asr #22
    46f4:	0502593e 	streq	r5, [r2, #-2366]	; 0xfffff6c2
    46f8:	00010100 	andeq	r0, r1, r0, lsl #2
    46fc:	7edc0205 	cdpvc	2, 13, cr0, cr12, cr5, {0}
    4700:	aa030800 	bge	c6708 <_Min_Stack_Size+0xc6508>
    4704:	3e4d0101 	dvfcce	f0, f5, f1
    4708:	515a5e59 	cmppl	sl, r9, asr lr
    470c:	022f5a3d 	eoreq	r5, pc, #249856	; 0x3d000
    4710:	01010005 	tsteq	r1, r5
    4714:	00000580 	andeq	r0, r0, r0, lsl #11
    4718:	01440002 	cmpeq	r4, r2
    471c:	01020000 	mrseq	r0, (UNDEF: 2)
    4720:	000d0efb 	strdeq	r0, [sp], -fp
    4724:	01010101 	tsteq	r1, r1, lsl #2
    4728:	01000000 	mrseq	r0, (UNDEF: 0)
    472c:	2f010000 	svccs	0x00010000
    4730:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4734:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    4738:	2f767375 	svccs	0x00767375
    473c:	53414454 	movtpl	r4, #5204	; 0x1454
    4740:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    4744:	4f2f544f 	svcmi	0x002f544f
    4748:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    474c:	2f656d6f 	svccs	0x00656d6f
    4750:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    4754:	542f7673 	strtpl	r7, [pc], #-1651	; 475c <_Min_Stack_Size+0x455c>
    4758:	41534144 	cmpmi	r3, r4, asr #2
    475c:	4f492d54 	svcmi	0x00492d54
    4760:	534f2f54 	movtpl	r2, #65364	; 0xff54
    4764:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
    4768:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    476c:	43472f65 	movtmi	r2, #32613	; 0x7f65
    4770:	52412f43 	subpl	r2, r1, #268	; 0x10c
    4774:	4d435f4d 	stclmi	15, cr5, [r3, #-308]	; 0xfffffecc
    4778:	752f0033 	strvc	r0, [pc, #-51]!	; 474d <_Min_Stack_Size+0x454d>
    477c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 45b8 <_Min_Stack_Size+0x43b8>
    4780:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    4784:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    4788:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    478c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4790:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4794:	342e352f 	strtcc	r3, [lr], #-1327	; 0xfffffad1
    4798:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    479c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    47a0:	2f006564 	svccs	0x00006564
    47a4:	2f727375 	svccs	0x00727375
    47a8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    47ac:	2f656475 	svccs	0x00656475
    47b0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    47b4:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 4618 <_Min_Stack_Size+0x4418>
    47b8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    47bc:	2f00656e 	svccs	0x0000656e
    47c0:	2f727375 	svccs	0x00727375
    47c4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    47c8:	2f656475 	svccs	0x00656475
    47cc:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    47d0:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    47d4:	2f007379 	svccs	0x00007379
    47d8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    47dc:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    47e0:	2f767375 	svccs	0x00767375
    47e4:	53414454 	movtpl	r4, #5204	; 0x1454
    47e8:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    47ec:	4f2f544f 	svcmi	0x002f544f
    47f0:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
    47f4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    47f8:	71000065 	tstvc	r0, r5, rrx
    47fc:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    4800:	0100632e 	tsteq	r0, lr, lsr #6
    4804:	6f700000 	svcvs	0x00700000
    4808:	616d7472 	smcvs	55106	; 0xd742
    480c:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
    4810:	00020068 	andeq	r0, r2, r8, rrx
    4814:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4818:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    481c:	00030068 	andeq	r0, r3, r8, rrx
    4820:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    4824:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    4828:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    482c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    4830:	00040068 	andeq	r0, r4, r8, rrx
    4834:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    4838:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    483c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    4840:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    4844:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    4848:	00000600 	andeq	r0, r0, r0, lsl #12
    484c:	6b736174 	blvs	1cdce24 <_Min_Stack_Size+0x1cdcc24>
    4850:	0600682e 	streq	r6, [r0], -lr, lsr #16
    4854:	75710000 	ldrbvc	r0, [r1, #-0]!
    4858:	2e657565 	cdpcs	5, 6, cr7, cr5, cr5, {3}
    485c:	00060068 	andeq	r0, r6, r8, rrx
    4860:	05000000 	streq	r0, [r0, #-0]
    4864:	007f3002 	rsbseq	r3, pc, r2
    4868:	01ff0308 	mvnseq	r0, r8, lsl #6
    486c:	30325901 	eorscc	r5, r2, r1, lsl #18
    4870:	bb4b3dad 	bllt	12d3f2c <_Min_Stack_Size+0x12d3d2c>
    4874:	4c434c4b 	mcrrmi	12, 4, r4, r3, cr11
    4878:	900f0384 	andls	r0, pc, r4, lsl #7
    487c:	21325b59 	teqcs	r2, r9, asr fp
    4880:	01000602 	tsteq	r0, r2, lsl #12
    4884:	02050001 	andeq	r0, r5, #1
    4888:	08007fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
    488c:	0102f003 	tsteq	r2, r3	; <UNPREDICTABLE>
    4890:	03423f7b 	movteq	r3, #12155	; 0x2f7b
    4894:	4068580c 	rsbmi	r5, r8, ip, lsl #16
    4898:	3c0b032f 	stccc	3, cr0, [fp], {47}	; 0x2f
    489c:	04022198 	streq	r2, [r2], #-408	; 0xfffffe68
    48a0:	00010100 	andeq	r0, r1, r0, lsl #2
    48a4:	80400205 	subhi	r0, r0, r5, lsl #4
    48a8:	ad030800 	stcge	8, cr0, [r3, #-0]
    48ac:	42790103 	rsbsmi	r0, r9, #-1073741824	; 0xc0000000
    48b0:	3d3d414f 	ldfccs	f4, [sp, #-316]!	; 0xfffffec4
    48b4:	024a0f03 	subeq	r0, sl, #3, 30
    48b8:	01010004 	tsteq	r1, r4
    48bc:	80020500 	andhi	r0, r2, r0, lsl #10
    48c0:	03080080 	movweq	r0, #32896	; 0x8080
    48c4:	4b0103d9 	blmi	45830 <_Min_Stack_Size+0x45630>
    48c8:	413f3d42 	teqmi	pc, r2, asr #26
    48cc:	0004026c 	andeq	r0, r4, ip, ror #4
    48d0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    48d4:	0080b402 	addeq	fp, r0, r2, lsl #8
    48d8:	03f70308 	mvnseq	r0, #8, 6	; 0x20000000
    48dc:	754c5a01 	strbvc	r5, [ip, #-2561]	; 0xfffff5ff
    48e0:	0402213e 	streq	r2, [r2], #-318	; 0xfffffec2
    48e4:	00010100 	andeq	r0, r1, r0, lsl #2
    48e8:	80e40205 	rschi	r0, r4, r5, lsl #4
    48ec:	eb030800 	bl	c68f4 <_Min_Stack_Size+0xc66f4>
    48f0:	30750105 	rsbscc	r0, r5, r5, lsl #2
    48f4:	342e1103 	strtcc	r1, [lr], #-259	; 0xfffffefd
    48f8:	01040200 	mrseq	r0, R12_usr
    48fc:	03066606 	movweq	r6, #26118	; 0x6606
    4900:	6a3c00c2 	bvs	f04c10 <_Min_Stack_Size+0xf04a10>
    4904:	4297884c 	addsmi	r8, r7, #76, 16	; 0x4c0000
    4908:	2f820903 	svccs	0x00820903
    490c:	30334032 	eorscc	r4, r3, r2, lsr r0
    4910:	09035940 	stmdbeq	r3, {r6, r8, fp, ip, lr}
    4914:	002f332e 	eoreq	r3, pc, lr, lsr #6
    4918:	06010402 	streq	r0, [r1], -r2, lsl #8
    491c:	04020090 	streq	r0, [r2], #-144	; 0xffffff70
    4920:	02004a03 	andeq	r4, r0, #12288	; 0x3000
    4924:	00740404 	rsbseq	r0, r4, r4, lsl #8
    4928:	4a060402 	bmi	185938 <_Min_Stack_Size+0x185738>
    492c:	06040200 	streq	r0, [r4], -r0, lsl #4
    4930:	69a03106 	stmibvs	r0!, {r1, r2, r8, ip, sp}
    4934:	9668437b 			; <UNDEFINED> instruction: 0x9668437b
    4938:	313d423d 	teqcc	sp, sp, lsr r2
    493c:	03040200 	movweq	r0, #16896	; 0x4200
    4940:	00060223 	andeq	r0, r6, r3, lsr #4
    4944:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4948:	00000002 	andeq	r0, r0, r2
    494c:	07bd0300 	ldreq	r0, [sp, r0, lsl #6]!
    4950:	02047701 	andeq	r7, r4, #262144	; 0x40000
    4954:	2e7a9203 	cdpcs	2, 7, cr9, cr10, cr3, {0}
    4958:	04ba0c03 	ldrteq	r0, [sl], #3075	; 0xc03
    495c:	05fd0301 	ldrbeq	r0, [sp, #769]!	; 0x301
    4960:	02002220 	andeq	r2, r0, #32, 4
    4964:	66060104 	strvs	r0, [r6], -r4, lsl #2
    4968:	09033e06 	stmdbeq	r3, {r1, r2, r9, sl, fp, ip, sp}
    496c:	37035c4a 	strcc	r5, [r3, -sl, asr #24]
    4970:	3e864c58 	mcrcc	12, 4, r4, cr6, cr8, {2}
    4974:	774a1703 	strbvc	r1, [sl, -r3, lsl #14]
    4978:	2e7f9903 	vaddcs.f16	s19, s30, s6	; <UNPREDICTABLE>
    497c:	2000ec03 	andcs	lr, r0, r3, lsl #24
    4980:	9a030204 	bls	c5198 <_Min_Stack_Size+0xc4f98>
    4984:	01044a79 	tsteq	r4, r9, ror sl
    4988:	3c06eb03 			; <UNDEFINED> instruction: 0x3c06eb03
    498c:	00040221 	andeq	r0, r4, r1, lsr #4
    4990:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4994:	00000002 	andeq	r0, r0, r2
    4998:	08d40300 	ldmeq	r4, {r8, r9}^
    499c:	02045b01 	andeq	r5, r4, #1024	; 0x400
    49a0:	2e78fb03 	vaddcs.f64	d31, d8, d3
    49a4:	04ba0c03 	ldrteq	r0, [sl], #3075	; 0xc03
    49a8:	079c0301 	ldreq	r0, [ip, r1, lsl #6]
    49ac:	5a412220 	bpl	104d234 <_Min_Stack_Size+0x104d034>
    49b0:	4e4a0a03 	vmlami.f32	s1, s20, s6
    49b4:	4c583703 	mrrcmi	7, 0, r3, r8, cr3
    49b8:	17033e86 	strne	r3, [r3, -r6, lsl #29]
    49bc:	0441774a 	strbeq	r7, [r1], #-1866	; 0xfffff8b6
    49c0:	77f50302 	ldrbvc	r0, [r5, r2, lsl #6]!
    49c4:	0301044a 	movweq	r0, #5194	; 0x144a
    49c8:	213c0890 	teqcs	ip, r0	; <illegal shifter operand>
    49cc:	01000402 	tsteq	r0, r2, lsl #8
    49d0:	02050001 	andeq	r0, r5, #1
    49d4:	00000000 	andeq	r0, r0, r0
    49d8:	0109f903 	tsteq	r9, r3, lsl #18	; <UNPREDICTABLE>
    49dc:	16033067 	strne	r3, [r3], -r7, rrx
    49e0:	3f40302e 	svccc	0x0040302e
    49e4:	844c4f4c 	strbhi	r4, [ip], #-3916	; 0xfffff0b4
    49e8:	2f820c03 	svccs	0x00820c03
    49ec:	30304032 	eorscc	r4, r0, r2, lsr r0
    49f0:	09035940 	stmdbeq	r3, {r6, r8, fp, ip, lr}
    49f4:	002f332e 	eoreq	r3, pc, lr, lsr #6
    49f8:	06010402 	streq	r0, [r1], -r2, lsl #8
    49fc:	04020090 	streq	r0, [r2], #-144	; 0xffffff70
    4a00:	02004a03 	andeq	r4, r0, #12288	; 0x3000
    4a04:	00740404 	rsbseq	r0, r4, r4, lsl #8
    4a08:	4a060402 	bmi	185a18 <_Min_Stack_Size+0x185818>
    4a0c:	06040200 	streq	r0, [r4], -r0, lsl #4
    4a10:	69a23106 	stmibvs	r2!, {r1, r2, r8, ip, sp}
    4a14:	035a3d75 	cmpeq	sl, #7488	; 0x1d40
    4a18:	433d900b 	teqmi	sp, #11
    4a1c:	0077303d 	rsbseq	r3, r7, sp, lsr r0
    4a20:	28030402 	stmdacs	r3, {r1, sl}
    4a24:	01000602 	tsteq	r0, r2, lsl #12
    4a28:	02050001 	andeq	r0, r5, #1
    4a2c:	08008238 	stmdaeq	r0, {r3, r4, r5, r9, pc}
    4a30:	010b8603 	tsteq	fp, r3, lsl #12
    4a34:	03313059 	teqeq	r1, #89	; 0x59
    4a38:	40322e17 	eorsmi	r2, r2, r7, lsl lr
    4a3c:	034e4e42 	movteq	r4, #60994	; 0xee42
    4a40:	844c580b 	strbhi	r5, [ip], #-2059	; 0xfffff7f5
    4a44:	2f820c03 	svccs	0x00820c03
    4a48:	3c0d0332 	stccc	3, cr0, [sp], {50}	; 0x32
    4a4c:	59403030 	stmdbpl	r0, {r4, r5, ip, sp}^
    4a50:	332e0903 			; <UNDEFINED> instruction: 0x332e0903
    4a54:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    4a58:	00900601 	addseq	r0, r0, r1, lsl #12
    4a5c:	4a030402 	bmi	c5a6c <_Min_Stack_Size+0xc586c>
    4a60:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    4a64:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    4a68:	02004a06 	andeq	r4, r0, #24576	; 0x6000
    4a6c:	31060604 	tstcc	r6, r4, lsl #12
    4a70:	304c6ca4 	subcc	r6, ip, r4, lsr #25
    4a74:	2e090368 	cdpcs	3, 0, cr0, cr9, cr8, {3}
    4a78:	03683d75 	cmneq	r8, #7488	; 0x1d40
    4a7c:	423d900b 	eorsmi	r9, sp, #11
    4a80:	3e7b343d 	mrccc	4, 3, r3, cr11, cr13, {1}
    4a84:	4b2e0903 	blmi	b86e98 <_Min_Stack_Size+0xb86c98>
    4a88:	02003468 	andeq	r3, r0, #104, 8	; 0x68000000
    4a8c:	02280304 	eoreq	r0, r8, #4, 6	; 0x10000000
    4a90:	01010006 	tsteq	r1, r6
    4a94:	00020500 	andeq	r0, r2, r0, lsl #10
    4a98:	03000000 	movweq	r0, #0
    4a9c:	67010ce0 	strvs	r0, [r1, -r0, ror #25]
    4aa0:	2e160331 	mrccs	3, 0, r0, cr6, cr1, {1}
    4aa4:	3e414030 	mcrcc	0, 2, r4, cr1, cr0, {1}
    4aa8:	854c404e 	strbhi	r4, [ip, #-78]	; 0xffffffb2
    4aac:	2f820c03 	svccs	0x00820c03
    4ab0:	30304032 	eorscc	r4, r0, r2, lsr r0
    4ab4:	09035941 	stmdbeq	r3, {r0, r6, r8, fp, ip, lr}
    4ab8:	002f332e 	eoreq	r3, pc, lr, lsr #6
    4abc:	06010402 	streq	r0, [r1], -r2, lsl #8
    4ac0:	04020090 	streq	r0, [r2], #-144	; 0xffffff70
    4ac4:	02004a03 	andeq	r4, r0, #12288	; 0x3000
    4ac8:	00740404 	rsbseq	r0, r4, r4, lsl #8
    4acc:	4a060402 	bmi	185adc <_Min_Stack_Size+0x1858dc>
    4ad0:	06040200 	streq	r0, [r4], -r0, lsl #4
    4ad4:	69a23106 	stmibvs	r2!, {r1, r2, r8, ip, sp}
    4ad8:	035a3d75 	cmpeq	sl, #7488	; 0x1d40
    4adc:	433d900b 	teqmi	sp, #11
    4ae0:	0077303d 	rsbseq	r3, r7, sp, lsr r0
    4ae4:	28030402 	stmdacs	r3, {r1, sl}
    4ae8:	01000602 	tsteq	r0, r2, lsl #12
    4aec:	02050001 	andeq	r0, r5, #1
    4af0:	00000000 	andeq	r0, r0, r0
    4af4:	010df503 	tsteq	sp, r3, lsl #10	; <UNPREDICTABLE>
    4af8:	03020469 	movweq	r0, #9321	; 0x2469
    4afc:	032e73da 			; <UNDEFINED> instruction: 0x032e73da
    4b00:	0104ba0c 	tsteq	r4, ip, lsl #20
    4b04:	200caf03 	andcs	sl, ip, r3, lsl #30
    4b08:	4e3e3f22 	cdpmi	15, 3, cr3, cr14, cr2, {1}
    4b0c:	4c5a504b 	mrrcmi	0, 4, r5, sl, cr11
    4b10:	15033e86 	strne	r3, [r3, #-3718]	; 0xfffff17a
    4b14:	0440774a 	strbeq	r7, [r0], #-1866	; 0xfffff8b6
    4b18:	739f0302 	orrsvc	r0, pc, #134217728	; 0x8000000
    4b1c:	0301044a 	movweq	r0, #5194	; 0x144a
    4b20:	213c0ce7 	teqcs	ip, r7, ror #25
    4b24:	01000402 	tsteq	r0, r2, lsl #8
    4b28:	02050001 	andeq	r0, r5, #1
    4b2c:	00000000 	andeq	r0, r0, r0
    4b30:	010ed003 	tsteq	lr, r3
    4b34:	0302045c 	movweq	r0, #9308	; 0x245c
    4b38:	032e72fe 			; <UNDEFINED> instruction: 0x032e72fe
    4b3c:	0104ba0c 	tsteq	r4, ip, lsl #20
    4b40:	200d8c03 	andcs	r8, sp, r3, lsl #24
    4b44:	4b3d5023 	blmi	f58bd8 <_Min_Stack_Size+0xf589d8>
    4b48:	0204403e 	andeq	r4, r4, #62	; 0x3e
    4b4c:	4a72e903 	bmi	1cbef60 <_Min_Stack_Size+0x1cbed60>
    4b50:	9d030104 	stflss	f0, [r3, #-16]
    4b54:	02213c0d 	eoreq	r3, r1, #3328	; 0xd00
    4b58:	01010004 	tsteq	r1, r4
    4b5c:	00020500 	andeq	r0, r2, r0, lsl #10
    4b60:	03000000 	movweq	r0, #0
    4b64:	4f010f86 	svcmi	0x00010f86
    4b68:	21303e30 	teqcs	r0, r0, lsr lr
    4b6c:	01000402 	tsteq	r0, r2, lsl #8
    4b70:	02050001 	andeq	r0, r5, #1
    4b74:	00000000 	andeq	r0, r0, r0
    4b78:	010f9603 	tsteq	pc, r3, lsl #12
    4b7c:	6830324c 	ldmdavs	r0!, {r2, r3, r6, r9, ip, sp}
    4b80:	04022130 	streq	r2, [r2], #-304	; 0xfffffed0
    4b84:	00010100 	andeq	r0, r1, r0, lsl #2
    4b88:	00000205 	andeq	r0, r0, r5, lsl #4
    4b8c:	a7030000 	strge	r0, [r3, -r0]
    4b90:	314c010f 	cmpcc	ip, pc, lsl #2
    4b94:	0502213e 	streq	r2, [r2, #-318]	; 0xfffffec2
    4b98:	00010100 	andeq	r0, r1, r0, lsl #2
    4b9c:	00000205 	andeq	r0, r0, r5, lsl #4
    4ba0:	b3030000 	movwlt	r0, #12288	; 0x3000
    4ba4:	034b010f 	movteq	r0, #45327	; 0xb10f
    4ba8:	16032e0f 	strne	r2, [r3], -pc, lsl #28
    4bac:	0004023c 	andeq	r0, r4, ip, lsr r2
    4bb0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4bb4:	0083c802 	addeq	ip, r3, r2, lsl #16
    4bb8:	0ffd0308 	svceq	0x00fd0308
    4bbc:	4a090301 	bmi	2457c8 <_Min_Stack_Size+0x2455c8>
    4bc0:	2131784c 	teqcs	r1, ip, asr #16
    4bc4:	01000502 	tsteq	r0, r2, lsl #10
    4bc8:	02050001 	andeq	r0, r5, #1
    4bcc:	080083f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, pc}
    4bd0:	01109603 	tsteq	r0, r3, lsl #12
    4bd4:	4e3e3367 	cdpmi	3, 3, cr3, cr14, cr7, {3}
    4bd8:	0903674d 	stmdbeq	r3, {r0, r2, r3, r6, r8, r9, sl, sp, lr}
    4bdc:	75833e4a 	strvc	r3, [r3, #3658]	; 0xe4a
    4be0:	58090368 	stmdapl	r9, {r3, r5, r6, r8, r9}
    4be4:	89688383 	stmdbhi	r8!, {r0, r1, r7, r8, r9, pc}^
    4be8:	0d03423e 	sfmeq	f4, 4, [r3, #-248]	; 0xffffff08
    4bec:	02214c3c 	eoreq	r4, r1, #60, 24	; 0x3c00
    4bf0:	01010004 	tsteq	r1, r4
    4bf4:	00020500 	andeq	r0, r2, r0, lsl #10
    4bf8:	03000000 	movweq	r0, #0
    4bfc:	590110e5 	stmdbpl	r1, {r0, r2, r5, r6, r7, ip}
    4c00:	5068754c 	rsbpl	r7, r8, ip, asr #10
    4c04:	00040284 	andeq	r0, r4, r4, lsl #5
    4c08:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4c0c:	0084cc02 	addeq	ip, r4, r2, lsl #24
    4c10:	10f70308 	rscsne	r0, r7, r8, lsl #6
    4c14:	4d305101 	ldfmis	f5, [r0, #-4]!
    4c18:	4c203003 	stcmi	0, cr3, [r0], #-12
    4c1c:	2e0e0386 	cdpcs	3, 0, cr0, cr14, cr6, {4}
    4c20:	4a7fbc03 	bmi	1ff3c34 <_Min_Stack_Size+0x1ff3a34>
    4c24:	28583f03 	ldmdacs	r8, {r0, r1, r8, r9, sl, fp, ip, sp}^
    4c28:	4c30314c 	ldfmis	f3, [r0], #-304	; 0xfffffed0
    4c2c:	35844c22 	strcc	r4, [r4, #3106]	; 0xc22
    4c30:	034a7303 	movteq	r7, #41731	; 0xa303
    4c34:	4c245811 	stcmi	8, cr5, [r4], #-68	; 0xffffffbc
    4c38:	0004022f 	andeq	r0, r4, pc, lsr #4
    4c3c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4c40:	00857002 	addeq	r7, r5, r2
    4c44:	11ef0308 	mvnne	r0, r8, lsl #6
    4c48:	4c304d01 	ldcmi	13, cr4, [r0], #-4
    4c4c:	21303140 	teqcs	r0, r0, asr #2
    4c50:	01000402 	tsteq	r0, r2, lsl #8
    4c54:	02050001 	andeq	r0, r5, #1
    4c58:	00000000 	andeq	r0, r0, r0
    4c5c:	01128403 	tsteq	r2, r3, lsl #8
    4c60:	404c314c 	submi	r3, ip, ip, asr #2
    4c64:	05022131 	streq	r2, [r2, #-305]	; 0xfffffecf
    4c68:	00010100 	andeq	r0, r1, r0, lsl #2
    4c6c:	859c0205 	ldrhi	r0, [ip, #517]	; 0x205
    4c70:	97030800 	strls	r0, [r3, -r0, lsl #16]
    4c74:	304d0112 	subcc	r0, sp, r2, lsl r1
    4c78:	30314068 	eorscc	r4, r1, r8, rrx
    4c7c:	00040221 	andeq	r0, r4, r1, lsr #4
    4c80:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4c84:	00000002 	andeq	r0, r0, r2
    4c88:	12ac0300 	adcne	r0, ip, #0, 6
    4c8c:	68314c01 	ldmdavs	r1!, {r0, sl, fp, lr}
    4c90:	02213140 	eoreq	r3, r1, #64, 2
    4c94:	01010005 	tsteq	r1, r5
    4c98:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    4c9c:	01470002 	cmpeq	r7, r2
    4ca0:	01020000 	mrseq	r0, (UNDEF: 2)
    4ca4:	000d0efb 	strdeq	r0, [sp], -fp
    4ca8:	01010101 	tsteq	r1, r1, lsl #2
    4cac:	01000000 	mrseq	r0, (UNDEF: 0)
    4cb0:	2f010000 	svccs	0x00010000
    4cb4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4cb8:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    4cbc:	2f767375 	svccs	0x00767375
    4cc0:	53414454 	movtpl	r4, #5204	; 0x1454
    4cc4:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    4cc8:	4f2f544f 	svcmi	0x002f544f
    4ccc:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    4cd0:	2f656d6f 	svccs	0x00656d6f
    4cd4:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    4cd8:	542f7673 	strtpl	r7, [pc], #-1651	; 4ce0 <_Min_Stack_Size+0x4ae0>
    4cdc:	41534144 	cmpmi	r3, r4, asr #2
    4ce0:	4f492d54 	svcmi	0x00492d54
    4ce4:	534f2f54 	movtpl	r2, #65364	; 0xff54
    4ce8:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
    4cec:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    4cf0:	43472f65 	movtmi	r2, #32613	; 0x7f65
    4cf4:	52412f43 	subpl	r2, r1, #268	; 0x10c
    4cf8:	4d435f4d 	stclmi	15, cr5, [r3, #-308]	; 0xfffffecc
    4cfc:	752f0033 	strvc	r0, [pc, #-51]!	; 4cd1 <_Min_Stack_Size+0x4ad1>
    4d00:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4b3c <_Min_Stack_Size+0x493c>
    4d04:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    4d08:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    4d0c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4d10:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4d14:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4d18:	342e352f 	strtcc	r3, [lr], #-1327	; 0xfffffad1
    4d1c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    4d20:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4d24:	2f006564 	svccs	0x00006564
    4d28:	2f727375 	svccs	0x00727375
    4d2c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4d30:	2f656475 	svccs	0x00656475
    4d34:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4d38:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 4b9c <_Min_Stack_Size+0x499c>
    4d3c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    4d40:	2f00656e 	svccs	0x0000656e
    4d44:	2f727375 	svccs	0x00727375
    4d48:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4d4c:	2f656475 	svccs	0x00656475
    4d50:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4d54:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    4d58:	2f007379 	svccs	0x00007379
    4d5c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4d60:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    4d64:	2f767375 	svccs	0x00767375
    4d68:	53414454 	movtpl	r4, #5204	; 0x1454
    4d6c:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    4d70:	4f2f544f 	svcmi	0x002f544f
    4d74:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
    4d78:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4d7c:	74000065 	strvc	r0, [r0], #-101	; 0xffffff9b
    4d80:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
    4d84:	0100632e 	tsteq	r0, lr, lsr #6
    4d88:	6f700000 	svcvs	0x00700000
    4d8c:	616d7472 	smcvs	55106	; 0xd742
    4d90:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
    4d94:	00020068 	andeq	r0, r2, r8, rrx
    4d98:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4d9c:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    4da0:	00030068 	andeq	r0, r3, r8, rrx
    4da4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    4da8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    4dac:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4db0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    4db4:	00040068 	andeq	r0, r4, r8, rrx
    4db8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    4dbc:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    4dc0:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    4dc4:	72700000 	rsbsvc	r0, r0, #0
    4dc8:	65646a6f 	strbvs	r6, [r4, #-2671]!	; 0xfffff591
    4dcc:	682e7366 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
    4dd0:	00000600 	andeq	r0, r0, r0, lsl #12
    4dd4:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
    4dd8:	0600682e 	streq	r6, [r0], -lr, lsr #16
    4ddc:	61740000 	cmnvs	r4, r0
    4de0:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    4de4:	00000600 	andeq	r0, r0, r0, lsl #12
    4de8:	02050000 	andeq	r0, r5, #0
    4dec:	080085cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, pc}
    4df0:	0105df03 	tsteq	r5, r3, lsl #30
    4df4:	68822203 	stmvs	r2, {r0, r1, r9, sp}
    4df8:	503f4c3f 	eorspl	r4, pc, pc, lsr ip	; <UNPREDICTABLE>
    4dfc:	0a03334f 	beq	d1b40 <_Min_Stack_Size+0xd1940>
    4e00:	403dd73c 	eorsmi	sp, sp, ip, lsr r7
    4e04:	0402213f 	streq	r2, [r2], #-319	; 0xfffffec1
    4e08:	00010100 	andeq	r0, r1, r0, lsl #2
    4e0c:	86500205 	ldrbhi	r0, [r0], -r5, lsl #4
    4e10:	bc030800 	stclt	8, cr0, [r3], {-0}
    4e14:	16030106 	strne	r0, [r3], -r6, lsl #2
    4e18:	820a0374 	andhi	r0, sl, #116, 6	; 0xd0000001
    4e1c:	4a1b0391 	bmi	6c5c68 <_Min_Stack_Size+0x6c5a68>
    4e20:	00a33e3e 	adceq	r3, r3, lr, lsr lr
    4e24:	03020402 	movweq	r0, #9218	; 0x2402
    4e28:	02006679 	andeq	r6, r0, #126877696	; 0x7900000
    4e2c:	3c060104 	stfccs	f0, [r6], {4}
    4e30:	4a090306 	bmi	245a50 <_Min_Stack_Size+0x245850>
    4e34:	5e200a03 	vmulpl.f32	s0, s0, s6
    4e38:	3f353e4f 	svccc	0x00353e4f
    4e3c:	5c59403d 	mrrcpl	0, 3, r4, r9, cr13
    4e40:	2a03593f 	bcs	db344 <_Min_Stack_Size+0xdb144>
    4e44:	3f033d3c 	svccc	0x00033d3c
    4e48:	4240884a 	submi	r8, r0, #4849664	; 0x4a0000
    4e4c:	01000402 	tsteq	r0, r2, lsl #8
    4e50:	02050001 	andeq	r0, r5, #1
    4e54:	08008750 	stmdaeq	r0, {r4, r6, r8, r9, sl, pc}
    4e58:	0108b003 	tsteq	r8, r3
    4e5c:	4e59304d 	cdpmi	0, 5, cr3, cr9, cr13, {2}
    4e60:	0c034f3e 	stceq	15, cr4, [r3], {62}	; 0x3e
    4e64:	03764c3c 	cmneq	r6, #60, 24	; 0x3c00
    4e68:	0a033c0d 	beq	d3ea4 <_Min_Stack_Size+0xd3ca4>
    4e6c:	306a0858 	rsbcc	r0, sl, r8, asr r8
    4e70:	0b03764e 	bleq	e27b0 <_Min_Stack_Size+0xe25b0>
    4e74:	00120282 	andseq	r0, r2, r2, lsl #5
    4e78:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4e7c:	00000002 	andeq	r0, r0, r2
    4e80:	09e10300 	stmibeq	r1!, {r8, r9}^
    4e84:	32345a01 	eorscc	r5, r4, #4096	; 0x1000
    4e88:	005f5a3f 	subseq	r5, pc, pc, lsr sl	; <UNPREDICTABLE>
    4e8c:	06010402 	streq	r0, [r1], -r2, lsl #8
    4e90:	034c0658 	movteq	r0, #50776	; 0xc658
    4e94:	02003c0c 	andeq	r3, r0, #12, 24	; 0xc00
    4e98:	58060104 	stmdapl	r6, {r2, r8}
    4e9c:	09034c06 	stmdbeq	r3, {r1, r2, sl, fp, lr}
    4ea0:	7b423e2e 	blvc	1094760 <_Min_Stack_Size+0x1094560>
    4ea4:	02883e40 	addeq	r3, r8, #64, 28	; 0x400
    4ea8:	01010008 	tsteq	r1, r8
    4eac:	24020500 	strcs	r0, [r2], #-1280	; 0xfffffb00
    4eb0:	03080088 	movweq	r0, #32904	; 0x8088
    4eb4:	4b010ab5 	blmi	47990 <_Min_Stack_Size+0x47790>
    4eb8:	0b033f31 	bleq	d4b84 <_Min_Stack_Size+0xd4984>
    4ebc:	09034c2e 	stmdbeq	r3, {r1, r2, r3, r5, sl, fp, lr}
    4ec0:	02883e3c 	addeq	r3, r8, #60, 28	; 0x3c0
    4ec4:	01010007 	tsteq	r1, r7
    4ec8:	00020500 	andeq	r0, r2, r0, lsl #10
    4ecc:	03000000 	movweq	r0, #0
    4ed0:	4e010bbe 	vmovmi.16	d17[0], r0
    4ed4:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
    4ed8:	003c0601 	eorseq	r0, ip, r1, lsl #12
    4edc:	3c020402 	cfstrscc	mvf0, [r2], {2}
    4ee0:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    4ee4:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    4ee8:	00210604 	eoreq	r0, r1, r4, lsl #12
    4eec:	3e040402 	cdpcc	4, 0, cr0, cr4, cr2, {0}
    4ef0:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    4ef4:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    4ef8:	06022104 	streq	r2, [r2], -r4, lsl #2
    4efc:	00010100 	andeq	r0, r1, r0, lsl #2
    4f00:	00000205 	andeq	r0, r0, r5, lsl #4
    4f04:	d4030000 	strle	r0, [r3], #-0
    4f08:	0204010b 	andeq	r0, r4, #-1073741822	; 0xc0000002
    4f0c:	4a75fe03 	bmi	1d84720 <_Min_Stack_Size+0x1d84520>
    4f10:	04ba0c03 	ldrteq	r0, [sl], #3075	; 0xc03
    4f14:	0a8c0301 	beq	fe305b20 <BootRAM+0xd2762c1>
    4f18:	02002420 	andeq	r2, r0, #32, 8	; 0x20000000
    4f1c:	3c060104 	stfccs	f0, [r6], {4}
    4f20:	02040200 	andeq	r0, r4, #0, 4
    4f24:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    4f28:	02002004 	andeq	r2, r0, #4
    4f2c:	21060404 	tstcs	r6, r4, lsl #8
    4f30:	02000204 	andeq	r0, r0, #4, 4	; 0x40000000
    4f34:	f5030404 			; <UNDEFINED> instruction: 0xf5030404
    4f38:	01045875 	tsteq	r4, r5, ror r8
    4f3c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    4f40:	3c0a8f03 	stccc	15, cr8, [sl], {3}
    4f44:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    4f48:	00070221 	andeq	r0, r7, r1, lsr #4
    4f4c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4f50:	00000002 	andeq	r0, r0, r2
    4f54:	0bfc0300 	bleq	fff05b5c <BootRAM+0xee762fd>
    4f58:	3e335b01 	vaddcc.f64	d5, d3, d1
    4f5c:	02003235 	andeq	r3, r0, #1342177283	; 0x50000003
    4f60:	3c060104 	stfccs	f0, [r6], {4}
    4f64:	02040200 	andeq	r0, r4, #0, 4
    4f68:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    4f6c:	02002004 	andeq	r2, r0, #4
    4f70:	26060404 	strcs	r0, [r6], -r4, lsl #8
    4f74:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    4f78:	5d4c4e44 	stclpl	14, cr4, [ip, #-272]	; 0xfffffef0
    4f7c:	3c0e0368 	stccc	3, cr0, [lr], {104}	; 0x68
    4f80:	2e0c035d 	mcrcs	3, 0, r0, cr12, cr13, {2}
    4f84:	03446842 	movteq	r6, #18498	; 0x4842
    4f88:	034c3c0a 	movteq	r3, #52234	; 0xcc0a
    4f8c:	87b1580b 	ldrhi	r5, [r1, fp, lsl #16]!
    4f90:	3e6d08a4 	cdpcc	8, 6, cr0, cr13, cr4, {5}
    4f94:	2f820c03 	svccs	0x00820c03
    4f98:	01000d02 	tsteq	r0, r2, lsl #26
    4f9c:	02050001 	andeq	r0, r5, #1
    4fa0:	00000000 	andeq	r0, r0, r0
    4fa4:	010da003 	tsteq	sp, r3
    4fa8:	0200324d 	andeq	r3, r0, #-805306364	; 0xd0000004
    4fac:	3c060104 	stfccs	f0, [r6], {4}
    4fb0:	02040200 	andeq	r0, r4, #0, 4
    4fb4:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    4fb8:	02002004 	andeq	r2, r0, #4
    4fbc:	26060404 	strcs	r0, [r6], -r4, lsl #8
    4fc0:	04020084 	streq	r0, [r2], #-132	; 0xffffff7c
    4fc4:	06ac0601 	strteq	r0, [ip], r1, lsl #12
    4fc8:	6a5f4cb4 	bvs	17d82a0 <_Min_Stack_Size+0x17d80a0>
    4fcc:	4e304f6a 	cdpmi	15, 3, cr4, cr0, cr10, {3}
    4fd0:	5a353030 	bpl	d51098 <_Min_Stack_Size+0xd50e98>
    4fd4:	8219034e 	andshi	r0, r9, #939524097	; 0x38000001
    4fd8:	6c206e03 	stcvs	14, cr6, [r0], #-12
    4fdc:	033c0c03 	teqeq	ip, #768	; 0x300
    4fe0:	02362078 	eorseq	r2, r6, #120	; 0x78
    4fe4:	01010013 	tsteq	r1, r3, lsl r0
    4fe8:	00020500 	andeq	r0, r2, r0, lsl #10
    4fec:	03000000 	movweq	r0, #0
    4ff0:	4b010e85 	blmi	48a0c <_Min_Stack_Size+0x4880c>
    4ff4:	2e09032f 	cdpcs	3, 0, cr0, cr9, cr15, {1}
    4ff8:	034c5c5b 	movteq	r5, #52315	; 0xcc5b
    4ffc:	02212e11 	eoreq	r2, r1, #272	; 0x110
    5000:	01010009 	tsteq	r1, r9
    5004:	00020500 	andeq	r0, r2, r0, lsl #10
    5008:	03000000 	movweq	r0, #0
    500c:	4b010eb3 	blmi	48ae0 <_Min_Stack_Size+0x488e0>
    5010:	04020035 	streq	r0, [r2], #-53	; 0xffffffcb
    5014:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    5018:	596c303e 	stmdbpl	ip!, {r1, r2, r3, r4, r5, ip, sp}^
    501c:	03796908 	cmneq	r9, #8, 18	; 0x20000
    5020:	0234820c 	eorseq	r8, r4, #12, 4	; 0xc0000000
    5024:	0101000d 	tsteq	r1, sp
    5028:	00020500 	andeq	r0, r2, r0, lsl #10
    502c:	03000000 	movweq	r0, #0
    5030:	4b010ee9 	blmi	48bdc <_Min_Stack_Size+0x489dc>
    5034:	0302042f 	movweq	r0, #9263	; 0x242f
    5038:	032e72e7 			; <UNDEFINED> instruction: 0x032e72e7
    503c:	0104ba0c 	tsteq	r4, ip, lsl #20
    5040:	200da403 	andcs	sl, sp, r3, lsl #8
    5044:	764e6b22 	strbvc	r6, [lr], -r2, lsr #22
    5048:	7b085935 	blvc	21b524 <_Min_Stack_Size+0x21b324>
    504c:	c6030204 	strgt	r0, [r3], -r4, lsl #4
    5050:	01048272 	tsteq	r4, r2, ror r2
    5054:	3c0dc403 	cfstrscc	mvf12, [sp], {3}
    5058:	000e0221 	andeq	r0, lr, r1, lsr #4
    505c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5060:	00886c02 	addeq	r6, r8, r2, lsl #24
    5064:	0faf0308 	svceq	0x00af0308
    5068:	3c210301 	stccc	3, cr0, [r1], #-4
    506c:	04ac1603 	strteq	r1, [ip], #1539	; 0x603
    5070:	71dc0302 	bicsvc	r0, ip, r2, lsl #6
    5074:	0301043c 	movweq	r0, #5180	; 0x143c
    5078:	4b900ebe 	blmi	fe408b78 <BootRAM+0xd379319>
    507c:	3c0e033d 	stccc	3, cr0, [lr], {61}	; 0x3d
    5080:	022e1503 	eoreq	r1, lr, #12582912	; 0xc00000
    5084:	01010010 	tsteq	r1, r0, lsl r0
    5088:	00020500 	andeq	r0, r2, r0, lsl #10
    508c:	03000000 	movweq	r0, #0
    5090:	040110a9 	streq	r1, [r1], #-169	; 0xffffff57
    5094:	71990302 	orrsvc	r0, r9, r2, lsl #6
    5098:	0301043c 	movweq	r0, #5180	; 0x143c
    509c:	3d900eec 	ldccc	14, cr0, [r0, #944]	; 0x3b0
    50a0:	0007022f 	andeq	r0, r7, pc, lsr #4
    50a4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    50a8:	0088d802 	addeq	sp, r8, r2, lsl #16
    50ac:	10b40308 	adcsne	r0, r4, r8, lsl #6
    50b0:	13593301 	cmpne	r9, #67108864	; 0x4000000
    50b4:	01000702 	tsteq	r0, r2, lsl #14
    50b8:	02050001 	andeq	r0, r5, #1
    50bc:	080088f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, pc}
    50c0:	0110fe03 	tsteq	r0, r3, lsl #28	; <UNPREDICTABLE>
    50c4:	0b032f3d 	bleq	d0dc0 <_Min_Stack_Size+0xd0bc0>
    50c8:	4c5a302e 	mrrcmi	0, 2, r3, sl, cr14
    50cc:	594b224e 	stmdbpl	fp, {r1, r2, r3, r6, r9, sp}^
    50d0:	766a0859 			; <UNDEFINED> instruction: 0x766a0859
    50d4:	033c7503 	teqeq	ip, #12582912	; 0xc00000
    50d8:	36444a13 			; <UNDEFINED> instruction: 0x36444a13
    50dc:	425a403e 	subsmi	r4, sl, #62	; 0x3e
    50e0:	4e443e3d 	mcrmi	14, 2, r3, cr4, cr13, {1}
    50e4:	820d0331 	andhi	r0, sp, #-1006632960	; 0xc4000000
    50e8:	17022130 	smladxne	r2, r0, r1, r2
    50ec:	00010100 	andeq	r0, r1, r0, lsl #2
    50f0:	00000205 	andeq	r0, r0, r5, lsl #4
    50f4:	ec030000 	stc	0, cr0, [r3], {-0}
    50f8:	40420111 	submi	r0, r2, r1, lsl r1
    50fc:	00070221 	andeq	r0, r7, r1, lsr #4
    5100:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5104:	00000002 	andeq	r0, r0, r2
    5108:	11fb0300 	mvnsne	r0, r0, lsl #6
    510c:	3c140301 	ldccc	3, cr0, [r4], {1}
    5110:	02214030 	eoreq	r4, r1, #48	; 0x30
    5114:	01010007 	tsteq	r1, r7
    5118:	00020500 	andeq	r0, r2, r0, lsl #10
    511c:	03000000 	movweq	r0, #0
    5120:	3101129a 			; <UNDEFINED> instruction: 0x3101129a
    5124:	0006022f 	andeq	r0, r6, pc, lsr #4
    5128:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    512c:	00000002 	andeq	r0, r0, r2
    5130:	12a20300 	adcne	r0, r2, #0, 6
    5134:	02004f01 	andeq	r4, r0, #1, 30
    5138:	3c060104 	stfccs	f0, [r6], {4}
    513c:	02040200 	andeq	r0, r4, #0, 4
    5140:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    5144:	02002004 	andeq	r2, r0, #4
    5148:	22060404 	andcs	r0, r6, #4, 8	; 0x4000000
    514c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    5150:	0008022f 	andeq	r0, r8, pc, lsr #4
    5154:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5158:	008a1002 	addeq	r1, sl, r2
    515c:	14e90308 	strbtne	r0, [r9], #776	; 0x308
    5160:	4e343f01 	cdpmi	15, 3, cr3, cr4, cr1, {0}
    5164:	033e3e4e 	teqeq	lr, #1248	; 0x4e0
    5168:	5c12080b 	ldcpl	8, cr0, [r2], {11}
    516c:	59284b5f 	stmdbpl	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, fp, lr}
    5170:	283d513e 	ldmdacs	sp!, {r1, r2, r3, r4, r5, r8, ip, lr}
    5174:	09034c5c 	stmdbeq	r3, {r2, r3, r4, r6, sl, fp, lr}
    5178:	080a0358 	stmdaeq	sl, {r3, r4, r6, r8, r9}
    517c:	09037666 	stmdbeq	r3, {r1, r2, r5, r6, r9, sl, ip, sp, lr}
    5180:	03bc282e 			; <UNDEFINED> instruction: 0x03bc282e
    5184:	0d033c1a 	stceq	12, cr3, [r3, #-104]	; 0xffffff98
    5188:	09034c58 	stmdbeq	r3, {r3, r4, r6, sl, fp, lr}
    518c:	1b02212e 	blne	8d64c <_Min_Stack_Size+0x8d44c>
    5190:	00010100 	andeq	r0, r1, r0, lsl #2
    5194:	8b600205 	blhi	18059b0 <_Min_Stack_Size+0x18057b0>
    5198:	83030800 	movwhi	r0, #14336	; 0x3800
    519c:	4e3d0117 	mrcmi	1, 1, r0, cr13, cr7, {0}
    51a0:	3c00c003 	stccc	0, cr12, [r0], {3}
    51a4:	03204403 			; <UNDEFINED> instruction: 0x03204403
    51a8:	02003c1f 	andeq	r3, r0, #7936	; 0x1f00
    51ac:	ba060204 	blt	1859c4 <_Min_Stack_Size+0x1857c4>
    51b0:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    51b4:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    51b8:	02006606 	andeq	r6, r0, #6291456	; 0x600000
    51bc:	06660704 	strbteq	r0, [r6], -r4, lsl #14
    51c0:	04900b03 	ldreq	r0, [r0], #2819	; 0xb03
    51c4:	69cf0302 	stmibvs	pc, {r1, r8, r9}^	; <UNPREDICTABLE>
    51c8:	01044b3c 	tsteq	r4, ip, lsr fp
    51cc:	2016b003 	andscs	fp, r6, r3
    51d0:	01040200 	mrseq	r0, R12_usr
    51d4:	00580806 	subseq	r0, r8, r6, lsl #16
    51d8:	58030402 	stmdapl	r3, {r1, sl}
    51dc:	58120306 	ldmdapl	r2, {r1, r2, r8, r9}
    51e0:	01000f02 	tsteq	r0, r2, lsl #30
    51e4:	02050001 	andeq	r0, r5, #1
    51e8:	08008c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, pc}
    51ec:	0117cc03 	tsteq	r7, r3, lsl #24
    51f0:	76580a03 	ldrbvc	r0, [r8], -r3, lsl #20
    51f4:	0006024b 	andeq	r0, r6, fp, asr #4
    51f8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    51fc:	00000002 	andeq	r0, r0, r2
    5200:	17dd0300 	ldrbne	r0, [sp, r0, lsl #6]
    5204:	660a0301 	strvs	r0, [sl], -r1, lsl #6
    5208:	024b766d 	subeq	r7, fp, #114294784	; 0x6d00000
    520c:	01010007 	tsteq	r1, r7
    5210:	64020500 	strvs	r0, [r2], #-1280	; 0xfffffb00
    5214:	0308008c 	movweq	r0, #32908	; 0x808c
    5218:	03011896 	movweq	r1, #6294	; 0x1896
    521c:	5a4c4a11 	bpl	1317a68 <_Min_Stack_Size+0x1317868>
    5220:	1403594c 	strne	r5, [r3], #-2380	; 0xfffff6b4
    5224:	79697408 	stmdbvc	r9!, {r3, sl, ip, sp, lr}^
    5228:	21314e32 	teqcs	r1, r2, lsr lr
    522c:	01001002 	tsteq	r0, r2
    5230:	02050001 	andeq	r0, r5, #1
    5234:	00000000 	andeq	r0, r0, r0
    5238:	0118da03 	tsteq	r8, r3, lsl #20
    523c:	413e5c60 	teqmi	lr, r0, ror #24
    5240:	7a680859 	bvc	1a073ac <_Min_Stack_Size+0x1a071ac>
    5244:	000c023e 	andeq	r0, ip, lr, lsr r2
    5248:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    524c:	00000002 	andeq	r0, r0, r2
    5250:	18fc0300 	ldmne	ip!, {r8, r9}^
    5254:	4b304c01 	blmi	c18260 <_Min_Stack_Size+0xc18060>
    5258:	08022f4c 	stmdaeq	r2, {r2, r3, r6, r8, r9, sl, fp, sp}
    525c:	00010100 	andeq	r0, r1, r0, lsl #2
    5260:	8d0c0205 	sfmhi	f0, 4, [ip, #-20]	; 0xffffffec
    5264:	88030800 	stmdahi	r3, {fp}
    5268:	4b4c0119 	blmi	13056d4 <_Min_Stack_Size+0x13054d4>
    526c:	000a024b 	andeq	r0, sl, fp, asr #4
    5270:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5274:	008d3802 	addeq	r3, sp, r2, lsl #16
    5278:	19900308 	ldmibne	r0, {r3, r8, r9}
    527c:	3d315e01 	ldccc	14, cr5, [r1, #-4]!
    5280:	5d580e03 	ldclpl	14, cr0, [r8, #-12]
    5284:	04020041 	streq	r0, [r2], #-65	; 0xffffffbf
    5288:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    528c:	675b3e5f 			; <UNDEFINED> instruction: 0x675b3e5f
    5290:	313d403d 	teqcc	sp, sp, lsr r0
    5294:	08022130 	stmdaeq	r2, {r4, r5, r8, sp}
    5298:	00010100 	andeq	r0, r1, r0, lsl #2
    529c:	8dc40205 	sfmhi	f0, 2, [r4, #20]
    52a0:	cf030800 	svcgt	0x00030800
    52a4:	3d2f0119 	stfccs	f0, [pc, #-100]!	; 5248 <_Min_Stack_Size+0x5048>
    52a8:	01000702 	tsteq	r0, r2, lsl #14
    52ac:	02050001 	andeq	r0, r5, #1
    52b0:	08008ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, pc}
    52b4:	011a8603 	tsteq	sl, r3, lsl #12
    52b8:	034a1003 	movteq	r1, #40963	; 0xa003
    52bc:	034c2e17 	movteq	r2, #52759	; 0xce17
    52c0:	028200c7 	addeq	r0, r2, #199	; 0xc7
    52c4:	01010006 	tsteq	r1, r6
    52c8:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
    52cc:	0308008e 	movweq	r0, #32910	; 0x808e
    52d0:	3f011bda 	svccc	0x00011bda
    52d4:	03040200 	movweq	r0, #16896	; 0x4200
    52d8:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    52dc:	02009c03 	andeq	r9, r0, #768	; 0x300
    52e0:	3c060104 	stfccs	f0, [r6], {4}
    52e4:	3d3d4106 	ldfccs	f4, [sp, #-24]!	; 0xffffffe8
    52e8:	423c0a03 	eorsmi	r0, ip, #12288	; 0x3000
    52ec:	12023d3d 	andne	r3, r2, #3904	; 0xf40
    52f0:	00010100 	andeq	r0, r1, r0, lsl #2
    52f4:	8e800205 	cdphi	2, 8, cr0, cr0, cr5, {0}
    52f8:	fa030800 	blx	c7300 <_Min_Stack_Size+0xc7100>
    52fc:	1903011b 	stmdbne	r3, {r0, r1, r3, r4, r8}
    5300:	0004022e 	andeq	r0, r4, lr, lsr #4
    5304:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5308:	008e8c02 	addeq	r8, lr, r2, lsl #24
    530c:	1ea80308 	cdpne	3, 10, cr0, cr8, cr8, {0}
    5310:	035e3f01 	cmpeq	lr, #1, 30
    5314:	591d4a0b 	ldmdbpl	sp, {r0, r1, r3, r9, fp, lr}
    5318:	000a024c 	andeq	r0, sl, ip, asr #4
    531c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5320:	00000002 	andeq	r0, r0, r2
    5324:	1ec20300 	cdpne	3, 12, cr0, cr2, cr0, {0}
    5328:	213e4201 	teqcs	lr, r1, lsl #4
    532c:	01000702 	tsteq	r0, r2, lsl #14
    5330:	02050001 	andeq	r0, r5, #1
    5334:	08008ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, pc}
    5338:	011eef03 	tsteq	lr, r3, lsl #30
    533c:	41332f4b 	teqmi	r3, fp, asr #30
    5340:	09034c79 	stmdbeq	r3, {r0, r3, r4, r5, r6, sl, fp, lr}
    5344:	0084bc74 	addeq	fp, r4, r4, ror ip
    5348:	06010402 	streq	r0, [r1], -r2, lsl #8
    534c:	59b406ac 	ldmibpl	r4!, {r2, r3, r5, r7, r9, sl}
    5350:	405e7908 	subsmi	r7, lr, r8, lsl #18
    5354:	03740903 	cmneq	r4, #49152	; 0xc000
    5358:	02212e0d 	eoreq	r2, r1, #13, 28	; 0xd0
    535c:	0101000a 	tsteq	r1, sl
    5360:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    5364:	0308008f 	movweq	r0, #32911	; 0x808f
    5368:	4b011fc6 	blmi	4d288 <_Min_Stack_Size+0x4d088>
    536c:	5c44302f 	mcrrpl	0, 2, r3, r4, cr15
    5370:	00845169 	addeq	r5, r4, r9, ror #2
    5374:	06010402 	streq	r0, [r1], -r2, lsl #8
    5378:	0a0306ac 	beq	c6e30 <_Min_Stack_Size+0xc6c30>
    537c:	03674fac 	cmneq	r7, #172, 30	; 0x2b0
    5380:	0366080a 	cmneq	r6, #655360	; 0xa0000
    5384:	02212e11 	eoreq	r2, r1, #272	; 0x110
    5388:	01010008 	tsteq	r1, r8
    538c:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
    5390:	03080090 	movweq	r0, #32912	; 0x8090
    5394:	59012096 	stmdbpl	r1, {r1, r2, r4, r7, sp}
    5398:	0a033030 	beq	d1460 <_Min_Stack_Size+0xd1260>
    539c:	40405a3c 	submi	r5, r0, ip, lsr sl
    53a0:	580b035e 	stmdapl	fp, {r1, r2, r3, r4, r6, r8, r9}
    53a4:	034c403d 	movteq	r4, #49213	; 0xc03d
    53a8:	84ae580d 	strthi	r5, [lr], #2061	; 0x80d
    53ac:	01040200 	mrseq	r0, R12_usr
    53b0:	b306ac06 	movwlt	sl, #27654	; 0x6c06
    53b4:	66081503 	strvs	r1, [r8], -r3, lsl #10
    53b8:	01000802 	tsteq	r0, r2, lsl #16
    53bc:	02050001 	andeq	r0, r5, #1
    53c0:	00000000 	andeq	r0, r0, r0
    53c4:	0123b503 			; <UNDEFINED> instruction: 0x0123b503
    53c8:	21844e3f 	orrcs	r4, r4, pc, lsr lr
    53cc:	01000802 	tsteq	r0, r2, lsl #16
    53d0:	02050001 	andeq	r0, r5, #1
    53d4:	08009184 	stmdaeq	r0, {r2, r7, r8, ip, pc}
    53d8:	0123c503 			; <UNDEFINED> instruction: 0x0123c503
    53dc:	2f5b4c31 	svccs	0x005b4c31
    53e0:	01000702 	tsteq	r0, r2, lsl #14
    53e4:	02050001 	andeq	r0, r5, #1
    53e8:	00000000 	andeq	r0, r0, r0
    53ec:	0123d603 			; <UNDEFINED> instruction: 0x0123d603
    53f0:	5a5b315b 	bpl	16d1964 <_Min_Stack_Size+0x16d1764>
    53f4:	0c03513e 	stfeqs	f5, [r3], {62}	; 0x3e
    53f8:	4c313082 	ldcmi	0, cr3, [r1], #-520	; 0xfffffdf8
    53fc:	605c3e3e 	subsvs	r3, ip, lr, lsr lr
    5400:	0221305a 	eoreq	r3, r1, #90	; 0x5a
    5404:	01010008 	tsteq	r1, r8
    5408:	00020500 	andeq	r0, r2, r0, lsl #10
    540c:	03000000 	movweq	r0, #0
    5410:	7701249a 			; <UNDEFINED> instruction: 0x7701249a
    5414:	5a777931 	bpl	1de38e0 <_Min_Stack_Size+0x1de36e0>
    5418:	0c03513e 	stfeqs	f5, [r3], {62}	; 0x3e
    541c:	40323082 	eorsmi	r3, r2, r2, lsl #1
    5420:	7542775f 	strbvc	r7, [r2, #-1887]	; 0xfffff8a1
    5424:	21305a31 	teqcs	r0, r1, lsr sl
    5428:	01000802 	tsteq	r0, r2, lsl #16
    542c:	02050001 	andeq	r0, r5, #1
    5430:	00000000 	andeq	r0, r0, r0
    5434:	0124ea03 			; <UNDEFINED> instruction: 0x0124ea03
    5438:	30303284 	eorscc	r3, r0, r4, lsl #5
    543c:	4c4c4d3e 	mcrrmi	13, 3, r4, ip, cr14
    5440:	23671508 	cmncs	r7, #8, 10	; 0x2000000
    5444:	233d2359 	teqcs	sp, #1677721601	; 0x64000001
    5448:	301e433e 	andscc	r4, lr, lr, lsr r3
    544c:	27200d03 	strcs	r0, [r0, -r3, lsl #26]!
    5450:	1503593e 	strne	r5, [r3, #-2366]	; 0xfffff6c2
    5454:	03786608 	cmneq	r8, #8, 12	; 0x800000
    5458:	2130820c 	teqcs	r0, ip, lsl #4
    545c:	01000d02 	tsteq	r0, r2, lsl #26
    5460:	02050001 	andeq	r0, r5, #1
    5464:	00000000 	andeq	r0, r0, r0
    5468:	0125dc03 			; <UNDEFINED> instruction: 0x0125dc03
    546c:	2e170385 	cdpcs	3, 1, cr0, cr7, cr5, {4}
    5470:	dc030204 	sfmle	f0, 4, [r3], {4}
    5474:	0c032e5b 	stceq	14, cr2, [r3], {91}	; 0x5b
    5478:	030104ba 	movweq	r0, #5306	; 0x14ba
    547c:	2220249a 	eorcs	r2, r0, #-1711276032	; 0x9a000000
    5480:	4c4b4d3e 	mcrrmi	13, 3, r4, fp, cr14
    5484:	23671508 	cmncs	r7, #8, 10	; 0x2000000
    5488:	233d2359 	teqcs	sp, #1677721601	; 0x64000001
    548c:	301e433e 	andscc	r4, lr, lr, lsr r3
    5490:	27200c03 	strcs	r0, [r0, -r3, lsl #24]!
    5494:	08594c41 	ldmdaeq	r9, {r0, r6, sl, fp, lr}^
    5498:	3e78697a 			; <UNDEFINED> instruction: 0x3e78697a
    549c:	03020442 	movweq	r0, #9282	; 0x2442
    54a0:	04585b9a 	ldrbeq	r5, [r8], #-2970	; 0xfffff466
    54a4:	24f00301 	ldrbtcs	r0, [r0], #769	; 0x301
    54a8:	1002213c 	andne	r2, r2, ip, lsr r1
    54ac:	00010100 	andeq	r0, r1, r0, lsl #2
    54b0:	00000205 	andeq	r0, r0, r5, lsl #4
    54b4:	dd030000 	stcle	0, cr0, [r3, #-0]
    54b8:	19030126 	stmdbne	r3, {r1, r2, r5, r8}
    54bc:	03020458 	movweq	r0, #9304	; 0x2458
    54c0:	032e5adc 			; <UNDEFINED> instruction: 0x032e5adc
    54c4:	0104ba0c 	tsteq	r4, ip, lsl #20
    54c8:	20259a03 	eorcs	r9, r5, r3, lsl #20
    54cc:	5e4e4b22 	vmlapl.f64	d20, d14, d18
    54d0:	08594c41 	ldmdaeq	r9, {r0, r6, sl, fp, lr}^
    54d4:	3e78697a 			; <UNDEFINED> instruction: 0x3e78697a
    54d8:	03020442 	movweq	r0, #9282	; 0x2442
    54dc:	04585ac2 	ldrbeq	r5, [r8], #-2754	; 0xfffff53e
    54e0:	25c70301 	strbcs	r0, [r7, #769]	; 0x301
    54e4:	0100083c 	tsteq	r0, ip, lsr r8
    54e8:	02050001 	andeq	r0, r5, #1
    54ec:	00000000 	andeq	r0, r0, r0
    54f0:	0127b403 			; <UNDEFINED> instruction: 0x0127b403
    54f4:	04020050 	streq	r0, [r2], #-80	; 0xffffffb0
    54f8:	003c0601 	eorseq	r0, ip, r1, lsl #12
    54fc:	3c020402 	cfstrscc	mvf0, [r2], {2}
    5500:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    5504:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    5508:	00220604 	eoreq	r0, r2, r4, lsl #12
    550c:	30040402 	andcc	r0, r4, r2, lsl #8
    5510:	31404b68 	cmpcc	r0, r8, ror #22
    5514:	06022130 			; <UNDEFINED> instruction: 0x06022130
    5518:	00010100 	andeq	r0, r1, r0, lsl #2
    551c:	91ac0205 			; <UNDEFINED> instruction: 0x91ac0205
    5520:	d9030800 	stmdble	r3, {fp}
    5524:	035a0127 	cmpeq	sl, #-1073741815	; 0xc0000009
    5528:	03943c0d 	orrseq	r3, r4, #3328	; 0xd00
    552c:	0200ba09 	andeq	fp, r0, #36864	; 0x9000
    5530:	4a060104 	bmi	185948 <_Min_Stack_Size+0x185748>
    5534:	cb034106 	blgt	d5954 <_Min_Stack_Size+0xd5754>
    5538:	bc037400 	cfstrslt	mvf7, [r3], {-0}
    553c:	4c4d207f 	mcrrmi	0, 7, r2, sp, cr15
    5540:	903b034e 	eorsls	r0, fp, lr, asr #6
    5544:	95204b03 	strls	r4, [r0, #-2819]!	; 0xfffff4fd
    5548:	3c2e035a 	stccc	3, cr0, [lr], #-360	; 0xfffffe98
    554c:	01001302 	tsteq	r0, r2, lsl #6
    5550:	00020f01 	andeq	r0, r2, r1, lsl #30
    5554:	e2000200 	and	r0, r0, #0, 4
    5558:	02000000 	andeq	r0, r0, #0
    555c:	0d0efb01 	vstreq	d15, [lr, #-4]
    5560:	01010100 	mrseq	r0, (UNDEF: 17)
    5564:	00000001 	andeq	r0, r0, r1
    5568:	01000001 	tsteq	r0, r1
    556c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 54b8 <_Min_Stack_Size+0x52b8>
    5570:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    5574:	76737572 			; <UNDEFINED> instruction: 0x76737572
    5578:	4144542f 	cmpmi	r4, pc, lsr #8
    557c:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    5580:	2f544f49 	svccs	0x00544f49
    5584:	702f534f 	eorvc	r5, pc, pc, asr #6
    5588:	6174726f 	cmnvs	r4, pc, ror #4
    558c:	2f656c62 	svccs	0x00656c62
    5590:	2f434347 	svccs	0x00434347
    5594:	5f4d5241 	svcpl	0x004d5241
    5598:	00334d43 	eorseq	r4, r3, r3, asr #26
    559c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    55a0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    55a4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    55a8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    55ac:	2f62696c 	svccs	0x0062696c
    55b0:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    55b4:	00656e69 	rsbeq	r6, r5, r9, ror #28
    55b8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    55bc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    55c0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    55c4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    55c8:	2f62696c 	svccs	0x0062696c
    55cc:	00737973 	rsbseq	r7, r3, r3, ror r9
    55d0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 551c <_Min_Stack_Size+0x531c>
    55d4:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    55d8:	76737572 			; <UNDEFINED> instruction: 0x76737572
    55dc:	4144542f 	cmpmi	r4, pc, lsr #8
    55e0:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    55e4:	2f544f49 	svccs	0x00544f49
    55e8:	692f534f 	stmdbvs	pc!, {r0, r1, r2, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    55ec:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    55f0:	00006564 	andeq	r6, r0, r4, ror #10
    55f4:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    55f8:	0100632e 	tsteq	r0, lr, lsr #6
    55fc:	6f700000 	svcvs	0x00700000
    5600:	616d7472 	smcvs	55106	; 0xd742
    5604:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
    5608:	00010068 	andeq	r0, r1, r8, rrx
    560c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    5610:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    5614:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5618:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    561c:	00020068 	andeq	r0, r2, r8, rrx
    5620:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    5624:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    5628:	0300682e 	movweq	r6, #2094	; 0x82e
    562c:	72700000 	rsbsvc	r0, r0, #0
    5630:	65646a6f 	strbvs	r6, [r4, #-2671]!	; 0xfffff591
    5634:	682e7366 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
    5638:	00000400 	andeq	r0, r0, r0, lsl #8
    563c:	02050000 	andeq	r0, r5, #0
    5640:	08009278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, pc}
    5644:	0101ae03 	tsteq	r1, r3, lsl #28
    5648:	3d4b3d69 	stclcc	13, cr3, [fp, #-420]	; 0xfffffe5c
    564c:	3d3d3d59 	ldccc	13, cr3, [sp, #-356]!	; 0xfffffe9c
    5650:	02213e3d 	eoreq	r3, r1, #976	; 0x3d0
    5654:	01010007 	tsteq	r1, r7
    5658:	d0020500 	andle	r0, r2, r0, lsl #10
    565c:	03080092 	movweq	r0, #32914	; 0x8092
    5660:	3d0101c0 	stfccs	f0, [r1, #-768]	; 0xfffffd00
    5664:	042f0204 	strteq	r0, [pc], #-516	; 566c <_Min_Stack_Size+0x546c>
    5668:	90090301 	andls	r0, r9, r1, lsl #6
    566c:	01040200 	mrseq	r0, R12_usr
    5670:	03062006 	movweq	r2, #24582	; 0x6006
    5674:	05023c0a 	streq	r3, [r2, #-3082]	; 0xfffff3f6
    5678:	00010100 	andeq	r0, r1, r0, lsl #2
    567c:	93000205 	movwls	r0, #517	; 0x205
    5680:	d9030800 	stmdble	r3, {fp}
    5684:	03130101 	tsteq	r3, #1073741824	; 0x40000000
    5688:	0220080f 	eoreq	r0, r0, #983040	; 0xf0000
    568c:	01010001 	tsteq	r1, r1
    5690:	28020500 	stmdacs	r2, {r8, sl}
    5694:	03080093 	movweq	r0, #32915	; 0x8093
    5698:	130101ed 	movwne	r0, #4589	; 0x11ed
    569c:	02c80c03 	sbceq	r0, r8, #768	; 0x300
    56a0:	01010003 	tsteq	r1, r3
    56a4:	48020500 	stmdami	r2, {r8, sl}
    56a8:	03080093 	movweq	r0, #32915	; 0x8093
    56ac:	03010281 	movweq	r0, #4737	; 0x1281
    56b0:	672e00c4 	strvs	r0, [lr, -r4, asr #1]!
    56b4:	363f316a 	ldrtcc	r3, [pc], -sl, ror #2
    56b8:	0221312f 	eoreq	r3, r1, #-1073741813	; 0xc000000b
    56bc:	01010006 	tsteq	r1, r6
    56c0:	00020500 	andeq	r0, r2, r0, lsl #10
    56c4:	03000000 	movweq	r0, #0
    56c8:	320102e1 	andcc	r0, r1, #268435470	; 0x1000000e
    56cc:	01000402 	tsteq	r0, r2, lsl #8
    56d0:	02050001 	andeq	r0, r5, #1
    56d4:	08009388 	stmdaeq	r0, {r3, r7, r8, r9, ip, pc}
    56d8:	0102e903 	tsteq	r2, r3, lsl #18
    56dc:	d9030204 	stmdble	r3, {r2, r9}
    56e0:	01043c7e 	tsteq	r4, lr, ror ip
    56e4:	9001a903 	andls	sl, r1, r3, lsl #18
    56e8:	02580b03 	subseq	r0, r8, #3072	; 0xc00
    56ec:	01010007 	tsteq	r1, r7
    56f0:	b8020500 	stmdalt	r2, {r8, sl}
    56f4:	03080093 	movweq	r0, #32915	; 0x8093
    56f8:	3e0102fa 	mcrcc	2, 0, r0, cr1, cr10, {7}
    56fc:	03020459 	movweq	r0, #9305	; 0x2459
    5700:	04667ee7 	strbteq	r7, [r6], #-3815	; 0xfffff119
    5704:	019d0301 	orrseq	r0, sp, r1, lsl #6
    5708:	0007023c 	andeq	r0, r7, ip, lsr r2
    570c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5710:	0093f002 	addseq	pc, r3, r2
    5714:	03850308 	orreq	r0, r5, #8, 6	; 0x20000000
    5718:	1e031501 	cfsh32ne	mvfx1, mvfx3, #1
    571c:	02012202 	andeq	r2, r1, #536870912	; 0x20000000
    5720:	01010001 	tsteq	r1, r1
    5724:	38020500 	stmdacc	r2, {r8, sl}
    5728:	03080094 	movweq	r0, #32916	; 0x8094
    572c:	040103aa 	streq	r0, [r1], #-938	; 0xfffffc56
    5730:	7e980302 	cdpvc	3, 9, cr0, cr8, cr2, {0}
    5734:	0301043c 	movweq	r0, #5180	; 0x143c
    5738:	5c9001f0 	ldfpls	f0, [r0], {240}	; 0xf0
    573c:	ae030204 	cdpge	2, 0, cr0, cr3, cr4, {0}
    5740:	0104667e 	tsteq	r4, lr, ror r6
    5744:	3c01d603 	stccc	6, cr13, [r1], {3}
    5748:	01000602 	tsteq	r0, r2, lsl #12
    574c:	02050001 	andeq	r0, r5, #1
    5750:	08009478 	stmdaeq	r0, {r3, r4, r5, r6, sl, ip, pc}
    5754:	0104e903 	tsteq	r4, r3, lsl #18
    5758:	3d2e0b03 	fstmdbxcc	lr!, {d0}	;@ Deprecated
    575c:	023d3d3f 	eorseq	r3, sp, #4032	; 0xfc0
    5760:	0101000c 	tsteq	r1, ip
    5764:	00000138 	andeq	r0, r0, r8, lsr r1
    5768:	00d50002 	sbcseq	r0, r5, r2
    576c:	01020000 	mrseq	r0, (UNDEF: 2)
    5770:	000d0efb 	strdeq	r0, [sp], -fp
    5774:	01010101 	tsteq	r1, r1, lsl #2
    5778:	01000000 	mrseq	r0, (UNDEF: 0)
    577c:	2f010000 	svccs	0x00010000
    5780:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5784:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    5788:	2f767375 	svccs	0x00767375
    578c:	53414454 	movtpl	r4, #5204	; 0x1454
    5790:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    5794:	4f2f544f 	svcmi	0x002f544f
    5798:	6f702f53 	svcvs	0x00702f53
    579c:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
    57a0:	4d2f656c 	cfstr32mi	mvfx6, [pc, #-432]!	; 55f8 <_Min_Stack_Size+0x53f8>
    57a4:	614d6d65 	cmpvs	sp, r5, ror #26
    57a8:	2f00676e 	svccs	0x0000676e
    57ac:	2f727375 	svccs	0x00727375
    57b0:	2f62696c 	svccs	0x0062696c
    57b4:	2f636367 	svccs	0x00636367
    57b8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    57bc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    57c0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    57c4:	2e352f69 	cdpcs	15, 3, cr2, cr5, cr9, {3}
    57c8:	2f312e34 	svccs	0x00312e34
    57cc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    57d0:	00656475 	rsbeq	r6, r5, r5, ror r4
    57d4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    57d8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    57dc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    57e0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    57e4:	2f62696c 	svccs	0x0062696c
    57e8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    57ec:	00656e69 	rsbeq	r6, r5, r9, ror #28
    57f0:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    57f4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    57f8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    57fc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5800:	2f62696c 	svccs	0x0062696c
    5804:	00737973 	rsbseq	r7, r3, r3, ror r9
    5808:	61656800 	cmnvs	r5, r0, lsl #16
    580c:	2e315f70 	mrccs	15, 1, r5, cr1, cr0, {3}
    5810:	00010063 	andeq	r0, r1, r3, rrx
    5814:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5818:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    581c:	00020068 	andeq	r0, r2, r8, rrx
    5820:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    5824:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    5828:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    582c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5830:	00030068 	andeq	r0, r3, r8, rrx
    5834:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    5838:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    583c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    5840:	00000000 	andeq	r0, r0, r0
    5844:	94ac0205 	strtls	r0, [ip], #517	; 0x205
    5848:	c5030800 	strgt	r0, [r3, #-2048]	; 0xfffff800
    584c:	344b0100 	strbcc	r0, [fp], #-256	; 0xffffff00
    5850:	4d305d5b 	ldcmi	13, cr5, [r0, #-364]!	; 0xfffffe94
    5854:	0402006a 	streq	r0, [r2], #-106	; 0xffffff96
    5858:	02008301 	andeq	r8, r0, #67108864	; 0x4000000
    585c:	33650104 	cmncc	r5, #4, 2
    5860:	0c036b67 			; <UNDEFINED> instruction: 0x0c036b67
    5864:	0b02212e 	bleq	8dd24 <_Min_Stack_Size+0x8db24>
    5868:	00010100 	andeq	r0, r1, r0, lsl #2
    586c:	95380205 	ldrls	r0, [r8, #-517]!	; 0xfffffdfb
    5870:	f9030800 			; <UNDEFINED> instruction: 0xf9030800
    5874:	02520100 	subseq	r0, r2, #0, 2
    5878:	01010005 	tsteq	r1, r5
    587c:	00020500 	andeq	r0, r2, r0, lsl #10
    5880:	03000000 	movweq	r0, #0
    5884:	30010185 	andcc	r0, r1, r5, lsl #3
    5888:	0007023d 	andeq	r0, r7, sp, lsr r2
    588c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5890:	00000002 	andeq	r0, r0, r2
    5894:	018c0300 	orreq	r0, ip, r0, lsl #6
    5898:	02592f01 	subseq	r2, r9, #1, 30
    589c:	01010007 	tsteq	r1, r7
    58a0:	000000b7 	strheq	r0, [r0], -r7
    58a4:	00530002 	subseq	r0, r3, r2
    58a8:	01020000 	mrseq	r0, (UNDEF: 2)
    58ac:	000d0efb 	strdeq	r0, [sp], -fp
    58b0:	01010101 	tsteq	r1, r1, lsl #2
    58b4:	01000000 	mrseq	r0, (UNDEF: 0)
    58b8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    58bc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    58c0:	2f2e2e2f 	svccs	0x002e2e2f
    58c4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    58c8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    58cc:	2f2e2e2f 	svccs	0x002e2e2f
    58d0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    58d4:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5738 <_Min_Stack_Size+0x5538>
    58d8:	2f636269 	svccs	0x00636269
    58dc:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    58e0:	2f656e69 	svccs	0x00656e69
    58e4:	006d7261 	rsbeq	r7, sp, r1, ror #4
    58e8:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    58ec:	2d797063 	ldclcs	0, cr7, [r9, #-396]!	; 0xfffffe74
    58f0:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    58f4:	532e6d37 			; <UNDEFINED> instruction: 0x532e6d37
    58f8:	00000100 	andeq	r0, r0, r0, lsl #2
    58fc:	02050000 	andeq	r0, r5, #0
    5900:	08000110 	stmdaeq	r0, {r4, r8}
    5904:	0100df03 	tsteq	r0, r3, lsl #30
    5908:	232f2f24 			; <UNDEFINED> instruction: 0x232f2f24
    590c:	200d0321 	andcs	r0, sp, r1, lsr #6
    5910:	2221e508 	eorcs	lr, r1, #8, 10	; 0x2000000
    5914:	03212321 			; <UNDEFINED> instruction: 0x03212321
    5918:	2183200d 	orrcs	r2, r3, sp
    591c:	21232122 			; <UNDEFINED> instruction: 0x21232122
    5920:	212f2f25 			; <UNDEFINED> instruction: 0x212f2f25
    5924:	21222123 			; <UNDEFINED> instruction: 0x21222123
    5928:	22302f21 	eorscs	r2, r0, #33, 30	; 0x84
    592c:	200a0321 	andcs	r0, sl, r1, lsr #6
    5930:	2e0c0324 	cdpcs	3, 0, cr0, cr12, cr4, {1}
    5934:	03212321 			; <UNDEFINED> instruction: 0x03212321
    5938:	222f200f 	eorcs	r2, pc, #15
    593c:	2121222f 			; <UNDEFINED> instruction: 0x2121222f
    5940:	2f23302f 	svccs	0x0023302f
    5944:	00c0032f 	sbceq	r0, r0, pc, lsr #6
    5948:	21232120 			; <UNDEFINED> instruction: 0x21232120
    594c:	21222f2f 			; <UNDEFINED> instruction: 0x21222f2f
    5950:	21212121 			; <UNDEFINED> instruction: 0x21212121
    5954:	01022423 	tsteq	r2, r3, lsr #8
    5958:	0a010100 	beq	45d60 <_Min_Stack_Size+0x45b60>
    595c:	02000001 	andeq	r0, r0, #1
    5960:	0000c400 	andeq	ip, r0, r0, lsl #8
    5964:	fb010200 	blx	4616e <_Min_Stack_Size+0x45f6e>
    5968:	01000d0e 	tsteq	r0, lr, lsl #26
    596c:	00010101 	andeq	r0, r1, r1, lsl #2
    5970:	00010000 	andeq	r0, r1, r0
    5974:	2e2e0100 	sufcse	f0, f6, f0
    5978:	2f2e2e2f 	svccs	0x002e2e2f
    597c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5980:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5984:	2f2e2e2f 	svccs	0x002e2e2f
    5988:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    598c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 57f0 <_Min_Stack_Size+0x55f0>
    5990:	2f636269 	svccs	0x00636269
    5994:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    5998:	2f00676e 	svccs	0x0000676e
    599c:	2f727375 	svccs	0x00727375
    59a0:	2f62696c 	svccs	0x0062696c
    59a4:	2f636367 	svccs	0x00636367
    59a8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    59ac:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    59b0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    59b4:	2e352f69 	cdpcs	15, 3, cr2, cr5, cr9, {3}
    59b8:	2f312e34 	svccs	0x00312e34
    59bc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    59c0:	00656475 	rsbeq	r6, r5, r5, ror r4
    59c4:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    59c8:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    59cc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    59d0:	41582d62 	cmpmi	r8, r2, ror #26
    59d4:	50317a75 	eorspl	r7, r1, r5, ror sl
    59d8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    59dc:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    59e0:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    59e4:	30322e30 	eorscc	r2, r2, r0, lsr lr
    59e8:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    59ec:	6e2f3732 	mcrvs	7, 1, r3, cr15, cr2, {1}
    59f0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    59f4:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    59f8:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    59fc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5a00:	00006564 	andeq	r6, r0, r4, ror #10
    5a04:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
    5a08:	632e7465 			; <UNDEFINED> instruction: 0x632e7465
    5a0c:	00000100 	andeq	r0, r0, r0, lsl #2
    5a10:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    5a14:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    5a18:	00000200 	andeq	r0, r0, r0, lsl #4
    5a1c:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    5a20:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    5a24:	00000300 	andeq	r0, r0, r0, lsl #6
    5a28:	02050000 	andeq	r0, r5, #0
    5a2c:	080001fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8}
    5a30:	03013003 	movweq	r3, #4099	; 0x1003
    5a34:	9130200a 	teqls	r0, sl
    5a38:	7503362b 	strvc	r3, [r3, #-1579]	; 0xfffff9d5
    5a3c:	2012032e 	andscs	r0, r2, lr, lsr #6
    5a40:	50331b34 	eorspl	r1, r3, r4, lsr fp
    5a44:	22207a03 	eorcs	r7, r0, #12288	; 0x3000
    5a48:	452f2f2f 	strmi	r2, [pc, #-3887]!	; 4b21 <_Min_Stack_Size+0x4921>
    5a4c:	03820903 	orreq	r0, r2, #49152	; 0xc000
    5a50:	0c033c77 	stceq	12, cr3, [r3], {119}	; 0x77
    5a54:	2c221d2e 	stccs	13, cr1, [r2], #-184	; 0xffffff48
    5a58:	3d820b03 	vstrcc	d0, [r2, #12]
    5a5c:	5303322d 	movwpl	r3, #12845	; 0x322d
    5a60:	2077032e 	rsbscs	r0, r7, lr, lsr #6
    5a64:	01000202 	tsteq	r0, r2, lsl #4
    5a68:	00016d01 	andeq	r6, r1, r1, lsl #26
    5a6c:	26000200 	strcs	r0, [r0], -r0, lsl #4
    5a70:	02000001 	andeq	r0, r0, #1
    5a74:	0d0efb01 	vstreq	d15, [lr, #-4]
    5a78:	01010100 	mrseq	r0, (UNDEF: 17)
    5a7c:	00000001 	andeq	r0, r0, r1
    5a80:	01000001 	tsteq	r0, r1
    5a84:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5a88:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5a8c:	2f2e2e2f 	svccs	0x002e2e2f
    5a90:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5a94:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    5a98:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5a9c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5aa0:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    5aa4:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    5aa8:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    5aac:	2f646c69 	svccs	0x00646c69
    5ab0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5ab4:	582d6269 	stmdapl	sp!, {r0, r3, r5, r6, r9, sp, lr}
    5ab8:	317a7541 	cmncc	sl, r1, asr #10
    5abc:	656e2f50 	strbvs	r2, [lr, #-3920]!	; 0xfffff0b0
    5ac0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5ac4:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    5ac8:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    5acc:	30363130 	eorscc	r3, r6, r0, lsr r1
    5ad0:	2f373235 	svccs	0x00373235
    5ad4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5ad8:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 593c <_Min_Stack_Size+0x573c>
    5adc:	2f636269 	svccs	0x00636269
    5ae0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5ae4:	2f656475 	svccs	0x00656475
    5ae8:	00737973 	rsbseq	r7, r3, r3, ror r9
    5aec:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    5af0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5af4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    5af8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    5afc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5b00:	61652d65 	cmnvs	r5, r5, ror #26
    5b04:	352f6962 	strcc	r6, [pc, #-2402]!	; 51aa <_Min_Stack_Size+0x4faa>
    5b08:	312e342e 			; <UNDEFINED> instruction: 0x312e342e
    5b0c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5b10:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5b14:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    5b18:	2f646c69 	svccs	0x00646c69
    5b1c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5b20:	582d6269 	stmdapl	sp!, {r0, r3, r5, r6, r9, sp, lr}
    5b24:	317a7541 	cmncc	sl, r1, asr #10
    5b28:	656e2f50 	strbvs	r2, [lr, #-3920]!	; 0xfffff0b0
    5b2c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5b30:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    5b34:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    5b38:	30363130 	eorscc	r3, r6, r0, lsr r1
    5b3c:	2f373235 	svccs	0x00373235
    5b40:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5b44:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 59a8 <_Min_Stack_Size+0x57a8>
    5b48:	2f636269 	svccs	0x00636269
    5b4c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5b50:	00656475 	rsbeq	r6, r5, r5, ror r4
    5b54:	6e617200 	cdpvs	2, 6, cr7, cr1, cr0, {0}
    5b58:	00632e64 	rsbeq	r2, r3, r4, ror #28
    5b5c:	6c000001 	stcvs	0, cr0, [r0], {1}
    5b60:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    5b64:	00020068 	andeq	r0, r2, r8, rrx
    5b68:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    5b6c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5b70:	00020068 	andeq	r0, r2, r8, rrx
    5b74:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5b78:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    5b7c:	00030068 	andeq	r0, r3, r8, rrx
    5b80:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    5b84:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    5b88:	00000200 	andeq	r0, r0, r0, lsl #4
    5b8c:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    5b90:	682e6269 	stmdavs	lr!, {r0, r3, r5, r6, r9, sp, lr}
    5b94:	00000400 	andeq	r0, r0, r0, lsl #8
    5b98:	02050000 	andeq	r0, r5, #0
    5b9c:	08000298 	stmdaeq	r0, {r3, r4, r7, r9}
    5ba0:	0100c903 	tsteq	r0, r3, lsl #18
    5ba4:	22211f2f 	eorcs	r1, r1, #47, 30	; 0xbc
    5ba8:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    5bac:	02005701 	andeq	r5, r0, #262144	; 0x40000
    5bb0:	75080104 	strvc	r0, [r8, #-260]	; 0xfffffefc
    5bb4:	01040200 	mrseq	r0, R12_usr
    5bb8:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    5bbc:	2f6b7501 	svccs	0x006b7501
    5bc0:	31210833 			; <UNDEFINED> instruction: 0x31210833
    5bc4:	01040200 	mrseq	r0, R12_usr
    5bc8:	0402002a 	streq	r0, [r2], #-42	; 0xffffffd6
    5bcc:	13250201 			; <UNDEFINED> instruction: 0x13250201
    5bd0:	01040200 	mrseq	r0, R12_usr
    5bd4:	000f0231 	andeq	r0, pc, r1, lsr r2	; <UNPREDICTABLE>
    5bd8:	01ef0101 	mvneq	r0, r1, lsl #2
    5bdc:	00020000 	andeq	r0, r2, r0
    5be0:	0000014d 	andeq	r0, r0, sp, asr #2
    5be4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5be8:	0101000d 	tsteq	r1, sp
    5bec:	00000101 	andeq	r0, r0, r1, lsl #2
    5bf0:	00000100 	andeq	r0, r0, r0, lsl #2
    5bf4:	2f2e2e01 	svccs	0x002e2e01
    5bf8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5bfc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5c00:	2f2e2e2f 	svccs	0x002e2e2f
    5c04:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    5c08:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5c0c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5c10:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    5c14:	6f696474 	svcvs	0x00696474
    5c18:	73752f00 	cmnvc	r5, #0, 30
    5c1c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    5c20:	63672f62 	cmnvs	r7, #392	; 0x188
    5c24:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    5c28:	6f6e2d6d 	svcvs	0x006e2d6d
    5c2c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5c30:	2f696261 	svccs	0x00696261
    5c34:	2e342e35 	mrccs	14, 1, r2, cr4, cr5, {1}
    5c38:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    5c3c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5c40:	622f0065 	eorvs	r0, pc, #101	; 0x65
    5c44:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    5c48:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5c4c:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    5c50:	7a754158 	bvc	1d561b8 <_Min_Stack_Size+0x1d55fb8>
    5c54:	6e2f5031 	mcrvs	0, 1, r5, cr15, cr1, {1}
    5c58:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5c5c:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    5c60:	2e302e34 	mrccs	14, 1, r2, cr0, cr4, {1}
    5c64:	36313032 			; <UNDEFINED> instruction: 0x36313032
    5c68:	37323530 			; <UNDEFINED> instruction: 0x37323530
    5c6c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5c70:	2f62696c 	svccs	0x0062696c
    5c74:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5c78:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5c7c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5c80:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    5c84:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    5c88:	2f646c69 	svccs	0x00646c69
    5c8c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5c90:	582d6269 	stmdapl	sp!, {r0, r3, r5, r6, r9, sp, lr}
    5c94:	317a7541 	cmncc	sl, r1, asr #10
    5c98:	656e2f50 	strbvs	r2, [lr, #-3920]!	; 0xfffff0b0
    5c9c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5ca0:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    5ca4:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    5ca8:	30363130 	eorscc	r3, r6, r0, lsr r1
    5cac:	2f373235 	svccs	0x00373235
    5cb0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5cb4:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5b18 <_Min_Stack_Size+0x5918>
    5cb8:	2f636269 	svccs	0x00636269
    5cbc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5cc0:	00656475 	rsbeq	r6, r5, r5, ror r4
    5cc4:	706e7300 	rsbvc	r7, lr, r0, lsl #6
    5cc8:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    5ccc:	00632e66 	rsbeq	r2, r3, r6, ror #28
    5cd0:	73000001 	movwvc	r0, #1
    5cd4:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    5cd8:	00682e66 	rsbeq	r2, r8, r6, ror #28
    5cdc:	6c000002 	stcvs	0, cr0, [r0], {2}
    5ce0:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    5ce4:	00030068 	andeq	r0, r3, r8, rrx
    5ce8:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    5cec:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5cf0:	00030068 	andeq	r0, r3, r8, rrx
    5cf4:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    5cf8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    5cfc:	00000300 	andeq	r0, r0, r0, lsl #6
    5d00:	61647473 	smcvs	18243	; 0x4743
    5d04:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    5d08:	00000200 	andeq	r0, r0, r0, lsl #4
    5d0c:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    5d10:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    5d14:	00003e6e 	andeq	r3, r0, lr, ror #28
    5d18:	74730000 	ldrbtvc	r0, [r3], #-0
    5d1c:	2e6f6964 	vnmulcs.f16	s13, s30, s9	; <UNPREDICTABLE>
    5d20:	00040068 	andeq	r0, r4, r8, rrx
    5d24:	636f6c00 	cmnvs	pc, #0, 24
    5d28:	682e6c61 	stmdavs	lr!, {r0, r5, r6, sl, fp, sp, lr}
    5d2c:	00000100 	andeq	r0, r0, r0, lsl #2
    5d30:	02050000 	andeq	r0, r5, #0
    5d34:	0800039c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9}
    5d38:	33012e03 	movwcc	r2, #7683	; 0x1e03
    5d3c:	4b25251b 	blmi	94f1b0 <_Min_Stack_Size+0x94efb0>
    5d40:	1d30312d 	ldfnes	f3, [r0, #-180]!	; 0xffffff4c
    5d44:	01040200 	mrseq	r0, R12_usr
    5d48:	02002006 	andeq	r2, r0, #6
    5d4c:	27060104 	strcs	r0, [r6, -r4, lsl #2]
    5d50:	01040200 	mrseq	r0, R12_usr
    5d54:	003c7903 	eorseq	r7, ip, r3, lsl #18
    5d58:	2f010402 	svccs	0x00010402
    5d5c:	01040200 	mrseq	r0, R12_usr
    5d60:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    5d64:	02002401 	andeq	r2, r0, #16777216	; 0x1000000
    5d68:	31300104 	teqcc	r0, r4, lsl #2
    5d6c:	5879033e 	ldmdapl	r9!, {r1, r2, r3, r4, r5, r8, r9}^
    5d70:	2f3c7903 	svccs	0x003c7903
    5d74:	33302430 	teqcc	r0, #48, 8	; 0x30000000
    5d78:	6d035c54 	stcvs	12, cr5, [r3, #-336]	; 0xfffffeb0
    5d7c:	29032f58 	stmdbcs	r3, {r3, r4, r6, r8, r9, sl, fp, sp}
    5d80:	0322323c 			; <UNDEFINED> instruction: 0x0322323c
    5d84:	2224207a 	eorcs	r2, r4, #122	; 0x7a
    5d88:	312d3d25 			; <UNDEFINED> instruction: 0x312d3d25
    5d8c:	02001d30 	andeq	r1, r0, #48, 26	; 0xc00
    5d90:	20060104 	andcs	r0, r6, r4, lsl #2
    5d94:	01040200 	mrseq	r0, R12_usr
    5d98:	02002706 	andeq	r2, r0, #1572864	; 0x180000
    5d9c:	79030104 	stmdbvc	r3, {r2, r8}
    5da0:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    5da4:	02002f01 	andeq	r2, r0, #1, 30
    5da8:	00300104 	eorseq	r0, r0, r4, lsl #2
    5dac:	24010402 	strcs	r0, [r1], #-1026	; 0xfffffbfe
    5db0:	01040200 	mrseq	r0, R12_usr
    5db4:	033e3130 	teqeq	lr, #48, 2
    5db8:	79035879 	stmdbvc	r3, {r0, r3, r4, r5, r6, fp, ip, lr}
    5dbc:	24302f4a 	ldrtcs	r2, [r0], #-3914	; 0xfffff0b6
    5dc0:	5c543330 	mrrcpl	3, 3, r3, r4, cr0
    5dc4:	2f586d03 	svccs	0x00586d03
    5dc8:	01000602 	tsteq	r0, r2, lsl #12
    5dcc:	0000d601 	andeq	sp, r0, r1, lsl #12
    5dd0:	8f000200 	svchi	0x00000200
    5dd4:	02000000 	andeq	r0, r0, #0
    5dd8:	0d0efb01 	vstreq	d15, [lr, #-4]
    5ddc:	01010100 	mrseq	r0, (UNDEF: 17)
    5de0:	00000001 	andeq	r0, r0, r1
    5de4:	01000001 	tsteq	r0, r1
    5de8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5dec:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5df0:	2f2e2e2f 	svccs	0x002e2e2f
    5df4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5df8:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    5dfc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5e00:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5e04:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    5e08:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    5e0c:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    5e10:	2f646c69 	svccs	0x00646c69
    5e14:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5e18:	582d6269 	stmdapl	sp!, {r0, r3, r5, r6, r9, sp, lr}
    5e1c:	317a7541 	cmncc	sl, r1, asr #10
    5e20:	656e2f50 	strbvs	r2, [lr, #-3920]!	; 0xfffff0b0
    5e24:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5e28:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    5e2c:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    5e30:	30363130 	eorscc	r3, r6, r0, lsr r1
    5e34:	2f373235 	svccs	0x00373235
    5e38:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5e3c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5ca0 <_Min_Stack_Size+0x5aa0>
    5e40:	2f636269 	svccs	0x00636269
    5e44:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5e48:	00656475 	rsbeq	r6, r5, r5, ror r4
    5e4c:	72747300 	rsbsvc	r7, r4, #0, 6
    5e50:	2e726863 	cdpcs	8, 7, cr6, cr2, cr3, {3}
    5e54:	00010063 	andeq	r0, r1, r3, rrx
    5e58:	72747300 	rsbsvc	r7, r4, #0, 6
    5e5c:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    5e60:	00020068 	andeq	r0, r2, r8, rrx
    5e64:	05000000 	streq	r0, [r0, #-0]
    5e68:	0004c002 	andeq	ip, r4, r2
    5e6c:	013f0308 	teqeq	pc, r8, lsl #6
    5e70:	03200903 			; <UNDEFINED> instruction: 0x03200903
    5e74:	3e303c14 	mrccc	12, 1, r3, cr0, cr4, {0}
    5e78:	262a4c48 	strtcs	r4, [sl], -r8, asr #24
    5e7c:	03207a03 			; <UNDEFINED> instruction: 0x03207a03
    5e80:	1d4d200b 	stclne	0, cr2, [sp, #-44]	; 0xffffffd4
    5e84:	f20b033f 	vcge.s8	d0, d11, d31
    5e88:	2e500395 	mrccs	3, 2, r0, cr0, cr5, {4}
    5e8c:	1c248e30 	stcne	14, cr8, [r4], #-192	; 0xffffff40
    5e90:	03160828 	tsteq	r6, #40, 16	; 0x280000
    5e94:	65037424 	strvs	r7, [r3, #-1060]	; 0xfffffbdc
    5e98:	201b032e 	andscs	r0, fp, lr, lsr #6
    5e9c:	032e6503 			; <UNDEFINED> instruction: 0x032e6503
    5ea0:	0202201b 	andeq	r2, r2, #27
    5ea4:	ad010100 	stfges	f0, [r1, #-0]
    5ea8:	02000000 	andeq	r0, r0, #0
    5eac:	00009700 	andeq	r9, r0, r0, lsl #14
    5eb0:	fb010200 	blx	466ba <_Min_Stack_Size+0x464ba>
    5eb4:	01000d0e 	tsteq	r0, lr, lsl #26
    5eb8:	00010101 	andeq	r0, r1, r1, lsl #2
    5ebc:	00010000 	andeq	r0, r1, r0
    5ec0:	2e2e0100 	sufcse	f0, f6, f0
    5ec4:	2f2e2e2f 	svccs	0x002e2e2f
    5ec8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5ecc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5ed0:	2f2e2e2f 	svccs	0x002e2e2f
    5ed4:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    5ed8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5edc:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5ee0:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 5d60 <_Min_Stack_Size+0x5b60>
    5ee4:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    5ee8:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    5eec:	2f006d72 	svccs	0x00006d72
    5ef0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5ef4:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    5ef8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5efc:	7541582d 	strbvc	r5, [r1, #-2093]	; 0xfffff7d3
    5f00:	2f50317a 	svccs	0x0050317a
    5f04:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5f08:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    5f0c:	302e342e 	eorcc	r3, lr, lr, lsr #8
    5f10:	3130322e 	teqcc	r0, lr, lsr #4
    5f14:	32353036 	eorscc	r3, r5, #54	; 0x36
    5f18:	656e2f37 	strbvs	r2, [lr, #-3895]!	; 0xfffff0c9
    5f1c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5f20:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5f24:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    5f28:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5f2c:	73000065 	movwvc	r0, #101	; 0x65
    5f30:	70637274 	rsbvc	r7, r3, r4, ror r2
    5f34:	00632e79 	rsbeq	r2, r3, r9, ror lr
    5f38:	73000001 	movwvc	r0, #1
    5f3c:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    5f40:	00682e67 	rsbeq	r2, r8, r7, ror #28
    5f44:	00000002 	andeq	r0, r0, r2
    5f48:	90020500 	andls	r0, r2, r0, lsl #10
    5f4c:	03080005 	movweq	r0, #32773	; 0x8005
    5f50:	0213012a 	andseq	r0, r3, #-2147483638	; 0x8000000a
    5f54:	0101005d 	qaddeq	r0, sp, r1
    5f58:	000000e7 	andeq	r0, r0, r7, ror #1
    5f5c:	00d10002 	sbcseq	r0, r1, r2
    5f60:	01020000 	mrseq	r0, (UNDEF: 2)
    5f64:	000d0efb 	strdeq	r0, [sp], -fp
    5f68:	01010101 	tsteq	r1, r1, lsl #2
    5f6c:	01000000 	mrseq	r0, (UNDEF: 0)
    5f70:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    5f74:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5f78:	2f2e2e2f 	svccs	0x002e2e2f
    5f7c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5f80:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5f84:	2f2e2e2f 	svccs	0x002e2e2f
    5f88:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5f8c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5df0 <_Min_Stack_Size+0x5bf0>
    5f90:	2f636269 	svccs	0x00636269
    5f94:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5f98:	2f656e69 	svccs	0x00656e69
    5f9c:	006d7261 	rsbeq	r7, sp, r1, ror #4
    5fa0:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    5fa4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5fa8:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    5fac:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    5fb0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5fb4:	61652d65 	cmnvs	r5, r5, ror #26
    5fb8:	352f6962 	strcc	r6, [pc, #-2402]!	; 565e <_Min_Stack_Size+0x545e>
    5fbc:	312e342e 			; <UNDEFINED> instruction: 0x312e342e
    5fc0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5fc4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5fc8:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    5fcc:	2f646c69 	svccs	0x00646c69
    5fd0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5fd4:	582d6269 	stmdapl	sp!, {r0, r3, r5, r6, r9, sp, lr}
    5fd8:	317a7541 	cmncc	sl, r1, asr #10
    5fdc:	656e2f50 	strbvs	r2, [lr, #-3920]!	; 0xfffff0b0
    5fe0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5fe4:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    5fe8:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    5fec:	30363130 	eorscc	r3, r6, r0, lsr r1
    5ff0:	2f373235 	svccs	0x00373235
    5ff4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5ff8:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5e5c <_Min_Stack_Size+0x5c5c>
    5ffc:	2f636269 	svccs	0x00636269
    6000:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6004:	00656475 	rsbeq	r6, r5, r5, ror r4
    6008:	72747300 	rsbsvc	r7, r4, #0, 6
    600c:	2d6e656c 	cfstr64cs	mvdx6, [lr, #-432]!	; 0xfffffe50
    6010:	62757473 	rsbsvs	r7, r5, #1929379840	; 0x73000000
    6014:	0100632e 	tsteq	r0, lr, lsr #6
    6018:	74730000 	ldrbtvc	r0, [r3], #-0
    601c:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    6020:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6024:	74730000 	ldrbtvc	r0, [r3], #-0
    6028:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    602c:	0300682e 	movweq	r6, #2094	; 0x82e
    6030:	00000000 	andeq	r0, r0, r0
    6034:	064c0205 	strbeq	r0, [ip], -r5, lsl #4
    6038:	37030800 	strcc	r0, [r3, -r0, lsl #16]
    603c:	2e021301 	cdpcs	3, 0, cr1, cr2, cr1, {0}
    6040:	3d010100 	stfccs	f0, [r1, #-0]
    6044:	02000001 	andeq	r0, r0, #1
    6048:	0000c500 	andeq	ip, r0, r0, lsl #10
    604c:	fb010200 	blx	46856 <_Min_Stack_Size+0x46656>
    6050:	01000d0e 	tsteq	r0, lr, lsl #26
    6054:	00010101 	andeq	r0, r1, r1, lsl #2
    6058:	00010000 	andeq	r0, r1, r0
    605c:	2e2e0100 	sufcse	f0, f6, f0
    6060:	2f2e2e2f 	svccs	0x002e2e2f
    6064:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6068:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    606c:	2f2e2e2f 	svccs	0x002e2e2f
    6070:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6074:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5ed8 <_Min_Stack_Size+0x5cd8>
    6078:	2f636269 	svccs	0x00636269
    607c:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6080:	2f00676e 	svccs	0x0000676e
    6084:	2f727375 	svccs	0x00727375
    6088:	2f62696c 	svccs	0x0062696c
    608c:	2f636367 	svccs	0x00636367
    6090:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6094:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6098:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    609c:	2e352f69 	cdpcs	15, 3, cr2, cr5, cr9, {3}
    60a0:	2f312e34 	svccs	0x00312e34
    60a4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    60a8:	00656475 	rsbeq	r6, r5, r5, ror r4
    60ac:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    60b0:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    60b4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    60b8:	41582d62 	cmpmi	r8, r2, ror #26
    60bc:	50317a75 	eorspl	r7, r1, r5, ror sl
    60c0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    60c4:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    60c8:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    60cc:	30322e30 	eorscc	r2, r2, r0, lsr lr
    60d0:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    60d4:	6e2f3732 	mcrvs	7, 1, r3, cr15, cr2, {1}
    60d8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    60dc:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    60e0:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    60e4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    60e8:	00006564 	andeq	r6, r0, r4, ror #10
    60ec:	6e727473 	mrcvs	4, 3, r7, cr2, cr3, {3}
    60f0:	2e706d63 	cdpcs	13, 7, cr6, cr0, cr3, {3}
    60f4:	00010063 	andeq	r0, r1, r3, rrx
    60f8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    60fc:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    6100:	00020068 	andeq	r0, r2, r8, rrx
    6104:	72747300 	rsbsvc	r7, r4, #0, 6
    6108:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    610c:	00030068 	andeq	r0, r3, r8, rrx
    6110:	05000000 	streq	r0, [r0, #-0]
    6114:	0006a802 	andeq	sl, r6, r2, lsl #16
    6118:	00c10308 	sbceq	r0, r1, r8, lsl #6
    611c:	01120301 	tsteq	r2, r1, lsl #6
    6120:	4a6a0332 	bmi	1a86df0 <_Min_Stack_Size+0x1a86bf0>
    6124:	25201603 	strcs	r1, [r0, #-1539]!	; 0xfffff9fd
    6128:	0402006c 	streq	r0, [r2], #-108	; 0xffffff94
    612c:	ba7a0301 	blt	1e86d38 <_Min_Stack_Size+0x1e86b38>
    6130:	01040200 	mrseq	r0, R12_usr
    6134:	04020042 	streq	r0, [r2], #-66	; 0xffffffbe
    6138:	2e7a0301 	cdpcs	3, 7, cr0, cr10, cr1, {0}
    613c:	01040200 	mrseq	r0, R12_usr
    6140:	04020026 	streq	r0, [r2], #-38	; 0xffffffda
    6144:	2e7a0301 	cdpcs	3, 7, cr0, cr10, cr1, {0}
    6148:	04020026 	streq	r0, [r2], #-38	; 0xffffffda
    614c:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    6150:	033c7a03 	teqeq	ip, #12288	; 0x3000
    6154:	031f200a 	tsteq	pc, #10
    6158:	12033c77 	andne	r3, r3, #30464	; 0x7700
    615c:	02005c20 	andeq	r5, r0, #32, 24	; 0x2000
    6160:	4a060104 	bmi	186578 <_Min_Stack_Size+0x186378>
    6164:	09031c06 	stmdbeq	r3, {r1, r2, sl, fp, ip}
    6168:	5b032274 	blpl	ceb40 <_Min_Stack_Size+0xce940>
    616c:	2025032e 	eorcs	r0, r5, lr, lsr #6
    6170:	03205b03 			; <UNDEFINED> instruction: 0x03205b03
    6174:	5b032025 	blpl	ce210 <_Min_Stack_Size+0xce010>
    6178:	2025032e 	eorcs	r0, r5, lr, lsr #6
    617c:	022e5b03 	eoreq	r5, lr, #3072	; 0xc00
    6180:	01010004 	tsteq	r1, r4
    6184:	00000105 	andeq	r0, r0, r5, lsl #2
    6188:	00c50002 	sbceq	r0, r5, r2
    618c:	01020000 	mrseq	r0, (UNDEF: 2)
    6190:	000d0efb 	strdeq	r0, [sp], -fp
    6194:	01010101 	tsteq	r1, r1, lsl #2
    6198:	01000000 	mrseq	r0, (UNDEF: 0)
    619c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    61a0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    61a4:	2f2e2e2f 	svccs	0x002e2e2f
    61a8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    61ac:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    61b0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    61b4:	2f62696c 	svccs	0x0062696c
    61b8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    61bc:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    61c0:	00676e69 	rsbeq	r6, r7, r9, ror #28
    61c4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    61c8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    61cc:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    61d0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    61d4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    61d8:	61652d65 	cmnvs	r5, r5, ror #26
    61dc:	352f6962 	strcc	r6, [pc, #-2402]!	; 5882 <_Min_Stack_Size+0x5682>
    61e0:	312e342e 			; <UNDEFINED> instruction: 0x312e342e
    61e4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    61e8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    61ec:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    61f0:	2f646c69 	svccs	0x00646c69
    61f4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    61f8:	582d6269 	stmdapl	sp!, {r0, r3, r5, r6, r9, sp, lr}
    61fc:	317a7541 	cmncc	sl, r1, asr #10
    6200:	656e2f50 	strbvs	r2, [lr, #-3920]!	; 0xfffff0b0
    6204:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6208:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    620c:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    6210:	30363130 	eorscc	r3, r6, r0, lsr r1
    6214:	2f373235 	svccs	0x00373235
    6218:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    621c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 6080 <_Min_Stack_Size+0x5e80>
    6220:	2f636269 	svccs	0x00636269
    6224:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6228:	00656475 	rsbeq	r6, r5, r5, ror r4
    622c:	72747300 	rsbsvc	r7, r4, #0, 6
    6230:	7970636e 	ldmdbvc	r0!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    6234:	0100632e 	tsteq	r0, lr, lsr #6
    6238:	74730000 	ldrbtvc	r0, [r3], #-0
    623c:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    6240:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6244:	74730000 	ldrbtvc	r0, [r3], #-0
    6248:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    624c:	0300682e 	movweq	r6, #2094	; 0x82e
    6250:	00000000 	andeq	r0, r0, r0
    6254:	07440205 	strbeq	r0, [r4, -r5, lsl #4]
    6258:	c8030800 	stmdagt	r3, {fp}
    625c:	18030100 	stmdane	r3, {r8}
    6260:	3c680301 	stclcc	3, cr0, [r8], #-4
    6264:	00201803 	eoreq	r1, r0, r3, lsl #16
    6268:	06010402 	streq	r0, [r1], -r2, lsl #8
    626c:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    6270:	925f0601 	subsls	r0, pc, #1048576	; 0x100000
    6274:	0339231e 	teqeq	r9, #2013265920	; 0x78000000
    6278:	1f23200a 	svcne	0x0023200a
    627c:	2d234721 	stccs	7, cr4, [r3, #-132]!	; 0xffffff7c
    6280:	3b2f4e21 	blcc	bd9b0c <_Min_Stack_Size+0xbd990c>
    6284:	2e5d0333 	mrccs	3, 2, r0, cr13, cr3, {1}
    6288:	01000202 	tsteq	r0, r2, lsl #4
    628c:	0000e201 	andeq	lr, r0, r1, lsl #4
    6290:	dc000200 	sfmle	f0, 4, [r0], {-0}
    6294:	02000000 	andeq	r0, r0, #0
    6298:	0d0efb01 	vstreq	d15, [lr, #-4]
    629c:	01010100 	mrseq	r0, (UNDEF: 17)
    62a0:	00000001 	andeq	r0, r0, r1
    62a4:	01000001 	tsteq	r0, r1
    62a8:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    62ac:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    62b0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    62b4:	41582d62 	cmpmi	r8, r2, ror #26
    62b8:	50317a75 	eorspl	r7, r1, r5, ror sl
    62bc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    62c0:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    62c4:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    62c8:	30322e30 	eorscc	r2, r2, r0, lsr lr
    62cc:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    62d0:	6e2f3732 	mcrvs	7, 1, r3, cr15, cr2, {1}
    62d4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    62d8:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    62dc:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    62e0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    62e4:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    62e8:	2f007379 	svccs	0x00007379
    62ec:	2f727375 	svccs	0x00727375
    62f0:	2f62696c 	svccs	0x0062696c
    62f4:	2f636367 	svccs	0x00636367
    62f8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    62fc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6300:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6304:	2e352f69 	cdpcs	15, 3, cr2, cr5, cr9, {3}
    6308:	2f312e34 	svccs	0x00312e34
    630c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6310:	00656475 	rsbeq	r6, r5, r5, ror r4
    6314:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6318:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    631c:	2f2e2e2f 	svccs	0x002e2e2f
    6320:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6324:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    6328:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    632c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6330:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xfffff09d
    6334:	00746e65 	rsbseq	r6, r4, r5, ror #28
    6338:	636f6c00 	cmnvs	pc, #0, 24
    633c:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    6340:	5f000001 	svcpl	0x00000001
    6344:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6348:	00682e73 	rsbeq	r2, r8, r3, ror lr
    634c:	73000001 	movwvc	r0, #1
    6350:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    6354:	00682e66 	rsbeq	r2, r8, r6, ror #28
    6358:	72000002 	andvc	r0, r0, #2
    635c:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    6360:	0100682e 	tsteq	r0, lr, lsr #16
    6364:	6d690000 	stclvs	0, cr0, [r9, #-0]
    6368:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
    636c:	0300632e 	movweq	r6, #814	; 0x32e
    6370:	41000000 	mrsmi	r0, (UNDEF: 0)
    6374:	02000001 	andeq	r0, r0, #1
    6378:	00012800 	andeq	r2, r1, r0, lsl #16
    637c:	fb010200 	blx	46b86 <_Min_Stack_Size+0x46986>
    6380:	01000d0e 	tsteq	r0, lr, lsl #26
    6384:	00010101 	andeq	r0, r1, r1, lsl #2
    6388:	00010000 	andeq	r0, r1, r0
    638c:	2e2e0100 	sufcse	f0, f6, f0
    6390:	2f2e2e2f 	svccs	0x002e2e2f
    6394:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6398:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    639c:	2f2e2e2f 	svccs	0x002e2e2f
    63a0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    63a4:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 6208 <_Min_Stack_Size+0x6008>
    63a8:	2f636269 	svccs	0x00636269
    63ac:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    63b0:	2f006269 	svccs	0x00006269
    63b4:	2f727375 	svccs	0x00727375
    63b8:	2f62696c 	svccs	0x0062696c
    63bc:	2f636367 	svccs	0x00636367
    63c0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    63c4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    63c8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    63cc:	2e352f69 	cdpcs	15, 3, cr2, cr5, cr9, {3}
    63d0:	2f312e34 	svccs	0x00312e34
    63d4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    63d8:	00656475 	rsbeq	r6, r5, r5, ror r4
    63dc:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    63e0:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    63e4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    63e8:	41582d62 	cmpmi	r8, r2, ror #26
    63ec:	50317a75 	eorspl	r7, r1, r5, ror sl
    63f0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    63f4:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    63f8:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    63fc:	30322e30 	eorscc	r2, r2, r0, lsr lr
    6400:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    6404:	6e2f3732 	mcrvs	7, 1, r3, cr15, cr2, {1}
    6408:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    640c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    6410:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    6414:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6418:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    641c:	2f007379 	svccs	0x00007379
    6420:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    6424:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    6428:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    642c:	7541582d 	strbvc	r5, [r1, #-2093]	; 0xfffff7d3
    6430:	2f50317a 	svccs	0x0050317a
    6434:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6438:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    643c:	302e342e 	eorcc	r3, lr, lr, lsr #8
    6440:	3130322e 	teqcc	r0, lr, lsr #4
    6444:	32353036 	eorscc	r3, r5, #54	; 0x36
    6448:	656e2f37 	strbvs	r2, [lr, #-3895]!	; 0xfffff0c9
    644c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6450:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6454:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    6458:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    645c:	6d000065 	stcvs	0, cr0, [r0, #-404]	; 0xfffffe6c
    6460:	6f6c6c61 	svcvs	0x006c6c61
    6464:	00632e63 	rsbeq	r2, r3, r3, ror #28
    6468:	73000001 	movwvc	r0, #1
    646c:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    6470:	00682e66 	rsbeq	r2, r8, r6, ror #28
    6474:	6c000002 	stcvs	0, cr0, [r0], {2}
    6478:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    647c:	00030068 	andeq	r0, r3, r8, rrx
    6480:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    6484:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    6488:	00030068 	andeq	r0, r3, r8, rrx
    648c:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    6490:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6494:	00000300 	andeq	r0, r0, r0, lsl #6
    6498:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    649c:	682e636f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}
    64a0:	00000400 	andeq	r0, r0, r0, lsl #8
    64a4:	02050000 	andeq	r0, r5, #0
    64a8:	080007ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl}
    64ac:	0101d503 	tsteq	r1, r3, lsl #10
    64b0:	02138813 	andseq	r8, r3, #1245184	; 0x130000
    64b4:	01010008 	tsteq	r1, r8
    64b8:	00000147 	andeq	r0, r0, r7, asr #2
    64bc:	00e30002 	rsceq	r0, r3, r2
    64c0:	01020000 	mrseq	r0, (UNDEF: 2)
    64c4:	000d0efb 	strdeq	r0, [sp], -fp
    64c8:	01010101 	tsteq	r1, r1, lsl #2
    64cc:	01000000 	mrseq	r0, (UNDEF: 0)
    64d0:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    64d4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    64d8:	2f2e2e2f 	svccs	0x002e2e2f
    64dc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    64e0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    64e4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    64e8:	2f62696c 	svccs	0x0062696c
    64ec:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    64f0:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    64f4:	0062696c 	rsbeq	r6, r2, ip, ror #18
    64f8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    64fc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6500:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    6504:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    6508:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    650c:	61652d65 	cmnvs	r5, r5, ror #26
    6510:	352f6962 	strcc	r6, [pc, #-2402]!	; 5bb6 <_Min_Stack_Size+0x59b6>
    6514:	312e342e 			; <UNDEFINED> instruction: 0x312e342e
    6518:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    651c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6520:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    6524:	2f646c69 	svccs	0x00646c69
    6528:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    652c:	582d6269 	stmdapl	sp!, {r0, r3, r5, r6, r9, sp, lr}
    6530:	317a7541 	cmncc	sl, r1, asr #10
    6534:	656e2f50 	strbvs	r2, [lr, #-3920]!	; 0xfffff0b0
    6538:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    653c:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    6540:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    6544:	30363130 	eorscc	r3, r6, r0, lsr r1
    6548:	2f373235 	svccs	0x00373235
    654c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6550:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 63b4 <_Min_Stack_Size+0x61b4>
    6554:	2f636269 	svccs	0x00636269
    6558:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    655c:	2f656475 	svccs	0x00656475
    6560:	00737973 	rsbseq	r7, r3, r3, ror r9
    6564:	6e616e00 	cdpvs	14, 6, cr6, cr1, cr0, {0}
    6568:	616d2d6f 	cmnvs	sp, pc, ror #26
    656c:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    6570:	00632e72 	rsbeq	r2, r3, r2, ror lr
    6574:	73000001 	movwvc	r0, #1
    6578:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    657c:	00682e66 	rsbeq	r2, r8, r6, ror #28
    6580:	6c000002 	stcvs	0, cr0, [r0], {2}
    6584:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    6588:	00030068 	andeq	r0, r3, r8, rrx
    658c:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    6590:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    6594:	00030068 	andeq	r0, r3, r8, rrx
    6598:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    659c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    65a0:	00000300 	andeq	r0, r0, r0, lsl #6
    65a4:	02050000 	andeq	r0, r5, #0
    65a8:	080007cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl}
    65ac:	0102d203 	tsteq	r2, r3, lsl #4
    65b0:	7eea0324 	cdpvc	3, 14, cr0, cr10, cr4, {1}
    65b4:	03222c20 			; <UNDEFINED> instruction: 0x03222c20
    65b8:	033c019b 	teqeq	ip, #-1073741786	; 0xc0000026
    65bc:	03303c09 	teqeq	r0, #2304	; 0x900
    65c0:	03224a0a 			; <UNDEFINED> instruction: 0x03224a0a
    65c4:	02002036 	andeq	r2, r0, #54	; 0x36
    65c8:	55030104 	strpl	r0, [r3, #-260]	; 0xfffffefc
    65cc:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    65d0:	02003b02 	andeq	r3, r0, #2048	; 0x800
    65d4:	33210204 			; <UNDEFINED> instruction: 0x33210204
    65d8:	284a0e03 	stmdacs	sl, {r0, r1, r9, sl, fp}^
    65dc:	1c4a1003 	mcrrne	0, 0, r1, sl, cr3
    65e0:	6b032321 	blvs	cf26c <_Min_Stack_Size+0xcf06c>
    65e4:	2e150320 	cdpcs	3, 1, cr0, cr5, cr0, {1}
    65e8:	312e5e03 			; <UNDEFINED> instruction: 0x312e5e03
    65ec:	1f23232b 	svcne	0x0023232b
    65f0:	2e5e032f 	cdpcs	3, 5, cr0, cr14, cr15, {1}
    65f4:	03211f21 			; <UNDEFINED> instruction: 0x03211f21
    65f8:	1f213c31 	svcne	0x00213c31
    65fc:	04022f21 	streq	r2, [r2], #-3873	; 0xfffff0df
    6600:	90010100 	andls	r0, r1, r0, lsl #2
    6604:	02000001 	andeq	r0, r0, #1
    6608:	00012d00 	andeq	r2, r1, r0, lsl #26
    660c:	fb010200 	blx	46e16 <_Min_Stack_Size+0x46c16>
    6610:	01000d0e 	tsteq	r0, lr, lsl #26
    6614:	00010101 	andeq	r0, r1, r1, lsl #2
    6618:	00010000 	andeq	r0, r1, r0
    661c:	2e2e0100 	sufcse	f0, f6, f0
    6620:	2f2e2e2f 	svccs	0x002e2e2f
    6624:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6628:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    662c:	2f2e2e2f 	svccs	0x002e2e2f
    6630:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6634:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 6498 <_Min_Stack_Size+0x6298>
    6638:	2f636269 	svccs	0x00636269
    663c:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    6640:	2f006269 	svccs	0x00006269
    6644:	2f727375 	svccs	0x00727375
    6648:	2f62696c 	svccs	0x0062696c
    664c:	2f636367 	svccs	0x00636367
    6650:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6654:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6658:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    665c:	2e352f69 	cdpcs	15, 3, cr2, cr5, cr9, {3}
    6660:	2f312e34 	svccs	0x00312e34
    6664:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6668:	00656475 	rsbeq	r6, r5, r5, ror r4
    666c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    6670:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    6674:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    6678:	41582d62 	cmpmi	r8, r2, ror #26
    667c:	50317a75 	eorspl	r7, r1, r5, ror sl
    6680:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6684:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    6688:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    668c:	30322e30 	eorscc	r2, r2, r0, lsr lr
    6690:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    6694:	6e2f3732 	mcrvs	7, 1, r3, cr15, cr2, {1}
    6698:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    669c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    66a0:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    66a4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    66a8:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    66ac:	2f007379 	svccs	0x00007379
    66b0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    66b4:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    66b8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    66bc:	7541582d 	strbvc	r5, [r1, #-2093]	; 0xfffff7d3
    66c0:	2f50317a 	svccs	0x0050317a
    66c4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    66c8:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    66cc:	302e342e 	eorcc	r3, lr, lr, lsr #8
    66d0:	3130322e 	teqcc	r0, lr, lsr #4
    66d4:	32353036 	eorscc	r3, r5, #54	; 0x36
    66d8:	656e2f37 	strbvs	r2, [lr, #-3895]!	; 0xfffff0c9
    66dc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    66e0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    66e4:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    66e8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    66ec:	6e000065 	cdpvs	0, 0, cr0, cr0, cr5, {3}
    66f0:	2d6f6e61 	stclcs	14, cr6, [pc, #-388]!	; 6574 <_Min_Stack_Size+0x6374>
    66f4:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    66f8:	2e72636f 	cdpcs	3, 7, cr6, cr2, cr15, {3}
    66fc:	00010063 	andeq	r0, r1, r3, rrx
    6700:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    6704:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    6708:	00020068 	andeq	r0, r2, r8, rrx
    670c:	636f6c00 	cmnvs	pc, #0, 24
    6710:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    6714:	5f000003 	svcpl	0x00000003
    6718:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    671c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6720:	72000003 	andvc	r0, r0, #3
    6724:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    6728:	0300682e 	movweq	r6, #2094	; 0x82e
    672c:	65720000 	ldrbvs	r0, [r2, #-0]!
    6730:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    6734:	00040068 	andeq	r0, r4, r8, rrx
    6738:	05000000 	streq	r0, [r0, #-0]
    673c:	00085802 	andeq	r5, r8, r2, lsl #16
    6740:	01ef0308 	mvneq	r0, r8, lsl #6
    6744:	213e2701 	teqcs	lr, r1, lsl #14
    6748:	2074033e 	rsbscs	r0, r4, lr, lsr r3
    674c:	00200c03 	eoreq	r0, r0, r3, lsl #24
    6750:	06010402 	streq	r0, [r1], -r2, lsl #8
    6754:	31360620 	teqcc	r6, r0, lsr #12
    6758:	213b2122 	teqcs	fp, r2, lsr #2
    675c:	033c1a03 	teqeq	ip, #12288	; 0x3000
    6760:	4f032063 	svcmi	0x00032063
    6764:	314d4c2e 	cmpcc	sp, lr, lsr #24
    6768:	034b323d 	movteq	r3, #45629	; 0xb23d
    676c:	032e00cf 			; <UNDEFINED> instruction: 0x032e00cf
    6770:	21322e59 	teqcs	r2, r9, asr lr
    6774:	20270321 	eorcs	r0, r7, r1, lsr #6
    6778:	41302548 	teqmi	r0, r8, asr #10
    677c:	03205303 			; <UNDEFINED> instruction: 0x03205303
    6780:	5f032e09 	svcpl	0x00032e09
    6784:	0d032f3c 	stceq	15, cr2, [r3, #-240]	; 0xffffff10
    6788:	4a0e032e 	bmi	387448 <_Min_Stack_Size+0x387248>
    678c:	032e7203 			; <UNDEFINED> instruction: 0x032e7203
    6790:	0802584a 	stmdaeq	r2, {r1, r3, r6, fp, ip, lr}
    6794:	19010100 	stmdbne	r1, {r8}
    6798:	02000003 	andeq	r0, r0, #3
    679c:	00018500 	andeq	r8, r1, r0, lsl #10
    67a0:	fb010200 	blx	46faa <_Min_Stack_Size+0x46daa>
    67a4:	01000d0e 	tsteq	r0, lr, lsl #26
    67a8:	00010101 	andeq	r0, r1, r1, lsl #2
    67ac:	00010000 	andeq	r0, r1, r0
    67b0:	2e2e0100 	sufcse	f0, f6, f0
    67b4:	2f2e2e2f 	svccs	0x002e2e2f
    67b8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    67bc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    67c0:	2f2e2e2f 	svccs	0x002e2e2f
    67c4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    67c8:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 662c <_Min_Stack_Size+0x642c>
    67cc:	2f636269 	svccs	0x00636269
    67d0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    67d4:	752f006f 	strvc	r0, [pc, #-111]!	; 676d <_Min_Stack_Size+0x656d>
    67d8:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 6614 <_Min_Stack_Size+0x6414>
    67dc:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    67e0:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    67e4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    67e8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    67ec:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    67f0:	342e352f 	strtcc	r3, [lr], #-1327	; 0xfffffad1
    67f4:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    67f8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    67fc:	2f006564 	svccs	0x00006564
    6800:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    6804:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    6808:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    680c:	7541582d 	strbvc	r5, [r1, #-2093]	; 0xfffff7d3
    6810:	2f50317a 	svccs	0x0050317a
    6814:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6818:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    681c:	302e342e 	eorcc	r3, lr, lr, lsr #8
    6820:	3130322e 	teqcc	r0, lr, lsr #4
    6824:	32353036 	eorscc	r3, r5, #54	; 0x36
    6828:	656e2f37 	strbvs	r2, [lr, #-3895]!	; 0xfffff0c9
    682c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6830:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6834:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    6838:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    683c:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    6840:	622f0073 	eorvs	r0, pc, #115	; 0x73
    6844:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    6848:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    684c:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    6850:	7a754158 	bvc	1d56db8 <_Min_Stack_Size+0x1d56bb8>
    6854:	6e2f5031 	mcrvs	0, 1, r5, cr15, cr1, {1}
    6858:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    685c:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    6860:	2e302e34 	mrccs	14, 1, r2, cr0, cr4, {1}
    6864:	36313032 			; <UNDEFINED> instruction: 0x36313032
    6868:	37323530 			; <UNDEFINED> instruction: 0x37323530
    686c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6870:	2f62696c 	svccs	0x0062696c
    6874:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    6878:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    687c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6880:	616e0000 	cmnvs	lr, r0
    6884:	762d6f6e 	strtvc	r6, [sp], -lr, ror #30
    6888:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    688c:	2e66746e 	cdpcs	4, 6, cr7, cr6, cr14, {3}
    6890:	00010063 	andeq	r0, r1, r3, rrx
    6894:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    6898:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    689c:	00020068 	andeq	r0, r2, r8, rrx
    68a0:	636f6c00 	cmnvs	pc, #0, 24
    68a4:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    68a8:	5f000003 	svcpl	0x00000003
    68ac:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    68b0:	00682e73 	rsbeq	r2, r8, r3, ror lr
    68b4:	72000003 	andvc	r0, r0, #3
    68b8:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    68bc:	0300682e 	movweq	r6, #2094	; 0x82e
    68c0:	74730000 	ldrbtvc	r0, [r3], #-0
    68c4:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    68c8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    68cc:	623c0000 	eorsvs	r0, ip, #0
    68d0:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    68d4:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    68d8:	00000000 	andeq	r0, r0, r0
    68dc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    68e0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    68e4:	66000004 	strvs	r0, [r0], -r4
    68e8:	69727776 	ldmdbvs	r2!, {r1, r2, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
    68ec:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
    68f0:	00000100 	andeq	r0, r0, r0, lsl #2
    68f4:	6f6e616e 	svcvs	0x006e616e
    68f8:	7066762d 	rsbvc	r7, r6, sp, lsr #12
    68fc:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    6900:	6f6c5f66 	svcvs	0x006c5f66
    6904:	2e6c6163 	powcsez	f6, f4, f3
    6908:	00010068 	andeq	r0, r1, r8, rrx
    690c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    6910:	2e62696c 	vnmulcs.f16	s13, s4, s25	; <UNPREDICTABLE>
    6914:	00040068 	andeq	r0, r4, r8, rrx
    6918:	72747300 	rsbsvc	r7, r4, #0, 6
    691c:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    6920:	00040068 	andeq	r0, r4, r8, rrx
    6924:	05000000 	streq	r0, [r0, #-0]
    6928:	00091402 	andeq	r1, r9, r2, lsl #8
    692c:	01b30308 			; <UNDEFINED> instruction: 0x01b30308
    6930:	241d3101 	ldrcs	r3, [sp], #-257	; 0xfffffeff
    6934:	0200321c 	andeq	r3, r0, #28, 4	; 0xc0000001
    6938:	20060104 	andcs	r0, r6, r4, lsl #2
    693c:	4a2e0306 	bmi	b8755c <_Min_Stack_Size+0xb8735c>
    6940:	1f214b30 	svcne	0x00214b30
    6944:	21211f21 			; <UNDEFINED> instruction: 0x21211f21
    6948:	2e5e0337 	mrccs	3, 2, r0, cr14, cr7, {1}
    694c:	36207803 	strtcc	r7, [r0], -r3, lsl #16
    6950:	442e7803 	strtmi	r7, [lr], #-2051	; 0xfffff7fd
    6954:	3d212d2f 	stccc	13, cr2, [r1, #-188]!	; 0xffffff44
    6958:	334b313d 	movtcc	r3, #45373	; 0xb13d
    695c:	033d784b 	teqeq	sp, #4915200	; 0x4b0000
    6960:	2f2b2e0d 	svccs	0x002b2e0d
    6964:	232f1d21 			; <UNDEFINED> instruction: 0x232f1d21
    6968:	4c3c7603 	ldcmi	6, cr7, [ip], #-12
    696c:	213c1303 	teqcs	ip, r3, lsl #6
    6970:	0a033e2d 	beq	d622c <_Min_Stack_Size+0xd602c>
    6974:	2e09033c 	mcrcs	3, 0, r0, cr9, cr12, {1}
    6978:	20207703 	eorcs	r7, r0, r3, lsl #14
    697c:	2b200903 	blcs	808d90 <_Min_Stack_Size+0x808b90>
    6980:	35820b03 	strcc	r0, [r2, #2819]	; 0xb03
    6984:	0200211f 	andeq	r2, r0, #-1073741817	; 0xc0000007
    6988:	2e060104 	adfcss	f0, f6, f4
    698c:	4a0c0306 	bmi	3075ac <_Min_Stack_Size+0x3073ac>
    6990:	28207803 	stmdacs	r0!, {r0, r1, fp, ip, sp, lr}
    6994:	362e7803 	strtcc	r7, [lr], -r3, lsl #16
    6998:	3d211f2f 	stccc	15, cr1, [r1, #-188]!	; 0xffffff44
    699c:	334b313e 	movtcc	r3, #45374	; 0xb13e
    69a0:	74130359 	ldrvc	r0, [r3], #-857	; 0xfffffca7
    69a4:	1d2f2f2b 	stcne	15, cr2, [pc, #-172]!	; 6900 <_Min_Stack_Size+0x6700>
    69a8:	52252321 	eorpl	r2, r5, #-2080374784	; 0x84000000
    69ac:	212e7903 			; <UNDEFINED> instruction: 0x212e7903
    69b0:	0326211f 			; <UNDEFINED> instruction: 0x0326211f
    69b4:	26212079 			; <UNDEFINED> instruction: 0x26212079
    69b8:	2f3c4103 	svccs	0x003c4103
    69bc:	2e330321 	cdpcs	3, 3, cr0, cr3, cr1, {1}
    69c0:	3e3c6e03 	cdpcc	14, 3, cr6, cr12, cr3, {0}
    69c4:	1c034c3f 	stcne	12, cr4, [r3], {63}	; 0x3f
    69c8:	311f213c 	tstcc	pc, ip, lsr r1	; <UNPREDICTABLE>
    69cc:	302f212b 	eorcc	r2, pc, fp, lsr #2
    69d0:	3c7fae03 	ldclcc	14, cr10, [pc], #-12	; 69cc <_Min_Stack_Size+0x67cc>
    69d4:	3c00d203 	sfmcc	f5, 1, [r0], {3}
    69d8:	3c018803 	stccc	8, cr8, [r1], {3}
    69dc:	033c1a03 	teqeq	ip, #12288	; 0x3000
    69e0:	1a032066 	bne	ceb80 <_Min_Stack_Size+0xce980>
    69e4:	20660320 	rsbcs	r0, r6, r0, lsr #6
    69e8:	003c1a03 	eorseq	r1, ip, r3, lsl #20
    69ec:	06010402 	streq	r0, [r1], -r2, lsl #8
    69f0:	0f030620 	svceq	0x00030620
    69f4:	7803424a 	stmdavc	r3, {r1, r3, r6, r9, lr}
    69f8:	2303212e 	movwcs	r2, #12590	; 0x312e
    69fc:	203a0320 	eorscs	r0, sl, r0, lsr #6
    6a00:	2e7fa203 	cdpcs	2, 7, cr10, cr15, cr3, {0}
    6a04:	02003521 	andeq	r3, r0, #138412032	; 0x8400000
    6a08:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
    6a0c:	3e4d063c 	mcrcc	6, 2, r0, cr13, cr12, {1}
    6a10:	301e2283 	andscc	r2, lr, r3, lsl #5
    6a14:	213a2233 	teqcs	sl, r3, lsr r2
    6a18:	1c302122 	ldfnes	f2, [r0], #-136	; 0xffffff78
    6a1c:	1f200e03 	svcne	0x00200e03
    6a20:	02040200 	andeq	r0, r4, #0, 4
    6a24:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    6a28:	2fa16501 	svccs	0x00a16501
    6a2c:	4d2b2451 	cfstrsmi	mvf2, [fp, #-324]!	; 0xfffffebc
    6a30:	01040200 	mrseq	r0, R12_usr
    6a34:	002e1203 	eoreq	r1, lr, r3, lsl #4
    6a38:	06020402 	streq	r0, [r2], -r2, lsl #8
    6a3c:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
    6a40:	002f0602 	eoreq	r0, pc, r2, lsl #12
    6a44:	49020402 	stmdbmi	r2, {r1, sl}
    6a48:	2e14035d 	mrccs	3, 0, r0, cr4, cr13, {2}
    6a4c:	252d835a 	strcs	r8, [sp, #-858]!	; 0xfffffca6
    6a50:	314b3b2f 	cmpcc	fp, pc, lsr #22
    6a54:	2e090332 	mcrcs	3, 0, r0, cr9, cr2, {1}
    6a58:	88033197 	stmdahi	r3, {r0, r1, r2, r4, r7, r8, ip, sp}
    6a5c:	80033c7f 	andhi	r3, r3, pc, ror ip
    6a60:	03675801 	cmneq	r7, #65536	; 0x10000
    6a64:	033c7f82 	teqeq	ip, #520	; 0x208
    6a68:	034a00e5 	movteq	r0, #41189	; 0xa0e5
    6a6c:	0a03745d 	beq	e3be8 <_Min_Stack_Size+0xe39e8>
    6a70:	03212d4a 			; <UNDEFINED> instruction: 0x03212d4a
    6a74:	0a032075 	beq	cec50 <_Min_Stack_Size+0xcea50>
    6a78:	0200212e 	andeq	r2, r0, #-2147483637	; 0x8000000b
    6a7c:	20060204 	andcs	r0, r6, r4, lsl #4
    6a80:	02040200 	andeq	r0, r4, #0, 4
    6a84:	02002f06 	andeq	r2, r0, #6, 30
    6a88:	03490204 	movteq	r0, #37380	; 0x9204
    6a8c:	1f3d6664 	svcne	0x003d6664
    6a90:	03421f21 	movteq	r1, #12065	; 0x2f21
    6a94:	2f1f3c0f 	svccs	0x001f3c0f
    6a98:	3a221f2f 	bcc	88e75c <_Min_Stack_Size+0x88e55c>
    6a9c:	6f031d68 	svcvs	0x00031d68
    6aa0:	212d212e 			; <UNDEFINED> instruction: 0x212d212e
    6aa4:	032e3c03 			; <UNDEFINED> instruction: 0x032e3c03
    6aa8:	599e7efa 	ldmibpl	lr, {r1, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}
    6aac:	023d3925 	eorseq	r3, sp, #606208	; 0x94000
    6ab0:	0101000d 	tsteq	r1, sp
    6ab4:	00000329 	andeq	r0, r0, r9, lsr #6
    6ab8:	01790002 	cmneq	r9, r2
    6abc:	01020000 	mrseq	r0, (UNDEF: 2)
    6ac0:	000d0efb 	strdeq	r0, [sp], -fp
    6ac4:	01010101 	tsteq	r1, r1, lsl #2
    6ac8:	01000000 	mrseq	r0, (UNDEF: 0)
    6acc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    6ad0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6ad4:	2f2e2e2f 	svccs	0x002e2e2f
    6ad8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6adc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6ae0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6ae4:	2f62696c 	svccs	0x0062696c
    6ae8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    6aec:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    6af0:	2f006f69 	svccs	0x00006f69
    6af4:	2f727375 	svccs	0x00727375
    6af8:	2f62696c 	svccs	0x0062696c
    6afc:	2f636367 	svccs	0x00636367
    6b00:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6b04:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6b08:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6b0c:	2e352f69 	cdpcs	15, 3, cr2, cr5, cr9, {3}
    6b10:	2f312e34 	svccs	0x00312e34
    6b14:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6b18:	00656475 	rsbeq	r6, r5, r5, ror r4
    6b1c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    6b20:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    6b24:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    6b28:	41582d62 	cmpmi	r8, r2, ror #26
    6b2c:	50317a75 	eorspl	r7, r1, r5, ror sl
    6b30:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6b34:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    6b38:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    6b3c:	30322e30 	eorscc	r2, r2, r0, lsr lr
    6b40:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    6b44:	6e2f3732 	mcrvs	7, 1, r3, cr15, cr2, {1}
    6b48:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    6b4c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    6b50:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    6b54:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6b58:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    6b5c:	2f007379 	svccs	0x00007379
    6b60:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    6b64:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    6b68:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6b6c:	7541582d 	strbvc	r5, [r1, #-2093]	; 0xfffff7d3
    6b70:	2f50317a 	svccs	0x0050317a
    6b74:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6b78:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    6b7c:	302e342e 	eorcc	r3, lr, lr, lsr #8
    6b80:	3130322e 	teqcc	r0, lr, lsr #4
    6b84:	32353036 	eorscc	r3, r5, #54	; 0x36
    6b88:	656e2f37 	strbvs	r2, [lr, #-3895]!	; 0xfffff0c9
    6b8c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6b90:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6b94:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    6b98:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6b9c:	6e000065 	cdpvs	0, 0, cr0, cr0, cr5, {3}
    6ba0:	2d6f6e61 	stclcs	14, cr6, [pc, #-388]!	; 6a24 <_Min_Stack_Size+0x6824>
    6ba4:	72706676 	rsbsvc	r6, r0, #123731968	; 0x7600000
    6ba8:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    6bac:	632e695f 			; <UNDEFINED> instruction: 0x632e695f
    6bb0:	00000100 	andeq	r0, r0, r0, lsl #2
    6bb4:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    6bb8:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    6bbc:	00000200 	andeq	r0, r0, r0, lsl #4
    6bc0:	6b636f6c 	blvs	18e2978 <_Min_Stack_Size+0x18e2778>
    6bc4:	0300682e 	movweq	r6, #2094	; 0x82e
    6bc8:	745f0000 	ldrbvc	r0, [pc], #-0	; 6bd0 <_Min_Stack_Size+0x69d0>
    6bcc:	73657079 	cmnvc	r5, #121	; 0x79
    6bd0:	0300682e 	movweq	r6, #2094	; 0x82e
    6bd4:	65720000 	ldrbvs	r0, [r2, #-0]!
    6bd8:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    6bdc:	00030068 	andeq	r0, r3, r8, rrx
    6be0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    6be4:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    6be8:	00020068 	andeq	r0, r2, r8, rrx
    6bec:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    6bf0:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    6bf4:	003e6e69 	eorseq	r6, lr, r9, ror #28
    6bf8:	74000000 	strvc	r0, [r0], #-0
    6bfc:	73657079 	cmnvc	r5, #121	; 0x79
    6c00:	0300682e 	movweq	r6, #2094	; 0x82e
    6c04:	74730000 	ldrbtvc	r0, [r3], #-0
    6c08:	2e6f6964 	vnmulcs.f16	s13, s30, s9	; <UNPREDICTABLE>
    6c0c:	00040068 	andeq	r0, r4, r8, rrx
    6c10:	6e616e00 	cdpvs	14, 6, cr6, cr1, cr0, {0}
    6c14:	66762d6f 	ldrbtvs	r2, [r6], -pc, ror #26
    6c18:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    6c1c:	6c5f6674 	mrrcvs	6, 7, r6, pc, cr4	; <UNPREDICTABLE>
    6c20:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    6c24:	0100682e 	tsteq	r0, lr, lsr #16
    6c28:	74730000 	ldrbtvc	r0, [r3], #-0
    6c2c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    6c30:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    6c34:	00000000 	andeq	r0, r0, r0
    6c38:	0d180205 	lfmeq	f0, 4, [r8, #-20]	; 0xffffffec
    6c3c:	36030800 	strcc	r0, [r3], -r0, lsl #16
    6c40:	2e110301 	cdpcs	3, 1, cr0, cr1, cr1, {0}
    6c44:	03206f03 			; <UNDEFINED> instruction: 0x03206f03
    6c48:	6f032011 	svcvs	0x00032011
    6c4c:	20110320 	andscs	r0, r1, r0, lsr #6
    6c50:	2e6e0367 	cdpcs	3, 6, cr0, cr14, cr7, {3}
    6c54:	214a1203 	cmpcs	sl, r3, lsl #4
    6c58:	005b3d3e 	subseq	r3, fp, lr, lsr sp
    6c5c:	59030402 	stmdbpl	r3, {r1, sl}
    6c60:	02008206 	andeq	r8, r0, #1610612736	; 0x60000000
    6c64:	002e0204 	eoreq	r0, lr, r4, lsl #4
    6c68:	66040402 	strvs	r0, [r4], -r2, lsl #8
    6c6c:	90180306 	andsls	r0, r8, r6, lsl #6
    6c70:	5c586b03 	mrrcpl	11, 0, r6, r8, cr3
    6c74:	212d4b30 			; <UNDEFINED> instruction: 0x212d4b30
    6c78:	3a5b764d 	bcc	16e45b4 <_Min_Stack_Size+0x16e43b4>
    6c7c:	0039213e 	eorseq	r2, r9, lr, lsr r1
    6c80:	33020402 	movwcc	r0, #9218	; 0x2402
    6c84:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    6c88:	03062e06 	movweq	r2, #28166	; 0x6e06
    6c8c:	933d9e6a 	teqls	sp, #1696	; 0x6a0
    6c90:	01040200 	mrseq	r0, R12_usr
    6c94:	00660b03 	rsbeq	r0, r6, r3, lsl #22
    6c98:	40010402 	andmi	r0, r1, r2, lsl #8
    6c9c:	01040200 	mrseq	r0, R12_usr
    6ca0:	0402002a 	streq	r0, [r2], #-42	; 0xffffffd6
    6ca4:	3d4d2401 	cfstrdcc	mvd2, [sp, #-4]
    6ca8:	3c0a0352 	stccc	3, cr0, [sl], {82}	; 0x52
    6cac:	03207603 			; <UNDEFINED> instruction: 0x03207603
    6cb0:	7603200a 	strvc	r2, [r3], -sl
    6cb4:	7a034220 	bvc	d753c <_Min_Stack_Size+0xd733c>
    6cb8:	200a032e 	andcs	r0, sl, lr, lsr #6
    6cbc:	03ba1603 			; <UNDEFINED> instruction: 0x03ba1603
    6cc0:	55033c12 	strpl	r3, [r3, #-3090]	; 0xfffff3ee
    6cc4:	2e2b032e 	cdpcs	3, 2, cr0, cr11, cr14, {1}
    6cc8:	02040200 	andeq	r0, r4, #0, 4
    6ccc:	03063c06 	movweq	r3, #27654	; 0x6c06
    6cd0:	20037458 	andcs	r7, r3, r8, asr r4
    6cd4:	2c3f4f9e 	ldccs	15, cr4, [pc], #-632	; 6a64 <_Min_Stack_Size+0x6864>
    6cd8:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    6cdc:	003c0601 	eorseq	r0, ip, r1, lsl #12
    6ce0:	06080402 	streq	r0, [r8], -r2, lsl #8
    6ce4:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    6ce8:	02002108 	andeq	r2, r0, #8, 2
    6cec:	3d4d0804 	stclcc	8, cr0, [sp, #-16]
    6cf0:	26207a03 	strtcs	r7, [r0], -r3, lsl #20
    6cf4:	51594340 	cmppl	r9, r0, asr #6
    6cf8:	01040200 	mrseq	r0, R12_usr
    6cfc:	03062e06 	movweq	r2, #28166	; 0x6e06
    6d00:	033c7fba 	teqeq	ip, #744	; 0x2e8
    6d04:	312000d1 	ldrdcc	r0, [r0, -r1]!
    6d08:	034b223d 	movteq	r2, #45629	; 0xb23d
    6d0c:	03667fa8 	cmneq	r6, #168, 30	; 0x2a0
    6d10:	032000de 			; <UNDEFINED> instruction: 0x032000de
    6d14:	31832e1a 	orrcc	r2, r3, sl, lsl lr
    6d18:	2f1f2176 	svccs	0x001f2176
    6d1c:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    6d20:	58062103 	stmdapl	r6, {r0, r1, r8, sp}
    6d24:	02040200 	andeq	r0, r4, #0, 4
    6d28:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    6d2c:	94065804 	strls	r5, [r6], #-2052	; 0xfffff7fc
    6d30:	033f392f 	teqeq	pc, #770048	; 0xbc000
    6d34:	033c7f80 	teqeq	ip, #128, 30	; 0x200
    6d38:	5203663a 	andpl	r6, r3, #60817408	; 0x3a00000
    6d3c:	202e0320 	eorcs	r0, lr, r0, lsr #6
    6d40:	03205103 			; <UNDEFINED> instruction: 0x03205103
    6d44:	52032e2f 	andpl	r2, r3, #752	; 0x2f0
    6d48:	2e2e0320 	cdpcs	3, 2, cr0, cr14, cr0, {1}
    6d4c:	2e420321 	cdpcs	3, 4, cr0, cr2, cr1, {1}
    6d50:	032e3e03 			; <UNDEFINED> instruction: 0x032e3e03
    6d54:	02002053 	andeq	r2, r0, #83	; 0x53
    6d58:	38030104 	stmdacc	r3, {r2, r8}
    6d5c:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    6d60:	02006901 	andeq	r6, r0, #16384	; 0x4000
    6d64:	001d0104 	andseq	r0, sp, r4, lsl #2
    6d68:	31010402 	tstcc	r1, r2, lsl #8
    6d6c:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
    6d70:	002e0601 	eoreq	r0, lr, r1, lsl #12
    6d74:	3c020402 	cfstrscc	mvf0, [r2], {2}
    6d78:	5b034b06 	blpl	d9998 <_Min_Stack_Size+0xd9798>
    6d7c:	2e540358 	mrccs	3, 2, r0, cr4, cr8, {2}
    6d80:	032e1103 			; <UNDEFINED> instruction: 0x032e1103
    6d84:	03322034 	teqeq	r2, #52	; 0x34
    6d88:	52747fba 	rsbspl	r7, r4, #744	; 0x2e8
    6d8c:	01040200 	mrseq	r0, R12_usr
    6d90:	02006606 	andeq	r6, r0, #6291456	; 0x600000
    6d94:	2f060804 	svccs	0x00060804
    6d98:	032e7403 			; <UNDEFINED> instruction: 0x032e7403
    6d9c:	cf032e11 	svcgt	0x00032e11
    6da0:	1b252e00 	blne	9525a8 <_Min_Stack_Size+0x9523a8>
    6da4:	302f4c41 	eorcc	r4, pc, r1, asr #24
    6da8:	1f1d3d28 	svcne	0x001d3d28
    6dac:	a6031f2f 	strge	r1, [r3], -pc, lsr #30
    6db0:	02003c7f 	andeq	r3, r0, #32512	; 0x7f00
    6db4:	3c060104 	stfccs	f0, [r6], {4}
    6db8:	08040200 	stmdaeq	r4, {r9}
    6dbc:	02004b06 	andeq	r4, r0, #6144	; 0x1800
    6dc0:	6a030804 	bvs	c8dd8 <_Min_Stack_Size+0xc8bd8>
    6dc4:	1f217a20 	svcne	0x00217a20
    6dc8:	02002175 	andeq	r2, r0, #1073741853	; 0x4000001d
    6dcc:	00230204 	eoreq	r0, r3, r4, lsl #4
    6dd0:	03020402 	movweq	r0, #9218	; 0x2402
    6dd4:	c303820a 	movwgt	r8, #12810	; 0x320a
    6dd8:	842fac00 	strthi	sl, [pc], #-3072	; 6de0 <_Min_Stack_Size+0x6be0>
    6ddc:	01000902 	tsteq	r0, r2, lsl #18
    6de0:	00014701 	andeq	r4, r1, r1, lsl #14
    6de4:	25000200 	strcs	r0, [r0, #-512]	; 0xfffffe00
    6de8:	02000001 	andeq	r0, r0, #1
    6dec:	0d0efb01 	vstreq	d15, [lr, #-4]
    6df0:	01010100 	mrseq	r0, (UNDEF: 17)
    6df4:	00000001 	andeq	r0, r0, r1
    6df8:	01000001 	tsteq	r0, r1
    6dfc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6e00:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6e04:	2f2e2e2f 	svccs	0x002e2e2f
    6e08:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6e0c:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    6e10:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6e14:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6e18:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xfffff09d
    6e1c:	00746e65 	rsbseq	r6, r4, r5, ror #28
    6e20:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    6e24:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6e28:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    6e2c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    6e30:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6e34:	61652d65 	cmnvs	r5, r5, ror #26
    6e38:	352f6962 	strcc	r6, [pc, #-2402]!	; 64de <_Min_Stack_Size+0x62de>
    6e3c:	312e342e 			; <UNDEFINED> instruction: 0x312e342e
    6e40:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6e44:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6e48:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    6e4c:	2f646c69 	svccs	0x00646c69
    6e50:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6e54:	582d6269 	stmdapl	sp!, {r0, r3, r5, r6, r9, sp, lr}
    6e58:	317a7541 	cmncc	sl, r1, asr #10
    6e5c:	656e2f50 	strbvs	r2, [lr, #-3920]!	; 0xfffff0b0
    6e60:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6e64:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    6e68:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    6e6c:	30363130 	eorscc	r3, r6, r0, lsr r1
    6e70:	2f373235 	svccs	0x00373235
    6e74:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6e78:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 6cdc <_Min_Stack_Size+0x6adc>
    6e7c:	2f636269 	svccs	0x00636269
    6e80:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6e84:	2f656475 	svccs	0x00656475
    6e88:	00737973 	rsbseq	r7, r3, r3, ror r9
    6e8c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    6e90:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    6e94:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    6e98:	41582d62 	cmpmi	r8, r2, ror #26
    6e9c:	50317a75 	eorspl	r7, r1, r5, ror sl
    6ea0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6ea4:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    6ea8:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    6eac:	30322e30 	eorscc	r2, r2, r0, lsr lr
    6eb0:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    6eb4:	6e2f3732 	mcrvs	7, 1, r3, cr15, cr2, {1}
    6eb8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    6ebc:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    6ec0:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    6ec4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6ec8:	00006564 	andeq	r6, r0, r4, ror #10
    6ecc:	6b726273 	blvs	1c9f8a0 <_Min_Stack_Size+0x1c9f6a0>
    6ed0:	00632e72 	rsbeq	r2, r3, r2, ror lr
    6ed4:	73000001 	movwvc	r0, #1
    6ed8:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    6edc:	00682e66 	rsbeq	r2, r8, r6, ror #28
    6ee0:	6c000002 	stcvs	0, cr0, [r0], {2}
    6ee4:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    6ee8:	00030068 	andeq	r0, r3, r8, rrx
    6eec:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    6ef0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    6ef4:	00030068 	andeq	r0, r3, r8, rrx
    6ef8:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    6efc:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6f00:	00000300 	andeq	r0, r0, r0, lsl #6
    6f04:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    6f08:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6f0c:	00000004 	andeq	r0, r0, r4
    6f10:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    6f14:	03080010 	movweq	r0, #32784	; 0x8010
    6f18:	2a240134 	bcs	9073f0 <_Min_Stack_Size+0x9071f0>
    6f1c:	4d211f25 	stcmi	15, cr1, [r1, #-148]!	; 0xffffff6c
    6f20:	01040200 	mrseq	r0, R12_usr
    6f24:	02223d1d 	eoreq	r3, r2, #1856	; 0x740
    6f28:	01010003 	tsteq	r1, r3
    6f2c:	0000011d 	andeq	r0, r0, sp, lsl r1
    6f30:	00d90002 	sbcseq	r0, r9, r2
    6f34:	01020000 	mrseq	r0, (UNDEF: 2)
    6f38:	000d0efb 	strdeq	r0, [sp], -fp
    6f3c:	01010101 	tsteq	r1, r1, lsl #2
    6f40:	01000000 	mrseq	r0, (UNDEF: 0)
    6f44:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    6f48:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6f4c:	2f2e2e2f 	svccs	0x002e2e2f
    6f50:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6f54:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6f58:	2f2e2e2f 	svccs	0x002e2e2f
    6f5c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6f60:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 6dc4 <_Min_Stack_Size+0x6bc4>
    6f64:	2f636269 	svccs	0x00636269
    6f68:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    6f6c:	2f656e69 	svccs	0x00656e69
    6f70:	2f6d7261 	svccs	0x006d7261
    6f74:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6f78:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xfffff0d2
    6f7c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    6f80:	73752f00 	cmnvc	r5, #0, 30
    6f84:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    6f88:	63672f62 	cmnvs	r7, #392	; 0x188
    6f8c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    6f90:	6f6e2d6d 	svcvs	0x006e2d6d
    6f94:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6f98:	2f696261 	svccs	0x00696261
    6f9c:	2e342e35 	mrccs	14, 1, r2, cr4, cr5, {1}
    6fa0:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    6fa4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6fa8:	622f0065 	eorvs	r0, pc, #101	; 0x65
    6fac:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    6fb0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6fb4:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    6fb8:	7a754158 	bvc	1d57520 <_Min_Stack_Size+0x1d57320>
    6fbc:	6e2f5031 	mcrvs	0, 1, r5, cr15, cr1, {1}
    6fc0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    6fc4:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    6fc8:	2e302e34 	mrccs	14, 1, r2, cr0, cr4, {1}
    6fcc:	36313032 			; <UNDEFINED> instruction: 0x36313032
    6fd0:	37323530 			; <UNDEFINED> instruction: 0x37323530
    6fd4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6fd8:	2f62696c 	svccs	0x0062696c
    6fdc:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    6fe0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6fe4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6fe8:	656d0000 	strbvs	r0, [sp, #-0]!
    6fec:	7268636d 	rsbvc	r6, r8, #-1275068415	; 0xb4000001
    6ff0:	0100632e 	tsteq	r0, lr, lsr #6
    6ff4:	74730000 	ldrbtvc	r0, [r3], #-0
    6ff8:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    6ffc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    7000:	74730000 	ldrbtvc	r0, [r3], #-0
    7004:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    7008:	0300682e 	movweq	r6, #2094	; 0x82e
    700c:	00000000 	andeq	r0, r0, r0
    7010:	11180205 	tstne	r8, r5, lsl #4
    7014:	cb030800 	blgt	c901c <_Min_Stack_Size+0xc8e1c>
    7018:	09030100 	stmdbeq	r3, {r8}
    701c:	20770301 	rsbscs	r0, r7, r1, lsl #6
    7020:	30222722 	eorcc	r2, r2, r2, lsr #14
    7024:	34462256 	strbcc	r2, [r6], #-598	; 0xfffffdaa
    7028:	033c7a03 	teqeq	ip, #12288	; 0x3000
    702c:	20032009 	andcs	r2, r3, r9
    7030:	248e222e 	strcs	r2, [lr], #558	; 0x22e
    7034:	205a0338 	subscs	r0, sl, r8, lsr r3
    7038:	03202e03 			; <UNDEFINED> instruction: 0x03202e03
    703c:	344b3c63 	strbcc	r3, [fp], #-3171	; 0xfffff39d
    7040:	1b251cbc 	blne	94e338 <_Min_Stack_Size+0x94e138>
    7044:	312e6703 			; <UNDEFINED> instruction: 0x312e6703
    7048:	01000202 	tsteq	r0, r2, lsl #4
    704c:	00011901 	andeq	r1, r1, r1, lsl #18
    7050:	c5000200 	strgt	r0, [r0, #-512]	; 0xfffffe00
    7054:	02000000 	andeq	r0, r0, #0
    7058:	0d0efb01 	vstreq	d15, [lr, #-4]
    705c:	01010100 	mrseq	r0, (UNDEF: 17)
    7060:	00000001 	andeq	r0, r0, r1
    7064:	01000001 	tsteq	r0, r1
    7068:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    706c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7070:	2f2e2e2f 	svccs	0x002e2e2f
    7074:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7078:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    707c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    7080:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    7084:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    7088:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    708c:	73752f00 	cmnvc	r5, #0, 30
    7090:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    7094:	63672f62 	cmnvs	r7, #392	; 0x188
    7098:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    709c:	6f6e2d6d 	svcvs	0x006e2d6d
    70a0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    70a4:	2f696261 	svccs	0x00696261
    70a8:	2e342e35 	mrccs	14, 1, r2, cr4, cr5, {1}
    70ac:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    70b0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    70b4:	622f0065 	eorvs	r0, pc, #101	; 0x65
    70b8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    70bc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    70c0:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    70c4:	7a754158 	bvc	1d5762c <_Min_Stack_Size+0x1d5742c>
    70c8:	6e2f5031 	mcrvs	0, 1, r5, cr15, cr1, {1}
    70cc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    70d0:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    70d4:	2e302e34 	mrccs	14, 1, r2, cr0, cr4, {1}
    70d8:	36313032 			; <UNDEFINED> instruction: 0x36313032
    70dc:	37323530 			; <UNDEFINED> instruction: 0x37323530
    70e0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    70e4:	2f62696c 	svccs	0x0062696c
    70e8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    70ec:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    70f0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    70f4:	656d0000 	strbvs	r0, [sp, #-0]!
    70f8:	766f6d6d 	strbtvc	r6, [pc], -sp, ror #26
    70fc:	00632e65 	rsbeq	r2, r3, r5, ror #28
    7100:	73000001 	movwvc	r0, #1
    7104:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    7108:	00682e66 	rsbeq	r2, r8, r6, ror #28
    710c:	73000002 	movwvc	r0, #2
    7110:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    7114:	00682e67 	rsbeq	r2, r8, r7, ror #28
    7118:	00000003 	andeq	r0, r0, r3
    711c:	a4020500 	strge	r0, [r2], #-1280	; 0xfffffb00
    7120:	03080011 	movweq	r0, #32785	; 0x8011
    7124:	1e03013f 	mcrne	1, 0, r0, cr3, cr15, {1}
    7128:	20620301 	rsbcs	r0, r2, r1, lsl #6
    712c:	00201e03 	eoreq	r1, r0, r3, lsl #28
    7130:	06010402 	streq	r0, [r1], -r2, lsl #8
    7134:	21400620 	cmpcs	r0, r0, lsr #12
    7138:	2c222c3e 	stccs	12, cr2, [r2], #-248	; 0xffffff08
    713c:	002e0a03 	eoreq	r0, lr, r3, lsl #20
    7140:	06010402 	streq	r0, [r1], -r2, lsl #8
    7144:	60064a2e 	andvs	r4, r6, lr, lsr #20
    7148:	2b2f1c32 	blcs	bce218 <_Min_Stack_Size+0xbce018>
    714c:	61672f23 	cmnvs	r7, r3, lsr #30
    7150:	53820a03 	orrpl	r0, r2, #12288	; 0x3000
    7154:	1d2f3025 	stcne	0, cr3, [pc, #-148]!	; 70c8 <_Min_Stack_Size+0x6ec8>
    7158:	0b032c22 	bleq	d21e8 <_Min_Stack_Size+0xd1fe8>
    715c:	222c3e9e 	eorcs	r3, ip, #2528	; 0x9e0
    7160:	6d03282c 	stcvs	8, cr2, [r3, #-176]	; 0xffffff50
    7164:	00020266 	andeq	r0, r2, r6, ror #4
    7168:	015a0101 	cmpeq	sl, r1, lsl #2
    716c:	00020000 	andeq	r0, r2, r0
    7170:	0000012e 	andeq	r0, r0, lr, lsr #2
    7174:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    7178:	0101000d 	tsteq	r1, sp
    717c:	00000101 	andeq	r0, r0, r1, lsl #2
    7180:	00000100 	andeq	r0, r0, r0, lsl #2
    7184:	2f2e2e01 	svccs	0x002e2e01
    7188:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    718c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7190:	2f2e2e2f 	svccs	0x002e2e2f
    7194:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    7198:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    719c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    71a0:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    71a4:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    71a8:	752f0062 	strvc	r0, [pc, #-98]!	; 714e <_Min_Stack_Size+0x6f4e>
    71ac:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 6fe8 <_Min_Stack_Size+0x6de8>
    71b0:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    71b4:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    71b8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    71bc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    71c0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    71c4:	342e352f 	strtcc	r3, [lr], #-1327	; 0xfffffad1
    71c8:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    71cc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    71d0:	2f006564 	svccs	0x00006564
    71d4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    71d8:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    71dc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    71e0:	7541582d 	strbvc	r5, [r1, #-2093]	; 0xfffff7d3
    71e4:	2f50317a 	svccs	0x0050317a
    71e8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    71ec:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    71f0:	302e342e 	eorcc	r3, lr, lr, lsr #8
    71f4:	3130322e 	teqcc	r0, lr, lsr #4
    71f8:	32353036 	eorscc	r3, r5, #54	; 0x36
    71fc:	656e2f37 	strbvs	r2, [lr, #-3895]!	; 0xfffff0c9
    7200:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    7204:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    7208:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    720c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7210:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    7214:	622f0073 	eorvs	r0, pc, #115	; 0x73
    7218:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    721c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    7220:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    7224:	7a754158 	bvc	1d5778c <_Min_Stack_Size+0x1d5758c>
    7228:	6e2f5031 	mcrvs	0, 1, r5, cr15, cr1, {1}
    722c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    7230:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    7234:	2e302e34 	mrccs	14, 1, r2, cr0, cr4, {1}
    7238:	36313032 			; <UNDEFINED> instruction: 0x36313032
    723c:	37323530 			; <UNDEFINED> instruction: 0x37323530
    7240:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    7244:	2f62696c 	svccs	0x0062696c
    7248:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    724c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    7250:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7254:	616e0000 	cmnvs	lr, r0
    7258:	6d2d6f6e 	stcvs	15, cr6, [sp, #-440]!	; 0xfffffe48
    725c:	6f6c6c61 	svcvs	0x006c6c61
    7260:	632e7263 			; <UNDEFINED> instruction: 0x632e7263
    7264:	00000100 	andeq	r0, r0, r0, lsl #2
    7268:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    726c:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    7270:	00000200 	andeq	r0, r0, r0, lsl #4
    7274:	6b636f6c 	blvs	18e302c <_Min_Stack_Size+0x18e2e2c>
    7278:	0300682e 	movweq	r6, #2094	; 0x82e
    727c:	745f0000 	ldrbvc	r0, [pc], #-0	; 7284 <_Min_Stack_Size+0x7084>
    7280:	73657079 	cmnvc	r5, #121	; 0x79
    7284:	0300682e 	movweq	r6, #2094	; 0x82e
    7288:	65720000 	ldrbvs	r0, [r2, #-0]!
    728c:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    7290:	00030068 	andeq	r0, r3, r8, rrx
    7294:	72747300 	rsbsvc	r7, r4, #0, 6
    7298:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    729c:	00040068 	andeq	r0, r4, r8, rrx
    72a0:	05000000 	streq	r0, [r0, #-0]
    72a4:	00126c02 	andseq	r6, r2, r2, lsl #24
    72a8:	03c10308 	biceq	r0, r1, #8, 6	; 0x20000000
    72ac:	421c1601 	andsmi	r1, ip, #1048576	; 0x100000
    72b0:	304b6936 	subcc	r6, fp, r6, lsr r9
    72b4:	6673034b 	ldrbtvs	r0, [r3], -fp, asr #6
    72b8:	2e0f032f 	cdpcs	3, 0, cr0, cr15, cr15, {1}
    72bc:	01040200 	mrseq	r0, R12_usr
    72c0:	02206c03 	eoreq	r6, r0, #768	; 0x300
    72c4:	01010003 	tsteq	r1, r3
    72c8:	00000175 	andeq	r0, r0, r5, ror r1
    72cc:	01260002 			; <UNDEFINED> instruction: 0x01260002
    72d0:	01020000 	mrseq	r0, (UNDEF: 2)
    72d4:	000d0efb 	strdeq	r0, [sp], -fp
    72d8:	01010101 	tsteq	r1, r1, lsl #2
    72dc:	01000000 	mrseq	r0, (UNDEF: 0)
    72e0:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    72e4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    72e8:	2f2e2e2f 	svccs	0x002e2e2f
    72ec:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    72f0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    72f4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    72f8:	2f62696c 	svccs	0x0062696c
    72fc:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    7300:	6565722f 	strbvs	r7, [r5, #-559]!	; 0xfffffdd1
    7304:	2f00746e 	svccs	0x0000746e
    7308:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    730c:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    7310:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    7314:	7541582d 	strbvc	r5, [r1, #-2093]	; 0xfffff7d3
    7318:	2f50317a 	svccs	0x0050317a
    731c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    7320:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    7324:	302e342e 	eorcc	r3, lr, lr, lsr #8
    7328:	3130322e 	teqcc	r0, lr, lsr #4
    732c:	32353036 	eorscc	r3, r5, #54	; 0x36
    7330:	656e2f37 	strbvs	r2, [lr, #-3895]!	; 0xfffff0c9
    7334:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    7338:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    733c:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    7340:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7344:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    7348:	752f0073 	strvc	r0, [pc, #-115]!	; 72dd <_Min_Stack_Size+0x70dd>
    734c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 7188 <_Min_Stack_Size+0x6f88>
    7350:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    7354:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    7358:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    735c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7360:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7364:	342e352f 	strtcc	r3, [lr], #-1327	; 0xfffffad1
    7368:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    736c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7370:	2f006564 	svccs	0x00006564
    7374:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    7378:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    737c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    7380:	7541582d 	strbvc	r5, [r1, #-2093]	; 0xfffff7d3
    7384:	2f50317a 	svccs	0x0050317a
    7388:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    738c:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    7390:	302e342e 	eorcc	r3, lr, lr, lsr #8
    7394:	3130322e 	teqcc	r0, lr, lsr #4
    7398:	32353036 	eorscc	r3, r5, #54	; 0x36
    739c:	656e2f37 	strbvs	r2, [lr, #-3895]!	; 0xfffff0c9
    73a0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    73a4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    73a8:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    73ac:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    73b0:	72000065 	andvc	r0, r0, #101	; 0x65
    73b4:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    73b8:	0100632e 	tsteq	r0, lr, lsr #6
    73bc:	6f6c0000 	svcvs	0x006c0000
    73c0:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    73c4:	00000200 	andeq	r0, r0, r0, lsl #4
    73c8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    73cc:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    73d0:	00000200 	andeq	r0, r0, r0, lsl #4
    73d4:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    73d8:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    73dc:	00000300 	andeq	r0, r0, r0, lsl #6
    73e0:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    73e4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    73e8:	73000002 	movwvc	r0, #2
    73ec:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    73f0:	00682e62 	rsbeq	r2, r8, r2, ror #28
    73f4:	00000004 	andeq	r0, r0, r4
    73f8:	00020500 	andeq	r0, r2, r0, lsl #10
    73fc:	03000000 	movweq	r0, #0
    7400:	22200123 	eorcs	r0, r0, #-1073741816	; 0xc0000008
    7404:	3021221e 	eorcc	r2, r1, lr, lsl r2
    7408:	13422d2f 	movtne	r2, #11567	; 0x2d2f
    740c:	31331b4e 	teqcc	r3, lr, asr #22
    7410:	21232143 			; <UNDEFINED> instruction: 0x21232143
    7414:	04020038 	streq	r0, [r2], #-56	; 0xffffffc8
    7418:	0d036102 	stfeqs	f6, [r3, #-8]
    741c:	422f5a2e 	eormi	r5, pc, #188416	; 0x2e000
    7420:	3d2f3d2f 	stccc	13, cr3, [pc, #-188]!	; 736c <_Min_Stack_Size+0x716c>
    7424:	3d2f3d2f 	stccc	13, cr3, [pc, #-188]!	; 7370 <_Min_Stack_Size+0x7170>
    7428:	3d2f3d2f 	stccc	13, cr3, [pc, #-188]!	; 7374 <_Min_Stack_Size+0x7174>
    742c:	3c16032f 	ldccc	3, cr0, [r6], {47}	; 0x2f
    7430:	3e40432f 	cdpcc	3, 4, cr4, cr0, cr15, {1}
    7434:	7a03263d 	bvc	d0d30 <_Min_Stack_Size+0xd0b30>
    7438:	2e4e032e 	cdpcs	3, 4, cr0, cr14, cr14, {1}
    743c:	01000802 	tsteq	r0, r2, lsl #16
    7440:	0000fe01 	andeq	pc, r0, r1, lsl #28
    7444:	e3000200 	movw	r0, #512	; 0x200
    7448:	02000000 	andeq	r0, r0, #0
    744c:	0d0efb01 	vstreq	d15, [lr, #-4]
    7450:	01010100 	mrseq	r0, (UNDEF: 17)
    7454:	00000001 	andeq	r0, r0, r1
    7458:	01000001 	tsteq	r0, r1
    745c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7460:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7464:	2f2e2e2f 	svccs	0x002e2e2f
    7468:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    746c:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    7470:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    7474:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    7478:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    747c:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    7480:	73752f00 	cmnvc	r5, #0, 30
    7484:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    7488:	63672f62 	cmnvs	r7, #392	; 0x188
    748c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    7490:	6f6e2d6d 	svcvs	0x006e2d6d
    7494:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7498:	2f696261 	svccs	0x00696261
    749c:	2e342e35 	mrccs	14, 1, r2, cr4, cr5, {1}
    74a0:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    74a4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    74a8:	622f0065 	eorvs	r0, pc, #101	; 0x65
    74ac:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    74b0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    74b4:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    74b8:	7a754158 	bvc	1d57a20 <_Min_Stack_Size+0x1d57820>
    74bc:	6e2f5031 	mcrvs	0, 1, r5, cr15, cr1, {1}
    74c0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    74c4:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    74c8:	2e302e34 	mrccs	14, 1, r2, cr0, cr4, {1}
    74cc:	36313032 			; <UNDEFINED> instruction: 0x36313032
    74d0:	37323530 			; <UNDEFINED> instruction: 0x37323530
    74d4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    74d8:	2f62696c 	svccs	0x0062696c
    74dc:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    74e0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    74e4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    74e8:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    74ec:	616e0000 	cmnvs	lr, r0
    74f0:	6d2d6f6e 	stcvs	15, cr6, [sp, #-440]!	; 0xfffffe48
    74f4:	6f6c6c61 	svcvs	0x006c6c61
    74f8:	632e7263 			; <UNDEFINED> instruction: 0x632e7263
    74fc:	00000100 	andeq	r0, r0, r0, lsl #2
    7500:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    7504:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    7508:	00000200 	andeq	r0, r0, r0, lsl #4
    750c:	6b636f6c 	blvs	18e32c4 <_Min_Stack_Size+0x18e30c4>
    7510:	0300682e 	movweq	r6, #2094	; 0x82e
    7514:	745f0000 	ldrbvc	r0, [pc], #-0	; 751c <_Min_Stack_Size+0x731c>
    7518:	73657079 	cmnvc	r5, #121	; 0x79
    751c:	0300682e 	movweq	r6, #2094	; 0x82e
    7520:	65720000 	ldrbvs	r0, [r2, #-0]!
    7524:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    7528:	00030068 	andeq	r0, r3, r8, rrx
    752c:	05000000 	streq	r0, [r0, #-0]
    7530:	0012b402 	andseq	fp, r2, r2, lsl #8
    7534:	048d0308 	streq	r0, [sp], #776	; 0x308
    7538:	24301401 	ldrtcs	r1, [r0], #-1025	; 0xfffffbff
    753c:	0102215a 	tsteq	r2, sl, asr r1
    7540:	54010100 	strpl	r0, [r1], #-256	; 0xffffff00
    7544:	02000000 	andeq	r0, r0, #0
    7548:	00003e00 	andeq	r3, r0, r0, lsl #28
    754c:	fb010200 	blx	47d56 <_Min_Stack_Size+0x47b56>
    7550:	01000d0e 	tsteq	r0, lr, lsl #26
    7554:	00010101 	andeq	r0, r1, r1, lsl #2
    7558:	00010000 	andeq	r0, r1, r0
    755c:	2e2e0100 	sufcse	f0, f6, f0
    7560:	2f2e2e2f 	svccs	0x002e2e2f
    7564:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7568:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    756c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    7570:	736f6c67 	cmnvc	pc, #26368	; 0x6700
    7574:	696c2f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    7578:	736f6e62 	cmnvc	pc, #1568	; 0x620
    757c:	00007379 	andeq	r7, r0, r9, ror r3
    7580:	6b726273 	blvs	1c9ff54 <_Min_Stack_Size+0x1c9fd54>
    7584:	0100632e 	tsteq	r0, lr, lsr #6
    7588:	00000000 	andeq	r0, r0, r0
    758c:	12c80205 	sbcne	r0, r8, #1342177280	; 0x50000000
    7590:	171a0800 	ldrne	r0, [sl, -r0, lsl #16]
    7594:	0602316a 	streq	r3, [r2], -sl, ror #2
    7598:	Address 0x0000000000007598 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
{
       0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffff4c <BootRAM+0xef706ed>
}
       4:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
       8:	76737572 			; <UNDEFINED> instruction: 0x76737572
       c:	4144542f 	cmpmi	r4, pc, lsr #8
      10:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
      14:	2f544f49 	svccs	0x00544f49
      18:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    bitstatus = SET;
      1c:	4d432f53 	stclmi	15, cr2, [r3, #-332]	; 0xfffffeb4
    bitstatus = RESET;
      20:	65442f33 	strbvs	r2, [r4, #-3891]	; 0xfffff0cd
  return bitstatus;
      24:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
}
      28:	70707553 	rsbsvc	r7, r0, r3, asr r5
      2c:	2f74726f 	svccs	0x0074726f
      30:	532f5453 			; <UNDEFINED> instruction: 0x532f5453
      34:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
      38:	78303146 	ldmdavc	r0!, {r1, r2, r6, r8, ip, sp}
      3c:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
      40:	5f6d6574 	svcpl	0x006d6574
      44:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
      48:	30316632 	eorscc	r6, r1, r2, lsr r6
      4c:	00632e78 	rsbeq	r2, r3, r8, ror lr
      50:	31425041 	cmpcc	r2, r1, asr #32
      54:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
      58:	7a697300 	bvc	1a5cc60 <_Min_Stack_Size+0x1a5ca60>
        Driver_OLED_Send_START(OLED_DATA);
      5c:	70797465 	rsbsvc	r7, r9, r5, ror #8
        for(x=x0;x<x1;x++){ 
      60:	44420065 	strbmi	r0, [r2], #-101	; 0xffffff9b
            I2C_SendData(OLED_HARDWARE, BMP[j++]);
      64:	5f005243 	svcpl	0x00005243
      68:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
      6c:	5f323374 	svcpl	0x00323374
      70:	5f5f0074 	svcpl	0x005f0074
      74:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);    	
      78:	745f3631 	ldrbvc	r3, [pc], #-1585	; 80 <_Min_Heap_Size+0x80>
      7c:	45534800 	ldrbmi	r4, [r3, #-2048]	; 0xfffff800
      80:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
      84:	43007375 	movwmi	r7, #885	; 0x375
        for(x=x0;x<x1;x++){ 
      88:	44495550 	strbmi	r5, [r9], #-1360	; 0xfffffab0
      8c:	42504100 	subsmi	r4, r0, #0, 2
      90:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
      94:	6f687300 	svcvs	0x00687300
        _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
      98:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
      9c:	4900746e 	stmdbmi	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
      a0:	00525343 	subseq	r5, r2, r3, asr #6
      a4:	5f434352 	svcpl	0x00434352
	for(y=y0;y<y1;y++){
      a8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
      ac:	00666544 	rsbeq	r6, r6, r4, asr #10
      b0:	4b54504f 	blmi	15141f4 <_Min_Stack_Size+0x1513ff4>
}
      b4:	00525945 	subseq	r5, r2, r5, asr #18
      b8:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      bc:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
      c0:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
      c4:	46420074 			; <UNDEFINED> instruction: 0x46420074
      c8:	70005241 	andvc	r5, r0, r1, asr #4
      cc:	756d6c6c 	strbvc	r6, [sp, #-3180]!	; 0xfffff394
      d0:	41006c6c 	tstmi	r0, ip, ror #24
      d4:	4e454248 	cdpmi	2, 4, cr4, cr5, cr8, {2}
      d8:	50410052 	subpl	r0, r1, r2, asr r0
      dc:	53523242 	cmppl	r2, #536870916	; 0x20000004
      e0:	5f005254 	svcpl	0x00005254
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      e4:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      e8:	745f3874 	ldrbvc	r3, [pc], #-2164	; f0 <_Min_Heap_Size+0xf0>
      ec:	50525700 	subspl	r5, r2, r0, lsl #14
      f0:	46430052 			; <UNDEFINED> instruction: 0x46430052
				prvUnlockQueue( pxQueue );
      f4:	53005253 	movwpl	r5, #595	; 0x253
      f8:	79537465 	ldmdbvc	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
				if( xTaskResumeAll() == pdFALSE )
      fc:	6f6c4373 	svcvs	0x006c4373
     100:	6f546b63 	svcvs	0x00546b63
					portYIELD_WITHIN_API();
     104:	70003237 	andvc	r3, r0, r7, lsr r2
     108:	6f736c6c 	svcvs	0x00736c6c
     10c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     110:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
     114:	31314320 	teqcc	r1, r0, lsr #6
				prvUnlockQueue( pxQueue );
     118:	342e3520 	strtcc	r3, [lr], #-1312	; 0xfffffae0
				( void ) xTaskResumeAll();
     11c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
     120:	30363130 	eorscc	r3, r6, r0, lsr r1
			prvUnlockQueue( pxQueue );
     124:	20393139 	eorscs	r3, r9, r9, lsr r1
			( void ) xTaskResumeAll();
     128:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     12c:	20626d75 	rsbcs	r6, r2, r5, ror sp
     130:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
     134:	6f633d75 	svcvs	0x00633d75
     138:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
}
     13c:	20336d2d 	eorscs	r6, r3, sp, lsr #26
     140:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     144:	2d626d75 	stclcs	13, cr6, [r2, #-468]!	; 0xfffffe2c
     148:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     14c:	726f7772 	rsbvc	r7, pc, #29884416	; 0x1c80000
  SPIx->I2SCFGR = tmpreg;   
     150:	6d2d206b 	stcvs	0, cr2, [sp, #-428]!	; 0xfffffe54
     154:	7474696c 	ldrbtvc	r6, [r4], #-2412	; 0xfffff694
}
     158:	652d656c 	strvs	r6, [sp, #-1388]!	; 0xfffffa94
     15c:	6169646e 	cmnvs	r9, lr, ror #8
     160:	672d206e 	strvs	r2, [sp, -lr, rrx]!
     164:	20626467 	rsbcs	r6, r2, r7, ror #8
         *(uint16_t*) arg = getSn_KPALVTR(sn);
     168:	20304f2d 	eorscs	r4, r0, sp, lsr #30
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     16c:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0xfffff9d3
     170:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     174:	732d6e6f 			; <UNDEFINED> instruction: 0x732d6e6f
     178:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     17c:	20736e6f 	rsbscs	r6, r3, pc, ror #28
     180:	6164662d 	cmnvs	r4, sp, lsr #12
     184:	732d6174 			; <UNDEFINED> instruction: 0x732d6174
     188:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
         *(uint8_t*) arg = getSn_SR(sn);
     18c:	00736e6f 	rsbseq	r6, r3, pc, ror #28
     190:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     194:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     198:	61686320 	cmnvs	r8, r0, lsr #6
     19c:	49410072 	stmdbmi	r1, {r1, r4, r5, r6}^
     1a0:	00524352 	subseq	r4, r2, r2, asr r3
     1a4:	5f424353 	svcpl	0x00424353
         if(getSn_MR(sn) == Sn_MR_TCP)
     1a8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     1ac:	42504100 	subsmi	r4, r0, #0, 2
     1b0:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
     1b4:	61745300 	cmnvs	r4, r0, lsl #6
     1b8:	70557472 	subsvc	r7, r5, r2, ror r4
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1bc:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     1c0:	00726574 	rsbseq	r6, r2, r4, ror r5
     1c4:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     1c8:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
         break;
     1cc:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
            *(uint16_t*)arg = sock_remained_size[sn];
     1d0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     1d4:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     1d8:	5300746e 	movwpl	r7, #1134	; 0x46e
         CHECK_SOCKMODE(Sn_MR_TCP);
     1dc:	52534348 	subspl	r4, r3, #72, 6	; 0x20000001
     1e0:	464d4d00 	strbmi	r4, [sp], -r0, lsl #26
     1e4:	53005241 	movwpl	r5, #577	; 0x241
     1e8:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     1ec:	696e496d 	stmdbvs	lr!, {r0, r2, r3, r5, r6, r8, fp, lr}^
     1f0:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
     1f4:	2074726f 	rsbscs	r7, r4, pc, ror #4
     1f8:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
         *(uint8_t*)arg = sock_pack_info[sn];
     1fc:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     200:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
         break;
     204:	4f545600 	svcmi	0x00545600
         return SOCKERR_SOCKOPT;
     208:	79530052 	ldmdbvc	r3, {r1, r4, r6}^
   return SOCK_OK;
     20c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
}
     210:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
     214:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     218:	6470556b 	ldrbtvs	r5, [r0], #-1387	; 0xfffffa95
     21c:	00657461 	rsbeq	r7, r5, r1, ror #8
     220:	52415349 	subpl	r5, r1, #603979777	; 0x24000001
     224:	53464400 	movtpl	r4, #25600	; 0x6400
     228:	79530052 	ldmdbvc	r3, {r1, r4, r6}^
	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     22c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     230:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
     234:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     238:	4648006b 	strbmi	r0, [r8], -fp, rrx
     23c:	4d005253 	sfmmi	f5, 4, [r0, #-332]	; 0xfffffeb4
     240:	0052464d 	subseq	r4, r2, sp, asr #12
     244:	53746553 	cmnpl	r4, #348127232	; 0x14c00000
     248:	6c437379 	mcrrvs	3, 7, r7, r3, cr9
     24c:	006b636f 	rsbeq	r6, fp, pc, ror #6
     250:	52534641 	subspl	r4, r3, #68157440	; 0x4100000
	memset(packet, 0, sizeof(packet));
     254:	53455200 	movtpl	r5, #20992	; 0x5200
     258:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     25c:	4c460044 	mcrrmi	0, 4, r0, r6, cr4
	memcpy(packet, fixed_header, sizeof(fixed_header));
     260:	5f485341 	svcpl	0x00485341
     264:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     268:	00666544 	rsbeq	r6, r6, r4, asr #10
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	5f4d5449 	svcpl	0x004d5449
     270:	75427852 	strbvc	r7, [r2, #-2130]	; 0xfffff7ae
     274:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     278:	73696400 	cmnvc	r9, #0, 8
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     27c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     280:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
     284:	656c6f00 	strbvs	r6, [ip, #-3840]!	; 0xfffff100
     288:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
     28c:	44007469 	strmi	r7, [r0], #-1129	; 0xfffffb97
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     290:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     294:	4c4f5f72 	mcrrmi	15, 7, r5, pc, cr2
     298:	535f4445 	cmppl	pc, #1157627904	; 0x45000000
     29c:	44646e65 	strbtmi	r6, [r4], #-3685	; 0xfffff19b
     2a0:	73617461 	cmnvc	r1, #1627389952	; 0x61000000
		return -1;
     2a4:	58384600 	ldmdapl	r8!, {r9, sl, lr}
     2a8:	52003631 	andpl	r3, r0, #51380224	; 0x3100000
	return 1;
     2ac:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
}
     2b0:	33444556 	movtcc	r4, #17750	; 0x4556
     2b4:	69724400 	ldmdbvs	r2!, {sl, lr}^
     2b8:	5f726576 	svcpl	0x00726576
     2bc:	44454c4f 	strbmi	r4, [r5], #-3151	; 0xfffff3b1
     2c0:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     2c4:	736f505f 	cmnvc	pc, #95	; 0x5f
     2c8:	6f697469 	svcvs	0x00697469
     2cc:	6f63006e 	svcvs	0x0063006e
     2d0:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
     2d4:	52007364 	andpl	r7, r0, #100, 6	; 0x90000001
     2d8:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     2dc:	36444556 			; <UNDEFINED> instruction: 0x36444556
     2e0:	61684300 	cmnvs	r8, r0, lsl #6
     2e4:	69535f72 	ldmdbvs	r3, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     2e8:	6c00657a 	cfstr32vs	mvfx6, [r0], {122}	; 0x7a
     2ec:	00656e69 	rsbeq	r6, r5, r9, ror #28
     2f0:	41534944 	cmpmi	r3, r4, asr #18
     2f4:	00454c42 	subeq	r4, r5, r2, asr #24
     2f8:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     2fc:	756f6420 	strbvc	r6, [pc, #-1056]!	; fffffee4 <BootRAM+0xef70685>
     300:	00656c62 	rsbeq	r6, r5, r2, ror #24
     304:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 250 <_Min_Stack_Size+0x50>
     308:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     30c:	76737572 			; <UNDEFINED> instruction: 0x76737572
     310:	4144542f 	cmpmi	r4, pc, lsr #8
     314:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
     318:	2f544f49 	svccs	0x00544f49
     31c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     320:	4f2f7265 	svcmi	0x002f7265
     324:	2e44454c 	cdpcs	5, 4, cr4, cr4, cr12, {2}
     328:	72440063 	subvc	r0, r4, #99	; 0x63
     32c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     330:	454c4f5f 	strbmi	r4, [ip, #-3935]	; 0xfffff0a1
     334:	68535f44 	ldmdavs	r3, {r2, r6, r8, r9, sl, fp, ip, lr}^
     338:	7453776f 	ldrbvc	r7, [r3], #-1903	; 0xfffff891
     33c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     340:	52524500 	subspl	r4, r2, #0, 10
     344:	4900524f 	stmdbmi	r0, {r0, r1, r2, r3, r6, r9, ip, lr}
     348:	545f4332 	ldrbpl	r4, [pc], #-818	; 350 <_Min_Stack_Size+0x150>
     34c:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     350:	72006665 	andvc	r6, r0, #105906176	; 0x6500000
     354:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
     358:	69724400 	ldmdbvs	r2!, {sl, lr}^
     35c:	5f726576 	svcpl	0x00726576
     360:	44454c4f 	strbmi	r4, [r5], #-3151	; 0xfffff3b1
     364:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
     368:	6f527261 	svcvs	0x00527261
     36c:	682f0077 	stmdavs	pc!, {r0, r1, r2, r4, r5, r6}	; <UNPREDICTABLE>
     370:	2f656d6f 	svccs	0x00656d6f
     374:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
     378:	542f7673 	strtpl	r7, [pc], #-1651	; 380 <_Min_Stack_Size+0x180>
     37c:	41534144 	cmpmi	r3, r4, asr #2
     380:	4f492d54 	svcmi	0x00492d54
     384:	72440054 	subvc	r0, r4, #84	; 0x54
     388:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     38c:	454c4f5f 	strbmi	r4, [ip, #-3935]	; 0xfffff0a1
     390:	69465f44 	stmdbvs	r6, {r2, r6, r8, r9, sl, fp, ip, lr}^
     394:	44006c6c 	strmi	r6, [r0], #-3180	; 0xfffff394
     398:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     39c:	4c4f5f72 	mcrrmi	15, 7, r5, pc, cr2
     3a0:	535f4445 	cmppl	pc, #1157627904	; 0x45000000
     3a4:	5f776f68 	svcpl	0x00776f68
     3a8:	72616843 	rsbvc	r6, r1, #4390912	; 0x430000
     3ac:	73696400 	cmnvc	r9, #0, 8
     3b0:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     3b4:	006e6f5f 	rsbeq	r6, lr, pc, asr pc
     3b8:	3152414f 	cmpcc	r2, pc, asr #2
     3bc:	52414f00 	subpl	r4, r1, #0, 30
     3c0:	45520032 	ldrbmi	r0, [r2, #-50]	; 0xffffffce
     3c4:	56524553 			; <UNDEFINED> instruction: 0x56524553
     3c8:	00304445 	eorseq	r4, r0, r5, asr #8
     3cc:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     3d0:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     3d4:	45520031 	ldrbmi	r0, [r2, #-49]	; 0xffffffcf
     3d8:	56524553 			; <UNDEFINED> instruction: 0x56524553
     3dc:	00324445 	eorseq	r4, r2, r5, asr #8
     3e0:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     3e4:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xfffff1b7
     3e8:	45520078 	ldrbmi	r0, [r2, #-120]	; 0xffffff88
     3ec:	56524553 			; <UNDEFINED> instruction: 0x56524553
     3f0:	00344445 	eorseq	r4, r4, r5, asr #8
     3f4:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     3f8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     3fc:	72440035 	subvc	r0, r4, #53	; 0x35
     400:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     404:	454c4f5f 	strbmi	r4, [ip, #-3935]	; 0xfffff0a1
     408:	65535f44 	ldrbvs	r5, [r3, #-3908]	; 0xfffff0bc
     40c:	535f646e 	cmppl	pc, #1845493760	; 0x6e000000
     410:	54524154 	ldrbpl	r4, [r2], #-340	; 0xfffffeac
     414:	53455200 	movtpl	r5, #20992	; 0x5200
     418:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     41c:	52003744 	andpl	r3, r0, #68, 14	; 0x1100000
     420:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     424:	38444556 	stmdacc	r4, {r1, r2, r4, r6, r8, sl, lr}^
     428:	78364600 	ldmdavc	r6!, {r9, sl, lr}
     42c:	72440038 	subvc	r0, r4, #56	; 0x38
     430:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     434:	454c4f5f 	strbmi	r4, [ip, #-3935]	; 0xfffff0a1
     438:	72445f44 	subvc	r5, r4, #68, 30	; 0x110
     43c:	4d427761 	stclmi	7, cr7, [r2, #-388]	; 0xfffffe7c
     440:	68630050 	stmdavs	r3!, {r4, r6}^
     444:	69537261 	ldmdbvs	r3, {r0, r5, r6, r9, ip, sp, lr}^
     448:	5400657a 	strpl	r6, [r0], #-1402	; 0xfffffa86
     44c:	45534952 	ldrbmi	r4, [r3, #-2386]	; 0xfffff6ae
     450:	74616400 	strbtvc	r6, [r1], #-1024	; 0xfffffc00
     454:	70795461 	rsbsvc	r5, r9, r1, ror #8
     458:	6f630065 	svcvs	0x00630065
     45c:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
     460:	4e450064 	cdpmi	0, 4, cr0, cr5, cr4, {3}
     464:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
     468:	4b495300 	blmi	1255070 <_Min_Stack_Size+0x1254e70>
     46c:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     470:	54554f45 	ldrbpl	r4, [r5], #-3909	; 0xfffff0bb
     474:	5f534300 	svcpl	0x00534300
     478:	5f544547 	svcpl	0x00544547
     47c:	5258414d 	subspl	r4, r8, #1073741843	; 0x40000013
     480:	46554258 			; <UNDEFINED> instruction: 0x46554258
     484:	746f7300 	strbtvc	r7, [pc], #-768	; 48c <_Min_Stack_Size+0x28c>
     488:	00657079 	rsbeq	r7, r5, r9, ror r0
     48c:	6b636170 	blvs	18d8a54 <_Min_Stack_Size+0x18d8854>
     490:	6e656c5f 	mcrvs	12, 3, r6, cr5, cr15, {2}
     494:	5f4f5300 	svcpl	0x004f5300
     498:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
     49c:	73005355 	movwvc	r5, #853	; 0x355
     4a0:	6f6b636f 	svcvs	0x006b636f
     4a4:	745f7470 	ldrbvc	r7, [pc], #-1136	; 4ac <_Min_Stack_Size+0x2ac>
     4a8:	00657079 	rsbeq	r7, r5, r9, ror r0
     4ac:	79747363 	ldmdbvc	r4!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}^
     4b0:	5f006570 	svcpl	0x00006570
     4b4:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
     4b8:	00745f38 	rsbseq	r5, r4, r8, lsr pc
     4bc:	475f5343 	ldrbmi	r5, [pc, -r3, asr #6]
     4c0:	495f5445 	ldmdbmi	pc, {r0, r2, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     4c4:	444f4d4f 	strbmi	r4, [pc], #-3407	; 4cc <_Min_Stack_Size+0x2cc>
     4c8:	65670045 	strbvs	r0, [r7, #-69]!	; 0xffffffbb
     4cc:	636f7374 	cmnvs	pc, #116, 6	; 0xd0000001
     4d0:	74706f6b 	ldrbtvc	r6, [r0], #-3947	; 0xfffff095
     4d4:	5f4f5300 	svcpl	0x004f5300
     4d8:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
     4dc:	5f4f5300 	svcpl	0x004f5300
     4e0:	4b434150 	blmi	10d0a28 <_Min_Stack_Size+0x10d0828>
     4e4:	4f464e49 	svcmi	0x00464e49
     4e8:	636f7300 	cmnvs	pc, #0, 6
     4ec:	73695f6b 	cmnvc	r9, #428	; 0x1ac
     4f0:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
     4f4:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     4f8:	63657200 	cmnvs	r5, #0, 4
     4fc:	6f726676 	svcvs	0x00726676
     500:	7266006d 	rsbvc	r0, r6, #109	; 0x6d
     504:	69736565 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, sl, sp, lr}^
     508:	7200657a 	andvc	r6, r0, #511705088	; 0x1e800000
     50c:	00766365 	rsbseq	r6, r6, r5, ror #6
     510:	736c7463 	cmnvc	ip, #1660944384	; 0x63000000
     514:	5f6b636f 	svcpl	0x006b636f
     518:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     51c:	5f4f5300 	svcpl	0x004f5300
     520:	004c5454 	subeq	r5, ip, r4, asr r4
     524:	535f4f53 	cmppl	pc, #332	; 0x14c
     528:	42444e45 	submi	r4, r4, #1104	; 0x450
     52c:	43004655 	movwmi	r4, #1621	; 0x655
     530:	45475f53 	strbmi	r5, [r7, #-3923]	; 0xfffff0ad
     534:	414d5f54 	cmpmi	sp, r4, asr pc
     538:	42585458 	subsmi	r5, r8, #88, 8	; 0x58000000
     53c:	43004655 	movwmi	r4, #1621	; 0x655
     540:	45535f53 	ldrbmi	r5, [r3, #-3923]	; 0xfffff0ad
     544:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
     548:	53414d54 	movtpl	r4, #7508	; 0x1d54
     54c:	4953004b 	ldmdbmi	r3, {r0, r1, r3, r6}^
     550:	45535f4b 	ldrbmi	r5, [r3, #-3915]	; 0xfffff0b5
     554:	5300544e 	movwpl	r5, #1102	; 0x44e
     558:	435f4b49 	cmpmi	pc, #74752	; 0x12400
     55c:	454e4e4f 	strbmi	r4, [lr, #-3663]	; 0xfffff1b1
     560:	44455443 	strbmi	r5, [r5], #-1091	; 0xfffffbbd
     564:	73696c00 	cmnvc	r9, #0, 24
     568:	006e6574 	rsbeq	r6, lr, r4, ror r5
     56c:	4d5f4f53 	ldclmi	15, cr4, [pc, #-332]	; 428 <_Min_Stack_Size+0x228>
     570:	73005353 	movwvc	r5, #851	; 0x353
     574:	5f6b636f 	svcpl	0x006b636f
     578:	5f796e61 	svcpl	0x00796e61
     57c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     580:	6c746300 	ldclvs	3, cr6, [r4], #-0
     584:	6b636f73 	blvs	18dc358 <_Min_Stack_Size+0x18dc158>
     588:	43007465 	movwmi	r7, #1125	; 0x465
     58c:	45475f53 	strbmi	r5, [r7, #-3923]	; 0xfffff0ad
     590:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
     594:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
     598:	00545055 	subseq	r5, r4, r5, asr r0
     59c:	6b636f73 	blvs	18dc370 <_Min_Stack_Size+0x18dc170>
     5a0:	5f6f695f 	svcpl	0x006f695f
     5a4:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
     5a8:	636f7300 	cmnvs	pc, #0, 6
     5ac:	61705f6b 	cmnvs	r0, fp, ror #30
     5b0:	695f6b63 	ldmdbvs	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
     5b4:	006f666e 	rsbeq	r6, pc, lr, ror #12
     5b8:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
     5bc:	4b495300 	blmi	12551c4 <_Min_Stack_Size+0x1254fc4>
     5c0:	5349445f 	movtpl	r4, #37983	; 0x945f
     5c4:	4e4e4f43 	cdpmi	15, 4, cr4, cr14, cr3, {2}
     5c8:	45544345 	ldrbmi	r4, [r4, #-837]	; 0xfffffcbb
     5cc:	682f0044 	stmdavs	pc!, {r2, r6}	; <UNPREDICTABLE>
     5d0:	2f656d6f 	svccs	0x00656d6f
     5d4:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
     5d8:	542f7673 	strtpl	r7, [pc], #-1651	; 5e0 <_Min_Stack_Size+0x3e0>
     5dc:	41534144 	cmpmi	r3, r4, asr #2
     5e0:	4f492d54 	svcmi	0x00492d54
     5e4:	74452f54 	strbvc	r2, [r5], #-3924	; 0xfffff0ac
     5e8:	6e726568 	cdpvs	5, 7, cr6, cr2, cr8, {3}
     5ec:	732f7465 			; <UNDEFINED> instruction: 0x732f7465
     5f0:	656b636f 	strbvs	r6, [fp, #-879]!	; 0xfffffc91
     5f4:	00632e74 	rsbeq	r2, r3, r4, ror lr
     5f8:	445f4f53 	ldrbmi	r4, [pc], #-3923	; 600 <_Min_Stack_Size+0x400>
     5fc:	49545345 	ldmdbmi	r4, {r0, r2, r6, r8, r9, ip, lr}^
     600:	49530050 	ldmdbmi	r3, {r4, r6}^
     604:	45525f4b 	ldrbmi	r5, [r2, #-3915]	; 0xfffff0b5
     608:	56494543 	strbpl	r4, [r9], -r3, asr #10
     60c:	53004445 	movwpl	r4, #1093	; 0x445
     610:	4f545f4f 	svcmi	0x00545f4f
     614:	72700053 	rsbsvc	r0, r0, #83	; 0x53
     618:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
     61c:	53006c6f 	movwpl	r6, #3183	; 0xc6f
     620:	454b5f4f 	strbmi	r5, [fp, #-3919]	; 0xfffff0b1
     624:	4c415045 	mcrrmi	0, 4, r5, r1, cr5
     628:	41455649 	cmpmi	r5, r9, asr #12
     62c:	004f5455 	subeq	r5, pc, r5, asr r4	; <UNPREDICTABLE>
     630:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
     634:	5f534300 	svcpl	0x00534300
     638:	5f544547 	svcpl	0x00544547
     63c:	4d544e49 	ldclmi	14, cr4, [r4, #-292]	; 0xfffffedc
     640:	004b5341 	subeq	r5, fp, r1, asr #6
     644:	6b636f73 	blvs	18dc418 <_Min_Stack_Size+0x18dc218>
     648:	6d65725f 	sfmvs	f7, 2, [r5, #-380]!	; 0xfffffe84
     64c:	656e6961 	strbvs	r6, [lr, #-2401]!	; 0xfffff69f
     650:	69735f64 	ldmdbvs	r3!, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     654:	7300657a 	movwvc	r6, #1402	; 0x57a
     658:	74646e65 	strbtvc	r6, [r4], #-3685	; 0xfffff19b
     65c:	4f53006f 	svcmi	0x0053006f
     660:	45454b5f 	strbmi	r4, [r5, #-2911]	; 0xfffff4a1
     664:	494c4150 	stmdbmi	ip, {r4, r6, r8, lr}^
     668:	45534556 	ldrbmi	r4, [r3, #-1366]	; 0xfffffaaa
     66c:	5f00444e 	svcpl	0x0000444e
     670:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
     674:	745f3233 	ldrbvc	r3, [pc], #-563	; 67c <_Min_Stack_Size+0x47c>
     678:	63657200 	cmnvs	r5, #0, 4
     67c:	7a697376 	bvc	1a5d45c <_Min_Stack_Size+0x1a5d25c>
     680:	4f530065 	svcmi	0x00530065
     684:	4345525f 	movtmi	r5, #21087	; 0x525f
     688:	46554256 			; <UNDEFINED> instruction: 0x46554256
     68c:	5f534300 	svcpl	0x00534300
     690:	5f544553 	svcpl	0x00544553
     694:	4f4d4f49 	svcmi	0x004d4f49
     698:	73004544 	movwvc	r4, #1348	; 0x544
     69c:	6f737465 	svcvs	0x00737465
     6a0:	706f6b63 	rsbvc	r6, pc, r3, ror #22
     6a4:	4f530074 	svcmi	0x00530074
     6a8:	5345445f 	movtpl	r4, #21599	; 0x545f
     6ac:	524f5054 	subpl	r5, pc, #84	; 0x54
     6b0:	53430054 	movtpl	r0, #12372	; 0x3054
     6b4:	524c435f 	subpl	r4, ip, #2080374785	; 0x7c000001
     6b8:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
     6bc:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
     6c0:	53005450 	movwpl	r5, #1104	; 0x450
     6c4:	45525f4f 	ldrbmi	r5, [r2, #-3919]	; 0xfffff0b1
     6c8:	4e49414d 	dvfmiem	f4, f1, #5.0
     6cc:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0xfffff6ad
     6d0:	4b495300 	blmi	12552d8 <_Min_Stack_Size+0x12550d8>
     6d4:	4c4c415f 	stfmie	f4, [ip], {95}	; 0x5f
     6d8:	7a697700 	bvc	1a5e2e0 <_Min_Stack_Size+0x1a5e0e0>
     6dc:	70696863 	rsbvc	r6, r9, r3, ror #16
     6e0:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     6e4:	6d74656e 	cfldr64vs	mvdx6, [r4, #-440]!	; 0xfffffe48
     6e8:	0065646f 	rsbeq	r6, r5, pc, ror #8
     6ec:	475f5743 	ldrbmi	r5, [pc, -r3, asr #14]
     6f0:	505f5445 	subspl	r5, pc, r5, asr #8
     6f4:	4f505948 	svcmi	0x00505948
     6f8:	444f4d57 	strbmi	r4, [pc], #-3415	; 700 <_Min_Stack_Size+0x500>
     6fc:	69770045 	ldmdbvs	r7!, {r0, r2, r6}^
     700:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     704:	65735f70 	ldrbvs	r5, [r3, #-3952]!	; 0xfffff090
     708:	746e6974 	strbtvc	r6, [lr], #-2420	; 0xfffff68c
     70c:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
     710:	616d7470 	smcvs	55104	; 0xd740
     714:	77006b73 	smlsdxvc	r0, r3, fp, r6
     718:	68637a69 	stmdavs	r3!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
     71c:	625f7069 	subsvs	r7, pc, #105	; 0x69
     720:	775f7375 			; <UNDEFINED> instruction: 0x775f7375
     724:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     728:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
     72c:	69726300 	ldmdbvs	r2!, {r8, r9, sp, lr}^
     730:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
     734:	575f5f00 	ldrbpl	r5, [pc, -r0, lsl #30]
     738:	48435a49 	stmdami	r3, {r0, r3, r6, r9, fp, ip, lr}^
     73c:	77005049 	strvc	r5, [r0, -r9, asr #32]
     740:	68637a69 	stmdavs	r3!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
     744:	635f7069 	cmpvs	pc, #105	; 0x69
     748:	5f736972 	svcpl	0x00736972
     74c:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
     750:	4d4e0072 	stclmi	0, cr0, [lr, #-456]	; 0xfffffe38
     754:	524f465f 	subpl	r4, pc, #99614720	; 0x5f00000
     758:	52414543 	subpl	r4, r1, #281018368	; 0x10c00000
     75c:	73630050 	cmnvc	r3, #80	; 0x50
     760:	6c65735f 	stclvs	3, cr7, [r5], #-380	; 0xfffffe84
     764:	5f574300 	svcpl	0x00574300
     768:	5f544547 	svcpl	0x00544547
     76c:	53594850 	cmppl	r9, #80, 16	; 0x500000
     770:	55544154 	ldrbpl	r4, [r4, #-340]	; 0xfffffeac
     774:	69770053 	ldmdbvs	r7!, {r0, r1, r4, r6}^
     778:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     77c:	65675f70 	strbvs	r5, [r7, #-3952]!	; 0xfffff090
     780:	746e6974 	strbtvc	r6, [lr], #-2420	; 0xfffff68c
     784:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
     788:	616d7470 	smcvs	55104	; 0xd740
     78c:	43006b73 	movwmi	r6, #2931	; 0xb73
     790:	45475f4e 	strbmi	r5, [r7, #-3918]	; 0xfffff0b2
     794:	454e5f54 	strbmi	r5, [lr, #-3924]	; 0xfffff0ac
     798:	464e4954 			; <UNDEFINED> instruction: 0x464e4954
     79c:	5743004f 	strbpl	r0, [r3, -pc, asr #32]
     7a0:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
     7a4:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
     7a8:	4d495452 	cfstrdmi	mvd5, [r9, #-328]	; 0xfffffeb8
     7ac:	69770045 	ldmdbvs	r7!, {r0, r2, r6}^
     7b0:	654e5f7a 	strbvs	r5, [lr, #-3962]	; 0xfffff086
     7b4:	666e4974 			; <UNDEFINED> instruction: 0x666e4974
     7b8:	00745f6f 	rsbseq	r5, r4, pc, ror #30
     7bc:	5f676572 	svcpl	0x00676572
     7c0:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     7c4:	5f706968 	svcpl	0x00706968
     7c8:	5f737562 	svcpl	0x00737562
     7cc:	75666263 	strbvc	r6, [r6, #-611]!	; 0xfffffd9d
     7d0:	7700636e 	strvc	r6, [r0, -lr, ror #6]
     7d4:	68637a69 	stmdavs	r3!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
     7d8:	735f7069 	cmpvc	pc, #105	; 0x69
     7dc:	775f6970 			; <UNDEFINED> instruction: 0x775f6970
     7e0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     7e4:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
     7e8:	7a697700 	bvc	1a5e3f0 <_Min_Stack_Size+0x1a5e1f0>
     7ec:	70696863 	rsbvc	r6, r9, r3, ror #16
     7f0:	6970735f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
     7f4:	6165725f 	cmnvs	r5, pc, asr r2
     7f8:	74796264 	ldrbtvc	r6, [r9], #-612	; 0xfffffd9c
     7fc:	445f0065 	ldrbmi	r0, [pc], #-101	; 804 <_Min_Stack_Size+0x604>
     800:	5f504348 	svcpl	0x00504348
     804:	73787400 	cmnvc	r8, #0, 8
     808:	00657a69 	rsbeq	r7, r5, r9, ror #20
     80c:	535f5743 	cmppl	pc, #17563648	; 0x10c0000
     810:	495f5445 	ldmdbmi	pc, {r0, r2, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     814:	4d52544e 	cfldrdmi	mvd5, [r2, #-312]	; 0xfffffec8
     818:	004b5341 	subeq	r5, fp, r1, asr #6
     81c:	535f4b49 	cmppl	pc, #74752	; 0x12400
     820:	5f4b434f 	svcpl	0x004b434f
     824:	4d4e0037 	stclmi	0, cr0, [lr, #-220]	; 0xffffff24
     828:	4e49505f 	mcrmi	0, 2, r5, cr9, cr15, {2}
     82c:	4f4c4247 	svcmi	0x004c4247
     830:	63004b43 	movwvs	r4, #2883	; 0xb43
     834:	69776c74 	ldmdbvs	r7!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     838:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     83c:	69770070 	ldmdbvs	r7!, {r4, r5, r6}^
     840:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     844:	65675f70 	strbvs	r5, [r7, #-3952]!	; 0xfffff090
     848:	746e6974 	strbtvc	r6, [lr], #-2420	; 0xfffff68c
     84c:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
     850:	63007470 	movwvs	r7, #1136	; 0x470
     854:	7079746e 	rsbsvc	r7, r9, lr, ror #8
     858:	4d4e0065 	stclmi	0, cr0, [lr, #-404]	; 0xfffffe6c
     85c:	5050505f 	subspl	r5, r0, pc, asr r0
     860:	6e00454f 	cfsh32vs	mvfx4, mvfx0, #47
     864:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     868:	4300656d 	movwmi	r6, #1389	; 0x56d
     86c:	45535f57 	ldrbmi	r5, [r3, #-3927]	; 0xfffff0a9
     870:	48505f54 	ldmdami	r0, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     874:	4e4f4359 	mcrmi	3, 2, r4, cr15, cr9, {2}
     878:	69770046 	ldmdbvs	r7!, {r1, r2, r6}^
     87c:	7968707a 	stmdbvc	r8!, {r1, r3, r4, r5, r6, ip, sp, lr}^
     880:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     884:	63796870 	cmnvs	r9, #112, 16	; 0x700000
     888:	00666e6f 	rsbeq	r6, r6, pc, ror #28
     88c:	475f4e43 	ldrbmi	r4, [pc, -r3, asr #28]
     890:	4e5f5445 	cdpmi	4, 5, cr5, cr15, cr5, {2}
     894:	4f4d5445 	svcmi	0x004d5445
     898:	43004544 	movwmi	r4, #1348	; 0x544
     89c:	45525f57 	ldrbmi	r5, [r2, #-3927]	; 0xfffff0a9
     8a0:	5f544553 	svcpl	0x00544553
     8a4:	435a4957 	cmpmi	sl, #1425408	; 0x15c000
     8a8:	00504948 	subseq	r4, r0, r8, asr #18
     8ac:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
     8b0:	6e635f79 	mcrvs	15, 3, r5, cr3, cr9, {3}
     8b4:	68640074 	stmdavs	r4!, {r2, r4, r5, r6}^
     8b8:	6d5f7063 	ldclvs	0, cr7, [pc, #-396]	; 734 <_Min_Stack_Size+0x534>
     8bc:	0065646f 	rsbeq	r6, r5, pc, ror #8
     8c0:	707a6977 	rsbsvc	r6, sl, r7, ror r9
     8c4:	675f7968 	ldrbvs	r7, [pc, -r8, ror #18]
     8c8:	68707465 	ldmdavs	r0!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     8cc:	6e696c79 	mcrvs	12, 3, r6, cr9, cr9, {3}
     8d0:	7562006b 	strbvc	r0, [r2, #-107]!	; 0xffffff95
     8d4:	62725f73 	rsbsvs	r5, r2, #460	; 0x1cc
     8d8:	7a697700 	bvc	1a5e4e0 <_Min_Stack_Size+0x1a5e2e0>
     8dc:	70696863 	rsbvc	r6, r9, r3, ror #16
     8e0:	5f73635f 	svcpl	0x0073635f
     8e4:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
     8e8:	5f007463 	svcpl	0x00007463
     8ec:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
     8f0:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
     8f4:	4b490065 	blmi	1240a90 <_Min_Stack_Size+0x1240890>
     8f8:	5f50495f 	svcpl	0x0050495f
     8fc:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
     900:	5443494c 	strbpl	r4, [r3], #-2380	; 0xfffff6b4
     904:	7a697700 	bvc	1a5e50c <_Min_Stack_Size+0x1a5e30c>
     908:	74654e5f 	strbtvc	r4, [r5], #-3679	; 0xfffff1a1
     90c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     910:	0074756f 	rsbseq	r7, r4, pc, ror #10
     914:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     918:	5f706968 	svcpl	0x00706968
     91c:	6e746573 	mrcvs	5, 3, r6, cr4, cr3, {3}
     920:	6e697465 	cdpvs	4, 6, cr7, cr9, cr5, {3}
     924:	63006f66 	movwvs	r6, #3942	; 0xf66
     928:	656e6c74 	strbvs	r6, [lr, #-3188]!	; 0xfffff38c
     92c:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
     930:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
     934:	68505f7a 	ldmdavs	r0, {r1, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     938:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
     93c:	00745f66 	rsbseq	r5, r4, r6, ror #30
     940:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     944:	5f706968 	svcpl	0x00706968
     948:	5f737562 	svcpl	0x00737562
     94c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
     950:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
     954:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
     958:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
     95c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     960:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
     964:	315f656d 	cmpcc	pc, sp, ror #10
     968:	73753030 	cmnvc	r5, #48	; 0x30
     96c:	5f4b4900 	svcpl	0x004b4900
     970:	004c4f57 	subeq	r4, ip, r7, asr pc
     974:	535f4e43 	cmppl	pc, #1072	; 0x430
     978:	4e5f5445 	cdpmi	4, 5, cr5, cr15, cr5, {2}
     97c:	4e495445 	cdpmi	4, 4, cr5, cr9, cr5, {2}
     980:	77004f46 	strvc	r4, [r0, -r6, asr #30]
     984:	68707a69 	ldmdavs	r0!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
     988:	65735f79 	ldrbvs	r5, [r3, #-3961]!	; 0xfffff087
     98c:	79687074 	stmdbvc	r8!, {r2, r4, r5, r6, ip, sp, lr}^
     990:	646f6d70 	strbtvs	r6, [pc], #-3440	; 998 <_Min_Stack_Size+0x798>
     994:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
     998:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     99c:	65675f70 	strbvs	r5, [r7, #-3952]!	; 0xfffff090
     9a0:	74656e74 	strbtvc	r6, [r5], #-3700	; 0xfffff18c
     9a4:	6f666e69 	svcvs	0x00666e69
     9a8:	5f4e4300 	svcpl	0x004e4300
     9ac:	5f544553 	svcpl	0x00544553
     9b0:	454d4954 	strbmi	r4, [sp, #-2388]	; 0xfffff6ac
     9b4:	0054554f 	subseq	r5, r4, pc, asr #10
     9b8:	72746e69 	rsbsvc	r6, r4, #1680	; 0x690
     9bc:	69707300 	ldmdbvs	r0!, {r8, r9, ip, sp, lr}^
     9c0:	0062775f 	rsbeq	r7, r2, pc, asr r7
     9c4:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     9c8:	5f706968 	svcpl	0x00706968
     9cc:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
     9d0:	6f656d69 	svcvs	0x00656d69
     9d4:	43007475 	movwmi	r7, #1141	; 0x475
     9d8:	4c435f57 	mcrrmi	15, 5, r5, r3, cr7
     9dc:	4e495f52 	mcrmi	15, 2, r5, cr9, cr2, {2}
     9e0:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
     9e4:	00545055 	subseq	r5, r4, r5, asr r0
     9e8:	5f7a6977 	svcpl	0x007a6977
     9ec:	4974654e 	ldmdbmi	r4!, {r1, r2, r3, r6, r8, sl, sp, lr}^
     9f0:	006f666e 	rsbeq	r6, pc, lr, ror #12
     9f4:	4954454e 	ldmdbmi	r4, {r1, r2, r3, r6, r8, sl, lr}^
     9f8:	5f4f464e 	svcpl	0x004f464e
     9fc:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
     a00:	43004349 	movwmi	r4, #841	; 0x349
     a04:	45535f4e 	ldrbmi	r5, [r3, #-3918]	; 0xfffff0b2
     a08:	454e5f54 	strbmi	r5, [lr, #-3924]	; 0xfffff0ac
     a0c:	444f4d54 	strbmi	r4, [pc], #-3412	; a14 <_Min_Stack_Size+0x814>
     a10:	775f0045 	ldrbvc	r0, [pc, -r5, asr #32]
     a14:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     a18:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
     a1c:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
     a20:	69775f67 	ldmdbvs	r7!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     a24:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     a28:	73635f70 	cmnvc	r3, #112, 30	; 0x1c0
     a2c:	6662635f 			; <UNDEFINED> instruction: 0x6662635f
     a30:	00636e75 	rsbeq	r6, r3, r5, ror lr
     a34:	445f4b49 	ldrbmi	r4, [pc], #-2889	; a3c <_Min_Stack_Size+0x83c>
     a38:	5f545345 	svcpl	0x00545345
     a3c:	45524e55 	ldrbmi	r4, [r2, #-3669]	; 0xfffff1ab
     a40:	00484341 	subeq	r4, r8, r1, asr #6
     a44:	535f5743 	cmppl	pc, #17563648	; 0x10c0000
     a48:	505f5445 	subspl	r5, pc, r5, asr #8
     a4c:	4f505948 	svcmi	0x00505948
     a50:	444f4d57 	strbmi	r4, [pc], #-3415	; a58 <_Min_Stack_Size+0x858>
     a54:	65720045 	ldrbvs	r0, [r2, #-69]!	; 0xffffffbb
     a58:	69775f67 	ldmdbvs	r7!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     a5c:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     a60:	70735f70 	rsbsvc	r5, r3, r0, ror pc
     a64:	62635f69 	rsbvs	r5, r3, #420	; 0x1a4
     a68:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     a6c:	7a697700 	bvc	1a5e674 <_Min_Stack_Size+0x1a5e474>
     a70:	5f796870 	svcpl	0x00796870
     a74:	70746567 	rsbsvc	r6, r4, r7, ror #10
     a78:	74737968 	ldrbtvc	r7, [r3], #-2408	; 0xfffff698
     a7c:	63007461 	movwvs	r7, #1121	; 0x461
     a80:	69776c74 	ldmdbvs	r7!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     a84:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     a88:	79745f70 	ldmdbvc	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     a8c:	43006570 	movwmi	r6, #1392	; 0x570
     a90:	45475f57 	strbmi	r5, [r7, #-3927]	; 0xfffff0a9
     a94:	44495f54 	strbmi	r5, [r9], #-3924	; 0xfffff0ac
     a98:	69726300 	ldmdbvs	r2!, {r8, r9, sp, lr}^
     a9c:	78655f73 	stmdavc	r5!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     aa0:	74776300 	ldrbtvc	r6, [r7], #-768	; 0xfffffd00
     aa4:	00657079 	rsbeq	r7, r5, r9, ror r0
     aa8:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     aac:	5f706968 	svcpl	0x00706968
     ab0:	69726c63 	ldmdbvs	r2!, {r0, r1, r5, r6, sl, fp, sp, lr}^
     ab4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     ab8:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
     abc:	7a697700 	bvc	1a5e6c4 <_Min_Stack_Size+0x1a5e4c4>
     ac0:	70696863 	rsbvc	r6, r9, r3, ror #16
     ac4:	5f73635f 	svcpl	0x0073635f
     ac8:	65736564 	ldrbvs	r6, [r3, #-1380]!	; 0xfffffa9c
     acc:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
     ad0:	656e7000 	strbvs	r7, [lr, #-0]!
     ad4:	666e6974 			; <UNDEFINED> instruction: 0x666e6974
     ad8:	4b49006f 	blmi	1240c9c <_Min_Stack_Size+0x1240a9c>
     adc:	5050505f 	subspl	r5, r0, pc, asr r0
     ae0:	545f454f 	ldrbpl	r4, [pc], #-1359	; ae8 <_Min_Stack_Size+0x8e8>
     ae4:	494d5245 	stmdbmi	sp, {r0, r2, r6, r9, ip, lr}^
     ae8:	4554414e 	ldrbmi	r4, [r4, #-334]	; 0xfffffeb2
     aec:	57430044 	strbpl	r0, [r3, -r4, asr #32]
     af0:	5445475f 	strbpl	r4, [r5], #-1887	; 0xfffff8a1
     af4:	5948505f 	stmdbpl	r8, {r0, r1, r2, r3, r4, r6, ip, lr}^
     af8:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
     afc:	4e445f00 	cdpmi	15, 4, cr5, cr4, cr0, {0}
     b00:	43005f53 	movwmi	r5, #3923	; 0xf53
     b04:	45475f57 	strbmi	r5, [r7, #-3927]	; 0xfffff0a9
     b08:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
     b0c:	414d5254 	cmpmi	sp, r4, asr r2
     b10:	63004b53 	movwvs	r4, #2899	; 0xb53
     b14:	656e6c74 	strbvs	r6, [lr, #-3188]!	; 0xfffff38c
     b18:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
     b1c:	79745f6b 	ldmdbvc	r4!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     b20:	5f006570 	svcpl	0x00006570
     b24:	53495243 	movtpl	r5, #37443	; 0x9243
     b28:	6d747000 	ldclvs	0, cr7, [r4, #-0]
     b2c:	6e690070 	mcrvs	0, 3, r0, cr9, cr0, {3}
     b30:	6b5f7274 	blvs	17dd508 <_Min_Stack_Size+0x17dd308>
     b34:	00646e69 	rsbeq	r6, r4, r9, ror #28
     b38:	475f5743 	ldrbmi	r5, [pc, -r3, asr #14]
     b3c:	505f5445 	subspl	r5, pc, r5, asr #8
     b40:	494c5948 	stmdbmi	ip, {r3, r6, r8, fp, ip, lr}^
     b44:	43004b4e 	movwmi	r4, #2894	; 0xb4e
     b48:	45475f57 	strbmi	r5, [r7, #-3927]	; 0xfffff0a9
     b4c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
     b50:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
     b54:	00545055 	subseq	r5, r4, r5, asr r0
     b58:	6d5f6669 	ldclvs	6, cr6, [pc, #-420]	; 9bc <_Min_Stack_Size+0x7bc>
     b5c:	0065646f 	rsbeq	r6, r5, pc, ror #8
     b60:	726d6973 	rsbvc	r6, sp, #1884160	; 0x1cc000
     b64:	7a697700 	bvc	1a5e76c <_Min_Stack_Size+0x1a5e56c>
     b68:	74654e5f 	strbtvc	r4, [r5], #-3679	; 0xfffff1a1
     b6c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     b70:	5f74756f 	svcpl	0x0074756f
     b74:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
     b78:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     b7c:	77735f70 			; <UNDEFINED> instruction: 0x77735f70
     b80:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
     b84:	49007465 	stmdbmi	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
     b88:	4f535f4b 	svcmi	0x00535f4b
     b8c:	305f4b43 	subscc	r4, pc, r3, asr #22
     b90:	5f4b4900 	svcpl	0x004b4900
     b94:	4b434f53 	blmi	10d48e8 <_Min_Stack_Size+0x10d46e8>
     b98:	4900315f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, ip, sp}
     b9c:	4f535f4b 	svcmi	0x00535f4b
     ba0:	325f4b43 	subscc	r4, pc, #68608	; 0x10c00
     ba4:	5f4b4900 	svcpl	0x004b4900
     ba8:	4b434f53 	blmi	10d48fc <_Min_Stack_Size+0x10d46fc>
     bac:	4900335f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp}
     bb0:	4f535f4b 	svcmi	0x00535f4b
     bb4:	345f4b43 	ldrbcc	r4, [pc], #-2883	; bbc <_Min_Stack_Size+0x9bc>
     bb8:	5f4b4900 	svcpl	0x004b4900
     bbc:	4b434f53 	blmi	10d4910 <_Min_Stack_Size+0x10d4710>
     bc0:	4900355f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp}
     bc4:	4f535f4b 	svcmi	0x00535f4b
     bc8:	365f4b43 	ldrbcc	r4, [pc], -r3, asr #22
     bcc:	6f682f00 	svcvs	0x00682f00
     bd0:	762f656d 	strtvc	r6, [pc], -sp, ror #10
     bd4:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
     bd8:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
     bdc:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
     be0:	544f492d 	strbpl	r4, [pc], #-2349	; be8 <_Min_Stack_Size+0x9e8>
     be4:	6874452f 	ldmdavs	r4!, {r0, r1, r2, r3, r5, r8, sl, lr}^
     be8:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     bec:	69772f74 	ldmdbvs	r7!, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
     bf0:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     bf4:	6f635f70 	svcvs	0x00635f70
     bf8:	632e666e 			; <UNDEFINED> instruction: 0x632e666e
     bfc:	64644100 	strbtvs	r4, [r4], #-256	; 0xffffff00
     c00:	6c655372 	stclvs	3, cr5, [r5], #-456	; 0xfffffe38
     c04:	5f736300 	svcpl	0x00736300
     c08:	65736564 	ldrbvs	r6, [r3, #-1380]!	; 0xfffffa9c
     c0c:	7073006c 	rsbsvc	r0, r3, ip, rrx
     c10:	62725f69 	rsbsvs	r5, r2, #420	; 0x1a4
     c14:	5f574300 	svcpl	0x00574300
     c18:	54494e49 	strbpl	r4, [r9], #-3657	; 0xfffff1b7
     c1c:	5a49575f 	bpl	12569a0 <_Min_Stack_Size+0x12567a0>
     c20:	50494843 	subpl	r4, r9, r3, asr #16
     c24:	70756400 	rsbsvc	r6, r5, r0, lsl #8
     c28:	0078656c 	rsbseq	r6, r8, ip, ror #10
     c2c:	525f5743 	subspl	r5, pc, #17563648	; 0x10c0000
     c30:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
     c34:	5948505f 	stmdbpl	r8, {r0, r1, r2, r3, r4, r6, ip, lr}^
     c38:	7a697700 	bvc	1a5e840 <_Min_Stack_Size+0x1a5e640>
     c3c:	70696863 	rsbvc	r6, r9, r3, ror #16
     c40:	6972635f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
     c44:	78655f73 	stmdavc	r5!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     c48:	43007469 	movwmi	r7, #1129	; 0x469
     c4c:	45475f4e 	strbmi	r5, [r7, #-3918]	; 0xfffff0b2
     c50:	49545f54 	ldmdbmi	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     c54:	554f454d 	strbpl	r4, [pc, #-1357]	; 70f <_Min_Stack_Size+0x50f>
     c58:	69770054 	ldmdbvs	r7!, {r2, r4, r6}^
     c5c:	68505f7a 	ldmdavs	r0, {r1, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     c60:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
     c64:	68640066 	stmdavs	r4!, {r1, r2, r5, r6}^
     c68:	77007063 	strvc	r7, [r0, -r3, rrx]
     c6c:	68637a69 	stmdavs	r3!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
     c70:	735f7069 	cmpvc	pc, #105	; 0x69
     c74:	656e7465 	strbvs	r7, [lr, #-1125]!	; 0xfffffb9b
     c78:	646f6d74 	strbtvs	r6, [pc], #-3444	; c80 <_Min_Stack_Size+0xa80>
     c7c:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
     c80:	69775f67 	ldmdbvs	r7!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     c84:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     c88:	72635f70 	rsbvc	r5, r3, #112, 30	; 0x1c0
     c8c:	635f7369 	cmpvs	pc, #-1543503871	; 0xa4000001
     c90:	6e756662 	cdpvs	6, 7, cr6, cr5, cr2, {3}
     c94:	70730063 	rsbsvc	r0, r3, r3, rrx
     c98:	00646565 	rsbeq	r6, r4, r5, ror #10
     c9c:	707a6977 	rsbsvc	r6, sl, r7, ror r9
     ca0:	675f7968 	ldrbvs	r7, [pc, -r8, ror #18]
     ca4:	68707465 	ldmdavs	r0!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     ca8:	6e6f6379 	mcrvs	3, 3, r6, cr15, cr9, {3}
     cac:	78720066 	ldmdavc	r2!, {r1, r2, r5, r6}^
     cb0:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     cb4:	5f4d4e00 	svcpl	0x004d4e00
     cb8:	454b4157 	strbmi	r4, [fp, #-343]	; 0xfffffea9
     cbc:	414c4e4f 	cmpmi	ip, pc, asr #28
     cc0:	4b49004e 	blmi	1240e00 <_Min_Stack_Size+0x1240c00>
     cc4:	434f535f 	movtmi	r5, #62303	; 0xf35f
     cc8:	4c415f4b 	mcrrmi	15, 4, r5, r1, cr11
     ccc:	7562004c 	strbvc	r0, [r2, #-76]!	; 0xffffffb4
     cd0:	62775f73 	rsbsvs	r5, r7, #460	; 0x1cc
     cd4:	5f574300 	svcpl	0x00574300
     cd8:	5f544547 	svcpl	0x00544547
     cdc:	52544e49 	subspl	r4, r4, #1168	; 0x490
     ce0:	454d4954 	strbmi	r4, [sp, #-2388]	; 0xfffff6ac
     ce4:	7a697700 	bvc	1a5e8ec <_Min_Stack_Size+0x1a5e6ec>
     ce8:	70696863 	rsbvc	r6, r9, r3, ror #16
     cec:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
     cf0:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
     cf4:	7968707a 	stmdbvc	r8!, {r1, r3, r4, r5, r6, ip, sp, lr}^
     cf8:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
     cfc:	77007465 	strvc	r7, [r0, -r5, ror #8]
     d00:	68637a69 	stmdavs	r3!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
     d04:	675f7069 	ldrbvs	r7, [pc, -r9, rrx]
     d08:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     d0c:	756f656d 	strbvc	r6, [pc, #-1389]!	; 7a7 <_Min_Stack_Size+0x5a7>
     d10:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
     d14:	7968707a 	stmdbvc	r8!, {r1, r3, r4, r5, r6, ip, sp, lr}^
     d18:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     d1c:	70796870 	rsbsvc	r6, r9, r0, ror r8
     d20:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
     d24:	54454e00 	strbpl	r4, [r5], #-3584	; 0xfffff200
     d28:	4f464e49 	svcmi	0x00464e49
     d2c:	4348445f 	movtmi	r4, #33887	; 0x845f
     d30:	64610050 	strbtvs	r0, [r1], #-80	; 0xffffffb0
     d34:	65737264 	ldrbvs	r7, [r3, #-612]!	; 0xfffffd9c
     d38:	4957006c 	ldmdbmi	r7, {r2, r3, r5, r6}^
     d3c:	4948435a 	stmdbmi	r8, {r1, r3, r4, r6, r8, r9, lr}^
     d40:	52575f50 	subspl	r5, r7, #80, 30	; 0x140
     d44:	5f455449 	svcpl	0x00455449
     d48:	00465542 	subeq	r5, r6, r2, asr #10
     d4c:	5f7a6977 	svcpl	0x007a6977
     d50:	76636572 			; <UNDEFINED> instruction: 0x76636572
     d54:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
     d58:	42700061 	rsbsmi	r0, r0, #97	; 0x61
     d5c:	57006675 	smlsdxpl	r0, r5, r6, r6
     d60:	48435a49 	stmdami	r3, {r0, r3, r6, r9, fp, ip, lr}^
     d64:	525f5049 	subspl	r5, pc, #73	; 0x49
     d68:	00444145 	subeq	r4, r4, r5, asr #2
     d6c:	53746567 	cmnpl	r4, #432013312	; 0x19c00000
     d70:	58545f6e 	ldmdapl	r4, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     d74:	5253465f 	subspl	r4, r3, #99614720	; 0x5f00000
     d78:	6c617600 	stclvs	6, cr7, [r1], #-0
     d7c:	69770031 	ldmdbvs	r7!, {r0, r4, r5}^
     d80:	7461647a 	strbtvc	r6, [r1], #-1146	; 0xfffffb86
     d84:	69770061 	ldmdbvs	r7!, {r0, r5, r6}^
     d88:	65725f7a 	ldrbvs	r5, [r2, #-3962]!	; 0xfffff086
     d8c:	695f7663 	ldmdbvs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     d90:	726f6e67 	rsbvc	r6, pc, #1648	; 0x670
     d94:	49570065 	ldmdbmi	r7, {r0, r2, r5, r6}^
     d98:	4948435a 	stmdbmi	r8, {r1, r3, r4, r6, r8, r9, lr}^
     d9c:	45525f50 	ldrbmi	r5, [r2, #-3920]	; 0xfffff0b0
     da0:	425f4441 	subsmi	r4, pc, #1090519040	; 0x41000000
     da4:	67004655 	smlsdvs	r0, r5, r6, r4
     da8:	6e537465 	cdpvs	4, 5, cr7, cr3, cr5, {3}
     dac:	5f58525f 	svcpl	0x0058525f
     db0:	00525352 	subseq	r5, r2, r2, asr r3
     db4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; d00 <_Min_Stack_Size+0xb00>
     db8:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     dbc:	76737572 			; <UNDEFINED> instruction: 0x76737572
     dc0:	4144542f 	cmpmi	r4, pc, lsr #8
     dc4:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
     dc8:	2f544f49 	svccs	0x00544f49
     dcc:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
     dd0:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
     dd4:	3535572f 	ldrcc	r5, [r5, #-1839]!	; 0xfffff8d1
     dd8:	772f3030 			; <UNDEFINED> instruction: 0x772f3030
     ddc:	30303535 	eorscc	r3, r0, r5, lsr r5
     de0:	7700632e 	strvc	r6, [r0, -lr, lsr #6]
     de4:	735f7a69 	cmpvc	pc, #430080	; 0x69000
     de8:	5f646e65 	svcpl	0x00646e65
     dec:	61746164 	cmnvs	r4, r4, ror #2
     df0:	5a495700 	bpl	12569f8 <_Min_Stack_Size+0x12567f8>
     df4:	50494843 	subpl	r4, r9, r3, asr #16
     df8:	4952575f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     dfc:	63004554 	movwvs	r4, #1364	; 0x554
     e00:	6b636568 	blvs	18da3a8 <_Min_Stack_Size+0x18da1a8>
     e04:	4348445f 	movtmi	r4, #33887	; 0x845f
     e08:	74735f50 	ldrbtvc	r5, [r3], #-3920	; 0xfffff0b0
     e0c:	00657461 	rsbeq	r7, r5, r1, ror #8
     e10:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     e14:	5f706968 	svcpl	0x00706968
     e18:	0063616d 	rsbeq	r6, r3, sp, ror #2
     e1c:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
     e20:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
     e24:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
     e28:	534f4942 	movtpl	r4, #63810	; 0xf942
     e2c:	706f6373 	rsbvc	r6, pc, r3, ror r3	; <UNPREDICTABLE>
     e30:	48440065 	stmdami	r4, {r0, r2, r5, r6}^
     e34:	615f5043 	cmpvs	pc, r3, asr #32
     e38:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     e3c:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
     e40:	006e735f 	rsbeq	r7, lr, pc, asr r3
     e44:	73706f68 	cmnvc	r0, #104, 30	; 0x1a0
     e48:	43484400 	movtmi	r4, #33792	; 0x8400
     e4c:	41465f50 	cmpmi	r6, r0, asr pc
     e50:	44454c49 	strbmi	r4, [r5], #-3145	; 0xfffff3b7
     e54:	79746800 	ldmdbvc	r4!, {fp, sp, lr}^
     e58:	6c006570 	cfstr32vs	mvfx6, [r0], {112}	; 0x70
     e5c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
     e60:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     e64:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
     e68:	6553656d 	ldrbvs	r6, [r3, #-1389]	; 0xfffffa93
     e6c:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
     e70:	63686400 	cmnvs	r8, #0, 8
     e74:	61504970 	cmpvs	r0, r0, ror r9
     e78:	4c726464 	cfldrdmi	mvd6, [r2], #-400	; 0xfffffe70
     e7c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
     e80:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     e84:	61727400 	cmnvs	r2, r0, lsl #8
     e88:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
     e8c:	61636e45 	cmnvs	r3, r5, asr #28
     e90:	6c757370 	ldclvs	3, cr7, [r5], #-448	; 0xfffffe40
     e94:	6f697461 	svcvs	0x00697461
     e98:	4844006e 	stmdami	r4, {r1, r2, r3, r5, r6}^
     e9c:	525f5043 	subspl	r5, pc, #67	; 0x43
     ea0:	494e4e55 	stmdbmi	lr, {r0, r2, r4, r6, r9, sl, fp, lr}^
     ea4:	6400474e 	strvs	r4, [r0], #-1870	; 0xfffff8b2
     ea8:	52706368 	rsbspl	r6, r0, #104, 6	; 0xa0000001
     eac:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
     eb0:	64657473 	strbtvs	r7, [r5], #-1139	; 0xfffffb8d
     eb4:	64615049 	strbtvs	r5, [r1], #-73	; 0xffffffb7
     eb8:	6f007264 	svcvs	0x00007264
     ebc:	6c5f7470 	cfldrdvs	mvd7, [pc], {112}	; 0x70
     ec0:	6c006e65 	stcvs	14, cr6, [r0], {101}	; 0x65
     ec4:	6553676f 	ldrbvs	r6, [r3, #-1903]	; 0xfffff891
     ec8:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
     ecc:	61696300 	cmnvs	r9, r0, lsl #6
     ed0:	00726464 	rsbseq	r6, r2, r4, ror #8
     ed4:	6e656c68 	cdpvs	12, 6, cr6, cr5, cr8, {3}
     ed8:	43484400 	movtmi	r4, #33792	; 0x8400
     edc:	50495f50 	subpl	r5, r9, r0, asr pc
     ee0:	4148435f 	cmpmi	r8, pc, asr r3
     ee4:	4445474e 	strbmi	r4, [r5], #-1870	; 0xfffff8b2
     ee8:	61686300 	cmnvs	r8, r0, lsl #6
     eec:	00726464 	rsbseq	r6, r2, r4, ror #8
     ef0:	70636864 	rsbvc	r6, r3, r4, ror #16
     ef4:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
     ef8:	6449746e 	strbvs	r7, [r9], #-1134	; 0xfffffb92
     efc:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     f00:	72656966 	rsbvc	r6, r5, #1671168	; 0x198000
     f04:	756f7200 	strbvc	r7, [pc, #-512]!	; d0c <_Min_Stack_Size+0xb0c>
     f08:	53726574 	cmnpl	r2, #116, 10	; 0x1d000000
     f0c:	63696c6f 	cmnvs	r9, #28416	; 0x6f00
     f10:	74617469 	strbtvc	r7, [r1], #-1129	; 0xfffffb97
     f14:	416e6f69 	cmnmi	lr, r9, ror #30
     f18:	00726464 	rsbseq	r6, r2, r4, ror #8
     f1c:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
     f20:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     f24:	68640065 	stmdavs	r4!, {r0, r2, r5, r6}^
     f28:	6c437063 	mcrrvs	0, 6, r7, r3, cr3
     f2c:	49737361 	ldmdbmi	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     f30:	746e6564 	strbtvc	r6, [lr], #-1380	; 0xfffffa9c
     f34:	65696669 	strbvs	r6, [r9, #-1641]!	; 0xfffff997
     f38:	76730072 			; <UNDEFINED> instruction: 0x76730072
     f3c:	6f705f72 	svcvs	0x00705f72
     f40:	6e007472 	mcrvs	4, 0, r7, cr0, cr2, {3}
     f44:	6f447369 	svcvs	0x00447369
     f48:	6e69616d 	powvsez	f6, f1, #5.0
     f4c:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
     f50:	5f796d00 	svcpl	0x00796d00
     f54:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     f58:	63686400 	cmnvs	r8, #0, 8
     f5c:	76315470 			; <UNDEFINED> instruction: 0x76315470
     f60:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     f64:	72656d00 	rsbvc	r6, r5, #0, 26
     f68:	75447469 	strbvc	r7, [r4, #-1129]	; 0xfffffb97
     f6c:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     f70:	4400656c 	strmi	r6, [r0], #-1388	; 0xfffffa94
     f74:	5f504348 	svcpl	0x00504348
     f78:	4b434f53 	blmi	10d4ccc <_Min_Stack_Size+0x10d4acc>
     f7c:	70005445 	andvc	r5, r0, r5, asr #8
     f80:	63696c6f 	cmnvs	r9, #28416	; 0x6f00
     f84:	6c694679 	stclvs	6, cr4, [r9], #-484	; 0xfffffe1c
     f88:	00726574 	rsbseq	r6, r2, r4, ror r5
     f8c:	6e627573 	mcrvs	5, 3, r7, cr2, cr3, {3}
     f90:	614d7465 	cmpvs	sp, r5, ror #8
     f94:	6e006b73 	vmovvs.16	d0[1], r6
     f98:	49427465 	stmdbmi	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
     f9c:	6f6e534f 	svcvs	0x006e534f
     fa0:	79546564 	ldmdbvc	r4, {r2, r5, r6, r8, sl, sp, lr}^
     fa4:	64006570 	strvs	r6, [r0], #-1392	; 0xfffffa90
     fa8:	4d706368 	ldclmi	3, cr6, [r0, #-416]!	; 0xfffffe60
     fac:	734d7861 	movtvc	r7, #55393	; 0xd861
     fb0:	7a695367 	bvc	1a55d54 <_Min_Stack_Size+0x1a55b54>
     fb4:	616d0065 	cmnvs	sp, r5, rrx
     fb8:	72674478 	rsbvc	r4, r7, #120, 8	; 0x78000000
     fbc:	65526d61 	ldrbvs	r6, [r2, #-3425]	; 0xfffff29f
     fc0:	536d7361 	cmnpl	sp, #-2080374783	; 0x84000001
     fc4:	00657a69 	rsbeq	r7, r5, r9, ror #20
     fc8:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
     fcc:	4348445f 	movtmi	r4, #33887	; 0x845f
     fd0:	45525f50 	ldrbmi	r5, [r2, #-3920]	; 0xfffff0b0
     fd4:	53455551 	movtpl	r5, #21841	; 0x5551
     fd8:	48440054 	stmdami	r4, {r2, r4, r6}^
     fdc:	615f5043 	cmpvs	pc, r3, asr #32
     fe0:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     fe4:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
     fe8:	0077675f 	rsbseq	r6, r7, pc, asr r7
     fec:	44706374 	ldrbtmi	r6, [r0], #-884	; 0xfffffc8c
     ff0:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
     ff4:	5454746c 	ldrbpl	r7, [r4], #-1132	; 0xfffffb94
     ff8:	6570004c 	ldrbvs	r0, [r0, #-76]!	; 0xffffffb4
     ffc:	726f6672 	rsbvc	r6, pc, #119537664	; 0x7200000
    1000:	756f526d 	strbvc	r5, [pc, #-621]!	; d9b <_Min_Stack_Size+0xb9b>
    1004:	44726574 	ldrbtmi	r6, [r2], #-1396	; 0xfffffa8c
    1008:	6f637369 	svcvs	0x00637369
    100c:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    1010:	63686400 	cmnvs	r8, #0, 8
    1014:	70695f70 	rsbvc	r5, r9, r0, ror pc
    1018:	6470755f 	ldrbtvs	r7, [r0], #-1375	; 0xfffffaa1
    101c:	00657461 	rsbeq	r7, r5, r1, ror #8
    1020:	50434844 	subpl	r4, r3, r4, asr #16
    1024:	5049535f 	subpl	r5, r9, pc, asr r3
    1028:	61566300 	cmpvs	r6, r0, lsl #6
    102c:	6f6e006c 	svcvs	0x006e006c
    1030:	636f4c6e 	cmnvs	pc, #28160	; 0x6e00
    1034:	6f536c61 	svcvs	0x00536c61
    1038:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    103c:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
    1040:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1044:	65747865 	ldrbvs	r7, [r4, #-2149]!	; 0xfffff79b
    1048:	6f69746e 	svcvs	0x0069746e
    104c:	6150736e 	cmpvs	r0, lr, ror #6
    1050:	62006874 	andvs	r6, r0, #116, 16	; 0x740000
    1054:	64616f72 	strbtvs	r6, [r1], #-3954	; 0xfffff08e
    1058:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
    105c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1060:	63686400 	cmnvs	r8, #0, 8
    1064:	74704f70 	ldrbtvc	r4, [r0], #-3952	; 0xfffff090
    1068:	4f6e6f69 	svcmi	0x006e6f69
    106c:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    1070:	0064616f 	rsbeq	r6, r4, pc, ror #2
    1074:	72706d69 	rsbsvc	r6, r0, #6720	; 0x1a40
    1078:	53737365 	cmnpl	r3, #-1811939327	; 0x94000001
    107c:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1080:	61700072 	cmnvs	r0, r2, ror r0
    1084:	544d6874 	strbpl	r6, [sp], #-2164	; 0xfffff78c
    1088:	69676155 	stmdbvs	r7!, {r0, r2, r4, r6, r8, sp, lr}^
    108c:	6954676e 	ldmdbvs	r4, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1090:	756f656d 	strbvc	r6, [pc, #-1389]!	; b2b <_Min_Stack_Size+0x92b>
    1094:	66690074 			; <UNDEFINED> instruction: 0x66690074
    1098:	0055544d 	subseq	r5, r5, sp, asr #8
    109c:	49746567 	ldmdbmi	r4!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
    10a0:	6f726650 	svcvs	0x00726650
    10a4:	4348446d 	movtmi	r4, #33901	; 0x846d
    10a8:	50490050 	subpl	r0, r9, r0, asr r0
    10ac:	77726f66 	ldrbvc	r6, [r2, -r6, ror #30]!
    10b0:	69647261 	stmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    10b4:	4800676e 	stmdami	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    10b8:	5f54534f 	svcpl	0x0054534f
    10bc:	454d414e 	strbmi	r4, [sp, #-334]	; 0xfffffeb2
    10c0:	43484400 	movtmi	r4, #33792	; 0x8400
    10c4:	6c615f50 	stclvs	15, cr5, [r1], #-320	; 0xfffffec0
    10c8:	61636f6c 	cmnvs	r3, ip, ror #30
    10cc:	5f646574 	svcpl	0x00646574
    10d0:	74007069 	strvc	r7, [r0], #-105	; 0xffffff97
    10d4:	654b7063 	strbvs	r7, [fp, #-99]	; 0xffffff9d
    10d8:	6c617065 	stclvs	0, cr7, [r1], #-404	; 0xfffffe6c
    10dc:	49657669 	stmdbmi	r5!, {r0, r3, r5, r6, r9, sl, ip, sp, lr}^
    10e0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    10e4:	006c6176 	rsbeq	r6, ip, r6, ror r1
    10e8:	61666564 	cmnvs	r6, r4, ror #10
    10ec:	49746c75 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    10f0:	4c545450 	cfldrdmi	mvd5, [r4], {80}	; 0x50
    10f4:	50495200 	subpl	r5, r9, r0, lsl #4
    10f8:	47534d5f 			; <UNDEFINED> instruction: 0x47534d5f
    10fc:	6d6f6400 	cfstrdvs	mvd6, [pc, #-0]	; 1104 <_Min_Stack_Size+0xf04>
    1100:	4e6e6961 	vnmulmi.f16	s13, s28, s3	; <UNPREDICTABLE>
    1104:	00656d61 	rsbeq	r6, r5, r1, ror #26
    1108:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
    110c:	4348445f 	movtmi	r4, #33887	; 0x845f
    1110:	45445f50 	strbmi	r5, [r4, #-3920]	; 0xfffff0b0
    1114:	4e494c43 	cdpmi	12, 4, cr4, cr9, cr3, {2}
    1118:	4c4f0045 	mcrrmi	0, 4, r0, pc, cr5
    111c:	49535f44 	ldmdbmi	r3, {r2, r6, r8, r9, sl, fp, ip, lr}^
    1120:	6e650050 	mcrvs	0, 3, r0, cr5, cr0, {2}
    1124:	74704f64 	ldrbtvc	r4, [r0], #-3940	; 0xfffff09c
    1128:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    112c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1130:	6f526369 	svcvs	0x00526369
    1134:	00657475 	rsbeq	r7, r5, r5, ror r4
    1138:	4274656e 	rsbsmi	r6, r4, #461373440	; 0x1b800000
    113c:	64534f49 	ldrbvs	r4, [r3], #-3913	; 0xfffff0b7
    1140:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    1144:	74736944 	ldrbtvc	r6, [r3], #-2372	; 0xfffff6bc
    1148:	76726553 			; <UNDEFINED> instruction: 0x76726553
    114c:	79007265 	stmdbvc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    1150:	64646169 	strbtvs	r6, [r4], #-361	; 0xfffffe97
    1154:	65760072 	ldrbvs	r0, [r6, #-114]!	; 0xffffff8e
    1158:	726f646e 	rsbvc	r6, pc, #1845493760	; 0x6e000000
    115c:	63657053 	cmnvs	r5, #83	; 0x53
    1160:	63696669 	cmnvs	r9, #110100480	; 0x6900000
    1164:	6f666e49 	svcvs	0x00666e49
    1168:	61566c00 	cmpvs	r6, r0, lsl #24
    116c:	4678006c 	ldrbtmi	r0, [r8], -ip, rrx
    1170:	53746e6f 	cmnpl	r4, #1776	; 0x6f0
    1174:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1178:	65730072 	ldrbvs	r0, [r3, #-114]!	; 0xffffff8e
    117c:	63007363 	movwvs	r7, #867	; 0x363
    1180:	696b6f6f 	stmdbvs	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1184:	72655365 	rsbvc	r5, r5, #-1811939327	; 0x94000001
    1188:	00726576 	rsbseq	r6, r2, r6, ror r5
    118c:	70636864 	rsbvc	r6, r3, r4, ror #16
    1190:	0067734d 	rsbeq	r7, r7, sp, asr #6
    1194:	47746567 	ldrbmi	r6, [r4, -r7, ror #10]!
    1198:	6f726657 	svcvs	0x00726657
    119c:	4348446d 	movtmi	r4, #33901	; 0x846d
    11a0:	48440050 	stmdami	r4, {r4, r6}^
    11a4:	535f5043 	cmppl	pc, #67	; 0x43
    11a8:	73004148 	movwvc	r4, #328	; 0x148
    11ac:	5f646e65 	svcpl	0x00646e65
    11b0:	50434844 	subpl	r4, r3, r4, asr #16
    11b4:	5349445f 	movtpl	r4, #37983	; 0x945f
    11b8:	45564f43 	ldrbmi	r4, [r6, #-3907]	; 0xfffff0bd
    11bc:	616d0052 	qdsubvs	r0, r2, sp
    11c0:	75536b73 	ldrbvc	r6, [r3, #-2931]	; 0xfffff48d
    11c4:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
    11c8:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
    11cc:	5f504348 	svcpl	0x00504348
    11d0:	00444958 	subeq	r4, r4, r8, asr r9
    11d4:	64616967 	strbtvs	r6, [r1], #-2407	; 0xfffff699
    11d8:	70007264 	andvc	r7, r0, r4, ror #4
    11dc:	6f667265 	svcvs	0x00667265
    11e0:	614d6d72 	hvcvs	54994	; 0xd6d2
    11e4:	69446b73 	stmdbvs	r4, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    11e8:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    11ec:	00797265 	rsbseq	r7, r9, r5, ror #4
    11f0:	5372706c 	cmnpl	r2, #108	; 0x6c
    11f4:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    11f8:	755f0072 	ldrbvc	r0, [pc, #-114]	; 118e <_Min_Stack_Size+0xf8e>
    11fc:	326c5f6e 	rsbcc	r5, ip, #440	; 0x1b8
    1200:	6c617663 	stclvs	6, cr7, [r1], #-396	; 0xfffffe74
    1204:	63686400 	cmnvs	r8, #0, 8
    1208:	70695f70 	rsbvc	r5, r9, r0, ror pc
    120c:	7373615f 	cmnvc	r3, #-1073741801	; 0xc0000017
    1210:	006e6769 	rsbeq	r6, lr, r9, ror #14
    1214:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    1218:	66664f72 	uqsub16vs	r4, r6, r2
    121c:	00746573 	rsbseq	r6, r4, r3, ror r5
    1220:	50434844 	subpl	r4, r3, r4, asr #16
    1224:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1228:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
    122c:	6275536c 	rsbsvs	r5, r5, #108, 6	; 0xb0000001
    1230:	7374656e 	cmnvc	r4, #461373440	; 0x1b800000
    1234:	61636f4c 	cmnvs	r3, ip, asr #30
    1238:	6374006c 	cmnvs	r4, #108	; 0x6c
    123c:	65654b70 	strbvs	r4, [r5, #-2928]!	; 0xfffff490
    1240:	696c6170 	stmdbvs	ip!, {r4, r5, r6, r8, sp, lr}^
    1244:	61476576 	hvcvs	30294	; 0x7656
    1248:	67616272 			; <UNDEFINED> instruction: 0x67616272
    124c:	68640065 	stmdavs	r4!, {r0, r2, r5, r6}^
    1250:	695f7063 	ldmdbvs	pc, {r0, r1, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    1254:	6f635f70 	svcvs	0x00635f70
    1258:	696c666e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r9, sl, sp, lr}^
    125c:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
    1260:	50706368 	rsbspl	r6, r0, r8, ror #6
    1264:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    1268:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
    126c:	00747365 	rsbseq	r7, r4, r5, ror #6
    1270:	5373696e 	cmnpl	r3, #1802240	; 0x1b8000
    1274:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1278:	73007372 	movwvc	r7, #882	; 0x372
    127c:	53706177 	cmnpl	r0, #-1073741795	; 0xc000001d
    1280:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1284:	746e0072 	strbtvc	r0, [lr], #-114	; 0xffffff8e
    1288:	72655370 	rsbvc	r5, r5, #112, 6	; 0xc0000001
    128c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    1290:	73657200 	cmnvc	r5, #0, 4
    1294:	445f7465 	ldrbmi	r7, [pc], #-1125	; 129c <_Min_Stack_Size+0x109c>
    1298:	5f504348 	svcpl	0x00504348
    129c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    12a0:	0074756f 	rsbseq	r7, r4, pc, ror #10
    12a4:	50434844 	subpl	r4, r3, r4, asr #16
    12a8:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    12ac:	61487265 	cmpvs	r8, r5, ror #4
    12b0:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    12b4:	6f720072 	svcvs	0x00720072
    12b8:	72657475 	rsbvc	r7, r5, #1962934272	; 0x75000000
    12bc:	536e4f73 	cmnpl	lr, #460	; 0x1cc
    12c0:	656e6275 	strbvs	r6, [lr, #-629]!	; 0xfffffd8b
    12c4:	74650074 	strbtvc	r0, [r5], #-116	; 0xffffff8c
    12c8:	6e726568 	cdpvs	5, 7, cr6, cr2, cr8, {3}
    12cc:	6e457465 	cdpvs	4, 4, cr7, cr5, cr5, {3}
    12d0:	73706163 	cmnvc	r0, #-1073741800	; 0xc0000018
    12d4:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
    12d8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    12dc:	70636864 	rsbvc	r6, r3, r4, ror #16
    12e0:	61763254 	cmnvs	r6, r4, asr r2
    12e4:	0065756c 	rsbeq	r7, r5, ip, ror #10
    12e8:	73694478 	cmnvc	r9, #120, 8	; 0x78000000
    12ec:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
    12f0:	616e614d 	cmnvs	lr, sp, asr #2
    12f4:	00726567 	rsbseq	r6, r2, r7, ror #10
    12f8:	53746567 	cmnpl	r4, #432013312	; 0x19c00000
    12fc:	6f72664e 	svcvs	0x0072664e
    1300:	4348446d 	movtmi	r4, #33901	; 0x846d
    1304:	48440050 	stmdami	r4, {r4, r6}^
    1308:	615f5043 	cmpvs	pc, r3, asr #32
    130c:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    1310:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
    1314:	736e645f 	cmnvc	lr, #1593835520	; 0x5f000000
    1318:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    131c:	66534e44 	ldrbvs	r4, [r3], -r4, asr #28
    1320:	446d6f72 	strbtmi	r6, [sp], #-3954	; 0xfffff08e
    1324:	00504348 	subseq	r4, r0, r8, asr #6
    1328:	50434844 	subpl	r4, r3, r4, asr #16
    132c:	5f70695f 	svcpl	0x0070695f
    1330:	6e616863 	cdpvs	8, 6, cr6, cr1, cr3, {3}
    1334:	5f646567 	svcpl	0x00646567
    1338:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    133c:	63686400 	cmnvs	r8, #0, 8
    1340:	74735f70 	ldrbtvc	r5, [r3], #-3952	; 0xfffff090
    1344:	00657461 	rsbeq	r7, r5, r1, ror #8
    1348:	44746567 	ldrbtmi	r6, [r4], #-1383	; 0xfffffa99
    134c:	4c504348 	mrrcmi	3, 4, r4, r0, cr8
    1350:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
    1354:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    1358:	72767300 	rsbsvc	r7, r6, #0, 6
    135c:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
    1360:	65720072 	ldrbvs	r0, [r2, #-114]!	; 0xffffff8e
    1364:	72756f73 	rsbsvc	r6, r5, #460	; 0x1cc
    1368:	6f4c6563 	svcvs	0x004c6563
    136c:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    1370:	65536e6f 	ldrbvs	r6, [r3, #-3695]	; 0xfffff191
    1374:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
    1378:	72617000 	rsbvc	r7, r1, #0
    137c:	48446573 	stmdami	r4, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    1380:	534d5043 	movtpl	r5, #53315	; 0xd043
    1384:	72610047 	rsbvc	r0, r1, #71	; 0x47
    1388:	63614370 	cmnvs	r1, #112, 6	; 0xc0000001
    138c:	69546568 	ldmdbvs	r4, {r3, r5, r6, r8, sl, sp, lr}^
    1390:	756f656d 	strbvc	r6, [pc, #-1389]!	; e2b <_Min_Stack_Size+0xc2b>
    1394:	48440074 	stmdami	r4, {r2, r4, r5, r6}^
    1398:	725f5043 	subsvc	r5, pc, #67	; 0x43
    139c:	64006e75 	strvs	r6, [r0], #-3701	; 0xfffff18b
    13a0:	53706368 	cmnpl	r0, #104, 6	; 0xa0000001
    13a4:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    13a8:	65644972 	strbvs	r4, [r4, #-2418]!	; 0xfffff68e
    13ac:	6669746e 	strbtvs	r7, [r9], -lr, ror #8
    13b0:	00726569 	rsbseq	r6, r2, r9, ror #10
    13b4:	64616973 	strbtvs	r6, [r1], #-2419	; 0xfffff68d
    13b8:	72007264 	andvc	r7, r0, #100, 4	; 0x40000006
    13bc:	50746f6f 	rsbspl	r6, r4, pc, ror #30
    13c0:	00687461 	rsbeq	r7, r8, r1, ror #8
    13c4:	50434844 	subpl	r4, r3, r4, asr #16
    13c8:	5f50495f 	svcpl	0x0050495f
    13cc:	5341454c 	movtpl	r4, #5452	; 0x154c
    13d0:	63004445 	movwvs	r4, #1093	; 0x445
    13d4:	6b636568 	blvs	18da97c <_Min_Stack_Size+0x18da77c>
    13d8:	4348445f 	movtmi	r4, #33887	; 0x845f
    13dc:	656c5f50 	strbvs	r5, [ip, #-3920]!	; 0xfffff0b0
    13e0:	64657361 	strbtvs	r7, [r5], #-865	; 0xfffffc9f
    13e4:	62005049 	andvs	r5, r0, #73	; 0x49
    13e8:	46746f6f 	ldrbtmi	r6, [r4], -pc, ror #30
    13ec:	53656c69 	cmnpl	r5, #26880	; 0x6900
    13f0:	00657a69 	rsbeq	r7, r5, r9, ror #20
    13f4:	4274656e 	rsbsmi	r6, r4, #461373440	; 0x1b800000
    13f8:	6e534f49 	cdpvs	15, 5, cr4, cr3, cr9, {2}
    13fc:	53656d61 	cmnpl	r5, #6208	; 0x1840
    1400:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1404:	61700072 	cmnvs	r0, r2, ror r0
    1408:	74704f64 	ldrbtvc	r4, [r0], #-3940	; 0xfffff09c
    140c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1410:	50434844 	subpl	r4, r3, r4, asr #16
    1414:	4355535f 	cmpmi	r5, #2080374785	; 0x7c000001
    1418:	53534543 	cmppl	r3, #281018368	; 0x10c00000
    141c:	65686300 	strbvs	r6, [r8, #-768]!	; 0xfffffd00
    1420:	445f6b63 	ldrbmi	r6, [pc], #-2915	; 1428 <_Min_Stack_Size+0x1228>
    1424:	5f504348 	svcpl	0x00504348
    1428:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    142c:	0074756f 	rsbseq	r7, r4, pc, ror #10
    1430:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
    1434:	6f635f79 	svcvs	0x00635f79
    1438:	00746e75 	rsbseq	r6, r4, r5, ror lr
    143c:	68746170 	ldmdavs	r4!, {r4, r5, r6, r8, sp, lr}^
    1440:	7055544d 	subsvc	r5, r5, sp, asr #8
    1444:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0xfffffe94
    1448:	61547561 	cmpvs	r4, r1, ror #10
    144c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1450:	53524150 	cmppl	r2, #80, 2
    1454:	4e455f45 	cdpmi	15, 4, cr5, cr5, cr5, {2}
    1458:	6e730044 	cdpvs	0, 7, cr0, cr3, cr4, {2}
    145c:	00656d61 	rsbeq	r6, r5, r1, ror #26
    1460:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 13ac <_Min_Stack_Size+0x11ac>
    1464:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1468:	76737572 			; <UNDEFINED> instruction: 0x76737572
    146c:	4144542f 	cmpmi	r4, pc, lsr #8
    1470:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    1474:	2f544f49 	svccs	0x00544f49
    1478:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    147c:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
    1480:	4348442f 	movtmi	r4, #33839	; 0x842f
    1484:	68642f50 	stmdavs	r4!, {r4, r6, r8, r9, sl, fp, sp}^
    1488:	632e7063 			; <UNDEFINED> instruction: 0x632e7063
    148c:	63686400 	cmnvs	r8, #0, 8
    1490:	73654d70 	cmnvc	r5, #112, 26	; 0x1c00
    1494:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    1498:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    149c:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 14a4 <_Min_Stack_Size+0x12a4>
    14a0:	73657270 	cmnvc	r5, #112, 4
    14a4:	00646573 	rsbeq	r6, r4, r3, ror r5
    14a8:	6f636471 	svcvs	0x00636471
    14ac:	00746e75 	rsbseq	r6, r4, r5, ror lr
    14b0:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    14b4:	5f363174 	svcpl	0x00363174
    14b8:	64700074 	ldrbtvs	r0, [r0], #-116	; 0xffffff8c
    14bc:	00726468 	rsbseq	r6, r2, r8, ror #8
    14c0:	5f736e64 	svcpl	0x00736e64
    14c4:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    14c8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    14cc:	656c7300 	strbvs	r7, [ip, #-768]!	; 0xfffffd00
    14d0:	7069006e 	rsbvc	r0, r9, lr, rrx
    14d4:	6f72665f 	svcvs	0x0072665f
    14d8:	6e645f6d 	cdpvs	15, 6, cr5, cr4, cr13, {3}
    14dc:	736e0073 	cmnvc	lr, #115	; 0x73
    14e0:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    14e4:	61700074 	cmnvs	r0, r4, ror r0
    14e8:	5f657372 	svcpl	0x00657372
    14ec:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
    14f0:	63726100 	cmnvs	r2, #0, 2
    14f4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    14f8:	6f682f00 	svcvs	0x00682f00
    14fc:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    1500:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    1504:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    1508:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    150c:	544f492d 	strbpl	r4, [pc], #-2349	; 1514 <_Min_Stack_Size+0x1314>
    1510:	746e492f 	strbtvc	r4, [lr], #-2351	; 0xfffff6d1
    1514:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    1518:	4e442f74 	mcrmi	15, 2, r2, cr4, cr4, {3}
    151c:	6e642f53 	mcrvs	15, 3, r2, cr4, cr3, {2}
    1520:	61705f73 	cmnvs	r0, r3, ror pc
    1524:	2e657372 	mcrcs	3, 3, r7, cr5, cr2, {3}
    1528:	63720063 	cmnvs	r2, #99	; 0x63
    152c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1530:	5f736e64 	svcpl	0x00736e64
    1534:	77736e61 	ldrbvc	r6, [r3, -r1, ror #28]!
    1538:	61007265 	tstvs	r0, r5, ror #4
    153c:	756f636e 	strbvc	r6, [pc, #-878]!	; 11d6 <_Min_Stack_Size+0xfd6>
    1540:	7000746e 	andvc	r7, r0, lr, ror #8
    1544:	00667562 	rsbeq	r7, r6, r2, ror #10
    1548:	6765736e 	strbvs	r7, [r5, -lr, ror #6]!
    154c:	72617000 	rsbvc	r7, r1, #0
    1550:	534d6573 	movtpl	r6, #54643	; 0xd573
    1554:	706f0047 	rsbvc	r0, pc, r7, asr #32
    1558:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    155c:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1560:	69003631 	stmdbvs	r0, {r0, r4, r5, r9, sl, ip, sp}
    1564:	7269646e 	rsbvc	r6, r9, #1845493760	; 0x6e000000
    1568:	00746365 	rsbseq	r6, r4, r5, ror #6
    156c:	5f736e64 	svcpl	0x00736e64
    1570:	76726573 			; <UNDEFINED> instruction: 0x76726573
    1574:	315f7265 	cmpcc	pc, r5, ror #4
    1578:	44007473 	strmi	r7, [r0], #-1139	; 0xfffffb8d
    157c:	745f534e 	ldrbvc	r5, [pc], #-846	; 1584 <_Min_Stack_Size+0x1384>
    1580:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    1584:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1588:	0072656c 	rsbseq	r6, r2, ip, ror #10
    158c:	5f534e44 	svcpl	0x00534e44
    1590:	006e7572 	rsbeq	r7, lr, r2, ror r5
    1594:	5f736e64 	svcpl	0x00736e64
    1598:	00667562 	rsbeq	r7, r6, r2, ror #10
    159c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 14e8 <_Min_Stack_Size+0x12e8>
    15a0:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    15a4:	76737572 			; <UNDEFINED> instruction: 0x76737572
    15a8:	4144542f 	cmpmi	r4, pc, lsr #8
    15ac:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    15b0:	2f544f49 	svccs	0x00544f49
    15b4:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    15b8:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
    15bc:	534e442f 	movtpl	r4, #58415	; 0xe42f
    15c0:	736e642f 	cmnvc	lr, #788529152	; 0x2f000000
    15c4:	7200632e 	andvc	r6, r0, #-1207959552	; 0xb8000000
    15c8:	635f7465 	cmpvs	pc, #1694498816	; 0x65000000
    15cc:	6b636568 	blvs	18dab74 <_Min_Stack_Size+0x18da974>
    15d0:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    15d4:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xfffff09b
    15d8:	74757000 	ldrbtvc	r7, [r5], #-0
    15dc:	64003631 	strvs	r3, [r0], #-1585	; 0xfffff9cf
    15e0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    15e4:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    15e8:	6e325f72 	mrcvs	15, 1, r5, cr2, cr2, {3}
    15ec:	4e440064 	cdpmi	0, 4, cr0, cr4, cr4, {3}
    15f0:	6e695f53 	mcrvs	15, 3, r5, cr9, cr3, {2}
    15f4:	4d007469 	cfstrsmi	mvf7, [r0, #-420]	; 0xfffffe5c
    15f8:	495f4753 	ldmdbmi	pc, {r0, r1, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    15fc:	6e640044 	cdpvs	0, 6, cr0, cr4, cr4, {2}
    1600:	69745f73 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1604:	6400656d 	strvs	r6, [r0], #-1389	; 0xfffffa93
    1608:	705f736e 	subsvc	r7, pc, lr, ror #6
    160c:	0074726f 	rsbseq	r7, r4, pc, ror #4
    1610:	63656863 	cmnvs	r5, #6488064	; 0x630000
    1614:	4e445f6b 	cdpmi	15, 4, cr5, cr4, cr11, {3}
    1618:	69745f53 	ldmdbvs	r4!, {r0, r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    161c:	756f656d 	strbvc	r6, [pc, #-1389]!	; 10b7 <_Min_Stack_Size+0xeb7>
    1620:	6e640074 	mcrvs	0, 3, r0, cr4, cr4, {3}
    1624:	00656d61 	rsbeq	r6, r5, r1, ror #26
    1628:	5f736e64 	svcpl	0x00736e64
    162c:	656b616d 	strbvs	r6, [fp, #-365]!	; 0xfffffe93
    1630:	72657571 	rsbvc	r7, r5, #473956352	; 0x1c400000
    1634:	4e440079 	mcrmi	0, 2, r0, cr4, cr9, {3}
    1638:	75715f53 	ldrbvc	r5, [r1, #-3923]!	; 0xfffff0ad
    163c:	00797265 	rsbseq	r7, r9, r5, ror #4
    1640:	5f534e44 	svcpl	0x00534e44
    1644:	4b434f53 	blmi	10d5398 <_Min_Stack_Size+0x10d5198>
    1648:	49005445 	stmdbmi	r0, {r0, r2, r6, sl, ip, lr}
    164c:	00524241 	subseq	r4, r2, r1, asr #4
    1650:	4349564e 	movtmi	r5, #38478	; 0x964e
    1654:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1658:	70795474 	rsbsvc	r5, r9, r4, ror r4
    165c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1660:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1664:	52495f43 	subpl	r5, r9, #268	; 0x10c
    1668:	61684351 	cmnvs	r8, r1, asr r3
    166c:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1670:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1674:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
    1678:	5f6b6369 	svcpl	0x006b6369
    167c:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    1680:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1684:	564e0065 	strbpl	r0, [lr], -r5, rrx
    1688:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    168c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    1690:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1694:	79530074 	ldmdbvc	r3, {r2, r4, r5, r6}^
    1698:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    169c:	4c435f6b 	mcrrmi	15, 6, r5, r3, cr11
    16a0:	756f534b 	strbvc	r5, [pc, #-843]!	; 135d <_Min_Stack_Size+0x115d>
    16a4:	43656372 	cmnmi	r5, #-939524095	; 0xc8000001
    16a8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    16ac:	564e0067 	strbpl	r0, [lr], -r7, rrx
    16b0:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    16b4:	65567465 	ldrbvs	r7, [r6, #-1125]	; 0xfffffb9b
    16b8:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    16bc:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
    16c0:	564e0065 	strbpl	r0, [lr], -r5, rrx
    16c4:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    16c8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    16cc:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    16d0:	2f006572 	svccs	0x00006572
    16d4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    16d8:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    16dc:	2f767375 	svccs	0x00767375
    16e0:	53414454 	movtpl	r4, #5204	; 0x1454
    16e4:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    16e8:	4c2f544f 	cfstrsmi	mvf5, [pc], #-316	; 15b4 <_Min_Stack_Size+0x13b4>
    16ec:	61726269 	cmnvs	r2, r9, ror #4
    16f0:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    16f4:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    16f8:	73696d2f 	cmnvc	r9, #3008	; 0xbc0
    16fc:	00632e63 	rsbeq	r2, r3, r3, ror #28
    1700:	4349564e 	movtmi	r5, #38478	; 0x964e
    1704:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    1708:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    170c:	6f724779 	svcvs	0x00724779
    1710:	4e007075 	mcrmi	0, 0, r7, cr0, cr5, {3}
    1714:	74537765 	ldrbvc	r7, [r3], #-1893	; 0xfffff89b
    1718:	00657461 	rsbeq	r7, r5, r1, ror #8
    171c:	52495453 	subpl	r5, r9, #1392508928	; 0x53000000
    1720:	45535200 	ldrbmi	r5, [r3, #-512]	; 0xfffffe00
    1724:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    1728:	41430031 	cmpmi	r3, r1, lsr r0
    172c:	0042494c 	subeq	r4, r2, ip, asr #18
    1730:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
    1734:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1738:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    173c:	49006570 	stmdbmi	r0, {r4, r5, r6, r8, sl, sp, lr}
    1740:	00525043 	subseq	r5, r2, r3, asr #32
    1744:	73706d74 	cmnvc	r0, #116, 26	; 0x1d00
    1748:	4e006275 	mcrmi	2, 0, r6, cr0, cr5, {3}
    174c:	5f434956 	svcpl	0x00434956
    1750:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
    1754:	504c6d65 	subpl	r6, ip, r5, ror #26
    1758:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    175c:	53006769 	movwpl	r6, #1897	; 0x769
    1760:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1764:	545f6b63 	ldrbpl	r6, [pc], #-2915	; 176c <_Min_Stack_Size+0x156c>
    1768:	00657079 	rsbeq	r7, r5, r9, ror r0
    176c:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    1770:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1774:	00797469 	rsbseq	r7, r9, r9, ror #8
    1778:	52505349 	subspl	r5, r0, #603979777	; 0x24000001
    177c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1780:	52495f43 	subpl	r5, r9, #268	; 0x10c
    1784:	61684351 	cmnvs	r8, r1, asr r3
    1788:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    178c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1790:	52495f43 	subpl	r5, r9, #268	; 0x10c
    1794:	61684351 	cmnvs	r8, r1, asr r3
    1798:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    179c:	50627553 	rsbpl	r7, r2, r3, asr r5
    17a0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    17a4:	00797469 	rsbseq	r7, r9, r9, ror #8
    17a8:	52454349 	subpl	r4, r5, #603979777	; 0x24000001
    17ac:	45534900 	ldrbmi	r4, [r3, #-2304]	; 0xfffff700
    17b0:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
    17b4:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    17b8:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    17bc:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    17c0:	6572506c 	ldrbvs	r5, [r2, #-108]!	; 0xffffff94
    17c4:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xfffff29b
    17c8:	506e6f69 	rsbpl	r6, lr, r9, ror #30
    17cc:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    17d0:	00797469 	rsbseq	r7, r9, r9, ror #8
    17d4:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
    17d8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    17dc:	74536c61 	ldrbvc	r6, [r3], #-3169	; 0xfffff39f
    17e0:	00657461 	rsbeq	r7, r5, r1, ror #8
    17e4:	4349564e 	movtmi	r5, #38478	; 0x964e
    17e8:	6365565f 	cmnvs	r5, #99614720	; 0x5f00000
    17ec:	62615474 	rsbvs	r5, r1, #116, 8	; 0x74000000
    17f0:	414f4c00 	cmpmi	pc, r0, lsl #24
    17f4:	6f4c0044 	svcvs	0x004c0044
    17f8:	776f5077 			; <UNDEFINED> instruction: 0x776f5077
    17fc:	6f4d7265 	svcvs	0x004d7265
    1800:	4e006564 	cfsh32mi	mvfx6, mvfx0, #52
    1804:	5f434956 	svcpl	0x00434956
    1808:	6f697250 	svcvs	0x00697250
    180c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1810:	756f7247 	strbvc	r7, [pc, #-583]!	; 15d1 <_Min_Stack_Size+0x13d1>
    1814:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    1818:	00676966 	rsbeq	r6, r7, r6, ror #18
    181c:	5f434352 	svcpl	0x00434352
    1820:	4b4c4348 	blmi	1312548 <_Min_Stack_Size+0x1312348>
    1824:	43435200 	movtmi	r5, #12800	; 0x3200
    1828:	4344415f 	movtmi	r4, #16735	; 0x415f
    182c:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    1830:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1834:	43520067 	cmpmi	r2, #103	; 0x67
    1838:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    183c:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1840:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    1844:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1848:	00746942 	rsbseq	r6, r4, r2, asr #18
    184c:	5f434352 	svcpl	0x00434352
    1850:	32425041 	subcc	r5, r2, #65	; 0x41
    1854:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1858:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    185c:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1860:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1864:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    1868:	52004553 	andpl	r4, r0, #348127232	; 0x14c00000
    186c:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    1870:	54497465 	strbpl	r7, [r9], #-1125	; 0xfffffb9b
    1874:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1878:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
    187c:	415f4343 	cmpmi	pc, r3, asr #6
    1880:	50324250 	eorspl	r4, r2, r0, asr r2
    1884:	70697265 	rsbvc	r7, r9, r5, ror #4
    1888:	43520068 	cmpmi	r2, #104	; 0x68
    188c:	43505f43 	cmpmi	r0, #268	; 0x10c
    1890:	00324b4c 	eorseq	r4, r2, ip, asr #22
    1894:	5f434352 	svcpl	0x00434352
    1898:	434c4c50 	movtmi	r4, #52304	; 0xcc50
    189c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    18a0:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    18a4:	6b636f6c 	blvs	18dd65c <_Min_Stack_Size+0x18dd45c>
    18a8:	70795473 	rsbsvc	r5, r9, r3, ror r4
    18ac:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    18b0:	43435200 	movtmi	r5, #12800	; 0x3200
    18b4:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    18b8:	006c754d 	rsbeq	r7, ip, sp, asr #10
    18bc:	5f434352 	svcpl	0x00434352
    18c0:	50424841 	subpl	r4, r2, r1, asr #16
    18c4:	70697265 	rsbvc	r7, r9, r5, ror #4
    18c8:	6f6c4368 	svcvs	0x006c4368
    18cc:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    18d0:	43480064 	movtmi	r0, #32868	; 0x8064
    18d4:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
    18d8:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    18dc:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    18e0:	43435200 	movtmi	r5, #12800	; 0x3200
    18e4:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    18e8:	72655031 	rsbvc	r5, r5, #49	; 0x31
    18ec:	00687069 	rsbeq	r7, r8, r9, rrx
    18f0:	73657270 	cmnvc	r5, #112, 4
    18f4:	43520063 	cmpmi	r2, #99	; 0x63
    18f8:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    18fc:	6e6f434f 	cdpvs	3, 6, cr4, cr15, cr15, {2}
    1900:	00676966 	rsbeq	r6, r7, r6, ror #18
    1904:	5f434352 	svcpl	0x00434352
    1908:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    190c:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
    1910:	575f4343 	ldrbpl	r4, [pc, -r3, asr #6]
    1914:	46746961 	ldrbtmi	r6, [r4], -r1, ror #18
    1918:	5348726f 	movtpl	r7, #33391	; 0x826f
    191c:	61745345 	cmnvs	r4, r5, asr #6
    1920:	70557472 	subsvc	r7, r5, r2, ror r4
    1924:	43435200 	movtmi	r5, #12800	; 0x3200
    1928:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    192c:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    1930:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1934:	43520065 	cmpmi	r2, #101	; 0x65
    1938:	50415f43 	subpl	r5, r1, r3, asr #30
    193c:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    1940:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1944:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1948:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    194c:	43435200 	movtmi	r5, #12800	; 0x3200
    1950:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1954:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1958:	45006769 	strmi	r6, [r0, #-1897]	; 0xfffff897
    195c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    1960:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1964:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
    1968:	555f4343 	ldrbpl	r4, [pc, #-835]	; 162d <_Min_Stack_Size+0x142d>
    196c:	4c434253 	sfmmi	f4, 2, [r3], {83}	; 0x53
    1970:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1974:	00676966 	rsbeq	r6, r7, r6, ror #18
    1978:	5f434352 	svcpl	0x00434352
    197c:	4349534c 	movtmi	r5, #37708	; 0x934c
    1980:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1984:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    1988:	59537465 	ldmdbpl	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    198c:	4b4c4353 	blmi	13126e0 <_Min_Stack_Size+0x13124e0>
    1990:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1994:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    1998:	505f4343 	subspl	r4, pc, r3, asr #6
    199c:	314b4c43 	cmpcc	fp, r3, asr #24
    19a0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    19a4:	74006769 	strvc	r6, [r0], #-1897	; 0xfffff897
    19a8:	6572706d 	ldrbvs	r7, [r2, #-109]!	; 0xffffff93
    19ac:	69620067 	stmdbvs	r2!, {r0, r1, r2, r5, r6}^
    19b0:	61747374 	cmnvs	r4, r4, ror r3
    19b4:	00737574 	rsbseq	r7, r3, r4, ror r5
    19b8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    19bc:	65727375 	ldrbvs	r7, [r2, #-885]!	; 0xfffffc8b
    19c0:	43520067 	cmpmi	r2, #103	; 0x67
    19c4:	50415f43 	subpl	r5, r1, r3, asr #30
    19c8:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    19cc:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    19d0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    19d4:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    19d8:	43435200 	movtmi	r5, #12800	; 0x3200
    19dc:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
    19e0:	5270756b 	rsbspl	r7, r0, #448790528	; 0x1ac00000
    19e4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    19e8:	00646d43 	rsbeq	r6, r4, r3, asr #26
    19ec:	5f434352 	svcpl	0x00434352
    19f0:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    19f4:	43435200 	movtmi	r5, #12800	; 0x3200
    19f8:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    19fc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1a00:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    1a04:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    1a08:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    1a0c:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1a10:	00676966 	rsbeq	r6, r7, r6, ror #18
    1a14:	5f434352 	svcpl	0x00434352
    1a18:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1a1c:	5367616c 	cmnpl	r7, #108, 2
    1a20:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1a24:	43520073 	cmpmi	r2, #115	; 0x73
    1a28:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
    1a2c:	4b4c4343 	blmi	1312740 <_Min_Stack_Size+0x1312540>
    1a30:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1a34:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1a38:	555f4343 	ldrbpl	r4, [pc, #-835]	; 16fd <_Min_Stack_Size+0x14fd>
    1a3c:	4c434253 	sfmmi	f4, 2, [r3], {83}	; 0x53
    1a40:	756f534b 	strbvc	r5, [pc, #-843]!	; 16fd <_Min_Stack_Size+0x14fd>
    1a44:	00656372 	rsbeq	r6, r5, r2, ror r3
    1a48:	5f434352 	svcpl	0x00434352
    1a4c:	61656c43 	cmnvs	r5, r3, asr #24
    1a50:	616c4672 	smcvs	50274	; 0xc462
    1a54:	43520067 	cmpmi	r2, #103	; 0x67
    1a58:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1a5c:	4b4c4353 	blmi	13127b0 <_Min_Stack_Size+0x13125b0>
    1a60:	43444100 	movtmi	r4, #16640	; 0x4100
    1a64:	5f4b4c43 	svcpl	0x004b4c43
    1a68:	71657246 	cmnvc	r5, r6, asr #4
    1a6c:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    1a70:	43520079 	cmpmi	r2, #121	; 0x79
    1a74:	53485f43 	movtpl	r5, #36675	; 0x8f43
    1a78:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
    1a7c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1a80:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1a84:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
    1a88:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    1a8c:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1a90:	43435200 	movtmi	r5, #12800	; 0x3200
    1a94:	6f6c435f 	svcvs	0x006c435f
    1a98:	00736b63 	rsbseq	r6, r3, r3, ror #22
    1a9c:	4b4c4350 	blmi	13127e4 <_Min_Stack_Size+0x13125e4>
    1aa0:	72465f32 	subvc	r5, r6, #50, 30	; 0xc8
    1aa4:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    1aa8:	0079636e 	rsbseq	r6, r9, lr, ror #6
    1aac:	5f434352 	svcpl	0x00434352
    1ab0:	6f435449 	svcvs	0x00435449
    1ab4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1ab8:	43435200 	movtmi	r5, #12800	; 0x3200
    1abc:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1ac0:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1ac4:	43687069 	cmnmi	r8, #105	; 0x69
    1ac8:	6b636f6c 	blvs	18dd880 <_Min_Stack_Size+0x18dd680>
    1acc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1ad0:	5f434352 	svcpl	0x00434352
    1ad4:	00455348 	subeq	r5, r5, r8, asr #6
    1ad8:	5f434352 	svcpl	0x00434352
    1adc:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1ae0:	6f534b4c 	svcvs	0x00534b4c
    1ae4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1ae8:	4c435000 	marmi	acc0, r5, r3
    1aec:	465f314b 	ldrbmi	r3, [pc], -fp, asr #2
    1af0:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    1af4:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1af8:	43435200 	movtmi	r5, #12800	; 0x3200
    1afc:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
    1b00:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1b04:	41006769 	tstmi	r0, r9, ror #14
    1b08:	48414250 	stmdami	r1, {r4, r6, r9, lr}^
    1b0c:	65725042 	ldrbvs	r5, [r2, #-66]!	; 0xffffffbe
    1b10:	61546373 	cmpvs	r4, r3, ror r3
    1b14:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1b18:	5f434352 	svcpl	0x00434352
    1b1c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1b20:	6b636f6c 	blvs	18dd8d8 <_Min_Stack_Size+0x18dd6d8>
    1b24:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0xfffff98d
    1b28:	43520071 	cmpmi	r2, #113	; 0x71
    1b2c:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
    1b30:	4b4c4343 	blmi	1312844 <_Min_Stack_Size+0x1312644>
    1b34:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1b38:	5f434352 	svcpl	0x00434352
    1b3c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1b40:	6365536b 	cmnvs	r5, #-1409286143	; 0xac000001
    1b44:	74697275 	strbtvc	r7, [r9], #-629	; 0xfffffd8b
    1b48:	73795379 	cmnvc	r9, #-469762047	; 0xe4000001
    1b4c:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
    1b50:	2f00646d 	svccs	0x0000646d
    1b54:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1b58:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    1b5c:	2f767375 	svccs	0x00767375
    1b60:	53414454 	movtpl	r4, #5204	; 0x1454
    1b64:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    1b68:	4c2f544f 	cfstrsmi	mvf5, [pc], #-316	; 1a34 <_Min_Stack_Size+0x1834>
    1b6c:	61726269 	cmnvs	r2, r9, ror #4
    1b70:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    1b74:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1b78:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1b7c:	31663233 	cmncc	r6, r3, lsr r2
    1b80:	725f7830 	subsvc	r7, pc, #48, 16	; 0x300000
    1b84:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
    1b88:	43435200 	movtmi	r5, #12800	; 0x3200
    1b8c:	4c43485f 	mcrrmi	8, 5, r4, r3, cr15
    1b90:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1b94:	00676966 	rsbeq	r6, r7, r6, ror #18
    1b98:	5f434352 	svcpl	0x00434352
    1b9c:	43495348 	movtmi	r5, #37704	; 0x9348
    1ba0:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1ba4:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 1aa0 <_Min_Stack_Size+0x18a0>
    1ba8:	52004f43 	andpl	r4, r0, #268	; 0x10c
    1bac:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1bb0:	43520054 	cmpmi	r2, #84	; 0x54
    1bb4:	64415f43 	strbvs	r5, [r1], #-3907	; 0xfffff0bd
    1bb8:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
    1bbc:	43495348 	movtmi	r5, #37704	; 0x9348
    1bc0:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
    1bc4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1bc8:	61566e6f 	cmpvs	r6, pc, ror #28
    1bcc:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1bd0:	5f434352 	svcpl	0x00434352
    1bd4:	50424841 	subpl	r4, r2, r1, asr #16
    1bd8:	70697265 	rsbvc	r7, r9, r5, ror #4
    1bdc:	43520068 	cmpmi	r2, #104	; 0x68
    1be0:	43505f43 	cmpmi	r0, #268	; 0x10c
    1be4:	43324b4c 	teqmi	r2, #76, 22	; 0x13000
    1be8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1bec:	44410067 	strbmi	r0, [r1], #-103	; 0xffffff99
    1bf0:	65725043 	ldrbvs	r5, [r2, #-67]!	; 0xffffffbd
    1bf4:	61546373 	cmpvs	r4, r3, ror r3
    1bf8:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1bfc:	4f495047 	svcmi	0x00495047
    1c00:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1c04:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1c08:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    1c0c:	00736f70 	rsbseq	r6, r3, r0, ror pc
    1c10:	4f495047 	svcmi	0x00495047
    1c14:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    1c18:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    1c1c:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    1c20:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1c24:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    1c28:	754f6461 	strbvc	r6, [pc, #-1121]	; 17cf <_Min_Stack_Size+0x15cf>
    1c2c:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    1c30:	61746144 	cmnvs	r4, r4, asr #2
    1c34:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1c38:	6f4d5f4f 	svcvs	0x004d5f4f
    1c3c:	415f6564 	cmpmi	pc, r4, ror #10
    1c40:	50505f46 	subspl	r5, r0, r6, asr #30
    1c44:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1c48:	76455f4f 	strbvc	r5, [r5], -pc, asr #30
    1c4c:	4f746e65 	svcmi	0x00746e65
    1c50:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    1c54:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    1c58:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1c5c:	74535f4f 	ldrbvc	r5, [r3], #-3919	; 0xfffff0b1
    1c60:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1c64:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1c68:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    1c6c:	006c6156 	rsbeq	r6, ip, r6, asr r1
    1c70:	5f746942 	svcpl	0x00746942
    1c74:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    1c78:	50470054 	subpl	r0, r7, r4, asr r0
    1c7c:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
    1c80:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1c84:	00746942 	rsbseq	r6, r4, r2, asr #18
    1c88:	4f495047 	svcmi	0x00495047
    1c8c:	4854455f 	ldmdami	r4, {r0, r1, r2, r3, r4, r6, r8, sl, lr}^
    1c90:	64654d5f 	strbtvs	r4, [r5], #-3423	; 0xfffff2a1
    1c94:	6e496169 	dvfvsez	f6, f1, #1.0
    1c98:	66726574 			; <UNDEFINED> instruction: 0x66726574
    1c9c:	00656361 	rsbeq	r6, r5, r1, ror #6
    1ca0:	4f495047 	svcmi	0x00495047
    1ca4:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1ca8:	73746942 	cmnvc	r4, #1081344	; 0x108000
    1cac:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1cb0:	70535f4f 	subsvc	r5, r3, pc, asr #30
    1cb4:	00646565 	rsbeq	r6, r4, r5, ror #10
    1cb8:	4f495047 	svcmi	0x00495047
    1cbc:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1cc0:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
    1cc4:	52434954 	subpl	r4, r3, #84, 18	; 0x150000
    1cc8:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    1ccc:	6b73616d 	blvs	1cda288 <_Min_Stack_Size+0x1cda088>
    1cd0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1cd4:	6f505f4f 	svcvs	0x00505f4f
    1cd8:	6f537472 	svcvs	0x00537472
    1cdc:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1ce0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1ce4:	65445f4f 	strbvs	r5, [r4, #-3919]	; 0xfffff0b1
    1ce8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1cec:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1cf0:	76455f4f 	strbvc	r5, [r5], -pc, asr #30
    1cf4:	4f746e65 	svcmi	0x00746e65
    1cf8:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    1cfc:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    1d00:	00676966 	rsbeq	r6, r7, r6, ror #18
    1d04:	52525342 	subspl	r5, r2, #134217729	; 0x8000001
    1d08:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1d0c:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    1d10:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    1d14:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
    1d18:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    1d1c:	47007469 	strmi	r7, [r0, -r9, ror #8]
    1d20:	5f4f4950 	svcpl	0x004f4950
    1d24:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
    1d28:	30315f64 	eorscc	r5, r1, r4, ror #30
    1d2c:	007a484d 	rsbseq	r4, sl, sp, asr #16
    1d30:	4f495047 	svcmi	0x00495047
    1d34:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 1d3c <_Min_Stack_Size+0x1b3c>
    1d38:	754f5f65 	strbvc	r5, [pc, #-3941]	; ddb <_Min_Stack_Size+0xbdb>
    1d3c:	444f5f74 	strbmi	r5, [pc], #-3956	; 1d44 <_Min_Stack_Size+0x1b44>
    1d40:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1d44:	58455f4f 	stmdapl	r5, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1d48:	694c4954 	stmdbvs	ip, {r2, r4, r6, r8, fp, lr}^
    1d4c:	6f43656e 	svcvs	0x0043656e
    1d50:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1d54:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1d58:	70535f4f 	subsvc	r5, r3, pc, asr #30
    1d5c:	5f646565 	svcpl	0x00646565
    1d60:	7a484d32 	bvc	1215230 <_Min_Stack_Size+0x1215030>
    1d64:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1d68:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
    1d6c:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1d70:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    1d74:	682f0066 	stmdavs	pc!, {r1, r2, r5, r6}	; <UNPREDICTABLE>
    1d78:	2f656d6f 	svccs	0x00656d6f
    1d7c:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    1d80:	542f7673 	strtpl	r7, [pc], #-1651	; 1d88 <_Min_Stack_Size+0x1b88>
    1d84:	41534144 	cmpmi	r3, r4, asr #2
    1d88:	4f492d54 	svcmi	0x00492d54
    1d8c:	694c2f54 	stmdbvs	ip, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1d90:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    1d94:	2f736569 	svccs	0x00736569
    1d98:	2f637273 	svccs	0x00637273
    1d9c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1da0:	30316632 	eorscc	r6, r1, r2, lsr r6
    1da4:	70675f78 	rsbvc	r5, r7, r8, ror pc
    1da8:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    1dac:	726f5000 	rsbvc	r5, pc, #0
    1db0:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    1db4:	72756300 	rsbsvc	r6, r5, #0, 6
    1db8:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    1dbc:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    1dc0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1dc4:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1dc8:	6d65526e 	sfmvs	f5, 2, [r5, #-440]!	; 0xfffffe48
    1dcc:	6f437061 	svcvs	0x00437061
    1dd0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1dd4:	4b434c00 	blmi	10d4ddc <_Min_Stack_Size+0x10d4bdc>
    1dd8:	50470052 	subpl	r0, r7, r2, asr r0
    1ddc:	505f4f49 	subspl	r4, pc, r9, asr #30
    1de0:	6f536e69 	svcvs	0x00536e69
    1de4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1de8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1dec:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    1df0:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    1df4:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
    1df8:	00617461 	rsbeq	r7, r1, r1, ror #8
    1dfc:	6d706d74 	ldclvs	13, cr6, [r0, #-464]!	; 0xfffffe30
    1e00:	006b7361 	rsbeq	r7, fp, r1, ror #6
    1e04:	4f495047 	svcmi	0x00495047
    1e08:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 1e10 <_Min_Stack_Size+0x1c10>
    1e0c:	50495f65 	subpl	r5, r9, r5, ror #30
    1e10:	50470044 	subpl	r0, r7, r4, asr #32
    1e14:	505f4f49 	subspl	r4, pc, r9, asr #30
    1e18:	6f4c6e69 	svcvs	0x004c6e69
    1e1c:	6f436b63 	svcvs	0x00436b63
    1e20:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1e24:	72756300 	rsbsvc	r6, r5, #0, 6
    1e28:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    1e2c:	006e6970 	rsbeq	r6, lr, r0, ror r9
    1e30:	4f495047 	svcmi	0x00495047
    1e34:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    1e38:	47006574 	smlsdxmi	r0, r4, r5, r6
    1e3c:	5f4f4950 	svcpl	0x004f4950
    1e40:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1e44:	5550495f 	ldrbpl	r4, [r0, #-2399]	; 0xfffff6a1
    1e48:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    1e4c:	414d0031 	cmpmi	sp, r1, lsr r0
    1e50:	00325250 	eorseq	r5, r2, r0, asr r2
    1e54:	4f495047 	svcmi	0x00495047
    1e58:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 1e60 <_Min_Stack_Size+0x1c60>
    1e5c:	49415f65 	stmdbmi	r1, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1e60:	5047004e 	subpl	r0, r7, lr, asr #32
    1e64:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1e68:	70616d65 	rsbvc	r6, r1, r5, ror #26
    1e6c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1e70:	6f4d5f4f 	svcvs	0x004d5f4f
    1e74:	41006564 	tstmi	r0, r4, ror #10
    1e78:	5f4f4946 	svcpl	0x004f4946
    1e7c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1e80:	00666544 	rsbeq	r6, r6, r4, asr #10
    1e84:	41746942 	cmnmi	r4, r2, asr #18
    1e88:	6f697463 	svcvs	0x00697463
    1e8c:	5047006e 	subpl	r0, r7, lr, rrx
    1e90:	70534f49 	subsvc	r4, r3, r9, asr #30
    1e94:	5f646565 	svcpl	0x00646565
    1e98:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1e9c:	00666544 	rsbeq	r6, r6, r4, asr #10
    1ea0:	5250414d 	subspl	r4, r0, #1073741843	; 0x40000013
    1ea4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1ea8:	4700784f 	strmi	r7, [r0, -pc, asr #16]
    1eac:	5f4f4950 	svcpl	0x004f4950
    1eb0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1eb4:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    1eb8:	47007463 	strmi	r7, [r0, -r3, ror #8]
    1ebc:	5f4f4950 	svcpl	0x004f4950
    1ec0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1ec4:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xfffff0a1
    1ec8:	0050505f 	subseq	r5, r0, pc, asr r0
    1ecc:	52435645 	subpl	r5, r3, #72351744	; 0x4500000
    1ed0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1ed4:	70535f4f 	subsvc	r5, r3, pc, asr #30
    1ed8:	5f646565 	svcpl	0x00646565
    1edc:	484d3035 	stmdami	sp, {r0, r2, r4, r5, ip, sp}^
    1ee0:	5047007a 	subpl	r0, r7, sl, ror r0
    1ee4:	6f4d4f49 	svcvs	0x004d4f49
    1ee8:	545f6564 	ldrbpl	r6, [pc], #-1380	; 1ef0 <_Min_Stack_Size+0x1cf0>
    1eec:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1ef0:	47006665 	strmi	r6, [r0, -r5, ror #12]
    1ef4:	5f4f4950 	svcpl	0x004f4950
    1ef8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1efc:	74694274 	strbtvc	r4, [r9], #-628	; 0xfffffd8c
    1f00:	50470073 	subpl	r0, r7, r3, ror r0
    1f04:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 1de8 <_Min_Stack_Size+0x1be8>
    1f08:	5f65646f 	svcpl	0x0065646f
    1f0c:	465f4e49 	ldrbmi	r4, [pc], -r9, asr #28
    1f10:	54414f4c 	strbpl	r4, [r1], #-3916	; 0xfffff0b4
    1f14:	00474e49 	subeq	r4, r7, r9, asr #28
    1f18:	4f495047 	svcmi	0x00495047
    1f1c:	6165525f 	cmnvs	r5, pc, asr r2
    1f20:	74754f64 	ldrbtvc	r4, [r5], #-3940	; 0xfffff09c
    1f24:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
    1f28:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    1f2c:	47007469 	strmi	r7, [r0, -r9, ror #8]
    1f30:	5f4f4950 	svcpl	0x004f4950
    1f34:	4f494641 	svcmi	0x00494641
    1f38:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    1f3c:	47007469 	strmi	r7, [r0, -r9, ror #8]
    1f40:	5f4f4950 	svcpl	0x004f4950
    1f44:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1f48:	5f46415f 	svcpl	0x0046415f
    1f4c:	4700444f 	strmi	r4, [r0, -pc, asr #8]
    1f50:	5f4f4950 	svcpl	0x004f4950
    1f54:	5f485445 	svcpl	0x00485445
    1f58:	6964654d 	stmdbvs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
    1f5c:	746e4961 	strbtvc	r4, [lr], #-2401	; 0xfffff69f
    1f60:	61667265 	cmnvs	r6, r5, ror #4
    1f64:	6f436563 	svcvs	0x00436563
    1f68:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1f6c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    1f70:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    1f74:	414d445f 	cmpmi	sp, pc, asr r4
    1f78:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1f7c:	5f495053 	svcpl	0x00495053
    1f80:	41485043 	cmpmi	r8, r3, asr #32
    1f84:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    1f88:	7269445f 	rsbvc	r4, r9, #1593835520	; 0x5f000000
    1f8c:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1f90:	53006e6f 	movwpl	r6, #3695	; 0xe6f
    1f94:	475f4950 			; <UNDEFINED> instruction: 0x475f4950
    1f98:	52437465 	subpl	r7, r3, #1694498816	; 0x65000000
    1f9c:	6c6f5043 	stclvs	0, cr5, [pc], #-268	; 1e98 <_Min_Stack_Size+0x1c98>
    1fa0:	6d6f6e79 	stclvs	14, cr6, [pc, #-484]!	; 1dc4 <_Min_Stack_Size+0x1bc4>
    1fa4:	006c6169 	rsbeq	r6, ip, r9, ror #2
    1fa8:	6f707469 	svcvs	0x00707469
    1fac:	50530073 	subspl	r0, r3, r3, ror r0
    1fb0:	61445f49 	cmpvs	r4, r9, asr #30
    1fb4:	69536174 	ldmdbvs	r3, {r2, r4, r5, r6, r8, sp, lr}^
    1fb8:	5300657a 	movwpl	r6, #1402	; 0x57a
    1fbc:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    1fc0:	465f5332 			; <UNDEFINED> instruction: 0x465f5332
    1fc4:	0047414c 	subeq	r4, r7, ip, asr #2
    1fc8:	5f533249 	svcpl	0x00533249
    1fcc:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    1fd0:	64726164 	ldrbtvs	r6, [r2], #-356	; 0xfffffe9c
    1fd4:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    1fd8:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1fdc:	50530074 	subspl	r0, r3, r4, ror r0
    1fe0:	69465f49 	stmdbvs	r6, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    1fe4:	42747372 	rsbsmi	r7, r4, #-939524095	; 0xc8000001
    1fe8:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    1fec:	435f5332 	cmpmi	pc, #-939524096	; 0xc8000000
    1ff0:	004c4f50 	subeq	r4, ip, r0, asr pc
    1ff4:	6b636170 	blvs	18da5bc <_Min_Stack_Size+0x18da3bc>
    1ff8:	656c7465 	strbvs	r7, [ip, #-1125]!	; 0xfffffb9b
    1ffc:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2000:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2004:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    2008:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    200c:	74614464 	strbtvc	r4, [r1], #-1124	; 0xfffffb9c
    2010:	50530061 	subspl	r0, r3, r1, rrx
    2014:	534e5f49 	movtpl	r5, #61257	; 0xef49
    2018:	50530053 	subspl	r0, r3, r3, asr r0
    201c:	32495f49 	subcc	r5, r9, #292	; 0x124
    2020:	4d445f53 	stclmi	15, cr5, [r4, #-332]	; 0xfffffeb4
    2024:	71655241 	cmnvc	r5, r1, asr #4
    2028:	43585400 	cmpmi	r8, #0, 8
    202c:	00524352 	subseq	r4, r2, r2, asr r3
    2030:	5f495053 	svcpl	0x00495053
    2034:	64756142 	ldrbtvs	r6, [r5], #-322	; 0xfffffebe
    2038:	65746152 	ldrbvs	r6, [r4, #-338]!	; 0xfffffeae
    203c:	73657250 	cmnvc	r5, #80, 4
    2040:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    2044:	58520072 	ldmdapl	r2, {r1, r4, r5, r6}^
    2048:	52435243 	subpl	r5, r3, #805306372	; 0x30000004
    204c:	756f7300 	strbvc	r7, [pc, #-768]!	; 1d54 <_Min_Stack_Size+0x1b54>
    2050:	63656372 	cmnvs	r5, #-939524095	; 0xc8000001
    2054:	6b636f6c 	blvs	18dde0c <_Min_Stack_Size+0x18ddc0c>
    2058:	53324900 	teqpl	r2, #0, 18
    205c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2060:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    2064:	00746375 	rsbseq	r6, r4, r5, ror r3
    2068:	5f533249 	svcpl	0x00533249
    206c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    2070:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    2074:	00666544 	rsbeq	r6, r6, r4, asr #10
    2078:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    207c:	7473656c 	ldrbtvc	r6, [r3], #-1388	; 0xfffffa94
    2080:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2084:	53324900 	teqpl	r2, #0, 18
    2088:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    208c:	32490074 	subcc	r0, r9, #116	; 0x74
    2090:	74535f53 	ldrbvc	r5, [r3], #-3923	; 0xfffff0ad
    2094:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    2098:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    209c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    20a0:	4469425f 	strbtmi	r4, [r9], #-607	; 0xfffffda1
    20a4:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
    20a8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    20ac:	694c6c61 	stmdbvs	ip, {r0, r5, r6, sl, fp, sp, lr}^
    20b0:	6f43656e 	svcvs	0x0043656e
    20b4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    20b8:	73326900 	teqvc	r2, #0, 18
    20bc:	00766964 	rsbseq	r6, r6, r4, ror #18
    20c0:	5f495053 	svcpl	0x00495053
    20c4:	5f533249 	svcpl	0x00533249
    20c8:	6f435449 	svcvs	0x00435449
    20cc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    20d0:	53324900 	teqpl	r2, #0, 18
    20d4:	6475415f 	ldrbtvs	r4, [r5], #-351	; 0xfffffea1
    20d8:	72466f69 	subvc	r6, r6, #420	; 0x1a4
    20dc:	49007165 	stmdbmi	r0, {r0, r2, r5, r6, r8, ip, sp, lr}
    20e0:	4d5f5332 	ldclmi	3, cr5, [pc, #-200]	; 2020 <_Min_Stack_Size+0x1e20>
    20e4:	4f4b4c43 	svcmi	0x004b4c43
    20e8:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    20ec:	50530074 	subspl	r0, r3, r4, ror r0
    20f0:	52435f49 	subpl	r5, r3, #292	; 0x124
    20f4:	50530043 	subspl	r0, r3, r3, asr #32
    20f8:	32495f49 	subcc	r5, r9, #292	; 0x124
    20fc:	54495f53 	strbpl	r5, [r9], #-3923	; 0xfffff0ad
    2100:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2104:	646d435f 	strbtvs	r4, [sp], #-863	; 0xfffffca1
    2108:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    210c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    2110:	00435243 	subeq	r5, r3, r3, asr #4
    2114:	5f495053 	svcpl	0x00495053
    2118:	61746144 	cmnvs	r4, r4, asr #2
    211c:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    2120:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2124:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    2128:	445f5332 	ldrbmi	r5, [pc], #-818	; 2130 <_Min_Stack_Size+0x1f30>
    212c:	46617461 	strbtmi	r7, [r1], -r1, ror #8
    2130:	616d726f 	cmnvs	sp, pc, ror #4
    2134:	50530074 	subspl	r0, r3, r4, ror r0
    2138:	32495f49 	subcc	r5, r9, #292	; 0x124
    213c:	65445f53 	strbvs	r5, [r4, #-3923]	; 0xfffff0ad
    2140:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    2144:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2148:	53534e5f 	cmppl	r3, #1520	; 0x5f0
    214c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    2150:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    2154:	74666f53 	strbtvc	r6, [r6], #-3923	; 0xfffff0ad
    2158:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0xfffffe89
    215c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2160:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    2164:	46435332 			; <UNDEFINED> instruction: 0x46435332
    2168:	53005247 	movwpl	r5, #583	; 0x247
    216c:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    2170:	475f5332 	smmlarmi	pc, r2, r3, r5	; <UNPREDICTABLE>
    2174:	54497465 	strbpl	r7, [r9], #-1125	; 0xfffffb9b
    2178:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    217c:	53007375 	movwpl	r7, #885	; 0x375
    2180:	545f4950 	ldrbpl	r4, [pc], #-2384	; 2188 <_Min_Stack_Size+0x1f88>
    2184:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    2188:	4374696d 	cmnmi	r4, #1785856	; 0x1b4000
    218c:	43004352 	movwmi	r4, #850	; 0x352
    2190:	52504352 	subspl	r4, r0, #1207959553	; 0x48000001
    2194:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2198:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 21a0 <_Min_Stack_Size+0x1fa0>
    219c:	50530065 	subspl	r0, r3, r5, rrx
    21a0:	79545f49 	ldmdbvc	r4, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    21a4:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    21a8:	50530066 	subspl	r0, r3, r6, rrx
    21ac:	32495f49 	subcc	r5, r9, #292	; 0x124
    21b0:	65525f53 	ldrbvs	r5, [r2, #-3923]	; 0xfffff0ad
    21b4:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    21b8:	74614465 	strbtvc	r4, [r1], #-1125	; 0xfffffb9b
    21bc:	50530061 	subspl	r0, r3, r1, rrx
    21c0:	534e5f49 	movtpl	r5, #61257	; 0xef49
    21c4:	746e4953 	strbtvc	r4, [lr], #-2387	; 0xfffff6ad
    21c8:	616e7265 	cmnvs	lr, r5, ror #4
    21cc:	666f536c 	strbtvs	r5, [pc], -ip, ror #6
    21d0:	50530074 	subspl	r0, r3, r4, ror r0
    21d4:	32495f49 	subcc	r5, r9, #292	; 0x124
    21d8:	6c435f53 	mcrrvs	15, 5, r5, r3, cr3
    21dc:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    21e0:	0067616c 	rsbeq	r6, r7, ip, ror #2
    21e4:	5f533249 	svcpl	0x00533249
    21e8:	00646d43 	rsbeq	r6, r4, r3, asr #26
    21ec:	5f495053 	svcpl	0x00495053
    21f0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    21f4:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    21f8:	53007469 	movwpl	r7, #1129	; 0x469
    21fc:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    2200:	435f5332 	cmpmi	pc, #-939524096	; 0xc8000000
    2204:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2208:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0xfffffbb7
    220c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    2210:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
    2214:	53324900 	teqpl	r2, #0, 18
    2218:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 2220 <_Min_Stack_Size+0x2020>
    221c:	50530065 	subspl	r0, r3, r5, rrx
    2220:	32495f49 	subcc	r5, r9, #292	; 0x124
    2224:	65475f53 	strbvs	r5, [r7, #-3923]	; 0xfffff0ad
    2228:	616c4674 	smcvs	50276	; 0xc464
    222c:	61745367 	cmnvs	r4, r7, ror #6
    2230:	00737574 	rsbseq	r7, r3, r4, ror r5
    2234:	78495053 	stmdavc	r9, {r0, r1, r4, r6, ip, lr}^
    2238:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    223c:	4f53535f 	svcmi	0x0053535f
    2240:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    2244:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    2248:	73326900 	teqvc	r2, #0, 18
    224c:	0064646f 	rsbeq	r6, r4, pc, ror #8
    2250:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 219c <_Min_Stack_Size+0x1f9c>
    2254:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    2258:	76737572 			; <UNDEFINED> instruction: 0x76737572
    225c:	4144542f 	cmpmi	r4, pc, lsr #8
    2260:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    2264:	2f544f49 	svccs	0x00544f49
    2268:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    226c:	65697261 	strbvs	r7, [r9, #-609]!	; 0xfffffd9f
    2270:	72732f73 	rsbsvc	r2, r3, #460	; 0x1cc
    2274:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    2278:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    227c:	5f783031 	svcpl	0x00783031
    2280:	2e697073 	mcrcs	0, 3, r7, cr9, cr3, {3}
    2284:	50530063 	subspl	r0, r3, r3, rrx
    2288:	50435f49 	subpl	r5, r3, r9, asr #30
    228c:	69004c4f 	stmdbvs	r0, {r0, r1, r2, r3, r6, sl, fp, lr}
    2290:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
    2294:	5053006b 	subspl	r0, r3, fp, rrx
    2298:	61435f49 	cmpvs	r3, r9, asr #30
    229c:	6c75636c 	ldclvs	3, cr6, [r5], #-432	; 0xfffffe50
    22a0:	43657461 	cmnmi	r5, #1627389952	; 0x61000000
    22a4:	49004352 	stmdbmi	r0, {r1, r4, r6, r8, r9, lr}
    22a8:	52505332 	subspl	r5, r0, #-939524096	; 0xc8000000
    22ac:	63726300 	cmnvs	r2, #0, 6
    22b0:	00676572 	rsbeq	r6, r7, r2, ror r5
    22b4:	5f495053 	svcpl	0x00495053
    22b8:	50435243 	subpl	r5, r3, r3, asr #4
    22bc:	6e796c6f 	cdpvs	12, 7, cr6, cr9, cr15, {3}
    22c0:	61696d6f 	cmnvs	r9, pc, ror #26
    22c4:	5053006c 	subspl	r0, r3, ip, rrx
    22c8:	6e495f49 	cdpvs	15, 4, cr5, cr9, cr9, {2}
    22cc:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    22d0:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    22d4:	50530066 	subspl	r0, r3, r6, rrx
    22d8:	6e495f49 	cdpvs	15, 4, cr5, cr9, cr9, {2}
    22dc:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    22e0:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    22e4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    22e8:	4d504f5f 	ldclmi	15, cr4, [r0, #-380]	; 0xfffffe84
    22ec:	0065646f 	rsbeq	r6, r5, pc, ror #8
    22f0:	5f4d4954 	svcpl	0x004d4954
    22f4:	63726f46 	cmnvs	r2, #280	; 0x118
    22f8:	434f6465 	movtmi	r6, #62565	; 0xf465
    22fc:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    2300:	00676966 	rsbeq	r6, r7, r6, ror #18
    2304:	5f4d4954 	svcpl	0x004d4954
    2308:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    230c:	6e4f7463 	cdpvs	4, 4, cr7, cr15, cr3, {3}
    2310:	6c755065 	ldclvs	0, cr5, [r5], #-404	; 0xfffffe6c
    2314:	6f4d6573 	svcvs	0x004d6573
    2318:	54006564 	strpl	r6, [r0], #-1380	; 0xfffffa9c
    231c:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 2324 <_Min_Stack_Size+0x2124>
    2320:	6d43414d 	stfvse	f4, [r3, #-308]	; 0xfffffecc
    2324:	49440064 	stmdbmi	r4, {r2, r5, r6}^
    2328:	54005245 	strpl	r5, [r0], #-581	; 0xfffffdbb
    232c:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2330:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    2334:	67697254 			; <UNDEFINED> instruction: 0x67697254
    2338:	53726567 	cmnpl	r2, #432013312	; 0x19c00000
    233c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2340:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2344:	52545f4d 	subspl	r5, r4, #308	; 0x134
    2348:	6f534f47 	svcvs	0x00534f47
    234c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2350:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2354:	756f435f 	strbvc	r4, [pc, #-863]!	; 1ffd <_Min_Stack_Size+0x1dfd>
    2358:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    235c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    2360:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2364:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    2368:	4f646563 	svcmi	0x00646563
    236c:	6f433443 	svcvs	0x00433443
    2370:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2374:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2378:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    237c:	434f7261 	movtmi	r7, #62049	; 0xf261
    2380:	66655231 			; <UNDEFINED> instruction: 0x66655231
    2384:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2388:	414c465f 	cmpmi	ip, pc, asr r6
    238c:	49540047 	ldmdbmi	r4, {r0, r1, r2, r6}^
    2390:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    2394:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 21cc <_Min_Stack_Size+0x1fcc>
    2398:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
    239c:	49540031 	ldmdbmi	r4, {r0, r4, r5}^
    23a0:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    23a4:	6c6f5032 	stclvs	0, cr5, [pc], #-200	; 22e4 <_Min_Stack_Size+0x20e4>
    23a8:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    23ac:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    23b0:	70555f4d 	subsvc	r5, r5, sp, asr #30
    23b4:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    23b8:	61736944 	cmnvs	r3, r4, asr #18
    23bc:	43656c62 	cmnmi	r5, #25088	; 0x6200
    23c0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    23c4:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    23c8:	75505f4d 	ldrbvc	r5, [r0, #-3917]	; 0xfffff0b3
    23cc:	0065736c 	rsbeq	r7, r5, ip, ror #6
    23d0:	63706d74 	cmnvs	r0, #116, 26	; 0x1d00
    23d4:	31726d63 	cmncc	r2, r3, ror #26
    23d8:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    23dc:	726d6363 	rsbvc	r6, sp, #-1946157055	; 0x8c000001
    23e0:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
    23e4:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    23e8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    23ec:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
    23f0:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    23f4:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    23f8:	52434300 	subpl	r4, r3, #0, 6
    23fc:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
    2400:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2404:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    2408:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    240c:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2410:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2414:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    2418:	6b636f6c 	blvs	18de1d0 <_Min_Stack_Size+0x18ddfd0>
    241c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2420:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2424:	4f5f4d49 	svcmi	0x005f4d49
    2428:	6f503243 	svcvs	0x00503243
    242c:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2430:	6f437974 	svcvs	0x00437974
    2434:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2438:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    243c:	5252415f 	subspl	r4, r2, #-1073741801	; 0xc0000017
    2440:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    2444:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    2448:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    244c:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2450:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2454:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    2458:	6f697463 	svcvs	0x00697463
    245c:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    2460:	6e455f4d 	cdpvs	15, 4, cr5, cr5, cr13, {2}
    2464:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    2468:	746e4972 	strbtvc	r4, [lr], #-2418	; 0xfffff68e
    246c:	61667265 	cmnvs	r6, r5, ror #4
    2470:	6f436563 	svcvs	0x00436563
    2474:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2478:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    247c:	32434f5f 	subcc	r4, r3, #380	; 0x17c
    2480:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    2484:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    2488:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    248c:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2490:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xfffff0b3
    2494:	6172656e 	cmnvs	r2, lr, ror #10
    2498:	76456574 			; <UNDEFINED> instruction: 0x76456574
    249c:	00746e65 	rsbseq	r6, r4, r5, ror #28
    24a0:	5f4d4954 	svcpl	0x004d4954
    24a4:	50314349 	eorspl	r4, r1, r9, asr #6
    24a8:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    24ac:	00797469 	rsbseq	r7, r9, r9, ror #8
    24b0:	5f4d4954 	svcpl	0x004d4954
    24b4:	6146434f 	cmpvs	r6, pc, asr #6
    24b8:	54007473 	strpl	r7, [r0], #-1139	; 0xfffffb8d
    24bc:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    24c0:	6e6e6168 	powvsez	f6, f6, #0.0
    24c4:	43006c65 	movwmi	r6, #3173	; 0xc65
    24c8:	31524d43 	cmpcc	r2, r3, asr #26
    24cc:	4d434300 	stclmi	3, cr4, [r3, #-0]
    24d0:	54003252 	strpl	r3, [r0], #-594	; 0xfffffdae
    24d4:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    24d8:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    24dc:	6f4d7265 	svcvs	0x004d7265
    24e0:	6f436564 	svcvs	0x00436564
    24e4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    24e8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    24ec:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    24f0:	41646563 	cmnmi	r4, r3, ror #10
    24f4:	6f697463 	svcvs	0x00697463
    24f8:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    24fc:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
    2500:	646d4378 	strbtvs	r4, [sp], #-888	; 0xfffffc88
    2504:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2508:	50434f5f 	subpl	r4, r3, pc, asr pc
    250c:	6f6c6572 	svcvs	0x006c6572
    2510:	52006461 	andpl	r6, r0, #1627389952	; 0x61000000
    2514:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2518:	31444556 	cmpcc	r4, r6, asr r5
    251c:	45520030 	ldrbmi	r0, [r2, #-48]	; 0xffffffd0
    2520:	56524553 			; <UNDEFINED> instruction: 0x56524553
    2524:	31314445 	teqcc	r1, r5, asr #8
    2528:	53455200 	movtpl	r5, #20992	; 0x5200
    252c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    2530:	00323144 	eorseq	r3, r2, r4, asr #2
    2534:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    2538:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    253c:	52003331 	andpl	r3, r0, #-1006632960	; 0xc4000000
    2540:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2544:	31444556 	cmpcc	r4, r6, asr r5
    2548:	45520034 	ldrbmi	r0, [r2, #-52]	; 0xffffffcc
    254c:	56524553 			; <UNDEFINED> instruction: 0x56524553
    2550:	35314445 	ldrcc	r4, [r1, #-1093]!	; 0xfffffbbb
    2554:	53455200 	movtpl	r5, #20992	; 0x5200
    2558:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    255c:	00363144 	eorseq	r3, r6, r4, asr #2
    2560:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    2564:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    2568:	52003731 	andpl	r3, r0, #12845056	; 0xc40000
    256c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2570:	31444556 	cmpcc	r4, r6, asr r5
    2574:	45520038 	ldrbmi	r0, [r2, #-56]	; 0xffffffc8
    2578:	56524553 			; <UNDEFINED> instruction: 0x56524553
    257c:	39314445 	ldmdbcc	r1!, {r0, r2, r6, sl, lr}
    2580:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2584:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xfffff0a1
    2588:	4e747570 	mrcmi	5, 3, r7, cr4, cr0, {3}
    258c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    2590:	6d740065 	ldclvs	0, cr0, [r4, #-404]!	; 0xfffffe6c
    2594:	6d636370 	stclvs	3, cr6, [r3, #-448]!	; 0xfffffe40
    2598:	43007872 	movwmi	r7, #2162	; 0x872
    259c:	00524543 	subseq	r4, r2, r3, asr #10
    25a0:	5f4d4954 	svcpl	0x004d4954
    25a4:	00444b43 	subeq	r4, r4, r3, asr #22
    25a8:	5f4d4954 	svcpl	0x004d4954
    25ac:	41746553 	cmnmi	r4, r3, asr r5
    25b0:	726f7475 	rsbvc	r7, pc, #1962934272	; 0x75000000
    25b4:	616f6c65 	cmnvs	pc, r5, ror #24
    25b8:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
    25bc:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    25c0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    25c4:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    25c8:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    25cc:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    25d0:	61437465 	cmpvs	r3, r5, ror #8
    25d4:	72757470 	rsbsvc	r7, r5, #112, 8	; 0x70000000
    25d8:	54003265 	strpl	r3, [r0], #-613	; 0xfffffd9b
    25dc:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    25e0:	61437465 	cmpvs	r3, r5, ror #8
    25e4:	72757470 	rsbsvc	r7, r5, #112, 8	; 0x70000000
    25e8:	54003365 	strpl	r3, [r0], #-869	; 0xfffffc9b
    25ec:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    25f0:	61437465 	cmpvs	r3, r5, ror #8
    25f4:	72757470 	rsbsvc	r7, r5, #112, 8	; 0x70000000
    25f8:	54003465 	strpl	r3, [r0], #-1125	; 0xfffffb9b
    25fc:	4f5f4d49 	svcmi	0x005f4d49
    2600:	6e493343 	cdpvs	3, 4, cr3, cr9, cr3, {2}
    2604:	69007469 	stmdbvs	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    2608:	70706f63 	rsbsvc	r6, r0, r3, ror #30
    260c:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    2610:	6c6f7065 	stclvs	0, cr7, [pc], #-404	; 2484 <_Min_Stack_Size+0x2284>
    2614:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    2618:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    261c:	70555f4d 	subsvc	r5, r5, sp, asr #30
    2620:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    2624:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2628:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
    262c:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2630:	004e7843 	subeq	r7, lr, r3, asr #16
    2634:	5f4d4954 	svcpl	0x004d4954
    2638:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    263c:	43437463 	movtmi	r7, #13411	; 0x3463
    2640:	00414d44 	subeq	r4, r1, r4, asr #26
    2644:	5f4d4954 	svcpl	0x004d4954
    2648:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    264c:	00666544 	rsbeq	r6, r6, r4, asr #10
    2650:	5f4d4954 	svcpl	0x004d4954
    2654:	5031434f 	eorspl	r4, r1, pc, asr #6
    2658:	6f6c6572 	svcvs	0x006c6572
    265c:	6f436461 	svcvs	0x00436461
    2660:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2664:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2668:	414d445f 	cmpmi	sp, pc, asr r4
    266c:	73727542 	cmnvc	r2, #276824064	; 0x10800000
    2670:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    2674:	00687467 	rsbeq	r7, r8, r7, ror #8
    2678:	5f4d4954 	svcpl	0x004d4954
    267c:	61656c43 	cmnvs	r5, r3, asr #24
    2680:	616c4672 	smcvs	50274	; 0xc462
    2684:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2688:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    268c:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 24c4 <_Min_Stack_Size+0x22c4>
    2690:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
    2694:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
    2698:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    269c:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 24d4 <_Min_Stack_Size+0x22d4>
    26a0:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
    26a4:	49540033 	ldmdbmi	r4, {r0, r1, r4, r5}^
    26a8:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    26ac:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    26b0:	004d4f43 	subeq	r4, sp, r3, asr #30
    26b4:	63706d74 	cmnvs	r0, #116, 26	; 0x1d00
    26b8:	00726563 	rsbseq	r6, r2, r3, ror #10
    26bc:	5f4d4954 	svcpl	0x004d4954
    26c0:	4e32434f 	cdpmi	3, 3, cr4, cr2, cr15, {2}
    26c4:	616c6f50 	cmnvs	ip, r0, asr pc
    26c8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    26cc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    26d0:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    26d4:	435f3449 	cmpmi	pc, #1224736768	; 0x49000000
    26d8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    26dc:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    26e0:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    26e4:	616c6f50 	cmnvs	ip, r0, asr pc
    26e8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    26ec:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    26f0:	6f6c435f 	svcvs	0x006c435f
    26f4:	69446b63 	stmdbvs	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    26f8:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    26fc:	54006e6f 	strpl	r6, [r0], #-3695	; 0xfffff191
    2700:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    2704:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
    2708:	61637365 	cmnvs	r3, r5, ror #6
    270c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2710:	5f4d4954 	svcpl	0x004d4954
    2714:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2718:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    271c:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    2720:	545f4d49 	ldrbpl	r4, [pc], #-3401	; 2728 <_Min_Stack_Size+0x2528>
    2724:	42656d69 	rsbmi	r6, r5, #6720	; 0x1a40
    2728:	53657361 	cmnpl	r5, #-2080374783	; 0x84000001
    272c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2730:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    2734:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2738:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xfffff0b3
    273c:	70614374 	rsbvc	r4, r1, r4, ror r3
    2740:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    2744:	49540031 	ldmdbmi	r4, {r0, r4, r5}^
    2748:	614d5f4d 	cmpvs	sp, sp, asr #30
    274c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    2750:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    2754:	646f4d65 	strbtvs	r4, [pc], #-3429	; 275c <_Min_Stack_Size+0x255c>
    2758:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    275c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    2760:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2764:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    2768:	646f4d65 	strbtvs	r4, [pc], #-3429	; 2770 <_Min_Stack_Size+0x2570>
    276c:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2770:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    2774:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2778:	7473614d 	ldrbtvc	r6, [r3], #-333	; 0xfffffeb3
    277c:	6c537265 	lfmvs	f7, 2, [r3], {101}	; 0x65
    2780:	4d657661 	stclmi	6, cr7, [r5, #-388]!	; 0xfffffe7c
    2784:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2788:	5f4d4954 	svcpl	0x004d4954
    278c:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    2790:	5367616c 	cmnpl	r7, #108, 2
    2794:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    2798:	49540073 	ldmdbmi	r4, {r0, r1, r4, r5, r6}^
    279c:	44425f4d 	strbmi	r5, [r2], #-3917	; 0xfffff0b3
    27a0:	6e495254 	mcrvs	2, 2, r5, cr9, cr4, {2}
    27a4:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    27a8:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    27ac:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    27b0:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    27b4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    27b8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    27bc:	53007463 	movwpl	r7, #1123	; 0x463
    27c0:	0052434d 	subseq	r4, r2, sp, asr #6
    27c4:	5f4d4954 	svcpl	0x004d4954
    27c8:	5253534f 	subspl	r5, r3, #1006632961	; 0x3c000001
    27cc:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    27d0:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    27d4:	5400784d 	strpl	r7, [r0], #-2125	; 0xfffff7b3
    27d8:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 1a97 <_Min_Stack_Size+0x1897>
    27dc:	646f636e 	strbtvs	r6, [pc], #-878	; 27e4 <_Min_Stack_Size+0x25e4>
    27e0:	6f4d7265 	svcvs	0x004d7265
    27e4:	54006564 	strpl	r6, [r0], #-1380	; 0xfffffa9c
    27e8:	4f5f4d49 	svcmi	0x005f4d49
    27ec:	6f503443 	svcvs	0x00503443
    27f0:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    27f4:	6f437974 	svcvs	0x00437974
    27f8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    27fc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2800:	7475415f 	ldrbtvc	r4, [r5], #-351	; 0xfffffea1
    2804:	74616d6f 	strbtvc	r6, [r1], #-3439	; 0xfffff291
    2808:	754f6369 	strbvc	r6, [pc, #-873]	; 24a7 <_Min_Stack_Size+0x22a7>
    280c:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    2810:	6f682f00 	svcvs	0x00682f00
    2814:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    2818:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    281c:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    2820:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    2824:	544f492d 	strbpl	r4, [pc], #-2349	; 282c <_Min_Stack_Size+0x262c>
    2828:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    282c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2830:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
    2834:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    2838:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    283c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2840:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    2844:	5400632e 	strpl	r6, [r0], #-814	; 0xfffffcd2
    2848:	535f4d49 	cmppl	pc, #4672	; 0x1240
    284c:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2850:	74754f74 	ldrbtvc	r4, [r5], #-3956	; 0xfffff08c
    2854:	54747570 	ldrbtpl	r7, [r4], #-1392	; 0xfffffa90
    2858:	67676972 			; <UNDEFINED> instruction: 0x67676972
    285c:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    2860:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2864:	43497465 	movtmi	r7, #37989	; 0x9465
    2868:	65725031 	ldrbvs	r5, [r2, #-49]!	; 0xffffffcf
    286c:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2870:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    2874:	505f4d49 	subspl	r4, pc, r9, asr #26
    2878:	43494d57 	movtmi	r4, #40279	; 0x9d57
    287c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2880:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2884:	6f435f33 	svcvs	0x00435f33
    2888:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    288c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2890:	414d445f 	cmpmi	sp, pc, asr r4
    2894:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2898:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
    289c:	4f5f4d49 	svcmi	0x005f4d49
    28a0:	72745343 	rsbsvc	r5, r4, #201326593	; 0xc000001
    28a4:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    28a8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    28ac:	5f4d4954 	svcpl	0x004d4954
    28b0:	52435350 	subpl	r5, r3, #80, 6	; 0x40000001
    28b4:	616f6c65 	cmnvs	pc, r5, ror #24
    28b8:	646f4d64 	strbtvs	r4, [pc], #-3428	; 28c0 <_Min_Stack_Size+0x26c0>
    28bc:	6d740065 	ldclvs	0, cr0, [r4, #-404]!	; 0xfffffe6c
    28c0:	636d7370 	cmnvs	sp, #112, 6	; 0xc0000001
    28c4:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    28c8:	78455f4d 	stmdavc	r5, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    28cc:	47525474 			; <UNDEFINED> instruction: 0x47525474
    28d0:	616c6f50 	cmnvs	ip, r0, asr pc
    28d4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    28d8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    28dc:	5444425f 	strbpl	r4, [r4], #-607	; 0xfffffda1
    28e0:	72745352 	rsbsvc	r5, r4, #1207959553	; 0x48000001
    28e4:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    28e8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    28ec:	63706d74 	cmnvs	r0, #116, 26	; 0x1d00
    28f0:	74003172 	strvc	r3, [r0], #-370	; 0xfffffe8e
    28f4:	7263706d 	rsbvc	r7, r3, #109	; 0x6d
    28f8:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
    28fc:	78455f4d 	stmdavc	r5, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    2900:	47525474 			; <UNDEFINED> instruction: 0x47525474
    2904:	73657250 	cmnvc	r5, #80, 4
    2908:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    290c:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    2910:	72425f4d 	subvc	r5, r2, #308	; 0x134
    2914:	006b6165 	rsbeq	r6, fp, r5, ror #2
    2918:	5f4d4954 	svcpl	0x004d4954
    291c:	61656c43 	cmnvs	r5, r3, asr #24
    2920:	33434f72 	movtcc	r4, #16242	; 0x3f72
    2924:	00666552 	rsbeq	r6, r6, r2, asr r5
    2928:	5f4d4954 	svcpl	0x004d4954
    292c:	64616544 	strbtvs	r6, [r1], #-1348	; 0xfffffabc
    2930:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2934:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2938:	31434f5f 	cmpcc	r3, pc, asr pc
    293c:	616c6f50 	cmnvs	ip, r0, asr pc
    2940:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2944:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2948:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    294c:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    2950:	6563726f 	strbvs	r7, [r3, #-623]!	; 0xfffffd91
    2954:	31434f64 	cmpcc	r3, r4, ror #30
    2958:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    295c:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2960:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    2964:	6563726f 	strbvs	r7, [r3, #-623]!	; 0xfffffd91
    2968:	33434f64 	movtcc	r4, #16228	; 0x3f64
    296c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2970:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2974:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2978:	65725043 	ldrbvs	r5, [r2, #-67]!	; 0xffffffbd
    297c:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2980:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    2984:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2988:	434e7843 	movtmi	r7, #59459	; 0xe843
    298c:	5400646d 	strpl	r6, [r0], #-1133	; 0xfffffb93
    2990:	4f5f4d49 	svcmi	0x005f4d49
    2994:	64494e43 	strbvs	r4, [r9], #-3651	; 0xfffff1bd
    2998:	7453656c 	ldrbvc	r6, [r3], #-1388	; 0xfffffa94
    299c:	00657461 	rsbeq	r7, r5, r1, ror #8
    29a0:	5f4d4954 	svcpl	0x004d4954
    29a4:	42414d44 	submi	r4, r1, #68, 26	; 0x1100
    29a8:	00657361 	rsbeq	r7, r5, r1, ror #6
    29ac:	706f6369 	rsbvc	r6, pc, r9, ror #6
    29b0:	69736f70 	ldmdbvs	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    29b4:	65736574 	ldrbvs	r6, [r3, #-1396]!	; 0xfffffa8c
    29b8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    29bc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    29c0:	5f4d4954 	svcpl	0x004d4954
    29c4:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    29c8:	61706d6f 	cmnvs	r0, pc, ror #26
    29cc:	00346572 	eorseq	r6, r4, r2, ror r5
    29d0:	5f4d4954 	svcpl	0x004d4954
    29d4:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    29d8:	61745354 	cmnvs	r4, r4, asr r3
    29dc:	00737574 	rsbseq	r7, r3, r4, ror r5
    29e0:	5f4d4954 	svcpl	0x004d4954
    29e4:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    29e8:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0xfffffebe
    29ec:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    29f0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    29f4:	54007463 	strpl	r7, [r0], #-1123	; 0xfffffb9d
    29f8:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 2a00 <_Min_Stack_Size+0x2800>
    29fc:	6f43414d 	svcvs	0x0043414d
    2a00:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2a04:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2a08:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2a0c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2a10:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
    2a14:	6f697369 	svcvs	0x00697369
    2a18:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    2a1c:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
    2a20:	49540078 	ldmdbmi	r4, {r3, r4, r5, r6}^
    2a24:	754f5f4d 	strbvc	r5, [pc, #-3917]	; 1adf <_Min_Stack_Size+0x18df>
    2a28:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    2a2c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    2a30:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2a34:	76455f4d 	strbvc	r5, [r5], -sp, asr #30
    2a38:	53746e65 	cmnpl	r4, #1616	; 0x650
    2a3c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2a40:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2a44:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2a48:	616c6f50 	cmnvs	ip, r0, asr pc
    2a4c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2a50:	53455200 	movtpl	r5, #20992	; 0x5200
    2a54:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    2a58:	54003944 	strpl	r3, [r0], #-2372	; 0xfffff6bc
    2a5c:	505f4d49 	subspl	r4, pc, r9, asr #26
    2a60:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2a64:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2a68:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2a6c:	7849545f 	stmdavc	r9, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    2a70:	65747845 	ldrbvs	r7, [r4, #-2117]!	; 0xfffff7bb
    2a74:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    2a78:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2a7c:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    2a80:	00676966 	rsbeq	r6, r7, r6, ror #18
    2a84:	5f4d4954 	svcpl	0x004d4954
    2a88:	4b434f4c 	blmi	10d67c0 <_Min_Stack_Size+0x10d65c0>
    2a8c:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
    2a90:	4954006c 	ldmdbmi	r4, {r2, r3, r5, r6}^
    2a94:	74435f4d 	strbvc	r5, [r3], #-3917	; 0xfffff0b3
    2a98:	57506c72 			; <UNDEFINED> instruction: 0x57506c72
    2a9c:	74754f4d 	ldrbtvc	r4, [r5], #-3917	; 0xfffff0b3
    2aa0:	73747570 	cmnvc	r4, #112, 10	; 0x1c000000
    2aa4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2aa8:	5444425f 	strbpl	r4, [r4], #-607	; 0xfffffda1
    2aac:	6e6f4352 	mcrvs	3, 3, r4, cr15, cr2, {2}
    2ab0:	00676966 	rsbeq	r6, r7, r6, ror #18
    2ab4:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    2ab8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2abc:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2ac0:	50324349 	eorspl	r4, r2, r9, asr #6
    2ac4:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2ac8:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2acc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2ad0:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0xffffffa1
    2ad4:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2ad8:	6f437265 	svcvs	0x00437265
    2adc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2ae0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2ae4:	5254495f 	subspl	r4, r4, #1556480	; 0x17c000
    2ae8:	74784578 	ldrbtvc	r4, [r8], #-1400	; 0xfffffa88
    2aec:	616e7265 	cmnvs	lr, r5, ror #4
    2af0:	6f6c436c 	svcvs	0x006c436c
    2af4:	6f436b63 	svcvs	0x00436b63
    2af8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2afc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2b00:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    2b04:	6c6f504e 	stclvs	0, cr5, [pc], #-312	; 29d4 <_Min_Stack_Size+0x27d4>
    2b08:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    2b0c:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    2b10:	00676966 	rsbeq	r6, r7, r6, ror #18
    2b14:	5f4d4954 	svcpl	0x004d4954
    2b18:	4953534f 	ldmdbmi	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    2b1c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    2b20:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2b24:	54495f4d 	strbpl	r5, [r9], #-3917	; 0xfffff0b3
    2b28:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2b2c:	6d69545f 	cfstrdvs	mvd5, [r9, #-380]!	; 0xfffffe84
    2b30:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
    2b34:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    2b38:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2b3c:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    2b40:	74784578 	ldrbtvc	r4, [r8], #-1400	; 0xfffffa88
    2b44:	616e7265 	cmnvs	lr, r5, ror #4
    2b48:	4b4c436c 	blmi	1313900 <_Min_Stack_Size+0x1313700>
    2b4c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2b50:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
    2b54:	425f4d49 	subsmi	r4, pc, #4672	; 0x1240
    2b58:	49525444 	ldmdbmi	r2, {r2, r6, sl, ip, lr}^
    2b5c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2b60:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2b64:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2b68:	6f435f32 	svcvs	0x00435f32
    2b6c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2b70:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2b74:	32434f5f 	subcc	r4, r3, #380	; 0x17c
    2b78:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
    2b7c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2b80:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2b84:	4f5f4d49 	svcmi	0x005f4d49
    2b88:	61463443 	cmpvs	r6, r3, asr #8
    2b8c:	6f437473 	svcvs	0x00437473
    2b90:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2b94:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2b98:	4e434f5f 	mcrmi	15, 2, r4, cr3, cr15, {2}
    2b9c:	616c6f50 	cmnvs	ip, r0, asr pc
    2ba0:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2ba4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2ba8:	5254455f 	subspl	r4, r4, #398458880	; 0x17c00000
    2bac:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2bb0:	646f4d6b 	strbtvs	r4, [pc], #-3435	; 2bb8 <_Min_Stack_Size+0x29b8>
    2bb4:	6f433265 	svcvs	0x00433265
    2bb8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2bbc:	31495400 	cmpcc	r9, r0, lsl #8
    2bc0:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    2bc4:	00676966 	rsbeq	r6, r7, r6, ror #18
    2bc8:	5f4d4954 	svcpl	0x004d4954
    2bcc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2bd0:	52414d44 	subpl	r4, r1, #68, 26	; 0x1100
    2bd4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2bd8:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2bdc:	50334349 	eorspl	r4, r3, r9, asr #6
    2be0:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2be4:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2be8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2bec:	32434f5f 	subcc	r4, r3, #380	; 0x17c
    2bf0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    2bf4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2bf8:	7265505f 	rsbvc	r5, r5, #95	; 0x5f
    2bfc:	00646f69 	rsbeq	r6, r4, r9, ror #30
    2c00:	5f4d4954 	svcpl	0x004d4954
    2c04:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2c08:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0xfffffebe
    2c0c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    2c10:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    2c14:	00666544 	rsbeq	r6, r6, r4, asr #10
    2c18:	5f4d4954 	svcpl	0x004d4954
    2c1c:	61656c43 	cmnvs	r5, r3, asr #24
    2c20:	50544972 	subspl	r4, r4, r2, ror r9
    2c24:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2c28:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2c2c:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2c30:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2c34:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    2c38:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    2c3c:	00666544 	rsbeq	r6, r6, r4, asr #10
    2c40:	5f4d4954 	svcpl	0x004d4954
    2c44:	4934434f 	ldmdbmi	r4!, {r0, r1, r2, r3, r6, r8, r9, lr}
    2c48:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2c4c:	5f4d4954 	svcpl	0x004d4954
    2c50:	6e494349 	cdpvs	3, 4, cr4, cr9, cr9, {2}
    2c54:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    2c58:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2c5c:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2c60:	78434f74 	stmdavc	r3, {r2, r4, r5, r6, r8, r9, sl, fp, lr}^
    2c64:	4954004d 	ldmdbmi	r4, {r0, r2, r3, r6}^
    2c68:	70555f4d 	subsvc	r5, r5, sp, asr #30
    2c6c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    2c70:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
    2c74:	43747365 	cmnmi	r4, #-1811939327	; 0x94000001
    2c78:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2c7c:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2c80:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2c84:	65725034 	ldrbvs	r5, [r2, #-52]!	; 0xffffffcc
    2c88:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    2c8c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2c90:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2c94:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2c98:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0xfffffe94
    2c9c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    2ca0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2ca4:	4d434f5f 	stclmi	15, cr4, [r3, #-380]	; 0xfffffe84
    2ca8:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2cac:	5f4d4954 	svcpl	0x004d4954
    2cb0:	61656c43 	cmnvs	r5, r3, asr #24
    2cb4:	34434f72 	strbcc	r4, [r3], #-3954	; 0xfffff08e
    2cb8:	00666552 	rsbeq	r6, r6, r2, asr r5
    2cbc:	5f4d4954 	svcpl	0x004d4954
    2cc0:	61657242 	cmnvs	r5, r2, asr #4
    2cc4:	6c6f506b 	stclvs	0, cr5, [pc], #-428	; 2b20 <_Min_Stack_Size+0x2920>
    2cc8:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    2ccc:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    2cd0:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2cd4:	6f504e31 	svcvs	0x00504e31
    2cd8:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2cdc:	6f437974 	svcvs	0x00437974
    2ce0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2ce4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2ce8:	5043435f 	subpl	r4, r3, pc, asr r3
    2cec:	6f6c6572 	svcvs	0x006c6572
    2cf0:	6f436461 	svcvs	0x00436461
    2cf4:	6f72746e 	svcvs	0x0072746e
    2cf8:	4343006c 	movtmi	r0, #12396	; 0x306c
    2cfc:	54003152 	strpl	r3, [r0], #-338	; 0xfffffeae
    2d00:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 1fbf <_Min_Stack_Size+0x1dbf>
    2d04:	6c435254 	sfmvs	f5, 2, [r3], {84}	; 0x54
    2d08:	4d6b636f 	stclmi	3, cr6, [fp, #-444]!	; 0xfffffe44
    2d0c:	3165646f 	cmncc	r5, pc, ror #8
    2d10:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2d14:	43006769 	movwmi	r6, #1897	; 0x769
    2d18:	00335243 	eorseq	r5, r3, r3, asr #4
    2d1c:	34524343 	ldrbcc	r4, [r2], #-835	; 0xfffffcbd
    2d20:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2d24:	49434f5f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
    2d28:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
    2d2c:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    2d30:	54006665 	strpl	r6, [r0], #-1637	; 0xfffff99b
    2d34:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2d38:	6f437465 	svcvs	0x00437465
    2d3c:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
    2d40:	74690072 	strbtvc	r0, [r9], #-114	; 0xffffff8e
    2d44:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    2d48:	5400656c 	strpl	r6, [r0], #-1388	; 0xfffffa94
    2d4c:	4f5f4d49 	svcmi	0x005f4d49
    2d50:	6f503343 	svcvs	0x00503343
    2d54:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2d58:	6f437974 	svcvs	0x00437974
    2d5c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2d60:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2d64:	31434f5f 	cmpcc	r3, pc, asr pc
    2d68:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    2d6c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2d70:	7065525f 	rsbvc	r5, r5, pc, asr r2
    2d74:	74697465 	strbtvc	r7, [r9], #-1125	; 0xfffffb9b
    2d78:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    2d7c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    2d80:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    2d84:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2d88:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2d8c:	6c614874 	stclvs	8, cr4, [r1], #-464	; 0xfffffe30
    2d90:	6e65536c 	cdpvs	3, 6, cr5, cr5, cr12, {3}
    2d94:	00726f73 	rsbseq	r6, r2, r3, ror pc
    2d98:	5f4d4954 	svcpl	0x004d4954
    2d9c:	6e494349 	cdpvs	3, 4, cr4, cr9, cr9, {2}
    2da0:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    2da4:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    2da8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2dac:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    2db0:	434f7261 	movtmi	r7, #62049	; 0xf261
    2db4:	66655232 			; <UNDEFINED> instruction: 0x66655232
    2db8:	74784500 	ldrbtvc	r4, [r8], #-1280	; 0xfffffb00
    2dbc:	46475254 			; <UNDEFINED> instruction: 0x46475254
    2dc0:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    2dc4:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    2dc8:	54495f4d 	strbpl	r5, [r9], #-3917	; 0xfffff0b3
    2dcc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2dd0:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2dd4:	4f5f4d49 	svcmi	0x005f4d49
    2dd8:	6c644943 			; <UNDEFINED> instruction: 0x6c644943
    2ddc:	61745365 	cmnvs	r4, r5, ror #6
    2de0:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    2de4:	4f5f4d49 	svcmi	0x005f4d49
    2de8:	656c4343 	strbvs	r4, [ip, #-835]!	; 0xfffffcbd
    2dec:	54007261 	strpl	r7, [r0], #-609	; 0xfffffd9f
    2df0:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2df4:	43535043 	cmpmi	r3, #67	; 0x43
    2df8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2dfc:	5254455f 	subspl	r4, r4, #398458880	; 0x17c00000
    2e00:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2e04:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2e08:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 2e10 <_Min_Stack_Size+0x2c10>
    2e0c:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    2e10:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2e14:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2e18:	73614633 	cmnvc	r1, #53477376	; 0x3300000
    2e1c:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    2e20:	00676966 	rsbeq	r6, r7, r6, ror #18
    2e24:	5f4d4954 	svcpl	0x004d4954
    2e28:	5033434f 	eorspl	r4, r3, pc, asr #6
    2e2c:	6f6c6572 	svcvs	0x006c6572
    2e30:	6f436461 	svcvs	0x00436461
    2e34:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2e38:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2e3c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2e40:	50344349 	eorspl	r4, r4, r9, asr #6
    2e44:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2e48:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2e4c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2e50:	31434f5f 	cmpcc	r3, pc, asr pc
    2e54:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
    2e58:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2e5c:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    2e60:	525f4332 	subspl	r4, pc, #-939524096	; 0xc8000000
    2e64:	52646165 	rsbpl	r6, r4, #1073741849	; 0x40000019
    2e68:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    2e6c:	00726574 	rsbseq	r6, r2, r4, ror r5
    2e70:	5f433249 	svcpl	0x00433249
    2e74:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    2e78:	5367616c 	cmnpl	r7, #108, 2
    2e7c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    2e80:	32490073 	subcc	r0, r9, #115	; 0x73
    2e84:	61435f43 	cmpvs	r3, r3, asr #30
    2e88:	6c75636c 	ldclvs	3, cr6, [r5], #-432	; 0xfffffe50
    2e8c:	50657461 	rsbpl	r7, r5, r1, ror #8
    2e90:	49004345 	stmdbmi	r0, {r0, r2, r6, r8, r9, lr}
    2e94:	415f4332 	cmpmi	pc, r2, lsr r3	; <UNPREDICTABLE>
    2e98:	6f6e6b63 	svcvs	0x006e6b63
    2e9c:	64656c77 	strbtvs	r6, [r5], #-3191	; 0xfffff389
    2ea0:	41646567 	cmnmi	r4, r7, ror #10
    2ea4:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    2ea8:	49007373 	stmdbmi	r0, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}
    2eac:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    2eb0:	7774666f 	ldrbvc	r6, [r4, -pc, ror #12]!
    2eb4:	52657261 	rsbpl	r7, r5, #268435462	; 0x10000006
    2eb8:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    2ebc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2ec0:	5f433249 	svcpl	0x00433249
    2ec4:	69005449 	stmdbvs	r0, {r0, r3, r6, sl, ip, lr}
    2ec8:	62786332 	rsbsvs	r6, r8, #-939524096	; 0xc8000000
    2ecc:	00657361 	rsbeq	r7, r5, r1, ror #6
    2ed0:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
    2ed4:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
    2ed8:	682f0074 	stmdavs	pc!, {r2, r4, r5, r6}	; <UNPREDICTABLE>
    2edc:	2f656d6f 	svccs	0x00656d6f
    2ee0:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    2ee4:	542f7673 	strtpl	r7, [pc], #-1651	; 2eec <_Min_Stack_Size+0x2cec>
    2ee8:	41534144 	cmpmi	r3, r4, asr #2
    2eec:	4f492d54 	svcmi	0x00492d54
    2ef0:	694c2f54 	stmdbvs	ip, {r2, r4, r6, r8, r9, sl, fp, sp}^
    2ef4:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    2ef8:	2f736569 	svccs	0x00736569
    2efc:	2f637273 	svccs	0x00637273
    2f00:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2f04:	30316632 	eorscc	r6, r1, r2, lsr r6
    2f08:	32695f78 	rsbcc	r5, r9, #120, 30	; 0x1e0
    2f0c:	00632e63 	rsbeq	r2, r3, r3, ror #28
    2f10:	5f433249 	svcpl	0x00433249
    2f14:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
    2f18:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
    2f1c:	504f5453 	subpl	r5, pc, r3, asr r4	; <UNPREDICTABLE>
    2f20:	43324900 	teqmi	r2, #0, 18
    2f24:	646d435f 	strbtvs	r4, [sp], #-863	; 0xfffffca1
    2f28:	43324900 	teqmi	r2, #0, 18
    2f2c:	6172545f 	cmnvs	r2, pc, asr r4
    2f30:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    2f34:	43455074 	movtmi	r5, #20596	; 0x5074
    2f38:	43324900 	teqmi	r2, #0, 18
    2f3c:	63720078 	cmnvs	r2, #120	; 0x78
    2f40:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
    2f44:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    2f48:	43324900 	teqmi	r2, #0, 18
    2f4c:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    2f50:	54497261 	strbpl	r7, [r9], #-609	; 0xfffffd9f
    2f54:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
    2f58:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    2f5c:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    2f60:	465f4332 			; <UNDEFINED> instruction: 0x465f4332
    2f64:	0047414c 	subeq	r4, r7, ip, asr #2
    2f68:	5f433249 	svcpl	0x00433249
    2f6c:	4b43414e 	blmi	10d34ac <_Min_Stack_Size+0x10d32ac>
    2f70:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    2f74:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    2f78:	43324900 	teqmi	r2, #0, 18
    2f7c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2f80:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    2f84:	00746375 	rsbseq	r6, r4, r5, ror r3
    2f88:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    2f8c:	32490031 	subcc	r0, r9, #49	; 0x31
    2f90:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
    2f94:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    2f98:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    2f9c:	32490073 	subcc	r0, r9, #115	; 0x73
    2fa0:	52415f43 	subpl	r5, r1, #268	; 0x10c
    2fa4:	646d4350 	strbtvs	r4, [sp], #-848	; 0xfffffcb0
    2fa8:	6c637000 	stclvs	0, cr7, [r3], #-0
    2fac:	4900316b 	stmdbmi	r0, {r0, r1, r3, r5, r6, r8, ip, sp}
    2fb0:	445f4332 	ldrbmi	r4, [pc], #-818	; 2fb8 <_Min_Stack_Size+0x2db8>
    2fb4:	6d43414d 	stfvse	f4, [r3, #-308]	; 0xfffffecc
    2fb8:	32490064 	subcc	r0, r9, #100	; 0x64
    2fbc:	4d445f43 	stclmi	15, cr5, [r4, #-268]	; 0xfffffef4
    2fc0:	73614c41 	cmnvc	r1, #16640	; 0x4100
    2fc4:	61725474 	cmnvs	r2, r4, ror r4
    2fc8:	6566736e 	strbvs	r7, [r6, #-878]!	; 0xfffffc92
    2fcc:	646d4372 	strbtvs	r4, [sp], #-882	; 0xfffffc8e
    2fd0:	43324900 	teqmi	r2, #0, 18
    2fd4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    2fd8:	00434550 	subeq	r4, r3, r0, asr r5
    2fdc:	5f433249 	svcpl	0x00433249
    2fe0:	6c617544 	cfstr64vs	mvdx7, [r1], #-272	; 0xfffffef0
    2fe4:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    2fe8:	43737365 	cmnmi	r3, #-1811939327	; 0x94000001
    2fec:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    2ff0:	475f4332 	smmlarmi	pc, r2, r3, r4	; <UNPREDICTABLE>
    2ff4:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    2ff8:	61436c61 	cmpvs	r3, r1, ror #24
    2ffc:	6d436c6c 	stclvs	12, cr6, [r3, #-432]	; 0xfffffe50
    3000:	32490064 	subcc	r0, r9, #100	; 0x64
    3004:	414e5f43 	cmpmi	lr, r3, asr #30
    3008:	6f504b43 	svcvs	0x00504b43
    300c:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    3010:	6f436e6f 	svcvs	0x00436e6f
    3014:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3018:	616c6600 	cmnvs	ip, r0, lsl #12
    301c:	736f7067 	cmnvc	pc, #103	; 0x67
    3020:	43324900 	teqmi	r2, #0, 18
    3024:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 302c <_Min_Stack_Size+0x2e2c>
    3028:	32690065 	rsbcc	r0, r9, #101	; 0x65
    302c:	67657263 	strbvs	r7, [r5, -r3, ror #4]!
    3030:	43324900 	teqmi	r2, #0, 18
    3034:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    3038:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
    303c:	61746144 	cmnvs	r4, r4, asr #2
    3040:	43324900 	teqmi	r2, #0, 18
    3044:	7361465f 	cmnvc	r1, #99614720	; 0x5f00000
    3048:	646f4d74 	strbtvs	r4, [pc], #-3444	; 3050 <_Min_Stack_Size+0x2e50>
    304c:	74754465 	ldrbtvc	r4, [r5], #-1125	; 0xfffffb9b
    3050:	63794379 	cmnvs	r9, #-469762047	; 0xe4000001
    3054:	6f43656c 	svcvs	0x0043656c
    3058:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    305c:	43324900 	teqmi	r2, #0, 18
    3060:	424d535f 	submi	r5, sp, #2080374785	; 0x7c000001
    3064:	6c417375 	mcrrvs	3, 7, r7, r1, cr5
    3068:	43747265 	cmnmi	r4, #1342177286	; 0x50000006
    306c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3070:	32490067 	subcc	r0, r9, #103	; 0x67
    3074:	54495f43 	strbpl	r5, [r9], #-3907	; 0xfffff0bd
    3078:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    307c:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    3080:	455f4332 	ldrbmi	r4, [pc, #-818]	; 2d56 <_Min_Stack_Size+0x2b56>
    3084:	544e4556 	strbpl	r4, [lr], #-1366	; 0xfffffaaa
    3088:	43324900 	teqmi	r2, #0, 18
    308c:	6b63415f 	blvs	18d3610 <_Min_Stack_Size+0x18d3410>
    3090:	6c776f6e 	ldclvs	15, cr6, [r7], #-440	; 0xfffffe48
    3094:	65676465 	strbvs	r6, [r7, #-1125]!	; 0xfffffb9b
    3098:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    309c:	66006769 	strvs	r6, [r0], -r9, ror #14
    30a0:	3267616c 	rsbcc	r6, r7, #108, 2
    30a4:	43324900 	teqmi	r2, #0, 18
    30a8:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    30ac:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    30b0:	49006761 	stmdbmi	r0, {r0, r5, r6, r8, r9, sl, sp, lr}
    30b4:	525f4332 	subspl	r4, pc, #-939524096	; 0xc8000000
    30b8:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    30bc:	00726574 	rsbseq	r6, r2, r4, ror r5
    30c0:	5f433249 	svcpl	0x00433249
    30c4:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
    30c8:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
    30cc:	52415453 	subpl	r5, r1, #1392508928	; 0x53000000
    30d0:	32490054 	subcc	r0, r9, #84	; 0x54
    30d4:	774f5f43 	strbvc	r5, [pc, -r3, asr #30]
    30d8:	6464416e 	strbtvs	r4, [r4], #-366	; 0xfffffe92
    30dc:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    30e0:	32490031 	subcc	r0, r9, #49	; 0x31
    30e4:	63415f43 	movtvs	r5, #8003	; 0x1f43
    30e8:	3249006b 	subcc	r0, r9, #107	; 0x6b
    30ec:	45505f43 	ldrbmi	r5, [r0, #-3907]	; 0xfffff0bd
    30f0:	736f5043 	cmnvc	pc, #67	; 0x43
    30f4:	6f697469 	svcvs	0x00697469
    30f8:	6e6f436e 	cdpvs	3, 6, cr4, cr15, cr14, {3}
    30fc:	00676966 	rsbeq	r6, r7, r6, ror #18
    3100:	71657266 	cmnvc	r5, r6, ror #4
    3104:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
    3108:	32490065 	subcc	r0, r9, #101	; 0x65
    310c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    3110:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    3114:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    3118:	32490066 	subcc	r0, r9, #102	; 0x66
    311c:	74535f43 	ldrbvc	r5, [r3], #-3907	; 0xfffff0bd
    3120:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    3124:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    3128:	43324900 	teqmi	r2, #0, 18
    312c:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3130:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3134:	5f433249 	svcpl	0x00433249
    3138:	416e774f 	cmnmi	lr, pc, asr #14
    313c:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    3140:	43327373 	teqmi	r2, #-872415231	; 0xcc000001
    3144:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3148:	32490067 	subcc	r0, r9, #103	; 0x67
    314c:	74535f43 	ldrbvc	r5, [r3], #-3907	; 0xfffff0bd
    3150:	63746572 	cmnvs	r4, #478150656	; 0x1c800000
    3154:	6f6c4368 	svcvs	0x006c4368
    3158:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    315c:	32490064 	subcc	r0, r9, #100	; 0x64
    3160:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    3164:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    3168:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
    316c:	43324900 	teqmi	r2, #0, 18
    3170:	4345505f 	movtmi	r5, #20575	; 0x505f
    3174:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    3178:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    317c:	43324900 	teqmi	r2, #0, 18
    3180:	424d535f 	submi	r5, sp, #2080374785	; 0x7c000001
    3184:	6c417375 	mcrrvs	3, 7, r7, r1, cr5
    3188:	00747265 	rsbseq	r7, r4, r5, ror #4
    318c:	5f433249 	svcpl	0x00433249
    3190:	79747544 	ldmdbvc	r4!, {r2, r6, r8, sl, ip, sp, lr}^
    3194:	6c637943 			; <UNDEFINED> instruction: 0x6c637943
    3198:	32490065 	subcc	r0, r9, #101	; 0x65
    319c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    31a0:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    31a4:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    31a8:	44646e65 	strbtmi	r6, [r4], #-3685	; 0xfffff19b
    31ac:	00617461 	rsbeq	r7, r1, r1, ror #8
    31b0:	5f433249 	svcpl	0x00433249
    31b4:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
    31b8:	74696237 	strbtvc	r6, [r9], #-567	; 0xfffffdc9
    31bc:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    31c0:	00737365 	rsbseq	r7, r3, r5, ror #6
    31c4:	5f433249 	svcpl	0x00433249
    31c8:	63656843 	cmnvs	r5, #4390912	; 0x430000
    31cc:	6576456b 	ldrbvs	r4, [r6, #-1387]!	; 0xfffffa95
    31d0:	4900746e 	stmdbmi	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    31d4:	445f4332 	ldrbmi	r4, [pc], #-818	; 31dc <_Min_Stack_Size+0x2fdc>
    31d8:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
    31dc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    31e0:	43324900 	teqmi	r2, #0, 18
    31e4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    31e8:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0xfffffeb4
    31ec:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    31f0:	57490074 	smlsldxpl	r0, r9, r4, r0
    31f4:	455f4744 	ldrbmi	r4, [pc, #-1860]	; 2ab8 <_Min_Stack_Size+0x28b8>
    31f8:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    31fc:	57490065 	strbpl	r0, [r9, -r5, rrx]
    3200:	505f4744 	subspl	r4, pc, r4, asr #14
    3204:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    3208:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    320c:	44574900 	ldrbmi	r4, [r7], #-2304	; 0xfffff700
    3210:	65535f47 	ldrbvs	r5, [r3, #-3911]	; 0xfffff0b9
    3214:	65725074 	ldrbvs	r5, [r2, #-116]!	; 0xffffff8c
    3218:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    321c:	49007265 	stmdbmi	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    3220:	5f474457 	svcpl	0x00474457
    3224:	52746553 	rsbspl	r6, r4, #348127232	; 0x14c00000
    3228:	616f6c65 	cmnvs	pc, r5, ror #24
    322c:	57490064 	strbpl	r0, [r9, -r4, rrx]
    3230:	525f4744 	subspl	r4, pc, #68, 14	; 0x1100000
    3234:	616f6c65 	cmnvs	pc, r5, ror #24
    3238:	756f4364 	strbvc	r4, [pc, #-868]!	; 2edc <_Min_Stack_Size+0x2cdc>
    323c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    3240:	44574900 	ldrbmi	r4, [r7], #-2304	; 0xfffff700
    3244:	72575f47 	subsvc	r5, r7, #284	; 0x11c
    3248:	41657469 	cmnmi	r5, r9, ror #8
    324c:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
    3250:	646d4373 	strbtvs	r4, [sp], #-883	; 0xfffffc8d
    3254:	6f682f00 	svcvs	0x00682f00
    3258:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    325c:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    3260:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    3264:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    3268:	544f492d 	strbpl	r4, [pc], #-2349	; 3270 <_Min_Stack_Size+0x3070>
    326c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3270:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3274:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
    3278:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    327c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3280:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    3284:	6477695f 	ldrbtvs	r6, [r7], #-2399	; 0xfffff6a1
    3288:	00632e67 	rsbeq	r2, r3, r7, ror #28
    328c:	47445749 	strbmi	r5, [r4, -r9, asr #14]
    3290:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    3294:	63416574 	movtvs	r6, #5492	; 0x1574
    3298:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    329c:	44574900 	ldrbmi	r4, [r7], #-2304	; 0xfffff700
    32a0:	4c465f47 	mcrrmi	15, 4, r5, r6, cr7
    32a4:	49004741 	stmdbmi	r0, {r0, r6, r8, r9, sl, lr}
    32a8:	5f474457 	svcpl	0x00474457
    32ac:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    32b0:	5367616c 	cmnpl	r7, #108, 2
    32b4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    32b8:	57490073 	smlsldxpl	r0, r9, r3, r0
    32bc:	545f4744 	ldrbpl	r4, [pc], #-1860	; 32c4 <_Min_Stack_Size+0x30c4>
    32c0:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    32c4:	44006665 	strmi	r6, [r0], #-1637	; 0xfffff99b
    32c8:	434d4742 	movtmi	r4, #55106	; 0xd742
    32cc:	79545f55 	ldmdbvc	r4, {r0, r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    32d0:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    32d4:	682f0066 	stmdavs	pc!, {r1, r2, r5, r6}	; <UNPREDICTABLE>
    32d8:	2f656d6f 	svccs	0x00656d6f
    32dc:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    32e0:	542f7673 	strtpl	r7, [pc], #-1651	; 32e8 <_Min_Stack_Size+0x30e8>
    32e4:	41534144 	cmpmi	r3, r4, asr #2
    32e8:	4f492d54 	svcmi	0x00492d54
    32ec:	694c2f54 	stmdbvs	ip, {r2, r4, r6, r8, r9, sl, fp, sp}^
    32f0:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    32f4:	2f736569 	svccs	0x00736569
    32f8:	2f637273 	svccs	0x00637273
    32fc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3300:	30316632 	eorscc	r6, r1, r2, lsr r6
    3304:	62645f78 	rsbvs	r5, r4, #120, 30	; 0x1e0
    3308:	75636d67 	strbvc	r6, [r3, #-3431]!	; 0xfffff299
    330c:	4400632e 	strmi	r6, [r0], #-814	; 0xfffffcd2
    3310:	434d4742 	movtmi	r4, #55106	; 0xd742
    3314:	6f435f55 	svcvs	0x00435f55
    3318:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    331c:	47424400 	strbmi	r4, [r2, -r0, lsl #8]
    3320:	5f55434d 	svcpl	0x0055434d
    3324:	52746547 	rsbspl	r6, r4, #297795584	; 0x11c00000
    3328:	44495645 	strbmi	r5, [r9], #-1605	; 0xfffff9bb
    332c:	47424400 	strbmi	r4, [r2, -r0, lsl #8]
    3330:	5f55434d 	svcpl	0x0055434d
    3334:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3338:	49006870 	stmdbmi	r0, {r4, r5, r6, fp, sp, lr}
    333c:	444f4344 	strbmi	r4, [pc], #-836	; 3344 <_Min_Stack_Size+0x3144>
    3340:	42440045 	submi	r0, r4, #69	; 0x45
    3344:	55434d47 	strbpl	r4, [r3, #-3399]	; 0xfffff2b9
    3348:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    334c:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
    3350:	53550044 	cmppl	r5, #68	; 0x44
    3354:	504c5f42 	subpl	r5, ip, r2, asr #30
    3358:	4e41435f 	mcrmi	3, 2, r4, cr1, cr15, {2}
    335c:	58525f31 	ldmdapl	r2, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
    3360:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
    3364:	43006e51 	movwmi	r6, #3665	; 0xe51
    3368:	5f314e41 	svcpl	0x00314e41
    336c:	5f454353 	svcpl	0x00454353
    3370:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3374:	414d4400 	cmpmi	sp, r0, lsl #8
    3378:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
    337c:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    3380:	495f376c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
    3384:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3388:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
    338c:	5f52455f 	svcpl	0x0052455f
    3390:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3394:	696e4900 	stmdbvs	lr!, {r8, fp, lr}^
    3398:	69745f74 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    339c:	6d5f326d 	lfmvs	f3, 2, [pc, #-436]	; 31f0 <_Min_Stack_Size+0x2ff0>
    33a0:	61625f73 	smcvs	9715	; 0x25f3
    33a4:	54006573 	strpl	r6, [r0], #-1395	; 0xfffffa8d
    33a8:	5f344d49 	svcpl	0x00344d49
    33ac:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    33b0:	414d4400 	cmpmi	sp, r0, lsl #8
    33b4:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
    33b8:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    33bc:	495f326c 	ldmdbmi	pc, {r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    33c0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    33c4:	53414c46 	movtpl	r4, #7238	; 0x1c46
    33c8:	52495f48 	subpl	r5, r9, #72, 30	; 0x120
    33cc:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
    33d0:	30495458 	subcc	r5, r9, r8, asr r4
    33d4:	5152495f 	cmppl	r2, pc, asr r9
    33d8:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
    33dc:	35314954 	ldrcc	r4, [r1, #-2388]!	; 0xfffff6ac
    33e0:	5f30315f 	svcpl	0x0030315f
    33e4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    33e8:	6e655000 	cdpvs	0, 6, cr5, cr5, cr0, {0}
    33ec:	5f565364 	svcpl	0x00565364
    33f0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    33f4:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    33f8:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    33fc:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    3400:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0xfffffc8b
    3404:	52006572 	andpl	r6, r0, #478150656	; 0x1c800000
    3408:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    340c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3410:	6f6d654d 	svcvs	0x006d654d
    3414:	614d7972 	hvcvs	55186	; 0xd792
    3418:	6567616e 	strbvs	r6, [r7, #-366]!	; 0xfffffe92
    341c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    3420:	5152495f 	cmppl	r2, pc, asr r9
    3424:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    3428:	425f314d 	subsmi	r3, pc, #1073741843	; 0x40000013
    342c:	495f4b52 	ldmdbmi	pc, {r1, r4, r6, r8, r9, fp, lr}^	; <UNPREDICTABLE>
    3430:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3434:	31495053 	qdaddcc	r5, r3, r9
    3438:	5152495f 	cmppl	r2, pc, asr r9
    343c:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    3440:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
    3444:	6e6e6168 	powvsez	f6, f6, #0.0
    3448:	5f346c65 	svcpl	0x00346c65
    344c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3450:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    3454:	58525f31 	ldmdapl	r2, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
    3458:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    345c:	55006e51 	strpl	r6, [r0, #-3665]	; 0xfffff1af
    3460:	485f4253 	ldmdami	pc, {r0, r1, r4, r6, r9, lr}^	; <UNPREDICTABLE>
    3464:	41435f50 	cmpmi	r3, r0, asr pc
    3468:	545f314e 	ldrbpl	r3, [pc], #-334	; 3470 <_Min_Stack_Size+0x3270>
    346c:	52495f58 	subpl	r5, r9, #88, 30	; 0x160
    3470:	55006e51 	strpl	r6, [r0, #-3665]	; 0xfffff1af
    3474:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    3478:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
    347c:	4f006e51 	svcmi	0x00006e51
    3480:	5f44454c 	svcpl	0x0044454c
    3484:	4f495047 	svcmi	0x00495047
    3488:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    348c:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    3490:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0xfffffc8b
    3494:	45006572 	strmi	r6, [r0, #-1394]	; 0xfffffa8e
    3498:	32495458 	subcc	r5, r9, #88, 8	; 0x58000000
    349c:	5152495f 	cmppl	r2, pc, asr r9
    34a0:	3249006e 	subcc	r0, r9, #110	; 0x6e
    34a4:	455f3243 	ldrbmi	r3, [pc, #-579]	; 3269 <_Min_Stack_Size+0x3069>
    34a8:	52495f56 	subpl	r5, r9, #344	; 0x158
    34ac:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
    34b0:	5f31414d 	svcpl	0x0031414d
    34b4:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    34b8:	366c656e 	strbtcc	r6, [ip], -lr, ror #10
    34bc:	5152495f 	cmppl	r2, pc, asr r9
    34c0:	564e006e 	strbpl	r0, [lr], -lr, rrx
    34c4:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    34c8:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    34cc:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    34d0:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    34d4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    34d8:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    34dc:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
    34e0:	5f31414d 	svcpl	0x0031414d
    34e4:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    34e8:	316c656e 	cmncc	ip, lr, ror #10
    34ec:	5152495f 	cmppl	r2, pc, asr r9
    34f0:	6e49006e 	cdpvs	0, 4, cr0, cr9, cr14, {3}
    34f4:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
    34f8:	5f316970 	svcpl	0x00316970
    34fc:	30353577 	eorscc	r3, r5, r7, ror r5
    3500:	4c4f0030 	mcrrmi	0, 3, r0, pc, cr0
    3504:	495f4445 	ldmdbmi	pc, {r0, r2, r6, sl, lr}^	; <UNPREDICTABLE>
    3508:	495f4332 	ldmdbmi	pc, {r1, r4, r5, r8, r9, lr}^	; <UNPREDICTABLE>
    350c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    3510:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    3514:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    3518:	42535500 	subsmi	r5, r3, #0, 10
    351c:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    3520:	495f7055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    3524:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3528:	47445757 	smlsldmi	r5, r4, r7, r7
    352c:	5152495f 	cmppl	r2, pc, asr r9
    3530:	6e49006e 	cdpvs	0, 4, cr0, cr9, cr14, {3}
    3534:	6c5f7469 	cfldrdvs	mvd7, [pc], {105}	; 0x69
    3538:	6c5f6465 	cfldrdvs	mvd6, [pc], {101}	; 0x65
    353c:	006b636f 	rsbeq	r6, fp, pc, ror #6
    3540:	46737542 	ldrbtmi	r7, [r3], -r2, asr #10
    3544:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    3548:	5152495f 	cmppl	r2, pc, asr r9
    354c:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
    3550:	5f344954 	svcpl	0x00344954
    3554:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3558:	44565000 	ldrbmi	r5, [r6], #-0
    355c:	5152495f 	cmppl	r2, pc, asr r9
    3560:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    3564:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
    3568:	6e6e6168 	powvsez	f6, f6, #0.0
    356c:	5f336c65 	svcpl	0x00336c65
    3570:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3574:	43324900 	teqmi	r2, #0, 18
    3578:	56455f31 			; <UNDEFINED> instruction: 0x56455f31
    357c:	5152495f 	cmppl	r2, pc, asr r9
    3580:	6e49006e 	cdpvs	0, 4, cr0, cr9, cr14, {3}
    3584:	695f7469 	ldmdbvs	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3588:	5f316332 	svcpl	0x00316332
    358c:	64656c6f 	strbtvs	r6, [r5], #-3183	; 0xfffff391
    3590:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    3594:	50555f31 	subspl	r5, r5, r1, lsr pc
    3598:	5152495f 	cmppl	r2, pc, asr r9
    359c:	5452006e 	ldrbpl	r0, [r2], #-110	; 0xffffff92
    35a0:	52495f43 	subpl	r5, r9, #268	; 0x10c
    35a4:	55006e51 	strpl	r6, [r0, #-3665]	; 0xfffff1af
    35a8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    35ac:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    35b0:	4e006e51 	mcrmi	14, 0, r6, cr0, cr1, {2}
    35b4:	614d6e6f 	cmpvs	sp, pc, ror #28
    35b8:	62616b73 	rsbvs	r6, r1, #117760	; 0x1cc00
    35bc:	6e49656c 	cdpvs	5, 4, cr6, cr9, cr12, {3}
    35c0:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
    35c4:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
    35c8:	5f314d49 	svcpl	0x00314d49
    35cc:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    35d0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    35d4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    35d8:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    35dc:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
    35e0:	5f314d49 	svcpl	0x00314d49
    35e4:	5f475254 	svcpl	0x00475254
    35e8:	5f4d4f43 	svcpl	0x004d4f43
    35ec:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    35f0:	43324900 	teqmi	r2, #0, 18
    35f4:	52455f31 	subpl	r5, r5, #49, 30	; 0xc4
    35f8:	5152495f 	cmppl	r2, pc, asr r9
    35fc:	7953006e 	ldmdbvc	r3, {r1, r2, r3, r5, r6}^
    3600:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    3604:	52495f6b 	subpl	r5, r9, #428	; 0x1ac
    3608:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
    360c:	5f324d49 	svcpl	0x00324d49
    3610:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3614:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    3618:	6d69545f 	cfstrdvs	mvd5, [r9, #-380]!	; 0xfffffe84
    361c:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
    3620:	72745365 	rsbsvc	r5, r4, #-1811939327	; 0x94000001
    3624:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0xfffffc8b
    3628:	44006572 	strmi	r6, [r0], #-1394	; 0xfffffa8e
    362c:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
    3630:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
    3634:	5f726f74 	svcpl	0x00726f74
    3638:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    363c:	61735500 	cmnvs	r3, r0, lsl #10
    3640:	61466567 	cmpvs	r6, r7, ror #10
    3644:	5f746c75 	svcpl	0x00746c75
    3648:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    364c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    3650:	355f3949 	ldrbcc	r3, [pc, #-2377]	; 2d0f <_Min_Stack_Size+0x2b0f>
    3654:	5152495f 	cmppl	r2, pc, asr r9
    3658:	5653006e 	ldrbpl	r0, [r3], -lr, rrx
    365c:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
    3660:	5152495f 	cmppl	r2, pc, asr r9
    3664:	5053006e 	subspl	r0, r3, lr, rrx
    3668:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    366c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3670:	31414d44 	cmpcc	r1, r4, asr #26
    3674:	6168435f 	cmnvs	r8, pc, asr r3
    3678:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    367c:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
    3680:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
    3684:	33495458 	movtcc	r5, #37976	; 0x9458
    3688:	5152495f 	cmppl	r2, pc, asr r9
    368c:	6e49006e 	cdpvs	0, 4, cr0, cr9, cr14, {3}
    3690:	695f7469 	ldmdbvs	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3694:	5f676477 	svcpl	0x00676477
    3698:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    369c:	44410074 	strbmi	r0, [r1], #-116	; 0xffffff8c
    36a0:	325f3143 	subscc	r3, pc, #-1073741808	; 0xc0000010
    36a4:	5152495f 	cmppl	r2, pc, asr r9
    36a8:	682f006e 	stmdavs	pc!, {r1, r2, r3, r5, r6}	; <UNPREDICTABLE>
    36ac:	2f656d6f 	svccs	0x00656d6f
    36b0:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    36b4:	542f7673 	strtpl	r7, [pc], #-1651	; 36bc <_Min_Stack_Size+0x34bc>
    36b8:	41534144 	cmpmi	r3, r4, asr #2
    36bc:	4f492d54 	svcmi	0x00492d54
    36c0:	73552f54 	cmpvc	r5, #84, 30	; 0x150
    36c4:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    36c8:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    36cc:	7a696c61 	bvc	1a5e858 <_Min_Stack_Size+0x1a5e658>
    36d0:	00632e65 	rsbeq	r2, r3, r5, ror #28
    36d4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    36d8:	495f3354 	ldmdbmi	pc, {r2, r4, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    36dc:	006e5152 	rsbeq	r5, lr, r2, asr r1
    36e0:	504d4154 	subpl	r4, sp, r4, asr r1
    36e4:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    36e8:	006e5152 	rsbeq	r5, lr, r2, asr r1
    36ec:	41435452 	cmpmi	r3, r2, asr r4
    36f0:	6d72616c 	ldfvse	f6, [r2, #-432]!	; 0xfffffe50
    36f4:	5152495f 	cmppl	r2, pc, asr r9
    36f8:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    36fc:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
    3700:	6e6e6168 	powvsez	f6, f6, #0.0
    3704:	5f356c65 	svcpl	0x00356c65
    3708:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    370c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    3710:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
    3714:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    3718:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
    371c:	61485f74 	hvcvs	34292	; 0x85f4
    3720:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    3724:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    3728:	495f324d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    372c:	61485152 	cmpvs	r8, r2, asr r1
    3730:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    3734:	69540072 	ldmdbvs	r4, {r1, r4, r5, r6}^
    3738:	3272656d 	rsbscc	r6, r2, #457179136	; 0x1b400000
    373c:	756f435f 	strbvc	r4, [pc, #-863]!	; 33e5 <_Min_Stack_Size+0x31e5>
    3740:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    3744:	746e4900 	strbtvc	r4, [lr], #-2304	; 0xfffff700
    3748:	61767265 	cmnvs	r6, r5, ror #4
    374c:	6f635f6c 	svcvs	0x00635f6c
    3750:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
    3754:	69740072 	ldmdbvs	r4!, {r1, r4, r5, r6}^
    3758:	6553656d 	ldrbvs	r6, [r3, #-1389]	; 0xfffffa93
    375c:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
    3760:	72614800 	rsbvc	r4, r1, #0, 16
    3764:	75614664 	strbvc	r4, [r1, #-1636]!	; 0xfffff99c
    3768:	485f746c 	ldmdami	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    376c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    3770:	2f007265 	svccs	0x00007265
    3774:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3778:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    377c:	2f767375 	svccs	0x00767375
    3780:	53414454 	movtpl	r4, #5204	; 0x1454
    3784:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    3788:	552f544f 	strpl	r5, [pc, #-1103]!	; 3341 <_Min_Stack_Size+0x3141>
    378c:	2f726573 	svccs	0x00726573
    3790:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3794:	30316632 	eorscc	r6, r1, r2, lsr r6
    3798:	74695f78 	strbtvc	r5, [r9], #-3960	; 0xfffff088
    379c:	4200632e 	andmi	r6, r0, #-1207959552	; 0xb8000000
    37a0:	61467375 	hvcvs	26421	; 0x6735
    37a4:	5f746c75 	svcpl	0x00746c75
    37a8:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    37ac:	0072656c 	rsbseq	r6, r2, ip, ror #10
    37b0:	4d6d654d 	cfstr64mi	mvdx6, [sp, #-308]!	; 0xfffffecc
    37b4:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
    37b8:	61485f65 	cmpvs	r8, r5, ror #30
    37bc:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    37c0:	4d4e0072 	stclmi	0, cr0, [lr, #-456]	; 0xfffffe38
    37c4:	61485f49 	cmpvs	r8, r9, asr #30
    37c8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    37cc:	4d440072 	stclmi	0, cr0, [r4, #-456]	; 0xfffffe38
    37d0:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
    37d4:	6e6e6168 	powvsez	f6, f6, #0.0
    37d8:	5f336c65 	svcpl	0x00336c65
    37dc:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    37e0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    37e4:	76007265 	strvc	r7, [r0], -r5, ror #4
    37e8:	6b736154 	blvs	1cdbd40 <_Min_Stack_Size+0x1cdbb40>
    37ec:	636f4c5f 	cmnvs	pc, #24320	; 0x5f00
    37f0:	006e4f6b 	rsbeq	r4, lr, fp, ror #30
    37f4:	6f636573 	svcvs	0x00636573
    37f8:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    37fc:	6e645f79 	mcrvs	15, 3, r5, cr4, cr9, {3}
    3800:	65735f73 	ldrbvs	r5, [r3, #-3955]!	; 0xfffff08d
    3804:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
    3808:	73617000 	cmnvc	r1, #0
    380c:	726f7773 	rsbvc	r7, pc, #30146560	; 0x1cc0000
    3810:	68640064 	stmdavs	r4!, {r2, r5, r6}^
    3814:	725f7063 	subsvc	r7, pc, #99	; 0x63
    3818:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
    381c:	77654e6c 	strbvc	r4, [r5, -ip, ror #28]!
    3820:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    3824:	00495250 	subeq	r5, r9, r0, asr r2
    3828:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    382c:	6e614865 	cdpvs	8, 6, cr4, cr1, cr5, {3}
    3830:	5f656c64 	svcpl	0x00656c64
    3834:	6c630074 	stclvs	0, cr0, [r3], #-464	; 0xfffffe30
    3838:	5f6e6165 	svcpl	0x006e6165
    383c:	73736573 	cmnvc	r3, #482344960	; 0x1cc00000
    3840:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    3844:	7474716d 	ldrbtvc	r7, [r4], #-365	; 0xfffffe93
    3848:	6f72625f 	svcvs	0x0072625f
    384c:	5f72656b 	svcpl	0x0072656b
    3850:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
    3854:	745f656c 	ldrbvc	r6, [pc], #-1388	; 385c <_Min_Stack_Size+0x365c>
    3858:	7a697700 	bvc	1a61460 <_Min_Stack_Size+0x1a61260>
    385c:	70696863 	rsbvc	r6, r9, r3, ror #16
    3860:	6c65735f 	stclvs	3, cr7, [r5], #-380	; 0xfffffe84
    3864:	00746365 	rsbseq	r6, r4, r5, ror #6
    3868:	6b636f6c 	blvs	18df620 <_Min_Stack_Size+0x18df420>
    386c:	6174735f 	cmnvs	r4, pc, asr r3
    3870:	00737574 	rsbseq	r7, r3, r4, ror r5
    3874:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
    3878:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
    387c:	636f7300 	cmnvs	pc, #0, 6
    3880:	4c74656b 	cfldr64mi	mvdx6, [r4], #-428	; 0xfffffe54
    3884:	006b636f 	rsbeq	r6, fp, pc, ror #6
    3888:	70636864 	rsbvc	r6, r3, r4, ror #16
    388c:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
    3890:	6154746e 	cmpvs	r4, lr, ror #8
    3894:	2f006b73 	svccs	0x00006b73
    3898:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    389c:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    38a0:	2f767375 	svccs	0x00767375
    38a4:	53414454 	movtpl	r4, #5204	; 0x1454
    38a8:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    38ac:	552f544f 	strpl	r5, [pc, #-1103]!	; 3465 <_Min_Stack_Size+0x3265>
    38b0:	2f726573 	svccs	0x00726573
    38b4:	6e69616d 	powvsez	f6, f1, #5.0
    38b8:	5400632e 	strpl	r6, [r0], #-814	; 0xfffffcd2
    38bc:	486b7361 	stmdami	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    38c0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    38c4:	00745f65 	rsbseq	r5, r4, r5, ror #30
    38c8:	63726f66 	cmnvs	r2, #408	; 0x198
    38cc:	6f6c5f65 	svcvs	0x006c5f65
    38d0:	6f006b63 	svcvs	0x00006b63
    38d4:	5464656c 	strbtpl	r6, [r4], #-1388	; 0xfffffa94
    38d8:	006b7361 	rsbeq	r7, fp, r1, ror #6
    38dc:	6e69616d 	powvsez	f6, f1, #5.0
    38e0:	6b736154 	blvs	1cdbe38 <_Min_Stack_Size+0x1cdbc38>
    38e4:	74716d00 	ldrbtvc	r6, [r1], #-3328	; 0xfffff300
    38e8:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
    38ec:	705f646e 	subsvc	r6, pc, lr, ror #8
    38f0:	656b6361 	strbvs	r6, [fp, #-865]!	; 0xfffffc9f
    38f4:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
    38f8:	6b736154 	blvs	1cdbe50 <_Min_Stack_Size+0x1cdbc50>
    38fc:	746f7400 	strbtvc	r7, [pc], #-1024	; 3904 <_Min_Stack_Size+0x3704>
    3900:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
    3904:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    3908:	6f726200 	svcvs	0x00726200
    390c:	0072656b 	rsbseq	r6, r2, fp, ror #10
    3910:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    3914:	63725f73 	cmnvs	r2, #460	; 0x1cc
    3918:	63006476 	movwvs	r6, #1142	; 0x476
    391c:	6e65696c 	vnmulvs.f16	s13, s10, s25	; <UNPREDICTABLE>
    3920:	00646974 	rsbeq	r6, r4, r4, ror r9
    3924:	5f67736d 	svcpl	0x0067736d
    3928:	725f6469 	subsvc	r6, pc, #1761607680	; 0x69000000
    392c:	70007663 	andvc	r7, r0, r3, ror #12
    3930:	72615076 	rsbvc	r5, r1, #118	; 0x76
    3934:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
    3938:	00737265 	rsbseq	r7, r3, r5, ror #4
    393c:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
    3940:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
    3944:	74716d00 	ldrbtvc	r6, [r1], #-3328	; 0xfffff300
    3948:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
    394c:	705f6461 	subsvc	r6, pc, r1, ror #8
    3950:	656b6361 	strbvs	r6, [fp, #-865]!	; 0xfffffc9f
    3954:	41760074 	cmnmi	r6, r4, ror r0
    3958:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
    395c:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    3960:	74536e6f 	ldrbvc	r6, [r3], #-3695	; 0xfffff191
    3964:	4f6b6361 	svcmi	0x006b6361
    3968:	66726576 			; <UNDEFINED> instruction: 0x66726576
    396c:	48776f6c 	ldmdami	r7!, {r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3970:	006b6f6f 	rsbeq	r6, fp, pc, ror #30
    3974:	6c6c6977 			; <UNDEFINED> instruction: 0x6c6c6977
    3978:	736f715f 	cmnvc	pc, #-1073741801	; 0xc0000017
    397c:	6f507600 	svcvs	0x00507600
    3980:	61527472 	cmpvs	r2, r2, ror r4
    3984:	42657369 	rsbmi	r7, r5, #-1543503871	; 0xa4000001
    3988:	50455341 	subpl	r5, r5, r1, asr #6
    398c:	73004952 	movwvc	r4, #2386	; 0x952
    3990:	656b636f 	strbvs	r6, [fp, #-879]!	; 0xfffffc91
    3994:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    3998:	6c006f66 	stcvs	15, cr6, [r0], {102}	; 0x66
    399c:	546b636f 	strbtpl	r6, [fp], #-879	; 0xfffffc91
    39a0:	006b7361 	rsbeq	r7, fp, r1, ror #6
    39a4:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    39a8:	69445f6b 	stmdbvs	r4, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    39ac:	616c7073 	smcvs	50947	; 0xc703
    39b0:	514d0079 	hvcpl	53257	; 0xd009
    39b4:	425f5454 	subsmi	r5, pc, #84, 8	; 0x54000000
    39b8:	454b4f52 	strbmi	r4, [fp, #-3922]	; 0xfffff0ae
    39bc:	50495f52 	subpl	r5, r9, r2, asr pc
    39c0:	72657300 	rsbvc	r7, r5, #0, 6
    39c4:	5f726576 	svcpl	0x00726576
    39c8:	51007069 	tstpl	r0, r9, rrx
    39cc:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    39d0:	69666544 	stmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    39d4:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    39d8:	77006e6f 	strvc	r6, [r0, -pc, ror #28]
    39dc:	68637a69 	stmdavs	r3!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
    39e0:	775f7069 	ldrbvc	r7, [pc, -r9, rrx]
    39e4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    39e8:	61547600 	cmpvs	r4, r0, lsl #12
    39ec:	445f6b73 	ldrbmi	r6, [pc], #-2931	; 39f4 <_Min_Stack_Size+0x37f4>
    39f0:	00504348 	subseq	r4, r0, r8, asr #6
    39f4:	6c6c6977 			; <UNDEFINED> instruction: 0x6c6c6977
    39f8:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
    39fc:	006e6961 	rsbeq	r6, lr, r1, ror #18
    3a00:	54414467 	strbpl	r4, [r1], #-1127	; 0xfffffb99
    3a04:	46554241 	ldrbmi	r4, [r5], -r1, asr #4
    3a08:	49576700 	ldmdbmi	r7, {r8, r9, sl, sp, lr}^
    3a0c:	54454e5a 	strbpl	r4, [r5], #-3674	; 0xfffff1a6
    3a10:	4f464e49 	svcmi	0x00464e49
    3a14:	7a697700 	bvc	1a6161c <_Min_Stack_Size+0x1a6141c>
    3a18:	70696863 	rsbvc	r6, r9, r3, ror #16
    3a1c:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
    3a20:	63656c65 	cmnvs	r5, #25856	; 0x6500
    3a24:	65530074 	ldrbvs	r0, [r3, #-116]	; 0xffffff8c
    3a28:	6870616d 	ldmdavs	r0!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3a2c:	4865726f 	stmdami	r5!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    3a30:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    3a34:	00745f65 	rsbseq	r5, r4, r5, ror #30
    3a38:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    3a3c:	614d5f6b 	cmpvs	sp, fp, ror #30
    3a40:	74006e69 	strvc	r6, [r0], #-3689	; 0xfffff197
    3a44:	61546b73 	cmpvs	r4, r3, ror fp
    3a48:	6f436b73 	svcvs	0x00436b73
    3a4c:	6f72746e 	svcvs	0x0072746e
    3a50:	6f6c426c 	svcvs	0x006c426c
    3a54:	70006b63 	andvc	r6, r0, r3, ror #22
    3a58:	656b6361 	strbvs	r6, [fp, #-865]!	; 0xfffffc9f
    3a5c:	656c5f74 	strbvs	r5, [ip, #-3956]!	; 0xfffff08c
    3a60:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    3a64:	73696400 	cmnvc	r9, #0, 8
    3a68:	61700070 	cmnvs	r0, r0, ror r0
    3a6c:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xfffff49d
    3a70:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
    3a74:	00726566 	rsbseq	r6, r2, r6, ror #10
    3a78:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
    3a7c:	00657a69 	rsbeq	r7, r5, r9, ror #20
    3a80:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
    3a84:	5f706968 	svcpl	0x00706968
    3a88:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    3a8c:	54637000 	strbtpl	r7, [r3], #-0
    3a90:	4e6b7361 	cdpmi	3, 6, cr7, cr11, cr1, {3}
    3a94:	00656d61 	rsbeq	r6, r5, r1, ror #26
    3a98:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    3a9c:	69540073 	ldmdbvs	r4, {r0, r1, r4, r5, r6}^
    3aa0:	79546b63 	ldmdbvc	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    3aa4:	745f6570 	ldrbvc	r6, [pc], #-1392	; 3aac <_Min_Stack_Size+0x38ac>
    3aa8:	5f706900 	svcpl	0x00706900
    3aac:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    3ab0:	64656769 	strbtvs	r6, [r5], #-1897	; 0xfffff897
    3ab4:	636f6c00 	cmnvs	pc, #0, 24
    3ab8:	746f4e6b 	strbtvc	r4, [pc], #-3691	; 3ac0 <_Min_Stack_Size+0x38c0>
    3abc:	00796669 	rsbseq	r6, r9, r9, ror #12
    3ac0:	6f666e69 	svcvs	0x00666e69
    3ac4:	0067734d 	rsbeq	r7, r7, sp, asr #6
    3ac8:	6e69616d 	powvsez	f6, f1, #5.0
    3acc:	61425500 	cmpvs	r2, r0, lsl #10
    3ad0:	79546573 	ldmdbvc	r4, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    3ad4:	745f6570 	ldrbvc	r6, [pc], #-1392	; 3adc <_Min_Stack_Size+0x38dc>
    3ad8:	534e4400 	movtpl	r4, #58368	; 0xe400
    3adc:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
    3ae0:	7400746e 	strvc	r7, [r0], #-1134	; 0xfffffb92
    3ae4:	7473706d 	ldrbtvc	r7, [r3], #-109	; 0xffffff93
    3ae8:	69660072 	stmdbvs	r6!, {r1, r4, r5, r6}^
    3aec:	48646578 	stmdami	r4!, {r3, r4, r5, r6, r8, sl, sp, lr}^
    3af0:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
    3af4:	7a695372 	bvc	1a588c4 <_Min_Stack_Size+0x1a586c4>
    3af8:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
    3afc:	6e69616d 	powvsez	f6, f1, #5.0
    3b00:	006e654c 	rsbeq	r6, lr, ip, asr #10
    3b04:	65786966 	ldrbvs	r6, [r8, #-2406]!	; 0xfffff69a
    3b08:	65685f64 	strbvs	r5, [r8, #-3940]!	; 0xfffff09c
    3b0c:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
    3b10:	74716d00 	ldrbtvc	r6, [r1], #-3328	; 0xfffff300
    3b14:	61705f74 	cmnvs	r0, r4, ror pc
    3b18:	5f657372 	svcpl	0x00657372
    3b1c:	6c627570 	cfstr64vs	mvdx7, [r2], #-448	; 0xfffffe40
    3b20:	5f687369 	svcpl	0x00687369
    3b24:	0067736d 	rsbeq	r7, r7, sp, ror #6
    3b28:	7474716d 	ldrbtvc	r7, [r4], #-365	; 0xfffffe93
    3b2c:	7261705f 	rsbvc	r7, r1, #95	; 0x5f
    3b30:	705f6573 	subsvc	r6, pc, r3, ror r5	; <UNPREDICTABLE>
    3b34:	745f6275 	ldrbvc	r6, [pc], #-629	; 3b3c <_Min_Stack_Size+0x393c>
    3b38:	6369706f 	cmnvs	r9, #111	; 0x6f
    3b3c:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
    3b40:	67696400 	strbvs	r6, [r9, -r0, lsl #8]!
    3b44:	63007469 	movwvs	r7, #1129	; 0x469
    3b48:	6e65696c 	vnmulvs.f16	s13, s10, s25	; <UNPREDICTABLE>
    3b4c:	6c646974 			; <UNDEFINED> instruction: 0x6c646974
    3b50:	6d006e65 	stcvs	14, cr6, [r0, #-404]	; 0xfffffe6c
    3b54:	5f747471 	svcpl	0x00747471
    3b58:	73726170 	cmnvc	r2, #112, 2
    3b5c:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
    3b60:	656c5f6d 	strbvs	r5, [ip, #-3949]!	; 0xfffff093
    3b64:	736d006e 	cmnvc	sp, #110	; 0x6e
    3b68:	656c5f67 	strbvs	r5, [ip, #-3943]!	; 0xfffff099
    3b6c:	7475006e 	ldrbtvc	r0, [r5], #-110	; 0xffffff92
    3b70:	6f745f66 	svcvs	0x00745f66
    3b74:	00636970 	rsbeq	r6, r3, r0, ror r9
    3b78:	5f736f71 	svcpl	0x00736f71
    3b7c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    3b80:	706f7400 	rsbvc	r7, pc, r0, lsl #8
    3b84:	6c5f6369 	mrrcvs	3, 6, r6, pc, cr9	; <UNPREDICTABLE>
    3b88:	6d006e65 	stcvs	14, cr6, [r0, #-404]	; 0xfffffe6c
    3b8c:	61737365 	cmnvs	r3, r5, ror #6
    3b90:	695f6567 	ldmdbvs	pc, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    3b94:	716d0064 	cmnvc	sp, r4, rrx
    3b98:	705f7474 	subsvc	r7, pc, r4, ror r4	; <UNPREDICTABLE>
    3b9c:	00676e69 	rsbeq	r6, r7, r9, ror #28
    3ba0:	5f726176 	svcpl	0x00726176
    3ba4:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
    3ba8:	6d007265 	sfmvs	f7, 4, [r0, #-404]	; 0xfffffe6c
    3bac:	5f747471 	svcpl	0x00747471
    3bb0:	73726170 	cmnvc	r2, #112, 2
    3bb4:	75705f65 	ldrbvc	r5, [r0, #-3941]!	; 0xfffff09b
    3bb8:	736d5f62 	cmnvc	sp, #392	; 0x188
    3bbc:	74705f67 	ldrbtvc	r5, [r0], #-3943	; 0xfffff099
    3bc0:	756d0072 	strbvc	r0, [sp, #-114]!	; 0xffffff8e
    3bc4:	7069746c 	rsbvc	r7, r9, ip, ror #8
    3bc8:	7265696c 	rsbvc	r6, r5, #108, 18	; 0x1b0000
    3bcc:	74716d00 	ldrbtvc	r6, [r1], #-3328	; 0xfffff300
    3bd0:	6f635f74 	svcvs	0x00635f74
    3bd4:	63656e6e 	cmnvs	r5, #1760	; 0x6e0
    3bd8:	736d0074 	cmnvc	sp, #116	; 0x74
    3bdc:	6e656c67 	cdpvs	12, 6, cr6, cr5, cr7, {3}
    3be0:	74716d00 	ldrbtvc	r6, [r1], #-3328	; 0xfffff300
    3be4:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    3be8:	615f7469 	cmpvs	pc, r9, ror #8
    3bec:	00687475 	rsbeq	r7, r8, r5, ror r4
    3bf0:	7474716d 	ldrbtvc	r7, [r4], #-365	; 0xfffffe93
    3bf4:	736e755f 	cmnvc	lr, #398458880	; 0x17c00000
    3bf8:	63736275 	cmnvs	r3, #1342177287	; 0x50000007
    3bfc:	65626972 	strbvs	r6, [r2, #-2418]!	; 0xfffff68e
    3c00:	74716d00 	ldrbtvc	r6, [r1], #-3328	; 0xfffff300
    3c04:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    3c08:	70007469 	andvc	r7, r0, r9, ror #8
    3c0c:	77737361 	ldrbvc	r7, [r3, -r1, ror #6]!
    3c10:	6c64726f 	sfmvs	f7, 2, [r4], #-444	; 0xfffffe44
    3c14:	6d006e65 	stcvs	14, cr6, [r0, #-404]	; 0xfffffe6c
    3c18:	5f747471 	svcpl	0x00747471
    3c1c:	73627573 	cmnvc	r2, #482344960	; 0x1cc00000
    3c20:	62697263 	rsbvs	r7, r9, #805306374	; 0x30000006
    3c24:	716d0065 	cmnvc	sp, r5, rrx
    3c28:	705f7474 	subsvc	r7, pc, r4, ror r4	; <UNPREDICTABLE>
    3c2c:	65737261 	ldrbvs	r7, [r3, #-609]!	; 0xfffffd9f
    3c30:	6275705f 	rsbsvs	r7, r5, #95	; 0x5f
    3c34:	706f745f 	rsbvc	r7, pc, pc, asr r4	; <UNPREDICTABLE>
    3c38:	6d006369 	stcvs	3, cr6, [r0, #-420]	; 0xfffffe5c
    3c3c:	5f747471 	svcpl	0x00747471
    3c40:	63736964 	cmnvs	r3, #100, 18	; 0x190000
    3c44:	656e6e6f 	strbvs	r6, [lr, #-3695]!	; 0xfffff191
    3c48:	75007463 	strvc	r7, [r0, #-1123]	; 0xfffffb9d
    3c4c:	6e726573 	mrcvs	5, 3, r6, cr2, cr3, {3}
    3c50:	6c656d61 	stclvs	13, cr6, [r5], #-388	; 0xfffffe7c
    3c54:	70006e65 	andvc	r6, r0, r5, ror #28
    3c58:	6f6c7961 	svcvs	0x006c7961
    3c5c:	6c5f6461 	cfldrdvs	mvd6, [pc], {97}	; 0x61
    3c60:	74006e65 	strvc	r6, [r0], #-3685	; 0xfffff19b
    3c64:	6369706f 	cmnvs	r9, #111	; 0x6f
    3c68:	006e656c 	rsbeq	r6, lr, ip, ror #10
    3c6c:	5f6d756e 	svcpl	0x006d756e
    3c70:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    3c74:	716d0073 	smcvc	53251	; 0xd003
    3c78:	705f7474 	subsvc	r7, pc, r4, ror r4	; <UNPREDICTABLE>
    3c7c:	65726275 	ldrbvs	r6, [r2, #-629]!	; 0xfffffd8b
    3c80:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
    3c84:	2f656d6f 	svccs	0x00656d6f
    3c88:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    3c8c:	542f7673 	strtpl	r7, [pc], #-1651	; 3c94 <_Min_Stack_Size+0x3a94>
    3c90:	41534144 	cmpmi	r3, r4, asr #2
    3c94:	4f492d54 	svcmi	0x00492d54
    3c98:	696c2f54 	stmdbvs	ip!, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3c9c:	716d6562 	cmnvc	sp, r2, ror #10
    3ca0:	732f7474 			; <UNDEFINED> instruction: 0x732f7474
    3ca4:	6c2f6372 	stcvs	3, cr6, [pc], #-456	; 3ae4 <_Min_Stack_Size+0x38e4>
    3ca8:	6d656269 	sfmvs	f6, 2, [r5, #-420]!	; 0xfffffe5c
    3cac:	2e747471 	mrccs	4, 3, r7, cr4, cr1, {3}
    3cb0:	6f710063 	svcvs	0x00710063
    3cb4:	6c665f73 	stclvs	15, cr5, [r6], #-460	; 0xfffffe34
    3cb8:	6d006761 	stcvs	7, cr6, [r0, #-388]	; 0xfffffe7c
    3cbc:	5f747471 	svcpl	0x00747471
    3cc0:	5f6d756e 	svcpl	0x006d756e
    3cc4:	5f6d6572 	svcpl	0x006d6572
    3cc8:	5f6e656c 	svcpl	0x006e656c
    3ccc:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    3cd0:	716d0073 	smcvc	53251	; 0xd003
    3cd4:	735f7474 	cmpvc	pc, #116, 8	; 0x74000000
    3cd8:	615f7465 	cmpvs	pc, r5, ror #8
    3cdc:	6576696c 	ldrbvs	r6, [r6, #-2412]!	; 0xfffff694
    3ce0:	74716d00 	ldrbtvc	r6, [r1], #-3328	; 0xfffff300
    3ce4:	75705f74 	ldrbvc	r5, [r0, #-3956]!	; 0xfffff08c
    3ce8:	73696c62 	cmnvc	r9, #25088	; 0x6200
    3cec:	716d0068 	cmnvc	sp, r8, rrx
    3cf0:	705f7474 	subsvc	r7, pc, r4, ror r4	; <UNPREDICTABLE>
    3cf4:	65737261 	ldrbvs	r7, [r3, #-609]!	; 0xfffffd9f
    3cf8:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    3cfc:	0064695f 	rsbeq	r6, r4, pc, asr r9
    3d00:	7474716d 	ldrbtvc	r7, [r4], #-365	; 0xfffffe93
    3d04:	6275705f 	rsbsvs	r7, r5, #95	; 0x5f
    3d08:	6873696c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    3d0c:	7469775f 	strbtvc	r7, [r9], #-1887	; 0xfffff8a1
    3d10:	6f715f68 	svcvs	0x00715f68
    3d14:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    3d18:	2f656d6f 	svccs	0x00656d6f
    3d1c:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    3d20:	542f7673 	strtpl	r7, [pc], #-1651	; 3d28 <_Min_Stack_Size+0x3b28>
    3d24:	41534144 	cmpmi	r3, r4, asr #2
    3d28:	4f492d54 	svcmi	0x00492d54
    3d2c:	534f2f54 	movtpl	r2, #65364	; 0xff54
    3d30:	73696c2f 	cmnvc	r9, #12032	; 0x2f00
    3d34:	00632e74 	rsbeq	r2, r3, r4, ror lr
    3d38:	6f437670 	svcvs	0x00437670
    3d3c:	6961746e 	stmdbvs	r1!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    3d40:	0072656e 	rsbseq	r6, r2, lr, ror #10
    3d44:	696e694d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, fp, sp, lr}^
    3d48:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    3d4c:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
    3d50:	7800745f 	stmdavc	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
    3d54:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
    3d58:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3d5c:	4c780065 	ldclmi	0, cr0, [r8], #-404	; 0xfffffe6c
    3d60:	45747369 	ldrbmi	r7, [r4, #-873]!	; 0xfffffc97
    3d64:	7000646e 	andvc	r6, r0, lr, ror #8
    3d68:	6e774f76 	mrcvs	15, 3, r4, cr7, cr6, {3}
    3d6c:	78007265 	stmdavc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    3d70:	5453494c 	ldrbpl	r4, [r3], #-2380	; 0xfffff6b4
    3d74:	4554495f 	ldrbmi	r4, [r4, #-2399]	; 0xfffff6a1
    3d78:	7870004d 	ldmdavc	r0!, {r0, r2, r3, r6}^
    3d7c:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
    3d80:	65526f54 	ldrbvs	r6, [r2, #-3924]	; 0xfffff0ac
    3d84:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
    3d88:	694c7600 	stmdbvs	ip, {r9, sl, ip, sp, lr}^
    3d8c:	6e497473 	mcrvs	4, 2, r7, cr9, cr3, {3}
    3d90:	61697469 	cmnvs	r9, r9, ror #8
    3d94:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0xfffff694
    3d98:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
    3d9c:	73694c00 	cmnvc	r9, #0, 24
    3da0:	00745f74 	rsbseq	r5, r4, r4, ror pc
    3da4:	754e7875 	strbvc	r7, [lr, #-2165]	; 0xfffff78b
    3da8:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    3dac:	7449664f 	strbvc	r6, [r9], #-1615	; 0xfffff9b1
    3db0:	00736d65 	rsbseq	r6, r3, r5, ror #26
    3db4:	73694c76 	cmnvc	r9, #30208	; 0x7600
    3db8:	736e4974 	cmnvc	lr, #116, 18	; 0x1d0000
    3dbc:	45747265 	ldrbmi	r7, [r4, #-613]!	; 0xfffffd9b
    3dc0:	7000646e 	andvc	r6, r0, lr, ror #8
    3dc4:	78654e78 	stmdavc	r5!, {r3, r4, r5, r6, r9, sl, fp, lr}^
    3dc8:	4c760074 	ldclmi	0, cr0, [r6], #-464	; 0xfffffe30
    3dcc:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
    3dd0:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    3dd4:	73696c61 	cmnvc	r9, #24832	; 0x6100
    3dd8:	56780065 	ldrbtpl	r0, [r8], -r5, rrx
    3ddc:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3de0:	6e49664f 	cdpvs	6, 4, cr6, cr9, cr15, {2}
    3de4:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0xfffffa8d
    3de8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    3dec:	74497870 	strbvc	r7, [r9], #-2160	; 0xfffff790
    3df0:	70006d65 	andvc	r6, r0, r5, ror #26
    3df4:	65744978 	ldrbvs	r4, [r4, #-2424]!	; 0xfffff688
    3df8:	6f746172 	svcvs	0x00746172
    3dfc:	78700072 	ldmdavc	r0!, {r1, r4, r5, r6}^
    3e00:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    3e04:	78700078 	ldmdavc	r0!, {r3, r4, r5, r6}^
    3e08:	76657250 			; <UNDEFINED> instruction: 0x76657250
    3e0c:	73756f69 	cmnvc	r5, #420	; 0x1a4
    3e10:	494d7800 	stmdbmi	sp, {fp, ip, sp, lr}^
    3e14:	4c5f494e 	mrrcmi	9, 4, r4, pc, cr14	; <UNPREDICTABLE>
    3e18:	5f545349 	svcpl	0x00545349
    3e1c:	4d455449 	cfstrdmi	mvd5, [r5, #-292]	; 0xfffffedc
    3e20:	4c787000 	ldclmi	0, cr7, [r8], #-0
    3e24:	00747369 	rsbseq	r7, r4, r9, ror #6
    3e28:	53494c78 	movtpl	r4, #40056	; 0x9c78
    3e2c:	78750054 	ldmdavc	r5!, {r2, r4, r6}^
    3e30:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    3e34:	6f6d6552 	svcvs	0x006d6552
    3e38:	70006576 	andvc	r6, r0, r6, ror r5
    3e3c:	77654e78 			; <UNDEFINED> instruction: 0x77654e78
    3e40:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    3e44:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
    3e48:	694c7600 	stmdbvs	ip, {r9, sl, ip, sp, lr}^
    3e4c:	6e497473 	mcrvs	4, 2, r7, cr9, cr3, {3}
    3e50:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0xfffffa8d
    3e54:	53787500 	cmnpl	r8, #0, 10
    3e58:	70616d65 	rsbvc	r6, r1, r5, ror #26
    3e5c:	65726f68 	ldrbvs	r6, [r2, #-3944]!	; 0xfffff098
    3e60:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    3e64:	51780074 	cmnpl	r8, r4, ror r0
    3e68:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    3e6c:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
    3e70:	52636972 	rsbpl	r6, r3, #1867776	; 0x1c8000
    3e74:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    3e78:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0xfffff800
    3e7c:	52657565 	rsbpl	r7, r5, #423624704	; 0x19400000
    3e80:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    3e84:	78006576 	stmdavc	r0, {r1, r2, r4, r5, r6, r8, sl, sp, lr}
    3e88:	454d4954 	strbmi	r4, [sp, #-2388]	; 0xfffff6ac
    3e8c:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
    3e90:	6d695400 	cfstrdvs	mvd5, [r9, #-0]
    3e94:	74754f65 	ldrbtvc	r4, [r5], #-3941	; 0xfffff09b
    3e98:	7000745f 	andvc	r7, r0, pc, asr r4
    3e9c:	6f437672 	svcvs	0x00437672
    3ea0:	61447970 	hvcvs	18320	; 0x4790
    3ea4:	6f546174 	svcvs	0x00546174
    3ea8:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    3eac:	50780065 	rsbspl	r0, r8, r5, rrx
    3eb0:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    3eb4:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    3eb8:	69487875 	stmdbvs	r8, {r0, r2, r4, r5, r6, fp, ip, sp, lr}^
    3ebc:	73656867 	cmnvc	r5, #6750208	; 0x670000
    3ec0:	69615774 	stmdbvs	r1!, {r2, r4, r5, r6, r8, r9, sl, ip, lr}^
    3ec4:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    3ec8:	6f697250 	svcvs	0x00697250
    3ecc:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3ed0:	65537800 	ldrbvs	r7, [r3, #-2048]	; 0xfffff800
    3ed4:	6870616d 	ldmdavs	r0!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3ed8:	0065726f 	rsbeq	r7, r5, pc, ror #4
    3edc:	75517875 	ldrbvc	r7, [r1, #-2165]	; 0xfffff78b
    3ee0:	4d657565 	cfstr64mi	mvdx7, [r5, #-404]!	; 0xfffffe6c
    3ee4:	61737365 	cmnvs	r3, r5, ror #6
    3ee8:	57736567 	ldrbpl	r6, [r3, -r7, ror #10]!
    3eec:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
    3ef0:	7800676e 	stmdavc	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    3ef4:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    3ef8:	65655065 	strbvs	r5, [r5, #-101]!	; 0xffffff9b
    3efc:	6f72466b 	svcvs	0x0072466b
    3f00:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
    3f04:	51787500 	cmnpl	r8, r0, lsl #10
    3f08:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    3f0c:	63617053 	cmnvs	r1, #83	; 0x53
    3f10:	76417365 	strbvc	r7, [r1], -r5, ror #6
    3f14:	616c6961 	cmnvs	ip, r1, ror #18
    3f18:	00656c62 	rsbeq	r6, r5, r2, ror #24
    3f1c:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
    3f20:	65526575 	ldrbvs	r6, [r2, #-1397]	; 0xfffffa8b
    3f24:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    3f28:	6f724665 	svcvs	0x00724665
    3f2c:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
    3f30:	6d655300 	stclvs	3, cr5, [r5, #-0]
    3f34:	6f687061 	svcvs	0x00687061
    3f38:	61446572 	hvcvs	18002	; 0x4652
    3f3c:	745f6174 	ldrbvc	r6, [pc], #-372	; 3f44 <_Min_Stack_Size+0x3d44>
    3f40:	4f637000 	svcmi	0x00637000
    3f44:	69676972 	stmdbvs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3f48:	526c616e 	rsbpl	r6, ip, #-2147483621	; 0x8000001b
    3f4c:	50646165 	rsbpl	r6, r4, r5, ror #2
    3f50:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    3f54:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    3f58:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
    3f5c:	65755173 	ldrbvs	r5, [r5, #-371]!	; 0xfffffe8d
    3f60:	75466575 	strbvc	r6, [r6, #-1397]	; 0xfffffa8b
    3f64:	70006c6c 	andvc	r6, r0, ip, ror #24
    3f68:	69615463 	stmdbvs	r1!, {r0, r1, r5, r6, sl, ip, lr}^
    3f6c:	5978006c 	ldmdbpl	r8!, {r2, r3, r5, r6}^
    3f70:	646c6569 	strbtvs	r6, [ip], #-1385	; 0xfffffa97
    3f74:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
    3f78:	64657269 	strbtvs	r7, [r5], #-617	; 0xfffffd97
    3f7c:	6f507600 	svcvs	0x00507600
    3f80:	65537472 	ldrbvs	r7, [r3, #-1138]	; 0xfffffb8e
    3f84:	53414274 	movtpl	r4, #4724	; 0x1274
    3f88:	49525045 	ldmdbmi	r2, {r0, r2, r6, ip, lr}^
    3f8c:	48787500 	ldmdami	r8!, {r8, sl, ip, sp, lr}^
    3f90:	65686769 	strbvs	r6, [r8, #-1897]!	; 0xfffff897
    3f94:	72507473 	subsvc	r7, r0, #1929379840	; 0x73000000
    3f98:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3f9c:	664f7974 			; <UNDEFINED> instruction: 0x664f7974
    3fa0:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
    3fa4:	54676e69 	strbtpl	r6, [r7], #-3689	; 0xfffff197
    3fa8:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
    3fac:	42767000 	rsbsmi	r7, r6, #0
    3fb0:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    3fb4:	63700072 	cmnvs	r0, #114	; 0x72
    3fb8:	64616548 	strbtvs	r6, [r1], #-1352	; 0xfffffab8
    3fbc:	63757000 	cmnvs	r5, #0
    3fc0:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    3fc4:	6f745365 	svcvs	0x00745365
    3fc8:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    3fcc:	4d787500 	cfldr64mi	mvdx7, [r8, #-0]
    3fd0:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    3fd4:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    3fd8:	78006874 	stmdavc	r0, {r2, r4, r5, r6, fp, sp, lr}
    3fdc:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    3fe0:	65724365 	ldrbvs	r4, [r2, #-869]!	; 0xfffffc9b
    3fe4:	4d657461 	cfstrdmi	mvd7, [r5, #-388]!	; 0xfffffe7c
    3fe8:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    3fec:	4c787500 	cfldr64mi	mvdx7, [r8], #-0
    3ff0:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    3ff4:	72700068 	rsbsvc	r0, r0, #104	; 0x68
    3ff8:	74654776 	strbtvc	r4, [r5], #-1910	; 0xfffff88a
    3ffc:	69736944 	ldmdbvs	r3!, {r2, r6, r8, fp, sp, lr}^
    4000:	7265686e 	rsbvc	r6, r5, #7208960	; 0x6e0000
    4004:	72507469 	subsvc	r7, r0, #1761607680	; 0x69000000
    4008:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    400c:	66417974 			; <UNDEFINED> instruction: 0x66417974
    4010:	54726574 	ldrbtpl	r6, [r2], #-1396	; 0xfffffa8c
    4014:	6f656d69 	svcvs	0x00656d69
    4018:	78007475 	stmdavc	r0, {r0, r2, r4, r5, r6, sl, ip, sp, lr}
    401c:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    4020:	51734965 	cmnpl	r3, r5, ror #18
    4024:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    4028:	74706d45 	ldrbtvc	r6, [r0], #-3397	; 0xfffff2bb
    402c:	6f724679 	svcvs	0x00724679
    4030:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
    4034:	51637500 	cmnpl	r3, r0, lsl #10
    4038:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    403c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    4040:	51787500 	cmnpl	r8, r0, lsl #10
    4044:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    4048:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
    404c:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    4050:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
    4054:	46676e69 	strbtmi	r6, [r7], -r9, ror #28
    4058:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    405c:	78005253 	stmdavc	r0, {r0, r1, r4, r6, r9, ip, lr}
    4060:	55455551 	strbpl	r5, [r5, #-1361]	; 0xfffffaaf
    4064:	78750045 	ldmdavc	r5!, {r0, r2, r6}^
    4068:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
    406c:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    4070:	78546300 	ldmdavc	r4, {r8, r9, sp, lr}^
    4074:	6b636f4c 	blvs	18dfdac <_Min_Stack_Size+0x18dfbac>
    4078:	76727000 	ldrbtvc	r7, [r2], -r0
    407c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    4080:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    4084:	654e6573 	strbvs	r6, [lr, #-1395]	; 0xfffffa8d
    4088:	65755177 	ldrbvs	r5, [r5, #-375]!	; 0xfffffe89
    408c:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    4090:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    4094:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
    4098:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
    409c:	61657243 	cmnvs	r5, r3, asr #4
    40a0:	70006574 	andvc	r6, r0, r4, ror r5
    40a4:	77654e78 			; <UNDEFINED> instruction: 0x77654e78
    40a8:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    40ac:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
    40b0:	75636552 	strbvc	r6, [r3, #-1362]!	; 0xfffffaae
    40b4:	76697372 			; <UNDEFINED> instruction: 0x76697372
    40b8:	6c614365 	stclvs	3, cr4, [r1], #-404	; 0xfffffe6c
    40bc:	756f436c 	strbvc	r4, [pc, #-876]!	; 3d58 <_Min_Stack_Size+0x3b58>
    40c0:	7800746e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    40c4:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    40c8:	6e456e4f 	cdpvs	14, 4, cr6, cr5, cr15, {2}
    40cc:	69726574 	ldmdbvs	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    40d0:	7800676e 	stmdavc	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    40d4:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
    40d8:	776f6c66 	strbvc	r6, [pc, -r6, ror #24]!
    40dc:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    40e0:	6c750074 	ldclvs	0, cr0, [r5], #-464	; 0xfffffe30
    40e4:	6769724f 	strbvs	r7, [r9, -pc, asr #4]!
    40e8:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
    40ec:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    40f0:	00495250 	subeq	r5, r9, r0, asr r2
    40f4:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    40f8:	00745f65 	rsbseq	r5, r4, r5, ror #30
    40fc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4048 <_Min_Stack_Size+0x3e48>
    4100:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    4104:	76737572 			; <UNDEFINED> instruction: 0x76737572
    4108:	4144542f 	cmpmi	r4, pc, lsr #8
    410c:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    4110:	2f544f49 	svccs	0x00544f49
    4114:	712f534f 			; <UNDEFINED> instruction: 0x712f534f
    4118:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    411c:	5300632e 	movwpl	r6, #814	; 0x32e
    4120:	70616d65 	rsbvc	r6, r1, r5, ror #26
    4124:	65726f68 	ldrbvs	r6, [r2, #-3944]!	; 0xfffff098
    4128:	61746144 	cmnvs	r4, r4, asr #2
    412c:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0xfffff800
    4130:	53657565 	cmnpl	r5, #423624704	; 0x19400000
    4134:	70616d65 	rsbvc	r6, r1, r5, ror #26
    4138:	65726f68 	ldrbvs	r6, [r2, #-3944]!	; 0xfffff098
    413c:	656b6154 	strbvs	r6, [fp, #-340]!	; 0xfffffeac
    4140:	49767000 	ldmdbmi	r6!, {ip, sp, lr}^
    4144:	546d6574 	strbtpl	r6, [sp], #-1396	; 0xfffffa8c
    4148:	6575516f 	ldrbvs	r5, [r5, #-367]!	; 0xfffffe91
    414c:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    4150:	6b736154 	blvs	1cdc6a8 <_Min_Stack_Size+0x1cdc4a8>
    4154:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
    4158:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    415c:	65526f54 	ldrbvs	r6, [r2, #-3924]	; 0xfffff0ac
    4160:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    4164:	51780065 	cmnpl	r8, r5, rrx
    4168:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    416c:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    4170:	79426e49 	stmdbvc	r2, {r0, r3, r6, r9, sl, fp, sp, lr}^
    4174:	00736574 	rsbseq	r6, r3, r4, ror r5
    4178:	55767270 	ldrbpl	r7, [r6, #-624]!	; 0xfffffd90
    417c:	636f6c6e 	cmnvs	pc, #28160	; 0x6e00
    4180:	6575516b 	ldrbvs	r5, [r5, #-363]!	; 0xfffffe95
    4184:	75006575 	strvc	r6, [r0, #-1397]	; 0xfffffa8b
    4188:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
    418c:	654c6575 	strbvs	r6, [ip, #-1397]	; 0xfffffa8b
    4190:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    4194:	51787000 	cmnpl	r8, r0
    4198:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    419c:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0xfffff800
    41a0:	47657565 	strbmi	r7, [r5, -r5, ror #10]!
    41a4:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    41a8:	65536369 	ldrbvs	r6, [r3, #-873]	; 0xfffffc97
    41ac:	7246646e 	subvc	r6, r6, #1845493760	; 0x6e000000
    41b0:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
    41b4:	63700052 	cmnvs	r0, #82	; 0x52
    41b8:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    41bc:	006f5465 	rsbeq	r5, pc, r5, ror #8
    41c0:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
    41c4:	69476575 	stmdbvs	r7, {r0, r2, r4, r5, r6, r8, sl, sp, lr}^
    41c8:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
    41cc:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
    41d0:	51780052 	cmnpl	r8, r2, asr r0
    41d4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    41d8:	75517349 	ldrbvc	r7, [r1, #-841]	; 0xfffffcb7
    41dc:	46657565 	strbtmi	r7, [r5], -r5, ror #10
    41e0:	466c6c75 			; <UNDEFINED> instruction: 0x466c6c75
    41e4:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    41e8:	70005253 	andvc	r5, r0, r3, asr r2
    41ec:	61655263 	cmnvs	r5, r3, ror #4
    41f0:	6f724664 	svcvs	0x00724664
    41f4:	7875006d 	ldmdavc	r5!, {r0, r2, r3, r5, r6}^
    41f8:	6574754d 	ldrbvs	r7, [r4, #-1357]!	; 0xfffffab3
    41fc:	7a695378 	bvc	1a58fe4 <_Min_Stack_Size+0x1a58de4>
    4200:	72700065 	rsbsvc	r0, r0, #101	; 0x65
    4204:	706f4376 	rsbvc	r4, pc, r6, ror r3	; <UNPREDICTABLE>
    4208:	74614479 	strbtvc	r4, [r1], #-1145	; 0xfffffb87
    420c:	6f724661 	svcvs	0x00724661
    4210:	6575516d 	ldrbvs	r5, [r5, #-365]!	; 0xfffffe93
    4214:	75006575 	strvc	r6, [r0, #-1397]	; 0xfffffa8b
    4218:	77654e6c 	strbvc	r4, [r5, -ip, ror #28]!
    421c:	6b73614d 	blvs	1cdc758 <_Min_Stack_Size+0x1cdc558>
    4220:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    4224:	72700065 	rsbsvc	r0, r0, #101	; 0x65
    4228:	696e4976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, lr}^
    422c:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
    4230:	4d657369 	stclmi	3, cr7, [r5, #-420]!	; 0xfffffe5c
    4234:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    4238:	6e457800 	cdpvs	8, 4, cr7, cr5, cr0, {0}
    423c:	54797274 	ldrbtpl	r7, [r9], #-628	; 0xfffffd8c
    4240:	53656d69 	cmnpl	r5, #6720	; 0x1a40
    4244:	76007465 	strvc	r7, [r0], -r5, ror #8
    4248:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    424c:	6c654465 	cfstrdvs	mvd4, [r5], #-404	; 0xfffffe6c
    4250:	00657465 	rsbeq	r7, r5, r5, ror #8
    4254:	65527875 	ldrbvs	r7, [r2, #-2165]	; 0xfffff78b
    4258:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
    425c:	6e497800 	cdpvs	8, 4, cr7, cr9, cr0, {0}
    4260:	69726568 	ldmdbvs	r2!, {r3, r5, r6, r8, sl, sp, lr}^
    4264:	636e6174 	cmnvs	lr, #116, 2
    4268:	63634f65 	cmnvs	r3, #404	; 0x194
    426c:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    4270:	43780064 	cmnmi	r8, #100	; 0x64
    4274:	5079706f 	rsbspl	r7, r9, pc, rrx
    4278:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    427c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    4280:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
    4284:	65755173 	ldrbvs	r5, [r5, #-371]!	; 0xfffffe8d
    4288:	6d456575 	cfstr64vs	mvdx6, [r5, #-468]	; 0xfffffe2c
    428c:	00797470 	rsbseq	r7, r9, r0, ror r4
    4290:	654d7875 	strbvs	r7, [sp, #-2165]	; 0xfffff78b
    4294:	67617373 			; <UNDEFINED> instruction: 0x67617373
    4298:	61577365 	cmpvs	r7, r5, ror #6
    429c:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
    42a0:	78750067 	ldmdavc	r5!, {r0, r1, r2, r5, r6}^
    42a4:	65766153 	ldrbvs	r6, [r6, #-339]!	; 0xfffffead
    42a8:	746e4964 	strbtvc	r4, [lr], #-2404	; 0xfffff69c
    42ac:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
    42b0:	74537470 	ldrbvc	r7, [r3], #-1136	; 0xfffffb90
    42b4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    42b8:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0xfffff800
    42bc:	47657565 	strbmi	r7, [r5, -r5, ror #10]!
    42c0:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    42c4:	65536369 	ldrbvs	r6, [r3, #-873]	; 0xfffffc97
    42c8:	5100646e 	tstpl	r0, lr, ror #8
    42cc:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    42d0:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
    42d4:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
    42d8:	5100745f 	tstpl	r0, pc, asr r4
    42dc:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    42e0:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
    42e4:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
    42e8:	48787000 	ldmdami	r8!, {ip, sp, lr}^
    42ec:	65686769 	strbvs	r6, [r8, #-1897]!	; 0xfffff897
    42f0:	69725072 	ldmdbvs	r2!, {r1, r4, r5, r6, ip, lr}^
    42f4:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    42f8:	73615479 	cmnvc	r1, #2030043136	; 0x79000000
    42fc:	6b6f576b 	blvs	1bda0b0 <_Min_Stack_Size+0x1bd9eb0>
    4300:	78006e65 	stmdavc	r0, {r0, r2, r5, r6, r9, sl, fp, sp, lr}
    4304:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    4308:	65655065 	strbvs	r5, [r5, #-101]!	; 0xffffff9b
    430c:	5478006b 	ldrbtpl	r0, [r8], #-107	; 0xffffff95
    4310:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
    4314:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
    4318:	54676e69 	strbtpl	r6, [r7], #-3689	; 0xfffff197
    431c:	6e65536f 	cdpvs	3, 6, cr5, cr5, cr15, {3}
    4320:	6c750064 	ldclvs	0, cr0, [r5], #-400	; 0xfffffe70
    4324:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    4328:	73696152 	cmnvc	r9, #-2147483628	; 0x80000014
    432c:	53414265 	movtpl	r4, #4709	; 0x1265
    4330:	49525045 	ldmdbmi	r2, {r0, r2, r6, ip, lr}^
    4334:	78526300 	ldmdavc	r2, {r8, r9, sp, lr}^
    4338:	6b636f4c 	blvs	18e0070 <_Min_Stack_Size+0x18dfe70>
    433c:	50787500 	rsbspl	r7, r8, r0, lsl #10
    4340:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    4344:	00797469 	rsbseq	r7, r9, r9, ror #8
    4348:	6f437870 	svcvs	0x00437870
    434c:	4c74736e 	ldclmi	3, cr7, [r4], #-440	; 0xfffffe48
    4350:	00747369 	rsbseq	r7, r4, r9, ror #6
    4354:	65507875 	ldrbvs	r7, [r0, #-2165]	; 0xfffff78b
    4358:	6465646e 	strbtvs	r6, [r5], #-1134	; 0xfffffb92
    435c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    4360:	75007374 	strvc	r7, [r0, #-884]	; 0xfffffc8c
    4364:	7469426c 	strbtvc	r4, [r9], #-620	; 0xfffffd94
    4368:	436f5473 	cmnmi	pc, #1929379840	; 0x73000000
    436c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    4370:	78456e4f 	stmdavc	r5, {r0, r1, r2, r3, r6, r9, sl, fp, sp, lr}^
    4374:	2f007469 	svccs	0x00007469
    4378:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    437c:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    4380:	2f767375 	svccs	0x00767375
    4384:	53414454 	movtpl	r4, #5204	; 0x1454
    4388:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    438c:	4f2f544f 	svcmi	0x002f544f
    4390:	61742f53 	cmnvs	r4, r3, asr pc
    4394:	2e736b73 	vmovcs.s8	r6, d3[7]
    4398:	4e650063 	cdpmi	0, 6, cr0, cr5, cr3, {3}
    439c:	7463416f 	strbtvc	r4, [r3], #-367	; 0xfffffe91
    43a0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    43a4:	6f547875 	svcvs	0x00547875
    43a8:	61655270 	smcvs	21792	; 0x5520
    43ac:	72507964 	subsvc	r7, r0, #100, 18	; 0x190000
    43b0:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    43b4:	70007974 	andvc	r7, r0, r4, ror r9
    43b8:	65764578 	ldrbvs	r4, [r6, #-1400]!	; 0xfffffa88
    43bc:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    43c0:	78007473 	stmdavc	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    43c4:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
    43c8:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    43cc:	6e755272 	mrcvs	2, 3, r5, cr5, cr2, {3}
    43d0:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    43d4:	61745300 	cmnvs	r4, r0, lsl #6
    43d8:	79546b63 	ldmdbvc	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    43dc:	745f6570 	ldrbvc	r6, [pc], #-1392	; 43e4 <_Min_Stack_Size+0x41e4>
    43e0:	52787000 	rsbspl	r7, r8, #0
    43e4:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    43e8:	6b736154 	blvs	1cdc940 <_Min_Stack_Size+0x1cdc740>
    43ec:	73694c73 	cmnvc	r9, #29440	; 0x7300
    43f0:	75007374 	strvc	r7, [r0, #-884]	; 0xfffffc8c
    43f4:	69724f63 	ldmdbvs	r2!, {r0, r1, r5, r6, r8, r9, sl, fp, lr}^
    43f8:	616e6967 	cmnvs	lr, r7, ror #18
    43fc:	746f4e6c 	strbtvc	r4, [pc], #-3692	; 4404 <_Min_Stack_Size+0x4204>
    4400:	53796669 	cmnpl	r9, #110100480	; 0x6900000
    4404:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    4408:	61547600 	cmpvs	r4, r0, lsl #12
    440c:	65536b73 	ldrbvs	r6, [r3, #-2931]	; 0xfffff48d
    4410:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	; 0xfffffe30
    4414:	74754f65 	ldrbtvc	r4, [r5], #-3941	; 0xfffff09b
    4418:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    441c:	54780065 	ldrbtpl	r0, [r8], #-101	; 0xffffff9b
    4420:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
    4424:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    4428:	6f4e6369 	svcvs	0x004e6369
    442c:	79666974 	stmdbvc	r6!, {r2, r4, r5, r6, r8, fp, sp, lr}^
    4430:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 4320 <_Min_Stack_Size+0x4120>
    4434:	00525349 	subseq	r5, r2, r9, asr #6
    4438:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    443c:	636e496b 	cmnvs	lr, #1753088	; 0x1ac000
    4440:	656d6572 	strbvs	r6, [sp, #-1394]!	; 0xfffffa8e
    4444:	6954746e 	ldmdbvs	r4, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    4448:	75006b63 	strvc	r6, [r0, #-2915]	; 0xfffff49d
    444c:	7469426c 	strbtvc	r4, [r9], #-620	; 0xfffffd94
    4450:	0070616d 	rsbseq	r6, r0, sp, ror #2
    4454:	6c654478 	cfstrdvs	mvd4, [r5], #-480	; 0xfffffe20
    4458:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
    445c:	6b736154 	blvs	1cdc9b4 <_Min_Stack_Size+0x1cdc7b4>
    4460:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    4464:	44780031 	ldrbtmi	r0, [r8], #-49	; 0xffffffcf
    4468:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    446c:	61546465 	cmpvs	r4, r5, ror #8
    4470:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    4474:	00327473 	eorseq	r7, r2, r3, ror r4
    4478:	61506c75 	cmpvs	r0, r5, ror ip
    447c:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    4480:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
    4484:	61547800 	cmpvs	r4, r0, lsl #16
    4488:	6f546b73 	svcvs	0x00546b73
    448c:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0xfffffaae
    4490:	7500656d 	strvc	r6, [r0, #-1389]	; 0xfffffa93
    4494:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    4498:	7465476b 	strbtvc	r4, [r5], #-1899	; 0xfffff895
    449c:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    44a0:	664f7265 	strbvs	r7, [pc], -r5, ror #4
    44a4:	6b736154 	blvs	1cdc9fc <_Min_Stack_Size+0x1cdc7fc>
    44a8:	63700073 	cmnvs	r0, #115	; 0x73
    44ac:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
    44b0:	6b737400 	blvs	1ce14b8 <_Min_Stack_Size+0x1ce12b8>
    44b4:	00424354 	subeq	r4, r2, r4, asr r3
    44b8:	6f4e6375 	svcvs	0x004e6375
    44bc:	79666974 	stmdbvc	r6!, {r2, r4, r5, r6, r8, fp, sp, lr}^
    44c0:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    44c4:	54780065 	ldrbtpl	r0, [r8], #-101	; 0xffffff9b
    44c8:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
    44cc:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    44d0:	6f4e6369 	svcvs	0x004e6369
    44d4:	79666974 	stmdbvc	r6!, {r2, r4, r5, r6, r8, fp, sp, lr}^
    44d8:	55787000 	ldrbpl	r7, [r8, #-0]!
    44dc:	6f6c626e 	svcvs	0x006c626e
    44e0:	64656b63 	strbtvs	r6, [r5], #-2915	; 0xfffff49d
    44e4:	00424354 	subeq	r4, r2, r4, asr r3
    44e8:	74537375 	ldrbvc	r7, [r3], #-885	; 0xfffffc8b
    44ec:	446b6361 	strbtmi	r6, [fp], #-865	; 0xfffffc9f
    44f0:	68747065 	ldmdavs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
    44f4:	6c437800 	mcrrvs	8, 0, r7, r3, cr0
    44f8:	43726165 	cmnmi	r2, #1073741849	; 0x40000019
    44fc:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    4500:	78456e4f 	stmdavc	r5, {r0, r1, r2, r3, r6, r9, sl, fp, sp, lr}^
    4504:	78007469 	stmdavc	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    4508:	70616c45 	rsbvc	r6, r1, r5, asr #24
    450c:	54646573 	strbtpl	r6, [r4], #-1395	; 0xfffffa8d
    4510:	00656d69 	rsbeq	r6, r5, r9, ror #26
    4514:	74655365 	strbtvc	r5, [r5], #-869	; 0xfffffc9b
    4518:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    451c:	74695765 	strbtvc	r5, [r9], #-1893	; 0xfffff89b
    4520:	65764f68 	ldrbvs	r4, [r6, #-3944]!	; 0xfffff098
    4524:	69727772 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
    4528:	78006574 	stmdavc	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
    452c:	6b736154 	blvs	1cdca84 <_Min_Stack_Size+0x1cdc884>
    4530:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    4534:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
    4538:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    453c:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 442c <_Min_Stack_Size+0x422c>
    4540:	00525349 	subseq	r5, r2, r9, asr #6
    4544:	61537875 	cmpvs	r3, r5, ror r8
    4548:	49646576 	stmdbmi	r4!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    454c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    4550:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
    4554:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    4558:	6c750065 	ldclvs	0, cr0, [r5], #-404	; 0xfffffe6c
    455c:	73746942 	cmnvc	r4, #1081344	; 0x108000
    4560:	6c436f54 	mcrrvs	15, 5, r6, r3, cr4
    4564:	4f726165 	svcmi	0x00726165
    4568:	746e456e 	strbtvc	r4, [lr], #-1390	; 0xfffffa92
    456c:	78007972 	stmdavc	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
    4570:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
    4574:	52676e69 	rsbpl	r6, r7, #1680	; 0x690
    4578:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    457c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    4580:	61547600 	cmpvs	r4, r0, lsl #12
    4584:	72506b73 	subsvc	r6, r0, #117760	; 0x1cc00
    4588:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    458c:	69447974 	stmdbvs	r4, {r2, r4, r5, r6, r8, fp, ip, sp, lr}^
    4590:	686e6973 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    4594:	74697265 	strbtvc	r7, [r9], #-613	; 0xfffffd9b
    4598:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    459c:	6d695472 	cfstrdvs	mvd5, [r9, #-456]!	; 0xfffffe38
    45a0:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xfffff09b
    45a4:	61547800 	cmpvs	r4, r0, lsl #16
    45a8:	65526b73 	ldrbvs	r6, [r2, #-2931]	; 0xfffff48d
    45ac:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0xfffffa8d
    45b0:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 44a0 <_Min_Stack_Size+0x42a0>
    45b4:	00525349 	subseq	r5, r2, r9, asr #6
    45b8:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    45bc:	7375536b 	cmnvc	r5, #-1409286143	; 0xac000001
    45c0:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    45c4:	006c6c41 	rsbeq	r6, ip, r1, asr #24
    45c8:	746f4e65 	strbtvc	r4, [pc], #-3685	; 45d0 <_Min_Stack_Size+0x43d0>
    45cc:	41796669 	cmnmi	r9, r9, ror #12
    45d0:	6f697463 	svcvs	0x00697463
    45d4:	7875006e 	ldmdavc	r5!, {r1, r2, r3, r5, r6}^
    45d8:	796c6e4f 	stmdbvc	ip!, {r0, r1, r2, r3, r6, r9, sl, fp, sp, lr}^
    45dc:	4d656e4f 	stclmi	14, cr6, [r5, #-316]!	; 0xfffffec4
    45e0:	78657475 	stmdavc	r5!, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
    45e4:	646c6548 	strbtvs	r6, [ip], #-1352	; 0xfffffab8
    45e8:	61547600 	cmpvs	r4, r0, lsl #12
    45ec:	6e456b73 	vmovvs.8	d5[3], r6
    45f0:	68635364 	stmdavs	r3!, {r2, r5, r6, r8, r9, ip, lr}^
    45f4:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    45f8:	75007265 	strvc	r7, [r0, #-613]	; 0xfffffd9b
    45fc:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    4600:	6972506b 	ldmdbvs	r2!, {r0, r1, r3, r5, r6, ip, lr}^
    4604:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    4608:	74654779 	strbtvc	r4, [r5], #-1913	; 0xfffff887
    460c:	6f437800 	svcvs	0x00437800
    4610:	5474736e 	ldrbtpl	r7, [r4], #-878	; 0xfffffc92
    4614:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
    4618:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    461c:	75537800 	ldrbvc	r7, [r3, #-2048]	; 0xfffff800
    4620:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
    4624:	54646564 	strbtpl	r6, [r4], #-1380	; 0xfffffa9c
    4628:	4c6b7361 	stclmi	3, cr7, [fp], #-388	; 0xfffffe7c
    462c:	00747369 	rsbseq	r7, r4, r9, ror #6
    4630:	764f7870 			; <UNDEFINED> instruction: 0x764f7870
    4634:	6c667265 	sfmvs	f7, 2, [r6], #-404	; 0xfffffe6c
    4638:	6544776f 	strbvs	r7, [r4, #-1903]	; 0xfffff891
    463c:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
    4640:	73615464 	cmnvc	r1, #100, 8	; 0x64000000
    4644:	73694c6b 	cmnvc	r9, #27392	; 0x6b00
    4648:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
    464c:	706d6554 	rsbvc	r6, sp, r4, asr r5
    4650:	61547600 	cmpvs	r4, r0, lsl #12
    4654:	6c506b73 	mrrcvs	11, 7, r6, r0, cr3
    4658:	4f656361 	svcmi	0x00656361
    465c:	6576456e 	ldrbvs	r4, [r6, #-1390]!	; 0xfffffa92
    4660:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    4664:	76007473 			; <UNDEFINED> instruction: 0x76007473
    4668:	6b736154 	blvs	1cdcbc0 <_Min_Stack_Size+0x1cdc9c0>
    466c:	616c6544 	cmnvs	ip, r4, asr #10
    4670:	76700079 			; <UNDEFINED> instruction: 0x76700079
    4674:	6b736154 	blvs	1cdcbcc <_Min_Stack_Size+0x1cdc9cc>
    4678:	72636e49 	rsbvc	r6, r3, #1168	; 0x490
    467c:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
    4680:	74754d74 	ldrbtvc	r4, [r5], #-3444	; 0xfffff28c
    4684:	65487865 	strbvs	r7, [r8, #-2149]	; 0xfffff79b
    4688:	6f43646c 	svcvs	0x0043646c
    468c:	00746e75 	rsbseq	r6, r4, r5, ror lr
    4690:	6f4e6c75 	svcvs	0x004e6c75
    4694:	69666974 	stmdbvs	r6!, {r2, r4, r5, r6, r8, fp, sp, lr}^
    4698:	61566465 	cmpvs	r6, r5, ror #8
    469c:	0065756c 	rsbeq	r7, r5, ip, ror #10
    46a0:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    46a4:	6d65526b 	sfmvs	f5, 2, [r5, #-428]!	; 0xfffffe54
    46a8:	4665766f 	strbtmi	r7, [r5], -pc, ror #12
    46ac:	556d6f72 	strbpl	r6, [sp, #-3954]!	; 0xfffff08e
    46b0:	64726f6e 	ldrbtvs	r6, [r2], #-3950	; 0xfffff092
    46b4:	64657265 	strbtvs	r7, [r5], #-613	; 0xfffffd9b
    46b8:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    46bc:	73694c74 	cmnvc	r9, #116, 24	; 0x7400
    46c0:	78750074 	ldmdavc	r5!, {r2, r4, r5, r6}^
    46c4:	6574754d 	ldrbvs	r7, [r4, #-1357]!	; 0xfffffab3
    46c8:	48736578 	ldmdami	r3!, {r3, r4, r5, r6, r8, sl, sp, lr}^
    46cc:	00646c65 	rsbeq	r6, r4, r5, ror #24
    46d0:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    46d4:	6972506b 	ldmdbvs	r2!, {r0, r1, r3, r5, r6, ip, lr}^
    46d8:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    46dc:	73694479 	cmnvc	r9, #2030043136	; 0x79000000
    46e0:	65686e69 	strbvs	r6, [r8, #-3689]!	; 0xfffff197
    46e4:	00746972 	rsbseq	r6, r4, r2, ror r9
    46e8:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    46ec:	6d65526b 	sfmvs	f5, 2, [r5, #-428]!	; 0xfffffe54
    46f0:	4665766f 	strbtmi	r7, [r5], -pc, ror #12
    46f4:	456d6f72 	strbmi	r6, [sp, #-3954]!	; 0xfffff08e
    46f8:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
    46fc:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    4700:	65536500 	ldrbvs	r6, [r3, #-1280]	; 0xfffffb00
    4704:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    4708:	69576575 	ldmdbvs	r7, {r0, r2, r4, r5, r6, r8, sl, sp, lr}^
    470c:	756f6874 	strbvc	r6, [pc, #-2164]!	; 3ea0 <_Min_Stack_Size+0x3ca0>
    4710:	65764f74 	ldrbvs	r4, [r6, #-3956]!	; 0xfffff08c
    4714:	69727772 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
    4718:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
    471c:	6174536c 	cmnvs	r4, ip, ror #6
    4720:	65446b63 	strbvs	r6, [r4, #-2915]	; 0xfffff49d
    4724:	00687470 	rsbeq	r7, r8, r0, ror r4
    4728:	6f685378 	svcvs	0x00685378
    472c:	44646c75 	strbtmi	r6, [r4], #-3189	; 0xfffff38b
    4730:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    4734:	76727000 	ldrbtvc	r7, [r2], -r0
    4738:	656c6449 	strbvs	r6, [ip, #-1097]!	; 0xfffffbb7
    473c:	6b736154 	blvs	1cdcc94 <_Min_Stack_Size+0x1cdca94>
    4740:	546c7500 	strbtpl	r7, [ip], #-1280	; 0xfffffb00
    4744:	4e6b7361 	cdpmi	3, 6, cr7, cr11, cr1, {3}
    4748:	6669746f 	strbtvs	r7, [r9], -pc, ror #8
    474c:	6b615479 	blvs	1859938 <_Min_Stack_Size+0x1859738>
    4750:	54780065 	ldrbtpl	r0, [r8], #-101	; 0xffffff9b
    4754:	4e6b7361 	cdpmi	3, 6, cr7, cr11, cr1, {3}
    4758:	6669746f 	strbtvs	r7, [r9], -pc, ror #8
    475c:	69615779 	stmdbvs	r1!, {r0, r3, r4, r5, r6, r8, r9, sl, ip, lr}^
    4760:	54780074 	ldrbtpl	r0, [r8], #-116	; 0xffffff8c
    4764:	436b7361 	cmnmi	fp, #-2080374783	; 0x84000001
    4768:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
    476c:	72700065 	rsbsvc	r0, r0, #101	; 0x65
    4770:	64644176 	strbtvs	r4, [r4], #-374	; 0xfffffe8a
    4774:	5477654e 	ldrbtpl	r6, [r7], #-1358	; 0xfffffab2
    4778:	546b7361 	strbtpl	r7, [fp], #-865	; 0xfffffc9f
    477c:	6165526f 	cmnvs	r5, pc, ror #4
    4780:	694c7964 	stmdbvs	ip, {r2, r5, r6, r8, fp, ip, sp, lr}^
    4784:	70007473 	andvc	r7, r0, r3, ror r4
    4788:	77654e78 			; <UNDEFINED> instruction: 0x77654e78
    478c:	00424354 	subeq	r4, r2, r4, asr r3
    4790:	61547870 	cmpvs	r4, r0, ror r8
    4794:	6f436b73 	svcvs	0x00436b73
    4798:	4d006564 	cfstr32mi	mvfx6, [r0, #-400]	; 0xfffffe70
    479c:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    47a0:	67655279 			; <UNDEFINED> instruction: 0x67655279
    47a4:	5f6e6f69 	svcpl	0x006e6f69
    47a8:	4e780074 	mrcmi	0, 3, r0, cr8, cr4, {3}
    47ac:	54747865 	ldrbtpl	r7, [r4], #-2149	; 0xfffff79b
    47b0:	556b7361 	strbpl	r7, [fp, #-865]!	; 0xfffffc9f
    47b4:	6f6c626e 	svcvs	0x006c626e
    47b8:	69546b63 	ldmdbvs	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    47bc:	7800656d 	stmdavc	r0, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    47c0:	6b636954 	blvs	18ded18 <_Min_Stack_Size+0x18deb18>
    47c4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    47c8:	6c750074 	ldclvs	0, cr0, [r5], #-464	; 0xfffffe30
    47cc:	75746552 	ldrbvc	r6, [r4, #-1362]!	; 0xfffffaae
    47d0:	75006e72 	strvc	r6, [r0, #-3698]	; 0xfffff18e
    47d4:	726f5063 	rsbvc	r5, pc, #99	; 0x63
    47d8:	756f4374 	strbvc	r4, [pc, #-884]!	; 446c <_Min_Stack_Size+0x426c>
    47dc:	654c746e 	strbvs	r7, [ip, #-1134]	; 0xfffffb92
    47e0:	6e696461 	cdpvs	4, 6, cr6, cr9, cr1, {3}
    47e4:	72655a67 	rsbvc	r5, r5, #421888	; 0x67000
    47e8:	7500736f 	strvc	r7, [r0, #-879]	; 0xfffffc91
    47ec:	6e654c6c 	cdpvs	12, 6, cr4, cr5, cr12, {3}
    47f0:	49687467 	stmdbmi	r8!, {r0, r1, r2, r5, r6, sl, ip, sp, lr}^
    47f4:	7479426e 	ldrbtvc	r4, [r9], #-622	; 0xfffffd92
    47f8:	75007365 	strvc	r7, [r0, #-869]	; 0xfffffc9b
    47fc:	6568436c 	strbvs	r4, [r8, #-876]!	; 0xfffffc94
    4800:	61566b63 	cmpvs	r6, r3, ror #22
    4804:	0065756c 	rsbeq	r7, r5, ip, ror #10
    4808:	52767270 	rsbspl	r7, r6, #112, 4
    480c:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    4810:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0xfffffab2
    4814:	6b736154 	blvs	1cdcd6c <_Min_Stack_Size+0x1cdcb6c>
    4818:	6c626e55 	stclvs	14, cr6, [r2], #-340	; 0xfffffeac
    481c:	546b636f 	strbtpl	r6, [fp], #-879	; 0xfffffc91
    4820:	00656d69 	rsbeq	r6, r5, r9, ror #26
    4824:	654e7875 	strbvs	r7, [lr, #-2165]	; 0xfffff78b
    4828:	69725077 	ldmdbvs	r2!, {r0, r1, r2, r4, r5, r6, ip, lr}^
    482c:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    4830:	61540079 	cmpvs	r4, r9, ror r0
    4834:	75466b73 	strbvc	r6, [r6, #-2931]	; 0xfffff48d
    4838:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    483c:	745f6e6f 	ldrbvc	r6, [pc], #-3695	; 4844 <_Min_Stack_Size+0x4644>
    4840:	6c757000 	ldclvs	0, cr7, [r5], #-0
    4844:	76657250 			; <UNDEFINED> instruction: 0x76657250
    4848:	73756f69 	cmnvc	r5, #420	; 0x1a4
    484c:	69746f4e 	ldmdbvs	r4!, {r1, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
    4850:	61636966 	cmnvs	r3, r6, ror #18
    4854:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    4858:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    485c:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
    4860:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    4864:	0074754f 	rsbseq	r7, r4, pc, asr #10
    4868:	61547875 	cmpvs	r4, r5, ror r8
    486c:	72506b73 	subsvc	r6, r0, #117760	; 0x1cc00
    4870:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4874:	65477974 	strbvs	r7, [r7, #-2420]	; 0xfffff68c
    4878:	6f724674 	svcvs	0x00724674
    487c:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
    4880:	61547800 	cmpvs	r4, r0, lsl #16
    4884:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xfffff48d
    4888:	63695474 	cmnvs	r9, #116, 8	; 0x74000000
    488c:	756f436b 	strbvc	r4, [pc, #-875]!	; 4529 <_Min_Stack_Size+0x4329>
    4890:	7600746e 	strvc	r7, [r0], -lr, ror #8
    4894:	6b736154 	blvs	1cdcdec <_Min_Stack_Size+0x1cdcbec>
    4898:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    489c:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    48a0:	54746553 	ldrbtpl	r6, [r4], #-1363	; 0xfffffaad
    48a4:	4f656d69 	svcmi	0x00656d69
    48a8:	74537475 	ldrbvc	r7, [r3], #-1141	; 0xfffffb8b
    48ac:	00657461 	rsbeq	r7, r5, r1, ror #8
    48b0:	61547875 	cmpvs	r4, r5, ror r8
    48b4:	754e6b73 	strbvc	r6, [lr, #-2931]	; 0xfffff48d
    48b8:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    48bc:	63416500 	movtvs	r6, #5376	; 0x1500
    48c0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    48c4:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
    48c8:	526b7361 	rsbpl	r7, fp, #-2080374783	; 0x84000001
    48cc:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    48d0:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    48d4:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0xfffff68c
    48d8:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    48dc:	76006575 			; <UNDEFINED> instruction: 0x76006575
    48e0:	6b736154 	blvs	1cdce38 <_Min_Stack_Size+0x1cdcc38>
    48e4:	6f697250 	svcvs	0x00697250
    48e8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    48ec:	00746553 	rsbseq	r6, r4, r3, asr r5
    48f0:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    48f4:	516f546b 	cmnpl	pc, fp, ror #8
    48f8:	79726575 	ldmdbvc	r2!, {r0, r2, r4, r5, r6, r8, sl, sp, lr}^
    48fc:	61547800 	cmpvs	r4, r0, lsl #16
    4900:	6f546b73 	svcvs	0x00546b73
    4904:	69746f4e 	ldmdbvs	r4!, {r1, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
    4908:	65007966 	strvs	r7, [r0, #-2406]	; 0xfffff69a
    490c:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
    4910:	00737469 	rsbseq	r7, r3, r9, ror #8
    4914:	4d454d78 	stclmi	13, cr4, [r5, #-480]	; 0xfffffe20
    4918:	5f59524f 	svcpl	0x0059524f
    491c:	49474552 	stmdbmi	r7, {r1, r4, r6, r8, sl, lr}^
    4920:	75004e4f 	strvc	r4, [r0, #-3663]	; 0xfffff1b1
    4924:	69725078 	ldmdbvs	r2!, {r3, r4, r5, r6, ip, lr}^
    4928:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    492c:	556f5479 	strbpl	r5, [pc, #-1145]!	; 44bb <_Min_Stack_Size+0x42bb>
    4930:	76006573 			; <UNDEFINED> instruction: 0x76006573
    4934:	6b736154 	blvs	1cdce8c <_Min_Stack_Size+0x1cdcc8c>
    4938:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
    493c:	6f436863 	svcvs	0x00436863
    4940:	7865746e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    4944:	4e780074 	mrcmi	0, 3, r0, cr8, cr4, {3}
    4948:	664f6d75 			; <UNDEFINED> instruction: 0x664f6d75
    494c:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
    4950:	776f6c66 	strbvc	r6, [pc, -r6, ror #24]!
    4954:	49780073 	ldmdbmi	r8!, {r0, r1, r4, r5, r6}^
    4958:	54656c64 	strbtpl	r6, [r5], #-3172	; 0xfffff39c
    495c:	486b7361 	stmdami	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    4960:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    4964:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
    4968:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
    496c:	50747365 	rsbspl	r7, r4, r5, ror #6
    4970:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    4974:	57797469 	ldrbpl	r7, [r9, -r9, ror #8]!
    4978:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
    497c:	6154676e 	cmpvs	r4, lr, ror #14
    4980:	70006b73 	andvc	r6, r0, r3, ror fp
    4984:	6e497672 	mcrvs	6, 2, r7, cr9, cr2, {3}
    4988:	61697469 	cmnvs	r9, r9, ror #8
    498c:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0xfffff694
    4990:	5477654e 	ldrbtpl	r6, [r7], #-1358	; 0xfffffab2
    4994:	006b7361 	rsbeq	r7, fp, r1, ror #6
    4998:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    499c:	7365526b 	cmnvc	r5, #-1342177274	; 0xb0000006
    49a0:	41656d75 	smcmi	22229	; 0x56d5
    49a4:	76006c6c 	strvc	r6, [r0], -ip, ror #24
    49a8:	6b736154 	blvs	1cdcf00 <_Min_Stack_Size+0x1cdcd00>
    49ac:	69746f4e 	ldmdbvs	r4!, {r1, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
    49b0:	69477966 	stmdbvs	r7, {r1, r2, r5, r6, r8, fp, ip, sp, lr}^
    49b4:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
    49b8:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
    49bc:	78700052 	ldmdavc	r0!, {r1, r4, r6}^
    49c0:	616c6544 	cmnvs	ip, r4, asr #10
    49c4:	54646579 	strbtpl	r6, [r4], #-1401	; 0xfffffa87
    49c8:	4c6b7361 	stclmi	3, cr7, [fp], #-388	; 0xfffffe7c
    49cc:	00747369 	rsbseq	r7, r4, r9, ror #6
    49d0:	54767270 	ldrbtpl	r7, [r6], #-624	; 0xfffffd90
    49d4:	496b7361 	stmdbmi	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    49d8:	73615473 	cmnvc	r1, #1929379840	; 0x73000000
    49dc:	7375536b 	cmnvc	r5, #-1409286143	; 0xac000001
    49e0:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    49e4:	78006465 	stmdavc	r0, {r0, r2, r5, r6, sl, sp, lr}
    49e8:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
    49ec:	65526863 	ldrbvs	r6, [r2, #-2147]	; 0xfffff79d
    49f0:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    49f4:	70006465 	andvc	r6, r0, r5, ror #8
    49f8:	74754d78 	ldrbtvc	r4, [r5], #-3448	; 0xfffff288
    49fc:	6f487865 	svcvs	0x00487865
    4a00:	7265646c 	rsbvc	r6, r5, #108, 8	; 0x6c000000
    4a04:	53787000 	cmnpl	r8, #0
    4a08:	6b636174 	blvs	18dcfe0 <_Min_Stack_Size+0x18dcde0>
    4a0c:	566c7500 	strbtpl	r7, [ip], -r0, lsl #10
    4a10:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    4a14:	61547800 	cmpvs	r4, r0, lsl #16
    4a18:	6f546b73 	svcvs	0x00546b73
    4a1c:	70737553 	rsbsvc	r7, r3, r3, asr r5
    4a20:	00646e65 	rsbeq	r6, r4, r5, ror #28
    4a24:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    4a28:	6568436b 	strbvs	r4, [r8, #-875]!	; 0xfffffc95
    4a2c:	6f466b63 	svcvs	0x00466b63
    4a30:	6d695472 	cfstrdvs	mvd5, [r9, #-456]!	; 0xfffffe38
    4a34:	74754f65 	ldrbtvc	r4, [r5], #-3941	; 0xfffff09b
    4a38:	50787000 	rsbspl	r7, r8, r0
    4a3c:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    4a40:	5773756f 	ldrbpl	r7, [r3, -pc, ror #10]!
    4a44:	54656b61 	strbtpl	r6, [r5], #-2913	; 0xfffff49f
    4a48:	00656d69 	rsbeq	r6, r5, r9, ror #26
    4a4c:	65526375 	ldrbvs	r6, [r2, #-885]	; 0xfffffc8b
    4a50:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
    4a54:	6c757000 	ldclvs	0, cr7, [r5], #-0
    4a58:	69746f4e 	ldmdbvs	r4!, {r1, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
    4a5c:	61636966 	cmnvs	r3, r6, ror #18
    4a60:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    4a64:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    4a68:	54760065 	ldrbtpl	r0, [r6], #-101	; 0xffffff9b
    4a6c:	4d6b7361 	stclmi	3, cr7, [fp, #-388]!	; 0xfffffe7c
    4a70:	65737369 	ldrbvs	r7, [r3, #-873]!	; 0xfffffc97
    4a74:	65695964 	strbvs	r5, [r9, #-2404]!	; 0xfffff69c
    4a78:	7500646c 	strvc	r6, [r0, #-1132]	; 0xfffffb94
    4a7c:	6e655078 	mcrvs	0, 3, r5, cr5, cr8, {3}
    4a80:	54646564 	strbtpl	r6, [r4], #-1380	; 0xfffffa9c
    4a84:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
    4a88:	61547800 	cmpvs	r4, r0, lsl #16
    4a8c:	72506b73 	subsvc	r6, r0, #117760	; 0x1cc00
    4a90:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4a94:	6e497974 			; <UNDEFINED> instruction: 0x6e497974
    4a98:	69726568 	ldmdbvs	r2!, {r3, r5, r6, r8, sl, sp, lr}^
    4a9c:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
    4aa0:	6574754d 	ldrbvs	r7, [r4, #-1357]!	; 0xfffffab3
    4aa4:	6c6f4878 	stclvs	8, cr4, [pc], #-480	; 48cc <_Min_Stack_Size+0x46cc>
    4aa8:	54726564 	ldrbtpl	r6, [r2], #-1380	; 0xfffffa9c
    4aac:	70004243 	andvc	r4, r0, r3, asr #4
    4ab0:	73615463 	cmnvc	r1, #1660944384	; 0x63000000
    4ab4:	7465476b 	strbtvc	r4, [r5], #-1899	; 0xfffff895
    4ab8:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
    4abc:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
    4ac0:	00736b63 	rsbseq	r6, r3, r3, ror #22
    4ac4:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    4ac8:	6174536b 	cmnvs	r4, fp, ror #6
    4acc:	63537472 	cmpvs	r3, #1912602624	; 0x72000000
    4ad0:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
    4ad4:	0072656c 	rsbseq	r6, r2, ip, ror #10
    4ad8:	6e614378 	mcrvs	3, 3, r4, cr1, cr8, {3}
    4adc:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    4ae0:	646e496b 	strbtvs	r4, [lr], #-2411	; 0xfffff695
    4ae4:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
    4ae8:	6c657469 	cfstrdvs	mvd7, [r5], #-420	; 0xfffffe5c
    4aec:	75700079 	ldrbvc	r0, [r0, #-121]!	; 0xffffff87
    4af0:	6174536c 	cmnvs	r4, ip, ror #6
    4af4:	70006b63 	andvc	r6, r0, r3, ror #22
    4af8:	73614276 	cmnvc	r1, #1610612743	; 0x60000007
    4afc:	64644165 	strbtvs	r4, [r4], #-357	; 0xfffffe9b
    4b00:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    4b04:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
    4b08:	54736b63 	ldrbtpl	r6, [r3], #-2915	; 0xfffff49d
    4b0c:	6c65446f 	cfstrdvs	mvd4, [r5], #-444	; 0xfffffe44
    4b10:	76007961 	strvc	r7, [r0], -r1, ror #18
    4b14:	6b736154 	blvs	1cdd06c <_Min_Stack_Size+0x1cdce6c>
    4b18:	63616c50 	cmnvs	r1, #80, 24	; 0x5000
    4b1c:	556e4f65 	strbpl	r4, [lr, #-3941]!	; 0xfffff09b
    4b20:	64726f6e 	ldrbtvs	r6, [r2], #-3950	; 0xfffff092
    4b24:	64657265 	strbtvs	r7, [r5], #-613	; 0xfffffd9b
    4b28:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    4b2c:	73694c74 	cmnvc	r9, #116, 24	; 0x7400
    4b30:	54780074 	ldrbtpl	r0, [r8], #-116	; 0xffffff8c
    4b34:	4e6b7361 	cdpmi	3, 6, cr7, cr11, cr1, {3}
    4b38:	6669746f 	strbtvs	r7, [r9], -pc, ror #8
    4b3c:	61745379 	cmnvs	r4, r9, ror r3
    4b40:	6c436574 	cfstr64vs	mvdx6, [r3], {116}	; 0x74
    4b44:	00726165 	rsbseq	r6, r2, r5, ror #2
    4b48:	69547870 	ldmdbvs	r4, {r4, r5, r6, fp, ip, sp, lr}^
    4b4c:	54736b63 	ldrbtpl	r6, [r3], #-2915	; 0xfffff49d
    4b50:	6961576f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, lr}^
    4b54:	78750074 	ldmdavc	r5!, {r2, r4, r5, r6}^
    4b58:	50706f54 	rsbspl	r6, r0, r4, asr pc
    4b5c:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    4b60:	00797469 	rsbseq	r7, r9, r9, ror #8
    4b64:	61427875 	hvcvs	10117	; 0x2785
    4b68:	72506573 	subsvc	r6, r0, #482344960	; 0x1cc00000
    4b6c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4b70:	76007974 			; <UNDEFINED> instruction: 0x76007974
    4b74:	6b736154 	blvs	1cdd0cc <_Min_Stack_Size+0x1cdcecc>
    4b78:	616c6544 	cmnvs	ip, r4, asr #10
    4b7c:	746e5579 	strbtvc	r5, [lr], #-1401	; 0xfffffa87
    4b80:	75006c69 	strvc	r6, [r0, #-3177]	; 0xfffff397
    4b84:	69725078 	ldmdbvs	r2!, {r3, r4, r5, r6, ip, lr}^
    4b88:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    4b8c:	65735579 	ldrbvs	r5, [r3, #-1401]!	; 0xfffffa87
    4b90:	456e4f64 	strbmi	r4, [lr, #-3940]!	; 0xfffff09c
    4b94:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    4b98:	42435400 	submi	r5, r3, #0, 8
    4b9c:	7600745f 			; <UNDEFINED> instruction: 0x7600745f
    4ba0:	6b736154 	blvs	1cdd0f8 <_Min_Stack_Size+0x1cdcef8>
    4ba4:	70737553 	rsbsvc	r7, r3, r3, asr r5
    4ba8:	00646e65 	rsbeq	r6, r4, r5, ror #28
    4bac:	726c4178 	rsbvc	r4, ip, #120, 2
    4bb0:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    4bb4:	6c656959 			; <UNDEFINED> instruction: 0x6c656959
    4bb8:	00646564 	rsbeq	r6, r4, r4, ror #10
    4bbc:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    4bc0:	7465476b 	strbtvc	r4, [r5], #-1899	; 0xfffff895
    4bc4:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    4bc8:	54746e65 	ldrbtpl	r6, [r4], #-3685	; 0xfffff19b
    4bcc:	486b7361 	stmdami	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    4bd0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    4bd4:	52780065 	rsbspl	r0, r8, #101	; 0x65
    4bd8:	6f696765 	svcvs	0x00696765
    4bdc:	7000736e 	andvc	r7, r0, lr, ror #6
    4be0:	64417672 	strbvs	r7, [r1], #-1650	; 0xfffff98e
    4be4:	72754364 	rsbsvc	r4, r5, #100, 6	; 0x90000001
    4be8:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    4bec:	6b736154 	blvs	1cdd144 <_Min_Stack_Size+0x1cdcf44>
    4bf0:	65446f54 	strbvs	r6, [r4, #-3924]	; 0xfffff0ac
    4bf4:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
    4bf8:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
    4bfc:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
    4c00:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    4c04:	54746e65 	ldrbtpl	r6, [r4], #-3685	; 0xfffff19b
    4c08:	75004243 	strvc	r4, [r0, #-579]	; 0xfffffdbd
    4c0c:	72754378 	rsbsvc	r4, r5, #120, 6	; 0xe0000001
    4c10:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    4c14:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    4c18:	664f7265 	strbvs	r7, [pc], -r5, ror #4
    4c1c:	6b736154 	blvs	1cdd174 <_Min_Stack_Size+0x1cdcf74>
    4c20:	54780073 	ldrbtpl	r0, [r8], #-115	; 0xffffff8d
    4c24:	49656d69 	stmdbmi	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    4c28:	6572636e 	ldrbvs	r6, [r2, #-878]!	; 0xfffffc92
    4c2c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    4c30:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
    4c34:	6f54656d 	svcvs	0x0054656d
    4c38:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    4c3c:	74537800 	ldrbvc	r7, [r3], #-2048	; 0xfffff800
    4c40:	4c657461 	cfstrdmi	mvd7, [r5], #-388	; 0xfffffe7c
    4c44:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
    4c48:	006d6574 	rsbeq	r6, sp, r4, ror r5
    4c4c:	43547870 	cmpmi	r4, #112, 16	; 0x700000
    4c50:	78750042 	ldmdavc	r5!, {r1, r6}^
    4c54:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
    4c58:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    4c5c:	73755372 	cmnvc	r5, #-939524095	; 0xc8000001
    4c60:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    4c64:	70006465 	andvc	r6, r0, r5, ror #8
    4c68:	706f5478 	rsbvc	r5, pc, r8, ror r4	; <UNPREDICTABLE>
    4c6c:	7453664f 	ldrbvc	r6, [r3], #-1615	; 0xfffff9b1
    4c70:	006b6361 	rsbeq	r6, fp, r1, ror #6
    4c74:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    4c78:	7365526b 	cmnvc	r5, #-1342177274	; 0xb0000006
    4c7c:	00656d75 	rsbeq	r6, r5, r5, ror sp
    4c80:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
    4c84:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    4c88:	73696c61 	cmnvc	r9, #24832	; 0x6100
    4c8c:	73615465 	cmnvc	r1, #1694498816	; 0x65000000
    4c90:	73694c6b 	cmnvc	r9, #27392	; 0x6b00
    4c94:	70007374 	andvc	r7, r0, r4, ror r3
    4c98:	65764578 	ldrbvs	r4, [r6, #-1400]!	; 0xfffffa88
    4c9c:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    4ca0:	74497473 	strbvc	r7, [r9], #-1139	; 0xfffffb8d
    4ca4:	70006d65 	andvc	r6, r0, r5, ror #26
    4ca8:	65724378 	ldrbvs	r4, [r2, #-888]!	; 0xfffffc88
    4cac:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
    4cb0:	6b736154 	blvs	1cdd208 <_Min_Stack_Size+0x1cdd008>
    4cb4:	76727000 	ldrbtvc	r7, [r2], -r0
    4cb8:	63656843 	cmnvs	r5, #4390912	; 0x430000
    4cbc:	7361546b 	cmnvc	r1, #1795162112	; 0x6b000000
    4cc0:	6157736b 	cmpvs	r7, fp, ror #6
    4cc4:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
    4cc8:	72655467 	rsbvc	r5, r5, #1728053248	; 0x67000000
    4ccc:	616e696d 	cmnvs	lr, sp, ror #18
    4cd0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    4cd4:	43787500 	cmnmi	r8, #0, 10
    4cd8:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    4cdc:	6142746e 	cmpvs	r2, lr, ror #8
    4ce0:	72506573 	subsvc	r6, r0, #482344960	; 0x1cc00000
    4ce4:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4ce8:	78007974 	stmdavc	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
    4cec:	6c656959 			; <UNDEFINED> instruction: 0x6c656959
    4cf0:	6e655064 	cdpvs	0, 6, cr5, cr5, cr4, {3}
    4cf4:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    4cf8:	6f507600 	svcvs	0x00507600
    4cfc:	6e457472 	mcrvs	4, 2, r7, cr5, cr2, {3}
    4d00:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    4d04:	69746972 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    4d08:	006c6163 	rsbeq	r6, ip, r3, ror #2
    4d0c:	6f437870 	svcvs	0x00437870
    4d10:	76006564 	strvc	r6, [r0], -r4, ror #10
    4d14:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    4d18:	53646e45 	cmnpl	r4, #1104	; 0x450
    4d1c:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    4d20:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    4d24:	6f507800 	svcvs	0x00507800
    4d28:	65507472 	ldrbvs	r7, [r0, #-1138]	; 0xfffffb8e
    4d2c:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
    4d30:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    4d34:	0072656c 	rsbseq	r6, r2, ip, ror #10
    4d38:	54767270 	ldrbtpl	r7, [r6], #-624	; 0xfffffd90
    4d3c:	456b7361 	strbmi	r7, [fp, #-865]!	; 0xfffffc9f
    4d40:	45746978 	ldrbmi	r6, [r4, #-2424]!	; 0xfffff688
    4d44:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    4d48:	446c7500 	strbtmi	r7, [ip], #-1280	; 0xfffffb00
    4d4c:	796d6d75 	stmdbvc	sp!, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    4d50:	50787000 	rsbspl	r7, r8, r0
    4d54:	4974726f 	ldmdbmi	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    4d58:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    4d5c:	73696c61 	cmnvc	r9, #24832	; 0x6100
    4d60:	61745365 	cmnvs	r4, r5, ror #6
    4d64:	78006b63 	stmdavc	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    4d68:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    4d6c:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
    4d70:	486b6369 	stmdami	fp!, {r0, r3, r5, r6, r8, r9, sp, lr}^
    4d74:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    4d78:	2f007265 	svccs	0x00007265
    4d7c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4d80:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    4d84:	2f767375 	svccs	0x00767375
    4d88:	53414454 	movtpl	r4, #5204	; 0x1454
    4d8c:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    4d90:	4f2f544f 	svcmi	0x002f544f
    4d94:	6f702f53 	svcvs	0x00702f53
    4d98:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
    4d9c:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
    4da0:	412f4343 			; <UNDEFINED> instruction: 0x412f4343
    4da4:	435f4d52 	cmpmi	pc, #5248	; 0x1480
    4da8:	702f334d 	eorvc	r3, pc, sp, asr #6
    4dac:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
    4db0:	78750063 	ldmdavc	r5!, {r0, r1, r5, r6}^
    4db4:	74697243 	strbtvc	r7, [r9], #-579	; 0xfffffdbd
    4db8:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
    4dbc:	7473654e 	ldrbtvc	r6, [r3], #-1358	; 0xfffffab2
    4dc0:	00676e69 	rsbeq	r6, r7, r9, ror #28
    4dc4:	726f5076 	rsbvc	r5, pc, #118	; 0x76
    4dc8:	74655374 	strbtvc	r5, [r5], #-884	; 0xfffffc8c
    4dcc:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    4dd0:	4972656d 	ldmdbmi	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
    4dd4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    4dd8:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
    4ddc:	6f507600 	svcvs	0x00507600
    4de0:	56537472 			; <UNDEFINED> instruction: 0x56537472
    4de4:	6e614843 	cdpvs	8, 6, cr4, cr1, cr3, {2}
    4de8:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    4dec:	6f507600 	svcvs	0x00507600
    4df0:	78457472 	stmdavc	r5, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4df4:	72437469 	subvc	r7, r3, #1761607680	; 0x69000000
    4df8:	63697469 	cmnvs	r9, #1761607680	; 0x69000000
    4dfc:	70006c61 	andvc	r6, r0, r1, ror #24
    4e00:	6f507672 	svcvs	0x00507672
    4e04:	74537472 	ldrbvc	r7, [r3], #-1138	; 0xfffffb8e
    4e08:	46747261 	ldrbtmi	r7, [r4], -r1, ror #4
    4e0c:	74737269 	ldrbtvc	r7, [r3], #-617	; 0xfffffd97
    4e10:	6b736154 	blvs	1cdd368 <_Min_Stack_Size+0x1cdd168>
    4e14:	6f507800 	svcvs	0x00507800
    4e18:	74537472 	ldrbvc	r7, [r3], #-1138	; 0xfffffb8e
    4e1c:	53747261 	cmnpl	r4, #268435462	; 0x10000006
    4e20:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    4e24:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    4e28:	6f682f00 	svcvs	0x00682f00
    4e2c:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    4e30:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    4e34:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    4e38:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    4e3c:	544f492d 	strbpl	r4, [pc], #-2349	; 4e44 <_Min_Stack_Size+0x4c44>
    4e40:	2f534f2f 	svccs	0x00534f2f
    4e44:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    4e48:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    4e4c:	6d654d2f 	stclvs	13, cr4, [r5, #-188]!	; 0xffffff44
    4e50:	676e614d 	strbvs	r6, [lr, -sp, asr #2]!
    4e54:	6165682f 	cmnvs	r5, pc, lsr #16
    4e58:	2e315f70 	mrccs	15, 1, r5, cr1, cr0, {3}
    4e5c:	50760063 	rsbspl	r0, r6, r3, rrx
    4e60:	4974726f 	ldmdbmi	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    4e64:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    4e68:	73696c61 	cmnvc	r9, #24832	; 0x6100
    4e6c:	6f6c4265 	svcvs	0x006c4265
    4e70:	00736b63 	rsbseq	r6, r3, r3, ror #22
    4e74:	726f5078 	rsbvc	r5, pc, #120	; 0x78
    4e78:	74654774 	strbtvc	r4, [r5], #-1908	; 0xfffff88c
    4e7c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    4e80:	70616548 	rsbvc	r6, r1, r8, asr #10
    4e84:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    4e88:	52767000 	rsbspl	r7, r6, #0
    4e8c:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
    4e90:	4e78006e 	cdpmi	0, 7, cr0, cr8, cr14, {3}
    4e94:	46747865 	ldrbtmi	r7, [r4], -r5, ror #16
    4e98:	42656572 	rsbmi	r6, r5, #478150656	; 0x1c800000
    4e9c:	00657479 	rsbeq	r7, r5, r9, ror r4
    4ea0:	41637570 	smcmi	14160	; 0x3750
    4ea4:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
    4ea8:	65486465 	strbvs	r6, [r8, #-1125]	; 0xfffffb9b
    4eac:	70007061 	andvc	r7, r0, r1, rrx
    4eb0:	726f5076 	rsbvc	r5, pc, #118	; 0x76
    4eb4:	6c614d74 	stclvs	13, cr4, [r1], #-464	; 0xfffffe30
    4eb8:	00636f6c 	rsbeq	r6, r3, ip, ror #30
    4ebc:	65486375 	strbvs	r6, [r8, #-885]	; 0xfffffc8b
    4ec0:	78007061 	stmdavc	r0, {r0, r5, r6, ip, sp, lr}
    4ec4:	746e6157 	strbtvc	r6, [lr], #-343	; 0xfffffea9
    4ec8:	69536465 	ldmdbvs	r3, {r0, r2, r5, r6, sl, sp, lr}^
    4ecc:	7600657a 			; <UNDEFINED> instruction: 0x7600657a
    4ed0:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    4ed4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    4ed8:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
    4edc:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    4ee0:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
    4ee4:	4e470072 	mcrmi	0, 2, r0, cr7, cr2, {3}
    4ee8:	31432055 	qdaddcc	r2, r5, r3
    4eec:	2e352031 	mrccs	0, 1, r2, cr5, cr1, {1}
    4ef0:	20312e34 	eorscs	r2, r1, r4, lsr lr
    4ef4:	36313032 			; <UNDEFINED> instruction: 0x36313032
    4ef8:	39313930 	ldmdbcc	r1!, {r4, r5, r8, fp, ip, sp}
    4efc:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
    4f00:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    4f04:	616d2d20 	cmnvs	sp, r0, lsr #26
    4f08:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
    4f0c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    4f10:	206d2d37 	rsbcs	r2, sp, r7, lsr sp
    4f14:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
    4f18:	20626d75 	rsbcs	r6, r2, r5, ror sp
    4f1c:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
    4f20:	613d6863 	teqvs	sp, r3, ror #16
    4f24:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    4f28:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
    4f2c:	4f2d2067 	svcmi	0x002d2067
    4f30:	662d2032 			; <UNDEFINED> instruction: 0x662d2032
    4f34:	622d6f6e 	eorvs	r6, sp, #440	; 0x1b8
    4f38:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    4f3c:	2f006e69 	svccs	0x00006e69
    4f40:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4f44:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    4f48:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4f4c:	7541582d 	strbvc	r5, [r1, #-2093]	; 0xfffff7d3
    4f50:	2f50317a 	svccs	0x0050317a
    4f54:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4f58:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    4f5c:	302e342e 	eorcc	r3, lr, lr, lsr #8
    4f60:	3130322e 	teqcc	r0, lr, lsr #4
    4f64:	32353036 	eorscc	r3, r5, #54	; 0x36
    4f68:	75622f37 	strbvc	r2, [r2, #-3895]!	; 0xfffff0c9
    4f6c:	5f646c69 	svcpl	0x00646c69
    4f70:	6f6e616e 	svcvs	0x006e616e
    4f74:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4f78:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4f7c:	61652d65 	cmnvs	r5, r5, ror #26
    4f80:	612f6962 			; <UNDEFINED> instruction: 0x612f6962
    4f84:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    4f88:	6e2f6d2d 	cdpvs	13, 2, cr6, cr15, cr13, {1}
    4f8c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4f90:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4f94:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    4f98:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    4f9c:	2e2e0067 	cdpcs	0, 2, cr0, cr14, cr7, {3}
    4fa0:	2f2e2e2f 	svccs	0x002e2e2f
    4fa4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4fa8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4fac:	2f2e2e2f 	svccs	0x002e2e2f
    4fb0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4fb4:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 4e18 <_Min_Stack_Size+0x4c18>
    4fb8:	2f636269 	svccs	0x00636269
    4fbc:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4fc0:	6d2f676e 	stcvs	7, cr6, [pc, #-440]!	; 4e10 <_Min_Stack_Size+0x4c10>
    4fc4:	65736d65 	ldrbvs	r6, [r3, #-3429]!	; 0xfffff29b
    4fc8:	00632e74 	rsbeq	r2, r3, r4, ror lr
    4fcc:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
    4fd0:	6d007465 	cfstrsvs	mvf7, [r0, #-404]	; 0xfffffe6c
    4fd4:	6f6c6c61 	svcvs	0x006c6c61
    4fd8:	725f0063 	subsvc	r0, pc, #99	; 0x63
    4fdc:	34646e61 	strbtcc	r6, [r4], #-3681	; 0xfffff19f
    4fe0:	655f0038 	ldrbvs	r0, [pc, #-56]	; 4fb0 <_Min_Stack_Size+0x4db0>
    4fe4:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
    4fe8:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    4fec:	63775f00 	cmnvs	r7, #0, 30
    4ff0:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!	; 4e30 <_Min_Stack_Size+0x4c30>
    4ff4:	74735f62 	ldrbtvc	r5, [r3], #-3938	; 0xfffff09e
    4ff8:	00657461 	rsbeq	r7, r5, r1, ror #8
    4ffc:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    5000:	5f6c616e 	svcpl	0x006c616e
    5004:	00667562 	rsbeq	r7, r6, r2, ror #10
    5008:	66626c5f 			; <UNDEFINED> instruction: 0x66626c5f
    500c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    5010:	626d5f00 	rsbvs	r5, sp, #0, 30
    5014:	776f7472 			; <UNDEFINED> instruction: 0x776f7472
    5018:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
    501c:	00657461 	rsbeq	r7, r5, r1, ror #8
    5020:	7463775f 	strbtvc	r7, [r3], #-1887	; 0xfffff8a1
    5024:	5f626d6f 	svcpl	0x00626d6f
    5028:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    502c:	5f5f0065 	svcpl	0x005f0065
    5030:	735f6d74 	cmpvc	pc, #116, 26	; 0x1d00
    5034:	5f006365 	svcpl	0x00006365
    5038:	66756275 			; <UNDEFINED> instruction: 0x66756275
    503c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 5044 <_Min_Stack_Size+0x4e44>
    5040:	6f685f6d 	svcvs	0x00685f6d
    5044:	5f007275 	svcpl	0x00007275
    5048:	0066735f 	rsbeq	r7, r6, pc, asr r3
    504c:	6f6f635f 	svcvs	0x006f635f
    5050:	0065696b 	rsbeq	r6, r5, fp, ror #18
    5054:	67735f5f 			; <UNDEFINED> instruction: 0x67735f5f
    5058:	0065756c 	rsbeq	r7, r5, ip, ror #10
    505c:	72706d5f 	rsbsvc	r6, r0, #6080	; 0x17c0
    5060:	5f006365 	svcpl	0x00006365
    5064:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    5068:	625f0073 	subsvs	r0, pc, #115	; 0x73
    506c:	69736b6c 	ldmdbvs	r3!, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
    5070:	5f00657a 	svcpl	0x0000657a
    5074:	62747663 	rsbsvs	r7, r4, #103809024	; 0x6300000
    5078:	5f006675 	svcpl	0x00006675
    507c:	7273626d 	rsbsvc	r6, r3, #-805306362	; 0xd0000006
    5080:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
    5084:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
    5088:	00657461 	rsbeq	r7, r5, r1, ror #8
    508c:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
    5090:	5f6e656c 	svcpl	0x006e656c
    5094:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    5098:	735f0065 	cmpvc	pc, #101	; 0x65
    509c:	006e6769 	rsbeq	r6, lr, r9, ror #14
    50a0:	6f6c665f 	svcvs	0x006c665f
    50a4:	745f6b63 	ldrbvc	r6, [pc], #-2915	; 50ac <_Min_Stack_Size+0x4eac>
    50a8:	69425f00 	stmdbvs	r2, {r8, r9, sl, fp, ip, lr}^
    50ac:	746e6967 	strbtvc	r6, [lr], #-2407	; 0xfffff699
    50b0:	61675f00 	cmnvs	r7, r0, lsl #30
    50b4:	5f616d6d 	svcpl	0x00616d6d
    50b8:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    50bc:	006d6167 	rsbeq	r6, sp, r7, ror #2
    50c0:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
    50c4:	5f746c75 	svcpl	0x00746c75
    50c8:	5f5f006b 	svcpl	0x005f006b
    50cc:	5f006d74 	svcpl	0x00006d74
    50d0:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    50d4:	775f0062 	ldrbvc	r0, [pc, -r2, rrx]
    50d8:	74727363 	ldrbtvc	r7, [r2], #-867	; 0xfffffc9d
    50dc:	73626d6f 	cmnvc	r2, #7104	; 0x1bc0
    50e0:	6174735f 	cmnvs	r4, pc, asr r3
    50e4:	5f006574 	svcpl	0x00006574
    50e8:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    50ec:	5f746e65 	svcpl	0x00746e65
    50f0:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0xfffffe9d
    50f4:	79726f67 	ldmdbvc	r2!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}^
    50f8:	76635f00 	strbtvc	r5, [r3], -r0, lsl #30
    50fc:	6e656c74 	mcrvs	12, 3, r6, cr5, cr4, {3}
    5100:	34725f00 	ldrbtcc	r5, [r2], #-3840	; 0xfffff100
    5104:	6e5f0038 	mrcvs	0, 2, r0, cr15, cr8, {1}
    5108:	73626f69 	cmnvc	r2, #420	; 0x1a4
    510c:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    5110:	2f646c69 	svccs	0x00646c69
    5114:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5118:	582d6269 	stmdapl	sp!, {r0, r3, r5, r6, r9, sp, lr}
    511c:	317a7541 	cmncc	sl, r1, asr #10
    5120:	656e2f50 	strbvs	r2, [lr, #-3920]!	; 0xfffff0b0
    5124:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5128:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    512c:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    5130:	30363130 	eorscc	r3, r6, r0, lsr r1
    5134:	2f373235 	svccs	0x00373235
    5138:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    513c:	616e5f64 	cmnvs	lr, r4, ror #30
    5140:	612f6f6e 			; <UNDEFINED> instruction: 0x612f6f6e
    5144:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5148:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    514c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5150:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    5154:	6d2d3776 	stcvs	7, cr3, [sp, #-472]!	; 0xfffffe28
    5158:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    515c:	2f62696c 	svccs	0x0062696c
    5160:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5164:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    5168:	0062696c 	rsbeq	r6, r2, ip, ror #18
    516c:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
    5170:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    5174:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
    5178:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
    517c:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
    5180:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
    5184:	77006863 	strvc	r6, [r0, -r3, ror #16]
    5188:	5f746e69 	svcpl	0x00746e69
    518c:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
    5190:	7367616c 	cmnvc	r7, #108, 2
    5194:	5f5f0032 	svcpl	0x005f0032
    5198:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    519c:	00726165 	rsbseq	r6, r2, r5, ror #2
    51a0:	73696d5f 	cmnvc	r9, #6080	; 0x17c0
    51a4:	5f5f0063 	svcpl	0x005f0063
    51a8:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 4fe0 <_Min_Stack_Size+0x4de0>
    51ac:	5f006e6f 	svcpl	0x00006e6f
    51b0:	6964735f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    51b4:	696e6964 	stmdbvs	lr!, {r2, r5, r6, r8, fp, sp, lr}^
    51b8:	6f5f0074 	svcvs	0x005f0074
    51bc:	745f6666 	ldrbvc	r6, [pc], #-1638	; 51c4 <_Min_Stack_Size+0x4fc4>
    51c0:	72665f00 	rsbvc	r5, r6, #0, 30
    51c4:	696c6565 	stmdbvs	ip!, {r0, r2, r5, r6, r8, sl, sp, lr}^
    51c8:	5f007473 	svcpl	0x00007473
    51cc:	4b434f4c 	blmi	10d8f04 <_Min_Stack_Size+0x10d8d04>
    51d0:	4345525f 	movtmi	r5, #21087	; 0x525f
    51d4:	49535255 	ldmdbmi	r3, {r0, r2, r4, r6, r9, ip, lr}^
    51d8:	545f4556 	ldrbpl	r4, [pc], #-1366	; 51e0 <_Min_Stack_Size+0x4fe0>
    51dc:	61727300 	cmnvs	r2, r0, lsl #6
    51e0:	2e00646e 	cdpcs	4, 0, cr6, cr0, cr14, {3}
    51e4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    51e8:	2f2e2e2f 	svccs	0x002e2e2f
    51ec:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    51f0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    51f4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    51f8:	2f62696c 	svccs	0x0062696c
    51fc:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5200:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    5204:	2f62696c 	svccs	0x0062696c
    5208:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
    520c:	5f00632e 	svcpl	0x0000632e
    5210:	73626f69 	cmnvc	r2, #420	; 0x1a4
    5214:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 521c <_Min_Stack_Size+0x501c>
    5218:	64795f6d 	ldrbtvs	r5, [r9], #-3949	; 0xfffff093
    521c:	5f007961 	svcpl	0x00007961
    5220:	7562735f 	strbvc	r7, [r2, #-863]!	; 0xfffffca1
    5224:	5f5f0066 	svcpl	0x005f0066
    5228:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
    522c:	626d5f00 	rsbvs	r5, sp, #0, 30
    5230:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    5234:	00745f65 	rsbseq	r5, r4, r5, ror #30
    5238:	46735f5f 	uhsaxmi	r5, r3, pc	; <UNPREDICTABLE>
    523c:	00454c49 	subeq	r4, r5, r9, asr #24
    5240:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
    5244:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    5248:	61725f00 	cmnvs	r2, r0, lsl #30
    524c:	6e5f646e 	cdpvs	4, 5, cr6, cr15, cr14, {3}
    5250:	00747865 	rsbseq	r7, r4, r5, ror #16
    5254:	6c626d5f 	stclvs	13, cr6, [r2], #-380	; 0xfffffe84
    5258:	735f6e65 	cmpvc	pc, #1616	; 0x650
    525c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    5260:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
    5264:	635f0063 	cmpvs	pc, #99	; 0x63
    5268:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    526c:	6c5f746e 	cfldrdvs	mvd7, [pc], {110}	; 0x6e
    5270:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    5274:	5f5f0065 	svcpl	0x005f0065
    5278:	61656c63 	cmnvs	r5, r3, ror #24
    527c:	0070756e 	rsbseq	r7, r0, lr, ror #10
    5280:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    5284:	00736477 	rsbseq	r6, r3, r7, ror r4
    5288:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
    528c:	5f5f0064 	svcpl	0x005f0064
    5290:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    5294:	5f5f0074 	svcpl	0x005f0074
    5298:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
    529c:	735f0065 	cmpvc	pc, #101	; 0x65
    52a0:	006b6565 	rsbeq	r6, fp, r5, ror #10
    52a4:	6f70665f 	svcvs	0x0070665f
    52a8:	00745f73 	rsbseq	r5, r4, r3, ror pc
    52ac:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
    52b0:	5f006f6e 	svcpl	0x00006f6e
    52b4:	5f6d745f 	svcpl	0x006d745f
    52b8:	006e696d 	rsbeq	r6, lr, sp, ror #18
    52bc:	6c756d5f 	ldclvs	13, cr6, [r5], #-380	; 0xfffffe84
    52c0:	735f0074 	cmpvc	pc, #116	; 0x74
    52c4:	6f747274 	svcvs	0x00747274
    52c8:	616c5f6b 	cmnvs	ip, fp, ror #30
    52cc:	5f007473 	svcpl	0x00007473
    52d0:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
    52d4:	6565725f 	strbvs	r7, [r5, #-607]!	; 0xfffffda1
    52d8:	5f00746e 	svcpl	0x0000746e
    52dc:	00646461 	rsbeq	r6, r4, r1, ror #8
    52e0:	4c555f5f 	mrrcmi	15, 5, r5, r5, cr15	; <UNPREDICTABLE>
    52e4:	00676e6f 	rsbeq	r6, r7, pc, ror #28
    52e8:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    52ec:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    52f0:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
    52f4:	69665f00 	stmdbvs	r6!, {r8, r9, sl, fp, ip, lr}^
    52f8:	5f00656c 	svcpl	0x0000656c
    52fc:	00736477 	rsbseq	r6, r3, r7, ror r4
    5300:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    5304:	6164775f 	cmnvs	r4, pc, asr r7
    5308:	6c5f0079 	mrrcvs	0, 7, r0, pc, cr9	; <UNPREDICTABLE>
    530c:	5f613436 	svcpl	0x00613436
    5310:	00667562 	rsbeq	r7, r6, r2, ror #10
    5314:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    5318:	6e75665f 	mrcvs	6, 3, r6, cr5, cr15, {2}
    531c:	6e5f0063 	cdpvs	0, 5, cr0, cr15, cr3, {3}
    5320:	00667562 	rsbeq	r7, r6, r2, ror #10
    5324:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    5328:	6473695f 	ldrbtvs	r6, [r3], #-2399	; 0xfffff6a1
    532c:	5f007473 	svcpl	0x00007473
    5330:	61636f6c 	cmnvs	r3, ip, ror #30
    5334:	6d69746c 	cfstrdvs	mvd7, [r9, #-432]!	; 0xfffffe50
    5338:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
    533c:	635f0066 	cmpvs	pc, #102	; 0x66
    5340:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
    5344:	626d5f00 	rsbvs	r5, sp, #0, 30
    5348:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
    534c:	6174735f 	cmnvs	r4, pc, asr r3
    5350:	5f006574 	svcpl	0x00006574
    5354:	00733570 	rsbseq	r3, r3, r0, ror r5
    5358:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    535c:	61646d5f 	cmnvs	r4, pc, asr sp
    5360:	735f0079 	cmpvc	pc, #121	; 0x79
    5364:	6972706e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, sp, lr}^
    5368:	5f66746e 	svcpl	0x0066746e
    536c:	622f0072 	eorvs	r0, pc, #114	; 0x72
    5370:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    5374:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5378:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    537c:	7a754158 	bvc	1d558e4 <_Min_Stack_Size+0x1d556e4>
    5380:	6e2f5031 	mcrvs	0, 1, r5, cr15, cr1, {1}
    5384:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5388:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    538c:	2e302e34 	mrccs	14, 1, r2, cr0, cr4, {1}
    5390:	36313032 			; <UNDEFINED> instruction: 0x36313032
    5394:	37323530 			; <UNDEFINED> instruction: 0x37323530
    5398:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    539c:	6e5f646c 	cdpvs	4, 5, cr6, cr15, cr12, {3}
    53a0:	2f6f6e61 	svccs	0x006f6e61
    53a4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    53a8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    53ac:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    53b0:	72612f69 	rsbvc	r2, r1, #420	; 0x1a4
    53b4:	2d37766d 	ldccs	6, cr7, [r7, #-436]!	; 0xfffffe4c
    53b8:	656e2f6d 	strbvs	r2, [lr, #-3949]!	; 0xfffff093
    53bc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    53c0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    53c4:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    53c8:	006f6964 	rsbeq	r6, pc, r4, ror #18
    53cc:	61765f5f 	cmnvs	r6, pc, asr pc
    53d0:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
    53d4:	2e2e0074 	mcrcs	0, 1, r0, cr14, cr4, {3}
    53d8:	2f2e2e2f 	svccs	0x002e2e2f
    53dc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    53e0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    53e4:	2f2e2e2f 	svccs	0x002e2e2f
    53e8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    53ec:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5250 <_Min_Stack_Size+0x5050>
    53f0:	2f636269 	svccs	0x00636269
    53f4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    53f8:	6e732f6f 	cdpvs	15, 7, cr2, cr3, cr15, {3}
    53fc:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    5400:	632e6674 			; <UNDEFINED> instruction: 0x632e6674
    5404:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
    5408:	5f63756e 	svcpl	0x0063756e
    540c:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
    5410:	00747369 	rsbseq	r7, r4, r9, ror #6
    5414:	70615f5f 	rsbvc	r5, r1, pc, asr pc
    5418:	706e7300 	rsbvc	r7, lr, r0, lsl #6
    541c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    5420:	735f0066 	cmpvc	pc, #102	; 0x66
    5424:	72706676 	rsbsvc	r6, r0, #123731968	; 0x7600000
    5428:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    542c:	7300725f 	movwvc	r7, #607	; 0x25f
    5430:	68637274 	stmdavs	r3!, {r2, r4, r5, r6, r9, ip, sp, lr}^
    5434:	2e2e0072 	mcrcs	0, 1, r0, cr14, cr2, {3}
    5438:	2f2e2e2f 	svccs	0x002e2e2f
    543c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5440:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5444:	2f2e2e2f 	svccs	0x002e2e2f
    5448:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    544c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 52b0 <_Min_Stack_Size+0x50b0>
    5450:	2f636269 	svccs	0x00636269
    5454:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    5458:	732f676e 			; <UNDEFINED> instruction: 0x732f676e
    545c:	68637274 	stmdavs	r3!, {r2, r4, r5, r6, r9, ip, sp, lr}^
    5460:	00632e72 	rsbeq	r2, r3, r2, ror lr
    5464:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
    5468:	2e007970 			; <UNDEFINED> instruction: 0x2e007970
    546c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5470:	2f2e2e2f 	svccs	0x002e2e2f
    5474:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5478:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    547c:	2f2e2e2f 	svccs	0x002e2e2f
    5480:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5484:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 52e8 <_Min_Stack_Size+0x50e8>
    5488:	2f636269 	svccs	0x00636269
    548c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5490:	2f656e69 	svccs	0x00656e69
    5494:	2f6d7261 	svccs	0x006d7261
    5498:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
    549c:	632e7970 			; <UNDEFINED> instruction: 0x632e7970
    54a0:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    54a4:	2f646c69 	svccs	0x00646c69
    54a8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    54ac:	582d6269 	stmdapl	sp!, {r0, r3, r5, r6, r9, sp, lr}
    54b0:	317a7541 	cmncc	sl, r1, asr #10
    54b4:	656e2f50 	strbvs	r2, [lr, #-3920]!	; 0xfffff0b0
    54b8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    54bc:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    54c0:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    54c4:	30363130 	eorscc	r3, r6, r0, lsr r1
    54c8:	2f373235 	svccs	0x00373235
    54cc:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    54d0:	616e5f64 	cmnvs	lr, r4, ror #30
    54d4:	612f6f6e 			; <UNDEFINED> instruction: 0x612f6f6e
    54d8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    54dc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    54e0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    54e4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    54e8:	6d2d3776 	stcvs	7, cr3, [sp, #-472]!	; 0xfffffe28
    54ec:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    54f0:	2f62696c 	svccs	0x0062696c
    54f4:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    54f8:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    54fc:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    5500:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    5504:	2f2e2e00 	svccs	0x002e2e00
    5508:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    550c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5510:	2f2e2e2f 	svccs	0x002e2e2f
    5514:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5518:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    551c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5520:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5524:	616d2f63 	cmnvs	sp, r3, ror #30
    5528:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    552c:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    5530:	74732f6d 	ldrbtvc	r2, [r3], #-3949	; 0xfffff093
    5534:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
    5538:	7574732d 	ldrbvc	r7, [r4, #-813]!	; 0xfffffcd3
    553c:	00632e62 	rsbeq	r2, r3, r2, ror #28
    5540:	6c727473 	cfldrdvs	mvd7, [r2], #-460	; 0xfffffe34
    5544:	2e006e65 	cdpcs	14, 0, cr6, cr0, cr5, {3}
    5548:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    554c:	2f2e2e2f 	svccs	0x002e2e2f
    5550:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5554:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5558:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    555c:	2f62696c 	svccs	0x0062696c
    5560:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5564:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    5568:	2f676e69 	svccs	0x00676e69
    556c:	6e727473 	mrcvs	4, 3, r7, cr2, cr3, {3}
    5570:	2e706d63 	cdpcs	13, 7, cr6, cr0, cr3, {3}
    5574:	74730063 	ldrbtvc	r0, [r3], #-99	; 0xffffff9d
    5578:	6d636e72 	stclvs	14, cr6, [r3, #-456]!	; 0xfffffe38
    557c:	72730070 	rsbsvc	r0, r3, #112	; 0x70
    5580:	2e003063 	cdpcs	0, 0, cr3, cr0, cr3, {3}
    5584:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5588:	2f2e2e2f 	svccs	0x002e2e2f
    558c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5590:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5594:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5598:	2f62696c 	svccs	0x0062696c
    559c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    55a0:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    55a4:	2f676e69 	svccs	0x00676e69
    55a8:	6e727473 	mrcvs	4, 3, r7, cr2, cr3, {3}
    55ac:	2e797063 	cdpcs	0, 7, cr7, cr9, cr3, {3}
    55b0:	73640063 	cmnvc	r4, #99	; 0x63
    55b4:	73003074 	movwvc	r3, #116	; 0x74
    55b8:	636e7274 	cmnvs	lr, #116, 4	; 0x40000007
    55bc:	61007970 	tstvs	r0, r0, ror r9
    55c0:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
    55c4:	645f6465 	ldrbvs	r6, [pc], #-1125	; 55cc <_Min_Stack_Size+0x53cc>
    55c8:	61007473 	tstvs	r0, r3, ror r4
    55cc:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
    55d0:	735f6465 	cmpvc	pc, #1694498816	; 0x65000000
    55d4:	5f006372 	svcpl	0x00006372
    55d8:	4946735f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    55dc:	665f454c 	ldrbvs	r4, [pc], -ip, asr #10
    55e0:	00656b61 	rsbeq	r6, r5, r1, ror #22
    55e4:	66735f5f 	uhsaxvs	r5, r3, pc	; <UNPREDICTABLE>
    55e8:	6b61665f 	blvs	185ef6c <_Min_Stack_Size+0x185ed6c>
    55ec:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
    55f0:	006e6964 	rsbeq	r6, lr, r4, ror #18
    55f4:	66735f5f 	uhsaxvs	r5, r3, pc	; <UNPREDICTABLE>
    55f8:	6b61665f 	blvs	185ef7c <_Min_Stack_Size+0x185ed7c>
    55fc:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
    5600:	74756f64 	ldrbtvc	r6, [r5], #-3940	; 0xfffff09c
    5604:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    5608:	2f646c69 	svccs	0x00646c69
    560c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5610:	582d6269 	stmdapl	sp!, {r0, r3, r5, r6, r9, sp, lr}
    5614:	317a7541 	cmncc	sl, r1, asr #10
    5618:	656e2f50 	strbvs	r2, [lr, #-3920]!	; 0xfffff0b0
    561c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5620:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    5624:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    5628:	30363130 	eorscc	r3, r6, r0, lsr r1
    562c:	2f373235 	svccs	0x00373235
    5630:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5634:	616e5f64 	cmnvs	lr, r4, ror #30
    5638:	612f6f6e 			; <UNDEFINED> instruction: 0x612f6f6e
    563c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5640:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5644:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5648:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    564c:	6d2d3776 	stcvs	7, cr3, [sp, #-472]!	; 0xfffffe28
    5650:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5654:	2f62696c 	svccs	0x0062696c
    5658:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    565c:	6565722f 	strbvs	r7, [r5, #-559]!	; 0xfffffdd1
    5660:	6900746e 	stmdbvs	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    5664:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    5668:	61645f65 	cmnvs	r4, r5, ror #30
    566c:	2e006174 	mcrcs	1, 0, r6, cr0, cr4, {3}
    5670:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5674:	2f2e2e2f 	svccs	0x002e2e2f
    5678:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    567c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5680:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5684:	2f62696c 	svccs	0x0062696c
    5688:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    568c:	6565722f 	strbvs	r7, [r5, #-559]!	; 0xfffffdd1
    5690:	692f746e 	stmdbvs	pc!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}	; <UNPREDICTABLE>
    5694:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    5698:	00632e65 	rsbeq	r2, r3, r5, ror #28
    569c:	6f6c675f 	svcvs	0x006c675f
    56a0:	5f6c6162 	svcpl	0x006c6162
    56a4:	75706d69 	ldrbvc	r6, [r0, #-3433]!	; 0xfffff297
    56a8:	705f6572 	subsvc	r6, pc, r2, ror r5	; <UNPREDICTABLE>
    56ac:	5f007274 	svcpl	0x00007274
    56b0:	5f66735f 	svcpl	0x0066735f
    56b4:	656b6166 	strbvs	r6, [fp, #-358]!	; 0xfffffe9a
    56b8:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    56bc:	00727265 	rsbseq	r7, r2, r5, ror #4
    56c0:	72747061 	rsbsvc	r7, r4, #97	; 0x61
    56c4:	2f2e2e00 	svccs	0x002e2e00
    56c8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    56cc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    56d0:	2f2e2e2f 	svccs	0x002e2e2f
    56d4:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    56d8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    56dc:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    56e0:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    56e4:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    56e8:	616d2f62 	cmnvs	sp, r2, ror #30
    56ec:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    56f0:	6e00632e 	cdpvs	3, 0, cr6, cr0, cr14, {1}
    56f4:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    56f8:	665f0073 			; <UNDEFINED> instruction: 0x665f0073
    56fc:	5f656572 	svcpl	0x00656572
    5700:	6d5f0072 	ldclvs	0, cr0, [pc, #-456]	; 5540 <_Min_Stack_Size+0x5340>
    5704:	6f6c6c61 	svcvs	0x006c6c61
    5708:	00725f63 	rsbseq	r5, r2, r3, ror #30
    570c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    5710:	735f636f 	cmpvc	pc, #-1140850687	; 0xbc000001
    5714:	5f657a69 	svcpl	0x00657a69
    5718:	2e2e0074 	mcrcs	0, 1, r0, cr14, cr4, {3}
    571c:	2f2e2e2f 	svccs	0x002e2e2f
    5720:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5724:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5728:	2f2e2e2f 	svccs	0x002e2e2f
    572c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5730:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5594 <_Min_Stack_Size+0x5394>
    5734:	2f636269 	svccs	0x00636269
    5738:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    573c:	6e2f6269 	cdpvs	2, 2, cr6, cr15, cr9, {3}
    5740:	2d6f6e61 	stclcs	14, cr6, [pc, #-388]!	; 55c4 <_Min_Stack_Size+0x53c4>
    5744:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    5748:	2e72636f 	cdpcs	3, 7, cr6, cr2, cr15, {3}
    574c:	5f700063 	svcpl	0x00700063
    5750:	665f6f74 	usub16vs	r6, pc, r4	; <UNPREDICTABLE>
    5754:	00656572 	rsbeq	r6, r5, r2, ror r5
    5758:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    575c:	6d00705f 	stcvs	0, cr7, [r0, #-380]	; 0xfffffe84
    5760:	6f6c6c61 	svcvs	0x006c6c61
    5764:	68635f63 	stmdavs	r3!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    5768:	006b6e75 	rsbeq	r6, fp, r5, ror lr
    576c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    5770:	74705f74 	ldrbtvc	r5, [r0], #-3956	; 0xfffff08c
    5774:	65670072 	strbvs	r0, [r7, #-114]!	; 0xffffff8e
    5778:	68635f74 	stmdavs	r3!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    577c:	5f6b6e75 	svcpl	0x006b6e75
    5780:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 55f0 <_Min_Stack_Size+0x53f0>
    5784:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
    5788:	6d5f5f00 	ldclvs	15, cr5, [pc, #-0]	; 5790 <_Min_Stack_Size+0x5590>
    578c:	6f6c6c61 	svcvs	0x006c6c61
    5790:	72665f63 	rsbvc	r5, r6, #396	; 0x18c
    5794:	6c5f6565 	cfldr64vs	mvdx6, [pc], {101}	; 0x65
    5798:	00747369 	rsbseq	r7, r4, r9, ror #6
    579c:	616d5f5f 	cmnvs	sp, pc, asr pc
    57a0:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    57a4:	7262735f 	rsbvc	r7, r2, #2080374785	; 0x7c000001
    57a8:	74735f6b 	ldrbtvc	r5, [r3], #-3947	; 0xfffff095
    57ac:	00747261 	rsbseq	r7, r4, r1, ror #4
    57b0:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    57b4:	00705f6e 	rsbseq	r5, r0, lr, ror #30
    57b8:	6b726273 	blvs	1c9e18c <_Min_Stack_Size+0x1c9df8c>
    57bc:	696c615f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
    57c0:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    57c4:	6c6c6100 	stfvse	f6, [ip], #-0
    57c8:	735f636f 	cmpvc	pc, #-1140850687	; 0xbc000001
    57cc:	00657a69 	rsbeq	r7, r5, r9, ror #20
    57d0:	7262735f 	rsbvc	r7, r2, #2080374785	; 0x7c000001
    57d4:	00725f6b 	rsbseq	r5, r2, fp, ror #30
    57d8:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    57dc:	74705f6e 	ldrbtvc	r5, [r0], #-3950	; 0xfffff092
    57e0:	4e470072 	mcrmi	0, 2, r0, cr7, cr2, {3}
    57e4:	31432055 	qdaddcc	r2, r5, r3
    57e8:	2e352031 	mrccs	0, 1, r2, cr5, cr1, {1}
    57ec:	20312e34 	eorscs	r2, r1, r4, lsr lr
    57f0:	36313032 			; <UNDEFINED> instruction: 0x36313032
    57f4:	39313930 	ldmdbcc	r1!, {r4, r5, r8, fp, ip, sp}
    57f8:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
    57fc:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    5800:	616d2d20 	cmnvs	sp, r0, lsr #26
    5804:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
    5808:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    580c:	206d2d37 	rsbcs	r2, sp, r7, lsr sp
    5810:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
    5814:	20626d75 	rsbcs	r6, r2, r5, ror sp
    5818:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
    581c:	613d6863 	teqvs	sp, r3, ror #16
    5820:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    5824:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
    5828:	4f2d2067 	svcmi	0x002d2067
    582c:	662d2032 			; <UNDEFINED> instruction: 0x662d2032
    5830:	622d6f6e 	eorvs	r6, sp, #440	; 0x1b8
    5834:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    5838:	2d206e69 	stccs	14, cr6, [r0, #-420]!	; 0xfffffe5c
    583c:	6f687366 	svcvs	0x00687366
    5840:	652d7472 	strvs	r7, [sp, #-1138]!	; 0xfffffb8e
    5844:	736d756e 	cmnvc	sp, #461373440	; 0x1b800000
    5848:	72705f00 	rsbsvc	r5, r0, #0, 30
    584c:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    5850:	6f6c665f 	svcvs	0x006c665f
    5854:	65007461 	strvs	r7, [r0, #-1121]	; 0xfffffb9f
    5858:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    585c:	616c6600 	cmnvs	ip, r0, lsl #12
    5860:	68635f67 	stmdavs	r3!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    5864:	00737261 	rsbseq	r7, r3, r1, ror #4
    5868:	7472705f 	ldrbtvc	r7, [r2], #-95	; 0xffffffa1
    586c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    5870:	00745f61 	rsbseq	r5, r4, r1, ror #30
    5874:	6d6d656d 	cfstr64vs	mvdx6, [sp, #-436]!	; 0xfffffe4c
    5878:	0065766f 	rsbeq	r7, r5, pc, ror #12
    587c:	756f645f 	strbvc	r6, [pc, #-1119]!	; 5425 <_Min_Stack_Size+0x5225>
    5880:	5f656c62 	svcpl	0x00656c62
    5884:	72756300 	rsbsvc	r6, r5, #0, 6
    5888:	00736f70 	rsbseq	r6, r3, r0, ror pc
    588c:	5f6f6975 	svcpl	0x006f6975
    5890:	69736572 	ldmdbvs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    5894:	2e2e0064 	cdpcs	0, 2, cr0, cr14, cr4, {3}
    5898:	2f2e2e2f 	svccs	0x002e2e2f
    589c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    58a0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    58a4:	2f2e2e2f 	svccs	0x002e2e2f
    58a8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    58ac:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5710 <_Min_Stack_Size+0x5510>
    58b0:	2f636269 	svccs	0x00636269
    58b4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    58b8:	616e2f6f 	cmnvs	lr, pc, ror #30
    58bc:	762d6f6e 	strtvc	r6, [sp], -lr, ror #30
    58c0:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    58c4:	2e66746e 	cdpcs	4, 6, cr7, cr6, cr14, {3}
    58c8:	5f5f0063 	svcpl	0x005f0063
    58cc:	766f6973 			; <UNDEFINED> instruction: 0x766f6973
    58d0:	75667000 	strbvc	r7, [r6, #-0]!
    58d4:	6600636e 	strvs	r6, [r0], -lr, ror #6
    58d8:	0030746d 	eorseq	r7, r0, sp, ror #8
    58dc:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
    58e0:	5f5f0068 	svcpl	0x005f0068
    58e4:	72707373 	rsbsvc	r7, r0, #-872415231	; 0xcc000001
    58e8:	5f746e69 	svcpl	0x00746e69
    58ec:	656d0072 	strbvs	r0, [sp, #-114]!	; 0xffffff8e
    58f0:	7268636d 	rsbvc	r6, r8, #-1275068415	; 0xb4000001
    58f4:	61656c00 	cmnvs	r5, r0, lsl #24
    58f8:	705f0064 	subsvc	r0, pc, r4, rrx
    58fc:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    5900:	00695f66 	rsbeq	r5, r9, r6, ror #30
    5904:	5f766f69 	svcpl	0x00766f69
    5908:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    590c:	6f697500 	svcvs	0x00697500
    5910:	766f695f 			; <UNDEFINED> instruction: 0x766f695f
    5914:	72657a00 	rsbvc	r7, r5, #0, 20
    5918:	6f69006f 	svcvs	0x0069006f
    591c:	656c5f76 	strbvs	r5, [ip, #-3958]!	; 0xfffff08a
    5920:	656e006e 	strbvs	r0, [lr, #-110]!	; 0xffffff92
    5924:	7a697377 	bvc	1a62708 <_Min_Stack_Size+0x1a62508>
    5928:	6f640065 	svcvs	0x00640065
    592c:	5f00656e 	svcpl	0x0000656e
    5930:	6975735f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    5934:	725f006f 	subsvc	r0, pc, #111	; 0x6f
    5938:	6c6c6165 	stfvse	f6, [ip], #-404	; 0xfffffe6c
    593c:	725f636f 	subsvc	r6, pc, #-1140850687	; 0xbc000001
    5940:	72706400 	rsbsvc	r6, r0, #0, 8
    5944:	70006365 	andvc	r6, r0, r5, ror #6
    5948:	645f7472 	ldrbvs	r7, [pc], #-1138	; 5950 <_Min_Stack_Size+0x5750>
    594c:	00617461 	rsbeq	r7, r1, r1, ror #8
    5950:	73707865 	cmnvc	r0, #6619136	; 0x650000
    5954:	5f007274 	svcpl	0x00007274
    5958:	7073735f 	rsbsvc	r7, r3, pc, asr r3
    595c:	5f737475 	svcpl	0x00737475
    5960:	6c620072 	stclvs	0, cr0, [r2], #-456	; 0xfffffe38
    5964:	006b6e61 	rsbeq	r6, fp, r1, ror #28
    5968:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    596c:	75007970 	strvc	r7, [r0, #-2416]	; 0xfffff690
    5970:	695f6f69 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    5974:	6e63766f 	cdpvs	6, 6, cr7, cr3, cr15, {3}
    5978:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
    597c:	695f706d 	ldmdbvs	pc, {r0, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    5980:	69647800 	stmdbvs	r4!, {fp, ip, sp, lr}^
    5984:	5f007367 	svcpl	0x00007367
    5988:	61757175 	cmnvs	r5, r5, ror r1
    598c:	2e2e0064 	cdpcs	0, 2, cr0, cr14, cr4, {3}
    5990:	2f2e2e2f 	svccs	0x002e2e2f
    5994:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5998:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    599c:	2f2e2e2f 	svccs	0x002e2e2f
    59a0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    59a4:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5808 <_Min_Stack_Size+0x5608>
    59a8:	2f636269 	svccs	0x00636269
    59ac:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    59b0:	616e2f6f 	cmnvs	lr, pc, ror #30
    59b4:	762d6f6e 	strtvc	r6, [sp], -lr, ror #30
    59b8:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    59bc:	5f66746e 	svcpl	0x0066746e
    59c0:	00632e69 	rsbeq	r2, r3, r9, ror #28
    59c4:	5f6e6f6e 	svcpl	0x006e6f6e
    59c8:	626d756e 	rsbvs	r7, sp, #461373440	; 0x1b800000
    59cc:	6e5f7265 	cdpvs	2, 5, cr7, cr15, cr5, {3}
    59d0:	6769736f 	strbvs	r7, [r9, -pc, ror #6]!
    59d4:	6572006e 	ldrbvs	r0, [r2, #-110]!	; 0xffffff92
    59d8:	7a736c61 	bvc	1ce0b64 <_Min_Stack_Size+0x1ce0964>
    59dc:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
    59e0:	00726562 	rsbseq	r6, r2, r2, ror #10
    59e4:	68735f75 	ldmdavs	r3!, {r0, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    59e8:	0074726f 	rsbseq	r7, r4, pc, ror #4
    59ec:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
    59f0:	5f750061 	svcpl	0x00750061
    59f4:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
    59f8:	72705f00 	rsbsvc	r5, r0, #0, 30
    59fc:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    5a00:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 588c <_Min_Stack_Size+0x568c>
    5a04:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
    5a08:	72636e69 	rsbvc	r6, r3, #1680	; 0x690
    5a0c:	72747000 	rsbsvc	r7, r4, #0
    5a10:	66666964 	strbtvs	r6, [r6], -r4, ror #18
    5a14:	2e00745f 	cfmvsrcs	mvf0, r7
    5a18:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5a1c:	2f2e2e2f 	svccs	0x002e2e2f
    5a20:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5a24:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5a28:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5a2c:	2f62696c 	svccs	0x0062696c
    5a30:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5a34:	6565722f 	strbvs	r7, [r5, #-559]!	; 0xfffffdd1
    5a38:	732f746e 			; <UNDEFINED> instruction: 0x732f746e
    5a3c:	726b7262 	rsbvc	r7, fp, #536870918	; 0x20000006
    5a40:	5f00632e 	svcpl	0x0000632e
    5a44:	6b726273 	blvs	1c9e418 <_Min_Stack_Size+0x1c9e218>
    5a48:	72736100 	rsbsvc	r6, r3, #0, 2
    5a4c:	2e2e0063 	cdpcs	0, 2, cr0, cr14, cr3, {3}
    5a50:	2f2e2e2f 	svccs	0x002e2e2f
    5a54:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5a58:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5a5c:	2f2e2e2f 	svccs	0x002e2e2f
    5a60:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    5a64:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5a68:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5a6c:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 58ec <_Min_Stack_Size+0x56ec>
    5a70:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    5a74:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    5a78:	6d2f6d72 	stcvs	13, cr6, [pc, #-456]!	; 58b8 <_Min_Stack_Size+0x56b8>
    5a7c:	68636d65 	stmdavs	r3!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    5a80:	74732d72 	ldrbtvc	r2, [r3], #-3442	; 0xfffff28e
    5a84:	632e6275 			; <UNDEFINED> instruction: 0x632e6275
    5a88:	63727300 	cmnvs	r2, #0, 6
    5a8c:	696f765f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    5a90:	2e2e0064 	cdpcs	0, 2, cr0, cr14, cr4, {3}
    5a94:	2f2e2e2f 	svccs	0x002e2e2f
    5a98:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5a9c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5aa0:	2f2e2e2f 	svccs	0x002e2e2f
    5aa4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5aa8:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 590c <_Min_Stack_Size+0x570c>
    5aac:	2f636269 	svccs	0x00636269
    5ab0:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    5ab4:	6d2f676e 	stcvs	7, cr6, [pc, #-440]!	; 5904 <_Min_Stack_Size+0x5704>
    5ab8:	6f6d6d65 	svcvs	0x006d6d65
    5abc:	632e6576 			; <UNDEFINED> instruction: 0x632e6576
    5ac0:	74736400 	ldrbtvc	r6, [r3], #-1024	; 0xfffffc00
    5ac4:	696f765f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    5ac8:	5f700064 	svcpl	0x00700064
    5acc:	725f6f74 	subsvc	r6, pc, #116, 30	; 0x1d0
    5ad0:	6c6c6165 	stfvse	f6, [ip], #-404	; 0xfffffe6c
    5ad4:	5f00636f 	svcpl	0x0000636f
    5ad8:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    5adc:	755f636f 	ldrbvc	r6, [pc, #-879]	; 5775 <_Min_Stack_Size+0x5575>
    5ae0:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    5ae4:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    5ae8:	725f657a 	subsvc	r6, pc, #511705088	; 0x1e800000
    5aec:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
    5af0:	69616c63 	stmdbvs	r1!, {r0, r1, r5, r6, sl, fp, sp, lr}^
    5af4:	65725f6d 	ldrbvs	r5, [r2, #-3949]!	; 0xfffff093
    5af8:	00746e65 	rsbseq	r6, r4, r5, ror #28
    5afc:	73696874 	cmnvc	r9, #116, 16	; 0x740000
    5b00:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    5b04:	61656c63 	cmnvs	r5, r3, ror #24
    5b08:	5f70756e 	svcpl	0x0070756e
    5b0c:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xfffff399
    5b10:	2f2e2e00 	svccs	0x002e2e00
    5b14:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5b18:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5b1c:	2f2e2e2f 	svccs	0x002e2e2f
    5b20:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    5b24:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5b28:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5b2c:	722f6362 	eorvc	r6, pc, #-2013265919	; 0x88000001
    5b30:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    5b34:	6565722f 	strbvs	r7, [r5, #-559]!	; 0xfffffdd1
    5b38:	632e746e 			; <UNDEFINED> instruction: 0x632e746e
    5b3c:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
    5b40:	656e6f74 	strbvs	r6, [lr, #-3956]!	; 0xfffff08c
    5b44:	7a697300 	bvc	1a6274c <_Min_Stack_Size+0x1a6254c>
    5b48:	726f5f65 	rsbvc	r5, pc, #404	; 0x194
    5b4c:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
    5b50:	00746573 	rsbseq	r6, r4, r3, ror r5
    5b54:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5b58:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    5b5c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5b60:	41582d62 	cmpmi	r8, r2, ror #26
    5b64:	50317a75 	eorspl	r7, r1, r5, ror sl
    5b68:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5b6c:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    5b70:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    5b74:	30322e30 	eorscc	r2, r2, r0, lsr lr
    5b78:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    5b7c:	622f3732 	eorvs	r3, pc, #13107200	; 0xc80000
    5b80:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    5b84:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    5b88:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5b8c:	61652d65 	cmnvs	r5, r5, ror #26
    5b90:	612f6962 			; <UNDEFINED> instruction: 0x612f6962
    5b94:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    5b98:	6c2f6d2d 	stcvs	13, cr6, [pc], #-180	; 5aec <_Min_Stack_Size+0x58ec>
    5b9c:	6c676269 	sfmvs	f6, 2, [r7], #-420	; 0xfffffe5c
    5ba0:	2f73736f 	svccs	0x0073736f
    5ba4:	6e62696c 	vnmulvs.f16	s13, s4, s25	; <UNPREDICTABLE>
    5ba8:	7379736f 	cmnvc	r9, #-1140850687	; 0xbc000001
    5bac:	2f2e2e00 	svccs	0x002e2e00
    5bb0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5bb4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5bb8:	2f2e2e2f 	svccs	0x002e2e2f
    5bbc:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    5bc0:	73736f6c 	cmnvc	r3, #108, 30	; 0x1b0
    5bc4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5bc8:	79736f6e 	ldmdbvc	r3!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    5bcc:	62732f73 	rsbsvs	r2, r3, #460	; 0x1cc
    5bd0:	632e6b72 			; <UNDEFINED> instruction: 0x632e6b72
    5bd4:	65727000 	ldrbvs	r7, [r2, #-0]!
    5bd8:	65685f76 	strbvs	r5, [r8, #-3958]!	; 0xfffff08a
    5bdc:	655f7061 	ldrbvs	r7, [pc, #-97]	; 5b83 <_Min_Stack_Size+0x5983>
    5be0:	4700646e 	strmi	r6, [r0, -lr, ror #8]
    5be4:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
    5be8:	35203131 	strcc	r3, [r0, #-305]!	; 0xfffffecf
    5bec:	312e342e 			; <UNDEFINED> instruction: 0x312e342e
    5bf0:	31303220 	teqcc	r0, r0, lsr #4
    5bf4:	31393036 	teqcc	r9, r6, lsr r0
    5bf8:	6d2d2039 	stcvs	0, cr2, [sp, #-228]!	; 0xffffff1c
    5bfc:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    5c00:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
    5c04:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5c08:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    5c0c:	6d2d3776 	stcvs	7, cr3, [sp, #-472]!	; 0xfffffe28
    5c10:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    5c14:	20324f2d 	eorscs	r4, r2, sp, lsr #30
    5c18:	20324f2d 	eorscs	r4, r2, sp, lsr #30
    5c1c:	00324f2d 	eorseq	r4, r2, sp, lsr #30

Disassembly of section .comment:

00000000 <.comment>:
{
   0:	3a434347 	bcc	10d0d24 <_Min_Stack_Size+0x10d0b24>
}
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	342e353a 	strtcc	r3, [lr], #-1338	; 0xfffffac6
   c:	732b312e 			; <UNDEFINED> instruction: 0x732b312e
  10:	34326e76 	ldrtcc	r6, [r2], #-3702	; 0xfffff18a
  14:	35353131 	ldrcc	r3, [r5, #-305]!	; 0xfffffecf
  18:	2029312d 	eorcs	r3, r9, sp, lsr #2
    bitstatus = SET;
  1c:	2e342e35 	mrccs	14, 1, r2, cr4, cr5, {1}
    bitstatus = RESET;
  20:	30322031 	eorscc	r2, r2, r1, lsr r0
  return bitstatus;
  24:	39303631 	ldmdbcc	r0!, {r0, r4, r5, r9, sl, ip, sp}
}
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
{
       0:	0000000c 	andeq	r0, r0, ip
}
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000018 	andeq	r0, r0, r8, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	080012e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip}
    bitstatus = SET;
      1c:	00000068 	andeq	r0, r0, r8, rrx
    bitstatus = RESET;
      20:	40080e41 	andmi	r0, r8, r1, asr #28
  return bitstatus;
      24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
}
      28:	070d4101 	streq	r4, [sp, -r1, lsl #2]
      2c:	00000024 	andeq	r0, r0, r4, lsr #32
	...
      38:	000000d8 	ldrdeq	r0, [r0], -r8
      3c:	40040e41 	andmi	r0, r4, r1, asr #28
      40:	0e410187 	dvfeqd	f0, f1, f7
      44:	070d4118 	smladeq	sp, r8, r1, r4
      48:	040e5c02 	streq	r5, [lr], #-3074	; 0xfffff3fe
      4c:	410d0d41 	tstmi	sp, r1, asr #26
      50:	000e40c7 	andeq	r4, lr, r7, asr #1
      54:	00000018 	andeq	r0, r0, r8, lsl r0
      58:	00000000 	andeq	r0, r0, r0
        Driver_OLED_Send_START(OLED_DATA);
      5c:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
        for(x=x0;x<x1;x++){ 
      60:	0000000c 	andeq	r0, r0, ip
            I2C_SendData(OLED_HARDWARE, BMP[j++]);
      64:	40080e41 	andmi	r0, r8, r1, asr #28
      68:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      6c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
      70:	00000024 	andeq	r0, r0, r4, lsr #32
      74:	00000000 	andeq	r0, r0, r0
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);    	
      78:	08001358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip}
      7c:	00000100 	andeq	r0, r0, r0, lsl #2
      80:	40040e41 	andmi	r0, r4, r1, asr #28
      84:	0e410187 	dvfeqd	f0, f1, f7
        for(x=x0;x<x1;x++){ 
      88:	070d4110 	smladeq	sp, r0, r1, r4
      8c:	040e7502 	streq	r7, [lr], #-1282	; 0xfffffafe
      90:	410d0d41 	tstmi	sp, r1, asr #26
      94:	000e40c7 	andeq	r4, lr, r7, asr #1
        _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
      98:	0000000c 	andeq	r0, r0, ip
      9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      a0:	7c020001 	stcvc	0, cr0, [r2], {1}
      a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	for(y=y0;y<y1;y++){
      a8:	00000024 	andeq	r0, r0, r4, lsr #32
      ac:	00000098 	muleq	r0, r8, r0
      b0:	08001458 	stmdaeq	r0, {r3, r4, r6, sl, ip}
}
      b4:	0000007c 	andeq	r0, r0, ip, ror r0
      b8:	40080e41 	andmi	r0, r8, r1, asr #28
      bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      c0:	100e4101 	andne	r4, lr, r1, lsl #2
      c4:	70070d41 	andvc	r0, r7, r1, asr #26
      c8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
      cc:	0000000d 	andeq	r0, r0, sp
      d0:	00000024 	andeq	r0, r0, r4, lsr #32
      d4:	00000098 	muleq	r0, r8, r0
      d8:	080014d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, ip}
      dc:	00000064 	andeq	r0, r0, r4, rrx
      e0:	40080e41 	andmi	r0, r8, r1, asr #28
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      e8:	180e4101 	stmdane	lr, {r0, r8, lr}
      ec:	66070d41 	strvs	r0, [r7], -r1, asr #26
      f0:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
				prvUnlockQueue( pxQueue );
      f4:	0000000d 	andeq	r0, r0, sp
      f8:	00000024 	andeq	r0, r0, r4, lsr #32
				if( xTaskResumeAll() == pdFALSE )
      fc:	00000098 	muleq	r0, r8, r0
     100:	08001538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip}
					portYIELD_WITHIN_API();
     104:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     108:	40080e41 	andmi	r0, r8, r1, asr #28
     10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     110:	180e4101 	stmdane	lr, {r0, r8, lr}
     114:	02070d41 	andeq	r0, r7, #4160	; 0x1040
				prvUnlockQueue( pxQueue );
     118:	41080e4b 	tstmi	r8, fp, asr #28
				( void ) xTaskResumeAll();
     11c:	00000d0d 	andeq	r0, r0, sp, lsl #26
     120:	00000024 	andeq	r0, r0, r4, lsr #32
			prvUnlockQueue( pxQueue );
     124:	00000098 	muleq	r0, r8, r0
			( void ) xTaskResumeAll();
     128:	080015e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip}
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     12c:	0000009c 	muleq	r0, ip, r0
     130:	40080e41 	andmi	r0, r8, r1, asr #28
     134:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     138:	180e4101 	stmdane	lr, {r0, r8, lr}
}
     13c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     140:	41080e41 	tstmi	r8, r1, asr #28
     144:	00000d0d 	andeq	r0, r0, sp, lsl #26
     148:	00000024 	andeq	r0, r0, r4, lsr #32
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     14c:	00000098 	muleq	r0, r8, r0
  SPIx->I2SCFGR = tmpreg;   
     150:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
     154:	00000088 	andeq	r0, r0, r8, lsl #1
}
     158:	40080e41 	andmi	r0, r8, r1, asr #28
     15c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     160:	100e4101 	andne	r4, lr, r1, lsl #2
     164:	78070d41 	stmdavc	r7, {r0, r6, r8, sl, fp}
         *(uint16_t*) arg = getSn_KPALVTR(sn);
     168:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     16c:	0000000d 	andeq	r0, r0, sp
     170:	00000028 	andeq	r0, r0, r8, lsr #32
     174:	00000098 	muleq	r0, r8, r0
     178:	0800170c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip}
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     17c:	000001ac 	andeq	r0, r0, ip, lsr #3
     180:	400c0e41 	andmi	r0, ip, r1, asr #28
     184:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     188:	018e4002 	orreq	r4, lr, r2
         *(uint8_t*) arg = getSn_SR(sn);
     18c:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     190:	c602070d 	strgt	r0, [r2], -sp, lsl #14
     194:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     198:	0000000d 	andeq	r0, r0, sp
     19c:	00000028 	andeq	r0, r0, r8, lsr #32
     1a0:	00000098 	muleq	r0, r8, r0
     1a4:	080018b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, ip}
         if(getSn_MR(sn) == Sn_MR_TCP)
     1a8:	00000084 	andeq	r0, r0, r4, lsl #1
     1ac:	400c0e41 	andmi	r0, ip, r1, asr #28
     1b0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     1b4:	018e4002 	orreq	r4, lr, r2
     1b8:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1bc:	7d20070c 	stcvc	7, cr0, [r0, #-48]!	; 0xffffffd0
     1c0:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     1c4:	0000000d 	andeq	r0, r0, sp
     1c8:	00000028 	andeq	r0, r0, r8, lsr #32
         break;
     1cc:	00000098 	muleq	r0, r8, r0
            *(uint16_t*)arg = sock_remained_size[sn];
     1d0:	00000000 	andeq	r0, r0, r0
     1d4:	000000c8 	andeq	r0, r0, r8, asr #1
     1d8:	400c0e41 	andmi	r0, ip, r1, asr #28
         CHECK_SOCKMODE(Sn_MR_TCP);
     1dc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     1e0:	018e4002 	orreq	r4, lr, r2
     1e4:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     1e8:	5902070d 	stmdbpl	r2, {r0, r2, r3, r8, r9, sl}
     1ec:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     1f0:	0000000d 	andeq	r0, r0, sp
     1f4:	0000000c 	andeq	r0, r0, ip
     1f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
         *(uint8_t*)arg = sock_pack_info[sn];
     1fc:	7c020001 	stcvc	0, cr0, [r2], {1}
     200:	000d0c0e 	andeq	r0, sp, lr, lsl #24
         break;
     204:	00000028 	andeq	r0, r0, r8, lsr #32
         return SOCKERR_SOCKOPT;
     208:	000001f4 	strdeq	r0, [r0], -r4
   return SOCK_OK;
     20c:	0800193c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip}
}
     210:	00000208 	andeq	r0, r0, r8, lsl #4
     214:	400c0e41 	andmi	r0, ip, r1, asr #28
     218:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     21c:	018e4002 	orreq	r4, lr, r2
     220:	41180e41 	tstmi	r8, r1, asr #28
     224:	f502070d 			; <UNDEFINED> instruction: 0xf502070d
     228:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     22c:	0000000d 	andeq	r0, r0, sp
     230:	00000024 	andeq	r0, r0, r4, lsr #32
     234:	000001f4 	strdeq	r0, [r0], -r4
     238:	08001b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip}
     23c:	000000b8 	strheq	r0, [r0], -r8
     240:	40080e41 	andmi	r0, r8, r1, asr #28
     244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     248:	100e4101 	andne	r4, lr, r1, lsl #2
     24c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     250:	41080e51 	tstmi	r8, r1, asr lr
	memset(packet, 0, sizeof(packet));
     254:	00000d0d 	andeq	r0, r0, sp, lsl #26
     258:	00000024 	andeq	r0, r0, r4, lsr #32
     25c:	000001f4 	strdeq	r0, [r0], -r4
	memcpy(packet, fixed_header, sizeof(fixed_header));
     260:	00000000 	andeq	r0, r0, r0
     264:	000000ca 	andeq	r0, r0, sl, asr #1
     268:	40080e41 	andmi	r0, r8, r1, asr #28
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     270:	100e4101 	andne	r4, lr, r1, lsl #2
     274:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     278:	41080e60 	tstmi	r8, r0, ror #28
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     27c:	00000d0d 	andeq	r0, r0, sp, lsl #26
     280:	00000024 	andeq	r0, r0, r4, lsr #32
     284:	000001f4 	strdeq	r0, [r0], -r4
     288:	08001bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip}
     28c:	0000016c 	andeq	r0, r0, ip, ror #2
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     290:	40080e41 	andmi	r0, r8, r1, asr #28
     294:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     298:	100e4101 	andne	r4, lr, r1, lsl #2
     29c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     2a0:	41080eaf 	smlatbmi	r8, pc, lr, r0	; <UNPREDICTABLE>
		return -1;
     2a4:	00000d0d 	andeq	r0, r0, sp, lsl #26
     2a8:	00000024 	andeq	r0, r0, r4, lsr #32
	return 1;
     2ac:	000001f4 	strdeq	r0, [r0], -r4
}
     2b0:	00000000 	andeq	r0, r0, r0
     2b4:	000000ec 	andeq	r0, r0, ip, ror #1
     2b8:	40080e41 	andmi	r0, r8, r1, asr #28
     2bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2c0:	100e4101 	andne	r4, lr, r1, lsl #2
     2c4:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     2c8:	41080e6d 	tstmi	r8, sp, ror #28
     2cc:	00000d0d 	andeq	r0, r0, sp, lsl #26
     2d0:	00000024 	andeq	r0, r0, r4, lsr #32
     2d4:	000001f4 	strdeq	r0, [r0], -r4
     2d8:	08001d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip}
     2dc:	000001f4 	strdeq	r0, [r0], -r4
     2e0:	40080e41 	andmi	r0, r8, r1, asr #28
     2e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2e8:	180e4101 	stmdane	lr, {r0, r8, lr}
     2ec:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     2f0:	41080ef0 	strdmi	r0, [r8, -r0]
     2f4:	00000d0d 	andeq	r0, r0, sp, lsl #26
     2f8:	00000028 	andeq	r0, r0, r8, lsr #32
     2fc:	000001f4 	strdeq	r0, [r0], -r4
     300:	08001f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip}
     304:	0000016c 	andeq	r0, r0, ip, ror #2
     308:	400c0e41 	andmi	r0, ip, r1, asr #28
     30c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     310:	018e4002 	orreq	r4, lr, r2
     314:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     318:	ae02070d 	cdpge	7, 0, cr0, cr2, cr13, {0}
     31c:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     320:	0000000d 	andeq	r0, r0, sp
     324:	00000024 	andeq	r0, r0, r4, lsr #32
     328:	000001f4 	strdeq	r0, [r0], -r4
     32c:	080020c8 	stmdaeq	r0, {r3, r6, r7, sp}
     330:	00000208 	andeq	r0, r0, r8, lsl #4
     334:	40080e41 	andmi	r0, r8, r1, asr #28
     338:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     33c:	200e4101 	andcs	r4, lr, r1, lsl #2
     340:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     344:	41080efd 	strdmi	r0, [r8, -sp]
     348:	00000d0d 	andeq	r0, r0, sp, lsl #26
     34c:	00000024 	andeq	r0, r0, r4, lsr #32
     350:	000001f4 	strdeq	r0, [r0], -r4
     354:	080022d0 	stmdaeq	r0, {r4, r6, r7, r9, sp}
     358:	000002fc 	strdeq	r0, [r0], -ip
     35c:	40080e41 	andmi	r0, r8, r1, asr #28
     360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     364:	280e4101 	stmdacs	lr, {r0, r8, lr}
     368:	03070d41 	movweq	r0, #32065	; 0x7d41
     36c:	080e0173 	stmdaeq	lr, {r0, r1, r4, r5, r6, r8}
     370:	000d0d41 	andeq	r0, sp, r1, asr #26
     374:	00000024 	andeq	r0, r0, r4, lsr #32
     378:	000001f4 	strdeq	r0, [r0], -r4
     37c:	080025cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, sp}
     380:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     384:	40080e41 	andmi	r0, r8, r1, asr #28
     388:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     38c:	180e4101 	stmdane	lr, {r0, r8, lr}
     390:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     394:	41080ed1 	ldrdmi	r0, [r8, -r1]
     398:	00000d0d 	andeq	r0, r0, sp, lsl #26
     39c:	00000024 	andeq	r0, r0, r4, lsr #32
     3a0:	000001f4 	strdeq	r0, [r0], -r4
     3a4:	00000000 	andeq	r0, r0, r0
     3a8:	00000204 	andeq	r0, r0, r4, lsl #4
     3ac:	40080e41 	andmi	r0, r8, r1, asr #28
     3b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3b4:	180e4101 	stmdane	lr, {r0, r8, lr}
     3b8:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     3bc:	41080efd 	strdmi	r0, [r8, -sp]
     3c0:	00000d0d 	andeq	r0, r0, sp, lsl #26
     3c4:	00000028 	andeq	r0, r0, r8, lsr #32
     3c8:	000001f4 	strdeq	r0, [r0], -r4
     3cc:	00000000 	andeq	r0, r0, r0
     3d0:	00000220 	andeq	r0, r0, r0, lsr #4
     3d4:	400c0e41 	andmi	r0, ip, r1, asr #28
     3d8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     3dc:	018e4002 	orreq	r4, lr, r2
     3e0:	41180e41 	tstmi	r8, r1, asr #28
     3e4:	0603070d 	streq	r0, [r3], -sp, lsl #14
     3e8:	410c0e01 	tstmi	ip, r1, lsl #28
     3ec:	00000d0d 	andeq	r0, r0, sp, lsl #26
     3f0:	0000000c 	andeq	r0, r0, ip
     3f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     3f8:	7c020001 	stcvc	0, cr0, [r2], {1}
     3fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     400:	00000020 	andeq	r0, r0, r0, lsr #32
     404:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     408:	0800277c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, sp}
     40c:	0000000c 	andeq	r0, r0, ip
     410:	40040e41 	andmi	r0, r4, r1, asr #28
     414:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     418:	0d0d4207 	sfmeq	f4, 4, [sp, #-28]	; 0xffffffe4
     41c:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     420:	00000000 	andeq	r0, r0, r0
     424:	00000020 	andeq	r0, r0, r0, lsr #32
     428:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     42c:	08002788 	stmdaeq	r0, {r3, r7, r8, r9, sl, sp}
     430:	0000000c 	andeq	r0, r0, ip
     434:	40040e41 	andmi	r0, r4, r1, asr #28
     438:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     43c:	0d0d4207 	sfmeq	f4, 4, [sp, #-28]	; 0xffffffe4
     440:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     444:	00000000 	andeq	r0, r0, r0
     448:	00000020 	andeq	r0, r0, r0, lsr #32
     44c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     450:	08002794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, sp}
     454:	0000000c 	andeq	r0, r0, ip
     458:	40040e41 	andmi	r0, r4, r1, asr #28
     45c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     460:	0d0d4207 	sfmeq	f4, 4, [sp, #-28]	; 0xffffffe4
     464:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     468:	00000000 	andeq	r0, r0, r0
     46c:	00000020 	andeq	r0, r0, r0, lsr #32
     470:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     474:	080027a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, sp}
     478:	0000000c 	andeq	r0, r0, ip
     47c:	40040e41 	andmi	r0, r4, r1, asr #28
     480:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     484:	0d0d4207 	sfmeq	f4, 4, [sp, #-28]	; 0xffffffe4
     488:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     48c:	00000000 	andeq	r0, r0, r0
     490:	00000024 	andeq	r0, r0, r4, lsr #32
     494:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     498:	080027ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, sp}
     49c:	00000018 	andeq	r0, r0, r8, lsl r0
     4a0:	40040e41 	andmi	r0, r4, r1, asr #28
     4a4:	0e410187 	dvfeqd	f0, f1, f7
     4a8:	070d4110 	smladeq	sp, r0, r1, r4
     4ac:	41040e46 	tstmi	r4, r6, asr #28
     4b0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     4b4:	00000e40 	andeq	r0, r0, r0, asr #28
     4b8:	00000024 	andeq	r0, r0, r4, lsr #32
     4bc:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     4c0:	080027c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, sp}
     4c4:	0000001c 	andeq	r0, r0, ip, lsl r0
     4c8:	40040e41 	andmi	r0, r4, r1, asr #28
     4cc:	0e410187 	dvfeqd	f0, f1, f7
     4d0:	070d4110 	smladeq	sp, r0, r1, r4
     4d4:	41040e48 	tstmi	r4, r8, asr #28
     4d8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     4dc:	00000e40 	andeq	r0, r0, r0, asr #28
     4e0:	00000020 	andeq	r0, r0, r0, lsr #32
     4e4:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     4e8:	080027e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, sp}
     4ec:	0000000e 	andeq	r0, r0, lr
     4f0:	40040e41 	andmi	r0, r4, r1, asr #28
     4f4:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     4f8:	0d0d4307 	stceq	3, cr4, [sp, #-28]	; 0xffffffe4
     4fc:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     500:	00000000 	andeq	r0, r0, r0
     504:	00000024 	andeq	r0, r0, r4, lsr #32
     508:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     50c:	080027f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, sp}
     510:	00000014 	andeq	r0, r0, r4, lsl r0
     514:	40040e41 	andmi	r0, r4, r1, asr #28
     518:	0e410187 	dvfeqd	f0, f1, f7
     51c:	070d4110 	smladeq	sp, r0, r1, r4
     520:	41040e44 	tstmi	r4, r4, asr #28
     524:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     528:	00000e40 	andeq	r0, r0, r0, asr #28
     52c:	00000024 	andeq	r0, r0, r4, lsr #32
     530:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     534:	08002804 	stmdaeq	r0, {r2, fp, sp}
     538:	00000048 	andeq	r0, r0, r8, asr #32
     53c:	40040e41 	andmi	r0, r4, r1, asr #28
     540:	0e410187 	dvfeqd	f0, f1, f7
     544:	070d4110 	smladeq	sp, r0, r1, r4
     548:	41040e57 	tstmi	r4, r7, asr lr
     54c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     550:	00000e40 	andeq	r0, r0, r0, asr #28
     554:	00000024 	andeq	r0, r0, r4, lsr #32
     558:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     55c:	0800284c 	stmdaeq	r0, {r2, r3, r6, fp, sp}
     560:	00000048 	andeq	r0, r0, r8, asr #32
     564:	40040e41 	andmi	r0, r4, r1, asr #28
     568:	0e410187 	dvfeqd	f0, f1, f7
     56c:	070d4110 	smladeq	sp, r0, r1, r4
     570:	41040e57 	tstmi	r4, r7, asr lr
     574:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     578:	00000e40 	andeq	r0, r0, r0, asr #28
     57c:	00000024 	andeq	r0, r0, r4, lsr #32
     580:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     584:	00000000 	andeq	r0, r0, r0
     588:	00000054 	andeq	r0, r0, r4, asr r0
     58c:	40040e41 	andmi	r0, r4, r1, asr #28
     590:	0e410187 	dvfeqd	f0, f1, f7
     594:	070d4110 	smladeq	sp, r0, r1, r4
     598:	41040e5e 	tstmi	r4, lr, asr lr
     59c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     5a0:	00000e40 	andeq	r0, r0, r0, asr #28
     5a4:	00000024 	andeq	r0, r0, r4, lsr #32
     5a8:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     5ac:	08002894 	stmdaeq	r0, {r2, r4, r7, fp, sp}
     5b0:	00000054 	andeq	r0, r0, r4, asr r0
     5b4:	40040e41 	andmi	r0, r4, r1, asr #28
     5b8:	0e410187 	dvfeqd	f0, f1, f7
     5bc:	070d4110 	smladeq	sp, r0, r1, r4
     5c0:	41040e5e 	tstmi	r4, lr, asr lr
     5c4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     5c8:	00000e40 	andeq	r0, r0, r0, asr #28
     5cc:	00000028 	andeq	r0, r0, r8, lsr #32
     5d0:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     5d4:	080028e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, sp}
     5d8:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     5dc:	400c0e41 	andmi	r0, ip, r1, asr #28
     5e0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     5e4:	018e4002 	orreq	r4, lr, r2
     5e8:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
     5ec:	d602070d 	strle	r0, [r2], -sp, lsl #14
     5f0:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     5f4:	0000000d 	andeq	r0, r0, sp
     5f8:	00000024 	andeq	r0, r0, r4, lsr #32
     5fc:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     600:	08002aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, sp}
     604:	0000007c 	andeq	r0, r0, ip, ror r0
     608:	40080e41 	andmi	r0, r8, r1, asr #28
     60c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     610:	100e4101 	andne	r4, lr, r1, lsl #2
     614:	79070d41 	stmdbvc	r7, {r0, r6, r8, sl, fp}
     618:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     61c:	0000000d 	andeq	r0, r0, sp
     620:	00000024 	andeq	r0, r0, r4, lsr #32
     624:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     628:	08002b20 	stmdaeq	r0, {r5, r8, r9, fp, sp}
     62c:	00000098 	muleq	r0, r8, r0
     630:	40080e41 	andmi	r0, r8, r1, asr #28
     634:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     638:	200e4101 	andcs	r4, lr, r1, lsl #2
     63c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     640:	41080e47 	tstmi	r8, r7, asr #28
     644:	00000d0d 	andeq	r0, r0, sp, lsl #26
     648:	00000024 	andeq	r0, r0, r4, lsr #32
     64c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     650:	08002bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, sp}
     654:	00000118 	andeq	r0, r0, r8, lsl r1
     658:	40080e41 	andmi	r0, r8, r1, asr #28
     65c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     660:	180e4101 	stmdane	lr, {r0, r8, lr}
     664:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     668:	41080e87 	smlabbmi	r8, r7, lr, r0
     66c:	00000d0d 	andeq	r0, r0, sp, lsl #26
     670:	00000024 	andeq	r0, r0, r4, lsr #32
     674:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     678:	08002cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, sp}
     67c:	0000003c 	andeq	r0, r0, ip, lsr r0
     680:	40080e41 	andmi	r0, r8, r1, asr #28
     684:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     688:	180e4101 	stmdane	lr, {r0, r8, lr}
     68c:	59070d41 	stmdbpl	r7, {r0, r6, r8, sl, fp}
     690:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     694:	0000000d 	andeq	r0, r0, sp
     698:	00000024 	andeq	r0, r0, r4, lsr #32
     69c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     6a0:	08002d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, sp}
     6a4:	0000004a 	andeq	r0, r0, sl, asr #32
     6a8:	40080e41 	andmi	r0, r8, r1, asr #28
     6ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6b0:	100e4101 	andne	r4, lr, r1, lsl #2
     6b4:	60070d41 	andvs	r0, r7, r1, asr #26
     6b8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     6bc:	0000000d 	andeq	r0, r0, sp
     6c0:	00000024 	andeq	r0, r0, r4, lsr #32
     6c4:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     6c8:	08002d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, sp}
     6cc:	00000036 	andeq	r0, r0, r6, lsr r0
     6d0:	40080e41 	andmi	r0, r8, r1, asr #28
     6d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6d8:	180e4101 	stmdane	lr, {r0, r8, lr}
     6dc:	56070d41 	strpl	r0, [r7], -r1, asr #26
     6e0:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     6e4:	0000000d 	andeq	r0, r0, sp
     6e8:	00000024 	andeq	r0, r0, r4, lsr #32
     6ec:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     6f0:	08002d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, sp}
     6f4:	00000046 	andeq	r0, r0, r6, asr #32
     6f8:	40080e41 	andmi	r0, r8, r1, asr #28
     6fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     700:	100e4101 	andne	r4, lr, r1, lsl #2
     704:	5e070d41 	cdppl	13, 0, cr0, cr7, cr1, {2}
     708:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     70c:	0000000d 	andeq	r0, r0, sp
     710:	00000024 	andeq	r0, r0, r4, lsr #32
     714:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     718:	08002dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, sp}
     71c:	0000002e 	andeq	r0, r0, lr, lsr #32
     720:	40080e41 	andmi	r0, r8, r1, asr #28
     724:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     728:	100e4101 	andne	r4, lr, r1, lsl #2
     72c:	52070d41 	andpl	r0, r7, #4160	; 0x1040
     730:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     734:	0000000d 	andeq	r0, r0, sp
     738:	00000024 	andeq	r0, r0, r4, lsr #32
     73c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     740:	08002e08 	stmdaeq	r0, {r3, r9, sl, fp, sp}
     744:	00000032 	andeq	r0, r0, r2, lsr r0
     748:	40080e41 	andmi	r0, r8, r1, asr #28
     74c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     750:	100e4101 	andne	r4, lr, r1, lsl #2
     754:	54070d41 	strpl	r0, [r7], #-3393	; 0xfffff2bf
     758:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     75c:	0000000d 	andeq	r0, r0, sp
     760:	00000024 	andeq	r0, r0, r4, lsr #32
     764:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     768:	08002e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, sp}
     76c:	0000004e 	andeq	r0, r0, lr, asr #32
     770:	40080e41 	andmi	r0, r8, r1, asr #28
     774:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     778:	100e4101 	andne	r4, lr, r1, lsl #2
     77c:	62070d41 	andvs	r0, r7, #4160	; 0x1040
     780:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     784:	0000000d 	andeq	r0, r0, sp
     788:	00000024 	andeq	r0, r0, r4, lsr #32
     78c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     790:	08002e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, sp}
     794:	00000084 	andeq	r0, r0, r4, lsl #1
     798:	40080e41 	andmi	r0, r8, r1, asr #28
     79c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7a0:	180e4101 	stmdane	lr, {r0, r8, lr}
     7a4:	7d070d41 	stcvc	13, cr0, [r7, #-260]	; 0xfffffefc
     7a8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     7ac:	0000000d 	andeq	r0, r0, sp
     7b0:	00000024 	andeq	r0, r0, r4, lsr #32
     7b4:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     7b8:	08002f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, sp}
     7bc:	00000098 	muleq	r0, r8, r0
     7c0:	40080e41 	andmi	r0, r8, r1, asr #28
     7c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7c8:	180e4101 	stmdane	lr, {r0, r8, lr}
     7cc:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     7d0:	41080e47 	tstmi	r8, r7, asr #28
     7d4:	00000d0d 	andeq	r0, r0, sp, lsl #26
     7d8:	00000024 	andeq	r0, r0, r4, lsr #32
     7dc:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     7e0:	00000000 	andeq	r0, r0, r0
     7e4:	00000048 	andeq	r0, r0, r8, asr #32
     7e8:	40080e41 	andmi	r0, r8, r1, asr #28
     7ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7f0:	180e4101 	stmdane	lr, {r0, r8, lr}
     7f4:	5f070d41 	svcpl	0x00070d41
     7f8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     7fc:	0000000d 	andeq	r0, r0, sp
     800:	00000024 	andeq	r0, r0, r4, lsr #32
     804:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     808:	08002fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp, sp}
     80c:	00000094 	muleq	r0, r4, r0
     810:	40080e41 	andmi	r0, r8, r1, asr #28
     814:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     818:	180e4101 	stmdane	lr, {r0, r8, lr}
     81c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     820:	41080e45 	tstmi	r8, r5, asr #28
     824:	00000d0d 	andeq	r0, r0, sp, lsl #26
     828:	00000024 	andeq	r0, r0, r4, lsr #32
     82c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     830:	0800303c 	stmdaeq	r0, {r2, r3, r4, r5, ip, sp}
     834:	00000080 	andeq	r0, r0, r0, lsl #1
     838:	40080e41 	andmi	r0, r8, r1, asr #28
     83c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     840:	100e4101 	andne	r4, lr, r1, lsl #2
     844:	76070d41 	strvc	r0, [r7], -r1, asr #26
     848:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     84c:	0000000d 	andeq	r0, r0, sp
     850:	00000024 	andeq	r0, r0, r4, lsr #32
     854:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     858:	080030bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, sp}
     85c:	00000080 	andeq	r0, r0, r0, lsl #1
     860:	40080e41 	andmi	r0, r8, r1, asr #28
     864:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     868:	100e4101 	andne	r4, lr, r1, lsl #2
     86c:	76070d41 	strvc	r0, [r7], -r1, asr #26
     870:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     874:	0000000d 	andeq	r0, r0, sp
     878:	00000024 	andeq	r0, r0, r4, lsr #32
     87c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     880:	0800313c 	stmdaeq	r0, {r2, r3, r4, r5, r8, ip, sp}
     884:	00000044 	andeq	r0, r0, r4, asr #32
     888:	40080e41 	andmi	r0, r8, r1, asr #28
     88c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     890:	180e4101 	stmdane	lr, {r0, r8, lr}
     894:	5d070d41 	stcpl	13, cr0, [r7, #-260]	; 0xfffffefc
     898:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     89c:	0000000d 	andeq	r0, r0, sp
     8a0:	00000018 	andeq	r0, r0, r8, lsl r0
     8a4:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     8a8:	08003180 	stmdaeq	r0, {r7, r8, ip, sp}
     8ac:	00000010 	andeq	r0, r0, r0, lsl r0
     8b0:	40080e41 	andmi	r0, r8, r1, asr #28
     8b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8b8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     8bc:	00000024 	andeq	r0, r0, r4, lsr #32
     8c0:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     8c4:	08003190 	stmdaeq	r0, {r4, r7, r8, ip, sp}
     8c8:	00000042 	andeq	r0, r0, r2, asr #32
     8cc:	40080e41 	andmi	r0, r8, r1, asr #28
     8d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8d4:	100e4101 	andne	r4, lr, r1, lsl #2
     8d8:	5c070d41 	stcpl	13, cr0, [r7], {65}	; 0x41
     8dc:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     8e0:	0000000d 	andeq	r0, r0, sp
     8e4:	00000024 	andeq	r0, r0, r4, lsr #32
     8e8:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     8ec:	080031d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, ip, sp}
     8f0:	00000044 	andeq	r0, r0, r4, asr #32
     8f4:	400c0e41 	andmi	r0, ip, r1, asr #28
     8f8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     8fc:	018e4002 	orreq	r4, lr, r2
     900:	41180e41 	tstmi	r8, r1, asr #28
     904:	0e5d070d 	cdpeq	7, 5, cr0, cr13, cr13, {0}
     908:	0d0d410c 	stfeqs	f4, [sp, #-48]	; 0xffffffd0
     90c:	0000000c 	andeq	r0, r0, ip
     910:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     914:	7c020001 	stcvc	0, cr0, [r2], {1}
     918:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     91c:	00000024 	andeq	r0, r0, r4, lsr #32
     920:	0000090c 	andeq	r0, r0, ip, lsl #18
     924:	08003218 	stmdaeq	r0, {r3, r4, r9, ip, sp}
     928:	00000060 	andeq	r0, r0, r0, rrx
     92c:	40080e41 	andmi	r0, r8, r1, asr #28
     930:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     934:	180e4101 	stmdane	lr, {r0, r8, lr}
     938:	69070d41 	stmdbvs	r7, {r0, r6, r8, sl, fp}
     93c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     940:	0000000d 	andeq	r0, r0, sp
     944:	00000024 	andeq	r0, r0, r4, lsr #32
     948:	0000090c 	andeq	r0, r0, ip, lsl #18
     94c:	08003278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, sp}
     950:	0000006c 	andeq	r0, r0, ip, rrx
     954:	40080e41 	andmi	r0, r8, r1, asr #28
     958:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     95c:	100e4101 	andne	r4, lr, r1, lsl #2
     960:	6e070d41 	cdpvs	13, 0, cr0, cr7, cr1, {2}
     964:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     968:	0000000d 	andeq	r0, r0, sp
     96c:	00000024 	andeq	r0, r0, r4, lsr #32
     970:	0000090c 	andeq	r0, r0, ip, lsl #18
     974:	080032e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip, sp}
     978:	00000088 	andeq	r0, r0, r8, lsl #1
     97c:	400c0e41 	andmi	r0, ip, r1, asr #28
     980:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     984:	018e4002 	orreq	r4, lr, r2
     988:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
     98c:	0e7c070d 	cdpeq	7, 7, cr0, cr12, cr13, {0}
     990:	0d0d410c 	stfeqs	f4, [sp, #-48]	; 0xffffffd0
     994:	00000024 	andeq	r0, r0, r4, lsr #32
     998:	0000090c 	andeq	r0, r0, ip, lsl #18
     99c:	0800336c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, ip, sp}
     9a0:	00000090 	muleq	r0, r0, r0
     9a4:	40080e41 	andmi	r0, r8, r1, asr #28
     9a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9ac:	200e4101 	andcs	r4, lr, r1, lsl #2
     9b0:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     9b4:	41080e40 	tstmi	r8, r0, asr #28
     9b8:	00000d0d 	andeq	r0, r0, sp, lsl #26
     9bc:	00000028 	andeq	r0, r0, r8, lsr #32
     9c0:	0000090c 	andeq	r0, r0, ip, lsl #18
     9c4:	080033fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, ip, sp}
     9c8:	00000096 	muleq	r0, r6, r0
     9cc:	400c0e41 	andmi	r0, ip, r1, asr #28
     9d0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     9d4:	018e4002 	orreq	r4, lr, r2
     9d8:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     9dc:	4602070d 	strmi	r0, [r2], -sp, lsl #14
     9e0:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     9e4:	0000000d 	andeq	r0, r0, sp
     9e8:	00000028 	andeq	r0, r0, r8, lsr #32
     9ec:	0000090c 	andeq	r0, r0, ip, lsl #18
     9f0:	08003494 	stmdaeq	r0, {r2, r4, r7, sl, ip, sp}
     9f4:	00000096 	muleq	r0, r6, r0
     9f8:	400c0e41 	andmi	r0, ip, r1, asr #28
     9fc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     a00:	018e4002 	orreq	r4, lr, r2
     a04:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     a08:	4602070d 	strmi	r0, [r2], -sp, lsl #14
     a0c:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     a10:	0000000d 	andeq	r0, r0, sp
     a14:	00000028 	andeq	r0, r0, r8, lsr #32
     a18:	0000090c 	andeq	r0, r0, ip, lsl #18
     a1c:	0800352c 	stmdaeq	r0, {r2, r3, r5, r8, sl, ip, sp}
     a20:	000000b8 	strheq	r0, [r0], -r8
     a24:	400c0e41 	andmi	r0, ip, r1, asr #28
     a28:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     a2c:	018e4002 	orreq	r4, lr, r2
     a30:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     a34:	5702070d 	strpl	r0, [r2, -sp, lsl #14]
     a38:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     a3c:	0000000d 	andeq	r0, r0, sp
     a40:	00000028 	andeq	r0, r0, r8, lsr #32
     a44:	0000090c 	andeq	r0, r0, ip, lsl #18
     a48:	080035e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, ip, sp}
     a4c:	000000b8 	strheq	r0, [r0], -r8
     a50:	400c0e41 	andmi	r0, ip, r1, asr #28
     a54:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     a58:	018e4002 	orreq	r4, lr, r2
     a5c:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     a60:	5702070d 	strpl	r0, [r2, -sp, lsl #14]
     a64:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     a68:	0000000d 	andeq	r0, r0, sp
     a6c:	00000028 	andeq	r0, r0, r8, lsr #32
     a70:	0000090c 	andeq	r0, r0, ip, lsl #18
     a74:	0800369c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, sp}
     a78:	00000090 	muleq	r0, r0, r0
     a7c:	400c0e41 	andmi	r0, ip, r1, asr #28
     a80:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     a84:	018e4002 	orreq	r4, lr, r2
     a88:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     a8c:	4302070d 	movwmi	r0, #9997	; 0x270d
     a90:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     a94:	0000000d 	andeq	r0, r0, sp
     a98:	0000000c 	andeq	r0, r0, ip
     a9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     aa0:	7c020001 	stcvc	0, cr0, [r2], {1}
     aa4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     aa8:	00000020 	andeq	r0, r0, r0, lsr #32
     aac:	00000a98 	muleq	r0, r8, sl
     ab0:	0800372c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, ip, sp}
     ab4:	0000000c 	andeq	r0, r0, ip
     ab8:	40040e41 	andmi	r0, r4, r1, asr #28
     abc:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     ac0:	0d0d4207 	sfmeq	f4, 4, [sp, #-28]	; 0xffffffe4
     ac4:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     ac8:	00000000 	andeq	r0, r0, r0
     acc:	00000018 	andeq	r0, r0, r8, lsl r0
     ad0:	00000a98 	muleq	r0, r8, sl
     ad4:	08003738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, sp}
     ad8:	00000028 	andeq	r0, r0, r8, lsr #32
     adc:	40080e41 	andmi	r0, r8, r1, asr #28
     ae0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ae4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     ae8:	00000018 	andeq	r0, r0, r8, lsl r0
     aec:	00000a98 	muleq	r0, r8, sl
     af0:	08003760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip, sp}
     af4:	00000048 	andeq	r0, r0, r8, asr #32
     af8:	40080e41 	andmi	r0, r8, r1, asr #28
     afc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b00:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     b04:	00000024 	andeq	r0, r0, r4, lsr #32
     b08:	00000a98 	muleq	r0, r8, sl
     b0c:	080037a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, ip, sp}
     b10:	000004c8 	andeq	r0, r0, r8, asr #9
     b14:	40080e41 	andmi	r0, r8, r1, asr #28
     b18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b1c:	180e4101 	stmdane	lr, {r0, r8, lr}
     b20:	10070c41 	andne	r0, r7, r1, asr #24
     b24:	0e025b03 	vmlaeq.f64	d5, d2, d3
     b28:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
     b2c:	00000024 	andeq	r0, r0, r4, lsr #32
     b30:	00000a98 	muleq	r0, r8, sl
     b34:	08003c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, ip, sp}
     b38:	00000638 	andeq	r0, r0, r8, lsr r6
     b3c:	40080e41 	andmi	r0, r8, r1, asr #28
     b40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b44:	280e4101 	stmdacs	lr, {r0, r8, lr}
     b48:	20070c41 	andcs	r0, r7, r1, asr #24
     b4c:	0e030f03 	cdpeq	15, 0, cr0, cr3, cr3, {0}
     b50:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
     b54:	00000024 	andeq	r0, r0, r4, lsr #32
     b58:	00000a98 	muleq	r0, r8, sl
     b5c:	080042a8 	stmdaeq	r0, {r3, r5, r7, r9, lr}
     b60:	0000043c 	andeq	r0, r0, ip, lsr r4
     b64:	40080e41 	andmi	r0, r8, r1, asr #28
     b68:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b6c:	200e4101 	andcs	r4, lr, r1, lsl #2
     b70:	18070c41 	stmdane	r7, {r0, r6, sl, fp}
     b74:	0e021503 	cfsh32eq	mvfx1, mvfx2, #3
     b78:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
     b7c:	00000028 	andeq	r0, r0, r8, lsr #32
     b80:	00000a98 	muleq	r0, r8, sl
     b84:	080046e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, lr}
     b88:	0000029c 	muleq	r0, ip, r2
     b8c:	400c0e41 	andmi	r0, ip, r1, asr #28
     b90:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     b94:	018e4002 	orreq	r4, lr, r2
     b98:	41400e41 	cmpmi	r0, r1, asr #28
     b9c:	0338070c 	teqeq	r8, #12, 14	; 0x300000
     ba0:	0c0e0136 	stfeqs	f0, [lr], {54}	; 0x36
     ba4:	000d0d41 	andeq	r0, sp, r1, asr #26
     ba8:	00000024 	andeq	r0, r0, r4, lsr #32
     bac:	00000a98 	muleq	r0, r8, sl
     bb0:	08004980 	stmdaeq	r0, {r7, r8, fp, lr}
     bb4:	0000022c 	andeq	r0, r0, ip, lsr #4
     bb8:	40080e41 	andmi	r0, r8, r1, asr #28
     bbc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     bc0:	180e4101 	stmdane	lr, {r0, r8, lr}
     bc4:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     bc8:	41080ef6 	strdmi	r0, [r8, -r6]
     bcc:	00000d0d 	andeq	r0, r0, sp, lsl #26
     bd0:	00000024 	andeq	r0, r0, r4, lsr #32
     bd4:	00000a98 	muleq	r0, r8, sl
     bd8:	08004bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, lr}
     bdc:	00000110 	andeq	r0, r0, r0, lsl r1
     be0:	40080e41 	andmi	r0, r8, r1, asr #28
     be4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     be8:	100e4101 	andne	r4, lr, r1, lsl #2
     bec:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     bf0:	41080e75 	tstmi	r8, r5, ror lr
     bf4:	00000d0d 	andeq	r0, r0, sp, lsl #26
     bf8:	00000024 	andeq	r0, r0, r4, lsr #32
     bfc:	00000a98 	muleq	r0, r8, sl
     c00:	08004cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, lr}
     c04:	0000007c 	andeq	r0, r0, ip, ror r0
     c08:	40080e41 	andmi	r0, r8, r1, asr #28
     c0c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c10:	180e4101 	stmdane	lr, {r0, r8, lr}
     c14:	10070c41 	andne	r0, r7, r1, asr #24
     c18:	41080e73 	tstmi	r8, r3, ror lr
     c1c:	00000d0d 	andeq	r0, r0, sp, lsl #26
     c20:	00000024 	andeq	r0, r0, r4, lsr #32
     c24:	00000a98 	muleq	r0, r8, sl
     c28:	08004d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, lr}
     c2c:	00000088 	andeq	r0, r0, r8, lsl #1
     c30:	40080e41 	andmi	r0, r8, r1, asr #28
     c34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c38:	100e4101 	andne	r4, lr, r1, lsl #2
     c3c:	70070d41 	andvc	r0, r7, r1, asr #26
     c40:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     c44:	0000000d 	andeq	r0, r0, sp
     c48:	00000018 	andeq	r0, r0, r8, lsl r0
     c4c:	00000a98 	muleq	r0, r8, sl
     c50:	08004dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, lr}
     c54:	0000002c 	andeq	r0, r0, ip, lsr #32
     c58:	40080e41 	andmi	r0, r8, r1, asr #28
     c5c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c60:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     c64:	00000020 	andeq	r0, r0, r0, lsr #32
     c68:	00000a98 	muleq	r0, r8, sl
     c6c:	08004dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, lr}
     c70:	0000002c 	andeq	r0, r0, ip, lsr #32
     c74:	40040e41 	andmi	r0, r4, r1, asr #28
     c78:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     c7c:	0d0d4b07 	vstreq	d4, [sp, #-28]	; 0xffffffe4
     c80:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     c84:	00000000 	andeq	r0, r0, r0
     c88:	00000020 	andeq	r0, r0, r0, lsr #32
     c8c:	00000a98 	muleq	r0, r8, sl
     c90:	08004e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, lr}
     c94:	0000001c 	andeq	r0, r0, ip, lsl r0
     c98:	40040e41 	andmi	r0, r4, r1, asr #28
     c9c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     ca0:	0d0d4707 	stceq	7, cr4, [sp, #-28]	; 0xffffffe4
     ca4:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     ca8:	00000000 	andeq	r0, r0, r0
     cac:	00000024 	andeq	r0, r0, r4, lsr #32
     cb0:	00000a98 	muleq	r0, r8, sl
     cb4:	08004e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, lr}
     cb8:	0000003c 	andeq	r0, r0, ip, lsr r0
     cbc:	40040e41 	andmi	r0, r4, r1, asr #28
     cc0:	0e410187 	dvfeqd	f0, f1, f7
     cc4:	070d4110 	smladeq	sp, r0, r1, r4
     cc8:	41040e56 	tstmi	r4, r6, asr lr
     ccc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     cd0:	00000e40 	andeq	r0, r0, r0, asr #28
     cd4:	00000024 	andeq	r0, r0, r4, lsr #32
     cd8:	00000a98 	muleq	r0, r8, sl
     cdc:	08004e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, lr}
     ce0:	0000003c 	andeq	r0, r0, ip, lsr r0
     ce4:	40040e41 	andmi	r0, r4, r1, asr #28
     ce8:	0e410187 	dvfeqd	f0, f1, f7
     cec:	070d4110 	smladeq	sp, r0, r1, r4
     cf0:	41040e56 	tstmi	r4, r6, asr lr
     cf4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     cf8:	00000e40 	andeq	r0, r0, r0, asr #28
     cfc:	00000024 	andeq	r0, r0, r4, lsr #32
     d00:	00000a98 	muleq	r0, r8, sl
     d04:	08004eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, lr}
     d08:	0000003c 	andeq	r0, r0, ip, lsr r0
     d0c:	40040e41 	andmi	r0, r4, r1, asr #28
     d10:	0e410187 	dvfeqd	f0, f1, f7
     d14:	070d4110 	smladeq	sp, r0, r1, r4
     d18:	41040e56 	tstmi	r4, r6, asr lr
     d1c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     d20:	00000e40 	andeq	r0, r0, r0, asr #28
     d24:	00000024 	andeq	r0, r0, r4, lsr #32
     d28:	00000a98 	muleq	r0, r8, sl
     d2c:	08004ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp, lr}
     d30:	0000003c 	andeq	r0, r0, ip, lsr r0
     d34:	40040e41 	andmi	r0, r4, r1, asr #28
     d38:	0e410187 	dvfeqd	f0, f1, f7
     d3c:	070d4110 	smladeq	sp, r0, r1, r4
     d40:	41040e56 	tstmi	r4, r6, asr lr
     d44:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     d48:	00000e40 	andeq	r0, r0, r0, asr #28
     d4c:	00000020 	andeq	r0, r0, r0, lsr #32
     d50:	00000a98 	muleq	r0, r8, sl
     d54:	00000000 	andeq	r0, r0, r0
     d58:	00000014 	andeq	r0, r0, r4, lsl r0
     d5c:	40040e41 	andmi	r0, r4, r1, asr #28
     d60:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     d64:	0d0d4407 	cfstrseq	mvf4, [sp, #-28]	; 0xffffffe4
     d68:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     d6c:	00000000 	andeq	r0, r0, r0
     d70:	0000000c 	andeq	r0, r0, ip
     d74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d78:	7c020001 	stcvc	0, cr0, [r2], {1}
     d7c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d80:	00000024 	andeq	r0, r0, r4, lsr #32
     d84:	00000d70 	andeq	r0, r0, r0, ror sp
     d88:	08004f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, lr}
     d8c:	0000002e 	andeq	r0, r0, lr, lsr #32
     d90:	40040e41 	andmi	r0, r4, r1, asr #28
     d94:	0e410187 	dvfeqd	f0, f1, f7
     d98:	070d4118 	smladeq	sp, r8, r1, r4
     d9c:	41040e51 	tstmi	r4, r1, asr lr
     da0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     da4:	00000e40 	andeq	r0, r0, r0, asr #28
     da8:	00000024 	andeq	r0, r0, r4, lsr #32
     dac:	00000d70 	andeq	r0, r0, r0, ror sp
     db0:	08004f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, lr}
     db4:	0000010c 	andeq	r0, r0, ip, lsl #2
     db8:	40040e41 	andmi	r0, r4, r1, asr #28
     dbc:	0e410187 	dvfeqd	f0, f1, f7
     dc0:	070d4130 	smladxeq	sp, r0, r1, r4
     dc4:	040e8002 	streq	r8, [lr], #-2
     dc8:	410d0d41 	tstmi	sp, r1, asr #26
     dcc:	000e40c7 	andeq	r4, lr, r7, asr #1
     dd0:	00000024 	andeq	r0, r0, r4, lsr #32
     dd4:	00000d70 	andeq	r0, r0, r0, ror sp
     dd8:	08005060 	stmdaeq	r0, {r5, r6, ip, lr}
     ddc:	00000064 	andeq	r0, r0, r4, rrx
     de0:	40080e41 	andmi	r0, r8, r1, asr #28
     de4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     de8:	980e4101 	stmdals	lr, {r0, r8, lr}
     dec:	070d4102 	streq	r4, [sp, -r2, lsl #2]
     df0:	41080e6d 	tstmi	r8, sp, ror #28
     df4:	00000d0d 	andeq	r0, r0, sp, lsl #26
     df8:	00000024 	andeq	r0, r0, r4, lsr #32
     dfc:	00000d70 	andeq	r0, r0, r0, ror sp
     e00:	080050c4 	stmdaeq	r0, {r2, r6, r7, ip, lr}
     e04:	000002f6 	strdeq	r0, [r0], -r6
     e08:	40080e41 	andmi	r0, r8, r1, asr #28
     e0c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e10:	a00e4101 	andge	r4, lr, r1, lsl #2
     e14:	070d4102 	streq	r4, [sp, -r2, lsl #2]
     e18:	0e017603 	cfmadd32eq	mvax0, mvfx7, mvfx1, mvfx3
     e1c:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
     e20:	00000024 	andeq	r0, r0, r4, lsr #32
     e24:	00000d70 	andeq	r0, r0, r0, ror sp
     e28:	080053bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, ip, lr}
     e2c:	00000176 	andeq	r0, r0, r6, ror r1
     e30:	40080e41 	andmi	r0, r8, r1, asr #28
     e34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e38:	280e4101 	stmdacs	lr, {r0, r8, lr}
     e3c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     e40:	41080eb6 			; <UNDEFINED> instruction: 0x41080eb6
     e44:	00000d0d 	andeq	r0, r0, sp, lsl #26
     e48:	0000000c 	andeq	r0, r0, ip
     e4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e50:	7c020001 	stcvc	0, cr0, [r2], {1}
     e54:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e58:	00000024 	andeq	r0, r0, r4, lsr #32
     e5c:	00000e48 	andeq	r0, r0, r8, asr #28
     e60:	08005534 	stmdaeq	r0, {r2, r4, r5, r8, sl, ip, lr}
     e64:	00000034 	andeq	r0, r0, r4, lsr r0
     e68:	40040e41 	andmi	r0, r4, r1, asr #28
     e6c:	0e410187 	dvfeqd	f0, f1, f7
     e70:	070d4110 	smladeq	sp, r0, r1, r4
     e74:	41040e54 	tstmi	r4, r4, asr lr
     e78:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     e7c:	00000e40 	andeq	r0, r0, r0, asr #28
     e80:	00000028 	andeq	r0, r0, r8, lsr #32
     e84:	00000e48 	andeq	r0, r0, r8, asr #28
     e88:	08005568 	stmdaeq	r0, {r3, r5, r6, r8, sl, ip, lr}
     e8c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     e90:	400c0e41 	andmi	r0, ip, r1, asr #28
     e94:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     e98:	018e4002 	orreq	r4, lr, r2
     e9c:	02b00e41 	adcseq	r0, r0, #1040	; 0x410
     ea0:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     ea4:	410c0ed6 	ldrdmi	r0, [ip, -r6]
     ea8:	00000d0d 	andeq	r0, r0, sp, lsl #26
     eac:	00000028 	andeq	r0, r0, r8, lsr #32
     eb0:	00000e48 	andeq	r0, r0, r8, asr #28
     eb4:	08005724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip, lr}
     eb8:	00000104 	andeq	r0, r0, r4, lsl #2
     ebc:	400c0e41 	andmi	r0, ip, r1, asr #28
     ec0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     ec4:	018e4002 	orreq	r4, lr, r2
     ec8:	41480e41 	cmpmi	r8, r1, asr #28
     ecc:	0240070c 	subeq	r0, r0, #12, 14	; 0x300000
     ed0:	410c0e77 	tstmi	ip, r7, ror lr
     ed4:	00000d0d 	andeq	r0, r0, sp, lsl #26
     ed8:	00000024 	andeq	r0, r0, r4, lsr #32
     edc:	00000e48 	andeq	r0, r0, r8, asr #28
     ee0:	08005828 	stmdaeq	r0, {r3, r5, fp, ip, lr}
     ee4:	00000070 	andeq	r0, r0, r0, ror r0
     ee8:	40080e41 	andmi	r0, r8, r1, asr #28
     eec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ef0:	180e4101 	stmdane	lr, {r0, r8, lr}
     ef4:	6b070d41 	blvs	1c4400 <_Min_Stack_Size+0x1c4200>
     ef8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     efc:	0000000d 	andeq	r0, r0, sp
     f00:	00000024 	andeq	r0, r0, r4, lsr #32
     f04:	00000e48 	andeq	r0, r0, r8, asr #28
     f08:	08005898 	stmdaeq	r0, {r3, r4, r7, fp, ip, lr}
     f0c:	0000005c 	andeq	r0, r0, ip, asr r0
     f10:	40080e41 	andmi	r0, r8, r1, asr #28
     f14:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f18:	200e4101 	andcs	r4, lr, r1, lsl #2
     f1c:	66070d41 	strvs	r0, [r7], -r1, asr #26
     f20:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     f24:	0000000d 	andeq	r0, r0, sp
     f28:	00000020 	andeq	r0, r0, r0, lsr #32
     f2c:	00000e48 	andeq	r0, r0, r8, asr #28
     f30:	080058f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, lr}
     f34:	00000048 	andeq	r0, r0, r8, asr #32
     f38:	40040e41 	andmi	r0, r4, r1, asr #28
     f3c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     f40:	0d0d5c07 	stceq	12, cr5, [sp, #-28]	; 0xffffffe4
     f44:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     f48:	00000000 	andeq	r0, r0, r0
     f4c:	00000020 	andeq	r0, r0, r0, lsr #32
     f50:	00000e48 	andeq	r0, r0, r8, asr #28
     f54:	0800593c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip, lr}
     f58:	0000001c 	andeq	r0, r0, ip, lsl r0
     f5c:	40040e41 	andmi	r0, r4, r1, asr #28
     f60:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     f64:	0d0d4707 	stceq	7, cr4, [sp, #-28]	; 0xffffffe4
     f68:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     f6c:	00000000 	andeq	r0, r0, r0
     f70:	0000000c 	andeq	r0, r0, ip
     f74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f78:	7c020001 	stcvc	0, cr0, [r2], {1}
     f7c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f80:	00000024 	andeq	r0, r0, r4, lsr #32
     f84:	00000f70 	andeq	r0, r0, r0, ror pc
     f88:	08005958 	stmdaeq	r0, {r3, r4, r6, r8, fp, ip, lr}
     f8c:	00000024 	andeq	r0, r0, r4, lsr #32
     f90:	40040e41 	andmi	r0, r4, r1, asr #28
     f94:	0e410187 	dvfeqd	f0, f1, f7
     f98:	070d4110 	smladeq	sp, r0, r1, r4
     f9c:	41040e4a 	tstmi	r4, sl, asr #28
     fa0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     fa4:	00000e40 	andeq	r0, r0, r0, asr #28
     fa8:	00000024 	andeq	r0, r0, r4, lsr #32
     fac:	00000f70 	andeq	r0, r0, r0, ror pc
     fb0:	0800597c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, ip, lr}
     fb4:	000000c4 	andeq	r0, r0, r4, asr #1
     fb8:	40040e41 	andmi	r0, r4, r1, asr #28
     fbc:	0e410187 	dvfeqd	f0, f1, f7
     fc0:	070d4120 	streq	r4, [sp, -r0, lsr #2]
     fc4:	040e5802 	streq	r5, [lr], #-2050	; 0xfffff7fe
     fc8:	410d0d41 	tstmi	sp, r1, asr #26
     fcc:	000e40c7 	andeq	r4, lr, r7, asr #1
     fd0:	00000024 	andeq	r0, r0, r4, lsr #32
     fd4:	00000f70 	andeq	r0, r0, r0, ror pc
     fd8:	00000000 	andeq	r0, r0, r0
     fdc:	0000002c 	andeq	r0, r0, ip, lsr #32
     fe0:	40040e41 	andmi	r0, r4, r1, asr #28
     fe4:	0e410187 	dvfeqd	f0, f1, f7
     fe8:	070d4110 	smladeq	sp, r0, r1, r4
     fec:	41040e4d 	tstmi	r4, sp, asr #28
     ff0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     ff4:	00000e40 	andeq	r0, r0, r0, asr #28
     ff8:	00000024 	andeq	r0, r0, r4, lsr #32
     ffc:	00000f70 	andeq	r0, r0, r0, ror pc
    1000:	00000000 	andeq	r0, r0, r0
    1004:	00000040 	andeq	r0, r0, r0, asr #32
    1008:	40040e41 	andmi	r0, r4, r1, asr #28
    100c:	0e410187 	dvfeqd	f0, f1, f7
    1010:	070d4110 	smladeq	sp, r0, r1, r4
    1014:	41040e58 	tstmi	r4, r8, asr lr
    1018:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    101c:	00000e40 	andeq	r0, r0, r0, asr #28
    1020:	00000024 	andeq	r0, r0, r4, lsr #32
    1024:	00000f70 	andeq	r0, r0, r0, ror pc
    1028:	00000000 	andeq	r0, r0, r0
    102c:	00000038 	andeq	r0, r0, r8, lsr r0
    1030:	40040e41 	andmi	r0, r4, r1, asr #28
    1034:	0e410187 	dvfeqd	f0, f1, f7
    1038:	070d4110 	smladeq	sp, r0, r1, r4
    103c:	41040e53 	tstmi	r4, r3, asr lr
    1040:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1044:	00000e40 	andeq	r0, r0, r0, asr #28
    1048:	0000000c 	andeq	r0, r0, ip
    104c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1050:	7c020001 	stcvc	0, cr0, [r2], {1}
    1054:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1058:	00000020 	andeq	r0, r0, r0, lsr #32
    105c:	00001048 	andeq	r1, r0, r8, asr #32
    1060:	00000000 	andeq	r0, r0, r0
    1064:	0000005c 	andeq	r0, r0, ip, asr r0
    1068:	40040e41 	andmi	r0, r4, r1, asr #28
    106c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    1070:	0d0d6607 	stceq	6, cr6, [sp, #-28]	; 0xffffffe4
    1074:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    1078:	00000000 	andeq	r0, r0, r0
    107c:	00000024 	andeq	r0, r0, r4, lsr #32
    1080:	00001048 	andeq	r1, r0, r8, asr #32
    1084:	00000000 	andeq	r0, r0, r0
    1088:	0000005c 	andeq	r0, r0, ip, asr r0
    108c:	40040e41 	andmi	r0, r4, r1, asr #28
    1090:	0e410187 	dvfeqd	f0, f1, f7
    1094:	070d4110 	smladeq	sp, r0, r1, r4
    1098:	41040e65 	tstmi	r4, r5, ror #28
    109c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    10a0:	00000e40 	andeq	r0, r0, r0, asr #28
    10a4:	00000024 	andeq	r0, r0, r4, lsr #32
    10a8:	00001048 	andeq	r1, r0, r8, asr #32
    10ac:	00000000 	andeq	r0, r0, r0
    10b0:	00000050 	andeq	r0, r0, r0, asr r0
    10b4:	40080e41 	andmi	r0, r8, r1, asr #28
    10b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    10bc:	100e4101 	andne	r4, lr, r1, lsl #2
    10c0:	63070d41 	movwvs	r0, #32065	; 0x7d41
    10c4:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    10c8:	0000000d 	andeq	r0, r0, sp
    10cc:	00000024 	andeq	r0, r0, r4, lsr #32
    10d0:	00001048 	andeq	r1, r0, r8, asr #32
    10d4:	00000000 	andeq	r0, r0, r0
    10d8:	0000003c 	andeq	r0, r0, ip, lsr r0
    10dc:	40040e41 	andmi	r0, r4, r1, asr #28
    10e0:	0e410187 	dvfeqd	f0, f1, f7
    10e4:	070d4118 	smladeq	sp, r8, r1, r4
    10e8:	41040e55 	tstmi	r4, r5, asr lr
    10ec:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    10f0:	00000e40 	andeq	r0, r0, r0, asr #28
    10f4:	00000024 	andeq	r0, r0, r4, lsr #32
    10f8:	00001048 	andeq	r1, r0, r8, asr #32
    10fc:	00000000 	andeq	r0, r0, r0
    1100:	00000020 	andeq	r0, r0, r0, lsr #32
    1104:	40040e41 	andmi	r0, r4, r1, asr #28
    1108:	0e410187 	dvfeqd	f0, f1, f7
    110c:	070d4110 	smladeq	sp, r0, r1, r4
    1110:	41040e47 	tstmi	r4, r7, asr #28
    1114:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1118:	00000e40 	andeq	r0, r0, r0, asr #28
    111c:	00000024 	andeq	r0, r0, r4, lsr #32
    1120:	00001048 	andeq	r1, r0, r8, asr #32
    1124:	00000000 	andeq	r0, r0, r0
    1128:	0000003c 	andeq	r0, r0, ip, lsr r0
    112c:	40040e41 	andmi	r0, r4, r1, asr #28
    1130:	0e410187 	dvfeqd	f0, f1, f7
    1134:	070d4118 	smladeq	sp, r8, r1, r4
    1138:	41040e56 	tstmi	r4, r6, asr lr
    113c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1140:	00000e40 	andeq	r0, r0, r0, asr #28
    1144:	00000024 	andeq	r0, r0, r4, lsr #32
    1148:	00001048 	andeq	r1, r0, r8, asr #32
    114c:	00000000 	andeq	r0, r0, r0
    1150:	00000020 	andeq	r0, r0, r0, lsr #32
    1154:	40040e41 	andmi	r0, r4, r1, asr #28
    1158:	0e410187 	dvfeqd	f0, f1, f7
    115c:	070d4110 	smladeq	sp, r0, r1, r4
    1160:	41040e47 	tstmi	r4, r7, asr #28
    1164:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1168:	00000e40 	andeq	r0, r0, r0, asr #28
    116c:	00000024 	andeq	r0, r0, r4, lsr #32
    1170:	00001048 	andeq	r1, r0, r8, asr #32
    1174:	00000000 	andeq	r0, r0, r0
    1178:	00000038 	andeq	r0, r0, r8, lsr r0
    117c:	40040e41 	andmi	r0, r4, r1, asr #28
    1180:	0e410187 	dvfeqd	f0, f1, f7
    1184:	070d4118 	smladeq	sp, r8, r1, r4
    1188:	41040e53 	tstmi	r4, r3, asr lr
    118c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1190:	00000e40 	andeq	r0, r0, r0, asr #28
    1194:	00000020 	andeq	r0, r0, r0, lsr #32
    1198:	00001048 	andeq	r1, r0, r8, asr #32
    119c:	00000000 	andeq	r0, r0, r0
    11a0:	0000001c 	andeq	r0, r0, ip, lsl r0
    11a4:	40040e41 	andmi	r0, r4, r1, asr #28
    11a8:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    11ac:	0d0d4807 	stceq	8, cr4, [sp, #-28]	; 0xffffffe4
    11b0:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    11b4:	00000000 	andeq	r0, r0, r0
    11b8:	00000024 	andeq	r0, r0, r4, lsr #32
    11bc:	00001048 	andeq	r1, r0, r8, asr #32
    11c0:	00000000 	andeq	r0, r0, r0
    11c4:	00000038 	andeq	r0, r0, r8, lsr r0
    11c8:	40040e41 	andmi	r0, r4, r1, asr #28
    11cc:	0e410187 	dvfeqd	f0, f1, f7
    11d0:	070d4118 	smladeq	sp, r8, r1, r4
    11d4:	41040e53 	tstmi	r4, r3, asr lr
    11d8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    11dc:	00000e40 	andeq	r0, r0, r0, asr #28
    11e0:	00000024 	andeq	r0, r0, r4, lsr #32
    11e4:	00001048 	andeq	r1, r0, r8, asr #32
    11e8:	00000000 	andeq	r0, r0, r0
    11ec:	00000038 	andeq	r0, r0, r8, lsr r0
    11f0:	40040e41 	andmi	r0, r4, r1, asr #28
    11f4:	0e410187 	dvfeqd	f0, f1, f7
    11f8:	070d4118 	smladeq	sp, r8, r1, r4
    11fc:	41040e53 	tstmi	r4, r3, asr lr
    1200:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1204:	00000e40 	andeq	r0, r0, r0, asr #28
    1208:	00000024 	andeq	r0, r0, r4, lsr #32
    120c:	00001048 	andeq	r1, r0, r8, asr #32
    1210:	00000000 	andeq	r0, r0, r0
    1214:	00000038 	andeq	r0, r0, r8, lsr r0
    1218:	40040e41 	andmi	r0, r4, r1, asr #28
    121c:	0e410187 	dvfeqd	f0, f1, f7
    1220:	070d4118 	smladeq	sp, r8, r1, r4
    1224:	41040e54 	tstmi	r4, r4, asr lr
    1228:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    122c:	00000e40 	andeq	r0, r0, r0, asr #28
    1230:	00000024 	andeq	r0, r0, r4, lsr #32
    1234:	00001048 	andeq	r1, r0, r8, asr #32
    1238:	00000000 	andeq	r0, r0, r0
    123c:	0000004c 	andeq	r0, r0, ip, asr #32
    1240:	40040e41 	andmi	r0, r4, r1, asr #28
    1244:	0e410187 	dvfeqd	f0, f1, f7
    1248:	070d4110 	smladeq	sp, r0, r1, r4
    124c:	41040e5d 	tstmi	r4, sp, asr lr
    1250:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1254:	00000e40 	andeq	r0, r0, r0, asr #28
    1258:	00000024 	andeq	r0, r0, r4, lsr #32
    125c:	00001048 	andeq	r1, r0, r8, asr #32
    1260:	00000000 	andeq	r0, r0, r0
    1264:	0000001c 	andeq	r0, r0, ip, lsl r0
    1268:	40040e41 	andmi	r0, r4, r1, asr #28
    126c:	0e410187 	dvfeqd	f0, f1, f7
    1270:	070d4110 	smladeq	sp, r0, r1, r4
    1274:	41040e46 	tstmi	r4, r6, asr #28
    1278:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    127c:	00000e40 	andeq	r0, r0, r0, asr #28
    1280:	00000024 	andeq	r0, r0, r4, lsr #32
    1284:	00001048 	andeq	r1, r0, r8, asr #32
    1288:	00000000 	andeq	r0, r0, r0
    128c:	00000038 	andeq	r0, r0, r8, lsr r0
    1290:	40040e41 	andmi	r0, r4, r1, asr #28
    1294:	0e410187 	dvfeqd	f0, f1, f7
    1298:	070d4118 	smladeq	sp, r8, r1, r4
    129c:	41040e53 	tstmi	r4, r3, asr lr
    12a0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    12a4:	00000e40 	andeq	r0, r0, r0, asr #28
    12a8:	00000024 	andeq	r0, r0, r4, lsr #32
    12ac:	00001048 	andeq	r1, r0, r8, asr #32
    12b0:	00000000 	andeq	r0, r0, r0
    12b4:	00000040 	andeq	r0, r0, r0, asr #32
    12b8:	40040e41 	andmi	r0, r4, r1, asr #28
    12bc:	0e410187 	dvfeqd	f0, f1, f7
    12c0:	070d4110 	smladeq	sp, r0, r1, r4
    12c4:	41040e58 	tstmi	r4, r8, asr lr
    12c8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    12cc:	00000e40 	andeq	r0, r0, r0, asr #28
    12d0:	00000024 	andeq	r0, r0, r4, lsr #32
    12d4:	00001048 	andeq	r1, r0, r8, asr #32
    12d8:	08005a40 	stmdaeq	r0, {r6, r9, fp, ip, lr}
    12dc:	00000020 	andeq	r0, r0, r0, lsr #32
    12e0:	40040e41 	andmi	r0, r4, r1, asr #28
    12e4:	0e410187 	dvfeqd	f0, f1, f7
    12e8:	070d4110 	smladeq	sp, r0, r1, r4
    12ec:	41040e47 	tstmi	r4, r7, asr #28
    12f0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    12f4:	00000e40 	andeq	r0, r0, r0, asr #28
    12f8:	00000024 	andeq	r0, r0, r4, lsr #32
    12fc:	00001048 	andeq	r1, r0, r8, asr #32
    1300:	00000000 	andeq	r0, r0, r0
    1304:	00000024 	andeq	r0, r0, r4, lsr #32
    1308:	40040e41 	andmi	r0, r4, r1, asr #28
    130c:	0e410187 	dvfeqd	f0, f1, f7
    1310:	070d4110 	smladeq	sp, r0, r1, r4
    1314:	41040e49 	tstmi	r4, r9, asr #28
    1318:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    131c:	00000e40 	andeq	r0, r0, r0, asr #28
    1320:	00000024 	andeq	r0, r0, r4, lsr #32
    1324:	00001048 	andeq	r1, r0, r8, asr #32
    1328:	00000000 	andeq	r0, r0, r0
    132c:	00000020 	andeq	r0, r0, r0, lsr #32
    1330:	40040e41 	andmi	r0, r4, r1, asr #28
    1334:	0e410187 	dvfeqd	f0, f1, f7
    1338:	070d4110 	smladeq	sp, r0, r1, r4
    133c:	41040e47 	tstmi	r4, r7, asr #28
    1340:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1344:	00000e40 	andeq	r0, r0, r0, asr #28
    1348:	00000024 	andeq	r0, r0, r4, lsr #32
    134c:	00001048 	andeq	r1, r0, r8, asr #32
    1350:	08005a60 	stmdaeq	r0, {r5, r6, r9, fp, ip, lr}
    1354:	00000160 	andeq	r0, r0, r0, ror #2
    1358:	40040e41 	andmi	r0, r4, r1, asr #28
    135c:	0e410187 	dvfeqd	f0, f1, f7
    1360:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    1364:	040ea002 	streq	sl, [lr], #-2
    1368:	410d0d41 	tstmi	sp, r1, asr #26
    136c:	000e40c7 	andeq	r4, lr, r7, asr #1
    1370:	00000024 	andeq	r0, r0, r4, lsr #32
    1374:	00001048 	andeq	r1, r0, r8, asr #32
    1378:	00000000 	andeq	r0, r0, r0
    137c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1380:	40040e41 	andmi	r0, r4, r1, asr #28
    1384:	0e410187 	dvfeqd	f0, f1, f7
    1388:	070d4110 	smladeq	sp, r0, r1, r4
    138c:	41040e56 	tstmi	r4, r6, asr lr
    1390:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1394:	00000e40 	andeq	r0, r0, r0, asr #28
    1398:	00000024 	andeq	r0, r0, r4, lsr #32
    139c:	00001048 	andeq	r1, r0, r8, asr #32
    13a0:	08005bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp, ip, lr}
    13a4:	0000003c 	andeq	r0, r0, ip, lsr r0
    13a8:	40040e41 	andmi	r0, r4, r1, asr #28
    13ac:	0e410187 	dvfeqd	f0, f1, f7
    13b0:	070d4110 	smladeq	sp, r0, r1, r4
    13b4:	41040e56 	tstmi	r4, r6, asr lr
    13b8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    13bc:	00000e40 	andeq	r0, r0, r0, asr #28
    13c0:	00000024 	andeq	r0, r0, r4, lsr #32
    13c4:	00001048 	andeq	r1, r0, r8, asr #32
    13c8:	08005bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr}
    13cc:	0000003c 	andeq	r0, r0, ip, lsr r0
    13d0:	40040e41 	andmi	r0, r4, r1, asr #28
    13d4:	0e410187 	dvfeqd	f0, f1, f7
    13d8:	070d4110 	smladeq	sp, r0, r1, r4
    13dc:	41040e56 	tstmi	r4, r6, asr lr
    13e0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    13e4:	00000e40 	andeq	r0, r0, r0, asr #28
    13e8:	00000024 	andeq	r0, r0, r4, lsr #32
    13ec:	00001048 	andeq	r1, r0, r8, asr #32
    13f0:	00000000 	andeq	r0, r0, r0
    13f4:	0000003c 	andeq	r0, r0, ip, lsr r0
    13f8:	40040e41 	andmi	r0, r4, r1, asr #28
    13fc:	0e410187 	dvfeqd	f0, f1, f7
    1400:	070d4110 	smladeq	sp, r0, r1, r4
    1404:	41040e56 	tstmi	r4, r6, asr lr
    1408:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    140c:	00000e40 	andeq	r0, r0, r0, asr #28
    1410:	00000024 	andeq	r0, r0, r4, lsr #32
    1414:	00001048 	andeq	r1, r0, r8, asr #32
    1418:	08005c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, ip, lr}
    141c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1420:	40040e41 	andmi	r0, r4, r1, asr #28
    1424:	0e410187 	dvfeqd	f0, f1, f7
    1428:	070d4110 	smladeq	sp, r0, r1, r4
    142c:	41040e56 	tstmi	r4, r6, asr lr
    1430:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1434:	00000e40 	andeq	r0, r0, r0, asr #28
    1438:	00000024 	andeq	r0, r0, r4, lsr #32
    143c:	00001048 	andeq	r1, r0, r8, asr #32
    1440:	00000000 	andeq	r0, r0, r0
    1444:	00000020 	andeq	r0, r0, r0, lsr #32
    1448:	40040e41 	andmi	r0, r4, r1, asr #28
    144c:	0e410187 	dvfeqd	f0, f1, f7
    1450:	070d4110 	smladeq	sp, r0, r1, r4
    1454:	41040e47 	tstmi	r4, r7, asr #28
    1458:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    145c:	00000e40 	andeq	r0, r0, r0, asr #28
    1460:	00000024 	andeq	r0, r0, r4, lsr #32
    1464:	00001048 	andeq	r1, r0, r8, asr #32
    1468:	00000000 	andeq	r0, r0, r0
    146c:	00000020 	andeq	r0, r0, r0, lsr #32
    1470:	40040e41 	andmi	r0, r4, r1, asr #28
    1474:	0e410187 	dvfeqd	f0, f1, f7
    1478:	070d4110 	smladeq	sp, r0, r1, r4
    147c:	41040e47 	tstmi	r4, r7, asr #28
    1480:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1484:	00000e40 	andeq	r0, r0, r0, asr #28
    1488:	00000024 	andeq	r0, r0, r4, lsr #32
    148c:	00001048 	andeq	r1, r0, r8, asr #32
    1490:	00000000 	andeq	r0, r0, r0
    1494:	00000020 	andeq	r0, r0, r0, lsr #32
    1498:	40040e41 	andmi	r0, r4, r1, asr #28
    149c:	0e410187 	dvfeqd	f0, f1, f7
    14a0:	070d4110 	smladeq	sp, r0, r1, r4
    14a4:	41040e47 	tstmi	r4, r7, asr #28
    14a8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    14ac:	00000e40 	andeq	r0, r0, r0, asr #28
    14b0:	00000024 	andeq	r0, r0, r4, lsr #32
    14b4:	00001048 	andeq	r1, r0, r8, asr #32
    14b8:	08005c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, ip, lr}
    14bc:	00000074 	andeq	r0, r0, r4, ror r0
    14c0:	40040e41 	andmi	r0, r4, r1, asr #28
    14c4:	0e410187 	dvfeqd	f0, f1, f7
    14c8:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    14cc:	41040e71 	tstmi	r4, r1, ror lr
    14d0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    14d4:	00000e40 	andeq	r0, r0, r0, asr #28
    14d8:	00000020 	andeq	r0, r0, r0, lsr #32
    14dc:	00001048 	andeq	r1, r0, r8, asr #32
    14e0:	00000000 	andeq	r0, r0, r0
    14e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    14e8:	40040e41 	andmi	r0, r4, r1, asr #28
    14ec:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    14f0:	0d0d4807 	stceq	8, cr4, [sp, #-28]	; 0xffffffe4
    14f4:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    14f8:	00000000 	andeq	r0, r0, r0
    14fc:	00000024 	andeq	r0, r0, r4, lsr #32
    1500:	00001048 	andeq	r1, r0, r8, asr #32
    1504:	00000000 	andeq	r0, r0, r0
    1508:	00000034 	andeq	r0, r0, r4, lsr r0
    150c:	40040e41 	andmi	r0, r4, r1, asr #28
    1510:	0e410187 	dvfeqd	f0, f1, f7
    1514:	070d4118 	smladeq	sp, r8, r1, r4
    1518:	41040e52 	tstmi	r4, r2, asr lr
    151c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1520:	00000e40 	andeq	r0, r0, r0, asr #28
    1524:	00000024 	andeq	r0, r0, r4, lsr #32
    1528:	00001048 	andeq	r1, r0, r8, asr #32
    152c:	00000000 	andeq	r0, r0, r0
    1530:	00000020 	andeq	r0, r0, r0, lsr #32
    1534:	40040e41 	andmi	r0, r4, r1, asr #28
    1538:	0e410187 	dvfeqd	f0, f1, f7
    153c:	070d4110 	smladeq	sp, r0, r1, r4
    1540:	41040e47 	tstmi	r4, r7, asr #28
    1544:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1548:	00000e40 	andeq	r0, r0, r0, asr #28
    154c:	0000000c 	andeq	r0, r0, ip
    1550:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1554:	7c020001 	stcvc	0, cr0, [r2], {1}
    1558:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    155c:	00000024 	andeq	r0, r0, r4, lsr #32
    1560:	0000154c 	andeq	r1, r0, ip, asr #10
    1564:	00000000 	andeq	r0, r0, r0
    1568:	000000e4 	andeq	r0, r0, r4, ror #1
    156c:	40080e41 	andmi	r0, r8, r1, asr #28
    1570:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1574:	100e4101 	andne	r4, lr, r1, lsl #2
    1578:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    157c:	41080e5f 	tstmi	r8, pc, asr lr
    1580:	00000d0d 	andeq	r0, r0, sp, lsl #26
    1584:	00000018 	andeq	r0, r0, r8, lsl r0
    1588:	0000154c 	andeq	r1, r0, ip, asr #10
    158c:	00000000 	andeq	r0, r0, r0
    1590:	00000018 	andeq	r0, r0, r8, lsl r0
    1594:	40080e41 	andmi	r0, r8, r1, asr #28
    1598:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    159c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    15a0:	00000024 	andeq	r0, r0, r4, lsr #32
    15a4:	0000154c 	andeq	r1, r0, ip, asr #10
    15a8:	08005ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp, ip, lr}
    15ac:	00000178 	andeq	r0, r0, r8, ror r1
    15b0:	40040e41 	andmi	r0, r4, r1, asr #28
    15b4:	0e410187 	dvfeqd	f0, f1, f7
    15b8:	070d4128 	streq	r4, [sp, -r8, lsr #2]
    15bc:	040eb602 	streq	fp, [lr], #-1538	; 0xfffff9fe
    15c0:	410d0d41 	tstmi	sp, r1, asr #26
    15c4:	000e40c7 	andeq	r4, lr, r7, asr #1
    15c8:	00000024 	andeq	r0, r0, r4, lsr #32
    15cc:	0000154c 	andeq	r1, r0, ip, asr #10
    15d0:	00000000 	andeq	r0, r0, r0
    15d4:	00000026 	andeq	r0, r0, r6, lsr #32
    15d8:	40040e41 	andmi	r0, r4, r1, asr #28
    15dc:	0e410187 	dvfeqd	f0, f1, f7
    15e0:	070d4110 	smladeq	sp, r0, r1, r4
    15e4:	41040e4d 	tstmi	r4, sp, asr #28
    15e8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    15ec:	00000e40 	andeq	r0, r0, r0, asr #28
    15f0:	00000024 	andeq	r0, r0, r4, lsr #32
    15f4:	0000154c 	andeq	r1, r0, ip, asr #10
    15f8:	00000000 	andeq	r0, r0, r0
    15fc:	00000032 	andeq	r0, r0, r2, lsr r0
    1600:	40040e41 	andmi	r0, r4, r1, asr #28
    1604:	0e410187 	dvfeqd	f0, f1, f7
    1608:	070d4118 	smladeq	sp, r8, r1, r4
    160c:	41040e53 	tstmi	r4, r3, asr lr
    1610:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1614:	00000e40 	andeq	r0, r0, r0, asr #28
    1618:	00000024 	andeq	r0, r0, r4, lsr #32
    161c:	0000154c 	andeq	r1, r0, ip, asr #10
    1620:	00000000 	andeq	r0, r0, r0
    1624:	00000018 	andeq	r0, r0, r8, lsl r0
    1628:	40040e41 	andmi	r0, r4, r1, asr #28
    162c:	0e410187 	dvfeqd	f0, f1, f7
    1630:	070d4110 	smladeq	sp, r0, r1, r4
    1634:	41040e46 	tstmi	r4, r6, asr #28
    1638:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    163c:	00000e40 	andeq	r0, r0, r0, asr #28
    1640:	00000024 	andeq	r0, r0, r4, lsr #32
    1644:	0000154c 	andeq	r1, r0, ip, asr #10
    1648:	00000000 	andeq	r0, r0, r0
    164c:	00000032 	andeq	r0, r0, r2, lsr r0
    1650:	40040e41 	andmi	r0, r4, r1, asr #28
    1654:	0e410187 	dvfeqd	f0, f1, f7
    1658:	070d4118 	smladeq	sp, r8, r1, r4
    165c:	41040e53 	tstmi	r4, r3, asr lr
    1660:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1664:	00000e40 	andeq	r0, r0, r0, asr #28
    1668:	00000024 	andeq	r0, r0, r4, lsr #32
    166c:	0000154c 	andeq	r1, r0, ip, asr #10
    1670:	00000000 	andeq	r0, r0, r0
    1674:	00000018 	andeq	r0, r0, r8, lsl r0
    1678:	40040e41 	andmi	r0, r4, r1, asr #28
    167c:	0e410187 	dvfeqd	f0, f1, f7
    1680:	070d4110 	smladeq	sp, r0, r1, r4
    1684:	41040e46 	tstmi	r4, r6, asr #28
    1688:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    168c:	00000e40 	andeq	r0, r0, r0, asr #28
    1690:	00000024 	andeq	r0, r0, r4, lsr #32
    1694:	0000154c 	andeq	r1, r0, ip, asr #10
    1698:	08005e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip, lr}
    169c:	0000001c 	andeq	r0, r0, ip, lsl r0
    16a0:	40040e41 	andmi	r0, r4, r1, asr #28
    16a4:	0e410187 	dvfeqd	f0, f1, f7
    16a8:	070d4110 	smladeq	sp, r0, r1, r4
    16ac:	41040e48 	tstmi	r4, r8, asr #28
    16b0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    16b4:	00000e40 	andeq	r0, r0, r0, asr #28
    16b8:	00000024 	andeq	r0, r0, r4, lsr #32
    16bc:	0000154c 	andeq	r1, r0, ip, asr #10
    16c0:	08005e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp, ip, lr}
    16c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    16c8:	40040e41 	andmi	r0, r4, r1, asr #28
    16cc:	0e410187 	dvfeqd	f0, f1, f7
    16d0:	070d4110 	smladeq	sp, r0, r1, r4
    16d4:	41040e48 	tstmi	r4, r8, asr #28
    16d8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    16dc:	00000e40 	andeq	r0, r0, r0, asr #28
    16e0:	00000024 	andeq	r0, r0, r4, lsr #32
    16e4:	0000154c 	andeq	r1, r0, ip, asr #10
    16e8:	00000000 	andeq	r0, r0, r0
    16ec:	0000002e 	andeq	r0, r0, lr, lsr #32
    16f0:	40040e41 	andmi	r0, r4, r1, asr #28
    16f4:	0e410187 	dvfeqd	f0, f1, f7
    16f8:	070d4110 	smladeq	sp, r0, r1, r4
    16fc:	41040e51 	tstmi	r4, r1, asr lr
    1700:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1704:	00000e40 	andeq	r0, r0, r0, asr #28
    1708:	00000024 	andeq	r0, r0, r4, lsr #32
    170c:	0000154c 	andeq	r1, r0, ip, asr #10
    1710:	00000000 	andeq	r0, r0, r0
    1714:	0000001c 	andeq	r0, r0, ip, lsl r0
    1718:	40040e41 	andmi	r0, r4, r1, asr #28
    171c:	0e410187 	dvfeqd	f0, f1, f7
    1720:	070d4110 	smladeq	sp, r0, r1, r4
    1724:	41040e48 	tstmi	r4, r8, asr #28
    1728:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    172c:	00000e40 	andeq	r0, r0, r0, asr #28
    1730:	00000024 	andeq	r0, r0, r4, lsr #32
    1734:	0000154c 	andeq	r1, r0, ip, asr #10
    1738:	00000000 	andeq	r0, r0, r0
    173c:	00000042 	andeq	r0, r0, r2, asr #32
    1740:	40040e41 	andmi	r0, r4, r1, asr #28
    1744:	0e410187 	dvfeqd	f0, f1, f7
    1748:	070d4118 	smladeq	sp, r8, r1, r4
    174c:	41040e5b 	tstmi	r4, fp, asr lr
    1750:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1754:	00000e40 	andeq	r0, r0, r0, asr #28
    1758:	00000024 	andeq	r0, r0, r4, lsr #32
    175c:	0000154c 	andeq	r1, r0, ip, asr #10
    1760:	00000000 	andeq	r0, r0, r0
    1764:	0000004c 	andeq	r0, r0, ip, asr #32
    1768:	40040e41 	andmi	r0, r4, r1, asr #28
    176c:	0e410187 	dvfeqd	f0, f1, f7
    1770:	070d4118 	smladeq	sp, r8, r1, r4
    1774:	41040e5d 	tstmi	r4, sp, asr lr
    1778:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    177c:	00000e40 	andeq	r0, r0, r0, asr #28
    1780:	00000024 	andeq	r0, r0, r4, lsr #32
    1784:	0000154c 	andeq	r1, r0, ip, asr #10
    1788:	00000000 	andeq	r0, r0, r0
    178c:	00000020 	andeq	r0, r0, r0, lsr #32
    1790:	40040e41 	andmi	r0, r4, r1, asr #28
    1794:	0e410187 	dvfeqd	f0, f1, f7
    1798:	070d4110 	smladeq	sp, r0, r1, r4
    179c:	41040e47 	tstmi	r4, r7, asr #28
    17a0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    17a4:	00000e40 	andeq	r0, r0, r0, asr #28
    17a8:	00000024 	andeq	r0, r0, r4, lsr #32
    17ac:	0000154c 	andeq	r1, r0, ip, asr #10
    17b0:	00000000 	andeq	r0, r0, r0
    17b4:	000000e0 	andeq	r0, r0, r0, ror #1
    17b8:	40040e41 	andmi	r0, r4, r1, asr #28
    17bc:	0e410187 	dvfeqd	f0, f1, f7
    17c0:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    17c4:	040e6802 	streq	r6, [lr], #-2050	; 0xfffff7fe
    17c8:	410d0d41 	tstmi	sp, r1, asr #26
    17cc:	000e40c7 	andeq	r4, lr, r7, asr #1
    17d0:	00000028 	andeq	r0, r0, r8, lsr #32
    17d4:	0000154c 	andeq	r1, r0, ip, asr #10
    17d8:	00000000 	andeq	r0, r0, r0
    17dc:	00000084 	andeq	r0, r0, r4, lsl #1
    17e0:	40080e41 	andmi	r0, r8, r1, asr #28
    17e4:	87400284 	strbhi	r0, [r0, -r4, lsl #5]
    17e8:	180e4101 	stmdane	lr, {r0, r8, lr}
    17ec:	7a070d41 	bvc	1c4cf8 <_Min_Stack_Size+0x1c4af8>
    17f0:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    17f4:	40c7410d 	sbcmi	r4, r7, sp, lsl #2
    17f8:	000e40c4 	andeq	r4, lr, r4, asr #1
    17fc:	00000024 	andeq	r0, r0, r4, lsr #32
    1800:	0000154c 	andeq	r1, r0, ip, asr #10
    1804:	00000000 	andeq	r0, r0, r0
    1808:	0000001c 	andeq	r0, r0, ip, lsl r0
    180c:	40040e41 	andmi	r0, r4, r1, asr #28
    1810:	0e410187 	dvfeqd	f0, f1, f7
    1814:	070d4110 	smladeq	sp, r0, r1, r4
    1818:	41040e46 	tstmi	r4, r6, asr #28
    181c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1820:	00000e40 	andeq	r0, r0, r0, asr #28
    1824:	0000000c 	andeq	r0, r0, ip
    1828:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    182c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1830:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1834:	00000024 	andeq	r0, r0, r4, lsr #32
    1838:	00001824 	andeq	r1, r0, r4, lsr #16
    183c:	00000000 	andeq	r0, r0, r0
    1840:	00000074 	andeq	r0, r0, r4, ror r0
    1844:	40080e41 	andmi	r0, r8, r1, asr #28
    1848:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    184c:	100e4101 	andne	r4, lr, r1, lsl #2
    1850:	6f070d41 	svcvs	0x00070d41
    1854:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    1858:	0000000d 	andeq	r0, r0, sp
    185c:	00000024 	andeq	r0, r0, r4, lsr #32
    1860:	00001824 	andeq	r1, r0, r4, lsr #16
    1864:	08005e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip, lr}
    1868:	00000086 	andeq	r0, r0, r6, lsl #1
    186c:	40040e41 	andmi	r0, r4, r1, asr #28
    1870:	0e410187 	dvfeqd	f0, f1, f7
    1874:	070d4118 	smladeq	sp, r8, r1, r4
    1878:	41040e7d 	tstmi	r4, sp, ror lr
    187c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1880:	00000e40 	andeq	r0, r0, r0, asr #28
    1884:	00000024 	andeq	r0, r0, r4, lsr #32
    1888:	00001824 	andeq	r1, r0, r4, lsr #16
    188c:	00000000 	andeq	r0, r0, r0
    1890:	00000168 	andeq	r0, r0, r8, ror #2
    1894:	40080e41 	andmi	r0, r8, r1, asr #28
    1898:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    189c:	380e4101 	stmdacc	lr, {r0, r8, lr}
    18a0:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    18a4:	41080eaa 	smlatbmi	r8, sl, lr, r0
    18a8:	00000d0d 	andeq	r0, r0, sp, lsl #26
    18ac:	00000024 	andeq	r0, r0, r4, lsr #32
    18b0:	00001824 	andeq	r1, r0, r4, lsr #16
    18b4:	00000000 	andeq	r0, r0, r0
    18b8:	00000048 	andeq	r0, r0, r8, asr #32
    18bc:	40040e41 	andmi	r0, r4, r1, asr #28
    18c0:	0e410187 	dvfeqd	f0, f1, f7
    18c4:	070d4110 	smladeq	sp, r0, r1, r4
    18c8:	41040e5e 	tstmi	r4, lr, asr lr
    18cc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    18d0:	00000e40 	andeq	r0, r0, r0, asr #28
    18d4:	00000024 	andeq	r0, r0, r4, lsr #32
    18d8:	00001824 	andeq	r1, r0, r4, lsr #16
    18dc:	00000000 	andeq	r0, r0, r0
    18e0:	00000036 	andeq	r0, r0, r6, lsr r0
    18e4:	40040e41 	andmi	r0, r4, r1, asr #28
    18e8:	0e410187 	dvfeqd	f0, f1, f7
    18ec:	070d4110 	smladeq	sp, r0, r1, r4
    18f0:	41040e55 	tstmi	r4, r5, asr lr
    18f4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    18f8:	00000e40 	andeq	r0, r0, r0, asr #28
    18fc:	00000024 	andeq	r0, r0, r4, lsr #32
    1900:	00001824 	andeq	r1, r0, r4, lsr #16
    1904:	08005f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip, lr}
    1908:	0000003e 	andeq	r0, r0, lr, lsr r0
    190c:	40040e41 	andmi	r0, r4, r1, asr #28
    1910:	0e410187 	dvfeqd	f0, f1, f7
    1914:	070d4110 	smladeq	sp, r0, r1, r4
    1918:	41040e59 	tstmi	r4, r9, asr lr
    191c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1920:	00000e40 	andeq	r0, r0, r0, asr #28
    1924:	00000024 	andeq	r0, r0, r4, lsr #32
    1928:	00001824 	andeq	r1, r0, r4, lsr #16
    192c:	00000000 	andeq	r0, r0, r0
    1930:	0000003e 	andeq	r0, r0, lr, lsr r0
    1934:	40040e41 	andmi	r0, r4, r1, asr #28
    1938:	0e410187 	dvfeqd	f0, f1, f7
    193c:	070d4110 	smladeq	sp, r0, r1, r4
    1940:	41040e59 	tstmi	r4, r9, asr lr
    1944:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1948:	00000e40 	andeq	r0, r0, r0, asr #28
    194c:	00000024 	andeq	r0, r0, r4, lsr #32
    1950:	00001824 	andeq	r1, r0, r4, lsr #16
    1954:	00000000 	andeq	r0, r0, r0
    1958:	00000060 	andeq	r0, r0, r0, rrx
    195c:	40040e41 	andmi	r0, r4, r1, asr #28
    1960:	0e410187 	dvfeqd	f0, f1, f7
    1964:	070d4118 	smladeq	sp, r8, r1, r4
    1968:	41040e6a 	tstmi	r4, sl, ror #28
    196c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1970:	00000e40 	andeq	r0, r0, r0, asr #28
    1974:	00000024 	andeq	r0, r0, r4, lsr #32
    1978:	00001824 	andeq	r1, r0, r4, lsr #16
    197c:	00000000 	andeq	r0, r0, r0
    1980:	00000046 	andeq	r0, r0, r6, asr #32
    1984:	40040e41 	andmi	r0, r4, r1, asr #28
    1988:	0e410187 	dvfeqd	f0, f1, f7
    198c:	070d4110 	smladeq	sp, r0, r1, r4
    1990:	41040e5d 	tstmi	r4, sp, asr lr
    1994:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1998:	00000e40 	andeq	r0, r0, r0, asr #28
    199c:	00000024 	andeq	r0, r0, r4, lsr #32
    19a0:	00001824 	andeq	r1, r0, r4, lsr #16
    19a4:	08005f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, ip, lr}
    19a8:	0000001c 	andeq	r0, r0, ip, lsl r0
    19ac:	40040e41 	andmi	r0, r4, r1, asr #28
    19b0:	0e410187 	dvfeqd	f0, f1, f7
    19b4:	070d4110 	smladeq	sp, r0, r1, r4
    19b8:	41040e48 	tstmi	r4, r8, asr #28
    19bc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    19c0:	00000e40 	andeq	r0, r0, r0, asr #28
    19c4:	00000024 	andeq	r0, r0, r4, lsr #32
    19c8:	00001824 	andeq	r1, r0, r4, lsr #16
    19cc:	08005f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}
    19d0:	00000018 	andeq	r0, r0, r8, lsl r0
    19d4:	40040e41 	andmi	r0, r4, r1, asr #28
    19d8:	0e410187 	dvfeqd	f0, f1, f7
    19dc:	070d4110 	smladeq	sp, r0, r1, r4
    19e0:	41040e46 	tstmi	r4, r6, asr #28
    19e4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    19e8:	00000e40 	andeq	r0, r0, r0, asr #28
    19ec:	00000024 	andeq	r0, r0, r4, lsr #32
    19f0:	00001824 	andeq	r1, r0, r4, lsr #16
    19f4:	00000000 	andeq	r0, r0, r0
    19f8:	00000042 	andeq	r0, r0, r2, asr #32
    19fc:	40040e41 	andmi	r0, r4, r1, asr #28
    1a00:	0e410187 	dvfeqd	f0, f1, f7
    1a04:	070d4110 	smladeq	sp, r0, r1, r4
    1a08:	41040e5b 	tstmi	r4, fp, asr lr
    1a0c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1a10:	00000e40 	andeq	r0, r0, r0, asr #28
    1a14:	00000024 	andeq	r0, r0, r4, lsr #32
    1a18:	00001824 	andeq	r1, r0, r4, lsr #16
    1a1c:	00000000 	andeq	r0, r0, r0
    1a20:	0000003e 	andeq	r0, r0, lr, lsr r0
    1a24:	40040e41 	andmi	r0, r4, r1, asr #28
    1a28:	0e410187 	dvfeqd	f0, f1, f7
    1a2c:	070d4110 	smladeq	sp, r0, r1, r4
    1a30:	41040e59 	tstmi	r4, r9, asr lr
    1a34:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1a38:	00000e40 	andeq	r0, r0, r0, asr #28
    1a3c:	00000024 	andeq	r0, r0, r4, lsr #32
    1a40:	00001824 	andeq	r1, r0, r4, lsr #16
    1a44:	00000000 	andeq	r0, r0, r0
    1a48:	00000036 	andeq	r0, r0, r6, lsr r0
    1a4c:	40040e41 	andmi	r0, r4, r1, asr #28
    1a50:	0e410187 	dvfeqd	f0, f1, f7
    1a54:	070d4110 	smladeq	sp, r0, r1, r4
    1a58:	41040e55 	tstmi	r4, r5, asr lr
    1a5c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1a60:	00000e40 	andeq	r0, r0, r0, asr #28
    1a64:	00000024 	andeq	r0, r0, r4, lsr #32
    1a68:	00001824 	andeq	r1, r0, r4, lsr #16
    1a6c:	00000000 	andeq	r0, r0, r0
    1a70:	00000022 	andeq	r0, r0, r2, lsr #32
    1a74:	40040e41 	andmi	r0, r4, r1, asr #28
    1a78:	0e410187 	dvfeqd	f0, f1, f7
    1a7c:	070d4110 	smladeq	sp, r0, r1, r4
    1a80:	41040e4b 	tstmi	r4, fp, asr #28
    1a84:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1a88:	00000e40 	andeq	r0, r0, r0, asr #28
    1a8c:	00000024 	andeq	r0, r0, r4, lsr #32
    1a90:	00001824 	andeq	r1, r0, r4, lsr #16
    1a94:	00000000 	andeq	r0, r0, r0
    1a98:	0000003e 	andeq	r0, r0, lr, lsr r0
    1a9c:	40040e41 	andmi	r0, r4, r1, asr #28
    1aa0:	0e410187 	dvfeqd	f0, f1, f7
    1aa4:	070d4110 	smladeq	sp, r0, r1, r4
    1aa8:	41040e59 	tstmi	r4, r9, asr lr
    1aac:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1ab0:	00000e40 	andeq	r0, r0, r0, asr #28
    1ab4:	00000024 	andeq	r0, r0, r4, lsr #32
    1ab8:	00001824 	andeq	r1, r0, r4, lsr #16
    1abc:	00000000 	andeq	r0, r0, r0
    1ac0:	00000030 	andeq	r0, r0, r0, lsr r0
    1ac4:	40040e41 	andmi	r0, r4, r1, asr #28
    1ac8:	0e410187 	dvfeqd	f0, f1, f7
    1acc:	070d4118 	smladeq	sp, r8, r1, r4
    1ad0:	41040e52 	tstmi	r4, r2, asr lr
    1ad4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1ad8:	00000e40 	andeq	r0, r0, r0, asr #28
    1adc:	00000024 	andeq	r0, r0, r4, lsr #32
    1ae0:	00001824 	andeq	r1, r0, r4, lsr #16
    1ae4:	00000000 	andeq	r0, r0, r0
    1ae8:	00000018 	andeq	r0, r0, r8, lsl r0
    1aec:	40040e41 	andmi	r0, r4, r1, asr #28
    1af0:	0e410187 	dvfeqd	f0, f1, f7
    1af4:	070d4110 	smladeq	sp, r0, r1, r4
    1af8:	41040e46 	tstmi	r4, r6, asr #28
    1afc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1b00:	00000e40 	andeq	r0, r0, r0, asr #28
    1b04:	00000024 	andeq	r0, r0, r4, lsr #32
    1b08:	00001824 	andeq	r1, r0, r4, lsr #16
    1b0c:	00000000 	andeq	r0, r0, r0
    1b10:	00000040 	andeq	r0, r0, r0, asr #32
    1b14:	40040e41 	andmi	r0, r4, r1, asr #28
    1b18:	0e410187 	dvfeqd	f0, f1, f7
    1b1c:	070d4110 	smladeq	sp, r0, r1, r4
    1b20:	41040e5a 	tstmi	r4, sl, asr lr
    1b24:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1b28:	00000e40 	andeq	r0, r0, r0, asr #28
    1b2c:	00000024 	andeq	r0, r0, r4, lsr #32
    1b30:	00001824 	andeq	r1, r0, r4, lsr #16
    1b34:	08005f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, ip, lr}
    1b38:	00000036 	andeq	r0, r0, r6, lsr r0
    1b3c:	40040e41 	andmi	r0, r4, r1, asr #28
    1b40:	0e410187 	dvfeqd	f0, f1, f7
    1b44:	070d4118 	smladeq	sp, r8, r1, r4
    1b48:	41040e55 	tstmi	r4, r5, asr lr
    1b4c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1b50:	00000e40 	andeq	r0, r0, r0, asr #28
    1b54:	00000024 	andeq	r0, r0, r4, lsr #32
    1b58:	00001824 	andeq	r1, r0, r4, lsr #16
    1b5c:	00000000 	andeq	r0, r0, r0
    1b60:	00000020 	andeq	r0, r0, r0, lsr #32
    1b64:	40040e41 	andmi	r0, r4, r1, asr #28
    1b68:	0e410187 	dvfeqd	f0, f1, f7
    1b6c:	070d4110 	smladeq	sp, r0, r1, r4
    1b70:	41040e4a 	tstmi	r4, sl, asr #28
    1b74:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1b78:	00000e40 	andeq	r0, r0, r0, asr #28
    1b7c:	00000024 	andeq	r0, r0, r4, lsr #32
    1b80:	00001824 	andeq	r1, r0, r4, lsr #16
    1b84:	00000000 	andeq	r0, r0, r0
    1b88:	00000074 	andeq	r0, r0, r4, ror r0
    1b8c:	40040e41 	andmi	r0, r4, r1, asr #28
    1b90:	0e410187 	dvfeqd	f0, f1, f7
    1b94:	070d4118 	smladeq	sp, r8, r1, r4
    1b98:	41040e74 	tstmi	r4, r4, ror lr
    1b9c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1ba0:	00000e40 	andeq	r0, r0, r0, asr #28
    1ba4:	00000024 	andeq	r0, r0, r4, lsr #32
    1ba8:	00001824 	andeq	r1, r0, r4, lsr #16
    1bac:	00000000 	andeq	r0, r0, r0
    1bb0:	00000032 	andeq	r0, r0, r2, lsr r0
    1bb4:	40040e41 	andmi	r0, r4, r1, asr #28
    1bb8:	0e410187 	dvfeqd	f0, f1, f7
    1bbc:	070d4118 	smladeq	sp, r8, r1, r4
    1bc0:	41040e53 	tstmi	r4, r3, asr lr
    1bc4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1bc8:	00000e40 	andeq	r0, r0, r0, asr #28
    1bcc:	0000000c 	andeq	r0, r0, ip
    1bd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1bd4:	7c020001 	stcvc	0, cr0, [r2], {1}
    1bd8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1bdc:	00000024 	andeq	r0, r0, r4, lsr #32
    1be0:	00001bcc 	andeq	r1, r0, ip, asr #23
    1be4:	00000000 	andeq	r0, r0, r0
    1be8:	0000022c 	andeq	r0, r0, ip, lsr #4
    1bec:	40080e41 	andmi	r0, r8, r1, asr #28
    1bf0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1bf4:	100e4101 	andne	r4, lr, r1, lsl #2
    1bf8:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    1bfc:	41080ef1 	strdmi	r0, [r8, -r1]
    1c00:	00000d0d 	andeq	r0, r0, sp, lsl #26
    1c04:	00000024 	andeq	r0, r0, r4, lsr #32
    1c08:	00001bcc 	andeq	r1, r0, ip, asr #23
    1c0c:	08005fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, ip, lr}
    1c10:	000000f8 	strdeq	r0, [r0], -r8
    1c14:	40040e41 	andmi	r0, r4, r1, asr #28
    1c18:	0e410187 	dvfeqd	f0, f1, f7
    1c1c:	070d4118 	smladeq	sp, r8, r1, r4
    1c20:	040e6202 	streq	r6, [lr], #-514	; 0xfffffdfe
    1c24:	410d0d41 	tstmi	sp, r1, asr #26
    1c28:	000e40c7 	andeq	r4, lr, r7, asr #1
    1c2c:	00000024 	andeq	r0, r0, r4, lsr #32
    1c30:	00001bcc 	andeq	r1, r0, ip, asr #23
    1c34:	00000000 	andeq	r0, r0, r0
    1c38:	00000118 	andeq	r0, r0, r8, lsl r1
    1c3c:	40040e41 	andmi	r0, r4, r1, asr #28
    1c40:	0e410187 	dvfeqd	f0, f1, f7
    1c44:	070d4118 	smladeq	sp, r8, r1, r4
    1c48:	040e7b02 	streq	r7, [lr], #-2818	; 0xfffff4fe
    1c4c:	410d0d41 	tstmi	sp, r1, asr #26
    1c50:	000e40c7 	andeq	r4, lr, r7, asr #1
    1c54:	00000024 	andeq	r0, r0, r4, lsr #32
    1c58:	00001bcc 	andeq	r1, r0, ip, asr #23
    1c5c:	00000000 	andeq	r0, r0, r0
    1c60:	00000110 	andeq	r0, r0, r0, lsl r1
    1c64:	40040e41 	andmi	r0, r4, r1, asr #28
    1c68:	0e410187 	dvfeqd	f0, f1, f7
    1c6c:	070d4118 	smladeq	sp, r8, r1, r4
    1c70:	040e7d02 	streq	r7, [lr], #-3330	; 0xfffff2fe
    1c74:	410d0d41 	tstmi	sp, r1, asr #26
    1c78:	000e40c7 	andeq	r4, lr, r7, asr #1
    1c7c:	00000024 	andeq	r0, r0, r4, lsr #32
    1c80:	00001bcc 	andeq	r1, r0, ip, asr #23
    1c84:	00000000 	andeq	r0, r0, r0
    1c88:	0000010c 	andeq	r0, r0, ip, lsl #2
    1c8c:	40040e41 	andmi	r0, r4, r1, asr #28
    1c90:	0e410187 	dvfeqd	f0, f1, f7
    1c94:	070d4118 	smladeq	sp, r8, r1, r4
    1c98:	040e7b02 	streq	r7, [lr], #-2818	; 0xfffff4fe
    1c9c:	410d0d41 	tstmi	sp, r1, asr #26
    1ca0:	000e40c7 	andeq	r4, lr, r7, asr #1
    1ca4:	00000024 	andeq	r0, r0, r4, lsr #32
    1ca8:	00001bcc 	andeq	r1, r0, ip, asr #23
    1cac:	00000000 	andeq	r0, r0, r0
    1cb0:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1cb4:	40040e41 	andmi	r0, r4, r1, asr #28
    1cb8:	0e410187 	dvfeqd	f0, f1, f7
    1cbc:	070d4118 	smladeq	sp, r8, r1, r4
    1cc0:	040e5d02 	streq	r5, [lr], #-3330	; 0xfffff2fe
    1cc4:	410d0d41 	tstmi	sp, r1, asr #26
    1cc8:	000e40c7 	andeq	r4, lr, r7, asr #1
    1ccc:	00000024 	andeq	r0, r0, r4, lsr #32
    1cd0:	00001bcc 	andeq	r1, r0, ip, asr #23
    1cd4:	00000000 	andeq	r0, r0, r0
    1cd8:	000000a8 	andeq	r0, r0, r8, lsr #1
    1cdc:	40080e41 	andmi	r0, r8, r1, asr #28
    1ce0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1ce4:	100e4101 	andne	r4, lr, r1, lsl #2
    1ce8:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    1cec:	41080e4f 	tstmi	r8, pc, asr #28
    1cf0:	00000d0d 	andeq	r0, r0, sp, lsl #26
    1cf4:	00000024 	andeq	r0, r0, r4, lsr #32
    1cf8:	00001bcc 	andeq	r1, r0, ip, asr #23
    1cfc:	00000000 	andeq	r0, r0, r0
    1d00:	000000b8 	strheq	r0, [r0], -r8
    1d04:	40080e41 	andmi	r0, r8, r1, asr #28
    1d08:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1d0c:	180e4101 	stmdane	lr, {r0, r8, lr}
    1d10:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    1d14:	41080e57 	tstmi	r8, r7, asr lr
    1d18:	00000d0d 	andeq	r0, r0, sp, lsl #26
    1d1c:	00000024 	andeq	r0, r0, r4, lsr #32
    1d20:	00001bcc 	andeq	r1, r0, ip, asr #23
    1d24:	00000000 	andeq	r0, r0, r0
    1d28:	0000004e 	andeq	r0, r0, lr, asr #32
    1d2c:	40040e41 	andmi	r0, r4, r1, asr #28
    1d30:	0e410187 	dvfeqd	f0, f1, f7
    1d34:	070d4110 	smladeq	sp, r0, r1, r4
    1d38:	41040e61 	tstmi	r4, r1, ror #28
    1d3c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1d40:	00000e40 	andeq	r0, r0, r0, asr #28
    1d44:	00000024 	andeq	r0, r0, r4, lsr #32
    1d48:	00001bcc 	andeq	r1, r0, ip, asr #23
    1d4c:	00000000 	andeq	r0, r0, r0
    1d50:	00000032 	andeq	r0, r0, r2, lsr r0
    1d54:	40040e41 	andmi	r0, r4, r1, asr #28
    1d58:	0e410187 	dvfeqd	f0, f1, f7
    1d5c:	070d4110 	smladeq	sp, r0, r1, r4
    1d60:	41040e53 	tstmi	r4, r3, asr lr
    1d64:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1d68:	00000e40 	andeq	r0, r0, r0, asr #28
    1d6c:	00000024 	andeq	r0, r0, r4, lsr #32
    1d70:	00001bcc 	andeq	r1, r0, ip, asr #23
    1d74:	00000000 	andeq	r0, r0, r0
    1d78:	00000042 	andeq	r0, r0, r2, asr #32
    1d7c:	40040e41 	andmi	r0, r4, r1, asr #28
    1d80:	0e410187 	dvfeqd	f0, f1, f7
    1d84:	070d4110 	smladeq	sp, r0, r1, r4
    1d88:	41040e5b 	tstmi	r4, fp, asr lr
    1d8c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1d90:	00000e40 	andeq	r0, r0, r0, asr #28
    1d94:	00000024 	andeq	r0, r0, r4, lsr #32
    1d98:	00001bcc 	andeq	r1, r0, ip, asr #23
    1d9c:	00000000 	andeq	r0, r0, r0
    1da0:	00000030 	andeq	r0, r0, r0, lsr r0
    1da4:	40040e41 	andmi	r0, r4, r1, asr #28
    1da8:	0e410187 	dvfeqd	f0, f1, f7
    1dac:	070d4110 	smladeq	sp, r0, r1, r4
    1db0:	41040e52 	tstmi	r4, r2, asr lr
    1db4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1db8:	00000e40 	andeq	r0, r0, r0, asr #28
    1dbc:	00000024 	andeq	r0, r0, r4, lsr #32
    1dc0:	00001bcc 	andeq	r1, r0, ip, asr #23
    1dc4:	00000000 	andeq	r0, r0, r0
    1dc8:	0000003c 	andeq	r0, r0, ip, lsr r0
    1dcc:	40040e41 	andmi	r0, r4, r1, asr #28
    1dd0:	0e410187 	dvfeqd	f0, f1, f7
    1dd4:	070d4110 	smladeq	sp, r0, r1, r4
    1dd8:	41040e58 	tstmi	r4, r8, asr lr
    1ddc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1de0:	00000e40 	andeq	r0, r0, r0, asr #28
    1de4:	00000024 	andeq	r0, r0, r4, lsr #32
    1de8:	00001bcc 	andeq	r1, r0, ip, asr #23
    1dec:	080060c4 	stmdaeq	r0, {r2, r6, r7, sp, lr}
    1df0:	0000003e 	andeq	r0, r0, lr, lsr r0
    1df4:	40040e41 	andmi	r0, r4, r1, asr #28
    1df8:	0e410187 	dvfeqd	f0, f1, f7
    1dfc:	070d4110 	smladeq	sp, r0, r1, r4
    1e00:	41040e59 	tstmi	r4, r9, asr lr
    1e04:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1e08:	00000e40 	andeq	r0, r0, r0, asr #28
    1e0c:	00000024 	andeq	r0, r0, r4, lsr #32
    1e10:	00001bcc 	andeq	r1, r0, ip, asr #23
    1e14:	00000000 	andeq	r0, r0, r0
    1e18:	0000004a 	andeq	r0, r0, sl, asr #32
    1e1c:	40040e41 	andmi	r0, r4, r1, asr #28
    1e20:	0e410187 	dvfeqd	f0, f1, f7
    1e24:	070d4110 	smladeq	sp, r0, r1, r4
    1e28:	41040e5f 	tstmi	r4, pc, asr lr
    1e2c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1e30:	00000e40 	andeq	r0, r0, r0, asr #28
    1e34:	00000024 	andeq	r0, r0, r4, lsr #32
    1e38:	00001bcc 	andeq	r1, r0, ip, asr #23
    1e3c:	08006104 	stmdaeq	r0, {r2, r8, sp, lr}
    1e40:	00000046 	andeq	r0, r0, r6, asr #32
    1e44:	40040e41 	andmi	r0, r4, r1, asr #28
    1e48:	0e410187 	dvfeqd	f0, f1, f7
    1e4c:	070d4110 	smladeq	sp, r0, r1, r4
    1e50:	41040e5d 	tstmi	r4, sp, asr lr
    1e54:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1e58:	00000e40 	andeq	r0, r0, r0, asr #28
    1e5c:	00000024 	andeq	r0, r0, r4, lsr #32
    1e60:	00001bcc 	andeq	r1, r0, ip, asr #23
    1e64:	00000000 	andeq	r0, r0, r0
    1e68:	0000001c 	andeq	r0, r0, ip, lsl r0
    1e6c:	40040e41 	andmi	r0, r4, r1, asr #28
    1e70:	0e410187 	dvfeqd	f0, f1, f7
    1e74:	070d4110 	smladeq	sp, r0, r1, r4
    1e78:	41040e48 	tstmi	r4, r8, asr #28
    1e7c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1e80:	00000e40 	andeq	r0, r0, r0, asr #28
    1e84:	00000024 	andeq	r0, r0, r4, lsr #32
    1e88:	00001bcc 	andeq	r1, r0, ip, asr #23
    1e8c:	00000000 	andeq	r0, r0, r0
    1e90:	00000028 	andeq	r0, r0, r8, lsr #32
    1e94:	40040e41 	andmi	r0, r4, r1, asr #28
    1e98:	0e410187 	dvfeqd	f0, f1, f7
    1e9c:	070d4110 	smladeq	sp, r0, r1, r4
    1ea0:	41040e4e 	tstmi	r4, lr, asr #28
    1ea4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1ea8:	00000e40 	andeq	r0, r0, r0, asr #28
    1eac:	00000024 	andeq	r0, r0, r4, lsr #32
    1eb0:	00001bcc 	andeq	r1, r0, ip, asr #23
    1eb4:	00000000 	andeq	r0, r0, r0
    1eb8:	00000046 	andeq	r0, r0, r6, asr #32
    1ebc:	40040e41 	andmi	r0, r4, r1, asr #28
    1ec0:	0e410187 	dvfeqd	f0, f1, f7
    1ec4:	070d4110 	smladeq	sp, r0, r1, r4
    1ec8:	41040e5d 	tstmi	r4, sp, asr lr
    1ecc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1ed0:	00000e40 	andeq	r0, r0, r0, asr #28
    1ed4:	00000024 	andeq	r0, r0, r4, lsr #32
    1ed8:	00001bcc 	andeq	r1, r0, ip, asr #23
    1edc:	00000000 	andeq	r0, r0, r0
    1ee0:	00000022 	andeq	r0, r0, r2, lsr #32
    1ee4:	40040e41 	andmi	r0, r4, r1, asr #28
    1ee8:	0e410187 	dvfeqd	f0, f1, f7
    1eec:	070d4110 	smladeq	sp, r0, r1, r4
    1ef0:	41040e4b 	tstmi	r4, fp, asr #28
    1ef4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1ef8:	00000e40 	andeq	r0, r0, r0, asr #28
    1efc:	00000024 	andeq	r0, r0, r4, lsr #32
    1f00:	00001bcc 	andeq	r1, r0, ip, asr #23
    1f04:	00000000 	andeq	r0, r0, r0
    1f08:	0000002e 	andeq	r0, r0, lr, lsr #32
    1f0c:	40080e41 	andmi	r0, r8, r1, asr #28
    1f10:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1f14:	100e4101 	andne	r4, lr, r1, lsl #2
    1f18:	52070d41 	andpl	r0, r7, #4160	; 0x1040
    1f1c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    1f20:	0000000d 	andeq	r0, r0, sp
    1f24:	00000024 	andeq	r0, r0, r4, lsr #32
    1f28:	00001bcc 	andeq	r1, r0, ip, asr #23
    1f2c:	00000000 	andeq	r0, r0, r0
    1f30:	0000005c 	andeq	r0, r0, ip, asr r0
    1f34:	40080e41 	andmi	r0, r8, r1, asr #28
    1f38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1f3c:	180e4101 	stmdane	lr, {r0, r8, lr}
    1f40:	69070d41 	stmdbvs	r7, {r0, r6, r8, sl, fp}
    1f44:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    1f48:	0000000d 	andeq	r0, r0, sp
    1f4c:	00000024 	andeq	r0, r0, r4, lsr #32
    1f50:	00001bcc 	andeq	r1, r0, ip, asr #23
    1f54:	00000000 	andeq	r0, r0, r0
    1f58:	0000005e 	andeq	r0, r0, lr, asr r0
    1f5c:	40080e41 	andmi	r0, r8, r1, asr #28
    1f60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1f64:	200e4101 	andcs	r4, lr, r1, lsl #2
    1f68:	6a070d41 	bvs	1c5474 <_Min_Stack_Size+0x1c5274>
    1f6c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    1f70:	0000000d 	andeq	r0, r0, sp
    1f74:	00000024 	andeq	r0, r0, r4, lsr #32
    1f78:	00001bcc 	andeq	r1, r0, ip, asr #23
    1f7c:	00000000 	andeq	r0, r0, r0
    1f80:	0000003e 	andeq	r0, r0, lr, lsr r0
    1f84:	40080e41 	andmi	r0, r8, r1, asr #28
    1f88:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1f8c:	180e4101 	stmdane	lr, {r0, r8, lr}
    1f90:	5a070d41 	bpl	1c549c <_Min_Stack_Size+0x1c529c>
    1f94:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    1f98:	0000000d 	andeq	r0, r0, sp
    1f9c:	00000024 	andeq	r0, r0, r4, lsr #32
    1fa0:	00001bcc 	andeq	r1, r0, ip, asr #23
    1fa4:	00000000 	andeq	r0, r0, r0
    1fa8:	00000052 	andeq	r0, r0, r2, asr r0
    1fac:	40040e41 	andmi	r0, r4, r1, asr #28
    1fb0:	0e410187 	dvfeqd	f0, f1, f7
    1fb4:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    1fb8:	41040e63 	tstmi	r4, r3, ror #28
    1fbc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1fc0:	00000e40 	andeq	r0, r0, r0, asr #28
    1fc4:	00000024 	andeq	r0, r0, r4, lsr #32
    1fc8:	00001bcc 	andeq	r1, r0, ip, asr #23
    1fcc:	00000000 	andeq	r0, r0, r0
    1fd0:	00000026 	andeq	r0, r0, r6, lsr #32
    1fd4:	40040e41 	andmi	r0, r4, r1, asr #28
    1fd8:	0e410187 	dvfeqd	f0, f1, f7
    1fdc:	070d4110 	smladeq	sp, r0, r1, r4
    1fe0:	41040e4d 	tstmi	r4, sp, asr #28
    1fe4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1fe8:	00000e40 	andeq	r0, r0, r0, asr #28
    1fec:	00000024 	andeq	r0, r0, r4, lsr #32
    1ff0:	00001bcc 	andeq	r1, r0, ip, asr #23
    1ff4:	00000000 	andeq	r0, r0, r0
    1ff8:	00000036 	andeq	r0, r0, r6, lsr r0
    1ffc:	40040e41 	andmi	r0, r4, r1, asr #28
    2000:	0e410187 	dvfeqd	f0, f1, f7
    2004:	070d4118 	smladeq	sp, r8, r1, r4
    2008:	41040e55 	tstmi	r4, r5, asr lr
    200c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2010:	00000e40 	andeq	r0, r0, r0, asr #28
    2014:	00000024 	andeq	r0, r0, r4, lsr #32
    2018:	00001bcc 	andeq	r1, r0, ip, asr #23
    201c:	00000000 	andeq	r0, r0, r0
    2020:	00000036 	andeq	r0, r0, r6, lsr r0
    2024:	40040e41 	andmi	r0, r4, r1, asr #28
    2028:	0e410187 	dvfeqd	f0, f1, f7
    202c:	070d4118 	smladeq	sp, r8, r1, r4
    2030:	41040e55 	tstmi	r4, r5, asr lr
    2034:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2038:	00000e40 	andeq	r0, r0, r0, asr #28
    203c:	00000024 	andeq	r0, r0, r4, lsr #32
    2040:	00001bcc 	andeq	r1, r0, ip, asr #23
    2044:	00000000 	andeq	r0, r0, r0
    2048:	00000096 	muleq	r0, r6, r0
    204c:	40040e41 	andmi	r0, r4, r1, asr #28
    2050:	0e410187 	dvfeqd	f0, f1, f7
    2054:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    2058:	040e4502 	streq	r4, [lr], #-1282	; 0xfffffafe
    205c:	410d0d41 	tstmi	sp, r1, asr #26
    2060:	000e40c7 	andeq	r4, lr, r7, asr #1
    2064:	00000024 	andeq	r0, r0, r4, lsr #32
    2068:	00001bcc 	andeq	r1, r0, ip, asr #23
    206c:	00000000 	andeq	r0, r0, r0
    2070:	00000036 	andeq	r0, r0, r6, lsr r0
    2074:	40040e41 	andmi	r0, r4, r1, asr #28
    2078:	0e410187 	dvfeqd	f0, f1, f7
    207c:	070d4118 	smladeq	sp, r8, r1, r4
    2080:	41040e55 	tstmi	r4, r5, asr lr
    2084:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2088:	00000e40 	andeq	r0, r0, r0, asr #28
    208c:	00000024 	andeq	r0, r0, r4, lsr #32
    2090:	00001bcc 	andeq	r1, r0, ip, asr #23
    2094:	00000000 	andeq	r0, r0, r0
    2098:	0000003a 	andeq	r0, r0, sl, lsr r0
    209c:	40040e41 	andmi	r0, r4, r1, asr #28
    20a0:	0e410187 	dvfeqd	f0, f1, f7
    20a4:	070d4118 	smladeq	sp, r8, r1, r4
    20a8:	41040e57 	tstmi	r4, r7, asr lr
    20ac:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    20b0:	00000e40 	andeq	r0, r0, r0, asr #28
    20b4:	00000024 	andeq	r0, r0, r4, lsr #32
    20b8:	00001bcc 	andeq	r1, r0, ip, asr #23
    20bc:	00000000 	andeq	r0, r0, r0
    20c0:	00000036 	andeq	r0, r0, r6, lsr r0
    20c4:	40040e41 	andmi	r0, r4, r1, asr #28
    20c8:	0e410187 	dvfeqd	f0, f1, f7
    20cc:	070d4118 	smladeq	sp, r8, r1, r4
    20d0:	41040e55 	tstmi	r4, r5, asr lr
    20d4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    20d8:	00000e40 	andeq	r0, r0, r0, asr #28
    20dc:	00000024 	andeq	r0, r0, r4, lsr #32
    20e0:	00001bcc 	andeq	r1, r0, ip, asr #23
    20e4:	00000000 	andeq	r0, r0, r0
    20e8:	0000003a 	andeq	r0, r0, sl, lsr r0
    20ec:	40040e41 	andmi	r0, r4, r1, asr #28
    20f0:	0e410187 	dvfeqd	f0, f1, f7
    20f4:	070d4118 	smladeq	sp, r8, r1, r4
    20f8:	41040e57 	tstmi	r4, r7, asr lr
    20fc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2100:	00000e40 	andeq	r0, r0, r0, asr #28
    2104:	00000024 	andeq	r0, r0, r4, lsr #32
    2108:	00001bcc 	andeq	r1, r0, ip, asr #23
    210c:	00000000 	andeq	r0, r0, r0
    2110:	0000003e 	andeq	r0, r0, lr, lsr r0
    2114:	40040e41 	andmi	r0, r4, r1, asr #28
    2118:	0e410187 	dvfeqd	f0, f1, f7
    211c:	070d4110 	smladeq	sp, r0, r1, r4
    2120:	41040e59 	tstmi	r4, r9, asr lr
    2124:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2128:	00000e40 	andeq	r0, r0, r0, asr #28
    212c:	00000024 	andeq	r0, r0, r4, lsr #32
    2130:	00001bcc 	andeq	r1, r0, ip, asr #23
    2134:	00000000 	andeq	r0, r0, r0
    2138:	0000003e 	andeq	r0, r0, lr, lsr r0
    213c:	40040e41 	andmi	r0, r4, r1, asr #28
    2140:	0e410187 	dvfeqd	f0, f1, f7
    2144:	070d4110 	smladeq	sp, r0, r1, r4
    2148:	41040e59 	tstmi	r4, r9, asr lr
    214c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2150:	00000e40 	andeq	r0, r0, r0, asr #28
    2154:	00000024 	andeq	r0, r0, r4, lsr #32
    2158:	00001bcc 	andeq	r1, r0, ip, asr #23
    215c:	00000000 	andeq	r0, r0, r0
    2160:	0000003e 	andeq	r0, r0, lr, lsr r0
    2164:	40040e41 	andmi	r0, r4, r1, asr #28
    2168:	0e410187 	dvfeqd	f0, f1, f7
    216c:	070d4110 	smladeq	sp, r0, r1, r4
    2170:	41040e59 	tstmi	r4, r9, asr lr
    2174:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2178:	00000e40 	andeq	r0, r0, r0, asr #28
    217c:	00000024 	andeq	r0, r0, r4, lsr #32
    2180:	00001bcc 	andeq	r1, r0, ip, asr #23
    2184:	00000000 	andeq	r0, r0, r0
    2188:	0000003e 	andeq	r0, r0, lr, lsr r0
    218c:	40040e41 	andmi	r0, r4, r1, asr #28
    2190:	0e410187 	dvfeqd	f0, f1, f7
    2194:	070d4110 	smladeq	sp, r0, r1, r4
    2198:	41040e59 	tstmi	r4, r9, asr lr
    219c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    21a0:	00000e40 	andeq	r0, r0, r0, asr #28
    21a4:	00000024 	andeq	r0, r0, r4, lsr #32
    21a8:	00001bcc 	andeq	r1, r0, ip, asr #23
    21ac:	00000000 	andeq	r0, r0, r0
    21b0:	00000036 	andeq	r0, r0, r6, lsr r0
    21b4:	40040e41 	andmi	r0, r4, r1, asr #28
    21b8:	0e410187 	dvfeqd	f0, f1, f7
    21bc:	070d4118 	smladeq	sp, r8, r1, r4
    21c0:	41040e55 	tstmi	r4, r5, asr lr
    21c4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    21c8:	00000e40 	andeq	r0, r0, r0, asr #28
    21cc:	00000024 	andeq	r0, r0, r4, lsr #32
    21d0:	00001bcc 	andeq	r1, r0, ip, asr #23
    21d4:	00000000 	andeq	r0, r0, r0
    21d8:	0000003a 	andeq	r0, r0, sl, lsr r0
    21dc:	40040e41 	andmi	r0, r4, r1, asr #28
    21e0:	0e410187 	dvfeqd	f0, f1, f7
    21e4:	070d4118 	smladeq	sp, r8, r1, r4
    21e8:	41040e57 	tstmi	r4, r7, asr lr
    21ec:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    21f0:	00000e40 	andeq	r0, r0, r0, asr #28
    21f4:	00000024 	andeq	r0, r0, r4, lsr #32
    21f8:	00001bcc 	andeq	r1, r0, ip, asr #23
    21fc:	00000000 	andeq	r0, r0, r0
    2200:	00000036 	andeq	r0, r0, r6, lsr r0
    2204:	40040e41 	andmi	r0, r4, r1, asr #28
    2208:	0e410187 	dvfeqd	f0, f1, f7
    220c:	070d4118 	smladeq	sp, r8, r1, r4
    2210:	41040e55 	tstmi	r4, r5, asr lr
    2214:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2218:	00000e40 	andeq	r0, r0, r0, asr #28
    221c:	00000024 	andeq	r0, r0, r4, lsr #32
    2220:	00001bcc 	andeq	r1, r0, ip, asr #23
    2224:	00000000 	andeq	r0, r0, r0
    2228:	0000003a 	andeq	r0, r0, sl, lsr r0
    222c:	40040e41 	andmi	r0, r4, r1, asr #28
    2230:	0e410187 	dvfeqd	f0, f1, f7
    2234:	070d4118 	smladeq	sp, r8, r1, r4
    2238:	41040e57 	tstmi	r4, r7, asr lr
    223c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2240:	00000e40 	andeq	r0, r0, r0, asr #28
    2244:	00000024 	andeq	r0, r0, r4, lsr #32
    2248:	00001bcc 	andeq	r1, r0, ip, asr #23
    224c:	00000000 	andeq	r0, r0, r0
    2250:	00000036 	andeq	r0, r0, r6, lsr r0
    2254:	40040e41 	andmi	r0, r4, r1, asr #28
    2258:	0e410187 	dvfeqd	f0, f1, f7
    225c:	070d4118 	smladeq	sp, r8, r1, r4
    2260:	41040e55 	tstmi	r4, r5, asr lr
    2264:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2268:	00000e40 	andeq	r0, r0, r0, asr #28
    226c:	00000024 	andeq	r0, r0, r4, lsr #32
    2270:	00001bcc 	andeq	r1, r0, ip, asr #23
    2274:	00000000 	andeq	r0, r0, r0
    2278:	0000003a 	andeq	r0, r0, sl, lsr r0
    227c:	40040e41 	andmi	r0, r4, r1, asr #28
    2280:	0e410187 	dvfeqd	f0, f1, f7
    2284:	070d4118 	smladeq	sp, r8, r1, r4
    2288:	41040e57 	tstmi	r4, r7, asr lr
    228c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2290:	00000e40 	andeq	r0, r0, r0, asr #28
    2294:	00000024 	andeq	r0, r0, r4, lsr #32
    2298:	00001bcc 	andeq	r1, r0, ip, asr #23
    229c:	00000000 	andeq	r0, r0, r0
    22a0:	00000036 	andeq	r0, r0, r6, lsr r0
    22a4:	40040e41 	andmi	r0, r4, r1, asr #28
    22a8:	0e410187 	dvfeqd	f0, f1, f7
    22ac:	070d4118 	smladeq	sp, r8, r1, r4
    22b0:	41040e55 	tstmi	r4, r5, asr lr
    22b4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    22b8:	00000e40 	andeq	r0, r0, r0, asr #28
    22bc:	00000024 	andeq	r0, r0, r4, lsr #32
    22c0:	00001bcc 	andeq	r1, r0, ip, asr #23
    22c4:	00000000 	andeq	r0, r0, r0
    22c8:	0000003a 	andeq	r0, r0, sl, lsr r0
    22cc:	40040e41 	andmi	r0, r4, r1, asr #28
    22d0:	0e410187 	dvfeqd	f0, f1, f7
    22d4:	070d4118 	smladeq	sp, r8, r1, r4
    22d8:	41040e57 	tstmi	r4, r7, asr lr
    22dc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    22e0:	00000e40 	andeq	r0, r0, r0, asr #28
    22e4:	00000024 	andeq	r0, r0, r4, lsr #32
    22e8:	00001bcc 	andeq	r1, r0, ip, asr #23
    22ec:	00000000 	andeq	r0, r0, r0
    22f0:	00000036 	andeq	r0, r0, r6, lsr r0
    22f4:	40040e41 	andmi	r0, r4, r1, asr #28
    22f8:	0e410187 	dvfeqd	f0, f1, f7
    22fc:	070d4118 	smladeq	sp, r8, r1, r4
    2300:	41040e55 	tstmi	r4, r5, asr lr
    2304:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2308:	00000e40 	andeq	r0, r0, r0, asr #28
    230c:	00000024 	andeq	r0, r0, r4, lsr #32
    2310:	00001bcc 	andeq	r1, r0, ip, asr #23
    2314:	00000000 	andeq	r0, r0, r0
    2318:	0000003a 	andeq	r0, r0, sl, lsr r0
    231c:	40040e41 	andmi	r0, r4, r1, asr #28
    2320:	0e410187 	dvfeqd	f0, f1, f7
    2324:	070d4118 	smladeq	sp, r8, r1, r4
    2328:	41040e57 	tstmi	r4, r7, asr lr
    232c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2330:	00000e40 	andeq	r0, r0, r0, asr #28
    2334:	00000024 	andeq	r0, r0, r4, lsr #32
    2338:	00001bcc 	andeq	r1, r0, ip, asr #23
    233c:	00000000 	andeq	r0, r0, r0
    2340:	00000036 	andeq	r0, r0, r6, lsr r0
    2344:	40040e41 	andmi	r0, r4, r1, asr #28
    2348:	0e410187 	dvfeqd	f0, f1, f7
    234c:	070d4118 	smladeq	sp, r8, r1, r4
    2350:	41040e55 	tstmi	r4, r5, asr lr
    2354:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2358:	00000e40 	andeq	r0, r0, r0, asr #28
    235c:	00000024 	andeq	r0, r0, r4, lsr #32
    2360:	00001bcc 	andeq	r1, r0, ip, asr #23
    2364:	00000000 	andeq	r0, r0, r0
    2368:	0000003a 	andeq	r0, r0, sl, lsr r0
    236c:	40040e41 	andmi	r0, r4, r1, asr #28
    2370:	0e410187 	dvfeqd	f0, f1, f7
    2374:	070d4118 	smladeq	sp, r8, r1, r4
    2378:	41040e57 	tstmi	r4, r7, asr lr
    237c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2380:	00000e40 	andeq	r0, r0, r0, asr #28
    2384:	00000024 	andeq	r0, r0, r4, lsr #32
    2388:	00001bcc 	andeq	r1, r0, ip, asr #23
    238c:	00000000 	andeq	r0, r0, r0
    2390:	00000036 	andeq	r0, r0, r6, lsr r0
    2394:	40040e41 	andmi	r0, r4, r1, asr #28
    2398:	0e410187 	dvfeqd	f0, f1, f7
    239c:	070d4118 	smladeq	sp, r8, r1, r4
    23a0:	41040e55 	tstmi	r4, r5, asr lr
    23a4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    23a8:	00000e40 	andeq	r0, r0, r0, asr #28
    23ac:	00000024 	andeq	r0, r0, r4, lsr #32
    23b0:	00001bcc 	andeq	r1, r0, ip, asr #23
    23b4:	00000000 	andeq	r0, r0, r0
    23b8:	00000036 	andeq	r0, r0, r6, lsr r0
    23bc:	40040e41 	andmi	r0, r4, r1, asr #28
    23c0:	0e410187 	dvfeqd	f0, f1, f7
    23c4:	070d4118 	smladeq	sp, r8, r1, r4
    23c8:	41040e55 	tstmi	r4, r5, asr lr
    23cc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    23d0:	00000e40 	andeq	r0, r0, r0, asr #28
    23d4:	00000024 	andeq	r0, r0, r4, lsr #32
    23d8:	00001bcc 	andeq	r1, r0, ip, asr #23
    23dc:	00000000 	andeq	r0, r0, r0
    23e0:	0000003a 	andeq	r0, r0, sl, lsr r0
    23e4:	40040e41 	andmi	r0, r4, r1, asr #28
    23e8:	0e410187 	dvfeqd	f0, f1, f7
    23ec:	070d4118 	smladeq	sp, r8, r1, r4
    23f0:	41040e57 	tstmi	r4, r7, asr lr
    23f4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    23f8:	00000e40 	andeq	r0, r0, r0, asr #28
    23fc:	00000024 	andeq	r0, r0, r4, lsr #32
    2400:	00001bcc 	andeq	r1, r0, ip, asr #23
    2404:	00000000 	andeq	r0, r0, r0
    2408:	0000003a 	andeq	r0, r0, sl, lsr r0
    240c:	40040e41 	andmi	r0, r4, r1, asr #28
    2410:	0e410187 	dvfeqd	f0, f1, f7
    2414:	070d4118 	smladeq	sp, r8, r1, r4
    2418:	41040e57 	tstmi	r4, r7, asr lr
    241c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2420:	00000e40 	andeq	r0, r0, r0, asr #28
    2424:	00000024 	andeq	r0, r0, r4, lsr #32
    2428:	00001bcc 	andeq	r1, r0, ip, asr #23
    242c:	00000000 	andeq	r0, r0, r0
    2430:	0000003a 	andeq	r0, r0, sl, lsr r0
    2434:	40040e41 	andmi	r0, r4, r1, asr #28
    2438:	0e410187 	dvfeqd	f0, f1, f7
    243c:	070d4118 	smladeq	sp, r8, r1, r4
    2440:	41040e57 	tstmi	r4, r7, asr lr
    2444:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2448:	00000e40 	andeq	r0, r0, r0, asr #28
    244c:	00000024 	andeq	r0, r0, r4, lsr #32
    2450:	00001bcc 	andeq	r1, r0, ip, asr #23
    2454:	00000000 	andeq	r0, r0, r0
    2458:	0000003a 	andeq	r0, r0, sl, lsr r0
    245c:	40040e41 	andmi	r0, r4, r1, asr #28
    2460:	0e410187 	dvfeqd	f0, f1, f7
    2464:	070d4118 	smladeq	sp, r8, r1, r4
    2468:	41040e57 	tstmi	r4, r7, asr lr
    246c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2470:	00000e40 	andeq	r0, r0, r0, asr #28
    2474:	00000024 	andeq	r0, r0, r4, lsr #32
    2478:	00001bcc 	andeq	r1, r0, ip, asr #23
    247c:	00000000 	andeq	r0, r0, r0
    2480:	0000003a 	andeq	r0, r0, sl, lsr r0
    2484:	40040e41 	andmi	r0, r4, r1, asr #28
    2488:	0e410187 	dvfeqd	f0, f1, f7
    248c:	070d4118 	smladeq	sp, r8, r1, r4
    2490:	41040e57 	tstmi	r4, r7, asr lr
    2494:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2498:	00000e40 	andeq	r0, r0, r0, asr #28
    249c:	00000024 	andeq	r0, r0, r4, lsr #32
    24a0:	00001bcc 	andeq	r1, r0, ip, asr #23
    24a4:	00000000 	andeq	r0, r0, r0
    24a8:	00000054 	andeq	r0, r0, r4, asr r0
    24ac:	40040e41 	andmi	r0, r4, r1, asr #28
    24b0:	0e410187 	dvfeqd	f0, f1, f7
    24b4:	070d4118 	smladeq	sp, r8, r1, r4
    24b8:	41040e64 	tstmi	r4, r4, ror #28
    24bc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    24c0:	00000e40 	andeq	r0, r0, r0, asr #28
    24c4:	00000024 	andeq	r0, r0, r4, lsr #32
    24c8:	00001bcc 	andeq	r1, r0, ip, asr #23
    24cc:	00000000 	andeq	r0, r0, r0
    24d0:	00000054 	andeq	r0, r0, r4, asr r0
    24d4:	40040e41 	andmi	r0, r4, r1, asr #28
    24d8:	0e410187 	dvfeqd	f0, f1, f7
    24dc:	070d4118 	smladeq	sp, r8, r1, r4
    24e0:	41040e64 	tstmi	r4, r4, ror #28
    24e4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    24e8:	00000e40 	andeq	r0, r0, r0, asr #28
    24ec:	00000024 	andeq	r0, r0, r4, lsr #32
    24f0:	00001bcc 	andeq	r1, r0, ip, asr #23
    24f4:	00000000 	andeq	r0, r0, r0
    24f8:	000000ac 	andeq	r0, r0, ip, lsr #1
    24fc:	40040e41 	andmi	r0, r4, r1, asr #28
    2500:	0e410187 	dvfeqd	f0, f1, f7
    2504:	070d4118 	smladeq	sp, r8, r1, r4
    2508:	040e5002 	streq	r5, [lr], #-2
    250c:	410d0d41 	tstmi	sp, r1, asr #26
    2510:	000e40c7 	andeq	r4, lr, r7, asr #1
    2514:	00000024 	andeq	r0, r0, r4, lsr #32
    2518:	00001bcc 	andeq	r1, r0, ip, asr #23
    251c:	00000000 	andeq	r0, r0, r0
    2520:	0000003e 	andeq	r0, r0, lr, lsr r0
    2524:	40040e41 	andmi	r0, r4, r1, asr #28
    2528:	0e410187 	dvfeqd	f0, f1, f7
    252c:	070d4110 	smladeq	sp, r0, r1, r4
    2530:	41040e59 	tstmi	r4, r9, asr lr
    2534:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2538:	00000e40 	andeq	r0, r0, r0, asr #28
    253c:	00000024 	andeq	r0, r0, r4, lsr #32
    2540:	00001bcc 	andeq	r1, r0, ip, asr #23
    2544:	00000000 	andeq	r0, r0, r0
    2548:	0000003e 	andeq	r0, r0, lr, lsr r0
    254c:	40040e41 	andmi	r0, r4, r1, asr #28
    2550:	0e410187 	dvfeqd	f0, f1, f7
    2554:	070d4110 	smladeq	sp, r0, r1, r4
    2558:	41040e59 	tstmi	r4, r9, asr lr
    255c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2560:	00000e40 	andeq	r0, r0, r0, asr #28
    2564:	00000024 	andeq	r0, r0, r4, lsr #32
    2568:	00001bcc 	andeq	r1, r0, ip, asr #23
    256c:	00000000 	andeq	r0, r0, r0
    2570:	0000003e 	andeq	r0, r0, lr, lsr r0
    2574:	40040e41 	andmi	r0, r4, r1, asr #28
    2578:	0e410187 	dvfeqd	f0, f1, f7
    257c:	070d4110 	smladeq	sp, r0, r1, r4
    2580:	41040e59 	tstmi	r4, r9, asr lr
    2584:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2588:	00000e40 	andeq	r0, r0, r0, asr #28
    258c:	00000024 	andeq	r0, r0, r4, lsr #32
    2590:	00001bcc 	andeq	r1, r0, ip, asr #23
    2594:	00000000 	andeq	r0, r0, r0
    2598:	00000036 	andeq	r0, r0, r6, lsr r0
    259c:	40040e41 	andmi	r0, r4, r1, asr #28
    25a0:	0e410187 	dvfeqd	f0, f1, f7
    25a4:	070d4110 	smladeq	sp, r0, r1, r4
    25a8:	41040e55 	tstmi	r4, r5, asr lr
    25ac:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    25b0:	00000e40 	andeq	r0, r0, r0, asr #28
    25b4:	00000024 	andeq	r0, r0, r4, lsr #32
    25b8:	00001bcc 	andeq	r1, r0, ip, asr #23
    25bc:	00000000 	andeq	r0, r0, r0
    25c0:	00000036 	andeq	r0, r0, r6, lsr r0
    25c4:	40040e41 	andmi	r0, r4, r1, asr #28
    25c8:	0e410187 	dvfeqd	f0, f1, f7
    25cc:	070d4110 	smladeq	sp, r0, r1, r4
    25d0:	41040e55 	tstmi	r4, r5, asr lr
    25d4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    25d8:	00000e40 	andeq	r0, r0, r0, asr #28
    25dc:	00000024 	andeq	r0, r0, r4, lsr #32
    25e0:	00001bcc 	andeq	r1, r0, ip, asr #23
    25e4:	00000000 	andeq	r0, r0, r0
    25e8:	00000036 	andeq	r0, r0, r6, lsr r0
    25ec:	40040e41 	andmi	r0, r4, r1, asr #28
    25f0:	0e410187 	dvfeqd	f0, f1, f7
    25f4:	070d4110 	smladeq	sp, r0, r1, r4
    25f8:	41040e55 	tstmi	r4, r5, asr lr
    25fc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2600:	00000e40 	andeq	r0, r0, r0, asr #28
    2604:	00000024 	andeq	r0, r0, r4, lsr #32
    2608:	00001bcc 	andeq	r1, r0, ip, asr #23
    260c:	00000000 	andeq	r0, r0, r0
    2610:	00000036 	andeq	r0, r0, r6, lsr r0
    2614:	40040e41 	andmi	r0, r4, r1, asr #28
    2618:	0e410187 	dvfeqd	f0, f1, f7
    261c:	070d4110 	smladeq	sp, r0, r1, r4
    2620:	41040e55 	tstmi	r4, r5, asr lr
    2624:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2628:	00000e40 	andeq	r0, r0, r0, asr #28
    262c:	00000024 	andeq	r0, r0, r4, lsr #32
    2630:	00001bcc 	andeq	r1, r0, ip, asr #23
    2634:	00000000 	andeq	r0, r0, r0
    2638:	0000001c 	andeq	r0, r0, ip, lsl r0
    263c:	40040e41 	andmi	r0, r4, r1, asr #28
    2640:	0e410187 	dvfeqd	f0, f1, f7
    2644:	070d4110 	smladeq	sp, r0, r1, r4
    2648:	41040e48 	tstmi	r4, r8, asr #28
    264c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2650:	00000e40 	andeq	r0, r0, r0, asr #28
    2654:	00000024 	andeq	r0, r0, r4, lsr #32
    2658:	00001bcc 	andeq	r1, r0, ip, asr #23
    265c:	00000000 	andeq	r0, r0, r0
    2660:	0000001c 	andeq	r0, r0, ip, lsl r0
    2664:	40040e41 	andmi	r0, r4, r1, asr #28
    2668:	0e410187 	dvfeqd	f0, f1, f7
    266c:	070d4110 	smladeq	sp, r0, r1, r4
    2670:	41040e48 	tstmi	r4, r8, asr #28
    2674:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2678:	00000e40 	andeq	r0, r0, r0, asr #28
    267c:	00000024 	andeq	r0, r0, r4, lsr #32
    2680:	00001bcc 	andeq	r1, r0, ip, asr #23
    2684:	00000000 	andeq	r0, r0, r0
    2688:	0000001c 	andeq	r0, r0, ip, lsl r0
    268c:	40040e41 	andmi	r0, r4, r1, asr #28
    2690:	0e410187 	dvfeqd	f0, f1, f7
    2694:	070d4110 	smladeq	sp, r0, r1, r4
    2698:	41040e48 	tstmi	r4, r8, asr #28
    269c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    26a0:	00000e40 	andeq	r0, r0, r0, asr #28
    26a4:	00000024 	andeq	r0, r0, r4, lsr #32
    26a8:	00001bcc 	andeq	r1, r0, ip, asr #23
    26ac:	00000000 	andeq	r0, r0, r0
    26b0:	0000001c 	andeq	r0, r0, ip, lsl r0
    26b4:	40040e41 	andmi	r0, r4, r1, asr #28
    26b8:	0e410187 	dvfeqd	f0, f1, f7
    26bc:	070d4110 	smladeq	sp, r0, r1, r4
    26c0:	41040e48 	tstmi	r4, r8, asr #28
    26c4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    26c8:	00000e40 	andeq	r0, r0, r0, asr #28
    26cc:	00000024 	andeq	r0, r0, r4, lsr #32
    26d0:	00001bcc 	andeq	r1, r0, ip, asr #23
    26d4:	00000000 	andeq	r0, r0, r0
    26d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    26dc:	40040e41 	andmi	r0, r4, r1, asr #28
    26e0:	0e410187 	dvfeqd	f0, f1, f7
    26e4:	070d4110 	smladeq	sp, r0, r1, r4
    26e8:	41040e48 	tstmi	r4, r8, asr #28
    26ec:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    26f0:	00000e40 	andeq	r0, r0, r0, asr #28
    26f4:	00000024 	andeq	r0, r0, r4, lsr #32
    26f8:	00001bcc 	andeq	r1, r0, ip, asr #23
    26fc:	00000000 	andeq	r0, r0, r0
    2700:	0000001e 	andeq	r0, r0, lr, lsl r0
    2704:	40040e41 	andmi	r0, r4, r1, asr #28
    2708:	0e410187 	dvfeqd	f0, f1, f7
    270c:	070d4110 	smladeq	sp, r0, r1, r4
    2710:	41040e49 	tstmi	r4, r9, asr #28
    2714:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2718:	00000e40 	andeq	r0, r0, r0, asr #28
    271c:	00000024 	andeq	r0, r0, r4, lsr #32
    2720:	00001bcc 	andeq	r1, r0, ip, asr #23
    2724:	00000000 	andeq	r0, r0, r0
    2728:	00000036 	andeq	r0, r0, r6, lsr r0
    272c:	40040e41 	andmi	r0, r4, r1, asr #28
    2730:	0e410187 	dvfeqd	f0, f1, f7
    2734:	070d4110 	smladeq	sp, r0, r1, r4
    2738:	41040e55 	tstmi	r4, r5, asr lr
    273c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2740:	00000e40 	andeq	r0, r0, r0, asr #28
    2744:	00000024 	andeq	r0, r0, r4, lsr #32
    2748:	00001bcc 	andeq	r1, r0, ip, asr #23
    274c:	00000000 	andeq	r0, r0, r0
    2750:	0000003a 	andeq	r0, r0, sl, lsr r0
    2754:	40040e41 	andmi	r0, r4, r1, asr #28
    2758:	0e410187 	dvfeqd	f0, f1, f7
    275c:	070d4110 	smladeq	sp, r0, r1, r4
    2760:	41040e57 	tstmi	r4, r7, asr lr
    2764:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2768:	00000e40 	andeq	r0, r0, r0, asr #28
    276c:	00000024 	andeq	r0, r0, r4, lsr #32
    2770:	00001bcc 	andeq	r1, r0, ip, asr #23
    2774:	00000000 	andeq	r0, r0, r0
    2778:	00000036 	andeq	r0, r0, r6, lsr r0
    277c:	40040e41 	andmi	r0, r4, r1, asr #28
    2780:	0e410187 	dvfeqd	f0, f1, f7
    2784:	070d4110 	smladeq	sp, r0, r1, r4
    2788:	41040e55 	tstmi	r4, r5, asr lr
    278c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2790:	00000e40 	andeq	r0, r0, r0, asr #28
    2794:	00000024 	andeq	r0, r0, r4, lsr #32
    2798:	00001bcc 	andeq	r1, r0, ip, asr #23
    279c:	00000000 	andeq	r0, r0, r0
    27a0:	0000003a 	andeq	r0, r0, sl, lsr r0
    27a4:	40040e41 	andmi	r0, r4, r1, asr #28
    27a8:	0e410187 	dvfeqd	f0, f1, f7
    27ac:	070d4110 	smladeq	sp, r0, r1, r4
    27b0:	41040e57 	tstmi	r4, r7, asr lr
    27b4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    27b8:	00000e40 	andeq	r0, r0, r0, asr #28
    27bc:	00000024 	andeq	r0, r0, r4, lsr #32
    27c0:	00001bcc 	andeq	r1, r0, ip, asr #23
    27c4:	00000000 	andeq	r0, r0, r0
    27c8:	00000036 	andeq	r0, r0, r6, lsr r0
    27cc:	40040e41 	andmi	r0, r4, r1, asr #28
    27d0:	0e410187 	dvfeqd	f0, f1, f7
    27d4:	070d4110 	smladeq	sp, r0, r1, r4
    27d8:	41040e55 	tstmi	r4, r5, asr lr
    27dc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    27e0:	00000e40 	andeq	r0, r0, r0, asr #28
    27e4:	00000024 	andeq	r0, r0, r4, lsr #32
    27e8:	00001bcc 	andeq	r1, r0, ip, asr #23
    27ec:	00000000 	andeq	r0, r0, r0
    27f0:	00000018 	andeq	r0, r0, r8, lsl r0
    27f4:	40040e41 	andmi	r0, r4, r1, asr #28
    27f8:	0e410187 	dvfeqd	f0, f1, f7
    27fc:	070d4110 	smladeq	sp, r0, r1, r4
    2800:	41040e46 	tstmi	r4, r6, asr #28
    2804:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2808:	00000e40 	andeq	r0, r0, r0, asr #28
    280c:	00000024 	andeq	r0, r0, r4, lsr #32
    2810:	00001bcc 	andeq	r1, r0, ip, asr #23
    2814:	00000000 	andeq	r0, r0, r0
    2818:	00000018 	andeq	r0, r0, r8, lsl r0
    281c:	40040e41 	andmi	r0, r4, r1, asr #28
    2820:	0e410187 	dvfeqd	f0, f1, f7
    2824:	070d4110 	smladeq	sp, r0, r1, r4
    2828:	41040e46 	tstmi	r4, r6, asr #28
    282c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2830:	00000e40 	andeq	r0, r0, r0, asr #28
    2834:	00000024 	andeq	r0, r0, r4, lsr #32
    2838:	00001bcc 	andeq	r1, r0, ip, asr #23
    283c:	00000000 	andeq	r0, r0, r0
    2840:	00000018 	andeq	r0, r0, r8, lsl r0
    2844:	40040e41 	andmi	r0, r4, r1, asr #28
    2848:	0e410187 	dvfeqd	f0, f1, f7
    284c:	070d4110 	smladeq	sp, r0, r1, r4
    2850:	41040e46 	tstmi	r4, r6, asr #28
    2854:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2858:	00000e40 	andeq	r0, r0, r0, asr #28
    285c:	00000024 	andeq	r0, r0, r4, lsr #32
    2860:	00001bcc 	andeq	r1, r0, ip, asr #23
    2864:	00000000 	andeq	r0, r0, r0
    2868:	0000001a 	andeq	r0, r0, sl, lsl r0
    286c:	40040e41 	andmi	r0, r4, r1, asr #28
    2870:	0e410187 	dvfeqd	f0, f1, f7
    2874:	070d4110 	smladeq	sp, r0, r1, r4
    2878:	41040e47 	tstmi	r4, r7, asr #28
    287c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2880:	00000e40 	andeq	r0, r0, r0, asr #28
    2884:	00000024 	andeq	r0, r0, r4, lsr #32
    2888:	00001bcc 	andeq	r1, r0, ip, asr #23
    288c:	00000000 	andeq	r0, r0, r0
    2890:	00000018 	andeq	r0, r0, r8, lsl r0
    2894:	40040e41 	andmi	r0, r4, r1, asr #28
    2898:	0e410187 	dvfeqd	f0, f1, f7
    289c:	070d4110 	smladeq	sp, r0, r1, r4
    28a0:	41040e46 	tstmi	r4, r6, asr #28
    28a4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    28a8:	00000e40 	andeq	r0, r0, r0, asr #28
    28ac:	00000024 	andeq	r0, r0, r4, lsr #32
    28b0:	00001bcc 	andeq	r1, r0, ip, asr #23
    28b4:	00000000 	andeq	r0, r0, r0
    28b8:	00000018 	andeq	r0, r0, r8, lsl r0
    28bc:	40040e41 	andmi	r0, r4, r1, asr #28
    28c0:	0e410187 	dvfeqd	f0, f1, f7
    28c4:	070d4110 	smladeq	sp, r0, r1, r4
    28c8:	41040e46 	tstmi	r4, r6, asr #28
    28cc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    28d0:	00000e40 	andeq	r0, r0, r0, asr #28
    28d4:	00000024 	andeq	r0, r0, r4, lsr #32
    28d8:	00001bcc 	andeq	r1, r0, ip, asr #23
    28dc:	00000000 	andeq	r0, r0, r0
    28e0:	00000036 	andeq	r0, r0, r6, lsr r0
    28e4:	40040e41 	andmi	r0, r4, r1, asr #28
    28e8:	0e410187 	dvfeqd	f0, f1, f7
    28ec:	070d4118 	smladeq	sp, r8, r1, r4
    28f0:	41040e55 	tstmi	r4, r5, asr lr
    28f4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    28f8:	00000e40 	andeq	r0, r0, r0, asr #28
    28fc:	00000024 	andeq	r0, r0, r4, lsr #32
    2900:	00001bcc 	andeq	r1, r0, ip, asr #23
    2904:	00000000 	andeq	r0, r0, r0
    2908:	00000020 	andeq	r0, r0, r0, lsr #32
    290c:	40040e41 	andmi	r0, r4, r1, asr #28
    2910:	0e410187 	dvfeqd	f0, f1, f7
    2914:	070d4110 	smladeq	sp, r0, r1, r4
    2918:	41040e4a 	tstmi	r4, sl, asr #28
    291c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2920:	00000e40 	andeq	r0, r0, r0, asr #28
    2924:	00000024 	andeq	r0, r0, r4, lsr #32
    2928:	00001bcc 	andeq	r1, r0, ip, asr #23
    292c:	0800614c 	stmdaeq	r0, {r2, r3, r6, r8, sp, lr}
    2930:	00000052 	andeq	r0, r0, r2, asr r0
    2934:	40040e41 	andmi	r0, r4, r1, asr #28
    2938:	0e410187 	dvfeqd	f0, f1, f7
    293c:	070d4118 	smladeq	sp, r8, r1, r4
    2940:	41040e63 	tstmi	r4, r3, ror #28
    2944:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2948:	00000e40 	andeq	r0, r0, r0, asr #28
    294c:	00000024 	andeq	r0, r0, r4, lsr #32
    2950:	00001bcc 	andeq	r1, r0, ip, asr #23
    2954:	080061a0 	stmdaeq	r0, {r5, r7, r8, sp, lr}
    2958:	00000020 	andeq	r0, r0, r0, lsr #32
    295c:	40040e41 	andmi	r0, r4, r1, asr #28
    2960:	0e410187 	dvfeqd	f0, f1, f7
    2964:	070d4110 	smladeq	sp, r0, r1, r4
    2968:	41040e4a 	tstmi	r4, sl, asr #28
    296c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2970:	00000e40 	andeq	r0, r0, r0, asr #28
    2974:	00000024 	andeq	r0, r0, r4, lsr #32
    2978:	00001bcc 	andeq	r1, r0, ip, asr #23
    297c:	00000000 	andeq	r0, r0, r0
    2980:	000000e0 	andeq	r0, r0, r0, ror #1
    2984:	40040e41 	andmi	r0, r4, r1, asr #28
    2988:	0e410187 	dvfeqd	f0, f1, f7
    298c:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    2990:	040e6002 	streq	r6, [lr], #-2
    2994:	410d0d41 	tstmi	sp, r1, asr #26
    2998:	000e40c7 	andeq	r4, lr, r7, asr #1
    299c:	00000024 	andeq	r0, r0, r4, lsr #32
    29a0:	00001bcc 	andeq	r1, r0, ip, asr #23
    29a4:	00000000 	andeq	r0, r0, r0
    29a8:	000000f4 	strdeq	r0, [r0], -r4
    29ac:	40040e41 	andmi	r0, r4, r1, asr #28
    29b0:	0e410187 	dvfeqd	f0, f1, f7
    29b4:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    29b8:	040e6a02 	streq	r6, [lr], #-2562	; 0xfffff5fe
    29bc:	410d0d41 	tstmi	sp, r1, asr #26
    29c0:	000e40c7 	andeq	r4, lr, r7, asr #1
    29c4:	00000024 	andeq	r0, r0, r4, lsr #32
    29c8:	00001bcc 	andeq	r1, r0, ip, asr #23
    29cc:	00000000 	andeq	r0, r0, r0
    29d0:	000000ec 	andeq	r0, r0, ip, ror #1
    29d4:	40040e41 	andmi	r0, r4, r1, asr #28
    29d8:	0e410187 	dvfeqd	f0, f1, f7
    29dc:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    29e0:	040e6502 	streq	r6, [lr], #-1282	; 0xfffffafe
    29e4:	410d0d41 	tstmi	sp, r1, asr #26
    29e8:	000e40c7 	andeq	r4, lr, r7, asr #1
    29ec:	00000024 	andeq	r0, r0, r4, lsr #32
    29f0:	00001bcc 	andeq	r1, r0, ip, asr #23
    29f4:	00000000 	andeq	r0, r0, r0
    29f8:	000000f8 	strdeq	r0, [r0], -r8
    29fc:	40040e41 	andmi	r0, r4, r1, asr #28
    2a00:	0e410187 	dvfeqd	f0, f1, f7
    2a04:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    2a08:	040e6c02 	streq	r6, [lr], #-3074	; 0xfffff3fe
    2a0c:	410d0d41 	tstmi	sp, r1, asr #26
    2a10:	000e40c7 	andeq	r4, lr, r7, asr #1
    2a14:	0000000c 	andeq	r0, r0, ip
    2a18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2a1c:	7c020001 	stcvc	0, cr0, [r2], {1}
    2a20:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2a24:	00000024 	andeq	r0, r0, r4, lsr #32
    2a28:	00002a14 	andeq	r2, r0, r4, lsl sl
    2a2c:	080061c0 	stmdaeq	r0, {r6, r7, r8, sp, lr}
    2a30:	00000048 	andeq	r0, r0, r8, asr #32
    2a34:	40080e41 	andmi	r0, r8, r1, asr #28
    2a38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    2a3c:	100e4101 	andne	r4, lr, r1, lsl #2
    2a40:	5c070d41 	stcpl	13, cr0, [r7], {65}	; 0x41
    2a44:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    2a48:	0000000d 	andeq	r0, r0, sp
    2a4c:	00000024 	andeq	r0, r0, r4, lsr #32
    2a50:	00002a14 	andeq	r2, r0, r4, lsl sl
    2a54:	08006208 	stmdaeq	r0, {r3, r9, sp, lr}
    2a58:	00000184 	andeq	r0, r0, r4, lsl #3
    2a5c:	40080e41 	andmi	r0, r8, r1, asr #28
    2a60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    2a64:	300e4101 	andcc	r4, lr, r1, lsl #2
    2a68:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    2a6c:	41080eb5 			; <UNDEFINED> instruction: 0x41080eb5
    2a70:	00000d0d 	andeq	r0, r0, sp, lsl #26
    2a74:	00000024 	andeq	r0, r0, r4, lsr #32
    2a78:	00002a14 	andeq	r2, r0, r4, lsl sl
    2a7c:	00000000 	andeq	r0, r0, r0
    2a80:	0000003c 	andeq	r0, r0, ip, lsr r0
    2a84:	40040e41 	andmi	r0, r4, r1, asr #28
    2a88:	0e410187 	dvfeqd	f0, f1, f7
    2a8c:	070d4110 	smladeq	sp, r0, r1, r4
    2a90:	41040e58 	tstmi	r4, r8, asr lr
    2a94:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2a98:	00000e40 	andeq	r0, r0, r0, asr #28
    2a9c:	00000024 	andeq	r0, r0, r4, lsr #32
    2aa0:	00002a14 	andeq	r2, r0, r4, lsl sl
    2aa4:	0800638c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sp, lr}
    2aa8:	0000003e 	andeq	r0, r0, lr, lsr r0
    2aac:	40040e41 	andmi	r0, r4, r1, asr #28
    2ab0:	0e410187 	dvfeqd	f0, f1, f7
    2ab4:	070d4110 	smladeq	sp, r0, r1, r4
    2ab8:	41040e59 	tstmi	r4, r9, asr lr
    2abc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2ac0:	00000e40 	andeq	r0, r0, r0, asr #28
    2ac4:	00000024 	andeq	r0, r0, r4, lsr #32
    2ac8:	00002a14 	andeq	r2, r0, r4, lsl sl
    2acc:	00000000 	andeq	r0, r0, r0
    2ad0:	0000003e 	andeq	r0, r0, lr, lsr r0
    2ad4:	40040e41 	andmi	r0, r4, r1, asr #28
    2ad8:	0e410187 	dvfeqd	f0, f1, f7
    2adc:	070d4110 	smladeq	sp, r0, r1, r4
    2ae0:	41040e59 	tstmi	r4, r9, asr lr
    2ae4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2ae8:	00000e40 	andeq	r0, r0, r0, asr #28
    2aec:	00000024 	andeq	r0, r0, r4, lsr #32
    2af0:	00002a14 	andeq	r2, r0, r4, lsl sl
    2af4:	00000000 	andeq	r0, r0, r0
    2af8:	0000003e 	andeq	r0, r0, lr, lsr r0
    2afc:	40040e41 	andmi	r0, r4, r1, asr #28
    2b00:	0e410187 	dvfeqd	f0, f1, f7
    2b04:	070d4110 	smladeq	sp, r0, r1, r4
    2b08:	41040e59 	tstmi	r4, r9, asr lr
    2b0c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2b10:	00000e40 	andeq	r0, r0, r0, asr #28
    2b14:	00000024 	andeq	r0, r0, r4, lsr #32
    2b18:	00002a14 	andeq	r2, r0, r4, lsl sl
    2b1c:	080063cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sp, lr}
    2b20:	0000003e 	andeq	r0, r0, lr, lsr r0
    2b24:	40040e41 	andmi	r0, r4, r1, asr #28
    2b28:	0e410187 	dvfeqd	f0, f1, f7
    2b2c:	070d4110 	smladeq	sp, r0, r1, r4
    2b30:	41040e59 	tstmi	r4, r9, asr lr
    2b34:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2b38:	00000e40 	andeq	r0, r0, r0, asr #28
    2b3c:	00000024 	andeq	r0, r0, r4, lsr #32
    2b40:	00002a14 	andeq	r2, r0, r4, lsl sl
    2b44:	00000000 	andeq	r0, r0, r0
    2b48:	0000003e 	andeq	r0, r0, lr, lsr r0
    2b4c:	40040e41 	andmi	r0, r4, r1, asr #28
    2b50:	0e410187 	dvfeqd	f0, f1, f7
    2b54:	070d4110 	smladeq	sp, r0, r1, r4
    2b58:	41040e59 	tstmi	r4, r9, asr lr
    2b5c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2b60:	00000e40 	andeq	r0, r0, r0, asr #28
    2b64:	00000024 	andeq	r0, r0, r4, lsr #32
    2b68:	00002a14 	andeq	r2, r0, r4, lsl sl
    2b6c:	00000000 	andeq	r0, r0, r0
    2b70:	0000003e 	andeq	r0, r0, lr, lsr r0
    2b74:	40040e41 	andmi	r0, r4, r1, asr #28
    2b78:	0e410187 	dvfeqd	f0, f1, f7
    2b7c:	070d4110 	smladeq	sp, r0, r1, r4
    2b80:	41040e59 	tstmi	r4, r9, asr lr
    2b84:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2b88:	00000e40 	andeq	r0, r0, r0, asr #28
    2b8c:	00000024 	andeq	r0, r0, r4, lsr #32
    2b90:	00002a14 	andeq	r2, r0, r4, lsl sl
    2b94:	00000000 	andeq	r0, r0, r0
    2b98:	00000042 	andeq	r0, r0, r2, asr #32
    2b9c:	40040e41 	andmi	r0, r4, r1, asr #28
    2ba0:	0e410187 	dvfeqd	f0, f1, f7
    2ba4:	070d4118 	smladeq	sp, r8, r1, r4
    2ba8:	41040e5b 	tstmi	r4, fp, asr lr
    2bac:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2bb0:	00000e40 	andeq	r0, r0, r0, asr #28
    2bb4:	00000024 	andeq	r0, r0, r4, lsr #32
    2bb8:	00002a14 	andeq	r2, r0, r4, lsl sl
    2bbc:	00000000 	andeq	r0, r0, r0
    2bc0:	0000003e 	andeq	r0, r0, lr, lsr r0
    2bc4:	40040e41 	andmi	r0, r4, r1, asr #28
    2bc8:	0e410187 	dvfeqd	f0, f1, f7
    2bcc:	070d4110 	smladeq	sp, r0, r1, r4
    2bd0:	41040e59 	tstmi	r4, r9, asr lr
    2bd4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2bd8:	00000e40 	andeq	r0, r0, r0, asr #28
    2bdc:	00000024 	andeq	r0, r0, r4, lsr #32
    2be0:	00002a14 	andeq	r2, r0, r4, lsl sl
    2be4:	00000000 	andeq	r0, r0, r0
    2be8:	0000003e 	andeq	r0, r0, lr, lsr r0
    2bec:	40040e41 	andmi	r0, r4, r1, asr #28
    2bf0:	0e410187 	dvfeqd	f0, f1, f7
    2bf4:	070d4110 	smladeq	sp, r0, r1, r4
    2bf8:	41040e59 	tstmi	r4, r9, asr lr
    2bfc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2c00:	00000e40 	andeq	r0, r0, r0, asr #28
    2c04:	00000024 	andeq	r0, r0, r4, lsr #32
    2c08:	00002a14 	andeq	r2, r0, r4, lsl sl
    2c0c:	00000000 	andeq	r0, r0, r0
    2c10:	00000046 	andeq	r0, r0, r6, asr #32
    2c14:	40040e41 	andmi	r0, r4, r1, asr #28
    2c18:	0e410187 	dvfeqd	f0, f1, f7
    2c1c:	070d4110 	smladeq	sp, r0, r1, r4
    2c20:	41040e5d 	tstmi	r4, sp, asr lr
    2c24:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2c28:	00000e40 	andeq	r0, r0, r0, asr #28
    2c2c:	00000024 	andeq	r0, r0, r4, lsr #32
    2c30:	00002a14 	andeq	r2, r0, r4, lsl sl
    2c34:	0800640c 	stmdaeq	r0, {r2, r3, sl, sp, lr}
    2c38:	0000001e 	andeq	r0, r0, lr, lsl r0
    2c3c:	40040e41 	andmi	r0, r4, r1, asr #28
    2c40:	0e410187 	dvfeqd	f0, f1, f7
    2c44:	070d4110 	smladeq	sp, r0, r1, r4
    2c48:	41040e49 	tstmi	r4, r9, asr #28
    2c4c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2c50:	00000e40 	andeq	r0, r0, r0, asr #28
    2c54:	00000024 	andeq	r0, r0, r4, lsr #32
    2c58:	00002a14 	andeq	r2, r0, r4, lsl sl
    2c5c:	00000000 	andeq	r0, r0, r0
    2c60:	0000001a 	andeq	r0, r0, sl, lsl r0
    2c64:	40040e41 	andmi	r0, r4, r1, asr #28
    2c68:	0e410187 	dvfeqd	f0, f1, f7
    2c6c:	070d4110 	smladeq	sp, r0, r1, r4
    2c70:	41040e47 	tstmi	r4, r7, asr #28
    2c74:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2c78:	00000e40 	andeq	r0, r0, r0, asr #28
    2c7c:	00000024 	andeq	r0, r0, r4, lsr #32
    2c80:	00002a14 	andeq	r2, r0, r4, lsl sl
    2c84:	0800642c 	stmdaeq	r0, {r2, r3, r5, sl, sp, lr}
    2c88:	0000003a 	andeq	r0, r0, sl, lsr r0
    2c8c:	40040e41 	andmi	r0, r4, r1, asr #28
    2c90:	0e410187 	dvfeqd	f0, f1, f7
    2c94:	070d4110 	smladeq	sp, r0, r1, r4
    2c98:	41040e57 	tstmi	r4, r7, asr lr
    2c9c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2ca0:	00000e40 	andeq	r0, r0, r0, asr #28
    2ca4:	00000024 	andeq	r0, r0, r4, lsr #32
    2ca8:	00002a14 	andeq	r2, r0, r4, lsl sl
    2cac:	00000000 	andeq	r0, r0, r0
    2cb0:	0000002c 	andeq	r0, r0, ip, lsr #32
    2cb4:	40040e41 	andmi	r0, r4, r1, asr #28
    2cb8:	0e410187 	dvfeqd	f0, f1, f7
    2cbc:	070d4118 	smladeq	sp, r8, r1, r4
    2cc0:	41040e50 	tstmi	r4, r0, asr lr
    2cc4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2cc8:	00000e40 	andeq	r0, r0, r0, asr #28
    2ccc:	00000024 	andeq	r0, r0, r4, lsr #32
    2cd0:	00002a14 	andeq	r2, r0, r4, lsl sl
    2cd4:	00000000 	andeq	r0, r0, r0
    2cd8:	00000042 	andeq	r0, r0, r2, asr #32
    2cdc:	40040e41 	andmi	r0, r4, r1, asr #28
    2ce0:	0e410187 	dvfeqd	f0, f1, f7
    2ce4:	070d4110 	smladeq	sp, r0, r1, r4
    2ce8:	41040e5b 	tstmi	r4, fp, asr lr
    2cec:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2cf0:	00000e40 	andeq	r0, r0, r0, asr #28
    2cf4:	00000024 	andeq	r0, r0, r4, lsr #32
    2cf8:	00002a14 	andeq	r2, r0, r4, lsl sl
    2cfc:	00000000 	andeq	r0, r0, r0
    2d00:	00000040 	andeq	r0, r0, r0, asr #32
    2d04:	40040e41 	andmi	r0, r4, r1, asr #28
    2d08:	0e410187 	dvfeqd	f0, f1, f7
    2d0c:	070d4110 	smladeq	sp, r0, r1, r4
    2d10:	41040e5a 	tstmi	r4, sl, asr lr
    2d14:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2d18:	00000e40 	andeq	r0, r0, r0, asr #28
    2d1c:	00000024 	andeq	r0, r0, r4, lsr #32
    2d20:	00002a14 	andeq	r2, r0, r4, lsl sl
    2d24:	00000000 	andeq	r0, r0, r0
    2d28:	00000040 	andeq	r0, r0, r0, asr #32
    2d2c:	40040e41 	andmi	r0, r4, r1, asr #28
    2d30:	0e410187 	dvfeqd	f0, f1, f7
    2d34:	070d4110 	smladeq	sp, r0, r1, r4
    2d38:	41040e5a 	tstmi	r4, sl, asr lr
    2d3c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2d40:	00000e40 	andeq	r0, r0, r0, asr #28
    2d44:	00000024 	andeq	r0, r0, r4, lsr #32
    2d48:	00002a14 	andeq	r2, r0, r4, lsl sl
    2d4c:	00000000 	andeq	r0, r0, r0
    2d50:	0000003e 	andeq	r0, r0, lr, lsr r0
    2d54:	40040e41 	andmi	r0, r4, r1, asr #28
    2d58:	0e410187 	dvfeqd	f0, f1, f7
    2d5c:	070d4110 	smladeq	sp, r0, r1, r4
    2d60:	41040e59 	tstmi	r4, r9, asr lr
    2d64:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2d68:	00000e40 	andeq	r0, r0, r0, asr #28
    2d6c:	00000024 	andeq	r0, r0, r4, lsr #32
    2d70:	00002a14 	andeq	r2, r0, r4, lsl sl
    2d74:	00000000 	andeq	r0, r0, r0
    2d78:	00000040 	andeq	r0, r0, r0, asr #32
    2d7c:	40040e41 	andmi	r0, r4, r1, asr #28
    2d80:	0e410187 	dvfeqd	f0, f1, f7
    2d84:	070d4110 	smladeq	sp, r0, r1, r4
    2d88:	41040e5a 	tstmi	r4, sl, asr lr
    2d8c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2d90:	00000e40 	andeq	r0, r0, r0, asr #28
    2d94:	00000024 	andeq	r0, r0, r4, lsr #32
    2d98:	00002a14 	andeq	r2, r0, r4, lsl sl
    2d9c:	00000000 	andeq	r0, r0, r0
    2da0:	0000003e 	andeq	r0, r0, lr, lsr r0
    2da4:	40040e41 	andmi	r0, r4, r1, asr #28
    2da8:	0e410187 	dvfeqd	f0, f1, f7
    2dac:	070d4110 	smladeq	sp, r0, r1, r4
    2db0:	41040e59 	tstmi	r4, r9, asr lr
    2db4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2db8:	00000e40 	andeq	r0, r0, r0, asr #28
    2dbc:	00000024 	andeq	r0, r0, r4, lsr #32
    2dc0:	00002a14 	andeq	r2, r0, r4, lsl sl
    2dc4:	00000000 	andeq	r0, r0, r0
    2dc8:	0000001e 	andeq	r0, r0, lr, lsl r0
    2dcc:	40040e41 	andmi	r0, r4, r1, asr #28
    2dd0:	0e410187 	dvfeqd	f0, f1, f7
    2dd4:	070d4110 	smladeq	sp, r0, r1, r4
    2dd8:	41040e49 	tstmi	r4, r9, asr #28
    2ddc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2de0:	00000e40 	andeq	r0, r0, r0, asr #28
    2de4:	00000024 	andeq	r0, r0, r4, lsr #32
    2de8:	00002a14 	andeq	r2, r0, r4, lsl sl
    2dec:	00000000 	andeq	r0, r0, r0
    2df0:	0000003e 	andeq	r0, r0, lr, lsr r0
    2df4:	40040e41 	andmi	r0, r4, r1, asr #28
    2df8:	0e410187 	dvfeqd	f0, f1, f7
    2dfc:	070d4110 	smladeq	sp, r0, r1, r4
    2e00:	41040e59 	tstmi	r4, r9, asr lr
    2e04:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2e08:	00000e40 	andeq	r0, r0, r0, asr #28
    2e0c:	00000024 	andeq	r0, r0, r4, lsr #32
    2e10:	00002a14 	andeq	r2, r0, r4, lsl sl
    2e14:	08006468 	stmdaeq	r0, {r3, r5, r6, sl, sp, lr}
    2e18:	0000003e 	andeq	r0, r0, lr, lsr r0
    2e1c:	40040e41 	andmi	r0, r4, r1, asr #28
    2e20:	0e410187 	dvfeqd	f0, f1, f7
    2e24:	070d4110 	smladeq	sp, r0, r1, r4
    2e28:	41040e59 	tstmi	r4, r9, asr lr
    2e2c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2e30:	00000e40 	andeq	r0, r0, r0, asr #28
    2e34:	00000024 	andeq	r0, r0, r4, lsr #32
    2e38:	00002a14 	andeq	r2, r0, r4, lsl sl
    2e3c:	00000000 	andeq	r0, r0, r0
    2e40:	00000040 	andeq	r0, r0, r0, asr #32
    2e44:	40040e41 	andmi	r0, r4, r1, asr #28
    2e48:	0e410187 	dvfeqd	f0, f1, f7
    2e4c:	070d4110 	smladeq	sp, r0, r1, r4
    2e50:	41040e5a 	tstmi	r4, sl, asr lr
    2e54:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2e58:	00000e40 	andeq	r0, r0, r0, asr #28
    2e5c:	00000024 	andeq	r0, r0, r4, lsr #32
    2e60:	00002a14 	andeq	r2, r0, r4, lsl sl
    2e64:	080064a8 	stmdaeq	r0, {r3, r5, r7, sl, sp, lr}
    2e68:	0000005e 	andeq	r0, r0, lr, asr r0
    2e6c:	40040e41 	andmi	r0, r4, r1, asr #28
    2e70:	0e410187 	dvfeqd	f0, f1, f7
    2e74:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    2e78:	41040e69 	tstmi	r4, r9, ror #28
    2e7c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2e80:	00000e40 	andeq	r0, r0, r0, asr #28
    2e84:	00000024 	andeq	r0, r0, r4, lsr #32
    2e88:	00002a14 	andeq	r2, r0, r4, lsl sl
    2e8c:	00000000 	andeq	r0, r0, r0
    2e90:	00000042 	andeq	r0, r0, r2, asr #32
    2e94:	40040e41 	andmi	r0, r4, r1, asr #28
    2e98:	0e410187 	dvfeqd	f0, f1, f7
    2e9c:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    2ea0:	41040e5b 	tstmi	r4, fp, asr lr
    2ea4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2ea8:	00000e40 	andeq	r0, r0, r0, asr #28
    2eac:	00000024 	andeq	r0, r0, r4, lsr #32
    2eb0:	00002a14 	andeq	r2, r0, r4, lsl sl
    2eb4:	08006508 	stmdaeq	r0, {r3, r8, sl, sp, lr}
    2eb8:	00000064 	andeq	r0, r0, r4, rrx
    2ebc:	40040e41 	andmi	r0, r4, r1, asr #28
    2ec0:	0e410187 	dvfeqd	f0, f1, f7
    2ec4:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    2ec8:	41040e6c 	tstmi	r4, ip, ror #28
    2ecc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2ed0:	00000e40 	andeq	r0, r0, r0, asr #28
    2ed4:	00000024 	andeq	r0, r0, r4, lsr #32
    2ed8:	00002a14 	andeq	r2, r0, r4, lsl sl
    2edc:	00000000 	andeq	r0, r0, r0
    2ee0:	0000002c 	andeq	r0, r0, ip, lsr #32
    2ee4:	40040e41 	andmi	r0, r4, r1, asr #28
    2ee8:	0e410187 	dvfeqd	f0, f1, f7
    2eec:	070d4118 	smladeq	sp, r8, r1, r4
    2ef0:	41040e50 	tstmi	r4, r0, asr lr
    2ef4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2ef8:	00000e40 	andeq	r0, r0, r0, asr #28
    2efc:	00000024 	andeq	r0, r0, r4, lsr #32
    2f00:	00002a14 	andeq	r2, r0, r4, lsl sl
    2f04:	00000000 	andeq	r0, r0, r0
    2f08:	00000058 	andeq	r0, r0, r8, asr r0
    2f0c:	40040e41 	andmi	r0, r4, r1, asr #28
    2f10:	0e410187 	dvfeqd	f0, f1, f7
    2f14:	070d4118 	smladeq	sp, r8, r1, r4
    2f18:	41040e66 	tstmi	r4, r6, ror #28
    2f1c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2f20:	00000e40 	andeq	r0, r0, r0, asr #28
    2f24:	00000024 	andeq	r0, r0, r4, lsr #32
    2f28:	00002a14 	andeq	r2, r0, r4, lsl sl
    2f2c:	00000000 	andeq	r0, r0, r0
    2f30:	0000002c 	andeq	r0, r0, ip, lsr #32
    2f34:	40040e41 	andmi	r0, r4, r1, asr #28
    2f38:	0e410187 	dvfeqd	f0, f1, f7
    2f3c:	070d4118 	smladeq	sp, r8, r1, r4
    2f40:	41040e50 	tstmi	r4, r0, asr lr
    2f44:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2f48:	00000e40 	andeq	r0, r0, r0, asr #28
    2f4c:	0000000c 	andeq	r0, r0, ip
    2f50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2f54:	7c020001 	stcvc	0, cr0, [r2], {1}
    2f58:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2f5c:	00000024 	andeq	r0, r0, r4, lsr #32
    2f60:	00002f4c 	andeq	r2, r0, ip, asr #30
    2f64:	0800656c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    2f68:	00000020 	andeq	r0, r0, r0, lsr #32
    2f6c:	40040e41 	andmi	r0, r4, r1, asr #28
    2f70:	0e410187 	dvfeqd	f0, f1, f7
    2f74:	070d4110 	smladeq	sp, r0, r1, r4
    2f78:	41040e47 	tstmi	r4, r7, asr #28
    2f7c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2f80:	00000e40 	andeq	r0, r0, r0, asr #28
    2f84:	00000024 	andeq	r0, r0, r4, lsr #32
    2f88:	00002f4c 	andeq	r2, r0, ip, asr #30
    2f8c:	0800658c 	stmdaeq	r0, {r2, r3, r7, r8, sl, sp, lr}
    2f90:	00000020 	andeq	r0, r0, r0, lsr #32
    2f94:	40040e41 	andmi	r0, r4, r1, asr #28
    2f98:	0e410187 	dvfeqd	f0, f1, f7
    2f9c:	070d4110 	smladeq	sp, r0, r1, r4
    2fa0:	41040e47 	tstmi	r4, r7, asr #28
    2fa4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2fa8:	00000e40 	andeq	r0, r0, r0, asr #28
    2fac:	00000024 	andeq	r0, r0, r4, lsr #32
    2fb0:	00002f4c 	andeq	r2, r0, ip, asr #30
    2fb4:	080065ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, sp, lr}
    2fb8:	00000020 	andeq	r0, r0, r0, lsr #32
    2fbc:	40040e41 	andmi	r0, r4, r1, asr #28
    2fc0:	0e410187 	dvfeqd	f0, f1, f7
    2fc4:	070d4110 	smladeq	sp, r0, r1, r4
    2fc8:	41040e47 	tstmi	r4, r7, asr #28
    2fcc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2fd0:	00000e40 	andeq	r0, r0, r0, asr #28
    2fd4:	00000020 	andeq	r0, r0, r0, lsr #32
    2fd8:	00002f4c 	andeq	r2, r0, ip, asr #30
    2fdc:	080065cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, sp, lr}
    2fe0:	00000018 	andeq	r0, r0, r8, lsl r0
    2fe4:	40040e41 	andmi	r0, r4, r1, asr #28
    2fe8:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    2fec:	0d0d4607 	stceq	6, cr4, [sp, #-28]	; 0xffffffe4
    2ff0:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    2ff4:	00000000 	andeq	r0, r0, r0
    2ff8:	00000020 	andeq	r0, r0, r0, lsr #32
    2ffc:	00002f4c 	andeq	r2, r0, ip, asr #30
    3000:	080065e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, sp, lr}
    3004:	00000018 	andeq	r0, r0, r8, lsl r0
    3008:	40040e41 	andmi	r0, r4, r1, asr #28
    300c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3010:	0d0d4607 	stceq	6, cr4, [sp, #-28]	; 0xffffffe4
    3014:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    3018:	00000000 	andeq	r0, r0, r0
    301c:	00000024 	andeq	r0, r0, r4, lsr #32
    3020:	00002f4c 	andeq	r2, r0, ip, asr #30
    3024:	00000000 	andeq	r0, r0, r0
    3028:	00000034 	andeq	r0, r0, r4, lsr r0
    302c:	40040e41 	andmi	r0, r4, r1, asr #28
    3030:	0e410187 	dvfeqd	f0, f1, f7
    3034:	070d4118 	smladeq	sp, r8, r1, r4
    3038:	41040e52 	tstmi	r4, r2, asr lr
    303c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3040:	00000e40 	andeq	r0, r0, r0, asr #28
    3044:	0000000c 	andeq	r0, r0, ip
    3048:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    304c:	7c020001 	stcvc	0, cr0, [r2], {1}
    3050:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3054:	00000020 	andeq	r0, r0, r0, lsr #32
    3058:	00003044 	andeq	r3, r0, r4, asr #32
    305c:	00000000 	andeq	r0, r0, r0
    3060:	00000018 	andeq	r0, r0, r8, lsl r0
    3064:	40040e41 	andmi	r0, r4, r1, asr #28
    3068:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    306c:	0d0d4507 	cfstr32eq	mvfx4, [sp, #-28]	; 0xffffffe4
    3070:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    3074:	00000000 	andeq	r0, r0, r0
    3078:	00000020 	andeq	r0, r0, r0, lsr #32
    307c:	00003044 	andeq	r3, r0, r4, asr #32
    3080:	00000000 	andeq	r0, r0, r0
    3084:	00000018 	andeq	r0, r0, r8, lsl r0
    3088:	40040e41 	andmi	r0, r4, r1, asr #28
    308c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3090:	0d0d4607 	stceq	6, cr4, [sp, #-28]	; 0xffffffe4
    3094:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    3098:	00000000 	andeq	r0, r0, r0
    309c:	00000024 	andeq	r0, r0, r4, lsr #32
    30a0:	00003044 	andeq	r3, r0, r4, asr #32
    30a4:	080065fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, sp, lr}
    30a8:	0000003c 	andeq	r0, r0, ip, lsr r0
    30ac:	40040e41 	andmi	r0, r4, r1, asr #28
    30b0:	0e410187 	dvfeqd	f0, f1, f7
    30b4:	070d4110 	smladeq	sp, r0, r1, r4
    30b8:	41040e56 	tstmi	r4, r6, asr lr
    30bc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    30c0:	00000e40 	andeq	r0, r0, r0, asr #28
    30c4:	0000000c 	andeq	r0, r0, ip
    30c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    30cc:	7c020001 	stcvc	0, cr0, [r2], {1}
    30d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    30d4:	00000024 	andeq	r0, r0, r4, lsr #32
    30d8:	000030c4 	andeq	r3, r0, r4, asr #1
    30dc:	08006638 	stmdaeq	r0, {r3, r4, r5, r9, sl, sp, lr}
    30e0:	00000084 	andeq	r0, r0, r4, lsl #1
    30e4:	40080e41 	andmi	r0, r8, r1, asr #28
    30e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    30ec:	200e4101 	andcs	r4, lr, r1, lsl #2
    30f0:	77070d41 	strvc	r0, [r7, -r1, asr #26]
    30f4:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    30f8:	0000000d 	andeq	r0, r0, sp
    30fc:	00000024 	andeq	r0, r0, r4, lsr #32
    3100:	000030c4 	andeq	r3, r0, r4, asr #1
    3104:	080066bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, sp, lr}
    3108:	00000048 	andeq	r0, r0, r8, asr #32
    310c:	40080e41 	andmi	r0, r8, r1, asr #28
    3110:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3114:	100e4101 	andne	r4, lr, r1, lsl #2
    3118:	5c070d41 	stcpl	13, cr0, [r7], {65}	; 0x41
    311c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3120:	0000000d 	andeq	r0, r0, sp
    3124:	00000024 	andeq	r0, r0, r4, lsr #32
    3128:	000030c4 	andeq	r3, r0, r4, asr #1
    312c:	08006704 	stmdaeq	r0, {r2, r8, r9, sl, sp, lr}
    3130:	000000c4 	andeq	r0, r0, r4, asr #1
    3134:	40080e41 	andmi	r0, r8, r1, asr #28
    3138:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    313c:	200e4101 	andcs	r4, lr, r1, lsl #2
    3140:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3144:	41080e59 	tstmi	r8, r9, asr lr
    3148:	00000d0d 	andeq	r0, r0, sp, lsl #26
    314c:	00000024 	andeq	r0, r0, r4, lsr #32
    3150:	000030c4 	andeq	r3, r0, r4, asr #1
    3154:	080067c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, sp, lr}
    3158:	00000062 	andeq	r0, r0, r2, rrx
    315c:	40080e41 	andmi	r0, r8, r1, asr #28
    3160:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3164:	180e4101 	stmdane	lr, {r0, r8, lr}
    3168:	6c070d41 	stcvs	13, cr0, [r7], {65}	; 0x41
    316c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3170:	0000000d 	andeq	r0, r0, sp
    3174:	00000018 	andeq	r0, r0, r8, lsl r0
    3178:	000030c4 	andeq	r3, r0, r4, asr #1
    317c:	0800682c 	stmdaeq	r0, {r2, r3, r5, fp, sp, lr}
    3180:	00000044 	andeq	r0, r0, r4, asr #32
    3184:	40080e41 	andmi	r0, r8, r1, asr #28
    3188:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    318c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    3190:	0000000c 	andeq	r0, r0, ip
    3194:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3198:	7c020001 	stcvc	0, cr0, [r2], {1}
    319c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    31a0:	00000020 	andeq	r0, r0, r0, lsr #32
    31a4:	00003190 	muleq	r0, r0, r1
    31a8:	08006870 	stmdaeq	r0, {r4, r5, r6, fp, sp, lr}
    31ac:	0000000c 	andeq	r0, r0, ip
    31b0:	40040e41 	andmi	r0, r4, r1, asr #28
    31b4:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    31b8:	0d0d4207 	sfmeq	f4, 4, [sp, #-28]	; 0xffffffe4
    31bc:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    31c0:	00000000 	andeq	r0, r0, r0
    31c4:	00000018 	andeq	r0, r0, r8, lsl r0
    31c8:	00003190 	muleq	r0, r0, r1
    31cc:	0800687c 	stmdaeq	r0, {r2, r3, r4, r5, r6, fp, sp, lr}
    31d0:	00000006 	andeq	r0, r0, r6
    31d4:	40040e41 	andmi	r0, r4, r1, asr #28
    31d8:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    31dc:	00000007 	andeq	r0, r0, r7
    31e0:	00000018 	andeq	r0, r0, r8, lsl r0
    31e4:	00003190 	muleq	r0, r0, r1
    31e8:	08006884 	stmdaeq	r0, {r2, r7, fp, sp, lr}
    31ec:	00000006 	andeq	r0, r0, r6
    31f0:	40040e41 	andmi	r0, r4, r1, asr #28
    31f4:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    31f8:	00000007 	andeq	r0, r0, r7
    31fc:	00000018 	andeq	r0, r0, r8, lsl r0
    3200:	00003190 	muleq	r0, r0, r1
    3204:	0800688c 	stmdaeq	r0, {r2, r3, r7, fp, sp, lr}
    3208:	00000006 	andeq	r0, r0, r6
    320c:	40040e41 	andmi	r0, r4, r1, asr #28
    3210:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3214:	00000007 	andeq	r0, r0, r7
    3218:	00000018 	andeq	r0, r0, r8, lsl r0
    321c:	00003190 	muleq	r0, r0, r1
    3220:	08006894 	stmdaeq	r0, {r2, r4, r7, fp, sp, lr}
    3224:	00000006 	andeq	r0, r0, r6
    3228:	40040e41 	andmi	r0, r4, r1, asr #28
    322c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3230:	00000007 	andeq	r0, r0, r7
    3234:	00000020 	andeq	r0, r0, r0, lsr #32
    3238:	00003190 	muleq	r0, r0, r1
    323c:	0800689c 	stmdaeq	r0, {r2, r3, r4, r7, fp, sp, lr}
    3240:	0000000c 	andeq	r0, r0, ip
    3244:	40040e41 	andmi	r0, r4, r1, asr #28
    3248:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    324c:	0d0d4207 	sfmeq	f4, 4, [sp, #-28]	; 0xffffffe4
    3250:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    3254:	00000000 	andeq	r0, r0, r0
    3258:	00000020 	andeq	r0, r0, r0, lsr #32
    325c:	00003190 	muleq	r0, r0, r1
    3260:	080068a8 	stmdaeq	r0, {r3, r5, r7, fp, sp, lr}
    3264:	0000000c 	andeq	r0, r0, ip
    3268:	40040e41 	andmi	r0, r4, r1, asr #28
    326c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3270:	0d0d4207 	sfmeq	f4, 4, [sp, #-28]	; 0xffffffe4
    3274:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    3278:	00000000 	andeq	r0, r0, r0
    327c:	00000018 	andeq	r0, r0, r8, lsl r0
    3280:	00003190 	muleq	r0, r0, r1
    3284:	080068b4 	stmdaeq	r0, {r2, r4, r5, r7, fp, sp, lr}
    3288:	00000064 	andeq	r0, r0, r4, rrx
    328c:	40080e41 	andmi	r0, r8, r1, asr #28
    3290:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3294:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    3298:	0000000c 	andeq	r0, r0, ip
    329c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    32a0:	7c020001 	stcvc	0, cr0, [r2], {1}
    32a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    32a8:	00000018 	andeq	r0, r0, r8, lsl r0
    32ac:	00003298 	muleq	r0, r8, r2
    32b0:	08006918 	stmdaeq	r0, {r3, r4, r8, fp, sp, lr}
    32b4:	00000014 	andeq	r0, r0, r4, lsl r0
    32b8:	40080e41 	andmi	r0, r8, r1, asr #28
    32bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    32c0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    32c4:	00000018 	andeq	r0, r0, r8, lsl r0
    32c8:	00003298 	muleq	r0, r8, r2
    32cc:	0800692c 	stmdaeq	r0, {r2, r3, r5, r8, fp, sp, lr}
    32d0:	00000014 	andeq	r0, r0, r4, lsl r0
    32d4:	40080e41 	andmi	r0, r8, r1, asr #28
    32d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    32dc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    32e0:	00000024 	andeq	r0, r0, r4, lsr #32
    32e4:	00003298 	muleq	r0, r8, r2
    32e8:	08006940 	stmdaeq	r0, {r6, r8, fp, sp, lr}
    32ec:	00000034 	andeq	r0, r0, r4, lsr r0
    32f0:	40080e41 	andmi	r0, r8, r1, asr #28
    32f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    32f8:	100e4101 	andne	r4, lr, r1, lsl #2
    32fc:	52070d41 	andpl	r0, r7, #4160	; 0x1040
    3300:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3304:	0000000d 	andeq	r0, r0, sp
    3308:	00000024 	andeq	r0, r0, r4, lsr #32
    330c:	00003298 	muleq	r0, r8, r2
    3310:	08006974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp, sp, lr}
    3314:	00000030 	andeq	r0, r0, r0, lsr r0
    3318:	40080e41 	andmi	r0, r8, r1, asr #28
    331c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3320:	100e4101 	andne	r4, lr, r1, lsl #2
    3324:	50070d41 	andpl	r0, r7, r1, asr #26
    3328:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    332c:	0000000d 	andeq	r0, r0, sp
    3330:	00000024 	andeq	r0, r0, r4, lsr #32
    3334:	00003298 	muleq	r0, r8, r2
    3338:	080069a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, sp, lr}
    333c:	0000005c 	andeq	r0, r0, ip, asr r0
    3340:	40080e41 	andmi	r0, r8, r1, asr #28
    3344:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3348:	180e4101 	stmdane	lr, {r0, r8, lr}
    334c:	61070d41 	tstvs	r7, r1, asr #26
    3350:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3354:	0000000d 	andeq	r0, r0, sp
    3358:	00000024 	andeq	r0, r0, r4, lsr #32
    335c:	00003298 	muleq	r0, r8, r2
    3360:	08006a00 	stmdaeq	r0, {r9, fp, sp, lr}
    3364:	0000004c 	andeq	r0, r0, ip, asr #32
    3368:	40080e41 	andmi	r0, r8, r1, asr #28
    336c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3370:	200e4101 	andcs	r4, lr, r1, lsl #2
    3374:	5e070d41 	cdppl	13, 0, cr0, cr7, cr1, {2}
    3378:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    337c:	0000000d 	andeq	r0, r0, sp
    3380:	00000024 	andeq	r0, r0, r4, lsr #32
    3384:	00003298 	muleq	r0, r8, r2
    3388:	08006a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp, sp, lr}
    338c:	000000e4 	andeq	r0, r0, r4, ror #1
    3390:	40080e41 	andmi	r0, r8, r1, asr #28
    3394:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3398:	180e4101 	stmdane	lr, {r0, r8, lr}
    339c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    33a0:	41080e68 	tstmi	r8, r8, ror #28
    33a4:	00000d0d 	andeq	r0, r0, sp, lsl #26
    33a8:	00000024 	andeq	r0, r0, r4, lsr #32
    33ac:	00003298 	muleq	r0, r8, r2
    33b0:	08006b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, sp, lr}
    33b4:	000001d8 	ldrdeq	r0, [r0], -r8
    33b8:	40080e41 	andmi	r0, r8, r1, asr #28
    33bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    33c0:	180e4101 	stmdane	lr, {r0, r8, lr}
    33c4:	10070c41 	andne	r0, r7, r1, asr #24
    33c8:	080eb302 	stmdaeq	lr, {r1, r8, r9, ip, sp, pc}
    33cc:	000d0d41 	andeq	r0, sp, r1, asr #26
    33d0:	00000028 	andeq	r0, r0, r8, lsr #32
    33d4:	00003298 	muleq	r0, r8, r2
    33d8:	08006d08 	stmdaeq	r0, {r3, r8, sl, fp, sp, lr}
    33dc:	00000400 	andeq	r0, r0, r0, lsl #8
    33e0:	40140e41 	andsmi	r0, r4, r1, asr #28
    33e4:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
    33e8:	03864004 	orreq	r4, r6, #4
    33ec:	40028740 	andmi	r8, r2, r0, asr #14
    33f0:	0e41018e 	dvfeqd	f0, f1, #0.5
    33f4:	070c4178 	smlsdxeq	ip, r8, r1, r4
    33f8:	00000060 	andeq	r0, r0, r0, rrx
    33fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    3400:	00003298 	muleq	r0, r8, r2
    3404:	08007108 	stmdaeq	r0, {r3, r8, ip, sp, lr}
    3408:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    340c:	40080e41 	andmi	r0, r8, r1, asr #28
    3410:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3414:	a00e4101 	andge	r4, lr, r1, lsl #2
    3418:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    341c:	0000001c 	andeq	r0, r0, ip, lsl r0
    3420:	00003298 	muleq	r0, r8, r2
    3424:	080074b8 	stmdaeq	r0, {r3, r4, r5, r7, sl, ip, sp, lr}
    3428:	000000d8 	ldrdeq	r0, [r0], -r8
    342c:	40080e41 	andmi	r0, r8, r1, asr #28
    3430:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3434:	180e4101 	stmdane	lr, {r0, r8, lr}
    3438:	00070d41 	andeq	r0, r7, r1, asr #26
    343c:	0000001c 	andeq	r0, r0, ip, lsl r0
    3440:	00003298 	muleq	r0, r8, r2
    3444:	08007590 	stmdaeq	r0, {r4, r7, r8, sl, ip, sp, lr}
    3448:	0000004c 	andeq	r0, r0, ip, asr #32
    344c:	40080e41 	andmi	r0, r8, r1, asr #28
    3450:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3454:	100e4101 	andne	r4, lr, r1, lsl #2
    3458:	00070d41 	andeq	r0, r7, r1, asr #26
    345c:	00000018 	andeq	r0, r0, r8, lsl r0
    3460:	00003298 	muleq	r0, r8, r2
    3464:	080075dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, ip, sp, lr}
    3468:	0000001e 	andeq	r0, r0, lr, lsl r0
    346c:	40040e41 	andmi	r0, r4, r1, asr #28
    3470:	0e410187 	dvfeqd	f0, f1, f7
    3474:	070d4118 	smladeq	sp, r8, r1, r4
    3478:	0000000c 	andeq	r0, r0, ip
    347c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3480:	7c020001 	stcvc	0, cr0, [r2], {1}
    3484:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3488:	00000024 	andeq	r0, r0, r4, lsr #32
    348c:	00003478 	andeq	r3, r0, r8, ror r4
    3490:	080075fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, ip, sp, lr}
    3494:	0000004e 	andeq	r0, r0, lr, asr #32
    3498:	40040e41 	andmi	r0, r4, r1, asr #28
    349c:	0e410187 	dvfeqd	f0, f1, f7
    34a0:	070d4118 	smladeq	sp, r8, r1, r4
    34a4:	41040e61 	tstmi	r4, r1, ror #28
    34a8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    34ac:	00000e40 	andeq	r0, r0, r0, asr #28
    34b0:	00000024 	andeq	r0, r0, r4, lsr #32
    34b4:	00003478 	andeq	r3, r0, r8, ror r4
    34b8:	0800764c 	stmdaeq	r0, {r2, r3, r6, r9, sl, ip, sp, lr}
    34bc:	00000054 	andeq	r0, r0, r4, asr r0
    34c0:	40040e41 	andmi	r0, r4, r1, asr #28
    34c4:	0e410187 	dvfeqd	f0, f1, f7
    34c8:	070d4118 	smladeq	sp, r8, r1, r4
    34cc:	41040e64 	tstmi	r4, r4, ror #28
    34d0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    34d4:	00000e40 	andeq	r0, r0, r0, asr #28
    34d8:	00000024 	andeq	r0, r0, r4, lsr #32
    34dc:	00003478 	andeq	r3, r0, r8, ror r4
    34e0:	080076a0 	stmdaeq	r0, {r5, r7, r9, sl, ip, sp, lr}
    34e4:	000000be 	strheq	r0, [r0], -lr
    34e8:	40080e41 	andmi	r0, r8, r1, asr #28
    34ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    34f0:	180e4101 	stmdane	lr, {r0, r8, lr}
    34f4:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    34f8:	41080e5a 	tstmi	r8, sl, asr lr
    34fc:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3500:	00000024 	andeq	r0, r0, r4, lsr #32
    3504:	00003478 	andeq	r3, r0, r8, ror r4
    3508:	00000000 	andeq	r0, r0, r0
    350c:	0000003c 	andeq	r0, r0, ip, lsr r0
    3510:	40080e41 	andmi	r0, r8, r1, asr #28
    3514:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3518:	180e4101 	stmdane	lr, {r0, r8, lr}
    351c:	59070d41 	stmdbpl	r7, {r0, r6, r8, sl, fp}
    3520:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3524:	0000000d 	andeq	r0, r0, sp
    3528:	00000024 	andeq	r0, r0, r4, lsr #32
    352c:	00003478 	andeq	r3, r0, r8, ror r4
    3530:	00000000 	andeq	r0, r0, r0
    3534:	00000064 	andeq	r0, r0, r4, rrx
    3538:	40080e41 	andmi	r0, r8, r1, asr #28
    353c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3540:	180e4101 	stmdane	lr, {r0, r8, lr}
    3544:	6d070d41 	stcvs	13, cr0, [r7, #-260]	; 0xfffffefc
    3548:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    354c:	0000000d 	andeq	r0, r0, sp
    3550:	00000024 	andeq	r0, r0, r4, lsr #32
    3554:	00003478 	andeq	r3, r0, r8, ror r4
    3558:	08007760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip, sp, lr}
    355c:	0000003c 	andeq	r0, r0, ip, lsr r0
    3560:	40080e41 	andmi	r0, r8, r1, asr #28
    3564:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3568:	180e4101 	stmdane	lr, {r0, r8, lr}
    356c:	59070d41 	stmdbpl	r7, {r0, r6, r8, sl, fp}
    3570:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3574:	0000000d 	andeq	r0, r0, sp
    3578:	00000024 	andeq	r0, r0, r4, lsr #32
    357c:	00003478 	andeq	r3, r0, r8, ror r4
    3580:	0800779c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip, sp, lr}
    3584:	00000092 	muleq	r0, r2, r0
    3588:	40080e41 	andmi	r0, r8, r1, asr #28
    358c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3590:	180e4101 	stmdane	lr, {r0, r8, lr}
    3594:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3598:	41080e44 	tstmi	r8, r4, asr #28
    359c:	00000d0d 	andeq	r0, r0, sp, lsl #26
    35a0:	00000024 	andeq	r0, r0, r4, lsr #32
    35a4:	00003478 	andeq	r3, r0, r8, ror r4
    35a8:	08007830 	stmdaeq	r0, {r4, r5, fp, ip, sp, lr}
    35ac:	00000080 	andeq	r0, r0, r0, lsl #1
    35b0:	40080e41 	andmi	r0, r8, r1, asr #28
    35b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    35b8:	100e4101 	andne	r4, lr, r1, lsl #2
    35bc:	78070d41 	stmdavc	r7, {r0, r6, r8, sl, fp}
    35c0:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    35c4:	0000000d 	andeq	r0, r0, sp
    35c8:	00000024 	andeq	r0, r0, r4, lsr #32
    35cc:	00003478 	andeq	r3, r0, r8, ror r4
    35d0:	080078b0 	stmdaeq	r0, {r4, r5, r7, fp, ip, sp, lr}
    35d4:	0000004c 	andeq	r0, r0, ip, asr #32
    35d8:	40080e41 	andmi	r0, r8, r1, asr #28
    35dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    35e0:	180e4101 	stmdane	lr, {r0, r8, lr}
    35e4:	61070d41 	tstvs	r7, r1, asr #26
    35e8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    35ec:	0000000d 	andeq	r0, r0, sp
    35f0:	00000024 	andeq	r0, r0, r4, lsr #32
    35f4:	00003478 	andeq	r3, r0, r8, ror r4
    35f8:	080078fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, ip, sp, lr}
    35fc:	0000001e 	andeq	r0, r0, lr, lsl r0
    3600:	40040e41 	andmi	r0, r4, r1, asr #28
    3604:	0e410187 	dvfeqd	f0, f1, f7
    3608:	070d4110 	smladeq	sp, r0, r1, r4
    360c:	41040e49 	tstmi	r4, r9, asr #28
    3610:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3614:	00000e40 	andeq	r0, r0, r0, asr #28
    3618:	00000038 	andeq	r0, r0, r8, lsr r0
    361c:	00003478 	andeq	r3, r0, r8, ror r4
    3620:	0800791c 	stmdaeq	r0, {r2, r3, r4, r8, fp, ip, sp, lr}
    3624:	000002f2 	strdeq	r0, [r0], -r2
    3628:	40240e42 	eormi	r0, r4, r2, asr #28
    362c:	85400984 	strbhi	r0, [r0, #-2436]	; 0xfffff67c
    3630:	07864008 	streq	r4, [r6, r8]
    3634:	40068740 	andmi	r8, r6, r0, asr #14
    3638:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
    363c:	038a4004 	orreq	r4, sl, #4
    3640:	40028b40 	andmi	r8, r2, r0, asr #22
    3644:	0e41018e 	dvfeqd	f0, f1, #0.5
    3648:	070d4168 	streq	r4, [sp, -r8, ror #2]
    364c:	0e017203 	cdpeq	2, 0, cr7, cr1, cr3, {0}
    3650:	0d0d4124 	stfeqs	f4, [sp, #-144]	; 0xffffff70
    3654:	00000024 	andeq	r0, r0, r4, lsr #32
    3658:	00003478 	andeq	r3, r0, r8, ror r4
    365c:	00000000 	andeq	r0, r0, r0
    3660:	00000036 	andeq	r0, r0, r6, lsr r0
    3664:	40080e41 	andmi	r0, r8, r1, asr #28
    3668:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    366c:	180e4101 	stmdane	lr, {r0, r8, lr}
    3670:	56070d41 	strpl	r0, [r7], -r1, asr #26
    3674:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3678:	0000000d 	andeq	r0, r0, sp
    367c:	00000024 	andeq	r0, r0, r4, lsr #32
    3680:	00003478 	andeq	r3, r0, r8, ror r4
    3684:	08007c10 	stmdaeq	r0, {r4, sl, fp, ip, sp, lr}
    3688:	00000036 	andeq	r0, r0, r6, lsr r0
    368c:	40080e41 	andmi	r0, r8, r1, asr #28
    3690:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3694:	180e4101 	stmdane	lr, {r0, r8, lr}
    3698:	56070d41 	strpl	r0, [r7], -r1, asr #26
    369c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    36a0:	0000000d 	andeq	r0, r0, sp
    36a4:	00000024 	andeq	r0, r0, r4, lsr #32
    36a8:	00003478 	andeq	r3, r0, r8, ror r4
    36ac:	00000000 	andeq	r0, r0, r0
    36b0:	0000002e 	andeq	r0, r0, lr, lsr #32
    36b4:	40080e41 	andmi	r0, r8, r1, asr #28
    36b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    36bc:	200e4101 	andcs	r4, lr, r1, lsl #2
    36c0:	18070c41 	stmdane	r7, {r0, r6, sl, fp}
    36c4:	41080e52 	tstmi	r8, r2, asr lr
    36c8:	00000d0d 	andeq	r0, r0, sp, lsl #26
    36cc:	0000003c 	andeq	r0, r0, ip, lsr r0
    36d0:	00003478 	andeq	r3, r0, r8, ror r4
    36d4:	00000000 	andeq	r0, r0, r0
    36d8:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    36dc:	40240e42 	eormi	r0, r4, r2, asr #28
    36e0:	85400984 	strbhi	r0, [r0, #-2436]	; 0xfffff67c
    36e4:	07864008 	streq	r4, [r6, r8]
    36e8:	40068740 	andmi	r8, r6, r0, asr #14
    36ec:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
    36f0:	038a4004 	orreq	r4, sl, #4
    36f4:	40028b40 	andmi	r8, r2, r0, asr #22
    36f8:	0e41018e 	dvfeqd	f0, f1, #0.5
    36fc:	0d410180 	stfeqe	f0, [r1, #-512]	; 0xfffffe00
    3700:	01550307 	cmpeq	r5, r7, lsl #6
    3704:	0d41240e 	cfstrdeq	mvd2, [r1, #-56]	; 0xffffffc8
    3708:	0000000d 	andeq	r0, r0, sp
    370c:	00000024 	andeq	r0, r0, r4, lsr #32
    3710:	00003478 	andeq	r3, r0, r8, ror r4
    3714:	00000000 	andeq	r0, r0, r0
    3718:	0000004a 	andeq	r0, r0, sl, asr #32
    371c:	40080e41 	andmi	r0, r8, r1, asr #28
    3720:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3724:	180e4101 	stmdane	lr, {r0, r8, lr}
    3728:	60070d41 	andvs	r0, r7, r1, asr #26
    372c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3730:	0000000d 	andeq	r0, r0, sp
    3734:	00000038 	andeq	r0, r0, r8, lsr r0
    3738:	00003478 	andeq	r3, r0, r8, ror r4
    373c:	08007c48 	stmdaeq	r0, {r3, r6, sl, fp, ip, sp, lr}
    3740:	00000182 	andeq	r0, r0, r2, lsl #3
    3744:	40240e42 	eormi	r0, r4, r2, asr #28
    3748:	85400984 	strbhi	r0, [r0, #-2436]	; 0xfffff67c
    374c:	07864008 	streq	r4, [r6, r8]
    3750:	40068740 	andmi	r8, r6, r0, asr #14
    3754:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
    3758:	038a4004 	orreq	r4, sl, #4
    375c:	40028b40 	andmi	r8, r2, r0, asr #22
    3760:	0e41018e 	dvfeqd	f0, f1, #0.5
    3764:	070d4160 	streq	r4, [sp, -r0, ror #2]
    3768:	240eba02 	strcs	fp, [lr], #-2562	; 0xfffff5fe
    376c:	000d0d41 	andeq	r0, sp, r1, asr #26
    3770:	00000038 	andeq	r0, r0, r8, lsr r0
    3774:	00003478 	andeq	r3, r0, r8, ror r4
    3778:	00000000 	andeq	r0, r0, r0
    377c:	00000182 	andeq	r0, r0, r2, lsl #3
    3780:	40240e42 	eormi	r0, r4, r2, asr #28
    3784:	85400984 	strbhi	r0, [r0, #-2436]	; 0xfffff67c
    3788:	07864008 	streq	r4, [r6, r8]
    378c:	40068740 	andmi	r8, r6, r0, asr #14
    3790:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
    3794:	038a4004 	orreq	r4, sl, #4
    3798:	40028b40 	andmi	r8, r2, r0, asr #22
    379c:	0e41018e 	dvfeqd	f0, f1, #0.5
    37a0:	070d4160 	streq	r4, [sp, -r0, ror #2]
    37a4:	240eba02 	strcs	fp, [lr], #-2562	; 0xfffff5fe
    37a8:	000d0d41 	andeq	r0, sp, r1, asr #26
    37ac:	0000000c 	andeq	r0, r0, ip
    37b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    37b4:	7c020001 	stcvc	0, cr0, [r2], {1}
    37b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    37bc:	00000024 	andeq	r0, r0, r4, lsr #32
    37c0:	000037ac 	andeq	r3, r0, ip, lsr #15
    37c4:	08007dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, ip, sp, lr}
    37c8:	0000003e 	andeq	r0, r0, lr, lsr r0
    37cc:	40040e41 	andmi	r0, r4, r1, asr #28
    37d0:	0e410187 	dvfeqd	f0, f1, f7
    37d4:	070d4110 	smladeq	sp, r0, r1, r4
    37d8:	41040e59 	tstmi	r4, r9, asr lr
    37dc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    37e0:	00000e40 	andeq	r0, r0, r0, asr #28
    37e4:	00000024 	andeq	r0, r0, r4, lsr #32
    37e8:	000037ac 	andeq	r3, r0, ip, lsr #15
    37ec:	08007e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, ip, sp, lr}
    37f0:	00000018 	andeq	r0, r0, r8, lsl r0
    37f4:	40040e41 	andmi	r0, r4, r1, asr #28
    37f8:	0e410187 	dvfeqd	f0, f1, f7
    37fc:	070d4110 	smladeq	sp, r0, r1, r4
    3800:	41040e46 	tstmi	r4, r6, asr #28
    3804:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3808:	00000e40 	andeq	r0, r0, r0, asr #28
    380c:	00000024 	andeq	r0, r0, r4, lsr #32
    3810:	000037ac 	andeq	r3, r0, ip, lsr #15
    3814:	08007e24 	stmdaeq	r0, {r2, r5, r9, sl, fp, ip, sp, lr}
    3818:	00000046 	andeq	r0, r0, r6, asr #32
    381c:	40040e41 	andmi	r0, r4, r1, asr #28
    3820:	0e410187 	dvfeqd	f0, f1, f7
    3824:	070d4118 	smladeq	sp, r8, r1, r4
    3828:	41040e5d 	tstmi	r4, sp, asr lr
    382c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3830:	00000e40 	andeq	r0, r0, r0, asr #28
    3834:	00000024 	andeq	r0, r0, r4, lsr #32
    3838:	000037ac 	andeq	r3, r0, ip, lsr #15
    383c:	08007e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
    3840:	00000070 	andeq	r0, r0, r0, ror r0
    3844:	40040e41 	andmi	r0, r4, r1, asr #28
    3848:	0e410187 	dvfeqd	f0, f1, f7
    384c:	070d4118 	smladeq	sp, r8, r1, r4
    3850:	41040e72 	tstmi	r4, r2, ror lr
    3854:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3858:	00000e40 	andeq	r0, r0, r0, asr #28
    385c:	00000024 	andeq	r0, r0, r4, lsr #32
    3860:	000037ac 	andeq	r3, r0, ip, lsr #15
    3864:	08007edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
    3868:	00000052 	andeq	r0, r0, r2, asr r0
    386c:	40040e41 	andmi	r0, r4, r1, asr #28
    3870:	0e410187 	dvfeqd	f0, f1, f7
    3874:	070d4118 	smladeq	sp, r8, r1, r4
    3878:	41040e63 	tstmi	r4, r3, ror #28
    387c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3880:	00000e40 	andeq	r0, r0, r0, asr #28
    3884:	0000000c 	andeq	r0, r0, ip
    3888:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    388c:	7c020001 	stcvc	0, cr0, [r2], {1}
    3890:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3894:	00000024 	andeq	r0, r0, r4, lsr #32
    3898:	00003884 	andeq	r3, r0, r4, lsl #17
    389c:	08007f30 	stmdaeq	r0, {r4, r5, r8, r9, sl, fp, ip, sp, lr}
    38a0:	000000b4 	strheq	r0, [r0], -r4
    38a4:	40080e41 	andmi	r0, r8, r1, asr #28
    38a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    38ac:	180e4101 	stmdane	lr, {r0, r8, lr}
    38b0:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    38b4:	41080e53 	tstmi	r8, r3, asr lr
    38b8:	00000d0d 	andeq	r0, r0, sp, lsl #26
    38bc:	00000024 	andeq	r0, r0, r4, lsr #32
    38c0:	00003884 	andeq	r3, r0, r4, lsl #17
    38c4:	08007fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
    38c8:	0000005c 	andeq	r0, r0, ip, asr r0
    38cc:	40080e41 	andmi	r0, r8, r1, asr #28
    38d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    38d4:	300e4101 	andcc	r4, lr, r1, lsl #2
    38d8:	28070c41 	stmdacs	r7, {r0, r6, sl, fp}
    38dc:	41080e69 	tstmi	r8, r9, ror #28
    38e0:	00000d0d 	andeq	r0, r0, sp, lsl #26
    38e4:	00000024 	andeq	r0, r0, r4, lsr #32
    38e8:	00003884 	andeq	r3, r0, r4, lsl #17
    38ec:	08008040 	stmdaeq	r0, {r6, pc}
    38f0:	0000003e 	andeq	r0, r0, lr, lsr r0
    38f4:	40080e41 	andmi	r0, r8, r1, asr #28
    38f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    38fc:	180e4101 	stmdane	lr, {r0, r8, lr}
    3900:	5a070d41 	bpl	1c6e0c <_Min_Stack_Size+0x1c6c0c>
    3904:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3908:	0000000d 	andeq	r0, r0, sp
    390c:	00000024 	andeq	r0, r0, r4, lsr #32
    3910:	00003884 	andeq	r3, r0, r4, lsl #17
    3914:	08008080 	stmdaeq	r0, {r7, pc}
    3918:	00000034 	andeq	r0, r0, r4, lsr r0
    391c:	40080e41 	andmi	r0, r8, r1, asr #28
    3920:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3924:	100e4101 	andne	r4, lr, r1, lsl #2
    3928:	55070d41 	strpl	r0, [r7, #-3393]	; 0xfffff2bf
    392c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3930:	0000000d 	andeq	r0, r0, sp
    3934:	00000024 	andeq	r0, r0, r4, lsr #32
    3938:	00003884 	andeq	r3, r0, r4, lsl #17
    393c:	080080b4 	stmdaeq	r0, {r2, r4, r5, r7, pc}
    3940:	00000030 	andeq	r0, r0, r0, lsr r0
    3944:	40080e41 	andmi	r0, r8, r1, asr #28
    3948:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    394c:	200e4101 	andcs	r4, lr, r1, lsl #2
    3950:	53070d41 	movwpl	r0, #32065	; 0x7d41
    3954:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3958:	0000000d 	andeq	r0, r0, sp
    395c:	00000024 	andeq	r0, r0, r4, lsr #32
    3960:	00003884 	andeq	r3, r0, r4, lsl #17
    3964:	080080e4 	stmdaeq	r0, {r2, r5, r6, r7, pc}
    3968:	00000154 	andeq	r0, r0, r4, asr r1
    396c:	40080e41 	andmi	r0, r8, r1, asr #28
    3970:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3974:	300e4101 	andcc	r4, lr, r1, lsl #2
    3978:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    397c:	41080ea3 	smlatbmi	r8, r3, lr, r0
    3980:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3984:	00000024 	andeq	r0, r0, r4, lsr #32
    3988:	00003884 	andeq	r3, r0, r4, lsl #17
    398c:	00000000 	andeq	r0, r0, r0
    3990:	000000ae 	andeq	r0, r0, lr, lsr #1
    3994:	40080e41 	andmi	r0, r8, r1, asr #28
    3998:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    399c:	380e4101 	stmdacc	lr, {r0, r8, lr}
    39a0:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    39a4:	41080e52 	tstmi	r8, r2, asr lr
    39a8:	00000d0d 	andeq	r0, r0, sp, lsl #26
    39ac:	00000024 	andeq	r0, r0, r4, lsr #32
    39b0:	00003884 	andeq	r3, r0, r4, lsl #17
    39b4:	00000000 	andeq	r0, r0, r0
    39b8:	000000a6 	andeq	r0, r0, r6, lsr #1
    39bc:	40080e41 	andmi	r0, r8, r1, asr #28
    39c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    39c4:	300e4101 	andcc	r4, lr, r1, lsl #2
    39c8:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    39cc:	41080e4e 	tstmi	r8, lr, asr #28
    39d0:	00000d0d 	andeq	r0, r0, sp, lsl #26
    39d4:	00000024 	andeq	r0, r0, r4, lsr #32
    39d8:	00003884 	andeq	r3, r0, r4, lsl #17
    39dc:	00000000 	andeq	r0, r0, r0
    39e0:	00000144 	andeq	r0, r0, r4, asr #2
    39e4:	40080e41 	andmi	r0, r8, r1, asr #28
    39e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    39ec:	300e4101 	andcc	r4, lr, r1, lsl #2
    39f0:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    39f4:	41080e9b 			; <UNDEFINED> instruction: 0x41080e9b
    39f8:	00000d0d 	andeq	r0, r0, sp, lsl #26
    39fc:	00000024 	andeq	r0, r0, r4, lsr #32
    3a00:	00003884 	andeq	r3, r0, r4, lsl #17
    3a04:	08008238 	stmdaeq	r0, {r3, r4, r5, r9, pc}
    3a08:	00000190 	muleq	r0, r0, r1
    3a0c:	40080e41 	andmi	r0, r8, r1, asr #28
    3a10:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3a14:	300e4101 	andcc	r4, lr, r1, lsl #2
    3a18:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3a1c:	41080ec1 	smlabtmi	r8, r1, lr, r0
    3a20:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3a24:	00000024 	andeq	r0, r0, r4, lsr #32
    3a28:	00003884 	andeq	r3, r0, r4, lsl #17
    3a2c:	00000000 	andeq	r0, r0, r0
    3a30:	00000148 	andeq	r0, r0, r8, asr #2
    3a34:	40080e41 	andmi	r0, r8, r1, asr #28
    3a38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3a3c:	300e4101 	andcc	r4, lr, r1, lsl #2
    3a40:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3a44:	41080e9d 			; <UNDEFINED> instruction: 0x41080e9d
    3a48:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3a4c:	00000024 	andeq	r0, r0, r4, lsr #32
    3a50:	00003884 	andeq	r3, r0, r4, lsl #17
    3a54:	00000000 	andeq	r0, r0, r0
    3a58:	000000ac 	andeq	r0, r0, ip, lsr #1
    3a5c:	40080e41 	andmi	r0, r8, r1, asr #28
    3a60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3a64:	380e4101 	stmdacc	lr, {r0, r8, lr}
    3a68:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3a6c:	41080e51 	tstmi	r8, r1, asr lr
    3a70:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3a74:	00000024 	andeq	r0, r0, r4, lsr #32
    3a78:	00003884 	andeq	r3, r0, r4, lsl #17
    3a7c:	00000000 	andeq	r0, r0, r0
    3a80:	00000064 	andeq	r0, r0, r4, rrx
    3a84:	40080e41 	andmi	r0, r8, r1, asr #28
    3a88:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3a8c:	300e4101 	andcc	r4, lr, r1, lsl #2
    3a90:	6d070d41 	stcvs	13, cr0, [r7, #-260]	; 0xfffffefc
    3a94:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3a98:	0000000d 	andeq	r0, r0, sp
    3a9c:	00000024 	andeq	r0, r0, r4, lsr #32
    3aa0:	00003884 	andeq	r3, r0, r4, lsl #17
    3aa4:	00000000 	andeq	r0, r0, r0
    3aa8:	00000020 	andeq	r0, r0, r0, lsr #32
    3aac:	40080e41 	andmi	r0, r8, r1, asr #28
    3ab0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3ab4:	180e4101 	stmdane	lr, {r0, r8, lr}
    3ab8:	4b070d41 	blmi	1c6fc4 <_Min_Stack_Size+0x1c6dc4>
    3abc:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3ac0:	0000000d 	andeq	r0, r0, sp
    3ac4:	00000024 	andeq	r0, r0, r4, lsr #32
    3ac8:	00003884 	andeq	r3, r0, r4, lsl #17
    3acc:	00000000 	andeq	r0, r0, r0
    3ad0:	0000002a 	andeq	r0, r0, sl, lsr #32
    3ad4:	40080e41 	andmi	r0, r8, r1, asr #28
    3ad8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3adc:	180e4101 	stmdane	lr, {r0, r8, lr}
    3ae0:	50070d41 	andpl	r0, r7, r1, asr #26
    3ae4:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3ae8:	0000000d 	andeq	r0, r0, sp
    3aec:	00000024 	andeq	r0, r0, r4, lsr #32
    3af0:	00003884 	andeq	r3, r0, r4, lsl #17
    3af4:	00000000 	andeq	r0, r0, r0
    3af8:	0000001e 	andeq	r0, r0, lr, lsl r0
    3afc:	40040e41 	andmi	r0, r4, r1, asr #28
    3b00:	0e410187 	dvfeqd	f0, f1, f7
    3b04:	070d4118 	smladeq	sp, r8, r1, r4
    3b08:	41040e49 	tstmi	r4, r9, asr #28
    3b0c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3b10:	00000e40 	andeq	r0, r0, r0, asr #28
    3b14:	00000024 	andeq	r0, r0, r4, lsr #32
    3b18:	00003884 	andeq	r3, r0, r4, lsl #17
    3b1c:	00000000 	andeq	r0, r0, r0
    3b20:	0000001a 	andeq	r0, r0, sl, lsl r0
    3b24:	40080e41 	andmi	r0, r8, r1, asr #28
    3b28:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3b2c:	180e4101 	stmdane	lr, {r0, r8, lr}
    3b30:	48070d41 	stmdami	r7, {r0, r6, r8, sl, fp}
    3b34:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3b38:	0000000d 	andeq	r0, r0, sp
    3b3c:	00000024 	andeq	r0, r0, r4, lsr #32
    3b40:	00003884 	andeq	r3, r0, r4, lsl #17
    3b44:	080083c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, pc}
    3b48:	0000002e 	andeq	r0, r0, lr, lsr #32
    3b4c:	40040e41 	andmi	r0, r4, r1, asr #28
    3b50:	0e410187 	dvfeqd	f0, f1, f7
    3b54:	070d4118 	smladeq	sp, r8, r1, r4
    3b58:	41040e51 	tstmi	r4, r1, asr lr
    3b5c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3b60:	00000e40 	andeq	r0, r0, r0, asr #28
    3b64:	00000024 	andeq	r0, r0, r4, lsr #32
    3b68:	00003884 	andeq	r3, r0, r4, lsl #17
    3b6c:	080083f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, pc}
    3b70:	000000d4 	ldrdeq	r0, [r0], -r4
    3b74:	40080e41 	andmi	r0, r8, r1, asr #28
    3b78:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3b7c:	200e4101 	andcs	r4, lr, r1, lsl #2
    3b80:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3b84:	41080e65 	tstmi	r8, r5, ror #28
    3b88:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3b8c:	00000024 	andeq	r0, r0, r4, lsr #32
    3b90:	00003884 	andeq	r3, r0, r4, lsl #17
    3b94:	00000000 	andeq	r0, r0, r0
    3b98:	0000004c 	andeq	r0, r0, ip, asr #32
    3b9c:	40080e41 	andmi	r0, r8, r1, asr #28
    3ba0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3ba4:	100e4101 	andne	r4, lr, r1, lsl #2
    3ba8:	61070d41 	tstvs	r7, r1, asr #26
    3bac:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3bb0:	0000000d 	andeq	r0, r0, sp
    3bb4:	00000024 	andeq	r0, r0, r4, lsr #32
    3bb8:	00003884 	andeq	r3, r0, r4, lsl #17
    3bbc:	080084cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, pc}
    3bc0:	000000a4 	andeq	r0, r0, r4, lsr #1
    3bc4:	40080e41 	andmi	r0, r8, r1, asr #28
    3bc8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3bcc:	180e4101 	stmdane	lr, {r0, r8, lr}
    3bd0:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3bd4:	41080e4d 	tstmi	r8, sp, asr #28
    3bd8:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3bdc:	00000024 	andeq	r0, r0, r4, lsr #32
    3be0:	00003884 	andeq	r3, r0, r4, lsl #17
    3be4:	08008570 	stmdaeq	r0, {r4, r5, r6, r8, sl, pc}
    3be8:	0000002c 	andeq	r0, r0, ip, lsr #32
    3bec:	40080e41 	andmi	r0, r8, r1, asr #28
    3bf0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3bf4:	180e4101 	stmdane	lr, {r0, r8, lr}
    3bf8:	51070d41 	tstpl	r7, r1, asr #26
    3bfc:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3c00:	0000000d 	andeq	r0, r0, sp
    3c04:	00000024 	andeq	r0, r0, r4, lsr #32
    3c08:	00003884 	andeq	r3, r0, r4, lsl #17
    3c0c:	00000000 	andeq	r0, r0, r0
    3c10:	0000002a 	andeq	r0, r0, sl, lsr #32
    3c14:	40040e41 	andmi	r0, r4, r1, asr #28
    3c18:	0e410187 	dvfeqd	f0, f1, f7
    3c1c:	070d4118 	smladeq	sp, r8, r1, r4
    3c20:	41040e4f 	tstmi	r4, pc, asr #28
    3c24:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3c28:	00000e40 	andeq	r0, r0, r0, asr #28
    3c2c:	00000024 	andeq	r0, r0, r4, lsr #32
    3c30:	00003884 	andeq	r3, r0, r4, lsl #17
    3c34:	0800859c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, pc}
    3c38:	00000030 	andeq	r0, r0, r0, lsr r0
    3c3c:	40080e41 	andmi	r0, r8, r1, asr #28
    3c40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3c44:	180e4101 	stmdane	lr, {r0, r8, lr}
    3c48:	53070d41 	movwpl	r0, #32065	; 0x7d41
    3c4c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3c50:	0000000d 	andeq	r0, r0, sp
    3c54:	00000024 	andeq	r0, r0, r4, lsr #32
    3c58:	00003884 	andeq	r3, r0, r4, lsl #17
    3c5c:	00000000 	andeq	r0, r0, r0
    3c60:	0000002e 	andeq	r0, r0, lr, lsr #32
    3c64:	40040e41 	andmi	r0, r4, r1, asr #28
    3c68:	0e410187 	dvfeqd	f0, f1, f7
    3c6c:	070d4118 	smladeq	sp, r8, r1, r4
    3c70:	41040e51 	tstmi	r4, r1, asr lr
    3c74:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3c78:	00000e40 	andeq	r0, r0, r0, asr #28
    3c7c:	0000000c 	andeq	r0, r0, ip
    3c80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3c84:	7c020001 	stcvc	0, cr0, [r2], {1}
    3c88:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3c8c:	00000024 	andeq	r0, r0, r4, lsr #32
    3c90:	00003c7c 	andeq	r3, r0, ip, ror ip
    3c94:	080085cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, pc}
    3c98:	00000082 	andeq	r0, r0, r2, lsl #1
    3c9c:	40080e41 	andmi	r0, r8, r1, asr #28
    3ca0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3ca4:	380e4101 	stmdacc	lr, {r0, r8, lr}
    3ca8:	28070c41 	stmdacs	r7, {r0, r6, sl, fp}
    3cac:	41080e7c 	tstmi	r8, ip, ror lr
    3cb0:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3cb4:	00000024 	andeq	r0, r0, r4, lsr #32
    3cb8:	00003c7c 	andeq	r3, r0, ip, ror ip
    3cbc:	08008650 	stmdaeq	r0, {r4, r6, r9, sl, pc}
    3cc0:	000000fe 	strdeq	r0, [r0], -lr
    3cc4:	40080e41 	andmi	r0, r8, r1, asr #28
    3cc8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3ccc:	200e4101 	andcs	r4, lr, r1, lsl #2
    3cd0:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3cd4:	41080e7a 	tstmi	r8, sl, ror lr
    3cd8:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3cdc:	00000024 	andeq	r0, r0, r4, lsr #32
    3ce0:	00003c7c 	andeq	r3, r0, ip, ror ip
    3ce4:	08008750 	stmdaeq	r0, {r4, r6, r8, r9, sl, pc}
    3ce8:	000000d4 	ldrdeq	r0, [r0], -r4
    3cec:	40080e41 	andmi	r0, r8, r1, asr #28
    3cf0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3cf4:	100e4101 	andne	r4, lr, r1, lsl #2
    3cf8:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3cfc:	41080e57 	tstmi	r8, r7, asr lr
    3d00:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3d04:	00000024 	andeq	r0, r0, r4, lsr #32
    3d08:	00003c7c 	andeq	r3, r0, ip, ror ip
    3d0c:	00000000 	andeq	r0, r0, r0
    3d10:	000000a0 	andeq	r0, r0, r0, lsr #1
    3d14:	40080e41 	andmi	r0, r8, r1, asr #28
    3d18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3d1c:	200e4101 	andcs	r4, lr, r1, lsl #2
    3d20:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3d24:	41080e47 	tstmi	r8, r7, asr #28
    3d28:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3d2c:	00000024 	andeq	r0, r0, r4, lsr #32
    3d30:	00003c7c 	andeq	r3, r0, ip, ror ip
    3d34:	08008824 	stmdaeq	r0, {r2, r5, fp, pc}
    3d38:	00000048 	andeq	r0, r0, r8, asr #32
    3d3c:	40080e41 	andmi	r0, r8, r1, asr #28
    3d40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3d44:	180e4101 	stmdane	lr, {r0, r8, lr}
    3d48:	5c070d41 	stcpl	13, cr0, [r7], {65}	; 0x41
    3d4c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3d50:	0000000d 	andeq	r0, r0, sp
    3d54:	00000024 	andeq	r0, r0, r4, lsr #32
    3d58:	00003c7c 	andeq	r3, r0, ip, ror ip
    3d5c:	00000000 	andeq	r0, r0, r0
    3d60:	00000034 	andeq	r0, r0, r4, lsr r0
    3d64:	40080e41 	andmi	r0, r8, r1, asr #28
    3d68:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3d6c:	180e4101 	stmdane	lr, {r0, r8, lr}
    3d70:	53070d41 	movwpl	r0, #32065	; 0x7d41
    3d74:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3d78:	0000000d 	andeq	r0, r0, sp
    3d7c:	00000024 	andeq	r0, r0, r4, lsr #32
    3d80:	00003c7c 	andeq	r3, r0, ip, ror ip
    3d84:	00000000 	andeq	r0, r0, r0
    3d88:	00000054 	andeq	r0, r0, r4, asr r0
    3d8c:	40040e41 	andmi	r0, r4, r1, asr #28
    3d90:	0e410187 	dvfeqd	f0, f1, f7
    3d94:	070d4128 	streq	r4, [sp, -r8, lsr #2]
    3d98:	41040e62 	tstmi	r4, r2, ror #28
    3d9c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3da0:	00000e40 	andeq	r0, r0, r0, asr #28
    3da4:	00000024 	andeq	r0, r0, r4, lsr #32
    3da8:	00003c7c 	andeq	r3, r0, ip, ror ip
    3dac:	00000000 	andeq	r0, r0, r0
    3db0:	00000138 	andeq	r0, r0, r8, lsr r1
    3db4:	40080e41 	andmi	r0, r8, r1, asr #28
    3db8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3dbc:	200e4101 	andcs	r4, lr, r1, lsl #2
    3dc0:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3dc4:	41080e8e 	smlabbmi	r8, lr, lr, r0
    3dc8:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3dcc:	00000024 	andeq	r0, r0, r4, lsr #32
    3dd0:	00003c7c 	andeq	r3, r0, ip, ror ip
    3dd4:	00000000 	andeq	r0, r0, r0
    3dd8:	00000104 	andeq	r0, r0, r4, lsl #2
    3ddc:	40080e41 	andmi	r0, r8, r1, asr #28
    3de0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3de4:	180e4101 	stmdane	lr, {r0, r8, lr}
    3de8:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3dec:	41080e6e 	tstmi	r8, lr, ror #28
    3df0:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3df4:	00000024 	andeq	r0, r0, r4, lsr #32
    3df8:	00003c7c 	andeq	r3, r0, ip, ror ip
    3dfc:	00000000 	andeq	r0, r0, r0
    3e00:	00000044 	andeq	r0, r0, r4, asr #32
    3e04:	40040e41 	andmi	r0, r4, r1, asr #28
    3e08:	0e410187 	dvfeqd	f0, f1, f7
    3e0c:	070d4118 	smladeq	sp, r8, r1, r4
    3e10:	41040e58 	tstmi	r4, r8, asr lr
    3e14:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3e18:	00000e40 	andeq	r0, r0, r0, asr #28
    3e1c:	00000024 	andeq	r0, r0, r4, lsr #32
    3e20:	00003c7c 	andeq	r3, r0, ip, ror ip
    3e24:	00000000 	andeq	r0, r0, r0
    3e28:	000000a0 	andeq	r0, r0, r0, lsr #1
    3e2c:	40080e41 	andmi	r0, r8, r1, asr #28
    3e30:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3e34:	180e4101 	stmdane	lr, {r0, r8, lr}
    3e38:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3e3c:	41080e42 	tstmi	r8, r2, asr #28
    3e40:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3e44:	00000024 	andeq	r0, r0, r4, lsr #32
    3e48:	00003c7c 	andeq	r3, r0, ip, ror ip
    3e4c:	00000000 	andeq	r0, r0, r0
    3e50:	000000c0 	andeq	r0, r0, r0, asr #1
    3e54:	40080e41 	andmi	r0, r8, r1, asr #28
    3e58:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3e5c:	280e4101 	stmdacs	lr, {r0, r8, lr}
    3e60:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3e64:	41080e51 	tstmi	r8, r1, asr lr
    3e68:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3e6c:	00000024 	andeq	r0, r0, r4, lsr #32
    3e70:	00003c7c 	andeq	r3, r0, ip, ror ip
    3e74:	0800886c 	stmdaeq	r0, {r2, r3, r5, r6, fp, pc}
    3e78:	0000006c 	andeq	r0, r0, ip, rrx
    3e7c:	40080e41 	andmi	r0, r8, r1, asr #28
    3e80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3e84:	180e4101 	stmdane	lr, {r0, r8, lr}
    3e88:	10070c41 	andne	r0, r7, r1, asr #24
    3e8c:	41080e65 	tstmi	r8, r5, ror #28
    3e90:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3e94:	00000024 	andeq	r0, r0, r4, lsr #32
    3e98:	00003c7c 	andeq	r3, r0, ip, ror ip
    3e9c:	00000000 	andeq	r0, r0, r0
    3ea0:	00000030 	andeq	r0, r0, r0, lsr r0
    3ea4:	40080e41 	andmi	r0, r8, r1, asr #28
    3ea8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3eac:	100e4101 	andne	r4, lr, r1, lsl #2
    3eb0:	50070d41 	andpl	r0, r7, r1, asr #26
    3eb4:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3eb8:	0000000d 	andeq	r0, r0, sp
    3ebc:	00000020 	andeq	r0, r0, r0, lsr #32
    3ec0:	00003c7c 	andeq	r3, r0, ip, ror ip
    3ec4:	080088d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, pc}
    3ec8:	0000001c 	andeq	r0, r0, ip, lsl r0
    3ecc:	40040e41 	andmi	r0, r4, r1, asr #28
    3ed0:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3ed4:	0d0d4707 	stceq	7, cr4, [sp, #-28]	; 0xffffffe4
    3ed8:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    3edc:	00000000 	andeq	r0, r0, r0
    3ee0:	00000024 	andeq	r0, r0, r4, lsr #32
    3ee4:	00003c7c 	andeq	r3, r0, ip, ror ip
    3ee8:	080088f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, pc}
    3eec:	0000011c 	andeq	r0, r0, ip, lsl r1
    3ef0:	40080e41 	andmi	r0, r8, r1, asr #28
    3ef4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3ef8:	180e4101 	stmdane	lr, {r0, r8, lr}
    3efc:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3f00:	41080e76 	tstmi	r8, r6, ror lr
    3f04:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3f08:	00000024 	andeq	r0, r0, r4, lsr #32
    3f0c:	00003c7c 	andeq	r3, r0, ip, ror ip
    3f10:	00000000 	andeq	r0, r0, r0
    3f14:	0000001c 	andeq	r0, r0, ip, lsl r0
    3f18:	40040e41 	andmi	r0, r4, r1, asr #28
    3f1c:	0e410187 	dvfeqd	f0, f1, f7
    3f20:	070d4110 	smladeq	sp, r0, r1, r4
    3f24:	41040e46 	tstmi	r4, r6, asr #28
    3f28:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3f2c:	00000e40 	andeq	r0, r0, r0, asr #28
    3f30:	00000024 	andeq	r0, r0, r4, lsr #32
    3f34:	00003c7c 	andeq	r3, r0, ip, ror ip
    3f38:	00000000 	andeq	r0, r0, r0
    3f3c:	00000020 	andeq	r0, r0, r0, lsr #32
    3f40:	40040e41 	andmi	r0, r4, r1, asr #28
    3f44:	0e410187 	dvfeqd	f0, f1, f7
    3f48:	070d4110 	smladeq	sp, r0, r1, r4
    3f4c:	41040e48 	tstmi	r4, r8, asr #28
    3f50:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3f54:	00000e40 	andeq	r0, r0, r0, asr #28
    3f58:	00000020 	andeq	r0, r0, r0, lsr #32
    3f5c:	00003c7c 	andeq	r3, r0, ip, ror ip
    3f60:	00000000 	andeq	r0, r0, r0
    3f64:	00000014 	andeq	r0, r0, r4, lsl r0
    3f68:	40040e41 	andmi	r0, r4, r1, asr #28
    3f6c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3f70:	0d0d4407 	cfstrseq	mvf4, [sp, #-28]	; 0xffffffe4
    3f74:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    3f78:	00000000 	andeq	r0, r0, r0
    3f7c:	00000024 	andeq	r0, r0, r4, lsr #32
    3f80:	00003c7c 	andeq	r3, r0, ip, ror ip
    3f84:	00000000 	andeq	r0, r0, r0
    3f88:	0000002c 	andeq	r0, r0, ip, lsr #32
    3f8c:	40040e41 	andmi	r0, r4, r1, asr #28
    3f90:	0e410187 	dvfeqd	f0, f1, f7
    3f94:	070d4118 	smladeq	sp, r8, r1, r4
    3f98:	41040e4d 	tstmi	r4, sp, asr #28
    3f9c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3fa0:	00000e40 	andeq	r0, r0, r0, asr #28
    3fa4:	00000024 	andeq	r0, r0, r4, lsr #32
    3fa8:	00003c7c 	andeq	r3, r0, ip, ror ip
    3fac:	08008a10 	stmdaeq	r0, {r4, r9, fp, pc}
    3fb0:	00000150 	andeq	r0, r0, r0, asr r1
    3fb4:	40080e41 	andmi	r0, r8, r1, asr #28
    3fb8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3fbc:	200e4101 	andcs	r4, lr, r1, lsl #2
    3fc0:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3fc4:	41080e8c 	smlabbmi	r8, ip, lr, r0
    3fc8:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3fcc:	00000024 	andeq	r0, r0, r4, lsr #32
    3fd0:	00003c7c 	andeq	r3, r0, ip, ror ip
    3fd4:	08008b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, pc}
    3fd8:	000000d8 	ldrdeq	r0, [r0], -r8
    3fdc:	40080e41 	andmi	r0, r8, r1, asr #28
    3fe0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3fe4:	200e4101 	andcs	r4, lr, r1, lsl #2
    3fe8:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3fec:	41080e5c 	tstmi	r8, ip, asr lr
    3ff0:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3ff4:	00000024 	andeq	r0, r0, r4, lsr #32
    3ff8:	00003c7c 	andeq	r3, r0, ip, ror ip
    3ffc:	08008c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, pc}
    4000:	0000002c 	andeq	r0, r0, ip, lsr #32
    4004:	40080e41 	andmi	r0, r8, r1, asr #28
    4008:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    400c:	100e4101 	andne	r4, lr, r1, lsl #2
    4010:	4f070d41 	svcmi	0x00070d41
    4014:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    4018:	0000000d 	andeq	r0, r0, sp
    401c:	00000024 	andeq	r0, r0, r4, lsr #32
    4020:	00003c7c 	andeq	r3, r0, ip, ror ip
    4024:	00000000 	andeq	r0, r0, r0
    4028:	0000003c 	andeq	r0, r0, ip, lsr r0
    402c:	40080e41 	andmi	r0, r8, r1, asr #28
    4030:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4034:	180e4101 	stmdane	lr, {r0, r8, lr}
    4038:	56070d41 	strpl	r0, [r7], -r1, asr #26
    403c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    4040:	0000000d 	andeq	r0, r0, sp
    4044:	00000024 	andeq	r0, r0, r4, lsr #32
    4048:	00003c7c 	andeq	r3, r0, ip, ror ip
    404c:	08008c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, pc}
    4050:	000000a8 	andeq	r0, r0, r8, lsr #1
    4054:	40080e41 	andmi	r0, r8, r1, asr #28
    4058:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    405c:	180e4101 	stmdane	lr, {r0, r8, lr}
    4060:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    4064:	41080e43 	tstmi	r8, r3, asr #28
    4068:	00000d0d 	andeq	r0, r0, sp, lsl #26
    406c:	00000024 	andeq	r0, r0, r4, lsr #32
    4070:	00003c7c 	andeq	r3, r0, ip, ror ip
    4074:	00000000 	andeq	r0, r0, r0
    4078:	00000084 	andeq	r0, r0, r4, lsl #1
    407c:	40080e41 	andmi	r0, r8, r1, asr #28
    4080:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4084:	180e4101 	stmdane	lr, {r0, r8, lr}
    4088:	75070d41 	strvc	r0, [r7, #-3393]	; 0xfffff2bf
    408c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    4090:	0000000d 	andeq	r0, r0, sp
    4094:	00000024 	andeq	r0, r0, r4, lsr #32
    4098:	00003c7c 	andeq	r3, r0, ip, ror ip
    409c:	00000000 	andeq	r0, r0, r0
    40a0:	00000030 	andeq	r0, r0, r0, lsr r0
    40a4:	40080e41 	andmi	r0, r8, r1, asr #28
    40a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    40ac:	100e4101 	andne	r4, lr, r1, lsl #2
    40b0:	4f070d41 	svcmi	0x00070d41
    40b4:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    40b8:	0000000d 	andeq	r0, r0, sp
    40bc:	00000024 	andeq	r0, r0, r4, lsr #32
    40c0:	00003c7c 	andeq	r3, r0, ip, ror ip
    40c4:	08008d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, pc}
    40c8:	0000002c 	andeq	r0, r0, ip, lsr #32
    40cc:	40040e41 	andmi	r0, r4, r1, asr #28
    40d0:	0e410187 	dvfeqd	f0, f1, f7
    40d4:	070d4110 	smladeq	sp, r0, r1, r4
    40d8:	41040e4b 	tstmi	r4, fp, asr #28
    40dc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    40e0:	00000e40 	andeq	r0, r0, r0, asr #28
    40e4:	00000024 	andeq	r0, r0, r4, lsr #32
    40e8:	00003c7c 	andeq	r3, r0, ip, ror ip
    40ec:	08008d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, pc}
    40f0:	0000008c 	andeq	r0, r0, ip, lsl #1
    40f4:	40080e41 	andmi	r0, r8, r1, asr #28
    40f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    40fc:	200e4101 	andcs	r4, lr, r1, lsl #2
    4100:	7d070d41 	stcvc	13, cr0, [r7, #-260]	; 0xfffffefc
    4104:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    4108:	0000000d 	andeq	r0, r0, sp
    410c:	00000020 	andeq	r0, r0, r0, lsr #32
    4110:	00003c7c 	andeq	r3, r0, ip, ror ip
    4114:	08008dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp, pc}
    4118:	00000018 	andeq	r0, r0, r8, lsl r0
    411c:	40040e41 	andmi	r0, r4, r1, asr #28
    4120:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    4124:	0d0d4507 	cfstr32eq	mvfx4, [sp, #-28]	; 0xffffffe4
    4128:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    412c:	00000000 	andeq	r0, r0, r0
    4130:	0000001c 	andeq	r0, r0, ip, lsl r0
    4134:	00003c7c 	andeq	r3, r0, ip, ror ip
    4138:	08008ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, pc}
    413c:	00000030 	andeq	r0, r0, r0, lsr r0
    4140:	40080e41 	andmi	r0, r8, r1, asr #28
    4144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4148:	100e4101 	andne	r4, lr, r1, lsl #2
    414c:	00070d41 	andeq	r0, r7, r1, asr #26
    4150:	00000024 	andeq	r0, r0, r4, lsr #32
    4154:	00003c7c 	andeq	r3, r0, ip, ror ip
    4158:	08008e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, pc}
    415c:	00000074 	andeq	r0, r0, r4, ror r0
    4160:	40080e41 	andmi	r0, r8, r1, asr #28
    4164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4168:	100e4101 	andne	r4, lr, r1, lsl #2
    416c:	67070d41 	strvs	r0, [r7, -r1, asr #26]
    4170:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    4174:	0000000d 	andeq	r0, r0, sp
    4178:	00000020 	andeq	r0, r0, r0, lsr #32
    417c:	00003c7c 	andeq	r3, r0, ip, ror ip
    4180:	08008e80 	stmdaeq	r0, {r7, r9, sl, fp, pc}
    4184:	0000000c 	andeq	r0, r0, ip
    4188:	40040e41 	andmi	r0, r4, r1, asr #28
    418c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    4190:	0d0d4207 	sfmeq	f4, 4, [sp, #-28]	; 0xffffffe4
    4194:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    4198:	00000000 	andeq	r0, r0, r0
    419c:	00000024 	andeq	r0, r0, r4, lsr #32
    41a0:	00003c7c 	andeq	r3, r0, ip, ror ip
    41a4:	08008e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, pc}
    41a8:	00000040 	andeq	r0, r0, r0, asr #32
    41ac:	40040e41 	andmi	r0, r4, r1, asr #28
    41b0:	0e410187 	dvfeqd	f0, f1, f7
    41b4:	070d4110 	smladeq	sp, r0, r1, r4
    41b8:	41040e55 	tstmi	r4, r5, asr lr
    41bc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    41c0:	00000e40 	andeq	r0, r0, r0, asr #28
    41c4:	00000024 	andeq	r0, r0, r4, lsr #32
    41c8:	00003c7c 	andeq	r3, r0, ip, ror ip
    41cc:	00000000 	andeq	r0, r0, r0
    41d0:	0000001c 	andeq	r0, r0, ip, lsl r0
    41d4:	40040e41 	andmi	r0, r4, r1, asr #28
    41d8:	0e410187 	dvfeqd	f0, f1, f7
    41dc:	070d4110 	smladeq	sp, r0, r1, r4
    41e0:	41040e46 	tstmi	r4, r6, asr #28
    41e4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    41e8:	00000e40 	andeq	r0, r0, r0, asr #28
    41ec:	00000024 	andeq	r0, r0, r4, lsr #32
    41f0:	00003c7c 	andeq	r3, r0, ip, ror ip
    41f4:	08008ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, pc}
    41f8:	00000100 	andeq	r0, r0, r0, lsl #2
    41fc:	40080e41 	andmi	r0, r8, r1, asr #28
    4200:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4204:	180e4101 	stmdane	lr, {r0, r8, lr}
    4208:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    420c:	41080e75 	tstmi	r8, r5, ror lr
    4210:	00000d0d 	andeq	r0, r0, sp, lsl #26
    4214:	00000024 	andeq	r0, r0, r4, lsr #32
    4218:	00003c7c 	andeq	r3, r0, ip, ror ip
    421c:	08008fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, pc}
    4220:	000000c8 	andeq	r0, r0, r8, asr #1
    4224:	40080e41 	andmi	r0, r8, r1, asr #28
    4228:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    422c:	180e4101 	stmdane	lr, {r0, r8, lr}
    4230:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    4234:	41080e5b 	tstmi	r8, fp, asr lr
    4238:	00000d0d 	andeq	r0, r0, sp, lsl #26
    423c:	00000024 	andeq	r0, r0, r4, lsr #32
    4240:	00003c7c 	andeq	r3, r0, ip, ror ip
    4244:	08009094 	stmdaeq	r0, {r2, r4, r7, ip, pc}
    4248:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    424c:	40080e41 	andmi	r0, r8, r1, asr #28
    4250:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4254:	200e4101 	andcs	r4, lr, r1, lsl #2
    4258:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    425c:	41080e6f 	tstmi	r8, pc, ror #28
    4260:	00000d0d 	andeq	r0, r0, sp, lsl #26
    4264:	00000024 	andeq	r0, r0, r4, lsr #32
    4268:	00003c7c 	andeq	r3, r0, ip, ror ip
    426c:	00000000 	andeq	r0, r0, r0
    4270:	00000030 	andeq	r0, r0, r0, lsr r0
    4274:	40040e41 	andmi	r0, r4, r1, asr #28
    4278:	0e410187 	dvfeqd	f0, f1, f7
    427c:	070d4110 	smladeq	sp, r0, r1, r4
    4280:	41040e4f 	tstmi	r4, pc, asr #28
    4284:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    4288:	00000e40 	andeq	r0, r0, r0, asr #28
    428c:	00000020 	andeq	r0, r0, r0, lsr #32
    4290:	00003c7c 	andeq	r3, r0, ip, ror ip
    4294:	08009184 	stmdaeq	r0, {r2, r7, r8, ip, pc}
    4298:	00000028 	andeq	r0, r0, r8, lsr #32
    429c:	40040e41 	andmi	r0, r4, r1, asr #28
    42a0:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    42a4:	0d0d4d07 	stceq	13, cr4, [sp, #-28]	; 0xffffffe4
    42a8:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    42ac:	00000000 	andeq	r0, r0, r0
    42b0:	00000024 	andeq	r0, r0, r4, lsr #32
    42b4:	00003c7c 	andeq	r3, r0, ip, ror ip
    42b8:	00000000 	andeq	r0, r0, r0
    42bc:	00000090 	muleq	r0, r0, r0
    42c0:	40080e41 	andmi	r0, r8, r1, asr #28
    42c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    42c8:	180e4101 	stmdane	lr, {r0, r8, lr}
    42cc:	7f070d41 	svcvc	0x00070d41
    42d0:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    42d4:	0000000d 	andeq	r0, r0, sp
    42d8:	00000024 	andeq	r0, r0, r4, lsr #32
    42dc:	00003c7c 	andeq	r3, r0, ip, ror ip
    42e0:	00000000 	andeq	r0, r0, r0
    42e4:	000000b4 	strheq	r0, [r0], -r4
    42e8:	40080e41 	andmi	r0, r8, r1, asr #28
    42ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    42f0:	200e4101 	andcs	r4, lr, r1, lsl #2
    42f4:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    42f8:	41080e51 	tstmi	r8, r1, asr lr
    42fc:	00000d0d 	andeq	r0, r0, sp, lsl #26
    4300:	00000024 	andeq	r0, r0, r4, lsr #32
    4304:	00003c7c 	andeq	r3, r0, ip, ror ip
    4308:	00000000 	andeq	r0, r0, r0
    430c:	00000110 	andeq	r0, r0, r0, lsl r1
    4310:	40080e41 	andmi	r0, r8, r1, asr #28
    4314:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4318:	280e4101 	stmdacs	lr, {r0, r8, lr}
    431c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    4320:	41080e7a 	tstmi	r8, sl, ror lr
    4324:	00000d0d 	andeq	r0, r0, sp, lsl #26
    4328:	00000024 	andeq	r0, r0, r4, lsr #32
    432c:	00003c7c 	andeq	r3, r0, ip, ror ip
    4330:	00000000 	andeq	r0, r0, r0
    4334:	0000014c 	andeq	r0, r0, ip, asr #2
    4338:	40080e41 	andmi	r0, r8, r1, asr #28
    433c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4340:	380e4101 	stmdacc	lr, {r0, r8, lr}
    4344:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    4348:	41080e95 			; <UNDEFINED> instruction: 0x41080e95
    434c:	00000d0d 	andeq	r0, r0, sp, lsl #26
    4350:	00000024 	andeq	r0, r0, r4, lsr #32
    4354:	00003c7c 	andeq	r3, r0, ip, ror ip
    4358:	00000000 	andeq	r0, r0, r0
    435c:	000000e4 	andeq	r0, r0, r4, ror #1
    4360:	40080e41 	andmi	r0, r8, r1, asr #28
    4364:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4368:	280e4101 	stmdacs	lr, {r0, r8, lr}
    436c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    4370:	41080e60 	tstmi	r8, r0, ror #28
    4374:	00000d0d 	andeq	r0, r0, sp, lsl #26
    4378:	00000024 	andeq	r0, r0, r4, lsr #32
    437c:	00003c7c 	andeq	r3, r0, ip, ror ip
    4380:	00000000 	andeq	r0, r0, r0
    4384:	0000004c 	andeq	r0, r0, ip, asr #32
    4388:	40080e41 	andmi	r0, r8, r1, asr #28
    438c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4390:	180e4101 	stmdane	lr, {r0, r8, lr}
    4394:	5f070d41 	svcpl	0x00070d41
    4398:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    439c:	0000000d 	andeq	r0, r0, sp
    43a0:	00000024 	andeq	r0, r0, r4, lsr #32
    43a4:	00003c7c 	andeq	r3, r0, ip, ror ip
    43a8:	080091ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, ip, pc}
    43ac:	000000cc 	andeq	r0, r0, ip, asr #1
    43b0:	40080e41 	andmi	r0, r8, r1, asr #28
    43b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    43b8:	180e4101 	stmdane	lr, {r0, r8, lr}
    43bc:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    43c0:	41080e52 	tstmi	r8, r2, asr lr
    43c4:	00000d0d 	andeq	r0, r0, sp, lsl #26
    43c8:	0000000c 	andeq	r0, r0, ip
    43cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    43d0:	7c020001 	stcvc	0, cr0, [r2], {1}
    43d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    43d8:	00000024 	andeq	r0, r0, r4, lsr #32
    43dc:	000043c8 	andeq	r4, r0, r8, asr #7
    43e0:	08009278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, pc}
    43e4:	00000058 	andeq	r0, r0, r8, asr r0
    43e8:	40040e41 	andmi	r0, r4, r1, asr #28
    43ec:	0e410187 	dvfeqd	f0, f1, f7
    43f0:	070d4118 	smladeq	sp, r8, r1, r4
    43f4:	41040e64 	tstmi	r4, r4, ror #28
    43f8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    43fc:	00000e40 	andeq	r0, r0, r0, asr #28
    4400:	00000024 	andeq	r0, r0, r4, lsr #32
    4404:	000043c8 	andeq	r4, r0, r8, asr #7
    4408:	080092d0 	stmdaeq	r0, {r4, r6, r7, r9, ip, pc}
    440c:	0000002e 	andeq	r0, r0, lr, lsr #32
    4410:	40040e41 	andmi	r0, r4, r1, asr #28
    4414:	0e410187 	dvfeqd	f0, f1, f7
    4418:	070d4110 	smladeq	sp, r0, r1, r4
    441c:	41040e51 	tstmi	r4, r1, asr lr
    4420:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    4424:	00000e40 	andeq	r0, r0, r0, asr #28
    4428:	0000000c 	andeq	r0, r0, ip
    442c:	000043c8 	andeq	r4, r0, r8, asr #7
    4430:	08009300 	stmdaeq	r0, {r8, r9, ip, pc}
    4434:	00000026 	andeq	r0, r0, r6, lsr #32
    4438:	0000000c 	andeq	r0, r0, ip
    443c:	000043c8 	andeq	r4, r0, r8, asr #7
    4440:	08009328 	stmdaeq	r0, {r3, r5, r8, r9, ip, pc}
    4444:	0000001c 	andeq	r0, r0, ip, lsl r0
    4448:	00000018 	andeq	r0, r0, r8, lsl r0
    444c:	000043c8 	andeq	r4, r0, r8, asr #7
    4450:	08009348 	stmdaeq	r0, {r3, r6, r8, r9, ip, pc}
    4454:	00000040 	andeq	r0, r0, r0, asr #32
    4458:	40080e41 	andmi	r0, r8, r1, asr #28
    445c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4460:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    4464:	00000020 	andeq	r0, r0, r0, lsr #32
    4468:	000043c8 	andeq	r4, r0, r8, asr #7
    446c:	00000000 	andeq	r0, r0, r0
    4470:	0000000c 	andeq	r0, r0, ip
    4474:	40040e41 	andmi	r0, r4, r1, asr #28
    4478:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    447c:	0d0d4207 	sfmeq	f4, 4, [sp, #-28]	; 0xffffffe4
    4480:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    4484:	00000000 	andeq	r0, r0, r0
    4488:	00000024 	andeq	r0, r0, r4, lsr #32
    448c:	000043c8 	andeq	r4, r0, r8, asr #7
    4490:	08009388 	stmdaeq	r0, {r3, r7, r8, r9, ip, pc}
    4494:	00000030 	andeq	r0, r0, r0, lsr r0
    4498:	40040e41 	andmi	r0, r4, r1, asr #28
    449c:	0e410187 	dvfeqd	f0, f1, f7
    44a0:	070d4110 	smladeq	sp, r0, r1, r4
    44a4:	41040e50 	tstmi	r4, r0, asr lr
    44a8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    44ac:	00000e40 	andeq	r0, r0, r0, asr #28
    44b0:	00000024 	andeq	r0, r0, r4, lsr #32
    44b4:	000043c8 	andeq	r4, r0, r8, asr #7
    44b8:	080093b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, ip, pc}
    44bc:	00000030 	andeq	r0, r0, r0, lsr r0
    44c0:	40040e41 	andmi	r0, r4, r1, asr #28
    44c4:	0e410187 	dvfeqd	f0, f1, f7
    44c8:	070d4110 	smladeq	sp, r0, r1, r4
    44cc:	41040e50 	tstmi	r4, r0, asr lr
    44d0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    44d4:	00000e40 	andeq	r0, r0, r0, asr #28
    44d8:	0000000c 	andeq	r0, r0, ip
    44dc:	000043c8 	andeq	r4, r0, r8, asr #7
    44e0:	080093f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip, pc}
    44e4:	00000046 	andeq	r0, r0, r6, asr #32
    44e8:	00000024 	andeq	r0, r0, r4, lsr #32
    44ec:	000043c8 	andeq	r4, r0, r8, asr #7
    44f0:	08009438 	stmdaeq	r0, {r3, r4, r5, sl, ip, pc}
    44f4:	00000040 	andeq	r0, r0, r0, asr #32
    44f8:	40080e41 	andmi	r0, r8, r1, asr #28
    44fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4500:	100e4101 	andne	r4, lr, r1, lsl #2
    4504:	59070d41 	stmdbpl	r7, {r0, r6, r8, sl, fp}
    4508:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    450c:	0000000d 	andeq	r0, r0, sp
    4510:	00000020 	andeq	r0, r0, r0, lsr #32
    4514:	000043c8 	andeq	r4, r0, r8, asr #7
    4518:	08009478 	stmdaeq	r0, {r3, r4, r5, r6, sl, ip, pc}
    451c:	00000034 	andeq	r0, r0, r4, lsr r0
    4520:	40040e41 	andmi	r0, r4, r1, asr #28
    4524:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    4528:	0d0d4e07 	stceq	14, cr4, [sp, #-28]	; 0xffffffe4
    452c:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    4530:	00000000 	andeq	r0, r0, r0
    4534:	0000000c 	andeq	r0, r0, ip
    4538:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    453c:	7c020001 	stcvc	0, cr0, [r2], {1}
    4540:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4544:	00000024 	andeq	r0, r0, r4, lsr #32
    4548:	00004534 	andeq	r4, r0, r4, lsr r5
    454c:	080094ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, ip, pc}
    4550:	0000008c 	andeq	r0, r0, ip, lsl #1
    4554:	40080e41 	andmi	r0, r8, r1, asr #28
    4558:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    455c:	180e4101 	stmdane	lr, {r0, r8, lr}
    4560:	7a070d41 	bvc	1c7a6c <_Min_Stack_Size+0x1c786c>
    4564:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    4568:	0000000d 	andeq	r0, r0, sp
    456c:	00000024 	andeq	r0, r0, r4, lsr #32
    4570:	00004534 	andeq	r4, r0, r4, lsr r5
    4574:	08009538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip, pc}
    4578:	00000012 	andeq	r0, r0, r2, lsl r0
    457c:	40040e41 	andmi	r0, r4, r1, asr #28
    4580:	0e410187 	dvfeqd	f0, f1, f7
    4584:	070d4110 	smladeq	sp, r0, r1, r4
    4588:	41040e43 	tstmi	r4, r3, asr #28
    458c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    4590:	00000e40 	andeq	r0, r0, r0, asr #28
    4594:	00000020 	andeq	r0, r0, r0, lsr #32
    4598:	00004534 	andeq	r4, r0, r4, lsr r5
    459c:	00000000 	andeq	r0, r0, r0
    45a0:	00000018 	andeq	r0, r0, r8, lsl r0
    45a4:	40040e41 	andmi	r0, r4, r1, asr #28
    45a8:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    45ac:	0d0d4507 	cfstr32eq	mvfx4, [sp, #-28]	; 0xffffffe4
    45b0:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    45b4:	00000000 	andeq	r0, r0, r0
    45b8:	00000020 	andeq	r0, r0, r0, lsr #32
    45bc:	00004534 	andeq	r4, r0, r4, lsr r5
    45c0:	00000000 	andeq	r0, r0, r0
    45c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    45c8:	40040e41 	andmi	r0, r4, r1, asr #28
    45cc:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    45d0:	0d0d4707 	stceq	7, cr4, [sp, #-28]	; 0xffffffe4
    45d4:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    45d8:	00000000 	andeq	r0, r0, r0
    45dc:	0000000c 	andeq	r0, r0, ip
    45e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    45e4:	7c020001 	stcvc	0, cr0, [r2], {1}
    45e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    45ec:	00000020 	andeq	r0, r0, r0, lsr #32
    45f0:	000045dc 	ldrdeq	r4, [r0], -ip
    45f4:	080001fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8}
    45f8:	0000009a 	muleq	r0, sl, r0
    45fc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    4600:	86028503 	strhi	r8, [r2], -r3, lsl #10
    4604:	0a480201 	beq	1204e10 <_Min_Stack_Size+0x1204c10>
    4608:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    460c:	000b4100 	andeq	r4, fp, r0, lsl #2
    4610:	0000000c 	andeq	r0, r0, ip
    4614:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4618:	7c020001 	stcvc	0, cr0, [r2], {1}
    461c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4620:	00000020 	andeq	r0, r0, r0, lsr #32
    4624:	00004610 	andeq	r4, r0, r0, lsl r6
    4628:	08000298 	stmdaeq	r0, {r3, r4, r7, r9}
    462c:	00000064 	andeq	r0, r0, r4, rrx
    4630:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
    4634:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
    4638:	87058606 	strhi	r8, [r5, -r6, lsl #12]
    463c:	89038804 	stmdbhi	r3, {r2, fp, pc}
    4640:	00018e02 	andeq	r8, r1, r2, lsl #28
    4644:	00000020 	andeq	r0, r0, r0, lsr #32
    4648:	00004610 	andeq	r4, r0, r0, lsl r6
    464c:	080002fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9}
    4650:	000000a0 	andeq	r0, r0, r0, lsr #1
    4654:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
    4658:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
    465c:	87058606 	strhi	r8, [r5, -r6, lsl #12]
    4660:	89038804 	stmdbhi	r3, {r2, fp, pc}
    4664:	00018e02 	andeq	r8, r1, r2, lsl #28
    4668:	0000000c 	andeq	r0, r0, ip
    466c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4670:	7c020001 	stcvc	0, cr0, [r2], {1}
    4674:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4678:	00000058 	andeq	r0, r0, r8, asr r0
    467c:	00004668 	andeq	r4, r0, r8, ror #12
    4680:	0800039c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9}
    4684:	0000008c 	andeq	r0, r0, ip, lsl #1
    4688:	83040e41 	movwhi	r0, #20033	; 0x4e41
    468c:	180e4101 	stmdane	lr, {r0, r8, lr}
    4690:	05850684 	streq	r0, [r5, #1668]	; 0x684
    4694:	03870486 	orreq	r0, r7, #-2046820352	; 0x86000000
    4698:	0e42028e 	cdpeq	2, 4, cr0, cr2, cr14, {4}
    469c:	0a5e0188 	beq	1784cc4 <_Min_Stack_Size+0x1784ac4>
    46a0:	c442180e 	strbgt	r1, [r2], #-2062	; 0xfffff7f2
    46a4:	cec7c6c5 	cdpgt	6, 12, cr12, cr7, cr5, {6}
    46a8:	c341040e 	movtgt	r0, #5134	; 0x140e
    46ac:	0b41000e 	bleq	10446ec <_Min_Stack_Size+0x10444ec>
    46b0:	180e0a4d 	stmdane	lr, {r0, r2, r3, r6, r9, fp}
    46b4:	c6c7ce42 	strbgt	ip, [r7], r2, asr #28
    46b8:	040ec4c5 	streq	ip, [lr], #-1221	; 0xfffffb3b
    46bc:	000ec341 	andeq	ip, lr, r1, asr #6
    46c0:	0a460b41 	beq	11873cc <_Min_Stack_Size+0x11871cc>
    46c4:	c442180e 	strbgt	r1, [r2], #-2062	; 0xfffff7f2
    46c8:	cec7c6c5 	cdpgt	6, 12, cr12, cr7, cr5, {6}
    46cc:	c341040e 	movtgt	r0, #5134	; 0x140e
    46d0:	0b41000e 	bleq	1044710 <_Min_Stack_Size+0x1044510>
    46d4:	00000060 	andeq	r0, r0, r0, rrx
    46d8:	00004668 	andeq	r4, r0, r8, ror #12
    46dc:	08000428 	stmdaeq	r0, {r3, r5, sl}
    46e0:	00000098 	muleq	r0, r8, r0
    46e4:	82080e41 	andhi	r0, r8, #1040	; 0x410
    46e8:	41018302 	tstmi	r1, r2, lsl #6
    46ec:	07841c0e 	streq	r1, [r4, lr, lsl #24]
    46f0:	05860685 	streq	r0, [r6, #1669]	; 0x685
    46f4:	038e0487 	orreq	r0, lr, #-2030043136	; 0x87000000
    46f8:	01900e43 	orrseq	r0, r0, r3, asr #28
    46fc:	1c0e0a5f 			; <UNDEFINED> instruction: 0x1c0e0a5f
    4700:	c6c5c442 	strbgt	ip, [r5], r2, asr #8
    4704:	080ecec7 	stmdaeq	lr, {r0, r1, r2, r6, r7, r9, sl, fp, lr, pc}
    4708:	0ec3c241 	cdpeq	2, 12, cr12, cr3, cr1, {2}
    470c:	4e0b4100 	adfmie	f4, f3, f0
    4710:	421c0e0a 	andsmi	r0, ip, #10, 28	; 0xa0
    4714:	c5c6c7ce 	strbgt	ip, [r6, #1998]	; 0x7ce
    4718:	41080ec4 	smlabtmi	r8, r4, lr, r0
    471c:	000ec2c3 	andeq	ip, lr, r3, asr #5
    4720:	0a460b41 	beq	118742c <_Min_Stack_Size+0x118722c>
    4724:	c4421c0e 	strbgt	r1, [r2], #-3086	; 0xfffff3f2
    4728:	cec7c6c5 	cdpgt	6, 12, cr12, cr7, cr5, {6}
    472c:	c241080e 	subgt	r0, r1, #917504	; 0xe0000
    4730:	41000ec3 	smlabtmi	r0, r3, lr, r0
    4734:	0000000b 	andeq	r0, r0, fp
    4738:	0000000c 	andeq	r0, r0, ip
    473c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4740:	7c020001 	stcvc	0, cr0, [r2], {1}
    4744:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4748:	00000038 	andeq	r0, r0, r8, lsr r0
    474c:	00004738 	andeq	r4, r0, r8, lsr r7
    4750:	080004c0 	stmdaeq	r0, {r6, r7, sl}
    4754:	000000ce 	andeq	r0, r0, lr, asr #1
    4758:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    475c:	86028503 	strhi	r8, [r2], -r3, lsl #10
    4760:	c60a7701 	strgt	r7, [sl], -r1, lsl #14
    4764:	000ec4c5 	andeq	ip, lr, r5, asr #9
    4768:	0a670b41 	beq	19c7474 <_Min_Stack_Size+0x19c7274>
    476c:	0ec6c5c4 	cdpeq	5, 12, cr12, cr6, cr4, {6}
    4770:	420b4100 	andmi	r4, fp, #0, 2
    4774:	c6c5c40a 	strbgt	ip, [r5], sl, lsl #8
    4778:	0b41000e 	bleq	10447b8 <_Min_Stack_Size+0x10445b8>
    477c:	c6c5c442 	strbgt	ip, [r5], r2, asr #8
    4780:	0000000e 	andeq	r0, r0, lr
    4784:	0000000c 	andeq	r0, r0, ip
    4788:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    478c:	7c020001 	stcvc	0, cr0, [r2], {1}
    4790:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4794:	0000000c 	andeq	r0, r0, ip
    4798:	00004784 	andeq	r4, r0, r4, lsl #15
    479c:	08000590 	stmdaeq	r0, {r4, r7, r8, sl}
    47a0:	000000ba 	strheq	r0, [r0], -sl
    47a4:	0000000c 	andeq	r0, r0, ip
    47a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    47ac:	7c020001 	stcvc	0, cr0, [r2], {1}
    47b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    47b4:	0000000c 	andeq	r0, r0, ip
    47b8:	000047a4 	andeq	r4, r0, r4, lsr #15
    47bc:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
    47c0:	0000005c 	andeq	r0, r0, ip, asr r0
    47c4:	0000000c 	andeq	r0, r0, ip
    47c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    47cc:	7c020001 	stcvc	0, cr0, [r2], {1}
    47d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    47d4:	00000040 	andeq	r0, r0, r0, asr #32
    47d8:	000047c4 	andeq	r4, r0, r4, asr #15
    47dc:	080006a8 	stmdaeq	r0, {r3, r5, r7, r9, sl}
    47e0:	0000009c 	muleq	r0, ip, r0
    47e4:	84100e47 	ldrhi	r0, [r0], #-3655	; 0xfffff1b9
    47e8:	86038504 	strhi	r8, [r3], -r4, lsl #10
    47ec:	7a018702 	bvc	663fc <_Min_Stack_Size+0x661fc>
    47f0:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
    47f4:	0e43000e 	cdpeq	0, 4, cr0, cr3, cr14, {0}
    47f8:	85048410 	strhi	r8, [r4, #-1040]	; 0xfffffbf0
    47fc:	87028603 	strhi	r8, [r2, -r3, lsl #12]
    4800:	c40a4201 	strgt	r4, [sl], #-513	; 0xfffffdff
    4804:	0ec7c6c5 	cdpeq	6, 12, cr12, cr7, cr5, {6}
    4808:	420b4100 	andmi	r4, fp, #0, 2
    480c:	c6c5c40a 	strbgt	ip, [r5], sl, lsl #8
    4810:	41000ec7 	smlabtmi	r0, r7, lr, r0
    4814:	0000000b 	andeq	r0, r0, fp
    4818:	0000000c 	andeq	r0, r0, ip
    481c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4820:	7c020001 	stcvc	0, cr0, [r2], {1}
    4824:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4828:	00000020 	andeq	r0, r0, r0, lsr #32
    482c:	00004818 	andeq	r4, r0, r8, lsl r8
    4830:	08000744 	stmdaeq	r0, {r2, r6, r8, r9, sl}
    4834:	00000066 	andeq	r0, r0, r6, rrx
    4838:	840c0e44 	strhi	r0, [ip], #-3652	; 0xfffff1bc
    483c:	86028503 	strhi	r8, [r2], -r3, lsl #10
    4840:	c60a6c01 	strgt	r6, [sl], -r1, lsl #24
    4844:	000ec4c5 	andeq	ip, lr, r5, asr #9
    4848:	00000b41 	andeq	r0, r0, r1, asr #22
    484c:	0000000c 	andeq	r0, r0, ip
    4850:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4854:	7c020001 	stcvc	0, cr0, [r2], {1}
    4858:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    485c:	0000000c 	andeq	r0, r0, ip
    4860:	0000484c 	andeq	r4, r0, ip, asr #16
    4864:	080007ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl}
    4868:	00000010 	andeq	r0, r0, r0, lsl r0
    486c:	0000000c 	andeq	r0, r0, ip
    4870:	0000484c 	andeq	r4, r0, ip, asr #16
    4874:	080007bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl}
    4878:	00000010 	andeq	r0, r0, r0, lsl r0
    487c:	0000000c 	andeq	r0, r0, ip
    4880:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4884:	7c020001 	stcvc	0, cr0, [r2], {1}
    4888:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    488c:	0000002c 	andeq	r0, r0, ip, lsr #32
    4890:	0000487c 	andeq	r4, r0, ip, ror r8
    4894:	080007cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl}
    4898:	0000008c 	andeq	r0, r0, ip, lsl #1
    489c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    48a0:	53018502 	movwpl	r8, #5378	; 0x1502
    48a4:	0ec4c50a 	cdpeq	5, 12, cr12, cr4, cr10, {0}
    48a8:	500b4100 	andpl	r4, fp, r0, lsl #2
    48ac:	0ec5c40a 	cdpeq	4, 12, cr12, cr5, cr10, {0}
    48b0:	430b4300 	movwmi	r4, #45824	; 0xb300
    48b4:	0ec5c40a 	cdpeq	4, 12, cr12, cr5, cr10, {0}
    48b8:	000b4100 	andeq	r4, fp, r0, lsl #2
    48bc:	0000000c 	andeq	r0, r0, ip
    48c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    48c4:	7c020001 	stcvc	0, cr0, [r2], {1}
    48c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    48cc:	00000018 	andeq	r0, r0, r8, lsl r0
    48d0:	000048bc 			; <UNDEFINED> instruction: 0x000048bc
    48d4:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
    48d8:	000000bc 	strheq	r0, [r0], -ip
    48dc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    48e0:	86038504 	strhi	r8, [r3], -r4, lsl #10
    48e4:	00018e02 	andeq	r8, r1, r2, lsl #28
    48e8:	0000000c 	andeq	r0, r0, ip
    48ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    48f0:	7c020001 	stcvc	0, cr0, [r2], {1}
    48f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    48f8:	00000024 	andeq	r0, r0, r4, lsr #32
    48fc:	000048e8 	andeq	r4, r0, r8, ror #17
    4900:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
    4904:	000000c6 	andeq	r0, r0, r6, asr #1
    4908:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
    490c:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
    4910:	87078608 	strhi	r8, [r7, -r8, lsl #12]
    4914:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
    4918:	8b038a04 	blhi	e7130 <_Min_Stack_Size+0xe6f30>
    491c:	00018e02 	andeq	r8, r1, r2, lsl #28
    4920:	00000030 	andeq	r0, r0, r0, lsr r0
    4924:	000048e8 	andeq	r4, r0, r8, ror #17
    4928:	080009dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp}
    492c:	00000100 	andeq	r0, r0, r0, lsl #2
    4930:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    4934:	86088509 	strhi	r8, [r8], -r9, lsl #10
    4938:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    493c:	8a048905 	bhi	126d58 <_Min_Stack_Size+0x126b58>
    4940:	8e028b03 	vmlahi.f64	d8, d2, d3
    4944:	300e4201 	andcc	r4, lr, r1, lsl #4
    4948:	0e0a7402 	cdpeq	4, 0, cr7, cr10, cr2, {0}
    494c:	440b4224 	strmi	r4, [fp], #-548	; 0xfffffddc
    4950:	0000240e 	andeq	r2, r0, lr, lsl #8
    4954:	0000002c 	andeq	r0, r0, ip, lsr #32
    4958:	000048e8 	andeq	r4, r0, r8, ror #17
    495c:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
    4960:	0000023c 	andeq	r0, r0, ip, lsr r2
    4964:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    4968:	86088509 	strhi	r8, [r8], -r9, lsl #10
    496c:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    4970:	8a048905 	bhi	126d8c <_Min_Stack_Size+0x126b8c>
    4974:	8e028b03 	vmlahi.f64	d8, d2, d3
    4978:	980e4301 	stmdals	lr, {r0, r8, r9, lr}
    497c:	0aac0201 	beq	feb05188 <BootRAM+0xda75929>
    4980:	0b42240e 	bleq	108d9c0 <_Min_Stack_Size+0x108d7c0>
    4984:	0000000c 	andeq	r0, r0, ip
    4988:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    498c:	7c020001 	stcvc	0, cr0, [r2], {1}
    4990:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4994:	00000020 	andeq	r0, r0, r0, lsr #32
    4998:	00004984 	andeq	r4, r0, r4, lsl #19
    499c:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
    49a0:	00000132 	andeq	r0, r0, r2, lsr r1
    49a4:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
    49a8:	86078508 	strhi	r8, [r7], -r8, lsl #10
    49ac:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    49b0:	8a038904 	bhi	e6dc8 <_Min_Stack_Size+0xe6bc8>
    49b4:	00018e02 	andeq	r8, r1, r2, lsl #28
    49b8:	00000030 	andeq	r0, r0, r0, lsr r0
    49bc:	00004984 	andeq	r4, r0, r4, lsl #19
    49c0:	08000e4c 	stmdaeq	r0, {r2, r3, r6, r9, sl, fp}
    49c4:	000002a8 	andeq	r0, r0, r8, lsr #5
    49c8:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xfffff1be
    49cc:	86068507 	strhi	r8, [r6], -r7, lsl #10
    49d0:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    49d4:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
    49d8:	300e4301 	andcc	r4, lr, r1, lsl #6
    49dc:	0e0a9f02 	cdpeq	15, 0, cr9, cr10, cr2, {0}
    49e0:	440b421c 	strmi	r4, [fp], #-540	; 0xfffffde4
    49e4:	421c0e0a 	andsmi	r0, ip, #10, 28	; 0xa0
    49e8:	0000000b 	andeq	r0, r0, fp
    49ec:	0000000c 	andeq	r0, r0, ip
    49f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    49f4:	7c020001 	stcvc	0, cr0, [r2], {1}
    49f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    49fc:	00000018 	andeq	r0, r0, r8, lsl r0
    4a00:	000049ec 	andeq	r4, r0, ip, ror #19
    4a04:	080010f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, ip}
    4a08:	00000024 	andeq	r0, r0, r4, lsr #32
    4a0c:	83100e41 	tsthi	r0, #1040	; 0x410
    4a10:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    4a14:	00018e02 	andeq	r8, r1, r2, lsl #28
    4a18:	0000000c 	andeq	r0, r0, ip
    4a1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4a20:	7c020001 	stcvc	0, cr0, [r2], {1}
    4a24:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4a28:	00000020 	andeq	r0, r0, r0, lsr #32
    4a2c:	00004a18 	andeq	r4, r0, r8, lsl sl
    4a30:	08001118 	stmdaeq	r0, {r3, r4, r8, ip}
    4a34:	0000008c 	andeq	r0, r0, ip, lsl #1
    4a38:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    4a3c:	86028503 	strhi	r8, [r2], -r3, lsl #10
    4a40:	c60a6701 	strgt	r6, [sl], -r1, lsl #14
    4a44:	000ec4c5 	andeq	ip, lr, r5, asr #9
    4a48:	00000b41 	andeq	r0, r0, r1, asr #22
    4a4c:	0000000c 	andeq	r0, r0, ip
    4a50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4a54:	7c020001 	stcvc	0, cr0, [r2], {1}
    4a58:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4a5c:	0000001c 	andeq	r0, r0, ip, lsl r0
    4a60:	00004a4c 	andeq	r4, r0, ip, asr #20
    4a64:	080011a4 	stmdaeq	r0, {r2, r5, r7, r8, ip}
    4a68:	000000c6 	andeq	r0, r0, r6, asr #1
    4a6c:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xfffff1be
    4a70:	86048505 	strhi	r8, [r4], -r5, lsl #10
    4a74:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    4a78:	00000001 	andeq	r0, r0, r1
    4a7c:	0000000c 	andeq	r0, r0, ip
    4a80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4a84:	7c020001 	stcvc	0, cr0, [r2], {1}
    4a88:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4a8c:	00000024 	andeq	r0, r0, r4, lsr #32
    4a90:	00004a7c 	andeq	r4, r0, ip, ror sl
    4a94:	0800126c 	stmdaeq	r0, {r2, r3, r5, r6, r9, ip}
    4a98:	00000048 	andeq	r0, r0, r8, asr #32
    4a9c:	83180e42 	tsthi	r8, #1056	; 0x420
    4aa0:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    4aa4:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    4aa8:	5f018e02 	svcpl	0x00018e02
    4aac:	c4c3000e 	strbgt	r0, [r3], #14
    4ab0:	cec7c6c5 	cdpgt	6, 12, cr12, cr7, cr5, {6}
    4ab4:	0000000c 	andeq	r0, r0, ip
    4ab8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4abc:	7c020001 	stcvc	0, cr0, [r2], {1}
    4ac0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4ac4:	00000020 	andeq	r0, r0, r0, lsr #32
    4ac8:	00004ab4 			; <UNDEFINED> instruction: 0x00004ab4
    4acc:	00000000 	andeq	r0, r0, r0
    4ad0:	0000001a 	andeq	r0, r0, sl, lsl r0
    4ad4:	83100e41 	tsthi	r0, #1040	; 0x410
    4ad8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    4adc:	4a018e02 	bmi	682ec <_Min_Stack_Size+0x680ec>
    4ae0:	c3c4c5ce 	bicgt	ip, r4, #864026624	; 0x33800000
    4ae4:	0000000e 	andeq	r0, r0, lr
    4ae8:	0000002c 	andeq	r0, r0, ip, lsr #32
    4aec:	00004ab4 			; <UNDEFINED> instruction: 0x00004ab4
    4af0:	00000000 	andeq	r0, r0, r0
    4af4:	000000c4 	andeq	r0, r0, r4, asr #1
    4af8:	84100e46 	ldrhi	r0, [r0], #-3654	; 0xfffff1ba
    4afc:	86038504 	strhi	r8, [r3], -r4, lsl #10
    4b00:	02018e02 	andeq	r8, r1, #2, 28
    4b04:	c6ce0a52 			; <UNDEFINED> instruction: 0xc6ce0a52
    4b08:	000ec4c5 	andeq	ip, lr, r5, asr #9
    4b0c:	0e440b42 	vmlseq.f64	d16, d4, d2
    4b10:	c6c5c400 	strbgt	ip, [r5], r0, lsl #8
    4b14:	000000ce 	andeq	r0, r0, lr, asr #1
    4b18:	0000000c 	andeq	r0, r0, ip
    4b1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4b20:	7c020001 	stcvc	0, cr0, [r2], {1}
    4b24:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4b28:	0000000c 	andeq	r0, r0, ip
    4b2c:	00004b18 	andeq	r4, r0, r8, lsl fp
    4b30:	080012b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, ip}
    4b34:	00000014 	andeq	r0, r0, r4, lsl r0
    4b38:	0000000c 	andeq	r0, r0, ip
    4b3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4b40:	7c020001 	stcvc	0, cr0, [r2], {1}
    4b44:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4b48:	0000000c 	andeq	r0, r0, ip
    4b4c:	00004b38 	andeq	r4, r0, r8, lsr fp
    4b50:	080012c8 	stmdaeq	r0, {r3, r6, r7, r9, ip}
    4b54:	0000001c 	andeq	r0, r0, ip, lsl r0

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
{
       0:	00000000 	andeq	r0, r0, r0
}
       4:	00000086 	andeq	r0, r0, r6, lsl #1
       8:	86510001 	ldrbhi	r0, [r1], -r1
       c:	94000000 	strls	r0, [r0], #-0
      10:	04000000 	streq	r0, [r0], #-0
      14:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
      18:	0000949f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    bitstatus = SET;
      1c:	00009a00 	andeq	r9, r0, r0, lsl #20
    bitstatus = RESET;
      20:	51000100 	mrspl	r0, (UNDEF: 16)
	...
}
      30:	00000008 	andeq	r0, r0, r8
      34:	08520001 	ldmdaeq	r2, {r0}^
      38:	14000000 	strne	r0, [r0], #-0
      3c:	01000000 	mrseq	r0, (UNDEF: 0)
      40:	00145400 	andseq	r5, r4, r0, lsl #8
      44:	00180000 	andseq	r0, r8, r0
      48:	00010000 	andeq	r0, r1, r0
      4c:	00001852 	andeq	r1, r0, r2, asr r8
      50:	00002000 	andeq	r2, r0, r0
      54:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
      58:	00000038 	andeq	r0, r0, r8, lsr r0
        Driver_OLED_Send_START(OLED_DATA);
      5c:	0000003a 	andeq	r0, r0, sl, lsr r0
        for(x=x0;x<x1;x++){ 
      60:	3a560001 	bcc	158006c <_Min_Stack_Size+0x157fe6c>
            I2C_SendData(OLED_HARDWARE, BMP[j++]);
      64:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
      68:	03000000 	movweq	r0, #0
      6c:	9f107600 	svcls	0x00107600
      70:	00000048 	andeq	r0, r0, r8, asr #32
      74:	00000064 	andeq	r0, r0, r4, rrx
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);    	
      78:	6a560001 	bvs	1580084 <_Min_Stack_Size+0x157fe84>
      7c:	6c000000 	stcvs	0, cr0, [r0], {-0}
      80:	01000000 	mrseq	r0, (UNDEF: 0)
      84:	006c5200 	rsbeq	r5, ip, r0, lsl #4
        for(x=x0;x<x1;x++){ 
      88:	00720000 	rsbseq	r0, r2, r0
      8c:	00030000 	andeq	r0, r3, r0
      90:	729f0472 	addsvc	r0, pc, #1912602624	; 0x72000000
      94:	76000000 	strvc	r0, [r0], -r0
        _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
      98:	01000000 	mrseq	r0, (UNDEF: 0)
      9c:	00945200 	addseq	r5, r4, r0, lsl #4
      a0:	009a0000 	addseq	r0, sl, r0
      a4:	00010000 	andeq	r0, r1, r0
	for(y=y0;y<y1;y++){
      a8:	00000052 	andeq	r0, r0, r2, asr r0
	...
}
      b4:	00001200 	andeq	r1, r0, r0, lsl #4
      b8:	50000100 	andpl	r0, r0, r0, lsl #2
      bc:	00000012 	andeq	r0, r0, r2, lsl r0
      c0:	00000064 	andeq	r0, r0, r4, rrx
      c4:	82530001 	subshi	r0, r3, #1
      c8:	90000000 	andls	r0, r0, r0
      cc:	01000000 	mrseq	r0, (UNDEF: 0)
      d0:	00945300 	addseq	r5, r4, r0, lsl #6
      d4:	009a0000 	addseq	r0, sl, r0
      d8:	00010000 	andeq	r0, r1, r0
      dc:	00000050 	andeq	r0, r0, r0, asr r0
      e0:	00000000 	andeq	r0, r0, r0
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      e4:	00003000 	andeq	r3, r0, r0
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      e8:	00008200 	andeq	r8, r0, r0, lsl #4
      ec:	08000300 	stmdaeq	r0, {r8, r9}
      f0:	00009f20 	andeq	r9, r0, r0, lsr #30
				prvUnlockQueue( pxQueue );
      f4:	00000000 	andeq	r0, r0, r0
      f8:	002a0000 	eoreq	r0, sl, r0
				if( xTaskResumeAll() == pdFALSE )
      fc:	00820000 	addeq	r0, r2, r0
     100:	00010000 	andeq	r0, r1, r0
					portYIELD_WITHIN_API();
     104:	00000055 	andeq	r0, r0, r5, asr r0
     108:	00000000 	andeq	r0, r0, r0
     10c:	00002600 	andeq	r2, r0, r0, lsl #12
     110:	00003800 	andeq	r3, r0, r0, lsl #16
     114:	53000100 	movwpl	r0, #256	; 0x100
				prvUnlockQueue( pxQueue );
     118:	00000038 	andeq	r0, r0, r8, lsr r0
				( void ) xTaskResumeAll();
     11c:	00000040 	andeq	r0, r0, r0, asr #32
     120:	74720003 	ldrbtvc	r0, [r2], #-3
			prvUnlockQueue( pxQueue );
     124:	0000409f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
			( void ) xTaskResumeAll();
     128:	00004400 	andeq	r4, r0, r0, lsl #8
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     12c:	72000300 	andvc	r0, r0, #0, 6
     130:	00449f78 	subeq	r9, r4, r8, ror pc
     134:	00480000 	subeq	r0, r8, r0
     138:	00030000 	andeq	r0, r3, r0
}
     13c:	489f7c72 	ldmmi	pc, {r1, r4, r5, r6, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
     140:	50000000 	andpl	r0, r0, r0
     144:	01000000 	mrseq	r0, (UNDEF: 0)
     148:	00505200 	subseq	r5, r0, r0, lsl #4
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     14c:	00560000 	subseq	r0, r6, r0
  SPIx->I2SCFGR = tmpreg;   
     150:	00030000 	andeq	r0, r3, r0
     154:	649f7072 	ldrvs	r7, [pc], #114	; 15c <_Min_Heap_Size+0x15c>
}
     158:	6a000000 	bvs	160 <_Min_Heap_Size+0x160>
     15c:	01000000 	mrseq	r0, (UNDEF: 0)
     160:	006a5300 	rsbeq	r5, sl, r0, lsl #6
     164:	00820000 	addeq	r0, r2, r0
         *(uint16_t*) arg = getSn_KPALVTR(sn);
     168:	00010000 	andeq	r0, r1, r0
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     16c:	00000056 	andeq	r0, r0, r6, asr r0
	...
     178:	00008600 	andeq	r8, r0, r0, lsl #12
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     17c:	71000600 	tstvc	r0, r0, lsl #12
     180:	1aff0800 	bne	fffc2188 <BootRAM+0xef32929>
     184:	0000869f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
     188:	00009400 	andeq	r9, r0, r0, lsl #8
         *(uint8_t*) arg = getSn_SR(sn);
     18c:	f3000700 	vabd.u8	d0, d0, d0
     190:	ff085101 			; <UNDEFINED> instruction: 0xff085101
     194:	00949f1a 	addseq	r9, r4, sl, lsl pc
     198:	009a0000 	addseq	r0, sl, r0
     19c:	00060000 	andeq	r0, r6, r0
     1a0:	ff080071 			; <UNDEFINED> instruction: 0xff080071
     1a4:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
         if(getSn_MR(sn) == Sn_MR_TCP)
     1b0:	001a0000 	andseq	r0, sl, r0
     1b4:	00010000 	andeq	r0, r1, r0
     1b8:	00001a50 	andeq	r1, r0, r0, asr sl
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1bc:	00006000 	andeq	r6, r0, r0
     1c0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     1c4:	00000060 	andeq	r0, r0, r0, rrx
     1c8:	00000064 	andeq	r0, r0, r4, rrx
         break;
     1cc:	10700002 	rsbsne	r0, r0, r2
	...
            *(uint16_t*)arg = sock_remained_size[sn];
     1d8:	0000000a 	andeq	r0, r0, sl
         CHECK_SOCKMODE(Sn_MR_TCP);
     1dc:	00000060 	andeq	r0, r0, r0, rrx
     1e0:	00540001 	subseq	r0, r4, r1
     1e4:	00000000 	andeq	r0, r0, r0
     1e8:	36000000 	strcc	r0, [r0], -r0
     1ec:	60000000 	andvs	r0, r0, r0
     1f0:	01000000 	mrseq	r0, (UNDEF: 0)
     1f4:	00005400 	andeq	r5, r0, r0, lsl #8
     1f8:	00000000 	andeq	r0, r0, r0
         *(uint8_t*)arg = sock_pack_info[sn];
     1fc:	006c0000 	rsbeq	r0, ip, r0
     200:	00740000 	rsbseq	r0, r4, r0
         break;
     204:	00010000 	andeq	r0, r1, r0
         return SOCKERR_SOCKOPT;
     208:	00009854 	andeq	r9, r0, r4, asr r8
   return SOCK_OK;
     20c:	0000cc00 	andeq	ip, r0, r0, lsl #24
}
     210:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     21c:	000000be 	strheq	r0, [r0], -lr
     220:	000000cc 	andeq	r0, r0, ip, asr #1
     224:	00540001 	subseq	r0, r4, r1
	...
	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     230:	37000000 	strcc	r0, [r0, -r0]
     234:	01000000 	mrseq	r0, (UNDEF: 0)
     238:	00375000 	eorseq	r5, r7, r0
     23c:	00480000 	subeq	r0, r8, r0
     240:	00010000 	andeq	r0, r1, r0
     244:	00004855 	andeq	r4, r0, r5, asr r8
     248:	00004c00 	andeq	r4, r0, r0, lsl #24
     24c:	f3000400 	vshl.u8	d0, d0, d0
     250:	4c9f5001 	ldcmi	0, cr5, [pc], {1}
	memset(packet, 0, sizeof(packet));
     254:	5f000000 	svcpl	0x00000000
     258:	01000000 	mrseq	r0, (UNDEF: 0)
     25c:	005f5000 	subseq	r5, pc, r0
	memcpy(packet, fixed_header, sizeof(fixed_header));
     260:	00640000 	rsbeq	r0, r4, r0
     264:	00010000 	andeq	r0, r1, r0
     268:	00006455 	andeq	r6, r0, r5, asr r4
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	00006e00 	andeq	r6, r0, r0, lsl #28
     270:	f3000400 	vshl.u8	d0, d0, d0
     274:	6e9f5001 	cdpvs	0, 9, cr5, cr15, cr1, {0}
     278:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     27c:	01000000 	mrseq	r0, (UNDEF: 0)
     280:	007e5500 	rsbseq	r5, lr, r0, lsl #10
     284:	00820000 	addeq	r0, r2, r0
     288:	00040000 	andeq	r0, r4, r0
     28c:	9f5001f3 	svcls	0x005001f3
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     290:	00000082 	andeq	r0, r0, r2, lsl #1
     294:	0000008a 	andeq	r0, r0, sl, lsl #1
     298:	8a500001 	bhi	14002a4 <_Min_Stack_Size+0x14000a4>
     29c:	8c000000 	stchi	0, cr0, [r0], {-0}
     2a0:	04000000 	streq	r0, [r0], #-0
		return -1;
     2a4:	5001f300 	andpl	pc, r1, r0, lsl #6
     2a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
}
     2b4:	00002a00 	andeq	r2, r0, r0, lsl #20
     2b8:	51000100 	mrspl	r0, (UNDEF: 16)
     2bc:	0000002a 	andeq	r0, r0, sl, lsr #32
     2c0:	00000037 	andeq	r0, r0, r7, lsr r0
     2c4:	00710002 	rsbseq	r0, r1, r2
     2c8:	00000037 	andeq	r0, r0, r7, lsr r0
     2cc:	0000004c 	andeq	r0, r0, ip, asr #32
     2d0:	01f30004 	mvnseq	r0, r4
     2d4:	004c9f51 	subeq	r9, ip, r1, asr pc
     2d8:	00520000 	subseq	r0, r2, r0
     2dc:	00010000 	andeq	r0, r1, r0
     2e0:	00005251 	andeq	r5, r0, r1, asr r2
     2e4:	00005f00 	andeq	r5, r0, r0, lsl #30
     2e8:	71000200 	mrsvc	r0, R8_usr
     2ec:	00005f00 	andeq	r5, r0, r0, lsl #30
     2f0:	00008200 	andeq	r8, r0, r0, lsl #4
     2f4:	f3000400 	vshl.u8	d0, d0, d0
     2f8:	829f5101 	addshi	r5, pc, #1073741824	; 0x40000000
     2fc:	8c000000 	stchi	0, cr0, [r0], {-0}
     300:	01000000 	mrseq	r0, (UNDEF: 0)
     304:	00005100 	andeq	r5, r0, r0, lsl #2
	...
     310:	00280000 	eoreq	r0, r8, r0
     314:	00010000 	andeq	r0, r1, r0
     318:	00002852 	andeq	r2, r0, r2, asr r8
     31c:	00004800 	andeq	r4, r0, r0, lsl #16
     320:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
     324:	00489f01 	subeq	r9, r8, r1, lsl #30
     328:	004c0000 	subeq	r0, ip, r0
     32c:	00040000 	andeq	r0, r4, r0
     330:	9f5201f3 	svcls	0x005201f3
     334:	0000004c 	andeq	r0, r0, ip, asr #32
     338:	00000050 	andeq	r0, r0, r0, asr r0
     33c:	50520001 	subspl	r0, r2, r1
     340:	64000000 	strvs	r0, [r0], #-0
     344:	01000000 	mrseq	r0, (UNDEF: 0)
     348:	00645400 	rsbeq	r5, r4, r0, lsl #8
     34c:	00740000 	rsbseq	r0, r4, r0
     350:	00040000 	andeq	r0, r4, r0
     354:	9f5201f3 	svcls	0x005201f3
     358:	00000074 	andeq	r0, r0, r4, ror r0
     35c:	0000007e 	andeq	r0, r0, lr, ror r0
     360:	7e540001 	cdpvc	0, 5, cr0, cr4, cr1, {0}
     364:	82000000 	andhi	r0, r0, #0
     368:	04000000 	streq	r0, [r0], #-0
     36c:	5201f300 	andpl	pc, r1, #0, 6
     370:	0000829f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
     374:	00008400 	andeq	r8, r0, r0, lsl #8
     378:	52000100 	andpl	r0, r0, #0, 2
     37c:	00000084 	andeq	r0, r0, r4, lsl #1
     380:	0000008c 	andeq	r0, r0, ip, lsl #1
     384:	01f30004 	mvnseq	r0, r4
     388:	00009f52 	andeq	r9, r0, r2, asr pc
     38c:	00000000 	andeq	r0, r0, r0
     390:	00380000 	eorseq	r0, r8, r0
     394:	004c0000 	subeq	r0, ip, r0
     398:	00010000 	andeq	r0, r1, r0
     39c:	00006050 	andeq	r6, r0, r0, asr r0
     3a0:	00006400 	andeq	r6, r0, r0, lsl #8
     3a4:	50000100 	andpl	r0, r0, r0, lsl #2
     3a8:	0000006e 	andeq	r0, r0, lr, rrx
     3ac:	00000082 	andeq	r0, r0, r2, lsl #1
     3b0:	00500001 	subseq	r0, r0, r1
     3b4:	00000000 	andeq	r0, r0, r0
     3b8:	8c000000 	stchi	0, cr0, [r0], {-0}
     3bc:	ba000000 	blt	3c4 <_Min_Stack_Size+0x1c4>
     3c0:	01000000 	mrseq	r0, (UNDEF: 0)
     3c4:	00ba5000 	adcseq	r5, sl, r0
     3c8:	00c70000 	sbceq	r0, r7, r0
     3cc:	00020000 	andeq	r0, r2, r0
     3d0:	00c70071 	sbceq	r0, r7, r1, ror r0
     3d4:	00dc0000 	sbcseq	r0, ip, r0
     3d8:	00040000 	andeq	r0, r4, r0
     3dc:	9f5001f3 	svcls	0x005001f3
     3e0:	000000dc 	ldrdeq	r0, [r0], -ip
     3e4:	000000e4 	andeq	r0, r0, r4, ror #1
     3e8:	e4500001 	ldrb	r0, [r0], #-1
     3ec:	f1000000 	cps	#0
     3f0:	02000000 	andeq	r0, r0, #0
     3f4:	f1007100 			; <UNDEFINED> instruction: 0xf1007100
     3f8:	14000000 	strne	r0, [r0], #-0
     3fc:	04000001 	streq	r0, [r0], #-1
     400:	5001f300 	andpl	pc, r1, r0, lsl #6
     404:	0001149f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
     408:	00011c00 	andeq	r1, r1, r0, lsl #24
     40c:	50000100 	andpl	r0, r0, r0, lsl #2
     410:	0000011c 	andeq	r0, r0, ip, lsl r1
     414:	00000124 	andeq	r0, r0, r4, lsr #2
     418:	01f30004 	mvnseq	r0, r4
     41c:	00009f50 	andeq	r9, r0, r0, asr pc
     420:	00000000 	andeq	r0, r0, r0
     424:	008c0000 	addeq	r0, ip, r0
     428:	00b80000 	adcseq	r0, r8, r0
     42c:	00010000 	andeq	r0, r1, r0
     430:	0000b851 	andeq	fp, r0, r1, asr r8
     434:	0000d800 	andeq	sp, r0, r0, lsl #16
     438:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
     43c:	00d89f01 	sbcseq	r9, r8, r1, lsl #30
     440:	00dc0000 	sbcseq	r0, ip, r0
     444:	00040000 	andeq	r0, r4, r0
     448:	9f5101f3 	svcls	0x005101f3
     44c:	000000dc 	ldrdeq	r0, [r0], -ip
     450:	000000e2 	andeq	r0, r0, r2, ror #1
     454:	e2510001 	subs	r0, r1, #1
     458:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
     45c:	01000000 	mrseq	r0, (UNDEF: 0)
     460:	00f65400 	rscseq	r5, r6, r0, lsl #8
     464:	01060000 	mrseq	r0, (UNDEF: 6)
     468:	00040000 	andeq	r0, r4, r0
     46c:	9f5101f3 	svcls	0x005101f3
     470:	00000106 	andeq	r0, r0, r6, lsl #2
     474:	00000110 	andeq	r0, r0, r0, lsl r1
     478:	10540001 	subsne	r0, r4, r1
     47c:	14000001 	strne	r0, [r0], #-1
     480:	04000001 	streq	r0, [r0], #-1
     484:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     488:	0001149f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
     48c:	00012400 	andeq	r2, r1, r0, lsl #8
     490:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     49c:	000000c8 	andeq	r0, r0, r8, asr #1
     4a0:	000000dc 	ldrdeq	r0, [r0], -ip
     4a4:	f2500001 	vhadd.s16	d16, d0, d1
     4a8:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
     4ac:	01000000 	mrseq	r0, (UNDEF: 0)
     4b0:	01005000 	mrseq	r5, (UNDEF: 0)
     4b4:	01140000 	tsteq	r4, r0
     4b8:	00010000 	andeq	r0, r1, r0
     4bc:	00000050 	andeq	r0, r0, r0, asr r0
     4c0:	00000000 	andeq	r0, r0, r0
     4c4:	00009800 	andeq	r9, r0, r0, lsl #16
     4c8:	0000d800 	andeq	sp, r0, r0, lsl #16
     4cc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     4d0:	000000dc 	ldrdeq	r0, [r0], -ip
     4d4:	000000fc 	strdeq	r0, [r0], -ip
     4d8:	00550001 	subseq	r0, r5, r1
     4dc:	10000001 	andne	r0, r0, r1
     4e0:	01000001 	tsteq	r0, r1
     4e4:	01145500 	tsteq	r4, r0, lsl #10
     4e8:	01240000 			; <UNDEFINED> instruction: 0x01240000
     4ec:	00010000 	andeq	r0, r1, r0
     4f0:	00000055 	andeq	r0, r0, r5, asr r0
	...
     4fc:	00001a00 	andeq	r1, r0, r0, lsl #20
     500:	50000100 	andpl	r0, r0, r0, lsl #2
     504:	0000001a 	andeq	r0, r0, sl, lsl r0
     508:	00000072 	andeq	r0, r0, r2, ror r0
     50c:	01f30004 	mvnseq	r0, r4
     510:	00729f50 	rsbseq	r9, r2, r0, asr pc
     514:	00800000 	addeq	r0, r0, r0
     518:	00010000 	andeq	r0, r1, r0
     51c:	00008050 	andeq	r8, r0, r0, asr r0
     520:	0000ce00 	andeq	ip, r0, r0, lsl #28
     524:	f3000400 	vshl.u8	d0, d0, d0
     528:	009f5001 	addseq	r5, pc, r1
	...
     534:	3c000000 	stccc	0, cr0, [r0], {-0}
     538:	01000000 	mrseq	r0, (UNDEF: 0)
     53c:	003c5100 	eorseq	r5, ip, r0, lsl #2
     540:	00720000 	rsbseq	r0, r2, r0
     544:	00040000 	andeq	r0, r4, r0
     548:	9f5101f3 	svcls	0x005101f3
     54c:	00000072 	andeq	r0, r0, r2, ror r0
     550:	00000080 	andeq	r0, r0, r0, lsl #1
     554:	80510001 	subshi	r0, r1, r1
     558:	c2000000 	andgt	r0, r0, #0
     55c:	04000000 	streq	r0, [r0], #-0
     560:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     564:	0000c29f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
     568:	0000c800 	andeq	ip, r0, r0, lsl #16
     56c:	51000100 	mrspl	r0, (UNDEF: 16)
     570:	000000c8 	andeq	r0, r0, r8, asr #1
     574:	000000ce 	andeq	r0, r0, lr, asr #1
     578:	01f30004 	mvnseq	r0, r4
     57c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
     588:	00260000 	eoreq	r0, r6, r0
     58c:	00010000 	andeq	r0, r1, r0
     590:	00002650 	andeq	r2, r0, r0, asr r6
     594:	00002a00 	andeq	r2, r0, r0, lsl #20
     598:	73000300 	movwvc	r0, #768	; 0x300
     59c:	002a9f7f 	eoreq	r9, sl, pc, ror pc
     5a0:	002c0000 	eoreq	r0, ip, r0
     5a4:	00010000 	andeq	r0, r1, r0
     5a8:	00002c53 	andeq	r2, r0, r3, asr ip
     5ac:	00003c00 	andeq	r3, r0, r0, lsl #24
     5b0:	50000100 	andpl	r0, r0, r0, lsl #2
     5b4:	0000005c 	andeq	r0, r0, ip, asr r0
     5b8:	00000066 	andeq	r0, r0, r6, rrx
     5bc:	66500001 	ldrbvs	r0, [r0], -r1
     5c0:	6a000000 	bvs	5c8 <_Min_Stack_Size+0x3c8>
     5c4:	03000000 	movweq	r0, #0
     5c8:	9f7f7000 	svcls	0x007f7000
     5cc:	00000072 	andeq	r0, r0, r2, ror r0
     5d0:	00000088 	andeq	r0, r0, r8, lsl #1
     5d4:	88500001 	ldmdahi	r0, {r0}^
     5d8:	8c000000 	stchi	0, cr0, [r0], {-0}
     5dc:	03000000 	movweq	r0, #0
     5e0:	9f7f7300 	svcls	0x007f7300
     5e4:	0000008c 	andeq	r0, r0, ip, lsl #1
     5e8:	0000008e 	andeq	r0, r0, lr, lsl #1
     5ec:	8e530001 	cdphi	0, 5, cr0, cr3, cr1, {0}
     5f0:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
     5f4:	01000000 	mrseq	r0, (UNDEF: 0)
     5f8:	00b05000 	adcseq	r5, r0, r0
     5fc:	00ba0000 	adcseq	r0, sl, r0
     600:	00010000 	andeq	r0, r1, r0
     604:	0000ba50 	andeq	fp, r0, r0, asr sl
     608:	0000c200 	andeq	ip, r0, r0, lsl #4
     60c:	70000300 	andvc	r0, r0, r0, lsl #6
     610:	00c29f7f 	sbceq	r9, r2, pc, ror pc
     614:	00c40000 	sbceq	r0, r4, r0
     618:	00010000 	andeq	r0, r1, r0
     61c:	0000c450 	andeq	ip, r0, r0, asr r4
     620:	0000c800 	andeq	ip, r0, r0, lsl #16
     624:	73000300 	movwvc	r0, #768	; 0x300
     628:	00009f7f 	andeq	r9, r0, pc, ror pc
	...
     634:	003c0000 	eorseq	r0, ip, r0
     638:	00010000 	andeq	r0, r1, r0
     63c:	00003c51 	andeq	r3, r0, r1, asr ip
     640:	00007200 	andeq	r7, r0, r0, lsl #4
     644:	f3000400 	vshl.u8	d0, d0, d0
     648:	729f5101 	addsvc	r5, pc, #1073741824	; 0x40000000
     64c:	80000000 	andhi	r0, r0, r0
     650:	01000000 	mrseq	r0, (UNDEF: 0)
     654:	00805100 	addeq	r5, r0, r0, lsl #2
     658:	00c20000 	sbceq	r0, r2, r0
     65c:	00040000 	andeq	r0, r4, r0
     660:	9f5101f3 	svcls	0x005101f3
     664:	000000c2 	andeq	r0, r0, r2, asr #1
     668:	000000c8 	andeq	r0, r0, r8, asr #1
     66c:	c8510001 	ldmdagt	r1, {r0}^
     670:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
     674:	04000000 	streq	r0, [r0], #-0
     678:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     67c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     680:	00000000 	andeq	r0, r0, r0
     684:	00002c00 	andeq	r2, r0, r0, lsl #24
     688:	00003400 	andeq	r3, r0, r0, lsl #8
     68c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     690:	00000034 	andeq	r0, r0, r4, lsr r0
     694:	0000003a 	andeq	r0, r0, sl, lsr r0
     698:	3a560001 	bcc	15806a4 <_Min_Stack_Size+0x15804a4>
     69c:	3c000000 	stccc	0, cr0, [r0], {-0}
     6a0:	0c000000 	stceq	0, cr0, [r0], {-0}
     6a4:	38007100 	stmdacc	r0, {r8, ip, sp, lr}
     6a8:	ff000a24 			; <UNDEFINED> instruction: 0xff000a24
     6ac:	2100741a 	tstcs	r0, sl, lsl r4
     6b0:	00003c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     6b4:	00006e00 	andeq	r6, r0, r0, lsl #28
     6b8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     6c4:	0000002c 	andeq	r0, r0, ip, lsr #32
     6c8:	00000034 	andeq	r0, r0, r4, lsr r0
     6cc:	9f380002 	svcls	0x00380002
     6d0:	00000034 	andeq	r0, r0, r4, lsr r0
     6d4:	0000003c 	andeq	r0, r0, ip, lsr r0
     6d8:	9f400002 	svcls	0x00400002
     6dc:	0000003c 	andeq	r0, r0, ip, lsr r0
     6e0:	0000006e 	andeq	r0, r0, lr, rrx
     6e4:	20080003 	andcs	r0, r8, r3
     6e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     6ec:	00000000 	andeq	r0, r0, r0
     6f0:	00003c00 	andeq	r3, r0, r0, lsl #24
     6f4:	00006200 	andeq	r6, r0, r0, lsl #4
     6f8:	50000100 	andpl	r0, r0, r0, lsl #2
     6fc:	0000008e 	andeq	r0, r0, lr, lsl #1
     700:	000000a2 	andeq	r0, r0, r2, lsr #1
     704:	a2500001 	subsge	r0, r0, #1
     708:	b0000000 	andlt	r0, r0, r0
     70c:	03000000 	movweq	r0, #0
     710:	9f7c7000 	svcls	0x007c7000
	...
     71c:	08000590 	stmdaeq	r0, {r4, r7, r8, sl}
     720:	0800064a 	stmdaeq	r0, {r1, r3, r6, r9, sl}
     724:	4a500001 	bmi	1400730 <_Min_Stack_Size+0x1400530>
     728:	4a080006 	bmi	200748 <_Min_Stack_Size+0x200548>
     72c:	04080006 	streq	r0, [r8], #-6
     730:	5001f300 	andpl	pc, r1, r0, lsl #6
     734:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     738:	00000000 	andeq	r0, r0, r0
     73c:	00064c00 	andeq	r4, r6, r0, lsl #24
     740:	0006a808 	andeq	sl, r6, r8, lsl #16
     744:	50000108 	andpl	r0, r0, r8, lsl #2
     748:	080006a8 	stmdaeq	r0, {r3, r5, r7, r9, sl}
     74c:	080006a8 	stmdaeq	r0, {r3, r5, r7, r9, sl}
     750:	01f30004 	mvnseq	r0, r4
     754:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     760:	00340000 	eorseq	r0, r4, r0
     764:	00010000 	andeq	r0, r1, r0
     768:	00003450 	andeq	r3, r0, r0, asr r4
     76c:	00005c00 	andeq	r5, r0, r0, lsl #24
     770:	f3000400 	vshl.u8	d0, d0, d0
     774:	5c9f5001 	ldcpl	0, cr5, [pc], {1}
     778:	70000000 	andvc	r0, r0, r0
     77c:	01000000 	mrseq	r0, (UNDEF: 0)
     780:	00705000 	rsbseq	r5, r0, r0
     784:	00740000 	rsbseq	r0, r4, r0
     788:	00030000 	andeq	r0, r3, r0
     78c:	749f0170 	ldrvc	r0, [pc], #368	; 794 <_Min_Stack_Size+0x594>
     790:	80000000 	andhi	r0, r0, r0
     794:	01000000 	mrseq	r0, (UNDEF: 0)
     798:	00845000 	addeq	r5, r4, r0
     79c:	00860000 	addeq	r0, r6, r0
     7a0:	00010000 	andeq	r0, r1, r0
     7a4:	00008650 	andeq	r8, r0, r0, asr r6
     7a8:	00008800 	andeq	r8, r0, r0, lsl #16
     7ac:	f3000400 	vshl.u8	d0, d0, d0
     7b0:	949f5001 	ldrls	r5, [pc], #1	; 7b8 <_Min_Stack_Size+0x5b8>
     7b4:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     7b8:	04000000 	streq	r0, [r0], #-0
     7bc:	5001f300 	andpl	pc, r1, r0, lsl #6
     7c0:	0000989f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
     7c4:	00009a00 	andeq	r9, r0, r0, lsl #20
     7c8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     7d8:	00000034 	andeq	r0, r0, r4, lsr r0
     7dc:	34510001 	ldrbcc	r0, [r1], #-1
     7e0:	5c000000 	stcpl	0, cr0, [r0], {-0}
     7e4:	04000000 	streq	r0, [r0], #-0
     7e8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     7ec:	00005c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     7f0:	00006c00 	andeq	r6, r0, r0, lsl #24
     7f4:	51000100 	mrspl	r0, (UNDEF: 16)
     7f8:	00000084 	andeq	r0, r0, r4, lsl #1
     7fc:	00000088 	andeq	r0, r0, r8, lsl #1
     800:	94510001 	ldrbls	r0, [r1], #-1
     804:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     808:	04000000 	streq	r0, [r0], #-0
     80c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     810:	0000989f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
     814:	00009c00 	andeq	r9, r0, r0, lsl #24
     818:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     828:	0000001c 	andeq	r0, r0, ip, lsl r0
     82c:	1c520001 	mrrcne	0, 0, r0, r2, cr1
     830:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     834:	03000000 	movweq	r0, #0
     838:	9f7c7200 	svcls	0x007c7200
     83c:	0000001e 	andeq	r0, r0, lr, lsl r0
     840:	00000048 	andeq	r0, r0, r8, asr #32
     844:	48520001 	ldmdami	r2, {r0}^
     848:	50000000 	andpl	r0, r0, r0
     84c:	03000000 	movweq	r0, #0
     850:	9f047200 	svcls	0x00047200
     854:	00000050 	andeq	r0, r0, r0, asr r0
     858:	00000080 	andeq	r0, r0, r0, lsl #1
     85c:	84520001 	ldrbhi	r0, [r2], #-1
     860:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     864:	01000000 	mrseq	r0, (UNDEF: 0)
     868:	008e5200 	addeq	r5, lr, r0, lsl #4
     86c:	00940000 	addseq	r0, r4, r0
     870:	00010000 	andeq	r0, r1, r0
     874:	00009452 	andeq	r9, r0, r2, asr r4
     878:	00009800 	andeq	r9, r0, r0, lsl #16
     87c:	72000300 	andvc	r0, r0, #0, 6
     880:	00989f04 	addseq	r9, r8, r4, lsl #30
     884:	009c0000 	addseq	r0, ip, r0
     888:	00010000 	andeq	r0, r1, r0
     88c:	00000052 	andeq	r0, r0, r2, asr r0
     890:	00000000 	andeq	r0, r0, r0
     894:	00001000 	andeq	r1, r0, r0
     898:	00005000 	andeq	r5, r0, r0
     89c:	50000100 	andpl	r0, r0, r0, lsl #2
     8a0:	00000050 	andeq	r0, r0, r0, asr r0
     8a4:	00000056 	andeq	r0, r0, r6, asr r0
     8a8:	7c770003 	ldclvc	0, cr0, [r7], #-12
     8ac:	0000569f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
     8b0:	00005c00 	andeq	r5, r0, r0, lsl #24
     8b4:	57000100 	strpl	r0, [r0, -r0, lsl #2]
     8b8:	00000094 	muleq	r0, r4, r0
     8bc:	00000096 	muleq	r0, r6, r0
     8c0:	96500001 	ldrbls	r0, [r0], -r1
     8c4:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     8c8:	03000000 	movweq	r0, #0
     8cc:	9f7c7700 	svcls	0x007c7700
	...
     8d8:	00000010 	andeq	r0, r0, r0, lsl r0
     8dc:	00000050 	andeq	r0, r0, r0, asr r0
     8e0:	50510001 	subspl	r0, r1, r1
     8e4:	54000000 	strpl	r0, [r0], #-0
     8e8:	03000000 	movweq	r0, #0
     8ec:	9f7c7100 	svcls	0x007c7100
     8f0:	00000056 	andeq	r0, r0, r6, asr r0
     8f4:	0000005c 	andeq	r0, r0, ip, asr r0
     8f8:	94510001 	ldrbls	r0, [r1], #-1
     8fc:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     900:	01000000 	mrseq	r0, (UNDEF: 0)
     904:	00005100 	andeq	r5, r0, r0, lsl #2
	...
     910:	00120000 	andseq	r0, r2, r0
     914:	00010000 	andeq	r0, r1, r0
     918:	00001251 	andeq	r1, r0, r1, asr r2
     91c:	00006200 	andeq	r6, r0, r0, lsl #4
     920:	f3000400 	vshl.u8	d0, d0, d0
     924:	629f5101 	addsvs	r5, pc, #1073741824	; 0x40000000
     928:	66000000 	strvs	r0, [r0], -r0
     92c:	01000000 	mrseq	r0, (UNDEF: 0)
     930:	00005100 	andeq	r5, r0, r0, lsl #2
	...
     93c:	00280000 	eoreq	r0, r8, r0
     940:	00010000 	andeq	r0, r1, r0
     944:	00002852 	andeq	r2, r0, r2, asr r8
     948:	00004000 	andeq	r4, r0, r0
     94c:	52000100 	andpl	r0, r0, #0, 2
     950:	00000040 	andeq	r0, r0, r0, asr #32
     954:	00000048 	andeq	r0, r0, r8, asr #32
     958:	7f720003 	svcvc	0x00720003
     95c:	0000489f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
     960:	00005000 	andeq	r5, r0, r0
     964:	52000100 	andpl	r0, r0, #0, 2
     968:	00000050 	andeq	r0, r0, r0, asr r0
     96c:	00000054 	andeq	r0, r0, r4, asr r0
     970:	7f720003 	svcvc	0x00720003
     974:	0000629f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
     978:	00006600 	andeq	r6, r0, r0, lsl #12
     97c:	52000100 	andpl	r0, r0, #0, 2
	...
     98c:	00000032 	andeq	r0, r0, r2, lsr r0
     990:	32500001 	subscc	r0, r0, #1
     994:	4c000000 	stcmi	0, cr0, [r0], {-0}
     998:	01000000 	mrseq	r0, (UNDEF: 0)
     99c:	004c5300 	subeq	r5, ip, r0, lsl #6
     9a0:	00500000 	subseq	r0, r0, r0
     9a4:	00030000 	andeq	r0, r3, r0
     9a8:	509f7f73 	addspl	r7, pc, r3, ror pc	; <UNPREDICTABLE>
     9ac:	62000000 	andvs	r0, r0, #0
     9b0:	01000000 	mrseq	r0, (UNDEF: 0)
     9b4:	00625300 	rsbeq	r5, r2, r0, lsl #6
     9b8:	00660000 	rsbeq	r0, r6, r0
     9bc:	00010000 	andeq	r0, r1, r0
     9c0:	00000050 	andeq	r0, r0, r0, asr r0
	...
     9cc:	00001200 	andeq	r1, r0, r0, lsl #4
     9d0:	51000100 	mrspl	r0, (UNDEF: 16)
     9d4:	00000012 	andeq	r0, r0, r2, lsl r0
     9d8:	00000032 	andeq	r0, r0, r2, lsr r0
     9dc:	01f30004 	mvnseq	r0, r4
     9e0:	00329f51 	eorseq	r9, r2, r1, asr pc
     9e4:	003c0000 	eorseq	r0, ip, r0
     9e8:	00010000 	andeq	r0, r1, r0
     9ec:	00003c51 	andeq	r3, r0, r1, asr ip
     9f0:	00003e00 	andeq	r3, r0, r0, lsl #28
     9f4:	71000300 	mrsvc	r0, LR_irq
     9f8:	003e9f7f 	eorseq	r9, lr, pc, ror pc
     9fc:	00460000 	subeq	r0, r6, r0
     a00:	00010000 	andeq	r0, r1, r0
     a04:	00004651 	andeq	r4, r0, r1, asr r6
     a08:	00004800 	andeq	r4, r0, r0, lsl #16
     a0c:	71000300 	mrsvc	r0, LR_irq
     a10:	00629f7f 	rsbeq	r9, r2, pc, ror pc
     a14:	00660000 	rsbeq	r0, r6, r0
     a18:	00010000 	andeq	r0, r1, r0
     a1c:	00000051 	andeq	r0, r0, r1, asr r0
     a20:	00000000 	andeq	r0, r0, r0
     a24:	00001400 	andeq	r1, r0, r0, lsl #8
     a28:	00002e00 	andeq	r2, r0, r0, lsl #28
     a2c:	53000100 	movwpl	r0, #256	; 0x100
     a30:	0000002e 	andeq	r0, r0, lr, lsr #32
     a34:	00000030 	andeq	r0, r0, r0, lsr r0
     a38:	7c730003 	ldclvc	0, cr0, [r3], #-12
     a3c:	0000309f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a40:	00003200 	andeq	r3, r0, r0, lsl #4
     a44:	53000100 	movwpl	r0, #256	; 0x100
	...
     a50:	00000014 	andeq	r0, r0, r4, lsl r0
     a54:	00000032 	andeq	r0, r0, r2, lsr r0
     a58:	00510001 	subseq	r0, r1, r1
	...
     a64:	06000000 	streq	r0, [r0], -r0
     a68:	01000000 	mrseq	r0, (UNDEF: 0)
     a6c:	00065000 	andeq	r5, r6, r0
     a70:	00090000 	andeq	r0, r9, r0
     a74:	00010000 	andeq	r0, r1, r0
     a78:	00000951 	andeq	r0, r0, r1, asr r9
     a7c:	00001000 	andeq	r1, r0, r0
     a80:	f3000400 	vshl.u8	d0, d0, d0
     a84:	009f5001 	addseq	r5, pc, r1
     a88:	00000000 	andeq	r0, r0, r0
     a8c:	10000000 	andne	r0, r0, r0
     a90:	16000000 	strne	r0, [r0], -r0
     a94:	01000000 	mrseq	r0, (UNDEF: 0)
     a98:	00165000 	andseq	r5, r6, r0
     a9c:	00190000 	andseq	r0, r9, r0
     aa0:	00010000 	andeq	r0, r1, r0
     aa4:	00001951 	andeq	r1, r0, r1, asr r9
     aa8:	00002000 	andeq	r2, r0, r0
     aac:	f3000400 	vshl.u8	d0, d0, d0
     ab0:	009f5001 	addseq	r5, pc, r1
	...
     abc:	1c000000 	stcne	0, cr0, [r0], {-0}
     ac0:	01000000 	mrseq	r0, (UNDEF: 0)
     ac4:	001c5000 	andseq	r5, ip, r0
     ac8:	002a0000 	eoreq	r0, sl, r0
     acc:	00040000 	andeq	r0, r4, r0
     ad0:	9f5001f3 	svcls	0x005001f3
     ad4:	0000002a 	andeq	r0, r0, sl, lsr #32
     ad8:	00000042 	andeq	r0, r0, r2, asr #32
     adc:	42500001 	subsmi	r0, r0, #1
     ae0:	50000000 	andpl	r0, r0, r0
     ae4:	04000000 	streq	r0, [r0], #-0
     ae8:	5001f300 	andpl	pc, r1, r0, lsl #6
     aec:	0000509f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     af0:	00006e00 	andeq	r6, r0, r0, lsl #28
     af4:	50000100 	andpl	r0, r0, r0, lsl #2
     af8:	0000006e 	andeq	r0, r0, lr, rrx
     afc:	0000008c 	andeq	r0, r0, ip, lsl #1
     b00:	01f30004 	mvnseq	r0, r4
     b04:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     b10:	000a0000 	andeq	r0, sl, r0
     b14:	00010000 	andeq	r0, r1, r0
     b18:	00000a51 	andeq	r0, r0, r1, asr sl
     b1c:	00001000 	andeq	r1, r0, r0
     b20:	71000300 	mrsvc	r0, LR_irq
     b24:	00109f04 	andseq	r9, r0, r4, lsl #30
     b28:	008c0000 	addeq	r0, ip, r0
     b2c:	00040000 	andeq	r0, r4, r0
     b30:	9f5101f3 	svcls	0x005101f3
	...
     b3c:	0000002a 	andeq	r0, r0, sl, lsr #32
     b40:	0000006e 	andeq	r0, r0, lr, rrx
     b44:	7a520001 	bvc	1480b50 <_Min_Stack_Size+0x1480950>
     b48:	8c000000 	stchi	0, cr0, [r0], {-0}
     b4c:	01000000 	mrseq	r0, (UNDEF: 0)
     b50:	00005200 	andeq	r5, r0, r0, lsl #4
     b54:	00000000 	andeq	r0, r0, r0
     b58:	002a0000 	eoreq	r0, sl, r0
     b5c:	00300000 	eorseq	r0, r0, r0
     b60:	00010000 	andeq	r0, r1, r0
     b64:	00003053 	andeq	r3, r0, r3, asr r0
     b68:	00003200 	andeq	r3, r0, r0, lsl #4
     b6c:	52000100 	andpl	r0, r0, #0, 2
     b70:	00000032 	andeq	r0, r0, r2, lsr r0
     b74:	00000052 	andeq	r0, r0, r2, asr r0
     b78:	52530001 	subspl	r0, r3, #1
     b7c:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     b80:	02000000 	andeq	r0, r0, #0
     b84:	58047200 	stmdapl	r4, {r9, ip, sp, lr}
     b88:	66000000 	strvs	r0, [r0], -r0
     b8c:	01000000 	mrseq	r0, (UNDEF: 0)
     b90:	00665300 	rsbeq	r5, r6, r0, lsl #6
     b94:	006c0000 	rsbeq	r0, ip, r0
     b98:	00020000 	andeq	r0, r2, r0
     b9c:	007a0472 	rsbseq	r0, sl, r2, ror r4
     ba0:	007e0000 	rsbseq	r0, lr, r0
     ba4:	00010000 	andeq	r0, r1, r0
     ba8:	00007e53 	andeq	r7, r0, r3, asr lr
     bac:	00008400 	andeq	r8, r0, r0, lsl #8
     bb0:	72000200 	andvc	r0, r0, #0, 4
     bb4:	00000004 	andeq	r0, r0, r4
     bb8:	00000000 	andeq	r0, r0, r0
     bbc:	00000400 	andeq	r0, r0, r0, lsl #8
     bc0:	00000a00 	andeq	r0, r0, r0, lsl #20
     bc4:	51000100 	mrspl	r0, (UNDEF: 16)
     bc8:	0000000a 	andeq	r0, r0, sl
     bcc:	00000010 	andeq	r0, r0, r0, lsl r0
     bd0:	04710003 	ldrbteq	r0, [r1], #-3
     bd4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     bd8:	00000000 	andeq	r0, r0, r0
     bdc:	00000a00 	andeq	r0, r0, r0, lsl #20
     be0:	00001000 	andeq	r1, r0, r0
     be4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     bf4:	0000003e 	andeq	r0, r0, lr, lsr r0
     bf8:	3e500001 	cdpcc	0, 5, cr0, cr0, cr1, {0}
     bfc:	64000000 	strvs	r0, [r0], #-0
     c00:	01000000 	mrseq	r0, (UNDEF: 0)
     c04:	00645600 	rsbeq	r5, r4, r0, lsl #12
     c08:	006e0000 	rsbeq	r0, lr, r0
     c0c:	00010000 	andeq	r0, r1, r0
     c10:	00006e50 	andeq	r6, r0, r0, asr lr
     c14:	00008400 	andeq	r8, r0, r0, lsl #8
     c18:	56000100 	strpl	r0, [r0], -r0, lsl #2
     c1c:	00000084 	andeq	r0, r0, r4, lsl #1
     c20:	0000008e 	andeq	r0, r0, lr, lsl #1
     c24:	8e500001 	cdphi	0, 5, cr0, cr0, cr1, {0}
     c28:	96000000 	strls	r0, [r0], -r0
     c2c:	01000000 	mrseq	r0, (UNDEF: 0)
     c30:	00965600 	addseq	r5, r6, r0, lsl #12
     c34:	00ae0000 	adceq	r0, lr, r0
     c38:	00010000 	andeq	r0, r1, r0
     c3c:	0000ae50 	andeq	sl, r0, r0, asr lr
     c40:	0000bc00 	andeq	fp, r0, r0, lsl #24
     c44:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     c54:	0000001c 	andeq	r0, r0, ip, lsl r0
     c58:	1c510001 	mrrcne	0, 0, r0, r1, cr1
     c5c:	bc000000 	stclt	0, cr0, [r0], {-0}
     c60:	04000000 	streq	r0, [r0], #-0
     c64:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     c68:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c6c:	00000000 	andeq	r0, r0, r0
     c70:	00001e00 	andeq	r1, r0, r0, lsl #28
     c74:	00003600 	andeq	r3, r0, r0, lsl #12
     c78:	52000100 	andpl	r0, r0, #0, 2
     c7c:	00000064 	andeq	r0, r0, r4, rrx
     c80:	00000068 	andeq	r0, r0, r8, rrx
     c84:	84520001 	ldrbhi	r0, [r2], #-1
     c88:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
     c8c:	01000000 	mrseq	r0, (UNDEF: 0)
     c90:	00965200 	addseq	r5, r6, r0, lsl #4
     c94:	009e0000 	addseq	r0, lr, r0
     c98:	00010000 	andeq	r0, r1, r0
     c9c:	0000a252 	andeq	sl, r0, r2, asr r2
     ca0:	0000ac00 	andeq	sl, r0, r0, lsl #24
     ca4:	52000100 	andpl	r0, r0, #0, 2
	...
     cb0:	0000001e 	andeq	r0, r0, lr, lsl r0
     cb4:	00000028 	andeq	r0, r0, r8, lsr #32
     cb8:	28520001 	ldmdacs	r2, {r0}^
     cbc:	30000000 	andcc	r0, r0, r0
     cc0:	01000000 	mrseq	r0, (UNDEF: 0)
     cc4:	00305400 	eorseq	r5, r0, r0, lsl #8
     cc8:	00320000 	eorseq	r0, r2, r0
     ccc:	00010000 	andeq	r0, r1, r0
     cd0:	00003252 	andeq	r3, r0, r2, asr r2
     cd4:	00003600 	andeq	r3, r0, r0, lsl #12
     cd8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     cdc:	00000036 	andeq	r0, r0, r6, lsr r0
     ce0:	00000060 	andeq	r0, r0, r0, rrx
     ce4:	9f300002 	svcls	0x00300002
     ce8:	00000064 	andeq	r0, r0, r4, rrx
     cec:	0000008e 	andeq	r0, r0, lr, lsl #1
     cf0:	96540001 	ldrbls	r0, [r4], -r1
     cf4:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
     cf8:	01000000 	mrseq	r0, (UNDEF: 0)
     cfc:	00a25200 	adceq	r5, r2, r0, lsl #4
     d00:	00a60000 	adceq	r0, r6, r0
     d04:	00010000 	andeq	r0, r1, r0
     d08:	0000a652 	andeq	sl, r0, r2, asr r6
     d0c:	0000aa00 	andeq	sl, r0, r0, lsl #20
     d10:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     d14:	000000aa 	andeq	r0, r0, sl, lsr #1
     d18:	000000ac 	andeq	r0, r0, ip, lsr #1
     d1c:	04720002 	ldrbteq	r0, [r2], #-2
     d20:	000000ac 	andeq	r0, r0, ip, lsr #1
     d24:	000000bc 	strheq	r0, [r0], -ip
     d28:	9f300002 	svcls	0x00300002
	...
     d34:	00000078 	andeq	r0, r0, r8, ror r0
     d38:	0000007a 	andeq	r0, r0, sl, ror r0
     d3c:	7a530001 	bvc	14c0d48 <_Min_Stack_Size+0x14c0b48>
     d40:	84000000 	strhi	r0, [r0], #-0
     d44:	03000000 	movweq	r0, #0
     d48:	9f047400 	svcls	0x00047400
	...
     d54:	00000078 	andeq	r0, r0, r8, ror r0
     d58:	00000084 	andeq	r0, r0, r4, lsl #1
     d5c:	00500001 	subseq	r0, r0, r1
     d60:	00000000 	andeq	r0, r0, r0
     d64:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     d68:	7a000000 	bvc	d70 <_Min_Stack_Size+0xb70>
     d6c:	06000000 	streq	r0, [r0], -r0
     d70:	73007000 	movwvc	r7, #0
     d74:	7a9f1c00 	bvc	fe7c7d7c <BootRAM+0xd73851d>
     d78:	84000000 	strhi	r0, [r0], #-0
     d7c:	01000000 	mrseq	r0, (UNDEF: 0)
     d80:	00005300 	andeq	r5, r0, r0, lsl #6
     d84:	00000000 	andeq	r0, r0, r0
     d88:	00080000 	andeq	r0, r8, r0
     d8c:	000a0000 	andeq	r0, sl, r0
     d90:	00030000 	andeq	r0, r3, r0
     d94:	0a9f0475 	beq	fe7c1f70 <BootRAM+0xd732711>
     d98:	10000000 	andne	r0, r0, r0
     d9c:	01000000 	mrseq	r0, (UNDEF: 0)
     da0:	00105500 	andseq	r5, r0, r0, lsl #10
     da4:	001c0000 	andseq	r0, ip, r0
     da8:	001a0000 	andseq	r0, sl, r0
     dac:	fc090371 	stc2	3, cr0, [r9], {113}	; 0x71
     db0:	1208231a 	andne	r2, r8, #1744830464	; 0x68000000
     db4:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
     db8:	4014163c 	andsmi	r1, r4, ip, lsr r6
     dbc:	2b22244b 	blcs	889ef0 <_Min_Stack_Size+0x889cf0>
     dc0:	16000128 	strne	r0, [r0], -r8, lsr #2
     dc4:	001c9f13 	andseq	r9, ip, r3, lsl pc
     dc8:	00bc0000 	adcseq	r0, ip, r0
     dcc:	001d0000 	andseq	r0, sp, r0
     dd0:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
     dd4:	1afc0903 	bne	fff031e8 <BootRAM+0xee73989>
     dd8:	40120823 	andsmi	r0, r2, r3, lsr #16
     ddc:	3c22244b 	cfstrscc	mvf2, [r2], #-300	; 0xfffffed4
     de0:	4b401416 	blmi	1005e40 <_Min_Stack_Size+0x1005c40>
     de4:	282b2224 	stmdacs	fp!, {r2, r5, r9, sp}
     de8:	13160001 	tstne	r6, #1
     dec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     df0:	00000000 	andeq	r0, r0, r0
     df4:	00002200 	andeq	r2, r0, r0, lsl #4
     df8:	00002400 	andeq	r2, r0, r0, lsl #8
     dfc:	73000600 	movwvc	r0, #1536	; 0x600
     e00:	1c007500 	cfstr32ne	mvfx7, [r0], {-0}
     e04:	0000249f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     e08:	00002a00 	andeq	r2, r0, r0, lsl #20
     e0c:	53000100 	movwpl	r0, #256	; 0x100
     e10:	0000002a 	andeq	r0, r0, sl, lsr #32
     e14:	0000002c 	andeq	r0, r0, ip, lsr #32
     e18:	00730006 	rsbseq	r0, r3, r6
     e1c:	9f1c0075 	svcls	0x001c0075
     e20:	0000002c 	andeq	r0, r0, ip, lsr #32
     e24:	00000036 	andeq	r0, r0, r6, lsr r0
     e28:	64530001 	ldrbvs	r0, [r3], #-1
     e2c:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
     e30:	01000000 	mrseq	r0, (UNDEF: 0)
     e34:	00845300 	addeq	r5, r4, r0, lsl #6
     e38:	008a0000 	addeq	r0, sl, r0
     e3c:	00010000 	andeq	r0, r1, r0
     e40:	00008a53 	andeq	r8, r0, r3, asr sl
     e44:	00008e00 	andeq	r8, r0, r0, lsl #28
     e48:	74000700 	strvc	r0, [r0], #-1792	; 0xfffff900
     e4c:	00750600 	rsbseq	r0, r5, r0, lsl #12
     e50:	00969f1c 	addseq	r9, r6, ip, lsl pc
     e54:	009e0000 	addseq	r0, lr, r0
     e58:	00010000 	andeq	r0, r1, r0
     e5c:	0000a253 	andeq	sl, r0, r3, asr r2
     e60:	0000a800 	andeq	sl, r0, r0, lsl #16
     e64:	53000100 	movwpl	r0, #256	; 0x100
     e68:	000000a8 	andeq	r0, r0, r8, lsr #1
     e6c:	000000aa 	andeq	r0, r0, sl, lsr #1
     e70:	00740007 	rsbseq	r0, r4, r7
     e74:	1c007506 	cfstr32ne	mvfx7, [r0], {6}
     e78:	0000aa9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
     e7c:	0000ac00 	andeq	sl, r0, r0, lsl #24
     e80:	72000800 	andvc	r0, r0, #0, 16
     e84:	75060604 	strvc	r0, [r6, #-1540]	; 0xfffff9fc
     e88:	009f1c00 	addseq	r1, pc, r0, lsl #24
     e8c:	00000000 	andeq	r0, r0, r0
     e90:	36000000 	strcc	r0, [r0], -r0
     e94:	60000000 	andvs	r0, r0, r0
     e98:	1d000000 	stcne	0, cr0, [r0, #-0]
     e9c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     ea0:	fc090323 	stc2	3, cr0, [r9], {35}	; 0x23
     ea4:	1208231a 	andne	r2, r8, #1744830464	; 0x68000000
     ea8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
     eac:	4014163c 	andsmi	r1, r4, ip, lsr r6
     eb0:	2b22244b 	blcs	889fe4 <_Min_Stack_Size+0x889de4>
     eb4:	16000128 	strne	r0, [r0], -r8, lsr #2
     eb8:	00ac9f13 	adceq	r9, ip, r3, lsl pc
     ebc:	00bc0000 	adcseq	r0, ip, r0
     ec0:	001d0000 	andseq	r0, sp, r0
     ec4:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
     ec8:	1afc0903 	bne	fff032dc <BootRAM+0xee73a7d>
     ecc:	40120823 	andsmi	r0, r2, r3, lsr #16
     ed0:	3c22244b 	cfstrscc	mvf2, [r2], #-300	; 0xfffffed4
     ed4:	4b401416 	blmi	1005f34 <_Min_Stack_Size+0x1005d34>
     ed8:	282b2224 	stmdacs	fp!, {r2, r5, r9, sp}
     edc:	13160001 	tstne	r6, #1
     ee0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ee4:	00000000 	andeq	r0, r0, r0
     ee8:	00003600 	andeq	r3, r0, r0, lsl #12
     eec:	00003e00 	andeq	r3, r0, r0, lsl #28
     ef0:	50000100 	andpl	r0, r0, r0, lsl #2
     ef4:	0000003e 	andeq	r0, r0, lr, lsr r0
     ef8:	00000060 	andeq	r0, r0, r0, rrx
     efc:	ac560001 	mrrcge	0, 0, r0, r6, cr1
     f00:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
     f04:	01000000 	mrseq	r0, (UNDEF: 0)
     f08:	00ae5000 	adceq	r5, lr, r0
     f0c:	00bc0000 	adcseq	r0, ip, r0
     f10:	00010000 	andeq	r0, r1, r0
     f14:	00000056 	andeq	r0, r0, r6, asr r0
     f18:	00000000 	andeq	r0, r0, r0
     f1c:	00004600 	andeq	r4, r0, r0, lsl #12
     f20:	00005800 	andeq	r5, r0, r0, lsl #16
     f24:	50000100 	andpl	r0, r0, r0, lsl #2
     f28:	00000058 	andeq	r0, r0, r8, asr r0
     f2c:	0000005b 	andeq	r0, r0, fp, asr r0
     f30:	7f730003 	svcvc	0x00730003
     f34:	00005c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     f38:	00005e00 	andeq	r5, r0, r0, lsl #28
     f3c:	50000100 	andpl	r0, r0, r0, lsl #2
     f40:	0000005e 	andeq	r0, r0, lr, asr r0
     f44:	00000060 	andeq	r0, r0, r0, rrx
     f48:	7f700003 	svcvc	0x00700003
     f4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     f50:	00000000 	andeq	r0, r0, r0
     f54:	00005000 	andeq	r5, r0, r0
     f58:	00006000 	andeq	r6, r0, r0
     f5c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     f6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f70:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     f74:	36000000 	strcc	r0, [r0], -r0
     f78:	04000000 	streq	r0, [r0], #-0
     f7c:	5001f300 	andpl	pc, r1, r0, lsl #6
     f80:	0000369f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
     f84:	00005200 	andeq	r5, r0, r0, lsl #4
     f88:	50000100 	andpl	r0, r0, r0, lsl #2
     f8c:	00000052 	andeq	r0, r0, r2, asr r0
     f90:	000000c6 	andeq	r0, r0, r6, asr #1
     f94:	00590001 	subseq	r0, r9, r1
	...
     fa0:	1c000000 	stcne	0, cr0, [r0], {-0}
     fa4:	01000000 	mrseq	r0, (UNDEF: 0)
     fa8:	001c5100 	andseq	r5, ip, r0, lsl #2
     fac:	00360000 	eorseq	r0, r6, r0
     fb0:	00010000 	andeq	r0, r1, r0
     fb4:	00003654 	andeq	r3, r0, r4, asr r6
     fb8:	00004000 	andeq	r4, r0, r0
     fbc:	51000100 	mrspl	r0, (UNDEF: 16)
     fc0:	00000040 	andeq	r0, r0, r0, asr #32
     fc4:	000000c6 	andeq	r0, r0, r6, asr #1
     fc8:	00540001 	subseq	r0, r4, r1
	...
     fd4:	1c000000 	stcne	0, cr0, [r0], {-0}
     fd8:	01000000 	mrseq	r0, (UNDEF: 0)
     fdc:	001c5200 	andseq	r5, ip, r0, lsl #4
     fe0:	00360000 	eorseq	r0, r6, r0
     fe4:	00010000 	andeq	r0, r1, r0
     fe8:	00003658 	andeq	r3, r0, r8, asr r6
     fec:	00003e00 	andeq	r3, r0, r0, lsl #28
     ff0:	52000100 	andpl	r0, r0, #0, 2
     ff4:	0000003e 	andeq	r0, r0, lr, lsr r0
     ff8:	000000c6 	andeq	r0, r0, r6, asr #1
     ffc:	00580001 	subseq	r0, r8, r1
	...
    1008:	12000000 	andne	r0, r0, #0
    100c:	01000000 	mrseq	r0, (UNDEF: 0)
    1010:	00125300 	andseq	r5, r2, r0, lsl #6
    1014:	00360000 	eorseq	r0, r6, r0
    1018:	00010000 	andeq	r0, r1, r0
    101c:	00003657 	andeq	r3, r0, r7, asr r6
    1020:	00003a00 	andeq	r3, r0, r0, lsl #20
    1024:	53000100 	movwpl	r0, #256	; 0x100
    1028:	0000003a 	andeq	r0, r0, sl, lsr r0
    102c:	000000c6 	andeq	r0, r0, r6, asr #1
    1030:	00570001 	subseq	r0, r7, r1
    1034:	00000000 	andeq	r0, r0, r0
    1038:	06000000 	streq	r0, [r0], -r0
    103c:	1c000000 	stcne	0, cr0, [r0], {-0}
    1040:	01000000 	mrseq	r0, (UNDEF: 0)
    1044:	001c5600 	andseq	r5, ip, r0, lsl #12
    1048:	002c0000 	eoreq	r0, ip, r0
    104c:	00010000 	andeq	r0, r1, r0
    1050:	00003a55 	andeq	r3, r0, r5, asr sl
    1054:	0000c600 	andeq	ip, r0, r0, lsl #12
    1058:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    1064:	0000006c 	andeq	r0, r0, ip, rrx
    1068:	00000077 	andeq	r0, r0, r7, ror r0
    106c:	77500001 	ldrbvc	r0, [r0, -r1]
    1070:	86000000 	strhi	r0, [r0], -r0
    1074:	01000000 	mrseq	r0, (UNDEF: 0)
    1078:	008c5b00 	addeq	r5, ip, r0, lsl #22
    107c:	00900000 	addseq	r0, r0, r0
    1080:	00010000 	andeq	r0, r1, r0
    1084:	00009050 	andeq	r9, r0, r0, asr r0
    1088:	0000a800 	andeq	sl, r0, r0, lsl #16
    108c:	5b000100 	blpl	1494 <_Min_Stack_Size+0x1294>
    1090:	000000a8 	andeq	r0, r0, r8, lsr #1
    1094:	000000ac 	andeq	r0, r0, ip, lsr #1
    1098:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    109c:	c6000000 	strgt	r0, [r0], -r0
    10a0:	01000000 	mrseq	r0, (UNDEF: 0)
    10a4:	00005b00 	andeq	r5, r0, r0, lsl #22
    10a8:	00000000 	andeq	r0, r0, r0
    10ac:	00540000 	subseq	r0, r4, r0
    10b0:	00a60000 	adceq	r0, r6, r0
    10b4:	00010000 	andeq	r0, r1, r0
    10b8:	0000a655 	andeq	sl, r0, r5, asr r6
    10bc:	0000a800 	andeq	sl, r0, r0, lsl #16
    10c0:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
    10c4:	0000a814 	andeq	sl, r0, r4, lsl r8
    10c8:	0000c600 	andeq	ip, r0, r0, lsl #12
    10cc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    10d8:	000000c8 	andeq	r0, r0, r8, asr #1
    10dc:	000000e4 	andeq	r0, r0, r4, ror #1
    10e0:	e4500001 	ldrb	r0, [r0], #-1
    10e4:	bc000000 	stclt	0, cr0, [r0], {-0}
    10e8:	01000001 	tsteq	r0, r1
    10ec:	01bc5b00 			; <UNDEFINED> instruction: 0x01bc5b00
    10f0:	01c80000 	biceq	r0, r8, r0
    10f4:	00040000 	andeq	r0, r4, r0
    10f8:	9f5001f3 	svcls	0x005001f3
	...
    1104:	000000c8 	andeq	r0, r0, r8, asr #1
    1108:	000000e6 	andeq	r0, r0, r6, ror #1
    110c:	e6510001 	ldrb	r0, [r1], -r1
    1110:	bc000000 	stclt	0, cr0, [r0], {-0}
    1114:	01000001 	tsteq	r0, r1
    1118:	01bc5500 			; <UNDEFINED> instruction: 0x01bc5500
    111c:	01c80000 	biceq	r0, r8, r0
    1120:	00040000 	andeq	r0, r4, r0
    1124:	9f5101f3 	svcls	0x005101f3
	...
    1130:	000000c8 	andeq	r0, r0, r8, asr #1
    1134:	000000e6 	andeq	r0, r0, r6, ror #1
    1138:	e6520001 	ldrb	r0, [r2], -r1
    113c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    1140:	01000001 	tsteq	r0, r1
    1144:	00005800 	andeq	r5, r0, r0, lsl #16
    1148:	00000000 	andeq	r0, r0, r0
    114c:	00d20000 	sbcseq	r0, r2, r0
    1150:	00e60000 	rsceq	r0, r6, r0
    1154:	00020000 	andeq	r0, r2, r0
    1158:	00e69f30 	rsceq	r9, r6, r0, lsr pc
    115c:	016c0000 	cmneq	ip, r0
    1160:	00010000 	andeq	r0, r1, r0
    1164:	00017054 	andeq	r7, r1, r4, asr r0
    1168:	00017c00 	andeq	r7, r1, r0, lsl #24
    116c:	30000200 	andcc	r0, r0, r0, lsl #4
    1170:	00017c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    1174:	0001bc00 	andeq	fp, r1, r0, lsl #24
    1178:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    117c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    1180:	000001c8 	andeq	r0, r0, r8, asr #3
    1184:	9f300002 	svcls	0x00300002
	...
    1190:	000000ee 	andeq	r0, r0, lr, ror #1
    1194:	000000f4 	strdeq	r0, [r0], -r4
    1198:	f4530001 			; <UNDEFINED> instruction: 0xf4530001
    119c:	fc000000 	stc2	0, cr0, [r0], {-0}
    11a0:	01000000 	mrseq	r0, (UNDEF: 0)
    11a4:	00fc5700 	rscseq	r5, ip, r0, lsl #14
    11a8:	01060000 	mrseq	r0, (UNDEF: 6)
    11ac:	00010000 	andeq	r0, r1, r0
    11b0:	0001505a 	andeq	r5, r1, sl, asr r0
    11b4:	00017000 	andeq	r7, r1, r0
    11b8:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    11bc:	00000182 	andeq	r0, r0, r2, lsl #3
    11c0:	00000186 	andeq	r0, r0, r6, lsl #3
    11c4:	00570001 	subseq	r0, r7, r1
    11c8:	00000000 	andeq	r0, r0, r0
    11cc:	d2000000 	andle	r0, r0, #0
    11d0:	e6000000 	str	r0, [r0], -r0
    11d4:	02000000 	andeq	r0, r0, #0
    11d8:	e6007200 	str	r7, [r0], -r0, lsl #4
    11dc:	bc000000 	stclt	0, cr0, [r0], {-0}
    11e0:	01000001 	tsteq	r0, r1
    11e4:	00005600 	andeq	r5, r0, r0, lsl #12
    11e8:	00000000 	andeq	r0, r0, r0
    11ec:	00c80000 	sbceq	r0, r8, r0
    11f0:	00e60000 	rsceq	r0, r6, r0
    11f4:	00020000 	andeq	r0, r2, r0
    11f8:	01769f30 	cmneq	r6, r0, lsr pc
    11fc:	017e0000 	cmneq	lr, r0
    1200:	00020000 	andeq	r0, r2, r0
    1204:	017e0076 	cmneq	lr, r6, ror r0
    1208:	01800000 	orreq	r0, r0, r0
    120c:	00010000 	andeq	r0, r1, r0
    1210:	00000059 	andeq	r0, r0, r9, asr r0
    1214:	00000000 	andeq	r0, r0, r0
    1218:	00012600 	andeq	r2, r1, r0, lsl #12
    121c:	00013300 	andeq	r3, r1, r0, lsl #6
    1220:	50000100 	andpl	r0, r0, r0, lsl #2
    1224:	00000133 	andeq	r0, r0, r3, lsr r1
    1228:	00000142 	andeq	r0, r0, r2, asr #2
    122c:	54910002 	ldrpl	r0, [r1], #2
    1230:	00000142 	andeq	r0, r0, r2, asr #2
    1234:	00000156 	andeq	r0, r0, r6, asr r1
    1238:	8c530001 	mrrchi	0, 0, r0, r3, cr1
    123c:	96000001 	strls	r0, [r0], -r1
    1240:	01000001 	tsteq	r0, r1
    1244:	01965000 	orrseq	r5, r6, r0
    1248:	01990000 	orrseq	r0, r9, r0
    124c:	00010000 	andeq	r0, r1, r0
    1250:	00000053 	andeq	r0, r0, r3, asr r0
    1254:	00000000 	andeq	r0, r0, r0
    1258:	00010600 	andeq	r0, r1, r0, lsl #12
    125c:	00014e00 	andeq	r4, r1, r0, lsl #28
    1260:	5a000100 	bpl	1668 <_Min_Stack_Size+0x1468>
    1264:	00000186 	andeq	r0, r0, r6, lsl #3
    1268:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    126c:	005a0001 	subseq	r0, sl, r1
    1270:	00000000 	andeq	r0, r0, r0
    1274:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1278:	50000001 	andpl	r0, r0, r1
    127c:	01000001 	tsteq	r0, r1
    1280:	01505700 	cmpeq	r0, r0, lsl #14
    1284:	01560000 	cmpeq	r6, r0
    1288:	00020000 	andeq	r0, r2, r0
    128c:	01861475 	orreq	r1, r6, r5, ror r4
    1290:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
    1294:	00010000 	andeq	r0, r1, r0
    1298:	00000057 	andeq	r0, r0, r7, asr r0
    129c:	00000000 	andeq	r0, r0, r0
    12a0:	0001c800 	andeq	ip, r1, r0, lsl #16
    12a4:	0001e400 	andeq	lr, r1, r0, lsl #8
    12a8:	50000100 	andpl	r0, r0, r0, lsl #2
    12ac:	000001e4 	andeq	r0, r0, r4, ror #3
    12b0:	000003d2 	ldrdeq	r0, [r0], -r2
    12b4:	d2580001 	subsle	r0, r8, #1
    12b8:	d7000003 	strle	r0, [r0, -r3]
    12bc:	01000003 	tsteq	r0, r3
    12c0:	03d75000 	bicseq	r5, r7, #0
    12c4:	04040000 	streq	r0, [r4], #-0
    12c8:	00010000 	andeq	r0, r1, r0
    12cc:	00000058 	andeq	r0, r0, r8, asr r0
    12d0:	00000000 	andeq	r0, r0, r0
    12d4:	0001c800 	andeq	ip, r1, r0, lsl #16
    12d8:	0001d000 	andeq	sp, r1, r0
    12dc:	51000100 	mrspl	r0, (UNDEF: 16)
    12e0:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    12e4:	00000404 	andeq	r0, r0, r4, lsl #8
    12e8:	00570001 	subseq	r0, r7, r1
    12ec:	00000000 	andeq	r0, r0, r0
    12f0:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    12f4:	e4000001 	str	r0, [r0], #-1
    12f8:	01000001 	tsteq	r0, r1
    12fc:	01e45200 	mvneq	r5, r0, lsl #4
    1300:	02040000 	andeq	r0, r4, #0
    1304:	00010000 	andeq	r0, r1, r0
    1308:	0002045a 	andeq	r0, r2, sl, asr r4
    130c:	0003d200 	andeq	sp, r3, r0, lsl #4
    1310:	f3000400 	vshl.u8	d0, d0, d0
    1314:	d29f5201 	addsle	r5, pc, #268435456	; 0x10000000
    1318:	d7000003 	strle	r0, [r0, -r3]
    131c:	01000003 	tsteq	r0, r3
    1320:	03d75200 	bicseq	r5, r7, #0, 4
    1324:	04040000 	streq	r0, [r4], #-0
    1328:	00010000 	andeq	r0, r1, r0
    132c:	0000005a 	andeq	r0, r0, sl, asr r0
    1330:	00000000 	andeq	r0, r0, r0
    1334:	0001e400 	andeq	lr, r1, r0, lsl #8
    1338:	00020a00 	andeq	r0, r2, r0, lsl #20
    133c:	5a000100 	bpl	1744 <_Min_Stack_Size+0x1544>
    1340:	0000020a 	andeq	r0, r0, sl, lsl #4
    1344:	0000020c 	andeq	r0, r0, ip, lsl #4
    1348:	0c540001 	mrrceq	0, 0, r0, r4, cr1
    134c:	12000002 	andne	r0, r0, #2
    1350:	03000002 	movweq	r0, #2
    1354:	9f7f7400 	svcls	0x007f7400
    1358:	00000212 	andeq	r0, r0, r2, lsl r2
    135c:	00000216 	andeq	r0, r0, r6, lsl r2
    1360:	16540001 	ldrbne	r0, [r4], -r1
    1364:	3c000002 	stccc	0, cr0, [r0], {2}
    1368:	03000002 	movweq	r0, #2
    136c:	9f7f7400 	svcls	0x007f7400
    1370:	0000023c 	andeq	r0, r0, ip, lsr r2
    1374:	00000244 	andeq	r0, r0, r4, asr #4
    1378:	01740003 	cmneq	r4, r3
    137c:	0002449f 	muleq	r2, pc, r4	; <UNPREDICTABLE>
    1380:	00025600 	andeq	r5, r2, r0, lsl #12
    1384:	53000100 	movwpl	r0, #256	; 0x100
    1388:	00000256 	andeq	r0, r0, r6, asr r2
    138c:	00000262 	andeq	r0, r0, r2, ror #4
    1390:	625a0001 	subsvs	r0, sl, #1
    1394:	6a000002 	bvs	13a4 <_Min_Stack_Size+0x11a4>
    1398:	01000002 	tsteq	r0, r2
    139c:	026a5300 	rsbeq	r5, sl, #0, 6
    13a0:	02a20000 	adceq	r0, r2, #0
    13a4:	00010000 	andeq	r0, r1, r0
    13a8:	0002a25a 	andeq	sl, r2, sl, asr r2
    13ac:	0002aa00 	andeq	sl, r2, r0, lsl #20
    13b0:	7a000300 	bvc	1fb8 <_Min_Stack_Size+0x1db8>
    13b4:	02b49f7f 	adcseq	r9, r4, #508	; 0x1fc
    13b8:	031c0000 	tsteq	ip, #0
    13bc:	00010000 	andeq	r0, r1, r0
    13c0:	00032e5a 	andeq	r2, r3, sl, asr lr
    13c4:	00033600 	andeq	r3, r3, r0, lsl #12
    13c8:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    13cc:	03369f7f 	teqeq	r6, #508	; 0x1fc
    13d0:	03440000 	movteq	r0, #16384	; 0x4000
    13d4:	00010000 	andeq	r0, r1, r0
    13d8:	0003445a 	andeq	r4, r3, sl, asr r4
    13dc:	00035800 	andeq	r5, r3, r0, lsl #16
    13e0:	7a000300 	bvc	1fe8 <_Min_Stack_Size+0x1de8>
    13e4:	03589f01 	cmpeq	r8, #1, 30
    13e8:	03600000 	cmneq	r0, #0
    13ec:	00010000 	andeq	r0, r1, r0
    13f0:	0003605a 	andeq	r6, r3, sl, asr r0
    13f4:	00036800 	andeq	r6, r3, r0, lsl #16
    13f8:	7a000300 	bvc	2000 <_Min_Stack_Size+0x1e00>
    13fc:	03749f7f 	cmneq	r4, #508	; 0x1fc
    1400:	03820000 	orreq	r0, r2, #0
    1404:	00010000 	andeq	r0, r1, r0
    1408:	0003825a 	andeq	r8, r3, sl, asr r2
    140c:	00038a00 	andeq	r8, r3, r0, lsl #20
    1410:	7a000300 	bvc	2018 <_Min_Stack_Size+0x1e18>
    1414:	038a9f01 	orreq	r9, sl, #1, 30
    1418:	038c0000 	orreq	r0, ip, #0
    141c:	00010000 	andeq	r0, r1, r0
    1420:	00038c5a 	andeq	r8, r3, sl, asr ip
    1424:	00039200 	andeq	r9, r3, r0, lsl #4
    1428:	7a000300 	bvc	2030 <_Min_Stack_Size+0x1e30>
    142c:	03929f01 	orrseq	r9, r2, #1, 30
    1430:	03b20000 			; <UNDEFINED> instruction: 0x03b20000
    1434:	00010000 	andeq	r0, r1, r0
    1438:	0003b250 	andeq	fp, r3, r0, asr r2
    143c:	0003d200 	andeq	sp, r3, r0, lsl #4
    1440:	5a000100 	bpl	1848 <_Min_Stack_Size+0x1648>
	...
    144c:	000001e4 	andeq	r0, r0, r4, ror #3
    1450:	00000308 	andeq	r0, r0, r8, lsl #6
    1454:	08560001 	ldmdaeq	r6, {r0}^
    1458:	0c000003 	stceq	0, cr0, [r0], {3}
    145c:	01000003 	tsteq	r0, r3
    1460:	030c5000 	movweq	r5, #49152	; 0xc000
    1464:	03280000 			; <UNDEFINED> instruction: 0x03280000
    1468:	00010000 	andeq	r0, r1, r0
    146c:	00032e56 	andeq	r2, r3, r6, asr lr
    1470:	0003d000 	andeq	sp, r3, r0
    1474:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1478:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    147c:	000003d2 	ldrdeq	r0, [r0], -r2
    1480:	00500001 	subseq	r0, r0, r1
    1484:	00000000 	andeq	r0, r0, r0
    1488:	1a000000 	bne	1490 <_Min_Stack_Size+0x1290>
    148c:	20000002 	andcs	r0, r0, r2
    1490:	06000002 	streq	r0, [r0], -r2
    1494:	7a007400 	bvc	1e49c <_Min_Stack_Size+0x1e29c>
    1498:	2e9f1c00 	cdpcs	12, 9, cr1, cr15, cr0, {0}
    149c:	36000003 	strcc	r0, [r0], -r3
    14a0:	06000003 	streq	r0, [r0], -r3
    14a4:	7a007400 	bvc	1e4ac <_Min_Stack_Size+0x1e2ac>
    14a8:	009f1c00 	addseq	r1, pc, r0, lsl #24
    14ac:	00000000 	andeq	r0, r0, r0
    14b0:	e4000000 	str	r0, [r0], #-0
    14b4:	0a000001 	beq	14c0 <_Min_Stack_Size+0x12c0>
    14b8:	01000002 	tsteq	r0, r2
    14bc:	020a5a00 	andeq	r5, sl, #0, 20
    14c0:	020c0000 	andeq	r0, ip, #0
    14c4:	00010000 	andeq	r0, r1, r0
    14c8:	00020c54 	andeq	r0, r2, r4, asr ip
    14cc:	00025600 	andeq	r5, r2, r0, lsl #12
    14d0:	5a000100 	bpl	18d8 <_Min_Stack_Size+0x16d8>
    14d4:	00000256 	andeq	r0, r0, r6, asr r2
    14d8:	0000025a 	andeq	r0, r0, sl, asr r2
    14dc:	6e500001 	cdpvs	0, 5, cr0, cr0, cr1, {0}
    14e0:	7a000002 	bvc	14f0 <_Min_Stack_Size+0x12f0>
    14e4:	01000002 	tsteq	r0, r2
    14e8:	02c05000 	sbceq	r5, r0, #0
    14ec:	02c80000 	sbceq	r0, r8, #0
    14f0:	00010000 	andeq	r0, r1, r0
    14f4:	0002ee50 	andeq	lr, r2, r0, asr lr
    14f8:	00030200 	andeq	r0, r3, r0, lsl #4
    14fc:	50000100 	andpl	r0, r0, r0, lsl #2
    1500:	00000312 	andeq	r0, r0, r2, lsl r3
    1504:	0000031c 	andeq	r0, r0, ip, lsl r3
    1508:	2e5a0001 	cdpcs	0, 5, cr0, cr10, cr1, {0}
    150c:	36000003 	strcc	r0, [r0], -r3
    1510:	01000003 	tsteq	r0, r3
    1514:	03365a00 	teqeq	r6, #0, 20
    1518:	03440000 	movteq	r0, #16384	; 0x4000
    151c:	00010000 	andeq	r0, r1, r0
    1520:	0003be50 	andeq	fp, r3, r0, asr lr
    1524:	0003ca00 	andeq	ip, r3, r0, lsl #20
    1528:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1534:	00000250 	andeq	r0, r0, r0, asr r2
    1538:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    153c:	34030006 	strcc	r0, [r3], #-6
    1540:	9f0800a0 	svcls	0x000800a0
    1544:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    1548:	0000031c 	andeq	r0, r0, ip, lsl r3
    154c:	3c030006 	stccc	0, cr0, [r3], {6}
    1550:	9f0800a0 	svcls	0x000800a0
    1554:	00000336 	andeq	r0, r0, r6, lsr r3
    1558:	00000344 	andeq	r0, r0, r4, asr #6
    155c:	3c030006 	stccc	0, cr0, [r3], {6}
    1560:	9f0800a0 	svcls	0x000800a0
    1564:	00000344 	andeq	r0, r0, r4, asr #6
    1568:	000003be 			; <UNDEFINED> instruction: 0x000003be
    156c:	34030006 	strcc	r0, [r3], #-6
    1570:	9f0800a0 	svcls	0x000800a0
    1574:	000003be 			; <UNDEFINED> instruction: 0x000003be
    1578:	000003d2 	ldrdeq	r0, [r0], -r2
    157c:	3c030006 	stccc	0, cr0, [r3], {6}
    1580:	9f0800a0 	svcls	0x000800a0
	...
    1590:	0000005a 	andeq	r0, r0, sl, asr r0
    1594:	5a500001 	bpl	14015a0 <_Min_Stack_Size+0x14013a0>
    1598:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    159c:	01000000 	mrseq	r0, (UNDEF: 0)
    15a0:	00ee5600 	rsceq	r5, lr, r0, lsl #12
    15a4:	01120000 	tsteq	r2, r0
    15a8:	00010000 	andeq	r0, r1, r0
    15ac:	00011250 	andeq	r1, r1, r0, asr r2
    15b0:	00013200 	andeq	r3, r1, r0, lsl #4
    15b4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    15c4:	0000000a 	andeq	r0, r0, sl
    15c8:	0a510001 	beq	14415d4 <_Min_Stack_Size+0x14413d4>
    15cc:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    15d0:	01000000 	mrseq	r0, (UNDEF: 0)
    15d4:	00785400 	rsbseq	r5, r8, r0, lsl #8
    15d8:	00800000 	addeq	r0, r0, r0
    15dc:	00040000 	andeq	r0, r4, r0
    15e0:	9f5101f3 	svcls	0x005101f3
    15e4:	00000080 	andeq	r0, r0, r0, lsl #1
    15e8:	000000d2 	ldrdeq	r0, [r0], -r2
    15ec:	d2540001 	subsle	r0, r4, #1
    15f0:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    15f4:	03000000 	movweq	r0, #0
    15f8:	9f667400 	svcls	0x00667400
    15fc:	000000ee 	andeq	r0, r0, lr, ror #1
    1600:	0000012c 	andeq	r0, r0, ip, lsr #2
    1604:	2c540001 	mrrccs	0, 0, r0, r4, cr1
    1608:	32000001 	andcc	r0, r0, #1
    160c:	04000001 	streq	r0, [r0], #-1
    1610:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1614:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1620:	00001000 	andeq	r1, r0, r0
    1624:	52000100 	andpl	r0, r0, #0, 2
    1628:	00000010 	andeq	r0, r0, r0, lsl r0
    162c:	00000078 	andeq	r0, r0, r8, ror r0
    1630:	78590001 	ldmdavc	r9, {r0}^
    1634:	80000000 	andhi	r0, r0, r0
    1638:	04000000 	streq	r0, [r0], #-0
    163c:	5201f300 	andpl	pc, r1, #0, 6
    1640:	0000809f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1644:	0000ca00 	andeq	ip, r0, r0, lsl #20
    1648:	59000100 	stmdbpl	r0, {r8}
    164c:	000000ca 	andeq	r0, r0, sl, asr #1
    1650:	000000ee 	andeq	r0, r0, lr, ror #1
    1654:	01f30004 	mvnseq	r0, r4
    1658:	00ee9f52 	rsceq	r9, lr, r2, asr pc
    165c:	01240000 			; <UNDEFINED> instruction: 0x01240000
    1660:	00010000 	andeq	r0, r1, r0
    1664:	00012459 	andeq	r2, r1, r9, asr r4
    1668:	00013200 	andeq	r3, r1, r0, lsl #4
    166c:	f3000400 	vshl.u8	d0, d0, d0
    1670:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
    167c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    1680:	01000000 	mrseq	r0, (UNDEF: 0)
    1684:	002e5300 	eoreq	r5, lr, r0, lsl #6
    1688:	01320000 	teqeq	r2, r0
    168c:	00010000 	andeq	r0, r1, r0
    1690:	00000057 	andeq	r0, r0, r7, asr r0
	...
    169c:	00008000 	andeq	r8, r0, r0
    16a0:	91000200 	mrsls	r0, R8_usr
    16a4:	00008000 	andeq	r8, r0, r0
    16a8:	00013200 	andeq	r3, r1, r0, lsl #4
    16ac:	91000200 	mrsls	r0, R8_usr
	...
    16b8:	00008200 	andeq	r8, r0, r0, lsl #4
    16bc:	00008c00 	andeq	r8, r0, r0, lsl #24
    16c0:	30000200 	andcc	r0, r0, r0, lsl #4
    16c4:	00008c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    16c8:	00009e00 	andeq	r9, r0, r0, lsl #28
    16cc:	53000100 	movwpl	r0, #256	; 0x100
    16d0:	0000009e 	muleq	r0, lr, r0
    16d4:	000000a0 	andeq	r0, r0, r0, lsr #1
    16d8:	a0520001 	subsge	r0, r2, r1
    16dc:	a6000000 	strge	r0, [r0], -r0
    16e0:	03000000 	movweq	r0, #0
    16e4:	9f017300 	svcls	0x00017300
    16e8:	000000a6 	andeq	r0, r0, r6, lsr #1
    16ec:	000000af 	andeq	r0, r0, pc, lsr #1
    16f0:	b4530001 	ldrblt	r0, [r3], #-1
    16f4:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    16f8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    16fc:	060c7400 	streq	r7, [ip], -r0, lsl #8
    1700:	1c060079 	stcne	0, cr0, [r6], {121}	; 0x79
    1704:	0000be9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    1708:	0000cc00 	andeq	ip, r0, r0, lsl #24
    170c:	30000200 	andcc	r0, r0, r0, lsl #4
    1710:	0000d09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1714:	0000ee00 	andeq	lr, r0, r0, lsl #28
    1718:	59000100 	stmdbpl	r0, {r8}
    171c:	00000106 	andeq	r0, r0, r6, lsl #2
    1720:	00000110 	andeq	r0, r0, r0, lsl r1
    1724:	9f300002 	svcls	0x00300002
    1728:	00000110 	andeq	r0, r0, r0, lsl r1
    172c:	00000112 	andeq	r0, r0, r2, lsl r1
    1730:	12530001 	subsne	r0, r3, #1
    1734:	24000001 	strcs	r0, [r0], #-1
    1738:	08000001 	stmdaeq	r0, {r0}
    173c:	060c7400 	streq	r7, [ip], -r0, lsl #8
    1740:	1c060079 	stcne	0, cr0, [r6], {121}	; 0x79
    1744:	0001249f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    1748:	00012c00 	andeq	r2, r1, r0, lsl #24
    174c:	59000100 	stmdbpl	r0, {r8}
	...
    1758:	00000046 	andeq	r0, r0, r6, asr #32
    175c:	0000005a 	andeq	r0, r0, sl, asr r0
    1760:	9f300002 	svcls	0x00300002
    1764:	0000005a 	andeq	r0, r0, sl, asr r0
    1768:	00000078 	andeq	r0, r0, r8, ror r0
    176c:	80550001 	subshi	r0, r5, r1
    1770:	82000000 	andhi	r0, r0, #0
    1774:	01000000 	mrseq	r0, (UNDEF: 0)
    1778:	00fa5500 	rscseq	r5, sl, r0, lsl #10
    177c:	01060000 	mrseq	r0, (UNDEF: 6)
    1780:	00020000 	andeq	r0, r2, r0
    1784:	00009f30 	andeq	r9, r0, r0, lsr pc
    1788:	00000000 	andeq	r0, r0, r0
    178c:	00d00000 	sbcseq	r0, r0, r0
    1790:	00d60000 	sbcseq	r0, r6, r0
    1794:	00020000 	andeq	r0, r2, r0
    1798:	00d69f30 	sbcseq	r9, r6, r0, lsr pc
    179c:	00ee0000 	rsceq	r0, lr, r0
    17a0:	00010000 	andeq	r0, r1, r0
    17a4:	00012655 	andeq	r2, r1, r5, asr r6
    17a8:	00012c00 	andeq	r2, r1, r0, lsl #24
    17ac:	30000200 	andcc	r0, r0, r0, lsl #4
    17b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    17b4:	00000000 	andeq	r0, r0, r0
    17b8:	00013400 	andeq	r3, r1, r0, lsl #8
    17bc:	00014c00 	andeq	r4, r1, r0, lsl #24
    17c0:	50000100 	andpl	r0, r0, r0, lsl #2
    17c4:	0000014c 	andeq	r0, r0, ip, asr #2
    17c8:	000003dc 	ldrdeq	r0, [r0], -ip
    17cc:	00560001 	subseq	r0, r6, r1
    17d0:	00000000 	andeq	r0, r0, r0
    17d4:	34000000 	strcc	r0, [r0], #-0
    17d8:	3c000001 	stccc	0, cr0, [r0], {1}
    17dc:	01000001 	tsteq	r0, r1
    17e0:	013c5100 	teqeq	ip, r0, lsl #2
    17e4:	03dc0000 	bicseq	r0, ip, #0
    17e8:	00010000 	andeq	r0, r1, r0
    17ec:	00000054 	andeq	r0, r0, r4, asr r0
    17f0:	00000000 	andeq	r0, r0, r0
    17f4:	00013400 	andeq	r3, r1, r0, lsl #8
    17f8:	00016a00 	andeq	r6, r1, r0, lsl #20
    17fc:	52000100 	andpl	r0, r0, #0, 2
    1800:	0000016a 	andeq	r0, r0, sl, ror #2
    1804:	00000186 	andeq	r0, r0, r6, lsl #3
    1808:	86570001 	ldrbhi	r0, [r7], -r1
    180c:	9c000001 	stcls	0, cr0, [r0], {1}
    1810:	01000001 	tsteq	r0, r1
    1814:	019c5200 	orrseq	r5, ip, r0, lsl #4
    1818:	02040000 	andeq	r0, r4, #0
    181c:	00010000 	andeq	r0, r1, r0
    1820:	00020457 	andeq	r0, r2, r7, asr r4
    1824:	00020800 	andeq	r0, r2, r0, lsl #16
    1828:	52000100 	andpl	r0, r0, #0, 2
    182c:	00000208 	andeq	r0, r0, r8, lsl #4
    1830:	0000028c 	andeq	r0, r0, ip, lsl #5
    1834:	8c570001 	mrrchi	0, 0, r0, r7, cr1
    1838:	96000002 	strls	r0, [r0], -r2
    183c:	01000002 	tsteq	r0, r2
    1840:	02965200 	addseq	r5, r6, #0, 4
    1844:	03060000 	movweq	r0, #24576	; 0x6000
    1848:	00010000 	andeq	r0, r1, r0
    184c:	00030657 	andeq	r0, r3, r7, asr r6
    1850:	00031000 	andeq	r1, r3, r0
    1854:	52000100 	andpl	r0, r0, #0, 2
    1858:	00000310 	andeq	r0, r0, r0, lsl r3
    185c:	0000032a 	andeq	r0, r0, sl, lsr #6
    1860:	2a570001 	bcs	15c186c <_Min_Stack_Size+0x15c166c>
    1864:	2e000003 	cdpcs	0, 0, cr0, cr0, cr3, {0}
    1868:	01000003 	tsteq	r0, r3
    186c:	032e5200 			; <UNDEFINED> instruction: 0x032e5200
    1870:	034e0000 	movteq	r0, #57344	; 0xe000
    1874:	00010000 	andeq	r0, r1, r0
    1878:	00034e57 	andeq	r4, r3, r7, asr lr
    187c:	00036000 	andeq	r6, r3, r0
    1880:	52000100 	andpl	r0, r0, #0, 2
    1884:	00000360 	andeq	r0, r0, r0, ror #6
    1888:	0000037a 	andeq	r0, r0, sl, ror r3
    188c:	7a570001 	bvc	15c1898 <_Min_Stack_Size+0x15c1698>
    1890:	7e000003 	cdpvc	0, 0, cr0, cr0, cr3, {0}
    1894:	01000003 	tsteq	r0, r3
    1898:	037e5200 	cmneq	lr, #0, 4
    189c:	03dc0000 	bicseq	r0, ip, #0
    18a0:	00010000 	andeq	r0, r1, r0
    18a4:	00000057 	andeq	r0, r0, r7, asr r0
    18a8:	00000000 	andeq	r0, r0, r0
    18ac:	00013400 	andeq	r3, r1, r0, lsl #8
    18b0:	00016c00 	andeq	r6, r1, r0, lsl #24
    18b4:	53000100 	movwpl	r0, #256	; 0x100
    18b8:	0000016c 	andeq	r0, r0, ip, ror #2
    18bc:	00000186 	andeq	r0, r0, r6, lsl #3
    18c0:	86580001 	ldrbhi	r0, [r8], -r1
    18c4:	a4000001 	strge	r0, [r0], #-1
    18c8:	01000001 	tsteq	r0, r1
    18cc:	01a45300 			; <UNDEFINED> instruction: 0x01a45300
    18d0:	02040000 	andeq	r0, r4, #0
    18d4:	00010000 	andeq	r0, r1, r0
    18d8:	00020458 	andeq	r0, r2, r8, asr r4
    18dc:	00020600 	andeq	r0, r2, r0, lsl #12
    18e0:	53000100 	movwpl	r0, #256	; 0x100
    18e4:	00000206 	andeq	r0, r0, r6, lsl #4
    18e8:	0000028c 	andeq	r0, r0, ip, lsl #5
    18ec:	8c580001 	mrrchi	0, 0, r0, r8, cr1
    18f0:	98000002 	stmdals	r0, {r1}
    18f4:	01000002 	tsteq	r0, r2
    18f8:	02985300 	addseq	r5, r8, #0, 6
    18fc:	03060000 	movweq	r0, #24576	; 0x6000
    1900:	00010000 	andeq	r0, r1, r0
    1904:	00030658 	andeq	r0, r3, r8, asr r6
    1908:	00031200 	andeq	r1, r3, r0, lsl #4
    190c:	53000100 	movwpl	r0, #256	; 0x100
    1910:	00000312 	andeq	r0, r0, r2, lsl r3
    1914:	0000032a 	andeq	r0, r0, sl, lsr #6
    1918:	2a580001 	bcs	1601924 <_Min_Stack_Size+0x1601724>
    191c:	2c000003 	stccs	0, cr0, [r0], {3}
    1920:	01000003 	tsteq	r0, r3
    1924:	032c5300 			; <UNDEFINED> instruction: 0x032c5300
    1928:	034e0000 	movteq	r0, #57344	; 0xe000
    192c:	00010000 	andeq	r0, r1, r0
    1930:	00034e58 	andeq	r4, r3, r8, asr lr
    1934:	00035000 	andeq	r5, r3, r0
    1938:	53000100 	movwpl	r0, #256	; 0x100
    193c:	00000350 	andeq	r0, r0, r0, asr r3
    1940:	0000035c 	andeq	r0, r0, ip, asr r3
    1944:	5c580001 	mrrcpl	0, 0, r0, r8, cr1
    1948:	5e000003 	cdppl	0, 0, cr0, cr0, cr3, {0}
    194c:	01000003 	tsteq	r0, r3
    1950:	035e5300 	cmpeq	lr, #0, 6
    1954:	037a0000 	cmneq	sl, #0
    1958:	00010000 	andeq	r0, r1, r0
    195c:	00037a58 	andeq	r7, r3, r8, asr sl
    1960:	00037c00 	andeq	r7, r3, r0, lsl #24
    1964:	53000100 	movwpl	r0, #256	; 0x100
    1968:	0000037c 	andeq	r0, r0, ip, ror r3
    196c:	000003dc 	ldrdeq	r0, [r0], -ip
    1970:	00580001 	subseq	r0, r8, r1
    1974:	00000000 	andeq	r0, r0, r0
    1978:	34000000 	strcc	r0, [r0], #-0
    197c:	18000001 	stmdane	r0, {r0}
    1980:	02000002 	andeq	r0, r0, #2
    1984:	8c009100 	stfhid	f1, [r0], {-0}
    1988:	cc000002 	stcgt	0, cr0, [r0], {2}
    198c:	02000003 	andeq	r0, r0, #3
    1990:	ce009100 	mvfgts	f1, f0
    1994:	dc000003 	stcle	0, cr0, [r0], {3}
    1998:	02000003 	andeq	r0, r0, #3
    199c:	00009100 	andeq	r9, r0, r0, lsl #2
    19a0:	00000000 	andeq	r0, r0, r0
    19a4:	ba000000 	blt	19ac <_Min_Stack_Size+0x17ac>
    19a8:	f8000001 			; <UNDEFINED> instruction: 0xf8000001
    19ac:	01000001 	tsteq	r0, r1
    19b0:	02985300 	addseq	r5, r8, #0, 6
    19b4:	02bc0000 	adcseq	r0, ip, #0
    19b8:	00010000 	andeq	r0, r1, r0
    19bc:	0002bc53 	andeq	fp, r2, r3, asr ip
    19c0:	0002d200 	andeq	sp, r2, r0, lsl #4
    19c4:	52000100 	andpl	r0, r0, #0, 2
    19c8:	000002ea 	andeq	r0, r0, sl, ror #5
    19cc:	000002f8 	strdeq	r0, [r0], -r8
    19d0:	f8530001 			; <UNDEFINED> instruction: 0xf8530001
    19d4:	06000002 	streq	r0, [r0], -r2
    19d8:	02000003 	andeq	r0, r0, #3
    19dc:	1e9f3000 	cdpne	0, 9, cr3, cr15, cr0, {0}
    19e0:	2a000003 	bcs	19f4 <_Min_Stack_Size+0x17f4>
    19e4:	01000003 	tsteq	r0, r3
    19e8:	036a5300 	cmneq	sl, #0, 6
    19ec:	037a0000 	cmneq	sl, #0
    19f0:	00010000 	andeq	r0, r1, r0
    19f4:	00000053 	andeq	r0, r0, r3, asr r0
    19f8:	00000000 	andeq	r0, r0, r0
    19fc:	0001ba00 	andeq	fp, r1, r0, lsl #20
    1a00:	0001d400 	andeq	sp, r1, r0, lsl #8
    1a04:	40000200 	andmi	r0, r0, r0, lsl #4
    1a08:	0001d49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    1a0c:	0001f800 	andeq	pc, r1, r0, lsl #16
    1a10:	51000100 	mrspl	r0, (UNDEF: 16)
    1a14:	000002a8 	andeq	r0, r0, r8, lsr #5
    1a18:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    1a1c:	9f3a0002 	svcls	0x003a0002
    1a20:	000002ea 	andeq	r0, r0, sl, ror #5
    1a24:	000002ee 	andeq	r0, r0, lr, ror #5
    1a28:	9f400002 	svcls	0x00400002
    1a2c:	000002ee 	andeq	r0, r0, lr, ror #5
    1a30:	000002f4 	strdeq	r0, [r0], -r4
    1a34:	9f3a0002 	svcls	0x003a0002
	...
    1a40:	0000022e 	andeq	r0, r0, lr, lsr #4
    1a44:	00000230 	andeq	r0, r0, r0, lsr r2
    1a48:	30500001 	subscc	r0, r0, r1
    1a4c:	3a000002 	bcc	1a5c <_Min_Stack_Size+0x185c>
    1a50:	03000002 	movweq	r0, #2
    1a54:	9f7f7000 	svcls	0x007f7000
	...
    1a60:	0000014a 	andeq	r0, r0, sl, asr #2
    1a64:	000001f8 	strdeq	r0, [r0], -r8
    1a68:	f85c0001 			; <UNDEFINED> instruction: 0xf85c0001
    1a6c:	04000001 	streq	r0, [r0], #-1
    1a70:	01000002 	tsteq	r0, r2
    1a74:	02045500 	andeq	r5, r4, #0, 10
    1a78:	021e0000 	andseq	r0, lr, #0
    1a7c:	00010000 	andeq	r0, r1, r0
    1a80:	00021e5c 	andeq	r1, r2, ip, asr lr
    1a84:	00025800 	andeq	r5, r2, r0, lsl #16
    1a88:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    1a8c:	0000028c 	andeq	r0, r0, ip, lsl #5
    1a90:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    1a94:	b85c0001 	ldmdalt	ip, {r0}^
    1a98:	ca000002 	bgt	1aa8 <_Min_Stack_Size+0x18a8>
    1a9c:	01000002 	tsteq	r0, r2
    1aa0:	02ca5500 	sbceq	r5, sl, #0, 10
    1aa4:	02ce0000 	sbceq	r0, lr, #0
    1aa8:	00030000 	andeq	r0, r3, r0
    1aac:	ce9f0175 	mrcgt	1, 4, r0, cr15, cr5, {3}
    1ab0:	e0000002 	and	r0, r0, r2
    1ab4:	01000002 	tsteq	r0, r2
    1ab8:	02e05500 	rsceq	r5, r0, #0, 10
    1abc:	02e80000 	rsceq	r0, r8, #0
    1ac0:	00030000 	andeq	r0, r3, r0
    1ac4:	e89f7f75 	ldm	pc, {r0, r2, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    1ac8:	ea000002 	b	1ad8 <_Min_Stack_Size+0x18d8>
    1acc:	01000002 	tsteq	r0, r2
    1ad0:	02ea5500 	rsceq	r5, sl, #0, 10
    1ad4:	03000000 	movweq	r0, #0
    1ad8:	00010000 	andeq	r0, r1, r0
    1adc:	0003005c 	andeq	r0, r3, ip, asr r0
    1ae0:	00030600 	andeq	r0, r3, r0, lsl #12
    1ae4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    1ae8:	00000306 	andeq	r0, r0, r6, lsl #6
    1aec:	00000334 	andeq	r0, r0, r4, lsr r3
    1af0:	345c0001 	ldrbcc	r0, [ip], #-1
    1af4:	4e000003 	cdpmi	0, 0, cr0, cr0, cr3, {0}
    1af8:	01000003 	tsteq	r0, r3
    1afc:	034e5500 	movteq	r5, #58624	; 0xe500
    1b00:	035a0000 	cmpeq	sl, #0
    1b04:	00010000 	andeq	r0, r1, r0
    1b08:	00035a5c 	andeq	r5, r3, ip, asr sl
    1b0c:	00035c00 	andeq	r5, r3, r0, lsl #24
    1b10:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    1b14:	0000035c 	andeq	r0, r0, ip, asr r3
    1b18:	00000386 	andeq	r0, r0, r6, lsl #7
    1b1c:	865c0001 	ldrbhi	r0, [ip], -r1
    1b20:	90000003 	andls	r0, r0, r3
    1b24:	01000003 	tsteq	r0, r3
    1b28:	03905500 	orrseq	r5, r0, #0, 10
    1b2c:	03ce0000 	biceq	r0, lr, #0
    1b30:	00010000 	andeq	r0, r1, r0
    1b34:	0003ce5c 	andeq	ip, r3, ip, asr lr
    1b38:	0003dc00 	andeq	sp, r3, r0, lsl #24
    1b3c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    1b48:	0000014a 	andeq	r0, r0, sl, asr #2
    1b4c:	00000172 	andeq	r0, r0, r2, ror r1
    1b50:	48030006 	stmdami	r3, {r1, r2}
    1b54:	9f0800a0 	svcls	0x000800a0
    1b58:	00000172 	andeq	r0, r0, r2, ror r1
    1b5c:	00000186 	andeq	r0, r0, r6, lsl #3
    1b60:	865e0001 	ldrbhi	r0, [lr], -r1
    1b64:	a8000001 	stmdage	r0, {r0}
    1b68:	06000001 	streq	r0, [r0], -r1
    1b6c:	a0480300 	subge	r0, r8, r0, lsl #6
    1b70:	a89f0800 	ldmge	pc, {fp}	; <UNPREDICTABLE>
    1b74:	b0000001 	andlt	r0, r0, r1
    1b78:	06000001 	streq	r0, [r0], -r1
    1b7c:	a05c0300 	subsge	r0, ip, r0, lsl #6
    1b80:	b09f0800 	addslt	r0, pc, r0, lsl #16
    1b84:	f8000001 			; <UNDEFINED> instruction: 0xf8000001
    1b88:	01000001 	tsteq	r0, r1
    1b8c:	02045e00 	andeq	r5, r4, #0, 28
    1b90:	021e0000 	andseq	r0, lr, #0
    1b94:	00060000 	andeq	r0, r6, r0
    1b98:	00a04803 	adceq	r4, r0, r3, lsl #16
    1b9c:	028c9f08 	addeq	r9, ip, #8, 30
    1ba0:	02b60000 	adcseq	r0, r6, #0
    1ba4:	00060000 	andeq	r0, r6, r0
    1ba8:	00a04803 	adceq	r4, r0, r3, lsl #16
    1bac:	02ea9f08 	rsceq	r9, sl, #8, 30
    1bb0:	02ee0000 	rsceq	r0, lr, #0
    1bb4:	00010000 	andeq	r0, r1, r0
    1bb8:	0002ee5e 	andeq	lr, r2, lr, asr lr
    1bbc:	0002f400 	andeq	pc, r2, r0, lsl #8
    1bc0:	03000600 	movweq	r0, #1536	; 0x600
    1bc4:	0800a048 	stmdaeq	r0, {r3, r6, sp, pc}
    1bc8:	0003069f 	muleq	r3, pc, r6	; <UNPREDICTABLE>
    1bcc:	0003dc00 	andeq	sp, r3, r0, lsl #24
    1bd0:	03000600 	movweq	r0, #1536	; 0x600
    1bd4:	0800a048 	stmdaeq	r0, {r3, r6, sp, pc}
    1bd8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1bdc:	00000000 	andeq	r0, r0, r0
    1be0:	00033c00 	andeq	r3, r3, r0, lsl #24
    1be4:	00034200 	andeq	r4, r3, r0, lsl #4
    1be8:	50000100 	andpl	r0, r0, r0, lsl #2
    1bec:	000003ce 	andeq	r0, r0, lr, asr #7
    1bf0:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1bf4:	00500001 	subseq	r0, r0, r1
    1bf8:	00000000 	andeq	r0, r0, r0
    1bfc:	4c000000 	stcmi	0, cr0, [r0], {-0}
    1c00:	5a000002 	bpl	1c10 <_Min_Stack_Size+0x1a10>
    1c04:	02000002 	andeq	r0, r0, #2
    1c08:	5a9f3000 	bpl	fe7cdc10 <BootRAM+0xd73e3b1>
    1c0c:	76000002 	strvc	r0, [r0], -r2
    1c10:	01000002 	tsteq	r0, r2
    1c14:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    1c20:	000a0000 	andeq	r0, sl, r0
    1c24:	00010000 	andeq	r0, r1, r0
    1c28:	00000a50 	andeq	r0, r0, r0, asr sl
    1c2c:	00002000 	andeq	r2, r0, r0
    1c30:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    1c34:	00000020 	andeq	r0, r0, r0, lsr #32
    1c38:	00000024 	andeq	r0, r0, r4, lsr #32
    1c3c:	01f30004 	mvnseq	r0, r4
    1c40:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    1c4c:	000f0000 	andeq	r0, pc, r0
    1c50:	00010000 	andeq	r0, r1, r0
    1c54:	00000f51 	andeq	r0, r0, r1, asr pc
    1c58:	00002400 	andeq	r2, r0, r0, lsl #8
    1c5c:	f3000400 	vshl.u8	d0, d0, d0
    1c60:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    1c6c:	16000000 	strne	r0, [r0], -r0
    1c70:	01000000 	mrseq	r0, (UNDEF: 0)
    1c74:	00165000 	andseq	r5, r6, r0
    1c78:	00840000 	addeq	r0, r4, r0
    1c7c:	00040000 	andeq	r0, r4, r0
    1c80:	9f5001f3 	svcls	0x005001f3
    1c84:	00000084 	andeq	r0, r0, r4, lsl #1
    1c88:	00000088 	andeq	r0, r0, r8, lsl #1
    1c8c:	88500001 	ldmdahi	r0, {r0}^
    1c90:	8c000000 	stchi	0, cr0, [r0], {-0}
    1c94:	04000000 	streq	r0, [r0], #-0
    1c98:	5001f300 	andpl	pc, r1, r0, lsl #6
    1c9c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1ca8:	00003000 	andeq	r3, r0, r0
    1cac:	51000100 	mrspl	r0, (UNDEF: 16)
    1cb0:	00000030 	andeq	r0, r0, r0, lsr r0
    1cb4:	00000054 	andeq	r0, r0, r4, asr r0
    1cb8:	01f30004 	mvnseq	r0, r4
    1cbc:	00549f51 	subseq	r9, r4, r1, asr pc
    1cc0:	00620000 	rsbeq	r0, r2, r0
    1cc4:	00010000 	andeq	r0, r1, r0
    1cc8:	00006251 	andeq	r6, r0, r1, asr r2
    1ccc:	00008400 	andeq	r8, r0, r0, lsl #8
    1cd0:	f3000400 	vshl.u8	d0, d0, d0
    1cd4:	849f5101 	ldrhi	r5, [pc], #257	; 1cdc <_Min_Stack_Size+0x1adc>
    1cd8:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    1cdc:	01000000 	mrseq	r0, (UNDEF: 0)
    1ce0:	00885100 	addeq	r5, r8, r0, lsl #2
    1ce4:	008c0000 	addeq	r0, ip, r0
    1ce8:	00040000 	andeq	r0, r4, r0
    1cec:	9f5101f3 	svcls	0x005101f3
	...
    1cfc:	0000000a 	andeq	r0, r0, sl
    1d00:	0a520001 	beq	1481d0c <_Min_Stack_Size+0x1481b0c>
    1d04:	16000000 	strne	r0, [r0], -r0
    1d08:	01000000 	mrseq	r0, (UNDEF: 0)
    1d0c:	00625300 	rsbeq	r5, r2, r0, lsl #6
    1d10:	007c0000 	rsbseq	r0, ip, r0
    1d14:	00030000 	andeq	r0, r3, r0
    1d18:	7c9f7c73 	ldcvc	12, cr7, [pc], {115}	; 0x73
    1d1c:	84000000 	strhi	r0, [r0], #-0
    1d20:	01000000 	mrseq	r0, (UNDEF: 0)
    1d24:	00845300 	addeq	r5, r4, r0, lsl #6
    1d28:	00880000 	addeq	r0, r8, r0
    1d2c:	00010000 	andeq	r0, r1, r0
    1d30:	00000052 	andeq	r0, r0, r2, asr r0
	...
    1d3c:	00002000 	andeq	r2, r0, r0
    1d40:	50000100 	andpl	r0, r0, r0, lsl #2
    1d44:	00000020 	andeq	r0, r0, r0, lsr #32
    1d48:	00000026 	andeq	r0, r0, r6, lsr #32
    1d4c:	7f720003 	svcvc	0x00720003
    1d50:	0000269f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    1d54:	00002a00 	andeq	r2, r0, r0, lsl #20
    1d58:	52000100 	andpl	r0, r0, #0, 2
    1d5c:	0000002a 	andeq	r0, r0, sl, lsr #32
    1d60:	00000044 	andeq	r0, r0, r4, asr #32
    1d64:	44500001 	ldrbmi	r0, [r0], #-1
    1d68:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    1d6c:	03000000 	movweq	r0, #0
    1d70:	9f7f7200 	svcls	0x007f7200
    1d74:	00000048 	andeq	r0, r0, r8, asr #32
    1d78:	0000004c 	andeq	r0, r0, ip, asr #32
    1d7c:	4c520001 	mrrcmi	0, 0, r0, r2, cr1
    1d80:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    1d84:	01000000 	mrseq	r0, (UNDEF: 0)
    1d88:	00545000 	subseq	r5, r4, r0
    1d8c:	007c0000 	rsbseq	r0, ip, r0
    1d90:	00010000 	andeq	r0, r1, r0
    1d94:	00007c50 	andeq	r7, r0, r0, asr ip
    1d98:	00008400 	andeq	r8, r0, r0, lsl #8
    1d9c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1da0:	00000084 	andeq	r0, r0, r4, lsl #1
    1da4:	0000008a 	andeq	r0, r0, sl, lsl #1
    1da8:	00500001 	subseq	r0, r0, r1
    1dac:	00000000 	andeq	r0, r0, r0
    1db0:	06000000 	streq	r0, [r0], -r0
    1db4:	52000000 	andpl	r0, r0, #0
    1db8:	01000000 	mrseq	r0, (UNDEF: 0)
    1dbc:	00525500 	subseq	r5, r2, r0, lsl #10
    1dc0:	00540000 	subseq	r0, r4, r0
    1dc4:	00040000 	andeq	r0, r4, r0
    1dc8:	9f5101f3 	svcls	0x005101f3
    1dcc:	00000054 	andeq	r0, r0, r4, asr r0
    1dd0:	0000008c 	andeq	r0, r0, ip, lsl #1
    1dd4:	00550001 	subseq	r0, r5, r1
    1dd8:	00000000 	andeq	r0, r0, r0
    1ddc:	54000000 	strpl	r0, [r0], #-0
    1de0:	7c000000 	stcvc	0, cr0, [r0], {-0}
    1de4:	01000000 	mrseq	r0, (UNDEF: 0)
    1de8:	007c5000 	rsbseq	r5, ip, r0
    1dec:	00840000 	addeq	r0, r4, r0
    1df0:	00010000 	andeq	r0, r1, r0
    1df4:	00000054 	andeq	r0, r0, r4, asr r0
    1df8:	00000000 	andeq	r0, r0, r0
    1dfc:	00005e00 	andeq	r5, r0, r0, lsl #28
    1e00:	00008400 	andeq	r8, r0, r0, lsl #8
    1e04:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    1e10:	00000062 	andeq	r0, r0, r2, rrx
    1e14:	00000084 	andeq	r0, r0, r4, lsl #1
    1e18:	20080003 	andcs	r0, r8, r3
    1e1c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1e28:	00000e00 	andeq	r0, r0, r0, lsl #28
    1e2c:	51000100 	mrspl	r0, (UNDEF: 16)
    1e30:	0000000e 	andeq	r0, r0, lr
    1e34:	00000022 	andeq	r0, r0, r2, lsr #32
    1e38:	01f30004 	mvnseq	r0, r4
    1e3c:	00229f51 	eoreq	r9, r2, r1, asr pc
    1e40:	007a0000 	rsbseq	r0, sl, r0
    1e44:	00010000 	andeq	r0, r1, r0
    1e48:	00007a51 	andeq	r7, r0, r1, asr sl
    1e4c:	0000b800 	andeq	fp, r0, r0, lsl #16
    1e50:	f3000400 	vshl.u8	d0, d0, d0
    1e54:	b89f5101 	ldmlt	pc, {r0, r8, ip, lr}	; <UNPREDICTABLE>
    1e58:	c0000000 	andgt	r0, r0, r0
    1e5c:	01000000 	mrseq	r0, (UNDEF: 0)
    1e60:	00c05100 	sbceq	r5, r0, r0, lsl #2
    1e64:	00c60000 	sbceq	r0, r6, r0
    1e68:	00040000 	andeq	r0, r4, r0
    1e6c:	9f5101f3 	svcls	0x005101f3
	...
    1e7c:	0000000e 	andeq	r0, r0, lr
    1e80:	0e520001 	cdpeq	0, 5, cr0, cr2, cr1, {0}
    1e84:	14000000 	strne	r0, [r0], #-0
    1e88:	03000000 	movweq	r0, #0
    1e8c:	9f7f7200 	svcls	0x007f7200
    1e90:	00000014 	andeq	r0, r0, r4, lsl r0
    1e94:	00000022 	andeq	r0, r0, r2, lsr #32
    1e98:	0073000b 	rsbseq	r0, r3, fp
    1e9c:	22007320 	andcs	r7, r0, #32, 6	; 0x80000000
    1ea0:	225201f3 	subscs	r0, r2, #-1073741764	; 0xc000003c
    1ea4:	0000229f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    1ea8:	00003800 	andeq	r3, r0, r0, lsl #16
    1eac:	52000100 	andpl	r0, r0, #0, 2
    1eb0:	00000038 	andeq	r0, r0, r8, lsr r0
    1eb4:	0000003e 	andeq	r0, r0, lr, lsr r0
    1eb8:	3e550001 	cdpcc	0, 5, cr0, cr5, cr1, {0}
    1ebc:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    1ec0:	03000000 	movweq	r0, #0
    1ec4:	9f107500 	svcls	0x00107500
    1ec8:	00000058 	andeq	r0, r0, r8, asr r0
    1ecc:	0000007a 	andeq	r0, r0, sl, ror r0
    1ed0:	7a550001 	bvc	1541edc <_Min_Stack_Size+0x1541cdc>
    1ed4:	84000000 	strhi	r0, [r0], #-0
    1ed8:	01000000 	mrseq	r0, (UNDEF: 0)
    1edc:	00845e00 	addeq	r5, r4, r0, lsl #28
    1ee0:	00960000 	addseq	r0, r6, r0
    1ee4:	00010000 	andeq	r0, r1, r0
    1ee8:	0000a454 	andeq	sl, r0, r4, asr r4
    1eec:	0000a600 	andeq	sl, r0, r0, lsl #12
    1ef0:	72000300 	andvc	r0, r0, #0, 6
    1ef4:	00b89f7f 	adcseq	r9, r8, pc, ror pc
    1ef8:	00c00000 	sbceq	r0, r0, r0
    1efc:	00010000 	andeq	r0, r1, r0
    1f00:	0000c052 	andeq	ip, r0, r2, asr r0
    1f04:	0000c200 	andeq	ip, r0, r0, lsl #4
    1f08:	72000300 	andvc	r0, r0, #0, 6
    1f0c:	00c29f7f 	sbceq	r9, r2, pc, ror pc
    1f10:	00c60000 	sbceq	r0, r6, r0
    1f14:	00010000 	andeq	r0, r1, r0
    1f18:	0000005e 	andeq	r0, r0, lr, asr r0
	...
    1f24:	00000e00 	andeq	r0, r0, r0, lsl #28
    1f28:	50000100 	andpl	r0, r0, r0, lsl #2
    1f2c:	0000000e 	andeq	r0, r0, lr
    1f30:	00000014 	andeq	r0, r0, r4, lsl r0
    1f34:	14510001 	ldrbne	r0, [r1], #-1
    1f38:	22000000 	andcs	r0, r0, #0
    1f3c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1f40:	f3007000 	vhadd.u8	d7, d0, d0
    1f44:	31225201 			; <UNDEFINED> instruction: 0x31225201
    1f48:	00229f1c 	eoreq	r9, r2, ip, lsl pc
    1f4c:	00a40000 	adceq	r0, r4, r0
    1f50:	00010000 	andeq	r0, r1, r0
    1f54:	0000a450 	andeq	sl, r0, r0, asr r4
    1f58:	0000a800 	andeq	sl, r0, r0, lsl #16
    1f5c:	53000100 	movwpl	r0, #256	; 0x100
    1f60:	000000a8 	andeq	r0, r0, r8, lsr #1
    1f64:	000000aa 	andeq	r0, r0, sl, lsr #1
    1f68:	01730003 	cmneq	r3, r3
    1f6c:	0000b89f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    1f70:	0000c000 	andeq	ip, r0, r0
    1f74:	50000100 	andpl	r0, r0, r0, lsl #2
    1f78:	000000c0 	andeq	r0, r0, r0, asr #1
    1f7c:	000000c2 	andeq	r0, r0, r2, asr #1
    1f80:	c2530001 	subsgt	r0, r3, #1
    1f84:	c6000000 	strgt	r0, [r0], -r0
    1f88:	01000000 	mrseq	r0, (UNDEF: 0)
    1f8c:	00005000 	andeq	r5, r0, r0
	...
    1f98:	000c0000 	andeq	r0, ip, r0
    1f9c:	00010000 	andeq	r0, r1, r0
    1fa0:	00000c51 	andeq	r0, r0, r1, asr ip
    1fa4:	00001800 	andeq	r1, r0, r0, lsl #16
    1fa8:	53000100 	movwpl	r0, #256	; 0x100
    1fac:	00000018 	andeq	r0, r0, r8, lsl r0
    1fb0:	0000001e 	andeq	r0, r0, lr, lsl r0
    1fb4:	01730003 	cmneq	r3, r3
    1fb8:	00001e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    1fbc:	00002200 	andeq	r2, r0, r0, lsl #4
    1fc0:	53000100 	movwpl	r0, #256	; 0x100
    1fc4:	00000022 	andeq	r0, r0, r2, lsr #32
    1fc8:	0000007a 	andeq	r0, r0, sl, ror r0
    1fcc:	7a510001 	bvc	1441fd8 <_Min_Stack_Size+0x1441dd8>
    1fd0:	a4000000 	strge	r0, [r0], #-0
    1fd4:	04000000 	streq	r0, [r0], #-0
    1fd8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1fdc:	0000a49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    1fe0:	0000ae00 	andeq	sl, r0, r0, lsl #28
    1fe4:	51000100 	mrspl	r0, (UNDEF: 16)
    1fe8:	000000ae 	andeq	r0, r0, lr, lsr #1
    1fec:	000000b4 	strheq	r0, [r0], -r4
    1ff0:	7f710003 	svcvc	0x00710003
    1ff4:	0000b49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    1ff8:	0000b600 	andeq	fp, r0, r0, lsl #12
    1ffc:	51000100 	mrspl	r0, (UNDEF: 16)
    2000:	000000b8 	strheq	r0, [r0], -r8
    2004:	000000c2 	andeq	r0, r0, r2, asr #1
    2008:	c2510001 	subsgt	r0, r1, #1
    200c:	c6000000 	strgt	r0, [r0], -r0
    2010:	04000000 	streq	r0, [r0], #-0
    2014:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2018:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    201c:	00000000 	andeq	r0, r0, r0
    2020:	00007a00 	andeq	r7, r0, r0, lsl #20
    2024:	00007c00 	andeq	r7, r0, r0, lsl #24
    2028:	70000600 	andvc	r0, r0, r0, lsl #12
    202c:	22007300 	andcs	r7, r0, #0, 6
    2030:	00007c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    2034:	00008400 	andeq	r8, r0, r0, lsl #8
    2038:	53000100 	movwpl	r0, #256	; 0x100
    203c:	000000c2 	andeq	r0, r0, r2, asr #1
    2040:	000000c6 	andeq	r0, r0, r6, asr #1
    2044:	00530001 	subseq	r0, r3, r1
    2048:	00000000 	andeq	r0, r0, r0
    204c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2050:	42000000 	andmi	r0, r0, #0
    2054:	03000000 	movweq	r0, #0
    2058:	9f747300 	svcls	0x00747300
    205c:	00000042 	andeq	r0, r0, r2, asr #32
    2060:	0000004c 	andeq	r0, r0, ip, asr #32
    2064:	78730003 	ldmdavc	r3!, {r0, r1}^
    2068:	00004c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    206c:	00005800 	andeq	r5, r0, r0, lsl #16
    2070:	73000300 	movwvc	r0, #768	; 0x300
    2074:	00589f7c 	subseq	r9, r8, ip, ror pc
    2078:	00600000 	rsbeq	r0, r0, r0
    207c:	00010000 	andeq	r0, r1, r0
    2080:	00006053 	andeq	r6, r0, r3, asr r0
    2084:	00006a00 	andeq	r6, r0, r0, lsl #20
    2088:	73000300 	movwvc	r0, #768	; 0x300
    208c:	007a9f70 	rsbseq	r9, sl, r0, ror pc
    2090:	00840000 	addeq	r0, r4, r0
    2094:	00010000 	andeq	r0, r1, r0
    2098:	00008451 	andeq	r8, r0, r1, asr r4
    209c:	00008800 	andeq	r8, r0, r0, lsl #16
    20a0:	56000100 	strpl	r0, [r0], -r0, lsl #2
    20a4:	00000088 	andeq	r0, r0, r8, lsl #1
    20a8:	0000008a 	andeq	r0, r0, sl, lsl #1
    20ac:	7c760003 	ldclvc	0, cr0, [r6], #-12
    20b0:	00008a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    20b4:	0000a400 	andeq	sl, r0, r0, lsl #8
    20b8:	56000100 	strpl	r0, [r0], -r0, lsl #2
    20bc:	000000c2 	andeq	r0, r0, r2, asr #1
    20c0:	000000c6 	andeq	r0, r0, r6, asr #1
    20c4:	00510001 	subseq	r0, r1, r1
	...
    20d0:	0f000000 	svceq	0x00000000
    20d4:	01000000 	mrseq	r0, (UNDEF: 0)
    20d8:	000f5000 	andeq	r5, pc, r0
    20dc:	00380000 	eorseq	r0, r8, r0
    20e0:	00010000 	andeq	r0, r1, r0
    20e4:	00003856 	andeq	r3, r0, r6, asr r8
    20e8:	00003b00 	andeq	r3, r0, r0, lsl #22
    20ec:	50000100 	andpl	r0, r0, r0, lsl #2
    20f0:	0000003b 	andeq	r0, r0, fp, lsr r0
    20f4:	00000042 	andeq	r0, r0, r2, asr #32
    20f8:	42560001 	subsmi	r0, r6, #1
    20fc:	47000000 	strmi	r0, [r0, -r0]
    2100:	01000000 	mrseq	r0, (UNDEF: 0)
    2104:	00475000 	subeq	r5, r7, r0
    2108:	00480000 	subeq	r0, r8, r0
    210c:	00040000 	andeq	r0, r4, r0
    2110:	9f5001f3 	svcls	0x005001f3
	...
    2120:	0000000f 	andeq	r0, r0, pc
    2124:	0f510001 	svceq	0x00510001
    2128:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    212c:	01000000 	mrseq	r0, (UNDEF: 0)
    2130:	00385400 	eorseq	r5, r8, r0, lsl #8
    2134:	003b0000 	eorseq	r0, fp, r0
    2138:	00010000 	andeq	r0, r1, r0
    213c:	00003b51 	andeq	r3, r0, r1, asr fp
    2140:	00004000 	andeq	r4, r0, r0
    2144:	f3000400 	vshl.u8	d0, d0, d0
    2148:	409f5101 	addsmi	r5, pc, r1, lsl #2
    214c:	42000000 	andmi	r0, r0, #0
    2150:	01000000 	mrseq	r0, (UNDEF: 0)
    2154:	00425400 	subeq	r5, r2, r0, lsl #8
    2158:	00440000 	subeq	r0, r4, r0
    215c:	00010000 	andeq	r0, r1, r0
    2160:	00004451 	andeq	r4, r0, r1, asr r4
    2164:	00004800 	andeq	r4, r0, r0, lsl #16
    2168:	f3000400 	vshl.u8	d0, d0, d0
    216c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    2178:	0f000000 	svceq	0x00000000
    217c:	01000000 	mrseq	r0, (UNDEF: 0)
    2180:	000f5200 	andeq	r5, pc, r0, lsl #4
    2184:	00380000 	eorseq	r0, r8, r0
    2188:	00010000 	andeq	r0, r1, r0
    218c:	00003855 	andeq	r3, r0, r5, asr r8
    2190:	00003b00 	andeq	r3, r0, r0, lsl #22
    2194:	52000100 	andpl	r0, r0, #0, 2
    2198:	0000003b 	andeq	r0, r0, fp, lsr r0
    219c:	00000042 	andeq	r0, r0, r2, asr #32
    21a0:	42550001 	subsmi	r0, r5, #1
    21a4:	47000000 	strmi	r0, [r0, -r0]
    21a8:	01000000 	mrseq	r0, (UNDEF: 0)
    21ac:	00475200 	subeq	r5, r7, r0, lsl #4
    21b0:	00480000 	subeq	r0, r8, r0
    21b4:	00040000 	andeq	r0, r4, r0
    21b8:	9f5201f3 	svcls	0x005201f3
	...
    21c4:	00000020 	andeq	r0, r0, r0, lsr #32
    21c8:	0000002b 	andeq	r0, r0, fp, lsr #32
    21cc:	2b500001 	blcs	14021d8 <_Min_Stack_Size+0x1401fd8>
    21d0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    21d4:	01000000 	mrseq	r0, (UNDEF: 0)
    21d8:	00405700 	subeq	r5, r0, r0, lsl #14
    21dc:	00420000 	subeq	r0, r2, r0
    21e0:	00010000 	andeq	r0, r1, r0
    21e4:	00000050 	andeq	r0, r0, r0, asr r0
	...
    21f0:	00000d00 	andeq	r0, r0, r0, lsl #26
    21f4:	50000100 	andpl	r0, r0, r0, lsl #2
    21f8:	0000000d 	andeq	r0, r0, sp
    21fc:	00000016 	andeq	r0, r0, r6, lsl r0
    2200:	16550001 	ldrbne	r0, [r5], -r1
    2204:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2208:	01000000 	mrseq	r0, (UNDEF: 0)
    220c:	00195000 	andseq	r5, r9, r0
    2210:	001a0000 	andseq	r0, sl, r0
    2214:	00040000 	andeq	r0, r4, r0
    2218:	9f5001f3 	svcls	0x005001f3
	...
    2228:	00000006 	andeq	r0, r0, r6
    222c:	06510001 	ldrbeq	r0, [r1], -r1
    2230:	16000000 	strne	r0, [r0], -r0
    2234:	01000000 	mrseq	r0, (UNDEF: 0)
    2238:	00165400 	andseq	r5, r6, r0, lsl #8
    223c:	00190000 	andseq	r0, r9, r0
    2240:	00010000 	andeq	r0, r1, r0
    2244:	00001951 	andeq	r1, r0, r1, asr r9
    2248:	00001a00 	andeq	r1, r0, r0, lsl #20
    224c:	f3000400 	vshl.u8	d0, d0, d0
    2250:	009f5101 	addseq	r5, pc, r1, lsl #2
    2254:	00000000 	andeq	r0, r0, r0
    2258:	1c000000 	stcne	0, cr0, [r0], {-0}
    225c:	34000000 	strcc	r0, [r0], #-0
    2260:	01000000 	mrseq	r0, (UNDEF: 0)
    2264:	00345000 	eorseq	r5, r4, r0
    2268:	00cc0000 	sbceq	r0, ip, r0
    226c:	00010000 	andeq	r0, r1, r0
    2270:	0000cc55 	andeq	ip, r0, r5, asr ip
    2274:	0000cf00 	andeq	ip, r0, r0, lsl #30
    2278:	50000100 	andpl	r0, r0, r0, lsl #2
    227c:	000000cf 	andeq	r0, r0, pc, asr #1
    2280:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2284:	01f30004 	mvnseq	r0, r4
    2288:	00d09f50 	sbcseq	r9, r0, r0, asr pc
    228c:	00e00000 	rsceq	r0, r0, r0
    2290:	00010000 	andeq	r0, r1, r0
    2294:	00000050 	andeq	r0, r0, r0, asr r0
    2298:	00000000 	andeq	r0, r0, r0
    229c:	00003800 	andeq	r3, r0, r0, lsl #16
    22a0:	00003f00 	andeq	r3, r0, r0, lsl #30
    22a4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    22b0:	00000036 	andeq	r0, r0, r6, lsr r0
    22b4:	0000003a 	andeq	r0, r0, sl, lsr r0
    22b8:	3a510001 	bcc	14422c4 <_Min_Stack_Size+0x14420c4>
    22bc:	4a000000 	bmi	22c4 <_Min_Stack_Size+0x20c4>
    22c0:	01000000 	mrseq	r0, (UNDEF: 0)
    22c4:	004a5400 	subeq	r5, sl, r0, lsl #8
    22c8:	00520000 	subseq	r0, r2, r0
    22cc:	00010000 	andeq	r0, r1, r0
    22d0:	00000051 	andeq	r0, r0, r1, asr r0
	...
    22dc:	00000400 	andeq	r0, r0, r0, lsl #8
    22e0:	50000100 	andpl	r0, r0, r0, lsl #2
    22e4:	00000004 	andeq	r0, r0, r4
    22e8:	00000014 	andeq	r0, r0, r4, lsl r0
    22ec:	01f30004 	mvnseq	r0, r4
    22f0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    22fc:	000a0000 	andeq	r0, sl, r0
    2300:	00010000 	andeq	r0, r1, r0
    2304:	00000a51 	andeq	r0, r0, r1, asr sl
    2308:	00001400 	andeq	r1, r0, r0, lsl #8
    230c:	f3000400 	vshl.u8	d0, d0, d0
    2310:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    231c:	06000000 	streq	r0, [r0], -r0
    2320:	03000000 	movweq	r0, #0
    2324:	9f7c7100 	svcls	0x007c7100
    2328:	00000006 	andeq	r0, r0, r6
    232c:	0000000a 	andeq	r0, r0, sl
    2330:	00700008 	rsbseq	r0, r0, r8
    2334:	34220071 	strtcc	r0, [r2], #-113	; 0xffffff8f
    2338:	000a9f1c 	andeq	r9, sl, ip, lsl pc
    233c:	00100000 	andseq	r0, r0, r0
    2340:	00090000 	andeq	r0, r9, r0
    2344:	705101f3 	ldrshvc	r0, [r1], #-19	; 0xffffffed
    2348:	1c342200 	lfmne	f2, 4, [r4], #-0
    234c:	0000109f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2350:	00001400 	andeq	r1, r0, r0, lsl #8
    2354:	f3000d00 	vpadd.f32	d0, d0, d0
    2358:	01f35101 	mvnseq	r5, r1, lsl #2
    235c:	061c3451 			; <UNDEFINED> instruction: 0x061c3451
    2360:	9f1c3422 	svcls	0x001c3422
	...
    236c:	00000004 	andeq	r0, r0, r4
    2370:	00000010 	andeq	r0, r0, r0, lsl r0
    2374:	10500001 	subsne	r0, r0, r1
    2378:	14000000 	strne	r0, [r0], #-0
    237c:	05000000 	streq	r0, [r0, #-0]
    2380:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2384:	00001c34 	andeq	r1, r0, r4, lsr ip
	...
    2390:	000e0000 	andeq	r0, lr, r0
    2394:	00010000 	andeq	r0, r1, r0
    2398:	00000e50 	andeq	r0, r0, r0, asr lr
    239c:	00001c00 	andeq	r1, r0, r0, lsl #24
    23a0:	f3000400 	vshl.u8	d0, d0, d0
    23a4:	009f5001 	addseq	r5, pc, r1
    23a8:	00000000 	andeq	r0, r0, r0
    23ac:	Address 0x00000000000023ac is out of bounds.

