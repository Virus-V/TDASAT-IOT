
/home/virusv/TDSAST_IOT/debug/sast_iot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007990  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000000e8  20000000  08007a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000cfc  200000e8  08007b84  000200e8  2**2
                  ALLOC
  4 ._user_heap_stack 00000200  20000de4  08007b84  00020de4  2**0
                  ALLOC
  5 .ARM.attributes 00000031  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
  6 .debug_info   00010c14  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000038f6  00000000  00000000  00030d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000fe8  00000000  00000000  00034623  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000e18  00000000  00000000  0003560b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005fe1  00000000  00000000  00036423  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004a86  00000000  00000000  0003c404  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000070  00000000  00000000  00040e8a  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00003cc4  00000000  00000000  00040efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000017d2  00000000  00000000  00044bc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20005000 	andcs	r5, r0, r0
 8000004:	08006689 	stmdaeq	r0, {r0, r3, r7, r9, sl, sp, lr}
 8000008:	0800556d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl, ip, lr}
 800000c:	08005579 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, sl, ip, lr}
 8000010:	08005581 	stmdaeq	r0, {r0, r7, r8, sl, ip, lr}
 8000014:	08005589 	stmdaeq	r0, {r0, r3, r7, r8, sl, ip, lr}
 8000018:	08005591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, lr}
	...
 800002c:	08005599 	stmdaeq	r0, {r0, r3, r4, r7, r8, sl, ip, lr}
 8000030:	080055a5 	stmdaeq	r0, {r0, r2, r5, r7, r8, sl, ip, lr}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	080055b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, ip, lr}
 800003c:	080055bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, sl, ip, lr}
 8000040:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 8000044:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 8000048:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 800004c:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 8000050:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 8000054:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 8000058:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 800005c:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 8000060:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 8000064:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 8000068:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 800006c:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 8000070:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 8000074:	080055d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, sl, ip, lr}
 8000078:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 800007c:	080055c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, sl, ip, lr}
 8000080:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 8000084:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 8000088:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 800008c:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 8000090:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 8000094:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 8000098:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 800009c:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 80000a0:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 80000a4:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 80000a8:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 80000ac:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 80000b0:	080055e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, sl, ip, lr}
 80000b4:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 80000b8:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 80000bc:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 80000c0:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 80000c4:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 80000c8:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 80000cc:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 80000d0:	0800561d 	stmdaeq	r0, {r0, r2, r3, r4, r9, sl, ip, lr}
 80000d4:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 80000d8:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 80000dc:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 80000e0:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 80000e4:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
 80000e8:	080066cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, sp, lr}
	...
 8000108:	f108f85f 			; <UNDEFINED> instruction: 0xf108f85f

Disassembly of section .text:

0800010c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800010c:	b580      	push	{r7, lr}
 800010e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000110:	4a15      	ldr	r2, [pc, #84]	; (8000168 <SystemInit+0x5c>)
 8000112:	4b15      	ldr	r3, [pc, #84]	; (8000168 <SystemInit+0x5c>)
 8000114:	681b      	ldr	r3, [r3, #0]
 8000116:	f043 0301 	orr.w	r3, r3, #1
 800011a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800011c:	4912      	ldr	r1, [pc, #72]	; (8000168 <SystemInit+0x5c>)
 800011e:	4b12      	ldr	r3, [pc, #72]	; (8000168 <SystemInit+0x5c>)
 8000120:	685a      	ldr	r2, [r3, #4]
 8000122:	4b12      	ldr	r3, [pc, #72]	; (800016c <SystemInit+0x60>)
 8000124:	4013      	ands	r3, r2
 8000126:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000128:	4a0f      	ldr	r2, [pc, #60]	; (8000168 <SystemInit+0x5c>)
 800012a:	4b0f      	ldr	r3, [pc, #60]	; (8000168 <SystemInit+0x5c>)
 800012c:	681b      	ldr	r3, [r3, #0]
 800012e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000136:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000138:	4a0b      	ldr	r2, [pc, #44]	; (8000168 <SystemInit+0x5c>)
 800013a:	4b0b      	ldr	r3, [pc, #44]	; (8000168 <SystemInit+0x5c>)
 800013c:	681b      	ldr	r3, [r3, #0]
 800013e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000142:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000144:	4a08      	ldr	r2, [pc, #32]	; (8000168 <SystemInit+0x5c>)
 8000146:	4b08      	ldr	r3, [pc, #32]	; (8000168 <SystemInit+0x5c>)
 8000148:	685b      	ldr	r3, [r3, #4]
 800014a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800014e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000150:	4b05      	ldr	r3, [pc, #20]	; (8000168 <SystemInit+0x5c>)
 8000152:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000156:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000158:	f000 f80c 	bl	8000174 <SetSysClock>
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800015c:	4b04      	ldr	r3, [pc, #16]	; (8000170 <SystemInit+0x64>)
 800015e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000162:	609a      	str	r2, [r3, #8]
#endif 
return;
 8000164:	bf00      	nop
}
 8000166:	bd80      	pop	{r7, pc}
 8000168:	40021000 	andmi	r1, r2, r0
 800016c:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000
 8000170:	e000ed00 	and	lr, r0, r0, lsl #26

08000174 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000178:	f000 f802 	bl	8000180 <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop

08000180 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	2300      	movs	r3, #0
 800018c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800018e:	4a3a      	ldr	r2, [pc, #232]	; (8000278 <SetSysClockTo72+0xf8>)
 8000190:	4b39      	ldr	r3, [pc, #228]	; (8000278 <SetSysClockTo72+0xf8>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000198:	6013      	str	r3, [r2, #0]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800019a:	4b37      	ldr	r3, [pc, #220]	; (8000278 <SetSysClockTo72+0xf8>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001a2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	3301      	adds	r3, #1
 80001a8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80001aa:	683b      	ldr	r3, [r7, #0]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d103      	bne.n	80001b8 <SetSysClockTo72+0x38>
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80001b6:	d1f0      	bne.n	800019a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80001b8:	4b2f      	ldr	r3, [pc, #188]	; (8000278 <SetSysClockTo72+0xf8>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d002      	beq.n	80001ca <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80001c4:	2301      	movs	r3, #1
 80001c6:	603b      	str	r3, [r7, #0]
 80001c8:	e001      	b.n	80001ce <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80001ca:	2300      	movs	r3, #0
 80001cc:	603b      	str	r3, [r7, #0]
  }  
  
  if (HSEStatus == (uint32_t)0x01)
 80001ce:	683b      	ldr	r3, [r7, #0]
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	d14b      	bne.n	800026c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80001d4:	4a29      	ldr	r2, [pc, #164]	; (800027c <SetSysClockTo72+0xfc>)
 80001d6:	4b29      	ldr	r3, [pc, #164]	; (800027c <SetSysClockTo72+0xfc>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f043 0310 	orr.w	r3, r3, #16
 80001de:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80001e0:	4a26      	ldr	r2, [pc, #152]	; (800027c <SetSysClockTo72+0xfc>)
 80001e2:	4b26      	ldr	r3, [pc, #152]	; (800027c <SetSysClockTo72+0xfc>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f023 0303 	bic.w	r3, r3, #3
 80001ea:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80001ec:	4a23      	ldr	r2, [pc, #140]	; (800027c <SetSysClockTo72+0xfc>)
 80001ee:	4b23      	ldr	r3, [pc, #140]	; (800027c <SetSysClockTo72+0xfc>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f043 0302 	orr.w	r3, r3, #2
 80001f6:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80001f8:	4a1f      	ldr	r2, [pc, #124]	; (8000278 <SetSysClockTo72+0xf8>)
 80001fa:	4b1f      	ldr	r3, [pc, #124]	; (8000278 <SetSysClockTo72+0xf8>)
 80001fc:	685b      	ldr	r3, [r3, #4]
 80001fe:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000200:	4a1d      	ldr	r2, [pc, #116]	; (8000278 <SetSysClockTo72+0xf8>)
 8000202:	4b1d      	ldr	r3, [pc, #116]	; (8000278 <SetSysClockTo72+0xf8>)
 8000204:	685b      	ldr	r3, [r3, #4]
 8000206:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000208:	4a1b      	ldr	r2, [pc, #108]	; (8000278 <SetSysClockTo72+0xf8>)
 800020a:	4b1b      	ldr	r3, [pc, #108]	; (8000278 <SetSysClockTo72+0xf8>)
 800020c:	685b      	ldr	r3, [r3, #4]
 800020e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000212:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000214:	4a18      	ldr	r2, [pc, #96]	; (8000278 <SetSysClockTo72+0xf8>)
 8000216:	4b18      	ldr	r3, [pc, #96]	; (8000278 <SetSysClockTo72+0xf8>)
 8000218:	685b      	ldr	r3, [r3, #4]
 800021a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800021e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000220:	4a15      	ldr	r2, [pc, #84]	; (8000278 <SetSysClockTo72+0xf8>)
 8000222:	4b15      	ldr	r3, [pc, #84]	; (8000278 <SetSysClockTo72+0xf8>)
 8000224:	685b      	ldr	r3, [r3, #4]
 8000226:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800022a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */


    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800022c:	4a12      	ldr	r2, [pc, #72]	; (8000278 <SetSysClockTo72+0xf8>)
 800022e:	4b12      	ldr	r3, [pc, #72]	; (8000278 <SetSysClockTo72+0xf8>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000236:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000238:	bf00      	nop
 800023a:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <SetSysClockTo72+0xf8>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000242:	2b00      	cmp	r3, #0
 8000244:	d0f9      	beq.n	800023a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000246:	4a0c      	ldr	r2, [pc, #48]	; (8000278 <SetSysClockTo72+0xf8>)
 8000248:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <SetSysClockTo72+0xf8>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	f023 0303 	bic.w	r3, r3, #3
 8000250:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000252:	4a09      	ldr	r2, [pc, #36]	; (8000278 <SetSysClockTo72+0xf8>)
 8000254:	4b08      	ldr	r3, [pc, #32]	; (8000278 <SetSysClockTo72+0xf8>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	f043 0302 	orr.w	r3, r3, #2
 800025c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800025e:	bf00      	nop
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <SetSysClockTo72+0xf8>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	f003 030c 	and.w	r3, r3, #12
 8000268:	2b08      	cmp	r3, #8
 800026a:	d1f9      	bne.n	8000260 <SetSysClockTo72+0xe0>
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
  
}
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40021000 	andmi	r1, r2, r0
 800027c:	40022000 	andmi	r2, r2, r0

08000280 <Driver_OLED_Send_START>:

uint8_t display_on[] = {0x8d, 0x14, 0xaf};
uint8_t display_off[] = {0x8d, 0x10, 0xae};

/* 启动向OLED发送数据或者指令 */
void Driver_OLED_Send_START(uint32_t dataType){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    
    /* 发送起始条件 */
    I2C_GenerateSTART(OLED_HARDWARE, ENABLE);
 8000288:	4817      	ldr	r0, [pc, #92]	; (80002e8 <Driver_OLED_Send_START+0x68>)
 800028a:	2101      	movs	r1, #1
 800028c:	f004 ff1e 	bl	80050cc <I2C_GenerateSTART>
    /* 初始化重试次数 */
    /* 检查当前是否成功占用总线 */
    _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_MODE_SELECT) == ERROR);
 8000290:	bf00      	nop
 8000292:	4815      	ldr	r0, [pc, #84]	; (80002e8 <Driver_OLED_Send_START+0x68>)
 8000294:	4915      	ldr	r1, [pc, #84]	; (80002ec <Driver_OLED_Send_START+0x6c>)
 8000296:	f004 ff87 	bl	80051a8 <I2C_CheckEvent>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d0f8      	beq.n	8000292 <Driver_OLED_Send_START+0x12>
    /* 发送地址，要往这个地址写数据 */
    I2C_Send7bitAddress(OLED_HARDWARE, 0x78, I2C_Direction_Transmitter);
 80002a0:	4811      	ldr	r0, [pc, #68]	; (80002e8 <Driver_OLED_Send_START+0x68>)
 80002a2:	2178      	movs	r1, #120	; 0x78
 80002a4:	2200      	movs	r2, #0
 80002a6:	f004 ff41 	bl	800512c <I2C_Send7bitAddress>
    /* 检测当前是否是主发送模式 */
    _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED) == ERROR);
 80002aa:	bf00      	nop
 80002ac:	480e      	ldr	r0, [pc, #56]	; (80002e8 <Driver_OLED_Send_START+0x68>)
 80002ae:	4910      	ldr	r1, [pc, #64]	; (80002f0 <Driver_OLED_Send_START+0x70>)
 80002b0:	f004 ff7a 	bl	80051a8 <I2C_CheckEvent>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d0f8      	beq.n	80002ac <Driver_OLED_Send_START+0x2c>
    /* 发送指令：0x00代表指令，0x40代表数据 */
    if(dataType != OLED_COMMAND){
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d004      	beq.n	80002ca <Driver_OLED_Send_START+0x4a>
        I2C_SendData(OLED_HARDWARE, 0x40);
 80002c0:	4809      	ldr	r0, [pc, #36]	; (80002e8 <Driver_OLED_Send_START+0x68>)
 80002c2:	2140      	movs	r1, #64	; 0x40
 80002c4:	f004 ff22 	bl	800510c <I2C_SendData>
 80002c8:	e003      	b.n	80002d2 <Driver_OLED_Send_START+0x52>
    }else{
        I2C_SendData(OLED_HARDWARE, 0x00);
 80002ca:	4807      	ldr	r0, [pc, #28]	; (80002e8 <Driver_OLED_Send_START+0x68>)
 80002cc:	2100      	movs	r1, #0
 80002ce:	f004 ff1d 	bl	800510c <I2C_SendData>
    }
    _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTED) == ERROR);
 80002d2:	bf00      	nop
 80002d4:	4804      	ldr	r0, [pc, #16]	; (80002e8 <Driver_OLED_Send_START+0x68>)
 80002d6:	4907      	ldr	r1, [pc, #28]	; (80002f4 <Driver_OLED_Send_START+0x74>)
 80002d8:	f004 ff66 	bl	80051a8 <I2C_CheckEvent>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d0f8      	beq.n	80002d4 <Driver_OLED_Send_START+0x54>
    
}
 80002e2:	3708      	adds	r7, #8
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	40005800 	andmi	r5, r0, r0, lsl #16
 80002ec:	00030001 	andeq	r0, r3, r1
 80002f0:	00070082 	andeq	r0, r7, r2, lsl #1
 80002f4:	00070084 	andeq	r0, r7, r4, lsl #1

080002f8 <Driver_OLED_SendDatas>:

/* 发送一串数据，数据中不包括地址 */
void Driver_OLED_SendDatas(uint8_t *commands, uint32_t length){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	6039      	str	r1, [r7, #0]
    
    uint32_t i;
    /* 循环发送数据 */
    for(i=0; i<length; i++){
 8000302:	2300      	movs	r3, #0
 8000304:	60fb      	str	r3, [r7, #12]
 8000306:	e012      	b.n	800032e <Driver_OLED_SendDatas+0x36>
        I2C_SendData(OLED_HARDWARE, commands[i]);
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	4413      	add	r3, r2
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	480e      	ldr	r0, [pc, #56]	; (800034c <Driver_OLED_SendDatas+0x54>)
 8000312:	4619      	mov	r1, r3
 8000314:	f004 fefa 	bl	800510c <I2C_SendData>
        //I2C_SendData(OLED_HARDWARE, *(commands + i));
        /* 等待数据发送完成 */
        _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 8000318:	bf00      	nop
 800031a:	480c      	ldr	r0, [pc, #48]	; (800034c <Driver_OLED_SendDatas+0x54>)
 800031c:	490c      	ldr	r1, [pc, #48]	; (8000350 <Driver_OLED_SendDatas+0x58>)
 800031e:	f004 ff43 	bl	80051a8 <I2C_CheckEvent>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d0f8      	beq.n	800031a <Driver_OLED_SendDatas+0x22>
/* 发送一串数据，数据中不包括地址 */
void Driver_OLED_SendDatas(uint8_t *commands, uint32_t length){
    
    uint32_t i;
    /* 循环发送数据 */
    for(i=0; i<length; i++){
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	3301      	adds	r3, #1
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fa      	ldr	r2, [r7, #12]
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	429a      	cmp	r2, r3
 8000334:	d3e8      	bcc.n	8000308 <Driver_OLED_SendDatas+0x10>
        //I2C_SendData(OLED_HARDWARE, *(commands + i));
        /* 等待数据发送完成 */
        _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
    }
    /* 等待最后一个数据发送完 */
    _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
 8000336:	bf00      	nop
 8000338:	4804      	ldr	r0, [pc, #16]	; (800034c <Driver_OLED_SendDatas+0x54>)
 800033a:	4906      	ldr	r1, [pc, #24]	; (8000354 <Driver_OLED_SendDatas+0x5c>)
 800033c:	f004 ff64 	bl	8005208 <I2C_GetFlagStatus>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0f8      	beq.n	8000338 <Driver_OLED_SendDatas+0x40>
    
}
 8000346:	3710      	adds	r7, #16
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	40005800 	andmi	r5, r0, r0, lsl #16
 8000350:	00070080 	andeq	r0, r7, r0, lsl #1
 8000354:	10000004 	andne	r0, r0, r4

08000358 <Driver_OLED_Fill>:

/* 屏幕输出 false：全黑，true全白，这是命令*/
void Driver_OLED_Fill(uint8_t data){
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
    uint8_t i,j;
    /* 设置页地址0-7，设置显示位置—列低地址，设置显示位置—列高地址 */
    uint8_t command[] = {0x00, 0x10};
 8000362:	2300      	movs	r3, #0
 8000364:	733b      	strb	r3, [r7, #12]
 8000366:	2310      	movs	r3, #16
 8000368:	737b      	strb	r3, [r7, #13]
    /* 清理八页 */
    for(i=0;i<8;i++){
 800036a:	2300      	movs	r3, #0
 800036c:	73fb      	strb	r3, [r7, #15]
 800036e:	e034      	b.n	80003da <Driver_OLED_Fill+0x82>
        /* 开始发送指令 */
        Driver_OLED_Send_START(OLED_COMMAND);
 8000370:	2000      	movs	r0, #0
 8000372:	f7ff ff85 	bl	8000280 <Driver_OLED_Send_START>
        /* 设置页地址0-7 */
        I2C_SendData(OLED_HARDWARE, 0xb0+i);
 8000376:	7bfb      	ldrb	r3, [r7, #15]
 8000378:	3b50      	subs	r3, #80	; 0x50
 800037a:	b2db      	uxtb	r3, r3
 800037c:	481e      	ldr	r0, [pc, #120]	; (80003f8 <Driver_OLED_Fill+0xa0>)
 800037e:	4619      	mov	r1, r3
 8000380:	f004 fec4 	bl	800510c <I2C_SendData>
        _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTED) == ERROR);
 8000384:	bf00      	nop
 8000386:	481c      	ldr	r0, [pc, #112]	; (80003f8 <Driver_OLED_Fill+0xa0>)
 8000388:	491c      	ldr	r1, [pc, #112]	; (80003fc <Driver_OLED_Fill+0xa4>)
 800038a:	f004 ff0d 	bl	80051a8 <I2C_CheckEvent>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0f8      	beq.n	8000386 <Driver_OLED_Fill+0x2e>
        /* 发送剩下的指令 */
        Driver_OLED_SendDatas(command, sizeof(command));
 8000394:	f107 030c 	add.w	r3, r7, #12
 8000398:	4618      	mov	r0, r3
 800039a:	2102      	movs	r1, #2
 800039c:	f7ff ffac 	bl	80002f8 <Driver_OLED_SendDatas>
        /* 开始发送数据 */
        Driver_OLED_Send_START(OLED_DATA);
 80003a0:	2040      	movs	r0, #64	; 0x40
 80003a2:	f7ff ff6d 	bl	8000280 <Driver_OLED_Send_START>
        for(j=0;j<128;j++){
 80003a6:	2300      	movs	r3, #0
 80003a8:	73bb      	strb	r3, [r7, #14]
 80003aa:	e00f      	b.n	80003cc <Driver_OLED_Fill+0x74>
            /* 全黑 */
            I2C_SendData(OLED_HARDWARE, data);
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	4812      	ldr	r0, [pc, #72]	; (80003f8 <Driver_OLED_Fill+0xa0>)
 80003b0:	4619      	mov	r1, r3
 80003b2:	f004 feab 	bl	800510c <I2C_SendData>
            /* 等待数据发送完成 */
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 80003b6:	bf00      	nop
 80003b8:	480f      	ldr	r0, [pc, #60]	; (80003f8 <Driver_OLED_Fill+0xa0>)
 80003ba:	4911      	ldr	r1, [pc, #68]	; (8000400 <Driver_OLED_Fill+0xa8>)
 80003bc:	f004 fef4 	bl	80051a8 <I2C_CheckEvent>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d0f8      	beq.n	80003b8 <Driver_OLED_Fill+0x60>
        _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTED) == ERROR);
        /* 发送剩下的指令 */
        Driver_OLED_SendDatas(command, sizeof(command));
        /* 开始发送数据 */
        Driver_OLED_Send_START(OLED_DATA);
        for(j=0;j<128;j++){
 80003c6:	7bbb      	ldrb	r3, [r7, #14]
 80003c8:	3301      	adds	r3, #1
 80003ca:	73bb      	strb	r3, [r7, #14]
 80003cc:	7bbb      	ldrb	r3, [r7, #14]
 80003ce:	b25b      	sxtb	r3, r3
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	daeb      	bge.n	80003ac <Driver_OLED_Fill+0x54>
void Driver_OLED_Fill(uint8_t data){
    uint8_t i,j;
    /* 设置页地址0-7，设置显示位置—列低地址，设置显示位置—列高地址 */
    uint8_t command[] = {0x00, 0x10};
    /* 清理八页 */
    for(i=0;i<8;i++){
 80003d4:	7bfb      	ldrb	r3, [r7, #15]
 80003d6:	3301      	adds	r3, #1
 80003d8:	73fb      	strb	r3, [r7, #15]
 80003da:	7bfb      	ldrb	r3, [r7, #15]
 80003dc:	2b07      	cmp	r3, #7
 80003de:	d9c7      	bls.n	8000370 <Driver_OLED_Fill+0x18>
            /* 等待数据发送完成 */
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
        }
    }
    /* 等待最后一个数据发送完 */
    _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
 80003e0:	bf00      	nop
 80003e2:	4805      	ldr	r0, [pc, #20]	; (80003f8 <Driver_OLED_Fill+0xa0>)
 80003e4:	4907      	ldr	r1, [pc, #28]	; (8000404 <Driver_OLED_Fill+0xac>)
 80003e6:	f004 ff0f 	bl	8005208 <I2C_GetFlagStatus>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d0f8      	beq.n	80003e2 <Driver_OLED_Fill+0x8a>
    
}
 80003f0:	3710      	adds	r7, #16
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40005800 	andmi	r5, r0, r0, lsl #16
 80003fc:	00070084 	andeq	r0, r7, r4, lsl #1
 8000400:	00070080 	andeq	r0, r7, r0, lsl #1
 8000404:	10000004 	andne	r0, r0, r4

08000408 <Driver_OLED_Set_Position>:
    _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
    
}

/* 设置位置X：0-127，Y：0-7，这是命令*/
void Driver_OLED_Set_Position(uint8_t x, uint8_t y){
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	460a      	mov	r2, r1
 8000412:	71fb      	strb	r3, [r7, #7]
 8000414:	4613      	mov	r3, r2
 8000416:	71bb      	strb	r3, [r7, #6]
    /* 发送列0-7 */
    I2C_SendData(OLED_HARDWARE, 0xb0 + y);
 8000418:	79bb      	ldrb	r3, [r7, #6]
 800041a:	3b50      	subs	r3, #80	; 0x50
 800041c:	b2db      	uxtb	r3, r3
 800041e:	4818      	ldr	r0, [pc, #96]	; (8000480 <Driver_OLED_Set_Position+0x78>)
 8000420:	4619      	mov	r1, r3
 8000422:	f004 fe73 	bl	800510c <I2C_SendData>
    _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 8000426:	bf00      	nop
 8000428:	4815      	ldr	r0, [pc, #84]	; (8000480 <Driver_OLED_Set_Position+0x78>)
 800042a:	4916      	ldr	r1, [pc, #88]	; (8000484 <Driver_OLED_Set_Position+0x7c>)
 800042c:	f004 febc 	bl	80051a8 <I2C_CheckEvent>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0f8      	beq.n	8000428 <Driver_OLED_Set_Position+0x20>
    I2C_SendData(OLED_HARDWARE, ((x&0xf0)>>4)|0x10);
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	b2db      	uxtb	r3, r3
 800043c:	f043 0310 	orr.w	r3, r3, #16
 8000440:	b2db      	uxtb	r3, r3
 8000442:	480f      	ldr	r0, [pc, #60]	; (8000480 <Driver_OLED_Set_Position+0x78>)
 8000444:	4619      	mov	r1, r3
 8000446:	f004 fe61 	bl	800510c <I2C_SendData>
    _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 800044a:	bf00      	nop
 800044c:	480c      	ldr	r0, [pc, #48]	; (8000480 <Driver_OLED_Set_Position+0x78>)
 800044e:	490d      	ldr	r1, [pc, #52]	; (8000484 <Driver_OLED_Set_Position+0x7c>)
 8000450:	f004 feaa 	bl	80051a8 <I2C_CheckEvent>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0f8      	beq.n	800044c <Driver_OLED_Set_Position+0x44>
    I2C_SendData(OLED_HARDWARE, ( x & 0x0f));
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	f003 030f 	and.w	r3, r3, #15
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4807      	ldr	r0, [pc, #28]	; (8000480 <Driver_OLED_Set_Position+0x78>)
 8000464:	4619      	mov	r1, r3
 8000466:	f004 fe51 	bl	800510c <I2C_SendData>
    _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTED) == ERROR);
 800046a:	bf00      	nop
 800046c:	4804      	ldr	r0, [pc, #16]	; (8000480 <Driver_OLED_Set_Position+0x78>)
 800046e:	4906      	ldr	r1, [pc, #24]	; (8000488 <Driver_OLED_Set_Position+0x80>)
 8000470:	f004 fe9a 	bl	80051a8 <I2C_CheckEvent>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d0f8      	beq.n	800046c <Driver_OLED_Set_Position+0x64>
    
}
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40005800 	andmi	r5, r0, r0, lsl #16
 8000484:	00070080 	andeq	r0, r7, r0, lsl #1
 8000488:	00070084 	andeq	r0, r7, r4, lsl #1

0800048c <Driver_OLED_Show_Char>:

/* 显示字符，这是数据 */
void Driver_OLED_Show_Char(uint8_t x, uint8_t y, uint8_t chr, uint8_t charSize, uint8_t rever){
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
 8000492:	4604      	mov	r4, r0
 8000494:	4608      	mov	r0, r1
 8000496:	4611      	mov	r1, r2
 8000498:	461a      	mov	r2, r3
 800049a:	4623      	mov	r3, r4
 800049c:	71fb      	strb	r3, [r7, #7]
 800049e:	4603      	mov	r3, r0
 80004a0:	71bb      	strb	r3, [r7, #6]
 80004a2:	460b      	mov	r3, r1
 80004a4:	717b      	strb	r3, [r7, #5]
 80004a6:	4613      	mov	r3, r2
 80004a8:	713b      	strb	r3, [r7, #4]
    uint8_t charIndex = 0,i;
 80004aa:	2300      	movs	r3, #0
 80004ac:	73bb      	strb	r3, [r7, #14]
    charIndex = chr-0x20;
 80004ae:	797b      	ldrb	r3, [r7, #5]
 80004b0:	3b20      	subs	r3, #32
 80004b2:	73bb      	strb	r3, [r7, #14]
    /* 转换显示位置 */
    y = (x/128 + y) % 64;
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	09db      	lsrs	r3, r3, #7
 80004b8:	b2da      	uxtb	r2, r3
 80004ba:	79bb      	ldrb	r3, [r7, #6]
 80004bc:	4413      	add	r3, r2
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004c4:	71bb      	strb	r3, [r7, #6]
    x = x%128;
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004cc:	71fb      	strb	r3, [r7, #7]
    /* 选择显示文字大小 */
    if(charSize == 16){
 80004ce:	793b      	ldrb	r3, [r7, #4]
 80004d0:	2b10      	cmp	r3, #16
 80004d2:	d15e      	bne.n	8000592 <Driver_OLED_Show_Char+0x106>
        /* 发送第一行 */
        Driver_OLED_Send_START(OLED_COMMAND);
 80004d4:	2000      	movs	r0, #0
 80004d6:	f7ff fed3 	bl	8000280 <Driver_OLED_Send_START>
           
        Driver_OLED_Set_Position(x,y);
 80004da:	79fa      	ldrb	r2, [r7, #7]
 80004dc:	79bb      	ldrb	r3, [r7, #6]
 80004de:	4610      	mov	r0, r2
 80004e0:	4619      	mov	r1, r3
 80004e2:	f7ff ff91 	bl	8000408 <Driver_OLED_Set_Position>
        Driver_OLED_Send_START(OLED_DATA);
 80004e6:	2040      	movs	r0, #64	; 0x40
 80004e8:	f7ff feca 	bl	8000280 <Driver_OLED_Send_START>
        /* 发送字符数据 */
        for(i=0;i<8;i++) {
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]
 80004f0:	e021      	b.n	8000536 <Driver_OLED_Show_Char+0xaa>
            
            I2C_SendData(OLED_HARDWARE, rever ? ~F8X16[charIndex*16+i] : F8X16[charIndex*16+i]);
 80004f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d008      	beq.n	800050c <Driver_OLED_Show_Char+0x80>
 80004fa:	7bbb      	ldrb	r3, [r7, #14]
 80004fc:	011a      	lsls	r2, r3, #4
 80004fe:	7bfb      	ldrb	r3, [r7, #15]
 8000500:	4413      	add	r3, r2
 8000502:	4a47      	ldr	r2, [pc, #284]	; (8000620 <Driver_OLED_Show_Char+0x194>)
 8000504:	5cd3      	ldrb	r3, [r2, r3]
 8000506:	43db      	mvns	r3, r3
 8000508:	b2db      	uxtb	r3, r3
 800050a:	e005      	b.n	8000518 <Driver_OLED_Show_Char+0x8c>
 800050c:	7bbb      	ldrb	r3, [r7, #14]
 800050e:	011a      	lsls	r2, r3, #4
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	4413      	add	r3, r2
 8000514:	4a42      	ldr	r2, [pc, #264]	; (8000620 <Driver_OLED_Show_Char+0x194>)
 8000516:	5cd3      	ldrb	r3, [r2, r3]
 8000518:	4842      	ldr	r0, [pc, #264]	; (8000624 <Driver_OLED_Show_Char+0x198>)
 800051a:	4619      	mov	r1, r3
 800051c:	f004 fdf6 	bl	800510c <I2C_SendData>
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 8000520:	bf00      	nop
 8000522:	4840      	ldr	r0, [pc, #256]	; (8000624 <Driver_OLED_Show_Char+0x198>)
 8000524:	4940      	ldr	r1, [pc, #256]	; (8000628 <Driver_OLED_Show_Char+0x19c>)
 8000526:	f004 fe3f 	bl	80051a8 <I2C_CheckEvent>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d0f8      	beq.n	8000522 <Driver_OLED_Show_Char+0x96>
        Driver_OLED_Send_START(OLED_COMMAND);
           
        Driver_OLED_Set_Position(x,y);
        Driver_OLED_Send_START(OLED_DATA);
        /* 发送字符数据 */
        for(i=0;i<8;i++) {
 8000530:	7bfb      	ldrb	r3, [r7, #15]
 8000532:	3301      	adds	r3, #1
 8000534:	73fb      	strb	r3, [r7, #15]
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	2b07      	cmp	r3, #7
 800053a:	d9da      	bls.n	80004f2 <Driver_OLED_Show_Char+0x66>
            
            I2C_SendData(OLED_HARDWARE, rever ? ~F8X16[charIndex*16+i] : F8X16[charIndex*16+i]);
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
        }
        //发送第二行
        Driver_OLED_Send_START(OLED_COMMAND);
 800053c:	2000      	movs	r0, #0
 800053e:	f7ff fe9f 	bl	8000280 <Driver_OLED_Send_START>
        Driver_OLED_Set_Position(x,y+1);
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	3301      	adds	r3, #1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	79fa      	ldrb	r2, [r7, #7]
 800054a:	4610      	mov	r0, r2
 800054c:	4619      	mov	r1, r3
 800054e:	f7ff ff5b 	bl	8000408 <Driver_OLED_Set_Position>
        Driver_OLED_Send_START(OLED_DATA);
 8000552:	2040      	movs	r0, #64	; 0x40
 8000554:	f7ff fe94 	bl	8000280 <Driver_OLED_Send_START>
        /* 发送字符数据 */
        for(i=0;i<8;i++){
 8000558:	2300      	movs	r3, #0
 800055a:	73fb      	strb	r3, [r7, #15]
 800055c:	e015      	b.n	800058a <Driver_OLED_Show_Char+0xfe>
            I2C_SendData(OLED_HARDWARE, F8X16[charIndex*16+i+8]);
 800055e:	7bbb      	ldrb	r3, [r7, #14]
 8000560:	011a      	lsls	r2, r3, #4
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	4413      	add	r3, r2
 8000566:	3308      	adds	r3, #8
 8000568:	4a2d      	ldr	r2, [pc, #180]	; (8000620 <Driver_OLED_Show_Char+0x194>)
 800056a:	5cd3      	ldrb	r3, [r2, r3]
 800056c:	482d      	ldr	r0, [pc, #180]	; (8000624 <Driver_OLED_Show_Char+0x198>)
 800056e:	4619      	mov	r1, r3
 8000570:	f004 fdcc 	bl	800510c <I2C_SendData>
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 8000574:	bf00      	nop
 8000576:	482b      	ldr	r0, [pc, #172]	; (8000624 <Driver_OLED_Show_Char+0x198>)
 8000578:	492b      	ldr	r1, [pc, #172]	; (8000628 <Driver_OLED_Show_Char+0x19c>)
 800057a:	f004 fe15 	bl	80051a8 <I2C_CheckEvent>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d0f8      	beq.n	8000576 <Driver_OLED_Show_Char+0xea>
        //发送第二行
        Driver_OLED_Send_START(OLED_COMMAND);
        Driver_OLED_Set_Position(x,y+1);
        Driver_OLED_Send_START(OLED_DATA);
        /* 发送字符数据 */
        for(i=0;i<8;i++){
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	3301      	adds	r3, #1
 8000588:	73fb      	strb	r3, [r7, #15]
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	2b07      	cmp	r3, #7
 800058e:	d9e6      	bls.n	800055e <Driver_OLED_Show_Char+0xd2>
 8000590:	e03b      	b.n	800060a <Driver_OLED_Show_Char+0x17e>
            I2C_SendData(OLED_HARDWARE, F8X16[charIndex*16+i+8]);
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
        }
    }else {	
        Driver_OLED_Send_START(OLED_COMMAND);
 8000592:	2000      	movs	r0, #0
 8000594:	f7ff fe74 	bl	8000280 <Driver_OLED_Send_START>
        Driver_OLED_Set_Position(x,y);
 8000598:	79fa      	ldrb	r2, [r7, #7]
 800059a:	79bb      	ldrb	r3, [r7, #6]
 800059c:	4610      	mov	r0, r2
 800059e:	4619      	mov	r1, r3
 80005a0:	f7ff ff32 	bl	8000408 <Driver_OLED_Set_Position>
        Driver_OLED_Send_START(OLED_DATA);
 80005a4:	2040      	movs	r0, #64	; 0x40
 80005a6:	f7ff fe6b 	bl	8000280 <Driver_OLED_Send_START>
        for(i=0;i<6;i++){
 80005aa:	2300      	movs	r3, #0
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	e029      	b.n	8000604 <Driver_OLED_Show_Char+0x178>
            I2C_SendData(OLED_HARDWARE, rever ? ~F6x8[charIndex][i] : F6x8[charIndex][i]);
 80005b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d00c      	beq.n	80005d2 <Driver_OLED_Show_Char+0x146>
 80005b8:	7bba      	ldrb	r2, [r7, #14]
 80005ba:	7bf9      	ldrb	r1, [r7, #15]
 80005bc:	481b      	ldr	r0, [pc, #108]	; (800062c <Driver_OLED_Show_Char+0x1a0>)
 80005be:	4613      	mov	r3, r2
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	4413      	add	r3, r2
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	440b      	add	r3, r1
 80005c8:	4403      	add	r3, r0
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	43db      	mvns	r3, r3
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	e009      	b.n	80005e6 <Driver_OLED_Show_Char+0x15a>
 80005d2:	7bba      	ldrb	r2, [r7, #14]
 80005d4:	7bf9      	ldrb	r1, [r7, #15]
 80005d6:	4815      	ldr	r0, [pc, #84]	; (800062c <Driver_OLED_Show_Char+0x1a0>)
 80005d8:	4613      	mov	r3, r2
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	4413      	add	r3, r2
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	440b      	add	r3, r1
 80005e2:	4403      	add	r3, r0
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	480f      	ldr	r0, [pc, #60]	; (8000624 <Driver_OLED_Show_Char+0x198>)
 80005e8:	4619      	mov	r1, r3
 80005ea:	f004 fd8f 	bl	800510c <I2C_SendData>
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 80005ee:	bf00      	nop
 80005f0:	480c      	ldr	r0, [pc, #48]	; (8000624 <Driver_OLED_Show_Char+0x198>)
 80005f2:	490d      	ldr	r1, [pc, #52]	; (8000628 <Driver_OLED_Show_Char+0x19c>)
 80005f4:	f004 fdd8 	bl	80051a8 <I2C_CheckEvent>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d0f8      	beq.n	80005f0 <Driver_OLED_Show_Char+0x164>
        }
    }else {	
        Driver_OLED_Send_START(OLED_COMMAND);
        Driver_OLED_Set_Position(x,y);
        Driver_OLED_Send_START(OLED_DATA);
        for(i=0;i<6;i++){
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	3301      	adds	r3, #1
 8000602:	73fb      	strb	r3, [r7, #15]
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	2b05      	cmp	r3, #5
 8000608:	d9d2      	bls.n	80005b0 <Driver_OLED_Show_Char+0x124>
            I2C_SendData(OLED_HARDWARE, rever ? ~F6x8[charIndex][i] : F6x8[charIndex][i]);
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
        }
    }
    /* 等待最后一个数据发送完 */
    _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
 800060a:	bf00      	nop
 800060c:	4805      	ldr	r0, [pc, #20]	; (8000624 <Driver_OLED_Show_Char+0x198>)
 800060e:	4908      	ldr	r1, [pc, #32]	; (8000630 <Driver_OLED_Show_Char+0x1a4>)
 8000610:	f004 fdfa 	bl	8005208 <I2C_GetFlagStatus>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d0f8      	beq.n	800060c <Driver_OLED_Show_Char+0x180>
    
}
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	bd90      	pop	{r4, r7, pc}
 8000620:	08007474 	stmdaeq	r0, {r2, r4, r5, r6, sl, ip, sp, lr}
 8000624:	40005800 	andmi	r5, r0, r0, lsl #16
 8000628:	00070080 	andeq	r0, r7, r0, lsl #1
 800062c:	08007234 	stmdaeq	r0, {r2, r4, r5, r9, ip, sp, lr}
 8000630:	10000004 	andne	r0, r0, r4

08000634 <Driver_OLED_ShowString>:

/* 显示字符串 */
void Driver_OLED_ShowString(uint8_t x,uint8_t y,uint8_t *chr,uint8_t Char_Size, uint8_t rever){
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b087      	sub	sp, #28
 8000638:	af02      	add	r7, sp, #8
 800063a:	603a      	str	r2, [r7, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
 8000642:	460b      	mov	r3, r1
 8000644:	71bb      	strb	r3, [r7, #6]
 8000646:	4613      	mov	r3, r2
 8000648:	717b      	strb	r3, [r7, #5]
    uint8_t j=0;
 800064a:	2300      	movs	r3, #0
 800064c:	73fb      	strb	r3, [r7, #15]
    while (chr[j] != '\0'){
 800064e:	e029      	b.n	80006a4 <Driver_OLED_ShowString+0x70>
        Driver_OLED_Show_Char(x,y,chr[j],Char_Size, rever);
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	683a      	ldr	r2, [r7, #0]
 8000654:	4413      	add	r3, r2
 8000656:	781a      	ldrb	r2, [r3, #0]
 8000658:	79f8      	ldrb	r0, [r7, #7]
 800065a:	79b9      	ldrb	r1, [r7, #6]
 800065c:	797c      	ldrb	r4, [r7, #5]
 800065e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	4623      	mov	r3, r4
 8000666:	f7ff ff11 	bl	800048c <Driver_OLED_Show_Char>
        if(Char_Size == 16){
 800066a:	797b      	ldrb	r3, [r7, #5]
 800066c:	2b10      	cmp	r3, #16
 800066e:	d10b      	bne.n	8000688 <Driver_OLED_ShowString+0x54>
            x+=8;
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	3308      	adds	r3, #8
 8000674:	71fb      	strb	r3, [r7, #7]
            if(x>120){x=0;y+=2;}
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2b78      	cmp	r3, #120	; 0x78
 800067a:	d910      	bls.n	800069e <Driver_OLED_ShowString+0x6a>
 800067c:	2300      	movs	r3, #0
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	79bb      	ldrb	r3, [r7, #6]
 8000682:	3302      	adds	r3, #2
 8000684:	71bb      	strb	r3, [r7, #6]
 8000686:	e00a      	b.n	800069e <Driver_OLED_ShowString+0x6a>
        }else{
            x+=6;
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	3306      	adds	r3, #6
 800068c:	71fb      	strb	r3, [r7, #7]
            if(x>120){x=0;y+=1;}
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2b78      	cmp	r3, #120	; 0x78
 8000692:	d904      	bls.n	800069e <Driver_OLED_ShowString+0x6a>
 8000694:	2300      	movs	r3, #0
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	79bb      	ldrb	r3, [r7, #6]
 800069a:	3301      	adds	r3, #1
 800069c:	71bb      	strb	r3, [r7, #6]
        }
        j++;
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	3301      	adds	r3, #1
 80006a2:	73fb      	strb	r3, [r7, #15]
}

/* 显示字符串 */
void Driver_OLED_ShowString(uint8_t x,uint8_t y,uint8_t *chr,uint8_t Char_Size, uint8_t rever){
    uint8_t j=0;
    while (chr[j] != '\0'){
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	4413      	add	r3, r2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1cf      	bne.n	8000650 <Driver_OLED_ShowString+0x1c>
            if(x>120){x=0;y+=1;}
        }
        j++;
	}
    
}
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd90      	pop	{r4, r7, pc}
 80006b6:	bf00      	nop

080006b8 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4604      	mov	r4, r0
 80006c0:	4608      	mov	r0, r1
 80006c2:	4611      	mov	r1, r2
 80006c4:	461a      	mov	r2, r3
 80006c6:	4623      	mov	r3, r4
 80006c8:	71fb      	strb	r3, [r7, #7]
 80006ca:	4603      	mov	r3, r0
 80006cc:	71bb      	strb	r3, [r7, #6]
 80006ce:	460b      	mov	r3, r1
 80006d0:	80bb      	strh	r3, [r7, #4]
 80006d2:	4613      	mov	r3, r2
 80006d4:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b08      	cmp	r3, #8
 80006da:	d901      	bls.n	80006e0 <socket+0x28>
 80006dc:	23ff      	movs	r3, #255	; 0xff
 80006de:	e0d8      	b.n	8000892 <socket+0x1da>
	switch(protocol)
 80006e0:	79bb      	ldrb	r3, [r7, #6]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	db03      	blt.n	80006ee <socket+0x36>
 80006e6:	2b02      	cmp	r3, #2
 80006e8:	dd03      	ble.n	80006f2 <socket+0x3a>
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	d001      	beq.n	80006f2 <socket+0x3a>
      case Sn_MR_IPRAW :
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80006ee:	23fb      	movs	r3, #251	; 0xfb
 80006f0:	e0cf      	b.n	8000892 <socket+0x1da>
	switch(protocol)
	{
      case Sn_MR_TCP :
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
         break;
 80006f2:	bf00      	nop
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
	}
	if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	f003 0306 	and.w	r3, r3, #6
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <socket+0x4a>
 80006fe:	23fa      	movs	r3, #250	; 0xfa
 8000700:	e0c7      	b.n	8000892 <socket+0x1da>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8000702:	78fb      	ldrb	r3, [r7, #3]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d024      	beq.n	8000752 <socket+0x9a>
	{
   	switch(protocol)
 8000708:	79bb      	ldrb	r3, [r7, #6]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d002      	beq.n	8000714 <socket+0x5c>
 800070e:	2b02      	cmp	r3, #2
 8000710:	d008      	beq.n	8000724 <socket+0x6c>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000712:	e01e      	b.n	8000752 <socket+0x9a>
	if(flag != 0)
	{
   	switch(protocol)
   	{
   	   case Sn_MR_TCP:
   	      if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000714:	78fb      	ldrb	r3, [r7, #3]
 8000716:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800071a:	2b00      	cmp	r3, #0
 800071c:	d101      	bne.n	8000722 <socket+0x6a>
 800071e:	23fa      	movs	r3, #250	; 0xfa
 8000720:	e0b7      	b.n	8000892 <socket+0x1da>
   	      break;
 8000722:	e016      	b.n	8000752 <socket+0x9a>
   	   case Sn_MR_UDP:
   	      if(flag & SF_IGMP_VER2)
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	f003 0320 	and.w	r3, r3, #32
 800072a:	2b00      	cmp	r3, #0
 800072c:	d005      	beq.n	800073a <socket+0x82>
   	      {
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	b25b      	sxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	db01      	blt.n	800073a <socket+0x82>
 8000736:	23fa      	movs	r3, #250	; 0xfa
 8000738:	e0ab      	b.n	8000892 <socket+0x1da>
   	      }
   	      #if _WIZCHIP_ == 5500
      	      if(flag & SF_UNI_BLOCK)
 800073a:	78fb      	ldrb	r3, [r7, #3]
 800073c:	f003 0310 	and.w	r3, r3, #16
 8000740:	2b00      	cmp	r3, #0
 8000742:	d005      	beq.n	8000750 <socket+0x98>
      	      {
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8000744:	78fb      	ldrb	r3, [r7, #3]
 8000746:	b25b      	sxtb	r3, r3
 8000748:	2b00      	cmp	r3, #0
 800074a:	db01      	blt.n	8000750 <socket+0x98>
 800074c:	23fa      	movs	r3, #250	; 0xfa
 800074e:	e0a0      	b.n	8000892 <socket+0x1da>
      	      }
   	      #endif
   	      break;
 8000750:	bf00      	nop
   	   default:
   	      break;
   	}
   }
	close(sn);
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f8ab 	bl	80008b0 <close>
	setSn_MR(sn, (protocol | (flag & 0xF0)));
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	3301      	adds	r3, #1
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	4619      	mov	r1, r3
 8000764:	78fb      	ldrb	r3, [r7, #3]
 8000766:	f023 030f 	bic.w	r3, r3, #15
 800076a:	b2da      	uxtb	r2, r3
 800076c:	79bb      	ldrb	r3, [r7, #6]
 800076e:	4313      	orrs	r3, r2
 8000770:	b2db      	uxtb	r3, r3
 8000772:	b2db      	uxtb	r3, r3
 8000774:	4608      	mov	r0, r1
 8000776:	4619      	mov	r1, r3
 8000778:	f001 fc08 	bl	8001f8c <WIZCHIP_WRITE>
	if(!port)
 800077c:	88bb      	ldrh	r3, [r7, #4]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d110      	bne.n	80007a4 <socket+0xec>
	{
	   port = sock_any_port++;
 8000782:	4b46      	ldr	r3, [pc, #280]	; (800089c <socket+0x1e4>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	1c5a      	adds	r2, r3, #1
 8000788:	b291      	uxth	r1, r2
 800078a:	4a44      	ldr	r2, [pc, #272]	; (800089c <socket+0x1e4>)
 800078c:	8011      	strh	r1, [r2, #0]
 800078e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000790:	4b42      	ldr	r3, [pc, #264]	; (800089c <socket+0x1e4>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000798:	4293      	cmp	r3, r2
 800079a:	d103      	bne.n	80007a4 <socket+0xec>
 800079c:	4b3f      	ldr	r3, [pc, #252]	; (800089c <socket+0x1e4>)
 800079e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80007a2:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	3301      	adds	r3, #1
 80007aa:	00db      	lsls	r3, r3, #3
 80007ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007b0:	461a      	mov	r2, r3
 80007b2:	88bb      	ldrh	r3, [r7, #4]
 80007b4:	0a1b      	lsrs	r3, r3, #8
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4610      	mov	r0, r2
 80007bc:	4619      	mov	r1, r3
 80007be:	f001 fbe5 	bl	8001f8c <WIZCHIP_WRITE>
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	3301      	adds	r3, #1
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80007ce:	461a      	mov	r2, r3
 80007d0:	88bb      	ldrh	r3, [r7, #4]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	4610      	mov	r0, r2
 80007d6:	4619      	mov	r1, r3
 80007d8:	f001 fbd8 	bl	8001f8c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	3301      	adds	r3, #1
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80007e8:	4618      	mov	r0, r3
 80007ea:	2101      	movs	r1, #1
 80007ec:	f001 fbce 	bl	8001f8c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80007f0:	bf00      	nop
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	3301      	adds	r3, #1
 80007f8:	00db      	lsls	r3, r3, #3
 80007fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 fb90 	bl	8001f24 <WIZCHIP_READ>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d1f3      	bne.n	80007f2 <socket+0x13a>
   // 这儿没有清空socket 的io mode
   sock_io_mode &= ~(1 << sn);      //FIX:清除相应的位
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2201      	movs	r2, #1
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	b29b      	uxth	r3, r3
 8000814:	43db      	mvns	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <socket+0x1e8>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	b29b      	uxth	r3, r3
 800081e:	4013      	ands	r3, r2
 8000820:	b29b      	uxth	r3, r3
 8000822:	b29a      	uxth	r2, r3
 8000824:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <socket+0x1e8>)
 8000826:	801a      	strh	r2, [r3, #0]
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000828:	78fb      	ldrb	r3, [r7, #3]
 800082a:	f003 0201 	and.w	r2, r3, #1
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	b29a      	uxth	r2, r3
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <socket+0x1e8>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	b29b      	uxth	r3, r3
 800083c:	4313      	orrs	r3, r2
 800083e:	b29b      	uxth	r3, r3
 8000840:	b29a      	uxth	r2, r3
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <socket+0x1e8>)
 8000844:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2201      	movs	r2, #1
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	b29b      	uxth	r3, r3
 8000850:	43db      	mvns	r3, r3
 8000852:	b29a      	uxth	r2, r3
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <socket+0x1ec>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	b29b      	uxth	r3, r3
 800085a:	4013      	ands	r3, r2
 800085c:	b29b      	uxth	r3, r3
 800085e:	b29a      	uxth	r2, r3
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <socket+0x1ec>)
 8000862:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <socket+0x1f0>)
 8000868:	2100      	movs	r1, #0
 800086a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = 0;
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <socket+0x1f4>)
 8000872:	2100      	movs	r1, #0
 8000874:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000876:	bf00      	nop
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	3301      	adds	r3, #1
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000884:	4618      	mov	r0, r3
 8000886:	f001 fb4d 	bl	8001f24 <WIZCHIP_READ>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d0f3      	beq.n	8000878 <socket+0x1c0>
   return (int8_t)sn;
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	b25b      	sxtb	r3, r3
}	   
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bd90      	pop	{r4, r7, pc}
 800089c:	2000001c 	andcs	r0, r0, ip, lsl r0
 80008a0:	200000e8 	andcs	r0, r0, r8, ror #1
 80008a4:	200000ea 	andcs	r0, r0, sl, ror #1
 80008a8:	200000ec 	andcs	r0, r0, ip, ror #1
 80008ac:	200000fc 	strdcs	r0, [r0], -ip

080008b0 <close>:

int8_t close(uint8_t sn)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	2b08      	cmp	r3, #8
 80008be:	d901      	bls.n	80008c4 <close+0x14>
 80008c0:	23ff      	movs	r3, #255	; 0xff
 80008c2:	e046      	b.n	8000952 <close+0xa2>
	
	setSn_CR(sn,Sn_CR_CLOSE);
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	3301      	adds	r3, #1
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80008d0:	4618      	mov	r0, r3
 80008d2:	2110      	movs	r1, #16
 80008d4:	f001 fb5a 	bl	8001f8c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80008d8:	bf00      	nop
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	3301      	adds	r3, #1
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 fb1c 	bl	8001f24 <WIZCHIP_READ>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1f3      	bne.n	80008da <close+0x2a>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	3301      	adds	r3, #1
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80008fe:	4618      	mov	r0, r3
 8000900:	211f      	movs	r1, #31
 8000902:	f001 fb43 	bl	8001f8c <WIZCHIP_WRITE>
	sock_is_sending &= ~(1<<sn);
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2201      	movs	r2, #1
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	b29b      	uxth	r3, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	b29a      	uxth	r2, r3
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <close+0xac>)
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	b29b      	uxth	r3, r3
 800091a:	4013      	ands	r3, r2
 800091c:	b29b      	uxth	r3, r3
 800091e:	b29a      	uxth	r2, r3
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <close+0xac>)
 8000922:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <close+0xb0>)
 8000928:	2100      	movs	r1, #0
 800092a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	4a0c      	ldr	r2, [pc, #48]	; (8000964 <close+0xb4>)
 8000932:	2100      	movs	r1, #0
 8000934:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000936:	bf00      	nop
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	3301      	adds	r3, #1
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000944:	4618      	mov	r0, r3
 8000946:	f001 faed 	bl	8001f24 <WIZCHIP_READ>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d1f3      	bne.n	8000938 <close+0x88>
	return SOCK_OK;
 8000950:	2301      	movs	r3, #1
 8000952:	b25b      	sxtb	r3, r3
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200000ea 	andcs	r0, r0, sl, ror #1
 8000960:	200000ec 	andcs	r0, r0, ip, ror #1
 8000964:	200000fc 	strdcs	r0, [r0], -ip

08000968 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	2b08      	cmp	r3, #8
 800097c:	d901      	bls.n	8000982 <connect+0x1a>
 800097e:	23ff      	movs	r3, #255	; 0xff
 8000980:	e09d      	b.n	8000abe <connect+0x156>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	3301      	adds	r3, #1
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	4618      	mov	r0, r3
 800098c:	f001 faca 	bl	8001f24 <WIZCHIP_READ>
 8000990:	4603      	mov	r3, r0
 8000992:	f003 030f 	and.w	r3, r3, #15
 8000996:	2b01      	cmp	r3, #1
 8000998:	d001      	beq.n	800099e <connect+0x36>
 800099a:	23fb      	movs	r3, #251	; 0xfb
 800099c:	e08f      	b.n	8000abe <connect+0x156>
   CHECK_SOCKINIT();
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	3301      	adds	r3, #1
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 faba 	bl	8001f24 <WIZCHIP_READ>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b13      	cmp	r3, #19
 80009b4:	d001      	beq.n	80009ba <connect+0x52>
 80009b6:	23fd      	movs	r3, #253	; 0xfd
 80009b8:	e081      	b.n	8000abe <connect+0x156>
	if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009c2:	d003      	beq.n	80009cc <connect+0x64>
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d101      	bne.n	80009d0 <connect+0x68>
 80009cc:	23f4      	movs	r3, #244	; 0xf4
 80009ce:	e076      	b.n	8000abe <connect+0x156>
	if(port == 0) return SOCKERR_PORTZERO;
 80009d0:	88bb      	ldrh	r3, [r7, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d101      	bne.n	80009da <connect+0x72>
 80009d6:	23f5      	movs	r3, #245	; 0xf5
 80009d8:	e071      	b.n	8000abe <connect+0x156>
	setSn_DIPR(sn,addr);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	3301      	adds	r3, #1
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80009e6:	4618      	mov	r0, r3
 80009e8:	6839      	ldr	r1, [r7, #0]
 80009ea:	2204      	movs	r2, #4
 80009ec:	f001 fb4c 	bl	8002088 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	3301      	adds	r3, #1
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009fc:	461a      	mov	r2, r3
 80009fe:	88bb      	ldrh	r3, [r7, #4]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f001 fabf 	bl	8001f8c <WIZCHIP_WRITE>
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	3301      	adds	r3, #1
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	88bb      	ldrh	r3, [r7, #4]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	4610      	mov	r0, r2
 8000a22:	4619      	mov	r1, r3
 8000a24:	f001 fab2 	bl	8001f8c <WIZCHIP_WRITE>
   #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
      setSUBR(0);
   #endif
	setSn_CR(sn,Sn_CR_CONNECT);
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	00db      	lsls	r3, r3, #3
 8000a30:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a34:	4618      	mov	r0, r3
 8000a36:	2104      	movs	r1, #4
 8000a38:	f001 faa8 	bl	8001f8c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000a3c:	bf00      	nop
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	3301      	adds	r3, #1
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 fa6a 	bl	8001f24 <WIZCHIP_READ>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1f3      	bne.n	8000a3e <connect+0xd6>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8000a56:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <connect+0x160>)
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	fa42 f303 	asr.w	r3, r2, r3
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <connect+0x106>
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e027      	b.n	8000abe <connect+0x156>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8000a6e:	e019      	b.n	8000aa4 <connect+0x13c>
   {   
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	3301      	adds	r3, #1
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f001 fa51 	bl	8001f24 <WIZCHIP_READ>
 8000a82:	4603      	mov	r3, r0
 8000a84:	f003 0308 	and.w	r3, r3, #8
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00b      	beq.n	8000aa4 <connect+0x13c>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	3301      	adds	r3, #1
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a98:	4618      	mov	r0, r3
 8000a9a:	2108      	movs	r1, #8
 8000a9c:	f001 fa76 	bl	8001f8c <WIZCHIP_WRITE>
         #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
            setSUBR((uint8_t*)"\x00\x00\x00\x00");
         #endif
         return SOCKERR_TIMEOUT;
 8000aa0:	23f3      	movs	r3, #243	; 0xf3
 8000aa2:	e00c      	b.n	8000abe <connect+0x156>
      setSUBR(0);
   #endif
	setSn_CR(sn,Sn_CR_CONNECT);
   while(getSn_CR(sn));
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	00db      	lsls	r3, r3, #3
 8000aac:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 fa37 	bl	8001f24 <WIZCHIP_READ>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b17      	cmp	r3, #23
 8000aba:	d1d9      	bne.n	8000a70 <connect+0x108>
	}
   #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
      setSUBR((uint8_t*)"\x00\x00\x00\x00");
   #endif
   
   return SOCK_OK;
 8000abc:	2301      	movs	r3, #1
 8000abe:	b25b      	sxtb	r3, r3
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200000e8 	andcs	r0, r0, r8, ror #1

08000acc <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	71fb      	strb	r3, [r7, #7]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	2b08      	cmp	r3, #8
 8000ae8:	d902      	bls.n	8000af0 <send+0x24>
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aee:	e0df      	b.n	8000cb0 <send+0x1e4>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	3301      	adds	r3, #1
 8000af6:	00db      	lsls	r3, r3, #3
 8000af8:	4618      	mov	r0, r3
 8000afa:	f001 fa13 	bl	8001f24 <WIZCHIP_READ>
 8000afe:	4603      	mov	r3, r0
 8000b00:	f003 030f 	and.w	r3, r3, #15
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d002      	beq.n	8000b0e <send+0x42>
 8000b08:	f06f 0304 	mvn.w	r3, #4
 8000b0c:	e0d0      	b.n	8000cb0 <send+0x1e4>
   CHECK_SOCKDATA();
 8000b0e:	88bb      	ldrh	r3, [r7, #4]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d102      	bne.n	8000b1a <send+0x4e>
 8000b14:	f06f 030d 	mvn.w	r3, #13
 8000b18:	e0ca      	b.n	8000cb0 <send+0x1e4>
   tmp = getSn_SR(sn);
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	3301      	adds	r3, #1
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 f9fc 	bl	8001f24 <WIZCHIP_READ>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	2b17      	cmp	r3, #23
 8000b34:	d005      	beq.n	8000b42 <send+0x76>
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	2b1c      	cmp	r3, #28
 8000b3a:	d002      	beq.n	8000b42 <send+0x76>
 8000b3c:	f06f 0306 	mvn.w	r3, #6
 8000b40:	e0b6      	b.n	8000cb0 <send+0x1e4>
   if( sock_is_sending & (1<<sn) )
 8000b42:	4b5d      	ldr	r3, [pc, #372]	; (8000cb8 <send+0x1ec>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	fa42 f303 	asr.w	r3, r2, r3
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d039      	beq.n	8000bca <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 f9de 	bl	8001f24 <WIZCHIP_READ>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	f003 031f 	and.w	r3, r3, #31
 8000b6e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	f003 0310 	and.w	r3, r3, #16
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d019      	beq.n	8000bae <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	3301      	adds	r3, #1
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b86:	4618      	mov	r0, r3
 8000b88:	2110      	movs	r1, #16
 8000b8a:	f001 f9ff 	bl	8001f8c <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCKERR_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2201      	movs	r2, #1
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	4b46      	ldr	r3, [pc, #280]	; (8000cb8 <send+0x1ec>)
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	4b43      	ldr	r3, [pc, #268]	; (8000cb8 <send+0x1ec>)
 8000baa:	801a      	strh	r2, [r3, #0]
 8000bac:	e00d      	b.n	8000bca <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	f003 0308 	and.w	r3, r3, #8
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d006      	beq.n	8000bc6 <send+0xfa>
      {
         close(sn);
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fe78 	bl	80008b0 <close>
         return SOCKERR_TIMEOUT;
 8000bc0:	f06f 030c 	mvn.w	r3, #12
 8000bc4:	e074      	b.n	8000cb0 <send+0x1e4>
      }
      else return SOCK_BUSY;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e072      	b.n	8000cb0 <send+0x1e4>
   }
   freesize = getSn_TxMAX(sn);
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	3301      	adds	r3, #1
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 f9a4 	bl	8001f24 <WIZCHIP_READ>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	029b      	lsls	r3, r3, #10
 8000be2:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8000be4:	88ba      	ldrh	r2, [r7, #4]
 8000be6:	89bb      	ldrh	r3, [r7, #12]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d901      	bls.n	8000bf0 <send+0x124>
 8000bec:	89bb      	ldrh	r3, [r7, #12]
 8000bee:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 fa92 	bl	800211c <getSn_TX_FSR>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	3301      	adds	r3, #1
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 f98b 	bl	8001f24 <WIZCHIP_READ>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	2b17      	cmp	r3, #23
 8000c16:	d009      	beq.n	8000c2c <send+0x160>
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	2b1c      	cmp	r3, #28
 8000c1c:	d006      	beq.n	8000c2c <send+0x160>
      {
         close(sn);
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fe45 	bl	80008b0 <close>
         return SOCKERR_SOCKSTATUS;
 8000c26:	f06f 0306 	mvn.w	r3, #6
 8000c2a:	e041      	b.n	8000cb0 <send+0x1e4>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000c2c:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <send+0x1f0>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	fa42 f303 	asr.w	r3, r2, r3
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d005      	beq.n	8000c4c <send+0x180>
 8000c40:	88ba      	ldrh	r2, [r7, #4]
 8000c42:	89bb      	ldrh	r3, [r7, #12]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d901      	bls.n	8000c4c <send+0x180>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e031      	b.n	8000cb0 <send+0x1e4>
      if(len <= freesize) break;
 8000c4c:	88ba      	ldrh	r2, [r7, #4]
 8000c4e:	89bb      	ldrh	r3, [r7, #12]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d812      	bhi.n	8000c7a <send+0x1ae>
 8000c54:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8000c56:	79fa      	ldrb	r2, [r7, #7]
 8000c58:	88bb      	ldrh	r3, [r7, #4]
 8000c5a:	4610      	mov	r0, r2
 8000c5c:	6839      	ldr	r1, [r7, #0]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	f001 faf4 	bl	800224c <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif
   setSn_CR(sn,Sn_CR_SEND);
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	3301      	adds	r3, #1
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c70:	4618      	mov	r0, r3
 8000c72:	2120      	movs	r1, #32
 8000c74:	f001 f98a 	bl	8001f8c <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8000c78:	e000      	b.n	8000c7c <send+0x1b0>
         close(sn);
         return SOCKERR_SOCKSTATUS;
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
      if(len <= freesize) break;
   }
 8000c7a:	e7b9      	b.n	8000bf0 <send+0x124>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif
   setSn_CR(sn,Sn_CR_SEND);
   /* wait to process the command... */
   while(getSn_CR(sn));
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	3301      	adds	r3, #1
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f001 f94b 	bl	8001f24 <WIZCHIP_READ>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f3      	bne.n	8000c7c <send+0x1b0>
   sock_is_sending |= (1 << sn);
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	2201      	movs	r2, #1
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <send+0x1ec>)
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <send+0x1ec>)
 8000cac:	801a      	strh	r2, [r3, #0]
   return len;
 8000cae:	88bb      	ldrh	r3, [r7, #4]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200000ea 	andcs	r0, r0, sl, ror #1
 8000cbc:	200000e8 	andcs	r0, r0, r8, ror #1

08000cc0 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	81bb      	strh	r3, [r7, #12]
   CHECK_SOCKNUM();
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b08      	cmp	r3, #8
 8000cdc:	d902      	bls.n	8000ce4 <recv+0x24>
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ce2:	e09c      	b.n	8000e1e <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	3301      	adds	r3, #1
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	4618      	mov	r0, r3
 8000cee:	f001 f919 	bl	8001f24 <WIZCHIP_READ>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	f003 030f 	and.w	r3, r3, #15
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d002      	beq.n	8000d02 <recv+0x42>
 8000cfc:	f06f 0304 	mvn.w	r3, #4
 8000d00:	e08d      	b.n	8000e1e <recv+0x15e>
   CHECK_SOCKDATA();
 8000d02:	88bb      	ldrh	r3, [r7, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <recv+0x4e>
 8000d08:	f06f 030d 	mvn.w	r3, #13
 8000d0c:	e087      	b.n	8000e1e <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	3301      	adds	r3, #1
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 f902 	bl	8001f24 <WIZCHIP_READ>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	029b      	lsls	r3, r3, #10
 8000d26:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8000d28:	89ba      	ldrh	r2, [r7, #12]
 8000d2a:	88bb      	ldrh	r3, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d201      	bcs.n	8000d34 <recv+0x74>
 8000d30:	89bb      	ldrh	r3, [r7, #12]
 8000d32:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      recvsize = getSn_RX_RSR(sn);
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 fa3c 	bl	80021b4 <getSn_RX_RSR>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	3301      	adds	r3, #1
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f001 f8e9 	bl	8001f24 <WIZCHIP_READ>
 8000d52:	4603      	mov	r3, r0
 8000d54:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED)
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	2b17      	cmp	r3, #23
 8000d5a:	d027      	beq.n	8000dac <recv+0xec>
      {
         if(tmp == SOCK_CLOSE_WAIT)
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	2b1c      	cmp	r3, #28
 8000d60:	d11d      	bne.n	8000d9e <recv+0xde>
         {
            if(recvsize != 0) break;
 8000d62:	89bb      	ldrh	r3, [r7, #12]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d000      	beq.n	8000d6a <recv+0xaa>
 8000d68:	e034      	b.n	8000dd4 <recv+0x114>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 f9d5 	bl	800211c <getSn_TX_FSR>
 8000d72:	4603      	mov	r3, r0
 8000d74:	461c      	mov	r4, r3
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 f8ce 	bl	8001f24 <WIZCHIP_READ>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	029b      	lsls	r3, r3, #10
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	d10d      	bne.n	8000dac <recv+0xec>
            {
               close(sn);
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fd8c 	bl	80008b0 <close>
               return SOCKERR_SOCKSTATUS;
 8000d98:	f06f 0306 	mvn.w	r3, #6
 8000d9c:	e03f      	b.n	8000e1e <recv+0x15e>
            }
         }
         else
         {
            close(sn);
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fd85 	bl	80008b0 <close>
            return SOCKERR_SOCKSTATUS;
 8000da6:	f06f 0306 	mvn.w	r3, #6
 8000daa:	e038      	b.n	8000e1e <recv+0x15e>
         }
      }
      if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8000dac:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <recv+0x168>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	fa42 f303 	asr.w	r3, r2, r3
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d004      	beq.n	8000dca <recv+0x10a>
 8000dc0:	89bb      	ldrh	r3, [r7, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <recv+0x10a>
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e029      	b.n	8000e1e <recv+0x15e>
      if(recvsize != 0) break;
 8000dca:	89bb      	ldrh	r3, [r7, #12]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d000      	beq.n	8000dd2 <recv+0x112>
 8000dd0:	e000      	b.n	8000dd4 <recv+0x114>
   };
 8000dd2:	e7af      	b.n	8000d34 <recv+0x74>
   if(recvsize < len) len = recvsize;
 8000dd4:	89ba      	ldrh	r2, [r7, #12]
 8000dd6:	88bb      	ldrh	r3, [r7, #4]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d201      	bcs.n	8000de0 <recv+0x120>
 8000ddc:	89bb      	ldrh	r3, [r7, #12]
 8000dde:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8000de0:	79fa      	ldrb	r2, [r7, #7]
 8000de2:	88bb      	ldrh	r3, [r7, #4]
 8000de4:	4610      	mov	r0, r2
 8000de6:	6839      	ldr	r1, [r7, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	f001 fa8b 	bl	8002304 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	3301      	adds	r3, #1
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	2140      	movs	r1, #64	; 0x40
 8000dfe:	f001 f8c5 	bl	8001f8c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000e02:	bf00      	nop
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	3301      	adds	r3, #1
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 f887 	bl	8001f24 <WIZCHIP_READ>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f3      	bne.n	8000e04 <recv+0x144>
   return len;
 8000e1c:	88bb      	ldrh	r3, [r7, #4]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd90      	pop	{r4, r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200000e8 	andcs	r0, r0, r8, ror #1

08000e2c <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	4603      	mov	r3, r0
 8000e38:	73fb      	strb	r3, [r7, #15]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	82bb      	strh	r3, [r7, #20]
   CHECK_SOCKNUM();
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	2b08      	cmp	r3, #8
 8000e4a:	d902      	bls.n	8000e52 <sendto+0x26>
 8000e4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e50:	e0ed      	b.n	800102e <sendto+0x202>
   switch(getSn_MR(sn) & 0x0F)
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	3301      	adds	r3, #1
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 f862 	bl	8001f24 <WIZCHIP_READ>
 8000e60:	4603      	mov	r3, r0
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d004      	beq.n	8000e74 <sendto+0x48>
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	d002      	beq.n	8000e74 <sendto+0x48>
   {
      case Sn_MR_UDP:
      case Sn_MR_MACRAW:
         break;
      default:
         return SOCKERR_SOCKMODE;
 8000e6e:	f06f 0304 	mvn.w	r3, #4
 8000e72:	e0dc      	b.n	800102e <sendto+0x202>
   CHECK_SOCKNUM();
   switch(getSn_MR(sn) & 0x0F)
   {
      case Sn_MR_UDP:
      case Sn_MR_MACRAW:
         break;
 8000e74:	bf00      	nop
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
 8000e76:	89bb      	ldrh	r3, [r7, #12]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <sendto+0x56>
 8000e7c:	f06f 030d 	mvn.w	r3, #13
 8000e80:	e0d5      	b.n	800102e <sendto+0x202>
   if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d102      	bne.n	8000e90 <sendto+0x64>
 8000e8a:	f06f 030b 	mvn.w	r3, #11
 8000e8e:	e0ce      	b.n	800102e <sendto+0x202>
   if(port == 0)               return SOCKERR_PORTZERO;
 8000e90:	8c3b      	ldrh	r3, [r7, #32]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d102      	bne.n	8000e9c <sendto+0x70>
 8000e96:	f06f 030a 	mvn.w	r3, #10
 8000e9a:	e0c8      	b.n	800102e <sendto+0x202>
   tmp = getSn_SR(sn);
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f001 f83b 	bl	8001f24 <WIZCHIP_READ>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	75fb      	strb	r3, [r7, #23]
   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
 8000eb2:	7dfb      	ldrb	r3, [r7, #23]
 8000eb4:	2b42      	cmp	r3, #66	; 0x42
 8000eb6:	d005      	beq.n	8000ec4 <sendto+0x98>
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	2b22      	cmp	r3, #34	; 0x22
 8000ebc:	d002      	beq.n	8000ec4 <sendto+0x98>
 8000ebe:	f06f 0306 	mvn.w	r3, #6
 8000ec2:	e0b4      	b.n	800102e <sendto+0x202>
      
   setSn_DIPR(sn,addr);
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	3301      	adds	r3, #1
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	f001 f8d7 	bl	8002088 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	3301      	adds	r3, #1
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	8c3b      	ldrh	r3, [r7, #32]
 8000eea:	0a1b      	lsrs	r3, r3, #8
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f001 f84a 	bl	8001f8c <WIZCHIP_WRITE>
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	3301      	adds	r3, #1
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000f04:	461a      	mov	r2, r3
 8000f06:	8c3b      	ldrh	r3, [r7, #32]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f001 f83d 	bl	8001f8c <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	3301      	adds	r3, #1
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 f800 	bl	8001f24 <WIZCHIP_READ>
 8000f24:	4603      	mov	r3, r0
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	029b      	lsls	r3, r3, #10
 8000f2a:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8000f2c:	89ba      	ldrh	r2, [r7, #12]
 8000f2e:	8abb      	ldrh	r3, [r7, #20]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d901      	bls.n	8000f38 <sendto+0x10c>
 8000f34:	8abb      	ldrh	r3, [r7, #20]
 8000f36:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 f8ee 	bl	800211c <getSn_TX_FSR>
 8000f40:	4603      	mov	r3, r0
 8000f42:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	3301      	adds	r3, #1
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 ffe7 	bl	8001f24 <WIZCHIP_READ>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <sendto+0x136>
 8000f5c:	f06f 0303 	mvn.w	r3, #3
 8000f60:	e065      	b.n	800102e <sendto+0x202>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000f62:	4b35      	ldr	r3, [pc, #212]	; (8001038 <sendto+0x20c>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	fa42 f303 	asr.w	r3, r2, r3
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d005      	beq.n	8000f82 <sendto+0x156>
 8000f76:	89ba      	ldrh	r2, [r7, #12]
 8000f78:	8abb      	ldrh	r3, [r7, #20]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d901      	bls.n	8000f82 <sendto+0x156>
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e055      	b.n	800102e <sendto+0x202>
      if(len <= freesize) break;
 8000f82:	89ba      	ldrh	r2, [r7, #12]
 8000f84:	8abb      	ldrh	r3, [r7, #20]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d812      	bhi.n	8000fb0 <sendto+0x184>
 8000f8a:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	89bb      	ldrh	r3, [r7, #12]
 8000f90:	4610      	mov	r0, r2
 8000f92:	68b9      	ldr	r1, [r7, #8]
 8000f94:	461a      	mov	r2, r3
 8000f96:	f001 f959 	bl	800224c <wiz_send_data>

   #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
      setSUBR(0);
   #endif

	setSn_CR(sn,Sn_CR_SEND);
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	2120      	movs	r1, #32
 8000faa:	f000 ffef 	bl	8001f8c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8000fae:	e000      	b.n	8000fb2 <sendto+0x186>
   {
      freesize = getSn_TX_FSR(sn);
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
      if(len <= freesize) break;
   };
 8000fb0:	e7c2      	b.n	8000f38 <sendto+0x10c>
      setSUBR(0);
   #endif

	setSn_CR(sn,Sn_CR_SEND);
	/* wait to process the command... */
	while(getSn_CR(sn));
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 ffb0 	bl	8001f24 <WIZCHIP_READ>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f3      	bne.n	8000fb2 <sendto+0x186>
   #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
      setSUBR((uint8_t*)"\x00\x00\x00\x00");
   #endif
   while(1)
   {
      tmp = getSn_IR(sn);
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	3301      	adds	r3, #1
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 ffa4 	bl	8001f24 <WIZCHIP_READ>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f003 031f 	and.w	r3, r3, #31
 8000fe2:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8000fe4:	7dfb      	ldrb	r3, [r7, #23]
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00c      	beq.n	8001008 <sendto+0x1dc>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	2110      	movs	r1, #16
 8000ffe:	f000 ffc5 	bl	8001f8c <WIZCHIP_WRITE>
         break;
 8001002:	bf00      	nop
         setSn_IR(sn, Sn_IR_TIMEOUT);
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
	return len;
 8001004:	89bb      	ldrh	r3, [r7, #12]
 8001006:	e012      	b.n	800102e <sendto+0x202>
         setSn_IR(sn, Sn_IR_SENDOK);
         break;
      }
      //M:20131104
      //else if(tmp & Sn_IR_TIMEOUT) return SOCKERR_TIMEOUT;
      else if(tmp & Sn_IR_TIMEOUT)
 8001008:	7dfb      	ldrb	r3, [r7, #23]
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00c      	beq.n	800102c <sendto+0x200>
      {
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	3301      	adds	r3, #1
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800101e:	4618      	mov	r0, r3
 8001020:	2108      	movs	r1, #8
 8001022:	f000 ffb3 	bl	8001f8c <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8001026:	f06f 030c 	mvn.w	r3, #12
 800102a:	e000      	b.n	800102e <sendto+0x202>
      }
      ////////////
   }
 800102c:	e7cd      	b.n	8000fca <sendto+0x19e>
	return len;
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200000e8 	andcs	r0, r0, r8, ror #1

0800103c <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	4603      	mov	r3, r0
 8001048:	73fb      	strb	r3, [r7, #15]
 800104a:	4613      	mov	r3, r2
 800104c:	81bb      	strh	r3, [r7, #12]
   uint8_t  mr;
   uint8_t  head[8];
	uint16_t pack_len=0;
 800104e:	2300      	movs	r3, #0
 8001050:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	2b08      	cmp	r3, #8
 8001056:	d902      	bls.n	800105e <recvfrom+0x22>
 8001058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800105c:	e166      	b.n	800132c <recvfrom+0x2f0>
   //CHECK_SOCKMODE(Sn_MR_UDP);
   switch((mr=getSn_MR(sn)) & 0x0F)
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	3301      	adds	r3, #1
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4618      	mov	r0, r3
 8001068:	f000 ff5c 	bl	8001f24 <WIZCHIP_READ>
 800106c:	4603      	mov	r3, r0
 800106e:	777b      	strb	r3, [r7, #29]
 8001070:	7f7b      	ldrb	r3, [r7, #29]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	2b02      	cmp	r3, #2
 8001078:	d004      	beq.n	8001084 <recvfrom+0x48>
 800107a:	2b04      	cmp	r3, #4
 800107c:	d002      	beq.n	8001084 <recvfrom+0x48>
      case Sn_MR_IPRAW:
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 800107e:	f06f 0304 	mvn.w	r3, #4
 8001082:	e153      	b.n	800132c <recvfrom+0x2f0>
   //CHECK_SOCKMODE(Sn_MR_UDP);
   switch((mr=getSn_MR(sn)) & 0x0F)
   {
      case Sn_MR_UDP:
      case Sn_MR_MACRAW:
         break;
 8001084:	bf00      	nop
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
 8001086:	89bb      	ldrh	r3, [r7, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d102      	bne.n	8001092 <recvfrom+0x56>
 800108c:	f06f 030d 	mvn.w	r3, #13
 8001090:	e14c      	b.n	800132c <recvfrom+0x2f0>
   if(sock_remained_size[sn] == 0)
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	4aa7      	ldr	r2, [pc, #668]	; (8001334 <recvfrom+0x2f8>)
 8001096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d128      	bne.n	80010f0 <recvfrom+0xb4>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 f887 	bl	80021b4 <getSn_RX_RSR>
 80010a6:	4603      	mov	r3, r0
 80010a8:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	3301      	adds	r3, #1
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 ff34 	bl	8001f24 <WIZCHIP_READ>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d102      	bne.n	80010c8 <recvfrom+0x8c>
 80010c2:	f06f 0303 	mvn.w	r3, #3
 80010c6:	e131      	b.n	800132c <recvfrom+0x2f0>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 80010c8:	4b9b      	ldr	r3, [pc, #620]	; (8001338 <recvfrom+0x2fc>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	fa42 f303 	asr.w	r3, r2, r3
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d004      	beq.n	80010e6 <recvfrom+0xaa>
 80010dc:	8bfb      	ldrh	r3, [r7, #30]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <recvfrom+0xaa>
 80010e2:	2300      	movs	r3, #0
 80010e4:	e122      	b.n	800132c <recvfrom+0x2f0>
         if(pack_len != 0) break;
 80010e6:	8bfb      	ldrh	r3, [r7, #30]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d000      	beq.n	80010ee <recvfrom+0xb2>
 80010ec:	e000      	b.n	80010f0 <recvfrom+0xb4>
      };
 80010ee:	e7d6      	b.n	800109e <recvfrom+0x62>
   }
   sock_pack_info[sn] = PACK_COMPLETED;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	4a92      	ldr	r2, [pc, #584]	; (800133c <recvfrom+0x300>)
 80010f4:	2100      	movs	r1, #0
 80010f6:	54d1      	strb	r1, [r2, r3]
	switch (mr & 0x07)
 80010f8:	7f7b      	ldrb	r3, [r7, #29]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d002      	beq.n	8001108 <recvfrom+0xcc>
 8001102:	2b04      	cmp	r3, #4
 8001104:	d071      	beq.n	80011ea <recvfrom+0x1ae>
 8001106:	e0d3      	b.n	80012b0 <recvfrom+0x274>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	4a8a      	ldr	r2, [pc, #552]	; (8001334 <recvfrom+0x2f8>)
 800110c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d153      	bne.n	80011bc <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	2208      	movs	r2, #8
 8001120:	f001 f8f0 	bl	8002304 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	3301      	adds	r3, #1
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001130:	4618      	mov	r0, r3
 8001132:	2140      	movs	r1, #64	; 0x40
 8001134:	f000 ff2a 	bl	8001f8c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8001138:	bf00      	nop
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	3301      	adds	r3, #1
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001146:	4618      	mov	r0, r3
 8001148:	f000 feec 	bl	8001f24 <WIZCHIP_READ>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f3      	bne.n	800113a <recvfrom+0xfe>
   			// read peer's IP address, port number & packet length
    			addr[0] = head[0];
 8001152:	7d3a      	ldrb	r2, [r7, #20]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3301      	adds	r3, #1
 800115c:	7d7a      	ldrb	r2, [r7, #21]
 800115e:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3302      	adds	r3, #2
 8001164:	7dba      	ldrb	r2, [r7, #22]
 8001166:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3303      	adds	r3, #3
 800116c:	7dfa      	ldrb	r2, [r7, #23]
 800116e:	701a      	strb	r2, [r3, #0]
   			*port = head[4];
 8001170:	7e3b      	ldrb	r3, [r7, #24]
 8001172:	b29a      	uxth	r2, r3
 8001174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001176:	801a      	strh	r2, [r3, #0]
   			*port = (*port << 8) + head[5];
 8001178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	b29a      	uxth	r2, r3
 8001180:	7e7b      	ldrb	r3, [r7, #25]
 8001182:	b29b      	uxth	r3, r3
 8001184:	4413      	add	r3, r2
 8001186:	b29a      	uxth	r2, r3
 8001188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118a:	801a      	strh	r2, [r3, #0]
   			sock_remained_size[sn] = head[6];
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	7eba      	ldrb	r2, [r7, #26]
 8001190:	b291      	uxth	r1, r2
 8001192:	4a68      	ldr	r2, [pc, #416]	; (8001334 <recvfrom+0x2f8>)
 8001194:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	4965      	ldr	r1, [pc, #404]	; (8001334 <recvfrom+0x2f8>)
 800119e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80011a2:	0212      	lsls	r2, r2, #8
 80011a4:	b291      	uxth	r1, r2
 80011a6:	7efa      	ldrb	r2, [r7, #27]
 80011a8:	b292      	uxth	r2, r2
 80011aa:	440a      	add	r2, r1
 80011ac:	b291      	uxth	r1, r2
 80011ae:	4a61      	ldr	r2, [pc, #388]	; (8001334 <recvfrom+0x2f8>)
 80011b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	4a61      	ldr	r2, [pc, #388]	; (800133c <recvfrom+0x300>)
 80011b8:	2180      	movs	r1, #128	; 0x80
 80011ba:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4a5d      	ldr	r2, [pc, #372]	; (8001334 <recvfrom+0x2f8>)
 80011c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011c4:	89ba      	ldrh	r2, [r7, #12]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d202      	bcs.n	80011d0 <recvfrom+0x194>
 80011ca:	89bb      	ldrh	r3, [r7, #12]
 80011cc:	83fb      	strh	r3, [r7, #30]
 80011ce:	e004      	b.n	80011da <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	4a58      	ldr	r2, [pc, #352]	; (8001334 <recvfrom+0x2f8>)
 80011d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011d8:	83fb      	strh	r3, [r7, #30]
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80011da:	7bfa      	ldrb	r2, [r7, #15]
 80011dc:	8bfb      	ldrh	r3, [r7, #30]
 80011de:	4610      	mov	r0, r2
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	461a      	mov	r2, r3
 80011e4:	f001 f88e 	bl	8002304 <wiz_recv_data>
			break;
 80011e8:	e06e      	b.n	80012c8 <recvfrom+0x28c>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	4a51      	ldr	r2, [pc, #324]	; (8001334 <recvfrom+0x2f8>)
 80011ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d145      	bne.n	8001282 <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	2202      	movs	r2, #2
 8001202:	f001 f87f 	bl	8002304 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	3301      	adds	r3, #1
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001212:	4618      	mov	r0, r3
 8001214:	2140      	movs	r1, #64	; 0x40
 8001216:	f000 feb9 	bl	8001f8c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800121a:	bf00      	nop
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	3301      	adds	r3, #1
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fe7b 	bl	8001f24 <WIZCHIP_READ>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1f3      	bne.n	800121c <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	7d3a      	ldrb	r2, [r7, #20]
 8001238:	b291      	uxth	r1, r2
 800123a:	4a3e      	ldr	r2, [pc, #248]	; (8001334 <recvfrom+0x2f8>)
 800123c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1];
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	493b      	ldr	r1, [pc, #236]	; (8001334 <recvfrom+0x2f8>)
 8001246:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800124a:	0212      	lsls	r2, r2, #8
 800124c:	b291      	uxth	r1, r2
 800124e:	7d7a      	ldrb	r2, [r7, #21]
 8001250:	b292      	uxth	r2, r2
 8001252:	440a      	add	r2, r1
 8001254:	b291      	uxth	r1, r2
 8001256:	4a37      	ldr	r2, [pc, #220]	; (8001334 <recvfrom+0x2f8>)
 8001258:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] > 1514) 
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	4a35      	ldr	r2, [pc, #212]	; (8001334 <recvfrom+0x2f8>)
 8001260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001264:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8001268:	4293      	cmp	r3, r2
 800126a:	d906      	bls.n	800127a <recvfrom+0x23e>
   			{
   			   close(sn);
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fb1e 	bl	80008b0 <close>
   			   return SOCKFATAL_PACKLEN;
 8001274:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8001278:	e058      	b.n	800132c <recvfrom+0x2f0>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	4a2f      	ldr	r2, [pc, #188]	; (800133c <recvfrom+0x300>)
 800127e:	2180      	movs	r1, #128	; 0x80
 8001280:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	4a2b      	ldr	r2, [pc, #172]	; (8001334 <recvfrom+0x2f8>)
 8001286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800128a:	89ba      	ldrh	r2, [r7, #12]
 800128c:	429a      	cmp	r2, r3
 800128e:	d202      	bcs.n	8001296 <recvfrom+0x25a>
 8001290:	89bb      	ldrh	r3, [r7, #12]
 8001292:	83fb      	strh	r3, [r7, #30]
 8001294:	e004      	b.n	80012a0 <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	4a26      	ldr	r2, [pc, #152]	; (8001334 <recvfrom+0x2f8>)
 800129a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800129e:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	8bfb      	ldrh	r3, [r7, #30]
 80012a4:	4610      	mov	r0, r2
 80012a6:	68b9      	ldr	r1, [r7, #8]
 80012a8:	461a      	mov	r2, r3
 80012aa:	f001 f82b 	bl	8002304 <wiz_recv_data>
		   break;
 80012ae:	e00b      	b.n	80012c8 <recvfrom+0x28c>
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
			break;
   #endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	8bfb      	ldrh	r3, [r7, #30]
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f001 f880 	bl	80023bc <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	491d      	ldr	r1, [pc, #116]	; (8001334 <recvfrom+0x2f8>)
 80012c0:	8bfa      	ldrh	r2, [r7, #30]
 80012c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80012c6:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	3301      	adds	r3, #1
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80012d4:	4618      	mov	r0, r3
 80012d6:	2140      	movs	r1, #64	; 0x40
 80012d8:	f000 fe58 	bl	8001f8c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80012dc:	bf00      	nop
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	3301      	adds	r3, #1
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fe1a 	bl	8001f24 <WIZCHIP_READ>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f3      	bne.n	80012de <recvfrom+0x2a2>
	sock_remained_size[sn] -= pack_len;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	490e      	ldr	r1, [pc, #56]	; (8001334 <recvfrom+0x2f8>)
 80012fc:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001300:	8bfa      	ldrh	r2, [r7, #30]
 8001302:	1a8a      	subs	r2, r1, r2
 8001304:	b291      	uxth	r1, r2
 8001306:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <recvfrom+0x2f8>)
 8001308:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	4a09      	ldr	r2, [pc, #36]	; (8001334 <recvfrom+0x2f8>)
 8001310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d008      	beq.n	800132a <recvfrom+0x2ee>
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	7bfa      	ldrb	r2, [r7, #15]
 800131c:	4907      	ldr	r1, [pc, #28]	; (800133c <recvfrom+0x300>)
 800131e:	5c8a      	ldrb	r2, [r1, r2]
 8001320:	f042 0201 	orr.w	r2, r2, #1
 8001324:	b2d1      	uxtb	r1, r2
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <recvfrom+0x300>)
 8001328:	54d1      	strb	r1, [r2, r3]
 	return pack_len;
 800132a:	8bfb      	ldrh	r3, [r7, #30]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200000ec 	andcs	r0, r0, ip, ror #1
 8001338:	200000e8 	andcs	r0, r0, r8, ror #1
 800133c:	200000fc 	strdcs	r0, [r0], -ip

08001340 <ctlsocket>:


int8_t  ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	603a      	str	r2, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
 800134c:	460b      	mov	r3, r1
 800134e:	71bb      	strb	r3, [r7, #6]
   uint8_t tmp = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
   CHECK_SOCKNUM();
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b08      	cmp	r3, #8
 8001358:	d901      	bls.n	800135e <ctlsocket+0x1e>
 800135a:	23ff      	movs	r3, #255	; 0xff
 800135c:	e0bd      	b.n	80014da <ctlsocket+0x19a>
   switch(cstype)
 800135e:	79bb      	ldrb	r3, [r7, #6]
 8001360:	2b07      	cmp	r3, #7
 8001362:	f200 80b7 	bhi.w	80014d4 <ctlsocket+0x194>
 8001366:	a201      	add	r2, pc, #4	; (adr r2, 800136c <ctlsocket+0x2c>)
 8001368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136c:	0800138d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, ip}
 8001370:	080013e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip}
 8001374:	080013fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r8, r9, ip}
 8001378:	0800141b 	stmdaeq	r0, {r0, r1, r3, r4, sl, ip}
 800137c:	0800143b 	stmdaeq	r0, {r0, r1, r3, r4, r5, sl, ip}
 8001380:	08001469 	stmdaeq	r0, {r0, r3, r5, r6, sl, ip}
 8001384:	08001489 	stmdaeq	r0, {r0, r3, r7, sl, ip}
 8001388:	080014b7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, sl, ip}
   {
      case CS_SET_IOMODE:
         tmp = *((uint8_t*)arg);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	73fb      	strb	r3, [r7, #15]
         if(tmp == SOCK_IO_NONBLOCK)  sock_io_mode |= (1<<sn);
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d10d      	bne.n	80013b4 <ctlsocket+0x74>
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	2201      	movs	r2, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	4b50      	ldr	r3, [pc, #320]	; (80014e4 <ctlsocket+0x1a4>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b4d      	ldr	r3, [pc, #308]	; (80014e4 <ctlsocket+0x1a4>)
 80013b0:	801a      	strh	r2, [r3, #0]
 80013b2:	e014      	b.n	80013de <ctlsocket+0x9e>
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10f      	bne.n	80013da <ctlsocket+0x9a>
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2201      	movs	r2, #1
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	4b46      	ldr	r3, [pc, #280]	; (80014e4 <ctlsocket+0x1a4>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4013      	ands	r3, r2
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	4b43      	ldr	r3, [pc, #268]	; (80014e4 <ctlsocket+0x1a4>)
 80013d6:	801a      	strh	r2, [r3, #0]
 80013d8:	e001      	b.n	80013de <ctlsocket+0x9e>
         else return SOCKERR_ARG;
 80013da:	23f6      	movs	r3, #246	; 0xf6
 80013dc:	e07d      	b.n	80014da <ctlsocket+0x19a>
         break;
 80013de:	e07b      	b.n	80014d8 <ctlsocket+0x198>
      case CS_GET_IOMODE:   
         *((uint8_t*)arg) = (sock_io_mode >> sn) & 0x0001;
 80013e0:	4b40      	ldr	r3, [pc, #256]	; (80014e4 <ctlsocket+0x1a4>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	fa42 f303 	asr.w	r3, r2, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	701a      	strb	r2, [r3, #0]
         break;
 80013f8:	e06e      	b.n	80014d8 <ctlsocket+0x198>
      case CS_GET_MAXTXBUF:
         *((uint16_t*)arg) = getSn_TxMAX(sn);
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	3301      	adds	r3, #1
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001406:	4618      	mov	r0, r3
 8001408:	f000 fd8c 	bl	8001f24 <WIZCHIP_READ>
 800140c:	4603      	mov	r3, r0
 800140e:	b29b      	uxth	r3, r3
 8001410:	029b      	lsls	r3, r3, #10
 8001412:	b29a      	uxth	r2, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	801a      	strh	r2, [r3, #0]
         break;
 8001418:	e05e      	b.n	80014d8 <ctlsocket+0x198>
      case CS_GET_MAXRXBUF:    
         *((uint16_t*)arg) = getSn_RxMAX(sn);
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	3301      	adds	r3, #1
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fd7c 	bl	8001f24 <WIZCHIP_READ>
 800142c:	4603      	mov	r3, r0
 800142e:	b29b      	uxth	r3, r3
 8001430:	029b      	lsls	r3, r3, #10
 8001432:	b29a      	uxth	r2, r3
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	801a      	strh	r2, [r3, #0]
         break;
 8001438:	e04e      	b.n	80014d8 <ctlsocket+0x198>
      case CS_CLR_INTERRUPT:
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b1f      	cmp	r3, #31
 8001440:	d901      	bls.n	8001446 <ctlsocket+0x106>
 8001442:	23f6      	movs	r3, #246	; 0xf6
 8001444:	e049      	b.n	80014da <ctlsocket+0x19a>
         setSn_IR(sn,*(uint8_t*)arg);
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	3301      	adds	r3, #1
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001452:	461a      	mov	r2, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	f003 031f 	and.w	r3, r3, #31
 800145c:	b2db      	uxtb	r3, r3
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f000 fd93 	bl	8001f8c <WIZCHIP_WRITE>
         break;
 8001466:	e037      	b.n	80014d8 <ctlsocket+0x198>
      case CS_GET_INTERRUPT:
         *((uint8_t*)arg) = getSn_IR(sn);
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	3301      	adds	r3, #1
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fd55 	bl	8001f24 <WIZCHIP_READ>
 800147a:	4603      	mov	r3, r0
 800147c:	f003 031f 	and.w	r3, r3, #31
 8001480:	b2da      	uxtb	r2, r3
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	701a      	strb	r2, [r3, #0]
         break;
 8001486:	e027      	b.n	80014d8 <ctlsocket+0x198>
      case CS_SET_INTMASK:  
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b1f      	cmp	r3, #31
 800148e:	d901      	bls.n	8001494 <ctlsocket+0x154>
 8001490:	23f6      	movs	r3, #246	; 0xf6
 8001492:	e022      	b.n	80014da <ctlsocket+0x19a>
         setSn_IMR(sn,*(uint8_t*)arg);
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	3301      	adds	r3, #1
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 80014a0:	461a      	mov	r2, r3
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	f003 031f 	and.w	r3, r3, #31
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f000 fd6c 	bl	8001f8c <WIZCHIP_WRITE>
         break;
 80014b4:	e010      	b.n	80014d8 <ctlsocket+0x198>
      case CS_GET_INTMASK:   
         *((uint8_t*)arg) = getSn_IMR(sn);
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	3301      	adds	r3, #1
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 fd2e 	bl	8001f24 <WIZCHIP_READ>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f003 031f 	and.w	r3, r3, #31
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	701a      	strb	r2, [r3, #0]
      default:
         return SOCKERR_ARG;
 80014d4:	23f6      	movs	r3, #246	; 0xf6
 80014d6:	e000      	b.n	80014da <ctlsocket+0x19a>
   }
   return SOCK_OK;
 80014d8:	2301      	movs	r3, #1
 80014da:	b25b      	sxtb	r3, r3
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200000e8 	andcs	r0, r0, r8, ror #1

080014e8 <wizchip_cris_enter>:
/**
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	  wizchip_cris_enter(void)           {};
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <wizchip_cris_exit>:
/**
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	  wizchip_cris_exit(void)          {};
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <wizchip_cs_select>:
/**
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_cs_select(void)            {};
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <wizchip_cs_deselect>:
/**
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_cs_deselect(void)          {};
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <wizchip_bus_readbyte>:
/**
 * @brief Default function to read in direct or indirect interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *) AddrSel); };
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop

08001534 <wizchip_bus_writebyte>:
 * @brief Default function to write in direct or indirect interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 
void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)AddrSel) = wb; };
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	70fb      	strb	r3, [r7, #3]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	78fa      	ldrb	r2, [r7, #3]
 8001544:	701a      	strb	r2, [r3, #0]
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <wizchip_spi_readbyte>:
/**
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
uint8_t wizchip_spi_readbyte(void)        {return 0;};
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
 8001554:	2300      	movs	r3, #0
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <wizchip_spi_writebyte>:
/**
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_spi_writebyte(uint8_t wb) {};
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d002      	beq.n	800158a <reg_wizchip_cs_cbfunc+0x16>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d106      	bne.n	8001598 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <reg_wizchip_cs_cbfunc+0x3c>)
 800158c:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <reg_wizchip_cs_cbfunc+0x40>)
 800158e:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <reg_wizchip_cs_cbfunc+0x3c>)
 8001592:	4a09      	ldr	r2, [pc, #36]	; (80015b8 <reg_wizchip_cs_cbfunc+0x44>)
 8001594:	615a      	str	r2, [r3, #20]
 8001596:	e005      	b.n	80015a4 <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001598:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <reg_wizchip_cs_cbfunc+0x3c>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 800159e:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <reg_wizchip_cs_cbfunc+0x3c>)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	6153      	str	r3, [r2, #20]
   }
}
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000020 	andcs	r0, r0, r0, lsr #32
 80015b4:	08001501 	stmdaeq	r0, {r0, r8, sl, ip}
 80015b8:	0800150d 	stmdaeq	r0, {r0, r2, r3, r8, sl, ip}

080015bc <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80015c6:	bf00      	nop
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <reg_wizchip_spi_cbfunc+0x48>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f9      	beq.n	80015c8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <reg_wizchip_spi_cbfunc+0x24>
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d106      	bne.n	80015ee <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <reg_wizchip_spi_cbfunc+0x48>)
 80015e2:	4a09      	ldr	r2, [pc, #36]	; (8001608 <reg_wizchip_spi_cbfunc+0x4c>)
 80015e4:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <reg_wizchip_spi_cbfunc+0x48>)
 80015e8:	4a08      	ldr	r2, [pc, #32]	; (800160c <reg_wizchip_spi_cbfunc+0x50>)
 80015ea:	61da      	str	r2, [r3, #28]
 80015ec:	e005      	b.n	80015fa <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <reg_wizchip_spi_cbfunc+0x48>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80015f4:	4a03      	ldr	r2, [pc, #12]	; (8001604 <reg_wizchip_spi_cbfunc+0x48>)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	61d3      	str	r3, [r2, #28]
   }
}
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	20000020 	andcs	r0, r0, r0, lsr #32
 8001608:	08001551 	stmdaeq	r0, {r0, r4, r6, r8, sl, ip}
 800160c:	08001561 	stmdaeq	r0, {r0, r5, r6, r8, sl, ip}

08001610 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	75fb      	strb	r3, [r7, #23]
   uint8_t* ptmp[2] = {0,0};
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b0f      	cmp	r3, #15
 800162c:	f200 80c0 	bhi.w	80017b0 <ctlwizchip+0x1a0>
 8001630:	a201      	add	r2, pc, #4	; (adr r2, 8001638 <ctlwizchip+0x28>)
 8001632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001636:	bf00      	nop
 8001638:	08001679 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, sl, ip}
 800163c:	0800167f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r9, sl, ip}
 8001640:	080016ab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r9, sl, ip}
 8001644:	0800169f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r7, r9, sl, ip}
 8001648:	080016b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, sl, ip}
 800164c:	080016c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sl, ip}
 8001650:	080016d3 	stmdaeq	r0, {r0, r1, r4, r6, r7, r9, sl, ip}
 8001654:	080016f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r9, sl, ip}
 8001658:	0800171f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, r9, sl, ip}
 800165c:	08001759 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, sl, ip}
 8001660:	0800175f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip}
 8001664:	08001767 	stmdaeq	r0, {r0, r1, r2, r5, r6, r8, r9, sl, ip}
 8001668:	080017b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, sl, ip}
 800166c:	0800176f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip}
 8001670:	0800177d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, sl, ip}
 8001674:	08001797 	stmdaeq	r0, {r0, r1, r2, r4, r7, r8, r9, sl, ip}
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8001678:	f000 f8e4 	bl	8001844 <wizchip_sw_reset>
         break;
 800167c:	e09b      	b.n	80017b6 <ctlwizchip+0x1a6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d004      	beq.n	800168e <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	3308      	adds	r3, #8
 800168c:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);;
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f000 f921 	bl	80018dc <wizchip_init>
 800169a:	4603      	mov	r3, r0
 800169c:	e08c      	b.n	80017b8 <ctlwizchip+0x1a8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 f9a4 	bl	80019f0 <wizchip_clrinterrupt>
         break;
 80016a8:	e085      	b.n	80017b6 <ctlwizchip+0x1a6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80016aa:	f000 f9bf 	bl	8001a2c <wizchip_getinterrupt>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	801a      	strh	r2, [r3, #0]
         break;
 80016b6:	e07e      	b.n	80017b6 <ctlwizchip+0x1a6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 f9db 	bl	8001a78 <wizchip_setinterruptmask>
         break;         
 80016c2:	e078      	b.n	80017b6 <ctlwizchip+0x1a6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80016c4:	f000 f9f2 	bl	8001aac <wizchip_getinterruptmask>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	801a      	strh	r2, [r3, #0]
         break;
 80016d0:	e071      	b.n	80017b6 <ctlwizchip+0x1a6>
   #if _WIZCHIP_ > 5100
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	0a1b      	lsrs	r3, r3, #8
 80016d8:	b29b      	uxth	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80016e0:	4619      	mov	r1, r3
 80016e2:	f000 fc53 	bl	8001f8c <WIZCHIP_WRITE>
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80016f0:	4619      	mov	r1, r3
 80016f2:	f000 fc4b 	bl	8001f8c <WIZCHIP_WRITE>
         break;
 80016f6:	e05e      	b.n	80017b6 <ctlwizchip+0x1a6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80016f8:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80016fc:	f000 fc12 	bl	8001f24 <WIZCHIP_READ>
 8001700:	4603      	mov	r3, r0
 8001702:	b29b      	uxth	r3, r3
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	b29c      	uxth	r4, r3
 8001708:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800170c:	f000 fc0a 	bl	8001f24 <WIZCHIP_READ>
 8001710:	4603      	mov	r3, r0
 8001712:	b29b      	uxth	r3, r3
 8001714:	4423      	add	r3, r4
 8001716:	b29a      	uxth	r2, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	801a      	strh	r2, [r3, #0]
         break;
 800171c:	e04b      	b.n	80017b6 <ctlwizchip+0x1a6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800171e:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <ctlwizchip+0x1b4>)
 8001720:	789a      	ldrb	r2, [r3, #2]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	4a26      	ldr	r2, [pc, #152]	; (80017c4 <ctlwizchip+0x1b4>)
 800172c:	78d2      	ldrb	r2, [r2, #3]
 800172e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	3302      	adds	r3, #2
 8001734:	4a23      	ldr	r2, [pc, #140]	; (80017c4 <ctlwizchip+0x1b4>)
 8001736:	7912      	ldrb	r2, [r2, #4]
 8001738:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	3303      	adds	r3, #3
 800173e:	4a21      	ldr	r2, [pc, #132]	; (80017c4 <ctlwizchip+0x1b4>)
 8001740:	7952      	ldrb	r2, [r2, #5]
 8001742:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	3304      	adds	r3, #4
 8001748:	4a1e      	ldr	r2, [pc, #120]	; (80017c4 <ctlwizchip+0x1b4>)
 800174a:	7992      	ldrb	r2, [r2, #6]
 800174c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	3305      	adds	r3, #5
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
         break;
 8001756:	e02e      	b.n	80017b6 <ctlwizchip+0x1a6>
   #if _WIZCHIP_ ==  5500
      case CW_RESET_PHY:
         wizphy_reset();
 8001758:	f000 f9fe 	bl	8001b58 <wizphy_reset>
         break;
 800175c:	e02b      	b.n	80017b6 <ctlwizchip+0x1a6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 800175e:	6838      	ldr	r0, [r7, #0]
 8001760:	f000 fa20 	bl	8001ba4 <wizphy_setphyconf>
         break;
 8001764:	e027      	b.n	80017b6 <ctlwizchip+0x1a6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8001766:	6838      	ldr	r0, [r7, #0]
 8001768:	f000 fa5e 	bl	8001c28 <wizphy_getphyconf>
         break;
 800176c:	e023      	b.n	80017b6 <ctlwizchip+0x1a6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f000 faa4 	bl	8001cc0 <wizphy_setphypmode>
 8001778:	4603      	mov	r3, r0
 800177a:	e01d      	b.n	80017b8 <ctlwizchip+0x1a8>
   #endif
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 800177c:	f000 f9d2 	bl	8001b24 <wizphy_getphypmode>
 8001780:	4603      	mov	r3, r0
 8001782:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8001784:	7dfb      	ldrb	r3, [r7, #23]
 8001786:	2bff      	cmp	r3, #255	; 0xff
 8001788:	d101      	bne.n	800178e <ctlwizchip+0x17e>
 800178a:	23ff      	movs	r3, #255	; 0xff
 800178c:	e014      	b.n	80017b8 <ctlwizchip+0x1a8>
         *(uint8_t*)arg = tmp;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	7dfa      	ldrb	r2, [r7, #23]
 8001792:	701a      	strb	r2, [r3, #0]
         break;
 8001794:	e00f      	b.n	80017b6 <ctlwizchip+0x1a6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8001796:	f000 f9ad 	bl	8001af4 <wizphy_getphylink>
 800179a:	4603      	mov	r3, r0
 800179c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800179e:	7dfb      	ldrb	r3, [r7, #23]
 80017a0:	2bff      	cmp	r3, #255	; 0xff
 80017a2:	d101      	bne.n	80017a8 <ctlwizchip+0x198>
 80017a4:	23ff      	movs	r3, #255	; 0xff
 80017a6:	e007      	b.n	80017b8 <ctlwizchip+0x1a8>
         *(uint8_t*)arg = tmp;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	7dfa      	ldrb	r2, [r7, #23]
 80017ac:	701a      	strb	r2, [r3, #0]
         break;
 80017ae:	e002      	b.n	80017b6 <ctlwizchip+0x1a6>
      default:
         return -1;
 80017b0:	23ff      	movs	r3, #255	; 0xff
 80017b2:	e001      	b.n	80017b8 <ctlwizchip+0x1a8>
         break;
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
         break;
      case CW_GET_PHYSTATUS:
         break;
 80017b4:	bf00      	nop
         *(uint8_t*)arg = tmp;
         break;
      default:
         return -1;
   }
   return 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	b25b      	sxtb	r3, r3
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	371c      	adds	r7, #28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd90      	pop	{r4, r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000020 	andcs	r0, r0, r0, lsr #32

080017c8 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	6039      	str	r1, [r7, #0]
 80017d2:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	2b05      	cmp	r3, #5
 80017d8:	d82c      	bhi.n	8001834 <ctlnetwork+0x6c>
 80017da:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <ctlnetwork+0x18>)
 80017dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e0:	080017f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, sl, ip}
 80017e4:	08001801 	stmdaeq	r0, {r0, fp, ip}
 80017e8:	08001809 	stmdaeq	r0, {r0, r3, fp, ip}
 80017ec:	08001817 	stmdaeq	r0, {r0, r1, r2, r4, fp, ip}
 80017f0:	08001825 	stmdaeq	r0, {r0, r2, r5, fp, ip}
 80017f4:	0800182d 	stmdaeq	r0, {r0, r2, r3, r5, fp, ip}
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80017f8:	6838      	ldr	r0, [r7, #0]
 80017fa:	f000 faab 	bl	8001d54 <wizchip_setnetinfo>
         break;
 80017fe:	e01b      	b.n	8001838 <ctlnetwork+0x70>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8001800:	6838      	ldr	r0, [r7, #0]
 8001802:	f000 fae5 	bl	8001dd0 <wizchip_getnetinfo>
         break;
 8001806:	e017      	b.n	8001838 <ctlnetwork+0x70>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f000 fb1d 	bl	8001e4c <wizchip_setnetmode>
 8001812:	4603      	mov	r3, r0
 8001814:	e011      	b.n	800183a <ctlnetwork+0x72>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8001816:	f000 fb3b 	bl	8001e90 <wizchip_getnetmode>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	701a      	strb	r2, [r3, #0]
         break;
 8001822:	e009      	b.n	8001838 <ctlnetwork+0x70>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8001824:	6838      	ldr	r0, [r7, #0]
 8001826:	f000 fb3b 	bl	8001ea0 <wizchip_settimeout>
         break;
 800182a:	e005      	b.n	8001838 <ctlnetwork+0x70>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 800182c:	6838      	ldr	r0, [r7, #0]
 800182e:	f000 fb57 	bl	8001ee0 <wizchip_gettimeout>
         break;
 8001832:	e001      	b.n	8001838 <ctlnetwork+0x70>
      default:
         return -1;
 8001834:	23ff      	movs	r3, #255	; 0xff
 8001836:	e000      	b.n	800183a <ctlnetwork+0x72>
   }
   return 0;
 8001838:	2300      	movs	r3, #0
 800183a:	b25b      	sxtb	r3, r3
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
   uint8_t gw[4], sn[4], sip[4];
   uint8_t mac[6];
   getSHAR(mac);
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001850:	4619      	mov	r1, r3
 8001852:	2206      	movs	r2, #6
 8001854:	f000 fbd2 	bl	8001ffc <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001860:	4619      	mov	r1, r3
 8001862:	2204      	movs	r2, #4
 8001864:	f000 fbca 	bl	8001ffc <WIZCHIP_READ_BUF>
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001870:	4619      	mov	r1, r3
 8001872:	2204      	movs	r2, #4
 8001874:	f000 fbc2 	bl	8001ffc <WIZCHIP_READ_BUF>
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001880:	4619      	mov	r1, r3
 8001882:	2204      	movs	r2, #4
 8001884:	f000 fbba 	bl	8001ffc <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001888:	2000      	movs	r0, #0
 800188a:	2180      	movs	r1, #128	; 0x80
 800188c:	f000 fb7e 	bl	8001f8c <WIZCHIP_WRITE>
   getMR(); // for delay
 8001890:	2000      	movs	r0, #0
 8001892:	f000 fb47 	bl	8001f24 <WIZCHIP_READ>
   setSHAR(mac);
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800189c:	4619      	mov	r1, r3
 800189e:	2206      	movs	r2, #6
 80018a0:	f000 fbf2 	bl	8002088 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80018ac:	4619      	mov	r1, r3
 80018ae:	2204      	movs	r2, #4
 80018b0:	f000 fbea 	bl	8002088 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80018bc:	4619      	mov	r1, r3
 80018be:	2204      	movs	r2, #4
 80018c0:	f000 fbe2 	bl	8002088 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80018cc:	4619      	mov	r1, r3
 80018ce:	2204      	movs	r2, #4
 80018d0:	f000 fbda 	bl	8002088 <WIZCHIP_WRITE_BUF>
}
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop

080018dc <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80018ea:	f7ff ffab 	bl	8001844 <wizchip_sw_reset>
   if(txsize)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d039      	beq.n	8001968 <wizchip_init+0x8c>
   {
      tmp = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	73fb      	strb	r3, [r7, #15]
 80018fc:	e00d      	b.n	800191a <wizchip_init+0x3e>
         tmp += txsize[i];
 80018fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	781a      	ldrb	r2, [r3, #0]
 8001908:	7bbb      	ldrb	r3, [r7, #14]
 800190a:	4413      	add	r3, r2
 800190c:	b2db      	uxtb	r3, r3
 800190e:	73bb      	strb	r3, [r7, #14]
   int8_t tmp = 0;
   wizchip_sw_reset();
   if(txsize)
   {
      tmp = 0;
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	3301      	adds	r3, #1
 8001916:	b2db      	uxtb	r3, r3
 8001918:	73fb      	strb	r3, [r7, #15]
 800191a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191e:	2b07      	cmp	r3, #7
 8001920:	dded      	ble.n	80018fe <wizchip_init+0x22>
         tmp += txsize[i];
      if(tmp > 16) return -1;
 8001922:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001926:	2b10      	cmp	r3, #16
 8001928:	dd01      	ble.n	800192e <wizchip_init+0x52>
 800192a:	23ff      	movs	r3, #255	; 0xff
 800192c:	e05a      	b.n	80019e4 <wizchip_init+0x108>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800192e:	2300      	movs	r3, #0
 8001930:	73fb      	strb	r3, [r7, #15]
 8001932:	e015      	b.n	8001960 <wizchip_init+0x84>
         setSn_TXBUF_SIZE(i, txsize[i]);
 8001934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	3301      	adds	r3, #1
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001942:	4619      	mov	r1, r3
 8001944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	4413      	add	r3, r2
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	4608      	mov	r0, r1
 8001950:	4619      	mov	r1, r3
 8001952:	f000 fb1b 	bl	8001f8c <WIZCHIP_WRITE>
   {
      tmp = 0;
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
         tmp += txsize[i];
      if(tmp > 16) return -1;
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	3301      	adds	r3, #1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001964:	2b07      	cmp	r3, #7
 8001966:	dde5      	ble.n	8001934 <wizchip_init+0x58>
         setSn_TXBUF_SIZE(i, txsize[i]);
   }
   if(rxsize)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d039      	beq.n	80019e2 <wizchip_init+0x106>
   {
      tmp = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001972:	2300      	movs	r3, #0
 8001974:	73fb      	strb	r3, [r7, #15]
 8001976:	e00d      	b.n	8001994 <wizchip_init+0xb8>
         tmp += rxsize[i];
 8001978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	4413      	add	r3, r2
 8001980:	781a      	ldrb	r2, [r3, #0]
 8001982:	7bbb      	ldrb	r3, [r7, #14]
 8001984:	4413      	add	r3, r2
 8001986:	b2db      	uxtb	r3, r3
 8001988:	73bb      	strb	r3, [r7, #14]
         setSn_TXBUF_SIZE(i, txsize[i]);
   }
   if(rxsize)
   {
      tmp = 0;
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	3301      	adds	r3, #1
 8001990:	b2db      	uxtb	r3, r3
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001998:	2b07      	cmp	r3, #7
 800199a:	dded      	ble.n	8001978 <wizchip_init+0x9c>
         tmp += rxsize[i];
      if(tmp > 16) return -1;
 800199c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80019a0:	2b10      	cmp	r3, #16
 80019a2:	dd01      	ble.n	80019a8 <wizchip_init+0xcc>
 80019a4:	23ff      	movs	r3, #255	; 0xff
 80019a6:	e01d      	b.n	80019e4 <wizchip_init+0x108>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	73fb      	strb	r3, [r7, #15]
 80019ac:	e015      	b.n	80019da <wizchip_init+0xfe>
         setSn_RXBUF_SIZE(i, rxsize[i]);
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	3301      	adds	r3, #1
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80019bc:	4619      	mov	r1, r3
 80019be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	4413      	add	r3, r2
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4608      	mov	r0, r1
 80019ca:	4619      	mov	r1, r3
 80019cc:	f000 fade 	bl	8001f8c <WIZCHIP_WRITE>
   {
      tmp = 0;
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
         tmp += rxsize[i];
      if(tmp > 16) return -1;
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	3301      	adds	r3, #1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	73fb      	strb	r3, [r7, #15]
 80019da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019de:	2b07      	cmp	r3, #7
 80019e0:	dde5      	ble.n	80019ae <wizchip_init+0xd2>
         setSn_RXBUF_SIZE(i, rxsize[i]);
   }
   return 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	b25b      	sxtb	r3, r3
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop

080019f0 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ == 5100
   ir |= sir;
   setIR(ir);
#else
   setIR(ir);
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	f023 030f 	bic.w	r3, r3, #15
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8001a12:	4619      	mov	r1, r3
 8001a14:	f000 faba 	bl	8001f8c <WIZCHIP_WRITE>
   setSIR(sir);
 8001a18:	7bbb      	ldrb	r3, [r7, #14]
 8001a1a:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f000 fab4 	bl	8001f8c <WIZCHIP_WRITE>
#endif   
}
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop

08001a2c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ == 5100
   ir = getIR();
   sir = ir 0x0F;
#else
   ir  = getIR();
 8001a3e:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8001a42:	f000 fa6f 	bl	8001f24 <WIZCHIP_READ>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f023 030f 	bic.w	r3, r3, #15
 8001a4c:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8001a4e:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8001a52:	f000 fa67 	bl	8001f24 <WIZCHIP_READ>
 8001a56:	4603      	mov	r3, r0
 8001a58:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == 5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8001a5a:	79bb      	ldrb	r3, [r7, #6]
 8001a5c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8001a5e:	88bb      	ldrh	r3, [r7, #4]
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8001a6c:	88bb      	ldrh	r3, [r7, #4]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop

08001a78 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ == 5100
   imr |= simr;
   setIMR(imr);
#else
   setIMR(imr);
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8001a94:	4619      	mov	r1, r3
 8001a96:	f000 fa79 	bl	8001f8c <WIZCHIP_WRITE>
   setSIMR(simr);
 8001a9a:	7bbb      	ldrb	r3, [r7, #14]
 8001a9c:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f000 fa73 	bl	8001f8c <WIZCHIP_WRITE>
#endif   
}
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ == 5100
   imr  = getIMR();
   simr = imr 0x0F;
#else
   imr  = getIMR();
 8001abe:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8001ac2:	f000 fa2f 	bl	8001f24 <WIZCHIP_READ>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8001aca:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001ace:	f000 fa29 	bl	8001f24 <WIZCHIP_READ>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == 5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8001ad6:	79bb      	ldrb	r3, [r7, #6]
 8001ad8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8001ada:	88bb      	ldrh	r3, [r7, #4]
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8001ae8:	88bb      	ldrh	r3, [r7, #4]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop

08001af4 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
   else
      tmp = PHY_LINK_OFF;
#elif _WIZCHIP_ == 5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8001afa:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001afe:	f000 fa11 	bl	8001f24 <WIZCHIP_READ>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <wizphy_getphylink+0x1e>
      tmp = PHY_LINK_ON;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	71fb      	strb	r3, [r7, #7]
 8001b10:	e001      	b.n	8001b16 <wizphy_getphylink+0x22>
   else
      tmp = PHY_LINK_OFF;
 8001b12:	2300      	movs	r3, #0
 8001b14:	71fb      	strb	r3, [r7, #7]
#else
   tmp = -1;
#endif
   return tmp;
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	b25b      	sxtb	r3, r3
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop

08001b24 <wizphy_getphypmode>:

#if _WIZCHIP_ > 5100

int8_t wizphy_getphypmode(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if(getPHYCFGR() & PHYCFGR_OPMDC_PDOWN)
 8001b2e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001b32:	f000 f9f7 	bl	8001f24 <WIZCHIP_READ>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8001b40:	2301      	movs	r3, #1
 8001b42:	71fb      	strb	r3, [r7, #7]
 8001b44:	e001      	b.n	8001b4a <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8001b46:	2300      	movs	r3, #0
 8001b48:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	b25b      	sxtb	r3, r3
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop

08001b58 <wizphy_reset>:
#endif

#if _WIZCHIP_ == 5500
void wizphy_reset(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8001b5e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001b62:	f000 f9df 	bl	8001f24 <WIZCHIP_READ>
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b70:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f000 fa07 	bl	8001f8c <WIZCHIP_WRITE>
   tmp = getPHYCFGR(); 
 8001b7e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001b82:	f000 f9cf 	bl	8001f24 <WIZCHIP_READ>
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b90:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f000 f9f7 	bl	8001f8c <WIZCHIP_WRITE>
}
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d104      	bne.n	8001bc2 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bbe:	73fb      	strb	r3, [r7, #15]
 8001bc0:	e003      	b.n	8001bca <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bc8:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	785b      	ldrb	r3, [r3, #1]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d104      	bne.n	8001bdc <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001bd8:	73fb      	strb	r3, [r7, #15]
 8001bda:	e019      	b.n	8001c10 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	78db      	ldrb	r3, [r3, #3]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d10d      	bne.n	8001c00 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	789b      	ldrb	r3, [r3, #2]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d104      	bne.n	8001bf6 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	f043 0318 	orr.w	r3, r3, #24
 8001bf2:	73fb      	strb	r3, [r7, #15]
 8001bf4:	e00c      	b.n	8001c10 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	f043 0308 	orr.w	r3, r3, #8
 8001bfc:	73fb      	strb	r3, [r7, #15]
 8001bfe:	e007      	b.n	8001c10 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	789b      	ldrb	r3, [r3, #2]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d103      	bne.n	8001c10 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	f043 0310 	orr.w	r3, r3, #16
 8001c0e:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001c16:	4619      	mov	r1, r3
 8001c18:	f000 f9b8 	bl	8001f8c <WIZCHIP_WRITE>
   wizphy_reset();
 8001c1c:	f7ff ff9c 	bl	8001b58 <wizphy_reset>
}
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop

08001c28 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8001c34:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001c38:	f000 f974 	bl	8001f24 <WIZCHIP_READ>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	bf14      	ite	ne
 8001c4a:	2301      	movne	r3, #1
 8001c4c:	2300      	moveq	r3, #0
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c5c:	2b20      	cmp	r3, #32
 8001c5e:	d001      	beq.n	8001c64 <wizphy_getphyconf+0x3c>
 8001c60:	2b38      	cmp	r3, #56	; 0x38
 8001c62:	d103      	bne.n	8001c6c <wizphy_getphyconf+0x44>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	705a      	strb	r2, [r3, #1]
         break;
 8001c6a:	e003      	b.n	8001c74 <wizphy_getphyconf+0x4c>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	705a      	strb	r2, [r3, #1]
         break;
 8001c72:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c7a:	2b18      	cmp	r3, #24
 8001c7c:	d003      	beq.n	8001c86 <wizphy_getphyconf+0x5e>
 8001c7e:	2b20      	cmp	r3, #32
 8001c80:	d001      	beq.n	8001c86 <wizphy_getphyconf+0x5e>
 8001c82:	2b10      	cmp	r3, #16
 8001c84:	d103      	bne.n	8001c8e <wizphy_getphyconf+0x66>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	709a      	strb	r2, [r3, #2]
         break;
 8001c8c:	e003      	b.n	8001c96 <wizphy_getphyconf+0x6e>
      default:
         phyconf->speed = PHY_SPEED_10;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	709a      	strb	r2, [r3, #2]
         break;
 8001c94:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c9c:	2b18      	cmp	r3, #24
 8001c9e:	d003      	beq.n	8001ca8 <wizphy_getphyconf+0x80>
 8001ca0:	2b20      	cmp	r3, #32
 8001ca2:	d001      	beq.n	8001ca8 <wizphy_getphyconf+0x80>
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d103      	bne.n	8001cb0 <wizphy_getphyconf+0x88>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	70da      	strb	r2, [r3, #3]
         break;
 8001cae:	e003      	b.n	8001cb8 <wizphy_getphyconf+0x90>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	70da      	strb	r2, [r3, #3]
         break;
 8001cb6:	bf00      	nop
   }
}
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop

08001cc0 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8001cce:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001cd2:	f000 f927 	bl	8001f24 <WIZCHIP_READ>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <wizphy_setphypmode+0x28>
 8001ce4:	23ff      	movs	r3, #255	; 0xff
 8001ce6:	e02f      	b.n	8001d48 <wizphy_setphypmode+0x88>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001cee:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d104      	bne.n	8001d00 <wizphy_setphypmode+0x40>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001cfc:	73fb      	strb	r3, [r7, #15]
 8001cfe:	e003      	b.n	8001d08 <wizphy_setphypmode+0x48>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001d06:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f000 f93c 	bl	8001f8c <WIZCHIP_WRITE>
   wizphy_reset();
 8001d14:	f7ff ff20 	bl	8001b58 <wizphy_reset>
   tmp = getPHYCFGR();
 8001d18:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001d1c:	f000 f902 	bl	8001f24 <WIZCHIP_READ>
 8001d20:	4603      	mov	r3, r0
 8001d22:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d106      	bne.n	8001d38 <wizphy_setphypmode+0x78>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d008      	beq.n	8001d46 <wizphy_setphypmode+0x86>
 8001d34:	2300      	movs	r3, #0
 8001d36:	e007      	b.n	8001d48 <wizphy_setphypmode+0x88>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <wizphy_setphypmode+0x86>
 8001d42:	2300      	movs	r3, #0
 8001d44:	e000      	b.n	8001d48 <wizphy_setphypmode+0x88>
   }
   return -1;
 8001d46:	23ff      	movs	r3, #255	; 0xff
 8001d48:	b25b      	sxtb	r3, r3
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop

08001d54 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001d62:	4619      	mov	r1, r3
 8001d64:	2206      	movs	r2, #6
 8001d66:	f000 f98f 	bl	8002088 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	330e      	adds	r3, #14
 8001d6e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d72:	4619      	mov	r1, r3
 8001d74:	2204      	movs	r2, #4
 8001d76:	f000 f987 	bl	8002088 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	330a      	adds	r3, #10
 8001d7e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001d82:	4619      	mov	r1, r3
 8001d84:	2204      	movs	r2, #4
 8001d86:	f000 f97f 	bl	8002088 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3306      	adds	r3, #6
 8001d8e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001d92:	4619      	mov	r1, r3
 8001d94:	2204      	movs	r2, #4
 8001d96:	f000 f977 	bl	8002088 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7c9a      	ldrb	r2, [r3, #18]
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <wizchip_setnetinfo+0x74>)
 8001da0:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7cda      	ldrb	r2, [r3, #19]
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <wizchip_setnetinfo+0x74>)
 8001da8:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7d1a      	ldrb	r2, [r3, #20]
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <wizchip_setnetinfo+0x74>)
 8001db0:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	7d5a      	ldrb	r2, [r3, #21]
 8001db6:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <wizchip_setnetinfo+0x74>)
 8001db8:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	7d9a      	ldrb	r2, [r3, #22]
 8001dbe:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <wizchip_setnetinfo+0x78>)
 8001dc0:	701a      	strb	r2, [r3, #0]
}
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000104 	andcs	r0, r0, r4, lsl #2
 8001dcc:	20000108 	andcs	r0, r0, r8, lsl #2

08001dd0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001dde:	4619      	mov	r1, r3
 8001de0:	2206      	movs	r2, #6
 8001de2:	f000 f90b 	bl	8001ffc <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	330e      	adds	r3, #14
 8001dea:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001dee:	4619      	mov	r1, r3
 8001df0:	2204      	movs	r2, #4
 8001df2:	f000 f903 	bl	8001ffc <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	330a      	adds	r3, #10
 8001dfa:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001dfe:	4619      	mov	r1, r3
 8001e00:	2204      	movs	r2, #4
 8001e02:	f000 f8fb 	bl	8001ffc <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3306      	adds	r3, #6
 8001e0a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001e0e:	4619      	mov	r1, r3
 8001e10:	2204      	movs	r2, #4
 8001e12:	f000 f8f3 	bl	8001ffc <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <wizchip_getnetinfo+0x74>)
 8001e18:	781a      	ldrb	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <wizchip_getnetinfo+0x74>)
 8001e20:	785a      	ldrb	r2, [r3, #1]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8001e26:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <wizchip_getnetinfo+0x74>)
 8001e28:	789a      	ldrb	r2, [r3, #2]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <wizchip_getnetinfo+0x74>)
 8001e30:	78da      	ldrb	r2, [r3, #3]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8001e36:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <wizchip_getnetinfo+0x78>)
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	759a      	strb	r2, [r3, #22]
}
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000104 	andcs	r0, r0, r4, lsl #2
 8001e48:	20000108 	andcs	r0, r0, r8, lsl #2

08001e4c <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != 5500   
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <wizchip_setnetmode+0x1c>
 8001e64:	23ff      	movs	r3, #255	; 0xff
 8001e66:	e00e      	b.n	8001e86 <wizchip_setnetmode+0x3a>
#endif      
   tmp = getMR();
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f000 f85b 	bl	8001f24 <WIZCHIP_READ>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f000 f884 	bl	8001f8c <WIZCHIP_WRITE>
   return 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	b25b      	sxtb	r3, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8001e94:	2000      	movs	r0, #0
 8001e96:	f000 f845 	bl	8001f24 <WIZCHIP_READ>
 8001e9a:	4603      	mov	r3, r0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f000 f86b 	bl	8001f8c <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	885b      	ldrh	r3, [r3, #2]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f000 f861 	bl	8001f8c <WIZCHIP_WRITE>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	885b      	ldrh	r3, [r3, #2]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f000 f859 	bl	8001f8c <WIZCHIP_WRITE>
}
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8001ee8:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001eec:	f000 f81a 	bl	8001f24 <WIZCHIP_READ>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8001ef8:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001efc:	f000 f812 	bl	8001f24 <WIZCHIP_READ>
 8001f00:	4603      	mov	r3, r0
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	b29c      	uxth	r4, r3
 8001f08:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001f0c:	f000 f80a 	bl	8001f24 <WIZCHIP_READ>
 8001f10:	4603      	mov	r3, r0
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	4423      	add	r3, r4
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	805a      	strh	r2, [r3, #2]
}
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd90      	pop	{r4, r7, pc}
 8001f22:	bf00      	nop

08001f24 <WIZCHIP_READ>:
#define _W5500_SPI_FDM_OP_LEN4_     0x03

////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 8001f2c:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <WIZCHIP_READ+0x64>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <WIZCHIP_READ+0x64>)
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	4798      	blx	r3
   	   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <WIZCHIP_READ+0x64>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8001f42:	0c12      	lsrs	r2, r2, #16
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	4610      	mov	r0, r2
 8001f48:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <WIZCHIP_READ+0x64>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8001f54:	0a12      	lsrs	r2, r2, #8
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <WIZCHIP_READ+0x64>)
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	4610      	mov	r0, r2
 8001f66:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte();
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <WIZCHIP_READ+0x64>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	4798      	blx	r3
 8001f6e:	4603      	mov	r3, r0
 8001f70:	73fb      	strb	r3, [r7, #15]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5000. !!!"   
#endif

   WIZCHIP.CS._deselect();
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <WIZCHIP_READ+0x64>)
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <WIZCHIP_READ+0x64>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4798      	blx	r3
   return ret;
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000020 	andcs	r0, r0, r0, lsr #32

08001f8c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	70fb      	strb	r3, [r7, #3]
	WIZCHIP_CRITICAL_ENTER();
 8001f98:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <WIZCHIP_WRITE+0x6c>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <WIZCHIP_WRITE+0x6c>)
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f043 0304 	orr.w	r3, r3, #4
 8001faa:	607b      	str	r3, [r7, #4]
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <WIZCHIP_WRITE+0x6c>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8001fb6:	0c12      	lsrs	r2, r2, #16
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	4610      	mov	r0, r2
 8001fbc:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <WIZCHIP_WRITE+0x6c>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8001fc8:	0a12      	lsrs	r2, r2, #8
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <WIZCHIP_WRITE+0x6c>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	4610      	mov	r0, r2
 8001fda:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <WIZCHIP_WRITE+0x6c>)
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!"
#endif

   WIZCHIP.CS._deselect();
 8001fe6:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <WIZCHIP_WRITE+0x6c>)
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001fec:	4b02      	ldr	r3, [pc, #8]	; (8001ff8 <WIZCHIP_WRITE+0x6c>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4798      	blx	r3
}
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000020 	andcs	r0, r0, r0, lsr #32

08001ffc <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	4613      	mov	r3, r2
 8002008:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	82fb      	strh	r3, [r7, #22]
   uint16_t j = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	82bb      	strh	r3, [r7, #20]
   WIZCHIP_CRITICAL_ENTER();
 8002012:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <WIZCHIP_READ_BUF+0x88>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002018:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <WIZCHIP_READ_BUF+0x88>)
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800201e:	4b19      	ldr	r3, [pc, #100]	; (8002084 <WIZCHIP_READ_BUF+0x88>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8002028:	0c12      	lsrs	r2, r2, #16
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	4610      	mov	r0, r2
 800202e:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002030:	4b14      	ldr	r3, [pc, #80]	; (8002084 <WIZCHIP_READ_BUF+0x88>)
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800203a:	0a12      	lsrs	r2, r2, #8
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	4610      	mov	r0, r2
 8002040:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <WIZCHIP_READ_BUF+0x88>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	4610      	mov	r0, r2
 800204c:	4798      	blx	r3
      for(i = 0; i < len; i++)
 800204e:	2300      	movs	r3, #0
 8002050:	82fb      	strh	r3, [r7, #22]
 8002052:	e00a      	b.n	800206a <WIZCHIP_READ_BUF+0x6e>
        pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002054:	8afb      	ldrh	r3, [r7, #22]
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	18d4      	adds	r4, r2, r3
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <WIZCHIP_READ_BUF+0x88>)
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	4798      	blx	r3
 8002060:	4603      	mov	r3, r0
 8002062:	7023      	strb	r3, [r4, #0]
   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
      for(i = 0; i < len; i++)
 8002064:	8afb      	ldrh	r3, [r7, #22]
 8002066:	3301      	adds	r3, #1
 8002068:	82fb      	strh	r3, [r7, #22]
 800206a:	8afa      	ldrh	r2, [r7, #22]
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	429a      	cmp	r2, r3
 8002070:	d3f0      	bcc.n	8002054 <WIZCHIP_READ_BUF+0x58>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
 8002072:	4b04      	ldr	r3, [pc, #16]	; (8002084 <WIZCHIP_READ_BUF+0x88>)
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002078:	4b02      	ldr	r3, [pc, #8]	; (8002084 <WIZCHIP_READ_BUF+0x88>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4798      	blx	r3
}
 800207e:	371c      	adds	r7, #28
 8002080:	46bd      	mov	sp, r7
 8002082:	bd90      	pop	{r4, r7, pc}
 8002084:	20000020 	andcs	r0, r0, r0, lsr #32

08002088 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	4613      	mov	r3, r2
 8002094:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	82fb      	strh	r3, [r7, #22]
   uint16_t j = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	82bb      	strh	r3, [r7, #20]
   WIZCHIP_CRITICAL_ENTER();
 800209e:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <WIZCHIP_WRITE_BUF+0x90>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80020a4:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <WIZCHIP_WRITE_BUF+0x90>)
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	60fb      	str	r3, [r7, #12]
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80020b2:	4b19      	ldr	r3, [pc, #100]	; (8002118 <WIZCHIP_WRITE_BUF+0x90>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80020bc:	0c12      	lsrs	r2, r2, #16
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	4610      	mov	r0, r2
 80020c2:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80020c4:	4b14      	ldr	r3, [pc, #80]	; (8002118 <WIZCHIP_WRITE_BUF+0x90>)
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80020ce:	0a12      	lsrs	r2, r2, #8
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	4610      	mov	r0, r2
 80020d4:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <WIZCHIP_WRITE_BUF+0x90>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	4610      	mov	r0, r2
 80020e0:	4798      	blx	r3
      for(i = 0; i < len; i++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	82fb      	strh	r3, [r7, #22]
 80020e6:	e00a      	b.n	80020fe <WIZCHIP_WRITE_BUF+0x76>
         WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <WIZCHIP_WRITE_BUF+0x90>)
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	8afa      	ldrh	r2, [r7, #22]
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	440a      	add	r2, r1
 80020f2:	7812      	ldrb	r2, [r2, #0]
 80020f4:	4610      	mov	r0, r2
 80020f6:	4798      	blx	r3
   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
      for(i = 0; i < len; i++)
 80020f8:	8afb      	ldrh	r3, [r7, #22]
 80020fa:	3301      	adds	r3, #1
 80020fc:	82fb      	strh	r3, [r7, #22]
 80020fe:	8afa      	ldrh	r2, [r7, #22]
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	429a      	cmp	r2, r3
 8002104:	d3f0      	bcc.n	80020e8 <WIZCHIP_WRITE_BUF+0x60>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
 8002106:	4b04      	ldr	r3, [pc, #16]	; (8002118 <WIZCHIP_WRITE_BUF+0x90>)
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800210c:	4b02      	ldr	r3, [pc, #8]	; (8002118 <WIZCHIP_WRITE_BUF+0x90>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4798      	blx	r3
}
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000020 	andcs	r0, r0, r0, lsr #32

0800211c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 800211c:	b590      	push	{r4, r7, lr}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002126:	2300      	movs	r3, #0
 8002128:	81fb      	strh	r3, [r7, #14]
 800212a:	2300      	movs	r3, #0
 800212c:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	3301      	adds	r3, #1
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fef2 	bl	8001f24 <WIZCHIP_READ>
 8002140:	4603      	mov	r3, r0
 8002142:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002144:	89bb      	ldrh	r3, [r7, #12]
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	b29c      	uxth	r4, r3
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	3301      	adds	r3, #1
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fee4 	bl	8001f24 <WIZCHIP_READ>
 800215c:	4603      	mov	r3, r0
 800215e:	b29b      	uxth	r3, r3
 8002160:	4423      	add	r3, r4
 8002162:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002164:	89bb      	ldrh	r3, [r7, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d01a      	beq.n	80021a0 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	3301      	adds	r3, #1
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fed4 	bl	8001f24 <WIZCHIP_READ>
 800217c:	4603      	mov	r3, r0
 800217e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002180:	89fb      	ldrh	r3, [r7, #14]
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	b29c      	uxth	r4, r3
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	3301      	adds	r3, #1
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fec6 	bl	8001f24 <WIZCHIP_READ>
 8002198:	4603      	mov	r3, r0
 800219a:	b29b      	uxth	r3, r3
 800219c:	4423      	add	r3, r4
 800219e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80021a0:	89fa      	ldrh	r2, [r7, #14]
 80021a2:	89bb      	ldrh	r3, [r7, #12]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d1c2      	bne.n	800212e <getSn_TX_FSR+0x12>
   return val;
 80021a8:	89fb      	ldrh	r3, [r7, #14]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd90      	pop	{r4, r7, pc}
 80021b2:	bf00      	nop

080021b4 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80021b4:	b590      	push	{r4, r7, lr}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80021be:	2300      	movs	r3, #0
 80021c0:	81fb      	strh	r3, [r7, #14]
 80021c2:	2300      	movs	r3, #0
 80021c4:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	3301      	adds	r3, #1
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fea6 	bl	8001f24 <WIZCHIP_READ>
 80021d8:	4603      	mov	r3, r0
 80021da:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80021dc:	89bb      	ldrh	r3, [r7, #12]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	b29c      	uxth	r4, r3
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	3301      	adds	r3, #1
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fe98 	bl	8001f24 <WIZCHIP_READ>
 80021f4:	4603      	mov	r3, r0
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	4423      	add	r3, r4
 80021fa:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80021fc:	89bb      	ldrh	r3, [r7, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01a      	beq.n	8002238 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	3301      	adds	r3, #1
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fe88 	bl	8001f24 <WIZCHIP_READ>
 8002214:	4603      	mov	r3, r0
 8002216:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002218:	89fb      	ldrh	r3, [r7, #14]
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	b29c      	uxth	r4, r3
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	3301      	adds	r3, #1
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fe7a 	bl	8001f24 <WIZCHIP_READ>
 8002230:	4603      	mov	r3, r0
 8002232:	b29b      	uxth	r3, r3
 8002234:	4423      	add	r3, r4
 8002236:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002238:	89fa      	ldrh	r2, [r7, #14]
 800223a:	89bb      	ldrh	r3, [r7, #12]
 800223c:	429a      	cmp	r2, r3
 800223e:	d1c2      	bne.n	80021c6 <getSn_RX_RSR+0x12>
   return val;
 8002240:	89fb      	ldrh	r3, [r7, #14]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bd90      	pop	{r4, r7, pc}
 800224a:	bf00      	nop

0800224c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	6039      	str	r1, [r7, #0]
 8002256:	71fb      	strb	r3, [r7, #7]
 8002258:	4613      	mov	r3, r2
 800225a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	60bb      	str	r3, [r7, #8]
   if(len == 0)  return;
 8002264:	88bb      	ldrh	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d100      	bne.n	800226c <wiz_send_data+0x20>
 800226a:	e047      	b.n	80022fc <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	3301      	adds	r3, #1
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fe53 	bl	8001f24 <WIZCHIP_READ>
 800227e:	4603      	mov	r3, r0
 8002280:	b29b      	uxth	r3, r3
 8002282:	021b      	lsls	r3, r3, #8
 8002284:	b29c      	uxth	r4, r3
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	3301      	adds	r3, #1
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fe46 	bl	8001f24 <WIZCHIP_READ>
 8002298:	4603      	mov	r3, r0
 800229a:	b29b      	uxth	r3, r3
 800229c:	4423      	add	r3, r4
 800229e:	81fb      	strh	r3, [r7, #14]
   
   addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80022a0:	89fb      	ldrh	r3, [r7, #14]
 80022a2:	021a      	lsls	r2, r3, #8
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	3302      	adds	r3, #2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4413      	add	r3, r2
 80022ae:	60bb      	str	r3, [r7, #8]
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80022b0:	88bb      	ldrh	r3, [r7, #4]
 80022b2:	68b8      	ldr	r0, [r7, #8]
 80022b4:	6839      	ldr	r1, [r7, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	f7ff fee6 	bl	8002088 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80022bc:	89fa      	ldrh	r2, [r7, #14]
 80022be:	88bb      	ldrh	r3, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	3301      	adds	r3, #1
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80022d0:	461a      	mov	r2, r3
 80022d2:	89fb      	ldrh	r3, [r7, #14]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	4610      	mov	r0, r2
 80022dc:	4619      	mov	r1, r3
 80022de:	f7ff fe55 	bl	8001f8c <WIZCHIP_WRITE>
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	3301      	adds	r3, #1
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80022ee:	461a      	mov	r2, r3
 80022f0:	89fb      	ldrh	r3, [r7, #14]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	4610      	mov	r0, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	f7ff fe48 	bl	8001f8c <WIZCHIP_WRITE>
}
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd90      	pop	{r4, r7, pc}
 8002302:	bf00      	nop

08002304 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	71fb      	strb	r3, [r7, #7]
 8002310:	4613      	mov	r3, r2
 8002312:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800231c:	88bb      	ldrh	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d100      	bne.n	8002324 <wiz_recv_data+0x20>
 8002322:	e047      	b.n	80023b4 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	3301      	adds	r3, #1
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fdf7 	bl	8001f24 <WIZCHIP_READ>
 8002336:	4603      	mov	r3, r0
 8002338:	b29b      	uxth	r3, r3
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	b29c      	uxth	r4, r3
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	3301      	adds	r3, #1
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fdea 	bl	8001f24 <WIZCHIP_READ>
 8002350:	4603      	mov	r3, r0
 8002352:	b29b      	uxth	r3, r3
 8002354:	4423      	add	r3, r4
 8002356:	81fb      	strh	r3, [r7, #14]
   addrsel = (ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002358:	89fb      	ldrh	r3, [r7, #14]
 800235a:	021a      	lsls	r2, r3, #8
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	3303      	adds	r3, #3
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]
   
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8002368:	88bb      	ldrh	r3, [r7, #4]
 800236a:	68b8      	ldr	r0, [r7, #8]
 800236c:	6839      	ldr	r1, [r7, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	f7ff fe44 	bl	8001ffc <WIZCHIP_READ_BUF>
   ptr += len;
 8002374:	89fa      	ldrh	r2, [r7, #14]
 8002376:	88bb      	ldrh	r3, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	3301      	adds	r3, #1
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002388:	461a      	mov	r2, r3
 800238a:	89fb      	ldrh	r3, [r7, #14]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	b29b      	uxth	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	4610      	mov	r0, r2
 8002394:	4619      	mov	r1, r3
 8002396:	f7ff fdf9 	bl	8001f8c <WIZCHIP_WRITE>
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	3301      	adds	r3, #1
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80023a6:	461a      	mov	r2, r3
 80023a8:	89fb      	ldrh	r3, [r7, #14]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	4610      	mov	r0, r2
 80023ae:	4619      	mov	r1, r3
 80023b0:	f7ff fdec 	bl	8001f8c <WIZCHIP_WRITE>
}
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd90      	pop	{r4, r7, pc}
 80023ba:	bf00      	nop

080023bc <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	460a      	mov	r2, r1
 80023c6:	71fb      	strb	r3, [r7, #7]
 80023c8:	4613      	mov	r3, r2
 80023ca:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	81fb      	strh	r3, [r7, #14]
   ptr = getSn_RX_RD(sn);
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	3301      	adds	r3, #1
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fda1 	bl	8001f24 <WIZCHIP_READ>
 80023e2:	4603      	mov	r3, r0
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	b29c      	uxth	r4, r3
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	3301      	adds	r3, #1
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fd94 	bl	8001f24 <WIZCHIP_READ>
 80023fc:	4603      	mov	r3, r0
 80023fe:	b29b      	uxth	r3, r3
 8002400:	4423      	add	r3, r4
 8002402:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8002404:	89fa      	ldrh	r2, [r7, #14]
 8002406:	88bb      	ldrh	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	3301      	adds	r3, #1
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002418:	461a      	mov	r2, r3
 800241a:	89fb      	ldrh	r3, [r7, #14]
 800241c:	0a1b      	lsrs	r3, r3, #8
 800241e:	b29b      	uxth	r3, r3
 8002420:	b2db      	uxtb	r3, r3
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	f7ff fdb1 	bl	8001f8c <WIZCHIP_WRITE>
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	3301      	adds	r3, #1
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002436:	461a      	mov	r2, r3
 8002438:	89fb      	ldrh	r3, [r7, #14]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	f7ff fda4 	bl	8001f8c <WIZCHIP_WRITE>
}
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bd90      	pop	{r4, r7, pc}
 800244a:	bf00      	nop

0800244c <ip_assign>:
********************************************************************************
User's Function Implementation Part
********************************************************************************
*/

static void ip_assign(void) { }
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <ip_update>:

static void ip_update(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
	setMR(MR_RST);
 800245c:	2000      	movs	r0, #0
 800245e:	2180      	movs	r1, #128	; 0x80
 8002460:	f7ff fd94 	bl	8001f8c <WIZCHIP_WRITE>
	getMR(); // for delay
 8002464:	2000      	movs	r0, #0
 8002466:	f7ff fd5d 	bl	8001f24 <WIZCHIP_READ>
	setSHAR(wizchip_mac);
 800246a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800246e:	4902      	ldr	r1, [pc, #8]	; (8002478 <ip_update+0x20>)
 8002470:	2206      	movs	r2, #6
 8002472:	f7ff fe09 	bl	8002088 <WIZCHIP_WRITE_BUF>
}
 8002476:	bd80      	pop	{r7, pc}
 8002478:	2000011c 	andcs	r0, r0, ip, lsl r1

0800247c <ip_conflict>:

static void ip_conflict(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8002480:	2000      	movs	r0, #0
 8002482:	2180      	movs	r1, #128	; 0x80
 8002484:	f7ff fd82 	bl	8001f8c <WIZCHIP_WRITE>
	getMR(); // for delay
 8002488:	2000      	movs	r0, #0
 800248a:	f7ff fd4b 	bl	8001f24 <WIZCHIP_READ>
	setSHAR(wizchip_mac);
 800248e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002492:	4909      	ldr	r1, [pc, #36]	; (80024b8 <ip_conflict+0x3c>)
 8002494:	2206      	movs	r2, #6
 8002496:	f7ff fdf7 	bl	8002088 <WIZCHIP_WRITE_BUF>

	socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 800249a:	4b08      	ldr	r3, [pc, #32]	; (80024bc <ip_conflict+0x40>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	2102      	movs	r1, #2
 80024a2:	2244      	movs	r2, #68	; 0x44
 80024a4:	2300      	movs	r3, #0
 80024a6:	f7fe f907 	bl	80006b8 <socket>
	send_DHCP_DISCOVER();
 80024aa:	f000 f80b 	bl	80024c4 <send_DHCP_DISCOVER>
	dhcp_state = STATE_DHCP_DISCOVER;
 80024ae:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <ip_conflict+0x44>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]
}
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	2000011c 	andcs	r0, r0, ip, lsl r1
 80024bc:	20000170 	andcs	r0, r0, r0, ror r1
 80024c0:	20000144 	andcs	r0, r0, r4, asr #2

080024c4 <send_DHCP_DISCOVER>:
* Returns    : None.
* Note       : 
*********************************************************************************************************
*/
void send_DHCP_DISCOVER(void)
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	80bb      	strh	r3, [r7, #4]

	MSG->op = DHCP_BOOTREQUEST;
 80024ce:	4b4f      	ldr	r3, [pc, #316]	; (800260c <send_DHCP_DISCOVER+0x148>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
	MSG->htype = DHCP_HTYPE10MB;
 80024d6:	4b4d      	ldr	r3, [pc, #308]	; (800260c <send_DHCP_DISCOVER+0x148>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2201      	movs	r2, #1
 80024dc:	705a      	strb	r2, [r3, #1]
	MSG->hlen = DHCP_HLENETHERNET;
 80024de:	4b4b      	ldr	r3, [pc, #300]	; (800260c <send_DHCP_DISCOVER+0x148>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2206      	movs	r2, #6
 80024e4:	709a      	strb	r2, [r3, #2]
	MSG->hops = DHCP_HOPS;
 80024e6:	4b49      	ldr	r3, [pc, #292]	; (800260c <send_DHCP_DISCOVER+0x148>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2200      	movs	r2, #0
 80024ec:	70da      	strb	r2, [r3, #3]
	MSG->xid = DHCP_XID;
 80024ee:	4b47      	ldr	r3, [pc, #284]	; (800260c <send_DHCP_DISCOVER+0x148>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a47      	ldr	r2, [pc, #284]	; (8002610 <send_DHCP_DISCOVER+0x14c>)
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	605a      	str	r2, [r3, #4]
	MSG->secs = DHCP_SECS;
 80024f8:	4b44      	ldr	r3, [pc, #272]	; (800260c <send_DHCP_DISCOVER+0x148>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2200      	movs	r2, #0
 80024fe:	811a      	strh	r2, [r3, #8]
	MSG->flags = DHCP_FLAGSBROADCAST;
 8002500:	4b42      	ldr	r3, [pc, #264]	; (800260c <send_DHCP_DISCOVER+0x148>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2280      	movs	r2, #128	; 0x80
 8002506:	815a      	strh	r2, [r3, #10]

	MSG->ciaddr[0] = 0;
 8002508:	4b40      	ldr	r3, [pc, #256]	; (800260c <send_DHCP_DISCOVER+0x148>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2200      	movs	r2, #0
 800250e:	731a      	strb	r2, [r3, #12]
	MSG->ciaddr[1] = 0;
 8002510:	4b3e      	ldr	r3, [pc, #248]	; (800260c <send_DHCP_DISCOVER+0x148>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2200      	movs	r2, #0
 8002516:	735a      	strb	r2, [r3, #13]
	MSG->ciaddr[2] = 0;
 8002518:	4b3c      	ldr	r3, [pc, #240]	; (800260c <send_DHCP_DISCOVER+0x148>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2200      	movs	r2, #0
 800251e:	739a      	strb	r2, [r3, #14]
	MSG->ciaddr[3] = 0;
 8002520:	4b3a      	ldr	r3, [pc, #232]	; (800260c <send_DHCP_DISCOVER+0x148>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2200      	movs	r2, #0
 8002526:	73da      	strb	r2, [r3, #15]

	MSG->yiaddr[0] = 0;
 8002528:	4b38      	ldr	r3, [pc, #224]	; (800260c <send_DHCP_DISCOVER+0x148>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2200      	movs	r2, #0
 800252e:	741a      	strb	r2, [r3, #16]
	MSG->yiaddr[1] = 0;
 8002530:	4b36      	ldr	r3, [pc, #216]	; (800260c <send_DHCP_DISCOVER+0x148>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2200      	movs	r2, #0
 8002536:	745a      	strb	r2, [r3, #17]
	MSG->yiaddr[2] = 0;
 8002538:	4b34      	ldr	r3, [pc, #208]	; (800260c <send_DHCP_DISCOVER+0x148>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2200      	movs	r2, #0
 800253e:	749a      	strb	r2, [r3, #18]
	MSG->yiaddr[3] = 0;
 8002540:	4b32      	ldr	r3, [pc, #200]	; (800260c <send_DHCP_DISCOVER+0x148>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2200      	movs	r2, #0
 8002546:	74da      	strb	r2, [r3, #19]

	MSG->siaddr[0] = 0;
 8002548:	4b30      	ldr	r3, [pc, #192]	; (800260c <send_DHCP_DISCOVER+0x148>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2200      	movs	r2, #0
 800254e:	751a      	strb	r2, [r3, #20]
	MSG->siaddr[1] = 0;
 8002550:	4b2e      	ldr	r3, [pc, #184]	; (800260c <send_DHCP_DISCOVER+0x148>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2200      	movs	r2, #0
 8002556:	755a      	strb	r2, [r3, #21]
	MSG->siaddr[2] = 0;
 8002558:	4b2c      	ldr	r3, [pc, #176]	; (800260c <send_DHCP_DISCOVER+0x148>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2200      	movs	r2, #0
 800255e:	759a      	strb	r2, [r3, #22]
	MSG->siaddr[3] = 0;
 8002560:	4b2a      	ldr	r3, [pc, #168]	; (800260c <send_DHCP_DISCOVER+0x148>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2200      	movs	r2, #0
 8002566:	75da      	strb	r2, [r3, #23]

	MSG->giaddr[0] = 0;
 8002568:	4b28      	ldr	r3, [pc, #160]	; (800260c <send_DHCP_DISCOVER+0x148>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2200      	movs	r2, #0
 800256e:	761a      	strb	r2, [r3, #24]
	MSG->giaddr[1] = 0;
 8002570:	4b26      	ldr	r3, [pc, #152]	; (800260c <send_DHCP_DISCOVER+0x148>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2200      	movs	r2, #0
 8002576:	765a      	strb	r2, [r3, #25]
	MSG->giaddr[2] = 0;
 8002578:	4b24      	ldr	r3, [pc, #144]	; (800260c <send_DHCP_DISCOVER+0x148>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2200      	movs	r2, #0
 800257e:	769a      	strb	r2, [r3, #26]
	MSG->giaddr[3] = 0;
 8002580:	4b22      	ldr	r3, [pc, #136]	; (800260c <send_DHCP_DISCOVER+0x148>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2200      	movs	r2, #0
 8002586:	76da      	strb	r2, [r3, #27]

	MSG->chaddr[0] = wizchip_mac[0];
 8002588:	4b20      	ldr	r3, [pc, #128]	; (800260c <send_DHCP_DISCOVER+0x148>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a21      	ldr	r2, [pc, #132]	; (8002614 <send_DHCP_DISCOVER+0x150>)
 800258e:	7812      	ldrb	r2, [r2, #0]
 8002590:	771a      	strb	r2, [r3, #28]
	MSG->chaddr[1] = wizchip_mac[1];
 8002592:	4b1e      	ldr	r3, [pc, #120]	; (800260c <send_DHCP_DISCOVER+0x148>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a1f      	ldr	r2, [pc, #124]	; (8002614 <send_DHCP_DISCOVER+0x150>)
 8002598:	7852      	ldrb	r2, [r2, #1]
 800259a:	775a      	strb	r2, [r3, #29]
	MSG->chaddr[2] = wizchip_mac[2];
 800259c:	4b1b      	ldr	r3, [pc, #108]	; (800260c <send_DHCP_DISCOVER+0x148>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <send_DHCP_DISCOVER+0x150>)
 80025a2:	7892      	ldrb	r2, [r2, #2]
 80025a4:	779a      	strb	r2, [r3, #30]
	MSG->chaddr[3] = wizchip_mac[3];
 80025a6:	4b19      	ldr	r3, [pc, #100]	; (800260c <send_DHCP_DISCOVER+0x148>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a1a      	ldr	r2, [pc, #104]	; (8002614 <send_DHCP_DISCOVER+0x150>)
 80025ac:	78d2      	ldrb	r2, [r2, #3]
 80025ae:	77da      	strb	r2, [r3, #31]
	MSG->chaddr[4] = wizchip_mac[4];
 80025b0:	4b16      	ldr	r3, [pc, #88]	; (800260c <send_DHCP_DISCOVER+0x148>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a17      	ldr	r2, [pc, #92]	; (8002614 <send_DHCP_DISCOVER+0x150>)
 80025b6:	7912      	ldrb	r2, [r2, #4]
 80025b8:	f883 2020 	strb.w	r2, [r3, #32]
	MSG->chaddr[5] = wizchip_mac[5];
 80025bc:	4b13      	ldr	r3, [pc, #76]	; (800260c <send_DHCP_DISCOVER+0x148>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a14      	ldr	r2, [pc, #80]	; (8002614 <send_DHCP_DISCOVER+0x150>)
 80025c2:	7952      	ldrb	r2, [r2, #5]
 80025c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++) MSG->chaddr[i] = 0;
 80025c8:	2306      	movs	r3, #6
 80025ca:	80fb      	strh	r3, [r7, #6]
 80025cc:	e008      	b.n	80025e0 <send_DHCP_DISCOVER+0x11c>
 80025ce:	4b0f      	ldr	r3, [pc, #60]	; (800260c <send_DHCP_DISCOVER+0x148>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	88fb      	ldrh	r3, [r7, #6]
 80025d4:	4413      	add	r3, r2
 80025d6:	2200      	movs	r2, #0
 80025d8:	771a      	strb	r2, [r3, #28]
 80025da:	88fb      	ldrh	r3, [r7, #6]
 80025dc:	3301      	adds	r3, #1
 80025de:	80fb      	strh	r3, [r7, #6]
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	2b0f      	cmp	r3, #15
 80025e4:	d9f3      	bls.n	80025ce <send_DHCP_DISCOVER+0x10a>
	for (i = 0; i < 64; i++) MSG->sname[i] = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	80fb      	strh	r3, [r7, #6]
 80025ea:	e009      	b.n	8002600 <send_DHCP_DISCOVER+0x13c>
 80025ec:	4b07      	ldr	r3, [pc, #28]	; (800260c <send_DHCP_DISCOVER+0x148>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	4413      	add	r3, r2
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80025fa:	88fb      	ldrh	r3, [r7, #6]
 80025fc:	3301      	adds	r3, #1
 80025fe:	80fb      	strh	r3, [r7, #6]
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	2b3f      	cmp	r3, #63	; 0x3f
 8002604:	d9f2      	bls.n	80025ec <send_DHCP_DISCOVER+0x128>
	for (i = 0; i < 128; i++) MSG->file[i] = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	80fb      	strh	r3, [r7, #6]
 800260a:	e00f      	b.n	800262c <send_DHCP_DISCOVER+0x168>
 800260c:	2000016c 	andcs	r0, r0, ip, ror #2
 8002610:	20000154 	andcs	r0, r0, r4, asr r1
 8002614:	2000011c 	andcs	r0, r0, ip, lsl r1
 8002618:	4bab      	ldr	r3, [pc, #684]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	88fb      	ldrh	r3, [r7, #6]
 800261e:	4413      	add	r3, r2
 8002620:	2200      	movs	r2, #0
 8002622:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	3301      	adds	r3, #1
 800262a:	80fb      	strh	r3, [r7, #6]
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	2b7f      	cmp	r3, #127	; 0x7f
 8002630:	d9f2      	bls.n	8002618 <send_DHCP_DISCOVER+0x154>

	// MAGIC_COOKIE
	MSG->OPT[k++] = 0x63;
 8002632:	4ba5      	ldr	r3, [pc, #660]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	88bb      	ldrh	r3, [r7, #4]
 8002638:	1c59      	adds	r1, r3, #1
 800263a:	80b9      	strh	r1, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	2263      	movs	r2, #99	; 0x63
 8002640:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x82;
 8002644:	4ba0      	ldr	r3, [pc, #640]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	88bb      	ldrh	r3, [r7, #4]
 800264a:	1c59      	adds	r1, r3, #1
 800264c:	80b9      	strh	r1, [r7, #4]
 800264e:	4413      	add	r3, r2
 8002650:	2282      	movs	r2, #130	; 0x82
 8002652:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x53;
 8002656:	4b9c      	ldr	r3, [pc, #624]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	88bb      	ldrh	r3, [r7, #4]
 800265c:	1c59      	adds	r1, r3, #1
 800265e:	80b9      	strh	r1, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	2253      	movs	r2, #83	; 0x53
 8002664:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x63;
 8002668:	4b97      	ldr	r3, [pc, #604]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	88bb      	ldrh	r3, [r7, #4]
 800266e:	1c59      	adds	r1, r3, #1
 8002670:	80b9      	strh	r1, [r7, #4]
 8002672:	4413      	add	r3, r2
 8002674:	2263      	movs	r2, #99	; 0x63
 8002676:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	// Option Request Param
	MSG->OPT[k++] = dhcpMessageType;
 800267a:	4b93      	ldr	r3, [pc, #588]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	88bb      	ldrh	r3, [r7, #4]
 8002680:	1c59      	adds	r1, r3, #1
 8002682:	80b9      	strh	r1, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	2235      	movs	r2, #53	; 0x35
 8002688:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x01;
 800268c:	4b8e      	ldr	r3, [pc, #568]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	88bb      	ldrh	r3, [r7, #4]
 8002692:	1c59      	adds	r1, r3, #1
 8002694:	80b9      	strh	r1, [r7, #4]
 8002696:	4413      	add	r3, r2
 8002698:	2201      	movs	r2, #1
 800269a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_DISCOVER;
 800269e:	4b8a      	ldr	r3, [pc, #552]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	88bb      	ldrh	r3, [r7, #4]
 80026a4:	1c59      	adds	r1, r3, #1
 80026a6:	80b9      	strh	r1, [r7, #4]
 80026a8:	4413      	add	r3, r2
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	MSG->OPT[k++] = dhcpClientIdentifier;
 80026b0:	4b85      	ldr	r3, [pc, #532]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	88bb      	ldrh	r3, [r7, #4]
 80026b6:	1c59      	adds	r1, r3, #1
 80026b8:	80b9      	strh	r1, [r7, #4]
 80026ba:	4413      	add	r3, r2
 80026bc:	223d      	movs	r2, #61	; 0x3d
 80026be:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x07;
 80026c2:	4b81      	ldr	r3, [pc, #516]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	88bb      	ldrh	r3, [r7, #4]
 80026c8:	1c59      	adds	r1, r3, #1
 80026ca:	80b9      	strh	r1, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	2207      	movs	r2, #7
 80026d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x01;
 80026d4:	4b7c      	ldr	r3, [pc, #496]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	88bb      	ldrh	r3, [r7, #4]
 80026da:	1c59      	adds	r1, r3, #1
 80026dc:	80b9      	strh	r1, [r7, #4]
 80026de:	4413      	add	r3, r2
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[0];
 80026e6:	4b78      	ldr	r3, [pc, #480]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	88bb      	ldrh	r3, [r7, #4]
 80026ec:	1c59      	adds	r1, r3, #1
 80026ee:	80b9      	strh	r1, [r7, #4]
 80026f0:	4618      	mov	r0, r3
 80026f2:	4b76      	ldr	r3, [pc, #472]	; (80028cc <send_DHCP_DISCOVER+0x408>)
 80026f4:	7819      	ldrb	r1, [r3, #0]
 80026f6:	1813      	adds	r3, r2, r0
 80026f8:	460a      	mov	r2, r1
 80026fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[1];
 80026fe:	4b72      	ldr	r3, [pc, #456]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	88bb      	ldrh	r3, [r7, #4]
 8002704:	1c59      	adds	r1, r3, #1
 8002706:	80b9      	strh	r1, [r7, #4]
 8002708:	4618      	mov	r0, r3
 800270a:	4b70      	ldr	r3, [pc, #448]	; (80028cc <send_DHCP_DISCOVER+0x408>)
 800270c:	7859      	ldrb	r1, [r3, #1]
 800270e:	1813      	adds	r3, r2, r0
 8002710:	460a      	mov	r2, r1
 8002712:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[2];
 8002716:	4b6c      	ldr	r3, [pc, #432]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	88bb      	ldrh	r3, [r7, #4]
 800271c:	1c59      	adds	r1, r3, #1
 800271e:	80b9      	strh	r1, [r7, #4]
 8002720:	4618      	mov	r0, r3
 8002722:	4b6a      	ldr	r3, [pc, #424]	; (80028cc <send_DHCP_DISCOVER+0x408>)
 8002724:	7899      	ldrb	r1, [r3, #2]
 8002726:	1813      	adds	r3, r2, r0
 8002728:	460a      	mov	r2, r1
 800272a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[3];
 800272e:	4b66      	ldr	r3, [pc, #408]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	88bb      	ldrh	r3, [r7, #4]
 8002734:	1c59      	adds	r1, r3, #1
 8002736:	80b9      	strh	r1, [r7, #4]
 8002738:	4618      	mov	r0, r3
 800273a:	4b64      	ldr	r3, [pc, #400]	; (80028cc <send_DHCP_DISCOVER+0x408>)
 800273c:	78d9      	ldrb	r1, [r3, #3]
 800273e:	1813      	adds	r3, r2, r0
 8002740:	460a      	mov	r2, r1
 8002742:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[4];
 8002746:	4b60      	ldr	r3, [pc, #384]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	88bb      	ldrh	r3, [r7, #4]
 800274c:	1c59      	adds	r1, r3, #1
 800274e:	80b9      	strh	r1, [r7, #4]
 8002750:	4618      	mov	r0, r3
 8002752:	4b5e      	ldr	r3, [pc, #376]	; (80028cc <send_DHCP_DISCOVER+0x408>)
 8002754:	7919      	ldrb	r1, [r3, #4]
 8002756:	1813      	adds	r3, r2, r0
 8002758:	460a      	mov	r2, r1
 800275a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[5];
 800275e:	4b5a      	ldr	r3, [pc, #360]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	88bb      	ldrh	r3, [r7, #4]
 8002764:	1c59      	adds	r1, r3, #1
 8002766:	80b9      	strh	r1, [r7, #4]
 8002768:	4618      	mov	r0, r3
 800276a:	4b58      	ldr	r3, [pc, #352]	; (80028cc <send_DHCP_DISCOVER+0x408>)
 800276c:	7959      	ldrb	r1, [r3, #5]
 800276e:	1813      	adds	r3, r2, r0
 8002770:	460a      	mov	r2, r1
 8002772:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	MSG->OPT[k++] = hostName;
 8002776:	4b54      	ldr	r3, [pc, #336]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	88bb      	ldrh	r3, [r7, #4]
 800277c:	1c59      	adds	r1, r3, #1
 800277e:	80b9      	strh	r1, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	220c      	movs	r2, #12
 8002784:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 9; // length of hostname
 8002788:	4b4f      	ldr	r3, [pc, #316]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	88bb      	ldrh	r3, [r7, #4]
 800278e:	1c59      	adds	r1, r3, #1
 8002790:	80b9      	strh	r1, [r7, #4]
 8002792:	4413      	add	r3, r2
 8002794:	2209      	movs	r2, #9
 8002796:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[0];
 800279a:	4b4b      	ldr	r3, [pc, #300]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	88bb      	ldrh	r3, [r7, #4]
 80027a0:	1c59      	adds	r1, r3, #1
 80027a2:	80b9      	strh	r1, [r7, #4]
 80027a4:	4618      	mov	r0, r3
 80027a6:	4b4a      	ldr	r3, [pc, #296]	; (80028d0 <send_DHCP_DISCOVER+0x40c>)
 80027a8:	7819      	ldrb	r1, [r3, #0]
 80027aa:	1813      	adds	r3, r2, r0
 80027ac:	460a      	mov	r2, r1
 80027ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[1];
 80027b2:	4b45      	ldr	r3, [pc, #276]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	88bb      	ldrh	r3, [r7, #4]
 80027b8:	1c59      	adds	r1, r3, #1
 80027ba:	80b9      	strh	r1, [r7, #4]
 80027bc:	4618      	mov	r0, r3
 80027be:	4b44      	ldr	r3, [pc, #272]	; (80028d0 <send_DHCP_DISCOVER+0x40c>)
 80027c0:	7859      	ldrb	r1, [r3, #1]
 80027c2:	1813      	adds	r3, r2, r0
 80027c4:	460a      	mov	r2, r1
 80027c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[2];
 80027ca:	4b3f      	ldr	r3, [pc, #252]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	88bb      	ldrh	r3, [r7, #4]
 80027d0:	1c59      	adds	r1, r3, #1
 80027d2:	80b9      	strh	r1, [r7, #4]
 80027d4:	4618      	mov	r0, r3
 80027d6:	4b3e      	ldr	r3, [pc, #248]	; (80028d0 <send_DHCP_DISCOVER+0x40c>)
 80027d8:	7899      	ldrb	r1, [r3, #2]
 80027da:	1813      	adds	r3, r2, r0
 80027dc:	460a      	mov	r2, r1
 80027de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[3];
 80027e2:	4b39      	ldr	r3, [pc, #228]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	88bb      	ldrh	r3, [r7, #4]
 80027e8:	1c59      	adds	r1, r3, #1
 80027ea:	80b9      	strh	r1, [r7, #4]
 80027ec:	4618      	mov	r0, r3
 80027ee:	4b38      	ldr	r3, [pc, #224]	; (80028d0 <send_DHCP_DISCOVER+0x40c>)
 80027f0:	78d9      	ldrb	r1, [r3, #3]
 80027f2:	1813      	adds	r3, r2, r0
 80027f4:	460a      	mov	r2, r1
 80027f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[4];
 80027fa:	4b33      	ldr	r3, [pc, #204]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	88bb      	ldrh	r3, [r7, #4]
 8002800:	1c59      	adds	r1, r3, #1
 8002802:	80b9      	strh	r1, [r7, #4]
 8002804:	4618      	mov	r0, r3
 8002806:	4b32      	ldr	r3, [pc, #200]	; (80028d0 <send_DHCP_DISCOVER+0x40c>)
 8002808:	7919      	ldrb	r1, [r3, #4]
 800280a:	1813      	adds	r3, r2, r0
 800280c:	460a      	mov	r2, r1
 800280e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[5];
 8002812:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	88bb      	ldrh	r3, [r7, #4]
 8002818:	1c59      	adds	r1, r3, #1
 800281a:	80b9      	strh	r1, [r7, #4]
 800281c:	4618      	mov	r0, r3
 800281e:	4b2c      	ldr	r3, [pc, #176]	; (80028d0 <send_DHCP_DISCOVER+0x40c>)
 8002820:	7959      	ldrb	r1, [r3, #5]
 8002822:	1813      	adds	r3, r2, r0
 8002824:	460a      	mov	r2, r1
 8002826:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[3];
 800282a:	4b27      	ldr	r3, [pc, #156]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	88bb      	ldrh	r3, [r7, #4]
 8002830:	1c59      	adds	r1, r3, #1
 8002832:	80b9      	strh	r1, [r7, #4]
 8002834:	4618      	mov	r0, r3
 8002836:	4b25      	ldr	r3, [pc, #148]	; (80028cc <send_DHCP_DISCOVER+0x408>)
 8002838:	78d9      	ldrb	r1, [r3, #3]
 800283a:	1813      	adds	r3, r2, r0
 800283c:	460a      	mov	r2, r1
 800283e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[4];
 8002842:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	88bb      	ldrh	r3, [r7, #4]
 8002848:	1c59      	adds	r1, r3, #1
 800284a:	80b9      	strh	r1, [r7, #4]
 800284c:	4618      	mov	r0, r3
 800284e:	4b1f      	ldr	r3, [pc, #124]	; (80028cc <send_DHCP_DISCOVER+0x408>)
 8002850:	7919      	ldrb	r1, [r3, #4]
 8002852:	1813      	adds	r3, r2, r0
 8002854:	460a      	mov	r2, r1
 8002856:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[5];
 800285a:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	88bb      	ldrh	r3, [r7, #4]
 8002860:	1c59      	adds	r1, r3, #1
 8002862:	80b9      	strh	r1, [r7, #4]
 8002864:	4618      	mov	r0, r3
 8002866:	4b19      	ldr	r3, [pc, #100]	; (80028cc <send_DHCP_DISCOVER+0x408>)
 8002868:	7959      	ldrb	r1, [r3, #5]
 800286a:	1813      	adds	r3, r2, r0
 800286c:	460a      	mov	r2, r1
 800286e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec


	MSG->OPT[k++] = dhcpParamRequest;
 8002872:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	88bb      	ldrh	r3, [r7, #4]
 8002878:	1c59      	adds	r1, r3, #1
 800287a:	80b9      	strh	r1, [r7, #4]
 800287c:	4413      	add	r3, r2
 800287e:	2237      	movs	r2, #55	; 0x37
 8002880:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x06;	// length of request
 8002884:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	88bb      	ldrh	r3, [r7, #4]
 800288a:	1c59      	adds	r1, r3, #1
 800288c:	80b9      	strh	r1, [r7, #4]
 800288e:	4413      	add	r3, r2
 8002890:	2206      	movs	r2, #6
 8002892:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = subnetMask;
 8002896:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	88bb      	ldrh	r3, [r7, #4]
 800289c:	1c59      	adds	r1, r3, #1
 800289e:	80b9      	strh	r1, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = routersOnSubnet;
 80028a8:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	88bb      	ldrh	r3, [r7, #4]
 80028ae:	1c59      	adds	r1, r3, #1
 80028b0:	80b9      	strh	r1, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	2203      	movs	r2, #3
 80028b6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = dns;
 80028ba:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <send_DHCP_DISCOVER+0x404>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	88bb      	ldrh	r3, [r7, #4]
 80028c0:	1c59      	adds	r1, r3, #1
 80028c2:	80b9      	strh	r1, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	e005      	b.n	80028d4 <send_DHCP_DISCOVER+0x410>
 80028c8:	2000016c 	andcs	r0, r0, ip, ror #2
 80028cc:	2000011c 	andcs	r0, r0, ip, lsl r1
 80028d0:	20000040 	andcs	r0, r0, r0, asr #32
 80028d4:	2206      	movs	r2, #6
 80028d6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = domainName;
 80028da:	4b2b      	ldr	r3, [pc, #172]	; (8002988 <send_DHCP_DISCOVER+0x4c4>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	88bb      	ldrh	r3, [r7, #4]
 80028e0:	1c59      	adds	r1, r3, #1
 80028e2:	80b9      	strh	r1, [r7, #4]
 80028e4:	4413      	add	r3, r2
 80028e6:	220f      	movs	r2, #15
 80028e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = dhcpT1value;
 80028ec:	4b26      	ldr	r3, [pc, #152]	; (8002988 <send_DHCP_DISCOVER+0x4c4>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	88bb      	ldrh	r3, [r7, #4]
 80028f2:	1c59      	adds	r1, r3, #1
 80028f4:	80b9      	strh	r1, [r7, #4]
 80028f6:	4413      	add	r3, r2
 80028f8:	223a      	movs	r2, #58	; 0x3a
 80028fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = dhcpT2value;
 80028fe:	4b22      	ldr	r3, [pc, #136]	; (8002988 <send_DHCP_DISCOVER+0x4c4>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	88bb      	ldrh	r3, [r7, #4]
 8002904:	1c59      	adds	r1, r3, #1
 8002906:	80b9      	strh	r1, [r7, #4]
 8002908:	4413      	add	r3, r2
 800290a:	223b      	movs	r2, #59	; 0x3b
 800290c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = endOption;
 8002910:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <send_DHCP_DISCOVER+0x4c4>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	88bb      	ldrh	r3, [r7, #4]
 8002916:	1c59      	adds	r1, r3, #1
 8002918:	80b9      	strh	r1, [r7, #4]
 800291a:	4413      	add	r3, r2
 800291c:	22ff      	movs	r2, #255	; 0xff
 800291e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) MSG->OPT[i] = 0;
 8002922:	88bb      	ldrh	r3, [r7, #4]
 8002924:	80fb      	strh	r3, [r7, #6]
 8002926:	e009      	b.n	800293c <send_DHCP_DISCOVER+0x478>
 8002928:	4b17      	ldr	r3, [pc, #92]	; (8002988 <send_DHCP_DISCOVER+0x4c4>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	88fb      	ldrh	r3, [r7, #6]
 800292e:	4413      	add	r3, r2
 8002930:	2200      	movs	r2, #0
 8002932:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	3301      	adds	r3, #1
 800293a:	80fb      	strh	r3, [r7, #6]
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8002942:	d3f1      	bcc.n	8002928 <send_DHCP_DISCOVER+0x464>

	// send broadcasting packet
	for (i = 0; i < 4; i++) ip[i] = 255;
 8002944:	2300      	movs	r3, #0
 8002946:	80fb      	strh	r3, [r7, #6]
 8002948:	e009      	b.n	800295e <send_DHCP_DISCOVER+0x49a>
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	f107 0208 	add.w	r2, r7, #8
 8002950:	4413      	add	r3, r2
 8002952:	22ff      	movs	r2, #255	; 0xff
 8002954:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	3301      	adds	r3, #1
 800295c:	80fb      	strh	r3, [r7, #6]
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	2b03      	cmp	r3, #3
 8002962:	d9f2      	bls.n	800294a <send_DHCP_DISCOVER+0x486>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)MSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <send_DHCP_DISCOVER+0x4c8>)
 8002966:	7819      	ldrb	r1, [r3, #0]
 8002968:	4b07      	ldr	r3, [pc, #28]	; (8002988 <send_DHCP_DISCOVER+0x4c4>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	463c      	mov	r4, r7
 800296e:	2343      	movs	r3, #67	; 0x43
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	4608      	mov	r0, r1
 8002974:	4611      	mov	r1, r2
 8002976:	f44f 7209 	mov.w	r2, #548	; 0x224
 800297a:	4623      	mov	r3, r4
 800297c:	f7fe fa56 	bl	8000e2c <sendto>
}
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bd90      	pop	{r4, r7, pc}
 8002986:	bf00      	nop
 8002988:	2000016c 	andcs	r0, r0, ip, ror #2
 800298c:	20000170 	andcs	r0, r0, r0, ror r1

08002990 <send_DHCP_REQUEST>:
* Returns    : None.
* Note       : 
*********************************************************************************************************
*/
void send_DHCP_REQUEST(uint8_t *Cip, uint8_t *d_addr)
{
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b089      	sub	sp, #36	; 0x24
 8002994:	af02      	add	r7, sp, #8
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	827b      	strh	r3, [r7, #18]

	MSG->op = DHCP_BOOTREQUEST;
 800299e:	4b56      	ldr	r3, [pc, #344]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2201      	movs	r2, #1
 80029a4:	701a      	strb	r2, [r3, #0]
	MSG->htype = DHCP_HTYPE10MB;
 80029a6:	4b54      	ldr	r3, [pc, #336]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2201      	movs	r2, #1
 80029ac:	705a      	strb	r2, [r3, #1]
	MSG->hlen = DHCP_HLENETHERNET;
 80029ae:	4b52      	ldr	r3, [pc, #328]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2206      	movs	r2, #6
 80029b4:	709a      	strb	r2, [r3, #2]
	MSG->hops = DHCP_HOPS;
 80029b6:	4b50      	ldr	r3, [pc, #320]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2200      	movs	r2, #0
 80029bc:	70da      	strb	r2, [r3, #3]
	MSG->xid = DHCP_XID;
 80029be:	4b4e      	ldr	r3, [pc, #312]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a4e      	ldr	r2, [pc, #312]	; (8002afc <send_DHCP_REQUEST+0x16c>)
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	605a      	str	r2, [r3, #4]
	MSG->secs = DHCP_SECS;
 80029c8:	4b4b      	ldr	r3, [pc, #300]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2200      	movs	r2, #0
 80029ce:	811a      	strh	r2, [r3, #8]
	//MSG->flags = DHCP_FLAGSBROADCAST;
	if (d_addr[0] == 0xff) 	MSG->flags = DHCP_FLAGSBROADCAST;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2bff      	cmp	r3, #255	; 0xff
 80029d6:	d104      	bne.n	80029e2 <send_DHCP_REQUEST+0x52>
 80029d8:	4b47      	ldr	r3, [pc, #284]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2280      	movs	r2, #128	; 0x80
 80029de:	815a      	strh	r2, [r3, #10]
 80029e0:	e003      	b.n	80029ea <send_DHCP_REQUEST+0x5a>
	else MSG->flags = 0;
 80029e2:	4b45      	ldr	r3, [pc, #276]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2200      	movs	r2, #0
 80029e8:	815a      	strh	r2, [r3, #10]
	
	MSG->ciaddr[0] = Cip[0];
 80029ea:	4b43      	ldr	r3, [pc, #268]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	7812      	ldrb	r2, [r2, #0]
 80029f2:	731a      	strb	r2, [r3, #12]
	MSG->ciaddr[1] = Cip[1];
 80029f4:	4b40      	ldr	r3, [pc, #256]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	7852      	ldrb	r2, [r2, #1]
 80029fc:	735a      	strb	r2, [r3, #13]
	MSG->ciaddr[2] = Cip[2];
 80029fe:	4b3e      	ldr	r3, [pc, #248]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	7892      	ldrb	r2, [r2, #2]
 8002a06:	739a      	strb	r2, [r3, #14]
	MSG->ciaddr[3] = Cip[3];
 8002a08:	4b3b      	ldr	r3, [pc, #236]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	78d2      	ldrb	r2, [r2, #3]
 8002a10:	73da      	strb	r2, [r3, #15]

	MSG->yiaddr[0] = 0;
 8002a12:	4b39      	ldr	r3, [pc, #228]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2200      	movs	r2, #0
 8002a18:	741a      	strb	r2, [r3, #16]
	MSG->yiaddr[1] = 0;
 8002a1a:	4b37      	ldr	r3, [pc, #220]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	745a      	strb	r2, [r3, #17]
	MSG->yiaddr[2] = 0;
 8002a22:	4b35      	ldr	r3, [pc, #212]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2200      	movs	r2, #0
 8002a28:	749a      	strb	r2, [r3, #18]
	MSG->yiaddr[3] = 0;
 8002a2a:	4b33      	ldr	r3, [pc, #204]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	74da      	strb	r2, [r3, #19]

	MSG->siaddr[0] = 0;
 8002a32:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2200      	movs	r2, #0
 8002a38:	751a      	strb	r2, [r3, #20]
	MSG->siaddr[1] = 0;
 8002a3a:	4b2f      	ldr	r3, [pc, #188]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	755a      	strb	r2, [r3, #21]
	MSG->siaddr[2] = 0;
 8002a42:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2200      	movs	r2, #0
 8002a48:	759a      	strb	r2, [r3, #22]
	MSG->siaddr[3] = 0;
 8002a4a:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	75da      	strb	r2, [r3, #23]

	MSG->giaddr[0] = 0;
 8002a52:	4b29      	ldr	r3, [pc, #164]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2200      	movs	r2, #0
 8002a58:	761a      	strb	r2, [r3, #24]
	MSG->giaddr[1] = 0;
 8002a5a:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	765a      	strb	r2, [r3, #25]
	MSG->giaddr[2] = 0;
 8002a62:	4b25      	ldr	r3, [pc, #148]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2200      	movs	r2, #0
 8002a68:	769a      	strb	r2, [r3, #26]
	MSG->giaddr[3] = 0;
 8002a6a:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	76da      	strb	r2, [r3, #27]

	MSG->chaddr[0] = wizchip_mac[0];
 8002a72:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a22      	ldr	r2, [pc, #136]	; (8002b00 <send_DHCP_REQUEST+0x170>)
 8002a78:	7812      	ldrb	r2, [r2, #0]
 8002a7a:	771a      	strb	r2, [r3, #28]
	MSG->chaddr[1] = wizchip_mac[1];
 8002a7c:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a1f      	ldr	r2, [pc, #124]	; (8002b00 <send_DHCP_REQUEST+0x170>)
 8002a82:	7852      	ldrb	r2, [r2, #1]
 8002a84:	775a      	strb	r2, [r3, #29]
	MSG->chaddr[2] = wizchip_mac[2];
 8002a86:	4b1c      	ldr	r3, [pc, #112]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a1d      	ldr	r2, [pc, #116]	; (8002b00 <send_DHCP_REQUEST+0x170>)
 8002a8c:	7892      	ldrb	r2, [r2, #2]
 8002a8e:	779a      	strb	r2, [r3, #30]
	MSG->chaddr[3] = wizchip_mac[3];
 8002a90:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1a      	ldr	r2, [pc, #104]	; (8002b00 <send_DHCP_REQUEST+0x170>)
 8002a96:	78d2      	ldrb	r2, [r2, #3]
 8002a98:	77da      	strb	r2, [r3, #31]
	MSG->chaddr[4] = wizchip_mac[4];
 8002a9a:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a18      	ldr	r2, [pc, #96]	; (8002b00 <send_DHCP_REQUEST+0x170>)
 8002aa0:	7912      	ldrb	r2, [r2, #4]
 8002aa2:	f883 2020 	strb.w	r2, [r3, #32]
	MSG->chaddr[5] = wizchip_mac[5];
 8002aa6:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a15      	ldr	r2, [pc, #84]	; (8002b00 <send_DHCP_REQUEST+0x170>)
 8002aac:	7952      	ldrb	r2, [r2, #5]
 8002aae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++) MSG->chaddr[i] = 0;
 8002ab2:	2306      	movs	r3, #6
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	e009      	b.n	8002acc <send_DHCP_REQUEST+0x13c>
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	4413      	add	r3, r2
 8002ac0:	3318      	adds	r3, #24
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	711a      	strb	r2, [r3, #4]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2b0f      	cmp	r3, #15
 8002ad0:	ddf2      	ble.n	8002ab8 <send_DHCP_REQUEST+0x128>
	for (i = 0; i < 64; i++) MSG->sname[i] = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	e009      	b.n	8002aec <send_DHCP_REQUEST+0x15c>
 8002ad8:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <send_DHCP_REQUEST+0x168>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	4413      	add	r3, r2
 8002ae0:	3328      	adds	r3, #40	; 0x28
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	711a      	strb	r2, [r3, #4]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b3f      	cmp	r3, #63	; 0x3f
 8002af0:	ddf2      	ble.n	8002ad8 <send_DHCP_REQUEST+0x148>
	for (i = 0; i < 128; i++) MSG->file[i] = 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	e00f      	b.n	8002b18 <send_DHCP_REQUEST+0x188>
 8002af8:	2000016c 	andcs	r0, r0, ip, ror #2
 8002afc:	20000154 	andcs	r0, r0, r4, asr r1
 8002b00:	2000011c 	andcs	r0, r0, ip, lsl r1
 8002b04:	4bab      	ldr	r3, [pc, #684]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3368      	adds	r3, #104	; 0x68
 8002b0e:	2200      	movs	r2, #0
 8002b10:	711a      	strb	r2, [r3, #4]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	3301      	adds	r3, #1
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2b7f      	cmp	r3, #127	; 0x7f
 8002b1c:	ddf2      	ble.n	8002b04 <send_DHCP_REQUEST+0x174>

	// MAGIC_COOKIE 
	MSG->OPT[k++] = 0x63;
 8002b1e:	4ba5      	ldr	r3, [pc, #660]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	8a7b      	ldrh	r3, [r7, #18]
 8002b24:	1c59      	adds	r1, r3, #1
 8002b26:	8279      	strh	r1, [r7, #18]
 8002b28:	4413      	add	r3, r2
 8002b2a:	2263      	movs	r2, #99	; 0x63
 8002b2c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x82;
 8002b30:	4ba0      	ldr	r3, [pc, #640]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	8a7b      	ldrh	r3, [r7, #18]
 8002b36:	1c59      	adds	r1, r3, #1
 8002b38:	8279      	strh	r1, [r7, #18]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	2282      	movs	r2, #130	; 0x82
 8002b3e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x53;
 8002b42:	4b9c      	ldr	r3, [pc, #624]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	8a7b      	ldrh	r3, [r7, #18]
 8002b48:	1c59      	adds	r1, r3, #1
 8002b4a:	8279      	strh	r1, [r7, #18]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	2253      	movs	r2, #83	; 0x53
 8002b50:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x63;
 8002b54:	4b97      	ldr	r3, [pc, #604]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	8a7b      	ldrh	r3, [r7, #18]
 8002b5a:	1c59      	adds	r1, r3, #1
 8002b5c:	8279      	strh	r1, [r7, #18]
 8002b5e:	4413      	add	r3, r2
 8002b60:	2263      	movs	r2, #99	; 0x63
 8002b62:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	// Option Request Param.
	MSG->OPT[k++] = dhcpMessageType;
 8002b66:	4b93      	ldr	r3, [pc, #588]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	8a7b      	ldrh	r3, [r7, #18]
 8002b6c:	1c59      	adds	r1, r3, #1
 8002b6e:	8279      	strh	r1, [r7, #18]
 8002b70:	4413      	add	r3, r2
 8002b72:	2235      	movs	r2, #53	; 0x35
 8002b74:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x01;
 8002b78:	4b8e      	ldr	r3, [pc, #568]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	8a7b      	ldrh	r3, [r7, #18]
 8002b7e:	1c59      	adds	r1, r3, #1
 8002b80:	8279      	strh	r1, [r7, #18]
 8002b82:	4413      	add	r3, r2
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_REQUEST;
 8002b8a:	4b8a      	ldr	r3, [pc, #552]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	8a7b      	ldrh	r3, [r7, #18]
 8002b90:	1c59      	adds	r1, r3, #1
 8002b92:	8279      	strh	r1, [r7, #18]
 8002b94:	4413      	add	r3, r2
 8002b96:	2203      	movs	r2, #3
 8002b98:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	MSG->OPT[k++] = dhcpClientIdentifier;
 8002b9c:	4b85      	ldr	r3, [pc, #532]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	8a7b      	ldrh	r3, [r7, #18]
 8002ba2:	1c59      	adds	r1, r3, #1
 8002ba4:	8279      	strh	r1, [r7, #18]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	223d      	movs	r2, #61	; 0x3d
 8002baa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x07;
 8002bae:	4b81      	ldr	r3, [pc, #516]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	8a7b      	ldrh	r3, [r7, #18]
 8002bb4:	1c59      	adds	r1, r3, #1
 8002bb6:	8279      	strh	r1, [r7, #18]
 8002bb8:	4413      	add	r3, r2
 8002bba:	2207      	movs	r2, #7
 8002bbc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x01;
 8002bc0:	4b7c      	ldr	r3, [pc, #496]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	8a7b      	ldrh	r3, [r7, #18]
 8002bc6:	1c59      	adds	r1, r3, #1
 8002bc8:	8279      	strh	r1, [r7, #18]
 8002bca:	4413      	add	r3, r2
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[0];
 8002bd2:	4b78      	ldr	r3, [pc, #480]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	8a7b      	ldrh	r3, [r7, #18]
 8002bd8:	1c59      	adds	r1, r3, #1
 8002bda:	8279      	strh	r1, [r7, #18]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	4b76      	ldr	r3, [pc, #472]	; (8002db8 <send_DHCP_REQUEST+0x428>)
 8002be0:	7819      	ldrb	r1, [r3, #0]
 8002be2:	1813      	adds	r3, r2, r0
 8002be4:	460a      	mov	r2, r1
 8002be6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[1];
 8002bea:	4b72      	ldr	r3, [pc, #456]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	8a7b      	ldrh	r3, [r7, #18]
 8002bf0:	1c59      	adds	r1, r3, #1
 8002bf2:	8279      	strh	r1, [r7, #18]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	4b70      	ldr	r3, [pc, #448]	; (8002db8 <send_DHCP_REQUEST+0x428>)
 8002bf8:	7859      	ldrb	r1, [r3, #1]
 8002bfa:	1813      	adds	r3, r2, r0
 8002bfc:	460a      	mov	r2, r1
 8002bfe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[2];
 8002c02:	4b6c      	ldr	r3, [pc, #432]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	8a7b      	ldrh	r3, [r7, #18]
 8002c08:	1c59      	adds	r1, r3, #1
 8002c0a:	8279      	strh	r1, [r7, #18]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	4b6a      	ldr	r3, [pc, #424]	; (8002db8 <send_DHCP_REQUEST+0x428>)
 8002c10:	7899      	ldrb	r1, [r3, #2]
 8002c12:	1813      	adds	r3, r2, r0
 8002c14:	460a      	mov	r2, r1
 8002c16:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[3];
 8002c1a:	4b66      	ldr	r3, [pc, #408]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	8a7b      	ldrh	r3, [r7, #18]
 8002c20:	1c59      	adds	r1, r3, #1
 8002c22:	8279      	strh	r1, [r7, #18]
 8002c24:	4618      	mov	r0, r3
 8002c26:	4b64      	ldr	r3, [pc, #400]	; (8002db8 <send_DHCP_REQUEST+0x428>)
 8002c28:	78d9      	ldrb	r1, [r3, #3]
 8002c2a:	1813      	adds	r3, r2, r0
 8002c2c:	460a      	mov	r2, r1
 8002c2e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[4];
 8002c32:	4b60      	ldr	r3, [pc, #384]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	8a7b      	ldrh	r3, [r7, #18]
 8002c38:	1c59      	adds	r1, r3, #1
 8002c3a:	8279      	strh	r1, [r7, #18]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	4b5e      	ldr	r3, [pc, #376]	; (8002db8 <send_DHCP_REQUEST+0x428>)
 8002c40:	7919      	ldrb	r1, [r3, #4]
 8002c42:	1813      	adds	r3, r2, r0
 8002c44:	460a      	mov	r2, r1
 8002c46:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[5];
 8002c4a:	4b5a      	ldr	r3, [pc, #360]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	8a7b      	ldrh	r3, [r7, #18]
 8002c50:	1c59      	adds	r1, r3, #1
 8002c52:	8279      	strh	r1, [r7, #18]
 8002c54:	4618      	mov	r0, r3
 8002c56:	4b58      	ldr	r3, [pc, #352]	; (8002db8 <send_DHCP_REQUEST+0x428>)
 8002c58:	7959      	ldrb	r1, [r3, #5]
 8002c5a:	1813      	adds	r3, r2, r0
 8002c5c:	460a      	mov	r2, r1
 8002c5e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	if (d_addr[0] == 0xff) {
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2bff      	cmp	r3, #255	; 0xff
 8002c68:	f040 8084 	bne.w	8002d74 <send_DHCP_REQUEST+0x3e4>
		MSG->OPT[k++] = dhcpRequestedIPaddr;
 8002c6c:	4b51      	ldr	r3, [pc, #324]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	8a7b      	ldrh	r3, [r7, #18]
 8002c72:	1c59      	adds	r1, r3, #1
 8002c74:	8279      	strh	r1, [r7, #18]
 8002c76:	4413      	add	r3, r2
 8002c78:	2232      	movs	r2, #50	; 0x32
 8002c7a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = 0x04;
 8002c7e:	4b4d      	ldr	r3, [pc, #308]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	8a7b      	ldrh	r3, [r7, #18]
 8002c84:	1c59      	adds	r1, r3, #1
 8002c86:	8279      	strh	r1, [r7, #18]
 8002c88:	4413      	add	r3, r2
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_allocated_ip[0];
 8002c90:	4b48      	ldr	r3, [pc, #288]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	8a7b      	ldrh	r3, [r7, #18]
 8002c96:	1c59      	adds	r1, r3, #1
 8002c98:	8279      	strh	r1, [r7, #18]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	4b47      	ldr	r3, [pc, #284]	; (8002dbc <send_DHCP_REQUEST+0x42c>)
 8002c9e:	7819      	ldrb	r1, [r3, #0]
 8002ca0:	1813      	adds	r3, r2, r0
 8002ca2:	460a      	mov	r2, r1
 8002ca4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_allocated_ip[1];
 8002ca8:	4b42      	ldr	r3, [pc, #264]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	8a7b      	ldrh	r3, [r7, #18]
 8002cae:	1c59      	adds	r1, r3, #1
 8002cb0:	8279      	strh	r1, [r7, #18]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	4b41      	ldr	r3, [pc, #260]	; (8002dbc <send_DHCP_REQUEST+0x42c>)
 8002cb6:	7859      	ldrb	r1, [r3, #1]
 8002cb8:	1813      	adds	r3, r2, r0
 8002cba:	460a      	mov	r2, r1
 8002cbc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_allocated_ip[2];
 8002cc0:	4b3c      	ldr	r3, [pc, #240]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	8a7b      	ldrh	r3, [r7, #18]
 8002cc6:	1c59      	adds	r1, r3, #1
 8002cc8:	8279      	strh	r1, [r7, #18]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	4b3b      	ldr	r3, [pc, #236]	; (8002dbc <send_DHCP_REQUEST+0x42c>)
 8002cce:	7899      	ldrb	r1, [r3, #2]
 8002cd0:	1813      	adds	r3, r2, r0
 8002cd2:	460a      	mov	r2, r1
 8002cd4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_allocated_ip[3];
 8002cd8:	4b36      	ldr	r3, [pc, #216]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	8a7b      	ldrh	r3, [r7, #18]
 8002cde:	1c59      	adds	r1, r3, #1
 8002ce0:	8279      	strh	r1, [r7, #18]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	4b35      	ldr	r3, [pc, #212]	; (8002dbc <send_DHCP_REQUEST+0x42c>)
 8002ce6:	78d9      	ldrb	r1, [r3, #3]
 8002ce8:	1813      	adds	r3, r2, r0
 8002cea:	460a      	mov	r2, r1
 8002cec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		MSG->OPT[k++] = dhcpServerIdentifier;
 8002cf0:	4b30      	ldr	r3, [pc, #192]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	8a7b      	ldrh	r3, [r7, #18]
 8002cf6:	1c59      	adds	r1, r3, #1
 8002cf8:	8279      	strh	r1, [r7, #18]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	2236      	movs	r2, #54	; 0x36
 8002cfe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = 0x04;
 8002d02:	4b2c      	ldr	r3, [pc, #176]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	8a7b      	ldrh	r3, [r7, #18]
 8002d08:	1c59      	adds	r1, r3, #1
 8002d0a:	8279      	strh	r1, [r7, #18]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	2204      	movs	r2, #4
 8002d10:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_SIP[0];
 8002d14:	4b27      	ldr	r3, [pc, #156]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	8a7b      	ldrh	r3, [r7, #18]
 8002d1a:	1c59      	adds	r1, r3, #1
 8002d1c:	8279      	strh	r1, [r7, #18]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	4b27      	ldr	r3, [pc, #156]	; (8002dc0 <send_DHCP_REQUEST+0x430>)
 8002d22:	7819      	ldrb	r1, [r3, #0]
 8002d24:	1813      	adds	r3, r2, r0
 8002d26:	460a      	mov	r2, r1
 8002d28:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_SIP[1];
 8002d2c:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	8a7b      	ldrh	r3, [r7, #18]
 8002d32:	1c59      	adds	r1, r3, #1
 8002d34:	8279      	strh	r1, [r7, #18]
 8002d36:	4618      	mov	r0, r3
 8002d38:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <send_DHCP_REQUEST+0x430>)
 8002d3a:	7859      	ldrb	r1, [r3, #1]
 8002d3c:	1813      	adds	r3, r2, r0
 8002d3e:	460a      	mov	r2, r1
 8002d40:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_SIP[2];
 8002d44:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	8a7b      	ldrh	r3, [r7, #18]
 8002d4a:	1c59      	adds	r1, r3, #1
 8002d4c:	8279      	strh	r1, [r7, #18]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <send_DHCP_REQUEST+0x430>)
 8002d52:	7899      	ldrb	r1, [r3, #2]
 8002d54:	1813      	adds	r3, r2, r0
 8002d56:	460a      	mov	r2, r1
 8002d58:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_SIP[3];
 8002d5c:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	8a7b      	ldrh	r3, [r7, #18]
 8002d62:	1c59      	adds	r1, r3, #1
 8002d64:	8279      	strh	r1, [r7, #18]
 8002d66:	4618      	mov	r0, r3
 8002d68:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <send_DHCP_REQUEST+0x430>)
 8002d6a:	78d9      	ldrb	r1, [r3, #3]
 8002d6c:	1813      	adds	r3, r2, r0
 8002d6e:	460a      	mov	r2, r1
 8002d70:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	MSG->OPT[k++] = hostName;
 8002d74:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	8a7b      	ldrh	r3, [r7, #18]
 8002d7a:	1c59      	adds	r1, r3, #1
 8002d7c:	8279      	strh	r1, [r7, #18]
 8002d7e:	4413      	add	r3, r2
 8002d80:	220c      	movs	r2, #12
 8002d82:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 9; // length of hostname
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	8a7b      	ldrh	r3, [r7, #18]
 8002d8c:	1c59      	adds	r1, r3, #1
 8002d8e:	8279      	strh	r1, [r7, #18]
 8002d90:	4413      	add	r3, r2
 8002d92:	2209      	movs	r2, #9
 8002d94:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[0];
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <send_DHCP_REQUEST+0x424>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	8a7b      	ldrh	r3, [r7, #18]
 8002d9e:	1c59      	adds	r1, r3, #1
 8002da0:	8279      	strh	r1, [r7, #18]
 8002da2:	4618      	mov	r0, r3
 8002da4:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <send_DHCP_REQUEST+0x434>)
 8002da6:	7819      	ldrb	r1, [r3, #0]
 8002da8:	1813      	adds	r3, r2, r0
 8002daa:	460a      	mov	r2, r1
 8002dac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8002db0:	e00a      	b.n	8002dc8 <send_DHCP_REQUEST+0x438>
 8002db2:	bf00      	nop
 8002db4:	2000016c 	andcs	r0, r0, ip, ror #2
 8002db8:	2000011c 	andcs	r0, r0, ip, lsl r1
 8002dbc:	2000010c 	andcs	r0, r0, ip, lsl #2
 8002dc0:	20000158 	andcs	r0, r0, r8, asr r1
 8002dc4:	20000040 	andcs	r0, r0, r0, asr #32
	MSG->OPT[k++] = HOST_NAME[1];
 8002dc8:	4b7c      	ldr	r3, [pc, #496]	; (8002fbc <send_DHCP_REQUEST+0x62c>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	8a7b      	ldrh	r3, [r7, #18]
 8002dce:	1c59      	adds	r1, r3, #1
 8002dd0:	8279      	strh	r1, [r7, #18]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	4b7a      	ldr	r3, [pc, #488]	; (8002fc0 <send_DHCP_REQUEST+0x630>)
 8002dd6:	7859      	ldrb	r1, [r3, #1]
 8002dd8:	1813      	adds	r3, r2, r0
 8002dda:	460a      	mov	r2, r1
 8002ddc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[2];
 8002de0:	4b76      	ldr	r3, [pc, #472]	; (8002fbc <send_DHCP_REQUEST+0x62c>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	8a7b      	ldrh	r3, [r7, #18]
 8002de6:	1c59      	adds	r1, r3, #1
 8002de8:	8279      	strh	r1, [r7, #18]
 8002dea:	4618      	mov	r0, r3
 8002dec:	4b74      	ldr	r3, [pc, #464]	; (8002fc0 <send_DHCP_REQUEST+0x630>)
 8002dee:	7899      	ldrb	r1, [r3, #2]
 8002df0:	1813      	adds	r3, r2, r0
 8002df2:	460a      	mov	r2, r1
 8002df4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[3];
 8002df8:	4b70      	ldr	r3, [pc, #448]	; (8002fbc <send_DHCP_REQUEST+0x62c>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	8a7b      	ldrh	r3, [r7, #18]
 8002dfe:	1c59      	adds	r1, r3, #1
 8002e00:	8279      	strh	r1, [r7, #18]
 8002e02:	4618      	mov	r0, r3
 8002e04:	4b6e      	ldr	r3, [pc, #440]	; (8002fc0 <send_DHCP_REQUEST+0x630>)
 8002e06:	78d9      	ldrb	r1, [r3, #3]
 8002e08:	1813      	adds	r3, r2, r0
 8002e0a:	460a      	mov	r2, r1
 8002e0c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[4];
 8002e10:	4b6a      	ldr	r3, [pc, #424]	; (8002fbc <send_DHCP_REQUEST+0x62c>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	8a7b      	ldrh	r3, [r7, #18]
 8002e16:	1c59      	adds	r1, r3, #1
 8002e18:	8279      	strh	r1, [r7, #18]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	4b68      	ldr	r3, [pc, #416]	; (8002fc0 <send_DHCP_REQUEST+0x630>)
 8002e1e:	7919      	ldrb	r1, [r3, #4]
 8002e20:	1813      	adds	r3, r2, r0
 8002e22:	460a      	mov	r2, r1
 8002e24:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[5];
 8002e28:	4b64      	ldr	r3, [pc, #400]	; (8002fbc <send_DHCP_REQUEST+0x62c>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	8a7b      	ldrh	r3, [r7, #18]
 8002e2e:	1c59      	adds	r1, r3, #1
 8002e30:	8279      	strh	r1, [r7, #18]
 8002e32:	4618      	mov	r0, r3
 8002e34:	4b62      	ldr	r3, [pc, #392]	; (8002fc0 <send_DHCP_REQUEST+0x630>)
 8002e36:	7959      	ldrb	r1, [r3, #5]
 8002e38:	1813      	adds	r3, r2, r0
 8002e3a:	460a      	mov	r2, r1
 8002e3c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[3];
 8002e40:	4b5e      	ldr	r3, [pc, #376]	; (8002fbc <send_DHCP_REQUEST+0x62c>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	8a7b      	ldrh	r3, [r7, #18]
 8002e46:	1c59      	adds	r1, r3, #1
 8002e48:	8279      	strh	r1, [r7, #18]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	4b5d      	ldr	r3, [pc, #372]	; (8002fc4 <send_DHCP_REQUEST+0x634>)
 8002e4e:	78d9      	ldrb	r1, [r3, #3]
 8002e50:	1813      	adds	r3, r2, r0
 8002e52:	460a      	mov	r2, r1
 8002e54:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[4];
 8002e58:	4b58      	ldr	r3, [pc, #352]	; (8002fbc <send_DHCP_REQUEST+0x62c>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	8a7b      	ldrh	r3, [r7, #18]
 8002e5e:	1c59      	adds	r1, r3, #1
 8002e60:	8279      	strh	r1, [r7, #18]
 8002e62:	4618      	mov	r0, r3
 8002e64:	4b57      	ldr	r3, [pc, #348]	; (8002fc4 <send_DHCP_REQUEST+0x634>)
 8002e66:	7919      	ldrb	r1, [r3, #4]
 8002e68:	1813      	adds	r3, r2, r0
 8002e6a:	460a      	mov	r2, r1
 8002e6c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[5];
 8002e70:	4b52      	ldr	r3, [pc, #328]	; (8002fbc <send_DHCP_REQUEST+0x62c>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	8a7b      	ldrh	r3, [r7, #18]
 8002e76:	1c59      	adds	r1, r3, #1
 8002e78:	8279      	strh	r1, [r7, #18]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	4b51      	ldr	r3, [pc, #324]	; (8002fc4 <send_DHCP_REQUEST+0x634>)
 8002e7e:	7959      	ldrb	r1, [r3, #5]
 8002e80:	1813      	adds	r3, r2, r0
 8002e82:	460a      	mov	r2, r1
 8002e84:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	MSG->OPT[k++] = dhcpParamRequest;
 8002e88:	4b4c      	ldr	r3, [pc, #304]	; (8002fbc <send_DHCP_REQUEST+0x62c>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	8a7b      	ldrh	r3, [r7, #18]
 8002e8e:	1c59      	adds	r1, r3, #1
 8002e90:	8279      	strh	r1, [r7, #18]
 8002e92:	4413      	add	r3, r2
 8002e94:	2237      	movs	r2, #55	; 0x37
 8002e96:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x08;
 8002e9a:	4b48      	ldr	r3, [pc, #288]	; (8002fbc <send_DHCP_REQUEST+0x62c>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	8a7b      	ldrh	r3, [r7, #18]
 8002ea0:	1c59      	adds	r1, r3, #1
 8002ea2:	8279      	strh	r1, [r7, #18]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	2208      	movs	r2, #8
 8002ea8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = subnetMask;
 8002eac:	4b43      	ldr	r3, [pc, #268]	; (8002fbc <send_DHCP_REQUEST+0x62c>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	8a7b      	ldrh	r3, [r7, #18]
 8002eb2:	1c59      	adds	r1, r3, #1
 8002eb4:	8279      	strh	r1, [r7, #18]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = routersOnSubnet;
 8002ebe:	4b3f      	ldr	r3, [pc, #252]	; (8002fbc <send_DHCP_REQUEST+0x62c>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	8a7b      	ldrh	r3, [r7, #18]
 8002ec4:	1c59      	adds	r1, r3, #1
 8002ec6:	8279      	strh	r1, [r7, #18]
 8002ec8:	4413      	add	r3, r2
 8002eca:	2203      	movs	r2, #3
 8002ecc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = dns;
 8002ed0:	4b3a      	ldr	r3, [pc, #232]	; (8002fbc <send_DHCP_REQUEST+0x62c>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	8a7b      	ldrh	r3, [r7, #18]
 8002ed6:	1c59      	adds	r1, r3, #1
 8002ed8:	8279      	strh	r1, [r7, #18]
 8002eda:	4413      	add	r3, r2
 8002edc:	2206      	movs	r2, #6
 8002ede:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = domainName;
 8002ee2:	4b36      	ldr	r3, [pc, #216]	; (8002fbc <send_DHCP_REQUEST+0x62c>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	8a7b      	ldrh	r3, [r7, #18]
 8002ee8:	1c59      	adds	r1, r3, #1
 8002eea:	8279      	strh	r1, [r7, #18]
 8002eec:	4413      	add	r3, r2
 8002eee:	220f      	movs	r2, #15
 8002ef0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = dhcpT1value;
 8002ef4:	4b31      	ldr	r3, [pc, #196]	; (8002fbc <send_DHCP_REQUEST+0x62c>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	8a7b      	ldrh	r3, [r7, #18]
 8002efa:	1c59      	adds	r1, r3, #1
 8002efc:	8279      	strh	r1, [r7, #18]
 8002efe:	4413      	add	r3, r2
 8002f00:	223a      	movs	r2, #58	; 0x3a
 8002f02:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = dhcpT2value;
 8002f06:	4b2d      	ldr	r3, [pc, #180]	; (8002fbc <send_DHCP_REQUEST+0x62c>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	8a7b      	ldrh	r3, [r7, #18]
 8002f0c:	1c59      	adds	r1, r3, #1
 8002f0e:	8279      	strh	r1, [r7, #18]
 8002f10:	4413      	add	r3, r2
 8002f12:	223b      	movs	r2, #59	; 0x3b
 8002f14:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = performRouterDiscovery;
 8002f18:	4b28      	ldr	r3, [pc, #160]	; (8002fbc <send_DHCP_REQUEST+0x62c>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	8a7b      	ldrh	r3, [r7, #18]
 8002f1e:	1c59      	adds	r1, r3, #1
 8002f20:	8279      	strh	r1, [r7, #18]
 8002f22:	4413      	add	r3, r2
 8002f24:	221f      	movs	r2, #31
 8002f26:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = staticRoute;
 8002f2a:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <send_DHCP_REQUEST+0x62c>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	8a7b      	ldrh	r3, [r7, #18]
 8002f30:	1c59      	adds	r1, r3, #1
 8002f32:	8279      	strh	r1, [r7, #18]
 8002f34:	4413      	add	r3, r2
 8002f36:	2221      	movs	r2, #33	; 0x21
 8002f38:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = endOption;
 8002f3c:	4b1f      	ldr	r3, [pc, #124]	; (8002fbc <send_DHCP_REQUEST+0x62c>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	8a7b      	ldrh	r3, [r7, #18]
 8002f42:	1c59      	adds	r1, r3, #1
 8002f44:	8279      	strh	r1, [r7, #18]
 8002f46:	4413      	add	r3, r2
 8002f48:	22ff      	movs	r2, #255	; 0xff
 8002f4a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) MSG->OPT[i] = 0;
 8002f4e:	8a7b      	ldrh	r3, [r7, #18]
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	e009      	b.n	8002f68 <send_DHCP_REQUEST+0x5d8>
 8002f54:	4b19      	ldr	r3, [pc, #100]	; (8002fbc <send_DHCP_REQUEST+0x62c>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	33e8      	adds	r3, #232	; 0xe8
 8002f5e:	2200      	movs	r2, #0
 8002f60:	711a      	strb	r2, [r3, #4]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	3301      	adds	r3, #1
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8002f6e:	dbf1      	blt.n	8002f54 <send_DHCP_REQUEST+0x5c4>

	// send broadcasting packet
	for (i = 0; i < 4; i++) ip[i] = d_addr[i];
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	e00c      	b.n	8002f90 <send_DHCP_REQUEST+0x600>
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	7819      	ldrb	r1, [r3, #0]
 8002f7e:	f107 020c 	add.w	r2, r7, #12
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	4413      	add	r3, r2
 8002f86:	460a      	mov	r2, r1
 8002f88:	701a      	strb	r2, [r3, #0]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	ddef      	ble.n	8002f76 <send_DHCP_REQUEST+0x5e6>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)MSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8002f96:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <send_DHCP_REQUEST+0x638>)
 8002f98:	7819      	ldrb	r1, [r3, #0]
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <send_DHCP_REQUEST+0x62c>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	f107 040c 	add.w	r4, r7, #12
 8002fa2:	2343      	movs	r3, #67	; 0x43
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	4608      	mov	r0, r1
 8002fa8:	4611      	mov	r1, r2
 8002faa:	f44f 7209 	mov.w	r2, #548	; 0x224
 8002fae:	4623      	mov	r3, r4
 8002fb0:	f7fd ff3c 	bl	8000e2c <sendto>

}
 8002fb4:	371c      	adds	r7, #28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd90      	pop	{r4, r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	2000016c 	andcs	r0, r0, ip, ror #2
 8002fc0:	20000040 	andcs	r0, r0, r0, asr #32
 8002fc4:	2000011c 	andcs	r0, r0, ip, lsl r1
 8002fc8:	20000170 	andcs	r0, r0, r0, ror r1

08002fcc <send_DHCP_DECLINE>:
* Returns    : None.
* Note       : 
*********************************************************************************************************
*/
void send_DHCP_DECLINE(void)
{
 8002fcc:	b590      	push	{r4, r7, lr}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	817b      	strh	r3, [r7, #10]

	MSG->op = DHCP_BOOTREQUEST;
 8002fd6:	4b50      	ldr	r3, [pc, #320]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	701a      	strb	r2, [r3, #0]
	MSG->htype = DHCP_HTYPE10MB;
 8002fde:	4b4e      	ldr	r3, [pc, #312]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	705a      	strb	r2, [r3, #1]
	MSG->hlen = DHCP_HLENETHERNET;
 8002fe6:	4b4c      	ldr	r3, [pc, #304]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2206      	movs	r2, #6
 8002fec:	709a      	strb	r2, [r3, #2]
	MSG->hops = DHCP_HOPS;
 8002fee:	4b4a      	ldr	r3, [pc, #296]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	70da      	strb	r2, [r3, #3]
	MSG->xid = DHCP_XID;
 8002ff6:	4b48      	ldr	r3, [pc, #288]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a48      	ldr	r2, [pc, #288]	; (800311c <send_DHCP_DECLINE+0x150>)
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	605a      	str	r2, [r3, #4]
	MSG->secs = DHCP_SECS;
 8003000:	4b45      	ldr	r3, [pc, #276]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2200      	movs	r2, #0
 8003006:	811a      	strh	r2, [r3, #8]
	MSG->flags = 0;
 8003008:	4b43      	ldr	r3, [pc, #268]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2200      	movs	r2, #0
 800300e:	815a      	strh	r2, [r3, #10]

	MSG->ciaddr[0] = 0;
 8003010:	4b41      	ldr	r3, [pc, #260]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2200      	movs	r2, #0
 8003016:	731a      	strb	r2, [r3, #12]
	MSG->ciaddr[1] = 0;
 8003018:	4b3f      	ldr	r3, [pc, #252]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2200      	movs	r2, #0
 800301e:	735a      	strb	r2, [r3, #13]
	MSG->ciaddr[2] = 0;
 8003020:	4b3d      	ldr	r3, [pc, #244]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2200      	movs	r2, #0
 8003026:	739a      	strb	r2, [r3, #14]
	MSG->ciaddr[3] = 0;
 8003028:	4b3b      	ldr	r3, [pc, #236]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2200      	movs	r2, #0
 800302e:	73da      	strb	r2, [r3, #15]

	MSG->yiaddr[0] = 0;
 8003030:	4b39      	ldr	r3, [pc, #228]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2200      	movs	r2, #0
 8003036:	741a      	strb	r2, [r3, #16]
	MSG->yiaddr[1] = 0;
 8003038:	4b37      	ldr	r3, [pc, #220]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2200      	movs	r2, #0
 800303e:	745a      	strb	r2, [r3, #17]
	MSG->yiaddr[2] = 0;
 8003040:	4b35      	ldr	r3, [pc, #212]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2200      	movs	r2, #0
 8003046:	749a      	strb	r2, [r3, #18]
	MSG->yiaddr[3] = 0;
 8003048:	4b33      	ldr	r3, [pc, #204]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2200      	movs	r2, #0
 800304e:	74da      	strb	r2, [r3, #19]

	MSG->siaddr[0] = 0;
 8003050:	4b31      	ldr	r3, [pc, #196]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2200      	movs	r2, #0
 8003056:	751a      	strb	r2, [r3, #20]
	MSG->siaddr[1] = 0;
 8003058:	4b2f      	ldr	r3, [pc, #188]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2200      	movs	r2, #0
 800305e:	755a      	strb	r2, [r3, #21]
	MSG->siaddr[2] = 0;
 8003060:	4b2d      	ldr	r3, [pc, #180]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2200      	movs	r2, #0
 8003066:	759a      	strb	r2, [r3, #22]
	MSG->siaddr[3] = 0;
 8003068:	4b2b      	ldr	r3, [pc, #172]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2200      	movs	r2, #0
 800306e:	75da      	strb	r2, [r3, #23]

	MSG->giaddr[0] = 0;
 8003070:	4b29      	ldr	r3, [pc, #164]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2200      	movs	r2, #0
 8003076:	761a      	strb	r2, [r3, #24]
	MSG->giaddr[1] = 0;
 8003078:	4b27      	ldr	r3, [pc, #156]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2200      	movs	r2, #0
 800307e:	765a      	strb	r2, [r3, #25]
	MSG->giaddr[2] = 0;
 8003080:	4b25      	ldr	r3, [pc, #148]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2200      	movs	r2, #0
 8003086:	769a      	strb	r2, [r3, #26]
	MSG->giaddr[3] = 0;
 8003088:	4b23      	ldr	r3, [pc, #140]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2200      	movs	r2, #0
 800308e:	76da      	strb	r2, [r3, #27]

	MSG->chaddr[0] = wizchip_mac[0];
 8003090:	4b21      	ldr	r3, [pc, #132]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a22      	ldr	r2, [pc, #136]	; (8003120 <send_DHCP_DECLINE+0x154>)
 8003096:	7812      	ldrb	r2, [r2, #0]
 8003098:	771a      	strb	r2, [r3, #28]
	MSG->chaddr[1] = wizchip_mac[1];
 800309a:	4b1f      	ldr	r3, [pc, #124]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a20      	ldr	r2, [pc, #128]	; (8003120 <send_DHCP_DECLINE+0x154>)
 80030a0:	7852      	ldrb	r2, [r2, #1]
 80030a2:	775a      	strb	r2, [r3, #29]
	MSG->chaddr[2] = wizchip_mac[2];
 80030a4:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a1d      	ldr	r2, [pc, #116]	; (8003120 <send_DHCP_DECLINE+0x154>)
 80030aa:	7892      	ldrb	r2, [r2, #2]
 80030ac:	779a      	strb	r2, [r3, #30]
	MSG->chaddr[3] = wizchip_mac[3];
 80030ae:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1b      	ldr	r2, [pc, #108]	; (8003120 <send_DHCP_DECLINE+0x154>)
 80030b4:	78d2      	ldrb	r2, [r2, #3]
 80030b6:	77da      	strb	r2, [r3, #31]
	MSG->chaddr[4] = wizchip_mac[4];
 80030b8:	4b17      	ldr	r3, [pc, #92]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a18      	ldr	r2, [pc, #96]	; (8003120 <send_DHCP_DECLINE+0x154>)
 80030be:	7912      	ldrb	r2, [r2, #4]
 80030c0:	f883 2020 	strb.w	r2, [r3, #32]
	MSG->chaddr[5] = wizchip_mac[5];
 80030c4:	4b14      	ldr	r3, [pc, #80]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a15      	ldr	r2, [pc, #84]	; (8003120 <send_DHCP_DECLINE+0x154>)
 80030ca:	7952      	ldrb	r2, [r2, #5]
 80030cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++) MSG->chaddr[i] = 0;
 80030d0:	2306      	movs	r3, #6
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	e009      	b.n	80030ea <send_DHCP_DECLINE+0x11e>
 80030d6:	4b10      	ldr	r3, [pc, #64]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4413      	add	r3, r2
 80030de:	3318      	adds	r3, #24
 80030e0:	2200      	movs	r2, #0
 80030e2:	711a      	strb	r2, [r3, #4]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	3301      	adds	r3, #1
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b0f      	cmp	r3, #15
 80030ee:	ddf2      	ble.n	80030d6 <send_DHCP_DECLINE+0x10a>
	for (i = 0; i < 64; i++) MSG->sname[i] = 0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	e009      	b.n	800310a <send_DHCP_DECLINE+0x13e>
 80030f6:	4b08      	ldr	r3, [pc, #32]	; (8003118 <send_DHCP_DECLINE+0x14c>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4413      	add	r3, r2
 80030fe:	3328      	adds	r3, #40	; 0x28
 8003100:	2200      	movs	r2, #0
 8003102:	711a      	strb	r2, [r3, #4]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3301      	adds	r3, #1
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2b3f      	cmp	r3, #63	; 0x3f
 800310e:	ddf2      	ble.n	80030f6 <send_DHCP_DECLINE+0x12a>
	for (i = 0; i < 128; i++) MSG->file[i] = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	e010      	b.n	8003138 <send_DHCP_DECLINE+0x16c>
 8003116:	bf00      	nop
 8003118:	2000016c 	andcs	r0, r0, ip, ror #2
 800311c:	20000154 	andcs	r0, r0, r4, asr r1
 8003120:	2000011c 	andcs	r0, r0, ip, lsl r1
 8003124:	4b9f      	ldr	r3, [pc, #636]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	3368      	adds	r3, #104	; 0x68
 800312e:	2200      	movs	r2, #0
 8003130:	711a      	strb	r2, [r3, #4]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	3301      	adds	r3, #1
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b7f      	cmp	r3, #127	; 0x7f
 800313c:	ddf2      	ble.n	8003124 <send_DHCP_DECLINE+0x158>

	// MAGIC_COOKIE
	MSG->OPT[k++] = 0x63;
 800313e:	4b99      	ldr	r3, [pc, #612]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	897b      	ldrh	r3, [r7, #10]
 8003144:	1c59      	adds	r1, r3, #1
 8003146:	8179      	strh	r1, [r7, #10]
 8003148:	4413      	add	r3, r2
 800314a:	2263      	movs	r2, #99	; 0x63
 800314c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x82;
 8003150:	4b94      	ldr	r3, [pc, #592]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	897b      	ldrh	r3, [r7, #10]
 8003156:	1c59      	adds	r1, r3, #1
 8003158:	8179      	strh	r1, [r7, #10]
 800315a:	4413      	add	r3, r2
 800315c:	2282      	movs	r2, #130	; 0x82
 800315e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x53;
 8003162:	4b90      	ldr	r3, [pc, #576]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	897b      	ldrh	r3, [r7, #10]
 8003168:	1c59      	adds	r1, r3, #1
 800316a:	8179      	strh	r1, [r7, #10]
 800316c:	4413      	add	r3, r2
 800316e:	2253      	movs	r2, #83	; 0x53
 8003170:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x63;
 8003174:	4b8b      	ldr	r3, [pc, #556]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	897b      	ldrh	r3, [r7, #10]
 800317a:	1c59      	adds	r1, r3, #1
 800317c:	8179      	strh	r1, [r7, #10]
 800317e:	4413      	add	r3, r2
 8003180:	2263      	movs	r2, #99	; 0x63
 8003182:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	// Option Request Param.
	MSG->OPT[k++] = dhcpMessageType;
 8003186:	4b87      	ldr	r3, [pc, #540]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	897b      	ldrh	r3, [r7, #10]
 800318c:	1c59      	adds	r1, r3, #1
 800318e:	8179      	strh	r1, [r7, #10]
 8003190:	4413      	add	r3, r2
 8003192:	2235      	movs	r2, #53	; 0x35
 8003194:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x01;
 8003198:	4b82      	ldr	r3, [pc, #520]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	897b      	ldrh	r3, [r7, #10]
 800319e:	1c59      	adds	r1, r3, #1
 80031a0:	8179      	strh	r1, [r7, #10]
 80031a2:	4413      	add	r3, r2
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_DECLINE;
 80031aa:	4b7e      	ldr	r3, [pc, #504]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	897b      	ldrh	r3, [r7, #10]
 80031b0:	1c59      	adds	r1, r3, #1
 80031b2:	8179      	strh	r1, [r7, #10]
 80031b4:	4413      	add	r3, r2
 80031b6:	2204      	movs	r2, #4
 80031b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	MSG->OPT[k++] = dhcpClientIdentifier;
 80031bc:	4b79      	ldr	r3, [pc, #484]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	897b      	ldrh	r3, [r7, #10]
 80031c2:	1c59      	adds	r1, r3, #1
 80031c4:	8179      	strh	r1, [r7, #10]
 80031c6:	4413      	add	r3, r2
 80031c8:	223d      	movs	r2, #61	; 0x3d
 80031ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x07;
 80031ce:	4b75      	ldr	r3, [pc, #468]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	897b      	ldrh	r3, [r7, #10]
 80031d4:	1c59      	adds	r1, r3, #1
 80031d6:	8179      	strh	r1, [r7, #10]
 80031d8:	4413      	add	r3, r2
 80031da:	2207      	movs	r2, #7
 80031dc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x01;
 80031e0:	4b70      	ldr	r3, [pc, #448]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	897b      	ldrh	r3, [r7, #10]
 80031e6:	1c59      	adds	r1, r3, #1
 80031e8:	8179      	strh	r1, [r7, #10]
 80031ea:	4413      	add	r3, r2
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[0];
 80031f2:	4b6c      	ldr	r3, [pc, #432]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	897b      	ldrh	r3, [r7, #10]
 80031f8:	1c59      	adds	r1, r3, #1
 80031fa:	8179      	strh	r1, [r7, #10]
 80031fc:	4618      	mov	r0, r3
 80031fe:	4b6a      	ldr	r3, [pc, #424]	; (80033a8 <send_DHCP_DECLINE+0x3dc>)
 8003200:	7819      	ldrb	r1, [r3, #0]
 8003202:	1813      	adds	r3, r2, r0
 8003204:	460a      	mov	r2, r1
 8003206:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[1];
 800320a:	4b66      	ldr	r3, [pc, #408]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	897b      	ldrh	r3, [r7, #10]
 8003210:	1c59      	adds	r1, r3, #1
 8003212:	8179      	strh	r1, [r7, #10]
 8003214:	4618      	mov	r0, r3
 8003216:	4b64      	ldr	r3, [pc, #400]	; (80033a8 <send_DHCP_DECLINE+0x3dc>)
 8003218:	7859      	ldrb	r1, [r3, #1]
 800321a:	1813      	adds	r3, r2, r0
 800321c:	460a      	mov	r2, r1
 800321e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[2];
 8003222:	4b60      	ldr	r3, [pc, #384]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	897b      	ldrh	r3, [r7, #10]
 8003228:	1c59      	adds	r1, r3, #1
 800322a:	8179      	strh	r1, [r7, #10]
 800322c:	4618      	mov	r0, r3
 800322e:	4b5e      	ldr	r3, [pc, #376]	; (80033a8 <send_DHCP_DECLINE+0x3dc>)
 8003230:	7899      	ldrb	r1, [r3, #2]
 8003232:	1813      	adds	r3, r2, r0
 8003234:	460a      	mov	r2, r1
 8003236:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[3];
 800323a:	4b5a      	ldr	r3, [pc, #360]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	897b      	ldrh	r3, [r7, #10]
 8003240:	1c59      	adds	r1, r3, #1
 8003242:	8179      	strh	r1, [r7, #10]
 8003244:	4618      	mov	r0, r3
 8003246:	4b58      	ldr	r3, [pc, #352]	; (80033a8 <send_DHCP_DECLINE+0x3dc>)
 8003248:	78d9      	ldrb	r1, [r3, #3]
 800324a:	1813      	adds	r3, r2, r0
 800324c:	460a      	mov	r2, r1
 800324e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[4];
 8003252:	4b54      	ldr	r3, [pc, #336]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	897b      	ldrh	r3, [r7, #10]
 8003258:	1c59      	adds	r1, r3, #1
 800325a:	8179      	strh	r1, [r7, #10]
 800325c:	4618      	mov	r0, r3
 800325e:	4b52      	ldr	r3, [pc, #328]	; (80033a8 <send_DHCP_DECLINE+0x3dc>)
 8003260:	7919      	ldrb	r1, [r3, #4]
 8003262:	1813      	adds	r3, r2, r0
 8003264:	460a      	mov	r2, r1
 8003266:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[5];
 800326a:	4b4e      	ldr	r3, [pc, #312]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	897b      	ldrh	r3, [r7, #10]
 8003270:	1c59      	adds	r1, r3, #1
 8003272:	8179      	strh	r1, [r7, #10]
 8003274:	4618      	mov	r0, r3
 8003276:	4b4c      	ldr	r3, [pc, #304]	; (80033a8 <send_DHCP_DECLINE+0x3dc>)
 8003278:	7959      	ldrb	r1, [r3, #5]
 800327a:	1813      	adds	r3, r2, r0
 800327c:	460a      	mov	r2, r1
 800327e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	MSG->OPT[k++] = dhcpRequestedIPaddr;
 8003282:	4b48      	ldr	r3, [pc, #288]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	897b      	ldrh	r3, [r7, #10]
 8003288:	1c59      	adds	r1, r3, #1
 800328a:	8179      	strh	r1, [r7, #10]
 800328c:	4413      	add	r3, r2
 800328e:	2232      	movs	r2, #50	; 0x32
 8003290:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x04;
 8003294:	4b43      	ldr	r3, [pc, #268]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	897b      	ldrh	r3, [r7, #10]
 800329a:	1c59      	adds	r1, r3, #1
 800329c:	8179      	strh	r1, [r7, #10]
 800329e:	4413      	add	r3, r2
 80032a0:	2204      	movs	r2, #4
 80032a2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_allocated_ip[0];
 80032a6:	4b3f      	ldr	r3, [pc, #252]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	897b      	ldrh	r3, [r7, #10]
 80032ac:	1c59      	adds	r1, r3, #1
 80032ae:	8179      	strh	r1, [r7, #10]
 80032b0:	4618      	mov	r0, r3
 80032b2:	4b3e      	ldr	r3, [pc, #248]	; (80033ac <send_DHCP_DECLINE+0x3e0>)
 80032b4:	7819      	ldrb	r1, [r3, #0]
 80032b6:	1813      	adds	r3, r2, r0
 80032b8:	460a      	mov	r2, r1
 80032ba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_allocated_ip[1];
 80032be:	4b39      	ldr	r3, [pc, #228]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	897b      	ldrh	r3, [r7, #10]
 80032c4:	1c59      	adds	r1, r3, #1
 80032c6:	8179      	strh	r1, [r7, #10]
 80032c8:	4618      	mov	r0, r3
 80032ca:	4b38      	ldr	r3, [pc, #224]	; (80033ac <send_DHCP_DECLINE+0x3e0>)
 80032cc:	7859      	ldrb	r1, [r3, #1]
 80032ce:	1813      	adds	r3, r2, r0
 80032d0:	460a      	mov	r2, r1
 80032d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_allocated_ip[2];
 80032d6:	4b33      	ldr	r3, [pc, #204]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	897b      	ldrh	r3, [r7, #10]
 80032dc:	1c59      	adds	r1, r3, #1
 80032de:	8179      	strh	r1, [r7, #10]
 80032e0:	4618      	mov	r0, r3
 80032e2:	4b32      	ldr	r3, [pc, #200]	; (80033ac <send_DHCP_DECLINE+0x3e0>)
 80032e4:	7899      	ldrb	r1, [r3, #2]
 80032e6:	1813      	adds	r3, r2, r0
 80032e8:	460a      	mov	r2, r1
 80032ea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_allocated_ip[3];
 80032ee:	4b2d      	ldr	r3, [pc, #180]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	897b      	ldrh	r3, [r7, #10]
 80032f4:	1c59      	adds	r1, r3, #1
 80032f6:	8179      	strh	r1, [r7, #10]
 80032f8:	4618      	mov	r0, r3
 80032fa:	4b2c      	ldr	r3, [pc, #176]	; (80033ac <send_DHCP_DECLINE+0x3e0>)
 80032fc:	78d9      	ldrb	r1, [r3, #3]
 80032fe:	1813      	adds	r3, r2, r0
 8003300:	460a      	mov	r2, r1
 8003302:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	MSG->OPT[k++] = dhcpServerIdentifier;
 8003306:	4b27      	ldr	r3, [pc, #156]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	897b      	ldrh	r3, [r7, #10]
 800330c:	1c59      	adds	r1, r3, #1
 800330e:	8179      	strh	r1, [r7, #10]
 8003310:	4413      	add	r3, r2
 8003312:	2236      	movs	r2, #54	; 0x36
 8003314:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x04;
 8003318:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	897b      	ldrh	r3, [r7, #10]
 800331e:	1c59      	adds	r1, r3, #1
 8003320:	8179      	strh	r1, [r7, #10]
 8003322:	4413      	add	r3, r2
 8003324:	2204      	movs	r2, #4
 8003326:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_SIP[0];
 800332a:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	897b      	ldrh	r3, [r7, #10]
 8003330:	1c59      	adds	r1, r3, #1
 8003332:	8179      	strh	r1, [r7, #10]
 8003334:	4618      	mov	r0, r3
 8003336:	4b1e      	ldr	r3, [pc, #120]	; (80033b0 <send_DHCP_DECLINE+0x3e4>)
 8003338:	7819      	ldrb	r1, [r3, #0]
 800333a:	1813      	adds	r3, r2, r0
 800333c:	460a      	mov	r2, r1
 800333e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_SIP[1];
 8003342:	4b18      	ldr	r3, [pc, #96]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	897b      	ldrh	r3, [r7, #10]
 8003348:	1c59      	adds	r1, r3, #1
 800334a:	8179      	strh	r1, [r7, #10]
 800334c:	4618      	mov	r0, r3
 800334e:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <send_DHCP_DECLINE+0x3e4>)
 8003350:	7859      	ldrb	r1, [r3, #1]
 8003352:	1813      	adds	r3, r2, r0
 8003354:	460a      	mov	r2, r1
 8003356:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_SIP[2];
 800335a:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	897b      	ldrh	r3, [r7, #10]
 8003360:	1c59      	adds	r1, r3, #1
 8003362:	8179      	strh	r1, [r7, #10]
 8003364:	4618      	mov	r0, r3
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <send_DHCP_DECLINE+0x3e4>)
 8003368:	7899      	ldrb	r1, [r3, #2]
 800336a:	1813      	adds	r3, r2, r0
 800336c:	460a      	mov	r2, r1
 800336e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_SIP[3];
 8003372:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	897b      	ldrh	r3, [r7, #10]
 8003378:	1c59      	adds	r1, r3, #1
 800337a:	8179      	strh	r1, [r7, #10]
 800337c:	4618      	mov	r0, r3
 800337e:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <send_DHCP_DECLINE+0x3e4>)
 8003380:	78d9      	ldrb	r1, [r3, #3]
 8003382:	1813      	adds	r3, r2, r0
 8003384:	460a      	mov	r2, r1
 8003386:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	MSG->OPT[k++] = endOption;
 800338a:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <send_DHCP_DECLINE+0x3d8>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	897b      	ldrh	r3, [r7, #10]
 8003390:	1c59      	adds	r1, r3, #1
 8003392:	8179      	strh	r1, [r7, #10]
 8003394:	4413      	add	r3, r2
 8003396:	22ff      	movs	r2, #255	; 0xff
 8003398:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) MSG->OPT[i] = 0;
 800339c:	897b      	ldrh	r3, [r7, #10]
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	e012      	b.n	80033c8 <send_DHCP_DECLINE+0x3fc>
 80033a2:	bf00      	nop
 80033a4:	2000016c 	andcs	r0, r0, ip, ror #2
 80033a8:	2000011c 	andcs	r0, r0, ip, lsl r1
 80033ac:	2000010c 	andcs	r0, r0, ip, lsl #2
 80033b0:	20000158 	andcs	r0, r0, r8, asr r1
 80033b4:	4b13      	ldr	r3, [pc, #76]	; (8003404 <send_DHCP_DECLINE+0x438>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4413      	add	r3, r2
 80033bc:	33e8      	adds	r3, #232	; 0xe8
 80033be:	2200      	movs	r2, #0
 80033c0:	711a      	strb	r2, [r3, #4]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	3301      	adds	r3, #1
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80033ce:	dbf1      	blt.n	80033b4 <send_DHCP_DECLINE+0x3e8>

	//send broadcasting packet
	ip[0] = 0xFF;
 80033d0:	23ff      	movs	r3, #255	; 0xff
 80033d2:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 80033d4:	23ff      	movs	r3, #255	; 0xff
 80033d6:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 80033d8:	23ff      	movs	r3, #255	; 0xff
 80033da:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 80033dc:	23ff      	movs	r3, #255	; 0xff
 80033de:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)MSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <send_DHCP_DECLINE+0x43c>)
 80033e2:	7819      	ldrb	r1, [r3, #0]
 80033e4:	4b07      	ldr	r3, [pc, #28]	; (8003404 <send_DHCP_DECLINE+0x438>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	1d3c      	adds	r4, r7, #4
 80033ea:	2343      	movs	r3, #67	; 0x43
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	4608      	mov	r0, r1
 80033f0:	4611      	mov	r1, r2
 80033f2:	f44f 7209 	mov.w	r2, #548	; 0x224
 80033f6:	4623      	mov	r3, r4
 80033f8:	f7fd fd18 	bl	8000e2c <sendto>

}
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd90      	pop	{r4, r7, pc}
 8003402:	bf00      	nop
 8003404:	2000016c 	andcs	r0, r0, ip, ror #2
 8003408:	20000170 	andcs	r0, r0, r0, ror r1

0800340c <parseDHCPMSG>:
* Returns    : None.
* Note       : 
*********************************************************************************************************
*/
int8_t parseDHCPMSG(uint16_t length)
{
 800340c:	b590      	push	{r4, r7, lr}
 800340e:	b08d      	sub	sp, #52	; 0x34
 8003410:	af02      	add	r7, sp, #8
 8003412:	4603      	mov	r3, r0
 8003414:	80fb      	strh	r3, [r7, #6]
	uint16_t  svr_port;

	uint16_t i, len;
	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	77fb      	strb	r3, [r7, #31]
	uint8_t opt_len;

	len = recvfrom(DHCP_SOCKET, (uint8_t *)MSG, length, svr_addr, &svr_port);
 800341a:	4b9a      	ldr	r3, [pc, #616]	; (8003684 <parseDHCPMSG+0x278>)
 800341c:	7818      	ldrb	r0, [r3, #0]
 800341e:	4b9a      	ldr	r3, [pc, #616]	; (8003688 <parseDHCPMSG+0x27c>)
 8003420:	6819      	ldr	r1, [r3, #0]
 8003422:	88fa      	ldrh	r2, [r7, #6]
 8003424:	f107 0410 	add.w	r4, r7, #16
 8003428:	f107 030e 	add.w	r3, r7, #14
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	4623      	mov	r3, r4
 8003430:	f7fd fe04 	bl	800103c <recvfrom>
 8003434:	4603      	mov	r3, r0
 8003436:	83bb      	strh	r3, [r7, #28]

	if (svr_port == DHCP_SERVER_PORT) {
 8003438:	89fb      	ldrh	r3, [r7, #14]
 800343a:	2b43      	cmp	r3, #67	; 0x43
 800343c:	f040 811b 	bne.w	8003676 <parseDHCPMSG+0x26a>

		for (i = 0; i < 6; i++)
 8003440:	2300      	movs	r3, #0
 8003442:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003444:	e00f      	b.n	8003466 <parseDHCPMSG+0x5a>
			if (MSG->chaddr[i] != wizchip_mac[i]) {
 8003446:	4b90      	ldr	r3, [pc, #576]	; (8003688 <parseDHCPMSG+0x27c>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800344c:	4413      	add	r3, r2
 800344e:	7f1a      	ldrb	r2, [r3, #28]
 8003450:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003452:	498e      	ldr	r1, [pc, #568]	; (800368c <parseDHCPMSG+0x280>)
 8003454:	5ccb      	ldrb	r3, [r1, r3]
 8003456:	429a      	cmp	r2, r3
 8003458:	d002      	beq.n	8003460 <parseDHCPMSG+0x54>
				type = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	77fb      	strb	r3, [r7, #31]
				goto PARSE_END;
 800345e:	e10a      	b.n	8003676 <parseDHCPMSG+0x26a>

	len = recvfrom(DHCP_SOCKET, (uint8_t *)MSG, length, svr_addr, &svr_port);

	if (svr_port == DHCP_SERVER_PORT) {

		for (i = 0; i < 6; i++)
 8003460:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003462:	3301      	adds	r3, #1
 8003464:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003466:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003468:	2b05      	cmp	r3, #5
 800346a:	d9ec      	bls.n	8003446 <parseDHCPMSG+0x3a>
			if (MSG->chaddr[i] != wizchip_mac[i]) {
				type = 0;
				goto PARSE_END;
			}

		for (i = 0; i < 4; i++) {
 800346c:	2300      	movs	r3, #0
 800346e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003470:	e00a      	b.n	8003488 <parseDHCPMSG+0x7c>
			DHCP_allocated_ip[i] = MSG->yiaddr[i];
 8003472:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003474:	4a84      	ldr	r2, [pc, #528]	; (8003688 <parseDHCPMSG+0x27c>)
 8003476:	6811      	ldr	r1, [r2, #0]
 8003478:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800347a:	440a      	add	r2, r1
 800347c:	7c11      	ldrb	r1, [r2, #16]
 800347e:	4a84      	ldr	r2, [pc, #528]	; (8003690 <parseDHCPMSG+0x284>)
 8003480:	54d1      	strb	r1, [r2, r3]
			if (MSG->chaddr[i] != wizchip_mac[i]) {
				type = 0;
				goto PARSE_END;
			}

		for (i = 0; i < 4; i++) {
 8003482:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003484:	3301      	adds	r3, #1
 8003486:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003488:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800348a:	2b03      	cmp	r3, #3
 800348c:	d9f1      	bls.n	8003472 <parseDHCPMSG+0x66>
			DHCP_allocated_ip[i] = MSG->yiaddr[i];
		}
		
		type = 0;
 800348e:	2300      	movs	r3, #0
 8003490:	77fb      	strb	r3, [r7, #31]
		p = (uint8_t *)(&MSG->op);
 8003492:	4b7d      	ldr	r3, [pc, #500]	; (8003688 <parseDHCPMSG+0x27c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	623b      	str	r3, [r7, #32]
		p = p + 240;
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	33f0      	adds	r3, #240	; 0xf0
 800349c:	623b      	str	r3, [r7, #32]
		e = p + (len - 240);
 800349e:	8bbb      	ldrh	r3, [r7, #28]
 80034a0:	3bf0      	subs	r3, #240	; 0xf0
 80034a2:	6a3a      	ldr	r2, [r7, #32]
 80034a4:	4413      	add	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]

		while ( p < e ) {
 80034a8:	e0de      	b.n	8003668 <parseDHCPMSG+0x25c>

			switch ( *p ) {
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d064      	beq.n	800357c <parseDHCPMSG+0x170>
 80034b2:	2b06      	cmp	r3, #6
 80034b4:	dc06      	bgt.n	80034c4 <parseDHCPMSG+0xb8>
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d022      	beq.n	8003500 <parseDHCPMSG+0xf4>
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d037      	beq.n	800352e <parseDHCPMSG+0x122>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00e      	beq.n	80034e0 <parseDHCPMSG+0xd4>
 80034c2:	e0c4      	b.n	800364e <parseDHCPMSG+0x242>
 80034c4:	2b35      	cmp	r3, #53	; 0x35
 80034c6:	d00f      	beq.n	80034e8 <parseDHCPMSG+0xdc>
 80034c8:	2b35      	cmp	r3, #53	; 0x35
 80034ca:	dc02      	bgt.n	80034d2 <parseDHCPMSG+0xc6>
 80034cc:	2b33      	cmp	r3, #51	; 0x33
 80034ce:	d07c      	beq.n	80035ca <parseDHCPMSG+0x1be>
 80034d0:	e0bd      	b.n	800364e <parseDHCPMSG+0x242>
 80034d2:	2b36      	cmp	r3, #54	; 0x36
 80034d4:	f000 809a 	beq.w	800360c <parseDHCPMSG+0x200>
 80034d8:	2bff      	cmp	r3, #255	; 0xff
 80034da:	f000 80cb 	beq.w	8003674 <parseDHCPMSG+0x268>
 80034de:	e0b6      	b.n	800364e <parseDHCPMSG+0x242>

			case endOption :
				goto PARSE_END;
       			case padOption :
				p++;
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	3301      	adds	r3, #1
 80034e4:	623b      	str	r3, [r7, #32]
				break;
 80034e6:	e0bf      	b.n	8003668 <parseDHCPMSG+0x25c>
			case dhcpMessageType :
				p++;
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	3301      	adds	r3, #1
 80034ec:	623b      	str	r3, [r7, #32]
				p++;
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	3301      	adds	r3, #1
 80034f2:	623b      	str	r3, [r7, #32]
				type = *p++;
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	623a      	str	r2, [r7, #32]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	77fb      	strb	r3, [r7, #31]
				break;
 80034fe:	e0b3      	b.n	8003668 <parseDHCPMSG+0x25c>
			case subnetMask :
				p++;
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	3301      	adds	r3, #1
 8003504:	623b      	str	r3, [r7, #32]
				p++;
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	3301      	adds	r3, #1
 800350a:	623b      	str	r3, [r7, #32]
				for (i = 0; i < 4; i++)	 DHCP_allocated_sn[i] = *p++;
 800350c:	2300      	movs	r3, #0
 800350e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003510:	e009      	b.n	8003526 <parseDHCPMSG+0x11a>
 8003512:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	1c59      	adds	r1, r3, #1
 8003518:	6239      	str	r1, [r7, #32]
 800351a:	7819      	ldrb	r1, [r3, #0]
 800351c:	4b5d      	ldr	r3, [pc, #372]	; (8003694 <parseDHCPMSG+0x288>)
 800351e:	5499      	strb	r1, [r3, r2]
 8003520:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003522:	3301      	adds	r3, #1
 8003524:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003526:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003528:	2b03      	cmp	r3, #3
 800352a:	d9f2      	bls.n	8003512 <parseDHCPMSG+0x106>
				break;
 800352c:	e09c      	b.n	8003668 <parseDHCPMSG+0x25c>
			case routersOnSubnet :
				p++;
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	3301      	adds	r3, #1
 8003532:	623b      	str	r3, [r7, #32]
				opt_len = *p++;       
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	623a      	str	r2, [r7, #32]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	75fb      	strb	r3, [r7, #23]
				for (i = 0; i < 4; i++)	DHCP_allocated_gw[i] = *p++;
 800353e:	2300      	movs	r3, #0
 8003540:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003542:	e009      	b.n	8003558 <parseDHCPMSG+0x14c>
 8003544:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	1c59      	adds	r1, r3, #1
 800354a:	6239      	str	r1, [r7, #32]
 800354c:	7819      	ldrb	r1, [r3, #0]
 800354e:	4b52      	ldr	r3, [pc, #328]	; (8003698 <parseDHCPMSG+0x28c>)
 8003550:	5499      	strb	r1, [r3, r2]
 8003552:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003554:	3301      	adds	r3, #1
 8003556:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003558:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800355a:	2b03      	cmp	r3, #3
 800355c:	d9f2      	bls.n	8003544 <parseDHCPMSG+0x138>
				for (i = 0; i < (opt_len-4); i++) p++;
 800355e:	2300      	movs	r3, #0
 8003560:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003562:	e005      	b.n	8003570 <parseDHCPMSG+0x164>
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	3301      	adds	r3, #1
 8003568:	623b      	str	r3, [r7, #32]
 800356a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800356c:	3301      	adds	r3, #1
 800356e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003570:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003572:	7dfb      	ldrb	r3, [r7, #23]
 8003574:	3b04      	subs	r3, #4
 8003576:	429a      	cmp	r2, r3
 8003578:	dbf4      	blt.n	8003564 <parseDHCPMSG+0x158>
				break;
 800357a:	e075      	b.n	8003668 <parseDHCPMSG+0x25c>
			
			case dns :
				p++;                  
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	3301      	adds	r3, #1
 8003580:	623b      	str	r3, [r7, #32]
				opt_len = *p++;       
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	623a      	str	r2, [r7, #32]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	75fb      	strb	r3, [r7, #23]
				for (i = 0; i < 4; i++)	DHCP_allocated_dns[i] = *p++;
 800358c:	2300      	movs	r3, #0
 800358e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003590:	e009      	b.n	80035a6 <parseDHCPMSG+0x19a>
 8003592:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	1c59      	adds	r1, r3, #1
 8003598:	6239      	str	r1, [r7, #32]
 800359a:	7819      	ldrb	r1, [r3, #0]
 800359c:	4b3f      	ldr	r3, [pc, #252]	; (800369c <parseDHCPMSG+0x290>)
 800359e:	5499      	strb	r1, [r3, r2]
 80035a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80035a2:	3301      	adds	r3, #1
 80035a4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80035a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d9f2      	bls.n	8003592 <parseDHCPMSG+0x186>
				for (i = 0; i < (opt_len-4); i++) p++;
 80035ac:	2300      	movs	r3, #0
 80035ae:	84fb      	strh	r3, [r7, #38]	; 0x26
 80035b0:	e005      	b.n	80035be <parseDHCPMSG+0x1b2>
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	3301      	adds	r3, #1
 80035b6:	623b      	str	r3, [r7, #32]
 80035b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80035ba:	3301      	adds	r3, #1
 80035bc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80035be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80035c0:	7dfb      	ldrb	r3, [r7, #23]
 80035c2:	3b04      	subs	r3, #4
 80035c4:	429a      	cmp	r2, r3
 80035c6:	dbf4      	blt.n	80035b2 <parseDHCPMSG+0x1a6>
				break;
 80035c8:	e04e      	b.n	8003668 <parseDHCPMSG+0x25c>
				
				
			case dhcpIPaddrLeaseTime :
				p++;
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	3301      	adds	r3, #1
 80035ce:	623b      	str	r3, [r7, #32]
				opt_len = *p++;
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	623a      	str	r2, [r7, #32]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	75fb      	strb	r3, [r7, #23]
				lease_time.cVal[3] = *p++;
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	623a      	str	r2, [r7, #32]
 80035e0:	781a      	ldrb	r2, [r3, #0]
 80035e2:	4b2f      	ldr	r3, [pc, #188]	; (80036a0 <parseDHCPMSG+0x294>)
 80035e4:	70da      	strb	r2, [r3, #3]
				lease_time.cVal[2] = *p++;
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	623a      	str	r2, [r7, #32]
 80035ec:	781a      	ldrb	r2, [r3, #0]
 80035ee:	4b2c      	ldr	r3, [pc, #176]	; (80036a0 <parseDHCPMSG+0x294>)
 80035f0:	709a      	strb	r2, [r3, #2]
				lease_time.cVal[1] = *p++;
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	623a      	str	r2, [r7, #32]
 80035f8:	781a      	ldrb	r2, [r3, #0]
 80035fa:	4b29      	ldr	r3, [pc, #164]	; (80036a0 <parseDHCPMSG+0x294>)
 80035fc:	705a      	strb	r2, [r3, #1]
				lease_time.cVal[0] = *p++;
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	623a      	str	r2, [r7, #32]
 8003604:	781a      	ldrb	r2, [r3, #0]
 8003606:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <parseDHCPMSG+0x294>)
 8003608:	701a      	strb	r2, [r3, #0]
				break;
 800360a:	e02d      	b.n	8003668 <parseDHCPMSG+0x25c>

			case dhcpServerIdentifier :
				p++;
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	3301      	adds	r3, #1
 8003610:	623b      	str	r3, [r7, #32]
				opt_len = *p++;
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	623a      	str	r2, [r7, #32]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	75fb      	strb	r3, [r7, #23]
				DHCP_SIP[0] = *p++;
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	623a      	str	r2, [r7, #32]
 8003622:	781a      	ldrb	r2, [r3, #0]
 8003624:	4b1f      	ldr	r3, [pc, #124]	; (80036a4 <parseDHCPMSG+0x298>)
 8003626:	701a      	strb	r2, [r3, #0]
				DHCP_SIP[1] = *p++;
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	623a      	str	r2, [r7, #32]
 800362e:	781a      	ldrb	r2, [r3, #0]
 8003630:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <parseDHCPMSG+0x298>)
 8003632:	705a      	strb	r2, [r3, #1]
				DHCP_SIP[2] = *p++;
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	623a      	str	r2, [r7, #32]
 800363a:	781a      	ldrb	r2, [r3, #0]
 800363c:	4b19      	ldr	r3, [pc, #100]	; (80036a4 <parseDHCPMSG+0x298>)
 800363e:	709a      	strb	r2, [r3, #2]
				DHCP_SIP[3] = *p++;
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	623a      	str	r2, [r7, #32]
 8003646:	781a      	ldrb	r2, [r3, #0]
 8003648:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <parseDHCPMSG+0x298>)
 800364a:	70da      	strb	r2, [r3, #3]
				break;
 800364c:	e00c      	b.n	8003668 <parseDHCPMSG+0x25c>

			default :
				p++;
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	3301      	adds	r3, #1
 8003652:	623b      	str	r3, [r7, #32]
				opt_len = *p++;
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	623a      	str	r2, [r7, #32]
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	75fb      	strb	r3, [r7, #23]
				p += opt_len;
 800365e:	7dfb      	ldrb	r3, [r7, #23]
 8003660:	6a3a      	ldr	r2, [r7, #32]
 8003662:	4413      	add	r3, r2
 8003664:	623b      	str	r3, [r7, #32]
				break;
 8003666:	bf00      	nop
		type = 0;
		p = (uint8_t *)(&MSG->op);
		p = p + 240;
		e = p + (len - 240);

		while ( p < e ) {
 8003668:	6a3a      	ldr	r2, [r7, #32]
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	429a      	cmp	r2, r3
 800366e:	f4ff af1c 	bcc.w	80034aa <parseDHCPMSG+0x9e>
 8003672:	e000      	b.n	8003676 <parseDHCPMSG+0x26a>

			switch ( *p ) {

			case endOption :
				goto PARSE_END;
 8003674:	bf00      	nop
			} // switch
		} // while
	} // if

PARSE_END :
	return	type;
 8003676:	7ffb      	ldrb	r3, [r7, #31]
 8003678:	b25b      	sxtb	r3, r3
}
 800367a:	4618      	mov	r0, r3
 800367c:	372c      	adds	r7, #44	; 0x2c
 800367e:	46bd      	mov	sp, r7
 8003680:	bd90      	pop	{r4, r7, pc}
 8003682:	bf00      	nop
 8003684:	20000170 	andcs	r0, r0, r0, ror r1
 8003688:	2000016c 	andcs	r0, r0, ip, ror #2
 800368c:	2000011c 	andcs	r0, r0, ip, lsl r1
 8003690:	2000010c 	andcs	r0, r0, ip, lsl #2
 8003694:	20000114 	andcs	r0, r0, r4, lsl r1
 8003698:	20000110 	andcs	r0, r0, r0, lsl r1
 800369c:	20000118 	andcs	r0, r0, r8, lsl r1
 80036a0:	20000168 	andcs	r0, r0, r8, ror #2
 80036a4:	20000158 	andcs	r0, r0, r8, asr r1

080036a8 <check_DHCP_state>:
* 				DHCP_IP_CHANGED
* Note       : 
*********************************************************************************************************
*/
uint8_t check_DHCP_state(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
	uint16_t len, i;
	uint8_t type, DHCP_ip_changed_flag;
	uint8_t d_addr[4];
	uint8_t ret;
	
	ret = DHCP_RUNNING;
 80036ae:	2304      	movs	r3, #4
 80036b0:	72fb      	strb	r3, [r7, #11]
	type = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	737b      	strb	r3, [r7, #13]
	
	if ((len = getSn_RX_RSR(DHCP_SOCKET)) > 0) {
 80036b6:	4b7b      	ldr	r3, [pc, #492]	; (80038a4 <check_DHCP_state+0x1fc>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe fd7a 	bl	80021b4 <getSn_RX_RSR>
 80036c0:	4603      	mov	r3, r0
 80036c2:	813b      	strh	r3, [r7, #8]
 80036c4:	893b      	ldrh	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <check_DHCP_state+0x2e>
		type = parseDHCPMSG(len);
 80036ca:	893b      	ldrh	r3, [r7, #8]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff fe9d 	bl	800340c <parseDHCPMSG>
 80036d2:	4603      	mov	r3, r0
 80036d4:	737b      	strb	r3, [r7, #13]
	}
	switch ( dhcp_state ) {
 80036d6:	4b74      	ldr	r3, [pc, #464]	; (80038a8 <check_DHCP_state+0x200>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	b25b      	sxtb	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	2b04      	cmp	r3, #4
 80036e0:	f200 80da 	bhi.w	8003898 <check_DHCP_state+0x1f0>
 80036e4:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <check_DHCP_state+0x44>)
 80036e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ea:	bf00      	nop
 80036ec:	08003701 	stmdaeq	r0, {r0, r8, r9, sl, ip, sp}
 80036f0:	08003743 	stmdaeq	r0, {r0, r1, r6, r8, r9, sl, ip, sp}
 80036f4:	08003793 	stmdaeq	r0, {r0, r1, r4, r7, r8, r9, sl, ip, sp}
 80036f8:	08003827 	stmdaeq	r0, {r0, r1, r2, r5, fp, ip, sp}
 80036fc:	08003899 	stmdaeq	r0, {r0, r3, r4, r7, fp, ip, sp}
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER) {
 8003700:	7b7b      	ldrb	r3, [r7, #13]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d118      	bne.n	8003738 <check_DHCP_state+0x90>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
				
				for (i = 0; i < 4; i++) d_addr[i] = 0xff;
 8003706:	2300      	movs	r3, #0
 8003708:	81fb      	strh	r3, [r7, #14]
 800370a:	e009      	b.n	8003720 <check_DHCP_state+0x78>
 800370c:	89fb      	ldrh	r3, [r7, #14]
 800370e:	f107 0210 	add.w	r2, r7, #16
 8003712:	4413      	add	r3, r2
 8003714:	22ff      	movs	r2, #255	; 0xff
 8003716:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800371a:	89fb      	ldrh	r3, [r7, #14]
 800371c:	3301      	adds	r3, #1
 800371e:	81fb      	strh	r3, [r7, #14]
 8003720:	89fb      	ldrh	r3, [r7, #14]
 8003722:	2b03      	cmp	r3, #3
 8003724:	d9f2      	bls.n	800370c <check_DHCP_state+0x64>
				send_DHCP_REQUEST(Cip, d_addr);
 8003726:	1d3b      	adds	r3, r7, #4
 8003728:	4860      	ldr	r0, [pc, #384]	; (80038ac <check_DHCP_state+0x204>)
 800372a:	4619      	mov	r1, r3
 800372c:	f7ff f930 	bl	8002990 <send_DHCP_REQUEST>
				
				dhcp_state = STATE_DHCP_REQUEST;
 8003730:	4b5d      	ldr	r3, [pc, #372]	; (80038a8 <check_DHCP_state+0x200>)
 8003732:	2202      	movs	r2, #2
 8003734:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
		break;
 8003736:	e0b0      	b.n	800389a <check_DHCP_state+0x1f2>
				
				for (i = 0; i < 4; i++) d_addr[i] = 0xff;
				send_DHCP_REQUEST(Cip, d_addr);
				
				dhcp_state = STATE_DHCP_REQUEST;
			} else ret = check_DHCP_timeout();
 8003738:	f000 f8ce 	bl	80038d8 <check_DHCP_timeout>
 800373c:	4603      	mov	r3, r0
 800373e:	72fb      	strb	r3, [r7, #11]
		break;
 8003740:	e0ab      	b.n	800389a <check_DHCP_state+0x1f2>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8003742:	7b7b      	ldrb	r3, [r7, #13]
 8003744:	2b05      	cmp	r3, #5
 8003746:	d115      	bne.n	8003774 <check_DHCP_state+0xcc>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				
				if (check_DHCP_leasedIP()) {
 8003748:	f000 f94e 	bl	80039e8 <check_DHCP_leasedIP>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <check_DHCP_state+0xc0>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8003752:	4b57      	ldr	r3, [pc, #348]	; (80038b0 <check_DHCP_state+0x208>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4798      	blx	r3
					reset_DHCP_timeout();
 8003758:	f000 f9de 	bl	8003b18 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 800375c:	4b52      	ldr	r3, [pc, #328]	; (80038a8 <check_DHCP_state+0x200>)
 800375e:	2203      	movs	r2, #3
 8003760:	701a      	strb	r2, [r3, #0]
					ret = DHCP_SUCCESS;
 8003762:	2301      	movs	r3, #1
 8003764:	72fb      	strb	r3, [r7, #11]
 8003766:	e013      	b.n	8003790 <check_DHCP_state+0xe8>
				} else {
					// IP address conflict occurred
					reset_DHCP_timeout();
 8003768:	f000 f9d6 	bl	8003b18 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 800376c:	4b51      	ldr	r3, [pc, #324]	; (80038b4 <check_DHCP_state+0x20c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4798      	blx	r3

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8003772:	e092      	b.n	800389a <check_DHCP_state+0x1f2>
				} else {
					// IP address conflict occurred
					reset_DHCP_timeout();
					dhcp_ip_conflict();
				}
			} else if (type == DHCP_NAK) {
 8003774:	7b7b      	ldrb	r3, [r7, #13]
 8003776:	2b06      	cmp	r3, #6
 8003778:	d105      	bne.n	8003786 <check_DHCP_state+0xde>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_NACK\r\n");
#endif

				reset_DHCP_timeout();
 800377a:	f000 f9cd 	bl	8003b18 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_DISCOVER;
 800377e:	4b4a      	ldr	r3, [pc, #296]	; (80038a8 <check_DHCP_state+0x200>)
 8003780:	2201      	movs	r2, #1
 8003782:	701a      	strb	r2, [r3, #0]
 8003784:	e004      	b.n	8003790 <check_DHCP_state+0xe8>
			} else ret = check_DHCP_timeout();
 8003786:	f000 f8a7 	bl	80038d8 <check_DHCP_timeout>
 800378a:	4603      	mov	r3, r0
 800378c:	72fb      	strb	r3, [r7, #11]
		break;
 800378e:	e084      	b.n	800389a <check_DHCP_state+0x1f2>
 8003790:	e083      	b.n	800389a <check_DHCP_state+0x1f2>

		case STATE_DHCP_LEASED :
			if ((lease_time.lVal != 0xffffffff) && ((lease_time.lVal/2) < my_time)) {
 8003792:	4b49      	ldr	r3, [pc, #292]	; (80038b8 <check_DHCP_state+0x210>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800379a:	d041      	beq.n	8003820 <check_DHCP_state+0x178>
 800379c:	4b46      	ldr	r3, [pc, #280]	; (80038b8 <check_DHCP_state+0x210>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	085a      	lsrs	r2, r3, #1
 80037a2:	4b46      	ldr	r3, [pc, #280]	; (80038bc <check_DHCP_state+0x214>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d23a      	bcs.n	8003820 <check_DHCP_state+0x178>
				
#ifdef _DHCP_DEBUG_
 				printf("> Renewal IP address \r\n");
#endif

				type = 0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	737b      	strb	r3, [r7, #13]
				for (i = 0; i < 4; i++)	OLD_SIP[i] = DHCP_allocated_ip[i];
 80037ae:	2300      	movs	r3, #0
 80037b0:	81fb      	strh	r3, [r7, #14]
 80037b2:	e008      	b.n	80037c6 <check_DHCP_state+0x11e>
 80037b4:	89fb      	ldrh	r3, [r7, #14]
 80037b6:	89fa      	ldrh	r2, [r7, #14]
 80037b8:	4941      	ldr	r1, [pc, #260]	; (80038c0 <check_DHCP_state+0x218>)
 80037ba:	5c89      	ldrb	r1, [r1, r2]
 80037bc:	4a41      	ldr	r2, [pc, #260]	; (80038c4 <check_DHCP_state+0x21c>)
 80037be:	54d1      	strb	r1, [r2, r3]
 80037c0:	89fb      	ldrh	r3, [r7, #14]
 80037c2:	3301      	adds	r3, #1
 80037c4:	81fb      	strh	r3, [r7, #14]
 80037c6:	89fb      	ldrh	r3, [r7, #14]
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d9f3      	bls.n	80037b4 <check_DHCP_state+0x10c>
				for (i = 0; i < 4; i++)	d_addr[i] = DHCP_SIP[i];
 80037cc:	2300      	movs	r3, #0
 80037ce:	81fb      	strh	r3, [r7, #14]
 80037d0:	e00b      	b.n	80037ea <check_DHCP_state+0x142>
 80037d2:	89fb      	ldrh	r3, [r7, #14]
 80037d4:	89fa      	ldrh	r2, [r7, #14]
 80037d6:	493c      	ldr	r1, [pc, #240]	; (80038c8 <check_DHCP_state+0x220>)
 80037d8:	5c8a      	ldrb	r2, [r1, r2]
 80037da:	f107 0110 	add.w	r1, r7, #16
 80037de:	440b      	add	r3, r1
 80037e0:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80037e4:	89fb      	ldrh	r3, [r7, #14]
 80037e6:	3301      	adds	r3, #1
 80037e8:	81fb      	strh	r3, [r7, #14]
 80037ea:	89fb      	ldrh	r3, [r7, #14]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d9f0      	bls.n	80037d2 <check_DHCP_state+0x12a>
				
				DHCP_XID++;
 80037f0:	4b36      	ldr	r3, [pc, #216]	; (80038cc <check_DHCP_state+0x224>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3301      	adds	r3, #1
 80037f6:	4a35      	ldr	r2, [pc, #212]	; (80038cc <check_DHCP_state+0x224>)
 80037f8:	6013      	str	r3, [r2, #0]

				socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00); // added
 80037fa:	4b2a      	ldr	r3, [pc, #168]	; (80038a4 <check_DHCP_state+0x1fc>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	2102      	movs	r1, #2
 8003802:	2244      	movs	r2, #68	; 0x44
 8003804:	2300      	movs	r3, #0
 8003806:	f7fc ff57 	bl	80006b8 <socket>
				send_DHCP_REQUEST(DHCP_allocated_ip, d_addr);
 800380a:	1d3b      	adds	r3, r7, #4
 800380c:	482c      	ldr	r0, [pc, #176]	; (80038c0 <check_DHCP_state+0x218>)
 800380e:	4619      	mov	r1, r3
 8003810:	f7ff f8be 	bl	8002990 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8003814:	f000 f980 	bl	8003b18 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8003818:	4b23      	ldr	r3, [pc, #140]	; (80038a8 <check_DHCP_state+0x200>)
 800381a:	2204      	movs	r2, #4
 800381c:	701a      	strb	r2, [r3, #0]
			} else {
				ret = DHCP_IP_LEASED;
			}
		break;
 800381e:	e03c      	b.n	800389a <check_DHCP_state+0x1f2>

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_REREQUEST;
			} else {
				ret = DHCP_IP_LEASED;
 8003820:	2303      	movs	r3, #3
 8003822:	72fb      	strb	r3, [r7, #11]
			}
		break;
 8003824:	e039      	b.n	800389a <check_DHCP_state+0x1f2>

		case STATE_DHCP_REREQUEST :
			if (type == DHCP_ACK) {
 8003826:	7b7b      	ldrb	r3, [r7, #13]
 8003828:	2b05      	cmp	r3, #5
 800382a:	d126      	bne.n	800387a <check_DHCP_state+0x1d2>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK, IP Renewal Success\r\n");
#endif

				retry_count = 0;
 800382c:	4b28      	ldr	r3, [pc, #160]	; (80038d0 <check_DHCP_state+0x228>)
 800382e:	2200      	movs	r2, #0
 8003830:	701a      	strb	r2, [r3, #0]
				DHCP_ip_changed_flag = 0;
 8003832:	2300      	movs	r3, #0
 8003834:	733b      	strb	r3, [r7, #12]

				for (i = 0; i < 4; i++)	{
 8003836:	2300      	movs	r3, #0
 8003838:	81fb      	strh	r3, [r7, #14]
 800383a:	e00d      	b.n	8003858 <check_DHCP_state+0x1b0>
					if (OLD_SIP[i] != DHCP_allocated_ip[i]) {
 800383c:	89fb      	ldrh	r3, [r7, #14]
 800383e:	4a21      	ldr	r2, [pc, #132]	; (80038c4 <check_DHCP_state+0x21c>)
 8003840:	5cd2      	ldrb	r2, [r2, r3]
 8003842:	89fb      	ldrh	r3, [r7, #14]
 8003844:	491e      	ldr	r1, [pc, #120]	; (80038c0 <check_DHCP_state+0x218>)
 8003846:	5ccb      	ldrb	r3, [r1, r3]
 8003848:	429a      	cmp	r2, r3
 800384a:	d002      	beq.n	8003852 <check_DHCP_state+0x1aa>
						DHCP_ip_changed_flag = 1;
 800384c:	2301      	movs	r3, #1
 800384e:	733b      	strb	r3, [r7, #12]
						break;
 8003850:	e005      	b.n	800385e <check_DHCP_state+0x1b6>
#endif

				retry_count = 0;
				DHCP_ip_changed_flag = 0;

				for (i = 0; i < 4; i++)	{
 8003852:	89fb      	ldrh	r3, [r7, #14]
 8003854:	3301      	adds	r3, #1
 8003856:	81fb      	strh	r3, [r7, #14]
 8003858:	89fb      	ldrh	r3, [r7, #14]
 800385a:	2b03      	cmp	r3, #3
 800385c:	d9ee      	bls.n	800383c <check_DHCP_state+0x194>
						break;
					}
				}

				// change to new IP address
				if (DHCP_ip_changed_flag) {
 800385e:	7b3b      	ldrb	r3, [r7, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d004      	beq.n	800386e <check_DHCP_state+0x1c6>
					ret = DHCP_IP_CHANGED;
 8003864:	2302      	movs	r3, #2
 8003866:	72fb      	strb	r3, [r7, #11]
					dhcp_ip_update();
 8003868:	4b1a      	ldr	r3, [pc, #104]	; (80038d4 <check_DHCP_state+0x22c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4798      	blx	r3
				}
				reset_DHCP_timeout();
 800386e:	f000 f953 	bl	8003b18 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_LEASED;
 8003872:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <check_DHCP_state+0x200>)
 8003874:	2203      	movs	r2, #3
 8003876:	701a      	strb	r2, [r3, #0]
 8003878:	e00d      	b.n	8003896 <check_DHCP_state+0x1ee>
			} else if (type == DHCP_NAK) {
 800387a:	7b7b      	ldrb	r3, [r7, #13]
 800387c:	2b06      	cmp	r3, #6
 800387e:	d105      	bne.n	800388c <check_DHCP_state+0x1e4>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_NACK, IP Renewal Failed\r\n");
#endif

				reset_DHCP_timeout();
 8003880:	f000 f94a 	bl	8003b18 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_DISCOVER;
 8003884:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <check_DHCP_state+0x200>)
 8003886:	2201      	movs	r2, #1
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	e004      	b.n	8003896 <check_DHCP_state+0x1ee>
			} else ret = check_DHCP_timeout();
 800388c:	f000 f824 	bl	80038d8 <check_DHCP_timeout>
 8003890:	4603      	mov	r3, r0
 8003892:	72fb      	strb	r3, [r7, #11]
		break;
 8003894:	e001      	b.n	800389a <check_DHCP_state+0x1f2>
 8003896:	e000      	b.n	800389a <check_DHCP_state+0x1f2>

		case STATE_DHCP_RELEASE :
		break;

		default :
		break;
 8003898:	bf00      	nop
	}

	return ret;
 800389a:	7afb      	ldrb	r3, [r7, #11]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	20000170 	andcs	r0, r0, r0, ror r1
 80038a8:	20000144 	andcs	r0, r0, r4, asr #2
 80038ac:	20000124 	andcs	r0, r0, r4, lsr #2
 80038b0:	20000048 	andcs	r0, r0, r8, asr #32
 80038b4:	20000050 	andcs	r0, r0, r0, asr r0
 80038b8:	20000168 	andcs	r0, r0, r8, ror #2
 80038bc:	2000015c 	andcs	r0, r0, ip, asr r1
 80038c0:	2000010c 	andcs	r0, r0, ip, lsl #2
 80038c4:	20000150 	andcs	r0, r0, r0, asr r1
 80038c8:	20000158 	andcs	r0, r0, r8, asr r1
 80038cc:	20000154 	andcs	r0, r0, r4, asr r1
 80038d0:	20000164 	andcs	r0, r0, r4, ror #2
 80038d4:	2000004c 	andcs	r0, r0, ip, asr #32

080038d8 <check_DHCP_timeout>:
* 			   DHCP_RUNNING - No timeout
* Note       : 
*********************************************************************************************************
*/
uint8_t check_DHCP_timeout(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
	uint8_t i, d_addr[4];
	uint8_t ret = DHCP_RUNNING;
 80038de:	2304      	movs	r3, #4
 80038e0:	71bb      	strb	r3, [r7, #6]
	
	if (retry_count < MAX_DHCP_RETRY) {
 80038e2:	4b3a      	ldr	r3, [pc, #232]	; (80039cc <check_DHCP_timeout+0xf4>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	b25b      	sxtb	r3, r3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	dc52      	bgt.n	8003992 <check_DHCP_timeout+0xba>
		if (next_time < my_time) {
 80038ec:	4b38      	ldr	r3, [pc, #224]	; (80039d0 <check_DHCP_timeout+0xf8>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	4b38      	ldr	r3, [pc, #224]	; (80039d4 <check_DHCP_timeout+0xfc>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d264      	bcs.n	80039c2 <check_DHCP_timeout+0xea>

			switch ( dhcp_state ) {
 80038f8:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <check_DHCP_timeout+0x100>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	b25b      	sxtb	r3, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d007      	beq.n	8003912 <check_DHCP_timeout+0x3a>
 8003902:	2b04      	cmp	r3, #4
 8003904:	d01b      	beq.n	800393e <check_DHCP_timeout+0x66>
 8003906:	2b01      	cmp	r3, #1
 8003908:	d000      	beq.n	800390c <check_DHCP_timeout+0x34>
					for (i = 0; i < 4; i++)	d_addr[i] = DHCP_SIP[i];
					send_DHCP_REQUEST(DHCP_allocated_ip, d_addr);
				break;
		
				default :
				break;
 800390a:	e030      	b.n	800396e <check_DHCP_timeout+0x96>
		if (next_time < my_time) {

			switch ( dhcp_state ) {
				case STATE_DHCP_DISCOVER :
//					printf("<<timeout>> state : STATE_DHCP_DISCOVER\r\n");
					send_DHCP_DISCOVER();
 800390c:	f7fe fdda 	bl	80024c4 <send_DHCP_DISCOVER>
				break;
 8003910:	e02d      	b.n	800396e <check_DHCP_timeout+0x96>
		
				case STATE_DHCP_REQUEST :
//					printf("<<timeout>> state : STATE_DHCP_REQUEST\r\n");

					for (i = 0; i < 4; i++) d_addr[i] = 0xff;
 8003912:	2300      	movs	r3, #0
 8003914:	71fb      	strb	r3, [r7, #7]
 8003916:	e009      	b.n	800392c <check_DHCP_timeout+0x54>
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	f107 0208 	add.w	r2, r7, #8
 800391e:	4413      	add	r3, r2
 8003920:	22ff      	movs	r2, #255	; 0xff
 8003922:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	3301      	adds	r3, #1
 800392a:	71fb      	strb	r3, [r7, #7]
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	2b03      	cmp	r3, #3
 8003930:	d9f2      	bls.n	8003918 <check_DHCP_timeout+0x40>
					send_DHCP_REQUEST(Cip, d_addr);
 8003932:	463b      	mov	r3, r7
 8003934:	4829      	ldr	r0, [pc, #164]	; (80039dc <check_DHCP_timeout+0x104>)
 8003936:	4619      	mov	r1, r3
 8003938:	f7ff f82a 	bl	8002990 <send_DHCP_REQUEST>
				break;
 800393c:	e017      	b.n	800396e <check_DHCP_timeout+0x96>

				case STATE_DHCP_REREQUEST :
//					printf("<<timeout>> state : STATE_DHCP_REREQUEST\r\n");
					
					for (i = 0; i < 4; i++)	d_addr[i] = DHCP_SIP[i];
 800393e:	2300      	movs	r3, #0
 8003940:	71fb      	strb	r3, [r7, #7]
 8003942:	e00b      	b.n	800395c <check_DHCP_timeout+0x84>
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	79fa      	ldrb	r2, [r7, #7]
 8003948:	4925      	ldr	r1, [pc, #148]	; (80039e0 <check_DHCP_timeout+0x108>)
 800394a:	5c8a      	ldrb	r2, [r1, r2]
 800394c:	f107 0108 	add.w	r1, r7, #8
 8003950:	440b      	add	r3, r1
 8003952:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	3301      	adds	r3, #1
 800395a:	71fb      	strb	r3, [r7, #7]
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d9f0      	bls.n	8003944 <check_DHCP_timeout+0x6c>
					send_DHCP_REQUEST(DHCP_allocated_ip, d_addr);
 8003962:	463b      	mov	r3, r7
 8003964:	481f      	ldr	r0, [pc, #124]	; (80039e4 <check_DHCP_timeout+0x10c>)
 8003966:	4619      	mov	r1, r3
 8003968:	f7ff f812 	bl	8002990 <send_DHCP_REQUEST>
				break;
 800396c:	bf00      	nop
		
				default :
				break;
			}

			my_time = 0;
 800396e:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <check_DHCP_timeout+0xfc>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
			next_time = my_time + DHCP_WAIT_TIME;
 8003974:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <check_DHCP_timeout+0xfc>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	330a      	adds	r3, #10
 800397a:	4a15      	ldr	r2, [pc, #84]	; (80039d0 <check_DHCP_timeout+0xf8>)
 800397c:	6013      	str	r3, [r2, #0]
			retry_count++;
 800397e:	4b13      	ldr	r3, [pc, #76]	; (80039cc <check_DHCP_timeout+0xf4>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	b2db      	uxtb	r3, r3
 8003986:	3301      	adds	r3, #1
 8003988:	b2db      	uxtb	r3, r3
 800398a:	b2da      	uxtb	r2, r3
 800398c:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <check_DHCP_timeout+0xf4>)
 800398e:	701a      	strb	r2, [r3, #0]
 8003990:	e017      	b.n	80039c2 <check_DHCP_timeout+0xea>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8003992:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <check_DHCP_timeout+0x100>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	b25b      	sxtb	r3, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d00a      	beq.n	80039b2 <check_DHCP_timeout+0xda>
 800399c:	2b04      	cmp	r3, #4
 800399e:	d008      	beq.n	80039b2 <check_DHCP_timeout+0xda>
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d000      	beq.n	80039a6 <check_DHCP_timeout+0xce>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 80039a4:	e00b      	b.n	80039be <check_DHCP_timeout+0xe6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
			case STATE_DHCP_DISCOVER:
				dhcp_state = STATE_DHCP_INIT;
 80039a6:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <check_DHCP_timeout+0x100>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 80039ac:	2300      	movs	r3, #0
 80039ae:	71bb      	strb	r3, [r7, #6]
				break;
 80039b0:	e005      	b.n	80039be <check_DHCP_timeout+0xe6>
			case STATE_DHCP_REQUEST:
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
 80039b2:	f7fe fd87 	bl	80024c4 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 80039b6:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <check_DHCP_timeout+0x100>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	701a      	strb	r2, [r3, #0]
				break;
 80039bc:	bf00      	nop
			default :
				break;
		}
		reset_DHCP_timeout();
 80039be:	f000 f8ab 	bl	8003b18 <reset_DHCP_timeout>
	}
	return ret;
 80039c2:	79bb      	ldrb	r3, [r7, #6]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20000164 	andcs	r0, r0, r4, ror #2
 80039d0:	20000160 	andcs	r0, r0, r0, ror #2
 80039d4:	2000015c 	andcs	r0, r0, ip, asr r1
 80039d8:	20000144 	andcs	r0, r0, r4, asr #2
 80039dc:	20000124 	andcs	r0, r0, r4, lsr #2
 80039e0:	20000158 	andcs	r0, r0, r8, asr r1
 80039e4:	2000010c 	andcs	r0, r0, ip, lsl #2

080039e8 <check_DHCP_leasedIP>:
* Note       :
*********************************************************************************************************
*/
//
int8_t check_DHCP_leasedIP(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 80039ee:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80039f2:	f7fe fa97 	bl	8001f24 <WIZCHIP_READ>
 80039f6:	4603      	mov	r3, r0
 80039f8:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 80039fa:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80039fe:	2103      	movs	r1, #3
 8003a00:	f7fe fac4 	bl	8001f8c <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8003a04:	4b15      	ldr	r3, [pc, #84]	; (8003a5c <check_DHCP_leasedIP+0x74>)
 8003a06:	781a      	ldrb	r2, [r3, #0]
 8003a08:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	4610      	mov	r0, r2
 8003a10:	4913      	ldr	r1, [pc, #76]	; (8003a60 <check_DHCP_leasedIP+0x78>)
 8003a12:	2211      	movs	r2, #17
 8003a14:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <check_DHCP_leasedIP+0x7c>)
 8003a16:	f7fd fa09 	bl	8000e2c <sendto>
 8003a1a:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003a22:	4619      	mov	r1, r3
 8003a24:	f7fe fab2 	bl	8001f8c <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	f113 0f0d 	cmn.w	r3, #13
 8003a2e:	d101      	bne.n	8003a34 <check_DHCP_leasedIP+0x4c>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e00e      	b.n	8003a52 <check_DHCP_leasedIP+0x6a>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8003a34:	f7ff faca 	bl	8002fcc <send_DHCP_DECLINE>
		for(tmp = 0; tmp < 10; tmp++) getMR(); // for delay
 8003a38:	2300      	movs	r3, #0
 8003a3a:	71fb      	strb	r3, [r7, #7]
 8003a3c:	e005      	b.n	8003a4a <check_DHCP_leasedIP+0x62>
 8003a3e:	2000      	movs	r0, #0
 8003a40:	f7fe fa70 	bl	8001f24 <WIZCHIP_READ>
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	3301      	adds	r3, #1
 8003a48:	71fb      	strb	r3, [r7, #7]
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	2b09      	cmp	r3, #9
 8003a4e:	d9f6      	bls.n	8003a3e <check_DHCP_leasedIP+0x56>
		return 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	b25b      	sxtb	r3, r3
	}
}	
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20000170 	andcs	r0, r0, r0, ror r1
 8003a60:	08007058 	stmdaeq	r0, {r3, r4, r6, ip, sp, lr}
 8003a64:	2000010c 	andcs	r0, r0, ip, lsl #2

08003a68 <DHCP_init>:
* Note       : 
*********************************************************************************************************
*/

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	6039      	str	r1, [r7, #0]
 8003a72:	71fb      	strb	r3, [r7, #7]
	DHCP_SOCKET = s; // SOCK_DHCP
 8003a74:	4a17      	ldr	r2, [pc, #92]	; (8003ad4 <DHCP_init+0x6c>)
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	7013      	strb	r3, [r2, #0]
	MSG = (RIP_MSG*)buf;
 8003a7a:	4a17      	ldr	r2, [pc, #92]	; (8003ad8 <DHCP_init+0x70>)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8003a80:	4b16      	ldr	r3, [pc, #88]	; (8003adc <DHCP_init+0x74>)
 8003a82:	4a17      	ldr	r2, [pc, #92]	; (8003ae0 <DHCP_init+0x78>)
 8003a84:	601a      	str	r2, [r3, #0]

	// Get the MAC address
	getSHAR(wizchip_mac);
 8003a86:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003a8a:	4916      	ldr	r1, [pc, #88]	; (8003ae4 <DHCP_init+0x7c>)
 8003a8c:	2206      	movs	r2, #6
 8003a8e:	f7fe fab5 	bl	8001ffc <WIZCHIP_READ_BUF>

	// WIZchip Netinfo Clear
	setSIPR(Cip);
 8003a92:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003a96:	4914      	ldr	r1, [pc, #80]	; (8003ae8 <DHCP_init+0x80>)
 8003a98:	2204      	movs	r2, #4
 8003a9a:	f7fe faf5 	bl	8002088 <WIZCHIP_WRITE_BUF>
	setSIPR(Cip);
 8003a9e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003aa2:	4911      	ldr	r1, [pc, #68]	; (8003ae8 <DHCP_init+0x80>)
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	f7fe faef 	bl	8002088 <WIZCHIP_WRITE_BUF>
	setGAR(Cip);
 8003aaa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003aae:	490e      	ldr	r1, [pc, #56]	; (8003ae8 <DHCP_init+0x80>)
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	f7fe fae9 	bl	8002088 <WIZCHIP_WRITE_BUF>

	dhcp_state = STATE_DHCP_INIT;
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <DHCP_init+0x84>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	701a      	strb	r2, [r3, #0]
	socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <DHCP_init+0x6c>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	2244      	movs	r2, #68	; 0x44
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f7fc fdf6 	bl	80006b8 <socket>
}
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000170 	andcs	r0, r0, r0, ror r1
 8003ad8:	2000016c 	andcs	r0, r0, ip, ror #2
 8003adc:	20000154 	andcs	r0, r0, r4, asr r1
 8003ae0:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000
 8003ae4:	2000011c 	andcs	r0, r0, ip, lsl r1
 8003ae8:	20000124 	andcs	r0, r0, r4, lsr #2
 8003aec:	20000144 	andcs	r0, r0, r4, asr #2

08003af0 <DHCP_run>:
* Note       :
*********************************************************************************************************
*/

uint8_t DHCP_run(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
	if(dhcp_state == STATE_DHCP_INIT) {
 8003af4:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <DHCP_run+0x24>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d106      	bne.n	8003b0a <DHCP_run+0x1a>
		send_DHCP_DISCOVER();
 8003afc:	f7fe fce2 	bl	80024c4 <send_DHCP_DISCOVER>
		dhcp_state = STATE_DHCP_DISCOVER;
 8003b00:	4b04      	ldr	r3, [pc, #16]	; (8003b14 <DHCP_run+0x24>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	701a      	strb	r2, [r3, #0]
		reset_DHCP_timeout();
 8003b06:	f000 f807 	bl	8003b18 <reset_DHCP_timeout>
	}

	return check_DHCP_state();
 8003b0a:	f7ff fdcd 	bl	80036a8 <check_DHCP_state>
 8003b0e:	4603      	mov	r3, r0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000144 	andcs	r0, r0, r4, asr #2

08003b18 <reset_DHCP_timeout>:
* Returns    : None.
* Note       :
*********************************************************************************************************
*/
void reset_DHCP_timeout(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
	my_time = 0;
 8003b1c:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <reset_DHCP_timeout+0x20>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
	next_time = DHCP_WAIT_TIME;
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <reset_DHCP_timeout+0x24>)
 8003b24:	220a      	movs	r2, #10
 8003b26:	601a      	str	r2, [r3, #0]
	retry_count = 0;
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <reset_DHCP_timeout+0x28>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
}
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	2000015c 	andcs	r0, r0, ip, asr r1
 8003b3c:	20000160 	andcs	r0, r0, r0, ror #2
 8003b40:	20000164 	andcs	r0, r0, r4, ror #2

08003b44 <getIPfromDHCP>:
* 			   getSNfromDHCP,
* 			   getDNSfromDHCP
*********************************************************************************************************
*/
void getIPfromDHCP(uint8_t * ip)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <getIPfromDHCP+0x38>)
 8003b4e:	781a      	ldrb	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3301      	adds	r3, #1
 8003b58:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <getIPfromDHCP+0x38>)
 8003b5a:	7852      	ldrb	r2, [r2, #1]
 8003b5c:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3302      	adds	r3, #2
 8003b62:	4a06      	ldr	r2, [pc, #24]	; (8003b7c <getIPfromDHCP+0x38>)
 8003b64:	7892      	ldrb	r2, [r2, #2]
 8003b66:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3303      	adds	r3, #3
 8003b6c:	4a03      	ldr	r2, [pc, #12]	; (8003b7c <getIPfromDHCP+0x38>)
 8003b6e:	78d2      	ldrb	r2, [r2, #3]
 8003b70:	701a      	strb	r2, [r3, #0]
}
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	2000010c 	andcs	r0, r0, ip, lsl #2

08003b80 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t * gw)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
	gw[0] = DHCP_allocated_gw[0];
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <getGWfromDHCP+0x38>)
 8003b8a:	781a      	ldrb	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	701a      	strb	r2, [r3, #0]
	gw[1] = DHCP_allocated_gw[1];
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3301      	adds	r3, #1
 8003b94:	4a08      	ldr	r2, [pc, #32]	; (8003bb8 <getGWfromDHCP+0x38>)
 8003b96:	7852      	ldrb	r2, [r2, #1]
 8003b98:	701a      	strb	r2, [r3, #0]
	gw[2] = DHCP_allocated_gw[2];
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3302      	adds	r3, #2
 8003b9e:	4a06      	ldr	r2, [pc, #24]	; (8003bb8 <getGWfromDHCP+0x38>)
 8003ba0:	7892      	ldrb	r2, [r2, #2]
 8003ba2:	701a      	strb	r2, [r3, #0]
	gw[3] = DHCP_allocated_gw[3];
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3303      	adds	r3, #3
 8003ba8:	4a03      	ldr	r2, [pc, #12]	; (8003bb8 <getGWfromDHCP+0x38>)
 8003baa:	78d2      	ldrb	r2, [r2, #3]
 8003bac:	701a      	strb	r2, [r3, #0]
}
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	20000110 	andcs	r0, r0, r0, lsl r1

08003bbc <getSNfromDHCP>:

void getSNfromDHCP(uint8_t * sn)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	sn[0] = DHCP_allocated_sn[0];
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <getSNfromDHCP+0x38>)
 8003bc6:	781a      	ldrb	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	701a      	strb	r2, [r3, #0]
	sn[1] = DHCP_allocated_sn[1];
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	4a08      	ldr	r2, [pc, #32]	; (8003bf4 <getSNfromDHCP+0x38>)
 8003bd2:	7852      	ldrb	r2, [r2, #1]
 8003bd4:	701a      	strb	r2, [r3, #0]
	sn[2] = DHCP_allocated_sn[2];
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3302      	adds	r3, #2
 8003bda:	4a06      	ldr	r2, [pc, #24]	; (8003bf4 <getSNfromDHCP+0x38>)
 8003bdc:	7892      	ldrb	r2, [r2, #2]
 8003bde:	701a      	strb	r2, [r3, #0]
	sn[3] = DHCP_allocated_sn[3];
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3303      	adds	r3, #3
 8003be4:	4a03      	ldr	r2, [pc, #12]	; (8003bf4 <getSNfromDHCP+0x38>)
 8003be6:	78d2      	ldrb	r2, [r2, #3]
 8003be8:	701a      	strb	r2, [r3, #0]
}
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	20000114 	andcs	r0, r0, r4, lsl r1

08003bf8 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t * dns)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	dns[0] = DHCP_allocated_dns[0];
 8003c00:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <getDNSfromDHCP+0x38>)
 8003c02:	781a      	ldrb	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	701a      	strb	r2, [r3, #0]
	dns[1] = DHCP_allocated_dns[1];
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	4a08      	ldr	r2, [pc, #32]	; (8003c30 <getDNSfromDHCP+0x38>)
 8003c0e:	7852      	ldrb	r2, [r2, #1]
 8003c10:	701a      	strb	r2, [r3, #0]
	dns[2] = DHCP_allocated_dns[2];
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3302      	adds	r3, #2
 8003c16:	4a06      	ldr	r2, [pc, #24]	; (8003c30 <getDNSfromDHCP+0x38>)
 8003c18:	7892      	ldrb	r2, [r2, #2]
 8003c1a:	701a      	strb	r2, [r3, #0]
	dns[3] = DHCP_allocated_dns[3];
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3303      	adds	r3, #3
 8003c20:	4a03      	ldr	r2, [pc, #12]	; (8003c30 <getDNSfromDHCP+0x38>)
 8003c22:	78d2      	ldrb	r2, [r2, #3]
 8003c24:	701a      	strb	r2, [r3, #0]
}
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	20000118 	andcs	r0, r0, r8, lsl r1

08003c34 <get16>:
* Returns     : host byte order unsigned integer.
* Note        : Internal Function
********************************************************************************
*/
uint16_t get16(uint8_t * s)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
	uint16_t i;

	i = *s++ << 8;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	021b      	lsls	r3, r3, #8
 8003c48:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	89fb      	ldrh	r3, [r7, #14]
 8003c52:	4413      	add	r3, r2
 8003c54:	81fb      	strh	r3, [r7, #14]

	return i;
 8003c56:	89fb      	ldrh	r3, [r7, #14]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <parse_name>:
* Returns     : the length of compressed message
* Note        :
********************************************************************************
*/
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b08b      	sub	sp, #44	; 0x2c
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 8003c72:	2300      	movs	r3, #0
 8003c74:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 8003c76:	2300      	movs	r3, #0
 8003c78:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]

	cp = compressed;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	623a      	str	r2, [r7, #32]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d102      	bne.n	8003c98 <parse_name+0x34>
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3301      	adds	r3, #1
 8003c96:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 8003c98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c9e:	2bc0      	cmp	r3, #192	; 0xc0
 8003ca0:	d117      	bne.n	8003cd2 <parse_name+0x6e>
		{
			if (!indirect)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d102      	bne.n	8003cae <parse_name+0x4a>
				clen++;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	3301      	adds	r3, #1
 8003cac:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 8003cb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cb8:	021b      	lsls	r3, r3, #8
 8003cba:	6a3a      	ldr	r2, [r7, #32]
 8003cbc:	7812      	ldrb	r2, [r2, #0]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	623a      	str	r2, [r7, #32]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 8003cd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d104      	bne.n	8003ce2 <parse_name+0x7e>
			break;
 8003cd8:	bf00      	nop
		while (slen-- != 0) *buf++ = (char)*cp++;
		*buf++ = '.';
		nseg++;
	}

	if (nseg == 0)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d136      	bne.n	8003d4e <parse_name+0xea>
 8003ce0:	e02b      	b.n	8003d3a <parse_name+0xd6>
		}

		if (slen == 0)	/* zero length == all done */
			break;

		len -= slen + 1;
 8003ce2:	887a      	ldrh	r2, [r7, #2]
 8003ce4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 8003cf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	da02      	bge.n	8003cfe <parse_name+0x9a>
 8003cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cfc:	e032      	b.n	8003d64 <parse_name+0x100>

		if (!indirect) clen += slen;
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d103      	bne.n	8003d0c <parse_name+0xa8>
 8003d04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d06:	69fa      	ldr	r2, [r7, #28]
 8003d08:	4413      	add	r3, r2
 8003d0a:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 8003d0c:	e007      	b.n	8003d1e <parse_name+0xba>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	6a3a      	ldr	r2, [r7, #32]
 8003d16:	1c51      	adds	r1, r2, #1
 8003d18:	6239      	str	r1, [r7, #32]
 8003d1a:	7812      	ldrb	r2, [r2, #0]
 8003d1c:	701a      	strb	r2, [r3, #0]
 8003d1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d20:	1e5a      	subs	r2, r3, #1
 8003d22:	84fa      	strh	r2, [r7, #38]	; 0x26
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f2      	bne.n	8003d0e <parse_name+0xaa>
		*buf++ = '.';
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	607a      	str	r2, [r7, #4]
 8003d2e:	222e      	movs	r2, #46	; 0x2e
 8003d30:	701a      	strb	r2, [r3, #0]
		nseg++;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	3301      	adds	r3, #1
 8003d36:	617b      	str	r3, [r7, #20]
	}
 8003d38:	e7a3      	b.n	8003c82 <parse_name+0x1e>

	if (nseg == 0)
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	222e      	movs	r2, #46	; 0x2e
 8003d42:	701a      	strb	r2, [r3, #0]
		len--;
 8003d44:	887b      	ldrh	r3, [r7, #2]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	701a      	strb	r2, [r3, #0]
	len--;
 8003d58:	887b      	ldrh	r3, [r7, #2]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 8003d62:	69fb      	ldr	r3, [r7, #28]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	372c      	adds	r7, #44	; 0x2c
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <dns_question>:
* Returns     : a pointer the to next record.
* Note        :
********************************************************************************
*/
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 8003d70:	b590      	push	{r4, r7, lr}
 8003d72:	b0c5      	sub	sp, #276	; 0x114
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	1d3b      	adds	r3, r7, #4
 8003d78:	6018      	str	r0, [r3, #0]
 8003d7a:	463b      	mov	r3, r7
 8003d7c:	6019      	str	r1, [r3, #0]
	int len;
	char name[MAX_DNS_BUF_SIZE];

	len = parse_name(msg, cp, name, MAX_DNS_BUF_SIZE);
 8003d7e:	1d3a      	adds	r2, r7, #4
 8003d80:	463b      	mov	r3, r7
 8003d82:	f107 040c 	add.w	r4, r7, #12
 8003d86:	6810      	ldr	r0, [r2, #0]
 8003d88:	6819      	ldr	r1, [r3, #0]
 8003d8a:	4622      	mov	r2, r4
 8003d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d90:	f7ff ff68 	bl	8003c64 <parse_name>
 8003d94:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c


	if (len == -1) return 0;
 8003d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003da0:	d101      	bne.n	8003da6 <dns_question+0x36>
 8003da2:	2300      	movs	r3, #0
 8003da4:	e012      	b.n	8003dcc <dns_question+0x5c>

	cp += len;
 8003da6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003daa:	463b      	mov	r3, r7
 8003dac:	4639      	mov	r1, r7
 8003dae:	6809      	ldr	r1, [r1, #0]
 8003db0:	440a      	add	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]
	cp += 2;		/* type */
 8003db4:	463b      	mov	r3, r7
 8003db6:	463a      	mov	r2, r7
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	3202      	adds	r2, #2
 8003dbc:	601a      	str	r2, [r3, #0]
	cp += 2;		/* class */
 8003dbe:	463b      	mov	r3, r7
 8003dc0:	463a      	mov	r2, r7
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	3202      	adds	r2, #2
 8003dc6:	601a      	str	r2, [r3, #0]

	return cp;
 8003dc8:	463b      	mov	r3, r7
 8003dca:	681b      	ldr	r3, [r3, #0]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd90      	pop	{r4, r7, pc}
 8003dd6:	bf00      	nop

08003dd8 <dns_answer>:
* Returns     : a pointer the to next record.
* Note        :
********************************************************************************
*/
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 8003dd8:	b590      	push	{r4, r7, lr}
 8003dda:	b0c7      	sub	sp, #284	; 0x11c
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	f107 030c 	add.w	r3, r7, #12
 8003de2:	6018      	str	r0, [r3, #0]
 8003de4:	f107 0308 	add.w	r3, r7, #8
 8003de8:	6019      	str	r1, [r3, #0]
 8003dea:	1d3b      	adds	r3, r7, #4
 8003dec:	601a      	str	r2, [r3, #0]
	int len, type;
	char name[MAX_DNS_BUF_SIZE];

	len = parse_name(msg, cp, name, MAX_DNS_BUF_SIZE);
 8003dee:	f107 020c 	add.w	r2, r7, #12
 8003df2:	f107 0308 	add.w	r3, r7, #8
 8003df6:	f107 0410 	add.w	r4, r7, #16
 8003dfa:	6810      	ldr	r0, [r2, #0]
 8003dfc:	6819      	ldr	r1, [r3, #0]
 8003dfe:	4622      	mov	r2, r4
 8003e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e04:	f7ff ff2e 	bl	8003c64 <parse_name>
 8003e08:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	if (len == -1) return 0;
 8003e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e14:	d101      	bne.n	8003e1a <dns_answer+0x42>
 8003e16:	2300      	movs	r3, #0
 8003e18:	e15a      	b.n	80040d0 <dns_answer+0x2f8>

	cp += len;
 8003e1a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003e1e:	f107 0308 	add.w	r3, r7, #8
 8003e22:	f107 0108 	add.w	r1, r7, #8
 8003e26:	6809      	ldr	r1, [r1, #0]
 8003e28:	440a      	add	r2, r1
 8003e2a:	601a      	str	r2, [r3, #0]
	type = get16(cp);
 8003e2c:	f107 0308 	add.w	r3, r7, #8
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	f7ff feff 	bl	8003c34 <get16>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	cp += 2;		/* type */
 8003e3c:	f107 0308 	add.w	r3, r7, #8
 8003e40:	f107 0208 	add.w	r2, r7, #8
 8003e44:	6812      	ldr	r2, [r2, #0]
 8003e46:	3202      	adds	r2, #2
 8003e48:	601a      	str	r2, [r3, #0]
	cp += 2;		/* class */
 8003e4a:	f107 0308 	add.w	r3, r7, #8
 8003e4e:	f107 0208 	add.w	r2, r7, #8
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	3202      	adds	r2, #2
 8003e56:	601a      	str	r2, [r3, #0]
	cp += 4;		/* ttl */
 8003e58:	f107 0308 	add.w	r3, r7, #8
 8003e5c:	f107 0208 	add.w	r2, r7, #8
 8003e60:	6812      	ldr	r2, [r2, #0]
 8003e62:	3204      	adds	r2, #4
 8003e64:	601a      	str	r2, [r3, #0]
	cp += 2;		/* len */
 8003e66:	f107 0308 	add.w	r3, r7, #8
 8003e6a:	f107 0208 	add.w	r2, r7, #8
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	3202      	adds	r2, #2
 8003e72:	601a      	str	r2, [r3, #0]


	switch (type)
 8003e74:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	2b0f      	cmp	r3, #15
 8003e7c:	f200 8124 	bhi.w	80040c8 <dns_answer+0x2f0>
 8003e80:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <dns_answer+0xb0>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003ec9 	stmdaeq	r0, {r0, r3, r6, r7, r9, sl, fp, ip, sp}
 8003e8c:	08003f29 	stmdaeq	r0, {r0, r3, r5, r8, r9, sl, fp, ip, sp}
 8003e90:	080040c9 	stmdaeq	r0, {r0, r3, r6, r7, lr}
 8003e94:	080040c9 	stmdaeq	r0, {r0, r3, r6, r7, lr}
 8003e98:	08003f29 	stmdaeq	r0, {r0, r3, r5, r8, r9, sl, fp, ip, sp}
 8003e9c:	08004005 	stmdaeq	r0, {r0, r2, lr}
 8003ea0:	08003f29 	stmdaeq	r0, {r0, r3, r5, r8, r9, sl, fp, ip, sp}
 8003ea4:	08003f29 	stmdaeq	r0, {r0, r3, r5, r8, r9, sl, fp, ip, sp}
 8003ea8:	08003f29 	stmdaeq	r0, {r0, r3, r5, r8, r9, sl, fp, ip, sp}
 8003eac:	080040c9 	stmdaeq	r0, {r0, r3, r6, r7, lr}
 8003eb0:	080040c9 	stmdaeq	r0, {r0, r3, r6, r7, lr}
 8003eb4:	08003f29 	stmdaeq	r0, {r0, r3, r5, r8, r9, sl, fp, ip, sp}
 8003eb8:	08003f69 	stmdaeq	r0, {r0, r3, r5, r6, r8, r9, sl, fp, ip, sp}
 8003ebc:	080040c9 	stmdaeq	r0, {r0, r3, r6, r7, lr}
 8003ec0:	08003fb7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, r8, r9, sl, fp, ip, sp}
 8003ec4:	080040c9 	stmdaeq	r0, {r0, r3, r6, r7, lr}
	{
	case TYPE_A:
		/* Just read the address directly into the structure */
		ip_from_dns[0] = *cp++;
 8003ec8:	f107 0308 	add.w	r3, r7, #8
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f107 0208 	add.w	r2, r7, #8
 8003ed2:	1c59      	adds	r1, r3, #1
 8003ed4:	6011      	str	r1, [r2, #0]
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	1d3b      	adds	r3, r7, #4
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 8003ede:	1d3b      	adds	r3, r7, #4
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	f107 0308 	add.w	r3, r7, #8
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f107 0108 	add.w	r1, r7, #8
 8003eee:	1c58      	adds	r0, r3, #1
 8003ef0:	6008      	str	r0, [r1, #0]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 8003ef6:	1d3b      	adds	r3, r7, #4
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	1c9a      	adds	r2, r3, #2
 8003efc:	f107 0308 	add.w	r3, r7, #8
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f107 0108 	add.w	r1, r7, #8
 8003f06:	1c58      	adds	r0, r3, #1
 8003f08:	6008      	str	r0, [r1, #0]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 8003f0e:	1d3b      	adds	r3, r7, #4
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	1cda      	adds	r2, r3, #3
 8003f14:	f107 0308 	add.w	r3, r7, #8
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f107 0108 	add.w	r1, r7, #8
 8003f1e:	1c58      	adds	r0, r3, #1
 8003f20:	6008      	str	r0, [r1, #0]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	7013      	strb	r3, [r2, #0]
		break;
 8003f26:	e0d0      	b.n	80040ca <dns_answer+0x2f2>
	case TYPE_MR:
	case TYPE_NS:
	case TYPE_PTR:
		/* These types all consist of a single domain name */
		/* convert it to ascii format */
		len = parse_name(msg, cp, name, MAX_DNS_BUF_SIZE);
 8003f28:	f107 020c 	add.w	r2, r7, #12
 8003f2c:	f107 0308 	add.w	r3, r7, #8
 8003f30:	f107 0410 	add.w	r4, r7, #16
 8003f34:	6810      	ldr	r0, [r2, #0]
 8003f36:	6819      	ldr	r1, [r3, #0]
 8003f38:	4622      	mov	r2, r4
 8003f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f3e:	f7ff fe91 	bl	8003c64 <parse_name>
 8003f42:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
		if (len == -1) return 0;
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f4e:	d101      	bne.n	8003f54 <dns_answer+0x17c>
 8003f50:	2300      	movs	r3, #0
 8003f52:	e0bd      	b.n	80040d0 <dns_answer+0x2f8>

		cp += len;
 8003f54:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003f58:	f107 0308 	add.w	r3, r7, #8
 8003f5c:	f107 0108 	add.w	r1, r7, #8
 8003f60:	6809      	ldr	r1, [r1, #0]
 8003f62:	440a      	add	r2, r1
 8003f64:	601a      	str	r2, [r3, #0]
		break;
 8003f66:	e0b0      	b.n	80040ca <dns_answer+0x2f2>
	case TYPE_HINFO:
		len = *cp++;
 8003f68:	f107 0308 	add.w	r3, r7, #8
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f107 0208 	add.w	r2, r7, #8
 8003f72:	1c59      	adds	r1, r3, #1
 8003f74:	6011      	str	r1, [r2, #0]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		cp += len;
 8003f7c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003f80:	f107 0308 	add.w	r3, r7, #8
 8003f84:	f107 0108 	add.w	r1, r7, #8
 8003f88:	6809      	ldr	r1, [r1, #0]
 8003f8a:	440a      	add	r2, r1
 8003f8c:	601a      	str	r2, [r3, #0]

		len = *cp++;
 8003f8e:	f107 0308 	add.w	r3, r7, #8
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f107 0208 	add.w	r2, r7, #8
 8003f98:	1c59      	adds	r1, r3, #1
 8003f9a:	6011      	str	r1, [r2, #0]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		cp += len;
 8003fa2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003fa6:	f107 0308 	add.w	r3, r7, #8
 8003faa:	f107 0108 	add.w	r1, r7, #8
 8003fae:	6809      	ldr	r1, [r1, #0]
 8003fb0:	440a      	add	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]
		break;
 8003fb4:	e089      	b.n	80040ca <dns_answer+0x2f2>
	case TYPE_MX:
		cp += 2;
 8003fb6:	f107 0308 	add.w	r3, r7, #8
 8003fba:	f107 0208 	add.w	r2, r7, #8
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	3202      	adds	r2, #2
 8003fc2:	601a      	str	r2, [r3, #0]
		/* Get domain name of exchanger */
		len = parse_name(msg, cp, name, MAX_DNS_BUF_SIZE);
 8003fc4:	f107 020c 	add.w	r2, r7, #12
 8003fc8:	f107 0308 	add.w	r3, r7, #8
 8003fcc:	f107 0410 	add.w	r4, r7, #16
 8003fd0:	6810      	ldr	r0, [r2, #0]
 8003fd2:	6819      	ldr	r1, [r3, #0]
 8003fd4:	4622      	mov	r2, r4
 8003fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fda:	f7ff fe43 	bl	8003c64 <parse_name>
 8003fde:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
		if (len == -1) return 0;
 8003fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fea:	d101      	bne.n	8003ff0 <dns_answer+0x218>
 8003fec:	2300      	movs	r3, #0
 8003fee:	e06f      	b.n	80040d0 <dns_answer+0x2f8>

		cp += len;
 8003ff0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003ff4:	f107 0308 	add.w	r3, r7, #8
 8003ff8:	f107 0108 	add.w	r1, r7, #8
 8003ffc:	6809      	ldr	r1, [r1, #0]
 8003ffe:	440a      	add	r2, r1
 8004000:	601a      	str	r2, [r3, #0]
		break;
 8004002:	e062      	b.n	80040ca <dns_answer+0x2f2>
	case TYPE_SOA:
		/* Get domain name of name server */
		len = parse_name(msg, cp, name, MAX_DNS_BUF_SIZE);
 8004004:	f107 020c 	add.w	r2, r7, #12
 8004008:	f107 0308 	add.w	r3, r7, #8
 800400c:	f107 0410 	add.w	r4, r7, #16
 8004010:	6810      	ldr	r0, [r2, #0]
 8004012:	6819      	ldr	r1, [r3, #0]
 8004014:	4622      	mov	r2, r4
 8004016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800401a:	f7ff fe23 	bl	8003c64 <parse_name>
 800401e:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
		if (len == -1) return 0;
 8004022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800402a:	d101      	bne.n	8004030 <dns_answer+0x258>
 800402c:	2300      	movs	r3, #0
 800402e:	e04f      	b.n	80040d0 <dns_answer+0x2f8>

		cp += len;
 8004030:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004034:	f107 0308 	add.w	r3, r7, #8
 8004038:	f107 0108 	add.w	r1, r7, #8
 800403c:	6809      	ldr	r1, [r1, #0]
 800403e:	440a      	add	r2, r1
 8004040:	601a      	str	r2, [r3, #0]

		/* Get domain name of responsible person */
		len = parse_name(msg, cp, name, MAX_DNS_BUF_SIZE);
 8004042:	f107 020c 	add.w	r2, r7, #12
 8004046:	f107 0308 	add.w	r3, r7, #8
 800404a:	f107 0410 	add.w	r4, r7, #16
 800404e:	6810      	ldr	r0, [r2, #0]
 8004050:	6819      	ldr	r1, [r3, #0]
 8004052:	4622      	mov	r2, r4
 8004054:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004058:	f7ff fe04 	bl	8003c64 <parse_name>
 800405c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
		if (len == -1) return 0;
 8004060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004068:	d101      	bne.n	800406e <dns_answer+0x296>
 800406a:	2300      	movs	r3, #0
 800406c:	e030      	b.n	80040d0 <dns_answer+0x2f8>

		cp += len;
 800406e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004072:	f107 0308 	add.w	r3, r7, #8
 8004076:	f107 0108 	add.w	r1, r7, #8
 800407a:	6809      	ldr	r1, [r1, #0]
 800407c:	440a      	add	r2, r1
 800407e:	601a      	str	r2, [r3, #0]

		cp += 4;
 8004080:	f107 0308 	add.w	r3, r7, #8
 8004084:	f107 0208 	add.w	r2, r7, #8
 8004088:	6812      	ldr	r2, [r2, #0]
 800408a:	3204      	adds	r2, #4
 800408c:	601a      	str	r2, [r3, #0]
		cp += 4;
 800408e:	f107 0308 	add.w	r3, r7, #8
 8004092:	f107 0208 	add.w	r2, r7, #8
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	3204      	adds	r2, #4
 800409a:	601a      	str	r2, [r3, #0]
		cp += 4;
 800409c:	f107 0308 	add.w	r3, r7, #8
 80040a0:	f107 0208 	add.w	r2, r7, #8
 80040a4:	6812      	ldr	r2, [r2, #0]
 80040a6:	3204      	adds	r2, #4
 80040a8:	601a      	str	r2, [r3, #0]
		cp += 4;
 80040aa:	f107 0308 	add.w	r3, r7, #8
 80040ae:	f107 0208 	add.w	r2, r7, #8
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	3204      	adds	r2, #4
 80040b6:	601a      	str	r2, [r3, #0]
		cp += 4;
 80040b8:	f107 0308 	add.w	r3, r7, #8
 80040bc:	f107 0208 	add.w	r2, r7, #8
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	3204      	adds	r2, #4
 80040c4:	601a      	str	r2, [r3, #0]
		break;
 80040c6:	e000      	b.n	80040ca <dns_answer+0x2f2>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 80040c8:	bf00      	nop
	}

	return cp;
 80040ca:	f107 0308 	add.w	r3, r7, #8
 80040ce:	681b      	ldr	r3, [r3, #0]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd90      	pop	{r4, r7, pc}
 80040da:	bf00      	nop

080040dc <parseMSG>:
* Returns     : 1 - is success, 0 - is fail
* Note        :
********************************************************************************
*/
uint8_t parseMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(pdhdr));
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	2100      	movs	r1, #0
 80040f0:	2204      	movs	r2, #4
 80040f2:	f002 faf7 	bl	80066e4 <memset>

	pdhdr->id = get16(&msg[0]);
 80040f6:	6978      	ldr	r0, [r7, #20]
 80040f8:	f7ff fd9c 	bl	8003c34 <get16>
 80040fc:	4603      	mov	r3, r0
 80040fe:	461a      	mov	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	3302      	adds	r3, #2
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff fd93 	bl	8003c34 <get16>
 800410e:	4603      	mov	r3, r0
 8004110:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 8004112:	8a7b      	ldrh	r3, [r7, #18]
 8004114:	b21b      	sxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	da02      	bge.n	8004120 <parseMSG+0x44>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 8004120:	8a7b      	ldrh	r3, [r7, #18]
 8004122:	0adb      	lsrs	r3, r3, #11
 8004124:	b29b      	uxth	r3, r3
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	b2da      	uxtb	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 8004132:	8a7b      	ldrh	r3, [r7, #18]
 8004134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <parseMSG+0x66>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 8004142:	8a7b      	ldrh	r3, [r7, #18]
 8004144:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <parseMSG+0x76>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 8004152:	8a7b      	ldrh	r3, [r7, #18]
 8004154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <parseMSG+0x86>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2201      	movs	r2, #1
 8004160:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 8004162:	8a7b      	ldrh	r3, [r7, #18]
 8004164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <parseMSG+0x96>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2201      	movs	r2, #1
 8004170:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 8004172:	8a7b      	ldrh	r3, [r7, #18]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	b2da      	uxtb	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	3304      	adds	r3, #4
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff fd55 	bl	8003c34 <get16>
 800418a:	4603      	mov	r3, r0
 800418c:	461a      	mov	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	3306      	adds	r3, #6
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff fd4c 	bl	8003c34 <get16>
 800419c:	4603      	mov	r3, r0
 800419e:	461a      	mov	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	3308      	adds	r3, #8
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff fd43 	bl	8003c34 <get16>
 80041ae:	4603      	mov	r3, r0
 80041b0:	461a      	mov	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	330a      	adds	r3, #10
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff fd3a 	bl	8003c34 <get16>
 80041c0:	4603      	mov	r3, r0
 80041c2:	461a      	mov	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	330c      	adds	r3, #12
 80041cc:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 80041ce:	2300      	movs	r3, #0
 80041d0:	83fb      	strh	r3, [r7, #30]
 80041d2:	e007      	b.n	80041e4 <parseMSG+0x108>
	{
		cp = dns_question(msg, cp);
 80041d4:	6978      	ldr	r0, [r7, #20]
 80041d6:	69b9      	ldr	r1, [r7, #24]
 80041d8:	f7ff fdca 	bl	8003d70 <dns_question>
 80041dc:	61b8      	str	r0, [r7, #24]

	/* Now parse the variable length sections */
	cp = &msg[12];

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 80041de:	8bfb      	ldrh	r3, [r7, #30]
 80041e0:	3301      	adds	r3, #1
 80041e2:	83fb      	strh	r3, [r7, #30]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	895b      	ldrh	r3, [r3, #10]
 80041e8:	8bfa      	ldrh	r2, [r7, #30]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d3f2      	bcc.n	80041d4 <parseMSG+0xf8>
	{
		cp = dns_question(msg, cp);
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 80041ee:	2300      	movs	r3, #0
 80041f0:	83fb      	strh	r3, [r7, #30]
 80041f2:	e008      	b.n	8004206 <parseMSG+0x12a>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 80041f4:	6978      	ldr	r0, [r7, #20]
 80041f6:	69b9      	ldr	r1, [r7, #24]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	f7ff fded 	bl	8003dd8 <dns_answer>
 80041fe:	61b8      	str	r0, [r7, #24]
	{
		cp = dns_question(msg, cp);
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 8004200:	8bfb      	ldrh	r3, [r7, #30]
 8004202:	3301      	adds	r3, #1
 8004204:	83fb      	strh	r3, [r7, #30]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	899b      	ldrh	r3, [r3, #12]
 800420a:	8bfa      	ldrh	r2, [r7, #30]
 800420c:	429a      	cmp	r2, r3
 800420e:	d3f1      	bcc.n	80041f4 <parseMSG+0x118>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 8004210:	2300      	movs	r3, #0
 8004212:	83fb      	strh	r3, [r7, #30]
 8004214:	e002      	b.n	800421c <parseMSG+0x140>
 8004216:	8bfb      	ldrh	r3, [r7, #30]
 8004218:	3301      	adds	r3, #1
 800421a:	83fb      	strh	r3, [r7, #30]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	89db      	ldrh	r3, [r3, #14]
 8004220:	8bfa      	ldrh	r2, [r7, #30]
 8004222:	429a      	cmp	r2, r3
 8004224:	d3f7      	bcc.n	8004216 <parseMSG+0x13a>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 8004226:	2300      	movs	r3, #0
 8004228:	83fb      	strh	r3, [r7, #30]
 800422a:	e002      	b.n	8004232 <parseMSG+0x156>
 800422c:	8bfb      	ldrh	r3, [r7, #30]
 800422e:	3301      	adds	r3, #1
 8004230:	83fb      	strh	r3, [r7, #30]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8a1b      	ldrh	r3, [r3, #16]
 8004236:	8bfa      	ldrh	r2, [r7, #30]
 8004238:	429a      	cmp	r2, r3
 800423a:	d3f7      	bcc.n	800422c <parseMSG+0x150>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	7a1b      	ldrb	r3, [r3, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <parseMSG+0x16c>
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <parseMSG+0x16e>
	else return 0;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3720      	adds	r7, #32
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop

08004254 <put16>:
* Returns     : a pointer to the buffer.
* Note        : Internal Function
********************************************************************************
*/
uint8_t * put16(uint8_t * s, uint16_t i)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	607a      	str	r2, [r7, #4]
 8004266:	887a      	ldrh	r2, [r7, #2]
 8004268:	0a12      	lsrs	r2, r2, #8
 800426a:	b292      	uxth	r2, r2
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	607a      	str	r2, [r7, #4]
 8004276:	887a      	ldrh	r2, [r7, #2]
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	701a      	strb	r2, [r3, #0]

	return s;
 800427c:	687b      	ldr	r3, [r7, #4]
}
 800427e:	4618      	mov	r0, r3
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop

0800428c <dns_makequery>:
* Returns     : the pointer to the DNS message.
* Note        :
********************************************************************************
*/
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 800428c:	b590      	push	{r4, r7, lr}
 800428e:	b0c9      	sub	sp, #292	; 0x124
 8004290:	af00      	add	r7, sp, #0
 8004292:	4604      	mov	r4, r0
 8004294:	f107 0008 	add.w	r0, r7, #8
 8004298:	6001      	str	r1, [r0, #0]
 800429a:	1d39      	adds	r1, r7, #4
 800429c:	600a      	str	r2, [r1, #0]
 800429e:	4619      	mov	r1, r3
 80042a0:	f107 030e 	add.w	r3, r7, #14
 80042a4:	4622      	mov	r2, r4
 80042a6:	801a      	strh	r2, [r3, #0]
 80042a8:	f107 030c 	add.w	r3, r7, #12
 80042ac:	460a      	mov	r2, r1
 80042ae:	801a      	strh	r2, [r3, #0]
	char sname[MAX_DNS_BUF_SIZE];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 80042b0:	1d3b      	adds	r3, r7, #4
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	MSG_ID++;
 80042b8:	4b62      	ldr	r3, [pc, #392]	; (8004444 <dns_makequery+0x1b8>)
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	3301      	adds	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	4b60      	ldr	r3, [pc, #384]	; (8004444 <dns_makequery+0x1b8>)
 80042c2:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, MSG_ID);
 80042c4:	4b5f      	ldr	r3, [pc, #380]	; (8004444 <dns_makequery+0x1b8>)
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80042cc:	4619      	mov	r1, r3
 80042ce:	f7ff ffc1 	bl	8004254 <put16>
 80042d2:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	p = (op << 11) | 0x0100;			/* Recursion desired */
 80042d6:	f107 030e 	add.w	r3, r7, #14
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	02db      	lsls	r3, r3, #11
 80042de:	b29b      	uxth	r3, r3
 80042e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
	cp = put16(cp, p);
 80042ea:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80042ee:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80042f2:	4619      	mov	r1, r3
 80042f4:	f7ff ffae 	bl	8004254 <put16>
 80042f8:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	cp = put16(cp, 1);
 80042fc:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8004300:	2101      	movs	r1, #1
 8004302:	f7ff ffa7 	bl	8004254 <put16>
 8004306:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	cp = put16(cp, 0);
 800430a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800430e:	2100      	movs	r1, #0
 8004310:	f7ff ffa0 	bl	8004254 <put16>
 8004314:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	cp = put16(cp, 0);
 8004318:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800431c:	2100      	movs	r1, #0
 800431e:	f7ff ff99 	bl	8004254 <put16>
 8004322:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	cp = put16(cp, 0);
 8004326:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800432a:	2100      	movs	r1, #0
 800432c:	f7ff ff92 	bl	8004254 <put16>
 8004330:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

	strcpy(sname, name);
 8004334:	f107 0210 	add.w	r2, r7, #16
 8004338:	f107 0308 	add.w	r3, r7, #8
 800433c:	4610      	mov	r0, r2
 800433e:	6819      	ldr	r1, [r3, #0]
 8004340:	f002 fa52 	bl	80067e8 <strcpy>
	dname = sname;
 8004344:	f107 0310 	add.w	r3, r7, #16
 8004348:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	dlen = strlen(dname);
 800434c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8004350:	f002 fa52 	bl	80067f8 <strlen>
 8004354:	4603      	mov	r3, r0
 8004356:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 800435a:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800435e:	212e      	movs	r1, #46	; 0x2e
 8004360:	f002 fa34 	bl	80067cc <strchr>
 8004364:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 8004368:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <dns_makequery+0xf6>
 8004370:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8004374:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004378:	1ad2      	subs	r2, r2, r3
 800437a:	f107 030c 	add.w	r3, r7, #12
 800437e:	801a      	strh	r2, [r3, #0]
 8004380:	e004      	b.n	800438c <dns_makequery+0x100>
		else len = dlen;			/* Last component */
 8004382:	f107 030c 	add.w	r3, r7, #12
 8004386:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 800438a:	801a      	strh	r2, [r3, #0]

		*cp++ = len;				/* Write length of component */
 800438c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004396:	f107 020c 	add.w	r2, r7, #12
 800439a:	8812      	ldrh	r2, [r2, #0]
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 80043a0:	f107 030c 	add.w	r3, r7, #12
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d100      	bne.n	80043ac <dns_makequery+0x120>
 80043aa:	e031      	b.n	8004410 <dns_makequery+0x184>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 80043ac:	f107 030c 	add.w	r3, r7, #12
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80043b6:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80043ba:	461a      	mov	r2, r3
 80043bc:	f002 fa3d 	bl	800683a <strncpy>
		cp += len;
 80043c0:	f107 030c 	add.w	r3, r7, #12
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80043ca:	4413      	add	r3, r2
 80043cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		if (cp1 == NULL)
 80043d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d107      	bne.n	80043e8 <dns_makequery+0x15c>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 80043d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80043e2:	2200      	movs	r2, #0
 80043e4:	701a      	strb	r2, [r3, #0]
			break;
 80043e6:	e013      	b.n	8004410 <dns_makequery+0x184>
		}
		dname += len+1;
 80043e8:	f107 030c 	add.w	r3, r7, #12
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	3301      	adds	r3, #1
 80043f0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80043f4:	4413      	add	r3, r2
 80043f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		dlen -= len+1;
 80043fa:	f107 030c 	add.w	r3, r7, #12
 80043fe:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	b29b      	uxth	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
	}
 800440e:	e7a4      	b.n	800435a <dns_makequery+0xce>

	cp = put16(cp, 0x0001);				/* type */
 8004410:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8004414:	2101      	movs	r1, #1
 8004416:	f7ff ff1d 	bl	8004254 <put16>
 800441a:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	cp = put16(cp, 0x0001);				/* class */
 800441e:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8004422:	2101      	movs	r1, #1
 8004424:	f7ff ff16 	bl	8004254 <put16>
 8004428:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 800442c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004430:	1d3b      	adds	r3, r7, #4
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	b29b      	uxth	r3, r3
 8004438:	b21b      	sxth	r3, r3
}
 800443a:	4618      	mov	r0, r3
 800443c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8004440:	46bd      	mov	sp, r7
 8004442:	bd90      	pop	{r4, r7, pc}
 8004444:	20000180 	andcs	r0, r0, r0, lsl #3

08004448 <DNS_query>:
* Returns     : if succeeds : 1, fails : 0
* Note        :
********************************************************************************
*/
uint8_t DNS_query(uint8_t * dns_server, uint8_t * name, uint8_t * ip_from_dns)
{
 8004448:	b590      	push	{r4, r7, lr}
 800444a:	b08f      	sub	sp, #60	; 0x3c
 800444c:	af02      	add	r7, sp, #8
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;
	uint16_t dns_port;

	len = dns_makequery(0, (char *)name, dns_buf, MAX_DNS_BUF_SIZE);
 8004454:	4b3c      	ldr	r3, [pc, #240]	; (8004548 <DNS_query+0x100>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2000      	movs	r0, #0
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	461a      	mov	r2, r3
 800445e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004462:	f7ff ff13 	bl	800428c <dns_makequery>
 8004466:	4603      	mov	r3, r0
 8004468:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, dns_buf, len, dns_server, IPPORT_DOMAIN);
 800446a:	4b38      	ldr	r3, [pc, #224]	; (800454c <DNS_query+0x104>)
 800446c:	7818      	ldrb	r0, [r3, #0]
 800446e:	4b36      	ldr	r3, [pc, #216]	; (8004548 <DNS_query+0x100>)
 8004470:	6819      	ldr	r1, [r3, #0]
 8004472:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004474:	2335      	movs	r3, #53	; 0x35
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f7fc fcd7 	bl	8000e2c <sendto>


	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 800447e:	4b33      	ldr	r3, [pc, #204]	; (800454c <DNS_query+0x104>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f7fd fe96 	bl	80021b4 <getSn_RX_RSR>
 8004488:	4603      	mov	r3, r0
 800448a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800448c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800448e:	2b00      	cmp	r3, #0
 8004490:	d021      	beq.n	80044d6 <DNS_query+0x8e>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 8004492:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004498:	d902      	bls.n	80044a0 <DNS_query+0x58>
 800449a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800449e:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, dns_buf, len, ip, &port);
 80044a0:	4b2a      	ldr	r3, [pc, #168]	; (800454c <DNS_query+0x104>)
 80044a2:	7818      	ldrb	r0, [r3, #0]
 80044a4:	4b28      	ldr	r3, [pc, #160]	; (8004548 <DNS_query+0x100>)
 80044a6:	6819      	ldr	r1, [r3, #0]
 80044a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80044aa:	f107 0414 	add.w	r4, r7, #20
 80044ae:	f107 0312 	add.w	r3, r7, #18
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	4623      	mov	r3, r4
 80044b6:	f7fc fdc1 	bl	800103c <recvfrom>
 80044ba:	4603      	mov	r3, r0
 80044bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 80044be:	bf00      	nop

			sendto(DNS_SOCKET, dns_buf, len, dns_server, IPPORT_DOMAIN);
		}
	}

	return(parseMSG(&dhp, dns_buf, ip_from_dns));	/* Convert to local format */
 80044c0:	4b21      	ldr	r3, [pc, #132]	; (8004548 <DNS_query+0x100>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f107 0218 	add.w	r2, r7, #24
 80044c8:	4610      	mov	r0, r2
 80044ca:	4619      	mov	r1, r3
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	f7ff fe05 	bl	80040dc <parseMSG>
 80044d2:	4603      	mov	r3, r0
 80044d4:	e034      	b.n	8004540 <DNS_query+0xf8>
			len = recvfrom(DNS_SOCKET, dns_buf, len, ip, &port);
			break;
		}

		// Check Timeout
		ret_check_timeout = check_DNS_timeout();
 80044d6:	f000 f8a5 	bl	8004624 <check_DNS_timeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		if (ret_check_timeout < 0) {
 80044e0:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	da01      	bge.n	80044ec <DNS_query+0xa4>

#ifdef _DNS_DEBUG_
			printf("> DNS Server is not responding : %d.%d.%d.%d\r\n", dns_server[0], dns_server[1], dns_server[2], dns_server[3]);
#endif
			return 0; // timeout occurred
 80044e8:	2300      	movs	r3, #0
 80044ea:	e029      	b.n	8004540 <DNS_query+0xf8>
		}
		else if (ret_check_timeout == 0) {
 80044ec:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d124      	bne.n	800453e <DNS_query+0xf6>
#ifdef _DNS_DEBUG_
			printf("> Timeout\r\n");
#endif
			// Generate random port number
			//srand(seed); users can use the seed value for make random variable.
			dns_port = rand() % 2000 + 63535; // 63535 ~ 65534
 80044f4:	f002 f8fe 	bl	80066f4 <rand>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4b15      	ldr	r3, [pc, #84]	; (8004550 <DNS_query+0x108>)
 80044fc:	fb83 1302 	smull	r1, r3, r3, r2
 8004500:	11d9      	asrs	r1, r3, #7
 8004502:	17d3      	asrs	r3, r2, #31
 8004504:	1acb      	subs	r3, r1, r3
 8004506:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800450a:	fb01 f303 	mul.w	r3, r1, r3
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	b29b      	uxth	r3, r3
 8004512:	f2a3 73d1 	subw	r3, r3, #2001	; 0x7d1
 8004516:	857b      	strh	r3, [r7, #42]	; 0x2a

			// Socket open
			socket(DNS_SOCKET, Sn_MR_UDP, dns_port, 0);
 8004518:	4b0c      	ldr	r3, [pc, #48]	; (800454c <DNS_query+0x104>)
 800451a:	781a      	ldrb	r2, [r3, #0]
 800451c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800451e:	4610      	mov	r0, r2
 8004520:	2102      	movs	r1, #2
 8004522:	461a      	mov	r2, r3
 8004524:	2300      	movs	r3, #0
 8004526:	f7fc f8c7 	bl	80006b8 <socket>

			sendto(DNS_SOCKET, dns_buf, len, dns_server, IPPORT_DOMAIN);
 800452a:	4b08      	ldr	r3, [pc, #32]	; (800454c <DNS_query+0x104>)
 800452c:	7818      	ldrb	r0, [r3, #0]
 800452e:	4b06      	ldr	r3, [pc, #24]	; (8004548 <DNS_query+0x100>)
 8004530:	6819      	ldr	r1, [r3, #0]
 8004532:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004534:	2335      	movs	r3, #53	; 0x35
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f7fc fc77 	bl	8000e2c <sendto>
		}
	}
 800453e:	e79e      	b.n	800447e <DNS_query+0x36>

	return(parseMSG(&dhp, dns_buf, ip_from_dns));	/* Convert to local format */
}
 8004540:	4618      	mov	r0, r3
 8004542:	3734      	adds	r7, #52	; 0x34
 8004544:	46bd      	mov	sp, r7
 8004546:	bd90      	pop	{r4, r7, pc}
 8004548:	20000174 	andcs	r0, r0, r4, ror r1
 800454c:	20000178 	andcs	r0, r0, r8, ror r1
 8004550:	10624dd3 	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>

08004554 <DNS_init>:
* Note        :
********************************************************************************
*/

void DNS_init(uint8_t s, uint8_t * buf)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	6039      	str	r1, [r7, #0]
 800455e:	71fb      	strb	r3, [r7, #7]
	uint16_t dns_port = 3000;
 8004560:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004564:	81fb      	strh	r3, [r7, #14]

	DNS_SOCKET = s; // SOCK_DNS
 8004566:	4a14      	ldr	r2, [pc, #80]	; (80045b8 <DNS_init+0x64>)
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	7013      	strb	r3, [r2, #0]
	dns_buf = buf; // User's shared buffer
 800456c:	4a13      	ldr	r2, [pc, #76]	; (80045bc <DNS_init+0x68>)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	6013      	str	r3, [r2, #0]
	MSG_ID = 0x1122;
 8004572:	4b13      	ldr	r3, [pc, #76]	; (80045c0 <DNS_init+0x6c>)
 8004574:	f241 1222 	movw	r2, #4386	; 0x1122
 8004578:	801a      	strh	r2, [r3, #0]

	// Generate random port number
	//srand(seed); users can use the seed value for make random variable.
	dns_port = rand() % 2000 + 63535; // 63535 ~ 65534
 800457a:	f002 f8bb 	bl	80066f4 <rand>
 800457e:	4602      	mov	r2, r0
 8004580:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <DNS_init+0x70>)
 8004582:	fb83 1302 	smull	r1, r3, r3, r2
 8004586:	11d9      	asrs	r1, r3, #7
 8004588:	17d3      	asrs	r3, r2, #31
 800458a:	1acb      	subs	r3, r1, r3
 800458c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004590:	fb01 f303 	mul.w	r3, r1, r3
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	b29b      	uxth	r3, r3
 8004598:	f2a3 73d1 	subw	r3, r3, #2001	; 0x7d1
 800459c:	81fb      	strh	r3, [r7, #14]
	// Socket open
	socket(DNS_SOCKET, Sn_MR_UDP, dns_port, 0);
 800459e:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <DNS_init+0x64>)
 80045a0:	781a      	ldrb	r2, [r3, #0]
 80045a2:	89fb      	ldrh	r3, [r7, #14]
 80045a4:	4610      	mov	r0, r2
 80045a6:	2102      	movs	r1, #2
 80045a8:	461a      	mov	r2, r3
 80045aa:	2300      	movs	r3, #0
 80045ac:	f7fc f884 	bl	80006b8 <socket>
}
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20000178 	andcs	r0, r0, r8, ror r1
 80045bc:	20000174 	andcs	r0, r0, r4, ror r1
 80045c0:	20000180 	andcs	r0, r0, r0, lsl #3
 80045c4:	10624dd3 	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>

080045c8 <DNS_run>:
* Note        :
********************************************************************************
*/

uint8_t DNS_run(uint8_t * dns_server_1st, uint8_t * dns_server_2nd, uint8_t * name, uint8_t * ip_from_dns)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]

#ifdef _DNS_DEBUG_
	printf("> DNS Query to Primary DNS Server : %d.%d.%d.%d\r\n", dns_server_1st[0], dns_server_1st[1], dns_server_1st[2], dns_server_1st[3]);
#endif

	ret = DNS_query(dns_server_1st, name, ip_from_dns);
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	f7ff ff34 	bl	8004448 <DNS_query>
 80045e0:	4603      	mov	r3, r0
 80045e2:	75fb      	strb	r3, [r7, #23]

	if(!ret) {
 80045e4:	7dfb      	ldrb	r3, [r7, #23]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10f      	bne.n	800460a <DNS_run+0x42>
		if(dns_server_2nd != 0) {
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00c      	beq.n	800460a <DNS_run+0x42>

#ifdef _DNS_DEBUG_
			printf("> DNS Query to Secondary DNS Server : %d.%d.%d.%d\r\n", dns_server_2nd[0], dns_server_2nd[1], dns_server_2nd[2], dns_server_2nd[3]);
#endif
			ret = DNS_query(dns_server_2nd, name, ip_from_dns);
 80045f0:	68b8      	ldr	r0, [r7, #8]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	f7ff ff27 	bl	8004448 <DNS_query>
 80045fa:	4603      	mov	r3, r0
 80045fc:	75fb      	strb	r3, [r7, #23]
			if(ret == 1) ret++;
 80045fe:	7dfb      	ldrb	r3, [r7, #23]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d102      	bne.n	800460a <DNS_run+0x42>
 8004604:	7dfb      	ldrb	r3, [r7, #23]
 8004606:	3301      	adds	r3, #1
 8004608:	75fb      	strb	r3, [r7, #23]
		}
	}

	close(DNS_SOCKET);
 800460a:	4b05      	ldr	r3, [pc, #20]	; (8004620 <DNS_run+0x58>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f7fc f94e 	bl	80008b0 <close>
	// Return value
	// 0 - both failed / 1 - primary success / 2 - secondary success (primary failed)
	return ret;
 8004614:	7dfb      	ldrb	r3, [r7, #23]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20000178 	andcs	r0, r0, r8, ror r1

08004624 <check_DNS_timeout>:
* Note        : timeout : retry count and timer both over.
********************************************************************************
*/

int8_t check_DNS_timeout(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
	static uint8_t retry_count;

	if(dns_time >= DNS_WAIT_TIME)
 8004628:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <check_DNS_timeout+0x44>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b02      	cmp	r3, #2
 800462e:	d913      	bls.n	8004658 <check_DNS_timeout+0x34>
	{
		dns_time = 0;
 8004630:	4b0d      	ldr	r3, [pc, #52]	; (8004668 <check_DNS_timeout+0x44>)
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 8004636:	4b0d      	ldr	r3, [pc, #52]	; (800466c <check_DNS_timeout+0x48>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d904      	bls.n	8004648 <check_DNS_timeout+0x24>
			retry_count = 0;
 800463e:	4b0b      	ldr	r3, [pc, #44]	; (800466c <check_DNS_timeout+0x48>)
 8004640:	2200      	movs	r2, #0
 8004642:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8004644:	23ff      	movs	r3, #255	; 0xff
 8004646:	e008      	b.n	800465a <check_DNS_timeout+0x36>
		}
		retry_count++;
 8004648:	4b08      	ldr	r3, [pc, #32]	; (800466c <check_DNS_timeout+0x48>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	3301      	adds	r3, #1
 800464e:	b2da      	uxtb	r2, r3
 8004650:	4b06      	ldr	r3, [pc, #24]	; (800466c <check_DNS_timeout+0x48>)
 8004652:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 8004654:	2300      	movs	r3, #0
 8004656:	e000      	b.n	800465a <check_DNS_timeout+0x36>
	}

	return 1; // no timer over, no timeout occur
 8004658:	2301      	movs	r3, #1
 800465a:	b25b      	sxtb	r3, r3
}
 800465c:	4618      	mov	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	2000017c 	andcs	r0, r0, ip, ror r1
 800466c:	20000128 	andcs	r0, r0, r8, lsr #2

08004670 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	2300      	movs	r3, #0
 800467e:	613b      	str	r3, [r7, #16]
 8004680:	230f      	movs	r3, #15
 8004682:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	78db      	ldrb	r3, [r3, #3]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d03a      	beq.n	8004702 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800468c:	4b27      	ldr	r3, [pc, #156]	; (800472c <NVIC_Init+0xbc>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	43db      	mvns	r3, r3
 8004692:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004696:	0a1b      	lsrs	r3, r3, #8
 8004698:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f1c3 0304 	rsb	r3, r3, #4
 80046a0:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	fa22 f303 	lsr.w	r3, r2, r3
 80046aa:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	785b      	ldrb	r3, [r3, #1]
 80046b0:	461a      	mov	r2, r3
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	789b      	ldrb	r3, [r3, #2]
 80046be:	461a      	mov	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4013      	ands	r3, r2
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80046d0:	4a17      	ldr	r2, [pc, #92]	; (8004730 <NVIC_Init+0xc0>)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	6979      	ldr	r1, [r7, #20]
 80046d8:	b2c9      	uxtb	r1, r1
 80046da:	4413      	add	r3, r2
 80046dc:	460a      	mov	r2, r1
 80046de:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80046e2:	4a13      	ldr	r2, [pc, #76]	; (8004730 <NVIC_Init+0xc0>)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	095b      	lsrs	r3, r3, #5
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	f003 031f 	and.w	r3, r3, #31
 80046f6:	2101      	movs	r1, #1
 80046f8:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80046fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8004700:	e00f      	b.n	8004722 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004702:	490b      	ldr	r1, [pc, #44]	; (8004730 <NVIC_Init+0xc0>)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	095b      	lsrs	r3, r3, #5
 800470a:	b2db      	uxtb	r3, r3
 800470c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	2201      	movs	r2, #1
 8004718:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800471a:	f100 0320 	add.w	r3, r0, #32
 800471e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	e000ed00 	and	lr, r0, r0, lsl #26
 8004730:	e000e100 	and	lr, r0, r0, lsl #2

08004734 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 800473e:	4a04      	ldr	r2, [pc, #16]	; (8004750 <RCC_LSICmd+0x1c>)
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	6013      	str	r3, [r2, #0]
}
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	42420480 	submi	r0, r2, #128, 8	; 0x80000000

08004754 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	2300      	movs	r3, #0
 8004762:	613b      	str	r3, [r7, #16]
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	2300      	movs	r3, #0
 800476a:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800476c:	4b4d      	ldr	r3, [pc, #308]	; (80048a4 <RCC_GetClocksFreq+0x150>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 030c 	and.w	r3, r3, #12
 8004774:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2b04      	cmp	r3, #4
 800477a:	d007      	beq.n	800478c <RCC_GetClocksFreq+0x38>
 800477c:	2b08      	cmp	r3, #8
 800477e:	d009      	beq.n	8004794 <RCC_GetClocksFreq+0x40>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d134      	bne.n	80047ee <RCC_GetClocksFreq+0x9a>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a48      	ldr	r2, [pc, #288]	; (80048a8 <RCC_GetClocksFreq+0x154>)
 8004788:	601a      	str	r2, [r3, #0]
      break;
 800478a:	e034      	b.n	80047f6 <RCC_GetClocksFreq+0xa2>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a46      	ldr	r2, [pc, #280]	; (80048a8 <RCC_GetClocksFreq+0x154>)
 8004790:	601a      	str	r2, [r3, #0]
      break;
 8004792:	e030      	b.n	80047f6 <RCC_GetClocksFreq+0xa2>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8004794:	4b43      	ldr	r3, [pc, #268]	; (80048a4 <RCC_GetClocksFreq+0x150>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800479c:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800479e:	4b41      	ldr	r3, [pc, #260]	; (80048a4 <RCC_GetClocksFreq+0x150>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a6:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	0c9b      	lsrs	r3, r3, #18
 80047ac:	3302      	adds	r3, #2
 80047ae:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	4a3c      	ldr	r2, [pc, #240]	; (80048ac <RCC_GetClocksFreq+0x158>)
 80047ba:	fb02 f203 	mul.w	r2, r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e013      	b.n	80047ec <RCC_GetClocksFreq+0x98>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80047c4:	4b37      	ldr	r3, [pc, #220]	; (80048a4 <RCC_GetClocksFreq+0x150>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d006      	beq.n	80047de <RCC_GetClocksFreq+0x8a>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4a36      	ldr	r2, [pc, #216]	; (80048ac <RCC_GetClocksFreq+0x158>)
 80047d4:	fb02 f203 	mul.w	r2, r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	e006      	b.n	80047ec <RCC_GetClocksFreq+0x98>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4a31      	ldr	r2, [pc, #196]	; (80048a8 <RCC_GetClocksFreq+0x154>)
 80047e2:	fb02 f203 	mul.w	r2, r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80047ea:	e004      	b.n	80047f6 <RCC_GetClocksFreq+0xa2>
 80047ec:	e003      	b.n	80047f6 <RCC_GetClocksFreq+0xa2>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a2d      	ldr	r2, [pc, #180]	; (80048a8 <RCC_GetClocksFreq+0x154>)
 80047f2:	601a      	str	r2, [r3, #0]
      break;
 80047f4:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80047f6:	4b2b      	ldr	r3, [pc, #172]	; (80048a4 <RCC_GetClocksFreq+0x150>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047fe:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	091b      	lsrs	r3, r3, #4
 8004804:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8004806:	4a2a      	ldr	r2, [pc, #168]	; (80048b0 <RCC_GetClocksFreq+0x15c>)
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	4413      	add	r3, r2
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	b2db      	uxtb	r3, r3
 8004810:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	40da      	lsrs	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 800481e:	4b21      	ldr	r3, [pc, #132]	; (80048a4 <RCC_GetClocksFreq+0x150>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004826:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800482e:	4a20      	ldr	r2, [pc, #128]	; (80048b0 <RCC_GetClocksFreq+0x15c>)
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	4413      	add	r3, r2
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	40da      	lsrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8004846:	4b17      	ldr	r3, [pc, #92]	; (80048a4 <RCC_GetClocksFreq+0x150>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800484e:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	0adb      	lsrs	r3, r3, #11
 8004854:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8004856:	4a16      	ldr	r2, [pc, #88]	; (80048b0 <RCC_GetClocksFreq+0x15c>)
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	4413      	add	r3, r2
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	b2db      	uxtb	r3, r3
 8004860:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	40da      	lsrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800486e:	4b0d      	ldr	r3, [pc, #52]	; (80048a4 <RCC_GetClocksFreq+0x150>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004876:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	0b9b      	lsrs	r3, r3, #14
 800487c:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 800487e:	4a0d      	ldr	r2, [pc, #52]	; (80048b4 <RCC_GetClocksFreq+0x160>)
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	4413      	add	r3, r2
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	b2db      	uxtb	r3, r3
 8004888:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	fbb2 f2f3 	udiv	r2, r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	611a      	str	r2, [r3, #16]
}
 8004898:	371c      	adds	r7, #28
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40021000 	andmi	r1, r2, r0
 80048a8:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 80048ac:	003d0900 	eorseq	r0, sp, r0, lsl #18
 80048b0:	20000054 	andcs	r0, r0, r4, asr r0
 80048b4:	20000064 	andcs	r0, r0, r4, rrx

080048b8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	460b      	mov	r3, r1
 80048c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d006      	beq.n	80048d8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80048ca:	4909      	ldr	r1, [pc, #36]	; (80048f0 <RCC_APB2PeriphClockCmd+0x38>)
 80048cc:	4b08      	ldr	r3, [pc, #32]	; (80048f0 <RCC_APB2PeriphClockCmd+0x38>)
 80048ce:	699a      	ldr	r2, [r3, #24]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	618b      	str	r3, [r1, #24]
 80048d6:	e006      	b.n	80048e6 <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80048d8:	4905      	ldr	r1, [pc, #20]	; (80048f0 <RCC_APB2PeriphClockCmd+0x38>)
 80048da:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <RCC_APB2PeriphClockCmd+0x38>)
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	43db      	mvns	r3, r3
 80048e2:	4013      	ands	r3, r2
 80048e4:	618b      	str	r3, [r1, #24]
  }
}
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	40021000 	andmi	r1, r2, r0

080048f4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	460b      	mov	r3, r1
 80048fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d006      	beq.n	8004914 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8004906:	4909      	ldr	r1, [pc, #36]	; (800492c <RCC_APB1PeriphClockCmd+0x38>)
 8004908:	4b08      	ldr	r3, [pc, #32]	; (800492c <RCC_APB1PeriphClockCmd+0x38>)
 800490a:	69da      	ldr	r2, [r3, #28]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4313      	orrs	r3, r2
 8004910:	61cb      	str	r3, [r1, #28]
 8004912:	e006      	b.n	8004922 <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8004914:	4905      	ldr	r1, [pc, #20]	; (800492c <RCC_APB1PeriphClockCmd+0x38>)
 8004916:	4b05      	ldr	r3, [pc, #20]	; (800492c <RCC_APB1PeriphClockCmd+0x38>)
 8004918:	69da      	ldr	r2, [r3, #28]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	43db      	mvns	r3, r3
 800491e:	4013      	ands	r3, r2
 8004920:	61cb      	str	r3, [r1, #28]
  }
}
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	40021000 	andmi	r1, r2, r0

08004930 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	460b      	mov	r3, r1
 800493a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d006      	beq.n	8004950 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8004942:	4909      	ldr	r1, [pc, #36]	; (8004968 <RCC_APB1PeriphResetCmd+0x38>)
 8004944:	4b08      	ldr	r3, [pc, #32]	; (8004968 <RCC_APB1PeriphResetCmd+0x38>)
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4313      	orrs	r3, r2
 800494c:	610b      	str	r3, [r1, #16]
 800494e:	e006      	b.n	800495e <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8004950:	4905      	ldr	r1, [pc, #20]	; (8004968 <RCC_APB1PeriphResetCmd+0x38>)
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <RCC_APB1PeriphResetCmd+0x38>)
 8004954:	691a      	ldr	r2, [r3, #16]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	43db      	mvns	r3, r3
 800495a:	4013      	ands	r3, r2
 800495c:	610b      	str	r3, [r1, #16]
  }
}
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	40021000 	andmi	r1, r2, r0

0800496c <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	4603      	mov	r3, r0
 8004974:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800497e:	2300      	movs	r3, #0
 8004980:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8004982:	79fb      	ldrb	r3, [r7, #7]
 8004984:	095b      	lsrs	r3, r3, #5
 8004986:	b2db      	uxtb	r3, r3
 8004988:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d103      	bne.n	8004998 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8004990:	4b12      	ldr	r3, [pc, #72]	; (80049dc <RCC_GetFlagStatus+0x70>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	e009      	b.n	80049ac <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d103      	bne.n	80049a6 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800499e:	4b0f      	ldr	r3, [pc, #60]	; (80049dc <RCC_GetFlagStatus+0x70>)
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	e002      	b.n	80049ac <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80049a6:	4b0d      	ldr	r3, [pc, #52]	; (80049dc <RCC_GetFlagStatus+0x70>)
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	f003 031f 	and.w	r3, r3, #31
 80049b2:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	fa22 f303 	lsr.w	r3, r2, r3
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 80049c4:	2301      	movs	r3, #1
 80049c6:	74fb      	strb	r3, [r7, #19]
 80049c8:	e001      	b.n	80049ce <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 80049ca:	2300      	movs	r3, #0
 80049cc:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 80049ce:	7cfb      	ldrb	r3, [r7, #19]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	371c      	adds	r7, #28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	40021000 	andmi	r1, r2, r0

080049e0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b089      	sub	sp, #36	; 0x24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80049ea:	2300      	movs	r3, #0
 80049ec:	61fb      	str	r3, [r7, #28]
 80049ee:	2300      	movs	r3, #0
 80049f0:	613b      	str	r3, [r7, #16]
 80049f2:	2300      	movs	r3, #0
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	2300      	movs	r3, #0
 80049f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
 80049fe:	2300      	movs	r3, #0
 8004a00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	78db      	ldrb	r3, [r3, #3]
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	78db      	ldrb	r3, [r3, #3]
 8004a10:	f003 0310 	and.w	r3, r3, #16
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	789b      	ldrb	r3, [r3, #2]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d044      	beq.n	8004ab8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004a34:	2300      	movs	r3, #0
 8004a36:	61bb      	str	r3, [r7, #24]
 8004a38:	e038      	b.n	8004aac <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d126      	bne.n	8004aa6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	220f      	movs	r2, #15
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	69fa      	ldr	r2, [r7, #28]
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	78db      	ldrb	r3, [r3, #3]
 8004a84:	2b28      	cmp	r3, #40	; 0x28
 8004a86:	d105      	bne.n	8004a94 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	409a      	lsls	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	615a      	str	r2, [r3, #20]
 8004a92:	e008      	b.n	8004aa6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	78db      	ldrb	r3, [r3, #3]
 8004a98:	2b48      	cmp	r3, #72	; 0x48
 8004a9a:	d104      	bne.n	8004aa6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	409a      	lsls	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	61bb      	str	r3, [r7, #24]
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	2b07      	cmp	r3, #7
 8004ab0:	d9c3      	bls.n	8004a3a <GPIO_Init+0x5a>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	2bff      	cmp	r3, #255	; 0xff
 8004abe:	d94a      	bls.n	8004b56 <GPIO_Init+0x176>
  {
    tmpreg = GPIOx->CRH;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61bb      	str	r3, [r7, #24]
 8004aca:	e03e      	b.n	8004b4a <GPIO_Init+0x16a>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	3308      	adds	r3, #8
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	4093      	lsls	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	461a      	mov	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d12b      	bne.n	8004b44 <GPIO_Init+0x164>
      {
        pos = pinpos << 2;
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	220f      	movs	r2, #15
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	43db      	mvns	r3, r3
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4013      	ands	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	78db      	ldrb	r3, [r3, #3]
 8004b18:	2b28      	cmp	r3, #40	; 0x28
 8004b1a:	d107      	bne.n	8004b2c <GPIO_Init+0x14c>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	3308      	adds	r3, #8
 8004b20:	461a      	mov	r2, r3
 8004b22:	2301      	movs	r3, #1
 8004b24:	fa03 f202 	lsl.w	r2, r3, r2
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	78db      	ldrb	r3, [r3, #3]
 8004b30:	2b48      	cmp	r3, #72	; 0x48
 8004b32:	d107      	bne.n	8004b44 <GPIO_Init+0x164>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	3308      	adds	r3, #8
 8004b38:	461a      	mov	r2, r3
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	fa03 f202 	lsl.w	r2, r3, r2
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	3301      	adds	r3, #1
 8004b48:	61bb      	str	r3, [r7, #24]
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	2b07      	cmp	r3, #7
 8004b4e:	d9bd      	bls.n	8004acc <GPIO_Init+0xec>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	605a      	str	r2, [r3, #4]
  }
}
 8004b56:	3724      	adds	r7, #36	; 0x24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8004b6c:	887a      	ldrh	r2, [r7, #2]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	611a      	str	r2, [r3, #16]
}
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8004b88:	887a      	ldrh	r2, [r7, #2]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	615a      	str	r2, [r3, #20]
}
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8004bac:	89fb      	ldrh	r3, [r7, #14]
 8004bae:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8004bb2:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	881a      	ldrh	r2, [r3, #0]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	885b      	ldrh	r3, [r3, #2]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004be4:	4313      	orrs	r3, r2
 8004be6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004bec:	4313      	orrs	r3, r2
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	89fb      	ldrh	r3, [r7, #14]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	89fa      	ldrh	r2, [r7, #14]
 8004bfa:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	8b9b      	ldrh	r3, [r3, #28]
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	8a1a      	ldrh	r2, [r3, #16]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	821a      	strh	r2, [r3, #16]
}
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop

08004c20 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004c2c:	78fb      	ldrb	r3, [r7, #3]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d008      	beq.n	8004c44 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	801a      	strh	r2, [r3, #0]
 8004c42:	e007      	b.n	8004c54 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	801a      	strh	r2, [r3, #0]
  }
}
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop

08004c60 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	887a      	ldrh	r2, [r7, #2]
 8004c70:	819a      	strh	r2, [r3, #12]
}
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	899b      	ldrh	r3, [r3, #12]
 8004c88:	b29b      	uxth	r3, r3
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop

08004c98 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	891b      	ldrh	r3, [r3, #8]
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	887b      	ldrh	r3, [r7, #2]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	73fb      	strb	r3, [r7, #15]
 8004cbc:	e001      	b.n	8004cc2 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	881b      	ldrh	r3, [r3, #0]
 8004ce2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a2e      	ldr	r2, [pc, #184]	; (8004da0 <TIM_TimeBaseInit+0xd0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d013      	beq.n	8004d14 <TIM_TimeBaseInit+0x44>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a2d      	ldr	r2, [pc, #180]	; (8004da4 <TIM_TimeBaseInit+0xd4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d00f      	beq.n	8004d14 <TIM_TimeBaseInit+0x44>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfa:	d00b      	beq.n	8004d14 <TIM_TimeBaseInit+0x44>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a2a      	ldr	r2, [pc, #168]	; (8004da8 <TIM_TimeBaseInit+0xd8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d007      	beq.n	8004d14 <TIM_TimeBaseInit+0x44>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a29      	ldr	r2, [pc, #164]	; (8004dac <TIM_TimeBaseInit+0xdc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d003      	beq.n	8004d14 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a28      	ldr	r2, [pc, #160]	; (8004db0 <TIM_TimeBaseInit+0xe0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d108      	bne.n	8004d26 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8004d14:	89fb      	ldrh	r3, [r7, #14]
 8004d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	885a      	ldrh	r2, [r3, #2]
 8004d20:	89fb      	ldrh	r3, [r7, #14]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a22      	ldr	r2, [pc, #136]	; (8004db4 <TIM_TimeBaseInit+0xe4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00c      	beq.n	8004d48 <TIM_TimeBaseInit+0x78>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a21      	ldr	r2, [pc, #132]	; (8004db8 <TIM_TimeBaseInit+0xe8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d008      	beq.n	8004d48 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8004d36:	89fb      	ldrh	r3, [r7, #14]
 8004d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d3c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	88da      	ldrh	r2, [r3, #6]
 8004d42:	89fb      	ldrh	r3, [r7, #14]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	89fa      	ldrh	r2, [r7, #14]
 8004d4c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	889a      	ldrh	r2, [r3, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	881a      	ldrh	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a0f      	ldr	r2, [pc, #60]	; (8004da0 <TIM_TimeBaseInit+0xd0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00f      	beq.n	8004d86 <TIM_TimeBaseInit+0xb6>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a0e      	ldr	r2, [pc, #56]	; (8004da4 <TIM_TimeBaseInit+0xd4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00b      	beq.n	8004d86 <TIM_TimeBaseInit+0xb6>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a12      	ldr	r2, [pc, #72]	; (8004dbc <TIM_TimeBaseInit+0xec>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d007      	beq.n	8004d86 <TIM_TimeBaseInit+0xb6>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a11      	ldr	r2, [pc, #68]	; (8004dc0 <TIM_TimeBaseInit+0xf0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d003      	beq.n	8004d86 <TIM_TimeBaseInit+0xb6>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a10      	ldr	r2, [pc, #64]	; (8004dc4 <TIM_TimeBaseInit+0xf4>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d104      	bne.n	8004d90 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	7a1b      	ldrb	r3, [r3, #8]
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	829a      	strh	r2, [r3, #20]
}
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	40012c00 	andmi	r2, r1, r0, lsl #24
 8004da4:	40013400 	andmi	r3, r1, r0, lsl #8
 8004da8:	40000400 	andmi	r0, r0, r0, lsl #8
 8004dac:	40000800 	andmi	r0, r0, r0, lsl #16
 8004db0:	40000c00 	andmi	r0, r0, r0, lsl #24
 8004db4:	40001000 	andmi	r1, r0, r0
 8004db8:	40001400 	andmi	r1, r0, r0, lsl #8
 8004dbc:	40014000 	andmi	r4, r1, r0
 8004dc0:	40014400 	andmi	r4, r1, r0, lsl #8
 8004dc4:	40014800 	andmi	r4, r1, r0, lsl #16

08004dc8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d008      	beq.n	8004dec <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	f043 0301 	orr.w	r3, r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	801a      	strh	r2, [r3, #0]
 8004dea:	e007      	b.n	8004dfc <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	f023 0301 	bic.w	r3, r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	801a      	strh	r2, [r3, #0]
  }
}
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop

08004e08 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	807b      	strh	r3, [r7, #2]
 8004e14:	4613      	mov	r3, r2
 8004e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004e18:	787b      	ldrb	r3, [r7, #1]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d008      	beq.n	8004e30 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	899b      	ldrh	r3, [r3, #12]
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	887b      	ldrh	r3, [r7, #2]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	819a      	strh	r2, [r3, #12]
 8004e2e:	e009      	b.n	8004e44 <TIM_ITConfig+0x3c>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	899b      	ldrh	r3, [r3, #12]
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	887b      	ldrh	r3, [r7, #2]
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	819a      	strh	r2, [r3, #12]
  }
}
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop

08004e50 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	81bb      	strh	r3, [r7, #12]
 8004e64:	2300      	movs	r3, #0
 8004e66:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	8a1b      	ldrh	r3, [r3, #16]
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	887b      	ldrh	r3, [r7, #2]
 8004e70:	4013      	ands	r3, r2
 8004e72:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	899b      	ldrh	r3, [r3, #12]
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	887b      	ldrh	r3, [r7, #2]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8004e80:	89bb      	ldrh	r3, [r7, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d005      	beq.n	8004e92 <TIM_GetITStatus+0x42>
 8004e86:	897b      	ldrh	r3, [r7, #10]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	73fb      	strb	r3, [r7, #15]
 8004e90:	e001      	b.n	8004e96 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8004e92:	2300      	movs	r3, #0
 8004e94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	460b      	mov	r3, r1
 8004eae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8004eb0:	887b      	ldrh	r3, [r7, #2]
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	821a      	strh	r2, [r3, #16]
}
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a0d      	ldr	r2, [pc, #52]	; (8004f04 <I2C_DeInit+0x40>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d10a      	bne.n	8004eea <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8004ed4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004ed8:	2101      	movs	r1, #1
 8004eda:	f7ff fd29 	bl	8004930 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 8004ede:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	f7ff fd24 	bl	8004930 <RCC_APB1PeriphResetCmd>
 8004ee8:	e009      	b.n	8004efe <I2C_DeInit+0x3a>
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8004eea:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004eee:	2101      	movs	r1, #1
 8004ef0:	f7ff fd1e 	bl	8004930 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8004ef4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004ef8:	2100      	movs	r1, #0
 8004efa:	f7ff fd19 	bl	8004930 <RCC_APB1PeriphResetCmd>
  }
}
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40005400 	andmi	r5, r0, r0, lsl #8

08004f08 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	; 0x28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004f16:	2300      	movs	r3, #0
 8004f18:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8004f1a:	2304      	movs	r3, #4
 8004f1c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8004f1e:	4b57      	ldr	r3, [pc, #348]	; (800507c <I2C_Init+0x174>)
 8004f20:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	889b      	ldrh	r3, [r3, #4]
 8004f26:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8004f28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f2a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f2e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8004f30:	f107 0308 	add.w	r3, r7, #8
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff fc0d 	bl	8004754 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	4a4f      	ldr	r2, [pc, #316]	; (8005080 <I2C_Init+0x178>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	0c9b      	lsrs	r3, r3, #18
 8004f48:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8004f4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004f4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004f56:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	f023 0301 	bic.w	r3, r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a44      	ldr	r2, [pc, #272]	; (8005084 <I2C_Init+0x17c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d815      	bhi.n	8004fa2 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f82:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8004f84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d801      	bhi.n	8004f8e <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8004f8a:	2304      	movs	r3, #4
 8004f8c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8004f8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004f90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f92:	4313      	orrs	r3, r2
 8004f94:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8004f96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f98:	3301      	adds	r3, #1
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	841a      	strh	r2, [r3, #32]
 8004fa0:	e040      	b.n	8005024 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	88db      	ldrh	r3, [r3, #6]
 8004fa6:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d109      	bne.n	8004fc2 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	4413      	add	r3, r2
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004fc0:	e00e      	b.n	8004fe0 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	009a      	lsls	r2, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd6:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8004fd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fde:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 8004fe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d103      	bne.n	8004ff2 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8004fea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fec:	f043 0301 	orr.w	r3, r3, #1
 8004ff0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 8004ff2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ff4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005002:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8005004:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005006:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800500a:	fb02 f303 	mul.w	r3, r2, r3
 800500e:	4a1e      	ldr	r2, [pc, #120]	; (8005088 <I2C_Init+0x180>)
 8005010:	fb82 1203 	smull	r1, r2, r2, r3
 8005014:	1192      	asrs	r2, r2, #6
 8005016:	17db      	asrs	r3, r3, #31
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	b29b      	uxth	r3, r3
 800501c:	3301      	adds	r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005028:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	b29b      	uxth	r3, r3
 8005030:	f043 0301 	orr.w	r3, r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8005040:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005042:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8005046:	f023 0302 	bic.w	r3, r3, #2
 800504a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	889a      	ldrh	r2, [r3, #4]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	895b      	ldrh	r3, [r3, #10]
 8005054:	4313      	orrs	r3, r2
 8005056:	b29a      	uxth	r2, r3
 8005058:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800505a:	4313      	orrs	r3, r2
 800505c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005062:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	899a      	ldrh	r2, [r3, #12]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	891b      	ldrh	r3, [r3, #8]
 800506c:	4313      	orrs	r3, r2
 800506e:	b29a      	uxth	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	811a      	strh	r2, [r3, #8]
}
 8005074:	3728      	adds	r7, #40	; 0x28
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8005080:	431bde83 	tstmi	fp, #2096	; 0x830
 8005084:	000186a0 	andeq	r8, r1, r0, lsr #13
 8005088:	10624dd3 	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>

0800508c <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	460b      	mov	r3, r1
 8005096:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005098:	78fb      	ldrb	r3, [r7, #3]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d008      	beq.n	80050b0 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	f043 0301 	orr.w	r3, r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	801a      	strh	r2, [r3, #0]
 80050ae:	e007      	b.n	80050c0 <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	f023 0301 	bic.w	r3, r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	801a      	strh	r2, [r3, #0]
  }
}
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop

080050cc <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	460b      	mov	r3, r1
 80050d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80050d8:	78fb      	ldrb	r3, [r7, #3]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d008      	beq.n	80050f0 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	801a      	strh	r2, [r3, #0]
 80050ee:	e007      	b.n	8005100 <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	801a      	strh	r2, [r3, #0]
  }
}
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop

0800510c <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	460b      	mov	r3, r1
 8005116:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	b29a      	uxth	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	821a      	strh	r2, [r3, #16]
}
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop

0800512c <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	70fb      	strb	r3, [r7, #3]
 8005138:	4613      	mov	r3, r2
 800513a:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 800513c:	78bb      	ldrb	r3, [r7, #2]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d004      	beq.n	800514c <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8005142:	78fb      	ldrb	r3, [r7, #3]
 8005144:	f043 0301 	orr.w	r3, r3, #1
 8005148:	70fb      	strb	r3, [r7, #3]
 800514a:	e003      	b.n	8005154 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	f023 0301 	bic.w	r3, r3, #1
 8005152:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	b29a      	uxth	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	821a      	strh	r2, [r3, #16]
}
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop

08005168 <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	460b      	mov	r3, r1
 8005172:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d108      	bne.n	800518c <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= CR1_NOSTRETCH_Set;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	b29b      	uxth	r3, r3
 8005180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005184:	b29a      	uxth	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	801a      	strh	r2, [r3, #0]
 800518a:	e007      	b.n	800519c <I2C_StretchClockCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= CR1_NOSTRETCH_Reset;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	b29b      	uxth	r3, r3
 8005192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005196:	b29a      	uxth	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	801a      	strh	r2, [r3, #0]
  }
}
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop

080051a8 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80051b2:	2300      	movs	r3, #0
 80051b4:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 80051b6:	2300      	movs	r3, #0
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	2300      	movs	r3, #0
 80051bc:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80051be:	2300      	movs	r3, #0
 80051c0:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	8a9b      	ldrh	r3, [r3, #20]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	8b1b      	ldrh	r3, [r3, #24]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	041b      	lsls	r3, r3, #16
 80051d6:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	4313      	orrs	r3, r2
 80051de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80051e2:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	401a      	ands	r2, r3
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d102      	bne.n	80051f6 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 80051f0:	2301      	movs	r3, #1
 80051f2:	75fb      	strb	r3, [r7, #23]
 80051f4:	e001      	b.n	80051fa <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 80051f6:	2300      	movs	r3, #0
 80051f8:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 80051fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8005212:	2300      	movs	r3, #0
 8005214:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8005216:	2300      	movs	r3, #0
 8005218:	613b      	str	r3, [r7, #16]
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	0f1b      	lsrs	r3, r3, #28
 8005226:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800522e:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3314      	adds	r3, #20
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	e005      	b.n	800524a <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	0c1b      	lsrs	r3, r3, #16
 8005242:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3318      	adds	r3, #24
 8005248:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	4013      	ands	r3, r2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8005256:	2301      	movs	r3, #1
 8005258:	75fb      	strb	r3, [r7, #23]
 800525a:	e001      	b.n	8005260 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 800525c:	2300      	movs	r3, #0
 800525e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8005260:	7dfb      	ldrb	r3, [r7, #23]
}
 8005262:	4618      	mov	r0, r3
 8005264:	371c      	adds	r7, #28
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop

08005270 <IWDG_WriteAccessCmd>:
  *     @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *     @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	4603      	mov	r3, r0
 8005278:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 800527a:	4a04      	ldr	r2, [pc, #16]	; (800528c <IWDG_WriteAccessCmd+0x1c>)
 800527c:	88fb      	ldrh	r3, [r7, #6]
 800527e:	6013      	str	r3, [r2, #0]
}
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40003000 	andmi	r3, r0, r0

08005290 <IWDG_SetPrescaler>:
  *     @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *     @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	4603      	mov	r3, r0
 8005298:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 800529a:	4a04      	ldr	r2, [pc, #16]	; (80052ac <IWDG_SetPrescaler+0x1c>)
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	6053      	str	r3, [r2, #4]
}
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40003000 	andmi	r3, r0, r0

080052b0 <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *   This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	4603      	mov	r3, r0
 80052b8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 80052ba:	4a04      	ldr	r2, [pc, #16]	; (80052cc <IWDG_SetReload+0x1c>)
 80052bc:	88fb      	ldrh	r3, [r7, #6]
 80052be:	6093      	str	r3, [r2, #8]
}
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40003000 	andmi	r3, r0, r0

080052d0 <IWDG_ReloadCounter>:
  *   (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_Reload;
 80052d4:	4b03      	ldr	r3, [pc, #12]	; (80052e4 <IWDG_ReloadCounter+0x14>)
 80052d6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80052da:	601a      	str	r2, [r3, #0]
}
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	40003000 	andmi	r3, r0, r0

080052e8 <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_Enable;
 80052ec:	4b03      	ldr	r3, [pc, #12]	; (80052fc <IWDG_Enable+0x14>)
 80052ee:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80052f2:	601a      	str	r2, [r3, #0]
}
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	40003000 	andmi	r3, r0, r0

08005300 <DBGMCU_Config>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	460b      	mov	r3, r1
 800530a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d006      	beq.n	8005320 <DBGMCU_Config+0x20>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 8005312:	4909      	ldr	r1, [pc, #36]	; (8005338 <DBGMCU_Config+0x38>)
 8005314:	4b08      	ldr	r3, [pc, #32]	; (8005338 <DBGMCU_Config+0x38>)
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4313      	orrs	r3, r2
 800531c:	604b      	str	r3, [r1, #4]
 800531e:	e006      	b.n	800532e <DBGMCU_Config+0x2e>
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 8005320:	4905      	ldr	r1, [pc, #20]	; (8005338 <DBGMCU_Config+0x38>)
 8005322:	4b05      	ldr	r3, [pc, #20]	; (8005338 <DBGMCU_Config+0x38>)
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	43db      	mvns	r3, r3
 800532a:	4013      	ands	r3, r2
 800532c:	604b      	str	r3, [r1, #4]
  }
}
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	e0042000 	and	r2, r4, r0

0800533c <Init_i2c1_oled>:
 */

#include "stm32f10x.h"
#include "initialize.h"

void Init_i2c1_oled(void){
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef OLED_GPIO_InitStructure;
    I2C_InitTypeDef OLED_I2C_InitStructure;
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
 8005342:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8005346:	2101      	movs	r1, #1
 8005348:	f7ff fad4 	bl	80048f4 <RCC_APB1PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800534c:	2008      	movs	r0, #8
 800534e:	2101      	movs	r1, #1
 8005350:	f7ff fab2 	bl	80048b8 <RCC_APB2PeriphClockCmd>
    OLED_GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 8005354:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005358:	82bb      	strh	r3, [r7, #20]
    OLED_GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 800535a:	2301      	movs	r3, #1
 800535c:	75bb      	strb	r3, [r7, #22]
    OLED_GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 800535e:	231c      	movs	r3, #28
 8005360:	75fb      	strb	r3, [r7, #23]
    GPIO_Init(GPIOB, &OLED_GPIO_InitStructure);
 8005362:	f107 0314 	add.w	r3, r7, #20
 8005366:	4813      	ldr	r0, [pc, #76]	; (80053b4 <Init_i2c1_oled+0x78>)
 8005368:	4619      	mov	r1, r3
 800536a:	f7ff fb39 	bl	80049e0 <GPIO_Init>

    I2C_DeInit(I2C2); //这句一定要加
 800536e:	4812      	ldr	r0, [pc, #72]	; (80053b8 <Init_i2c1_oled+0x7c>)
 8005370:	f7ff fda8 	bl	8004ec4 <I2C_DeInit>
    OLED_I2C_InitStructure.I2C_ClockSpeed = 270000;
 8005374:	4b11      	ldr	r3, [pc, #68]	; (80053bc <Init_i2c1_oled+0x80>)
 8005376:	607b      	str	r3, [r7, #4]
    OLED_I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8005378:	2300      	movs	r3, #0
 800537a:	813b      	strh	r3, [r7, #8]
    OLED_I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_16_9;
 800537c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005380:	817b      	strh	r3, [r7, #10]
    OLED_I2C_InitStructure.I2C_OwnAddress1 = 0x45;
 8005382:	2345      	movs	r3, #69	; 0x45
 8005384:	81bb      	strh	r3, [r7, #12]
    OLED_I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8005386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800538a:	81fb      	strh	r3, [r7, #14]
    OLED_I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit; //响应七位地址
 800538c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005390:	823b      	strh	r3, [r7, #16]
    I2C_Init(I2C2, &OLED_I2C_InitStructure);
 8005392:	1d3b      	adds	r3, r7, #4
 8005394:	4808      	ldr	r0, [pc, #32]	; (80053b8 <Init_i2c1_oled+0x7c>)
 8005396:	4619      	mov	r1, r3
 8005398:	f7ff fdb6 	bl	8004f08 <I2C_Init>
    /* 启动时钟拉长 */
    I2C_StretchClockCmd(I2C2, ENABLE);
 800539c:	4806      	ldr	r0, [pc, #24]	; (80053b8 <Init_i2c1_oled+0x7c>)
 800539e:	2101      	movs	r1, #1
 80053a0:	f7ff fee2 	bl	8005168 <I2C_StretchClockCmd>
    I2C_Cmd(I2C2, ENABLE);
 80053a4:	4804      	ldr	r0, [pc, #16]	; (80053b8 <Init_i2c1_oled+0x7c>)
 80053a6:	2101      	movs	r1, #1
 80053a8:	f7ff fe70 	bl	800508c <I2C_Cmd>
}
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40010c00 	andmi	r0, r1, r0, lsl #24
 80053b8:	40005800 	andmi	r5, r0, r0, lsl #16
 80053bc:	00041eb0 			; <UNDEFINED> instruction: 0x00041eb0

080053c0 <Init_led_lock>:

// 蓝色灯泡引脚和锁控制引脚
void Init_led_lock(void){
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80053c6:	2008      	movs	r0, #8
 80053c8:	2101      	movs	r1, #1
 80053ca:	f7ff fa75 	bl	80048b8 <RCC_APB2PeriphClockCmd>
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 80053ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80053d2:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;  	
 80053d4:	2310      	movs	r3, #16
 80053d6:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  
 80053d8:	2303      	movs	r3, #3
 80053da:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 80053dc:	1d3b      	adds	r3, r7, #4
 80053de:	4808      	ldr	r0, [pc, #32]	; (8005400 <Init_led_lock+0x40>)
 80053e0:	4619      	mov	r1, r3
 80053e2:	f7ff fafd 	bl	80049e0 <GPIO_Init>
    // 熄灭灯
    GPIO_SetBits(GPIOB, GPIO_Pin_9);
 80053e6:	4806      	ldr	r0, [pc, #24]	; (8005400 <Init_led_lock+0x40>)
 80053e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053ec:	f7ff fbb8 	bl	8004b60 <GPIO_SetBits>
    GPIO_ResetBits(GPIOB, GPIO_Pin_8);  //开锁
 80053f0:	4803      	ldr	r0, [pc, #12]	; (8005400 <Init_led_lock+0x40>)
 80053f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053f6:	f7ff fbc1 	bl	8004b7c <GPIO_ResetBits>
}
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40010c00 	andmi	r0, r1, r0, lsl #24

08005404 <Init_spi1_w5500>:

//w5500网卡
void Init_spi1_w5500(void){
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
    SPI_InitTypeDef SPI_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;
    /* 打开SPI1外设和GPIOA的时钟 */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1 | RCC_APB2Periph_GPIOA , ENABLE);
 800540a:	f241 0004 	movw	r0, #4100	; 0x1004
 800540e:	2101      	movs	r1, #1
 8005410:	f7ff fa52 	bl	80048b8 <RCC_APB2PeriphClockCmd>
     6.PA3=>W5500_RST,Output Push-pull
     7.PA11=>W5500_INT,上拉输入
     8.PA4=>W5500_SCS,推挽输出
    *****************/
    /* SPI1配置 */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_7;
 8005414:	23a0      	movs	r3, #160	; 0xa0
 8005416:	803b      	strh	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005418:	2303      	movs	r3, #3
 800541a:	70bb      	strb	r3, [r7, #2]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; 
 800541c:	2318      	movs	r3, #24
 800541e:	70fb      	strb	r3, [r7, #3]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8005420:	463b      	mov	r3, r7
 8005422:	4827      	ldr	r0, [pc, #156]	; (80054c0 <Init_spi1_w5500+0xbc>)
 8005424:	4619      	mov	r1, r3
 8005426:	f7ff fadb 	bl	80049e0 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 800542a:	2340      	movs	r3, #64	; 0x40
 800542c:	803b      	strh	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800542e:	2303      	movs	r3, #3
 8005430:	70bb      	strb	r3, [r7, #2]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; 
 8005432:	2348      	movs	r3, #72	; 0x48
 8005434:	70fb      	strb	r3, [r7, #3]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8005436:	463b      	mov	r3, r7
 8005438:	4821      	ldr	r0, [pc, #132]	; (80054c0 <Init_spi1_w5500+0xbc>)
 800543a:	4619      	mov	r1, r3
 800543c:	f7ff fad0 	bl	80049e0 <GPIO_Init>

    /* W5500_RST引脚初始化配置(PA3) */
    GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_3 | GPIO_Pin_4;
 8005440:	2318      	movs	r3, #24
 8005442:	803b      	strh	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005444:	2303      	movs	r3, #3
 8005446:	70bb      	strb	r3, [r7, #2]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8005448:	2310      	movs	r3, #16
 800544a:	70fb      	strb	r3, [r7, #3]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 800544c:	463b      	mov	r3, r7
 800544e:	481c      	ldr	r0, [pc, #112]	; (80054c0 <Init_spi1_w5500+0xbc>)
 8005450:	4619      	mov	r1, r3
 8005452:	f7ff fac5 	bl	80049e0 <GPIO_Init>
    GPIO_ResetBits(GPIOA, GPIO_Pin_3);//复位引脚拉低,复位
 8005456:	481a      	ldr	r0, [pc, #104]	; (80054c0 <Init_spi1_w5500+0xbc>)
 8005458:	2108      	movs	r1, #8
 800545a:	f7ff fb8f 	bl	8004b7c <GPIO_ResetBits>

    /* W5500_INT引脚初始化配置(PA11) */	
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 800545e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005462:	803b      	strh	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005464:	2303      	movs	r3, #3
 8005466:	70bb      	strb	r3, [r7, #2]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8005468:	2348      	movs	r3, #72	; 0x48
 800546a:	70fb      	strb	r3, [r7, #3]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 800546c:	463b      	mov	r3, r7
 800546e:	4814      	ldr	r0, [pc, #80]	; (80054c0 <Init_spi1_w5500+0xbc>)
 8005470:	4619      	mov	r1, r3
 8005472:	f7ff fab5 	bl	80049e0 <GPIO_Init>

    /* SPI1配置 */
    SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex; //双线全双工
 8005476:	2300      	movs	r3, #0
 8005478:	80bb      	strh	r3, [r7, #4]
    SPI_InitStructure.SPI_Mode = SPI_Mode_Master; //作为主机
 800547a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800547e:	80fb      	strh	r3, [r7, #6]
    SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b; //传输数据为8位
 8005480:	2300      	movs	r3, #0
 8005482:	813b      	strh	r3, [r7, #8]
    SPI_InitStructure.SPI_CPOL = SPI_CPOL_High; //时钟初始极性为高
 8005484:	2302      	movs	r3, #2
 8005486:	817b      	strh	r3, [r7, #10]
    SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge; //在第二个跳变同步，W5500总是在上升沿同步数据
 8005488:	2301      	movs	r3, #1
 800548a:	81bb      	strh	r3, [r7, #12]
    SPI_InitStructure.SPI_NSS = SPI_NSS_Soft; //软件管理NSS
 800548c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005490:	81fb      	strh	r3, [r7, #14]
    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;//SPI_BaudRatePrescaler_2;
 8005492:	2308      	movs	r3, #8
 8005494:	823b      	strh	r3, [r7, #16]
    SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8005496:	2300      	movs	r3, #0
 8005498:	827b      	strh	r3, [r7, #18]
    SPI_InitStructure.SPI_CRCPolynomial = 7; //CRC
 800549a:	2307      	movs	r3, #7
 800549c:	82bb      	strh	r3, [r7, #20]
    SPI_Init(SPI1, &SPI_InitStructure);
 800549e:	1d3b      	adds	r3, r7, #4
 80054a0:	4808      	ldr	r0, [pc, #32]	; (80054c4 <Init_spi1_w5500+0xc0>)
 80054a2:	4619      	mov	r1, r3
 80054a4:	f7ff fb78 	bl	8004b98 <SPI_Init>
    /* 启动SPI1 */
    SPI_Cmd(SPI1, ENABLE);
 80054a8:	4806      	ldr	r0, [pc, #24]	; (80054c4 <Init_spi1_w5500+0xc0>)
 80054aa:	2101      	movs	r1, #1
 80054ac:	f7ff fbb8 	bl	8004c20 <SPI_Cmd>
    GPIO_SetBits(GPIOA, GPIO_Pin_3);//复位引脚拉高,取消复位
 80054b0:	4803      	ldr	r0, [pc, #12]	; (80054c0 <Init_spi1_w5500+0xbc>)
 80054b2:	2108      	movs	r1, #8
 80054b4:	f7ff fb54 	bl	8004b60 <GPIO_SetBits>
}
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	40010800 	andmi	r0, r1, r0, lsl #16
 80054c4:	40013000 	andmi	r3, r1, r0

080054c8 <Init_tim2_ms_base>:

// TIM2提供1ms时基
void Init_tim2_ms_base(void){
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
    /* 初始化TIM,优先级最低 */
    NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80054ce:	231c      	movs	r3, #28
 80054d0:	703b      	strb	r3, [r7, #0]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	707b      	strb	r3, [r7, #1]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 80054d6:	2303      	movs	r3, #3
 80054d8:	70bb      	strb	r3, [r7, #2]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80054da:	2301      	movs	r3, #1
 80054dc:	70fb      	strb	r3, [r7, #3]
    NVIC_Init(&NVIC_InitStructure);
 80054de:	463b      	mov	r3, r7
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff f8c5 	bl	8004670 <NVIC_Init>
    
    //使能Timer2时钟
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80054e6:	2001      	movs	r0, #1
 80054e8:	2101      	movs	r1, #1
 80054ea:	f7ff fa03 	bl	80048f4 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Period = 9;						//设置在下一个更新事件装入活动的自动重装载寄存器周期的值(计数到10为1ms)
 80054ee:	2309      	movs	r3, #9
 80054f0:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_Prescaler = 7199;					//设置用来作为TIMx时钟频率除数的预分频值(10KHz的计数频率)
 80054f2:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80054f6:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;		//设置时钟分割:TDTS = TIM_CKD_DIV1
 80054f8:	2300      	movs	r3, #0
 80054fa:	817b      	strh	r3, [r7, #10]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;	//TIM向上计数模式
 80054fc:	2300      	movs	r3, #0
 80054fe:	80fb      	strh	r3, [r7, #6]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);				//根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位
 8005500:	1d3b      	adds	r3, r7, #4
 8005502:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005506:	4619      	mov	r1, r3
 8005508:	f7ff fbe2 	bl	8004cd0 <TIM_TimeBaseInit>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE); //使能TIM2指定的中断
 800550c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005510:	2101      	movs	r1, #1
 8005512:	2201      	movs	r2, #1
 8005514:	f7ff fc78 	bl	8004e08 <TIM_ITConfig>
	TIM_Cmd(TIM2, ENABLE); //使能TIMx外设
 8005518:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800551c:	2101      	movs	r1, #1
 800551e:	f7ff fc53 	bl	8004dc8 <TIM_Cmd>
}
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <Init_iwdg_reset>:

// 独立看门狗，防止服务器连接意外断开
void Init_iwdg_reset(void){
 8005528:	b580      	push	{r7, lr}
 800552a:	af00      	add	r7, sp, #0
    // 使能独立看门狗使用的LSI时钟
    RCC_LSICmd(ENABLE);
 800552c:	2001      	movs	r0, #1
 800552e:	f7ff f901 	bl	8004734 <RCC_LSICmd>
    // 等待时钟稳定
    while(RCC_GetFlagStatus(RCC_FLAG_LSIRDY) == RESET);
 8005532:	bf00      	nop
 8005534:	2061      	movs	r0, #97	; 0x61
 8005536:	f7ff fa19 	bl	800496c <RCC_GetFlagStatus>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0f9      	beq.n	8005534 <Init_iwdg_reset+0xc>
    // 在调试的时候暂停看门狗
    DBGMCU_Config(DBGMCU_IWDG_STOP, ENABLE);
 8005540:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005544:	2101      	movs	r1, #1
 8005546:	f7ff fedb 	bl	8005300 <DBGMCU_Config>
    // 开启独立看门狗，使能访问
    IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);
 800554a:	f245 5055 	movw	r0, #21845	; 0x5555
 800554e:	f7ff fe8f 	bl	8005270 <IWDG_WriteAccessCmd>
     * 设置预分频
     * 独立看门狗是内部一个独立的40KHz的震荡源提供频率
     * 记录时间为 = (时钟频率(40KHz) / 分频数)* IWDG_SetReload(t)
     * 最大记录时间 = (1/40K) * 256 * 0xFFF = 26.208秒
     */
    IWDG_SetPrescaler(IWDG_Prescaler_256);
 8005552:	2006      	movs	r0, #6
 8005554:	f7ff fe9c 	bl	8005290 <IWDG_SetPrescaler>
    // 0x30D 等于 4.9984 秒，约为5秒
    IWDG_SetReload(0x30D);
 8005558:	f240 300d 	movw	r0, #781	; 0x30d
 800555c:	f7ff fea8 	bl	80052b0 <IWDG_SetReload>
    // 重置计数器
    IWDG_ReloadCounter();
 8005560:	f7ff feb6 	bl	80052d0 <IWDG_ReloadCounter>
    // 启动看门狗
    IWDG_Enable();
 8005564:	f7ff fec0 	bl	80052e8 <IWDG_Enable>
    
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop

0800556c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
}
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8005578:	b480      	push	{r7}
 800557a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800557c:	e7fe      	b.n	800557c <HardFault_Handler+0x4>
 800557e:	bf00      	nop

08005580 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8005584:	e7fe      	b.n	8005584 <MemManage_Handler+0x4>
 8005586:	bf00      	nop

08005588 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800558c:	e7fe      	b.n	800558c <BusFault_Handler+0x4>
 800558e:	bf00      	nop

08005590 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8005594:	e7fe      	b.n	8005594 <UsageFault_Handler+0x4>
 8005596:	bf00      	nop

08005598 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
}
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80055a4:	b480      	push	{r7}
 80055a6:	af00      	add	r7, sp, #0
}
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
}
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
}
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <DMA1_Channel5_IRQHandler>:
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32f10x_xx.s).                                            */
/******************************************************************************/

void DMA1_Channel5_IRQHandler(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0

}
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler(void)
{
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0

}
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <TIM2_IRQHandler>:

/* 定时器2的中断函数 */
void TIM2_IRQHandler(void){
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  extern __IO uint32_t Timer2_Counter,Interval_counter;

  if(TIM_GetITStatus(TIM2, TIM_IT_Update) == SET){
 80055e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80055e8:	2101      	movs	r1, #1
 80055ea:	f7ff fc31 	bl	8004e50 <TIM_GetITStatus>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d10e      	bne.n	8005612 <TIM2_IRQHandler+0x32>
    TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 80055f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80055f8:	2101      	movs	r1, #1
 80055fa:	f7ff fc53 	bl	8004ea4 <TIM_ClearITPendingBit>
    Timer2_Counter++;
 80055fe:	4b05      	ldr	r3, [pc, #20]	; (8005614 <TIM2_IRQHandler+0x34>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3301      	adds	r3, #1
 8005604:	4a03      	ldr	r2, [pc, #12]	; (8005614 <TIM2_IRQHandler+0x34>)
 8005606:	6013      	str	r3, [r2, #0]
    Interval_counter++;
 8005608:	4b03      	ldr	r3, [pc, #12]	; (8005618 <TIM2_IRQHandler+0x38>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	4a02      	ldr	r2, [pc, #8]	; (8005618 <TIM2_IRQHandler+0x38>)
 8005610:	6013      	str	r3, [r2, #0]
  }
}
 8005612:	bd80      	pop	{r7, pc}
 8005614:	20000130 	andcs	r0, r0, r0, lsr r1
 8005618:	2000012c 	andcs	r0, r0, ip, lsr #2

0800561c <SPI2_IRQHandler>:

void SPI2_IRQHandler(void){
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
}
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <wizchip_select>:
uint8_t ip_configed = 0,lock_on = 0;
/* MQTT代理对象 */
mqtt_broker_handle_t broker;

//W5500的片选信号 回调
static void wizchip_select(void){
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
    GPIO_ResetBits(GPIOA, GPIO_Pin_4);//置W5500的SCS为低电平
 800562c:	4802      	ldr	r0, [pc, #8]	; (8005638 <wizchip_select+0x10>)
 800562e:	2110      	movs	r1, #16
 8005630:	f7ff faa4 	bl	8004b7c <GPIO_ResetBits>
}
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40010800 	andmi	r0, r1, r0, lsl #16

0800563c <wizchip_deselect>:
//W5500的片选信号 回调
static void wizchip_deselect(void){
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
    GPIO_SetBits(GPIOA, GPIO_Pin_4);//置W5500的SCS为高电平
 8005640:	4802      	ldr	r0, [pc, #8]	; (800564c <wizchip_deselect+0x10>)
 8005642:	2110      	movs	r1, #16
 8005644:	f7ff fa8c 	bl	8004b60 <GPIO_SetBits>
}
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40010800 	andmi	r0, r1, r0, lsl #16

08005650 <wizchip_write>:

//向w5500 写一个字节，回调函数
static void wizchip_write(uint8_t wb){
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	4603      	mov	r3, r0
 8005658:	71fb      	strb	r3, [r7, #7]
    //printf("W%02x ", wb);
    SPI_I2S_SendData(SPI1, wb);//写1个字节数据
 800565a:	79fb      	ldrb	r3, [r7, #7]
 800565c:	b29b      	uxth	r3, r3
 800565e:	4807      	ldr	r0, [pc, #28]	; (800567c <wizchip_write+0x2c>)
 8005660:	4619      	mov	r1, r3
 8005662:	f7ff fafd 	bl	8004c60 <SPI_I2S_SendData>
    while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);//等待数据寄存器空
 8005666:	bf00      	nop
 8005668:	4804      	ldr	r0, [pc, #16]	; (800567c <wizchip_write+0x2c>)
 800566a:	2102      	movs	r1, #2
 800566c:	f7ff fb14 	bl	8004c98 <SPI_I2S_GetFlagStatus>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0f8      	beq.n	8005668 <wizchip_write+0x18>
}
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40013000 	andmi	r3, r1, r0

08005680 <wizchip_read>:

//从w5500读一个字节，回调函数
static uint8_t wizchip_read(void){
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
    uint8_t i;
    i = SPI_I2S_ReceiveData(SPI1);//读取1个字节数据
 8005686:	4809      	ldr	r0, [pc, #36]	; (80056ac <wizchip_read+0x2c>)
 8005688:	f7ff faf8 	bl	8004c7c <SPI_I2S_ReceiveData>
 800568c:	4603      	mov	r3, r0
 800568e:	71fb      	strb	r3, [r7, #7]
    wizchip_write(0x00);//发送一个哑数据 !!!
 8005690:	2000      	movs	r0, #0
 8005692:	f7ff ffdd 	bl	8005650 <wizchip_write>
    i = SPI_I2S_ReceiveData(SPI1);//读取1个字节数据
 8005696:	4805      	ldr	r0, [pc, #20]	; (80056ac <wizchip_read+0x2c>)
 8005698:	f7ff faf0 	bl	8004c7c <SPI_I2S_ReceiveData>
 800569c:	4603      	mov	r3, r0
 800569e:	71fb      	strb	r3, [r7, #7]
    //printf("R%02x ", i);
    return i;//读取1个字节数据
 80056a0:	79fb      	ldrb	r3, [r7, #7]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	40013000 	andmi	r3, r1, r0

080056b0 <delay_ms>:

/* 采用TIM2产生1ms时基延时 */
void delay_ms(uint32_t x){
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
	Timer2_Counter = 0; 
 80056b8:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <delay_ms+0x24>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	601a      	str	r2, [r3, #0]
	while(Timer2_Counter < x){
 80056be:	e001      	b.n	80056c4 <delay_ms+0x14>
        /* 喂狗 */
        IWDG_ReloadCounter();
 80056c0:	f7ff fe06 	bl	80052d0 <IWDG_ReloadCounter>
}

/* 采用TIM2产生1ms时基延时 */
void delay_ms(uint32_t x){
	Timer2_Counter = 0; 
	while(Timer2_Counter < x){
 80056c4:	4b03      	ldr	r3, [pc, #12]	; (80056d4 <delay_ms+0x24>)
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d3f8      	bcc.n	80056c0 <delay_ms+0x10>
        /* 喂狗 */
        IWDG_ReloadCounter();
    }
}
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	20000130 	andcs	r0, r0, r0, lsr r1

080056d8 <display_netinfo>:

static void display_netinfo(void){
 80056d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056da:	b095      	sub	sp, #84	; 0x54
 80056dc:	af06      	add	r7, sp, #24
    char tmpstr[6],disp[22];
    wiz_NetInfo netinfo;
    ctlnetwork(CN_GET_NETINFO, (void*)&netinfo);
 80056de:	463b      	mov	r3, r7
 80056e0:	2001      	movs	r0, #1
 80056e2:	4619      	mov	r1, r3
 80056e4:	f7fc f870 	bl	80017c8 <ctlnetwork>
    // 显示网络信息
    ctlwizchip(CW_GET_ID,(void*)tmpstr);
 80056e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056ec:	2008      	movs	r0, #8
 80056ee:	4619      	mov	r1, r3
 80056f0:	f7fb ff8e 	bl	8001610 <ctlwizchip>
    snprintf(disp, sizeof(disp), "%s:%s", tmpstr, (netinfo.dhcp == NETINFO_DHCP ? "DHCP" : "STATIC"));
 80056f4:	7dbb      	ldrb	r3, [r7, #22]
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d101      	bne.n	80056fe <display_netinfo+0x26>
 80056fa:	4b56      	ldr	r3, [pc, #344]	; (8005854 <display_netinfo+0x17c>)
 80056fc:	e000      	b.n	8005700 <display_netinfo+0x28>
 80056fe:	4b56      	ldr	r3, [pc, #344]	; (8005858 <display_netinfo+0x180>)
 8005700:	f107 0218 	add.w	r2, r7, #24
 8005704:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	4610      	mov	r0, r2
 800570c:	2116      	movs	r1, #22
 800570e:	4a53      	ldr	r2, [pc, #332]	; (800585c <display_netinfo+0x184>)
 8005710:	4623      	mov	r3, r4
 8005712:	f001 f829 	bl	8006768 <sniprintf>
    Driver_OLED_ShowString(0, 1, disp, 8, 0);
 8005716:	f107 0218 	add.w	r2, r7, #24
 800571a:	2300      	movs	r3, #0
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	2000      	movs	r0, #0
 8005720:	2101      	movs	r1, #1
 8005722:	2308      	movs	r3, #8
 8005724:	f7fa ff86 	bl	8000634 <Driver_OLED_ShowString>

    snprintf(disp, sizeof(disp), "MAC:%02X:%02X:%02X:%02X:%02X:%02X",netinfo.mac[0],netinfo.mac[1],netinfo.mac[2],
 8005728:	783b      	ldrb	r3, [r7, #0]
 800572a:	461e      	mov	r6, r3
 800572c:	787b      	ldrb	r3, [r7, #1]
 800572e:	461d      	mov	r5, r3
 8005730:	78bb      	ldrb	r3, [r7, #2]
 8005732:	461c      	mov	r4, r3
            netinfo.mac[3],netinfo.mac[4],netinfo.mac[5]);
 8005734:	78fb      	ldrb	r3, [r7, #3]
    // 显示网络信息
    ctlwizchip(CW_GET_ID,(void*)tmpstr);
    snprintf(disp, sizeof(disp), "%s:%s", tmpstr, (netinfo.dhcp == NETINFO_DHCP ? "DHCP" : "STATIC"));
    Driver_OLED_ShowString(0, 1, disp, 8, 0);

    snprintf(disp, sizeof(disp), "MAC:%02X:%02X:%02X:%02X:%02X:%02X",netinfo.mac[0],netinfo.mac[1],netinfo.mac[2],
 8005736:	4618      	mov	r0, r3
            netinfo.mac[3],netinfo.mac[4],netinfo.mac[5]);
 8005738:	793b      	ldrb	r3, [r7, #4]
    // 显示网络信息
    ctlwizchip(CW_GET_ID,(void*)tmpstr);
    snprintf(disp, sizeof(disp), "%s:%s", tmpstr, (netinfo.dhcp == NETINFO_DHCP ? "DHCP" : "STATIC"));
    Driver_OLED_ShowString(0, 1, disp, 8, 0);

    snprintf(disp, sizeof(disp), "MAC:%02X:%02X:%02X:%02X:%02X:%02X",netinfo.mac[0],netinfo.mac[1],netinfo.mac[2],
 800573a:	4619      	mov	r1, r3
            netinfo.mac[3],netinfo.mac[4],netinfo.mac[5]);
 800573c:	797b      	ldrb	r3, [r7, #5]
    // 显示网络信息
    ctlwizchip(CW_GET_ID,(void*)tmpstr);
    snprintf(disp, sizeof(disp), "%s:%s", tmpstr, (netinfo.dhcp == NETINFO_DHCP ? "DHCP" : "STATIC"));
    Driver_OLED_ShowString(0, 1, disp, 8, 0);

    snprintf(disp, sizeof(disp), "MAC:%02X:%02X:%02X:%02X:%02X:%02X",netinfo.mac[0],netinfo.mac[1],netinfo.mac[2],
 800573e:	461a      	mov	r2, r3
 8005740:	f107 0318 	add.w	r3, r7, #24
 8005744:	9500      	str	r5, [sp, #0]
 8005746:	9401      	str	r4, [sp, #4]
 8005748:	9002      	str	r0, [sp, #8]
 800574a:	9103      	str	r1, [sp, #12]
 800574c:	9204      	str	r2, [sp, #16]
 800574e:	4618      	mov	r0, r3
 8005750:	2116      	movs	r1, #22
 8005752:	4a43      	ldr	r2, [pc, #268]	; (8005860 <display_netinfo+0x188>)
 8005754:	4633      	mov	r3, r6
 8005756:	f001 f807 	bl	8006768 <sniprintf>
            netinfo.mac[3],netinfo.mac[4],netinfo.mac[5]);
    Driver_OLED_ShowString(0, 2, disp, 8, 0);
 800575a:	f107 0218 	add.w	r2, r7, #24
 800575e:	2300      	movs	r3, #0
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	2000      	movs	r0, #0
 8005764:	2102      	movs	r1, #2
 8005766:	2308      	movs	r3, #8
 8005768:	f7fa ff64 	bl	8000634 <Driver_OLED_ShowString>
    snprintf(disp, sizeof(disp), "SIP:%d.%d.%d.%d", netinfo.ip[0],netinfo.ip[1],netinfo.ip[2],netinfo.ip[3]);
 800576c:	79bb      	ldrb	r3, [r7, #6]
 800576e:	461c      	mov	r4, r3
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	4618      	mov	r0, r3
 8005774:	7a3b      	ldrb	r3, [r7, #8]
 8005776:	4619      	mov	r1, r3
 8005778:	7a7b      	ldrb	r3, [r7, #9]
 800577a:	461a      	mov	r2, r3
 800577c:	f107 0318 	add.w	r3, r7, #24
 8005780:	9000      	str	r0, [sp, #0]
 8005782:	9101      	str	r1, [sp, #4]
 8005784:	9202      	str	r2, [sp, #8]
 8005786:	4618      	mov	r0, r3
 8005788:	2116      	movs	r1, #22
 800578a:	4a36      	ldr	r2, [pc, #216]	; (8005864 <display_netinfo+0x18c>)
 800578c:	4623      	mov	r3, r4
 800578e:	f000 ffeb 	bl	8006768 <sniprintf>
    Driver_OLED_ShowString(0, 3, disp, 8, 0);
 8005792:	f107 0218 	add.w	r2, r7, #24
 8005796:	2300      	movs	r3, #0
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	2000      	movs	r0, #0
 800579c:	2103      	movs	r1, #3
 800579e:	2308      	movs	r3, #8
 80057a0:	f7fa ff48 	bl	8000634 <Driver_OLED_ShowString>
    snprintf(disp, sizeof(disp), "GAR:%d.%d.%d.%d", netinfo.gw[0],netinfo.gw[1],netinfo.gw[2],netinfo.gw[3]);
 80057a4:	7bbb      	ldrb	r3, [r7, #14]
 80057a6:	461c      	mov	r4, r3
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	4618      	mov	r0, r3
 80057ac:	7c3b      	ldrb	r3, [r7, #16]
 80057ae:	4619      	mov	r1, r3
 80057b0:	7c7b      	ldrb	r3, [r7, #17]
 80057b2:	461a      	mov	r2, r3
 80057b4:	f107 0318 	add.w	r3, r7, #24
 80057b8:	9000      	str	r0, [sp, #0]
 80057ba:	9101      	str	r1, [sp, #4]
 80057bc:	9202      	str	r2, [sp, #8]
 80057be:	4618      	mov	r0, r3
 80057c0:	2116      	movs	r1, #22
 80057c2:	4a29      	ldr	r2, [pc, #164]	; (8005868 <display_netinfo+0x190>)
 80057c4:	4623      	mov	r3, r4
 80057c6:	f000 ffcf 	bl	8006768 <sniprintf>
    Driver_OLED_ShowString(0, 4, disp, 8, 0);
 80057ca:	f107 0218 	add.w	r2, r7, #24
 80057ce:	2300      	movs	r3, #0
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	2000      	movs	r0, #0
 80057d4:	2104      	movs	r1, #4
 80057d6:	2308      	movs	r3, #8
 80057d8:	f7fa ff2c 	bl	8000634 <Driver_OLED_ShowString>
    snprintf(disp, sizeof(disp), "SUB:%d.%d.%d.%d", netinfo.sn[0],netinfo.sn[1],netinfo.sn[2],netinfo.sn[3]);
 80057dc:	7abb      	ldrb	r3, [r7, #10]
 80057de:	461c      	mov	r4, r3
 80057e0:	7afb      	ldrb	r3, [r7, #11]
 80057e2:	4618      	mov	r0, r3
 80057e4:	7b3b      	ldrb	r3, [r7, #12]
 80057e6:	4619      	mov	r1, r3
 80057e8:	7b7b      	ldrb	r3, [r7, #13]
 80057ea:	461a      	mov	r2, r3
 80057ec:	f107 0318 	add.w	r3, r7, #24
 80057f0:	9000      	str	r0, [sp, #0]
 80057f2:	9101      	str	r1, [sp, #4]
 80057f4:	9202      	str	r2, [sp, #8]
 80057f6:	4618      	mov	r0, r3
 80057f8:	2116      	movs	r1, #22
 80057fa:	4a1c      	ldr	r2, [pc, #112]	; (800586c <display_netinfo+0x194>)
 80057fc:	4623      	mov	r3, r4
 80057fe:	f000 ffb3 	bl	8006768 <sniprintf>
    Driver_OLED_ShowString(0, 5, disp, 8, 0);
 8005802:	f107 0218 	add.w	r2, r7, #24
 8005806:	2300      	movs	r3, #0
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	2000      	movs	r0, #0
 800580c:	2105      	movs	r1, #5
 800580e:	2308      	movs	r3, #8
 8005810:	f7fa ff10 	bl	8000634 <Driver_OLED_ShowString>
    snprintf(disp, sizeof(disp), "DNS:%d.%d.%d.%d", netinfo.dns[0],netinfo.dns[1],netinfo.dns[2],netinfo.dns[3]);
 8005814:	7cbb      	ldrb	r3, [r7, #18]
 8005816:	461c      	mov	r4, r3
 8005818:	7cfb      	ldrb	r3, [r7, #19]
 800581a:	4618      	mov	r0, r3
 800581c:	7d3b      	ldrb	r3, [r7, #20]
 800581e:	4619      	mov	r1, r3
 8005820:	7d7b      	ldrb	r3, [r7, #21]
 8005822:	461a      	mov	r2, r3
 8005824:	f107 0318 	add.w	r3, r7, #24
 8005828:	9000      	str	r0, [sp, #0]
 800582a:	9101      	str	r1, [sp, #4]
 800582c:	9202      	str	r2, [sp, #8]
 800582e:	4618      	mov	r0, r3
 8005830:	2116      	movs	r1, #22
 8005832:	4a0f      	ldr	r2, [pc, #60]	; (8005870 <display_netinfo+0x198>)
 8005834:	4623      	mov	r3, r4
 8005836:	f000 ff97 	bl	8006768 <sniprintf>
    Driver_OLED_ShowString(0, 6, disp, 8, 0);
 800583a:	f107 0218 	add.w	r2, r7, #24
 800583e:	2300      	movs	r3, #0
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	2000      	movs	r0, #0
 8005844:	2106      	movs	r1, #6
 8005846:	2308      	movs	r3, #8
 8005848:	f7fa fef4 	bl	8000634 <Driver_OLED_ShowString>
}
 800584c:	373c      	adds	r7, #60	; 0x3c
 800584e:	46bd      	mov	sp, r7
 8005850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005852:	bf00      	nop
 8005854:	0800706c 	stmdaeq	r0, {r2, r3, r5, r6, ip, sp, lr}
 8005858:	08007074 	stmdaeq	r0, {r2, r4, r5, r6, ip, sp, lr}
 800585c:	0800707c 	stmdaeq	r0, {r2, r3, r4, r5, r6, ip, sp, lr}
 8005860:	08007084 	stmdaeq	r0, {r2, r7, ip, sp, lr}
 8005864:	080070a8 	stmdaeq	r0, {r3, r5, r7, ip, sp, lr}
 8005868:	080070b8 	stmdaeq	r0, {r3, r4, r5, r7, ip, sp, lr}
 800586c:	080070c8 	stmdaeq	r0, {r3, r6, r7, ip, sp, lr}
 8005870:	080070d8 	stmdaeq	r0, {r3, r4, r6, r7, ip, sp, lr}

08005874 <DHCPClient>:

//DHCP客户端
void DHCPClient(void){
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af02      	add	r7, sp, #8
    uint8_t dhcp_ret = 0; //ip是否被配置
 800587a:	2300      	movs	r3, #0
 800587c:	71fb      	strb	r3, [r7, #7]
    /* DHCP IP allocation and check the DHCP lease time (for IP renewal) */
    if(gWIZNETINFO.dhcp == NETINFO_DHCP) {
 800587e:	4b22      	ldr	r3, [pc, #136]	; (8005908 <DHCPClient+0x94>)
 8005880:	7d9b      	ldrb	r3, [r3, #22]
 8005882:	2b02      	cmp	r3, #2
 8005884:	d13c      	bne.n	8005900 <DHCPClient+0x8c>

        dhcp_ret = DHCP_run();
 8005886:	f7fe f933 	bl	8003af0 <DHCP_run>
 800588a:	4603      	mov	r3, r0
 800588c:	71fb      	strb	r3, [r7, #7]

        if((dhcp_ret == DHCP_SUCCESS) || (dhcp_ret == DHCP_IP_CHANGED)) {
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d002      	beq.n	800589a <DHCPClient+0x26>
 8005894:	79fb      	ldrb	r3, [r7, #7]
 8005896:	2b02      	cmp	r3, #2
 8005898:	d119      	bne.n	80058ce <DHCPClient+0x5a>
            getIPfromDHCP(gWIZNETINFO.ip);
 800589a:	481c      	ldr	r0, [pc, #112]	; (800590c <DHCPClient+0x98>)
 800589c:	f7fe f952 	bl	8003b44 <getIPfromDHCP>
            getGWfromDHCP(gWIZNETINFO.gw);
 80058a0:	481b      	ldr	r0, [pc, #108]	; (8005910 <DHCPClient+0x9c>)
 80058a2:	f7fe f96d 	bl	8003b80 <getGWfromDHCP>
            getSNfromDHCP(gWIZNETINFO.sn);
 80058a6:	481b      	ldr	r0, [pc, #108]	; (8005914 <DHCPClient+0xa0>)
 80058a8:	f7fe f988 	bl	8003bbc <getSNfromDHCP>
            getDNSfromDHCP(gWIZNETINFO.dns);
 80058ac:	481a      	ldr	r0, [pc, #104]	; (8005918 <DHCPClient+0xa4>)
 80058ae:	f7fe f9a3 	bl	8003bf8 <getDNSfromDHCP>
            gWIZNETINFO.dhcp = NETINFO_DHCP;
 80058b2:	4b15      	ldr	r3, [pc, #84]	; (8005908 <DHCPClient+0x94>)
 80058b4:	2202      	movs	r2, #2
 80058b6:	759a      	strb	r2, [r3, #22]
            ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 80058b8:	2000      	movs	r0, #0
 80058ba:	4913      	ldr	r1, [pc, #76]	; (8005908 <DHCPClient+0x94>)
 80058bc:	f7fb ff84 	bl	80017c8 <ctlnetwork>
            //ip已被成功配置
            ip_configed = 1;
 80058c0:	4b16      	ldr	r3, [pc, #88]	; (800591c <DHCPClient+0xa8>)
 80058c2:	2201      	movs	r2, #1
 80058c4:	701a      	strb	r2, [r3, #0]
            // 显示ip租约时间
            //printf("DHCP IP Leased Time : %ld Sec\r\n", getDHCPLeasetime());
            display_netinfo();
 80058c6:	f7ff ff07 	bl	80056d8 <display_netinfo>
            /* 喂狗 */
            IWDG_ReloadCounter();
 80058ca:	f7ff fd01 	bl	80052d0 <IWDG_ReloadCounter>
        }
        if(dhcp_ret == DHCP_FAILED)	{
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d115      	bne.n	8005900 <DHCPClient+0x8c>
            //printf(">> DHCP Failed\r\n");
            Driver_OLED_ShowString(0, 1, ">> DHCP Failed", 8, 0);
 80058d4:	2300      	movs	r3, #0
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	2000      	movs	r0, #0
 80058da:	2101      	movs	r1, #1
 80058dc:	4a10      	ldr	r2, [pc, #64]	; (8005920 <DHCPClient+0xac>)
 80058de:	2308      	movs	r3, #8
 80058e0:	f7fa fea8 	bl	8000634 <Driver_OLED_ShowString>
            /* 设置IP模式为静态 */
            gWIZNETINFO.dhcp = NETINFO_STATIC;
 80058e4:	4b08      	ldr	r3, [pc, #32]	; (8005908 <DHCPClient+0x94>)
 80058e6:	2201      	movs	r2, #1
 80058e8:	759a      	strb	r2, [r3, #22]
            /* 应用网络配置 */
            ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 80058ea:	2000      	movs	r0, #0
 80058ec:	4906      	ldr	r1, [pc, #24]	; (8005908 <DHCPClient+0x94>)
 80058ee:	f7fb ff6b 	bl	80017c8 <ctlnetwork>
            // 显示ip内容
            display_netinfo();
 80058f2:	f7ff fef1 	bl	80056d8 <display_netinfo>
            /* 喂狗 */
            IWDG_ReloadCounter();
 80058f6:	f7ff fceb 	bl	80052d0 <IWDG_ReloadCounter>
            //ip已被成功配置
            ip_configed = 1;
 80058fa:	4b08      	ldr	r3, [pc, #32]	; (800591c <DHCPClient+0xa8>)
 80058fc:	2201      	movs	r2, #1
 80058fe:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20000068 	andcs	r0, r0, r8, rrx
 800590c:	2000006e 	andcs	r0, r0, lr, rrx
 8005910:	20000076 	andcs	r0, r0, r6, ror r0
 8005914:	20000072 	andcs	r0, r0, r2, ror r0
 8005918:	2000007a 	andcs	r0, r0, sl, ror r0
 800591c:	20000134 	andcs	r0, r0, r4, lsr r1
 8005920:	080070e8 	stmdaeq	r0, {r3, r5, r6, r7, ip, sp, lr}

08005924 <DNSClient>:

//DNS 客户端，参数是域名，返回ip地址，失败返回0
uint8_t DNSClient(uint8_t *hostname, uint8_t ip_from_dns[]){
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
    uint8_t tmp = 0;
 800592e:	2300      	movs	r3, #0
 8005930:	73fb      	strb	r3, [r7, #15]
    /* DNS client initialization */
    DNS_init(SOCK_DNS, gDATABUF);
 8005932:	2006      	movs	r0, #6
 8005934:	4907      	ldr	r1, [pc, #28]	; (8005954 <DNSClient+0x30>)
 8005936:	f7fe fe0d 	bl	8004554 <DNS_init>

    /* DNS query & response */
    tmp = DNS_run(gWIZNETINFO.dns, secondary_dns_server, hostname, ip_from_dns);
 800593a:	4807      	ldr	r0, [pc, #28]	; (8005958 <DNSClient+0x34>)
 800593c:	4907      	ldr	r1, [pc, #28]	; (800595c <DNSClient+0x38>)
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	f7fe fe41 	bl	80045c8 <DNS_run>
 8005946:	4603      	mov	r3, r0
 8005948:	73fb      	strb	r3, [r7, #15]
    //tmp = DNS_run(gWIZNETINFO.dns, 0, hostname, ip_from_dns); // if you want to use only primary DNS server, second parameter set to 0
    return tmp;
 800594a:	7bfb      	ldrb	r3, [r7, #15]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	200005e0 	andcs	r0, r0, r0, ror #11
 8005958:	2000007a 	andcs	r0, r0, sl, ror r0
 800595c:	20000080 	andcs	r0, r0, r0, lsl #1

08005960 <send_packet>:

static int send_packet(void* socket_info, const void* buf, unsigned int count) {
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
    int fd = (int)socket_info;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	617b      	str	r3, [r7, #20]
    return send(fd, (uint8_t *)buf, count);
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	b2da      	uxtb	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	b29b      	uxth	r3, r3
 8005978:	4610      	mov	r0, r2
 800597a:	68b9      	ldr	r1, [r7, #8]
 800597c:	461a      	mov	r2, r3
 800597e:	f7fb f8a5 	bl	8000acc <send>
 8005982:	4603      	mov	r3, r0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <read_packet>:

int read_packet(void){
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
    int total_bytes = 0, bytes_rcvd, packet_length;
 8005992:	2300      	movs	r3, #0
 8005994:	60fb      	str	r3, [r7, #12]
    uint8_t rem_len_bytes;  // 1~4
    uint16_t rem_len;   // 数据包中数据长度

	memset(packet_buffer, 0, sizeof(packet_buffer));
 8005996:	482a      	ldr	r0, [pc, #168]	; (8005a40 <read_packet+0xb4>)
 8005998:	2100      	movs	r1, #0
 800599a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800599e:	f000 fea1 	bl	80066e4 <memset>
	
	if((bytes_rcvd = recv(SOCK_MQTT, packet_buffer, MQTT_RCVBUFSIZE)) <= 0) {
 80059a2:	2000      	movs	r0, #0
 80059a4:	4926      	ldr	r1, [pc, #152]	; (8005a40 <read_packet+0xb4>)
 80059a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059aa:	f7fb f989 	bl	8000cc0 <recv>
 80059ae:	60b8      	str	r0, [r7, #8]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	dc02      	bgt.n	80059bc <read_packet+0x30>
		return -1;
 80059b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059ba:	e03d      	b.n	8005a38 <read_packet+0xac>
    }
    
	total_bytes += bytes_rcvd;
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	4413      	add	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
	if (total_bytes < 2) return -1;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	dc02      	bgt.n	80059d0 <read_packet+0x44>
 80059ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059ce:	e033      	b.n	8005a38 <read_packet+0xac>
    
    /* 获得帧中保存载荷数据长度的可变数据长度 */
    rem_len_bytes = mqtt_num_rem_len_bytes(packet_buffer);
 80059d0:	481b      	ldr	r0, [pc, #108]	; (8005a40 <read_packet+0xb4>)
 80059d2:	f000 fa59 	bl	8005e88 <mqtt_num_rem_len_bytes>
 80059d6:	4603      	mov	r3, r0
 80059d8:	71fb      	strb	r3, [r7, #7]
	/* 获得载荷数据长度 */
    rem_len = mqtt_parse_rem_len(packet_buffer);
 80059da:	4819      	ldr	r0, [pc, #100]	; (8005a40 <read_packet+0xb4>)
 80059dc:	f000 fa80 	bl	8005ee0 <mqtt_parse_rem_len>
 80059e0:	4603      	mov	r3, r0
 80059e2:	80bb      	strh	r3, [r7, #4]
    
	// 数据包总长度 = 载荷长度 + 1byte帧头 + 帧中表示载荷长度的可变数据长度
    packet_length = rem_len + rem_len_bytes + 1;
 80059e4:	88ba      	ldrh	r2, [r7, #4]
 80059e6:	79fb      	ldrb	r3, [r7, #7]
 80059e8:	4413      	add	r3, r2
 80059ea:	3301      	adds	r3, #1
 80059ec:	603b      	str	r3, [r7, #0]
    // 判断数据长度是否大于缓冲区大小
    if(packet_length >= MQTT_RCVBUFSIZE) return -1;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f4:	db02      	blt.n	80059fc <read_packet+0x70>
 80059f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059fa:	e01d      	b.n	8005a38 <read_packet+0xac>
    
	while(total_bytes < packet_length){ //接收剩下的数据
 80059fc:	e017      	b.n	8005a2e <read_packet+0xa2>
		if((bytes_rcvd = recv(SOCK_MQTT, (packet_buffer+total_bytes), (MQTT_RCVBUFSIZE - total_bytes))) <= 0) return -1;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4a0f      	ldr	r2, [pc, #60]	; (8005a40 <read_packet+0xb4>)
 8005a02:	441a      	add	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2000      	movs	r0, #0
 8005a10:	4611      	mov	r1, r2
 8005a12:	461a      	mov	r2, r3
 8005a14:	f7fb f954 	bl	8000cc0 <recv>
 8005a18:	60b8      	str	r0, [r7, #8]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	dc02      	bgt.n	8005a26 <read_packet+0x9a>
 8005a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a24:	e008      	b.n	8005a38 <read_packet+0xac>
		total_bytes += bytes_rcvd;
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]
	// 数据包总长度 = 载荷长度 + 1byte帧头 + 帧中表示载荷长度的可变数据长度
    packet_length = rem_len + rem_len_bytes + 1;
    // 判断数据长度是否大于缓冲区大小
    if(packet_length >= MQTT_RCVBUFSIZE) return -1;
    
	while(total_bytes < packet_length){ //接收剩下的数据
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	dbe3      	blt.n	80059fe <read_packet+0x72>
		if((bytes_rcvd = recv(SOCK_MQTT, (packet_buffer+total_bytes), (MQTT_RCVBUFSIZE - total_bytes))) <= 0) return -1;
		total_bytes += bytes_rcvd;
	}

	return packet_length;
 8005a36:	683b      	ldr	r3, [r7, #0]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	20000184 	andcs	r0, r0, r4, lsl #3

08005a44 <main>:

int main(void){
 8005a44:	b590      	push	{r4, r7, lr}
 8005a46:	b0ad      	sub	sp, #180	; 0xb4
 8005a48:	af02      	add	r7, sp, #8
    uint8_t tmp = 0;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    uint8_t const memsize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8005a50:	4bc3      	ldr	r3, [pc, #780]	; (8005d60 <main+0x31c>)
 8005a52:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	6859      	ldr	r1, [r3, #4]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    /* MQTT代理服务器地址 */
    uint8_t server_ip[4] = {139,129,19,29};
 8005a60:	4ac0      	ldr	r2, [pc, #768]	; (8005d64 <main+0x320>)
 8005a62:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005a66:	6810      	ldr	r0, [r2, #0]
 8005a68:	6018      	str	r0, [r3, #0]
    /* 配置远程服务器端口 */
    uint16_t server_port = 1883;    // 默认是1883
 8005a6a:	f240 735b 	movw	r3, #1883	; 0x75b
 8005a6e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    uint16_t local_port = 1123; //本地端口,可以随机值
 8005a72:	f240 4363 	movw	r3, #1123	; 0x463
 8005a76:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4

    int packet_length;  // 包长度
	uint16_t msg_id, msg_id_rcv;

    /* LED和锁 */
    Init_led_lock();
 8005a7a:	f7ff fca1 	bl	80053c0 <Init_led_lock>
    /* 产生时基 */
    Init_tim2_ms_base();
 8005a7e:	f7ff fd23 	bl	80054c8 <Init_tim2_ms_base>
    /* OLED硬件初始化 */
    Init_i2c1_oled();
 8005a82:	f7ff fc5b 	bl	800533c <Init_i2c1_oled>
    /* 初始化W5500 */
    Init_spi1_w5500();
 8005a86:	f7ff fcbd 	bl	8005404 <Init_spi1_w5500>
    // 初始化独立看门狗
    Init_iwdg_reset();
 8005a8a:	f7ff fd4d 	bl	8005528 <Init_iwdg_reset>

    /* 发送初始化指令序列 */
    Driver_OLED_Send_START(OLED_COMMAND);
 8005a8e:	2000      	movs	r0, #0
 8005a90:	f7fa fbf6 	bl	8000280 <Driver_OLED_Send_START>
    Driver_OLED_SendDatas(oled_init, sizeof(oled_init));
 8005a94:	48b4      	ldr	r0, [pc, #720]	; (8005d68 <main+0x324>)
 8005a96:	211b      	movs	r1, #27
 8005a98:	f7fa fc2e 	bl	80002f8 <Driver_OLED_SendDatas>
    /* 清空屏幕 */
    Driver_OLED_Fill(0x0);
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	f7fa fc5b 	bl	8000358 <Driver_OLED_Fill>
    /* 打印版本信息 */
    Driver_OLED_ShowString(0, 0, "TDSAST-IOT V1.2.4", 8, 0);
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	4ab0      	ldr	r2, [pc, #704]	; (8005d6c <main+0x328>)
 8005aac:	2308      	movs	r3, #8
 8005aae:	f7fa fdc1 	bl	8000634 <Driver_OLED_ShowString>


    /* 片选回调函数 */
#if _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_
    reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8005ab2:	48af      	ldr	r0, [pc, #700]	; (8005d70 <main+0x32c>)
 8005ab4:	49af      	ldr	r1, [pc, #700]	; (8005d74 <main+0x330>)
 8005ab6:	f7fb fd5d 	bl	8001574 <reg_wizchip_cs_cbfunc>
    #else
        reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
    #endif
#endif
    /* SPI读写回调函数 */
    reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8005aba:	48af      	ldr	r0, [pc, #700]	; (8005d78 <main+0x334>)
 8005abc:	49af      	ldr	r1, [pc, #700]	; (8005d7c <main+0x338>)
 8005abe:	f7fb fd7d 	bl	80015bc <reg_wizchip_spi_cbfunc>

    /* 喂狗 */
    IWDG_ReloadCounter();
 8005ac2:	f7ff fc05 	bl	80052d0 <IWDG_ReloadCounter>

    /* PHY 连接状态检查 */
    do{
        if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
 8005ac6:	f107 039b 	add.w	r3, r7, #155	; 0x9b
 8005aca:	200f      	movs	r0, #15
 8005acc:	4619      	mov	r1, r3
 8005ace:	f7fb fd9f 	bl	8001610 <ctlwizchip>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ad8:	d107      	bne.n	8005aea <main+0xa6>
            Driver_OLED_ShowString(0, 1, "Unknow PHY Link stat.", 8, 0);
 8005ada:	2300      	movs	r3, #0
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	2000      	movs	r0, #0
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	4aa7      	ldr	r2, [pc, #668]	; (8005d80 <main+0x33c>)
 8005ae4:	2308      	movs	r3, #8
 8005ae6:	f7fa fda5 	bl	8000634 <Driver_OLED_ShowString>
    }while(tmp == PHY_LINK_OFF);
 8005aea:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0e9      	beq.n	8005ac6 <main+0x82>

    /* 喂狗 */
    IWDG_ReloadCounter();
 8005af2:	f7ff fbed 	bl	80052d0 <IWDG_ReloadCounter>
    
    /* 初始化缓冲区 */
    if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1){
 8005af6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005afa:	2001      	movs	r0, #1
 8005afc:	4619      	mov	r1, r3
 8005afe:	f7fb fd87 	bl	8001610 <ctlwizchip>
 8005b02:	4603      	mov	r3, r0
 8005b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b08:	d108      	bne.n	8005b1c <main+0xd8>
        Driver_OLED_ShowString(0, 1, "NET Initialized fail.", 8, 0);
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	2000      	movs	r0, #0
 8005b10:	2101      	movs	r1, #1
 8005b12:	4a9c      	ldr	r2, [pc, #624]	; (8005d84 <main+0x340>)
 8005b14:	2308      	movs	r3, #8
 8005b16:	f7fa fd8d 	bl	8000634 <Driver_OLED_ShowString>
        while(1);
 8005b1a:	e7fe      	b.n	8005b1a <main+0xd6>
    }

    /* 喂狗 */
    IWDG_ReloadCounter();
 8005b1c:	f7ff fbd8 	bl	80052d0 <IWDG_ReloadCounter>
    
    /* 初始化网络 */
    ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 8005b20:	2000      	movs	r0, #0
 8005b22:	4999      	ldr	r1, [pc, #612]	; (8005d88 <main+0x344>)
 8005b24:	f7fb fe50 	bl	80017c8 <ctlnetwork>
    
    /* 初始化IP配置 */
    if(gWIZNETINFO.dhcp == NETINFO_DHCP){
 8005b28:	4b97      	ldr	r3, [pc, #604]	; (8005d88 <main+0x344>)
 8005b2a:	7d9b      	ldrb	r3, [r3, #22]
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d104      	bne.n	8005b3a <main+0xf6>
        /* >> DHCP 客户端 << */
        DHCP_init(SOCK_DHCP, gDATABUF);
 8005b30:	2007      	movs	r0, #7
 8005b32:	4996      	ldr	r1, [pc, #600]	; (8005d8c <main+0x348>)
 8005b34:	f7fd ff98 	bl	8003a68 <DHCP_init>
 8005b38:	e00f      	b.n	8005b5a <main+0x116>
    }else if(gWIZNETINFO.dhcp == NETINFO_STATIC){
 8005b3a:	4b93      	ldr	r3, [pc, #588]	; (8005d88 <main+0x344>)
 8005b3c:	7d9b      	ldrb	r3, [r3, #22]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d102      	bne.n	8005b48 <main+0x104>
        display_netinfo();
 8005b42:	f7ff fdc9 	bl	80056d8 <display_netinfo>
 8005b46:	e008      	b.n	8005b5a <main+0x116>
    }else{
        Driver_OLED_ShowString(0, 1, "IP Mode Incorrect!", 8, 0);
 8005b48:	2300      	movs	r3, #0
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	2101      	movs	r1, #1
 8005b50:	4a8f      	ldr	r2, [pc, #572]	; (8005d90 <main+0x34c>)
 8005b52:	2308      	movs	r3, #8
 8005b54:	f7fa fd6e 	bl	8000634 <Driver_OLED_ShowString>
        while(1);
 8005b58:	e7fe      	b.n	8005b58 <main+0x114>
    }

    /* 喂狗 */
    IWDG_ReloadCounter();
 8005b5a:	f7ff fbb9 	bl	80052d0 <IWDG_ReloadCounter>

    /* 打印当前网络信息 */
    display_netinfo();
 8005b5e:	f7ff fdbb 	bl	80056d8 <display_netinfo>
        /**
         * 自动获得IP地址,然后检查该ip地址是否到期,
         * 如果到期则再次自动获取,反之直接返回,
         * 保持该函数在大循环里
         */
        DHCPClient();   //自动获得ip地址
 8005b62:	f7ff fe87 	bl	8005874 <DHCPClient>

        if(!ip_configed) continue;
 8005b66:	4b8b      	ldr	r3, [pc, #556]	; (8005d94 <main+0x350>)
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d100      	bne.n	8005b70 <main+0x12c>
 8005b6e:	e17f      	b.n	8005e70 <main+0x42c>
    
        /* 从DNS获得IP地址 */
        DNSClient("sdc.tdsast.cn", server_ip);
 8005b70:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005b74:	4888      	ldr	r0, [pc, #544]	; (8005d98 <main+0x354>)
 8005b76:	4619      	mov	r1, r3
 8005b78:	f7ff fed4 	bl	8005924 <DNSClient>
        // }while(0);
        // delay_ms(10000);
        // continue;
        
        /* 喂狗 */
        IWDG_ReloadCounter();
 8005b7c:	f7ff fba8 	bl	80052d0 <IWDG_ReloadCounter>

        /* 先关闭该socket */
        close(SOCK_MQTT);
 8005b80:	2000      	movs	r0, #0
 8005b82:	f7fa fe95 	bl	80008b0 <close>
        /* 初始化MQTT客户端 */
        mqtt_init(&broker, "tdsast-iot-ext-door");
 8005b86:	4885      	ldr	r0, [pc, #532]	; (8005d9c <main+0x358>)
 8005b88:	4985      	ldr	r1, [pc, #532]	; (8005da0 <main+0x35c>)
 8005b8a:	f000 fa9d 	bl	80060c8 <mqtt_init>
        /* 登录MQTT服务器 */
        mqtt_init_auth(&broker, "extdoor", "extdoor12345");
 8005b8e:	4883      	ldr	r0, [pc, #524]	; (8005d9c <main+0x358>)
 8005b90:	4984      	ldr	r1, [pc, #528]	; (8005da4 <main+0x360>)
 8005b92:	4a85      	ldr	r2, [pc, #532]	; (8005da8 <main+0x364>)
 8005b94:	f000 fad6 	bl	8006144 <mqtt_init_auth>
        
        /* 喂狗 */
        IWDG_ReloadCounter();
 8005b98:	f7ff fb9a 	bl	80052d0 <IWDG_ReloadCounter>

        /* 打开MQTT的socket */
        socket(SOCK_MQTT, Sn_MR_TCP, local_port, Sn_MR_ND | SOCK_IO_BLOCK);
 8005b9c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	2320      	movs	r3, #32
 8005ba8:	f7fa fd86 	bl	80006b8 <socket>
        /* 连接MQTT服务器 */
        connect(SOCK_MQTT, server_ip, server_port);
 8005bac:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005bb0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	461a      	mov	r2, r3
 8005bba:	f7fa fed5 	bl	8000968 <connect>
        /* MQTT stuffs */
        mqtt_set_alive(&broker, 30);    // 心跳超时30秒,默认是300秒
 8005bbe:	4877      	ldr	r0, [pc, #476]	; (8005d9c <main+0x358>)
 8005bc0:	211e      	movs	r1, #30
 8005bc2:	f000 fae5 	bl	8006190 <mqtt_set_alive>
        broker.socket_info = (void*)SOCK_MQTT; //这个只会传给send对应的函数的第一个参数
 8005bc6:	4b75      	ldr	r3, [pc, #468]	; (8005d9c <main+0x358>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]
        broker.send = send_packet;
 8005bcc:	4b73      	ldr	r3, [pc, #460]	; (8005d9c <main+0x358>)
 8005bce:	4a77      	ldr	r2, [pc, #476]	; (8005dac <main+0x368>)
 8005bd0:	605a      	str	r2, [r3, #4]
        
        /**
         * 连接MQTT服务器
         */
        /* 喂狗 */
        IWDG_ReloadCounter();
 8005bd2:	f7ff fb7d 	bl	80052d0 <IWDG_ReloadCounter>
        // >>>>> CONNECT
        mqtt_connect(&broker);
 8005bd6:	4871      	ldr	r0, [pc, #452]	; (8005d9c <main+0x358>)
 8005bd8:	f000 faea 	bl	80061b0 <mqtt_connect>
        // <<<<< CONNACK
        packet_length = read_packet();
 8005bdc:	f7ff fed6 	bl	800598c <read_packet>
 8005be0:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

        if(packet_length < 0){
 8005be4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	da0c      	bge.n	8005c06 <main+0x1c2>
            Driver_OLED_ShowString(0, 7, "Read CONN pack error.", 8, 0); // 显示在最后一行
 8005bec:	2300      	movs	r3, #0
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	2107      	movs	r1, #7
 8005bf4:	4a6e      	ldr	r2, [pc, #440]	; (8005db0 <main+0x36c>)
 8005bf6:	2308      	movs	r3, #8
 8005bf8:	f7fa fd1c 	bl	8000634 <Driver_OLED_ShowString>
            delay_ms(1000);
 8005bfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c00:	f7ff fd56 	bl	80056b0 <delay_ms>
            continue;
 8005c04:	e134      	b.n	8005e70 <main+0x42c>
        }

        // 检查回包类型
        if(MQTTParseMessageType(packet_buffer) != MQTT_MSG_CONNACK){
 8005c06:	4b6b      	ldr	r3, [pc, #428]	; (8005db4 <main+0x370>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c0e:	2b20      	cmp	r3, #32
 8005c10:	d00c      	beq.n	8005c2c <main+0x1e8>
            Driver_OLED_ShowString(0, 7, "CONNACK expected!", 8, 0); // 显示在最后一行
 8005c12:	2300      	movs	r3, #0
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	2000      	movs	r0, #0
 8005c18:	2107      	movs	r1, #7
 8005c1a:	4a67      	ldr	r2, [pc, #412]	; (8005db8 <main+0x374>)
 8005c1c:	2308      	movs	r3, #8
 8005c1e:	f7fa fd09 	bl	8000634 <Driver_OLED_ShowString>
            delay_ms(1000);
 8005c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c26:	f7ff fd43 	bl	80056b0 <delay_ms>
            continue;
 8005c2a:	e121      	b.n	8005e70 <main+0x42c>
        }

        // 检查是否成功
        if(packet_buffer[3] != 0x00){
 8005c2c:	4b61      	ldr	r3, [pc, #388]	; (8005db4 <main+0x370>)
 8005c2e:	78db      	ldrb	r3, [r3, #3]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00c      	beq.n	8005c4e <main+0x20a>
            Driver_OLED_ShowString(0, 7, "CONNACK failed!", 8, 0); // 显示在最后一行
 8005c34:	2300      	movs	r3, #0
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	2000      	movs	r0, #0
 8005c3a:	2107      	movs	r1, #7
 8005c3c:	4a5f      	ldr	r2, [pc, #380]	; (8005dbc <main+0x378>)
 8005c3e:	2308      	movs	r3, #8
 8005c40:	f7fa fcf8 	bl	8000634 <Driver_OLED_ShowString>
            delay_ms(1000);
 8005c44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c48:	f7ff fd32 	bl	80056b0 <delay_ms>
            continue;
 8005c4c:	e110      	b.n	8005e70 <main+0x42c>

        /**
         * MQTT 订阅Topic
         */
        /* 喂狗 */
        IWDG_ReloadCounter();
 8005c4e:	f7ff fb3f 	bl	80052d0 <IWDG_ReloadCounter>
        // >>>>> SUBSCRIBE
        mqtt_subscribe(&broker, "td_cloud/tdsast/ext_door", &msg_id);
 8005c52:	f107 0382 	add.w	r3, r7, #130	; 0x82
 8005c56:	4851      	ldr	r0, [pc, #324]	; (8005d9c <main+0x358>)
 8005c58:	4959      	ldr	r1, [pc, #356]	; (8005dc0 <main+0x37c>)
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f000 fc4e 	bl	80064fc <mqtt_subscribe>
        // <<<<< SUBACK
        packet_length = read_packet();
 8005c60:	f7ff fe94 	bl	800598c <read_packet>
 8005c64:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
        if(packet_length < 0){
 8005c68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	da0c      	bge.n	8005c8a <main+0x246>
            Driver_OLED_ShowString(0, 7, "Read SUBS pack error.", 8, 0); // 显示在最后一行
 8005c70:	2300      	movs	r3, #0
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	2000      	movs	r0, #0
 8005c76:	2107      	movs	r1, #7
 8005c78:	4a52      	ldr	r2, [pc, #328]	; (8005dc4 <main+0x380>)
 8005c7a:	2308      	movs	r3, #8
 8005c7c:	f7fa fcda 	bl	8000634 <Driver_OLED_ShowString>
            delay_ms(1000);
 8005c80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c84:	f7ff fd14 	bl	80056b0 <delay_ms>
            continue;
 8005c88:	e0f2      	b.n	8005e70 <main+0x42c>
        }
        // 检查接收数据包类型
        if(MQTTParseMessageType(packet_buffer) != MQTT_MSG_SUBACK){
 8005c8a:	4b4a      	ldr	r3, [pc, #296]	; (8005db4 <main+0x370>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c92:	2b90      	cmp	r3, #144	; 0x90
 8005c94:	d00c      	beq.n	8005cb0 <main+0x26c>
            Driver_OLED_ShowString(0, 7, "SUBACK expected!", 8, 0); // 显示在最后一行
 8005c96:	2300      	movs	r3, #0
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	2107      	movs	r1, #7
 8005c9e:	4a4a      	ldr	r2, [pc, #296]	; (8005dc8 <main+0x384>)
 8005ca0:	2308      	movs	r3, #8
 8005ca2:	f7fa fcc7 	bl	8000634 <Driver_OLED_ShowString>
            delay_ms(1000);
 8005ca6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005caa:	f7ff fd01 	bl	80056b0 <delay_ms>
            continue;
 8005cae:	e0df      	b.n	8005e70 <main+0x42c>
        }
        // 检查接收数据包id
        msg_id_rcv = mqtt_parse_msg_id(packet_buffer);
 8005cb0:	4840      	ldr	r0, [pc, #256]	; (8005db4 <main+0x370>)
 8005cb2:	f000 f941 	bl	8005f38 <mqtt_parse_msg_id>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
        if(msg_id != msg_id_rcv){
 8005cbc:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8005cc0:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d004      	beq.n	8005cd2 <main+0x28e>
            // 发送包和接收包的msg id不匹配
            delay_ms(1000);
 8005cc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ccc:	f7ff fcf0 	bl	80056b0 <delay_ms>
            continue;
 8005cd0:	e0ce      	b.n	8005e70 <main+0x42c>
        }

        // 设置socket为非阻塞模式
        tmp = SOCK_IO_NONBLOCK;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
        if(ctlsocket(SOCK_MQTT, CS_SET_IOMODE, (void *)&tmp) != SOCK_OK){
 8005cd8:	f107 039b 	add.w	r3, r7, #155	; 0x9b
 8005cdc:	2000      	movs	r0, #0
 8005cde:	2100      	movs	r1, #0
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	f7fb fb2d 	bl	8001340 <ctlsocket>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d004      	beq.n	8005cf6 <main+0x2b2>
            delay_ms(1000);
 8005cec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005cf0:	f7ff fcde 	bl	80056b0 <delay_ms>
            continue;
 8005cf4:	e0bc      	b.n	8005e70 <main+0x42c>
        }
        //__BKPT(1);
        GPIO_ResetBits(GPIOB, GPIO_Pin_9);  // 点亮灯
 8005cf6:	4835      	ldr	r0, [pc, #212]	; (8005dcc <main+0x388>)
 8005cf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cfc:	f7fe ff3e 	bl	8004b7c <GPIO_ResetBits>
        GPIO_SetBits(GPIOB, GPIO_Pin_8);  //上锁
 8005d00:	4832      	ldr	r0, [pc, #200]	; (8005dcc <main+0x388>)
 8005d02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d06:	f7fe ff2b 	bl	8004b60 <GPIO_SetBits>
        
        while(getSn_SR(SOCK_MQTT) == SOCK_ESTABLISHED){
 8005d0a:	e09f      	b.n	8005e4c <main+0x408>
            /* 喂狗 */
            IWDG_ReloadCounter();
 8005d0c:	f7ff fae0 	bl	80052d0 <IWDG_ReloadCounter>
            
            // 发送心跳包
            if(Interval_counter > 25000){
 8005d10:	4b2f      	ldr	r3, [pc, #188]	; (8005dd0 <main+0x38c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d905      	bls.n	8005d28 <main+0x2e4>
                Interval_counter = 0;
 8005d1c:	4b2c      	ldr	r3, [pc, #176]	; (8005dd0 <main+0x38c>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]
                mqtt_ping(&broker);
 8005d22:	481e      	ldr	r0, [pc, #120]	; (8005d9c <main+0x358>)
 8005d24:	f000 fbcc 	bl	80064c0 <mqtt_ping>
            }

            if(lock_on && Timer2_Counter > 3000u){ // 开锁3秒
 8005d28:	4b2a      	ldr	r3, [pc, #168]	; (8005dd4 <main+0x390>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00d      	beq.n	8005d4c <main+0x308>
 8005d30:	4b29      	ldr	r3, [pc, #164]	; (8005dd8 <main+0x394>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d907      	bls.n	8005d4c <main+0x308>
                lock_on = 0;
 8005d3c:	4b25      	ldr	r3, [pc, #148]	; (8005dd4 <main+0x390>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	701a      	strb	r2, [r3, #0]
                // 上锁
                GPIO_SetBits(GPIOB, GPIO_Pin_8);
 8005d42:	4822      	ldr	r0, [pc, #136]	; (8005dcc <main+0x388>)
 8005d44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d48:	f7fe ff0a 	bl	8004b60 <GPIO_SetBits>
            }
            // <<<<<
            packet_length = read_packet();
 8005d4c:	f7ff fe1e 	bl	800598c <read_packet>
 8005d50:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
            if(packet_length <= 0){
 8005d54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	dc3f      	bgt.n	8005ddc <main+0x398>
                continue;
 8005d5c:	e076      	b.n	8005e4c <main+0x408>
 8005d5e:	bf00      	nop
 8005d60:	08007218 	stmdaeq	r0, {r3, r4, r9, ip, sp, lr}
 8005d64:	08007228 	stmdaeq	r0, {r3, r5, r9, ip, sp, lr}
 8005d68:	20000000 	andcs	r0, r0, r0
 8005d6c:	080070f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip, sp, lr}
 8005d70:	08005629 	stmdaeq	r0, {r0, r3, r5, r9, sl, ip, lr}
 8005d74:	0800563d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, sl, ip, lr}
 8005d78:	08005681 	stmdaeq	r0, {r0, r7, r9, sl, ip, lr}
 8005d7c:	08005651 	stmdaeq	r0, {r0, r4, r6, r9, sl, ip, lr}
 8005d80:	0800710c 	stmdaeq	r0, {r2, r3, r8, ip, sp, lr}
 8005d84:	08007124 	stmdaeq	r0, {r2, r5, r8, ip, sp, lr}
 8005d88:	20000068 	andcs	r0, r0, r8, rrx
 8005d8c:	200005e0 	andcs	r0, r0, r0, ror #11
 8005d90:	0800713c 	stmdaeq	r0, {r2, r3, r4, r5, r8, ip, sp, lr}
 8005d94:	20000134 	andcs	r0, r0, r4, lsr r1
 8005d98:	08007150 	stmdaeq	r0, {r4, r6, r8, ip, sp, lr}
 8005d9c:	20000584 	andcs	r0, r0, r4, lsl #11
 8005da0:	08007160 	stmdaeq	r0, {r5, r6, r8, ip, sp, lr}
 8005da4:	08007174 	stmdaeq	r0, {r2, r4, r5, r6, r8, ip, sp, lr}
 8005da8:	0800717c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip, sp, lr}
 8005dac:	08005961 	stmdaeq	r0, {r0, r5, r6, r8, fp, ip, lr}
 8005db0:	0800718c 	stmdaeq	r0, {r2, r3, r7, r8, ip, sp, lr}
 8005db4:	20000184 	andcs	r0, r0, r4, lsl #3
 8005db8:	080071a4 	stmdaeq	r0, {r2, r5, r7, r8, ip, sp, lr}
 8005dbc:	080071b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, ip, sp, lr}
 8005dc0:	080071c8 	stmdaeq	r0, {r3, r6, r7, r8, ip, sp, lr}
 8005dc4:	080071e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, ip, sp, lr}
 8005dc8:	080071fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, ip, sp, lr}
 8005dcc:	40010c00 	andmi	r0, r1, r0, lsl #24
 8005dd0:	2000012c 	andcs	r0, r0, ip, lsr #2
 8005dd4:	20000135 	andcs	r0, r0, r5, lsr r1
 8005dd8:	20000130 	andcs	r0, r0, r0, lsr r1
            }
            
            if(MQTTParseMessageType(packet_buffer) == MQTT_MSG_PUBLISH) {
 8005ddc:	4b25      	ldr	r3, [pc, #148]	; (8005e74 <main+0x430>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005de4:	2b30      	cmp	r3, #48	; 0x30
 8005de6:	d131      	bne.n	8005e4c <main+0x408>
                uint8_t msg[128];
                //uint8_t topic[32];
                uint16_t len;
                //len = (len = mqtt_parse_pub_topic(packet_buffer, topic)) >= sizeof(topic) ? sizeof(topic) - 1 : len;
                //topic[len] = '\0';
                len = (len = mqtt_parse_publish_msg(packet_buffer, msg)) >= sizeof(msg) ? sizeof(msg) - 1 : len;
 8005de8:	463b      	mov	r3, r7
 8005dea:	4822      	ldr	r0, [pc, #136]	; (8005e74 <main+0x430>)
 8005dec:	4619      	mov	r1, r3
 8005dee:	f000 f901 	bl	8005ff4 <mqtt_parse_publish_msg>
 8005df2:	4603      	mov	r3, r0
 8005df4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8005df8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8005dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8005dfe:	d802      	bhi.n	8005e06 <main+0x3c2>
 8005e00:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8005e04:	e000      	b.n	8005e08 <main+0x3c4>
 8005e06:	237f      	movs	r3, #127	; 0x7f
 8005e08:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
                msg[len] = '\0';
 8005e0c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8005e10:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005e14:	4413      	add	r3, r2
 8005e16:	2200      	movs	r2, #0
 8005e18:	f803 2ca8 	strb.w	r2, [r3, #-168]
                //printf("%s %s\n", topic, msg);
                //Driver_OLED_ShowString(0, 7, msg, 8, 0); // 显示在最后一行
                if(!lock_on && strncmp("Lock ON", msg, 7) == 0){  //判断是不是开锁指令
 8005e1c:	4b16      	ldr	r3, [pc, #88]	; (8005e78 <main+0x434>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d113      	bne.n	8005e4c <main+0x408>
 8005e24:	463b      	mov	r3, r7
 8005e26:	4815      	ldr	r0, [pc, #84]	; (8005e7c <main+0x438>)
 8005e28:	4619      	mov	r1, r3
 8005e2a:	2207      	movs	r2, #7
 8005e2c:	f000 fcec 	bl	8006808 <strncmp>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10a      	bne.n	8005e4c <main+0x408>
                    // 开锁
                    lock_on = 1;
 8005e36:	4b10      	ldr	r3, [pc, #64]	; (8005e78 <main+0x434>)
 8005e38:	2201      	movs	r2, #1
 8005e3a:	701a      	strb	r2, [r3, #0]
                    Timer2_Counter = 0;
 8005e3c:	4b10      	ldr	r3, [pc, #64]	; (8005e80 <main+0x43c>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
                    GPIO_ResetBits(GPIOB, GPIO_Pin_8);  //开锁
 8005e42:	4810      	ldr	r0, [pc, #64]	; (8005e84 <main+0x440>)
 8005e44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e48:	f7fe fe98 	bl	8004b7c <GPIO_ResetBits>
        }
        //__BKPT(1);
        GPIO_ResetBits(GPIOB, GPIO_Pin_9);  // 点亮灯
        GPIO_SetBits(GPIOB, GPIO_Pin_8);  //上锁
        
        while(getSn_SR(SOCK_MQTT) == SOCK_ESTABLISHED){
 8005e4c:	f44f 7042 	mov.w	r0, #776	; 0x308
 8005e50:	f7fc f868 	bl	8001f24 <WIZCHIP_READ>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b17      	cmp	r3, #23
 8005e58:	f43f af58 	beq.w	8005d0c <main+0x2c8>
                    GPIO_ResetBits(GPIOB, GPIO_Pin_8);  //开锁
                }
            }
            
        }
        GPIO_SetBits(GPIOB, GPIO_Pin_9); // 熄灭灯
 8005e5c:	4809      	ldr	r0, [pc, #36]	; (8005e84 <main+0x440>)
 8005e5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e62:	f7fe fe7d 	bl	8004b60 <GPIO_SetBits>
        GPIO_ResetBits(GPIOB, GPIO_Pin_8);  //开锁
 8005e66:	4807      	ldr	r0, [pc, #28]	; (8005e84 <main+0x440>)
 8005e68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e6c:	f7fe fe86 	bl	8004b7c <GPIO_ResetBits>
    }
 8005e70:	e677      	b.n	8005b62 <main+0x11e>
 8005e72:	bf00      	nop
 8005e74:	20000184 	andcs	r0, r0, r4, lsl #3
 8005e78:	20000135 	andcs	r0, r0, r5, lsr r1
 8005e7c:	08007210 	stmdaeq	r0, {r4, r9, ip, sp, lr}
 8005e80:	20000130 	andcs	r0, r0, r0, lsr r1
 8005e84:	40010c00 	andmi	r0, r1, r0, lsl #24

08005e88 <mqtt_num_rem_len_bytes>:
#define MQTT_WILL_RETAIN    1<<5
#define MQTT_USERNAME_FLAG  1<<7
#define MQTT_PASSWORD_FLAG  1<<6


uint8_t mqtt_num_rem_len_bytes(const uint8_t* buf) {
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
	uint8_t num_bytes = 1;
 8005e90:	2301      	movs	r3, #1
 8005e92:	73fb      	strb	r3, [r7, #15]
	
	//printf("mqtt_num_rem_len_bytes\n");
	
	if ((buf[1] & 0x80) == 0x80) {
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3301      	adds	r3, #1
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	b25b      	sxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	da16      	bge.n	8005ed0 <mqtt_num_rem_len_bytes+0x48>
		num_bytes++;
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	73fb      	strb	r3, [r7, #15]
		if ((buf[2] & 0x80) == 0x80) {
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3302      	adds	r3, #2
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	b25b      	sxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	da0c      	bge.n	8005ed0 <mqtt_num_rem_len_bytes+0x48>
			num_bytes ++;
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	73fb      	strb	r3, [r7, #15]
			if ((buf[3] & 0x80) == 0x80) {
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	3303      	adds	r3, #3
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	b25b      	sxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	da02      	bge.n	8005ed0 <mqtt_num_rem_len_bytes+0x48>
				num_bytes ++;
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	73fb      	strb	r3, [r7, #15]
			}
		}
	}
	return num_bytes;
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop

08005ee0 <mqtt_parse_rem_len>:

uint16_t mqtt_parse_rem_len(const uint8_t* buf) {
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
	uint16_t multiplier = 1;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	81fb      	strh	r3, [r7, #14]
	uint16_t value = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	81bb      	strh	r3, [r7, #12]
	uint8_t digit;
	
	//printf("mqtt_parse_rem_len\n");
	
	buf++;	// skip "flags" byte in fixed header
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	607b      	str	r3, [r7, #4]

	do {
		digit = *buf;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	72fb      	strb	r3, [r7, #11]
		value += (digit & 127) * multiplier;
 8005efc:	7afb      	ldrb	r3, [r7, #11]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	89fa      	ldrh	r2, [r7, #14]
 8005f08:	fb02 f303 	mul.w	r3, r2, r3
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	89bb      	ldrh	r3, [r7, #12]
 8005f10:	4413      	add	r3, r2
 8005f12:	81bb      	strh	r3, [r7, #12]
		multiplier *= 128;
 8005f14:	89fb      	ldrh	r3, [r7, #14]
 8005f16:	01db      	lsls	r3, r3, #7
 8005f18:	81fb      	strh	r3, [r7, #14]
		buf++;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	607b      	str	r3, [r7, #4]
	} while ((digit & 128) != 0);
 8005f20:	7afb      	ldrb	r3, [r7, #11]
 8005f22:	b25b      	sxtb	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	dbe6      	blt.n	8005ef6 <mqtt_parse_rem_len+0x16>

	return value;
 8005f28:	89bb      	ldrh	r3, [r7, #12]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop

08005f38 <mqtt_parse_msg_id>:

uint16_t mqtt_parse_msg_id(const uint8_t* buf) {
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
	uint8_t type = MQTTParseMessageType(buf);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	f023 030f 	bic.w	r3, r3, #15
 8005f48:	737b      	strb	r3, [r7, #13]
	uint8_t qos = MQTTParseMessageQos(buf);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	f003 0306 	and.w	r3, r3, #6
 8005f52:	105b      	asrs	r3, r3, #1
 8005f54:	733b      	strb	r3, [r7, #12]
	uint16_t id = 0;
 8005f56:	2300      	movs	r3, #0
 8005f58:	81fb      	strh	r3, [r7, #14]
	
	//printf("mqtt_parse_msg_id\n");
	
	if(type >= MQTT_MSG_PUBLISH && type <= MQTT_MSG_UNSUBACK) {
 8005f5a:	7b7b      	ldrb	r3, [r7, #13]
 8005f5c:	2b2f      	cmp	r3, #47	; 0x2f
 8005f5e:	d944      	bls.n	8005fea <mqtt_parse_msg_id+0xb2>
 8005f60:	7b7b      	ldrb	r3, [r7, #13]
 8005f62:	2bb0      	cmp	r3, #176	; 0xb0
 8005f64:	d841      	bhi.n	8005fea <mqtt_parse_msg_id+0xb2>
		if(type == MQTT_MSG_PUBLISH) {
 8005f66:	7b7b      	ldrb	r3, [r7, #13]
 8005f68:	2b30      	cmp	r3, #48	; 0x30
 8005f6a:	d128      	bne.n	8005fbe <mqtt_parse_msg_id+0x86>
			if(qos != 0) {
 8005f6c:	7b3b      	ldrb	r3, [r7, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d03b      	beq.n	8005fea <mqtt_parse_msg_id+0xb2>
				// fixed header length + Topic (UTF encoded)
				// = 1 for "flags" byte + rlb for length bytes + topic size
				uint8_t rlb = mqtt_num_rem_len_bytes(buf);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7ff ff88 	bl	8005e88 <mqtt_num_rem_len_bytes>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	72fb      	strb	r3, [r7, #11]
				uint8_t offset = *(buf+1+rlb)<<8;	// topic UTF MSB
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	72bb      	strb	r3, [r7, #10]
				offset |= *(buf+1+rlb+1);			// topic UTF LSB
 8005f80:	7afb      	ldrb	r3, [r7, #11]
 8005f82:	3302      	adds	r3, #2
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	4413      	add	r3, r2
 8005f88:	781a      	ldrb	r2, [r3, #0]
 8005f8a:	7abb      	ldrb	r3, [r7, #10]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	72bb      	strb	r3, [r7, #10]
				offset += (1+rlb+2);					// fixed header + topic size
 8005f90:	7afa      	ldrb	r2, [r7, #11]
 8005f92:	7abb      	ldrb	r3, [r7, #10]
 8005f94:	4413      	add	r3, r2
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	3303      	adds	r3, #3
 8005f9a:	72bb      	strb	r3, [r7, #10]
				id = *(buf+offset)<<8;				// id MSB
 8005f9c:	7abb      	ldrb	r3, [r7, #10]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	021b      	lsls	r3, r3, #8
 8005fa8:	81fb      	strh	r3, [r7, #14]
				id |= *(buf+offset+1);				// id LSB
 8005faa:	7abb      	ldrb	r3, [r7, #10]
 8005fac:	3301      	adds	r3, #1
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	89fb      	ldrh	r3, [r7, #14]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	81fb      	strh	r3, [r7, #14]
 8005fbc:	e015      	b.n	8005fea <mqtt_parse_msg_id+0xb2>
			}
		} else {
			// fixed header length
			// 1 for "flags" byte + rlb for length bytes
			uint8_t rlb = mqtt_num_rem_len_bytes(buf);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7ff ff62 	bl	8005e88 <mqtt_num_rem_len_bytes>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	727b      	strb	r3, [r7, #9]
			id = *(buf+1+rlb)<<8;	// id MSB
 8005fc8:	7a7b      	ldrb	r3, [r7, #9]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	4413      	add	r3, r2
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	021b      	lsls	r3, r3, #8
 8005fd6:	81fb      	strh	r3, [r7, #14]
			id |= *(buf+1+rlb+1);	// id LSB
 8005fd8:	7a7b      	ldrb	r3, [r7, #9]
 8005fda:	3302      	adds	r3, #2
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	4413      	add	r3, r2
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	89fb      	ldrh	r3, [r7, #14]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	81fb      	strh	r3, [r7, #14]
		}
	}
	return id;
 8005fea:	89fb      	ldrh	r3, [r7, #14]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <mqtt_parse_publish_msg>:
		*topic_ptr = NULL;
	}
	return len;
}

uint16_t mqtt_parse_publish_msg(const uint8_t* buf, uint8_t* msg) {
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
	const uint8_t* ptr;
	
	//printf("mqtt_parse_publish_msg\n");
	
	uint16_t msg_len = mqtt_parse_pub_msg_ptr(buf, &ptr);
 8005ffe:	f107 0308 	add.w	r3, r7, #8
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	4619      	mov	r1, r3
 8006006:	f000 f815 	bl	8006034 <mqtt_parse_pub_msg_ptr>
 800600a:	4603      	mov	r3, r0
 800600c:	81fb      	strh	r3, [r7, #14]
	
	if(msg_len != 0 && ptr != NULL) {
 800600e:	89fb      	ldrh	r3, [r7, #14]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d009      	beq.n	8006028 <mqtt_parse_publish_msg+0x34>
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d006      	beq.n	8006028 <mqtt_parse_publish_msg+0x34>
		memcpy(msg, ptr, msg_len);
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	89fb      	ldrh	r3, [r7, #14]
 800601e:	6838      	ldr	r0, [r7, #0]
 8006020:	4611      	mov	r1, r2
 8006022:	461a      	mov	r2, r3
 8006024:	f000 fb53 	bl	80066ce <memcpy>
	}
	
	return msg_len;
 8006028:	89fb      	ldrh	r3, [r7, #14]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop

08006034 <mqtt_parse_pub_msg_ptr>:

uint16_t mqtt_parse_pub_msg_ptr(const uint8_t* buf, const uint8_t **msg_ptr) {
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
	uint16_t len = 0;
 800603e:	2300      	movs	r3, #0
 8006040:	81fb      	strh	r3, [r7, #14]
	
	//printf("mqtt_parse_pub_msg_ptr\n");
	
	if(MQTTParseMessageType(buf) == MQTT_MSG_PUBLISH) {
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800604a:	2b30      	cmp	r3, #48	; 0x30
 800604c:	d133      	bne.n	80060b6 <mqtt_parse_pub_msg_ptr+0x82>
		// message starts at
		// fixed header length + Topic (UTF encoded) + msg id (if QoS>0)
		uint8_t rlb = mqtt_num_rem_len_bytes(buf);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff ff1a 	bl	8005e88 <mqtt_num_rem_len_bytes>
 8006054:	4603      	mov	r3, r0
 8006056:	733b      	strb	r3, [r7, #12]
		uint8_t offset = (*(buf+1+rlb))<<8;	// topic UTF MSB
 8006058:	2300      	movs	r3, #0
 800605a:	737b      	strb	r3, [r7, #13]
		offset |= *(buf+1+rlb+1);			// topic UTF LSB
 800605c:	7b3b      	ldrb	r3, [r7, #12]
 800605e:	3302      	adds	r3, #2
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	4413      	add	r3, r2
 8006064:	781a      	ldrb	r2, [r3, #0]
 8006066:	7b7b      	ldrb	r3, [r7, #13]
 8006068:	4313      	orrs	r3, r2
 800606a:	737b      	strb	r3, [r7, #13]
		offset += (1+rlb+2);				// fixed header + topic size
 800606c:	7b3a      	ldrb	r2, [r7, #12]
 800606e:	7b7b      	ldrb	r3, [r7, #13]
 8006070:	4413      	add	r3, r2
 8006072:	b2db      	uxtb	r3, r3
 8006074:	3303      	adds	r3, #3
 8006076:	737b      	strb	r3, [r7, #13]

		if(MQTTParseMessageQos(buf)) {
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	f003 0306 	and.w	r3, r3, #6
 8006080:	105b      	asrs	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <mqtt_parse_pub_msg_ptr+0x58>
			offset += 2;					// add two bytes of msg id
 8006086:	7b7b      	ldrb	r3, [r7, #13]
 8006088:	3302      	adds	r3, #2
 800608a:	737b      	strb	r3, [r7, #13]
		}

		*msg_ptr = (buf + offset);
 800608c:	7b7b      	ldrb	r3, [r7, #13]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	441a      	add	r2, r3
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	601a      	str	r2, [r3, #0]
		// offset is now pointing to start of message
		// length of the message is remaining length - variable header
		// variable header is offset - fixed header
		// fixed header is 1 + rlb
		// so, lom = remlen - (offset - (1+rlb))
      	len = mqtt_parse_rem_len(buf) - (offset-(rlb+1));
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7ff ff22 	bl	8005ee0 <mqtt_parse_rem_len>
 800609c:	4603      	mov	r3, r0
 800609e:	4619      	mov	r1, r3
 80060a0:	7b3b      	ldrb	r3, [r7, #12]
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	7b7b      	ldrb	r3, [r7, #13]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	440b      	add	r3, r1
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3301      	adds	r3, #1
 80060b2:	81fb      	strh	r3, [r7, #14]
 80060b4:	e002      	b.n	80060bc <mqtt_parse_pub_msg_ptr+0x88>
	} else {
		*msg_ptr = NULL;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]
	}
	return len;
 80060bc:	89fb      	ldrh	r3, [r7, #14]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop

080060c8 <mqtt_init>:

void mqtt_init(mqtt_broker_handle_t* broker, const char* clientid) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
	// Connection options
	broker->alive = 300; // 300 seconds = 5 minutes
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80060d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	broker->seq = 1; // Sequency for message indetifiers
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	// Client options
	memset(broker->clientid, 0, sizeof(broker->clientid));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	3308      	adds	r3, #8
 80060e8:	4618      	mov	r0, r3
 80060ea:	2100      	movs	r1, #0
 80060ec:	2232      	movs	r2, #50	; 0x32
 80060ee:	f000 faf9 	bl	80066e4 <memset>
	memset(broker->username, 0, sizeof(broker->username));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	333a      	adds	r3, #58	; 0x3a
 80060f6:	4618      	mov	r0, r3
 80060f8:	2100      	movs	r1, #0
 80060fa:	220d      	movs	r2, #13
 80060fc:	f000 faf2 	bl	80066e4 <memset>
	memset(broker->password, 0, sizeof(broker->password));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3347      	adds	r3, #71	; 0x47
 8006104:	4618      	mov	r0, r3
 8006106:	2100      	movs	r1, #0
 8006108:	220d      	movs	r2, #13
 800610a:	f000 faeb 	bl	80066e4 <memset>
	if(clientid) {
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d007      	beq.n	8006124 <mqtt_init+0x5c>
		strncpy(broker->clientid, clientid, sizeof(broker->clientid));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3308      	adds	r3, #8
 8006118:	4618      	mov	r0, r3
 800611a:	6839      	ldr	r1, [r7, #0]
 800611c:	2232      	movs	r2, #50	; 0x32
 800611e:	f000 fb8c 	bl	800683a <strncpy>
 8006122:	e006      	b.n	8006132 <mqtt_init+0x6a>
	} else {
		strcpy(broker->clientid, "emqtt");
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3308      	adds	r3, #8
 8006128:	4a05      	ldr	r2, [pc, #20]	; (8006140 <mqtt_init+0x78>)
 800612a:	6810      	ldr	r0, [r2, #0]
 800612c:	6018      	str	r0, [r3, #0]
 800612e:	8892      	ldrh	r2, [r2, #4]
 8006130:	809a      	strh	r2, [r3, #4]
	}
	// Will topic
	broker->clean_session = 1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
}
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	0800722c 	stmdaeq	r0, {r2, r3, r5, r9, ip, sp, lr}

08006144 <mqtt_init_auth>:

void mqtt_init_auth(mqtt_broker_handle_t* broker, const char* username, const char* password) {
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
	if(username && username[0] != '\0')
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00a      	beq.n	800616c <mqtt_init_auth+0x28>
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d006      	beq.n	800616c <mqtt_init_auth+0x28>
		strncpy(broker->username, username, sizeof(broker->username)-1);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	333a      	adds	r3, #58	; 0x3a
 8006162:	4618      	mov	r0, r3
 8006164:	68b9      	ldr	r1, [r7, #8]
 8006166:	220c      	movs	r2, #12
 8006168:	f000 fb67 	bl	800683a <strncpy>
	if(password && password[0] != '\0')
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <mqtt_init_auth+0x44>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d006      	beq.n	8006188 <mqtt_init_auth+0x44>
		strncpy(broker->password, password, sizeof(broker->password)-1);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3347      	adds	r3, #71	; 0x47
 800617e:	4618      	mov	r0, r3
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	220c      	movs	r2, #12
 8006184:	f000 fb59 	bl	800683a <strncpy>
}
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop

08006190 <mqtt_set_alive>:

void mqtt_set_alive(mqtt_broker_handle_t* broker, uint16_t alive) {
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	460b      	mov	r3, r1
 800619a:	807b      	strh	r3, [r7, #2]
	broker->alive = alive;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	887a      	ldrh	r2, [r7, #2]
 80061a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
}
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop

080061b0 <mqtt_connect>:

int mqtt_connect(mqtt_broker_handle_t* broker)
{
 80061b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b4:	b091      	sub	sp, #68	; 0x44
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	60f8      	str	r0, [r7, #12]
 80061ba:	466b      	mov	r3, sp
 80061bc:	60bb      	str	r3, [r7, #8]
	uint8_t flags = 0x00;
 80061be:	2300      	movs	r3, #0
 80061c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	uint16_t clientidlen = strlen(broker->clientid);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3308      	adds	r3, #8
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fb15 	bl	80067f8 <strlen>
 80061ce:	4603      	mov	r3, r0
 80061d0:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t usernamelen = strlen(broker->username);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	333a      	adds	r3, #58	; 0x3a
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fb0e 	bl	80067f8 <strlen>
 80061dc:	4603      	mov	r3, r0
 80061de:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t passwordlen = strlen(broker->password);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3347      	adds	r3, #71	; 0x47
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 fb07 	bl	80067f8 <strlen>
 80061ea:	4603      	mov	r3, r0
 80061ec:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t payload_len = clientidlen + 2;
 80061ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061f0:	3302      	adds	r3, #2
 80061f2:	87bb      	strh	r3, [r7, #60]	; 0x3c

	// Preparing the flags
	if(usernamelen) {
 80061f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00b      	beq.n	8006212 <mqtt_connect+0x62>
		payload_len += usernamelen + 2;
 80061fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80061fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80061fe:	4413      	add	r3, r2
 8006200:	b29b      	uxth	r3, r3
 8006202:	3302      	adds	r3, #2
 8006204:	87bb      	strh	r3, [r7, #60]	; 0x3c
		flags |= MQTT_USERNAME_FLAG;
 8006206:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800620a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800620e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	if(passwordlen) {
 8006212:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00b      	beq.n	8006230 <mqtt_connect+0x80>
		payload_len += passwordlen + 2;
 8006218:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800621a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800621c:	4413      	add	r3, r2
 800621e:	b29b      	uxth	r3, r3
 8006220:	3302      	adds	r3, #2
 8006222:	87bb      	strh	r3, [r7, #60]	; 0x3c
		flags |= MQTT_PASSWORD_FLAG;
 8006224:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800622c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	if(broker->clean_session) {
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006236:	2b00      	cmp	r3, #0
 8006238:	d005      	beq.n	8006246 <mqtt_connect+0x96>
		flags |= MQTT_CLEAN_SESSION;
 800623a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800623e:	f043 0302 	orr.w	r3, r3, #2
 8006242:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	// Variable header
	uint8_t var_header[] = {
 8006246:	2300      	movs	r3, #0
 8006248:	753b      	strb	r3, [r7, #20]
 800624a:	2306      	movs	r3, #6
 800624c:	757b      	strb	r3, [r7, #21]
 800624e:	234d      	movs	r3, #77	; 0x4d
 8006250:	75bb      	strb	r3, [r7, #22]
 8006252:	2351      	movs	r3, #81	; 0x51
 8006254:	75fb      	strb	r3, [r7, #23]
 8006256:	2349      	movs	r3, #73	; 0x49
 8006258:	763b      	strb	r3, [r7, #24]
 800625a:	2373      	movs	r3, #115	; 0x73
 800625c:	767b      	strb	r3, [r7, #25]
 800625e:	2364      	movs	r3, #100	; 0x64
 8006260:	76bb      	strb	r3, [r7, #26]
 8006262:	2370      	movs	r3, #112	; 0x70
 8006264:	76fb      	strb	r3, [r7, #27]
 8006266:	2303      	movs	r3, #3
 8006268:	773b      	strb	r3, [r7, #28]
 800626a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800626e:	777b      	strb	r3, [r7, #29]
		0x00,0x06,0x4d,0x51,0x49,0x73,0x64,0x70, // Protocol name: MQIsdp
		0x03, // Protocol version
		flags, // Connect flags
		broker->alive>>8, broker->alive&0xFF, // Keep alive
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
	if(broker->clean_session) {
		flags |= MQTT_CLEAN_SESSION;
	}

	// Variable header
	uint8_t var_header[] = {
 8006276:	0a1b      	lsrs	r3, r3, #8
 8006278:	b29b      	uxth	r3, r3
 800627a:	b2db      	uxtb	r3, r3
 800627c:	77bb      	strb	r3, [r7, #30]
		0x00,0x06,0x4d,0x51,0x49,0x73,0x64,0x70, // Protocol name: MQIsdp
		0x03, // Protocol version
		flags, // Connect flags
		broker->alive>>8, broker->alive&0xFF, // Keep alive
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
	if(broker->clean_session) {
		flags |= MQTT_CLEAN_SESSION;
	}

	// Variable header
	uint8_t var_header[] = {
 8006284:	b2db      	uxtb	r3, r3
 8006286:	77fb      	strb	r3, [r7, #31]
		broker->alive>>8, broker->alive&0xFF, // Keep alive
	};


   	// Fixed header
    uint8_t fixedHeaderSize = 2;    // Default size = one byte Message Type + one byte Remaining Length
 8006288:	2302      	movs	r3, #2
 800628a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    uint8_t remainLen = sizeof(var_header)+payload_len;
 800628e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006290:	b2db      	uxtb	r3, r3
 8006292:	330c      	adds	r3, #12
 8006294:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    if (remainLen > 127) {
 8006298:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800629c:	b25b      	sxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	da04      	bge.n	80062ac <mqtt_connect+0xfc>
        fixedHeaderSize++;          // add an additional byte for Remaining Length
 80062a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80062a6:	3301      	adds	r3, #1
 80062a8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    }
    uint8_t fixed_header[fixedHeaderSize];
 80062ac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80062b0:	4618      	mov	r0, r3
 80062b2:	4603      	mov	r3, r0
 80062b4:	3b01      	subs	r3, #1
 80062b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062b8:	b2c2      	uxtb	r2, r0
 80062ba:	f04f 0300 	mov.w	r3, #0
 80062be:	00d9      	lsls	r1, r3, #3
 80062c0:	6079      	str	r1, [r7, #4]
 80062c2:	6879      	ldr	r1, [r7, #4]
 80062c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062c8:	6079      	str	r1, [r7, #4]
 80062ca:	00d2      	lsls	r2, r2, #3
 80062cc:	603a      	str	r2, [r7, #0]
 80062ce:	b2c2      	uxtb	r2, r0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 80062d8:	ea4b 7b52 	orr.w	fp, fp, r2, lsr #29
 80062dc:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 80062e0:	4603      	mov	r3, r0
 80062e2:	3307      	adds	r3, #7
 80062e4:	08db      	lsrs	r3, r3, #3
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	ebad 0d03 	sub.w	sp, sp, r3
 80062ec:	466b      	mov	r3, sp
 80062ee:	3300      	adds	r3, #0
 80062f0:	62bb      	str	r3, [r7, #40]	; 0x28
    
    // Message Type
    fixed_header[0] = MQTT_MSG_CONNECT;
 80062f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f4:	2210      	movs	r2, #16
 80062f6:	701a      	strb	r2, [r3, #0]

    // Remaining Length
    if (remainLen <= 127) {
 80062f8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80062fc:	b25b      	sxtb	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	db04      	blt.n	800630c <mqtt_connect+0x15c>
        fixed_header[1] = remainLen;
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8006308:	705a      	strb	r2, [r3, #1]
 800630a:	e013      	b.n	8006334 <mqtt_connect+0x184>
    } else {
        // first byte is remainder (mod) of 128, then set the MSB to indicate more bytes
        fixed_header[1] = remainLen % 128;
 800630c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006314:	b2da      	uxtb	r2, r3
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	705a      	strb	r2, [r3, #1]
        fixed_header[1] = fixed_header[1] | 0x80;
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	785b      	ldrb	r3, [r3, #1]
 800631e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006322:	b2da      	uxtb	r2, r3
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	705a      	strb	r2, [r3, #1]
        // second byte is number of 128s
        fixed_header[2] = remainLen / 128;
 8006328:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800632c:	09db      	lsrs	r3, r3, #7
 800632e:	b2da      	uxtb	r2, r3
 8006330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006332:	709a      	strb	r2, [r3, #2]
    }

	uint16_t offset = 0;
 8006334:	2300      	movs	r3, #0
 8006336:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+payload_len];
 8006338:	4682      	mov	sl, r0
 800633a:	4652      	mov	r2, sl
 800633c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800633e:	4413      	add	r3, r2
 8006340:	f103 060c 	add.w	r6, r3, #12
 8006344:	4633      	mov	r3, r6
 8006346:	3b01      	subs	r3, #1
 8006348:	627b      	str	r3, [r7, #36]	; 0x24
 800634a:	4632      	mov	r2, r6
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8006354:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8006358:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800635c:	4632      	mov	r2, r6
 800635e:	f04f 0300 	mov.w	r3, #0
 8006362:	00dd      	lsls	r5, r3, #3
 8006364:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006368:	00d4      	lsls	r4, r2, #3
 800636a:	1df3      	adds	r3, r6, #7
 800636c:	08db      	lsrs	r3, r3, #3
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	ebad 0d03 	sub.w	sp, sp, r3
 8006374:	466b      	mov	r3, sp
 8006376:	3300      	adds	r3, #0
 8006378:	623b      	str	r3, [r7, #32]
	memset(packet, 0, sizeof(packet));
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	4618      	mov	r0, r3
 800637e:	2100      	movs	r1, #0
 8006380:	4632      	mov	r2, r6
 8006382:	f000 f9af 	bl	80066e4 <memset>
	memcpy(packet, fixed_header, sizeof(fixed_header));
 8006386:	6a3a      	ldr	r2, [r7, #32]
 8006388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638a:	4654      	mov	r4, sl
 800638c:	4610      	mov	r0, r2
 800638e:	4619      	mov	r1, r3
 8006390:	4622      	mov	r2, r4
 8006392:	f000 f99c 	bl	80066ce <memcpy>
	offset += sizeof(fixed_header);
 8006396:	fa1f f28a 	uxth.w	r2, sl
 800639a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800639c:	4413      	add	r3, r2
 800639e:	873b      	strh	r3, [r7, #56]	; 0x38
	memcpy(packet+offset, var_header, sizeof(var_header));
 80063a0:	6a3a      	ldr	r2, [r7, #32]
 80063a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80063a4:	4413      	add	r3, r2
 80063a6:	461c      	mov	r4, r3
 80063a8:	f107 0314 	add.w	r3, r7, #20
 80063ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80063ae:	6020      	str	r0, [r4, #0]
 80063b0:	6061      	str	r1, [r4, #4]
 80063b2:	60a2      	str	r2, [r4, #8]
	offset += sizeof(var_header);
 80063b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80063b6:	330c      	adds	r3, #12
 80063b8:	873b      	strh	r3, [r7, #56]	; 0x38
	// Client ID - UTF encoded
	packet[offset++] = clientidlen>>8;
 80063ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80063bc:	1c5a      	adds	r2, r3, #1
 80063be:	873a      	strh	r2, [r7, #56]	; 0x38
 80063c0:	461a      	mov	r2, r3
 80063c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80063c4:	0a1b      	lsrs	r3, r3, #8
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	b2d9      	uxtb	r1, r3
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	5499      	strb	r1, [r3, r2]
	packet[offset++] = clientidlen&0xFF;
 80063ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	873a      	strh	r2, [r7, #56]	; 0x38
 80063d4:	461a      	mov	r2, r3
 80063d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80063d8:	b2d9      	uxtb	r1, r3
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	5499      	strb	r1, [r3, r2]
	memcpy(packet+offset, broker->clientid, clientidlen);
 80063de:	6a3a      	ldr	r2, [r7, #32]
 80063e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80063e2:	18d1      	adds	r1, r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f103 0208 	add.w	r2, r3, #8
 80063ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80063ec:	4608      	mov	r0, r1
 80063ee:	4611      	mov	r1, r2
 80063f0:	461a      	mov	r2, r3
 80063f2:	f000 f96c 	bl	80066ce <memcpy>
	offset += clientidlen;
 80063f6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80063f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80063fa:	4413      	add	r3, r2
 80063fc:	873b      	strh	r3, [r7, #56]	; 0x38

	if(usernamelen) {
 80063fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006400:	2b00      	cmp	r3, #0
 8006402:	d021      	beq.n	8006448 <mqtt_connect+0x298>
		// Username - UTF encoded
		packet[offset++] = usernamelen>>8;
 8006404:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	873a      	strh	r2, [r7, #56]	; 0x38
 800640a:	461a      	mov	r2, r3
 800640c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800640e:	0a1b      	lsrs	r3, r3, #8
 8006410:	b29b      	uxth	r3, r3
 8006412:	b2d9      	uxtb	r1, r3
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	5499      	strb	r1, [r3, r2]
		packet[offset++] = usernamelen&0xFF;
 8006418:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	873a      	strh	r2, [r7, #56]	; 0x38
 800641e:	461a      	mov	r2, r3
 8006420:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006422:	b2d9      	uxtb	r1, r3
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	5499      	strb	r1, [r3, r2]
		memcpy(packet+offset, broker->username, usernamelen);
 8006428:	6a3a      	ldr	r2, [r7, #32]
 800642a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800642c:	18d1      	adds	r1, r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f103 023a 	add.w	r2, r3, #58	; 0x3a
 8006434:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006436:	4608      	mov	r0, r1
 8006438:	4611      	mov	r1, r2
 800643a:	461a      	mov	r2, r3
 800643c:	f000 f947 	bl	80066ce <memcpy>
		offset += usernamelen;
 8006440:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8006442:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006444:	4413      	add	r3, r2
 8006446:	873b      	strh	r3, [r7, #56]	; 0x38
	}

	if(passwordlen) {
 8006448:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800644a:	2b00      	cmp	r3, #0
 800644c:	d021      	beq.n	8006492 <mqtt_connect+0x2e2>
		// Password - UTF encoded
		packet[offset++] = passwordlen>>8;
 800644e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	873a      	strh	r2, [r7, #56]	; 0x38
 8006454:	461a      	mov	r2, r3
 8006456:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006458:	0a1b      	lsrs	r3, r3, #8
 800645a:	b29b      	uxth	r3, r3
 800645c:	b2d9      	uxtb	r1, r3
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	5499      	strb	r1, [r3, r2]
		packet[offset++] = passwordlen&0xFF;
 8006462:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	873a      	strh	r2, [r7, #56]	; 0x38
 8006468:	461a      	mov	r2, r3
 800646a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800646c:	b2d9      	uxtb	r1, r3
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	5499      	strb	r1, [r3, r2]
		memcpy(packet+offset, broker->password, passwordlen);
 8006472:	6a3a      	ldr	r2, [r7, #32]
 8006474:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006476:	18d1      	adds	r1, r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f103 0247 	add.w	r2, r3, #71	; 0x47
 800647e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006480:	4608      	mov	r0, r1
 8006482:	4611      	mov	r1, r2
 8006484:	461a      	mov	r2, r3
 8006486:	f000 f922 	bl	80066ce <memcpy>
		offset += passwordlen;
 800648a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800648c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800648e:	4413      	add	r3, r2
 8006490:	873b      	strh	r3, [r7, #56]	; 0x38
	}

	// Send the packet
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	6811      	ldr	r1, [r2, #0]
 800649a:	6a3a      	ldr	r2, [r7, #32]
 800649c:	4608      	mov	r0, r1
 800649e:	4611      	mov	r1, r2
 80064a0:	4632      	mov	r2, r6
 80064a2:	4798      	blx	r3
 80064a4:	4603      	mov	r3, r0
 80064a6:	42b3      	cmp	r3, r6
 80064a8:	d202      	bcs.n	80064b0 <mqtt_connect+0x300>
		return -1;
 80064aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064ae:	e000      	b.n	80064b2 <mqtt_connect+0x302>
	}

	return 1;
 80064b0:	2301      	movs	r3, #1
 80064b2:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3744      	adds	r7, #68	; 0x44
 80064ba:	46bd      	mov	sp, r7
 80064bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080064c0 <mqtt_ping>:
	}

	return 1;
}

int mqtt_ping(mqtt_broker_handle_t* broker) {
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
	uint8_t packet[] = {
 80064c8:	23c0      	movs	r3, #192	; 0xc0
 80064ca:	733b      	strb	r3, [r7, #12]
 80064cc:	2300      	movs	r3, #0
 80064ce:	737b      	strb	r3, [r7, #13]
		MQTT_MSG_PINGREQ, // Message Type, DUP flag, QoS level, Retain
		0x00 // Remaining length
	};

	// Send the packet
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	6811      	ldr	r1, [r2, #0]
 80064d8:	f107 020c 	add.w	r2, r7, #12
 80064dc:	4608      	mov	r0, r1
 80064de:	4611      	mov	r1, r2
 80064e0:	2202      	movs	r2, #2
 80064e2:	4798      	blx	r3
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d802      	bhi.n	80064f0 <mqtt_ping+0x30>
		return -1;
 80064ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064ee:	e000      	b.n	80064f2 <mqtt_ping+0x32>
	}

	return 1;
 80064f0:	2301      	movs	r3, #1
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop

080064fc <mqtt_subscribe>:
	}

	return 1;
}

int mqtt_subscribe(mqtt_broker_handle_t* broker, const char* topic, uint16_t* message_id) {
 80064fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006500:	b08f      	sub	sp, #60	; 0x3c
 8006502:	af00      	add	r7, sp, #0
 8006504:	6178      	str	r0, [r7, #20]
 8006506:	6139      	str	r1, [r7, #16]
 8006508:	60fa      	str	r2, [r7, #12]
 800650a:	466b      	mov	r3, sp
 800650c:	60bb      	str	r3, [r7, #8]
	uint16_t topiclen = strlen(topic);
 800650e:	6938      	ldr	r0, [r7, #16]
 8006510:	f000 f972 	bl	80067f8 <strlen>
 8006514:	4603      	mov	r3, r0
 8006516:	86fb      	strh	r3, [r7, #54]	; 0x36

	// Variable header
	uint8_t var_header[2]; // Message ID
	var_header[0] = broker->seq>>8;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800651e:	0a1b      	lsrs	r3, r3, #8
 8006520:	b29b      	uxth	r3, r3
 8006522:	b2db      	uxtb	r3, r3
 8006524:	f887 3020 	strb.w	r3, [r7, #32]
	var_header[1] = broker->seq&0xFF;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800652e:	b2db      	uxtb	r3, r3
 8006530:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(message_id) { // Returning message id
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d004      	beq.n	8006544 <mqtt_subscribe+0x48>
		*message_id = broker->seq;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	801a      	strh	r2, [r3, #0]
	}
	broker->seq++;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800654a:	3301      	adds	r3, #1
 800654c:	b29a      	uxth	r2, r3
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	// utf topic
	uint8_t utf_topic[topiclen+3]; // Topic size (2 bytes), utf-encoded topic, QoS byte
 8006554:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006556:	1cde      	adds	r6, r3, #3
 8006558:	1e73      	subs	r3, r6, #1
 800655a:	633b      	str	r3, [r7, #48]	; 0x30
 800655c:	4633      	mov	r3, r6
 800655e:	461a      	mov	r2, r3
 8006560:	f04f 0300 	mov.w	r3, #0
 8006564:	00d9      	lsls	r1, r3, #3
 8006566:	6079      	str	r1, [r7, #4]
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800656e:	6079      	str	r1, [r7, #4]
 8006570:	00d3      	lsls	r3, r2, #3
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	4633      	mov	r3, r6
 8006576:	461a      	mov	r2, r3
 8006578:	f04f 0300 	mov.w	r3, #0
 800657c:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 8006580:	ea4b 7b52 	orr.w	fp, fp, r2, lsr #29
 8006584:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 8006588:	4633      	mov	r3, r6
 800658a:	3307      	adds	r3, #7
 800658c:	08db      	lsrs	r3, r3, #3
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	ebad 0d03 	sub.w	sp, sp, r3
 8006594:	466b      	mov	r3, sp
 8006596:	3300      	adds	r3, #0
 8006598:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(utf_topic, 0, sizeof(utf_topic));
 800659a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659c:	4632      	mov	r2, r6
 800659e:	4618      	mov	r0, r3
 80065a0:	2100      	movs	r1, #0
 80065a2:	f000 f89f 	bl	80066e4 <memset>
	utf_topic[0] = topiclen>>8;
 80065a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80065a8:	0a1b      	lsrs	r3, r3, #8
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b0:	701a      	strb	r2, [r3, #0]
	utf_topic[1] = topiclen&0xFF;
 80065b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b8:	705a      	strb	r2, [r3, #1]
	memcpy(utf_topic+2, topic, topiclen);
 80065ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065bc:	1c9a      	adds	r2, r3, #2
 80065be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80065c0:	4610      	mov	r0, r2
 80065c2:	6939      	ldr	r1, [r7, #16]
 80065c4:	461a      	mov	r2, r3
 80065c6:	f000 f882 	bl	80066ce <memcpy>

	// Fixed header
	uint8_t fixed_header[] = {
 80065ca:	2382      	movs	r3, #130	; 0x82
 80065cc:	773b      	strb	r3, [r7, #28]
 80065ce:	b2f3      	uxtb	r3, r6
 80065d0:	3302      	adds	r3, #2
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	777b      	strb	r3, [r7, #29]
		MQTT_MSG_SUBSCRIBE | MQTT_QOS1_FLAG, // Message Type, DUP flag, QoS level, Retain
		sizeof(var_header)+sizeof(utf_topic)
	};

	uint8_t packet[sizeof(var_header)+sizeof(fixed_header)+sizeof(utf_topic)];
 80065d6:	4633      	mov	r3, r6
 80065d8:	3303      	adds	r3, #3
 80065da:	62bb      	str	r3, [r7, #40]	; 0x28
 80065dc:	4633      	mov	r3, r6
 80065de:	3304      	adds	r3, #4
 80065e0:	461a      	mov	r2, r3
 80065e2:	f04f 0300 	mov.w	r3, #0
 80065e6:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 80065ea:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 80065ee:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 80065f2:	4633      	mov	r3, r6
 80065f4:	3304      	adds	r3, #4
 80065f6:	461a      	mov	r2, r3
 80065f8:	f04f 0300 	mov.w	r3, #0
 80065fc:	00dd      	lsls	r5, r3, #3
 80065fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006602:	00d4      	lsls	r4, r2, #3
 8006604:	4633      	mov	r3, r6
 8006606:	3304      	adds	r3, #4
 8006608:	3307      	adds	r3, #7
 800660a:	08db      	lsrs	r3, r3, #3
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	ebad 0d03 	sub.w	sp, sp, r3
 8006612:	466b      	mov	r3, sp
 8006614:	3300      	adds	r3, #0
 8006616:	627b      	str	r3, [r7, #36]	; 0x24
	memset(packet, 0, sizeof(packet));
 8006618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800661a:	4633      	mov	r3, r6
 800661c:	3304      	adds	r3, #4
 800661e:	4610      	mov	r0, r2
 8006620:	2100      	movs	r1, #0
 8006622:	461a      	mov	r2, r3
 8006624:	f000 f85e 	bl	80066e4 <memset>
	memcpy(packet, fixed_header, sizeof(fixed_header));
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	461a      	mov	r2, r3
 800662c:	f107 031c 	add.w	r3, r7, #28
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	8013      	strh	r3, [r2, #0]
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	3302      	adds	r3, #2
 8006638:	461a      	mov	r2, r3
 800663a:	f107 0320 	add.w	r3, r7, #32
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	8013      	strh	r3, [r2, #0]
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), utf_topic, sizeof(utf_topic));
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	1d1a      	adds	r2, r3, #4
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	4634      	mov	r4, r6
 800664a:	4610      	mov	r0, r2
 800664c:	4619      	mov	r1, r3
 800664e:	4622      	mov	r2, r4
 8006650:	f000 f83d 	bl	80066ce <memcpy>

	// Send the packet
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	6810      	ldr	r0, [r2, #0]
 800665c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800665e:	4632      	mov	r2, r6
 8006660:	3204      	adds	r2, #4
 8006662:	4798      	blx	r3
 8006664:	4603      	mov	r3, r0
 8006666:	461a      	mov	r2, r3
 8006668:	4633      	mov	r3, r6
 800666a:	3304      	adds	r3, #4
 800666c:	429a      	cmp	r2, r3
 800666e:	d202      	bcs.n	8006676 <mqtt_subscribe+0x17a>
		return -1;
 8006670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006674:	e000      	b.n	8006678 <mqtt_subscribe+0x17c>
	}

	return 1;
 8006676:	2301      	movs	r3, #1
 8006678:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 800667c:	4618      	mov	r0, r3
 800667e:	373c      	adds	r7, #60	; 0x3c
 8006680:	46bd      	mov	sp, r7
 8006682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006686:	bf00      	nop

08006688 <Reset_Handler>:
 8006688:	2100      	movs	r1, #0
 800668a:	e003      	b.n	8006694 <LoopCopyDataInit>

0800668c <CopyDataInit>:
 800668c:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <LoopFillZerobss+0x10>)
 800668e:	585b      	ldr	r3, [r3, r1]
 8006690:	5043      	str	r3, [r0, r1]
 8006692:	3104      	adds	r1, #4

08006694 <LoopCopyDataInit>:
 8006694:	4809      	ldr	r0, [pc, #36]	; (80066bc <LoopFillZerobss+0x14>)
 8006696:	4b0a      	ldr	r3, [pc, #40]	; (80066c0 <LoopFillZerobss+0x18>)
 8006698:	1842      	adds	r2, r0, r1
 800669a:	429a      	cmp	r2, r3
 800669c:	d3f6      	bcc.n	800668c <CopyDataInit>
 800669e:	4a09      	ldr	r2, [pc, #36]	; (80066c4 <LoopFillZerobss+0x1c>)
 80066a0:	e002      	b.n	80066a8 <LoopFillZerobss>

080066a2 <FillZerobss>:
 80066a2:	2300      	movs	r3, #0
 80066a4:	f842 3b04 	str.w	r3, [r2], #4

080066a8 <LoopFillZerobss>:
 80066a8:	4b07      	ldr	r3, [pc, #28]	; (80066c8 <LoopFillZerobss+0x20>)
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d3f9      	bcc.n	80066a2 <FillZerobss>
 80066ae:	f7f9 fd2d 	bl	800010c <SystemInit>
 80066b2:	f7ff f9c7 	bl	8005a44 <main>
 80066b6:	4770      	bx	lr
 80066b8:	08007a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp, ip, sp, lr}
 80066bc:	20000000 	andcs	r0, r0, r0
 80066c0:	200000e8 	andcs	r0, r0, r8, ror #1
 80066c4:	200000e8 	andcs	r0, r0, r8, ror #1
 80066c8:	20000de4 	andcs	r0, r0, r4, ror #27

080066cc <ADC1_2_IRQHandler>:
 80066cc:	e7fe      	b.n	80066cc <ADC1_2_IRQHandler>

080066ce <memcpy>:
 80066ce:	b510      	push	{r4, lr}
 80066d0:	1e43      	subs	r3, r0, #1
 80066d2:	440a      	add	r2, r1
 80066d4:	4291      	cmp	r1, r2
 80066d6:	d004      	beq.n	80066e2 <memcpy+0x14>
 80066d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066e0:	e7f8      	b.n	80066d4 <memcpy+0x6>
 80066e2:	bd10      	pop	{r4, pc}

080066e4 <memset>:
 80066e4:	4603      	mov	r3, r0
 80066e6:	4402      	add	r2, r0
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d002      	beq.n	80066f2 <memset+0xe>
 80066ec:	f803 1b01 	strb.w	r1, [r3], #1
 80066f0:	e7fa      	b.n	80066e8 <memset+0x4>
 80066f2:	4770      	bx	lr

080066f4 <rand>:
 80066f4:	4b19      	ldr	r3, [pc, #100]	; (800675c <rand+0x68>)
 80066f6:	b510      	push	{r4, lr}
 80066f8:	681c      	ldr	r4, [r3, #0]
 80066fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066fc:	b9d3      	cbnz	r3, 8006734 <rand+0x40>
 80066fe:	2018      	movs	r0, #24
 8006700:	f000 f8ae 	bl	8006860 <malloc>
 8006704:	f243 330e 	movw	r3, #13070	; 0x330e
 8006708:	63a0      	str	r0, [r4, #56]	; 0x38
 800670a:	8003      	strh	r3, [r0, #0]
 800670c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8006710:	8043      	strh	r3, [r0, #2]
 8006712:	f241 2334 	movw	r3, #4660	; 0x1234
 8006716:	8083      	strh	r3, [r0, #4]
 8006718:	f24e 636d 	movw	r3, #58989	; 0xe66d
 800671c:	80c3      	strh	r3, [r0, #6]
 800671e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8006722:	8103      	strh	r3, [r0, #8]
 8006724:	2305      	movs	r3, #5
 8006726:	8143      	strh	r3, [r0, #10]
 8006728:	230b      	movs	r3, #11
 800672a:	8183      	strh	r3, [r0, #12]
 800672c:	2201      	movs	r2, #1
 800672e:	2300      	movs	r3, #0
 8006730:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006734:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006736:	4c0a      	ldr	r4, [pc, #40]	; (8006760 <rand+0x6c>)
 8006738:	690b      	ldr	r3, [r1, #16]
 800673a:	6948      	ldr	r0, [r1, #20]
 800673c:	435c      	muls	r4, r3
 800673e:	4a09      	ldr	r2, [pc, #36]	; (8006764 <rand+0x70>)
 8006740:	fb02 4000 	mla	r0, r2, r0, r4
 8006744:	fba3 2302 	umull	r2, r3, r3, r2
 8006748:	3201      	adds	r2, #1
 800674a:	4403      	add	r3, r0
 800674c:	f143 0300 	adc.w	r3, r3, #0
 8006750:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8006754:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8006758:	bd10      	pop	{r4, pc}
 800675a:	bf00      	nop
 800675c:	200000e4 	andcs	r0, r0, r4, ror #1
 8006760:	5851f42d 	ldmdapl	r1, {r0, r2, r3, r5, sl, ip, sp, lr, pc}^
 8006764:	4c957f2d 	ldcmi	15, cr7, [r5], {45}	; 0x2d

08006768 <sniprintf>:
 8006768:	b40c      	push	{r2, r3}
 800676a:	b530      	push	{r4, r5, lr}
 800676c:	4b16      	ldr	r3, [pc, #88]	; (80067c8 <sniprintf+0x60>)
 800676e:	1e0c      	subs	r4, r1, #0
 8006770:	b09d      	sub	sp, #116	; 0x74
 8006772:	681d      	ldr	r5, [r3, #0]
 8006774:	da04      	bge.n	8006780 <sniprintf+0x18>
 8006776:	238b      	movs	r3, #139	; 0x8b
 8006778:	602b      	str	r3, [r5, #0]
 800677a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800677e:	e01e      	b.n	80067be <sniprintf+0x56>
 8006780:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006784:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006788:	bf0c      	ite	eq
 800678a:	4623      	moveq	r3, r4
 800678c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006790:	9304      	str	r3, [sp, #16]
 8006792:	9307      	str	r3, [sp, #28]
 8006794:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006798:	9002      	str	r0, [sp, #8]
 800679a:	9006      	str	r0, [sp, #24]
 800679c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80067a0:	4628      	mov	r0, r5
 80067a2:	ab21      	add	r3, sp, #132	; 0x84
 80067a4:	a902      	add	r1, sp, #8
 80067a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80067a8:	9301      	str	r3, [sp, #4]
 80067aa:	f000 f955 	bl	8006a58 <_svfiprintf_r>
 80067ae:	1c43      	adds	r3, r0, #1
 80067b0:	bfbc      	itt	lt
 80067b2:	238b      	movlt	r3, #139	; 0x8b
 80067b4:	602b      	strlt	r3, [r5, #0]
 80067b6:	b114      	cbz	r4, 80067be <sniprintf+0x56>
 80067b8:	9b02      	ldr	r3, [sp, #8]
 80067ba:	2200      	movs	r2, #0
 80067bc:	701a      	strb	r2, [r3, #0]
 80067be:	b01d      	add	sp, #116	; 0x74
 80067c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067c4:	b002      	add	sp, #8
 80067c6:	4770      	bx	lr
 80067c8:	200000e4 	andcs	r0, r0, r4, ror #1

080067cc <strchr>:
 80067cc:	b2c9      	uxtb	r1, r1
 80067ce:	4603      	mov	r3, r0
 80067d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067d4:	b11a      	cbz	r2, 80067de <strchr+0x12>
 80067d6:	428a      	cmp	r2, r1
 80067d8:	d1f9      	bne.n	80067ce <strchr+0x2>
 80067da:	4618      	mov	r0, r3
 80067dc:	4770      	bx	lr
 80067de:	2900      	cmp	r1, #0
 80067e0:	bf0c      	ite	eq
 80067e2:	4618      	moveq	r0, r3
 80067e4:	2000      	movne	r0, #0
 80067e6:	4770      	bx	lr

080067e8 <strcpy>:
 80067e8:	4603      	mov	r3, r0
 80067ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067ee:	f803 2b01 	strb.w	r2, [r3], #1
 80067f2:	2a00      	cmp	r2, #0
 80067f4:	d1f9      	bne.n	80067ea <strcpy+0x2>
 80067f6:	4770      	bx	lr

080067f8 <strlen>:
 80067f8:	4603      	mov	r3, r0
 80067fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067fe:	2a00      	cmp	r2, #0
 8006800:	d1fb      	bne.n	80067fa <strlen+0x2>
 8006802:	1a18      	subs	r0, r3, r0
 8006804:	3801      	subs	r0, #1
 8006806:	4770      	bx	lr

08006808 <strncmp>:
 8006808:	b570      	push	{r4, r5, r6, lr}
 800680a:	b1a2      	cbz	r2, 8006836 <strncmp+0x2e>
 800680c:	1e45      	subs	r5, r0, #1
 800680e:	3901      	subs	r1, #1
 8006810:	786b      	ldrb	r3, [r5, #1]
 8006812:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006816:	1c6e      	adds	r6, r5, #1
 8006818:	42a3      	cmp	r3, r4
 800681a:	d106      	bne.n	800682a <strncmp+0x22>
 800681c:	f06f 0401 	mvn.w	r4, #1
 8006820:	1b64      	subs	r4, r4, r5
 8006822:	4414      	add	r4, r2
 8006824:	42e0      	cmn	r0, r4
 8006826:	d102      	bne.n	800682e <strncmp+0x26>
 8006828:	461c      	mov	r4, r3
 800682a:	1b18      	subs	r0, r3, r4
 800682c:	bd70      	pop	{r4, r5, r6, pc}
 800682e:	4635      	mov	r5, r6
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1ed      	bne.n	8006810 <strncmp+0x8>
 8006834:	e7f8      	b.n	8006828 <strncmp+0x20>
 8006836:	4610      	mov	r0, r2
 8006838:	bd70      	pop	{r4, r5, r6, pc}

0800683a <strncpy>:
 800683a:	4603      	mov	r3, r0
 800683c:	b510      	push	{r4, lr}
 800683e:	b132      	cbz	r2, 800684e <strncpy+0x14>
 8006840:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006844:	3a01      	subs	r2, #1
 8006846:	f803 4b01 	strb.w	r4, [r3], #1
 800684a:	2c00      	cmp	r4, #0
 800684c:	d1f7      	bne.n	800683e <strncpy+0x4>
 800684e:	441a      	add	r2, r3
 8006850:	4293      	cmp	r3, r2
 8006852:	d003      	beq.n	800685c <strncpy+0x22>
 8006854:	2100      	movs	r1, #0
 8006856:	f803 1b01 	strb.w	r1, [r3], #1
 800685a:	e7f9      	b.n	8006850 <strncpy+0x16>
 800685c:	bd10      	pop	{r4, pc}
	...

08006860 <malloc>:
 8006860:	4b02      	ldr	r3, [pc, #8]	; (800686c <malloc+0xc>)
 8006862:	4601      	mov	r1, r0
 8006864:	6818      	ldr	r0, [r3, #0]
 8006866:	f000 b847 	b.w	80068f8 <_malloc_r>
 800686a:	bf00      	nop
 800686c:	200000e4 	andcs	r0, r0, r4, ror #1

08006870 <_free_r>:
 8006870:	b530      	push	{r4, r5, lr}
 8006872:	2900      	cmp	r1, #0
 8006874:	d03c      	beq.n	80068f0 <_free_r+0x80>
 8006876:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800687a:	1f0b      	subs	r3, r1, #4
 800687c:	491d      	ldr	r1, [pc, #116]	; (80068f4 <_free_r+0x84>)
 800687e:	2a00      	cmp	r2, #0
 8006880:	bfb8      	it	lt
 8006882:	189b      	addlt	r3, r3, r2
 8006884:	680a      	ldr	r2, [r1, #0]
 8006886:	460c      	mov	r4, r1
 8006888:	b912      	cbnz	r2, 8006890 <_free_r+0x20>
 800688a:	605a      	str	r2, [r3, #4]
 800688c:	600b      	str	r3, [r1, #0]
 800688e:	bd30      	pop	{r4, r5, pc}
 8006890:	4293      	cmp	r3, r2
 8006892:	d20d      	bcs.n	80068b0 <_free_r+0x40>
 8006894:	6819      	ldr	r1, [r3, #0]
 8006896:	1858      	adds	r0, r3, r1
 8006898:	4290      	cmp	r0, r2
 800689a:	bf01      	itttt	eq
 800689c:	585a      	ldreq	r2, [r3, r1]
 800689e:	1852      	addeq	r2, r2, r1
 80068a0:	601a      	streq	r2, [r3, #0]
 80068a2:	6842      	ldreq	r2, [r0, #4]
 80068a4:	6023      	str	r3, [r4, #0]
 80068a6:	605a      	str	r2, [r3, #4]
 80068a8:	bd30      	pop	{r4, r5, pc}
 80068aa:	4299      	cmp	r1, r3
 80068ac:	d803      	bhi.n	80068b6 <_free_r+0x46>
 80068ae:	460a      	mov	r2, r1
 80068b0:	6851      	ldr	r1, [r2, #4]
 80068b2:	2900      	cmp	r1, #0
 80068b4:	d1f9      	bne.n	80068aa <_free_r+0x3a>
 80068b6:	6814      	ldr	r4, [r2, #0]
 80068b8:	1915      	adds	r5, r2, r4
 80068ba:	429d      	cmp	r5, r3
 80068bc:	d10a      	bne.n	80068d4 <_free_r+0x64>
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4423      	add	r3, r4
 80068c2:	18d0      	adds	r0, r2, r3
 80068c4:	4288      	cmp	r0, r1
 80068c6:	6013      	str	r3, [r2, #0]
 80068c8:	d112      	bne.n	80068f0 <_free_r+0x80>
 80068ca:	6808      	ldr	r0, [r1, #0]
 80068cc:	4403      	add	r3, r0
 80068ce:	6013      	str	r3, [r2, #0]
 80068d0:	684b      	ldr	r3, [r1, #4]
 80068d2:	e00c      	b.n	80068ee <_free_r+0x7e>
 80068d4:	d902      	bls.n	80068dc <_free_r+0x6c>
 80068d6:	230c      	movs	r3, #12
 80068d8:	6003      	str	r3, [r0, #0]
 80068da:	bd30      	pop	{r4, r5, pc}
 80068dc:	681c      	ldr	r4, [r3, #0]
 80068de:	1918      	adds	r0, r3, r4
 80068e0:	4288      	cmp	r0, r1
 80068e2:	bf01      	itttt	eq
 80068e4:	6808      	ldreq	r0, [r1, #0]
 80068e6:	6849      	ldreq	r1, [r1, #4]
 80068e8:	1900      	addeq	r0, r0, r4
 80068ea:	6018      	streq	r0, [r3, #0]
 80068ec:	6059      	str	r1, [r3, #4]
 80068ee:	6053      	str	r3, [r2, #4]
 80068f0:	bd30      	pop	{r4, r5, pc}
 80068f2:	bf00      	nop
 80068f4:	2000013c 	andcs	r0, r0, ip, lsr r1

080068f8 <_malloc_r>:
 80068f8:	b570      	push	{r4, r5, r6, lr}
 80068fa:	1ccc      	adds	r4, r1, #3
 80068fc:	f024 0403 	bic.w	r4, r4, #3
 8006900:	3408      	adds	r4, #8
 8006902:	2c0c      	cmp	r4, #12
 8006904:	bf38      	it	cc
 8006906:	240c      	movcc	r4, #12
 8006908:	2c00      	cmp	r4, #0
 800690a:	4606      	mov	r6, r0
 800690c:	da03      	bge.n	8006916 <_malloc_r+0x1e>
 800690e:	230c      	movs	r3, #12
 8006910:	6033      	str	r3, [r6, #0]
 8006912:	2000      	movs	r0, #0
 8006914:	bd70      	pop	{r4, r5, r6, pc}
 8006916:	428c      	cmp	r4, r1
 8006918:	d3f9      	bcc.n	800690e <_malloc_r+0x16>
 800691a:	4a20      	ldr	r2, [pc, #128]	; (800699c <_malloc_r+0xa4>)
 800691c:	6813      	ldr	r3, [r2, #0]
 800691e:	4610      	mov	r0, r2
 8006920:	4619      	mov	r1, r3
 8006922:	b1a1      	cbz	r1, 800694e <_malloc_r+0x56>
 8006924:	680a      	ldr	r2, [r1, #0]
 8006926:	1b12      	subs	r2, r2, r4
 8006928:	d40e      	bmi.n	8006948 <_malloc_r+0x50>
 800692a:	2a0b      	cmp	r2, #11
 800692c:	d903      	bls.n	8006936 <_malloc_r+0x3e>
 800692e:	600a      	str	r2, [r1, #0]
 8006930:	188b      	adds	r3, r1, r2
 8006932:	508c      	str	r4, [r1, r2]
 8006934:	e01f      	b.n	8006976 <_malloc_r+0x7e>
 8006936:	428b      	cmp	r3, r1
 8006938:	bf0b      	itete	eq
 800693a:	685a      	ldreq	r2, [r3, #4]
 800693c:	684a      	ldrne	r2, [r1, #4]
 800693e:	6002      	streq	r2, [r0, #0]
 8006940:	605a      	strne	r2, [r3, #4]
 8006942:	bf18      	it	ne
 8006944:	460b      	movne	r3, r1
 8006946:	e016      	b.n	8006976 <_malloc_r+0x7e>
 8006948:	460b      	mov	r3, r1
 800694a:	6849      	ldr	r1, [r1, #4]
 800694c:	e7e9      	b.n	8006922 <_malloc_r+0x2a>
 800694e:	4d14      	ldr	r5, [pc, #80]	; (80069a0 <_malloc_r+0xa8>)
 8006950:	682b      	ldr	r3, [r5, #0]
 8006952:	b91b      	cbnz	r3, 800695c <_malloc_r+0x64>
 8006954:	4630      	mov	r0, r6
 8006956:	f000 fb07 	bl	8006f68 <_sbrk_r>
 800695a:	6028      	str	r0, [r5, #0]
 800695c:	4630      	mov	r0, r6
 800695e:	4621      	mov	r1, r4
 8006960:	f000 fb02 	bl	8006f68 <_sbrk_r>
 8006964:	1c42      	adds	r2, r0, #1
 8006966:	4603      	mov	r3, r0
 8006968:	d0d1      	beq.n	800690e <_malloc_r+0x16>
 800696a:	1cc5      	adds	r5, r0, #3
 800696c:	f025 0503 	bic.w	r5, r5, #3
 8006970:	4285      	cmp	r5, r0
 8006972:	d10a      	bne.n	800698a <_malloc_r+0x92>
 8006974:	601c      	str	r4, [r3, #0]
 8006976:	f103 000b 	add.w	r0, r3, #11
 800697a:	1d1a      	adds	r2, r3, #4
 800697c:	f020 0007 	bic.w	r0, r0, #7
 8006980:	1a82      	subs	r2, r0, r2
 8006982:	d00a      	beq.n	800699a <_malloc_r+0xa2>
 8006984:	4251      	negs	r1, r2
 8006986:	5099      	str	r1, [r3, r2]
 8006988:	bd70      	pop	{r4, r5, r6, pc}
 800698a:	4630      	mov	r0, r6
 800698c:	1ae9      	subs	r1, r5, r3
 800698e:	f000 faeb 	bl	8006f68 <_sbrk_r>
 8006992:	3001      	adds	r0, #1
 8006994:	d0bb      	beq.n	800690e <_malloc_r+0x16>
 8006996:	462b      	mov	r3, r5
 8006998:	e7ec      	b.n	8006974 <_malloc_r+0x7c>
 800699a:	bd70      	pop	{r4, r5, r6, pc}
 800699c:	2000013c 	andcs	r0, r0, ip, lsr r1
 80069a0:	20000138 	andcs	r0, r0, r8, lsr r1

080069a4 <__ssputs_r>:
 80069a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069a8:	688e      	ldr	r6, [r1, #8]
 80069aa:	4682      	mov	sl, r0
 80069ac:	42b3      	cmp	r3, r6
 80069ae:	460c      	mov	r4, r1
 80069b0:	4690      	mov	r8, r2
 80069b2:	4699      	mov	r9, r3
 80069b4:	d340      	bcc.n	8006a38 <__ssputs_r+0x94>
 80069b6:	898a      	ldrh	r2, [r1, #12]
 80069b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80069bc:	d03a      	beq.n	8006a34 <__ssputs_r+0x90>
 80069be:	6825      	ldr	r5, [r4, #0]
 80069c0:	6909      	ldr	r1, [r1, #16]
 80069c2:	2302      	movs	r3, #2
 80069c4:	1a6f      	subs	r7, r5, r1
 80069c6:	6965      	ldr	r5, [r4, #20]
 80069c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069cc:	fb95 f5f3 	sdiv	r5, r5, r3
 80069d0:	1c7b      	adds	r3, r7, #1
 80069d2:	444b      	add	r3, r9
 80069d4:	429d      	cmp	r5, r3
 80069d6:	bf38      	it	cc
 80069d8:	461d      	movcc	r5, r3
 80069da:	0553      	lsls	r3, r2, #21
 80069dc:	d50f      	bpl.n	80069fe <__ssputs_r+0x5a>
 80069de:	4629      	mov	r1, r5
 80069e0:	f7ff ff8a 	bl	80068f8 <_malloc_r>
 80069e4:	4606      	mov	r6, r0
 80069e6:	b198      	cbz	r0, 8006a10 <__ssputs_r+0x6c>
 80069e8:	6921      	ldr	r1, [r4, #16]
 80069ea:	463a      	mov	r2, r7
 80069ec:	f7ff fe6f 	bl	80066ce <memcpy>
 80069f0:	89a3      	ldrh	r3, [r4, #12]
 80069f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069fa:	81a3      	strh	r3, [r4, #12]
 80069fc:	e013      	b.n	8006a26 <__ssputs_r+0x82>
 80069fe:	462a      	mov	r2, r5
 8006a00:	f000 faeb 	bl	8006fda <_realloc_r>
 8006a04:	4606      	mov	r6, r0
 8006a06:	b970      	cbnz	r0, 8006a26 <__ssputs_r+0x82>
 8006a08:	4650      	mov	r0, sl
 8006a0a:	6921      	ldr	r1, [r4, #16]
 8006a0c:	f7ff ff30 	bl	8006870 <_free_r>
 8006a10:	230c      	movs	r3, #12
 8006a12:	f8ca 3000 	str.w	r3, [sl]
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a20:	81a3      	strh	r3, [r4, #12]
 8006a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a26:	6126      	str	r6, [r4, #16]
 8006a28:	443e      	add	r6, r7
 8006a2a:	6026      	str	r6, [r4, #0]
 8006a2c:	464e      	mov	r6, r9
 8006a2e:	6165      	str	r5, [r4, #20]
 8006a30:	1bed      	subs	r5, r5, r7
 8006a32:	60a5      	str	r5, [r4, #8]
 8006a34:	45b1      	cmp	r9, r6
 8006a36:	d200      	bcs.n	8006a3a <__ssputs_r+0x96>
 8006a38:	464e      	mov	r6, r9
 8006a3a:	4632      	mov	r2, r6
 8006a3c:	6820      	ldr	r0, [r4, #0]
 8006a3e:	4641      	mov	r1, r8
 8006a40:	f000 fab0 	bl	8006fa4 <memmove>
 8006a44:	68a3      	ldr	r3, [r4, #8]
 8006a46:	2000      	movs	r0, #0
 8006a48:	1b9b      	subs	r3, r3, r6
 8006a4a:	60a3      	str	r3, [r4, #8]
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	441e      	add	r6, r3
 8006a50:	6026      	str	r6, [r4, #0]
 8006a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08006a58 <_svfiprintf_r>:
 8006a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a5c:	b09d      	sub	sp, #116	; 0x74
 8006a5e:	9303      	str	r3, [sp, #12]
 8006a60:	898b      	ldrh	r3, [r1, #12]
 8006a62:	4606      	mov	r6, r0
 8006a64:	061c      	lsls	r4, r3, #24
 8006a66:	460d      	mov	r5, r1
 8006a68:	4690      	mov	r8, r2
 8006a6a:	d50c      	bpl.n	8006a86 <_svfiprintf_r+0x2e>
 8006a6c:	690b      	ldr	r3, [r1, #16]
 8006a6e:	b953      	cbnz	r3, 8006a86 <_svfiprintf_r+0x2e>
 8006a70:	2140      	movs	r1, #64	; 0x40
 8006a72:	f7ff ff41 	bl	80068f8 <_malloc_r>
 8006a76:	6028      	str	r0, [r5, #0]
 8006a78:	6128      	str	r0, [r5, #16]
 8006a7a:	b910      	cbnz	r0, 8006a82 <_svfiprintf_r+0x2a>
 8006a7c:	230c      	movs	r3, #12
 8006a7e:	6033      	str	r3, [r6, #0]
 8006a80:	e0cc      	b.n	8006c1c <_svfiprintf_r+0x1c4>
 8006a82:	2340      	movs	r3, #64	; 0x40
 8006a84:	616b      	str	r3, [r5, #20]
 8006a86:	2300      	movs	r3, #0
 8006a88:	9309      	str	r3, [sp, #36]	; 0x24
 8006a8a:	2320      	movs	r3, #32
 8006a8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a90:	2330      	movs	r3, #48	; 0x30
 8006a92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a96:	4643      	mov	r3, r8
 8006a98:	461c      	mov	r4, r3
 8006a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a9e:	b91a      	cbnz	r2, 8006aa8 <_svfiprintf_r+0x50>
 8006aa0:	ebb4 0908 	subs.w	r9, r4, r8
 8006aa4:	d00f      	beq.n	8006ac6 <_svfiprintf_r+0x6e>
 8006aa6:	e002      	b.n	8006aae <_svfiprintf_r+0x56>
 8006aa8:	2a25      	cmp	r2, #37	; 0x25
 8006aaa:	d1f5      	bne.n	8006a98 <_svfiprintf_r+0x40>
 8006aac:	e7f8      	b.n	8006aa0 <_svfiprintf_r+0x48>
 8006aae:	4630      	mov	r0, r6
 8006ab0:	4629      	mov	r1, r5
 8006ab2:	4642      	mov	r2, r8
 8006ab4:	464b      	mov	r3, r9
 8006ab6:	f7ff ff75 	bl	80069a4 <__ssputs_r>
 8006aba:	3001      	adds	r0, #1
 8006abc:	f000 80a9 	beq.w	8006c12 <_svfiprintf_r+0x1ba>
 8006ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac2:	444b      	add	r3, r9
 8006ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ac6:	7823      	ldrb	r3, [r4, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 80a2 	beq.w	8006c12 <_svfiprintf_r+0x1ba>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ad4:	9304      	str	r3, [sp, #16]
 8006ad6:	9307      	str	r3, [sp, #28]
 8006ad8:	9205      	str	r2, [sp, #20]
 8006ada:	9306      	str	r3, [sp, #24]
 8006adc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ae0:	931a      	str	r3, [sp, #104]	; 0x68
 8006ae2:	f104 0801 	add.w	r8, r4, #1
 8006ae6:	4644      	mov	r4, r8
 8006ae8:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8006c34 <_svfiprintf_r+0x1dc>
 8006aec:	7821      	ldrb	r1, [r4, #0]
 8006aee:	4648      	mov	r0, r9
 8006af0:	2205      	movs	r2, #5
 8006af2:	f000 fa49 	bl	8006f88 <memchr>
 8006af6:	f108 0801 	add.w	r8, r8, #1
 8006afa:	9b04      	ldr	r3, [sp, #16]
 8006afc:	b130      	cbz	r0, 8006b0c <_svfiprintf_r+0xb4>
 8006afe:	ebc9 0000 	rsb	r0, r9, r0
 8006b02:	2201      	movs	r2, #1
 8006b04:	4082      	lsls	r2, r0
 8006b06:	4313      	orrs	r3, r2
 8006b08:	9304      	str	r3, [sp, #16]
 8006b0a:	e7ec      	b.n	8006ae6 <_svfiprintf_r+0x8e>
 8006b0c:	06d8      	lsls	r0, r3, #27
 8006b0e:	bf44      	itt	mi
 8006b10:	2220      	movmi	r2, #32
 8006b12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b16:	0719      	lsls	r1, r3, #28
 8006b18:	bf44      	itt	mi
 8006b1a:	222b      	movmi	r2, #43	; 0x2b
 8006b1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b20:	7822      	ldrb	r2, [r4, #0]
 8006b22:	2a2a      	cmp	r2, #42	; 0x2a
 8006b24:	d002      	beq.n	8006b2c <_svfiprintf_r+0xd4>
 8006b26:	9907      	ldr	r1, [sp, #28]
 8006b28:	4623      	mov	r3, r4
 8006b2a:	e00e      	b.n	8006b4a <_svfiprintf_r+0xf2>
 8006b2c:	9a03      	ldr	r2, [sp, #12]
 8006b2e:	3401      	adds	r4, #1
 8006b30:	1d11      	adds	r1, r2, #4
 8006b32:	6812      	ldr	r2, [r2, #0]
 8006b34:	9103      	str	r1, [sp, #12]
 8006b36:	2a00      	cmp	r2, #0
 8006b38:	bfbb      	ittet	lt
 8006b3a:	4252      	neglt	r2, r2
 8006b3c:	f043 0302 	orrlt.w	r3, r3, #2
 8006b40:	9207      	strge	r2, [sp, #28]
 8006b42:	9207      	strlt	r2, [sp, #28]
 8006b44:	bfb8      	it	lt
 8006b46:	9304      	strlt	r3, [sp, #16]
 8006b48:	e00a      	b.n	8006b60 <_svfiprintf_r+0x108>
 8006b4a:	461c      	mov	r4, r3
 8006b4c:	7822      	ldrb	r2, [r4, #0]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	3a30      	subs	r2, #48	; 0x30
 8006b52:	2a09      	cmp	r2, #9
 8006b54:	d803      	bhi.n	8006b5e <_svfiprintf_r+0x106>
 8006b56:	200a      	movs	r0, #10
 8006b58:	fb00 2101 	mla	r1, r0, r1, r2
 8006b5c:	e7f5      	b.n	8006b4a <_svfiprintf_r+0xf2>
 8006b5e:	9107      	str	r1, [sp, #28]
 8006b60:	7823      	ldrb	r3, [r4, #0]
 8006b62:	2b2e      	cmp	r3, #46	; 0x2e
 8006b64:	d11a      	bne.n	8006b9c <_svfiprintf_r+0x144>
 8006b66:	7863      	ldrb	r3, [r4, #1]
 8006b68:	2b2a      	cmp	r3, #42	; 0x2a
 8006b6a:	d10a      	bne.n	8006b82 <_svfiprintf_r+0x12a>
 8006b6c:	9b03      	ldr	r3, [sp, #12]
 8006b6e:	3402      	adds	r4, #2
 8006b70:	1d1a      	adds	r2, r3, #4
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	9203      	str	r2, [sp, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	bfb8      	it	lt
 8006b7a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006b7e:	9305      	str	r3, [sp, #20]
 8006b80:	e00c      	b.n	8006b9c <_svfiprintf_r+0x144>
 8006b82:	1c61      	adds	r1, r4, #1
 8006b84:	2200      	movs	r2, #0
 8006b86:	460c      	mov	r4, r1
 8006b88:	7823      	ldrb	r3, [r4, #0]
 8006b8a:	3101      	adds	r1, #1
 8006b8c:	3b30      	subs	r3, #48	; 0x30
 8006b8e:	2b09      	cmp	r3, #9
 8006b90:	d803      	bhi.n	8006b9a <_svfiprintf_r+0x142>
 8006b92:	200a      	movs	r0, #10
 8006b94:	fb00 3202 	mla	r2, r0, r2, r3
 8006b98:	e7f5      	b.n	8006b86 <_svfiprintf_r+0x12e>
 8006b9a:	9205      	str	r2, [sp, #20]
 8006b9c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8006c38 <_svfiprintf_r+0x1e0>
 8006ba0:	7821      	ldrb	r1, [r4, #0]
 8006ba2:	4640      	mov	r0, r8
 8006ba4:	2203      	movs	r2, #3
 8006ba6:	f000 f9ef 	bl	8006f88 <memchr>
 8006baa:	b138      	cbz	r0, 8006bbc <_svfiprintf_r+0x164>
 8006bac:	9a04      	ldr	r2, [sp, #16]
 8006bae:	ebc8 0000 	rsb	r0, r8, r0
 8006bb2:	2340      	movs	r3, #64	; 0x40
 8006bb4:	4083      	lsls	r3, r0
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	9304      	str	r3, [sp, #16]
 8006bba:	3401      	adds	r4, #1
 8006bbc:	7821      	ldrb	r1, [r4, #0]
 8006bbe:	481a      	ldr	r0, [pc, #104]	; (8006c28 <_svfiprintf_r+0x1d0>)
 8006bc0:	2206      	movs	r2, #6
 8006bc2:	f104 0801 	add.w	r8, r4, #1
 8006bc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bca:	f000 f9dd 	bl	8006f88 <memchr>
 8006bce:	b188      	cbz	r0, 8006bf4 <_svfiprintf_r+0x19c>
 8006bd0:	4b16      	ldr	r3, [pc, #88]	; (8006c2c <_svfiprintf_r+0x1d4>)
 8006bd2:	b933      	cbnz	r3, 8006be2 <_svfiprintf_r+0x18a>
 8006bd4:	9b03      	ldr	r3, [sp, #12]
 8006bd6:	3307      	adds	r3, #7
 8006bd8:	f023 0307 	bic.w	r3, r3, #7
 8006bdc:	3308      	adds	r3, #8
 8006bde:	9303      	str	r3, [sp, #12]
 8006be0:	e013      	b.n	8006c0a <_svfiprintf_r+0x1b2>
 8006be2:	ab03      	add	r3, sp, #12
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	4630      	mov	r0, r6
 8006be8:	a904      	add	r1, sp, #16
 8006bea:	462a      	mov	r2, r5
 8006bec:	4b10      	ldr	r3, [pc, #64]	; (8006c30 <_svfiprintf_r+0x1d8>)
 8006bee:	f3af 8000 	nop.w
 8006bf2:	e007      	b.n	8006c04 <_svfiprintf_r+0x1ac>
 8006bf4:	ab03      	add	r3, sp, #12
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	a904      	add	r1, sp, #16
 8006bfc:	462a      	mov	r2, r5
 8006bfe:	4b0c      	ldr	r3, [pc, #48]	; (8006c30 <_svfiprintf_r+0x1d8>)
 8006c00:	f000 f892 	bl	8006d28 <_printf_i>
 8006c04:	1c42      	adds	r2, r0, #1
 8006c06:	4607      	mov	r7, r0
 8006c08:	d003      	beq.n	8006c12 <_svfiprintf_r+0x1ba>
 8006c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c0c:	443b      	add	r3, r7
 8006c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c10:	e741      	b.n	8006a96 <_svfiprintf_r+0x3e>
 8006c12:	89ab      	ldrh	r3, [r5, #12]
 8006c14:	065b      	lsls	r3, r3, #25
 8006c16:	d401      	bmi.n	8006c1c <_svfiprintf_r+0x1c4>
 8006c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c1a:	e001      	b.n	8006c20 <_svfiprintf_r+0x1c8>
 8006c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c20:	b01d      	add	sp, #116	; 0x74
 8006c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c26:	bf00      	nop
 8006c28:	08007a70 	stmdaeq	r0, {r4, r5, r6, r9, fp, ip, sp, lr}
 8006c2c:	00000000 	andeq	r0, r0, r0
 8006c30:	080069a5 	stmdaeq	r0, {r0, r2, r5, r7, r8, fp, sp, lr}
 8006c34:	08007a66 	stmdaeq	r0, {r1, r2, r5, r6, r9, fp, ip, sp, lr}
 8006c38:	08007a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, ip, sp, lr}

08006c3c <_printf_common>:
 8006c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c40:	4691      	mov	r9, r2
 8006c42:	461f      	mov	r7, r3
 8006c44:	688a      	ldr	r2, [r1, #8]
 8006c46:	690b      	ldr	r3, [r1, #16]
 8006c48:	4606      	mov	r6, r0
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	bfb8      	it	lt
 8006c4e:	4613      	movlt	r3, r2
 8006c50:	f8c9 3000 	str.w	r3, [r9]
 8006c54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c58:	460c      	mov	r4, r1
 8006c5a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c5e:	b112      	cbz	r2, 8006c66 <_printf_common+0x2a>
 8006c60:	3301      	adds	r3, #1
 8006c62:	f8c9 3000 	str.w	r3, [r9]
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	0699      	lsls	r1, r3, #26
 8006c6a:	bf42      	ittt	mi
 8006c6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006c70:	3302      	addmi	r3, #2
 8006c72:	f8c9 3000 	strmi.w	r3, [r9]
 8006c76:	6825      	ldr	r5, [r4, #0]
 8006c78:	f015 0506 	ands.w	r5, r5, #6
 8006c7c:	d01c      	beq.n	8006cb8 <_printf_common+0x7c>
 8006c7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006c82:	6822      	ldr	r2, [r4, #0]
 8006c84:	3300      	adds	r3, #0
 8006c86:	bf18      	it	ne
 8006c88:	2301      	movne	r3, #1
 8006c8a:	0692      	lsls	r2, r2, #26
 8006c8c:	d51f      	bpl.n	8006cce <_printf_common+0x92>
 8006c8e:	18e1      	adds	r1, r4, r3
 8006c90:	2030      	movs	r0, #48	; 0x30
 8006c92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c96:	1c5a      	adds	r2, r3, #1
 8006c98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c9c:	4422      	add	r2, r4
 8006c9e:	3302      	adds	r3, #2
 8006ca0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ca4:	e013      	b.n	8006cce <_printf_common+0x92>
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	4639      	mov	r1, r7
 8006caa:	f104 0219 	add.w	r2, r4, #25
 8006cae:	2301      	movs	r3, #1
 8006cb0:	47c0      	blx	r8
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	d007      	beq.n	8006cc6 <_printf_common+0x8a>
 8006cb6:	3501      	adds	r5, #1
 8006cb8:	68e3      	ldr	r3, [r4, #12]
 8006cba:	f8d9 2000 	ldr.w	r2, [r9]
 8006cbe:	1a9b      	subs	r3, r3, r2
 8006cc0:	429d      	cmp	r5, r3
 8006cc2:	dbf0      	blt.n	8006ca6 <_printf_common+0x6a>
 8006cc4:	e7db      	b.n	8006c7e <_printf_common+0x42>
 8006cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cce:	4630      	mov	r0, r6
 8006cd0:	4639      	mov	r1, r7
 8006cd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cd6:	47c0      	blx	r8
 8006cd8:	3001      	adds	r0, #1
 8006cda:	d0f4      	beq.n	8006cc6 <_printf_common+0x8a>
 8006cdc:	6822      	ldr	r2, [r4, #0]
 8006cde:	f8d9 5000 	ldr.w	r5, [r9]
 8006ce2:	68e3      	ldr	r3, [r4, #12]
 8006ce4:	f002 0206 	and.w	r2, r2, #6
 8006ce8:	2a04      	cmp	r2, #4
 8006cea:	bf08      	it	eq
 8006cec:	1b5d      	subeq	r5, r3, r5
 8006cee:	6922      	ldr	r2, [r4, #16]
 8006cf0:	68a3      	ldr	r3, [r4, #8]
 8006cf2:	bf0c      	ite	eq
 8006cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cf8:	2500      	movne	r5, #0
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	bfc4      	itt	gt
 8006cfe:	1a9b      	subgt	r3, r3, r2
 8006d00:	18ed      	addgt	r5, r5, r3
 8006d02:	f04f 0900 	mov.w	r9, #0
 8006d06:	45a9      	cmp	r9, r5
 8006d08:	da0a      	bge.n	8006d20 <_printf_common+0xe4>
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	4639      	mov	r1, r7
 8006d0e:	f104 021a 	add.w	r2, r4, #26
 8006d12:	2301      	movs	r3, #1
 8006d14:	47c0      	blx	r8
 8006d16:	3001      	adds	r0, #1
 8006d18:	d0d5      	beq.n	8006cc6 <_printf_common+0x8a>
 8006d1a:	f109 0901 	add.w	r9, r9, #1
 8006d1e:	e7f2      	b.n	8006d06 <_printf_common+0xca>
 8006d20:	2000      	movs	r0, #0
 8006d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08006d28 <_printf_i>:
 8006d28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	4617      	mov	r7, r2
 8006d30:	7e22      	ldrb	r2, [r4, #24]
 8006d32:	4698      	mov	r8, r3
 8006d34:	2a6e      	cmp	r2, #110	; 0x6e
 8006d36:	4606      	mov	r6, r0
 8006d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d3a:	f101 0143 	add.w	r1, r1, #67	; 0x43
 8006d3e:	f000 80b0 	beq.w	8006ea2 <_printf_i+0x17a>
 8006d42:	d812      	bhi.n	8006d6a <_printf_i+0x42>
 8006d44:	2a63      	cmp	r2, #99	; 0x63
 8006d46:	d023      	beq.n	8006d90 <_printf_i+0x68>
 8006d48:	d80a      	bhi.n	8006d60 <_printf_i+0x38>
 8006d4a:	2a00      	cmp	r2, #0
 8006d4c:	f000 80bd 	beq.w	8006eca <_printf_i+0x1a2>
 8006d50:	2a58      	cmp	r2, #88	; 0x58
 8006d52:	f040 80cc 	bne.w	8006eee <_printf_i+0x1c6>
 8006d56:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006d5a:	f8df e204 	ldr.w	lr, [pc, #516]	; 8006f60 <_printf_i+0x238>
 8006d5e:	e057      	b.n	8006e10 <_printf_i+0xe8>
 8006d60:	2a64      	cmp	r2, #100	; 0x64
 8006d62:	d01e      	beq.n	8006da2 <_printf_i+0x7a>
 8006d64:	2a69      	cmp	r2, #105	; 0x69
 8006d66:	d01c      	beq.n	8006da2 <_printf_i+0x7a>
 8006d68:	e0c1      	b.n	8006eee <_printf_i+0x1c6>
 8006d6a:	2a73      	cmp	r2, #115	; 0x73
 8006d6c:	f000 80b1 	beq.w	8006ed2 <_printf_i+0x1aa>
 8006d70:	d809      	bhi.n	8006d86 <_printf_i+0x5e>
 8006d72:	2a6f      	cmp	r2, #111	; 0x6f
 8006d74:	d02e      	beq.n	8006dd4 <_printf_i+0xac>
 8006d76:	2a70      	cmp	r2, #112	; 0x70
 8006d78:	f040 80b9 	bne.w	8006eee <_printf_i+0x1c6>
 8006d7c:	6822      	ldr	r2, [r4, #0]
 8006d7e:	f042 0220 	orr.w	r2, r2, #32
 8006d82:	6022      	str	r2, [r4, #0]
 8006d84:	e03f      	b.n	8006e06 <_printf_i+0xde>
 8006d86:	2a75      	cmp	r2, #117	; 0x75
 8006d88:	d024      	beq.n	8006dd4 <_printf_i+0xac>
 8006d8a:	2a78      	cmp	r2, #120	; 0x78
 8006d8c:	d03b      	beq.n	8006e06 <_printf_i+0xde>
 8006d8e:	e0ae      	b.n	8006eee <_printf_i+0x1c6>
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d96:	1d11      	adds	r1, r2, #4
 8006d98:	6019      	str	r1, [r3, #0]
 8006d9a:	6813      	ldr	r3, [r2, #0]
 8006d9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006da0:	e0a9      	b.n	8006ef6 <_printf_i+0x1ce>
 8006da2:	6820      	ldr	r0, [r4, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006daa:	d002      	beq.n	8006db2 <_printf_i+0x8a>
 8006dac:	1d10      	adds	r0, r2, #4
 8006dae:	6018      	str	r0, [r3, #0]
 8006db0:	e008      	b.n	8006dc4 <_printf_i+0x9c>
 8006db2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006db6:	f102 0004 	add.w	r0, r2, #4
 8006dba:	6018      	str	r0, [r3, #0]
 8006dbc:	d002      	beq.n	8006dc4 <_printf_i+0x9c>
 8006dbe:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006dc2:	e000      	b.n	8006dc6 <_printf_i+0x9e>
 8006dc4:	6813      	ldr	r3, [r2, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	da3e      	bge.n	8006e48 <_printf_i+0x120>
 8006dca:	222d      	movs	r2, #45	; 0x2d
 8006dcc:	425b      	negs	r3, r3
 8006dce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006dd2:	e039      	b.n	8006e48 <_printf_i+0x120>
 8006dd4:	6820      	ldr	r0, [r4, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006ddc:	d002      	beq.n	8006de4 <_printf_i+0xbc>
 8006dde:	1d10      	adds	r0, r2, #4
 8006de0:	6018      	str	r0, [r3, #0]
 8006de2:	e007      	b.n	8006df4 <_printf_i+0xcc>
 8006de4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006de8:	f102 0004 	add.w	r0, r2, #4
 8006dec:	6018      	str	r0, [r3, #0]
 8006dee:	d001      	beq.n	8006df4 <_printf_i+0xcc>
 8006df0:	8813      	ldrh	r3, [r2, #0]
 8006df2:	e000      	b.n	8006df6 <_printf_i+0xce>
 8006df4:	6813      	ldr	r3, [r2, #0]
 8006df6:	7e22      	ldrb	r2, [r4, #24]
 8006df8:	f8df e164 	ldr.w	lr, [pc, #356]	; 8006f60 <_printf_i+0x238>
 8006dfc:	2a6f      	cmp	r2, #111	; 0x6f
 8006dfe:	bf0c      	ite	eq
 8006e00:	2208      	moveq	r2, #8
 8006e02:	220a      	movne	r2, #10
 8006e04:	e01c      	b.n	8006e40 <_printf_i+0x118>
 8006e06:	2278      	movs	r2, #120	; 0x78
 8006e08:	f8df e158 	ldr.w	lr, [pc, #344]	; 8006f64 <_printf_i+0x23c>
 8006e0c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006e10:	6822      	ldr	r2, [r4, #0]
 8006e12:	6818      	ldr	r0, [r3, #0]
 8006e14:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006e18:	f100 0504 	add.w	r5, r0, #4
 8006e1c:	601d      	str	r5, [r3, #0]
 8006e1e:	d103      	bne.n	8006e28 <_printf_i+0x100>
 8006e20:	0655      	lsls	r5, r2, #25
 8006e22:	d501      	bpl.n	8006e28 <_printf_i+0x100>
 8006e24:	8803      	ldrh	r3, [r0, #0]
 8006e26:	e000      	b.n	8006e2a <_printf_i+0x102>
 8006e28:	6803      	ldr	r3, [r0, #0]
 8006e2a:	07d0      	lsls	r0, r2, #31
 8006e2c:	bf44      	itt	mi
 8006e2e:	f042 0220 	orrmi.w	r2, r2, #32
 8006e32:	6022      	strmi	r2, [r4, #0]
 8006e34:	b91b      	cbnz	r3, 8006e3e <_printf_i+0x116>
 8006e36:	6822      	ldr	r2, [r4, #0]
 8006e38:	f022 0220 	bic.w	r2, r2, #32
 8006e3c:	6022      	str	r2, [r4, #0]
 8006e3e:	2210      	movs	r2, #16
 8006e40:	2000      	movs	r0, #0
 8006e42:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006e46:	e002      	b.n	8006e4e <_printf_i+0x126>
 8006e48:	f8df e114 	ldr.w	lr, [pc, #276]	; 8006f60 <_printf_i+0x238>
 8006e4c:	220a      	movs	r2, #10
 8006e4e:	6865      	ldr	r5, [r4, #4]
 8006e50:	2d00      	cmp	r5, #0
 8006e52:	bfa8      	it	ge
 8006e54:	6820      	ldrge	r0, [r4, #0]
 8006e56:	60a5      	str	r5, [r4, #8]
 8006e58:	bfa4      	itt	ge
 8006e5a:	f020 0004 	bicge.w	r0, r0, #4
 8006e5e:	6020      	strge	r0, [r4, #0]
 8006e60:	b903      	cbnz	r3, 8006e64 <_printf_i+0x13c>
 8006e62:	b165      	cbz	r5, 8006e7e <_printf_i+0x156>
 8006e64:	460d      	mov	r5, r1
 8006e66:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e6a:	fb02 3310 	mls	r3, r2, r0, r3
 8006e6e:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8006e72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006e76:	4603      	mov	r3, r0
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	d1f4      	bne.n	8006e66 <_printf_i+0x13e>
 8006e7c:	e000      	b.n	8006e80 <_printf_i+0x158>
 8006e7e:	460d      	mov	r5, r1
 8006e80:	2a08      	cmp	r2, #8
 8006e82:	d10b      	bne.n	8006e9c <_printf_i+0x174>
 8006e84:	6823      	ldr	r3, [r4, #0]
 8006e86:	07da      	lsls	r2, r3, #31
 8006e88:	d508      	bpl.n	8006e9c <_printf_i+0x174>
 8006e8a:	6923      	ldr	r3, [r4, #16]
 8006e8c:	6862      	ldr	r2, [r4, #4]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	bfde      	ittt	le
 8006e92:	2330      	movle	r3, #48	; 0x30
 8006e94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006e9c:	1b49      	subs	r1, r1, r5
 8006e9e:	6121      	str	r1, [r4, #16]
 8006ea0:	e02e      	b.n	8006f00 <_printf_i+0x1d8>
 8006ea2:	6825      	ldr	r5, [r4, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	f015 0f80 	tst.w	r5, #128	; 0x80
 8006eaa:	6960      	ldr	r0, [r4, #20]
 8006eac:	d003      	beq.n	8006eb6 <_printf_i+0x18e>
 8006eae:	1d15      	adds	r5, r2, #4
 8006eb0:	601d      	str	r5, [r3, #0]
 8006eb2:	6813      	ldr	r3, [r2, #0]
 8006eb4:	e008      	b.n	8006ec8 <_printf_i+0x1a0>
 8006eb6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006eba:	f102 0504 	add.w	r5, r2, #4
 8006ebe:	601d      	str	r5, [r3, #0]
 8006ec0:	6813      	ldr	r3, [r2, #0]
 8006ec2:	d001      	beq.n	8006ec8 <_printf_i+0x1a0>
 8006ec4:	8018      	strh	r0, [r3, #0]
 8006ec6:	e000      	b.n	8006eca <_printf_i+0x1a2>
 8006ec8:	6018      	str	r0, [r3, #0]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	6123      	str	r3, [r4, #16]
 8006ece:	460d      	mov	r5, r1
 8006ed0:	e016      	b.n	8006f00 <_printf_i+0x1d8>
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	1d11      	adds	r1, r2, #4
 8006ed6:	6019      	str	r1, [r3, #0]
 8006ed8:	6815      	ldr	r5, [r2, #0]
 8006eda:	2100      	movs	r1, #0
 8006edc:	4628      	mov	r0, r5
 8006ede:	6862      	ldr	r2, [r4, #4]
 8006ee0:	f000 f852 	bl	8006f88 <memchr>
 8006ee4:	b108      	cbz	r0, 8006eea <_printf_i+0x1c2>
 8006ee6:	1b40      	subs	r0, r0, r5
 8006ee8:	6060      	str	r0, [r4, #4]
 8006eea:	6863      	ldr	r3, [r4, #4]
 8006eec:	e004      	b.n	8006ef8 <_printf_i+0x1d0>
 8006eee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ef2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	6123      	str	r3, [r4, #16]
 8006efa:	2300      	movs	r3, #0
 8006efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f00:	f8cd 8000 	str.w	r8, [sp]
 8006f04:	4630      	mov	r0, r6
 8006f06:	4621      	mov	r1, r4
 8006f08:	aa03      	add	r2, sp, #12
 8006f0a:	463b      	mov	r3, r7
 8006f0c:	f7ff fe96 	bl	8006c3c <_printf_common>
 8006f10:	3001      	adds	r0, #1
 8006f12:	d102      	bne.n	8006f1a <_printf_i+0x1f2>
 8006f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f18:	e01f      	b.n	8006f5a <_printf_i+0x232>
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	4639      	mov	r1, r7
 8006f1e:	462a      	mov	r2, r5
 8006f20:	6923      	ldr	r3, [r4, #16]
 8006f22:	47c0      	blx	r8
 8006f24:	3001      	adds	r0, #1
 8006f26:	d0f5      	beq.n	8006f14 <_printf_i+0x1ec>
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	079b      	lsls	r3, r3, #30
 8006f2c:	d405      	bmi.n	8006f3a <_printf_i+0x212>
 8006f2e:	68e0      	ldr	r0, [r4, #12]
 8006f30:	9b03      	ldr	r3, [sp, #12]
 8006f32:	4298      	cmp	r0, r3
 8006f34:	bfb8      	it	lt
 8006f36:	4618      	movlt	r0, r3
 8006f38:	e00f      	b.n	8006f5a <_printf_i+0x232>
 8006f3a:	2500      	movs	r5, #0
 8006f3c:	68e3      	ldr	r3, [r4, #12]
 8006f3e:	9a03      	ldr	r2, [sp, #12]
 8006f40:	1a9b      	subs	r3, r3, r2
 8006f42:	429d      	cmp	r5, r3
 8006f44:	daf3      	bge.n	8006f2e <_printf_i+0x206>
 8006f46:	4630      	mov	r0, r6
 8006f48:	4639      	mov	r1, r7
 8006f4a:	f104 0219 	add.w	r2, r4, #25
 8006f4e:	2301      	movs	r3, #1
 8006f50:	47c0      	blx	r8
 8006f52:	3001      	adds	r0, #1
 8006f54:	d0de      	beq.n	8006f14 <_printf_i+0x1ec>
 8006f56:	3501      	adds	r5, #1
 8006f58:	e7f0      	b.n	8006f3c <_printf_i+0x214>
 8006f5a:	b004      	add	sp, #16
 8006f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f60:	08007a77 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r9, fp, ip, sp, lr}
 8006f64:	08007a88 	stmdaeq	r0, {r3, r7, r9, fp, ip, sp, lr}

08006f68 <_sbrk_r>:
 8006f68:	b538      	push	{r3, r4, r5, lr}
 8006f6a:	4c06      	ldr	r4, [pc, #24]	; (8006f84 <_sbrk_r+0x1c>)
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	4605      	mov	r5, r0
 8006f70:	4608      	mov	r0, r1
 8006f72:	6023      	str	r3, [r4, #0]
 8006f74:	f000 f862 	bl	800703c <_sbrk>
 8006f78:	1c43      	adds	r3, r0, #1
 8006f7a:	d102      	bne.n	8006f82 <_sbrk_r+0x1a>
 8006f7c:	6823      	ldr	r3, [r4, #0]
 8006f7e:	b103      	cbz	r3, 8006f82 <_sbrk_r+0x1a>
 8006f80:	602b      	str	r3, [r5, #0]
 8006f82:	bd38      	pop	{r3, r4, r5, pc}
 8006f84:	20000de0 	andcs	r0, r0, r0, ror #27

08006f88 <memchr>:
 8006f88:	b510      	push	{r4, lr}
 8006f8a:	b2c9      	uxtb	r1, r1
 8006f8c:	4402      	add	r2, r0
 8006f8e:	4290      	cmp	r0, r2
 8006f90:	4603      	mov	r3, r0
 8006f92:	d005      	beq.n	8006fa0 <memchr+0x18>
 8006f94:	781c      	ldrb	r4, [r3, #0]
 8006f96:	3001      	adds	r0, #1
 8006f98:	428c      	cmp	r4, r1
 8006f9a:	d1f8      	bne.n	8006f8e <memchr+0x6>
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	bd10      	pop	{r4, pc}
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	bd10      	pop	{r4, pc}

08006fa4 <memmove>:
 8006fa4:	4281      	cmp	r1, r0
 8006fa6:	b510      	push	{r4, lr}
 8006fa8:	eb01 0302 	add.w	r3, r1, r2
 8006fac:	d301      	bcc.n	8006fb2 <memmove+0xe>
 8006fae:	1e42      	subs	r2, r0, #1
 8006fb0:	e00b      	b.n	8006fca <memmove+0x26>
 8006fb2:	4298      	cmp	r0, r3
 8006fb4:	d2fb      	bcs.n	8006fae <memmove+0xa>
 8006fb6:	1881      	adds	r1, r0, r2
 8006fb8:	1ad2      	subs	r2, r2, r3
 8006fba:	42d3      	cmn	r3, r2
 8006fbc:	d004      	beq.n	8006fc8 <memmove+0x24>
 8006fbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fc2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006fc6:	e7f8      	b.n	8006fba <memmove+0x16>
 8006fc8:	bd10      	pop	{r4, pc}
 8006fca:	4299      	cmp	r1, r3
 8006fcc:	d004      	beq.n	8006fd8 <memmove+0x34>
 8006fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fd2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006fd6:	e7f8      	b.n	8006fca <memmove+0x26>
 8006fd8:	bd10      	pop	{r4, pc}

08006fda <_realloc_r>:
 8006fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fdc:	4607      	mov	r7, r0
 8006fde:	4615      	mov	r5, r2
 8006fe0:	460e      	mov	r6, r1
 8006fe2:	b921      	cbnz	r1, 8006fee <_realloc_r+0x14>
 8006fe4:	4611      	mov	r1, r2
 8006fe6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006fea:	f7ff bc85 	b.w	80068f8 <_malloc_r>
 8006fee:	b91a      	cbnz	r2, 8006ff8 <_realloc_r+0x1e>
 8006ff0:	f7ff fc3e 	bl	8006870 <_free_r>
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ff8:	f000 f815 	bl	8007026 <_malloc_usable_size_r>
 8006ffc:	42a8      	cmp	r0, r5
 8006ffe:	d20e      	bcs.n	800701e <_realloc_r+0x44>
 8007000:	4638      	mov	r0, r7
 8007002:	4629      	mov	r1, r5
 8007004:	f7ff fc78 	bl	80068f8 <_malloc_r>
 8007008:	4604      	mov	r4, r0
 800700a:	b150      	cbz	r0, 8007022 <_realloc_r+0x48>
 800700c:	4631      	mov	r1, r6
 800700e:	462a      	mov	r2, r5
 8007010:	f7ff fb5d 	bl	80066ce <memcpy>
 8007014:	4638      	mov	r0, r7
 8007016:	4631      	mov	r1, r6
 8007018:	f7ff fc2a 	bl	8006870 <_free_r>
 800701c:	e001      	b.n	8007022 <_realloc_r+0x48>
 800701e:	4630      	mov	r0, r6
 8007020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007022:	4620      	mov	r0, r4
 8007024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007026 <_malloc_usable_size_r>:
 8007026:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800702a:	2800      	cmp	r0, #0
 800702c:	bfbe      	ittt	lt
 800702e:	1809      	addlt	r1, r1, r0
 8007030:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8007034:	18c0      	addlt	r0, r0, r3
 8007036:	3804      	subs	r0, #4
 8007038:	4770      	bx	lr
	...

0800703c <_sbrk>:
 800703c:	4a04      	ldr	r2, [pc, #16]	; (8007050 <_sbrk+0x14>)
 800703e:	4905      	ldr	r1, [pc, #20]	; (8007054 <_sbrk+0x18>)
 8007040:	6813      	ldr	r3, [r2, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	bf08      	it	eq
 8007046:	460b      	moveq	r3, r1
 8007048:	4418      	add	r0, r3
 800704a:	6010      	str	r0, [r2, #0]
 800704c:	4618      	mov	r0, r3
 800704e:	4770      	bx	lr
 8007050:	20000140 	andcs	r0, r0, r0, asr #2
 8007054:	20000de4 	andcs	r0, r0, r4, ror #27
 8007058:	43454843 	movtmi	r4, #22595	; 0x5843
 800705c:	50495f4b 	subpl	r5, r9, fp, asr #30
 8007060:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
 8007064:	43494c46 	movtmi	r4, #40006	; 0x9c46
 8007068:	00000054 	andeq	r0, r0, r4, asr r0
 800706c:	50434844 	subpl	r4, r3, r4, asr #16
 8007070:	00000000 	andeq	r0, r0, r0
 8007074:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
 8007078:	00004349 	andeq	r4, r0, r9, asr #6
 800707c:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 8007080:	00000073 	andeq	r0, r0, r3, ror r0
 8007084:	3a43414d 	bcc	90d75c0 <_etext+0x10cfb24>
 8007088:	58323025 	ldmdapl	r2!, {r0, r2, r5, ip, sp}
 800708c:	3230253a 	eorscc	r2, r0, #243269632	; 0xe800000
 8007090:	30253a58 	eorcc	r3, r5, r8, asr sl
 8007094:	253a5832 	ldrcs	r5, [sl, #-2098]!	; 0xfffff7ce
 8007098:	3a583230 	bcc	9613960 <_etext+0x160bec4>
 800709c:	58323025 	ldmdapl	r2!, {r0, r2, r5, ip, sp}
 80070a0:	3230253a 	eorscc	r2, r0, #243269632	; 0xe800000
 80070a4:	00000058 	andeq	r0, r0, r8, asr r0
 80070a8:	3a504953 	bcc	94195fc <_etext+0x1411b60>
 80070ac:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80070b0:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80070b4:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 80070b8:	3a524147 	bcc	94975dc <_etext+0x148fb40>
 80070bc:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80070c0:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80070c4:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 80070c8:	3a425553 	bcc	909c61c <_etext+0x1094b80>
 80070cc:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80070d0:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80070d4:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 80070d8:	3a534e44 	bcc	94da9f0 <_etext+0x14d2f54>
 80070dc:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80070e0:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80070e4:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 80070e8:	44203e3e 	strtmi	r3, [r0], #-3646	; 0xfffff1c2
 80070ec:	20504348 	subscs	r4, r0, r8, asr #6
 80070f0:	6c696146 	stfvse	f6, [r9], #-280	; 0xfffffee8
 80070f4:	00006465 	andeq	r6, r0, r5, ror #8
 80070f8:	41534454 	cmpmi	r3, r4, asr r4
 80070fc:	492d5453 	pushmi	{r0, r1, r4, r6, sl, ip, lr}
 8007100:	5620544f 	strtpl	r5, [r0], -pc, asr #8
 8007104:	2e322e31 	mrccs	14, 1, r2, cr2, cr1, {1}
 8007108:	00000034 	andeq	r0, r0, r4, lsr r0
 800710c:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 8007110:	5020776f 	eorpl	r7, r0, pc, ror #14
 8007114:	4c205948 	stcmi	9, cr5, [r0], #-288	; 0xfffffee0
 8007118:	206b6e69 	rsbcs	r6, fp, r9, ror #28
 800711c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 8007120:	0000002e 	andeq	r0, r0, lr, lsr #32
 8007124:	2054454e 	subscs	r4, r4, lr, asr #10
 8007128:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
 800712c:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 8007130:	2064657a 	rsbcs	r6, r4, sl, ror r5
 8007134:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 8007138:	0000002e 	andeq	r0, r0, lr, lsr #32
 800713c:	4d205049 	stcmi	0, cr5, [r0, #-292]!	; 0xfffffedc
 8007140:	2065646f 	rsbcs	r6, r5, pc, ror #8
 8007144:	6f636e49 	svcvs	0x00636e49
 8007148:	63657272 	cmnvs	r5, #536870919	; 0x20000007
 800714c:	00002174 	andeq	r2, r0, r4, ror r1
 8007150:	2e636473 	mcrcs	4, 3, r6, cr3, cr3, {3}
 8007154:	61736474 	cmnvs	r3, r4, ror r4
 8007158:	632e7473 			; <UNDEFINED> instruction: 0x632e7473
 800715c:	0000006e 	andeq	r0, r0, lr, rrx
 8007160:	61736474 	cmnvs	r3, r4, ror r4
 8007164:	692d7473 	pushvs	{r0, r1, r4, r5, r6, sl, ip, sp, lr}
 8007168:	652d746f 	strvs	r7, [sp, #-1135]!	; 0xfffffb91
 800716c:	642d7478 	strtvs	r7, [sp], #-1144	; 0xfffffb88
 8007170:	00726f6f 	rsbseq	r6, r2, pc, ror #30
 8007174:	64747865 	ldrbtvs	r7, [r4], #-2149	; 0xfffff79b
 8007178:	00726f6f 	rsbseq	r6, r2, pc, ror #30
 800717c:	64747865 	ldrbtvs	r7, [r4], #-2149	; 0xfffff79b
 8007180:	31726f6f 	cmncc	r2, pc, ror #30
 8007184:	35343332 	ldrcc	r3, [r4, #-818]!	; 0xfffffcce
 8007188:	00000000 	andeq	r0, r0, r0
 800718c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
 8007190:	4e4f4320 	cdpmi	3, 4, cr4, cr15, cr0, {1}
 8007194:	6170204e 	cmnvs	r0, lr, asr #32
 8007198:	65206b63 	strvs	r6, [r0, #-2915]!	; 0xfffff49d
 800719c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 80071a0:	0000002e 	andeq	r0, r0, lr, lsr #32
 80071a4:	4e4e4f43 	cdpmi	15, 4, cr4, cr14, cr3, {2}
 80071a8:	204b4341 	subcs	r4, fp, r1, asr #6
 80071ac:	65707865 	ldrbvs	r7, [r0, #-2149]!	; 0xfffff79b
 80071b0:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
 80071b4:	00000021 	andeq	r0, r0, r1, lsr #32
 80071b8:	4e4e4f43 	cdpmi	15, 4, cr4, cr14, cr3, {2}
 80071bc:	204b4341 	subcs	r4, fp, r1, asr #6
 80071c0:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 80071c4:	00216465 	eoreq	r6, r1, r5, ror #8
 80071c8:	635f6474 	cmpvs	pc, #116, 8	; 0x74000000
 80071cc:	64756f6c 	ldrbtvs	r6, [r5], #-3948	; 0xfffff094
 80071d0:	7364742f 	cmnvc	r4, #788529152	; 0x2f000000
 80071d4:	2f747361 	svccs	0x00747361
 80071d8:	5f747865 	svcpl	0x00747865
 80071dc:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
 80071e0:	00000000 	andeq	r0, r0, r0
 80071e4:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
 80071e8:	42555320 	subsmi	r5, r5, #32, 6	; 0x80000000
 80071ec:	61702053 	cmnvs	r0, r3, asr r0
 80071f0:	65206b63 	strvs	r6, [r0, #-2915]!	; 0xfffff49d
 80071f4:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 80071f8:	0000002e 	andeq	r0, r0, lr, lsr #32
 80071fc:	41425553 	cmpmi	r2, r3, asr r5
 8007200:	65204b43 	strvs	r4, [r0, #-2883]!	; 0xfffff4bd
 8007204:	63657078 	cmnvs	r5, #120	; 0x78
 8007208:	21646574 	smccs	18004	; 0x4654
 800720c:	00000000 	andeq	r0, r0, r0
 8007210:	6b636f4c 	blvs	98e2f48 <_etext+0x18db4ac>
 8007214:	004e4f20 	subeq	r4, lr, r0, lsr #30
 8007218:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800721c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 8007220:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 8007224:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 8007228:	1d13818b 	ldfned	f0, [r3, #-556]	; 0xfffffdd4
 800722c:	74716d65 	ldrbtvc	r6, [r1], #-3429	; 0xfffff29b
 8007230:	00000074 	andeq	r0, r0, r4, ror r0

08007234 <F6x8>:
	...
 800723c:	00002f00 	andeq	r2, r0, r0, lsl #30
 8007240:	00070000 	andeq	r0, r7, r0
 8007244:	14000007 	strne	r0, [r0], #-7
 8007248:	147f147f 	ldrbtne	r1, [pc], #-1151	; 8007250 <F6x8+0x1c>
 800724c:	7f2a2400 	svcvc	0x002a2400
 8007250:	6200122a 	andvs	r1, r0, #-1610612734	; 0xa0000002
 8007254:	23130864 	tstcs	r3, #100, 16	; 0x640000
 8007258:	55493600 	strbpl	r3, [r9, #-1536]	; 0xfffffa00
 800725c:	00005022 	andeq	r5, r0, r2, lsr #32
 8007260:	00000305 	andeq	r0, r0, r5, lsl #6
 8007264:	221c0000 	andscs	r0, ip, #0
 8007268:	00000041 	andeq	r0, r0, r1, asr #32
 800726c:	001c2241 	andseq	r2, ip, r1, asr #4
 8007270:	3e081400 	cfcpyscc	mvf1, mvf8
 8007274:	08001408 	stmdaeq	r0, {r3, sl, ip}
 8007278:	08083e08 	stmdaeq	r8, {r3, r9, sl, fp, ip, sp}
 800727c:	a0000000 	andge	r0, r0, r0
 8007280:	08000060 	stmdaeq	r0, {r5, r6}
 8007284:	08080808 	stmdaeq	r8, {r3, fp}
 8007288:	60600000 	rsbvs	r0, r0, r0
 800728c:	20000000 	andcs	r0, r0, r0
 8007290:	02040810 	andeq	r0, r4, #16, 16	; 0x100000
 8007294:	49513e00 	ldmdbmi	r1, {r9, sl, fp, ip, sp}^
 8007298:	00003e45 	andeq	r3, r0, r5, asr #28
 800729c:	00407f42 	subeq	r7, r0, r2, asr #30
 80072a0:	51614200 	cmnpl	r1, r0, lsl #4
 80072a4:	21004649 	tstcs	r0, r9, asr #12
 80072a8:	314b4541 	cmpcc	fp, r1, asr #10
 80072ac:	12141800 	andsne	r1, r4, #0, 16
 80072b0:	2700107f 	smlsdxcs	r0, pc, r0, r1	; <UNPREDICTABLE>
 80072b4:	39454545 	stmdbcc	r5, {r0, r2, r6, r8, sl, lr}^
 80072b8:	494a3c00 	stmdbmi	sl, {sl, fp, ip, sp}^
 80072bc:	01003049 	tsteq	r0, r9, asr #32
 80072c0:	03050971 	movweq	r0, #22897	; 0x5971
 80072c4:	49493600 	stmdbmi	r9, {r9, sl, ip, sp}^
 80072c8:	06003649 	streq	r3, [r0], -r9, asr #12
 80072cc:	1e294949 	cdpne	9, 2, cr4, cr9, cr9, {2}
 80072d0:	36360000 	ldrtcc	r0, [r6], -r0
 80072d4:	00000000 	andeq	r0, r0, r0
 80072d8:	00003656 	andeq	r3, r0, r6, asr r6
 80072dc:	22140800 	andscs	r0, r4, #0, 16
 80072e0:	14000041 	strne	r0, [r0], #-65	; 0xffffffbf
 80072e4:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 80072e8:	22410000 	subcs	r0, r1, #0
 80072ec:	02000814 	andeq	r0, r0, #20, 16	; 0x140000
 80072f0:	06095101 	streq	r5, [r9], -r1, lsl #2
 80072f4:	59493200 	stmdbpl	r9, {r9, ip, sp}^
 80072f8:	7c003e51 	stcvc	14, cr3, [r0], {81}	; 0x51
 80072fc:	7c121112 	ldfvcs	f1, [r2], {18}
 8007300:	49497f00 	stmdbmi	r9, {r8, r9, sl, fp, ip, sp, lr}^
 8007304:	3e003649 	cfmadd32cc	mvax2, mvfx3, mvfx0, mvfx9
 8007308:	22414141 	subcs	r4, r1, #1073741840	; 0x40000010
 800730c:	41417f00 	cmpmi	r1, r0, lsl #30
 8007310:	7f001c22 	svcvc	0x00001c22
 8007314:	41494949 	cmpmi	r9, r9, asr #18
 8007318:	09097f00 	stmdbeq	r9, {r8, r9, sl, fp, ip, sp, lr}
 800731c:	3e000109 	adfccs	f0, f0, #1.0
 8007320:	7a494941 	bvc	925982c <_etext+0x1251d90>
 8007324:	08087f00 	stmdaeq	r8, {r8, r9, sl, fp, ip, sp, lr}
 8007328:	00007f08 	andeq	r7, r0, r8, lsl #30
 800732c:	00417f41 	subeq	r7, r1, r1, asr #30
 8007330:	41402000 	mrsmi	r2, (UNDEF: 64)
 8007334:	7f00013f 	svcvc	0x0000013f
 8007338:	41221408 			; <UNDEFINED> instruction: 0x41221408
 800733c:	40407f00 	submi	r7, r0, r0, lsl #30
 8007340:	7f004040 	svcvc	0x00004040
 8007344:	7f020c02 	svcvc	0x00020c02
 8007348:	08047f00 	stmdaeq	r4, {r8, r9, sl, fp, ip, sp, lr}
 800734c:	3e007f10 	mcrcc	15, 0, r7, cr0, cr0, {0}
 8007350:	3e414141 	dvfccsm	f4, f1, f1
 8007354:	09097f00 	stmdbeq	r9, {r8, r9, sl, fp, ip, sp, lr}
 8007358:	3e000609 	cfmadd32cc	mvax0, mvfx0, mvfx0, mvfx9
 800735c:	5e215141 	sufplsm	f5, f1, f1
 8007360:	19097f00 	stmdbne	r9, {r8, r9, sl, fp, ip, sp, lr}
 8007364:	46004629 	strmi	r4, [r0], -r9, lsr #12
 8007368:	31494949 	cmpcc	r9, r9, asr #18
 800736c:	7f010100 	svcvc	0x00010100
 8007370:	3f000101 	svccc	0x00000101
 8007374:	3f404040 	svccc	0x00404040
 8007378:	40201f00 	eormi	r1, r0, r0, lsl #30
 800737c:	3f001f20 	svccc	0x00001f20
 8007380:	3f403840 	svccc	0x00403840
 8007384:	08146300 	ldmdaeq	r4, {r8, r9, sp, lr}
 8007388:	07006314 	smladeq	r0, r4, r3, r6
 800738c:	07087008 	streq	r7, [r8, -r8]
 8007390:	49516100 	ldmdbmi	r1, {r8, sp, lr}^
 8007394:	00004345 	andeq	r4, r0, r5, asr #6
 8007398:	0041417f 	subeq	r4, r1, pc, ror r1
 800739c:	552a5500 	strpl	r5, [sl, #-1280]!	; 0xfffffb00
 80073a0:	0000552a 	andeq	r5, r0, sl, lsr #10
 80073a4:	007f4141 	rsbseq	r4, pc, r1, asr #2
 80073a8:	01020400 	tsteq	r2, r0, lsl #8
 80073ac:	40000402 	andmi	r0, r0, r2, lsl #8
 80073b0:	40404040 	submi	r4, r0, r0, asr #32
 80073b4:	02010000 	andeq	r0, r1, #0
 80073b8:	20000004 	andcs	r0, r0, r4
 80073bc:	78545454 	ldmdavc	r4, {r2, r4, r6, sl, ip, lr}^
 80073c0:	44487f00 	strbmi	r7, [r8], #-3840	; 0xfffff100
 80073c4:	38003844 	stmdacc	r0, {r2, r6, fp, ip, sp}
 80073c8:	20444444 	subcs	r4, r4, r4, asr #8
 80073cc:	44443800 	strbmi	r3, [r4], #-2048	; 0xfffff800
 80073d0:	38007f48 	stmdacc	r0, {r3, r6, r8, r9, sl, fp, ip, sp, lr}
 80073d4:	18545454 	ldmdane	r4, {r2, r4, r6, sl, ip, lr}^
 80073d8:	097e0800 	ldmdbeq	lr!, {fp}^
 80073dc:	18000201 	stmdane	r0, {r0, r9}
 80073e0:	7ca4a4a4 	cfstrsvc	mvf10, [r4], #656	; 0x290
 80073e4:	04087f00 	streq	r7, [r8], #-3840	; 0xfffff100
 80073e8:	00007804 	andeq	r7, r0, r4, lsl #16
 80073ec:	00407d44 	subeq	r7, r0, r4, asr #26
 80073f0:	84804000 	strhi	r4, [r0], #0
 80073f4:	7f00007d 	svcvc	0x0000007d
 80073f8:	00442810 	subeq	r2, r4, r0, lsl r8
 80073fc:	7f410000 	svcvc	0x00410000
 8007400:	7c000040 	stcvc	0, cr0, [r0], {64}	; 0x40
 8007404:	78041804 	stmdavc	r4, {r2, fp, ip}
 8007408:	04087c00 	streq	r7, [r8], #-3072	; 0xfffff400
 800740c:	38007804 	stmdacc	r0, {r2, fp, ip, sp, lr}
 8007410:	38444444 	stmdacc	r4, {r2, r6, sl, lr}^
 8007414:	2424fc00 	strtcs	pc, [r4], #-3072	; 0xfffff400
 8007418:	18001824 	stmdane	r0, {r2, r5, fp, ip}
 800741c:	fc182424 	ldc2	4, cr2, [r8], {36}	; 0x24
 8007420:	04087c00 	streq	r7, [r8], #-3072	; 0xfffff400
 8007424:	48000804 	stmdami	r0, {r2, fp}
 8007428:	20545454 	subscs	r5, r4, r4, asr r4
 800742c:	443f0400 	ldrtmi	r0, [pc], #-1024	; 8007434 <F6x8+0x200>
 8007430:	3c002040 	stccc	0, cr2, [r0], {64}	; 0x40
 8007434:	7c204040 	stcvc	0, cr4, [r0], #-256	; 0xffffff00
 8007438:	40201c00 	eormi	r1, r0, r0, lsl #24
 800743c:	3c001c20 	stccc	12, cr1, [r0], {32}
 8007440:	3c403040 	mcrrcc	0, 4, r3, r0, cr0
 8007444:	10284400 	eorne	r4, r8, r0, lsl #8
 8007448:	1c004428 	cfstrsne	mvf4, [r0], {40}	; 0x28
 800744c:	7ca0a0a0 	stcvc	0, cr10, [r0], #640	; 0x280
 8007450:	54644400 	strbtpl	r4, [r4], #-1024	; 0xfffffc00
 8007454:	1000444c 	andne	r4, r0, ip, asr #8
 8007458:	000082fe 	strdeq	r8, [r0], -lr
 800745c:	00ff0000 	rscseq	r0, pc, r0
 8007460:	00000000 	andeq	r0, r0, r0
 8007464:	0010fe82 	andseq	pc, r0, r2, lsl #29
 8007468:	04020204 	streq	r0, [r2], #-516	; 0xfffffdfc
 800746c:	14140204 	ldrne	r0, [r4], #-516	; 0xfffffdfc
 8007470:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec

08007474 <F8X16>:
	...
 8007484:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
 8007488:	00000000 	andeq	r0, r0, r0
 800748c:	33000000 	movwcc	r0, #0
 8007490:	00000030 	andeq	r0, r0, r0, lsr r0
 8007494:	060c1000 	streq	r1, [ip], -r0
 8007498:	00060c10 	andeq	r0, r6, r0, lsl ip
	...
 80074a4:	4078c040 	rsbsmi	ip, r8, r0, asr #32
 80074a8:	004078c0 	subeq	r7, r0, r0, asr #17
 80074ac:	04043f04 	streq	r3, [r4], #-3844	; 0xfffff0fc
 80074b0:	0004043f 	andeq	r0, r4, pc, lsr r4
 80074b4:	fc887000 	stc2	0, cr7, [r8], {0}
 80074b8:	00003008 	andeq	r3, r0, r8
 80074bc:	ff201800 			; <UNDEFINED> instruction: 0xff201800
 80074c0:	00001e21 	andeq	r1, r0, r1, lsr #28
 80074c4:	00f008f0 	ldrshteq	r0, [r0], #128	; 0x80
 80074c8:	000018e0 	andeq	r1, r0, r0, ror #17
 80074cc:	031c2100 	tsteq	ip, #0, 2
 80074d0:	001e211e 	andseq	r2, lr, lr, lsl r1
 80074d4:	8808f000 	stmdahi	r8, {ip, sp, lr, pc}
 80074d8:	00000070 	andeq	r0, r0, r0, ror r0
 80074dc:	2423211e 	strtcs	r2, [r3], #-286	; 0xfffffee2
 80074e0:	10212719 	eorne	r2, r1, r9, lsl r7
 80074e4:	000e1610 	andeq	r1, lr, r0, lsl r6
	...
 80074f4:	e0000000 	and	r0, r0, r0
 80074f8:	00020418 	andeq	r0, r2, r8, lsl r4
 80074fc:	07000000 	streq	r0, [r0, -r0]
 8007500:	00402018 	subeq	r2, r0, r8, lsl r0
 8007504:	18040200 	stmdane	r4, {r9}
 8007508:	000000e0 	andeq	r0, r0, r0, ror #1
 800750c:	18204000 	stmdane	r0!, {lr}
 8007510:	00000007 	andeq	r0, r0, r7
 8007514:	f0804040 			; <UNDEFINED> instruction: 0xf0804040
 8007518:	00404080 	subeq	r4, r0, r0, lsl #1
 800751c:	0f010202 	svceq	0x00010202
 8007520:	00020201 	andeq	r0, r2, r1, lsl #4
 8007524:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
 8007528:	00000000 	andeq	r0, r0, r0
 800752c:	1f010101 	svcne	0x00010101
 8007530:	00010101 	andeq	r0, r1, r1, lsl #2
	...
 800753c:	0070b080 	rsbseq	fp, r0, r0, lsl #1
	...
 800754c:	01010100 	mrseq	r0, (UNDEF: 17)
 8007550:	01010101 	tsteq	r1, r1, lsl #2
	...
 800755c:	00303000 	eorseq	r3, r0, r0
	...
 8007568:	04186080 	ldreq	r6, [r8], #-128	; 0xffffff80
 800756c:	06186000 	ldreq	r6, [r8], -r0
 8007570:	00000001 	andeq	r0, r0, r1
 8007574:	0810e000 	ldmdaeq	r0, {sp, lr, pc}
 8007578:	00e01008 	rsceq	r1, r0, r8
 800757c:	20100f00 	andscs	r0, r0, r0, lsl #30
 8007580:	000f1020 	andeq	r1, pc, r0, lsr #32
 8007584:	f8101000 			; <UNDEFINED> instruction: 0xf8101000
 8007588:	00000000 	andeq	r0, r0, r0
 800758c:	3f202000 	svccc	0x00202000
 8007590:	00002020 	andeq	r2, r0, r0, lsr #32
 8007594:	08087000 	stmdaeq	r8, {ip, sp, lr}
 8007598:	00708808 	rsbseq	r8, r0, r8, lsl #16
 800759c:	24283000 	strtcs	r3, [r8], #-0
 80075a0:	00302122 	eorseq	r2, r0, r2, lsr #2
 80075a4:	88083000 	stmdahi	r8, {ip, sp}
 80075a8:	00304888 	eorseq	r4, r0, r8, lsl #17
 80075ac:	20201800 	eorcs	r1, r0, r0, lsl #16
 80075b0:	000e1120 	andeq	r1, lr, r0, lsr #2
 80075b4:	20c00000 	sbccs	r0, r0, r0
 80075b8:	0000f810 	andeq	pc, r0, r0, lsl r8	; <UNPREDICTABLE>
 80075bc:	24040700 	strcs	r0, [r4], #-1792	; 0xfffff900
 80075c0:	00243f24 	eoreq	r3, r4, r4, lsr #30
 80075c4:	8808f800 	stmdahi	r8, {fp, ip, sp, lr, pc}
 80075c8:	00080888 	andeq	r0, r8, r8, lsl #17
 80075cc:	20211900 	eorcs	r1, r1, r0, lsl #18
 80075d0:	000e1120 	andeq	r1, lr, r0, lsr #2
 80075d4:	8810e000 	ldmdahi	r0, {sp, lr, pc}
 80075d8:	00001888 	andeq	r1, r0, r8, lsl #17
 80075dc:	20110f00 	andscs	r0, r1, r0, lsl #30
 80075e0:	000e1120 	andeq	r1, lr, r0, lsr #2
 80075e4:	08083800 	stmdaeq	r8, {fp, ip, sp}
 80075e8:	000838c8 	andeq	r3, r8, r8, asr #17
 80075ec:	3f000000 	svccc	0x00000000
 80075f0:	00000000 	andeq	r0, r0, r0
 80075f4:	08887000 	stmeq	r8, {ip, sp, lr}
 80075f8:	00708808 	rsbseq	r8, r0, r8, lsl #16
 80075fc:	21221c00 			; <UNDEFINED> instruction: 0x21221c00
 8007600:	001c2221 	andseq	r2, ip, r1, lsr #4
 8007604:	0810e000 	ldmdaeq	r0, {sp, lr, pc}
 8007608:	00e01008 	rsceq	r1, r0, r8
 800760c:	22310000 	eorscs	r0, r1, #0
 8007610:	000f1122 	andeq	r1, pc, r2, lsr #2
 8007614:	c0000000 	andgt	r0, r0, r0
 8007618:	000000c0 	andeq	r0, r0, r0, asr #1
 800761c:	30000000 	andcc	r0, r0, r0
 8007620:	00000030 	andeq	r0, r0, r0, lsr r0
 8007624:	80000000 	andhi	r0, r0, r0
 8007628:	00000000 	andeq	r0, r0, r0
 800762c:	60800000 	addvs	r0, r0, r0
 8007630:	00000000 	andeq	r0, r0, r0
 8007634:	40800000 	addmi	r0, r0, r0
 8007638:	00081020 	andeq	r1, r8, r0, lsr #32
 800763c:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
 8007640:	00201008 	eoreq	r1, r0, r8
 8007644:	40404040 	submi	r4, r0, r0, asr #32
 8007648:	00404040 	subeq	r4, r0, r0, asr #32
 800764c:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 8007650:	00040404 	andeq	r0, r4, r4, lsl #8
 8007654:	20100800 	andscs	r0, r0, r0, lsl #16
 8007658:	00008040 	andeq	r8, r0, r0, asr #32
 800765c:	08102000 	ldmdaeq	r0, {sp}
 8007660:	00010204 	andeq	r0, r1, r4, lsl #4
 8007664:	08487000 	stmdaeq	r8, {ip, sp, lr}^
 8007668:	00f00808 	rscseq	r0, r0, r8, lsl #16
 800766c:	30000000 	andcc	r0, r0, r0
 8007670:	00000136 	andeq	r0, r0, r6, lsr r1
 8007674:	28c830c0 	stmiacs	r8, {r6, r7, ip, sp}^
 8007678:	00e010e8 	rsceq	r1, r0, r8, ror #1
 800767c:	24271807 	strtcs	r1, [r7], #-2055	; 0xfffff7f9
 8007680:	000b1423 	andeq	r1, fp, r3, lsr #8
 8007684:	38c00000 	stmiacc	r0, {}^	; <UNPREDICTABLE>
 8007688:	000000e0 	andeq	r0, r0, r0, ror #1
 800768c:	02233c20 	eoreq	r3, r3, #32, 24	; 0x2000
 8007690:	20382702 	eorscs	r2, r8, r2, lsl #14
 8007694:	8888f808 	stmhi	r8, {r3, fp, ip, sp, lr, pc}
 8007698:	00007088 	andeq	r7, r0, r8, lsl #1
 800769c:	20203f20 	eorcs	r3, r0, r0, lsr #30
 80076a0:	000e1120 	andeq	r1, lr, r0, lsr #2
 80076a4:	080830c0 	stmdaeq	r8, {r6, r7, ip, sp}
 80076a8:	00380808 	eorseq	r0, r8, r8, lsl #16
 80076ac:	20201807 	eorcs	r1, r0, r7, lsl #16
 80076b0:	00081020 	andeq	r1, r8, r0, lsr #32
 80076b4:	0808f808 	stmdaeq	r8, {r3, fp, ip, sp, lr, pc}
 80076b8:	00e01008 	rsceq	r1, r0, r8
 80076bc:	20203f20 	eorcs	r3, r0, r0, lsr #30
 80076c0:	000f1020 	andeq	r1, pc, r0, lsr #32
 80076c4:	8888f808 	stmhi	r8, {r3, fp, ip, sp, lr, pc}
 80076c8:	001008e8 	andseq	r0, r0, r8, ror #17
 80076cc:	20203f20 	eorcs	r3, r0, r0, lsr #30
 80076d0:	00182023 	andseq	r2, r8, r3, lsr #32
 80076d4:	8888f808 	stmhi	r8, {r3, fp, ip, sp, lr, pc}
 80076d8:	001008e8 	andseq	r0, r0, r8, ror #17
 80076dc:	00203f20 	eoreq	r3, r0, r0, lsr #30
 80076e0:	00000003 	andeq	r0, r0, r3
 80076e4:	080830c0 	stmdaeq	r8, {r6, r7, ip, sp}
 80076e8:	00003808 	andeq	r3, r0, r8, lsl #16
 80076ec:	20201807 	eorcs	r1, r0, r7, lsl #16
 80076f0:	00021e22 	andeq	r1, r2, r2, lsr #28
 80076f4:	0008f808 	andeq	pc, r8, r8, lsl #16
 80076f8:	08f80800 	ldmeq	r8!, {fp}^
 80076fc:	01213f20 			; <UNDEFINED> instruction: 0x01213f20
 8007700:	203f2101 	eorscs	r2, pc, r1, lsl #2
 8007704:	f8080800 			; <UNDEFINED> instruction: 0xf8080800
 8007708:	00000808 	andeq	r0, r0, r8, lsl #16
 800770c:	3f202000 	svccc	0x00202000
 8007710:	00002020 	andeq	r2, r0, r0, lsr #32
 8007714:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
 8007718:	000808f8 	strdeq	r0, [r8], -r8
 800771c:	808080c0 	addhi	r8, r0, r0, asr #1
 8007720:	0000007f 	andeq	r0, r0, pc, ror r0
 8007724:	c088f808 	addgt	pc, r8, r8, lsl #16
 8007728:	00081828 	andeq	r1, r8, r8, lsr #16
 800772c:	01203f20 			; <UNDEFINED> instruction: 0x01203f20
 8007730:	00203826 	eoreq	r3, r0, r6, lsr #16
 8007734:	0008f808 	andeq	pc, r8, r8, lsl #16
 8007738:	00000000 	andeq	r0, r0, r0
 800773c:	20203f20 	eorcs	r3, r0, r0, lsr #30
 8007740:	00302020 	eorseq	r2, r0, r0, lsr #32
 8007744:	00f8f808 	rscseq	pc, r8, r8, lsl #16
 8007748:	0008f8f8 	strdeq	pc, [r8], -r8
 800774c:	3f003f20 	svccc	0x00003f20
 8007750:	00203f00 	eoreq	r3, r0, r0, lsl #30
 8007754:	c030f808 	eorsgt	pc, r0, r8, lsl #16
 8007758:	08f80800 	ldmeq	r8!, {fp}^
 800775c:	00203f20 	eoreq	r3, r0, r0, lsr #30
 8007760:	003f1807 	eorseq	r1, pc, r7, lsl #16
 8007764:	080810e0 	stmdaeq	r8, {r5, r6, r7, ip}
 8007768:	00e01008 	rsceq	r1, r0, r8
 800776c:	2020100f 	eorcs	r1, r0, pc
 8007770:	000f1020 	andeq	r1, pc, r0, lsr #32
 8007774:	0808f808 	stmdaeq	r8, {r3, fp, ip, sp, lr, pc}
 8007778:	00f00808 	rscseq	r0, r0, r8, lsl #16
 800777c:	01213f20 			; <UNDEFINED> instruction: 0x01213f20
 8007780:	00000101 	andeq	r0, r0, r1, lsl #2
 8007784:	080810e0 	stmdaeq	r8, {r5, r6, r7, ip}
 8007788:	00e01008 	rsceq	r1, r0, r8
 800778c:	2424180f 	strtcs	r1, [r4], #-2063	; 0xfffff7f1
 8007790:	004f5038 	subeq	r5, pc, r8, lsr r0	; <UNPREDICTABLE>
 8007794:	8888f808 	stmhi	r8, {r3, fp, ip, sp, lr, pc}
 8007798:	00708888 	rsbseq	r8, r0, r8, lsl #17
 800779c:	00203f20 	eoreq	r3, r0, r0, lsr #30
 80077a0:	20300c03 	eorscs	r0, r0, r3, lsl #24
 80077a4:	08887000 	stmeq	r8, {ip, sp, lr}
 80077a8:	00380808 	eorseq	r0, r8, r8, lsl #16
 80077ac:	21203800 			; <UNDEFINED> instruction: 0x21203800
 80077b0:	001c2221 	andseq	r2, ip, r1, lsr #4
 80077b4:	f8080818 			; <UNDEFINED> instruction: 0xf8080818
 80077b8:	00180808 	andseq	r0, r8, r8, lsl #16
 80077bc:	3f200000 	svccc	0x00200000
 80077c0:	00000020 	andeq	r0, r0, r0, lsr #32
 80077c4:	0008f808 	andeq	pc, r8, r8, lsl #16
 80077c8:	08f80800 	ldmeq	r8!, {fp}^
 80077cc:	20201f00 	eorcs	r1, r0, r0, lsl #30
 80077d0:	001f2020 	andseq	r2, pc, r0, lsr #32
 80077d4:	00887808 	addeq	r7, r8, r8, lsl #16
 80077d8:	0838c800 	ldmdaeq	r8!, {fp, lr, pc}
 80077dc:	38070000 	stmdacc	r7, {}	; <UNPREDICTABLE>
 80077e0:	0000010e 	andeq	r0, r0, lr, lsl #2
 80077e4:	f80008f8 			; <UNDEFINED> instruction: 0xf80008f8
 80077e8:	00f80800 	rscseq	r0, r8, r0, lsl #16
 80077ec:	00073c03 	andeq	r3, r7, r3, lsl #24
 80077f0:	00033c07 	andeq	r3, r3, r7, lsl #24
 80077f4:	80681808 	rsbhi	r1, r8, r8, lsl #16
 80077f8:	08186880 	ldmdaeq	r8, {r7, fp, sp, lr}
 80077fc:	032c3020 			; <UNDEFINED> instruction: 0x032c3020
 8007800:	20302c03 	eorscs	r2, r0, r3, lsl #24
 8007804:	00c83808 	sbceq	r3, r8, r8, lsl #16
 8007808:	000838c8 	andeq	r3, r8, r8, asr #17
 800780c:	3f200000 	svccc	0x00200000
 8007810:	00000020 	andeq	r0, r0, r0, lsr #32
 8007814:	08080810 	stmdaeq	r8, {r4, fp}
 8007818:	000838c8 	andeq	r3, r8, r8, asr #17
 800781c:	21263820 			; <UNDEFINED> instruction: 0x21263820
 8007820:	00182020 	andseq	r2, r8, r0, lsr #32
 8007824:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
 8007828:	00020202 	andeq	r0, r2, r2, lsl #4
 800782c:	7f000000 	svcvc	0x00000000
 8007830:	00404040 	subeq	r4, r0, r0, asr #32
 8007834:	c0300c00 	eorsgt	r0, r0, r0, lsl #24
 8007838:	00000000 	andeq	r0, r0, r0
 800783c:	01000000 	mrseq	r0, (UNDEF: 0)
 8007840:	00c03806 	sbceq	r3, r0, r6, lsl #16
 8007844:	02020200 	andeq	r0, r2, #0, 4
 8007848:	000000fe 	strdeq	r0, [r0], -lr
 800784c:	40404000 	submi	r4, r0, r0
 8007850:	0000007f 	andeq	r0, r0, pc, ror r0
 8007854:	02040000 	andeq	r0, r4, #0
 8007858:	00040202 	andeq	r0, r4, r2, lsl #4
	...
 800786c:	80808080 	addhi	r8, r0, r0, lsl #1
 8007870:	80808080 	addhi	r8, r0, r0, lsl #1
 8007874:	04020200 	streq	r0, [r2], #-512	; 0xfffffe00
	...
 8007884:	80800000 	addhi	r0, r0, r0
 8007888:	00008080 	andeq	r8, r0, r0, lsl #1
 800788c:	22241900 	eorcs	r1, r4, #0, 18
 8007890:	203f2222 	eorscs	r2, pc, r2, lsr #4
 8007894:	8000f808 	andhi	pc, r0, r8, lsl #16
 8007898:	00000080 	andeq	r0, r0, r0, lsl #1
 800789c:	20113f00 	andscs	r3, r1, r0, lsl #30
 80078a0:	000e1120 	andeq	r1, lr, r0, lsr #2
 80078a4:	80000000 	andhi	r0, r0, r0
 80078a8:	00008080 	andeq	r8, r0, r0, lsl #1
 80078ac:	20110e00 	andscs	r0, r1, r0, lsl #28
 80078b0:	00112020 	andseq	r2, r1, r0, lsr #32
 80078b4:	80000000 	andhi	r0, r0, r0
 80078b8:	00f88880 	rscseq	r8, r8, r0, lsl #17
 80078bc:	20110e00 	andscs	r0, r1, r0, lsl #28
 80078c0:	203f1020 	eorscs	r1, pc, r0, lsr #32
 80078c4:	80800000 	addhi	r0, r0, r0
 80078c8:	00008080 	andeq	r8, r0, r0, lsl #1
 80078cc:	22221f00 	eorcs	r1, r2, #0, 30
 80078d0:	00132222 	andseq	r2, r3, r2, lsr #4
 80078d4:	f0808000 			; <UNDEFINED> instruction: 0xf0808000
 80078d8:	18888888 	stmne	r8, {r3, r7, fp, pc}
 80078dc:	3f202000 	svccc	0x00202000
 80078e0:	00002020 	andeq	r2, r0, r0, lsr #32
 80078e4:	80800000 	addhi	r0, r0, r0
 80078e8:	00808080 	addeq	r8, r0, r0, lsl #1
 80078ec:	94946b00 	ldrls	r6, [r4], #2816	; 0xb00
 80078f0:	00609394 	mlseq	r0, r4, r3, r9
 80078f4:	8000f808 	andhi	pc, r0, r8, lsl #16
 80078f8:	00008080 	andeq	r8, r0, r0, lsl #1
 80078fc:	00213f20 	eoreq	r3, r1, r0, lsr #30
 8007900:	203f2000 	eorscs	r2, pc, r0
 8007904:	98988000 	ldmls	r8, {pc}
 8007908:	00000000 	andeq	r0, r0, r0
 800790c:	3f202000 	svccc	0x00202000
 8007910:	00002020 	andeq	r2, r0, r0, lsr #32
 8007914:	80000000 	andhi	r0, r0, r0
 8007918:	00009898 	muleq	r0, r8, r8
 800791c:	8080c000 	addhi	ip, r0, r0
 8007920:	00007f80 	andeq	r7, r0, r0, lsl #31
 8007924:	0000f808 	andeq	pc, r0, r8, lsl #16
 8007928:	00808080 	addeq	r8, r0, r0, lsl #1
 800792c:	02243f20 	eoreq	r3, r4, #32, 30	; 0x80
 8007930:	0020302d 	eoreq	r3, r0, sp, lsr #32
 8007934:	f8080800 			; <UNDEFINED> instruction: 0xf8080800
 8007938:	00000000 	andeq	r0, r0, r0
 800793c:	3f202000 	svccc	0x00202000
 8007940:	00002020 	andeq	r2, r0, r0, lsr #32
 8007944:	80808080 	addhi	r8, r0, r0, lsl #1
 8007948:	00808080 	addeq	r8, r0, r0, lsl #1
 800794c:	00203f20 	eoreq	r3, r0, r0, lsr #30
 8007950:	3f00203f 	svccc	0x0000203f
 8007954:	80008080 	andhi	r8, r0, r0, lsl #1
 8007958:	00008080 	andeq	r8, r0, r0, lsl #1
 800795c:	00213f20 	eoreq	r3, r1, r0, lsr #30
 8007960:	203f2000 	eorscs	r2, pc, r0
 8007964:	80800000 	addhi	r0, r0, r0
 8007968:	00008080 	andeq	r8, r0, r0, lsl #1
 800796c:	20201f00 	eorcs	r1, r0, r0, lsl #30
 8007970:	001f2020 	andseq	r2, pc, r0, lsr #32
 8007974:	80008080 	andhi	r8, r0, r0, lsl #1
 8007978:	00000080 	andeq	r0, r0, r0, lsl #1
 800797c:	20a1ff80 	adccs	pc, r1, r0, lsl #31
 8007980:	000e1120 	andeq	r1, lr, r0, lsr #2
 8007984:	80000000 	andhi	r0, r0, r0
 8007988:	00808080 	addeq	r8, r0, r0, lsl #1
 800798c:	20110e00 	andscs	r0, r1, r0, lsl #28
 8007990:	80ffa020 	rscshi	sl, pc, r0, lsr #32
 8007994:	00808080 	addeq	r8, r0, r0, lsl #1
 8007998:	00808080 	addeq	r8, r0, r0, lsl #1
 800799c:	213f2020 	teqcs	pc, r0, lsr #32
 80079a0:	00010020 	andeq	r0, r1, r0, lsr #32
 80079a4:	80800000 	addhi	r0, r0, r0
 80079a8:	00808080 	addeq	r8, r0, r0, lsl #1
 80079ac:	24243300 	strtcs	r3, [r4], #-768	; 0xfffffd00
 80079b0:	00192424 	andseq	r2, r9, r4, lsr #8
 80079b4:	e0808000 	add	r8, r0, r0
 80079b8:	00008080 	andeq	r8, r0, r0, lsl #1
 80079bc:	1f000000 	svcne	0x00000000
 80079c0:	00002020 	andeq	r2, r0, r0, lsr #32
 80079c4:	00008080 	andeq	r8, r0, r0, lsl #1
 80079c8:	00808000 	addeq	r8, r0, r0
 80079cc:	20201f00 	eorcs	r1, r0, r0, lsl #30
 80079d0:	203f1020 	eorscs	r1, pc, r0, lsr #32
 80079d4:	00808080 	addeq	r8, r0, r0, lsl #1
 80079d8:	80808000 	addhi	r8, r0, r0
 80079dc:	300e0100 	andcc	r0, lr, r0, lsl #2
 80079e0:	00010608 	andeq	r0, r1, r8, lsl #12
 80079e4:	80008080 	andhi	r8, r0, r0, lsl #1
 80079e8:	80808000 	addhi	r8, r0, r0
 80079ec:	030c300f 	movweq	r3, #49167	; 0xc00f
 80079f0:	000f300c 	andeq	r3, pc, ip
 80079f4:	00808000 	addeq	r8, r0, r0
 80079f8:	00808080 	addeq	r8, r0, r0, lsl #1
 80079fc:	2e312000 	cdpcs	0, 3, cr2, cr1, cr0, {0}
 8007a00:	0020310e 	eoreq	r3, r0, lr, lsl #2
 8007a04:	00808080 	addeq	r8, r0, r0, lsl #1
 8007a08:	80808000 	addhi	r8, r0, r0
 8007a0c:	708e8180 	addvc	r8, lr, r0, lsl #3
 8007a10:	00010618 	andeq	r0, r1, r8, lsl r6
 8007a14:	80808000 	addhi	r8, r0, r0
 8007a18:	00808080 	addeq	r8, r0, r0, lsl #1
 8007a1c:	2c302100 	ldfcss	f2, [r0], #-0
 8007a20:	00302122 	eorseq	r2, r0, r2, lsr #2
 8007a24:	00000000 	andeq	r0, r0, r0
 8007a28:	02027c80 	andeq	r7, r2, #128, 24	; 0x8000
 8007a2c:	00000000 	andeq	r0, r0, r0
 8007a30:	40403f00 	submi	r3, r0, r0, lsl #30
 8007a34:	00000000 	andeq	r0, r0, r0
 8007a38:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 8007a3c:	00000000 	andeq	r0, r0, r0
 8007a40:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 8007a44:	7c020200 	sfmvc	f0, 4, [r2], {-0}
 8007a48:	00000080 	andeq	r0, r0, r0, lsl #1
 8007a4c:	3f404000 	svccc	0x00404000
 8007a50:	00000000 	andeq	r0, r0, r0
 8007a54:	01010600 	tsteq	r1, r0, lsl #12
 8007a58:	04040202 	streq	r0, [r4], #-514	; 0xfffffdfe
	...
 8007a64:	2d230043 	stccs	0, cr0, [r3, #-268]!	; 0xfffffef4
 8007a68:	00202b30 	eoreq	r2, r0, r0, lsr fp
 8007a6c:	004c6c68 	subeq	r6, ip, r8, ror #24
 8007a70:	45676665 	strbmi	r6, [r7, #-1637]!	; 0xfffff99b
 8007a74:	30004746 	andcc	r4, r0, r6, asr #14
 8007a78:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 8007a7c:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 8007a80:	43424139 	movtmi	r4, #8505	; 0x2139
 8007a84:	00464544 	subeq	r4, r6, r4, asr #10
 8007a88:	33323130 	teqcc	r2, #48, 2
 8007a8c:	37363534 			; <UNDEFINED> instruction: 0x37363534
 8007a90:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
 8007a94:	66656463 	strbtvs	r6, [r5], -r3, ror #8
 8007a98:	00000000 	andeq	r0, r0, r0

Disassembly of section .data:

20000000 <_sdata>:
20000000:	401000ae 	andsmi	r0, r0, lr, lsr #1
20000004:	a1ff81b0 	ldrhge	r8, [pc, #16]	; 2000001c <sock_any_port>
20000008:	c83fa8a6 	ldmdagt	pc!, {r1, r2, r5, r7, fp, sp, pc}	; <UNPREDICTABLE>
2000000c:	80d500d3 	ldrsbhi	r0, [r5], #3
20000010:	f1d905d8 			; <UNDEFINED> instruction: 0xf1d905d8
20000014:	30db12da 	ldrsbcc	r1, [fp], #42	; 0x2a
20000018:	00af148d 	adceq	r1, pc, sp, lsl #9

2000001c <sock_any_port>:
2000001c:	0000c000 	andeq	ip, r0, r0

20000020 <WIZCHIP>:
20000020:	35570201 	ldrbcc	r0, [r7, #-513]	; 0xfffffdff
20000024:	00303035 	eorseq	r3, r0, r5, lsr r0
20000028:	080014e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, sl, ip}
2000002c:	080014f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sl, ip}
20000030:	08001501 	stmdaeq	r0, {r0, r8, sl, ip}
20000034:	0800150d 	stmdaeq	r0, {r0, r2, r3, r8, sl, ip}
20000038:	08001519 	stmdaeq	r0, {r0, r3, r4, r8, sl, ip}
2000003c:	08001535 	stmdaeq	r0, {r0, r2, r4, r5, r8, sl, ip}

20000040 <HOST_NAME>:
20000040:	41534454 	cmpmi	r3, r4, asr r4
20000044:	00005453 	andeq	r5, r0, r3, asr r4

20000048 <dhcp_ip_assign>:
20000048:	0800244d 	stmdaeq	r0, {r0, r2, r3, r6, sl, sp}

2000004c <dhcp_ip_update>:
2000004c:	08002459 	stmdaeq	r0, {r0, r3, r4, r6, sl, sp}

20000050 <dhcp_ip_conflict>:
20000050:	0800247d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, sl, sp}

20000054 <APBAHBPrescTable>:
20000054:	00000000 	andeq	r0, r0, r0
20000058:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
2000005c:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20000060:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20000064 <ADCPrescTable>:
20000064:	08060402 	stmdaeq	r6, {r1, sl}

20000068 <gWIZNETINFO>:
20000068:	00dc0800 	sbcseq	r0, ip, r0, lsl #16
2000006c:	000acdab 	andeq	ip, sl, fp, lsr #27
20000070:	00ffbc00 	rscseq	fp, pc, r0, lsl #24
20000074:	000a0000 	andeq	r0, sl, r0
20000078:	08080100 	stmdaeq	r8, {r8}
2000007c:	00020808 	andeq	r0, r2, r8, lsl #16

20000080 <secondary_dns_server>:
20000080:	04040808 	streq	r0, [r4], #-2056	; 0xfffff7f8

20000084 <impure_data>:
	...
200000a4:	08007a64 	stmdaeq	r0, {r2, r5, r6, r9, fp, ip, sp, lr}
	...

200000e4 <_impure_ptr>:
200000e4:	20000084 	andcs	r0, r0, r4, lsl #1

Disassembly of section .bss:

200000e8 <__bss_start__>:
	...

200000ea <sock_is_sending>:
	...

200000ec <sock_remained_size>:
	...

200000fc <sock_pack_info>:
	...

20000104 <_DNS_>:
20000104:	00000000 	andeq	r0, r0, r0

20000108 <_DHCP_>:
20000108:	00000000 	andeq	r0, r0, r0

2000010c <DHCP_allocated_ip>:
2000010c:	00000000 	andeq	r0, r0, r0

20000110 <DHCP_allocated_gw>:
20000110:	00000000 	andeq	r0, r0, r0

20000114 <DHCP_allocated_sn>:
20000114:	00000000 	andeq	r0, r0, r0

20000118 <DHCP_allocated_dns>:
20000118:	00000000 	andeq	r0, r0, r0

2000011c <wizchip_mac>:
	...

20000124 <Cip>:
20000124:	00000000 	andeq	r0, r0, r0

20000128 <retry_count.6000>:
20000128:	00000000 	andeq	r0, r0, r0

2000012c <Interval_counter>:
2000012c:	00000000 	andeq	r0, r0, r0

20000130 <Timer2_Counter>:
20000130:	00000000 	andeq	r0, r0, r0

20000134 <ip_configed>:
	...

20000135 <lock_on>:
20000135:	00000000 	andeq	r0, r0, r0

20000138 <__malloc_sbrk_start>:
20000138:	00000000 	andeq	r0, r0, r0

2000013c <__malloc_free_list>:
2000013c:	00000000 	andeq	r0, r0, r0

20000140 <heap_end.4079>:
20000140:	00000000 	andeq	r0, r0, r0

20000144 <dhcp_state>:
20000144:	00000000 	andeq	r0, r0, r0

20000148 <DHCP_SHA>:
	...

20000150 <OLD_SIP>:
20000150:	00000000 	andeq	r0, r0, r0

20000154 <DHCP_XID>:
20000154:	00000000 	andeq	r0, r0, r0

20000158 <DHCP_SIP>:
20000158:	00000000 	andeq	r0, r0, r0

2000015c <my_time>:
2000015c:	00000000 	andeq	r0, r0, r0

20000160 <next_time>:
20000160:	00000000 	andeq	r0, r0, r0

20000164 <retry_count>:
20000164:	00000000 	andeq	r0, r0, r0

20000168 <lease_time>:
20000168:	00000000 	andeq	r0, r0, r0

2000016c <MSG>:
2000016c:	00000000 	andeq	r0, r0, r0

20000170 <DHCP_SOCKET>:
20000170:	00000000 	andeq	r0, r0, r0

20000174 <dns_buf>:
20000174:	00000000 	andeq	r0, r0, r0

20000178 <DNS_SOCKET>:
20000178:	00000000 	andeq	r0, r0, r0

2000017c <dns_time>:
2000017c:	00000000 	andeq	r0, r0, r0

20000180 <MSG_ID>:
20000180:	00000000 	andeq	r0, r0, r0

20000184 <packet_buffer>:
	...

20000584 <broker>:
	...

200005e0 <gDATABUF>:
	...

20000de0 <errno>:
20000de0:	00000000 	andeq	r0, r0, r0

Disassembly of section ._user_heap_stack:

20000de4 <end>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003041 	andeq	r3, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000026 	andeq	r0, r0, r6, lsr #32
*********************************************************************************************************
*/
void DHCP_timerHandler(void)
{
	my_time++;
}
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
  {
    bitstatus = SET;
  1c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
  }
  else
  {
    bitstatus = RESET;
  20:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  }
  /* Return the flag status */
  return bitstatus;
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
}
  28:	1a011803 	bne	4603c <_Min_Stack_Size+0x45e3c>
  2c:	22061e01 	andcs	r1, r6, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000430 	andeq	r0, r0, r0, lsr r4
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000181 	andeq	r0, r0, r1, lsl #3
      10:	00023401 	andeq	r3, r2, r1, lsl #8
	...
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
      20:	06010200 	streq	r0, [r1], -r0, lsl #4
  }
  /* Return the flag status */
  return bitstatus;
      24:	000000c3 	andeq	r0, r0, r3, asr #1
}
      28:	00009303 	andeq	r9, r0, r3, lsl #6
      2c:	331d0200 	tstcc	sp, #0, 4
      30:	02000000 	andeq	r0, r0, #0
      34:	00c10801 	sbceq	r0, r1, r1, lsl #16
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
      38:	02020000 	andeq	r0, r2, #0
      3c:	00005105 	andeq	r5, r0, r5, lsl #2
      40:	002e0300 	eoreq	r0, lr, r0, lsl #6
      44:	2b020000 	blcs	8004c <_Min_Stack_Size+0x7fe4c>
      48:	0000004c 	andeq	r0, r0, ip, asr #32
      4c:	23070202 	movwcs	r0, #29186	; 0x7202
   else
   {
      WIZCHIP.IF.BUS._read_byte   = bus_rb;
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
}
      50:	02000001 	andeq	r0, r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
      54:	006d0504 	rsbeq	r0, sp, r4, lsl #10
      58:	23030000 	movwcs	r0, #12288	; 0x3000
      5c:	02000000 	andeq	r0, r0, #0
      60:	00006541 	andeq	r6, r0, r1, asr #10
      64:	07040200 	streq	r0, [r4, -r0, lsl #4]
      68:	000000fa 	strdeq	r0, [r0], -sl
      6c:	68050802 	stmdavs	r5, {r1, fp}
      70:	02000000 	andeq	r0, r0, #0
      74:	00f50708 	rscseq	r0, r5, r8, lsl #14
      78:	04040000 	streq	r0, [r4], #-0
      7c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
      80:	07040200 	streq	r0, [r4, -r0, lsl #4]
      84:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
      88:	00009503 	andeq	r9, r0, r3, lsl #10
      8c:	28140300 	ldmdacs	r4, {r8, r9}
      90:	03000000 	movweq	r0, #0
      94:	00000030 	andeq	r0, r0, r0, lsr r0
      98:	00411a03 	subeq	r1, r1, r3, lsl #20
      9c:	25030000 	strcs	r0, [r3, #-0]
      a0:	03000000 	movweq	r0, #0
      a4:	00005a20 	andeq	r5, r0, r0, lsr #20
      a8:	07040200 	streq	r0, [r4, -r0, lsl #4]
      ac:	00000015 	andeq	r0, r0, r5, lsl r0
      b0:	00009e05 	andeq	r9, r0, r5, lsl #28
	    }
        /* 等待最后一个数据发送完 */
        _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
	}
    
}
      b4:	04740600 	ldrbteq	r0, [r4], #-1536	; 0xfffffa00
      b8:	0001a29b 	muleq	r1, fp, r2
      bc:	00430700 	subeq	r0, r3, r0, lsl #14
      c0:	9d040000 	stcls	0, cr0, [r4, #-0]
      c4:	000001a2 	andeq	r0, r0, r2, lsr #3
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
}
      c8:	005b0700 	subseq	r0, fp, r0, lsl #14
      cc:	9e040000 	cdpls	0, 0, cr0, cr4, cr0, {0}
      d0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
      d4:	01360704 	teqeq	r6, r4, lsl #14
      d8:	9f040000 	svcls	0x00040000
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
      dc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
      e0:	00cf0708 	sbceq	r0, pc, r8, lsl #14
      e4:	a0040000 	andge	r0, r4, r0
      e8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
      ec:	4353080c 	cmpmi	r3, #12, 16	; 0xc0000
      f0:	a1040052 	qaddge	r0, r2, r4
      f4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
      f8:	43430810 	movtmi	r0, #14352	; 0x3810
      fc:	a2040052 	andge	r0, r4, #82	; 0x52
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }
  
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
     100:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     104:	48530814 	ldmdami	r3, {r2, r4, fp}^
     108:	a3040050 	movwge	r0, #16464	; 0x4050
  {
    /* Set the default values */
    i2sdiv = 2;
     10c:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
    i2sodd = 0;
     110:	010c0718 	tsteq	ip, r8, lsl r7
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
     114:	a4040000 	strge	r0, [r4], #-0
     118:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     11c:	00a20724 	adceq	r0, r2, r4, lsr #14
     120:	a5040000 	strge	r0, [r4, #-0]
     124:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     128:	016b0728 	cmneq	fp, r8, lsr #14
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
     12c:	a6040000 	strge	r0, [r4], -r0
     130:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
     134:	0156072c 	cmpeq	r6, ip, lsr #14
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
     138:	a7040000 	strge	r0, [r4, -r0]
     13c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     140:	01120730 	tsteq	r2, r0, lsr r7
     144:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
     148:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     14c:	00760734 	rsbseq	r0, r6, r4, lsr r7
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;   
     150:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
     154:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
}
     158:	020b0738 	andeq	r0, fp, #56, 14	; 0xe00000
     15c:	aa040000 	bge	100164 <_Min_Stack_Size+0xfff64>
     160:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
         break;
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
         *(uint16_t*) arg = getSn_KPALVTR(sn);
         break;
     164:	4650083c 			; <UNDEFINED> instruction: 0x4650083c
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     168:	ab040052 	blge	1002b8 <_Min_Stack_Size+0x1000b8>
     16c:	000001cc 	andeq	r0, r0, ip, asr #3
     170:	46440840 	strbmi	r0, [r4], -r0, asr #16
     174:	ac040052 	stcge	0, cr0, [r4], {82}	; 0x52
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     178:	000001a2 	andeq	r0, r0, r2, lsr #3
     17c:	44410848 	strbmi	r0, [r1], #-2120	; 0xfffff7b8
     180:	ad040052 	stcge	0, cr0, [r4, #-328]	; 0xfffffeb8
     184:	000001a2 	andeq	r0, r0, r2, lsr #3
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
     188:	0170074c 	cmneq	r0, ip, asr #14
     18c:	ae040000 	cdpge	0, 0, cr0, cr4, cr0, {0}
     190:	000001e6 	andeq	r0, r0, r6, ror #3
     194:	01510750 	cmpeq	r1, r0, asr r7
     198:	af040000 	svcge	0x00040000
     19c:	00000200 	andeq	r0, r0, r0, lsl #4
         break;
     1a0:	b0090060 	andlt	r0, r9, r0, rrx
      case SO_REMAINSIZE:
         if(getSn_MR(sn) == Sn_MR_TCP)
     1a4:	0a000000 	beq	1ac <_Min_Heap_Size+0x1ac>
     1a8:	00000088 	andeq	r0, r0, r8, lsl #1
     1ac:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
     1b0:	0000a90b 	andeq	sl, r0, fp, lsl #18
     1b4:	05000b00 	streq	r0, [r0, #-2816]	; 0xfffff500
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1b8:	000001a7 	andeq	r0, r0, r7, lsr #3
     1bc:	00009e0a 	andeq	r9, r0, sl, lsl #28
     1c0:	0001cc00 	andeq	ip, r1, r0, lsl #24
     1c4:	00a90b00 	adceq	r0, r9, r0, lsl #22
         else
            *(uint16_t*)arg = sock_remained_size[sn];
     1c8:	00010000 	andeq	r0, r1, r0
     1cc:	0001d109 	andeq	sp, r1, r9, lsl #2
     1d0:	01bc0500 			; <UNDEFINED> instruction: 0x01bc0500
         break;
     1d4:	9e0a0000 	cdpls	0, 0, cr0, cr10, cr0, {0}
      case SO_PACKINFO:
         CHECK_SOCKMODE(Sn_MR_TCP);
     1d8:	e6000000 	str	r0, [r0], -r0
     1dc:	0b000001 	bleq	1e8 <_Min_Heap_Size+0x1e8>
     1e0:	000000a9 	andeq	r0, r0, r9, lsr #1
     1e4:	eb090003 	bl	2401f8 <_Min_Stack_Size+0x23fff8>
     1e8:	05000001 	streq	r0, [r0, #-1]
     1ec:	000001d6 	ldrdeq	r0, [r0], -r6
     1f0:	00009e0a 	andeq	r9, r0, sl, lsl #28
         *(uint8_t*)arg = sock_pack_info[sn];
     1f4:	00020000 	andeq	r0, r2, r0
     1f8:	00a90b00 	adceq	r0, r9, r0, lsl #22
         break;
     1fc:	00040000 	andeq	r0, r4, r0
      default:
         return SOCKERR_SOCKOPT;
     200:	00020509 	andeq	r0, r2, r9, lsl #10
   }
   return SOCK_OK;
     204:	01f00500 	mvnseq	r0, r0, lsl #10
}
     208:	d5030000 	strle	r0, [r3, #-0]
     20c:	04000000 	streq	r0, [r0], #-0
     210:	0000b5b0 			; <UNDEFINED> instruction: 0x0000b5b0
     214:	05010c00 	streq	r0, [r1, #-3072]	; 0xfffff400
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    }  
  }
}
     218:	022b0207 	eoreq	r0, fp, #1879048192	; 0x70000000
     21c:	8b0d0000 	blhi	340224 <_Min_Stack_Size+0x340024>
     220:	0000001c 	andeq	r0, r0, ip, lsl r0
     224:	5445530e 	strbpl	r5, [r5], #-782	; 0xfffffcf2
     228:	0f000100 	svceq	0x00000100
       fixed_header[1] = fixed_header[1] | 0x80;
       // second byte is number of 128s
       fixed_header[2] = remainLen / 128;
   }

	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     22c:	03850524 	orreq	r0, r5, #36, 10	; 0x9000000
     230:	000002a7 	andeq	r0, r0, r7, lsr #5
     234:	52434110 	subpl	r4, r3, #16, 2
     238:	03870500 	orreq	r0, r7, #0, 10
     23c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     240:	00631100 	rsbeq	r1, r3, r0, lsl #2
     244:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
     248:	0000b003 	andeq	fp, r0, r3
     24c:	60110400 	andsvs	r0, r1, r0, lsl #8
	memset(packet, 0, sizeof(packet));
     250:	05000000 	streq	r0, [r0, #-0]
     254:	00b00389 	adcseq	r0, r0, r9, lsl #7
     258:	10080000 	andne	r0, r8, r0
	memcpy(packet, fixed_header, sizeof(fixed_header));
     25c:	05005253 	streq	r5, [r0, #-595]	; 0xfffffdad
     260:	00b0038a 	adcseq	r0, r0, sl, lsl #7
     264:	100c0000 	andne	r0, ip, r0
     268:	05005243 	streq	r5, [r0, #-579]	; 0xfffffdbd
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	00b0038b 	adcseq	r0, r0, fp, lsl #7
     270:	10100000 	andsne	r0, r0, r0
     274:	05005241 	streq	r5, [r0, #-577]	; 0xfffffdbf
     278:	00b0038c 	adcseq	r0, r0, ip, lsl #7
     27c:	11140000 	tstne	r4, r0
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     280:	00000210 	andeq	r0, r0, r0, lsl r2
     284:	b0038d05 	andlt	r8, r3, r5, lsl #26
     288:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     28c:	52424f10 	subpl	r4, r2, #16, 30	; 0x40
     290:	038e0500 	orreq	r0, lr, #0, 10
     294:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>

	// Send the packet
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     298:	009d111c 	addseq	r1, sp, ip, lsl r1
     29c:	8f050000 	svchi	0x00050000
     2a0:	0000b003 	andeq	fp, r0, r3
     2a4:	12002000 	andne	r2, r0, #0
     2a8:	00000219 	andeq	r0, r0, r9, lsl r2
     2ac:	2b039805 	blcs	e62c8 <_Min_Stack_Size+0xe60c8>
		return -1;
     2b0:	0f000002 	svceq	0x00000002
	}

	return 1;
     2b4:	04340528 	ldrteq	r0, [r4], #-1320	; 0xfffffad8
     2b8:	0000033e 	andeq	r0, r0, lr, lsr r3
}
     2bc:	00524310 	subseq	r4, r2, r0, lsl r3
     2c0:	b0043605 	andlt	r3, r4, r5, lsl #12
     2c4:	00000000 	andeq	r0, r0, r0
     2c8:	0021a211 	eoreq	sl, r1, r1, lsl r2
     2cc:	04370500 	ldrteq	r0, [r7], #-1280	; 0xfffffb00
     2d0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     2d4:	49431004 	stmdbmi	r3, {r2, ip}^
     2d8:	38050052 	stmdacc	r5, {r1, r4, r6}
     2dc:	0000b004 	andeq	fp, r0, r4
     2e0:	8a110800 	bhi	4422e8 <_Min_Stack_Size+0x4420e8>
     2e4:	05000000 	streq	r0, [r0, #-0]
     2e8:	00b00439 	adcseq	r0, r0, r9, lsr r4
     2ec:	110c0000 	mrsne	r0, (UNDEF: 12)
     2f0:	0000000c 	andeq	r0, r0, ip
     2f4:	b0043a05 	andlt	r3, r4, r5, lsl #20
     2f8:	10000000 	andne	r0, r0, r0
     2fc:	00008311 	andeq	r8, r0, r1, lsl r3
     300:	043b0500 	ldrteq	r0, [fp], #-1280	; 0xfffffb00
     304:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     308:	00de1114 	sbcseq	r1, lr, r4, lsl r1
     30c:	3c050000 	stccc	0, cr0, [r5], {-0}
     310:	0000b004 	andeq	fp, r0, r4
     314:	49111800 	ldmdbmi	r1, {fp, ip}
     318:	05000000 	streq	r0, [r0, #-0]
     31c:	00b0043d 	adcseq	r0, r0, sp, lsr r4
     320:	111c0000 	tstne	ip, r0
     324:	0000001e 	andeq	r0, r0, lr, lsl r0
     328:	b0043e05 	andlt	r3, r4, r5, lsl #28
     32c:	20000000 	andcs	r0, r0, r0
     330:	52534310 	subspl	r4, r3, #16, 6	; 0x40000000
     334:	043f0500 	ldrteq	r0, [pc], #-1280	; 33c <_Min_Stack_Size+0x13c>
     338:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     33c:	00120024 	andseq	r0, r2, r4, lsr #32
     340:	05000000 	streq	r0, [r0, #-0]
     344:	02b3044a 	adcseq	r0, r3, #1241513984	; 0x4a000000
     348:	18130000 	ldmdane	r3, {}	; <UNPREDICTABLE>
     34c:	01000001 	tsteq	r0, r1
     350:	00010cd4 	ldrdeq	r0, [r1], -r4
     354:	00006808 	andeq	r6, r0, r8, lsl #16
     358:	149c0100 	ldrne	r0, [ip], #256	; 0x100
     35c:	0000013b 	andeq	r0, r0, fp, lsr r1
     360:	00013201 	andeq	r3, r1, r1, lsl #4
     364:	dc000000 	stcle	0, cr0, [r0], {-0}
     368:	01000000 	mrseq	r0, (UNDEF: 0)
     36c:	00039f9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
     370:	6d741500 	cfldr64vs	mvdx1, [r4, #-0]
     374:	34010070 	strcc	r0, [r1], #-112	; 0xffffff90
     378:	00009e01 	andeq	r9, r0, r1, lsl #28
     37c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     380:	00007b16 	andeq	r7, r0, r6, lsl fp
     384:	01340100 	teqeq	r4, r0, lsl #2
     388:	0000009e 	muleq	r0, lr, r0
     38c:	16709102 	ldrbtne	r9, [r0], -r2, lsl #2
     390:	000000b7 	strheq	r0, [r0], -r7
     394:	9e013401 	cdpls	4, 0, cr3, cr1, cr1, {0}
     398:	02000000 	andeq	r0, r0, #0
     39c:	17006c91 			; <UNDEFINED> instruction: 0x17006c91
     3a0:	00000175 	andeq	r0, r0, r5, ror r1
     3a4:	7401a301 	strvc	sl, [r1], #-769	; 0xfffffcff
     3a8:	0a080001 	beq	2003b4 <_Min_Stack_Size+0x2001b4>
     3ac:	01000000 	mrseq	r0, (UNDEF: 0)
     3b0:	00a7189c 	umlaleq	r1, r7, ip, r8
     3b4:	dc010000 	stcle	0, cr0, [r1], {-0}
     3b8:	00018003 	andeq	r8, r1, r3
     3bc:	00010008 	andeq	r0, r1, r8
     3c0:	e69c0100 	ldr	r0, [ip], r0, lsl #2
     3c4:	16000003 	strne	r0, [r0], -r3
     3c8:	000000e6 	andeq	r0, r0, r6, ror #1
     3cc:	b003de01 	andlt	sp, r3, r1, lsl #28
     3d0:	02000000 	andeq	r0, r0, #0
     3d4:	39167491 	ldmdbcc	r6, {r0, r4, r7, sl, ip, sp, lr}
     3d8:	01000000 	mrseq	r0, (UNDEF: 0)
     3dc:	00b003de 	ldrsbteq	r0, [r0], lr
     3e0:	91020000 	mrsls	r0, (UNDEF: 2)
     3e4:	27190070 			; <UNDEFINED> instruction: 0x27190070
     3e8:	04000002 	streq	r0, [r0], #-2
     3ec:	03f206ce 	mvnseq	r0, #216006656	; 0xce00000
     3f0:	7a050000 	bvc	1403f8 <_Min_Stack_Size+0x1401f8>
     3f4:	1a000000 	bne	3fc <_Min_Stack_Size+0x1fc>
     3f8:	0000015b 	andeq	r0, r0, fp, asr r1
     3fc:	009ea201 	addseq	sl, lr, r1, lsl #4
     400:	03050000 	movweq	r0, #20480	; 0x5000
     404:	00000000 	andeq	r0, r0, r0
     408:	0000880a 	andeq	r8, r0, sl, lsl #16
     40c:	00041800 	andeq	r1, r4, r0, lsl #16
     410:	00a90b00 	adceq	r0, r9, r0, lsl #22
     414:	000f0000 	andeq	r0, pc, r0
     418:	001b461a 	andseq	r4, fp, sl, lsl r6
     41c:	29a70100 	stmibcs	r7!, {r8}
     420:	05000004 	streq	r0, [r0, #-4]
     424:	00000003 	andeq	r0, r0, r3
     428:	042e0900 	strteq	r0, [lr], #-2304	; 0xfffff700
     42c:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
     430:	00000004 	andeq	r0, r0, r4
     434:	00000540 	andeq	r0, r0, r0, asr #10
     438:	01770004 	cmneq	r7, r4
     43c:	01040000 	mrseq	r0, (UNDEF: 4)
     440:	00000181 	andeq	r0, r0, r1, lsl #3
     444:	00037001 	andeq	r7, r3, r1
     448:	00030300 	andeq	r0, r3, r0, lsl #6
     44c:	00002800 	andeq	r2, r0, r0, lsl #16
     450:	00000000 	andeq	r0, r0, r0
     454:	0001b900 	andeq	fp, r1, r0, lsl #18
     458:	06010200 	streq	r0, [r1], -r0, lsl #4
     45c:	000000c3 	andeq	r0, r0, r3, asr #1
     460:	00009303 	andeq	r9, r0, r3, lsl #6
     464:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
     468:	02000000 	andeq	r0, r0, #0
     46c:	00c10801 	sbceq	r0, r1, r1, lsl #16
     470:	02020000 	andeq	r0, r2, #0
     474:	00005105 	andeq	r5, r0, r5, lsl #2
     478:	002e0300 	eoreq	r0, lr, r0, lsl #6
     47c:	2b020000 	blcs	80484 <_Min_Stack_Size+0x80284>
     480:	00000050 	andeq	r0, r0, r0, asr r0
     484:	23070202 	movwcs	r0, #29186	; 0x7202
     488:	02000001 	andeq	r0, r0, #1
     48c:	006d0504 	rsbeq	r0, sp, r4, lsl #10
     490:	23030000 	movwcs	r0, #12288	; 0x3000
     494:	02000000 	andeq	r0, r0, #0
     498:	00006941 	andeq	r6, r0, r1, asr #18
     49c:	07040200 	streq	r0, [r4, -r0, lsl #4]
     4a0:	000000fa 	strdeq	r0, [r0], -sl
     4a4:	68050802 	stmdavs	r5, {r1, fp}
     4a8:	02000000 	andeq	r0, r0, #0
     4ac:	00f50708 	rscseq	r0, r5, r8, lsl #14
     4b0:	04040000 	streq	r0, [r4], #-0
     4b4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     4b8:	07040200 	streq	r0, [r4, -r0, lsl #4]
     4bc:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     4c0:	15070402 	strne	r0, [r7, #-1026]	; 0xfffffbfe
     4c4:	02000000 	andeq	r0, r0, #0
     4c8:	00ca0801 	sbceq	r0, sl, r1, lsl #16
     4cc:	95030000 	strls	r0, [r3, #-0]
     4d0:	03000000 	movweq	r0, #0
     4d4:	00002c14 	andeq	r2, r0, r4, lsl ip
     4d8:	00300300 	eorseq	r0, r0, r0, lsl #6
     4dc:	1a030000 	bne	c04e4 <_Min_Stack_Size+0xc02e4>
     4e0:	00000045 	andeq	r0, r0, r5, asr #32
     4e4:	00002503 	andeq	r2, r0, r3, lsl #10
     4e8:	5e200300 	cdppl	3, 2, cr0, cr0, cr0, {0}
     4ec:	05000000 	streq	r0, [r0, #-0]
     4f0:	000000a5 	andeq	r0, r0, r5, lsr #1
     4f4:	00009a06 	andeq	r9, r0, r6, lsl #20
     4f8:	04010700 	streq	r0, [r1], #-1792	; 0xfffff900
     4fc:	00db0207 	sbcseq	r0, fp, r7, lsl #4
     500:	8b080000 	blhi	200508 <_Min_Stack_Size+0x200308>
     504:	0000001c 	andeq	r0, r0, ip, lsl r0
     508:	54455309 	strbpl	r5, [r5], #-777	; 0xfffffcf7
     50c:	07000100 	streq	r0, [r0, -r0, lsl #2]
     510:	02090401 	andeq	r0, r9, #16777216	; 0x1000000
     514:	000000f1 	strdeq	r0, [r0], -r1
     518:	0002fb08 	andeq	pc, r2, r8, lsl #22
     51c:	61080000 	mrsvs	r0, (UNDEF: 8)
     520:	01000004 	tsteq	r0, r4
     524:	04010700 	streq	r0, [r1], #-1792	; 0xfffff900
     528:	0107020c 	tsteq	r7, ip, lsl #4
     52c:	32080000 	andcc	r0, r8, #0
     530:	00000003 	andeq	r0, r0, r3
     534:	00144808 	andseq	r4, r4, r8, lsl #16
     538:	0a000100 	beq	940 <_Min_Stack_Size+0x740>
     53c:	04040424 	streq	r0, [r4], #-1060	; 0xfffffbdc
     540:	000001fa 	strdeq	r0, [r0], -sl
     544:	3152430b 	cmpcc	r2, fp, lsl #6
     548:	04060400 	streq	r0, [r6], #-1024	; 0xfffffc00
     54c:	000000bb 	strheq	r0, [r0], -fp
     550:	03c10c00 	biceq	r0, r1, #0, 24
     554:	07040000 	streq	r0, [r4, -r0]
     558:	0000a504 	andeq	sl, r0, r4, lsl #10
     55c:	430b0200 	movwmi	r0, #45568	; 0xb200
     560:	04003252 	streq	r3, [r0], #-594	; 0xfffffdae
     564:	00bb0408 	adcseq	r0, fp, r8, lsl #8
     568:	0c040000 	stceq	0, cr0, [r4], {-0}
     56c:	000003cb 	andeq	r0, r0, fp, asr #7
     570:	a5040904 	strge	r0, [r4, #-2308]	; 0xfffff6fc
     574:	06000000 	streq	r0, [r0], -r0
     578:	0003b70c 	andeq	fp, r3, ip, lsl #14
     57c:	040a0400 	streq	r0, [sl], #-1024	; 0xfffffc00
     580:	000000bb 	strheq	r0, [r0], -fp
     584:	03d50c08 	bicseq	r0, r5, #8, 24	; 0x800
     588:	0b040000 	bleq	100590 <_Min_Stack_Size+0x100390>
     58c:	0000a504 	andeq	sl, r0, r4, lsl #10
     590:	bc0c0a00 	stclt	10, cr0, [ip], {-0}
     594:	04000003 	streq	r0, [r0], #-3
     598:	00bb040c 	adcseq	r0, fp, ip, lsl #8
     59c:	0c0c0000 	stceq	0, cr0, [ip], {-0}
     5a0:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
     5a4:	a5040d04 	strge	r0, [r4, #-3332]	; 0xfffff2fc
     5a8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     5ac:	0052440b 	subseq	r4, r2, fp, lsl #8
     5b0:	bb040e04 	bllt	103dc8 <_Min_Stack_Size+0x103bc8>
     5b4:	10000000 	andne	r0, r0, r0
     5b8:	0003e90c 	andeq	lr, r3, ip, lsl #18
     5bc:	040f0400 	streq	r0, [pc], #-1024	; 5c4 <_Min_Stack_Size+0x3c4>
     5c0:	000000a5 	andeq	r0, r0, r5, lsr #1
     5c4:	52530b12 	subspl	r0, r3, #18432	; 0x4800
     5c8:	10040031 	andne	r0, r4, r1, lsr r0
     5cc:	0000bb04 	andeq	fp, r0, r4, lsl #22
     5d0:	f30c1400 	vshl.u8	d1, d0, d12
     5d4:	04000003 	streq	r0, [r0], #-3
     5d8:	00a50411 	adceq	r0, r5, r1, lsl r4
     5dc:	0b160000 	bleq	5805e4 <_Min_Stack_Size+0x5803e4>
     5e0:	00325253 	eorseq	r5, r2, r3, asr r2
     5e4:	bb041204 	bllt	104dfc <_Min_Stack_Size+0x104bfc>
     5e8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     5ec:	0002e20c 	andeq	lr, r2, ip, lsl #4
     5f0:	04130400 	ldreq	r0, [r3], #-1024	; 0xfffffc00
     5f4:	000000a5 	andeq	r0, r0, r5, lsr #1
     5f8:	43430b1a 	movtmi	r0, #15130	; 0x3b1a
     5fc:	14040052 	strne	r0, [r4], #-82	; 0xffffffae
     600:	0000bb04 	andeq	fp, r0, r4, lsl #22
     604:	140c1c00 	strne	r1, [ip], #-3072	; 0xfffff400
     608:	04000004 	streq	r0, [r0], #-4
     60c:	00a50415 	adceq	r0, r5, r5, lsl r4
     610:	0c1e0000 	ldceq	0, cr0, [lr], {-0}
     614:	0000044a 	andeq	r0, r0, sl, asr #8
     618:	bb041604 	bllt	105e30 <_Min_Stack_Size+0x105c30>
     61c:	20000000 	andcs	r0, r0, r0
     620:	00041e0c 	andeq	r1, r4, ip, lsl #28
     624:	04170400 	ldreq	r0, [r7], #-1024	; 0xfffffc00
     628:	000000a5 	andeq	r0, r0, r5, lsr #1
     62c:	380d0022 	stmdacc	sp, {r1, r5}
     630:	04000003 	streq	r0, [r0], #-3
     634:	01070418 	tsteq	r7, r8, lsl r4
     638:	fd0e0000 	stc2	0, cr0, [lr, #-0]
     63c:	01000003 	tsteq	r0, r3
     640:	00028013 	andeq	r8, r2, r3, lsl r0
     644:	00007808 	andeq	r7, r0, r8, lsl #16
     648:	2a9c0100 	bcs	fe700a50 <BootRAM+0xd6711f1>
     64c:	0f000002 	svceq	0x00000002
     650:	00000450 	andeq	r0, r0, r0, asr r4
     654:	00b01301 	adcseq	r1, r0, r1, lsl #6
     658:	91020000 	mrsls	r0, (UNDEF: 2)
     65c:	9a0e0074 	bls	380834 <_Min_Stack_Size+0x380634>
     660:	01000002 	tsteq	r0, r2
     664:	0002f829 	andeq	pc, r2, r9, lsr #16
     668:	00006008 	andeq	r6, r0, r8
     66c:	689c0100 	ldmvs	ip, {r8}
     670:	0f000002 	svceq	0x00000002
     674:	000002d9 	ldrdeq	r0, [r0], -r9
     678:	02682901 	rsbeq	r2, r8, #16384	; 0x4000
     67c:	91020000 	mrsls	r0, (UNDEF: 2)
     680:	39a40f6c 	stmibcc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp}
     684:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
     688:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     68c:	10689102 	rsbne	r9, r8, r2, lsl #2
     690:	2b010069 	blcs	4083c <_Min_Stack_Size+0x4063c>
     694:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     698:	00749102 	rsbseq	r9, r4, r2, lsl #2
     69c:	009a0411 	addseq	r0, sl, r1, lsl r4
     6a0:	5f0e0000 	svcpl	0x000e0000
     6a4:	01000003 	tsteq	r0, r3
     6a8:	00035839 	andeq	r5, r3, r9, lsr r8
     6ac:	0000b008 	andeq	fp, r0, r8
     6b0:	b89c0100 	ldmlt	ip, {r8}
     6b4:	0f000002 	svceq	0x00000002
     6b8:	00000df9 	strdeq	r0, [r0], -r9
     6bc:	009a3901 	addseq	r3, sl, r1, lsl #18
     6c0:	91020000 	mrsls	r0, (UNDEF: 2)
     6c4:	0069106f 	rsbeq	r1, r9, pc, rrx
     6c8:	009a3a01 	addseq	r3, sl, r1, lsl #20
     6cc:	91020000 	mrsls	r0, (UNDEF: 2)
     6d0:	006a1077 	rsbeq	r1, sl, r7, ror r0
     6d4:	009a3a01 	addseq	r3, sl, r1, lsl #20
     6d8:	91020000 	mrsls	r0, (UNDEF: 2)
     6dc:	04591276 	ldrbeq	r1, [r9], #-630	; 0xfffffd8a
     6e0:	3c010000 	stccc	0, cr0, [r1], {-0}
     6e4:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     6e8:	00749102 	rsbseq	r9, r4, r2, lsl #2
     6ec:	00009a13 	andeq	r9, r0, r3, lsl sl
     6f0:	0002c800 	andeq	ip, r2, r0, lsl #16
     6f4:	008c1400 	addeq	r1, ip, r0, lsl #8
     6f8:	00010000 	andeq	r0, r1, r0
     6fc:	00034a0e 	andeq	r4, r3, lr, lsl #20
     700:	00550100 	subseq	r0, r5, r0, lsl #2
     704:	9c000000 	stcls	0, cr0, [r0], {-0}
     708:	01000000 	mrseq	r0, (UNDEF: 0)
     70c:	0003069c 	muleq	r3, ip, r6
     710:	02f60f00 	rscseq	r0, r6, #0, 30
     714:	55010000 	strpl	r0, [r1, #-0]
     718:	0000009a 	muleq	r0, sl, r0
     71c:	106f9102 	rsbne	r9, pc, r2, lsl #2
     720:	5601006a 	strpl	r0, [r1], -sl, rrx
     724:	0000009a 	muleq	r0, sl, r0
     728:	12779102 	rsbsne	r9, r7, #-2147483648	; 0x80000000
     72c:	00000459 	andeq	r0, r0, r9, asr r4
     730:	02b85801 	adcseq	r5, r8, #65536	; 0x10000
     734:	91020000 	mrsls	r0, (UNDEF: 2)
     738:	c00e0074 	andgt	r0, lr, r4, ror r0
     73c:	01000002 	tsteq	r0, r2
     740:	0004086e 	andeq	r0, r4, lr, ror #16
     744:	00008408 	andeq	r8, r0, r8, lsl #8
     748:	349c0100 	ldrcc	r0, [ip], #256	; 0x100
     74c:	15000003 	strne	r0, [r0, #-3]
     750:	6e010078 	mcrvs	0, 0, r0, cr1, cr8, {3}
     754:	0000009a 	muleq	r0, sl, r0
     758:	15779102 	ldrbne	r9, [r7, #-258]!	; 0xfffffefe
     75c:	6e010079 	mcrvs	0, 0, r0, cr1, cr9, {3}
     760:	0000009a 	muleq	r0, sl, r0
     764:	00769102 	rsbseq	r9, r6, r2, lsl #2
     768:	0003960e 	andeq	r9, r3, lr, lsl #12
     76c:	8c7a0100 	ldfhie	f0, [sl], #-0
     770:	a8080004 	stmdage	r8, {r2}
     774:	01000001 	tsteq	r0, r1
     778:	0003a69c 	muleq	r3, ip, r6
     77c:	00781500 	rsbseq	r1, r8, r0, lsl #10
     780:	009a7a01 	addseq	r7, sl, r1, lsl #20
     784:	91020000 	mrsls	r0, (UNDEF: 2)
     788:	00791567 	rsbseq	r1, r9, r7, ror #10
     78c:	009a7a01 	addseq	r7, sl, r1, lsl #20
     790:	91020000 	mrsls	r0, (UNDEF: 2)
     794:	68631566 	stmdavs	r3!, {r1, r2, r5, r6, r8, sl, ip}^
     798:	7a010072 	bvc	40968 <_Min_Stack_Size+0x40768>
     79c:	0000009a 	muleq	r0, sl, r0
     7a0:	0f659102 	svceq	0x00659102
     7a4:	00000441 	andeq	r0, r0, r1, asr #8
     7a8:	009a7a01 	addseq	r7, sl, r1, lsl #20
     7ac:	91020000 	mrsls	r0, (UNDEF: 2)
     7b0:	03440f64 	movteq	r0, #20324	; 0x4f64
     7b4:	7a010000 	bvc	407bc <_Min_Stack_Size+0x405bc>
     7b8:	0000009a 	muleq	r0, sl, r0
     7bc:	12009102 	andne	r9, r0, #-2147483648	; 0x80000000
     7c0:	000003df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     7c4:	009a7b01 	addseq	r7, sl, r1, lsl #22
     7c8:	91020000 	mrsls	r0, (UNDEF: 2)
     7cc:	0069106e 	rsbeq	r1, r9, lr, rrx
     7d0:	009a7b01 	addseq	r7, sl, r1, lsl #22
     7d4:	91020000 	mrsls	r0, (UNDEF: 2)
     7d8:	1b0e006f 	blne	38099c <_Min_Stack_Size+0x38079c>
     7dc:	01000003 	tsteq	r0, r3
     7e0:	000634a5 	andeq	r3, r6, r5, lsr #9
     7e4:	00008208 	andeq	r8, r0, r8, lsl #4
     7e8:	0a9c0100 	beq	fe700bf0 <BootRAM+0xd671391>
     7ec:	15000004 	strne	r0, [r0, #-4]
     7f0:	a5010078 	strge	r0, [r1, #-120]	; 0xffffff88
     7f4:	0000009a 	muleq	r0, sl, r0
     7f8:	15679102 	strbne	r9, [r7, #-258]!	; 0xfffffefe
     7fc:	a5010079 	strge	r0, [r1, #-121]	; 0xffffff87
     800:	0000009a 	muleq	r0, sl, r0
     804:	15669102 	strbne	r9, [r6, #-258]!	; 0xfffffefe
     808:	00726863 	rsbseq	r6, r2, r3, ror #16
     80c:	0268a501 	rsbeq	sl, r8, #4194304	; 0x400000
     810:	91020000 	mrsls	r0, (UNDEF: 2)
     814:	02ec0f60 	rsceq	r0, ip, #96, 30	; 0x180
     818:	a5010000 	strge	r0, [r1, #-0]
     81c:	0000009a 	muleq	r0, sl, r0
     820:	0f659102 	svceq	0x00659102
     824:	00000344 	andeq	r0, r0, r4, asr #6
     828:	009aa501 	addseq	sl, sl, r1, lsl #10
     82c:	91020000 	mrsls	r0, (UNDEF: 2)
     830:	006a1000 	rsbeq	r1, sl, r0
     834:	009aa601 	addseq	sl, sl, r1, lsl #12
     838:	91020000 	mrsls	r0, (UNDEF: 2)
     83c:	2d0e006f 	stccs	0, cr0, [lr, #-444]	; 0xfffffe44
     840:	01000004 	tsteq	r0, r4
     844:	000000b6 	strheq	r0, [r0], -r6
     848:	0000c800 	andeq	ip, r0, r0, lsl #16
     84c:	869c0100 	ldrhi	r0, [ip], r0, lsl #2
     850:	15000004 	strne	r0, [r0, #-4]
     854:	01003078 	tsteq	r0, r8, ror r0
     858:	00009ab6 			; <UNDEFINED> instruction: 0x00009ab6
     85c:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
     860:	00307915 	eorseq	r7, r0, r5, lsl r9
     864:	009ab601 	addseq	fp, sl, r1, lsl #12
     868:	91020000 	mrsls	r0, (UNDEF: 2)
     86c:	31781566 	cmncc	r8, r6, ror #10
     870:	9ab60100 	bls	fed80c78 <BootRAM+0xdcf1419>
     874:	02000000 	andeq	r0, r0, #0
     878:	79156591 	ldmdbvc	r5, {r0, r4, r7, r8, sl, sp, lr}
     87c:	b6010031 			; <UNDEFINED> instruction: 0xb6010031
     880:	0000009a 	muleq	r0, sl, r0
     884:	15649102 	strbne	r9, [r4, #-258]!	; 0xfffffefe
     888:	00504d42 	subseq	r4, r0, r2, asr #26
     88c:	0486b601 	streq	fp, [r6], #1537	; 0x601
     890:	91020000 	mrsls	r0, (UNDEF: 2)
     894:	006a1000 	rsbeq	r1, sl, r0
     898:	00b0b701 	adcseq	fp, r0, r1, lsl #14
     89c:	91020000 	mrsls	r0, (UNDEF: 2)
     8a0:	0078106c 	rsbseq	r1, r8, ip, rrx
     8a4:	009ab801 	addseq	fp, sl, r1, lsl #16
     8a8:	91020000 	mrsls	r0, (UNDEF: 2)
     8ac:	0079106b 	rsbseq	r1, r9, fp, rrx
     8b0:	009ab801 	addseq	fp, sl, r1, lsl #16
     8b4:	91020000 	mrsls	r0, (UNDEF: 2)
     8b8:	0411006a 	ldreq	r0, [r1], #-106	; 0xffffff96
     8bc:	000000c0 	andeq	r0, r0, r0, asr #1
     8c0:	00022716 	andeq	r2, r2, r6, lsl r7
     8c4:	06ce0500 	strbeq	r0, [lr], r0, lsl #10
     8c8:	00000498 	muleq	r0, r8, r4
     8cc:	00007e05 	andeq	r7, r0, r5, lsl #28
     8d0:	00371300 	eorseq	r1, r7, r0, lsl #6
     8d4:	04b30000 	ldrteq	r0, [r3], #0
     8d8:	8c140000 	ldchi	0, cr0, [r4], {-0}
     8dc:	5f000000 	svcpl	0x00000000
     8e0:	00008c14 	andeq	r8, r0, r4, lsl ip
     8e4:	17000500 	strne	r0, [r0, -r0, lsl #10]
     8e8:	00000428 	andeq	r0, r0, r8, lsr #8
     8ec:	04c40906 	strbeq	r0, [r4], #2310	; 0x906
     8f0:	03050000 	movweq	r0, #20480	; 0x5000
     8f4:	08007234 	stmdaeq	r0, {r2, r4, r5, r9, ip, sp, lr}
     8f8:	00049d06 	andeq	r9, r4, r6, lsl #26
     8fc:	00371300 	eorseq	r1, r7, r0, lsl #6
     900:	04da0000 	ldrbeq	r0, [sl], #0
     904:	8c180000 	ldchi	0, cr0, [r8], {-0}
     908:	ef000000 	svc	0x00000000
     90c:	b0170005 	andslt	r0, r7, r5
     910:	06000002 	streq	r0, [r0], -r2
     914:	0004eb6d 	andeq	lr, r4, sp, ror #22
     918:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
     91c:	06080074 			; <UNDEFINED> instruction: 0x06080074
     920:	000004c9 	andeq	r0, r0, r9, asr #9
     924:	00009a13 	andeq	r9, r0, r3, lsl sl
     928:	00050000 	andeq	r0, r5, r0
     92c:	008c1400 	addeq	r1, ip, r0, lsl #8
     930:	001a0000 	andseq	r0, sl, r0
     934:	00029017 	andeq	r9, r2, r7, lsl r0
     938:	f00d0100 			; <UNDEFINED> instruction: 0xf00d0100
     93c:	05000004 	streq	r0, [r0, #-4]
     940:	00000003 	andeq	r0, r0, r3
     944:	009a1320 	addseq	r1, sl, r0, lsr #6
     948:	05210000 	streq	r0, [r1, #-0]!
     94c:	8c140000 	ldchi	0, cr0, [r4], {-0}
     950:	02000000 	andeq	r0, r0, #0
     954:	03ac1700 			; <UNDEFINED> instruction: 0x03ac1700
     958:	0f010000 	svceq	0x00010000
     95c:	00000511 	andeq	r0, r0, r1, lsl r5
     960:	00000305 	andeq	r0, r0, r5, lsl #6
     964:	84170000 	ldrhi	r0, [r7], #-0
     968:	01000002 	tsteq	r0, r2
     96c:	00051110 	andeq	r1, r5, r0, lsl r1
     970:	00030500 	andeq	r0, r3, r0, lsl #10
     974:	00000000 	andeq	r0, r0, r0
     978:	0000060c 	andeq	r0, r0, ip, lsl #12
     97c:	02af0004 	adceq	r0, pc, #4
     980:	01040000 	mrseq	r0, (UNDEF: 4)
     984:	00000181 	andeq	r0, r0, r1, lsl #3
     988:	0005e401 	andeq	lr, r5, r1, lsl #8
     98c:	00030300 	andeq	r0, r3, r0, lsl #6
     990:	00007000 	andeq	r7, r0, r0
     994:	00000000 	andeq	r0, r0, r0
     998:	00050300 	andeq	r0, r5, r0, lsl #6
     99c:	04b20200 	ldrteq	r0, [r2], #512	; 0x200
     9a0:	1b020000 	blne	809a8 <_Min_Stack_Size+0x807a8>
     9a4:	00000030 	andeq	r0, r0, r0, lsr r0
     9a8:	c3060103 	movwgt	r0, #24835	; 0x6103
     9ac:	02000000 	andeq	r0, r0, #0
     9b0:	00000093 	muleq	r0, r3, r0
     9b4:	00421d02 	subeq	r1, r2, r2, lsl #26
     9b8:	01030000 	mrseq	r0, (UNDEF: 3)
     9bc:	0000c108 	andeq	ip, r0, r8, lsl #2
     9c0:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
     9c4:	00000051 	andeq	r0, r0, r1, asr r0
     9c8:	00002e02 	andeq	r2, r0, r2, lsl #28
     9cc:	5b2b0200 	blpl	ac11d4 <_Min_Stack_Size+0xac0fd4>
     9d0:	03000000 	movweq	r0, #0
     9d4:	01230702 			; <UNDEFINED> instruction: 0x01230702
     9d8:	6e020000 	cdpvs	0, 0, cr0, cr2, cr0, {0}
     9dc:	02000006 	andeq	r0, r0, #6
     9e0:	00006d3f 	andeq	r6, r0, pc, lsr sp
     9e4:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
     9e8:	0000006d 	andeq	r0, r0, sp, rrx
     9ec:	00002302 	andeq	r2, r0, r2, lsl #6
     9f0:	7f410200 	svcvc	0x00410200
     9f4:	03000000 	movweq	r0, #0
     9f8:	00fa0704 	rscseq	r0, sl, r4, lsl #14
     9fc:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     a00:	00006805 	andeq	r6, r0, r5, lsl #16
     a04:	07080300 	streq	r0, [r8, -r0, lsl #6]
     a08:	000000f5 	strdeq	r0, [r0], -r5
     a0c:	69050404 	stmdbvs	r5, {r2, sl}
     a10:	0300746e 	movweq	r7, #1134	; 0x46e
     a14:	00ff0704 	rscseq	r0, pc, r4, lsl #14
     a18:	b4020000 	strlt	r0, [r2], #-0
     a1c:	03000004 	movweq	r0, #4
     a20:	00002513 	andeq	r2, r0, r3, lsl r5
     a24:	00950200 	addseq	r0, r5, r0, lsl #4
     a28:	14030000 	strne	r0, [r3], #-0
     a2c:	00000037 	andeq	r0, r0, r7, lsr r0
     a30:	00003002 	andeq	r3, r0, r2
     a34:	501a0300 	andspl	r0, sl, r0, lsl #6
     a38:	02000000 	andeq	r0, r0, #0
     a3c:	00000670 	andeq	r0, r0, r0, ror r6
     a40:	00621f03 	rsbeq	r1, r2, r3, lsl #30
     a44:	25020000 	strcs	r0, [r2, #-0]
     a48:	03000000 	movweq	r0, #0
     a4c:	00007420 	andeq	r7, r0, r0, lsr #8
     a50:	07040300 	streq	r0, [r4, -r0, lsl #6]
     a54:	00000015 	andeq	r0, r0, r5, lsl r0
     a58:	4b040105 	blmi	100e74 <_Min_Stack_Size+0x100c74>
     a5c:	00010e01 	andeq	r0, r1, r1, lsl #28
     a60:	05560600 	ldrbeq	r0, [r6, #-1536]	; 0xfffffa00
     a64:	06010000 	streq	r0, [r1], -r0
     a68:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
     a6c:	05d70602 	ldrbeq	r0, [r7, #1538]	; 0x602
     a70:	06040000 	streq	r0, [r4], -r0
     a74:	00000468 	andeq	r0, r0, r8, ror #8
     a78:	054d0608 	strbeq	r0, [sp, #-1544]	; 0xfffff9f8
     a7c:	06100000 	ldreq	r0, [r0], -r0
     a80:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     a84:	0105001f 	tsteq	r5, pc, lsl r0
     a88:	48015904 	stmdami	r1, {r2, r8, fp, ip, lr}
     a8c:	06000001 	streq	r0, [r0], -r1
     a90:	0000068c 	andeq	r0, r0, ip, lsl #13
     a94:	04bb0600 	ldrteq	r0, [fp], #1536	; 0x600
     a98:	06010000 	streq	r0, [r1], -r0
     a9c:	0000052e 	andeq	r0, r0, lr, lsr #10
     aa0:	04740602 	ldrbteq	r0, [r4], #-1538	; 0xfffff9fe
     aa4:	06030000 	streq	r0, [r3], -r0
     aa8:	000006b1 			; <UNDEFINED> instruction: 0x000006b1
     aac:	058a0604 	streq	r0, [sl, #1540]	; 0x604
     ab0:	06050000 	streq	r0, [r5], -r0
     ab4:	0000053e 	andeq	r0, r0, lr, lsr r5
     ab8:	06340606 	ldrteq	r0, [r4], -r6, lsl #12
     abc:	00070000 	andeq	r0, r7, r0
     ac0:	00050f07 	andeq	r0, r5, r7, lsl #30
     ac4:	01620400 	cmneq	r2, r0, lsl #8
     ac8:	0000010e 	andeq	r0, r0, lr, lsl #2
     acc:	6a040105 	bvs	100ee8 <_Min_Stack_Size+0x100ce8>
     ad0:	0001ac01 	andeq	sl, r1, r1, lsl #24
     ad4:	04d40600 	ldrbeq	r0, [r4], #1536	; 0x600
     ad8:	06000000 	streq	r0, [r0], -r0
     adc:	0000051c 	andeq	r0, r0, ip, lsl r5
     ae0:	060e0601 	streq	r0, [lr], -r1, lsl #12
     ae4:	06020000 	streq	r0, [r2], -r0
     ae8:	0000056b 	andeq	r0, r0, fp, ror #10
     aec:	05cd0603 	strbeq	r0, [sp, #1539]	; 0x603
     af0:	06040000 	streq	r0, [r4], -r0
     af4:	000006a5 	andeq	r0, r0, r5, lsr #13
     af8:	065d0605 	ldrbeq	r0, [sp], -r5, lsl #12
     afc:	06060000 	streq	r0, [r6], -r0
     b00:	0000061e 	andeq	r0, r0, lr, lsl r6
     b04:	05230607 	streq	r0, [r3, #-1543]!	; 0xfffff9f9
     b08:	06080000 	streq	r0, [r8], -r0
     b0c:	00000681 	andeq	r0, r0, r1, lsl #13
     b10:	04940609 	ldreq	r0, [r4], #1545	; 0x609
     b14:	060a0000 	streq	r0, [sl], -r0
     b18:	000006c2 	andeq	r0, r0, r2, asr #13
     b1c:	04dc060b 	ldrbeq	r0, [ip], #1547	; 0x60b
     b20:	000c0000 	andeq	r0, ip, r0
     b24:	00049e07 	andeq	r9, r4, r7, lsl #28
     b28:	017c0400 	cmneq	ip, r0, lsl #8
     b2c:	00000154 	andeq	r0, r0, r4, asr r1
     b30:	00058308 	andeq	r8, r5, r8, lsl #6
     b34:	a2500100 	subsge	r0, r0, #0, 2
     b38:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
     b3c:	f8080006 			; <UNDEFINED> instruction: 0xf8080006
     b40:	01000001 	tsteq	r0, r1
     b44:	0002099c 	muleq	r2, ip, r9
     b48:	6e730900 	cdpvs	9, 7, cr0, cr3, cr0, {0}
     b4c:	ad500100 	ldfgee	f0, [r0, #-0]
     b50:	02000000 	andeq	r0, r0, #0
     b54:	150a6f91 	strne	r6, [sl, #-3985]	; 0xfffff06f
     b58:	01000006 	tsteq	r0, r6
     b5c:	0000ad50 	andeq	sl, r0, r0, asr sp
     b60:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
     b64:	0038a50a 	eorseq	sl, r8, sl, lsl #10
     b68:	b8500100 	ldmdalt	r0, {r8}^
     b6c:	02000000 	andeq	r0, r0, #0
     b70:	6b0a6c91 	blvs	29bdbc <_Min_Stack_Size+0x29bbbc>
     b74:	01000013 	tsteq	r0, r3, lsl r0
     b78:	0000ad50 	andeq	sl, r0, r0, asr sp
     b7c:	6b910200 	blvs	fe441384 <BootRAM+0xd3b1b25>
     b80:	3f920800 	svccc	0x00920800
     b84:	91010000 	mrsls	r0, (UNDEF: 1)
     b88:	000000a2 	andeq	r0, r0, r2, lsr #1
     b8c:	080008b0 	stmdaeq	r0, {r4, r5, r7, fp}
     b90:	000000b8 	strheq	r0, [r0], -r8
     b94:	02309c01 	eorseq	r9, r0, #256	; 0x100
     b98:	73090000 	movwvc	r0, #36864	; 0x9000
     b9c:	9101006e 	tstls	r1, lr, rrx
     ba0:	000000ad 	andeq	r0, r0, sp, lsr #1
     ba4:	00779102 	rsbseq	r9, r7, r2, lsl #2
     ba8:	00056408 	andeq	r6, r5, r8, lsl #8
     bac:	a2a10100 	adcge	r0, r1, #0, 2
     bb0:	00000000 	andeq	r0, r0, r0
     bb4:	c4000000 	strgt	r0, [r0], #-0
     bb8:	01000000 	mrseq	r0, (UNDEF: 0)
     bbc:	0002579c 	muleq	r2, ip, r7
     bc0:	6e730900 	cdpvs	9, 7, cr0, cr3, cr0, {0}
     bc4:	ada10100 	stfges	f0, [r1]
     bc8:	02000000 	andeq	r0, r0, #0
     bcc:	08007791 	stmdaeq	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
     bd0:	00003ae9 	andeq	r3, r0, r9, ror #21
     bd4:	00a2b401 	adceq	fp, r2, r1, lsl #8
     bd8:	09680000 	stmdbeq	r8!, {}^	; <UNPREDICTABLE>
     bdc:	01640800 	cmneq	r4, r0, lsl #16
     be0:	9c010000 	stcls	0, cr0, [r1], {-0}
     be4:	0000029a 	muleq	r0, sl, r2
     be8:	006e7309 	rsbeq	r7, lr, r9, lsl #6
     bec:	00adb401 	adceq	fp, sp, r1, lsl #8
     bf0:	91020000 	mrsls	r0, (UNDEF: 2)
     bf4:	0ee20a77 	mcreq	10, 7, r0, cr2, cr7, {3}
     bf8:	b4010000 	strlt	r0, [r1], #-0
     bfc:	0000029a 	muleq	r0, sl, r2
     c00:	0a709102 	beq	1c25010 <_Min_Stack_Size+0x1c24e10>
     c04:	000038a5 	andeq	r3, r0, r5, lsr #17
     c08:	00b8b401 	adcseq	fp, r8, r1, lsl #8
     c0c:	91020000 	mrsls	r0, (UNDEF: 2)
     c10:	040b0074 	streq	r0, [fp], #-116	; 0xffffff8c
     c14:	000000ad 	andeq	r0, r0, sp, lsr #1
     c18:	003b5708 	eorseq	r5, fp, r8, lsl #14
     c1c:	a2d50100 	sbcsge	r0, r5, #0, 2
     c20:	00000000 	andeq	r0, r0, r0
     c24:	ec000000 	stc	0, cr0, [r0], {-0}
     c28:	01000000 	mrseq	r0, (UNDEF: 0)
     c2c:	0002c79c 	muleq	r2, ip, r7
     c30:	6e730900 	cdpvs	9, 7, cr0, cr3, cr0, {0}
     c34:	add50100 	ldfgee	f0, [r5]
     c38:	02000000 	andeq	r0, r0, #0
     c3c:	08007791 	stmdaeq	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
     c40:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
     c44:	00c3e901 	sbceq	lr, r3, r1, lsl #18
     c48:	0acc0000 	beq	ff300c50 <BootRAM+0xe2713f1>
     c4c:	01f40800 	mvnseq	r0, r0, lsl #16
     c50:	9c010000 	stcls	0, cr0, [r1], {-0}
     c54:	00000326 	andeq	r0, r0, r6, lsr #6
     c58:	006e7309 	rsbeq	r7, lr, r9, lsl #6
     c5c:	00ade901 	adceq	lr, sp, r1, lsl #18
     c60:	91020000 	mrsls	r0, (UNDEF: 2)
     c64:	7562096f 	strbvc	r0, [r2, #-2415]!	; 0xfffff691
     c68:	e9010066 	stmdb	r1, {r1, r2, r5, r6}
     c6c:	0000029a 	muleq	r0, sl, r2
     c70:	09689102 	stmdbeq	r8!, {r1, r8, ip, pc}^
     c74:	006e656c 	rsbeq	r6, lr, ip, ror #10
     c78:	00b8e901 	adcseq	lr, r8, r1, lsl #18
     c7c:	91020000 	mrsls	r0, (UNDEF: 2)
     c80:	6d740c6c 	ldclvs	12, cr0, [r4, #-432]!	; 0xfffffe50
     c84:	eb010070 	bl	40e4c <_Min_Stack_Size+0x40c4c>
     c88:	000000ad 	andeq	r0, r0, sp, lsr #1
     c8c:	0d779102 	ldfeqp	f1, [r7, #-8]!
     c90:	00000501 	andeq	r0, r0, r1, lsl #10
     c94:	00b8ec01 	adcseq	lr, r8, r1, lsl #24
     c98:	91020000 	mrsls	r0, (UNDEF: 2)
     c9c:	0a0e0074 	beq	380e74 <_Min_Stack_Size+0x380c74>
     ca0:	01000005 	tsteq	r0, r5
     ca4:	00c30124 	sbceq	r0, r3, r4, lsr #2
     ca8:	0cc00000 	stcleq	0, cr0, [r0], {0}
     cac:	016c0800 	cmneq	ip, r0, lsl #16
     cb0:	9c010000 	stcls	0, cr0, [r1], {-0}
     cb4:	0000038b 	andeq	r0, r0, fp, lsl #7
     cb8:	006e730f 	rsbeq	r7, lr, pc, lsl #6
     cbc:	ad012401 	cfstrsge	mvf2, [r1, #-4]
     cc0:	02000000 	andeq	r0, r0, #0
     cc4:	620f6791 	andvs	r6, pc, #38010880	; 0x2440000
     cc8:	01006675 	tsteq	r0, r5, ror r6
     ccc:	029a0124 	addseq	r0, sl, #36, 2
     cd0:	91020000 	mrsls	r0, (UNDEF: 2)
     cd4:	656c0f60 	strbvs	r0, [ip, #-3936]!	; 0xfffff0a0
     cd8:	2401006e 	strcs	r0, [r1], #-110	; 0xffffff92
     cdc:	0000b801 	andeq	fp, r0, r1, lsl #16
     ce0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     ce4:	706d7410 	rsbvc	r7, sp, r0, lsl r4
     ce8:	01260100 			; <UNDEFINED> instruction: 0x01260100
     cec:	000000ad 	andeq	r0, r0, sp, lsr #1
     cf0:	116f9102 	cmnne	pc, r2, lsl #2
     cf4:	00000678 	andeq	r0, r0, r8, ror r6
     cf8:	b8012701 	stmdalt	r1, {r0, r8, r9, sl, sp}
     cfc:	02000000 	andeq	r0, r0, #0
     d00:	0e006c91 	mcreq	12, 0, r6, cr0, cr1, {4}
     d04:	00000656 	andeq	r0, r0, r6, asr r6
     d08:	c3014d01 	movwgt	r4, #7425	; 0x1d01
     d0c:	2c000000 	stccs	0, cr0, [r0], {-0}
     d10:	1008000e 	andne	r0, r8, lr
     d14:	01000002 	tsteq	r0, r2
     d18:	00040e9c 	muleq	r4, ip, lr
     d1c:	6e730f00 	cdpvs	15, 7, cr0, cr3, cr0, {0}
     d20:	014d0100 	mrseq	r0, (UNDEF: 93)
     d24:	000000ad 	andeq	r0, r0, sp, lsr #1
     d28:	0f6f9102 	svceq	0x006f9102
     d2c:	00667562 	rsbeq	r7, r6, r2, ror #10
     d30:	9a014d01 	bls	5413c <_Min_Stack_Size+0x53f3c>
     d34:	02000002 	andeq	r0, r0, #2
     d38:	6c0f6891 	stcvs	8, cr6, [pc], {145}	; 0x91
     d3c:	01006e65 	tsteq	r0, r5, ror #28
     d40:	00b8014d 	adcseq	r0, r8, sp, asr #2
     d44:	91020000 	mrsls	r0, (UNDEF: 2)
     d48:	0ee2126c 	cdpeq	2, 14, cr1, cr2, cr12, {3}
     d4c:	4d010000 	stcmi	0, cr0, [r1, #-0]
     d50:	00029a01 	andeq	r9, r2, r1, lsl #20
     d54:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     d58:	0038a512 	eorseq	sl, r8, r2, lsl r5
     d5c:	014d0100 	mrseq	r0, (UNDEF: 93)
     d60:	000000b8 	strheq	r0, [r0], -r8
     d64:	10009102 	andne	r9, r0, r2, lsl #2
     d68:	00706d74 	rsbseq	r6, r0, r4, ror sp
     d6c:	ad014f01 	stcge	15, cr4, [r1, #-4]
     d70:	02000000 	andeq	r0, r0, #0
     d74:	01117791 			; <UNDEFINED> instruction: 0x01117791
     d78:	01000005 	tsteq	r0, r5
     d7c:	00b80150 	adcseq	r0, r8, r0, asr r1
     d80:	91020000 	mrsls	r0, (UNDEF: 2)
     d84:	f80e0074 			; <UNDEFINED> instruction: 0xf80e0074
     d88:	01000004 	tsteq	r0, r4
     d8c:	00c3018d 	sbceq	r0, r3, sp, lsl #3
     d90:	103c0000 	eorsne	r0, ip, r0
     d94:	03040800 	movweq	r0, #18432	; 0x4800
     d98:	9c010000 	stcls	0, cr0, [r1], {-0}
     d9c:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     da0:	006e730f 	rsbeq	r7, lr, pc, lsl #6
     da4:	ad018d01 	stcge	13, cr8, [r1, #-4]
     da8:	02000000 	andeq	r0, r0, #0
     dac:	620f6791 	andvs	r6, pc, #38010880	; 0x2440000
     db0:	01006675 	tsteq	r0, r5, ror r6
     db4:	029a018d 	addseq	r0, sl, #1073741859	; 0x40000023
     db8:	91020000 	mrsls	r0, (UNDEF: 2)
     dbc:	656c0f60 	strbvs	r0, [ip, #-3936]!	; 0xfffff0a0
     dc0:	8d01006e 	stchi	0, cr0, [r1, #-440]	; 0xfffffe48
     dc4:	0000b801 	andeq	fp, r0, r1, lsl #16
     dc8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     dcc:	000ee212 	andeq	lr, lr, r2, lsl r2
     dd0:	018d0100 	orreq	r0, sp, r0, lsl #2
     dd4:	0000029a 	muleq	r0, sl, r2
     dd8:	125c9102 	subsne	r9, ip, #-2147483648	; 0x80000000
     ddc:	000038a5 	andeq	r3, r0, r5, lsr #17
     de0:	9f018d01 	svcls	0x00018d01
     de4:	02000004 	andeq	r0, r0, #4
     de8:	6d100091 	ldcvs	0, cr0, [r0, #-580]	; 0xfffffdbc
     dec:	8f010072 	svchi	0x00010072
     df0:	0000ad01 	andeq	sl, r0, r1, lsl #26
     df4:	75910200 	ldrvc	r0, [r1, #512]	; 0x200
     df8:	00062f11 	andeq	r2, r6, r1, lsl pc
     dfc:	01900100 	orrseq	r0, r0, r0, lsl #2
     e00:	000004a5 	andeq	r0, r0, r5, lsr #9
     e04:	116c9102 	cmnne	ip, r2, lsl #2
     e08:	0000048b 	andeq	r0, r0, fp, lsl #9
     e0c:	b8019101 	stmdalt	r1, {r0, r8, ip, pc}
     e10:	02000000 	andeq	r0, r0, #0
     e14:	0b007691 	bleq	1e860 <_Min_Stack_Size+0x1e660>
     e18:	0000b804 	andeq	fp, r0, r4, lsl #16
     e1c:	00ad1300 	adceq	r1, sp, r0, lsl #6
     e20:	04b50000 	ldrteq	r0, [r5], #0
     e24:	d9140000 	ldmdble	r4, {}	; <UNPREDICTABLE>
     e28:	07000000 	streq	r0, [r0, -r0]
     e2c:	05800e00 	streq	r0, [r0, #3584]	; 0xe00
     e30:	01010000 	mrseq	r0, (UNDEF: 1)
     e34:	0000a202 	andeq	sl, r0, r2, lsl #4
     e38:	00134000 	andseq	r4, r3, r0
     e3c:	0001a808 	andeq	sl, r1, r8, lsl #16
     e40:	0b9c0100 	bleq	fe701248 <BootRAM+0xd6719e9>
     e44:	0f000005 	svceq	0x00000005
     e48:	01006e73 	tsteq	r0, r3, ror lr
     e4c:	00ad0201 	adceq	r0, sp, r1, lsl #4
     e50:	91020000 	mrsls	r0, (UNDEF: 2)
     e54:	04ab126f 	strteq	r1, [fp], #623	; 0x26f
     e58:	01010000 	mrseq	r0, (UNDEF: 1)
     e5c:	00014802 	andeq	r4, r1, r2, lsl #16
     e60:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
     e64:	6772610f 	ldrbvs	r6, [r2, -pc, lsl #2]!
     e68:	02010100 	andeq	r0, r1, #0, 2
     e6c:	0000050b 	andeq	r0, r0, fp, lsl #10
     e70:	10689102 	rsbne	r9, r8, r2, lsl #2
     e74:	00706d74 	rsbseq	r6, r0, r4, ror sp
     e78:	ad020301 	stcge	3, cr0, [r2, #-4]
     e7c:	02000000 	andeq	r0, r0, #0
     e80:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
     e84:	069a0e04 	ldreq	r0, [sl], r4, lsl #28
     e88:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
     e8c:	0000a202 	andeq	sl, r0, r2, lsl #4
     e90:	00000000 	andeq	r0, r0, r0
     e94:	0001fc00 	andeq	pc, r1, r0, lsl #24
     e98:	639c0100 	orrsvs	r0, ip, #0, 2
     e9c:	0f000005 	svceq	0x00000005
     ea0:	01006e73 	tsteq	r0, r3, ror lr
     ea4:	00ad0229 	adceq	r0, sp, r9, lsr #4
     ea8:	91020000 	mrsls	r0, (UNDEF: 2)
     eac:	0484126f 	streq	r1, [r4], #623	; 0x26f
     eb0:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
     eb4:	0001ac02 	andeq	sl, r1, r2, lsl #24
     eb8:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
     ebc:	6772610f 	ldrbvs	r6, [r2, -pc, lsl #2]!
     ec0:	02290100 	eoreq	r0, r9, #0, 2
     ec4:	0000050b 	andeq	r0, r0, fp, lsl #10
     ec8:	10689102 	rsbne	r9, r8, r2, lsl #2
     ecc:	00706d74 	rsbseq	r6, r0, r4, ror sp
     ed0:	ad022b01 	vstrge	d2, [r2, #-4]
     ed4:	02000000 	andeq	r0, r0, #0
     ed8:	0e007791 	mcreq	7, 0, r7, cr0, cr1, {4}
     edc:	000004c9 	andeq	r0, r0, r9, asr #9
     ee0:	a2025b01 	andge	r5, r2, #1024	; 0x400
     ee4:	00000000 	andeq	r0, r0, r0
     ee8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     eec:	01000002 	tsteq	r0, r2
     ef0:	0005aa9c 	muleq	r5, ip, sl
     ef4:	6e730f00 	cdpvs	15, 7, cr0, cr3, cr0, {0}
     ef8:	025b0100 	subseq	r0, fp, #0, 2
     efc:	000000ad 	andeq	r0, r0, sp, lsr #1
     f00:	126f9102 	rsbne	r9, pc, #-2147483648	; 0x80000000
     f04:	00000484 	andeq	r0, r0, r4, lsl #9
     f08:	ac025b01 	stcge	11, cr5, [r2], {1}
     f0c:	02000001 	andeq	r0, r0, #1
     f10:	610f6e91 			; <UNDEFINED> instruction: 0x610f6e91
     f14:	01006772 	tsteq	r0, r2, ror r7
     f18:	050b025b 	streq	r0, [fp, #-603]	; 0xfffffda5
     f1c:	91020000 	mrsls	r0, (UNDEF: 2)
     f20:	720d0068 	andvc	r0, sp, #104	; 0x68
     f24:	01000005 	tsteq	r0, r5
     f28:	0000b830 	andeq	fp, r0, r0, lsr r8
     f2c:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
     f30:	0d200000 	stceq	0, cr0, [r0, #-0]
     f34:	0000059b 	muleq	r0, fp, r5
     f38:	00b83101 	adcseq	r3, r8, r1, lsl #2
     f3c:	03050000 	movweq	r0, #20480	; 0x5000
     f40:	200000e8 	andcs	r0, r0, r8, ror #1
     f44:	0004e80d 	andeq	lr, r4, sp, lsl #16
     f48:	b8320100 	ldmdalt	r2!, {r8}
     f4c:	05000000 	streq	r0, [r0, #-0]
     f50:	0000ea03 	andeq	lr, r0, r3, lsl #20
     f54:	00b81320 	adcseq	r1, r8, r0, lsr #6
     f58:	05ed0000 	strbeq	r0, [sp, #0]!
     f5c:	d9140000 	ldmdble	r4, {}	; <UNPREDICTABLE>
     f60:	07000000 	streq	r0, [r0, -r0]
     f64:	06430d00 	strbeq	r0, [r3], -r0, lsl #26
     f68:	33010000 	movwcc	r0, #4096	; 0x1000
     f6c:	000005dd 	ldrdeq	r0, [r0], -sp
     f70:	00ec0305 	rsceq	r0, ip, r5, lsl #6
     f74:	a80d2000 	stmdage	sp, {sp}
     f78:	01000005 	tsteq	r0, r5
     f7c:	0004a534 	andeq	sl, r4, r4, lsr r5
     f80:	fc030500 	stc2	5, cr0, [r3], {-0}
     f84:	00200000 	eoreq	r0, r0, r0
     f88:	00000afc 	strdeq	r0, [r0], -ip
     f8c:	03db0004 	bicseq	r0, fp, #4
     f90:	01040000 	mrseq	r0, (UNDEF: 4)
     f94:	00000181 	andeq	r0, r0, r1, lsl #3
     f98:	000c1a01 	andeq	r1, ip, r1, lsl #20
     f9c:	0000d800 	andeq	sp, r0, r0, lsl #16
     fa0:	00000000 	andeq	r0, r0, r0
     fa4:	0009ef00 	andeq	lr, r9, r0, lsl #30
     fa8:	04b20200 	ldrteq	r0, [r2], #512	; 0x200
     fac:	1b020000 	blne	80fb4 <_Min_Stack_Size+0x80db4>
     fb0:	0000002c 	andeq	r0, r0, ip, lsr #32
     fb4:	c3060103 	movwgt	r0, #24835	; 0x6103
     fb8:	02000000 	andeq	r0, r0, #0
     fbc:	00000093 	muleq	r0, r3, r0
     fc0:	003e1d02 	eorseq	r1, lr, r2, lsl #26
     fc4:	01030000 	mrseq	r0, (UNDEF: 3)
     fc8:	0000c108 	andeq	ip, r0, r8, lsl #2
     fcc:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
     fd0:	00000051 	andeq	r0, r0, r1, asr r0
     fd4:	00002e02 	andeq	r2, r0, r2, lsl #28
     fd8:	572b0200 	strpl	r0, [fp, -r0, lsl #4]!
     fdc:	03000000 	movweq	r0, #0
     fe0:	01230702 			; <UNDEFINED> instruction: 0x01230702
     fe4:	04030000 	streq	r0, [r3], #-0
     fe8:	00006d05 	andeq	r6, r0, r5, lsl #26
     fec:	00230200 	eoreq	r0, r3, r0, lsl #4
     ff0:	41020000 	mrsmi	r0, (UNDEF: 2)
     ff4:	00000070 	andeq	r0, r0, r0, ror r0
     ff8:	fa070403 	blx	1c200c <_Min_Stack_Size+0x1c1e0c>
     ffc:	03000000 	movweq	r0, #0
    1000:	00680508 	rsbeq	r0, r8, r8, lsl #10
    1004:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1008:	0000f507 	andeq	pc, r0, r7, lsl #10
    100c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    1010:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1014:	ff070403 			; <UNDEFINED> instruction: 0xff070403
    1018:	02000000 	andeq	r0, r0, #0
    101c:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    1020:	00211303 	eoreq	r1, r1, r3, lsl #6
    1024:	95020000 	strls	r0, [r2, #-0]
    1028:	03000000 	movweq	r0, #0
    102c:	00003314 	andeq	r3, r0, r4, lsl r3
    1030:	00300200 	eorseq	r0, r0, r0, lsl #4
    1034:	1a030000 	bne	c103c <_Min_Stack_Size+0xc0e3c>
    1038:	0000004c 	andeq	r0, r0, ip, asr #32
    103c:	00002502 	andeq	r2, r0, r2, lsl #10
    1040:	65200300 	strvs	r0, [r0, #-768]!	; 0xfffffd00
    1044:	05000000 	streq	r0, [r0, #-0]
    1048:	00000b18 	andeq	r0, r0, r8, lsl fp
    104c:	e49e0408 	ldr	r0, [lr], #1032	; 0x408
    1050:	06000000 	streq	r0, [r0], -r0
    1054:	0000074a 	andeq	r0, r0, sl, asr #14
    1058:	00e5a004 	rsceq	sl, r5, r4
    105c:	06000000 	streq	r0, [r0], -r0
    1060:	00000c14 	andeq	r0, r0, r4, lsl ip
    1064:	00e5a104 	rsceq	sl, r5, r4, lsl #2
    1068:	00040000 	andeq	r0, r4, r0
    106c:	e4040807 	str	r0, [r4], #-2055	; 0xfffff7f9
    1070:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1074:	0053435f 	subseq	r4, r3, pc, asr r3
    1078:	10a60408 	adcne	r0, r6, r8, lsl #8
    107c:	06000001 	streq	r0, [r0], -r1
    1080:	000038b1 			; <UNDEFINED> instruction: 0x000038b1
    1084:	00e5a804 	rsceq	sl, r5, r4, lsl #16
    1088:	06000000 	streq	r0, [r0], -r0
    108c:	00003993 	muleq	r0, r3, r9
    1090:	00e5a904 	rsceq	sl, r5, r4, lsl #18
    1094:	00040000 	andeq	r0, r4, r0
    1098:	b304080a 	movwlt	r0, #18442	; 0x480a
    109c:	00000131 	andeq	r0, r0, r1, lsr r1
    10a0:	0008d306 	andeq	sp, r8, r6, lsl #6
    10a4:	40b50400 	adcsmi	r0, r5, r0, lsl #8
    10a8:	00000001 	andeq	r0, r0, r1
    10ac:	0009fa06 	andeq	pc, r9, r6, lsl #20
    10b0:	56b60400 	ldrtpl	r0, [r6], r0, lsl #8
    10b4:	04000001 	streq	r0, [r0], #-1
    10b8:	009e0b00 	addseq	r0, lr, r0, lsl #22
    10bc:	01400000 	mrseq	r0, (UNDEF: 64)
    10c0:	b40c0000 	strlt	r0, [ip], #-0
    10c4:	00000000 	andeq	r0, r0, r0
    10c8:	01310408 	teqeq	r1, r8, lsl #8
    10cc:	560d0000 	strpl	r0, [sp], -r0
    10d0:	0c000001 	stceq	0, cr0, [r0], {1}
    10d4:	000000b4 	strheq	r0, [r0], -r4
    10d8:	00009e0c 	andeq	r9, r0, ip, lsl #28
    10dc:	04080000 	streq	r0, [r8], #-0
    10e0:	00000146 	andeq	r0, r0, r6, asr #2
    10e4:	bb04080a 	bllt	103114 <_Min_Stack_Size+0x102f14>
    10e8:	0000017d 	andeq	r0, r0, sp, ror r1
    10ec:	0008d306 	andeq	sp, r8, r6, lsl #6
    10f0:	82bd0400 	adcshi	r0, sp, #0, 8
    10f4:	00000001 	andeq	r0, r0, r1
    10f8:	0009fa06 	andeq	pc, r9, r6, lsl #20
    10fc:	93be0400 			; <UNDEFINED> instruction: 0x93be0400
    1100:	04000001 	streq	r0, [r0], #-1
    1104:	009e0e00 	addseq	r0, lr, r0, lsl #28
    1108:	04080000 	streq	r0, [r8], #-0
    110c:	0000017d 	andeq	r0, r0, sp, ror r1
    1110:	0001930d 	andeq	r9, r1, sp, lsl #6
    1114:	009e0c00 	addseq	r0, lr, r0, lsl #24
    1118:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    111c:	00018804 	andeq	r8, r1, r4, lsl #16
    1120:	495f0f00 	ldmdbmi	pc, {r8, r9, sl, fp}^	; <UNPREDICTABLE>
    1124:	04080046 	streq	r0, [r8], #-70	; 0xffffffba
    1128:	0001bcae 	andeq	fp, r1, lr, lsr #25
    112c:	55421000 	strbpl	r1, [r2, #-0]
    1130:	b7040053 	smlsdlt	r4, r3, r0, r0
    1134:	00000110 	andeq	r0, r0, r0, lsl r1
    1138:	49505310 	ldmdbmi	r0, {r4, r8, r9, ip, lr}^
    113c:	5cbf0400 	cfldrspl	mvf0, [pc]	; 1144 <_Min_Stack_Size+0xf44>
    1140:	00000001 	andeq	r0, r0, r1
    1144:	00073405 	andeq	r3, r7, r5, lsl #8
    1148:	97042000 	strls	r2, [r4, -r0]
    114c:	00000202 	andeq	r0, r0, r2, lsl #4
    1150:	000b4d06 	andeq	r4, fp, r6, lsl #26
    1154:	a9990400 	ldmibge	r9, {sl}
    1158:	00000000 	andeq	r0, r0, r0
    115c:	00646911 	rsbeq	r6, r4, r1, lsl r9
    1160:	02029a04 	andeq	r9, r2, #4, 20	; 0x4000
    1164:	06020000 	streq	r0, [r2], -r0
    1168:	00000b19 	andeq	r0, r0, r9, lsl fp
    116c:	00bfa204 	adcseq	sl, pc, r4, lsl #4
    1170:	11080000 	mrsne	r0, (UNDEF: 8)
    1174:	04005343 	streq	r5, [r0], #-835	; 0xfffffcbd
    1178:	0000ebaa 	andeq	lr, r0, sl, lsr #23
    117c:	49111000 	ldmdbmi	r1, {ip}
    1180:	c2040046 	andgt	r0, r4, #70	; 0x46
    1184:	00000199 	muleq	r0, r9, r1
    1188:	9e120018 	mrcls	0, 0, r0, cr2, cr8, {0}
    118c:	12000000 	andne	r0, r0, #0
    1190:	13000002 	movwne	r0, #2
    1194:	00000212 	andeq	r0, r0, r2, lsl r2
    1198:	04030005 	streq	r0, [r3], #-5
    119c:	00001507 	andeq	r1, r0, r7, lsl #10
    11a0:	088b0200 	stmeq	fp, {r9}
    11a4:	c3040000 	movwgt	r0, #16384	; 0x4000
    11a8:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    11ac:	cc040114 	stfgts	f0, [r4], {20}
    11b0:	0000028d 	andeq	r0, r0, sp, lsl #5
    11b4:	00088315 	andeq	r8, r8, r5, lsl r3
    11b8:	e4150000 	ldr	r0, [r5], #-0
    11bc:	0100000b 	tsteq	r0, fp
    11c0:	000b3c15 	andeq	r3, fp, r5, lsl ip
    11c4:	bf150200 	svclt	0x00150200
    11c8:	03000009 	movweq	r0, #9
    11cc:	00080b15 	andeq	r0, r8, r5, lsl fp
    11d0:	f8150400 			; <UNDEFINED> instruction: 0xf8150400
    11d4:	0500000a 	streq	r0, [r0, #-10]
    11d8:	00079d15 	andeq	r9, r7, r5, lsl sp
    11dc:	d4150600 	ldrle	r0, [r5], #-1536	; 0xfffffa00
    11e0:	0700000c 	streq	r0, [r0, -ip]
    11e4:	000a7715 	andeq	r7, sl, r5, lsl r7
    11e8:	fb150800 	blx	5431f2 <_Min_Stack_Size+0x542ff2>
    11ec:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    11f0:	00085315 	andeq	r5, r8, r5, lsl r3
    11f4:	e3150a00 	tst	r5, #0, 20
    11f8:	0b00000a 	bleq	1228 <_Min_Stack_Size+0x1028>
    11fc:	00076415 	andeq	r6, r7, r5, lsl r4
    1200:	2c150c00 	ldccs	12, cr0, [r5], {-0}
    1204:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    1208:	0006eb15 	andeq	lr, r6, r5, lsl fp
    120c:	2d150e00 	ldccs	14, cr0, [r5, #-0]
    1210:	0f00000b 	svceq	0x0000000b
    1214:	0a670200 	beq	19c1a1c <_Min_Stack_Size+0x19c181c>
    1218:	e0040000 	and	r0, r4, r0
    121c:	00000224 	andeq	r0, r0, r4, lsr #4
    1220:	e7040114 	smlad	r4, r4, r1, r0
    1224:	000002c5 	andeq	r0, r0, r5, asr #5
    1228:	00095c15 	andeq	r5, r9, r5, lsl ip
    122c:	8e150000 	cdphi	0, 1, cr0, cr5, cr0, {0}
    1230:	01000007 	tsteq	r0, r7
    1234:	0009eb15 	andeq	lr, r9, r5, lsl fp
    1238:	74150200 	ldrvc	r0, [r5], #-512	; 0xfffffe00
    123c:	03000008 	movweq	r0, #8
    1240:	00099115 	andeq	r9, r9, r5, lsl r1
    1244:	4a150400 	bmi	54224c <_Min_Stack_Size+0x54204c>
    1248:	0500000c 	streq	r0, [r0, #-12]
    124c:	0b080200 	bleq	201a54 <_Min_Stack_Size+0x201854>
    1250:	ee040000 	cdp	0, 0, cr0, cr4, cr0, {0}
    1254:	00000298 	muleq	r0, r8, r2
    1258:	f7040214 			; <UNDEFINED> instruction: 0xf7040214
    125c:	00000336 	andeq	r0, r0, r6, lsr r3
    1260:	00095515 	andeq	r5, r9, r5, lsl r5
    1264:	cf151000 	svcgt	0x00151000
    1268:	2000000a 	andcs	r0, r0, sl
    126c:	000a1c15 	andeq	r1, sl, r5, lsl ip
    1270:	1500c000 	strne	ip, [r0, #-0]
    1274:	000008de 	ldrdeq	r0, [r0], -lr
    1278:	7c150180 	ldfvcs	f0, [r5], {128}	; 0x80
    127c:	8000000b 	andhi	r0, r0, fp
    1280:	0b861502 	bleq	fe186690 <BootRAM+0xd0f6e31>
    1284:	04800000 	streq	r0, [r0], #0
    1288:	000b9015 	andeq	r9, fp, r5, lsl r0
    128c:	15088000 	strne	r8, [r8, #-0]
    1290:	00000b9a 	muleq	r0, sl, fp
    1294:	a4151080 	ldrge	r1, [r5], #-128	; 0xffffff80
    1298:	8000000b 	andhi	r0, r0, fp
    129c:	0bae1520 	bleq	feb86724 <BootRAM+0xdaf6ec5>
    12a0:	c0800000 	addgt	r0, r0, r0
    12a4:	0bb81500 	bleq	fee066ac <BootRAM+0xdd76e4d>
    12a8:	80800000 	addhi	r0, r0, r0
    12ac:	0bc21501 	bleq	ff0866b8 <BootRAM+0xdff6e59>
    12b0:	80800000 	addhi	r0, r0, r0
    12b4:	0cc11502 	cfstr64eq	mvdx1, [r1], {2}
    12b8:	fe800000 	cdp2	0, 8, cr0, cr0, cr0, {0}
    12bc:	23160003 	tstcs	r6, #3
    12c0:	0400000b 	streq	r0, [r0], #-11
    12c4:	02d00114 	sbcseq	r0, r0, #20, 2
    12c8:	1a170000 	bne	5c12d0 <_Min_Stack_Size+0x5c10d0>
    12cc:	04000009 	streq	r0, [r0], #-9
    12d0:	83012b04 	movwhi	r2, #6916	; 0x1b04
    12d4:	18000003 	stmdane	r0, {r0, r1}
    12d8:	04007962 	streq	r7, [r0], #-2402	; 0xfffff69e
    12dc:	009e012d 	addseq	r0, lr, sp, lsr #2
    12e0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    12e4:	00000b50 	andeq	r0, r0, r0, asr fp
    12e8:	9e012e04 	cdpls	14, 0, cr2, cr1, cr4, {0}
    12ec:	01000000 	mrseq	r0, (UNDEF: 0)
    12f0:	000c9519 	andeq	r9, ip, r9, lsl r5
    12f4:	012f0400 			; <UNDEFINED> instruction: 0x012f0400
    12f8:	0000009e 	muleq	r0, lr, r0
    12fc:	0bf41902 	bleq	ffd0770c <BootRAM+0xec77ead>
    1300:	30040000 	andcc	r0, r4, r0
    1304:	00009e01 	andeq	r9, r0, r1, lsl #28
    1308:	16000300 	strne	r0, [r0], -r0, lsl #6
    130c:	00000c59 	andeq	r0, r0, r9, asr ip
    1310:	42013304 	andmi	r3, r1, #4, 6	; 0x10000000
    1314:	1a000003 	bne	1328 <_Min_Stack_Size+0x1128>
    1318:	013b0401 	teqeq	fp, r1, lsl #8
    131c:	000003a5 	andeq	r0, r0, r5, lsr #7
    1320:	0009dc15 	andeq	sp, r9, r5, lsl ip
    1324:	24150100 	ldrcs	r0, [r5], #-256	; 0xffffff00
    1328:	0200000d 	andeq	r0, r0, #13
    132c:	089e1600 	ldmeq	lr, {r9, sl, ip}
    1330:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
    1334:	00038f01 	andeq	r8, r3, r1, lsl #30
    1338:	07ad1700 	streq	r1, [sp, r0, lsl #14]!
    133c:	04170000 	ldreq	r0, [r7], #-0
    1340:	040a0144 	streq	r0, [sl], #-324	; 0xfffffebc
    1344:	6d180000 	ldcvs	0, cr0, [r8, #-0]
    1348:	04006361 	streq	r6, [r0], #-865	; 0xfffffc9f
    134c:	02020146 	andeq	r0, r2, #-2147483631	; 0x80000011
    1350:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1354:	04007069 	streq	r7, [r0], #-105	; 0xffffff97
    1358:	040a0147 	streq	r0, [sl], #-327	; 0xfffffeb9
    135c:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
    1360:	04006e73 	streq	r6, [r0], #-3699	; 0xfffff18d
    1364:	040a0148 	streq	r0, [sl], #-328	; 0xfffffeb8
    1368:	180a0000 	stmdane	sl, {}	; <UNPREDICTABLE>
    136c:	04007767 	streq	r7, [r0], #-1895	; 0xfffff899
    1370:	040a0149 	streq	r0, [sl], #-329	; 0xfffffeb7
    1374:	180e0000 	stmdane	lr, {}	; <UNPREDICTABLE>
    1378:	00736e64 	rsbseq	r6, r3, r4, ror #28
    137c:	0a014a04 	beq	53b94 <_Min_Stack_Size+0x53994>
    1380:	12000004 	andne	r0, r0, #4
    1384:	000c6519 	andeq	r6, ip, r9, lsl r5
    1388:	014b0400 	cmpeq	fp, r0, lsl #8
    138c:	000003a5 	andeq	r0, r0, r5, lsr #7
    1390:	9e120016 	mrcls	0, 0, r0, cr2, cr6, {0}
    1394:	1a000000 	bne	139c <_Min_Stack_Size+0x119c>
    1398:	13000004 	movwne	r0, #4
    139c:	00000212 	andeq	r0, r0, r2, lsl r2
    13a0:	d0160003 	andsle	r0, r6, r3
    13a4:	04000009 	streq	r0, [r0], #-9
    13a8:	03b1014c 			; <UNDEFINED> instruction: 0x03b1014c
    13ac:	011a0000 	tsteq	sl, r0
    13b0:	48015304 	stmdami	r1, {r2, r8, r9, ip, lr}
    13b4:	15000004 	strne	r0, [r0, #-4]
    13b8:	00000751 	andeq	r0, r0, r1, asr r7
    13bc:	0cb41502 	cfldr32eq	mvfx1, [r4], #8
    13c0:	15200000 	strne	r0, [r0, #-0]!
    13c4:	00000ab9 			; <UNDEFINED> instruction: 0x00000ab9
    13c8:	08421510 	stmdaeq	r2, {r4, r8, sl, ip}^
    13cc:	00080000 	andeq	r0, r8, r0
    13d0:	00093d16 	andeq	r3, r9, r6, lsl sp
    13d4:	015a0400 	cmpeq	sl, r0, lsl #8
    13d8:	00000426 	andeq	r0, r0, r6, lsr #8
    13dc:	000b5a17 	andeq	r5, fp, r7, lsl sl
    13e0:	60040400 	andvs	r0, r4, r0, lsl #8
    13e4:	00047c01 	andeq	r7, r4, r1, lsl #24
    13e8:	08941900 	ldmeq	r4, {r8, fp, ip}
    13ec:	62040000 	andvs	r0, r4, #0
    13f0:	00009e01 	andeq	r9, r0, r1, lsl #28
    13f4:	4a190000 	bmi	6413fc <_Min_Stack_Size+0x6411fc>
    13f8:	04000009 	streq	r0, [r0], #-9
    13fc:	00a90163 	adceq	r0, r9, r3, ror #2
    1400:	00020000 	andeq	r0, r2, r0
    1404:	0008ed16 	andeq	lr, r8, r6, lsl sp
    1408:	01640400 	cmneq	r4, r0, lsl #8
    140c:	00000454 	andeq	r0, r0, r4, asr r4
    1410:	00073e1b 	andeq	r3, r7, fp, lsl lr
    1414:	e82f0100 	stmda	pc!, {r8}	; <UNPREDICTABLE>
    1418:	0c080014 	stceq	0, cr0, [r8], {20}
    141c:	01000000 	mrseq	r0, (UNDEF: 0)
    1420:	0c081b9c 	stceq	11, cr1, [r8], {156}	; 0x9c
    1424:	35010000 	strcc	r0, [r1, #-0]
    1428:	080014f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, ip}
    142c:	0000000c 	andeq	r0, r0, ip
    1430:	c11b9c01 	tstgt	fp, r1, lsl #24
    1434:	01000008 	tsteq	r0, r8
    1438:	0015003b 	andseq	r0, r5, fp, lsr r0
    143c:	00000c08 	andeq	r0, r0, r8, lsl #24
    1440:	1b9c0100 	blne	fe701848 <BootRAM+0xd671fe9>
    1444:	00000aa5 	andeq	r0, r0, r5, lsr #21
    1448:	150c4101 	strne	r4, [ip, #-257]	; 0xfffffeff
    144c:	000c0800 	andeq	r0, ip, r0, lsl #16
    1450:	9c010000 	stcls	0, cr0, [r1], {-0}
    1454:	0009281c 	andeq	r2, r9, ip, lsl r8
    1458:	9e470100 	dvflss	f0, f7, f0
    145c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1460:	1a080015 	bne	2014bc <_Min_Stack_Size+0x2012bc>
    1464:	01000000 	mrseq	r0, (UNDEF: 0)
    1468:	0004f49c 	muleq	r4, ip, r4
    146c:	0bcc1d00 	bleq	ff308874 <BootRAM+0xe279015>
    1470:	47010000 	strmi	r0, [r1, -r0]
    1474:	000000b4 	strheq	r0, [r0], -r4
    1478:	00749102 	rsbseq	r9, r4, r2, lsl #2
    147c:	0007161e 	andeq	r1, r7, lr, lsl r6
    1480:	344e0100 	strbcc	r0, [lr], #-256	; 0xffffff00
    1484:	1c080015 	stcne	0, cr0, [r8], {21}
    1488:	01000000 	mrseq	r0, (UNDEF: 0)
    148c:	0005259c 	muleq	r5, ip, r5
    1490:	0bcc1d00 	bleq	ff308898 <BootRAM+0xe279039>
    1494:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    1498:	000000b4 	strheq	r0, [r0], -r4
    149c:	1f749102 	svcne	0x00749102
    14a0:	01006277 	tsteq	r0, r7, ror r2
    14a4:	00009e4e 	andeq	r9, r0, lr, asr #28
    14a8:	73910200 	orrsvc	r0, r1, #0, 4
    14ac:	07e82000 	strbeq	r2, [r8, r0]!
    14b0:	54010000 	strpl	r0, [r1], #-0
    14b4:	0000009e 	muleq	r0, lr, r0
    14b8:	08001550 	stmdaeq	r0, {r4, r6, r8, sl, ip}
    14bc:	00000010 	andeq	r0, r0, r0, lsl r0
    14c0:	d21e9c01 	andsle	r9, lr, #256	; 0x100
    14c4:	01000007 	tsteq	r0, r7
    14c8:	0015605a 	andseq	r6, r5, sl, asr r0
    14cc:	00001408 	andeq	r1, r0, r8, lsl #8
    14d0:	5d9c0100 	ldfpls	f0, [ip]
    14d4:	1f000005 	svcne	0x00000005
    14d8:	01006277 	tsteq	r0, r7, ror r2
    14dc:	00009e5a 	andeq	r9, r0, sl, asr lr
    14e0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    14e4:	0c7d1e00 	ldcleq	14, cr1, [sp], #-0
    14e8:	70010000 	andvc	r0, r1, r0
    14ec:	00000000 	andeq	r0, r0, r0
    14f0:	00000048 	andeq	r0, r0, r8, asr #32
    14f4:	058f9c01 	streq	r9, [pc, #3073]	; 20fd <_Min_Stack_Size+0x1efd>
    14f8:	2c1d0000 	ldccs	0, cr0, [sp], {-0}
    14fc:	01000007 	tsteq	r0, r7
    1500:	0000e570 	andeq	lr, r0, r0, ror r5
    1504:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1508:	000a811d 	andeq	r8, sl, sp, lsl r1
    150c:	e5700100 	ldrb	r0, [r0, #-256]!	; 0xffffff00
    1510:	02000000 	andeq	r0, r0, #0
    1514:	1e007091 	mcrne	0, 0, r7, cr0, cr1, {4}
    1518:	00000a06 	andeq	r0, r0, r6, lsl #20
    151c:	15747e01 	ldrbne	r7, [r4, #-3585]!	; 0xfffff1ff
    1520:	00480800 	subeq	r0, r8, r0, lsl #16
    1524:	9c010000 	stcls	0, cr0, [r1], {-0}
    1528:	000005c1 	andeq	r0, r0, r1, asr #11
    152c:	00075d1d 	andeq	r5, r7, sp, lsl sp
    1530:	e57e0100 	ldrb	r0, [lr, #-256]!	; 0xffffff00
    1534:	02000000 	andeq	r0, r0, #0
    1538:	d41d7491 	ldrle	r7, [sp], #-1169	; 0xfffffb6f
    153c:	0100000b 	tsteq	r0, fp
    1540:	0000e57e 	andeq	lr, r0, lr, ror r5
    1544:	70910200 	addsvc	r0, r1, r0, lsl #4
    1548:	07bb1e00 	ldreq	r1, [fp, r0, lsl #28]!
    154c:	8c010000 	stchi	0, cr0, [r1], {-0}
    1550:	00000000 	andeq	r0, r0, r0
    1554:	00000054 	andeq	r0, r0, r4, asr r0
    1558:	05f39c01 	ldrbeq	r9, [r3, #3073]!	; 0xc01
    155c:	ba1d0000 	blt	741564 <_Min_Stack_Size+0x741364>
    1560:	01000008 	tsteq	r0, r8
    1564:	0001408c 	andeq	r4, r1, ip, lsl #1
    1568:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    156c:	000ccd1d 	andeq	ip, ip, sp, lsl sp
    1570:	568c0100 	strpl	r0, [ip], r0, lsl #2
    1574:	02000001 	andeq	r0, r0, #1
    1578:	1e007091 	mcrne	0, 0, r7, cr0, cr1, {4}
    157c:	00000a3e 	andeq	r0, r0, lr, lsr sl
    1580:	15bc9c01 	ldrne	r9, [ip, #3073]!	; 0xc01
    1584:	00540800 	subseq	r0, r4, r0, lsl #16
    1588:	9c010000 	stcls	0, cr0, [r1], {-0}
    158c:	00000625 	andeq	r0, r0, r5, lsr #12
    1590:	000bdd1d 	andeq	sp, fp, sp, lsl sp
    1594:	829c0100 	addshi	r0, ip, #0, 2
    1598:	02000001 	andeq	r0, r0, #1
    159c:	a51d7491 	ldrge	r7, [sp, #-1169]	; 0xfffffb6f
    15a0:	01000009 	tsteq	r0, r9
    15a4:	0001939c 	muleq	r1, ip, r3
    15a8:	70910200 	addsvc	r0, r1, r0, lsl #4
    15ac:	081b2100 	ldmdaeq	fp, {r8, sp}
    15b0:	ac010000 	stcge	0, cr0, [r1], {-0}
    15b4:	00000093 	muleq	r0, r3, r0
    15b8:	08001610 	stmdaeq	r0, {r4, r9, sl, ip}
    15bc:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    15c0:	06779c01 	ldrbteq	r9, [r7], -r1, lsl #24
    15c4:	891d0000 	ldmdbhi	sp, {}	; <UNPREDICTABLE>
    15c8:	0100000a 	tsteq	r0, sl
    15cc:	00028dac 	andeq	r8, r2, ip, lsr #27
    15d0:	5f910200 	svcpl	0x00910200
    15d4:	6772611f 			; <UNDEFINED> instruction: 0x6772611f
    15d8:	77ac0100 	strvc	r0, [ip, r0, lsl #2]!
    15dc:	02000006 	andeq	r0, r0, #6
    15e0:	74225891 	strtvc	r5, [r2], #-2193	; 0xfffff76f
    15e4:	0100706d 	tsteq	r0, sp, rrx
    15e8:	00009eae 	andeq	r9, r0, lr, lsr #29
    15ec:	6f910200 	svcvs	0x00910200
    15f0:	000b1e23 	andeq	r1, fp, r3, lsr #28
    15f4:	79af0100 	stmibvc	pc!, {r8}	; <UNPREDICTABLE>
    15f8:	02000006 	andeq	r0, r0, #6
    15fc:	24006491 	strcs	r6, [r0], #-1169	; 0xfffffb6f
    1600:	06891204 	streq	r1, [r9], r4, lsl #4
    1604:	06890000 	streq	r0, [r9], r0
    1608:	12130000 	andsne	r0, r3, #0
    160c:	01000002 	tsteq	r0, r2
    1610:	9e040800 	cdpls	8, 0, cr0, cr4, cr0, {0}
    1614:	21000000 	mrscs	r0, (UNDEF: 0)
    1618:	0000090f 	andeq	r0, r0, pc, lsl #18
    161c:	0093f801 	addseq	pc, r3, r1, lsl #16
    1620:	17c80000 	strbne	r0, [r8, r0]
    1624:	007c0800 	rsbseq	r0, ip, r0, lsl #16
    1628:	9c010000 	stcls	0, cr0, [r1], {-0}
    162c:	000006c5 	andeq	r0, r0, r5, asr #13
    1630:	00083b1d 	andeq	r3, r8, sp, lsl fp
    1634:	c5f80100 	ldrbgt	r0, [r8, #256]!	; 0x100
    1638:	02000002 	andeq	r0, r0, #2
    163c:	611f7791 			; <UNDEFINED> instruction: 0x611f7791
    1640:	01006772 	tsteq	r0, r2, ror r7
    1644:	000677f8 	strdeq	r7, [r6], -r8
    1648:	70910200 	addsvc	r0, r1, r0, lsl #4
    164c:	0b6b2500 	bleq	1acaa54 <_Min_Stack_Size+0x1aca854>
    1650:	14010000 	strne	r0, [r1], #-0
    1654:	00184401 	andseq	r4, r8, r1, lsl #8
    1658:	00009608 	andeq	r9, r0, r8, lsl #12
    165c:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    1660:	26000007 	strcs	r0, [r0], -r7
    1664:	01007767 	tsteq	r0, r7, ror #14
    1668:	040a0116 	streq	r0, [sl], #-278	; 0xfffffeea
    166c:	91020000 	mrsls	r0, (UNDEF: 2)
    1670:	6e732674 	mrcvs	6, 3, r2, cr3, cr4, {3}
    1674:	01160100 	tsteq	r6, r0, lsl #2
    1678:	0000040a 	andeq	r0, r0, sl, lsl #8
    167c:	26709102 	ldrbtcs	r9, [r0], -r2, lsl #2
    1680:	00706973 	rsbseq	r6, r0, r3, ror r9
    1684:	0a011601 	beq	46e90 <_Min_Stack_Size+0x46c90>
    1688:	02000004 	andeq	r0, r0, #4
    168c:	6d266c91 	stcvs	12, cr6, [r6, #-580]!	; 0xfffffdbc
    1690:	01006361 	tsteq	r0, r1, ror #6
    1694:	02020117 	andeq	r0, r2, #-1073741819	; 0xc0000005
    1698:	91020000 	mrsls	r0, (UNDEF: 2)
    169c:	e4270064 	strt	r0, [r7], #-100	; 0xffffff9c
    16a0:	0100000c 	tsteq	r0, ip
    16a4:	00930122 	addseq	r0, r3, r2, lsr #2
    16a8:	18dc0000 	ldmne	ip, {}^	; <UNPREDICTABLE>
    16ac:	01120800 	tsteq	r2, r0, lsl #16
    16b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    16b4:	0000076b 	andeq	r0, r0, fp, ror #14
    16b8:	00080428 	andeq	r0, r8, r8, lsr #8
    16bc:	01220100 			; <UNDEFINED> instruction: 0x01220100
    16c0:	00000689 	andeq	r0, r0, r9, lsl #13
    16c4:	286c9102 	stmdacs	ip!, {r1, r8, ip, pc}^
    16c8:	00000cad 	andeq	r0, r0, sp, lsr #25
    16cc:	89012201 	stmdbhi	r1, {r0, r9, sp}
    16d0:	02000006 	andeq	r0, r0, #6
    16d4:	69266891 	stmdbvs	r6!, {r0, r4, r7, fp, sp, lr}
    16d8:	01240100 			; <UNDEFINED> instruction: 0x01240100
    16dc:	00000093 	muleq	r0, r3, r0
    16e0:	26779102 	ldrbtcs	r9, [r7], -r2, lsl #2
    16e4:	00706d74 	rsbseq	r6, r0, r4, ror sp
    16e8:	93012501 	movwls	r2, #5377	; 0x1501
    16ec:	02000000 	andeq	r0, r0, #0
    16f0:	25007691 	strcs	r7, [r0, #-1681]	; 0xfffff96f
    16f4:	00000a90 	muleq	r0, r0, sl
    16f8:	f0013c01 			; <UNDEFINED> instruction: 0xf0013c01
    16fc:	3a080019 	bcc	201768 <_Min_Stack_Size+0x201568>
    1700:	01000000 	mrseq	r0, (UNDEF: 0)
    1704:	0007ae9c 	muleq	r7, ip, lr
    1708:	09a02800 	stmibeq	r0!, {fp, sp}
    170c:	3c010000 	stccc	0, cr0, [r1], {-0}
    1710:	00033601 	andeq	r3, r3, r1, lsl #12
    1714:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    1718:	00726926 	rsbseq	r6, r2, r6, lsr #18
    171c:	9e013e01 	cdpls	14, 0, cr3, cr1, cr1, {0}
    1720:	02000000 	andeq	r0, r0, #0
    1724:	73267791 			; <UNDEFINED> instruction: 0x73267791
    1728:	01007269 	tsteq	r0, r9, ror #4
    172c:	009e013f 	addseq	r0, lr, pc, lsr r1
    1730:	91020000 	mrsls	r0, (UNDEF: 2)
    1734:	26270076 			; <UNDEFINED> instruction: 0x26270076
    1738:	01000008 	tsteq	r0, r8
    173c:	03360154 	teqeq	r6, #84, 2
    1740:	1a2c0000 	bne	b01748 <_Min_Stack_Size+0xb01548>
    1744:	004a0800 	subeq	r0, sl, r0, lsl #16
    1748:	9c010000 	stcls	0, cr0, [r1], {-0}
    174c:	000007f5 	strdeq	r0, [r0], -r5
    1750:	00726926 	rsbseq	r6, r2, r6, lsr #18
    1754:	9e015601 	cfmadd32ls	mvax0, mvfx5, mvfx1, mvfx1
    1758:	02000000 	andeq	r0, r0, #0
    175c:	73267791 			; <UNDEFINED> instruction: 0x73267791
    1760:	01007269 	tsteq	r0, r9, ror #4
    1764:	009e0157 	addseq	r0, lr, r7, asr r1
    1768:	91020000 	mrsls	r0, (UNDEF: 2)
    176c:	65722676 	ldrbvs	r2, [r2, #-1654]!	; 0xfffff98a
    1770:	58010074 	stmdapl	r1, {r2, r4, r5, r6}
    1774:	0000a901 	andeq	sl, r0, r1, lsl #18
    1778:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    177c:	06fd2500 	ldrbteq	r2, [sp], r0, lsl #10
    1780:	6c010000 	stcvs	0, cr0, [r1], {-0}
    1784:	001a7801 	andseq	r7, sl, r1, lsl #16
    1788:	00003408 	andeq	r3, r0, r8, lsl #8
    178c:	399c0100 	ldmibcc	ip, {r8}
    1790:	28000008 	stmdacs	r0, {r3}
    1794:	000009a0 	andeq	r0, r0, r0, lsr #19
    1798:	36016c01 	strcc	r6, [r1], -r1, lsl #24
    179c:	02000003 	andeq	r0, r0, #3
    17a0:	69266e91 	stmdbvs	r6!, {r0, r4, r7, r9, sl, fp, sp, lr}
    17a4:	0100726d 	tsteq	r0, sp, ror #4
    17a8:	009e016e 	addseq	r0, lr, lr, ror #2
    17ac:	91020000 	mrsls	r0, (UNDEF: 2)
    17b0:	0b552977 	bleq	154bd94 <_Min_Stack_Size+0x154bb94>
    17b4:	6f010000 	svcvs	0x00010000
    17b8:	00009e01 	andeq	r9, r0, r1, lsl #28
    17bc:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    17c0:	07752700 	ldrbeq	r2, [r5, -r0, lsl #14]!
    17c4:	84010000 	strhi	r0, [r1], #-0
    17c8:	00033601 	andeq	r3, r3, r1, lsl #12
    17cc:	001aac00 	andseq	sl, sl, r0, lsl #24
    17d0:	00004608 	andeq	r4, r0, r8, lsl #12
    17d4:	819c0100 	orrshi	r0, ip, r0, lsl #2
    17d8:	26000008 	strcs	r0, [r0], -r8
    17dc:	00726d69 	rsbseq	r6, r2, r9, ror #26
    17e0:	9e018601 	cfmadd32ls	mvax0, mvfx8, mvfx1, mvfx1
    17e4:	02000000 	andeq	r0, r0, #0
    17e8:	55297791 	strpl	r7, [r9, #-1937]!	; 0xfffff86f
    17ec:	0100000b 	tsteq	r0, fp
    17f0:	009e0187 	addseq	r0, lr, r7, lsl #3
    17f4:	91020000 	mrsls	r0, (UNDEF: 2)
    17f8:	65722676 	ldrbvs	r2, [r2, #-1654]!	; 0xfffff98a
    17fc:	88010074 	stmdahi	r1, {r2, r4, r5, r6}
    1800:	0000a901 	andeq	sl, r0, r1, lsl #18
    1804:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1808:	08a82700 	stmiaeq	r8!, {r8, r9, sl, sp}
    180c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1810:	00009301 	andeq	r9, r0, r1, lsl #6
    1814:	001af400 	andseq	pc, sl, r0, lsl #8
    1818:	00002e08 	andeq	r2, r0, r8, lsl #28
    181c:	ab9c0100 	blge	fe701c24 <BootRAM+0xd6723c5>
    1820:	26000008 	strcs	r0, [r0], -r8
    1824:	00706d74 	rsbseq	r6, r0, r4, ror sp
    1828:	93019e01 	movwls	r9, #7681	; 0x1e01
    182c:	02000000 	andeq	r0, r0, #0
    1830:	27007791 			; <UNDEFINED> instruction: 0x27007791
    1834:	00000d11 	andeq	r0, r0, r1, lsl sp
    1838:	9301b101 	movwls	fp, #4353	; 0x1101
    183c:	24000000 	strcs	r0, [r0], #-0
    1840:	3208001b 	andcc	r0, r8, #27
    1844:	01000000 	mrseq	r0, (UNDEF: 0)
    1848:	0008d59c 	muleq	r8, ip, r5
    184c:	6d742600 	ldclvs	6, cr2, [r4, #-0]
    1850:	b3010070 	movwlt	r0, #4208	; 0x1070
    1854:	00009301 	andeq	r9, r0, r1, lsl #6
    1858:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    185c:	0cf12500 	cfldr64eq	mvdx2, [r1]
    1860:	c6010000 	strgt	r0, [r1], -r0
    1864:	001b5801 	andseq	r5, fp, r1, lsl #16
    1868:	00004c08 	andeq	r4, r0, r8, lsl #24
    186c:	fb9c0100 	blx	fe701c76 <BootRAM+0xd672417>
    1870:	26000008 	strcs	r0, [r0], -r8
    1874:	00706d74 	rsbseq	r6, r0, r4, ror sp
    1878:	9e01c801 	cdpls	8, 0, cr12, cr1, cr1, {0}
    187c:	02000000 	andeq	r0, r0, #0
    1880:	25007791 	strcs	r7, [r0, #-1937]	; 0xfffff86f
    1884:	00000862 	andeq	r0, r0, r2, ror #16
    1888:	a401d001 	strge	sp, [r1], #-1
    188c:	8208001b 	andhi	r0, r8, #27
    1890:	01000000 	mrseq	r0, (UNDEF: 0)
    1894:	0009309c 	muleq	r9, ip, r0
    1898:	0ca52800 	stceq	8, cr2, [r5]
    189c:	d0010000 	andle	r0, r1, r0
    18a0:	00093001 	andeq	r3, r9, r1
    18a4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    18a8:	706d7426 	rsbvc	r7, sp, r6, lsr #8
    18ac:	01d20100 	bicseq	r0, r2, r0, lsl #2
    18b0:	0000009e 	muleq	r0, lr, r0
    18b4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    18b8:	03830408 	orreq	r0, r3, #8, 8	; 0x8000000
    18bc:	9b250000 	blls	9418c4 <_Min_Stack_Size+0x9416c4>
    18c0:	0100000c 	tsteq	r0, ip
    18c4:	1c2801ee 	stfnes	f0, [r8], #-952	; 0xfffffc48
    18c8:	00960800 	addseq	r0, r6, r0, lsl #16
    18cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    18d0:	0000096b 	andeq	r0, r0, fp, ror #18
    18d4:	000ca528 	andeq	sl, ip, r8, lsr #10
    18d8:	01ee0100 	mvneq	r0, r0, lsl #2
    18dc:	00000930 	andeq	r0, r0, r0, lsr r9
    18e0:	266c9102 	strbtcs	r9, [ip], -r2, lsl #2
    18e4:	00706d74 	rsbseq	r6, r0, r4, ror sp
    18e8:	9e01f001 	cdpls	0, 0, cr15, cr1, cr1, {0}
    18ec:	02000000 	andeq	r0, r0, #0
    18f0:	25007791 	strcs	r7, [r0, #-1937]	; 0xfffff86f
    18f4:	00000a55 	andeq	r0, r0, r5, asr sl
    18f8:	00021501 	andeq	r1, r2, r1, lsl #10
    18fc:	46000000 	strmi	r0, [r0], -r0
    1900:	01000000 	mrseq	r0, (UNDEF: 0)
    1904:	0009a09c 	muleq	r9, ip, r0
    1908:	0ca52800 	stceq	8, cr2, [r5]
    190c:	15010000 	strne	r0, [r1, #-0]
    1910:	00093002 	andeq	r3, r9, r2
    1914:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1918:	706d7426 	rsbvc	r7, sp, r6, lsr #8
    191c:	02170100 	andseq	r0, r7, #0, 2
    1920:	0000009e 	muleq	r0, lr, r0
    1924:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1928:	00096b27 	andeq	r6, r9, r7, lsr #22
    192c:	021c0100 	andseq	r0, ip, #0, 2
    1930:	00000093 	muleq	r0, r3, r0
    1934:	08001cc0 	stmdaeq	r0, {r6, r7, sl, fp, ip}
    1938:	00000092 	muleq	r0, r2, r0
    193c:	09d99c01 	ldmibeq	r9, {r0, sl, fp, ip, pc}^
    1940:	1e280000 	cdpne	0, 2, cr0, cr8, cr0, {0}
    1944:	0100000d 	tsteq	r0, sp
    1948:	009e021c 	addseq	r0, lr, ip, lsl r2
    194c:	91020000 	mrsls	r0, (UNDEF: 2)
    1950:	6d74266f 	ldclvs	6, cr2, [r4, #-444]!	; 0xfffffe44
    1954:	1e010070 	mcrne	0, 0, r0, cr1, cr0, {3}
    1958:	00009e02 	andeq	r9, r0, r2, lsl #28
    195c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1960:	08fc2500 	ldmeq	ip!, {r8, sl, sp}^
    1964:	36010000 	strcc	r0, [r1], -r0
    1968:	001d5402 	andseq	r5, sp, r2, lsl #8
    196c:	00007c08 	andeq	r7, r0, r8, lsl #24
    1970:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    1974:	28000009 	stmdacs	r0, {r0, r3}
    1978:	00000ac6 	andeq	r0, r0, r6, asr #21
    197c:	ff023601 			; <UNDEFINED> instruction: 0xff023601
    1980:	02000009 	andeq	r0, r0, #9
    1984:	08007491 	stmdaeq	r0, {r0, r4, r7, sl, ip, sp, lr}
    1988:	00041a04 	andeq	r1, r4, r4, lsl #20
    198c:	097e2500 	ldmdbeq	lr!, {r8, sl, sp}^
    1990:	43010000 	movwmi	r0, #4096	; 0x1000
    1994:	001dd002 	andseq	sp, sp, r2
    1998:	00007c08 	andeq	r7, r0, r8, lsl #24
    199c:	2b9c0100 	blcs	fe701da4 <BootRAM+0xd672545>
    19a0:	2800000a 	stmdacs	r0, {r1, r3}
    19a4:	00000ac6 	andeq	r0, r0, r6, asr #21
    19a8:	ff024301 			; <UNDEFINED> instruction: 0xff024301
    19ac:	02000009 	andeq	r0, r0, #9
    19b0:	27007491 			; <UNDEFINED> instruction: 0x27007491
    19b4:	00000c6a 	andeq	r0, r0, sl, ror #24
    19b8:	93025001 	movwls	r5, #8193	; 0x2001
    19bc:	4c000000 	stcmi	0, cr0, [r0], {-0}
    19c0:	4408001e 	strmi	r0, [r8], #-30	; 0xffffffe2
    19c4:	01000000 	mrseq	r0, (UNDEF: 0)
    19c8:	000a649c 	muleq	sl, ip, r4
    19cc:	06e32800 	strbteq	r2, [r3], r0, lsl #16
    19d0:	50010000 	andpl	r0, r1, r0
    19d4:	00044802 	andeq	r4, r4, r2, lsl #16
    19d8:	6f910200 	svcvs	0x00910200
    19dc:	706d7426 	rsbvc	r7, sp, r6, lsr #8
    19e0:	02520100 	subseq	r0, r2, #0, 2
    19e4:	0000009e 	muleq	r0, lr, r0
    19e8:	00779102 	rsbseq	r9, r7, r2, lsl #2
    19ec:	0006d82a 	andeq	sp, r6, sl, lsr #16
    19f0:	025e0100 	subseq	r0, lr, #0, 2
    19f4:	00000448 	andeq	r0, r0, r8, asr #8
    19f8:	08001e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, ip}
    19fc:	00000010 	andeq	r0, r0, r0, lsl r0
    1a00:	ac259c01 	stcge	12, cr9, [r5], #-4
    1a04:	01000009 	tsteq	r0, r9
    1a08:	1ea00263 	cdpne	2, 10, cr0, cr0, cr3, {3}
    1a0c:	00400800 	subeq	r0, r0, r0, lsl #16
    1a10:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a14:	00000aa0 	andeq	r0, r0, r0, lsr #21
    1a18:	00084b28 	andeq	r4, r8, r8, lsr #22
    1a1c:	02630100 	rsbeq	r0, r3, #0, 2
    1a20:	00000aa0 	andeq	r0, r0, r0, lsr #21
    1a24:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1a28:	047c0408 	ldrbteq	r0, [ip], #-1032	; 0xfffffbf8
    1a2c:	fe250000 	cdp2	0, 2, cr0, cr5, cr0, {0}
    1a30:	0100000c 	tsteq	r0, ip
    1a34:	1ee00269 	cdpne	2, 14, cr0, cr0, cr9, {3}
    1a38:	00420800 	subeq	r0, r2, r0, lsl #16
    1a3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a40:	00000acc 	andeq	r0, r0, ip, asr #21
    1a44:	00084b28 	andeq	r4, r8, r8, lsr #22
    1a48:	02690100 	rsbeq	r0, r9, #0, 2
    1a4c:	00000aa0 	andeq	r0, r0, r0, lsr #21
    1a50:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1a54:	000af223 	andeq	pc, sl, r3, lsr #4
    1a58:	0a6d0100 	beq	1b41e60 <_Min_Stack_Size+0x1b41c60>
    1a5c:	05000004 	streq	r0, [r0, #-4]
    1a60:	00010403 	andeq	r0, r1, r3, lsl #8
    1a64:	07fd2320 	ldrbeq	r2, [sp, r0, lsr #6]!
    1a68:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1a6c:	000003a5 	andeq	r0, r0, r5, lsr #7
    1a70:	01080305 	tsteq	r8, r5, lsl #6
    1a74:	8c2b2000 	stchi	0, cr2, [fp], #-0
    1a78:	01000008 	tsteq	r0, r8
    1a7c:	0002195f 	andeq	r1, r2, pc, asr r9
    1a80:	20030500 	andcs	r0, r3, r0, lsl #10
    1a84:	00200000 	eoreq	r0, r0, r0
    1a88:	000004d1 	ldrdeq	r0, [r0], -r1
    1a8c:	066d0004 	strbteq	r0, [sp], -r4
    1a90:	01040000 	mrseq	r0, (UNDEF: 4)
    1a94:	00000181 	andeq	r0, r0, r1, lsl #3
    1a98:	000d5e01 	andeq	r5, sp, r1, lsl #28
    1a9c:	00030300 	andeq	r0, r3, r0, lsl #6
    1aa0:	0001e800 	andeq	lr, r1, r0, lsl #16
    1aa4:	00000000 	andeq	r0, r0, r0
    1aa8:	000e6e00 	andeq	r6, lr, r0, lsl #28
    1aac:	06010200 	streq	r0, [r1], -r0, lsl #4
    1ab0:	000000c3 	andeq	r0, r0, r3, asr #1
    1ab4:	00009303 	andeq	r9, r0, r3, lsl #6
    1ab8:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
    1abc:	02000000 	andeq	r0, r0, #0
    1ac0:	00c10801 	sbceq	r0, r1, r1, lsl #16
    1ac4:	02020000 	andeq	r0, r2, #0
    1ac8:	00005105 	andeq	r5, r0, r5, lsl #2
    1acc:	002e0300 	eoreq	r0, lr, r0, lsl #6
    1ad0:	2b020000 	blcs	81ad8 <_Min_Stack_Size+0x818d8>
    1ad4:	00000050 	andeq	r0, r0, r0, asr r0
    1ad8:	23070202 	movwcs	r0, #29186	; 0x7202
    1adc:	02000001 	andeq	r0, r0, #1
    1ae0:	006d0504 	rsbeq	r0, sp, r4, lsl #10
    1ae4:	23030000 	movwcs	r0, #12288	; 0x3000
    1ae8:	02000000 	andeq	r0, r0, #0
    1aec:	00006941 	andeq	r6, r0, r1, asr #18
    1af0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1af4:	000000fa 	strdeq	r0, [r0], -sl
    1af8:	68050802 	stmdavs	r5, {r1, fp}
    1afc:	02000000 	andeq	r0, r0, #0
    1b00:	00f50708 	rscseq	r0, r5, r8, lsl #14
    1b04:	04040000 	streq	r0, [r4], #-0
    1b08:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1b0c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1b10:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1b14:	15070402 	strne	r0, [r7, #-1026]	; 0xfffffbfe
    1b18:	05000000 	streq	r0, [r0, #-0]
    1b1c:	00009904 	andeq	r9, r0, r4, lsl #18
    1b20:	01020600 	tsteq	r2, r0, lsl #12
    1b24:	0000ca08 	andeq	ip, r0, r8, lsl #20
    1b28:	00950300 	addseq	r0, r5, r0, lsl #6
    1b2c:	14030000 	strne	r0, [r3], #-0
    1b30:	0000002c 	andeq	r0, r0, ip, lsr #32
    1b34:	00003003 	andeq	r3, r0, r3
    1b38:	451a0300 	ldrmi	r0, [sl, #-768]	; 0xfffffd00
    1b3c:	03000000 	movweq	r0, #0
    1b40:	00000025 	andeq	r0, r0, r5, lsr #32
    1b44:	005e2003 	subseq	r2, lr, r3
    1b48:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    1b4c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1b50:	00e79e04 	rsceq	r9, r7, r4, lsl #28
    1b54:	4a080000 	bmi	201b5c <_Min_Stack_Size+0x20195c>
    1b58:	04000007 	streq	r0, [r0], #-7
    1b5c:	000093a0 	andeq	r9, r0, r0, lsr #7
    1b60:	14080000 	strne	r0, [r8], #-0
    1b64:	0400000c 	streq	r0, [r0], #-12
    1b68:	000093a1 	andeq	r9, r0, r1, lsr #7
    1b6c:	09000400 	stmdbeq	r0, {sl}
    1b70:	0053435f 	subseq	r4, r3, pc, asr r3
    1b74:	0ca60408 	cfstrseq	mvf0, [r6], #32
    1b78:	08000001 	stmdaeq	r0, {r0}
    1b7c:	000038b1 			; <UNDEFINED> instruction: 0x000038b1
    1b80:	0093a804 	addseq	sl, r3, r4, lsl #16
    1b84:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1b88:	00003993 	muleq	r0, r3, r9
    1b8c:	0093a904 	addseq	sl, r3, r4, lsl #18
    1b90:	00040000 	andeq	r0, r4, r0
    1b94:	b304080a 	movwlt	r0, #18442	; 0x480a
    1b98:	0000012d 	andeq	r0, r0, sp, lsr #2
    1b9c:	0008d308 	andeq	sp, r8, r8, lsl #6
    1ba0:	3cb50400 	cfldrscc	mvf0, [r5]
    1ba4:	00000001 	andeq	r0, r0, r1
    1ba8:	0009fa08 	andeq	pc, r9, r8, lsl #20
    1bac:	52b60400 	adcspl	r0, r6, #0, 8
    1bb0:	04000001 	streq	r0, [r0], #-1
    1bb4:	00a10b00 	adceq	r0, r1, r0, lsl #22
    1bb8:	013c0000 	teqeq	ip, r0
    1bbc:	b70c0000 	strlt	r0, [ip, -r0]
    1bc0:	00000000 	andeq	r0, r0, r0
    1bc4:	012d0405 			; <UNDEFINED> instruction: 0x012d0405
    1bc8:	520d0000 	andpl	r0, sp, #0
    1bcc:	0c000001 	stceq	0, cr0, [r0], {1}
    1bd0:	000000b7 	strheq	r0, [r0], -r7
    1bd4:	0000a10c 	andeq	sl, r0, ip, lsl #2
    1bd8:	04050000 	streq	r0, [r5], #-0
    1bdc:	00000142 	andeq	r0, r0, r2, asr #2
    1be0:	bb04080a 	bllt	103c10 <_Min_Stack_Size+0x103a10>
    1be4:	00000179 	andeq	r0, r0, r9, ror r1
    1be8:	0008d308 	andeq	sp, r8, r8, lsl #6
    1bec:	7ebd0400 	cdpvc	4, 11, cr0, cr13, cr0, {0}
    1bf0:	00000001 	andeq	r0, r0, r1
    1bf4:	0009fa08 	andeq	pc, r9, r8, lsl #20
    1bf8:	8fbe0400 	svchi	0x00be0400
    1bfc:	04000001 	streq	r0, [r0], #-1
    1c00:	00a10e00 	adceq	r0, r1, r0, lsl #28
    1c04:	04050000 	streq	r0, [r5], #-0
    1c08:	00000179 	andeq	r0, r0, r9, ror r1
    1c0c:	00018f0d 	andeq	r8, r1, sp, lsl #30
    1c10:	00a10c00 	adceq	r0, r1, r0, lsl #24
    1c14:	05000000 	streq	r0, [r0, #-0]
    1c18:	00018404 	andeq	r8, r1, r4, lsl #8
    1c1c:	495f0f00 	ldmdbmi	pc, {r8, r9, sl, fp}^	; <UNPREDICTABLE>
    1c20:	04080046 	streq	r0, [r8], #-70	; 0xffffffba
    1c24:	0001b8ae 	andeq	fp, r1, lr, lsr #17
    1c28:	55421000 	strbpl	r1, [r2, #-0]
    1c2c:	b7040053 	smlsdlt	r4, r3, r0, r0
    1c30:	0000010c 	andeq	r0, r0, ip, lsl #2
    1c34:	49505310 	ldmdbmi	r0, {r4, r8, r9, ip, lr}^
    1c38:	58bf0400 	ldmpl	pc!, {sl}	; <UNPREDICTABLE>
    1c3c:	00000001 	andeq	r0, r0, r1
    1c40:	00073407 	andeq	r3, r7, r7, lsl #8
    1c44:	97042000 	strls	r2, [r4, -r0]
    1c48:	000001fe 	strdeq	r0, [r0], -lr
    1c4c:	000b4d08 	andeq	r4, fp, r8, lsl #26
    1c50:	ac990400 	cfldrsge	mvf0, [r9], {0}
    1c54:	00000000 	andeq	r0, r0, r0
    1c58:	00646911 	rsbeq	r6, r4, r1, lsl r9
    1c5c:	01fe9a04 	mvnseq	r9, r4, lsl #20
    1c60:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1c64:	00000b19 	andeq	r0, r0, r9, lsl fp
    1c68:	00c2a204 	sbceq	sl, r2, r4, lsl #4
    1c6c:	11080000 	mrsne	r0, (UNDEF: 8)
    1c70:	04005343 	streq	r5, [r0], #-835	; 0xfffffcbd
    1c74:	0000e7aa 	andeq	lr, r0, sl, lsr #15
    1c78:	49111000 	ldmdbmi	r1, {ip}
    1c7c:	c2040046 	andgt	r0, r4, #70	; 0x46
    1c80:	00000195 	muleq	r0, r5, r1
    1c84:	a1120018 	tstge	r2, r8, lsl r0
    1c88:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1c8c:	13000002 	movwne	r0, #2
    1c90:	0000008c 	andeq	r0, r0, ip, lsl #1
    1c94:	8b030005 	blhi	c1cb0 <_Min_Stack_Size+0xc1ab0>
    1c98:	04000008 	streq	r0, [r0], #-8
    1c9c:	0001b8c3 	andeq	fp, r1, r3, asr #17
    1ca0:	0d8d1400 	cfstrseq	mvf1, [sp]
    1ca4:	34010000 	strcc	r0, [r1], #-0
    1ca8:	000000a1 	andeq	r0, r0, r1, lsr #1
    1cac:	08001f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, ip}
    1cb0:	00000068 	andeq	r0, r0, r8, rrx
    1cb4:	024f9c01 	subeq	r9, pc, #256	; 0x100
    1cb8:	cc150000 	ldcgt	0, cr0, [r5], {-0}
    1cbc:	0100000b 	tsteq	r0, fp
    1cc0:	0000b734 	andeq	fp, r0, r4, lsr r7
    1cc4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1cc8:	74657216 	strbtvc	r7, [r5], #-534	; 0xfffffdea
    1ccc:	a1360100 	teqge	r6, r0, lsl #2
    1cd0:	02000000 	andeq	r0, r0, #0
    1cd4:	17007791 			; <UNDEFINED> instruction: 0x17007791
    1cd8:	00000d9a 	muleq	r0, sl, sp
    1cdc:	1f8c5c01 	svcne	0x008c5c01
    1ce0:	00700800 	rsbseq	r0, r0, r0, lsl #16
    1ce4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ce8:	00000280 	andeq	r0, r0, r0, lsl #5
    1cec:	000bcc15 	andeq	ip, fp, r5, lsl ip
    1cf0:	b75c0100 	ldrblt	r0, [ip, -r0, lsl #2]
    1cf4:	02000000 	andeq	r0, r0, #0
    1cf8:	77187491 			; <UNDEFINED> instruction: 0x77187491
    1cfc:	5c010062 	stcpl	0, cr0, [r1], {98}	; 0x62
    1d00:	000000a1 	andeq	r0, r0, r1, lsr #1
    1d04:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1d08:	000dd217 	andeq	sp, sp, r7, lsl r2
    1d0c:	fc810100 	stc2	1, cr0, [r1], {0}
    1d10:	8c08001f 	stchi	0, cr0, [r8], {31}
    1d14:	01000000 	mrseq	r0, (UNDEF: 0)
    1d18:	0002d89c 	muleq	r2, ip, r8
    1d1c:	0bcc1500 	bleq	ff307124 <BootRAM+0xe2778c5>
    1d20:	81010000 	mrshi	r0, (UNDEF: 1)
    1d24:	000000b7 	strheq	r0, [r0], -r7
    1d28:	15649102 	strbne	r9, [r4, #-258]!	; 0xfffffefe
    1d2c:	00000d59 	andeq	r0, r0, r9, asr sp
    1d30:	02d88101 	sbcseq	r8, r8, #1073741824	; 0x40000000
    1d34:	91020000 	mrsls	r0, (UNDEF: 2)
    1d38:	656c1860 	strbvs	r1, [ip, #-2144]!	; 0xfffff7a0
    1d3c:	8101006e 	tsthi	r1, lr, rrx
    1d40:	000000ac 	andeq	r0, r0, ip, lsr #1
    1d44:	165e9102 	ldrbne	r9, [lr], -r2, lsl #2
    1d48:	83010069 	movwhi	r0, #4201	; 0x1069
    1d4c:	000000ac 	andeq	r0, r0, ip, lsr #1
    1d50:	166e9102 	strbtne	r9, [lr], -r2, lsl #2
    1d54:	8401006a 	strhi	r0, [r1], #-106	; 0xffffff96
    1d58:	000000ac 	andeq	r0, r0, ip, lsr #1
    1d5c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1d60:	00a10405 	adceq	r0, r1, r5, lsl #8
    1d64:	39170000 	ldmdbcc	r7, {}	; <UNPREDICTABLE>
    1d68:	0100000d 	tsteq	r0, sp
    1d6c:	002088ce 	eoreq	r8, r0, lr, asr #17
    1d70:	00009408 	andeq	r9, r0, r8, lsl #8
    1d74:	369c0100 	ldrcc	r0, [ip], r0, lsl #2
    1d78:	15000003 	strne	r0, [r0, #-3]
    1d7c:	00000bcc 	andeq	r0, r0, ip, asr #23
    1d80:	00b7ce01 	adcseq	ip, r7, r1, lsl #28
    1d84:	91020000 	mrsls	r0, (UNDEF: 2)
    1d88:	0d59156c 	cfldr64eq	mvdx1, [r9, #-432]	; 0xfffffe50
    1d8c:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    1d90:	000002d8 	ldrdeq	r0, [r0], -r8
    1d94:	18689102 	stmdane	r8!, {r1, r8, ip, pc}^
    1d98:	006e656c 	rsbeq	r6, lr, ip, ror #10
    1d9c:	00acce01 	adceq	ip, ip, r1, lsl #28
    1da0:	91020000 	mrsls	r0, (UNDEF: 2)
    1da4:	00691666 	rsbeq	r1, r9, r6, ror #12
    1da8:	00acd001 	adceq	sp, ip, r1
    1dac:	91020000 	mrsls	r0, (UNDEF: 2)
    1db0:	006a1676 	rsbeq	r1, sl, r6, ror r6
    1db4:	00acd101 	adceq	sp, ip, r1, lsl #2
    1db8:	91020000 	mrsls	r0, (UNDEF: 2)
    1dbc:	a8190074 	ldmdage	r9, {r2, r4, r5, r6}
    1dc0:	0100000d 	tsteq	r0, sp
    1dc4:	00ac011c 	adceq	r0, ip, ip, lsl r1
    1dc8:	211c0000 	tstcs	ip, r0
    1dcc:	00960800 	addseq	r0, r6, r0, lsl #16
    1dd0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1dd4:	0000037d 	andeq	r0, r0, sp, ror r3
    1dd8:	006e731a 	rsbeq	r7, lr, sl, lsl r3
    1ddc:	a1011c01 	tstge	r1, r1, lsl #24
    1de0:	02000000 	andeq	r0, r0, #0
    1de4:	761b6791 			; <UNDEFINED> instruction: 0x761b6791
    1de8:	01006c61 	tsteq	r0, r1, ror #24
    1dec:	00ac011e 	adceq	r0, ip, lr, lsl r1
    1df0:	91020000 	mrsls	r0, (UNDEF: 2)
    1df4:	0db51c6e 	ldceq	12, cr1, [r5, #440]!	; 0x1b8
    1df8:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    1dfc:	0000ac01 	andeq	sl, r0, r1, lsl #24
    1e00:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1e04:	0de31900 	stcleq	9, cr1, [r3]
    1e08:	2d010000 	stccs	0, cr0, [r1, #-0]
    1e0c:	0000ac01 	andeq	sl, r0, r1, lsl #24
    1e10:	0021b400 	eoreq	fp, r1, r0, lsl #8
    1e14:	00009608 	andeq	r9, r0, r8, lsl #12
    1e18:	c49c0100 	ldrgt	r0, [ip], #256	; 0x100
    1e1c:	1a000003 	bne	1e30 <_Min_Stack_Size+0x1c30>
    1e20:	01006e73 	tsteq	r0, r3, ror lr
    1e24:	00a1012d 	adceq	r0, r1, sp, lsr #2
    1e28:	91020000 	mrsls	r0, (UNDEF: 2)
    1e2c:	61761b67 	cmnvs	r6, r7, ror #22
    1e30:	2f01006c 	svccs	0x0001006c
    1e34:	0000ac01 	andeq	sl, r0, r1, lsl #24
    1e38:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    1e3c:	000db51c 	andeq	fp, sp, ip, lsl r5
    1e40:	012f0100 			; <UNDEFINED> instruction: 0x012f0100
    1e44:	000000ac 	andeq	r0, r0, ip, lsr #1
    1e48:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1e4c:	000df01d 	andeq	pc, sp, sp, lsl r0	; <UNPREDICTABLE>
    1e50:	013d0100 	teqeq	sp, r0, lsl #2
    1e54:	0800224c 	stmdaeq	r0, {r2, r3, r6, r9, sp}
    1e58:	000000b6 	strheq	r0, [r0], -r6
    1e5c:	04259c01 	strteq	r9, [r5], #-3073	; 0xfffff3ff
    1e60:	731a0000 	tstvc	sl, #0
    1e64:	3d01006e 	stccc	0, cr0, [r1, #-440]	; 0xfffffe48
    1e68:	0000a101 	andeq	sl, r0, r1, lsl #2
    1e6c:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
    1e70:	000dba1e 	andeq	fp, sp, lr, lsl sl
    1e74:	013d0100 	teqeq	sp, r0, lsl #2
    1e78:	000002d8 	ldrdeq	r0, [r0], -r8
    1e7c:	1a609102 	bne	182628c <_Min_Stack_Size+0x182608c>
    1e80:	006e656c 	rsbeq	r6, lr, ip, ror #10
    1e84:	ac013d01 	stcge	13, cr3, [r1], {1}
    1e88:	02000000 	andeq	r0, r0, #0
    1e8c:	701b6491 	mulsvc	fp, r1, r4
    1e90:	01007274 	tsteq	r0, r4, ror r2
    1e94:	00ac013f 	adceq	r0, ip, pc, lsr r1
    1e98:	91020000 	mrsls	r0, (UNDEF: 2)
    1e9c:	0d311c6e 	ldceq	12, cr1, [r1, #-440]!	; 0xfffffe48
    1ea0:	40010000 	andmi	r0, r1, r0
    1ea4:	0000b701 	andeq	fp, r0, r1, lsl #14
    1ea8:	68910200 	ldmvs	r1, {r9}
    1eac:	0d4b1d00 	stcleq	13, cr1, [fp, #-0]
    1eb0:	4b010000 	blmi	41eb8 <_Min_Stack_Size+0x41cb8>
    1eb4:	00230401 	eoreq	r0, r3, r1, lsl #8
    1eb8:	0000b608 	andeq	fp, r0, r8, lsl #12
    1ebc:	869c0100 	ldrhi	r0, [ip], r0, lsl #2
    1ec0:	1a000004 	bne	1ed8 <_Min_Stack_Size+0x1cd8>
    1ec4:	01006e73 	tsteq	r0, r3, ror lr
    1ec8:	00a1014b 	adceq	r0, r1, fp, asr #2
    1ecc:	91020000 	mrsls	r0, (UNDEF: 2)
    1ed0:	0dba1e67 	ldceq	14, cr1, [sl, #412]!	; 0x19c
    1ed4:	4b010000 	blmi	41edc <_Min_Stack_Size+0x41cdc>
    1ed8:	0002d801 	andeq	sp, r2, r1, lsl #16
    1edc:	60910200 	addsvs	r0, r1, r0, lsl #4
    1ee0:	6e656c1a 	mcrvs	12, 3, r6, cr5, cr10, {0}
    1ee4:	014b0100 	mrseq	r0, (UNDEF: 91)
    1ee8:	000000ac 	andeq	r0, r0, ip, lsr #1
    1eec:	1b649102 	blne	19262fc <_Min_Stack_Size+0x19260fc>
    1ef0:	00727470 	rsbseq	r7, r2, r0, ror r4
    1ef4:	ac014d01 	stcge	13, cr4, [r1], {1}
    1ef8:	02000000 	andeq	r0, r0, #0
    1efc:	311c6e91 			; <UNDEFINED> instruction: 0x311c6e91
    1f00:	0100000d 	tsteq	r0, sp
    1f04:	00b7014e 	adcseq	r0, r7, lr, asr #2
    1f08:	91020000 	mrsls	r0, (UNDEF: 2)
    1f0c:	c21d0068 	andsgt	r0, sp, #104	; 0x68
    1f10:	0100000d 	tsteq	r0, sp
    1f14:	23bc015b 			; <UNDEFINED> instruction: 0x23bc015b
    1f18:	008e0800 	addeq	r0, lr, r0, lsl #16
    1f1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f20:	000004c9 	andeq	r0, r0, r9, asr #9
    1f24:	006e731a 	rsbeq	r7, lr, sl, lsl r3
    1f28:	a1015b01 	tstge	r1, r1, lsl #22
    1f2c:	02000000 	andeq	r0, r0, #0
    1f30:	6c1a6791 	ldcvs	7, cr6, [sl], {145}	; 0x91
    1f34:	01006e65 	tsteq	r0, r5, ror #28
    1f38:	00ac015b 	adceq	r0, ip, fp, asr r1
    1f3c:	91020000 	mrsls	r0, (UNDEF: 2)
    1f40:	74701b64 	ldrbtvc	r1, [r0], #-2916	; 0xfffff49c
    1f44:	5d010072 	stcpl	0, cr0, [r1, #-456]	; 0xfffffe38
    1f48:	0000ac01 	andeq	sl, r0, r1, lsl #24
    1f4c:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    1f50:	088c1f00 	stmeq	ip, {r8, r9, sl, fp, ip}
    1f54:	c5040000 	strgt	r0, [r4, #-0]
    1f58:	0000020e 	andeq	r0, r0, lr, lsl #4
    1f5c:	00092400 	andeq	r2, r9, r0, lsl #8
    1f60:	35000400 	strcc	r0, [r0, #-1024]	; 0xfffffc00
    1f64:	04000008 	streq	r0, [r0], #-8
    1f68:	00018101 	andeq	r8, r1, r1, lsl #2
    1f6c:	0e650100 	poweqs	f0, f5, f0
    1f70:	03030000 	movweq	r0, #12288	; 0x3000
    1f74:	02380000 	eorseq	r0, r8, #0
    1f78:	00000000 	andeq	r0, r0, r0
    1f7c:	10440000 	subne	r0, r4, r0
    1f80:	b2020000 	andlt	r0, r2, #0
    1f84:	02000004 	andeq	r0, r0, #4
    1f88:	0000301b 	andeq	r3, r0, fp, lsl r0
    1f8c:	06010300 	streq	r0, [r1], -r0, lsl #6
    1f90:	000000c3 	andeq	r0, r0, r3, asr #1
    1f94:	00009302 	andeq	r9, r0, r2, lsl #6
    1f98:	421d0200 	andsmi	r0, sp, #0, 4
    1f9c:	03000000 	movweq	r0, #0
    1fa0:	00c10801 	sbceq	r0, r1, r1, lsl #16
    1fa4:	02030000 	andeq	r0, r3, #0
    1fa8:	00005105 	andeq	r5, r0, r5, lsl #2
    1fac:	002e0200 	eoreq	r0, lr, r0, lsl #4
    1fb0:	2b020000 	blcs	81fb8 <_Min_Stack_Size+0x81db8>
    1fb4:	0000005b 	andeq	r0, r0, fp, asr r0
    1fb8:	23070203 	movwcs	r0, #29187	; 0x7203
    1fbc:	02000001 	andeq	r0, r0, #1
    1fc0:	0000066e 	andeq	r0, r0, lr, ror #12
    1fc4:	006d3f02 	rsbeq	r3, sp, r2, lsl #30
    1fc8:	04030000 	streq	r0, [r3], #-0
    1fcc:	00006d05 	andeq	r6, r0, r5, lsl #26
    1fd0:	00230200 	eoreq	r0, r3, r0, lsl #4
    1fd4:	41020000 	mrsmi	r0, (UNDEF: 2)
    1fd8:	0000007f 	andeq	r0, r0, pc, ror r0
    1fdc:	fa070403 	blx	1c2ff0 <_Min_Stack_Size+0x1c2df0>
    1fe0:	03000000 	movweq	r0, #0
    1fe4:	00680508 	rsbeq	r0, r8, r8, lsl #10
    1fe8:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1fec:	0000f507 	andeq	pc, r0, r7, lsl #10
    1ff0:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    1ff4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1ff8:	ff070403 			; <UNDEFINED> instruction: 0xff070403
    1ffc:	03000000 	movweq	r0, #0
    2000:	00150704 	andseq	r0, r5, r4, lsl #14
    2004:	04050000 	streq	r0, [r5], #-0
    2008:	000000af 	andeq	r0, r0, pc, lsr #1
    200c:	08010306 	stmdaeq	r1, {r1, r2, r8, r9}
    2010:	000000ca 	andeq	r0, r0, sl, asr #1
    2014:	0004b402 	andeq	fp, r4, r2, lsl #8
    2018:	25130300 	ldrcs	r0, [r3, #-768]	; 0xfffffd00
    201c:	02000000 	andeq	r0, r0, #0
    2020:	00000095 	muleq	r0, r5, r0
    2024:	00371403 	eorseq	r1, r7, r3, lsl #8
    2028:	30020000 	andcc	r0, r2, r0
    202c:	03000000 	movweq	r0, #0
    2030:	0000501a 	andeq	r5, r0, sl, lsl r0
    2034:	06700200 	ldrbteq	r0, [r0], -r0, lsl #4
    2038:	1f030000 	svcne	0x00030000
    203c:	00000062 	andeq	r0, r0, r2, rrx
    2040:	00002502 	andeq	r2, r0, r2, lsl #10
    2044:	74200300 	strtvc	r0, [r0], #-768	; 0xfffffd00
    2048:	07000000 	streq	r0, [r0, -r0]
    204c:	000000c2 	andeq	r0, r0, r2, asr #1
    2050:	000000fe 	strdeq	r0, [r0], -lr
    2054:	0000a208 	andeq	sl, r0, r8, lsl #4
    2058:	07000500 	streq	r0, [r0, -r0, lsl #10]
    205c:	000000c2 	andeq	r0, r0, r2, asr #1
    2060:	0000010e 	andeq	r0, r0, lr, lsl #2
    2064:	0000a208 	andeq	sl, r0, r8, lsl #4
    2068:	09000300 	stmdbeq	r0, {r8, r9}
    206c:	353f0401 	ldrcc	r0, [pc, #-1025]!	; 1c73 <_Min_Stack_Size+0x1a73>
    2070:	0a000001 	beq	207c <_Min_Stack_Size+0x1e7c>
    2074:	00000e48 	andeq	r0, r0, r8, asr #28
    2078:	14430a00 	strbne	r0, [r3], #-2560	; 0xfffff600
    207c:	0a010000 	beq	42084 <_Min_Stack_Size+0x41e84>
    2080:	00000f05 	andeq	r0, r0, r5, lsl #30
    2084:	13f70a02 	mvnsne	r0, #8192	; 0x2000
    2088:	0a030000 	beq	c2090 <_Min_Stack_Size+0xc1e90>
    208c:	00000ec6 	andeq	r0, r0, r6, asr #29
    2090:	01090004 	tsteq	r9, r4
    2094:	02b94904 	adcseq	r4, r9, #4, 18	; 0x10000
    2098:	390a0000 	stmdbcc	sl, {}	; <UNPREDICTABLE>
    209c:	00000014 	andeq	r0, r0, r4, lsl r0
    20a0:	000fb80a 	andeq	fp, pc, sl, lsl #16
    20a4:	400a0100 	andmi	r0, sl, r0, lsl #2
    20a8:	02000012 	andeq	r0, r0, #18
    20ac:	0012e90a 	andseq	lr, r2, sl, lsl #18
    20b0:	920a0300 	andls	r0, sl, #0, 6
    20b4:	0400000e 	streq	r0, [r0], #-14
    20b8:	00142e0a 	andseq	r2, r4, sl, lsl #28
    20bc:	640b0500 	strvs	r0, [fp], #-1280	; 0xfffffb00
    20c0:	0600736e 	streq	r7, [r0], -lr, ror #6
    20c4:	000eef0a 	andeq	lr, lr, sl, lsl #30
    20c8:	ab0a0700 	blge	283cd0 <_Min_Stack_Size+0x283ad0>
    20cc:	08000011 	stmdaeq	r0, {r0, r4}
    20d0:	00121c0a 	andseq	r1, r2, sl, lsl #24
    20d4:	a00a0900 	andge	r0, sl, r0, lsl #18
    20d8:	0a000010 	beq	2120 <_Min_Stack_Size+0x1f20>
    20dc:	0013950a 	andseq	r9, r3, sl, lsl #10
    20e0:	1b0a0b00 	blne	284ce8 <_Min_Stack_Size+0x284ae8>
    20e4:	0c00000e 	stceq	0, cr0, [r0], {14}
    20e8:	00141a0a 	andseq	r1, r4, sl, lsl #20
    20ec:	910a0d00 	tstls	sl, r0, lsl #26
    20f0:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
    20f4:	0011290a 	andseq	r2, r1, sl, lsl #18
    20f8:	ae0a0f00 	cdpge	15, 0, cr0, cr10, cr0, {0}
    20fc:	10000012 	andne	r0, r0, r2, lsl r0
    2100:	0013ee0a 	andseq	lr, r3, sl, lsl #28
    2104:	700a1100 	andvc	r1, sl, r0, lsl #2
    2108:	12000010 	andne	r0, r0, #16
    210c:	0010d60a 	andseq	sp, r0, sl, lsl #12
    2110:	5a0a1300 	bpl	286d18 <_Min_Stack_Size+0x286b18>
    2114:	14000010 	strne	r0, [r0], #-16
    2118:	000fab0a 	andeq	sl, pc, sl, lsl #22
    211c:	e20a1500 	and	r1, sl, #0, 10
    2120:	1600000f 	strne	r0, [r0], -pc
    2124:	0011140a 	andseq	r1, r1, sl, lsl #8
    2128:	ae0a1700 	cdpge	7, 0, cr1, cr10, cr0, {0}
    212c:	18000010 	stmdane	r0, {r4}
    2130:	00146f0a 	andseq	r6, r4, sl, lsl #30
    2134:	c20a1900 	andgt	r1, sl, #0, 18
    2138:	1a000010 	bne	2180 <_Min_Stack_Size+0x1f80>
    213c:	00125d0a 	andseq	r5, r2, sl, lsl #26
    2140:	7f0a1b00 	svcvc	0x000a1b00
    2144:	1c000010 	stcne	0, cr0, [r0], {16}
    2148:	0012070a 	andseq	r0, r2, sl, lsl #14
    214c:	ea0a1d00 	b	289554 <_Min_Stack_Size+0x289354>
    2150:	1e000011 	mcrne	0, 0, r0, cr0, cr1, {0}
    2154:	0010260a 	andseq	r2, r0, sl, lsl #12
    2158:	310a1f00 	tstcc	sl, r0, lsl #30
    215c:	2000000f 	andcs	r0, r0, pc
    2160:	0011580a 	andseq	r5, r1, sl, lsl #16
    2164:	b10a2100 	mrslt	r2, (UNDEF: 26)
    2168:	2200000e 	andcs	r0, r0, #14
    216c:	0013b90a 	andseq	fp, r3, sl, lsl #18
    2170:	f90a2300 			; <UNDEFINED> instruction: 0xf90a2300
    2174:	24000012 	strcs	r0, [r0], #-18	; 0xffffffee
    2178:	0010180a 	andseq	r1, r0, sl, lsl #16
    217c:	ff0a2500 			; <UNDEFINED> instruction: 0xff0a2500
    2180:	26000010 			; <UNDEFINED> instruction: 0x26000010
    2184:	00126d0a 	andseq	r6, r2, sl, lsl #26
    2188:	6f0a2700 	svcvs	0x000a2700
    218c:	2800000f 	stmdacs	r0, {r0, r1, r2, r3}
    2190:	0012a30a 	andseq	sl, r2, sl, lsl #6
    2194:	b90a2900 	stmdblt	sl, {r8, fp, sp}
    2198:	2a000012 	bcs	21e8 <_Min_Stack_Size+0x1fe8>
    219c:	0011820a 	andseq	r8, r1, sl, lsl #4
    21a0:	270a2b00 	strcs	r2, [sl, -r0, lsl #22]
    21a4:	2c000014 	stccs	0, cr0, [r0], {20}
    21a8:	0011640a 	andseq	r6, r1, sl, lsl #8
    21ac:	c30a2d00 	movwgt	r2, #44288	; 0xad00
    21b0:	2e00000f 	cdpcs	0, 0, cr0, cr0, cr15, {0}
    21b4:	000e240a 	andeq	r2, lr, sl, lsl #8
    21b8:	9a0a2f00 	bls	28ddc0 <_Min_Stack_Size+0x28dbc0>
    21bc:	30000011 	andcc	r0, r0, r1, lsl r0
    21c0:	00131b0a 	andseq	r1, r3, sl, lsl #22
    21c4:	d30a3100 	movwle	r3, #41216	; 0xa100
    21c8:	3200000e 	andcc	r0, r0, #14
    21cc:	000e9d0a 	andeq	r9, lr, sl, lsl #26
    21d0:	8d0a3300 	stchi	3, cr3, [sl, #-0]
    21d4:	34000010 	strcc	r0, [r0], #-16
    21d8:	0014930a 	andseq	r9, r4, sl, lsl #6
    21dc:	d20a3500 	andle	r3, sl, #0, 10
    21e0:	36000013 			; <UNDEFINED> instruction: 0x36000013
    21e4:	0012920a 	andseq	r9, r2, sl, lsl #4
    21e8:	b80a3700 	stmdalt	sl, {r8, r9, sl, ip, sp}
    21ec:	38000011 	stmdacc	r0, {r0, r4}
    21f0:	000fd30a 	andeq	sp, pc, sl, lsl #6
    21f4:	850a3900 	strhi	r3, [sl, #-2304]	; 0xfffff700
    21f8:	3a00000f 	bcc	223c <_Min_Stack_Size+0x203c>
    21fc:	00130f0a 	andseq	r0, r3, sl, lsl #30
    2200:	520a3b00 	andpl	r3, sl, #0, 22
    2204:	3c00000f 	stccc	0, cr0, [r0], {15}
    2208:	000f1c0a 	andeq	r1, pc, sl, lsl #24
    220c:	4e0a3d00 	cdpmi	13, 0, cr3, cr10, cr0, {0}
    2210:	ff000011 			; <UNDEFINED> instruction: 0xff000011
    2214:	240c0001 	strcs	r0, [ip], #-1
    2218:	768b0402 	strvc	r0, [fp], r2, lsl #8
    221c:	0d000003 	stceq	0, cr0, [r0, #-12]
    2220:	0400706f 	streq	r7, [r0], #-111	; 0xffffff91
    2224:	0000c28c 	andeq	ip, r0, ip, lsl #5
    2228:	540e0000 	strpl	r0, [lr], #-0
    222c:	0400000e 	streq	r0, [r0], #-14
    2230:	0000c28d 	andeq	ip, r0, sp, lsl #5
    2234:	000e0100 	andeq	r0, lr, r0, lsl #2
    2238:	0400000f 	streq	r0, [r0], #-15
    223c:	0000c28e 	andeq	ip, r0, lr, lsl #5
    2240:	430e0200 	movwmi	r0, #57856	; 0xe200
    2244:	0400000e 	streq	r0, [r0], #-14
    2248:	0000c28f 	andeq	ip, r0, pc, lsl #5
    224c:	780d0300 	stmdavc	sp, {r8, r9}
    2250:	04006469 	streq	r6, [r0], #-1129	; 0xfffffb97
    2254:	0000e390 	muleq	r0, r0, r3
    2258:	a60e0400 	strge	r0, [lr], -r0, lsl #8
    225c:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    2260:	0000cd91 	muleq	r0, r1, sp
    2264:	760e0800 	strvc	r0, [lr], -r0, lsl #16
    2268:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
    226c:	0000cd92 	muleq	r0, r2, sp
    2270:	f90e0a00 			; <UNDEFINED> instruction: 0xf90e0a00
    2274:	0400000e 	streq	r0, [r0], #-14
    2278:	0000fe93 	muleq	r0, r3, lr
    227c:	7b0e0c00 	blvc	385284 <_Min_Stack_Size+0x385084>
    2280:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    2284:	0000fe94 	muleq	r0, r4, lr
    2288:	e70e1000 	str	r1, [lr, -r0]
    228c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2290:	0000fe95 	muleq	r0, r5, lr
    2294:	000e1400 	andeq	r1, lr, r0, lsl #8
    2298:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    229c:	0000fe96 	muleq	r0, r6, lr
    22a0:	150e1800 	strne	r1, [lr, #-2048]	; 0xfffff800
    22a4:	0400000f 	streq	r0, [r0], #-15
    22a8:	00037697 	muleq	r3, r7, r6
    22ac:	8d0e1c00 	stchi	12, cr1, [lr, #-0]
    22b0:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    22b4:	00038698 	muleq	r3, r8, r6
    22b8:	070e2c00 	streq	r2, [lr, -r0, lsl #24]
    22bc:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    22c0:	00039699 	muleq	r3, r9, r6
    22c4:	4f0d6c00 	svcmi	0x000d6c00
    22c8:	04005450 	streq	r5, [r0], #-1104	; 0xfffffbb0
    22cc:	0003a69a 	muleq	r3, sl, r6
    22d0:	0700ec00 	streq	lr, [r0, -r0, lsl #24]
    22d4:	000000c2 	andeq	r0, r0, r2, asr #1
    22d8:	00000386 	andeq	r0, r0, r6, lsl #7
    22dc:	0000a208 	andeq	sl, r0, r8, lsl #4
    22e0:	07000f00 	streq	r0, [r0, -r0, lsl #30]
    22e4:	000000c2 	andeq	r0, r0, r2, asr #1
    22e8:	00000396 	muleq	r0, r6, r3
    22ec:	0000a208 	andeq	sl, r0, r8, lsl #4
    22f0:	07003f00 	streq	r3, [r0, -r0, lsl #30]
    22f4:	000000c2 	andeq	r0, r0, r2, asr #1
    22f8:	000003a6 	andeq	r0, r0, r6, lsr #7
    22fc:	0000a208 	andeq	sl, r0, r8, lsl #4
    2300:	07007f00 	streq	r7, [r0, -r0, lsl #30]
    2304:	000000c2 	andeq	r0, r0, r2, asr #1
    2308:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    230c:	0000a20f 	andeq	sl, r0, pc, lsl #4
    2310:	00013700 	andeq	r3, r1, r0, lsl #14
    2314:	00112102 	andseq	r2, r1, r2, lsl #2
    2318:	b99b0400 	ldmiblt	fp, {sl}
    231c:	10000002 	andne	r0, r0, r2
    2320:	00001226 	andeq	r1, r0, r6, lsr #4
    2324:	e59d0404 	ldr	r0, [sp, #1028]	; 0x404
    2328:	11000003 	tstne	r0, r3
    232c:	00001195 	muleq	r0, r5, r1
    2330:	00e39e04 	rsceq	r9, r3, r4, lsl #28
    2334:	55110000 	ldrpl	r0, [r1, #-0]
    2338:	04000010 	streq	r0, [r0], #-16
    233c:	0000fe9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    2340:	27020000 	strcs	r0, [r2, -r0]
    2344:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    2348:	0003c2a0 	andeq	ip, r3, r0, lsr #5
    234c:	12361200 	eorsne	r1, r6, #0, 4
    2350:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    2354:	0800244c 	stmdaeq	r0, {r2, r3, r6, sl, sp}
    2358:	0000000c 	andeq	r0, r0, ip
    235c:	42139c01 	andsmi	r9, r3, #256	; 0x100
    2360:	01000010 	tsteq	r0, r0, lsl r0
    2364:	00245850 	eoreq	r5, r4, r0, asr r8
    2368:	00002408 	andeq	r2, r0, r8, lsl #8
    236c:	139c0100 	orrsne	r0, ip, #0, 2
    2370:	00001286 	andeq	r1, r0, r6, lsl #5
    2374:	247c5801 	ldrbtcs	r5, [ip], #-2049	; 0xfffff7ff
    2378:	00480800 	subeq	r0, r8, r0, lsl #16
    237c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2380:	0011d714 	andseq	sp, r1, r4, lsl r7
    2384:	c4790100 	ldrbtgt	r0, [r9], #-256	; 0xffffff00
    2388:	cc080024 	stcgt	0, cr0, [r8], {36}	; 0x24
    238c:	01000004 	tsteq	r0, r4
    2390:	00045e9c 	muleq	r4, ip, lr
    2394:	00691500 	rsbeq	r1, r9, r0, lsl #10
    2398:	00cd7b01 	sbceq	r7, sp, r1, lsl #22
    239c:	91020000 	mrsls	r0, (UNDEF: 2)
    23a0:	7069156e 	rsbvc	r1, r9, lr, ror #10
    23a4:	fe7c0100 	cdp2	1, 7, cr0, cr12, cr0, {0}
    23a8:	02000000 	andeq	r0, r0, #0
    23ac:	6b156891 	blvs	55c5f8 <_Min_Stack_Size+0x55c3f8>
    23b0:	cd7d0100 	ldfgte	f0, [sp, #-0]
    23b4:	02000000 	andeq	r0, r0, #0
    23b8:	14006c91 	strne	r6, [r0], #-3217	; 0xfffff36f
    23bc:	00000ff4 	strdeq	r0, [r0], -r4
    23c0:	2990eb01 	ldmibcs	r0, {r0, r8, r9, fp, sp, lr, pc}
    23c4:	063c0800 	ldrteq	r0, [ip], -r0, lsl #16
    23c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    23cc:	000004b5 			; <UNDEFINED> instruction: 0x000004b5
    23d0:	70694316 	rsbvc	r4, r9, r6, lsl r3
    23d4:	b5eb0100 	strblt	r0, [fp, #256]!	; 0x100
    23d8:	02000004 	andeq	r0, r0, #4
    23dc:	4c175c91 	ldcmi	12, cr5, [r7], {145}	; 0x91
    23e0:	01000012 	tsteq	r0, r2, lsl r0
    23e4:	0004b5eb 	andeq	fp, r4, fp, ror #11
    23e8:	58910200 	ldmpl	r1, {r9}
    23ec:	01006915 	tsteq	r0, r5, lsl r9
    23f0:	000094ed 	andeq	r9, r0, sp, ror #9
    23f4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    23f8:	00706915 	rsbseq	r6, r0, r5, lsl r9
    23fc:	00feee01 	rscseq	lr, lr, r1, lsl #28
    2400:	91020000 	mrsls	r0, (UNDEF: 2)
    2404:	006b1564 	rsbeq	r1, fp, r4, ror #10
    2408:	00cdef01 	sbceq	lr, sp, r1, lsl #30
    240c:	91020000 	mrsls	r0, (UNDEF: 2)
    2410:	0405006a 	streq	r0, [r5], #-106	; 0xffffff96
    2414:	000000c2 	andeq	r0, r0, r2, asr #1
    2418:	00113418 	andseq	r3, r1, r8, lsl r4
    241c:	016f0100 	cmneq	pc, r0, lsl #2
    2420:	08002fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, sp}
    2424:	00000440 	andeq	r0, r0, r0, asr #8
    2428:	04fa9c01 	ldrbteq	r9, [sl], #3073	; 0xc01
    242c:	69190000 	ldmdbvs	r9, {}	; <UNPREDICTABLE>
    2430:	01710100 	cmneq	r1, r0, lsl #2
    2434:	00000094 	muleq	r0, r4, r0
    2438:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    243c:	01007069 	tsteq	r0, r9, rrx
    2440:	00fe0172 	rscseq	r0, lr, r2, ror r1
    2444:	91020000 	mrsls	r0, (UNDEF: 2)
    2448:	006b1964 	rsbeq	r1, fp, r4, ror #18
    244c:	cd017301 	stcgt	3, cr7, [r1, #-4]
    2450:	02000000 	andeq	r0, r0, #0
    2454:	1a006a91 	bne	1cea0 <_Min_Stack_Size+0x1cca0>
    2458:	000013ac 	andeq	r1, r0, ip, lsr #7
    245c:	b701dc01 	strlt	sp, [r1, -r1, lsl #24]
    2460:	0c000000 	stceq	0, cr0, [r0], {-0}
    2464:	9c080034 	stcls	0, cr0, [r8], {52}	; 0x34
    2468:	01000002 	tsteq	r0, r2
    246c:	0005a29c 	muleq	r5, ip, r2
    2470:	39a41b00 	stmibcc	r4!, {r8, r9, fp, ip}
    2474:	dc010000 	stcle	0, cr0, [r1], {-0}
    2478:	0000cd01 	andeq	ip, r0, r1, lsl #26
    247c:	4e910200 	cdpmi	2, 9, cr0, cr1, cr0, {0}
    2480:	00138c1c 	andseq	r8, r3, ip, lsl ip
    2484:	01de0100 	bicseq	r0, lr, r0, lsl #2
    2488:	000000ee 	andeq	r0, r0, lr, ror #1
    248c:	1c589102 	ldfnep	f1, [r8], {2}
    2490:	00000f66 	andeq	r0, r0, r6, ror #30
    2494:	cd01df01 	stcgt	15, cr13, [r1, #-4]
    2498:	02000000 	andeq	r0, r0, #0
    249c:	69195691 	ldmdbvs	r9, {r0, r4, r7, r9, sl, ip, lr}
    24a0:	01e10100 	mvneq	r0, r0, lsl #2
    24a4:	000000cd 	andeq	r0, r0, sp, asr #1
    24a8:	196e9102 	stmdbne	lr!, {r1, r8, ip, pc}^
    24ac:	006e656c 	rsbeq	r6, lr, ip, ror #10
    24b0:	cd01e101 	stfgtd	f6, [r1, #-4]
    24b4:	02000000 	andeq	r0, r0, #0
    24b8:	70196491 	mulsvc	r9, r1, r4
    24bc:	01e20100 	mvneq	r0, r0, lsl #2
    24c0:	000004b5 			; <UNDEFINED> instruction: 0x000004b5
    24c4:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
    24c8:	e3010065 	movw	r0, #4197	; 0x1065
    24cc:	0004b501 	andeq	fp, r4, r1, lsl #10
    24d0:	60910200 	addsvs	r0, r1, r0, lsl #4
    24d4:	0009451c 	andeq	r4, r9, ip, lsl r5
    24d8:	01e40100 	mvneq	r0, r0, lsl #2
    24dc:	000000c2 	andeq	r0, r0, r2, asr #1
    24e0:	1c679102 	stfnep	f1, [r7], #-8
    24e4:	00000ee7 	andeq	r0, r0, r7, ror #29
    24e8:	c201e501 	andgt	lr, r1, #4194304	; 0x400000
    24ec:	02000000 	andeq	r0, r0, #0
    24f0:	831d5f91 	tsthi	sp, #580	; 0x244
    24f4:	01000014 	tsteq	r0, r4, lsl r0
    24f8:	36760237 			; <UNDEFINED> instruction: 0x36760237
    24fc:	1a000800 	bne	4504 <_Min_Stack_Size+0x4304>
    2500:	00000dfe 	strdeq	r0, [r0], -lr
    2504:	c2024901 	andgt	r4, r2, #16384	; 0x4000
    2508:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    250c:	30080036 	andcc	r0, r8, r6, lsr r0
    2510:	01000002 	tsteq	r0, r2
    2514:	0006159c 	muleq	r6, ip, r5
    2518:	656c1900 	strbvs	r1, [ip, #-2304]!	; 0xfffff700
    251c:	4b01006e 	blmi	426dc <_Min_Stack_Size+0x424dc>
    2520:	0000cd02 	andeq	ip, r0, r2, lsl #26
    2524:	70910200 	addsvc	r0, r1, r0, lsl #4
    2528:	01006919 	tsteq	r0, r9, lsl r9
    252c:	00cd024b 	sbceq	r0, sp, fp, asr #4
    2530:	91020000 	mrsls	r0, (UNDEF: 2)
    2534:	09451c76 	stmdbeq	r5, {r1, r2, r4, r5, r6, sl, fp, ip}^
    2538:	4c010000 	stcmi	0, cr0, [r1], {-0}
    253c:	0000c202 	andeq	ip, r0, r2, lsl #4
    2540:	75910200 	ldrvc	r0, [r1, #512]	; 0x200
    2544:	00135b1c 	andseq	r5, r3, ip, lsl fp
    2548:	024c0100 	subeq	r0, ip, #0, 2
    254c:	000000c2 	andeq	r0, r0, r2, asr #1
    2550:	1c749102 	ldfnep	f1, [r4], #-8
    2554:	0000124c 	andeq	r1, r0, ip, asr #4
    2558:	fe024d01 	cdp2	13, 0, cr4, cr2, cr1, {0}
    255c:	02000000 	andeq	r0, r0, #0
    2560:	72196c91 	andsvc	r6, r9, #37120	; 0x9100
    2564:	01007465 	tsteq	r0, r5, ror #8
    2568:	00c2024e 	sbceq	r0, r2, lr, asr #4
    256c:	91020000 	mrsls	r0, (UNDEF: 2)
    2570:	501a0073 	andspl	r0, sl, r3, ror r0
    2574:	01000014 	tsteq	r0, r4, lsl r0
    2578:	00c202d6 	ldrdeq	r0, [r2], #38	; 0x26
    257c:	38d80000 	ldmcc	r8, {}^	; <UNPREDICTABLE>
    2580:	01100800 	tsteq	r0, r0, lsl #16
    2584:	9c010000 	stcls	0, cr0, [r1], {-0}
    2588:	0000065b 	andeq	r0, r0, fp, asr r6
    258c:	01006919 	tsteq	r0, r9, lsl r9
    2590:	00c202d8 	ldrdeq	r0, [r2], #40	; 0x28
    2594:	91020000 	mrsls	r0, (UNDEF: 2)
    2598:	124c1c77 	subne	r1, ip, #30464	; 0x7700
    259c:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    25a0:	0000fe02 	andeq	pc, r0, r2, lsl #28
    25a4:	70910200 	addsvc	r0, r1, r0, lsl #4
    25a8:	74657219 	strbtvc	r7, [r5], #-537	; 0xfffffde7
    25ac:	02d90100 	sbcseq	r0, r9, #0, 2
    25b0:	000000c2 	andeq	r0, r0, r2, asr #1
    25b4:	00769102 	rsbseq	r9, r6, r2, lsl #2
    25b8:	0014061a 	andseq	r0, r4, sl, lsl r6
    25bc:	031a0100 	tsteq	sl, #0, 2
    25c0:	000000b7 	strheq	r0, [r0], -r7
    25c4:	080039e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip, sp}
    25c8:	00000080 	andeq	r0, r0, r0, lsl #1
    25cc:	06949c01 	ldreq	r9, [r4], r1, lsl #24
    25d0:	74190000 	ldrvc	r0, [r9], #-0
    25d4:	0100706d 	tsteq	r0, sp, rrx
    25d8:	00c2031c 	sbceq	r0, r2, ip, lsl r3
    25dc:	91020000 	mrsls	r0, (UNDEF: 2)
    25e0:	65721977 	ldrbvs	r1, [r2, #-2423]!	; 0xfffff689
    25e4:	1d010074 	stcne	0, cr0, [r1, #-464]	; 0xfffffe30
    25e8:	0000d803 	andeq	sp, r0, r3, lsl #16
    25ec:	70910200 	addsvc	r0, r1, r0, lsl #4
    25f0:	12531800 	subsne	r1, r3, #0, 16
    25f4:	46010000 	strmi	r0, [r1], -r0
    25f8:	003a6803 	eorseq	r6, sl, r3, lsl #16
    25fc:	00008808 	andeq	r8, r0, r8, lsl #16
    2600:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
    2604:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    2608:	46010073 			; <UNDEFINED> instruction: 0x46010073
    260c:	0000c203 	andeq	ip, r0, r3, lsl #4
    2610:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2614:	6675621e 			; <UNDEFINED> instruction: 0x6675621e
    2618:	03460100 	movteq	r0, #24832	; 0x6100
    261c:	000004b5 			; <UNDEFINED> instruction: 0x000004b5
    2620:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2624:	0013c91f 	andseq	ip, r3, pc, lsl r9
    2628:	03670100 	cmneq	r7, #0, 2
    262c:	000000c2 	andeq	r0, r0, r2, asr #1
    2630:	08003af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, ip, sp}
    2634:	00000028 	andeq	r0, r0, r8, lsr #32
    2638:	c4209c01 	strtgt	r9, [r0], #-3073	; 0xfffff3ff
    263c:	01000012 	tsteq	r0, r2, lsl r0
    2640:	3b18037d 	blcc	60343c <_Min_Stack_Size+0x60323c>
    2644:	002c0800 	eoreq	r0, ip, r0, lsl #16
    2648:	9c010000 	stcls	0, cr0, [r1], {-0}
    264c:	0012d720 	andseq	sp, r2, r0, lsr #14
    2650:	038e0100 	orreq	r0, lr, #0, 2
    2654:	00000000 	andeq	r0, r0, r0
    2658:	0000001c 	andeq	r0, r0, ip, lsl r0
    265c:	c8219c01 	stmdagt	r1!, {r0, sl, fp, ip, pc}
    2660:	01000010 	tsteq	r0, r0, lsl r0
    2664:	3b4403a0 	blcc	11034ec <_Min_Stack_Size+0x11032ec>
    2668:	003c0800 	eorseq	r0, ip, r0, lsl #16
    266c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2670:	00000726 	andeq	r0, r0, r6, lsr #14
    2674:	0070691e 	rsbseq	r6, r0, lr, lsl r9
    2678:	b503a001 	strlt	sl, [r3, #-1]
    267c:	02000004 	andeq	r0, r0, #4
    2680:	21007491 			; <UNDEFINED> instruction: 0x21007491
    2684:	000011c0 	andeq	r1, r0, r0, asr #3
    2688:	8003a801 	andhi	sl, r3, r1, lsl #16
    268c:	3c08003b 	stccc	0, cr0, [r8], {59}	; 0x3b
    2690:	01000000 	mrseq	r0, (UNDEF: 0)
    2694:	00074b9c 	muleq	r7, ip, fp
    2698:	77671e00 	strbvc	r1, [r7, -r0, lsl #28]!
    269c:	03a80100 			; <UNDEFINED> instruction: 0x03a80100
    26a0:	000004b5 			; <UNDEFINED> instruction: 0x000004b5
    26a4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    26a8:	00132b21 	andseq	r2, r3, r1, lsr #22
    26ac:	03b00100 	movseq	r0, #0, 2
    26b0:	08003bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp, ip, sp}
    26b4:	0000003c 	andeq	r0, r0, ip, lsr r0
    26b8:	07709c01 	ldrbeq	r9, [r0, -r1, lsl #24]!
    26bc:	731e0000 	tstvc	lr, #0
    26c0:	b001006e 	andlt	r0, r1, lr, rrx
    26c4:	0004b503 	andeq	fp, r4, r3, lsl #10
    26c8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    26cc:	134c2100 	movtne	r2, #49408	; 0xc100
    26d0:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    26d4:	003bf803 	eorseq	pc, fp, r3, lsl #16
    26d8:	00003c08 	andeq	r3, r0, r8, lsl #24
    26dc:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    26e0:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    26e4:	00736e64 	rsbseq	r6, r3, r4, ror #28
    26e8:	b503b801 	strlt	fp, [r3, #-2049]	; 0xfffff7ff
    26ec:	02000004 	andeq	r0, r0, #4
    26f0:	22007491 	andcs	r7, r0, #-1862270976	; 0x91000000
    26f4:	0000137b 	andeq	r1, r0, fp, ror r3
    26f8:	e303ca01 	movw	ip, #14849	; 0x3a01
    26fc:	00000000 	andeq	r0, r0, r0
    2700:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2704:	01000000 	mrseq	r0, (UNDEF: 0)
    2708:	104c239c 	umaalne	r2, ip, ip, r3
    270c:	2c010000 	stccs	0, cr0, [r1], {-0}
    2710:	000000fe 	strdeq	r0, [r0], -lr
    2714:	01580305 	cmpeq	r8, r5, lsl #6
    2718:	ce232000 	cdpgt	0, 2, cr2, cr3, cr0, {0}
    271c:	01000011 	tsteq	r0, r1, lsl r0
    2720:	0000ee2d 	andeq	lr, r0, sp, lsr #28
    2724:	48030500 	stmdami	r3, {r8, sl}
    2728:	23200001 			; <UNDEFINED> instruction: 0x23200001
    272c:	00001146 	andeq	r1, r0, r6, asr #2
    2730:	00fe2e01 	rscseq	r2, lr, r1, lsl #28
    2734:	03050000 	movweq	r0, #20480	; 0x5000
    2738:	20000150 	andcs	r0, r0, r0, asr r1
    273c:	0010ed23 	andseq	lr, r0, r3, lsr #26
    2740:	fe310100 	cdp2	1, 3, cr0, cr1, cr0, {0}
    2744:	05000000 	streq	r0, [r0, #-0]
    2748:	00010c03 	andeq	r0, r1, r3, lsl #24
    274c:	10062320 	andne	r2, r6, r0, lsr #6
    2750:	32010000 	andcc	r0, r1, #0
    2754:	000000fe 	strdeq	r0, [r0], -lr
    2758:	01100305 	tsteq	r0, r5, lsl #6
    275c:	31232000 			; <UNDEFINED> instruction: 0x31232000
    2760:	0100000e 	tsteq	r0, lr
    2764:	0000fe33 	andeq	pc, r0, r3, lsr lr	; <UNPREDICTABLE>
    2768:	14030500 	strne	r0, [r3], #-1280	; 0xfffffb00
    276c:	23200001 			; <UNDEFINED> instruction: 0x23200001
    2770:	00001339 	andeq	r1, r0, r9, lsr r3
    2774:	00fe3401 	rscseq	r3, lr, r1, lsl #8
    2778:	03050000 	movweq	r0, #20480	; 0x5000
    277c:	20000118 	andcs	r0, r0, r8, lsl r1
    2780:	000f9f23 	andeq	r9, pc, r3, lsr #30
    2784:	c2360100 	eorsgt	r0, r6, #0, 2
    2788:	05000000 	streq	r0, [r0, #-0]
    278c:	00017003 	andeq	r7, r1, r3
    2790:	0e0f2320 	cdpeq	3, 0, cr2, cr15, cr0, {1}
    2794:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    2798:	000000ee 	andeq	r0, r0, lr, ror #1
    279c:	011c0305 	tsteq	ip, r5, lsl #6
    27a0:	70232000 	eorvc	r2, r3, r0
    27a4:	01000013 	tsteq	r0, r3, lsl r0
    27a8:	0000b73b 	andeq	fp, r0, fp, lsr r7
    27ac:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
    27b0:	23200001 			; <UNDEFINED> instruction: 0x23200001
    27b4:	00001463 	andeq	r1, r0, r3, ror #8
    27b8:	00b73c01 	adcseq	r3, r7, r1, lsl #24
    27bc:	03050000 	movweq	r0, #20480	; 0x5000
    27c0:	20000164 	andcs	r0, r0, r4, ror #2
    27c4:	000e5a23 	andeq	r5, lr, r3, lsr #20
    27c8:	e53e0100 	ldr	r0, [lr, #-256]!	; 0xffffff00
    27cc:	05000003 	streq	r0, [r0, #-3]
    27d0:	00016803 	andeq	r6, r1, r3, lsl #16
    27d4:	0f7d2320 	svceq	0x007d2320
    27d8:	3f010000 	svccc	0x00010000
    27dc:	000000e3 	andeq	r0, r0, r3, ror #1
    27e0:	015c0305 	cmpeq	ip, r5, lsl #6
    27e4:	48232000 	stmdami	r3!, {sp}
    27e8:	0100000f 	tsteq	r0, pc
    27ec:	0000e33f 	andeq	lr, r0, pc, lsr r3
    27f0:	60030500 	andvs	r0, r3, r0, lsl #10
    27f4:	23200001 			; <UNDEFINED> instruction: 0x23200001
    27f8:	000011f7 	strdeq	r1, [r0], -r7
    27fc:	00e34101 	rsceq	r4, r3, r1, lsl #2
    2800:	03050000 	movweq	r0, #20480	; 0x5000
    2804:	20000154 	andcs	r0, r0, r4, asr r1
    2808:	47534d24 	ldrbmi	r4, [r3, -r4, lsr #26]
    280c:	bc430100 	stflte	f0, [r3], {-0}
    2810:	05000008 	streq	r0, [r0, #-8]
    2814:	00016c03 	andeq	r6, r1, r3, lsl #24
    2818:	b7040520 	strlt	r0, [r4, -r0, lsr #10]
    281c:	07000003 	streq	r0, [r0, -r3]
    2820:	000000c2 	andeq	r0, r0, r2, asr #1
    2824:	000008d2 	ldrdeq	r0, [r0], -r2
    2828:	0000a208 	andeq	sl, r0, r8, lsl #4
    282c:	23000600 	movwcs	r0, #1536	; 0x600
    2830:	000010e3 	andeq	r1, r0, r3, ror #1
    2834:	08c24501 	stmiaeq	r2, {r0, r8, sl, lr}^
    2838:	03050000 	movweq	r0, #20480	; 0x5000
    283c:	20000040 	andcs	r0, r0, r0, asr #32
    2840:	70694324 	rsbvc	r4, r9, r4, lsr #6
    2844:	fe460100 	cdp2	1, 4, cr0, cr6, cr0, {0}
    2848:	05000000 	streq	r0, [r0, #-0]
    284c:	00012403 	andeq	r2, r1, r3, lsl #8
    2850:	12312320 	eorsne	r2, r1, #32, 6	; 0x80000000
    2854:	64010000 	strvs	r0, [r1], #-0
    2858:	000000a9 	andeq	r0, r0, r9, lsr #1
    285c:	00480305 	subeq	r0, r8, r5, lsl #6
    2860:	3d232000 	stccc	0, cr2, [r3, #-0]
    2864:	01000010 	tsteq	r0, r0, lsl r0
    2868:	0000a965 	andeq	sl, r0, r5, ror #18
    286c:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    2870:	23200000 	nopcs	{0}	; <UNPREDICTABLE>
    2874:	00001281 	andeq	r1, r0, r1, lsl #5
    2878:	00a96601 	adceq	r6, r9, r1, lsl #12
    287c:	03050000 	movweq	r0, #20480	; 0x5000
    2880:	20000050 	andcs	r0, r0, r0, asr r0
    2884:	00037800 	andeq	r7, r3, r0, lsl #16
    2888:	77000400 	strvc	r0, [r0, -r0, lsl #8]
    288c:	0400000a 	streq	r0, [r0], #-10
    2890:	00018101 	andeq	r8, r1, r1, lsl #2
    2894:	14e60100 	strbtne	r0, [r6], #256	; 0x100
    2898:	03030000 	movweq	r0, #12288	; 0x3000
    289c:	02d80000 	sbcseq	r0, r8, #0
    28a0:	00000000 	andeq	r0, r0, r0
    28a4:	15530000 	ldrbne	r0, [r3, #-0]
    28a8:	04020000 	streq	r0, [r2], #-0
    28ac:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    28b0:	07040300 	streq	r0, [r4, -r0, lsl #6]
    28b4:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    28b8:	c3060103 	movwgt	r0, #24835	; 0x6103
    28bc:	04000000 	streq	r0, [r0], #-0
    28c0:	00000093 	muleq	r0, r3, r0
    28c4:	00451d02 	subeq	r1, r5, r2, lsl #26
    28c8:	01030000 	mrseq	r0, (UNDEF: 3)
    28cc:	0000c108 	andeq	ip, r0, r8, lsl #2
    28d0:	14b10400 	ldrtne	r0, [r1], #1024	; 0x400
    28d4:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
    28d8:	00000057 	andeq	r0, r0, r7, asr r0
    28dc:	51050203 	tstpl	r5, r3, lsl #4
    28e0:	04000000 	streq	r0, [r0], #-0
    28e4:	0000002e 	andeq	r0, r0, lr, lsr #32
    28e8:	00692b02 	rsbeq	r2, r9, r2, lsl #22
    28ec:	02030000 	andeq	r0, r3, #0
    28f0:	00012307 	andeq	r2, r1, r7, lsl #6
    28f4:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    28f8:	0000006d 	andeq	r0, r0, sp, rrx
    28fc:	fa070403 	blx	1c3910 <_Min_Stack_Size+0x1c3710>
    2900:	03000000 	movweq	r0, #0
    2904:	00680508 	rsbeq	r0, r8, r8, lsl #10
    2908:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    290c:	0000f507 	andeq	pc, r0, r7, lsl #10
    2910:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2914:	00000015 	andeq	r0, r0, r5, lsl r0
    2918:	00990405 	addseq	r0, r9, r5, lsl #8
    291c:	01030000 	mrseq	r0, (UNDEF: 3)
    2920:	0000ca08 	andeq	ip, r0, r8, lsl #20
    2924:	00950400 	addseq	r0, r5, r0, lsl #8
    2928:	14030000 	strne	r0, [r3], #-0
    292c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2930:	0014b304 	andseq	fp, r4, r4, lsl #6
    2934:	4c190300 	ldcmi	3, cr0, [r9], {-0}
    2938:	04000000 	streq	r0, [r0], #-0
    293c:	00000030 	andeq	r0, r0, r0, lsr r0
    2940:	005e1a03 	subseq	r1, lr, r3, lsl #20
    2944:	a4060000 	strge	r0, [r6], #-0
    2948:	12000014 	andne	r0, r0, #20
    294c:	01582c04 	cmpeq	r8, r4, lsl #24
    2950:	69070000 	stmdbvs	r7, {}	; <UNPREDICTABLE>
    2954:	2e040064 	cdpcs	0, 0, cr0, cr4, cr4, {3}
    2958:	000000b6 	strheq	r0, [r0], -r6
    295c:	72710700 	rsbsvc	r0, r1, #0, 14
    2960:	a02f0400 	eorge	r0, pc, r0, lsl #8
    2964:	02000000 	andeq	r0, r0, #0
    2968:	00152f08 	andseq	r2, r5, r8, lsl #30
    296c:	a0320400 	eorsge	r0, r2, r0, lsl #8
    2970:	03000000 	movweq	r0, #0
    2974:	00616107 	rsbeq	r6, r1, r7, lsl #2
    2978:	00a03404 	adceq	r3, r0, r4, lsl #8
    297c:	07040000 	streq	r0, [r4, -r0]
    2980:	04006374 	streq	r6, [r0], #-884	; 0xfffffc8c
    2984:	0000a035 	andeq	sl, r0, r5, lsr r0
    2988:	72070500 	andvc	r0, r7, #0, 10
    298c:	36040064 	strcc	r0, [r4], -r4, rrx
    2990:	000000a0 	andeq	r0, r0, r0, lsr #1
    2994:	61720706 	cmnvs	r2, r6, lsl #14
    2998:	a0370400 	eorsge	r0, r7, r0, lsl #8
    299c:	07000000 	streq	r0, [r0, -r0]
    29a0:	00153608 	andseq	r3, r5, r8, lsl #12
    29a4:	a0380400 	eorsge	r0, r8, r0, lsl #8
    29a8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    29ac:	0014a908 	andseq	sl, r4, r8, lsl #18
    29b0:	b63f0400 	ldrtlt	r0, [pc], -r0, lsl #8
    29b4:	0a000000 	beq	29bc <_Min_Stack_Size+0x27bc>
    29b8:	00153c08 	andseq	r3, r5, r8, lsl #24
    29bc:	b6400400 	strblt	r0, [r0], -r0, lsl #8
    29c0:	0c000000 	stceq	0, cr0, [r0], {-0}
    29c4:	00151c08 	andseq	r1, r5, r8, lsl #24
    29c8:	b6410400 	strblt	r0, [r1], -r0, lsl #8
    29cc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    29d0:	00156108 	andseq	r6, r5, r8, lsl #2
    29d4:	b6420400 	strblt	r0, [r2], -r0, lsl #8
    29d8:	10000000 	andne	r0, r0, r0
    29dc:	155b0900 	ldrbne	r0, [fp, #-2304]	; 0xfffff700
    29e0:	11010000 	mrsne	r0, (UNDEF: 1)
    29e4:	000000b6 	strheq	r0, [r0], -r6
    29e8:	08003c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip, sp}
    29ec:	00000030 	andeq	r0, r0, r0, lsr r0
    29f0:	018a9c01 	orreq	r9, sl, r1, lsl #24
    29f4:	730a0000 	movwvc	r0, #40960	; 0xa000
    29f8:	8a110100 	bhi	442e00 <_Min_Stack_Size+0x442c00>
    29fc:	02000001 	andeq	r0, r0, #1
    2a00:	690b6c91 	stmdbvs	fp, {r0, r4, r7, sl, fp, sp, lr}
    2a04:	b6130100 	ldrlt	r0, [r3], -r0, lsl #2
    2a08:	02000000 	andeq	r0, r0, #0
    2a0c:	05007691 	streq	r7, [r0, #-1681]	; 0xfffff96f
    2a10:	0000a004 	andeq	sl, r0, r4
    2a14:	15240900 	strne	r0, [r4, #-2304]!	; 0xfffff700
    2a18:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    2a1c:	00000025 	andeq	r0, r0, r5, lsr #32
    2a20:	08003c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, ip, sp}
    2a24:	0000010c 	andeq	r0, r0, ip, lsl #2
    2a28:	02279c01 	eoreq	r9, r7, #256	; 0x100
    2a2c:	6d0a0000 	stcvs	0, cr0, [sl, #-0]
    2a30:	01006773 	tsteq	r0, r3, ror r7
    2a34:	00018a28 	andeq	r8, r1, r8, lsr #20
    2a38:	5c910200 	lfmpl	f0, 4, [r1], {0}
    2a3c:	0014cf0c 	andseq	ip, r4, ip, lsl #30
    2a40:	8a280100 	bhi	a02e48 <_Min_Stack_Size+0xa02c48>
    2a44:	02000001 	andeq	r0, r0, #1
    2a48:	620a5891 	andvs	r5, sl, #9502720	; 0x910000
    2a4c:	01006675 	tsteq	r0, r5, ror r6
    2a50:	00009328 	andeq	r9, r0, r8, lsr #6
    2a54:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    2a58:	6e656c0a 	cdpvs	12, 6, cr6, cr5, cr10, {0}
    2a5c:	ab280100 	blge	a02e64 <_Min_Stack_Size+0xa02c64>
    2a60:	02000000 	andeq	r0, r0, #0
    2a64:	170d5291 			; <UNDEFINED> instruction: 0x170d5291
    2a68:	01000015 	tsteq	r0, r5, lsl r0
    2a6c:	0000b62a 	andeq	fp, r0, sl, lsr #12
    2a70:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    2a74:	0070630b 	rsbseq	r6, r0, fp, lsl #6
    2a78:	018a2b01 	orreq	r2, sl, r1, lsl #22
    2a7c:	91020000 	mrsls	r0, (UNDEF: 2)
    2a80:	3b7e0d70 	blcc	1f86048 <_Min_Stack_Size+0x1f85e48>
    2a84:	2c010000 	stccs	0, cr0, [r1], {-0}
    2a88:	00000025 	andeq	r0, r0, r5, lsr #32
    2a8c:	0d6c9102 	stfeqp	f1, [ip, #-8]!
    2a90:	00001569 	andeq	r1, r0, r9, ror #10
    2a94:	00252d01 	eoreq	r2, r5, r1, lsl #26
    2a98:	91020000 	mrsls	r0, (UNDEF: 2)
    2a9c:	15490d68 	strbne	r0, [r9, #-3432]	; 0xfffff298
    2aa0:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    2aa4:	00000025 	andeq	r0, r0, r5, lsr #32
    2aa8:	00649102 	rsbeq	r9, r4, r2, lsl #2
    2aac:	00154e0e 	andseq	r4, r5, lr, lsl #28
    2ab0:	8a6a0100 	bhi	1a82eb8 <_Min_Stack_Size+0x1a82cb8>
    2ab4:	70000001 	andvc	r0, r0, r1
    2ab8:	6608003d 			; <UNDEFINED> instruction: 0x6608003d
    2abc:	01000000 	mrseq	r0, (UNDEF: 0)
    2ac0:	00027b9c 	muleq	r2, ip, fp
    2ac4:	736d0a00 	cmnvc	sp, #0, 20
    2ac8:	6a010067 	bvs	42c6c <_Min_Stack_Size+0x42a6c>
    2acc:	0000018a 	andeq	r0, r0, sl, lsl #3
    2ad0:	7de49103 	stfvcp	f1, [r4, #12]!
    2ad4:	0070630a 	rsbseq	r6, r0, sl, lsl #6
    2ad8:	018a6a01 	orreq	r6, sl, r1, lsl #20
    2adc:	91030000 	mrsls	r0, (UNDEF: 3)
    2ae0:	6c0b7de0 	stcvs	13, cr7, [fp], {224}	; 0xe0
    2ae4:	01006e65 	tsteq	r0, r5, ror #28
    2ae8:	0000256c 	andeq	r2, r0, ip, ror #10
    2aec:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2af0:	00152a0d 	andseq	r2, r5, sp, lsl #20
    2af4:	7b6d0100 	blvc	1b42efc <_Min_Stack_Size+0x1b42cfc>
    2af8:	03000002 	movweq	r0, #2
    2afc:	007dec91 			; <UNDEFINED> instruction: 0x007dec91
    2b00:	0000990f 	andeq	r9, r0, pc, lsl #18
    2b04:	00028b00 	andeq	r8, r2, r0, lsl #22
    2b08:	008c1000 	addeq	r1, ip, r0
    2b0c:	00ff0000 	rscseq	r0, pc, r0
    2b10:	0014c40e 	andseq	ip, r4, lr, lsl #8
    2b14:	8a870100 	bhi	fe1c2f1c <BootRAM+0xd1336bd>
    2b18:	d8000001 	stmdale	r0, {r0}
    2b1c:	0208003d 	andeq	r0, r8, #61	; 0x3d
    2b20:	01000003 	tsteq	r0, r3
    2b24:	0002fc9c 	muleq	r2, ip, ip
    2b28:	736d0a00 	cmnvc	sp, #0, 20
    2b2c:	87010067 	strhi	r0, [r1, -r7, rrx]
    2b30:	0000018a 	andeq	r0, r0, sl, lsl #3
    2b34:	7de49103 	stfvcp	f1, [r4, #12]!
    2b38:	0070630a 	rsbseq	r6, r0, sl, lsl #6
    2b3c:	018a8701 	orreq	r8, sl, r1, lsl #14
    2b40:	91030000 	mrsls	r0, (UNDEF: 3)
    2b44:	da0c7de0 	ble	3222cc <_Min_Stack_Size+0x3220cc>
    2b48:	01000014 	tsteq	r0, r4, lsl r0
    2b4c:	00018a87 	andeq	r8, r1, r7, lsl #21
    2b50:	dc910300 	ldcle	3, cr0, [r1], {0}
    2b54:	656c0b7d 	strbvs	r0, [ip, #-2941]!	; 0xfffff483
    2b58:	8901006e 	stmdbhi	r1, {r1, r2, r3, r5, r6}
    2b5c:	00000025 	andeq	r0, r0, r5, lsr #32
    2b60:	0d6c9102 	stfeqp	f1, [ip, #-8]!
    2b64:	00000945 	andeq	r0, r0, r5, asr #18
    2b68:	00258901 	eoreq	r8, r5, r1, lsl #18
    2b6c:	91020000 	mrsls	r0, (UNDEF: 2)
    2b70:	152a0d68 	strne	r0, [sl, #-3432]!	; 0xfffff298
    2b74:	8a010000 	bhi	42b7c <_Min_Stack_Size+0x4297c>
    2b78:	0000027b 	andeq	r0, r0, fp, ror r2
    2b7c:	7de89103 	stfvcp	f1, [r8, #12]!
    2b80:	14bb0e00 	ldrtne	r0, [fp], #3584	; 0xe00
    2b84:	e7010000 	str	r0, [r1, -r0]
    2b88:	000000a0 	andeq	r0, r0, r0, lsr #1
    2b8c:	080040dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, lr}
    2b90:	00000176 	andeq	r0, r0, r6, ror r1
    2b94:	03759c01 	cmneq	r5, #256	; 0x100
    2b98:	a30c0000 	movwge	r0, #49152	; 0xc000
    2b9c:	01000014 	tsteq	r0, r4, lsl r0
    2ba0:	000375e7 	andeq	r7, r3, r7, ror #11
    2ba4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2ba8:	0015440c 	andseq	r4, r5, ip, lsl #8
    2bac:	8ae70100 	bhi	ff9c2fb4 <BootRAM+0xe933755>
    2bb0:	02000001 	andeq	r0, r0, #1
    2bb4:	da0c6091 	ble	31ae00 <_Min_Stack_Size+0x31ac00>
    2bb8:	01000014 	tsteq	r0, r4, lsl r0
    2bbc:	00018ae7 	andeq	r8, r1, r7, ror #21
    2bc0:	5c910200 	lfmpl	f0, 4, [r1], {0}
    2bc4:	706d740b 	rsbvc	r7, sp, fp, lsl #8
    2bc8:	b6e90100 	strbtlt	r0, [r9], r0, lsl #2
    2bcc:	02000000 	andeq	r0, r0, #0
    2bd0:	690b6a91 	stmdbvs	fp, {r0, r4, r7, r9, fp, sp, lr}
    2bd4:	b6ea0100 	strbtlt	r0, [sl], r0, lsl #2
    2bd8:	02000000 	andeq	r0, r0, #0
    2bdc:	6d0b7691 	stcvs	6, cr7, [fp, #-580]	; 0xfffffdbc
    2be0:	01006773 	tsteq	r0, r3, ror r7
    2be4:	00018aeb 	andeq	r8, r1, fp, ror #21
    2be8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2bec:	0070630b 	rsbseq	r6, r0, fp, lsl #6
    2bf0:	018aec01 	orreq	lr, sl, r1, lsl #24
    2bf4:	91020000 	mrsls	r0, (UNDEF: 2)
    2bf8:	04050070 	streq	r0, [r5], #-112	; 0xffffff90
    2bfc:	000000c1 	andeq	r0, r0, r1, asr #1
    2c00:	00043800 	andeq	r3, r4, r0, lsl #16
    2c04:	6a000400 	bvs	3c0c <_Min_Stack_Size+0x3a0c>
    2c08:	0400000b 	streq	r0, [r0], #-11
    2c0c:	00018101 	andeq	r8, r1, r1, lsl #2
    2c10:	15d90100 	ldrbne	r0, [r9, #256]	; 0x100
    2c14:	03030000 	movweq	r0, #12288	; 0x3000
    2c18:	03080000 	movweq	r0, #32768	; 0x8000
    2c1c:	00000000 	andeq	r0, r0, r0
    2c20:	17780000 	ldrbne	r0, [r8, -r0]!
    2c24:	b2020000 	andlt	r0, r2, #0
    2c28:	02000004 	andeq	r0, r0, #4
    2c2c:	0000301b 	andeq	r3, r0, fp, lsl r0
    2c30:	06010300 	streq	r0, [r1], -r0, lsl #6
    2c34:	000000c3 	andeq	r0, r0, r3, asr #1
    2c38:	00009302 	andeq	r9, r0, r2, lsl #6
    2c3c:	421d0200 	andsmi	r0, sp, #0, 4
    2c40:	03000000 	movweq	r0, #0
    2c44:	00c10801 	sbceq	r0, r1, r1, lsl #16
    2c48:	b1020000 	mrslt	r0, (UNDEF: 2)
    2c4c:	02000014 	andeq	r0, r0, #20
    2c50:	00005429 	andeq	r5, r0, r9, lsr #8
    2c54:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    2c58:	00000051 	andeq	r0, r0, r1, asr r0
    2c5c:	00002e02 	andeq	r2, r0, r2, lsl #28
    2c60:	662b0200 	strtvs	r0, [fp], -r0, lsl #4
    2c64:	03000000 	movweq	r0, #0
    2c68:	01230702 			; <UNDEFINED> instruction: 0x01230702
    2c6c:	04030000 	streq	r0, [r3], #-0
    2c70:	00006d05 	andeq	r6, r0, r5, lsl #26
    2c74:	00230200 	eoreq	r0, r3, r0, lsl #4
    2c78:	41020000 	mrsmi	r0, (UNDEF: 2)
    2c7c:	0000007f 	andeq	r0, r0, pc, ror r0
    2c80:	fa070403 	blx	1c3c94 <_Min_Stack_Size+0x1c3a94>
    2c84:	03000000 	movweq	r0, #0
    2c88:	00680508 	rsbeq	r0, r8, r8, lsl #10
    2c8c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2c90:	0000f507 	andeq	pc, r0, r7, lsl #10
    2c94:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    2c98:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2c9c:	ff070403 			; <UNDEFINED> instruction: 0xff070403
    2ca0:	03000000 	movweq	r0, #0
    2ca4:	00150704 	andseq	r0, r5, r4, lsl #14
    2ca8:	04050000 	streq	r0, [r5], #-0
    2cac:	000000af 	andeq	r0, r0, pc, lsr #1
    2cb0:	ca080103 	bgt	2030c4 <_Min_Stack_Size+0x202ec4>
    2cb4:	02000000 	andeq	r0, r0, #0
    2cb8:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    2cbc:	00251303 	eoreq	r1, r5, r3, lsl #6
    2cc0:	95020000 	strls	r0, [r2, #-0]
    2cc4:	03000000 	movweq	r0, #0
    2cc8:	00003714 	andeq	r3, r0, r4, lsl r7
    2ccc:	14b30200 	ldrtne	r0, [r3], #512	; 0x200
    2cd0:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
    2cd4:	00000049 	andeq	r0, r0, r9, asr #32
    2cd8:	00003002 	andeq	r3, r0, r2
    2cdc:	5b1a0300 	blpl	6838e4 <_Min_Stack_Size+0x6836e4>
    2ce0:	02000000 	andeq	r0, r0, #0
    2ce4:	00000025 	andeq	r0, r0, r5, lsr #32
    2ce8:	00742003 	rsbseq	r2, r4, r3
    2cec:	a4060000 	strge	r0, [r6], #-0
    2cf0:	12000014 	andne	r0, r0, #20
    2cf4:	01842c04 	orreq	r2, r4, r4, lsl #24
    2cf8:	69070000 	stmdbvs	r7, {}	; <UNPREDICTABLE>
    2cfc:	2e040064 	cdpcs	0, 0, cr0, cr4, cr4, {3}
    2d00:	000000d7 	ldrdeq	r0, [r0], -r7
    2d04:	72710700 	rsbsvc	r0, r1, #0, 14
    2d08:	c12f0400 			; <UNDEFINED> instruction: 0xc12f0400
    2d0c:	02000000 	andeq	r0, r0, #0
    2d10:	00152f08 	andseq	r2, r5, r8, lsl #30
    2d14:	c1320400 	teqgt	r2, r0, lsl #8
    2d18:	03000000 	movweq	r0, #0
    2d1c:	00616107 	rsbeq	r6, r1, r7, lsl #2
    2d20:	00c13404 	sbceq	r3, r1, r4, lsl #8
    2d24:	07040000 	streq	r0, [r4, -r0]
    2d28:	04006374 	streq	r6, [r0], #-884	; 0xfffffc8c
    2d2c:	0000c135 	andeq	ip, r0, r5, lsr r1
    2d30:	72070500 	andvc	r0, r7, #0, 10
    2d34:	36040064 	strcc	r0, [r4], -r4, rrx
    2d38:	000000c1 	andeq	r0, r0, r1, asr #1
    2d3c:	61720706 	cmnvs	r2, r6, lsl #14
    2d40:	c1370400 	teqgt	r7, r0, lsl #8
    2d44:	07000000 	streq	r0, [r0, -r0]
    2d48:	00153608 	andseq	r3, r5, r8, lsl #12
    2d4c:	c1380400 	teqgt	r8, r0, lsl #8
    2d50:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2d54:	0014a908 	andseq	sl, r4, r8, lsl #18
    2d58:	d73f0400 	ldrle	r0, [pc, -r0, lsl #8]!
    2d5c:	0a000000 	beq	2d64 <_Min_Stack_Size+0x2b64>
    2d60:	00153c08 	andseq	r3, r5, r8, lsl #24
    2d64:	d7400400 	strble	r0, [r0, -r0, lsl #8]
    2d68:	0c000000 	stceq	0, cr0, [r0], {-0}
    2d6c:	00151c08 	andseq	r1, r5, r8, lsl #24
    2d70:	d7410400 	strble	r0, [r1, -r0, lsl #8]
    2d74:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2d78:	00156108 	andseq	r6, r5, r8, lsl #2
    2d7c:	d7420400 	strble	r0, [r2, -r0, lsl #8]
    2d80:	10000000 	andne	r0, r0, r0
    2d84:	00c10900 	sbceq	r0, r1, r0, lsl #18
    2d88:	01940000 	orrseq	r0, r4, r0
    2d8c:	a20a0000 	andge	r0, sl, #0
    2d90:	03000000 	movweq	r0, #0
    2d94:	15a20b00 	strne	r0, [r2, #2816]!	; 0xb00
    2d98:	33010000 	movwcc	r0, #4096	; 0x1000
    2d9c:	000001c6 	andeq	r0, r0, r6, asr #3
    2da0:	08004254 	stmdaeq	r0, {r2, r4, r6, r9, lr}
    2da4:	00000036 	andeq	r0, r0, r6, lsr r0
    2da8:	01c69c01 	biceq	r9, r6, r1, lsl #24
    2dac:	730c0000 	movwvc	r0, #49152	; 0xc000
    2db0:	c6330100 	ldrtgt	r0, [r3], -r0, lsl #2
    2db4:	02000001 	andeq	r0, r0, #1
    2db8:	690c7491 	stmdbvs	ip, {r0, r4, r7, sl, ip, sp, lr}
    2dbc:	d7330100 	ldrle	r0, [r3, -r0, lsl #2]!
    2dc0:	02000000 	andeq	r0, r0, #0
    2dc4:	05007291 	streq	r7, [r0, #-657]	; 0xfffffd6f
    2dc8:	0000c104 	andeq	ip, r0, r4, lsl #2
    2dcc:	162e0d00 	strtne	r0, [lr], -r0, lsl #26
    2dd0:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    2dd4:	000000cc 	andeq	r0, r0, ip, asr #1
    2dd8:	0800428c 	stmdaeq	r0, {r2, r3, r7, r9, lr}
    2ddc:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    2de0:	02739c01 	rsbseq	r9, r3, #256	; 0x100
    2de4:	6f0c0000 	svcvs	0x000c0000
    2de8:	49010070 	stmdbmi	r1, {r4, r5, r6}
    2dec:	000000d7 	ldrdeq	r0, [r0], -r7
    2df0:	7dde9103 	ldfvcp	f1, [lr, #12]
    2df4:	00152a0e 	andseq	r2, r5, lr, lsl #20
    2df8:	a9490100 	stmdbge	r9, {r8}^
    2dfc:	03000000 	movweq	r0, #0
    2e00:	0c7dd891 	ldcleq	8, cr13, [sp], #-580	; 0xfffffdbc
    2e04:	00667562 	rsbeq	r7, r6, r2, ror #10
    2e08:	01c64901 	biceq	r4, r6, r1, lsl #18
    2e0c:	91030000 	mrsls	r0, (UNDEF: 3)
    2e10:	6c0c7dd4 	stcvs	13, cr7, [ip], {212}	; 0xd4
    2e14:	01006e65 	tsteq	r0, r5, ror #28
    2e18:	0000d749 	andeq	sp, r0, r9, asr #14
    2e1c:	dc910300 	ldcle	3, cr0, [r1], {0}
    2e20:	70630f7d 	rsbvc	r0, r3, sp, ror pc
    2e24:	c64b0100 	strbgt	r0, [fp], -r0, lsl #2
    2e28:	02000001 	andeq	r0, r0, #1
    2e2c:	630f6c91 	movwvs	r6, #64657	; 0xfc91
    2e30:	01003170 	tsteq	r0, r0, ror r1
    2e34:	0000a94c 	andeq	sl, r0, ip, asr #18
    2e38:	60910200 	addsvs	r0, r1, r0, lsl #4
    2e3c:	00148d10 	andseq	r8, r4, r0, lsl sp
    2e40:	734d0100 	movtvc	r0, #53504	; 0xd100
    2e44:	03000002 	movweq	r0, #2
    2e48:	107de091 			; <UNDEFINED> instruction: 0x107de091
    2e4c:	00001628 	andeq	r1, r0, r8, lsr #12
    2e50:	00a94e01 	adceq	r4, r9, r1, lsl #28
    2e54:	91020000 	mrsls	r0, (UNDEF: 2)
    2e58:	00700f68 	rsbseq	r0, r0, r8, ror #30
    2e5c:	00d74f01 	sbcseq	r4, r7, r1, lsl #30
    2e60:	91020000 	mrsls	r0, (UNDEF: 2)
    2e64:	3a651064 	bcc	1946ffc <_Min_Stack_Size+0x1946dfc>
    2e68:	50010000 	andpl	r0, r1, r0
    2e6c:	000000d7 	ldrdeq	r0, [r0], -r7
    2e70:	00669102 	rsbeq	r9, r6, r2, lsl #2
    2e74:	0000af09 	andeq	sl, r0, r9, lsl #30
    2e78:	00028300 	andeq	r8, r2, r0, lsl #6
    2e7c:	00a20a00 	adceq	r0, r2, r0, lsl #20
    2e80:	00ff0000 	rscseq	r0, pc, r0
    2e84:	00163c0d 	andseq	r3, r6, sp, lsl #24
    2e88:	c1870100 	orrgt	r0, r7, r0, lsl #2
    2e8c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    2e90:	0c080044 	stceq	0, cr0, [r8], {68}	; 0x44
    2e94:	01000001 	tsteq	r0, r1
    2e98:	00031a9c 	muleq	r3, ip, sl
    2e9c:	385f0e00 	ldmdacc	pc, {r9, sl, fp}^	; <UNPREDICTABLE>
    2ea0:	87010000 	strhi	r0, [r1, -r0]
    2ea4:	000001c6 	andeq	r0, r0, r6, asr #3
    2ea8:	0e4c9102 	sqteqe	f1, f2
    2eac:	0000152a 	andeq	r1, r0, sl, lsr #10
    2eb0:	01c68701 	biceq	r8, r6, r1, lsl #14
    2eb4:	91020000 	mrsls	r0, (UNDEF: 2)
    2eb8:	14da0e48 	ldrbne	r0, [sl], #3656	; 0xe48
    2ebc:	87010000 	strhi	r0, [r1, -r0]
    2ec0:	000001c6 	andeq	r0, r0, r6, asr #3
    2ec4:	0f449102 	svceq	0x00449102
    2ec8:	00706864 	rsbseq	r6, r0, r4, ror #16
    2ecc:	00ed8901 	rsceq	r8, sp, r1, lsl #18
    2ed0:	91020000 	mrsls	r0, (UNDEF: 2)
    2ed4:	70690f58 	rsbvc	r0, r9, r8, asr pc
    2ed8:	848a0100 	strhi	r0, [sl], #256	; 0x100
    2edc:	02000001 	andeq	r0, r0, #1
    2ee0:	6c0f5491 	cfstrsvs	mvf5, [pc], {145}	; 0x91
    2ee4:	01006e65 	tsteq	r0, r5, ror #28
    2ee8:	0000d78b 	andeq	sp, r0, fp, lsl #15
    2eec:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    2ef0:	0038a510 	eorseq	sl, r8, r0, lsl r5
    2ef4:	d78b0100 	strle	r0, [fp, r0, lsl #2]
    2ef8:	02000000 	andeq	r0, r0, #0
    2efc:	c7105291 			; <UNDEFINED> instruction: 0xc7105291
    2f00:	01000015 	tsteq	r0, r5, lsl r0
    2f04:	0000b68c 	andeq	fp, r0, ip, lsl #13
    2f08:	6d910200 	lfmvs	f0, 4, [r1]
    2f0c:	00160d10 	andseq	r0, r6, r0, lsl sp
    2f10:	d78d0100 	strle	r0, [sp, r0, lsl #2]
    2f14:	02000000 	andeq	r0, r0, #0
    2f18:	11006a91 			; <UNDEFINED> instruction: 0x11006a91
    2f1c:	000015b7 			; <UNDEFINED> instruction: 0x000015b7
    2f20:	4554c401 	ldrbmi	ip, [r4, #-1025]	; 0xfffffbff
    2f24:	00740800 	rsbseq	r0, r4, r0, lsl #16
    2f28:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f2c:	00000358 	andeq	r0, r0, r8, asr r3
    2f30:	0100730c 	tsteq	r0, ip, lsl #6
    2f34:	0000c1c4 	andeq	ip, r0, r4, asr #3
    2f38:	6f910200 	svcvs	0x00910200
    2f3c:	6675620c 	ldrbtvs	r6, [r5], -ip, lsl #4
    2f40:	c6c40100 	strbgt	r0, [r4], r0, lsl #2
    2f44:	02000001 	andeq	r0, r0, #1
    2f48:	0d106891 	ldceq	8, cr6, [r0, #-580]	; 0xfffffdbc
    2f4c:	01000016 	tsteq	r0, r6, lsl r0
    2f50:	0000d7c6 	andeq	sp, r0, r6, asr #15
    2f54:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    2f58:	15920d00 	ldrne	r0, [r2, #3328]	; 0xd00
    2f5c:	e1010000 	mrs	r0, (UNDEF: 1)
    2f60:	000000c1 	andeq	r0, r0, r1, asr #1
    2f64:	080045c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, lr}
    2f68:	0000005c 	andeq	r0, r0, ip, asr r0
    2f6c:	03b89c01 			; <UNDEFINED> instruction: 0x03b89c01
    2f70:	720e0000 	andvc	r0, lr, #0
    2f74:	01000015 	tsteq	r0, r5, lsl r0
    2f78:	0001c6e1 	andeq	ip, r1, r1, ror #13
    2f7c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2f80:	0015a80e 	andseq	sl, r5, lr, lsl #16
    2f84:	c6e10100 	strbtgt	r0, [r1], r0, lsl #2
    2f88:	02000001 	andeq	r0, r0, #1
    2f8c:	2a0e6891 	bcs	39d1d8 <_Min_Stack_Size+0x39cfd8>
    2f90:	01000015 	tsteq	r0, r5, lsl r0
    2f94:	0001c6e1 	andeq	ip, r1, r1, ror #13
    2f98:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2f9c:	0014da0e 	andseq	sp, r4, lr, lsl #20
    2fa0:	c6e10100 	strbtgt	r0, [r1], r0, lsl #2
    2fa4:	02000001 	andeq	r0, r0, #1
    2fa8:	720f6091 	andvc	r6, pc, #145	; 0x91
    2fac:	01007465 	tsteq	r0, r5, ror #8
    2fb0:	0000c1e3 	andeq	ip, r0, r3, ror #3
    2fb4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2fb8:	16161200 	ldrne	r1, [r6], -r0, lsl #4
    2fbc:	07010000 	streq	r0, [r1, -r0]
    2fc0:	0000b601 	andeq	fp, r0, r1, lsl #12
    2fc4:	00462400 	subeq	r2, r6, r0, lsl #8
    2fc8:	00004c08 	andeq	r4, r0, r8, lsl #24
    2fcc:	e59c0100 	ldr	r0, [ip, #256]	; 0x100
    2fd0:	13000003 	movwne	r0, #3
    2fd4:	00001463 	andeq	r1, r0, r3, ror #8
    2fd8:	c1010901 	tstgt	r1, r1, lsl #18
    2fdc:	05000000 	streq	r0, [r0, #-0]
    2fe0:	00012803 	andeq	r2, r1, r3, lsl #16
    2fe4:	81140020 	tsthi	r4, r0, lsr #32
    2fe8:	01000015 	tsteq	r0, r5, lsl r0
    2fec:	00000123 	andeq	r0, r0, r3, lsr #2
    2ff0:	001c0000 	andseq	r0, ip, r0
    2ff4:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ff8:	00159a15 	andseq	r9, r5, r5, lsl sl
    2ffc:	c6160100 	ldrgt	r0, [r6], -r0, lsl #2
    3000:	05000001 	streq	r0, [r0, #-1]
    3004:	00017403 	andeq	r7, r1, r3, lsl #8
    3008:	16461520 	strbne	r1, [r6], -r0, lsr #10
    300c:	17010000 	strne	r0, [r1, -r0]
    3010:	000000c1 	andeq	r0, r0, r1, asr #1
    3014:	01780305 	cmneq	r8, r5, lsl #6
    3018:	c0152000 	andsgt	r2, r5, r0
    301c:	01000015 	tsteq	r0, r5, lsl r0
    3020:	0000d718 	andeq	sp, r0, r8, lsl r7
    3024:	80030500 	andhi	r0, r3, r0, lsl #10
    3028:	15200001 	strne	r0, [r0, #-1]!
    302c:	00001604 	andeq	r1, r0, r4, lsl #12
    3030:	00e21a01 	rsceq	r1, r2, r1, lsl #20
    3034:	03050000 	movweq	r0, #20480	; 0x5000
    3038:	2000017c 	andcs	r0, r0, ip, ror r1
    303c:	0004e500 	andeq	lr, r4, r0, lsl #10
    3040:	cb000400 	blgt	4048 <_Min_Stack_Size+0x3e48>
    3044:	0400000c 	streq	r0, [r0], #-12
    3048:	00018101 	andeq	r8, r1, r1, lsl #2
    304c:	17dc0100 	ldrbne	r0, [ip, r0, lsl #2]
    3050:	03480000 	movteq	r0, #32768	; 0x8000
    3054:	00000000 	andeq	r0, r0, r0
    3058:	18fb0000 	ldmne	fp!, {}^	; <UNPREDICTABLE>
    305c:	01020000 	mrseq	r0, (UNDEF: 2)
    3060:	0000c306 	andeq	ip, r0, r6, lsl #6
    3064:	00930300 	addseq	r0, r3, r0, lsl #6
    3068:	1d020000 	stcne	0, cr0, [r2, #-0]
    306c:	00000033 	andeq	r0, r0, r3, lsr r0
    3070:	c1080102 	tstgt	r8, r2, lsl #2
    3074:	02000000 	andeq	r0, r0, #0
    3078:	00510502 	subseq	r0, r1, r2, lsl #10
    307c:	02020000 	andeq	r0, r2, #0
    3080:	00012307 	andeq	r2, r1, r7, lsl #6
    3084:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    3088:	0000006d 	andeq	r0, r0, sp, rrx
    308c:	00002303 	andeq	r2, r0, r3, lsl #6
    3090:	5a410200 	bpl	1043898 <_Min_Stack_Size+0x1043698>
    3094:	02000000 	andeq	r0, r0, #0
    3098:	00fa0704 	rscseq	r0, sl, r4, lsl #14
    309c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    30a0:	00006805 	andeq	r6, r0, r5, lsl #16
    30a4:	07080200 	streq	r0, [r8, -r0, lsl #4]
    30a8:	000000f5 	strdeq	r0, [r0], -r5
    30ac:	69050404 	stmdbvs	r5, {r2, sl}
    30b0:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    30b4:	00ff0704 	rscseq	r0, pc, r4, lsl #14
    30b8:	95030000 	strls	r0, [r3, #-0]
    30bc:	03000000 	movweq	r0, #0
    30c0:	00002814 	andeq	r2, r0, r4, lsl r8
    30c4:	00250300 	eoreq	r0, r5, r0, lsl #6
    30c8:	20030000 	andcs	r0, r3, r0
    30cc:	0000004f 	andeq	r0, r0, pc, asr #32
    30d0:	040e0405 	streq	r0, [lr], #-1029	; 0xfffffbfb
    30d4:	00014184 	andeq	r4, r1, r4, lsl #3
    30d8:	17860600 	strne	r0, [r6, r0, lsl #12]
    30dc:	86040000 	strhi	r0, [r4], -r0
    30e0:	00000158 	andeq	r0, r0, r8, asr r1
    30e4:	03c10600 	biceq	r0, r1, #0, 12
    30e8:	87040000 	strhi	r0, [r4, -r0]
    30ec:	0000015d 	andeq	r0, r0, sp, asr r1
    30f0:	17810620 	strne	r0, [r1, r0, lsr #12]
    30f4:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
    30f8:	0000016d 	andeq	r0, r0, sp, ror #2
    30fc:	16fa0680 	ldrbtne	r0, [sl], r0, lsl #13
    3100:	89040000 	stmdbhi	r4, {}	; <UNPREDICTABLE>
    3104:	0000015d 	andeq	r0, r0, sp, asr r1
    3108:	175107a0 	ldrbne	r0, [r1, -r0, lsr #15]
    310c:	8a040000 	bhi	103114 <_Min_Stack_Size+0x102f14>
    3110:	00000172 	andeq	r0, r0, r2, ror r1
    3114:	d5070100 	strle	r0, [r7, #-256]	; 0xffffff00
    3118:	04000003 	streq	r0, [r0], #-3
    311c:	00015d8b 	andeq	r5, r1, fp, lsl #27
    3120:	07012000 	streq	r2, [r1, -r0]
    3124:	00001718 	andeq	r1, r0, r8, lsl r7
    3128:	01778c04 	cmneq	r7, r4, lsl #24
    312c:	01800000 	orreq	r0, r0, r0
    3130:	0002b607 	andeq	fp, r2, r7, lsl #12
    3134:	5d8d0400 	cfstrspl	mvf0, [sp]
    3138:	a0000001 	andge	r0, r0, r1
    313c:	16510701 	ldrbne	r0, [r1], -r1, lsl #14
    3140:	8e040000 	cdphi	0, 0, cr0, cr4, cr0, {0}
    3144:	0000017c 	andeq	r0, r0, ip, ror r1
    3148:	e9070200 	stmdb	r7, {r9}
    314c:	04000003 	streq	r0, [r0], #-3
    3150:	0001818f 	andeq	r8, r1, pc, lsl #3
    3154:	08022000 	stmdaeq	r2, {sp}
    3158:	04005049 	streq	r5, [r0], #-73	; 0xffffffb7
    315c:	0001a190 	muleq	r1, r0, r1
    3160:	07030000 	streq	r0, [r3, -r0]
    3164:	000003f3 	strdeq	r0, [r0], -r3
    3168:	01a69104 			; <UNDEFINED> instruction: 0x01a69104
    316c:	03f00000 	mvnseq	r0, #0
    3170:	0016f507 	andseq	pc, r6, r7, lsl #10
    3174:	b7920400 	ldrlt	r0, [r2, r0, lsl #8]
    3178:	00000001 	andeq	r0, r0, r1
    317c:	8809000e 	stmdahi	r9, {r1, r2, r3}
    3180:	51000000 	mrspl	r0, (UNDEF: 0)
    3184:	0a000001 	beq	3190 <_Min_Stack_Size+0x2f90>
    3188:	00000151 	andeq	r0, r0, r1, asr r1
    318c:	04020007 	streq	r0, [r2], #-7
    3190:	00001507 	andeq	r1, r0, r7, lsl #10
    3194:	01410b00 	cmpeq	r1, r0, lsl #22
    3198:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    319c:	6d000000 	stcvs	0, cr0, [r0, #-0]
    31a0:	0a000001 	beq	31ac <_Min_Stack_Size+0x2fac>
    31a4:	00000151 	andeq	r0, r0, r1, asr r1
    31a8:	410b0017 	tstmi	fp, r7, lsl r0
    31ac:	0b000001 	bleq	31b8 <_Min_Stack_Size+0x2fb8>
    31b0:	00000141 	andeq	r0, r0, r1, asr #2
    31b4:	0001410b 	andeq	r4, r1, fp, lsl #2
    31b8:	01410b00 	cmpeq	r1, r0, lsl #22
    31bc:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    31c0:	91000000 	mrsls	r0, (UNDEF: 0)
    31c4:	0a000001 	beq	31d0 <_Min_Stack_Size+0x2fd0>
    31c8:	00000151 	andeq	r0, r0, r1, asr r1
    31cc:	7d090037 	stcvc	0, cr0, [r9, #-220]	; 0xffffff24
    31d0:	a1000000 	mrsge	r0, (UNDEF: 0)
    31d4:	0a000001 	beq	31e0 <_Min_Stack_Size+0x2fe0>
    31d8:	00000151 	andeq	r0, r0, r1, asr r1
    31dc:	910b00ef 	smlattls	fp, pc, r0, r0
    31e0:	09000001 	stmdbeq	r0, {r0}
    31e4:	00000088 	andeq	r0, r0, r8, lsl #1
    31e8:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
    31ec:	0001510c 	andeq	r5, r1, ip, lsl #2
    31f0:	00028300 	andeq	r8, r2, r0, lsl #6
    31f4:	0000880b 	andeq	r8, r0, fp, lsl #16
    31f8:	170e0300 	strne	r0, [lr, -r0, lsl #6]
    31fc:	93040000 	movwls	r0, #16384	; 0x4000
    3200:	00000093 	muleq	r0, r3, r0
    3204:	9b04740d 	blls	120240 <_Min_Stack_Size+0x120040>
    3208:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    320c:	00004306 	andeq	r4, r0, r6, lsl #6
    3210:	b49d0400 	ldrlt	r0, [sp], #1024	; 0x400
    3214:	00000002 	andeq	r0, r0, r2
    3218:	00005b06 	andeq	r5, r0, r6, lsl #22
    321c:	b79e0400 	ldrlt	r0, [lr, r0, lsl #8]
    3220:	04000001 	streq	r0, [r0], #-1
    3224:	00013606 	andeq	r3, r1, r6, lsl #12
    3228:	b79f0400 	ldrlt	r0, [pc, r0, lsl #8]
    322c:	08000001 	stmdaeq	r0, {r0}
    3230:	0000cf06 	andeq	ip, r0, r6, lsl #30
    3234:	b7a00400 	strlt	r0, [r0, r0, lsl #8]!
    3238:	0c000001 	stceq	0, cr0, [r0], {1}
    323c:	5243530e 	subpl	r5, r3, #939524096	; 0x38000000
    3240:	b7a10400 	strlt	r0, [r1, r0, lsl #8]!
    3244:	10000001 	andne	r0, r0, r1
    3248:	5243430e 	subpl	r4, r3, #939524096	; 0x38000000
    324c:	b7a20400 	strlt	r0, [r2, r0, lsl #8]!
    3250:	14000001 	strne	r0, [r0], #-1
    3254:	5048530e 	subpl	r5, r8, lr, lsl #6
    3258:	c9a30400 	stmibgt	r3!, {sl}
    325c:	18000002 	stmdane	r0, {r1}
    3260:	00010c06 	andeq	r0, r1, r6, lsl #24
    3264:	b7a40400 	strlt	r0, [r4, r0, lsl #8]!
    3268:	24000001 	strcs	r0, [r0], #-1
    326c:	0000a206 	andeq	sl, r0, r6, lsl #4
    3270:	b7a50400 	strlt	r0, [r5, r0, lsl #8]!
    3274:	28000001 	stmdacs	r0, {r0}
    3278:	00016b06 	andeq	r6, r1, r6, lsl #22
    327c:	b7a60400 	strlt	r0, [r6, r0, lsl #8]!
    3280:	2c000001 	stccs	0, cr0, [r0], {1}
    3284:	00015606 	andeq	r5, r1, r6, lsl #12
    3288:	b7a70400 	strlt	r0, [r7, r0, lsl #8]!
    328c:	30000001 	andcc	r0, r0, r1
    3290:	00011206 	andeq	r1, r1, r6, lsl #4
    3294:	b7a80400 	strlt	r0, [r8, r0, lsl #8]!
    3298:	34000001 	strcc	r0, [r0], #-1
    329c:	00007606 	andeq	r7, r0, r6, lsl #12
    32a0:	b7a90400 	strlt	r0, [r9, r0, lsl #8]!
    32a4:	38000001 	stmdacc	r0, {r0}
    32a8:	00020b06 	andeq	r0, r2, r6, lsl #22
    32ac:	b7aa0400 	strlt	r0, [sl, r0, lsl #8]!
    32b0:	3c000001 	stccc	0, cr0, [r0], {1}
    32b4:	5246500e 	subpl	r5, r6, #14
    32b8:	deab0400 	cdple	4, 10, cr0, cr11, cr0, {0}
    32bc:	40000002 	andmi	r0, r0, r2
    32c0:	5246440e 	subpl	r4, r6, #234881024	; 0xe000000
    32c4:	b4ac0400 	strtlt	r0, [ip], #1024	; 0x400
    32c8:	48000002 	stmdami	r0, {r1}
    32cc:	5244410e 	subpl	r4, r4, #-2147483645	; 0x80000003
    32d0:	b4ad0400 	strtlt	r0, [sp], #1024	; 0x400
    32d4:	4c000002 	stcmi	0, cr0, [r0], {2}
    32d8:	00017006 	andeq	r7, r1, r6
    32dc:	f8ae0400 			; <UNDEFINED> instruction: 0xf8ae0400
    32e0:	50000002 	andpl	r0, r0, r2
    32e4:	00015106 	andeq	r5, r1, r6, lsl #2
    32e8:	12af0400 	adcne	r0, pc, #0, 8
    32ec:	60000003 	andvs	r0, r0, r3
    32f0:	01b70f00 			; <UNDEFINED> instruction: 0x01b70f00
    32f4:	7d090000 	stcvc	0, cr0, [r9, #-0]
    32f8:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    32fc:	0a000002 	beq	330c <_Min_Stack_Size+0x310c>
    3300:	00000151 	andeq	r0, r0, r1, asr r1
    3304:	b90b000b 	stmdblt	fp, {r0, r1, r3}
    3308:	09000002 	stmdbeq	r0, {r1}
    330c:	00000088 	andeq	r0, r0, r8, lsl #1
    3310:	000002de 	ldrdeq	r0, [r0], -lr
    3314:	0001510a 	andeq	r5, r1, sl, lsl #2
    3318:	0f000100 	svceq	0x00000100
    331c:	000002e3 	andeq	r0, r0, r3, ror #5
    3320:	0002ce0b 	andeq	ip, r2, fp, lsl #28
    3324:	00880900 	addeq	r0, r8, r0, lsl #18
    3328:	02f80000 	rscseq	r0, r8, #0
    332c:	510a0000 	mrspl	r0, (UNDEF: 10)
    3330:	03000001 	movweq	r0, #1
    3334:	02fd0f00 	rscseq	r0, sp, #0, 30
    3338:	e80b0000 	stmda	fp, {}	; <UNPREDICTABLE>
    333c:	09000002 	stmdbeq	r0, {r1}
    3340:	00000088 	andeq	r0, r0, r8, lsl #1
    3344:	00000312 	andeq	r0, r0, r2, lsl r3
    3348:	0001510a 	andeq	r5, r1, sl, lsl #2
    334c:	0f000400 	svceq	0x00000400
    3350:	00000317 	andeq	r0, r0, r7, lsl r3
    3354:	0003020b 	andeq	r0, r3, fp, lsl #4
    3358:	00d50300 	sbcseq	r0, r5, r0, lsl #6
    335c:	b0040000 	andlt	r0, r4, r0
    3360:	000001c7 	andeq	r0, r0, r7, asr #3
    3364:	6d041010 	stcvs	0, cr1, [r4, #-64]	; 0xffffffc0
    3368:	00036501 	andeq	r6, r3, r1, lsl #10
    336c:	17091100 	strne	r1, [r9, -r0, lsl #2]
    3370:	6f040000 	svcvs	0x00040000
    3374:	0001b701 	andeq	fp, r1, r1, lsl #14
    3378:	ca110000 	bgt	443380 <_Min_Stack_Size+0x443180>
    337c:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    3380:	01b70170 			; <UNDEFINED> instruction: 0x01b70170
    3384:	12040000 	andne	r0, r4, #0
    3388:	004c4156 	subeq	r4, ip, r6, asr r1
    338c:	b7017104 	strlt	r7, [r1, -r4, lsl #2]
    3390:	08000001 	stmdaeq	r0, {r0}
    3394:	00170311 	andseq	r0, r7, r1, lsl r3
    3398:	01720400 	cmneq	r2, r0, lsl #8
    339c:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    33a0:	3813000c 	ldmdacc	r3, {r2, r3}
    33a4:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    33a8:	03270173 			; <UNDEFINED> instruction: 0x03270173
    33ac:	01140000 	tsteq	r4, r0
    33b0:	87020905 	strhi	r0, [r2, -r5, lsl #18]
    33b4:	15000003 	strne	r0, [r0, #-3]
    33b8:	000002fb 	strdeq	r0, [r0], -fp
    33bc:	04611500 	strbteq	r1, [r1], #-1280	; 0xfffffb00
    33c0:	00010000 	andeq	r0, r1, r0
    33c4:	0017ad13 	andseq	sl, r7, r3, lsl sp
    33c8:	02090500 	andeq	r0, r9, #0, 10
    33cc:	00000371 	andeq	r0, r0, r1, ror r3
    33d0:	3206040d 	andcc	r0, r6, #218103808	; 0xd000000
    33d4:	000003cc 	andeq	r0, r0, ip, asr #7
    33d8:	00175606 	andseq	r5, r7, r6, lsl #12
    33dc:	7d340600 	ldcvc	6, cr0, [r4, #-0]
    33e0:	00000000 	andeq	r0, r0, r0
    33e4:	00178b06 	andseq	r8, r7, r6, lsl #22
    33e8:	7d390600 	ldcvc	6, cr0, [r9, #-0]
    33ec:	01000000 	mrseq	r0, (UNDEF: 0)
    33f0:	00176606 	andseq	r6, r7, r6, lsl #12
    33f4:	7d3d0600 	ldcvc	6, cr0, [sp, #-0]
    33f8:	02000000 	andeq	r0, r0, #0
    33fc:	00166706 	andseq	r6, r6, r6, lsl #14
    3400:	87410600 	strbhi	r0, [r1, -r0, lsl #12]
    3404:	03000003 	movweq	r0, #3
    3408:	16560300 	ldrbne	r0, [r6], -r0, lsl #6
    340c:	44060000 	strmi	r0, [r6], #-0
    3410:	00000393 	muleq	r0, r3, r3
    3414:	00180916 	andseq	r0, r8, r6, lsl r9
    3418:	00600100 	rsbeq	r0, r0, r0, lsl #2
    341c:	24000000 	strcs	r0, [r0], #-0
    3420:	01000000 	mrseq	r0, (UNDEF: 0)
    3424:	0003fb9c 	muleq	r3, ip, fp
    3428:	16d91700 	ldrbne	r1, [r9], r0, lsl #14
    342c:	60010000 	andvs	r0, r1, r0
    3430:	00000088 	andeq	r0, r0, r8, lsl #1
    3434:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3438:	0016c816 	andseq	ip, r6, r6, lsl r8
    343c:	70700100 	rsbsvc	r0, r0, r0, lsl #2
    3440:	c4080046 	strgt	r0, [r8], #-70	; 0xffffffba
    3444:	01000000 	mrseq	r0, (UNDEF: 0)
    3448:	0004499c 	muleq	r4, ip, r9
    344c:	168c1700 	strne	r1, [ip], r0, lsl #14
    3450:	70010000 	andvc	r0, r1, r0
    3454:	00000449 	andeq	r0, r0, r9, asr #8
    3458:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
    345c:	00001745 	andeq	r1, r0, r5, asr #14
    3460:	00887201 	addeq	r7, r8, r1, lsl #4
    3464:	91020000 	mrsls	r0, (UNDEF: 2)
    3468:	16d21874 			; <UNDEFINED> instruction: 0x16d21874
    346c:	72010000 	andvc	r0, r1, #0
    3470:	00000088 	andeq	r0, r0, r8, lsl #1
    3474:	18709102 	ldmdane	r0!, {r1, r8, ip, pc}^
    3478:	0000171d 	andeq	r1, r0, sp, lsl r7
    347c:	00887201 	addeq	r7, r8, r1, lsl #4
    3480:	91020000 	mrsls	r0, (UNDEF: 2)
    3484:	0419006c 	ldreq	r0, [r9], #-108	; 0xffffff94
    3488:	000003cc 	andeq	r0, r0, ip, asr #7
    348c:	0016b416 	andseq	fp, r6, r6, lsl r4
    3490:	009c0100 	addseq	r0, ip, r0, lsl #2
    3494:	2c000000 	stccs	0, cr0, [r0], {-0}
    3498:	01000000 	mrseq	r0, (UNDEF: 0)
    349c:	0004819c 	muleq	r4, ip, r1
    34a0:	17bd1700 	ldrne	r1, [sp, r0, lsl #14]!
    34a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    34a8:	00000088 	andeq	r0, r0, r8, lsl #1
    34ac:	17749102 	ldrbne	r9, [r4, -r2, lsl #2]!
    34b0:	00001245 	andeq	r1, r0, r5, asr #4
    34b4:	00889c01 	addeq	r9, r8, r1, lsl #24
    34b8:	91020000 	mrsls	r0, (UNDEF: 2)
    34bc:	24160070 	ldrcs	r0, [r6], #-112	; 0xffffff90
    34c0:	01000017 	tsteq	r0, r7, lsl r0
    34c4:	000000af 	andeq	r0, r0, pc, lsr #1
    34c8:	00004000 	andeq	r4, r0, r0
    34cc:	b39c0100 	orrslt	r0, ip, #0, 2
    34d0:	17000004 	strne	r0, [r0, -r4]
    34d4:	000017cf 	andeq	r1, r0, pc, asr #15
    34d8:	007daf01 	rsbseq	sl, sp, r1, lsl #30
    34dc:	91020000 	mrsls	r0, (UNDEF: 2)
    34e0:	16ec1777 			; <UNDEFINED> instruction: 0x16ec1777
    34e4:	af010000 	svcge	0x00010000
    34e8:	00000387 	andeq	r0, r0, r7, lsl #7
    34ec:	00769102 	rsbseq	r9, r6, r2, lsl #2
    34f0:	00169c16 	andseq	r9, r6, r6, lsl ip
    34f4:	00c70100 	sbceq	r0, r7, r0, lsl #2
    34f8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    34fc:	01000000 	mrseq	r0, (UNDEF: 0)
    3500:	0004d79c 	muleq	r4, ip, r7
    3504:	167a1700 	ldrbtne	r1, [sl], -r0, lsl #14
    3508:	c7010000 	strgt	r0, [r1, -r0]
    350c:	00000088 	andeq	r0, r0, r8, lsl #1
    3510:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3514:	0002271a 	andeq	r2, r2, sl, lsl r7
    3518:	06ce0400 	strbeq	r0, [lr], r0, lsl #8
    351c:	000004e3 	andeq	r0, r0, r3, ror #9
    3520:	00006f0b 	andeq	r6, r0, fp, lsl #30
    3524:	08730000 	ldmdaeq	r3!, {}^	; <UNPREDICTABLE>
    3528:	00040000 	andeq	r0, r4, r0
    352c:	00000e1f 	andeq	r0, r0, pc, lsl lr
    3530:	01810104 	orreq	r0, r1, r4, lsl #2
    3534:	6d010000 	stcvs	0, cr0, [r1, #-0]
    3538:	78000019 	stmdavc	r0, {r0, r3, r4}
    353c:	00000003 	andeq	r0, r0, r3
    3540:	c1000000 	mrsgt	r0, (UNDEF: 0)
    3544:	0200001a 	andeq	r0, r0, #26
    3548:	00c30601 	sbceq	r0, r3, r1, lsl #12
    354c:	93030000 	movwls	r0, #12288	; 0x3000
    3550:	02000000 	andeq	r0, r0, #0
    3554:	0000331d 	andeq	r3, r0, sp, lsl r3
    3558:	08010200 	stmdaeq	r1, {r9}
    355c:	000000c1 	andeq	r0, r0, r1, asr #1
    3560:	51050202 	tstpl	r5, r2, lsl #4
    3564:	03000000 	movweq	r0, #0
    3568:	0000002e 	andeq	r0, r0, lr, lsr #32
    356c:	004c2b02 	subeq	r2, ip, r2, lsl #22
    3570:	02020000 	andeq	r0, r2, #0
    3574:	00012307 	andeq	r2, r1, r7, lsl #6
    3578:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    357c:	0000006d 	andeq	r0, r0, sp, rrx
    3580:	00002303 	andeq	r2, r0, r3, lsl #6
    3584:	65410200 	strbvs	r0, [r1, #-512]	; 0xfffffe00
    3588:	02000000 	andeq	r0, r0, #0
    358c:	00fa0704 	rscseq	r0, sl, r4, lsl #14
    3590:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    3594:	00006805 	andeq	r6, r0, r5, lsl #16
    3598:	07080200 	streq	r0, [r8, -r0, lsl #4]
    359c:	000000f5 	strdeq	r0, [r0], -r5
    35a0:	69050404 	stmdbvs	r5, {r2, sl}
    35a4:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    35a8:	00ff0704 	rscseq	r0, pc, r4, lsl #14
    35ac:	95030000 	strls	r0, [r3, #-0]
    35b0:	03000000 	movweq	r0, #0
    35b4:	00002814 	andeq	r2, r0, r4, lsl r8
    35b8:	00300300 	eorseq	r0, r0, r0, lsl #6
    35bc:	1a030000 	bne	c35c4 <_Min_Stack_Size+0xc33c4>
    35c0:	00000041 	andeq	r0, r0, r1, asr #32
    35c4:	00002503 	andeq	r2, r0, r3, lsl #10
    35c8:	5a200300 	bpl	8041d0 <_Min_Stack_Size+0x803fd0>
    35cc:	02000000 	andeq	r0, r0, #0
    35d0:	00150704 	andseq	r0, r5, r4, lsl #14
    35d4:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
    35d8:	06000000 	streq	r0, [r0], -r0
    35dc:	02070401 	andeq	r0, r7, #16777216	; 0x1000000
    35e0:	000000cb 	andeq	r0, r0, fp, asr #1
    35e4:	001c8b07 	andseq	r8, ip, r7, lsl #22
    35e8:	53080000 	movwpl	r0, #32768	; 0x8000
    35ec:	01005445 	tsteq	r0, r5, asr #8
    35f0:	2e7d0900 	cdpcs	9, 7, cr0, cr13, cr0, {0}
    35f4:	07040000 	streq	r0, [r4, -r0]
    35f8:	0000b502 	andeq	fp, r0, r2, lsl #10
    35fc:	2f9b0900 	svccs	0x009b0900
    3600:	07040000 	streq	r0, [r4, -r0]
    3604:	0000b502 	andeq	fp, r0, r2, lsl #10
    3608:	04010600 	streq	r0, [r1], #-1536	; 0xfffffa00
    360c:	00f90209 	rscseq	r0, r9, r9, lsl #4
    3610:	fb070000 	blx	1c361a <_Min_Stack_Size+0x1c341a>
    3614:	00000002 	andeq	r0, r0, r2
    3618:	00046107 	andeq	r6, r4, r7, lsl #2
    361c:	09000100 	stmdbeq	r0, {r8}
    3620:	000017ad 	andeq	r1, r0, sp, lsr #15
    3624:	e3020904 	movw	r0, #10500	; 0x2904
    3628:	06000000 	streq	r0, [r0], -r0
    362c:	020c0401 	andeq	r0, ip, #16777216	; 0x1000000
    3630:	0000011b 	andeq	r0, r0, fp, lsl r1
    3634:	00033207 	andeq	r3, r3, r7, lsl #4
    3638:	48070000 	stmdami	r7, {}	; <UNPREDICTABLE>
    363c:	01000014 	tsteq	r0, r4, lsl r0
    3640:	19610900 	stmdbne	r1!, {r8, fp}^
    3644:	0c040000 	stceq	0, cr0, [r4], {-0}
    3648:	00010502 	andeq	r0, r1, r2, lsl #10
    364c:	04280a00 	strteq	r0, [r8], #-2560	; 0xfffff600
    3650:	01b20434 			; <UNDEFINED> instruction: 0x01b20434
    3654:	430b0000 	movwmi	r0, #45056	; 0xb000
    3658:	36040052 			; <UNDEFINED> instruction: 0x36040052
    365c:	0000b004 	andeq	fp, r0, r4
    3660:	a20c0000 	andge	r0, ip, #0
    3664:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    3668:	00b00437 	adcseq	r0, r0, r7, lsr r4
    366c:	0b040000 	bleq	103674 <_Min_Stack_Size+0x103474>
    3670:	00524943 	subseq	r4, r2, r3, asr #18
    3674:	b0043804 	andlt	r3, r4, r4, lsl #16
    3678:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    367c:	00008a0c 	andeq	r8, r0, ip, lsl #20
    3680:	04390400 	ldrteq	r0, [r9], #-1024	; 0xfffffc00
    3684:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    3688:	000c0c0c 	andeq	r0, ip, ip, lsl #24
    368c:	3a040000 	bcc	103694 <_Min_Stack_Size+0x103494>
    3690:	0000b004 	andeq	fp, r0, r4
    3694:	830c1000 	movwhi	r1, #49152	; 0xc000
    3698:	04000000 	streq	r0, [r0], #-0
    369c:	00b0043b 	adcseq	r0, r0, fp, lsr r4
    36a0:	0c140000 	ldceq	0, cr0, [r4], {-0}
    36a4:	000000de 	ldrdeq	r0, [r0], -lr
    36a8:	b0043c04 	andlt	r3, r4, r4, lsl #24
    36ac:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    36b0:	0000490c 	andeq	r4, r0, ip, lsl #18
    36b4:	043d0400 	ldrteq	r0, [sp], #-1024	; 0xfffffc00
    36b8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    36bc:	001e0c1c 	andseq	r0, lr, ip, lsl ip
    36c0:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
    36c4:	0000b004 	andeq	fp, r0, r4
    36c8:	430b2000 	movwmi	r2, #45056	; 0xb000
    36cc:	04005253 	streq	r5, [r0], #-595	; 0xfffffdad
    36d0:	00b0043f 	adcseq	r0, r0, pc, lsr r4
    36d4:	00240000 	eoreq	r0, r4, r0
    36d8:	00000009 	andeq	r0, r0, r9
    36dc:	044a0400 	strbeq	r0, [sl], #-1024	; 0xfffffc00
    36e0:	00000127 	andeq	r0, r0, r7, lsr #2
    36e4:	2e05140d 	cdpcs	4, 0, cr1, cr5, cr13, {0}
    36e8:	00000203 	andeq	r0, r0, r3, lsl #4
    36ec:	001aab0e 	andseq	sl, sl, lr, lsl #22
    36f0:	9e300500 	cfabs32ls	mvfx0, mvfx0
    36f4:	00000000 	andeq	r0, r0, r0
    36f8:	0018d80e 	andseq	sp, r8, lr, lsl #16
    36fc:	9e310500 	cfabs32ls	mvfx0, mvfx1
    3700:	04000000 	streq	r0, [r0], #-0
    3704:	001b250e 	andseq	r2, fp, lr, lsl #10
    3708:	9e320500 	cfabs32ls	mvfx0, mvfx2
    370c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3710:	001ac70e 	andseq	ip, sl, lr, lsl #14
    3714:	9e330500 	cfabs32ls	mvfx0, mvfx3
    3718:	0c000000 	stceq	0, cr0, [r0], {-0}
    371c:	001a8c0e 	andseq	r8, sl, lr, lsl #24
    3720:	9e340500 	cfabs32ls	mvfx0, mvfx4
    3724:	10000000 	andne	r0, r0, r0
    3728:	18a50300 	stmiane	r5!, {r8, r9}
    372c:	35050000 	strcc	r0, [r5, #-0]
    3730:	000001be 			; <UNDEFINED> instruction: 0x000001be
    3734:	00190a0f 	andseq	r0, r9, pc, lsl #20
    3738:	00d90100 	sbcseq	r0, r9, r0, lsl #2
    373c:	5c000000 	stcpl	0, cr0, [r0], {-0}
    3740:	01000000 	mrseq	r0, (UNDEF: 0)
    3744:	1a9d109c 	bne	fe7479bc <BootRAM+0xd6b815d>
    3748:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    374c:	00000001 	andeq	r0, r0, r1
    3750:	00005c00 	andeq	r5, r0, r0, lsl #24
    3754:	459c0100 	ldrmi	r0, [ip, #256]	; 0x100
    3758:	11000002 	tstne	r0, r2
    375c:	00001b0c 	andeq	r1, r0, ip, lsl #22
    3760:	9e010e01 	cdpls	14, 0, cr0, cr1, cr1, {0}
    3764:	02000000 	andeq	r0, r0, #0
    3768:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    376c:	00001915 	andeq	r1, r0, r5, lsl r9
    3770:	1b013001 	blne	4f77c <_Min_Stack_Size+0x4f57c>
    3774:	00000001 	andeq	r0, r0, r1
    3778:	50000000 	andpl	r0, r0, r0
    377c:	01000000 	mrseq	r0, (UNDEF: 0)
    3780:	00028d9c 	muleq	r2, ip, sp
    3784:	00e61300 	rsceq	r1, r6, r0, lsl #6
    3788:	32010000 	andcc	r0, r1, #0
    378c:	0000b001 	andeq	fp, r0, r1
    3790:	70910200 	addsvc	r0, r1, r0, lsl #4
    3794:	0020ba13 	eoreq	fp, r0, r3, lsl sl
    3798:	01330100 	teqeq	r3, r0, lsl #2
    379c:	0000011b 	andeq	r0, r0, fp, lsl r1
    37a0:	13779102 	cmnne	r7, #-2147483648	; 0x80000000
    37a4:	00000039 	andeq	r0, r0, r9, lsr r0
    37a8:	cb013401 	blgt	507b4 <_Min_Stack_Size+0x505b4>
    37ac:	02000000 	andeq	r0, r0, #0
    37b0:	10007691 	mulne	r0, r1, r6
    37b4:	00001bb8 			; <UNDEFINED> instruction: 0x00001bb8
    37b8:	00014e01 	andeq	r4, r1, r1, lsl #28
    37bc:	3c000000 	stccc	0, cr0, [r0], {-0}
    37c0:	01000000 	mrseq	r0, (UNDEF: 0)
    37c4:	0002c29c 	muleq	r2, ip, r2
    37c8:	1bc21100 	blne	ff087bd0 <BootRAM+0xdff8371>
    37cc:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    37d0:	00008801 	andeq	r8, r0, r1, lsl #16
    37d4:	6f910200 	svcvs	0x00910200
    37d8:	0019d213 	andseq	sp, r9, r3, lsl r2
    37dc:	01500100 	cmpeq	r0, r0, lsl #2
    37e0:	0000009e 	muleq	r0, lr, r0
    37e4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    37e8:	001b9e10 	andseq	r9, fp, r0, lsl lr
    37ec:	01620100 	cmneq	r2, r0, lsl #2
    37f0:	00000000 	andeq	r0, r0, r0
    37f4:	00000020 	andeq	r0, r0, r0, lsr #32
    37f8:	02e89c01 	rsceq	r9, r8, #256	; 0x100
    37fc:	ec110000 	ldc	0, cr0, [r1], {-0}
    3800:	01000016 	tsteq	r0, r6, lsl r0
    3804:	00f90162 	rscseq	r0, r9, r2, ror #2
    3808:	91020000 	mrsls	r0, (UNDEF: 2)
    380c:	53100077 	tstpl	r0, #119	; 0x77
    3810:	01000019 	tsteq	r0, r9, lsl r0
    3814:	0000017a 	andeq	r0, r0, sl, ror r1
    3818:	003c0000 	eorseq	r0, ip, r0
    381c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3820:	0000032c 	andeq	r0, r0, ip, lsr #6
    3824:	001a2011 	andseq	r2, sl, r1, lsl r0
    3828:	017a0100 	cmneq	sl, r0, lsl #2
    382c:	0000009e 	muleq	r0, lr, r0
    3830:	116c9102 	cmnne	ip, r2, lsl #2
    3834:	000018b7 			; <UNDEFINED> instruction: 0x000018b7
    3838:	9e017a01 	vmlals.f32	s14, s2, s2
    383c:	02000000 	andeq	r0, r0, #0
    3840:	d2136891 	andsle	r6, r3, #9502720	; 0x910000
    3844:	01000019 	tsteq	r0, r9, lsl r0
    3848:	009e017c 	addseq	r0, lr, ip, ror r1
    384c:	91020000 	mrsls	r0, (UNDEF: 2)
    3850:	9a100074 	bls	403a28 <_Min_Stack_Size+0x403828>
    3854:	01000018 	tsteq	r0, r8, lsl r0
    3858:	00000191 	muleq	r0, r1, r1
    385c:	00200000 	eoreq	r0, r0, r0
    3860:	9c010000 	stcls	0, cr0, [r1], {-0}
    3864:	00000352 	andeq	r0, r0, r2, asr r3
    3868:	0016ec11 	andseq	lr, r6, r1, lsl ip
    386c:	01910100 	orrseq	r0, r1, r0, lsl #2
    3870:	000000f9 	strdeq	r0, [r0], -r9
    3874:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3878:	001a2e10 	andseq	r2, sl, r0, lsl lr
    387c:	02340100 	eorseq	r0, r4, #0, 2
    3880:	00000000 	andeq	r0, r0, r0
    3884:	00000038 	andeq	r0, r0, r8, lsr r0
    3888:	03879c01 	orreq	r9, r7, #256	; 0x100
    388c:	14110000 	ldrne	r0, [r1], #-0
    3890:	0100001b 	tsteq	r0, fp, lsl r0
    3894:	009e0234 	addseq	r0, lr, r4, lsr r2
    3898:	91020000 	mrsls	r0, (UNDEF: 2)
    389c:	19d2136c 	ldmibne	r2, {r2, r3, r5, r6, r8, r9, ip}^
    38a0:	36010000 	strcc	r0, [r1], -r0
    38a4:	00009e02 	andeq	r9, r0, r2, lsl #28
    38a8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    38ac:	19ae1400 	stmibne	lr!, {sl, ip}
    38b0:	4b010000 	blmi	438b8 <_Min_Stack_Size+0x436b8>
    38b4:	00008802 	andeq	r8, r0, r2, lsl #16
    38b8:	00000000 	andeq	r0, r0, r0
    38bc:	00002000 	andeq	r2, r0, r0
    38c0:	109c0100 	addsne	r0, ip, r0, lsl #2
    38c4:	00001b8f 	andeq	r1, r0, pc, lsl #23
    38c8:	00026001 	andeq	r6, r2, r1
    38cc:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    38d0:	01000000 	mrseq	r0, (UNDEF: 0)
    38d4:	0003d29c 	muleq	r3, ip, r2
    38d8:	1a811100 	bne	fe047ce0 <BootRAM+0xcfb8481>
    38dc:	60010000 	andvs	r0, r1, r0
    38e0:	00009e02 	andeq	r9, r0, r2, lsl #28
    38e4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    38e8:	0019d213 	andseq	sp, r9, r3, lsl r2
    38ec:	02620100 	rsbeq	r0, r2, #0, 2
    38f0:	0000009e 	muleq	r0, lr, r0
    38f4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    38f8:	0019c210 	andseq	ip, r9, r0, lsl r2
    38fc:	027a0100 	rsbseq	r0, sl, #0, 2
    3900:	00000000 	andeq	r0, r0, r0
    3904:	00000038 	andeq	r0, r0, r8, lsr r0
    3908:	04079c01 	streq	r9, [r7], #-3073	; 0xfffff3ff
    390c:	22110000 	andscs	r0, r1, #0
    3910:	01000018 	tsteq	r0, r8, lsl r0
    3914:	009e027a 	addseq	r0, lr, sl, ror r2
    3918:	91020000 	mrsls	r0, (UNDEF: 2)
    391c:	19d2136c 	ldmibne	r2, {r2, r3, r5, r6, r8, r9, ip}^
    3920:	7c010000 	stcvc	0, cr0, [r1], {-0}
    3924:	00009e02 	andeq	r9, r0, r2, lsl #28
    3928:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    392c:	1be41000 	blne	ff907934 <BootRAM+0xe8780d5>
    3930:	94010000 	strls	r0, [r1], #-0
    3934:	00000002 	andeq	r0, r0, r2
    3938:	00003800 	andeq	r3, r0, r0, lsl #16
    393c:	3c9c0100 	ldfccs	f0, [ip], {0}
    3940:	11000004 	tstne	r0, r4
    3944:	00001822 	andeq	r1, r0, r2, lsr #16
    3948:	9e029401 	cdpls	4, 0, cr9, cr2, cr1, {0}
    394c:	02000000 	andeq	r0, r0, #0
    3950:	d2136c91 	andsle	r6, r3, #37120	; 0x9100
    3954:	01000019 	tsteq	r0, r9, lsl r0
    3958:	009e0296 	umullseq	r0, lr, r6, r2
    395c:	91020000 	mrsls	r0, (UNDEF: 2)
    3960:	d7100074 			; <UNDEFINED> instruction: 0xd7100074
    3964:	0100001a 	tsteq	r0, sl, lsl r0
    3968:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    396c:	004c0000 	subeq	r0, ip, r0
    3970:	9c010000 	stcls	0, cr0, [r1], {-0}
    3974:	00000471 	andeq	r0, r0, r1, ror r4
    3978:	001bb111 	andseq	fp, fp, r1, lsl r1
    397c:	02bc0100 	adcseq	r0, ip, #0, 2
    3980:	00000088 	andeq	r0, r0, r8, lsl #1
    3984:	11779102 	cmnne	r7, r2, lsl #2
    3988:	000016ec 	andeq	r1, r0, ip, ror #13
    398c:	f902bc01 			; <UNDEFINED> instruction: 0xf902bc01
    3990:	02000000 	andeq	r0, r0, #0
    3994:	10007691 	mulne	r0, r1, r6
    3998:	00001a51 	andeq	r1, r0, r1, asr sl
    399c:	0002d801 	andeq	sp, r2, r1, lsl #16
    39a0:	1c000000 	stcne	0, cr0, [r0], {-0}
    39a4:	01000000 	mrseq	r0, (UNDEF: 0)
    39a8:	0004979c 	muleq	r4, ip, r7
    39ac:	1a621100 	bne	1887db4 <_Min_Stack_Size+0x1887bb4>
    39b0:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    39b4:	00009e02 	andeq	r9, r0, r2, lsl #28
    39b8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    39bc:	182b1000 	stmdane	fp!, {ip}
    39c0:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    39c4:	00000002 	andeq	r0, r0, r2
    39c8:	00003800 	andeq	r3, r0, r0, lsl #16
    39cc:	cc9c0100 	ldfgts	f0, [ip], {0}
    39d0:	11000004 	tstne	r0, r4
    39d4:	00001890 	muleq	r0, r0, r8
    39d8:	9e02fe01 	cdpls	14, 0, cr15, cr2, cr1, {0}
    39dc:	02000000 	andeq	r0, r0, #0
    39e0:	d2136c91 	andsle	r6, r3, #37120	; 0x9100
    39e4:	01000019 	tsteq	r0, r9, lsl r0
    39e8:	009e0300 	addseq	r0, lr, r0, lsl #6
    39ec:	91020000 	mrsls	r0, (UNDEF: 2)
    39f0:	35100074 	ldrcc	r0, [r0, #-116]	; 0xffffff8c
    39f4:	0100001b 	tsteq	r0, fp, lsl r0
    39f8:	0000033d 	andeq	r0, r0, sp, lsr r3
    39fc:	00400000 	subeq	r0, r0, r0
    3a00:	9c010000 	stcls	0, cr0, [r1], {-0}
    3a04:	000004f2 	strdeq	r0, [r0], -r2
    3a08:	00186911 	andseq	r6, r8, r1, lsl r9
    3a0c:	033d0100 	teqeq	sp, #0, 2
    3a10:	00000088 	andeq	r0, r0, r8, lsl #1
    3a14:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3a18:	0019a310 	andseq	sl, r9, r0, lsl r3
    3a1c:	035e0100 	cmpeq	lr, #0, 2
    3a20:	08004734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, lr}
    3a24:	00000020 	andeq	r0, r0, r0, lsr #32
    3a28:	05189c01 	ldreq	r9, [r8, #-3073]	; 0xfffff3ff
    3a2c:	ec110000 	ldc	0, cr0, [r1], {-0}
    3a30:	01000016 	tsteq	r0, r6, lsl r0
    3a34:	00f9035e 	rscseq	r0, r9, lr, asr r3
    3a38:	91020000 	mrsls	r0, (UNDEF: 2)
    3a3c:	fb100077 	blx	403c22 <_Min_Stack_Size+0x403a22>
    3a40:	0100001a 	tsteq	r0, sl, lsl r0
    3a44:	0000036f 	andeq	r0, r0, pc, ror #6
    3a48:	00240000 	eoreq	r0, r4, r0
    3a4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3a50:	0000053e 	andeq	r0, r0, lr, lsr r5
    3a54:	00192b11 	andseq	r2, r9, r1, lsl fp
    3a58:	036f0100 	cmneq	pc, #0, 2
    3a5c:	0000009e 	muleq	r0, lr, r0
    3a60:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3a64:	001b6610 	andseq	r6, fp, r0, lsl r6
    3a68:	037d0100 	cmneq	sp, #0, 2
    3a6c:	00000000 	andeq	r0, r0, r0
    3a70:	00000020 	andeq	r0, r0, r0, lsr #32
    3a74:	05649c01 	strbeq	r9, [r4, #-3073]!	; 0xfffff3ff
    3a78:	ec110000 	ldc	0, cr0, [r1], {-0}
    3a7c:	01000016 	tsteq	r0, r6, lsl r0
    3a80:	00f9037d 	rscseq	r0, r9, sp, ror r3
    3a84:	91020000 	mrsls	r0, (UNDEF: 2)
    3a88:	54100077 	ldrpl	r0, [r0], #-119	; 0xffffff89
    3a8c:	0100001b 	tsteq	r0, fp, lsl r0
    3a90:	4754038c 	ldrbmi	r0, [r4, -ip, lsl #7]
    3a94:	01640800 	cmneq	r4, r0, lsl #16
    3a98:	9c010000 	stcls	0, cr0, [r1], {-0}
    3a9c:	000005c6 	andeq	r0, r0, r6, asr #11
    3aa0:	001abc11 	andseq	fp, sl, r1, lsl ip
    3aa4:	038c0100 	orreq	r0, ip, #0, 2
    3aa8:	000005c6 	andeq	r0, r0, r6, asr #11
    3aac:	15649102 	strbne	r9, [r4, #-258]!	; 0xfffffefe
    3ab0:	00706d74 	rsbseq	r6, r0, r4, ror sp
    3ab4:	9e038e01 	cdpls	14, 0, cr8, cr3, cr1, {0}
    3ab8:	02000000 	andeq	r0, r0, #0
    3abc:	7b137491 	blvc	4e0d08 <_Min_Stack_Size+0x4e0b08>
    3ac0:	01000000 	mrseq	r0, (UNDEF: 0)
    3ac4:	009e038e 	addseq	r0, lr, lr, lsl #7
    3ac8:	91020000 	mrsls	r0, (UNDEF: 2)
    3acc:	00b71370 	adcseq	r1, r7, r0, ror r3
    3ad0:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    3ad4:	00009e03 	andeq	r9, r0, r3, lsl #28
    3ad8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3adc:	0018f613 	andseq	pc, r8, r3, lsl r6	; <UNPREDICTABLE>
    3ae0:	038e0100 	orreq	r0, lr, #0, 2
    3ae4:	0000009e 	muleq	r0, lr, r0
    3ae8:	00689102 	rsbeq	r9, r8, r2, lsl #2
    3aec:	02030416 	andeq	r0, r3, #369098752	; 0x16000000
    3af0:	c2100000 	andsgt	r0, r0, #0
    3af4:	01000018 	tsteq	r0, r8, lsl r0
    3af8:	00000428 	andeq	r0, r0, r8, lsr #8
    3afc:	003c0000 	eorseq	r0, ip, r0
    3b00:	9c010000 	stcls	0, cr0, [r1], {-0}
    3b04:	00000601 	andeq	r0, r0, r1, lsl #12
    3b08:	001bd611 	andseq	sp, fp, r1, lsl r6
    3b0c:	04280100 	strteq	r0, [r8], #-256	; 0xffffff00
    3b10:	0000009e 	muleq	r0, lr, r0
    3b14:	11749102 	cmnne	r4, r2, lsl #2
    3b18:	000016ec 	andeq	r1, r0, ip, ror #13
    3b1c:	f9042801 			; <UNDEFINED> instruction: 0xf9042801
    3b20:	02000000 	andeq	r0, r0, #0
    3b24:	10007391 	mulne	r0, r1, r3
    3b28:	00001ae4 	andeq	r1, r0, r4, ror #21
    3b2c:	b8044701 	stmdalt	r4, {r0, r8, r9, sl, lr}
    3b30:	3c080048 	stccc	0, cr0, [r8], {72}	; 0x48
    3b34:	01000000 	mrseq	r0, (UNDEF: 0)
    3b38:	0006369c 	muleq	r6, ip, r6
    3b3c:	18811100 	stmne	r1, {r8, ip}
    3b40:	47010000 	strmi	r0, [r1, -r0]
    3b44:	00009e04 	andeq	r9, r0, r4, lsl #28
    3b48:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3b4c:	0016ec11 	andseq	lr, r6, r1, lsl ip
    3b50:	04470100 	strbeq	r0, [r7], #-256	; 0xffffff00
    3b54:	000000f9 	strdeq	r0, [r0], -r9
    3b58:	00739102 	rsbseq	r9, r3, r2, lsl #2
    3b5c:	0019ed10 	andseq	lr, r9, r0, lsl sp
    3b60:	04660100 	strbteq	r0, [r6], #-256	; 0xffffff00
    3b64:	080048f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, lr}
    3b68:	0000003c 	andeq	r0, r0, ip, lsr r0
    3b6c:	066b9c01 	strbteq	r9, [fp], -r1, lsl #24
    3b70:	e7110000 	ldr	r0, [r1, -r0]
    3b74:	01000018 	tsteq	r0, r8, lsl r0
    3b78:	009e0466 	addseq	r0, lr, r6, ror #8
    3b7c:	91020000 	mrsls	r0, (UNDEF: 2)
    3b80:	16ec1174 			; <UNDEFINED> instruction: 0x16ec1174
    3b84:	66010000 	strvs	r0, [r1], -r0
    3b88:	0000f904 	andeq	pc, r0, r4, lsl #18
    3b8c:	73910200 	orrsvc	r0, r1, #0, 4
    3b90:	18521000 	ldmdane	r2, {ip}^
    3b94:	a1010000 	mrsge	r0, (UNDEF: 1)
    3b98:	00000004 	andeq	r0, r0, r4
    3b9c:	00003c00 	andeq	r3, r0, r0, lsl #24
    3ba0:	a09c0100 	addsge	r0, ip, r0, lsl #2
    3ba4:	11000006 	tstne	r0, r6
    3ba8:	00001881 	andeq	r1, r0, r1, lsl #17
    3bac:	9e04a101 	mvflss	f2, f1
    3bb0:	02000000 	andeq	r0, r0, #0
    3bb4:	ec117491 	cfldrs	mvf7, [r1], {145}	; 0x91
    3bb8:	01000016 	tsteq	r0, r6, lsl r0
    3bbc:	00f904a1 	rscseq	r0, r9, r1, lsr #9
    3bc0:	91020000 	mrsls	r0, (UNDEF: 2)
    3bc4:	3c100073 	ldccc	0, cr0, [r0], {115}	; 0x73
    3bc8:	01000019 	tsteq	r0, r9, lsl r0
    3bcc:	493004c0 	ldmdbmi	r0!, {r6, r7, sl}
    3bd0:	003c0800 	eorseq	r0, ip, r0, lsl #16
    3bd4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3bd8:	000006d5 	ldrdeq	r0, [r0], -r5
    3bdc:	0018e711 	andseq	lr, r8, r1, lsl r7
    3be0:	04c00100 	strbeq	r0, [r0], #256	; 0x100
    3be4:	0000009e 	muleq	r0, lr, r0
    3be8:	11749102 	cmnne	r4, r2, lsl #2
    3bec:	000016ec 	andeq	r1, r0, ip, ror #13
    3bf0:	f904c001 			; <UNDEFINED> instruction: 0xf904c001
    3bf4:	02000000 	andeq	r0, r0, #0
    3bf8:	10007391 	mulne	r0, r1, r3
    3bfc:	00001a04 	andeq	r1, r0, r4, lsl #20
    3c00:	0004d501 	andeq	sp, r4, r1, lsl #10
    3c04:	20000000 	andcs	r0, r0, r0
    3c08:	01000000 	mrseq	r0, (UNDEF: 0)
    3c0c:	0006fb9c 	muleq	r6, ip, fp
    3c10:	16ec1100 	strbtne	r1, [ip], r0, lsl #2
    3c14:	d5010000 	strle	r0, [r1, #-0]
    3c18:	0000f904 	andeq	pc, r0, r4, lsl #18
    3c1c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3c20:	1b741000 	blne	1d07c28 <_Min_Stack_Size+0x1d07a28>
    3c24:	e2010000 	and	r0, r1, #0
    3c28:	00000004 	andeq	r0, r0, r4
    3c2c:	00002000 	andeq	r2, r0, r0
    3c30:	219c0100 	orrscs	r0, ip, r0, lsl #2
    3c34:	11000007 	tstne	r0, r7
    3c38:	000016ec 	andeq	r1, r0, ip, ror #13
    3c3c:	f904e201 			; <UNDEFINED> instruction: 0xf904e201
    3c40:	02000000 	andeq	r0, r0, #0
    3c44:	10007791 	mulne	r0, r1, r7
    3c48:	000018fc 	strdeq	r1, [r0], -ip
    3c4c:	00050201 	andeq	r0, r5, r1, lsl #4
    3c50:	20000000 	andcs	r0, r0, r0
    3c54:	01000000 	mrseq	r0, (UNDEF: 0)
    3c58:	0007479c 	muleq	r7, ip, r7
    3c5c:	1ba91100 	blne	fea48064 <BootRAM+0xd9b8805>
    3c60:	02010000 	andeq	r0, r1, #0
    3c64:	00008805 	andeq	r8, r0, r5, lsl #16
    3c68:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3c6c:	1a3f1700 	bne	fc9874 <_Min_Stack_Size+0xfc9674>
    3c70:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    3c74:	0000cb05 	andeq	ip, r0, r5, lsl #22
    3c78:	00496c00 	subeq	r6, r9, r0, lsl #24
    3c7c:	00007408 	andeq	r7, r0, r8, lsl #8
    3c80:	9e9c0100 	fmllse	f0, f4, f0
    3c84:	11000007 	tstne	r0, r7
    3c88:	00001a17 	andeq	r1, r0, r7, lsl sl
    3c8c:	88052e01 	stmdahi	r5, {r0, r9, sl, fp, sp}
    3c90:	02000000 	andeq	r0, r0, #0
    3c94:	74156791 	ldrvc	r6, [r5], #-1937	; 0xfffff86f
    3c98:	0100706d 	tsteq	r0, sp, rrx
    3c9c:	009e0530 	addseq	r0, lr, r0, lsr r5
    3ca0:	91020000 	mrsls	r0, (UNDEF: 2)
    3ca4:	19e3136c 	stmibne	r3!, {r2, r3, r5, r6, r8, r9, ip}^
    3ca8:	31010000 	mrscc	r0, (UNDEF: 1)
    3cac:	00009e05 	andeq	r9, r0, r5, lsl #28
    3cb0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3cb4:	0019d913 	andseq	sp, r9, r3, lsl r9
    3cb8:	05320100 	ldreq	r0, [r2, #-256]!	; 0xffffff00
    3cbc:	000000cb 	andeq	r0, r0, fp, asr #1
    3cc0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    3cc4:	001a7318 	andseq	r7, sl, r8, lsl r3
    3cc8:	055b0100 	ldrbeq	r0, [fp, #-256]	; 0xffffff00
    3ccc:	00000000 	andeq	r0, r0, r0
    3cd0:	0000001c 	andeq	r0, r0, ip, lsl r0
    3cd4:	71179c01 	tstvc	r7, r1, lsl #24
    3cd8:	01000018 	tsteq	r0, r8, lsl r0
    3cdc:	00d7057a 	sbcseq	r0, r7, sl, ror r5
    3ce0:	00000000 	andeq	r0, r0, r0
    3ce4:	00380000 	eorseq	r0, r8, r0
    3ce8:	9c010000 	stcls	0, cr0, [r1], {-0}
    3cec:	000007e9 	andeq	r0, r0, r9, ror #15
    3cf0:	001bb111 	andseq	fp, fp, r1, lsl r1
    3cf4:	057a0100 	ldrbeq	r0, [sl, #-256]!	; 0xffffff00
    3cf8:	00000088 	andeq	r0, r0, r8, lsl #1
    3cfc:	136f9102 	cmnne	pc, #-2147483648	; 0x80000000
    3d00:	000019d9 	ldrdeq	r1, [r0], -r9
    3d04:	d7057c01 	strle	r7, [r5, -r1, lsl #24]
    3d08:	02000000 	andeq	r0, r0, #0
    3d0c:	10007791 	mulne	r0, r1, r7
    3d10:	0000183c 	andeq	r1, r0, ip, lsr r8
    3d14:	0005a801 	andeq	sl, r5, r1, lsl #16
    3d18:	20000000 	andcs	r0, r0, r0
    3d1c:	01000000 	mrseq	r0, (UNDEF: 0)
    3d20:	00080f9c 	muleq	r8, ip, pc	; <UNPREDICTABLE>
    3d24:	1bb11100 	blne	fec4812c <BootRAM+0xdbb88cd>
    3d28:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    3d2c:	00008805 	andeq	r8, r0, r5, lsl #16
    3d30:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3d34:	00881900 	addeq	r1, r8, r0, lsl #18
    3d38:	081f0000 	ldmdaeq	pc, {}	; <UNPREDICTABLE>
    3d3c:	a91a0000 	ldmdbge	sl, {}	; <UNPREDICTABLE>
    3d40:	0f000000 	svceq	0x00000000
    3d44:	1b431b00 	blne	10ca94c <_Min_Stack_Size+0x10ca74c>
    3d48:	c1010000 	mrsgt	r0, (UNDEF: 1)
    3d4c:	00000830 	andeq	r0, r0, r0, lsr r8
    3d50:	00540305 	subseq	r0, r4, r5, lsl #6
    3d54:	351c2000 	ldrcc	r2, [ip, #-0]
    3d58:	05000008 	streq	r0, [r0, #-8]
    3d5c:	0000080f 	andeq	r0, r0, pc, lsl #16
    3d60:	00008819 	andeq	r8, r0, r9, lsl r8
    3d64:	00084a00 	andeq	r4, r8, r0, lsl #20
    3d68:	00a91a00 	adceq	r1, r9, r0, lsl #20
    3d6c:	00030000 	andeq	r0, r3, r0
    3d70:	001bf41b 	andseq	pc, fp, fp, lsl r4	; <UNPREDICTABLE>
    3d74:	5bc20100 	blpl	ff08417c <BootRAM+0xdff491d>
    3d78:	05000008 	streq	r0, [r0, #-8]
    3d7c:	00006403 	andeq	r6, r0, r3, lsl #8
    3d80:	08601c20 	stmdaeq	r0!, {r5, sl, fp, ip}^
    3d84:	3a050000 	bcc	143d8c <_Min_Stack_Size+0x143b8c>
    3d88:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    3d8c:	00000227 	andeq	r0, r0, r7, lsr #4
    3d90:	7106ce06 	tstvc	r6, r6, lsl #28
    3d94:	05000008 	streq	r0, [r0, #-8]
    3d98:	0000007a 	andeq	r0, r0, sl, ror r0
    3d9c:	0006cd00 	andeq	ip, r6, r0, lsl #26
    3da0:	d9000400 	stmdble	r0, {sl}
    3da4:	0400000f 	streq	r0, [r0], #-15
    3da8:	00018101 	andeq	r8, r1, r1, lsl #2
    3dac:	1ce00100 	stfnee	f0, [r0]
    3db0:	04800000 	streq	r0, [r0], #0
    3db4:	00000000 	andeq	r0, r0, r0
    3db8:	1f060000 	svcne	0x00060000
    3dbc:	01020000 	mrseq	r0, (UNDEF: 2)
    3dc0:	0000c306 	andeq	ip, r0, r6, lsl #6
    3dc4:	00930300 	addseq	r0, r3, r0, lsl #6
    3dc8:	1d020000 	stcne	0, cr0, [r2, #-0]
    3dcc:	00000033 	andeq	r0, r0, r3, lsr r0
    3dd0:	c1080102 	tstgt	r8, r2, lsl #2
    3dd4:	02000000 	andeq	r0, r0, #0
    3dd8:	00510502 	subseq	r0, r1, r2, lsl #10
    3ddc:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    3de0:	02000000 	andeq	r0, r0, #0
    3de4:	00004c2b 	andeq	r4, r0, fp, lsr #24
    3de8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    3dec:	00000123 	andeq	r0, r0, r3, lsr #2
    3df0:	6d050402 	cfstrsvs	mvf0, [r5, #-8]
    3df4:	03000000 	movweq	r0, #0
    3df8:	00000023 	andeq	r0, r0, r3, lsr #32
    3dfc:	00654102 	rsbeq	r4, r5, r2, lsl #2
    3e00:	04020000 	streq	r0, [r2], #-0
    3e04:	0000fa07 	andeq	pc, r0, r7, lsl #20
    3e08:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    3e0c:	00000068 	andeq	r0, r0, r8, rrx
    3e10:	f5070802 			; <UNDEFINED> instruction: 0xf5070802
    3e14:	04000000 	streq	r0, [r0], #-0
    3e18:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3e1c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    3e20:	0000ff07 	andeq	pc, r0, r7, lsl #30
    3e24:	00950300 	addseq	r0, r5, r0, lsl #6
    3e28:	14030000 	strne	r0, [r3], #-0
    3e2c:	00000028 	andeq	r0, r0, r8, lsr #32
    3e30:	00003003 	andeq	r3, r0, r3
    3e34:	411a0300 	tstmi	sl, r0, lsl #6
    3e38:	03000000 	movweq	r0, #0
    3e3c:	00000025 	andeq	r0, r0, r5, lsr #32
    3e40:	005a2003 	subseq	r2, sl, r3
    3e44:	04020000 	streq	r0, [r2], #-0
    3e48:	00001507 	andeq	r1, r0, r7, lsl #10
    3e4c:	009e0500 	addseq	r0, lr, r0, lsl #10
    3e50:	9e060000 	cdpls	0, 0, cr0, cr6, cr0, {0}
    3e54:	c5000000 	strgt	r0, [r0, #-0]
    3e58:	07000000 	streq	r0, [r0, -r0]
    3e5c:	000000a9 	andeq	r0, r0, r9, lsr #1
    3e60:	75080003 	strvc	r0, [r8, #-3]
    3e64:	f9040038 			; <UNDEFINED> instruction: 0xf9040038
    3e68:	00008801 	andeq	r8, r0, r1, lsl #16
    3e6c:	04010900 	streq	r0, [r1], #-2304	; 0xfffff700
    3e70:	00e60209 	rsceq	r0, r6, r9, lsl #4
    3e74:	fb0a0000 	blx	283e7e <_Min_Stack_Size+0x283c7e>
    3e78:	00000002 	andeq	r0, r0, r2
    3e7c:	0004610a 	andeq	r6, r4, sl, lsl #2
    3e80:	0b000100 	bleq	4288 <_Min_Stack_Size+0x4088>
    3e84:	000017ad 	andeq	r1, r0, sp, lsr #15
    3e88:	d0020904 	andle	r0, r2, r4, lsl #18
    3e8c:	0c000000 	stceq	0, cr0, [r0], {-0}
    3e90:	03e9041c 	mvneq	r0, #28, 8	; 0x1c000000
    3e94:	00000157 	andeq	r0, r0, r7, asr r1
    3e98:	4c52430d 	mrrcmi	3, 0, r4, r2, cr13
    3e9c:	03eb0400 	mvneq	r0, #0, 8
    3ea0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    3ea4:	52430d00 	subpl	r0, r3, #0, 26
    3ea8:	ec040048 	stc	0, cr0, [r4], {72}	; 0x48
    3eac:	0000b003 	andeq	fp, r0, r3
    3eb0:	490d0400 	stmdbmi	sp, {sl}
    3eb4:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
    3eb8:	00b003ed 	adcseq	r0, r0, sp, ror #7
    3ebc:	0d080000 	stceq	0, cr0, [r8, #-0]
    3ec0:	0052444f 	subseq	r4, r2, pc, asr #8
    3ec4:	b003ee04 	andlt	lr, r3, r4, lsl #28
    3ec8:	0c000000 	stceq	0, cr0, [r0], {-0}
    3ecc:	001d520e 	andseq	r5, sp, lr, lsl #4
    3ed0:	03ef0400 	mvneq	r0, #0, 8
    3ed4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    3ed8:	52420d10 	subpl	r0, r2, #16, 26	; 0x400
    3edc:	f0040052 			; <UNDEFINED> instruction: 0xf0040052
    3ee0:	0000b003 	andeq	fp, r0, r3
    3ee4:	ec0e1400 	cfstrs	mvf1, [lr], {-0}
    3ee8:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    3eec:	00b003f1 	ldrshteq	r0, [r0], r1
    3ef0:	00180000 	andseq	r0, r8, r0
    3ef4:	001c020b 	andseq	r0, ip, fp, lsl #4
    3ef8:	03f20400 	mvnseq	r0, #0, 8
    3efc:	000000f2 	strdeq	r0, [r0], -r2
    3f00:	f804200c 			; <UNDEFINED> instruction: 0xf804200c
    3f04:	0001ae03 	andeq	sl, r1, r3, lsl #28
    3f08:	1ee30e00 	cdpne	14, 14, cr0, cr3, cr0, {0}
    3f0c:	fa040000 	blx	103f14 <_Min_Stack_Size+0x103d14>
    3f10:	0000b003 	andeq	fp, r0, r3
    3f14:	b70e0000 	strlt	r0, [lr, -r0]
    3f18:	0400001e 	streq	r0, [r0], #-30	; 0xffffffe2
    3f1c:	00b003fb 	ldrshteq	r0, [r0], fp
    3f20:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    3f24:	00001cd9 	ldrdeq	r1, [r0], -r9
    3f28:	ae03fc04 	cdpge	12, 0, cr15, cr3, cr4, {0}
    3f2c:	08000001 	stmdaeq	r0, {r0}
    3f30:	0003c10e 	andeq	ip, r3, lr, lsl #2
    3f34:	03fd0400 	mvnseq	r0, #0, 8
    3f38:	0000009e 	muleq	r0, lr, r0
    3f3c:	1e650e18 	mcrne	14, 3, r0, cr5, cr8, {0}
    3f40:	fe040000 	cdp2	0, 0, cr0, cr4, cr0, {0}
    3f44:	0000b003 	andeq	fp, r0, r3
    3f48:	05001c00 	streq	r1, [r0, #-3072]	; 0xfffff400
    3f4c:	000000b5 	strheq	r0, [r0], -r5
    3f50:	001e8e0b 	andseq	r8, lr, fp, lsl #28
    3f54:	03ff0400 	mvnseq	r0, #0, 8
    3f58:	00000163 	andeq	r0, r0, r3, ror #2
    3f5c:	3b05010f 	blcc	1443a0 <_Min_Stack_Size+0x1441a0>
    3f60:	000001da 	ldrdeq	r0, [r0], -sl
    3f64:	001d6d0a 	andseq	r6, sp, sl, lsl #26
    3f68:	a30a0100 	movwge	r0, #41216	; 0xa100
    3f6c:	0200001d 	andeq	r0, r0, #29
    3f70:	001ee80a 	andseq	lr, lr, sl, lsl #16
    3f74:	03000300 	movweq	r0, #768	; 0x300
    3f78:	00001ea5 	andeq	r1, r0, r5, lsr #29
    3f7c:	01bf3f05 			; <UNDEFINED> instruction: 0x01bf3f05
    3f80:	010f0000 	mrseq	r0, CPSR
    3f84:	021f4805 	andseq	r4, pc, #327680	; 0x50000
    3f88:	6b0a0000 	blvs	283f90 <_Min_Stack_Size+0x283d90>
    3f8c:	0000001e 	andeq	r0, r0, lr, lsl r0
    3f90:	001f080a 	andseq	r0, pc, sl, lsl #16
    3f94:	1b0a0400 	blne	284f9c <_Min_Stack_Size+0x284d9c>
    3f98:	2800001e 	stmdacs	r0, {r1, r2, r3, r4}
    3f9c:	001e520a 	andseq	r5, lr, sl, lsl #4
    3fa0:	0a00c800 	beq	35fa8 <_Min_Stack_Size+0x35da8>
    3fa4:	00001d7e 	andeq	r1, r0, lr, ror sp
    3fa8:	1ed20a14 	mrcne	10, 6, r0, cr2, cr4, {0}
    3fac:	0a100000 	beq	403fb4 <_Min_Stack_Size+0x403db4>
    3fb0:	00001f45 	andeq	r1, r0, r5, asr #30
    3fb4:	1c4c0a1c 	vmovne	s24, s25, r0, ip
    3fb8:	00180000 	andseq	r0, r8, r0
    3fbc:	001c3b03 	andseq	r3, ip, r3, lsl #22
    3fc0:	e5500500 	ldrb	r0, [r0, #-1280]	; 0xfffffb00
    3fc4:	10000001 	andne	r0, r0, r1
    3fc8:	575b0504 	ldrbpl	r0, [fp, -r4, lsl #10]
    3fcc:	11000002 	tstne	r0, r2
    3fd0:	00001c16 	andeq	r1, r0, r6, lsl ip
    3fd4:	00935d05 	addseq	r5, r3, r5, lsl #26
    3fd8:	11000000 	mrsne	r0, (UNDEF: 0)
    3fdc:	00001cc4 	andeq	r1, r0, r4, asr #25
    3fe0:	01da6005 	bicseq	r6, sl, r5
    3fe4:	11020000 	mrsne	r0, (UNDEF: 2)
    3fe8:	00001e84 	andeq	r1, r0, r4, lsl #29
    3fec:	021f6305 	andseq	r6, pc, #335544320	; 0x14000000
    3ff0:	00030000 	andeq	r0, r3, r0
    3ff4:	001db303 	andseq	fp, sp, r3, lsl #6
    3ff8:	2a650500 	bcs	1945400 <_Min_Stack_Size+0x1945200>
    3ffc:	0f000002 	svceq	0x00000002
    4000:	776d0501 	strbvc	r0, [sp, -r1, lsl #10]!
    4004:	0a000002 	beq	4014 <_Min_Stack_Size+0x3e14>
    4008:	00001c87 	andeq	r1, r0, r7, lsl #25
    400c:	1c1f0a00 	ldcne	10, cr0, [pc], {-0}
    4010:	00010000 	andeq	r0, r1, r0
    4014:	001e9b03 	andseq	r9, lr, r3, lsl #22
    4018:	626f0500 	rsbvs	r0, pc, #0, 10
    401c:	12000002 	andne	r0, r0, #2
    4020:	00001d2f 	andeq	r1, r0, pc, lsr #26
    4024:	00006c01 	andeq	r6, r0, r1, lsl #24
    4028:	00e40000 	rsceq	r0, r4, r0
    402c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4030:	000002a6 	andeq	r0, r0, r6, lsr #5
    4034:	001ebc13 	andseq	fp, lr, r3, lsl ip
    4038:	a66c0100 	strbtge	r0, [ip], -r0, lsl #2
    403c:	02000002 	andeq	r0, r0, #2
    4040:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
    4044:	00015704 	andeq	r5, r1, r4, lsl #14
    4048:	1f351500 	svcne	0x00351500
    404c:	9f010000 	svcls	0x00010000
    4050:	00000000 	andeq	r0, r0, r0
    4054:	00000016 	andeq	r0, r0, r6, lsl r0
    4058:	cf169c01 	svcgt	0x00169c01
    405c:	0100001c 	tsteq	r0, ip, lsl r0
    4060:	0049e0ad 	subeq	lr, r9, sp, lsr #1
    4064:	00018008 	andeq	r8, r1, r8
    4068:	439c0100 	orrsmi	r0, ip, #0, 2
    406c:	13000003 	movwne	r0, #3
    4070:	00001ebc 			; <UNDEFINED> instruction: 0x00001ebc
    4074:	02a6ad01 	adceq	sl, r6, #1, 26	; 0x40
    4078:	91020000 	mrsls	r0, (UNDEF: 2)
    407c:	1ec2135c 	mcrne	3, 6, r1, cr2, cr12, {2}
    4080:	ad010000 	stcge	0, cr0, [r1, #-0]
    4084:	00000343 	andeq	r0, r0, r3, asr #6
    4088:	17589102 	ldrbne	r9, [r8, -r2, lsl #2]
    408c:	00001dcc 	andeq	r1, r0, ip, asr #27
    4090:	009eaf01 	addseq	sl, lr, r1, lsl #30
    4094:	91020000 	mrsls	r0, (UNDEF: 2)
    4098:	1e3c1774 	mrcne	7, 1, r1, cr12, cr4, {3}
    409c:	af010000 	svcge	0x00010000
    40a0:	0000009e 	muleq	r0, lr, r0
    40a4:	17689102 	strbne	r9, [r8, -r2, lsl #2]!
    40a8:	00001c0f 	andeq	r1, r0, pc, lsl #24
    40ac:	009eaf01 	addseq	sl, lr, r1, lsl #30
    40b0:	91020000 	mrsls	r0, (UNDEF: 2)
    40b4:	6f701870 	svcvs	0x00701870
    40b8:	af010073 	svcge	0x00010073
    40bc:	0000009e 	muleq	r0, lr, r0
    40c0:	17649102 	strbne	r9, [r4, -r2, lsl #2]!
    40c4:	000019d2 	ldrdeq	r1, [r0], -r2
    40c8:	009eb001 	addseq	fp, lr, r1
    40cc:	91020000 	mrsls	r0, (UNDEF: 2)
    40d0:	1d17176c 	ldcne	7, cr1, [r7, #-432]	; 0xfffffe50
    40d4:	b0010000 	andlt	r0, r1, r0
    40d8:	0000009e 	muleq	r0, lr, r0
    40dc:	00609102 	rsbeq	r9, r0, r2, lsl #2
    40e0:	02570414 	subseq	r0, r7, #20, 8	; 0x14000000
    40e4:	70190000 	andsvc	r0, r9, r0
    40e8:	0100001c 	tsteq	r0, ip, lsl r0
    40ec:	0000010a 	andeq	r0, r0, sl, lsl #2
    40f0:	00260000 	eoreq	r0, r6, r0
    40f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    40f8:	0000036f 	andeq	r0, r0, pc, ror #6
    40fc:	001ec21a 	andseq	ip, lr, sl, lsl r2
    4100:	010a0100 	mrseq	r0, (UNDEF: 26)
    4104:	00000343 	andeq	r0, r0, r3, asr #6
    4108:	00749102 	rsbseq	r9, r4, r2, lsl #2
    410c:	001d571b 	andseq	r5, sp, fp, lsl r7
    4110:	01190100 	tsteq	r9, r0, lsl #2
    4114:	00000088 	andeq	r0, r0, r8, lsl #1
    4118:	00000000 	andeq	r0, r0, r0
    411c:	00000034 	andeq	r0, r0, r4, lsr r0
    4120:	03b79c01 			; <UNDEFINED> instruction: 0x03b79c01
    4124:	bc1a0000 	ldclt	0, cr0, [sl], {-0}
    4128:	0100001e 	tsteq	r0, lr, lsl r0
    412c:	02a60119 	adceq	r0, r6, #1073741830	; 0x40000006
    4130:	91020000 	mrsls	r0, (UNDEF: 2)
    4134:	1c161a6c 	ldcne	10, cr1, [r6], {108}	; 0x6c
    4138:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    413c:	00009301 	andeq	r9, r0, r1, lsl #6
    4140:	6a910200 	bvs	fe444948 <BootRAM+0xd3b50e9>
    4144:	0019d91c 	andseq	sp, r9, ip, lsl r9
    4148:	011b0100 	tsteq	fp, r0, lsl #2
    414c:	00000088 	andeq	r0, r0, r8, lsl #1
    4150:	00779102 	rsbseq	r9, r7, r2, lsl #2
    4154:	001e001b 	andseq	r0, lr, fp, lsl r0
    4158:	01310100 	teqeq	r1, r0, lsl #2
    415c:	00000093 	muleq	r0, r3, r0
    4160:	00000000 	andeq	r0, r0, r0
    4164:	0000001a 	andeq	r0, r0, sl, lsl r0
    4168:	03e19c01 	mvneq	r9, #256	; 0x100
    416c:	bc1a0000 	ldclt	0, cr0, [sl], {-0}
    4170:	0100001e 	tsteq	r0, lr, lsl r0
    4174:	02a60131 	adceq	r0, r6, #1073741836	; 0x4000000c
    4178:	91020000 	mrsls	r0, (UNDEF: 2)
    417c:	1e1b0074 	mrcne	0, 0, r0, cr11, cr4, {3}
    4180:	0100001f 	tsteq	r0, pc, lsl r0
    4184:	00880140 	addeq	r0, r8, r0, asr #2
    4188:	00000000 	andeq	r0, r0, r0
    418c:	00340000 	eorseq	r0, r4, r0
    4190:	9c010000 	stcls	0, cr0, [r1], {-0}
    4194:	00000429 	andeq	r0, r0, r9, lsr #8
    4198:	001ebc1a 	andseq	fp, lr, sl, lsl ip
    419c:	01400100 	mrseq	r0, (UNDEF: 80)
    41a0:	000002a6 	andeq	r0, r0, r6, lsr #5
    41a4:	1a6c9102 	bne	1b285b4 <_Min_Stack_Size+0x1b283b4>
    41a8:	00001c16 	andeq	r1, r0, r6, lsl ip
    41ac:	93014001 	movwls	r4, #4097	; 0x1001
    41b0:	02000000 	andeq	r0, r0, #0
    41b4:	d91c6a91 	ldmdble	ip, {r0, r4, r7, r9, fp, sp, lr}
    41b8:	01000019 	tsteq	r0, r9, lsl r0
    41bc:	00880142 	addeq	r0, r8, r2, asr #2
    41c0:	91020000 	mrsls	r0, (UNDEF: 2)
    41c4:	271b0077 			; <UNDEFINED> instruction: 0x271b0077
    41c8:	0100001c 	tsteq	r0, ip, lsl r0
    41cc:	00930157 	addseq	r0, r3, r7, asr r1
    41d0:	00000000 	andeq	r0, r0, r0
    41d4:	001a0000 	andseq	r0, sl, r0
    41d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    41dc:	00000453 	andeq	r0, r0, r3, asr r4
    41e0:	001ebc1a 	andseq	fp, lr, sl, lsl ip
    41e4:	01570100 	cmpeq	r7, r0, lsl #2
    41e8:	000002a6 	andeq	r0, r0, r6, lsr #5
    41ec:	00749102 	rsbseq	r9, r4, r2, lsl #2
    41f0:	001cb719 	andseq	fp, ip, r9, lsl r7
    41f4:	01660100 	cmneq	r6, r0, lsl #2
    41f8:	08004b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, lr}
    41fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    4200:	04889c01 	streq	r9, [r8], #3073	; 0xc01
    4204:	bc1a0000 	ldclt	0, cr0, [sl], {-0}
    4208:	0100001e 	tsteq	r0, lr, lsl r0
    420c:	02a60166 	adceq	r0, r6, #-2147483623	; 0x80000019
    4210:	91020000 	mrsls	r0, (UNDEF: 2)
    4214:	1c161a74 	ldcne	10, cr1, [r6], {116}	; 0x74
    4218:	66010000 	strvs	r0, [r1], -r0
    421c:	00009301 	andeq	r9, r0, r1, lsl #6
    4220:	72910200 	addsvc	r0, r1, #0, 4
    4224:	1ef91900 	cdpne	9, 15, cr1, cr9, cr0, {0}
    4228:	76010000 	strvc	r0, [r1], -r0
    422c:	004b7c01 	subeq	r7, fp, r1, lsl #24
    4230:	00001c08 	andeq	r1, r0, r8, lsl #24
    4234:	bd9c0100 	ldflts	f0, [ip]
    4238:	1a000004 	bne	4250 <_Min_Stack_Size+0x4050>
    423c:	00001ebc 			; <UNDEFINED> instruction: 0x00001ebc
    4240:	a6017601 	strge	r7, [r1], -r1, lsl #12
    4244:	02000002 	andeq	r0, r0, #2
    4248:	161a7491 			; <UNDEFINED> instruction: 0x161a7491
    424c:	0100001c 	tsteq	r0, ip, lsl r0
    4250:	00930176 	addseq	r0, r3, r6, ror r1
    4254:	91020000 	mrsls	r0, (UNDEF: 2)
    4258:	91190072 	tstls	r9, r2, ror r0
    425c:	0100001c 	tsteq	r0, ip, lsl r0
    4260:	0000018a 	andeq	r0, r0, sl, lsl #3
    4264:	002e0000 	eoreq	r0, lr, r0
    4268:	9c010000 	stcls	0, cr0, [r1], {-0}
    426c:	00000501 	andeq	r0, r0, r1, lsl #10
    4270:	001ebc1a 	andseq	fp, lr, sl, lsl ip
    4274:	018a0100 	orreq	r0, sl, r0, lsl #2
    4278:	000002a6 	andeq	r0, r0, r6, lsr #5
    427c:	1a749102 	bne	1d2868c <_Min_Stack_Size+0x1d2848c>
    4280:	00001c16 	andeq	r1, r0, r6, lsl ip
    4284:	93018a01 	movwls	r8, #6657	; 0x1a01
    4288:	02000000 	andeq	r0, r0, #0
    428c:	801a7291 	mulshi	sl, r1, r2
    4290:	0100001c 	tsteq	r0, ip, lsl r0
    4294:	0277018a 	rsbseq	r0, r7, #-2147483614	; 0x80000022
    4298:	91020000 	mrsls	r0, (UNDEF: 2)
    429c:	47190071 			; <UNDEFINED> instruction: 0x47190071
    42a0:	0100001e 	tsteq	r0, lr, lsl r0
    42a4:	000001a1 	andeq	r0, r0, r1, lsr #3
    42a8:	001c0000 	andseq	r0, ip, r0
    42ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    42b0:	00000536 	andeq	r0, r0, r6, lsr r5
    42b4:	001ebc1a 	andseq	fp, lr, sl, lsl ip
    42b8:	01a10100 			; <UNDEFINED> instruction: 0x01a10100
    42bc:	000002a6 	andeq	r0, r0, r6, lsr #5
    42c0:	1a749102 	bne	1d286d0 <_Min_Stack_Size+0x1d284d0>
    42c4:	00001dc4 	andeq	r1, r0, r4, asr #27
    42c8:	9301a101 	movwls	sl, #4353	; 0x1101
    42cc:	02000000 	andeq	r0, r0, #0
    42d0:	19007291 	stmdbne	r0, {r0, r4, r7, r9, ip, sp, lr}
    42d4:	00001e29 	andeq	r1, r0, r9, lsr #28
    42d8:	0001b001 	andeq	fp, r1, r1
    42dc:	42000000 	andmi	r0, r0, #0
    42e0:	01000000 	mrseq	r0, (UNDEF: 0)
    42e4:	00057a9c 	muleq	r5, ip, sl
    42e8:	1ebc1a00 	vmovne.f32	s2, #192	; 0xbe000000 -0.125
    42ec:	b0010000 	andlt	r0, r1, r0
    42f0:	0002a601 	andeq	sl, r2, r1, lsl #12
    42f4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    42f8:	001c161a 	andseq	r1, ip, sl, lsl r6
    42fc:	01b00100 	lslseq	r0, r0, #2
    4300:	00000093 	muleq	r0, r3, r0
    4304:	1d6a9102 	stfnep	f1, [sl, #-8]!
    4308:	00706d74 	rsbseq	r6, r0, r4, ror sp
    430c:	9e01b201 	cdpls	2, 0, cr11, cr1, cr1, {0}
    4310:	02000000 	andeq	r0, r0, #0
    4314:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
    4318:	00001d3b 	andeq	r1, r0, fp, lsr sp
    431c:	0001ce01 	andeq	ip, r1, r1, lsl #28
    4320:	4c000000 	stcmi	0, cr0, [r0], {-0}
    4324:	01000000 	mrseq	r0, (UNDEF: 0)
    4328:	0005be9c 	muleq	r5, ip, lr
    432c:	1d1f1a00 	vldrne	s2, [pc, #-0]	; 4334 <_Min_Stack_Size+0x4134>
    4330:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    4334:	00008801 	andeq	r8, r0, r1, lsl #16
    4338:	6f910200 	svcvs	0x00910200
    433c:	001df11a 	andseq	pc, sp, sl, lsl r1	; <UNPREDICTABLE>
    4340:	01ce0100 	biceq	r0, lr, r0, lsl #2
    4344:	00000088 	andeq	r0, r0, r8, lsl #1
    4348:	1c6e9102 	stfnep	f1, [lr], #-8
    434c:	000019d2 	ldrdeq	r1, [r0], -r2
    4350:	9e01d001 	cdpls	0, 0, cr13, cr1, cr1, {0}
    4354:	02000000 	andeq	r0, r0, #0
    4358:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
    435c:	00001c5c 	andeq	r1, r0, ip, asr ip
    4360:	0001e301 	andeq	lr, r1, r1, lsl #6
    4364:	20000000 	andcs	r0, r0, r0
    4368:	01000000 	mrseq	r0, (UNDEF: 0)
    436c:	0005e49c 	muleq	r5, ip, r4
    4370:	16ec1a00 	strbtne	r1, [ip], r0, lsl #20
    4374:	e3010000 	movw	r0, #4096	; 0x1000
    4378:	0000e601 	andeq	lr, r0, r1, lsl #12
    437c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4380:	1dd81900 	ldclne	9, cr1, [r8]
    4384:	25010000 	strcs	r0, [r1, #-0]
    4388:	00000002 	andeq	r0, r0, r2
    438c:	0000e000 	andeq	lr, r0, r0
    4390:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
    4394:	1a000006 	bne	43b4 <_Min_Stack_Size+0x41b4>
    4398:	00001e79 	andeq	r1, r0, r9, ror lr
    439c:	9e022501 	cfsh32ls	mvfx2, mvfx2, #1
    43a0:	02000000 	andeq	r0, r0, #0
    43a4:	ec1a6491 	cfldrs	mvf6, [sl], {145}	; 0x91
    43a8:	01000016 	tsteq	r0, r6, lsl r0
    43ac:	00e60225 	rsceq	r0, r6, r5, lsr #4
    43b0:	91020000 	mrsls	r0, (UNDEF: 2)
    43b4:	6d741d63 	ldclvs	13, cr1, [r4, #-396]!	; 0xfffffe74
    43b8:	27010070 	smlsdxcs	r1, r0, r0, r0
    43bc:	00009e02 	andeq	r9, r0, r2, lsl #28
    43c0:	70910200 	addsvc	r0, r1, r0, lsl #4
    43c4:	001e601c 	andseq	r6, lr, ip, lsl r0
    43c8:	02270100 	eoreq	r0, r7, #0, 2
    43cc:	0000009e 	muleq	r0, lr, r0
    43d0:	1c6c9102 	stfnep	f1, [ip], #-8
    43d4:	000019d2 	ldrdeq	r1, [r0], -r2
    43d8:	9e022701 	cdpls	7, 0, cr2, cr2, cr1, {0}
    43dc:	02000000 	andeq	r0, r0, #0
    43e0:	131c7491 	tstne	ip, #-1862270976	; 0x91000000
    43e4:	0100001e 	tsteq	r0, lr, lsl r0
    43e8:	009e0227 	addseq	r0, lr, r7, lsr #4
    43ec:	91020000 	mrsls	r0, (UNDEF: 2)
    43f0:	8f190068 	svchi	0x00190068
    43f4:	0100001d 	tsteq	r0, sp, lsl r0
    43f8:	00000261 	andeq	r0, r0, r1, ror #4
    43fc:	00840000 	addeq	r0, r4, r0
    4400:	9c010000 	stcls	0, cr0, [r1], {-0}
    4404:	00000699 	muleq	r0, r9, r6
    4408:	001d1f1a 	andseq	r1, sp, sl, lsl pc
    440c:	02610100 	rsbeq	r0, r1, #0, 2
    4410:	00000088 	andeq	r0, r0, r8, lsl #1
    4414:	1a6f9102 	bne	1be8824 <_Min_Stack_Size+0x1be8624>
    4418:	00001df1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    441c:	88026101 	stmdahi	r2, {r0, r8, sp, lr}
    4420:	02000000 	andeq	r0, r0, #0
    4424:	741d6e91 	ldrvc	r6, [sp], #-3729	; 0xfffff16f
    4428:	0100706d 	tsteq	r0, sp, rrx
    442c:	009e0263 	addseq	r0, lr, r3, ror #4
    4430:	91020000 	mrsls	r0, (UNDEF: 2)
    4434:	55190074 	ldrpl	r0, [r9, #-116]	; 0xffffff8c
    4438:	0100001f 	tsteq	r0, pc, lsl r0
    443c:	00000276 	andeq	r0, r0, r6, ror r2
    4440:	001c0000 	andseq	r0, ip, r0
    4444:	9c010000 	stcls	0, cr0, [r1], {-0}
    4448:	000006bf 			; <UNDEFINED> instruction: 0x000006bf
    444c:	001c9f1a 	andseq	r9, ip, sl, lsl pc
    4450:	02760100 	rsbseq	r0, r6, #0, 2
    4454:	0000009e 	muleq	r0, lr, r0
    4458:	00749102 	rsbseq	r9, r4, r2, lsl #2
    445c:	0002271e 	andeq	r2, r2, lr, lsl r7
    4460:	06ce0600 	strbeq	r0, [lr], r0, lsl #12
    4464:	000006cb 	andeq	r0, r0, fp, asr #13
    4468:	00007a05 	andeq	r7, r0, r5, lsl #20
    446c:	08d90000 	ldmeq	r9, {}^	; <UNPREDICTABLE>
    4470:	00040000 	andeq	r0, r4, r0
    4474:	000011a1 	andeq	r1, r0, r1, lsr #3
    4478:	01810104 	orreq	r0, r1, r4, lsl #2
    447c:	c1010000 	mrsgt	r0, (UNDEF: 1)
    4480:	1800001f 	stmdane	r0, {r0, r1, r2, r3, r4}
    4484:	00000005 	andeq	r0, r0, r5
    4488:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    448c:	02000022 	andeq	r0, r0, #34	; 0x22
    4490:	00c30601 	sbceq	r0, r3, r1, lsl #12
    4494:	93030000 	movwls	r0, #12288	; 0x3000
    4498:	02000000 	andeq	r0, r0, #0
    449c:	0000331d 	andeq	r3, r0, sp, lsl r3
    44a0:	08010200 	stmdaeq	r1, {r9}
    44a4:	000000c1 	andeq	r0, r0, r1, asr #1
    44a8:	51050202 	tstpl	r5, r2, lsl #4
    44ac:	03000000 	movweq	r0, #0
    44b0:	0000002e 	andeq	r0, r0, lr, lsr #32
    44b4:	004c2b02 	subeq	r2, ip, r2, lsl #22
    44b8:	02020000 	andeq	r0, r2, #0
    44bc:	00012307 	andeq	r2, r1, r7, lsl #6
    44c0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    44c4:	0000006d 	andeq	r0, r0, sp, rrx
    44c8:	00002303 	andeq	r2, r0, r3, lsl #6
    44cc:	65410200 	strbvs	r0, [r1, #-512]	; 0xfffffe00
    44d0:	02000000 	andeq	r0, r0, #0
    44d4:	00fa0704 	rscseq	r0, sl, r4, lsl #14
    44d8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    44dc:	00006805 	andeq	r6, r0, r5, lsl #16
    44e0:	07080200 	streq	r0, [r8, -r0, lsl #4]
    44e4:	000000f5 	strdeq	r0, [r0], -r5
    44e8:	69050404 	stmdbvs	r5, {r2, sl}
    44ec:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    44f0:	00ff0704 	rscseq	r0, pc, r4, lsl #14
    44f4:	95030000 	strls	r0, [r3, #-0]
    44f8:	03000000 	movweq	r0, #0
    44fc:	00002814 	andeq	r2, r0, r4, lsl r8
    4500:	00300300 	eorseq	r0, r0, r0, lsl #6
    4504:	1a030000 	bne	c450c <_Min_Stack_Size+0xc430c>
    4508:	00000041 	andeq	r0, r0, r1, asr #32
    450c:	00002503 	andeq	r2, r0, r3, lsl #10
    4510:	5a200300 	bpl	805118 <_Min_Stack_Size+0x804f18>
    4514:	02000000 	andeq	r0, r0, #0
    4518:	00150704 	andseq	r0, r5, r4, lsl #14
    451c:	93050000 	movwls	r0, #20480	; 0x5000
    4520:	06000000 	streq	r0, [r0], -r0
    4524:	02070401 	andeq	r0, r7, #16777216	; 0x1000000
    4528:	000000cb 	andeq	r0, r0, fp, asr #1
    452c:	001c8b07 	andseq	r8, ip, r7, lsl #22
    4530:	53080000 	movwpl	r0, #32768	; 0x8000
    4534:	01005445 	tsteq	r0, r5, asr #8
    4538:	2e7d0900 	cdpcs	9, 7, cr0, cr13, cr0, {0}
    453c:	07040000 	streq	r0, [r4, -r0]
    4540:	0000b502 	andeq	fp, r0, r2, lsl #10
    4544:	2f9b0900 	svccs	0x009b0900
    4548:	07040000 	streq	r0, [r4, -r0]
    454c:	0000b502 	andeq	fp, r0, r2, lsl #10
    4550:	04010600 	streq	r0, [r1], #-1536	; 0xfffffa00
    4554:	00f90209 	rscseq	r0, r9, r9, lsl #4
    4558:	fb070000 	blx	1c4562 <_Min_Stack_Size+0x1c4362>
    455c:	00000002 	andeq	r0, r0, r2
    4560:	00046107 	andeq	r6, r4, r7, lsl #2
    4564:	09000100 	stmdbeq	r0, {r8}
    4568:	000017ad 	andeq	r1, r0, sp, lsr #15
    456c:	e3020904 	movw	r0, #10500	; 0x2904
    4570:	0a000000 	beq	4578 <_Min_Stack_Size+0x4378>
    4574:	04880424 	streq	r0, [r8], #1060	; 0x424
    4578:	000001f7 	strdeq	r0, [r0], -r7
    457c:	3152430b 	cmpcc	r2, fp, lsl #6
    4580:	048a0400 	streq	r0, [sl], #1024	; 0x400
    4584:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    4588:	03c10c00 	biceq	r0, r1, #0, 24
    458c:	8b040000 	blhi	104594 <_Min_Stack_Size+0x104394>
    4590:	00009304 	andeq	r9, r0, r4, lsl #6
    4594:	430b0200 	movwmi	r0, #45568	; 0xb200
    4598:	04003252 	streq	r3, [r0], #-594	; 0xfffffdae
    459c:	00b0048c 	adcseq	r0, r0, ip, lsl #9
    45a0:	0c040000 	stceq	0, cr0, [r4], {-0}
    45a4:	000003cb 	andeq	r0, r0, fp, asr #7
    45a8:	93048d04 	movwls	r8, #19716	; 0x4d04
    45ac:	06000000 	streq	r0, [r0], -r0
    45b0:	0052530b 	subseq	r5, r2, fp, lsl #6
    45b4:	b0048e04 	andlt	r8, r4, r4, lsl #28
    45b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    45bc:	0003d50c 	andeq	sp, r3, ip, lsl #10
    45c0:	048f0400 	streq	r0, [pc], #1024	; 45c8 <_Min_Stack_Size+0x43c8>
    45c4:	00000093 	muleq	r0, r3, r0
    45c8:	52440b0a 	subpl	r0, r4, #10240	; 0x2800
    45cc:	04900400 	ldreq	r0, [r0], #1024	; 0x400
    45d0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    45d4:	02b60c0c 	adcseq	r0, r6, #12, 24	; 0xc00
    45d8:	91040000 	mrsls	r0, (UNDEF: 4)
    45dc:	00009304 	andeq	r9, r0, r4, lsl #6
    45e0:	bb0c0e00 	bllt	307de8 <_Min_Stack_Size+0x307be8>
    45e4:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    45e8:	00b00492 	umlalseq	r0, r0, r2, r4	; <UNPREDICTABLE>
    45ec:	0c100000 	ldceq	0, cr0, [r0], {-0}
    45f0:	000003e9 	andeq	r0, r0, r9, ror #7
    45f4:	93049304 	movwls	r9, #17156	; 0x4304
    45f8:	12000000 	andne	r0, r0, #0
    45fc:	0020820c 	eoreq	r8, r0, ip, lsl #4
    4600:	04940400 	ldreq	r0, [r4], #1024	; 0x400
    4604:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    4608:	03f30c14 	mvnseq	r0, #20, 24	; 0x1400
    460c:	95040000 	strls	r0, [r4, #-0]
    4610:	00009304 	andeq	r9, r0, r4, lsl #6
    4614:	650c1600 	strvs	r1, [ip, #-1536]	; 0xfffffa00
    4618:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    461c:	00b00496 	umlalseq	r0, r0, r6, r4	; <UNPREDICTABLE>
    4620:	0c180000 	ldceq	0, cr0, [r8], {-0}
    4624:	000002e2 	andeq	r0, r0, r2, ror #5
    4628:	93049704 	movwls	r9, #18180	; 0x4704
    462c:	1a000000 	bne	4634 <_Min_Stack_Size+0x4434>
    4630:	00219f0c 	eoreq	r9, r1, ip, lsl #30
    4634:	04980400 	ldreq	r0, [r8], #1024	; 0x400
    4638:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    463c:	04140c1c 	ldreq	r0, [r4], #-3100	; 0xfffff3e4
    4640:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    4644:	00009304 	andeq	r9, r0, r4, lsl #6
    4648:	ad0c1e00 	stcge	14, cr1, [ip, #-0]
    464c:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    4650:	00b0049a 	umlalseq	r0, r0, sl, r4	; <UNPREDICTABLE>
    4654:	0c200000 	stceq	0, cr0, [r0], #-0
    4658:	0000041e 	andeq	r0, r0, lr, lsl r4
    465c:	93049b04 	movwls	r9, #19204	; 0x4b04
    4660:	22000000 	andcs	r0, r0, #0
    4664:	21ca0900 	biccs	r0, sl, r0, lsl #18
    4668:	9c040000 	stcls	0, cr0, [r4], {-0}
    466c:	00010504 	andeq	r0, r1, r4, lsl #10
    4670:	05140d00 	ldreq	r0, [r4, #-3328]	; 0xfffff300
    4674:	0002482e 	andeq	r4, r2, lr, lsr #16
    4678:	1aab0e00 	bne	feac7e80 <BootRAM+0xda38621>
    467c:	30050000 	andcc	r0, r5, r0
    4680:	0000009e 	muleq	r0, lr, r0
    4684:	18d80e00 	ldmne	r8, {r9, sl, fp}^
    4688:	31050000 	mrscc	r0, (UNDEF: 5)
    468c:	0000009e 	muleq	r0, lr, r0
    4690:	1b250e04 	blne	947ea8 <_Min_Stack_Size+0x947ca8>
    4694:	32050000 	andcc	r0, r5, #0
    4698:	0000009e 	muleq	r0, lr, r0
    469c:	1ac70e08 	bne	ff1c7ec4 <BootRAM+0xe138665>
    46a0:	33050000 	movwcc	r0, #20480	; 0x5000
    46a4:	0000009e 	muleq	r0, lr, r0
    46a8:	1a8c0e0c 	bne	fe307ee0 <BootRAM+0xd278681>
    46ac:	34050000 	strcc	r0, [r5], #-0
    46b0:	0000009e 	muleq	r0, lr, r0
    46b4:	a5030010 	strge	r0, [r3, #-16]
    46b8:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    46bc:	00020335 	andeq	r0, r2, r5, lsr r3
    46c0:	06120d00 	ldreq	r0, [r2], -r0, lsl #26
    46c4:	0002c832 	andeq	ip, r2, r2, lsr r8
    46c8:	1f8b0e00 	svcne	0x008b0e00
    46cc:	34060000 	strcc	r0, [r6], #-0
    46d0:	00000093 	muleq	r0, r3, r0
    46d4:	21c10e00 	biccs	r0, r1, r0, lsl #28
    46d8:	37060000 	strcc	r0, [r6, -r0]
    46dc:	00000093 	muleq	r0, r3, r0
    46e0:	1fb40e02 	svcne	0x00b40e02
    46e4:	3a060000 	bcc	1846ec <_Min_Stack_Size+0x1844ec>
    46e8:	00000093 	muleq	r0, r3, r0
    46ec:	228c0e04 	addcs	r0, ip, #4, 28	; 0x40
    46f0:	3d060000 	stccc	0, cr0, [r6, #-0]
    46f4:	00000093 	muleq	r0, r3, r0
    46f8:	1f820e06 	svcne	0x00820e06
    46fc:	40060000 	andmi	r0, r6, r0
    4700:	00000093 	muleq	r0, r3, r0
    4704:	204e0e08 	subcs	r0, lr, r8, lsl #28
    4708:	43060000 	movwmi	r0, #24576	; 0x6000
    470c:	00000093 	muleq	r0, r3, r0
    4710:	206c0e0a 	rsbcs	r0, ip, sl, lsl #28
    4714:	47060000 	strmi	r0, [r6, -r0]
    4718:	00000093 	muleq	r0, r3, r0
    471c:	201a0e0c 	andscs	r0, sl, ip, lsl #28
    4720:	4d060000 	stcmi	0, cr0, [r6, #-0]
    4724:	00000093 	muleq	r0, r3, r0
    4728:	22ba0e0e 	adcscs	r0, sl, #14, 28	; 0xe0
    472c:	50060000 	andpl	r0, r6, r0
    4730:	00000093 	muleq	r0, r3, r0
    4734:	cc030010 	stcgt	0, cr0, [r3], {16}
    4738:	06000022 	streq	r0, [r0], -r2, lsr #32
    473c:	00025351 	andeq	r5, r2, r1, asr r3
    4740:	06100d00 	ldreq	r0, [r0], -r0, lsl #26
    4744:	00032457 	andeq	r2, r3, r7, asr r4
    4748:	22510e00 	subscs	r0, r1, #0, 28
    474c:	5a060000 	bpl	184754 <_Min_Stack_Size+0x184554>
    4750:	00000093 	muleq	r0, r3, r0
    4754:	20040e00 	andcs	r0, r4, r0, lsl #28
    4758:	5d060000 	stcpl	0, cr0, [r6, #-0]
    475c:	00000093 	muleq	r0, r3, r0
    4760:	21630e02 	cmncs	r3, r2, lsl #28
    4764:	60060000 	andvs	r0, r6, r0
    4768:	00000093 	muleq	r0, r3, r0
    476c:	211b0e04 	tstcs	fp, r4, lsl #28
    4770:	63060000 	movwvs	r0, #24576	; 0x6000
    4774:	00000093 	muleq	r0, r3, r0
    4778:	210d0e06 	tstcs	sp, r6, lsl #28
    477c:	66060000 	strvs	r0, [r6], -r0
    4780:	0000009e 	muleq	r0, lr, r0
    4784:	20270e08 	eorcs	r0, r7, r8, lsl #28
    4788:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    478c:	00000093 	muleq	r0, r3, r0
    4790:	a403000c 	strge	r0, [r3], #-12
    4794:	06000020 	streq	r0, [r0], -r0, lsr #32
    4798:	0002d36b 	andeq	sp, r2, fp, ror #6
    479c:	21720f00 	cmncs	r2, r0, lsl #30
    47a0:	77010000 	strvc	r0, [r1, -r0]
    47a4:	00000000 	andeq	r0, r0, r0
    47a8:	00000074 	andeq	r0, r0, r4, ror r0
    47ac:	03539c01 	cmpeq	r3, #256	; 0x100
    47b0:	70100000 	andsvc	r0, r0, r0
    47b4:	01000022 	tsteq	r0, r2, lsr #32
    47b8:	00035377 	andeq	r5, r3, r7, ror r3
    47bc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    47c0:	f7041100 			; <UNDEFINED> instruction: 0xf7041100
    47c4:	12000001 	andne	r0, r0, #1
    47c8:	00002011 	andeq	r2, r0, r1, lsl r0
    47cc:	4b989e01 	blmi	fe62bfd8 <BootRAM+0xd59c779>
    47d0:	00860800 	addeq	r0, r6, r0, lsl #16
    47d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    47d8:	00000399 	muleq	r0, r9, r3
    47dc:	00227010 	eoreq	r7, r2, r0, lsl r0
    47e0:	539e0100 	orrspl	r0, lr, #0, 2
    47e4:	02000003 	andeq	r0, r0, #3
    47e8:	dc106c91 	ldcle	12, cr6, [r0], {145}	; 0x91
    47ec:	01000022 	tsteq	r0, r2, lsr #32
    47f0:	0003999e 	muleq	r3, lr, r9
    47f4:	68910200 	ldmvs	r1, {r9}
    47f8:	0019d213 	andseq	sp, r9, r3, lsl r2
    47fc:	93a00100 	movls	r0, #0, 2
    4800:	02000000 	andeq	r0, r0, #0
    4804:	11007691 			; <UNDEFINED> instruction: 0x11007691
    4808:	0002c804 	andeq	ip, r2, r4, lsl #16
    480c:	20c10f00 	sbccs	r0, r1, r0, lsl #30
    4810:	db010000 	blle	44818 <_Min_Stack_Size+0x44618>
    4814:	00000000 	andeq	r0, r0, r0
    4818:	00000164 	andeq	r0, r0, r4, ror #2
    481c:	04339c01 	ldrteq	r9, [r3], #-3073	; 0xfffff3ff
    4820:	70100000 	andsvc	r0, r0, r0
    4824:	01000022 	tsteq	r0, r2, lsr #32
    4828:	000353db 	ldrdeq	r5, [r3], -fp
    482c:	4c910200 	lfmmi	f0, 4, [r1], {0}
    4830:	00209510 	eoreq	r9, r0, r0, lsl r5
    4834:	33db0100 	bicscc	r0, fp, #0, 2
    4838:	02000004 	andeq	r0, r0, #4
    483c:	d2134891 	andsle	r4, r3, #9502720	; 0x910000
    4840:	01000019 	tsteq	r0, r9, lsl r0
    4844:	000093dd 	ldrdeq	r9, [r0], -sp
    4848:	6a910200 	bvs	fe445050 <BootRAM+0xd3b57f1>
    484c:	0020f513 	eoreq	pc, r0, r3, lsl r5	; <UNPREDICTABLE>
    4850:	93dd0100 	bicsls	r0, sp, #0, 2
    4854:	02000000 	andeq	r0, r0, #0
    4858:	75137691 	ldrvc	r7, [r3, #-1681]	; 0xfffff96f
    485c:	01000022 	tsteq	r0, r2, lsr #32
    4860:	000093dd 	ldrdeq	r9, [r0], -sp
    4864:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4868:	00203013 	eoreq	r3, r0, r3, lsl r0
    486c:	93dd0100 	bicsls	r0, sp, #0, 2
    4870:	02000000 	andeq	r0, r0, #0
    4874:	74147291 	ldrvc	r7, [r4], #-657	; 0xfffffd6f
    4878:	0100706d 	tsteq	r0, sp, rrx
    487c:	00009ede 	ldrdeq	r9, [r0], -lr
    4880:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4884:	001abc13 	andseq	fp, sl, r3, lsl ip
    4888:	48df0100 	ldmmi	pc, {r8}^	; <UNPREDICTABLE>
    488c:	02000002 	andeq	r0, r0, #2
    4890:	89135091 	ldmdbhi	r3, {r0, r4, r7, ip, lr}
    4894:	01000020 	tsteq	r0, r0, lsr #32
    4898:	00009ee0 	andeq	r9, r0, r0, ror #29
    489c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    48a0:	24041100 	strcs	r1, [r4], #-256	; 0xffffff00
    48a4:	15000003 	strne	r0, [r0, #-3]
    48a8:	00002218 	andeq	r2, r0, r8, lsl r2
    48ac:	00017201 	andeq	r7, r1, r1, lsl #4
    48b0:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    48b4:	01000000 	mrseq	r0, (UNDEF: 0)
    48b8:	00045f9c 	muleq	r4, ip, pc	; <UNPREDICTABLE>
    48bc:	22dc1600 	sbcscs	r1, ip, #0, 12
    48c0:	72010000 	andvc	r0, r1, #0
    48c4:	00039901 	andeq	r9, r3, r1, lsl #18
    48c8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    48cc:	20ca1500 	sbccs	r1, sl, r0, lsl #10
    48d0:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    48d4:	00000001 	andeq	r0, r0, r1
    48d8:	00003600 	andeq	r3, r0, r0, lsl #12
    48dc:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
    48e0:	16000004 	strne	r0, [r0], -r4
    48e4:	00002095 	muleq	r0, r5, r0
    48e8:	33018e01 	movwcc	r8, #7681	; 0x1e01
    48ec:	02000004 	andeq	r0, r0, #4
    48f0:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    48f4:	0000213d 	andeq	r2, r0, sp, lsr r1
    48f8:	2001ab01 	andcs	sl, r1, r1, lsl #22
    48fc:	3e08004c 	cdpcc	0, 0, cr0, cr8, cr12, {2}
    4900:	01000000 	mrseq	r0, (UNDEF: 0)
    4904:	0004ba9c 	muleq	r4, ip, sl
    4908:	22701600 	rsbscs	r1, r0, #0, 12
    490c:	ab010000 	blge	44914 <_Min_Stack_Size+0x44714>
    4910:	00035301 	andeq	r5, r3, r1, lsl #6
    4914:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4918:	0016ec16 	andseq	lr, r6, r6, lsl ip
    491c:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    4920:	000000f9 	strdeq	r0, [r0], -r9
    4924:	00739102 	rsbseq	r9, r3, r2, lsl #2
    4928:	00221015 	eoreq	r1, r2, r5, lsl r0
    492c:	01c30100 	biceq	r0, r3, r0, lsl #2
    4930:	00000000 	andeq	r0, r0, r0
    4934:	0000003e 	andeq	r0, r0, lr, lsr r0
    4938:	04ef9c01 	strbteq	r9, [pc], #3073	; 4940 <_Min_Stack_Size+0x4740>
    493c:	70160000 	andsvc	r0, r6, r0
    4940:	01000022 	tsteq	r0, r2, lsr #32
    4944:	035301c3 	cmpeq	r3, #-1073741776	; 0xc0000030
    4948:	91020000 	mrsls	r0, (UNDEF: 2)
    494c:	16ec1674 			; <UNDEFINED> instruction: 0x16ec1674
    4950:	c3010000 	movwgt	r0, #4096	; 0x1000
    4954:	0000f901 	andeq	pc, r0, r1, lsl #18
    4958:	73910200 	orrsvc	r0, r1, #0, 4
    495c:	20fc1500 	rscscs	r1, ip, r0, lsl #10
    4960:	e2010000 	and	r0, r1, #0
    4964:	00000001 	andeq	r0, r0, r1
    4968:	00006000 	andeq	r6, r0, r0
    496c:	519c0100 	orrspl	r0, ip, r0, lsl #2
    4970:	16000005 	strne	r0, [r0], -r5
    4974:	00002270 	andeq	r2, r0, r0, ror r2
    4978:	5301e201 	movwpl	lr, #4609	; 0x1201
    497c:	02000003 	andeq	r0, r0, #3
    4980:	32166c91 	andscc	r6, r6, #37120	; 0x9100
    4984:	01000021 	tsteq	r0, r1, lsr #32
    4988:	008801e2 	addeq	r0, r8, r2, ror #3
    498c:	91020000 	mrsls	r0, (UNDEF: 2)
    4990:	16ec166b 	strbtne	r1, [ip], fp, ror #12
    4994:	e2010000 	and	r0, r1, #0
    4998:	0000f901 	andeq	pc, r0, r1, lsl #18
    499c:	6a910200 	bvs	fe4451a4 <BootRAM+0xd3b5945>
    49a0:	001fae17 	andseq	sl, pc, r7, lsl lr	; <UNPREDICTABLE>
    49a4:	01e40100 	mvneq	r0, r0, lsl #2
    49a8:	00000093 	muleq	r0, r3, r0
    49ac:	17769102 	ldrbne	r9, [r6, -r2, lsl #2]!
    49b0:	00002295 	muleq	r0, r5, r2
    49b4:	9301e401 	movwls	lr, #5121	; 0x1401
    49b8:	02000000 	andeq	r0, r0, #0
    49bc:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    49c0:	00001f73 	andeq	r1, r0, r3, ror pc
    49c4:	00020901 	andeq	r0, r2, r1, lsl #18
    49c8:	46000000 	strmi	r0, [r0], -r0
    49cc:	01000000 	mrseq	r0, (UNDEF: 0)
    49d0:	0005959c 	muleq	r5, ip, r5
    49d4:	22701600 	rsbscs	r1, r0, #0, 12
    49d8:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    49dc:	00035302 	andeq	r5, r3, r2, lsl #6
    49e0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    49e4:	00205616 	eoreq	r5, r0, r6, lsl r6
    49e8:	02090100 	andeq	r0, r9, #0, 2
    49ec:	00000093 	muleq	r0, r3, r0
    49f0:	16729102 	ldrbtne	r9, [r2], -r2, lsl #2
    49f4:	000016ec 	andeq	r1, r0, ip, ror #13
    49f8:	f9020901 			; <UNDEFINED> instruction: 0xf9020901
    49fc:	02000000 	andeq	r0, r0, #0
    4a00:	15007191 	strne	r7, [r0, #-401]	; 0xfffffe6f
    4a04:	0000203d 	andeq	r2, r0, sp, lsr r0
    4a08:	60022301 	andvs	r2, r2, r1, lsl #6
    4a0c:	1c08004c 	stcne	0, cr0, [r8], {76}	; 0x4c
    4a10:	01000000 	mrseq	r0, (UNDEF: 0)
    4a14:	0005ca9c 	muleq	r5, ip, sl
    4a18:	22701600 	rsbscs	r1, r0, #0, 12
    4a1c:	23010000 	movwcs	r0, #4096	; 0x1000
    4a20:	00035302 	andeq	r5, r3, r2, lsl #6
    4a24:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4a28:	0031b116 	eorseq	fp, r1, r6, lsl r1
    4a2c:	02230100 	eoreq	r0, r3, #0, 2
    4a30:	00000093 	muleq	r0, r3, r0
    4a34:	00729102 	rsbseq	r9, r2, r2, lsl #2
    4a38:	0021d618 	eoreq	sp, r1, r8, lsl r6
    4a3c:	02330100 	eorseq	r0, r3, #0, 2
    4a40:	00000093 	muleq	r0, r3, r0
    4a44:	08004c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, lr}
    4a48:	0000001a 	andeq	r0, r0, sl, lsl r0
    4a4c:	05f49c01 	ldrbeq	r9, [r4, #3073]!	; 0xc01
    4a50:	70160000 	andsvc	r0, r6, r0
    4a54:	01000022 	tsteq	r0, r2, lsr #32
    4a58:	03530233 	cmpeq	r3, #805306371	; 0x30000003
    4a5c:	91020000 	mrsls	r0, (UNDEF: 2)
    4a60:	81150074 	tsthi	r5, r4, ror r0
    4a64:	01000021 	tsteq	r0, r1, lsr #32
    4a68:	00000245 	andeq	r0, r0, r5, asr #4
    4a6c:	00420000 	subeq	r0, r2, r0
    4a70:	9c010000 	stcls	0, cr0, [r1], {-0}
    4a74:	00000629 	andeq	r0, r0, r9, lsr #12
    4a78:	00227016 	eoreq	r7, r2, r6, lsl r0
    4a7c:	02450100 	subeq	r0, r5, #0, 2
    4a80:	00000353 	andeq	r0, r0, r3, asr r3
    4a84:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    4a88:	000021ea 	andeq	r2, r0, sl, ror #3
    4a8c:	93024501 	movwls	r4, #9473	; 0x2501
    4a90:	02000000 	andeq	r0, r0, #0
    4a94:	15007291 	strne	r7, [r0, #-657]	; 0xfffffd6f
    4a98:	00002241 	andeq	r2, r0, r1, asr #4
    4a9c:	00025d01 	andeq	r5, r2, r1, lsl #26
    4aa0:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    4aa4:	01000000 	mrseq	r0, (UNDEF: 0)
    4aa8:	00065e9c 	muleq	r6, ip, lr
    4aac:	22701600 	rsbscs	r1, r0, #0, 12
    4ab0:	5d010000 	stcpl	0, cr0, [r1, #-0]
    4ab4:	00035302 	andeq	r5, r3, r2, lsl #6
    4ab8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4abc:	0016ec16 	andseq	lr, r6, r6, lsl ip
    4ac0:	025d0100 	subseq	r0, sp, #0, 2
    4ac4:	000000f9 	strdeq	r0, [r0], -r9
    4ac8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    4acc:	00215015 	eoreq	r5, r1, r5, lsl r0
    4ad0:	02770100 	rsbseq	r0, r7, #0, 2
    4ad4:	00000000 	andeq	r0, r0, r0
    4ad8:	00000036 	andeq	r0, r0, r6, lsr r0
    4adc:	06939c01 	ldreq	r9, [r3], r1, lsl #24
    4ae0:	70160000 	andsvc	r0, r6, r0
    4ae4:	01000022 	tsteq	r0, r2, lsr #32
    4ae8:	03530277 	cmpeq	r3, #1879048199	; 0x70000007
    4aec:	91020000 	mrsls	r0, (UNDEF: 2)
    4af0:	1fb41674 	svcne	0x00b41674
    4af4:	77010000 	strvc	r0, [r1, -r0]
    4af8:	00009302 	andeq	r9, r0, r2, lsl #6
    4afc:	72910200 	addsvc	r0, r1, #0, 4
    4b00:	227c1500 	rsbscs	r1, ip, #0, 10
    4b04:	87010000 	strhi	r0, [r1, -r0]
    4b08:	00000002 	andeq	r0, r0, r2
    4b0c:	00002200 	andeq	r2, r0, r0, lsl #4
    4b10:	b99c0100 	ldmiblt	ip, {r8}
    4b14:	16000006 	strne	r0, [r0], -r6
    4b18:	00002270 	andeq	r2, r0, r0, ror r2
    4b1c:	53028701 	movwpl	r8, #9985	; 0x2701
    4b20:	02000003 	andeq	r0, r0, #3
    4b24:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    4b28:	0000229c 	muleq	r0, ip, r2
    4b2c:	00029701 	andeq	r9, r2, r1, lsl #14
    4b30:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    4b34:	01000000 	mrseq	r0, (UNDEF: 0)
    4b38:	0006ee9c 	muleq	r6, ip, lr
    4b3c:	22701600 	rsbscs	r1, r0, #0, 12
    4b40:	97010000 	strls	r0, [r1, -r0]
    4b44:	00035302 	andeq	r5, r3, r2, lsl #6
    4b48:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4b4c:	0016ec16 	andseq	lr, r6, r6, lsl ip
    4b50:	02970100 	addseq	r0, r7, #0, 2
    4b54:	000000f9 	strdeq	r0, [r0], -r9
    4b58:	00739102 	rsbseq	r9, r3, r2, lsl #2
    4b5c:	00214518 	eoreq	r4, r1, r8, lsl r5
    4b60:	02b10100 	adcseq	r0, r1, #0, 2
    4b64:	00000093 	muleq	r0, r3, r0
    4b68:	00000000 	andeq	r0, r0, r0
    4b6c:	00000032 	andeq	r0, r0, r2, lsr r0
    4b70:	07369c01 	ldreq	r9, [r6, -r1, lsl #24]!
    4b74:	70160000 	andsvc	r0, r6, r0
    4b78:	01000022 	tsteq	r0, r2, lsr #32
    4b7c:	035302b1 	cmpeq	r3, #268435467	; 0x1000000b
    4b80:	91020000 	mrsls	r0, (UNDEF: 2)
    4b84:	212a166c 			; <UNDEFINED> instruction: 0x212a166c
    4b88:	b1010000 	mrslt	r0, (UNDEF: 1)
    4b8c:	00008802 	andeq	r8, r0, r2, lsl #16
    4b90:	6b910200 	blvs	fe445398 <BootRAM+0xd3b5b39>
    4b94:	0022b317 	eoreq	fp, r2, r7, lsl r3
    4b98:	02b30100 	adcseq	r0, r3, #0, 2
    4b9c:	00000093 	muleq	r0, r3, r0
    4ba0:	00769102 	rsbseq	r9, r6, r2, lsl #2
    4ba4:	001f9918 	andseq	r9, pc, r8, lsl r9	; <UNPREDICTABLE>
    4ba8:	02ca0100 	sbceq	r0, sl, #0, 2
    4bac:	00000093 	muleq	r0, r3, r0
    4bb0:	00000000 	andeq	r0, r0, r0
    4bb4:	0000001a 	andeq	r0, r0, sl, lsl r0
    4bb8:	07609c01 	strbeq	r9, [r0, -r1, lsl #24]!
    4bbc:	70160000 	andsvc	r0, r6, r0
    4bc0:	01000022 	tsteq	r0, r2, lsr #32
    4bc4:	035302ca 	cmpeq	r3, #-1610612724	; 0xa000000c
    4bc8:	91020000 	mrsls	r0, (UNDEF: 2)
    4bcc:	d9150074 	ldmdble	r5, {r2, r4, r5, r6}
    4bd0:	01000020 	tsteq	r0, r0, lsr #32
    4bd4:	000002dc 	ldrdeq	r0, [r0], -ip
    4bd8:	00400000 	subeq	r0, r0, r0
    4bdc:	9c010000 	stcls	0, cr0, [r1], {-0}
    4be0:	00000795 	muleq	r0, r5, r7
    4be4:	00227016 	eoreq	r7, r2, r6, lsl r0
    4be8:	02dc0100 	sbcseq	r0, ip, #0, 2
    4bec:	00000353 	andeq	r0, r0, r3, asr r3
    4bf0:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    4bf4:	00001f8b 	andeq	r1, r0, fp, lsl #31
    4bf8:	9302dc01 	movwls	sp, #11265	; 0x2c01
    4bfc:	02000000 	andeq	r0, r0, #0
    4c00:	18007291 	stmdane	r0, {r0, r4, r7, r9, ip, sp, lr}
    4c04:	0000225a 	andeq	r2, r0, sl, asr r2
    4c08:	cb02fe01 	blgt	c4414 <_Min_Stack_Size+0xc4214>
    4c0c:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    4c10:	3808004c 	stmdacc	r8, {r2, r3, r6}
    4c14:	01000000 	mrseq	r0, (UNDEF: 0)
    4c18:	0007dd9c 	muleq	r7, ip, sp
    4c1c:	22701600 	rsbscs	r1, r0, #0, 12
    4c20:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    4c24:	00035302 	andeq	r5, r3, r2, lsl #6
    4c28:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4c2c:	001ff716 	andseq	pc, pc, r6, lsl r7	; <UNPREDICTABLE>
    4c30:	02fe0100 	rscseq	r0, lr, #0, 2
    4c34:	00000093 	muleq	r0, r3, r0
    4c38:	176a9102 	strbne	r9, [sl, -r2, lsl #2]!
    4c3c:	000019d9 	ldrdeq	r1, [r0], -r9
    4c40:	cb030001 	blgt	c4c4c <_Min_Stack_Size+0xc4a4c>
    4c44:	02000000 	andeq	r0, r0, #0
    4c48:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
    4c4c:	000021fe 	strdeq	r2, [r0], -lr
    4c50:	00032401 	andeq	r2, r3, r1, lsl #8
    4c54:	20000000 	andcs	r0, r0, r0
    4c58:	01000000 	mrseq	r0, (UNDEF: 0)
    4c5c:	0008129c 	muleq	r8, ip, r2
    4c60:	22701600 	rsbscs	r1, r0, #0, 12
    4c64:	24010000 	strcs	r0, [r1], #-0
    4c68:	00035303 	andeq	r5, r3, r3, lsl #6
    4c6c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4c70:	001ff716 	andseq	pc, pc, r6, lsl r7	; <UNPREDICTABLE>
    4c74:	03240100 			; <UNDEFINED> instruction: 0x03240100
    4c78:	00000093 	muleq	r0, r3, r0
    4c7c:	00729102 	rsbseq	r9, r2, r2, lsl #2
    4c80:	0021a718 	eoreq	sl, r1, r8, lsl r7
    4c84:	033d0100 	teqeq	sp, #0, 2
    4c88:	000000d7 	ldrdeq	r0, [r0], -r7
    4c8c:	00000000 	andeq	r0, r0, r0
    4c90:	00000076 	andeq	r0, r0, r6, ror r0
    4c94:	08879c01 	stmeq	r7, {r0, sl, fp, ip, pc}
    4c98:	70160000 	andsvc	r0, r6, r0
    4c9c:	01000022 	tsteq	r0, r2, lsr #32
    4ca0:	0353033d 	cmpeq	r3, #-201326592	; 0xf4000000
    4ca4:	91020000 	mrsls	r0, (UNDEF: 2)
    4ca8:	2132166c 	teqcs	r2, ip, ror #12
    4cac:	3d010000 	stccc	0, cr0, [r1, #-0]
    4cb0:	00008803 	andeq	r8, r0, r3, lsl #16
    4cb4:	6b910200 	blvs	fe4454bc <BootRAM+0xd3b5c5d>
    4cb8:	0019d917 	andseq	sp, r9, r7, lsl r9
    4cbc:	033f0100 	teqeq	pc, #0, 2
    4cc0:	000000d7 	ldrdeq	r0, [r0], -r7
    4cc4:	17779102 	ldrbne	r9, [r7, -r2, lsl #2]!
    4cc8:	00001fae 	andeq	r1, r0, lr, lsr #31
    4ccc:	93034001 	movwls	r4, #12289	; 0x3001
    4cd0:	02000000 	andeq	r0, r0, #0
    4cd4:	95177491 	ldrls	r7, [r7, #-1169]	; 0xfffffb6f
    4cd8:	01000022 	tsteq	r0, r2, lsr #32
    4cdc:	00930340 	addseq	r0, r3, r0, asr #6
    4ce0:	91020000 	mrsls	r0, (UNDEF: 2)
    4ce4:	20b41772 	adcscs	r1, r4, r2, ror r7
    4ce8:	40010000 	andmi	r0, r1, r0
    4cec:	00009303 	andeq	r9, r0, r3, lsl #6
    4cf0:	70910200 	addsvc	r0, r1, r0, lsl #4
    4cf4:	22271500 	eorcs	r1, r7, #0, 10
    4cf8:	73010000 	movwvc	r0, #4096	; 0x1000
    4cfc:	00000003 	andeq	r0, r0, r3
    4d00:	00003200 	andeq	r3, r0, r0, lsl #4
    4d04:	cb9c0100 	blgt	fe70510c <BootRAM+0xd6758ad>
    4d08:	16000008 	strne	r0, [r0], -r8
    4d0c:	00002270 	andeq	r2, r0, r0, ror r2
    4d10:	53037301 	movwpl	r7, #13057	; 0x3301
    4d14:	02000003 	andeq	r0, r0, #3
    4d18:	32166c91 	andscc	r6, r6, #37120	; 0x9100
    4d1c:	01000021 	tsteq	r0, r1, lsr #32
    4d20:	00880373 	addeq	r0, r8, r3, ror r3
    4d24:	91020000 	mrsls	r0, (UNDEF: 2)
    4d28:	1fae176b 	svcne	0x00ae176b
    4d2c:	75010000 	strvc	r0, [r1, #-0]
    4d30:	00009303 	andeq	r9, r0, r3, lsl #6
    4d34:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    4d38:	02271900 	eoreq	r1, r7, #0, 18
    4d3c:	ce070000 	cdpgt	0, 0, cr0, cr7, cr0, {0}
    4d40:	0008d706 	andeq	sp, r8, r6, lsl #14
    4d44:	007a0500 	rsbseq	r0, sl, r0, lsl #10
    4d48:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    4d4c:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    4d50:	00131f00 	andseq	r1, r3, r0, lsl #30
    4d54:	81010400 	tsthi	r1, r0, lsl #8
    4d58:	01000001 	tsteq	r0, r1
    4d5c:	00002321 	andeq	r2, r0, r1, lsr #6
    4d60:	000005d8 	ldrdeq	r0, [r0], -r8
    4d64:	00000000 	andeq	r0, r0, r0
    4d68:	000025e1 	andeq	r2, r0, r1, ror #11
    4d6c:	c3060102 	movwgt	r0, #24834	; 0x6102
    4d70:	03000000 	movweq	r0, #0
    4d74:	00000093 	muleq	r0, r3, r0
    4d78:	00331d02 	eorseq	r1, r3, r2, lsl #26
    4d7c:	01020000 	mrseq	r0, (UNDEF: 2)
    4d80:	0000c108 	andeq	ip, r0, r8, lsl #2
    4d84:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    4d88:	00000051 	andeq	r0, r0, r1, asr r0
    4d8c:	00002e03 	andeq	r2, r0, r3, lsl #28
    4d90:	4c2b0200 	sfmmi	f0, 4, [fp], #-0
    4d94:	02000000 	andeq	r0, r0, #0
    4d98:	01230702 			; <UNDEFINED> instruction: 0x01230702
    4d9c:	04020000 	streq	r0, [r2], #-0
    4da0:	00006d05 	andeq	r6, r0, r5, lsl #26
    4da4:	00230300 	eoreq	r0, r3, r0, lsl #6
    4da8:	41020000 	mrsmi	r0, (UNDEF: 2)
    4dac:	00000065 	andeq	r0, r0, r5, rrx
    4db0:	fa070402 	blx	1c5dc0 <_Min_Stack_Size+0x1c5bc0>
    4db4:	02000000 	andeq	r0, r0, #0
    4db8:	00680508 	rsbeq	r0, r8, r8, lsl #10
    4dbc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4dc0:	0000f507 	andeq	pc, r0, r7, lsl #10
    4dc4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    4dc8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    4dcc:	ff070402 			; <UNDEFINED> instruction: 0xff070402
    4dd0:	03000000 	movweq	r0, #0
    4dd4:	00000095 	muleq	r0, r5, r0
    4dd8:	00281403 	eoreq	r1, r8, r3, lsl #8
    4ddc:	30030000 	andcc	r0, r3, r0
    4de0:	03000000 	movweq	r0, #0
    4de4:	0000411a 	andeq	r4, r0, sl, lsl r1
    4de8:	00250300 	eoreq	r0, r5, r0, lsl #6
    4dec:	20030000 	andcs	r0, r3, r0
    4df0:	0000005a 	andeq	r0, r0, sl, asr r0
    4df4:	15070402 	strne	r0, [r7, #-1026]	; 0xfffffbfe
    4df8:	05000000 	streq	r0, [r0, #-0]
    4dfc:	00000093 	muleq	r0, r3, r0
    4e00:	07040106 	streq	r0, [r4, -r6, lsl #2]
    4e04:	0000cb02 	andeq	ip, r0, r2, lsl #22
    4e08:	1c8b0700 	stcne	7, cr0, [fp], {0}
    4e0c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4e10:	00544553 	subseq	r4, r4, r3, asr r5
    4e14:	7d090001 	stcvc	0, cr0, [r9, #-4]
    4e18:	0400002e 	streq	r0, [r0], #-46	; 0xffffffd2
    4e1c:	00b50207 	adcseq	r0, r5, r7, lsl #4
    4e20:	9b090000 	blls	244e28 <_Min_Stack_Size+0x244c28>
    4e24:	0400002f 	streq	r0, [r0], #-47	; 0xffffffd1
    4e28:	00b50207 	adcseq	r0, r5, r7, lsl #4
    4e2c:	01060000 	mrseq	r0, (UNDEF: 6)
    4e30:	f9020904 			; <UNDEFINED> instruction: 0xf9020904
    4e34:	07000000 	streq	r0, [r0, -r0]
    4e38:	000002fb 	strdeq	r0, [r0], -fp
    4e3c:	04610700 	strbteq	r0, [r1], #-1792	; 0xfffff900
    4e40:	00010000 	andeq	r0, r1, r0
    4e44:	0017ad09 	andseq	sl, r7, r9, lsl #26
    4e48:	02090400 	andeq	r0, r9, #0, 8
    4e4c:	000000e3 	andeq	r0, r0, r3, ror #1
    4e50:	a204500a 	andge	r5, r4, #10
    4e54:	00031604 	andeq	r1, r3, r4, lsl #12
    4e58:	52430b00 	subpl	r0, r3, #0, 22
    4e5c:	a4040031 	strge	r0, [r4], #-49	; 0xffffffcf
    4e60:	0000b004 	andeq	fp, r0, r4
    4e64:	c10c0000 	mrsgt	r0, (UNDEF: 12)
    4e68:	04000003 	streq	r0, [r0], #-3
    4e6c:	009304a5 	addseq	r0, r3, r5, lsr #9
    4e70:	0b020000 	bleq	84e78 <_Min_Stack_Size+0x84c78>
    4e74:	00325243 	eorseq	r5, r2, r3, asr #4
    4e78:	b004a604 	andlt	sl, r4, r4, lsl #12
    4e7c:	04000000 	streq	r0, [r0], #-0
    4e80:	0003cb0c 	andeq	ip, r3, ip, lsl #22
    4e84:	04a70400 	strteq	r0, [r7], #1024	; 0x400
    4e88:	00000093 	muleq	r0, r3, r0
    4e8c:	27fb0c06 	ldrbcs	r0, [fp, r6, lsl #24]!
    4e90:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    4e94:	0000b004 	andeq	fp, r0, r4
    4e98:	d50c0800 	strle	r0, [ip, #-2048]	; 0xfffff800
    4e9c:	04000003 	streq	r0, [r0], #-3
    4ea0:	009304a9 	addseq	r0, r3, r9, lsr #9
    4ea4:	0c0a0000 	stceq	0, cr0, [sl], {-0}
    4ea8:	00002362 	andeq	r2, r0, r2, ror #6
    4eac:	b004aa04 	andlt	sl, r4, r4, lsl #20
    4eb0:	0c000000 	stceq	0, cr0, [r0], {-0}
    4eb4:	0002b60c 	andeq	fp, r2, ip, lsl #12
    4eb8:	04ab0400 	strteq	r0, [fp], #1024	; 0x400
    4ebc:	00000093 	muleq	r0, r3, r0
    4ec0:	52530b0e 	subspl	r0, r3, #14336	; 0x3800
    4ec4:	04ac0400 	strteq	r0, [ip], #1024	; 0x400
    4ec8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    4ecc:	03e90c10 	mvneq	r0, #16, 24	; 0x1000
    4ed0:	ad040000 	stcge	0, cr0, [r4, #-0]
    4ed4:	00009304 	andeq	r9, r0, r4, lsl #6
    4ed8:	450b1200 	strmi	r1, [fp, #-512]	; 0xfffffe00
    4edc:	04005247 	streq	r5, [r0], #-583	; 0xfffffdb9
    4ee0:	00b004ae 	adcseq	r0, r0, lr, lsr #9
    4ee4:	0c140000 	ldceq	0, cr0, [r4], {-0}
    4ee8:	000003f3 	strdeq	r0, [r0], -r3
    4eec:	9304af04 	movwls	sl, #20228	; 0x4f04
    4ef0:	16000000 	strne	r0, [r0], -r0
    4ef4:	0025030c 	eoreq	r0, r5, ip, lsl #6
    4ef8:	04b00400 	ldrteq	r0, [r0], #1024	; 0x400
    4efc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    4f00:	02e20c18 	rsceq	r0, r2, #24, 24	; 0x1800
    4f04:	b1040000 	mrslt	r0, (UNDEF: 4)
    4f08:	00009304 	andeq	r9, r0, r4, lsl #6
    4f0c:	090c1a00 	stmdbeq	ip, {r9, fp, ip}
    4f10:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    4f14:	00b004b2 	ldrhteq	r0, [r0], r2
    4f18:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    4f1c:	00000414 	andeq	r0, r0, r4, lsl r4
    4f20:	9304b304 	movwls	fp, #17156	; 0x4304
    4f24:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    4f28:	0025d70c 	eoreq	sp, r5, ip, lsl #14
    4f2c:	04b40400 	ldrteq	r0, [r4], #1024	; 0x400
    4f30:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    4f34:	041e0c20 	ldreq	r0, [lr], #-3104	; 0xfffff3e0
    4f38:	b5040000 	strlt	r0, [r4, #-0]
    4f3c:	00009304 	andeq	r9, r0, r4, lsl #6
    4f40:	430b2200 	movwmi	r2, #45568	; 0xb200
    4f44:	0400544e 	streq	r5, [r0], #-1102	; 0xfffffbb2
    4f48:	00b004b6 	ldrhteq	r0, [r0], r6
    4f4c:	0c240000 	stceq	0, cr0, [r4], #-0
    4f50:	00002a57 	andeq	r2, r0, r7, asr sl
    4f54:	9304b704 	movwls	fp, #18180	; 0x4704
    4f58:	26000000 	strcs	r0, [r0], -r0
    4f5c:	4353500b 	cmpmi	r3, #11
    4f60:	04b80400 	ldrteq	r0, [r8], #1024	; 0x400
    4f64:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    4f68:	254f0c28 	strbcs	r0, [pc, #-3112]	; 4348 <_Min_Stack_Size+0x4148>
    4f6c:	b9040000 	stmdblt	r4, {}	; <UNPREDICTABLE>
    4f70:	00009304 	andeq	r9, r0, r4, lsl #6
    4f74:	410b2a00 	tstmi	fp, r0, lsl #20
    4f78:	04005252 	streq	r5, [r0], #-594	; 0xfffffdae
    4f7c:	00b004ba 	ldrhteq	r0, [r0], sl
    4f80:	0c2c0000 	stceq	0, cr0, [ip], #-0
    4f84:	0000255a 	andeq	r2, r0, sl, asr r5
    4f88:	9304bb04 	movwls	fp, #19204	; 0x4b04
    4f8c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    4f90:	5243520b 	subpl	r5, r3, #-1342177280	; 0xb0000000
    4f94:	04bc0400 	ldrteq	r0, [ip], #1024	; 0x400
    4f98:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    4f9c:	25650c30 	strbcs	r0, [r5, #-3120]!	; 0xfffff3d0
    4fa0:	bd040000 	stclt	0, cr0, [r4, #-0]
    4fa4:	00009304 	andeq	r9, r0, r4, lsl #6
    4fa8:	000c3200 	andeq	r3, ip, r0, lsl #4
    4fac:	0400002d 	streq	r0, [r0], #-45	; 0xffffffd3
    4fb0:	00b004be 	ldrhteq	r0, [r0], lr
    4fb4:	0c340000 	ldceq	0, cr0, [r4], #-0
    4fb8:	00002570 	andeq	r2, r0, r0, ror r5
    4fbc:	9304bf04 	movwls	fp, #20228	; 0x4f04
    4fc0:	36000000 	strcc	r0, [r0], -r0
    4fc4:	0024350c 	eoreq	r3, r4, ip, lsl #10
    4fc8:	04c00400 	strbeq	r0, [r0], #1024	; 0x400
    4fcc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    4fd0:	257b0c38 	ldrbcs	r0, [fp, #-3128]!	; 0xfffff3c8
    4fd4:	c1040000 	mrsgt	r0, (UNDEF: 4)
    4fd8:	00009304 	andeq	r9, r0, r4, lsl #6
    4fdc:	1d0c3a00 	vstrne	s6, [ip, #-0]
    4fe0:	0400002d 	streq	r0, [r0], #-45	; 0xffffffd3
    4fe4:	00b004c2 	adcseq	r0, r0, r2, asr #9
    4fe8:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    4fec:	00002586 	andeq	r2, r0, r6, lsl #11
    4ff0:	9304c304 	movwls	ip, #17156	; 0x4304
    4ff4:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    4ff8:	002d220c 	eoreq	r2, sp, ip, lsl #4
    4ffc:	04c40400 	strbeq	r0, [r4], #1024	; 0x400
    5000:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    5004:	25910c40 	ldrcs	r0, [r1, #3136]	; 0xc40
    5008:	c5040000 	strgt	r0, [r4, #-0]
    500c:	00009304 	andeq	r9, r0, r4, lsl #6
    5010:	ba0c4200 	blt	315818 <_Min_Stack_Size+0x315618>
    5014:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    5018:	00b004c6 	adcseq	r0, r0, r6, asr #9
    501c:	0c440000 	mareq	acc0, r0, r4
    5020:	0000259c 	muleq	r0, ip, r5
    5024:	9304c704 	movwls	ip, #18180	; 0x4704
    5028:	46000000 	strmi	r0, [r0], -r0
    502c:	5243440b 	subpl	r4, r3, #184549376	; 0xb000000
    5030:	04c80400 	strbeq	r0, [r8], #1024	; 0x400
    5034:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    5038:	25a70c48 	strcs	r0, [r7, #3144]!	; 0xc48
    503c:	c9040000 	stmdbgt	r4, {}	; <UNPREDICTABLE>
    5040:	00009304 	andeq	r9, r0, r4, lsl #6
    5044:	d60c4a00 	strle	r4, [ip], -r0, lsl #20
    5048:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    504c:	00b004ca 	adcseq	r0, r0, sl, asr #9
    5050:	0c4c0000 	mareq	acc0, r0, ip
    5054:	000025b2 			; <UNDEFINED> instruction: 0x000025b2
    5058:	9304cb04 	movwls	ip, #19204	; 0x4b04
    505c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    5060:	26800900 	strcs	r0, [r0], r0, lsl #18
    5064:	cc040000 	stcgt	0, cr0, [r4], {-0}
    5068:	00010504 	andeq	r0, r1, r4, lsl #10
    506c:	050a0d00 	streq	r0, [sl, #-3328]	; 0xfffff300
    5070:	00036733 	andeq	r6, r3, r3, lsr r7
    5074:	2a610e00 	bcs	184887c <_Min_Stack_Size+0x184867c>
    5078:	35050000 	strcc	r0, [r5, #-0]
    507c:	00000093 	muleq	r0, r3, r0
    5080:	238d0e00 	orrcs	r0, sp, #0, 28
    5084:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    5088:	00000093 	muleq	r0, r3, r0
    508c:	2bfb0e02 	blcs	ffec889c <BootRAM+0xee3903d>
    5090:	3b050000 	blcc	145098 <_Min_Stack_Size+0x144e98>
    5094:	00000093 	muleq	r0, r3, r0
    5098:	27290e04 	strcs	r0, [r9, -r4, lsl #28]!
    509c:	3f050000 	svccc	0x00050000
    50a0:	00000093 	muleq	r0, r3, r0
    50a4:	2d730e06 	ldclcs	14, cr0, [r3, #-24]!	; 0xffffffe8
    50a8:	42050000 	andmi	r0, r5, #0
    50ac:	00000088 	andeq	r0, r0, r8, lsl #1
    50b0:	06030008 	streq	r0, [r3], -r8
    50b4:	0500002c 	streq	r0, [r0, #-44]	; 0xffffffd4
    50b8:	0003224a 	andeq	r2, r3, sl, asr #4
    50bc:	05100d00 	ldreq	r0, [r0, #-3328]	; 0xfffff300
    50c0:	0003db50 	andeq	sp, r3, r0, asr fp
    50c4:	2ca70e00 	stccs	14, cr0, [r7]
    50c8:	52050000 	andpl	r0, r5, #0
    50cc:	00000093 	muleq	r0, r3, r0
    50d0:	2a280e00 	bcs	a088d8 <_Min_Stack_Size+0xa086d8>
    50d4:	55050000 	strpl	r0, [r5, #-0]
    50d8:	00000093 	muleq	r0, r3, r0
    50dc:	25bd0e02 	ldrcs	r0, [sp, #3586]!	; 0xe02
    50e0:	58050000 	stmdapl	r5, {}	; <UNPREDICTABLE>
    50e4:	00000093 	muleq	r0, r3, r0
    50e8:	24020e04 	strcs	r0, [r2], #-3588	; 0xfffff1fc
    50ec:	5c050000 	stcpl	0, cr0, [r5], {-0}
    50f0:	00000093 	muleq	r0, r3, r0
    50f4:	271a0e06 	ldrcs	r0, [sl, -r6, lsl #28]
    50f8:	5f050000 	svcpl	0x00050000
    50fc:	00000093 	muleq	r0, r3, r0
    5100:	2b9b0e08 	blcs	fe6c8928 <BootRAM+0xd6390c9>
    5104:	62050000 	andvs	r0, r5, #0
    5108:	00000093 	muleq	r0, r3, r0
    510c:	2dd90e0a 	ldclcs	14, cr0, [r9, #40]	; 0x28
    5110:	66050000 	strvs	r0, [r5], -r0
    5114:	00000093 	muleq	r0, r3, r0
    5118:	29950e0c 	ldmibcs	r5, {r2, r3, r9, sl, fp}
    511c:	6a050000 	bvs	145124 <_Min_Stack_Size+0x144f24>
    5120:	00000093 	muleq	r0, r3, r0
    5124:	2703000e 	strcs	r0, [r3, -lr]
    5128:	0500002d 	streq	r0, [r0, #-45]	; 0xffffffd3
    512c:	0003726d 	andeq	r7, r3, sp, ror #4
    5130:	050a0d00 	streq	r0, [sl, #-3328]	; 0xfffff300
    5134:	00042b73 	andeq	r2, r4, r3, ror fp
    5138:	24f70e00 	ldrbtcs	r0, [r7], #3584	; 0xe00
    513c:	76050000 	strvc	r0, [r5], -r0
    5140:	00000093 	muleq	r0, r3, r0
    5144:	2a480e00 	bcs	120894c <_Min_Stack_Size+0x120874c>
    5148:	79050000 	stmdbvc	r5, {}	; <UNPREDICTABLE>
    514c:	00000093 	muleq	r0, r3, r0
    5150:	248a0e02 	strcs	r0, [sl], #3586	; 0xe02
    5154:	7c050000 	stcvc	0, cr0, [r5], {-0}
    5158:	00000093 	muleq	r0, r3, r0
    515c:	29790e04 	ldmdbcs	r9!, {r2, r9, sl, fp}^
    5160:	7f050000 	svcvc	0x00050000
    5164:	00000093 	muleq	r0, r3, r0
    5168:	243a0e06 	ldrtcs	r0, [sl], #-3590	; 0xfffff1fa
    516c:	82050000 	andhi	r0, r5, #0
    5170:	00000093 	muleq	r0, r3, r0
    5174:	34030008 	strcc	r0, [r3], #-8
    5178:	0500002c 	streq	r0, [r0, #-44]	; 0xffffffd4
    517c:	0003e684 	andeq	lr, r3, r4, lsl #13
    5180:	050e0d00 	streq	r0, [lr, #-3328]	; 0xfffff300
    5184:	0004938b 	andeq	r9, r4, fp, lsl #7
    5188:	28000e00 	stmdacs	r0, {r9, sl, fp}
    518c:	8e050000 	cdphi	0, 0, cr0, cr5, cr0, {0}
    5190:	00000093 	muleq	r0, r3, r0
    5194:	2b1a0e00 	blcs	68899c <_Min_Stack_Size+0x68879c>
    5198:	91050000 	mrsls	r0, (UNDEF: 5)
    519c:	00000093 	muleq	r0, r3, r0
    51a0:	2a8a0e02 	bcs	fe2889b0 <BootRAM+0xd1f9151>
    51a4:	94050000 	strls	r0, [r5], #-0
    51a8:	00000093 	muleq	r0, r3, r0
    51ac:	292e0e04 	stmdbcs	lr!, {r2, r9, sl, fp}
    51b0:	97050000 	strls	r0, [r5, -r0]
    51b4:	00000093 	muleq	r0, r3, r0
    51b8:	29140e06 	ldmdbcs	r4, {r1, r2, r9, sl, fp}
    51bc:	9b050000 	blls	1451c4 <_Min_Stack_Size+0x144fc4>
    51c0:	00000093 	muleq	r0, r3, r0
    51c4:	2cc20e08 	stclcs	14, cr0, [r2], {8}
    51c8:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
    51cc:	00000093 	muleq	r0, r3, r0
    51d0:	28390e0a 	ldmdacs	r9!, {r1, r3, r9, sl, fp}
    51d4:	a1050000 	mrsge	r0, (UNDEF: 5)
    51d8:	00000093 	muleq	r0, r3, r0
    51dc:	d603000c 	strle	r0, [r3], -ip
    51e0:	05000027 	streq	r0, [r0, #-39]	; 0xffffffd9
    51e4:	000436a3 	andeq	r3, r4, r3, lsr #13
    51e8:	2e0d0f00 	cdpcs	15, 0, cr0, cr13, cr0, {0}
    51ec:	7a010000 	bvc	451f4 <_Min_Stack_Size+0x44ff4>
    51f0:	00000000 	andeq	r0, r0, r0
    51f4:	0000022c 	andeq	r0, r0, ip, lsr #4
    51f8:	04c29c01 	strbeq	r9, [r2], #3073	; 0xc01
    51fc:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    5200:	01000028 	tsteq	r0, r8, lsr #32
    5204:	0004c27a 	andeq	ip, r4, sl, ror r2
    5208:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    520c:	16041100 	strne	r1, [r4], -r0, lsl #2
    5210:	12000003 	andne	r0, r0, #3
    5214:	00002b2f 	andeq	r2, r0, pc, lsr #22
    5218:	4cd0e201 	lfmmi	f6, 3, [r0], {1}
    521c:	00f80800 	rscseq	r0, r8, r0, lsl #16
    5220:	9c010000 	stcls	0, cr0, [r1], {-0}
    5224:	00000508 	andeq	r0, r0, r8, lsl #10
    5228:	00280e10 	eoreq	r0, r8, r0, lsl lr
    522c:	c2e20100 	rscgt	r0, r2, #0, 2
    5230:	02000004 	andeq	r0, r0, #4
    5234:	e6106c91 			; <UNDEFINED> instruction: 0xe6106c91
    5238:	01000029 	tsteq	r0, r9, lsr #32
    523c:	000508e2 	andeq	r0, r5, r2, ror #17
    5240:	68910200 	ldmvs	r1, {r9}
    5244:	0028f213 	eoreq	pc, r8, r3, lsl r2	; <UNPREDICTABLE>
    5248:	93e40100 	mvnls	r0, #0, 2
    524c:	02000000 	andeq	r0, r0, #0
    5250:	11007691 			; <UNDEFINED> instruction: 0x11007691
    5254:	00036704 	andeq	r6, r3, r4, lsl #14
    5258:	2d671400 	cfstrdcs	mvd1, [r7, #-0]
    525c:	17010000 	strne	r0, [r1, -r0]
    5260:	00000001 	andeq	r0, r0, r1
    5264:	00011800 	andeq	r1, r1, r0, lsl #16
    5268:	709c0100 	addsvc	r0, ip, r0, lsl #2
    526c:	15000005 	strne	r0, [r0, #-5]
    5270:	0000280e 	andeq	r2, r0, lr, lsl #16
    5274:	c2011701 	andgt	r1, r1, #262144	; 0x40000
    5278:	02000004 	andeq	r0, r0, #4
    527c:	ea156c91 	b	5604c8 <_Min_Stack_Size+0x5602c8>
    5280:	01000027 	tsteq	r0, r7, lsr #32
    5284:	05700117 	ldrbeq	r0, [r0, #-279]!	; 0xfffffee9
    5288:	91020000 	mrsls	r0, (UNDEF: 2)
    528c:	25ce1668 	strbcs	r1, [lr, #1640]	; 0x668
    5290:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    5294:	00009301 	andeq	r9, r0, r1, lsl #6
    5298:	72910200 	addsvc	r0, r1, #0, 4
    529c:	0026f016 	eoreq	pc, r6, r6, lsl r0	; <UNPREDICTABLE>
    52a0:	01190100 	tsteq	r9, r0, lsl #2
    52a4:	00000093 	muleq	r0, r3, r0
    52a8:	16769102 	ldrbtne	r9, [r6], -r2, lsl #2
    52ac:	000028f9 	strdeq	r2, [r0], -r9
    52b0:	93011901 	movwls	r1, #6401	; 0x1901
    52b4:	02000000 	andeq	r0, r0, #0
    52b8:	11007491 			; <UNDEFINED> instruction: 0x11007491
    52bc:	0003db04 	andeq	sp, r3, r4, lsl #22
    52c0:	2bef1400 	blcs	ffbca2c8 <BootRAM+0xeb3aa69>
    52c4:	6a010000 	bvs	452cc <_Min_Stack_Size+0x450cc>
    52c8:	00000001 	andeq	r0, r0, r1
    52cc:	00011000 	andeq	r1, r1, r0
    52d0:	d89c0100 	ldmle	ip, {r8}
    52d4:	15000005 	strne	r0, [r0, #-5]
    52d8:	0000280e 	andeq	r2, r0, lr, lsl #16
    52dc:	c2016a01 	andgt	r6, r1, #4096	; 0x1000
    52e0:	02000004 	andeq	r0, r0, #4
    52e4:	ea156c91 	b	560530 <_Min_Stack_Size+0x560330>
    52e8:	01000027 	tsteq	r0, r7, lsr #32
    52ec:	0570016a 	ldrbeq	r0, [r0, #-362]!	; 0xfffffe96
    52f0:	91020000 	mrsls	r0, (UNDEF: 2)
    52f4:	25ce1668 	strbcs	r1, [lr, #1640]	; 0x668
    52f8:	6c010000 	stcvs	0, cr0, [r1], {-0}
    52fc:	00009301 	andeq	r9, r0, r1, lsl #6
    5300:	72910200 	addsvc	r0, r1, #0, 4
    5304:	0026f016 	eoreq	pc, r6, r6, lsl r0	; <UNPREDICTABLE>
    5308:	016c0100 	cmneq	ip, r0, lsl #2
    530c:	00000093 	muleq	r0, r3, r0
    5310:	16769102 	ldrbtne	r9, [r6], -r2, lsl #2
    5314:	000028f9 	strdeq	r2, [r0], -r9
    5318:	93016c01 	movwls	r6, #7169	; 0x1c01
    531c:	02000000 	andeq	r0, r0, #0
    5320:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
    5324:	00002637 	andeq	r2, r0, r7, lsr r6
    5328:	0001bc01 	andeq	fp, r1, r1, lsl #24
    532c:	0c000000 	stceq	0, cr0, [r0], {-0}
    5330:	01000001 	tsteq	r0, r1
    5334:	00063a9c 	muleq	r6, ip, sl
    5338:	280e1500 	stmdacs	lr, {r8, sl, ip}
    533c:	bc010000 	stclt	0, cr0, [r1], {-0}
    5340:	0004c201 	andeq	ip, r4, r1, lsl #4
    5344:	6c910200 	lfmvs	f0, 4, [r1], {0}
    5348:	0027ea15 	eoreq	lr, r7, r5, lsl sl
    534c:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
    5350:	00000570 	andeq	r0, r0, r0, ror r5
    5354:	16689102 	strbtne	r9, [r8], -r2, lsl #2
    5358:	000025ce 	andeq	r2, r0, lr, asr #11
    535c:	9301be01 	movwls	fp, #7681	; 0x1e01
    5360:	02000000 	andeq	r0, r0, #0
    5364:	f0167291 			; <UNDEFINED> instruction: 0xf0167291
    5368:	01000026 	tsteq	r0, r6, lsr #32
    536c:	009301be 			; <UNDEFINED> instruction: 0x009301be
    5370:	91020000 	mrsls	r0, (UNDEF: 2)
    5374:	28f91676 	ldmcs	r9!, {r1, r2, r4, r5, r6, r9, sl, ip}^
    5378:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    537c:	00009301 	andeq	r9, r0, r1, lsl #6
    5380:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5384:	2c461400 	cfstrdcs	mvd1, [r6], {-0}
    5388:	0b010000 	bleq	45390 <_Min_Stack_Size+0x45190>
    538c:	00000002 	andeq	r0, r0, r2
    5390:	0000d000 	andeq	sp, r0, r0
    5394:	9c9c0100 	ldflss	f0, [ip], {0}
    5398:	15000006 	strne	r0, [r0, #-6]
    539c:	0000280e 	andeq	r2, r0, lr, lsl #16
    53a0:	c2020b01 	andgt	r0, r2, #1024	; 0x400
    53a4:	02000004 	andeq	r0, r0, #4
    53a8:	ea156c91 	b	5605f4 <_Min_Stack_Size+0x5603f4>
    53ac:	01000027 	tsteq	r0, r7, lsr #32
    53b0:	0570020b 	ldrbeq	r0, [r0, #-523]!	; 0xfffffdf5
    53b4:	91020000 	mrsls	r0, (UNDEF: 2)
    53b8:	25ce1668 	strbcs	r1, [lr, #1640]	; 0x668
    53bc:	0d010000 	stceq	0, cr0, [r1, #-0]
    53c0:	00009302 	andeq	r9, r0, r2, lsl #6
    53c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    53c8:	0026f016 	eoreq	pc, r6, r6, lsl r0	; <UNPREDICTABLE>
    53cc:	020d0100 	andeq	r0, sp, #0, 2
    53d0:	00000093 	muleq	r0, r3, r0
    53d4:	16729102 	ldrbtne	r9, [r2], -r2, lsl #2
    53d8:	000028f9 	strdeq	r2, [r0], -r9
    53dc:	93020d01 	movwls	r0, #11521	; 0x2d01
    53e0:	02000000 	andeq	r0, r0, #0
    53e4:	17007691 			; <UNDEFINED> instruction: 0x17007691
    53e8:	00002c52 	andeq	r2, r0, r2, asr ip
    53ec:	00024b01 	andeq	r4, r2, r1, lsl #22
    53f0:	a6000000 	strge	r0, [r0], -r0
    53f4:	01000000 	mrseq	r0, (UNDEF: 0)
    53f8:	0006d19c 	muleq	r6, ip, r1
    53fc:	280e1500 	stmdacs	lr, {r8, sl, ip}
    5400:	4b010000 	blmi	45408 <_Min_Stack_Size+0x45208>
    5404:	0004c202 	andeq	ip, r4, r2, lsl #4
    5408:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    540c:	002d9e15 	eoreq	r9, sp, r5, lsl lr
    5410:	024b0100 	subeq	r0, fp, #0, 2
    5414:	000006d1 	ldrdeq	r0, [r0], -r1
    5418:	00709102 	rsbseq	r9, r0, r2, lsl #2
    541c:	042b0411 	strteq	r0, [fp], #-1041	; 0xfffffbef
    5420:	79170000 	ldmdbvc	r7, {}	; <UNPREDICTABLE>
    5424:	01000028 	tsteq	r0, r8, lsr #32
    5428:	0000028e 	andeq	r0, r0, lr, lsl #5
    542c:	00b60000 	adcseq	r0, r6, r0
    5430:	9c010000 	stcls	0, cr0, [r1], {-0}
    5434:	0000072a 	andeq	r0, r0, sl, lsr #14
    5438:	00280e15 	eoreq	r0, r8, r5, lsl lr
    543c:	028e0100 	addeq	r0, lr, #0, 2
    5440:	000004c2 	andeq	r0, r0, r2, asr #9
    5444:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5448:	00002d9e 	muleq	r0, lr, sp
    544c:	d1028e01 	tstle	r2, r1, lsl #28
    5450:	02000006 	andeq	r0, r0, #6
    5454:	43166891 	tstmi	r6, #9502720	; 0x910000
    5458:	01000026 	tsteq	r0, r6, lsr #32
    545c:	00930290 	umullseq	r0, r3, r0, r2
    5460:	91020000 	mrsls	r0, (UNDEF: 2)
    5464:	29b21676 	ldmibcs	r2!, {r1, r2, r4, r5, r6, r9, sl, ip}
    5468:	91010000 	mrsls	r0, (UNDEF: 1)
    546c:	00009302 	andeq	r9, r0, r2, lsl #6
    5470:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5474:	2aab1400 	bcs	feaca47c <BootRAM+0xda3ac1d>
    5478:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    547c:	00000002 	andeq	r0, r0, r2
    5480:	00004e00 	andeq	r4, r0, r0, lsl #28
    5484:	5f9c0100 	svcpl	0x009c0100
    5488:	15000007 	strne	r0, [r0, #-7]
    548c:	0000280e 	andeq	r2, r0, lr, lsl #16
    5490:	c202c801 	andgt	ip, r2, #65536	; 0x10000
    5494:	02000004 	andeq	r0, r0, #4
    5498:	59157491 	ldmdbpl	r5, {r0, r4, r7, sl, ip, sp, lr}
    549c:	0100002b 	tsteq	r0, fp, lsr #32
    54a0:	075f02c8 	ldrbeq	r0, [pc, -r8, asr #5]
    54a4:	91020000 	mrsls	r0, (UNDEF: 2)
    54a8:	04110070 	ldreq	r0, [r1], #-112	; 0xffffff90
    54ac:	00000493 	muleq	r0, r3, r4
    54b0:	00275b14 	eoreq	r5, r7, r4, lsl fp
    54b4:	02e00100 	rsceq	r0, r0, #0, 2
    54b8:	00000000 	andeq	r0, r0, r0
    54bc:	00000032 	andeq	r0, r0, r2, lsr r0
    54c0:	078b9c01 	streq	r9, [fp, r1, lsl #24]
    54c4:	e6150000 	ldr	r0, [r5], -r0
    54c8:	01000029 	tsteq	r0, r9, lsr #32
    54cc:	050802e0 	streq	r0, [r8, #-736]	; 0xfffffd20
    54d0:	91020000 	mrsls	r0, (UNDEF: 2)
    54d4:	a1140074 	tstge	r4, r4, ror r0
    54d8:	01000028 	tsteq	r0, r8, lsr #32
    54dc:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    54e0:	00420000 	subeq	r0, r2, r0
    54e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    54e8:	000007b1 			; <UNDEFINED> instruction: 0x000007b1
    54ec:	0027ea15 	eoreq	lr, r7, r5, lsl sl
    54f0:	02f00100 	rscseq	r0, r0, #0, 2
    54f4:	00000570 	andeq	r0, r0, r0, ror r5
    54f8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    54fc:	0025f614 	eoreq	pc, r5, r4, lsl r6	; <UNPREDICTABLE>
    5500:	03030100 	movweq	r0, #12544	; 0x3100
    5504:	00000000 	andeq	r0, r0, r0
    5508:	00000030 	andeq	r0, r0, r0, lsr r0
    550c:	07d79c01 	ldrbeq	r9, [r7, r1, lsl #24]
    5510:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    5514:	0100002d 	tsteq	r0, sp, lsr #32
    5518:	06d10303 	ldrbeq	r0, [r1], r3, lsl #6
    551c:	91020000 	mrsls	r0, (UNDEF: 2)
    5520:	df140074 	svcle	0x00140074
    5524:	01000028 	tsteq	r0, r8, lsr #32
    5528:	00000313 	andeq	r0, r0, r3, lsl r3
    552c:	003c0000 	eorseq	r0, ip, r0
    5530:	9c010000 	stcls	0, cr0, [r1], {-0}
    5534:	000007fd 	strdeq	r0, [r0], -sp
    5538:	002b5915 	eoreq	r5, fp, r5, lsl r9
    553c:	03130100 	tsteq	r3, #0, 2
    5540:	0000075f 	andeq	r0, r0, pc, asr r7
    5544:	00749102 	rsbseq	r9, r4, r2, lsl #2
    5548:	002bce14 	eoreq	ip, fp, r4, lsl lr
    554c:	03260100 			; <UNDEFINED> instruction: 0x03260100
    5550:	08004dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, lr}
    5554:	0000003e 	andeq	r0, r0, lr, lsr r0
    5558:	08329c01 	ldmdaeq	r2!, {r0, sl, fp, ip, pc}
    555c:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5560:	01000028 	tsteq	r0, r8, lsr #32
    5564:	04c20326 	strbeq	r0, [r2], #806	; 0x326
    5568:	91020000 	mrsls	r0, (UNDEF: 2)
    556c:	16ec1574 			; <UNDEFINED> instruction: 0x16ec1574
    5570:	26010000 	strcs	r0, [r1], -r0
    5574:	0000f903 	andeq	pc, r0, r3, lsl #18
    5578:	73910200 	orrsvc	r0, r1, #0, 4
    557c:	2a981400 	bcs	fe60a584 <BootRAM+0xd57ad25>
    5580:	3f010000 	svccc	0x00010000
    5584:	00000003 	andeq	r0, r0, r3
    5588:	00004a00 	andeq	r4, r0, r0, lsl #20
    558c:	679c0100 	ldrvs	r0, [ip, r0, lsl #2]
    5590:	15000008 	strne	r0, [r0, #-8]
    5594:	0000280e 	andeq	r2, r0, lr, lsl #16
    5598:	c2033f01 	andgt	r3, r3, #1, 30
    559c:	02000004 	andeq	r0, r0, #4
    55a0:	ec157491 	cfldrs	mvf7, [r5], {145}	; 0x91
    55a4:	01000016 	tsteq	r0, r6, lsl r0
    55a8:	00f9033f 	rscseq	r0, r9, pc, lsr r3
    55ac:	91020000 	mrsls	r0, (UNDEF: 2)
    55b0:	cc140073 	ldcgt	0, cr0, [r4], {115}	; 0x73
    55b4:	0100002d 	tsteq	r0, sp, lsr #32
    55b8:	4e080368 	cdpmi	3, 0, cr0, cr8, cr8, {3}
    55bc:	00460800 	subeq	r0, r6, r0, lsl #16
    55c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    55c4:	000008ab 	andeq	r0, r0, fp, lsr #17
    55c8:	00280e15 	eoreq	r0, r8, r5, lsl lr
    55cc:	03680100 	cmneq	r8, #0, 2
    55d0:	000004c2 	andeq	r0, r0, r2, asr #9
    55d4:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    55d8:	00002b28 	andeq	r2, r0, r8, lsr #22
    55dc:	93036801 	movwls	r6, #14337	; 0x3801
    55e0:	02000000 	andeq	r0, r0, #0
    55e4:	ec157291 	lfm	f7, 4, [r5], {145}	; 0x91
    55e8:	01000016 	tsteq	r0, r6, lsl r0
    55ec:	00f90368 	rscseq	r0, r9, r8, ror #6
    55f0:	91020000 	mrsls	r0, (UNDEF: 2)
    55f4:	ca140071 	bgt	5057c0 <_Min_Stack_Size+0x5055c0>
    55f8:	01000024 	tsteq	r0, r4, lsr #32
    55fc:	0000038d 	andeq	r0, r0, sp, lsl #7
    5600:	001c0000 	andseq	r0, ip, r0
    5604:	9c010000 	stcls	0, cr0, [r1], {-0}
    5608:	000008e0 	andeq	r0, r0, r0, ror #17
    560c:	00280e15 	eoreq	r0, r8, r5, lsl lr
    5610:	038d0100 	orreq	r0, sp, #0, 2
    5614:	000004c2 	andeq	r0, r0, r2, asr #9
    5618:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    561c:	00002a38 	andeq	r2, r0, r8, lsr sl
    5620:	93038d01 	movwls	r8, #15617	; 0x3d01
    5624:	02000000 	andeq	r0, r0, #0
    5628:	14007291 	strne	r7, [r0], #-657	; 0xfffffd6f
    562c:	000029fd 	strdeq	r2, [r0], -sp
    5630:	0003a901 	andeq	sl, r3, r1, lsl #18
    5634:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5638:	01000000 	mrseq	r0, (UNDEF: 0)
    563c:	0009249c 	muleq	r9, ip, r4
    5640:	280e1500 	stmdacs	lr, {r8, sl, ip}
    5644:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    5648:	0004c203 	andeq	ip, r4, r3, lsl #4
    564c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5650:	0029a615 	eoreq	sl, r9, r5, lsl r6
    5654:	03a90100 			; <UNDEFINED> instruction: 0x03a90100
    5658:	00000093 	muleq	r0, r3, r0
    565c:	15729102 	ldrbne	r9, [r2, #-258]!	; 0xfffffefe
    5660:	000026a1 	andeq	r2, r0, r1, lsr #13
    5664:	9303a901 	movwls	sl, #14593	; 0x3901
    5668:	02000000 	andeq	r0, r0, #0
    566c:	14007091 	strne	r7, [r0], #-145	; 0xffffff6f
    5670:	00002357 	andeq	r2, r0, r7, asr r3
    5674:	0003c401 	andeq	ip, r3, r1, lsl #8
    5678:	46000000 	strmi	r0, [r0], -r0
    567c:	01000000 	mrseq	r0, (UNDEF: 0)
    5680:	0009689c 	muleq	r9, ip, r8
    5684:	280e1500 	stmdacs	lr, {r8, sl, ip}
    5688:	c4010000 	strgt	r0, [r1], #-0
    568c:	0004c203 	andeq	ip, r4, r3, lsl #4
    5690:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5694:	00289315 	eoreq	r9, r8, r5, lsl r3
    5698:	03c40100 	biceq	r0, r4, #0, 2
    569c:	00000093 	muleq	r0, r3, r0
    56a0:	15729102 	ldrbne	r9, [r2, #-258]!	; 0xfffffefe
    56a4:	000016ec 	andeq	r1, r0, ip, ror #13
    56a8:	f903c401 			; <UNDEFINED> instruction: 0xf903c401
    56ac:	02000000 	andeq	r0, r0, #0
    56b0:	14007191 	strne	r7, [r0], #-401	; 0xfffffe6f
    56b4:	00002447 	andeq	r2, r0, r7, asr #8
    56b8:	0003dd01 	andeq	sp, r3, r1, lsl #26
    56bc:	22000000 	andcs	r0, r0, #0
    56c0:	01000000 	mrseq	r0, (UNDEF: 0)
    56c4:	00098e9c 	muleq	r9, ip, lr
    56c8:	280e1500 	stmdacs	lr, {r8, sl, ip}
    56cc:	dd010000 	stcle	0, cr0, [r1, #-0]
    56d0:	0004c203 	andeq	ip, r4, r3, lsl #4
    56d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    56d8:	2ae71700 	bcs	ff9cb2e0 <BootRAM+0xe93ba81>
    56dc:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    56e0:	00000003 	andeq	r0, r0, r3
    56e4:	00002c00 	andeq	r2, r0, r0, lsl #24
    56e8:	c39c0100 	orrsgt	r0, ip, #0, 2
    56ec:	15000009 	strne	r0, [r0, #-9]
    56f0:	0000280e 	andeq	r2, r0, lr, lsl #16
    56f4:	c203f001 	andgt	pc, r3, #1
    56f8:	02000004 	andeq	r0, r0, #4
    56fc:	67157491 			; <UNDEFINED> instruction: 0x67157491
    5700:	01000023 	tsteq	r0, r3, lsr #32
    5704:	009303f0 			; <UNDEFINED> instruction: 0x009303f0
    5708:	91020000 	mrsls	r0, (UNDEF: 2)
    570c:	6f170072 	svcvs	0x00170072
    5710:	0100002a 	tsteq	r0, sl, lsr #32
    5714:	0000040b 	andeq	r0, r0, fp, lsl #8
    5718:	005e0000 	subseq	r0, lr, r0
    571c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5720:	00000a16 	andeq	r0, r0, r6, lsl sl
    5724:	00280e15 	eoreq	r0, r8, r5, lsl lr
    5728:	040b0100 	streq	r0, [fp], #-256	; 0xffffff00
    572c:	000004c2 	andeq	r0, r0, r2, asr #9
    5730:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    5734:	00002b40 	andeq	r2, r0, r0, asr #22
    5738:	93040b01 	movwls	r0, #19201	; 0x4b01
    573c:	02000000 	andeq	r0, r0, #0
    5740:	48157291 	ldmdami	r5, {r0, r4, r7, r9, ip, sp, lr}
    5744:	0100002a 	tsteq	r0, sl, lsr #32
    5748:	0093040c 	addseq	r0, r3, ip, lsl #8
    574c:	91020000 	mrsls	r0, (UNDEF: 2)
    5750:	243e1570 	ldrtcs	r1, [lr], #-1392	; 0xfffffa90
    5754:	0c010000 	stceq	0, cr0, [r1], {-0}
    5758:	00009304 	andeq	r9, r0, r4, lsl #6
    575c:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    5760:	2d051700 	stccs	7, cr1, [r5, #-0]
    5764:	33010000 	movwcc	r0, #4096	; 0x1000
    5768:	00000004 	andeq	r0, r0, r4
    576c:	00005c00 	andeq	r5, r0, r0, lsl #24
    5770:	789c0100 	ldmvc	ip, {r8}
    5774:	1500000a 	strne	r0, [r0, #-10]
    5778:	0000280e 	andeq	r2, r0, lr, lsl #16
    577c:	c2043301 	andgt	r3, r4, #67108864	; 0x4000000
    5780:	02000004 	andeq	r0, r0, #4
    5784:	00156c91 	mulseq	r5, r1, ip
    5788:	01000029 	tsteq	r0, r9, lsr #32
    578c:	00930433 	addseq	r0, r3, r3, lsr r4
    5790:	91020000 	mrsls	r0, (UNDEF: 2)
    5794:	28cc156a 	stmiacs	ip, {r1, r3, r5, r6, r8, sl, ip}^
    5798:	33010000 	movwcc	r0, #4096	; 0x1000
    579c:	00009304 	andeq	r9, r0, r4, lsl #6
    57a0:	68910200 	ldmvs	r1, {r9}
    57a4:	002dbf15 	eoreq	fp, sp, r5, lsl pc
    57a8:	04340100 	ldrteq	r0, [r4], #-256	; 0xffffff00
    57ac:	00000093 	muleq	r0, r3, r0
    57b0:	16669102 	strbtne	r9, [r6], -r2, lsl #2
    57b4:	000028c4 	andeq	r2, r0, r4, asr #17
    57b8:	93043601 	movwls	r3, #17921	; 0x4601
    57bc:	02000000 	andeq	r0, r0, #0
    57c0:	17007691 			; <UNDEFINED> instruction: 0x17007691
    57c4:	00002bab 	andeq	r2, r0, fp, lsr #23
    57c8:	00045d01 	andeq	r5, r4, r1, lsl #26
    57cc:	3c000000 	stccc	0, cr0, [r0], {-0}
    57d0:	01000000 	mrseq	r0, (UNDEF: 0)
    57d4:	000acb9c 	muleq	sl, ip, fp
    57d8:	280e1500 	stmdacs	lr, {r8, sl, ip}
    57dc:	5d010000 	stcpl	0, cr0, [r1, #-0]
    57e0:	0004c204 	andeq	ip, r4, r4, lsl #4
    57e4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    57e8:	00290015 	eoreq	r0, r9, r5, lsl r0
    57ec:	045d0100 	ldrbeq	r0, [sp], #-256	; 0xffffff00
    57f0:	00000093 	muleq	r0, r3, r0
    57f4:	15729102 	ldrbne	r9, [r2, #-258]!	; 0xfffffefe
    57f8:	000028cc 	andeq	r2, r0, ip, asr #17
    57fc:	93045e01 	movwls	r5, #19969	; 0x4e01
    5800:	02000000 	andeq	r0, r0, #0
    5804:	bf157091 	svclt	0x00157091
    5808:	0100002d 	tsteq	r0, sp, lsr #32
    580c:	0093045e 	addseq	r0, r3, lr, asr r4
    5810:	91020000 	mrsls	r0, (UNDEF: 2)
    5814:	ff14006e 			; <UNDEFINED> instruction: 0xff14006e
    5818:	0100002d 	tsteq	r0, sp, lsr #32
    581c:	0000047c 	andeq	r0, r0, ip, ror r4
    5820:	00520000 	subseq	r0, r2, r0
    5824:	9c010000 	stcls	0, cr0, [r1], {-0}
    5828:	00000b2d 	andeq	r0, r0, sp, lsr #22
    582c:	00280e15 	eoreq	r0, r8, r5, lsl lr
    5830:	047c0100 	ldrbteq	r0, [ip], #-256	; 0xffffff00
    5834:	000004c2 	andeq	r0, r0, r2, asr #9
    5838:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    583c:	00002900 	andeq	r2, r0, r0, lsl #18
    5840:	93047c01 	movwls	r7, #19457	; 0x4c01
    5844:	02000000 	andeq	r0, r0, #0
    5848:	cc156a91 	ldcgt	10, cr6, [r5], {145}	; 0x91
    584c:	01000028 	tsteq	r0, r8, lsr #32
    5850:	0093047c 	addseq	r0, r3, ip, ror r4
    5854:	91020000 	mrsls	r0, (UNDEF: 2)
    5858:	2dbf1568 	cfldr32cs	mvfx1, [pc, #416]!	; 5a00 <_Min_Stack_Size+0x5800>
    585c:	7d010000 	stcvc	0, cr0, [r1, #-0]
    5860:	00009304 	andeq	r9, r0, r4, lsl #6
    5864:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    5868:	0028c416 	eoreq	ip, r8, r6, lsl r4
    586c:	047f0100 	ldrbteq	r0, [pc], #-256	; 5874 <_Min_Stack_Size+0x5674>
    5870:	00000093 	muleq	r0, r3, r0
    5874:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5878:	002ad314 	eoreq	sp, sl, r4, lsl r3
    587c:	04980100 	ldreq	r0, [r8], #256	; 0x100
    5880:	00000000 	andeq	r0, r0, r0
    5884:	00000026 	andeq	r0, r0, r6, lsr #32
    5888:	0b719c01 	bleq	1c6c894 <_Min_Stack_Size+0x1c6c694>
    588c:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5890:	01000028 	tsteq	r0, r8, lsr #32
    5894:	04c20498 	strbeq	r0, [r2], #1176	; 0x498
    5898:	91020000 	mrsls	r0, (UNDEF: 2)
    589c:	286f1574 	stmdacs	pc!, {r2, r4, r5, r6, r8, sl, ip}^	; <UNPREDICTABLE>
    58a0:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    58a4:	00009304 	andeq	r9, r0, r4, lsl #6
    58a8:	72910200 	addsvc	r0, r1, #0, 4
    58ac:	0028b215 	eoreq	fp, r8, r5, lsl r2
    58b0:	04980100 	ldreq	r0, [r8], #256	; 0x100
    58b4:	00000093 	muleq	r0, r3, r0
    58b8:	00709102 	rsbseq	r9, r0, r2, lsl #2
    58bc:	00250f14 	eoreq	r0, r5, r4, lsl pc
    58c0:	04af0100 	strteq	r0, [pc], #256	; 58c8 <_Min_Stack_Size+0x56c8>
    58c4:	00000000 	andeq	r0, r0, r0
    58c8:	00000036 	andeq	r0, r0, r6, lsr r0
    58cc:	0bb59c01 	bleq	fed6c8d8 <BootRAM+0xdcdd079>
    58d0:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    58d4:	01000028 	tsteq	r0, r8, lsr #32
    58d8:	04c204af 	strbeq	r0, [r2], #1199	; 0x4af
    58dc:	91020000 	mrsls	r0, (UNDEF: 2)
    58e0:	238d156c 	orrcs	r1, sp, #108, 10	; 0x1b000000
    58e4:	af010000 	svcge	0x00010000
    58e8:	00009304 	andeq	r9, r0, r4, lsl #6
    58ec:	6a910200 	bvs	fe4460f4 <BootRAM+0xd3b6895>
    58f0:	0028f216 	eoreq	pc, r8, r6, lsl r2	; <UNPREDICTABLE>
    58f4:	04b10100 	ldrteq	r0, [r1], #256	; 0x100
    58f8:	00000093 	muleq	r0, r3, r0
    58fc:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5900:	00241e14 	eoreq	r1, r4, r4, lsl lr
    5904:	04cd0100 	strbeq	r0, [sp], #256	; 0x100
    5908:	00000000 	andeq	r0, r0, r0
    590c:	00000036 	andeq	r0, r0, r6, lsr r0
    5910:	0bf99c01 	bleq	ffe6c91c <BootRAM+0xeddd0bd>
    5914:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5918:	01000028 	tsteq	r0, r8, lsr #32
    591c:	04c204cd 	strbeq	r0, [r2], #1229	; 0x4cd
    5920:	91020000 	mrsls	r0, (UNDEF: 2)
    5924:	2367156c 	cmncs	r7, #108, 10	; 0x1b000000
    5928:	cd010000 	stcgt	0, cr0, [r1, #-0]
    592c:	00009304 	andeq	r9, r0, r4, lsl #6
    5930:	6a910200 	bvs	fe446138 <BootRAM+0xd3b68d9>
    5934:	0028c416 	eoreq	ip, r8, r6, lsl r4
    5938:	04cf0100 	strbeq	r0, [pc], #256	; 5940 <_Min_Stack_Size+0x5740>
    593c:	00000093 	muleq	r0, r3, r0
    5940:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5944:	00249a14 	eoreq	r9, r4, r4, lsl sl
    5948:	04f00100 	ldrbteq	r0, [r0], #256	; 0x100
    594c:	00000000 	andeq	r0, r0, r0
    5950:	00000096 	muleq	r0, r6, r0
    5954:	0c799c01 	ldcleq	12, cr9, [r9], #-4
    5958:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    595c:	01000028 	tsteq	r0, r8, lsr #32
    5960:	04c204f0 	strbeq	r0, [r2], #1264	; 0x4f0
    5964:	91020000 	mrsls	r0, (UNDEF: 2)
    5968:	2813156c 	ldmdacs	r3, {r2, r3, r5, r6, r8, sl, ip}
    596c:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    5970:	00009304 	andeq	r9, r0, r4, lsl #6
    5974:	6a910200 	bvs	fe44617c <BootRAM+0xd3b691d>
    5978:	0024dc15 	eoreq	sp, r4, r5, lsl ip
    597c:	04f10100 	ldrbteq	r0, [r1], #256	; 0x100
    5980:	00000093 	muleq	r0, r3, r0
    5984:	15689102 	strbne	r9, [r8, #-258]!	; 0xfffffefe
    5988:	000023da 	ldrdeq	r2, [r0], -sl
    598c:	9304f101 	movwls	pc, #16641	; 0x4101	; <UNPREDICTABLE>
    5990:	02000000 	andeq	r0, r0, #0
    5994:	c4166691 	ldrgt	r6, [r6], #-1681	; 0xfffff96f
    5998:	01000028 	tsteq	r0, r8, lsr #32
    599c:	009304f3 			; <UNDEFINED> instruction: 0x009304f3
    59a0:	91020000 	mrsls	r0, (UNDEF: 2)
    59a4:	240c1676 	strcs	r1, [ip], #-1654	; 0xfffff98a
    59a8:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    59ac:	00009304 	andeq	r9, r0, r4, lsl #6
    59b0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    59b4:	0026f016 	eoreq	pc, r6, r6, lsl r0	; <UNPREDICTABLE>
    59b8:	04f50100 	ldrbteq	r0, [r5], #256	; 0x100
    59bc:	00000093 	muleq	r0, r3, r0
    59c0:	00729102 	rsbseq	r9, r2, r2, lsl #2
    59c4:	00295114 	eoreq	r5, r9, r4, lsl r1
    59c8:	05230100 	streq	r0, [r3, #-256]!	; 0xffffff00
    59cc:	00000000 	andeq	r0, r0, r0
    59d0:	00000036 	andeq	r0, r0, r6, lsr r0
    59d4:	0cbd9c01 	ldceq	12, cr9, [sp], #4
    59d8:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    59dc:	01000028 	tsteq	r0, r8, lsr #32
    59e0:	04c20523 	strbeq	r0, [r2], #1315	; 0x523
    59e4:	91020000 	mrsls	r0, (UNDEF: 2)
    59e8:	2525156c 	strcs	r1, [r5, #-1388]!	; 0xfffffa94
    59ec:	23010000 	movwcs	r0, #4096	; 0x1000
    59f0:	00009305 	andeq	r9, r0, r5, lsl #6
    59f4:	6a910200 	bvs	fe4461fc <BootRAM+0xd3b699d>
    59f8:	00240c16 	eoreq	r0, r4, r6, lsl ip
    59fc:	05250100 	streq	r0, [r5, #-256]!	; 0xffffff00
    5a00:	00000093 	muleq	r0, r3, r0
    5a04:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5a08:	0022f614 	eoreq	pc, r2, r4, lsl r6	; <UNPREDICTABLE>
    5a0c:	053b0100 	ldreq	r0, [fp, #-256]!	; 0xffffff00
    5a10:	00000000 	andeq	r0, r0, r0
    5a14:	0000003a 	andeq	r0, r0, sl, lsr r0
    5a18:	0d019c01 	stceq	12, cr9, [r1, #-4]
    5a1c:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5a20:	01000028 	tsteq	r0, r8, lsr #32
    5a24:	04c2053b 	strbeq	r0, [r2], #1339	; 0x53b
    5a28:	91020000 	mrsls	r0, (UNDEF: 2)
    5a2c:	2525156c 	strcs	r1, [r5, #-1388]!	; 0xfffffa94
    5a30:	3b010000 	blcc	45a38 <_Min_Stack_Size+0x45838>
    5a34:	00009305 	andeq	r9, r0, r5, lsl #6
    5a38:	6a910200 	bvs	fe446240 <BootRAM+0xd3b69e1>
    5a3c:	00240c16 	eoreq	r0, r4, r6, lsl ip
    5a40:	053d0100 	ldreq	r0, [sp, #-256]!	; 0xffffff00
    5a44:	00000093 	muleq	r0, r3, r0
    5a48:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5a4c:	00296514 	eoreq	r6, r9, r4, lsl r5
    5a50:	05530100 	ldrbeq	r0, [r3, #-256]	; 0xffffff00
    5a54:	00000000 	andeq	r0, r0, r0
    5a58:	00000036 	andeq	r0, r0, r6, lsr r0
    5a5c:	0d459c01 	stcleq	12, cr9, [r5, #-4]
    5a60:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5a64:	01000028 	tsteq	r0, r8, lsr #32
    5a68:	04c20553 	strbeq	r0, [r2], #1363	; 0x553
    5a6c:	91020000 	mrsls	r0, (UNDEF: 2)
    5a70:	2525156c 	strcs	r1, [r5, #-1388]!	; 0xfffffa94
    5a74:	53010000 	movwpl	r0, #4096	; 0x1000
    5a78:	00009305 	andeq	r9, r0, r5, lsl #6
    5a7c:	6a910200 	bvs	fe446284 <BootRAM+0xd3b6a25>
    5a80:	00241516 	eoreq	r1, r4, r6, lsl r5
    5a84:	05550100 	ldrbeq	r0, [r5, #-256]	; 0xffffff00
    5a88:	00000093 	muleq	r0, r3, r0
    5a8c:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5a90:	00239d14 	eoreq	r9, r3, r4, lsl sp
    5a94:	056b0100 	strbeq	r0, [fp, #-256]!	; 0xffffff00
    5a98:	00000000 	andeq	r0, r0, r0
    5a9c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5aa0:	0d899c01 	stceq	12, cr9, [r9, #4]
    5aa4:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5aa8:	01000028 	tsteq	r0, r8, lsr #32
    5aac:	04c2056b 	strbeq	r0, [r2], #1387	; 0x56b
    5ab0:	91020000 	mrsls	r0, (UNDEF: 2)
    5ab4:	2525156c 	strcs	r1, [r5, #-1388]!	; 0xfffffa94
    5ab8:	6b010000 	blvs	45ac0 <_Min_Stack_Size+0x458c0>
    5abc:	00009305 	andeq	r9, r0, r5, lsl #6
    5ac0:	6a910200 	bvs	fe4462c8 <BootRAM+0xd3b6a69>
    5ac4:	00241516 	eoreq	r1, r4, r6, lsl r5
    5ac8:	056d0100 	strbeq	r0, [sp, #-256]!	; 0xffffff00
    5acc:	00000093 	muleq	r0, r3, r0
    5ad0:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5ad4:	00247514 	eoreq	r7, r4, r4, lsl r5
    5ad8:	05810100 	streq	r0, [r1, #256]	; 0x100
    5adc:	00000000 	andeq	r0, r0, r0
    5ae0:	0000003e 	andeq	r0, r0, lr, lsr r0
    5ae4:	0dbe9c01 	ldceq	12, cr9, [lr, #4]!
    5ae8:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5aec:	01000028 	tsteq	r0, r8, lsr #32
    5af0:	04c20581 	strbeq	r0, [r2], #1409	; 0x581
    5af4:	91020000 	mrsls	r0, (UNDEF: 2)
    5af8:	16ec1574 			; <UNDEFINED> instruction: 0x16ec1574
    5afc:	81010000 	mrshi	r0, (UNDEF: 1)
    5b00:	0000f905 	andeq	pc, r0, r5, lsl #18
    5b04:	73910200 	orrsvc	r0, r1, #0, 4
    5b08:	26e21400 	strbtcs	r1, [r2], r0, lsl #8
    5b0c:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    5b10:	00000005 	andeq	r0, r0, r5
    5b14:	00003e00 	andeq	r3, r0, r0, lsl #28
    5b18:	f39c0100 	vaddw.u16	q0, q6, d0
    5b1c:	1500000d 	strne	r0, [r0, #-13]
    5b20:	0000280e 	andeq	r2, r0, lr, lsl #16
    5b24:	c2059901 	andgt	r9, r5, #16384	; 0x4000
    5b28:	02000004 	andeq	r0, r0, #4
    5b2c:	ec157491 	cfldrs	mvf7, [r5], {145}	; 0x91
    5b30:	01000016 	tsteq	r0, r6, lsl r0
    5b34:	00f90599 	smlalseq	r0, r9, r9, r5
    5b38:	91020000 	mrsls	r0, (UNDEF: 2)
    5b3c:	70140073 	andsvc	r0, r4, r3, ror r0
    5b40:	01000026 	tsteq	r0, r6, lsr #32
    5b44:	000005b2 			; <UNDEFINED> instruction: 0x000005b2
    5b48:	003e0000 	eorseq	r0, lr, r0
    5b4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5b50:	00000e28 	andeq	r0, r0, r8, lsr #28
    5b54:	00280e15 	eoreq	r0, r8, r5, lsl lr
    5b58:	05b20100 	ldreq	r0, [r2, #256]!	; 0x100
    5b5c:	000004c2 	andeq	r0, r0, r2, asr #9
    5b60:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    5b64:	000016ec 	andeq	r1, r0, ip, ror #13
    5b68:	f905b201 			; <UNDEFINED> instruction: 0xf905b201
    5b6c:	02000000 	andeq	r0, r0, #0
    5b70:	14007391 	strne	r7, [r0], #-913	; 0xfffffc6f
    5b74:	00002ceb 	andeq	r2, r0, fp, ror #25
    5b78:	0005cb01 	andeq	ip, r5, r1, lsl #22
    5b7c:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    5b80:	01000000 	mrseq	r0, (UNDEF: 0)
    5b84:	000e5d9c 	muleq	lr, ip, sp
    5b88:	280e1500 	stmdacs	lr, {r8, sl, ip}
    5b8c:	cb010000 	blgt	45b94 <_Min_Stack_Size+0x45994>
    5b90:	0004c205 	andeq	ip, r4, r5, lsl #4
    5b94:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5b98:	0016ec15 	andseq	lr, r6, r5, lsl ip
    5b9c:	05cb0100 	strbeq	r0, [fp, #256]	; 0x100
    5ba0:	000000f9 	strdeq	r0, [r0], -r9
    5ba4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    5ba8:	00268c14 	eoreq	r8, r6, r4, lsl ip
    5bac:	05e50100 	strbeq	r0, [r5, #256]!	; 0x100
    5bb0:	00000000 	andeq	r0, r0, r0
    5bb4:	00000036 	andeq	r0, r0, r6, lsr r0
    5bb8:	0ea19c01 	cdpeq	12, 10, cr9, cr1, cr1, {0}
    5bbc:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5bc0:	01000028 	tsteq	r0, r8, lsr #32
    5bc4:	04c205e5 	strbeq	r0, [r2], #1509	; 0x5e5
    5bc8:	91020000 	mrsls	r0, (UNDEF: 2)
    5bcc:	2541156c 	strbcs	r1, [r1, #-1388]	; 0xfffffa94
    5bd0:	e5010000 	str	r0, [r1, #-0]
    5bd4:	00009305 	andeq	r9, r0, r5, lsl #6
    5bd8:	6a910200 	bvs	fe4463e0 <BootRAM+0xd3b6b81>
    5bdc:	00240c16 	eoreq	r0, r4, r6, lsl ip
    5be0:	05e70100 	strbeq	r0, [r7, #256]!	; 0x100
    5be4:	00000093 	muleq	r0, r3, r0
    5be8:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5bec:	0024b514 	eoreq	fp, r4, r4, lsl r5
    5bf0:	05fe0100 	ldrbeq	r0, [lr, #256]!	; 0x100
    5bf4:	00000000 	andeq	r0, r0, r0
    5bf8:	0000003a 	andeq	r0, r0, sl, lsr r0
    5bfc:	0ee59c01 	cdpeq	12, 14, cr9, cr5, cr1, {0}
    5c00:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5c04:	01000028 	tsteq	r0, r8, lsr #32
    5c08:	04c205fe 	strbeq	r0, [r2], #1534	; 0x5fe
    5c0c:	91020000 	mrsls	r0, (UNDEF: 2)
    5c10:	2541156c 	strbcs	r1, [r1, #-1388]	; 0xfffffa94
    5c14:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    5c18:	00009305 	andeq	r9, r0, r5, lsl #6
    5c1c:	6a910200 	bvs	fe446424 <BootRAM+0xd3b6bc5>
    5c20:	00240c16 	eoreq	r0, r4, r6, lsl ip
    5c24:	06000100 	streq	r0, [r0], -r0, lsl #2
    5c28:	00000093 	muleq	r0, r3, r0
    5c2c:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5c30:	002e2a14 	eoreq	r2, lr, r4, lsl sl
    5c34:	06160100 	ldreq	r0, [r6], -r0, lsl #2
    5c38:	00000000 	andeq	r0, r0, r0
    5c3c:	00000036 	andeq	r0, r0, r6, lsr r0
    5c40:	0f299c01 	svceq	0x00299c01
    5c44:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5c48:	01000028 	tsteq	r0, r8, lsr #32
    5c4c:	04c20616 	strbeq	r0, [r2], #1558	; 0x616
    5c50:	91020000 	mrsls	r0, (UNDEF: 2)
    5c54:	2541156c 	strbcs	r1, [r1, #-1388]	; 0xfffffa94
    5c58:	16010000 	strne	r0, [r1], -r0
    5c5c:	00009306 	andeq	r9, r0, r6, lsl #6
    5c60:	6a910200 	bvs	fe446468 <BootRAM+0xd3b6c09>
    5c64:	00241516 	eoreq	r1, r4, r6, lsl r5
    5c68:	06180100 	ldreq	r0, [r8], -r0, lsl #2
    5c6c:	00000093 	muleq	r0, r3, r0
    5c70:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5c74:	002c8414 	eoreq	r8, ip, r4, lsl r4
    5c78:	062e0100 	strteq	r0, [lr], -r0, lsl #2
    5c7c:	00000000 	andeq	r0, r0, r0
    5c80:	0000003a 	andeq	r0, r0, sl, lsr r0
    5c84:	0f6d9c01 	svceq	0x006d9c01
    5c88:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5c8c:	01000028 	tsteq	r0, r8, lsr #32
    5c90:	04c2062e 	strbeq	r0, [r2], #1582	; 0x62e
    5c94:	91020000 	mrsls	r0, (UNDEF: 2)
    5c98:	2541156c 	strbcs	r1, [r1, #-1388]	; 0xfffffa94
    5c9c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    5ca0:	00009306 	andeq	r9, r0, r6, lsl #6
    5ca4:	6a910200 	bvs	fe4464ac <BootRAM+0xd3b6c4d>
    5ca8:	00241516 	eoreq	r1, r4, r6, lsl r5
    5cac:	06300100 	ldrteq	r0, [r0], -r0, lsl #2
    5cb0:	00000093 	muleq	r0, r3, r0
    5cb4:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5cb8:	002e5314 	eoreq	r5, lr, r4, lsl r3
    5cbc:	06460100 	strbeq	r0, [r6], -r0, lsl #2
    5cc0:	00000000 	andeq	r0, r0, r0
    5cc4:	00000036 	andeq	r0, r0, r6, lsr r0
    5cc8:	0fb19c01 	svceq	0x00b19c01
    5ccc:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5cd0:	01000028 	tsteq	r0, r8, lsr #32
    5cd4:	04c20646 	strbeq	r0, [r2], #1606	; 0x646
    5cd8:	91020000 	mrsls	r0, (UNDEF: 2)
    5cdc:	24ec156c 	strbtcs	r1, [ip], #1388	; 0x56c
    5ce0:	46010000 	strmi	r0, [r1], -r0
    5ce4:	00009306 	andeq	r9, r0, r6, lsl #6
    5ce8:	6a910200 	bvs	fe4464f0 <BootRAM+0xd3b6c91>
    5cec:	00240c16 	eoreq	r0, r4, r6, lsl ip
    5cf0:	06480100 	strbeq	r0, [r8], -r0, lsl #2
    5cf4:	00000093 	muleq	r0, r3, r0
    5cf8:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5cfc:	002b7714 	eoreq	r7, fp, r4, lsl r7
    5d00:	06600100 	strbteq	r0, [r0], -r0, lsl #2
    5d04:	00000000 	andeq	r0, r0, r0
    5d08:	0000003a 	andeq	r0, r0, sl, lsr r0
    5d0c:	0ff59c01 	svceq	0x00f59c01
    5d10:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5d14:	01000028 	tsteq	r0, r8, lsr #32
    5d18:	04c20660 	strbeq	r0, [r2], #1632	; 0x660
    5d1c:	91020000 	mrsls	r0, (UNDEF: 2)
    5d20:	24ec156c 	strbtcs	r1, [ip], #1388	; 0x56c
    5d24:	60010000 	andvs	r0, r1, r0
    5d28:	00009306 	andeq	r9, r0, r6, lsl #6
    5d2c:	6a910200 	bvs	fe446534 <BootRAM+0xd3b6cd5>
    5d30:	00240c16 	eoreq	r0, r4, r6, lsl ip
    5d34:	06620100 	strbteq	r0, [r2], -r0, lsl #2
    5d38:	00000093 	muleq	r0, r3, r0
    5d3c:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5d40:	002e1814 	eoreq	r1, lr, r4, lsl r8
    5d44:	06790100 	ldrbteq	r0, [r9], -r0, lsl #2
    5d48:	00000000 	andeq	r0, r0, r0
    5d4c:	00000036 	andeq	r0, r0, r6, lsr r0
    5d50:	10399c01 	eorsne	r9, r9, r1, lsl #24
    5d54:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5d58:	01000028 	tsteq	r0, r8, lsr #32
    5d5c:	04c20679 	strbeq	r0, [r2], #1657	; 0x679
    5d60:	91020000 	mrsls	r0, (UNDEF: 2)
    5d64:	24ec156c 	strbtcs	r1, [ip], #1388	; 0x56c
    5d68:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    5d6c:	00009306 	andeq	r9, r0, r6, lsl #6
    5d70:	6a910200 	bvs	fe446578 <BootRAM+0xd3b6d19>
    5d74:	00241516 	eoreq	r1, r4, r6, lsl r5
    5d78:	067b0100 	ldrbteq	r0, [fp], -r0, lsl #2
    5d7c:	00000093 	muleq	r0, r3, r0
    5d80:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5d84:	002b8914 	eoreq	r8, fp, r4, lsl r9
    5d88:	06920100 	ldreq	r0, [r2], r0, lsl #2
    5d8c:	00000000 	andeq	r0, r0, r0
    5d90:	0000003a 	andeq	r0, r0, sl, lsr r0
    5d94:	107d9c01 	rsbsne	r9, sp, r1, lsl #24
    5d98:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5d9c:	01000028 	tsteq	r0, r8, lsr #32
    5da0:	04c20692 	strbeq	r0, [r2], #1682	; 0x692
    5da4:	91020000 	mrsls	r0, (UNDEF: 2)
    5da8:	24ec156c 	strbtcs	r1, [ip], #1388	; 0x56c
    5dac:	92010000 	andls	r0, r1, #0
    5db0:	00009306 	andeq	r9, r0, r6, lsl #6
    5db4:	6a910200 	bvs	fe4465bc <BootRAM+0xd3b6d5d>
    5db8:	00241516 	eoreq	r1, r4, r6, lsl r5
    5dbc:	06940100 	ldreq	r0, [r4], r0, lsl #2
    5dc0:	00000093 	muleq	r0, r3, r0
    5dc4:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5dc8:	0023b114 	eoreq	fp, r3, r4, lsl r1
    5dcc:	06ab0100 	strteq	r0, [fp], r0, lsl #2
    5dd0:	00000000 	andeq	r0, r0, r0
    5dd4:	00000036 	andeq	r0, r0, r6, lsr r0
    5dd8:	10c19c01 	sbcne	r9, r1, r1, lsl #24
    5ddc:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5de0:	01000028 	tsteq	r0, r8, lsr #32
    5de4:	04c206ab 	strbeq	r0, [r2], #1707	; 0x6ab
    5de8:	91020000 	mrsls	r0, (UNDEF: 2)
    5dec:	2de9156c 	cfstr64cs	mvdx1, [r9, #432]!	; 0x1b0
    5df0:	ab010000 	blge	45df8 <_Min_Stack_Size+0x45bf8>
    5df4:	00009306 	andeq	r9, r0, r6, lsl #6
    5df8:	6a910200 	bvs	fe446600 <BootRAM+0xd3b6da1>
    5dfc:	00240c16 	eoreq	r0, r4, r6, lsl ip
    5e00:	06ad0100 	strteq	r0, [sp], r0, lsl #2
    5e04:	00000093 	muleq	r0, r3, r0
    5e08:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5e0c:	002daf14 	eoreq	sl, sp, r4, lsl pc
    5e10:	06c50100 	strbeq	r0, [r5], r0, lsl #2
    5e14:	00000000 	andeq	r0, r0, r0
    5e18:	0000003a 	andeq	r0, r0, sl, lsr r0
    5e1c:	11059c01 	tstne	r5, r1, lsl #24
    5e20:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5e24:	01000028 	tsteq	r0, r8, lsr #32
    5e28:	04c206c5 	strbeq	r0, [r2], #1733	; 0x6c5
    5e2c:	91020000 	mrsls	r0, (UNDEF: 2)
    5e30:	2de9156c 	cfstr64cs	mvdx1, [r9, #432]!	; 0x1b0
    5e34:	c5010000 	strgt	r0, [r1, #-0]
    5e38:	00009306 	andeq	r9, r0, r6, lsl #6
    5e3c:	6a910200 	bvs	fe446644 <BootRAM+0xd3b6de5>
    5e40:	00240c16 	eoreq	r0, r4, r6, lsl ip
    5e44:	06c70100 	strbeq	r0, [r7], r0, lsl #2
    5e48:	00000093 	muleq	r0, r3, r0
    5e4c:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5e50:	00291e14 	eoreq	r1, r9, r4, lsl lr
    5e54:	06dd0100 	ldrbeq	r0, [sp], r0, lsl #2
    5e58:	00000000 	andeq	r0, r0, r0
    5e5c:	00000036 	andeq	r0, r0, r6, lsr r0
    5e60:	11499c01 	cmpne	r9, r1, lsl #24
    5e64:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5e68:	01000028 	tsteq	r0, r8, lsr #32
    5e6c:	04c206dd 	strbeq	r0, [r2], #1757	; 0x6dd
    5e70:	91020000 	mrsls	r0, (UNDEF: 2)
    5e74:	2de9156c 	cfstr64cs	mvdx1, [r9, #432]!	; 0x1b0
    5e78:	dd010000 	stcle	0, cr0, [r1, #-0]
    5e7c:	00009306 	andeq	r9, r0, r6, lsl #6
    5e80:	6a910200 	bvs	fe446688 <BootRAM+0xd3b6e29>
    5e84:	00241516 	eoreq	r1, r4, r6, lsl r5
    5e88:	06df0100 	ldrbeq	r0, [pc], r0, lsl #2
    5e8c:	00000093 	muleq	r0, r3, r0
    5e90:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5e94:	002cb214 	eoreq	fp, ip, r4, lsl r2
    5e98:	06f50100 	ldrbteq	r0, [r5], r0, lsl #2
    5e9c:	00000000 	andeq	r0, r0, r0
    5ea0:	0000003a 	andeq	r0, r0, sl, lsr r0
    5ea4:	118d9c01 	orrne	r9, sp, r1, lsl #24
    5ea8:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5eac:	01000028 	tsteq	r0, r8, lsr #32
    5eb0:	04c206f5 	strbeq	r0, [r2], #1781	; 0x6f5
    5eb4:	91020000 	mrsls	r0, (UNDEF: 2)
    5eb8:	2de9156c 	cfstr64cs	mvdx1, [r9, #432]!	; 0x1b0
    5ebc:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    5ec0:	00009306 	andeq	r9, r0, r6, lsl #6
    5ec4:	6a910200 	bvs	fe4466cc <BootRAM+0xd3b6e6d>
    5ec8:	00241516 	eoreq	r1, r4, r6, lsl r5
    5ecc:	06f70100 	ldrbteq	r0, [r7], r0, lsl #2
    5ed0:	00000093 	muleq	r0, r3, r0
    5ed4:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5ed8:	00293b14 	eoreq	r3, r9, r4, lsl fp
    5edc:	070d0100 	streq	r0, [sp, -r0, lsl #2]
    5ee0:	00000000 	andeq	r0, r0, r0
    5ee4:	00000036 	andeq	r0, r0, r6, lsr r0
    5ee8:	11d19c01 	bicsne	r9, r1, r1, lsl #24
    5eec:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5ef0:	01000028 	tsteq	r0, r8, lsr #32
    5ef4:	04c2070d 	strbeq	r0, [r2], #1805	; 0x70d
    5ef8:	91020000 	mrsls	r0, (UNDEF: 2)
    5efc:	271a156c 	ldrcs	r1, [sl, -ip, ror #10]
    5f00:	0d010000 	stceq	0, cr0, [r1, #-0]
    5f04:	00009307 	andeq	r9, r0, r7, lsl #6
    5f08:	6a910200 	bvs	fe446710 <BootRAM+0xd3b6eb1>
    5f0c:	0026f016 	eoreq	pc, r6, r6, lsl r0	; <UNPREDICTABLE>
    5f10:	070f0100 	streq	r0, [pc, -r0, lsl #2]
    5f14:	00000093 	muleq	r0, r3, r0
    5f18:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5f1c:	002cd414 	eoreq	sp, ip, r4, lsl r4
    5f20:	07240100 	streq	r0, [r4, -r0, lsl #2]!
    5f24:	00000000 	andeq	r0, r0, r0
    5f28:	00000036 	andeq	r0, r0, r6, lsr r0
    5f2c:	12159c01 	andsne	r9, r5, #256	; 0x100
    5f30:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5f34:	01000028 	tsteq	r0, r8, lsr #32
    5f38:	04c20724 	strbeq	r0, [r2], #1828	; 0x724
    5f3c:	91020000 	mrsls	r0, (UNDEF: 2)
    5f40:	2b9b156c 	blcs	fe6cb4f8 <BootRAM+0xd63bc99>
    5f44:	24010000 	strcs	r0, [r1], #-0
    5f48:	00009307 	andeq	r9, r0, r7, lsl #6
    5f4c:	6a910200 	bvs	fe446754 <BootRAM+0xd3b6ef5>
    5f50:	0026f016 	eoreq	pc, r6, r6, lsl r0	; <UNPREDICTABLE>
    5f54:	07260100 	streq	r0, [r6, -r0, lsl #2]!
    5f58:	00000093 	muleq	r0, r3, r0
    5f5c:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5f60:	00245f14 	eoreq	r5, r4, r4, lsl pc
    5f64:	073c0100 	ldreq	r0, [ip, -r0, lsl #2]!
    5f68:	00000000 	andeq	r0, r0, r0
    5f6c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5f70:	12599c01 	subsne	r9, r9, #256	; 0x100
    5f74:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5f78:	01000028 	tsteq	r0, r8, lsr #32
    5f7c:	04c2073c 	strbeq	r0, [r2], #1852	; 0x73c
    5f80:	91020000 	mrsls	r0, (UNDEF: 2)
    5f84:	271a156c 	ldrcs	r1, [sl, -ip, ror #10]
    5f88:	3c010000 	stccc	0, cr0, [r1], {-0}
    5f8c:	00009307 	andeq	r9, r0, r7, lsl #6
    5f90:	6a910200 	bvs	fe446798 <BootRAM+0xd3b6f39>
    5f94:	0026f016 	eoreq	pc, r6, r6, lsl r0	; <UNPREDICTABLE>
    5f98:	073e0100 	ldreq	r0, [lr, -r0, lsl #2]!
    5f9c:	00000093 	muleq	r0, r3, r0
    5fa0:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5fa4:	0026f814 	eoreq	pc, r6, r4, lsl r8	; <UNPREDICTABLE>
    5fa8:	07530100 	ldrbeq	r0, [r3, -r0, lsl #2]
    5fac:	00000000 	andeq	r0, r0, r0
    5fb0:	0000003a 	andeq	r0, r0, sl, lsr r0
    5fb4:	129d9c01 	addsne	r9, sp, #256	; 0x100
    5fb8:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    5fbc:	01000028 	tsteq	r0, r8, lsr #32
    5fc0:	04c20753 	strbeq	r0, [r2], #1875	; 0x753
    5fc4:	91020000 	mrsls	r0, (UNDEF: 2)
    5fc8:	2b9b156c 	blcs	fe6cb580 <BootRAM+0xd63bd21>
    5fcc:	53010000 	movwpl	r0, #4096	; 0x1000
    5fd0:	00009307 	andeq	r9, r0, r7, lsl #6
    5fd4:	6a910200 	bvs	fe4467dc <BootRAM+0xd3b6f7d>
    5fd8:	0026f016 	eoreq	pc, r6, r6, lsl r0	; <UNPREDICTABLE>
    5fdc:	07550100 	ldrbeq	r0, [r5, -r0, lsl #2]
    5fe0:	00000093 	muleq	r0, r3, r0
    5fe4:	00769102 	rsbseq	r9, r6, r2, lsl #2
    5fe8:	002d5114 	eoreq	r5, sp, r4, lsl r1
    5fec:	076b0100 	strbeq	r0, [fp, -r0, lsl #2]!
    5ff0:	00000000 	andeq	r0, r0, r0
    5ff4:	0000003a 	andeq	r0, r0, sl, lsr r0
    5ff8:	12e19c01 	rscne	r9, r1, #256	; 0x100
    5ffc:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    6000:	01000028 	tsteq	r0, r8, lsr #32
    6004:	04c2076b 	strbeq	r0, [r2], #1899	; 0x76b
    6008:	91020000 	mrsls	r0, (UNDEF: 2)
    600c:	271a156c 	ldrcs	r1, [sl, -ip, ror #10]
    6010:	6b010000 	blvs	46018 <_Min_Stack_Size+0x45e18>
    6014:	00009307 	andeq	r9, r0, r7, lsl #6
    6018:	6a910200 	bvs	fe446820 <BootRAM+0xd3b6fc1>
    601c:	0026f016 	eoreq	pc, r6, r6, lsl r0	; <UNPREDICTABLE>
    6020:	076d0100 	strbeq	r0, [sp, -r0, lsl #2]!
    6024:	00000093 	muleq	r0, r3, r0
    6028:	00769102 	rsbseq	r9, r6, r2, lsl #2
    602c:	002b0314 	eoreq	r0, fp, r4, lsl r3
    6030:	07820100 	streq	r0, [r2, r0, lsl #2]
    6034:	00000000 	andeq	r0, r0, r0
    6038:	0000003a 	andeq	r0, r0, sl, lsr r0
    603c:	13259c01 			; <UNDEFINED> instruction: 0x13259c01
    6040:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    6044:	01000028 	tsteq	r0, r8, lsr #32
    6048:	04c20782 	strbeq	r0, [r2], #1922	; 0x782
    604c:	91020000 	mrsls	r0, (UNDEF: 2)
    6050:	2b9b156c 	blcs	fe6cb608 <BootRAM+0xd63bda9>
    6054:	82010000 	andhi	r0, r1, #0
    6058:	00009307 	andeq	r9, r0, r7, lsl #6
    605c:	6a910200 	bvs	fe446864 <BootRAM+0xd3b7005>
    6060:	0026f016 	eoreq	pc, r6, r6, lsl r0	; <UNPREDICTABLE>
    6064:	07840100 	streq	r0, [r4, r0, lsl #2]
    6068:	00000093 	muleq	r0, r3, r0
    606c:	00769102 	rsbseq	r9, r6, r2, lsl #2
    6070:	00282314 	eoreq	r2, r8, r4, lsl r3
    6074:	079b0100 	ldreq	r0, [fp, r0, lsl #2]
    6078:	00000000 	andeq	r0, r0, r0
    607c:	0000003a 	andeq	r0, r0, sl, lsr r0
    6080:	13699c01 	cmnne	r9, #256	; 0x100
    6084:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    6088:	01000028 	tsteq	r0, r8, lsr #32
    608c:	04c2079b 	strbeq	r0, [r2], #1947	; 0x79b
    6090:	91020000 	mrsls	r0, (UNDEF: 2)
    6094:	271a156c 	ldrcs	r1, [sl, -ip, ror #10]
    6098:	9b010000 	blls	460a0 <_Min_Stack_Size+0x45ea0>
    609c:	00009307 	andeq	r9, r0, r7, lsl #6
    60a0:	6a910200 	bvs	fe4468a8 <BootRAM+0xd3b7049>
    60a4:	0026f016 	eoreq	pc, r6, r6, lsl r0	; <UNPREDICTABLE>
    60a8:	079d0100 	ldreq	r0, [sp, r0, lsl #2]
    60ac:	00000093 	muleq	r0, r3, r0
    60b0:	00769102 	rsbseq	r9, r6, r2, lsl #2
    60b4:	00253614 	eoreq	r3, r5, r4, lsl r6
    60b8:	07b60100 	ldreq	r0, [r6, r0, lsl #2]!
    60bc:	00000000 	andeq	r0, r0, r0
    60c0:	00000054 	andeq	r0, r0, r4, asr r0
    60c4:	13bc9c01 			; <UNDEFINED> instruction: 0x13bc9c01
    60c8:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    60cc:	01000028 	tsteq	r0, r8, lsr #32
    60d0:	04c207b6 	strbeq	r0, [r2], #1974	; 0x7b6
    60d4:	91020000 	mrsls	r0, (UNDEF: 2)
    60d8:	24f7156c 	ldrbtcs	r1, [r7], #1388	; 0x56c
    60dc:	b6010000 	strlt	r0, [r1], -r0
    60e0:	00009307 	andeq	r9, r0, r7, lsl #6
    60e4:	6a910200 	bvs	fe4468ec <BootRAM+0xd3b708d>
    60e8:	002a2015 	eoreq	r2, sl, r5, lsl r0
    60ec:	07b60100 	ldreq	r0, [r6, r0, lsl #2]!
    60f0:	00000093 	muleq	r0, r3, r0
    60f4:	18689102 	stmdane	r8!, {r1, r8, ip, pc}^
    60f8:	00706d74 	rsbseq	r6, r0, r4, ror sp
    60fc:	9307b801 	movwls	fp, #30721	; 0x7801
    6100:	02000000 	andeq	r0, r0, #0
    6104:	14007691 	strne	r7, [r0], #-1681	; 0xfffff96f
    6108:	00002989 	andeq	r2, r0, r9, lsl #19
    610c:	0007d401 	andeq	sp, r7, r1, lsl #8
    6110:	54000000 	strpl	r0, [r0], #-0
    6114:	01000000 	mrseq	r0, (UNDEF: 0)
    6118:	00140f9c 	mulseq	r4, ip, pc	; <UNPREDICTABLE>
    611c:	280e1500 	stmdacs	lr, {r8, sl, ip}
    6120:	d4010000 	strle	r0, [r1], #-0
    6124:	0004c207 	andeq	ip, r4, r7, lsl #4
    6128:	6c910200 	lfmvs	f0, 4, [r1], {0}
    612c:	0024f715 	eoreq	pc, r4, r5, lsl r7	; <UNPREDICTABLE>
    6130:	07d40100 	ldrbeq	r0, [r4, r0, lsl #2]
    6134:	00000093 	muleq	r0, r3, r0
    6138:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
    613c:	00002667 	andeq	r2, r0, r7, ror #12
    6140:	9307d401 	movwls	sp, #29697	; 0x7401
    6144:	02000000 	andeq	r0, r0, #0
    6148:	74186891 	ldrvc	r6, [r8], #-2193	; 0xfffff76f
    614c:	0100706d 	tsteq	r0, sp, rrx
    6150:	009307d6 			; <UNDEFINED> instruction: 0x009307d6
    6154:	91020000 	mrsls	r0, (UNDEF: 2)
    6158:	5d140076 	ldcpl	0, cr0, [r4, #-472]	; 0xfffffe28
    615c:	0100002c 	tsteq	r0, ip, lsr #32
    6160:	000007fd 	strdeq	r0, [r0], -sp
    6164:	00ac0000 	adceq	r0, ip, r0
    6168:	9c010000 	stcls	0, cr0, [r1], {-0}
    616c:	00001471 	andeq	r1, r0, r1, ror r4
    6170:	00280e15 	eoreq	r0, r8, r5, lsl lr
    6174:	07fd0100 	ldrbeq	r0, [sp, r0, lsl #2]!
    6178:	000004c2 	andeq	r0, r0, r2, asr #9
    617c:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    6180:	000024f7 	strdeq	r2, [r0], -r7
    6184:	9307fd01 	movwls	pc, #32001	; 0x7d01	; <UNPREDICTABLE>
    6188:	02000000 	andeq	r0, r0, #0
    618c:	a7156a91 			; <UNDEFINED> instruction: 0xa7156a91
    6190:	0100002c 	tsteq	r0, ip, lsr #32
    6194:	009307fd 			; <UNDEFINED> instruction: 0x009307fd
    6198:	91020000 	mrsls	r0, (UNDEF: 2)
    619c:	6d741868 	ldclvs	8, cr1, [r4, #-416]!	; 0xfffffe60
    61a0:	ff010070 			; <UNDEFINED> instruction: 0xff010070
    61a4:	00009e07 	andeq	r9, r0, r7, lsl #28
    61a8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    61ac:	001e6016 	andseq	r6, lr, r6, lsl r0
    61b0:	08000100 	stmdaeq	r0, {r8}
    61b4:	00000093 	muleq	r0, r3, r0
    61b8:	00729102 	rsbseq	r9, r2, r2, lsl #2
    61bc:	0023ea14 	eoreq	lr, r3, r4, lsl sl
    61c0:	082c0100 	stmdaeq	ip!, {r8}
    61c4:	00000000 	andeq	r0, r0, r0
    61c8:	0000003e 	andeq	r0, r0, lr, lsr r0
    61cc:	14a69c01 	strtne	r9, [r6], #3073	; 0xc01
    61d0:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    61d4:	01000028 	tsteq	r0, r8, lsr #32
    61d8:	04c2082c 	strbeq	r0, [r2], #2092	; 0x82c
    61dc:	91020000 	mrsls	r0, (UNDEF: 2)
    61e0:	16ec1574 			; <UNDEFINED> instruction: 0x16ec1574
    61e4:	2c010000 	stccs	0, cr0, [r1], {-0}
    61e8:	0000f908 	andeq	pc, r0, r8, lsl #18
    61ec:	73910200 	orrsvc	r0, r1, #0, 4
    61f0:	2c6c1400 	cfstrdcs	mvd1, [ip], #-0
    61f4:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    61f8:	00000008 	andeq	r0, r0, r8
    61fc:	00003e00 	andeq	r3, r0, r0, lsl #28
    6200:	db9c0100 	blle	fe706608 <BootRAM+0xd676da9>
    6204:	15000014 	strne	r0, [r0, #-20]	; 0xffffffec
    6208:	0000280e 	andeq	r2, r0, lr, lsl #16
    620c:	c2084801 	andgt	r4, r8, #65536	; 0x10000
    6210:	02000004 	andeq	r0, r0, #4
    6214:	56157491 			; <UNDEFINED> instruction: 0x56157491
    6218:	01000026 	tsteq	r0, r6, lsr #32
    621c:	00930848 	addseq	r0, r3, r8, asr #16
    6220:	91020000 	mrsls	r0, (UNDEF: 2)
    6224:	89140072 	ldmdbhi	r4, {r1, r4, r5, r6}
    6228:	0100002d 	tsteq	r0, sp, lsr #32
    622c:	00000860 	andeq	r0, r0, r0, ror #16
    6230:	003e0000 	eorseq	r0, lr, r0
    6234:	9c010000 	stcls	0, cr0, [r1], {-0}
    6238:	00001510 	andeq	r1, r0, r0, lsl r5
    623c:	00280e15 	eoreq	r0, r8, r5, lsl lr
    6240:	08600100 	stmdaeq	r0!, {r8}^
    6244:	000004c2 	andeq	r0, r0, r2, asr #9
    6248:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    624c:	000016ec 	andeq	r1, r0, ip, ror #13
    6250:	f9086001 			; <UNDEFINED> instruction: 0xf9086001
    6254:	02000000 	andeq	r0, r0, #0
    6258:	14007391 	strne	r7, [r0], #-913	; 0xfffffc6f
    625c:	0000230a 	andeq	r2, r0, sl, lsl #6
    6260:	00087a01 	andeq	r7, r8, r1, lsl #20
    6264:	36000000 	strcc	r0, [r0], -r0
    6268:	01000000 	mrseq	r0, (UNDEF: 0)
    626c:	0015459c 	mulseq	r5, ip, r5
    6270:	280e1500 	stmdacs	lr, {r8, sl, ip}
    6274:	7a010000 	bvc	4627c <_Min_Stack_Size+0x4607c>
    6278:	0004c208 	andeq	ip, r4, r8, lsl #4
    627c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6280:	0022eb15 	eoreq	lr, r2, r5, lsl fp
    6284:	087a0100 	ldmdaeq	sl!, {r8}^
    6288:	00000093 	muleq	r0, r3, r0
    628c:	00729102 	rsbseq	r9, r2, r2, lsl #2
    6290:	00284d14 	eoreq	r4, r8, r4, lsl sp
    6294:	089a0100 	ldmeq	sl, {r8}
    6298:	00000000 	andeq	r0, r0, r0
    629c:	00000036 	andeq	r0, r0, r6, lsr r0
    62a0:	157a9c01 	ldrbne	r9, [sl, #-3073]!	; 0xfffff3ff
    62a4:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    62a8:	01000028 	tsteq	r0, r8, lsr #32
    62ac:	04c2089a 	strbeq	r0, [r2], #2202	; 0x89a
    62b0:	91020000 	mrsls	r0, (UNDEF: 2)
    62b4:	237e1574 	cmncs	lr, #116, 10	; 0x1d000000
    62b8:	9a010000 	bls	462c0 <_Min_Stack_Size+0x460c0>
    62bc:	00009308 	andeq	r9, r0, r8, lsl #6
    62c0:	72910200 	addsvc	r0, r1, #0, 4
    62c4:	27961400 	ldrcs	r1, [r6, r0, lsl #8]
    62c8:	b1010000 	mrslt	r0, (UNDEF: 1)
    62cc:	00000008 	andeq	r0, r0, r8
    62d0:	00003600 	andeq	r3, r0, r0, lsl #12
    62d4:	af9c0100 	svcge	0x009c0100
    62d8:	15000015 	strne	r0, [r0, #-21]	; 0xffffffeb
    62dc:	0000280e 	andeq	r2, r0, lr, lsl #16
    62e0:	c208b101 	andgt	fp, r8, #1073741824	; 0x40000000
    62e4:	02000004 	andeq	r0, r0, #4
    62e8:	99157491 	ldmdbls	r5, {r0, r4, r7, sl, ip, sp, lr}
    62ec:	0100002c 	tsteq	r0, ip, lsr #32
    62f0:	009308b1 			; <UNDEFINED> instruction: 0x009308b1
    62f4:	91020000 	mrsls	r0, (UNDEF: 2)
    62f8:	aa140072 	bge	5064c8 <_Min_Stack_Size+0x5062c8>
    62fc:	01000027 	tsteq	r0, r7, lsr #32
    6300:	000008c6 	andeq	r0, r0, r6, asr #17
    6304:	00360000 	eorseq	r0, r6, r0
    6308:	9c010000 	stcls	0, cr0, [r1], {-0}
    630c:	000015e4 	andeq	r1, r0, r4, ror #11
    6310:	00280e15 	eoreq	r0, r8, r5, lsl lr
    6314:	08c60100 	stmiaeq	r6, {r8}^
    6318:	000004c2 	andeq	r0, r0, r2, asr #9
    631c:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    6320:	00002782 	andeq	r2, r0, r2, lsl #15
    6324:	9308c601 	movwls	ip, #34305	; 0x8601
    6328:	02000000 	andeq	r0, r0, #0
    632c:	14007291 	strne	r7, [r0], #-657	; 0xfffffd6f
    6330:	00002d39 	andeq	r2, r0, r9, lsr sp
    6334:	0008d801 	andeq	sp, r8, r1, lsl #16
    6338:	1c000000 	stcne	0, cr0, [r0], {-0}
    633c:	01000000 	mrseq	r0, (UNDEF: 0)
    6340:	0016199c 	mulseq	r6, ip, r9
    6344:	280e1500 	stmdacs	lr, {r8, sl, ip}
    6348:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    634c:	0004c208 	andeq	ip, r4, r8, lsl #4
    6350:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6354:	00374f15 	eorseq	r4, r7, r5, lsl pc
    6358:	08d80100 	ldmeq	r8, {r8}^
    635c:	00000093 	muleq	r0, r3, r0
    6360:	00729102 	rsbseq	r9, r2, r2, lsl #2
    6364:	0025e414 	eoreq	lr, r5, r4, lsl r4
    6368:	08e60100 	stmiaeq	r6!, {r8}^
    636c:	00000000 	andeq	r0, r0, r0
    6370:	0000001c 	andeq	r0, r0, ip, lsl r0
    6374:	164e9c01 	strbne	r9, [lr], -r1, lsl #24
    6378:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    637c:	01000028 	tsteq	r0, r8, lsr #32
    6380:	04c208e6 	strbeq	r0, [r2], #2278	; 0x8e6
    6384:	91020000 	mrsls	r0, (UNDEF: 2)
    6388:	25eb1574 	strbcs	r1, [fp, #1396]!	; 0x574
    638c:	e6010000 	str	r0, [r1], -r0
    6390:	00009308 	andeq	r9, r0, r8, lsl #6
    6394:	72910200 	addsvc	r0, r1, #0, 4
    6398:	23ca1400 	biccs	r1, sl, #0, 8
    639c:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    63a0:	00000008 	andeq	r0, r0, r8
    63a4:	00001c00 	andeq	r1, r0, r0, lsl #24
    63a8:	839c0100 	orrshi	r0, ip, #0, 2
    63ac:	15000016 	strne	r0, [r0, #-22]	; 0xffffffea
    63b0:	0000280e 	andeq	r2, r0, lr, lsl #16
    63b4:	c208f401 	andgt	pc, r8, #16777216	; 0x1000000
    63b8:	02000004 	andeq	r0, r0, #4
    63bc:	d1157491 			; <UNDEFINED> instruction: 0xd1157491
    63c0:	01000023 	tsteq	r0, r3, lsr #32
    63c4:	009308f4 			; <UNDEFINED> instruction: 0x009308f4
    63c8:	91020000 	mrsls	r0, (UNDEF: 2)
    63cc:	c2140072 	andsgt	r0, r4, #114	; 0x72
    63d0:	01000026 	tsteq	r0, r6, lsr #32
    63d4:	00000902 	andeq	r0, r0, r2, lsl #18
    63d8:	001c0000 	andseq	r0, ip, r0
    63dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    63e0:	000016b8 			; <UNDEFINED> instruction: 0x000016b8
    63e4:	00280e15 	eoreq	r0, r8, r5, lsl lr
    63e8:	09020100 	stmdbeq	r2, {r8}
    63ec:	000004c2 	andeq	r0, r0, r2, asr #9
    63f0:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    63f4:	000026c9 	andeq	r2, r0, r9, asr #13
    63f8:	93090201 	movwls	r0, #37377	; 0x9201
    63fc:	02000000 	andeq	r0, r0, #0
    6400:	14007291 	strne	r7, [r0], #-657	; 0xfffffd6f
    6404:	000026d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    6408:	00091001 	andeq	r1, r9, r1
    640c:	1c000000 	stcne	0, cr0, [r0], {-0}
    6410:	01000000 	mrseq	r0, (UNDEF: 0)
    6414:	0016ed9c 	mulseq	r6, ip, sp
    6418:	280e1500 	stmdacs	lr, {r8, sl, ip}
    641c:	10010000 	andne	r0, r1, r0
    6420:	0004c209 	andeq	ip, r4, r9, lsl #4
    6424:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6428:	0026d915 	eoreq	sp, r6, r5, lsl r9
    642c:	09100100 	ldmdbeq	r0, {r8}
    6430:	00000093 	muleq	r0, r3, r0
    6434:	00729102 	rsbseq	r9, r2, r2, lsl #2
    6438:	0029c614 	eoreq	ip, r9, r4, lsl r6
    643c:	091e0100 	ldmdbeq	lr, {r8}
    6440:	00000000 	andeq	r0, r0, r0
    6444:	0000001e 	andeq	r0, r0, lr, lsl r0
    6448:	17229c01 	strne	r9, [r2, -r1, lsl #24]!
    644c:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    6450:	01000028 	tsteq	r0, r8, lsr #32
    6454:	04c2091e 	strbeq	r0, [r2], #2334	; 0x91e
    6458:	91020000 	mrsls	r0, (UNDEF: 2)
    645c:	29cd1574 	stmibcs	sp, {r2, r4, r5, r6, r8, sl, ip}^
    6460:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    6464:	00009309 	andeq	r9, r0, r9, lsl #6
    6468:	72910200 	addsvc	r0, r1, #0, 4
    646c:	28651400 	stmdacs	r5!, {sl, ip}^
    6470:	31010000 	mrscc	r0, (UNDEF: 1)
    6474:	00000009 	andeq	r0, r0, r9
    6478:	00003600 	andeq	r3, r0, r0, lsl #12
    647c:	579c0100 	ldrpl	r0, [ip, r0, lsl #2]
    6480:	15000017 	strne	r0, [r0, #-23]	; 0xffffffe9
    6484:	0000280e 	andeq	r2, r0, lr, lsl #16
    6488:	c2093101 	andgt	r3, r9, #1073741824	; 0x40000000
    648c:	02000004 	andeq	r0, r0, #4
    6490:	f5157491 			; <UNDEFINED> instruction: 0xf5157491
    6494:	0100002d 	tsteq	r0, sp, lsr #32
    6498:	00930931 	addseq	r0, r3, r1, lsr r9
    649c:	91020000 	mrsls	r0, (UNDEF: 2)
    64a0:	bf140072 	svclt	0x00140072
    64a4:	0100002a 	tsteq	r0, sl, lsr #32
    64a8:	00000947 	andeq	r0, r0, r7, asr #18
    64ac:	003a0000 	eorseq	r0, sl, r0
    64b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    64b4:	0000178c 	andeq	r1, r0, ip, lsl #15
    64b8:	00280e15 	eoreq	r0, r8, r5, lsl lr
    64bc:	09470100 	stmdbeq	r7, {r8}^
    64c0:	000004c2 	andeq	r0, r0, r2, asr #9
    64c4:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    64c8:	00002df5 	strdeq	r2, [r0], -r5
    64cc:	93094701 	movwls	r4, #38657	; 0x9701
    64d0:	02000000 	andeq	r0, r0, #0
    64d4:	14007291 	strne	r7, [r0], #-657	; 0xfffffd6f
    64d8:	00002bdb 	ldrdeq	r2, [r0], -fp
    64dc:	00095d01 	andeq	r5, r9, r1, lsl #26
    64e0:	36000000 	strcc	r0, [r0], -r0
    64e4:	01000000 	mrseq	r0, (UNDEF: 0)
    64e8:	0017c19c 	mulseq	r7, ip, r1
    64ec:	280e1500 	stmdacs	lr, {r8, sl, ip}
    64f0:	5d010000 	stcpl	0, cr0, [r1, #-0]
    64f4:	0004c209 	andeq	ip, r4, r9, lsl #4
    64f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    64fc:	002df515 	eoreq	pc, sp, r5, lsl r5	; <UNPREDICTABLE>
    6500:	095d0100 	ldmdbeq	sp, {r8}^
    6504:	00000093 	muleq	r0, r3, r0
    6508:	00729102 	rsbseq	r9, r2, r2, lsl #2
    650c:	002e3f14 	eoreq	r3, lr, r4, lsl pc
    6510:	09730100 	ldmdbeq	r3!, {r8}^
    6514:	00000000 	andeq	r0, r0, r0
    6518:	0000003a 	andeq	r0, r0, sl, lsr r0
    651c:	17f69c01 	ldrbne	r9, [r6, r1, lsl #24]!
    6520:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    6524:	01000028 	tsteq	r0, r8, lsr #32
    6528:	04c20973 	strbeq	r0, [r2], #2419	; 0x973
    652c:	91020000 	mrsls	r0, (UNDEF: 2)
    6530:	2df51574 	cfldr64cs	mvdx1, [r5, #464]!	; 0x1d0
    6534:	73010000 	movwvc	r0, #4096	; 0x1000
    6538:	00009309 	andeq	r9, r0, r9, lsl #6
    653c:	72910200 	addsvc	r0, r1, #0, 4
    6540:	2a0b1400 	bcs	2cb548 <_Min_Stack_Size+0x2cb348>
    6544:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    6548:	00000009 	andeq	r0, r0, r9
    654c:	00003600 	andeq	r3, r0, r0, lsl #12
    6550:	2b9c0100 	blcs	fe706958 <BootRAM+0xd6770f9>
    6554:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
    6558:	0000280e 	andeq	r2, r0, lr, lsl #16
    655c:	c2098901 	andgt	r8, r9, #16384	; 0x4000
    6560:	02000004 	andeq	r0, r0, #4
    6564:	dc157491 	cfldrsle	mvf7, [r5], {145}	; 0x91
    6568:	01000025 	tsteq	r0, r5, lsr #32
    656c:	00930989 	addseq	r0, r3, r9, lsl #19
    6570:	91020000 	mrsls	r0, (UNDEF: 2)
    6574:	72190072 	andsvc	r0, r9, #114	; 0x72
    6578:	01000027 	tsteq	r0, r7, lsr #32
    657c:	00930999 	umullseq	r0, r3, r9, r9
    6580:	00000000 	andeq	r0, r0, r0
    6584:	001a0000 	andseq	r0, sl, r0
    6588:	9c010000 	stcls	0, cr0, [r1], {-0}
    658c:	00001855 	andeq	r1, r0, r5, asr r8
    6590:	00280e15 	eoreq	r0, r8, r5, lsl lr
    6594:	09990100 	ldmibeq	r9, {r8}
    6598:	000004c2 	andeq	r0, r0, r2, asr #9
    659c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    65a0:	00260719 	eoreq	r0, r6, r9, lsl r7
    65a4:	09a60100 	stmibeq	r6!, {r8}
    65a8:	00000093 	muleq	r0, r3, r0
    65ac:	00000000 	andeq	r0, r0, r0
    65b0:	0000001a 	andeq	r0, r0, sl, lsl r0
    65b4:	187f9c01 	ldmdane	pc!, {r0, sl, fp, ip, pc}^	; <UNPREDICTABLE>
    65b8:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    65bc:	01000028 	tsteq	r0, r8, lsr #32
    65c0:	04c209a6 	strbeq	r0, [r2], #2470	; 0x9a6
    65c4:	91020000 	mrsls	r0, (UNDEF: 2)
    65c8:	17190074 			; <UNDEFINED> instruction: 0x17190074
    65cc:	01000026 	tsteq	r0, r6, lsr #32
    65d0:	009309b3 			; <UNDEFINED> instruction: 0x009309b3
    65d4:	00000000 	andeq	r0, r0, r0
    65d8:	001a0000 	andseq	r0, sl, r0
    65dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    65e0:	000018a9 	andeq	r1, r0, r9, lsr #17
    65e4:	00280e15 	eoreq	r0, r8, r5, lsl lr
    65e8:	09b30100 	ldmibeq	r3!, {r8}
    65ec:	000004c2 	andeq	r0, r0, r2, asr #9
    65f0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    65f4:	00262719 	eoreq	r2, r6, r9, lsl r7
    65f8:	09c00100 	stmibeq	r0, {r8}^
    65fc:	00000093 	muleq	r0, r3, r0
    6600:	00000000 	andeq	r0, r0, r0
    6604:	0000001c 	andeq	r0, r0, ip, lsl r0
    6608:	18d39c01 	ldmne	r3, {r0, sl, fp, ip, pc}^
    660c:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    6610:	01000028 	tsteq	r0, r8, lsr #32
    6614:	04c209c0 	strbeq	r0, [r2], #2496	; 0x9c0
    6618:	91020000 	mrsls	r0, (UNDEF: 2)
    661c:	4c190074 	ldcmi	0, cr0, [r9], {116}	; 0x74
    6620:	01000027 	tsteq	r0, r7, lsr #32
    6624:	009309cd 	addseq	r0, r3, sp, asr #19
    6628:	00000000 	andeq	r0, r0, r0
    662c:	001a0000 	andseq	r0, sl, r0
    6630:	9c010000 	stcls	0, cr0, [r1], {-0}
    6634:	000018fd 	strdeq	r1, [r0], -sp
    6638:	00280e15 	eoreq	r0, r8, r5, lsl lr
    663c:	09cd0100 	stmibeq	sp, {r8}^
    6640:	000004c2 	andeq	r0, r0, r2, asr #9
    6644:	00749102 	rsbseq	r9, r4, r2, lsl #2
    6648:	00273b19 	eoreq	r3, r7, r9, lsl fp
    664c:	09da0100 	ldmibeq	sl, {r8}^
    6650:	00000093 	muleq	r0, r3, r0
    6654:	00000000 	andeq	r0, r0, r0
    6658:	0000001a 	andeq	r0, r0, sl, lsl r0
    665c:	19279c01 	stmdbne	r7!, {r0, sl, fp, ip, pc}
    6660:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    6664:	01000028 	tsteq	r0, r8, lsr #32
    6668:	04c209da 	strbeq	r0, [r2], #2522	; 0x9da
    666c:	91020000 	mrsls	r0, (UNDEF: 2)
    6670:	c4190074 	ldrgt	r0, [r9], #-116	; 0xffffff8c
    6674:	01000027 	tsteq	r0, r7, lsr #32
    6678:	00cb09fc 	strdeq	r0, [fp], #156	; 0x9c
    667c:	00000000 	andeq	r0, r0, r0
    6680:	00380000 	eorseq	r0, r8, r0
    6684:	9c010000 	stcls	0, cr0, [r1], {-0}
    6688:	0000196f 	andeq	r1, r0, pc, ror #18
    668c:	00280e15 	eoreq	r0, r8, r5, lsl lr
    6690:	09fc0100 	ldmibeq	ip!, {r8}^
    6694:	000004c2 	andeq	r0, r0, r2, asr #9
    6698:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    669c:	000023c1 	andeq	r2, r0, r1, asr #7
    66a0:	9309fc01 	movwls	pc, #39937	; 0x9c01	; <UNPREDICTABLE>
    66a4:	02000000 	andeq	r0, r0, #0
    66a8:	d9166a91 	ldmdble	r6, {r0, r4, r7, r9, fp, sp, lr}
    66ac:	01000019 	tsteq	r0, r9, lsl r0
    66b0:	00d709fe 	ldrsheq	r0, [r7], #158	; 0x9e
    66b4:	91020000 	mrsls	r0, (UNDEF: 2)
    66b8:	b4140077 	ldrlt	r0, [r4], #-119	; 0xffffff89
    66bc:	01000026 	tsteq	r0, r6, lsr #32
    66c0:	00000a28 	andeq	r0, r0, r8, lsr #20
    66c4:	00200000 	eoreq	r0, r0, r0
    66c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    66cc:	000019a4 	andeq	r1, r0, r4, lsr #19
    66d0:	00280e15 	eoreq	r0, r8, r5, lsl lr
    66d4:	0a280100 	beq	a06adc <_Min_Stack_Size+0xa068dc>
    66d8:	000004c2 	andeq	r0, r0, r2, asr #9
    66dc:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    66e0:	000023c1 	andeq	r2, r0, r1, asr #7
    66e4:	930a2801 	movwls	r2, #43009	; 0xa801
    66e8:	02000000 	andeq	r0, r0, #0
    66ec:	19007291 	stmdbne	r0, {r0, r4, r7, r9, ip, sp, lr}
    66f0:	000029d6 	ldrdeq	r2, [r0], -r6
    66f4:	d70a4801 	strle	r4, [sl, -r1, lsl #16]
    66f8:	50000000 	andpl	r0, r0, r0
    66fc:	5408004e 	strpl	r0, [r8], #-78	; 0xffffffb2
    6700:	01000000 	mrseq	r0, (UNDEF: 0)
    6704:	001a0a9c 	mulseq	sl, ip, sl
    6708:	280e1500 	stmdacs	lr, {r8, sl, ip}
    670c:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    6710:	0004c20a 	andeq	ip, r4, sl, lsl #4
    6714:	6c910200 	lfmvs	f0, 4, [r1], {0}
    6718:	002b2815 	eoreq	r2, fp, r5, lsl r8
    671c:	0a480100 	beq	1206b24 <_Min_Stack_Size+0x1206924>
    6720:	00000093 	muleq	r0, r3, r0
    6724:	166a9102 	strbtne	r9, [sl], -r2, lsl #2
    6728:	000019d9 	ldrdeq	r1, [r0], -r9
    672c:	d70a4a01 	strle	r4, [sl, -r1, lsl #20]
    6730:	02000000 	andeq	r0, r0, #0
    6734:	da167791 	ble	5a4580 <_Min_Stack_Size+0x5a4380>
    6738:	01000019 	tsteq	r0, r9, lsl r0
    673c:	00930a4b 	addseq	r0, r3, fp, asr #20
    6740:	91020000 	mrsls	r0, (UNDEF: 2)
    6744:	2d481674 	stclcs	6, cr1, [r8, #-464]	; 0xfffffe30
    6748:	4b010000 	blmi	46750 <_Min_Stack_Size+0x46550>
    674c:	0000930a 	andeq	r9, r0, sl, lsl #6
    6750:	72910200 	addsvc	r0, r1, #0, 4
    6754:	2c1e1400 	cfldrscs	mvf1, [lr], {-0}
    6758:	74010000 	strvc	r0, [r1], #-0
    675c:	004ea40a 	subeq	sl, lr, sl, lsl #8
    6760:	00002008 	andeq	r2, r0, r8
    6764:	3f9c0100 	svccc	0x009c0100
    6768:	1500001a 	strne	r0, [r0, #-26]	; 0xffffffe6
    676c:	0000280e 	andeq	r2, r0, lr, lsl #16
    6770:	c20a7401 	andgt	r7, sl, #16777216	; 0x1000000
    6774:	02000004 	andeq	r0, r0, #4
    6778:	28157491 	ldmdacs	r5, {r0, r4, r7, sl, ip, sp, lr}
    677c:	0100002b 	tsteq	r0, fp, lsr #32
    6780:	00930a74 	addseq	r0, r3, r4, ror sl
    6784:	91020000 	mrsls	r0, (UNDEF: 2)
    6788:	c31a0072 	tstgt	sl, #114	; 0x72
    678c:	0100002b 	tsteq	r0, fp, lsr #32
    6790:	00000a8d 	andeq	r0, r0, sp, lsl #21
    6794:	00e00000 	rsceq	r0, r0, r0
    6798:	9c010000 	stcls	0, cr0, [r1], {-0}
    679c:	00001ab0 			; <UNDEFINED> instruction: 0x00001ab0
    67a0:	00280e15 	eoreq	r0, r8, r5, lsl lr
    67a4:	0a8d0100 	beq	fe346bac <BootRAM+0xd2b734d>
    67a8:	000004c2 	andeq	r0, r0, r2, asr #9
    67ac:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    67b0:	00002a48 	andeq	r2, r0, r8, asr #20
    67b4:	930a8d01 	movwls	r8, #44289	; 0xad01
    67b8:	02000000 	andeq	r0, r0, #0
    67bc:	8a156a91 	bhi	561208 <_Min_Stack_Size+0x561008>
    67c0:	01000024 	tsteq	r0, r4, lsr #32
    67c4:	00930a8d 	addseq	r0, r3, sp, lsl #21
    67c8:	91020000 	mrsls	r0, (UNDEF: 2)
    67cc:	243a1568 	ldrtcs	r1, [sl], #-1384	; 0xfffffa98
    67d0:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    67d4:	0000930a 	andeq	r9, r0, sl, lsl #6
    67d8:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    67dc:	00240c16 	eoreq	r0, r4, r6, lsl ip
    67e0:	0a900100 	beq	fe406be8 <BootRAM+0xd377389>
    67e4:	00000093 	muleq	r0, r3, r0
    67e8:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    67ec:	000026f0 	strdeq	r2, [r0], -r0
    67f0:	930a9001 	movwls	r9, #40961	; 0xa001
    67f4:	02000000 	andeq	r0, r0, #0
    67f8:	1a007691 	bne	24244 <_Min_Stack_Size+0x24044>
    67fc:	00002b6c 	andeq	r2, r0, ip, ror #22
    6800:	000abc01 	andeq	fp, sl, r1, lsl #24
    6804:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    6808:	01000000 	mrseq	r0, (UNDEF: 0)
    680c:	001b309c 	mulseq	fp, ip, r0
    6810:	280e1500 	stmdacs	lr, {r8, sl, ip}
    6814:	bc010000 	stclt	0, cr0, [r1], {-0}
    6818:	0004c20a 	andeq	ip, r4, sl, lsl #4
    681c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    6820:	002a4815 	eoreq	r4, sl, r5, lsl r8
    6824:	0abc0100 	beq	fef06c2c <BootRAM+0xde773cd>
    6828:	00000093 	muleq	r0, r3, r0
    682c:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
    6830:	0000248a 	andeq	r2, r0, sl, lsl #9
    6834:	930abc01 	movwls	fp, #44033	; 0xac01
    6838:	02000000 	andeq	r0, r0, #0
    683c:	3a156891 	bcc	560a88 <_Min_Stack_Size+0x560888>
    6840:	01000024 	tsteq	r0, r4, lsr #32
    6844:	00930abd 			; <UNDEFINED> instruction: 0x00930abd
    6848:	91020000 	mrsls	r0, (UNDEF: 2)
    684c:	240c1666 	strcs	r1, [ip], #-1638	; 0xfffff99a
    6850:	bf010000 	svclt	0x00010000
    6854:	0000930a 	andeq	r9, r0, sl, lsl #6
    6858:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    685c:	0026f016 	eoreq	pc, r6, r6, lsl r0	; <UNPREDICTABLE>
    6860:	0abf0100 	beq	fefc6c68 <BootRAM+0xdf37409>
    6864:	00000093 	muleq	r0, r3, r0
    6868:	18769102 	ldmdane	r6!, {r1, r8, ip, pc}^
    686c:	00706d74 	rsbseq	r6, r0, r4, ror sp
    6870:	930abf01 	movwls	fp, #44801	; 0xaf01
    6874:	02000000 	andeq	r0, r0, #0
    6878:	1a007291 	bne	232c4 <_Min_Stack_Size+0x230c4>
    687c:	00002888 	andeq	r2, r0, r8, lsl #17
    6880:	000aed01 	andeq	lr, sl, r1, lsl #26
    6884:	ec000000 	stc	0, cr0, [r0], {-0}
    6888:	01000000 	mrseq	r0, (UNDEF: 0)
    688c:	001bb09c 	mulseq	fp, ip, r0
    6890:	280e1500 	stmdacs	lr, {r8, sl, ip}
    6894:	ed010000 	stc	0, cr0, [r1, #-0]
    6898:	0004c20a 	andeq	ip, r4, sl, lsl #4
    689c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    68a0:	002a4815 	eoreq	r4, sl, r5, lsl r8
    68a4:	0aed0100 	beq	ffb46cac <BootRAM+0xeab744d>
    68a8:	00000093 	muleq	r0, r3, r0
    68ac:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
    68b0:	0000248a 	andeq	r2, r0, sl, lsl #9
    68b4:	930aed01 	movwls	lr, #44289	; 0xad01
    68b8:	02000000 	andeq	r0, r0, #0
    68bc:	3a156891 	bcc	560b08 <_Min_Stack_Size+0x560908>
    68c0:	01000024 	tsteq	r0, r4, lsr #32
    68c4:	00930aee 	addseq	r0, r3, lr, ror #21
    68c8:	91020000 	mrsls	r0, (UNDEF: 2)
    68cc:	24151666 	ldrcs	r1, [r5], #-1638	; 0xfffff99a
    68d0:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    68d4:	0000930a 	andeq	r9, r0, sl, lsl #6
    68d8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    68dc:	0026f016 	eoreq	pc, r6, r6, lsl r0	; <UNPREDICTABLE>
    68e0:	0af00100 	beq	ffc06ce8 <BootRAM+0xeb77489>
    68e4:	00000093 	muleq	r0, r3, r0
    68e8:	18769102 	ldmdane	r6!, {r1, r8, ip, pc}^
    68ec:	00706d74 	rsbseq	r6, r0, r4, ror sp
    68f0:	930af001 	movwls	pc, #40961	; 0xa001	; <UNPREDICTABLE>
    68f4:	02000000 	andeq	r0, r0, #0
    68f8:	1a007291 	bne	23344 <_Min_Stack_Size+0x23144>
    68fc:	0000270f 	andeq	r2, r0, pc, lsl #14
    6900:	000b1d01 	andeq	r1, fp, r1, lsl #26
    6904:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    6908:	01000000 	mrseq	r0, (UNDEF: 0)
    690c:	001c309c 	mulseq	ip, ip, r0
    6910:	280e1500 	stmdacs	lr, {r8, sl, ip}
    6914:	1d010000 	stcne	0, cr0, [r1, #-0]
    6918:	0004c20b 	andeq	ip, r4, fp, lsl #4
    691c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    6920:	002a4815 	eoreq	r4, sl, r5, lsl r8
    6924:	0b1d0100 	bleq	746d2c <_Min_Stack_Size+0x746b2c>
    6928:	00000093 	muleq	r0, r3, r0
    692c:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
    6930:	0000248a 	andeq	r2, r0, sl, lsl #9
    6934:	930b1d01 	movwls	r1, #48385	; 0xbd01
    6938:	02000000 	andeq	r0, r0, #0
    693c:	3a156891 	bcc	560b88 <_Min_Stack_Size+0x560988>
    6940:	01000024 	tsteq	r0, r4, lsr #32
    6944:	00930b1e 	addseq	r0, r3, lr, lsl fp
    6948:	91020000 	mrsls	r0, (UNDEF: 2)
    694c:	24151666 	ldrcs	r1, [r5], #-1638	; 0xfffff99a
    6950:	20010000 	andcs	r0, r1, r0
    6954:	0000930b 	andeq	r9, r0, fp, lsl #6
    6958:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    695c:	0026f016 	eoreq	pc, r6, r6, lsl r0	; <UNPREDICTABLE>
    6960:	0b200100 	bleq	806d68 <_Min_Stack_Size+0x806b68>
    6964:	00000093 	muleq	r0, r3, r0
    6968:	18769102 	ldmdane	r6!, {r1, r8, ip, pc}^
    696c:	00706d74 	rsbseq	r6, r0, r4, ror sp
    6970:	930b2001 	movwls	r2, #45057	; 0xb001
    6974:	02000000 	andeq	r0, r0, #0
    6978:	1b007291 	blne	233c4 <_Min_Stack_Size+0x231c4>
    697c:	00000227 	andeq	r0, r0, r7, lsr #4
    6980:	3c06ce06 	stccc	14, cr12, [r6], {6}
    6984:	0500001c 	streq	r0, [r0, #-28]	; 0xffffffe4
    6988:	0000007a 	andeq	r0, r0, sl, ror r0
    698c:	000ae600 	andeq	lr, sl, r0, lsl #12
    6990:	cf000400 	svcgt	0x00000400
    6994:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    6998:	00018101 	andeq	r8, r1, r1, lsl #2
    699c:	2f2f0100 	svccs	0x002f0100
    69a0:	08b80000 	ldmeq	r8!, {}	; <UNPREDICTABLE>
    69a4:	00000000 	andeq	r0, r0, r0
    69a8:	30410000 	subcc	r0, r1, r0
    69ac:	01020000 	mrseq	r0, (UNDEF: 2)
    69b0:	0000c306 	andeq	ip, r0, r6, lsl #6
    69b4:	00930300 	addseq	r0, r3, r0, lsl #6
    69b8:	1d020000 	stcne	0, cr0, [r2, #-0]
    69bc:	00000033 	andeq	r0, r0, r3, lsr r0
    69c0:	c1080102 	tstgt	r8, r2, lsl #2
    69c4:	02000000 	andeq	r0, r0, #0
    69c8:	00510502 	subseq	r0, r1, r2, lsl #10
    69cc:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    69d0:	02000000 	andeq	r0, r0, #0
    69d4:	00004c2b 	andeq	r4, r0, fp, lsr #24
    69d8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    69dc:	00000123 	andeq	r0, r0, r3, lsr #2
    69e0:	6d050402 	cfstrsvs	mvf0, [r5, #-8]
    69e4:	03000000 	movweq	r0, #0
    69e8:	00000023 	andeq	r0, r0, r3, lsr #32
    69ec:	00654102 	rsbeq	r4, r5, r2, lsl #2
    69f0:	04020000 	streq	r0, [r2], #-0
    69f4:	0000fa07 	andeq	pc, r0, r7, lsl #20
    69f8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    69fc:	00000068 	andeq	r0, r0, r8, rrx
    6a00:	f5070802 			; <UNDEFINED> instruction: 0xf5070802
    6a04:	04000000 	streq	r0, [r0], #-0
    6a08:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    6a0c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    6a10:	0000ff07 	andeq	pc, r0, r7, lsl #30
    6a14:	00950300 	addseq	r0, r5, r0, lsl #6
    6a18:	14030000 	strne	r0, [r3], #-0
    6a1c:	00000028 	andeq	r0, r0, r8, lsr #32
    6a20:	00003003 	andeq	r3, r0, r3
    6a24:	411a0300 	tstmi	sl, r0, lsl #6
    6a28:	03000000 	movweq	r0, #0
    6a2c:	00000025 	andeq	r0, r0, r5, lsr #32
    6a30:	005a2003 	subseq	r2, sl, r3
    6a34:	04020000 	streq	r0, [r2], #-0
    6a38:	00001507 	andeq	r1, r0, r7, lsl #10
    6a3c:	009e0500 	addseq	r0, lr, r0, lsl #10
    6a40:	93050000 	movwls	r0, #20480	; 0x5000
    6a44:	06000000 	streq	r0, [r0], -r0
    6a48:	02070401 	andeq	r0, r7, #16777216	; 0x1000000
    6a4c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6a50:	001c8b07 	andseq	r8, ip, r7, lsl #22
    6a54:	53080000 	movwpl	r0, #32768	; 0x8000
    6a58:	01005445 	tsteq	r0, r5, asr #8
    6a5c:	2e7d0900 	cdpcs	9, 7, cr0, cr13, cr0, {0}
    6a60:	07040000 	streq	r0, [r4, -r0]
    6a64:	0000ba02 	andeq	fp, r0, r2, lsl #20
    6a68:	2f9b0900 	svccs	0x009b0900
    6a6c:	07040000 	streq	r0, [r4, -r0]
    6a70:	0000ba02 	andeq	fp, r0, r2, lsl #20
    6a74:	04010600 	streq	r0, [r1], #-1536	; 0xfffffa00
    6a78:	00fe0209 	rscseq	r0, lr, r9, lsl #4
    6a7c:	fb070000 	blx	1c6a86 <_Min_Stack_Size+0x1c6886>
    6a80:	00000002 	andeq	r0, r0, r2
    6a84:	00046107 	andeq	r6, r4, r7, lsl #2
    6a88:	09000100 	stmdbeq	r0, {r8}
    6a8c:	000017ad 	andeq	r1, r0, sp, lsr #15
    6a90:	e8020904 	stmda	r2, {r2, r8, fp}
    6a94:	06000000 	streq	r0, [r0], -r0
    6a98:	020c0401 	andeq	r0, ip, #16777216	; 0x1000000
    6a9c:	00000120 	andeq	r0, r0, r0, lsr #2
    6aa0:	00033207 	andeq	r3, r3, r7, lsl #4
    6aa4:	48070000 	stmdami	r7, {}	; <UNPREDICTABLE>
    6aa8:	01000014 	tsteq	r0, r4, lsl r0
    6aac:	19610900 	stmdbne	r1!, {r8, fp}^
    6ab0:	0c040000 	stceq	0, cr0, [r4], {-0}
    6ab4:	00010a02 	andeq	r0, r1, r2, lsl #20
    6ab8:	04240a00 	strteq	r0, [r4], #-2560	; 0xfffff600
    6abc:	021f0404 	andseq	r0, pc, #4, 8	; 0x4000000
    6ac0:	430b0000 	movwmi	r0, #45056	; 0xb000
    6ac4:	04003152 	streq	r3, [r0], #-338	; 0xfffffeae
    6ac8:	00b50406 	adcseq	r0, r5, r6, lsl #8
    6acc:	0c000000 	stceq	0, cr0, [r0], {-0}
    6ad0:	000003c1 	andeq	r0, r0, r1, asr #7
    6ad4:	93040704 	movwls	r0, #18180	; 0x4704
    6ad8:	02000000 	andeq	r0, r0, #0
    6adc:	3252430b 	subscc	r4, r2, #738197504	; 0x2c000000
    6ae0:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
    6ae4:	000000b5 	strheq	r0, [r0], -r5
    6ae8:	03cb0c04 	biceq	r0, fp, #4, 24	; 0x400
    6aec:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    6af0:	00009304 	andeq	r9, r0, r4, lsl #6
    6af4:	b70c0600 	strlt	r0, [ip, -r0, lsl #12]
    6af8:	04000003 	streq	r0, [r0], #-3
    6afc:	00b5040a 	adcseq	r0, r5, sl, lsl #8
    6b00:	0c080000 	stceq	0, cr0, [r8], {-0}
    6b04:	000003d5 	ldrdeq	r0, [r0], -r5
    6b08:	93040b04 	movwls	r0, #19204	; 0x4b04
    6b0c:	0a000000 	beq	6b14 <_Min_Stack_Size+0x6914>
    6b10:	0003bc0c 	andeq	fp, r3, ip, lsl #24
    6b14:	040c0400 	streq	r0, [ip], #-1024	; 0xfffffc00
    6b18:	000000b5 	strheq	r0, [r0], -r5
    6b1c:	02b60c0c 	adcseq	r0, r6, #12, 24	; 0xc00
    6b20:	0d040000 	stceq	0, cr0, [r4, #-0]
    6b24:	00009304 	andeq	r9, r0, r4, lsl #6
    6b28:	440b0e00 	strmi	r0, [fp], #-3584	; 0xfffff200
    6b2c:	0e040052 	mcreq	0, 0, r0, cr4, cr2, {2}
    6b30:	0000b504 	andeq	fp, r0, r4, lsl #10
    6b34:	e90c1000 	stmdb	ip, {ip}
    6b38:	04000003 	streq	r0, [r0], #-3
    6b3c:	0093040f 	addseq	r0, r3, pc, lsl #8
    6b40:	0b120000 	bleq	486b48 <_Min_Stack_Size+0x486948>
    6b44:	00315253 	eorseq	r5, r1, r3, asr r2
    6b48:	b5041004 	strlt	r1, [r4, #-4]
    6b4c:	14000000 	strne	r0, [r0], #-0
    6b50:	0003f30c 	andeq	pc, r3, ip, lsl #6
    6b54:	04110400 	ldreq	r0, [r1], #-1024	; 0xfffffc00
    6b58:	00000093 	muleq	r0, r3, r0
    6b5c:	52530b16 	subspl	r0, r3, #22528	; 0x5800
    6b60:	12040032 	andne	r0, r4, #50	; 0x32
    6b64:	0000b504 	andeq	fp, r0, r4, lsl #10
    6b68:	e20c1800 	and	r1, ip, #0, 16
    6b6c:	04000002 	streq	r0, [r0], #-2
    6b70:	00930413 	addseq	r0, r3, r3, lsl r4
    6b74:	0b1a0000 	bleq	686b7c <_Min_Stack_Size+0x68697c>
    6b78:	00524343 	subseq	r4, r2, r3, asr #6
    6b7c:	b5041404 	strlt	r1, [r4, #-1028]	; 0xfffffbfc
    6b80:	1c000000 	stcne	0, cr0, [r0], {-0}
    6b84:	0004140c 	andeq	r1, r4, ip, lsl #8
    6b88:	04150400 	ldreq	r0, [r5], #-1024	; 0xfffffc00
    6b8c:	00000093 	muleq	r0, r3, r0
    6b90:	044a0c1e 	strbeq	r0, [sl], #-3102	; 0xfffff3e2
    6b94:	16040000 	strne	r0, [r4], -r0
    6b98:	0000b504 	andeq	fp, r0, r4, lsl #10
    6b9c:	1e0c2000 	cdpne	0, 0, cr2, cr12, cr0, {0}
    6ba0:	04000004 	streq	r0, [r0], #-4
    6ba4:	00930417 	addseq	r0, r3, r7, lsl r4
    6ba8:	00220000 	eoreq	r0, r2, r0
    6bac:	00033809 	andeq	r3, r3, r9, lsl #16
    6bb0:	04180400 	ldreq	r0, [r8], #-1024	; 0xfffffc00
    6bb4:	0000012c 	andeq	r0, r0, ip, lsr #2
    6bb8:	2e05140d 	cdpcs	4, 0, cr1, cr5, cr13, {0}
    6bbc:	00000270 	andeq	r0, r0, r0, ror r2
    6bc0:	001aab0e 	andseq	sl, sl, lr, lsl #22
    6bc4:	9e300500 	cfabs32ls	mvfx0, mvfx0
    6bc8:	00000000 	andeq	r0, r0, r0
    6bcc:	0018d80e 	andseq	sp, r8, lr, lsl #16
    6bd0:	9e310500 	cfabs32ls	mvfx0, mvfx1
    6bd4:	04000000 	streq	r0, [r0], #-0
    6bd8:	001b250e 	andseq	r2, fp, lr, lsl #10
    6bdc:	9e320500 	cfabs32ls	mvfx0, mvfx2
    6be0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6be4:	001ac70e 	andseq	ip, sl, lr, lsl #14
    6be8:	9e330500 	cfabs32ls	mvfx0, mvfx3
    6bec:	0c000000 	stceq	0, cr0, [r0], {-0}
    6bf0:	001a8c0e 	andseq	r8, sl, lr, lsl #24
    6bf4:	9e340500 	cfabs32ls	mvfx0, mvfx4
    6bf8:	10000000 	andne	r0, r0, r0
    6bfc:	18a50300 	stmiane	r5!, {r8, r9}
    6c00:	35050000 	strcc	r0, [r5, #-0]
    6c04:	0000022b 	andeq	r0, r0, fp, lsr #4
    6c08:	3206100d 	andcc	r1, r6, #13
    6c0c:	000002cc 	andeq	r0, r0, ip, asr #5
    6c10:	0031640e 	eorseq	r6, r1, lr, lsl #8
    6c14:	9e340600 	cfmsuba32ls	mvax0, mvax0, mvfx4, mvfx0
    6c18:	00000000 	andeq	r0, r0, r0
    6c1c:	0030270e 	eorseq	r2, r0, lr, lsl #14
    6c20:	93370600 	teqls	r7, #0, 12
    6c24:	04000000 	streq	r0, [r0], #-0
    6c28:	0031920e 	eorseq	r9, r1, lr, lsl #4
    6c2c:	933a0600 	teqls	sl, #0, 12
    6c30:	06000000 	streq	r0, [r0], -r0
    6c34:	0030d80e 	eorseq	sp, r0, lr, lsl #16
    6c38:	933d0600 	teqls	sp, #0, 12
    6c3c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6c40:	0030e80e 	eorseq	lr, r0, lr, lsl #16
    6c44:	93400600 	movtls	r0, #1536	; 0x600
    6c48:	0a000000 	beq	6c50 <_Min_Stack_Size+0x6a50>
    6c4c:	002ec80e 	eoreq	ip, lr, lr, lsl #16
    6c50:	93430600 	movtls	r0, #13824	; 0x3600
    6c54:	0c000000 	stceq	0, cr0, [r0], {-0}
    6c58:	31100300 	tstcc	r0, r0, lsl #6
    6c5c:	45060000 	strmi	r0, [r6, #-0]
    6c60:	0000027b 	andeq	r0, r0, fp, ror r2
    6c64:	00312f0f 	eorseq	r2, r1, pc, lsl #30
    6c68:	c4a20100 	strtgt	r0, [r2], #256	; 0x100
    6c6c:	4408004e 	strmi	r0, [r8], #-78	; 0xffffffb2
    6c70:	01000000 	mrseq	r0, (UNDEF: 0)
    6c74:	0002fb9c 	muleq	r2, ip, fp
    6c78:	2f091000 	svccs	0x00091000
    6c7c:	a2010000 	andge	r0, r1, #0
    6c80:	000002fb 	strdeq	r0, [r0], -fp
    6c84:	00749102 	rsbseq	r9, r4, r2, lsl #2
    6c88:	021f0411 	andseq	r0, pc, #285212672	; 0x11000000
    6c8c:	a00f0000 	andge	r0, pc, r0
    6c90:	01000031 	tsteq	r0, r1, lsr r0
    6c94:	004f08bf 	strheq	r0, [pc], #-143	; <UNPREDICTABLE>
    6c98:	00018408 	andeq	r8, r1, r8, lsl #8
    6c9c:	799c0100 	ldmibvc	ip, {r8}
    6ca0:	10000003 	andne	r0, r0, r3
    6ca4:	00002f09 	andeq	r2, r0, r9, lsl #30
    6ca8:	02fbbf01 	rscseq	fp, fp, #1, 30
    6cac:	91020000 	mrsls	r0, (UNDEF: 2)
    6cb0:	2f7f1054 	svccs	0x007f1054
    6cb4:	bf010000 	svclt	0x00010000
    6cb8:	00000379 	andeq	r0, r0, r9, ror r3
    6cbc:	12509102 	subsne	r9, r0, #-2147483648	; 0x80000000
    6cc0:	000019d2 	ldrdeq	r1, [r0], -r2
    6cc4:	0093c101 	addseq	ip, r3, r1, lsl #2
    6cc8:	91020000 	mrsls	r0, (UNDEF: 2)
    6ccc:	31061276 	tstcc	r6, r6, ror r2
    6cd0:	c1010000 	mrsgt	r0, (UNDEF: 1)
    6cd4:	00000093 	muleq	r0, r3, r0
    6cd8:	12729102 	rsbsne	r9, r2, #-2147483648	; 0x80000000
    6cdc:	000040b7 	strheq	r4, [r0], -r7
    6ce0:	0093c201 	addseq	ip, r3, r1, lsl #4
    6ce4:	91020000 	mrsls	r0, (UNDEF: 2)
    6ce8:	2faf1274 	svccs	0x00af1274
    6cec:	c3010000 	movwgt	r0, #4096	; 0x1000
    6cf0:	0000009e 	muleq	r0, lr, r0
    6cf4:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    6cf8:	00002f0e 	andeq	r2, r0, lr, lsl #30
    6cfc:	0270c401 	rsbseq	ip, r0, #16777216	; 0x1000000
    6d00:	91020000 	mrsls	r0, (UNDEF: 2)
    6d04:	04110058 	ldreq	r0, [r1], #-88	; 0xffffffa8
    6d08:	000002cc 	andeq	r0, r0, ip, asr #5
    6d0c:	00312013 	eorseq	r2, r1, r3, lsl r0
    6d10:	012a0100 			; <UNDEFINED> instruction: 0x012a0100
    6d14:	00000000 	andeq	r0, r0, r0
    6d18:	0000003c 	andeq	r0, r0, ip, lsr r0
    6d1c:	03a59c01 			; <UNDEFINED> instruction: 0x03a59c01
    6d20:	7f140000 	svcvc	0x00140000
    6d24:	0100002f 	tsteq	r0, pc, lsr #32
    6d28:	0379012a 	cmneq	r9, #-2147483638	; 0x8000000a
    6d2c:	91020000 	mrsls	r0, (UNDEF: 2)
    6d30:	f1130074 			; <UNDEFINED> instruction: 0xf1130074
    6d34:	0100002e 	tsteq	r0, lr, lsr #32
    6d38:	508c0142 	addpl	r0, ip, r2, asr #2
    6d3c:	003e0800 	eorseq	r0, lr, r0, lsl #16
    6d40:	9c010000 	stcls	0, cr0, [r1], {-0}
    6d44:	000003da 	ldrdeq	r0, [r0], -sl
    6d48:	002f0914 	eoreq	r0, pc, r4, lsl r9	; <UNPREDICTABLE>
    6d4c:	01420100 	mrseq	r0, (UNDEF: 82)
    6d50:	000002fb 	strdeq	r0, [r0], -fp
    6d54:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    6d58:	000016ec 	andeq	r1, r0, ip, ror #13
    6d5c:	fe014201 	cdp2	2, 0, cr4, cr1, cr1, {0}
    6d60:	02000000 	andeq	r0, r0, #0
    6d64:	13007391 	movwne	r7, #913	; 0x391
    6d68:	00002fb5 			; <UNDEFINED> instruction: 0x00002fb5
    6d6c:	00015a01 	andeq	r5, r1, r1, lsl #20
    6d70:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    6d74:	01000000 	mrseq	r0, (UNDEF: 0)
    6d78:	00040f9c 	muleq	r4, ip, pc	; <UNPREDICTABLE>
    6d7c:	2f091400 	svccs	0x00091400
    6d80:	5a010000 	bpl	46d88 <_Min_Stack_Size+0x46b88>
    6d84:	0002fb01 	andeq	pc, r2, r1, lsl #22
    6d88:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6d8c:	0016ec14 	andseq	lr, r6, r4, lsl ip
    6d90:	015a0100 	cmpeq	sl, r0, lsl #2
    6d94:	000000fe 	strdeq	r0, [r0], -lr
    6d98:	00739102 	rsbseq	r9, r3, r2, lsl #2
    6d9c:	002fc013 	eoreq	ip, pc, r3, lsl r0	; <UNPREDICTABLE>
    6da0:	01720100 	cmneq	r2, r0, lsl #2
    6da4:	00000000 	andeq	r0, r0, r0
    6da8:	0000003e 	andeq	r0, r0, lr, lsr r0
    6dac:	04449c01 	strbeq	r9, [r4], #-3073	; 0xfffff3ff
    6db0:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    6db4:	0100002f 	tsteq	r0, pc, lsr #32
    6db8:	02fb0172 	rscseq	r0, fp, #-2147483620	; 0x8000001c
    6dbc:	91020000 	mrsls	r0, (UNDEF: 2)
    6dc0:	16ec1474 	uxtabne	r1, ip, r4, ror #8
    6dc4:	72010000 	andvc	r0, r1, #0
    6dc8:	0000fe01 	andeq	pc, r0, r1, lsl #28
    6dcc:	73910200 	orrsvc	r0, r1, #0, 4
    6dd0:	30c61300 	sbccc	r1, r6, r0, lsl #6
    6dd4:	8a010000 	bhi	46ddc <_Min_Stack_Size+0x46bdc>
    6dd8:	0050cc01 	subseq	ip, r0, r1, lsl #24
    6ddc:	00003e08 	andeq	r3, r0, r8, lsl #28
    6de0:	799c0100 	ldmibvc	ip, {r8}
    6de4:	14000004 	strne	r0, [r0], #-4
    6de8:	00002f09 	andeq	r2, r0, r9, lsl #30
    6dec:	fb018a01 	blx	695fa <_Min_Stack_Size+0x693fa>
    6df0:	02000002 	andeq	r0, r0, #2
    6df4:	ec147491 	cfldrs	mvf7, [r4], {145}	; 0x91
    6df8:	01000016 	tsteq	r0, r6, lsl r0
    6dfc:	00fe018a 	rscseq	r0, lr, sl, lsl #3
    6e00:	91020000 	mrsls	r0, (UNDEF: 2)
    6e04:	e0130073 	ands	r0, r3, r3, ror r0
    6e08:	0100002e 	tsteq	r0, lr, lsr #32
    6e0c:	000001a2 	andeq	r0, r0, r2, lsr #3
    6e10:	003e0000 	eorseq	r0, lr, r0
    6e14:	9c010000 	stcls	0, cr0, [r1], {-0}
    6e18:	000004ae 	andeq	r0, r0, lr, lsr #9
    6e1c:	002f0914 	eoreq	r0, pc, r4, lsl r9	; <UNPREDICTABLE>
    6e20:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
    6e24:	000002fb 	strdeq	r0, [r0], -fp
    6e28:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    6e2c:	000016ec 	andeq	r1, r0, ip, ror #13
    6e30:	fe01a201 	cdp2	2, 0, cr10, cr1, cr1, {0}
    6e34:	02000000 	andeq	r0, r0, #0
    6e38:	13007391 	movwne	r7, #913	; 0x391
    6e3c:	0000308f 	andeq	r3, r0, pc, lsl #1
    6e40:	0001ba01 	andeq	fp, r1, r1, lsl #20
    6e44:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    6e48:	01000000 	mrseq	r0, (UNDEF: 0)
    6e4c:	0004e39c 	muleq	r4, ip, r3
    6e50:	2f091400 	svccs	0x00091400
    6e54:	ba010000 	blt	46e5c <_Min_Stack_Size+0x46c5c>
    6e58:	0002fb01 	andeq	pc, r2, r1, lsl #22
    6e5c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6e60:	0016ec14 	andseq	lr, r6, r4, lsl ip
    6e64:	01ba0100 			; <UNDEFINED> instruction: 0x01ba0100
    6e68:	000000fe 	strdeq	r0, [r0], -lr
    6e6c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    6e70:	00313a13 	eorseq	r3, r1, r3, lsl sl
    6e74:	01d10100 	bicseq	r0, r1, r0, lsl #2
    6e78:	00000000 	andeq	r0, r0, r0
    6e7c:	00000040 	andeq	r0, r0, r0, asr #32
    6e80:	05279c01 	streq	r9, [r7, #-3073]!	; 0xfffff3ff
    6e84:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    6e88:	0100002f 	tsteq	r0, pc, lsr #32
    6e8c:	02fb01d1 	rscseq	r0, fp, #1073741876	; 0x40000034
    6e90:	91020000 	mrsls	r0, (UNDEF: 2)
    6e94:	2ed8146c 	cdpcs	4, 13, cr1, cr8, cr12, {3}
    6e98:	d1010000 	mrsle	r0, (UNDEF: 1)
    6e9c:	00008801 	andeq	r8, r0, r1, lsl #16
    6ea0:	6b910200 	blvs	fe4476a8 <BootRAM+0xd3b7e49>
    6ea4:	0019d215 	andseq	sp, r9, r5, lsl r2
    6ea8:	01d30100 	bicseq	r0, r3, r0, lsl #2
    6eac:	00000093 	muleq	r0, r3, r0
    6eb0:	00769102 	rsbseq	r9, r6, r2, lsl #2
    6eb4:	002fe213 	eoreq	lr, pc, r3, lsl r2	; <UNPREDICTABLE>
    6eb8:	01ec0100 	mvneq	r0, r0, lsl #2
    6ebc:	00000000 	andeq	r0, r0, r0
    6ec0:	0000003e 	andeq	r0, r0, lr, lsr r0
    6ec4:	055c9c01 	ldrbeq	r9, [ip, #-3073]	; 0xfffff3ff
    6ec8:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    6ecc:	0100002f 	tsteq	r0, pc, lsr #32
    6ed0:	02fb01ec 	rscseq	r0, fp, #236, 2	; 0x3b
    6ed4:	91020000 	mrsls	r0, (UNDEF: 2)
    6ed8:	16ec1474 	uxtabne	r1, ip, r4, ror #8
    6edc:	ec010000 	stc	0, cr0, [r1], {-0}
    6ee0:	0000fe01 	andeq	pc, r0, r1, lsl #28
    6ee4:	73910200 	orrsvc	r0, r1, #0, 4
    6ee8:	2ff51300 	svccs	0x00f51300
    6eec:	04010000 	streq	r0, [r1], #-0
    6ef0:	00000002 	andeq	r0, r0, r2
    6ef4:	00003e00 	andeq	r3, r0, r0, lsl #28
    6ef8:	919c0100 	orrsls	r0, ip, r0, lsl #2
    6efc:	14000005 	strne	r0, [r0], #-5
    6f00:	00002f09 	andeq	r2, r0, r9, lsl #30
    6f04:	fb020401 	blx	87f12 <_Min_Stack_Size+0x87d12>
    6f08:	02000002 	andeq	r0, r0, #2
    6f0c:	ec147491 	cfldrs	mvf7, [r4], {145}	; 0x91
    6f10:	01000016 	tsteq	r0, r6, lsl r0
    6f14:	00fe0204 	rscseq	r0, lr, r4, lsl #4
    6f18:	91020000 	mrsls	r0, (UNDEF: 2)
    6f1c:	78130073 	ldmdavc	r3, {r0, r1, r4, r5, r6}
    6f20:	01000030 	tsteq	r0, r0, lsr r0
    6f24:	00000221 	andeq	r0, r0, r1, lsr #4
    6f28:	00460000 	subeq	r0, r6, r0
    6f2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6f30:	000005d5 	ldrdeq	r0, [r0], -r5
    6f34:	002f0914 	eoreq	r0, pc, r4, lsl r9	; <UNPREDICTABLE>
    6f38:	02210100 	eoreq	r0, r1, #0, 2
    6f3c:	000002fb 	strdeq	r0, [r0], -fp
    6f40:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    6f44:	00002eae 	andeq	r2, r0, lr, lsr #29
    6f48:	93022101 	movwls	r2, #8449	; 0x2101
    6f4c:	02000000 	andeq	r0, r0, #0
    6f50:	ec147291 	lfm	f7, 4, [r4], {145}	; 0x91
    6f54:	01000016 	tsteq	r0, r6, lsl r0
    6f58:	00fe0221 	rscseq	r0, lr, r1, lsr #4
    6f5c:	91020000 	mrsls	r0, (UNDEF: 2)
    6f60:	a9130071 	ldmdbge	r3, {r0, r4, r5, r6}
    6f64:	01000031 	tsteq	r0, r1, lsr r0
    6f68:	510c023a 	tstpl	ip, sl, lsr r2
    6f6c:	001e0800 	andseq	r0, lr, r0, lsl #16
    6f70:	9c010000 	stcls	0, cr0, [r1], {-0}
    6f74:	0000060a 	andeq	r0, r0, sl, lsl #12
    6f78:	002f0914 	eoreq	r0, pc, r4, lsl r9	; <UNPREDICTABLE>
    6f7c:	023a0100 	eorseq	r0, sl, #0, 2
    6f80:	000002fb 	strdeq	r0, [r0], -fp
    6f84:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    6f88:	000031b1 			; <UNDEFINED> instruction: 0x000031b1
    6f8c:	88023a01 	stmdahi	r2, {r0, r9, fp, ip, sp}
    6f90:	02000000 	andeq	r0, r0, #0
    6f94:	16007391 			; <UNDEFINED> instruction: 0x16007391
    6f98:	00003037 	andeq	r3, r0, r7, lsr r0
    6f9c:	88024701 	stmdahi	r2, {r0, r8, r9, sl, lr}
    6fa0:	00000000 	andeq	r0, r0, r0
    6fa4:	1c000000 	stcne	0, cr0, [r0], {-0}
    6fa8:	01000000 	mrseq	r0, (UNDEF: 0)
    6fac:	0006349c 	muleq	r6, ip, r4
    6fb0:	2f091400 	svccs	0x00091400
    6fb4:	47010000 	strmi	r0, [r1, -r0]
    6fb8:	0002fb02 	andeq	pc, r2, r2, lsl #22
    6fbc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6fc0:	31b61300 			; <UNDEFINED> instruction: 0x31b61300
    6fc4:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    6fc8:	00512c02 	subseq	r2, r1, r2, lsl #24
    6fcc:	00003a08 	andeq	r3, r0, r8, lsl #20
    6fd0:	789c0100 	ldmvc	ip, {r8}
    6fd4:	14000006 	strne	r0, [r0], #-6
    6fd8:	00002f09 	andeq	r2, r0, r9, lsl #30
    6fdc:	fb025901 	blx	9d3ea <_Min_Stack_Size+0x9d1ea>
    6fe0:	02000002 	andeq	r0, r0, #2
    6fe4:	d8147491 	ldmdale	r4, {r0, r4, r7, sl, ip, sp, lr}
    6fe8:	0100002e 	tsteq	r0, lr, lsr #32
    6fec:	00880259 	addeq	r0, r8, r9, asr r2
    6ff0:	91020000 	mrsls	r0, (UNDEF: 2)
    6ff4:	31d91473 	bicscc	r1, r9, r3, ror r4
    6ff8:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    6ffc:	00008802 	andeq	r8, r0, r2, lsl #16
    7000:	72910200 	addsvc	r0, r1, #0, 4
    7004:	2e651600 	cdpcs	6, 6, cr1, cr5, cr0, {0}
    7008:	7c010000 	stcvc	0, cr0, [r1], {-0}
    700c:	00009302 	andeq	r9, r0, r2, lsl #6
    7010:	00000000 	andeq	r0, r0, r0
    7014:	00002e00 	andeq	r2, r0, r0, lsl #28
    7018:	c09c0100 	addsgt	r0, ip, r0, lsl #2
    701c:	14000006 	strne	r0, [r0], #-6
    7020:	00002f09 	andeq	r2, r0, r9, lsl #30
    7024:	fb027c01 	blx	a6032 <_Min_Stack_Size+0xa5e32>
    7028:	02000002 	andeq	r0, r0, #2
    702c:	b9146c91 	ldmdblt	r4, {r0, r4, r7, sl, fp, sp, lr}
    7030:	01000030 	tsteq	r0, r0, lsr r0
    7034:	0088027c 	addeq	r0, r8, ip, ror r2
    7038:	91020000 	mrsls	r0, (UNDEF: 2)
    703c:	6d74176b 	ldclvs	7, cr1, [r4, #-428]!	; 0xfffffe54
    7040:	7e010070 	mcrvc	0, 0, r0, cr1, cr0, {3}
    7044:	0000b002 	andeq	fp, r0, r2
    7048:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    704c:	2e991300 	cdpcs	3, 9, cr1, cr9, cr0, {0}
    7050:	92010000 	andls	r0, r1, #0
    7054:	00000002 	andeq	r0, r0, r2
    7058:	00004200 	andeq	r4, r0, r0, lsl #4
    705c:	f59c0100 			; <UNDEFINED> instruction: 0xf59c0100
    7060:	14000006 	strne	r0, [r0], #-6
    7064:	00002f09 	andeq	r2, r0, r9, lsl #30
    7068:	fb029201 	blx	ab876 <_Min_Stack_Size+0xab676>
    706c:	02000002 	andeq	r0, r0, #2
    7070:	ec147491 	cfldrs	mvf7, [r4], {145}	; 0x91
    7074:	01000016 	tsteq	r0, r6, lsl r0
    7078:	00fe0292 	smlalseq	r0, lr, r2, r2
    707c:	91020000 	mrsls	r0, (UNDEF: 2)
    7080:	08130073 	ldmdaeq	r3, {r0, r1, r4, r5, r6}
    7084:	01000030 	tsteq	r0, r0, lsr r0
    7088:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    708c:	00400000 	subeq	r0, r0, r0
    7090:	9c010000 	stcls	0, cr0, [r1], {-0}
    7094:	0000072a 	andeq	r0, r0, sl, lsr #14
    7098:	002f0914 	eoreq	r0, pc, r4, lsl r9	; <UNPREDICTABLE>
    709c:	02b80100 	adcseq	r0, r8, #0, 2
    70a0:	000002fb 	strdeq	r0, [r0], -fp
    70a4:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    70a8:	00002f6e 	andeq	r2, r0, lr, ror #30
    70ac:	9302b801 	movwls	fp, #10241	; 0x2801
    70b0:	02000000 	andeq	r0, r0, #0
    70b4:	13007291 	movwne	r7, #657	; 0x291
    70b8:	00003063 	andeq	r3, r0, r3, rrx
    70bc:	0002d401 	andeq	sp, r2, r1, lsl #8
    70c0:	40000000 	andmi	r0, r0, r0
    70c4:	01000000 	mrseq	r0, (UNDEF: 0)
    70c8:	00075f9c 	muleq	r7, ip, pc	; <UNPREDICTABLE>
    70cc:	2f091400 	svccs	0x00091400
    70d0:	d4010000 	strle	r0, [r1], #-0
    70d4:	0002fb02 	andeq	pc, r2, r2, lsl #22
    70d8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    70dc:	00318314 	eorseq	r8, r1, r4, lsl r3
    70e0:	02d40100 	sbcseq	r0, r4, #0, 2
    70e4:	00000093 	muleq	r0, r3, r0
    70e8:	00729102 	rsbseq	r9, r2, r2, lsl #2
    70ec:	002ef913 	eoreq	pc, lr, r3, lsl r9	; <UNPREDICTABLE>
    70f0:	02ec0100 	rsceq	r0, ip, #0, 2
    70f4:	00000000 	andeq	r0, r0, r0
    70f8:	0000003e 	andeq	r0, r0, lr, lsr r0
    70fc:	07949c01 	ldreq	r9, [r4, r1, lsl #24]
    7100:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    7104:	0100002f 	tsteq	r0, pc, lsr #32
    7108:	02fb02ec 	rscseq	r0, fp, #236, 4	; 0xc000000e
    710c:	91020000 	mrsls	r0, (UNDEF: 2)
    7110:	16ec1474 	uxtabne	r1, ip, r4, ror #8
    7114:	ec010000 	stc	0, cr0, [r1], {-0}
    7118:	0000fe02 	andeq	pc, r0, r2, lsl #28
    711c:	73910200 	orrsvc	r0, r1, #0, 4
    7120:	30f01300 	rscscc	r1, r0, r0, lsl #6
    7124:	0b010000 	bleq	4712c <_Min_Stack_Size+0x46f2c>
    7128:	00000003 	andeq	r0, r0, r3
    712c:	00004000 	andeq	r4, r0, r0
    7130:	c99c0100 	ldmibgt	ip, {r8}
    7134:	14000007 	strne	r0, [r0], #-7
    7138:	00002f09 	andeq	r2, r0, r9, lsl #30
    713c:	fb030b01 	blx	c9d4a <_Min_Stack_Size+0xc9b4a>
    7140:	02000002 	andeq	r0, r0, #2
    7144:	73147491 	tstvc	r4, #-1862270976	; 0x91000000
    7148:	01000031 	tsteq	r0, r1, lsr r0
    714c:	0093030b 	addseq	r0, r3, fp, lsl #6
    7150:	91020000 	mrsls	r0, (UNDEF: 2)
    7154:	88130072 	ldmdahi	r3, {r1, r4, r5, r6}
    7158:	0100002e 	tsteq	r0, lr, lsr #32
    715c:	00000323 	andeq	r0, r0, r3, lsr #6
    7160:	003e0000 	eorseq	r0, lr, r0
    7164:	9c010000 	stcls	0, cr0, [r1], {-0}
    7168:	000007fe 	strdeq	r0, [r0], -lr
    716c:	002f0914 	eoreq	r0, pc, r4, lsl r9	; <UNPREDICTABLE>
    7170:	03230100 			; <UNDEFINED> instruction: 0x03230100
    7174:	000002fb 	strdeq	r0, [r0], -fp
    7178:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    717c:	000016ec 	andeq	r1, r0, ip, ror #13
    7180:	fe032301 	cdp2	3, 0, cr2, cr3, cr1, {0}
    7184:	02000000 	andeq	r0, r0, #0
    7188:	16007391 			; <UNDEFINED> instruction: 0x16007391
    718c:	00002fd7 	ldrdeq	r2, [r0], -r7
    7190:	88033901 	stmdahi	r3, {r0, r8, fp, ip, sp}
    7194:	00000000 	andeq	r0, r0, r0
    7198:	20000000 	andcs	r0, r0, r0
    719c:	01000000 	mrseq	r0, (UNDEF: 0)
    71a0:	0008289c 	muleq	r8, ip, r8
    71a4:	2f091400 	svccs	0x00091400
    71a8:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    71ac:	0002fb03 	andeq	pc, r2, r3, lsl #22
    71b0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    71b4:	2fa41300 	svccs	0x00a41300
    71b8:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    71bc:	00000003 	andeq	r0, r0, r3
    71c0:	00003e00 	andeq	r3, r0, r0, lsl #28
    71c4:	5d9c0100 	ldfpls	f0, [ip]
    71c8:	14000008 	strne	r0, [r0], #-8
    71cc:	00002f09 	andeq	r2, r0, r9, lsl #30
    71d0:	fb034801 	blx	d91de <_Min_Stack_Size+0xd8fde>
    71d4:	02000002 	andeq	r0, r0, #2
    71d8:	ec147491 	cfldrs	mvf7, [r4], {145}	; 0x91
    71dc:	01000016 	tsteq	r0, r6, lsl r0
    71e0:	00fe0348 	rscseq	r0, lr, r8, asr #6
    71e4:	91020000 	mrsls	r0, (UNDEF: 2)
    71e8:	50130073 	andspl	r0, r3, r3, ror r0
    71ec:	01000031 	tsteq	r0, r1, lsr r0
    71f0:	51680360 	cmnpl	r8, r0, ror #6
    71f4:	003e0800 	eorseq	r0, lr, r0, lsl #16
    71f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    71fc:	00000892 	muleq	r0, r2, r8
    7200:	002f0914 	eoreq	r0, pc, r4, lsl r9	; <UNPREDICTABLE>
    7204:	03600100 	cmneq	r0, #0, 2
    7208:	000002fb 	strdeq	r0, [r0], -fp
    720c:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    7210:	000016ec 	andeq	r1, r0, ip, ror #13
    7214:	fe036001 	cdp2	0, 0, cr6, cr3, cr1, {0}
    7218:	02000000 	andeq	r0, r0, #0
    721c:	13007391 	movwne	r7, #913	; 0x391
    7220:	00003047 	andeq	r3, r0, r7, asr #32
    7224:	00037a01 	andeq	r7, r3, r1, lsl #20
    7228:	40000000 	andmi	r0, r0, r0
    722c:	01000000 	mrseq	r0, (UNDEF: 0)
    7230:	0008c79c 	muleq	r8, ip, r7
    7234:	2f091400 	svccs	0x00091400
    7238:	7a010000 	bvc	47240 <_Min_Stack_Size+0x47040>
    723c:	0002fb03 	andeq	pc, r2, r3, lsl #22
    7240:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    7244:	00319214 	eorseq	r9, r1, r4, lsl r2
    7248:	037a0100 	cmneq	sl, #0, 2
    724c:	00000093 	muleq	r0, r3, r0
    7250:	00729102 	rsbseq	r9, r2, r2, lsl #2
    7254:	0031ca16 	eorseq	ip, r1, r6, lsl sl
    7258:	04060100 	streq	r0, [r6], #-256	; 0xffffff00
    725c:	00000120 	andeq	r0, r0, r0, lsr #2
    7260:	080051a8 	stmdaeq	r0, {r3, r5, r7, r8, ip, lr}
    7264:	00000060 	andeq	r0, r0, r0, rrx
    7268:	093c9c01 	ldmdbeq	ip!, {r0, sl, fp, ip, pc}
    726c:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    7270:	0100002f 	tsteq	r0, pc, lsr #32
    7274:	02fb0406 	rscseq	r0, fp, #100663296	; 0x6000000
    7278:	91020000 	mrsls	r0, (UNDEF: 2)
    727c:	30851464 	addcc	r1, r5, r4, ror #8
    7280:	06010000 	streq	r0, [r1], -r0
    7284:	00009e04 	andeq	r9, r0, r4, lsl #28
    7288:	60910200 	addsvs	r0, r1, r0, lsl #4
    728c:	002ebe15 	eoreq	fp, lr, r5, lsl lr
    7290:	04080100 	streq	r0, [r8], #-256	; 0xffffff00
    7294:	0000009e 	muleq	r0, lr, r0
    7298:	15709102 	ldrbne	r9, [r0, #-258]!	; 0xfffffefe
    729c:	00002f8e 	andeq	r2, r0, lr, lsl #31
    72a0:	9e040901 	cdpls	9, 0, cr0, cr4, cr1, {0}
    72a4:	02000000 	andeq	r0, r0, #0
    72a8:	a5156c91 	ldrge	r6, [r5, #-3217]	; 0xfffff36f
    72ac:	01000030 	tsteq	r0, r0, lsr r0
    72b0:	009e0409 	addseq	r0, lr, r9, lsl #8
    72b4:	91020000 	mrsls	r0, (UNDEF: 2)
    72b8:	20ba1568 	adcscs	r1, sl, r8, ror #10
    72bc:	0a010000 	beq	472c4 <_Min_Stack_Size+0x470c4>
    72c0:	00012004 	andeq	r2, r1, r4
    72c4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    72c8:	31e71600 	mvncc	r1, r0, lsl #12
    72cc:	36010000 	strcc	r0, [r1], -r0
    72d0:	00009e04 	andeq	r9, r0, r4, lsl #28
    72d4:	00000000 	andeq	r0, r0, r0
    72d8:	00004400 	andeq	r4, r0, r0, lsl #8
    72dc:	939c0100 	orrsls	r0, ip, #0, 2
    72e0:	14000009 	strne	r0, [r0], #-9
    72e4:	00002f09 	andeq	r2, r0, r9, lsl #30
    72e8:	fb043601 	blx	114af6 <_Min_Stack_Size+0x1148f6>
    72ec:	02000002 	andeq	r0, r0, #2
    72f0:	be156491 	cfcmpslt	r6, mvf5, mvf1
    72f4:	0100002e 	tsteq	r0, lr, lsr #32
    72f8:	009e0438 	addseq	r0, lr, r8, lsr r4
    72fc:	91020000 	mrsls	r0, (UNDEF: 2)
    7300:	2f8e1574 	svccs	0x008e1574
    7304:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    7308:	00009e04 	andeq	r9, r0, r4, lsl #28
    730c:	70910200 	addsvc	r0, r1, r0, lsl #4
    7310:	0030a515 	eorseq	sl, r0, r5, lsl r5
    7314:	04390100 	ldrteq	r0, [r9], #-256	; 0xffffff00
    7318:	0000009e 	muleq	r0, lr, r0
    731c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    7320:	002e7616 	eoreq	r7, lr, r6, lsl r6
    7324:	046d0100 	strbteq	r0, [sp], #-256	; 0xffffff00
    7328:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    732c:	08005208 	stmdaeq	r0, {r3, r9, ip, lr}
    7330:	00000066 	andeq	r0, r0, r6, rrx
    7334:	09f99c01 	ldmibeq	r9!, {r0, sl, fp, ip, pc}^
    7338:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    733c:	0100002f 	tsteq	r0, pc, lsr #32
    7340:	02fb046d 	rscseq	r0, fp, #1828716544	; 0x6d000000
    7344:	91020000 	mrsls	r0, (UNDEF: 2)
    7348:	2f651464 	svccs	0x00651464
    734c:	6d010000 	stcvs	0, cr0, [r1, #-0]
    7350:	00009e04 	andeq	r9, r0, r4, lsl #28
    7354:	60910200 	addsvs	r0, r1, r0, lsl #4
    7358:	0019d915 	andseq	sp, r9, r5, lsl r9
    735c:	046f0100 	strbteq	r0, [pc], #-256	; 7364 <_Min_Stack_Size+0x7164>
    7360:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    7364:	15779102 	ldrbne	r9, [r7, #-258]!	; 0xfffffefe
    7368:	00003030 	andeq	r3, r0, r0, lsr r0
    736c:	b0047001 	andlt	r7, r4, r1
    7370:	02000000 	andeq	r0, r0, #0
    7374:	b5157091 	ldrlt	r7, [r5, #-145]	; 0xffffff6f
    7378:	0100002e 	tsteq	r0, lr, lsr #32
    737c:	00b00470 	adcseq	r0, r0, r0, ror r4
    7380:	91020000 	mrsls	r0, (UNDEF: 2)
    7384:	ab13006c 	blge	4c753c <_Min_Stack_Size+0x4c733c>
    7388:	01000030 	tsteq	r0, r0, lsr r0
    738c:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    7390:	002c0000 	eoreq	r0, ip, r0
    7394:	9c010000 	stcls	0, cr0, [r1], {-0}
    7398:	00000a3d 	andeq	r0, r0, sp, lsr sl
    739c:	002f0914 	eoreq	r0, pc, r4, lsl r9	; <UNPREDICTABLE>
    73a0:	04bc0100 	ldrteq	r0, [ip], #256	; 0x100
    73a4:	000002fb 	strdeq	r0, [r0], -fp
    73a8:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    73ac:	00002f65 	andeq	r2, r0, r5, ror #30
    73b0:	9e04bc01 	cdpls	12, 0, cr11, cr4, cr1, {0}
    73b4:	02000000 	andeq	r0, r0, #0
    73b8:	1f156891 	svcne	0x00156891
    73bc:	01000030 	tsteq	r0, r0, lsr r0
    73c0:	009e04be 			; <UNDEFINED> instruction: 0x009e04be
    73c4:	91020000 	mrsls	r0, (UNDEF: 2)
    73c8:	94160074 	ldrls	r0, [r6], #-116	; 0xffffff8c
    73cc:	0100002f 	tsteq	r0, pc, lsr #32
    73d0:	00dc04de 	ldrsbeq	r0, [ip], #78	; 0x4e
    73d4:	00000000 	andeq	r0, r0, r0
    73d8:	005a0000 	subseq	r0, sl, r0
    73dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    73e0:	00000a94 	muleq	r0, r4, sl
    73e4:	002f0914 	eoreq	r0, pc, r4, lsl r9	; <UNPREDICTABLE>
    73e8:	04de0100 	ldrbeq	r0, [lr], #256	; 0x100
    73ec:	000002fb 	strdeq	r0, [r0], -fp
    73f0:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    73f4:	00002eae 	andeq	r2, r0, lr, lsr #29
    73f8:	9e04de01 	cdpls	14, 0, cr13, cr4, cr1, {0}
    73fc:	02000000 	andeq	r0, r0, #0
    7400:	d9156891 	ldmdble	r5, {r0, r4, r7, fp, sp, lr}
    7404:	01000019 	tsteq	r0, r9, lsl r0
    7408:	00dc04e0 	sbcseq	r0, ip, r0, ror #9
    740c:	91020000 	mrsls	r0, (UNDEF: 2)
    7410:	20b41577 	adcscs	r1, r4, r7, ror r5
    7414:	e1010000 	mrs	r0, (UNDEF: 1)
    7418:	00009e04 	andeq	r9, r0, r4, lsl #28
    741c:	70910200 	addsvc	r0, r1, r0, lsl #4
    7420:	2f191300 	svccs	0x00191300
    7424:	1b010000 	blne	4742c <_Min_Stack_Size+0x4722c>
    7428:	00000005 	andeq	r0, r0, r5
    742c:	00002c00 	andeq	r2, r0, r0, lsl #24
    7430:	d89c0100 	ldmle	ip, {r8}
    7434:	1400000a 	strne	r0, [r0], #-10
    7438:	00002f09 	andeq	r2, r0, r9, lsl #30
    743c:	fb051b01 	blx	14e04a <_Min_Stack_Size+0x14de4a>
    7440:	02000002 	andeq	r0, r0, #2
    7444:	ae146c91 	mrcge	12, 0, r6, cr4, cr1, {4}
    7448:	0100002e 	tsteq	r0, lr, lsr #32
    744c:	009e051b 	addseq	r0, lr, fp, lsl r5
    7450:	91020000 	mrsls	r0, (UNDEF: 2)
    7454:	301f1568 	andscc	r1, pc, r8, ror #10
    7458:	1d010000 	stcne	0, cr0, [r1, #-0]
    745c:	00009e05 	andeq	r9, r0, r5, lsl #28
    7460:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    7464:	02271800 	eoreq	r1, r7, #0, 16
    7468:	ce070000 	cdpgt	0, 0, cr0, cr7, cr0, {0}
    746c:	000ae406 	andeq	lr, sl, r6, lsl #8
    7470:	007a0500 	rsbseq	r0, sl, r0, lsl #10
    7474:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    7478:	04000001 	streq	r0, [r0], #-1
    747c:	00163300 	andseq	r3, r6, r0, lsl #6
    7480:	81010400 	tsthi	r1, r0, lsl #8
    7484:	01000001 	tsteq	r0, r1
    7488:	00003247 	andeq	r3, r0, r7, asr #4
    748c:	000009c8 	andeq	r0, r0, r8, asr #19
    7490:	00000000 	andeq	r0, r0, r0
    7494:	00003499 	muleq	r0, r9, r4
    7498:	c3060102 	movwgt	r0, #24834	; 0x6102
    749c:	03000000 	movweq	r0, #0
    74a0:	00000093 	muleq	r0, r3, r0
    74a4:	00331d02 	eorseq	r1, r3, r2, lsl #26
    74a8:	01020000 	mrseq	r0, (UNDEF: 2)
    74ac:	0000c108 	andeq	ip, r0, r8, lsl #2
    74b0:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    74b4:	00000051 	andeq	r0, r0, r1, asr r0
    74b8:	00002e03 	andeq	r2, r0, r3, lsl #28
    74bc:	4c2b0200 	sfmmi	f0, 4, [fp], #-0
    74c0:	02000000 	andeq	r0, r0, #0
    74c4:	01230702 			; <UNDEFINED> instruction: 0x01230702
    74c8:	04020000 	streq	r0, [r2], #-0
    74cc:	00006d05 	andeq	r6, r0, r5, lsl #26
    74d0:	00230300 	eoreq	r0, r3, r0, lsl #6
    74d4:	41020000 	mrsmi	r0, (UNDEF: 2)
    74d8:	00000065 	andeq	r0, r0, r5, rrx
    74dc:	fa070402 	blx	1c84ec <_Min_Stack_Size+0x1c82ec>
    74e0:	02000000 	andeq	r0, r0, #0
    74e4:	00680508 	rsbeq	r0, r8, r8, lsl #10
    74e8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    74ec:	0000f507 	andeq	pc, r0, r7, lsl #10
    74f0:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    74f4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    74f8:	ff070402 			; <UNDEFINED> instruction: 0xff070402
    74fc:	03000000 	movweq	r0, #0
    7500:	00000095 	muleq	r0, r5, r0
    7504:	00281403 	eoreq	r1, r8, r3, lsl #8
    7508:	30030000 	andcc	r0, r3, r0
    750c:	03000000 	movweq	r0, #0
    7510:	0000411a 	andeq	r4, r0, sl, lsl r1
    7514:	00250300 	eoreq	r0, r5, r0, lsl #6
    7518:	20030000 	andcs	r0, r3, r0
    751c:	0000005a 	andeq	r0, r0, sl, asr r0
    7520:	15070402 	strne	r0, [r7, #-1026]	; 0xfffffbfe
    7524:	05000000 	streq	r0, [r0, #-0]
    7528:	0000009e 	muleq	r0, lr, r0
    752c:	07040106 	streq	r0, [r4, -r6, lsl #2]
    7530:	0000cb02 	andeq	ip, r0, r2, lsl #22
    7534:	1c8b0700 	stcne	7, cr0, [fp], {0}
    7538:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    753c:	00544553 	subseq	r4, r4, r3, asr r5
    7540:	7d090001 	stcvc	0, cr0, [r9, #-4]
    7544:	0400002e 	streq	r0, [r0], #-46	; 0xffffffd2
    7548:	00b50207 	adcseq	r0, r5, r7, lsl #4
    754c:	100a0000 	andne	r0, sl, r0
    7550:	12041e04 	andne	r1, r4, #4, 28	; 0x40
    7554:	0b000001 	bleq	7560 <_Min_Stack_Size+0x7360>
    7558:	0400524b 	streq	r5, [r0], #-587	; 0xfffffdb5
    755c:	00b00420 	adcseq	r0, r0, r0, lsr #8
    7560:	0b000000 	bleq	7568 <_Min_Stack_Size+0x7368>
    7564:	04005250 	streq	r5, [r0], #-592	; 0xfffffdb0
    7568:	00b00421 	adcseq	r0, r0, r1, lsr #8
    756c:	0b040000 	bleq	107574 <_Min_Stack_Size+0x107374>
    7570:	00524c52 	subseq	r4, r2, r2, asr ip
    7574:	b0042204 	andlt	r2, r4, r4, lsl #4
    7578:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    757c:	0052530b 	subseq	r5, r2, fp, lsl #6
    7580:	b0042304 	andlt	r2, r4, r4, lsl #6
    7584:	0c000000 	stceq	0, cr0, [r0], {-0}
    7588:	32c00900 	sbccc	r0, r0, #0, 18
    758c:	24040000 	strcs	r0, [r4], #-0
    7590:	0000d704 	andeq	sp, r0, r4, lsl #14
    7594:	327e0c00 	rsbscc	r0, lr, #0, 24
    7598:	5c010000 	stcpl	0, cr0, [r1], {-0}
    759c:	08005270 	stmdaeq	r0, {r4, r5, r6, r9, ip, lr}
    75a0:	00000020 	andeq	r0, r0, r0, lsr #32
    75a4:	01429c01 	cmpeq	r2, r1, lsl #24
    75a8:	920d0000 	andls	r0, sp, #0
    75ac:	01000032 	tsteq	r0, r2, lsr r0
    75b0:	0000935c 	andeq	r9, r0, ip, asr r3
    75b4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    75b8:	32130c00 	andscc	r0, r3, #0, 24
    75bc:	70010000 	andvc	r0, r1, r0
    75c0:	08005290 	stmdaeq	r0, {r4, r7, r9, ip, lr}
    75c4:	00000020 	andeq	r0, r0, r0, lsr #32
    75c8:	01669c01 	cmneq	r6, r1, lsl #24
    75cc:	040d0000 	streq	r0, [sp], #-0
    75d0:	01000032 	tsteq	r0, r2, lsr r0
    75d4:	00008870 	andeq	r8, r0, r0, ror r8
    75d8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    75dc:	32250c00 	eorcc	r0, r5, #0, 24
    75e0:	7d010000 	stcvc	0, cr0, [r1, #-0]
    75e4:	080052b0 	stmdaeq	r0, {r4, r5, r7, r9, ip, lr}
    75e8:	00000020 	andeq	r0, r0, r0, lsr #32
    75ec:	018a9c01 	orreq	r9, sl, r1, lsl #24
    75f0:	2d0d0000 	stccs	0, cr0, [sp, #-0]
    75f4:	01000032 	tsteq	r0, r2, lsr r0
    75f8:	0000937d 	andeq	r9, r0, sp, ror r3
    75fc:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    7600:	32340e00 	eorscc	r0, r4, #0, 28
    7604:	8a010000 	bhi	4760c <_Min_Stack_Size+0x4740c>
    7608:	080052d0 	stmdaeq	r0, {r4, r6, r7, r9, ip, lr}
    760c:	00000018 	andeq	r0, r0, r8, lsl r0
    7610:	f80e9c01 			; <UNDEFINED> instruction: 0xf80e9c01
    7614:	01000031 	tsteq	r0, r1, lsr r0
    7618:	0052e894 			; <UNDEFINED> instruction: 0x0052e894
    761c:	00001808 	andeq	r1, r0, r8, lsl #16
    7620:	0f9c0100 	svceq	0x009c0100
    7624:	000032a3 	andeq	r3, r0, r3, lsr #5
    7628:	00cba101 	sbceq	sl, fp, r1, lsl #2
    762c:	00000000 	andeq	r0, r0, r0
    7630:	00380000 	eorseq	r0, r8, r0
    7634:	9c010000 	stcls	0, cr0, [r1], {-0}
    7638:	000001e2 	andeq	r0, r0, r2, ror #3
    763c:	0032b60d 	eorseq	fp, r2, sp, lsl #12
    7640:	93a10100 			; <UNDEFINED> instruction: 0x93a10100
    7644:	02000000 	andeq	r0, r0, #0
    7648:	d9106e91 	ldmdble	r0, {r0, r4, r7, r9, sl, fp, sp, lr}
    764c:	01000019 	tsteq	r0, r9, lsl r0
    7650:	0000cba3 	andeq	ip, r0, r3, lsr #23
    7654:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    7658:	02271100 	eoreq	r1, r7, #0, 2
    765c:	ce050000 	cdpgt	0, 0, cr0, cr5, cr0, {0}
    7660:	0001ee06 	andeq	lr, r1, r6, lsl #28
    7664:	007a0500 	rsbseq	r0, sl, r0, lsl #10
    7668:	44000000 	strmi	r0, [r0], #-0
    766c:	04000001 	streq	r0, [r0], #-1
    7670:	00173400 	andseq	r3, r7, r0, lsl #8
    7674:	81010400 	tsthi	r1, r0, lsl #8
    7678:	01000001 	tsteq	r0, r1
    767c:	000032cd 	andeq	r3, r0, sp, asr #5
    7680:	00000a00 	andeq	r0, r0, r0, lsl #20
    7684:	00000000 	andeq	r0, r0, r0
    7688:	0000363d 	andeq	r3, r0, sp, lsr r6
    768c:	c3060102 	movwgt	r0, #24834	; 0x6102
    7690:	02000000 	andeq	r0, r0, #0
    7694:	00c10801 	sbceq	r0, r1, r1, lsl #16
    7698:	02020000 	andeq	r0, r2, #0
    769c:	00005105 	andeq	r5, r0, r5, lsl #2
    76a0:	07020200 	streq	r0, [r2, -r0, lsl #4]
    76a4:	00000123 	andeq	r0, r0, r3, lsr #2
    76a8:	6d050402 	cfstrsvs	mvf0, [r5, #-8]
    76ac:	03000000 	movweq	r0, #0
    76b0:	00000023 	andeq	r0, r0, r3, lsr #32
    76b4:	004f4102 	subeq	r4, pc, r2, lsl #2
    76b8:	04020000 	streq	r0, [r2], #-0
    76bc:	0000fa07 	andeq	pc, r0, r7, lsl #20
    76c0:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    76c4:	00000068 	andeq	r0, r0, r8, rrx
    76c8:	f5070802 			; <UNDEFINED> instruction: 0xf5070802
    76cc:	04000000 	streq	r0, [r0], #-0
    76d0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    76d4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    76d8:	0000ff07 	andeq	pc, r0, r7, lsl #30
    76dc:	00250300 	eoreq	r0, r5, r0, lsl #6
    76e0:	20030000 	andcs	r0, r3, r0
    76e4:	00000044 	andeq	r0, r0, r4, asr #32
    76e8:	15070402 	strne	r0, [r7, #-1026]	; 0xfffffbfe
    76ec:	05000000 	streq	r0, [r0, #-0]
    76f0:	00000072 	andeq	r0, r0, r2, ror r0
    76f4:	09040106 	stmdbeq	r4, {r1, r2, r8}
    76f8:	00009f02 	andeq	r9, r0, r2, lsl #30
    76fc:	02fb0700 	rscseq	r0, fp, #0, 14
    7700:	07000000 	streq	r0, [r0, -r0]
    7704:	00000461 	andeq	r0, r0, r1, ror #8
    7708:	ad080001 	stcge	0, cr0, [r8, #-4]
    770c:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    7710:	00890209 	addeq	r0, r9, r9, lsl #4
    7714:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
    7718:	ce031404 	cdpgt	4, 0, cr1, cr3, cr4, {0}
    771c:	0a000000 	beq	7724 <_Min_Stack_Size+0x7524>
    7720:	00003341 	andeq	r3, r0, r1, asr #6
    7724:	84031604 	strhi	r1, [r3], #-1540	; 0xfffff9fc
    7728:	00000000 	andeq	r0, r0, r0
    772c:	0052430b 	subseq	r4, r2, fp, lsl #6
    7730:	84031704 	strhi	r1, [r3], #-1796	; 0xfffff8fc
    7734:	04000000 	streq	r0, [r0], #-0
    7738:	33060800 	movwcc	r0, #26624	; 0x6800
    773c:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    7740:	0000ab03 	andeq	sl, r0, r3, lsl #22
    7744:	33230c00 			; <UNDEFINED> instruction: 0x33230c00
    7748:	54010000 	strpl	r0, [r1], #-0
    774c:	00000072 	andeq	r0, r0, r2, ror r0
    7750:	00000000 	andeq	r0, r0, r0
    7754:	00000018 	andeq	r0, r0, r8, lsl r0
    7758:	480c9c01 	stmdami	ip, {r0, sl, fp, ip, pc}
    775c:	01000033 	tsteq	r0, r3, lsr r0
    7760:	0000725e 	andeq	r7, r0, lr, asr r2
    7764:	00000000 	andeq	r0, r0, r0
    7768:	00001c00 	andeq	r1, r0, r0, lsl #24
    776c:	0d9c0100 	ldfeqs	f0, [ip]
    7770:	00003315 	andeq	r3, r0, r5, lsl r3
    7774:	53008601 	movwpl	r8, #1537	; 0x601
    7778:	003c0800 	eorseq	r0, ip, r0, lsl #16
    777c:	9c010000 	stcls	0, cr0, [r1], {-0}
    7780:	00000136 	andeq	r0, r0, r6, lsr r1
    7784:	0033330e 	eorseq	r3, r3, lr, lsl #6
    7788:	72860100 	addvc	r0, r6, #0, 2
    778c:	02000000 	andeq	r0, r0, #0
    7790:	ec0e7491 	cfstrs	mvf7, [lr], {145}	; 0x91
    7794:	01000016 	tsteq	r0, r6, lsl r0
    7798:	00009f86 	andeq	r9, r0, r6, lsl #31
    779c:	73910200 	orrsvc	r0, r1, #0, 4
    77a0:	02270f00 	eoreq	r0, r7, #0, 30
    77a4:	ce050000 	cdpgt	0, 0, cr0, cr5, cr0, {0}
    77a8:	00014206 	andeq	r4, r1, r6, lsl #4
    77ac:	00640500 	rsbeq	r0, r4, r0, lsl #10
    77b0:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    77b4:	04000009 	streq	r0, [r0], #-9
    77b8:	00181200 	andseq	r1, r8, r0, lsl #4
    77bc:	81010400 	tsthi	r1, r0, lsl #8
    77c0:	01000001 	tsteq	r0, r1
    77c4:	00003546 	andeq	r3, r0, r6, asr #10
    77c8:	00000a20 	andeq	r0, r0, r0, lsr #20
    77cc:	00000000 	andeq	r0, r0, r0
    77d0:	000037ab 	andeq	r3, r0, fp, lsr #15
    77d4:	0033ea02 	eorseq	lr, r3, r2, lsl #20
    77d8:	a7040100 	strge	r0, [r4, -r0, lsl #2]
    77dc:	00000160 	andeq	r0, r0, r0, ror #2
    77e0:	0035e303 	eorseq	lr, r5, r3, lsl #6
    77e4:	16037200 	strne	r7, [r3], -r0, lsl #4
    77e8:	74000034 	strvc	r0, [r0], #-52	; 0xffffffcc
    77ec:	00357003 	eorseq	r7, r5, r3
    77f0:	6d037500 	cfstr32vs	mvfx7, [r3, #-0]
    77f4:	76000036 			; <UNDEFINED> instruction: 0x76000036
    77f8:	00368a03 	eorseq	r8, r6, r3, lsl #20
    77fc:	5b037b00 	blpl	e6404 <_Min_Stack_Size+0xe6204>
    7800:	7c000036 	stcvc	0, cr0, [r0], {54}	; 0x36
    7804:	0033ef03 	eorseq	lr, r3, r3, lsl #30
    7808:	2e037e00 	cdpcs	14, 0, cr7, cr3, cr0, {0}
    780c:	7f000036 	svcvc	0x00000036
    7810:	00352e03 	eorseq	r2, r5, r3, lsl #28
    7814:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
    7818:	01000035 	tsteq	r0, r5, lsr r0
    781c:	0036e603 	eorseq	lr, r6, r3, lsl #12
    7820:	ce030200 	cdpgt	2, 0, cr0, cr3, cr0, {0}
    7824:	03000035 	movweq	r0, #53	; 0x35
    7828:	0033ca03 	eorseq	ip, r3, r3, lsl #20
    782c:	0d030400 	cfstrseq	mvf0, [r3, #-0]
    7830:	05000034 	streq	r0, [r0, #-52]	; 0xffffffcc
    7834:	0033d503 	eorseq	sp, r3, r3, lsl #10
    7838:	04030600 	streq	r0, [r3], #-1536	; 0xfffffa00
    783c:	07000036 	smladxeq	r0, r6, r0, r0
    7840:	00349d03 	eorseq	r9, r4, r3, lsl #26
    7844:	b3030800 	movwlt	r0, #14336	; 0x3800
    7848:	09000036 	stmdbeq	r0, {r1, r2, r4, r5}
    784c:	00357e03 	eorseq	r7, r5, r3, lsl #28
    7850:	e5030a00 	str	r0, [r3, #-2560]	; 0xfffff600
    7854:	0b000034 	bleq	792c <_Min_Stack_Size+0x772c>
    7858:	0033b703 	eorseq	fp, r3, r3, lsl #14
    785c:	92030c00 	andls	r0, r3, #0, 24
    7860:	0d000035 	stceq	0, cr0, [r0, #-212]	; 0xffffff2c
    7864:	00344403 	eorseq	r4, r4, r3, lsl #8
    7868:	a0030e00 	andge	r0, r3, r0, lsl #28
    786c:	0f000036 	svceq	0x00000036
    7870:	0034b503 	eorseq	fp, r4, r3, lsl #10
    7874:	7b031000 	blvc	cb87c <_Min_Stack_Size+0xcb67c>
    7878:	11000033 	tstne	r0, r3, lsr r0
    787c:	0036ce03 	eorseq	ip, r6, r3, lsl #28
    7880:	65031200 	strvs	r1, [r3, #-512]	; 0xfffffe00
    7884:	13000034 	movwne	r0, #52	; 0x34
    7888:	00335803 	eorseq	r5, r3, r3, lsl #16
    788c:	57031400 	strpl	r1, [r3, -r0, lsl #8]
    7890:	15000034 	strne	r0, [r0, #-52]	; 0xffffffcc
    7894:	00336d03 	eorseq	r6, r3, r3, lsl #26
    7898:	7d031600 	stcvc	6, cr1, [r3, #-0]
    789c:	17000036 	smladxne	r0, r6, r0, r0
    78a0:	00342c03 	eorseq	r2, r4, r3, lsl #24
    78a4:	c1031800 	tstgt	r3, r0, lsl #16
    78a8:	19000035 	stmdbne	r0, {r0, r2, r4, r5}
    78ac:	00360f03 	eorseq	r0, r6, r3, lsl #30
    78b0:	f7031a00 			; <UNDEFINED> instruction: 0xf7031a00
    78b4:	1b000035 	blne	7990 <_Min_Stack_Size+0x7790>
    78b8:	00363b03 	eorseq	r3, r6, r3, lsl #22
    78bc:	c8031c00 	stmdagt	r3, {sl, fp, ip}
    78c0:	1d000034 	stcne	0, cr0, [r0, #-208]	; 0xffffff30
    78c4:	0033ad03 	eorseq	sl, r3, r3, lsl #26
    78c8:	a5031e00 	strge	r1, [r3, #-3584]	; 0xfffff200
    78cc:	1f000035 	svcne	0x00000035
    78d0:	00362103 	eorseq	r2, r6, r3, lsl #2
    78d4:	a8032000 	stmdage	r3, {sp}
    78d8:	21000034 	tstcs	r0, r4, lsr r0
    78dc:	00338e03 	eorseq	r8, r3, r3, lsl #28
    78e0:	3a032200 	bcc	d00e8 <_Min_Stack_Size+0xcfee8>
    78e4:	23000034 	movwcs	r0, #52	; 0x34
    78e8:	00369603 	eorseq	r9, r6, r3, lsl #12
    78ec:	d7032400 	strle	r2, [r3, -r0, lsl #8]
    78f0:	25000035 	strcs	r0, [r0, #-53]	; 0xffffffcb
    78f4:	00347903 	eorseq	r7, r4, r3, lsl #18
    78f8:	da032600 	ble	d1100 <_Min_Stack_Size+0xd0f00>
    78fc:	27000036 	smladxcs	r0, r6, r0, r0
    7900:	0033e003 	eorseq	lr, r3, r3
    7904:	f2032800 	vadd.i8	d2, d3, d0
    7908:	29000036 	stmdbcs	r0, {r1, r2, r4, r5}
    790c:	00351f03 	eorseq	r1, r5, r3, lsl #30
    7910:	04002a00 	streq	r2, [r0], #-2560	; 0xfffff600
    7914:	00c30601 	sbceq	r0, r3, r1, lsl #12
    7918:	93050000 	movwls	r0, #20480	; 0x5000
    791c:	02000000 	andeq	r0, r0, #0
    7920:	0001721d 	andeq	r7, r1, sp, lsl r2
    7924:	08010400 	stmdaeq	r1, {sl}
    7928:	000000c1 	andeq	r0, r0, r1, asr #1
    792c:	51050204 	tstpl	r5, r4, lsl #4
    7930:	05000000 	streq	r0, [r0, #-0]
    7934:	0000002e 	andeq	r0, r0, lr, lsr #32
    7938:	018b2b02 	orreq	r2, fp, r2, lsl #22
    793c:	02040000 	andeq	r0, r4, #0
    7940:	00012307 	andeq	r2, r1, r7, lsl #6
    7944:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    7948:	0000006d 	andeq	r0, r0, sp, rrx
    794c:	00002305 	andeq	r2, r0, r5, lsl #6
    7950:	a4410200 	strbge	r0, [r1], #-512	; 0xfffffe00
    7954:	04000001 	streq	r0, [r0], #-1
    7958:	00fa0704 	rscseq	r0, sl, r4, lsl #14
    795c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    7960:	00006805 	andeq	r6, r0, r5, lsl #16
    7964:	07080400 	streq	r0, [r8, -r0, lsl #8]
    7968:	000000f5 	strdeq	r0, [r0], -r5
    796c:	69050406 	stmdbvs	r5, {r1, r2, sl}
    7970:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
    7974:	00ff0704 	rscseq	r0, pc, r4, lsl #14
    7978:	95050000 	strls	r0, [r5, #-0]
    797c:	03000000 	movweq	r0, #0
    7980:	00016714 	andeq	r6, r1, r4, lsl r7
    7984:	00300500 	eorseq	r0, r0, r0, lsl #10
    7988:	1a030000 	bne	c7990 <_Min_Stack_Size+0xc7790>
    798c:	00000180 	andeq	r0, r0, r0, lsl #3
    7990:	00002505 	andeq	r2, r0, r5, lsl #10
    7994:	99200300 	stmdbls	r0!, {r8, r9}
    7998:	04000001 	streq	r0, [r0], #-1
    799c:	00150704 	andseq	r0, r5, r4, lsl #14
    79a0:	dd070000 	stcle	0, cr0, [r7, #-0]
    79a4:	07000001 	streq	r0, [r0, -r1]
    79a8:	000001d2 	ldrdeq	r0, [r0], -r2
    79ac:	07040108 	streq	r0, [r4, -r8, lsl #2]
    79b0:	00020f02 	andeq	r0, r2, r2, lsl #30
    79b4:	1c8b0300 	stcne	3, cr0, [fp], {0}
    79b8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    79bc:	00544553 	subseq	r4, r4, r3, asr r5
    79c0:	01080001 	tsteq	r8, r1
    79c4:	25020904 	strcs	r0, [r2, #-2308]	; 0xfffff6fc
    79c8:	03000002 	movweq	r0, #2
    79cc:	000002fb 	strdeq	r0, [r0], -fp
    79d0:	04610300 	strbteq	r0, [r1], #-768	; 0xfffffd00
    79d4:	00010000 	andeq	r0, r1, r0
    79d8:	0017ad0a 	andseq	sl, r7, sl, lsl #26
    79dc:	02090400 	andeq	r0, r9, #0, 8
    79e0:	0000020f 	andeq	r0, r0, pc, lsl #4
    79e4:	e9041c0b 	stmdb	r4, {r0, r1, r3, sl, fp, ip}
    79e8:	00029603 	andeq	r9, r2, r3, lsl #12
    79ec:	52430c00 	subpl	r0, r3, #0, 24
    79f0:	eb04004c 	bl	107b28 <_Min_Stack_Size+0x107928>
    79f4:	0001ef03 	andeq	lr, r1, r3, lsl #30
    79f8:	430c0000 	movwmi	r0, #49152	; 0xc000
    79fc:	04004852 	streq	r4, [r0], #-2130	; 0xfffff7ae
    7a00:	01ef03ec 	mvneq	r0, ip, ror #7
    7a04:	0c040000 	stceq	0, cr0, [r4], {-0}
    7a08:	00524449 	subseq	r4, r2, r9, asr #8
    7a0c:	ef03ed04 	svc	0x0003ed04
    7a10:	08000001 	stmdaeq	r0, {r0}
    7a14:	52444f0c 	subpl	r4, r4, #12, 30	; 0x30
    7a18:	03ee0400 	mvneq	r0, #0, 8
    7a1c:	000001ef 	andeq	r0, r0, pc, ror #3
    7a20:	1d520d0c 	ldclne	13, cr0, [r2, #-48]	; 0xffffffd0
    7a24:	ef040000 	svc	0x00040000
    7a28:	0001ef03 	andeq	lr, r1, r3, lsl #30
    7a2c:	420c1000 	andmi	r1, ip, #0
    7a30:	04005252 	streq	r5, [r0], #-594	; 0xfffffdae
    7a34:	01ef03f0 	strdeq	r0, [pc, #48]	; 7a6c <_Min_Stack_Size+0x786c>
    7a38:	0d140000 	ldceq	0, cr0, [r4, #-0]
    7a3c:	00001dec 	andeq	r1, r0, ip, ror #27
    7a40:	ef03f104 	svc	0x0003f104
    7a44:	18000001 	stmdane	r0, {r0}
    7a48:	1c020a00 	stcne	10, cr0, [r2], {-0}
    7a4c:	f2040000 	vhadd.s8	d0, d4, d0
    7a50:	00023103 	andeq	r3, r2, r3, lsl #2
    7a54:	04240b00 	strteq	r0, [r4], #-2816	; 0xfffff500
    7a58:	03950404 	orrseq	r0, r5, #4, 8	; 0x4000000
    7a5c:	430c0000 	movwmi	r0, #49152	; 0xc000
    7a60:	04003152 	streq	r3, [r0], #-338	; 0xfffffeae
    7a64:	01f40406 	mvnseq	r0, r6, lsl #8
    7a68:	0d000000 	stceq	0, cr0, [r0, #-0]
    7a6c:	000003c1 	andeq	r0, r0, r1, asr #7
    7a70:	d2040704 	andle	r0, r4, #4, 14	; 0x100000
    7a74:	02000001 	andeq	r0, r0, #1
    7a78:	3252430c 	subscc	r4, r2, #12, 6	; 0x30000000
    7a7c:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
    7a80:	000001f4 	strdeq	r0, [r0], -r4
    7a84:	03cb0d04 	biceq	r0, fp, #4, 26	; 0x100
    7a88:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    7a8c:	0001d204 	andeq	sp, r1, r4, lsl #4
    7a90:	b70d0600 	strlt	r0, [sp, -r0, lsl #12]
    7a94:	04000003 	streq	r0, [r0], #-3
    7a98:	01f4040a 	mvnseq	r0, sl, lsl #8
    7a9c:	0d080000 	stceq	0, cr0, [r8, #-0]
    7aa0:	000003d5 	ldrdeq	r0, [r0], -r5
    7aa4:	d2040b04 	andle	r0, r4, #4, 22	; 0x1000
    7aa8:	0a000001 	beq	7ab4 <_Min_Stack_Size+0x78b4>
    7aac:	0003bc0d 	andeq	fp, r3, sp, lsl #24
    7ab0:	040c0400 	streq	r0, [ip], #-1024	; 0xfffffc00
    7ab4:	000001f4 	strdeq	r0, [r0], -r4
    7ab8:	02b60d0c 	adcseq	r0, r6, #12, 26	; 0x300
    7abc:	0d040000 	stceq	0, cr0, [r4, #-0]
    7ac0:	0001d204 	andeq	sp, r1, r4, lsl #4
    7ac4:	440c0e00 	strmi	r0, [ip], #-3584	; 0xfffff200
    7ac8:	0e040052 	mcreq	0, 0, r0, cr4, cr2, {2}
    7acc:	0001f404 	andeq	pc, r1, r4, lsl #8
    7ad0:	e90d1000 	stmdb	sp, {ip}
    7ad4:	04000003 	streq	r0, [r0], #-3
    7ad8:	01d2040f 	bicseq	r0, r2, pc, lsl #8
    7adc:	0c120000 	ldceq	0, cr0, [r2], {-0}
    7ae0:	00315253 	eorseq	r5, r1, r3, asr r2
    7ae4:	f4041004 	vst4.8	{d1-d4}, [r4], r4
    7ae8:	14000001 	strne	r0, [r0], #-1
    7aec:	0003f30d 	andeq	pc, r3, sp, lsl #6
    7af0:	04110400 	ldreq	r0, [r1], #-1024	; 0xfffffc00
    7af4:	000001d2 	ldrdeq	r0, [r0], -r2
    7af8:	52530c16 	subspl	r0, r3, #5632	; 0x1600
    7afc:	12040032 	andne	r0, r4, #50	; 0x32
    7b00:	0001f404 	andeq	pc, r1, r4, lsl #8
    7b04:	e20d1800 	and	r1, sp, #0, 16
    7b08:	04000002 	streq	r0, [r0], #-2
    7b0c:	01d20413 	bicseq	r0, r2, r3, lsl r4
    7b10:	0c1a0000 	ldceq	0, cr0, [sl], {-0}
    7b14:	00524343 	subseq	r4, r2, r3, asr #6
    7b18:	f4041404 	vst3.8	{d1-d3}, [r4], r4
    7b1c:	1c000001 	stcne	0, cr0, [r0], {1}
    7b20:	0004140d 	andeq	r1, r4, sp, lsl #8
    7b24:	04150400 	ldreq	r0, [r5], #-1024	; 0xfffffc00
    7b28:	000001d2 	ldrdeq	r0, [r0], -r2
    7b2c:	044a0d1e 	strbeq	r0, [sl], #-3358	; 0xfffff2e2
    7b30:	16040000 	strne	r0, [r4], -r0
    7b34:	0001f404 	andeq	pc, r1, r4, lsl #8
    7b38:	1e0d2000 	cdpne	0, 0, cr2, cr13, cr0, {0}
    7b3c:	04000004 	streq	r0, [r0], #-4
    7b40:	01d20417 	bicseq	r0, r2, r7, lsl r4
    7b44:	00220000 	eoreq	r0, r2, r0
    7b48:	0003380a 	andeq	r3, r3, sl, lsl #16
    7b4c:	04180400 	ldreq	r0, [r8], #-1024	; 0xfffffc00
    7b50:	000002a2 	andeq	r0, r0, r2, lsr #5
    7b54:	8804240b 	stmdahi	r4, {r0, r1, r3, sl, sp}
    7b58:	00049304 	andeq	r9, r4, r4, lsl #6
    7b5c:	52430c00 	subpl	r0, r3, #0, 24
    7b60:	8a040031 	bhi	107c2c <_Min_Stack_Size+0x107a2c>
    7b64:	0001f404 	andeq	pc, r1, r4, lsl #8
    7b68:	c10d0000 	mrsgt	r0, (UNDEF: 13)
    7b6c:	04000003 	streq	r0, [r0], #-3
    7b70:	01d2048b 	bicseq	r0, r2, fp, lsl #9
    7b74:	0c020000 	stceq	0, cr0, [r2], {-0}
    7b78:	00325243 	eorseq	r5, r2, r3, asr #4
    7b7c:	f4048c04 			; <UNDEFINED> instruction: 0xf4048c04
    7b80:	04000001 	streq	r0, [r0], #-1
    7b84:	0003cb0d 	andeq	ip, r3, sp, lsl #22
    7b88:	048d0400 	streq	r0, [sp], #1024	; 0x400
    7b8c:	000001d2 	ldrdeq	r0, [r0], -r2
    7b90:	52530c06 	subspl	r0, r3, #1536	; 0x600
    7b94:	048e0400 	streq	r0, [lr], #1024	; 0x400
    7b98:	000001f4 	strdeq	r0, [r0], -r4
    7b9c:	03d50d08 	bicseq	r0, r5, #8, 26	; 0x200
    7ba0:	8f040000 	svchi	0x00040000
    7ba4:	0001d204 	andeq	sp, r1, r4, lsl #4
    7ba8:	440c0a00 	strmi	r0, [ip], #-2560	; 0xfffff600
    7bac:	90040052 	andls	r0, r4, r2, asr r0
    7bb0:	0001f404 	andeq	pc, r1, r4, lsl #8
    7bb4:	b60d0c00 	strlt	r0, [sp], -r0, lsl #24
    7bb8:	04000002 	streq	r0, [r0], #-2
    7bbc:	01d20491 			; <UNDEFINED> instruction: 0x01d20491
    7bc0:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    7bc4:	000021bb 			; <UNDEFINED> instruction: 0x000021bb
    7bc8:	f4049204 	vst1.8	{d9-d12}, [r4], r4
    7bcc:	10000001 	andne	r0, r0, r1
    7bd0:	0003e90d 	andeq	lr, r3, sp, lsl #18
    7bd4:	04930400 	ldreq	r0, [r3], #1024	; 0x400
    7bd8:	000001d2 	ldrdeq	r0, [r0], -r2
    7bdc:	20820d12 	addcs	r0, r2, r2, lsl sp
    7be0:	94040000 	strls	r0, [r4], #-0
    7be4:	0001f404 	andeq	pc, r1, r4, lsl #8
    7be8:	f30d1400 	vshl.u8	d1, d0, d13
    7bec:	04000003 	streq	r0, [r0], #-3
    7bf0:	01d20495 			; <UNDEFINED> instruction: 0x01d20495
    7bf4:	0d160000 	ldceq	0, cr0, [r6, #-0]
    7bf8:	00002065 	andeq	r2, r0, r5, rrx
    7bfc:	f4049604 	vst1.8	{d9-d11}, [r4], r4
    7c00:	18000001 	stmdane	r0, {r0}
    7c04:	0002e20d 	andeq	lr, r2, sp, lsl #4
    7c08:	04970400 	ldreq	r0, [r7], #1024	; 0x400
    7c0c:	000001d2 	ldrdeq	r0, [r0], -r2
    7c10:	219f0d1a 	orrscs	r0, pc, sl, lsl sp	; <UNPREDICTABLE>
    7c14:	98040000 	stmdals	r4, {}	; <UNPREDICTABLE>
    7c18:	0001f404 	andeq	pc, r1, r4, lsl #8
    7c1c:	140d1c00 	strne	r1, [sp], #-3072	; 0xfffff400
    7c20:	04000004 	streq	r0, [r0], #-4
    7c24:	01d20499 			; <UNDEFINED> instruction: 0x01d20499
    7c28:	0d1e0000 	ldceq	0, cr0, [lr, #-0]
    7c2c:	000022ad 	andeq	r2, r0, sp, lsr #5
    7c30:	f4049a04 	vst1.8	{d9-d10}, [r4], r4
    7c34:	20000001 	andcs	r0, r0, r1
    7c38:	00041e0d 	andeq	r1, r4, sp, lsl #28
    7c3c:	049b0400 	ldreq	r0, [fp], #1024	; 0x400
    7c40:	000001d2 	ldrdeq	r0, [r0], -r2
    7c44:	ca0a0022 	bgt	287cd4 <_Min_Stack_Size+0x287ad4>
    7c48:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    7c4c:	03a1049c 			; <UNDEFINED> instruction: 0x03a1049c
    7c50:	500b0000 	andpl	r0, fp, r0
    7c54:	b004a204 	andlt	sl, r4, r4, lsl #4
    7c58:	0c000006 	stceq	0, cr0, [r0], {6}
    7c5c:	00315243 	eorseq	r5, r1, r3, asr #4
    7c60:	f404a404 	vst3.8	{d10-d12}, [r4], r4
    7c64:	00000001 	andeq	r0, r0, r1
    7c68:	0003c10d 	andeq	ip, r3, sp, lsl #2
    7c6c:	04a50400 	strteq	r0, [r5], #1024	; 0x400
    7c70:	000001d2 	ldrdeq	r0, [r0], -r2
    7c74:	52430c02 	subpl	r0, r3, #512	; 0x200
    7c78:	a6040032 			; <UNDEFINED> instruction: 0xa6040032
    7c7c:	0001f404 	andeq	pc, r1, r4, lsl #8
    7c80:	cb0d0400 	blgt	348c88 <_Min_Stack_Size+0x348a88>
    7c84:	04000003 	streq	r0, [r0], #-3
    7c88:	01d204a7 	bicseq	r0, r2, r7, lsr #9
    7c8c:	0d060000 	stceq	0, cr0, [r6, #-0]
    7c90:	000027fb 	strdeq	r2, [r0], -fp
    7c94:	f404a804 	vst2.8	{d10-d11}, [r4], r4
    7c98:	08000001 	stmdaeq	r0, {r0}
    7c9c:	0003d50d 	andeq	sp, r3, sp, lsl #10
    7ca0:	04a90400 	strteq	r0, [r9], #1024	; 0x400
    7ca4:	000001d2 	ldrdeq	r0, [r0], -r2
    7ca8:	23620d0a 	cmncs	r2, #640	; 0x280
    7cac:	aa040000 	bge	107cb4 <_Min_Stack_Size+0x107ab4>
    7cb0:	0001f404 	andeq	pc, r1, r4, lsl #8
    7cb4:	b60d0c00 	strlt	r0, [sp], -r0, lsl #24
    7cb8:	04000002 	streq	r0, [r0], #-2
    7cbc:	01d204ab 	bicseq	r0, r2, fp, lsr #9
    7cc0:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    7cc4:	04005253 	streq	r5, [r0], #-595	; 0xfffffdad
    7cc8:	01f404ac 	mvnseq	r0, ip, lsr #9
    7ccc:	0d100000 	ldceq	0, cr0, [r0, #-0]
    7cd0:	000003e9 	andeq	r0, r0, r9, ror #7
    7cd4:	d204ad04 	andle	sl, r4, #4, 26	; 0x100
    7cd8:	12000001 	andne	r0, r0, #1
    7cdc:	5247450c 	subpl	r4, r7, #12, 10	; 0x3000000
    7ce0:	04ae0400 	strteq	r0, [lr], #1024	; 0x400
    7ce4:	000001f4 	strdeq	r0, [r0], -r4
    7ce8:	03f30d14 	mvnseq	r0, #20, 26	; 0x500
    7cec:	af040000 	svcge	0x00040000
    7cf0:	0001d204 	andeq	sp, r1, r4, lsl #4
    7cf4:	030d1600 	movweq	r1, #54784	; 0xd600
    7cf8:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    7cfc:	01f404b0 	ldrheq	r0, [r4, #64]!	; 0x40
    7d00:	0d180000 	ldceq	0, cr0, [r8, #-0]
    7d04:	000002e2 	andeq	r0, r0, r2, ror #5
    7d08:	d204b104 	andle	fp, r4, #4, 2
    7d0c:	1a000001 	bne	7d18 <_Min_Stack_Size+0x7b18>
    7d10:	0025090d 	eoreq	r0, r5, sp, lsl #18
    7d14:	04b20400 	ldrteq	r0, [r2], #1024	; 0x400
    7d18:	000001f4 	strdeq	r0, [r0], -r4
    7d1c:	04140d1c 	ldreq	r0, [r4], #-3356	; 0xfffff2e4
    7d20:	b3040000 	movwlt	r0, #16384	; 0x4000
    7d24:	0001d204 	andeq	sp, r1, r4, lsl #4
    7d28:	d70d1e00 	strle	r1, [sp, -r0, lsl #28]
    7d2c:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    7d30:	01f404b4 	ldrheq	r0, [r4, #68]!	; 0x44
    7d34:	0d200000 	stceq	0, cr0, [r0, #-0]
    7d38:	0000041e 	andeq	r0, r0, lr, lsl r4
    7d3c:	d204b504 	andle	fp, r4, #4, 10	; 0x1000000
    7d40:	22000001 	andcs	r0, r0, #1
    7d44:	544e430c 	strbpl	r4, [lr], #-780	; 0xfffffcf4
    7d48:	04b60400 	ldrteq	r0, [r6], #1024	; 0x400
    7d4c:	000001f4 	strdeq	r0, [r0], -r4
    7d50:	2a570d24 	bcs	15cb1e8 <_Min_Stack_Size+0x15cafe8>
    7d54:	b7040000 	strlt	r0, [r4, -r0]
    7d58:	0001d204 	andeq	sp, r1, r4, lsl #4
    7d5c:	500c2600 	andpl	r2, ip, r0, lsl #12
    7d60:	04004353 	streq	r4, [r0], #-851	; 0xfffffcad
    7d64:	01f404b8 	ldrheq	r0, [r4, #72]!	; 0x48
    7d68:	0d280000 	stceq	0, cr0, [r8, #-0]
    7d6c:	0000254f 	andeq	r2, r0, pc, asr #10
    7d70:	d204b904 	andle	fp, r4, #4, 18	; 0x10000
    7d74:	2a000001 	bcs	7d80 <_Min_Stack_Size+0x7b80>
    7d78:	5252410c 	subspl	r4, r2, #12, 2
    7d7c:	04ba0400 	ldrteq	r0, [sl], #1024	; 0x400
    7d80:	000001f4 	strdeq	r0, [r0], -r4
    7d84:	255a0d2c 	ldrbcs	r0, [sl, #-3372]	; 0xfffff2d4
    7d88:	bb040000 	bllt	107d90 <_Min_Stack_Size+0x107b90>
    7d8c:	0001d204 	andeq	sp, r1, r4, lsl #4
    7d90:	520c2e00 	andpl	r2, ip, #0, 28
    7d94:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
    7d98:	01f404bc 	ldrheq	r0, [r4, #76]!	; 0x4c
    7d9c:	0d300000 	ldceq	0, cr0, [r0, #-0]
    7da0:	00002565 	andeq	r2, r0, r5, ror #10
    7da4:	d204bd04 	andle	fp, r4, #4, 26	; 0x100
    7da8:	32000001 	andcc	r0, r0, #1
    7dac:	002d000d 	eoreq	r0, sp, sp
    7db0:	04be0400 	ldrteq	r0, [lr], #1024	; 0x400
    7db4:	000001f4 	strdeq	r0, [r0], -r4
    7db8:	25700d34 	ldrbcs	r0, [r0, #-3380]!	; 0xfffff2cc
    7dbc:	bf040000 	svclt	0x00040000
    7dc0:	0001d204 	andeq	sp, r1, r4, lsl #4
    7dc4:	350d3600 	strcc	r3, [sp, #-1536]	; 0xfffffa00
    7dc8:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    7dcc:	01f404c0 	mvnseq	r0, r0, asr #9
    7dd0:	0d380000 	ldceq	0, cr0, [r8, #-0]
    7dd4:	0000257b 	andeq	r2, r0, fp, ror r5
    7dd8:	d204c104 	andle	ip, r4, #4, 2
    7ddc:	3a000001 	bcc	7de8 <_Min_Stack_Size+0x7be8>
    7de0:	002d1d0d 	eoreq	r1, sp, sp, lsl #26
    7de4:	04c20400 	strbeq	r0, [r2], #1024	; 0x400
    7de8:	000001f4 	strdeq	r0, [r0], -r4
    7dec:	25860d3c 	strcs	r0, [r6, #3388]	; 0xd3c
    7df0:	c3040000 	movwgt	r0, #16384	; 0x4000
    7df4:	0001d204 	andeq	sp, r1, r4, lsl #4
    7df8:	220d3e00 	andcs	r3, sp, #0, 28
    7dfc:	0400002d 	streq	r0, [r0], #-45	; 0xffffffd3
    7e00:	01f404c4 	mvnseq	r0, r4, asr #9
    7e04:	0d400000 	stcleq	0, cr0, [r0, #-0]
    7e08:	00002591 	muleq	r0, r1, r5
    7e0c:	d204c504 	andle	ip, r4, #4, 10	; 0x1000000
    7e10:	42000001 	andmi	r0, r0, #1
    7e14:	002aba0d 	eoreq	fp, sl, sp, lsl #20
    7e18:	04c60400 	strbeq	r0, [r6], #1024	; 0x400
    7e1c:	000001f4 	strdeq	r0, [r0], -r4
    7e20:	259c0d44 	ldrcs	r0, [ip, #3396]	; 0xd44
    7e24:	c7040000 	strgt	r0, [r4, -r0]
    7e28:	0001d204 	andeq	sp, r1, r4, lsl #4
    7e2c:	440c4600 	strmi	r4, [ip], #-1536	; 0xfffffa00
    7e30:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
    7e34:	01f404c8 	mvnseq	r0, r8, asr #9
    7e38:	0d480000 	stcleq	0, cr0, [r8, #-0]
    7e3c:	000025a7 	andeq	r2, r0, r7, lsr #11
    7e40:	d204c904 	andle	ip, r4, #4, 18	; 0x10000
    7e44:	4a000001 	bmi	7e50 <_Min_Stack_Size+0x7c50>
    7e48:	002bd60d 	eoreq	sp, fp, sp, lsl #12
    7e4c:	04ca0400 	strbeq	r0, [sl], #1024	; 0x400
    7e50:	000001f4 	strdeq	r0, [r0], -r4
    7e54:	25b20d4c 	ldrcs	r0, [r2, #3404]!	; 0xd4c
    7e58:	cb040000 	blgt	107e60 <_Min_Stack_Size+0x107c60>
    7e5c:	0001d204 	andeq	sp, r1, r4, lsl #4
    7e60:	0a004e00 	beq	1b668 <_Min_Stack_Size+0x1b468>
    7e64:	00002680 	andeq	r2, r0, r0, lsl #13
    7e68:	9f04cc04 	svcls	0x0004cc04
    7e6c:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    7e70:	d73b0501 	ldrle	r0, [fp, -r1, lsl #10]!
    7e74:	03000006 	movweq	r0, #6
    7e78:	00001d6d 	andeq	r1, r0, sp, ror #26
    7e7c:	1da30301 	stcne	3, cr0, [r3, #4]!
    7e80:	03020000 	movweq	r0, #8192	; 0x2000
    7e84:	00001ee8 	andeq	r1, r0, r8, ror #29
    7e88:	a5050003 	strge	r0, [r5, #-3]
    7e8c:	0500001e 	streq	r0, [r0, #-30]	; 0xffffffe2
    7e90:	0006bc3f 	andeq	fp, r6, pc, lsr ip
    7e94:	05010e00 	streq	r0, [r1, #-3584]	; 0xfffff200
    7e98:	00071c48 	andeq	r1, r7, r8, asr #24
    7e9c:	1e6b0300 	cdpne	3, 6, cr0, cr11, cr0, {0}
    7ea0:	03000000 	movweq	r0, #0
    7ea4:	00001f08 	andeq	r1, r0, r8, lsl #30
    7ea8:	1e1b0304 	cdpne	3, 1, cr0, cr11, cr4, {0}
    7eac:	03280000 			; <UNDEFINED> instruction: 0x03280000
    7eb0:	00001e52 	andeq	r1, r0, r2, asr lr
    7eb4:	7e0300c8 	cdpvc	0, 0, cr0, cr3, cr8, {6}
    7eb8:	1400001d 	strne	r0, [r0], #-29	; 0xffffffe3
    7ebc:	001ed203 	andseq	sp, lr, r3, lsl #4
    7ec0:	45031000 	strmi	r1, [r3, #-0]
    7ec4:	1c00001f 	stcne	0, cr0, [r0], {31}
    7ec8:	001c4c03 	andseq	r4, ip, r3, lsl #24
    7ecc:	05001800 	streq	r1, [r0, #-2048]	; 0xfffff800
    7ed0:	00001c3b 	andeq	r1, r0, fp, lsr ip
    7ed4:	06e25005 	strbteq	r5, [r2], r5
    7ed8:	040f0000 	streq	r0, [pc], #-0	; 7ee0 <_Min_Stack_Size+0x7ce0>
    7edc:	07545b05 	ldrbeq	r5, [r4, -r5, lsl #22]
    7ee0:	16100000 	ldrne	r0, [r0], -r0
    7ee4:	0500001c 	streq	r0, [r0, #-28]	; 0xffffffe4
    7ee8:	0001d25d 	andeq	sp, r1, sp, asr r2
    7eec:	c4100000 	ldrgt	r0, [r0], #-0
    7ef0:	0500001c 	streq	r0, [r0, #-28]	; 0xffffffe4
    7ef4:	0006d760 	andeq	sp, r6, r0, ror #14
    7ef8:	84100200 	ldrhi	r0, [r0], #-512	; 0xfffffe00
    7efc:	0500001e 	streq	r0, [r0, #-30]	; 0xffffffe2
    7f00:	00071c63 	andeq	r1, r7, r3, ror #24
    7f04:	05000300 	streq	r0, [r0, #-768]	; 0xfffffd00
    7f08:	00001db3 			; <UNDEFINED> instruction: 0x00001db3
    7f0c:	07276505 	streq	r6, [r7, -r5, lsl #10]!
    7f10:	100f0000 	andne	r0, pc, r0
    7f14:	07b03206 	ldreq	r3, [r0, r6, lsl #4]!
    7f18:	64100000 	ldrvs	r0, [r0], #-0
    7f1c:	06000031 			; <UNDEFINED> instruction: 0x06000031
    7f20:	0001dd34 	andeq	sp, r1, r4, lsr sp
    7f24:	27100000 	ldrcs	r0, [r0, -r0]
    7f28:	06000030 			; <UNDEFINED> instruction: 0x06000030
    7f2c:	0001d237 	andeq	sp, r1, r7, lsr r2
    7f30:	92100400 	andsls	r0, r0, #0, 8
    7f34:	06000031 			; <UNDEFINED> instruction: 0x06000031
    7f38:	0001d23a 	andeq	sp, r1, sl, lsr r2
    7f3c:	d8100600 	ldmdale	r0, {r9, sl}
    7f40:	06000030 			; <UNDEFINED> instruction: 0x06000030
    7f44:	0001d23d 	andeq	sp, r1, sp, lsr r2
    7f48:	e8100800 	ldmda	r0, {fp}
    7f4c:	06000030 			; <UNDEFINED> instruction: 0x06000030
    7f50:	0001d240 	andeq	sp, r1, r0, asr #4
    7f54:	c8100a00 	ldmdagt	r0, {r9, fp}
    7f58:	0600002e 	streq	r0, [r0], -lr, lsr #32
    7f5c:	0001d243 	andeq	sp, r1, r3, asr #4
    7f60:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    7f64:	00003110 	andeq	r3, r0, r0, lsl r1
    7f68:	075f4506 	ldrbeq	r4, [pc, -r6, lsl #10]
    7f6c:	120f0000 	andne	r0, pc, #0
    7f70:	08303207 	ldmdaeq	r0!, {r0, r1, r2, r9, ip, sp}
    7f74:	8b100000 	blhi	407f7c <_Min_Stack_Size+0x407d7c>
    7f78:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    7f7c:	0001d234 	andeq	sp, r1, r4, lsr r2
    7f80:	c1100000 	tstgt	r0, r0
    7f84:	07000021 	streq	r0, [r0, -r1, lsr #32]
    7f88:	0001d237 	andeq	sp, r1, r7, lsr r2
    7f8c:	b4100200 	ldrlt	r0, [r0], #-512	; 0xfffffe00
    7f90:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    7f94:	0001d23a 	andeq	sp, r1, sl, lsr r2
    7f98:	8c100400 	cfldrshi	mvf0, [r0], {-0}
    7f9c:	07000022 	streq	r0, [r0, -r2, lsr #32]
    7fa0:	0001d23d 	andeq	sp, r1, sp, lsr r2
    7fa4:	82100600 	andshi	r0, r0, #0, 12
    7fa8:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    7fac:	0001d240 	andeq	sp, r1, r0, asr #4
    7fb0:	4e100800 	cdpmi	8, 1, cr0, cr0, cr0, {0}
    7fb4:	07000020 	streq	r0, [r0, -r0, lsr #32]
    7fb8:	0001d243 	andeq	sp, r1, r3, asr #4
    7fbc:	6c100a00 	ldcvs	10, cr0, [r0], {-0}
    7fc0:	07000020 	streq	r0, [r0, -r0, lsr #32]
    7fc4:	0001d247 	andeq	sp, r1, r7, asr #4
    7fc8:	1a100c00 	bne	40afd0 <_Min_Stack_Size+0x40add0>
    7fcc:	07000020 	streq	r0, [r0, -r0, lsr #32]
    7fd0:	0001d24d 	andeq	sp, r1, sp, asr #4
    7fd4:	ba100e00 	blt	40b7dc <_Min_Stack_Size+0x40b5dc>
    7fd8:	07000022 	streq	r0, [r0, -r2, lsr #32]
    7fdc:	0001d250 	andeq	sp, r1, r0, asr r2
    7fe0:	05001000 	streq	r1, [r0, #-0]
    7fe4:	000022cc 	andeq	r2, r0, ip, asr #5
    7fe8:	07bb5107 	ldreq	r5, [fp, r7, lsl #2]!
    7fec:	0a0f0000 	beq	3c7ff4 <_Min_Stack_Size+0x3c7df4>
    7ff0:	08803308 	stmeq	r0, {r3, r8, r9, ip, sp}
    7ff4:	61100000 	tstvs	r0, r0
    7ff8:	0800002a 	stmdaeq	r0, {r1, r3, r5}
    7ffc:	0001d235 	andeq	sp, r1, r5, lsr r2
    8000:	8d100000 	ldchi	0, cr0, [r0, #-0]
    8004:	08000023 	stmdaeq	r0, {r0, r1, r5}
    8008:	0001d238 	andeq	sp, r1, r8, lsr r2
    800c:	fb100200 	blx	408816 <_Min_Stack_Size+0x408616>
    8010:	0800002b 	stmdaeq	r0, {r0, r1, r3, r5}
    8014:	0001d23b 	andeq	sp, r1, fp, lsr r2
    8018:	29100400 	ldmdbcs	r0, {sl}
    801c:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    8020:	0001d23f 	andeq	sp, r1, pc, lsr r2
    8024:	73100600 	tstvc	r0, #0, 12
    8028:	0800002d 	stmdaeq	r0, {r0, r2, r3, r5}
    802c:	0001c742 	andeq	ip, r1, r2, asr #14
    8030:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    8034:	00002c06 	andeq	r2, r0, r6, lsl #24
    8038:	083b4a08 	ldmdaeq	fp!, {r3, r9, fp, lr}
    803c:	040f0000 	streq	r0, [pc], #-0	; 8044 <_Min_Stack_Size+0x7e44>
    8040:	08c43209 	stmiaeq	r4, {r0, r3, r9, ip, sp}^
    8044:	56100000 	ldrpl	r0, [r0], -r0
    8048:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    804c:	0001c734 	andeq	ip, r1, r4, lsr r7
    8050:	8b100000 	blhi	408058 <_Min_Stack_Size+0x407e58>
    8054:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    8058:	0001c739 	andeq	ip, r1, r9, lsr r7
    805c:	66100100 	ldrvs	r0, [r0], -r0, lsl #2
    8060:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    8064:	0001c73d 	andeq	ip, r1, sp, lsr r7
    8068:	67100200 	ldrvs	r0, [r0, -r0, lsl #4]
    806c:	09000016 	stmdbeq	r0, {r1, r2, r4}
    8070:	00022541 	andeq	r2, r2, r1, asr #10
    8074:	05000300 	streq	r0, [r0, #-768]	; 0xfffffd00
    8078:	00001656 	andeq	r1, r0, r6, asr r6
    807c:	088b4409 	stmeq	fp, {r0, r3, sl, lr}
    8080:	b2110000 	andslt	r0, r1, #0
    8084:	01000035 	tsteq	r0, r5, lsr r0
    8088:	00533c1e 	subseq	r3, r3, lr, lsl ip
    808c:	00008408 	andeq	r8, r0, r8, lsl #8
    8090:	019c0100 	orrseq	r0, ip, r0, lsl #2
    8094:	12000009 	andne	r0, r0, #9
    8098:	00003485 	andeq	r3, r0, r5, lsl #9
    809c:	07541f01 	ldrbeq	r1, [r4, -r1, lsl #30]
    80a0:	91020000 	mrsls	r0, (UNDEF: 2)
    80a4:	35081274 	strcc	r1, [r8, #-628]	; 0xfffffd8c
    80a8:	20010000 	andcs	r0, r1, r0
    80ac:	000007b0 			; <UNDEFINED> instruction: 0x000007b0
    80b0:	00649102 	rsbeq	r9, r4, r2, lsl #2
    80b4:	00353811 	eorseq	r3, r5, r1, lsl r8
    80b8:	c0360100 	eorsgt	r0, r6, r0, lsl #2
    80bc:	44080053 	strmi	r0, [r8], #-83	; 0xffffffad
    80c0:	01000000 	mrseq	r0, (UNDEF: 0)
    80c4:	0009259c 	muleq	r9, ip, r5
    80c8:	348a1200 	strcc	r1, [sl], #512	; 0x200
    80cc:	37010000 	strcc	r0, [r1, -r0]
    80d0:	00000754 	andeq	r0, r0, r4, asr r7
    80d4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    80d8:	0034f811 	eorseq	pc, r4, r1, lsl r8	; <UNPREDICTABLE>
    80dc:	04430100 	strbeq	r0, [r3], #-256	; 0xffffff00
    80e0:	c4080054 	strgt	r0, [r8], #-84	; 0xffffffac
    80e4:	01000000 	mrseq	r0, (UNDEF: 0)
    80e8:	0009579c 	muleq	r9, ip, r7
    80ec:	33fb1200 	mvnscc	r1, #0, 4
    80f0:	44010000 	strmi	r0, [r1], #-0
    80f4:	00000830 	andeq	r0, r0, r0, lsr r8
    80f8:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    80fc:	0000348a 	andeq	r3, r0, sl, lsl #9
    8100:	07544501 	ldrbeq	r4, [r4, -r1, lsl #10]
    8104:	91020000 	mrsls	r0, (UNDEF: 2)
    8108:	9b110060 	blls	448290 <_Min_Stack_Size+0x448090>
    810c:	01000033 	tsteq	r0, r3, lsr r0
    8110:	0054c879 	subseq	ip, r4, r9, ror r8
    8114:	00006008 	andeq	r6, r0, r8
    8118:	899c0100 	ldmibhi	ip, {r8}
    811c:	12000009 	andne	r0, r0, #9
    8120:	00003645 	andeq	r3, r0, r5, asr #12
    8124:	08807a01 	stmeq	r0, {r0, r9, fp, ip, sp, lr}
    8128:	91020000 	mrsls	r0, (UNDEF: 2)
    812c:	34d2126c 	ldrbcc	r1, [r2], #620	; 0x26c
    8130:	7b010000 	blvc	48138 <_Min_Stack_Size+0x47f38>
    8134:	000008c4 	andeq	r0, r0, r4, asr #17
    8138:	00689102 	rsbeq	r9, r8, r2, lsl #2
    813c:	0036be13 	eorseq	fp, r6, r3, lsl lr
    8140:	288f0100 	stmcs	pc, {r8}	; <UNPREDICTABLE>
    8144:	42080055 	andmi	r0, r8, #85	; 0x55
    8148:	01000000 	mrseq	r0, (UNDEF: 0)
    814c:	0227149c 	eoreq	r1, r7, #156, 8	; 0x9c000000
    8150:	ce0a0000 	cdpgt	0, 0, cr0, cr10, cr0, {0}
    8154:	0009a606 	andeq	sl, r9, r6, lsl #12
    8158:	01b90700 			; <UNDEFINED> instruction: 0x01b90700
    815c:	f3000000 	vhadd.u8	d0, d0, d0
    8160:	04000003 	streq	r0, [r0], #-3
    8164:	00192f00 	andseq	r2, r9, r0, lsl #30
    8168:	81010400 	tsthi	r1, r0, lsl #8
    816c:	01000001 	tsteq	r0, r1
    8170:	00003797 	muleq	r0, r7, r7
    8174:	00000a50 	andeq	r0, r0, r0, asr sl
    8178:	00000000 	andeq	r0, r0, r0
    817c:	000039f5 	strdeq	r3, [r0], -r5
    8180:	c3060102 	movwgt	r0, #24834	; 0x6102
    8184:	02000000 	andeq	r0, r0, #0
    8188:	00c10801 	sbceq	r0, r1, r1, lsl #16
    818c:	02020000 	andeq	r0, r2, #0
    8190:	00005105 	andeq	r5, r0, r5, lsl #2
    8194:	002e0300 	eoreq	r0, lr, r0, lsl #6
    8198:	2b020000 	blcs	881a0 <_Min_Stack_Size+0x87fa0>
    819c:	00000041 	andeq	r0, r0, r1, asr #32
    81a0:	23070202 	movwcs	r0, #29186	; 0x7202
    81a4:	02000001 	andeq	r0, r0, #1
    81a8:	006d0504 	rsbeq	r0, sp, r4, lsl #10
    81ac:	23030000 	movwcs	r0, #12288	; 0x3000
    81b0:	02000000 	andeq	r0, r0, #0
    81b4:	00005a41 	andeq	r5, r0, r1, asr #20
    81b8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    81bc:	000000fa 	strdeq	r0, [r0], -sl
    81c0:	68050802 	stmdavs	r5, {r1, fp}
    81c4:	02000000 	andeq	r0, r0, #0
    81c8:	00f50708 	rscseq	r0, r5, r8, lsl #14
    81cc:	04040000 	streq	r0, [r4], #-0
    81d0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    81d4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    81d8:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    81dc:	00003003 	andeq	r3, r0, r3
    81e0:	361a0300 	ldrcc	r0, [sl], -r0, lsl #6
    81e4:	03000000 	movweq	r0, #0
    81e8:	00000025 	andeq	r0, r0, r5, lsr #32
    81ec:	004f2003 	subeq	r2, pc, r3
    81f0:	04020000 	streq	r0, [r2], #-0
    81f4:	00001507 	andeq	r1, r0, r7, lsl #10
    81f8:	00880500 	addeq	r0, r8, r0, lsl #10
    81fc:	7d050000 	stcvc	0, cr0, [r5, #-0]
    8200:	06000000 	streq	r0, [r0], -r0
    8204:	02070401 	andeq	r0, r7, #16777216	; 0x1000000
    8208:	000000ba 	strheq	r0, [r0], -sl
    820c:	001c8b07 	andseq	r8, ip, r7, lsl #22
    8210:	53080000 	movwpl	r0, #32768	; 0x8000
    8214:	01005445 	tsteq	r0, r5, asr #8
    8218:	04500900 	ldrbeq	r0, [r0], #-2304	; 0xfffff700
    821c:	02cb04a2 	sbceq	r0, fp, #-1577058304	; 0xa2000000
    8220:	430a0000 	movwmi	r0, #40960	; 0xa000
    8224:	04003152 	streq	r3, [r0], #-338	; 0xfffffeae
    8228:	009f04a4 	addseq	r0, pc, r4, lsr #9
    822c:	0b000000 	bleq	8234 <_Min_Stack_Size+0x8034>
    8230:	000003c1 	andeq	r0, r0, r1, asr #7
    8234:	7d04a504 	cfstr32vc	mvfx10, [r4, #-16]
    8238:	02000000 	andeq	r0, r0, #0
    823c:	3252430a 	subscc	r4, r2, #671088640	; 0x28000000
    8240:	04a60400 	strteq	r0, [r6], #1024	; 0x400
    8244:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8248:	03cb0b04 	biceq	r0, fp, #4, 22	; 0x1000
    824c:	a7040000 	strge	r0, [r4, -r0]
    8250:	00007d04 	andeq	r7, r0, r4, lsl #26
    8254:	fb0b0600 	blx	2c9a5e <_Min_Stack_Size+0x2c985e>
    8258:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    825c:	009f04a8 	addseq	r0, pc, r8, lsr #9
    8260:	0b080000 	bleq	208268 <_Min_Stack_Size+0x208068>
    8264:	000003d5 	ldrdeq	r0, [r0], -r5
    8268:	7d04a904 	stcvc	9, cr10, [r4, #-16]
    826c:	0a000000 	beq	8274 <_Min_Stack_Size+0x8074>
    8270:	0023620b 	eoreq	r6, r3, fp, lsl #4
    8274:	04aa0400 	strteq	r0, [sl], #1024	; 0x400
    8278:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    827c:	02b60b0c 	adcseq	r0, r6, #12, 22	; 0x3000
    8280:	ab040000 	blge	108288 <_Min_Stack_Size+0x108088>
    8284:	00007d04 	andeq	r7, r0, r4, lsl #26
    8288:	530a0e00 	movwpl	r0, #44544	; 0xae00
    828c:	ac040052 	stcge	0, cr0, [r4], {82}	; 0x52
    8290:	00009f04 	andeq	r9, r0, r4, lsl #30
    8294:	e90b1000 	stmdb	fp, {ip}
    8298:	04000003 	streq	r0, [r0], #-3
    829c:	007d04ad 	rsbseq	r0, sp, sp, lsr #9
    82a0:	0a120000 	beq	4882a8 <_Min_Stack_Size+0x4880a8>
    82a4:	00524745 	subseq	r4, r2, r5, asr #14
    82a8:	9f04ae04 	svcls	0x0004ae04
    82ac:	14000000 	strne	r0, [r0], #-0
    82b0:	0003f30b 	andeq	pc, r3, fp, lsl #6
    82b4:	04af0400 	strteq	r0, [pc], #1024	; 82bc <_Min_Stack_Size+0x80bc>
    82b8:	0000007d 	andeq	r0, r0, sp, ror r0
    82bc:	25030b16 	strcs	r0, [r3, #-2838]	; 0xfffff4ea
    82c0:	b0040000 	andlt	r0, r4, r0
    82c4:	00009f04 	andeq	r9, r0, r4, lsl #30
    82c8:	e20b1800 	and	r1, fp, #0, 16
    82cc:	04000002 	streq	r0, [r0], #-2
    82d0:	007d04b1 	ldrhteq	r0, [sp], #-65	; 0xffffffbf
    82d4:	0b1a0000 	bleq	6882dc <_Min_Stack_Size+0x6880dc>
    82d8:	00002509 	andeq	r2, r0, r9, lsl #10
    82dc:	9f04b204 	svcls	0x0004b204
    82e0:	1c000000 	stcne	0, cr0, [r0], {-0}
    82e4:	0004140b 	andeq	r1, r4, fp, lsl #8
    82e8:	04b30400 	ldrteq	r0, [r3], #1024	; 0x400
    82ec:	0000007d 	andeq	r0, r0, sp, ror r0
    82f0:	25d70b1e 	ldrbcs	r0, [r7, #2846]	; 0xb1e
    82f4:	b4040000 	strlt	r0, [r4], #-0
    82f8:	00009f04 	andeq	r9, r0, r4, lsl #30
    82fc:	1e0b2000 	cdpne	0, 0, cr2, cr11, cr0, {0}
    8300:	04000004 	streq	r0, [r0], #-4
    8304:	007d04b5 	ldrhteq	r0, [sp], #-69	; 0xffffffbb
    8308:	0a220000 	beq	888310 <_Min_Stack_Size+0x888110>
    830c:	00544e43 	subseq	r4, r4, r3, asr #28
    8310:	9f04b604 	svcls	0x0004b604
    8314:	24000000 	strcs	r0, [r0], #-0
    8318:	002a570b 	eoreq	r5, sl, fp, lsl #14
    831c:	04b70400 	ldrteq	r0, [r7], #1024	; 0x400
    8320:	0000007d 	andeq	r0, r0, sp, ror r0
    8324:	53500a26 	cmppl	r0, #155648	; 0x26000
    8328:	b8040043 	stmdalt	r4, {r0, r1, r6}
    832c:	00009f04 	andeq	r9, r0, r4, lsl #30
    8330:	4f0b2800 	svcmi	0x000b2800
    8334:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    8338:	007d04b9 	ldrhteq	r0, [sp], #-73	; 0xffffffb7
    833c:	0a2a0000 	beq	a88344 <_Min_Stack_Size+0xa88144>
    8340:	00525241 	subseq	r5, r2, r1, asr #4
    8344:	9f04ba04 	svcls	0x0004ba04
    8348:	2c000000 	stccs	0, cr0, [r0], {-0}
    834c:	00255a0b 	eoreq	r5, r5, fp, lsl #20
    8350:	04bb0400 	ldrteq	r0, [fp], #1024	; 0x400
    8354:	0000007d 	andeq	r0, r0, sp, ror r0
    8358:	43520a2e 	cmpmi	r2, #188416	; 0x2e000
    835c:	bc040052 	stclt	0, cr0, [r4], {82}	; 0x52
    8360:	00009f04 	andeq	r9, r0, r4, lsl #30
    8364:	650b3000 	strvs	r3, [fp, #-0]
    8368:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    836c:	007d04bd 	ldrhteq	r0, [sp], #-77	; 0xffffffb3
    8370:	0b320000 	bleq	c88378 <_Min_Stack_Size+0xc88178>
    8374:	00002d00 	andeq	r2, r0, r0, lsl #26
    8378:	9f04be04 	svcls	0x0004be04
    837c:	34000000 	strcc	r0, [r0], #-0
    8380:	0025700b 	eoreq	r7, r5, fp
    8384:	04bf0400 	ldrteq	r0, [pc], #1024	; 838c <_Min_Stack_Size+0x818c>
    8388:	0000007d 	andeq	r0, r0, sp, ror r0
    838c:	24350b36 	ldrtcs	r0, [r5], #-2870	; 0xfffff4ca
    8390:	c0040000 	andgt	r0, r4, r0
    8394:	00009f04 	andeq	r9, r0, r4, lsl #30
    8398:	7b0b3800 	blvc	2d63a0 <_Min_Stack_Size+0x2d61a0>
    839c:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    83a0:	007d04c1 	rsbseq	r0, sp, r1, asr #9
    83a4:	0b3a0000 	bleq	e883ac <_Min_Stack_Size+0xe881ac>
    83a8:	00002d1d 	andeq	r2, r0, sp, lsl sp
    83ac:	9f04c204 	svcls	0x0004c204
    83b0:	3c000000 	stccc	0, cr0, [r0], {-0}
    83b4:	0025860b 	eoreq	r8, r5, fp, lsl #12
    83b8:	04c30400 	strbeq	r0, [r3], #1024	; 0x400
    83bc:	0000007d 	andeq	r0, r0, sp, ror r0
    83c0:	2d220b3e 	vstmdbcs	r2!, {d0-d30}
    83c4:	c4040000 	strgt	r0, [r4], #-0
    83c8:	00009f04 	andeq	r9, r0, r4, lsl #30
    83cc:	910b4000 	mrsls	r4, (UNDEF: 11)
    83d0:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    83d4:	007d04c5 	rsbseq	r0, sp, r5, asr #9
    83d8:	0b420000 	bleq	10883e0 <_Min_Stack_Size+0x10881e0>
    83dc:	00002aba 			; <UNDEFINED> instruction: 0x00002aba
    83e0:	9f04c604 	svcls	0x0004c604
    83e4:	44000000 	strmi	r0, [r0], #-0
    83e8:	00259c0b 	eoreq	r9, r5, fp, lsl #24
    83ec:	04c70400 	strbeq	r0, [r7], #1024	; 0x400
    83f0:	0000007d 	andeq	r0, r0, sp, ror r0
    83f4:	43440a46 	movtmi	r0, #19014	; 0x4a46
    83f8:	c8040052 	stmdagt	r4, {r1, r4, r6}
    83fc:	00009f04 	andeq	r9, r0, r4, lsl #30
    8400:	a70b4800 	strge	r4, [fp, -r0, lsl #16]
    8404:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    8408:	007d04c9 	rsbseq	r0, sp, r9, asr #9
    840c:	0b4a0000 	bleq	1288414 <_Min_Stack_Size+0x1288214>
    8410:	00002bd6 	ldrdeq	r2, [r0], -r6
    8414:	9f04ca04 	svcls	0x0004ca04
    8418:	4c000000 	stcmi	0, cr0, [r0], {-0}
    841c:	0025b20b 	eoreq	fp, r5, fp, lsl #4
    8420:	04cb0400 	strbeq	r0, [fp], #1024	; 0x400
    8424:	0000007d 	andeq	r0, r0, sp, ror r0
    8428:	800c004e 	andhi	r0, ip, lr, asr #32
    842c:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    8430:	00ba04cc 	adcseq	r0, sl, ip, asr #9
    8434:	2c0d0000 	stccs	0, cr0, [sp], {-0}
    8438:	01000037 	tsteq	r0, r7, lsr r0
    843c:	00556c2f 	subseq	r6, r5, pc, lsr #24
    8440:	00000c08 	andeq	r0, r0, r8, lsl #24
    8444:	0d9c0100 	ldfeqs	f0, [ip]
    8448:	00003768 	andeq	r3, r0, r8, ror #14
    844c:	55783801 	ldrbpl	r3, [r8, #-2049]!	; 0xfffff7ff
    8450:	00060800 	andeq	r0, r6, r0, lsl #16
    8454:	9c010000 	stcls	0, cr0, [r1], {-0}
    8458:	0038030d 	eorseq	r0, r8, sp, lsl #6
    845c:	80450100 	subhi	r0, r5, r0, lsl #2
    8460:	06080055 			; <UNDEFINED> instruction: 0x06080055
    8464:	01000000 	mrseq	r0, (UNDEF: 0)
    8468:	37e30d9c 			; <UNDEFINED> instruction: 0x37e30d9c
    846c:	52010000 	andpl	r0, r1, #0
    8470:	08005588 	stmdaeq	r0, {r3, r7, r8, sl, ip, lr}
    8474:	00000006 	andeq	r0, r0, r6
    8478:	190d9c01 	stmdbne	sp, {r0, sl, fp, ip, pc}
    847c:	01000037 	tsteq	r0, r7, lsr r0
    8480:	0055905f 	subseq	r9, r5, pc, asr r0
    8484:	00000608 	andeq	r0, r0, r8, lsl #12
    8488:	0d9c0100 	ldfeqs	f0, [ip]
    848c:	0000378b 	andeq	r3, r0, fp, lsl #15
    8490:	55986c01 	ldrpl	r6, [r8, #3073]	; 0xc01
    8494:	000c0800 	andeq	r0, ip, r0, lsl #16
    8498:	9c010000 	stcls	0, cr0, [r1], {-0}
    849c:	00377a0d 	eorseq	r7, r7, sp, lsl #20
    84a0:	a4750100 	ldrbtge	r0, [r5], #-256	; 0xffffff00
    84a4:	0c080055 	stceq	0, cr0, [r8], {85}	; 0x55
    84a8:	01000000 	mrseq	r0, (UNDEF: 0)
    84ac:	37f40d9c 			; <UNDEFINED> instruction: 0x37f40d9c
    84b0:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    84b4:	080055b0 	stmdaeq	r0, {r4, r5, r7, r8, sl, ip, lr}
    84b8:	0000000c 	andeq	r0, r0, ip
    84bc:	d30d9c01 	movwle	r9, #56321	; 0xdc01
    84c0:	01000037 	tsteq	r0, r7, lsr r0
    84c4:	0055bc87 	subseq	fp, r5, r7, lsl #25
    84c8:	00000c08 	andeq	r0, r0, r8, lsl #24
    84cc:	0d9c0100 	ldfeqs	f0, [ip]
    84d0:	00003700 	andeq	r3, r0, r0, lsl #14
    84d4:	55c89201 	strbpl	r9, [r8, #513]	; 0x201
    84d8:	000c0800 	andeq	r0, ip, r0, lsl #16
    84dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    84e0:	0038150d 	eorseq	r1, r8, sp, lsl #10
    84e4:	d4970100 	ldrle	r0, [r7], #256	; 0x100
    84e8:	0c080055 	stceq	0, cr0, [r8], {85}	; 0x55
    84ec:	01000000 	mrseq	r0, (UNDEF: 0)
    84f0:	37380e9c 			; <UNDEFINED> instruction: 0x37380e9c
    84f4:	9d010000 	stcls	0, cr0, [r1, #-0]
    84f8:	080055e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, ip, lr}
    84fc:	0000003c 	andeq	r0, r0, ip, lsr r0
    8500:	03be9c01 			; <UNDEFINED> instruction: 0x03be9c01
    8504:	480f0000 	stmdami	pc, {}	; <UNPREDICTABLE>
    8508:	01000037 	tsteq	r0, r7, lsr r0
    850c:	00009a9e 	muleq	r0, lr, sl
    8510:	37570f00 	ldrbcc	r0, [r7, -r0, lsl #30]
    8514:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    8518:	0000009a 	muleq	r0, sl, r0
    851c:	37c30d00 	strbcc	r0, [r3, r0, lsl #26]
    8520:	a7010000 	strge	r0, [r1, -r0]
    8524:	0800561c 	stmdaeq	r0, {r2, r3, r4, r9, sl, ip, lr}
    8528:	0000000c 	andeq	r0, r0, ip
    852c:	27109c01 	ldrcs	r9, [r0, -r1, lsl #24]
    8530:	05000002 	streq	r0, [r0, #-2]
    8534:	03db06ce 	bicseq	r0, fp, #216006656	; 0xce00000
    8538:	6f050000 	svcvs	0x00050000
    853c:	0f000000 	svceq	0x00000000
    8540:	00003748 	andeq	r3, r0, r8, asr #14
    8544:	009a9e01 	addseq	r9, sl, r1, lsl #28
    8548:	570f0000 	strpl	r0, [pc, -r0]
    854c:	01000037 	tsteq	r0, r7, lsr r0
    8550:	00009a9e 	muleq	r0, lr, sl
    8554:	088b0000 	stmeq	fp, {}	; <UNPREDICTABLE>
    8558:	00040000 	andeq	r0, r4, r0
    855c:	00001a16 	andeq	r1, r0, r6, lsl sl
    8560:	01810104 	orreq	r0, r1, r4, lsl #2
    8564:	0f010000 	svceq	0x00010000
    8568:	03000039 	movweq	r0, #57	; 0x39
    856c:	c0000003 	andgt	r0, r0, r3
    8570:	0000000a 	andeq	r0, r0, sl
    8574:	0d000000 	stceq	0, cr0, [r0, #-0]
    8578:	0200003c 	andeq	r0, r0, #60	; 0x3c
    857c:	00c30601 	sbceq	r0, r3, r1, lsl #12
    8580:	93030000 	movwls	r0, #12288	; 0x3000
    8584:	02000000 	andeq	r0, r0, #0
    8588:	0000371d 	andeq	r3, r0, sp, lsl r7
    858c:	08010200 	stmdaeq	r1, {r9}
    8590:	000000c1 	andeq	r0, r0, r1, asr #1
    8594:	51050202 	tstpl	r5, r2, lsl #4
    8598:	03000000 	movweq	r0, #0
    859c:	0000002e 	andeq	r0, r0, lr, lsr #32
    85a0:	00502b02 	subseq	r2, r0, r2, lsl #22
    85a4:	02020000 	andeq	r0, r2, #0
    85a8:	00012307 	andeq	r2, r1, r7, lsl #6
    85ac:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    85b0:	0000006d 	andeq	r0, r0, sp, rrx
    85b4:	00002303 	andeq	r2, r0, r3, lsl #6
    85b8:	69410200 	stmdbvs	r1, {r9}^
    85bc:	02000000 	andeq	r0, r0, #0
    85c0:	00fa0704 	rscseq	r0, sl, r4, lsl #14
    85c4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    85c8:	00006805 	andeq	r6, r0, r5, lsl #16
    85cc:	07080200 	streq	r0, [r8, -r0, lsl #4]
    85d0:	000000f5 	strdeq	r0, [r0], -r5
    85d4:	69050404 	stmdbvs	r5, {r2, sl}
    85d8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    85dc:	00ff0704 	rscseq	r0, pc, r4, lsl #14
    85e0:	04050000 	streq	r0, [r5], #-0
    85e4:	15070402 	strne	r0, [r7, #-1026]	; 0xfffffbfe
    85e8:	02000000 	andeq	r0, r0, #0
    85ec:	00ca0801 	sbceq	r0, sl, r1, lsl #16
    85f0:	95030000 	strls	r0, [r3, #-0]
    85f4:	03000000 	movweq	r0, #0
    85f8:	00002c14 	andeq	r2, r0, r4, lsl ip
    85fc:	00300300 	eorseq	r0, r0, r0, lsl #6
    8600:	1a030000 	bne	c8608 <_Min_Stack_Size+0xc8408>
    8604:	00000045 	andeq	r0, r0, r5, asr #32
    8608:	00002503 	andeq	r2, r0, r3, lsl #10
    860c:	5e200300 	cdppl	3, 2, cr0, cr0, cr0, {0}
    8610:	06000000 	streq	r0, [r0], -r0
    8614:	000000b2 	strheq	r0, [r0], -r2
    8618:	0000a706 	andeq	sl, r0, r6, lsl #14
    861c:	04010700 	streq	r0, [r1], #-1792	; 0xfffff900
    8620:	00dd0207 	sbcseq	r0, sp, r7, lsl #4
    8624:	8b080000 	blhi	20862c <_Min_Stack_Size+0x20842c>
    8628:	0000001c 	andeq	r0, r0, ip, lsl r0
    862c:	54455309 	strbpl	r5, [r5], #-777	; 0xfffffcf7
    8630:	0a000100 	beq	8a38 <_Min_Stack_Size+0x8838>
    8634:	03e9041c 	mvneq	r0, #28, 8	; 0x1c000000
    8638:	00000142 	andeq	r0, r0, r2, asr #2
    863c:	4c52430b 	mrrcmi	3, 0, r4, r2, cr11
    8640:	03eb0400 	mvneq	r0, #0, 8
    8644:	000000bd 	strheq	r0, [r0], -sp
    8648:	52430b00 	subpl	r0, r3, #0, 22
    864c:	ec040048 	stc	0, cr0, [r4], {72}	; 0x48
    8650:	0000bd03 	andeq	fp, r0, r3, lsl #26
    8654:	490b0400 	stmdbmi	fp, {sl}
    8658:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
    865c:	00bd03ed 	adcseq	r0, sp, sp, ror #7
    8660:	0b080000 	bleq	208668 <_Min_Stack_Size+0x208468>
    8664:	0052444f 	subseq	r4, r2, pc, asr #8
    8668:	bd03ee04 	stclt	14, cr14, [r3, #-16]
    866c:	0c000000 	stceq	0, cr0, [r0], {-0}
    8670:	001d520c 	andseq	r5, sp, ip, lsl #4
    8674:	03ef0400 	mvneq	r0, #0, 8
    8678:	000000bd 	strheq	r0, [r0], -sp
    867c:	52420b10 	subpl	r0, r2, #16, 22	; 0x4000
    8680:	f0040052 			; <UNDEFINED> instruction: 0xf0040052
    8684:	0000bd03 	andeq	fp, r0, r3, lsl #26
    8688:	ec0c1400 	cfstrs	mvf1, [ip], {-0}
    868c:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    8690:	00bd03f1 	ldrshteq	r0, [sp], r1
    8694:	00180000 	andseq	r0, r8, r0
    8698:	001c020d 	andseq	r0, ip, sp, lsl #4
    869c:	03f20400 	mvnseq	r0, #0, 8
    86a0:	000000dd 	ldrdeq	r0, [r0], -sp
    86a4:	8804240a 	stmdahi	r4, {r1, r3, sl, sp}
    86a8:	00024004 	andeq	r4, r2, r4
    86ac:	52430b00 	subpl	r0, r3, #0, 22
    86b0:	8a040031 	bhi	10877c <_Min_Stack_Size+0x10857c>
    86b4:	0000c204 	andeq	ip, r0, r4, lsl #4
    86b8:	c10c0000 	mrsgt	r0, (UNDEF: 12)
    86bc:	04000003 	streq	r0, [r0], #-3
    86c0:	00a7048b 	adceq	r0, r7, fp, lsl #9
    86c4:	0b020000 	bleq	886cc <_Min_Stack_Size+0x884cc>
    86c8:	00325243 	eorseq	r5, r2, r3, asr #4
    86cc:	c2048c04 	andgt	r8, r4, #4, 24	; 0x400
    86d0:	04000000 	streq	r0, [r0], #-0
    86d4:	0003cb0c 	andeq	ip, r3, ip, lsl #22
    86d8:	048d0400 	streq	r0, [sp], #1024	; 0x400
    86dc:	000000a7 	andeq	r0, r0, r7, lsr #1
    86e0:	52530b06 	subspl	r0, r3, #6144	; 0x1800
    86e4:	048e0400 	streq	r0, [lr], #1024	; 0x400
    86e8:	000000c2 	andeq	r0, r0, r2, asr #1
    86ec:	03d50c08 	bicseq	r0, r5, #8, 24	; 0x800
    86f0:	8f040000 	svchi	0x00040000
    86f4:	0000a704 	andeq	sl, r0, r4, lsl #14
    86f8:	440b0a00 	strmi	r0, [fp], #-2560	; 0xfffff600
    86fc:	90040052 	andls	r0, r4, r2, asr r0
    8700:	0000c204 	andeq	ip, r0, r4, lsl #4
    8704:	b60c0c00 	strlt	r0, [ip], -r0, lsl #24
    8708:	04000002 	streq	r0, [r0], #-2
    870c:	00a70491 	umlaleq	r0, r7, r1, r4
    8710:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    8714:	000021bb 			; <UNDEFINED> instruction: 0x000021bb
    8718:	c2049204 	andgt	r9, r4, #4, 4	; 0x40000000
    871c:	10000000 	andne	r0, r0, r0
    8720:	0003e90c 	andeq	lr, r3, ip, lsl #18
    8724:	04930400 	ldreq	r0, [r3], #1024	; 0x400
    8728:	000000a7 	andeq	r0, r0, r7, lsr #1
    872c:	20820c12 	addcs	r0, r2, r2, lsl ip
    8730:	94040000 	strls	r0, [r4], #-0
    8734:	0000c204 	andeq	ip, r0, r4, lsl #4
    8738:	f30c1400 	vshl.u8	d1, d0, d12
    873c:	04000003 	streq	r0, [r0], #-3
    8740:	00a70495 	umlaleq	r0, r7, r5, r4
    8744:	0c160000 	ldceq	0, cr0, [r6], {-0}
    8748:	00002065 	andeq	r2, r0, r5, rrx
    874c:	c2049604 	andgt	r9, r4, #4, 12	; 0x400000
    8750:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8754:	0002e20c 	andeq	lr, r2, ip, lsl #4
    8758:	04970400 	ldreq	r0, [r7], #1024	; 0x400
    875c:	000000a7 	andeq	r0, r0, r7, lsr #1
    8760:	219f0c1a 	orrscs	r0, pc, sl, lsl ip	; <UNPREDICTABLE>
    8764:	98040000 	stmdals	r4, {}	; <UNPREDICTABLE>
    8768:	0000c204 	andeq	ip, r0, r4, lsl #4
    876c:	140c1c00 	strne	r1, [ip], #-3072	; 0xfffff400
    8770:	04000004 	streq	r0, [r0], #-4
    8774:	00a70499 	umlaleq	r0, r7, r9, r4
    8778:	0c1e0000 	ldceq	0, cr0, [lr], {-0}
    877c:	000022ad 	andeq	r2, r0, sp, lsr #5
    8780:	c2049a04 	andgt	r9, r4, #4, 20	; 0x4000
    8784:	20000000 	andcs	r0, r0, r0
    8788:	00041e0c 	andeq	r1, r4, ip, lsl #28
    878c:	049b0400 	ldreq	r0, [fp], #1024	; 0x400
    8790:	000000a7 	andeq	r0, r0, r7, lsr #1
    8794:	ca0d0022 	bgt	348824 <_Min_Stack_Size+0x348624>
    8798:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    879c:	014e049c 			; <UNDEFINED> instruction: 0x014e049c
    87a0:	9c0e0000 	stcls	0, cr0, [lr], {-0}
    87a4:	5c000000 	stcpl	0, cr0, [r0], {-0}
    87a8:	0f000002 	svceq	0x00000002
    87ac:	0000008e 	andeq	r0, r0, lr, lsl #1
    87b0:	01100005 	tsteq	r0, r5
    87b4:	02c5cc05 	sbceq	ip, r5, #1280	; 0x500
    87b8:	83080000 	movwhi	r0, #32768	; 0x8000
    87bc:	00000008 	andeq	r0, r0, r8
    87c0:	000be408 	andeq	lr, fp, r8, lsl #8
    87c4:	3c080100 	stfccs	f0, [r8], {-0}
    87c8:	0200000b 	andeq	r0, r0, #11
    87cc:	0009bf08 	andeq	fp, r9, r8, lsl #30
    87d0:	0b080300 	bleq	2093d8 <_Min_Stack_Size+0x2091d8>
    87d4:	04000008 	streq	r0, [r0], #-8
    87d8:	000af808 	andeq	pc, sl, r8, lsl #16
    87dc:	9d080500 	cfstr32ls	mvfx0, [r8, #-0]
    87e0:	06000007 	streq	r0, [r0], -r7
    87e4:	000cd408 	andeq	sp, ip, r8, lsl #8
    87e8:	77080700 	strvc	r0, [r8, -r0, lsl #14]
    87ec:	0800000a 	stmdaeq	r0, {r1, r3}
    87f0:	000bfb08 	andeq	pc, fp, r8, lsl #22
    87f4:	53080900 	movwpl	r0, #35072	; 0x8900
    87f8:	0a000008 	beq	8820 <_Min_Stack_Size+0x8620>
    87fc:	000ae308 	andeq	lr, sl, r8, lsl #6
    8800:	64080b00 	strvs	r0, [r8], #-2816	; 0xfffff500
    8804:	0c000007 	stceq	0, cr0, [r0], {7}
    8808:	000a2c08 	andeq	r2, sl, r8, lsl #24
    880c:	eb080d00 	bl	20bc14 <_Min_Stack_Size+0x20ba14>
    8810:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    8814:	000b2d08 	andeq	r2, fp, r8, lsl #26
    8818:	10000f00 	andne	r0, r0, r0, lsl #30
    881c:	f2e70501 	vabal.s32	q8, d7, d1
    8820:	08000002 	stmdaeq	r0, {r1}
    8824:	0000095c 	andeq	r0, r0, ip, asr r9
    8828:	078e0800 	streq	r0, [lr, r0, lsl #16]
    882c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    8830:	000009eb 	andeq	r0, r0, fp, ror #19
    8834:	08740802 	ldmdaeq	r4!, {r1, fp}^
    8838:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    883c:	00000991 	muleq	r0, r1, r9
    8840:	0c4a0804 	mcrreq	8, 0, r0, sl, cr4
    8844:	00050000 	andeq	r0, r5, r0
    8848:	3b050107 	blcc	148c6c <_Min_Stack_Size+0x148a6c>
    884c:	00030801 	andeq	r0, r3, r1, lsl #16
    8850:	09dc0800 	ldmibeq	ip, {fp}^
    8854:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    8858:	00000d24 	andeq	r0, r0, r4, lsr #26
    885c:	9e0d0002 	cdpls	0, 0, cr0, cr13, cr2, {0}
    8860:	05000008 	streq	r0, [r0, #-8]
    8864:	02f2013e 	rscseq	r0, r2, #-2147483633	; 0x8000000f
    8868:	ad110000 	ldcge	0, cr0, [r1, #-0]
    886c:	17000007 	strne	r0, [r0, -r7]
    8870:	6d014405 	cfstrsvs	mvf4, [r1, #-20]	; 0xffffffec
    8874:	0b000003 	bleq	8888 <_Min_Stack_Size+0x8688>
    8878:	0063616d 	rsbeq	r6, r3, sp, ror #2
    887c:	4c014605 	stcmi	6, cr4, [r1], {5}
    8880:	00000002 	andeq	r0, r0, r2
    8884:	0070690b 	rsbseq	r6, r0, fp, lsl #18
    8888:	6d014705 	stcvs	7, cr4, [r1, #-20]	; 0xffffffec
    888c:	06000003 	streq	r0, [r0], -r3
    8890:	006e730b 	rsbeq	r7, lr, fp, lsl #6
    8894:	6d014805 	stcvs	8, cr4, [r1, #-20]	; 0xffffffec
    8898:	0a000003 	beq	88ac <_Min_Stack_Size+0x86ac>
    889c:	0077670b 	rsbseq	r6, r7, fp, lsl #14
    88a0:	6d014905 	stcvs	9, cr4, [r1, #-20]	; 0xffffffec
    88a4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    88a8:	736e640b 	cmnvc	lr, #184549376	; 0xb000000
    88ac:	014a0500 	cmpeq	sl, r0, lsl #10
    88b0:	0000036d 	andeq	r0, r0, sp, ror #6
    88b4:	0c650c12 	stcleq	12, cr0, [r5], #-72	; 0xffffffb8
    88b8:	4b050000 	blmi	1488c0 <_Min_Stack_Size+0x1486c0>
    88bc:	00030801 	andeq	r0, r3, r1, lsl #16
    88c0:	0e001600 	cfmadd32eq	mvax0, mvfx1, mvfx0, mvfx0
    88c4:	0000009c 	muleq	r0, ip, r0
    88c8:	0000037d 	andeq	r0, r0, sp, ror r3
    88cc:	00008e0f 	andeq	r8, r0, pc, lsl #28
    88d0:	0d000300 	stceq	3, cr0, [r0, #-0]
    88d4:	000009d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    88d8:	14014c05 	strne	r4, [r1], #-3077	; 0xfffff3fb
    88dc:	07000003 	streq	r0, [r0, -r3]
    88e0:	01590601 	cmpeq	r9, r1, lsl #12
    88e4:	000003c3 	andeq	r0, r0, r3, asr #7
    88e8:	00068c08 	andeq	r8, r6, r8, lsl #24
    88ec:	bb080000 	bllt	2088f4 <_Min_Stack_Size+0x2086f4>
    88f0:	01000004 	tsteq	r0, r4
    88f4:	00052e08 	andeq	r2, r5, r8, lsl #28
    88f8:	74080200 	strvc	r0, [r8], #-512	; 0xfffffe00
    88fc:	03000004 	movweq	r0, #4
    8900:	0006b108 	andeq	fp, r6, r8, lsl #2
    8904:	8a080400 	bhi	20990c <_Min_Stack_Size+0x20970c>
    8908:	05000005 	streq	r0, [r0, #-5]
    890c:	00053e08 	andeq	r3, r5, r8, lsl #28
    8910:	34080600 	strcc	r0, [r8], #-1536	; 0xfffffa00
    8914:	07000006 	streq	r0, [r0, -r6]
    8918:	07011000 	streq	r1, [r1, -r0]
    891c:	0003ea3f 	andeq	lr, r3, pc, lsr sl
    8920:	0e480800 	cdpeq	8, 4, cr0, cr8, cr0, {0}
    8924:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8928:	00001443 	andeq	r1, r0, r3, asr #8
    892c:	0f050801 	svceq	0x00050801
    8930:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    8934:	000013f7 	strdeq	r1, [r0], -r7
    8938:	0ec60803 	cdpeq	8, 12, cr0, cr6, cr3, {0}
    893c:	00040000 	andeq	r0, r4, r0
    8940:	00009c0e 	andeq	r9, r0, lr, lsl #24
    8944:	0003fa00 	andeq	pc, r3, r0, lsl #20
    8948:	008e0f00 	addeq	r0, lr, r0, lsl #30
    894c:	007f0000 	rsbseq	r0, pc, r0
    8950:	9c085c12 	stcls	12, cr5, [r8], {18}
    8954:	0000047b 	andeq	r0, r0, fp, ror r4
    8958:	00393313 	eorseq	r3, r9, r3, lsl r3
    895c:	8c9d0800 	ldchi	8, cr0, [sp], {0}
    8960:	00000000 	andeq	r0, r0, r0
    8964:	0005b713 	andeq	fp, r5, r3, lsl r7
    8968:	9b9e0800 	blls	fe78a970 <BootRAM+0xd6fb111>
    896c:	04000004 	streq	r0, [r0], #-4
    8970:	0038e113 	eorseq	lr, r8, r3, lsl r1
    8974:	a1a00800 	lslge	r0, r0, #16
    8978:	08000004 	stmdaeq	r0, {r2}
    897c:	00390613 	eorseq	r0, r9, r3, lsl r6
    8980:	b1a20800 			; <UNDEFINED> instruction: 0xb1a20800
    8984:	3a000004 	bcc	899c <_Min_Stack_Size+0x879c>
    8988:	00386a13 	eorseq	r6, r8, r3, lsl sl
    898c:	b1a30800 			; <UNDEFINED> instruction: 0xb1a30800
    8990:	47000004 	strmi	r0, [r0, -r4]
    8994:	00396213 	eorseq	r6, r9, r3, lsl r2
    8998:	9ca50800 	stcls	8, cr0, [r5]
    899c:	54000000 	strpl	r0, [r0], #-0
    89a0:	0038fd13 	eorseq	pc, r8, r3, lsl sp	; <UNPREDICTABLE>
    89a4:	9ca60800 	stcls	8, cr0, [r6]
    89a8:	55000000 	strpl	r0, [r0, #-0]
    89ac:	00387c13 	eorseq	r7, r8, r3, lsl ip
    89b0:	9ca70800 	stcls	8, cr0, [r7]
    89b4:	56000000 	strpl	r0, [r0], -r0
    89b8:	71657314 	cmnvc	r5, r4, lsl r3
    89bc:	a7a90800 	strge	r0, [r9, r0, lsl #16]!
    89c0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    89c4:	003bc213 	eorseq	ip, fp, r3, lsl r2
    89c8:	a7aa0800 	strge	r0, [sl, r0, lsl #16]!
    89cc:	5a000000 	bpl	89d4 <_Min_Stack_Size+0x87d4>
    89d0:	007e1500 	rsbseq	r1, lr, r0, lsl #10
    89d4:	04940000 	ldreq	r0, [r4], #0
    89d8:	8c160000 	ldchi	0, cr0, [r6], {-0}
    89dc:	16000000 	strne	r0, [r0], -r0
    89e0:	00000494 	muleq	r0, r4, r4
    89e4:	00008516 	andeq	r8, r0, r6, lsl r5
    89e8:	04170000 	ldreq	r0, [r7], #-0
    89ec:	0000049a 	muleq	r0, sl, r4
    89f0:	7b041718 	blvc	10e658 <_Min_Stack_Size+0x10e458>
    89f4:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    89f8:	00000095 	muleq	r0, r5, r0
    89fc:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    8a00:	00008e0f 	andeq	r8, r0, pc, lsl #28
    8a04:	0e003100 	adfeqs	f3, f0, f0
    8a08:	00000095 	muleq	r0, r5, r0
    8a0c:	000004c1 	andeq	r0, r0, r1, asr #9
    8a10:	00008e0f 	andeq	r8, r0, pc, lsl #28
    8a14:	03000c00 	movweq	r0, #3072	; 0xc00
    8a18:	0000388a 	andeq	r3, r0, sl, lsl #17
    8a1c:	03faab08 	mvnseq	sl, #8, 22	; 0x2000
    8a20:	aa190000 	bge	648a28 <_Min_Stack_Size+0x648828>
    8a24:	01000038 	tsteq	r0, r8, lsr r0
    8a28:	00562845 	subseq	r2, r6, r5, asr #16
    8a2c:	00001408 	andeq	r1, r0, r8, lsl #8
    8a30:	199c0100 	ldmibne	ip, {r8}
    8a34:	0000398c 	andeq	r3, r0, ip, lsl #19
    8a38:	563c4901 	ldrtpl	r4, [ip], -r1, lsl #18
    8a3c:	00140800 	andseq	r0, r4, r0, lsl #16
    8a40:	9c010000 	stcls	0, cr0, [r1], {-0}
    8a44:	0039541a 	eorseq	r5, r9, sl, lsl r4
    8a48:	504e0100 	subpl	r0, lr, r0, lsl #2
    8a4c:	30080056 	andcc	r0, r8, r6, asr r0
    8a50:	01000000 	mrseq	r0, (UNDEF: 0)
    8a54:	0005119c 	muleq	r5, ip, r1
    8a58:	62771b00 	rsbsvs	r1, r7, #0, 22
    8a5c:	9c4e0100 	stflse	f0, [lr], {-0}
    8a60:	02000000 	andeq	r0, r0, #0
    8a64:	1c007791 	stcne	7, cr7, [r0], {145}	; 0x91
    8a68:	000039c6 	andeq	r3, r0, r6, asr #19
    8a6c:	009c5501 	addseq	r5, ip, r1, lsl #10
    8a70:	56800000 	strpl	r0, [r0], r0
    8a74:	00300800 	eorseq	r0, r0, r0, lsl #16
    8a78:	9c010000 	stcls	0, cr0, [r1], {-0}
    8a7c:	00000537 	andeq	r0, r0, r7, lsr r5
    8a80:	0100691d 	tsteq	r0, sp, lsl r9
    8a84:	00009c56 	andeq	r9, r0, r6, asr ip
    8a88:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    8a8c:	396e1e00 	stmdbcc	lr!, {r9, sl, fp, ip}^
    8a90:	5f010000 	svcpl	0x00010000
    8a94:	080056b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, ip, lr}
    8a98:	00000028 	andeq	r0, r0, r8, lsr #32
    8a9c:	05599c01 	ldrbeq	r9, [r9, #-3073]	; 0xfffff3ff
    8aa0:	781b0000 	ldmdavc	fp, {}	; <UNPREDICTABLE>
    8aa4:	b25f0100 	subslt	r0, pc, #0, 2
    8aa8:	02000000 	andeq	r0, r0, #0
    8aac:	1a007491 	bne	25cf8 <_Min_Stack_Size+0x25af8>
    8ab0:	00003845 	andeq	r3, r0, r5, asr #16
    8ab4:	56d86701 	ldrbpl	r6, [r8], r1, lsl #14
    8ab8:	019c0800 	orrseq	r0, ip, r0, lsl #16
    8abc:	9c010000 	stcls	0, cr0, [r1], {-0}
    8ac0:	0000059a 	muleq	r0, sl, r5
    8ac4:	0039fa1f 	eorseq	pc, r9, pc, lsl sl	; <UNPREDICTABLE>
    8ac8:	9a680100 	bls	1a08ed0 <_Min_Stack_Size+0x1a08cd0>
    8acc:	02000005 	andeq	r0, r0, #5
    8ad0:	ab1f6091 	blge	7e0d1c <_Min_Stack_Size+0x7e0b1c>
    8ad4:	01000039 	tsteq	r0, r9, lsr r0
    8ad8:	0005aa68 	andeq	sl, r5, r8, ror #20
    8adc:	48910200 	ldmmi	r1, {r9}
    8ae0:	00384d1f 	eorseq	r4, r8, pc, lsl sp
    8ae4:	7d690100 	stfvce	f0, [r9, #-0]
    8ae8:	03000003 	movweq	r0, #3
    8aec:	007fb091 			; <UNDEFINED> instruction: 0x007fb091
    8af0:	0000950e 	andeq	r9, r0, lr, lsl #10
    8af4:	0005aa00 	andeq	sl, r5, r0, lsl #20
    8af8:	008e0f00 	addeq	r0, lr, r0, lsl #30
    8afc:	00050000 	andeq	r0, r5, r0
    8b00:	0000950e 	andeq	r9, r0, lr, lsl #10
    8b04:	0005ba00 	andeq	fp, r5, r0, lsl #20
    8b08:	008e0f00 	addeq	r0, lr, r0, lsl #30
    8b0c:	00150000 	andseq	r0, r5, r0
    8b10:	00382e1e 	eorseq	r2, r8, lr, lsl lr
    8b14:	747e0100 	ldrbtvc	r0, [lr], #-256	; 0xffffff00
    8b18:	b0080058 	andlt	r0, r8, r8, asr r0
    8b1c:	01000000 	mrseq	r0, (UNDEF: 0)
    8b20:	0005de9c 	muleq	r5, ip, lr
    8b24:	38731f00 	ldmdacc	r3!, {r8, r9, sl, fp, ip}^
    8b28:	7f010000 	svcvc	0x00010000
    8b2c:	0000009c 	muleq	r0, ip, r0
    8b30:	00779102 	rsbseq	r9, r7, r2, lsl #2
    8b34:	0039f020 	eorseq	pc, r9, r0, lsr #32
    8b38:	9ca60100 	stflss	f0, [r6]
    8b3c:	24000000 	strcs	r0, [r0], #-0
    8b40:	3c080059 	stccc	0, cr0, [r8], {89}	; 0x59
    8b44:	01000000 	mrseq	r0, (UNDEF: 0)
    8b48:	0006229c 	muleq	r6, ip, r2
    8b4c:	38b92100 	ldmcc	r9!, {r8, sp}
    8b50:	a6010000 	strge	r0, [r1], -r0
    8b54:	00000622 	andeq	r0, r0, r2, lsr #12
    8b58:	216c9102 	cmncs	ip, r2, lsl #2
    8b5c:	000014da 	ldrdeq	r1, [r0], -sl
    8b60:	0622a601 	strteq	sl, [r2], -r1, lsl #12
    8b64:	91020000 	mrsls	r0, (UNDEF: 2)
    8b68:	6d741d68 	ldclvs	13, cr1, [r4, #-416]!	; 0xfffffe60
    8b6c:	a7010070 	smlsdxge	r1, r0, r0, r0
    8b70:	0000009c 	muleq	r0, ip, r0
    8b74:	00779102 	rsbseq	r9, r7, r2, lsl #2
    8b78:	009c0417 	addseq	r0, ip, r7, lsl r4
    8b7c:	d51c0000 	ldrle	r0, [ip, #-0]
    8b80:	01000038 	tsteq	r0, r8, lsr r0
    8b84:	00007eb1 			; <UNDEFINED> instruction: 0x00007eb1
    8b88:	00596000 	subseq	r6, r9, r0
    8b8c:	00002c08 	andeq	r2, r0, r8, lsl #24
    8b90:	799c0100 	ldmibvc	ip, {r8}
    8b94:	21000006 	tstcs	r0, r6
    8b98:	00003933 	andeq	r3, r0, r3, lsr r9
    8b9c:	008cb101 	addeq	fp, ip, r1, lsl #2
    8ba0:	91020000 	mrsls	r0, (UNDEF: 2)
    8ba4:	75621b6c 	strbvc	r1, [r2, #-2924]!	; 0xfffff494
    8ba8:	b1010066 	tstlt	r1, r6, rrx
    8bac:	00000494 	muleq	r0, r4, r4
    8bb0:	21689102 	cmncs	r8, r2, lsl #2
    8bb4:	00003e8d 	andeq	r3, r0, sp, lsl #29
    8bb8:	0085b101 	addeq	fp, r5, r1, lsl #2
    8bbc:	91020000 	mrsls	r0, (UNDEF: 2)
    8bc0:	64661d64 	strbtvs	r1, [r6], #-3428	; 0xfffff29c
    8bc4:	7eb20100 	frdvcs	f0, f2, f0
    8bc8:	02000000 	andeq	r0, r0, #0
    8bcc:	20007491 	mulcs	r0, r1, r4
    8bd0:	000039df 	ldrdeq	r3, [r0], -pc	; <UNPREDICTABLE>
    8bd4:	007eb601 	rsbseq	fp, lr, r1, lsl #12
    8bd8:	598c0000 	stmibpl	ip, {}	; <UNPREDICTABLE>
    8bdc:	00b80800 	adcseq	r0, r8, r0, lsl #16
    8be0:	9c010000 	stcls	0, cr0, [r1], {-0}
    8be4:	000006d9 	ldrdeq	r0, [r0], -r9
    8be8:	0038c21f 	eorseq	ip, r8, pc, lsl r2
    8bec:	7eb70100 	frdvcs	f0, f7, f0
    8bf0:	02000000 	andeq	r0, r0, #0
    8bf4:	3f1f7491 	svccc	0x001f7491
    8bf8:	01000039 	tsteq	r0, r9, lsr r0
    8bfc:	00007eb7 			; <UNDEFINED> instruction: 0x00007eb7
    8c00:	70910200 	addsvc	r0, r1, r0, lsl #4
    8c04:	00399d1f 	eorseq	r9, r9, pc, lsl sp
    8c08:	7eb70100 	frdvcs	f0, f7, f0
    8c0c:	02000000 	andeq	r0, r0, #0
    8c10:	ab1f6891 	blge	7e2e5c <_Min_Stack_Size+0x7e2c5c>
    8c14:	0100003b 	tsteq	r0, fp, lsr r0
    8c18:	00009cb8 			; <UNDEFINED> instruction: 0x00009cb8
    8c1c:	6f910200 	svcvs	0x00910200
    8c20:	003a751f 	eorseq	r7, sl, pc, lsl r5
    8c24:	a7b90100 	ldrge	r0, [r9, r0, lsl #2]!
    8c28:	02000000 	andeq	r0, r0, #0
    8c2c:	20006c91 	mulcs	r0, r1, ip
    8c30:	000039eb 	andeq	r3, r0, fp, ror #19
    8c34:	007ed601 	rsbseq	sp, lr, r1, lsl #12
    8c38:	5a440000 	bpl	1108c40 <_Min_Stack_Size+0x1108a40>
    8c3c:	04440800 	strbeq	r0, [r4], #-2048	; 0xfffff800
    8c40:	9c010000 	stcls	0, cr0, [r1], {-0}
    8c44:	0000078c 	andeq	r0, r0, ip, lsl #15
    8c48:	706d741d 	rsbvc	r7, sp, sp, lsl r4
    8c4c:	9cd70100 	ldflse	f0, [r7], {0}
    8c50:	02000000 	andeq	r0, r0, #0
    8c54:	be1f6391 	mrclt	3, 0, r6, cr15, cr1, {4}
    8c58:	01000039 	tsteq	r0, r9, lsr r0
    8c5c:	0007a2d8 	ldrdeq	sl, [r7], -r8
    8c60:	50910200 	addspl	r0, r1, r0, lsl #4
    8c64:	00394a1f 	eorseq	r4, r9, pc, lsl sl
    8c68:	6dda0100 	ldfvse	f0, [sl]
    8c6c:	02000003 	andeq	r0, r0, #3
    8c70:	391f4c91 	ldmdbcc	pc, {r0, r4, r7, sl, fp, lr}	; <UNPREDICTABLE>
    8c74:	01000038 	tsteq	r0, r8, lsr r0
    8c78:	0000a7dc 	ldrdeq	sl, [r0], -ip
    8c7c:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    8c80:	00389f1f 	eorseq	r9, r8, pc, lsl pc
    8c84:	a7dd0100 	ldrbge	r0, [sp, r0, lsl #2]
    8c88:	02000000 	andeq	r0, r0, #0
    8c8c:	9d1f6c91 	ldcls	12, cr6, [pc, #-580]	; 8a50 <_Min_Stack_Size+0x8850>
    8c90:	01000039 	tsteq	r0, r9, lsr r0
    8c94:	00007edf 	ldrdeq	r7, [r0], -pc	; <UNPREDICTABLE>
    8c98:	68910200 	ldmvs	r1, {r9}
    8c9c:	003c101f 	eorseq	r1, ip, pc, lsl r0
    8ca0:	a7e00100 	strbge	r0, [r0, r0, lsl #2]!
    8ca4:	02000000 	andeq	r0, r0, #0
    8ca8:	ea1f4a91 	b	7db6f4 <_Min_Stack_Size+0x7db4f4>
    8cac:	01000038 	tsteq	r0, r8, lsr r0
    8cb0:	0000a7e0 	andeq	sl, r0, r0, ror #15
    8cb4:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    8cb8:	005de822 	subseq	lr, sp, r2, lsr #16
    8cbc:	00006408 	andeq	r6, r0, r8, lsl #8
    8cc0:	736d2300 	cmnvc	sp, #0, 6
    8cc4:	b2010067 	andlt	r0, r1, #103	; 0x67
    8cc8:	0003ea01 	andeq	lr, r3, r1, lsl #20
    8ccc:	c8910300 	ldmgt	r1, {r8, r9}
    8cd0:	656c237e 	strbvs	r2, [ip, #-894]!	; 0xfffffc82
    8cd4:	b401006e 	strlt	r0, [r1], #-110	; 0xffffff92
    8cd8:	0000a701 	andeq	sl, r0, r1, lsl #14
    8cdc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    8ce0:	9c0e0000 	stcls	0, cr0, [lr], {-0}
    8ce4:	a2000000 	andge	r0, r0, #0
    8ce8:	0f000007 	svceq	0x00000007
    8cec:	0000008e 	andeq	r0, r0, lr, lsl #1
    8cf0:	008e0f01 	addeq	r0, lr, r1, lsl #30
    8cf4:	00070000 	andeq	r0, r7, r0
    8cf8:	00078c24 	andeq	r8, r7, r4, lsr #24
    8cfc:	02272500 	eoreq	r2, r7, #0, 10
    8d00:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    8d04:	0007b306 	andeq	fp, r7, r6, lsl #6
    8d08:	007e0600 	rsbseq	r0, lr, r0, lsl #12
    8d0c:	9c0e0000 	stcls	0, cr0, [lr], {-0}
    8d10:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    8d14:	0f000007 	svceq	0x00000007
    8d18:	0000008e 	andeq	r0, r0, lr, lsl #1
    8d1c:	9026001a 	eorls	r0, r6, sl, lsl r0
    8d20:	0a000002 	beq	8d30 <_Min_Stack_Size+0x8b30>
    8d24:	0007b809 	andeq	fp, r7, r9, lsl #16
    8d28:	37572700 	ldrbcc	r2, [r7, -r0, lsl #14]
    8d2c:	2b010000 	blcs	48d34 <_Min_Stack_Size+0x48b34>
    8d30:	000000bd 	strheq	r0, [r0], -sp
    8d34:	012c0305 			; <UNDEFINED> instruction: 0x012c0305
    8d38:	48272000 	stmdami	r7!, {sp}
    8d3c:	01000037 	tsteq	r0, r7, lsr r0
    8d40:	0000bd2c 	andeq	fp, r0, ip, lsr #26
    8d44:	30030500 	andcc	r0, r3, r0, lsl #10
    8d48:	0e200001 	cdpeq	0, 2, cr0, cr0, cr1, {0}
    8d4c:	0000009c 	muleq	r0, ip, r0
    8d50:	00000806 	andeq	r0, r0, r6, lsl #16
    8d54:	00008e28 	andeq	r8, r0, r8, lsr #28
    8d58:	0003ff00 	andeq	pc, r3, r0, lsl #30
    8d5c:	0039b027 	eorseq	fp, r9, r7, lsr #32
    8d60:	f5320100 			; <UNDEFINED> instruction: 0xf5320100
    8d64:	05000007 	streq	r0, [r0, #-7]
    8d68:	00018403 	andeq	r8, r1, r3, lsl #8
    8d6c:	009c0e20 	addseq	r0, ip, r0, lsr #28
    8d70:	08280000 	stmdaeq	r8!, {}	; <UNPREDICTABLE>
    8d74:	8e280000 	cdphi	0, 2, cr0, cr8, cr0, {0}
    8d78:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    8d7c:	77270007 	strvc	r0, [r7, -r7]!
    8d80:	01000039 	tsteq	r0, r9, lsr r0
    8d84:	00081734 	andeq	r1, r8, r4, lsr r7
    8d88:	e0030500 	and	r0, r3, r0, lsl #10
    8d8c:	27200005 	strcs	r0, [r0, -r5]!
    8d90:	00003980 	andeq	r3, r0, r0, lsl #19
    8d94:	037d3601 	cmneq	sp, #1048576	; 0x100000
    8d98:	03050000 	movweq	r0, #20480	; 0x5000
    8d9c:	20000068 	andcs	r0, r0, r8, rrx
    8da0:	00385527 	eorseq	r5, r8, r7, lsr #10
    8da4:	6d3d0100 	ldfvss	f0, [sp, #-0]
    8da8:	05000003 	streq	r0, [r0, #-3]
    8dac:	00008003 	andeq	r8, r0, r3
    8db0:	39d32720 	ldmibcc	r3, {r5, r8, r9, sl, sp}^
    8db4:	40010000 	andmi	r0, r1, r0
    8db8:	0000009c 	muleq	r0, ip, r0
    8dbc:	01340305 	teqeq	r4, r5, lsl #6
    8dc0:	f5272000 			; <UNDEFINED> instruction: 0xf5272000
    8dc4:	01000038 	tsteq	r0, r8, lsr r0
    8dc8:	00009c40 	andeq	r9, r0, r0, asr #24
    8dcc:	35030500 	strcc	r0, [r3, #-1280]	; 0xfffffb00
    8dd0:	27200001 	strcs	r0, [r0, -r1]!
    8dd4:	000038ce 	andeq	r3, r0, lr, asr #17
    8dd8:	04c14201 	strbeq	r4, [r1], #513	; 0x201
    8ddc:	03050000 	movweq	r0, #20480	; 0x5000
    8de0:	20000584 	andcs	r0, r0, r4, lsl #11
    8de4:	0009b300 	andeq	fp, r9, r0, lsl #6
    8de8:	40000400 	andmi	r0, r0, r0, lsl #8
    8dec:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    8df0:	00018101 	andeq	r8, r1, r1, lsl #2
    8df4:	3bc80100 	blcc	ff2091fc <BootRAM+0xe17999d>
    8df8:	0b200000 	bleq	808e00 <_Min_Stack_Size+0x808c00>
    8dfc:	00000000 	andeq	r0, r0, r0
    8e00:	40350000 	eorsmi	r0, r5, r0
    8e04:	04020000 	streq	r0, [r2], #-0
    8e08:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    8e0c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    8e10:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    8e14:	c3060103 	movwgt	r0, #24835	; 0x6103
    8e18:	04000000 	streq	r0, [r0], #-0
    8e1c:	00000093 	muleq	r0, r3, r0
    8e20:	00411d02 	subeq	r1, r1, r2, lsl #26
    8e24:	01030000 	mrseq	r0, (UNDEF: 3)
    8e28:	0000c108 	andeq	ip, r0, r8, lsl #2
    8e2c:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    8e30:	00000051 	andeq	r0, r0, r1, asr r0
    8e34:	00002e04 	andeq	r2, r0, r4, lsl #28
    8e38:	5a2b0200 	bpl	ac9640 <_Min_Stack_Size+0xac9440>
    8e3c:	03000000 	movweq	r0, #0
    8e40:	01230702 			; <UNDEFINED> instruction: 0x01230702
    8e44:	04030000 	streq	r0, [r3], #-0
    8e48:	00006d05 	andeq	r6, r0, r5, lsl #26
    8e4c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    8e50:	000000fa 	strdeq	r0, [r0], -sl
    8e54:	68050803 	stmdavs	r5, {r0, r1, fp}
    8e58:	03000000 	movweq	r0, #0
    8e5c:	00f50708 	rscseq	r0, r5, r8, lsl #14
    8e60:	04030000 	streq	r0, [r3], #-0
    8e64:	00001507 	andeq	r1, r0, r7, lsl #10
    8e68:	03040500 	movweq	r0, #17664	; 0x4500
    8e6c:	00ca0801 	sbceq	r0, sl, r1, lsl #16
    8e70:	04060000 	streq	r0, [r6], #-0
    8e74:	00000093 	muleq	r0, r3, r0
    8e78:	00008607 	andeq	r8, r0, r7, lsl #12
    8e7c:	00950400 	addseq	r0, r5, r0, lsl #8
    8e80:	14030000 	strne	r0, [r3], #-0
    8e84:	00000036 	andeq	r0, r0, r6, lsr r0
    8e88:	00003004 	andeq	r3, r0, r4
    8e8c:	4f1a0300 	svcmi	0x001a0300
    8e90:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8e94:	2f9c045c 	svccs	0x009c045c
    8e98:	09000001 	stmdbeq	r0, {r0}
    8e9c:	00003933 	andeq	r3, r0, r3, lsr r9
    8ea0:	00849d04 	addeq	r9, r4, r4, lsl #26
    8ea4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8ea8:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    8eac:	014f9e04 	cmpeq	pc, r4, lsl #28
    8eb0:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    8eb4:	000038e1 	andeq	r3, r0, r1, ror #17
    8eb8:	0155a004 	cmpeq	r5, r4
    8ebc:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    8ec0:	00003906 	andeq	r3, r0, r6, lsl #18
    8ec4:	0165a204 	cmneq	r5, r4, lsl #4
    8ec8:	093a0000 	ldmdbeq	sl!, {}	; <UNPREDICTABLE>
    8ecc:	0000386a 	andeq	r3, r0, sl, ror #16
    8ed0:	0165a304 	cmneq	r5, r4, lsl #6
    8ed4:	09470000 	stmdbeq	r7, {}^	; <UNPREDICTABLE>
    8ed8:	00003962 	andeq	r3, r0, r2, ror #18
    8edc:	0098a504 	addseq	sl, r8, r4, lsl #10
    8ee0:	09540000 	ldmdbeq	r4, {}^	; <UNPREDICTABLE>
    8ee4:	000038fd 	strdeq	r3, [r0], -sp
    8ee8:	0098a604 	addseq	sl, r8, r4, lsl #12
    8eec:	09550000 	ldmdbeq	r5, {}^	; <UNPREDICTABLE>
    8ef0:	0000387c 	andeq	r3, r0, ip, ror r8
    8ef4:	0098a704 	addseq	sl, r8, r4, lsl #14
    8ef8:	0a560000 	beq	1588f00 <_Min_Stack_Size+0x1588d00>
    8efc:	00716573 	rsbseq	r6, r1, r3, ror r5
    8f00:	00a3a904 	adceq	sl, r3, r4, lsl #18
    8f04:	09580000 	ldmdbeq	r8, {}^	; <UNPREDICTABLE>
    8f08:	00003bc2 	andeq	r3, r0, r2, asr #23
    8f0c:	00a3aa04 	adceq	sl, r3, r4, lsl #20
    8f10:	005a0000 	subseq	r0, sl, r0
    8f14:	0000210b 	andeq	r2, r0, fp, lsl #2
    8f18:	00014800 	andeq	r4, r1, r0, lsl #16
    8f1c:	00840c00 	addeq	r0, r4, r0, lsl #24
    8f20:	480c0000 	stmdami	ip, {}	; <UNPREDICTABLE>
    8f24:	0c000001 	stceq	0, cr0, [r0], {1}
    8f28:	00000028 	andeq	r0, r0, r8, lsr #32
    8f2c:	4e040600 	cfmadd32mi	mvax0, mvfx0, mvfx4, mvfx0
    8f30:	0d000001 	stceq	0, cr0, [r0, #-4]
    8f34:	012f0406 			; <UNDEFINED> instruction: 0x012f0406
    8f38:	860e0000 	strhi	r0, [lr], -r0
    8f3c:	65000000 	strvs	r0, [r0, #-0]
    8f40:	0f000001 	svceq	0x00000001
    8f44:	0000007d 	andeq	r0, r0, sp, ror r0
    8f48:	860e0031 			; <UNDEFINED> instruction: 0x860e0031
    8f4c:	75000000 	strvc	r0, [r0, #-0]
    8f50:	0f000001 	svceq	0x00000001
    8f54:	0000007d 	andeq	r0, r0, sp, ror r0
    8f58:	8a04000c 	bhi	108f90 <_Min_Stack_Size+0x108d90>
    8f5c:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
    8f60:	0000aeab 	andeq	sl, r0, fp, lsr #29
    8f64:	3ba21000 	blcc	fe88cf6c <BootRAM+0xd7fd70d>
    8f68:	2d010000 	stccs	0, cr0, [r1, #-0]
    8f6c:	00000098 	muleq	r0, r8, r0
    8f70:	08005e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, ip, lr}
    8f74:	00000056 	andeq	r0, r0, r6, asr r0
    8f78:	01b69c01 			; <UNDEFINED> instruction: 0x01b69c01
    8f7c:	62110000 	andsvs	r0, r1, #0
    8f80:	01006675 	tsteq	r0, r5, ror r6
    8f84:	0001b62d 	andeq	fp, r1, sp, lsr #12
    8f88:	6c910200 	lfmvs	f0, 4, [r1], {0}
    8f8c:	003b8312 	eorseq	r8, fp, r2, lsl r3
    8f90:	982e0100 	stmdals	lr!, {r8}
    8f94:	02000000 	andeq	r0, r0, #0
    8f98:	06007791 			; <UNDEFINED> instruction: 0x06007791
    8f9c:	0001bc04 	andeq	fp, r1, r4, lsl #24
    8fa0:	00980700 	addseq	r0, r8, r0, lsl #14
    8fa4:	6a100000 	bvs	408fac <_Min_Stack_Size+0x408dac>
    8fa8:	0100003a 	tsteq	r0, sl, lsr r0
    8fac:	0000a33e 	andeq	sl, r0, lr, lsr r3
    8fb0:	005ee000 	subseq	lr, lr, r0
    8fb4:	00005608 	andeq	r5, r0, r8, lsl #12
    8fb8:	139c0100 	orrsne	r0, ip, #0, 2
    8fbc:	11000002 	tstne	r0, r2
    8fc0:	00667562 	rsbeq	r7, r6, r2, ror #10
    8fc4:	01b63e01 			; <UNDEFINED> instruction: 0x01b63e01
    8fc8:	91020000 	mrsls	r0, (UNDEF: 2)
    8fcc:	3ad9126c 	bcc	ff64d984 <BootRAM+0xe5be125>
    8fd0:	3f010000 	svccc	0x00010000
    8fd4:	000000a3 	andeq	r0, r0, r3, lsr #1
    8fd8:	12769102 	rsbsne	r9, r6, #-2147483648	; 0x80000000
    8fdc:	00000f8b 	andeq	r0, r0, fp, lsl #31
    8fe0:	00a34001 	adceq	r4, r3, r1
    8fe4:	91020000 	mrsls	r0, (UNDEF: 2)
    8fe8:	3a581274 	bcc	160d9c0 <_Min_Stack_Size+0x160d7c0>
    8fec:	41010000 	mrsmi	r0, (UNDEF: 1)
    8ff0:	00000098 	muleq	r0, r8, r0
    8ff4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    8ff8:	003c0513 	eorseq	r0, ip, r3, lsl r5
    8ffc:	a3510100 	cmpge	r1, #0, 2
    9000:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    9004:	bc08005f 	stclt	0, cr0, [r8], {95}	; 0x5f
    9008:	01000000 	mrseq	r0, (UNDEF: 0)
    900c:	0002a69c 	muleq	r2, ip, r6
    9010:	75621100 	strbvc	r1, [r2, #-256]!	; 0xffffff00
    9014:	51010066 	tstpl	r1, r6, rrx
    9018:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    901c:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    9020:	00000945 	andeq	r0, r0, r5, asr #18
    9024:	00985201 	addseq	r5, r8, r1, lsl #4
    9028:	91020000 	mrsls	r0, (UNDEF: 2)
    902c:	6f711475 	svcvs	0x00711475
    9030:	53010073 	movwpl	r0, #4211	; 0x1073
    9034:	00000098 	muleq	r0, r8, r0
    9038:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    903c:	01006469 	tsteq	r0, r9, ror #8
    9040:	0000a354 	andeq	sl, r0, r4, asr r3
    9044:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    9048:	005f7215 	subseq	r7, pc, r5, lsl r2	; <UNPREDICTABLE>
    904c:	00004c08 	andeq	r4, r0, r8, lsl #24
    9050:	00028d00 	andeq	r8, r2, r0, lsl #26
    9054:	6c721400 	cfldrdvs	mvd1, [r2], #-0
    9058:	5d010062 	stcpl	0, cr0, [r1, #-392]	; 0xfffffe78
    905c:	00000098 	muleq	r0, r8, r0
    9060:	12739102 	rsbsne	r9, r3, #-2147483648	; 0x80000000
    9064:	00004976 	andeq	r4, r0, r6, ror r9
    9068:	00985e01 	addseq	r5, r8, r1, lsl #28
    906c:	91020000 	mrsls	r0, (UNDEF: 2)
    9070:	be160072 	mrclt	0, 0, r0, cr6, cr2, {3}
    9074:	2c08005f 	stccs	0, cr0, [r8], {95}	; 0x5f
    9078:	14000000 	strne	r0, [r0], #-0
    907c:	00626c72 	rsbeq	r6, r2, r2, ror ip
    9080:	00986701 	addseq	r6, r8, r1, lsl #14
    9084:	91020000 	mrsls	r0, (UNDEF: 2)
    9088:	13000071 	movwne	r0, #113	; 0x71
    908c:	00003b3d 	andeq	r3, r0, sp, lsr fp
    9090:	00a36f01 	adceq	r6, r3, r1, lsl #30
    9094:	00000000 	andeq	r0, r0, r0
    9098:	003e0000 	eorseq	r0, lr, r0
    909c:	9c010000 	stcls	0, cr0, [r1], {-0}
    90a0:	000002f8 	strdeq	r0, [r0], -r8
    90a4:	66756211 			; <UNDEFINED> instruction: 0x66756211
    90a8:	b66f0100 	strbtlt	r0, [pc], -r0, lsl #2
    90ac:	02000001 	andeq	r0, r0, #1
    90b0:	4c176c91 	ldcmi	12, cr6, [r7], {145}	; 0x91
    90b4:	0100003b 	tsteq	r0, fp, lsr r0
    90b8:	0002f86f 	andeq	pc, r2, pc, ror #16
    90bc:	68910200 	ldmvs	r1, {r9}
    90c0:	72747014 	rsbsvc	r7, r4, #20
    90c4:	b6700100 	ldrbtlt	r0, [r0], -r0, lsl #2
    90c8:	02000001 	andeq	r0, r0, #1
    90cc:	98127091 	ldmdals	r2, {r0, r4, r7, ip, sp, lr}
    90d0:	0100003a 	tsteq	r0, sl, lsr r0
    90d4:	0000a371 	andeq	sl, r0, r1, ror r3
    90d8:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    90dc:	98040600 	stmdals	r4, {r9, sl}
    90e0:	13000000 	movwne	r0, #0
    90e4:	00003a3f 	andeq	r3, r0, pc, lsr sl
    90e8:	00a37c01 	adceq	r7, r3, r1, lsl #24
    90ec:	00000000 	andeq	r0, r0, r0
    90f0:	00640000 	rsbeq	r0, r4, r0
    90f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    90f8:	0000035a 	andeq	r0, r0, sl, asr r3
    90fc:	66756211 			; <UNDEFINED> instruction: 0x66756211
    9100:	b67c0100 	ldrbtlt	r0, [ip], -r0, lsl #2
    9104:	02000001 	andeq	r0, r0, #1
    9108:	4e176c91 	mrcmi	12, 0, r6, cr7, cr1, {4}
    910c:	0100003a 	tsteq	r0, sl, lsr r0
    9110:	00035a7c 	andeq	r5, r3, ip, ror sl
    9114:	68910200 	ldmvs	r1, {r9}
    9118:	6e656c14 	mcrvs	12, 3, r6, cr5, cr4, {0}
    911c:	a37d0100 	cmnge	sp, #0, 2
    9120:	02000000 	andeq	r0, r0, #0
    9124:	00167691 	mulseq	r6, r1, r6
    9128:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    912c:	14000000 	strne	r0, [r0], #-0
    9130:	00626c72 	rsbeq	r6, r2, r2, ror ip
    9134:	00988301 	addseq	r8, r8, r1, lsl #6
    9138:	91020000 	mrsls	r0, (UNDEF: 2)
    913c:	06000075 			; <UNDEFINED> instruction: 0x06000075
    9140:	0001b604 	andeq	fp, r1, r4, lsl #12
    9144:	3a281300 	bcc	a0dd4c <_Min_Stack_Size+0xa0db4c>
    9148:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    914c:	000000a3 	andeq	r0, r0, r3, lsr #1
    9150:	08005ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9154:	0000003e 	andeq	r0, r0, lr, lsr r0
    9158:	03b29c01 			; <UNDEFINED> instruction: 0x03b29c01
    915c:	62110000 	andsvs	r0, r1, #0
    9160:	01006675 	tsteq	r0, r5, ror r6
    9164:	0001b68e 	andeq	fp, r1, lr, lsl #13
    9168:	6c910200 	lfmvs	f0, 4, [r1], {0}
    916c:	67736d11 			; <UNDEFINED> instruction: 0x67736d11
    9170:	f88e0100 			; <UNDEFINED> instruction: 0xf88e0100
    9174:	02000002 	andeq	r0, r0, #2
    9178:	70146891 	mulsvc	r4, r1, r8
    917c:	01007274 	tsteq	r0, r4, ror r2
    9180:	0001b68f 	andeq	fp, r1, pc, lsl #13
    9184:	70910200 	addsvc	r0, r1, r0, lsl #4
    9188:	003a7d12 	eorseq	r7, sl, r2, lsl sp
    918c:	a3930100 	orrsge	r0, r3, #0, 2
    9190:	02000000 	andeq	r0, r0, #0
    9194:	13007691 	movwne	r7, #1681	; 0x691
    9198:	00003ac2 	andeq	r3, r0, r2, asr #21
    919c:	00a39c01 	adceq	r9, r3, r1, lsl #24
    91a0:	60340000 	eorsvs	r0, r4, r0
    91a4:	00920800 	addseq	r0, r2, r0, lsl #16
    91a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    91ac:	0000041c 	andeq	r0, r0, ip, lsl r4
    91b0:	66756211 			; <UNDEFINED> instruction: 0x66756211
    91b4:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
    91b8:	02000001 	andeq	r0, r0, #1
    91bc:	d1176c91 			; <UNDEFINED> instruction: 0xd1176c91
    91c0:	0100003a 	tsteq	r0, sl, lsr r0
    91c4:	00035a9c 	muleq	r3, ip, sl
    91c8:	68910200 	ldmvs	r1, {r9}
    91cc:	6e656c14 	mcrvs	12, 3, r6, cr5, cr4, {0}
    91d0:	a39d0100 	orrsge	r0, sp, #0, 2
    91d4:	02000000 	andeq	r0, r0, #0
    91d8:	4e167691 	mrcmi	6, 0, r7, cr6, cr1, {4}
    91dc:	66080060 	strvs	r0, [r8], -r0, rrx
    91e0:	14000000 	strne	r0, [r0], #-0
    91e4:	00626c72 	rsbeq	r6, r2, r2, ror ip
    91e8:	0098a401 	addseq	sl, r8, r1, lsl #8
    91ec:	91020000 	mrsls	r0, (UNDEF: 2)
    91f0:	49761274 	ldmdbmi	r6!, {r2, r4, r5, r6, r9, ip}^
    91f4:	a5010000 	strge	r0, [r1, #-0]
    91f8:	00000098 	muleq	r0, r8, r0
    91fc:	00759102 	rsbseq	r9, r5, r2, lsl #2
    9200:	3b181800 	blcc	60f208 <_Min_Stack_Size+0x60f008>
    9204:	bb010000 	bllt	4920c <_Min_Stack_Size+0x4900c>
    9208:	080060c8 	stmdaeq	r0, {r3, r6, r7, sp, lr}
    920c:	0000007c 	andeq	r0, r0, ip, ror r0
    9210:	044e9c01 	strbeq	r9, [lr], #-3073	; 0xfffff3ff
    9214:	ce170000 	cdpgt	0, 1, cr0, cr7, cr0, {0}
    9218:	01000038 	tsteq	r0, r8, lsr r0
    921c:	00044ebb 			; <UNDEFINED> instruction: 0x00044ebb
    9220:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    9224:	0038e117 	eorseq	lr, r8, r7, lsl r1
    9228:	8dbb0100 	ldfhis	f0, [fp]
    922c:	02000000 	andeq	r0, r0, #0
    9230:	06007091 			; <UNDEFINED> instruction: 0x06007091
    9234:	00017504 	andeq	r7, r1, r4, lsl #10
    9238:	3af81800 	bcc	ffe0f240 <BootRAM+0xed7f9e1>
    923c:	cc010000 	stcgt	0, cr0, [r1], {-0}
    9240:	08006144 	stmdaeq	r0, {r2, r6, r8, sp, lr}
    9244:	0000004a 	andeq	r0, r0, sl, asr #32
    9248:	04949c01 	ldreq	r9, [r4], #3073	; 0xc01
    924c:	ce170000 	cdpgt	0, 1, cr0, cr7, cr0, {0}
    9250:	01000038 	tsteq	r0, r8, lsr r0
    9254:	00044ecc 	andeq	r4, r4, ip, asr #29
    9258:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    925c:	00390617 	eorseq	r0, r9, r7, lsl r6
    9260:	8dcc0100 	stfhie	f0, [ip]
    9264:	02000000 	andeq	r0, r0, #0
    9268:	6a177091 	bvs	5e54b4 <_Min_Stack_Size+0x5e52b4>
    926c:	01000038 	tsteq	r0, r8, lsr r0
    9270:	00008dcc 	andeq	r8, r0, ip, asr #27
    9274:	6c910200 	lfmvs	f0, 4, [r1], {0}
    9278:	3bb91900 	blcc	fee4f680 <BootRAM+0xddbfe21>
    927c:	d3010000 	movwle	r0, #4096	; 0x1000
    9280:	08006190 	stmdaeq	r0, {r4, r7, r8, sp, lr}
    9284:	0000001e 	andeq	r0, r0, lr, lsl r0
    9288:	04c69c01 	strbeq	r9, [r6], #3073	; 0xc01
    928c:	ce170000 	cdpgt	0, 1, cr0, cr7, cr0, {0}
    9290:	01000038 	tsteq	r0, r8, lsr r0
    9294:	00044ed3 	ldrdeq	r4, [r4], -r3
    9298:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    929c:	003bc217 	eorseq	ip, fp, r7, lsl r2
    92a0:	a3d30100 	bicsge	r0, r3, #0, 2
    92a4:	02000000 	andeq	r0, r0, #0
    92a8:	13007291 	movwne	r7, #657	; 0x291
    92ac:	00003ae4 	andeq	r3, r0, r4, ror #21
    92b0:	0021d701 	eoreq	sp, r1, r1, lsl #14
    92b4:	61b00000 	movsvs	r0, r0
    92b8:	03100800 	tsteq	r0, #0, 16
    92bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    92c0:	0000058f 	andeq	r0, r0, pc, lsl #11
    92c4:	0038ce17 	eorseq	ip, r8, r7, lsl lr
    92c8:	4ed70100 	cdpmi	1, 13, cr0, cr7, cr0, {0}
    92cc:	03000004 	movweq	r0, #4
    92d0:	127fa491 	rsbsne	sl, pc, #-1862270976	; 0x91000000
    92d4:	00003e76 	andeq	r3, r0, r6, ror lr
    92d8:	0098d901 	addseq	sp, r8, r1, lsl #18
    92dc:	91020000 	mrsls	r0, (UNDEF: 2)
    92e0:	3a5e1257 	bcc	178dc44 <_Min_Stack_Size+0x178da44>
    92e4:	db010000 	blle	492ec <_Min_Stack_Size+0x490ec>
    92e8:	000000a3 	andeq	r0, r0, r3, lsr #1
    92ec:	124e9102 	subne	r9, lr, #-2147483648	; 0x80000000
    92f0:	00003b62 	andeq	r3, r0, r2, ror #22
    92f4:	00a3dc01 	adceq	sp, r3, r1, lsl #24
    92f8:	91020000 	mrsls	r0, (UNDEF: 2)
    92fc:	3b22124c 	blcc	88dc34 <_Min_Stack_Size+0x88da34>
    9300:	dd010000 	stcle	0, cr0, [r1, #-0]
    9304:	000000a3 	andeq	r0, r0, r3, lsr #1
    9308:	124a9102 	subne	r9, sl, #-2147483648	; 0x80000000
    930c:	00003b6e 	andeq	r3, r0, lr, ror #22
    9310:	00a3de01 	adceq	sp, r3, r1, lsl #28
    9314:	91020000 	mrsls	r0, (UNDEF: 2)
    9318:	3ab71254 	bcc	fedcdc70 <BootRAM+0xdd3e411>
    931c:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    9320:	0000058f 	andeq	r0, r0, pc, lsl #11
    9324:	7fac9103 	svcvc	0x00ac9103
    9328:	003a0112 	eorseq	r0, sl, r2, lsl r1
    932c:	98f70100 	ldmls	r7!, {r8}^
    9330:	02000000 	andeq	r0, r0, #0
    9334:	11125391 			; <UNDEFINED> instruction: 0x11125391
    9338:	0100003a 	tsteq	r0, sl, lsr r0
    933c:	000098f8 	strdeq	r9, [r0], -r8
    9340:	49910200 	ldmibmi	r1, {r9}
    9344:	003a1b12 	eorseq	r1, sl, r2, lsl fp
    9348:	9ffc0100 	svcls	0x00fc0100
    934c:	03000005 	movweq	r0, #5
    9350:	1a064091 	bne	19959c <_Min_Stack_Size+0x19939c>
    9354:	00004976 	andeq	r4, r0, r6, ror r9
    9358:	a3010c01 	movwge	r0, #7169	; 0x1c01
    935c:	02000000 	andeq	r0, r0, #0
    9360:	e41a5091 	ldr	r5, [sl], #-145	; 0xffffff6f
    9364:	01000039 	tsteq	r0, r9, lsr r0
    9368:	05b2010d 	ldreq	r0, [r2, #269]!	; 0x10d
    936c:	91040000 	mrsls	r0, (UNDEF: 4)
    9370:	00067fb8 			; <UNDEFINED> instruction: 0x00067fb8
    9374:	0000980e 	andeq	r9, r0, lr, lsl #16
    9378:	00059f00 	andeq	r9, r5, r0, lsl #30
    937c:	007d0f00 	rsbseq	r0, sp, r0, lsl #30
    9380:	000b0000 	andeq	r0, fp, r0
    9384:	0000980e 	andeq	r9, r0, lr, lsl #16
    9388:	0005b200 	andeq	fp, r5, r0, lsl #4
    938c:	007d1b00 	rsbseq	r1, sp, r0, lsl #22
    9390:	91030000 	mrsls	r0, (UNDEF: 3)
    9394:	0e000644 	cfmadd32eq	mvax2, mvfx0, mvfx0, mvfx4
    9398:	00000098 	muleq	r0, r8, r0
    939c:	000005c6 	andeq	r0, r0, r6, asr #11
    93a0:	00007d1b 	andeq	r7, r0, fp, lsl sp
    93a4:	bc910400 	cfldrslt	mvf0, [r1], {0}
    93a8:	1c00067f 	stcne	6, cr0, [r0], {127}	; 0x7f
    93ac:	00003b52 	andeq	r3, r0, r2, asr fp
    93b0:	21013101 	tstcs	r1, r1, lsl #2
    93b4:	00000000 	andeq	r0, r0, r0
    93b8:	3a000000 	bcc	93c0 <_Min_Stack_Size+0x91c0>
    93bc:	01000000 	mrseq	r0, (UNDEF: 0)
    93c0:	0005ff9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    93c4:	38ce1d00 	stmiacc	lr, {r8, sl, fp, ip}^
    93c8:	31010000 	mrscc	r0, (UNDEF: 1)
    93cc:	00044e01 	andeq	r4, r4, r1, lsl #28
    93d0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    93d4:	0039e41a 	eorseq	lr, r9, sl, lsl r4
    93d8:	01320100 	teqeq	r2, r0, lsl #2
    93dc:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    93e0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    93e4:	0000980e 	andeq	r9, r0, lr, lsl #16
    93e8:	00060f00 	andeq	r0, r6, r0, lsl #30
    93ec:	007d0f00 	rsbseq	r0, sp, r0, lsl #30
    93f0:	00010000 	andeq	r0, r1, r0
    93f4:	003aad1c 	eorseq	sl, sl, ip, lsl sp
    93f8:	013f0100 	teqeq	pc, r0, lsl #2
    93fc:	00000021 	andeq	r0, r0, r1, lsr #32
    9400:	080064c0 	stmdaeq	r0, {r6, r7, sl, sp, lr}
    9404:	0000003a 	andeq	r0, r0, sl, lsr r0
    9408:	06489c01 	strbeq	r9, [r8], -r1, lsl #24
    940c:	ce1d0000 	cdpgt	0, 1, cr0, cr13, cr0, {0}
    9410:	01000038 	tsteq	r0, r8, lsr r0
    9414:	044e013f 	strbeq	r0, [lr], #-319	; 0xfffffec1
    9418:	91020000 	mrsls	r0, (UNDEF: 2)
    941c:	39e41a6c 	stmibcc	r4!, {r2, r3, r5, r6, r9, fp, ip}^
    9420:	40010000 	andmi	r0, r1, r0
    9424:	0005ff01 	andeq	pc, r5, r1, lsl #30
    9428:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    942c:	3bf81c00 	blcc	ffe10434 <BootRAM+0xed80bd5>
    9430:	4d010000 	stcmi	0, cr0, [r1, #-0]
    9434:	00002101 	andeq	r2, r0, r1, lsl #2
    9438:	00000000 	andeq	r0, r0, r0
    943c:	00002e00 	andeq	r2, r0, r0, lsl #28
    9440:	9f9c0100 	svcls	0x009c0100
    9444:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    9448:	000038ce 	andeq	r3, r0, lr, asr #17
    944c:	4e014d01 	cdpmi	13, 0, cr4, cr1, cr1, {0}
    9450:	02000004 	andeq	r0, r0, #4
    9454:	4c1d6c91 	ldcmi	12, cr6, [sp], {145}	; 0x91
    9458:	0100003b 	tsteq	r0, fp, lsr r0
    945c:	008d014d 	addeq	r0, sp, sp, asr #2
    9460:	91020000 	mrsls	r0, (UNDEF: 2)
    9464:	736d1e68 	cmnvc	sp, #104, 28	; 0x680
    9468:	4d010067 	stcmi	0, cr0, [r1, #-412]	; 0xfffffe64
    946c:	00008d01 	andeq	r8, r0, r1, lsl #26
    9470:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    9474:	0039671d 	eorseq	r6, r9, sp, lsl r7
    9478:	014d0100 	mrseq	r0, (UNDEF: 93)
    947c:	00000098 	muleq	r0, r8, r0
    9480:	00639102 	rsbeq	r9, r3, r2, lsl #2
    9484:	003c171c 	eorseq	r1, ip, ip, lsl r7
    9488:	01510100 	cmpeq	r1, r0, lsl #2
    948c:	00000021 	andeq	r0, r0, r1, lsr #32
    9490:	00000000 	andeq	r0, r0, r0
    9494:	000002c4 	andeq	r0, r0, r4, asr #5
    9498:	07a49c01 	streq	r9, [r4, r1, lsl #24]!
    949c:	ce1d0000 	cdpgt	0, 1, cr0, cr13, cr0, {0}
    94a0:	01000038 	tsteq	r0, r8, lsr r0
    94a4:	044e0151 	strbeq	r0, [lr], #-337	; 0xfffffeaf
    94a8:	91030000 	mrsls	r0, (UNDEF: 3)
    94ac:	4c1d7fac 	ldcmi	15, cr7, [sp], {172}	; 0xac
    94b0:	0100003b 	tsteq	r0, fp, lsr r0
    94b4:	008d0151 	addeq	r0, sp, r1, asr r1
    94b8:	91030000 	mrsls	r0, (UNDEF: 3)
    94bc:	6d1e7fa8 	ldcvs	15, cr7, [lr, #-672]	; 0xfffffd60
    94c0:	01006773 	tsteq	r0, r3, ror r7
    94c4:	008d0151 	addeq	r0, sp, r1, asr r1
    94c8:	91030000 	mrsls	r0, (UNDEF: 3)
    94cc:	671d7fa4 	ldrvs	r7, [sp, -r4, lsr #31]
    94d0:	01000039 	tsteq	r0, r9, lsr r0
    94d4:	00980151 	addseq	r0, r8, r1, asr r1
    94d8:	91030000 	mrsls	r0, (UNDEF: 3)
    94dc:	711e7fa3 	tstvc	lr, r3, lsr #31
    94e0:	0100736f 	tsteq	r0, pc, ror #6
    94e4:	00980151 	addseq	r0, r8, r1, asr r1
    94e8:	91020000 	mrsls	r0, (UNDEF: 2)
    94ec:	3aa21d00 	bcc	fe8908f4 <BootRAM+0xd801095>
    94f0:	51010000 	mrspl	r0, (UNDEF: 1)
    94f4:	0007a401 	andeq	sl, r7, r1, lsl #8
    94f8:	04910200 	ldreq	r0, [r1], #512	; 0x200
    94fc:	003b7a1a 	eorseq	r7, fp, sl, lsl sl
    9500:	01520100 	cmpeq	r2, r0, lsl #2
    9504:	000000a3 	andeq	r0, r0, r3, lsr #1
    9508:	1a529102 	bne	14ad918 <_Min_Stack_Size+0x14ad718>
    950c:	00003af1 	strdeq	r3, [r0], -r1
    9510:	a3015301 	movwge	r5, #4865	; 0x1301
    9514:	02000000 	andeq	r0, r0, #0
    9518:	991a5091 	ldmdbls	sl, {r0, r4, r7, ip, lr}
    951c:	0100003b 	tsteq	r0, fp, lsr r0
    9520:	00980155 	addseq	r0, r8, r5, asr r1
    9524:	91020000 	mrsls	r0, (UNDEF: 2)
    9528:	3a8f1a57 	bcc	fe3cfe8c <BootRAM+0xd34062d>
    952c:	56010000 	strpl	r0, [r1], -r0
    9530:	00009801 	andeq	r9, r0, r1, lsl #16
    9534:	56910200 	ldrpl	r0, [r1], r0, lsl #4
    9538:	003ab71a 	eorseq	fp, sl, sl, lsl r7
    953c:	01610100 	cmneq	r1, r0, lsl #2
    9540:	000007aa 	andeq	r0, r0, sl, lsr #15
    9544:	06489103 	strbeq	r9, [r8], -r3, lsl #2
    9548:	003a011a 	eorseq	r0, sl, sl, lsl r1
    954c:	01730100 	cmneq	r3, r0, lsl #2
    9550:	00000098 	muleq	r0, r8, r0
    9554:	1a559102 	bne	156d964 <_Min_Stack_Size+0x156d764>
    9558:	00003a11 	andeq	r3, r0, r1, lsl sl
    955c:	a3017401 	movwge	r7, #5121	; 0x1401
    9560:	02000000 	andeq	r0, r0, #0
    9564:	1b1a4691 	blne	69afb0 <_Min_Stack_Size+0x69adb0>
    9568:	0100003a 	tsteq	r0, sl, lsr r0
    956c:	07bd0178 			; <UNDEFINED> instruction: 0x07bd0178
    9570:	91040000 	mrsls	r0, (UNDEF: 4)
    9574:	1a067fbc 	bne	1a946c <_Min_Stack_Size+0x1a926c>
    9578:	000039e4 	andeq	r3, r0, r4, ror #19
    957c:	d0018a01 	andle	r8, r1, r1, lsl #20
    9580:	04000007 	streq	r0, [r0], #-7
    9584:	067fb491 			; <UNDEFINED> instruction: 0x067fb491
    9588:	a3040600 	movwge	r0, #17920	; 0x4600
    958c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    9590:	00000098 	muleq	r0, r8, r0
    9594:	000007bd 			; <UNDEFINED> instruction: 0x000007bd
    9598:	00007d1b 	andeq	r7, r0, fp, lsl sp
    959c:	4c910300 	ldcmi	3, cr0, [r1], {0}
    95a0:	980e0006 	stmdals	lr, {r1, r2}
    95a4:	d0000000 	andle	r0, r0, r0
    95a8:	1b000007 	blne	95cc <_Min_Stack_Size+0x93cc>
    95ac:	0000007d 	andeq	r0, r0, sp, ror r0
    95b0:	06409103 	strbeq	r9, [r0], -r3, lsl #2
    95b4:	00980e00 	addseq	r0, r8, r0, lsl #28
    95b8:	07e40000 	strbeq	r0, [r4, r0]!
    95bc:	7d1b0000 	ldcvc	0, cr0, [fp, #-0]
    95c0:	04000000 	streq	r0, [r0], #-0
    95c4:	067fb891 			; <UNDEFINED> instruction: 0x067fb891
    95c8:	3b8d1c00 	blcc	fe3505d0 <BootRAM+0xd2c0d71>
    95cc:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    95d0:	00002101 	andeq	r2, r0, r1, lsl #2
    95d4:	00000000 	andeq	r0, r0, r0
    95d8:	00004e00 	andeq	r4, r0, r0, lsl #28
    95dc:	2c9c0100 	ldfcss	f0, [ip], {0}
    95e0:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    95e4:	000038ce 	andeq	r3, r0, lr, asr #17
    95e8:	4e019801 	cdpmi	8, 0, cr9, cr1, cr1, {0}
    95ec:	02000004 	andeq	r0, r0, #4
    95f0:	a21d6c91 	andsge	r6, sp, #37120	; 0x9100
    95f4:	0100003a 	tsteq	r0, sl, lsr r0
    95f8:	00a30198 	umlaleq	r0, r3, r8, r1
    95fc:	91020000 	mrsls	r0, (UNDEF: 2)
    9600:	39e41a6a 	stmibcc	r4!, {r1, r3, r5, r6, r9, fp, ip}^
    9604:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    9608:	00082c01 	andeq	r2, r8, r1, lsl #24
    960c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    9610:	00980e00 	addseq	r0, r8, r0, lsl #28
    9614:	083c0000 	ldmdaeq	ip!, {}	; <UNPREDICTABLE>
    9618:	7d0f0000 	stcvc	0, cr0, [pc, #-0]	; 9620 <_Min_Stack_Size+0x9420>
    961c:	03000000 	movweq	r0, #0
    9620:	3b2e1c00 	blcc	b90628 <_Min_Stack_Size+0xb90428>
    9624:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    9628:	00002101 	andeq	r2, r0, r1, lsl #2
    962c:	0064fc00 	rsbeq	pc, r4, r0, lsl #24
    9630:	00018a08 	andeq	r8, r1, r8, lsl #20
    9634:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    9638:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    963c:	000038ce 	andeq	r3, r0, lr, asr #17
    9640:	4e01a801 	cdpmi	8, 0, cr10, cr1, cr1, {0}
    9644:	03000004 	movweq	r0, #4
    9648:	1d7fb491 	cfldrdne	mvd11, [pc, #-580]!	; 940c <_Min_Stack_Size+0x920c>
    964c:	00003b4c 	andeq	r3, r0, ip, asr #22
    9650:	8d01a801 	stchi	8, cr10, [r1, #-4]
    9654:	03000000 	movweq	r0, #0
    9658:	1d7fb091 	ldclne	0, cr11, [pc, #-580]!	; 941c <_Min_Stack_Size+0x921c>
    965c:	00003aa2 	andeq	r3, r0, r2, lsr #21
    9660:	a401a801 	strge	sl, [r1], #-2049	; 0xfffff7ff
    9664:	03000007 	movweq	r0, #7
    9668:	1a7fac91 	bne	1ff48b4 <_Min_Stack_Size+0x1ff46b4>
    966c:	00003b7a 	andeq	r3, r0, sl, ror fp
    9670:	a301a901 	movwge	sl, #6401	; 0x1901
    9674:	02000000 	andeq	r0, r0, #0
    9678:	b71a5691 			; <UNDEFINED> instruction: 0xb71a5691
    967c:	0100003a 	tsteq	r0, sl, lsr r0
    9680:	05ff01ac 	ldrbeq	r0, [pc, #428]!	; 9834 <_Min_Stack_Size+0x9634>
    9684:	91020000 	mrsls	r0, (UNDEF: 2)
    9688:	3a851a40 	bcc	fe14ff90 <BootRAM+0xd0c0731>
    968c:	b5010000 	strlt	r0, [r1, #-0]
    9690:	0008d501 	andeq	sp, r8, r1, lsl #10
    9694:	4c910300 	ldcmi	3, cr0, [r1], {0}
    9698:	3a1b1a06 	bcc	6cfeb8 <_Min_Stack_Size+0x6cfcb8>
    969c:	bc010000 	stclt	0, cr0, [r1], {-0}
    96a0:	0005ff01 	andeq	pc, r5, r1, lsl #30
    96a4:	bc910300 	ldclt	3, cr0, [r1], {0}
    96a8:	39e41a7f 	stmibcc	r4!, {r0, r1, r2, r3, r4, r5, r6, r9, fp, ip}^
    96ac:	c1010000 	mrsgt	r0, (UNDEF: 1)
    96b0:	0008e801 	andeq	lr, r8, r1, lsl #16
    96b4:	44910300 	ldrmi	r0, [r1], #768	; 0x300
    96b8:	980e0006 	stmdals	lr, {r1, r2}
    96bc:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    96c0:	1b000008 	blne	96e8 <_Min_Stack_Size+0x94e8>
    96c4:	0000007d 	andeq	r0, r0, sp, ror r0
    96c8:	06509103 	ldrbeq	r9, [r0], -r3, lsl #2
    96cc:	00980e00 	addseq	r0, r8, r0, lsl #28
    96d0:	08fb0000 	ldmeq	fp!, {}^	; <UNPREDICTABLE>
    96d4:	7d1b0000 	ldcvc	0, cr0, [fp, #-0]
    96d8:	03000000 	movweq	r0, #0
    96dc:	00064891 	muleq	r6, r1, r8
    96e0:	003b071c 	eorseq	r0, fp, ip, lsl r7
    96e4:	01cf0100 	biceq	r0, pc, r0, lsl #2
    96e8:	00000021 	andeq	r0, r0, r1, lsr #32
    96ec:	00000000 	andeq	r0, r0, r0
    96f0:	0000018a 	andeq	r0, r0, sl, lsl #3
    96f4:	09949c01 	ldmibeq	r4, {r0, sl, fp, ip, pc}
    96f8:	ce1d0000 	cdpgt	0, 1, cr0, cr13, cr0, {0}
    96fc:	01000038 	tsteq	r0, r8, lsr r0
    9700:	044e01cf 	strbeq	r0, [lr], #-463	; 0xfffffe31
    9704:	91030000 	mrsls	r0, (UNDEF: 3)
    9708:	4c1d7fb4 	ldcmi	15, cr7, [sp], {180}	; 0xb4
    970c:	0100003b 	tsteq	r0, fp, lsr r0
    9710:	008d01cf 	addeq	r0, sp, pc, asr #3
    9714:	91030000 	mrsls	r0, (UNDEF: 3)
    9718:	a21d7fb0 	andsge	r7, sp, #176, 30	; 0x2c0
    971c:	0100003a 	tsteq	r0, sl, lsr r0
    9720:	07a401cf 	streq	r0, [r4, pc, asr #3]!
    9724:	91030000 	mrsls	r0, (UNDEF: 3)
    9728:	7a1a7fac 	bvc	6a95e0 <_Min_Stack_Size+0x6a93e0>
    972c:	0100003b 	tsteq	r0, fp, lsr r0
    9730:	00a301d0 	ldrdeq	r0, [r3], r0	; <UNPREDICTABLE>
    9734:	91020000 	mrsls	r0, (UNDEF: 2)
    9738:	3ab71a56 	bcc	fedd0098 <BootRAM+0xdd40839>
    973c:	d3010000 	movwle	r0, #4096	; 0x1000
    9740:	0005ff01 	andeq	pc, r5, r1, lsl #30
    9744:	40910200 	addsmi	r0, r1, r0, lsl #4
    9748:	003a851a 	eorseq	r8, sl, sl, lsl r5
    974c:	01dc0100 	bicseq	r0, ip, r0, lsl #2
    9750:	00000994 	muleq	r0, r4, r9
    9754:	064c9103 	strbeq	r9, [ip], -r3, lsl #2
    9758:	003a1b1a 	eorseq	r1, sl, sl, lsl fp
    975c:	01e30100 	mvneq	r0, r0, lsl #2
    9760:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    9764:	7fbc9103 	svcvc	0x00bc9103
    9768:	0039e41a 	eorseq	lr, r9, sl, lsl r4
    976c:	01e80100 	mvneq	r0, r0, lsl #2
    9770:	000009a7 	andeq	r0, r0, r7, lsr #19
    9774:	06449103 	strbeq	r9, [r4], -r3, lsl #2
    9778:	00980e00 	addseq	r0, r8, r0, lsl #28
    977c:	09a70000 	stmibeq	r7!, {}	; <UNPREDICTABLE>
    9780:	7d1b0000 	ldcvc	0, cr0, [fp, #-0]
    9784:	03000000 	movweq	r0, #0
    9788:	00065091 	muleq	r6, r1, r0
    978c:	0000981f 	andeq	r9, r0, pc, lsl r8
    9790:	007d1b00 	rsbseq	r1, sp, r0, lsl #22
    9794:	91030000 	mrsls	r0, (UNDEF: 3)
    9798:	00000648 	andeq	r0, r0, r8, asr #12
    979c:	00000100 	andeq	r0, r0, r0, lsl #2
    97a0:	1df50004 	ldclne	0, cr0, [r5, #16]!
    97a4:	01040000 	mrseq	r0, (UNDEF: 4)
    97a8:	00003ce0 	andeq	r3, r0, r0, ror #25
    97ac:	003ca801 	eorseq	sl, ip, r1, lsl #16
    97b0:	003c2d00 	eorseq	r2, ip, r0, lsl #26
    97b4:	000bb800 	andeq	fp, fp, r0, lsl #16
    97b8:	00000000 	andeq	r0, r0, r0
    97bc:	00437500 	subeq	r7, r3, r0, lsl #10
    97c0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    97c4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    97c8:	00450803 	subeq	r0, r5, r3, lsl #16
    97cc:	37d40200 	ldrbcc	r0, [r4, r0, lsl #4]
    97d0:	04000000 	streq	r0, [r0], #-0
    97d4:	00ff0704 	rscseq	r0, pc, r4, lsl #14
    97d8:	02040000 	andeq	r0, r4, #0
    97dc:	00012307 	andeq	r2, r1, r7, lsl #6
    97e0:	06010400 	streq	r0, [r1], -r0, lsl #8
    97e4:	000000c3 	andeq	r0, r0, r3, asr #1
    97e8:	c1080104 	tstgt	r8, r4, lsl #2
    97ec:	04000000 	streq	r0, [r0], #-0
    97f0:	00510502 	subseq	r0, r1, r2, lsl #10
    97f4:	04040000 	streq	r0, [r4], #-0
    97f8:	00006d05 	andeq	r6, r0, r5, lsl #26
    97fc:	07040400 	streq	r0, [r4, -r0, lsl #8]
    9800:	000000fa 	strdeq	r0, [r0], -sl
    9804:	68050804 	stmdavs	r5, {r2, fp}
    9808:	04000000 	streq	r0, [r0], #-0
    980c:	00f50708 	rscseq	r0, r5, r8, lsl #14
    9810:	04040000 	streq	r0, [r4], #-0
    9814:	00001507 	andeq	r1, r0, r7, lsl #10
    9818:	06040500 	streq	r0, [r4], -r0, lsl #10
    981c:	00008504 	andeq	r8, r0, r4, lsl #10
    9820:	08010400 	stmdaeq	r1, {sl}
    9824:	000000ca 	andeq	r0, r0, sl, asr #1
    9828:	003ca107 	eorseq	sl, ip, r7, lsl #2
    982c:	7d170300 	ldcvc	3, cr0, [r7, #-0]
    9830:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    9834:	16080066 	strne	r0, [r8], -r6, rrx
    9838:	01000000 	mrseq	r0, (UNDEF: 0)
    983c:	0000fc9c 	muleq	r0, ip, ip
    9840:	3c9c0800 	ldccc	8, cr0, [ip], {0}
    9844:	36010000 	strcc	r0, [r1], -r0
    9848:	0000007d 	andeq	r0, r0, sp, ror r0
    984c:	97095001 	strls	r5, [r9, -r1]
    9850:	0100003c 	tsteq	r0, ip, lsr r0
    9854:	0000fc36 	andeq	pc, r0, r6, lsr ip	; <UNPREDICTABLE>
    9858:	00000000 	andeq	r0, r0, r0
    985c:	3cd60900 	ldclcc	9, cr0, [r6], {0}
    9860:	36010000 	strcc	r0, [r1], -r0
    9864:	0000002c 	andeq	r0, r0, ip, lsr #32
    9868:	00000021 	andeq	r0, r0, r1, lsr #32
    986c:	7473640a 	ldrbtvc	r6, [r3], #-1034	; 0xfffffbf6
    9870:	7f3c0100 	svcvc	0x003c0100
    9874:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
    9878:	0a000000 	beq	9880 <_Min_Stack_Size+0x9680>
    987c:	00637273 	rsbeq	r7, r3, r3, ror r2
    9880:	007f3d01 	rsbseq	r3, pc, r1, lsl #26
    9884:	005c0000 	subseq	r0, ip, r0
    9888:	db0b0000 	blle	2c9890 <_Min_Stack_Size+0x2c9690>
    988c:	0100003c 	tsteq	r0, ip, lsr r0
    9890:	00007d3f 	andeq	r7, r0, pc, lsr sp
    9894:	00500100 	subseq	r0, r0, r0, lsl #2
    9898:	01020406 	tsteq	r2, r6, lsl #8
    989c:	000c0000 	andeq	r0, ip, r0
    98a0:	000000cf 	andeq	r0, r0, pc, asr #1
    98a4:	1e990004 	cdpne	0, 9, cr0, cr9, cr4, {0}
    98a8:	01040000 	mrseq	r0, (UNDEF: 4)
    98ac:	00003ce0 	andeq	r3, r0, r0, ror #25
    98b0:	003d7a01 	eorseq	r7, sp, r1, lsl #20
    98b4:	003c2d00 	eorseq	r2, ip, r0, lsl #26
    98b8:	000bc800 	andeq	ip, fp, r0, lsl #16
    98bc:	00000000 	andeq	r0, r0, r0
    98c0:	00446200 	subeq	r6, r4, r0, lsl #4
    98c4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    98c8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    98cc:	00450803 	subeq	r0, r5, r3, lsl #16
    98d0:	37d40200 	ldrbcc	r0, [r4, r0, lsl #4]
    98d4:	04000000 	streq	r0, [r0], #-0
    98d8:	00ff0704 	rscseq	r0, pc, r4, lsl #14
    98dc:	02040000 	andeq	r0, r4, #0
    98e0:	00012307 	andeq	r2, r1, r7, lsl #6
    98e4:	06010400 	streq	r0, [r1], -r0, lsl #8
    98e8:	000000c3 	andeq	r0, r0, r3, asr #1
    98ec:	c1080104 	tstgt	r8, r4, lsl #2
    98f0:	04000000 	streq	r0, [r0], #-0
    98f4:	00510502 	subseq	r0, r1, r2, lsl #10
    98f8:	04040000 	streq	r0, [r4], #-0
    98fc:	00006d05 	andeq	r6, r0, r5, lsl #26
    9900:	07040400 	streq	r0, [r4, -r0, lsl #8]
    9904:	000000fa 	strdeq	r0, [r0], -sl
    9908:	68050804 	stmdavs	r5, {r2, fp}
    990c:	04000000 	streq	r0, [r0], #-0
    9910:	00f50708 	rscseq	r0, r5, r8, lsl #14
    9914:	04040000 	streq	r0, [r4], #-0
    9918:	00001507 	andeq	r1, r0, r7, lsl #10
    991c:	06040500 	streq	r0, [r4], -r0, lsl #10
    9920:	00008504 	andeq	r8, r0, r4, lsl #10
    9924:	08010400 	stmdaeq	r1, {sl}
    9928:	000000ca 	andeq	r0, r0, sl, asr #1
    992c:	003da807 	eorseq	sl, sp, r7, lsl #16
    9930:	7d190300 	ldcvc	3, cr0, [r9, #-0]
    9934:	e4000000 	str	r0, [r0], #-0
    9938:	10080066 	andne	r0, r8, r6, rrx
    993c:	01000000 	mrseq	r0, (UNDEF: 0)
    9940:	006d089c 	mlseq	sp, ip, r8, r0
    9944:	007d2d01 	rsbseq	r2, sp, r1, lsl #26
    9948:	50010000 	andpl	r0, r1, r0
    994c:	01006308 	tsteq	r0, r8, lsl #6
    9950:	0000252d 	andeq	r2, r0, sp, lsr #10
    9954:	09510100 	ldmdbeq	r1, {r8}^
    9958:	2d01006e 	stccs	0, cr0, [r1, #-440]	; 0xfffffe48
    995c:	0000002c 	andeq	r0, r0, ip, lsr #32
    9960:	00000087 	andeq	r0, r0, r7, lsl #1
    9964:	0100730a 	tsteq	r0, sl, lsl #6
    9968:	00007f32 	andeq	r7, r0, r2, lsr pc
    996c:	00009a00 	andeq	r9, r0, r0, lsl #20
    9970:	0d000000 	stceq	0, cr0, [r0, #-0]
    9974:	04000008 	streq	r0, [r0], #-8
    9978:	001f2700 	andseq	r2, pc, r0, lsl #14
    997c:	e0010400 	and	r0, r1, r0, lsl #8
    9980:	0100003c 	tsteq	r0, ip, lsr r0
    9984:	00003f0b 	andeq	r3, r0, fp, lsl #30
    9988:	00003dca 	andeq	r3, r0, sl, asr #27
    998c:	00000c08 	andeq	r0, r0, r8, lsl #24
    9990:	00000000 	andeq	r0, r0, r0
    9994:	00004550 	andeq	r4, r0, r0, asr r5
    9998:	00450802 	subeq	r0, r5, r2, lsl #16
    999c:	30d40200 	sbcscc	r0, r4, r0, lsl #4
    99a0:	03000000 	movweq	r0, #0
    99a4:	00ff0704 	rscseq	r0, pc, r4, lsl #14
    99a8:	02030000 	andeq	r0, r3, #0
    99ac:	00012307 	andeq	r2, r1, r7, lsl #6
    99b0:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    99b4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    99b8:	c3060103 	movwgt	r0, #24835	; 0x6103
    99bc:	03000000 	movweq	r0, #0
    99c0:	00c10801 	sbceq	r0, r1, r1, lsl #16
    99c4:	02030000 	andeq	r0, r3, #0
    99c8:	00005105 	andeq	r5, r0, r5, lsl #2
    99cc:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    99d0:	0000006d 	andeq	r0, r0, sp, rrx
    99d4:	fa070403 	blx	1ca9e8 <_Min_Stack_Size+0x1ca7e8>
    99d8:	03000000 	movweq	r0, #0
    99dc:	00680508 	rsbeq	r0, r8, r8, lsl #10
    99e0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    99e4:	0000f507 	andeq	pc, r0, r7, lsl #10
    99e8:	3ece0200 	cdpcc	2, 12, cr0, cr14, cr0, {0}
    99ec:	07030000 	streq	r0, [r3, -r0]
    99f0:	0000003e 	andeq	r0, r0, lr, lsr r0
    99f4:	003e3402 	eorseq	r3, lr, r2, lsl #8
    99f8:	5a100400 	bpl	40aa00 <_Min_Stack_Size+0x40a800>
    99fc:	02000000 	andeq	r0, r0, #0
    9a00:	00003f89 	andeq	r3, r0, r9, lsl #31
    9a04:	005a2704 	subseq	r2, sl, r4, lsl #14
    9a08:	3a050000 	bcc	149a10 <_Min_Stack_Size+0x149810>
    9a0c:	02000040 	andeq	r0, r0, #64	; 0x40
    9a10:	00300161 	eorseq	r0, r0, r1, ror #2
    9a14:	04060000 	streq	r0, [r6], #-0
    9a18:	00c24a04 	sbceq	r4, r2, r4, lsl #20
    9a1c:	3b070000 	blcc	1c9a24 <_Min_Stack_Size+0x1c9824>
    9a20:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
    9a24:	0000974c 	andeq	r9, r0, ip, asr #14
    9a28:	3fc40700 	svccc	0x00c40700
    9a2c:	4d040000 	stcmi	0, cr0, [r4, #-0]
    9a30:	000000c2 	andeq	r0, r0, r2, asr #1
    9a34:	004c0800 	subeq	r0, ip, r0, lsl #16
    9a38:	00d20000 	sbcseq	r0, r2, r0
    9a3c:	d2090000 	andle	r0, r9, #0
    9a40:	03000000 	movweq	r0, #0
    9a44:	07040300 	streq	r0, [r4, -r0, lsl #6]
    9a48:	00000015 	andeq	r0, r0, r5, lsl r0
    9a4c:	4704080a 	strmi	r0, [r4, -sl, lsl #16]
    9a50:	000000fa 	strdeq	r0, [r0], -sl
    9a54:	003e8b0b 	eorseq	r8, lr, fp, lsl #22
    9a58:	3e490400 	cdpcc	4, 4, cr0, cr9, cr0, {0}
    9a5c:	00000000 	andeq	r0, r0, r0
    9a60:	003e410b 	eorseq	r4, lr, fp, lsl #2
    9a64:	a34e0400 	movtge	r0, #58368	; 0xe400
    9a68:	04000000 	streq	r0, [r0], #-0
    9a6c:	406b0200 	rsbmi	r0, fp, r0, lsl #4
    9a70:	4f040000 	svcmi	0x00040000
    9a74:	000000d9 	ldrdeq	r0, [r0], -r9
    9a78:	003fa202 	eorseq	sl, pc, r2, lsl #4
    9a7c:	76530400 	ldrbvc	r0, [r3], -r0, lsl #8
    9a80:	0c000000 	stceq	0, cr0, [r0], {-0}
    9a84:	40a80204 	adcmi	r0, r8, r4, lsl #4
    9a88:	16050000 	strne	r0, [r5], -r0
    9a8c:	00000061 	andeq	r0, r0, r1, rrx
    9a90:	0040760d 	subeq	r7, r0, sp, lsl #12
    9a94:	2d051800 	stccs	8, cr1, [r5, #-0]
    9a98:	00000170 	andeq	r0, r0, r0, ror r1
    9a9c:	0041050b 	subeq	r0, r1, fp, lsl #10
    9aa0:	702f0500 	eorvc	r0, pc, r0, lsl #10
    9aa4:	00000001 	andeq	r0, r0, r1
    9aa8:	006b5f0e 	rsbeq	r5, fp, lr, lsl #30
    9aac:	003e3005 	eorseq	r3, lr, r5
    9ab0:	0b040000 	bleq	109ab8 <_Min_Stack_Size+0x1098b8>
    9ab4:	0000407e 	andeq	r4, r0, lr, ror r0
    9ab8:	003e3005 	eorseq	r3, lr, r5
    9abc:	0b080000 	bleq	209ac4 <_Min_Stack_Size+0x2098c4>
    9ac0:	000040fa 	strdeq	r4, [r0], -sl
    9ac4:	003e3005 	eorseq	r3, lr, r5
    9ac8:	0b0c0000 	bleq	309ad0 <_Min_Stack_Size+0x3098d0>
    9acc:	0000401b 	andeq	r4, r0, fp, lsl r0
    9ad0:	003e3005 	eorseq	r3, lr, r5
    9ad4:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    9ad8:	0500785f 	streq	r7, [r0, #-2143]	; 0xfffff7a1
    9adc:	00017631 	andeq	r7, r1, r1, lsr r6
    9ae0:	0f001400 	svceq	0x00001400
    9ae4:	00011d04 	andeq	r1, r1, r4, lsl #26
    9ae8:	01120800 	tsteq	r2, r0, lsl #16
    9aec:	01860000 	orreq	r0, r6, r0
    9af0:	d2090000 	andle	r0, r9, #0
    9af4:	00000000 	andeq	r0, r0, r0
    9af8:	40270d00 	eormi	r0, r7, r0, lsl #26
    9afc:	05240000 	streq	r0, [r4, #-0]!
    9b00:	0001ff35 	andeq	pc, r1, r5, lsr pc	; <UNPREDICTABLE>
    9b04:	3fb10b00 	svccc	0x00b10b00
    9b08:	37050000 	strcc	r0, [r5, -r0]
    9b0c:	0000003e 	andeq	r0, r0, lr, lsr r0
    9b10:	3f020b00 	svccc	0x00020b00
    9b14:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    9b18:	0000003e 	andeq	r0, r0, lr, lsr r0
    9b1c:	3fba0b04 	svccc	0x00ba0b04
    9b20:	39050000 	stmdbcc	r5, {}	; <UNPREDICTABLE>
    9b24:	0000003e 	andeq	r0, r0, lr, lsr r0
    9b28:	3e930b08 	vfnmscc.f64	d0, d3, d8
    9b2c:	3a050000 	bcc	149b34 <_Min_Stack_Size+0x149934>
    9b30:	0000003e 	andeq	r0, r0, lr, lsr r0
    9b34:	40be0b0c 	adcsmi	r0, lr, ip, lsl #22
    9b38:	3b050000 	blcc	149b40 <_Min_Stack_Size+0x149940>
    9b3c:	0000003e 	andeq	r0, r0, lr, lsr r0
    9b40:	40860b10 	addmi	r0, r6, r0, lsl fp
    9b44:	3c050000 	stccc	0, cr0, [r5], {-0}
    9b48:	0000003e 	andeq	r0, r0, lr, lsr r0
    9b4c:	3f4a0b14 	svccc	0x004a0b14
    9b50:	3d050000 	stccc	0, cr0, [r5, #-0]
    9b54:	0000003e 	andeq	r0, r0, lr, lsr r0
    9b58:	409e0b18 	addsmi	r0, lr, r8, lsl fp
    9b5c:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    9b60:	0000003e 	andeq	r0, r0, lr, lsr r0
    9b64:	3f6e0b1c 	svccc	0x006e0b1c
    9b68:	3f050000 	svccc	0x00050000
    9b6c:	0000003e 	andeq	r0, r0, lr, lsr r0
    9b70:	490d0020 	stmdbmi	sp, {r5}
    9b74:	0800003e 	stmdaeq	r0, {r1, r2, r3, r4, r5}
    9b78:	02247305 	eoreq	r7, r4, #335544320	; 0x14000000
    9b7c:	a70b0000 	strge	r0, [fp, -r0]
    9b80:	05000033 	streq	r0, [r0, #-51]	; 0xffffffcd
    9b84:	00022474 	andeq	r2, r2, r4, ror r4
    9b88:	c90b0000 	stmdbgt	fp, {}	; <UNPREDICTABLE>
    9b8c:	05000045 	streq	r0, [r0, #-69]	; 0xffffffbb
    9b90:	00003e75 	andeq	r3, r0, r5, ror lr
    9b94:	0f000400 	svceq	0x00000400
    9b98:	00004c04 	andeq	r4, r0, r4, lsl #24
    9b9c:	41101000 	tstmi	r0, r0
    9ba0:	05600000 	strbeq	r0, [r0, #-0]!
    9ba4:	03560172 	cmpeq	r6, #-2147483620	; 0x8000001c
    9ba8:	ee110000 	cdp	0, 1, cr0, cr1, cr0, {0}
    9bac:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    9bb0:	003e0176 	eorseq	r0, lr, r6, ror r1
    9bb4:	11000000 	mrsne	r0, (UNDEF: 0)
    9bb8:	00004450 	andeq	r4, r0, r0, asr r4
    9bbc:	8b017b05 	blhi	687d8 <_Min_Stack_Size+0x685d8>
    9bc0:	04000005 	streq	r0, [r0], #-5
    9bc4:	0044a011 	subeq	sl, r4, r1, lsl r0
    9bc8:	017b0500 	cmneq	fp, r0, lsl #10
    9bcc:	0000058b 	andeq	r0, r0, fp, lsl #11
    9bd0:	43d61108 	bicsmi	r1, r6, #8, 2
    9bd4:	7b050000 	blvc	149bdc <_Min_Stack_Size+0x1499dc>
    9bd8:	00058b01 	andeq	r8, r5, r1, lsl #22
    9bdc:	d0110c00 	andsle	r0, r1, r0, lsl #24
    9be0:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    9be4:	003e017d 	eorseq	r0, lr, sp, ror r1
    9be8:	11100000 	tstne	r0, r0
    9bec:	00004136 	andeq	r4, r0, r6, lsr r1
    9bf0:	a4017f05 	strge	r7, [r1], #-3845	; 0xfffff0fb
    9bf4:	14000004 	strne	r0, [r0], #-4
    9bf8:	003f7e11 	eorseq	r7, pc, r1, lsl lr	; <UNPREDICTABLE>
    9bfc:	01810500 	orreq	r0, r1, r0, lsl #10
    9c00:	0000003e 	andeq	r0, r0, lr, lsr r0
    9c04:	404f1118 	submi	r1, pc, r8, lsl r1	; <UNPREDICTABLE>
    9c08:	83050000 	movwhi	r0, #20480	; 0x5000
    9c0c:	00003e01 	andeq	r3, r0, r1, lsl #28
    9c10:	17111c00 	ldrne	r1, [r1, -r0, lsl #24]
    9c14:	05000041 	streq	r0, [r0, #-65]	; 0xffffffbf
    9c18:	04d50184 	ldrbeq	r0, [r5], #388	; 0x184
    9c1c:	12200000 	eorne	r0, r0, #0
    9c20:	00706d5f 	rsbseq	r6, r0, pc, asr sp
    9c24:	d8018605 	stmdale	r1, {r0, r2, r9, sl, pc}
    9c28:	24000006 	strcs	r0, [r0], #-6
    9c2c:	00406111 	subeq	r6, r0, r1, lsl r1
    9c30:	01880500 	orreq	r0, r8, r0, lsl #10
    9c34:	000006e9 	andeq	r0, r0, r9, ror #13
    9c38:	400c1128 	andmi	r1, ip, r8, lsr #2
    9c3c:	8a050000 	bhi	149c44 <_Min_Stack_Size+0x149a44>
    9c40:	00003e01 	andeq	r3, r0, r1, lsl #28
    9c44:	c0112c00 	andsgt	r2, r1, r0, lsl #24
    9c48:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    9c4c:	003e018d 	eorseq	r0, lr, sp, lsl #3
    9c50:	11300000 	teqne	r0, r0
    9c54:	00003ff6 	strdeq	r3, [r0], -r6
    9c58:	a4018e05 	strge	r8, [r1], #-3589	; 0xfffff1fb
    9c5c:	34000004 	strcc	r0, [r0], #-4
    9c60:	003eae11 	eorseq	sl, lr, r1, lsl lr
    9c64:	01900500 	orrseq	r0, r0, r0, lsl #10
    9c68:	000006ef 	andeq	r0, r0, pc, ror #13
    9c6c:	3e7c1138 	mrccc	1, 3, r1, cr12, cr8, {1}
    9c70:	91050000 	mrsls	r0, (UNDEF: 5)
    9c74:	0006f501 	andeq	pc, r6, r1, lsl #10
    9c78:	54113c00 	ldrpl	r3, [r1], #-3072	; 0xfffff400
    9c7c:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    9c80:	04a40192 	strteq	r0, [r4], #402	; 0x192
    9c84:	11400000 	mrsne	r0, (UNDEF: 64)
    9c88:	00003e6b 	andeq	r3, r0, fp, ror #28
    9c8c:	06019505 	streq	r9, [r1], -r5, lsl #10
    9c90:	44000007 	strmi	r0, [r0], #-7
    9c94:	003fd111 	eorseq	sp, pc, r1, lsl r1	; <UNPREDICTABLE>
    9c98:	019d0500 	orrseq	r0, sp, r0, lsl #10
    9c9c:	00000550 	andeq	r0, r0, r0, asr r5
    9ca0:	3f791148 	svccc	0x00791148
    9ca4:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
    9ca8:	00058b01 	andeq	r8, r5, r1, lsl #22
    9cac:	cb115400 	blgt	45ecb4 <_Min_Stack_Size+0x45eab4>
    9cb0:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    9cb4:	0712019f 			; <UNDEFINED> instruction: 0x0712019f
    9cb8:	11580000 	cmpne	r8, r0
    9cbc:	00003e5f 	andeq	r3, r0, pc, asr lr
    9cc0:	a401a005 	strge	sl, [r1], #-5
    9cc4:	5c000004 	stcpl	0, cr0, [r0], {4}
    9cc8:	2a040f00 	bcs	10d8d0 <_Min_Stack_Size+0x10d6d0>
    9ccc:	0d000002 	stceq	0, cr0, [r0, #-8]
    9cd0:	00004141 	andeq	r4, r0, r1, asr #2
    9cd4:	86b30568 	ldrthi	r0, [r3], r8, ror #10
    9cd8:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    9cdc:	0500705f 	streq	r7, [r0, #-95]	; 0xffffffa1
    9ce0:	000224b4 			; <UNDEFINED> instruction: 0x000224b4
    9ce4:	5f0e0000 	svcpl	0x000e0000
    9ce8:	b5050072 	strlt	r0, [r5, #-114]	; 0xffffff8e
    9cec:	0000003e 	andeq	r0, r0, lr, lsr r0
    9cf0:	775f0e04 	ldrbvc	r0, [pc, -r4, lsl #28]
    9cf4:	3eb60500 	cdpcc	5, 11, cr0, cr6, cr0, {0}
    9cf8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9cfc:	003e750b 	eorseq	r7, lr, fp, lsl #10
    9d00:	53b70500 			; <UNDEFINED> instruction: 0x53b70500
    9d04:	0c000000 	stceq	0, cr0, [r0], {-0}
    9d08:	0040060b 	subeq	r0, r0, fp, lsl #12
    9d0c:	53b80500 			; <UNDEFINED> instruction: 0x53b80500
    9d10:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    9d14:	66625f0e 	strbtvs	r5, [r2], -lr, lsl #30
    9d18:	ffb90500 			; <UNDEFINED> instruction: 0xffb90500
    9d1c:	10000001 	andne	r0, r0, r1
    9d20:	0040e60b 	subeq	lr, r0, fp, lsl #12
    9d24:	3eba0500 	cdpcc	5, 11, cr0, cr10, cr0, {0}
    9d28:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9d2c:	000df80b 	andeq	pc, sp, fp, lsl #16
    9d30:	56bd0500 	ldrtpl	r0, [sp], r0, lsl #10
    9d34:	1c000003 	stcne	0, cr0, [r0], {3}
    9d38:	003ffe0b 	eorseq	pc, pc, fp, lsl #28
    9d3c:	10c10500 	sbcne	r0, r1, r0, lsl #10
    9d40:	20000001 	andcs	r0, r0, r1
    9d44:	0039cd0b 	eorseq	ip, r9, fp, lsl #26
    9d48:	b1c30500 	biclt	r0, r3, r0, lsl #10
    9d4c:	24000004 	strcs	r0, [r0], #-4
    9d50:	00395b0b 	eorseq	r5, r9, fp, lsl #22
    9d54:	e0c50500 	sbc	r0, r5, r0, lsl #10
    9d58:	28000004 	stmdacs	r0, {r2}
    9d5c:	0040b00b 	subeq	fp, r0, fp
    9d60:	04c80500 	strbeq	r0, [r8], #1280	; 0x500
    9d64:	2c000005 	stccs	0, cr0, [r0], {5}
    9d68:	003f910b 	eorseq	r9, pc, fp, lsl #2
    9d6c:	1ec90500 	cdpne	5, 12, cr0, cr9, cr0, {0}
    9d70:	30000005 	andcc	r0, r0, r5
    9d74:	62755f0e 	rsbsvs	r5, r5, #14, 30	; 0x38
    9d78:	ffcc0500 			; <UNDEFINED> instruction: 0xffcc0500
    9d7c:	34000001 	strcc	r0, [r0], #-1
    9d80:	70755f0e 	rsbsvc	r5, r5, lr, lsl #30
    9d84:	24cd0500 	strbcs	r0, [sp], #1280	; 0x500
    9d88:	3c000002 	stccc	0, cr0, [r0], {2}
    9d8c:	72755f0e 	rsbsvc	r5, r5, #14, 30	; 0x38
    9d90:	3ece0500 	cdpcc	5, 12, cr0, cr14, cr0, {0}
    9d94:	40000000 	andmi	r0, r0, r0
    9d98:	003fab0b 	eorseq	sl, pc, fp, lsl #22
    9d9c:	24d10500 	ldrbcs	r0, [r1], #1280	; 0x500
    9da0:	44000005 	strmi	r0, [r0], #-5
    9da4:	003ec80b 	eorseq	ip, lr, fp, lsl #16
    9da8:	34d20500 	ldrbcc	r0, [r2], #1280	; 0x500
    9dac:	47000005 	strmi	r0, [r0, -r5]
    9db0:	626c5f0e 	rsbvs	r5, ip, #14, 30	; 0x38
    9db4:	ffd50500 			; <UNDEFINED> instruction: 0xffd50500
    9db8:	48000001 	stmdami	r0, {r0}
    9dbc:	0040c70b 	subeq	ip, r0, fp, lsl #14
    9dc0:	3ed80500 	cdpcc	5, 13, cr0, cr8, cr0, {0}
    9dc4:	50000000 	andpl	r0, r0, r0
    9dc8:	0049750b 	subeq	r7, r9, fp, lsl #10
    9dcc:	81d90500 	bicshi	r0, r9, r0, lsl #10
    9dd0:	54000000 	strpl	r0, [r0], #-0
    9dd4:	0035400b 	eorseq	r4, r5, fp
    9dd8:	05e00500 	strbeq	r0, [r0, #1280]!	; 0x500
    9ddc:	58000001 	stmdapl	r0, {r0}
    9de0:	003f410b 	eorseq	r4, pc, fp, lsl #2
    9de4:	fae20500 	blx	ff88b1ec <BootRAM+0xe7fb98d>
    9de8:	5c000000 	stcpl	0, cr0, [r0], {-0}
    9dec:	003db50b 	eorseq	fp, sp, fp, lsl #10
    9df0:	3ee30500 	cdpcc	5, 14, cr0, cr3, cr0, {0}
    9df4:	64000000 	strvs	r0, [r0], #-0
    9df8:	003e1300 	eorseq	r1, lr, r0, lsl #6
    9dfc:	04a40000 	strteq	r0, [r4], #0
    9e00:	56140000 	ldrpl	r0, [r4], -r0
    9e04:	14000003 	strne	r0, [r0], #-3
    9e08:	00000110 	andeq	r0, r0, r0, lsl r1
    9e0c:	0004a414 	andeq	sl, r4, r4, lsl r4
    9e10:	003e1400 	eorseq	r1, lr, r0, lsl #8
    9e14:	0f000000 	svceq	0x00000000
    9e18:	0004aa04 	andeq	sl, r4, r4, lsl #20
    9e1c:	08010300 	stmdaeq	r1, {r8, r9}
    9e20:	000000ca 	andeq	r0, r0, sl, asr #1
    9e24:	0486040f 	streq	r0, [r6], #1039	; 0x40f
    9e28:	3e130000 	cdpcc	0, 1, cr0, cr3, cr0, {0}
    9e2c:	d5000000 	strle	r0, [r0, #-0]
    9e30:	14000004 	strne	r0, [r0], #-4
    9e34:	00000356 	andeq	r0, r0, r6, asr r3
    9e38:	00011014 	andeq	r1, r1, r4, lsl r0
    9e3c:	04d51400 	ldrbeq	r1, [r5], #1024	; 0x400
    9e40:	3e140000 	cdpcc	0, 1, cr0, cr4, cr0, {0}
    9e44:	00000000 	andeq	r0, r0, r0
    9e48:	04db040f 	ldrbeq	r0, [fp], #1039	; 0x40f
    9e4c:	aa150000 	bge	549e54 <_Min_Stack_Size+0x549c54>
    9e50:	0f000004 	svceq	0x00000004
    9e54:	0004b704 	andeq	fp, r4, r4, lsl #14
    9e58:	008c1300 	addeq	r1, ip, r0, lsl #6
    9e5c:	05040000 	streq	r0, [r4, #-0]
    9e60:	56140000 	ldrpl	r0, [r4], -r0
    9e64:	14000003 	strne	r0, [r0], #-3
    9e68:	00000110 	andeq	r0, r0, r0, lsl r1
    9e6c:	00008c14 	andeq	r8, r0, r4, lsl ip
    9e70:	003e1400 	eorseq	r1, lr, r0, lsl #8
    9e74:	0f000000 	svceq	0x00000000
    9e78:	0004e604 	andeq	lr, r4, r4, lsl #12
    9e7c:	003e1300 	eorseq	r1, lr, r0, lsl #6
    9e80:	051e0000 	ldreq	r0, [lr, #-0]
    9e84:	56140000 	ldrpl	r0, [r4], -r0
    9e88:	14000003 	strne	r0, [r0], #-3
    9e8c:	00000110 	andeq	r0, r0, r0, lsl r1
    9e90:	0a040f00 	beq	10da98 <_Min_Stack_Size+0x10d898>
    9e94:	08000005 	stmdaeq	r0, {r0, r2}
    9e98:	0000004c 	andeq	r0, r0, ip, asr #32
    9e9c:	00000534 	andeq	r0, r0, r4, lsr r5
    9ea0:	0000d209 	andeq	sp, r0, r9, lsl #4
    9ea4:	08000200 	stmdaeq	r0, {r9}
    9ea8:	0000004c 	andeq	r0, r0, ip, asr #32
    9eac:	00000544 	andeq	r0, r0, r4, asr #10
    9eb0:	0000d209 	andeq	sp, r0, r9, lsl #4
    9eb4:	05000000 	streq	r0, [r0, #-0]
    9eb8:	00003ee7 	andeq	r3, r0, r7, ror #29
    9ebc:	5c011d05 	stcpl	13, cr1, [r1], {5}
    9ec0:	10000003 	andne	r0, r0, r3
    9ec4:	00004925 	andeq	r4, r0, r5, lsr #18
    9ec8:	0121050c 			; <UNDEFINED> instruction: 0x0121050c
    9ecc:	00000585 	andeq	r0, r0, r5, lsl #11
    9ed0:	00410511 	subeq	r0, r1, r1, lsl r5
    9ed4:	01230500 			; <UNDEFINED> instruction: 0x01230500
    9ed8:	00000585 	andeq	r0, r0, r5, lsl #11
    9edc:	3ee01100 	cdpcc	1, 14, cr1, cr0, cr0, {0}
    9ee0:	24050000 	strcs	r0, [r5], #-0
    9ee4:	00003e01 	andeq	r3, r0, r1, lsl #28
    9ee8:	af110400 	svcge	0x00110400
    9eec:	0500003d 	streq	r0, [r0, #-61]	; 0xffffffc3
    9ef0:	058b0125 	streq	r0, [fp, #293]	; 0x125
    9ef4:	00080000 	andeq	r0, r8, r0
    9ef8:	0550040f 	ldrbeq	r0, [r0, #-1039]	; 0xfffffbf1
    9efc:	040f0000 	streq	r0, [pc], #-0	; 9f04 <_Min_Stack_Size+0x9d04>
    9f00:	00000544 	andeq	r0, r0, r4, asr #10
    9f04:	00409610 	subeq	r9, r0, r0, lsl r6
    9f08:	3d051800 	stccc	8, cr1, [r5, #-0]
    9f0c:	0005d301 	andeq	sp, r5, r1, lsl #6
    9f10:	40901100 	addsmi	r1, r0, r0, lsl #2
    9f14:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    9f18:	0005d301 	andeq	sp, r5, r1, lsl #6
    9f1c:	68110000 	ldmdavs	r1, {}	; <UNPREDICTABLE>
    9f20:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    9f24:	05d3013f 	ldrbeq	r0, [r3, #319]	; 0x13f
    9f28:	11060000 	mrsne	r0, (UNDEF: 6)
    9f2c:	00003e50 	andeq	r3, r0, r0, asr lr
    9f30:	37014005 	strcc	r4, [r1, -r5]
    9f34:	0c000000 	stceq	0, cr0, [r0], {-0}
    9f38:	00410011 	subeq	r0, r1, r1, lsl r0
    9f3c:	01430500 	cmpeq	r3, r0, lsl #10
    9f40:	0000006f 	andeq	r0, r0, pc, rrx
    9f44:	37080010 	smladcc	r8, r0, r0, r0
    9f48:	e3000000 	movw	r0, #0
    9f4c:	09000005 	stmdbeq	r0, {r0, r2}
    9f50:	000000d2 	ldrdeq	r0, [r0], -r2
    9f54:	20100002 	andscs	r0, r0, r2
    9f58:	10000040 	andne	r0, r0, r0, asr #32
    9f5c:	25015605 	strcs	r5, [r1, #-1541]	; 0xfffff9fb
    9f60:	11000006 	tstne	r0, r6
    9f64:	000040b6 	strheq	r4, [r0], -r6
    9f68:	70015905 	andvc	r5, r1, r5, lsl #18
    9f6c:	00000001 	andeq	r0, r0, r1
    9f70:	003e5511 	eorseq	r5, lr, r1, lsl r5
    9f74:	015a0500 	cmpeq	sl, r0, lsl #10
    9f78:	0000003e 	andeq	r0, r0, lr, lsr r0
    9f7c:	40f51104 	rscsmi	r1, r5, r4, lsl #2
    9f80:	5b050000 	blpl	149f88 <_Min_Stack_Size+0x149d88>
    9f84:	00017001 	andeq	r7, r1, r1
    9f88:	37110800 	ldrcc	r0, [r1, -r0, lsl #16]
    9f8c:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    9f90:	0625015c 			; <UNDEFINED> instruction: 0x0625015c
    9f94:	000c0000 	andeq	r0, ip, r0
    9f98:	0170040f 	cmneq	r0, pc, lsl #8
    9f9c:	0b100000 	bleq	409fa4 <_Min_Stack_Size+0x409da4>
    9fa0:	50000041 	andpl	r0, r0, r1, asr #32
    9fa4:	c8016005 	stmdagt	r1, {r0, r2, sp, lr}
    9fa8:	11000006 	tstne	r0, r6
    9fac:	00003eb3 			; <UNDEFINED> instruction: 0x00003eb3
    9fb0:	a4016305 	strge	r6, [r1], #-773	; 0xfffffcfb
    9fb4:	00000004 	andeq	r0, r0, r4
    9fb8:	003dbd11 	eorseq	fp, sp, r1, lsl sp
    9fbc:	01640500 	cmneq	r4, r0, lsl #10
    9fc0:	000000fa 	strdeq	r0, [r0], -sl
    9fc4:	3fd91104 	svccc	0x00d91104
    9fc8:	65050000 	strvs	r0, [r5, #-0]
    9fcc:	0000fa01 	andeq	pc, r0, r1, lsl #20
    9fd0:	2c110c00 	ldccs	12, cr0, [r1], {-0}
    9fd4:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    9fd8:	00fa0166 	rscseq	r0, sl, r6, ror #2
    9fdc:	11140000 	tstne	r4, r0
    9fe0:	00003f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    9fe4:	c8016705 	stmdagt	r1, {r0, r2, r8, r9, sl, sp, lr}
    9fe8:	1c000006 	stcne	0, cr0, [r0], {6}
    9fec:	003ef511 	eorseq	pc, lr, r1, lsl r5	; <UNPREDICTABLE>
    9ff0:	01680500 	cmneq	r8, r0, lsl #10
    9ff4:	0000003e 	andeq	r0, r0, lr, lsr r0
    9ff8:	40411124 	submi	r1, r1, r4, lsr #2
    9ffc:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
    a000:	0000fa01 	andeq	pc, r0, r1, lsl #20
    a004:	e7112800 	ldr	r2, [r1, -r0, lsl #16]
    a008:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    a00c:	00fa016a 	rscseq	r0, sl, sl, ror #2
    a010:	11300000 	teqne	r0, r0
    a014:	00003e9d 	muleq	r0, sp, lr
    a018:	fa016b05 	blx	64c34 <_Min_Stack_Size+0x64a34>
    a01c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    a020:	00412711 	subeq	r2, r1, r1, lsl r7
    a024:	016c0500 	cmneq	ip, r0, lsl #10
    a028:	000000fa 	strdeq	r0, [r0], -sl
    a02c:	40d51140 	sbcsmi	r1, r5, r0, asr #2
    a030:	6d050000 	stcvs	0, cr0, [r5, #-0]
    a034:	0000fa01 	andeq	pc, r0, r1, lsl #20
    a038:	08004800 	stmdaeq	r0, {fp, lr}
    a03c:	000004aa 	andeq	r0, r0, sl, lsr #9
    a040:	000006d8 	ldrdeq	r0, [r0], -r8
    a044:	0000d209 	andeq	sp, r0, r9, lsl #4
    a048:	0f000700 	svceq	0x00000700
    a04c:	0005e304 	andeq	lr, r5, r4, lsl #6
    a050:	06e91600 	strbteq	r1, [r9], r0, lsl #12
    a054:	56140000 	ldrpl	r0, [r4], -r0
    a058:	00000003 	andeq	r0, r0, r3
    a05c:	06de040f 	ldrbeq	r0, [lr], pc, lsl #8
    a060:	040f0000 	streq	r0, [pc], #-0	; a068 <_Min_Stack_Size+0x9e68>
    a064:	00000591 	muleq	r0, r1, r5
    a068:	0186040f 	orreq	r0, r6, pc, lsl #8
    a06c:	06160000 	ldreq	r0, [r6], -r0
    a070:	14000007 	strne	r0, [r0], #-7
    a074:	0000003e 	andeq	r0, r0, lr, lsr r0
    a078:	0c040f00 	stceq	15, cr0, [r4], {-0}
    a07c:	0f000007 	svceq	0x00000007
    a080:	0006fb04 	andeq	pc, r6, r4, lsl #22
    a084:	2b040f00 	blcs	10dc8c <_Min_Stack_Size+0x10da8c>
    a088:	17000006 	strne	r0, [r0, -r6]
    a08c:	000040ef 	andeq	r4, r0, pc, ror #1
    a090:	00008306 	andeq	r8, r0, r6, lsl #6
    a094:	00500000 	subseq	r0, r0, r0
    a098:	9c010000 	stcls	0, cr0, [r1], {-0}
    a09c:	0000078b 	andeq	r0, r0, fp, lsl #15
    a0a0:	00409118 	subeq	r9, r0, r8, lsl r1
    a0a4:	30490100 	subcc	r0, r9, r0, lsl #2
    a0a8:	d0000000 	andle	r0, r0, r0
    a0ac:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    a0b0:	00004441 	andeq	r4, r0, r1, asr #8
    a0b4:	03564b01 	cmpeq	r6, #1024	; 0x400
    a0b8:	00fc0000 	rscseq	r0, ip, r0
    a0bc:	001a0000 	andseq	r0, sl, r0
    a0c0:	3a000000 	bcc	a0c8 <_Min_Stack_Size+0x9ec8>
    a0c4:	1b000000 	blne	a0cc <_Min_Stack_Size+0x9ecc>
    a0c8:	0100725f 	tsteq	r0, pc, asr r2
    a0cc:	0003564d 	andeq	r5, r3, sp, asr #12
    a0d0:	0000fc00 	andeq	pc, r0, r0, lsl #24
    a0d4:	0bd81c00 	bleq	ff6110dc <BootRAM+0xe58187d>
    a0d8:	077a0000 	ldrbeq	r0, [sl, -r0]!
    a0dc:	5f1b0000 	svcpl	0x001b0000
    a0e0:	4d010072 	stcmi	0, cr0, [r1, #-456]	; 0xfffffe38
    a0e4:	00000356 	andeq	r0, r0, r6, asr r3
    a0e8:	0000010f 	andeq	r0, r0, pc, lsl #2
    a0ec:	00001d00 	andeq	r1, r0, r0, lsl #26
    a0f0:	07ff0000 	ldrbeq	r0, [pc, r0]!
    a0f4:	011e0000 	tsteq	lr, r0
    a0f8:	00480150 	subeq	r0, r8, r0, asr r1
    a0fc:	f01f0000 			; <UNDEFINED> instruction: 0xf01f0000
    a100:	06000040 	streq	r0, [r0], -r0, asr #32
    a104:	00003e7d 	andeq	r3, r0, sp, ror lr
    a108:	0066f400 	rsbeq	pc, r6, r0, lsl #8
    a10c:	00007408 	andeq	r7, r0, r8, lsl #8
    a110:	f39c0100 	vaddw.u16	q0, q6, d0
    a114:	19000007 	stmdbne	r0, {r0, r1, r2}
    a118:	00004441 	andeq	r4, r0, r1, asr #8
    a11c:	03565401 	cmpeq	r6, #16777216	; 0x1000000
    a120:	01220000 			; <UNDEFINED> instruction: 0x01220000
    a124:	fa1a0000 	blx	68a12c <_Min_Stack_Size+0x689f2c>
    a128:	3a080066 	bcc	20a2c8 <_Min_Stack_Size+0x20a0c8>
    a12c:	1b000000 	blne	a134 <_Min_Stack_Size+0x9f34>
    a130:	0100725f 	tsteq	r0, pc, asr r2
    a134:	00035659 	andeq	r5, r3, r9, asr r6
    a138:	00012200 	andeq	r2, r1, r0, lsl #4
    a13c:	0bf01c00 	bleq	ffc11144 <BootRAM+0xeb818e5>
    a140:	07e20000 	strbeq	r0, [r2, r0]!
    a144:	5f1b0000 	svcpl	0x001b0000
    a148:	59010072 	stmdbpl	r1, {r1, r4, r5, r6}
    a14c:	00000356 	andeq	r0, r0, r6, asr r3
    a150:	00000135 	andeq	r0, r0, r5, lsr r1
    a154:	67041d00 	strvs	r1, [r4, -r0, lsl #26]
    a158:	07ff0800 	ldrbeq	r0, [pc, r0, lsl #16]!
    a15c:	011e0000 	tsteq	lr, r0
    a160:	00480150 	subeq	r0, r8, r0, asr r1
    a164:	5e200000 	cdppl	0, 2, cr0, cr0, cr0, {0}
    a168:	05000044 	streq	r0, [r0, #-68]	; 0xffffffbc
    a16c:	035602fa 	cmpeq	r6, #-1610612721	; 0xa000000f
    a170:	61210000 			; <UNDEFINED> instruction: 0x61210000
    a174:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
    a178:	00011061 	andeq	r1, r1, r1, rrx
    a17c:	00251400 	eoreq	r1, r5, r0, lsl #8
    a180:	00000000 	andeq	r0, r0, r0
    a184:	000008c7 	andeq	r0, r0, r7, asr #17
    a188:	20e00004 	rsccs	r0, r0, r4
    a18c:	01040000 	mrseq	r0, (UNDEF: 4)
    a190:	00003ce0 	andeq	r3, r0, r0, ror #25
    a194:	00415f01 	subeq	r5, r1, r1, lsl #30
    a198:	0041b800 	subeq	fp, r1, r0, lsl #16
    a19c:	000c2000 	andeq	r2, ip, r0
    a1a0:	00000000 	andeq	r0, r0, r0
    a1a4:	0046d200 	subeq	sp, r6, r0, lsl #4
    a1a8:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    a1ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
    a1b0:	00450803 	subeq	r0, r5, r3, lsl #16
    a1b4:	37d40200 	ldrbcc	r0, [r4, r0, lsl #4]
    a1b8:	04000000 	streq	r0, [r0], #-0
    a1bc:	00ff0704 	rscseq	r0, pc, r4, lsl #14
    a1c0:	02040000 	andeq	r0, r4, #0
    a1c4:	00012307 	andeq	r2, r1, r7, lsl #6
    a1c8:	06010400 	streq	r0, [r1], -r0, lsl #8
    a1cc:	000000c3 	andeq	r0, r0, r3, asr #1
    a1d0:	c1080104 	tstgt	r8, r4, lsl #2
    a1d4:	04000000 	streq	r0, [r0], #-0
    a1d8:	00510502 	subseq	r0, r1, r2, lsl #10
    a1dc:	04040000 	streq	r0, [r4], #-0
    a1e0:	00006d05 	andeq	r6, r0, r5, lsl #26
    a1e4:	07040400 	streq	r0, [r4, -r0, lsl #8]
    a1e8:	000000fa 	strdeq	r0, [r0], -sl
    a1ec:	68050804 	stmdavs	r5, {r2, fp}
    a1f0:	04000000 	streq	r0, [r0], #-0
    a1f4:	00f50708 	rscseq	r0, r5, r8, lsl #14
    a1f8:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    a1fc:	0300003e 	movweq	r0, #62	; 0x3e
    a200:	00002507 	andeq	r2, r0, r7, lsl #10
    a204:	3e340300 	cdpcc	3, 3, cr0, cr4, cr0, {0}
    a208:	10040000 	andne	r0, r4, r0
    a20c:	0000005a 	andeq	r0, r0, sl, asr r0
    a210:	003f8903 	eorseq	r8, pc, r3, lsl #18
    a214:	5a270400 	bpl	9cb21c <_Min_Stack_Size+0x9cb01c>
    a218:	05000000 	streq	r0, [r0, #-0]
    a21c:	0000403a 	andeq	r4, r0, sl, lsr r0
    a220:	37016102 	strcc	r6, [r1, -r2, lsl #2]
    a224:	06000000 	streq	r0, [r0], -r0
    a228:	c24a0404 	subgt	r0, sl, #4, 8	; 0x4000000
    a22c:	07000000 	streq	r0, [r0, -r0]
    a230:	00003e3b 	andeq	r3, r0, fp, lsr lr
    a234:	00974c04 	addseq	r4, r7, r4, lsl #24
    a238:	c4070000 	strgt	r0, [r7], #-0
    a23c:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    a240:	0000c24d 	andeq	ip, r0, sp, asr #4
    a244:	4c080000 	stcmi	0, cr0, [r8], {-0}
    a248:	d2000000 	andle	r0, r0, #0
    a24c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    a250:	000000d2 	ldrdeq	r0, [r0], -r2
    a254:	04040003 	streq	r0, [r4], #-3
    a258:	00001507 	andeq	r1, r0, r7, lsl #10
    a25c:	04080a00 	streq	r0, [r8], #-2560	; 0xfffff600
    a260:	0000fa47 	andeq	pc, r0, r7, asr #20
    a264:	3e8b0b00 	vdivcc.f64	d0, d11, d0
    a268:	49040000 	stmdbmi	r4, {}	; <UNPREDICTABLE>
    a26c:	00000025 	andeq	r0, r0, r5, lsr #32
    a270:	3e410b00 	vmlacc.f64	d16, d1, d0
    a274:	4e040000 	cdpmi	0, 0, cr0, cr4, cr0, {0}
    a278:	000000a3 	andeq	r0, r0, r3, lsr #1
    a27c:	6b030004 	blvs	ca294 <_Min_Stack_Size+0xca094>
    a280:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    a284:	0000d94f 	andeq	sp, r0, pc, asr #18
    a288:	3fa20300 	svccc	0x00a20300
    a28c:	53040000 	movwpl	r0, #16384	; 0x4000
    a290:	00000076 	andeq	r0, r0, r6, ror r0
    a294:	a803040c 	stmdage	r3, {r2, r3, sl}
    a298:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    a29c:	00006116 	andeq	r6, r0, r6, lsl r1
    a2a0:	40760d00 	rsbsmi	r0, r6, r0, lsl #26
    a2a4:	05180000 	ldreq	r0, [r8, #-0]
    a2a8:	0001702d 	andeq	r7, r1, sp, lsr #32
    a2ac:	41050b00 	tstmi	r5, r0, lsl #22
    a2b0:	2f050000 	svccs	0x00050000
    a2b4:	00000170 	andeq	r0, r0, r0, ror r1
    a2b8:	6b5f0e00 	blvs	17cdac0 <_Min_Stack_Size+0x17cd8c0>
    a2bc:	25300500 	ldrcs	r0, [r0, #-1280]!	; 0xfffffb00
    a2c0:	04000000 	streq	r0, [r0], #-0
    a2c4:	00407e0b 	subeq	r7, r0, fp, lsl #28
    a2c8:	25300500 	ldrcs	r0, [r0, #-1280]!	; 0xfffffb00
    a2cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a2d0:	0040fa0b 	subeq	pc, r0, fp, lsl #20
    a2d4:	25300500 	ldrcs	r0, [r0, #-1280]!	; 0xfffffb00
    a2d8:	0c000000 	stceq	0, cr0, [r0], {-0}
    a2dc:	00401b0b 	subeq	r1, r0, fp, lsl #22
    a2e0:	25300500 	ldrcs	r0, [r0, #-1280]!	; 0xfffffb00
    a2e4:	10000000 	andne	r0, r0, r0
    a2e8:	00785f0e 	rsbseq	r5, r8, lr, lsl #30
    a2ec:	01763105 	cmneq	r6, r5, lsl #2
    a2f0:	00140000 	andseq	r0, r4, r0
    a2f4:	011d040f 	tsteq	sp, pc, lsl #8
    a2f8:	12080000 	andne	r0, r8, #0
    a2fc:	86000001 	strhi	r0, [r0], -r1
    a300:	09000001 	stmdbeq	r0, {r0}
    a304:	000000d2 	ldrdeq	r0, [r0], -r2
    a308:	270d0000 	strcs	r0, [sp, -r0]
    a30c:	24000040 	strcs	r0, [r0], #-64	; 0xffffffc0
    a310:	01ff3505 	mvnseq	r3, r5, lsl #10
    a314:	b10b0000 	mrslt	r0, (UNDEF: 11)
    a318:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    a31c:	00002537 	andeq	r2, r0, r7, lsr r5
    a320:	020b0000 	andeq	r0, fp, #0
    a324:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    a328:	00002538 	andeq	r2, r0, r8, lsr r5
    a32c:	ba0b0400 	blt	2cb334 <_Min_Stack_Size+0x2cb134>
    a330:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    a334:	00002539 	andeq	r2, r0, r9, lsr r5
    a338:	930b0800 	movwls	r0, #47104	; 0xb800
    a33c:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    a340:	0000253a 	andeq	r2, r0, sl, lsr r5
    a344:	be0b0c00 	cdplt	12, 0, cr0, cr11, cr0, {0}
    a348:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    a34c:	0000253b 	andeq	r2, r0, fp, lsr r5
    a350:	860b1000 	strhi	r1, [fp], -r0
    a354:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    a358:	0000253c 	andeq	r2, r0, ip, lsr r5
    a35c:	4a0b1400 	bmi	2cf364 <_Min_Stack_Size+0x2cf164>
    a360:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    a364:	0000253d 	andeq	r2, r0, sp, lsr r5
    a368:	9e0b1800 	cdpls	8, 0, cr1, cr11, cr0, {0}
    a36c:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    a370:	0000253e 	andeq	r2, r0, lr, lsr r5
    a374:	6e0b1c00 	cdpvs	12, 0, cr1, cr11, cr0, {0}
    a378:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    a37c:	0000253f 	andeq	r2, r0, pc, lsr r5
    a380:	0d002000 	stceq	0, cr2, [r0, #-0]
    a384:	00003e49 	andeq	r3, r0, r9, asr #28
    a388:	24730508 	ldrbtcs	r0, [r3], #-1288	; 0xfffffaf8
    a38c:	0b000002 	bleq	a39c <_Min_Stack_Size+0xa19c>
    a390:	000033a7 	andeq	r3, r0, r7, lsr #7
    a394:	02247405 	eoreq	r7, r4, #83886080	; 0x5000000
    a398:	0b000000 	bleq	a3a0 <_Min_Stack_Size+0xa1a0>
    a39c:	000045c9 	andeq	r4, r0, r9, asr #11
    a3a0:	00257505 	eoreq	r7, r5, r5, lsl #10
    a3a4:	00040000 	andeq	r0, r4, r0
    a3a8:	004c040f 	subeq	r0, ip, pc, lsl #8
    a3ac:	10100000 	andsne	r0, r0, r0
    a3b0:	60000041 	andvs	r0, r0, r1, asr #32
    a3b4:	56017205 	strpl	r7, [r1], -r5, lsl #4
    a3b8:	11000003 	tstne	r0, r3
    a3bc:	00003eee 	andeq	r3, r0, lr, ror #29
    a3c0:	25017605 	strcs	r7, [r1, #-1541]	; 0xfffff9fb
    a3c4:	00000000 	andeq	r0, r0, r0
    a3c8:	00445011 	subeq	r5, r4, r1, lsl r0
    a3cc:	017b0500 	cmneq	fp, r0, lsl #10
    a3d0:	0000058b 	andeq	r0, r0, fp, lsl #11
    a3d4:	44a01104 	strtmi	r1, [r0], #260	; 0x104
    a3d8:	7b050000 	blvc	14a3e0 <_Min_Stack_Size+0x14a1e0>
    a3dc:	00058b01 	andeq	r8, r5, r1, lsl #22
    a3e0:	d6110800 	ldrle	r0, [r1], -r0, lsl #16
    a3e4:	05000043 	streq	r0, [r0, #-67]	; 0xffffffbd
    a3e8:	058b017b 	streq	r0, [fp, #379]	; 0x17b
    a3ec:	110c0000 	mrsne	r0, (UNDEF: 12)
    a3f0:	000040d0 	ldrdeq	r4, [r0], -r0
    a3f4:	25017d05 	strcs	r7, [r1, #-3333]	; 0xfffff2fb
    a3f8:	10000000 	andne	r0, r0, r0
    a3fc:	00413611 	subeq	r3, r1, r1, lsl r6
    a400:	017f0500 	cmneq	pc, r0, lsl #10
    a404:	000004a4 	andeq	r0, r0, r4, lsr #9
    a408:	3f7e1114 	svccc	0x007e1114
    a40c:	81050000 	mrshi	r0, (UNDEF: 5)
    a410:	00002501 	andeq	r2, r0, r1, lsl #10
    a414:	4f111800 	svcmi	0x00111800
    a418:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    a41c:	00250183 	eoreq	r0, r5, r3, lsl #3
    a420:	111c0000 	tstne	ip, r0
    a424:	00004117 	andeq	r4, r0, r7, lsl r1
    a428:	d5018405 	strle	r8, [r1, #-1029]	; 0xfffffbfb
    a42c:	20000004 	andcs	r0, r0, r4
    a430:	706d5f12 	rsbvc	r5, sp, r2, lsl pc
    a434:	01860500 	orreq	r0, r6, r0, lsl #10
    a438:	000006d8 	ldrdeq	r0, [r0], -r8
    a43c:	40611124 	rsbmi	r1, r1, r4, lsr #2
    a440:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
    a444:	0006e901 	andeq	lr, r6, r1, lsl #18
    a448:	0c112800 	ldceq	8, cr2, [r1], {-0}
    a44c:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    a450:	0025018a 	eoreq	r0, r5, sl, lsl #3
    a454:	112c0000 			; <UNDEFINED> instruction: 0x112c0000
    a458:	00003ec0 	andeq	r3, r0, r0, asr #29
    a45c:	25018d05 	strcs	r8, [r1, #-3333]	; 0xfffff2fb
    a460:	30000000 	andcc	r0, r0, r0
    a464:	003ff611 	eorseq	pc, pc, r1, lsl r6	; <UNPREDICTABLE>
    a468:	018e0500 	orreq	r0, lr, r0, lsl #10
    a46c:	000004a4 	andeq	r0, r0, r4, lsr #9
    a470:	3eae1134 	mcrcc	1, 5, r1, cr14, cr4, {1}
    a474:	90050000 	andls	r0, r5, r0
    a478:	0006ef01 	andeq	lr, r6, r1, lsl #30
    a47c:	7c113800 	ldcvc	8, cr3, [r1], {-0}
    a480:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    a484:	06f50191 	usateq	r0, #21, r1, lsl #3
    a488:	113c0000 	teqne	ip, r0
    a48c:	00003f54 	andeq	r3, r0, r4, asr pc
    a490:	a4019205 	strge	r9, [r1], #-517	; 0xfffffdfb
    a494:	40000004 	andmi	r0, r0, r4
    a498:	003e6b11 	eorseq	r6, lr, r1, lsl fp
    a49c:	01950500 	orrseq	r0, r5, r0, lsl #10
    a4a0:	00000706 	andeq	r0, r0, r6, lsl #14
    a4a4:	3fd11144 	svccc	0x00d11144
    a4a8:	9d050000 	stcls	0, cr0, [r5, #-0]
    a4ac:	00055001 	andeq	r5, r5, r1
    a4b0:	79114800 	ldmdbvc	r1, {fp, lr}
    a4b4:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    a4b8:	058b019e 	streq	r0, [fp, #414]	; 0x19e
    a4bc:	11540000 	cmpne	r4, r0
    a4c0:	00003fcb 	andeq	r3, r0, fp, asr #31
    a4c4:	12019f05 	andne	r9, r1, #5, 30
    a4c8:	58000007 	stmdapl	r0, {r0, r1, r2}
    a4cc:	003e5f11 	eorseq	r5, lr, r1, lsl pc
    a4d0:	01a00500 	lsleq	r0, r0, #10
    a4d4:	000004a4 	andeq	r0, r0, r4, lsr #9
    a4d8:	040f005c 	streq	r0, [pc], #-92	; a4e0 <_Min_Stack_Size+0xa2e0>
    a4dc:	0000022a 	andeq	r0, r0, sl, lsr #4
    a4e0:	0041410d 	subeq	r4, r1, sp, lsl #2
    a4e4:	b3056800 	movwlt	r6, #22528	; 0x5800
    a4e8:	00000486 	andeq	r0, r0, r6, lsl #9
    a4ec:	00705f0e 	rsbseq	r5, r0, lr, lsl #30
    a4f0:	0224b405 	eoreq	fp, r4, #83886080	; 0x5000000
    a4f4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    a4f8:	0500725f 	streq	r7, [r0, #-607]	; 0xfffffda1
    a4fc:	000025b5 			; <UNDEFINED> instruction: 0x000025b5
    a500:	5f0e0400 	svcpl	0x000e0400
    a504:	b6050077 			; <UNDEFINED> instruction: 0xb6050077
    a508:	00000025 	andeq	r0, r0, r5, lsr #32
    a50c:	3e750b08 	vaddcc.f64	d16, d5, d8
    a510:	b7050000 	strlt	r0, [r5, -r0]
    a514:	00000053 	andeq	r0, r0, r3, asr r0
    a518:	40060b0c 	andmi	r0, r6, ip, lsl #22
    a51c:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    a520:	00000053 	andeq	r0, r0, r3, asr r0
    a524:	625f0e0e 	subsvs	r0, pc, #14, 28	; 0xe0
    a528:	b9050066 	stmdblt	r5, {r1, r2, r5, r6}
    a52c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    a530:	40e60b10 	rscmi	r0, r6, r0, lsl fp
    a534:	ba050000 	blt	14a53c <_Min_Stack_Size+0x14a33c>
    a538:	00000025 	andeq	r0, r0, r5, lsr #32
    a53c:	0df80b18 	ldcleq	11, cr0, [r8, #96]!	; 0x60
    a540:	bd050000 	stclt	0, cr0, [r5, #-0]
    a544:	00000356 	andeq	r0, r0, r6, asr r3
    a548:	3ffe0b1c 	svccc	0x00fe0b1c
    a54c:	c1050000 	mrsgt	r0, (UNDEF: 5)
    a550:	00000110 	andeq	r0, r0, r0, lsl r1
    a554:	39cd0b20 	stmibcc	sp, {r5, r8, r9, fp}^
    a558:	c3050000 	movwgt	r0, #20480	; 0x5000
    a55c:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    a560:	395b0b24 	ldmdbcc	fp, {r2, r5, r8, r9, fp}^
    a564:	c5050000 	strgt	r0, [r5, #-0]
    a568:	000004e0 	andeq	r0, r0, r0, ror #9
    a56c:	40b00b28 	adcsmi	r0, r0, r8, lsr #22
    a570:	c8050000 	stmdagt	r5, {}	; <UNPREDICTABLE>
    a574:	00000504 	andeq	r0, r0, r4, lsl #10
    a578:	3f910b2c 	svccc	0x00910b2c
    a57c:	c9050000 	stmdbgt	r5, {}	; <UNPREDICTABLE>
    a580:	0000051e 	andeq	r0, r0, lr, lsl r5
    a584:	755f0e30 	ldrbvc	r0, [pc, #-3632]	; 975c <_Min_Stack_Size+0x955c>
    a588:	cc050062 	stcgt	0, cr0, [r5], {98}	; 0x62
    a58c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    a590:	755f0e34 	ldrbvc	r0, [pc, #-3636]	; 9764 <_Min_Stack_Size+0x9564>
    a594:	cd050070 	stcgt	0, cr0, [r5, #-448]	; 0xfffffe40
    a598:	00000224 	andeq	r0, r0, r4, lsr #4
    a59c:	755f0e3c 	ldrbvc	r0, [pc, #-3644]	; 9768 <_Min_Stack_Size+0x9568>
    a5a0:	ce050072 	mcrgt	0, 0, r0, cr5, cr2, {3}
    a5a4:	00000025 	andeq	r0, r0, r5, lsr #32
    a5a8:	3fab0b40 	svccc	0x00ab0b40
    a5ac:	d1050000 	mrsle	r0, (UNDEF: 5)
    a5b0:	00000524 	andeq	r0, r0, r4, lsr #10
    a5b4:	3ec80b44 	cdpcc	11, 12, cr0, cr8, cr4, {2}
    a5b8:	d2050000 	andle	r0, r5, #0
    a5bc:	00000534 	andeq	r0, r0, r4, lsr r5
    a5c0:	6c5f0e47 	mrrcvs	14, 4, r0, pc, cr7	; <UNPREDICTABLE>
    a5c4:	d5050062 	strle	r0, [r5, #-98]	; 0xffffff9e
    a5c8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    a5cc:	40c70b48 	sbcmi	r0, r7, r8, asr #22
    a5d0:	d8050000 	stmdale	r5, {}	; <UNPREDICTABLE>
    a5d4:	00000025 	andeq	r0, r0, r5, lsr #32
    a5d8:	49750b50 	ldmdbmi	r5!, {r4, r6, r8, r9, fp}^
    a5dc:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
    a5e0:	00000081 	andeq	r0, r0, r1, lsl #1
    a5e4:	35400b54 	strbcc	r0, [r0, #-2900]	; 0xfffff4ac
    a5e8:	e0050000 	and	r0, r5, r0
    a5ec:	00000105 	andeq	r0, r0, r5, lsl #2
    a5f0:	3f410b58 	svccc	0x00410b58
    a5f4:	e2050000 	and	r0, r5, #0
    a5f8:	000000fa 	strdeq	r0, [r0], -sl
    a5fc:	3db50b5c 	ldccc	11, cr0, [r5, #368]!	; 0x170
    a600:	e3050000 	movw	r0, #20480	; 0x5000
    a604:	00000025 	andeq	r0, r0, r5, lsr #32
    a608:	25130064 	ldrcs	r0, [r3, #-100]	; 0xffffff9c
    a60c:	a4000000 	strge	r0, [r0], #-0
    a610:	14000004 	strne	r0, [r0], #-4
    a614:	00000356 	andeq	r0, r0, r6, asr r3
    a618:	00011014 	andeq	r1, r1, r4, lsl r0
    a61c:	04a41400 	strteq	r1, [r4], #1024	; 0x400
    a620:	25140000 	ldrcs	r0, [r4, #-0]
    a624:	00000000 	andeq	r0, r0, r0
    a628:	04aa040f 	strteq	r0, [sl], #1039	; 0x40f
    a62c:	01040000 	mrseq	r0, (UNDEF: 4)
    a630:	0000ca08 	andeq	ip, r0, r8, lsl #20
    a634:	86040f00 	strhi	r0, [r4], -r0, lsl #30
    a638:	13000004 	movwne	r0, #4
    a63c:	00000025 	andeq	r0, r0, r5, lsr #32
    a640:	000004d5 	ldrdeq	r0, [r0], -r5
    a644:	00035614 	andeq	r5, r3, r4, lsl r6
    a648:	01101400 	tsteq	r0, r0, lsl #8
    a64c:	d5140000 	ldrle	r0, [r4, #-0]
    a650:	14000004 	strne	r0, [r0], #-4
    a654:	00000025 	andeq	r0, r0, r5, lsr #32
    a658:	db040f00 	blle	10e260 <_Min_Stack_Size+0x10e060>
    a65c:	15000004 	strne	r0, [r0, #-4]
    a660:	000004aa 	andeq	r0, r0, sl, lsr #9
    a664:	04b7040f 	ldrteq	r0, [r7], #1039	; 0x40f
    a668:	8c130000 	ldchi	0, cr0, [r3], {-0}
    a66c:	04000000 	streq	r0, [r0], #-0
    a670:	14000005 	strne	r0, [r0], #-5
    a674:	00000356 	andeq	r0, r0, r6, asr r3
    a678:	00011014 	andeq	r1, r1, r4, lsl r0
    a67c:	008c1400 	addeq	r1, ip, r0, lsl #8
    a680:	25140000 	ldrcs	r0, [r4, #-0]
    a684:	00000000 	andeq	r0, r0, r0
    a688:	04e6040f 	strbteq	r0, [r6], #1039	; 0x40f
    a68c:	25130000 	ldrcs	r0, [r3, #-0]
    a690:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    a694:	14000005 	strne	r0, [r0], #-5
    a698:	00000356 	andeq	r0, r0, r6, asr r3
    a69c:	00011014 	andeq	r1, r1, r4, lsl r0
    a6a0:	040f0000 	streq	r0, [pc], #-0	; a6a8 <_Min_Stack_Size+0xa4a8>
    a6a4:	0000050a 	andeq	r0, r0, sl, lsl #10
    a6a8:	00004c08 	andeq	r4, r0, r8, lsl #24
    a6ac:	00053400 	andeq	r3, r5, r0, lsl #8
    a6b0:	00d20900 	sbcseq	r0, r2, r0, lsl #18
    a6b4:	00020000 	andeq	r0, r2, r0
    a6b8:	00004c08 	andeq	r4, r0, r8, lsl #24
    a6bc:	00054400 	andeq	r4, r5, r0, lsl #8
    a6c0:	00d20900 	sbcseq	r0, r2, r0, lsl #18
    a6c4:	00000000 	andeq	r0, r0, r0
    a6c8:	003ee705 	eorseq	lr, lr, r5, lsl #14
    a6cc:	011d0500 	tsteq	sp, r0, lsl #10
    a6d0:	0000035c 	andeq	r0, r0, ip, asr r3
    a6d4:	00492510 	subeq	r2, r9, r0, lsl r5
    a6d8:	21050c00 	tstcs	r5, r0, lsl #24
    a6dc:	00058501 	andeq	r8, r5, r1, lsl #10
    a6e0:	41051100 	mrsmi	r1, (UNDEF: 21)
    a6e4:	23050000 	movwcs	r0, #20480	; 0x5000
    a6e8:	00058501 	andeq	r8, r5, r1, lsl #10
    a6ec:	e0110000 	ands	r0, r1, r0
    a6f0:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    a6f4:	00250124 	eoreq	r0, r5, r4, lsr #2
    a6f8:	11040000 	mrsne	r0, (UNDEF: 4)
    a6fc:	00003daf 	andeq	r3, r0, pc, lsr #27
    a700:	8b012505 	blhi	53b1c <_Min_Stack_Size+0x5391c>
    a704:	08000005 	stmdaeq	r0, {r0, r2}
    a708:	50040f00 	andpl	r0, r4, r0, lsl #30
    a70c:	0f000005 	svceq	0x00000005
    a710:	00054404 	andeq	r4, r5, r4, lsl #8
    a714:	40961000 	addsmi	r1, r6, r0
    a718:	05180000 	ldreq	r0, [r8, #-0]
    a71c:	05d3013d 	ldrbeq	r0, [r3, #317]	; 0x13d
    a720:	90110000 	andsls	r0, r1, r0
    a724:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    a728:	05d3013e 	ldrbeq	r0, [r3, #318]	; 0x13e
    a72c:	11000000 	mrsne	r0, (UNDEF: 0)
    a730:	00003f68 	andeq	r3, r0, r8, ror #30
    a734:	d3013f05 	movwle	r3, #7941	; 0x1f05
    a738:	06000005 	streq	r0, [r0], -r5
    a73c:	003e5011 	eorseq	r5, lr, r1, lsl r0
    a740:	01400500 	cmpeq	r0, r0, lsl #10
    a744:	0000003e 	andeq	r0, r0, lr, lsr r0
    a748:	4100110c 	tstmi	r0, ip, lsl #2
    a74c:	43050000 	movwmi	r0, #20480	; 0x5000
    a750:	00006f01 	andeq	r6, r0, r1, lsl #30
    a754:	08001000 	stmdaeq	r0, {ip}
    a758:	0000003e 	andeq	r0, r0, lr, lsr r0
    a75c:	000005e3 	andeq	r0, r0, r3, ror #11
    a760:	0000d209 	andeq	sp, r0, r9, lsl #4
    a764:	10000200 	andne	r0, r0, r0, lsl #4
    a768:	00004020 	andeq	r4, r0, r0, lsr #32
    a76c:	01560510 	cmpeq	r6, r0, lsl r5
    a770:	00000625 	andeq	r0, r0, r5, lsr #12
    a774:	0040b611 	subeq	fp, r0, r1, lsl r6
    a778:	01590500 	cmpeq	r9, r0, lsl #10
    a77c:	00000170 	andeq	r0, r0, r0, ror r1
    a780:	3e551100 	rdfccs	f1, f5, f0
    a784:	5a050000 	bpl	14a78c <_Min_Stack_Size+0x14a58c>
    a788:	00002501 	andeq	r2, r0, r1, lsl #10
    a78c:	f5110400 			; <UNDEFINED> instruction: 0xf5110400
    a790:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    a794:	0170015b 	cmneq	r0, fp, asr r1
    a798:	11080000 	mrsne	r0, (UNDEF: 8)
    a79c:	00003f37 	andeq	r3, r0, r7, lsr pc
    a7a0:	25015c05 	strcs	r5, [r1, #-3077]	; 0xfffff3fb
    a7a4:	0c000006 	stceq	0, cr0, [r0], {6}
    a7a8:	70040f00 	andvc	r0, r4, r0, lsl #30
    a7ac:	10000001 	andne	r0, r0, r1
    a7b0:	0000410b 	andeq	r4, r0, fp, lsl #2
    a7b4:	01600550 	cmneq	r0, r0, asr r5
    a7b8:	000006c8 	andeq	r0, r0, r8, asr #13
    a7bc:	003eb311 	eorseq	fp, lr, r1, lsl r3
    a7c0:	01630500 	cmneq	r3, r0, lsl #10
    a7c4:	000004a4 	andeq	r0, r0, r4, lsr #9
    a7c8:	3dbd1100 	ldfccs	f1, [sp]
    a7cc:	64050000 	strvs	r0, [r5], #-0
    a7d0:	0000fa01 	andeq	pc, r0, r1, lsl #20
    a7d4:	d9110400 	ldmdble	r1, {sl}
    a7d8:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    a7dc:	00fa0165 	rscseq	r0, sl, r5, ror #2
    a7e0:	110c0000 	mrsne	r0, (UNDEF: 12)
    a7e4:	0000402c 	andeq	r4, r0, ip, lsr #32
    a7e8:	fa016605 	blx	64004 <_Min_Stack_Size+0x63e04>
    a7ec:	14000000 	strne	r0, [r0], #-0
    a7f0:	003f9811 	eorseq	r9, pc, r1, lsl r8	; <UNPREDICTABLE>
    a7f4:	01670500 	cmneq	r7, r0, lsl #10
    a7f8:	000006c8 	andeq	r0, r0, r8, asr #13
    a7fc:	3ef5111c 	mrccc	1, 7, r1, cr5, cr12, {0}
    a800:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
    a804:	00002501 	andeq	r2, r0, r1, lsl #10
    a808:	41112400 	tstmi	r1, r0, lsl #8
    a80c:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    a810:	00fa0169 	rscseq	r0, sl, r9, ror #2
    a814:	11280000 			; <UNDEFINED> instruction: 0x11280000
    a818:	00003fe7 	andeq	r3, r0, r7, ror #31
    a81c:	fa016a05 	blx	65038 <_Min_Stack_Size+0x64e38>
    a820:	30000000 	andcc	r0, r0, r0
    a824:	003e9d11 	eorseq	r9, lr, r1, lsl sp
    a828:	016b0500 	cmneq	fp, r0, lsl #10
    a82c:	000000fa 	strdeq	r0, [r0], -sl
    a830:	41271138 			; <UNDEFINED> instruction: 0x41271138
    a834:	6c050000 	stcvs	0, cr0, [r5], {-0}
    a838:	0000fa01 	andeq	pc, r0, r1, lsl #20
    a83c:	d5114000 	ldrle	r4, [r1, #-0]
    a840:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    a844:	00fa016d 	rscseq	r0, sl, sp, ror #2
    a848:	00480000 	subeq	r0, r8, r0
    a84c:	0004aa08 	andeq	sl, r4, r8, lsl #20
    a850:	0006d800 	andeq	sp, r6, r0, lsl #16
    a854:	00d20900 	sbcseq	r0, r2, r0, lsl #18
    a858:	00070000 	andeq	r0, r7, r0
    a85c:	05e3040f 	strbeq	r0, [r3, #1039]!	; 0x40f
    a860:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    a864:	14000006 	strne	r0, [r0], #-6
    a868:	00000356 	andeq	r0, r0, r6, asr r3
    a86c:	de040f00 	cdple	15, 0, cr0, cr4, cr0, {0}
    a870:	0f000006 	svceq	0x00000006
    a874:	00059104 	andeq	r9, r5, r4, lsl #2
    a878:	86040f00 	strhi	r0, [r4], -r0, lsl #30
    a87c:	16000001 	strne	r0, [r0], -r1
    a880:	00000706 	andeq	r0, r0, r6, lsl #14
    a884:	00002514 	andeq	r2, r0, r4, lsl r5
    a888:	040f0000 	streq	r0, [pc], #-0	; a890 <_Min_Stack_Size+0xa690>
    a88c:	0000070c 	andeq	r0, r0, ip, lsl #14
    a890:	06fb040f 	ldrbteq	r0, [fp], pc, lsl #8
    a894:	040f0000 	streq	r0, [pc], #-0	; a89c <_Min_Stack_Size+0xa69c>
    a898:	0000062b 	andeq	r0, r0, fp, lsr #12
    a89c:	00418e03 	subeq	r8, r1, r3, lsl #28
    a8a0:	23280600 			; <UNDEFINED> instruction: 0x23280600
    a8a4:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    a8a8:	00004155 	andeq	r4, r0, r5, asr r1
    a8ac:	3a000704 	bcc	c4c4 <_Min_Stack_Size+0xc2c4>
    a8b0:	17000007 	strne	r0, [r0, -r7]
    a8b4:	0000419d 	muleq	r0, sp, r1
    a8b8:	00000110 	andeq	r0, r0, r0, lsl r1
    a8bc:	e9030000 	stmdb	r3, {}	; <UNPREDICTABLE>
    a8c0:	0800003e 	stmdaeq	r0, {r1, r2, r3, r4, r5}
    a8c4:	00054435 	andeq	r4, r5, r5, lsr r4
    a8c8:	41570300 	cmpmi	r7, r0, lsl #6
    a8cc:	62060000 	andvs	r0, r6, #0
    a8d0:	00000718 	andeq	r0, r0, r8, lsl r7
    a8d4:	00414918 	subeq	r4, r1, r8, lsl r9
    a8d8:	01b90800 			; <UNDEFINED> instruction: 0x01b90800
    a8dc:	00000025 	andeq	r0, r0, r5, lsr #32
    a8e0:	00000000 	andeq	r0, r0, r0
    a8e4:	0000005c 	andeq	r0, r0, ip, asr r0
    a8e8:	07ef9c01 	strbeq	r9, [pc, r1, lsl #24]!
    a8ec:	70190000 	andsvc	r0, r9, r0
    a8f0:	01007274 	tsteq	r0, r4, ror r2
    a8f4:	00035622 	andeq	r5, r3, r2, lsr #12
    a8f8:	00014800 	andeq	r4, r1, r0, lsl #16
    a8fc:	74731900 	ldrbtvc	r1, [r3], #-2304	; 0xfffff700
    a900:	22010072 	andcs	r0, r1, #114	; 0x72
    a904:	000004a4 	andeq	r0, r0, r4, lsr #9
    a908:	0000018a 	andeq	r0, r0, sl, lsl #3
    a90c:	0045ca1a 	subeq	ip, r5, sl, lsl sl
    a910:	2c220100 	stfcss	f0, [r2], #-0
    a914:	b7000000 	strlt	r0, [r0, -r0]
    a918:	1b000001 	blne	a924 <_Min_Stack_Size+0xa724>
    a91c:	00746d66 	rsbseq	r6, r4, r6, ror #26
    a920:	04d52201 	ldrbeq	r2, [r5], #513	; 0x201
    a924:	91020000 	mrsls	r0, (UNDEF: 2)
    a928:	721d1c7c 	andsvc	r1, sp, #124, 24	; 0x7c00
    a92c:	01007465 	tsteq	r0, r5, ror #8
    a930:	00002530 	andeq	r2, r0, r0, lsr r5
    a934:	0001e300 	andeq	lr, r1, r0, lsl #6
    a938:	70611e00 	rsbvc	r1, r1, r0, lsl #28
    a93c:	45310100 	ldrmi	r0, [r1, #-256]!	; 0xffffff00
    a940:	03000007 	movweq	r0, #7
    a944:	1e7f8491 	mrcne	4, 3, r8, cr15, cr1, {4}
    a948:	32010066 	andcc	r0, r1, #102	; 0x66
    a94c:	0000073a 	andeq	r0, r0, sl, lsr r7
    a950:	7f889103 	svcvc	0x00889103
    a954:	0000001f 	andeq	r0, r0, pc, lsl r0
    a958:	0008a000 	andeq	sl, r8, r0
    a95c:	53012000 	movwpl	r2, #4096	; 0x1000
    a960:	20789102 	rsbscs	r9, r8, r2, lsl #2
    a964:	91035201 	tstls	r3, r1, lsl #4
    a968:	01200674 			; <UNDEFINED> instruction: 0x01200674
    a96c:	80910351 	addshi	r0, r1, r1, asr r3
    a970:	1800007f 	stmdane	r0, {r0, r1, r2, r3, r4, r5, r6}
    a974:	000041a2 	andeq	r4, r0, r2, lsr #3
    a978:	25010f08 	strcs	r0, [r1, #-3848]	; 0xfffff0f8
    a97c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    a980:	64080067 	strvs	r0, [r8], #-103	; 0xffffff99
    a984:	01000000 	mrseq	r0, (UNDEF: 0)
    a988:	0008949c 	muleq	r8, ip, r4
    a98c:	74731900 	ldrbtvc	r1, [r3], #-2304	; 0xfffff700
    a990:	55010072 	strpl	r0, [r1, #-114]	; 0xffffff8e
    a994:	000004a4 	andeq	r0, r0, r4, lsr #9
    a998:	000001f6 	strdeq	r0, [r0], -r6
    a99c:	0045ca1a 	subeq	ip, r5, sl, lsl sl
    a9a0:	2c550100 	ldfcse	f0, [r5], {-0}
    a9a4:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
    a9a8:	1b000002 	blne	a9b8 <_Min_Stack_Size+0xa7b8>
    a9ac:	00746d66 	rsbseq	r6, r4, r6, ror #26
    a9b0:	04d55501 	ldrbeq	r5, [r5], #1281	; 0x501
    a9b4:	91020000 	mrsls	r0, (UNDEF: 2)
    a9b8:	721d1c78 	andsvc	r1, sp, #120, 24	; 0x7800
    a9bc:	01007465 	tsteq	r0, r5, ror #8
    a9c0:	00002561 	andeq	r2, r0, r1, ror #10
    a9c4:	00027500 	andeq	r7, r2, r0, lsl #10
    a9c8:	70611e00 	rsbvc	r1, r1, r0, lsl #28
    a9cc:	45620100 	strbmi	r0, [r2, #-256]!	; 0xffffff00
    a9d0:	03000007 	movweq	r0, #7
    a9d4:	1e7efc91 	mrcne	12, 3, APSR_nzcv, cr14, cr1, {4}
    a9d8:	63010066 	movwvs	r0, #4198	; 0x1066
    a9dc:	0000073a 	andeq	r0, r0, sl, lsr r7
    a9e0:	7f809103 	svcvc	0x00809103
    a9e4:	7274701d 	rsbsvc	r7, r4, #29
    a9e8:	56640100 	strbtpl	r0, [r4], -r0, lsl #2
    a9ec:	88000003 	stmdahi	r0, {r0, r1}
    a9f0:	1f000002 	svcne	0x00000002
    a9f4:	080067ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl, sp, lr}
    a9f8:	000008a0 	andeq	r0, r0, r0, lsr #17
    a9fc:	02530120 	subseq	r0, r3, #32, 2
    aa00:	01206c91 			; <UNDEFINED> instruction: 0x01206c91
    aa04:	68910352 	ldmvs	r1, {r1, r4, r6, r8, r9}
    aa08:	51012006 	tstpl	r1, r6
    aa0c:	7ef09103 	nrmvcs	f1, f3
    aa10:	02500120 	subseq	r0, r0, #32, 2
    aa14:	00000075 	andeq	r0, r0, r5, ror r0
    aa18:	00445e21 	subeq	r5, r4, r1, lsr #28
    aa1c:	02fa0500 	rscseq	r0, sl, #0, 10
    aa20:	00000356 	andeq	r0, r0, r6, asr r3
    aa24:	0041ab22 	subeq	sl, r1, r2, lsr #22
    aa28:	259a0900 	ldrcs	r0, [sl, #2304]	; 0x900
    aa2c:	c4000000 	strgt	r0, [r0], #-0
    aa30:	14000008 	strne	r0, [r0], #-8
    aa34:	00000356 	andeq	r0, r0, r6, asr r3
    aa38:	0008c414 	andeq	ip, r8, r4, lsl r4
    aa3c:	04d51400 	ldrbeq	r1, [r5], #1024	; 0x400
    aa40:	45140000 	ldrmi	r0, [r4, #-0]
    aa44:	00000007 	andeq	r0, r0, r7
    aa48:	073a040f 	ldreq	r0, [sl, -pc, lsl #8]!
    aa4c:	df000000 	svcle	0x00000000
    aa50:	04000000 	streq	r0, [r0], #-0
    aa54:	00229f00 	eoreq	r9, r2, r0, lsl #30
    aa58:	e0010400 	and	r0, r1, r0, lsl #8
    aa5c:	0100003c 	tsteq	r0, ip, lsr r0
    aa60:	00004221 	andeq	r4, r0, r1, lsr #4
    aa64:	00003c2d 	andeq	r3, r0, sp, lsr #24
    aa68:	00000c38 	andeq	r0, r0, r8, lsr ip
    aa6c:	00000000 	andeq	r0, r0, r0
    aa70:	0000488b 	andeq	r4, r0, fp, lsl #17
    aa74:	69050402 	stmdbvs	r5, {r1, sl}
    aa78:	0300746e 	movweq	r7, #1134	; 0x46e
    aa7c:	00ff0704 	rscseq	r0, pc, r4, lsl #14
    aa80:	02030000 	andeq	r0, r3, #0
    aa84:	00012307 	andeq	r2, r1, r7, lsl #6
    aa88:	06010300 	streq	r0, [r1], -r0, lsl #6
    aa8c:	000000c3 	andeq	r0, r0, r3, asr #1
    aa90:	c1080103 	tstgt	r8, r3, lsl #2
    aa94:	03000000 	movweq	r0, #0
    aa98:	00510502 	subseq	r0, r1, r2, lsl #10
    aa9c:	04030000 	streq	r0, [r3], #-0
    aaa0:	00006d05 	andeq	r6, r0, r5, lsl #26
    aaa4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    aaa8:	000000fa 	strdeq	r0, [r0], -sl
    aaac:	68050803 	stmdavs	r5, {r0, r1, fp}
    aab0:	03000000 	movweq	r0, #0
    aab4:	00f50708 	rscseq	r0, r5, r8, lsl #14
    aab8:	04030000 	streq	r0, [r3], #-0
    aabc:	00001507 	andeq	r1, r0, r7, lsl #10
    aac0:	78040400 	stmdavc	r4, {sl}
    aac4:	03000000 	movweq	r0, #0
    aac8:	00ca0801 	sbceq	r0, sl, r1, lsl #16
    aacc:	04040000 	streq	r0, [r4], #-0
    aad0:	00000085 	andeq	r0, r0, r5, lsl #1
    aad4:	00007805 	andeq	r7, r0, r5, lsl #16
    aad8:	424f0600 	submi	r0, pc, #0, 12
    aadc:	1b020000 	blne	8aae4 <_Min_Stack_Size+0x8a8e4>
    aae0:	00000072 	andeq	r0, r0, r2, ror r0
    aae4:	080067cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, sp, lr}
    aae8:	0000001c 	andeq	r0, r0, ip, lsl r0
    aaec:	00d79c01 	sbcseq	r9, r7, r1, lsl #24
    aaf0:	73070000 	movwvc	r0, #28672	; 0x7000
    aaf4:	3d010031 	stccc	0, cr0, [r1, #-196]	; 0xffffff3c
    aaf8:	0000007f 	andeq	r0, r0, pc, ror r0
    aafc:	0000029b 	muleq	r0, fp, r2
    ab00:	01006907 	tsteq	r0, r7, lsl #18
    ab04:	0000253d 	andeq	r2, r0, sp, lsr r5
    ab08:	0002bc00 	andeq	fp, r2, r0, lsl #24
    ab0c:	00730800 	rsbseq	r0, r3, r0, lsl #16
    ab10:	00d74101 	sbcseq	r4, r7, r1, lsl #2
    ab14:	02dd0000 	sbcseq	r0, sp, #0
    ab18:	63090000 	movwvs	r0, #36864	; 0x9000
    ab1c:	41420100 	mrsmi	r0, (UNDEF: 82)
    ab20:	01000000 	mrseq	r0, (UNDEF: 0)
    ab24:	04040051 	streq	r0, [r4], #-81	; 0xffffffaf
    ab28:	000000dd 	ldrdeq	r0, [r0], -sp
    ab2c:	00004105 	andeq	r4, r0, r5, lsl #2
    ab30:	00b90000 	adcseq	r0, r9, r0
    ab34:	00040000 	andeq	r0, r4, r0
    ab38:	00002322 	andeq	r2, r0, r2, lsr #6
    ab3c:	3ce00104 	stfcce	f0, [r0], #16
    ab40:	5d010000 	stcpl	0, cr0, [r1, #-0]
    ab44:	93000042 	movwls	r0, #66	; 0x42
    ab48:	48000042 	stmdami	r0, {r1, r6}
    ab4c:	0000000c 	andeq	r0, r0, ip
    ab50:	4b000000 	blmi	ab58 <_Min_Stack_Size+0xa958>
    ab54:	02000049 	andeq	r0, r0, #73	; 0x49
    ab58:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    ab5c:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
    ab60:	0000ff07 	andeq	pc, r0, r7, lsl #30
    ab64:	07020300 	streq	r0, [r2, -r0, lsl #6]
    ab68:	00000123 	andeq	r0, r0, r3, lsr #2
    ab6c:	c3060103 	movwgt	r0, #24835	; 0x6103
    ab70:	03000000 	movweq	r0, #0
    ab74:	00c10801 	sbceq	r0, r1, r1, lsl #16
    ab78:	02030000 	andeq	r0, r3, #0
    ab7c:	00005105 	andeq	r5, r0, r5, lsl #2
    ab80:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    ab84:	0000006d 	andeq	r0, r0, sp, rrx
    ab88:	fa070403 	blx	1cbb9c <_Min_Stack_Size+0x1cb99c>
    ab8c:	03000000 	movweq	r0, #0
    ab90:	00680508 	rsbeq	r0, r8, r8, lsl #10
    ab94:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    ab98:	0000f507 	andeq	pc, r0, r7, lsl #10
    ab9c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    aba0:	00000015 	andeq	r0, r0, r5, lsl r0
    aba4:	00780404 	rsbseq	r0, r8, r4, lsl #8
    aba8:	01030000 	mrseq	r0, (UNDEF: 3)
    abac:	0000ca08 	andeq	ip, r0, r8, lsl #20
    abb0:	85040400 	strhi	r0, [r4, #-1024]	; 0xfffffc00
    abb4:	05000000 	streq	r0, [r0, #-0]
    abb8:	00000078 	andeq	r0, r0, r8, ror r0
    abbc:	00425606 	subeq	r5, r2, r6, lsl #12
    abc0:	721e0200 	andsvc	r0, lr, #0, 4
    abc4:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    abc8:	10080067 	andne	r0, r8, r7, rrx
    abcc:	01000000 	mrseq	r0, (UNDEF: 0)
    abd0:	7364079c 	cmnvc	r4, #156, 14	; 0x2700000
    abd4:	2a010074 	bcs	4adac <_Min_Stack_Size+0x4abac>
    abd8:	00000072 	andeq	r0, r0, r2, ror r0
    abdc:	00000306 	andeq	r0, r0, r6, lsl #6
    abe0:	63727308 	cmnvs	r2, #8, 6	; 0x20000000
    abe4:	7f2a0100 	svcvc	0x002a0100
    abe8:	01000000 	mrseq	r0, (UNDEF: 0)
    abec:	c9000051 	stmdbgt	r0, {r0, r4, r6}
    abf0:	04000000 	streq	r0, [r0], #-0
    abf4:	00239400 	eoreq	r9, r3, r0, lsl #8
    abf8:	e0010400 	and	r0, r1, r0, lsl #8
    abfc:	0100003c 	tsteq	r0, ip, lsr r0
    ac00:	00004302 	andeq	r4, r0, r2, lsl #6
    ac04:	00004293 	muleq	r0, r3, r2
    ac08:	00000c58 	andeq	r0, r0, r8, asr ip
    ac0c:	00000000 	andeq	r0, r0, r0
    ac10:	00004a07 	andeq	r4, r0, r7, lsl #20
    ac14:	69050402 	stmdbvs	r5, {r1, sl}
    ac18:	0300746e 	movweq	r7, #1134	; 0x46e
    ac1c:	00004508 	andeq	r4, r0, r8, lsl #10
    ac20:	0037d402 	eorseq	sp, r7, r2, lsl #8
    ac24:	04040000 	streq	r0, [r4], #-0
    ac28:	0000ff07 	andeq	pc, r0, r7, lsl #30
    ac2c:	07020400 	streq	r0, [r2, -r0, lsl #8]
    ac30:	00000123 	andeq	r0, r0, r3, lsr #2
    ac34:	c3060104 	movwgt	r0, #24836	; 0x6104
    ac38:	04000000 	streq	r0, [r0], #-0
    ac3c:	00c10801 	sbceq	r0, r1, r1, lsl #16
    ac40:	02040000 	andeq	r0, r4, #0
    ac44:	00005105 	andeq	r5, r0, r5, lsl #2
    ac48:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    ac4c:	0000006d 	andeq	r0, r0, sp, rrx
    ac50:	fa070404 	blx	1cbc68 <_Min_Stack_Size+0x1cba68>
    ac54:	04000000 	streq	r0, [r0], #-0
    ac58:	00680508 	rsbeq	r0, r8, r8, lsl #10
    ac5c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    ac60:	0000f507 	andeq	pc, r0, r7, lsl #10
    ac64:	07040400 	streq	r0, [r4, -r0, lsl #8]
    ac68:	00000015 	andeq	r0, r0, r5, lsl r0
    ac6c:	ca080104 	bgt	20b084 <_Min_Stack_Size+0x20ae84>
    ac70:	05000000 	streq	r0, [r0, #-0]
    ac74:	00008a04 	andeq	r8, r0, r4, lsl #20
    ac78:	007d0600 	rsbseq	r0, sp, r0, lsl #12
    ac7c:	40070000 	andmi	r0, r7, r0
    ac80:	03000043 	movweq	r0, #67	; 0x43
    ac84:	00002c21 	andeq	r2, r0, r1, lsr #24
    ac88:	0067f800 	rsbeq	pc, r7, r0, lsl #16
    ac8c:	00001008 	andeq	r1, r0, r8
    ac90:	089c0100 	ldmeq	ip, {r8}
    ac94:	00727473 	rsbseq	r7, r2, r3, ror r4
    ac98:	00843801 	addeq	r3, r4, r1, lsl #16
    ac9c:	03270000 			; <UNDEFINED> instruction: 0x03270000
    aca0:	38090000 	stmdacc	r9, {}	; <UNPREDICTABLE>
    aca4:	01000043 	tsteq	r0, r3, asr #32
    aca8:	0000253a 	andeq	r2, r0, sl, lsr r5
    acac:	6e650a00 	vmulvs.f32	s1, s10, s0
    acb0:	46010064 	strmi	r0, [r1], -r4, rrx
    acb4:	00000084 	andeq	r0, r0, r4, lsl #1
    acb8:	00005301 	andeq	r5, r0, r1, lsl #6
    acbc:	000000cb 	andeq	r0, r0, fp, asr #1
    acc0:	24200004 	strtcs	r0, [r0], #-4
    acc4:	01040000 	mrseq	r0, (UNDEF: 4)
    acc8:	00003ce0 	andeq	r3, r0, r0, ror #25
    accc:	00434701 	subeq	r4, r3, r1, lsl #14
    acd0:	003c2d00 	eorseq	r2, ip, r0, lsl #26
    acd4:	000c6800 	andeq	r6, ip, r0, lsl #16
    acd8:	00000000 	andeq	r0, r0, r0
    acdc:	004afc00 	subeq	pc, sl, r0, lsl #24
    ace0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    ace4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    ace8:	00450803 	subeq	r0, r5, r3, lsl #16
    acec:	37d40200 	ldrbcc	r0, [r4, r0, lsl #4]
    acf0:	04000000 	streq	r0, [r0], #-0
    acf4:	00ff0704 	rscseq	r0, pc, r4, lsl #14
    acf8:	02040000 	andeq	r0, r4, #0
    acfc:	00012307 	andeq	r2, r1, r7, lsl #6
    ad00:	06010400 	streq	r0, [r1], -r0, lsl #8
    ad04:	000000c3 	andeq	r0, r0, r3, asr #1
    ad08:	c1080104 	tstgt	r8, r4, lsl #2
    ad0c:	04000000 	streq	r0, [r0], #-0
    ad10:	00510502 	subseq	r0, r1, r2, lsl #10
    ad14:	04040000 	streq	r0, [r4], #-0
    ad18:	00006d05 	andeq	r6, r0, r5, lsl #26
    ad1c:	07040400 	streq	r0, [r4, -r0, lsl #8]
    ad20:	000000fa 	strdeq	r0, [r0], -sl
    ad24:	68050804 	stmdavs	r5, {r2, fp}
    ad28:	04000000 	streq	r0, [r0], #-0
    ad2c:	00f50708 	rscseq	r0, r5, r8, lsl #14
    ad30:	04040000 	streq	r0, [r4], #-0
    ad34:	00001507 	andeq	r1, r0, r7, lsl #10
    ad38:	08010400 	stmdaeq	r1, {sl}
    ad3c:	000000ca 	andeq	r0, r0, sl, asr #1
    ad40:	008a0405 	addeq	r0, sl, r5, lsl #8
    ad44:	7d060000 	stcvc	0, cr0, [r6, #-0]
    ad48:	07000000 	streq	r0, [r0, -r0]
    ad4c:	00004376 	andeq	r4, r0, r6, ror r3
    ad50:	00252303 	eoreq	r2, r5, r3, lsl #6
    ad54:	68080000 	stmdavs	r8, {}	; <UNPREDICTABLE>
    ad58:	00320800 	eorseq	r0, r2, r0, lsl #16
    ad5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    ad60:	00317308 	eorseq	r7, r1, r8, lsl #6
    ad64:	00843e01 	addeq	r3, r4, r1, lsl #28
    ad68:	03480000 	movteq	r0, #32768	; 0x8000
    ad6c:	73080000 	movwvc	r0, #32768	; 0x8000
    ad70:	3e010032 	mcrcc	0, 0, r0, cr1, cr2, {1}
    ad74:	00000084 	andeq	r0, r0, r4, lsl #1
    ad78:	00000397 	muleq	r0, r7, r3
    ad7c:	01006e08 	tsteq	r0, r8, lsl #28
    ad80:	00002c3e 	andeq	r2, r0, lr, lsr ip
    ad84:	0003b500 	andeq	fp, r3, r0, lsl #10
    ad88:	f1000000 	cps	#0
    ad8c:	04000000 	streq	r0, [r0], #-0
    ad90:	00249000 	eoreq	r9, r4, r0
    ad94:	e0010400 	and	r0, r1, r0, lsl #8
    ad98:	0100003c 	tsteq	r0, ip, lsr r0
    ad9c:	0000437e 	andeq	r4, r0, lr, ror r3
    ada0:	00003c2d 	andeq	r3, r0, sp, lsr #24
    ada4:	00000c78 	andeq	r0, r0, r8, ror ip
    ada8:	00000000 	andeq	r0, r0, r0
    adac:	00004bf5 	strdeq	r4, [r0], -r5
    adb0:	69050402 	stmdbvs	r5, {r1, sl}
    adb4:	0300746e 	movweq	r7, #1134	; 0x46e
    adb8:	00004508 	andeq	r4, r0, r8, lsl #10
    adbc:	0037d402 	eorseq	sp, r7, r2, lsl #8
    adc0:	04040000 	streq	r0, [r4], #-0
    adc4:	0000ff07 	andeq	pc, r0, r7, lsl #30
    adc8:	07020400 	streq	r0, [r2, -r0, lsl #8]
    adcc:	00000123 	andeq	r0, r0, r3, lsr #2
    add0:	c3060104 	movwgt	r0, #24836	; 0x6104
    add4:	04000000 	streq	r0, [r0], #-0
    add8:	00c10801 	sbceq	r0, r1, r1, lsl #16
    addc:	02040000 	andeq	r0, r4, #0
    ade0:	00005105 	andeq	r5, r0, r5, lsl #2
    ade4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    ade8:	0000006d 	andeq	r0, r0, sp, rrx
    adec:	fa070404 	blx	1cbe04 <_Min_Stack_Size+0x1cbc04>
    adf0:	04000000 	streq	r0, [r0], #-0
    adf4:	00680508 	rsbeq	r0, r8, r8, lsl #10
    adf8:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    adfc:	0000f507 	andeq	pc, r0, r7, lsl #10
    ae00:	07040400 	streq	r0, [r4, -r0, lsl #8]
    ae04:	00000015 	andeq	r0, r0, r5, lsl r0
    ae08:	00830405 	addeq	r0, r3, r5, lsl #8
    ae0c:	01040000 	mrseq	r0, (UNDEF: 4)
    ae10:	0000ca08 	andeq	ip, r0, r8, lsl #20
    ae14:	90040500 	andls	r0, r4, r0, lsl #10
    ae18:	06000000 	streq	r0, [r0], -r0
    ae1c:	00000083 	andeq	r0, r0, r3, lsl #1
    ae20:	0043ad07 	subeq	sl, r3, r7, lsl #26
    ae24:	7d240300 	stcvc	3, cr0, [r4, #-0]
    ae28:	3a000000 	bcc	ae30 <_Min_Stack_Size+0xac30>
    ae2c:	24080068 	strcs	r0, [r8], #-104	; 0xffffff98
    ae30:	01000000 	mrseq	r0, (UNDEF: 0)
    ae34:	3c9c089c 	ldccc	8, cr0, [ip], {156}	; 0x9c
    ae38:	45010000 	strmi	r0, [r1, #-0]
    ae3c:	0000007d 	andeq	r0, r0, sp, ror r0
    ae40:	97095001 	strls	r5, [r9, -r1]
    ae44:	0100003c 	tsteq	r0, ip, lsr r0
    ae48:	00008a45 	andeq	r8, r0, r5, asr #20
    ae4c:	0003d300 	andeq	sp, r3, r0, lsl #6
    ae50:	3e8d0900 	cdpcc	9, 8, cr0, cr13, cr0, {0}
    ae54:	45010000 	strmi	r0, [r1, #-0]
    ae58:	0000002c 	andeq	r0, r0, ip, lsr #32
    ae5c:	000003f4 	strdeq	r0, [r0], -r4
    ae60:	0043bb0a 	subeq	fp, r3, sl, lsl #22
    ae64:	7d4b0100 	stfvce	f0, [fp, #-0]
    ae68:	2a000000 	bcs	ae70 <_Min_Stack_Size+0xac70>
    ae6c:	0a000004 	beq	ae84 <_Min_Stack_Size+0xac84>
    ae70:	000043b5 			; <UNDEFINED> instruction: 0x000043b5
    ae74:	008a4c01 	addeq	r4, sl, r1, lsl #24
    ae78:	04780000 	ldrbteq	r0, [r8], #-0
    ae7c:	00000000 	andeq	r0, r0, r0
    ae80:	000007cf 	andeq	r0, r0, pc, asr #15
    ae84:	251e0004 	ldrcs	r0, [lr, #-4]
    ae88:	01040000 	mrseq	r0, (UNDEF: 4)
    ae8c:	00003ce0 	andeq	r3, r0, r0, ror #25
    ae90:	00446a01 	subeq	r6, r4, r1, lsl #20
    ae94:	0043de00 	subeq	sp, r3, r0, lsl #28
    ae98:	004cea00 	subeq	lr, ip, r0, lsl #20
    ae9c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    aea0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    aea4:	ff070403 			; <UNDEFINED> instruction: 0xff070403
    aea8:	03000000 	movweq	r0, #0
    aeac:	01230702 			; <UNDEFINED> instruction: 0x01230702
    aeb0:	01030000 	mrseq	r0, (UNDEF: 3)
    aeb4:	0000c306 	andeq	ip, r0, r6, lsl #6
    aeb8:	08010300 	stmdaeq	r1, {r8, r9}
    aebc:	000000c1 	andeq	r0, r0, r1, asr #1
    aec0:	51050203 	tstpl	r5, r3, lsl #4
    aec4:	03000000 	movweq	r0, #0
    aec8:	006d0504 	rsbeq	r0, sp, r4, lsl #10
    aecc:	04030000 	streq	r0, [r3], #-0
    aed0:	0000fa07 	andeq	pc, r0, r7, lsl #20
    aed4:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
    aed8:	00000068 	andeq	r0, r0, r8, rrx
    aedc:	f5070803 			; <UNDEFINED> instruction: 0xf5070803
    aee0:	04000000 	streq	r0, [r0], #-0
    aee4:	00003ece 	andeq	r3, r0, lr, asr #29
    aee8:	001d0701 	andseq	r0, sp, r1, lsl #14
    aeec:	34040000 	strcc	r0, [r4], #-0
    aef0:	0200003e 	andeq	r0, r0, #62	; 0x3e
    aef4:	00004710 	andeq	r4, r0, r0, lsl r7
    aef8:	3f890400 	svccc	0x00890400
    aefc:	27020000 	strcs	r0, [r2, -r0]
    af00:	00000047 	andeq	r0, r0, r7, asr #32
    af04:	00403a05 	subeq	r3, r0, r5, lsl #20
    af08:	01610300 	cmneq	r1, r0, lsl #6
    af0c:	00000024 	andeq	r0, r0, r4, lsr #32
    af10:	4a020406 	bmi	8bf30 <_Min_Stack_Size+0x8bd30>
    af14:	000000af 	andeq	r0, r0, pc, lsr #1
    af18:	003e3b07 	eorseq	r3, lr, r7, lsl #22
    af1c:	844c0200 	strbhi	r0, [ip], #-512	; 0xfffffe00
    af20:	07000000 	streq	r0, [r0, -r0]
    af24:	00003fc4 	andeq	r3, r0, r4, asr #31
    af28:	00af4d02 	adceq	r4, pc, r2, lsl #26
    af2c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    af30:	00000039 	andeq	r0, r0, r9, lsr r0
    af34:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    af38:	0000bf09 	andeq	fp, r0, r9, lsl #30
    af3c:	03000300 	movweq	r0, #768	; 0x300
    af40:	00150704 	andseq	r0, r5, r4, lsl #14
    af44:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
    af48:	00e74702 	rsceq	r4, r7, r2, lsl #14
    af4c:	8b0b0000 	blhi	2caf54 <_Min_Stack_Size+0x2cad54>
    af50:	0200003e 	andeq	r0, r0, #62	; 0x3e
    af54:	00001d49 	andeq	r1, r0, r9, asr #26
    af58:	410b0000 	mrsmi	r0, (UNDEF: 11)
    af5c:	0200003e 	andeq	r0, r0, #62	; 0x3e
    af60:	0000904e 	andeq	r9, r0, lr, asr #32
    af64:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
    af68:	0000406b 	andeq	r4, r0, fp, rrx
    af6c:	00c64f02 	sbceq	r4, r6, r2, lsl #30
    af70:	a2040000 	andge	r0, r4, #0
    af74:	0200003f 	andeq	r0, r0, #63	; 0x3f
    af78:	00006353 	andeq	r6, r0, r3, asr r3
    af7c:	04040c00 	streq	r0, [r4], #-3072	; 0xfffff400
    af80:	000040a8 	andeq	r4, r0, r8, lsr #1
    af84:	004e1604 	subeq	r1, lr, r4, lsl #12
    af88:	760d0000 	strvc	r0, [sp], -r0
    af8c:	18000040 	stmdane	r0, {r6}
    af90:	015d2d04 	cmpeq	sp, r4, lsl #26
    af94:	050b0000 	streq	r0, [fp, #-0]
    af98:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    af9c:	00015d2f 	andeq	r5, r1, pc, lsr #26
    afa0:	5f0e0000 	svcpl	0x000e0000
    afa4:	3004006b 	andcc	r0, r4, fp, rrx
    afa8:	0000001d 	andeq	r0, r0, sp, lsl r0
    afac:	407e0b04 	rsbsmi	r0, lr, r4, lsl #22
    afb0:	30040000 	andcc	r0, r4, r0
    afb4:	0000001d 	andeq	r0, r0, sp, lsl r0
    afb8:	40fa0b08 	rscsmi	r0, sl, r8, lsl #22
    afbc:	30040000 	andcc	r0, r4, r0
    afc0:	0000001d 	andeq	r0, r0, sp, lsl r0
    afc4:	401b0b0c 	andsmi	r0, fp, ip, lsl #22
    afc8:	30040000 	andcc	r0, r4, r0
    afcc:	0000001d 	andeq	r0, r0, sp, lsl r0
    afd0:	785f0e10 	ldmdavc	pc, {r4, r9, sl, fp}^	; <UNPREDICTABLE>
    afd4:	63310400 	teqvs	r1, #0, 8
    afd8:	14000001 	strne	r0, [r0], #-1
    afdc:	0a040f00 	beq	10ebe4 <_Min_Stack_Size+0x10e9e4>
    afe0:	08000001 	stmdaeq	r0, {r0}
    afe4:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    afe8:	00000173 	andeq	r0, r0, r3, ror r1
    afec:	0000bf09 	andeq	fp, r0, r9, lsl #30
    aff0:	0d000000 	stceq	0, cr0, [r0, #-0]
    aff4:	00004027 	andeq	r4, r0, r7, lsr #32
    aff8:	ec350424 	cfldrs	mvf0, [r5], #-144	; 0xffffff70
    affc:	0b000001 	bleq	b008 <_Min_Stack_Size+0xae08>
    b000:	00003fb1 			; <UNDEFINED> instruction: 0x00003fb1
    b004:	001d3704 	andseq	r3, sp, r4, lsl #14
    b008:	0b000000 	bleq	b010 <_Min_Stack_Size+0xae10>
    b00c:	00003f02 	andeq	r3, r0, r2, lsl #30
    b010:	001d3804 	andseq	r3, sp, r4, lsl #16
    b014:	0b040000 	bleq	10b01c <_Min_Stack_Size+0x10ae1c>
    b018:	00003fba 			; <UNDEFINED> instruction: 0x00003fba
    b01c:	001d3904 	andseq	r3, sp, r4, lsl #18
    b020:	0b080000 	bleq	20b028 <_Min_Stack_Size+0x20ae28>
    b024:	00003e93 	muleq	r0, r3, lr
    b028:	001d3a04 	andseq	r3, sp, r4, lsl #20
    b02c:	0b0c0000 	bleq	30b034 <_Min_Stack_Size+0x30ae34>
    b030:	000040be 	strheq	r4, [r0], -lr
    b034:	001d3b04 	andseq	r3, sp, r4, lsl #22
    b038:	0b100000 	bleq	40b040 <_Min_Stack_Size+0x40ae40>
    b03c:	00004086 	andeq	r4, r0, r6, lsl #1
    b040:	001d3c04 	andseq	r3, sp, r4, lsl #24
    b044:	0b140000 	bleq	50b04c <_Min_Stack_Size+0x50ae4c>
    b048:	00003f4a 	andeq	r3, r0, sl, asr #30
    b04c:	001d3d04 	andseq	r3, sp, r4, lsl #26
    b050:	0b180000 	bleq	60b058 <_Min_Stack_Size+0x60ae58>
    b054:	0000409e 	muleq	r0, lr, r0
    b058:	001d3e04 	andseq	r3, sp, r4, lsl #28
    b05c:	0b1c0000 	bleq	70b064 <_Min_Stack_Size+0x70ae64>
    b060:	00003f6e 	andeq	r3, r0, lr, ror #30
    b064:	001d3f04 	andseq	r3, sp, r4, lsl #30
    b068:	00200000 	eoreq	r0, r0, r0
    b06c:	003e490d 	eorseq	r4, lr, sp, lsl #18
    b070:	73040800 	movwvc	r0, #18432	; 0x4800
    b074:	00000211 	andeq	r0, r0, r1, lsl r2
    b078:	0033a70b 	eorseq	sl, r3, fp, lsl #14
    b07c:	11740400 	cmnne	r4, r0, lsl #8
    b080:	00000002 	andeq	r0, r0, r2
    b084:	0045c90b 	subeq	ip, r5, fp, lsl #18
    b088:	1d750400 	cfldrdne	mvd0, [r5, #-0]
    b08c:	04000000 	streq	r0, [r0], #-0
    b090:	39040f00 	stmdbcc	r4, {r8, r9, sl, fp}
    b094:	0d000000 	stceq	0, cr0, [r0, #-0]
    b098:	000044a8 	andeq	r4, r0, r8, lsr #9
    b09c:	81970420 	orrshi	r0, r7, r0, lsr #8
    b0a0:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    b0a4:	0400705f 	streq	r7, [r0], #-95	; 0xffffffa1
    b0a8:	00021198 	muleq	r2, r8, r1
    b0ac:	5f0e0000 	svcpl	0x000e0000
    b0b0:	99040072 	stmdbls	r4, {r1, r4, r5, r6}
    b0b4:	0000001d 	andeq	r0, r0, sp, lsl r0
    b0b8:	775f0e04 	ldrbvc	r0, [pc, -r4, lsl #28]
    b0bc:	1d9a0400 	cfldrsne	mvf0, [sl]
    b0c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b0c4:	003e750b 	eorseq	r7, lr, fp, lsl #10
    b0c8:	409b0400 	addsmi	r0, fp, r0, lsl #8
    b0cc:	0c000000 	stceq	0, cr0, [r0], {-0}
    b0d0:	0040060b 	subeq	r0, r0, fp, lsl #12
    b0d4:	409c0400 	addsmi	r0, ip, r0, lsl #8
    b0d8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    b0dc:	66625f0e 	strbtvs	r5, [r2], -lr, lsl #30
    b0e0:	ec9d0400 	cfldrs	mvf0, [sp], {0}
    b0e4:	10000001 	andne	r0, r0, r1
    b0e8:	0040e60b 	subeq	lr, r0, fp, lsl #12
    b0ec:	1d9e0400 	cfldrsne	mvf0, [lr]
    b0f0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    b0f4:	000df80b 	andeq	pc, sp, fp, lsl #16
    b0f8:	ada00400 	cfstrsge	mvf0, [r0]
    b0fc:	1c000003 	stcne	0, cr0, [r0], {3}
    b100:	41101000 	tstmi	r0, r0
    b104:	04600000 	strbteq	r0, [r0], #-0
    b108:	03ad0172 			; <UNDEFINED> instruction: 0x03ad0172
    b10c:	ee110000 	cdp	0, 1, cr0, cr1, cr0, {0}
    b110:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
    b114:	001d0176 	andseq	r0, sp, r6, ror r1
    b118:	11000000 	mrsne	r0, (UNDEF: 0)
    b11c:	00004450 	andeq	r4, r0, r0, asr r4
    b120:	e2017b04 	and	r7, r1, #4, 22	; 0x1000
    b124:	04000005 	streq	r0, [r0], #-5
    b128:	0044a011 	subeq	sl, r4, r1, lsl r0
    b12c:	017b0400 	cmneq	fp, r0, lsl #8
    b130:	000005e2 	andeq	r0, r0, r2, ror #11
    b134:	43d61108 	bicsmi	r1, r6, #8, 2
    b138:	7b040000 	blvc	10b140 <_Min_Stack_Size+0x10af40>
    b13c:	0005e201 	andeq	lr, r5, r1, lsl #4
    b140:	d0110c00 	andsle	r0, r1, r0, lsl #24
    b144:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    b148:	001d017d 	andseq	r0, sp, sp, ror r1
    b14c:	11100000 	tstne	r0, r0
    b150:	00004136 	andeq	r4, r0, r6, lsr r1
    b154:	fb017f04 	blx	6ad6e <_Min_Stack_Size+0x6ab6e>
    b158:	14000004 	strne	r0, [r0], #-4
    b15c:	003f7e11 	eorseq	r7, pc, r1, lsl lr	; <UNPREDICTABLE>
    b160:	01810400 	orreq	r0, r1, r0, lsl #8
    b164:	0000001d 	andeq	r0, r0, sp, lsl r0
    b168:	404f1118 	submi	r1, pc, r8, lsl r1	; <UNPREDICTABLE>
    b16c:	83040000 	movwhi	r0, #16384	; 0x4000
    b170:	00001d01 	andeq	r1, r0, r1, lsl #26
    b174:	17111c00 	ldrne	r1, [r1, -r0, lsl #24]
    b178:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    b17c:	052c0184 	streq	r0, [ip, #-388]!	; 0xfffffe7c
    b180:	12200000 	eorne	r0, r0, #0
    b184:	00706d5f 	rsbseq	r6, r0, pc, asr sp
    b188:	2f018604 	svccs	0x00018604
    b18c:	24000007 	strcs	r0, [r0], #-7
    b190:	00406111 	subeq	r6, r0, r1, lsl r1
    b194:	01880400 	orreq	r0, r8, r0, lsl #8
    b198:	00000740 	andeq	r0, r0, r0, asr #14
    b19c:	400c1128 	andmi	r1, ip, r8, lsr #2
    b1a0:	8a040000 	bhi	10b1a8 <_Min_Stack_Size+0x10afa8>
    b1a4:	00001d01 	andeq	r1, r0, r1, lsl #26
    b1a8:	c0112c00 	andsgt	r2, r1, r0, lsl #24
    b1ac:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
    b1b0:	001d018d 	andseq	r0, sp, sp, lsl #3
    b1b4:	11300000 	teqne	r0, r0
    b1b8:	00003ff6 	strdeq	r3, [r0], -r6
    b1bc:	fb018e04 	blx	6e9d6 <_Min_Stack_Size+0x6e7d6>
    b1c0:	34000004 	strcc	r0, [r0], #-4
    b1c4:	003eae11 	eorseq	sl, lr, r1, lsl lr
    b1c8:	01900400 	orrseq	r0, r0, r0, lsl #8
    b1cc:	00000746 	andeq	r0, r0, r6, asr #14
    b1d0:	3e7c1138 	mrccc	1, 3, r1, cr12, cr8, {1}
    b1d4:	91040000 	mrsls	r0, (UNDEF: 4)
    b1d8:	00074c01 	andeq	r4, r7, r1, lsl #24
    b1dc:	54113c00 	ldrpl	r3, [r1], #-3072	; 0xfffff400
    b1e0:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    b1e4:	04fb0192 	ldrbteq	r0, [fp], #402	; 0x192
    b1e8:	11400000 	mrsne	r0, (UNDEF: 64)
    b1ec:	00003e6b 	andeq	r3, r0, fp, ror #28
    b1f0:	5d019504 	cfstr32pl	mvfx9, [r1, #-16]
    b1f4:	44000007 	strmi	r0, [r0], #-7
    b1f8:	003fd111 	eorseq	sp, pc, r1, lsl r1	; <UNPREDICTABLE>
    b1fc:	019d0400 	orrseq	r0, sp, r0, lsl #8
    b200:	000005a7 	andeq	r0, r0, r7, lsr #11
    b204:	3f791148 	svccc	0x00791148
    b208:	9e040000 	cdpls	0, 0, cr0, cr4, cr0, {0}
    b20c:	0005e201 	andeq	lr, r5, r1, lsl #4
    b210:	cb115400 	blgt	460218 <_Min_Stack_Size+0x460018>
    b214:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    b218:	0769019f 			; <UNDEFINED> instruction: 0x0769019f
    b21c:	11580000 	cmpne	r8, r0
    b220:	00003e5f 	andeq	r3, r0, pc, asr lr
    b224:	fb01a004 	blx	7323e <_Min_Stack_Size+0x7303e>
    b228:	5c000004 	stcpl	0, cr0, [r0], {4}
    b22c:	81040f00 	tsthi	r4, r0, lsl #30
    b230:	0d000002 	stceq	0, cr0, [r0, #-8]
    b234:	00004141 	andeq	r4, r0, r1, asr #2
    b238:	ddb30468 	cfldrsle	mvf0, [r3, #416]!	; 0x1a0
    b23c:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    b240:	0400705f 	streq	r7, [r0], #-95	; 0xffffffa1
    b244:	000211b4 			; <UNDEFINED> instruction: 0x000211b4
    b248:	5f0e0000 	svcpl	0x000e0000
    b24c:	b5040072 	strlt	r0, [r4, #-114]	; 0xffffff8e
    b250:	0000001d 	andeq	r0, r0, sp, lsl r0
    b254:	775f0e04 	ldrbvc	r0, [pc, -r4, lsl #28]
    b258:	1db60400 	cfldrsne	mvf0, [r6]
    b25c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b260:	003e750b 	eorseq	r7, lr, fp, lsl #10
    b264:	40b70400 	adcsmi	r0, r7, r0, lsl #8
    b268:	0c000000 	stceq	0, cr0, [r0], {-0}
    b26c:	0040060b 	subeq	r0, r0, fp, lsl #12
    b270:	40b80400 	adcsmi	r0, r8, r0, lsl #8
    b274:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    b278:	66625f0e 	strbtvs	r5, [r2], -lr, lsl #30
    b27c:	ecb90400 	cfldrs	mvf0, [r9]
    b280:	10000001 	andne	r0, r0, r1
    b284:	0040e60b 	subeq	lr, r0, fp, lsl #12
    b288:	1dba0400 	cfldrsne	mvf0, [sl]
    b28c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    b290:	000df80b 	andeq	pc, sp, fp, lsl #16
    b294:	adbd0400 	cfldrsge	mvf0, [sp]
    b298:	1c000003 	stcne	0, cr0, [r0], {3}
    b29c:	003ffe0b 	eorseq	pc, pc, fp, lsl #28
    b2a0:	fdc10400 	stc2l	4, cr0, [r1]
    b2a4:	20000000 	andcs	r0, r0, r0
    b2a8:	0039cd0b 	eorseq	ip, r9, fp, lsl #26
    b2ac:	08c30400 	stmiaeq	r3, {sl}^
    b2b0:	24000005 	strcs	r0, [r0], #-5
    b2b4:	00395b0b 	eorseq	r5, r9, fp, lsl #22
    b2b8:	37c50400 	strbcc	r0, [r5, r0, lsl #8]
    b2bc:	28000005 	stmdacs	r0, {r0, r2}
    b2c0:	0040b00b 	subeq	fp, r0, fp
    b2c4:	5bc80400 	blpl	ff20c2cc <BootRAM+0xe17ca6d>
    b2c8:	2c000005 	stccs	0, cr0, [r0], {5}
    b2cc:	003f910b 	eorseq	r9, pc, fp, lsl #2
    b2d0:	75c90400 	strbvc	r0, [r9, #1024]	; 0x400
    b2d4:	30000005 	andcc	r0, r0, r5
    b2d8:	62755f0e 	rsbsvs	r5, r5, #14, 30	; 0x38
    b2dc:	eccc0400 	cfstrd	mvd0, [ip], {0}
    b2e0:	34000001 	strcc	r0, [r0], #-1
    b2e4:	70755f0e 	rsbsvc	r5, r5, lr, lsl #30
    b2e8:	11cd0400 	bicne	r0, sp, r0, lsl #8
    b2ec:	3c000002 	stccc	0, cr0, [r0], {2}
    b2f0:	72755f0e 	rsbsvc	r5, r5, #14, 30	; 0x38
    b2f4:	1dce0400 	cfstrdne	mvd0, [lr]
    b2f8:	40000000 	andmi	r0, r0, r0
    b2fc:	003fab0b 	eorseq	sl, pc, fp, lsl #22
    b300:	7bd10400 	blvc	ff44c308 <BootRAM+0xe3bcaa9>
    b304:	44000005 	strmi	r0, [r0], #-5
    b308:	003ec80b 	eorseq	ip, lr, fp, lsl #16
    b30c:	8bd20400 	blhi	ff48c314 <BootRAM+0xe3fcab5>
    b310:	47000005 	strmi	r0, [r0, -r5]
    b314:	626c5f0e 	rsbvs	r5, ip, #14, 30	; 0x38
    b318:	ecd50400 	cfldrd	mvd0, [r5], {0}
    b31c:	48000001 	stmdami	r0, {r0}
    b320:	0040c70b 	subeq	ip, r0, fp, lsl #14
    b324:	1dd80400 	cfldrdne	mvd0, [r8]
    b328:	50000000 	andpl	r0, r0, r0
    b32c:	0049750b 	subeq	r7, r9, fp, lsl #10
    b330:	6ed90400 	cdpvs	4, 13, cr0, cr9, cr0, {0}
    b334:	54000000 	strpl	r0, [r0], #-0
    b338:	0035400b 	eorseq	r4, r5, fp
    b33c:	f2e00400 	vaddhn.i64	d16, q0, q0
    b340:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    b344:	003f410b 	eorseq	r4, pc, fp, lsl #2
    b348:	e7e20400 	strb	r0, [r2, r0, lsl #8]!
    b34c:	5c000000 	stcpl	0, cr0, [r0], {-0}
    b350:	003db50b 	eorseq	fp, sp, fp, lsl #10
    b354:	1de30400 	cfstrdne	mvd0, [r3]
    b358:	64000000 	strvs	r0, [r0], #-0
    b35c:	001d1300 	andseq	r1, sp, r0, lsl #6
    b360:	04fb0000 	ldrbteq	r0, [fp], #0
    b364:	ad140000 	ldcge	0, cr0, [r4, #-0]
    b368:	14000003 	strne	r0, [r0], #-3
    b36c:	000000fd 	strdeq	r0, [r0], -sp
    b370:	0004fb14 	andeq	pc, r4, r4, lsl fp	; <UNPREDICTABLE>
    b374:	001d1400 	andseq	r1, sp, r0, lsl #8
    b378:	0f000000 	svceq	0x00000000
    b37c:	00050104 	andeq	r0, r5, r4, lsl #2
    b380:	08010300 	stmdaeq	r1, {r8, r9}
    b384:	000000ca 	andeq	r0, r0, sl, asr #1
    b388:	04dd040f 	ldrbeq	r0, [sp], #1039	; 0x40f
    b38c:	1d130000 	ldcne	0, cr0, [r3, #-0]
    b390:	2c000000 	stccs	0, cr0, [r0], {-0}
    b394:	14000005 	strne	r0, [r0], #-5
    b398:	000003ad 	andeq	r0, r0, sp, lsr #7
    b39c:	0000fd14 	andeq	pc, r0, r4, lsl sp	; <UNPREDICTABLE>
    b3a0:	052c1400 	streq	r1, [ip, #-1024]!	; 0xfffffc00
    b3a4:	1d140000 	ldcne	0, cr0, [r4, #-0]
    b3a8:	00000000 	andeq	r0, r0, r0
    b3ac:	0532040f 	ldreq	r0, [r2, #-1039]!	; 0xfffffbf1
    b3b0:	01150000 	tsteq	r5, r0
    b3b4:	0f000005 	svceq	0x00000005
    b3b8:	00050e04 	andeq	r0, r5, r4, lsl #28
    b3bc:	00791300 	rsbseq	r1, r9, r0, lsl #6
    b3c0:	055b0000 	ldrbeq	r0, [fp, #-0]
    b3c4:	ad140000 	ldcge	0, cr0, [r4, #-0]
    b3c8:	14000003 	strne	r0, [r0], #-3
    b3cc:	000000fd 	strdeq	r0, [r0], -sp
    b3d0:	00007914 	andeq	r7, r0, r4, lsl r9
    b3d4:	001d1400 	andseq	r1, sp, r0, lsl #8
    b3d8:	0f000000 	svceq	0x00000000
    b3dc:	00053d04 	andeq	r3, r5, r4, lsl #26
    b3e0:	001d1300 	andseq	r1, sp, r0, lsl #6
    b3e4:	05750000 	ldrbeq	r0, [r5, #-0]!
    b3e8:	ad140000 	ldcge	0, cr0, [r4, #-0]
    b3ec:	14000003 	strne	r0, [r0], #-3
    b3f0:	000000fd 	strdeq	r0, [r0], -sp
    b3f4:	61040f00 	tstvs	r4, r0, lsl #30
    b3f8:	08000005 	stmdaeq	r0, {r0, r2}
    b3fc:	00000039 	andeq	r0, r0, r9, lsr r0
    b400:	0000058b 	andeq	r0, r0, fp, lsl #11
    b404:	0000bf09 	andeq	fp, r0, r9, lsl #30
    b408:	08000200 	stmdaeq	r0, {r9}
    b40c:	00000039 	andeq	r0, r0, r9, lsr r0
    b410:	0000059b 	muleq	r0, fp, r5
    b414:	0000bf09 	andeq	fp, r0, r9, lsl #30
    b418:	05000000 	streq	r0, [r0, #-0]
    b41c:	00003ee7 	andeq	r3, r0, r7, ror #29
    b420:	b3011d04 	movwlt	r1, #7428	; 0x1d04
    b424:	10000003 	andne	r0, r0, r3
    b428:	00004925 	andeq	r4, r0, r5, lsr #18
    b42c:	0121040c 			; <UNDEFINED> instruction: 0x0121040c
    b430:	000005dc 	ldrdeq	r0, [r0], -ip
    b434:	00410511 	subeq	r0, r1, r1, lsl r5
    b438:	01230400 			; <UNDEFINED> instruction: 0x01230400
    b43c:	000005dc 	ldrdeq	r0, [r0], -ip
    b440:	3ee01100 	cdpcc	1, 14, cr1, cr0, cr0, {0}
    b444:	24040000 	strcs	r0, [r4], #-0
    b448:	00001d01 	andeq	r1, r0, r1, lsl #26
    b44c:	af110400 	svcge	0x00110400
    b450:	0400003d 	streq	r0, [r0], #-61	; 0xffffffc3
    b454:	05e20125 	strbeq	r0, [r2, #293]!	; 0x125
    b458:	00080000 	andeq	r0, r8, r0
    b45c:	05a7040f 	streq	r0, [r7, #1039]!	; 0x40f
    b460:	040f0000 	streq	r0, [pc], #-0	; b468 <_Min_Stack_Size+0xb268>
    b464:	0000059b 	muleq	r0, fp, r5
    b468:	00409610 	subeq	r9, r0, r0, lsl r6
    b46c:	3d041800 	stccc	8, cr1, [r4, #-0]
    b470:	00062a01 	andeq	r2, r6, r1, lsl #20
    b474:	40901100 	addsmi	r1, r0, r0, lsl #2
    b478:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
    b47c:	00062a01 	andeq	r2, r6, r1, lsl #20
    b480:	68110000 	ldmdavs	r1, {}	; <UNPREDICTABLE>
    b484:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    b488:	062a013f 			; <UNDEFINED> instruction: 0x062a013f
    b48c:	11060000 	mrsne	r0, (UNDEF: 6)
    b490:	00003e50 	andeq	r3, r0, r0, asr lr
    b494:	2b014004 	blcs	5b4ac <_Min_Stack_Size+0x5b2ac>
    b498:	0c000000 	stceq	0, cr0, [r0], {-0}
    b49c:	00410011 	subeq	r0, r1, r1, lsl r0
    b4a0:	01430400 	cmpeq	r3, r0, lsl #8
    b4a4:	0000005c 	andeq	r0, r0, ip, asr r0
    b4a8:	2b080010 	blcs	20b4f0 <_Min_Stack_Size+0x20b2f0>
    b4ac:	3a000000 	bcc	b4b4 <_Min_Stack_Size+0xb2b4>
    b4b0:	09000006 	stmdbeq	r0, {r1, r2}
    b4b4:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    b4b8:	20100002 	andscs	r0, r0, r2
    b4bc:	10000040 	andne	r0, r0, r0, asr #32
    b4c0:	7c015604 	stcvc	6, cr5, [r1], {4}
    b4c4:	11000006 	tstne	r0, r6
    b4c8:	000040b6 	strheq	r4, [r0], -r6
    b4cc:	5d015904 	stcpl	9, cr5, [r1, #-16]
    b4d0:	00000001 	andeq	r0, r0, r1
    b4d4:	003e5511 	eorseq	r5, lr, r1, lsl r5
    b4d8:	015a0400 	cmpeq	sl, r0, lsl #8
    b4dc:	0000001d 	andeq	r0, r0, sp, lsl r0
    b4e0:	40f51104 	rscsmi	r1, r5, r4, lsl #2
    b4e4:	5b040000 	blpl	10b4ec <_Min_Stack_Size+0x10b2ec>
    b4e8:	00015d01 	andeq	r5, r1, r1, lsl #26
    b4ec:	37110800 	ldrcc	r0, [r1, -r0, lsl #16]
    b4f0:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    b4f4:	067c015c 			; <UNDEFINED> instruction: 0x067c015c
    b4f8:	000c0000 	andeq	r0, ip, r0
    b4fc:	015d040f 	cmpeq	sp, pc, lsl #8
    b500:	0b100000 	bleq	40b508 <_Min_Stack_Size+0x40b308>
    b504:	50000041 	andpl	r0, r0, r1, asr #32
    b508:	1f016004 	svcne	0x00016004
    b50c:	11000007 	tstne	r0, r7
    b510:	00003eb3 			; <UNDEFINED> instruction: 0x00003eb3
    b514:	fb016304 	blx	6412e <_Min_Stack_Size+0x63f2e>
    b518:	00000004 	andeq	r0, r0, r4
    b51c:	003dbd11 	eorseq	fp, sp, r1, lsl sp
    b520:	01640400 	cmneq	r4, r0, lsl #8
    b524:	000000e7 	andeq	r0, r0, r7, ror #1
    b528:	3fd91104 	svccc	0x00d91104
    b52c:	65040000 	strvs	r0, [r4, #-0]
    b530:	0000e701 	andeq	lr, r0, r1, lsl #14
    b534:	2c110c00 	ldccs	12, cr0, [r1], {-0}
    b538:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    b53c:	00e70166 	rsceq	r0, r7, r6, ror #2
    b540:	11140000 	tstne	r4, r0
    b544:	00003f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    b548:	1f016704 	svcne	0x00016704
    b54c:	1c000007 	stcne	0, cr0, [r0], {7}
    b550:	003ef511 	eorseq	pc, lr, r1, lsl r5	; <UNPREDICTABLE>
    b554:	01680400 	cmneq	r8, r0, lsl #8
    b558:	0000001d 	andeq	r0, r0, sp, lsl r0
    b55c:	40411124 	submi	r1, r1, r4, lsr #2
    b560:	69040000 	stmdbvs	r4, {}	; <UNPREDICTABLE>
    b564:	0000e701 	andeq	lr, r0, r1, lsl #14
    b568:	e7112800 	ldr	r2, [r1, -r0, lsl #16]
    b56c:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    b570:	00e7016a 	rsceq	r0, r7, sl, ror #2
    b574:	11300000 	teqne	r0, r0
    b578:	00003e9d 	muleq	r0, sp, lr
    b57c:	e7016b04 	str	r6, [r1, -r4, lsl #22]
    b580:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    b584:	00412711 	subeq	r2, r1, r1, lsl r7
    b588:	016c0400 	cmneq	ip, r0, lsl #8
    b58c:	000000e7 	andeq	r0, r0, r7, ror #1
    b590:	40d51140 	sbcsmi	r1, r5, r0, asr #2
    b594:	6d040000 	stcvs	0, cr0, [r4, #-0]
    b598:	0000e701 	andeq	lr, r0, r1, lsl #14
    b59c:	08004800 	stmdaeq	r0, {fp, lr}
    b5a0:	00000501 	andeq	r0, r0, r1, lsl #10
    b5a4:	0000072f 	andeq	r0, r0, pc, lsr #14
    b5a8:	0000bf09 	andeq	fp, r0, r9, lsl #30
    b5ac:	0f000700 	svceq	0x00000700
    b5b0:	00063a04 	andeq	r3, r6, r4, lsl #20
    b5b4:	07401600 	strbeq	r1, [r0, -r0, lsl #12]
    b5b8:	ad140000 	ldcge	0, cr0, [r4, #-0]
    b5bc:	00000003 	andeq	r0, r0, r3
    b5c0:	0735040f 	ldreq	r0, [r5, -pc, lsl #8]!
    b5c4:	040f0000 	streq	r0, [pc], #-0	; b5cc <_Min_Stack_Size+0xb3cc>
    b5c8:	000005e8 	andeq	r0, r0, r8, ror #11
    b5cc:	0173040f 	cmneq	r3, pc, lsl #8
    b5d0:	5d160000 	ldcpl	0, cr0, [r6, #-0]
    b5d4:	14000007 	strne	r0, [r0], #-7
    b5d8:	0000001d 	andeq	r0, r0, sp, lsl r0
    b5dc:	63040f00 	movwvs	r0, #20224	; 0x4f00
    b5e0:	0f000007 	svceq	0x00000007
    b5e4:	00075204 	andeq	r5, r7, r4, lsl #4
    b5e8:	82040f00 	andhi	r0, r4, #0, 30
    b5ec:	17000006 	strne	r0, [r0, -r6]
    b5f0:	000043c1 	andeq	r4, r0, r1, asr #7
    b5f4:	02811705 	addeq	r1, r1, #1310720	; 0x140000
    b5f8:	03050000 	movweq	r0, #20480	; 0x5000
    b5fc:	20000084 	andcs	r0, r0, r4, lsl #1
    b600:	00444718 	subeq	r4, r4, r8, lsl r7
    b604:	01a30400 			; <UNDEFINED> instruction: 0x01a30400
    b608:	0000078c 	andeq	r0, r0, ip, lsl #15
    b60c:	00021715 	andeq	r1, r2, r5, lsl r7
    b610:	44971800 	ldrmi	r1, [r7], #2048	; 0x800
    b614:	a4040000 	strge	r0, [r4], #-0
    b618:	00078c01 	andeq	r8, r7, r1, lsl #24
    b61c:	43cd1800 	bicmi	r1, sp, #0, 16
    b620:	a5040000 	strge	r0, [r4, #-0]
    b624:	00078c01 	andeq	r8, r7, r1, lsl #24
    b628:	445e1900 	ldrbmi	r1, [lr], #-2304	; 0xfffff700
    b62c:	fa040000 	blx	10b634 <_Min_Stack_Size+0x10b434>
    b630:	0003ad02 	andeq	sl, r3, r2, lsl #26
    b634:	e4030500 	str	r0, [r3], #-1280	; 0xfffffb00
    b638:	19200000 	stmdbne	r0!, {}	; <UNPREDICTABLE>
    b63c:	00004457 	andeq	r4, r0, r7, asr r4
    b640:	cd02fb04 	vstrgt	d15, [r2, #-16]
    b644:	05000007 	streq	r0, [r0, #-7]
    b648:	00000003 	andeq	r0, r0, r3
    b64c:	03ad1500 			; <UNDEFINED> instruction: 0x03ad1500
    b650:	bd000000 	stclt	0, cr0, [r0, #-0]
    b654:	04000007 	streq	r0, [r0], #-7
    b658:	00265400 	eoreq	r5, r6, r0, lsl #8
    b65c:	e0010400 	and	r0, r1, r0, lsl #8
    b660:	0100003c 	tsteq	r0, ip, lsr r0
    b664:	000044ba 			; <UNDEFINED> instruction: 0x000044ba
    b668:	00003dca 	andeq	r3, r0, sl, asr #27
    b66c:	00000c88 	andeq	r0, r0, r8, lsl #25
    b670:	00000000 	andeq	r0, r0, r0
    b674:	00004ddb 	ldrdeq	r4, [r0], -fp
    b678:	69050402 	stmdbvs	r5, {r1, sl}
    b67c:	0300746e 	movweq	r7, #1134	; 0x46e
    b680:	00004508 	andeq	r4, r0, r8, lsl #10
    b684:	0037d402 	eorseq	sp, r7, r2, lsl #8
    b688:	04040000 	streq	r0, [r4], #-0
    b68c:	0000ff07 	andeq	pc, r0, r7, lsl #30
    b690:	07020400 	streq	r0, [r2, -r0, lsl #8]
    b694:	00000123 	andeq	r0, r0, r3, lsr #2
    b698:	c3060104 	movwgt	r0, #24836	; 0x6104
    b69c:	04000000 	streq	r0, [r0], #-0
    b6a0:	00c10801 	sbceq	r0, r1, r1, lsl #16
    b6a4:	02040000 	andeq	r0, r4, #0
    b6a8:	00005105 	andeq	r5, r0, r5, lsl #2
    b6ac:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    b6b0:	0000006d 	andeq	r0, r0, sp, rrx
    b6b4:	fa070404 	blx	1cc6cc <_Min_Stack_Size+0x1cc4cc>
    b6b8:	04000000 	streq	r0, [r0], #-0
    b6bc:	00680508 	rsbeq	r0, r8, r8, lsl #10
    b6c0:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    b6c4:	0000f507 	andeq	pc, r0, r7, lsl #10
    b6c8:	3ece0300 	cdpcc	3, 12, cr0, cr14, cr0, {0}
    b6cc:	07030000 	streq	r0, [r3, -r0]
    b6d0:	00000025 	andeq	r0, r0, r5, lsr #32
    b6d4:	003e3403 	eorseq	r3, lr, r3, lsl #8
    b6d8:	5a100400 	bpl	40c6e0 <_Min_Stack_Size+0x40c4e0>
    b6dc:	03000000 	movweq	r0, #0
    b6e0:	00003f89 	andeq	r3, r0, r9, lsl #31
    b6e4:	005a2704 	subseq	r2, sl, r4, lsl #14
    b6e8:	3a050000 	bcc	14b6f0 <_Min_Stack_Size+0x14b4f0>
    b6ec:	02000040 	andeq	r0, r0, #64	; 0x40
    b6f0:	00370161 	eorseq	r0, r7, r1, ror #2
    b6f4:	04060000 	streq	r0, [r6], #-0
    b6f8:	00c24a04 	sbceq	r4, r2, r4, lsl #20
    b6fc:	3b070000 	blcc	1cb704 <_Min_Stack_Size+0x1cb504>
    b700:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
    b704:	0000974c 	andeq	r9, r0, ip, asr #14
    b708:	3fc40700 	svccc	0x00c40700
    b70c:	4d040000 	stcmi	0, cr0, [r4, #-0]
    b710:	000000c2 	andeq	r0, r0, r2, asr #1
    b714:	004c0800 	subeq	r0, ip, r0, lsl #16
    b718:	00d20000 	sbcseq	r0, r2, r0
    b71c:	d2090000 	andle	r0, r9, #0
    b720:	03000000 	movweq	r0, #0
    b724:	07040400 	streq	r0, [r4, -r0, lsl #8]
    b728:	00000015 	andeq	r0, r0, r5, lsl r0
    b72c:	4704080a 	strmi	r0, [r4, -sl, lsl #16]
    b730:	000000fa 	strdeq	r0, [r0], -sl
    b734:	003e8b0b 	eorseq	r8, lr, fp, lsl #22
    b738:	25490400 	strbcs	r0, [r9, #-1024]	; 0xfffffc00
    b73c:	00000000 	andeq	r0, r0, r0
    b740:	003e410b 	eorseq	r4, lr, fp, lsl #2
    b744:	a34e0400 	movtge	r0, #58368	; 0xe400
    b748:	04000000 	streq	r0, [r0], #-0
    b74c:	406b0300 	rsbmi	r0, fp, r0, lsl #6
    b750:	4f040000 	svcmi	0x00040000
    b754:	000000d9 	ldrdeq	r0, [r0], -r9
    b758:	003fa203 	eorseq	sl, pc, r3, lsl #4
    b75c:	76530400 	ldrbvc	r0, [r3], -r0, lsl #8
    b760:	0c000000 	stceq	0, cr0, [r0], {-0}
    b764:	40a80304 	adcmi	r0, r8, r4, lsl #6
    b768:	16050000 	strne	r0, [r5], -r0
    b76c:	00000061 	andeq	r0, r0, r1, rrx
    b770:	0040760d 	subeq	r7, r0, sp, lsl #12
    b774:	2d051800 	stccs	8, cr1, [r5, #-0]
    b778:	00000170 	andeq	r0, r0, r0, ror r1
    b77c:	0041050b 	subeq	r0, r1, fp, lsl #10
    b780:	702f0500 	eorvc	r0, pc, r0, lsl #10
    b784:	00000001 	andeq	r0, r0, r1
    b788:	006b5f0e 	rsbeq	r5, fp, lr, lsl #30
    b78c:	00253005 	eoreq	r3, r5, r5
    b790:	0b040000 	bleq	10b798 <_Min_Stack_Size+0x10b598>
    b794:	0000407e 	andeq	r4, r0, lr, ror r0
    b798:	00253005 	eoreq	r3, r5, r5
    b79c:	0b080000 	bleq	20b7a4 <_Min_Stack_Size+0x20b5a4>
    b7a0:	000040fa 	strdeq	r4, [r0], -sl
    b7a4:	00253005 	eoreq	r3, r5, r5
    b7a8:	0b0c0000 	bleq	30b7b0 <_Min_Stack_Size+0x30b5b0>
    b7ac:	0000401b 	andeq	r4, r0, fp, lsl r0
    b7b0:	00253005 	eoreq	r3, r5, r5
    b7b4:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    b7b8:	0500785f 	streq	r7, [r0, #-2143]	; 0xfffff7a1
    b7bc:	00017631 	andeq	r7, r1, r1, lsr r6
    b7c0:	0f001400 	svceq	0x00001400
    b7c4:	00011d04 	andeq	r1, r1, r4, lsl #26
    b7c8:	01120800 	tsteq	r2, r0, lsl #16
    b7cc:	01860000 	orreq	r0, r6, r0
    b7d0:	d2090000 	andle	r0, r9, #0
    b7d4:	00000000 	andeq	r0, r0, r0
    b7d8:	40270d00 	eormi	r0, r7, r0, lsl #26
    b7dc:	05240000 	streq	r0, [r4, #-0]!
    b7e0:	0001ff35 	andeq	pc, r1, r5, lsr pc	; <UNPREDICTABLE>
    b7e4:	3fb10b00 	svccc	0x00b10b00
    b7e8:	37050000 	strcc	r0, [r5, -r0]
    b7ec:	00000025 	andeq	r0, r0, r5, lsr #32
    b7f0:	3f020b00 	svccc	0x00020b00
    b7f4:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    b7f8:	00000025 	andeq	r0, r0, r5, lsr #32
    b7fc:	3fba0b04 	svccc	0x00ba0b04
    b800:	39050000 	stmdbcc	r5, {}	; <UNPREDICTABLE>
    b804:	00000025 	andeq	r0, r0, r5, lsr #32
    b808:	3e930b08 	vfnmscc.f64	d0, d3, d8
    b80c:	3a050000 	bcc	14b814 <_Min_Stack_Size+0x14b614>
    b810:	00000025 	andeq	r0, r0, r5, lsr #32
    b814:	40be0b0c 	adcsmi	r0, lr, ip, lsl #22
    b818:	3b050000 	blcc	14b820 <_Min_Stack_Size+0x14b620>
    b81c:	00000025 	andeq	r0, r0, r5, lsr #32
    b820:	40860b10 	addmi	r0, r6, r0, lsl fp
    b824:	3c050000 	stccc	0, cr0, [r5], {-0}
    b828:	00000025 	andeq	r0, r0, r5, lsr #32
    b82c:	3f4a0b14 	svccc	0x004a0b14
    b830:	3d050000 	stccc	0, cr0, [r5, #-0]
    b834:	00000025 	andeq	r0, r0, r5, lsr #32
    b838:	409e0b18 	addsmi	r0, lr, r8, lsl fp
    b83c:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    b840:	00000025 	andeq	r0, r0, r5, lsr #32
    b844:	3f6e0b1c 	svccc	0x006e0b1c
    b848:	3f050000 	svccc	0x00050000
    b84c:	00000025 	andeq	r0, r0, r5, lsr #32
    b850:	490d0020 	stmdbmi	sp, {r5}
    b854:	0800003e 	stmdaeq	r0, {r1, r2, r3, r4, r5}
    b858:	02247305 	eoreq	r7, r4, #335544320	; 0x14000000
    b85c:	a70b0000 	strge	r0, [fp, -r0]
    b860:	05000033 	streq	r0, [r0, #-51]	; 0xffffffcd
    b864:	00022474 	andeq	r2, r2, r4, ror r4
    b868:	c90b0000 	stmdbgt	fp, {}	; <UNPREDICTABLE>
    b86c:	05000045 	streq	r0, [r0, #-69]	; 0xffffffbb
    b870:	00002575 	andeq	r2, r0, r5, ror r5
    b874:	0f000400 	svceq	0x00000400
    b878:	00004c04 	andeq	r4, r0, r4, lsl #24
    b87c:	41101000 	tstmi	r0, r0
    b880:	05600000 	strbeq	r0, [r0, #-0]!
    b884:	03560172 	cmpeq	r6, #-2147483620	; 0x8000001c
    b888:	ee110000 	cdp	0, 1, cr0, cr1, cr0, {0}
    b88c:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    b890:	00250176 	eoreq	r0, r5, r6, ror r1
    b894:	11000000 	mrsne	r0, (UNDEF: 0)
    b898:	00004450 	andeq	r4, r0, r0, asr r4
    b89c:	8b017b05 	blhi	6a4b8 <_Min_Stack_Size+0x6a2b8>
    b8a0:	04000005 	streq	r0, [r0], #-5
    b8a4:	0044a011 	subeq	sl, r4, r1, lsl r0
    b8a8:	017b0500 	cmneq	fp, r0, lsl #10
    b8ac:	0000058b 	andeq	r0, r0, fp, lsl #11
    b8b0:	43d61108 	bicsmi	r1, r6, #8, 2
    b8b4:	7b050000 	blvc	14b8bc <_Min_Stack_Size+0x14b6bc>
    b8b8:	00058b01 	andeq	r8, r5, r1, lsl #22
    b8bc:	d0110c00 	andsle	r0, r1, r0, lsl #24
    b8c0:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    b8c4:	0025017d 	eoreq	r0, r5, sp, ror r1
    b8c8:	11100000 	tstne	r0, r0
    b8cc:	00004136 	andeq	r4, r0, r6, lsr r1
    b8d0:	a4017f05 	strge	r7, [r1], #-3845	; 0xfffff0fb
    b8d4:	14000004 	strne	r0, [r0], #-4
    b8d8:	003f7e11 	eorseq	r7, pc, r1, lsl lr	; <UNPREDICTABLE>
    b8dc:	01810500 	orreq	r0, r1, r0, lsl #10
    b8e0:	00000025 	andeq	r0, r0, r5, lsr #32
    b8e4:	404f1118 	submi	r1, pc, r8, lsl r1	; <UNPREDICTABLE>
    b8e8:	83050000 	movwhi	r0, #20480	; 0x5000
    b8ec:	00002501 	andeq	r2, r0, r1, lsl #10
    b8f0:	17111c00 	ldrne	r1, [r1, -r0, lsl #24]
    b8f4:	05000041 	streq	r0, [r0, #-65]	; 0xffffffbf
    b8f8:	04d50184 	ldrbeq	r0, [r5], #388	; 0x184
    b8fc:	12200000 	eorne	r0, r0, #0
    b900:	00706d5f 	rsbseq	r6, r0, pc, asr sp
    b904:	d8018605 	stmdale	r1, {r0, r2, r9, sl, pc}
    b908:	24000006 	strcs	r0, [r0], #-6
    b90c:	00406111 	subeq	r6, r0, r1, lsl r1
    b910:	01880500 	orreq	r0, r8, r0, lsl #10
    b914:	000006e9 	andeq	r0, r0, r9, ror #13
    b918:	400c1128 	andmi	r1, ip, r8, lsr #2
    b91c:	8a050000 	bhi	14b924 <_Min_Stack_Size+0x14b724>
    b920:	00002501 	andeq	r2, r0, r1, lsl #10
    b924:	c0112c00 	andsgt	r2, r1, r0, lsl #24
    b928:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    b92c:	0025018d 	eoreq	r0, r5, sp, lsl #3
    b930:	11300000 	teqne	r0, r0
    b934:	00003ff6 	strdeq	r3, [r0], -r6
    b938:	a4018e05 	strge	r8, [r1], #-3589	; 0xfffff1fb
    b93c:	34000004 	strcc	r0, [r0], #-4
    b940:	003eae11 	eorseq	sl, lr, r1, lsl lr
    b944:	01900500 	orrseq	r0, r0, r0, lsl #10
    b948:	000006ef 	andeq	r0, r0, pc, ror #13
    b94c:	3e7c1138 	mrccc	1, 3, r1, cr12, cr8, {1}
    b950:	91050000 	mrsls	r0, (UNDEF: 5)
    b954:	0006f501 	andeq	pc, r6, r1, lsl #10
    b958:	54113c00 	ldrpl	r3, [r1], #-3072	; 0xfffff400
    b95c:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    b960:	04a40192 	strteq	r0, [r4], #402	; 0x192
    b964:	11400000 	mrsne	r0, (UNDEF: 64)
    b968:	00003e6b 	andeq	r3, r0, fp, ror #28
    b96c:	06019505 	streq	r9, [r1], -r5, lsl #10
    b970:	44000007 	strmi	r0, [r0], #-7
    b974:	003fd111 	eorseq	sp, pc, r1, lsl r1	; <UNPREDICTABLE>
    b978:	019d0500 	orrseq	r0, sp, r0, lsl #10
    b97c:	00000550 	andeq	r0, r0, r0, asr r5
    b980:	3f791148 	svccc	0x00791148
    b984:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
    b988:	00058b01 	andeq	r8, r5, r1, lsl #22
    b98c:	cb115400 	blgt	460994 <_Min_Stack_Size+0x460794>
    b990:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    b994:	0712019f 			; <UNDEFINED> instruction: 0x0712019f
    b998:	11580000 	cmpne	r8, r0
    b99c:	00003e5f 	andeq	r3, r0, pc, asr lr
    b9a0:	a401a005 	strge	sl, [r1], #-5
    b9a4:	5c000004 	stcpl	0, cr0, [r0], {4}
    b9a8:	2a040f00 	bcs	10f5b0 <_Min_Stack_Size+0x10f3b0>
    b9ac:	0d000002 	stceq	0, cr0, [r0, #-8]
    b9b0:	00004141 	andeq	r4, r0, r1, asr #2
    b9b4:	86b30568 	ldrthi	r0, [r3], r8, ror #10
    b9b8:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    b9bc:	0500705f 	streq	r7, [r0, #-95]	; 0xffffffa1
    b9c0:	000224b4 			; <UNDEFINED> instruction: 0x000224b4
    b9c4:	5f0e0000 	svcpl	0x000e0000
    b9c8:	b5050072 	strlt	r0, [r5, #-114]	; 0xffffff8e
    b9cc:	00000025 	andeq	r0, r0, r5, lsr #32
    b9d0:	775f0e04 	ldrbvc	r0, [pc, -r4, lsl #28]
    b9d4:	25b60500 	ldrcs	r0, [r6, #1280]!	; 0x500
    b9d8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b9dc:	003e750b 	eorseq	r7, lr, fp, lsl #10
    b9e0:	53b70500 			; <UNDEFINED> instruction: 0x53b70500
    b9e4:	0c000000 	stceq	0, cr0, [r0], {-0}
    b9e8:	0040060b 	subeq	r0, r0, fp, lsl #12
    b9ec:	53b80500 			; <UNDEFINED> instruction: 0x53b80500
    b9f0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    b9f4:	66625f0e 	strbtvs	r5, [r2], -lr, lsl #30
    b9f8:	ffb90500 			; <UNDEFINED> instruction: 0xffb90500
    b9fc:	10000001 	andne	r0, r0, r1
    ba00:	0040e60b 	subeq	lr, r0, fp, lsl #12
    ba04:	25ba0500 	ldrcs	r0, [sl, #1280]!	; 0x500
    ba08:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    ba0c:	000df80b 	andeq	pc, sp, fp, lsl #16
    ba10:	56bd0500 	ldrtpl	r0, [sp], r0, lsl #10
    ba14:	1c000003 	stcne	0, cr0, [r0], {3}
    ba18:	003ffe0b 	eorseq	pc, pc, fp, lsl #28
    ba1c:	10c10500 	sbcne	r0, r1, r0, lsl #10
    ba20:	20000001 	andcs	r0, r0, r1
    ba24:	0039cd0b 	eorseq	ip, r9, fp, lsl #26
    ba28:	b1c30500 	biclt	r0, r3, r0, lsl #10
    ba2c:	24000004 	strcs	r0, [r0], #-4
    ba30:	00395b0b 	eorseq	r5, r9, fp, lsl #22
    ba34:	e0c50500 	sbc	r0, r5, r0, lsl #10
    ba38:	28000004 	stmdacs	r0, {r2}
    ba3c:	0040b00b 	subeq	fp, r0, fp
    ba40:	04c80500 	strbeq	r0, [r8], #1280	; 0x500
    ba44:	2c000005 	stccs	0, cr0, [r0], {5}
    ba48:	003f910b 	eorseq	r9, pc, fp, lsl #2
    ba4c:	1ec90500 	cdpne	5, 12, cr0, cr9, cr0, {0}
    ba50:	30000005 	andcc	r0, r0, r5
    ba54:	62755f0e 	rsbsvs	r5, r5, #14, 30	; 0x38
    ba58:	ffcc0500 			; <UNDEFINED> instruction: 0xffcc0500
    ba5c:	34000001 	strcc	r0, [r0], #-1
    ba60:	70755f0e 	rsbsvc	r5, r5, lr, lsl #30
    ba64:	24cd0500 	strbcs	r0, [sp], #1280	; 0x500
    ba68:	3c000002 	stccc	0, cr0, [r0], {2}
    ba6c:	72755f0e 	rsbsvc	r5, r5, #14, 30	; 0x38
    ba70:	25ce0500 	strbcs	r0, [lr, #1280]	; 0x500
    ba74:	40000000 	andmi	r0, r0, r0
    ba78:	003fab0b 	eorseq	sl, pc, fp, lsl #22
    ba7c:	24d10500 	ldrbcs	r0, [r1], #1280	; 0x500
    ba80:	44000005 	strmi	r0, [r0], #-5
    ba84:	003ec80b 	eorseq	ip, lr, fp, lsl #16
    ba88:	34d20500 	ldrbcc	r0, [r2], #1280	; 0x500
    ba8c:	47000005 	strmi	r0, [r0, -r5]
    ba90:	626c5f0e 	rsbvs	r5, ip, #14, 30	; 0x38
    ba94:	ffd50500 			; <UNDEFINED> instruction: 0xffd50500
    ba98:	48000001 	stmdami	r0, {r0}
    ba9c:	0040c70b 	subeq	ip, r0, fp, lsl #14
    baa0:	25d80500 	ldrbcs	r0, [r8, #1280]	; 0x500
    baa4:	50000000 	andpl	r0, r0, r0
    baa8:	0049750b 	subeq	r7, r9, fp, lsl #10
    baac:	81d90500 	bicshi	r0, r9, r0, lsl #10
    bab0:	54000000 	strpl	r0, [r0], #-0
    bab4:	0035400b 	eorseq	r4, r5, fp
    bab8:	05e00500 	strbeq	r0, [r0, #1280]!	; 0x500
    babc:	58000001 	stmdapl	r0, {r0}
    bac0:	003f410b 	eorseq	r4, pc, fp, lsl #2
    bac4:	fae20500 	blx	ff88cecc <BootRAM+0xe7fd66d>
    bac8:	5c000000 	stcpl	0, cr0, [r0], {-0}
    bacc:	003db50b 	eorseq	fp, sp, fp, lsl #10
    bad0:	25e30500 	strbcs	r0, [r3, #1280]!	; 0x500
    bad4:	64000000 	strvs	r0, [r0], #-0
    bad8:	00251300 	eoreq	r1, r5, r0, lsl #6
    badc:	04a40000 	strteq	r0, [r4], #0
    bae0:	56140000 	ldrpl	r0, [r4], -r0
    bae4:	14000003 	strne	r0, [r0], #-3
    bae8:	00000110 	andeq	r0, r0, r0, lsl r1
    baec:	0004a414 	andeq	sl, r4, r4, lsl r4
    baf0:	00251400 	eoreq	r1, r5, r0, lsl #8
    baf4:	0f000000 	svceq	0x00000000
    baf8:	0004aa04 	andeq	sl, r4, r4, lsl #20
    bafc:	08010400 	stmdaeq	r1, {sl}
    bb00:	000000ca 	andeq	r0, r0, sl, asr #1
    bb04:	0486040f 	streq	r0, [r6], #1039	; 0x40f
    bb08:	25130000 	ldrcs	r0, [r3, #-0]
    bb0c:	d5000000 	strle	r0, [r0, #-0]
    bb10:	14000004 	strne	r0, [r0], #-4
    bb14:	00000356 	andeq	r0, r0, r6, asr r3
    bb18:	00011014 	andeq	r1, r1, r4, lsl r0
    bb1c:	04d51400 	ldrbeq	r1, [r5], #1024	; 0x400
    bb20:	25140000 	ldrcs	r0, [r4, #-0]
    bb24:	00000000 	andeq	r0, r0, r0
    bb28:	04db040f 	ldrbeq	r0, [fp], #1039	; 0x40f
    bb2c:	aa150000 	bge	54bb34 <_Min_Stack_Size+0x54b934>
    bb30:	0f000004 	svceq	0x00000004
    bb34:	0004b704 	andeq	fp, r4, r4, lsl #14
    bb38:	008c1300 	addeq	r1, ip, r0, lsl #6
    bb3c:	05040000 	streq	r0, [r4, #-0]
    bb40:	56140000 	ldrpl	r0, [r4], -r0
    bb44:	14000003 	strne	r0, [r0], #-3
    bb48:	00000110 	andeq	r0, r0, r0, lsl r1
    bb4c:	00008c14 	andeq	r8, r0, r4, lsl ip
    bb50:	00251400 	eoreq	r1, r5, r0, lsl #8
    bb54:	0f000000 	svceq	0x00000000
    bb58:	0004e604 	andeq	lr, r4, r4, lsl #12
    bb5c:	00251300 	eoreq	r1, r5, r0, lsl #6
    bb60:	051e0000 	ldreq	r0, [lr, #-0]
    bb64:	56140000 	ldrpl	r0, [r4], -r0
    bb68:	14000003 	strne	r0, [r0], #-3
    bb6c:	00000110 	andeq	r0, r0, r0, lsl r1
    bb70:	0a040f00 	beq	10f778 <_Min_Stack_Size+0x10f578>
    bb74:	08000005 	stmdaeq	r0, {r0, r2}
    bb78:	0000004c 	andeq	r0, r0, ip, asr #32
    bb7c:	00000534 	andeq	r0, r0, r4, lsr r5
    bb80:	0000d209 	andeq	sp, r0, r9, lsl #4
    bb84:	08000200 	stmdaeq	r0, {r9}
    bb88:	0000004c 	andeq	r0, r0, ip, asr #32
    bb8c:	00000544 	andeq	r0, r0, r4, asr #10
    bb90:	0000d209 	andeq	sp, r0, r9, lsl #4
    bb94:	05000000 	streq	r0, [r0, #-0]
    bb98:	00003ee7 	andeq	r3, r0, r7, ror #29
    bb9c:	5c011d05 	stcpl	13, cr1, [r1], {5}
    bba0:	10000003 	andne	r0, r0, r3
    bba4:	00004925 	andeq	r4, r0, r5, lsr #18
    bba8:	0121050c 			; <UNDEFINED> instruction: 0x0121050c
    bbac:	00000585 	andeq	r0, r0, r5, lsl #11
    bbb0:	00410511 	subeq	r0, r1, r1, lsl r5
    bbb4:	01230500 			; <UNDEFINED> instruction: 0x01230500
    bbb8:	00000585 	andeq	r0, r0, r5, lsl #11
    bbbc:	3ee01100 	cdpcc	1, 14, cr1, cr0, cr0, {0}
    bbc0:	24050000 	strcs	r0, [r5], #-0
    bbc4:	00002501 	andeq	r2, r0, r1, lsl #10
    bbc8:	af110400 	svcge	0x00110400
    bbcc:	0500003d 	streq	r0, [r0, #-61]	; 0xffffffc3
    bbd0:	058b0125 	streq	r0, [fp, #293]	; 0x125
    bbd4:	00080000 	andeq	r0, r8, r0
    bbd8:	0550040f 	ldrbeq	r0, [r0, #-1039]	; 0xfffffbf1
    bbdc:	040f0000 	streq	r0, [pc], #-0	; bbe4 <_Min_Stack_Size+0xb9e4>
    bbe0:	00000544 	andeq	r0, r0, r4, asr #10
    bbe4:	00409610 	subeq	r9, r0, r0, lsl r6
    bbe8:	3d051800 	stccc	8, cr1, [r5, #-0]
    bbec:	0005d301 	andeq	sp, r5, r1, lsl #6
    bbf0:	40901100 	addsmi	r1, r0, r0, lsl #2
    bbf4:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    bbf8:	0005d301 	andeq	sp, r5, r1, lsl #6
    bbfc:	68110000 	ldmdavs	r1, {}	; <UNPREDICTABLE>
    bc00:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    bc04:	05d3013f 	ldrbeq	r0, [r3, #319]	; 0x13f
    bc08:	11060000 	mrsne	r0, (UNDEF: 6)
    bc0c:	00003e50 	andeq	r3, r0, r0, asr lr
    bc10:	3e014005 	cdpcc	0, 0, cr4, cr1, cr5, {0}
    bc14:	0c000000 	stceq	0, cr0, [r0], {-0}
    bc18:	00410011 	subeq	r0, r1, r1, lsl r0
    bc1c:	01430500 	cmpeq	r3, r0, lsl #10
    bc20:	0000006f 	andeq	r0, r0, pc, rrx
    bc24:	3e080010 	mcrcc	0, 0, r0, cr8, cr0, {0}
    bc28:	e3000000 	movw	r0, #0
    bc2c:	09000005 	stmdbeq	r0, {r0, r2}
    bc30:	000000d2 	ldrdeq	r0, [r0], -r2
    bc34:	20100002 	andscs	r0, r0, r2
    bc38:	10000040 	andne	r0, r0, r0, asr #32
    bc3c:	25015605 	strcs	r5, [r1, #-1541]	; 0xfffff9fb
    bc40:	11000006 	tstne	r0, r6
    bc44:	000040b6 	strheq	r4, [r0], -r6
    bc48:	70015905 	andvc	r5, r1, r5, lsl #18
    bc4c:	00000001 	andeq	r0, r0, r1
    bc50:	003e5511 	eorseq	r5, lr, r1, lsl r5
    bc54:	015a0500 	cmpeq	sl, r0, lsl #10
    bc58:	00000025 	andeq	r0, r0, r5, lsr #32
    bc5c:	40f51104 	rscsmi	r1, r5, r4, lsl #2
    bc60:	5b050000 	blpl	14bc68 <_Min_Stack_Size+0x14ba68>
    bc64:	00017001 	andeq	r7, r1, r1
    bc68:	37110800 	ldrcc	r0, [r1, -r0, lsl #16]
    bc6c:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    bc70:	0625015c 			; <UNDEFINED> instruction: 0x0625015c
    bc74:	000c0000 	andeq	r0, ip, r0
    bc78:	0170040f 	cmneq	r0, pc, lsl #8
    bc7c:	0b100000 	bleq	40bc84 <_Min_Stack_Size+0x40ba84>
    bc80:	50000041 	andpl	r0, r0, r1, asr #32
    bc84:	c8016005 	stmdagt	r1, {r0, r2, sp, lr}
    bc88:	11000006 	tstne	r0, r6
    bc8c:	00003eb3 			; <UNDEFINED> instruction: 0x00003eb3
    bc90:	a4016305 	strge	r6, [r1], #-773	; 0xfffffcfb
    bc94:	00000004 	andeq	r0, r0, r4
    bc98:	003dbd11 	eorseq	fp, sp, r1, lsl sp
    bc9c:	01640500 	cmneq	r4, r0, lsl #10
    bca0:	000000fa 	strdeq	r0, [r0], -sl
    bca4:	3fd91104 	svccc	0x00d91104
    bca8:	65050000 	strvs	r0, [r5, #-0]
    bcac:	0000fa01 	andeq	pc, r0, r1, lsl #20
    bcb0:	2c110c00 	ldccs	12, cr0, [r1], {-0}
    bcb4:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    bcb8:	00fa0166 	rscseq	r0, sl, r6, ror #2
    bcbc:	11140000 	tstne	r4, r0
    bcc0:	00003f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    bcc4:	c8016705 	stmdagt	r1, {r0, r2, r8, r9, sl, sp, lr}
    bcc8:	1c000006 	stcne	0, cr0, [r0], {6}
    bccc:	003ef511 	eorseq	pc, lr, r1, lsl r5	; <UNPREDICTABLE>
    bcd0:	01680500 	cmneq	r8, r0, lsl #10
    bcd4:	00000025 	andeq	r0, r0, r5, lsr #32
    bcd8:	40411124 	submi	r1, r1, r4, lsr #2
    bcdc:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
    bce0:	0000fa01 	andeq	pc, r0, r1, lsl #20
    bce4:	e7112800 	ldr	r2, [r1, -r0, lsl #16]
    bce8:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    bcec:	00fa016a 	rscseq	r0, sl, sl, ror #2
    bcf0:	11300000 	teqne	r0, r0
    bcf4:	00003e9d 	muleq	r0, sp, lr
    bcf8:	fa016b05 	blx	66914 <_Min_Stack_Size+0x66714>
    bcfc:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    bd00:	00412711 	subeq	r2, r1, r1, lsl r7
    bd04:	016c0500 	cmneq	ip, r0, lsl #10
    bd08:	000000fa 	strdeq	r0, [r0], -sl
    bd0c:	40d51140 	sbcsmi	r1, r5, r0, asr #2
    bd10:	6d050000 	stcvs	0, cr0, [r5, #-0]
    bd14:	0000fa01 	andeq	pc, r0, r1, lsl #20
    bd18:	08004800 	stmdaeq	r0, {fp, lr}
    bd1c:	000004aa 	andeq	r0, r0, sl, lsr #9
    bd20:	000006d8 	ldrdeq	r0, [r0], -r8
    bd24:	0000d209 	andeq	sp, r0, r9, lsl #4
    bd28:	0f000700 	svceq	0x00000700
    bd2c:	0005e304 	andeq	lr, r5, r4, lsl #6
    bd30:	06e91600 	strbteq	r1, [r9], r0, lsl #12
    bd34:	56140000 	ldrpl	r0, [r4], -r0
    bd38:	00000003 	andeq	r0, r0, r3
    bd3c:	06de040f 	ldrbeq	r0, [lr], pc, lsl #8
    bd40:	040f0000 	streq	r0, [pc], #-0	; bd48 <_Min_Stack_Size+0xbb48>
    bd44:	00000591 	muleq	r0, r1, r5
    bd48:	0186040f 	orreq	r0, r6, pc, lsl #8
    bd4c:	06160000 	ldreq	r0, [r6], -r0
    bd50:	14000007 	strne	r0, [r0], #-7
    bd54:	00000025 	andeq	r0, r0, r5, lsr #32
    bd58:	0c040f00 	stceq	15, cr0, [r4], {-0}
    bd5c:	0f000007 	svceq	0x00000007
    bd60:	0006fb04 	andeq	pc, r6, r4, lsl #22
    bd64:	2b040f00 	blcs	10f96c <_Min_Stack_Size+0x10f76c>
    bd68:	17000006 	strne	r0, [r0, -r6]
    bd6c:	00003f61 	andeq	r3, r0, r1, ror #30
    bd70:	01102506 	tsteq	r0, r6, lsl #10
    bd74:	68600000 	stmdavs	r0!, {}^	; <UNPREDICTABLE>
    bd78:	00100800 	andseq	r0, r0, r0, lsl #16
    bd7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    bd80:	00000752 	andeq	r0, r0, r2, asr r7
    bd84:	0044e818 	subeq	lr, r4, r8, lsl r8
    bd88:	2cd40100 	ldfcse	f0, [r4], {0}
    bd8c:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    bd90:	19000004 	stmdbne	r0, {r2}
    bd94:	0800686a 	stmdaeq	r0, {r1, r3, r5, r6, fp, sp, lr}
    bd98:	00000794 	muleq	r0, r4, r7
    bd9c:	0351011a 	cmpeq	r1, #-2147483642	; 0x80000006
    bda0:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    bda4:	45481b00 	strbmi	r1, [r8, #-2816]	; 0xfffff500
    bda8:	2d060000 	stccs	0, cr0, [r6, #-0]
    bdac:	00000000 	andeq	r0, r0, r0
    bdb0:	00000010 	andeq	r0, r0, r0, lsl r0
    bdb4:	07889c01 	streq	r9, [r8, r1, lsl #24]
    bdb8:	b5180000 	ldrlt	r0, [r8, #-0]
    bdbc:	01000044 	tsteq	r0, r4, asr #32
    bdc0:	000110db 	ldrdeq	r1, [r1], -fp
    bdc4:	0004c400 	andeq	ip, r4, r0, lsl #8
    bdc8:	00001900 	andeq	r1, r0, r0, lsl #18
    bdcc:	07ae0000 	streq	r0, [lr, r0]!
    bdd0:	011a0000 	tsteq	sl, r0
    bdd4:	01f30351 	mvnseq	r0, r1, asr r3
    bdd8:	1c000050 	stcne	0, cr0, [r0], {80}	; 0x50
    bddc:	0000445e 	andeq	r4, r0, lr, asr r4
    bde0:	5602fa05 	strpl	pc, [r2], -r5, lsl #20
    bde4:	1d000003 	stcne	0, cr0, [r0, #-12]
    bde8:	000044f7 	strdeq	r4, [r0], -r7
    bdec:	01102a06 	tsteq	r0, r6, lsl #20
    bdf0:	07ae0000 	streq	r0, [lr, r0]!
    bdf4:	56140000 	ldrpl	r0, [r4], -r0
    bdf8:	14000003 	strne	r0, [r0], #-3
    bdfc:	0000002c 	andeq	r0, r0, ip, lsr #32
    be00:	44ef1e00 	strbtmi	r1, [pc], #3584	; be08 <_Min_Stack_Size+0xbc08>
    be04:	32060000 	andcc	r0, r6, #0
    be08:	00035614 	andeq	r5, r3, r4, lsl r6
    be0c:	01101400 	tsteq	r0, r0, lsl #8
    be10:	00000000 	andeq	r0, r0, r0
    be14:	00000816 	andeq	r0, r0, r6, lsl r8
    be18:	27f30004 	ldrbcs	r0, [r3, r4]!
    be1c:	01040000 	mrseq	r0, (UNDEF: 4)
    be20:	00003ce0 	andeq	r3, r0, r0, ror #25
    be24:	00450f01 	subeq	r0, r5, r1, lsl #30
    be28:	003dca00 	eorseq	ip, sp, r0, lsl #20
    be2c:	000cb800 	andeq	fp, ip, r0, lsl #16
    be30:	00000000 	andeq	r0, r0, r0
    be34:	004f4900 	subeq	r4, pc, r0, lsl #18
    be38:	06010200 	streq	r0, [r1], -r0, lsl #4
    be3c:	000000c3 	andeq	r0, r0, r3, asr #1
    be40:	c1080102 	tstgt	r8, r2, lsl #2
    be44:	02000000 	andeq	r0, r0, #0
    be48:	00510502 	subseq	r0, r1, r2, lsl #10
    be4c:	02020000 	andeq	r0, r2, #0
    be50:	00012307 	andeq	r2, r1, r7, lsl #6
    be54:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    be58:	0000006d 	andeq	r0, r0, sp, rrx
    be5c:	fa070402 	blx	1cce6c <_Min_Stack_Size+0x1ccc6c>
    be60:	02000000 	andeq	r0, r0, #0
    be64:	00680508 	rsbeq	r0, r8, r8, lsl #10
    be68:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    be6c:	0000f507 	andeq	pc, r0, r7, lsl #10
    be70:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    be74:	00746e69 	rsbseq	r6, r4, r9, ror #28
    be78:	ff070402 			; <UNDEFINED> instruction: 0xff070402
    be7c:	04000000 	streq	r0, [r0], #-0
    be80:	00004508 	andeq	r4, r0, r8, lsl #10
    be84:	0064d402 	rsbeq	sp, r4, r2, lsl #8
    be88:	04050000 	streq	r0, [r5], #-0
    be8c:	003ece04 	eorseq	ip, lr, r4, lsl #28
    be90:	5d070300 	stcpl	3, cr0, [r7, #-0]
    be94:	04000000 	streq	r0, [r0], #-0
    be98:	00003e34 	andeq	r3, r0, r4, lsr lr
    be9c:	00411004 	subeq	r1, r1, r4
    bea0:	89040000 	stmdbhi	r4, {}	; <UNPREDICTABLE>
    bea4:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    bea8:	00004127 	andeq	r4, r0, r7, lsr #2
    beac:	403a0600 	eorsmi	r0, sl, r0, lsl #12
    beb0:	61020000 	mrsvs	r0, (UNDEF: 2)
    beb4:	00006401 	andeq	r6, r0, r1, lsl #8
    beb8:	04040700 	streq	r0, [r4], #-1792	; 0xfffff900
    bebc:	0000c44a 	andeq	ip, r0, sl, asr #8
    bec0:	3e3b0800 	cdpcc	8, 3, cr0, cr11, cr0, {0}
    bec4:	4c040000 	stcmi	0, cr0, [r4], {-0}
    bec8:	00000099 	muleq	r0, r9, r0
    becc:	003fc408 	eorseq	ip, pc, r8, lsl #8
    bed0:	c44d0400 	strbgt	r0, [sp], #-1024	; 0xfffffc00
    bed4:	00000000 	andeq	r0, r0, r0
    bed8:	00002c09 	andeq	r2, r0, r9, lsl #24
    bedc:	0000d400 	andeq	sp, r0, r0, lsl #8
    bee0:	00d40a00 	sbcseq	r0, r4, r0, lsl #20
    bee4:	00030000 	andeq	r0, r3, r0
    bee8:	15070402 	strne	r0, [r7, #-1026]	; 0xfffffbfe
    beec:	0b000000 	bleq	bef4 <_Min_Stack_Size+0xbcf4>
    bef0:	fc470408 	mcrr2	4, 0, r0, r7, cr8
    bef4:	0c000000 	stceq	0, cr0, [r0], {-0}
    bef8:	00003e8b 	andeq	r3, r0, fp, lsl #29
    befc:	005d4904 	subseq	r4, sp, r4, lsl #18
    bf00:	0c000000 	stceq	0, cr0, [r0], {-0}
    bf04:	00003e41 	andeq	r3, r0, r1, asr #28
    bf08:	00a54e04 	adceq	r4, r5, r4, lsl #28
    bf0c:	00040000 	andeq	r0, r4, r0
    bf10:	00406b04 	subeq	r6, r0, r4, lsl #22
    bf14:	db4f0400 	blle	13ccf1c <_Min_Stack_Size+0x13ccd1c>
    bf18:	04000000 	streq	r0, [r0], #-0
    bf1c:	00003fa2 	andeq	r3, r0, r2, lsr #31
    bf20:	00785304 	rsbseq	r5, r8, r4, lsl #6
    bf24:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    bf28:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    bf2c:	00004816 	andeq	r4, r0, r6, lsl r8
    bf30:	40760d00 	rsbsmi	r0, r6, r0, lsl #26
    bf34:	05180000 	ldreq	r0, [r8, #-0]
    bf38:	0001702d 	andeq	r7, r1, sp, lsr #32
    bf3c:	41050c00 	tstmi	r5, r0, lsl #24
    bf40:	2f050000 	svccs	0x00050000
    bf44:	00000170 	andeq	r0, r0, r0, ror r1
    bf48:	6b5f0e00 	blvs	17cf750 <_Min_Stack_Size+0x17cf550>
    bf4c:	5d300500 	cfldr32pl	mvfx0, [r0, #-0]
    bf50:	04000000 	streq	r0, [r0], #-0
    bf54:	00407e0c 	subeq	r7, r0, ip, lsl #28
    bf58:	5d300500 	cfldr32pl	mvfx0, [r0, #-0]
    bf5c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    bf60:	0040fa0c 	subeq	pc, r0, ip, lsl #20
    bf64:	5d300500 	cfldr32pl	mvfx0, [r0, #-0]
    bf68:	0c000000 	stceq	0, cr0, [r0], {-0}
    bf6c:	00401b0c 	subeq	r1, r0, ip, lsl #22
    bf70:	5d300500 	cfldr32pl	mvfx0, [r0, #-0]
    bf74:	10000000 	andne	r0, r0, r0
    bf78:	00785f0e 	rsbseq	r5, r8, lr, lsl #30
    bf7c:	01763105 	cmneq	r6, r5, lsl #2
    bf80:	00140000 	andseq	r0, r4, r0
    bf84:	011d040f 	tsteq	sp, pc, lsl #8
    bf88:	12090000 	andne	r0, r9, #0
    bf8c:	86000001 	strhi	r0, [r0], -r1
    bf90:	0a000001 	beq	bf9c <_Min_Stack_Size+0xbd9c>
    bf94:	000000d4 	ldrdeq	r0, [r0], -r4
    bf98:	270d0000 	strcs	r0, [sp, -r0]
    bf9c:	24000040 	strcs	r0, [r0], #-64	; 0xffffffc0
    bfa0:	01ff3505 	mvnseq	r3, r5, lsl #10
    bfa4:	b10c0000 	mrslt	r0, (UNDEF: 12)
    bfa8:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    bfac:	00005d37 	andeq	r5, r0, r7, lsr sp
    bfb0:	020c0000 	andeq	r0, ip, #0
    bfb4:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    bfb8:	00005d38 	andeq	r5, r0, r8, lsr sp
    bfbc:	ba0c0400 	blt	30cfc4 <_Min_Stack_Size+0x30cdc4>
    bfc0:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    bfc4:	00005d39 	andeq	r5, r0, r9, lsr sp
    bfc8:	930c0800 	movwls	r0, #51200	; 0xc800
    bfcc:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    bfd0:	00005d3a 	andeq	r5, r0, sl, lsr sp
    bfd4:	be0c0c00 	cdplt	12, 0, cr0, cr12, cr0, {0}
    bfd8:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    bfdc:	00005d3b 	andeq	r5, r0, fp, lsr sp
    bfe0:	860c1000 	strhi	r1, [ip], -r0
    bfe4:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    bfe8:	00005d3c 	andeq	r5, r0, ip, lsr sp
    bfec:	4a0c1400 	bmi	310ff4 <_Min_Stack_Size+0x310df4>
    bff0:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    bff4:	00005d3d 	andeq	r5, r0, sp, lsr sp
    bff8:	9e0c1800 	cdpls	8, 0, cr1, cr12, cr0, {0}
    bffc:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    c000:	00005d3e 	andeq	r5, r0, lr, lsr sp
    c004:	6e0c1c00 	cdpvs	12, 0, cr1, cr12, cr0, {0}
    c008:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    c00c:	00005d3f 	andeq	r5, r0, pc, lsr sp
    c010:	0d002000 	stceq	0, cr2, [r0, #-0]
    c014:	00003e49 	andeq	r3, r0, r9, asr #28
    c018:	24730508 	ldrbtcs	r0, [r3], #-1288	; 0xfffffaf8
    c01c:	0c000002 	stceq	0, cr0, [r0], {2}
    c020:	000033a7 	andeq	r3, r0, r7, lsr #7
    c024:	02247405 	eoreq	r7, r4, #83886080	; 0x5000000
    c028:	0c000000 	stceq	0, cr0, [r0], {-0}
    c02c:	000045c9 	andeq	r4, r0, r9, asr #11
    c030:	005d7505 	subseq	r7, sp, r5, lsl #10
    c034:	00040000 	andeq	r0, r4, r0
    c038:	002c040f 	eoreq	r0, ip, pc, lsl #8
    c03c:	10100000 	andsne	r0, r0, r0
    c040:	60000041 	andvs	r0, r0, r1, asr #32
    c044:	56017205 	strpl	r7, [r1], -r5, lsl #4
    c048:	11000003 	tstne	r0, r3
    c04c:	00003eee 	andeq	r3, r0, lr, ror #29
    c050:	5d017605 	stcpl	6, cr7, [r1, #-20]	; 0xffffffec
    c054:	00000000 	andeq	r0, r0, r0
    c058:	00445011 	subeq	r5, r4, r1, lsl r0
    c05c:	017b0500 	cmneq	fp, r0, lsl #10
    c060:	0000058b 	andeq	r0, r0, fp, lsl #11
    c064:	44a01104 	strtmi	r1, [r0], #260	; 0x104
    c068:	7b050000 	blvc	14c070 <_Min_Stack_Size+0x14be70>
    c06c:	00058b01 	andeq	r8, r5, r1, lsl #22
    c070:	d6110800 	ldrle	r0, [r1], -r0, lsl #16
    c074:	05000043 	streq	r0, [r0, #-67]	; 0xffffffbd
    c078:	058b017b 	streq	r0, [fp, #379]	; 0x17b
    c07c:	110c0000 	mrsne	r0, (UNDEF: 12)
    c080:	000040d0 	ldrdeq	r4, [r0], -r0
    c084:	5d017d05 	stcpl	13, cr7, [r1, #-20]	; 0xffffffec
    c088:	10000000 	andne	r0, r0, r0
    c08c:	00413611 	subeq	r3, r1, r1, lsl r6
    c090:	017f0500 	cmneq	pc, r0, lsl #10
    c094:	000004a4 	andeq	r0, r0, r4, lsr #9
    c098:	3f7e1114 	svccc	0x007e1114
    c09c:	81050000 	mrshi	r0, (UNDEF: 5)
    c0a0:	00005d01 	andeq	r5, r0, r1, lsl #26
    c0a4:	4f111800 	svcmi	0x00111800
    c0a8:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    c0ac:	005d0183 	subseq	r0, sp, r3, lsl #3
    c0b0:	111c0000 	tstne	ip, r0
    c0b4:	00004117 	andeq	r4, r0, r7, lsl r1
    c0b8:	d5018405 	strle	r8, [r1, #-1029]	; 0xfffffbfb
    c0bc:	20000004 	andcs	r0, r0, r4
    c0c0:	706d5f12 	rsbvc	r5, sp, r2, lsl pc
    c0c4:	01860500 	orreq	r0, r6, r0, lsl #10
    c0c8:	000006d8 	ldrdeq	r0, [r0], -r8
    c0cc:	40611124 	rsbmi	r1, r1, r4, lsr #2
    c0d0:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
    c0d4:	0006e901 	andeq	lr, r6, r1, lsl #18
    c0d8:	0c112800 	ldceq	8, cr2, [r1], {-0}
    c0dc:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    c0e0:	005d018a 	subseq	r0, sp, sl, lsl #3
    c0e4:	112c0000 			; <UNDEFINED> instruction: 0x112c0000
    c0e8:	00003ec0 	andeq	r3, r0, r0, asr #29
    c0ec:	5d018d05 	stcpl	13, cr8, [r1, #-20]	; 0xffffffec
    c0f0:	30000000 	andcc	r0, r0, r0
    c0f4:	003ff611 	eorseq	pc, pc, r1, lsl r6	; <UNPREDICTABLE>
    c0f8:	018e0500 	orreq	r0, lr, r0, lsl #10
    c0fc:	000004a4 	andeq	r0, r0, r4, lsr #9
    c100:	3eae1134 	mcrcc	1, 5, r1, cr14, cr4, {1}
    c104:	90050000 	andls	r0, r5, r0
    c108:	0006ef01 	andeq	lr, r6, r1, lsl #30
    c10c:	7c113800 	ldcvc	8, cr3, [r1], {-0}
    c110:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    c114:	06f50191 	usateq	r0, #21, r1, lsl #3
    c118:	113c0000 	teqne	ip, r0
    c11c:	00003f54 	andeq	r3, r0, r4, asr pc
    c120:	a4019205 	strge	r9, [r1], #-517	; 0xfffffdfb
    c124:	40000004 	andmi	r0, r0, r4
    c128:	003e6b11 	eorseq	r6, lr, r1, lsl fp
    c12c:	01950500 	orrseq	r0, r5, r0, lsl #10
    c130:	00000706 	andeq	r0, r0, r6, lsl #14
    c134:	3fd11144 	svccc	0x00d11144
    c138:	9d050000 	stcls	0, cr0, [r5, #-0]
    c13c:	00055001 	andeq	r5, r5, r1
    c140:	79114800 	ldmdbvc	r1, {fp, lr}
    c144:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    c148:	058b019e 	streq	r0, [fp, #414]	; 0x19e
    c14c:	11540000 	cmpne	r4, r0
    c150:	00003fcb 	andeq	r3, r0, fp, asr #31
    c154:	12019f05 	andne	r9, r1, #5, 30
    c158:	58000007 	stmdapl	r0, {r0, r1, r2}
    c15c:	003e5f11 	eorseq	r5, lr, r1, lsl pc
    c160:	01a00500 	lsleq	r0, r0, #10
    c164:	000004a4 	andeq	r0, r0, r4, lsr #9
    c168:	040f005c 	streq	r0, [pc], #-92	; c170 <_Min_Stack_Size+0xbf70>
    c16c:	0000022a 	andeq	r0, r0, sl, lsr #4
    c170:	0041410d 	subeq	r4, r1, sp, lsl #2
    c174:	b3056800 	movwlt	r6, #22528	; 0x5800
    c178:	00000486 	andeq	r0, r0, r6, lsl #9
    c17c:	00705f0e 	rsbseq	r5, r0, lr, lsl #30
    c180:	0224b405 	eoreq	fp, r4, #83886080	; 0x5000000
    c184:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    c188:	0500725f 	streq	r7, [r0, #-607]	; 0xfffffda1
    c18c:	00005db5 			; <UNDEFINED> instruction: 0x00005db5
    c190:	5f0e0400 	svcpl	0x000e0400
    c194:	b6050077 			; <UNDEFINED> instruction: 0xb6050077
    c198:	0000005d 	andeq	r0, r0, sp, asr r0
    c19c:	3e750c08 	cdpcc	12, 7, cr0, cr5, cr8, {0}
    c1a0:	b7050000 	strlt	r0, [r5, -r0]
    c1a4:	00000033 	andeq	r0, r0, r3, lsr r0
    c1a8:	40060c0c 	andmi	r0, r6, ip, lsl #24
    c1ac:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    c1b0:	00000033 	andeq	r0, r0, r3, lsr r0
    c1b4:	625f0e0e 	subsvs	r0, pc, #14, 28	; 0xe0
    c1b8:	b9050066 	stmdblt	r5, {r1, r2, r5, r6}
    c1bc:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    c1c0:	40e60c10 	rscmi	r0, r6, r0, lsl ip
    c1c4:	ba050000 	blt	14c1cc <_Min_Stack_Size+0x14bfcc>
    c1c8:	0000005d 	andeq	r0, r0, sp, asr r0
    c1cc:	0df80c18 	ldcleq	12, cr0, [r8, #96]!	; 0x60
    c1d0:	bd050000 	stclt	0, cr0, [r5, #-0]
    c1d4:	00000356 	andeq	r0, r0, r6, asr r3
    c1d8:	3ffe0c1c 	svccc	0x00fe0c1c
    c1dc:	c1050000 	mrsgt	r0, (UNDEF: 5)
    c1e0:	00000076 	andeq	r0, r0, r6, ror r0
    c1e4:	39cd0c20 	stmibcc	sp, {r5, sl, fp}^
    c1e8:	c3050000 	movwgt	r0, #20480	; 0x5000
    c1ec:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    c1f0:	395b0c24 	ldmdbcc	fp, {r2, r5, sl, fp}^
    c1f4:	c5050000 	strgt	r0, [r5, #-0]
    c1f8:	000004e0 	andeq	r0, r0, r0, ror #9
    c1fc:	40b00c28 	adcsmi	r0, r0, r8, lsr #24
    c200:	c8050000 	stmdagt	r5, {}	; <UNPREDICTABLE>
    c204:	00000504 	andeq	r0, r0, r4, lsl #10
    c208:	3f910c2c 	svccc	0x00910c2c
    c20c:	c9050000 	stmdbgt	r5, {}	; <UNPREDICTABLE>
    c210:	0000051e 	andeq	r0, r0, lr, lsl r5
    c214:	755f0e30 	ldrbvc	r0, [pc, #-3632]	; b3ec <_Min_Stack_Size+0xb1ec>
    c218:	cc050062 	stcgt	0, cr0, [r5], {98}	; 0x62
    c21c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    c220:	755f0e34 	ldrbvc	r0, [pc, #-3636]	; b3f4 <_Min_Stack_Size+0xb1f4>
    c224:	cd050070 	stcgt	0, cr0, [r5, #-448]	; 0xfffffe40
    c228:	00000224 	andeq	r0, r0, r4, lsr #4
    c22c:	755f0e3c 	ldrbvc	r0, [pc, #-3644]	; b3f8 <_Min_Stack_Size+0xb1f8>
    c230:	ce050072 	mcrgt	0, 0, r0, cr5, cr2, {3}
    c234:	0000005d 	andeq	r0, r0, sp, asr r0
    c238:	3fab0c40 	svccc	0x00ab0c40
    c23c:	d1050000 	mrsle	r0, (UNDEF: 5)
    c240:	00000524 	andeq	r0, r0, r4, lsr #10
    c244:	3ec80c44 	cdpcc	12, 12, cr0, cr8, cr4, {2}
    c248:	d2050000 	andle	r0, r5, #0
    c24c:	00000534 	andeq	r0, r0, r4, lsr r5
    c250:	6c5f0e47 	mrrcvs	14, 4, r0, pc, cr7	; <UNPREDICTABLE>
    c254:	d5050062 	strle	r0, [r5, #-98]	; 0xffffff9e
    c258:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    c25c:	40c70c48 	sbcmi	r0, r7, r8, asr #24
    c260:	d8050000 	stmdale	r5, {}	; <UNPREDICTABLE>
    c264:	0000005d 	andeq	r0, r0, sp, asr r0
    c268:	49750c50 	ldmdbmi	r5!, {r4, r6, sl, fp}^
    c26c:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
    c270:	00000083 	andeq	r0, r0, r3, lsl #1
    c274:	35400c54 	strbcc	r0, [r0, #-3156]	; 0xfffff3ac
    c278:	e0050000 	and	r0, r5, r0
    c27c:	00000107 	andeq	r0, r0, r7, lsl #2
    c280:	3f410c58 	svccc	0x00410c58
    c284:	e2050000 	and	r0, r5, #0
    c288:	000000fc 	strdeq	r0, [r0], -ip
    c28c:	3db50c5c 	ldccc	12, cr0, [r5, #368]!	; 0x170
    c290:	e3050000 	movw	r0, #20480	; 0x5000
    c294:	0000005d 	andeq	r0, r0, sp, asr r0
    c298:	5d130064 	ldcpl	0, cr0, [r3, #-400]	; 0xfffffe70
    c29c:	a4000000 	strge	r0, [r0], #-0
    c2a0:	14000004 	strne	r0, [r0], #-4
    c2a4:	00000356 	andeq	r0, r0, r6, asr r3
    c2a8:	00007614 	andeq	r7, r0, r4, lsl r6
    c2ac:	04a41400 	strteq	r1, [r4], #1024	; 0x400
    c2b0:	5d140000 	ldcpl	0, cr0, [r4, #-0]
    c2b4:	00000000 	andeq	r0, r0, r0
    c2b8:	04aa040f 	strteq	r0, [sl], #1039	; 0x40f
    c2bc:	01020000 	mrseq	r0, (UNDEF: 2)
    c2c0:	0000ca08 	andeq	ip, r0, r8, lsl #20
    c2c4:	86040f00 	strhi	r0, [r4], -r0, lsl #30
    c2c8:	13000004 	movwne	r0, #4
    c2cc:	0000005d 	andeq	r0, r0, sp, asr r0
    c2d0:	000004d5 	ldrdeq	r0, [r0], -r5
    c2d4:	00035614 	andeq	r5, r3, r4, lsl r6
    c2d8:	00761400 	rsbseq	r1, r6, r0, lsl #8
    c2dc:	d5140000 	ldrle	r0, [r4, #-0]
    c2e0:	14000004 	strne	r0, [r0], #-4
    c2e4:	0000005d 	andeq	r0, r0, sp, asr r0
    c2e8:	db040f00 	blle	10fef0 <_Min_Stack_Size+0x10fcf0>
    c2ec:	15000004 	strne	r0, [r0, #-4]
    c2f0:	000004aa 	andeq	r0, r0, sl, lsr #9
    c2f4:	04b7040f 	ldrteq	r0, [r7], #1039	; 0x40f
    c2f8:	8e130000 	cdphi	0, 1, cr0, cr3, cr0, {0}
    c2fc:	04000000 	streq	r0, [r0], #-0
    c300:	14000005 	strne	r0, [r0], #-5
    c304:	00000356 	andeq	r0, r0, r6, asr r3
    c308:	00007614 	andeq	r7, r0, r4, lsl r6
    c30c:	008e1400 	addeq	r1, lr, r0, lsl #8
    c310:	5d140000 	ldcpl	0, cr0, [r4, #-0]
    c314:	00000000 	andeq	r0, r0, r0
    c318:	04e6040f 	strbteq	r0, [r6], #1039	; 0x40f
    c31c:	5d130000 	ldcpl	0, cr0, [r3, #-0]
    c320:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    c324:	14000005 	strne	r0, [r0], #-5
    c328:	00000356 	andeq	r0, r0, r6, asr r3
    c32c:	00007614 	andeq	r7, r0, r4, lsl r6
    c330:	040f0000 	streq	r0, [pc], #-0	; c338 <_Min_Stack_Size+0xc138>
    c334:	0000050a 	andeq	r0, r0, sl, lsl #10
    c338:	00002c09 	andeq	r2, r0, r9, lsl #24
    c33c:	00053400 	andeq	r3, r5, r0, lsl #8
    c340:	00d40a00 	sbcseq	r0, r4, r0, lsl #20
    c344:	00020000 	andeq	r0, r2, r0
    c348:	00002c09 	andeq	r2, r0, r9, lsl #24
    c34c:	00054400 	andeq	r4, r5, r0, lsl #8
    c350:	00d40a00 	sbcseq	r0, r4, r0, lsl #20
    c354:	00000000 	andeq	r0, r0, r0
    c358:	003ee706 	eorseq	lr, lr, r6, lsl #14
    c35c:	011d0500 	tsteq	sp, r0, lsl #10
    c360:	0000035c 	andeq	r0, r0, ip, asr r3
    c364:	00492510 	subeq	r2, r9, r0, lsl r5
    c368:	21050c00 	tstcs	r5, r0, lsl #24
    c36c:	00058501 	andeq	r8, r5, r1, lsl #10
    c370:	41051100 	mrsmi	r1, (UNDEF: 21)
    c374:	23050000 	movwcs	r0, #20480	; 0x5000
    c378:	00058501 	andeq	r8, r5, r1, lsl #10
    c37c:	e0110000 	ands	r0, r1, r0
    c380:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    c384:	005d0124 	subseq	r0, sp, r4, lsr #2
    c388:	11040000 	mrsne	r0, (UNDEF: 4)
    c38c:	00003daf 	andeq	r3, r0, pc, lsr #27
    c390:	8b012505 	blhi	557ac <_Min_Stack_Size+0x555ac>
    c394:	08000005 	stmdaeq	r0, {r0, r2}
    c398:	50040f00 	andpl	r0, r4, r0, lsl #30
    c39c:	0f000005 	svceq	0x00000005
    c3a0:	00054404 	andeq	r4, r5, r4, lsl #8
    c3a4:	40961000 	addsmi	r1, r6, r0
    c3a8:	05180000 	ldreq	r0, [r8, #-0]
    c3ac:	05d3013d 	ldrbeq	r0, [r3, #317]	; 0x13d
    c3b0:	90110000 	andsls	r0, r1, r0
    c3b4:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    c3b8:	05d3013e 	ldrbeq	r0, [r3, #318]	; 0x13e
    c3bc:	11000000 	mrsne	r0, (UNDEF: 0)
    c3c0:	00003f68 	andeq	r3, r0, r8, ror #30
    c3c4:	d3013f05 	movwle	r3, #7941	; 0x1f05
    c3c8:	06000005 	streq	r0, [r0], -r5
    c3cc:	003e5011 	eorseq	r5, lr, r1, lsl r0
    c3d0:	01400500 	cmpeq	r0, r0, lsl #10
    c3d4:	0000003a 	andeq	r0, r0, sl, lsr r0
    c3d8:	4100110c 	tstmi	r0, ip, lsl #2
    c3dc:	43050000 	movwmi	r0, #20480	; 0x5000
    c3e0:	00005601 	andeq	r5, r0, r1, lsl #12
    c3e4:	09001000 	stmdbeq	r0, {ip}
    c3e8:	0000003a 	andeq	r0, r0, sl, lsr r0
    c3ec:	000005e3 	andeq	r0, r0, r3, ror #11
    c3f0:	0000d40a 	andeq	sp, r0, sl, lsl #8
    c3f4:	10000200 	andne	r0, r0, r0, lsl #4
    c3f8:	00004020 	andeq	r4, r0, r0, lsr #32
    c3fc:	01560510 	cmpeq	r6, r0, lsl r5
    c400:	00000625 	andeq	r0, r0, r5, lsr #12
    c404:	0040b611 	subeq	fp, r0, r1, lsl r6
    c408:	01590500 	cmpeq	r9, r0, lsl #10
    c40c:	00000170 	andeq	r0, r0, r0, ror r1
    c410:	3e551100 	rdfccs	f1, f5, f0
    c414:	5a050000 	bpl	14c41c <_Min_Stack_Size+0x14c21c>
    c418:	00005d01 	andeq	r5, r0, r1, lsl #26
    c41c:	f5110400 			; <UNDEFINED> instruction: 0xf5110400
    c420:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    c424:	0170015b 	cmneq	r0, fp, asr r1
    c428:	11080000 	mrsne	r0, (UNDEF: 8)
    c42c:	00003f37 	andeq	r3, r0, r7, lsr pc
    c430:	25015c05 	strcs	r5, [r1, #-3077]	; 0xfffff3fb
    c434:	0c000006 	stceq	0, cr0, [r0], {6}
    c438:	70040f00 	andvc	r0, r4, r0, lsl #30
    c43c:	10000001 	andne	r0, r0, r1
    c440:	0000410b 	andeq	r4, r0, fp, lsl #2
    c444:	01600550 	cmneq	r0, r0, asr r5
    c448:	000006c8 	andeq	r0, r0, r8, asr #13
    c44c:	003eb311 	eorseq	fp, lr, r1, lsl r3
    c450:	01630500 	cmneq	r3, r0, lsl #10
    c454:	000004a4 	andeq	r0, r0, r4, lsr #9
    c458:	3dbd1100 	ldfccs	f1, [sp]
    c45c:	64050000 	strvs	r0, [r5], #-0
    c460:	0000fc01 	andeq	pc, r0, r1, lsl #24
    c464:	d9110400 	ldmdble	r1, {sl}
    c468:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    c46c:	00fc0165 	rscseq	r0, ip, r5, ror #2
    c470:	110c0000 	mrsne	r0, (UNDEF: 12)
    c474:	0000402c 	andeq	r4, r0, ip, lsr #32
    c478:	fc016605 	stc2	6, cr6, [r1], {5}
    c47c:	14000000 	strne	r0, [r0], #-0
    c480:	003f9811 	eorseq	r9, pc, r1, lsl r8	; <UNPREDICTABLE>
    c484:	01670500 	cmneq	r7, r0, lsl #10
    c488:	000006c8 	andeq	r0, r0, r8, asr #13
    c48c:	3ef5111c 	mrccc	1, 7, r1, cr5, cr12, {0}
    c490:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
    c494:	00005d01 	andeq	r5, r0, r1, lsl #26
    c498:	41112400 	tstmi	r1, r0, lsl #8
    c49c:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    c4a0:	00fc0169 	rscseq	r0, ip, r9, ror #2
    c4a4:	11280000 			; <UNDEFINED> instruction: 0x11280000
    c4a8:	00003fe7 	andeq	r3, r0, r7, ror #31
    c4ac:	fc016a05 	stc2	10, cr6, [r1], {5}
    c4b0:	30000000 	andcc	r0, r0, r0
    c4b4:	003e9d11 	eorseq	r9, lr, r1, lsl sp
    c4b8:	016b0500 	cmneq	fp, r0, lsl #10
    c4bc:	000000fc 	strdeq	r0, [r0], -ip
    c4c0:	41271138 			; <UNDEFINED> instruction: 0x41271138
    c4c4:	6c050000 	stcvs	0, cr0, [r5], {-0}
    c4c8:	0000fc01 	andeq	pc, r0, r1, lsl #24
    c4cc:	d5114000 	ldrle	r4, [r1, #-0]
    c4d0:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    c4d4:	00fc016d 	rscseq	r0, ip, sp, ror #2
    c4d8:	00480000 	subeq	r0, r8, r0
    c4dc:	0004aa09 	andeq	sl, r4, r9, lsl #20
    c4e0:	0006d800 	andeq	sp, r6, r0, lsl #16
    c4e4:	00d40a00 	sbcseq	r0, r4, r0, lsl #20
    c4e8:	00070000 	andeq	r0, r7, r0
    c4ec:	05e3040f 	strbeq	r0, [r3, #1039]!	; 0x40f
    c4f0:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    c4f4:	14000006 	strne	r0, [r0], #-6
    c4f8:	00000356 	andeq	r0, r0, r6, asr r3
    c4fc:	de040f00 	cdple	15, 0, cr0, cr4, cr0, {0}
    c500:	0f000006 	svceq	0x00000006
    c504:	00059104 	andeq	r9, r5, r4, lsl #2
    c508:	86040f00 	strhi	r0, [r4], -r0, lsl #30
    c50c:	16000001 	strne	r0, [r0], -r1
    c510:	00000706 	andeq	r0, r0, r6, lsl #14
    c514:	00005d14 	andeq	r5, r0, r4, lsl sp
    c518:	040f0000 	streq	r0, [pc], #-0	; c520 <_Min_Stack_Size+0xc320>
    c51c:	0000070c 	andeq	r0, r0, ip, lsl #14
    c520:	06fb040f 	ldrbteq	r0, [fp], pc, lsl #8
    c524:	040f0000 	streq	r0, [pc], #-0	; c52c <_Min_Stack_Size+0xc32c>
    c528:	0000062b 	andeq	r0, r0, fp, lsr #12
    c52c:	00450104 	subeq	r0, r5, r4, lsl #2
    c530:	6b790100 	blvs	1e4c938 <_Min_Stack_Size+0x1e4c738>
    c534:	0d000000 	stceq	0, cr0, [r0, #-0]
    c538:	00004554 	andeq	r4, r0, r4, asr r5
    c53c:	487b0108 	ldmdami	fp!, {r3, r8}^
    c540:	0c000007 	stceq	0, cr0, [r0], {7}
    c544:	000045ca 	andeq	r4, r0, sl, asr #11
    c548:	00418d01 	subeq	r8, r1, r1, lsl #26
    c54c:	0c000000 	stceq	0, cr0, [r0], {-0}
    c550:	00004106 	andeq	r4, r0, r6, lsl #2
    c554:	07489001 	strbeq	r9, [r8, -r1]
    c558:	00040000 	andeq	r0, r4, r0
    c55c:	0723040f 	streq	r0, [r3, -pc, lsl #8]!
    c560:	5b040000 	blpl	10c568 <_Min_Stack_Size+0x10c368>
    c564:	01000045 	tsteq	r0, r5, asr #32
    c568:	00072391 	muleq	r7, r1, r3
    c56c:	456b1700 	strbmi	r1, [fp, #-1792]!	; 0xfffff900
    c570:	bb010000 	bllt	4c578 <_Min_Stack_Size+0x4c378>
    c574:	0000077e 	andeq	r0, r0, lr, ror r7
    c578:	00077e03 	andeq	r7, r7, r3, lsl #28
    c57c:	74701800 	ldrbtvc	r1, [r0], #-2048	; 0xfffff800
    c580:	bb010072 	bllt	4c750 <_Min_Stack_Size+0x4c550>
    c584:	00000076 	andeq	r0, r0, r6, ror r0
    c588:	01006319 	tsteq	r0, r9, lsl r3
    c58c:	00077ebd 			; <UNDEFINED> instruction: 0x00077ebd
    c590:	040f0000 	streq	r0, [pc], #-0	; c598 <_Min_Stack_Size+0xc398>
    c594:	0000074e 	andeq	r0, r0, lr, asr #14
    c598:	0044ef1a 	subeq	lr, r4, sl, lsl pc
    c59c:	01500100 	cmpeq	r0, r0, lsl #2
    c5a0:	08006870 	stmdaeq	r0, {r4, r5, r6, fp, sp, lr}
    c5a4:	00000088 	andeq	r0, r0, r8, lsl #1
    c5a8:	080e9c01 	stmdaeq	lr, {r0, sl, fp, ip, pc}
    c5ac:	611b0000 	tstvs	fp, r0
    c5b0:	01000045 	tsteq	r0, r5, asr #32
    c5b4:	03560150 	cmpeq	r6, #80, 2
    c5b8:	04f00000 	ldrbteq	r0, [r0], #0
    c5bc:	4d1b0000 	ldcmi	0, cr0, [fp, #-0]
    c5c0:	01000045 	tsteq	r0, r5, asr #32
    c5c4:	00760150 	rsbseq	r0, r6, r0, asr r1
    c5c8:	05430000 	strbeq	r0, [r3, #-0]
    c5cc:	431c0000 	tstmi	ip, #0
    c5d0:	01000045 	tsteq	r0, r5, asr #32
    c5d4:	077e0152 			; <UNDEFINED> instruction: 0x077e0152
    c5d8:	53010000 	movwpl	r0, #4096	; 0x1000
    c5dc:	0100701d 	tsteq	r0, sp, lsl r0
    c5e0:	077e0153 			; <UNDEFINED> instruction: 0x077e0153
    c5e4:	05710000 	ldrbeq	r0, [r1, #-0]!
    c5e8:	711d0000 	tstvc	sp, r0
    c5ec:	01530100 	cmpeq	r3, r0, lsl #2
    c5f0:	0000077e 	andeq	r0, r0, lr, ror r7
    c5f4:	00000584 	andeq	r0, r0, r4, lsl #11
    c5f8:	0007591e 	andeq	r5, r7, lr, lsl r9
    c5fc:	00687600 	rsbeq	r7, r8, r0, lsl #12
    c600:	000ca008 	andeq	sl, ip, r8
    c604:	01570100 	cmpeq	r7, r0, lsl #2
    c608:	0007691f 	andeq	r6, r7, pc, lsl r9
    c60c:	0005b900 	andeq	fp, r5, r0, lsl #18
    c610:	0ca02000 	stceq	0, cr2, [r0]
    c614:	74210000 	strtvc	r0, [r1], #-0
    c618:	e7000007 	str	r0, [r0, -r7]
    c61c:	00000005 	andeq	r0, r0, r5
    c620:	7e220000 	cdpvc	0, 2, cr0, cr2, cr0, {0}
    c624:	01000045 	tsteq	r0, r5, asr #32
    c628:	00077ea9 	andeq	r7, r7, r9, lsr #29
    c62c:	08f70000 	ldmeq	r7!, {}^	; <UNPREDICTABLE>
    c630:	00040000 	andeq	r0, r4, r0
    c634:	000029a9 	andeq	r2, r0, r9, lsr #19
    c638:	3ce00104 	stfcce	f0, [r0], #16
    c63c:	0f010000 	svceq	0x00010000
    c640:	ca000045 	bgt	c75c <_Min_Stack_Size+0xc55c>
    c644:	e000003d 	and	r0, r0, sp, lsr r0
    c648:	0000000c 	andeq	r0, r0, ip
    c64c:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    c650:	02000050 	andeq	r0, r0, #80	; 0x50
    c654:	00c30601 	sbceq	r0, r3, r1, lsl #12
    c658:	01020000 	mrseq	r0, (UNDEF: 2)
    c65c:	0000c108 	andeq	ip, r0, r8, lsl #2
    c660:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    c664:	00000051 	andeq	r0, r0, r1, asr r0
    c668:	23070202 	movwcs	r0, #29186	; 0x7202
    c66c:	02000001 	andeq	r0, r0, #1
    c670:	006d0504 	rsbeq	r0, sp, r4, lsl #10
    c674:	04020000 	streq	r0, [r2], #-0
    c678:	0000fa07 	andeq	pc, r0, r7, lsl #20
    c67c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    c680:	00000068 	andeq	r0, r0, r8, rrx
    c684:	f5070802 			; <UNDEFINED> instruction: 0xf5070802
    c688:	03000000 	movweq	r0, #0
    c68c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    c690:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    c694:	0000ff07 	andeq	pc, r0, r7, lsl #30
    c698:	45080400 	strmi	r0, [r8, #-1024]	; 0xfffffc00
    c69c:	d4020000 	strle	r0, [r2], #-0
    c6a0:	00000064 	andeq	r0, r0, r4, rrx
    c6a4:	0045a504 	subeq	sl, r5, r4, lsl #10
    c6a8:	5d930200 	lfmpl	f0, 4, [r3]
    c6ac:	05000000 	streq	r0, [r0, #-0]
    c6b0:	3ece0404 	cdpcc	4, 12, cr0, cr14, cr4, {0}
    c6b4:	07030000 	streq	r0, [r3, -r0]
    c6b8:	0000005d 	andeq	r0, r0, sp, asr r0
    c6bc:	003e3404 	eorseq	r3, lr, r4, lsl #8
    c6c0:	41100400 	tstmi	r0, r0, lsl #8
    c6c4:	04000000 	streq	r0, [r0], #-0
    c6c8:	00003f89 	andeq	r3, r0, r9, lsl #31
    c6cc:	00412704 	subeq	r2, r1, r4, lsl #14
    c6d0:	3a060000 	bcc	18c6d8 <_Min_Stack_Size+0x18c4d8>
    c6d4:	02000040 	andeq	r0, r0, #64	; 0x40
    c6d8:	00640161 	rsbeq	r0, r4, r1, ror #2
    c6dc:	04070000 	streq	r0, [r7], #-0
    c6e0:	00cf4a04 	sbceq	r4, pc, r4, lsl #20
    c6e4:	3b080000 	blcc	20c6ec <_Min_Stack_Size+0x20c4ec>
    c6e8:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
    c6ec:	0000a44c 	andeq	sl, r0, ip, asr #8
    c6f0:	3fc40800 	svccc	0x00c40800
    c6f4:	4d040000 	stcmi	0, cr0, [r4, #-0]
    c6f8:	000000cf 	andeq	r0, r0, pc, asr #1
    c6fc:	002c0900 	eoreq	r0, ip, r0, lsl #18
    c700:	00df0000 	sbcseq	r0, pc, r0
    c704:	df0a0000 	svcle	0x000a0000
    c708:	03000000 	movweq	r0, #0
    c70c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    c710:	00000015 	andeq	r0, r0, r5, lsl r0
    c714:	4704080b 	strmi	r0, [r4, -fp, lsl #16]
    c718:	00000107 	andeq	r0, r0, r7, lsl #2
    c71c:	003e8b0c 	eorseq	r8, lr, ip, lsl #22
    c720:	5d490400 	cfstrdpl	mvd0, [r9, #-0]
    c724:	00000000 	andeq	r0, r0, r0
    c728:	003e410c 	eorseq	r4, lr, ip, lsl #2
    c72c:	b04e0400 	sublt	r0, lr, r0, lsl #8
    c730:	04000000 	streq	r0, [r0], #-0
    c734:	406b0400 	rsbmi	r0, fp, r0, lsl #8
    c738:	4f040000 	svcmi	0x00040000
    c73c:	000000e6 	andeq	r0, r0, r6, ror #1
    c740:	003fa204 	eorseq	sl, pc, r4, lsl #4
    c744:	83530400 	cmphi	r3, #0, 8
    c748:	04000000 	streq	r0, [r0], #-0
    c74c:	000040a8 	andeq	r4, r0, r8, lsr #1
    c750:	00481605 	subeq	r1, r8, r5, lsl #12
    c754:	760d0000 	strvc	r0, [sp], -r0
    c758:	18000040 	stmdane	r0, {r6}
    c75c:	017b2d05 	cmneq	fp, r5, lsl #26
    c760:	050c0000 	streq	r0, [ip, #-0]
    c764:	05000041 	streq	r0, [r0, #-65]	; 0xffffffbf
    c768:	00017b2f 	andeq	r7, r1, pc, lsr #22
    c76c:	5f0e0000 	svcpl	0x000e0000
    c770:	3005006b 	andcc	r0, r5, fp, rrx
    c774:	0000005d 	andeq	r0, r0, sp, asr r0
    c778:	407e0c04 	rsbsmi	r0, lr, r4, lsl #24
    c77c:	30050000 	andcc	r0, r5, r0
    c780:	0000005d 	andeq	r0, r0, sp, asr r0
    c784:	40fa0c08 	rscsmi	r0, sl, r8, lsl #24
    c788:	30050000 	andcc	r0, r5, r0
    c78c:	0000005d 	andeq	r0, r0, sp, asr r0
    c790:	401b0c0c 	andsmi	r0, fp, ip, lsl #24
    c794:	30050000 	andcc	r0, r5, r0
    c798:	0000005d 	andeq	r0, r0, sp, asr r0
    c79c:	785f0e10 	ldmdavc	pc, {r4, r9, sl, fp}^	; <UNPREDICTABLE>
    c7a0:	81310500 	teqhi	r1, r0, lsl #10
    c7a4:	14000001 	strne	r0, [r0], #-1
    c7a8:	28040f00 	stmdacs	r4, {r8, r9, sl, fp}
    c7ac:	09000001 	stmdbeq	r0, {r0}
    c7b0:	0000011d 	andeq	r0, r0, sp, lsl r1
    c7b4:	00000191 	muleq	r0, r1, r1
    c7b8:	0000df0a 	andeq	sp, r0, sl, lsl #30
    c7bc:	0d000000 	stceq	0, cr0, [r0, #-0]
    c7c0:	00004027 	andeq	r4, r0, r7, lsr #32
    c7c4:	0a350524 	beq	d4dc5c <_Min_Stack_Size+0xd4da5c>
    c7c8:	0c000002 	stceq	0, cr0, [r0], {2}
    c7cc:	00003fb1 			; <UNDEFINED> instruction: 0x00003fb1
    c7d0:	005d3705 	subseq	r3, sp, r5, lsl #14
    c7d4:	0c000000 	stceq	0, cr0, [r0], {-0}
    c7d8:	00003f02 	andeq	r3, r0, r2, lsl #30
    c7dc:	005d3805 	subseq	r3, sp, r5, lsl #16
    c7e0:	0c040000 	stceq	0, cr0, [r4], {-0}
    c7e4:	00003fba 			; <UNDEFINED> instruction: 0x00003fba
    c7e8:	005d3905 	subseq	r3, sp, r5, lsl #18
    c7ec:	0c080000 	stceq	0, cr0, [r8], {-0}
    c7f0:	00003e93 	muleq	r0, r3, lr
    c7f4:	005d3a05 	subseq	r3, sp, r5, lsl #20
    c7f8:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    c7fc:	000040be 	strheq	r4, [r0], -lr
    c800:	005d3b05 	subseq	r3, sp, r5, lsl #22
    c804:	0c100000 	ldceq	0, cr0, [r0], {-0}
    c808:	00004086 	andeq	r4, r0, r6, lsl #1
    c80c:	005d3c05 	subseq	r3, sp, r5, lsl #24
    c810:	0c140000 	ldceq	0, cr0, [r4], {-0}
    c814:	00003f4a 	andeq	r3, r0, sl, asr #30
    c818:	005d3d05 	subseq	r3, sp, r5, lsl #26
    c81c:	0c180000 	ldceq	0, cr0, [r8], {-0}
    c820:	0000409e 	muleq	r0, lr, r0
    c824:	005d3e05 	subseq	r3, sp, r5, lsl #28
    c828:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    c82c:	00003f6e 	andeq	r3, r0, lr, ror #30
    c830:	005d3f05 	subseq	r3, sp, r5, lsl #30
    c834:	00200000 	eoreq	r0, r0, r0
    c838:	003e490d 	eorseq	r4, lr, sp, lsl #18
    c83c:	73050800 	movwvc	r0, #22528	; 0x5800
    c840:	0000022f 	andeq	r0, r0, pc, lsr #4
    c844:	0033a70c 	eorseq	sl, r3, ip, lsl #14
    c848:	2f740500 	svccs	0x00740500
    c84c:	00000002 	andeq	r0, r0, r2
    c850:	0045c90c 	subeq	ip, r5, ip, lsl #18
    c854:	5d750500 	cfldr64pl	mvdx0, [r5, #-0]
    c858:	04000000 	streq	r0, [r0], #-0
    c85c:	2c040f00 	stccs	15, cr0, [r4], {-0}
    c860:	10000000 	andne	r0, r0, r0
    c864:	00004110 	andeq	r4, r0, r0, lsl r1
    c868:	01720560 	cmneq	r2, r0, ror #10
    c86c:	00000361 	andeq	r0, r0, r1, ror #6
    c870:	003eee11 	eorseq	lr, lr, r1, lsl lr
    c874:	01760500 	cmneq	r6, r0, lsl #10
    c878:	0000005d 	andeq	r0, r0, sp, asr r0
    c87c:	44501100 	ldrbmi	r1, [r0], #-256	; 0xffffff00
    c880:	7b050000 	blvc	14c888 <_Min_Stack_Size+0x14c688>
    c884:	00059601 	andeq	r9, r5, r1, lsl #12
    c888:	a0110400 	andsge	r0, r1, r0, lsl #8
    c88c:	05000044 	streq	r0, [r0, #-68]	; 0xffffffbc
    c890:	0596017b 	ldreq	r0, [r6, #379]	; 0x17b
    c894:	11080000 	mrsne	r0, (UNDEF: 8)
    c898:	000043d6 	ldrdeq	r4, [r0], -r6
    c89c:	96017b05 	strls	r7, [r1], -r5, lsl #22
    c8a0:	0c000005 	stceq	0, cr0, [r0], {5}
    c8a4:	0040d011 	subeq	sp, r0, r1, lsl r0
    c8a8:	017d0500 	cmneq	sp, r0, lsl #10
    c8ac:	0000005d 	andeq	r0, r0, sp, asr r0
    c8b0:	41361110 	teqmi	r6, r0, lsl r1
    c8b4:	7f050000 	svcvc	0x00050000
    c8b8:	0004af01 	andeq	sl, r4, r1, lsl #30
    c8bc:	7e111400 	cfmulsvc	mvf1, mvf1, mvf0
    c8c0:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    c8c4:	005d0181 	subseq	r0, sp, r1, lsl #3
    c8c8:	11180000 	tstne	r8, r0
    c8cc:	0000404f 	andeq	r4, r0, pc, asr #32
    c8d0:	5d018305 	stcpl	3, cr8, [r1, #-20]	; 0xffffffec
    c8d4:	1c000000 	stcne	0, cr0, [r0], {-0}
    c8d8:	00411711 	subeq	r1, r1, r1, lsl r7
    c8dc:	01840500 	orreq	r0, r4, r0, lsl #10
    c8e0:	000004e0 	andeq	r0, r0, r0, ror #9
    c8e4:	6d5f1220 	lfmvs	f1, 2, [pc, #-128]	; c86c <_Min_Stack_Size+0xc66c>
    c8e8:	86050070 			; <UNDEFINED> instruction: 0x86050070
    c8ec:	0006e301 	andeq	lr, r6, r1, lsl #6
    c8f0:	61112400 	tstvs	r1, r0, lsl #8
    c8f4:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    c8f8:	06f40188 	ldrbteq	r0, [r4], r8, lsl #3
    c8fc:	11280000 			; <UNDEFINED> instruction: 0x11280000
    c900:	0000400c 	andeq	r4, r0, ip
    c904:	5d018a05 	vstrpl	s16, [r1, #-20]	; 0xffffffec
    c908:	2c000000 	stccs	0, cr0, [r0], {-0}
    c90c:	003ec011 	eorseq	ip, lr, r1, lsl r0
    c910:	018d0500 	orreq	r0, sp, r0, lsl #10
    c914:	0000005d 	andeq	r0, r0, sp, asr r0
    c918:	3ff61130 	svccc	0x00f61130
    c91c:	8e050000 	cdphi	0, 0, cr0, cr5, cr0, {0}
    c920:	0004af01 	andeq	sl, r4, r1, lsl #30
    c924:	ae113400 	cfmulsge	mvf3, mvf1, mvf0
    c928:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    c92c:	06fa0190 	usateq	r0, #26, r0, lsl #3
    c930:	11380000 	teqne	r8, r0
    c934:	00003e7c 	andeq	r3, r0, ip, ror lr
    c938:	00019105 	andeq	r9, r1, r5, lsl #2
    c93c:	3c000007 	stccc	0, cr0, [r0], {7}
    c940:	003f5411 	eorseq	r5, pc, r1, lsl r4	; <UNPREDICTABLE>
    c944:	01920500 	orrseq	r0, r2, r0, lsl #10
    c948:	000004af 	andeq	r0, r0, pc, lsr #9
    c94c:	3e6b1140 	powccem	f1, f3, f0
    c950:	95050000 	strls	r0, [r5, #-0]
    c954:	00071101 	andeq	r1, r7, r1, lsl #2
    c958:	d1114400 	tstle	r1, r0, lsl #8
    c95c:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    c960:	055b019d 	ldrbeq	r0, [fp, #-413]	; 0xfffffe63
    c964:	11480000 	mrsne	r0, (UNDEF: 72)
    c968:	00003f79 	andeq	r3, r0, r9, ror pc
    c96c:	96019e05 	strls	r9, [r1], -r5, lsl #28
    c970:	54000005 	strpl	r0, [r0], #-5
    c974:	003fcb11 	eorseq	ip, pc, r1, lsl fp	; <UNPREDICTABLE>
    c978:	019f0500 	orrseq	r0, pc, r0, lsl #10
    c97c:	0000071d 	andeq	r0, r0, sp, lsl r7
    c980:	3e5f1158 	mrccc	1, 2, r1, cr15, cr8, {2}
    c984:	a0050000 	andge	r0, r5, r0
    c988:	0004af01 	andeq	sl, r4, r1, lsl #30
    c98c:	0f005c00 	svceq	0x00005c00
    c990:	00023504 	andeq	r3, r2, r4, lsl #10
    c994:	41410d00 	cmpmi	r1, r0, lsl #26
    c998:	05680000 	strbeq	r0, [r8, #-0]!
    c99c:	000491b3 			; <UNDEFINED> instruction: 0x000491b3
    c9a0:	705f0e00 	subsvc	r0, pc, r0, lsl #28
    c9a4:	2fb40500 	svccs	0x00b40500
    c9a8:	00000002 	andeq	r0, r0, r2
    c9ac:	00725f0e 	rsbseq	r5, r2, lr, lsl #30
    c9b0:	005db505 	subseq	fp, sp, r5, lsl #10
    c9b4:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    c9b8:	0500775f 	streq	r7, [r0, #-1887]	; 0xfffff8a1
    c9bc:	00005db6 			; <UNDEFINED> instruction: 0x00005db6
    c9c0:	750c0800 	strvc	r0, [ip, #-2048]	; 0xfffff800
    c9c4:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    c9c8:	000033b7 			; <UNDEFINED> instruction: 0x000033b7
    c9cc:	060c0c00 	streq	r0, [ip], -r0, lsl #24
    c9d0:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    c9d4:	000033b8 			; <UNDEFINED> instruction: 0x000033b8
    c9d8:	5f0e0e00 	svcpl	0x000e0e00
    c9dc:	05006662 	streq	r6, [r0, #-1634]	; 0xfffff99e
    c9e0:	00020ab9 			; <UNDEFINED> instruction: 0x00020ab9
    c9e4:	e60c1000 	str	r1, [ip], -r0
    c9e8:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    c9ec:	00005dba 			; <UNDEFINED> instruction: 0x00005dba
    c9f0:	f80c1800 			; <UNDEFINED> instruction: 0xf80c1800
    c9f4:	0500000d 	streq	r0, [r0, #-13]
    c9f8:	000361bd 			; <UNDEFINED> instruction: 0x000361bd
    c9fc:	fe0c1c00 	cdp2	12, 0, cr1, cr12, cr0, {0}
    ca00:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    ca04:	000081c1 	andeq	r8, r0, r1, asr #3
    ca08:	cd0c2000 	stcgt	0, cr2, [ip, #-0]
    ca0c:	05000039 	streq	r0, [r0, #-57]	; 0xffffffc7
    ca10:	0004bcc3 	andeq	fp, r4, r3, asr #25
    ca14:	5b0c2400 	blpl	315a1c <_Min_Stack_Size+0x31581c>
    ca18:	05000039 	streq	r0, [r0, #-57]	; 0xffffffc7
    ca1c:	0004ebc5 	andeq	lr, r4, r5, asr #23
    ca20:	b00c2800 	andlt	r2, ip, r0, lsl #16
    ca24:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    ca28:	00050fc8 	andeq	r0, r5, r8, asr #31
    ca2c:	910c2c00 	tstls	ip, r0, lsl #24
    ca30:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    ca34:	000529c9 	andeq	r2, r5, r9, asr #19
    ca38:	5f0e3000 	svcpl	0x000e3000
    ca3c:	05006275 	streq	r6, [r0, #-629]	; 0xfffffd8b
    ca40:	00020acc 	andeq	r0, r2, ip, asr #21
    ca44:	5f0e3400 	svcpl	0x000e3400
    ca48:	05007075 	streq	r7, [r0, #-117]	; 0xffffff8b
    ca4c:	00022fcd 	andeq	r2, r2, sp, asr #31
    ca50:	5f0e3c00 	svcpl	0x000e3c00
    ca54:	05007275 	streq	r7, [r0, #-629]	; 0xfffffd8b
    ca58:	00005dce 	andeq	r5, r0, lr, asr #27
    ca5c:	ab0c4000 	blge	31ca64 <_Min_Stack_Size+0x31c864>
    ca60:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    ca64:	00052fd1 	ldrdeq	r2, [r5], -r1
    ca68:	c80c4400 	stmdagt	ip, {sl, lr}
    ca6c:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    ca70:	00053fd2 	ldrdeq	r3, [r5], -r2
    ca74:	5f0e4700 	svcpl	0x000e4700
    ca78:	0500626c 	streq	r6, [r0, #-620]	; 0xfffffd94
    ca7c:	00020ad5 	ldrdeq	r0, [r2], -r5
    ca80:	c70c4800 	strgt	r4, [ip, -r0, lsl #16]
    ca84:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    ca88:	00005dd8 	ldrdeq	r5, [r0], -r8
    ca8c:	750c5000 	strvc	r5, [ip, #-0]
    ca90:	05000049 	streq	r0, [r0, #-73]	; 0xffffffb7
    ca94:	00008ed9 	ldrdeq	r8, [r0], -r9
    ca98:	400c5400 	andmi	r5, ip, r0, lsl #8
    ca9c:	05000035 	streq	r0, [r0, #-53]	; 0xffffffcb
    caa0:	000112e0 	andeq	r1, r1, r0, ror #5
    caa4:	410c5800 	tstmi	ip, r0, lsl #16
    caa8:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    caac:	000107e2 	andeq	r0, r1, r2, ror #15
    cab0:	b50c5c00 	strlt	r5, [ip, #-3072]	; 0xfffff400
    cab4:	0500003d 	streq	r0, [r0, #-61]	; 0xffffffc3
    cab8:	00005de3 	andeq	r5, r0, r3, ror #27
    cabc:	13006400 	movwne	r6, #1024	; 0x400
    cac0:	0000005d 	andeq	r0, r0, sp, asr r0
    cac4:	000004af 	andeq	r0, r0, pc, lsr #9
    cac8:	00036114 	andeq	r6, r3, r4, lsl r1
    cacc:	00811400 	addeq	r1, r1, r0, lsl #8
    cad0:	af140000 	svcge	0x00140000
    cad4:	14000004 	strne	r0, [r0], #-4
    cad8:	0000005d 	andeq	r0, r0, sp, asr r0
    cadc:	b5040f00 	strlt	r0, [r4, #-3840]	; 0xfffff100
    cae0:	02000004 	andeq	r0, r0, #4
    cae4:	00ca0801 	sbceq	r0, sl, r1, lsl #16
    cae8:	040f0000 	streq	r0, [pc], #-0	; caf0 <_Min_Stack_Size+0xc8f0>
    caec:	00000491 	muleq	r0, r1, r4
    caf0:	00005d13 	andeq	r5, r0, r3, lsl sp
    caf4:	0004e000 	andeq	lr, r4, r0
    caf8:	03611400 	cmneq	r1, #0, 8
    cafc:	81140000 	tsthi	r4, r0
    cb00:	14000000 	strne	r0, [r0], #-0
    cb04:	000004e0 	andeq	r0, r0, r0, ror #9
    cb08:	00005d14 	andeq	r5, r0, r4, lsl sp
    cb0c:	040f0000 	streq	r0, [pc], #-0	; cb14 <_Min_Stack_Size+0xc914>
    cb10:	000004e6 	andeq	r0, r0, r6, ror #9
    cb14:	0004b515 	andeq	fp, r4, r5, lsl r5
    cb18:	c2040f00 	andgt	r0, r4, #0, 30
    cb1c:	13000004 	movwne	r0, #4
    cb20:	00000099 	muleq	r0, r9, r0
    cb24:	0000050f 	andeq	r0, r0, pc, lsl #10
    cb28:	00036114 	andeq	r6, r3, r4, lsl r1
    cb2c:	00811400 	addeq	r1, r1, r0, lsl #8
    cb30:	99140000 	ldmdbls	r4, {}	; <UNPREDICTABLE>
    cb34:	14000000 	strne	r0, [r0], #-0
    cb38:	0000005d 	andeq	r0, r0, sp, asr r0
    cb3c:	f1040f00 			; <UNDEFINED> instruction: 0xf1040f00
    cb40:	13000004 	movwne	r0, #4
    cb44:	0000005d 	andeq	r0, r0, sp, asr r0
    cb48:	00000529 	andeq	r0, r0, r9, lsr #10
    cb4c:	00036114 	andeq	r6, r3, r4, lsl r1
    cb50:	00811400 	addeq	r1, r1, r0, lsl #8
    cb54:	0f000000 	svceq	0x00000000
    cb58:	00051504 	andeq	r1, r5, r4, lsl #10
    cb5c:	002c0900 	eoreq	r0, ip, r0, lsl #18
    cb60:	053f0000 	ldreq	r0, [pc, #-0]!	; cb68 <_Min_Stack_Size+0xc968>
    cb64:	df0a0000 	svcle	0x000a0000
    cb68:	02000000 	andeq	r0, r0, #0
    cb6c:	002c0900 	eoreq	r0, ip, r0, lsl #18
    cb70:	054f0000 	strbeq	r0, [pc, #-0]	; cb78 <_Min_Stack_Size+0xc978>
    cb74:	df0a0000 	svcle	0x000a0000
    cb78:	00000000 	andeq	r0, r0, r0
    cb7c:	3ee70600 	cdpcc	6, 14, cr0, cr7, cr0, {0}
    cb80:	1d050000 	stcne	0, cr0, [r5, #-0]
    cb84:	00036701 	andeq	r6, r3, r1, lsl #14
    cb88:	49251000 	stmdbmi	r5!, {ip}
    cb8c:	050c0000 	streq	r0, [ip, #-0]
    cb90:	05900121 	ldreq	r0, [r0, #289]	; 0x121
    cb94:	05110000 	ldreq	r0, [r1, #-0]
    cb98:	05000041 	streq	r0, [r0, #-65]	; 0xffffffbf
    cb9c:	05900123 	ldreq	r0, [r0, #291]	; 0x123
    cba0:	11000000 	mrsne	r0, (UNDEF: 0)
    cba4:	00003ee0 	andeq	r3, r0, r0, ror #29
    cba8:	5d012405 	cfstrspl	mvf2, [r1, #-20]	; 0xffffffec
    cbac:	04000000 	streq	r0, [r0], #-0
    cbb0:	003daf11 	eorseq	sl, sp, r1, lsl pc
    cbb4:	01250500 			; <UNDEFINED> instruction: 0x01250500
    cbb8:	00000596 	muleq	r0, r6, r5
    cbbc:	040f0008 	streq	r0, [pc], #-8	; cbc4 <_Min_Stack_Size+0xc9c4>
    cbc0:	0000055b 	andeq	r0, r0, fp, asr r5
    cbc4:	054f040f 	strbeq	r0, [pc, #-1039]	; c7bd <_Min_Stack_Size+0xc5bd>
    cbc8:	96100000 	ldrls	r0, [r0], -r0
    cbcc:	18000040 	stmdane	r0, {r6}
    cbd0:	de013d05 	cdple	13, 0, cr3, cr1, cr5, {0}
    cbd4:	11000005 	tstne	r0, r5
    cbd8:	00004090 	muleq	r0, r0, r0
    cbdc:	de013e05 	cdple	14, 0, cr3, cr1, cr5, {0}
    cbe0:	00000005 	andeq	r0, r0, r5
    cbe4:	003f6811 	eorseq	r6, pc, r1, lsl r8	; <UNPREDICTABLE>
    cbe8:	013f0500 	teqeq	pc, r0, lsl #10
    cbec:	000005de 	ldrdeq	r0, [r0], -lr
    cbf0:	3e501106 	rdfccs	f1, f0, f6
    cbf4:	40050000 	andmi	r0, r5, r0
    cbf8:	00003a01 	andeq	r3, r0, r1, lsl #20
    cbfc:	00110c00 	andseq	r0, r1, r0, lsl #24
    cc00:	05000041 	streq	r0, [r0, #-65]	; 0xffffffbf
    cc04:	00560143 	subseq	r0, r6, r3, asr #2
    cc08:	00100000 	andseq	r0, r0, r0
    cc0c:	00003a09 	andeq	r3, r0, r9, lsl #20
    cc10:	0005ee00 	andeq	lr, r5, r0, lsl #28
    cc14:	00df0a00 	sbcseq	r0, pc, r0, lsl #20
    cc18:	00020000 	andeq	r0, r2, r0
    cc1c:	00402010 	subeq	r2, r0, r0, lsl r0
    cc20:	56051000 	strpl	r1, [r5], -r0
    cc24:	00063001 	andeq	r3, r6, r1
    cc28:	40b61100 	adcsmi	r1, r6, r0, lsl #2
    cc2c:	59050000 	stmdbpl	r5, {}	; <UNPREDICTABLE>
    cc30:	00017b01 	andeq	r7, r1, r1, lsl #22
    cc34:	55110000 	ldrpl	r0, [r1, #-0]
    cc38:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    cc3c:	005d015a 	subseq	r0, sp, sl, asr r1
    cc40:	11040000 	mrsne	r0, (UNDEF: 4)
    cc44:	000040f5 	strdeq	r4, [r0], -r5
    cc48:	7b015b05 	blvc	63864 <_Min_Stack_Size+0x63664>
    cc4c:	08000001 	stmdaeq	r0, {r0}
    cc50:	003f3711 	eorseq	r3, pc, r1, lsl r7	; <UNPREDICTABLE>
    cc54:	015c0500 	cmpeq	ip, r0, lsl #10
    cc58:	00000630 	andeq	r0, r0, r0, lsr r6
    cc5c:	040f000c 	streq	r0, [pc], #-12	; cc64 <_Min_Stack_Size+0xca64>
    cc60:	0000017b 	andeq	r0, r0, fp, ror r1
    cc64:	00410b10 	subeq	r0, r1, r0, lsl fp
    cc68:	60055000 	andvs	r5, r5, r0
    cc6c:	0006d301 	andeq	sp, r6, r1, lsl #6
    cc70:	3eb31100 	frdccs	f1, f3, f0
    cc74:	63050000 	movwvs	r0, #20480	; 0x5000
    cc78:	0004af01 	andeq	sl, r4, r1, lsl #30
    cc7c:	bd110000 	ldclt	0, cr0, [r1, #-0]
    cc80:	0500003d 	streq	r0, [r0, #-61]	; 0xffffffc3
    cc84:	01070164 	tsteq	r7, r4, ror #2
    cc88:	11040000 	mrsne	r0, (UNDEF: 4)
    cc8c:	00003fd9 	ldrdeq	r3, [r0], -r9
    cc90:	07016505 	streq	r6, [r1, -r5, lsl #10]
    cc94:	0c000001 	stceq	0, cr0, [r0], {1}
    cc98:	00402c11 	subeq	r2, r0, r1, lsl ip
    cc9c:	01660500 	cmneq	r6, r0, lsl #10
    cca0:	00000107 	andeq	r0, r0, r7, lsl #2
    cca4:	3f981114 	svccc	0x00981114
    cca8:	67050000 	strvs	r0, [r5, -r0]
    ccac:	0006d301 	andeq	sp, r6, r1, lsl #6
    ccb0:	f5111c00 			; <UNDEFINED> instruction: 0xf5111c00
    ccb4:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    ccb8:	005d0168 	subseq	r0, sp, r8, ror #2
    ccbc:	11240000 			; <UNDEFINED> instruction: 0x11240000
    ccc0:	00004041 	andeq	r4, r0, r1, asr #32
    ccc4:	07016905 	streq	r6, [r1, -r5, lsl #18]
    ccc8:	28000001 	stmdacs	r0, {r0}
    cccc:	003fe711 	eorseq	lr, pc, r1, lsl r7	; <UNPREDICTABLE>
    ccd0:	016a0500 	cmneq	sl, r0, lsl #10
    ccd4:	00000107 	andeq	r0, r0, r7, lsl #2
    ccd8:	3e9d1130 	mrccc	1, 4, r1, cr13, cr0, {1}
    ccdc:	6b050000 	blvs	14cce4 <_Min_Stack_Size+0x14cae4>
    cce0:	00010701 	andeq	r0, r1, r1, lsl #14
    cce4:	27113800 	ldrcs	r3, [r1, -r0, lsl #16]
    cce8:	05000041 	streq	r0, [r0, #-65]	; 0xffffffbf
    ccec:	0107016c 	tsteq	r7, ip, ror #2
    ccf0:	11400000 	mrsne	r0, (UNDEF: 64)
    ccf4:	000040d5 	ldrdeq	r4, [r0], -r5
    ccf8:	07016d05 	streq	r6, [r1, -r5, lsl #26]
    ccfc:	48000001 	stmdami	r0, {r0}
    cd00:	04b50900 	ldrteq	r0, [r5], #2304	; 0x900
    cd04:	06e30000 	strbteq	r0, [r3], r0
    cd08:	df0a0000 	svcle	0x000a0000
    cd0c:	07000000 	streq	r0, [r0, -r0]
    cd10:	ee040f00 	cdp	15, 0, cr0, cr4, cr0, {0}
    cd14:	16000005 	strne	r0, [r0], -r5
    cd18:	000006f4 	strdeq	r0, [r0], -r4
    cd1c:	00036114 	andeq	r6, r3, r4, lsl r1
    cd20:	040f0000 	streq	r0, [pc], #-0	; cd28 <_Min_Stack_Size+0xcb28>
    cd24:	000006e9 	andeq	r0, r0, r9, ror #13
    cd28:	059c040f 	ldreq	r0, [ip, #1039]	; 0x40f
    cd2c:	040f0000 	streq	r0, [pc], #-0	; cd34 <_Min_Stack_Size+0xcb34>
    cd30:	00000191 	muleq	r0, r1, r1
    cd34:	00071116 	andeq	r1, r7, r6, lsl r1
    cd38:	005d1400 	subseq	r1, sp, r0, lsl #8
    cd3c:	0f000000 	svceq	0x00000000
    cd40:	00071704 	andeq	r1, r7, r4, lsl #14
    cd44:	06040f00 	streq	r0, [r4], -r0, lsl #30
    cd48:	0f000007 	svceq	0x00000007
    cd4c:	00063604 	andeq	r3, r6, r4, lsl #12
    cd50:	45010400 	strmi	r0, [r1, #-1024]	; 0xfffffc00
    cd54:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    cd58:	0000006b 	andeq	r0, r0, fp, rrx
    cd5c:	0045540d 	subeq	r5, r5, sp, lsl #8
    cd60:	7b010800 	blvc	4ed68 <_Min_Stack_Size+0x4eb68>
    cd64:	00000753 	andeq	r0, r0, r3, asr r7
    cd68:	0045ca0c 	subeq	ip, r5, ip, lsl #20
    cd6c:	418d0100 	orrmi	r0, sp, r0, lsl #2
    cd70:	00000000 	andeq	r0, r0, r0
    cd74:	0041060c 	subeq	r0, r1, ip, lsl #12
    cd78:	53900100 	orrspl	r0, r0, #0, 2
    cd7c:	04000007 	streq	r0, [r0], #-7
    cd80:	2e040f00 	cdpcs	15, 0, cr0, cr4, cr0, {0}
    cd84:	04000007 	streq	r0, [r0], #-7
    cd88:	0000455b 	andeq	r4, r0, fp, asr r5
    cd8c:	072e9101 	streq	r9, [lr, -r1, lsl #2]!
    cd90:	b7170000 	ldrlt	r0, [r7, -r0]
    cd94:	01000045 	tsteq	r0, r5, asr #32
    cd98:	000081d0 	ldrdeq	r8, [r0], -r0
    cd9c:	079d0100 	ldreq	r0, [sp, r0, lsl #2]
    cda0:	61180000 	tstvs	r8, r0
    cda4:	01000045 	tsteq	r0, r5, asr #32
    cda8:	000361d0 	ldrdeq	r6, [r3], -r0
    cdac:	00731900 	rsbseq	r1, r3, r0, lsl #18
    cdb0:	0723d001 	streq	sp, [r3, -r1]!
    cdb4:	701a0000 	andsvc	r0, sl, r0
    cdb8:	afd20100 	svcge	0x00d20100
    cdbc:	1b000004 	blne	cdd4 <_Min_Stack_Size+0xcbd4>
    cdc0:	000045af 	andeq	r4, r0, pc, lsr #11
    cdc4:	04afd201 	strteq	sp, [pc], #513	; cdcc <_Min_Stack_Size+0xcbcc>
    cdc8:	1c000000 	stcne	0, cr0, [r0], {-0}
    cdcc:	000044f7 	strdeq	r4, [r0], -r7
    cdd0:	0081ed01 	addeq	lr, r1, r1, lsl #26
    cdd4:	68f80000 	ldmvs	r8!, {}^	; <UNPREDICTABLE>
    cdd8:	00ac0800 	adceq	r0, ip, r0, lsl #16
    cddc:	9c010000 	stcls	0, cr0, [r1], {-0}
    cde0:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    cde4:	0045611d 	subeq	r6, r5, sp, lsl r1
    cde8:	61ed0100 	mvnvs	r0, r0, lsl #2
    cdec:	62000003 	andvs	r0, r0, #3
    cdf0:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    cdf4:	ed010073 	stc	0, cr0, [r1, #-460]	; 0xfffffe34
    cdf8:	00000723 	andeq	r0, r0, r3, lsr #14
    cdfc:	000006a4 	andeq	r0, r0, r4, lsr #13
    ce00:	0100701f 	tsteq	r0, pc, lsl r0
    ce04:	0008bcef 	andeq	fp, r8, pc, ror #25
    ce08:	0006de00 	andeq	sp, r6, r0, lsl #28
    ce0c:	00721f00 	rsbseq	r1, r2, r0, lsl #30
    ce10:	08bcef01 	ldmeq	ip!, {r0, r8, r9, sl, fp, sp, lr, pc}
    ce14:	07070000 	streq	r0, [r7, -r0]
    ce18:	70200000 	eorvc	r0, r0, r0
    ce1c:	01007274 	tsteq	r0, r4, ror r2
    ce20:	0004aff0 	strdeq	sl, [r4], -r0
    ce24:	21520100 	cmpcs	r2, r0, lsl #2
    ce28:	000045d7 	ldrdeq	r4, [r0], -r7
    ce2c:	04aff001 	strteq	pc, [pc], #1	; ce34 <_Min_Stack_Size+0xcc34>
    ce30:	07800000 	streq	r0, [r0, r0]
    ce34:	76220000 	strtvc	r0, [r2], -r0
    ce38:	01000049 	tsteq	r0, r9, asr #32
    ce3c:	00005df1 	strdeq	r5, [r0], -r1
    ce40:	21520100 	cmpcs	r2, r0, lsl #2
    ce44:	000045c4 	andeq	r4, r0, r4, asr #11
    ce48:	0723f301 	streq	pc, [r3, -r1, lsl #6]!
    ce4c:	079e0000 	ldreq	r0, [lr, r0]
    ce50:	24230000 	strtcs	r0, [r3], #-0
    ce54:	2a080069 	bcs	20d000 <_Min_Stack_Size+0x20ce00>
    ce58:	42000000 	andmi	r0, r0, #0
    ce5c:	24000008 	strcs	r0, [r0], #-8
    ce60:	006d6572 	rsbeq	r6, sp, r2, ror r5
    ce64:	5d010701 	stcpl	7, cr0, [r1, #-4]
    ce68:	54000000 	strpl	r0, [r0], #-0
    ce6c:	00000008 	andeq	r0, r0, r8
    ce70:	00076425 	andeq	r6, r7, r5, lsr #8
    ce74:	00694e00 	rsbeq	r4, r9, r0, lsl #28
    ce78:	000cc808 	andeq	ip, ip, r8, lsl #16
    ce7c:	01280100 			; <UNDEFINED> instruction: 0x01280100
    ce80:	00077f26 	andeq	r7, r7, r6, lsr #30
    ce84:	00089300 	andeq	r9, r8, r0, lsl #6
    ce88:	07742600 	ldrbeq	r2, [r4, -r0, lsl #12]!
    ce8c:	08e90000 	stmiaeq	r9!, {}^	; <UNPREDICTABLE>
    ce90:	c8270000 	stmdagt	r7!, {}	; <UNPREDICTABLE>
    ce94:	2800000c 	stmdacs	r0, {r2, r3}
    ce98:	00000788 	andeq	r0, r0, r8, lsl #15
    ce9c:	00000907 	andeq	r0, r0, r7, lsl #18
    cea0:	00079128 	andeq	r9, r7, r8, lsr #2
    cea4:	00094800 	andeq	r4, r9, r0, lsl #16
    cea8:	695a2900 	ldmdbvs	sl, {r8, fp, sp}^
    ceac:	08e40800 	stmiaeq	r4!, {fp}^
    ceb0:	088f0000 	stmeq	pc, {}	; <UNPREDICTABLE>
    ceb4:	012a0000 			; <UNDEFINED> instruction: 0x012a0000
    ceb8:	00760250 	rsbseq	r0, r6, r0, asr r2
    cebc:	69642900 	stmdbvs	r4!, {r8, fp, sp}^
    cec0:	08e40800 	stmiaeq	r4!, {fp}^
    cec4:	08a90000 	stmiaeq	r9!, {}	; <UNPREDICTABLE>
    cec8:	012a0000 			; <UNDEFINED> instruction: 0x012a0000
    cecc:	00740251 	rsbseq	r0, r4, r1, asr r2
    ced0:	0250012a 	subseq	r0, r0, #-2147483638	; 0x8000000a
    ced4:	2b000076 	blcs	d0b4 <_Min_Stack_Size+0xceb4>
    ced8:	08006992 	stmdaeq	r0, {r1, r4, r7, r8, fp, sp, lr}
    cedc:	000008e4 	andeq	r0, r0, r4, ror #17
    cee0:	0250012a 	subseq	r0, r0, #-2147483638	; 0x8000000a
    cee4:	00000076 	andeq	r0, r0, r6, ror r0
    cee8:	040f0000 	streq	r0, [pc], #-0	; cef0 <_Min_Stack_Size+0xccf0>
    ceec:	00000759 	andeq	r0, r0, r9, asr r7
    cef0:	00457e2c 	subeq	r7, r5, ip, lsr #28
    cef4:	bcc50100 	stflte	f0, [r5], {0}
    cef8:	05000008 	streq	r0, [r0, #-8]
    cefc:	00013c03 	andeq	r3, r1, r3, lsl #24
    cf00:	45912c20 	ldrmi	r2, [r1, #3104]	; 0xc20
    cf04:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    cf08:	000004af 	andeq	r0, r0, pc, lsr #9
    cf0c:	01380305 	teqeq	r8, r5, lsl #6
    cf10:	cf2d2000 	svcgt	0x002d2000
    cf14:	06000045 	streq	r0, [r0], -r5, asr #32
    cf18:	0000819a 	muleq	r0, sl, r1
    cf1c:	03611400 	cmneq	r1, #0, 8
    cf20:	76140000 	ldrvc	r0, [r4], -r0
    cf24:	00000000 	andeq	r0, r0, r0
    cf28:	000df000 	andeq	pc, sp, r0
    cf2c:	f9000400 			; <UNDEFINED> instruction: 0xf9000400
    cf30:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    cf34:	00469201 	subeq	r9, r6, r1, lsl #4
    cf38:	462e0100 	strtmi	r0, [lr], -r0, lsl #2
    cf3c:	41b80000 			; <UNDEFINED> instruction: 0x41b80000
    cf40:	0d200000 	stceq	0, cr0, [r0, #-0]
    cf44:	00000000 	andeq	r0, r0, r0
    cf48:	52270000 	eorpl	r0, r7, #0
    cf4c:	04020000 	streq	r0, [r2], #-0
    cf50:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    cf54:	45080300 	strmi	r0, [r8, #-768]	; 0xfffffd00
    cf58:	d4020000 	strle	r0, [r2], #-0
    cf5c:	00000037 	andeq	r0, r0, r7, lsr r0
    cf60:	ff070404 			; <UNDEFINED> instruction: 0xff070404
    cf64:	04000000 	streq	r0, [r0], #-0
    cf68:	01230702 			; <UNDEFINED> instruction: 0x01230702
    cf6c:	01040000 	mrseq	r0, (UNDEF: 4)
    cf70:	0000c306 	andeq	ip, r0, r6, lsl #6
    cf74:	08010400 	stmdaeq	r1, {sl}
    cf78:	000000c1 	andeq	r0, r0, r1, asr #1
    cf7c:	51050204 	tstpl	r5, r4, lsl #4
    cf80:	04000000 	streq	r0, [r0], #-0
    cf84:	006d0504 	rsbeq	r0, sp, r4, lsl #10
    cf88:	04040000 	streq	r0, [r4], #-0
    cf8c:	0000fa07 	andeq	pc, r0, r7, lsl #20
    cf90:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    cf94:	00000068 	andeq	r0, r0, r8, rrx
    cf98:	f5070804 			; <UNDEFINED> instruction: 0xf5070804
    cf9c:	03000000 	movweq	r0, #0
    cfa0:	00003ece 	andeq	r3, r0, lr, asr #29
    cfa4:	00250703 	eoreq	r0, r5, r3, lsl #14
    cfa8:	34030000 	strcc	r0, [r3], #-0
    cfac:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
    cfb0:	00005a10 	andeq	r5, r0, r0, lsl sl
    cfb4:	3f890300 	svccc	0x00890300
    cfb8:	27040000 	strcs	r0, [r4, -r0]
    cfbc:	0000005a 	andeq	r0, r0, sl, asr r0
    cfc0:	00403a05 	subeq	r3, r0, r5, lsl #20
    cfc4:	01610200 	cmneq	r1, r0, lsl #4
    cfc8:	00000037 	andeq	r0, r0, r7, lsr r0
    cfcc:	4a040406 	bmi	10dfec <_Min_Stack_Size+0x10ddec>
    cfd0:	000000c2 	andeq	r0, r0, r2, asr #1
    cfd4:	003e3b07 	eorseq	r3, lr, r7, lsl #22
    cfd8:	974c0400 	strbls	r0, [ip, -r0, lsl #8]
    cfdc:	07000000 	streq	r0, [r0, -r0]
    cfe0:	00003fc4 	andeq	r3, r0, r4, asr #31
    cfe4:	00c24d04 	sbceq	r4, r2, r4, lsl #26
    cfe8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    cfec:	0000004c 	andeq	r0, r0, ip, asr #32
    cff0:	000000d2 	ldrdeq	r0, [r0], -r2
    cff4:	0000d209 	andeq	sp, r0, r9, lsl #4
    cff8:	04000300 	streq	r0, [r0], #-768	; 0xfffffd00
    cffc:	00150704 	andseq	r0, r5, r4, lsl #14
    d000:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
    d004:	00fa4704 	rscseq	r4, sl, r4, lsl #14
    d008:	8b0b0000 	blhi	2cd010 <_Min_Stack_Size+0x2cce10>
    d00c:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
    d010:	00002549 	andeq	r2, r0, r9, asr #10
    d014:	410b0000 	mrsmi	r0, (UNDEF: 11)
    d018:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
    d01c:	0000a34e 	andeq	sl, r0, lr, asr #6
    d020:	03000400 	movweq	r0, #1024	; 0x400
    d024:	0000406b 	andeq	r4, r0, fp, rrx
    d028:	00d94f04 	sbcseq	r4, r9, r4, lsl #30
    d02c:	a2030000 	andge	r0, r3, #0
    d030:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    d034:	00007653 	andeq	r7, r0, r3, asr r6
    d038:	03040c00 	movweq	r0, #19456	; 0x4c00
    d03c:	000040a8 	andeq	r4, r0, r8, lsr #1
    d040:	00611605 	rsbeq	r1, r1, r5, lsl #12
    d044:	760d0000 	strvc	r0, [sp], -r0
    d048:	18000040 	stmdane	r0, {r6}
    d04c:	01702d05 	cmneq	r0, r5, lsl #26
    d050:	050b0000 	streq	r0, [fp, #-0]
    d054:	05000041 	streq	r0, [r0, #-65]	; 0xffffffbf
    d058:	0001702f 	andeq	r7, r1, pc, lsr #32
    d05c:	5f0e0000 	svcpl	0x000e0000
    d060:	3005006b 	andcc	r0, r5, fp, rrx
    d064:	00000025 	andeq	r0, r0, r5, lsr #32
    d068:	407e0b04 	rsbsmi	r0, lr, r4, lsl #22
    d06c:	30050000 	andcc	r0, r5, r0
    d070:	00000025 	andeq	r0, r0, r5, lsr #32
    d074:	40fa0b08 	rscsmi	r0, sl, r8, lsl #22
    d078:	30050000 	andcc	r0, r5, r0
    d07c:	00000025 	andeq	r0, r0, r5, lsr #32
    d080:	401b0b0c 	andsmi	r0, fp, ip, lsl #22
    d084:	30050000 	andcc	r0, r5, r0
    d088:	00000025 	andeq	r0, r0, r5, lsr #32
    d08c:	785f0e10 	ldmdavc	pc, {r4, r9, sl, fp}^	; <UNPREDICTABLE>
    d090:	76310500 	ldrtvc	r0, [r1], -r0, lsl #10
    d094:	14000001 	strne	r0, [r0], #-1
    d098:	1d040f00 	stcne	15, cr0, [r4, #-0]
    d09c:	08000001 	stmdaeq	r0, {r0}
    d0a0:	00000112 	andeq	r0, r0, r2, lsl r1
    d0a4:	00000186 	andeq	r0, r0, r6, lsl #3
    d0a8:	0000d209 	andeq	sp, r0, r9, lsl #4
    d0ac:	0d000000 	stceq	0, cr0, [r0, #-0]
    d0b0:	00004027 	andeq	r4, r0, r7, lsr #32
    d0b4:	ff350524 			; <UNDEFINED> instruction: 0xff350524
    d0b8:	0b000001 	bleq	d0c4 <_Min_Stack_Size+0xcec4>
    d0bc:	00003fb1 			; <UNDEFINED> instruction: 0x00003fb1
    d0c0:	00253705 	eoreq	r3, r5, r5, lsl #14
    d0c4:	0b000000 	bleq	d0cc <_Min_Stack_Size+0xcecc>
    d0c8:	00003f02 	andeq	r3, r0, r2, lsl #30
    d0cc:	00253805 	eoreq	r3, r5, r5, lsl #16
    d0d0:	0b040000 	bleq	10d0d8 <_Min_Stack_Size+0x10ced8>
    d0d4:	00003fba 			; <UNDEFINED> instruction: 0x00003fba
    d0d8:	00253905 	eoreq	r3, r5, r5, lsl #18
    d0dc:	0b080000 	bleq	20d0e4 <_Min_Stack_Size+0x20cee4>
    d0e0:	00003e93 	muleq	r0, r3, lr
    d0e4:	00253a05 	eoreq	r3, r5, r5, lsl #20
    d0e8:	0b0c0000 	bleq	30d0f0 <_Min_Stack_Size+0x30cef0>
    d0ec:	000040be 	strheq	r4, [r0], -lr
    d0f0:	00253b05 	eoreq	r3, r5, r5, lsl #22
    d0f4:	0b100000 	bleq	40d0fc <_Min_Stack_Size+0x40cefc>
    d0f8:	00004086 	andeq	r4, r0, r6, lsl #1
    d0fc:	00253c05 	eoreq	r3, r5, r5, lsl #24
    d100:	0b140000 	bleq	50d108 <_Min_Stack_Size+0x50cf08>
    d104:	00003f4a 	andeq	r3, r0, sl, asr #30
    d108:	00253d05 	eoreq	r3, r5, r5, lsl #26
    d10c:	0b180000 	bleq	60d114 <_Min_Stack_Size+0x60cf14>
    d110:	0000409e 	muleq	r0, lr, r0
    d114:	00253e05 	eoreq	r3, r5, r5, lsl #28
    d118:	0b1c0000 	bleq	70d120 <_Min_Stack_Size+0x70cf20>
    d11c:	00003f6e 	andeq	r3, r0, lr, ror #30
    d120:	00253f05 	eoreq	r3, r5, r5, lsl #30
    d124:	00200000 	eoreq	r0, r0, r0
    d128:	003e490d 	eorseq	r4, lr, sp, lsl #18
    d12c:	73050800 	movwvc	r0, #22528	; 0x5800
    d130:	00000224 	andeq	r0, r0, r4, lsr #4
    d134:	0033a70b 	eorseq	sl, r3, fp, lsl #14
    d138:	24740500 	ldrbtcs	r0, [r4], #-1280	; 0xfffffb00
    d13c:	00000002 	andeq	r0, r0, r2
    d140:	0045c90b 	subeq	ip, r5, fp, lsl #18
    d144:	25750500 	ldrbcs	r0, [r5, #-1280]!	; 0xfffffb00
    d148:	04000000 	streq	r0, [r0], #-0
    d14c:	4c040f00 	stcmi	15, cr0, [r4], {-0}
    d150:	10000000 	andne	r0, r0, r0
    d154:	00004110 	andeq	r4, r0, r0, lsl r1
    d158:	01720560 	cmneq	r2, r0, ror #10
    d15c:	00000356 	andeq	r0, r0, r6, asr r3
    d160:	003eee11 	eorseq	lr, lr, r1, lsl lr
    d164:	01760500 	cmneq	r6, r0, lsl #10
    d168:	00000025 	andeq	r0, r0, r5, lsr #32
    d16c:	44501100 	ldrbmi	r1, [r0], #-256	; 0xffffff00
    d170:	7b050000 	blvc	14d178 <_Min_Stack_Size+0x14cf78>
    d174:	00058b01 	andeq	r8, r5, r1, lsl #22
    d178:	a0110400 	andsge	r0, r1, r0, lsl #8
    d17c:	05000044 	streq	r0, [r0, #-68]	; 0xffffffbc
    d180:	058b017b 	streq	r0, [fp, #379]	; 0x17b
    d184:	11080000 	mrsne	r0, (UNDEF: 8)
    d188:	000043d6 	ldrdeq	r4, [r0], -r6
    d18c:	8b017b05 	blhi	6bda8 <_Min_Stack_Size+0x6bba8>
    d190:	0c000005 	stceq	0, cr0, [r0], {5}
    d194:	0040d011 	subeq	sp, r0, r1, lsl r0
    d198:	017d0500 	cmneq	sp, r0, lsl #10
    d19c:	00000025 	andeq	r0, r0, r5, lsr #32
    d1a0:	41361110 	teqmi	r6, r0, lsl r1
    d1a4:	7f050000 	svcvc	0x00050000
    d1a8:	0004a401 	andeq	sl, r4, r1, lsl #8
    d1ac:	7e111400 	cfmulsvc	mvf1, mvf1, mvf0
    d1b0:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    d1b4:	00250181 	eoreq	r0, r5, r1, lsl #3
    d1b8:	11180000 	tstne	r8, r0
    d1bc:	0000404f 	andeq	r4, r0, pc, asr #32
    d1c0:	25018305 	strcs	r8, [r1, #-773]	; 0xfffffcfb
    d1c4:	1c000000 	stcne	0, cr0, [r0], {-0}
    d1c8:	00411711 	subeq	r1, r1, r1, lsl r7
    d1cc:	01840500 	orreq	r0, r4, r0, lsl #10
    d1d0:	000004d5 	ldrdeq	r0, [r0], -r5
    d1d4:	6d5f1220 	lfmvs	f1, 2, [pc, #-128]	; d15c <_Min_Stack_Size+0xcf5c>
    d1d8:	86050070 			; <UNDEFINED> instruction: 0x86050070
    d1dc:	0006d801 	andeq	sp, r6, r1, lsl #16
    d1e0:	61112400 	tstvs	r1, r0, lsl #8
    d1e4:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    d1e8:	06e90188 	strbteq	r0, [r9], r8, lsl #3
    d1ec:	11280000 			; <UNDEFINED> instruction: 0x11280000
    d1f0:	0000400c 	andeq	r4, r0, ip
    d1f4:	25018a05 	strcs	r8, [r1, #-2565]	; 0xfffff5fb
    d1f8:	2c000000 	stccs	0, cr0, [r0], {-0}
    d1fc:	003ec011 	eorseq	ip, lr, r1, lsl r0
    d200:	018d0500 	orreq	r0, sp, r0, lsl #10
    d204:	00000025 	andeq	r0, r0, r5, lsr #32
    d208:	3ff61130 	svccc	0x00f61130
    d20c:	8e050000 	cdphi	0, 0, cr0, cr5, cr0, {0}
    d210:	0004a401 	andeq	sl, r4, r1, lsl #8
    d214:	ae113400 	cfmulsge	mvf3, mvf1, mvf0
    d218:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    d21c:	06ef0190 	usateq	r0, #15, r0, lsl #3
    d220:	11380000 	teqne	r8, r0
    d224:	00003e7c 	andeq	r3, r0, ip, ror lr
    d228:	f5019105 			; <UNDEFINED> instruction: 0xf5019105
    d22c:	3c000006 	stccc	0, cr0, [r0], {6}
    d230:	003f5411 	eorseq	r5, pc, r1, lsl r4	; <UNPREDICTABLE>
    d234:	01920500 	orrseq	r0, r2, r0, lsl #10
    d238:	000004a4 	andeq	r0, r0, r4, lsr #9
    d23c:	3e6b1140 	powccem	f1, f3, f0
    d240:	95050000 	strls	r0, [r5, #-0]
    d244:	00070601 	andeq	r0, r7, r1, lsl #12
    d248:	d1114400 	tstle	r1, r0, lsl #8
    d24c:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    d250:	0550019d 	ldrbeq	r0, [r0, #-413]	; 0xfffffe63
    d254:	11480000 	mrsne	r0, (UNDEF: 72)
    d258:	00003f79 	andeq	r3, r0, r9, ror pc
    d25c:	8b019e05 	blhi	74a78 <_Min_Stack_Size+0x74878>
    d260:	54000005 	strpl	r0, [r0], #-5
    d264:	003fcb11 	eorseq	ip, pc, r1, lsl fp	; <UNPREDICTABLE>
    d268:	019f0500 	orrseq	r0, pc, r0, lsl #10
    d26c:	00000712 	andeq	r0, r0, r2, lsl r7
    d270:	3e5f1158 	mrccc	1, 2, r1, cr15, cr8, {2}
    d274:	a0050000 	andge	r0, r5, r0
    d278:	0004a401 	andeq	sl, r4, r1, lsl #8
    d27c:	0f005c00 	svceq	0x00005c00
    d280:	00022a04 	andeq	r2, r2, r4, lsl #20
    d284:	41410d00 	cmpmi	r1, r0, lsl #26
    d288:	05680000 	strbeq	r0, [r8, #-0]!
    d28c:	000486b3 			; <UNDEFINED> instruction: 0x000486b3
    d290:	705f0e00 	subsvc	r0, pc, r0, lsl #28
    d294:	24b40500 	ldrtcs	r0, [r4], #1280	; 0x500
    d298:	00000002 	andeq	r0, r0, r2
    d29c:	00725f0e 	rsbseq	r5, r2, lr, lsl #30
    d2a0:	0025b505 	eoreq	fp, r5, r5, lsl #10
    d2a4:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    d2a8:	0500775f 	streq	r7, [r0, #-1887]	; 0xfffff8a1
    d2ac:	000025b6 			; <UNDEFINED> instruction: 0x000025b6
    d2b0:	750b0800 	strvc	r0, [fp, #-2048]	; 0xfffff800
    d2b4:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    d2b8:	000053b7 			; <UNDEFINED> instruction: 0x000053b7
    d2bc:	060b0c00 	streq	r0, [fp], -r0, lsl #24
    d2c0:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    d2c4:	000053b8 			; <UNDEFINED> instruction: 0x000053b8
    d2c8:	5f0e0e00 	svcpl	0x000e0e00
    d2cc:	05006662 	streq	r6, [r0, #-1634]	; 0xfffff99e
    d2d0:	0001ffb9 			; <UNDEFINED> instruction: 0x0001ffb9
    d2d4:	e60b1000 	str	r1, [fp], -r0
    d2d8:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    d2dc:	000025ba 			; <UNDEFINED> instruction: 0x000025ba
    d2e0:	f80b1800 			; <UNDEFINED> instruction: 0xf80b1800
    d2e4:	0500000d 	streq	r0, [r0, #-13]
    d2e8:	000356bd 			; <UNDEFINED> instruction: 0x000356bd
    d2ec:	fe0b1c00 	cdp2	12, 0, cr1, cr11, cr0, {0}
    d2f0:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    d2f4:	000110c1 	andeq	r1, r1, r1, asr #1
    d2f8:	cd0b2000 	stcgt	0, cr2, [fp, #-0]
    d2fc:	05000039 	streq	r0, [r0, #-57]	; 0xffffffc7
    d300:	0004b1c3 	andeq	fp, r4, r3, asr #3
    d304:	5b0b2400 	blpl	2d630c <_Min_Stack_Size+0x2d610c>
    d308:	05000039 	streq	r0, [r0, #-57]	; 0xffffffc7
    d30c:	0004e0c5 	andeq	lr, r4, r5, asr #1
    d310:	b00b2800 	andlt	r2, fp, r0, lsl #16
    d314:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    d318:	000504c8 	andeq	r0, r5, r8, asr #9
    d31c:	910b2c00 	tstls	fp, r0, lsl #24
    d320:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    d324:	00051ec9 	andeq	r1, r5, r9, asr #29
    d328:	5f0e3000 	svcpl	0x000e3000
    d32c:	05006275 	streq	r6, [r0, #-629]	; 0xfffffd8b
    d330:	0001ffcc 	andeq	pc, r1, ip, asr #31
    d334:	5f0e3400 	svcpl	0x000e3400
    d338:	05007075 	streq	r7, [r0, #-117]	; 0xffffff8b
    d33c:	000224cd 	andeq	r2, r2, sp, asr #9
    d340:	5f0e3c00 	svcpl	0x000e3c00
    d344:	05007275 	streq	r7, [r0, #-629]	; 0xfffffd8b
    d348:	000025ce 	andeq	r2, r0, lr, asr #11
    d34c:	ab0b4000 	blge	2dd354 <_Min_Stack_Size+0x2dd154>
    d350:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    d354:	000524d1 	ldrdeq	r2, [r5], -r1
    d358:	c80b4400 	stmdagt	fp, {sl, lr}
    d35c:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    d360:	000534d2 	ldrdeq	r3, [r5], -r2
    d364:	5f0e4700 	svcpl	0x000e4700
    d368:	0500626c 	streq	r6, [r0, #-620]	; 0xfffffd94
    d36c:	0001ffd5 	ldrdeq	pc, [r1], -r5
    d370:	c70b4800 	strgt	r4, [fp, -r0, lsl #16]
    d374:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    d378:	000025d8 	ldrdeq	r2, [r0], -r8
    d37c:	750b5000 	strvc	r5, [fp, #-0]
    d380:	05000049 	streq	r0, [r0, #-73]	; 0xffffffb7
    d384:	000081d9 	ldrdeq	r8, [r0], -r9
    d388:	400b5400 	andmi	r5, fp, r0, lsl #8
    d38c:	05000035 	streq	r0, [r0, #-53]	; 0xffffffcb
    d390:	000105e0 	andeq	r0, r1, r0, ror #11
    d394:	410b5800 	tstmi	fp, r0, lsl #16
    d398:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    d39c:	0000fae2 	andeq	pc, r0, r2, ror #21
    d3a0:	b50b5c00 	strlt	r5, [fp, #-3072]	; 0xfffff400
    d3a4:	0500003d 	streq	r0, [r0, #-61]	; 0xffffffc3
    d3a8:	000025e3 	andeq	r2, r0, r3, ror #11
    d3ac:	13006400 	movwne	r6, #1024	; 0x400
    d3b0:	00000025 	andeq	r0, r0, r5, lsr #32
    d3b4:	000004a4 	andeq	r0, r0, r4, lsr #9
    d3b8:	00035614 	andeq	r5, r3, r4, lsl r6
    d3bc:	01101400 	tsteq	r0, r0, lsl #8
    d3c0:	a4140000 	ldrge	r0, [r4], #-0
    d3c4:	14000004 	strne	r0, [r0], #-4
    d3c8:	00000025 	andeq	r0, r0, r5, lsr #32
    d3cc:	aa040f00 	bge	110fd4 <_Min_Stack_Size+0x110dd4>
    d3d0:	04000004 	streq	r0, [r0], #-4
    d3d4:	00ca0801 	sbceq	r0, sl, r1, lsl #16
    d3d8:	040f0000 	streq	r0, [pc], #-0	; d3e0 <_Min_Stack_Size+0xd1e0>
    d3dc:	00000486 	andeq	r0, r0, r6, lsl #9
    d3e0:	00002513 	andeq	r2, r0, r3, lsl r5
    d3e4:	0004d500 	andeq	sp, r4, r0, lsl #10
    d3e8:	03561400 	cmpeq	r6, #0, 8
    d3ec:	10140000 	andsne	r0, r4, r0
    d3f0:	14000001 	strne	r0, [r0], #-1
    d3f4:	000004d5 	ldrdeq	r0, [r0], -r5
    d3f8:	00002514 	andeq	r2, r0, r4, lsl r5
    d3fc:	040f0000 	streq	r0, [pc], #-0	; d404 <_Min_Stack_Size+0xd204>
    d400:	000004db 	ldrdeq	r0, [r0], -fp
    d404:	0004aa15 	andeq	sl, r4, r5, lsl sl
    d408:	b7040f00 	strlt	r0, [r4, -r0, lsl #30]
    d40c:	13000004 	movwne	r0, #4
    d410:	0000008c 	andeq	r0, r0, ip, lsl #1
    d414:	00000504 	andeq	r0, r0, r4, lsl #10
    d418:	00035614 	andeq	r5, r3, r4, lsl r6
    d41c:	01101400 	tsteq	r0, r0, lsl #8
    d420:	8c140000 	ldchi	0, cr0, [r4], {-0}
    d424:	14000000 	strne	r0, [r0], #-0
    d428:	00000025 	andeq	r0, r0, r5, lsr #32
    d42c:	e6040f00 	str	r0, [r4], -r0, lsl #30
    d430:	13000004 	movwne	r0, #4
    d434:	00000025 	andeq	r0, r0, r5, lsr #32
    d438:	0000051e 	andeq	r0, r0, lr, lsl r5
    d43c:	00035614 	andeq	r5, r3, r4, lsl r6
    d440:	01101400 	tsteq	r0, r0, lsl #8
    d444:	0f000000 	svceq	0x00000000
    d448:	00050a04 	andeq	r0, r5, r4, lsl #20
    d44c:	004c0800 	subeq	r0, ip, r0, lsl #16
    d450:	05340000 	ldreq	r0, [r4, #-0]!
    d454:	d2090000 	andle	r0, r9, #0
    d458:	02000000 	andeq	r0, r0, #0
    d45c:	004c0800 	subeq	r0, ip, r0, lsl #16
    d460:	05440000 	strbeq	r0, [r4, #-0]
    d464:	d2090000 	andle	r0, r9, #0
    d468:	00000000 	andeq	r0, r0, r0
    d46c:	3ee70500 	cdpcc	5, 14, cr0, cr7, cr0, {0}
    d470:	1d050000 	stcne	0, cr0, [r5, #-0]
    d474:	00035c01 	andeq	r5, r3, r1, lsl #24
    d478:	49251000 	stmdbmi	r5!, {ip}
    d47c:	050c0000 	streq	r0, [ip, #-0]
    d480:	05850121 	streq	r0, [r5, #289]	; 0x121
    d484:	05110000 	ldreq	r0, [r1, #-0]
    d488:	05000041 	streq	r0, [r0, #-65]	; 0xffffffbf
    d48c:	05850123 	streq	r0, [r5, #291]	; 0x123
    d490:	11000000 	mrsne	r0, (UNDEF: 0)
    d494:	00003ee0 	andeq	r3, r0, r0, ror #29
    d498:	25012405 	strcs	r2, [r1, #-1029]	; 0xfffffbfb
    d49c:	04000000 	streq	r0, [r0], #-0
    d4a0:	003daf11 	eorseq	sl, sp, r1, lsl pc
    d4a4:	01250500 			; <UNDEFINED> instruction: 0x01250500
    d4a8:	0000058b 	andeq	r0, r0, fp, lsl #11
    d4ac:	040f0008 	streq	r0, [pc], #-8	; d4b4 <_Min_Stack_Size+0xd2b4>
    d4b0:	00000550 	andeq	r0, r0, r0, asr r5
    d4b4:	0544040f 	strbeq	r0, [r4, #-1039]	; 0xfffffbf1
    d4b8:	96100000 	ldrls	r0, [r0], -r0
    d4bc:	18000040 	stmdane	r0, {r6}
    d4c0:	d3013d05 	movwle	r3, #7429	; 0x1d05
    d4c4:	11000005 	tstne	r0, r5
    d4c8:	00004090 	muleq	r0, r0, r0
    d4cc:	d3013e05 	movwle	r3, #7685	; 0x1e05
    d4d0:	00000005 	andeq	r0, r0, r5
    d4d4:	003f6811 	eorseq	r6, pc, r1, lsl r8	; <UNPREDICTABLE>
    d4d8:	013f0500 	teqeq	pc, r0, lsl #10
    d4dc:	000005d3 	ldrdeq	r0, [r0], -r3
    d4e0:	3e501106 	rdfccs	f1, f0, f6
    d4e4:	40050000 	andmi	r0, r5, r0
    d4e8:	00003e01 	andeq	r3, r0, r1, lsl #28
    d4ec:	00110c00 	andseq	r0, r1, r0, lsl #24
    d4f0:	05000041 	streq	r0, [r0, #-65]	; 0xffffffbf
    d4f4:	006f0143 	rsbeq	r0, pc, r3, asr #2
    d4f8:	00100000 	andseq	r0, r0, r0
    d4fc:	00003e08 	andeq	r3, r0, r8, lsl #28
    d500:	0005e300 	andeq	lr, r5, r0, lsl #6
    d504:	00d20900 	sbcseq	r0, r2, r0, lsl #18
    d508:	00020000 	andeq	r0, r2, r0
    d50c:	00402010 	subeq	r2, r0, r0, lsl r0
    d510:	56051000 	strpl	r1, [r5], -r0
    d514:	00062501 	andeq	r2, r6, r1, lsl #10
    d518:	40b61100 	adcsmi	r1, r6, r0, lsl #2
    d51c:	59050000 	stmdbpl	r5, {}	; <UNPREDICTABLE>
    d520:	00017001 	andeq	r7, r1, r1
    d524:	55110000 	ldrpl	r0, [r1, #-0]
    d528:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    d52c:	0025015a 	eoreq	r0, r5, sl, asr r1
    d530:	11040000 	mrsne	r0, (UNDEF: 4)
    d534:	000040f5 	strdeq	r4, [r0], -r5
    d538:	70015b05 	andvc	r5, r1, r5, lsl #22
    d53c:	08000001 	stmdaeq	r0, {r0}
    d540:	003f3711 	eorseq	r3, pc, r1, lsl r7	; <UNPREDICTABLE>
    d544:	015c0500 	cmpeq	ip, r0, lsl #10
    d548:	00000625 	andeq	r0, r0, r5, lsr #12
    d54c:	040f000c 	streq	r0, [pc], #-12	; d554 <_Min_Stack_Size+0xd354>
    d550:	00000170 	andeq	r0, r0, r0, ror r1
    d554:	00410b10 	subeq	r0, r1, r0, lsl fp
    d558:	60055000 	andvs	r5, r5, r0
    d55c:	0006c801 	andeq	ip, r6, r1, lsl #16
    d560:	3eb31100 	frdccs	f1, f3, f0
    d564:	63050000 	movwvs	r0, #20480	; 0x5000
    d568:	0004a401 	andeq	sl, r4, r1, lsl #8
    d56c:	bd110000 	ldclt	0, cr0, [r1, #-0]
    d570:	0500003d 	streq	r0, [r0, #-61]	; 0xffffffc3
    d574:	00fa0164 	rscseq	r0, sl, r4, ror #2
    d578:	11040000 	mrsne	r0, (UNDEF: 4)
    d57c:	00003fd9 	ldrdeq	r3, [r0], -r9
    d580:	fa016505 	blx	6699c <_Min_Stack_Size+0x6679c>
    d584:	0c000000 	stceq	0, cr0, [r0], {-0}
    d588:	00402c11 	subeq	r2, r0, r1, lsl ip
    d58c:	01660500 	cmneq	r6, r0, lsl #10
    d590:	000000fa 	strdeq	r0, [r0], -sl
    d594:	3f981114 	svccc	0x00981114
    d598:	67050000 	strvs	r0, [r5, -r0]
    d59c:	0006c801 	andeq	ip, r6, r1, lsl #16
    d5a0:	f5111c00 			; <UNDEFINED> instruction: 0xf5111c00
    d5a4:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    d5a8:	00250168 	eoreq	r0, r5, r8, ror #2
    d5ac:	11240000 			; <UNDEFINED> instruction: 0x11240000
    d5b0:	00004041 	andeq	r4, r0, r1, asr #32
    d5b4:	fa016905 	blx	679d0 <_Min_Stack_Size+0x677d0>
    d5b8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    d5bc:	003fe711 	eorseq	lr, pc, r1, lsl r7	; <UNPREDICTABLE>
    d5c0:	016a0500 	cmneq	sl, r0, lsl #10
    d5c4:	000000fa 	strdeq	r0, [r0], -sl
    d5c8:	3e9d1130 	mrccc	1, 4, r1, cr13, cr0, {1}
    d5cc:	6b050000 	blvs	14d5d4 <_Min_Stack_Size+0x14d3d4>
    d5d0:	0000fa01 	andeq	pc, r0, r1, lsl #20
    d5d4:	27113800 	ldrcs	r3, [r1, -r0, lsl #16]
    d5d8:	05000041 	streq	r0, [r0, #-65]	; 0xffffffbf
    d5dc:	00fa016c 	rscseq	r0, sl, ip, ror #2
    d5e0:	11400000 	mrsne	r0, (UNDEF: 64)
    d5e4:	000040d5 	ldrdeq	r4, [r0], -r5
    d5e8:	fa016d05 	blx	68a04 <_Min_Stack_Size+0x68804>
    d5ec:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    d5f0:	04aa0800 	strteq	r0, [sl], #2048	; 0x800
    d5f4:	06d80000 	ldrbeq	r0, [r8], r0
    d5f8:	d2090000 	andle	r0, r9, #0
    d5fc:	07000000 	streq	r0, [r0, -r0]
    d600:	e3040f00 	movw	r0, #20224	; 0x4f00
    d604:	16000005 	strne	r0, [r0], -r5
    d608:	000006e9 	andeq	r0, r0, r9, ror #13
    d60c:	00035614 	andeq	r5, r3, r4, lsl r6
    d610:	040f0000 	streq	r0, [pc], #-0	; d618 <_Min_Stack_Size+0xd418>
    d614:	000006de 	ldrdeq	r0, [r0], -lr
    d618:	0591040f 	ldreq	r0, [r1, #1039]	; 0x40f
    d61c:	040f0000 	streq	r0, [pc], #-0	; d624 <_Min_Stack_Size+0xd424>
    d620:	00000186 	andeq	r0, r0, r6, lsl #3
    d624:	00070616 	andeq	r0, r7, r6, lsl r6
    d628:	00251400 	eoreq	r1, r5, r0, lsl #8
    d62c:	0f000000 	svceq	0x00000000
    d630:	00070c04 	andeq	r0, r7, r4, lsl #24
    d634:	fb040f00 	blx	11123e <_Min_Stack_Size+0x11103e>
    d638:	0f000006 	svceq	0x00000006
    d63c:	00062b04 	andeq	r2, r6, r4, lsl #22
    d640:	418e0300 	orrmi	r0, lr, r0, lsl #6
    d644:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
    d648:	00000723 	andeq	r0, r0, r3, lsr #14
    d64c:	0041550d 	subeq	r5, r1, sp, lsl #10
    d650:	00070400 	andeq	r0, r7, r0, lsl #8
    d654:	0000073a 	andeq	r0, r0, sl, lsr r7
    d658:	00419d17 	subeq	r9, r1, r7, lsl sp
    d65c:	00011000 	andeq	r1, r1, r0
    d660:	03000000 	movweq	r0, #0
    d664:	00003ee9 	andeq	r3, r0, r9, ror #29
    d668:	05443508 	strbeq	r3, [r4, #-1288]	; 0xfffffaf8
    d66c:	040f0000 	streq	r0, [pc], #-0	; d674 <_Min_Stack_Size+0xd474>
    d670:	0000074b 	andeq	r0, r0, fp, asr #14
    d674:	41570318 	cmpmi	r7, r8, lsl r3
    d678:	62060000 	andvs	r0, r6, #0
    d67c:	00000718 	andeq	r0, r0, r8, lsl r7
    d680:	0046620d 	subeq	r6, r6, sp, lsl #4
    d684:	18090800 	stmdane	r9, {fp}
    d688:	0000077c 	andeq	r0, r0, ip, ror r7
    d68c:	0047440b 	subeq	r4, r7, fp, lsl #8
    d690:	45190900 	ldrmi	r0, [r9, #-2304]	; 0xfffff700
    d694:	00000007 	andeq	r0, r0, r7
    d698:	00475a0b 	subeq	r5, r7, fp, lsl #20
    d69c:	2c1a0900 	ldccs	9, cr0, [sl], {-0}
    d6a0:	04000000 	streq	r0, [r0], #-0
    d6a4:	477b0d00 	ldrbmi	r0, [fp, -r0, lsl #26]!
    d6a8:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    d6ac:	0007ad1c 	andeq	sl, r7, ip, lsl sp
    d6b0:	474d0b00 	strbmi	r0, [sp, -r0, lsl #22]
    d6b4:	1d090000 	stcne	0, cr0, [r9, #-0]
    d6b8:	000007ad 	andeq	r0, r0, sp, lsr #15
    d6bc:	47b40b00 	ldrmi	r0, [r4, r0, lsl #22]!
    d6c0:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    d6c4:	00000025 	andeq	r0, r0, r5, lsr #32
    d6c8:	46240b04 	strtmi	r0, [r4], -r4, lsl #22
    d6cc:	1f090000 	svcne	0x00090000
    d6d0:	0000002c 	andeq	r0, r0, ip, lsr #32
    d6d4:	040f0008 	streq	r0, [pc], #-8	; d6dc <_Min_Stack_Size+0xd4dc>
    d6d8:	00000757 	andeq	r0, r0, r7, asr r7
    d6dc:	74040804 	strvc	r0, [r4], #-2052	; 0xfffff7fc
    d6e0:	04000047 	streq	r0, [r0], #-71	; 0xffffffb9
    d6e4:	45e90404 	strbmi	r0, [r9, #1028]!	; 0x404
    d6e8:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    d6ec:	00476f04 	subeq	r6, r7, r4, lsl #30
    d6f0:	46000d00 	strmi	r0, [r0], -r0, lsl #26
    d6f4:	0a600000 	beq	180d6fc <_Min_Stack_Size+0x180d4fc>
    d6f8:	00087dc0 	andeq	r7, r8, r0, asr #27
    d6fc:	3e760b00 	vaddcc.f64	d16, d6, d0
    d700:	c20a0000 	andgt	r0, sl, #0
    d704:	00000025 	andeq	r0, r0, r5, lsr #32
    d708:	478e0b00 	strmi	r0, [lr, r0, lsl #22]
    d70c:	c30a0000 	movwgt	r0, #40960	; 0xa000
    d710:	00000025 	andeq	r0, r0, r5, lsr #32
    d714:	478d0b04 	strmi	r0, [sp, r4, lsl #22]
    d718:	c40a0000 	strgt	r0, [sl], #-0
    d71c:	00000025 	andeq	r0, r0, r5, lsr #32
    d720:	46740b08 	ldrbtmi	r0, [r4], -r8, lsl #22
    d724:	c50a0000 	strgt	r0, [sl, #-0]
    d728:	00000025 	andeq	r0, r0, r5, lsr #32
    d72c:	45ca0b0c 	strbmi	r0, [sl, #2828]	; 0xb0c
    d730:	c60a0000 	strgt	r0, [sl], -r0
    d734:	00000025 	andeq	r0, r0, r5, lsr #32
    d738:	65720e10 	ldrbvs	r0, [r2, #-3600]!	; 0xfffff1f0
    d73c:	c70a0074 	smlsdxgt	sl, r4, r0, r0
    d740:	00000025 	andeq	r0, r0, r5, lsr #32
    d744:	15310b14 	ldrne	r0, [r1, #-2836]!	; 0xfffff4ec
    d748:	c80a0000 	stmdagt	sl, {}	; <UNPREDICTABLE>
    d74c:	000004aa 	andeq	r0, r0, sl, lsr #9
    d750:	47ae0b18 			; <UNDEFINED> instruction: 0x47ae0b18
    d754:	c90a0000 	stmdbgt	sl, {}	; <UNPREDICTABLE>
    d758:	000004aa 	andeq	r0, r0, sl, lsr #9
    d75c:	47550b19 	smmlami	r5, r9, fp, r0
    d760:	ca0a0000 	bgt	28d768 <_Min_Stack_Size+0x28d568>
    d764:	000004aa 	andeq	r0, r0, sl, lsr #9
    d768:	75620e1a 	strbvc	r0, [r2, #-3610]!	; 0xfffff1e6
    d76c:	cb0a0066 	blgt	28d90c <_Min_Stack_Size+0x28d70c>
    d770:	0000087d 	andeq	r0, r0, sp, ror r8
    d774:	3e650b1b 	vmovcc.8	d5[4], r0
    d778:	cc0a0000 	stcgt	0, cr0, [sl], {-0}
    d77c:	0000088d 	andeq	r0, r0, sp, lsl #17
    d780:	46140b43 	ldrmi	r0, [r4], -r3, asr #22
    d784:	ce0a0000 	cdpgt	0, 0, cr0, cr10, cr0, {0}
    d788:	000007b3 			; <UNDEFINED> instruction: 0x000007b3
    d78c:	479c0b48 	ldrmi	r0, [ip, r8, asr #22]
    d790:	cf0a0000 	svcgt	0x000a0000
    d794:	0000089d 	muleq	r0, sp, r8
    d798:	468d0b50 	pkhtbmi	r0, sp, r0, asr #22
    d79c:	d00a0000 	andle	r0, sl, r0
    d7a0:	00000025 	andeq	r0, r0, r5, lsr #32
    d7a4:	aa080058 	bge	20d90c <_Min_Stack_Size+0x20d70c>
    d7a8:	8d000004 	stchi	0, cr0, [r0, #-16]
    d7ac:	09000008 	stmdbeq	r0, {r3}
    d7b0:	000000d2 	ldrdeq	r0, [r0], -r2
    d7b4:	aa080027 	bge	20d858 <_Min_Stack_Size+0x20d658>
    d7b8:	9d000004 	stcls	0, cr0, [r0, #-16]
    d7bc:	09000008 	stmdbeq	r0, {r3}
    d7c0:	000000d2 	ldrdeq	r0, [r0], -r2
    d7c4:	aa080002 	bge	20d7d4 <_Min_Stack_Size+0x20d5d4>
    d7c8:	ad000004 	stcge	0, cr0, [r0, #-16]
    d7cc:	09000008 	stmdbeq	r0, {r3}
    d7d0:	000000d2 	ldrdeq	r0, [r0], -r2
    d7d4:	a3190006 	tstge	r9, #6
    d7d8:	01000047 	tsteq	r0, r7, asr #32
    d7dc:	000025af 	andeq	r2, r0, pc, lsr #11
    d7e0:	0069a400 	rsbeq	sl, r9, r0, lsl #8
    d7e4:	0000b208 	andeq	fp, r0, r8, lsl #4
    d7e8:	bf9c0100 	svclt	0x009c0100
    d7ec:	1a000009 	bne	d818 <_Min_Stack_Size+0xd618>
    d7f0:	00727470 	rsbseq	r7, r2, r0, ror r4
    d7f4:	0356af01 	cmpeq	r6, #1, 30
    d7f8:	09660000 	stmdbeq	r6!, {}^	; <UNPREDICTABLE>
    d7fc:	661a0000 	ldrvs	r0, [sl], -r0
    d800:	af010070 	svcge	0x00010070
    d804:	000009bf 			; <UNDEFINED> instruction: 0x000009bf
    d808:	0000099a 	muleq	r0, sl, r9
    d80c:	6675621a 			; <UNDEFINED> instruction: 0x6675621a
    d810:	d5af0100 	strle	r0, [pc, #256]!	; d918 <_Min_Stack_Size+0xd718>
    d814:	b8000004 	stmdalt	r0, {r2}
    d818:	1a000009 	bne	d844 <_Min_Stack_Size+0xd644>
    d81c:	006e656c 	rsbeq	r6, lr, ip, ror #10
    d820:	002caf01 	eoreq	sl, ip, r1, lsl #30
    d824:	09d60000 	ldmibeq	r6, {}^	; <UNPREDICTABLE>
    d828:	771b0000 	ldrvc	r0, [fp, -r0]
    d82c:	25b50100 	ldrcs	r0, [r5, #256]!	; 0x100
    d830:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    d834:	1c000009 	stcne	0, cr0, [r0], {9}
    d838:	00727265 	rsbseq	r7, r2, r5, ror #4
    d83c:	6a10ed01 	bvs	448c48 <_Min_Stack_Size+0x448a48>
    d840:	f01d0800 			; <UNDEFINED> instruction: 0xf01d0800
    d844:	a800000c 	stmdage	r0, {r2, r3}
    d848:	1b000009 	blne	d874 <_Min_Stack_Size+0xd674>
    d84c:	00727473 	rsbseq	r7, r2, r3, ror r4
    d850:	0224bb01 	eoreq	fp, r4, #1024	; 0x400
    d854:	0a360000 	beq	d8d85c <_Min_Stack_Size+0xd8d65c>
    d858:	1d1e0000 	ldcne	0, cr0, [lr, #-0]
    d85c:	01000046 	tsteq	r0, r6, asr #32
    d860:	000025bc 			; <UNDEFINED> instruction: 0x000025bc
    d864:	000a7600 	andeq	r7, sl, r0, lsl #12
    d868:	47621e00 	strbmi	r1, [r2, -r0, lsl #28]!
    d86c:	c4010000 	strgt	r0, [r1], #-0
    d870:	00000025 	andeq	r0, r0, r5, lsr #32
    d874:	00000a89 	andeq	r0, r0, r9, lsl #21
    d878:	0069e41f 	rsbeq	lr, r9, pc, lsl r4
    d87c:	000ced08 	andeq	lr, ip, r8, lsl #26
    d880:	00096900 	andeq	r6, r9, r0, lsl #18
    d884:	51012000 	mrspl	r2, (UNDEF: 1)
    d888:	20007502 	andcs	r7, r0, r2, lsl #10
    d88c:	7a025001 	bvc	a1898 <_Min_Stack_Size+0xa1698>
    d890:	f01f0000 			; <UNDEFINED> instruction: 0xf01f0000
    d894:	07080069 	streq	r0, [r8, -r9, rrx]
    d898:	8300000d 	movwhi	r0, #13
    d89c:	20000009 	andcs	r0, r0, r9
    d8a0:	77025201 	strvc	r5, [r2, -r1, lsl #4]
    d8a4:	50012000 	andpl	r2, r1, r0
    d8a8:	00007602 	andeq	r7, r0, r2, lsl #12
    d8ac:	006a041f 	rsbeq	r0, sl, pc, lsl r4
    d8b0:	000d2608 	andeq	r2, sp, r8, lsl #12
    d8b4:	00099700 	andeq	r9, r9, r0, lsl #14
    d8b8:	52012000 	andpl	r2, r1, #0
    d8bc:	00007502 	andeq	r7, r0, r2, lsl #10
    d8c0:	006a1021 	rsbeq	r1, sl, r1, lsr #32
    d8c4:	000d4508 	andeq	r4, sp, r8, lsl #10
    d8c8:	50012000 	andpl	r2, r1, r0
    d8cc:	00007a02 	andeq	r7, r0, r2, lsl #20
    d8d0:	6a442100 	bvs	1115cd8 <_Min_Stack_Size+0x1115ad8>
    d8d4:	0d5b0800 	ldcleq	8, cr0, [fp, #-0]
    d8d8:	01200000 			; <UNDEFINED> instruction: 0x01200000
    d8dc:	00760252 	rsbseq	r0, r6, r2, asr r2
    d8e0:	02510120 	subseq	r0, r1, #32, 2
    d8e4:	00000078 	andeq	r0, r0, r8, ror r0
    d8e8:	073a040f 	ldreq	r0, [sl, -pc, lsl #8]!
    d8ec:	7a190000 	bvc	64d8f4 <_Min_Stack_Size+0x64d6f4>
    d8f0:	01000046 	tsteq	r0, r6, asr #32
    d8f4:	000025f6 	strdeq	r2, [r0], -r6
    d8f8:	00000000 	andeq	r0, r0, r0
    d8fc:	0000fe00 	andeq	pc, r0, r0, lsl #28
    d900:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    d904:	1a00000a 	bne	d934 <_Min_Stack_Size+0xd734>
    d908:	00727470 	rsbseq	r7, r2, r0, ror r4
    d90c:	0356f601 	cmpeq	r6, #1048576	; 0x100000	; <UNPREDICTABLE>
    d910:	0aa80000 	beq	fea0d918 <BootRAM+0xd97e0b9>
    d914:	661a0000 	ldrvs	r0, [sl], -r0
    d918:	f6010070 			; <UNDEFINED> instruction: 0xf6010070
    d91c:	000009bf 			; <UNDEFINED> instruction: 0x000009bf
    d920:	00000af2 	strdeq	r0, [r0], -r2
    d924:	6f69751a 	svcvs	0x0069751a
    d928:	f6f60100 			; <UNDEFINED> instruction: 0xf6f60100
    d92c:	1000000a 	andne	r0, r0, sl
    d930:	1b00000b 	blne	d964 <_Min_Stack_Size+0xd764>
    d934:	006e656c 	rsbeq	r6, lr, ip, ror #10
    d938:	002cfb01 	eoreq	pc, ip, r1, lsl #22
    d93c:	0b2e0000 	bleq	b8d944 <_Min_Stack_Size+0xb8d744>
    d940:	771b0000 	ldrvc	r0, [fp, -r0]
    d944:	25fc0100 	ldrbcs	r0, [ip, #256]!	; 0x100
    d948:	64000000 	strvs	r0, [r0], #-0
    d94c:	2200000b 	andcs	r0, r0, #11
    d950:	00766f69 	rsbseq	r6, r6, r9, ror #30
    d954:	07adfd01 	streq	pc, [sp, r1, lsl #26]!
    d958:	5a010000 	bpl	4d960 <_Min_Stack_Size+0x4d760>
    d95c:	0100701b 	tsteq	r0, fp, lsl r0
    d960:	0004d5fe 	strdeq	sp, [r4], -lr
    d964:	000ba300 	andeq	sl, fp, r0, lsl #6
    d968:	72652300 	rsbvc	r2, r5, #0, 6
    d96c:	52010072 	andpl	r0, r1, #114	; 0x72
    d970:	00000001 	andeq	r0, r0, r1
    d974:	0d081d00 	stceq	13, cr1, [r8, #-0]
    d978:	0ade0000 	beq	ff78d980 <BootRAM+0xe6fe121>
    d97c:	73240000 			; <UNDEFINED> instruction: 0x73240000
    d980:	01007274 	tsteq	r0, r4, ror r2
    d984:	02240115 	eoreq	r0, r4, #1073741829	; 0x40000005
    d988:	0bd60000 	bleq	ff58d990 <BootRAM+0xe4fe131>
    d98c:	1d250000 	stcne	0, cr0, [r5, #-0]
    d990:	01000046 	tsteq	r0, r6, asr #32
    d994:	00250116 	eoreq	r0, r5, r6, lsl r1
    d998:	0c160000 	ldceq	0, cr0, [r6], {-0}
    d99c:	62250000 	eorvs	r0, r5, #0
    d9a0:	01000047 	tsteq	r0, r7, asr #32
    d9a4:	0025011e 	eoreq	r0, r5, lr, lsl r1
    d9a8:	0c290000 	stceq	0, cr0, [r9], #-0
    d9ac:	001f0000 	andseq	r0, pc, r0
    d9b0:	ed000000 	stc	0, cr0, [r0, #-0]
    d9b4:	9f00000c 	svcls	0x0000000c
    d9b8:	2000000a 	andcs	r0, r0, sl
    d9bc:	75025101 	strvc	r5, [r2, #-257]	; 0xfffffeff
    d9c0:	50012000 	andpl	r2, r1, r0
    d9c4:	00007902 	andeq	r7, r0, r2, lsl #18
    d9c8:	0000001f 	andeq	r0, r0, pc, lsl r0
    d9cc:	000d0700 	andeq	r0, sp, r0, lsl #14
    d9d0:	000ab900 	andeq	fp, sl, r0, lsl #18
    d9d4:	52012000 	andpl	r2, r1, #0
    d9d8:	20007802 	andcs	r7, r0, r2, lsl #16
    d9dc:	76025001 	strvc	r5, [r2], -r1
    d9e0:	001f0000 	andseq	r0, pc, r0
    d9e4:	26000000 	strcs	r0, [r0], -r0
    d9e8:	cd00000d 	stcgt	0, cr0, [r0, #-52]	; 0xffffffcc
    d9ec:	2000000a 	andcs	r0, r0, sl
    d9f0:	75025201 	strvc	r5, [r2, #-513]	; 0xfffffdff
    d9f4:	00210000 	eoreq	r0, r1, r0
    d9f8:	45000000 	strmi	r0, [r0, #-0]
    d9fc:	2000000d 	andcs	r0, r0, sp
    da00:	79025001 	stmdbvc	r2, {r0, ip, lr}
    da04:	21000000 	mrscs	r0, (UNDEF: 0)
    da08:	00000000 	andeq	r0, r0, r0
    da0c:	00000d5b 	andeq	r0, r0, fp, asr sp
    da10:	02520120 	subseq	r0, r2, #32, 2
    da14:	01200076 			; <UNDEFINED> instruction: 0x01200076
    da18:	54910351 	ldrpl	r0, [r1], #849	; 0x351
    da1c:	0f000006 	svceq	0x00000006
    da20:	00077c04 	andeq	r7, r7, r4, lsl #24
    da24:	41ab2600 			; <UNDEFINED> instruction: 0x41ab2600
    da28:	da010000 	ble	4da30 <_Min_Stack_Size+0x4d830>
    da2c:	00002501 	andeq	r2, r0, r1, lsl #10
    da30:	006a5800 	rsbeq	r5, sl, r0, lsl #16
    da34:	0001e408 	andeq	lr, r1, r8, lsl #8
    da38:	c99c0100 	ldmibgt	ip, {r8}
    da3c:	2700000c 	strcs	r0, [r0, -ip]
    da40:	00000df9 	strdeq	r0, [r0], -r9
    da44:	5601da01 	strpl	sp, [r1], -r1, lsl #20
    da48:	48000003 	stmdami	r0, {r0, r1}
    da4c:	2800000c 	stmdacs	r0, {r2, r3}
    da50:	01007066 	tsteq	r0, r6, rrx
    da54:	09bf01da 	ldmibeq	pc!, {r1, r3, r4, r6, r7, r8}	; <UNPREDICTABLE>
    da58:	0c740000 	ldcleq	0, cr0, [r4], #-0
    da5c:	6f270000 	svcvs	0x00270000
    da60:	01000046 	tsteq	r0, r6, asr #32
    da64:	04d501da 	ldrbeq	r0, [r5], #474	; 0x1da
    da68:	0ca00000 	stceq	0, cr0, [r0]
    da6c:	61290000 			; <UNDEFINED> instruction: 0x61290000
    da70:	da010070 	ble	4dc38 <_Min_Stack_Size+0x4da38>
    da74:	00074c01 	andeq	r4, r7, r1, lsl #24
    da78:	fc910300 	ldc2	3, cr0, [r1], {0}
    da7c:	6d66247e 	cfstrdvs	mvd2, [r6, #-504]!	; 0xfffffe08
    da80:	e0010074 	and	r0, r1, r4, ror r0
    da84:	0004a401 	andeq	sl, r4, r1, lsl #8
    da88:	000ccc00 	andeq	ip, ip, r0, lsl #24
    da8c:	006e2400 	rsbeq	r2, lr, r0, lsl #8
    da90:	2501e101 	strcs	lr, [r1, #-257]	; 0xfffffeff
    da94:	b6000000 	strlt	r0, [r0], -r0
    da98:	2400000d 	strcs	r0, [r0], #-13
    da9c:	e101006d 	tst	r1, sp, rrx
    daa0:	00002501 	andeq	r2, r0, r1, lsl #10
    daa4:	000ddf00 	andeq	sp, sp, r0, lsl #30
    daa8:	70632400 	rsbvc	r2, r3, r0, lsl #8
    daac:	01e20100 	mvneq	r0, r0, lsl #2
    dab0:	000004a4 	andeq	r0, r0, r4, lsr #9
    dab4:	00000e0d 	andeq	r0, r0, sp, lsl #28
    dab8:	0045f525 	subeq	pc, r5, r5, lsr #10
    dabc:	01e30100 	mvneq	r0, r0, lsl #2
    dac0:	000004d5 	ldrdeq	r0, [r0], -r5
    dac4:	00000e7d 	andeq	r0, r0, sp, ror lr
    dac8:	0047932a 	subeq	r9, r7, sl, lsr #6
    dacc:	01e40100 	mvneq	r0, r0, lsl #2
    dad0:	000007c8 	andeq	r0, r0, r8, asr #15
    dad4:	7f809103 	svcvc	0x00809103
    dad8:	0046692a 	subeq	r6, r6, sl, lsr #18
    dadc:	01e70100 	mvneq	r0, r0, lsl #2
    dae0:	00000ce7 	andeq	r0, r0, r7, ror #25
    dae4:	69a50306 	stmibvs	r5!, {r1, r2, r8, r9}
    dae8:	2b9f0800 	blcs	fe7cfaf0 <BootRAM+0xd740291>
    daec:	000045ef 	andeq	r4, r0, pc, ror #11
    daf0:	12028a01 	andne	r8, r2, #4096	; 0x1000
    daf4:	2b08006c 	blcs	20dcac <_Min_Stack_Size+0x20daac>
    daf8:	0000476a 	andeq	r4, r0, sl, ror #14
    dafc:	12028801 	andne	r8, r2, #65536	; 0x10000
    db00:	1f08006c 	svcne	0x0008006c
    db04:	08006a76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, fp, sp, lr}
    db08:	00000ced 	andeq	r0, r0, sp, ror #25
    db0c:	00000bf4 	strdeq	r0, [r0], -r4
    db10:	02510120 	subseq	r0, r1, #32, 2
    db14:	01204008 			; <UNDEFINED> instruction: 0x01204008
    db18:	00760250 	rsbseq	r0, r6, r0, asr r2
    db1c:	6aba1f00 	bvs	fee95724 <BootRAM+0xde05ec5>
    db20:	08ad0800 	stmiaeq	sp!, {fp}
    db24:	0c1a0000 	ldceq	0, cr0, [sl], {-0}
    db28:	01200000 			; <UNDEFINED> instruction: 0x01200000
    db2c:	00790253 	rsbseq	r0, r9, r3, asr r2
    db30:	02520120 	subseq	r0, r2, #32, 2
    db34:	01200078 			; <UNDEFINED> instruction: 0x01200078
    db38:	00750251 	rsbseq	r0, r5, r1, asr r2
    db3c:	02500120 	subseq	r0, r0, #32, 2
    db40:	1f000076 	svcne	0x00000076
    db44:	08006af6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, fp, sp, lr}
    db48:	00000d7a 	andeq	r0, r0, sl, ror sp
    db4c:	00000c33 	andeq	r0, r0, r3, lsr ip
    db50:	01520120 	cmpeq	r2, r0, lsr #2
    db54:	50012035 	andpl	r2, r1, r5, lsr r0
    db58:	00007902 	andeq	r7, r0, r2, lsl #18
    db5c:	006baa1f 	rsbeq	sl, fp, pc, lsl sl
    db60:	000d7a08 	andeq	r7, sp, r8, lsl #20
    db64:	000c4c00 	andeq	r4, ip, r0, lsl #24
    db68:	52012000 	andpl	r2, r1, #0
    db6c:	01203301 			; <UNDEFINED> instruction: 0x01203301
    db70:	00780250 	rsbseq	r0, r8, r0, asr r2
    db74:	6bce1f00 	blvs	ff39577c <BootRAM+0xe305f1d>
    db78:	0d7a0800 	ldcleq	8, cr0, [sl, #-0]
    db7c:	0c680000 	stcleq	0, cr0, [r8], #-0
    db80:	01200000 			; <UNDEFINED> instruction: 0x01200000
    db84:	20360152 	eorscs	r0, r6, r2, asr r1
    db88:	03055001 	movweq	r5, #20481	; 0x5001
    db8c:	08007a70 	stmdaeq	r0, {r4, r5, r6, r9, fp, ip, sp, lr}
    db90:	6bf21f00 	blvs	ffc95798 <BootRAM+0xec05f39>
    db94:	0d990800 	ldceq	8, cr0, [r9]
    db98:	0c9a0000 	ldceq	0, cr0, [sl], {0}
    db9c:	01200000 			; <UNDEFINED> instruction: 0x01200000
    dba0:	a5030553 	strge	r0, [r3, #-1363]	; 0xfffffaad
    dba4:	20080069 	andcs	r0, r8, r9, rrx
    dba8:	75025201 	strvc	r5, [r2, #-513]	; 0xfffffdff
    dbac:	51012000 	mrspl	r2, (UNDEF: 1)
    dbb0:	7f809103 	svcvc	0x00809103
    dbb4:	02500120 	subseq	r0, r0, #32, 2
    dbb8:	02200076 	eoreq	r0, r0, #118	; 0x76
    dbbc:	9103007d 	tstls	r3, sp, ror r0
    dbc0:	21007efc 	strdcs	r7, [r0, -ip]
    dbc4:	08006c04 	stmdaeq	r0, {r2, sl, fp, sp, lr}
    dbc8:	00000dce 	andeq	r0, r0, lr, asr #27
    dbcc:	05530120 	ldrbeq	r0, [r3, #-288]	; 0xfffffee0
    dbd0:	0069a503 	rsbeq	sl, r9, r3, lsl #10
    dbd4:	52012008 	andpl	r2, r1, #8
    dbd8:	20007502 	andcs	r7, r0, r2, lsl #10
    dbdc:	91035101 	tstls	r3, r1, lsl #2
    dbe0:	01207f80 	smlawbeq	r0, r0, pc, r7	; <UNPREDICTABLE>
    dbe4:	00760250 	rsbseq	r0, r6, r0, asr r2
    dbe8:	007d0220 	rsbseq	r0, sp, r0, lsr #4
    dbec:	7efc9103 	nrmvce	f1, f3
    dbf0:	25130000 	ldrcs	r0, [r3, #-0]
    dbf4:	e7000000 	str	r0, [r0, -r0]
    dbf8:	1400000c 	strne	r0, [r0], #-12
    dbfc:	00000356 	andeq	r0, r0, r6, asr r3
    dc00:	0009bf14 	andeq	fp, r9, r4, lsl pc
    dc04:	04d51400 	ldrbeq	r1, [r5], #1024	; 0x400
    dc08:	2c140000 	ldccs	0, cr0, [r4], {-0}
    dc0c:	00000000 	andeq	r0, r0, r0
    dc10:	0cc9040f 	cfstrdeq	mvd0, [r9], {15}
    dc14:	f72c0000 			; <UNDEFINED> instruction: 0xf72c0000
    dc18:	0b000044 	bleq	dd30 <_Min_Stack_Size+0xdb30>
    dc1c:	000110f8 	strdeq	r1, [r1], -r8
    dc20:	000d0700 	andeq	r0, sp, r0, lsl #14
    dc24:	03561400 	cmpeq	r6, #0, 8
    dc28:	2c140000 	ldccs	0, cr0, [r4], {-0}
    dc2c:	00000000 	andeq	r0, r0, r0
    dc30:	003ca12c 	eorseq	sl, ip, ip, lsr #2
    dc34:	10170c00 	andsne	r0, r7, r0, lsl #24
    dc38:	26000001 	strcs	r0, [r0], -r1
    dc3c:	1400000d 	strne	r0, [r0], #-13
    dc40:	00000110 	andeq	r0, r0, r0, lsl r1
    dc44:	00074514 	andeq	r4, r7, r4, lsl r5
    dc48:	002c1400 	eoreq	r1, ip, r0, lsl #8
    dc4c:	2c000000 	stccs	0, cr0, [r0], {-0}
    dc50:	00004782 	andeq	r4, r0, r2, lsl #15
    dc54:	0110fb0b 	tsteq	r0, fp, lsl #22	; <UNPREDICTABLE>
    dc58:	0d450000 	stcleq	0, cr0, [r5, #-0]
    dc5c:	56140000 	ldrpl	r0, [r4], -r0
    dc60:	14000003 	strne	r0, [r0], #-3
    dc64:	00000110 	andeq	r0, r0, r0, lsl r1
    dc68:	00002c14 	andeq	r2, r0, r4, lsl ip
    dc6c:	ef2d0000 	svc	0x002d0000
    dc70:	0b000044 	bleq	dd88 <_Min_Stack_Size+0xdb88>
    dc74:	000d5bfa 	strdeq	r5, [sp], -sl
    dc78:	03561400 	cmpeq	r6, #0, 8
    dc7c:	10140000 	andsne	r0, r4, r0
    dc80:	00000001 	andeq	r0, r0, r1
    dc84:	00460c2c 	subeq	r0, r6, ip, lsr #24
    dc88:	10180c00 	andsne	r0, r8, r0, lsl #24
    dc8c:	7a000001 	bvc	dc98 <_Min_Stack_Size+0xda98>
    dc90:	1400000d 	strne	r0, [r0], #-13
    dc94:	00000110 	andeq	r0, r0, r0, lsl r1
    dc98:	00074514 	andeq	r4, r7, r4, lsl r5
    dc9c:	002c1400 	eoreq	r1, ip, r0, lsl #8
    dca0:	2c000000 	stccs	0, cr0, [r0], {-0}
    dca4:	00004686 	andeq	r4, r0, r6, lsl #13
    dca8:	0110150c 	tsteq	r0, ip, lsl #10
    dcac:	0d990000 	ldceq	0, cr0, [r9]
    dcb0:	45140000 	ldrmi	r0, [r4, #-0]
    dcb4:	14000007 	strne	r0, [r0], #-7
    dcb8:	00000025 	andeq	r0, r0, r5, lsr #32
    dcbc:	00002c14 	andeq	r2, r0, r4, lsl ip
    dcc0:	e12c0000 			; <UNDEFINED> instruction: 0xe12c0000
    dcc4:	0a000045 	beq	dde0 <_Min_Stack_Size+0xdbe0>
    dcc8:	000025e4 	andeq	r2, r0, r4, ror #11
    dccc:	000dc200 	andeq	ip, sp, r0, lsl #4
    dcd0:	03561400 	cmpeq	r6, #0, 8
    dcd4:	c2140000 	andsgt	r0, r4, #0
    dcd8:	1400000d 	strne	r0, [r0], #-13
    dcdc:	000009bf 			; <UNDEFINED> instruction: 0x000009bf
    dce0:	000ce714 	andeq	lr, ip, r4, lsl r7
    dce4:	0dc81400 	cfstrdeq	mvd1, [r8]
    dce8:	0f000000 	svceq	0x00000000
    dcec:	0007c804 	andeq	ip, r7, r4, lsl #16
    dcf0:	4c040f00 	stcmi	15, cr0, [r4], {-0}
    dcf4:	2e000007 	cdpcs	0, 0, cr0, cr0, cr7, {0}
    dcf8:	0000473a 	andeq	r4, r0, sl, lsr r7
    dcfc:	0025dd0a 	eoreq	sp, r5, sl, lsl #26
    dd00:	56140000 	ldrpl	r0, [r4], -r0
    dd04:	14000003 	strne	r0, [r0], #-3
    dd08:	00000dc2 	andeq	r0, r0, r2, asr #27
    dd0c:	0009bf14 	andeq	fp, r9, r4, lsl pc
    dd10:	0ce71400 	cfstrdeq	mvd1, [r7]
    dd14:	c8140000 	ldmdagt	r4, {}	; <UNPREDICTABLE>
    dd18:	0000000d 	andeq	r0, r0, sp
    dd1c:	000b5700 	andeq	r5, fp, r0, lsl #14
    dd20:	71000400 	tstvc	r0, r0, lsl #8
    dd24:	0400002e 	streq	r0, [r0], #-46	; 0xffffffd2
    dd28:	00469201 	subeq	r9, r6, r1, lsl #4
    dd2c:	47d30100 	ldrbmi	r0, [r3, r0, lsl #2]
    dd30:	41b80000 			; <UNDEFINED> instruction: 0x41b80000
    dd34:	0d880000 	stceq	0, cr0, [r8]
    dd38:	00000000 	andeq	r0, r0, r0
    dd3c:	550e0000 	strpl	r0, [lr, #-0]
    dd40:	04020000 	streq	r0, [r2], #-0
    dd44:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    dd48:	45080300 	strmi	r0, [r8, #-768]	; 0xfffffd00
    dd4c:	d4020000 	strle	r0, [r2], #-0
    dd50:	00000037 	andeq	r0, r0, r7, lsr r0
    dd54:	ff070404 			; <UNDEFINED> instruction: 0xff070404
    dd58:	04000000 	streq	r0, [r0], #-0
    dd5c:	01230702 			; <UNDEFINED> instruction: 0x01230702
    dd60:	01040000 	mrseq	r0, (UNDEF: 4)
    dd64:	0000c306 	andeq	ip, r0, r6, lsl #6
    dd68:	08010400 	stmdaeq	r1, {sl}
    dd6c:	000000c1 	andeq	r0, r0, r1, asr #1
    dd70:	51050204 	tstpl	r5, r4, lsl #4
    dd74:	04000000 	streq	r0, [r0], #-0
    dd78:	006d0504 	rsbeq	r0, sp, r4, lsl #10
    dd7c:	04040000 	streq	r0, [r4], #-0
    dd80:	0000fa07 	andeq	pc, r0, r7, lsl #20
    dd84:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    dd88:	00000068 	andeq	r0, r0, r8, rrx
    dd8c:	f5070804 			; <UNDEFINED> instruction: 0xf5070804
    dd90:	03000000 	movweq	r0, #0
    dd94:	00003ece 	andeq	r3, r0, lr, asr #29
    dd98:	00250703 	eoreq	r0, r5, r3, lsl #14
    dd9c:	34030000 	strcc	r0, [r3], #-0
    dda0:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
    dda4:	00005a10 	andeq	r5, r0, r0, lsl sl
    dda8:	3f890300 	svccc	0x00890300
    ddac:	27040000 	strcs	r0, [r4, -r0]
    ddb0:	0000005a 	andeq	r0, r0, sl, asr r0
    ddb4:	00403a05 	subeq	r3, r0, r5, lsl #20
    ddb8:	01610200 	cmneq	r1, r0, lsl #4
    ddbc:	00000037 	andeq	r0, r0, r7, lsr r0
    ddc0:	4a040406 	bmi	10ede0 <_Min_Stack_Size+0x10ebe0>
    ddc4:	000000c2 	andeq	r0, r0, r2, asr #1
    ddc8:	003e3b07 	eorseq	r3, lr, r7, lsl #22
    ddcc:	974c0400 	strbls	r0, [ip, -r0, lsl #8]
    ddd0:	07000000 	streq	r0, [r0, -r0]
    ddd4:	00003fc4 	andeq	r3, r0, r4, asr #31
    ddd8:	00c24d04 	sbceq	r4, r2, r4, lsl #26
    dddc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    dde0:	0000004c 	andeq	r0, r0, ip, asr #32
    dde4:	000000d2 	ldrdeq	r0, [r0], -r2
    dde8:	0000d209 	andeq	sp, r0, r9, lsl #4
    ddec:	04000300 	streq	r0, [r0], #-768	; 0xfffffd00
    ddf0:	00150704 	andseq	r0, r5, r4, lsl #14
    ddf4:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
    ddf8:	00fa4704 	rscseq	r4, sl, r4, lsl #14
    ddfc:	8b0b0000 	blhi	2cde04 <_Min_Stack_Size+0x2cdc04>
    de00:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
    de04:	00002549 	andeq	r2, r0, r9, asr #10
    de08:	410b0000 	mrsmi	r0, (UNDEF: 11)
    de0c:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
    de10:	0000a34e 	andeq	sl, r0, lr, asr #6
    de14:	03000400 	movweq	r0, #1024	; 0x400
    de18:	0000406b 	andeq	r4, r0, fp, rrx
    de1c:	00d94f04 	sbcseq	r4, r9, r4, lsl #30
    de20:	a2030000 	andge	r0, r3, #0
    de24:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    de28:	00007653 	andeq	r7, r0, r3, asr r6
    de2c:	03040c00 	movweq	r0, #19456	; 0x4c00
    de30:	000040a8 	andeq	r4, r0, r8, lsr #1
    de34:	00611605 	rsbeq	r1, r1, r5, lsl #12
    de38:	760d0000 	strvc	r0, [sp], -r0
    de3c:	18000040 	stmdane	r0, {r6}
    de40:	01702d05 	cmneq	r0, r5, lsl #26
    de44:	050b0000 	streq	r0, [fp, #-0]
    de48:	05000041 	streq	r0, [r0, #-65]	; 0xffffffbf
    de4c:	0001702f 	andeq	r7, r1, pc, lsr #32
    de50:	5f0e0000 	svcpl	0x000e0000
    de54:	3005006b 	andcc	r0, r5, fp, rrx
    de58:	00000025 	andeq	r0, r0, r5, lsr #32
    de5c:	407e0b04 	rsbsmi	r0, lr, r4, lsl #22
    de60:	30050000 	andcc	r0, r5, r0
    de64:	00000025 	andeq	r0, r0, r5, lsr #32
    de68:	40fa0b08 	rscsmi	r0, sl, r8, lsl #22
    de6c:	30050000 	andcc	r0, r5, r0
    de70:	00000025 	andeq	r0, r0, r5, lsr #32
    de74:	401b0b0c 	andsmi	r0, fp, ip, lsl #22
    de78:	30050000 	andcc	r0, r5, r0
    de7c:	00000025 	andeq	r0, r0, r5, lsr #32
    de80:	785f0e10 	ldmdavc	pc, {r4, r9, sl, fp}^	; <UNPREDICTABLE>
    de84:	76310500 	ldrtvc	r0, [r1], -r0, lsl #10
    de88:	14000001 	strne	r0, [r0], #-1
    de8c:	1d040f00 	stcne	15, cr0, [r4, #-0]
    de90:	08000001 	stmdaeq	r0, {r0}
    de94:	00000112 	andeq	r0, r0, r2, lsl r1
    de98:	00000186 	andeq	r0, r0, r6, lsl #3
    de9c:	0000d209 	andeq	sp, r0, r9, lsl #4
    dea0:	0d000000 	stceq	0, cr0, [r0, #-0]
    dea4:	00004027 	andeq	r4, r0, r7, lsr #32
    dea8:	ff350524 			; <UNDEFINED> instruction: 0xff350524
    deac:	0b000001 	bleq	deb8 <_Min_Stack_Size+0xdcb8>
    deb0:	00003fb1 			; <UNDEFINED> instruction: 0x00003fb1
    deb4:	00253705 	eoreq	r3, r5, r5, lsl #14
    deb8:	0b000000 	bleq	dec0 <_Min_Stack_Size+0xdcc0>
    debc:	00003f02 	andeq	r3, r0, r2, lsl #30
    dec0:	00253805 	eoreq	r3, r5, r5, lsl #16
    dec4:	0b040000 	bleq	10decc <_Min_Stack_Size+0x10dccc>
    dec8:	00003fba 			; <UNDEFINED> instruction: 0x00003fba
    decc:	00253905 	eoreq	r3, r5, r5, lsl #18
    ded0:	0b080000 	bleq	20ded8 <_Min_Stack_Size+0x20dcd8>
    ded4:	00003e93 	muleq	r0, r3, lr
    ded8:	00253a05 	eoreq	r3, r5, r5, lsl #20
    dedc:	0b0c0000 	bleq	30dee4 <_Min_Stack_Size+0x30dce4>
    dee0:	000040be 	strheq	r4, [r0], -lr
    dee4:	00253b05 	eoreq	r3, r5, r5, lsl #22
    dee8:	0b100000 	bleq	40def0 <_Min_Stack_Size+0x40dcf0>
    deec:	00004086 	andeq	r4, r0, r6, lsl #1
    def0:	00253c05 	eoreq	r3, r5, r5, lsl #24
    def4:	0b140000 	bleq	50defc <_Min_Stack_Size+0x50dcfc>
    def8:	00003f4a 	andeq	r3, r0, sl, asr #30
    defc:	00253d05 	eoreq	r3, r5, r5, lsl #26
    df00:	0b180000 	bleq	60df08 <_Min_Stack_Size+0x60dd08>
    df04:	0000409e 	muleq	r0, lr, r0
    df08:	00253e05 	eoreq	r3, r5, r5, lsl #28
    df0c:	0b1c0000 	bleq	70df14 <_Min_Stack_Size+0x70dd14>
    df10:	00003f6e 	andeq	r3, r0, lr, ror #30
    df14:	00253f05 	eoreq	r3, r5, r5, lsl #30
    df18:	00200000 	eoreq	r0, r0, r0
    df1c:	003e490d 	eorseq	r4, lr, sp, lsl #18
    df20:	73050800 	movwvc	r0, #22528	; 0x5800
    df24:	00000224 	andeq	r0, r0, r4, lsr #4
    df28:	0033a70b 	eorseq	sl, r3, fp, lsl #14
    df2c:	24740500 	ldrbtcs	r0, [r4], #-1280	; 0xfffffb00
    df30:	00000002 	andeq	r0, r0, r2
    df34:	0045c90b 	subeq	ip, r5, fp, lsl #18
    df38:	25750500 	ldrbcs	r0, [r5, #-1280]!	; 0xfffffb00
    df3c:	04000000 	streq	r0, [r0], #-0
    df40:	4c040f00 	stcmi	15, cr0, [r4], {-0}
    df44:	10000000 	andne	r0, r0, r0
    df48:	00004110 	andeq	r4, r0, r0, lsl r1
    df4c:	01720560 	cmneq	r2, r0, ror #10
    df50:	00000356 	andeq	r0, r0, r6, asr r3
    df54:	003eee11 	eorseq	lr, lr, r1, lsl lr
    df58:	01760500 	cmneq	r6, r0, lsl #10
    df5c:	00000025 	andeq	r0, r0, r5, lsr #32
    df60:	44501100 	ldrbmi	r1, [r0], #-256	; 0xffffff00
    df64:	7b050000 	blvc	14df6c <_Min_Stack_Size+0x14dd6c>
    df68:	00058b01 	andeq	r8, r5, r1, lsl #22
    df6c:	a0110400 	andsge	r0, r1, r0, lsl #8
    df70:	05000044 	streq	r0, [r0, #-68]	; 0xffffffbc
    df74:	058b017b 	streq	r0, [fp, #379]	; 0x17b
    df78:	11080000 	mrsne	r0, (UNDEF: 8)
    df7c:	000043d6 	ldrdeq	r4, [r0], -r6
    df80:	8b017b05 	blhi	6cb9c <_Min_Stack_Size+0x6c99c>
    df84:	0c000005 	stceq	0, cr0, [r0], {5}
    df88:	0040d011 	subeq	sp, r0, r1, lsl r0
    df8c:	017d0500 	cmneq	sp, r0, lsl #10
    df90:	00000025 	andeq	r0, r0, r5, lsr #32
    df94:	41361110 	teqmi	r6, r0, lsl r1
    df98:	7f050000 	svcvc	0x00050000
    df9c:	0004a401 	andeq	sl, r4, r1, lsl #8
    dfa0:	7e111400 	cfmulsvc	mvf1, mvf1, mvf0
    dfa4:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    dfa8:	00250181 	eoreq	r0, r5, r1, lsl #3
    dfac:	11180000 	tstne	r8, r0
    dfb0:	0000404f 	andeq	r4, r0, pc, asr #32
    dfb4:	25018305 	strcs	r8, [r1, #-773]	; 0xfffffcfb
    dfb8:	1c000000 	stcne	0, cr0, [r0], {-0}
    dfbc:	00411711 	subeq	r1, r1, r1, lsl r7
    dfc0:	01840500 	orreq	r0, r4, r0, lsl #10
    dfc4:	000004d5 	ldrdeq	r0, [r0], -r5
    dfc8:	6d5f1220 	lfmvs	f1, 2, [pc, #-128]	; df50 <_Min_Stack_Size+0xdd50>
    dfcc:	86050070 			; <UNDEFINED> instruction: 0x86050070
    dfd0:	0006d801 	andeq	sp, r6, r1, lsl #16
    dfd4:	61112400 	tstvs	r1, r0, lsl #8
    dfd8:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    dfdc:	06e90188 	strbteq	r0, [r9], r8, lsl #3
    dfe0:	11280000 			; <UNDEFINED> instruction: 0x11280000
    dfe4:	0000400c 	andeq	r4, r0, ip
    dfe8:	25018a05 	strcs	r8, [r1, #-2565]	; 0xfffff5fb
    dfec:	2c000000 	stccs	0, cr0, [r0], {-0}
    dff0:	003ec011 	eorseq	ip, lr, r1, lsl r0
    dff4:	018d0500 	orreq	r0, sp, r0, lsl #10
    dff8:	00000025 	andeq	r0, r0, r5, lsr #32
    dffc:	3ff61130 	svccc	0x00f61130
    e000:	8e050000 	cdphi	0, 0, cr0, cr5, cr0, {0}
    e004:	0004a401 	andeq	sl, r4, r1, lsl #8
    e008:	ae113400 	cfmulsge	mvf3, mvf1, mvf0
    e00c:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    e010:	06ef0190 	usateq	r0, #15, r0, lsl #3
    e014:	11380000 	teqne	r8, r0
    e018:	00003e7c 	andeq	r3, r0, ip, ror lr
    e01c:	f5019105 			; <UNDEFINED> instruction: 0xf5019105
    e020:	3c000006 	stccc	0, cr0, [r0], {6}
    e024:	003f5411 	eorseq	r5, pc, r1, lsl r4	; <UNPREDICTABLE>
    e028:	01920500 	orrseq	r0, r2, r0, lsl #10
    e02c:	000004a4 	andeq	r0, r0, r4, lsr #9
    e030:	3e6b1140 	powccem	f1, f3, f0
    e034:	95050000 	strls	r0, [r5, #-0]
    e038:	00070601 	andeq	r0, r7, r1, lsl #12
    e03c:	d1114400 	tstle	r1, r0, lsl #8
    e040:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    e044:	0550019d 	ldrbeq	r0, [r0, #-413]	; 0xfffffe63
    e048:	11480000 	mrsne	r0, (UNDEF: 72)
    e04c:	00003f79 	andeq	r3, r0, r9, ror pc
    e050:	8b019e05 	blhi	7586c <_Min_Stack_Size+0x7566c>
    e054:	54000005 	strpl	r0, [r0], #-5
    e058:	003fcb11 	eorseq	ip, pc, r1, lsl fp	; <UNPREDICTABLE>
    e05c:	019f0500 	orrseq	r0, pc, r0, lsl #10
    e060:	00000712 	andeq	r0, r0, r2, lsl r7
    e064:	3e5f1158 	mrccc	1, 2, r1, cr15, cr8, {2}
    e068:	a0050000 	andge	r0, r5, r0
    e06c:	0004a401 	andeq	sl, r4, r1, lsl #8
    e070:	0f005c00 	svceq	0x00005c00
    e074:	00022a04 	andeq	r2, r2, r4, lsl #20
    e078:	41410d00 	cmpmi	r1, r0, lsl #26
    e07c:	05680000 	strbeq	r0, [r8, #-0]!
    e080:	000486b3 			; <UNDEFINED> instruction: 0x000486b3
    e084:	705f0e00 	subsvc	r0, pc, r0, lsl #28
    e088:	24b40500 	ldrtcs	r0, [r4], #1280	; 0x500
    e08c:	00000002 	andeq	r0, r0, r2
    e090:	00725f0e 	rsbseq	r5, r2, lr, lsl #30
    e094:	0025b505 	eoreq	fp, r5, r5, lsl #10
    e098:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    e09c:	0500775f 	streq	r7, [r0, #-1887]	; 0xfffff8a1
    e0a0:	000025b6 			; <UNDEFINED> instruction: 0x000025b6
    e0a4:	750b0800 	strvc	r0, [fp, #-2048]	; 0xfffff800
    e0a8:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    e0ac:	000053b7 			; <UNDEFINED> instruction: 0x000053b7
    e0b0:	060b0c00 	streq	r0, [fp], -r0, lsl #24
    e0b4:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    e0b8:	000053b8 			; <UNDEFINED> instruction: 0x000053b8
    e0bc:	5f0e0e00 	svcpl	0x000e0e00
    e0c0:	05006662 	streq	r6, [r0, #-1634]	; 0xfffff99e
    e0c4:	0001ffb9 			; <UNDEFINED> instruction: 0x0001ffb9
    e0c8:	e60b1000 	str	r1, [fp], -r0
    e0cc:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    e0d0:	000025ba 			; <UNDEFINED> instruction: 0x000025ba
    e0d4:	f80b1800 			; <UNDEFINED> instruction: 0xf80b1800
    e0d8:	0500000d 	streq	r0, [r0, #-13]
    e0dc:	000356bd 			; <UNDEFINED> instruction: 0x000356bd
    e0e0:	fe0b1c00 	cdp2	12, 0, cr1, cr11, cr0, {0}
    e0e4:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    e0e8:	000110c1 	andeq	r1, r1, r1, asr #1
    e0ec:	cd0b2000 	stcgt	0, cr2, [fp, #-0]
    e0f0:	05000039 	streq	r0, [r0, #-57]	; 0xffffffc7
    e0f4:	0004b1c3 	andeq	fp, r4, r3, asr #3
    e0f8:	5b0b2400 	blpl	2d7100 <_Min_Stack_Size+0x2d6f00>
    e0fc:	05000039 	streq	r0, [r0, #-57]	; 0xffffffc7
    e100:	0004e0c5 	andeq	lr, r4, r5, asr #1
    e104:	b00b2800 	andlt	r2, fp, r0, lsl #16
    e108:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    e10c:	000504c8 	andeq	r0, r5, r8, asr #9
    e110:	910b2c00 	tstls	fp, r0, lsl #24
    e114:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    e118:	00051ec9 	andeq	r1, r5, r9, asr #29
    e11c:	5f0e3000 	svcpl	0x000e3000
    e120:	05006275 	streq	r6, [r0, #-629]	; 0xfffffd8b
    e124:	0001ffcc 	andeq	pc, r1, ip, asr #31
    e128:	5f0e3400 	svcpl	0x000e3400
    e12c:	05007075 	streq	r7, [r0, #-117]	; 0xffffff8b
    e130:	000224cd 	andeq	r2, r2, sp, asr #9
    e134:	5f0e3c00 	svcpl	0x000e3c00
    e138:	05007275 	streq	r7, [r0, #-629]	; 0xfffffd8b
    e13c:	000025ce 	andeq	r2, r0, lr, asr #11
    e140:	ab0b4000 	blge	2de148 <_Min_Stack_Size+0x2ddf48>
    e144:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    e148:	000524d1 	ldrdeq	r2, [r5], -r1
    e14c:	c80b4400 	stmdagt	fp, {sl, lr}
    e150:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    e154:	000534d2 	ldrdeq	r3, [r5], -r2
    e158:	5f0e4700 	svcpl	0x000e4700
    e15c:	0500626c 	streq	r6, [r0, #-620]	; 0xfffffd94
    e160:	0001ffd5 	ldrdeq	pc, [r1], -r5
    e164:	c70b4800 	strgt	r4, [fp, -r0, lsl #16]
    e168:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    e16c:	000025d8 	ldrdeq	r2, [r0], -r8
    e170:	750b5000 	strvc	r5, [fp, #-0]
    e174:	05000049 	streq	r0, [r0, #-73]	; 0xffffffb7
    e178:	000081d9 	ldrdeq	r8, [r0], -r9
    e17c:	400b5400 	andmi	r5, fp, r0, lsl #8
    e180:	05000035 	streq	r0, [r0, #-53]	; 0xffffffcb
    e184:	000105e0 	andeq	r0, r1, r0, ror #11
    e188:	410b5800 	tstmi	fp, r0, lsl #16
    e18c:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    e190:	0000fae2 	andeq	pc, r0, r2, ror #21
    e194:	b50b5c00 	strlt	r5, [fp, #-3072]	; 0xfffff400
    e198:	0500003d 	streq	r0, [r0, #-61]	; 0xffffffc3
    e19c:	000025e3 	andeq	r2, r0, r3, ror #11
    e1a0:	13006400 	movwne	r6, #1024	; 0x400
    e1a4:	00000025 	andeq	r0, r0, r5, lsr #32
    e1a8:	000004a4 	andeq	r0, r0, r4, lsr #9
    e1ac:	00035614 	andeq	r5, r3, r4, lsl r6
    e1b0:	01101400 	tsteq	r0, r0, lsl #8
    e1b4:	a4140000 	ldrge	r0, [r4], #-0
    e1b8:	14000004 	strne	r0, [r0], #-4
    e1bc:	00000025 	andeq	r0, r0, r5, lsr #32
    e1c0:	aa040f00 	bge	111dc8 <_Min_Stack_Size+0x111bc8>
    e1c4:	04000004 	streq	r0, [r0], #-4
    e1c8:	00ca0801 	sbceq	r0, sl, r1, lsl #16
    e1cc:	040f0000 	streq	r0, [pc], #-0	; e1d4 <_Min_Stack_Size+0xdfd4>
    e1d0:	00000486 	andeq	r0, r0, r6, lsl #9
    e1d4:	00002513 	andeq	r2, r0, r3, lsl r5
    e1d8:	0004d500 	andeq	sp, r4, r0, lsl #10
    e1dc:	03561400 	cmpeq	r6, #0, 8
    e1e0:	10140000 	andsne	r0, r4, r0
    e1e4:	14000001 	strne	r0, [r0], #-1
    e1e8:	000004d5 	ldrdeq	r0, [r0], -r5
    e1ec:	00002514 	andeq	r2, r0, r4, lsl r5
    e1f0:	040f0000 	streq	r0, [pc], #-0	; e1f8 <_Min_Stack_Size+0xdff8>
    e1f4:	000004db 	ldrdeq	r0, [r0], -fp
    e1f8:	0004aa15 	andeq	sl, r4, r5, lsl sl
    e1fc:	b7040f00 	strlt	r0, [r4, -r0, lsl #30]
    e200:	13000004 	movwne	r0, #4
    e204:	0000008c 	andeq	r0, r0, ip, lsl #1
    e208:	00000504 	andeq	r0, r0, r4, lsl #10
    e20c:	00035614 	andeq	r5, r3, r4, lsl r6
    e210:	01101400 	tsteq	r0, r0, lsl #8
    e214:	8c140000 	ldchi	0, cr0, [r4], {-0}
    e218:	14000000 	strne	r0, [r0], #-0
    e21c:	00000025 	andeq	r0, r0, r5, lsr #32
    e220:	e6040f00 	str	r0, [r4], -r0, lsl #30
    e224:	13000004 	movwne	r0, #4
    e228:	00000025 	andeq	r0, r0, r5, lsr #32
    e22c:	0000051e 	andeq	r0, r0, lr, lsl r5
    e230:	00035614 	andeq	r5, r3, r4, lsl r6
    e234:	01101400 	tsteq	r0, r0, lsl #8
    e238:	0f000000 	svceq	0x00000000
    e23c:	00050a04 	andeq	r0, r5, r4, lsl #20
    e240:	004c0800 	subeq	r0, ip, r0, lsl #16
    e244:	05340000 	ldreq	r0, [r4, #-0]!
    e248:	d2090000 	andle	r0, r9, #0
    e24c:	02000000 	andeq	r0, r0, #0
    e250:	004c0800 	subeq	r0, ip, r0, lsl #16
    e254:	05440000 	strbeq	r0, [r4, #-0]
    e258:	d2090000 	andle	r0, r9, #0
    e25c:	00000000 	andeq	r0, r0, r0
    e260:	3ee70500 	cdpcc	5, 14, cr0, cr7, cr0, {0}
    e264:	1d050000 	stcne	0, cr0, [r5, #-0]
    e268:	00035c01 	andeq	r5, r3, r1, lsl #24
    e26c:	49251000 	stmdbmi	r5!, {ip}
    e270:	050c0000 	streq	r0, [ip, #-0]
    e274:	05850121 	streq	r0, [r5, #289]	; 0x121
    e278:	05110000 	ldreq	r0, [r1, #-0]
    e27c:	05000041 	streq	r0, [r0, #-65]	; 0xffffffbf
    e280:	05850123 	streq	r0, [r5, #291]	; 0x123
    e284:	11000000 	mrsne	r0, (UNDEF: 0)
    e288:	00003ee0 	andeq	r3, r0, r0, ror #29
    e28c:	25012405 	strcs	r2, [r1, #-1029]	; 0xfffffbfb
    e290:	04000000 	streq	r0, [r0], #-0
    e294:	003daf11 	eorseq	sl, sp, r1, lsl pc
    e298:	01250500 			; <UNDEFINED> instruction: 0x01250500
    e29c:	0000058b 	andeq	r0, r0, fp, lsl #11
    e2a0:	040f0008 	streq	r0, [pc], #-8	; e2a8 <_Min_Stack_Size+0xe0a8>
    e2a4:	00000550 	andeq	r0, r0, r0, asr r5
    e2a8:	0544040f 	strbeq	r0, [r4, #-1039]	; 0xfffffbf1
    e2ac:	96100000 	ldrls	r0, [r0], -r0
    e2b0:	18000040 	stmdane	r0, {r6}
    e2b4:	d3013d05 	movwle	r3, #7429	; 0x1d05
    e2b8:	11000005 	tstne	r0, r5
    e2bc:	00004090 	muleq	r0, r0, r0
    e2c0:	d3013e05 	movwle	r3, #7685	; 0x1e05
    e2c4:	00000005 	andeq	r0, r0, r5
    e2c8:	003f6811 	eorseq	r6, pc, r1, lsl r8	; <UNPREDICTABLE>
    e2cc:	013f0500 	teqeq	pc, r0, lsl #10
    e2d0:	000005d3 	ldrdeq	r0, [r0], -r3
    e2d4:	3e501106 	rdfccs	f1, f0, f6
    e2d8:	40050000 	andmi	r0, r5, r0
    e2dc:	00003e01 	andeq	r3, r0, r1, lsl #28
    e2e0:	00110c00 	andseq	r0, r1, r0, lsl #24
    e2e4:	05000041 	streq	r0, [r0, #-65]	; 0xffffffbf
    e2e8:	006f0143 	rsbeq	r0, pc, r3, asr #2
    e2ec:	00100000 	andseq	r0, r0, r0
    e2f0:	00003e08 	andeq	r3, r0, r8, lsl #28
    e2f4:	0005e300 	andeq	lr, r5, r0, lsl #6
    e2f8:	00d20900 	sbcseq	r0, r2, r0, lsl #18
    e2fc:	00020000 	andeq	r0, r2, r0
    e300:	00402010 	subeq	r2, r0, r0, lsl r0
    e304:	56051000 	strpl	r1, [r5], -r0
    e308:	00062501 	andeq	r2, r6, r1, lsl #10
    e30c:	40b61100 	adcsmi	r1, r6, r0, lsl #2
    e310:	59050000 	stmdbpl	r5, {}	; <UNPREDICTABLE>
    e314:	00017001 	andeq	r7, r1, r1
    e318:	55110000 	ldrpl	r0, [r1, #-0]
    e31c:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    e320:	0025015a 	eoreq	r0, r5, sl, asr r1
    e324:	11040000 	mrsne	r0, (UNDEF: 4)
    e328:	000040f5 	strdeq	r4, [r0], -r5
    e32c:	70015b05 	andvc	r5, r1, r5, lsl #22
    e330:	08000001 	stmdaeq	r0, {r0}
    e334:	003f3711 	eorseq	r3, pc, r1, lsl r7	; <UNPREDICTABLE>
    e338:	015c0500 	cmpeq	ip, r0, lsl #10
    e33c:	00000625 	andeq	r0, r0, r5, lsr #12
    e340:	040f000c 	streq	r0, [pc], #-12	; e348 <_Min_Stack_Size+0xe148>
    e344:	00000170 	andeq	r0, r0, r0, ror r1
    e348:	00410b10 	subeq	r0, r1, r0, lsl fp
    e34c:	60055000 	andvs	r5, r5, r0
    e350:	0006c801 	andeq	ip, r6, r1, lsl #16
    e354:	3eb31100 	frdccs	f1, f3, f0
    e358:	63050000 	movwvs	r0, #20480	; 0x5000
    e35c:	0004a401 	andeq	sl, r4, r1, lsl #8
    e360:	bd110000 	ldclt	0, cr0, [r1, #-0]
    e364:	0500003d 	streq	r0, [r0, #-61]	; 0xffffffc3
    e368:	00fa0164 	rscseq	r0, sl, r4, ror #2
    e36c:	11040000 	mrsne	r0, (UNDEF: 4)
    e370:	00003fd9 	ldrdeq	r3, [r0], -r9
    e374:	fa016505 	blx	67790 <_Min_Stack_Size+0x67590>
    e378:	0c000000 	stceq	0, cr0, [r0], {-0}
    e37c:	00402c11 	subeq	r2, r0, r1, lsl ip
    e380:	01660500 	cmneq	r6, r0, lsl #10
    e384:	000000fa 	strdeq	r0, [r0], -sl
    e388:	3f981114 	svccc	0x00981114
    e38c:	67050000 	strvs	r0, [r5, -r0]
    e390:	0006c801 	andeq	ip, r6, r1, lsl #16
    e394:	f5111c00 			; <UNDEFINED> instruction: 0xf5111c00
    e398:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    e39c:	00250168 	eoreq	r0, r5, r8, ror #2
    e3a0:	11240000 			; <UNDEFINED> instruction: 0x11240000
    e3a4:	00004041 	andeq	r4, r0, r1, asr #32
    e3a8:	fa016905 	blx	687c4 <_Min_Stack_Size+0x685c4>
    e3ac:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    e3b0:	003fe711 	eorseq	lr, pc, r1, lsl r7	; <UNPREDICTABLE>
    e3b4:	016a0500 	cmneq	sl, r0, lsl #10
    e3b8:	000000fa 	strdeq	r0, [r0], -sl
    e3bc:	3e9d1130 	mrccc	1, 4, r1, cr13, cr0, {1}
    e3c0:	6b050000 	blvs	14e3c8 <_Min_Stack_Size+0x14e1c8>
    e3c4:	0000fa01 	andeq	pc, r0, r1, lsl #20
    e3c8:	27113800 	ldrcs	r3, [r1, -r0, lsl #16]
    e3cc:	05000041 	streq	r0, [r0, #-65]	; 0xffffffbf
    e3d0:	00fa016c 	rscseq	r0, sl, ip, ror #2
    e3d4:	11400000 	mrsne	r0, (UNDEF: 64)
    e3d8:	000040d5 	ldrdeq	r4, [r0], -r5
    e3dc:	fa016d05 	blx	697f8 <_Min_Stack_Size+0x695f8>
    e3e0:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    e3e4:	04aa0800 	strteq	r0, [sl], #2048	; 0x800
    e3e8:	06d80000 	ldrbeq	r0, [r8], r0
    e3ec:	d2090000 	andle	r0, r9, #0
    e3f0:	07000000 	streq	r0, [r0, -r0]
    e3f4:	e3040f00 	movw	r0, #20224	; 0x4f00
    e3f8:	16000005 	strne	r0, [r0], -r5
    e3fc:	000006e9 	andeq	r0, r0, r9, ror #13
    e400:	00035614 	andeq	r5, r3, r4, lsl r6
    e404:	040f0000 	streq	r0, [pc], #-0	; e40c <_Min_Stack_Size+0xe20c>
    e408:	000006de 	ldrdeq	r0, [r0], -lr
    e40c:	0591040f 	ldreq	r0, [r1, #1039]	; 0x40f
    e410:	040f0000 	streq	r0, [pc], #-0	; e418 <_Min_Stack_Size+0xe218>
    e414:	00000186 	andeq	r0, r0, r6, lsl #3
    e418:	00070616 	andeq	r0, r7, r6, lsl r6
    e41c:	00251400 	eoreq	r1, r5, r0, lsl #8
    e420:	0f000000 	svceq	0x00000000
    e424:	00070c04 	andeq	r0, r7, r4, lsl #24
    e428:	fb040f00 	blx	112032 <_Min_Stack_Size+0x111e32>
    e42c:	0f000006 	svceq	0x00000006
    e430:	00062b04 	andeq	r2, r6, r4, lsl #22
    e434:	418e0300 	orrmi	r0, lr, r0, lsl #6
    e438:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
    e43c:	00000723 	andeq	r0, r0, r3, lsr #14
    e440:	0041550d 	subeq	r5, r1, sp, lsl #10
    e444:	00070400 	andeq	r0, r7, r0, lsl #8
    e448:	0000073a 	andeq	r0, r0, sl, lsr r7
    e44c:	00419d17 	subeq	r9, r1, r7, lsl sp
    e450:	00011000 	andeq	r1, r1, r0
    e454:	03000000 	movweq	r0, #0
    e458:	00004829 	andeq	r4, r0, r9, lsr #16
    e45c:	003e6308 	eorseq	r6, lr, r8, lsl #6
    e460:	37030000 	strcc	r0, [r3, -r0]
    e464:	08000048 	stmdaeq	r0, {r3, r6}
    e468:	0000616b 	andeq	r6, r0, fp, ror #2
    e46c:	3ee90300 	cdpcc	3, 14, cr0, cr9, cr0, {0}
    e470:	35090000 	strcc	r0, [r9, #-0]
    e474:	00000544 	andeq	r0, r0, r4, asr #10
    e478:	0761040f 	strbeq	r0, [r1, -pc, lsl #8]!
    e47c:	03180000 	tsteq	r8, #0
    e480:	00004157 	andeq	r4, r0, r7, asr r1
    e484:	07186206 	ldreq	r6, [r8, -r6, lsl #4]
    e488:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    e48c:	00477404 	subeq	r7, r7, r4, lsl #8
    e490:	04040400 	streq	r0, [r4], #-1024	; 0xfffffc00
    e494:	000045e9 	andeq	r4, r0, r9, ror #11
    e498:	6f040804 	svcvs	0x00040804
    e49c:	0f000047 	svceq	0x00000047
    e4a0:	00002504 	andeq	r2, r0, r4, lsl #10
    e4a4:	46000d00 	strmi	r0, [r0], -r0, lsl #26
    e4a8:	0a600000 	beq	180e4b0 <_Min_Stack_Size+0x180e2b0>
    e4ac:	00083dc0 	andeq	r3, r8, r0, asr #27
    e4b0:	3e760b00 	vaddcc.f64	d16, d6, d0
    e4b4:	c20a0000 	andgt	r0, sl, #0
    e4b8:	00000025 	andeq	r0, r0, r5, lsr #32
    e4bc:	478e0b00 	strmi	r0, [lr, r0, lsl #22]
    e4c0:	c30a0000 	movwgt	r0, #40960	; 0xa000
    e4c4:	00000025 	andeq	r0, r0, r5, lsr #32
    e4c8:	478d0b04 	strmi	r0, [sp, r4, lsl #22]
    e4cc:	c40a0000 	strgt	r0, [sl], #-0
    e4d0:	00000025 	andeq	r0, r0, r5, lsr #32
    e4d4:	46740b08 	ldrbtmi	r0, [r4], -r8, lsl #22
    e4d8:	c50a0000 	strgt	r0, [sl, #-0]
    e4dc:	00000025 	andeq	r0, r0, r5, lsr #32
    e4e0:	45ca0b0c 	strbmi	r0, [sl, #2828]	; 0xb0c
    e4e4:	c60a0000 	strgt	r0, [sl], -r0
    e4e8:	00000025 	andeq	r0, r0, r5, lsr #32
    e4ec:	65720e10 	ldrbvs	r0, [r2, #-3600]!	; 0xfffff1f0
    e4f0:	c70a0074 	smlsdxgt	sl, r4, r0, r0
    e4f4:	00000025 	andeq	r0, r0, r5, lsr #32
    e4f8:	15310b14 	ldrne	r0, [r1, #-2836]!	; 0xfffff4ec
    e4fc:	c80a0000 	stmdagt	sl, {}	; <UNPREDICTABLE>
    e500:	000004aa 	andeq	r0, r0, sl, lsr #9
    e504:	47ae0b18 			; <UNDEFINED> instruction: 0x47ae0b18
    e508:	c90a0000 	stmdbgt	sl, {}	; <UNPREDICTABLE>
    e50c:	000004aa 	andeq	r0, r0, sl, lsr #9
    e510:	47550b19 	smmlami	r5, r9, fp, r0
    e514:	ca0a0000 	bgt	28e51c <_Min_Stack_Size+0x28e31c>
    e518:	000004aa 	andeq	r0, r0, sl, lsr #9
    e51c:	75620e1a 	strbvc	r0, [r2, #-3610]!	; 0xfffff1e6
    e520:	cb0a0066 	blgt	28e6c0 <_Min_Stack_Size+0x28e4c0>
    e524:	0000083d 	andeq	r0, r0, sp, lsr r8
    e528:	3e650b1b 	vmovcc.8	d5[4], r0
    e52c:	cc0a0000 	stcgt	0, cr0, [sl], {-0}
    e530:	0000084d 	andeq	r0, r0, sp, asr #16
    e534:	46140b43 	ldrmi	r0, [r4], -r3, asr #22
    e538:	ce0a0000 	cdpgt	0, 0, cr0, cr10, cr0, {0}
    e53c:	0000076d 	andeq	r0, r0, sp, ror #14
    e540:	479c0b48 	ldrmi	r0, [ip, r8, asr #22]
    e544:	cf0a0000 	svcgt	0x000a0000
    e548:	0000085d 	andeq	r0, r0, sp, asr r8
    e54c:	468d0b50 	pkhtbmi	r0, sp, r0, asr #22
    e550:	d00a0000 	andle	r0, sl, r0
    e554:	00000025 	andeq	r0, r0, r5, lsr #32
    e558:	aa080058 	bge	20e6c0 <_Min_Stack_Size+0x20e4c0>
    e55c:	4d000004 	stcmi	0, cr0, [r0, #-16]
    e560:	09000008 	stmdbeq	r0, {r3}
    e564:	000000d2 	ldrdeq	r0, [r0], -r2
    e568:	aa080027 	bge	20e60c <_Min_Stack_Size+0x20e40c>
    e56c:	5d000004 	stcpl	0, cr0, [r0, #-16]
    e570:	09000008 	stmdbeq	r0, {r3}
    e574:	000000d2 	ldrdeq	r0, [r0], -r2
    e578:	aa080002 	bge	20e588 <_Min_Stack_Size+0x20e388>
    e57c:	6d000004 	stcvs	0, cr0, [r0, #-16]
    e580:	09000008 	stmdbeq	r0, {r3}
    e584:	000000d2 	ldrdeq	r0, [r0], -r2
    e588:	3e190006 	cdpcc	0, 1, cr0, cr9, cr6, {0}
    e58c:	01000048 	tsteq	r0, r8, asr #32
    e590:	00002531 	andeq	r2, r0, r1, lsr r5
    e594:	006c3c00 	rsbeq	r3, ip, r0, lsl #24
    e598:	0000ea08 	andeq	lr, r0, r8, lsl #20
    e59c:	729c0100 	addsvc	r0, ip, #0, 2
    e5a0:	1a000009 	bne	e5cc <_Min_Stack_Size+0xe3cc>
    e5a4:	00000df9 	strdeq	r0, [r0], -r9
    e5a8:	03563101 	cmpeq	r6, #1073741824	; 0x40000000
    e5ac:	0ea50000 	cdpeq	0, 10, cr0, cr5, cr0, {0}
    e5b0:	311a0000 	tstcc	sl, r0
    e5b4:	01000048 	tsteq	r0, r8, asr #32
    e5b8:	00097232 	andeq	r7, r9, r2, lsr r2
    e5bc:	000ec300 	andeq	ip, lr, r0, lsl #6
    e5c0:	481b1a00 	ldmdami	fp, {r9, fp, ip}
    e5c4:	33010000 	movwcc	r0, #4096	; 0x1000
    e5c8:	00000782 	andeq	r0, r0, r2, lsl #15
    e5cc:	00000ee1 	andeq	r0, r0, r1, ror #29
    e5d0:	0070661b 	rsbseq	r6, r0, fp, lsl r6
    e5d4:	09783401 	ldmdbeq	r8!, {r0, sl, ip, sp}^
    e5d8:	0f260000 	svceq	0x00260000
    e5dc:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
    e5e0:	01000046 	tsteq	r0, r6, asr #32
    e5e4:	00099c35 	andeq	r9, r9, r5, lsr ip
    e5e8:	000f4400 	andeq	r4, pc, r0, lsl #8
    e5ec:	006e1c00 	rsbeq	r1, lr, r0, lsl #24
    e5f0:	00253801 	eoreq	r3, r5, r1, lsl #16
    e5f4:	0f640000 	svceq	0x00640000
    e5f8:	ef1d0000 	svc	0x001d0000
    e5fc:	01000045 	tsteq	r0, r5, asr #32
    e600:	6ca61e68 	stcvs	14, cr1, [r6], #416	; 0x1a0
    e604:	00200800 	eoreq	r0, r0, r0, lsl #16
    e608:	091e0000 	ldmdbeq	lr, {}	; <UNPREDICTABLE>
    e60c:	bf1f0000 	svclt	0x001f0000
    e610:	01000047 	tsteq	r0, r7, asr #32
    e614:	00002551 	andeq	r2, r0, r1, asr r5
    e618:	000fd900 	andeq	sp, pc, r0, lsl #18
    e61c:	6cb22000 	ldcvs	0, cr2, [r2]
    e620:	01210800 			; <UNDEFINED> instruction: 0x01210800
    e624:	21310153 	teqcs	r1, r3, asr r1
    e628:	74025201 	strvc	r5, [r2], #-513	; 0xfffffdff
    e62c:	51012119 	tstpl	r1, r9, lsl r1
    e630:	21007702 	tstcs	r0, r2, lsl #14
    e634:	76025001 	strvc	r5, [r2], -r1
    e638:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    e63c:	08006d02 	stmdaeq	r0, {r1, r8, sl, fp, sp, lr}
    e640:	0000001e 	andeq	r0, r0, lr, lsl r0
    e644:	00000958 	andeq	r0, r0, r8, asr r9
    e648:	0047bf1f 	subeq	fp, r7, pc, lsl pc
    e64c:	25660100 	strbcs	r0, [r6, #-256]!	; 0xffffff00
    e650:	ec000000 	stc	0, cr0, [r0], {-0}
    e654:	2000000f 	andcs	r0, r0, pc
    e658:	08006d16 	stmdaeq	r0, {r1, r2, r4, r8, sl, fp, sp, lr}
    e65c:	01530121 	cmpeq	r3, r1, lsr #2
    e660:	52012131 	andpl	r2, r1, #1073741836	; 0x4000000c
    e664:	211a7402 	tstcs	sl, r2, lsl #8
    e668:	77025101 	strvc	r5, [r2, -r1, lsl #2]
    e66c:	50012100 	andpl	r2, r1, r0, lsl #2
    e670:	00007602 	andeq	r7, r0, r2, lsl #12
    e674:	6cd82000 	ldclvs	0, cr2, [r8], {0}
    e678:	01210800 			; <UNDEFINED> instruction: 0x01210800
    e67c:	c3740352 	cmngt	r4, #1207959553	; 0x48000001
    e680:	51012100 	mrspl	r2, (UNDEF: 17)
    e684:	21007702 	tstcs	r0, r2, lsl #14
    e688:	76025001 	strvc	r5, [r2], -r1
    e68c:	0f000000 	svceq	0x00000000
    e690:	00078804 	andeq	r8, r7, r4, lsl #16
    e694:	50040f00 	andpl	r0, r4, r0, lsl #30
    e698:	13000007 	movwne	r0, #7
    e69c:	00000025 	andeq	r0, r0, r5, lsr #32
    e6a0:	0000099c 	muleq	r0, ip, r9
    e6a4:	00035614 	andeq	r5, r3, r4, lsl r6
    e6a8:	09781400 	ldmdbeq	r8!, {sl, ip}^
    e6ac:	d5140000 	ldrle	r0, [r4, #-0]
    e6b0:	14000004 	strne	r0, [r0], #-4
    e6b4:	0000002c 	andeq	r0, r0, ip, lsr #32
    e6b8:	7e040f00 	cdpvc	15, 0, cr0, cr4, cr0, {0}
    e6bc:	19000009 	stmdbne	r0, {r0, r3}
    e6c0:	0000473a 	andeq	r4, r0, sl, lsr r7
    e6c4:	00256c01 	eoreq	r6, r5, r1, lsl #24
    e6c8:	6d280000 	stcvs	0, cr0, [r8, #-0]
    e6cc:	02400800 	subeq	r0, r0, #0, 16
    e6d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    e6d4:	00000b39 	andeq	r0, r0, r9, lsr fp
    e6d8:	000df91a 	andeq	pc, sp, sl, lsl r9	; <UNPREDICTABLE>
    e6dc:	566c0100 	strbtpl	r0, [ip], -r0, lsl #2
    e6e0:	0b000003 	bleq	e6f4 <_Min_Stack_Size+0xe4f4>
    e6e4:	1a000010 	bne	e72c <_Min_Stack_Size+0xe52c>
    e6e8:	00004831 	andeq	r4, r0, r1, lsr r8
    e6ec:	09726c01 	ldmdbeq	r2!, {r0, sl, fp, sp, lr}^
    e6f0:	10a50000 	adcne	r0, r5, r0
    e6f4:	661b0000 	ldrvs	r0, [fp], -r0
    e6f8:	6c010070 	stcvs	0, cr0, [r1], {112}	; 0x70
    e6fc:	00000978 	andeq	r0, r0, r8, ror r9
    e700:	000010d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    e704:	0046691a 	subeq	r6, r6, sl, lsl r9
    e708:	9c6d0100 	stflse	f0, [sp], #-0
    e70c:	fd000009 	stc2	0, cr0, [r0, #-36]	; 0xffffffdc
    e710:	1b000010 	blne	e758 <_Min_Stack_Size+0xe558>
    e714:	01007061 	tsteq	r0, r1, rrx
    e718:	000b396e 	andeq	r3, fp, lr, ror #18
    e71c:	00112900 	andseq	r2, r1, r0, lsl #18
    e720:	481b2200 	ldmdami	fp, {r9, sp}
    e724:	71010000 	mrsvc	r0, (UNDEF: 1)
    e728:	00000025 	andeq	r0, r0, r5, lsr #32
    e72c:	1f649102 	svcne	0x00649102
    e730:	000047cc 	andeq	r4, r0, ip, asr #15
    e734:	00617201 	rsbeq	r7, r1, r1, lsl #4
    e738:	11490000 	mrsne	r0, (UNDEF: 73)
    e73c:	a81f0000 	ldmdage	pc, {}	; <UNPREDICTABLE>
    e740:	01000033 	tsteq	r0, r3, lsr r0
    e744:	00002573 	andeq	r2, r0, r3, ror r5
    e748:	00118800 	andseq	r8, r1, r0, lsl #16
    e74c:	006e1c00 	rsbeq	r1, lr, r0, lsl #24
    e750:	00257401 	eoreq	r7, r5, r1, lsl #8
    e754:	11b20000 			; <UNDEFINED> instruction: 0x11b20000
    e758:	631c0000 	tstvs	ip, #0
    e75c:	75010070 	strvc	r0, [r1, #-112]	; 0xffffff90
    e760:	000004a4 	andeq	r0, r0, r4, lsr #9
    e764:	000011df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    e768:	0047c61f 	subeq	ip, r7, pc, lsl r6
    e76c:	a4760100 	ldrbtge	r0, [r6], #-256	; 0xffffff00
    e770:	9e000004 	cdpls	0, 0, cr0, cr0, cr4, {0}
    e774:	23000012 	movwcs	r0, #18
    e778:	00004809 	andeq	r4, r0, r9, lsl #16
    e77c:	6ef8e701 	cdpvs	7, 15, cr14, cr8, cr1, {0}
    e780:	22230800 	eorcs	r0, r3, #0, 16
    e784:	01000048 	tsteq	r0, r8, asr #32
    e788:	006e4eb2 	strhteq	r4, [lr], #-226	; 0xffffff1e
    e78c:	48142308 	ldmdami	r4, {r3, r8, r9, sp}
    e790:	ab010000 	blge	4e798 <_Min_Stack_Size+0x4e598>
    e794:	08006e40 	stmdaeq	r0, {r6, r9, sl, fp, sp, lr}
    e798:	78656824 	stmdavc	r5!, {r2, r5, fp, sp, lr}^
    e79c:	10a00100 	adcne	r0, r0, r0, lsl #2
    e7a0:	1d08006e 	stcne	0, cr0, [r8, #-440]	; 0xfffffe48
    e7a4:	000045ef 	andeq	r4, r0, pc, ror #11
    e7a8:	4025f701 	eormi	pc, r5, r1, lsl #14
    e7ac:	b900000d 	stmdblt	r0, {r0, r2, r3}
    e7b0:	1c00000a 	stcne	0, cr0, [r0], {10}
    e7b4:	db010070 	blle	4e97c <_Min_Stack_Size+0x4e77c>
    e7b8:	000004a4 	andeq	r0, r0, r4, lsr #9
    e7bc:	000012ec 	andeq	r1, r0, ip, ror #5
    e7c0:	006ee426 	rsbeq	lr, lr, r6, lsr #8
    e7c4:	000b3f08 	andeq	r3, fp, r8, lsl #30
    e7c8:	51012100 	mrspl	r2, (UNDEF: 17)
    e7cc:	01213001 			; <UNDEFINED> instruction: 0x01213001
    e7d0:	00750250 	rsbseq	r0, r5, r0, asr r2
    e7d4:	3c1e0000 	ldccc	0, cr0, [lr], {-0}
    e7d8:	1e08006f 	cdpne	0, 0, cr0, cr8, cr15, {3}
    e7dc:	f3000000 	vhadd.u8	d0, d0, d0
    e7e0:	1f00000a 	svcne	0x0000000a
    e7e4:	000047bf 			; <UNDEFINED> instruction: 0x000047bf
    e7e8:	0025f401 	eoreq	pc, r5, r1, lsl #8
    e7ec:	12ff0000 	rscsne	r0, pc, #0
    e7f0:	52200000 	eorpl	r0, r0, #0
    e7f4:	2108006f 	tstcs	r8, pc, rrx
    e7f8:	31015301 	tstcc	r1, r1, lsl #6
    e7fc:	02520121 	subseq	r0, r2, #1073741832	; 0x40000008
    e800:	01211974 			; <UNDEFINED> instruction: 0x01211974
    e804:	00770251 	rsbseq	r0, r7, r1, asr r2
    e808:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
    e80c:	00000076 	andeq	r0, r0, r6, ror r0
    e810:	006f1027 	rsbeq	r1, pc, r7, lsr #32
    e814:	00086d08 	andeq	r6, r8, r8, lsl #26
    e818:	000b2000 	andeq	r2, fp, r0
    e81c:	53012100 	movwpl	r2, #4352	; 0x1100
    e820:	21007702 	tstcs	r0, r2, lsl #14
    e824:	91025201 	tstls	r2, r1, lsl #4
    e828:	51012164 	tstpl	r1, r4, ror #2
    e82c:	21007402 	tstcs	r0, r2, lsl #8
    e830:	76025001 	strvc	r5, [r2], -r1
    e834:	7d022100 	stfvcs	f2, [r2, #-0]
    e838:	00780200 	rsbseq	r0, r8, r0, lsl #4
    e83c:	6f242000 	svcvs	0x00242000
    e840:	01210800 			; <UNDEFINED> instruction: 0x01210800
    e844:	00750252 	rsbseq	r0, r5, r2, asr r2
    e848:	02510121 	subseq	r0, r1, #1073741832	; 0x40000008
    e84c:	01210077 			; <UNDEFINED> instruction: 0x01210077
    e850:	00760250 	rsbseq	r0, r6, r0, asr r2
    e854:	040f0000 	streq	r0, [pc], #-0	; e85c <_Min_Stack_Size+0xe65c>
    e858:	00000762 	andeq	r0, r0, r2, ror #14
    e85c:	00468628 	subeq	r8, r6, r8, lsr #12
    e860:	10150b00 	andsne	r0, r5, r0, lsl #22
    e864:	14000001 	strne	r0, [r0], #-1
    e868:	0000075b 	andeq	r0, r0, fp, asr r7
    e86c:	00002514 	andeq	r2, r0, r4, lsl r5
    e870:	002c1400 	eoreq	r1, ip, r0, lsl #8
    e874:	00000000 	andeq	r0, r0, r0
    e878:	0000079c 	muleq	r0, ip, r7
    e87c:	306c0004 	rsbcc	r0, ip, r4
    e880:	01040000 	mrseq	r0, (UNDEF: 4)
    e884:	00003ce0 	andeq	r3, r0, r0, ror #25
    e888:	00485201 	subeq	r5, r8, r1, lsl #4
    e88c:	0043de00 	subeq	sp, r3, r0, lsl #28
    e890:	000da000 	andeq	sl, sp, r0
    e894:	00000000 	andeq	r0, r0, r0
    e898:	00581300 	subseq	r1, r8, r0, lsl #6
    e89c:	45a50200 	strmi	r0, [r5, #512]!	; 0x200
    e8a0:	93020000 	movwls	r0, #8192	; 0x2000
    e8a4:	00000030 	andeq	r0, r0, r0, lsr r0
    e8a8:	69050403 	stmdbvs	r5, {r0, r1, sl}
    e8ac:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
    e8b0:	00ff0704 	rscseq	r0, pc, r4, lsl #14
    e8b4:	02040000 	andeq	r0, r4, #0
    e8b8:	00012307 	andeq	r2, r1, r7, lsl #6
    e8bc:	06010400 	streq	r0, [r1], -r0, lsl #8
    e8c0:	000000c3 	andeq	r0, r0, r3, asr #1
    e8c4:	c1080104 	tstgt	r8, r4, lsl #2
    e8c8:	04000000 	streq	r0, [r0], #-0
    e8cc:	00510502 	subseq	r0, r1, r2, lsl #10
    e8d0:	04040000 	streq	r0, [r4], #-0
    e8d4:	00006d05 	andeq	r6, r0, r5, lsl #26
    e8d8:	07040400 	streq	r0, [r4, -r0, lsl #8]
    e8dc:	000000fa 	strdeq	r0, [r0], -sl
    e8e0:	68050804 	stmdavs	r5, {r2, fp}
    e8e4:	04000000 	streq	r0, [r0], #-0
    e8e8:	00f50708 	rscseq	r0, r5, r8, lsl #14
    e8ec:	ce020000 	cdpgt	0, 0, cr0, cr2, cr0, {0}
    e8f0:	0300003e 	movweq	r0, #62	; 0x3e
    e8f4:	00003007 	andeq	r3, r0, r7
    e8f8:	3e340200 	cdpcc	2, 3, cr0, cr4, cr0, {0}
    e8fc:	10040000 	andne	r0, r4, r0
    e900:	0000005a 	andeq	r0, r0, sl, asr r0
    e904:	003f8902 	eorseq	r8, pc, r2, lsl #18
    e908:	5a270400 	bpl	9cf910 <_Min_Stack_Size+0x9cf710>
    e90c:	05000000 	streq	r0, [r0, #-0]
    e910:	0000403a 	andeq	r4, r0, sl, lsr r0
    e914:	37016102 	strcc	r6, [r1, -r2, lsl #2]
    e918:	06000000 	streq	r0, [r0], -r0
    e91c:	c24a0404 	subgt	r0, sl, #4, 8	; 0x4000000
    e920:	07000000 	streq	r0, [r0, -r0]
    e924:	00003e3b 	andeq	r3, r0, fp, lsr lr
    e928:	00974c04 	addseq	r4, r7, r4, lsl #24
    e92c:	c4070000 	strgt	r0, [r7], #-0
    e930:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    e934:	0000c24d 	andeq	ip, r0, sp, asr #4
    e938:	4c080000 	stcmi	0, cr0, [r8], {-0}
    e93c:	d2000000 	andle	r0, r0, #0
    e940:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    e944:	000000d2 	ldrdeq	r0, [r0], -r2
    e948:	04040003 	streq	r0, [r4], #-3
    e94c:	00001507 	andeq	r1, r0, r7, lsl #10
    e950:	04080a00 	streq	r0, [r8], #-2560	; 0xfffff600
    e954:	0000fa47 	andeq	pc, r0, r7, asr #20
    e958:	3e8b0b00 	vdivcc.f64	d0, d11, d0
    e95c:	49040000 	stmdbmi	r4, {}	; <UNPREDICTABLE>
    e960:	00000030 	andeq	r0, r0, r0, lsr r0
    e964:	3e410b00 	vmlacc.f64	d16, d1, d0
    e968:	4e040000 	cdpmi	0, 0, cr0, cr4, cr0, {0}
    e96c:	000000a3 	andeq	r0, r0, r3, lsr #1
    e970:	6b020004 	blvs	8e988 <_Min_Stack_Size+0x8e788>
    e974:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    e978:	0000d94f 	andeq	sp, r0, pc, asr #18
    e97c:	3fa20200 	svccc	0x00a20200
    e980:	53040000 	movwpl	r0, #16384	; 0x4000
    e984:	00000076 	andeq	r0, r0, r6, ror r0
    e988:	a802040c 	stmdage	r2, {r2, r3, sl}
    e98c:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    e990:	00006116 	andeq	r6, r0, r6, lsl r1
    e994:	40760d00 	rsbsmi	r0, r6, r0, lsl #26
    e998:	05180000 	ldreq	r0, [r8, #-0]
    e99c:	0001702d 	andeq	r7, r1, sp, lsr #32
    e9a0:	41050b00 	tstmi	r5, r0, lsl #22
    e9a4:	2f050000 	svccs	0x00050000
    e9a8:	00000170 	andeq	r0, r0, r0, ror r1
    e9ac:	6b5f0e00 	blvs	17d21b4 <_Min_Stack_Size+0x17d1fb4>
    e9b0:	30300500 	eorscc	r0, r0, r0, lsl #10
    e9b4:	04000000 	streq	r0, [r0], #-0
    e9b8:	00407e0b 	subeq	r7, r0, fp, lsl #28
    e9bc:	30300500 	eorscc	r0, r0, r0, lsl #10
    e9c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e9c4:	0040fa0b 	subeq	pc, r0, fp, lsl #20
    e9c8:	30300500 	eorscc	r0, r0, r0, lsl #10
    e9cc:	0c000000 	stceq	0, cr0, [r0], {-0}
    e9d0:	00401b0b 	subeq	r1, r0, fp, lsl #22
    e9d4:	30300500 	eorscc	r0, r0, r0, lsl #10
    e9d8:	10000000 	andne	r0, r0, r0
    e9dc:	00785f0e 	rsbseq	r5, r8, lr, lsl #30
    e9e0:	01763105 	cmneq	r6, r5, lsl #2
    e9e4:	00140000 	andseq	r0, r4, r0
    e9e8:	011d040f 	tsteq	sp, pc, lsl #8
    e9ec:	12080000 	andne	r0, r8, #0
    e9f0:	86000001 	strhi	r0, [r0], -r1
    e9f4:	09000001 	stmdbeq	r0, {r0}
    e9f8:	000000d2 	ldrdeq	r0, [r0], -r2
    e9fc:	270d0000 	strcs	r0, [sp, -r0]
    ea00:	24000040 	strcs	r0, [r0], #-64	; 0xffffffc0
    ea04:	01ff3505 	mvnseq	r3, r5, lsl #10
    ea08:	b10b0000 	mrslt	r0, (UNDEF: 11)
    ea0c:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    ea10:	00003037 	andeq	r3, r0, r7, lsr r0
    ea14:	020b0000 	andeq	r0, fp, #0
    ea18:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    ea1c:	00003038 	andeq	r3, r0, r8, lsr r0
    ea20:	ba0b0400 	blt	2cfa28 <_Min_Stack_Size+0x2cf828>
    ea24:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    ea28:	00003039 	andeq	r3, r0, r9, lsr r0
    ea2c:	930b0800 	movwls	r0, #47104	; 0xb800
    ea30:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    ea34:	0000303a 	andeq	r3, r0, sl, lsr r0
    ea38:	be0b0c00 	cdplt	12, 0, cr0, cr11, cr0, {0}
    ea3c:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    ea40:	0000303b 	andeq	r3, r0, fp, lsr r0
    ea44:	860b1000 	strhi	r1, [fp], -r0
    ea48:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    ea4c:	0000303c 	andeq	r3, r0, ip, lsr r0
    ea50:	4a0b1400 	bmi	2d3a58 <_Min_Stack_Size+0x2d3858>
    ea54:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    ea58:	0000303d 	andeq	r3, r0, sp, lsr r0
    ea5c:	9e0b1800 	cdpls	8, 0, cr1, cr11, cr0, {0}
    ea60:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    ea64:	0000303e 	andeq	r3, r0, lr, lsr r0
    ea68:	6e0b1c00 	cdpvs	12, 0, cr1, cr11, cr0, {0}
    ea6c:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    ea70:	0000303f 	andeq	r3, r0, pc, lsr r0
    ea74:	0d002000 	stceq	0, cr2, [r0, #-0]
    ea78:	00003e49 	andeq	r3, r0, r9, asr #28
    ea7c:	24730508 	ldrbtcs	r0, [r3], #-1288	; 0xfffffaf8
    ea80:	0b000002 	bleq	ea90 <_Min_Stack_Size+0xe890>
    ea84:	000033a7 	andeq	r3, r0, r7, lsr #7
    ea88:	02247405 	eoreq	r7, r4, #83886080	; 0x5000000
    ea8c:	0b000000 	bleq	ea94 <_Min_Stack_Size+0xe894>
    ea90:	000045c9 	andeq	r4, r0, r9, asr #11
    ea94:	00307505 	eorseq	r7, r0, r5, lsl #10
    ea98:	00040000 	andeq	r0, r4, r0
    ea9c:	004c040f 	subeq	r0, ip, pc, lsl #8
    eaa0:	10100000 	andsne	r0, r0, r0
    eaa4:	60000041 	andvs	r0, r0, r1, asr #32
    eaa8:	56017205 	strpl	r7, [r1], -r5, lsl #4
    eaac:	11000003 	tstne	r0, r3
    eab0:	00003eee 	andeq	r3, r0, lr, ror #29
    eab4:	30017605 	andcc	r7, r1, r5, lsl #12
    eab8:	00000000 	andeq	r0, r0, r0
    eabc:	00445011 	subeq	r5, r4, r1, lsl r0
    eac0:	017b0500 	cmneq	fp, r0, lsl #10
    eac4:	0000058b 	andeq	r0, r0, fp, lsl #11
    eac8:	44a01104 	strtmi	r1, [r0], #260	; 0x104
    eacc:	7b050000 	blvc	14ead4 <_Min_Stack_Size+0x14e8d4>
    ead0:	00058b01 	andeq	r8, r5, r1, lsl #22
    ead4:	d6110800 	ldrle	r0, [r1], -r0, lsl #16
    ead8:	05000043 	streq	r0, [r0, #-67]	; 0xffffffbd
    eadc:	058b017b 	streq	r0, [fp, #379]	; 0x17b
    eae0:	110c0000 	mrsne	r0, (UNDEF: 12)
    eae4:	000040d0 	ldrdeq	r4, [r0], -r0
    eae8:	30017d05 	andcc	r7, r1, r5, lsl #26
    eaec:	10000000 	andne	r0, r0, r0
    eaf0:	00413611 	subeq	r3, r1, r1, lsl r6
    eaf4:	017f0500 	cmneq	pc, r0, lsl #10
    eaf8:	000004a4 	andeq	r0, r0, r4, lsr #9
    eafc:	3f7e1114 	svccc	0x007e1114
    eb00:	81050000 	mrshi	r0, (UNDEF: 5)
    eb04:	00003001 	andeq	r3, r0, r1
    eb08:	4f111800 	svcmi	0x00111800
    eb0c:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    eb10:	00300183 	eorseq	r0, r0, r3, lsl #3
    eb14:	111c0000 	tstne	ip, r0
    eb18:	00004117 	andeq	r4, r0, r7, lsl r1
    eb1c:	d5018405 	strle	r8, [r1, #-1029]	; 0xfffffbfb
    eb20:	20000004 	andcs	r0, r0, r4
    eb24:	706d5f12 	rsbvc	r5, sp, r2, lsl pc
    eb28:	01860500 	orreq	r0, r6, r0, lsl #10
    eb2c:	000006d8 	ldrdeq	r0, [r0], -r8
    eb30:	40611124 	rsbmi	r1, r1, r4, lsr #2
    eb34:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
    eb38:	0006e901 	andeq	lr, r6, r1, lsl #18
    eb3c:	0c112800 	ldceq	8, cr2, [r1], {-0}
    eb40:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    eb44:	0030018a 	eorseq	r0, r0, sl, lsl #3
    eb48:	112c0000 			; <UNDEFINED> instruction: 0x112c0000
    eb4c:	00003ec0 	andeq	r3, r0, r0, asr #29
    eb50:	30018d05 	andcc	r8, r1, r5, lsl #26
    eb54:	30000000 	andcc	r0, r0, r0
    eb58:	003ff611 	eorseq	pc, pc, r1, lsl r6	; <UNPREDICTABLE>
    eb5c:	018e0500 	orreq	r0, lr, r0, lsl #10
    eb60:	000004a4 	andeq	r0, r0, r4, lsr #9
    eb64:	3eae1134 	mcrcc	1, 5, r1, cr14, cr4, {1}
    eb68:	90050000 	andls	r0, r5, r0
    eb6c:	0006ef01 	andeq	lr, r6, r1, lsl #30
    eb70:	7c113800 	ldcvc	8, cr3, [r1], {-0}
    eb74:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    eb78:	06f50191 	usateq	r0, #21, r1, lsl #3
    eb7c:	113c0000 	teqne	ip, r0
    eb80:	00003f54 	andeq	r3, r0, r4, asr pc
    eb84:	a4019205 	strge	r9, [r1], #-517	; 0xfffffdfb
    eb88:	40000004 	andmi	r0, r0, r4
    eb8c:	003e6b11 	eorseq	r6, lr, r1, lsl fp
    eb90:	01950500 	orrseq	r0, r5, r0, lsl #10
    eb94:	00000706 	andeq	r0, r0, r6, lsl #14
    eb98:	3fd11144 	svccc	0x00d11144
    eb9c:	9d050000 	stcls	0, cr0, [r5, #-0]
    eba0:	00055001 	andeq	r5, r5, r1
    eba4:	79114800 	ldmdbvc	r1, {fp, lr}
    eba8:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    ebac:	058b019e 	streq	r0, [fp, #414]	; 0x19e
    ebb0:	11540000 	cmpne	r4, r0
    ebb4:	00003fcb 	andeq	r3, r0, fp, asr #31
    ebb8:	12019f05 	andne	r9, r1, #5, 30
    ebbc:	58000007 	stmdapl	r0, {r0, r1, r2}
    ebc0:	003e5f11 	eorseq	r5, lr, r1, lsl pc
    ebc4:	01a00500 	lsleq	r0, r0, #10
    ebc8:	000004a4 	andeq	r0, r0, r4, lsr #9
    ebcc:	040f005c 	streq	r0, [pc], #-92	; ebd4 <_Min_Stack_Size+0xe9d4>
    ebd0:	0000022a 	andeq	r0, r0, sl, lsr #4
    ebd4:	0041410d 	subeq	r4, r1, sp, lsl #2
    ebd8:	b3056800 	movwlt	r6, #22528	; 0x5800
    ebdc:	00000486 	andeq	r0, r0, r6, lsl #9
    ebe0:	00705f0e 	rsbseq	r5, r0, lr, lsl #30
    ebe4:	0224b405 	eoreq	fp, r4, #83886080	; 0x5000000
    ebe8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    ebec:	0500725f 	streq	r7, [r0, #-607]	; 0xfffffda1
    ebf0:	000030b5 	strheq	r3, [r0], -r5
    ebf4:	5f0e0400 	svcpl	0x000e0400
    ebf8:	b6050077 			; <UNDEFINED> instruction: 0xb6050077
    ebfc:	00000030 	andeq	r0, r0, r0, lsr r0
    ec00:	3e750b08 	vaddcc.f64	d16, d5, d8
    ec04:	b7050000 	strlt	r0, [r5, -r0]
    ec08:	00000053 	andeq	r0, r0, r3, asr r0
    ec0c:	40060b0c 	andmi	r0, r6, ip, lsl #22
    ec10:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    ec14:	00000053 	andeq	r0, r0, r3, asr r0
    ec18:	625f0e0e 	subsvs	r0, pc, #14, 28	; 0xe0
    ec1c:	b9050066 	stmdblt	r5, {r1, r2, r5, r6}
    ec20:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    ec24:	40e60b10 	rscmi	r0, r6, r0, lsl fp
    ec28:	ba050000 	blt	14ec30 <_Min_Stack_Size+0x14ea30>
    ec2c:	00000030 	andeq	r0, r0, r0, lsr r0
    ec30:	0df80b18 	ldcleq	11, cr0, [r8, #96]!	; 0x60
    ec34:	bd050000 	stclt	0, cr0, [r5, #-0]
    ec38:	00000356 	andeq	r0, r0, r6, asr r3
    ec3c:	3ffe0b1c 	svccc	0x00fe0b1c
    ec40:	c1050000 	mrsgt	r0, (UNDEF: 5)
    ec44:	00000110 	andeq	r0, r0, r0, lsl r1
    ec48:	39cd0b20 	stmibcc	sp, {r5, r8, r9, fp}^
    ec4c:	c3050000 	movwgt	r0, #20480	; 0x5000
    ec50:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    ec54:	395b0b24 	ldmdbcc	fp, {r2, r5, r8, r9, fp}^
    ec58:	c5050000 	strgt	r0, [r5, #-0]
    ec5c:	000004e0 	andeq	r0, r0, r0, ror #9
    ec60:	40b00b28 	adcsmi	r0, r0, r8, lsr #22
    ec64:	c8050000 	stmdagt	r5, {}	; <UNPREDICTABLE>
    ec68:	00000504 	andeq	r0, r0, r4, lsl #10
    ec6c:	3f910b2c 	svccc	0x00910b2c
    ec70:	c9050000 	stmdbgt	r5, {}	; <UNPREDICTABLE>
    ec74:	0000051e 	andeq	r0, r0, lr, lsl r5
    ec78:	755f0e30 	ldrbvc	r0, [pc, #-3632]	; de50 <_Min_Stack_Size+0xdc50>
    ec7c:	cc050062 	stcgt	0, cr0, [r5], {98}	; 0x62
    ec80:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    ec84:	755f0e34 	ldrbvc	r0, [pc, #-3636]	; de58 <_Min_Stack_Size+0xdc58>
    ec88:	cd050070 	stcgt	0, cr0, [r5, #-448]	; 0xfffffe40
    ec8c:	00000224 	andeq	r0, r0, r4, lsr #4
    ec90:	755f0e3c 	ldrbvc	r0, [pc, #-3644]	; de5c <_Min_Stack_Size+0xdc5c>
    ec94:	ce050072 	mcrgt	0, 0, r0, cr5, cr2, {3}
    ec98:	00000030 	andeq	r0, r0, r0, lsr r0
    ec9c:	3fab0b40 	svccc	0x00ab0b40
    eca0:	d1050000 	mrsle	r0, (UNDEF: 5)
    eca4:	00000524 	andeq	r0, r0, r4, lsr #10
    eca8:	3ec80b44 	cdpcc	11, 12, cr0, cr8, cr4, {2}
    ecac:	d2050000 	andle	r0, r5, #0
    ecb0:	00000534 	andeq	r0, r0, r4, lsr r5
    ecb4:	6c5f0e47 	mrrcvs	14, 4, r0, pc, cr7	; <UNPREDICTABLE>
    ecb8:	d5050062 	strle	r0, [r5, #-98]	; 0xffffff9e
    ecbc:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    ecc0:	40c70b48 	sbcmi	r0, r7, r8, asr #22
    ecc4:	d8050000 	stmdale	r5, {}	; <UNPREDICTABLE>
    ecc8:	00000030 	andeq	r0, r0, r0, lsr r0
    eccc:	49750b50 	ldmdbmi	r5!, {r4, r6, r8, r9, fp}^
    ecd0:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
    ecd4:	00000081 	andeq	r0, r0, r1, lsl #1
    ecd8:	35400b54 	strbcc	r0, [r0, #-2900]	; 0xfffff4ac
    ecdc:	e0050000 	and	r0, r5, r0
    ece0:	00000105 	andeq	r0, r0, r5, lsl #2
    ece4:	3f410b58 	svccc	0x00410b58
    ece8:	e2050000 	and	r0, r5, #0
    ecec:	000000fa 	strdeq	r0, [r0], -sl
    ecf0:	3db50b5c 	ldccc	11, cr0, [r5, #368]!	; 0x170
    ecf4:	e3050000 	movw	r0, #20480	; 0x5000
    ecf8:	00000030 	andeq	r0, r0, r0, lsr r0
    ecfc:	30130064 	andscc	r0, r3, r4, rrx
    ed00:	a4000000 	strge	r0, [r0], #-0
    ed04:	14000004 	strne	r0, [r0], #-4
    ed08:	00000356 	andeq	r0, r0, r6, asr r3
    ed0c:	00011014 	andeq	r1, r1, r4, lsl r0
    ed10:	04a41400 	strteq	r1, [r4], #1024	; 0x400
    ed14:	30140000 	andscc	r0, r4, r0
    ed18:	00000000 	andeq	r0, r0, r0
    ed1c:	04aa040f 	strteq	r0, [sl], #1039	; 0x40f
    ed20:	01040000 	mrseq	r0, (UNDEF: 4)
    ed24:	0000ca08 	andeq	ip, r0, r8, lsl #20
    ed28:	86040f00 	strhi	r0, [r4], -r0, lsl #30
    ed2c:	13000004 	movwne	r0, #4
    ed30:	00000030 	andeq	r0, r0, r0, lsr r0
    ed34:	000004d5 	ldrdeq	r0, [r0], -r5
    ed38:	00035614 	andeq	r5, r3, r4, lsl r6
    ed3c:	01101400 	tsteq	r0, r0, lsl #8
    ed40:	d5140000 	ldrle	r0, [r4, #-0]
    ed44:	14000004 	strne	r0, [r0], #-4
    ed48:	00000030 	andeq	r0, r0, r0, lsr r0
    ed4c:	db040f00 	blle	112954 <_Min_Stack_Size+0x112754>
    ed50:	15000004 	strne	r0, [r0, #-4]
    ed54:	000004aa 	andeq	r0, r0, sl, lsr #9
    ed58:	04b7040f 	ldrteq	r0, [r7], #1039	; 0x40f
    ed5c:	8c130000 	ldchi	0, cr0, [r3], {-0}
    ed60:	04000000 	streq	r0, [r0], #-0
    ed64:	14000005 	strne	r0, [r0], #-5
    ed68:	00000356 	andeq	r0, r0, r6, asr r3
    ed6c:	00011014 	andeq	r1, r1, r4, lsl r0
    ed70:	008c1400 	addeq	r1, ip, r0, lsl #8
    ed74:	30140000 	andscc	r0, r4, r0
    ed78:	00000000 	andeq	r0, r0, r0
    ed7c:	04e6040f 	strbteq	r0, [r6], #1039	; 0x40f
    ed80:	30130000 	andscc	r0, r3, r0
    ed84:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    ed88:	14000005 	strne	r0, [r0], #-5
    ed8c:	00000356 	andeq	r0, r0, r6, asr r3
    ed90:	00011014 	andeq	r1, r1, r4, lsl r0
    ed94:	040f0000 	streq	r0, [pc], #-0	; ed9c <_Min_Stack_Size+0xeb9c>
    ed98:	0000050a 	andeq	r0, r0, sl, lsl #10
    ed9c:	00004c08 	andeq	r4, r0, r8, lsl #24
    eda0:	00053400 	andeq	r3, r5, r0, lsl #8
    eda4:	00d20900 	sbcseq	r0, r2, r0, lsl #18
    eda8:	00020000 	andeq	r0, r2, r0
    edac:	00004c08 	andeq	r4, r0, r8, lsl #24
    edb0:	00054400 	andeq	r4, r5, r0, lsl #8
    edb4:	00d20900 	sbcseq	r0, r2, r0, lsl #18
    edb8:	00000000 	andeq	r0, r0, r0
    edbc:	003ee705 	eorseq	lr, lr, r5, lsl #14
    edc0:	011d0500 	tsteq	sp, r0, lsl #10
    edc4:	0000035c 	andeq	r0, r0, ip, asr r3
    edc8:	00492510 	subeq	r2, r9, r0, lsl r5
    edcc:	21050c00 	tstcs	r5, r0, lsl #24
    edd0:	00058501 	andeq	r8, r5, r1, lsl #10
    edd4:	41051100 	mrsmi	r1, (UNDEF: 21)
    edd8:	23050000 	movwcs	r0, #20480	; 0x5000
    eddc:	00058501 	andeq	r8, r5, r1, lsl #10
    ede0:	e0110000 	ands	r0, r1, r0
    ede4:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    ede8:	00300124 	eorseq	r0, r0, r4, lsr #2
    edec:	11040000 	mrsne	r0, (UNDEF: 4)
    edf0:	00003daf 	andeq	r3, r0, pc, lsr #27
    edf4:	8b012505 	blhi	58210 <_Min_Stack_Size+0x58010>
    edf8:	08000005 	stmdaeq	r0, {r0, r2}
    edfc:	50040f00 	andpl	r0, r4, r0, lsl #30
    ee00:	0f000005 	svceq	0x00000005
    ee04:	00054404 	andeq	r4, r5, r4, lsl #8
    ee08:	40961000 	addsmi	r1, r6, r0
    ee0c:	05180000 	ldreq	r0, [r8, #-0]
    ee10:	05d3013d 	ldrbeq	r0, [r3, #317]	; 0x13d
    ee14:	90110000 	andsls	r0, r1, r0
    ee18:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    ee1c:	05d3013e 	ldrbeq	r0, [r3, #318]	; 0x13e
    ee20:	11000000 	mrsne	r0, (UNDEF: 0)
    ee24:	00003f68 	andeq	r3, r0, r8, ror #30
    ee28:	d3013f05 	movwle	r3, #7941	; 0x1f05
    ee2c:	06000005 	streq	r0, [r0], -r5
    ee30:	003e5011 	eorseq	r5, lr, r1, lsl r0
    ee34:	01400500 	cmpeq	r0, r0, lsl #10
    ee38:	0000003e 	andeq	r0, r0, lr, lsr r0
    ee3c:	4100110c 	tstmi	r0, ip, lsl #2
    ee40:	43050000 	movwmi	r0, #20480	; 0x5000
    ee44:	00006f01 	andeq	r6, r0, r1, lsl #30
    ee48:	08001000 	stmdaeq	r0, {ip}
    ee4c:	0000003e 	andeq	r0, r0, lr, lsr r0
    ee50:	000005e3 	andeq	r0, r0, r3, ror #11
    ee54:	0000d209 	andeq	sp, r0, r9, lsl #4
    ee58:	10000200 	andne	r0, r0, r0, lsl #4
    ee5c:	00004020 	andeq	r4, r0, r0, lsr #32
    ee60:	01560510 	cmpeq	r6, r0, lsl r5
    ee64:	00000625 	andeq	r0, r0, r5, lsr #12
    ee68:	0040b611 	subeq	fp, r0, r1, lsl r6
    ee6c:	01590500 	cmpeq	r9, r0, lsl #10
    ee70:	00000170 	andeq	r0, r0, r0, ror r1
    ee74:	3e551100 	rdfccs	f1, f5, f0
    ee78:	5a050000 	bpl	14ee80 <_Min_Stack_Size+0x14ec80>
    ee7c:	00003001 	andeq	r3, r0, r1
    ee80:	f5110400 			; <UNDEFINED> instruction: 0xf5110400
    ee84:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    ee88:	0170015b 	cmneq	r0, fp, asr r1
    ee8c:	11080000 	mrsne	r0, (UNDEF: 8)
    ee90:	00003f37 	andeq	r3, r0, r7, lsr pc
    ee94:	25015c05 	strcs	r5, [r1, #-3077]	; 0xfffff3fb
    ee98:	0c000006 	stceq	0, cr0, [r0], {6}
    ee9c:	70040f00 	andvc	r0, r4, r0, lsl #30
    eea0:	10000001 	andne	r0, r0, r1
    eea4:	0000410b 	andeq	r4, r0, fp, lsl #2
    eea8:	01600550 	cmneq	r0, r0, asr r5
    eeac:	000006c8 	andeq	r0, r0, r8, asr #13
    eeb0:	003eb311 	eorseq	fp, lr, r1, lsl r3
    eeb4:	01630500 	cmneq	r3, r0, lsl #10
    eeb8:	000004a4 	andeq	r0, r0, r4, lsr #9
    eebc:	3dbd1100 	ldfccs	f1, [sp]
    eec0:	64050000 	strvs	r0, [r5], #-0
    eec4:	0000fa01 	andeq	pc, r0, r1, lsl #20
    eec8:	d9110400 	ldmdble	r1, {sl}
    eecc:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    eed0:	00fa0165 	rscseq	r0, sl, r5, ror #2
    eed4:	110c0000 	mrsne	r0, (UNDEF: 12)
    eed8:	0000402c 	andeq	r4, r0, ip, lsr #32
    eedc:	fa016605 	blx	686f8 <_Min_Stack_Size+0x684f8>
    eee0:	14000000 	strne	r0, [r0], #-0
    eee4:	003f9811 	eorseq	r9, pc, r1, lsl r8	; <UNPREDICTABLE>
    eee8:	01670500 	cmneq	r7, r0, lsl #10
    eeec:	000006c8 	andeq	r0, r0, r8, asr #13
    eef0:	3ef5111c 	mrccc	1, 7, r1, cr5, cr12, {0}
    eef4:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
    eef8:	00003001 	andeq	r3, r0, r1
    eefc:	41112400 	tstmi	r1, r0, lsl #8
    ef00:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    ef04:	00fa0169 	rscseq	r0, sl, r9, ror #2
    ef08:	11280000 			; <UNDEFINED> instruction: 0x11280000
    ef0c:	00003fe7 	andeq	r3, r0, r7, ror #31
    ef10:	fa016a05 	blx	6972c <_Min_Stack_Size+0x6952c>
    ef14:	30000000 	andcc	r0, r0, r0
    ef18:	003e9d11 	eorseq	r9, lr, r1, lsl sp
    ef1c:	016b0500 	cmneq	fp, r0, lsl #10
    ef20:	000000fa 	strdeq	r0, [r0], -sl
    ef24:	41271138 			; <UNDEFINED> instruction: 0x41271138
    ef28:	6c050000 	stcvs	0, cr0, [r5], {-0}
    ef2c:	0000fa01 	andeq	pc, r0, r1, lsl #20
    ef30:	d5114000 	ldrle	r4, [r1, #-0]
    ef34:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    ef38:	00fa016d 	rscseq	r0, sl, sp, ror #2
    ef3c:	00480000 	subeq	r0, r8, r0
    ef40:	0004aa08 	andeq	sl, r4, r8, lsl #20
    ef44:	0006d800 	andeq	sp, r6, r0, lsl #16
    ef48:	00d20900 	sbcseq	r0, r2, r0, lsl #18
    ef4c:	00070000 	andeq	r0, r7, r0
    ef50:	05e3040f 	strbeq	r0, [r3, #1039]!	; 0x40f
    ef54:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    ef58:	14000006 	strne	r0, [r0], #-6
    ef5c:	00000356 	andeq	r0, r0, r6, asr r3
    ef60:	de040f00 	cdple	15, 0, cr0, cr4, cr0, {0}
    ef64:	0f000006 	svceq	0x00000006
    ef68:	00059104 	andeq	r9, r5, r4, lsl #2
    ef6c:	86040f00 	strhi	r0, [r4], -r0, lsl #30
    ef70:	16000001 	strne	r0, [r0], -r1
    ef74:	00000706 	andeq	r0, r0, r6, lsl #14
    ef78:	00003014 	andeq	r3, r0, r4, lsl r0
    ef7c:	040f0000 	streq	r0, [pc], #-0	; ef84 <_Min_Stack_Size+0xed84>
    ef80:	0000070c 	andeq	r0, r0, ip, lsl #14
    ef84:	06fb040f 	ldrbteq	r0, [fp], pc, lsl #8
    ef88:	040f0000 	streq	r0, [pc], #-0	; ef90 <_Min_Stack_Size+0xed90>
    ef8c:	0000062b 	andeq	r0, r0, fp, lsr #12
    ef90:	0045cf17 	subeq	ip, r5, r7, lsl pc
    ef94:	109a0600 	addsne	r0, sl, r0, lsl #12
    ef98:	68000001 	stmdavs	r0, {r0}
    ef9c:	2008006f 	andcs	r0, r8, pc, rrx
    efa0:	01000000 	mrseq	r0, (UNDEF: 0)
    efa4:	0007839c 	muleq	r7, ip, r3
    efa8:	74701800 	ldrbtvc	r1, [r0], #-2048	; 0xfffff800
    efac:	32010072 	andcc	r0, r1, #114	; 0x72
    efb0:	00000356 	andeq	r0, r0, r6, asr r3
    efb4:	00001312 	andeq	r1, r0, r2, lsl r3
    efb8:	00484d19 	subeq	r4, r8, r9, lsl sp
    efbc:	25320100 	ldrcs	r0, [r2, #-256]!	; 0xffffff00
    efc0:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    efc4:	1a000013 	bne	f018 <_Min_Stack_Size+0xee18>
    efc8:	00746572 	rsbseq	r6, r4, r2, ror r5
    efcc:	04a43601 	strteq	r3, [r4], #1537	; 0x601
    efd0:	50010000 	andpl	r0, r1, r0
    efd4:	00487e1b 	subeq	r7, r8, fp, lsl lr
    efd8:	10370100 	eorsne	r0, r7, r0, lsl #2
    efdc:	71000001 	tstvc	r0, r1
    efe0:	14000007 	strne	r0, [r0], #-7
    efe4:	00000025 	andeq	r0, r0, r5, lsr #32
    efe8:	6f781c00 	svcvs	0x00781c00
    efec:	078e0800 	streq	r0, [lr, r0, lsl #16]
    eff0:	011d0000 	tsteq	sp, r0
    eff4:	01f30350 	mvnseq	r0, r0, asr r3
    eff8:	1e000051 	mcrne	0, 0, r0, cr0, cr1, {2}
    effc:	00003eef 	andeq	r3, r0, pc, ror #29
    f000:	00301801 	eorseq	r1, r0, r1, lsl #16
    f004:	7e1f0000 	cdpvc	0, 1, cr0, cr15, cr0, {0}
    f008:	01000048 	tsteq	r0, r8, asr #32
    f00c:	00011037 	andeq	r1, r1, r7, lsr r0
    f010:	00251400 	eoreq	r1, r5, r0, lsl #8
    f014:	00000000 	andeq	r0, r0, r0
    f018:	000000f4 	strdeq	r0, [r0], -r4
    f01c:	320e0004 	andcc	r0, lr, #4
    f020:	01040000 	mrseq	r0, (UNDEF: 4)
    f024:	00003ce0 	andeq	r3, r0, r0, ror #25
    f028:	00488401 	subeq	r8, r8, r1, lsl #8
    f02c:	003c2d00 	eorseq	r2, ip, r0, lsl #26
    f030:	000db000 	andeq	fp, sp, r0
    f034:	00000000 	andeq	r0, r0, r0
    f038:	00597500 	subseq	r7, r9, r0, lsl #10
    f03c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    f040:	00746e69 	rsbseq	r6, r4, r9, ror #28
    f044:	00450803 	subeq	r0, r5, r3, lsl #16
    f048:	37d40200 	ldrbcc	r0, [r4, r0, lsl #4]
    f04c:	04000000 	streq	r0, [r0], #-0
    f050:	00ff0704 	rscseq	r0, pc, r4, lsl #14
    f054:	02040000 	andeq	r0, r4, #0
    f058:	00012307 	andeq	r2, r1, r7, lsl #6
    f05c:	06010400 	streq	r0, [r1], -r0, lsl #8
    f060:	000000c3 	andeq	r0, r0, r3, asr #1
    f064:	c1080104 	tstgt	r8, r4, lsl #2
    f068:	04000000 	streq	r0, [r0], #-0
    f06c:	00510502 	subseq	r0, r1, r2, lsl #10
    f070:	04040000 	streq	r0, [r4], #-0
    f074:	00006d05 	andeq	r6, r0, r5, lsl #26
    f078:	07040400 	streq	r0, [r4, -r0, lsl #8]
    f07c:	000000fa 	strdeq	r0, [r0], -sl
    f080:	68050804 	stmdavs	r5, {r2, fp}
    f084:	04000000 	streq	r0, [r0], #-0
    f088:	00f50708 	rscseq	r0, r5, r8, lsl #14
    f08c:	04040000 	streq	r0, [r4], #-0
    f090:	00001507 	andeq	r1, r0, r7, lsl #10
    f094:	04040500 	streq	r0, [r4], #-1280	; 0xfffffb00
    f098:	00ca0801 	sbceq	r0, sl, r1, lsl #16
    f09c:	86060000 	strhi	r0, [r6], -r0
    f0a0:	03000046 	movweq	r0, #70	; 0x46
    f0a4:	00007d15 	andeq	r7, r0, r5, lsl sp
    f0a8:	006f8800 	rsbeq	r8, pc, r0, lsl #16
    f0ac:	00001c08 	andeq	r1, r0, r8, lsl #24
    f0b0:	e59c0100 	ldr	r0, [ip, #256]	; 0x100
    f0b4:	07000000 	streq	r0, [r0, -r0]
    f0b8:	000048b2 			; <UNDEFINED> instruction: 0x000048b2
    f0bc:	00e54801 	rsceq	r4, r5, r1, lsl #16
    f0c0:	135f0000 	cmpne	pc, #0
    f0c4:	63080000 	movwvs	r0, #32768	; 0x8000
    f0c8:	25480100 	strbcs	r0, [r8, #-256]	; 0xffffff00
    f0cc:	80000000 	andhi	r0, r0, r0
    f0d0:	07000013 	smladeq	r0, r3, r0, r0
    f0d4:	000039a4 	andeq	r3, r0, r4, lsr #19
    f0d8:	002c4801 	eoreq	r4, ip, r1, lsl #16
    f0dc:	13a10000 			; <UNDEFINED> instruction: 0x13a10000
    f0e0:	73090000 	movwvc	r0, #36864	; 0x9000
    f0e4:	01006372 	tsteq	r0, r2, ror r3
    f0e8:	0000ec4d 	andeq	lr, r0, sp, asr #24
    f0ec:	0013e000 	andseq	lr, r3, r0
    f0f0:	00640a00 	rsbeq	r0, r4, r0, lsl #20
    f0f4:	004c4e01 	subeq	r4, ip, r1, lsl #28
    f0f8:	51010000 	mrspl	r0, (UNDEF: 1)
    f0fc:	eb040b00 	bl	111d04 <_Min_Stack_Size+0x111b04>
    f100:	0c000000 	stceq	0, cr0, [r0], {-0}
    f104:	00f2040b 	rscseq	r0, r2, fp, lsl #8
    f108:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    f10c:	00000000 	andeq	r0, r0, r0
    f110:	000000fe 	strdeq	r0, [r0], -lr
    f114:	32b90004 	adcscc	r0, r9, #4
    f118:	01040000 	mrseq	r0, (UNDEF: 4)
    f11c:	00003ce0 	andeq	r3, r0, r0, ror #25
    f120:	0048bb01 	subeq	fp, r8, r1, lsl #22
    f124:	003c2d00 	eorseq	r2, ip, r0, lsl #26
    f128:	000dc000 	andeq	ip, sp, r0
    f12c:	00000000 	andeq	r0, r0, r0
    f130:	005a6500 	subseq	r6, sl, r0, lsl #10
    f134:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    f138:	00746e69 	rsbseq	r6, r4, r9, ror #28
    f13c:	00450803 	subeq	r0, r5, r3, lsl #16
    f140:	37d40200 	ldrbcc	r0, [r4, r0, lsl #4]
    f144:	04000000 	streq	r0, [r0], #-0
    f148:	00ff0704 	rscseq	r0, pc, r4, lsl #14
    f14c:	02040000 	andeq	r0, r4, #0
    f150:	00012307 	andeq	r2, r1, r7, lsl #6
    f154:	06010400 	streq	r0, [r1], -r0, lsl #8
    f158:	000000c3 	andeq	r0, r0, r3, asr #1
    f15c:	c1080104 	tstgt	r8, r4, lsl #2
    f160:	04000000 	streq	r0, [r0], #-0
    f164:	00510502 	subseq	r0, r1, r2, lsl #10
    f168:	04040000 	streq	r0, [r4], #-0
    f16c:	00006d05 	andeq	r6, r0, r5, lsl #26
    f170:	07040400 	streq	r0, [r4, -r0, lsl #8]
    f174:	000000fa 	strdeq	r0, [r0], -sl
    f178:	68050804 	stmdavs	r5, {r2, fp}
    f17c:	04000000 	streq	r0, [r0], #-0
    f180:	00f50708 	rscseq	r0, r5, r8, lsl #14
    f184:	04040000 	streq	r0, [r4], #-0
    f188:	00001507 	andeq	r1, r0, r7, lsl #10
    f18c:	06040500 	streq	r0, [r4], -r0, lsl #10
    f190:	00008504 	andeq	r8, r0, r4, lsl #10
    f194:	08010400 	stmdaeq	r1, {sl}
    f198:	000000ca 	andeq	r0, r0, sl, asr #1
    f19c:	00920406 	addseq	r0, r2, r6, lsl #8
    f1a0:	85070000 	strhi	r0, [r7, #-0]
    f1a4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f1a8:	0000460c 	andeq	r4, r0, ip, lsl #12
    f1ac:	007d1803 	rsbseq	r1, sp, r3, lsl #16
    f1b0:	6fa40000 	svcvs	0x00a40000
    f1b4:	00360800 	eorseq	r0, r6, r0, lsl #16
    f1b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    f1bc:	000000fa 	strdeq	r0, [r0], -sl
    f1c0:	0048ea09 	subeq	lr, r8, r9, lsl #20
    f1c4:	7d3c0100 	ldfvcs	f0, [ip, #-0]
    f1c8:	01000000 	mrseq	r0, (UNDEF: 0)
    f1cc:	48b20a50 	ldmmi	r2!, {r4, r6, r9, fp}
    f1d0:	3c010000 	stccc	0, cr0, [r1], {-0}
    f1d4:	000000fa 	strdeq	r0, [r0], -sl
    f1d8:	00001409 	andeq	r1, r0, r9, lsl #8
    f1dc:	0039a40a 	eorseq	sl, r9, sl, lsl #8
    f1e0:	2c3c0100 	ldfcss	f0, [ip], #-0
    f1e4:	2a000000 	bcs	f1ec <_Min_Stack_Size+0xefec>
    f1e8:	0b000014 	bleq	f240 <_Min_Stack_Size+0xf040>
    f1ec:	00747364 	rsbseq	r7, r4, r4, ror #6
    f1f0:	007f4201 	rsbseq	r4, pc, r1, lsl #4
    f1f4:	146b0000 	strbtne	r0, [fp], #-0
    f1f8:	730b0000 	movwvc	r0, #45056	; 0xb000
    f1fc:	01006372 	tsteq	r0, r2, ror r3
    f200:	00008c43 	andeq	r8, r0, r3, asr #24
    f204:	00148e00 	andseq	r8, r4, r0, lsl #28
    f208:	04060000 	streq	r0, [r6], #-0
    f20c:	00000100 	andeq	r0, r0, r0, lsl #2
    f210:	08b1000c 	ldmeq	r1!, {r2, r3}
    f214:	00040000 	andeq	r0, r4, r0
    f218:	00003355 	andeq	r3, r0, r5, asr r3
    f21c:	3ce00104 	stfcce	f0, [r0], #16
    f220:	0f010000 	svceq	0x00010000
    f224:	ca000045 	bgt	f340 <_Min_Stack_Size+0xf140>
    f228:	d000003d 	andle	r0, r0, sp, lsr r0
    f22c:	0000000d 	andeq	r0, r0, sp
    f230:	60000000 	andvs	r0, r0, r0
    f234:	0200005b 	andeq	r0, r0, #91	; 0x5b
    f238:	00c30601 	sbceq	r0, r3, r1, lsl #12
    f23c:	01020000 	mrseq	r0, (UNDEF: 2)
    f240:	0000c108 	andeq	ip, r0, r8, lsl #2
    f244:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    f248:	00000051 	andeq	r0, r0, r1, asr r0
    f24c:	23070202 	movwcs	r0, #29186	; 0x7202
    f250:	02000001 	andeq	r0, r0, #1
    f254:	006d0504 	rsbeq	r0, sp, r4, lsl #10
    f258:	04020000 	streq	r0, [r2], #-0
    f25c:	0000fa07 	andeq	pc, r0, r7, lsl #20
    f260:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    f264:	00000068 	andeq	r0, r0, r8, rrx
    f268:	f5070802 			; <UNDEFINED> instruction: 0xf5070802
    f26c:	03000000 	movweq	r0, #0
    f270:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    f274:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    f278:	0000ff07 	andeq	pc, r0, r7, lsl #30
    f27c:	45080400 	strmi	r0, [r8, #-1024]	; 0xfffffc00
    f280:	d4020000 	strle	r0, [r2], #-0
    f284:	00000064 	andeq	r0, r0, r4, rrx
    f288:	ce040405 	cdpgt	4, 0, cr0, cr4, cr5, {0}
    f28c:	0300003e 	movweq	r0, #62	; 0x3e
    f290:	00005d07 	andeq	r5, r0, r7, lsl #26
    f294:	3e340400 	cfabsscc	mvf0, mvf4
    f298:	10040000 	andne	r0, r4, r0
    f29c:	00000041 	andeq	r0, r0, r1, asr #32
    f2a0:	003f8904 	eorseq	r8, pc, r4, lsl #18
    f2a4:	41270400 			; <UNDEFINED> instruction: 0x41270400
    f2a8:	06000000 	streq	r0, [r0], -r0
    f2ac:	0000403a 	andeq	r4, r0, sl, lsr r0
    f2b0:	64016102 	strvs	r6, [r1], #-258	; 0xfffffefe
    f2b4:	07000000 	streq	r0, [r0, -r0]
    f2b8:	c44a0404 	strbgt	r0, [sl], #-1028	; 0xfffffbfc
    f2bc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f2c0:	00003e3b 	andeq	r3, r0, fp, lsr lr
    f2c4:	00994c04 	addseq	r4, r9, r4, lsl #24
    f2c8:	c4080000 	strgt	r0, [r8], #-0
    f2cc:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    f2d0:	0000c44d 	andeq	ip, r0, sp, asr #8
    f2d4:	2c090000 	stccs	0, cr0, [r9], {-0}
    f2d8:	d4000000 	strle	r0, [r0], #-0
    f2dc:	0a000000 	beq	f2e4 <_Min_Stack_Size+0xf0e4>
    f2e0:	000000d4 	ldrdeq	r0, [r0], -r4
    f2e4:	04020003 	streq	r0, [r2], #-3
    f2e8:	00001507 	andeq	r1, r0, r7, lsl #10
    f2ec:	04080b00 	streq	r0, [r8], #-2816	; 0xfffff500
    f2f0:	0000fc47 	andeq	pc, r0, r7, asr #24
    f2f4:	3e8b0c00 	cdpcc	12, 8, cr0, cr11, cr0, {0}
    f2f8:	49040000 	stmdbmi	r4, {}	; <UNPREDICTABLE>
    f2fc:	0000005d 	andeq	r0, r0, sp, asr r0
    f300:	3e410c00 	cdpcc	12, 4, cr0, cr1, cr0, {0}
    f304:	4e040000 	cdpmi	0, 0, cr0, cr4, cr0, {0}
    f308:	000000a5 	andeq	r0, r0, r5, lsr #1
    f30c:	6b040004 	blvs	10f324 <_Min_Stack_Size+0x10f124>
    f310:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    f314:	0000db4f 	andeq	sp, r0, pc, asr #22
    f318:	3fa20400 	svccc	0x00a20400
    f31c:	53040000 	movwpl	r0, #16384	; 0x4000
    f320:	00000078 	andeq	r0, r0, r8, ror r0
    f324:	0040a804 	subeq	sl, r0, r4, lsl #16
    f328:	48160500 	ldmdami	r6, {r8, sl}
    f32c:	0d000000 	stceq	0, cr0, [r0, #-0]
    f330:	00004076 	andeq	r4, r0, r6, ror r0
    f334:	702d0518 	eorvc	r0, sp, r8, lsl r5
    f338:	0c000001 	stceq	0, cr0, [r0], {1}
    f33c:	00004105 	andeq	r4, r0, r5, lsl #2
    f340:	01702f05 	cmneq	r0, r5, lsl #30
    f344:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    f348:	05006b5f 	streq	r6, [r0, #-2911]	; 0xfffff4a1
    f34c:	00005d30 	andeq	r5, r0, r0, lsr sp
    f350:	7e0c0400 	cfcpysvc	mvf0, mvf12
    f354:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    f358:	00005d30 	andeq	r5, r0, r0, lsr sp
    f35c:	fa0c0800 	blx	311364 <_Min_Stack_Size+0x311164>
    f360:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    f364:	00005d30 	andeq	r5, r0, r0, lsr sp
    f368:	1b0c0c00 	blne	312370 <_Min_Stack_Size+0x312170>
    f36c:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    f370:	00005d30 	andeq	r5, r0, r0, lsr sp
    f374:	5f0e1000 	svcpl	0x000e1000
    f378:	31050078 	tstcc	r5, r8, ror r0
    f37c:	00000176 	andeq	r0, r0, r6, ror r1
    f380:	040f0014 	streq	r0, [pc], #-20	; f388 <_Min_Stack_Size+0xf188>
    f384:	0000011d 	andeq	r0, r0, sp, lsl r1
    f388:	00011209 	andeq	r1, r1, r9, lsl #4
    f38c:	00018600 	andeq	r8, r1, r0, lsl #12
    f390:	00d40a00 	sbcseq	r0, r4, r0, lsl #20
    f394:	00000000 	andeq	r0, r0, r0
    f398:	0040270d 	subeq	r2, r0, sp, lsl #14
    f39c:	35052400 	strcc	r2, [r5, #-1024]	; 0xfffffc00
    f3a0:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    f3a4:	003fb10c 	eorseq	fp, pc, ip, lsl #2
    f3a8:	5d370500 	cfldr32pl	mvfx0, [r7, #-0]
    f3ac:	00000000 	andeq	r0, r0, r0
    f3b0:	003f020c 	eorseq	r0, pc, ip, lsl #4
    f3b4:	5d380500 	cfldr32pl	mvfx0, [r8, #-0]
    f3b8:	04000000 	streq	r0, [r0], #-0
    f3bc:	003fba0c 	eorseq	fp, pc, ip, lsl #20
    f3c0:	5d390500 	cfldr32pl	mvfx0, [r9, #-0]
    f3c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f3c8:	003e930c 	eorseq	r9, lr, ip, lsl #6
    f3cc:	5d3a0500 	cfldr32pl	mvfx0, [sl, #-0]
    f3d0:	0c000000 	stceq	0, cr0, [r0], {-0}
    f3d4:	0040be0c 	subeq	fp, r0, ip, lsl #28
    f3d8:	5d3b0500 	cfldr32pl	mvfx0, [fp, #-0]
    f3dc:	10000000 	andne	r0, r0, r0
    f3e0:	0040860c 	subeq	r8, r0, ip, lsl #12
    f3e4:	5d3c0500 	cfldr32pl	mvfx0, [ip, #-0]
    f3e8:	14000000 	strne	r0, [r0], #-0
    f3ec:	003f4a0c 	eorseq	r4, pc, ip, lsl #20
    f3f0:	5d3d0500 	cfldr32pl	mvfx0, [sp, #-0]
    f3f4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    f3f8:	00409e0c 	subeq	r9, r0, ip, lsl #28
    f3fc:	5d3e0500 	cfldr32pl	mvfx0, [lr, #-0]
    f400:	1c000000 	stcne	0, cr0, [r0], {-0}
    f404:	003f6e0c 	eorseq	r6, pc, ip, lsl #28
    f408:	5d3f0500 	cfldr32pl	mvfx0, [pc, #-0]	; f410 <_Min_Stack_Size+0xf210>
    f40c:	20000000 	andcs	r0, r0, r0
    f410:	3e490d00 	cdpcc	13, 4, cr0, cr9, cr0, {0}
    f414:	05080000 	streq	r0, [r8, #-0]
    f418:	00022473 	andeq	r2, r2, r3, ror r4
    f41c:	33a70c00 			; <UNDEFINED> instruction: 0x33a70c00
    f420:	74050000 	strvc	r0, [r5], #-0
    f424:	00000224 	andeq	r0, r0, r4, lsr #4
    f428:	45c90c00 	strbmi	r0, [r9, #3072]	; 0xc00
    f42c:	75050000 	strvc	r0, [r5, #-0]
    f430:	0000005d 	andeq	r0, r0, sp, asr r0
    f434:	040f0004 	streq	r0, [pc], #-4	; f43c <_Min_Stack_Size+0xf23c>
    f438:	0000002c 	andeq	r0, r0, ip, lsr #32
    f43c:	00411010 	subeq	r1, r1, r0, lsl r0
    f440:	72056000 	andvc	r6, r5, #0
    f444:	00035601 	andeq	r5, r3, r1, lsl #12
    f448:	3eee1100 	cdpcc	1, 14, cr1, cr14, cr0, {0}
    f44c:	76050000 	strvc	r0, [r5], -r0
    f450:	00005d01 	andeq	r5, r0, r1, lsl #26
    f454:	50110000 	andspl	r0, r1, r0
    f458:	05000044 	streq	r0, [r0, #-68]	; 0xffffffbc
    f45c:	058b017b 	streq	r0, [fp, #379]	; 0x17b
    f460:	11040000 	mrsne	r0, (UNDEF: 4)
    f464:	000044a0 	andeq	r4, r0, r0, lsr #9
    f468:	8b017b05 	blhi	6e084 <_Min_Stack_Size+0x6de84>
    f46c:	08000005 	stmdaeq	r0, {r0, r2}
    f470:	0043d611 	subeq	sp, r3, r1, lsl r6
    f474:	017b0500 	cmneq	fp, r0, lsl #10
    f478:	0000058b 	andeq	r0, r0, fp, lsl #11
    f47c:	40d0110c 	sbcsmi	r1, r0, ip, lsl #2
    f480:	7d050000 	stcvc	0, cr0, [r5, #-0]
    f484:	00005d01 	andeq	r5, r0, r1, lsl #26
    f488:	36111000 	ldrcc	r1, [r1], -r0
    f48c:	05000041 	streq	r0, [r0, #-65]	; 0xffffffbf
    f490:	04a4017f 	strteq	r0, [r4], #383	; 0x17f
    f494:	11140000 	tstne	r4, r0
    f498:	00003f7e 	andeq	r3, r0, lr, ror pc
    f49c:	5d018105 	stfpld	f0, [r1, #-20]	; 0xffffffec
    f4a0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    f4a4:	00404f11 	subeq	r4, r0, r1, lsl pc
    f4a8:	01830500 	orreq	r0, r3, r0, lsl #10
    f4ac:	0000005d 	andeq	r0, r0, sp, asr r0
    f4b0:	4117111c 	tstmi	r7, ip, lsl r1
    f4b4:	84050000 	strhi	r0, [r5], #-0
    f4b8:	0004d501 	andeq	sp, r4, r1, lsl #10
    f4bc:	5f122000 	svcpl	0x00122000
    f4c0:	0500706d 	streq	r7, [r0, #-109]	; 0xffffff93
    f4c4:	06d80186 	ldrbeq	r0, [r8], r6, lsl #3
    f4c8:	11240000 			; <UNDEFINED> instruction: 0x11240000
    f4cc:	00004061 	andeq	r4, r0, r1, rrx
    f4d0:	e9018805 	stmdb	r1, {r0, r2, fp, pc}
    f4d4:	28000006 	stmdacs	r0, {r1, r2}
    f4d8:	00400c11 	subeq	r0, r0, r1, lsl ip
    f4dc:	018a0500 	orreq	r0, sl, r0, lsl #10
    f4e0:	0000005d 	andeq	r0, r0, sp, asr r0
    f4e4:	3ec0112c 	polccsp	f1, f0, #4.0
    f4e8:	8d050000 	stchi	0, cr0, [r5, #-0]
    f4ec:	00005d01 	andeq	r5, r0, r1, lsl #26
    f4f0:	f6113000 			; <UNDEFINED> instruction: 0xf6113000
    f4f4:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    f4f8:	04a4018e 	strteq	r0, [r4], #398	; 0x18e
    f4fc:	11340000 	teqne	r4, r0
    f500:	00003eae 	andeq	r3, r0, lr, lsr #29
    f504:	ef019005 	svc	0x00019005
    f508:	38000006 	stmdacc	r0, {r1, r2}
    f50c:	003e7c11 	eorseq	r7, lr, r1, lsl ip
    f510:	01910500 	orrseq	r0, r1, r0, lsl #10
    f514:	000006f5 	strdeq	r0, [r0], -r5
    f518:	3f54113c 	svccc	0x0054113c
    f51c:	92050000 	andls	r0, r5, #0
    f520:	0004a401 	andeq	sl, r4, r1, lsl #8
    f524:	6b114000 	blvs	45f52c <_Min_Stack_Size+0x45f32c>
    f528:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    f52c:	07060195 			; <UNDEFINED> instruction: 0x07060195
    f530:	11440000 	mrsne	r0, (UNDEF: 68)
    f534:	00003fd1 	ldrdeq	r3, [r0], -r1
    f538:	50019d05 	andpl	r9, r1, r5, lsl #26
    f53c:	48000005 	stmdami	r0, {r0, r2}
    f540:	003f7911 	eorseq	r7, pc, r1, lsl r9	; <UNPREDICTABLE>
    f544:	019e0500 	orrseq	r0, lr, r0, lsl #10
    f548:	0000058b 	andeq	r0, r0, fp, lsl #11
    f54c:	3fcb1154 	svccc	0x00cb1154
    f550:	9f050000 	svcls	0x00050000
    f554:	00071201 	andeq	r1, r7, r1, lsl #4
    f558:	5f115800 	svcpl	0x00115800
    f55c:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    f560:	04a401a0 	strteq	r0, [r4], #416	; 0x1a0
    f564:	005c0000 	subseq	r0, ip, r0
    f568:	022a040f 	eoreq	r0, sl, #251658240	; 0xf000000
    f56c:	410d0000 	mrsmi	r0, (UNDEF: 13)
    f570:	68000041 	stmdavs	r0, {r0, r6}
    f574:	0486b305 	streq	fp, [r6], #773	; 0x305
    f578:	5f0e0000 	svcpl	0x000e0000
    f57c:	b4050070 	strlt	r0, [r5], #-112	; 0xffffff90
    f580:	00000224 	andeq	r0, r0, r4, lsr #4
    f584:	725f0e00 	subsvc	r0, pc, #0, 28
    f588:	5db50500 	cfldr32pl	mvfx0, [r5]
    f58c:	04000000 	streq	r0, [r0], #-0
    f590:	00775f0e 	rsbseq	r5, r7, lr, lsl #30
    f594:	005db605 	subseq	fp, sp, r5, lsl #12
    f598:	0c080000 	stceq	0, cr0, [r8], {-0}
    f59c:	00003e75 	andeq	r3, r0, r5, ror lr
    f5a0:	0033b705 	eorseq	fp, r3, r5, lsl #14
    f5a4:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    f5a8:	00004006 	andeq	r4, r0, r6
    f5ac:	0033b805 	eorseq	fp, r3, r5, lsl #16
    f5b0:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
    f5b4:	0066625f 	rsbeq	r6, r6, pc, asr r2
    f5b8:	01ffb905 	mvnseq	fp, r5, lsl #18
    f5bc:	0c100000 	ldceq	0, cr0, [r0], {-0}
    f5c0:	000040e6 	andeq	r4, r0, r6, ror #1
    f5c4:	005dba05 	subseq	fp, sp, r5, lsl #20
    f5c8:	0c180000 	ldceq	0, cr0, [r8], {-0}
    f5cc:	00000df8 	strdeq	r0, [r0], -r8
    f5d0:	0356bd05 	cmpeq	r6, #320	; 0x140
    f5d4:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    f5d8:	00003ffe 	strdeq	r3, [r0], -lr
    f5dc:	0076c105 	rsbseq	ip, r6, r5, lsl #2
    f5e0:	0c200000 	stceq	0, cr0, [r0], #-0
    f5e4:	000039cd 	andeq	r3, r0, sp, asr #19
    f5e8:	04b1c305 	ldrteq	ip, [r1], #773	; 0x305
    f5ec:	0c240000 	stceq	0, cr0, [r4], #-0
    f5f0:	0000395b 	andeq	r3, r0, fp, asr r9
    f5f4:	04e0c505 	strbteq	ip, [r0], #1285	; 0x505
    f5f8:	0c280000 	stceq	0, cr0, [r8], #-0
    f5fc:	000040b0 	strheq	r4, [r0], -r0
    f600:	0504c805 	streq	ip, [r4, #-2053]	; 0xfffff7fb
    f604:	0c2c0000 	stceq	0, cr0, [ip], #-0
    f608:	00003f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    f60c:	051ec905 	ldreq	ip, [lr, #-2309]	; 0xfffff6fb
    f610:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    f614:	0062755f 	rsbeq	r7, r2, pc, asr r5
    f618:	01ffcc05 	mvnseq	ip, r5, lsl #24
    f61c:	0e340000 	cdpeq	0, 3, cr0, cr4, cr0, {0}
    f620:	0070755f 	rsbseq	r7, r0, pc, asr r5
    f624:	0224cd05 	eoreq	ip, r4, #320	; 0x140
    f628:	0e3c0000 	cdpeq	0, 3, cr0, cr12, cr0, {0}
    f62c:	0072755f 	rsbseq	r7, r2, pc, asr r5
    f630:	005dce05 	subseq	ip, sp, r5, lsl #28
    f634:	0c400000 	mareq	acc0, r0, r0
    f638:	00003fab 	andeq	r3, r0, fp, lsr #31
    f63c:	0524d105 	streq	sp, [r4, #-261]!	; 0xfffffefb
    f640:	0c440000 	mareq	acc0, r0, r4
    f644:	00003ec8 	andeq	r3, r0, r8, asr #29
    f648:	0534d205 	ldreq	sp, [r4, #-517]!	; 0xfffffdfb
    f64c:	0e470000 	cdpeq	0, 4, cr0, cr7, cr0, {0}
    f650:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    f654:	01ffd505 	mvnseq	sp, r5, lsl #10
    f658:	0c480000 	mareq	acc0, r0, r8
    f65c:	000040c7 	andeq	r4, r0, r7, asr #1
    f660:	005dd805 	subseq	sp, sp, r5, lsl #16
    f664:	0c500000 	mraeq	r0, r0, acc0
    f668:	00004975 	andeq	r4, r0, r5, ror r9
    f66c:	0083d905 	addeq	sp, r3, r5, lsl #18
    f670:	0c540000 	mraeq	r0, r4, acc0
    f674:	00003540 	andeq	r3, r0, r0, asr #10
    f678:	0107e005 	tsteq	r7, r5
    f67c:	0c580000 	mraeq	r0, r8, acc0
    f680:	00003f41 	andeq	r3, r0, r1, asr #30
    f684:	00fce205 	rscseq	lr, ip, r5, lsl #4
    f688:	0c5c0000 	mraeq	r0, ip, acc0
    f68c:	00003db5 			; <UNDEFINED> instruction: 0x00003db5
    f690:	005de305 	subseq	lr, sp, r5, lsl #6
    f694:	00640000 	rsbeq	r0, r4, r0
    f698:	00005d13 	andeq	r5, r0, r3, lsl sp
    f69c:	0004a400 	andeq	sl, r4, r0, lsl #8
    f6a0:	03561400 	cmpeq	r6, #0, 8
    f6a4:	76140000 	ldrvc	r0, [r4], -r0
    f6a8:	14000000 	strne	r0, [r0], #-0
    f6ac:	000004a4 	andeq	r0, r0, r4, lsr #9
    f6b0:	00005d14 	andeq	r5, r0, r4, lsl sp
    f6b4:	040f0000 	streq	r0, [pc], #-0	; f6bc <_Min_Stack_Size+0xf4bc>
    f6b8:	000004aa 	andeq	r0, r0, sl, lsr #9
    f6bc:	ca080102 	bgt	20facc <_Min_Stack_Size+0x20f8cc>
    f6c0:	0f000000 	svceq	0x00000000
    f6c4:	00048604 	andeq	r8, r4, r4, lsl #12
    f6c8:	005d1300 	subseq	r1, sp, r0, lsl #6
    f6cc:	04d50000 	ldrbeq	r0, [r5], #0
    f6d0:	56140000 	ldrpl	r0, [r4], -r0
    f6d4:	14000003 	strne	r0, [r0], #-3
    f6d8:	00000076 	andeq	r0, r0, r6, ror r0
    f6dc:	0004d514 	andeq	sp, r4, r4, lsl r5
    f6e0:	005d1400 	subseq	r1, sp, r0, lsl #8
    f6e4:	0f000000 	svceq	0x00000000
    f6e8:	0004db04 	andeq	sp, r4, r4, lsl #22
    f6ec:	04aa1500 	strteq	r1, [sl], #1280	; 0x500
    f6f0:	040f0000 	streq	r0, [pc], #-0	; f6f8 <_Min_Stack_Size+0xf4f8>
    f6f4:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    f6f8:	00008e13 	andeq	r8, r0, r3, lsl lr
    f6fc:	00050400 	andeq	r0, r5, r0, lsl #8
    f700:	03561400 	cmpeq	r6, #0, 8
    f704:	76140000 	ldrvc	r0, [r4], -r0
    f708:	14000000 	strne	r0, [r0], #-0
    f70c:	0000008e 	andeq	r0, r0, lr, lsl #1
    f710:	00005d14 	andeq	r5, r0, r4, lsl sp
    f714:	040f0000 	streq	r0, [pc], #-0	; f71c <_Min_Stack_Size+0xf51c>
    f718:	000004e6 	andeq	r0, r0, r6, ror #9
    f71c:	00005d13 	andeq	r5, r0, r3, lsl sp
    f720:	00051e00 	andeq	r1, r5, r0, lsl #28
    f724:	03561400 	cmpeq	r6, #0, 8
    f728:	76140000 	ldrvc	r0, [r4], -r0
    f72c:	00000000 	andeq	r0, r0, r0
    f730:	050a040f 	streq	r0, [sl, #-1039]	; 0xfffffbf1
    f734:	2c090000 	stccs	0, cr0, [r9], {-0}
    f738:	34000000 	strcc	r0, [r0], #-0
    f73c:	0a000005 	beq	f758 <_Min_Stack_Size+0xf558>
    f740:	000000d4 	ldrdeq	r0, [r0], -r4
    f744:	2c090002 	stccs	0, cr0, [r9], {2}
    f748:	44000000 	strmi	r0, [r0], #-0
    f74c:	0a000005 	beq	f768 <_Min_Stack_Size+0xf568>
    f750:	000000d4 	ldrdeq	r0, [r0], -r4
    f754:	e7060000 	str	r0, [r6, -r0]
    f758:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    f75c:	035c011d 	cmpeq	ip, #1073741831	; 0x40000007
    f760:	25100000 	ldrcs	r0, [r0, #-0]
    f764:	0c000049 	stceq	0, cr0, [r0], {73}	; 0x49
    f768:	85012105 	strhi	r2, [r1, #-261]	; 0xfffffefb
    f76c:	11000005 	tstne	r0, r5
    f770:	00004105 	andeq	r4, r0, r5, lsl #2
    f774:	85012305 	strhi	r2, [r1, #-773]	; 0xfffffcfb
    f778:	00000005 	andeq	r0, r0, r5
    f77c:	003ee011 	eorseq	lr, lr, r1, lsl r0
    f780:	01240500 			; <UNDEFINED> instruction: 0x01240500
    f784:	0000005d 	andeq	r0, r0, sp, asr r0
    f788:	3daf1104 	stfccs	f1, [pc, #16]!	; f7a0 <_Min_Stack_Size+0xf5a0>
    f78c:	25050000 	strcs	r0, [r5, #-0]
    f790:	00058b01 	andeq	r8, r5, r1, lsl #22
    f794:	0f000800 	svceq	0x00000800
    f798:	00055004 	andeq	r5, r5, r4
    f79c:	44040f00 	strmi	r0, [r4], #-3840	; 0xfffff100
    f7a0:	10000005 	andne	r0, r0, r5
    f7a4:	00004096 	muleq	r0, r6, r0
    f7a8:	013d0518 	teqeq	sp, r8, lsl r5
    f7ac:	000005d3 	ldrdeq	r0, [r0], -r3
    f7b0:	00409011 	subeq	r9, r0, r1, lsl r0
    f7b4:	013e0500 	teqeq	lr, r0, lsl #10
    f7b8:	000005d3 	ldrdeq	r0, [r0], -r3
    f7bc:	3f681100 	svccc	0x00681100
    f7c0:	3f050000 	svccc	0x00050000
    f7c4:	0005d301 	andeq	sp, r5, r1, lsl #6
    f7c8:	50110600 	andspl	r0, r1, r0, lsl #12
    f7cc:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    f7d0:	003a0140 	eorseq	r0, sl, r0, asr #2
    f7d4:	110c0000 	mrsne	r0, (UNDEF: 12)
    f7d8:	00004100 	andeq	r4, r0, r0, lsl #2
    f7dc:	56014305 	strpl	r4, [r1], -r5, lsl #6
    f7e0:	10000000 	andne	r0, r0, r0
    f7e4:	003a0900 	eorseq	r0, sl, r0, lsl #18
    f7e8:	05e30000 	strbeq	r0, [r3, #0]!
    f7ec:	d40a0000 	strle	r0, [sl], #-0
    f7f0:	02000000 	andeq	r0, r0, #0
    f7f4:	40201000 	eormi	r1, r0, r0
    f7f8:	05100000 	ldreq	r0, [r0, #-0]
    f7fc:	06250156 			; <UNDEFINED> instruction: 0x06250156
    f800:	b6110000 	ldrlt	r0, [r1], -r0
    f804:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    f808:	01700159 	cmneq	r0, r9, asr r1
    f80c:	11000000 	mrsne	r0, (UNDEF: 0)
    f810:	00003e55 	andeq	r3, r0, r5, asr lr
    f814:	5d015a05 	vstrpl	s10, [r1, #-20]	; 0xffffffec
    f818:	04000000 	streq	r0, [r0], #-0
    f81c:	0040f511 	subeq	pc, r0, r1, lsl r5	; <UNPREDICTABLE>
    f820:	015b0500 	cmpeq	fp, r0, lsl #10
    f824:	00000170 	andeq	r0, r0, r0, ror r1
    f828:	3f371108 	svccc	0x00371108
    f82c:	5c050000 	stcpl	0, cr0, [r5], {-0}
    f830:	00062501 	andeq	r2, r6, r1, lsl #10
    f834:	0f000c00 	svceq	0x00000c00
    f838:	00017004 	andeq	r7, r1, r4
    f83c:	410b1000 	mrsmi	r1, (UNDEF: 11)
    f840:	05500000 	ldrbeq	r0, [r0, #-0]
    f844:	06c80160 	strbeq	r0, [r8], r0, ror #2
    f848:	b3110000 	tstlt	r1, #0
    f84c:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    f850:	04a40163 	strteq	r0, [r4], #355	; 0x163
    f854:	11000000 	mrsne	r0, (UNDEF: 0)
    f858:	00003dbd 			; <UNDEFINED> instruction: 0x00003dbd
    f85c:	fc016405 	stc2	4, cr6, [r1], {5}
    f860:	04000000 	streq	r0, [r0], #-0
    f864:	003fd911 	eorseq	sp, pc, r1, lsl r9	; <UNPREDICTABLE>
    f868:	01650500 	cmneq	r5, r0, lsl #10
    f86c:	000000fc 	strdeq	r0, [r0], -ip
    f870:	402c110c 	eormi	r1, ip, ip, lsl #2
    f874:	66050000 	strvs	r0, [r5], -r0
    f878:	0000fc01 	andeq	pc, r0, r1, lsl #24
    f87c:	98111400 	ldmdals	r1, {sl, ip}
    f880:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    f884:	06c80167 	strbeq	r0, [r8], r7, ror #2
    f888:	111c0000 	tstne	ip, r0
    f88c:	00003ef5 	strdeq	r3, [r0], -r5
    f890:	5d016805 	stcpl	8, cr6, [r1, #-20]	; 0xffffffec
    f894:	24000000 	strcs	r0, [r0], #-0
    f898:	00404111 	subeq	r4, r0, r1, lsl r1
    f89c:	01690500 	cmneq	r9, r0, lsl #10
    f8a0:	000000fc 	strdeq	r0, [r0], -ip
    f8a4:	3fe71128 	svccc	0x00e71128
    f8a8:	6a050000 	bvs	14f8b0 <_Min_Stack_Size+0x14f6b0>
    f8ac:	0000fc01 	andeq	pc, r0, r1, lsl #24
    f8b0:	9d113000 	ldcls	0, cr3, [r1, #-0]
    f8b4:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    f8b8:	00fc016b 	rscseq	r0, ip, fp, ror #2
    f8bc:	11380000 	teqne	r8, r0
    f8c0:	00004127 	andeq	r4, r0, r7, lsr #2
    f8c4:	fc016c05 	stc2	12, cr6, [r1], {5}
    f8c8:	40000000 	andmi	r0, r0, r0
    f8cc:	0040d511 	subeq	sp, r0, r1, lsl r5
    f8d0:	016d0500 	cmneq	sp, r0, lsl #10
    f8d4:	000000fc 	strdeq	r0, [r0], -ip
    f8d8:	aa090048 	bge	24fa00 <_Min_Stack_Size+0x24f800>
    f8dc:	d8000004 	stmdale	r0, {r2}
    f8e0:	0a000006 	beq	f900 <_Min_Stack_Size+0xf700>
    f8e4:	000000d4 	ldrdeq	r0, [r0], -r4
    f8e8:	040f0007 	streq	r0, [pc], #-7	; f8f0 <_Min_Stack_Size+0xf6f0>
    f8ec:	000005e3 	andeq	r0, r0, r3, ror #11
    f8f0:	0006e916 	andeq	lr, r6, r6, lsl r9
    f8f4:	03561400 	cmpeq	r6, #0, 8
    f8f8:	0f000000 	svceq	0x00000000
    f8fc:	0006de04 	andeq	sp, r6, r4, lsl #28
    f900:	91040f00 	tstls	r4, r0, lsl #30
    f904:	0f000005 	svceq	0x00000005
    f908:	00018604 	andeq	r8, r1, r4, lsl #12
    f90c:	07061600 	streq	r1, [r6, -r0, lsl #12]
    f910:	5d140000 	ldcpl	0, cr0, [r4, #-0]
    f914:	00000000 	andeq	r0, r0, r0
    f918:	070c040f 	streq	r0, [ip, -pc, lsl #8]
    f91c:	040f0000 	streq	r0, [pc], #-0	; f924 <_Min_Stack_Size+0xf724>
    f920:	000006fb 	strdeq	r0, [r0], -fp
    f924:	062b040f 	strteq	r0, [fp], -pc, lsl #8
    f928:	01040000 	mrseq	r0, (UNDEF: 4)
    f92c:	01000045 	tsteq	r0, r5, asr #32
    f930:	00006b79 	andeq	r6, r0, r9, ror fp
    f934:	45540d00 	ldrbmi	r0, [r4, #-3328]	; 0xfffff300
    f938:	01080000 	mrseq	r0, (UNDEF: 8)
    f93c:	0007487b 	andeq	r4, r7, fp, ror r8
    f940:	45ca0c00 	strbmi	r0, [sl, #3072]	; 0xc00
    f944:	8d010000 	stchi	0, cr0, [r1, #-0]
    f948:	00000041 	andeq	r0, r0, r1, asr #32
    f94c:	41060c00 	tstmi	r6, r0, lsl #24
    f950:	90010000 	andls	r0, r1, r0
    f954:	00000748 	andeq	r0, r0, r8, asr #14
    f958:	040f0004 	streq	r0, [pc], #-4	; f960 <_Min_Stack_Size+0xf760>
    f95c:	00000723 	andeq	r0, r0, r3, lsr #14
    f960:	00455b04 	subeq	r5, r5, r4, lsl #22
    f964:	23910100 	orrscs	r0, r1, #0, 2
    f968:	17000007 	strne	r0, [r0, -r7]
    f96c:	00004782 	andeq	r4, r0, r2, lsl #15
    f970:	7601bf01 	strvc	fp, [r1], -r1, lsl #30
    f974:	da000000 	ble	f97c <_Min_Stack_Size+0xf77c>
    f978:	4c08006f 	stcmi	0, cr0, [r8], {111}	; 0x6f
    f97c:	01000000 	mrseq	r0, (UNDEF: 0)
    f980:	00083e9c 	muleq	r8, ip, lr
    f984:	45611800 	strbmi	r1, [r1, #-2048]!	; 0xfffff800
    f988:	bf010000 	svclt	0x00010000
    f98c:	00035601 	andeq	r5, r3, r1, lsl #12
    f990:	0014e700 	andseq	lr, r4, r0, lsl #14
    f994:	74701900 	ldrbtvc	r1, [r0], #-2304	; 0xfffff700
    f998:	bf010072 	svclt	0x00010072
    f99c:	00007601 	andeq	r7, r0, r1, lsl #12
    f9a0:	00153400 	andseq	r3, r5, r0, lsl #8
    f9a4:	45ca1800 	strbmi	r1, [sl, #2048]	; 0x800
    f9a8:	bf010000 	svclt	0x00010000
    f9ac:	00071801 	andeq	r1, r7, r1, lsl #16
    f9b0:	00158c00 	andseq	r8, r5, r0, lsl #24
    f9b4:	656d1a00 	strbvs	r1, [sp, #-2560]!	; 0xfffff600
    f9b8:	c101006d 	tstgt	r1, sp, rrx
    f9bc:	00007601 	andeq	r7, r0, r1, lsl #12
    f9c0:	0015d900 	andseq	sp, r5, r0, lsl #18
    f9c4:	48f31b00 	ldmmi	r3!, {r8, r9, fp, ip}^
    f9c8:	c2010000 	andgt	r0, r1, #0
    f9cc:	00083e01 	andeq	r3, r8, r1, lsl #28
    f9d0:	6fee1c00 	svcvs	0x00ee1c00
    f9d4:	08440800 	stmdaeq	r4, {fp}^
    f9d8:	07db0000 	ldrbeq	r0, [fp, r0]
    f9dc:	011d0000 	tsteq	sp, r0
    f9e0:	01f30351 	mvnseq	r0, r1, asr r3
    f9e4:	50011d52 	andpl	r1, r1, r2, asr sp
    f9e8:	5001f303 	andpl	pc, r1, r3, lsl #6
    f9ec:	6ff41e00 	svcvs	0x00f41e00
    f9f0:	085e0800 	ldmdaeq	lr, {fp}^
    f9f4:	fc1e0000 	ldc2	0, cr0, [lr], {-0}
    f9f8:	7408006f 	strvc	r0, [r8], #-111	; 0xffffff91
    f9fc:	1f000008 	svcne	0x00000008
    fa00:	08007008 	stmdaeq	r0, {r3, ip, sp, lr}
    fa04:	00000844 	andeq	r0, r0, r4, asr #16
    fa08:	00000807 	andeq	r0, r0, r7, lsl #16
    fa0c:	0251011d 	subseq	r0, r1, #1073741831	; 0x40000007
    fa10:	011d0075 	tsteq	sp, r5, ror r0
    fa14:	00770250 	rsbseq	r0, r7, r0, asr r2
    fa18:	70141f00 	andsvc	r1, r4, r0, lsl #30
    fa1c:	088e0800 	stmeq	lr, {fp}
    fa20:	08270000 	stmdaeq	r7!, {}	; <UNPREDICTABLE>
    fa24:	011d0000 	tsteq	sp, r0
    fa28:	00750252 	rsbseq	r0, r5, r2, asr r2
    fa2c:	0251011d 	subseq	r0, r1, #1073741831	; 0x40000007
    fa30:	011d0076 	tsteq	sp, r6, ror r0
    fa34:	00740250 	rsbseq	r0, r4, r0, asr r2
    fa38:	701c2000 	andsvc	r2, ip, r0
    fa3c:	085e0800 	ldmdaeq	lr, {fp}^
    fa40:	011d0000 	tsteq	sp, r0
    fa44:	00760251 	rsbseq	r0, r6, r1, asr r2
    fa48:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    fa4c:	00000077 	andeq	r0, r0, r7, ror r0
    fa50:	074e040f 	strbeq	r0, [lr, -pc, lsl #8]
    fa54:	f7210000 			; <UNDEFINED> instruction: 0xf7210000
    fa58:	01000044 	tsteq	r0, r4, asr #32
    fa5c:	000076ae 	andeq	r7, r0, lr, lsr #13
    fa60:	00085e00 	andeq	r5, r8, r0, lsl #28
    fa64:	03561400 	cmpeq	r6, #0, 8
    fa68:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
    fa6c:	00000007 	andeq	r0, r0, r7
    fa70:	0044ef22 	subeq	lr, r4, r2, lsr #30
    fa74:	74af0100 	strtvc	r0, [pc], #256	; fa7c <_Min_Stack_Size+0xf87c>
    fa78:	14000008 	strne	r0, [r0], #-8
    fa7c:	00000356 	andeq	r0, r0, r6, asr r3
    fa80:	00007614 	andeq	r7, r0, r4, lsl r6
    fa84:	00210000 	eoreq	r0, r1, r0
    fa88:	01000049 	tsteq	r0, r9, asr #32
    fa8c:	000718b4 			; <UNDEFINED> instruction: 0x000718b4
    fa90:	00088e00 	andeq	r8, r8, r0, lsl #28
    fa94:	03561400 	cmpeq	r6, #0, 8
    fa98:	76140000 	ldrvc	r0, [r4], -r0
    fa9c:	00000000 	andeq	r0, r0, r0
    faa0:	003ca121 	eorseq	sl, ip, r1, lsr #2
    faa4:	76170600 	ldrvc	r0, [r7], -r0, lsl #12
    faa8:	ad000000 	stcge	0, cr0, [r0, #-0]
    faac:	14000008 	strne	r0, [r0], #-8
    fab0:	00000076 	andeq	r0, r0, r6, ror r0
    fab4:	0008ad14 	andeq	sl, r8, r4, lsl sp
    fab8:	006b1400 	rsbeq	r1, fp, r0, lsl #8
    fabc:	0f000000 	svceq	0x00000000
    fac0:	0008b304 	andeq	fp, r8, r4, lsl #6
    fac4:	f7002300 			; <UNDEFINED> instruction: 0xf7002300
    fac8:	04000008 	streq	r0, [r0], #-8
    facc:	00352000 	eorseq	r2, r5, r0
    fad0:	e0010400 	and	r0, r1, r0, lsl #8
    fad4:	0100003c 	tsteq	r0, ip, lsr r0
    fad8:	0000492b 	andeq	r4, r0, fp, lsr #18
    fadc:	000043de 	ldrdeq	r4, [r0], -lr
    fae0:	00000de0 	andeq	r0, r0, r0, ror #27
    fae4:	00000000 	andeq	r0, r0, r0
    fae8:	00005cde 	ldrdeq	r5, [r0], -lr
    faec:	ff070402 			; <UNDEFINED> instruction: 0xff070402
    faf0:	02000000 	andeq	r0, r0, #0
    faf4:	01230702 			; <UNDEFINED> instruction: 0x01230702
    faf8:	04030000 	streq	r0, [r3], #-0
    fafc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    fb00:	06010200 	streq	r0, [r1], -r0, lsl #4
    fb04:	000000c3 	andeq	r0, r0, r3, asr #1
    fb08:	c1080102 	tstgt	r8, r2, lsl #2
    fb0c:	02000000 	andeq	r0, r0, #0
    fb10:	00510502 	subseq	r0, r1, r2, lsl #10
    fb14:	04020000 	streq	r0, [r2], #-0
    fb18:	00006d05 	andeq	r6, r0, r5, lsl #26
    fb1c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    fb20:	000000fa 	strdeq	r0, [r0], -sl
    fb24:	68050802 	stmdavs	r5, {r1, fp}
    fb28:	02000000 	andeq	r0, r0, #0
    fb2c:	00f50708 	rscseq	r0, r5, r8, lsl #14
    fb30:	ce040000 	cdpgt	0, 0, cr0, cr4, cr0, {0}
    fb34:	0200003e 	andeq	r0, r0, #62	; 0x3e
    fb38:	00003307 	andeq	r3, r0, r7, lsl #6
    fb3c:	3e340400 	cfabsscc	mvf0, mvf4
    fb40:	10030000 	andne	r0, r3, r0
    fb44:	0000004f 	andeq	r0, r0, pc, asr #32
    fb48:	003f8904 	eorseq	r8, pc, r4, lsl #18
    fb4c:	4f270300 	svcmi	0x00270300
    fb50:	05000000 	streq	r0, [r0, #-0]
    fb54:	0000403a 	andeq	r4, r0, sl, lsr r0
    fb58:	25016104 	strcs	r6, [r1, #-260]	; 0xfffffefc
    fb5c:	06000000 	streq	r0, [r0], -r0
    fb60:	b74a0304 	strblt	r0, [sl, -r4, lsl #6]
    fb64:	07000000 	streq	r0, [r0, -r0]
    fb68:	00003e3b 	andeq	r3, r0, fp, lsr lr
    fb6c:	008c4c03 	addeq	r4, ip, r3, lsl #24
    fb70:	c4070000 	strgt	r0, [r7], #-0
    fb74:	0300003f 	movweq	r0, #63	; 0x3f
    fb78:	0000b74d 	andeq	fp, r0, sp, asr #14
    fb7c:	41080000 	mrsmi	r0, (UNDEF: 8)
    fb80:	c7000000 	strgt	r0, [r0, -r0]
    fb84:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    fb88:	000000c7 	andeq	r0, r0, r7, asr #1
    fb8c:	04020003 	streq	r0, [r2], #-3
    fb90:	00001507 	andeq	r1, r0, r7, lsl #10
    fb94:	03080a00 	movweq	r0, #35328	; 0x8a00
    fb98:	0000ef47 	andeq	lr, r0, r7, asr #30
    fb9c:	3e8b0b00 	vdivcc.f64	d0, d11, d0
    fba0:	49030000 	stmdbmi	r3, {}	; <UNPREDICTABLE>
    fba4:	00000033 	andeq	r0, r0, r3, lsr r0
    fba8:	3e410b00 	vmlacc.f64	d16, d1, d0
    fbac:	4e030000 	cdpmi	0, 0, cr0, cr3, cr0, {0}
    fbb0:	00000098 	muleq	r0, r8, r0
    fbb4:	6b040004 	blvs	10fbcc <_Min_Stack_Size+0x10f9cc>
    fbb8:	03000040 	movweq	r0, #64	; 0x40
    fbbc:	0000ce4f 	andeq	ip, r0, pc, asr #28
    fbc0:	3fa20400 	svccc	0x00a20400
    fbc4:	53030000 	movwpl	r0, #12288	; 0x3000
    fbc8:	0000006b 	andeq	r0, r0, fp, rrx
    fbcc:	a804040c 	stmdage	r4, {r2, r3, sl}
    fbd0:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    fbd4:	00005616 	andeq	r5, r0, r6, lsl r6
    fbd8:	40760d00 	rsbsmi	r0, r6, r0, lsl #26
    fbdc:	05180000 	ldreq	r0, [r8, #-0]
    fbe0:	0001652d 	andeq	r6, r1, sp, lsr #10
    fbe4:	41050b00 	tstmi	r5, r0, lsl #22
    fbe8:	2f050000 	svccs	0x00050000
    fbec:	00000165 	andeq	r0, r0, r5, ror #2
    fbf0:	6b5f0e00 	blvs	17d33f8 <_Min_Stack_Size+0x17d31f8>
    fbf4:	33300500 	teqcc	r0, #0, 10
    fbf8:	04000000 	streq	r0, [r0], #-0
    fbfc:	00407e0b 	subeq	r7, r0, fp, lsl #28
    fc00:	33300500 	teqcc	r0, #0, 10
    fc04:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    fc08:	0040fa0b 	subeq	pc, r0, fp, lsl #20
    fc0c:	33300500 	teqcc	r0, #0, 10
    fc10:	0c000000 	stceq	0, cr0, [r0], {-0}
    fc14:	00401b0b 	subeq	r1, r0, fp, lsl #22
    fc18:	33300500 	teqcc	r0, #0, 10
    fc1c:	10000000 	andne	r0, r0, r0
    fc20:	00785f0e 	rsbseq	r5, r8, lr, lsl #30
    fc24:	016b3105 	cmneq	fp, r5, lsl #2
    fc28:	00140000 	andseq	r0, r4, r0
    fc2c:	0112040f 	tsteq	r2, pc, lsl #8
    fc30:	07080000 	streq	r0, [r8, -r0]
    fc34:	7b000001 	blvc	fc40 <_Min_Stack_Size+0xfa40>
    fc38:	09000001 	stmdbeq	r0, {r0}
    fc3c:	000000c7 	andeq	r0, r0, r7, asr #1
    fc40:	270d0000 	strcs	r0, [sp, -r0]
    fc44:	24000040 	strcs	r0, [r0], #-64	; 0xffffffc0
    fc48:	01f43505 	mvnseq	r3, r5, lsl #10
    fc4c:	b10b0000 	mrslt	r0, (UNDEF: 11)
    fc50:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    fc54:	00003337 	andeq	r3, r0, r7, lsr r3
    fc58:	020b0000 	andeq	r0, fp, #0
    fc5c:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    fc60:	00003338 	andeq	r3, r0, r8, lsr r3
    fc64:	ba0b0400 	blt	2d0c6c <_Min_Stack_Size+0x2d0a6c>
    fc68:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    fc6c:	00003339 	andeq	r3, r0, r9, lsr r3
    fc70:	930b0800 	movwls	r0, #47104	; 0xb800
    fc74:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    fc78:	0000333a 	andeq	r3, r0, sl, lsr r3
    fc7c:	be0b0c00 	cdplt	12, 0, cr0, cr11, cr0, {0}
    fc80:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    fc84:	0000333b 	andeq	r3, r0, fp, lsr r3
    fc88:	860b1000 	strhi	r1, [fp], -r0
    fc8c:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    fc90:	0000333c 	andeq	r3, r0, ip, lsr r3
    fc94:	4a0b1400 	bmi	2d4c9c <_Min_Stack_Size+0x2d4a9c>
    fc98:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    fc9c:	0000333d 	andeq	r3, r0, sp, lsr r3
    fca0:	9e0b1800 	cdpls	8, 0, cr1, cr11, cr0, {0}
    fca4:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    fca8:	0000333e 	andeq	r3, r0, lr, lsr r3
    fcac:	6e0b1c00 	cdpvs	12, 0, cr1, cr11, cr0, {0}
    fcb0:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    fcb4:	0000333f 	andeq	r3, r0, pc, lsr r3
    fcb8:	0d002000 	stceq	0, cr2, [r0, #-0]
    fcbc:	00003e49 	andeq	r3, r0, r9, asr #28
    fcc0:	19730508 	ldmdbne	r3!, {r3, r8, sl}^
    fcc4:	0b000002 	bleq	fcd4 <_Min_Stack_Size+0xfad4>
    fcc8:	000033a7 	andeq	r3, r0, r7, lsr #7
    fccc:	02197405 	andseq	r7, r9, #83886080	; 0x5000000
    fcd0:	0b000000 	bleq	fcd8 <_Min_Stack_Size+0xfad8>
    fcd4:	000045c9 	andeq	r4, r0, r9, asr #11
    fcd8:	00337505 	eorseq	r7, r3, r5, lsl #10
    fcdc:	00040000 	andeq	r0, r4, r0
    fce0:	0041040f 	subeq	r0, r1, pc, lsl #8
    fce4:	10100000 	andsne	r0, r0, r0
    fce8:	60000041 	andvs	r0, r0, r1, asr #32
    fcec:	4b017205 	blmi	6c508 <_Min_Stack_Size+0x6c308>
    fcf0:	11000003 	tstne	r0, r3
    fcf4:	00003eee 	andeq	r3, r0, lr, ror #29
    fcf8:	33017605 	movwcc	r7, #5637	; 0x1605
    fcfc:	00000000 	andeq	r0, r0, r0
    fd00:	00445011 	subeq	r5, r4, r1, lsl r0
    fd04:	017b0500 	cmneq	fp, r0, lsl #10
    fd08:	00000580 	andeq	r0, r0, r0, lsl #11
    fd0c:	44a01104 	strtmi	r1, [r0], #260	; 0x104
    fd10:	7b050000 	blvc	14fd18 <_Min_Stack_Size+0x14fb18>
    fd14:	00058001 	andeq	r8, r5, r1
    fd18:	d6110800 	ldrle	r0, [r1], -r0, lsl #16
    fd1c:	05000043 	streq	r0, [r0, #-67]	; 0xffffffbd
    fd20:	0580017b 	streq	r0, [r0, #379]	; 0x17b
    fd24:	110c0000 	mrsne	r0, (UNDEF: 12)
    fd28:	000040d0 	ldrdeq	r4, [r0], -r0
    fd2c:	33017d05 	movwcc	r7, #7429	; 0x1d05
    fd30:	10000000 	andne	r0, r0, r0
    fd34:	00413611 	subeq	r3, r1, r1, lsl r6
    fd38:	017f0500 	cmneq	pc, r0, lsl #10
    fd3c:	00000499 	muleq	r0, r9, r4
    fd40:	3f7e1114 	svccc	0x007e1114
    fd44:	81050000 	mrshi	r0, (UNDEF: 5)
    fd48:	00003301 	andeq	r3, r0, r1, lsl #6
    fd4c:	4f111800 	svcmi	0x00111800
    fd50:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    fd54:	00330183 	eorseq	r0, r3, r3, lsl #3
    fd58:	111c0000 	tstne	ip, r0
    fd5c:	00004117 	andeq	r4, r0, r7, lsl r1
    fd60:	ca018405 	bgt	70d7c <_Min_Stack_Size+0x70b7c>
    fd64:	20000004 	andcs	r0, r0, r4
    fd68:	706d5f12 	rsbvc	r5, sp, r2, lsl pc
    fd6c:	01860500 	orreq	r0, r6, r0, lsl #10
    fd70:	000006cd 	andeq	r0, r0, sp, asr #13
    fd74:	40611124 	rsbmi	r1, r1, r4, lsr #2
    fd78:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
    fd7c:	0006de01 	andeq	sp, r6, r1, lsl #28
    fd80:	0c112800 	ldceq	8, cr2, [r1], {-0}
    fd84:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    fd88:	0033018a 	eorseq	r0, r3, sl, lsl #3
    fd8c:	112c0000 			; <UNDEFINED> instruction: 0x112c0000
    fd90:	00003ec0 	andeq	r3, r0, r0, asr #29
    fd94:	33018d05 	movwcc	r8, #7429	; 0x1d05
    fd98:	30000000 	andcc	r0, r0, r0
    fd9c:	003ff611 	eorseq	pc, pc, r1, lsl r6	; <UNPREDICTABLE>
    fda0:	018e0500 	orreq	r0, lr, r0, lsl #10
    fda4:	00000499 	muleq	r0, r9, r4
    fda8:	3eae1134 	mcrcc	1, 5, r1, cr14, cr4, {1}
    fdac:	90050000 	andls	r0, r5, r0
    fdb0:	0006e401 	andeq	lr, r6, r1, lsl #8
    fdb4:	7c113800 	ldcvc	8, cr3, [r1], {-0}
    fdb8:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    fdbc:	06ea0191 	usateq	r0, #10, r1, lsl #3
    fdc0:	113c0000 	teqne	ip, r0
    fdc4:	00003f54 	andeq	r3, r0, r4, asr pc
    fdc8:	99019205 	stmdbls	r1, {r0, r2, r9, ip, pc}
    fdcc:	40000004 	andmi	r0, r0, r4
    fdd0:	003e6b11 	eorseq	r6, lr, r1, lsl fp
    fdd4:	01950500 	orrseq	r0, r5, r0, lsl #10
    fdd8:	000006fb 	strdeq	r0, [r0], -fp
    fddc:	3fd11144 	svccc	0x00d11144
    fde0:	9d050000 	stcls	0, cr0, [r5, #-0]
    fde4:	00054501 	andeq	r4, r5, r1, lsl #10
    fde8:	79114800 	ldmdbvc	r1, {fp, lr}
    fdec:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    fdf0:	0580019e 	streq	r0, [r0, #414]	; 0x19e
    fdf4:	11540000 	cmpne	r4, r0
    fdf8:	00003fcb 	andeq	r3, r0, fp, asr #31
    fdfc:	07019f05 	streq	r9, [r1, -r5, lsl #30]
    fe00:	58000007 	stmdapl	r0, {r0, r1, r2}
    fe04:	003e5f11 	eorseq	r5, lr, r1, lsl pc
    fe08:	01a00500 	lsleq	r0, r0, #10
    fe0c:	00000499 	muleq	r0, r9, r4
    fe10:	040f005c 	streq	r0, [pc], #-92	; fe18 <_Min_Stack_Size+0xfc18>
    fe14:	0000021f 	andeq	r0, r0, pc, lsl r2
    fe18:	0041410d 	subeq	r4, r1, sp, lsl #2
    fe1c:	b3056800 	movwlt	r6, #22528	; 0x5800
    fe20:	0000047b 	andeq	r0, r0, fp, ror r4
    fe24:	00705f0e 	rsbseq	r5, r0, lr, lsl #30
    fe28:	0219b405 	andseq	fp, r9, #83886080	; 0x5000000
    fe2c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    fe30:	0500725f 	streq	r7, [r0, #-607]	; 0xfffffda1
    fe34:	000033b5 			; <UNDEFINED> instruction: 0x000033b5
    fe38:	5f0e0400 	svcpl	0x000e0400
    fe3c:	b6050077 			; <UNDEFINED> instruction: 0xb6050077
    fe40:	00000033 	andeq	r0, r0, r3, lsr r0
    fe44:	3e750b08 	vaddcc.f64	d16, d5, d8
    fe48:	b7050000 	strlt	r0, [r5, -r0]
    fe4c:	00000048 	andeq	r0, r0, r8, asr #32
    fe50:	40060b0c 	andmi	r0, r6, ip, lsl #22
    fe54:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    fe58:	00000048 	andeq	r0, r0, r8, asr #32
    fe5c:	625f0e0e 	subsvs	r0, pc, #14, 28	; 0xe0
    fe60:	b9050066 	stmdblt	r5, {r1, r2, r5, r6}
    fe64:	000001f4 	strdeq	r0, [r0], -r4
    fe68:	40e60b10 	rscmi	r0, r6, r0, lsl fp
    fe6c:	ba050000 	blt	14fe74 <_Min_Stack_Size+0x14fc74>
    fe70:	00000033 	andeq	r0, r0, r3, lsr r0
    fe74:	0df80b18 	ldcleq	11, cr0, [r8, #96]!	; 0x60
    fe78:	bd050000 	stclt	0, cr0, [r5, #-0]
    fe7c:	0000034b 	andeq	r0, r0, fp, asr #6
    fe80:	3ffe0b1c 	svccc	0x00fe0b1c
    fe84:	c1050000 	mrsgt	r0, (UNDEF: 5)
    fe88:	00000105 	andeq	r0, r0, r5, lsl #2
    fe8c:	39cd0b20 	stmibcc	sp, {r5, r8, r9, fp}^
    fe90:	c3050000 	movwgt	r0, #20480	; 0x5000
    fe94:	000004a6 	andeq	r0, r0, r6, lsr #9
    fe98:	395b0b24 	ldmdbcc	fp, {r2, r5, r8, r9, fp}^
    fe9c:	c5050000 	strgt	r0, [r5, #-0]
    fea0:	000004d5 	ldrdeq	r0, [r0], -r5
    fea4:	40b00b28 	adcsmi	r0, r0, r8, lsr #22
    fea8:	c8050000 	stmdagt	r5, {}	; <UNPREDICTABLE>
    feac:	000004f9 	strdeq	r0, [r0], -r9
    feb0:	3f910b2c 	svccc	0x00910b2c
    feb4:	c9050000 	stmdbgt	r5, {}	; <UNPREDICTABLE>
    feb8:	00000513 	andeq	r0, r0, r3, lsl r5
    febc:	755f0e30 	ldrbvc	r0, [pc, #-3632]	; f094 <_Min_Stack_Size+0xee94>
    fec0:	cc050062 	stcgt	0, cr0, [r5], {98}	; 0x62
    fec4:	000001f4 	strdeq	r0, [r0], -r4
    fec8:	755f0e34 	ldrbvc	r0, [pc, #-3636]	; f09c <_Min_Stack_Size+0xee9c>
    fecc:	cd050070 	stcgt	0, cr0, [r5, #-448]	; 0xfffffe40
    fed0:	00000219 	andeq	r0, r0, r9, lsl r2
    fed4:	755f0e3c 	ldrbvc	r0, [pc, #-3644]	; f0a0 <_Min_Stack_Size+0xeea0>
    fed8:	ce050072 	mcrgt	0, 0, r0, cr5, cr2, {3}
    fedc:	00000033 	andeq	r0, r0, r3, lsr r0
    fee0:	3fab0b40 	svccc	0x00ab0b40
    fee4:	d1050000 	mrsle	r0, (UNDEF: 5)
    fee8:	00000519 	andeq	r0, r0, r9, lsl r5
    feec:	3ec80b44 	cdpcc	11, 12, cr0, cr8, cr4, {2}
    fef0:	d2050000 	andle	r0, r5, #0
    fef4:	00000529 	andeq	r0, r0, r9, lsr #10
    fef8:	6c5f0e47 	mrrcvs	14, 4, r0, pc, cr7	; <UNPREDICTABLE>
    fefc:	d5050062 	strle	r0, [r5, #-98]	; 0xffffff9e
    ff00:	000001f4 	strdeq	r0, [r0], -r4
    ff04:	40c70b48 	sbcmi	r0, r7, r8, asr #22
    ff08:	d8050000 	stmdale	r5, {}	; <UNPREDICTABLE>
    ff0c:	00000033 	andeq	r0, r0, r3, lsr r0
    ff10:	49750b50 	ldmdbmi	r5!, {r4, r6, r8, r9, fp}^
    ff14:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
    ff18:	00000076 	andeq	r0, r0, r6, ror r0
    ff1c:	35400b54 	strbcc	r0, [r0, #-2900]	; 0xfffff4ac
    ff20:	e0050000 	and	r0, r5, r0
    ff24:	000000fa 	strdeq	r0, [r0], -sl
    ff28:	3f410b58 	svccc	0x00410b58
    ff2c:	e2050000 	and	r0, r5, #0
    ff30:	000000ef 	andeq	r0, r0, pc, ror #1
    ff34:	3db50b5c 	ldccc	11, cr0, [r5, #368]!	; 0x170
    ff38:	e3050000 	movw	r0, #20480	; 0x5000
    ff3c:	00000033 	andeq	r0, r0, r3, lsr r0
    ff40:	33130064 	tstcc	r3, #100	; 0x64
    ff44:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    ff48:	14000004 	strne	r0, [r0], #-4
    ff4c:	0000034b 	andeq	r0, r0, fp, asr #6
    ff50:	00010514 	andeq	r0, r1, r4, lsl r5
    ff54:	04991400 	ldreq	r1, [r9], #1024	; 0x400
    ff58:	33140000 	tstcc	r4, #0
    ff5c:	00000000 	andeq	r0, r0, r0
    ff60:	049f040f 	ldreq	r0, [pc], #1039	; ff68 <_Min_Stack_Size+0xfd68>
    ff64:	01020000 	mrseq	r0, (UNDEF: 2)
    ff68:	0000ca08 	andeq	ip, r0, r8, lsl #20
    ff6c:	7b040f00 	blvc	113b74 <_Min_Stack_Size+0x113974>
    ff70:	13000004 	movwne	r0, #4
    ff74:	00000033 	andeq	r0, r0, r3, lsr r0
    ff78:	000004ca 	andeq	r0, r0, sl, asr #9
    ff7c:	00034b14 	andeq	r4, r3, r4, lsl fp
    ff80:	01051400 	tsteq	r5, r0, lsl #8
    ff84:	ca140000 	bgt	50ff8c <_Min_Stack_Size+0x50fd8c>
    ff88:	14000004 	strne	r0, [r0], #-4
    ff8c:	00000033 	andeq	r0, r0, r3, lsr r0
    ff90:	d0040f00 	andle	r0, r4, r0, lsl #30
    ff94:	15000004 	strne	r0, [r0, #-4]
    ff98:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    ff9c:	04ac040f 	strteq	r0, [ip], #1039	; 0x40f
    ffa0:	81130000 	tsthi	r3, r0
    ffa4:	f9000000 			; <UNDEFINED> instruction: 0xf9000000
    ffa8:	14000004 	strne	r0, [r0], #-4
    ffac:	0000034b 	andeq	r0, r0, fp, asr #6
    ffb0:	00010514 	andeq	r0, r1, r4, lsl r5
    ffb4:	00811400 	addeq	r1, r1, r0, lsl #8
    ffb8:	33140000 	tstcc	r4, #0
    ffbc:	00000000 	andeq	r0, r0, r0
    ffc0:	04db040f 	ldrbeq	r0, [fp], #1039	; 0x40f
    ffc4:	33130000 	tstcc	r3, #0
    ffc8:	13000000 	movwne	r0, #0
    ffcc:	14000005 	strne	r0, [r0], #-5
    ffd0:	0000034b 	andeq	r0, r0, fp, asr #6
    ffd4:	00010514 	andeq	r0, r1, r4, lsl r5
    ffd8:	040f0000 	streq	r0, [pc], #-0	; ffe0 <_Min_Stack_Size+0xfde0>
    ffdc:	000004ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    ffe0:	00004108 	andeq	r4, r0, r8, lsl #2
    ffe4:	00052900 	andeq	r2, r5, r0, lsl #18
    ffe8:	00c70900 	sbceq	r0, r7, r0, lsl #18
    ffec:	00020000 	andeq	r0, r2, r0
    fff0:	00004108 	andeq	r4, r0, r8, lsl #2
    fff4:	00053900 	andeq	r3, r5, r0, lsl #18
    fff8:	00c70900 	sbceq	r0, r7, r0, lsl #18
    fffc:	00000000 	andeq	r0, r0, r0
   10000:	003ee705 	eorseq	lr, lr, r5, lsl #14
   10004:	011d0500 	tsteq	sp, r0, lsl #10
   10008:	00000351 	andeq	r0, r0, r1, asr r3
   1000c:	00492510 	subeq	r2, r9, r0, lsl r5
   10010:	21050c00 	tstcs	r5, r0, lsl #24
   10014:	00057a01 	andeq	r7, r5, r1, lsl #20
   10018:	41051100 	mrsmi	r1, (UNDEF: 21)
   1001c:	23050000 	movwcs	r0, #20480	; 0x5000
   10020:	00057a01 	andeq	r7, r5, r1, lsl #20
   10024:	e0110000 	ands	r0, r1, r0
   10028:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
   1002c:	00330124 	eorseq	r0, r3, r4, lsr #2
   10030:	11040000 	mrsne	r0, (UNDEF: 4)
   10034:	00003daf 	andeq	r3, r0, pc, lsr #27
   10038:	80012505 	andhi	r2, r1, r5, lsl #10
   1003c:	08000005 	stmdaeq	r0, {r0, r2}
   10040:	45040f00 	strmi	r0, [r4, #-3840]	; 0xfffff100
   10044:	0f000005 	svceq	0x00000005
   10048:	00053904 	andeq	r3, r5, r4, lsl #18
   1004c:	40961000 	addsmi	r1, r6, r0
   10050:	05180000 	ldreq	r0, [r8, #-0]
   10054:	05c8013d 	strbeq	r0, [r8, #317]	; 0x13d
   10058:	90110000 	andsls	r0, r1, r0
   1005c:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
   10060:	05c8013e 	strbeq	r0, [r8, #318]	; 0x13e
   10064:	11000000 	mrsne	r0, (UNDEF: 0)
   10068:	00003f68 	andeq	r3, r0, r8, ror #30
   1006c:	c8013f05 	stmdagt	r1, {r0, r2, r8, r9, sl, fp, ip, sp}
   10070:	06000005 	streq	r0, [r0], -r5
   10074:	003e5011 	eorseq	r5, lr, r1, lsl r0
   10078:	01400500 	cmpeq	r0, r0, lsl #10
   1007c:	0000002c 	andeq	r0, r0, ip, lsr #32
   10080:	4100110c 	tstmi	r0, ip, lsl #2
   10084:	43050000 	movwmi	r0, #20480	; 0x5000
   10088:	00006401 	andeq	r6, r0, r1, lsl #8
   1008c:	08001000 	stmdaeq	r0, {ip}
   10090:	0000002c 	andeq	r0, r0, ip, lsr #32
   10094:	000005d8 	ldrdeq	r0, [r0], -r8
   10098:	0000c709 	andeq	ip, r0, r9, lsl #14
   1009c:	10000200 	andne	r0, r0, r0, lsl #4
   100a0:	00004020 	andeq	r4, r0, r0, lsr #32
   100a4:	01560510 	cmpeq	r6, r0, lsl r5
   100a8:	0000061a 	andeq	r0, r0, sl, lsl r6
   100ac:	0040b611 	subeq	fp, r0, r1, lsl r6
   100b0:	01590500 	cmpeq	r9, r0, lsl #10
   100b4:	00000165 	andeq	r0, r0, r5, ror #2
   100b8:	3e551100 	rdfccs	f1, f5, f0
   100bc:	5a050000 	bpl	1500c4 <_Min_Stack_Size+0x14fec4>
   100c0:	00003301 	andeq	r3, r0, r1, lsl #6
   100c4:	f5110400 			; <UNDEFINED> instruction: 0xf5110400
   100c8:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
   100cc:	0165015b 	cmneq	r5, fp, asr r1
   100d0:	11080000 	mrsne	r0, (UNDEF: 8)
   100d4:	00003f37 	andeq	r3, r0, r7, lsr pc
   100d8:	1a015c05 	bne	670f4 <_Min_Stack_Size+0x66ef4>
   100dc:	0c000006 	stceq	0, cr0, [r0], {6}
   100e0:	65040f00 	strvs	r0, [r4, #-3840]	; 0xfffff100
   100e4:	10000001 	andne	r0, r0, r1
   100e8:	0000410b 	andeq	r4, r0, fp, lsl #2
   100ec:	01600550 	cmneq	r0, r0, asr r5
   100f0:	000006bd 			; <UNDEFINED> instruction: 0x000006bd
   100f4:	003eb311 	eorseq	fp, lr, r1, lsl r3
   100f8:	01630500 	cmneq	r3, r0, lsl #10
   100fc:	00000499 	muleq	r0, r9, r4
   10100:	3dbd1100 	ldfccs	f1, [sp]
   10104:	64050000 	strvs	r0, [r5], #-0
   10108:	0000ef01 	andeq	lr, r0, r1, lsl #30
   1010c:	d9110400 	ldmdble	r1, {sl}
   10110:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
   10114:	00ef0165 	rsceq	r0, pc, r5, ror #2
   10118:	110c0000 	mrsne	r0, (UNDEF: 12)
   1011c:	0000402c 	andeq	r4, r0, ip, lsr #32
   10120:	ef016605 	svc	0x00016605
   10124:	14000000 	strne	r0, [r0], #-0
   10128:	003f9811 	eorseq	r9, pc, r1, lsl r8	; <UNPREDICTABLE>
   1012c:	01670500 	cmneq	r7, r0, lsl #10
   10130:	000006bd 			; <UNDEFINED> instruction: 0x000006bd
   10134:	3ef5111c 	mrccc	1, 7, r1, cr5, cr12, {0}
   10138:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
   1013c:	00003301 	andeq	r3, r0, r1, lsl #6
   10140:	41112400 	tstmi	r1, r0, lsl #8
   10144:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
   10148:	00ef0169 	rsceq	r0, pc, r9, ror #2
   1014c:	11280000 			; <UNDEFINED> instruction: 0x11280000
   10150:	00003fe7 	andeq	r3, r0, r7, ror #31
   10154:	ef016a05 	svc	0x00016a05
   10158:	30000000 	andcc	r0, r0, r0
   1015c:	003e9d11 	eorseq	r9, lr, r1, lsl sp
   10160:	016b0500 	cmneq	fp, r0, lsl #10
   10164:	000000ef 	andeq	r0, r0, pc, ror #1
   10168:	41271138 			; <UNDEFINED> instruction: 0x41271138
   1016c:	6c050000 	stcvs	0, cr0, [r5], {-0}
   10170:	0000ef01 	andeq	lr, r0, r1, lsl #30
   10174:	d5114000 	ldrle	r4, [r1, #-0]
   10178:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
   1017c:	00ef016d 	rsceq	r0, pc, sp, ror #2
   10180:	00480000 	subeq	r0, r8, r0
   10184:	00049f08 	andeq	r9, r4, r8, lsl #30
   10188:	0006cd00 	andeq	ip, r6, r0, lsl #26
   1018c:	00c70900 	sbceq	r0, r7, r0, lsl #18
   10190:	00070000 	andeq	r0, r7, r0
   10194:	05d8040f 	ldrbeq	r0, [r8, #1039]	; 0x40f
   10198:	de160000 	cdple	0, 1, cr0, cr6, cr0, {0}
   1019c:	14000006 	strne	r0, [r0], #-6
   101a0:	0000034b 	andeq	r0, r0, fp, asr #6
   101a4:	d3040f00 	movwle	r0, #20224	; 0x4f00
   101a8:	0f000006 	svceq	0x00000006
   101ac:	00058604 	andeq	r8, r5, r4, lsl #12
   101b0:	7b040f00 	blvc	113db8 <_Min_Stack_Size+0x113bb8>
   101b4:	16000001 	strne	r0, [r0], -r1
   101b8:	000006fb 	strdeq	r0, [r0], -fp
   101bc:	00003314 	andeq	r3, r0, r4, lsl r3
   101c0:	040f0000 	streq	r0, [pc], #-0	; 101c8 <_Min_Stack_Size+0xffc8>
   101c4:	00000701 	andeq	r0, r0, r1, lsl #14
   101c8:	06f0040f 	ldrbteq	r0, [r0], pc, lsl #8
   101cc:	040f0000 	streq	r0, [pc], #-0	; 101d4 <_Min_Stack_Size+0xffd4>
   101d0:	00000620 	andeq	r0, r0, r0, lsr #12
   101d4:	00491e17 	subeq	r1, r9, r7, lsl lr
   101d8:	00210100 	eoreq	r0, r1, r0, lsl #2
   101dc:	1a000000 	bne	101e4 <_Min_Stack_Size+0xffe4>
   101e0:	01000000 	mrseq	r0, (UNDEF: 0)
   101e4:	00076d9c 	muleq	r7, ip, sp
   101e8:	74701800 	ldrbtvc	r1, [r0], #-2048	; 0xfffff800
   101ec:	21010072 	tstcs	r1, r2, ror r0
   101f0:	0000034b 	andeq	r0, r0, fp, asr #6
   101f4:	00001602 	andeq	r1, r0, r2, lsl #12
   101f8:	00492619 	subeq	r2, r9, r9, lsl r6
   101fc:	7a210100 	bvc	850604 <_Min_Stack_Size+0x850404>
   10200:	39000005 	stmdbcc	r0, {r0, r2}
   10204:	1a000016 	bne	10264 <_Min_Stack_Size+0x10064>
   10208:	00000000 	andeq	r0, r0, r0
   1020c:	0000070d 	andeq	r0, r0, sp, lsl #14
   10210:	00000754 	andeq	r0, r0, r4, asr r7
   10214:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
   10218:	1c000075 	stcne	0, cr0, [r0], {117}	; 0x75
   1021c:	00000000 	andeq	r0, r0, r0
   10220:	000008e8 	andeq	r0, r0, r8, ror #17
   10224:	0351011b 	cmpeq	r1, #-1073741818	; 0xc0000006
   10228:	1b5101f3 	blne	14509fc <_Min_Stack_Size+0x14507fc>
   1022c:	f3035001 	vhadd.u8	d5, d3, d1
   10230:	00005001 	andeq	r5, r0, r1
   10234:	00495f1d 	subeq	r5, r9, sp, lsl pc
   10238:	02fd0500 	rscseq	r0, sp, #0, 10
   1023c:	00000000 	andeq	r0, r0, r0
   10240:	000000b4 	strheq	r0, [r0], -r4
   10244:	08cb9c01 	stmiaeq	fp, {r0, sl, fp, ip, pc}^
   10248:	70180000 	andsvc	r0, r8, r0
   1024c:	01007274 	tsteq	r0, r4, ror r2
   10250:	00034b2d 	andeq	r4, r3, sp, lsr #22
   10254:	00167000 	andseq	r7, r6, r0
   10258:	00001e00 	andeq	r1, r0, r0, lsl #28
   1025c:	00240000 	eoreq	r0, r4, r0
   10260:	07f50000 	ldrbeq	r0, [r5, r0]!
   10264:	691f0000 	ldmdbvs	pc, {}	; <UNPREDICTABLE>
   10268:	33390100 	teqcc	r9, #0, 2
   1026c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   10270:	00000000 	andeq	r0, r0, r0
   10274:	00000016 	andeq	r0, r0, r6, lsl r0
   10278:	000007e4 	andeq	r0, r0, r4, ror #15
   1027c:	00495720 	subeq	r5, r9, r0, lsr #14
   10280:	653c0100 	ldrvs	r0, [ip, #-256]!	; 0xffffff00
   10284:	c0000001 	andgt	r0, r0, r1
   10288:	20000016 	andcs	r0, r0, r6, lsl r0
   1028c:	00004916 	andeq	r4, r0, r6, lsl r9
   10290:	01653c01 	cmneq	r5, r1, lsl #24
   10294:	16d30000 	ldrbne	r0, [r3], r0
   10298:	00210000 	eoreq	r0, r1, r0
   1029c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
   102a0:	1b000008 	blne	102c8 <_Min_Stack_Size+0x100c8>
   102a4:	74025001 	strvc	r5, [r2], #-1
   102a8:	21000000 	mrscs	r0, (UNDEF: 0)
   102ac:	00000000 	andeq	r0, r0, r0
   102b0:	000008e8 	andeq	r0, r0, r8, ror #17
   102b4:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
   102b8:	00000074 	andeq	r0, r0, r4, ror r0
   102bc:	0000001a 	andeq	r0, r0, sl, lsl r0
   102c0:	0008e800 	andeq	lr, r8, r0, lsl #16
   102c4:	00080900 	andeq	r0, r8, r0, lsl #18
   102c8:	50011b00 	andpl	r1, r1, r0, lsl #22
   102cc:	00007402 	andeq	r7, r0, r2, lsl #8
   102d0:	0000001a 	andeq	r0, r0, sl, lsl r0
   102d4:	0008e800 	andeq	lr, r8, r0, lsl #16
   102d8:	00081d00 	andeq	r1, r8, r0, lsl #26
   102dc:	50011b00 	andpl	r1, r1, r0, lsl #22
   102e0:	00007402 	andeq	r7, r0, r2, lsl #8
   102e4:	0000001a 	andeq	r0, r0, sl, lsl r0
   102e8:	0008e800 	andeq	lr, r8, r0, lsl #16
   102ec:	00083100 	andeq	r3, r8, r0, lsl #2
   102f0:	50011b00 	andpl	r1, r1, r0, lsl #22
   102f4:	00007402 	andeq	r7, r0, r2, lsl #8
   102f8:	0000001a 	andeq	r0, r0, sl, lsl r0
   102fc:	0008e800 	andeq	lr, r8, r0, lsl #16
   10300:	00084500 	andeq	r4, r8, r0, lsl #10
   10304:	50011b00 	andpl	r1, r1, r0, lsl #22
   10308:	00007402 	andeq	r7, r0, r2, lsl #8
   1030c:	0000001a 	andeq	r0, r0, sl, lsl r0
   10310:	0008e800 	andeq	lr, r8, r0, lsl #16
   10314:	00085900 	andeq	r5, r8, r0, lsl #18
   10318:	50011b00 	andpl	r1, r1, r0, lsl #22
   1031c:	00007402 	andeq	r7, r0, r2, lsl #8
   10320:	0000001a 	andeq	r0, r0, sl, lsl r0
   10324:	0008e800 	andeq	lr, r8, r0, lsl #16
   10328:	00086d00 	andeq	r6, r8, r0, lsl #26
   1032c:	50011b00 	andpl	r1, r1, r0, lsl #22
   10330:	00007402 	andeq	r7, r0, r2, lsl #8
   10334:	0000001a 	andeq	r0, r0, sl, lsl r0
   10338:	0008e800 	andeq	lr, r8, r0, lsl #16
   1033c:	00088100 	andeq	r8, r8, r0, lsl #2
   10340:	50011b00 	andpl	r1, r1, r0, lsl #22
   10344:	00007402 	andeq	r7, r0, r2, lsl #8
   10348:	0000001a 	andeq	r0, r0, sl, lsl r0
   1034c:	0008e800 	andeq	lr, r8, r0, lsl #16
   10350:	00089500 	andeq	r9, r8, r0, lsl #10
   10354:	50011b00 	andpl	r1, r1, r0, lsl #22
   10358:	00007402 	andeq	r7, r0, r2, lsl #8
   1035c:	0000001a 	andeq	r0, r0, sl, lsl r0
   10360:	0008e800 	andeq	lr, r8, r0, lsl #16
   10364:	0008a900 	andeq	sl, r8, r0, lsl #18
   10368:	50011b00 	andpl	r1, r1, r0, lsl #22
   1036c:	00007402 	andeq	r7, r0, r2, lsl #8
   10370:	00000022 	andeq	r0, r0, r2, lsr #32
   10374:	0008b900 	andeq	fp, r8, r0, lsl #18
   10378:	50011b00 	andpl	r1, r1, r0, lsl #22
   1037c:	00007402 	andeq	r7, r0, r2, lsl #8
   10380:	0000001c 	andeq	r0, r0, ip, lsl r0
   10384:	00070d00 	andeq	r0, r7, r0, lsl #26
   10388:	50011b00 	andpl	r1, r1, r0, lsl #22
   1038c:	5001f303 	andpl	pc, r1, r3, lsl #6
   10390:	5e230000 	cdppl	0, 2, cr0, cr3, cr0, {0}
   10394:	05000044 	streq	r0, [r0, #-68]	; 0xffffffbc
   10398:	034b02fa 	movteq	r0, #45818	; 0xb2fa
   1039c:	ef240000 	svc	0x00240000
   103a0:	0100003e 	tsteq	r0, lr, lsr r0
   103a4:	0000331a 	andeq	r3, r0, sl, lsl r3
   103a8:	e0030500 	and	r0, r3, r0, lsl #10
   103ac:	2520000d 	strcs	r0, [r0, #-13]!
   103b0:	000044ef 	andeq	r4, r0, pc, ror #9
   103b4:	4b14fa06 	blmi	54ebd4 <_Min_Stack_Size+0x54e9d4>
   103b8:	14000003 	strne	r0, [r0], #-3
   103bc:	00000105 	andeq	r0, r0, r5, lsl #2
   103c0:	07b50000 	ldreq	r0, [r5, r0]!
   103c4:	00040000 	andeq	r0, r4, r0
   103c8:	00003712 	andeq	r3, r0, r2, lsl r7
   103cc:	3ce00104 	stfcce	f0, [r0], #16
   103d0:	0f010000 	svceq	0x00010000
   103d4:	ca000045 	bgt	104f0 <_Min_Stack_Size+0x102f0>
   103d8:	f800003d 			; <UNDEFINED> instruction: 0xf800003d
   103dc:	0000000d 	andeq	r0, r0, sp
   103e0:	7c000000 	stcvc	0, cr0, [r0], {-0}
   103e4:	0200005e 	andeq	r0, r0, #94	; 0x5e
   103e8:	00c30601 	sbceq	r0, r3, r1, lsl #12
   103ec:	01020000 	mrseq	r0, (UNDEF: 2)
   103f0:	0000c108 	andeq	ip, r0, r8, lsl #2
   103f4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
   103f8:	00000051 	andeq	r0, r0, r1, asr r0
   103fc:	23070202 	movwcs	r0, #29186	; 0x7202
   10400:	02000001 	andeq	r0, r0, #1
   10404:	006d0504 	rsbeq	r0, sp, r4, lsl #10
   10408:	04020000 	streq	r0, [r2], #-0
   1040c:	0000fa07 	andeq	pc, r0, r7, lsl #20
   10410:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
   10414:	00000068 	andeq	r0, r0, r8, rrx
   10418:	f5070802 			; <UNDEFINED> instruction: 0xf5070802
   1041c:	03000000 	movweq	r0, #0
   10420:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   10424:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
   10428:	0000ff07 	andeq	pc, r0, r7, lsl #30
   1042c:	45080400 	strmi	r0, [r8, #-1024]	; 0xfffffc00
   10430:	d4020000 	strle	r0, [r2], #-0
   10434:	00000064 	andeq	r0, r0, r4, rrx
   10438:	ce040405 	cdpgt	4, 0, cr0, cr4, cr5, {0}
   1043c:	0300003e 	movweq	r0, #62	; 0x3e
   10440:	00005d07 	andeq	r5, r0, r7, lsl #26
   10444:	3e340400 	cfabsscc	mvf0, mvf4
   10448:	10040000 	andne	r0, r4, r0
   1044c:	00000041 	andeq	r0, r0, r1, asr #32
   10450:	003f8904 	eorseq	r8, pc, r4, lsl #18
   10454:	41270400 			; <UNDEFINED> instruction: 0x41270400
   10458:	06000000 	streq	r0, [r0], -r0
   1045c:	0000403a 	andeq	r4, r0, sl, lsr r0
   10460:	64016102 	strvs	r6, [r1], #-258	; 0xfffffefe
   10464:	07000000 	streq	r0, [r0, -r0]
   10468:	c44a0404 	strbgt	r0, [sl], #-1028	; 0xfffffbfc
   1046c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   10470:	00003e3b 	andeq	r3, r0, fp, lsr lr
   10474:	00994c04 	addseq	r4, r9, r4, lsl #24
   10478:	c4080000 	strgt	r0, [r8], #-0
   1047c:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
   10480:	0000c44d 	andeq	ip, r0, sp, asr #8
   10484:	2c090000 	stccs	0, cr0, [r9], {-0}
   10488:	d4000000 	strle	r0, [r0], #-0
   1048c:	0a000000 	beq	10494 <_Min_Stack_Size+0x10294>
   10490:	000000d4 	ldrdeq	r0, [r0], -r4
   10494:	04020003 	streq	r0, [r2], #-3
   10498:	00001507 	andeq	r1, r0, r7, lsl #10
   1049c:	04080b00 	streq	r0, [r8], #-2816	; 0xfffff500
   104a0:	0000fc47 	andeq	pc, r0, r7, asr #24
   104a4:	3e8b0c00 	cdpcc	12, 8, cr0, cr11, cr0, {0}
   104a8:	49040000 	stmdbmi	r4, {}	; <UNPREDICTABLE>
   104ac:	0000005d 	andeq	r0, r0, sp, asr r0
   104b0:	3e410c00 	cdpcc	12, 4, cr0, cr1, cr0, {0}
   104b4:	4e040000 	cdpmi	0, 0, cr0, cr4, cr0, {0}
   104b8:	000000a5 	andeq	r0, r0, r5, lsr #1
   104bc:	6b040004 	blvs	1104d4 <_Min_Stack_Size+0x1102d4>
   104c0:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
   104c4:	0000db4f 	andeq	sp, r0, pc, asr #22
   104c8:	3fa20400 	svccc	0x00a20400
   104cc:	53040000 	movwpl	r0, #16384	; 0x4000
   104d0:	00000078 	andeq	r0, r0, r8, ror r0
   104d4:	0040a804 	subeq	sl, r0, r4, lsl #16
   104d8:	48160500 	ldmdami	r6, {r8, sl}
   104dc:	0d000000 	stceq	0, cr0, [r0, #-0]
   104e0:	00004076 	andeq	r4, r0, r6, ror r0
   104e4:	702d0518 	eorvc	r0, sp, r8, lsl r5
   104e8:	0c000001 	stceq	0, cr0, [r0], {1}
   104ec:	00004105 	andeq	r4, r0, r5, lsl #2
   104f0:	01702f05 	cmneq	r0, r5, lsl #30
   104f4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   104f8:	05006b5f 	streq	r6, [r0, #-2911]	; 0xfffff4a1
   104fc:	00005d30 	andeq	r5, r0, r0, lsr sp
   10500:	7e0c0400 	cfcpysvc	mvf0, mvf12
   10504:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
   10508:	00005d30 	andeq	r5, r0, r0, lsr sp
   1050c:	fa0c0800 	blx	312514 <_Min_Stack_Size+0x312314>
   10510:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
   10514:	00005d30 	andeq	r5, r0, r0, lsr sp
   10518:	1b0c0c00 	blne	313520 <_Min_Stack_Size+0x313320>
   1051c:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
   10520:	00005d30 	andeq	r5, r0, r0, lsr sp
   10524:	5f0e1000 	svcpl	0x000e1000
   10528:	31050078 	tstcc	r5, r8, ror r0
   1052c:	00000176 	andeq	r0, r0, r6, ror r1
   10530:	040f0014 	streq	r0, [pc], #-20	; 10538 <_Min_Stack_Size+0x10338>
   10534:	0000011d 	andeq	r0, r0, sp, lsl r1
   10538:	00011209 	andeq	r1, r1, r9, lsl #4
   1053c:	00018600 	andeq	r8, r1, r0, lsl #12
   10540:	00d40a00 	sbcseq	r0, r4, r0, lsl #20
   10544:	00000000 	andeq	r0, r0, r0
   10548:	0040270d 	subeq	r2, r0, sp, lsl #14
   1054c:	35052400 	strcc	r2, [r5, #-1024]	; 0xfffffc00
   10550:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   10554:	003fb10c 	eorseq	fp, pc, ip, lsl #2
   10558:	5d370500 	cfldr32pl	mvfx0, [r7, #-0]
   1055c:	00000000 	andeq	r0, r0, r0
   10560:	003f020c 	eorseq	r0, pc, ip, lsl #4
   10564:	5d380500 	cfldr32pl	mvfx0, [r8, #-0]
   10568:	04000000 	streq	r0, [r0], #-0
   1056c:	003fba0c 	eorseq	fp, pc, ip, lsl #20
   10570:	5d390500 	cfldr32pl	mvfx0, [r9, #-0]
   10574:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   10578:	003e930c 	eorseq	r9, lr, ip, lsl #6
   1057c:	5d3a0500 	cfldr32pl	mvfx0, [sl, #-0]
   10580:	0c000000 	stceq	0, cr0, [r0], {-0}
   10584:	0040be0c 	subeq	fp, r0, ip, lsl #28
   10588:	5d3b0500 	cfldr32pl	mvfx0, [fp, #-0]
   1058c:	10000000 	andne	r0, r0, r0
   10590:	0040860c 	subeq	r8, r0, ip, lsl #12
   10594:	5d3c0500 	cfldr32pl	mvfx0, [ip, #-0]
   10598:	14000000 	strne	r0, [r0], #-0
   1059c:	003f4a0c 	eorseq	r4, pc, ip, lsl #20
   105a0:	5d3d0500 	cfldr32pl	mvfx0, [sp, #-0]
   105a4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   105a8:	00409e0c 	subeq	r9, r0, ip, lsl #28
   105ac:	5d3e0500 	cfldr32pl	mvfx0, [lr, #-0]
   105b0:	1c000000 	stcne	0, cr0, [r0], {-0}
   105b4:	003f6e0c 	eorseq	r6, pc, ip, lsl #28
   105b8:	5d3f0500 	cfldr32pl	mvfx0, [pc, #-0]	; 105c0 <_Min_Stack_Size+0x103c0>
   105bc:	20000000 	andcs	r0, r0, r0
   105c0:	3e490d00 	cdpcc	13, 4, cr0, cr9, cr0, {0}
   105c4:	05080000 	streq	r0, [r8, #-0]
   105c8:	00022473 	andeq	r2, r2, r3, ror r4
   105cc:	33a70c00 			; <UNDEFINED> instruction: 0x33a70c00
   105d0:	74050000 	strvc	r0, [r5], #-0
   105d4:	00000224 	andeq	r0, r0, r4, lsr #4
   105d8:	45c90c00 	strbmi	r0, [r9, #3072]	; 0xc00
   105dc:	75050000 	strvc	r0, [r5, #-0]
   105e0:	0000005d 	andeq	r0, r0, sp, asr r0
   105e4:	040f0004 	streq	r0, [pc], #-4	; 105ec <_Min_Stack_Size+0x103ec>
   105e8:	0000002c 	andeq	r0, r0, ip, lsr #32
   105ec:	00411010 	subeq	r1, r1, r0, lsl r0
   105f0:	72056000 	andvc	r6, r5, #0
   105f4:	00035601 	andeq	r5, r3, r1, lsl #12
   105f8:	3eee1100 	cdpcc	1, 14, cr1, cr14, cr0, {0}
   105fc:	76050000 	strvc	r0, [r5], -r0
   10600:	00005d01 	andeq	r5, r0, r1, lsl #26
   10604:	50110000 	andspl	r0, r1, r0
   10608:	05000044 	streq	r0, [r0, #-68]	; 0xffffffbc
   1060c:	058b017b 	streq	r0, [fp, #379]	; 0x17b
   10610:	11040000 	mrsne	r0, (UNDEF: 4)
   10614:	000044a0 	andeq	r4, r0, r0, lsr #9
   10618:	8b017b05 	blhi	6f234 <_Min_Stack_Size+0x6f034>
   1061c:	08000005 	stmdaeq	r0, {r0, r2}
   10620:	0043d611 	subeq	sp, r3, r1, lsl r6
   10624:	017b0500 	cmneq	fp, r0, lsl #10
   10628:	0000058b 	andeq	r0, r0, fp, lsl #11
   1062c:	40d0110c 	sbcsmi	r1, r0, ip, lsl #2
   10630:	7d050000 	stcvc	0, cr0, [r5, #-0]
   10634:	00005d01 	andeq	r5, r0, r1, lsl #26
   10638:	36111000 	ldrcc	r1, [r1], -r0
   1063c:	05000041 	streq	r0, [r0, #-65]	; 0xffffffbf
   10640:	04a4017f 	strteq	r0, [r4], #383	; 0x17f
   10644:	11140000 	tstne	r4, r0
   10648:	00003f7e 	andeq	r3, r0, lr, ror pc
   1064c:	5d018105 	stfpld	f0, [r1, #-20]	; 0xffffffec
   10650:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   10654:	00404f11 	subeq	r4, r0, r1, lsl pc
   10658:	01830500 	orreq	r0, r3, r0, lsl #10
   1065c:	0000005d 	andeq	r0, r0, sp, asr r0
   10660:	4117111c 	tstmi	r7, ip, lsl r1
   10664:	84050000 	strhi	r0, [r5], #-0
   10668:	0004d501 	andeq	sp, r4, r1, lsl #10
   1066c:	5f122000 	svcpl	0x00122000
   10670:	0500706d 	streq	r7, [r0, #-109]	; 0xffffff93
   10674:	06d80186 	ldrbeq	r0, [r8], r6, lsl #3
   10678:	11240000 			; <UNDEFINED> instruction: 0x11240000
   1067c:	00004061 	andeq	r4, r0, r1, rrx
   10680:	e9018805 	stmdb	r1, {r0, r2, fp, pc}
   10684:	28000006 	stmdacs	r0, {r1, r2}
   10688:	00400c11 	subeq	r0, r0, r1, lsl ip
   1068c:	018a0500 	orreq	r0, sl, r0, lsl #10
   10690:	0000005d 	andeq	r0, r0, sp, asr r0
   10694:	3ec0112c 	polccsp	f1, f0, #4.0
   10698:	8d050000 	stchi	0, cr0, [r5, #-0]
   1069c:	00005d01 	andeq	r5, r0, r1, lsl #26
   106a0:	f6113000 			; <UNDEFINED> instruction: 0xf6113000
   106a4:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
   106a8:	04a4018e 	strteq	r0, [r4], #398	; 0x18e
   106ac:	11340000 	teqne	r4, r0
   106b0:	00003eae 	andeq	r3, r0, lr, lsr #29
   106b4:	ef019005 	svc	0x00019005
   106b8:	38000006 	stmdacc	r0, {r1, r2}
   106bc:	003e7c11 	eorseq	r7, lr, r1, lsl ip
   106c0:	01910500 	orrseq	r0, r1, r0, lsl #10
   106c4:	000006f5 	strdeq	r0, [r0], -r5
   106c8:	3f54113c 	svccc	0x0054113c
   106cc:	92050000 	andls	r0, r5, #0
   106d0:	0004a401 	andeq	sl, r4, r1, lsl #8
   106d4:	6b114000 	blvs	4606dc <_Min_Stack_Size+0x4604dc>
   106d8:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
   106dc:	07060195 			; <UNDEFINED> instruction: 0x07060195
   106e0:	11440000 	mrsne	r0, (UNDEF: 68)
   106e4:	00003fd1 	ldrdeq	r3, [r0], -r1
   106e8:	50019d05 	andpl	r9, r1, r5, lsl #26
   106ec:	48000005 	stmdami	r0, {r0, r2}
   106f0:	003f7911 	eorseq	r7, pc, r1, lsl r9	; <UNPREDICTABLE>
   106f4:	019e0500 	orrseq	r0, lr, r0, lsl #10
   106f8:	0000058b 	andeq	r0, r0, fp, lsl #11
   106fc:	3fcb1154 	svccc	0x00cb1154
   10700:	9f050000 	svcls	0x00050000
   10704:	00071201 	andeq	r1, r7, r1, lsl #4
   10708:	5f115800 	svcpl	0x00115800
   1070c:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
   10710:	04a401a0 	strteq	r0, [r4], #416	; 0x1a0
   10714:	005c0000 	subseq	r0, ip, r0
   10718:	022a040f 	eoreq	r0, sl, #251658240	; 0xf000000
   1071c:	410d0000 	mrsmi	r0, (UNDEF: 13)
   10720:	68000041 	stmdavs	r0, {r0, r6}
   10724:	0486b305 	streq	fp, [r6], #773	; 0x305
   10728:	5f0e0000 	svcpl	0x000e0000
   1072c:	b4050070 	strlt	r0, [r5], #-112	; 0xffffff90
   10730:	00000224 	andeq	r0, r0, r4, lsr #4
   10734:	725f0e00 	subsvc	r0, pc, #0, 28
   10738:	5db50500 	cfldr32pl	mvfx0, [r5]
   1073c:	04000000 	streq	r0, [r0], #-0
   10740:	00775f0e 	rsbseq	r5, r7, lr, lsl #30
   10744:	005db605 	subseq	fp, sp, r5, lsl #12
   10748:	0c080000 	stceq	0, cr0, [r8], {-0}
   1074c:	00003e75 	andeq	r3, r0, r5, ror lr
   10750:	0033b705 	eorseq	fp, r3, r5, lsl #14
   10754:	0c0c0000 	stceq	0, cr0, [ip], {-0}
   10758:	00004006 	andeq	r4, r0, r6
   1075c:	0033b805 	eorseq	fp, r3, r5, lsl #16
   10760:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
   10764:	0066625f 	rsbeq	r6, r6, pc, asr r2
   10768:	01ffb905 	mvnseq	fp, r5, lsl #18
   1076c:	0c100000 	ldceq	0, cr0, [r0], {-0}
   10770:	000040e6 	andeq	r4, r0, r6, ror #1
   10774:	005dba05 	subseq	fp, sp, r5, lsl #20
   10778:	0c180000 	ldceq	0, cr0, [r8], {-0}
   1077c:	00000df8 	strdeq	r0, [r0], -r8
   10780:	0356bd05 	cmpeq	r6, #320	; 0x140
   10784:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
   10788:	00003ffe 	strdeq	r3, [r0], -lr
   1078c:	0076c105 	rsbseq	ip, r6, r5, lsl #2
   10790:	0c200000 	stceq	0, cr0, [r0], #-0
   10794:	000039cd 	andeq	r3, r0, sp, asr #19
   10798:	04b1c305 	ldrteq	ip, [r1], #773	; 0x305
   1079c:	0c240000 	stceq	0, cr0, [r4], #-0
   107a0:	0000395b 	andeq	r3, r0, fp, asr r9
   107a4:	04e0c505 	strbteq	ip, [r0], #1285	; 0x505
   107a8:	0c280000 	stceq	0, cr0, [r8], #-0
   107ac:	000040b0 	strheq	r4, [r0], -r0
   107b0:	0504c805 	streq	ip, [r4, #-2053]	; 0xfffff7fb
   107b4:	0c2c0000 	stceq	0, cr0, [ip], #-0
   107b8:	00003f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
   107bc:	051ec905 	ldreq	ip, [lr, #-2309]	; 0xfffff6fb
   107c0:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
   107c4:	0062755f 	rsbeq	r7, r2, pc, asr r5
   107c8:	01ffcc05 	mvnseq	ip, r5, lsl #24
   107cc:	0e340000 	cdpeq	0, 3, cr0, cr4, cr0, {0}
   107d0:	0070755f 	rsbseq	r7, r0, pc, asr r5
   107d4:	0224cd05 	eoreq	ip, r4, #320	; 0x140
   107d8:	0e3c0000 	cdpeq	0, 3, cr0, cr12, cr0, {0}
   107dc:	0072755f 	rsbseq	r7, r2, pc, asr r5
   107e0:	005dce05 	subseq	ip, sp, r5, lsl #28
   107e4:	0c400000 	mareq	acc0, r0, r0
   107e8:	00003fab 	andeq	r3, r0, fp, lsr #31
   107ec:	0524d105 	streq	sp, [r4, #-261]!	; 0xfffffefb
   107f0:	0c440000 	mareq	acc0, r0, r4
   107f4:	00003ec8 	andeq	r3, r0, r8, asr #29
   107f8:	0534d205 	ldreq	sp, [r4, #-517]!	; 0xfffffdfb
   107fc:	0e470000 	cdpeq	0, 4, cr0, cr7, cr0, {0}
   10800:	00626c5f 	rsbeq	r6, r2, pc, asr ip
   10804:	01ffd505 	mvnseq	sp, r5, lsl #10
   10808:	0c480000 	mareq	acc0, r0, r8
   1080c:	000040c7 	andeq	r4, r0, r7, asr #1
   10810:	005dd805 	subseq	sp, sp, r5, lsl #16
   10814:	0c500000 	mraeq	r0, r0, acc0
   10818:	00004975 	andeq	r4, r0, r5, ror r9
   1081c:	0083d905 	addeq	sp, r3, r5, lsl #18
   10820:	0c540000 	mraeq	r0, r4, acc0
   10824:	00003540 	andeq	r3, r0, r0, asr #10
   10828:	0107e005 	tsteq	r7, r5
   1082c:	0c580000 	mraeq	r0, r8, acc0
   10830:	00003f41 	andeq	r3, r0, r1, asr #30
   10834:	00fce205 	rscseq	lr, ip, r5, lsl #4
   10838:	0c5c0000 	mraeq	r0, ip, acc0
   1083c:	00003db5 			; <UNDEFINED> instruction: 0x00003db5
   10840:	005de305 	subseq	lr, sp, r5, lsl #6
   10844:	00640000 	rsbeq	r0, r4, r0
   10848:	00005d13 	andeq	r5, r0, r3, lsl sp
   1084c:	0004a400 	andeq	sl, r4, r0, lsl #8
   10850:	03561400 	cmpeq	r6, #0, 8
   10854:	76140000 	ldrvc	r0, [r4], -r0
   10858:	14000000 	strne	r0, [r0], #-0
   1085c:	000004a4 	andeq	r0, r0, r4, lsr #9
   10860:	00005d14 	andeq	r5, r0, r4, lsl sp
   10864:	040f0000 	streq	r0, [pc], #-0	; 1086c <_Min_Stack_Size+0x1066c>
   10868:	000004aa 	andeq	r0, r0, sl, lsr #9
   1086c:	ca080102 	bgt	210c7c <_Min_Stack_Size+0x210a7c>
   10870:	0f000000 	svceq	0x00000000
   10874:	00048604 	andeq	r8, r4, r4, lsl #12
   10878:	005d1300 	subseq	r1, sp, r0, lsl #6
   1087c:	04d50000 	ldrbeq	r0, [r5], #0
   10880:	56140000 	ldrpl	r0, [r4], -r0
   10884:	14000003 	strne	r0, [r0], #-3
   10888:	00000076 	andeq	r0, r0, r6, ror r0
   1088c:	0004d514 	andeq	sp, r4, r4, lsl r5
   10890:	005d1400 	subseq	r1, sp, r0, lsl #8
   10894:	0f000000 	svceq	0x00000000
   10898:	0004db04 	andeq	sp, r4, r4, lsl #22
   1089c:	04aa1500 	strteq	r1, [sl], #1280	; 0x500
   108a0:	040f0000 	streq	r0, [pc], #-0	; 108a8 <_Min_Stack_Size+0x106a8>
   108a4:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
   108a8:	00008e13 	andeq	r8, r0, r3, lsl lr
   108ac:	00050400 	andeq	r0, r5, r0, lsl #8
   108b0:	03561400 	cmpeq	r6, #0, 8
   108b4:	76140000 	ldrvc	r0, [r4], -r0
   108b8:	14000000 	strne	r0, [r0], #-0
   108bc:	0000008e 	andeq	r0, r0, lr, lsl #1
   108c0:	00005d14 	andeq	r5, r0, r4, lsl sp
   108c4:	040f0000 	streq	r0, [pc], #-0	; 108cc <_Min_Stack_Size+0x106cc>
   108c8:	000004e6 	andeq	r0, r0, r6, ror #9
   108cc:	00005d13 	andeq	r5, r0, r3, lsl sp
   108d0:	00051e00 	andeq	r1, r5, r0, lsl #28
   108d4:	03561400 	cmpeq	r6, #0, 8
   108d8:	76140000 	ldrvc	r0, [r4], -r0
   108dc:	00000000 	andeq	r0, r0, r0
   108e0:	050a040f 	streq	r0, [sl, #-1039]	; 0xfffffbf1
   108e4:	2c090000 	stccs	0, cr0, [r9], {-0}
   108e8:	34000000 	strcc	r0, [r0], #-0
   108ec:	0a000005 	beq	10908 <_Min_Stack_Size+0x10708>
   108f0:	000000d4 	ldrdeq	r0, [r0], -r4
   108f4:	2c090002 	stccs	0, cr0, [r9], {2}
   108f8:	44000000 	strmi	r0, [r0], #-0
   108fc:	0a000005 	beq	10918 <_Min_Stack_Size+0x10718>
   10900:	000000d4 	ldrdeq	r0, [r0], -r4
   10904:	e7060000 	str	r0, [r6, -r0]
   10908:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
   1090c:	035c011d 	cmpeq	ip, #1073741831	; 0x40000007
   10910:	25100000 	ldrcs	r0, [r0, #-0]
   10914:	0c000049 	stceq	0, cr0, [r0], {73}	; 0x49
   10918:	85012105 	strhi	r2, [r1, #-261]	; 0xfffffefb
   1091c:	11000005 	tstne	r0, r5
   10920:	00004105 	andeq	r4, r0, r5, lsl #2
   10924:	85012305 	strhi	r2, [r1, #-773]	; 0xfffffcfb
   10928:	00000005 	andeq	r0, r0, r5
   1092c:	003ee011 	eorseq	lr, lr, r1, lsl r0
   10930:	01240500 			; <UNDEFINED> instruction: 0x01240500
   10934:	0000005d 	andeq	r0, r0, sp, asr r0
   10938:	3daf1104 	stfccs	f1, [pc, #16]!	; 10950 <_Min_Stack_Size+0x10750>
   1093c:	25050000 	strcs	r0, [r5, #-0]
   10940:	00058b01 	andeq	r8, r5, r1, lsl #22
   10944:	0f000800 	svceq	0x00000800
   10948:	00055004 	andeq	r5, r5, r4
   1094c:	44040f00 	strmi	r0, [r4], #-3840	; 0xfffff100
   10950:	10000005 	andne	r0, r0, r5
   10954:	00004096 	muleq	r0, r6, r0
   10958:	013d0518 	teqeq	sp, r8, lsl r5
   1095c:	000005d3 	ldrdeq	r0, [r0], -r3
   10960:	00409011 	subeq	r9, r0, r1, lsl r0
   10964:	013e0500 	teqeq	lr, r0, lsl #10
   10968:	000005d3 	ldrdeq	r0, [r0], -r3
   1096c:	3f681100 	svccc	0x00681100
   10970:	3f050000 	svccc	0x00050000
   10974:	0005d301 	andeq	sp, r5, r1, lsl #6
   10978:	50110600 	andspl	r0, r1, r0, lsl #12
   1097c:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
   10980:	003a0140 	eorseq	r0, sl, r0, asr #2
   10984:	110c0000 	mrsne	r0, (UNDEF: 12)
   10988:	00004100 	andeq	r4, r0, r0, lsl #2
   1098c:	56014305 	strpl	r4, [r1], -r5, lsl #6
   10990:	10000000 	andne	r0, r0, r0
   10994:	003a0900 	eorseq	r0, sl, r0, lsl #18
   10998:	05e30000 	strbeq	r0, [r3, #0]!
   1099c:	d40a0000 	strle	r0, [sl], #-0
   109a0:	02000000 	andeq	r0, r0, #0
   109a4:	40201000 	eormi	r1, r0, r0
   109a8:	05100000 	ldreq	r0, [r0, #-0]
   109ac:	06250156 			; <UNDEFINED> instruction: 0x06250156
   109b0:	b6110000 	ldrlt	r0, [r1], -r0
   109b4:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
   109b8:	01700159 	cmneq	r0, r9, asr r1
   109bc:	11000000 	mrsne	r0, (UNDEF: 0)
   109c0:	00003e55 	andeq	r3, r0, r5, asr lr
   109c4:	5d015a05 	vstrpl	s10, [r1, #-20]	; 0xffffffec
   109c8:	04000000 	streq	r0, [r0], #-0
   109cc:	0040f511 	subeq	pc, r0, r1, lsl r5	; <UNPREDICTABLE>
   109d0:	015b0500 	cmpeq	fp, r0, lsl #10
   109d4:	00000170 	andeq	r0, r0, r0, ror r1
   109d8:	3f371108 	svccc	0x00371108
   109dc:	5c050000 	stcpl	0, cr0, [r5], {-0}
   109e0:	00062501 	andeq	r2, r6, r1, lsl #10
   109e4:	0f000c00 	svceq	0x00000c00
   109e8:	00017004 	andeq	r7, r1, r4
   109ec:	410b1000 	mrsmi	r1, (UNDEF: 11)
   109f0:	05500000 	ldrbeq	r0, [r0, #-0]
   109f4:	06c80160 	strbeq	r0, [r8], r0, ror #2
   109f8:	b3110000 	tstlt	r1, #0
   109fc:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
   10a00:	04a40163 	strteq	r0, [r4], #355	; 0x163
   10a04:	11000000 	mrsne	r0, (UNDEF: 0)
   10a08:	00003dbd 			; <UNDEFINED> instruction: 0x00003dbd
   10a0c:	fc016405 	stc2	4, cr6, [r1], {5}
   10a10:	04000000 	streq	r0, [r0], #-0
   10a14:	003fd911 	eorseq	sp, pc, r1, lsl r9	; <UNPREDICTABLE>
   10a18:	01650500 	cmneq	r5, r0, lsl #10
   10a1c:	000000fc 	strdeq	r0, [r0], -ip
   10a20:	402c110c 	eormi	r1, ip, ip, lsl #2
   10a24:	66050000 	strvs	r0, [r5], -r0
   10a28:	0000fc01 	andeq	pc, r0, r1, lsl #24
   10a2c:	98111400 	ldmdals	r1, {sl, ip}
   10a30:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
   10a34:	06c80167 	strbeq	r0, [r8], r7, ror #2
   10a38:	111c0000 	tstne	ip, r0
   10a3c:	00003ef5 	strdeq	r3, [r0], -r5
   10a40:	5d016805 	stcpl	8, cr6, [r1, #-20]	; 0xffffffec
   10a44:	24000000 	strcs	r0, [r0], #-0
   10a48:	00404111 	subeq	r4, r0, r1, lsl r1
   10a4c:	01690500 	cmneq	r9, r0, lsl #10
   10a50:	000000fc 	strdeq	r0, [r0], -ip
   10a54:	3fe71128 	svccc	0x00e71128
   10a58:	6a050000 	bvs	150a60 <_Min_Stack_Size+0x150860>
   10a5c:	0000fc01 	andeq	pc, r0, r1, lsl #24
   10a60:	9d113000 	ldcls	0, cr3, [r1, #-0]
   10a64:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
   10a68:	00fc016b 	rscseq	r0, ip, fp, ror #2
   10a6c:	11380000 	teqne	r8, r0
   10a70:	00004127 	andeq	r4, r0, r7, lsr #2
   10a74:	fc016c05 	stc2	12, cr6, [r1], {5}
   10a78:	40000000 	andmi	r0, r0, r0
   10a7c:	0040d511 	subeq	sp, r0, r1, lsl r5
   10a80:	016d0500 	cmneq	sp, r0, lsl #10
   10a84:	000000fc 	strdeq	r0, [r0], -ip
   10a88:	aa090048 	bge	250bb0 <_Min_Stack_Size+0x2509b0>
   10a8c:	d8000004 	stmdale	r0, {r2}
   10a90:	0a000006 	beq	10ab0 <_Min_Stack_Size+0x108b0>
   10a94:	000000d4 	ldrdeq	r0, [r0], -r4
   10a98:	040f0007 	streq	r0, [pc], #-7	; 10aa0 <_Min_Stack_Size+0x108a0>
   10a9c:	000005e3 	andeq	r0, r0, r3, ror #11
   10aa0:	0006e916 	andeq	lr, r6, r6, lsl r9
   10aa4:	03561400 	cmpeq	r6, #0, 8
   10aa8:	0f000000 	svceq	0x00000000
   10aac:	0006de04 	andeq	sp, r6, r4, lsl #28
   10ab0:	91040f00 	tstls	r4, r0, lsl #30
   10ab4:	0f000005 	svceq	0x00000005
   10ab8:	00018604 	andeq	r8, r1, r4, lsl #12
   10abc:	07061600 	streq	r1, [r6, -r0, lsl #12]
   10ac0:	5d140000 	ldcpl	0, cr0, [r4, #-0]
   10ac4:	00000000 	andeq	r0, r0, r0
   10ac8:	070c040f 	streq	r0, [ip, -pc, lsl #8]
   10acc:	040f0000 	streq	r0, [pc], #-0	; 10ad4 <_Min_Stack_Size+0x108d4>
   10ad0:	000006fb 	strdeq	r0, [r0], -fp
   10ad4:	062b040f 	strteq	r0, [fp], -pc, lsl #8
   10ad8:	01040000 	mrseq	r0, (UNDEF: 4)
   10adc:	01000045 	tsteq	r0, r5, asr #32
   10ae0:	00006b79 	andeq	r6, r0, r9, ror fp
   10ae4:	45540d00 	ldrbmi	r0, [r4, #-3328]	; 0xfffff300
   10ae8:	01080000 	mrseq	r0, (UNDEF: 8)
   10aec:	0007487b 	andeq	r4, r7, fp, ror r8
   10af0:	45ca0c00 	strbmi	r0, [sl, #3072]	; 0xc00
   10af4:	8d010000 	stchi	0, cr0, [r1, #-0]
   10af8:	00000041 	andeq	r0, r0, r1, asr #32
   10afc:	41060c00 	tstmi	r6, r0, lsl #24
   10b00:	90010000 	andls	r0, r1, r0
   10b04:	00000748 	andeq	r0, r0, r8, asr #14
   10b08:	040f0004 	streq	r0, [pc], #-4	; 10b10 <_Min_Stack_Size+0x10910>
   10b0c:	00000723 	andeq	r0, r0, r3, lsr #14
   10b10:	00455b04 	subeq	r5, r5, r4, lsl #22
   10b14:	23910100 	orrscs	r0, r1, #0, 2
   10b18:	17000007 	strne	r0, [r0, -r7]
   10b1c:	00004900 	andeq	r4, r0, r0, lsl #18
   10b20:	18020b01 	stmdane	r2, {r0, r8, r9, fp}
   10b24:	26000007 	strcs	r0, [r0], -r7
   10b28:	14080070 	strne	r0, [r8], #-112	; 0xffffff90
   10b2c:	01000000 	mrseq	r0, (UNDEF: 0)
   10b30:	0007b29c 	muleq	r7, ip, r2
   10b34:	45611800 	strbmi	r1, [r1, #-2048]!	; 0xfffff800
   10b38:	0b010000 	bleq	50b40 <_Min_Stack_Size+0x50940>
   10b3c:	00035602 	andeq	r5, r3, r2, lsl #12
   10b40:	0016fc00 	andseq	pc, r6, r0, lsl #24
   10b44:	74701900 	ldrbtvc	r1, [r0], #-2304	; 0xfffff700
   10b48:	0b010072 	bleq	50d18 <_Min_Stack_Size+0x50b18>
   10b4c:	00007602 	andeq	r7, r0, r2, lsl #12
   10b50:	00171d00 	andseq	r1, r7, r0, lsl #26
   10b54:	00631a00 	rsbeq	r1, r3, r0, lsl #20
   10b58:	b2020d01 	andlt	r0, r2, #1, 26	; 0x40
   10b5c:	3e000007 	cdpcc	0, 0, cr0, cr0, cr7, {0}
   10b60:	1b000017 	blne	10bc4 <_Min_Stack_Size+0x109c4>
   10b64:	0000496e 	andeq	r4, r0, lr, ror #18
   10b68:	5d020e01 	stcpl	14, cr0, [r2, #-4]
   10b6c:	8f000000 	svchi	0x00000000
   10b70:	00000017 	andeq	r0, r0, r7, lsl r0
   10b74:	074e040f 	strbeq	r0, [lr, -pc, lsl #8]
   10b78:	95000000 	strls	r0, [r0, #-0]
   10b7c:	04000000 	streq	r0, [r0], #-0
   10b80:	00387300 	eorseq	r7, r8, r0, lsl #6
   10b84:	7d010400 	cfstrsvc	mvf0, [r1, #-0]
   10b88:	01000049 	tsteq	r0, r9, asr #32
   10b8c:	000049ec 	andeq	r4, r0, ip, ror #19
   10b90:	00004a14 	andeq	r4, r0, r4, lsl sl
   10b94:	00000e08 	andeq	r0, r0, r8, lsl #28
   10b98:	00000000 	andeq	r0, r0, r0
   10b9c:	00005f89 	andeq	r5, r0, r9, lsl #31
   10ba0:	00487e02 	subeq	r7, r8, r2, lsl #28
   10ba4:	77070100 	strvc	r0, [r7, -r0, lsl #2]
   10ba8:	3c000000 	stccc	0, cr0, [r0], {-0}
   10bac:	1c080070 	stcne	0, cr0, [r8], {112}	; 0x70
   10bb0:	01000000 	mrseq	r0, (UNDEF: 0)
   10bb4:	0000779c 	muleq	r0, ip, r7
   10bb8:	484d0300 	stmdami	sp, {r8, r9}^
   10bbc:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
   10bc0:	00000079 	andeq	r0, r0, r9, ror r0
   10bc4:	000017b1 			; <UNDEFINED> instruction: 0x000017b1
   10bc8:	646e6504 	strbtvs	r6, [lr], #-1284	; 0xfffffafc
   10bcc:	800a0100 	andhi	r0, sl, r0, lsl #2
   10bd0:	05000000 	streq	r0, [r0, #-0]
   10bd4:	00004a7d 	andeq	r4, r0, sp, ror sl
   10bd8:	00870b01 	addeq	r0, r7, r1, lsl #22
   10bdc:	03050000 	movweq	r0, #20480	; 0x5000
   10be0:	20000140 	andcs	r0, r0, r0, asr #2
   10be4:	004a7805 	subeq	r7, sl, r5, lsl #16
   10be8:	870c0100 	strhi	r0, [ip, -r0, lsl #2]
   10bec:	01000000 	mrseq	r0, (UNDEF: 0)
   10bf0:	04060053 	streq	r0, [r6], #-83	; 0xffffffad
   10bf4:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
   10bf8:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
   10bfc:	00ca0801 	sbceq	r0, sl, r1, lsl #16
   10c00:	04090000 	streq	r0, [r9], #-0
   10c04:	00000080 	andeq	r0, r0, r0, lsl #1
   10c08:	646e6504 	strbtvs	r6, [lr], #-1284	; 0xfffffafc
   10c0c:	800a0100 	andhi	r0, sl, r0, lsl #2
   10c10:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	1117550e 	tstne	r7, lr, lsl #10
       c:	00171001 	andseq	r1, r7, r1
      10:	00240200 	eoreq	r0, r4, r0, lsl #4
      14:	0b3e0b0b 	bleq	f82c48 <_Min_Stack_Size+0xf82a48>
      18:	00000e03 	andeq	r0, r0, r3, lsl #28
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
  {
    bitstatus = SET;
      1c:	03001603 	movweq	r1, #1539	; 0x603
  }
  else
  {
    bitstatus = RESET;
      20:	3b0b3a0e 	blcc	2ce860 <_Min_Stack_Size+0x2ce660>
  }
  /* Return the flag status */
  return bitstatus;
      24:	0013490b 	andseq	r4, r3, fp, lsl #18
}
      28:	00240400 	eoreq	r0, r4, r0, lsl #8
      2c:	0b3e0b0b 	bleq	f82c60 <_Min_Stack_Size+0xf82a60>
      30:	00000803 	andeq	r0, r0, r3, lsl #16
      34:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
      38:	06000013 			; <UNDEFINED> instruction: 0x06000013
      3c:	0b0b0113 	bleq	2c0490 <_Min_Stack_Size+0x2c0290>
      40:	0b3b0b3a 	bleq	ec2d30 <_Min_Stack_Size+0xec2b30>
      44:	00001301 	andeq	r1, r0, r1, lsl #6
      48:	03000d07 	movweq	r0, #3335	; 0xd07
      4c:	3b0b3a0e 	blcc	2ce88c <_Min_Stack_Size+0x2ce68c>
      50:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      54:	0800000b 	stmdaeq	r0, {r0, r1, r3}
      58:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      5c:	0b3b0b3a 	bleq	ec2d4c <_Min_Stack_Size+0xec2b4c>
      60:	0b381349 	bleq	e04d8c <_Min_Stack_Size+0xe04b8c>
      64:	26090000 	strcs	r0, [r9], -r0
      68:	00134900 	andseq	r4, r3, r0, lsl #18
      6c:	01010a00 	tsteq	r1, r0, lsl #20
      70:	13011349 	movwne	r1, #4937	; 0x1349
      74:	210b0000 	mrscs	r0, (UNDEF: 11)
      78:	2f134900 	svccs	0x00134900
      7c:	0c00000b 	stceq	0, cr0, [r0], {11}
      80:	0b0b0104 	bleq	2c0498 <_Min_Stack_Size+0x2c0298>
      84:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      88:	00001301 	andeq	r1, r0, r1, lsl #6
      8c:	0300280d 	movweq	r2, #2061	; 0x80d
      90:	000d1c0e 	andeq	r1, sp, lr, lsl #24
      94:	00280e00 	eoreq	r0, r8, r0, lsl #28
      98:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
      9c:	130f0000 	movwne	r0, #61440	; 0xf000
      a0:	3a0b0b01 	bcc	2c2cac <_Min_Stack_Size+0x2c2aac>
      a4:	01053b0b 	tsteq	r5, fp, lsl #22
      a8:	10000013 	andne	r0, r0, r3, lsl r0
      ac:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      b4:	0b381349 	bleq	e04de0 <_Min_Stack_Size+0xe04be0>
      b8:	0d110000 	ldceq	0, cr0, [r1, #-0]
      bc:	3a0e0300 	bcc	380cc4 <_Min_Stack_Size+0x380ac4>
      c0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      c4:	000b3813 	andeq	r3, fp, r3, lsl r8
      c8:	00161200 	andseq	r1, r6, r0, lsl #4
      cc:	0b3a0e03 	bleq	e838e0 <_Min_Stack_Size+0xe836e0>
      d0:	1349053b 	movtne	r0, #38203	; 0x953b
      d4:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
      d8:	03193f00 	tsteq	r9, #0, 30
      dc:	3b0b3a0e 	blcc	2ce91c <_Min_Stack_Size+0x2ce71c>
      e0:	1119270b 	tstne	r9, fp, lsl #14
      e4:	40061201 	andmi	r1, r6, r1, lsl #4
      e8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
      ec:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
      f0:	03193f01 	tsteq	r9, #1, 30
      f4:	3b0b3a0e 	blcc	2ce934 <_Min_Stack_Size+0x2ce734>
      f8:	11192705 	tstne	r9, r5, lsl #14
      fc:	40061201 	andmi	r1, r6, r1, lsl #4
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }
  
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
     100:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     104:	00001301 	andeq	r1, r0, r1, lsl #6
     108:	03003415 	movweq	r3, #1045	; 0x415
  {
    /* Set the default values */
    i2sdiv = 2;
     10c:	3b0b3a08 	blcc	2ce934 <_Min_Stack_Size+0x2ce734>
    i2sodd = 0;
     110:	02134905 	andseq	r4, r3, #81920	; 0x14000
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
     114:	16000018 			; <UNDEFINED> instruction: 0x16000018
     118:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     11c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     120:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     124:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     128:	3a0e0300 	bcc	380d30 <_Min_Stack_Size+0x380b30>
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
     12c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     130:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
     134:	96184006 	ldrls	r4, [r8], -r6
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
     138:	00001942 	andeq	r1, r0, r2, asr #18
     13c:	03012e18 	movweq	r2, #7704	; 0x1e18

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     140:	3b0b3a0e 	blcc	2ce980 <_Min_Stack_Size+0x2ce780>
     144:	11192705 	tstne	r9, r5, lsl #14
     148:	40061201 	andmi	r1, r6, r1, lsl #4
     14c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;   
     150:	00001301 	andeq	r1, r0, r1, lsl #6
     154:	03003419 	movweq	r3, #1049	; 0x419
}
     158:	3b0b3a0e 	blcc	2ce998 <_Min_Stack_Size+0x2ce798>
     15c:	3f134905 	svccc	0x00134905
     160:	00193c19 	andseq	r3, r9, r9, lsl ip
         break;
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
         *(uint16_t*) arg = getSn_KPALVTR(sn);
         break;
     164:	00341a00 	eorseq	r1, r4, r0, lsl #20
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     168:	0b3a0e03 	bleq	e8397c <_Min_Stack_Size+0xe8377c>
     16c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     170:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     174:	01000000 	mrseq	r0, (UNDEF: 0)
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     178:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     17c:	0e030b13 	vmoveq.32	d3[0], r0
     180:	17550e1b 	smmlane	r5, fp, lr, r0
     184:	17100111 			; <UNDEFINED> instruction: 0x17100111
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
     188:	24020000 	strcs	r0, [r2], #-0
     18c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     190:	000e030b 	andeq	r0, lr, fp, lsl #6
     194:	00160300 	andseq	r0, r6, r0, lsl #6
     198:	0b3a0e03 	bleq	e839ac <_Min_Stack_Size+0xe837ac>
     19c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
         break;
     1a0:	24040000 	strcs	r0, [r4], #-0
      case SO_REMAINSIZE:
         if(getSn_MR(sn) == Sn_MR_TCP)
     1a4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     1a8:	0008030b 	andeq	r0, r8, fp, lsl #6
     1ac:	00350500 	eorseq	r0, r5, r0, lsl #10
     1b0:	00001349 	andeq	r1, r0, r9, asr #6
     1b4:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1b8:	07000013 	smladeq	r0, r3, r0, r0
     1bc:	0b0b0104 	bleq	2c05d4 <_Min_Stack_Size+0x2c03d4>
     1c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     1c4:	00001301 	andeq	r1, r0, r1, lsl #6
         else
            *(uint16_t*)arg = sock_remained_size[sn];
     1c8:	03002808 	movweq	r2, #2056	; 0x808
     1cc:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     1d0:	00280900 	eoreq	r0, r8, r0, lsl #18
         break;
     1d4:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
      case SO_PACKINFO:
         CHECK_SOCKMODE(Sn_MR_TCP);
     1d8:	130a0000 	movwne	r0, #40960	; 0xa000
     1dc:	3a0b0b01 	bcc	2c2de8 <_Min_Stack_Size+0x2c2be8>
     1e0:	01053b0b 	tsteq	r5, fp, lsl #22
     1e4:	0b000013 	bleq	238 <_Min_Stack_Size+0x38>
     1e8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     1ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     1f0:	0b381349 	bleq	e04f1c <_Min_Stack_Size+0xe04d1c>
         *(uint8_t*)arg = sock_pack_info[sn];
     1f4:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     1f8:	3a0e0300 	bcc	380e00 <_Min_Stack_Size+0x380c00>
         break;
     1fc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      default:
         return SOCKERR_SOCKOPT;
     200:	000b3813 	andeq	r3, fp, r3, lsl r8
   }
   return SOCK_OK;
     204:	00160d00 	andseq	r0, r6, r0, lsl #26
}
     208:	0b3a0e03 	bleq	e83a1c <_Min_Stack_Size+0xe8381c>
     20c:	1349053b 	movtne	r0, #38203	; 0x953b
     210:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
     214:	03193f01 	tsteq	r9, #1, 30
     218:	3b0b3a0e 	blcc	2cea58 <_Min_Stack_Size+0x2ce858>
     21c:	1119270b 	tstne	r9, fp, lsl #14
     220:	40061201 	andmi	r1, r6, r1, lsl #4
     224:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     228:	00001301 	andeq	r1, r0, r1, lsl #6
       fixed_header[1] = fixed_header[1] | 0x80;
       // second byte is number of 128s
       fixed_header[2] = remainLen / 128;
   }

	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     22c:	0300050f 	movweq	r0, #1295	; 0x50f
     230:	3b0b3a0e 	blcc	2cea70 <_Min_Stack_Size+0x2ce870>
     234:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     238:	10000018 	andne	r0, r0, r8, lsl r0
     23c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     240:	0b3b0b3a 	bleq	ec2f30 <_Min_Stack_Size+0xec2d30>
     244:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     248:	0f110000 	svceq	0x00110000
     24c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
	memset(packet, 0, sizeof(packet));
     250:	12000013 	andne	r0, r0, #19
     254:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     258:	0b3b0b3a 	bleq	ec2f48 <_Min_Stack_Size+0xec2d48>
	memcpy(packet, fixed_header, sizeof(fixed_header));
     25c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     260:	01130000 	tsteq	r3, r0
     264:	01134901 	tsteq	r3, r1, lsl #18
     268:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	13490021 	movtne	r0, #36897	; 0x9021
     270:	00000b2f 	andeq	r0, r0, pc, lsr #22
     274:	03000515 	movweq	r0, #1301	; 0x515
     278:	3b0b3a08 	blcc	2ceaa0 <_Min_Stack_Size+0x2ce8a0>
     27c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     280:	16000018 			; <UNDEFINED> instruction: 0x16000018
     284:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     288:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     28c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     290:	0000193c 	andeq	r1, r0, ip, lsr r9
     294:	03003417 	movweq	r3, #1047	; 0x417

	// Send the packet
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     298:	3b0b3a0e 	blcc	2cead8 <_Min_Stack_Size+0x2ce8d8>
     29c:	3f13490b 	svccc	0x0013490b
     2a0:	00180219 	andseq	r0, r8, r9, lsl r2
     2a4:	00211800 	eoreq	r1, r1, r0, lsl #16
     2a8:	052f1349 	streq	r1, [pc, #-841]!	; ffffff67 <BootRAM+0xef70708>
     2ac:	01000000 	mrseq	r0, (UNDEF: 0)
		return -1;
     2b0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
	}

	return 1;
     2b4:	0e030b13 	vmoveq.32	d3[0], r0
     2b8:	17550e1b 	smmlane	r5, fp, lr, r0
}
     2bc:	17100111 			; <UNDEFINED> instruction: 0x17100111
     2c0:	16020000 	strne	r0, [r2], -r0
     2c4:	3a0e0300 	bcc	380ecc <_Min_Stack_Size+0x380ccc>
     2c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2cc:	03000013 	movweq	r0, #19
     2d0:	0b0b0024 	bleq	2c0368 <_Min_Stack_Size+0x2c0168>
     2d4:	0e030b3e 	vmoveq.16	d3[0], r0
     2d8:	24040000 	strcs	r0, [r4], #-0
     2dc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     2e0:	0008030b 	andeq	r0, r8, fp, lsl #6
     2e4:	01040500 	tsteq	r4, r0, lsl #10
     2e8:	0b3a0b0b 	bleq	e82f1c <_Min_Stack_Size+0xe82d1c>
     2ec:	1301053b 	movwne	r0, #5435	; 0x153b
     2f0:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
     2f4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     2f8:	0700000d 	streq	r0, [r0, -sp]
     2fc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     300:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     304:	00001349 	andeq	r1, r0, r9, asr #6
     308:	3f012e08 	svccc	0x00012e08
     30c:	3a0e0319 	bcc	380f78 <_Min_Stack_Size+0x380d78>
     310:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     314:	11134919 	tstne	r3, r9, lsl r9
     318:	40061201 	andmi	r1, r6, r1, lsl #4
     31c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     320:	00001301 	andeq	r1, r0, r1, lsl #6
     324:	03000509 	movweq	r0, #1289	; 0x509
     328:	3b0b3a08 	blcc	2ceb50 <_Min_Stack_Size+0x2ce950>
     32c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     330:	0a000018 	beq	398 <_Min_Stack_Size+0x198>
     334:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     338:	0b3b0b3a 	bleq	ec3028 <_Min_Stack_Size+0xec2e28>
     33c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     340:	0f0b0000 	svceq	0x000b0000
     344:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     348:	0c000013 	stceq	0, cr0, [r0], {19}
     34c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     350:	0b3b0b3a 	bleq	ec3040 <_Min_Stack_Size+0xec2e40>
     354:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     358:	340d0000 	strcc	r0, [sp], #-0
     35c:	3a0e0300 	bcc	380f64 <_Min_Stack_Size+0x380d64>
     360:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     364:	00180213 	andseq	r0, r8, r3, lsl r2
     368:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
     36c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     370:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     374:	13491927 	movtne	r1, #39207	; 0x9927
     378:	06120111 			; <UNDEFINED> instruction: 0x06120111
     37c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     380:	00130119 	andseq	r0, r3, r9, lsl r1
     384:	00050f00 	andeq	r0, r5, r0, lsl #30
     388:	0b3a0803 	bleq	e8239c <_Min_Stack_Size+0xe8219c>
     38c:	1349053b 	movtne	r0, #38203	; 0x953b
     390:	00001802 	andeq	r1, r0, r2, lsl #16
     394:	03003410 	movweq	r3, #1040	; 0x410
     398:	3b0b3a08 	blcc	2cebc0 <_Min_Stack_Size+0x2ce9c0>
     39c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     3a0:	11000018 	tstne	r0, r8, lsl r0
     3a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     3a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     3ac:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     3b0:	05120000 	ldreq	r0, [r2, #-0]
     3b4:	3a0e0300 	bcc	380fbc <_Min_Stack_Size+0x380dbc>
     3b8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     3bc:	00180213 	andseq	r0, r8, r3, lsl r2
     3c0:	01011300 	mrseq	r1, SP_irq
     3c4:	13011349 	movwne	r1, #4937	; 0x1349
     3c8:	21140000 	tstcs	r4, r0
     3cc:	2f134900 	svccs	0x00134900
     3d0:	1500000b 	strne	r0, [r0, #-11]
     3d4:	0b0b000f 	bleq	2c0418 <_Min_Stack_Size+0x2c0218>
     3d8:	01000000 	mrseq	r0, (UNDEF: 0)
     3dc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     3e0:	0e030b13 	vmoveq.32	d3[0], r0
     3e4:	01111755 	tsteq	r1, r5, asr r7
     3e8:	00001710 	andeq	r1, r0, r0, lsl r7
     3ec:	03001602 	movweq	r1, #1538	; 0x602
     3f0:	3b0b3a0e 	blcc	2cec30 <_Min_Stack_Size+0x2cea30>
     3f4:	0013490b 	andseq	r4, r3, fp, lsl #18
     3f8:	00240300 	eoreq	r0, r4, r0, lsl #6
     3fc:	0b3e0b0b 	bleq	f83030 <_Min_Stack_Size+0xf82e30>
     400:	00000e03 	andeq	r0, r0, r3, lsl #28
     404:	0b002404 	bleq	941c <_Min_Stack_Size+0x921c>
     408:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     40c:	05000008 	streq	r0, [r0, #-8]
     410:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     414:	0b3a0b0b 	bleq	e83048 <_Min_Stack_Size+0xe82e48>
     418:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     41c:	0d060000 	stceq	0, cr0, [r6, #-0]
     420:	3a0e0300 	bcc	381028 <_Min_Stack_Size+0x380e28>
     424:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     428:	000b3813 	andeq	r3, fp, r3, lsl r8
     42c:	00150700 	andseq	r0, r5, r0, lsl #14
     430:	00001927 	andeq	r1, r0, r7, lsr #18
     434:	0b000f08 	bleq	405c <_Min_Stack_Size+0x3e5c>
     438:	0013490b 	andseq	r4, r3, fp, lsl #18
     43c:	01130900 	tsteq	r3, r0, lsl #18
     440:	0b0b0803 	bleq	2c2454 <_Min_Stack_Size+0x2c2254>
     444:	0b3b0b3a 	bleq	ec3134 <_Min_Stack_Size+0xec2f34>
     448:	00001301 	andeq	r1, r0, r1, lsl #6
     44c:	0b01130a 	bleq	4507c <_Min_Stack_Size+0x44e7c>
     450:	3b0b3a0b 	blcc	2cec84 <_Min_Stack_Size+0x2cea84>
     454:	0013010b 	andseq	r0, r3, fp, lsl #2
     458:	01150b00 	tsteq	r5, r0, lsl #22
     45c:	13491927 	movtne	r1, #39207	; 0x9927
     460:	00001301 	andeq	r1, r0, r1, lsl #6
     464:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
     468:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     46c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     470:	00001301 	andeq	r1, r0, r1, lsl #6
     474:	2700150e 	strcs	r1, [r0, -lr, lsl #10]
     478:	00134919 	andseq	r4, r3, r9, lsl r9
     47c:	01170f00 	tsteq	r7, r0, lsl #30
     480:	0b0b0803 	bleq	2c2494 <_Min_Stack_Size+0x2c2294>
     484:	0b3b0b3a 	bleq	ec3174 <_Min_Stack_Size+0xec2f74>
     488:	00001301 	andeq	r1, r0, r1, lsl #6
     48c:	03000d10 	movweq	r0, #3344	; 0xd10
     490:	3b0b3a08 	blcc	2cecb8 <_Min_Stack_Size+0x2ceab8>
     494:	0013490b 	andseq	r4, r3, fp, lsl #18
     498:	000d1100 	andeq	r1, sp, r0, lsl #2
     49c:	0b3a0803 	bleq	e824b0 <_Min_Stack_Size+0xe822b0>
     4a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4a4:	00000b38 	andeq	r0, r0, r8, lsr fp
     4a8:	49010112 	stmdbmi	r1, {r1, r4, r8}
     4ac:	00130113 	andseq	r0, r3, r3, lsl r1
     4b0:	00211300 	eoreq	r1, r1, r0, lsl #6
     4b4:	0b2f1349 	bleq	bc51e0 <_Min_Stack_Size+0xbc4fe0>
     4b8:	04140000 	ldreq	r0, [r4], #-0
     4bc:	3a0b0b01 	bcc	2c30c8 <_Min_Stack_Size+0x2c2ec8>
     4c0:	010b3b0b 	tsteq	fp, fp, lsl #22
     4c4:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
     4c8:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     4cc:	00000d1c 	andeq	r0, r0, ip, lsl sp
     4d0:	03001616 	movweq	r1, #1558	; 0x616
     4d4:	3b0b3a0e 	blcc	2ced14 <_Min_Stack_Size+0x2ceb14>
     4d8:	00134905 	andseq	r4, r3, r5, lsl #18
     4dc:	01131700 	tsteq	r3, r0, lsl #14
     4e0:	0b0b0e03 	bleq	2c3cf4 <_Min_Stack_Size+0x2c3af4>
     4e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     4e8:	00001301 	andeq	r1, r0, r1, lsl #6
     4ec:	03000d18 	movweq	r0, #3352	; 0xd18
     4f0:	3b0b3a08 	blcc	2ced18 <_Min_Stack_Size+0x2ceb18>
     4f4:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     4f8:	1900000b 	stmdbne	r0, {r0, r1, r3}
     4fc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     500:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     504:	0b381349 	bleq	e05230 <_Min_Stack_Size+0xe05030>
     508:	041a0000 	ldreq	r0, [sl], #-0
     50c:	3a0b0b01 	bcc	2c3118 <_Min_Stack_Size+0x2c2f18>
     510:	01053b0b 	tsteq	r5, fp, lsl #22
     514:	1b000013 	blne	568 <_Min_Stack_Size+0x368>
     518:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     51c:	0b3a0e03 	bleq	e83d30 <_Min_Stack_Size+0xe83b30>
     520:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     524:	06120111 			; <UNDEFINED> instruction: 0x06120111
     528:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     52c:	1c000019 	stcne	0, cr0, [r0], {25}
     530:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     534:	0b3a0e03 	bleq	e83d48 <_Min_Stack_Size+0xe83b48>
     538:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     53c:	01111349 	tsteq	r1, r9, asr #6
     540:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     544:	01194297 			; <UNDEFINED> instruction: 0x01194297
     548:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     54c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     550:	0b3b0b3a 	bleq	ec3240 <_Min_Stack_Size+0xec3040>
     554:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     558:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
     55c:	03193f01 	tsteq	r9, #1, 30
     560:	3b0b3a0e 	blcc	2ceda0 <_Min_Stack_Size+0x2ceba0>
     564:	1119270b 	tstne	r9, fp, lsl #14
     568:	40061201 	andmi	r1, r6, r1, lsl #4
     56c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     570:	00001301 	andeq	r1, r0, r1, lsl #6
     574:	0300051f 	movweq	r0, #1311	; 0x51f
     578:	3b0b3a08 	blcc	2ceda0 <_Min_Stack_Size+0x2ceba0>
     57c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     580:	20000018 	andcs	r0, r0, r8, lsl r0
     584:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     588:	0b3a0e03 	bleq	e83d9c <_Min_Stack_Size+0xe83b9c>
     58c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     590:	01111349 	tsteq	r1, r9, asr #6
     594:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     598:	00194297 	mulseq	r9, r7, r2
     59c:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
     5a0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     5a4:	0b3b0b3a 	bleq	ec3294 <_Min_Stack_Size+0xec3094>
     5a8:	13491927 	movtne	r1, #39207	; 0x9927
     5ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
     5b0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     5b4:	00130119 	andseq	r0, r3, r9, lsl r1
     5b8:	00342200 	eorseq	r2, r4, r0, lsl #4
     5bc:	0b3a0803 	bleq	e825d0 <_Min_Stack_Size+0xe823d0>
     5c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     5c4:	00001802 	andeq	r1, r0, r2, lsl #16
     5c8:	03003423 	movweq	r3, #1059	; 0x423
     5cc:	3b0b3a0e 	blcc	2cee0c <_Min_Stack_Size+0x2cec0c>
     5d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     5d4:	24000018 	strcs	r0, [r0], #-24	; 0xffffffe8
     5d8:	0b0b000f 	bleq	2c061c <_Min_Stack_Size+0x2c041c>
     5dc:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
     5e0:	03193f01 	tsteq	r9, #1, 30
     5e4:	3b0b3a0e 	blcc	2cee24 <_Min_Stack_Size+0x2cec24>
     5e8:	11192705 	tstne	r9, r5, lsl #14
     5ec:	40061201 	andmi	r1, r6, r1, lsl #4
     5f0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     5f4:	00001301 	andeq	r1, r0, r1, lsl #6
     5f8:	03003426 	movweq	r3, #1062	; 0x426
     5fc:	3b0b3a08 	blcc	2cee24 <_Min_Stack_Size+0x2cec24>
     600:	02134905 	andseq	r4, r3, #81920	; 0x14000
     604:	27000018 	smladcs	r0, r8, r0, r0
     608:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     60c:	0b3a0e03 	bleq	e83e20 <_Min_Stack_Size+0xe83c20>
     610:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     614:	01111349 	tsteq	r1, r9, asr #6
     618:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     61c:	01194296 			; <UNDEFINED> instruction: 0x01194296
     620:	28000013 	stmdacs	r0, {r0, r1, r4}
     624:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     628:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     62c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     630:	34290000 	strtcc	r0, [r9], #-0
     634:	3a0e0300 	bcc	38123c <_Min_Stack_Size+0x38103c>
     638:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     63c:	00180213 	andseq	r0, r8, r3, lsl r2
     640:	002e2a00 	eoreq	r2, lr, r0, lsl #20
     644:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     648:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     64c:	13491927 	movtne	r1, #39207	; 0x9927
     650:	06120111 			; <UNDEFINED> instruction: 0x06120111
     654:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     658:	2b000019 	blcs	6c4 <_Min_Stack_Size+0x4c4>
     65c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     660:	0b3b0b3a 	bleq	ec3350 <_Min_Stack_Size+0xec3150>
     664:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     668:	00001802 	andeq	r1, r0, r2, lsl #16
     66c:	01110100 	tsteq	r1, r0, lsl #2
     670:	0b130e25 	bleq	4c3f0c <_Min_Stack_Size+0x4c3d0c>
     674:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     678:	01111755 	tsteq	r1, r5, asr r7
     67c:	00001710 	andeq	r1, r0, r0, lsl r7
     680:	0b002402 	bleq	9690 <_Min_Stack_Size+0x9490>
     684:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     688:	0300000e 	movweq	r0, #14
     68c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     690:	0b3b0b3a 	bleq	ec3380 <_Min_Stack_Size+0xec3180>
     694:	00001349 	andeq	r1, r0, r9, asr #6
     698:	0b002404 	bleq	96b0 <_Min_Stack_Size+0x94b0>
     69c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     6a0:	05000008 	streq	r0, [r0, #-8]
     6a4:	0b0b000f 	bleq	2c06e8 <_Min_Stack_Size+0x2c04e8>
     6a8:	00001349 	andeq	r1, r0, r9, asr #6
     6ac:	27001506 	strcs	r1, [r0, -r6, lsl #10]
     6b0:	07000019 	smladeq	r0, r9, r0, r0
     6b4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     6b8:	0b3a0b0b 	bleq	e832ec <_Min_Stack_Size+0xe830ec>
     6bc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     6c0:	0d080000 	stceq	0, cr0, [r8, #-0]
     6c4:	3a0e0300 	bcc	3812cc <_Min_Stack_Size+0x3810cc>
     6c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6cc:	000b3813 	andeq	r3, fp, r3, lsl r8
     6d0:	01130900 	tsteq	r3, r0, lsl #18
     6d4:	0b0b0803 	bleq	2c26e8 <_Min_Stack_Size+0x2c24e8>
     6d8:	0b3b0b3a 	bleq	ec33c8 <_Min_Stack_Size+0xec31c8>
     6dc:	00001301 	andeq	r1, r0, r1, lsl #6
     6e0:	0b01130a 	bleq	45310 <_Min_Stack_Size+0x45110>
     6e4:	3b0b3a0b 	blcc	2cef18 <_Min_Stack_Size+0x2ced18>
     6e8:	0013010b 	andseq	r0, r3, fp, lsl #2
     6ec:	01150b00 	tsteq	r5, r0, lsl #22
     6f0:	13491927 	movtne	r1, #39207	; 0x9927
     6f4:	00001301 	andeq	r1, r0, r1, lsl #6
     6f8:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
     6fc:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     700:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     704:	00001301 	andeq	r1, r0, r1, lsl #6
     708:	2700150e 	strcs	r1, [r0, -lr, lsl #10]
     70c:	00134919 	andseq	r4, r3, r9, lsl r9
     710:	01170f00 	tsteq	r7, r0, lsl #30
     714:	0b0b0803 	bleq	2c2728 <_Min_Stack_Size+0x2c2528>
     718:	0b3b0b3a 	bleq	ec3408 <_Min_Stack_Size+0xec3208>
     71c:	00001301 	andeq	r1, r0, r1, lsl #6
     720:	03000d10 	movweq	r0, #3344	; 0xd10
     724:	3b0b3a08 	blcc	2cef4c <_Min_Stack_Size+0x2ced4c>
     728:	0013490b 	andseq	r4, r3, fp, lsl #18
     72c:	000d1100 	andeq	r1, sp, r0, lsl #2
     730:	0b3a0803 	bleq	e82744 <_Min_Stack_Size+0xe82544>
     734:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     738:	00000b38 	andeq	r0, r0, r8, lsr fp
     73c:	49010112 	stmdbmi	r1, {r1, r4, r8}
     740:	00130113 	andseq	r0, r3, r3, lsl r1
     744:	00211300 	eoreq	r1, r1, r0, lsl #6
     748:	0b2f1349 	bleq	bc5474 <_Min_Stack_Size+0xbc5274>
     74c:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     750:	03193f01 	tsteq	r9, #1, 30
     754:	3b0b3a0e 	blcc	2cef94 <_Min_Stack_Size+0x2ced94>
     758:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     75c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     760:	96184006 	ldrls	r4, [r8], -r6
     764:	13011942 	movwne	r1, #6466	; 0x1942
     768:	05150000 	ldreq	r0, [r5, #-0]
     76c:	3a0e0300 	bcc	381374 <_Min_Stack_Size+0x381174>
     770:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     774:	00180213 	andseq	r0, r8, r3, lsl r2
     778:	00341600 	eorseq	r1, r4, r0, lsl #12
     77c:	0b3a0803 	bleq	e82790 <_Min_Stack_Size+0xe82590>
     780:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     784:	00001802 	andeq	r1, r0, r2, lsl #16
     788:	3f012e17 	svccc	0x00012e17
     78c:	3a0e0319 	bcc	3813f8 <_Min_Stack_Size+0x3811f8>
     790:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     794:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     798:	96184006 	ldrls	r4, [r8], -r6
     79c:	13011942 	movwne	r1, #6466	; 0x1942
     7a0:	05180000 	ldreq	r0, [r8, #-0]
     7a4:	3a080300 	bcc	2013ac <_Min_Stack_Size+0x2011ac>
     7a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     7ac:	00180213 	andseq	r0, r8, r3, lsl r2
     7b0:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
     7b4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     7b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     7bc:	13491927 	movtne	r1, #39207	; 0x9927
     7c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7c4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     7c8:	00130119 	andseq	r0, r3, r9, lsl r1
     7cc:	00051a00 	andeq	r1, r5, r0, lsl #20
     7d0:	0b3a0803 	bleq	e827e4 <_Min_Stack_Size+0xe825e4>
     7d4:	1349053b 	movtne	r0, #38203	; 0x953b
     7d8:	00001802 	andeq	r1, r0, r2, lsl #16
     7dc:	0300341b 	movweq	r3, #1051	; 0x41b
     7e0:	3b0b3a08 	blcc	2cf008 <_Min_Stack_Size+0x2cee08>
     7e4:	02134905 	andseq	r4, r3, #81920	; 0x14000
     7e8:	1c000018 	stcne	0, cr0, [r0], {24}
     7ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     7f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     7f4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     7f8:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
     7fc:	03193f01 	tsteq	r9, #1, 30
     800:	3b0b3a0e 	blcc	2cf040 <_Min_Stack_Size+0x2cee40>
     804:	11192705 	tstne	r9, r5, lsl #14
     808:	40061201 	andmi	r1, r6, r1, lsl #4
     80c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     810:	00001301 	andeq	r1, r0, r1, lsl #6
     814:	0300051e 	movweq	r0, #1310	; 0x51e
     818:	3b0b3a0e 	blcc	2cf058 <_Min_Stack_Size+0x2cee58>
     81c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     820:	1f000018 	svcne	0x00000018
     824:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     828:	0b3b0b3a 	bleq	ec3518 <_Min_Stack_Size+0xec3318>
     82c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     830:	0000193c 	andeq	r1, r0, ip, lsr r9
     834:	01110100 	tsteq	r1, r0, lsl #2
     838:	0b130e25 	bleq	4c40d4 <_Min_Stack_Size+0x4c3ed4>
     83c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     840:	01111755 	tsteq	r1, r5, asr r7
     844:	00001710 	andeq	r1, r0, r0, lsl r7
     848:	03001602 	movweq	r1, #1538	; 0x602
     84c:	3b0b3a0e 	blcc	2cf08c <_Min_Stack_Size+0x2cee8c>
     850:	0013490b 	andseq	r4, r3, fp, lsl #18
     854:	00240300 	eoreq	r0, r4, r0, lsl #6
     858:	0b3e0b0b 	bleq	f8348c <_Min_Stack_Size+0xf8328c>
     85c:	00000e03 	andeq	r0, r0, r3, lsl #28
     860:	0b002404 	bleq	9878 <_Min_Stack_Size+0x9678>
     864:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     868:	05000008 	streq	r0, [r0, #-8]
     86c:	0b0b000f 	bleq	2c08b0 <_Min_Stack_Size+0x2c06b0>
     870:	00001349 	andeq	r1, r0, r9, asr #6
     874:	27001506 	strcs	r1, [r0, -r6, lsl #10]
     878:	07000019 	smladeq	r0, r9, r0, r0
     87c:	13490101 	movtne	r0, #37121	; 0x9101
     880:	00001301 	andeq	r1, r0, r1, lsl #6
     884:	49002108 	stmdbmi	r0, {r3, r8, sp}
     888:	000b2f13 	andeq	r2, fp, r3, lsl pc
     88c:	01040900 	tsteq	r4, r0, lsl #18
     890:	0b3a0b0b 	bleq	e834c4 <_Min_Stack_Size+0xe832c4>
     894:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     898:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
     89c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     8a0:	0b00000d 	bleq	8dc <_Min_Stack_Size+0x6dc>
     8a4:	08030028 	stmdaeq	r3, {r3, r5}
     8a8:	00000d1c 	andeq	r0, r0, ip, lsl sp
     8ac:	0b01130c 	bleq	454e4 <_Min_Stack_Size+0x452e4>
     8b0:	3b0b3a05 	blcc	2cf0cc <_Min_Stack_Size+0x2ceecc>
     8b4:	0013010b 	andseq	r0, r3, fp, lsl #2
     8b8:	000d0d00 	andeq	r0, sp, r0, lsl #26
     8bc:	0b3a0803 	bleq	e828d0 <_Min_Stack_Size+0xe826d0>
     8c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     8c4:	00000b38 	andeq	r0, r0, r8, lsr fp
     8c8:	03000d0e 	movweq	r0, #3342	; 0xd0e
     8cc:	3b0b3a0e 	blcc	2cf10c <_Min_Stack_Size+0x2cef0c>
     8d0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     8d4:	0f00000b 	svceq	0x0000000b
     8d8:	13490021 	movtne	r0, #36897	; 0x9021
     8dc:	0000052f 	andeq	r0, r0, pc, lsr #10
     8e0:	03011710 	movweq	r1, #5904	; 0x1710
     8e4:	3a0b0b0e 	bcc	2c3524 <_Min_Stack_Size+0x2c3324>
     8e8:	010b3b0b 	tsteq	fp, fp, lsl #22
     8ec:	11000013 	tstne	r0, r3, lsl r0
     8f0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     8f4:	0b3b0b3a 	bleq	ec35e4 <_Min_Stack_Size+0xec33e4>
     8f8:	00001349 	andeq	r1, r0, r9, asr #6
     8fc:	03002e12 	movweq	r2, #3602	; 0xe12
     900:	3b0b3a0e 	blcc	2cf140 <_Min_Stack_Size+0x2cef40>
     904:	1119270b 	tstne	r9, fp, lsl #14
     908:	40061201 	andmi	r1, r6, r1, lsl #4
     90c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     910:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     914:	3a0e0300 	bcc	38151c <_Min_Stack_Size+0x38131c>
     918:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     91c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     920:	96184006 	ldrls	r4, [r8], -r6
     924:	00001942 	andeq	r1, r0, r2, asr #18
     928:	3f012e14 	svccc	0x00012e14
     92c:	3a0e0319 	bcc	381598 <_Min_Stack_Size+0x381398>
     930:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     934:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     938:	96184006 	ldrls	r4, [r8], -r6
     93c:	13011942 	movwne	r1, #6466	; 0x1942
     940:	34150000 	ldrcc	r0, [r5], #-0
     944:	3a080300 	bcc	20154c <_Min_Stack_Size+0x20134c>
     948:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     94c:	00180213 	andseq	r0, r8, r3, lsl r2
     950:	00051600 	andeq	r1, r5, r0, lsl #12
     954:	0b3a0803 	bleq	e82968 <_Min_Stack_Size+0xe82768>
     958:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     95c:	00001802 	andeq	r1, r0, r2, lsl #16
     960:	03000517 	movweq	r0, #1303	; 0x517
     964:	3b0b3a0e 	blcc	2cf1a4 <_Min_Stack_Size+0x2cefa4>
     968:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     96c:	18000018 	stmdane	r0, {r3, r4}
     970:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     974:	0b3a0e03 	bleq	e84188 <_Min_Stack_Size+0xe83f88>
     978:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     97c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     980:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     984:	00130119 	andseq	r0, r3, r9, lsl r1
     988:	00341900 	eorseq	r1, r4, r0, lsl #18
     98c:	0b3a0803 	bleq	e829a0 <_Min_Stack_Size+0xe827a0>
     990:	1349053b 	movtne	r0, #38203	; 0x953b
     994:	00001802 	andeq	r1, r0, r2, lsl #16
     998:	3f012e1a 	svccc	0x00012e1a
     99c:	3a0e0319 	bcc	381608 <_Min_Stack_Size+0x381408>
     9a0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     9a4:	11134919 	tstne	r3, r9, lsl r9
     9a8:	40061201 	andmi	r1, r6, r1, lsl #4
     9ac:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     9b0:	00001301 	andeq	r1, r0, r1, lsl #6
     9b4:	0300051b 	movweq	r0, #1307	; 0x51b
     9b8:	3b0b3a0e 	blcc	2cf1f8 <_Min_Stack_Size+0x2ceff8>
     9bc:	02134905 	andseq	r4, r3, #81920	; 0x14000
     9c0:	1c000018 	stcne	0, cr0, [r0], {24}
     9c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     9c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     9cc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     9d0:	0a1d0000 	beq	7409d8 <_Min_Stack_Size+0x7407d8>
     9d4:	3a0e0300 	bcc	3815dc <_Min_Stack_Size+0x3813dc>
     9d8:	11053b0b 	tstne	r5, fp, lsl #22
     9dc:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
     9e0:	08030005 	stmdaeq	r3, {r0, r2}
     9e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     9e8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     9ec:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
     9f0:	03193f00 	tsteq	r9, #0, 30
     9f4:	3b0b3a0e 	blcc	2cf234 <_Min_Stack_Size+0x2cf034>
     9f8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     9fc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     a00:	96184006 	ldrls	r4, [r8], -r6
     a04:	00001942 	andeq	r1, r0, r2, asr #18
     a08:	3f002e20 	svccc	0x00002e20
     a0c:	3a0e0319 	bcc	381678 <_Min_Stack_Size+0x381478>
     a10:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     a14:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     a18:	97184006 	ldrls	r4, [r8, -r6]
     a1c:	00001942 	andeq	r1, r0, r2, asr #18
     a20:	3f012e21 	svccc	0x00012e21
     a24:	3a0e0319 	bcc	381690 <_Min_Stack_Size+0x381490>
     a28:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     a2c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     a30:	97184006 	ldrls	r4, [r8, -r6]
     a34:	13011942 	movwne	r1, #6466	; 0x1942
     a38:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
     a3c:	03193f00 	tsteq	r9, #0, 30
     a40:	3b0b3a0e 	blcc	2cf280 <_Min_Stack_Size+0x2cf080>
     a44:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     a48:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     a4c:	97184006 	ldrls	r4, [r8, -r6]
     a50:	00001942 	andeq	r1, r0, r2, asr #18
     a54:	03003423 	movweq	r3, #1059	; 0x423
     a58:	3b0b3a0e 	blcc	2cf298 <_Min_Stack_Size+0x2cf098>
     a5c:	3f13490b 	svccc	0x0013490b
     a60:	00180219 	andseq	r0, r8, r9, lsl r2
     a64:	00342400 	eorseq	r2, r4, r0, lsl #8
     a68:	0b3a0803 	bleq	e82a7c <_Min_Stack_Size+0xe8287c>
     a6c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a70:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     a74:	01000000 	mrseq	r0, (UNDEF: 0)
     a78:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     a7c:	0e030b13 	vmoveq.32	d3[0], r0
     a80:	17550e1b 	smmlane	r5, fp, lr, r0
     a84:	17100111 			; <UNDEFINED> instruction: 0x17100111
     a88:	24020000 	strcs	r0, [r2], #-0
     a8c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     a90:	0008030b 	andeq	r0, r8, fp, lsl #6
     a94:	00240300 	eoreq	r0, r4, r0, lsl #6
     a98:	0b3e0b0b 	bleq	f836cc <_Min_Stack_Size+0xf834cc>
     a9c:	00000e03 	andeq	r0, r0, r3, lsl #28
     aa0:	03001604 	movweq	r1, #1540	; 0x604
     aa4:	3b0b3a0e 	blcc	2cf2e4 <_Min_Stack_Size+0x2cf0e4>
     aa8:	0013490b 	andseq	r4, r3, fp, lsl #18
     aac:	000f0500 	andeq	r0, pc, r0, lsl #10
     ab0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     ab4:	13060000 	movwne	r0, #24576	; 0x6000
     ab8:	0b0e0301 	bleq	3816c4 <_Min_Stack_Size+0x3814c4>
     abc:	3b0b3a0b 	blcc	2cf2f0 <_Min_Stack_Size+0x2cf0f0>
     ac0:	0013010b 	andseq	r0, r3, fp, lsl #2
     ac4:	000d0700 	andeq	r0, sp, r0, lsl #14
     ac8:	0b3a0803 	bleq	e82adc <_Min_Stack_Size+0xe828dc>
     acc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ad0:	00000b38 	andeq	r0, r0, r8, lsr fp
     ad4:	03000d08 	movweq	r0, #3336	; 0xd08
     ad8:	3b0b3a0e 	blcc	2cf318 <_Min_Stack_Size+0x2cf118>
     adc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     ae0:	0900000b 	stmdbeq	r0, {r0, r1, r3}
     ae4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     ae8:	0b3a0e03 	bleq	e842fc <_Min_Stack_Size+0xe840fc>
     aec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     af0:	01111349 	tsteq	r1, r9, asr #6
     af4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     af8:	01194297 			; <UNDEFINED> instruction: 0x01194297
     afc:	0a000013 	beq	b50 <_Min_Stack_Size+0x950>
     b00:	08030005 	stmdaeq	r3, {r0, r2}
     b04:	0b3b0b3a 	bleq	ec37f4 <_Min_Stack_Size+0xec35f4>
     b08:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     b0c:	340b0000 	strcc	r0, [fp], #-0
     b10:	3a080300 	bcc	201718 <_Min_Stack_Size+0x201518>
     b14:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b18:	00180213 	andseq	r0, r8, r3, lsl r2
     b1c:	00050c00 	andeq	r0, r5, r0, lsl #24
     b20:	0b3a0e03 	bleq	e84334 <_Min_Stack_Size+0xe84134>
     b24:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     b28:	00001802 	andeq	r1, r0, r2, lsl #16
     b2c:	0300340d 	movweq	r3, #1037	; 0x40d
     b30:	3b0b3a0e 	blcc	2cf370 <_Min_Stack_Size+0x2cf170>
     b34:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b38:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
     b3c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     b40:	0b3a0e03 	bleq	e84354 <_Min_Stack_Size+0xe84154>
     b44:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     b48:	01111349 	tsteq	r1, r9, asr #6
     b4c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b50:	01194296 			; <UNDEFINED> instruction: 0x01194296
     b54:	0f000013 	svceq	0x00000013
     b58:	13490101 	movtne	r0, #37121	; 0x9101
     b5c:	00001301 	andeq	r1, r0, r1, lsl #6
     b60:	49002110 	stmdbmi	r0, {r4, r8, sp}
     b64:	000b2f13 	andeq	r2, fp, r3, lsl pc
     b68:	11010000 	mrsne	r0, (UNDEF: 1)
     b6c:	130e2501 	movwne	r2, #58625	; 0xe501
     b70:	1b0e030b 	blne	3817a4 <_Min_Stack_Size+0x3815a4>
     b74:	1117550e 	tstne	r7, lr, lsl #10
     b78:	00171001 	andseq	r1, r7, r1
     b7c:	00160200 	andseq	r0, r6, r0, lsl #4
     b80:	0b3a0e03 	bleq	e84394 <_Min_Stack_Size+0xe84194>
     b84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     b88:	24030000 	strcs	r0, [r3], #-0
     b8c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     b90:	000e030b 	andeq	r0, lr, fp, lsl #6
     b94:	00240400 	eoreq	r0, r4, r0, lsl #8
     b98:	0b3e0b0b 	bleq	f837cc <_Min_Stack_Size+0xf835cc>
     b9c:	00000803 	andeq	r0, r0, r3, lsl #16
     ba0:	0b000f05 	bleq	47bc <_Min_Stack_Size+0x45bc>
     ba4:	0013490b 	andseq	r4, r3, fp, lsl #18
     ba8:	01130600 	tsteq	r3, r0, lsl #12
     bac:	0b0b0e03 	bleq	2c43c0 <_Min_Stack_Size+0x2c41c0>
     bb0:	0b3b0b3a 	bleq	ec38a0 <_Min_Stack_Size+0xec36a0>
     bb4:	00001301 	andeq	r1, r0, r1, lsl #6
     bb8:	03000d07 	movweq	r0, #3335	; 0xd07
     bbc:	3b0b3a08 	blcc	2cf3e4 <_Min_Stack_Size+0x2cf1e4>
     bc0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     bc4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     bc8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     bcc:	0b3b0b3a 	bleq	ec38bc <_Min_Stack_Size+0xec36bc>
     bd0:	0b381349 	bleq	e058fc <_Min_Stack_Size+0xe056fc>
     bd4:	01090000 	mrseq	r0, (UNDEF: 9)
     bd8:	01134901 	tsteq	r3, r1, lsl #18
     bdc:	0a000013 	beq	c30 <_Min_Stack_Size+0xa30>
     be0:	13490021 	movtne	r0, #36897	; 0x9021
     be4:	00000b2f 	andeq	r0, r0, pc, lsr #22
     be8:	3f012e0b 	svccc	0x00012e0b
     bec:	3a0e0319 	bcc	381858 <_Min_Stack_Size+0x381658>
     bf0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     bf4:	11134919 	tstne	r3, r9, lsl r9
     bf8:	40061201 	andmi	r1, r6, r1, lsl #4
     bfc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     c00:	00001301 	andeq	r1, r0, r1, lsl #6
     c04:	0300050c 	movweq	r0, #1292	; 0x50c
     c08:	3b0b3a08 	blcc	2cf430 <_Min_Stack_Size+0x2cf230>
     c0c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     c10:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
     c14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     c18:	0b3a0e03 	bleq	e8442c <_Min_Stack_Size+0xe8422c>
     c1c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     c20:	01111349 	tsteq	r1, r9, asr #6
     c24:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     c28:	01194296 			; <UNDEFINED> instruction: 0x01194296
     c2c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     c30:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     c34:	0b3b0b3a 	bleq	ec3924 <_Min_Stack_Size+0xec3724>
     c38:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     c3c:	340f0000 	strcc	r0, [pc], #-0	; c44 <_Min_Stack_Size+0xa44>
     c40:	3a080300 	bcc	201848 <_Min_Stack_Size+0x201648>
     c44:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c48:	00180213 	andseq	r0, r8, r3, lsl r2
     c4c:	00341000 	eorseq	r1, r4, r0
     c50:	0b3a0e03 	bleq	e84464 <_Min_Stack_Size+0xe84264>
     c54:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c58:	00001802 	andeq	r1, r0, r2, lsl #16
     c5c:	3f012e11 	svccc	0x00012e11
     c60:	3a0e0319 	bcc	3818cc <_Min_Stack_Size+0x3816cc>
     c64:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     c68:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     c6c:	96184006 	ldrls	r4, [r8], -r6
     c70:	13011942 	movwne	r1, #6466	; 0x1942
     c74:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     c78:	03193f01 	tsteq	r9, #1, 30
     c7c:	3b0b3a0e 	blcc	2cf4bc <_Min_Stack_Size+0x2cf2bc>
     c80:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     c84:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c88:	97184006 	ldrls	r4, [r8, -r6]
     c8c:	13011942 	movwne	r1, #6466	; 0x1942
     c90:	34130000 	ldrcc	r0, [r3], #-0
     c94:	3a0e0300 	bcc	38189c <_Min_Stack_Size+0x38169c>
     c98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c9c:	00180213 	andseq	r0, r8, r3, lsl r2
     ca0:	002e1400 	eoreq	r1, lr, r0, lsl #8
     ca4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ca8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     cac:	01111927 	tsteq	r1, r7, lsr #18
     cb0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     cb4:	00194297 	mulseq	r9, r7, r2
     cb8:	00341500 	eorseq	r1, r4, r0, lsl #10
     cbc:	0b3a0e03 	bleq	e844d0 <_Min_Stack_Size+0xe842d0>
     cc0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     cc4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     cc8:	01000000 	mrseq	r0, (UNDEF: 0)
     ccc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     cd0:	0e030b13 	vmoveq.32	d3[0], r0
     cd4:	01111755 	tsteq	r1, r5, asr r7
     cd8:	00001710 	andeq	r1, r0, r0, lsl r7
     cdc:	0b002402 	bleq	9cec <_Min_Stack_Size+0x9aec>
     ce0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     ce4:	0300000e 	movweq	r0, #14
     ce8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     cec:	0b3b0b3a 	bleq	ec39dc <_Min_Stack_Size+0xec37dc>
     cf0:	00001349 	andeq	r1, r0, r9, asr #6
     cf4:	0b002404 	bleq	9d0c <_Min_Stack_Size+0x9b0c>
     cf8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     cfc:	05000008 	streq	r0, [r0, #-8]
     d00:	050b0113 	streq	r0, [fp, #-275]	; 0xfffffeed
     d04:	0b3b0b3a 	bleq	ec39f4 <_Min_Stack_Size+0xec37f4>
     d08:	00001301 	andeq	r1, r0, r1, lsl #6
     d0c:	03000d06 	movweq	r0, #3334	; 0xd06
     d10:	3b0b3a0e 	blcc	2cf550 <_Min_Stack_Size+0x2cf350>
     d14:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     d18:	0700000b 	streq	r0, [r0, -fp]
     d1c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     d20:	0b3b0b3a 	bleq	ec3a10 <_Min_Stack_Size+0xec3810>
     d24:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     d28:	0d080000 	stceq	0, cr0, [r8, #-0]
     d2c:	3a080300 	bcc	201934 <_Min_Stack_Size+0x201734>
     d30:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d34:	00053813 	andeq	r3, r5, r3, lsl r8
     d38:	01010900 	tsteq	r1, r0, lsl #18
     d3c:	13011349 	movwne	r1, #4937	; 0x1349
     d40:	210a0000 	mrscs	r0, (UNDEF: 10)
     d44:	2f134900 	svccs	0x00134900
     d48:	0b00000b 	bleq	d7c <_Min_Stack_Size+0xb7c>
     d4c:	13490035 	movtne	r0, #36917	; 0x9035
     d50:	210c0000 	mrscs	r0, (UNDEF: 12)
     d54:	2f134900 	svccs	0x00134900
     d58:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
     d5c:	0b0b0113 	bleq	2c11b0 <_Min_Stack_Size+0x2c0fb0>
     d60:	0b3b0b3a 	bleq	ec3a50 <_Min_Stack_Size+0xec3850>
     d64:	00001301 	andeq	r1, r0, r1, lsl #6
     d68:	03000d0e 	movweq	r0, #3342	; 0xd0e
     d6c:	3b0b3a08 	blcc	2cf594 <_Min_Stack_Size+0x2cf394>
     d70:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     d74:	0f00000b 	svceq	0x0000000b
     d78:	13490026 	movtne	r0, #36902	; 0x9026
     d7c:	13100000 	tstne	r0, #0
     d80:	3a0b0b01 	bcc	2c398c <_Min_Stack_Size+0x2c378c>
     d84:	01053b0b 	tsteq	r5, fp, lsl #22
     d88:	11000013 	tstne	r0, r3, lsl r0
     d8c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     d90:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     d94:	0b381349 	bleq	e05ac0 <_Min_Stack_Size+0xe058c0>
     d98:	0d120000 	ldceq	0, cr0, [r2, #-0]
     d9c:	3a080300 	bcc	2019a4 <_Min_Stack_Size+0x2017a4>
     da0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     da4:	000b3813 	andeq	r3, fp, r3, lsl r8
     da8:	00161300 	andseq	r1, r6, r0, lsl #6
     dac:	0b3a0e03 	bleq	e845c0 <_Min_Stack_Size+0xe843c0>
     db0:	1349053b 	movtne	r0, #38203	; 0x953b
     db4:	04140000 	ldreq	r0, [r4], #-0
     db8:	3a0b0b01 	bcc	2c39c4 <_Min_Stack_Size+0x2c37c4>
     dbc:	01053b0b 	tsteq	r5, fp, lsl #22
     dc0:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
     dc4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     dc8:	00000d1c 	andeq	r0, r0, ip, lsl sp
     dcc:	3f012e16 	svccc	0x00012e16
     dd0:	3a0e0319 	bcc	381a3c <_Min_Stack_Size+0x38183c>
     dd4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     dd8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     ddc:	97184006 	ldrls	r4, [r8, -r6]
     de0:	13011942 	movwne	r1, #6466	; 0x1942
     de4:	05170000 	ldreq	r0, [r7, #-0]
     de8:	3a0e0300 	bcc	3819f0 <_Min_Stack_Size+0x3817f0>
     dec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     df0:	00180213 	andseq	r0, r8, r3, lsl r2
     df4:	00341800 	eorseq	r1, r4, r0, lsl #16
     df8:	0b3a0e03 	bleq	e8460c <_Min_Stack_Size+0xe8440c>
     dfc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e00:	00001802 	andeq	r1, r0, r2, lsl #16
     e04:	0b000f19 	bleq	4a70 <_Min_Stack_Size+0x4870>
     e08:	0013490b 	andseq	r4, r3, fp, lsl #18
     e0c:	00341a00 	eorseq	r1, r4, r0, lsl #20
     e10:	0b3a0e03 	bleq	e84624 <_Min_Stack_Size+0xe84424>
     e14:	1349053b 	movtne	r0, #38203	; 0x953b
     e18:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     e1c:	01000000 	mrseq	r0, (UNDEF: 0)
     e20:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     e24:	0e030b13 	vmoveq.32	d3[0], r0
     e28:	01111755 	tsteq	r1, r5, asr r7
     e2c:	00001710 	andeq	r1, r0, r0, lsl r7
     e30:	0b002402 	bleq	9e40 <_Min_Stack_Size+0x9c40>
     e34:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     e38:	0300000e 	movweq	r0, #14
     e3c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     e40:	0b3b0b3a 	bleq	ec3b30 <_Min_Stack_Size+0xec3930>
     e44:	00001349 	andeq	r1, r0, r9, asr #6
     e48:	0b002404 	bleq	9e60 <_Min_Stack_Size+0x9c60>
     e4c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     e50:	05000008 	streq	r0, [r0, #-8]
     e54:	13490035 	movtne	r0, #36917	; 0x9035
     e58:	04060000 	streq	r0, [r6], #-0
     e5c:	3a0b0b01 	bcc	2c3a68 <_Min_Stack_Size+0x2c3868>
     e60:	01053b0b 	tsteq	r5, fp, lsl #22
     e64:	07000013 	smladeq	r0, r3, r0, r0
     e68:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     e6c:	00000d1c 	andeq	r0, r0, ip, lsl sp
     e70:	03002808 	movweq	r2, #2056	; 0x808
     e74:	000d1c08 	andeq	r1, sp, r8, lsl #24
     e78:	00160900 	andseq	r0, r6, r0, lsl #18
     e7c:	0b3a0e03 	bleq	e84690 <_Min_Stack_Size+0xe84490>
     e80:	1349053b 	movtne	r0, #38203	; 0x953b
     e84:	130a0000 	movwne	r0, #40960	; 0xa000
     e88:	3a0b0b01 	bcc	2c3a94 <_Min_Stack_Size+0x2c3894>
     e8c:	01053b0b 	tsteq	r5, fp, lsl #22
     e90:	0b000013 	bleq	ee4 <_Min_Stack_Size+0xce4>
     e94:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     e98:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     e9c:	0b381349 	bleq	e05bc8 <_Min_Stack_Size+0xe059c8>
     ea0:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     ea4:	3a0e0300 	bcc	381aac <_Min_Stack_Size+0x3818ac>
     ea8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     eac:	000b3813 	andeq	r3, fp, r3, lsl r8
     eb0:	01130d00 	tsteq	r3, r0, lsl #26
     eb4:	0b3a0b0b 	bleq	e83ae8 <_Min_Stack_Size+0xe838e8>
     eb8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     ebc:	0d0e0000 	stceq	0, cr0, [lr, #-0]
     ec0:	3a0e0300 	bcc	381ac8 <_Min_Stack_Size+0x3818c8>
     ec4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ec8:	000b3813 	andeq	r3, fp, r3, lsl r8
     ecc:	002e0f00 	eoreq	r0, lr, r0, lsl #30
     ed0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ed4:	0b3b0b3a 	bleq	ec3bc4 <_Min_Stack_Size+0xec39c4>
     ed8:	01111927 	tsteq	r1, r7, lsr #18
     edc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     ee0:	00194297 	mulseq	r9, r7, r2
     ee4:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
     ee8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     eec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ef0:	01111927 	tsteq	r1, r7, lsr #18
     ef4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     ef8:	01194297 			; <UNDEFINED> instruction: 0x01194297
     efc:	11000013 	tstne	r0, r3, lsl r0
     f00:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     f04:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f08:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     f0c:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     f10:	03193f01 	tsteq	r9, #1, 30
     f14:	3b0b3a0e 	blcc	2cf754 <_Min_Stack_Size+0x2cf554>
     f18:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     f1c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     f20:	96184006 	ldrls	r4, [r8], -r6
     f24:	13011942 	movwne	r1, #6466	; 0x1942
     f28:	34130000 	ldrcc	r0, [r3], #-0
     f2c:	3a0e0300 	bcc	381b34 <_Min_Stack_Size+0x381934>
     f30:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f34:	00180213 	andseq	r0, r8, r3, lsl r2
     f38:	002e1400 	eoreq	r1, lr, r0, lsl #8
     f3c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     f40:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f44:	13491927 	movtne	r1, #39207	; 0x9927
     f48:	06120111 			; <UNDEFINED> instruction: 0x06120111
     f4c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     f50:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
     f54:	08030034 	stmdaeq	r3, {r2, r4, r5}
     f58:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f5c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     f60:	0f160000 	svceq	0x00160000
     f64:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     f68:	17000013 	smladne	r0, r3, r0, r0
     f6c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     f70:	0b3a0e03 	bleq	e84784 <_Min_Stack_Size+0xe84584>
     f74:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     f78:	01111349 	tsteq	r1, r9, asr #6
     f7c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f80:	01194297 			; <UNDEFINED> instruction: 0x01194297
     f84:	18000013 	stmdane	r0, {r0, r1, r4}
     f88:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     f8c:	0b3a0e03 	bleq	e847a0 <_Min_Stack_Size+0xe845a0>
     f90:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     f94:	06120111 			; <UNDEFINED> instruction: 0x06120111
     f98:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     f9c:	19000019 	stmdbne	r0, {r0, r3, r4}
     fa0:	13490101 	movtne	r0, #37121	; 0x9101
     fa4:	00001301 	andeq	r1, r0, r1, lsl #6
     fa8:	4900211a 	stmdbmi	r0, {r1, r3, r4, r8, sp}
     fac:	000b2f13 	andeq	r2, fp, r3, lsl pc
     fb0:	00341b00 	eorseq	r1, r4, r0, lsl #22
     fb4:	0b3a0e03 	bleq	e847c8 <_Min_Stack_Size+0xe845c8>
     fb8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     fbc:	00001802 	andeq	r1, r0, r2, lsl #16
     fc0:	4900261c 	stmdbmi	r0, {r2, r3, r4, r9, sl, sp}
     fc4:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     fc8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     fcc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     fd0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     fd4:	0000193c 	andeq	r1, r0, ip, lsr r9
     fd8:	01110100 	tsteq	r1, r0, lsl #2
     fdc:	0b130e25 	bleq	4c4878 <_Min_Stack_Size+0x4c4678>
     fe0:	17550e03 	ldrbne	r0, [r5, -r3, lsl #28]
     fe4:	17100111 			; <UNDEFINED> instruction: 0x17100111
     fe8:	24020000 	strcs	r0, [r2], #-0
     fec:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     ff0:	000e030b 	andeq	r0, lr, fp, lsl #6
     ff4:	00160300 	andseq	r0, r6, r0, lsl #6
     ff8:	0b3a0e03 	bleq	e8480c <_Min_Stack_Size+0xe8460c>
     ffc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1000:	24040000 	strcs	r0, [r4], #-0
    1004:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1008:	0008030b 	andeq	r0, r8, fp, lsl #6
    100c:	00350500 	eorseq	r0, r5, r0, lsl #10
    1010:	00001349 	andeq	r1, r0, r9, asr #6
    1014:	49010106 	stmdbmi	r1, {r1, r2, r8}
    1018:	00130113 	andseq	r0, r3, r3, lsl r1
    101c:	00210700 	eoreq	r0, r1, r0, lsl #14
    1020:	0b2f1349 	bleq	bc5d4c <_Min_Stack_Size+0xbc5b4c>
    1024:	16080000 	strne	r0, [r8], -r0
    1028:	3a080300 	bcc	201c30 <_Min_Stack_Size+0x201a30>
    102c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1030:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1034:	0b0b0104 	bleq	2c144c <_Min_Stack_Size+0x2c124c>
    1038:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    103c:	00001301 	andeq	r1, r0, r1, lsl #6
    1040:	0300280a 	movweq	r2, #2058	; 0x80a
    1044:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    1048:	00160b00 	andseq	r0, r6, r0, lsl #22
    104c:	0b3a0e03 	bleq	e84860 <_Min_Stack_Size+0xe84660>
    1050:	1349053b 	movtne	r0, #38203	; 0x953b
    1054:	130c0000 	movwne	r0, #49152	; 0xc000
    1058:	3a0b0b01 	bcc	2c3c64 <_Min_Stack_Size+0x2c3a64>
    105c:	01053b0b 	tsteq	r5, fp, lsl #22
    1060:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1064:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1068:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    106c:	0b381349 	bleq	e05d98 <_Min_Stack_Size+0xe05b98>
    1070:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    1074:	3a0e0300 	bcc	381c7c <_Min_Stack_Size+0x381a7c>
    1078:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    107c:	000b3813 	andeq	r3, fp, r3, lsl r8
    1080:	01040f00 	tsteq	r4, r0, lsl #30
    1084:	0b3a0b0b 	bleq	e83cb8 <_Min_Stack_Size+0xe83ab8>
    1088:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    108c:	13100000 	tstne	r0, #0
    1090:	3a0b0b01 	bcc	2c3c9c <_Min_Stack_Size+0x2c3a9c>
    1094:	010b3b0b 	tsteq	fp, fp, lsl #22
    1098:	11000013 	tstne	r0, r3, lsl r0
    109c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    10a0:	0b3b0b3a 	bleq	ec3d90 <_Min_Stack_Size+0xec3b90>
    10a4:	0b381349 	bleq	e05dd0 <_Min_Stack_Size+0xe05bd0>
    10a8:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
    10ac:	03193f01 	tsteq	r9, #1, 30
    10b0:	3b0b3a0e 	blcc	2cf8f0 <_Min_Stack_Size+0x2cf6f0>
    10b4:	1119270b 	tstne	r9, fp, lsl #14
    10b8:	40061201 	andmi	r1, r6, r1, lsl #4
    10bc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    10c0:	00001301 	andeq	r1, r0, r1, lsl #6
    10c4:	03000513 	movweq	r0, #1299	; 0x513
    10c8:	3b0b3a0e 	blcc	2cf908 <_Min_Stack_Size+0x2cf708>
    10cc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    10d0:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
    10d4:	0b0b000f 	bleq	2c1118 <_Min_Stack_Size+0x2c0f18>
    10d8:	00001349 	andeq	r1, r0, r9, asr #6
    10dc:	3f002e15 	svccc	0x00002e15
    10e0:	3a0e0319 	bcc	381d4c <_Min_Stack_Size+0x381b4c>
    10e4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    10e8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    10ec:	96184006 	ldrls	r4, [r8], -r6
    10f0:	00001942 	andeq	r1, r0, r2, asr #18
    10f4:	3f012e16 	svccc	0x00012e16
    10f8:	3a0e0319 	bcc	381d64 <_Min_Stack_Size+0x381b64>
    10fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1100:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1104:	97184006 	ldrls	r4, [r8, -r6]
    1108:	13011942 	movwne	r1, #6466	; 0x1942
    110c:	34170000 	ldrcc	r0, [r7], #-0
    1110:	3a0e0300 	bcc	381d18 <_Min_Stack_Size+0x381b18>
    1114:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1118:	00180213 	andseq	r0, r8, r3, lsl r2
    111c:	00341800 	eorseq	r1, r4, r0, lsl #16
    1120:	0b3a0803 	bleq	e83134 <_Min_Stack_Size+0xe82f34>
    1124:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1128:	00001802 	andeq	r1, r0, r2, lsl #16
    112c:	3f012e19 	svccc	0x00012e19
    1130:	3a0e0319 	bcc	381d9c <_Min_Stack_Size+0x381b9c>
    1134:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1138:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    113c:	97184006 	ldrls	r4, [r8, -r6]
    1140:	13011942 	movwne	r1, #6466	; 0x1942
    1144:	051a0000 	ldreq	r0, [sl, #-0]
    1148:	3a0e0300 	bcc	381d50 <_Min_Stack_Size+0x381b50>
    114c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1150:	00180213 	andseq	r0, r8, r3, lsl r2
    1154:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
    1158:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    115c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1160:	13491927 	movtne	r1, #39207	; 0x9927
    1164:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1168:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    116c:	00130119 	andseq	r0, r3, r9, lsl r1
    1170:	00341c00 	eorseq	r1, r4, r0, lsl #24
    1174:	0b3a0e03 	bleq	e84988 <_Min_Stack_Size+0xe84788>
    1178:	1349053b 	movtne	r0, #38203	; 0x953b
    117c:	00001802 	andeq	r1, r0, r2, lsl #16
    1180:	0300341d 	movweq	r3, #1053	; 0x41d
    1184:	3b0b3a08 	blcc	2cf9ac <_Min_Stack_Size+0x2cf7ac>
    1188:	02134905 	andseq	r4, r3, #81920	; 0x14000
    118c:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
    1190:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1194:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1198:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    119c:	0000193c 	andeq	r1, r0, ip, lsr r9
    11a0:	01110100 	tsteq	r1, r0, lsl #2
    11a4:	0b130e25 	bleq	4c4a40 <_Min_Stack_Size+0x4c4840>
    11a8:	17550e03 	ldrbne	r0, [r5, -r3, lsl #28]
    11ac:	17100111 			; <UNDEFINED> instruction: 0x17100111
    11b0:	24020000 	strcs	r0, [r2], #-0
    11b4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    11b8:	000e030b 	andeq	r0, lr, fp, lsl #6
    11bc:	00160300 	andseq	r0, r6, r0, lsl #6
    11c0:	0b3a0e03 	bleq	e849d4 <_Min_Stack_Size+0xe847d4>
    11c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    11c8:	24040000 	strcs	r0, [r4], #-0
    11cc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    11d0:	0008030b 	andeq	r0, r8, fp, lsl #6
    11d4:	00350500 	eorseq	r0, r5, r0, lsl #10
    11d8:	00001349 	andeq	r1, r0, r9, asr #6
    11dc:	0b010406 	bleq	421fc <_Min_Stack_Size+0x41ffc>
    11e0:	3b0b3a0b 	blcc	2cfa14 <_Min_Stack_Size+0x2cf814>
    11e4:	00130105 	andseq	r0, r3, r5, lsl #2
    11e8:	00280700 	eoreq	r0, r8, r0, lsl #14
    11ec:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    11f0:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    11f4:	1c080300 	stcne	3, cr0, [r8], {-0}
    11f8:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    11fc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1200:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1204:	00001349 	andeq	r1, r0, r9, asr #6
    1208:	0b01130a 	bleq	45e38 <_Min_Stack_Size+0x45c38>
    120c:	3b0b3a0b 	blcc	2cfa40 <_Min_Stack_Size+0x2cf840>
    1210:	00130105 	andseq	r0, r3, r5, lsl #2
    1214:	000d0b00 	andeq	r0, sp, r0, lsl #22
    1218:	0b3a0803 	bleq	e8322c <_Min_Stack_Size+0xe8302c>
    121c:	1349053b 	movtne	r0, #38203	; 0x953b
    1220:	00000b38 	andeq	r0, r0, r8, lsr fp
    1224:	03000d0c 	movweq	r0, #3340	; 0xd0c
    1228:	3b0b3a0e 	blcc	2cfa68 <_Min_Stack_Size+0x2cf868>
    122c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1230:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    1234:	0b0b0113 	bleq	2c1688 <_Min_Stack_Size+0x2c1488>
    1238:	0b3b0b3a 	bleq	ec3f28 <_Min_Stack_Size+0xec3d28>
    123c:	00001301 	andeq	r1, r0, r1, lsl #6
    1240:	03000d0e 	movweq	r0, #3342	; 0xd0e
    1244:	3b0b3a0e 	blcc	2cfa84 <_Min_Stack_Size+0x2cf884>
    1248:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    124c:	0f00000b 	svceq	0x0000000b
    1250:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1254:	0b3a0e03 	bleq	e84a68 <_Min_Stack_Size+0xe84868>
    1258:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    125c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1260:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1264:	00130119 	andseq	r0, r3, r9, lsl r1
    1268:	00051000 	andeq	r1, r5, r0
    126c:	0b3a0e03 	bleq	e84a80 <_Min_Stack_Size+0xe84880>
    1270:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1274:	00001802 	andeq	r1, r0, r2, lsl #16
    1278:	0b000f11 	bleq	4ec4 <_Min_Stack_Size+0x4cc4>
    127c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1280:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
    1284:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1288:	0b3b0b3a 	bleq	ec3f78 <_Min_Stack_Size+0xec3d78>
    128c:	01111927 	tsteq	r1, r7, lsr #18
    1290:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1294:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1298:	13000013 	movwne	r0, #19
    129c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    12a0:	0b3b0b3a 	bleq	ec3f90 <_Min_Stack_Size+0xec3d90>
    12a4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    12a8:	34140000 	ldrcc	r0, [r4], #-0
    12ac:	3a080300 	bcc	201eb4 <_Min_Stack_Size+0x201cb4>
    12b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12b4:	00180213 	andseq	r0, r8, r3, lsl r2
    12b8:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
    12bc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    12c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    12c4:	01111927 	tsteq	r1, r7, lsr #18
    12c8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    12cc:	01194297 			; <UNDEFINED> instruction: 0x01194297
    12d0:	16000013 			; <UNDEFINED> instruction: 0x16000013
    12d4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    12d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    12dc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    12e0:	34170000 	ldrcc	r0, [r7], #-0
    12e4:	3a0e0300 	bcc	381eec <_Min_Stack_Size+0x381cec>
    12e8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    12ec:	00180213 	andseq	r0, r8, r3, lsl r2
    12f0:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
    12f4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    12f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    12fc:	13491927 	movtne	r1, #39207	; 0x9927
    1300:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1304:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1308:	00130119 	andseq	r0, r3, r9, lsl r1
    130c:	00341900 	eorseq	r1, r4, r0, lsl #18
    1310:	0b3a0e03 	bleq	e84b24 <_Min_Stack_Size+0xe84924>
    1314:	1349053b 	movtne	r0, #38203	; 0x953b
    1318:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    131c:	01000000 	mrseq	r0, (UNDEF: 0)
    1320:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1324:	0e030b13 	vmoveq.32	d3[0], r0
    1328:	01111755 	tsteq	r1, r5, asr r7
    132c:	00001710 	andeq	r1, r0, r0, lsl r7
    1330:	0b002402 	bleq	a340 <_Min_Stack_Size+0xa140>
    1334:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1338:	0300000e 	movweq	r0, #14
    133c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1340:	0b3b0b3a 	bleq	ec4030 <_Min_Stack_Size+0xec3e30>
    1344:	00001349 	andeq	r1, r0, r9, asr #6
    1348:	0b002404 	bleq	a360 <_Min_Stack_Size+0xa160>
    134c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1350:	05000008 	streq	r0, [r0, #-8]
    1354:	13490035 	movtne	r0, #36917	; 0x9035
    1358:	04060000 	streq	r0, [r6], #-0
    135c:	3a0b0b01 	bcc	2c3f68 <_Min_Stack_Size+0x2c3d68>
    1360:	01053b0b 	tsteq	r5, fp, lsl #22
    1364:	07000013 	smladeq	r0, r3, r0, r0
    1368:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    136c:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1370:	03002808 	movweq	r2, #2056	; 0x808
    1374:	000d1c08 	andeq	r1, sp, r8, lsl #24
    1378:	00160900 	andseq	r0, r6, r0, lsl #18
    137c:	0b3a0e03 	bleq	e84b90 <_Min_Stack_Size+0xe84990>
    1380:	1349053b 	movtne	r0, #38203	; 0x953b
    1384:	130a0000 	movwne	r0, #40960	; 0xa000
    1388:	3a0b0b01 	bcc	2c3f94 <_Min_Stack_Size+0x2c3d94>
    138c:	01053b0b 	tsteq	r5, fp, lsl #22
    1390:	0b000013 	bleq	13e4 <_Min_Stack_Size+0x11e4>
    1394:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1398:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    139c:	0b381349 	bleq	e060c8 <_Min_Stack_Size+0xe05ec8>
    13a0:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    13a4:	3a0e0300 	bcc	381fac <_Min_Stack_Size+0x381dac>
    13a8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    13ac:	000b3813 	andeq	r3, fp, r3, lsl r8
    13b0:	01130d00 	tsteq	r3, r0, lsl #26
    13b4:	0b3a0b0b 	bleq	e83fe8 <_Min_Stack_Size+0xe83de8>
    13b8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    13bc:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    13c0:	3a0e0300 	bcc	381fc8 <_Min_Stack_Size+0x381dc8>
    13c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13c8:	000b3813 	andeq	r3, fp, r3, lsl r8
    13cc:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
    13d0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    13d4:	0b3b0b3a 	bleq	ec40c4 <_Min_Stack_Size+0xec3ec4>
    13d8:	01111927 	tsteq	r1, r7, lsr #18
    13dc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    13e0:	01194296 			; <UNDEFINED> instruction: 0x01194296
    13e4:	10000013 	andne	r0, r0, r3, lsl r0
    13e8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    13ec:	0b3b0b3a 	bleq	ec40dc <_Min_Stack_Size+0xec3edc>
    13f0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    13f4:	0f110000 	svceq	0x00110000
    13f8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    13fc:	12000013 	andne	r0, r0, #19
    1400:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1404:	0b3a0e03 	bleq	e84c18 <_Min_Stack_Size+0xe84a18>
    1408:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    140c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1410:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1414:	00130119 	andseq	r0, r3, r9, lsl r1
    1418:	00341300 	eorseq	r1, r4, r0, lsl #6
    141c:	0b3a0e03 	bleq	e84c30 <_Min_Stack_Size+0xe84a30>
    1420:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1424:	00001802 	andeq	r1, r0, r2, lsl #16
    1428:	3f012e14 	svccc	0x00012e14
    142c:	3a0e0319 	bcc	382098 <_Min_Stack_Size+0x381e98>
    1430:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1434:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1438:	97184006 	ldrls	r4, [r8, -r6]
    143c:	13011942 	movwne	r1, #6466	; 0x1942
    1440:	05150000 	ldreq	r0, [r5, #-0]
    1444:	3a0e0300 	bcc	38204c <_Min_Stack_Size+0x381e4c>
    1448:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    144c:	00180213 	andseq	r0, r8, r3, lsl r2
    1450:	00341600 	eorseq	r1, r4, r0, lsl #12
    1454:	0b3a0e03 	bleq	e84c68 <_Min_Stack_Size+0xe84a68>
    1458:	1349053b 	movtne	r0, #38203	; 0x953b
    145c:	00001802 	andeq	r1, r0, r2, lsl #16
    1460:	3f012e17 	svccc	0x00012e17
    1464:	3a0e0319 	bcc	3820d0 <_Min_Stack_Size+0x381ed0>
    1468:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    146c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1470:	96184006 	ldrls	r4, [r8], -r6
    1474:	13011942 	movwne	r1, #6466	; 0x1942
    1478:	34180000 	ldrcc	r0, [r8], #-0
    147c:	3a080300 	bcc	202084 <_Min_Stack_Size+0x201e84>
    1480:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1484:	00180213 	andseq	r0, r8, r3, lsl r2
    1488:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
    148c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1490:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1494:	13491927 	movtne	r1, #39207	; 0x9927
    1498:	06120111 			; <UNDEFINED> instruction: 0x06120111
    149c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    14a0:	00130119 	andseq	r0, r3, r9, lsl r1
    14a4:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
    14a8:	0b3a0e03 	bleq	e84cbc <_Min_Stack_Size+0xe84abc>
    14ac:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    14b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    14b4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    14b8:	00130119 	andseq	r0, r3, r9, lsl r1
    14bc:	00341b00 	eorseq	r1, r4, r0, lsl #22
    14c0:	0b3a0e03 	bleq	e84cd4 <_Min_Stack_Size+0xe84ad4>
    14c4:	1349053b 	movtne	r0, #38203	; 0x953b
    14c8:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    14cc:	01000000 	mrseq	r0, (UNDEF: 0)
    14d0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    14d4:	0e030b13 	vmoveq.32	d3[0], r0
    14d8:	01111755 	tsteq	r1, r5, asr r7
    14dc:	00001710 	andeq	r1, r0, r0, lsl r7
    14e0:	0b002402 	bleq	a4f0 <_Min_Stack_Size+0xa2f0>
    14e4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    14e8:	0300000e 	movweq	r0, #14
    14ec:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    14f0:	0b3b0b3a 	bleq	ec41e0 <_Min_Stack_Size+0xec3fe0>
    14f4:	00001349 	andeq	r1, r0, r9, asr #6
    14f8:	0b002404 	bleq	a510 <_Min_Stack_Size+0xa310>
    14fc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1500:	05000008 	streq	r0, [r0, #-8]
    1504:	13490035 	movtne	r0, #36917	; 0x9035
    1508:	04060000 	streq	r0, [r6], #-0
    150c:	3a0b0b01 	bcc	2c4118 <_Min_Stack_Size+0x2c3f18>
    1510:	01053b0b 	tsteq	r5, fp, lsl #22
    1514:	07000013 	smladeq	r0, r3, r0, r0
    1518:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    151c:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1520:	03002808 	movweq	r2, #2056	; 0x808
    1524:	000d1c08 	andeq	r1, sp, r8, lsl #24
    1528:	00160900 	andseq	r0, r6, r0, lsl #18
    152c:	0b3a0e03 	bleq	e84d40 <_Min_Stack_Size+0xe84b40>
    1530:	1349053b 	movtne	r0, #38203	; 0x953b
    1534:	130a0000 	movwne	r0, #40960	; 0xa000
    1538:	3a0b0b01 	bcc	2c4144 <_Min_Stack_Size+0x2c3f44>
    153c:	01053b0b 	tsteq	r5, fp, lsl #22
    1540:	0b000013 	bleq	1594 <_Min_Stack_Size+0x1394>
    1544:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1548:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    154c:	0b381349 	bleq	e06278 <_Min_Stack_Size+0xe06078>
    1550:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    1554:	3a0e0300 	bcc	38215c <_Min_Stack_Size+0x381f5c>
    1558:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    155c:	000b3813 	andeq	r3, fp, r3, lsl r8
    1560:	01130d00 	tsteq	r3, r0, lsl #26
    1564:	0b3a0b0b 	bleq	e84198 <_Min_Stack_Size+0xe83f98>
    1568:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    156c:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    1570:	3a0e0300 	bcc	382178 <_Min_Stack_Size+0x381f78>
    1574:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1578:	000b3813 	andeq	r3, fp, r3, lsl r8
    157c:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
    1580:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1584:	0b3b0b3a 	bleq	ec4274 <_Min_Stack_Size+0xec4074>
    1588:	01111927 	tsteq	r1, r7, lsr #18
    158c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1590:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1594:	10000013 	andne	r0, r0, r3, lsl r0
    1598:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    159c:	0b3b0b3a 	bleq	ec428c <_Min_Stack_Size+0xec408c>
    15a0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    15a4:	0f110000 	svceq	0x00110000
    15a8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    15ac:	12000013 	andne	r0, r0, #19
    15b0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    15b4:	0b3b0b3a 	bleq	ec42a4 <_Min_Stack_Size+0xec40a4>
    15b8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    15bc:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    15c0:	03193f01 	tsteq	r9, #1, 30
    15c4:	3b0b3a0e 	blcc	2cfe04 <_Min_Stack_Size+0x2cfc04>
    15c8:	11192705 	tstne	r9, r5, lsl #14
    15cc:	40061201 	andmi	r1, r6, r1, lsl #4
    15d0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    15d4:	00001301 	andeq	r1, r0, r1, lsl #6
    15d8:	03000514 	movweq	r0, #1300	; 0x514
    15dc:	3b0b3a0e 	blcc	2cfe1c <_Min_Stack_Size+0x2cfc1c>
    15e0:	02134905 	andseq	r4, r3, #81920	; 0x14000
    15e4:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
    15e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    15ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    15f0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    15f4:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    15f8:	03193f01 	tsteq	r9, #1, 30
    15fc:	3b0b3a0e 	blcc	2cfe3c <_Min_Stack_Size+0x2cfc3c>
    1600:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1604:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1608:	97184006 	ldrls	r4, [r8, -r6]
    160c:	13011942 	movwne	r1, #6466	; 0x1942
    1610:	34170000 	ldrcc	r0, [r7], #-0
    1614:	3a080300 	bcc	20221c <_Min_Stack_Size+0x20201c>
    1618:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    161c:	00180213 	andseq	r0, r8, r3, lsl r2
    1620:	00341800 	eorseq	r1, r4, r0, lsl #16
    1624:	0b3a0e03 	bleq	e84e38 <_Min_Stack_Size+0xe84c38>
    1628:	1349053b 	movtne	r0, #38203	; 0x953b
    162c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1630:	01000000 	mrseq	r0, (UNDEF: 0)
    1634:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1638:	0e030b13 	vmoveq.32	d3[0], r0
    163c:	01111755 	tsteq	r1, r5, asr r7
    1640:	00001710 	andeq	r1, r0, r0, lsl r7
    1644:	0b002402 	bleq	a654 <_Min_Stack_Size+0xa454>
    1648:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    164c:	0300000e 	movweq	r0, #14
    1650:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1654:	0b3b0b3a 	bleq	ec4344 <_Min_Stack_Size+0xec4144>
    1658:	00001349 	andeq	r1, r0, r9, asr #6
    165c:	0b002404 	bleq	a674 <_Min_Stack_Size+0xa474>
    1660:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1664:	05000008 	streq	r0, [r0, #-8]
    1668:	13490035 	movtne	r0, #36917	; 0x9035
    166c:	04060000 	streq	r0, [r6], #-0
    1670:	3a0b0b01 	bcc	2c427c <_Min_Stack_Size+0x2c407c>
    1674:	01053b0b 	tsteq	r5, fp, lsl #22
    1678:	07000013 	smladeq	r0, r3, r0, r0
    167c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1680:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1684:	03002808 	movweq	r2, #2056	; 0x808
    1688:	000d1c08 	andeq	r1, sp, r8, lsl #24
    168c:	00160900 	andseq	r0, r6, r0, lsl #18
    1690:	0b3a0e03 	bleq	e84ea4 <_Min_Stack_Size+0xe84ca4>
    1694:	1349053b 	movtne	r0, #38203	; 0x953b
    1698:	130a0000 	movwne	r0, #40960	; 0xa000
    169c:	3a0b0b01 	bcc	2c42a8 <_Min_Stack_Size+0x2c40a8>
    16a0:	01053b0b 	tsteq	r5, fp, lsl #22
    16a4:	0b000013 	bleq	16f8 <_Min_Stack_Size+0x14f8>
    16a8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    16ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    16b0:	0b381349 	bleq	e063dc <_Min_Stack_Size+0xe061dc>
    16b4:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
    16b8:	03193f01 	tsteq	r9, #1, 30
    16bc:	3b0b3a0e 	blcc	2cfefc <_Min_Stack_Size+0x2cfcfc>
    16c0:	1119270b 	tstne	r9, fp, lsl #14
    16c4:	40061201 	andmi	r1, r6, r1, lsl #4
    16c8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    16cc:	00001301 	andeq	r1, r0, r1, lsl #6
    16d0:	0300050d 	movweq	r0, #1293	; 0x50d
    16d4:	3b0b3a0e 	blcc	2cff14 <_Min_Stack_Size+0x2cfd14>
    16d8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    16dc:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
    16e0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    16e4:	0b3a0e03 	bleq	e84ef8 <_Min_Stack_Size+0xe84cf8>
    16e8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    16ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
    16f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    16f4:	0f000019 	svceq	0x00000019
    16f8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    16fc:	0b3a0e03 	bleq	e84f10 <_Min_Stack_Size+0xe84d10>
    1700:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1704:	01111349 	tsteq	r1, r9, asr #6
    1708:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    170c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1710:	10000013 	andne	r0, r0, r3, lsl r0
    1714:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1718:	0b3b0b3a 	bleq	ec4408 <_Min_Stack_Size+0xec4208>
    171c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1720:	34110000 	ldrcc	r0, [r1], #-0
    1724:	3a0e0300 	bcc	38232c <_Min_Stack_Size+0x38212c>
    1728:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    172c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1730:	00000019 	andeq	r0, r0, r9, lsl r0
    1734:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1738:	030b130e 	movweq	r1, #45838	; 0xb30e
    173c:	1117550e 	tstne	r7, lr, lsl #10
    1740:	00171001 	andseq	r1, r7, r1
    1744:	00240200 	eoreq	r0, r4, r0, lsl #4
    1748:	0b3e0b0b 	bleq	f8437c <_Min_Stack_Size+0xf8417c>
    174c:	00000e03 	andeq	r0, r0, r3, lsl #28
    1750:	03001603 	movweq	r1, #1539	; 0x603
    1754:	3b0b3a0e 	blcc	2cff94 <_Min_Stack_Size+0x2cfd94>
    1758:	0013490b 	andseq	r4, r3, fp, lsl #18
    175c:	00240400 	eoreq	r0, r4, r0, lsl #8
    1760:	0b3e0b0b 	bleq	f84394 <_Min_Stack_Size+0xf84194>
    1764:	00000803 	andeq	r0, r0, r3, lsl #16
    1768:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
    176c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1770:	0b0b0104 	bleq	2c1b88 <_Min_Stack_Size+0x2c1988>
    1774:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1778:	00001301 	andeq	r1, r0, r1, lsl #6
    177c:	03002807 	movweq	r2, #2055	; 0x807
    1780:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    1784:	00160800 	andseq	r0, r6, r0, lsl #16
    1788:	0b3a0e03 	bleq	e84f9c <_Min_Stack_Size+0xe84d9c>
    178c:	1349053b 	movtne	r0, #38203	; 0x953b
    1790:	13090000 	movwne	r0, #36864	; 0x9000
    1794:	3a0b0b01 	bcc	2c43a0 <_Min_Stack_Size+0x2c41a0>
    1798:	01053b0b 	tsteq	r5, fp, lsl #22
    179c:	0a000013 	beq	17f0 <_Min_Stack_Size+0x15f0>
    17a0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    17a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    17a8:	0b381349 	bleq	e064d4 <_Min_Stack_Size+0xe062d4>
    17ac:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    17b0:	3a080300 	bcc	2023b8 <_Min_Stack_Size+0x2021b8>
    17b4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    17b8:	000b3813 	andeq	r3, fp, r3, lsl r8
    17bc:	002e0c00 	eoreq	r0, lr, r0, lsl #24
    17c0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    17c4:	0b3b0b3a 	bleq	ec44b4 <_Min_Stack_Size+0xec42b4>
    17c8:	13491927 	movtne	r1, #39207	; 0x9927
    17cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    17d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    17d4:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    17d8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    17dc:	0b3a0e03 	bleq	e84ff0 <_Min_Stack_Size+0xe84df0>
    17e0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    17e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    17e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    17ec:	00130119 	andseq	r0, r3, r9, lsl r1
    17f0:	00050e00 	andeq	r0, r5, r0, lsl #28
    17f4:	0b3a0e03 	bleq	e85008 <_Min_Stack_Size+0xe84e08>
    17f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    17fc:	00001802 	andeq	r1, r0, r2, lsl #16
    1800:	0300340f 	movweq	r3, #1039	; 0x40f
    1804:	3b0b3a0e 	blcc	2d0044 <_Min_Stack_Size+0x2cfe44>
    1808:	3f134905 	svccc	0x00134905
    180c:	00193c19 	andseq	r3, r9, r9, lsl ip
    1810:	11010000 	mrsne	r0, (UNDEF: 1)
    1814:	130e2501 	movwne	r2, #58625	; 0xe501
    1818:	550e030b 	strpl	r0, [lr, #-779]	; 0xfffffcf5
    181c:	10011117 	andne	r1, r1, r7, lsl r1
    1820:	02000017 	andeq	r0, r0, #23
    1824:	0e030104 	adfeqs	f0, f3, f4
    1828:	0b3a0b0b 	bleq	e8445c <_Min_Stack_Size+0xe8425c>
    182c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1830:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    1834:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1838:	0400000d 	streq	r0, [r0], #-13
    183c:	0b0b0024 	bleq	2c18d4 <_Min_Stack_Size+0x2c16d4>
    1840:	0e030b3e 	vmoveq.16	d3[0], r0
    1844:	16050000 	strne	r0, [r5], -r0
    1848:	3a0e0300 	bcc	382450 <_Min_Stack_Size+0x382250>
    184c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1850:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1854:	0b0b0024 	bleq	2c18ec <_Min_Stack_Size+0x2c16ec>
    1858:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    185c:	35070000 	strcc	r0, [r7, #-0]
    1860:	00134900 	andseq	r4, r3, r0, lsl #18
    1864:	01040800 	tsteq	r4, r0, lsl #16
    1868:	0b3a0b0b 	bleq	e8449c <_Min_Stack_Size+0xe8429c>
    186c:	1301053b 	movwne	r0, #5435	; 0x153b
    1870:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
    1874:	1c080300 	stcne	3, cr0, [r8], {-0}
    1878:	0a00000d 	beq	18b4 <_Min_Stack_Size+0x16b4>
    187c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1880:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1884:	00001349 	andeq	r1, r0, r9, asr #6
    1888:	0b01130b 	bleq	464bc <_Min_Stack_Size+0x462bc>
    188c:	3b0b3a0b 	blcc	2d00c0 <_Min_Stack_Size+0x2cfec0>
    1890:	00130105 	andseq	r0, r3, r5, lsl #2
    1894:	000d0c00 	andeq	r0, sp, r0, lsl #24
    1898:	0b3a0803 	bleq	e838ac <_Min_Stack_Size+0xe836ac>
    189c:	1349053b 	movtne	r0, #38203	; 0x953b
    18a0:	00000b38 	andeq	r0, r0, r8, lsr fp
    18a4:	03000d0d 	movweq	r0, #3341	; 0xd0d
    18a8:	3b0b3a0e 	blcc	2d00e8 <_Min_Stack_Size+0x2cfee8>
    18ac:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    18b0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    18b4:	0b0b0104 	bleq	2c1ccc <_Min_Stack_Size+0x2c1acc>
    18b8:	0b3b0b3a 	bleq	ec45a8 <_Min_Stack_Size+0xec43a8>
    18bc:	00001301 	andeq	r1, r0, r1, lsl #6
    18c0:	0b01130f 	bleq	46504 <_Min_Stack_Size+0x46304>
    18c4:	3b0b3a0b 	blcc	2d00f8 <_Min_Stack_Size+0x2cfef8>
    18c8:	0013010b 	andseq	r0, r3, fp, lsl #2
    18cc:	000d1000 	andeq	r1, sp, r0
    18d0:	0b3a0e03 	bleq	e850e4 <_Min_Stack_Size+0xe84ee4>
    18d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    18d8:	00000b38 	andeq	r0, r0, r8, lsr fp
    18dc:	3f012e11 	svccc	0x00012e11
    18e0:	3a0e0319 	bcc	38254c <_Min_Stack_Size+0x38234c>
    18e4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    18e8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    18ec:	96184006 	ldrls	r4, [r8], -r6
    18f0:	13011942 	movwne	r1, #6466	; 0x1942
    18f4:	34120000 	ldrcc	r0, [r2], #-0
    18f8:	3a0e0300 	bcc	382500 <_Min_Stack_Size+0x382300>
    18fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1900:	00180213 	andseq	r0, r8, r3, lsl r2
    1904:	002e1300 	eoreq	r1, lr, r0, lsl #6
    1908:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    190c:	0b3b0b3a 	bleq	ec45fc <_Min_Stack_Size+0xec43fc>
    1910:	01111927 	tsteq	r1, r7, lsr #18
    1914:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1918:	00194296 	mulseq	r9, r6, r2
    191c:	00341400 	eorseq	r1, r4, r0, lsl #8
    1920:	0b3a0e03 	bleq	e85134 <_Min_Stack_Size+0xe84f34>
    1924:	1349053b 	movtne	r0, #38203	; 0x953b
    1928:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    192c:	01000000 	mrseq	r0, (UNDEF: 0)
    1930:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1934:	0e030b13 	vmoveq.32	d3[0], r0
    1938:	01111755 	tsteq	r1, r5, asr r7
    193c:	00001710 	andeq	r1, r0, r0, lsl r7
    1940:	0b002402 	bleq	a950 <_Min_Stack_Size+0xa750>
    1944:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1948:	0300000e 	movweq	r0, #14
    194c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1950:	0b3b0b3a 	bleq	ec4640 <_Min_Stack_Size+0xec4440>
    1954:	00001349 	andeq	r1, r0, r9, asr #6
    1958:	0b002404 	bleq	a970 <_Min_Stack_Size+0xa770>
    195c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1960:	05000008 	streq	r0, [r0, #-8]
    1964:	13490035 	movtne	r0, #36917	; 0x9035
    1968:	04060000 	streq	r0, [r6], #-0
    196c:	3a0b0b01 	bcc	2c4578 <_Min_Stack_Size+0x2c4378>
    1970:	01053b0b 	tsteq	r5, fp, lsl #22
    1974:	07000013 	smladeq	r0, r3, r0, r0
    1978:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    197c:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1980:	03002808 	movweq	r2, #2056	; 0x808
    1984:	000d1c08 	andeq	r1, sp, r8, lsl #24
    1988:	01130900 	tsteq	r3, r0, lsl #18
    198c:	0b3a0b0b 	bleq	e845c0 <_Min_Stack_Size+0xe843c0>
    1990:	1301053b 	movwne	r0, #5435	; 0x153b
    1994:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    1998:	3a080300 	bcc	2025a0 <_Min_Stack_Size+0x2023a0>
    199c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    19a0:	000b3813 	andeq	r3, fp, r3, lsl r8
    19a4:	000d0b00 	andeq	r0, sp, r0, lsl #22
    19a8:	0b3a0e03 	bleq	e851bc <_Min_Stack_Size+0xe84fbc>
    19ac:	1349053b 	movtne	r0, #38203	; 0x953b
    19b0:	00000b38 	andeq	r0, r0, r8, lsr fp
    19b4:	0300160c 	movweq	r1, #1548	; 0x60c
    19b8:	3b0b3a0e 	blcc	2d01f8 <_Min_Stack_Size+0x2cfff8>
    19bc:	00134905 	andseq	r4, r3, r5, lsl #18
    19c0:	002e0d00 	eoreq	r0, lr, r0, lsl #26
    19c4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    19c8:	0b3b0b3a 	bleq	ec46b8 <_Min_Stack_Size+0xec44b8>
    19cc:	01111927 	tsteq	r1, r7, lsr #18
    19d0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    19d4:	00194297 	mulseq	r9, r7, r2
    19d8:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
    19dc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    19e0:	0b3b0b3a 	bleq	ec46d0 <_Min_Stack_Size+0xec44d0>
    19e4:	01111927 	tsteq	r1, r7, lsr #18
    19e8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    19ec:	01194296 			; <UNDEFINED> instruction: 0x01194296
    19f0:	0f000013 	svceq	0x00000013
    19f4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    19f8:	0b3b0b3a 	bleq	ec46e8 <_Min_Stack_Size+0xec44e8>
    19fc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1a00:	0000193c 	andeq	r1, r0, ip, lsr r9
    1a04:	03003410 	movweq	r3, #1040	; 0x410
    1a08:	3b0b3a0e 	blcc	2d0248 <_Min_Stack_Size+0x2d0048>
    1a0c:	3f134905 	svccc	0x00134905
    1a10:	00193c19 	andseq	r3, r9, r9, lsl ip
    1a14:	11010000 	mrsne	r0, (UNDEF: 1)
    1a18:	130e2501 	movwne	r2, #58625	; 0xe501
    1a1c:	1b0e030b 	blne	382650 <_Min_Stack_Size+0x382450>
    1a20:	1117550e 	tstne	r7, lr, lsl #10
    1a24:	00171001 	andseq	r1, r7, r1
    1a28:	00240200 	eoreq	r0, r4, r0, lsl #4
    1a2c:	0b3e0b0b 	bleq	f84660 <_Min_Stack_Size+0xf84460>
    1a30:	00000e03 	andeq	r0, r0, r3, lsl #28
    1a34:	03001603 	movweq	r1, #1539	; 0x603
    1a38:	3b0b3a0e 	blcc	2d0278 <_Min_Stack_Size+0x2d0078>
    1a3c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1a40:	00240400 	eoreq	r0, r4, r0, lsl #8
    1a44:	0b3e0b0b 	bleq	f84678 <_Min_Stack_Size+0xf84478>
    1a48:	00000803 	andeq	r0, r0, r3, lsl #16
    1a4c:	0b000f05 	bleq	5668 <_Min_Stack_Size+0x5468>
    1a50:	0600000b 	streq	r0, [r0], -fp
    1a54:	13490035 	movtne	r0, #36917	; 0x9035
    1a58:	04070000 	streq	r0, [r7], #-0
    1a5c:	3a0b0b01 	bcc	2c4668 <_Min_Stack_Size+0x2c4468>
    1a60:	01053b0b 	tsteq	r5, fp, lsl #22
    1a64:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1a68:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1a6c:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1a70:	03002809 	movweq	r2, #2057	; 0x809
    1a74:	000d1c08 	andeq	r1, sp, r8, lsl #24
    1a78:	01130a00 	tsteq	r3, r0, lsl #20
    1a7c:	0b3a0b0b 	bleq	e846b0 <_Min_Stack_Size+0xe844b0>
    1a80:	1301053b 	movwne	r0, #5435	; 0x153b
    1a84:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    1a88:	3a080300 	bcc	202690 <_Min_Stack_Size+0x202490>
    1a8c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a90:	000b3813 	andeq	r3, fp, r3, lsl r8
    1a94:	000d0c00 	andeq	r0, sp, r0, lsl #24
    1a98:	0b3a0e03 	bleq	e852ac <_Min_Stack_Size+0xe850ac>
    1a9c:	1349053b 	movtne	r0, #38203	; 0x953b
    1aa0:	00000b38 	andeq	r0, r0, r8, lsr fp
    1aa4:	0300160d 	movweq	r1, #1549	; 0x60d
    1aa8:	3b0b3a0e 	blcc	2d02e8 <_Min_Stack_Size+0x2d00e8>
    1aac:	00134905 	andseq	r4, r3, r5, lsl #18
    1ab0:	01010e00 	tsteq	r1, r0, lsl #28
    1ab4:	13011349 	movwne	r1, #4937	; 0x1349
    1ab8:	210f0000 	mrscs	r0, CPSR
    1abc:	2f134900 	svccs	0x00134900
    1ac0:	1000000b 	andne	r0, r0, fp
    1ac4:	0b0b0104 	bleq	2c1edc <_Min_Stack_Size+0x2c1cdc>
    1ac8:	0b3b0b3a 	bleq	ec47b8 <_Min_Stack_Size+0xec45b8>
    1acc:	00001301 	andeq	r1, r0, r1, lsl #6
    1ad0:	03011311 	movweq	r1, #4881	; 0x1311
    1ad4:	3a0b0b0e 	bcc	2c4714 <_Min_Stack_Size+0x2c4514>
    1ad8:	01053b0b 	tsteq	r5, fp, lsl #22
    1adc:	12000013 	andne	r0, r0, #19
    1ae0:	0b0b0113 	bleq	2c1f34 <_Min_Stack_Size+0x2c1d34>
    1ae4:	0b3b0b3a 	bleq	ec47d4 <_Min_Stack_Size+0xec45d4>
    1ae8:	00001301 	andeq	r1, r0, r1, lsl #6
    1aec:	03000d13 	movweq	r0, #3347	; 0xd13
    1af0:	3b0b3a0e 	blcc	2d0330 <_Min_Stack_Size+0x2d0130>
    1af4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1af8:	1400000b 	strne	r0, [r0], #-11
    1afc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1b00:	0b3b0b3a 	bleq	ec47f0 <_Min_Stack_Size+0xec45f0>
    1b04:	0b381349 	bleq	e06830 <_Min_Stack_Size+0xe06630>
    1b08:	15150000 	ldrne	r0, [r5, #-0]
    1b0c:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    1b10:	00130113 	andseq	r0, r3, r3, lsl r1
    1b14:	00051600 	andeq	r1, r5, r0, lsl #12
    1b18:	00001349 	andeq	r1, r0, r9, asr #6
    1b1c:	0b000f17 	bleq	5780 <_Min_Stack_Size+0x5580>
    1b20:	0013490b 	andseq	r4, r3, fp, lsl #18
    1b24:	00261800 	eoreq	r1, r6, r0, lsl #16
    1b28:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    1b2c:	3a0e0300 	bcc	382734 <_Min_Stack_Size+0x382534>
    1b30:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1b34:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1b38:	96184006 	ldrls	r4, [r8], -r6
    1b3c:	00001942 	andeq	r1, r0, r2, asr #18
    1b40:	03012e1a 	movweq	r2, #7706	; 0x1e1a
    1b44:	3b0b3a0e 	blcc	2d0384 <_Min_Stack_Size+0x2d0184>
    1b48:	1119270b 	tstne	r9, fp, lsl #14
    1b4c:	40061201 	andmi	r1, r6, r1, lsl #4
    1b50:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1b54:	00001301 	andeq	r1, r0, r1, lsl #6
    1b58:	0300051b 	movweq	r0, #1307	; 0x51b
    1b5c:	3b0b3a08 	blcc	2d0384 <_Min_Stack_Size+0x2d0184>
    1b60:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1b64:	1c000018 	stcne	0, cr0, [r0], {24}
    1b68:	0e03012e 	adfeqsp	f0, f3, #0.5
    1b6c:	0b3b0b3a 	bleq	ec485c <_Min_Stack_Size+0xec465c>
    1b70:	13491927 	movtne	r1, #39207	; 0x9927
    1b74:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1b78:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1b7c:	00130119 	andseq	r0, r3, r9, lsl r1
    1b80:	00341d00 	eorseq	r1, r4, r0, lsl #26
    1b84:	0b3a0803 	bleq	e83b98 <_Min_Stack_Size+0xe83998>
    1b88:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1b8c:	00001802 	andeq	r1, r0, r2, lsl #16
    1b90:	3f012e1e 	svccc	0x00012e1e
    1b94:	3a0e0319 	bcc	382800 <_Min_Stack_Size+0x382600>
    1b98:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1b9c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1ba0:	96184006 	ldrls	r4, [r8], -r6
    1ba4:	13011942 	movwne	r1, #6466	; 0x1942
    1ba8:	341f0000 	ldrcc	r0, [pc], #-0	; 1bb0 <_Min_Stack_Size+0x19b0>
    1bac:	3a0e0300 	bcc	3827b4 <_Min_Stack_Size+0x3825b4>
    1bb0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1bb4:	00180213 	andseq	r0, r8, r3, lsl r2
    1bb8:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
    1bbc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1bc0:	0b3b0b3a 	bleq	ec48b0 <_Min_Stack_Size+0xec46b0>
    1bc4:	13491927 	movtne	r1, #39207	; 0x9927
    1bc8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1bcc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1bd0:	00130119 	andseq	r0, r3, r9, lsl r1
    1bd4:	00052100 	andeq	r2, r5, r0, lsl #2
    1bd8:	0b3a0e03 	bleq	e853ec <_Min_Stack_Size+0xe851ec>
    1bdc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1be0:	00001802 	andeq	r1, r0, r2, lsl #16
    1be4:	11010b22 	tstne	r1, r2, lsr #22
    1be8:	00061201 	andeq	r1, r6, r1, lsl #4
    1bec:	00342300 	eorseq	r2, r4, r0, lsl #6
    1bf0:	0b3a0803 	bleq	e83c04 <_Min_Stack_Size+0xe83a04>
    1bf4:	1349053b 	movtne	r0, #38203	; 0x953b
    1bf8:	00001802 	andeq	r1, r0, r2, lsl #16
    1bfc:	49002624 	stmdbmi	r0, {r2, r5, r9, sl, sp}
    1c00:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    1c04:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1c08:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1c0c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1c10:	0000193c 	andeq	r1, r0, ip, lsr r9
    1c14:	03003426 	movweq	r3, #1062	; 0x426
    1c18:	3b0b3a0e 	blcc	2d0458 <_Min_Stack_Size+0x2d0258>
    1c1c:	3f13490b 	svccc	0x0013490b
    1c20:	00193c19 	andseq	r3, r9, r9, lsl ip
    1c24:	00342700 	eorseq	r2, r4, r0, lsl #14
    1c28:	0b3a0e03 	bleq	e8543c <_Min_Stack_Size+0xe8523c>
    1c2c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1c30:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1c34:	21280000 			; <UNDEFINED> instruction: 0x21280000
    1c38:	2f134900 	svccs	0x00134900
    1c3c:	00000005 	andeq	r0, r0, r5
    1c40:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1c44:	030b130e 	movweq	r1, #45838	; 0xb30e
    1c48:	1117550e 	tstne	r7, lr, lsl #10
    1c4c:	00171001 	andseq	r1, r7, r1
    1c50:	00240200 	eoreq	r0, r4, r0, lsl #4
    1c54:	0b3e0b0b 	bleq	f84888 <_Min_Stack_Size+0xf84688>
    1c58:	00000803 	andeq	r0, r0, r3, lsl #16
    1c5c:	0b002403 	bleq	ac70 <_Min_Stack_Size+0xaa70>
    1c60:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1c64:	0400000e 	streq	r0, [r0], #-14
    1c68:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1c6c:	0b3b0b3a 	bleq	ec495c <_Min_Stack_Size+0xec475c>
    1c70:	00001349 	andeq	r1, r0, r9, asr #6
    1c74:	0b000f05 	bleq	5890 <_Min_Stack_Size+0x5690>
    1c78:	0600000b 	streq	r0, [r0], -fp
    1c7c:	0b0b000f 	bleq	2c1cc0 <_Min_Stack_Size+0x2c1ac0>
    1c80:	00001349 	andeq	r1, r0, r9, asr #6
    1c84:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
    1c88:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1c8c:	0b0b0113 	bleq	2c20e0 <_Min_Stack_Size+0x2c1ee0>
    1c90:	0b3b0b3a 	bleq	ec4980 <_Min_Stack_Size+0xec4780>
    1c94:	00001301 	andeq	r1, r0, r1, lsl #6
    1c98:	03000d09 	movweq	r0, #3337	; 0xd09
    1c9c:	3b0b3a0e 	blcc	2d04dc <_Min_Stack_Size+0x2d02dc>
    1ca0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1ca4:	0a00000b 	beq	1cd8 <_Min_Stack_Size+0x1ad8>
    1ca8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1cac:	0b3b0b3a 	bleq	ec499c <_Min_Stack_Size+0xec479c>
    1cb0:	0b381349 	bleq	e069dc <_Min_Stack_Size+0xe067dc>
    1cb4:	150b0000 	strne	r0, [fp, #-0]
    1cb8:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    1cbc:	00130113 	andseq	r0, r3, r3, lsl r1
    1cc0:	00050c00 	andeq	r0, r5, r0, lsl #24
    1cc4:	00001349 	andeq	r1, r0, r9, asr #6
    1cc8:	0000260d 	andeq	r2, r0, sp, lsl #12
    1ccc:	01010e00 	tsteq	r1, r0, lsl #28
    1cd0:	13011349 	movwne	r1, #4937	; 0x1349
    1cd4:	210f0000 	mrscs	r0, CPSR
    1cd8:	2f134900 	svccs	0x00134900
    1cdc:	1000000b 	andne	r0, r0, fp
    1ce0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1ce4:	0b3a0e03 	bleq	e854f8 <_Min_Stack_Size+0xe852f8>
    1ce8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1cec:	01111349 	tsteq	r1, r9, asr #6
    1cf0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1cf4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1cf8:	11000013 	tstne	r0, r3, lsl r0
    1cfc:	08030005 	stmdaeq	r3, {r0, r2}
    1d00:	0b3b0b3a 	bleq	ec49f0 <_Min_Stack_Size+0xec47f0>
    1d04:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1d08:	34120000 	ldrcc	r0, [r2], #-0
    1d0c:	3a0e0300 	bcc	382914 <_Min_Stack_Size+0x382714>
    1d10:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d14:	00180213 	andseq	r0, r8, r3, lsl r2
    1d18:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
    1d1c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1d20:	0b3b0b3a 	bleq	ec4a10 <_Min_Stack_Size+0xec4810>
    1d24:	13491927 	movtne	r1, #39207	; 0x9927
    1d28:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1d2c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1d30:	00130119 	andseq	r0, r3, r9, lsl r1
    1d34:	00341400 	eorseq	r1, r4, r0, lsl #8
    1d38:	0b3a0803 	bleq	e83d4c <_Min_Stack_Size+0xe83b4c>
    1d3c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1d40:	00001802 	andeq	r1, r0, r2, lsl #16
    1d44:	11010b15 	tstne	r1, r5, lsl fp
    1d48:	01061201 	tsteq	r6, r1, lsl #4
    1d4c:	16000013 			; <UNDEFINED> instruction: 0x16000013
    1d50:	0111010b 	tsteq	r1, fp, lsl #2
    1d54:	00000612 	andeq	r0, r0, r2, lsl r6
    1d58:	03000517 	movweq	r0, #1303	; 0x517
    1d5c:	3b0b3a0e 	blcc	2d059c <_Min_Stack_Size+0x2d039c>
    1d60:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1d64:	18000018 	stmdane	r0, {r3, r4}
    1d68:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1d6c:	0b3a0e03 	bleq	e85580 <_Min_Stack_Size+0xe85380>
    1d70:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1d74:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1d78:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1d7c:	00130119 	andseq	r0, r3, r9, lsl r1
    1d80:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
    1d84:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1d88:	0b3b0b3a 	bleq	ec4a78 <_Min_Stack_Size+0xec4878>
    1d8c:	01111927 	tsteq	r1, r7, lsr #18
    1d90:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1d94:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1d98:	1a000013 	bne	1dec <_Min_Stack_Size+0x1bec>
    1d9c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1da0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1da4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1da8:	211b0000 	tstcs	fp, r0
    1dac:	2f134900 	svccs	0x00134900
    1db0:	1c000018 	stcne	0, cr0, [r0], {24}
    1db4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1db8:	0b3a0e03 	bleq	e855cc <_Min_Stack_Size+0xe853cc>
    1dbc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1dc0:	01111349 	tsteq	r1, r9, asr #6
    1dc4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1dc8:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1dcc:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    1dd0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1dd4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1dd8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1ddc:	051e0000 	ldreq	r0, [lr, #-0]
    1de0:	3a080300 	bcc	2029e8 <_Min_Stack_Size+0x2027e8>
    1de4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1de8:	00180213 	andseq	r0, r8, r3, lsl r2
    1dec:	01011f00 	tsteq	r1, r0, lsl #30
    1df0:	00001349 	andeq	r1, r0, r9, asr #6
    1df4:	01110100 	tsteq	r1, r0, lsl #2
    1df8:	0b130e25 	bleq	4c5694 <_Min_Stack_Size+0x4c5494>
    1dfc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1e00:	01111755 	tsteq	r1, r5, asr r7
    1e04:	00001710 	andeq	r1, r0, r0, lsl r7
    1e08:	0b002402 	bleq	ae18 <_Min_Stack_Size+0xac18>
    1e0c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1e10:	03000008 	movweq	r0, #8
    1e14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1e18:	0b3b0b3a 	bleq	ec4b08 <_Min_Stack_Size+0xec4908>
    1e1c:	00001349 	andeq	r1, r0, r9, asr #6
    1e20:	0b002404 	bleq	ae38 <_Min_Stack_Size+0xac38>
    1e24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1e28:	0500000e 	streq	r0, [r0, #-14]
    1e2c:	0b0b000f 	bleq	2c1e70 <_Min_Stack_Size+0x2c1c70>
    1e30:	0f060000 	svceq	0x00060000
    1e34:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1e38:	07000013 	smladeq	r0, r3, r0, r0
    1e3c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1e40:	0b3a0e03 	bleq	e85654 <_Min_Stack_Size+0xe85454>
    1e44:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1e48:	01111349 	tsteq	r1, r9, asr #6
    1e4c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1e50:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1e54:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1e58:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1e5c:	0b3b0b3a 	bleq	ec4b4c <_Min_Stack_Size+0xec494c>
    1e60:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1e64:	05090000 	streq	r0, [r9, #-0]
    1e68:	3a0e0300 	bcc	382a70 <_Min_Stack_Size+0x382870>
    1e6c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e70:	00170213 	andseq	r0, r7, r3, lsl r2
    1e74:	00340a00 	eorseq	r0, r4, r0, lsl #20
    1e78:	0b3a0803 	bleq	e83e8c <_Min_Stack_Size+0xe83c8c>
    1e7c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1e80:	00001702 	andeq	r1, r0, r2, lsl #14
    1e84:	0300340b 	movweq	r3, #1035	; 0x40b
    1e88:	3b0b3a0e 	blcc	2d06c8 <_Min_Stack_Size+0x2d04c8>
    1e8c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1e90:	0c000018 	stceq	0, cr0, [r0], {24}
    1e94:	00000026 	andeq	r0, r0, r6, lsr #32
    1e98:	01110100 	tsteq	r1, r0, lsl #2
    1e9c:	0b130e25 	bleq	4c5738 <_Min_Stack_Size+0x4c5538>
    1ea0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1ea4:	01111755 	tsteq	r1, r5, asr r7
    1ea8:	00001710 	andeq	r1, r0, r0, lsl r7
    1eac:	0b002402 	bleq	aebc <_Min_Stack_Size+0xacbc>
    1eb0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1eb4:	03000008 	movweq	r0, #8
    1eb8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1ebc:	0b3b0b3a 	bleq	ec4bac <_Min_Stack_Size+0xec49ac>
    1ec0:	00001349 	andeq	r1, r0, r9, asr #6
    1ec4:	0b002404 	bleq	aedc <_Min_Stack_Size+0xacdc>
    1ec8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1ecc:	0500000e 	streq	r0, [r0, #-14]
    1ed0:	0b0b000f 	bleq	2c1f14 <_Min_Stack_Size+0x2c1d14>
    1ed4:	0f060000 	svceq	0x00060000
    1ed8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1edc:	07000013 	smladeq	r0, r3, r0, r0
    1ee0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1ee4:	0b3a0e03 	bleq	e856f8 <_Min_Stack_Size+0xe854f8>
    1ee8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1eec:	01111349 	tsteq	r1, r9, asr #6
    1ef0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1ef4:	00194297 	mulseq	r9, r7, r2
    1ef8:	00050800 	andeq	r0, r5, r0, lsl #16
    1efc:	0b3a0803 	bleq	e83f10 <_Min_Stack_Size+0xe83d10>
    1f00:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1f04:	00001802 	andeq	r1, r0, r2, lsl #16
    1f08:	03000509 	movweq	r0, #1289	; 0x509
    1f0c:	3b0b3a08 	blcc	2d0734 <_Min_Stack_Size+0x2d0534>
    1f10:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1f14:	0a000017 	beq	1f78 <_Min_Stack_Size+0x1d78>
    1f18:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1f1c:	0b3b0b3a 	bleq	ec4c0c <_Min_Stack_Size+0xec4a0c>
    1f20:	17021349 	strne	r1, [r2, -r9, asr #6]
    1f24:	01000000 	mrseq	r0, (UNDEF: 0)
    1f28:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1f2c:	0e030b13 	vmoveq.32	d3[0], r0
    1f30:	17550e1b 	smmlane	r5, fp, lr, r0
    1f34:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1f38:	16020000 	strne	r0, [r2], -r0
    1f3c:	3a0e0300 	bcc	382b44 <_Min_Stack_Size+0x382944>
    1f40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f44:	03000013 	movweq	r0, #19
    1f48:	0b0b0024 	bleq	2c1fe0 <_Min_Stack_Size+0x2c1de0>
    1f4c:	0e030b3e 	vmoveq.16	d3[0], r0
    1f50:	24040000 	strcs	r0, [r4], #-0
    1f54:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1f58:	0008030b 	andeq	r0, r8, fp, lsl #6
    1f5c:	00160500 	andseq	r0, r6, r0, lsl #10
    1f60:	0b3a0e03 	bleq	e85774 <_Min_Stack_Size+0xe85574>
    1f64:	1349053b 	movtne	r0, #38203	; 0x953b
    1f68:	17060000 	strne	r0, [r6, -r0]
    1f6c:	3a0b0b01 	bcc	2c4b78 <_Min_Stack_Size+0x2c4978>
    1f70:	010b3b0b 	tsteq	fp, fp, lsl #22
    1f74:	07000013 	smladeq	r0, r3, r0, r0
    1f78:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1f7c:	0b3b0b3a 	bleq	ec4c6c <_Min_Stack_Size+0xec4a6c>
    1f80:	00001349 	andeq	r1, r0, r9, asr #6
    1f84:	49010108 	stmdbmi	r1, {r3, r8}
    1f88:	00130113 	andseq	r0, r3, r3, lsl r1
    1f8c:	00210900 	eoreq	r0, r1, r0, lsl #18
    1f90:	0b2f1349 	bleq	bc6cbc <_Min_Stack_Size+0xbc6abc>
    1f94:	130a0000 	movwne	r0, #40960	; 0xa000
    1f98:	3a0b0b01 	bcc	2c4ba4 <_Min_Stack_Size+0x2c49a4>
    1f9c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1fa0:	0b000013 	bleq	1ff4 <_Min_Stack_Size+0x1df4>
    1fa4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1fa8:	0b3b0b3a 	bleq	ec4c98 <_Min_Stack_Size+0xec4a98>
    1fac:	0b381349 	bleq	e06cd8 <_Min_Stack_Size+0xe06ad8>
    1fb0:	0f0c0000 	svceq	0x000c0000
    1fb4:	000b0b00 	andeq	r0, fp, r0, lsl #22
    1fb8:	01130d00 	tsteq	r3, r0, lsl #26
    1fbc:	0b0b0e03 	bleq	2c57d0 <_Min_Stack_Size+0x2c55d0>
    1fc0:	0b3b0b3a 	bleq	ec4cb0 <_Min_Stack_Size+0xec4ab0>
    1fc4:	00001301 	andeq	r1, r0, r1, lsl #6
    1fc8:	03000d0e 	movweq	r0, #3342	; 0xd0e
    1fcc:	3b0b3a08 	blcc	2d07f4 <_Min_Stack_Size+0x2d05f4>
    1fd0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1fd4:	0f00000b 	svceq	0x0000000b
    1fd8:	0b0b000f 	bleq	2c201c <_Min_Stack_Size+0x2c1e1c>
    1fdc:	00001349 	andeq	r1, r0, r9, asr #6
    1fe0:	03011310 	movweq	r1, #4880	; 0x1310
    1fe4:	3a0b0b0e 	bcc	2c4c24 <_Min_Stack_Size+0x2c4a24>
    1fe8:	01053b0b 	tsteq	r5, fp, lsl #22
    1fec:	11000013 	tstne	r0, r3, lsl r0
    1ff0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1ff4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1ff8:	0b381349 	bleq	e06d24 <_Min_Stack_Size+0xe06b24>
    1ffc:	0d120000 	ldceq	0, cr0, [r2, #-0]
    2000:	3a080300 	bcc	202c08 <_Min_Stack_Size+0x202a08>
    2004:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2008:	000b3813 	andeq	r3, fp, r3, lsl r8
    200c:	01151300 	tsteq	r5, r0, lsl #6
    2010:	13491927 	movtne	r1, #39207	; 0x9927
    2014:	00001301 	andeq	r1, r0, r1, lsl #6
    2018:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    201c:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    2020:	13490026 	movtne	r0, #36902	; 0x9026
    2024:	15160000 	ldrne	r0, [r6, #-0]
    2028:	01192701 	tsteq	r9, r1, lsl #14
    202c:	17000013 	smladne	r0, r3, r0, r0
    2030:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2034:	0b3a0e03 	bleq	e85848 <_Min_Stack_Size+0xe85648>
    2038:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    203c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2040:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2044:	00130119 	andseq	r0, r3, r9, lsl r1
    2048:	00051800 	andeq	r1, r5, r0, lsl #16
    204c:	0b3a0e03 	bleq	e85860 <_Min_Stack_Size+0xe85660>
    2050:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2054:	00001702 	andeq	r1, r0, r2, lsl #14
    2058:	03003419 	movweq	r3, #1049	; 0x419
    205c:	3b0b3a0e 	blcc	2d089c <_Min_Stack_Size+0x2d069c>
    2060:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2064:	1a000017 	bne	20c8 <_Min_Stack_Size+0x1ec8>
    2068:	0111010b 	tsteq	r1, fp, lsl #2
    206c:	00000612 	andeq	r0, r0, r2, lsl r6
    2070:	0300341b 	movweq	r3, #1051	; 0x41b
    2074:	3b0b3a08 	blcc	2d089c <_Min_Stack_Size+0x2d069c>
    2078:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    207c:	1c000017 	stcne	0, cr0, [r0], {23}
    2080:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    2084:	00001301 	andeq	r1, r0, r1, lsl #6
    2088:	0182891d 	orreq	r8, r2, sp, lsl r9
    208c:	31011101 	tstcc	r1, r1, lsl #2
    2090:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    2094:	0001828a 	andeq	r8, r1, sl, lsl #5
    2098:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    209c:	1f000018 	svcne	0x00000018
    20a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    20a4:	0b3a0e03 	bleq	e858b8 <_Min_Stack_Size+0xe856b8>
    20a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    20ac:	01111349 	tsteq	r1, r9, asr #6
    20b0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    20b4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    20b8:	20000013 	andcs	r0, r0, r3, lsl r0
    20bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    20c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    20c4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    20c8:	0000193c 	andeq	r1, r0, ip, lsr r9
    20cc:	3f012e21 	svccc	0x00012e21
    20d0:	3a0e0319 	bcc	382d3c <_Min_Stack_Size+0x382b3c>
    20d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    20d8:	3c134919 	ldccc	9, cr4, [r3], {25}
    20dc:	00000019 	andeq	r0, r0, r9, lsl r0
    20e0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    20e4:	030b130e 	movweq	r1, #45838	; 0xb30e
    20e8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    20ec:	10011117 	andne	r1, r1, r7, lsl r1
    20f0:	02000017 	andeq	r0, r0, #23
    20f4:	0b0b0024 	bleq	2c218c <_Min_Stack_Size+0x2c1f8c>
    20f8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    20fc:	16030000 	strne	r0, [r3], -r0
    2100:	3a0e0300 	bcc	382d08 <_Min_Stack_Size+0x382b08>
    2104:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2108:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    210c:	0b0b0024 	bleq	2c21a4 <_Min_Stack_Size+0x2c1fa4>
    2110:	0e030b3e 	vmoveq.16	d3[0], r0
    2114:	16050000 	strne	r0, [r5], -r0
    2118:	3a0e0300 	bcc	382d20 <_Min_Stack_Size+0x382b20>
    211c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2120:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2124:	0b0b0117 	bleq	2c2588 <_Min_Stack_Size+0x2c2388>
    2128:	0b3b0b3a 	bleq	ec4e18 <_Min_Stack_Size+0xec4c18>
    212c:	00001301 	andeq	r1, r0, r1, lsl #6
    2130:	03000d07 	movweq	r0, #3335	; 0xd07
    2134:	3b0b3a0e 	blcc	2d0974 <_Min_Stack_Size+0x2d0774>
    2138:	0013490b 	andseq	r4, r3, fp, lsl #18
    213c:	01010800 	tsteq	r1, r0, lsl #16
    2140:	13011349 	movwne	r1, #4937	; 0x1349
    2144:	21090000 	mrscs	r0, (UNDEF: 9)
    2148:	2f134900 	svccs	0x00134900
    214c:	0a00000b 	beq	2180 <_Min_Stack_Size+0x1f80>
    2150:	0b0b0113 	bleq	2c25a4 <_Min_Stack_Size+0x2c23a4>
    2154:	0b3b0b3a 	bleq	ec4e44 <_Min_Stack_Size+0xec4c44>
    2158:	00001301 	andeq	r1, r0, r1, lsl #6
    215c:	03000d0b 	movweq	r0, #3339	; 0xd0b
    2160:	3b0b3a0e 	blcc	2d09a0 <_Min_Stack_Size+0x2d07a0>
    2164:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2168:	0c00000b 	stceq	0, cr0, [r0], {11}
    216c:	0b0b000f 	bleq	2c21b0 <_Min_Stack_Size+0x2c1fb0>
    2170:	130d0000 	movwne	r0, #53248	; 0xd000
    2174:	0b0e0301 	bleq	382d80 <_Min_Stack_Size+0x382b80>
    2178:	3b0b3a0b 	blcc	2d09ac <_Min_Stack_Size+0x2d07ac>
    217c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2180:	000d0e00 	andeq	r0, sp, r0, lsl #28
    2184:	0b3a0803 	bleq	e84198 <_Min_Stack_Size+0xe83f98>
    2188:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    218c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2190:	0b000f0f 	bleq	5dd4 <_Min_Stack_Size+0x5bd4>
    2194:	0013490b 	andseq	r4, r3, fp, lsl #18
    2198:	01131000 	tsteq	r3, r0
    219c:	0b0b0e03 	bleq	2c59b0 <_Min_Stack_Size+0x2c57b0>
    21a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    21a4:	00001301 	andeq	r1, r0, r1, lsl #6
    21a8:	03000d11 	movweq	r0, #3345	; 0xd11
    21ac:	3b0b3a0e 	blcc	2d09ec <_Min_Stack_Size+0x2d07ec>
    21b0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    21b4:	1200000b 	andne	r0, r0, #11
    21b8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    21bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    21c0:	0b381349 	bleq	e06eec <_Min_Stack_Size+0xe06cec>
    21c4:	15130000 	ldrne	r0, [r3, #-0]
    21c8:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    21cc:	00130113 	andseq	r0, r3, r3, lsl r1
    21d0:	00051400 	andeq	r1, r5, r0, lsl #8
    21d4:	00001349 	andeq	r1, r0, r9, asr #6
    21d8:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    21dc:	16000013 			; <UNDEFINED> instruction: 0x16000013
    21e0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    21e4:	00001301 	andeq	r1, r0, r1, lsl #6
    21e8:	03000d17 	movweq	r0, #3351	; 0xd17
    21ec:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
    21f0:	0019340b 	andseq	r3, r9, fp, lsl #8
    21f4:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
    21f8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    21fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2200:	13491927 	movtne	r1, #39207	; 0x9927
    2204:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2208:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    220c:	00130119 	andseq	r0, r3, r9, lsl r1
    2210:	00051900 	andeq	r1, r5, r0, lsl #18
    2214:	0b3a0803 	bleq	e84228 <_Min_Stack_Size+0xe84028>
    2218:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    221c:	00001702 	andeq	r1, r0, r2, lsl #14
    2220:	0300051a 	movweq	r0, #1306	; 0x51a
    2224:	3b0b3a0e 	blcc	2d0a64 <_Min_Stack_Size+0x2d0864>
    2228:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    222c:	1b000017 	blne	2290 <_Min_Stack_Size+0x2090>
    2230:	08030005 	stmdaeq	r3, {r0, r2}
    2234:	0b3b0b3a 	bleq	ec4f24 <_Min_Stack_Size+0xec4d24>
    2238:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    223c:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    2240:	1d000000 	stcne	0, cr0, [r0, #-0]
    2244:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2248:	0b3b0b3a 	bleq	ec4f38 <_Min_Stack_Size+0xec4d38>
    224c:	17021349 	strne	r1, [r2, -r9, asr #6]
    2250:	341e0000 	ldrcc	r0, [lr], #-0
    2254:	3a080300 	bcc	202e5c <_Min_Stack_Size+0x202c5c>
    2258:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    225c:	00180213 	andseq	r0, r8, r3, lsl r2
    2260:	82891f00 	addhi	r1, r9, #0, 30
    2264:	01110101 	tsteq	r1, r1, lsl #2
    2268:	00001331 	andeq	r1, r0, r1, lsr r3
    226c:	01828a20 	orreq	r8, r2, r0, lsr #20
    2270:	91180200 	tstls	r8, r0, lsl #4
    2274:	00001842 	andeq	r1, r0, r2, asr #16
    2278:	03003421 	movweq	r3, #1057	; 0x421
    227c:	3b0b3a0e 	blcc	2d0abc <_Min_Stack_Size+0x2d08bc>
    2280:	3f134905 	svccc	0x00134905
    2284:	00193c19 	andseq	r3, r9, r9, lsl ip
    2288:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
    228c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2290:	0b3b0b3a 	bleq	ec4f80 <_Min_Stack_Size+0xec4d80>
    2294:	13491927 	movtne	r1, #39207	; 0x9927
    2298:	1301193c 	movwne	r1, #6460	; 0x193c
    229c:	01000000 	mrseq	r0, (UNDEF: 0)
    22a0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    22a4:	0e030b13 	vmoveq.32	d3[0], r0
    22a8:	17550e1b 	smmlane	r5, fp, lr, r0
    22ac:	17100111 			; <UNDEFINED> instruction: 0x17100111
    22b0:	24020000 	strcs	r0, [r2], #-0
    22b4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    22b8:	0008030b 	andeq	r0, r8, fp, lsl #6
    22bc:	00240300 	eoreq	r0, r4, r0, lsl #6
    22c0:	0b3e0b0b 	bleq	f84ef4 <_Min_Stack_Size+0xf84cf4>
    22c4:	00000e03 	andeq	r0, r0, r3, lsl #28
    22c8:	0b000f04 	bleq	5ee0 <_Min_Stack_Size+0x5ce0>
    22cc:	0013490b 	andseq	r4, r3, fp, lsl #18
    22d0:	00260500 	eoreq	r0, r6, r0, lsl #10
    22d4:	00001349 	andeq	r1, r0, r9, asr #6
    22d8:	3f012e06 	svccc	0x00012e06
    22dc:	3a0e0319 	bcc	382f48 <_Min_Stack_Size+0x382d48>
    22e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    22e4:	11134919 	tstne	r3, r9, lsl r9
    22e8:	40061201 	andmi	r1, r6, r1, lsl #4
    22ec:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    22f0:	00001301 	andeq	r1, r0, r1, lsl #6
    22f4:	03000507 	movweq	r0, #1287	; 0x507
    22f8:	3b0b3a08 	blcc	2d0b20 <_Min_Stack_Size+0x2d0920>
    22fc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2300:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    2304:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2308:	0b3b0b3a 	bleq	ec4ff8 <_Min_Stack_Size+0xec4df8>
    230c:	17021349 	strne	r1, [r2, -r9, asr #6]
    2310:	34090000 	strcc	r0, [r9], #-0
    2314:	3a080300 	bcc	202f1c <_Min_Stack_Size+0x202d1c>
    2318:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    231c:	00180213 	andseq	r0, r8, r3, lsl r2
    2320:	11010000 	mrsne	r0, (UNDEF: 1)
    2324:	130e2501 	movwne	r2, #58625	; 0xe501
    2328:	1b0e030b 	blne	382f5c <_Min_Stack_Size+0x382d5c>
    232c:	1117550e 	tstne	r7, lr, lsl #10
    2330:	00171001 	andseq	r1, r7, r1
    2334:	00240200 	eoreq	r0, r4, r0, lsl #4
    2338:	0b3e0b0b 	bleq	f84f6c <_Min_Stack_Size+0xf84d6c>
    233c:	00000803 	andeq	r0, r0, r3, lsl #16
    2340:	0b002403 	bleq	b354 <_Min_Stack_Size+0xb154>
    2344:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2348:	0400000e 	streq	r0, [r0], #-14
    234c:	0b0b000f 	bleq	2c2390 <_Min_Stack_Size+0x2c2190>
    2350:	00001349 	andeq	r1, r0, r9, asr #6
    2354:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    2358:	06000013 			; <UNDEFINED> instruction: 0x06000013
    235c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2360:	0b3a0e03 	bleq	e85b74 <_Min_Stack_Size+0xe85974>
    2364:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2368:	01111349 	tsteq	r1, r9, asr #6
    236c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2370:	00194297 	mulseq	r9, r7, r2
    2374:	00050700 	andeq	r0, r5, r0, lsl #14
    2378:	0b3a0803 	bleq	e8438c <_Min_Stack_Size+0xe8418c>
    237c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2380:	00001702 	andeq	r1, r0, r2, lsl #14
    2384:	03000508 	movweq	r0, #1288	; 0x508
    2388:	3b0b3a08 	blcc	2d0bb0 <_Min_Stack_Size+0x2d09b0>
    238c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2390:	00000018 	andeq	r0, r0, r8, lsl r0
    2394:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2398:	030b130e 	movweq	r1, #45838	; 0xb30e
    239c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    23a0:	10011117 	andne	r1, r1, r7, lsl r1
    23a4:	02000017 	andeq	r0, r0, #23
    23a8:	0b0b0024 	bleq	2c2440 <_Min_Stack_Size+0x2c2240>
    23ac:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    23b0:	16030000 	strne	r0, [r3], -r0
    23b4:	3a0e0300 	bcc	382fbc <_Min_Stack_Size+0x382dbc>
    23b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    23bc:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    23c0:	0b0b0024 	bleq	2c2458 <_Min_Stack_Size+0x2c2258>
    23c4:	0e030b3e 	vmoveq.16	d3[0], r0
    23c8:	0f050000 	svceq	0x00050000
    23cc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    23d0:	06000013 			; <UNDEFINED> instruction: 0x06000013
    23d4:	13490026 	movtne	r0, #36902	; 0x9026
    23d8:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
    23dc:	03193f01 	tsteq	r9, #1, 30
    23e0:	3b0b3a0e 	blcc	2d0c20 <_Min_Stack_Size+0x2d0a20>
    23e4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    23e8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    23ec:	97184006 	ldrls	r4, [r8, -r6]
    23f0:	00001942 	andeq	r1, r0, r2, asr #18
    23f4:	03000508 	movweq	r0, #1288	; 0x508
    23f8:	3b0b3a08 	blcc	2d0c20 <_Min_Stack_Size+0x2d0a20>
    23fc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2400:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    2404:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2408:	0b3b0b3a 	bleq	ec50f8 <_Min_Stack_Size+0xec4ef8>
    240c:	00001349 	andeq	r1, r0, r9, asr #6
    2410:	0300340a 	movweq	r3, #1034	; 0x40a
    2414:	3b0b3a08 	blcc	2d0c3c <_Min_Stack_Size+0x2d0a3c>
    2418:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    241c:	00000018 	andeq	r0, r0, r8, lsl r0
    2420:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2424:	030b130e 	movweq	r1, #45838	; 0xb30e
    2428:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    242c:	10011117 	andne	r1, r1, r7, lsl r1
    2430:	02000017 	andeq	r0, r0, #23
    2434:	0b0b0024 	bleq	2c24cc <_Min_Stack_Size+0x2c22cc>
    2438:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    243c:	16030000 	strne	r0, [r3], -r0
    2440:	3a0e0300 	bcc	383048 <_Min_Stack_Size+0x382e48>
    2444:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2448:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    244c:	0b0b0024 	bleq	2c24e4 <_Min_Stack_Size+0x2c22e4>
    2450:	0e030b3e 	vmoveq.16	d3[0], r0
    2454:	0f050000 	svceq	0x00050000
    2458:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    245c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2460:	13490026 	movtne	r0, #36902	; 0x9026
    2464:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
    2468:	03193f01 	tsteq	r9, #1, 30
    246c:	3b0b3a0e 	blcc	2d0cac <_Min_Stack_Size+0x2d0aac>
    2470:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2474:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2478:	97184006 	ldrls	r4, [r8, -r6]
    247c:	00001942 	andeq	r1, r0, r2, asr #18
    2480:	03000508 	movweq	r0, #1288	; 0x508
    2484:	3b0b3a08 	blcc	2d0cac <_Min_Stack_Size+0x2d0aac>
    2488:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    248c:	00000017 	andeq	r0, r0, r7, lsl r0
    2490:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2494:	030b130e 	movweq	r1, #45838	; 0xb30e
    2498:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    249c:	10011117 	andne	r1, r1, r7, lsl r1
    24a0:	02000017 	andeq	r0, r0, #23
    24a4:	0b0b0024 	bleq	2c253c <_Min_Stack_Size+0x2c233c>
    24a8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    24ac:	16030000 	strne	r0, [r3], -r0
    24b0:	3a0e0300 	bcc	3830b8 <_Min_Stack_Size+0x382eb8>
    24b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    24b8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    24bc:	0b0b0024 	bleq	2c2554 <_Min_Stack_Size+0x2c2354>
    24c0:	0e030b3e 	vmoveq.16	d3[0], r0
    24c4:	0f050000 	svceq	0x00050000
    24c8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    24cc:	06000013 			; <UNDEFINED> instruction: 0x06000013
    24d0:	13490026 	movtne	r0, #36902	; 0x9026
    24d4:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
    24d8:	03193f01 	tsteq	r9, #1, 30
    24dc:	3b0b3a0e 	blcc	2d0d1c <_Min_Stack_Size+0x2d0b1c>
    24e0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    24e4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    24e8:	97184006 	ldrls	r4, [r8, -r6]
    24ec:	00001942 	andeq	r1, r0, r2, asr #18
    24f0:	03000508 	movweq	r0, #1288	; 0x508
    24f4:	3b0b3a0e 	blcc	2d0d34 <_Min_Stack_Size+0x2d0b34>
    24f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    24fc:	09000018 	stmdbeq	r0, {r3, r4}
    2500:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2504:	0b3b0b3a 	bleq	ec51f4 <_Min_Stack_Size+0xec4ff4>
    2508:	17021349 	strne	r1, [r2, -r9, asr #6]
    250c:	340a0000 	strcc	r0, [sl], #-0
    2510:	3a0e0300 	bcc	383118 <_Min_Stack_Size+0x382f18>
    2514:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2518:	00170213 	andseq	r0, r7, r3, lsl r2
    251c:	11010000 	mrsne	r0, (UNDEF: 1)
    2520:	130e2501 	movwne	r2, #58625	; 0xe501
    2524:	1b0e030b 	blne	383158 <_Min_Stack_Size+0x382f58>
    2528:	0017100e 	andseq	r1, r7, lr
    252c:	00240200 	eoreq	r0, r4, r0, lsl #4
    2530:	0b3e0b0b 	bleq	f85164 <_Min_Stack_Size+0xf84f64>
    2534:	00000803 	andeq	r0, r0, r3, lsl #16
    2538:	0b002403 	bleq	b54c <_Min_Stack_Size+0xb34c>
    253c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2540:	0400000e 	streq	r0, [r0], #-14
    2544:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2548:	0b3b0b3a 	bleq	ec5238 <_Min_Stack_Size+0xec5038>
    254c:	00001349 	andeq	r1, r0, r9, asr #6
    2550:	03001605 	movweq	r1, #1541	; 0x605
    2554:	3b0b3a0e 	blcc	2d0d94 <_Min_Stack_Size+0x2d0b94>
    2558:	00134905 	andseq	r4, r3, r5, lsl #18
    255c:	01170600 	tsteq	r7, r0, lsl #12
    2560:	0b3a0b0b 	bleq	e85194 <_Min_Stack_Size+0xe84f94>
    2564:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2568:	0d070000 	stceq	0, cr0, [r7, #-0]
    256c:	3a0e0300 	bcc	383174 <_Min_Stack_Size+0x382f74>
    2570:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2574:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2578:	13490101 	movtne	r0, #37121	; 0x9101
    257c:	00001301 	andeq	r1, r0, r1, lsl #6
    2580:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
    2584:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2588:	01130a00 	tsteq	r3, r0, lsl #20
    258c:	0b3a0b0b 	bleq	e851c0 <_Min_Stack_Size+0xe84fc0>
    2590:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2594:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    2598:	3a0e0300 	bcc	3831a0 <_Min_Stack_Size+0x382fa0>
    259c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    25a0:	000b3813 	andeq	r3, fp, r3, lsl r8
    25a4:	000f0c00 	andeq	r0, pc, r0, lsl #24
    25a8:	00000b0b 	andeq	r0, r0, fp, lsl #22
    25ac:	0301130d 	movweq	r1, #4877	; 0x130d
    25b0:	3a0b0b0e 	bcc	2c51f0 <_Min_Stack_Size+0x2c4ff0>
    25b4:	010b3b0b 	tsteq	fp, fp, lsl #22
    25b8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    25bc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    25c0:	0b3b0b3a 	bleq	ec52b0 <_Min_Stack_Size+0xec50b0>
    25c4:	0b381349 	bleq	e072f0 <_Min_Stack_Size+0xe070f0>
    25c8:	0f0f0000 	svceq	0x000f0000
    25cc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    25d0:	10000013 	andne	r0, r0, r3, lsl r0
    25d4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    25d8:	0b3a0b0b 	bleq	e8520c <_Min_Stack_Size+0xe8500c>
    25dc:	1301053b 	movwne	r0, #5435	; 0x153b
    25e0:	0d110000 	ldceq	0, cr0, [r1, #-0]
    25e4:	3a0e0300 	bcc	3831ec <_Min_Stack_Size+0x382fec>
    25e8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    25ec:	000b3813 	andeq	r3, fp, r3, lsl r8
    25f0:	000d1200 	andeq	r1, sp, r0, lsl #4
    25f4:	0b3a0803 	bleq	e84608 <_Min_Stack_Size+0xe84408>
    25f8:	1349053b 	movtne	r0, #38203	; 0x953b
    25fc:	00000b38 	andeq	r0, r0, r8, lsr fp
    2600:	27011513 	smladcs	r1, r3, r5, r1
    2604:	01134919 	tsteq	r3, r9, lsl r9
    2608:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    260c:	13490005 	movtne	r0, #36869	; 0x9005
    2610:	26150000 	ldrcs	r0, [r5], -r0
    2614:	00134900 	andseq	r4, r3, r0, lsl #18
    2618:	01151600 	tsteq	r5, r0, lsl #12
    261c:	13011927 	movwne	r1, #6439	; 0x1927
    2620:	34170000 	ldrcc	r0, [r7], #-0
    2624:	3a0e0300 	bcc	38322c <_Min_Stack_Size+0x38302c>
    2628:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    262c:	00180213 	andseq	r0, r8, r3, lsl r2
    2630:	00341800 	eorseq	r1, r4, r0, lsl #16
    2634:	0b3a0e03 	bleq	e85e48 <_Min_Stack_Size+0xe85c48>
    2638:	1349053b 	movtne	r0, #38203	; 0x953b
    263c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    2640:	34190000 	ldrcc	r0, [r9], #-0
    2644:	3a0e0300 	bcc	38324c <_Min_Stack_Size+0x38304c>
    2648:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    264c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    2650:	00000018 	andeq	r0, r0, r8, lsl r0
    2654:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2658:	030b130e 	movweq	r1, #45838	; 0xb30e
    265c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2660:	10011117 	andne	r1, r1, r7, lsl r1
    2664:	02000017 	andeq	r0, r0, #23
    2668:	0b0b0024 	bleq	2c2700 <_Min_Stack_Size+0x2c2500>
    266c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2670:	16030000 	strne	r0, [r3], -r0
    2674:	3a0e0300 	bcc	38327c <_Min_Stack_Size+0x38307c>
    2678:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    267c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2680:	0b0b0024 	bleq	2c2718 <_Min_Stack_Size+0x2c2518>
    2684:	0e030b3e 	vmoveq.16	d3[0], r0
    2688:	16050000 	strne	r0, [r5], -r0
    268c:	3a0e0300 	bcc	383294 <_Min_Stack_Size+0x383094>
    2690:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2694:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2698:	0b0b0117 	bleq	2c2afc <_Min_Stack_Size+0x2c28fc>
    269c:	0b3b0b3a 	bleq	ec538c <_Min_Stack_Size+0xec518c>
    26a0:	00001301 	andeq	r1, r0, r1, lsl #6
    26a4:	03000d07 	movweq	r0, #3335	; 0xd07
    26a8:	3b0b3a0e 	blcc	2d0ee8 <_Min_Stack_Size+0x2d0ce8>
    26ac:	0013490b 	andseq	r4, r3, fp, lsl #18
    26b0:	01010800 	tsteq	r1, r0, lsl #16
    26b4:	13011349 	movwne	r1, #4937	; 0x1349
    26b8:	21090000 	mrscs	r0, (UNDEF: 9)
    26bc:	2f134900 	svccs	0x00134900
    26c0:	0a00000b 	beq	26f4 <_Min_Stack_Size+0x24f4>
    26c4:	0b0b0113 	bleq	2c2b18 <_Min_Stack_Size+0x2c2918>
    26c8:	0b3b0b3a 	bleq	ec53b8 <_Min_Stack_Size+0xec51b8>
    26cc:	00001301 	andeq	r1, r0, r1, lsl #6
    26d0:	03000d0b 	movweq	r0, #3339	; 0xd0b
    26d4:	3b0b3a0e 	blcc	2d0f14 <_Min_Stack_Size+0x2d0d14>
    26d8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    26dc:	0c00000b 	stceq	0, cr0, [r0], {11}
    26e0:	0b0b000f 	bleq	2c2724 <_Min_Stack_Size+0x2c2524>
    26e4:	130d0000 	movwne	r0, #53248	; 0xd000
    26e8:	0b0e0301 	bleq	3832f4 <_Min_Stack_Size+0x3830f4>
    26ec:	3b0b3a0b 	blcc	2d0f20 <_Min_Stack_Size+0x2d0d20>
    26f0:	0013010b 	andseq	r0, r3, fp, lsl #2
    26f4:	000d0e00 	andeq	r0, sp, r0, lsl #28
    26f8:	0b3a0803 	bleq	e8470c <_Min_Stack_Size+0xe8450c>
    26fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2700:	00000b38 	andeq	r0, r0, r8, lsr fp
    2704:	0b000f0f 	bleq	6348 <_Min_Stack_Size+0x6148>
    2708:	0013490b 	andseq	r4, r3, fp, lsl #18
    270c:	01131000 	tsteq	r3, r0
    2710:	0b0b0e03 	bleq	2c5f24 <_Min_Stack_Size+0x2c5d24>
    2714:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2718:	00001301 	andeq	r1, r0, r1, lsl #6
    271c:	03000d11 	movweq	r0, #3345	; 0xd11
    2720:	3b0b3a0e 	blcc	2d0f60 <_Min_Stack_Size+0x2d0d60>
    2724:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    2728:	1200000b 	andne	r0, r0, #11
    272c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    2730:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2734:	0b381349 	bleq	e07460 <_Min_Stack_Size+0xe07260>
    2738:	15130000 	ldrne	r0, [r3, #-0]
    273c:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    2740:	00130113 	andseq	r0, r3, r3, lsl r1
    2744:	00051400 	andeq	r1, r5, r0, lsl #8
    2748:	00001349 	andeq	r1, r0, r9, asr #6
    274c:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    2750:	16000013 			; <UNDEFINED> instruction: 0x16000013
    2754:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    2758:	00001301 	andeq	r1, r0, r1, lsl #6
    275c:	3f012e17 	svccc	0x00012e17
    2760:	3a0e0319 	bcc	3833cc <_Min_Stack_Size+0x3831cc>
    2764:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2768:	11134919 	tstne	r3, r9, lsl r9
    276c:	40061201 	andmi	r1, r6, r1, lsl #4
    2770:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2774:	00001301 	andeq	r1, r0, r1, lsl #6
    2778:	03000518 	movweq	r0, #1304	; 0x518
    277c:	3b0b3a0e 	blcc	2d0fbc <_Min_Stack_Size+0x2d0dbc>
    2780:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2784:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    2788:	01018289 	smlabbeq	r1, r9, r2, r8
    278c:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    2790:	00133119 	andseq	r3, r3, r9, lsl r1
    2794:	828a1a00 	addhi	r1, sl, #0, 20
    2798:	18020001 	stmdane	r2, {r0}
    279c:	00184291 	mulseq	r8, r1, r2
    27a0:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
    27a4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    27a8:	0b3b0b3a 	bleq	ec5498 <_Min_Stack_Size+0xec5298>
    27ac:	01111927 	tsteq	r1, r7, lsr #18
    27b0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    27b4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    27b8:	1c000013 	stcne	0, cr0, [r0], {19}
    27bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    27c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    27c4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    27c8:	0000193c 	andeq	r1, r0, ip, lsr r9
    27cc:	3f012e1d 	svccc	0x00012e1d
    27d0:	3a0e0319 	bcc	38343c <_Min_Stack_Size+0x38323c>
    27d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    27d8:	3c134919 	ldccc	9, cr4, [r3], {25}
    27dc:	00130119 	andseq	r0, r3, r9, lsl r1
    27e0:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
    27e4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    27e8:	0b3b0b3a 	bleq	ec54d8 <_Min_Stack_Size+0xec52d8>
    27ec:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    27f0:	01000000 	mrseq	r0, (UNDEF: 0)
    27f4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    27f8:	0e030b13 	vmoveq.32	d3[0], r0
    27fc:	17550e1b 	smmlane	r5, fp, lr, r0
    2800:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2804:	24020000 	strcs	r0, [r2], #-0
    2808:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    280c:	000e030b 	andeq	r0, lr, fp, lsl #6
    2810:	00240300 	eoreq	r0, r4, r0, lsl #6
    2814:	0b3e0b0b 	bleq	f85448 <_Min_Stack_Size+0xf85248>
    2818:	00000803 	andeq	r0, r0, r3, lsl #16
    281c:	03001604 	movweq	r1, #1540	; 0x604
    2820:	3b0b3a0e 	blcc	2d1060 <_Min_Stack_Size+0x2d0e60>
    2824:	0013490b 	andseq	r4, r3, fp, lsl #18
    2828:	000f0500 	andeq	r0, pc, r0, lsl #10
    282c:	00000b0b 	andeq	r0, r0, fp, lsl #22
    2830:	03001606 	movweq	r1, #1542	; 0x606
    2834:	3b0b3a0e 	blcc	2d1074 <_Min_Stack_Size+0x2d0e74>
    2838:	00134905 	andseq	r4, r3, r5, lsl #18
    283c:	01170700 	tsteq	r7, r0, lsl #14
    2840:	0b3a0b0b 	bleq	e85474 <_Min_Stack_Size+0xe85274>
    2844:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2848:	0d080000 	stceq	0, cr0, [r8, #-0]
    284c:	3a0e0300 	bcc	383454 <_Min_Stack_Size+0x383254>
    2850:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2854:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2858:	13490101 	movtne	r0, #37121	; 0x9101
    285c:	00001301 	andeq	r1, r0, r1, lsl #6
    2860:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
    2864:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2868:	01130b00 	tsteq	r3, r0, lsl #22
    286c:	0b3a0b0b 	bleq	e854a0 <_Min_Stack_Size+0xe852a0>
    2870:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2874:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    2878:	3a0e0300 	bcc	383480 <_Min_Stack_Size+0x383280>
    287c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2880:	000b3813 	andeq	r3, fp, r3, lsl r8
    2884:	01130d00 	tsteq	r3, r0, lsl #26
    2888:	0b0b0e03 	bleq	2c609c <_Min_Stack_Size+0x2c5e9c>
    288c:	0b3b0b3a 	bleq	ec557c <_Min_Stack_Size+0xec537c>
    2890:	00001301 	andeq	r1, r0, r1, lsl #6
    2894:	03000d0e 	movweq	r0, #3342	; 0xd0e
    2898:	3b0b3a08 	blcc	2d10c0 <_Min_Stack_Size+0x2d0ec0>
    289c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    28a0:	0f00000b 	svceq	0x0000000b
    28a4:	0b0b000f 	bleq	2c28e8 <_Min_Stack_Size+0x2c26e8>
    28a8:	00001349 	andeq	r1, r0, r9, asr #6
    28ac:	03011310 	movweq	r1, #4880	; 0x1310
    28b0:	3a0b0b0e 	bcc	2c54f0 <_Min_Stack_Size+0x2c52f0>
    28b4:	01053b0b 	tsteq	r5, fp, lsl #22
    28b8:	11000013 	tstne	r0, r3, lsl r0
    28bc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    28c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    28c4:	0b381349 	bleq	e075f0 <_Min_Stack_Size+0xe073f0>
    28c8:	0d120000 	ldceq	0, cr0, [r2, #-0]
    28cc:	3a080300 	bcc	2034d4 <_Min_Stack_Size+0x2032d4>
    28d0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    28d4:	000b3813 	andeq	r3, fp, r3, lsl r8
    28d8:	01151300 	tsteq	r5, r0, lsl #6
    28dc:	13491927 	movtne	r1, #39207	; 0x9927
    28e0:	00001301 	andeq	r1, r0, r1, lsl #6
    28e4:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    28e8:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    28ec:	13490026 	movtne	r0, #36902	; 0x9026
    28f0:	15160000 	ldrne	r0, [r6, #-0]
    28f4:	01192701 	tsteq	r9, r1, lsl #14
    28f8:	17000013 	smladne	r0, r3, r0, r0
    28fc:	0e03012e 	adfeqsp	f0, f3, #0.5
    2900:	0b3b0b3a 	bleq	ec55f0 <_Min_Stack_Size+0xec53f0>
    2904:	13491927 	movtne	r1, #39207	; 0x9927
    2908:	13010b20 	movwne	r0, #6944	; 0x1b20
    290c:	05180000 	ldreq	r0, [r8, #-0]
    2910:	3a080300 	bcc	203518 <_Min_Stack_Size+0x203318>
    2914:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2918:	19000013 	stmdbne	r0, {r0, r1, r4}
    291c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2920:	0b3b0b3a 	bleq	ec5610 <_Min_Stack_Size+0xec5410>
    2924:	00001349 	andeq	r1, r0, r9, asr #6
    2928:	3f012e1a 	svccc	0x00012e1a
    292c:	3a0e0319 	bcc	383598 <_Min_Stack_Size+0x383398>
    2930:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2934:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2938:	97184006 	ldrls	r4, [r8, -r6]
    293c:	13011942 	movwne	r1, #6466	; 0x1942
    2940:	051b0000 	ldreq	r0, [fp, #-0]
    2944:	3a0e0300 	bcc	38354c <_Min_Stack_Size+0x38334c>
    2948:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    294c:	00170213 	andseq	r0, r7, r3, lsl r2
    2950:	00341c00 	eorseq	r1, r4, r0, lsl #24
    2954:	0b3a0e03 	bleq	e86168 <_Min_Stack_Size+0xe85f68>
    2958:	1349053b 	movtne	r0, #38203	; 0x953b
    295c:	00001802 	andeq	r1, r0, r2, lsl #16
    2960:	0300341d 	movweq	r3, #1053	; 0x41d
    2964:	3b0b3a08 	blcc	2d118c <_Min_Stack_Size+0x2d0f8c>
    2968:	02134905 	andseq	r4, r3, #81920	; 0x14000
    296c:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
    2970:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2974:	17550152 			; <UNDEFINED> instruction: 0x17550152
    2978:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    297c:	051f0000 	ldreq	r0, [pc, #-0]	; 2984 <_Min_Stack_Size+0x2784>
    2980:	02133100 	andseq	r3, r3, #0, 2
    2984:	20000017 	andcs	r0, r0, r7, lsl r0
    2988:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    298c:	34210000 	strtcc	r0, [r1], #-0
    2990:	02133100 	andseq	r3, r3, #0, 2
    2994:	22000017 	andcs	r0, r0, #23
    2998:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    299c:	0b3b0b3a 	bleq	ec568c <_Min_Stack_Size+0xec548c>
    29a0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    29a4:	0000193c 	andeq	r1, r0, ip, lsr r9
    29a8:	01110100 	tsteq	r1, r0, lsl #2
    29ac:	0b130e25 	bleq	4c6248 <_Min_Stack_Size+0x4c6048>
    29b0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    29b4:	01111755 	tsteq	r1, r5, asr r7
    29b8:	00001710 	andeq	r1, r0, r0, lsl r7
    29bc:	0b002402 	bleq	b9cc <_Min_Stack_Size+0xb7cc>
    29c0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    29c4:	0300000e 	movweq	r0, #14
    29c8:	0b0b0024 	bleq	2c2a60 <_Min_Stack_Size+0x2c2860>
    29cc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    29d0:	16040000 	strne	r0, [r4], -r0
    29d4:	3a0e0300 	bcc	3835dc <_Min_Stack_Size+0x3833dc>
    29d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    29dc:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    29e0:	0b0b000f 	bleq	2c2a24 <_Min_Stack_Size+0x2c2824>
    29e4:	16060000 	strne	r0, [r6], -r0
    29e8:	3a0e0300 	bcc	3835f0 <_Min_Stack_Size+0x3833f0>
    29ec:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    29f0:	07000013 	smladeq	r0, r3, r0, r0
    29f4:	0b0b0117 	bleq	2c2e58 <_Min_Stack_Size+0x2c2c58>
    29f8:	0b3b0b3a 	bleq	ec56e8 <_Min_Stack_Size+0xec54e8>
    29fc:	00001301 	andeq	r1, r0, r1, lsl #6
    2a00:	03000d08 	movweq	r0, #3336	; 0xd08
    2a04:	3b0b3a0e 	blcc	2d1244 <_Min_Stack_Size+0x2d1044>
    2a08:	0013490b 	andseq	r4, r3, fp, lsl #18
    2a0c:	01010900 	tsteq	r1, r0, lsl #18
    2a10:	13011349 	movwne	r1, #4937	; 0x1349
    2a14:	210a0000 	mrscs	r0, (UNDEF: 10)
    2a18:	2f134900 	svccs	0x00134900
    2a1c:	0b00000b 	bleq	2a50 <_Min_Stack_Size+0x2850>
    2a20:	0b0b0113 	bleq	2c2e74 <_Min_Stack_Size+0x2c2c74>
    2a24:	0b3b0b3a 	bleq	ec5714 <_Min_Stack_Size+0xec5514>
    2a28:	00001301 	andeq	r1, r0, r1, lsl #6
    2a2c:	03000d0c 	movweq	r0, #3340	; 0xd0c
    2a30:	3b0b3a0e 	blcc	2d1270 <_Min_Stack_Size+0x2d1070>
    2a34:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2a38:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    2a3c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2a40:	0b3a0b0b 	bleq	e85674 <_Min_Stack_Size+0xe85474>
    2a44:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2a48:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    2a4c:	3a080300 	bcc	203654 <_Min_Stack_Size+0x203454>
    2a50:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a54:	000b3813 	andeq	r3, fp, r3, lsl r8
    2a58:	000f0f00 	andeq	r0, pc, r0, lsl #30
    2a5c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2a60:	13100000 	tstne	r0, #0
    2a64:	0b0e0301 	bleq	383670 <_Min_Stack_Size+0x383470>
    2a68:	3b0b3a0b 	blcc	2d129c <_Min_Stack_Size+0x2d109c>
    2a6c:	00130105 	andseq	r0, r3, r5, lsl #2
    2a70:	000d1100 	andeq	r1, sp, r0, lsl #2
    2a74:	0b3a0e03 	bleq	e86288 <_Min_Stack_Size+0xe86088>
    2a78:	1349053b 	movtne	r0, #38203	; 0x953b
    2a7c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2a80:	03000d12 	movweq	r0, #3346	; 0xd12
    2a84:	3b0b3a08 	blcc	2d12ac <_Min_Stack_Size+0x2d10ac>
    2a88:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    2a8c:	1300000b 	movwne	r0, #11
    2a90:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    2a94:	13011349 	movwne	r1, #4937	; 0x1349
    2a98:	05140000 	ldreq	r0, [r4, #-0]
    2a9c:	00134900 	andseq	r4, r3, r0, lsl #18
    2aa0:	00261500 	eoreq	r1, r6, r0, lsl #10
    2aa4:	00001349 	andeq	r1, r0, r9, asr #6
    2aa8:	27011516 	smladcs	r1, r6, r5, r1
    2aac:	00130119 	andseq	r0, r3, r9, lsl r1
    2ab0:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
    2ab4:	0b3a0e03 	bleq	e862c8 <_Min_Stack_Size+0xe860c8>
    2ab8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2abc:	0b201349 	bleq	8077e8 <_Min_Stack_Size+0x8075e8>
    2ac0:	00001301 	andeq	r1, r0, r1, lsl #6
    2ac4:	03000518 	movweq	r0, #1304	; 0x518
    2ac8:	3b0b3a0e 	blcc	2d1308 <_Min_Stack_Size+0x2d1108>
    2acc:	0013490b 	andseq	r4, r3, fp, lsl #18
    2ad0:	00051900 	andeq	r1, r5, r0, lsl #18
    2ad4:	0b3a0803 	bleq	e84ae8 <_Min_Stack_Size+0xe848e8>
    2ad8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2adc:	341a0000 	ldrcc	r0, [sl], #-0
    2ae0:	3a080300 	bcc	2036e8 <_Min_Stack_Size+0x2034e8>
    2ae4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ae8:	1b000013 	blne	2b3c <_Min_Stack_Size+0x293c>
    2aec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2af0:	0b3b0b3a 	bleq	ec57e0 <_Min_Stack_Size+0xec55e0>
    2af4:	00001349 	andeq	r1, r0, r9, asr #6
    2af8:	3f012e1c 	svccc	0x00012e1c
    2afc:	3a0e0319 	bcc	383768 <_Min_Stack_Size+0x383568>
    2b00:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2b04:	11134919 	tstne	r3, r9, lsl r9
    2b08:	40061201 	andmi	r1, r6, r1, lsl #4
    2b0c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2b10:	00001301 	andeq	r1, r0, r1, lsl #6
    2b14:	0300051d 	movweq	r0, #1309	; 0x51d
    2b18:	3b0b3a0e 	blcc	2d1358 <_Min_Stack_Size+0x2d1158>
    2b1c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2b20:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
    2b24:	08030005 	stmdaeq	r3, {r0, r2}
    2b28:	0b3b0b3a 	bleq	ec5818 <_Min_Stack_Size+0xec5618>
    2b2c:	17021349 	strne	r1, [r2, -r9, asr #6]
    2b30:	341f0000 	ldrcc	r0, [pc], #-0	; 2b38 <_Min_Stack_Size+0x2938>
    2b34:	3a080300 	bcc	20373c <_Min_Stack_Size+0x20353c>
    2b38:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b3c:	00170213 	andseq	r0, r7, r3, lsl r2
    2b40:	00342000 	eorseq	r2, r4, r0
    2b44:	0b3a0803 	bleq	e84b58 <_Min_Stack_Size+0xe84958>
    2b48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2b4c:	00001802 	andeq	r1, r0, r2, lsl #16
    2b50:	03003421 	movweq	r3, #1057	; 0x421
    2b54:	3b0b3a0e 	blcc	2d1394 <_Min_Stack_Size+0x2d1194>
    2b58:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2b5c:	22000017 	andcs	r0, r0, #23
    2b60:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2b64:	0b3b0b3a 	bleq	ec5854 <_Min_Stack_Size+0xec5654>
    2b68:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2b6c:	0b230000 	bleq	8c2b74 <_Min_Stack_Size+0x8c2974>
    2b70:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2b74:	00130106 	andseq	r0, r3, r6, lsl #2
    2b78:	00342400 	eorseq	r2, r4, r0, lsl #8
    2b7c:	0b3a0803 	bleq	e84b90 <_Min_Stack_Size+0xe84990>
    2b80:	1349053b 	movtne	r0, #38203	; 0x953b
    2b84:	00001702 	andeq	r1, r0, r2, lsl #14
    2b88:	31011d25 	tstcc	r1, r5, lsr #26
    2b8c:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    2b90:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    2b94:	26000005 	strcs	r0, [r0], -r5
    2b98:	13310005 	teqne	r1, #5
    2b9c:	00001702 	andeq	r1, r0, r2, lsl #14
    2ba0:	55010b27 	strpl	r0, [r1, #-2855]	; 0xfffff4d9
    2ba4:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    2ba8:	13310034 	teqne	r1, #52	; 0x34
    2bac:	00001702 	andeq	r1, r0, r2, lsl #14
    2bb0:	01828929 	orreq	r8, r2, r9, lsr #18
    2bb4:	31011101 	tstcc	r1, r1, lsl #2
    2bb8:	00130113 	andseq	r0, r3, r3, lsl r1
    2bbc:	828a2a00 	addhi	r2, sl, #0, 20
    2bc0:	18020001 	stmdane	r2, {r0}
    2bc4:	00184291 	mulseq	r8, r1, r2
    2bc8:	82892b00 	addhi	r2, r9, #0, 22
    2bcc:	01110101 	tsteq	r1, r1, lsl #2
    2bd0:	00001331 	andeq	r1, r0, r1, lsr r3
    2bd4:	0300342c 	movweq	r3, #1068	; 0x42c
    2bd8:	3b0b3a0e 	blcc	2d1418 <_Min_Stack_Size+0x2d1218>
    2bdc:	3f13490b 	svccc	0x0013490b
    2be0:	00180219 	andseq	r0, r8, r9, lsl r2
    2be4:	012e2d00 			; <UNDEFINED> instruction: 0x012e2d00
    2be8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2bec:	0b3b0b3a 	bleq	ec58dc <_Min_Stack_Size+0xec56dc>
    2bf0:	13491927 	movtne	r1, #39207	; 0x9927
    2bf4:	0000193c 	andeq	r1, r0, ip, lsr r9
    2bf8:	01110100 	tsteq	r1, r0, lsl #2
    2bfc:	0b130e25 	bleq	4c6498 <_Min_Stack_Size+0x4c6298>
    2c00:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2c04:	01111755 	tsteq	r1, r5, asr r7
    2c08:	00001710 	andeq	r1, r0, r0, lsl r7
    2c0c:	0b002402 	bleq	bc1c <_Min_Stack_Size+0xba1c>
    2c10:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2c14:	03000008 	movweq	r0, #8
    2c18:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2c1c:	0b3b0b3a 	bleq	ec590c <_Min_Stack_Size+0xec570c>
    2c20:	00001349 	andeq	r1, r0, r9, asr #6
    2c24:	0b002404 	bleq	bc3c <_Min_Stack_Size+0xba3c>
    2c28:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2c2c:	0500000e 	streq	r0, [r0, #-14]
    2c30:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2c34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2c38:	00001349 	andeq	r1, r0, r9, asr #6
    2c3c:	0b011706 	bleq	4885c <_Min_Stack_Size+0x4865c>
    2c40:	3b0b3a0b 	blcc	2d1474 <_Min_Stack_Size+0x2d1274>
    2c44:	0013010b 	andseq	r0, r3, fp, lsl #2
    2c48:	000d0700 	andeq	r0, sp, r0, lsl #14
    2c4c:	0b3a0e03 	bleq	e86460 <_Min_Stack_Size+0xe86260>
    2c50:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2c54:	01080000 	mrseq	r0, (UNDEF: 8)
    2c58:	01134901 	tsteq	r3, r1, lsl #18
    2c5c:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2c60:	13490021 	movtne	r0, #36897	; 0x9021
    2c64:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2c68:	0b01130a 	bleq	47898 <_Min_Stack_Size+0x47698>
    2c6c:	3b0b3a0b 	blcc	2d14a0 <_Min_Stack_Size+0x2d12a0>
    2c70:	0013010b 	andseq	r0, r3, fp, lsl #2
    2c74:	000d0b00 	andeq	r0, sp, r0, lsl #22
    2c78:	0b3a0e03 	bleq	e8648c <_Min_Stack_Size+0xe8628c>
    2c7c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2c80:	00000b38 	andeq	r0, r0, r8, lsr fp
    2c84:	0b000f0c 	bleq	68bc <_Min_Stack_Size+0x66bc>
    2c88:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    2c8c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2c90:	0b3a0b0b 	bleq	e858c4 <_Min_Stack_Size+0xe856c4>
    2c94:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2c98:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    2c9c:	3a080300 	bcc	2038a4 <_Min_Stack_Size+0x2036a4>
    2ca0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ca4:	000b3813 	andeq	r3, fp, r3, lsl r8
    2ca8:	000f0f00 	andeq	r0, pc, r0, lsl #30
    2cac:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2cb0:	13100000 	tstne	r0, #0
    2cb4:	0b0e0301 	bleq	3838c0 <_Min_Stack_Size+0x3836c0>
    2cb8:	3b0b3a0b 	blcc	2d14ec <_Min_Stack_Size+0x2d12ec>
    2cbc:	00130105 	andseq	r0, r3, r5, lsl #2
    2cc0:	000d1100 	andeq	r1, sp, r0, lsl #2
    2cc4:	0b3a0e03 	bleq	e864d8 <_Min_Stack_Size+0xe862d8>
    2cc8:	1349053b 	movtne	r0, #38203	; 0x953b
    2ccc:	00000b38 	andeq	r0, r0, r8, lsr fp
    2cd0:	03000d12 	movweq	r0, #3346	; 0xd12
    2cd4:	3b0b3a08 	blcc	2d14fc <_Min_Stack_Size+0x2d12fc>
    2cd8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    2cdc:	1300000b 	movwne	r0, #11
    2ce0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    2ce4:	13011349 	movwne	r1, #4937	; 0x1349
    2ce8:	05140000 	ldreq	r0, [r4, #-0]
    2cec:	00134900 	andseq	r4, r3, r0, lsl #18
    2cf0:	00261500 	eoreq	r1, r6, r0, lsl #10
    2cf4:	00001349 	andeq	r1, r0, r9, asr #6
    2cf8:	27011516 	smladcs	r1, r6, r5, r1
    2cfc:	00130119 	andseq	r0, r3, r9, lsl r1
    2d00:	000d1700 	andeq	r1, sp, r0, lsl #14
    2d04:	13490e03 	movtne	r0, #40451	; 0x9e03
    2d08:	19340b38 	ldmdbne	r4!, {r3, r4, r5, r8, r9, fp}
    2d0c:	26180000 	ldrcs	r0, [r8], -r0
    2d10:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2d14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2d18:	0b3a0e03 	bleq	e8652c <_Min_Stack_Size+0xe8632c>
    2d1c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2d20:	01111349 	tsteq	r1, r9, asr #6
    2d24:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2d28:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2d2c:	1a000013 	bne	2d80 <_Min_Stack_Size+0x2b80>
    2d30:	08030005 	stmdaeq	r3, {r0, r2}
    2d34:	0b3b0b3a 	bleq	ec5a24 <_Min_Stack_Size+0xec5824>
    2d38:	17021349 	strne	r1, [r2, -r9, asr #6]
    2d3c:	341b0000 	ldrcc	r0, [fp], #-0
    2d40:	3a080300 	bcc	203948 <_Min_Stack_Size+0x203748>
    2d44:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2d48:	00170213 	andseq	r0, r7, r3, lsl r2
    2d4c:	000a1c00 	andeq	r1, sl, r0, lsl #24
    2d50:	0b3a0803 	bleq	e84d64 <_Min_Stack_Size+0xe84b64>
    2d54:	01110b3b 	tsteq	r1, fp, lsr fp
    2d58:	0b1d0000 	bleq	742d60 <_Min_Stack_Size+0x742b60>
    2d5c:	01175501 	tsteq	r7, r1, lsl #10
    2d60:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    2d64:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2d68:	0b3b0b3a 	bleq	ec5a58 <_Min_Stack_Size+0xec5858>
    2d6c:	17021349 	strne	r1, [r2, -r9, asr #6]
    2d70:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
    2d74:	11010182 	smlabbne	r1, r2, r1, r0
    2d78:	01133101 	tsteq	r3, r1, lsl #2
    2d7c:	20000013 	andcs	r0, r0, r3, lsl r0
    2d80:	0001828a 	andeq	r8, r1, sl, lsl #5
    2d84:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    2d88:	21000018 	tstcs	r0, r8, lsl r0
    2d8c:	01018289 	smlabbeq	r1, r9, r2, r8
    2d90:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2d94:	34220000 	strtcc	r0, [r2], #-0
    2d98:	3a080300 	bcc	2039a0 <_Min_Stack_Size+0x2037a0>
    2d9c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2da0:	00180213 	andseq	r0, r8, r3, lsl r2
    2da4:	000a2300 	andeq	r2, sl, r0, lsl #6
    2da8:	0b3a0803 	bleq	e84dbc <_Min_Stack_Size+0xe84bbc>
    2dac:	0111053b 	tsteq	r1, fp, lsr r5
    2db0:	34240000 	strtcc	r0, [r4], #-0
    2db4:	3a080300 	bcc	2039bc <_Min_Stack_Size+0x2037bc>
    2db8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2dbc:	00170213 	andseq	r0, r7, r3, lsl r2
    2dc0:	00342500 	eorseq	r2, r4, r0, lsl #10
    2dc4:	0b3a0e03 	bleq	e865d8 <_Min_Stack_Size+0xe863d8>
    2dc8:	1349053b 	movtne	r0, #38203	; 0x953b
    2dcc:	00001702 	andeq	r1, r0, r2, lsl #14
    2dd0:	3f012e26 	svccc	0x00012e26
    2dd4:	3a0e0319 	bcc	383a40 <_Min_Stack_Size+0x383840>
    2dd8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2ddc:	11134919 	tstne	r3, r9, lsl r9
    2de0:	40061201 	andmi	r1, r6, r1, lsl #4
    2de4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2de8:	00001301 	andeq	r1, r0, r1, lsl #6
    2dec:	03000527 	movweq	r0, #1319	; 0x527
    2df0:	3b0b3a0e 	blcc	2d1630 <_Min_Stack_Size+0x2d1430>
    2df4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2df8:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    2dfc:	08030005 	stmdaeq	r3, {r0, r2}
    2e00:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2e04:	17021349 	strne	r1, [r2, -r9, asr #6]
    2e08:	05290000 	streq	r0, [r9, #-0]!
    2e0c:	3a080300 	bcc	203a14 <_Min_Stack_Size+0x203814>
    2e10:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e14:	00180213 	andseq	r0, r8, r3, lsl r2
    2e18:	00342a00 	eorseq	r2, r4, r0, lsl #20
    2e1c:	0b3a0e03 	bleq	e86630 <_Min_Stack_Size+0xe86430>
    2e20:	1349053b 	movtne	r0, #38203	; 0x953b
    2e24:	00001802 	andeq	r1, r0, r2, lsl #16
    2e28:	03000a2b 	movweq	r0, #2603	; 0xa2b
    2e2c:	3b0b3a0e 	blcc	2d166c <_Min_Stack_Size+0x2d146c>
    2e30:	00011105 	andeq	r1, r1, r5, lsl #2
    2e34:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
    2e38:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2e3c:	0b3b0b3a 	bleq	ec5b2c <_Min_Stack_Size+0xec592c>
    2e40:	13491927 	movtne	r1, #39207	; 0x9927
    2e44:	1301193c 	movwne	r1, #6460	; 0x193c
    2e48:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
    2e4c:	03193f01 	tsteq	r9, #1, 30
    2e50:	3b0b3a0e 	blcc	2d1690 <_Min_Stack_Size+0x2d1490>
    2e54:	3c19270b 	ldccc	7, cr2, [r9], {11}
    2e58:	00130119 	andseq	r0, r3, r9, lsl r1
    2e5c:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
    2e60:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2e64:	0b3b0b3a 	bleq	ec5b54 <_Min_Stack_Size+0xec5954>
    2e68:	13491927 	movtne	r1, #39207	; 0x9927
    2e6c:	0000193c 	andeq	r1, r0, ip, lsr r9
    2e70:	01110100 	tsteq	r1, r0, lsl #2
    2e74:	0b130e25 	bleq	4c6710 <_Min_Stack_Size+0x4c6510>
    2e78:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2e7c:	01111755 	tsteq	r1, r5, asr r7
    2e80:	00001710 	andeq	r1, r0, r0, lsl r7
    2e84:	0b002402 	bleq	be94 <_Min_Stack_Size+0xbc94>
    2e88:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2e8c:	03000008 	movweq	r0, #8
    2e90:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2e94:	0b3b0b3a 	bleq	ec5b84 <_Min_Stack_Size+0xec5984>
    2e98:	00001349 	andeq	r1, r0, r9, asr #6
    2e9c:	0b002404 	bleq	beb4 <_Min_Stack_Size+0xbcb4>
    2ea0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2ea4:	0500000e 	streq	r0, [r0, #-14]
    2ea8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2eac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2eb0:	00001349 	andeq	r1, r0, r9, asr #6
    2eb4:	0b011706 	bleq	48ad4 <_Min_Stack_Size+0x488d4>
    2eb8:	3b0b3a0b 	blcc	2d16ec <_Min_Stack_Size+0x2d14ec>
    2ebc:	0013010b 	andseq	r0, r3, fp, lsl #2
    2ec0:	000d0700 	andeq	r0, sp, r0, lsl #14
    2ec4:	0b3a0e03 	bleq	e866d8 <_Min_Stack_Size+0xe864d8>
    2ec8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ecc:	01080000 	mrseq	r0, (UNDEF: 8)
    2ed0:	01134901 	tsteq	r3, r1, lsl #18
    2ed4:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2ed8:	13490021 	movtne	r0, #36897	; 0x9021
    2edc:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2ee0:	0b01130a 	bleq	47b10 <_Min_Stack_Size+0x47910>
    2ee4:	3b0b3a0b 	blcc	2d1718 <_Min_Stack_Size+0x2d1518>
    2ee8:	0013010b 	andseq	r0, r3, fp, lsl #2
    2eec:	000d0b00 	andeq	r0, sp, r0, lsl #22
    2ef0:	0b3a0e03 	bleq	e86704 <_Min_Stack_Size+0xe86504>
    2ef4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ef8:	00000b38 	andeq	r0, r0, r8, lsr fp
    2efc:	0b000f0c 	bleq	6b34 <_Min_Stack_Size+0x6934>
    2f00:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    2f04:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2f08:	0b3a0b0b 	bleq	e85b3c <_Min_Stack_Size+0xe8593c>
    2f0c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2f10:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    2f14:	3a080300 	bcc	203b1c <_Min_Stack_Size+0x20391c>
    2f18:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2f1c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2f20:	000f0f00 	andeq	r0, pc, r0, lsl #30
    2f24:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2f28:	13100000 	tstne	r0, #0
    2f2c:	0b0e0301 	bleq	383b38 <_Min_Stack_Size+0x383938>
    2f30:	3b0b3a0b 	blcc	2d1764 <_Min_Stack_Size+0x2d1564>
    2f34:	00130105 	andseq	r0, r3, r5, lsl #2
    2f38:	000d1100 	andeq	r1, sp, r0, lsl #2
    2f3c:	0b3a0e03 	bleq	e86750 <_Min_Stack_Size+0xe86550>
    2f40:	1349053b 	movtne	r0, #38203	; 0x953b
    2f44:	00000b38 	andeq	r0, r0, r8, lsr fp
    2f48:	03000d12 	movweq	r0, #3346	; 0xd12
    2f4c:	3b0b3a08 	blcc	2d1774 <_Min_Stack_Size+0x2d1574>
    2f50:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    2f54:	1300000b 	movwne	r0, #11
    2f58:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    2f5c:	13011349 	movwne	r1, #4937	; 0x1349
    2f60:	05140000 	ldreq	r0, [r4, #-0]
    2f64:	00134900 	andseq	r4, r3, r0, lsl #18
    2f68:	00261500 	eoreq	r1, r6, r0, lsl #10
    2f6c:	00001349 	andeq	r1, r0, r9, asr #6
    2f70:	27011516 	smladcs	r1, r6, r5, r1
    2f74:	00130119 	andseq	r0, r3, r9, lsl r1
    2f78:	000d1700 	andeq	r1, sp, r0, lsl #14
    2f7c:	13490e03 	movtne	r0, #40451	; 0x9e03
    2f80:	19340b38 	ldmdbne	r4!, {r3, r4, r5, r8, r9, fp}
    2f84:	26180000 	ldrcs	r0, [r8], -r0
    2f88:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2f8c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2f90:	0b3a0e03 	bleq	e867a4 <_Min_Stack_Size+0xe865a4>
    2f94:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2f98:	01111349 	tsteq	r1, r9, asr #6
    2f9c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2fa0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2fa4:	1a000013 	bne	2ff8 <_Min_Stack_Size+0x2df8>
    2fa8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2fac:	0b3b0b3a 	bleq	ec5c9c <_Min_Stack_Size+0xec5a9c>
    2fb0:	17021349 	strne	r1, [r2, -r9, asr #6]
    2fb4:	051b0000 	ldreq	r0, [fp, #-0]
    2fb8:	3a080300 	bcc	203bc0 <_Min_Stack_Size+0x2039c0>
    2fbc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2fc0:	00170213 	andseq	r0, r7, r3, lsl r2
    2fc4:	00341c00 	eorseq	r1, r4, r0, lsl #24
    2fc8:	0b3a0803 	bleq	e84fdc <_Min_Stack_Size+0xe84ddc>
    2fcc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2fd0:	00001702 	andeq	r1, r0, r2, lsl #14
    2fd4:	03000a1d 	movweq	r0, #2589	; 0xa1d
    2fd8:	3b0b3a0e 	blcc	2d1818 <_Min_Stack_Size+0x2d1618>
    2fdc:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
    2fe0:	0111010b 	tsteq	r1, fp, lsl #2
    2fe4:	13010612 	movwne	r0, #5650	; 0x1612
    2fe8:	341f0000 	ldrcc	r0, [pc], #-0	; 2ff0 <_Min_Stack_Size+0x2df0>
    2fec:	3a0e0300 	bcc	383bf4 <_Min_Stack_Size+0x3839f4>
    2ff0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ff4:	00170213 	andseq	r0, r7, r3, lsl r2
    2ff8:	82892000 	addhi	r2, r9, #0
    2ffc:	01110101 	tsteq	r1, r1, lsl #2
    3000:	8a210000 	bhi	843008 <_Min_Stack_Size+0x842e08>
    3004:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    3008:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    300c:	34220000 	strtcc	r0, [r2], #-0
    3010:	3a0e0300 	bcc	383c18 <_Min_Stack_Size+0x383a18>
    3014:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3018:	00180213 	andseq	r0, r8, r3, lsl r2
    301c:	000a2300 	andeq	r2, sl, r0, lsl #6
    3020:	0b3a0e03 	bleq	e86834 <_Min_Stack_Size+0xe86634>
    3024:	01110b3b 	tsteq	r1, fp, lsr fp
    3028:	0a240000 	beq	903030 <_Min_Stack_Size+0x902e30>
    302c:	3a080300 	bcc	203c34 <_Min_Stack_Size+0x203a34>
    3030:	110b3b0b 	tstne	fp, fp, lsl #22
    3034:	25000001 	strcs	r0, [r0, #-1]
    3038:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    303c:	00001301 	andeq	r1, r0, r1, lsl #6
    3040:	01828926 	orreq	r8, r2, r6, lsr #18
    3044:	31011101 	tstcc	r1, r1, lsl #2
    3048:	27000013 	smladcs	r0, r3, r0, r0
    304c:	01018289 	smlabbeq	r1, r9, r2, r8
    3050:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3054:	00001301 	andeq	r1, r0, r1, lsl #6
    3058:	3f012e28 	svccc	0x00012e28
    305c:	3a0e0319 	bcc	383cc8 <_Min_Stack_Size+0x383ac8>
    3060:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3064:	3c134919 	ldccc	9, cr4, [r3], {25}
    3068:	00000019 	andeq	r0, r0, r9, lsl r0
    306c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3070:	030b130e 	movweq	r1, #45838	; 0xb30e
    3074:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    3078:	10011117 	andne	r1, r1, r7, lsl r1
    307c:	02000017 	andeq	r0, r0, #23
    3080:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3084:	0b3b0b3a 	bleq	ec5d74 <_Min_Stack_Size+0xec5b74>
    3088:	00001349 	andeq	r1, r0, r9, asr #6
    308c:	0b002403 	bleq	c0a0 <_Min_Stack_Size+0xbea0>
    3090:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3094:	04000008 	streq	r0, [r0], #-8
    3098:	0b0b0024 	bleq	2c3130 <_Min_Stack_Size+0x2c2f30>
    309c:	0e030b3e 	vmoveq.16	d3[0], r0
    30a0:	16050000 	strne	r0, [r5], -r0
    30a4:	3a0e0300 	bcc	383cac <_Min_Stack_Size+0x383aac>
    30a8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    30ac:	06000013 			; <UNDEFINED> instruction: 0x06000013
    30b0:	0b0b0117 	bleq	2c3514 <_Min_Stack_Size+0x2c3314>
    30b4:	0b3b0b3a 	bleq	ec5da4 <_Min_Stack_Size+0xec5ba4>
    30b8:	00001301 	andeq	r1, r0, r1, lsl #6
    30bc:	03000d07 	movweq	r0, #3335	; 0xd07
    30c0:	3b0b3a0e 	blcc	2d1900 <_Min_Stack_Size+0x2d1700>
    30c4:	0013490b 	andseq	r4, r3, fp, lsl #18
    30c8:	01010800 	tsteq	r1, r0, lsl #16
    30cc:	13011349 	movwne	r1, #4937	; 0x1349
    30d0:	21090000 	mrscs	r0, (UNDEF: 9)
    30d4:	2f134900 	svccs	0x00134900
    30d8:	0a00000b 	beq	310c <_Min_Stack_Size+0x2f0c>
    30dc:	0b0b0113 	bleq	2c3530 <_Min_Stack_Size+0x2c3330>
    30e0:	0b3b0b3a 	bleq	ec5dd0 <_Min_Stack_Size+0xec5bd0>
    30e4:	00001301 	andeq	r1, r0, r1, lsl #6
    30e8:	03000d0b 	movweq	r0, #3339	; 0xd0b
    30ec:	3b0b3a0e 	blcc	2d192c <_Min_Stack_Size+0x2d172c>
    30f0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    30f4:	0c00000b 	stceq	0, cr0, [r0], {11}
    30f8:	0b0b000f 	bleq	2c313c <_Min_Stack_Size+0x2c2f3c>
    30fc:	130d0000 	movwne	r0, #53248	; 0xd000
    3100:	0b0e0301 	bleq	383d0c <_Min_Stack_Size+0x383b0c>
    3104:	3b0b3a0b 	blcc	2d1938 <_Min_Stack_Size+0x2d1738>
    3108:	0013010b 	andseq	r0, r3, fp, lsl #2
    310c:	000d0e00 	andeq	r0, sp, r0, lsl #28
    3110:	0b3a0803 	bleq	e85124 <_Min_Stack_Size+0xe84f24>
    3114:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3118:	00000b38 	andeq	r0, r0, r8, lsr fp
    311c:	0b000f0f 	bleq	6d60 <_Min_Stack_Size+0x6b60>
    3120:	0013490b 	andseq	r4, r3, fp, lsl #18
    3124:	01131000 	tsteq	r3, r0
    3128:	0b0b0e03 	bleq	2c693c <_Min_Stack_Size+0x2c673c>
    312c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3130:	00001301 	andeq	r1, r0, r1, lsl #6
    3134:	03000d11 	movweq	r0, #3345	; 0xd11
    3138:	3b0b3a0e 	blcc	2d1978 <_Min_Stack_Size+0x2d1778>
    313c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    3140:	1200000b 	andne	r0, r0, #11
    3144:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    3148:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    314c:	0b381349 	bleq	e07e78 <_Min_Stack_Size+0xe07c78>
    3150:	15130000 	ldrne	r0, [r3, #-0]
    3154:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    3158:	00130113 	andseq	r0, r3, r3, lsl r1
    315c:	00051400 	andeq	r1, r5, r0, lsl #8
    3160:	00001349 	andeq	r1, r0, r9, asr #6
    3164:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    3168:	16000013 			; <UNDEFINED> instruction: 0x16000013
    316c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    3170:	00001301 	andeq	r1, r0, r1, lsl #6
    3174:	3f012e17 	svccc	0x00012e17
    3178:	3a0e0319 	bcc	383de4 <_Min_Stack_Size+0x383be4>
    317c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3180:	11134919 	tstne	r3, r9, lsl r9
    3184:	40061201 	andmi	r1, r6, r1, lsl #4
    3188:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    318c:	00001301 	andeq	r1, r0, r1, lsl #6
    3190:	03000518 	movweq	r0, #1304	; 0x518
    3194:	3b0b3a08 	blcc	2d19bc <_Min_Stack_Size+0x2d17bc>
    3198:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    319c:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    31a0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    31a4:	0b3b0b3a 	bleq	ec5e94 <_Min_Stack_Size+0xec5c94>
    31a8:	17021349 	strne	r1, [r2, -r9, asr #6]
    31ac:	341a0000 	ldrcc	r0, [sl], #-0
    31b0:	3a080300 	bcc	203db8 <_Min_Stack_Size+0x203bb8>
    31b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    31b8:	00180213 	andseq	r0, r8, r3, lsl r2
    31bc:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
    31c0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    31c4:	0b3b0b3a 	bleq	ec5eb4 <_Min_Stack_Size+0xec5cb4>
    31c8:	13491927 	movtne	r1, #39207	; 0x9927
    31cc:	1301193c 	movwne	r1, #6460	; 0x193c
    31d0:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
    31d4:	11010182 	smlabbne	r1, r2, r1, r0
    31d8:	00133101 	andseq	r3, r3, r1, lsl #2
    31dc:	828a1d00 	addhi	r1, sl, #0, 26
    31e0:	18020001 	stmdane	r2, {r0}
    31e4:	00184291 	mulseq	r8, r1, r2
    31e8:	00341e00 	eorseq	r1, r4, r0, lsl #28
    31ec:	0b3a0e03 	bleq	e86a00 <_Min_Stack_Size+0xe86800>
    31f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    31f4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    31f8:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    31fc:	03193f01 	tsteq	r9, #1, 30
    3200:	3b0b3a0e 	blcc	2d1a40 <_Min_Stack_Size+0x2d1840>
    3204:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3208:	00193c13 	andseq	r3, r9, r3, lsl ip
    320c:	11010000 	mrsne	r0, (UNDEF: 1)
    3210:	130e2501 	movwne	r2, #58625	; 0xe501
    3214:	1b0e030b 	blne	383e48 <_Min_Stack_Size+0x383c48>
    3218:	1117550e 	tstne	r7, lr, lsl #10
    321c:	00171001 	andseq	r1, r7, r1
    3220:	00240200 	eoreq	r0, r4, r0, lsl #4
    3224:	0b3e0b0b 	bleq	f85e58 <_Min_Stack_Size+0xf85c58>
    3228:	00000803 	andeq	r0, r0, r3, lsl #16
    322c:	03001603 	movweq	r1, #1539	; 0x603
    3230:	3b0b3a0e 	blcc	2d1a70 <_Min_Stack_Size+0x2d1870>
    3234:	0013490b 	andseq	r4, r3, fp, lsl #18
    3238:	00240400 	eoreq	r0, r4, r0, lsl #8
    323c:	0b3e0b0b 	bleq	f85e70 <_Min_Stack_Size+0xf85c70>
    3240:	00000e03 	andeq	r0, r0, r3, lsl #28
    3244:	0b000f05 	bleq	6e60 <_Min_Stack_Size+0x6c60>
    3248:	0600000b 	streq	r0, [r0], -fp
    324c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3250:	0b3a0e03 	bleq	e86a64 <_Min_Stack_Size+0xe86864>
    3254:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3258:	01111349 	tsteq	r1, r9, asr #6
    325c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3260:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3264:	07000013 	smladeq	r0, r3, r0, r0
    3268:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    326c:	0b3b0b3a 	bleq	ec5f5c <_Min_Stack_Size+0xec5d5c>
    3270:	17021349 	strne	r1, [r2, -r9, asr #6]
    3274:	05080000 	streq	r0, [r8, #-0]
    3278:	3a080300 	bcc	203e80 <_Min_Stack_Size+0x203c80>
    327c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3280:	00170213 	andseq	r0, r7, r3, lsl r2
    3284:	00340900 	eorseq	r0, r4, r0, lsl #18
    3288:	0b3a0803 	bleq	e8529c <_Min_Stack_Size+0xe8509c>
    328c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3290:	00001702 	andeq	r1, r0, r2, lsl #14
    3294:	0300340a 	movweq	r3, #1034	; 0x40a
    3298:	3b0b3a08 	blcc	2d1ac0 <_Min_Stack_Size+0x2d18c0>
    329c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    32a0:	0b000018 	bleq	3308 <_Min_Stack_Size+0x3108>
    32a4:	0b0b000f 	bleq	2c32e8 <_Min_Stack_Size+0x2c30e8>
    32a8:	00001349 	andeq	r1, r0, r9, asr #6
    32ac:	0000260c 	andeq	r2, r0, ip, lsl #12
    32b0:	00260d00 	eoreq	r0, r6, r0, lsl #26
    32b4:	00001349 	andeq	r1, r0, r9, asr #6
    32b8:	01110100 	tsteq	r1, r0, lsl #2
    32bc:	0b130e25 	bleq	4c6b58 <_Min_Stack_Size+0x4c6958>
    32c0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    32c4:	01111755 	tsteq	r1, r5, asr r7
    32c8:	00001710 	andeq	r1, r0, r0, lsl r7
    32cc:	0b002402 	bleq	c2dc <_Min_Stack_Size+0xc0dc>
    32d0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    32d4:	03000008 	movweq	r0, #8
    32d8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    32dc:	0b3b0b3a 	bleq	ec5fcc <_Min_Stack_Size+0xec5dcc>
    32e0:	00001349 	andeq	r1, r0, r9, asr #6
    32e4:	0b002404 	bleq	c2fc <_Min_Stack_Size+0xc0fc>
    32e8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    32ec:	0500000e 	streq	r0, [r0, #-14]
    32f0:	0b0b000f 	bleq	2c3334 <_Min_Stack_Size+0x2c3134>
    32f4:	0f060000 	svceq	0x00060000
    32f8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    32fc:	07000013 	smladeq	r0, r3, r0, r0
    3300:	13490026 	movtne	r0, #36902	; 0x9026
    3304:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    3308:	03193f01 	tsteq	r9, #1, 30
    330c:	3b0b3a0e 	blcc	2d1b4c <_Min_Stack_Size+0x2d194c>
    3310:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3314:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3318:	97184006 	ldrls	r4, [r8, -r6]
    331c:	13011942 	movwne	r1, #6466	; 0x1942
    3320:	05090000 	streq	r0, [r9, #-0]
    3324:	3a0e0300 	bcc	383f2c <_Min_Stack_Size+0x383d2c>
    3328:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    332c:	00180213 	andseq	r0, r8, r3, lsl r2
    3330:	00050a00 	andeq	r0, r5, r0, lsl #20
    3334:	0b3a0e03 	bleq	e86b48 <_Min_Stack_Size+0xe86948>
    3338:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    333c:	00001702 	andeq	r1, r0, r2, lsl #14
    3340:	0300340b 	movweq	r3, #1035	; 0x40b
    3344:	3b0b3a08 	blcc	2d1b6c <_Min_Stack_Size+0x2d196c>
    3348:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    334c:	0c000017 	stceq	0, cr0, [r0], {23}
    3350:	00000026 	andeq	r0, r0, r6, lsr #32
    3354:	01110100 	tsteq	r1, r0, lsl #2
    3358:	0b130e25 	bleq	4c6bf4 <_Min_Stack_Size+0x4c69f4>
    335c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    3360:	01111755 	tsteq	r1, r5, asr r7
    3364:	00001710 	andeq	r1, r0, r0, lsl r7
    3368:	0b002402 	bleq	c378 <_Min_Stack_Size+0xc178>
    336c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3370:	0300000e 	movweq	r0, #14
    3374:	0b0b0024 	bleq	2c340c <_Min_Stack_Size+0x2c320c>
    3378:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    337c:	16040000 	strne	r0, [r4], -r0
    3380:	3a0e0300 	bcc	383f88 <_Min_Stack_Size+0x383d88>
    3384:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3388:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    338c:	0b0b000f 	bleq	2c33d0 <_Min_Stack_Size+0x2c31d0>
    3390:	16060000 	strne	r0, [r6], -r0
    3394:	3a0e0300 	bcc	383f9c <_Min_Stack_Size+0x383d9c>
    3398:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    339c:	07000013 	smladeq	r0, r3, r0, r0
    33a0:	0b0b0117 	bleq	2c3804 <_Min_Stack_Size+0x2c3604>
    33a4:	0b3b0b3a 	bleq	ec6094 <_Min_Stack_Size+0xec5e94>
    33a8:	00001301 	andeq	r1, r0, r1, lsl #6
    33ac:	03000d08 	movweq	r0, #3336	; 0xd08
    33b0:	3b0b3a0e 	blcc	2d1bf0 <_Min_Stack_Size+0x2d19f0>
    33b4:	0013490b 	andseq	r4, r3, fp, lsl #18
    33b8:	01010900 	tsteq	r1, r0, lsl #18
    33bc:	13011349 	movwne	r1, #4937	; 0x1349
    33c0:	210a0000 	mrscs	r0, (UNDEF: 10)
    33c4:	2f134900 	svccs	0x00134900
    33c8:	0b00000b 	bleq	33fc <_Min_Stack_Size+0x31fc>
    33cc:	0b0b0113 	bleq	2c3820 <_Min_Stack_Size+0x2c3620>
    33d0:	0b3b0b3a 	bleq	ec60c0 <_Min_Stack_Size+0xec5ec0>
    33d4:	00001301 	andeq	r1, r0, r1, lsl #6
    33d8:	03000d0c 	movweq	r0, #3340	; 0xd0c
    33dc:	3b0b3a0e 	blcc	2d1c1c <_Min_Stack_Size+0x2d1a1c>
    33e0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    33e4:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    33e8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    33ec:	0b3a0b0b 	bleq	e86020 <_Min_Stack_Size+0xe85e20>
    33f0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    33f4:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    33f8:	3a080300 	bcc	204000 <_Min_Stack_Size+0x203e00>
    33fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3400:	000b3813 	andeq	r3, fp, r3, lsl r8
    3404:	000f0f00 	andeq	r0, pc, r0, lsl #30
    3408:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    340c:	13100000 	tstne	r0, #0
    3410:	0b0e0301 	bleq	38401c <_Min_Stack_Size+0x383e1c>
    3414:	3b0b3a0b 	blcc	2d1c48 <_Min_Stack_Size+0x2d1a48>
    3418:	00130105 	andseq	r0, r3, r5, lsl #2
    341c:	000d1100 	andeq	r1, sp, r0, lsl #2
    3420:	0b3a0e03 	bleq	e86c34 <_Min_Stack_Size+0xe86a34>
    3424:	1349053b 	movtne	r0, #38203	; 0x953b
    3428:	00000b38 	andeq	r0, r0, r8, lsr fp
    342c:	03000d12 	movweq	r0, #3346	; 0xd12
    3430:	3b0b3a08 	blcc	2d1c58 <_Min_Stack_Size+0x2d1a58>
    3434:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    3438:	1300000b 	movwne	r0, #11
    343c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    3440:	13011349 	movwne	r1, #4937	; 0x1349
    3444:	05140000 	ldreq	r0, [r4, #-0]
    3448:	00134900 	andseq	r4, r3, r0, lsl #18
    344c:	00261500 	eoreq	r1, r6, r0, lsl #10
    3450:	00001349 	andeq	r1, r0, r9, asr #6
    3454:	27011516 	smladcs	r1, r6, r5, r1
    3458:	00130119 	andseq	r0, r3, r9, lsl r1
    345c:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
    3460:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    3464:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3468:	13491927 	movtne	r1, #39207	; 0x9927
    346c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3470:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3474:	00130119 	andseq	r0, r3, r9, lsl r1
    3478:	00051800 	andeq	r1, r5, r0, lsl #16
    347c:	0b3a0e03 	bleq	e86c90 <_Min_Stack_Size+0xe86a90>
    3480:	1349053b 	movtne	r0, #38203	; 0x953b
    3484:	00001702 	andeq	r1, r0, r2, lsl #14
    3488:	03000519 	movweq	r0, #1305	; 0x519
    348c:	3b0b3a08 	blcc	2d1cb4 <_Min_Stack_Size+0x2d1ab4>
    3490:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3494:	1a000017 	bne	34f8 <_Min_Stack_Size+0x32f8>
    3498:	08030034 	stmdaeq	r3, {r2, r4, r5}
    349c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    34a0:	17021349 	strne	r1, [r2, -r9, asr #6]
    34a4:	341b0000 	ldrcc	r0, [fp], #-0
    34a8:	3a0e0300 	bcc	3840b0 <_Min_Stack_Size+0x383eb0>
    34ac:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    34b0:	1c000013 	stcne	0, cr0, [r0], {19}
    34b4:	01018289 	smlabbeq	r1, r9, r2, r8
    34b8:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    34bc:	01133119 	tsteq	r3, r9, lsl r1
    34c0:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    34c4:	0001828a 	andeq	r8, r1, sl, lsl #5
    34c8:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    34cc:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
    34d0:	00018289 	andeq	r8, r1, r9, lsl #5
    34d4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    34d8:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
    34dc:	11010182 	smlabbne	r1, r2, r1, r0
    34e0:	01133101 	tsteq	r3, r1, lsl #2
    34e4:	20000013 	andcs	r0, r0, r3, lsl r0
    34e8:	01018289 	smlabbeq	r1, r9, r2, r8
    34ec:	13310111 	teqne	r1, #1073741828	; 0x40000004
    34f0:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
    34f4:	03193f01 	tsteq	r9, #1, 30
    34f8:	3b0b3a0e 	blcc	2d1d38 <_Min_Stack_Size+0x2d1b38>
    34fc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3500:	01193c13 	tsteq	r9, r3, lsl ip
    3504:	22000013 	andcs	r0, r0, #19
    3508:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    350c:	0b3a0e03 	bleq	e86d20 <_Min_Stack_Size+0xe86b20>
    3510:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3514:	1301193c 	movwne	r1, #6460	; 0x193c
    3518:	26230000 	strtcs	r0, [r3], -r0
    351c:	00000000 	andeq	r0, r0, r0
    3520:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3524:	030b130e 	movweq	r1, #45838	; 0xb30e
    3528:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    352c:	10011117 	andne	r1, r1, r7, lsl r1
    3530:	02000017 	andeq	r0, r0, #23
    3534:	0b0b0024 	bleq	2c35cc <_Min_Stack_Size+0x2c33cc>
    3538:	0e030b3e 	vmoveq.16	d3[0], r0
    353c:	24030000 	strcs	r0, [r3], #-0
    3540:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3544:	0008030b 	andeq	r0, r8, fp, lsl #6
    3548:	00160400 	andseq	r0, r6, r0, lsl #8
    354c:	0b3a0e03 	bleq	e86d60 <_Min_Stack_Size+0xe86b60>
    3550:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3554:	16050000 	strne	r0, [r5], -r0
    3558:	3a0e0300 	bcc	384160 <_Min_Stack_Size+0x383f60>
    355c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3560:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3564:	0b0b0117 	bleq	2c39c8 <_Min_Stack_Size+0x2c37c8>
    3568:	0b3b0b3a 	bleq	ec6258 <_Min_Stack_Size+0xec6058>
    356c:	00001301 	andeq	r1, r0, r1, lsl #6
    3570:	03000d07 	movweq	r0, #3335	; 0xd07
    3574:	3b0b3a0e 	blcc	2d1db4 <_Min_Stack_Size+0x2d1bb4>
    3578:	0013490b 	andseq	r4, r3, fp, lsl #18
    357c:	01010800 	tsteq	r1, r0, lsl #16
    3580:	13011349 	movwne	r1, #4937	; 0x1349
    3584:	21090000 	mrscs	r0, (UNDEF: 9)
    3588:	2f134900 	svccs	0x00134900
    358c:	0a00000b 	beq	35c0 <_Min_Stack_Size+0x33c0>
    3590:	0b0b0113 	bleq	2c39e4 <_Min_Stack_Size+0x2c37e4>
    3594:	0b3b0b3a 	bleq	ec6284 <_Min_Stack_Size+0xec6084>
    3598:	00001301 	andeq	r1, r0, r1, lsl #6
    359c:	03000d0b 	movweq	r0, #3339	; 0xd0b
    35a0:	3b0b3a0e 	blcc	2d1de0 <_Min_Stack_Size+0x2d1be0>
    35a4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    35a8:	0c00000b 	stceq	0, cr0, [r0], {11}
    35ac:	0b0b000f 	bleq	2c35f0 <_Min_Stack_Size+0x2c33f0>
    35b0:	130d0000 	movwne	r0, #53248	; 0xd000
    35b4:	0b0e0301 	bleq	3841c0 <_Min_Stack_Size+0x383fc0>
    35b8:	3b0b3a0b 	blcc	2d1dec <_Min_Stack_Size+0x2d1bec>
    35bc:	0013010b 	andseq	r0, r3, fp, lsl #2
    35c0:	000d0e00 	andeq	r0, sp, r0, lsl #28
    35c4:	0b3a0803 	bleq	e855d8 <_Min_Stack_Size+0xe853d8>
    35c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    35cc:	00000b38 	andeq	r0, r0, r8, lsr fp
    35d0:	0b000f0f 	bleq	7214 <_Min_Stack_Size+0x7014>
    35d4:	0013490b 	andseq	r4, r3, fp, lsl #18
    35d8:	01131000 	tsteq	r3, r0
    35dc:	0b0b0e03 	bleq	2c6df0 <_Min_Stack_Size+0x2c6bf0>
    35e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    35e4:	00001301 	andeq	r1, r0, r1, lsl #6
    35e8:	03000d11 	movweq	r0, #3345	; 0xd11
    35ec:	3b0b3a0e 	blcc	2d1e2c <_Min_Stack_Size+0x2d1c2c>
    35f0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    35f4:	1200000b 	andne	r0, r0, #11
    35f8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    35fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3600:	0b381349 	bleq	e0832c <_Min_Stack_Size+0xe0812c>
    3604:	15130000 	ldrne	r0, [r3, #-0]
    3608:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    360c:	00130113 	andseq	r0, r3, r3, lsl r1
    3610:	00051400 	andeq	r1, r5, r0, lsl #8
    3614:	00001349 	andeq	r1, r0, r9, asr #6
    3618:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    361c:	16000013 			; <UNDEFINED> instruction: 0x16000013
    3620:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    3624:	00001301 	andeq	r1, r0, r1, lsl #6
    3628:	3f012e17 	svccc	0x00012e17
    362c:	3a0e0319 	bcc	384298 <_Min_Stack_Size+0x384098>
    3630:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3634:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3638:	97184006 	ldrls	r4, [r8, -r6]
    363c:	13011942 	movwne	r1, #6466	; 0x1942
    3640:	05180000 	ldreq	r0, [r8, #-0]
    3644:	3a080300 	bcc	20424c <_Min_Stack_Size+0x20404c>
    3648:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    364c:	00170213 	andseq	r0, r7, r3, lsl r2
    3650:	00051900 	andeq	r1, r5, r0, lsl #18
    3654:	0b3a0e03 	bleq	e86e68 <_Min_Stack_Size+0xe86c68>
    3658:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    365c:	00001702 	andeq	r1, r0, r2, lsl #14
    3660:	0182891a 	orreq	r8, r2, sl, lsl r9
    3664:	31011101 	tstcc	r1, r1, lsl #2
    3668:	00130113 	andseq	r0, r3, r3, lsl r1
    366c:	828a1b00 	addhi	r1, sl, #0, 22
    3670:	18020001 	stmdane	r2, {r0}
    3674:	00184291 	mulseq	r8, r1, r2
    3678:	82891c00 	addhi	r1, r9, #0, 24
    367c:	01110101 	tsteq	r1, r1, lsl #2
    3680:	31194295 			; <UNDEFINED> instruction: 0x31194295
    3684:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    3688:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    368c:	0b3a0e03 	bleq	e86ea0 <_Min_Stack_Size+0xe86ca0>
    3690:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3694:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3698:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    369c:	00130119 	andseq	r0, r3, r9, lsl r1
    36a0:	010b1e00 	tsteq	fp, r0, lsl #28
    36a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    36a8:	00001301 	andeq	r1, r0, r1, lsl #6
    36ac:	0300341f 	movweq	r3, #1055	; 0x41f
    36b0:	3b0b3a08 	blcc	2d1ed8 <_Min_Stack_Size+0x2d1cd8>
    36b4:	0013490b 	andseq	r4, r3, fp, lsl #18
    36b8:	00342000 	eorseq	r2, r4, r0
    36bc:	0b3a0e03 	bleq	e86ed0 <_Min_Stack_Size+0xe86cd0>
    36c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    36c4:	00001702 	andeq	r1, r0, r2, lsl #14
    36c8:	01828921 	orreq	r8, r2, r1, lsr #18
    36cc:	31011101 	tstcc	r1, r1, lsl #2
    36d0:	22000013 	andcs	r0, r0, #19
    36d4:	01018289 	smlabbeq	r1, r9, r2, r8
    36d8:	13010111 	movwne	r0, #4369	; 0x1111
    36dc:	34230000 	strtcc	r0, [r3], #-0
    36e0:	3a0e0300 	bcc	3842e8 <_Min_Stack_Size+0x3840e8>
    36e4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    36e8:	3c193f13 	ldccc	15, cr3, [r9], {19}
    36ec:	24000019 	strcs	r0, [r0], #-25	; 0xffffffe7
    36f0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    36f4:	0b3b0b3a 	bleq	ec63e4 <_Min_Stack_Size+0xec61e4>
    36f8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    36fc:	00001802 	andeq	r1, r0, r2, lsl #16
    3700:	3f012e25 	svccc	0x00012e25
    3704:	3a0e0319 	bcc	384370 <_Min_Stack_Size+0x384170>
    3708:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    370c:	00193c19 	andseq	r3, r9, r9, lsl ip
    3710:	11010000 	mrsne	r0, (UNDEF: 1)
    3714:	130e2501 	movwne	r2, #58625	; 0xe501
    3718:	1b0e030b 	blne	38434c <_Min_Stack_Size+0x38414c>
    371c:	1117550e 	tstne	r7, lr, lsl #10
    3720:	00171001 	andseq	r1, r7, r1
    3724:	00240200 	eoreq	r0, r4, r0, lsl #4
    3728:	0b3e0b0b 	bleq	f8635c <_Min_Stack_Size+0xf8615c>
    372c:	00000e03 	andeq	r0, r0, r3, lsl #28
    3730:	0b002403 	bleq	c744 <_Min_Stack_Size+0xc544>
    3734:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3738:	04000008 	streq	r0, [r0], #-8
    373c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3740:	0b3b0b3a 	bleq	ec6430 <_Min_Stack_Size+0xec6230>
    3744:	00001349 	andeq	r1, r0, r9, asr #6
    3748:	0b000f05 	bleq	7364 <_Min_Stack_Size+0x7164>
    374c:	0600000b 	streq	r0, [r0], -fp
    3750:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3754:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3758:	00001349 	andeq	r1, r0, r9, asr #6
    375c:	0b011707 	bleq	49380 <_Min_Stack_Size+0x49180>
    3760:	3b0b3a0b 	blcc	2d1f94 <_Min_Stack_Size+0x2d1d94>
    3764:	0013010b 	andseq	r0, r3, fp, lsl #2
    3768:	000d0800 	andeq	r0, sp, r0, lsl #16
    376c:	0b3a0e03 	bleq	e86f80 <_Min_Stack_Size+0xe86d80>
    3770:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3774:	01090000 	mrseq	r0, (UNDEF: 9)
    3778:	01134901 	tsteq	r3, r1, lsl #18
    377c:	0a000013 	beq	37d0 <_Min_Stack_Size+0x35d0>
    3780:	13490021 	movtne	r0, #36897	; 0x9021
    3784:	00000b2f 	andeq	r0, r0, pc, lsr #22
    3788:	0b01130b 	bleq	483bc <_Min_Stack_Size+0x481bc>
    378c:	3b0b3a0b 	blcc	2d1fc0 <_Min_Stack_Size+0x2d1dc0>
    3790:	0013010b 	andseq	r0, r3, fp, lsl #2
    3794:	000d0c00 	andeq	r0, sp, r0, lsl #24
    3798:	0b3a0e03 	bleq	e86fac <_Min_Stack_Size+0xe86dac>
    379c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    37a0:	00000b38 	andeq	r0, r0, r8, lsr fp
    37a4:	0301130d 	movweq	r1, #4877	; 0x130d
    37a8:	3a0b0b0e 	bcc	2c63e8 <_Min_Stack_Size+0x2c61e8>
    37ac:	010b3b0b 	tsteq	fp, fp, lsl #22
    37b0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    37b4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    37b8:	0b3b0b3a 	bleq	ec64a8 <_Min_Stack_Size+0xec62a8>
    37bc:	0b381349 	bleq	e084e8 <_Min_Stack_Size+0xe082e8>
    37c0:	0f0f0000 	svceq	0x000f0000
    37c4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    37c8:	10000013 	andne	r0, r0, r3, lsl r0
    37cc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    37d0:	0b3a0b0b 	bleq	e86404 <_Min_Stack_Size+0xe86204>
    37d4:	1301053b 	movwne	r0, #5435	; 0x153b
    37d8:	0d110000 	ldceq	0, cr0, [r1, #-0]
    37dc:	3a0e0300 	bcc	3843e4 <_Min_Stack_Size+0x3841e4>
    37e0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    37e4:	000b3813 	andeq	r3, fp, r3, lsl r8
    37e8:	000d1200 	andeq	r1, sp, r0, lsl #4
    37ec:	0b3a0803 	bleq	e85800 <_Min_Stack_Size+0xe85600>
    37f0:	1349053b 	movtne	r0, #38203	; 0x953b
    37f4:	00000b38 	andeq	r0, r0, r8, lsr fp
    37f8:	27011513 	smladcs	r1, r3, r5, r1
    37fc:	01134919 	tsteq	r3, r9, lsl r9
    3800:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    3804:	13490005 	movtne	r0, #36869	; 0x9005
    3808:	26150000 	ldrcs	r0, [r5], -r0
    380c:	00134900 	andseq	r4, r3, r0, lsl #18
    3810:	01151600 	tsteq	r5, r0, lsl #12
    3814:	13011927 	movwne	r1, #6439	; 0x1927
    3818:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    381c:	03193f01 	tsteq	r9, #1, 30
    3820:	3b0b3a0e 	blcc	2d2060 <_Min_Stack_Size+0x2d1e60>
    3824:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3828:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    382c:	97184006 	ldrls	r4, [r8, -r6]
    3830:	13011942 	movwne	r1, #6466	; 0x1942
    3834:	05180000 	ldreq	r0, [r8, #-0]
    3838:	3a0e0300 	bcc	384440 <_Min_Stack_Size+0x384240>
    383c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3840:	00170213 	andseq	r0, r7, r3, lsl r2
    3844:	00051900 	andeq	r1, r5, r0, lsl #18
    3848:	0b3a0803 	bleq	e8585c <_Min_Stack_Size+0xe8565c>
    384c:	1349053b 	movtne	r0, #38203	; 0x953b
    3850:	00001702 	andeq	r1, r0, r2, lsl #14
    3854:	0300341a 	movweq	r3, #1050	; 0x41a
    3858:	3b0b3a08 	blcc	2d2080 <_Min_Stack_Size+0x2d1e80>
    385c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3860:	1b000017 	blne	38c4 <_Min_Stack_Size+0x36c4>
    3864:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3868:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    386c:	17021349 	strne	r1, [r2, -r9, asr #6]
    3870:	01000000 	mrseq	r0, (UNDEF: 0)
    3874:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    3878:	0e030b13 	vmoveq.32	d3[0], r0
    387c:	17550e1b 	smmlane	r5, fp, lr, r0
    3880:	17100111 			; <UNDEFINED> instruction: 0x17100111
    3884:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    3888:	03193f01 	tsteq	r9, #1, 30
    388c:	3b0b3a0e 	blcc	2d20cc <_Min_Stack_Size+0x2d1ecc>
    3890:	1113490b 	tstne	r3, fp, lsl #18
    3894:	40061201 	andmi	r1, r6, r1, lsl #4
    3898:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    389c:	00001301 	andeq	r1, r0, r1, lsl #6
    38a0:	03000503 	movweq	r0, #1283	; 0x503
    38a4:	3b0b3a0e 	blcc	2d20e4 <_Min_Stack_Size+0x2d1ee4>
    38a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    38ac:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    38b0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    38b4:	0b3b0b3a 	bleq	ec65a4 <_Min_Stack_Size+0xec63a4>
    38b8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    38bc:	0000193c 	andeq	r1, r0, ip, lsr r9
    38c0:	03003405 	movweq	r3, #1029	; 0x405
    38c4:	3b0b3a0e 	blcc	2d2104 <_Min_Stack_Size+0x2d1f04>
    38c8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    38cc:	06000018 			; <UNDEFINED> instruction: 0x06000018
    38d0:	0b0b000f 	bleq	2c3914 <_Min_Stack_Size+0x2c3714>
    38d4:	24070000 	strcs	r0, [r7], #-0
    38d8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    38dc:	0008030b 	andeq	r0, r8, fp, lsl #6
    38e0:	00240800 	eoreq	r0, r4, r0, lsl #16
    38e4:	0b3e0b0b 	bleq	f86518 <_Min_Stack_Size+0xf86318>
    38e8:	00000e03 	andeq	r0, r0, r3, lsl #28
    38ec:	0b000f09 	bleq	7518 <_Min_Stack_Size+0x7318>
    38f0:	0013490b 	andseq	r4, r3, fp, lsl #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000034 	andeq	r0, r0, r4, lsr r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	0800010c 	stmdaeq	r0, {r2, r3, r8}
  14:	00000068 	andeq	r0, r0, r8, rrx
  18:	00000000 	andeq	r0, r0, r0
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
  {
    bitstatus = SET;
  1c:	000000dc 	ldrdeq	r0, [r0], -ip
  }
  else
  {
    bitstatus = RESET;
  20:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  }
  /* Return the flag status */
  return bitstatus;
  24:	0000000a 	andeq	r0, r0, sl
}
  28:	08000180 	stmdaeq	r0, {r7, r8}
  2c:	00000100 	andeq	r0, r0, r0, lsl #2
	...
  38:	00000054 	andeq	r0, r0, r4, asr r0
  3c:	04340002 	ldrteq	r0, [r4], #-2
  40:	00040000 	andeq	r0, r4, r0
  44:	00000000 	andeq	r0, r0, r0
  48:	08000280 	stmdaeq	r0, {r7, r9}
  4c:	00000078 	andeq	r0, r0, r8, ror r0
  50:	080002f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9}
  54:	00000060 	andeq	r0, r0, r0, rrx
  58:	08000358 	stmdaeq	r0, {r3, r4, r6, r8, r9}
  5c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  60:	00000000 	andeq	r0, r0, r0
  64:	0000009c 	muleq	r0, ip, r0
  68:	08000408 	stmdaeq	r0, {r3, sl}
  6c:	00000084 	andeq	r0, r0, r4, lsl #1
  70:	0800048c 	stmdaeq	r0, {r2, r3, r7, sl}
  74:	000001a8 	andeq	r0, r0, r8, lsr #3
  78:	08000634 	stmdaeq	r0, {r2, r4, r5, r9, sl}
  7c:	00000082 	andeq	r0, r0, r2, lsl #1
  80:	00000000 	andeq	r0, r0, r0
  84:	000000c8 	andeq	r0, r0, r8, asr #1
	...
  90:	00000074 	andeq	r0, r0, r4, ror r0
  94:	09780002 	ldmdbeq	r8!, {r1}^
  98:	00040000 	andeq	r0, r4, r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	080006b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl}
  a4:	000001f8 	strdeq	r0, [r0], -r8
  a8:	080008b0 	stmdaeq	r0, {r4, r5, r7, fp}
  ac:	000000b8 	strheq	r0, [r0], -r8
  b0:	00000000 	andeq	r0, r0, r0
  b4:	000000c4 	andeq	r0, r0, r4, asr #1
  b8:	08000968 	stmdaeq	r0, {r3, r5, r6, r8, fp}
  bc:	00000164 	andeq	r0, r0, r4, ror #2
  c0:	00000000 	andeq	r0, r0, r0
  c4:	000000ec 	andeq	r0, r0, ip, ror #1
  c8:	08000acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp}
  cc:	000001f4 	strdeq	r0, [r0], -r4
  d0:	08000cc0 	stmdaeq	r0, {r6, r7, sl, fp}
  d4:	0000016c 	andeq	r0, r0, ip, ror #2
  d8:	08000e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp}
  dc:	00000210 	andeq	r0, r0, r0, lsl r2
  e0:	0800103c 	stmdaeq	r0, {r2, r3, r4, r5, ip}
  e4:	00000304 	andeq	r0, r0, r4, lsl #6
  e8:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
  ec:	000001a8 	andeq	r0, r0, r8, lsr #3
  f0:	00000000 	andeq	r0, r0, r0
  f4:	000001fc 	strdeq	r0, [r0], -ip
  f8:	00000000 	andeq	r0, r0, r0
  fc:	00000218 	andeq	r0, r0, r8, lsl r2
	...
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }
  
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 108:	0000011c 	andeq	r0, r0, ip, lsl r1
  {
    /* Set the default values */
    i2sdiv = 2;
 10c:	0f880002 	svceq	0x00880002
    i2sodd = 0;
 110:	00040000 	andeq	r0, r4, r0
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 114:	00000000 	andeq	r0, r0, r0
 118:	080014e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip}
 11c:	0000000c 	andeq	r0, r0, ip
 120:	080014f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, ip}
 124:	0000000c 	andeq	r0, r0, ip
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 128:	08001500 	stmdaeq	r0, {r8, sl, ip}
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 12c:	0000000c 	andeq	r0, r0, ip
 130:	0800150c 	stmdaeq	r0, {r2, r3, r8, sl, ip}
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 134:	0000000c 	andeq	r0, r0, ip
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 138:	08001518 	stmdaeq	r0, {r3, r4, r8, sl, ip}
 13c:	0000001a 	andeq	r0, r0, sl, lsl r0

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 140:	08001534 	stmdaeq	r0, {r2, r4, r5, r8, sl, ip}
 144:	0000001c 	andeq	r0, r0, ip, lsl r0
 148:	08001550 	stmdaeq	r0, {r4, r6, r8, sl, ip}
 14c:	00000010 	andeq	r0, r0, r0, lsl r0
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;   
 150:	08001560 	stmdaeq	r0, {r5, r6, r8, sl, ip}
 154:	00000014 	andeq	r0, r0, r4, lsl r0
}
 158:	00000000 	andeq	r0, r0, r0
 15c:	00000048 	andeq	r0, r0, r8, asr #32
 160:	08001574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, ip}
         break;
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
         *(uint16_t*) arg = getSn_KPALVTR(sn);
         break;
 164:	00000048 	andeq	r0, r0, r8, asr #32
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 168:	00000000 	andeq	r0, r0, r0
 16c:	00000054 	andeq	r0, r0, r4, asr r0
 170:	080015bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, ip}
 174:	00000054 	andeq	r0, r0, r4, asr r0
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 178:	08001610 	stmdaeq	r0, {r4, r9, sl, ip}
 17c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 180:	080017c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip}
 184:	0000007c 	andeq	r0, r0, ip, ror r0
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 188:	08001844 	stmdaeq	r0, {r2, r6, fp, ip}
 18c:	00000096 	muleq	r0, r6, r0
 190:	080018dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, ip}
 194:	00000112 	andeq	r0, r0, r2, lsl r1
 198:	080019f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, ip}
 19c:	0000003a 	andeq	r0, r0, sl, lsr r0
         break;
 1a0:	08001a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, ip}
      case SO_REMAINSIZE:
         if(getSn_MR(sn) == Sn_MR_TCP)
 1a4:	0000004a 	andeq	r0, r0, sl, asr #32
 1a8:	08001a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp, ip}
 1ac:	00000034 	andeq	r0, r0, r4, lsr r0
 1b0:	08001aac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp, ip}
 1b4:	00000046 	andeq	r0, r0, r6, asr #32
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 1b8:	08001af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip}
 1bc:	0000002e 	andeq	r0, r0, lr, lsr #32
 1c0:	08001b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, ip}
 1c4:	00000032 	andeq	r0, r0, r2, lsr r0
         else
            *(uint16_t*)arg = sock_remained_size[sn];
 1c8:	08001b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, ip}
 1cc:	0000004c 	andeq	r0, r0, ip, asr #32
 1d0:	08001ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp, ip}
         break;
 1d4:	00000082 	andeq	r0, r0, r2, lsl #1
      case SO_PACKINFO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 1d8:	08001c28 	stmdaeq	r0, {r3, r5, sl, fp, ip}
 1dc:	00000096 	muleq	r0, r6, r0
 1e0:	00000000 	andeq	r0, r0, r0
 1e4:	00000046 	andeq	r0, r0, r6, asr #32
 1e8:	08001cc0 	stmdaeq	r0, {r6, r7, sl, fp, ip}
 1ec:	00000092 	muleq	r0, r2, r0
 1f0:	08001d54 	stmdaeq	r0, {r2, r4, r6, r8, sl, fp, ip}
         *(uint8_t*)arg = sock_pack_info[sn];
 1f4:	0000007c 	andeq	r0, r0, ip, ror r0
 1f8:	08001dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip}
         break;
 1fc:	0000007c 	andeq	r0, r0, ip, ror r0
      default:
         return SOCKERR_SOCKOPT;
 200:	08001e4c 	stmdaeq	r0, {r2, r3, r6, r9, sl, fp, ip}
   }
   return SOCK_OK;
 204:	00000044 	andeq	r0, r0, r4, asr #32
}
 208:	08001e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, ip}
 20c:	00000010 	andeq	r0, r0, r0, lsl r0
 210:	08001ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip}
 214:	00000040 	andeq	r0, r0, r0, asr #32
 218:	08001ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip}
 21c:	00000042 	andeq	r0, r0, r2, asr #32
	...
 228:	0000005c 	andeq	r0, r0, ip, asr r0
       fixed_header[1] = fixed_header[1] | 0x80;
       // second byte is number of 128s
       fixed_header[2] = remainLen / 128;
   }

	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
 22c:	1a880002 	bne	fe20023c <BootRAM+0xd1709dd>
 230:	00040000 	andeq	r0, r4, r0
 234:	00000000 	andeq	r0, r0, r0
 238:	08001f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, ip}
 23c:	00000068 	andeq	r0, r0, r8, rrx
 240:	08001f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, ip}
 244:	00000070 	andeq	r0, r0, r0, ror r0
 248:	08001ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 24c:	0000008c 	andeq	r0, r0, ip, lsl #1
	memset(packet, 0, sizeof(packet));
 250:	08002088 	stmdaeq	r0, {r3, r7, sp}
 254:	00000094 	muleq	r0, r4, r0
 258:	0800211c 	stmdaeq	r0, {r2, r3, r4, r8, sp}
	memcpy(packet, fixed_header, sizeof(fixed_header));
 25c:	00000096 	muleq	r0, r6, r0
 260:	080021b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sp}
 264:	00000096 	muleq	r0, r6, r0
 268:	0800224c 	stmdaeq	r0, {r2, r3, r6, r9, sp}
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
 26c:	000000b6 	strheq	r0, [r0], -r6
 270:	08002304 	stmdaeq	r0, {r2, r8, r9, sp}
 274:	000000b6 	strheq	r0, [r0], -r6
 278:	080023bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sp}
 27c:	0000008e 	andeq	r0, r0, lr, lsl #1
	...
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
 288:	000000ac 	andeq	r0, r0, ip, lsr #1
 28c:	1f5d0002 	svcne	0x005d0002
 290:	00040000 	andeq	r0, r4, r0
 294:	00000000 	andeq	r0, r0, r0

	// Send the packet
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
 298:	0800244c 	stmdaeq	r0, {r2, r3, r6, sl, sp}
 29c:	0000000c 	andeq	r0, r0, ip
 2a0:	08002458 	stmdaeq	r0, {r3, r4, r6, sl, sp}
 2a4:	00000024 	andeq	r0, r0, r4, lsr #32
 2a8:	0800247c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, sp}
 2ac:	00000048 	andeq	r0, r0, r8, asr #32
		return -1;
 2b0:	080024c4 	stmdaeq	r0, {r2, r6, r7, sl, sp}
	}

	return 1;
 2b4:	000004cc 	andeq	r0, r0, ip, asr #9
 2b8:	08002990 	stmdaeq	r0, {r4, r7, r8, fp, sp}
}
 2bc:	0000063c 	andeq	r0, r0, ip, lsr r6
 2c0:	08002fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, sp}
 2c4:	00000440 	andeq	r0, r0, r0, asr #8
 2c8:	0800340c 	stmdaeq	r0, {r2, r3, sl, ip, sp}
 2cc:	0000029c 	muleq	r0, ip, r2
 2d0:	080036a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip, sp}
 2d4:	00000230 	andeq	r0, r0, r0, lsr r2
 2d8:	080038d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, ip, sp}
 2dc:	00000110 	andeq	r0, r0, r0, lsl r1
 2e0:	080039e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip, sp}
 2e4:	00000080 	andeq	r0, r0, r0, lsl #1
 2e8:	08003a68 	stmdaeq	r0, {r3, r5, r6, r9, fp, ip, sp}
 2ec:	00000088 	andeq	r0, r0, r8, lsl #1
 2f0:	08003af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, ip, sp}
 2f4:	00000028 	andeq	r0, r0, r8, lsr #32
 2f8:	08003b18 	stmdaeq	r0, {r3, r4, r8, r9, fp, ip, sp}
 2fc:	0000002c 	andeq	r0, r0, ip, lsr #32
 300:	00000000 	andeq	r0, r0, r0
 304:	0000001c 	andeq	r0, r0, ip, lsl r0
 308:	08003b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip, sp}
 30c:	0000003c 	andeq	r0, r0, ip, lsr r0
 310:	08003b80 	stmdaeq	r0, {r7, r8, r9, fp, ip, sp}
 314:	0000003c 	andeq	r0, r0, ip, lsr r0
 318:	08003bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp, ip, sp}
 31c:	0000003c 	andeq	r0, r0, ip, lsr r0
 320:	08003bf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
 324:	0000003c 	andeq	r0, r0, ip, lsr r0
 328:	00000000 	andeq	r0, r0, r0
 32c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 338:	0000003c 	andeq	r0, r0, ip, lsr r0
 33c:	28850002 	stmcs	r5, {r1}
 340:	00040000 	andeq	r0, r4, r0
 344:	00000000 	andeq	r0, r0, r0
 348:	08003c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip, sp}
 34c:	00000030 	andeq	r0, r0, r0, lsr r0
 350:	08003c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, ip, sp}
 354:	0000010c 	andeq	r0, r0, ip, lsl #2
 358:	08003d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp, ip, sp}
 35c:	00000066 	andeq	r0, r0, r6, rrx
 360:	08003dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, ip, sp}
 364:	00000302 	andeq	r0, r0, r2, lsl #6
 368:	080040dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, lr}
 36c:	00000176 	andeq	r0, r0, r6, ror r1
	...
 378:	0000004c 	andeq	r0, r0, ip, asr #32
 37c:	2c010002 	stccs	0, cr0, [r1], {2}
 380:	00040000 	andeq	r0, r4, r0
 384:	00000000 	andeq	r0, r0, r0
 388:	08004254 	stmdaeq	r0, {r2, r4, r6, r9, lr}
 38c:	00000036 	andeq	r0, r0, r6, lsr r0
 390:	0800428c 	stmdaeq	r0, {r2, r3, r7, r9, lr}
 394:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 398:	08004448 	stmdaeq	r0, {r3, r6, sl, lr}
 39c:	0000010c 	andeq	r0, r0, ip, lsl #2
 3a0:	08004554 	stmdaeq	r0, {r2, r4, r6, r8, sl, lr}
 3a4:	00000074 	andeq	r0, r0, r4, ror r0
 3a8:	080045c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, lr}
 3ac:	0000005c 	andeq	r0, r0, ip, asr r0
 3b0:	08004624 	stmdaeq	r0, {r2, r5, r9, sl, lr}
 3b4:	0000004c 	andeq	r0, r0, ip, asr #32
 3b8:	00000000 	andeq	r0, r0, r0
 3bc:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 3c8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3cc:	303d0002 	eorscc	r0, sp, r2
 3d0:	00040000 	andeq	r0, r4, r0
	...
 3dc:	00000024 	andeq	r0, r0, r4, lsr #32
 3e0:	08004670 	stmdaeq	r0, {r4, r5, r6, r9, sl, lr}
 3e4:	000000c4 	andeq	r0, r0, r4, asr #1
 3e8:	00000000 	andeq	r0, r0, r0
 3ec:	0000002c 	andeq	r0, r0, ip, lsr #32
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	00000040 	andeq	r0, r0, r0, asr #32
 3f8:	00000000 	andeq	r0, r0, r0
 3fc:	00000038 	andeq	r0, r0, r8, lsr r0
	...
 408:	00000114 	andeq	r0, r0, r4, lsl r1
 40c:	35260002 	strcc	r0, [r6, #-2]!
 410:	00040000 	andeq	r0, r4, r0
	...
 41c:	0000005c 	andeq	r0, r0, ip, asr r0
 420:	00000000 	andeq	r0, r0, r0
 424:	0000005c 	andeq	r0, r0, ip, asr r0
 428:	00000000 	andeq	r0, r0, r0
 42c:	00000050 	andeq	r0, r0, r0, asr r0
 430:	00000000 	andeq	r0, r0, r0
 434:	0000003c 	andeq	r0, r0, ip, lsr r0
 438:	00000000 	andeq	r0, r0, r0
 43c:	00000020 	andeq	r0, r0, r0, lsr #32
 440:	00000000 	andeq	r0, r0, r0
 444:	0000003c 	andeq	r0, r0, ip, lsr r0
 448:	00000000 	andeq	r0, r0, r0
 44c:	00000020 	andeq	r0, r0, r0, lsr #32
 450:	00000000 	andeq	r0, r0, r0
 454:	00000038 	andeq	r0, r0, r8, lsr r0
 458:	00000000 	andeq	r0, r0, r0
 45c:	00000020 	andeq	r0, r0, r0, lsr #32
 460:	00000000 	andeq	r0, r0, r0
 464:	00000038 	andeq	r0, r0, r8, lsr r0
 468:	00000000 	andeq	r0, r0, r0
 46c:	00000038 	andeq	r0, r0, r8, lsr r0
 470:	00000000 	andeq	r0, r0, r0
 474:	00000038 	andeq	r0, r0, r8, lsr r0
 478:	00000000 	andeq	r0, r0, r0
 47c:	0000004c 	andeq	r0, r0, ip, asr #32
 480:	00000000 	andeq	r0, r0, r0
 484:	0000001c 	andeq	r0, r0, ip, lsl r0
 488:	00000000 	andeq	r0, r0, r0
 48c:	00000038 	andeq	r0, r0, r8, lsr r0
 490:	00000000 	andeq	r0, r0, r0
 494:	00000040 	andeq	r0, r0, r0, asr #32
 498:	08004734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, lr}
 49c:	00000020 	andeq	r0, r0, r0, lsr #32
 4a0:	00000000 	andeq	r0, r0, r0
 4a4:	00000024 	andeq	r0, r0, r4, lsr #32
 4a8:	00000000 	andeq	r0, r0, r0
 4ac:	00000020 	andeq	r0, r0, r0, lsr #32
 4b0:	08004754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, lr}
 4b4:	00000164 	andeq	r0, r0, r4, ror #2
 4b8:	00000000 	andeq	r0, r0, r0
 4bc:	0000003c 	andeq	r0, r0, ip, lsr r0
 4c0:	080048b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, lr}
 4c4:	0000003c 	andeq	r0, r0, ip, lsr r0
 4c8:	080048f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, lr}
 4cc:	0000003c 	andeq	r0, r0, ip, lsr r0
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	0000003c 	andeq	r0, r0, ip, lsr r0
 4d8:	08004930 	stmdaeq	r0, {r4, r5, r8, fp, lr}
 4dc:	0000003c 	andeq	r0, r0, ip, lsr r0
 4e0:	00000000 	andeq	r0, r0, r0
 4e4:	00000020 	andeq	r0, r0, r0, lsr #32
 4e8:	00000000 	andeq	r0, r0, r0
 4ec:	00000020 	andeq	r0, r0, r0, lsr #32
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	00000020 	andeq	r0, r0, r0, lsr #32
 4f8:	0800496c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp, lr}
 4fc:	00000074 	andeq	r0, r0, r4, ror r0
 500:	00000000 	andeq	r0, r0, r0
 504:	0000001c 	andeq	r0, r0, ip, lsl r0
 508:	00000000 	andeq	r0, r0, r0
 50c:	00000038 	andeq	r0, r0, r8, lsr r0
 510:	00000000 	andeq	r0, r0, r0
 514:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 520:	000000a4 	andeq	r0, r0, r4, lsr #1
 524:	3d9d0002 	ldccc	0, cr0, [sp, #8]
 528:	00040000 	andeq	r0, r4, r0
	...
 534:	000000e4 	andeq	r0, r0, r4, ror #1
 538:	00000000 	andeq	r0, r0, r0
 53c:	00000016 	andeq	r0, r0, r6, lsl r0
 540:	080049e0 	stmdaeq	r0, {r5, r6, r7, r8, fp, lr}
 544:	00000180 	andeq	r0, r0, r0, lsl #3
 548:	00000000 	andeq	r0, r0, r0
 54c:	00000026 	andeq	r0, r0, r6, lsr #32
 550:	00000000 	andeq	r0, r0, r0
 554:	00000034 	andeq	r0, r0, r4, lsr r0
 558:	00000000 	andeq	r0, r0, r0
 55c:	0000001a 	andeq	r0, r0, sl, lsl r0
 560:	00000000 	andeq	r0, r0, r0
 564:	00000034 	andeq	r0, r0, r4, lsr r0
 568:	00000000 	andeq	r0, r0, r0
 56c:	0000001a 	andeq	r0, r0, sl, lsl r0
 570:	08004b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, lr}
 574:	0000001c 	andeq	r0, r0, ip, lsl r0
 578:	08004b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, lr}
 57c:	0000001c 	andeq	r0, r0, ip, lsl r0
 580:	00000000 	andeq	r0, r0, r0
 584:	0000002e 	andeq	r0, r0, lr, lsr #32
 588:	00000000 	andeq	r0, r0, r0
 58c:	0000001c 	andeq	r0, r0, ip, lsl r0
 590:	00000000 	andeq	r0, r0, r0
 594:	00000042 	andeq	r0, r0, r2, asr #32
 598:	00000000 	andeq	r0, r0, r0
 59c:	0000004c 	andeq	r0, r0, ip, asr #32
 5a0:	00000000 	andeq	r0, r0, r0
 5a4:	00000020 	andeq	r0, r0, r0, lsr #32
 5a8:	00000000 	andeq	r0, r0, r0
 5ac:	000000e0 	andeq	r0, r0, r0, ror #1
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	00000084 	andeq	r0, r0, r4, lsl #1
 5b8:	00000000 	andeq	r0, r0, r0
 5bc:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 5c8:	000000cc 	andeq	r0, r0, ip, asr #1
 5cc:	446e0002 	strbtmi	r0, [lr], #-2
 5d0:	00040000 	andeq	r0, r4, r0
	...
 5dc:	00000074 	andeq	r0, r0, r4, ror r0
 5e0:	08004b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp, lr}
 5e4:	00000086 	andeq	r0, r0, r6, lsl #1
 5e8:	00000000 	andeq	r0, r0, r0
 5ec:	00000164 	andeq	r0, r0, r4, ror #2
 5f0:	00000000 	andeq	r0, r0, r0
 5f4:	00000048 	andeq	r0, r0, r8, asr #32
 5f8:	00000000 	andeq	r0, r0, r0
 5fc:	00000036 	andeq	r0, r0, r6, lsr r0
 600:	08004c20 	stmdaeq	r0, {r5, sl, fp, lr}
 604:	0000003e 	andeq	r0, r0, lr, lsr r0
 608:	00000000 	andeq	r0, r0, r0
 60c:	0000003e 	andeq	r0, r0, lr, lsr r0
 610:	00000000 	andeq	r0, r0, r0
 614:	00000060 	andeq	r0, r0, r0, rrx
 618:	00000000 	andeq	r0, r0, r0
 61c:	00000046 	andeq	r0, r0, r6, asr #32
 620:	08004c60 	stmdaeq	r0, {r5, r6, sl, fp, lr}
 624:	0000001c 	andeq	r0, r0, ip, lsl r0
 628:	08004c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, lr}
 62c:	0000001a 	andeq	r0, r0, sl, lsl r0
 630:	00000000 	andeq	r0, r0, r0
 634:	00000042 	andeq	r0, r0, r2, asr #32
 638:	00000000 	andeq	r0, r0, r0
 63c:	0000003e 	andeq	r0, r0, lr, lsr r0
 640:	00000000 	andeq	r0, r0, r0
 644:	00000036 	andeq	r0, r0, r6, lsr r0
 648:	00000000 	andeq	r0, r0, r0
 64c:	00000022 	andeq	r0, r0, r2, lsr #32
 650:	00000000 	andeq	r0, r0, r0
 654:	0000003e 	andeq	r0, r0, lr, lsr r0
 658:	00000000 	andeq	r0, r0, r0
 65c:	00000032 	andeq	r0, r0, r2, lsr r0
 660:	00000000 	andeq	r0, r0, r0
 664:	0000001a 	andeq	r0, r0, sl, lsl r0
 668:	00000000 	andeq	r0, r0, r0
 66c:	00000040 	andeq	r0, r0, r0, asr #32
 670:	08004c98 	stmdaeq	r0, {r3, r4, r7, sl, fp, lr}
 674:	00000038 	andeq	r0, r0, r8, lsr r0
 678:	00000000 	andeq	r0, r0, r0
 67c:	00000020 	andeq	r0, r0, r0, lsr #32
 680:	00000000 	andeq	r0, r0, r0
 684:	00000076 	andeq	r0, r0, r6, ror r0
 688:	00000000 	andeq	r0, r0, r0
 68c:	00000032 	andeq	r0, r0, r2, lsr r0
	...
 698:	000002ec 	andeq	r0, r0, ip, ror #5
 69c:	4d4b0002 	stclmi	0, cr0, [fp, #-8]
 6a0:	00040000 	andeq	r0, r4, r0
	...
 6ac:	0000022c 	andeq	r0, r0, ip, lsr #4
 6b0:	08004cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, lr}
 6b4:	000000f8 	strdeq	r0, [r0], -r8
 6b8:	00000000 	andeq	r0, r0, r0
 6bc:	00000118 	andeq	r0, r0, r8, lsl r1
 6c0:	00000000 	andeq	r0, r0, r0
 6c4:	00000110 	andeq	r0, r0, r0, lsl r1
 6c8:	00000000 	andeq	r0, r0, r0
 6cc:	0000010c 	andeq	r0, r0, ip, lsl #2
 6d0:	00000000 	andeq	r0, r0, r0
 6d4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 6d8:	00000000 	andeq	r0, r0, r0
 6dc:	000000a6 	andeq	r0, r0, r6, lsr #1
 6e0:	00000000 	andeq	r0, r0, r0
 6e4:	000000b6 	strheq	r0, [r0], -r6
 6e8:	00000000 	andeq	r0, r0, r0
 6ec:	0000004e 	andeq	r0, r0, lr, asr #32
 6f0:	00000000 	andeq	r0, r0, r0
 6f4:	00000032 	andeq	r0, r0, r2, lsr r0
 6f8:	00000000 	andeq	r0, r0, r0
 6fc:	00000042 	andeq	r0, r0, r2, asr #32
 700:	00000000 	andeq	r0, r0, r0
 704:	00000030 	andeq	r0, r0, r0, lsr r0
 708:	00000000 	andeq	r0, r0, r0
 70c:	0000003c 	andeq	r0, r0, ip, lsr r0
 710:	08004dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, lr}
 714:	0000003e 	andeq	r0, r0, lr, lsr r0
 718:	00000000 	andeq	r0, r0, r0
 71c:	0000004a 	andeq	r0, r0, sl, asr #32
 720:	08004e08 	stmdaeq	r0, {r3, r9, sl, fp, lr}
 724:	00000046 	andeq	r0, r0, r6, asr #32
 728:	00000000 	andeq	r0, r0, r0
 72c:	0000001c 	andeq	r0, r0, ip, lsl r0
 730:	00000000 	andeq	r0, r0, r0
 734:	00000028 	andeq	r0, r0, r8, lsr #32
 738:	00000000 	andeq	r0, r0, r0
 73c:	00000046 	andeq	r0, r0, r6, asr #32
 740:	00000000 	andeq	r0, r0, r0
 744:	00000022 	andeq	r0, r0, r2, lsr #32
 748:	00000000 	andeq	r0, r0, r0
 74c:	0000002c 	andeq	r0, r0, ip, lsr #32
 750:	00000000 	andeq	r0, r0, r0
 754:	0000005e 	andeq	r0, r0, lr, asr r0
 758:	00000000 	andeq	r0, r0, r0
 75c:	0000005c 	andeq	r0, r0, ip, asr r0
 760:	00000000 	andeq	r0, r0, r0
 764:	0000003c 	andeq	r0, r0, ip, lsr r0
 768:	00000000 	andeq	r0, r0, r0
 76c:	00000052 	andeq	r0, r0, r2, asr r0
 770:	00000000 	andeq	r0, r0, r0
 774:	00000026 	andeq	r0, r0, r6, lsr #32
 778:	00000000 	andeq	r0, r0, r0
 77c:	00000036 	andeq	r0, r0, r6, lsr r0
 780:	00000000 	andeq	r0, r0, r0
 784:	00000036 	andeq	r0, r0, r6, lsr r0
 788:	00000000 	andeq	r0, r0, r0
 78c:	00000096 	muleq	r0, r6, r0
 790:	00000000 	andeq	r0, r0, r0
 794:	00000036 	andeq	r0, r0, r6, lsr r0
 798:	00000000 	andeq	r0, r0, r0
 79c:	0000003a 	andeq	r0, r0, sl, lsr r0
 7a0:	00000000 	andeq	r0, r0, r0
 7a4:	00000036 	andeq	r0, r0, r6, lsr r0
 7a8:	00000000 	andeq	r0, r0, r0
 7ac:	0000003a 	andeq	r0, r0, sl, lsr r0
 7b0:	00000000 	andeq	r0, r0, r0
 7b4:	0000003e 	andeq	r0, r0, lr, lsr r0
 7b8:	00000000 	andeq	r0, r0, r0
 7bc:	0000003e 	andeq	r0, r0, lr, lsr r0
 7c0:	00000000 	andeq	r0, r0, r0
 7c4:	0000003e 	andeq	r0, r0, lr, lsr r0
 7c8:	00000000 	andeq	r0, r0, r0
 7cc:	0000003e 	andeq	r0, r0, lr, lsr r0
 7d0:	00000000 	andeq	r0, r0, r0
 7d4:	00000036 	andeq	r0, r0, r6, lsr r0
 7d8:	00000000 	andeq	r0, r0, r0
 7dc:	0000003a 	andeq	r0, r0, sl, lsr r0
 7e0:	00000000 	andeq	r0, r0, r0
 7e4:	00000036 	andeq	r0, r0, r6, lsr r0
 7e8:	00000000 	andeq	r0, r0, r0
 7ec:	0000003a 	andeq	r0, r0, sl, lsr r0
 7f0:	00000000 	andeq	r0, r0, r0
 7f4:	00000036 	andeq	r0, r0, r6, lsr r0
 7f8:	00000000 	andeq	r0, r0, r0
 7fc:	0000003a 	andeq	r0, r0, sl, lsr r0
 800:	00000000 	andeq	r0, r0, r0
 804:	00000036 	andeq	r0, r0, r6, lsr r0
 808:	00000000 	andeq	r0, r0, r0
 80c:	0000003a 	andeq	r0, r0, sl, lsr r0
 810:	00000000 	andeq	r0, r0, r0
 814:	00000036 	andeq	r0, r0, r6, lsr r0
 818:	00000000 	andeq	r0, r0, r0
 81c:	0000003a 	andeq	r0, r0, sl, lsr r0
 820:	00000000 	andeq	r0, r0, r0
 824:	00000036 	andeq	r0, r0, r6, lsr r0
 828:	00000000 	andeq	r0, r0, r0
 82c:	0000003a 	andeq	r0, r0, sl, lsr r0
 830:	00000000 	andeq	r0, r0, r0
 834:	00000036 	andeq	r0, r0, r6, lsr r0
 838:	00000000 	andeq	r0, r0, r0
 83c:	00000036 	andeq	r0, r0, r6, lsr r0
 840:	00000000 	andeq	r0, r0, r0
 844:	0000003a 	andeq	r0, r0, sl, lsr r0
 848:	00000000 	andeq	r0, r0, r0
 84c:	0000003a 	andeq	r0, r0, sl, lsr r0
 850:	00000000 	andeq	r0, r0, r0
 854:	0000003a 	andeq	r0, r0, sl, lsr r0
 858:	00000000 	andeq	r0, r0, r0
 85c:	0000003a 	andeq	r0, r0, sl, lsr r0
 860:	00000000 	andeq	r0, r0, r0
 864:	0000003a 	andeq	r0, r0, sl, lsr r0
 868:	00000000 	andeq	r0, r0, r0
 86c:	00000054 	andeq	r0, r0, r4, asr r0
 870:	00000000 	andeq	r0, r0, r0
 874:	00000054 	andeq	r0, r0, r4, asr r0
 878:	00000000 	andeq	r0, r0, r0
 87c:	000000ac 	andeq	r0, r0, ip, lsr #1
 880:	00000000 	andeq	r0, r0, r0
 884:	0000003e 	andeq	r0, r0, lr, lsr r0
 888:	00000000 	andeq	r0, r0, r0
 88c:	0000003e 	andeq	r0, r0, lr, lsr r0
 890:	00000000 	andeq	r0, r0, r0
 894:	0000003e 	andeq	r0, r0, lr, lsr r0
 898:	00000000 	andeq	r0, r0, r0
 89c:	00000036 	andeq	r0, r0, r6, lsr r0
 8a0:	00000000 	andeq	r0, r0, r0
 8a4:	00000036 	andeq	r0, r0, r6, lsr r0
 8a8:	00000000 	andeq	r0, r0, r0
 8ac:	00000036 	andeq	r0, r0, r6, lsr r0
 8b0:	00000000 	andeq	r0, r0, r0
 8b4:	00000036 	andeq	r0, r0, r6, lsr r0
 8b8:	00000000 	andeq	r0, r0, r0
 8bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 8c0:	00000000 	andeq	r0, r0, r0
 8c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8c8:	00000000 	andeq	r0, r0, r0
 8cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 8d0:	00000000 	andeq	r0, r0, r0
 8d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8d8:	00000000 	andeq	r0, r0, r0
 8dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 8e0:	00000000 	andeq	r0, r0, r0
 8e4:	0000001e 	andeq	r0, r0, lr, lsl r0
 8e8:	00000000 	andeq	r0, r0, r0
 8ec:	00000036 	andeq	r0, r0, r6, lsr r0
 8f0:	00000000 	andeq	r0, r0, r0
 8f4:	0000003a 	andeq	r0, r0, sl, lsr r0
 8f8:	00000000 	andeq	r0, r0, r0
 8fc:	00000036 	andeq	r0, r0, r6, lsr r0
 900:	00000000 	andeq	r0, r0, r0
 904:	0000003a 	andeq	r0, r0, sl, lsr r0
 908:	00000000 	andeq	r0, r0, r0
 90c:	00000036 	andeq	r0, r0, r6, lsr r0
 910:	00000000 	andeq	r0, r0, r0
 914:	0000001a 	andeq	r0, r0, sl, lsl r0
 918:	00000000 	andeq	r0, r0, r0
 91c:	0000001a 	andeq	r0, r0, sl, lsl r0
 920:	00000000 	andeq	r0, r0, r0
 924:	0000001a 	andeq	r0, r0, sl, lsl r0
 928:	00000000 	andeq	r0, r0, r0
 92c:	0000001c 	andeq	r0, r0, ip, lsl r0
 930:	00000000 	andeq	r0, r0, r0
 934:	0000001a 	andeq	r0, r0, sl, lsl r0
 938:	00000000 	andeq	r0, r0, r0
 93c:	0000001a 	andeq	r0, r0, sl, lsl r0
 940:	00000000 	andeq	r0, r0, r0
 944:	00000038 	andeq	r0, r0, r8, lsr r0
 948:	00000000 	andeq	r0, r0, r0
 94c:	00000020 	andeq	r0, r0, r0, lsr #32
 950:	08004e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, lr}
 954:	00000054 	andeq	r0, r0, r4, asr r0
 958:	08004ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, lr}
 95c:	00000020 	andeq	r0, r0, r0, lsr #32
 960:	00000000 	andeq	r0, r0, r0
 964:	000000e0 	andeq	r0, r0, r0, ror #1
 968:	00000000 	andeq	r0, r0, r0
 96c:	000000f4 	strdeq	r0, [r0], -r4
 970:	00000000 	andeq	r0, r0, r0
 974:	000000ec 	andeq	r0, r0, ip, ror #1
 978:	00000000 	andeq	r0, r0, r0
 97c:	000000f8 	strdeq	r0, [r0], -r8
	...
 988:	0000011c 	andeq	r0, r0, ip, lsl r1
 98c:	698d0002 	stmibvs	sp, {r1}
 990:	00040000 	andeq	r0, r4, r0
 994:	00000000 	andeq	r0, r0, r0
 998:	08004ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, lr}
 99c:	00000044 	andeq	r0, r0, r4, asr #32
 9a0:	08004f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, lr}
 9a4:	00000184 	andeq	r0, r0, r4, lsl #3
 9a8:	00000000 	andeq	r0, r0, r0
 9ac:	0000003c 	andeq	r0, r0, ip, lsr r0
 9b0:	0800508c 	stmdaeq	r0, {r2, r3, r7, ip, lr}
 9b4:	0000003e 	andeq	r0, r0, lr, lsr r0
 9b8:	00000000 	andeq	r0, r0, r0
 9bc:	0000003e 	andeq	r0, r0, lr, lsr r0
 9c0:	00000000 	andeq	r0, r0, r0
 9c4:	0000003e 	andeq	r0, r0, lr, lsr r0
 9c8:	080050cc 	stmdaeq	r0, {r2, r3, r6, r7, ip, lr}
 9cc:	0000003e 	andeq	r0, r0, lr, lsr r0
 9d0:	00000000 	andeq	r0, r0, r0
 9d4:	0000003e 	andeq	r0, r0, lr, lsr r0
 9d8:	00000000 	andeq	r0, r0, r0
 9dc:	0000003e 	andeq	r0, r0, lr, lsr r0
 9e0:	00000000 	andeq	r0, r0, r0
 9e4:	00000040 	andeq	r0, r0, r0, asr #32
 9e8:	00000000 	andeq	r0, r0, r0
 9ec:	0000003e 	andeq	r0, r0, lr, lsr r0
 9f0:	00000000 	andeq	r0, r0, r0
 9f4:	0000003e 	andeq	r0, r0, lr, lsr r0
 9f8:	00000000 	andeq	r0, r0, r0
 9fc:	00000046 	andeq	r0, r0, r6, asr #32
 a00:	0800510c 	stmdaeq	r0, {r2, r3, r8, ip, lr}
 a04:	0000001e 	andeq	r0, r0, lr, lsl r0
 a08:	00000000 	andeq	r0, r0, r0
 a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a10:	0800512c 	stmdaeq	r0, {r2, r3, r5, r8, ip, lr}
 a14:	0000003a 	andeq	r0, r0, sl, lsr r0
 a18:	00000000 	andeq	r0, r0, r0
 a1c:	0000002e 	andeq	r0, r0, lr, lsr #32
 a20:	00000000 	andeq	r0, r0, r0
 a24:	00000042 	andeq	r0, r0, r2, asr #32
 a28:	00000000 	andeq	r0, r0, r0
 a2c:	00000040 	andeq	r0, r0, r0, asr #32
 a30:	00000000 	andeq	r0, r0, r0
 a34:	00000040 	andeq	r0, r0, r0, asr #32
 a38:	00000000 	andeq	r0, r0, r0
 a3c:	0000003e 	andeq	r0, r0, lr, lsr r0
 a40:	00000000 	andeq	r0, r0, r0
 a44:	00000040 	andeq	r0, r0, r0, asr #32
 a48:	00000000 	andeq	r0, r0, r0
 a4c:	0000003e 	andeq	r0, r0, lr, lsr r0
 a50:	00000000 	andeq	r0, r0, r0
 a54:	00000020 	andeq	r0, r0, r0, lsr #32
 a58:	00000000 	andeq	r0, r0, r0
 a5c:	0000003e 	andeq	r0, r0, lr, lsr r0
 a60:	08005168 	stmdaeq	r0, {r3, r5, r6, r8, ip, lr}
 a64:	0000003e 	andeq	r0, r0, lr, lsr r0
 a68:	00000000 	andeq	r0, r0, r0
 a6c:	00000040 	andeq	r0, r0, r0, asr #32
 a70:	080051a8 	stmdaeq	r0, {r3, r5, r7, r8, ip, lr}
 a74:	00000060 	andeq	r0, r0, r0, rrx
 a78:	00000000 	andeq	r0, r0, r0
 a7c:	00000044 	andeq	r0, r0, r4, asr #32
 a80:	08005208 	stmdaeq	r0, {r3, r9, ip, lr}
 a84:	00000066 	andeq	r0, r0, r6, rrx
 a88:	00000000 	andeq	r0, r0, r0
 a8c:	0000002c 	andeq	r0, r0, ip, lsr #32
 a90:	00000000 	andeq	r0, r0, r0
 a94:	0000005a 	andeq	r0, r0, sl, asr r0
 a98:	00000000 	andeq	r0, r0, r0
 a9c:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
 aa8:	00000044 	andeq	r0, r0, r4, asr #32
 aac:	74770002 	ldrbtvc	r0, [r7], #-2
 ab0:	00040000 	andeq	r0, r4, r0
 ab4:	00000000 	andeq	r0, r0, r0
 ab8:	08005270 	stmdaeq	r0, {r4, r5, r6, r9, ip, lr}
 abc:	00000020 	andeq	r0, r0, r0, lsr #32
 ac0:	08005290 	stmdaeq	r0, {r4, r7, r9, ip, lr}
 ac4:	00000020 	andeq	r0, r0, r0, lsr #32
 ac8:	080052b0 	stmdaeq	r0, {r4, r5, r7, r9, ip, lr}
 acc:	00000020 	andeq	r0, r0, r0, lsr #32
 ad0:	080052d0 	stmdaeq	r0, {r4, r6, r7, r9, ip, lr}
 ad4:	00000018 	andeq	r0, r0, r8, lsl r0
 ad8:	080052e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, ip, lr}
 adc:	00000018 	andeq	r0, r0, r8, lsl r0
 ae0:	00000000 	andeq	r0, r0, r0
 ae4:	00000038 	andeq	r0, r0, r8, lsr r0
	...
 af0:	0000002c 	andeq	r0, r0, ip, lsr #32
 af4:	766b0002 	strbtvc	r0, [fp], -r2
 af8:	00040000 	andeq	r0, r4, r0
	...
 b04:	00000018 	andeq	r0, r0, r8, lsl r0
 b08:	00000000 	andeq	r0, r0, r0
 b0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b10:	08005300 	stmdaeq	r0, {r8, r9, ip, lr}
 b14:	0000003c 	andeq	r0, r0, ip, lsr r0
	...
 b20:	0000003c 	andeq	r0, r0, ip, lsr r0
 b24:	77b30002 	ldrvc	r0, [r3, r2]!
 b28:	00040000 	andeq	r0, r4, r0
 b2c:	00000000 	andeq	r0, r0, r0
 b30:	0800533c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, lr}
 b34:	00000084 	andeq	r0, r0, r4, lsl #1
 b38:	080053c0 	stmdaeq	r0, {r6, r7, r8, r9, ip, lr}
 b3c:	00000044 	andeq	r0, r0, r4, asr #32
 b40:	08005404 	stmdaeq	r0, {r2, sl, ip, lr}
 b44:	000000c4 	andeq	r0, r0, r4, asr #1
 b48:	080054c8 	stmdaeq	r0, {r3, r6, r7, sl, ip, lr}
 b4c:	00000060 	andeq	r0, r0, r0, rrx
 b50:	08005528 	stmdaeq	r0, {r3, r5, r8, sl, ip, lr}
 b54:	00000042 	andeq	r0, r0, r2, asr #32
	...
 b60:	0000007c 	andeq	r0, r0, ip, ror r0
 b64:	815f0002 	cmphi	pc, r2
 b68:	00040000 	andeq	r0, r4, r0
 b6c:	00000000 	andeq	r0, r0, r0
 b70:	0800556c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, ip, lr}
 b74:	0000000c 	andeq	r0, r0, ip
 b78:	08005578 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, ip, lr}
 b7c:	00000006 	andeq	r0, r0, r6
 b80:	08005580 	stmdaeq	r0, {r7, r8, sl, ip, lr}
 b84:	00000006 	andeq	r0, r0, r6
 b88:	08005588 	stmdaeq	r0, {r3, r7, r8, sl, ip, lr}
 b8c:	00000006 	andeq	r0, r0, r6
 b90:	08005590 	stmdaeq	r0, {r4, r7, r8, sl, ip, lr}
 b94:	00000006 	andeq	r0, r0, r6
 b98:	08005598 	stmdaeq	r0, {r3, r4, r7, r8, sl, ip, lr}
 b9c:	0000000c 	andeq	r0, r0, ip
 ba0:	080055a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip, lr}
 ba4:	0000000c 	andeq	r0, r0, ip
 ba8:	080055b0 	stmdaeq	r0, {r4, r5, r7, r8, sl, ip, lr}
 bac:	0000000c 	andeq	r0, r0, ip
 bb0:	080055bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, ip, lr}
 bb4:	0000000c 	andeq	r0, r0, ip
 bb8:	080055c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, ip, lr}
 bbc:	0000000c 	andeq	r0, r0, ip
 bc0:	080055d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, ip, lr}
 bc4:	0000000c 	andeq	r0, r0, ip
 bc8:	080055e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, ip, lr}
 bcc:	0000003c 	andeq	r0, r0, ip, lsr r0
 bd0:	0800561c 	stmdaeq	r0, {r2, r3, r4, r9, sl, ip, lr}
 bd4:	0000000c 	andeq	r0, r0, ip
	...
 be0:	0000006c 	andeq	r0, r0, ip, rrx
 be4:	85560002 	ldrbhi	r0, [r6, #-2]
 be8:	00040000 	andeq	r0, r4, r0
 bec:	00000000 	andeq	r0, r0, r0
 bf0:	08005628 	stmdaeq	r0, {r3, r5, r9, sl, ip, lr}
 bf4:	00000014 	andeq	r0, r0, r4, lsl r0
 bf8:	0800563c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip, lr}
 bfc:	00000014 	andeq	r0, r0, r4, lsl r0
 c00:	08005650 	stmdaeq	r0, {r4, r6, r9, sl, ip, lr}
 c04:	00000030 	andeq	r0, r0, r0, lsr r0
 c08:	08005680 	stmdaeq	r0, {r7, r9, sl, ip, lr}
 c0c:	00000030 	andeq	r0, r0, r0, lsr r0
 c10:	080056b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, ip, lr}
 c14:	00000028 	andeq	r0, r0, r8, lsr #32
 c18:	080056d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip, lr}
 c1c:	0000019c 	muleq	r0, ip, r1
 c20:	08005874 	stmdaeq	r0, {r2, r4, r5, r6, fp, ip, lr}
 c24:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 c28:	08005924 	stmdaeq	r0, {r2, r5, r8, fp, ip, lr}
 c2c:	0000003c 	andeq	r0, r0, ip, lsr r0
 c30:	08005960 	stmdaeq	r0, {r5, r6, r8, fp, ip, lr}
 c34:	0000002c 	andeq	r0, r0, ip, lsr #32
 c38:	0800598c 	stmdaeq	r0, {r2, r3, r7, r8, fp, ip, lr}
 c3c:	000000b8 	strheq	r0, [r0], -r8
 c40:	08005a44 	stmdaeq	r0, {r2, r6, r9, fp, ip, lr}
 c44:	00000444 	andeq	r0, r0, r4, asr #8
	...
 c50:	000000a4 	andeq	r0, r0, r4, lsr #1
 c54:	8de50002 	stclhi	0, cr0, [r5, #8]!
 c58:	00040000 	andeq	r0, r4, r0
 c5c:	00000000 	andeq	r0, r0, r0
 c60:	08005e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, ip, lr}
 c64:	00000056 	andeq	r0, r0, r6, asr r0
 c68:	08005ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip, lr}
 c6c:	00000056 	andeq	r0, r0, r6, asr r0
 c70:	08005f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip, lr}
 c74:	000000bc 	strheq	r0, [r0], -ip
 c78:	00000000 	andeq	r0, r0, r0
 c7c:	0000003e 	andeq	r0, r0, lr, lsr r0
 c80:	00000000 	andeq	r0, r0, r0
 c84:	00000064 	andeq	r0, r0, r4, rrx
 c88:	08005ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 c8c:	0000003e 	andeq	r0, r0, lr, lsr r0
 c90:	08006034 	stmdaeq	r0, {r2, r4, r5, sp, lr}
 c94:	00000092 	muleq	r0, r2, r0
 c98:	080060c8 	stmdaeq	r0, {r3, r6, r7, sp, lr}
 c9c:	0000007c 	andeq	r0, r0, ip, ror r0
 ca0:	08006144 	stmdaeq	r0, {r2, r6, r8, sp, lr}
 ca4:	0000004a 	andeq	r0, r0, sl, asr #32
 ca8:	08006190 	stmdaeq	r0, {r4, r7, r8, sp, lr}
 cac:	0000001e 	andeq	r0, r0, lr, lsl r0
 cb0:	080061b0 	stmdaeq	r0, {r4, r5, r7, r8, sp, lr}
 cb4:	00000310 	andeq	r0, r0, r0, lsl r3
 cb8:	00000000 	andeq	r0, r0, r0
 cbc:	0000003a 	andeq	r0, r0, sl, lsr r0
 cc0:	080064c0 	stmdaeq	r0, {r6, r7, sl, sp, lr}
 cc4:	0000003a 	andeq	r0, r0, sl, lsr r0
 cc8:	00000000 	andeq	r0, r0, r0
 ccc:	0000002e 	andeq	r0, r0, lr, lsr #32
 cd0:	00000000 	andeq	r0, r0, r0
 cd4:	000002c4 	andeq	r0, r0, r4, asr #5
 cd8:	00000000 	andeq	r0, r0, r0
 cdc:	0000004e 	andeq	r0, r0, lr, asr #32
 ce0:	080064fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, sp, lr}
 ce4:	0000018a 	andeq	r0, r0, sl, lsl #3
 ce8:	00000000 	andeq	r0, r0, r0
 cec:	0000018a 	andeq	r0, r0, sl, lsl #3
	...
 cf8:	0000001c 	andeq	r0, r0, ip, lsl r0
 cfc:	979c0002 	ldrls	r0, [ip, r2]
 d00:	00040000 	andeq	r0, r4, r0
 d04:	00000000 	andeq	r0, r0, r0
 d08:	080066ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, sp, lr}
 d0c:	00000016 	andeq	r0, r0, r6, lsl r0
	...
 d18:	0000001c 	andeq	r0, r0, ip, lsl r0
 d1c:	98a00002 	stmials	r0!, {r1}
 d20:	00040000 	andeq	r0, r4, r0
 d24:	00000000 	andeq	r0, r0, r0
 d28:	080066e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, sp, lr}
 d2c:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 d38:	00000024 	andeq	r0, r0, r4, lsr #32
 d3c:	99730002 	ldmdbls	r3!, {r1}^
 d40:	00040000 	andeq	r0, r4, r0
	...
 d4c:	00000050 	andeq	r0, r0, r0, asr r0
 d50:	080066f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, sp, lr}
 d54:	00000074 	andeq	r0, r0, r4, ror r0
	...
 d60:	00000024 	andeq	r0, r0, r4, lsr #32
 d64:	a1840002 	orrge	r0, r4, r2
 d68:	00040000 	andeq	r0, r4, r0
	...
 d74:	0000005c 	andeq	r0, r0, ip, asr r0
 d78:	08006768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, sp, lr}
 d7c:	00000064 	andeq	r0, r0, r4, rrx
	...
 d88:	0000001c 	andeq	r0, r0, ip, lsl r0
 d8c:	aa4f0002 	bge	13c0d9c <_Min_Stack_Size+0x13c0b9c>
 d90:	00040000 	andeq	r0, r4, r0
 d94:	00000000 	andeq	r0, r0, r0
 d98:	080067cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, sp, lr}
 d9c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 da8:	0000001c 	andeq	r0, r0, ip, lsl r0
 dac:	ab320002 	blge	c80dbc <_Min_Stack_Size+0xc80bbc>
 db0:	00040000 	andeq	r0, r4, r0
 db4:	00000000 	andeq	r0, r0, r0
 db8:	080067e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, sp, lr}
 dbc:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 dc8:	0000001c 	andeq	r0, r0, ip, lsl r0
 dcc:	abef0002 	blge	ffbc0ddc <BootRAM+0xeb3157d>
 dd0:	00040000 	andeq	r0, r4, r0
 dd4:	00000000 	andeq	r0, r0, r0
 dd8:	080067f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, sp, lr}
 ddc:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 de8:	0000001c 	andeq	r0, r0, ip, lsl r0
 dec:	acbc0002 	ldcge	0, cr0, [ip], #8
 df0:	00040000 	andeq	r0, r4, r0
 df4:	00000000 	andeq	r0, r0, r0
 df8:	08006808 	stmdaeq	r0, {r3, fp, sp, lr}
 dfc:	00000032 	andeq	r0, r0, r2, lsr r0
	...
 e08:	0000001c 	andeq	r0, r0, ip, lsl r0
 e0c:	ad8b0002 	stcge	0, cr0, [fp, #8]
 e10:	00040000 	andeq	r0, r4, r0
 e14:	00000000 	andeq	r0, r0, r0
 e18:	0800683a 	stmdaeq	r0, {r1, r3, r4, r5, fp, sp, lr}
 e1c:	00000024 	andeq	r0, r0, r4, lsr #32
	...
 e28:	00000014 	andeq	r0, r0, r4, lsl r0
 e2c:	ae800002 	cdpge	0, 8, cr0, cr0, cr2, {0}
 e30:	00040000 	andeq	r0, r4, r0
	...
 e40:	00000024 	andeq	r0, r0, r4, lsr #32
 e44:	b6530002 	ldrblt	r0, [r3], -r2
 e48:	00040000 	andeq	r0, r4, r0
 e4c:	00000000 	andeq	r0, r0, r0
 e50:	08006860 	stmdaeq	r0, {r5, r6, fp, sp, lr}
 e54:	00000010 	andeq	r0, r0, r0, lsl r0
 e58:	00000000 	andeq	r0, r0, r0
 e5c:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 e68:	0000001c 	andeq	r0, r0, ip, lsl r0
 e6c:	be140002 	cdplt	0, 1, cr0, cr4, cr2, {0}
 e70:	00040000 	andeq	r0, r4, r0
 e74:	00000000 	andeq	r0, r0, r0
 e78:	08006870 	stmdaeq	r0, {r4, r5, r6, fp, sp, lr}
 e7c:	00000088 	andeq	r0, r0, r8, lsl #1
	...
 e88:	0000001c 	andeq	r0, r0, ip, lsl r0
 e8c:	c62e0002 	strtgt	r0, [lr], -r2
 e90:	00040000 	andeq	r0, r4, r0
 e94:	00000000 	andeq	r0, r0, r0
 e98:	080068f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp, sp, lr}
 e9c:	000000ac 	andeq	r0, r0, ip, lsr #1
	...
 ea8:	0000002c 	andeq	r0, r0, ip, lsr #32
 eac:	cf290002 	svcgt	0x00290002
 eb0:	00040000 	andeq	r0, r4, r0
 eb4:	00000000 	andeq	r0, r0, r0
 eb8:	080069a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, sp, lr}
 ebc:	000000b2 	strheq	r0, [r0], -r2
 ec0:	00000000 	andeq	r0, r0, r0
 ec4:	000000fe 	strdeq	r0, [r0], -lr
 ec8:	08006a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, sp, lr}
 ecc:	000001e4 	andeq	r0, r0, r4, ror #3
	...
 ed8:	00000024 	andeq	r0, r0, r4, lsr #32
 edc:	dd1d0002 	ldcle	0, cr0, [sp, #-8]
 ee0:	00040000 	andeq	r0, r4, r0
 ee4:	00000000 	andeq	r0, r0, r0
 ee8:	08006c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, sp, lr}
 eec:	000000ea 	andeq	r0, r0, sl, ror #1
 ef0:	08006d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, sp, lr}
 ef4:	00000240 	andeq	r0, r0, r0, asr #4
	...
 f00:	0000001c 	andeq	r0, r0, ip, lsl r0
 f04:	e8780002 	ldmda	r8!, {r1}^
 f08:	00040000 	andeq	r0, r4, r0
 f0c:	00000000 	andeq	r0, r0, r0
 f10:	08006f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, sp, lr}
 f14:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 f20:	0000001c 	andeq	r0, r0, ip, lsl r0
 f24:	f0180002 			; <UNDEFINED> instruction: 0xf0180002
 f28:	00040000 	andeq	r0, r4, r0
 f2c:	00000000 	andeq	r0, r0, r0
 f30:	08006f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, sp, lr}
 f34:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 f40:	0000001c 	andeq	r0, r0, ip, lsl r0
 f44:	f1100002 			; <UNDEFINED> instruction: 0xf1100002
 f48:	00040000 	andeq	r0, r4, r0
 f4c:	00000000 	andeq	r0, r0, r0
 f50:	08006fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, sp, lr}
 f54:	00000036 	andeq	r0, r0, r6, lsr r0
	...
 f60:	0000001c 	andeq	r0, r0, ip, lsl r0
 f64:	f2120002 	vhadd.s16	d0, d2, d2
 f68:	00040000 	andeq	r0, r4, r0
 f6c:	00000000 	andeq	r0, r0, r0
 f70:	08006fda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, fp, sp, lr}
 f74:	0000004c 	andeq	r0, r0, ip, asr #32
	...
 f80:	00000024 	andeq	r0, r0, r4, lsr #32
 f84:	fac70002 	blx	ff1c0f94 <BootRAM+0xe131735>
 f88:	00040000 	andeq	r0, r4, r0
	...
 f94:	0000001a 	andeq	r0, r0, sl, lsl r0
 f98:	00000000 	andeq	r0, r0, r0
 f9c:	000000b4 	strheq	r0, [r0], -r4
	...
 fa8:	0000001c 	andeq	r0, r0, ip, lsl r0
 fac:	03c20002 	biceq	r0, r2, #2
 fb0:	00040001 	andeq	r0, r4, r1
 fb4:	00000000 	andeq	r0, r0, r0
 fb8:	08007026 	stmdaeq	r0, {r1, r2, r5, ip, sp, lr}
 fbc:	00000014 	andeq	r0, r0, r4, lsl r0
	...
 fc8:	0000001c 	andeq	r0, r0, ip, lsl r0
 fcc:	0b7b0002 	bleq	1ec0fdc <_Min_Stack_Size+0x1ec0ddc>
 fd0:	00040001 	andeq	r0, r4, r1
 fd4:	00000000 	andeq	r0, r0, r0
 fd8:	0800703c 	stmdaeq	r0, {r2, r3, r4, r5, ip, sp, lr}
 fdc:	0000001c 	andeq	r0, r0, ip, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	0800010c 	stmdaeq	r0, {r2, r3, r8}
   4:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
   8:	00000001 	andeq	r0, r0, r1
   c:	00000001 	andeq	r0, r0, r1
  10:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
  14:	0800017e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8}
  18:	08000180 	stmdaeq	r0, {r7, r8}
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
  {
    bitstatus = SET;
  1c:	08000280 	stmdaeq	r0, {r7, r9}
	...
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
  28:	08000280 	stmdaeq	r0, {r7, r9}
  2c:	080002f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9}
  30:	080002f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9}
  34:	08000358 	stmdaeq	r0, {r3, r4, r6, r8, r9}
  38:	08000358 	stmdaeq	r0, {r3, r4, r6, r8, r9}
  3c:	08000408 	stmdaeq	r0, {r3, sl}
  40:	00000001 	andeq	r0, r0, r1
  44:	00000001 	andeq	r0, r0, r1
  48:	08000408 	stmdaeq	r0, {r3, sl}
  4c:	0800048c 	stmdaeq	r0, {r2, r3, r7, sl}
  50:	0800048c 	stmdaeq	r0, {r2, r3, r7, sl}
  54:	08000634 	stmdaeq	r0, {r2, r4, r5, r9, sl}
  58:	08000634 	stmdaeq	r0, {r2, r4, r5, r9, sl}
  5c:	080006b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, sl}
  60:	00000001 	andeq	r0, r0, r1
  64:	00000001 	andeq	r0, r0, r1
	...
  70:	080006b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl}
  74:	080008b0 	stmdaeq	r0, {r4, r5, r7, fp}
  78:	080008b0 	stmdaeq	r0, {r4, r5, r7, fp}
  7c:	08000968 	stmdaeq	r0, {r3, r5, r6, r8, fp}
  80:	00000001 	andeq	r0, r0, r1
  84:	00000001 	andeq	r0, r0, r1
  88:	08000968 	stmdaeq	r0, {r3, r5, r6, r8, fp}
  8c:	08000acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp}
  90:	00000001 	andeq	r0, r0, r1
  94:	00000001 	andeq	r0, r0, r1
  98:	08000acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp}
  9c:	08000cc0 	stmdaeq	r0, {r6, r7, sl, fp}
  a0:	08000cc0 	stmdaeq	r0, {r6, r7, sl, fp}
  a4:	08000e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp}
  a8:	08000e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp}
  ac:	0800103c 	stmdaeq	r0, {r2, r3, r4, r5, ip}
  b0:	0800103c 	stmdaeq	r0, {r2, r3, r4, r5, ip}
  b4:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
  b8:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
  bc:	080014e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip}
  c0:	00000001 	andeq	r0, r0, r1
  c4:	00000001 	andeq	r0, r0, r1
  c8:	00000001 	andeq	r0, r0, r1
  cc:	00000001 	andeq	r0, r0, r1
	...
  d8:	080014e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip}
  dc:	080014f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, ip}
  e0:	080014f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, ip}
  e4:	08001500 	stmdaeq	r0, {r8, sl, ip}
  e8:	08001500 	stmdaeq	r0, {r8, sl, ip}
  ec:	0800150c 	stmdaeq	r0, {r2, r3, r8, sl, ip}
  f0:	0800150c 	stmdaeq	r0, {r2, r3, r8, sl, ip}
  f4:	08001518 	stmdaeq	r0, {r3, r4, r8, sl, ip}
  f8:	08001518 	stmdaeq	r0, {r3, r4, r8, sl, ip}
  fc:	08001532 	stmdaeq	r0, {r1, r4, r5, r8, sl, ip}
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }
  
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 100:	08001534 	stmdaeq	r0, {r2, r4, r5, r8, sl, ip}
 104:	08001550 	stmdaeq	r0, {r4, r6, r8, sl, ip}
 108:	08001550 	stmdaeq	r0, {r4, r6, r8, sl, ip}
  {
    /* Set the default values */
    i2sdiv = 2;
 10c:	08001560 	stmdaeq	r0, {r5, r6, r8, sl, ip}
    i2sodd = 0;
 110:	08001560 	stmdaeq	r0, {r5, r6, r8, sl, ip}
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 114:	08001574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, ip}
 118:	00000001 	andeq	r0, r0, r1
 11c:	00000001 	andeq	r0, r0, r1
 120:	08001574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, ip}
 124:	080015bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, ip}
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 128:	00000001 	andeq	r0, r0, r1
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 12c:	00000001 	andeq	r0, r0, r1
 130:	080015bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, ip}
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 134:	08001610 	stmdaeq	r0, {r4, r9, sl, ip}
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 138:	08001610 	stmdaeq	r0, {r4, r9, sl, ip}
 13c:	080017c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip}

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 140:	080017c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip}
 144:	08001844 	stmdaeq	r0, {r2, r6, fp, ip}
 148:	08001844 	stmdaeq	r0, {r2, r6, fp, ip}
 14c:	080018da 	stmdaeq	r0, {r1, r3, r4, r6, r7, fp, ip}
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;   
 150:	080018dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, ip}
 154:	080019ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, fp, ip}
}
 158:	080019f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, ip}
 15c:	08001a2a 	stmdaeq	r0, {r1, r3, r5, r9, fp, ip}
 160:	08001a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, ip}
         break;
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
         *(uint16_t*) arg = getSn_KPALVTR(sn);
         break;
 164:	08001a76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, fp, ip}
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 168:	08001a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp, ip}
 16c:	08001aac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp, ip}
 170:	08001aac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp, ip}
 174:	08001af2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, fp, ip}
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 178:	08001af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip}
 17c:	08001b22 	stmdaeq	r0, {r1, r5, r8, r9, fp, ip}
 180:	08001b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, ip}
 184:	08001b56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, fp, ip}
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 188:	08001b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, ip}
 18c:	08001ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp, ip}
 190:	08001ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp, ip}
 194:	08001c26 	stmdaeq	r0, {r1, r2, r5, sl, fp, ip}
 198:	08001c28 	stmdaeq	r0, {r3, r5, sl, fp, ip}
 19c:	08001cbe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, sl, fp, ip}
         break;
 1a0:	00000001 	andeq	r0, r0, r1
      case SO_REMAINSIZE:
         if(getSn_MR(sn) == Sn_MR_TCP)
 1a4:	00000001 	andeq	r0, r0, r1
 1a8:	08001cc0 	stmdaeq	r0, {r6, r7, sl, fp, ip}
 1ac:	08001d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp, ip}
 1b0:	08001d54 	stmdaeq	r0, {r2, r4, r6, r8, sl, fp, ip}
 1b4:	08001dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip}
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 1b8:	08001dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip}
 1bc:	08001e4c 	stmdaeq	r0, {r2, r3, r6, r9, sl, fp, ip}
 1c0:	08001e4c 	stmdaeq	r0, {r2, r3, r6, r9, sl, fp, ip}
 1c4:	08001e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, ip}
         else
            *(uint16_t*)arg = sock_remained_size[sn];
 1c8:	08001e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, ip}
 1cc:	08001ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip}
 1d0:	08001ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip}
         break;
 1d4:	08001ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip}
      case SO_PACKINFO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 1d8:	08001ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip}
 1dc:	08001f22 	stmdaeq	r0, {r1, r5, r8, r9, sl, fp, ip}
	...
 1e8:	08001f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, ip}
 1ec:	08001f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, ip}
 1f0:	08001f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, ip}
         *(uint8_t*)arg = sock_pack_info[sn];
 1f4:	08001ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 1f8:	08001ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
         break;
 1fc:	08002088 	stmdaeq	r0, {r3, r7, sp}
      default:
         return SOCKERR_SOCKOPT;
 200:	08002088 	stmdaeq	r0, {r3, r7, sp}
   }
   return SOCK_OK;
 204:	0800211c 	stmdaeq	r0, {r2, r3, r4, r8, sp}
}
 208:	0800211c 	stmdaeq	r0, {r2, r3, r4, r8, sp}
 20c:	080021b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, sp}
 210:	080021b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sp}
 214:	0800224a 	stmdaeq	r0, {r1, r3, r6, r9, sp}
 218:	0800224c 	stmdaeq	r0, {r2, r3, r6, r9, sp}
 21c:	08002302 	stmdaeq	r0, {r1, r8, r9, sp}
 220:	08002304 	stmdaeq	r0, {r2, r8, r9, sp}
 224:	080023ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sp}
 228:	080023bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sp}
       fixed_header[1] = fixed_header[1] | 0x80;
       // second byte is number of 128s
       fixed_header[2] = remainLen / 128;
   }

	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
 22c:	0800244a 	stmdaeq	r0, {r1, r3, r6, sl, sp}
	...
 238:	0800244c 	stmdaeq	r0, {r2, r3, r6, sl, sp}
 23c:	08002458 	stmdaeq	r0, {r3, r4, r6, sl, sp}
 240:	08002458 	stmdaeq	r0, {r3, r4, r6, sl, sp}
 244:	0800247c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, sp}
 248:	0800247c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, sp}
 24c:	080024c4 	stmdaeq	r0, {r2, r6, r7, sl, sp}
	memset(packet, 0, sizeof(packet));
 250:	080024c4 	stmdaeq	r0, {r2, r6, r7, sl, sp}
 254:	08002990 	stmdaeq	r0, {r4, r7, r8, fp, sp}
 258:	08002990 	stmdaeq	r0, {r4, r7, r8, fp, sp}
	memcpy(packet, fixed_header, sizeof(fixed_header));
 25c:	08002fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, sp}
 260:	08002fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, sp}
 264:	0800340c 	stmdaeq	r0, {r2, r3, sl, ip, sp}
 268:	0800340c 	stmdaeq	r0, {r2, r3, sl, ip, sp}
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
 26c:	080036a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip, sp}
 270:	080036a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip, sp}
 274:	080038d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, ip, sp}
 278:	080038d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, ip, sp}
 27c:	080039e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip, sp}
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
 280:	080039e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip, sp}
 284:	08003a68 	stmdaeq	r0, {r3, r5, r6, r9, fp, ip, sp}
 288:	08003a68 	stmdaeq	r0, {r3, r5, r6, r9, fp, ip, sp}
 28c:	08003af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, ip, sp}
 290:	08003af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, ip, sp}
 294:	08003b18 	stmdaeq	r0, {r3, r4, r8, r9, fp, ip, sp}

	// Send the packet
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
 298:	08003b18 	stmdaeq	r0, {r3, r4, r8, r9, fp, ip, sp}
 29c:	08003b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip, sp}
 2a0:	00000001 	andeq	r0, r0, r1
 2a4:	00000001 	andeq	r0, r0, r1
 2a8:	08003b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip, sp}
 2ac:	08003b80 	stmdaeq	r0, {r7, r8, r9, fp, ip, sp}
		return -1;
 2b0:	08003b80 	stmdaeq	r0, {r7, r8, r9, fp, ip, sp}
	}

	return 1;
 2b4:	08003bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp, ip, sp}
 2b8:	08003bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp, ip, sp}
}
 2bc:	08003bf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
 2c0:	08003bf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
 2c4:	08003c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip, sp}
 2c8:	00000001 	andeq	r0, r0, r1
 2cc:	00000001 	andeq	r0, r0, r1
	...
 2d8:	08003c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip, sp}
 2dc:	08003c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, ip, sp}
 2e0:	08003c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, ip, sp}
 2e4:	08003d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp, ip, sp}
 2e8:	08003d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp, ip, sp}
 2ec:	08003dd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, fp, ip, sp}
 2f0:	08003dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, ip, sp}
 2f4:	080040da 	stmdaeq	r0, {r1, r3, r4, r6, r7, lr}
 2f8:	080040dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, lr}
 2fc:	08004252 	stmdaeq	r0, {r1, r4, r6, r9, lr}
	...
 308:	08004254 	stmdaeq	r0, {r2, r4, r6, r9, lr}
 30c:	0800428a 	stmdaeq	r0, {r1, r3, r7, r9, lr}
 310:	0800428c 	stmdaeq	r0, {r2, r3, r7, r9, lr}
 314:	08004448 	stmdaeq	r0, {r3, r6, sl, lr}
 318:	08004448 	stmdaeq	r0, {r3, r6, sl, lr}
 31c:	08004554 	stmdaeq	r0, {r2, r4, r6, r8, sl, lr}
 320:	08004554 	stmdaeq	r0, {r2, r4, r6, r8, sl, lr}
 324:	080045c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, lr}
 328:	080045c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, lr}
 32c:	08004624 	stmdaeq	r0, {r2, r5, r9, sl, lr}
 330:	08004624 	stmdaeq	r0, {r2, r5, r9, sl, lr}
 334:	08004670 	stmdaeq	r0, {r4, r5, r6, r9, sl, lr}
 338:	00000001 	andeq	r0, r0, r1
 33c:	00000001 	andeq	r0, r0, r1
	...
 348:	00000001 	andeq	r0, r0, r1
 34c:	00000001 	andeq	r0, r0, r1
 350:	08004670 	stmdaeq	r0, {r4, r5, r6, r9, sl, lr}
 354:	08004734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, lr}
 358:	00000001 	andeq	r0, r0, r1
 35c:	00000001 	andeq	r0, r0, r1
 360:	00000001 	andeq	r0, r0, r1
 364:	00000001 	andeq	r0, r0, r1
 368:	00000001 	andeq	r0, r0, r1
 36c:	00000001 	andeq	r0, r0, r1
	...
 378:	00000001 	andeq	r0, r0, r1
 37c:	00000001 	andeq	r0, r0, r1
 380:	00000001 	andeq	r0, r0, r1
 384:	00000001 	andeq	r0, r0, r1
 388:	00000001 	andeq	r0, r0, r1
 38c:	00000001 	andeq	r0, r0, r1
 390:	00000001 	andeq	r0, r0, r1
 394:	00000001 	andeq	r0, r0, r1
 398:	00000001 	andeq	r0, r0, r1
 39c:	00000001 	andeq	r0, r0, r1
 3a0:	00000001 	andeq	r0, r0, r1
 3a4:	00000001 	andeq	r0, r0, r1
 3a8:	00000001 	andeq	r0, r0, r1
 3ac:	00000001 	andeq	r0, r0, r1
 3b0:	00000001 	andeq	r0, r0, r1
 3b4:	00000001 	andeq	r0, r0, r1
 3b8:	00000001 	andeq	r0, r0, r1
 3bc:	00000001 	andeq	r0, r0, r1
 3c0:	00000001 	andeq	r0, r0, r1
 3c4:	00000001 	andeq	r0, r0, r1
 3c8:	00000001 	andeq	r0, r0, r1
 3cc:	00000001 	andeq	r0, r0, r1
 3d0:	00000001 	andeq	r0, r0, r1
 3d4:	00000001 	andeq	r0, r0, r1
 3d8:	00000001 	andeq	r0, r0, r1
 3dc:	00000001 	andeq	r0, r0, r1
 3e0:	00000001 	andeq	r0, r0, r1
 3e4:	00000001 	andeq	r0, r0, r1
 3e8:	00000001 	andeq	r0, r0, r1
 3ec:	00000001 	andeq	r0, r0, r1
 3f0:	00000001 	andeq	r0, r0, r1
 3f4:	00000001 	andeq	r0, r0, r1
 3f8:	08004734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, lr}
 3fc:	08004754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, lr}
 400:	00000001 	andeq	r0, r0, r1
 404:	00000001 	andeq	r0, r0, r1
 408:	00000001 	andeq	r0, r0, r1
 40c:	00000001 	andeq	r0, r0, r1
 410:	08004754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, lr}
 414:	080048b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, lr}
 418:	00000001 	andeq	r0, r0, r1
 41c:	00000001 	andeq	r0, r0, r1
 420:	080048b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, lr}
 424:	080048f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, lr}
 428:	080048f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, lr}
 42c:	08004930 	stmdaeq	r0, {r4, r5, r8, fp, lr}
 430:	00000001 	andeq	r0, r0, r1
 434:	00000001 	andeq	r0, r0, r1
 438:	08004930 	stmdaeq	r0, {r4, r5, r8, fp, lr}
 43c:	0800496c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp, lr}
 440:	00000001 	andeq	r0, r0, r1
 444:	00000001 	andeq	r0, r0, r1
 448:	00000001 	andeq	r0, r0, r1
 44c:	00000001 	andeq	r0, r0, r1
 450:	00000001 	andeq	r0, r0, r1
 454:	00000001 	andeq	r0, r0, r1
 458:	0800496c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp, lr}
 45c:	080049e0 	stmdaeq	r0, {r5, r6, r7, r8, fp, lr}
 460:	00000001 	andeq	r0, r0, r1
 464:	00000001 	andeq	r0, r0, r1
 468:	00000001 	andeq	r0, r0, r1
 46c:	00000001 	andeq	r0, r0, r1
 470:	00000001 	andeq	r0, r0, r1
 474:	00000001 	andeq	r0, r0, r1
	...
 480:	00000001 	andeq	r0, r0, r1
 484:	00000001 	andeq	r0, r0, r1
 488:	00000001 	andeq	r0, r0, r1
 48c:	00000001 	andeq	r0, r0, r1
 490:	080049e0 	stmdaeq	r0, {r5, r6, r7, r8, fp, lr}
 494:	08004b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, lr}
 498:	00000001 	andeq	r0, r0, r1
 49c:	00000001 	andeq	r0, r0, r1
 4a0:	00000001 	andeq	r0, r0, r1
 4a4:	00000001 	andeq	r0, r0, r1
 4a8:	00000001 	andeq	r0, r0, r1
 4ac:	00000001 	andeq	r0, r0, r1
 4b0:	00000001 	andeq	r0, r0, r1
 4b4:	00000001 	andeq	r0, r0, r1
 4b8:	00000001 	andeq	r0, r0, r1
 4bc:	00000001 	andeq	r0, r0, r1
 4c0:	08004b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, lr}
 4c4:	08004b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, lr}
 4c8:	08004b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, lr}
 4cc:	08004b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp, lr}
 4d0:	00000001 	andeq	r0, r0, r1
 4d4:	00000001 	andeq	r0, r0, r1
 4d8:	00000001 	andeq	r0, r0, r1
 4dc:	00000001 	andeq	r0, r0, r1
 4e0:	00000001 	andeq	r0, r0, r1
 4e4:	00000001 	andeq	r0, r0, r1
 4e8:	00000001 	andeq	r0, r0, r1
 4ec:	00000001 	andeq	r0, r0, r1
 4f0:	00000001 	andeq	r0, r0, r1
 4f4:	00000001 	andeq	r0, r0, r1
 4f8:	00000001 	andeq	r0, r0, r1
 4fc:	00000001 	andeq	r0, r0, r1
 500:	00000001 	andeq	r0, r0, r1
 504:	00000001 	andeq	r0, r0, r1
 508:	00000001 	andeq	r0, r0, r1
 50c:	00000001 	andeq	r0, r0, r1
	...
 518:	00000001 	andeq	r0, r0, r1
 51c:	00000001 	andeq	r0, r0, r1
 520:	08004b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp, lr}
 524:	08004c1e 	stmdaeq	r0, {r1, r2, r3, r4, sl, fp, lr}
 528:	00000001 	andeq	r0, r0, r1
 52c:	00000001 	andeq	r0, r0, r1
 530:	00000001 	andeq	r0, r0, r1
 534:	00000001 	andeq	r0, r0, r1
 538:	00000001 	andeq	r0, r0, r1
 53c:	00000001 	andeq	r0, r0, r1
 540:	08004c20 	stmdaeq	r0, {r5, sl, fp, lr}
 544:	08004c5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl, fp, lr}
 548:	00000001 	andeq	r0, r0, r1
 54c:	00000001 	andeq	r0, r0, r1
 550:	00000001 	andeq	r0, r0, r1
 554:	00000001 	andeq	r0, r0, r1
 558:	00000001 	andeq	r0, r0, r1
 55c:	00000001 	andeq	r0, r0, r1
 560:	08004c60 	stmdaeq	r0, {r5, r6, sl, fp, lr}
 564:	08004c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, lr}
 568:	08004c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, lr}
 56c:	08004c96 	stmdaeq	r0, {r1, r2, r4, r7, sl, fp, lr}
 570:	00000001 	andeq	r0, r0, r1
 574:	00000001 	andeq	r0, r0, r1
 578:	00000001 	andeq	r0, r0, r1
 57c:	00000001 	andeq	r0, r0, r1
 580:	00000001 	andeq	r0, r0, r1
 584:	00000001 	andeq	r0, r0, r1
 588:	00000001 	andeq	r0, r0, r1
 58c:	00000001 	andeq	r0, r0, r1
 590:	00000001 	andeq	r0, r0, r1
 594:	00000001 	andeq	r0, r0, r1
 598:	00000001 	andeq	r0, r0, r1
 59c:	00000001 	andeq	r0, r0, r1
 5a0:	00000001 	andeq	r0, r0, r1
 5a4:	00000001 	andeq	r0, r0, r1
 5a8:	00000001 	andeq	r0, r0, r1
 5ac:	00000001 	andeq	r0, r0, r1
 5b0:	08004c98 	stmdaeq	r0, {r3, r4, r7, sl, fp, lr}
 5b4:	08004cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, lr}
 5b8:	00000001 	andeq	r0, r0, r1
 5bc:	00000001 	andeq	r0, r0, r1
 5c0:	00000001 	andeq	r0, r0, r1
 5c4:	00000001 	andeq	r0, r0, r1
 5c8:	00000001 	andeq	r0, r0, r1
 5cc:	00000001 	andeq	r0, r0, r1
	...
 5d8:	00000001 	andeq	r0, r0, r1
 5dc:	00000001 	andeq	r0, r0, r1
 5e0:	08004cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, lr}
 5e4:	08004dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, lr}
 5e8:	00000001 	andeq	r0, r0, r1
 5ec:	00000001 	andeq	r0, r0, r1
 5f0:	00000001 	andeq	r0, r0, r1
 5f4:	00000001 	andeq	r0, r0, r1
 5f8:	00000001 	andeq	r0, r0, r1
 5fc:	00000001 	andeq	r0, r0, r1
 600:	00000001 	andeq	r0, r0, r1
 604:	00000001 	andeq	r0, r0, r1
 608:	00000001 	andeq	r0, r0, r1
 60c:	00000001 	andeq	r0, r0, r1
 610:	00000001 	andeq	r0, r0, r1
 614:	00000001 	andeq	r0, r0, r1
 618:	00000001 	andeq	r0, r0, r1
 61c:	00000001 	andeq	r0, r0, r1
 620:	00000001 	andeq	r0, r0, r1
 624:	00000001 	andeq	r0, r0, r1
 628:	00000001 	andeq	r0, r0, r1
 62c:	00000001 	andeq	r0, r0, r1
 630:	00000001 	andeq	r0, r0, r1
 634:	00000001 	andeq	r0, r0, r1
 638:	00000001 	andeq	r0, r0, r1
 63c:	00000001 	andeq	r0, r0, r1
 640:	08004dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, lr}
 644:	08004e06 	stmdaeq	r0, {r1, r2, r9, sl, fp, lr}
 648:	00000001 	andeq	r0, r0, r1
 64c:	00000001 	andeq	r0, r0, r1
 650:	08004e08 	stmdaeq	r0, {r3, r9, sl, fp, lr}
 654:	08004e4e 	stmdaeq	r0, {r1, r2, r3, r6, r9, sl, fp, lr}
 658:	00000001 	andeq	r0, r0, r1
 65c:	00000001 	andeq	r0, r0, r1
 660:	00000001 	andeq	r0, r0, r1
 664:	00000001 	andeq	r0, r0, r1
 668:	00000001 	andeq	r0, r0, r1
 66c:	00000001 	andeq	r0, r0, r1
 670:	00000001 	andeq	r0, r0, r1
 674:	00000001 	andeq	r0, r0, r1
 678:	00000001 	andeq	r0, r0, r1
 67c:	00000001 	andeq	r0, r0, r1
 680:	00000001 	andeq	r0, r0, r1
 684:	00000001 	andeq	r0, r0, r1
 688:	00000001 	andeq	r0, r0, r1
 68c:	00000001 	andeq	r0, r0, r1
 690:	00000001 	andeq	r0, r0, r1
 694:	00000001 	andeq	r0, r0, r1
 698:	00000001 	andeq	r0, r0, r1
 69c:	00000001 	andeq	r0, r0, r1
 6a0:	00000001 	andeq	r0, r0, r1
 6a4:	00000001 	andeq	r0, r0, r1
 6a8:	00000001 	andeq	r0, r0, r1
 6ac:	00000001 	andeq	r0, r0, r1
 6b0:	00000001 	andeq	r0, r0, r1
 6b4:	00000001 	andeq	r0, r0, r1
 6b8:	00000001 	andeq	r0, r0, r1
 6bc:	00000001 	andeq	r0, r0, r1
 6c0:	00000001 	andeq	r0, r0, r1
 6c4:	00000001 	andeq	r0, r0, r1
 6c8:	00000001 	andeq	r0, r0, r1
 6cc:	00000001 	andeq	r0, r0, r1
 6d0:	00000001 	andeq	r0, r0, r1
 6d4:	00000001 	andeq	r0, r0, r1
 6d8:	00000001 	andeq	r0, r0, r1
 6dc:	00000001 	andeq	r0, r0, r1
 6e0:	00000001 	andeq	r0, r0, r1
 6e4:	00000001 	andeq	r0, r0, r1
 6e8:	00000001 	andeq	r0, r0, r1
 6ec:	00000001 	andeq	r0, r0, r1
 6f0:	00000001 	andeq	r0, r0, r1
 6f4:	00000001 	andeq	r0, r0, r1
 6f8:	00000001 	andeq	r0, r0, r1
 6fc:	00000001 	andeq	r0, r0, r1
 700:	00000001 	andeq	r0, r0, r1
 704:	00000001 	andeq	r0, r0, r1
 708:	00000001 	andeq	r0, r0, r1
 70c:	00000001 	andeq	r0, r0, r1
 710:	00000001 	andeq	r0, r0, r1
 714:	00000001 	andeq	r0, r0, r1
 718:	00000001 	andeq	r0, r0, r1
 71c:	00000001 	andeq	r0, r0, r1
 720:	00000001 	andeq	r0, r0, r1
 724:	00000001 	andeq	r0, r0, r1
 728:	00000001 	andeq	r0, r0, r1
 72c:	00000001 	andeq	r0, r0, r1
 730:	00000001 	andeq	r0, r0, r1
 734:	00000001 	andeq	r0, r0, r1
 738:	00000001 	andeq	r0, r0, r1
 73c:	00000001 	andeq	r0, r0, r1
 740:	00000001 	andeq	r0, r0, r1
 744:	00000001 	andeq	r0, r0, r1
 748:	00000001 	andeq	r0, r0, r1
 74c:	00000001 	andeq	r0, r0, r1
 750:	00000001 	andeq	r0, r0, r1
 754:	00000001 	andeq	r0, r0, r1
 758:	00000001 	andeq	r0, r0, r1
 75c:	00000001 	andeq	r0, r0, r1
 760:	00000001 	andeq	r0, r0, r1
 764:	00000001 	andeq	r0, r0, r1
 768:	00000001 	andeq	r0, r0, r1
 76c:	00000001 	andeq	r0, r0, r1
 770:	00000001 	andeq	r0, r0, r1
 774:	00000001 	andeq	r0, r0, r1
 778:	00000001 	andeq	r0, r0, r1
 77c:	00000001 	andeq	r0, r0, r1
 780:	00000001 	andeq	r0, r0, r1
 784:	00000001 	andeq	r0, r0, r1
 788:	00000001 	andeq	r0, r0, r1
 78c:	00000001 	andeq	r0, r0, r1
 790:	00000001 	andeq	r0, r0, r1
 794:	00000001 	andeq	r0, r0, r1
 798:	00000001 	andeq	r0, r0, r1
 79c:	00000001 	andeq	r0, r0, r1
 7a0:	00000001 	andeq	r0, r0, r1
 7a4:	00000001 	andeq	r0, r0, r1
 7a8:	00000001 	andeq	r0, r0, r1
 7ac:	00000001 	andeq	r0, r0, r1
 7b0:	00000001 	andeq	r0, r0, r1
 7b4:	00000001 	andeq	r0, r0, r1
 7b8:	00000001 	andeq	r0, r0, r1
 7bc:	00000001 	andeq	r0, r0, r1
 7c0:	00000001 	andeq	r0, r0, r1
 7c4:	00000001 	andeq	r0, r0, r1
 7c8:	00000001 	andeq	r0, r0, r1
 7cc:	00000001 	andeq	r0, r0, r1
 7d0:	00000001 	andeq	r0, r0, r1
 7d4:	00000001 	andeq	r0, r0, r1
 7d8:	00000001 	andeq	r0, r0, r1
 7dc:	00000001 	andeq	r0, r0, r1
 7e0:	00000001 	andeq	r0, r0, r1
 7e4:	00000001 	andeq	r0, r0, r1
 7e8:	00000001 	andeq	r0, r0, r1
 7ec:	00000001 	andeq	r0, r0, r1
 7f0:	00000001 	andeq	r0, r0, r1
 7f4:	00000001 	andeq	r0, r0, r1
 7f8:	00000001 	andeq	r0, r0, r1
 7fc:	00000001 	andeq	r0, r0, r1
 800:	00000001 	andeq	r0, r0, r1
 804:	00000001 	andeq	r0, r0, r1
 808:	00000001 	andeq	r0, r0, r1
 80c:	00000001 	andeq	r0, r0, r1
 810:	00000001 	andeq	r0, r0, r1
 814:	00000001 	andeq	r0, r0, r1
 818:	00000001 	andeq	r0, r0, r1
 81c:	00000001 	andeq	r0, r0, r1
 820:	00000001 	andeq	r0, r0, r1
 824:	00000001 	andeq	r0, r0, r1
 828:	00000001 	andeq	r0, r0, r1
 82c:	00000001 	andeq	r0, r0, r1
 830:	00000001 	andeq	r0, r0, r1
 834:	00000001 	andeq	r0, r0, r1
 838:	00000001 	andeq	r0, r0, r1
 83c:	00000001 	andeq	r0, r0, r1
 840:	00000001 	andeq	r0, r0, r1
 844:	00000001 	andeq	r0, r0, r1
 848:	00000001 	andeq	r0, r0, r1
 84c:	00000001 	andeq	r0, r0, r1
 850:	00000001 	andeq	r0, r0, r1
 854:	00000001 	andeq	r0, r0, r1
 858:	00000001 	andeq	r0, r0, r1
 85c:	00000001 	andeq	r0, r0, r1
 860:	00000001 	andeq	r0, r0, r1
 864:	00000001 	andeq	r0, r0, r1
 868:	00000001 	andeq	r0, r0, r1
 86c:	00000001 	andeq	r0, r0, r1
 870:	00000001 	andeq	r0, r0, r1
 874:	00000001 	andeq	r0, r0, r1
 878:	00000001 	andeq	r0, r0, r1
 87c:	00000001 	andeq	r0, r0, r1
 880:	08004e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, lr}
 884:	08004ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, lr}
 888:	08004ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, lr}
 88c:	08004ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, lr}
 890:	00000001 	andeq	r0, r0, r1
 894:	00000001 	andeq	r0, r0, r1
 898:	00000001 	andeq	r0, r0, r1
 89c:	00000001 	andeq	r0, r0, r1
 8a0:	00000001 	andeq	r0, r0, r1
 8a4:	00000001 	andeq	r0, r0, r1
 8a8:	00000001 	andeq	r0, r0, r1
 8ac:	00000001 	andeq	r0, r0, r1
	...
 8b8:	08004ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, lr}
 8bc:	08004f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, lr}
 8c0:	08004f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, lr}
 8c4:	0800508c 	stmdaeq	r0, {r2, r3, r7, ip, lr}
 8c8:	00000001 	andeq	r0, r0, r1
 8cc:	00000001 	andeq	r0, r0, r1
 8d0:	0800508c 	stmdaeq	r0, {r2, r3, r7, ip, lr}
 8d4:	080050ca 	stmdaeq	r0, {r1, r3, r6, r7, ip, lr}
 8d8:	00000001 	andeq	r0, r0, r1
 8dc:	00000001 	andeq	r0, r0, r1
 8e0:	00000001 	andeq	r0, r0, r1
 8e4:	00000001 	andeq	r0, r0, r1
 8e8:	080050cc 	stmdaeq	r0, {r2, r3, r6, r7, ip, lr}
 8ec:	0800510a 	stmdaeq	r0, {r1, r3, r8, ip, lr}
 8f0:	00000001 	andeq	r0, r0, r1
 8f4:	00000001 	andeq	r0, r0, r1
 8f8:	00000001 	andeq	r0, r0, r1
 8fc:	00000001 	andeq	r0, r0, r1
 900:	00000001 	andeq	r0, r0, r1
 904:	00000001 	andeq	r0, r0, r1
 908:	00000001 	andeq	r0, r0, r1
 90c:	00000001 	andeq	r0, r0, r1
 910:	00000001 	andeq	r0, r0, r1
 914:	00000001 	andeq	r0, r0, r1
 918:	00000001 	andeq	r0, r0, r1
 91c:	00000001 	andeq	r0, r0, r1
 920:	0800510c 	stmdaeq	r0, {r2, r3, r8, ip, lr}
 924:	0800512a 	stmdaeq	r0, {r1, r3, r5, r8, ip, lr}
 928:	00000001 	andeq	r0, r0, r1
 92c:	00000001 	andeq	r0, r0, r1
 930:	0800512c 	stmdaeq	r0, {r2, r3, r5, r8, ip, lr}
 934:	08005166 	stmdaeq	r0, {r1, r2, r5, r6, r8, ip, lr}
 938:	00000001 	andeq	r0, r0, r1
 93c:	00000001 	andeq	r0, r0, r1
 940:	00000001 	andeq	r0, r0, r1
 944:	00000001 	andeq	r0, r0, r1
 948:	00000001 	andeq	r0, r0, r1
 94c:	00000001 	andeq	r0, r0, r1
 950:	00000001 	andeq	r0, r0, r1
 954:	00000001 	andeq	r0, r0, r1
 958:	00000001 	andeq	r0, r0, r1
 95c:	00000001 	andeq	r0, r0, r1
 960:	00000001 	andeq	r0, r0, r1
 964:	00000001 	andeq	r0, r0, r1
 968:	00000001 	andeq	r0, r0, r1
 96c:	00000001 	andeq	r0, r0, r1
 970:	00000001 	andeq	r0, r0, r1
 974:	00000001 	andeq	r0, r0, r1
 978:	00000001 	andeq	r0, r0, r1
 97c:	00000001 	andeq	r0, r0, r1
 980:	08005168 	stmdaeq	r0, {r3, r5, r6, r8, ip, lr}
 984:	080051a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, ip, lr}
 988:	00000001 	andeq	r0, r0, r1
 98c:	00000001 	andeq	r0, r0, r1
 990:	080051a8 	stmdaeq	r0, {r3, r5, r7, r8, ip, lr}
 994:	08005208 	stmdaeq	r0, {r3, r9, ip, lr}
 998:	00000001 	andeq	r0, r0, r1
 99c:	00000001 	andeq	r0, r0, r1
 9a0:	08005208 	stmdaeq	r0, {r3, r9, ip, lr}
 9a4:	0800526e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, ip, lr}
 9a8:	00000001 	andeq	r0, r0, r1
 9ac:	00000001 	andeq	r0, r0, r1
 9b0:	00000001 	andeq	r0, r0, r1
 9b4:	00000001 	andeq	r0, r0, r1
 9b8:	00000001 	andeq	r0, r0, r1
 9bc:	00000001 	andeq	r0, r0, r1
	...
 9c8:	08005270 	stmdaeq	r0, {r4, r5, r6, r9, ip, lr}
 9cc:	08005290 	stmdaeq	r0, {r4, r7, r9, ip, lr}
 9d0:	08005290 	stmdaeq	r0, {r4, r7, r9, ip, lr}
 9d4:	080052b0 	stmdaeq	r0, {r4, r5, r7, r9, ip, lr}
 9d8:	080052b0 	stmdaeq	r0, {r4, r5, r7, r9, ip, lr}
 9dc:	080052d0 	stmdaeq	r0, {r4, r6, r7, r9, ip, lr}
 9e0:	080052d0 	stmdaeq	r0, {r4, r6, r7, r9, ip, lr}
 9e4:	080052e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, ip, lr}
 9e8:	080052e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, ip, lr}
 9ec:	08005300 	stmdaeq	r0, {r8, r9, ip, lr}
 9f0:	00000001 	andeq	r0, r0, r1
 9f4:	00000001 	andeq	r0, r0, r1
	...
 a00:	00000001 	andeq	r0, r0, r1
 a04:	00000001 	andeq	r0, r0, r1
 a08:	00000001 	andeq	r0, r0, r1
 a0c:	00000001 	andeq	r0, r0, r1
 a10:	08005300 	stmdaeq	r0, {r8, r9, ip, lr}
 a14:	0800533c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, lr}
	...
 a20:	0800533c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, lr}
 a24:	080053c0 	stmdaeq	r0, {r6, r7, r8, r9, ip, lr}
 a28:	080053c0 	stmdaeq	r0, {r6, r7, r8, r9, ip, lr}
 a2c:	08005404 	stmdaeq	r0, {r2, sl, ip, lr}
 a30:	08005404 	stmdaeq	r0, {r2, sl, ip, lr}
 a34:	080054c8 	stmdaeq	r0, {r3, r6, r7, sl, ip, lr}
 a38:	080054c8 	stmdaeq	r0, {r3, r6, r7, sl, ip, lr}
 a3c:	08005528 	stmdaeq	r0, {r3, r5, r8, sl, ip, lr}
 a40:	08005528 	stmdaeq	r0, {r3, r5, r8, sl, ip, lr}
 a44:	0800556a 	stmdaeq	r0, {r1, r3, r5, r6, r8, sl, ip, lr}
	...
 a50:	0800556c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, ip, lr}
 a54:	08005578 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, ip, lr}
 a58:	08005578 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, ip, lr}
 a5c:	0800557e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, ip, lr}
 a60:	08005580 	stmdaeq	r0, {r7, r8, sl, ip, lr}
 a64:	08005586 	stmdaeq	r0, {r1, r2, r7, r8, sl, ip, lr}
 a68:	08005588 	stmdaeq	r0, {r3, r7, r8, sl, ip, lr}
 a6c:	0800558e 	stmdaeq	r0, {r1, r2, r3, r7, r8, sl, ip, lr}
 a70:	08005590 	stmdaeq	r0, {r4, r7, r8, sl, ip, lr}
 a74:	08005596 	stmdaeq	r0, {r1, r2, r4, r7, r8, sl, ip, lr}
 a78:	08005598 	stmdaeq	r0, {r3, r4, r7, r8, sl, ip, lr}
 a7c:	080055a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip, lr}
 a80:	080055a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip, lr}
 a84:	080055b0 	stmdaeq	r0, {r4, r5, r7, r8, sl, ip, lr}
 a88:	080055b0 	stmdaeq	r0, {r4, r5, r7, r8, sl, ip, lr}
 a8c:	080055bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, ip, lr}
 a90:	080055bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, ip, lr}
 a94:	080055c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, ip, lr}
 a98:	080055c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, ip, lr}
 a9c:	080055d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, ip, lr}
 aa0:	080055d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, ip, lr}
 aa4:	080055e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, ip, lr}
 aa8:	080055e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, ip, lr}
 aac:	0800561c 	stmdaeq	r0, {r2, r3, r4, r9, sl, ip, lr}
 ab0:	0800561c 	stmdaeq	r0, {r2, r3, r4, r9, sl, ip, lr}
 ab4:	08005628 	stmdaeq	r0, {r3, r5, r9, sl, ip, lr}
	...
 ac0:	08005628 	stmdaeq	r0, {r3, r5, r9, sl, ip, lr}
 ac4:	0800563c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip, lr}
 ac8:	0800563c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip, lr}
 acc:	08005650 	stmdaeq	r0, {r4, r6, r9, sl, ip, lr}
 ad0:	08005650 	stmdaeq	r0, {r4, r6, r9, sl, ip, lr}
 ad4:	08005680 	stmdaeq	r0, {r7, r9, sl, ip, lr}
 ad8:	08005680 	stmdaeq	r0, {r7, r9, sl, ip, lr}
 adc:	080056b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, ip, lr}
 ae0:	080056b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, ip, lr}
 ae4:	080056d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip, lr}
 ae8:	080056d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip, lr}
 aec:	08005874 	stmdaeq	r0, {r2, r4, r5, r6, fp, ip, lr}
 af0:	08005874 	stmdaeq	r0, {r2, r4, r5, r6, fp, ip, lr}
 af4:	08005924 	stmdaeq	r0, {r2, r5, r8, fp, ip, lr}
 af8:	08005924 	stmdaeq	r0, {r2, r5, r8, fp, ip, lr}
 afc:	08005960 	stmdaeq	r0, {r5, r6, r8, fp, ip, lr}
 b00:	08005960 	stmdaeq	r0, {r5, r6, r8, fp, ip, lr}
 b04:	0800598c 	stmdaeq	r0, {r2, r3, r7, r8, fp, ip, lr}
 b08:	0800598c 	stmdaeq	r0, {r2, r3, r7, r8, fp, ip, lr}
 b0c:	08005a44 	stmdaeq	r0, {r2, r6, r9, fp, ip, lr}
 b10:	08005a44 	stmdaeq	r0, {r2, r6, r9, fp, ip, lr}
 b14:	08005e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, ip, lr}
	...
 b20:	08005e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, ip, lr}
 b24:	08005ede 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, fp, ip, lr}
 b28:	08005ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip, lr}
 b2c:	08005f36 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, sl, fp, ip, lr}
 b30:	08005f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip, lr}
 b34:	08005ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 b38:	00000001 	andeq	r0, r0, r1
 b3c:	00000001 	andeq	r0, r0, r1
 b40:	00000001 	andeq	r0, r0, r1
 b44:	00000001 	andeq	r0, r0, r1
 b48:	08005ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 b4c:	08006032 	stmdaeq	r0, {r1, r4, r5, sp, lr}
 b50:	08006034 	stmdaeq	r0, {r2, r4, r5, sp, lr}
 b54:	080060c6 	stmdaeq	r0, {r1, r2, r6, r7, sp, lr}
 b58:	080060c8 	stmdaeq	r0, {r3, r6, r7, sp, lr}
 b5c:	08006144 	stmdaeq	r0, {r2, r6, r8, sp, lr}
 b60:	08006144 	stmdaeq	r0, {r2, r6, r8, sp, lr}
 b64:	0800618e 	stmdaeq	r0, {r1, r2, r3, r7, r8, sp, lr}
 b68:	08006190 	stmdaeq	r0, {r4, r7, r8, sp, lr}
 b6c:	080061ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, sp, lr}
 b70:	080061b0 	stmdaeq	r0, {r4, r5, r7, r8, sp, lr}
 b74:	080064c0 	stmdaeq	r0, {r6, r7, sl, sp, lr}
 b78:	00000001 	andeq	r0, r0, r1
 b7c:	00000001 	andeq	r0, r0, r1
 b80:	080064c0 	stmdaeq	r0, {r6, r7, sl, sp, lr}
 b84:	080064fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sl, sp, lr}
 b88:	00000001 	andeq	r0, r0, r1
 b8c:	00000001 	andeq	r0, r0, r1
 b90:	00000001 	andeq	r0, r0, r1
 b94:	00000001 	andeq	r0, r0, r1
 b98:	00000001 	andeq	r0, r0, r1
 b9c:	00000001 	andeq	r0, r0, r1
 ba0:	080064fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, sp, lr}
 ba4:	08006686 	stmdaeq	r0, {r1, r2, r7, r9, sl, sp, lr}
 ba8:	00000001 	andeq	r0, r0, r1
 bac:	00000001 	andeq	r0, r0, r1
	...
 bb8:	080066ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, sp, lr}
 bbc:	080066e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, sp, lr}
	...
 bc8:	080066e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, sp, lr}
 bcc:	080066f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, sp, lr}
	...
 bd8:	00000001 	andeq	r0, r0, r1
 bdc:	00000001 	andeq	r0, r0, r1
 be0:	00000001 	andeq	r0, r0, r1
 be4:	00000001 	andeq	r0, r0, r1
	...
 bf0:	08006704 	stmdaeq	r0, {r2, r8, r9, sl, sp, lr}
 bf4:	08006708 	stmdaeq	r0, {r3, r8, r9, sl, sp, lr}
 bf8:	0800670a 	stmdaeq	r0, {r1, r3, r8, r9, sl, sp, lr}
 bfc:	08006734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, sp, lr}
	...
 c08:	00000001 	andeq	r0, r0, r1
 c0c:	00000001 	andeq	r0, r0, r1
 c10:	080066f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, sp, lr}
 c14:	08006768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, sp, lr}
	...
 c20:	00000001 	andeq	r0, r0, r1
 c24:	00000001 	andeq	r0, r0, r1
 c28:	08006768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, sp, lr}
 c2c:	080067cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, sp, lr}
	...
 c38:	080067cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, sp, lr}
 c3c:	080067e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, sp, lr}
	...
 c48:	080067e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, sp, lr}
 c4c:	080067f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, sp, lr}
	...
 c58:	080067f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, sp, lr}
 c5c:	08006808 	stmdaeq	r0, {r3, fp, sp, lr}
	...
 c68:	08006808 	stmdaeq	r0, {r3, fp, sp, lr}
 c6c:	0800683a 	stmdaeq	r0, {r1, r3, r4, r5, fp, sp, lr}
	...
 c78:	0800683a 	stmdaeq	r0, {r1, r3, r4, r5, fp, sp, lr}
 c7c:	0800685e 	stmdaeq	r0, {r1, r2, r3, r4, r6, fp, sp, lr}
	...
 c88:	08006860 	stmdaeq	r0, {r5, r6, fp, sp, lr}
 c8c:	08006870 	stmdaeq	r0, {r4, r5, r6, fp, sp, lr}
 c90:	00000001 	andeq	r0, r0, r1
 c94:	00000001 	andeq	r0, r0, r1
	...
 ca0:	08006876 	stmdaeq	r0, {r1, r2, r4, r5, r6, fp, sp, lr}
 ca4:	0800687c 	stmdaeq	r0, {r2, r3, r4, r5, r6, fp, sp, lr}
 ca8:	0800687e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, fp, sp, lr}
 cac:	08006884 	stmdaeq	r0, {r2, r7, fp, sp, lr}
	...
 cb8:	08006870 	stmdaeq	r0, {r4, r5, r6, fp, sp, lr}
 cbc:	080068f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp, sp, lr}
	...
 cc8:	0800694e 	stmdaeq	r0, {r1, r2, r3, r6, r8, fp, sp, lr}
 ccc:	08006974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp, sp, lr}
 cd0:	0800698a 	stmdaeq	r0, {r1, r3, r7, r8, fp, sp, lr}
 cd4:	0800699a 	stmdaeq	r0, {r1, r3, r4, r7, r8, fp, sp, lr}
	...
 ce0:	080068f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp, sp, lr}
 ce4:	080069a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, sp, lr}
	...
 cf0:	080069be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, fp, sp, lr}
 cf4:	08006a16 	stmdaeq	r0, {r1, r2, r4, r9, fp, sp, lr}
 cf8:	08006a26 	stmdaeq	r0, {r1, r2, r5, r9, fp, sp, lr}
 cfc:	08006a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, sp, lr}
	...
 d08:	00000001 	andeq	r0, r0, r1
 d0c:	00000001 	andeq	r0, r0, r1
 d10:	00000001 	andeq	r0, r0, r1
 d14:	00000001 	andeq	r0, r0, r1
	...
 d20:	080069a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, sp, lr}
 d24:	08006a56 	stmdaeq	r0, {r1, r2, r4, r6, r9, fp, sp, lr}
 d28:	00000001 	andeq	r0, r0, r1
 d2c:	00000001 	andeq	r0, r0, r1
 d30:	08006a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, sp, lr}
 d34:	08006c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, sp, lr}
	...
 d40:	08006d56 	stmdaeq	r0, {r1, r2, r4, r6, r8, sl, fp, sp, lr}
 d44:	08006d5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, fp, sp, lr}
 d48:	08006d5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}
 d4c:	08006d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, sp, lr}
 d50:	08006d7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, fp, sp, lr}
 d54:	08006d86 	stmdaeq	r0, {r1, r2, r7, r8, sl, fp, sp, lr}
 d58:	08006d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, sp, lr}
 d5c:	08006df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp, sp, lr}
 d60:	08006e04 	stmdaeq	r0, {r2, r9, sl, fp, sp, lr}
 d64:	08006e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, sp, lr}
 d68:	08006e4c 	stmdaeq	r0, {r2, r3, r6, r9, sl, fp, sp, lr}
 d6c:	08006e7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sl, fp, sp, lr}
 d70:	08006e80 	stmdaeq	r0, {r7, r9, sl, fp, sp, lr}
 d74:	08006ece 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, fp, sp, lr}
 d78:	08006ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, sp, lr}
 d7c:	08006f00 	stmdaeq	r0, {r8, r9, sl, fp, sp, lr}
	...
 d88:	08006c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, sp, lr}
 d8c:	08006d26 	stmdaeq	r0, {r1, r2, r5, r8, sl, fp, sp, lr}
 d90:	08006d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, sp, lr}
 d94:	08006f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, sp, lr}
	...
 da0:	08006f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, sp, lr}
 da4:	08006f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, sp, lr}
	...
 db0:	08006f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, sp, lr}
 db4:	08006fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, sp, lr}
	...
 dc0:	08006fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, sp, lr}
 dc4:	08006fda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, fp, sp, lr}
	...
 dd0:	08006fda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, fp, sp, lr}
 dd4:	08007026 	stmdaeq	r0, {r1, r2, r5, ip, sp, lr}
	...
 de0:	00000001 	andeq	r0, r0, r1
 de4:	00000001 	andeq	r0, r0, r1
 de8:	00000001 	andeq	r0, r0, r1
 dec:	00000001 	andeq	r0, r0, r1
	...
 df8:	08007026 	stmdaeq	r0, {r1, r2, r5, ip, sp, lr}
 dfc:	0800703a 	stmdaeq	r0, {r1, r3, r4, r5, ip, sp, lr}
	...
 e08:	0800703c 	stmdaeq	r0, {r2, r3, r4, r5, ip, sp, lr}
 e0c:	08007058 	stmdaeq	r0, {r3, r4, r6, ip, sp, lr}
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
       4:	01060002 	tsteq	r6, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
  {
    bitstatus = SET;
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
  }
  else
  {
    bitstatus = RESET;
      20:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
  }
  /* Return the flag status */
  return bitstatus;
      24:	2f767375 	svccs	0x00767375
}
      28:	41534454 	cmpmi	r3, r4, asr r4
      2c:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
      30:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
      34:	5349534d 	movtpl	r5, #37709	; 0x934d
      38:	334d432f 	movtcc	r4, #54063	; 0xd32f
      3c:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
      40:	53656369 	cmnpl	r5, #-1543503871	; 0xa4000001
      44:	6f707075 	svcvs	0x00707075
      48:	532f7472 			; <UNDEFINED> instruction: 0x532f7472
      4c:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xfffff0ac
      50:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      54:	00783031 	rsbseq	r3, r8, r1, lsr r0
      58:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      5c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      60:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      64:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      68:	2f62696c 	svccs	0x0062696c
      6c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
      70:	00656e69 	rsbeq	r6, r5, r9, ror #28
      74:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      78:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      7c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      80:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      84:	2f62696c 	svccs	0x0062696c
      88:	00737973 	rsbseq	r7, r3, r3, ror r9
      8c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffd8 <BootRAM+0xef70779>
      90:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
      94:	76737572 			; <UNDEFINED> instruction: 0x76737572
      98:	5344542f 	movtpl	r5, #17455	; 0x442f
      9c:	5f545341 	svcpl	0x00545341
      a0:	2f544f49 	svccs	0x00544f49
      a4:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
      a8:	4d432f53 	stclmi	15, cr2, [r3, #-332]	; 0xfffffeb4
      ac:	6f432f33 	svcvs	0x00432f33
      b0:	75536572 	ldrbvc	r6, [r3, #-1394]	; 0xfffffa8e
      b4:	726f7070 	rsbvc	r7, pc, #112	; 0x70
      b8:	73000074 	movwvc	r0, #116	; 0x74
      bc:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
      c0:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
      c4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
      c8:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
      cc:	00010063 	andeq	r0, r1, r3, rrx
      d0:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
      d4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
      d8:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
      dc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
      e0:	00020068 	andeq	r0, r2, r8, rrx
      e4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
      e8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
      ec:	0300682e 	movweq	r6, #2094	; 0x82e
      f0:	6f630000 	svcvs	0x00630000
      f4:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
      f8:	682e336d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
      fc:	00000400 	andeq	r0, r0, r0, lsl #8
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }
  
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
     100:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     104:	30316632 	eorscc	r6, r1, r2, lsr r6
     108:	00682e78 	rsbeq	r2, r8, r8, ror lr
  {
    /* Set the default values */
    i2sdiv = 2;
     10c:	00000001 	andeq	r0, r0, r1
    i2sodd = 0;
     110:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
     114:	03080001 	movweq	r0, #32769	; 0x8001
     118:	310101d4 	ldrdcc	r0, [r1, -r4]
     11c:	69856c6a 	stmibvs	r5, {r1, r3, r5, r6, sl, fp, sp, lr}
     120:	03661303 	cmneq	r6, #201326592	; 0xc000000
     124:	4c324a0b 	ldcmi	10, cr4, [r2], #-44	; 0xffffffd4
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     128:	00070221 	andeq	r0, r7, r1, lsr #4
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
     12c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     130:	00000002 	andeq	r0, r0, r2
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
     134:	02b20300 	adcseq	r0, r2, #0, 6
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
     138:	0b033d01 	bleq	cf544 <_Min_Stack_Size+0xcf344>
     13c:	3d775a66 	vldmdbcc	r7!, {s11-s112}

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     140:	59243d22 	stmdbpl	r4!, {r1, r5, r8, sl, fp, ip, sp}
     144:	033f4c5b 	teqeq	pc, #23296	; 0x5b00
     148:	7868740a 	stmdavc	r8!, {r1, r3, sl, ip, sp, lr}^
     14c:	31662b03 	cmncc	r6, r3, lsl #22
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;   
     150:	7592253d 	ldrvc	r2, [r2, #1341]	; 0x53d
     154:	01001002 	tsteq	r0, r2
}
     158:	02050001 	andeq	r0, r5, #1
     15c:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
     160:	0103a303 	tsteq	r3, r3, lsl #6
         break;
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
         *(uint16_t*) arg = getSn_KPALVTR(sn);
         break;
     164:	332e0d03 			; <UNDEFINED> instruction: 0x332e0d03
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     168:	01000102 	tsteq	r0, r2, lsl #2
     16c:	02050001 	andeq	r0, r5, #1
     170:	08000180 	stmdaeq	r0, {r7, r8}
     174:	0107dc03 	tsteq	r7, r3, lsl #24
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     178:	02004e3d 	andeq	r4, r0, #976	; 0x3d0
     17c:	006b0204 	rsbeq	r0, fp, r4, lsl #4
     180:	59020402 	stmdbpl	r2, {r1, sl}
     184:	02040200 	andeq	r0, r4, #0, 4
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
     188:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     18c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     190:	3140684c 	cmpcc	r0, ip, asr #16
     194:	6a67693f 	bvs	19da698 <_Min_Stack_Size+0x19da498>
     198:	1a034d4d 	bne	d36d4 <_Min_Stack_Size+0xd34d4>
     19c:	696b6866 	stmdbvs	fp!, {r1, r2, r5, r6, fp, sp, lr}^
         break;
     1a0:	01040200 	mrseq	r0, R12_usr
      case SO_REMAINSIZE:
         if(getSn_MR(sn) == Sn_MR_TCP)
     1a4:	6b062006 	blvs	1881c4 <_Min_Stack_Size+0x187fc4>
     1a8:	02006967 	andeq	r6, r0, #1687552	; 0x19c000
     1ac:	20060104 	andcs	r0, r6, r4, lsl #2
     1b0:	66090306 	strvs	r0, [r9], -r6, lsl #6
     1b4:	01000a02 	tsteq	r0, r2, lsl #20
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1b8:	00034601 	andeq	r4, r3, r1, lsl #12
     1bc:	27000200 	strcs	r0, [r0, -r0, lsl #4]
     1c0:	02000001 	andeq	r0, r0, #1
     1c4:	0d0efb01 	vstreq	d15, [lr, #-4]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
     1c8:	01010100 	mrseq	r0, (UNDEF: 17)
     1cc:	00000001 	andeq	r0, r0, r1
     1d0:	01000001 	tsteq	r0, r1
         break;
     1d4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 120 <_Min_Heap_Size+0x120>
      case SO_PACKINFO:
         CHECK_SOCKMODE(Sn_MR_TCP);
     1d8:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     1dc:	76737572 			; <UNDEFINED> instruction: 0x76737572
     1e0:	5344542f 	movtpl	r5, #17455	; 0x442f
     1e4:	5f545341 	svcpl	0x00545341
     1e8:	2f544f49 	svccs	0x00544f49
     1ec:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     1f0:	2f007265 	svccs	0x00007265
         *(uint8_t*)arg = sock_pack_info[sn];
     1f4:	2f727375 	svccs	0x00727375
     1f8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
         break;
     1fc:	2f656475 	svccs	0x00656475
      default:
         return SOCKERR_SOCKOPT;
     200:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
   }
   return SOCK_OK;
     204:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 68 <_Min_Heap_Size+0x68>
}
     208:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     20c:	2f00656e 	svccs	0x0000656e
     210:	2f727375 	svccs	0x00727375
     214:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     218:	2f656475 	svccs	0x00656475
     21c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     220:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
     224:	2f007379 	svccs	0x00007379
     228:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
       fixed_header[1] = fixed_header[1] | 0x80;
       // second byte is number of 128s
       fixed_header[2] = remainLen / 128;
   }

	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     22c:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
     230:	2f767375 	svccs	0x00767375
     234:	41534454 	cmpmi	r3, r4, asr r4
     238:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     23c:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
     240:	5349534d 	movtpl	r5, #37709	; 0x934d
     244:	334d432f 	movtcc	r4, #54063	; 0xd32f
     248:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
     24c:	53656369 	cmnpl	r5, #-1543503871	; 0xa4000001
	memset(packet, 0, sizeof(packet));
     250:	6f707075 	svcvs	0x00707075
     254:	532f7472 			; <UNDEFINED> instruction: 0x532f7472
     258:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xfffff0ac
	memcpy(packet, fixed_header, sizeof(fixed_header));
     25c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     260:	00783031 	rsbseq	r3, r8, r1, lsr r0
     264:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1b0 <_Min_Heap_Size+0x1b0>
     268:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	76737572 			; <UNDEFINED> instruction: 0x76737572
     270:	5344542f 	movtpl	r5, #17455	; 0x442f
     274:	5f545341 	svcpl	0x00545341
     278:	2f544f49 	svccs	0x00544f49
     27c:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     280:	4d432f53 	stclmi	15, cr2, [r3, #-332]	; 0xfffffeb4
     284:	6f432f33 	svcvs	0x00432f33
     288:	75536572 	ldrbvc	r6, [r3, #-1394]	; 0xfffffa8e
     28c:	726f7070 	rsbvc	r7, pc, #112	; 0x70
     290:	4f000074 	svcmi	0x00000074
     294:	2e44454c 	cdpcs	5, 4, cr4, cr4, cr12, {2}

	// Send the packet
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     298:	00010063 	andeq	r0, r1, r3, rrx
     29c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     2a0:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     2a4:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     2a8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     2ac:	00020068 	andeq	r0, r2, r8, rrx
		return -1;
     2b0:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
	}

	return 1;
     2b4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     2b8:	0300682e 	movweq	r6, #2094	; 0x82e
}
     2bc:	74730000 	ldrbtvc	r0, [r3], #-0
     2c0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     2c4:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
     2c8:	00040068 	andeq	r0, r4, r8, rrx
     2cc:	726f6300 	rsbvc	r6, pc, #0, 6
     2d0:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     2d4:	00682e33 	rsbeq	r2, r8, r3, lsr lr
     2d8:	6f000005 	svcvs	0x00000005
     2dc:	6664656c 	strbtvs	r6, [r4], -ip, ror #10
     2e0:	2e746e6f 	cdpcs	14, 7, cr6, cr4, cr15, {3}
     2e4:	00010068 	andeq	r0, r1, r8, rrx
     2e8:	05000000 	streq	r0, [r0, #-0]
     2ec:	00028002 	andeq	r8, r2, r2
     2f0:	01120308 	tsteq	r2, r8, lsl #6
     2f4:	02004d4d 	andeq	r4, r0, #4928	; 0x1340
     2f8:	20060104 	andcs	r0, r6, r4, lsl #2
     2fc:	005a7606 	subseq	r7, sl, r6, lsl #12
     300:	06010402 	streq	r0, [r1], -r2, lsl #8
     304:	3d760620 	ldclcc	6, cr0, [r6, #-128]!	; 0xffffff80
     308:	02004c5a 	andeq	r4, r0, #23040	; 0x5a00
     30c:	20060104 	andcs	r0, r6, r4, lsl #2
     310:	0b027606 	bleq	9db30 <_Min_Stack_Size+0x9d930>
     314:	00010100 	andeq	r0, r1, r0, lsl #2
     318:	02f80205 	rscseq	r0, r8, #1342177280	; 0x50000000
     31c:	28030800 	stmdacs	r3, {fp}
     320:	853d5c01 	ldrhi	r5, [sp, #-3073]!	; 0xfffff3ff
     324:	01040200 	mrseq	r0, R12_usr
     328:	02002006 	andeq	r2, r0, #6
     32c:	70060204 	andvc	r0, r6, r4, lsl #4
     330:	01040200 	mrseq	r0, R12_usr
     334:	51063c06 	tstpl	r6, r6, lsl #24
     338:	01040200 	mrseq	r0, R12_usr
     33c:	76062006 	strvc	r2, [r6], -r6
     340:	01000902 	tsteq	r0, r2, lsl #18
     344:	02050001 	andeq	r0, r5, #1
     348:	08000358 	stmdaeq	r0, {r3, r4, r6, r8, r9}
     34c:	5b013803 	blpl	4e360 <_Min_Stack_Size+0x4e160>
     350:	753e3e4c 	ldrvc	r3, [lr, #-3660]!	; 0xfffff1b4
     354:	01040200 	mrseq	r0, R12_usr
     358:	76062006 	strvc	r2, [r6], -r6
     35c:	5a3e3d68 	bpl	f8f904 <_Min_Stack_Size+0xf8f704>
     360:	01040200 	mrseq	r0, R12_usr
     364:	02002006 	andeq	r2, r0, #6
     368:	70060204 	andvc	r0, r6, r4, lsl #4
     36c:	01040200 	mrseq	r0, R12_usr
     370:	02003c06 	andeq	r3, r0, #1536	; 0x600
     374:	03060204 	movweq	r0, #25092	; 0x6204
     378:	02004a76 	andeq	r4, r0, #483328	; 0x76000
     37c:	3c060104 	stfccs	f0, [r6], {4}
     380:	3c120306 	ldccc	3, cr0, [r2], {6}
     384:	01040200 	mrseq	r0, R12_usr
     388:	76062006 	strvc	r2, [r6], -r6
     38c:	01000c02 	tsteq	r0, r2, lsl #24
     390:	02050001 	andeq	r0, r5, #1
     394:	00000000 	andeq	r0, r0, r0
     398:	0100d403 	tsteq	r0, r3, lsl #8
     39c:	753e4c5b 	ldrvc	r4, [lr, #-3163]!	; 0xfffff3a5
     3a0:	01040200 	mrseq	r0, R12_usr
     3a4:	76062006 	strvc	r2, [r6], -r6
     3a8:	4c3e3d68 	ldcmi	13, cr3, [lr], #-416	; 0xfffffe60
     3ac:	01040200 	mrseq	r0, R12_usr
     3b0:	02002006 	andeq	r2, r0, #6
     3b4:	70060204 	andvc	r0, r6, r4, lsl #4
     3b8:	01040200 	mrseq	r0, R12_usr
     3bc:	51063c06 	tstpl	r6, r6, lsl #24
     3c0:	01040200 	mrseq	r0, R12_usr
     3c4:	76062006 	strvc	r2, [r6], -r6
     3c8:	01000c02 	tsteq	r0, r2, lsl #24
     3cc:	02050001 	andeq	r0, r5, #1
     3d0:	08000408 	stmdaeq	r0, {r3, sl}
     3d4:	0100ed03 	tsteq	r0, r3, lsl #26
     3d8:	02007584 	andeq	r7, r0, #132, 10	; 0x21000000
     3dc:	20060104 	andcs	r0, r6, r4, lsl #2
     3e0:	009f7506 	addseq	r7, pc, r6, lsl #10
     3e4:	06010402 	streq	r0, [r1], -r2, lsl #8
     3e8:	83750620 	cmnhi	r5, #32, 12	; 0x2000000
     3ec:	01040200 	mrseq	r0, R12_usr
     3f0:	76062006 	strvc	r2, [r6], -r6
     3f4:	01000902 	tsteq	r0, r2, lsl #18
     3f8:	02050001 	andeq	r0, r5, #1
     3fc:	0800048c 	stmdaeq	r0, {r2, r3, r7, sl}
     400:	0100f903 	tsteq	r0, r3, lsl #18	; <UNPREDICTABLE>
     404:	913e2fe5 	teqls	lr, r5, ror #31
     408:	673e3e4c 	ldrvs	r3, [lr, -ip, asr #28]!
     40c:	02003e3e 	andeq	r3, r0, #992	; 0x3e0
     410:	4a060104 	bmi	180828 <_Min_Stack_Size+0x180628>
     414:	02040200 	andeq	r0, r4, #0, 4
     418:	04020090 	streq	r0, [r2], #-144	; 0xffffff70
     41c:	02006604 	andeq	r6, r0, #4, 12	; 0x400000
     420:	4b060404 	blmi	181438 <_Min_Stack_Size+0x181238>
     424:	01040200 	mrseq	r0, R12_usr
     428:	02002006 	andeq	r2, r0, #6
     42c:	71060204 	tstvc	r6, r4, lsl #4
     430:	01040200 	mrseq	r0, R12_usr
     434:	42063c06 	andmi	r3, r6, #1536	; 0x600
     438:	3d3e833d 	ldccc	3, cr8, [lr, #-244]!	; 0xffffff0c
     43c:	040200ad 	streq	r0, [r2], #-173	; 0xffffff53
     440:	00200601 	eoreq	r0, r0, r1, lsl #12
     444:	06020402 	streq	r0, [r2], -r2, lsl #8
     448:	04020072 	streq	r0, [r2], #-114	; 0xffffff8e
     44c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     450:	3d673d4f 	stclcc	13, cr3, [r7, #-316]!	; 0xfffffec4
     454:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     458:	004a0601 	subeq	r0, sl, r1, lsl #12
     45c:	c8020402 	stmdagt	r2, {r1, sl}
     460:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     464:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     468:	004b0604 	subeq	r0, fp, r4, lsl #12
     46c:	06010402 	streq	r0, [r1], -r2, lsl #8
     470:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
     474:	00720602 	rsbseq	r0, r2, r2, lsl #12
     478:	06010402 	streq	r0, [r1], -r2, lsl #8
     47c:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
     480:	84420601 	strbhi	r0, [r2], #-1537	; 0xfffff9ff
     484:	01000d02 	tsteq	r0, r2, lsl #26
     488:	02050001 	andeq	r0, r5, #1
     48c:	08000634 	stmdaeq	r0, {r2, r4, r5, r9, sl}
     490:	0101a403 	tsteq	r1, r3, lsl #8
     494:	c9212fad 	stmdbgt	r1!, {r0, r2, r3, r5, r7, r8, r9, sl, fp, sp}
     498:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
     49c:	3c060104 	stfccs	f0, [r6], {4}
     4a0:	003d6806 	eorseq	r6, sp, r6, lsl #16
     4a4:	06010402 	streq	r0, [r1], -r2, lsl #8
     4a8:	035a063c 	cmpeq	sl, #60, 12	; 0x3c00000
     4ac:	0c033c77 	stceq	12, cr3, [r3], {119}	; 0x77
     4b0:	00030266 	andeq	r0, r3, r6, ror #4
     4b4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     4b8:	00000002 	andeq	r0, r0, r2
     4bc:	01b50300 			; <UNDEFINED> instruction: 0x01b50300
     4c0:	0030e501 	eorseq	lr, r0, r1, lsl #10
     4c4:	06010402 	streq	r0, [r1], -r2, lsl #8
     4c8:	594b0666 	stmdbpl	fp, {r1, r2, r5, r6, r9, sl}^
     4cc:	3d683d3e 	stclcc	13, cr3, [r8, #-248]!	; 0xffffff08
     4d0:	02009f3d 	andeq	r9, r0, #61, 30	; 0xf4
     4d4:	20060104 	andcs	r0, r6, r4, lsl #2
     4d8:	02040200 	andeq	r0, r4, #0, 4
     4dc:	02007206 	andeq	r7, r0, #1610612736	; 0x60000000
     4e0:	3c060104 	stfccs	f0, [r6], {4}
     4e4:	02004f06 	andeq	r4, r0, #6, 30
     4e8:	20060104 	andcs	r0, r6, r4, lsl #2
     4ec:	02040200 	andeq	r0, r4, #0, 4
     4f0:	74750306 	ldrbtvc	r0, [r5], #-774	; 0xfffffcfa
     4f4:	01040200 	mrseq	r0, R12_usr
     4f8:	03063c06 	movweq	r3, #27654	; 0x6c06
     4fc:	0a024a0e 	beq	92d3c <_Min_Stack_Size+0x92b3c>
     500:	e8010100 	stmda	r1, {r8}
     504:	02000004 	andeq	r0, r0, #4
     508:	0000a100 	andeq	sl, r0, r0, lsl #2
     50c:	fb010200 	blx	40d16 <_Min_Stack_Size+0x40b16>
     510:	01000d0e 	tsteq	r0, lr, lsl #26
     514:	00010101 	andeq	r0, r1, r1, lsl #2
     518:	00010000 	andeq	r0, r1, r0
     51c:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     520:	2f656d6f 	svccs	0x00656d6f
     524:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
     528:	542f7673 	strtpl	r7, [pc], #-1651	; 530 <_Min_Stack_Size+0x330>
     52c:	53415344 	movtpl	r5, #4932	; 0x1344
     530:	4f495f54 	svcmi	0x00495f54
     534:	74452f54 	strbvc	r2, [r5], #-3924	; 0xfffff0ac
     538:	6e726568 	cdpvs	5, 7, cr6, cr2, cr8, {3}
     53c:	2f007465 	svccs	0x00007465
     540:	2f727375 	svccs	0x00727375
     544:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     548:	2f656475 	svccs	0x00656475
     54c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     550:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 3b4 <_Min_Stack_Size+0x1b4>
     554:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     558:	2f00656e 	svccs	0x0000656e
     55c:	2f727375 	svccs	0x00727375
     560:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     564:	2f656475 	svccs	0x00656475
     568:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     56c:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
     570:	00007379 	andeq	r7, r0, r9, ror r3
     574:	6b636f73 	blvs	18dc348 <_Min_Stack_Size+0x18dc148>
     578:	632e7465 			; <UNDEFINED> instruction: 0x632e7465
     57c:	00000100 	andeq	r0, r0, r0, lsl #2
     580:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     584:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     588:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     58c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     590:	00000200 	andeq	r0, r0, r0, lsl #4
     594:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     598:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     59c:	00030068 	andeq	r0, r3, r8, rrx
     5a0:	636f7300 	cmnvs	pc, #0, 6
     5a4:	2e74656b 	cdpcs	5, 7, cr6, cr4, cr11, {3}
     5a8:	00010068 	andeq	r0, r1, r8, rrx
     5ac:	05000000 	streq	r0, [r0, #-0]
     5b0:	0006b802 	andeq	fp, r6, r2, lsl #16
     5b4:	00d00308 	sbcseq	r0, r0, r8, lsl #6
     5b8:	0200e501 	andeq	lr, r0, #4194304	; 0x400000
     5bc:	3c060104 	stfccs	f0, [r6], {4}
     5c0:	0c032f06 	stceq	15, cr2, [r3], {6}
     5c4:	2e790374 	mrccs	3, 3, r0, cr9, cr4, {3}
     5c8:	00200903 	eoreq	r0, r0, r3, lsl #18
     5cc:	06010402 	streq	r0, [r1], -r2, lsl #8
     5d0:	3e330658 	mrccc	6, 1, r0, cr3, cr8, {2}
     5d4:	03581203 	cmpeq	r8, #805306368	; 0x30000000
     5d8:	02002071 	andeq	r2, r0, #113	; 0x71
     5dc:	58060104 	stmdapl	r6, {r2, r8}
     5e0:	5a222f06 	bpl	88c200 <_Min_Stack_Size+0x88c000>
     5e4:	01040200 	mrseq	r0, R12_usr
     5e8:	31064a06 	tstcc	r6, r6, lsl #20
     5ec:	0402005a 	streq	r0, [r2], #-90	; 0xffffffa6
     5f0:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     5f4:	084b2531 	stmdaeq	fp, {r0, r4, r5, r8, sl, sp}^
     5f8:	00753e13 	rsbseq	r3, r5, r3, lsl lr
     5fc:	06010402 	streq	r0, [r1], -r2, lsl #8
     600:	084c0666 	stmdaeq	ip, {r1, r2, r5, r6, r9, sl}^
     604:	02009fad 	andeq	r9, r0, #692	; 0x2b4
     608:	20060104 	andcs	r0, r6, r4, lsl #2
     60c:	e5e5bc06 	strb	fp, [r5, #3078]!	; 0xc06
     610:	004b59e5 	subeq	r5, fp, r5, ror #19
     614:	06010402 	streq	r0, [r1], -r2, lsl #8
     618:	2fbb0620 	svccs	0x00bb0620
     61c:	01000e02 	tsteq	r0, r2, lsl #28
     620:	02050001 	andeq	r0, r5, #1
     624:	080008b0 	stmdaeq	r0, {r4, r5, r7, fp}
     628:	01019103 	tsteq	r1, r3, lsl #2
     62c:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
     630:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     634:	0200a030 	andeq	sl, r0, #48	; 0x30
     638:	20060104 	andcs	r0, r6, r4, lsl #2
     63c:	e59fbc06 	ldr	fp, [pc, #3078]	; 124a <_Min_Stack_Size+0x104a>
     640:	02004b59 	andeq	r4, r0, #91136	; 0x16400
     644:	20060104 	andcs	r0, r6, r4, lsl #2
     648:	022fbb06 	eoreq	fp, pc, #6144	; 0x1800
     64c:	0101000a 	tsteq	r1, sl
     650:	00020500 	andeq	r0, r2, r0, lsl #10
     654:	03000000 	movweq	r0, #0
     658:	590101a1 	stmdbpl	r1, {r0, r5, r7, r8}
     65c:	01040200 	mrseq	r0, R12_usr
     660:	2f063c06 	svccs	0x00063c06
     664:	01040200 	mrseq	r0, R12_usr
     668:	2f06ba06 	svccs	0x0006ba06
     66c:	01040200 	mrseq	r0, R12_usr
     670:	2f06ba06 	svccs	0x0006ba06
     674:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
     678:	06200601 	strteq	r0, [r0], -r1, lsl #12
     67c:	4bbc22bb 	blmi	fef09170 <BootRAM+0xde79911>
     680:	022fc229 	eoreq	ip, pc, #-1879048190	; 0x90000002
     684:	01010004 	tsteq	r1, r4
     688:	68020500 	stmdavs	r2, {r8, sl}
     68c:	03080009 	movweq	r0, #32777	; 0x8009
     690:	830101b4 	movwhi	r0, #4532	; 0x11b4
     694:	01040200 	mrseq	r0, R12_usr
     698:	2f063c06 	svccs	0x00063c06
     69c:	01040200 	mrseq	r0, R12_usr
     6a0:	2f06ba06 	svccs	0x0006ba06
     6a4:	01040200 	mrseq	r0, R12_usr
     6a8:	2f06ba06 	svccs	0x0006ba06
     6ac:	02040200 	andeq	r0, r4, #0, 4
     6b0:	02005806 	andeq	r5, r0, #393216	; 0x60000
     6b4:	064a0304 	strbeq	r0, [sl], -r4, lsl #6
     6b8:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     6bc:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     6c0:	b008ad2f 	andlt	sl, r8, pc, lsr #26
     6c4:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
     6c8:	06200601 	strteq	r0, [r0], -r1, lsl #12
     6cc:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
     6d0:	069e0601 	ldreq	r0, [lr], r1, lsl #12
     6d4:	a2d8222f 	sbcsge	r2, r8, #-268435454	; 0xf0000002
     6d8:	032e7803 			; <UNDEFINED> instruction: 0x032e7803
     6dc:	022fba0f 	eoreq	fp, pc, #61440	; 0xf000
     6e0:	01010006 	tsteq	r1, r6
     6e4:	00020500 	andeq	r0, r2, r0, lsl #10
     6e8:	03000000 	movweq	r0, #0
     6ec:	590101d5 	stmdbpl	r1, {r0, r2, r4, r6, r7, r8}
     6f0:	01040200 	mrseq	r0, R12_usr
     6f4:	2f063c06 	svccs	0x00063c06
     6f8:	01040200 	mrseq	r0, R12_usr
     6fc:	2f06ba06 	svccs	0x0006ba06
     700:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
     704:	06200601 	strteq	r0, [r0], -r1, lsl #12
     708:	0200e5bb 	andeq	lr, r0, #784334848	; 0x2ec00000
     70c:	9e060104 	adflss	f0, f6, f4
     710:	d8222f06 	stmdale	r2!, {r1, r2, r8, r9, sl, fp, sp}
     714:	2fc2294b 	svccs	0x00c2294b
     718:	01000902 	tsteq	r0, r2, lsl #18
     71c:	02050001 	andeq	r0, r5, #1
     720:	08000acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp}
     724:	0101e903 	tsteq	r1, r3, lsl #18
     728:	00302f83 	eorseq	r2, r0, r3, lsl #31
     72c:	06010402 	streq	r0, [r1], -r2, lsl #8
     730:	003d063c 	eorseq	r0, sp, ip, lsr r6
     734:	06010402 	streq	r0, [r1], -r2, lsl #8
     738:	003d06ba 	ldrhteq	r0, [sp], -sl
     73c:	06010402 	streq	r0, [r1], -r2, lsl #8
     740:	ad3d063c 	ldcge	6, cr0, [sp, #-240]!	; 0xffffff10
     744:	01040200 	mrseq	r0, R12_usr
     748:	02003c06 	andeq	r3, r0, #1536	; 0x600
     74c:	063c0204 	ldrteq	r0, [ip], -r4, lsl #4
     750:	5ac9a03d 	bpl	ff26884c <BootRAM+0xe1d8fed>
     754:	f49e0903 			; <UNDEFINED> instruction: 0xf49e0903
     758:	303e4b5a 	eorscc	r4, lr, sl, asr fp
     75c:	040200c9 	streq	r0, [r2], #-201	; 0xffffff37
     760:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     764:	00ad6731 	adceq	r6, sp, r1, lsr r7
     768:	06010402 	streq	r0, [r1], -r2, lsl #8
     76c:	4b3e063c 	blmi	f82064 <_Min_Stack_Size+0xf81e64>
     770:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
     774:	009e0601 	addseq	r0, lr, r1, lsl #12
     778:	4a020402 	bmi	81788 <_Min_Stack_Size+0x81588>
     77c:	785a2f06 	ldmdavc	sl, {r1, r2, r8, r9, sl, fp, sp}^
     780:	207903a0 	rsbscs	r0, r9, r0, lsr #7
     784:	01040200 	mrseq	r0, R12_usr
     788:	21c9bb27 	biccs	fp, r9, r7, lsr #22
     78c:	01000802 	tsteq	r0, r2, lsl #16
     790:	02050001 	andeq	r0, r5, #1
     794:	08000cc0 	stmdaeq	r0, {r6, r7, sl, fp}
     798:	0102a403 	tsteq	r2, r3, lsl #8
     79c:	002f2f83 	eoreq	r2, pc, r3, lsl #31
     7a0:	06010402 	streq	r0, [r1], -r2, lsl #8
     7a4:	003d063c 	eorseq	r0, sp, ip, lsr r6
     7a8:	06010402 	streq	r0, [r1], -r2, lsl #8
     7ac:	003d06ba 	ldrhteq	r0, [sp], -sl
     7b0:	06010402 	streq	r0, [r1], -r2, lsl #8
     7b4:	c93e063c 	ldmdbgt	lr!, {r2, r3, r4, r5, r9, sl}
     7b8:	01040200 	mrseq	r0, R12_usr
     7bc:	31064a06 	tstcc	r6, r6, lsl #20
     7c0:	3e3ead67 	cdpcc	13, 3, cr10, cr14, cr7, {3}
     7c4:	4b30084b 	blmi	c028f8 <_Min_Stack_Size+0xc026f8>
     7c8:	003f4b41 	eorseq	r4, pc, r1, asr #22
     7cc:	06010402 	streq	r0, [r1], -r2, lsl #8
     7d0:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     7d4:	2f063c02 	svccs	0x00063c02
     7d8:	0200214b 	andeq	r2, r0, #-1073741806	; 0xc0000012
     7dc:	4a060104 	bmi	180bf4 <_Min_Stack_Size+0x1809f4>
     7e0:	9f752f06 	svcls	0x00752f06
     7e4:	01040200 	mrseq	r0, R12_usr
     7e8:	bb062006 	bllt	188808 <_Min_Stack_Size+0x188608>
     7ec:	00070221 	andeq	r0, r7, r1, lsr #4
     7f0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     7f4:	000e2c02 	andeq	r2, lr, r2, lsl #24
     7f8:	02cd0308 	sbceq	r0, sp, #8, 6	; 0x20000000
     7fc:	2f2f9101 	svccs	0x002f9101
     800:	01040200 	mrseq	r0, R12_usr
     804:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
     808:	00243adc 	ldrdeq	r3, [r4], -ip	; <UNPREDICTABLE>
     80c:	06010402 	streq	r0, [r1], -r2, lsl #8
     810:	003d063c 	eorseq	r0, sp, ip, lsr r6
     814:	06010402 	streq	r0, [r1], -r2, lsl #8
     818:	003d064a 	eorseq	r0, sp, sl, asr #12
     81c:	06010402 	streq	r0, [r1], -r2, lsl #8
     820:	ad3d063c 	ldcge	6, cr0, [sp, #-240]!	; 0xffffff10
     824:	01040200 	mrseq	r0, R12_usr
     828:	02003c06 	andeq	r3, r0, #1536	; 0x600
     82c:	063c0204 	ldrteq	r0, [ip], -r4, lsl #4
     830:	ad08ad3e 	stcge	13, cr10, [r8, #-248]	; 0xffffff08
     834:	040200c9 	streq	r0, [r2], #-201	; 0xffffff37
     838:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     83c:	02006731 	andeq	r6, r0, #12845056	; 0xc40000
     840:	ba060104 	blt	180c58 <_Min_Stack_Size+0x180a58>
     844:	02003d06 	andeq	r3, r0, #384	; 0x180
     848:	9e060104 	adflss	f0, f6, f4
     84c:	02040200 	andeq	r0, r4, #0, 4
     850:	5a2f064a 	bpl	bc2180 <_Min_Stack_Size+0xbc1f80>
     854:	7703a07a 	smlsdxvc	r3, sl, r0, sl
     858:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
     85c:	20090301 	andcs	r0, r9, r1, lsl #6
     860:	9f5ac9c0 	svcls	0x005ac9c0
     864:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     868:	9f5a2e79 	svcls	0x005a2e79
     86c:	0702223f 	smladxeq	r2, pc, r2, r2	; <UNPREDICTABLE>
     870:	00010100 	andeq	r0, r1, r0, lsl #2
     874:	103c0205 	eorsne	r0, ip, r5, lsl #4
     878:	8d030800 	stchi	8, cr0, [r3, #-0]
     87c:	30930103 	addscc	r0, r3, r3, lsl #2
     880:	01040200 	mrseq	r0, R12_usr
     884:	3e063c06 	cdpcc	12, 0, cr3, cr6, cr6, {0}
     888:	03f20b03 	mvnseq	r0, #3072	; 0xc00
     88c:	09033c79 	stmdbeq	r3, {r0, r3, r4, r5, r6, sl, fp, ip, sp}
     890:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
     894:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     898:	00676a3d 	rsbeq	r6, r7, sp, lsr sl
     89c:	06010402 	streq	r0, [r1], -r2, lsl #8
     8a0:	003d06ba 	ldrhteq	r0, [sp], -sl
     8a4:	06010402 	streq	r0, [r1], -r2, lsl #8
     8a8:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     8ac:	2f063c02 	svccs	0x00063c02
     8b0:	854b224b 	strbhi	r2, [fp, #-587]	; 0xfffffdb5
     8b4:	009f8368 	addseq	r8, pc, r8, ror #6
     8b8:	06010402 	streq	r0, [r1], -r2, lsl #8
     8bc:	3dbc0620 	ldccc	6, cr0, [ip, #128]!	; 0x80
     8c0:	4b4b4b4b 	blmi	12d35f4 <_Min_Stack_Size+0x12d33f4>
     8c4:	4cd7679f 	ldclmi	7, cr6, [r7], {159}	; 0x9f
     8c8:	01040200 	mrseq	r0, R12_usr
     8cc:	3d067406 	cfstrscc	mvf7, [r6, #-24]	; 0xffffffe8
     8d0:	6822755c 	stmdavs	r2!, {r2, r3, r4, r6, r8, sl, ip, sp, lr}
     8d4:	02009f83 	andeq	r9, r0, #524	; 0x20c
     8d8:	20060104 	andcs	r0, r6, r4, lsl #2
     8dc:	d767bc06 	strble	fp, [r7, -r6, lsl #24]!
     8e0:	4c3e4b84 	ldcmi	11, cr4, [lr], #-528	; 0xfffffdf0
     8e4:	01040200 	mrseq	r0, R12_usr
     8e8:	3d067406 	cfstrscc	mvf7, [r6, #-24]	; 0xffffffe8
     8ec:	19037559 	stmdbne	r3, {r0, r3, r4, r6, r8, sl, ip, sp, lr}
     8f0:	22596720 	subscs	r6, r9, #32, 14	; 0x800000
     8f4:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
     8f8:	06200601 	strteq	r0, [r0], -r1, lsl #12
     8fc:	0200adbb 	andeq	sl, r0, #11968	; 0x2ec0
     900:	66060104 	strvs	r0, [r6], -r4, lsl #2
     904:	02009106 	andeq	r9, r0, #-2147483647	; 0x80000001
     908:	02210104 	eoreq	r0, r1, #4, 2
     90c:	0101000a 	tsteq	r1, sl
     910:	40020500 	andmi	r0, r2, r0, lsl #10
     914:	03080013 	movweq	r0, #32787	; 0x8013
     918:	83010481 	movwhi	r0, #5249	; 0x1481
     91c:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     920:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     924:	3d69082f 	stclcc	8, cr0, [r9, #-188]!	; 0xffffff44
     928:	01040200 	mrseq	r0, R12_usr
     92c:	d7063c06 	strle	r3, [r6, -r6, lsl #24]
     930:	01040200 	mrseq	r0, R12_usr
     934:	f3063c06 			; <UNDEFINED> instruction: 0xf3063c06
     938:	22bb222f 	adcscs	r2, fp, #-268435454	; 0xf0000002
     93c:	22e522e5 	rsccs	r2, r5, #1342177294	; 0x5000000e
     940:	01040200 	mrseq	r0, R12_usr
     944:	2f064a06 	svccs	0x00064a06
     948:	22e522f3 	rsccs	r2, r5, #805306383	; 0x3000000f
     94c:	01040200 	mrseq	r0, R12_usr
     950:	2f064a06 	svccs	0x00064a06
     954:	30e622f3 	strdcc	r2, [r6], #35	; 0x23	; <UNPREDICTABLE>
     958:	0006022f 	andeq	r0, r6, pc, lsr #4
     95c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     960:	00000002 	andeq	r0, r0, r2
     964:	04a90300 	strteq	r0, [r9], #768	; 0x300
     968:	02008401 	andeq	r8, r0, #16777216	; 0x1000000
     96c:	3c060104 	stfccs	f0, [r6], {4}
     970:	69082f06 	stmdbvs	r8, {r1, r2, r8, r9, sl, fp, sp}
     974:	22c922c9 	sbccs	r2, r9, #-1879048180	; 0x9000000c
     978:	ad22c908 	stcge	9, cr12, [r2, #-32]!	; 0xffffffe0
     97c:	23c90822 	biccs	r0, r9, #2228224	; 0x220000
     980:	01040200 	mrseq	r0, R12_usr
     984:	3006ba06 	andcc	fp, r6, r6, lsl #20
     988:	01040200 	mrseq	r0, R12_usr
     98c:	3006ba06 	andcc	fp, r6, r6, lsl #20
     990:	9fd8229f 	svcls	0x00d8229f
     994:	0023de29 	eoreq	sp, r3, r9, lsr #28
     998:	06010402 	streq	r0, [r1], -r2, lsl #8
     99c:	c92f06ba 	stmdbgt	pc!, {r1, r3, r4, r5, r7, r9, sl}	; <UNPREDICTABLE>
     9a0:	022f3024 	eoreq	r3, pc, #36	; 0x24
     9a4:	01010004 	tsteq	r1, r4
     9a8:	00020500 	andeq	r0, r2, r0, lsl #10
     9ac:	03000000 	movweq	r0, #0
     9b0:	830104db 	movwhi	r0, #5339	; 0x14db
     9b4:	01040200 	mrseq	r0, R12_usr
     9b8:	2f063c06 	svccs	0x00063c06
     9bc:	22c9f508 	sbccs	pc, r9, #8, 10	; 0x2000000
     9c0:	22c922c9 	sbccs	r2, r9, #-1879048180	; 0x9000000c
     9c4:	22ad5a08 	adccs	r5, sp, #8, 20	; 0x8000
     9c8:	0023ad08 	eoreq	sl, r3, r8, lsl #26
     9cc:	06010402 	streq	r0, [r1], -r2, lsl #8
     9d0:	c92f06ba 	stmdbgt	pc!, {r1, r3, r4, r5, r7, r9, sl}	; <UNPREDICTABLE>
     9d4:	c9848423 	stmibgt	r4, {r0, r1, r5, sl, pc}
     9d8:	1f859f22 	svcne	0x00859f22
     9dc:	02002267 	andeq	r2, r0, #1879048198	; 0x70000006
     9e0:	ba060104 	blt	180df8 <_Min_Stack_Size+0x180bf8>
     9e4:	22592f06 	subscs	r2, r9, #6, 30
     9e8:	09022f30 	stmdbeq	r2, {r4, r5, r8, r9, sl, fp, sp}
     9ec:	7b010100 	blvc	40df4 <_Min_Stack_Size+0x40bf4>
     9f0:	02000004 	andeq	r0, r0, #4
     9f4:	0000ad00 	andeq	sl, r0, r0, lsl #26
     9f8:	fb010200 	blx	41202 <_Min_Stack_Size+0x41002>
     9fc:	01000d0e 	tsteq	r0, lr, lsl #26
     a00:	00010101 	andeq	r0, r1, r1, lsl #2
     a04:	00010000 	andeq	r0, r1, r0
     a08:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     a0c:	2f656d6f 	svccs	0x00656d6f
     a10:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
     a14:	542f7673 	strtpl	r7, [pc], #-1651	; a1c <_Min_Stack_Size+0x81c>
     a18:	53415344 	movtpl	r5, #4932	; 0x1344
     a1c:	4f495f54 	svcmi	0x00495f54
     a20:	74452f54 	strbvc	r2, [r5], #-3924	; 0xfffff0ac
     a24:	6e726568 	cdpvs	5, 7, cr6, cr2, cr8, {3}
     a28:	2f007465 	svccs	0x00007465
     a2c:	2f727375 	svccs	0x00727375
     a30:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     a34:	2f656475 	svccs	0x00656475
     a38:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     a3c:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 8a0 <_Min_Stack_Size+0x6a0>
     a40:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     a44:	2f00656e 	svccs	0x0000656e
     a48:	2f727375 	svccs	0x00727375
     a4c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     a50:	2f656475 	svccs	0x00656475
     a54:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     a58:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
     a5c:	00007379 	andeq	r7, r0, r9, ror r3
     a60:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     a64:	5f706968 	svcpl	0x00706968
     a68:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     a6c:	0100632e 	tsteq	r0, lr, lsr #6
     a70:	645f0000 	ldrbvs	r0, [pc], #-0	; a78 <_Min_Stack_Size+0x878>
     a74:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
     a78:	745f746c 	ldrbvc	r7, [pc], #-1132	; a80 <_Min_Stack_Size+0x880>
     a7c:	73657079 	cmnvc	r5, #121	; 0x79
     a80:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     a84:	735f0000 	cmpvc	pc, #0
     a88:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     a8c:	00682e74 	rsbeq	r2, r8, r4, ror lr
     a90:	77000003 	strvc	r0, [r0, -r3]
     a94:	68637a69 	stmdavs	r3!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
     a98:	635f7069 	cmpvs	pc, #105	; 0x69
     a9c:	2e666e6f 	cdpcs	14, 6, cr6, cr6, cr15, {3}
     aa0:	00010068 	andeq	r0, r1, r8, rrx
     aa4:	05000000 	streq	r0, [r0, #-0]
     aa8:	0014e802 	andseq	lr, r4, r2, lsl #16
     aac:	012e0308 			; <UNDEFINED> instruction: 0x012e0308
     ab0:	0004022e 	andeq	r0, r4, lr, lsr #4
     ab4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     ab8:	0014f402 	andseq	pc, r4, r2, lsl #8
     abc:	01340308 	teqeq	r4, r8, lsl #6
     ac0:	0004022e 	andeq	r0, r4, lr, lsr #4
     ac4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     ac8:	00150002 	andseq	r0, r5, r2
     acc:	013a0308 	teqeq	sl, r8, lsl #6
     ad0:	0004022e 	andeq	r0, r4, lr, lsr #4
     ad4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     ad8:	00150c02 	andseq	r0, r5, r2, lsl #24
     adc:	00c00308 	sbceq	r0, r0, r8, lsl #6
     ae0:	04022e01 	streq	r2, [r2], #-3585	; 0xfffff1ff
     ae4:	00010100 	andeq	r0, r1, r0, lsl #2
     ae8:	15180205 	ldrne	r0, [r8, #-517]	; 0xfffffdfb
     aec:	c6030800 	strgt	r0, [r3], -r0, lsl #16
     af0:	024a0100 	subeq	r0, sl, #0, 2
     af4:	01010009 	tsteq	r1, r9
     af8:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
     afc:	03080015 	movweq	r0, #32789	; 0x8015
     b00:	660100cd 	strvs	r0, [r1], -sp, asr #1
     b04:	01000802 	tsteq	r0, r2, lsl #16
     b08:	02050001 	andeq	r0, r5, #1
     b0c:	08001550 	stmdaeq	r0, {r4, r6, r8, sl, ip}
     b10:	0100d303 	tsteq	r0, r3, lsl #6
     b14:	0006022e 	andeq	r0, r6, lr, lsr #4
     b18:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     b1c:	00156002 	andseq	r6, r5, r2
     b20:	00d90308 	sbcseq	r0, r9, r8, lsl #6
     b24:	05025801 	streq	r5, [r2, #-2049]	; 0xfffff7ff
     b28:	00010100 	andeq	r0, r1, r0, lsl #2
     b2c:	00000205 	andeq	r0, r0, r5, lsl #4
     b30:	f0030000 			; <UNDEFINED> instruction: 0xf0030000
     b34:	00590100 	subseq	r0, r9, r0, lsl #2
     b38:	06010402 	streq	r0, [r1], -r2, lsl #8
     b3c:	3d3e063c 	ldccc	6, cr0, [lr, #-240]!	; 0xffffff10
     b40:	023e3d4e 	eorseq	r3, lr, #4992	; 0x1380
     b44:	0101000c 	tsteq	r1, ip
     b48:	74020500 	strvc	r0, [r2], #-1280	; 0xfffffb00
     b4c:	03080015 	movweq	r0, #32789	; 0x8015
     b50:	590100fe 	stmdbpl	r1, {r1, r2, r3, r4, r5, r6, r7}
     b54:	01040200 	mrseq	r0, R12_usr
     b58:	3e063c06 	cdpcc	12, 0, cr3, cr6, cr6, {0}
     b5c:	3e3d4e3d 	mrccc	14, 1, r4, cr13, cr13, {1}
     b60:	01000c02 	tsteq	r0, r2, lsl #24
     b64:	02050001 	andeq	r0, r5, #1
     b68:	00000000 	andeq	r0, r0, r0
     b6c:	01018c03 	tsteq	r1, r3, lsl #24
     b70:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
     b74:	06200601 	strteq	r0, [r0], -r1, lsl #12
     b78:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
     b7c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     b80:	3d4e3d3e 	stclcc	13, cr3, [lr, #-248]	; 0xffffff08
     b84:	000b023e 	andeq	r0, fp, lr, lsr r2
     b88:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     b8c:	0015bc02 	andseq	fp, r5, r2, lsl #24
     b90:	019c0308 	orrseq	r0, ip, r8, lsl #6
     b94:	02005901 	andeq	r5, r0, #16384	; 0x4000
     b98:	20060104 	andcs	r0, r6, r4, lsl #2
     b9c:	02006806 	andeq	r6, r0, #393216	; 0x60000
     ba0:	3c060104 	stfccs	f0, [r6], {4}
     ba4:	4e3d3e06 	cdpmi	14, 3, cr3, cr13, cr6, {0}
     ba8:	0b023e3d 	bleq	904a4 <_Min_Stack_Size+0x902a4>
     bac:	00010100 	andeq	r0, r1, r0, lsl #2
     bb0:	16100205 	ldrne	r0, [r0], -r5, lsl #4
     bb4:	ac030800 	stcge	8, cr0, [r3], {-0}
     bb8:	2f670101 	svccs	0x00670101
     bbc:	1528024b 	strne	r0, [r8, #-587]!	; 0xfffffdb5
     bc0:	2f3e222f 	svccs	0x003e222f
     bc4:	2259843e 	subscs	r8, r9, #1040187392	; 0x3e000000
     bc8:	22592267 	subscs	r2, r9, #1879048198	; 0x70000006
     bcc:	21082367 	tstcs	r8, r7, ror #6
     bd0:	23210822 			; <UNDEFINED> instruction: 0x23210822
     bd4:	5959594b 	ldmdbpl	r9, {r0, r1, r3, r6, r8, fp, ip, lr}^
     bd8:	2f234b59 	svccs	0x00234b59
     bdc:	3d223d22 	stccc	13, cr3, [r2, #-136]!	; 0xffffff78
     be0:	004b7724 	subeq	r7, fp, r4, lsr #14
     be4:	06010402 	streq	r0, [r1], -r2, lsl #8
     be8:	3d2f063c 	stccc	6, cr0, [pc, #-240]!	; b00 <_Min_Stack_Size+0x900>
     bec:	02004b22 	andeq	r4, r0, #34816	; 0x8800
     bf0:	3c060104 	stfccs	f0, [r6], {4}
     bf4:	223d2f06 	eorscs	r2, sp, #6, 30
     bf8:	032e7103 			; <UNDEFINED> instruction: 0x032e7103
     bfc:	02002011 	andeq	r2, r0, #17
     c00:	022f0104 	eoreq	r0, pc, #4, 2
     c04:	01010007 	tsteq	r1, r7
     c08:	c8020500 	stmdagt	r2, {r8, sl}
     c0c:	03080017 	movweq	r0, #32791	; 0x8017
     c10:	680101f8 	stmdavs	r1, {r3, r4, r5, r6, r7, r8}
     c14:	223d2308 	eorscs	r2, sp, #8, 6	; 0x20000000
     c18:	6776223d 			; <UNDEFINED> instruction: 0x6776223d
     c1c:	3d223d22 	stccc	13, cr3, [r2, #-136]!	; 0xffffff78
     c20:	022f3022 	eoreq	r3, pc, #34	; 0x22
     c24:	01010004 	tsteq	r1, r4
     c28:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
     c2c:	03080018 	movweq	r0, #32792	; 0x8018
     c30:	3f010294 	svccc	0x00010294
     c34:	4b750875 	blmi	1d42e10 <_Min_Stack_Size+0x1d42c10>
     c38:	8383753d 	orrhi	r7, r3, #255852544	; 0xf400000
     c3c:	00030283 	andeq	r0, r3, r3, lsl #5
     c40:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     c44:	0018dc02 	andseq	sp, r8, r2, lsl #24
     c48:	02a20308 	adceq	r0, r2, #8, 6	; 0x20000000
     c4c:	2f2f5a01 	svccs	0x002f5a01
     c50:	02002f3e 	andeq	r2, r0, #62, 30	; 0xf8
     c54:	003d0304 	eorseq	r0, sp, r4, lsl #6
     c58:	8f030402 	svchi	0x00030402
     c5c:	01040200 	mrseq	r0, R12_usr
     c60:	4c065806 	stcmi	8, cr5, [r6], {6}
     c64:	01040200 	mrseq	r0, R12_usr
     c68:	2f064a06 	svccs	0x00064a06
     c6c:	03040200 	movweq	r0, #16896	; 0x4200
     c70:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     c74:	0200ff03 	andeq	pc, r0, #3, 30
     c78:	58060104 	stmdapl	r6, {r2, r8}
     c7c:	2f3e4d06 	svccs	0x003e4d06
     c80:	03040200 	movweq	r0, #16896	; 0x4200
     c84:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     c88:	02008f03 	andeq	r8, r0, #3, 30
     c8c:	58060104 	stmdapl	r6, {r2, r8}
     c90:	02004c06 	andeq	r4, r0, #1536	; 0x600
     c94:	4a060104 	bmi	1810ac <_Min_Stack_Size+0x180eac>
     c98:	02002f06 	andeq	r2, r0, #6, 30
     c9c:	003d0304 	eorseq	r0, sp, r4, lsl #6
     ca0:	ff030402 			; <UNDEFINED> instruction: 0xff030402
     ca4:	01040200 	mrseq	r0, R12_usr
     ca8:	4d065806 	stcmi	8, cr5, [r6, #-24]	; 0xffffffe8
     cac:	0004022f 	andeq	r0, r4, pc, lsr #4
     cb0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     cb4:	0019f002 	andseq	pc, r9, r2
     cb8:	02bc0308 	adcseq	r0, ip, #8, 6	; 0x20000000
     cbc:	032f5901 			; <UNDEFINED> instruction: 0x032f5901
     cc0:	68914a10 	ldmvs	r1, {r4, r9, fp, lr}
     cc4:	01000302 	tsteq	r0, r2, lsl #6
     cc8:	02050001 	andeq	r0, r5, #1
     ccc:	08001a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, ip}
     cd0:	0102d403 	tsteq	r2, r3, lsl #8
     cd4:	332f2f3d 			; <UNDEFINED> instruction: 0x332f2f3d
     cd8:	66090383 	strvs	r0, [r9], -r3, lsl #7
     cdc:	0221752f 	eoreq	r7, r1, #197132288	; 0xbc00000
     ce0:	01010004 	tsteq	r1, r4
     ce4:	78020500 	stmdavc	r2, {r8, sl}
     ce8:	0308001a 	movweq	r0, #32794	; 0x801a
     cec:	590102ec 	stmdbpl	r1, {r2, r3, r5, r6, r7, r9}
     cf0:	4a10032f 	bmi	4019b4 <_Min_Stack_Size+0x4017b4>
     cf4:	03026867 	movweq	r6, #10343	; 0x2867
     cf8:	00010100 	andeq	r0, r1, r0, lsl #2
     cfc:	1aac0205 	bne	feb01518 <BootRAM+0xda71cb9>
     d00:	84030800 	strhi	r0, [r3], #-2048	; 0xfffff800
     d04:	2f3d0103 	svccs	0x003d0103
     d08:	0367332f 	cmneq	r7, #-1140850688	; 0xbc000000
     d0c:	752f6609 	strvc	r6, [pc, #-1545]!	; 70b <_Min_Stack_Size+0x50b>
     d10:	00040221 	andeq	r0, r4, r1, lsr #4
     d14:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     d18:	001af402 	andseq	pc, sl, r2, lsl #8
     d1c:	039c0308 	orrseq	r0, ip, #8, 6	; 0x20000000
     d20:	3e914401 	cdpcc	4, 9, cr4, cr1, cr1, {0}
     d24:	04022f32 	streq	r2, [r2], #-3890	; 0xfffff0ce
     d28:	00010100 	andeq	r0, r1, r0, lsl #2
     d2c:	1b240205 	blne	901548 <_Min_Stack_Size+0x901348>
     d30:	b1030800 	tstlt	r3, r0, lsl #16
     d34:	353d0103 	ldrcc	r0, [sp, #-259]!	; 0xfffffefd
     d38:	2f323e91 	svccs	0x00323e91
     d3c:	01000402 	tsteq	r0, r2, lsl #8
     d40:	02050001 	andeq	r0, r5, #1
     d44:	08001b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, ip}
     d48:	0103c603 	tsteq	r3, r3, lsl #12
     d4c:	674b673d 	smlaldxvs	r6, fp, sp, r7
     d50:	02674b67 	rsbeq	r4, r7, #105472	; 0x19c00
     d54:	01010003 	tsteq	r1, r3
     d58:	a4020500 	strge	r0, [r2], #-1280	; 0xfffffb00
     d5c:	0308001b 	movweq	r0, #32795	; 0x801b
     d60:	4b0103d0 	blmi	41ca8 <_Min_Stack_Size+0x41aa8>
     d64:	4b5a4b2f 	blmi	1693a28 <_Min_Stack_Size+0x1693828>
     d68:	4b4c5b4b 	blmi	1317a9c <_Min_Stack_Size+0x131789c>
     d6c:	4f4b5c5a 	svcmi	0x004b5c5a
     d70:	03022f67 	movweq	r2, #12135	; 0x2f67
     d74:	00010100 	andeq	r0, r1, r0, lsl #2
     d78:	1c280205 	sfmne	f0, 4, [r8], #-20	; 0xffffffec
     d7c:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
     d80:	2f4b0103 	svccs	0x004b0103
     d84:	3d78ad67 	ldclcc	13, cr10, [r8, #-412]!	; 0xfffffe64
     d88:	95223d22 	strls	r3, [r2, #-3362]!	; 0xfffff2de
     d8c:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
     d90:	3d223d95 	stccc	13, cr3, [r2, #-596]!	; 0xfffffdac
     d94:	00030222 	andeq	r0, r3, r2, lsr #4
     d98:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     d9c:	00000002 	andeq	r0, r0, r2
     da0:	04950300 	ldreq	r0, [r5], #768	; 0x300
     da4:	ad674b01 	fstmdbxge	r7!, {d20-d19}	;@ Deprecated
     da8:	000302ad 	andeq	r0, r3, sp, lsr #5
     dac:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     db0:	001cc002 	andseq	ip, ip, r2
     db4:	049c0308 	ldreq	r0, [ip], #776	; 0x308
     db8:	672f5901 	strvs	r5, [pc, -r1, lsl #18]!
     dbc:	01040200 	mrseq	r0, R12_usr
     dc0:	2f065806 	svccs	0x00065806
     dc4:	4b5a3d4b 	blmi	16902f8 <_Min_Stack_Size+0x16900f8>
     dc8:	3e672f67 	cdpcc	15, 6, cr2, cr7, cr7, {3}
     dcc:	01040200 	mrseq	r0, R12_usr
     dd0:	32065806 	andcc	r5, r6, #393216	; 0x60000
     dd4:	01040200 	mrseq	r0, R12_usr
     dd8:	30065806 	andcc	r5, r6, r6, lsl #16
     ddc:	0004022f 	andeq	r0, r4, pc, lsr #4
     de0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     de4:	001d5402 	andseq	r5, sp, r2, lsl #8
     de8:	04b60308 	ldrteq	r0, [r6], #776	; 0x308
     dec:	83754b01 	cmnhi	r5, #1024	; 0x400
     df0:	4b4b8383 	blmi	12e1c04 <_Min_Stack_Size+0x12e1a04>
     df4:	024b4b4b 	subeq	r4, fp, #76800	; 0x12c00
     df8:	01010007 	tsteq	r1, r7
     dfc:	d0020500 	andle	r0, r2, r0, lsl #10
     e00:	0308001d 	movweq	r0, #32797	; 0x801d
     e04:	4b0104c3 	blmi	42118 <_Min_Stack_Size+0x41f18>
     e08:	83838375 	orrhi	r8, r3, #-738197503	; 0xd4000001
     e0c:	4b4b4b4b 	blmi	12d3b40 <_Min_Stack_Size+0x12d3940>
     e10:	0007024b 	andeq	r0, r7, fp, asr #4
     e14:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     e18:	001e4c02 	andseq	r4, lr, r2, lsl #24
     e1c:	04d00308 	ldrbeq	r0, [r0], #776	; 0x308
     e20:	00325901 	eorseq	r5, r2, r1, lsl #18
     e24:	06010402 	streq	r0, [r1], -r2, lsl #8
     e28:	59300658 	ldmdbpl	r0!, {r3, r4, r6, r9, sl}
     e2c:	022f594b 	eoreq	r5, pc, #1228800	; 0x12c000
     e30:	01010004 	tsteq	r1, r4
     e34:	90020500 	andls	r0, r2, r0, lsl #10
     e38:	0308001e 	movweq	r0, #32798	; 0x801e
     e3c:	2f0104de 	svccs	0x000104de
     e40:	0002024b 	andeq	r0, r2, fp, asr #4
     e44:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     e48:	001ea002 	andseq	sl, lr, r2
     e4c:	04e30308 	strbteq	r0, [r3], #776	; 0x308
     e50:	08754b01 	ldmdaeq	r5!, {r0, r8, r9, fp, lr}^
     e54:	00030221 	andeq	r0, r3, r1, lsr #4
     e58:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     e5c:	001ee002 	andseq	lr, lr, r2
     e60:	04e90308 	strbteq	r0, [r9], #776	; 0x308
     e64:	08834b01 	stmeq	r3, {r0, r8, r9, fp, lr}
     e68:	00030221 	andeq	r0, r3, r1, lsr #4
     e6c:	01d20101 	bicseq	r0, r2, r1, lsl #2
     e70:	00020000 	andeq	r0, r2, r0
     e74:	000000b7 	strheq	r0, [r0], -r7
     e78:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     e7c:	0101000d 	tsteq	r1, sp
     e80:	00000101 	andeq	r0, r0, r1, lsl #2
     e84:	00000100 	andeq	r0, r0, r0, lsl #2
     e88:	6f682f01 	svcvs	0x00682f01
     e8c:	762f656d 	strtvc	r6, [pc], -sp, ror #10
     e90:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
     e94:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
     e98:	54534153 	ldrbpl	r4, [r3], #-339	; 0xfffffead
     e9c:	544f495f 	strbpl	r4, [pc], #-2399	; ea4 <_Min_Stack_Size+0xca4>
     ea0:	6874452f 	ldmdavs	r4!, {r0, r1, r2, r3, r5, r8, sl, lr}^
     ea4:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     ea8:	35572f74 	ldrbcc	r2, [r7, #-3956]	; 0xfffff08c
     eac:	00303035 	eorseq	r3, r0, r5, lsr r0
     eb0:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     eb4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     eb8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     ebc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
     ec0:	2f62696c 	svccs	0x0062696c
     ec4:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     ec8:	00656e69 	rsbeq	r6, r5, r9, ror #28
     ecc:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     ed0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     ed4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     ed8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
     edc:	2f62696c 	svccs	0x0062696c
     ee0:	00737973 	rsbseq	r7, r3, r3, ror r9
     ee4:	74452f2e 	strbvc	r2, [r5], #-3886	; 0xfffff0d2
     ee8:	6e726568 	cdpvs	5, 7, cr6, cr2, cr8, {3}
     eec:	00007465 	andeq	r7, r0, r5, ror #8
     ef0:	30353577 	eorscc	r3, r5, r7, ror r5
     ef4:	00632e30 	rsbeq	r2, r3, r0, lsr lr
     ef8:	5f000001 	svcpl	0x00000001
     efc:	61666564 	cmnvs	r6, r4, ror #10
     f00:	5f746c75 	svcpl	0x00746c75
     f04:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     f08:	00682e73 	rsbeq	r2, r8, r3, ror lr
     f0c:	5f000002 	svcpl	0x00000002
     f10:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     f14:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     f18:	00000300 	andeq	r0, r0, r0, lsl #6
     f1c:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     f20:	5f706968 	svcpl	0x00706968
     f24:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     f28:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     f2c:	00000000 	andeq	r0, r0, r0
     f30:	1f240205 	svcne	0x00240205
     f34:	34030800 	strcc	r0, [r3], #-2048	; 0xfffff800
     f38:	033d4d01 	teqeq	sp, #1, 26	; 0x40
     f3c:	91913c0c 	orrsls	r3, r1, ip, lsl #24
     f40:	580f0367 	stmdapl	pc, {r0, r1, r2, r5, r6, r8, r9}	; <UNPREDICTABLE>
     f44:	02213d3d 	eoreq	r3, r1, #3904	; 0xf40
     f48:	01010006 	tsteq	r1, r6
     f4c:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
     f50:	0308001f 	movweq	r0, #32799	; 0x801f
     f54:	670100dc 			; <UNDEFINED> instruction: 0x670100dc
     f58:	9151413d 	cmpls	r1, sp, lsr r1
     f5c:	0f036791 	svceq	0x00036791
     f60:	023d3d58 	eorseq	r3, sp, #88, 26	; 0x1600
     f64:	01010005 	tsteq	r1, r5
     f68:	fc020500 	stc2	5, cr0, [r2], {-0}
     f6c:	0308001f 	movweq	r0, #32799	; 0x801f
     f70:	75010181 	strvc	r0, [r1, #-385]	; 0xfffffe7f
     f74:	423d2f2f 	eorsmi	r2, sp, #47, 30	; 0xbc
     f78:	00679191 	mlseq	r7, r1, r1, r9
     f7c:	3d030402 	cfstrscc	mvf0, [r3, #-8]
     f80:	03040200 	movweq	r0, #16896	; 0x4200
     f84:	04020081 	streq	r0, [r2], #-129	; 0xffffff7f
     f88:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     f8c:	3d4a3b03 	vstrcc	d19, [sl, #-12]
     f90:	0005023d 	andeq	r0, r5, sp, lsr r2
     f94:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     f98:	00208802 	eoreq	r8, r0, r2, lsl #16
     f9c:	01ce0308 	biceq	r0, lr, r8, lsl #6
     fa0:	2f2f7501 	svccs	0x002f7501
     fa4:	914b413d 	cmpls	fp, sp, lsr r1
     fa8:	02006791 	andeq	r6, r0, #38010880	; 0x2440000
     fac:	003d0304 	eorseq	r0, sp, r4, lsl #6
     fb0:	81030402 	tsthi	r3, r2, lsl #8
     fb4:	01040200 	mrseq	r0, R12_usr
     fb8:	03063c06 	movweq	r3, #27654	; 0x6c06
     fbc:	3d3d4a3b 	vldmdbcc	sp!, {s8-s66}
     fc0:	01000502 	tsteq	r0, r2, lsl #10
     fc4:	02050001 	andeq	r0, r5, #1
     fc8:	0800211c 	stmdaeq	r0, {r2, r3, r4, r8, sp}
     fcc:	01029c03 	tsteq	r2, r3, lsl #24
     fd0:	f3ad4d59 			; <UNDEFINED> instruction: 0xf3ad4d59
     fd4:	4bf4ad3e 	blmi	ffd2c4d4 <BootRAM+0xec9cc75>
     fd8:	00040221 	andeq	r0, r4, r1, lsr #4
     fdc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     fe0:	0021b402 	eoreq	fp, r1, r2, lsl #8
     fe4:	02ad0308 	adceq	r0, sp, #8, 6	; 0x20000000
     fe8:	ad4d5901 	stclge	9, cr5, [sp, #-4]
     fec:	f4ad3ef3 	vld3.<illegal width 64>	{d3[],d5[],d7[]}, [sp :<bad align 192>], r3
     ff0:	0402214b 	streq	r2, [r2], #-331	; 0xfffffeb5
     ff4:	00010100 	andeq	r0, r1, r0, lsl #2
     ff8:	224c0205 	subcs	r0, ip, #1342177280	; 0x50000000
     ffc:	bd030800 	stclt	8, cr0, [r3, #-0]
    1000:	2f830102 	svccs	0x00830102
    1004:	92084b2f 	andls	r4, r8, #48128	; 0xbc00
    1008:	084b6883 	stmdaeq	fp, {r0, r1, r7, fp, sp, lr}^
    100c:	000302ad 	andeq	r0, r3, sp, lsr #5
    1010:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1014:	00230402 	eoreq	r0, r3, r2, lsl #8
    1018:	02cb0308 	sbceq	r0, fp, #8, 6	; 0x20000000
    101c:	302f8301 	eorcc	r8, pc, r1, lsl #6
    1020:	8491084b 	ldrhi	r0, [r1], #2123	; 0x84b
    1024:	ad084c67 	stcge	12, cr4, [r8, #-412]	; 0xfffffe64
    1028:	01000302 	tsteq	r0, r2, lsl #6
    102c:	02050001 	andeq	r0, r5, #1
    1030:	080023bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sp}
    1034:	0102db03 	tsteq	r2, r3, lsl #22
    1038:	91082f83 	smlabbls	r8, r3, pc, r2	; <UNPREDICTABLE>
    103c:	02ad084b 	adceq	r0, sp, #4915200	; 0x4b0000
    1040:	01010003 	tsteq	r1, r3
    1044:	0000050b 	andeq	r0, r0, fp, lsl #10
    1048:	00a20002 	adceq	r0, r2, r2
    104c:	01020000 	mrseq	r0, (UNDEF: 2)
    1050:	000d0efb 	strdeq	r0, [sp], -fp
    1054:	01010101 	tsteq	r1, r1, lsl #2
    1058:	01000000 	mrseq	r0, (UNDEF: 0)
    105c:	2f010000 	svccs	0x00010000
    1060:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1064:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    1068:	2f767375 	svccs	0x00767375
    106c:	41534454 	cmpmi	r3, r4, asr r4
    1070:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1074:	492f544f 	stmdbmi	pc!, {r0, r1, r2, r3, r6, sl, ip, lr}	; <UNPREDICTABLE>
    1078:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    107c:	2f74656e 	svccs	0x0074656e
    1080:	50434844 	subpl	r4, r3, r4, asr #16
    1084:	73752f00 	cmnvc	r5, #0, 30
    1088:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    108c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1090:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    1094:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1098:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    109c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    10a0:	73752f00 	cmnvc	r5, #0, 30
    10a4:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    10a8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    10ac:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    10b0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    10b4:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    10b8:	68640000 	stmdavs	r4!, {}^	; <UNPREDICTABLE>
    10bc:	632e7063 			; <UNDEFINED> instruction: 0x632e7063
    10c0:	00000100 	andeq	r0, r0, r0, lsl #2
    10c4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    10c8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    10cc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    10d0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    10d4:	00000200 	andeq	r0, r0, r0, lsl #4
    10d8:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    10dc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    10e0:	00030068 	andeq	r0, r3, r8, rrx
    10e4:	63686400 	cmnvs	r8, #0, 8
    10e8:	00682e70 	rsbeq	r2, r8, r0, ror lr
    10ec:	00000001 	andeq	r0, r0, r1
    10f0:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    10f4:	03080024 	movweq	r0, #32804	; 0x8024
    10f8:	2e0100cd 	cdpcs	0, 0, cr0, cr1, cr13, {6}
    10fc:	01000402 	tsteq	r0, r2, lsl #8
    1100:	02050001 	andeq	r0, r5, #1
    1104:	08002458 	stmdaeq	r0, {r3, r4, r6, sl, sp}
    1108:	0100d003 	tsteq	r0, r3
    110c:	673d4b30 			; <UNDEFINED> instruction: 0x673d4b30
    1110:	01000302 	tsteq	r0, r2, lsl #6
    1114:	02050001 	andeq	r0, r5, #1
    1118:	0800247c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, sp}
    111c:	0100d803 	tsteq	r0, r3, lsl #16
    1120:	683d4b30 	ldmdavs	sp!, {r4, r5, r8, r9, fp, lr}
    1124:	023d2f83 	eorseq	r2, sp, #524	; 0x20c
    1128:	01010008 	tsteq	r1, r8
    112c:	c4020500 	strgt	r0, [r2], #-1280	; 0xfffffb00
    1130:	03080024 	movweq	r0, #32804	; 0x8024
    1134:	3f0100f9 	svccc	0x000100f9
    1138:	4b4b4b30 	blmi	12d3e00 <_Min_Stack_Size+0x12d3c00>
    113c:	4c4b594b 	mcrrmi	9, 4, r5, fp, cr11
    1140:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
    1144:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
    1148:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
    114c:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
    1150:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    1154:	02006867 	andeq	r6, r0, #6750208	; 0x670000
    1158:	3c060304 	stccc	3, cr0, [r6], {4}
    115c:	01040200 	mrseq	r0, R12_usr
    1160:	003d0690 	mlaseq	sp, r0, r6, r0
    1164:	06030402 	streq	r0, [r3], -r2, lsl #8
    1168:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    116c:	3d069e01 	stccc	14, cr9, [r6, #-4]
    1170:	03040200 	movweq	r0, #16896	; 0x4200
    1174:	02009006 	andeq	r9, r0, #6
    1178:	069e0104 	ldreq	r0, [lr], r4, lsl #2
    117c:	9191913f 	orrsls	r9, r1, pc, lsr r1
    1180:	93919193 	orrsls	r9, r1, #-1073741788	; 0xc0000024
    1184:	bb919191 	bllt	fe4657d0 <BootRAM+0xd3d5f71>
    1188:	bbbbbbbb 	bllt	feef007c <BootRAM+0xde6081d>
    118c:	bb9191bd 	bllt	fe465888 <BootRAM+0xd3d6029>
    1190:	bbbbbbbb 	bllt	feef0084 <BootRAM+0xde60825>
    1194:	bdbbbbbb 	ldclt	11, cr11, [fp, #748]!	; 0x2ec
    1198:	91919191 			; <UNDEFINED> instruction: 0x91919191
    119c:	919191f3 			; <UNDEFINED> instruction: 0x919191f3
    11a0:	04020092 	streq	r0, [r2], #-146	; 0xffffff6e
    11a4:	003c0603 	eorseq	r0, ip, r3, lsl #12
    11a8:	9e010402 	cdpls	4, 0, cr0, cr1, cr2, {0}
    11ac:	02004d06 	andeq	r4, r0, #384	; 0x180
    11b0:	3c060304 	stccc	3, cr0, [r6], {4}
    11b4:	01040200 	mrseq	r0, R12_usr
    11b8:	d742069e 			; <UNDEFINED> instruction: 0xd742069e
    11bc:	01000802 	tsteq	r0, r2, lsl #16
    11c0:	02050001 	andeq	r0, r5, #1
    11c4:	08002990 	stmdaeq	r0, {r4, r7, r8, fp, sp}
    11c8:	0101eb03 	tsteq	r1, r3, lsl #22
    11cc:	4b4b305b 	blmi	12cd340 <_Min_Stack_Size+0x12cd140>
    11d0:	4c594b4b 	mrrcmi	11, 4, r4, r9, cr11
    11d4:	01040200 	mrseq	r0, R12_usr
    11d8:	59064a06 	stmdbpl	r6, {r1, r2, r9, fp, lr}
    11dc:	5959594c 	ldmdbpl	r9, {r2, r3, r6, r8, fp, ip, lr}^
    11e0:	4b4b4b5a 	blmi	12d3f50 <_Min_Stack_Size+0x12d3d50>
    11e4:	4b4b4b4c 	blmi	12d3f1c <_Min_Stack_Size+0x12d3d1c>
    11e8:	4b4b4b4c 	blmi	12d3f20 <_Min_Stack_Size+0x12d3d20>
    11ec:	5959594c 	ldmdbpl	r9, {r2, r3, r6, r8, fp, ip, lr}^
    11f0:	00686759 	rsbeq	r6, r8, r9, asr r7
    11f4:	06030402 	streq	r0, [r3], -r2, lsl #8
    11f8:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    11fc:	3d069e01 	stccc	14, cr9, [r6, #-4]
    1200:	03040200 	movweq	r0, #16896	; 0x4200
    1204:	02003c06 	andeq	r3, r0, #1536	; 0x600
    1208:	069e0104 	ldreq	r0, [lr], r4, lsl #2
    120c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    1210:	00900603 	addseq	r0, r0, r3, lsl #12
    1214:	9e010402 	cdpls	4, 0, cr0, cr1, cr2, {0}
    1218:	91913f06 	orrsls	r3, r1, r6, lsl #30
    121c:	91919391 			; <UNDEFINED> instruction: 0x91919391
    1220:	91919192 			; <UNDEFINED> instruction: 0x91919192
    1224:	bbbbbbbb 	bllt	feef0118 <BootRAM+0xde608b9>
    1228:	9159bcbb 	ldrhls	fp, [r9, #-203]	; 0xffffff35
    122c:	bbbbbb91 	bllt	feef0078 <BootRAM+0xde60819>
    1230:	bb9191bc 	bllt	fe465928 <BootRAM+0xd3d60c9>
    1234:	91bebbbb 			; <UNDEFINED> instruction: 0x91bebbbb
    1238:	bb750891 	bllt	1d43484 <_Min_Stack_Size+0x1d43284>
    123c:	bbbbbbbb 	bllt	feef0130 <BootRAM+0xde608d1>
    1240:	91bcbbbb 			; <UNDEFINED> instruction: 0x91bcbbbb
    1244:	91919191 			; <UNDEFINED> instruction: 0x91919191
    1248:	91919191 			; <UNDEFINED> instruction: 0x91919191
    124c:	02009291 	andeq	r9, r0, #268435465	; 0x10000009
    1250:	3c060304 	stccc	3, cr0, [r6], {4}
    1254:	01040200 	mrseq	r0, R12_usr
    1258:	004d069e 	umaaleq	r0, sp, lr, r6
    125c:	06030402 	streq	r0, [r3], -r2, lsl #8
    1260:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    1264:	4206c801 	andmi	ip, r6, #65536	; 0x10000
    1268:	000c02e6 	andeq	r0, ip, r6, ror #5
    126c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1270:	002fcc02 	eoreq	ip, pc, r2, lsl #24
    1274:	02ef0308 	rsceq	r0, pc, #8, 6	; 0x20000000
    1278:	4b303f01 	blmi	c10e84 <_Min_Stack_Size+0xc10c84>
    127c:	594b4b4b 	stmdbpl	fp, {r0, r1, r3, r6, r8, r9, fp, lr}^
    1280:	4b4b4c4b 	blmi	12d43b4 <_Min_Stack_Size+0x12d41b4>
    1284:	4b4b4c4b 	blmi	12d43b8 <_Min_Stack_Size+0x12d41b8>
    1288:	4b4b4c4b 	blmi	12d43bc <_Min_Stack_Size+0x12d41bc>
    128c:	4b4b4c4b 	blmi	12d43c0 <_Min_Stack_Size+0x12d41c0>
    1290:	59594c4b 	ldmdbpl	r9, {r0, r1, r3, r6, sl, fp, lr}^
    1294:	68675959 	stmdavs	r7!, {r0, r3, r4, r6, r8, fp, ip, lr}^
    1298:	03040200 	movweq	r0, #16896	; 0x4200
    129c:	02003c06 	andeq	r3, r0, #1536	; 0x600
    12a0:	069e0104 	ldreq	r0, [lr], r4, lsl #2
    12a4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    12a8:	003c0603 	eorseq	r0, ip, r3, lsl #12
    12ac:	9e010402 	cdpls	4, 0, cr0, cr1, cr2, {0}
    12b0:	02003d06 	andeq	r3, r0, #384	; 0x180
    12b4:	9e060304 	cdpls	3, 0, cr0, cr6, cr4, {0}
    12b8:	01040200 	mrseq	r0, R12_usr
    12bc:	913f069e 	teqls	pc, lr	; <illegal shifter operand>	; <UNPREDICTABLE>
    12c0:	91939191 			; <UNDEFINED> instruction: 0x91939191
    12c4:	91919291 			; <UNDEFINED> instruction: 0x91919291
    12c8:	bbbbbb91 	bllt	feef0114 <BootRAM+0xde608b5>
    12cc:	91bcbbbb 			; <UNDEFINED> instruction: 0x91bcbbbb
    12d0:	bbbbbb91 	bllt	feef011c <BootRAM+0xde608bd>
    12d4:	bb9191bc 	bllt	fe4659cc <BootRAM+0xd3d616d>
    12d8:	92bcbbbb 	adcsls	fp, ip, #191488	; 0x2ec00
    12dc:	03040200 	movweq	r0, #16896	; 0x4200
    12e0:	0200ba06 	andeq	fp, r0, #24576	; 0x6000
    12e4:	069e0104 	ldreq	r0, [lr], r4, lsl #2
    12e8:	2f2f2f4d 	svccs	0x002f2f4d
    12ec:	0802d834 	stmdaeq	r2, {r2, r4, r5, fp, ip, lr, pc}
    12f0:	00010100 	andeq	r0, r1, r0, lsl #2
    12f4:	340c0205 	strcc	r0, [ip], #-517	; 0xfffffdfb
    12f8:	dc030800 	stcle	8, cr0, [r3], {-0}
    12fc:	315f0103 	cmpcc	pc, r3, lsl #2
    1300:	9f3d4ce6 	svcls	0x003d4ce6
    1304:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    1308:	02001d02 	andeq	r1, r0, #2, 26	; 0x80
    130c:	3c060104 	stfccs	f0, [r6], {4}
    1310:	02004206 	andeq	r4, r0, #1610612736	; 0x60000000
    1314:	003d0304 	eorseq	r0, sp, r4, lsl #6
    1318:	81030402 	tsthi	r3, r2, lsl #8
    131c:	01040200 	mrseq	r0, R12_usr
    1320:	40063c06 	andmi	r3, r6, r6, lsl #24
    1324:	5a3d3d2f 	bpl	f507e8 <_Min_Stack_Size+0xf505e8>
    1328:	3da30822 	stccc	8, cr0, [r3, #136]!	; 0x88
    132c:	593d3d22 	ldmdbpl	sp!, {r1, r5, r8, sl, fp, ip, sp}
    1330:	003d3d22 	eorseq	r3, sp, r2, lsr #26
    1334:	06030402 	streq	r0, [r3], -r2, lsl #8
    1338:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    133c:	3d069e01 	stccc	14, cr9, [r6, #-4]
    1340:	00593d22 	subseq	r3, r9, r2, lsr #26
    1344:	06030402 	streq	r0, [r3], -r2, lsl #8
    1348:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    134c:	3d069e01 	stccc	14, cr9, [r6, #-4]
    1350:	03040200 	movweq	r0, #16896	; 0x4200
    1354:	02003c06 	andeq	r3, r0, #1536	; 0x600
    1358:	06660104 	strbteq	r0, [r6], -r4, lsl #2
    135c:	593d2359 	ldmdbpl	sp!, {r0, r3, r4, r6, r8, r9, sp}
    1360:	03040200 	movweq	r0, #16896	; 0x4200
    1364:	02003c06 	andeq	r3, r0, #1536	; 0x600
    1368:	069e0104 	ldreq	r0, [lr], r4, lsl #2
    136c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    1370:	003c0603 	eorseq	r0, ip, r3, lsl #12
    1374:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1378:	3d245906 	stccc	9, cr5, [r4, #-24]!	; 0xffffffe8
    137c:	67676759 			; <UNDEFINED> instruction: 0x67676759
    1380:	593d2367 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, r9, sp}
    1384:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    1388:	4b593d23 	blmi	165081c <_Min_Stack_Size+0x165061c>
    138c:	6b204803 	blvs	8133a0 <_Min_Stack_Size+0x8131a0>
    1390:	2f203903 	svccs	0x00203903
    1394:	01001702 	tsteq	r0, r2, lsl #14
    1398:	02050001 	andeq	r0, r5, #1
    139c:	080036a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip, sp}
    13a0:	0104c903 	tsteq	r4, r3, lsl #18
    13a4:	9f302f42 	svcls	0x00302f42
    13a8:	424c0868 	submi	r0, ip, #104, 16	; 0x680000
    13ac:	03040200 	movweq	r0, #16896	; 0x4200
    13b0:	02003c06 	andeq	r3, r0, #1536	; 0x600
    13b4:	069e0104 	ldreq	r0, [lr], r4, lsl #2
    13b8:	1f3e5a3d 	svcne	0x003e5a3d
    13bc:	5a42234b 	bpl	108a0f0 <_Min_Stack_Size+0x1089ef0>
    13c0:	3f3d303d 	svccc	0x003d303d
    13c4:	3c0c032f 	stccc	3, cr0, [ip], {47}	; 0x2f
    13c8:	42207603 	eormi	r7, r0, #3145728	; 0x300000
    13cc:	004b4b30 	subeq	r4, fp, r0, lsr fp
    13d0:	06010402 	streq	r0, [r1], -r2, lsl #8
    13d4:	00230620 	eoreq	r0, r3, r0, lsr #12
    13d8:	06010402 	streq	r0, [r1], -r2, lsl #8
    13dc:	2f7a0658 	svccs	0x007a0658
    13e0:	03040200 	movweq	r0, #16896	; 0x4200
    13e4:	02003c06 	andeq	r3, r0, #1536	; 0x600
    13e8:	06900104 	ldreq	r0, [r0], r4, lsl #2
    13ec:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    13f0:	003c0603 	eorseq	r0, ip, r3, lsl #12
    13f4:	ba010402 	blt	42404 <_Min_Stack_Size+0x42204>
    13f8:	835a3e06 	cmphi	sl, #6, 28	; 0x60
    13fc:	1e40305a 	mcrne	0, 2, r3, cr0, cr10, {2}
    1400:	3d422330 	stclcc	3, cr2, [r2, #-192]	; 0xffffff40
    1404:	2f833d30 	svccs	0x00833d30
    1408:	02040200 	andeq	r0, r4, #0, 4
    140c:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    1410:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    1414:	3e2f3d44 	cdpcc	13, 2, cr3, cr15, cr4, {2}
    1418:	30424b30 	subcc	r4, r2, r0, lsr fp
    141c:	23344b4b 	teqcs	r4, #76800	; 0x12c00
    1420:	001e0221 	andseq	r0, lr, r1, lsr #4
    1424:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1428:	0038d802 	eorseq	sp, r8, r2, lsl #16
    142c:	05d60308 	ldrbeq	r0, [r6, #776]	; 0x308
    1430:	59303e01 	ldmdbpl	r0!, {r0, r9, sl, fp, ip, sp}
    1434:	90150368 	andsls	r0, r5, r8, ror #6
    1438:	2f206e03 	svccs	0x00206e03
    143c:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
    1440:	003c0603 	eorseq	r0, ip, r3, lsl #12
    1444:	9e010402 	cdpls	4, 0, cr0, cr1, cr2, {0}
    1448:	25593d06 	ldrbcs	r3, [r9, #-3334]	; 0xfffff2fa
    144c:	03040200 	movweq	r0, #16896	; 0x4200
    1450:	02003c06 	andeq	r3, r0, #1536	; 0x600
    1454:	06ba0104 	ldrteq	r0, [sl], r4, lsl #2
    1458:	3d26593d 	stccc	9, cr5, [r6, #-244]!	; 0xffffff0c
    145c:	0b03a259 	bleq	e9dc8 <_Min_Stack_Size+0xe9bc8>
    1460:	20770390 			; <UNDEFINED> instruction: 0x20770390
    1464:	2f232f3d 	svccs	0x00232f3d
    1468:	2130243d 	teqcs	r0, sp, lsr r4
    146c:	01001202 	tsteq	r0, r2, lsl #4
    1470:	02050001 	andeq	r0, r5, #1
    1474:	080039e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip, sp}
    1478:	01069a03 	tsteq	r6, r3, lsl #20
    147c:	bd5c6741 	ldcllt	7, cr6, [ip, #-260]	; 0xfffffefc
    1480:	2f315168 	svccs	0x00315168
    1484:	03040200 	movweq	r0, #16896	; 0x4200
    1488:	02003c06 	andeq	r3, r0, #1536	; 0x600
    148c:	06660104 	strbteq	r0, [r6], -r4, lsl #2
    1490:	0a02303d 	beq	8d58c <_Min_Stack_Size+0x8d38c>
    1494:	00010100 	andeq	r0, r1, r0, lsl #2
    1498:	3a680205 	bcc	1a01cb4 <_Min_Stack_Size+0x1a01ab4>
    149c:	c6030800 	strgt	r0, [r3], -r0, lsl #16
    14a0:	3d670106 	stfcce	f0, [r7, #-24]!	; 0xffffffe8
    14a4:	67693f3d 			; <UNDEFINED> instruction: 0x67693f3d
    14a8:	833d6867 	teqhi	sp, #6750208	; 0x670000
    14ac:	01001202 	tsteq	r0, r2, lsl #4
    14b0:	02050001 	andeq	r0, r5, #1
    14b4:	08003af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, ip, sp}
    14b8:	0106e703 	tsteq	r6, r3, lsl #14
    14bc:	3d2f4b2f 	fstmdbxcc	pc!, {d4-d26}	;@ Deprecated
    14c0:	04023d31 	streq	r3, [r2], #-3377	; 0xfffff2cf
    14c4:	00010100 	andeq	r0, r1, r0, lsl #2
    14c8:	3b180205 	blcc	601ce4 <_Min_Stack_Size+0x601ae4>
    14cc:	fd030800 	stc2	8, cr0, [r3, #-0]
    14d0:	3d2f0106 	stfccs	f0, [pc, #-24]!	; 14c0 <_Min_Stack_Size+0x12c0>
    14d4:	0b023d3d 	bleq	909d0 <_Min_Stack_Size+0x907d0>
    14d8:	00010100 	andeq	r0, r1, r0, lsl #2
    14dc:	00000205 	andeq	r0, r0, r5, lsl #4
    14e0:	8e030000 	cdphi	0, 0, cr0, cr3, cr0, {0}
    14e4:	592f0107 	stmdbpl	pc!, {r0, r1, r2, r8}	; <UNPREDICTABLE>
    14e8:	01000702 	tsteq	r0, r2, lsl #14
    14ec:	02050001 	andeq	r0, r5, #1
    14f0:	08003b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip, sp}
    14f4:	0107a003 	tsteq	r7, r3
    14f8:	59594b4b 	ldmdbpl	r9, {r0, r1, r3, r6, r8, r9, fp, lr}^
    14fc:	00070259 	andeq	r0, r7, r9, asr r2
    1500:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1504:	003b8002 	eorseq	r8, fp, r2
    1508:	07a80308 	streq	r0, [r8, r8, lsl #6]!
    150c:	594b4b01 	stmdbpl	fp, {r0, r8, r9, fp, lr}^
    1510:	07025959 	smlsdeq	r2, r9, r9, r5
    1514:	00010100 	andeq	r0, r1, r0, lsl #2
    1518:	3bbc0205 	blcc	fef01d34 <BootRAM+0xde724d5>
    151c:	b0030800 	andlt	r0, r3, r0, lsl #16
    1520:	4b4b0107 	blmi	12c1944 <_Min_Stack_Size+0x12c1744>
    1524:	02595959 	subseq	r5, r9, #1458176	; 0x164000
    1528:	01010007 	tsteq	r1, r7
    152c:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    1530:	0308003b 	movweq	r0, #32827	; 0x803b
    1534:	4b0107b8 	blmi	4341c <_Min_Stack_Size+0x4321c>
    1538:	5959594b 	ldmdbpl	r9, {r0, r1, r3, r6, r8, fp, ip, lr}^
    153c:	01000702 	tsteq	r0, r2, lsl #14
    1540:	02050001 	andeq	r0, r5, #1
    1544:	00000000 	andeq	r0, r0, r0
    1548:	0107ca03 	tsteq	r7, r3, lsl #20
    154c:	08022f2f 	stmdaeq	r2, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
    1550:	21010100 	mrscs	r0, (UNDEF: 17)
    1554:	02000002 	andeq	r0, r0, #2
    1558:	0000a500 	andeq	sl, r0, r0, lsl #10
    155c:	fb010200 	blx	41d66 <_Min_Stack_Size+0x41b66>
    1560:	01000d0e 	tsteq	r0, lr, lsl #26
    1564:	00010101 	andeq	r0, r1, r1, lsl #2
    1568:	00010000 	andeq	r0, r1, r0
    156c:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    1570:	2f656d6f 	svccs	0x00656d6f
    1574:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    1578:	542f7673 	strtpl	r7, [pc], #-1651	; 1580 <_Min_Stack_Size+0x1380>
    157c:	53415344 	movtpl	r5, #4932	; 0x1344
    1580:	4f495f54 	svcmi	0x00495f54
    1584:	6e492f54 	mcrvs	15, 2, r2, cr9, cr4, {2}
    1588:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    158c:	442f7465 	strtmi	r7, [pc], #-1125	; 1594 <_Min_Stack_Size+0x1394>
    1590:	2f00534e 	svccs	0x0000534e
    1594:	2f727375 	svccs	0x00727375
    1598:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    159c:	2f656475 	svccs	0x00656475
    15a0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    15a4:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 1408 <_Min_Stack_Size+0x1208>
    15a8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    15ac:	2f00656e 	svccs	0x0000656e
    15b0:	2f727375 	svccs	0x00727375
    15b4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    15b8:	2f656475 	svccs	0x00656475
    15bc:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    15c0:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    15c4:	00007379 	andeq	r7, r0, r9, ror r3
    15c8:	5f736e64 	svcpl	0x00736e64
    15cc:	73726170 	cmnvc	r2, #112, 2
    15d0:	00632e65 	rsbeq	r2, r3, r5, ror #28
    15d4:	5f000001 	svcpl	0x00000001
    15d8:	61666564 	cmnvs	r6, r4, ror #10
    15dc:	5f746c75 	svcpl	0x00746c75
    15e0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    15e4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    15e8:	5f000002 	svcpl	0x00000002
    15ec:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    15f0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    15f4:	00000300 	andeq	r0, r0, r0, lsl #6
    15f8:	2e736e64 	cdpcs	14, 7, cr6, cr3, cr4, {3}
    15fc:	00010068 	andeq	r0, r1, r8, rrx
    1600:	05000000 	streq	r0, [r0, #-0]
    1604:	003c3402 	eorseq	r3, ip, r2, lsl #8
    1608:	01110308 	tsteq	r1, r8, lsl #6
    160c:	2168754d 	cmncs	r8, sp, asr #10
    1610:	01000602 	tsteq	r0, r2, lsl #12
    1614:	02050001 	andeq	r0, r5, #1
    1618:	08003c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, ip, sp}
    161c:	77012803 	strvc	r2, [r1, -r3, lsl #16]
    1620:	32302f2f 	eorscc	r2, r0, #47, 30	; 0xbc
    1624:	0402005a 	streq	r0, [r2], #-90	; 0xffffffa6
    1628:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    162c:	3d3d5a3e 	vldmdbcc	sp!, {s10-s71}
    1630:	3d5bad30 	ldclcc	13, cr10, [fp, #-192]	; 0xffffff40
    1634:	03200d03 			; <UNDEFINED> instruction: 0x03200d03
    1638:	00764a75 	rsbseq	r4, r6, r5, ror sl
    163c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1640:	003e064a 	eorseq	r0, lr, sl, asr #12
    1644:	06010402 	streq	r0, [r1], -r2, lsl #8
    1648:	004c063c 	subeq	r0, ip, ip, lsr r6
    164c:	06020402 	streq	r0, [r2], -r2, lsl #8
    1650:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    1654:	59068201 	stmdbpl	r6, {r0, r9, pc}
    1658:	59253d59 	stmdbpl	r5!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
    165c:	215a595b 	cmpcs	sl, fp, asr r9
    1660:	01000602 	tsteq	r0, r2, lsl #12
    1664:	02050001 	andeq	r0, r5, #1
    1668:	08003d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp, ip, sp}
    166c:	0100ea03 	tsteq	r0, r3, lsl #20
    1670:	0200cb78 	andeq	ip, r0, #120, 22	; 0x1e000
    1674:	58060104 	stmdapl	r6, {r2, r8}
    1678:	59753006 	ldmdbpl	r5!, {r1, r2, ip, sp}^
    167c:	0402005a 	streq	r0, [r2], #-90	; 0xffffffa6
    1680:	05022f01 	streq	r2, [r2, #-3841]	; 0xfffff0ff
    1684:	00010100 	andeq	r0, r1, r0, lsl #2
    1688:	3dd80205 	lfmcc	f0, 2, [r8, #20]
    168c:	87030800 	strhi	r0, [r3, -r0, lsl #16]
    1690:	e6b00101 	ldrt	r0, [r0], r1, lsl #2
    1694:	01040200 	mrseq	r0, R12_usr
    1698:	30065806 	andcc	r5, r6, r6, lsl #16
    169c:	75758391 	ldrbvc	r8, [r5, #-913]!	; 0xfffffc6f
    16a0:	2a027775 	bcs	9f47c <_Min_Stack_Size+0x9f27c>
    16a4:	bbbbad16 	bllt	feeecb04 <BootRAM+0xde5d2a5>
    16a8:	200903bb 			; <UNDEFINED> instruction: 0x200903bb
    16ac:	040200e5 	streq	r0, [r2], #-229	; 0xffffff1b
    16b0:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    16b4:	9f229130 	svcls	0x00229130
    16b8:	22919f92 	addscs	r9, r1, #584	; 0x248
    16bc:	0200e576 	andeq	lr, r0, #494927872	; 0x1d800000
    16c0:	58060104 	stmdapl	r6, {r2, r8}
    16c4:	23913006 	orrscs	r3, r1, #6
    16c8:	040200e5 	streq	r0, [r2], #-229	; 0xffffff1b
    16cc:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    16d0:	00e59330 	rsceq	r9, r5, r0, lsr r3
    16d4:	06010402 	streq	r0, [r1], -r2, lsl #8
    16d8:	92300658 	eorsls	r0, r0, #88, 12	; 0x5800000
    16dc:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
    16e0:	00232675 	eoreq	r2, r3, r5, ror r6
    16e4:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    16e8:	01000502 	tsteq	r0, r2, lsl #10
    16ec:	02050001 	andeq	r0, r5, #1
    16f0:	080040dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, lr}
    16f4:	0101e703 	tsteq	r1, r3, lsl #14
    16f8:	755a2f6c 	ldrbvc	r2, [sl, #-3948]	; 0xfffff094
    16fc:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
    1700:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    1704:	0200923e 	andeq	r9, r0, #-536870909	; 0xe0000003
    1708:	58060104 	stmdapl	r6, {r2, r8}
    170c:	02003d06 	andeq	r3, r0, #384	; 0x180
    1710:	58060104 	stmdapl	r6, {r2, r8}
    1714:	02003d06 	andeq	r3, r0, #384	; 0x180
    1718:	58060104 	stmdapl	r6, {r2, r8}
    171c:	02003d06 	andeq	r3, r0, #384	; 0x180
    1720:	58060104 	stmdapl	r6, {r2, r8}
    1724:	91753e06 	cmnls	r5, r6, lsl #28
    1728:	3f949191 	svccc	0x00949191
    172c:	03040200 	movweq	r0, #16896	; 0x4200
    1730:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    1734:	02005603 	andeq	r5, r0, #3145728	; 0x300000
    1738:	3c060104 	stfccs	f0, [r6], {4}
    173c:	02005e06 	andeq	r5, r0, #6, 28	; 0x60
    1740:	003e0304 	eorseq	r0, lr, r4, lsl #6
    1744:	64030402 	strvs	r0, [r3], #-1026	; 0xfffffbfe
    1748:	01040200 	mrseq	r0, R12_usr
    174c:	5e063c06 	cdppl	12, 0, cr3, cr6, cr6, {0}
    1750:	03040200 	movweq	r0, #16896	; 0x4200
    1754:	02003c06 	andeq	r3, r0, #1536	; 0x600
    1758:	063c0104 	ldrteq	r0, [ip], -r4, lsl #2
    175c:	0402005e 	streq	r0, [r2], #-94	; 0xffffffa2
    1760:	003c0603 	eorseq	r0, ip, r3, lsl #12
    1764:	3c010402 	cfstrscc	mvf0, [r1], {2}
    1768:	02005d06 	andeq	r5, r0, #384	; 0x180
    176c:	4a060104 	bmi	181b84 <_Min_Stack_Size+0x181984>
    1770:	02212f06 	eoreq	r2, r1, #6, 30
    1774:	01010004 	tsteq	r1, r4
    1778:	0000017f 	andeq	r0, r0, pc, ror r1
    177c:	009f0002 	addseq	r0, pc, r2
    1780:	01020000 	mrseq	r0, (UNDEF: 2)
    1784:	000d0efb 	strdeq	r0, [sp], -fp
    1788:	01010101 	tsteq	r1, r1, lsl #2
    178c:	01000000 	mrseq	r0, (UNDEF: 0)
    1790:	2f010000 	svccs	0x00010000
    1794:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1798:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    179c:	2f767375 	svccs	0x00767375
    17a0:	41534454 	cmpmi	r3, r4, asr r4
    17a4:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    17a8:	492f544f 	stmdbmi	pc!, {r0, r1, r2, r3, r6, sl, ip, lr}	; <UNPREDICTABLE>
    17ac:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    17b0:	2f74656e 	svccs	0x0074656e
    17b4:	00534e44 	subseq	r4, r3, r4, asr #28
    17b8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    17bc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    17c0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    17c4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    17c8:	2f62696c 	svccs	0x0062696c
    17cc:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    17d0:	00656e69 	rsbeq	r6, r5, r9, ror #28
    17d4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    17d8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    17dc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    17e0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    17e4:	2f62696c 	svccs	0x0062696c
    17e8:	00737973 	rsbseq	r7, r3, r3, ror r9
    17ec:	736e6400 	cmnvc	lr, #0, 8
    17f0:	0100632e 	tsteq	r0, lr, lsr #6
    17f4:	645f0000 	ldrbvs	r0, [pc], #-0	; 17fc <_Min_Stack_Size+0x15fc>
    17f8:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    17fc:	745f746c 	ldrbvc	r7, [pc], #-1132	; 1804 <_Min_Stack_Size+0x1604>
    1800:	73657079 	cmnvc	r5, #121	; 0x79
    1804:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1808:	735f0000 	cmpvc	pc, #0
    180c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1810:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1814:	64000003 	strvs	r0, [r0], #-3
    1818:	682e736e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
    181c:	00000100 	andeq	r0, r0, r0, lsl #2
    1820:	02050000 	andeq	r0, r5, #0
    1824:	08004254 	stmdaeq	r0, {r2, r4, r6, r9, lr}
    1828:	67013303 	strvs	r3, [r1, -r3, lsl #6]
    182c:	02216883 	eoreq	r6, r1, #8585216	; 0x830000
    1830:	01010006 	tsteq	r1, r6
    1834:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    1838:	03080042 	movweq	r0, #32834	; 0x8042
    183c:	080100c9 	stmdaeq	r1, {r0, r3, r6, r7}
    1840:	91674c28 	cmnls	r7, r8, lsr #24
    1844:	7575919f 	ldrbvc	r9, [r5, #-415]!	; 0xfffffe61
    1848:	4b837675 	blmi	fe0df224 <BootRAM+0xd04f9c5>
    184c:	02007678 	andeq	r7, r0, #120, 12	; 0x7800000
    1850:	4a060104 	bmi	181c68 <_Min_Stack_Size+0x181a68>
    1854:	9f5a9106 	svcls	0x005a9106
    1858:	4c839f69 	stcmi	15, cr9, [r3], {105}	; 0x69
    185c:	9f912275 	svcls	0x00912275
    1860:	75767522 	ldrbvc	r7, [r6, #-1314]!	; 0xfffffade
    1864:	01000702 	tsteq	r0, r2, lsl #14
    1868:	02050001 	andeq	r0, r5, #1
    186c:	08004448 	stmdaeq	r0, {r3, r6, sl, lr}
    1870:	01018703 	tsteq	r1, r3, lsl #14
    1874:	a0a3ad6d 	adcge	sl, r3, sp, ror #26
    1878:	01040200 	mrseq	r0, R12_usr
    187c:	3d064a06 	vstrcc	s8, [r6, #-24]	; 0xffffffe8
    1880:	201d03e5 	andscs	r0, sp, r5, ror #7
    1884:	5aac6703 	bpl	feb1b498 <BootRAM+0xda8bc39>
    1888:	0851304f 	ldmdaeq	r1, {r0, r1, r2, r3, r6, ip, sp}^
    188c:	00a09223 	adceq	r9, r0, r3, lsr #4
    1890:	23010402 	movwcs	r0, #5122	; 0x1402
    1894:	01000a02 	tsteq	r0, r2, lsl #20
    1898:	02050001 	andeq	r0, r5, #1
    189c:	08004554 	stmdaeq	r0, {r2, r4, r6, r8, sl, lr}
    18a0:	0101c403 	tsteq	r1, r3, lsl #8
    18a4:	3d3d3e67 	ldccc	14, cr3, [sp, #-412]!	; 0xfffffe64
    18a8:	9122084e 			; <UNDEFINED> instruction: 0x9122084e
    18ac:	01000c02 	tsteq	r0, r2, lsl #24
    18b0:	02050001 	andeq	r0, r5, #1
    18b4:	080045c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, lr}
    18b8:	0101e103 	tsteq	r1, r3, lsl #2
    18bc:	413d767b 	teqmi	sp, fp, ror r6
    18c0:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
    18c4:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    18c8:	02215b40 	eoreq	r5, r1, #64, 22	; 0x10000
    18cc:	01010007 	tsteq	r1, r7
    18d0:	24020500 	strcs	r0, [r2], #-1280	; 0xfffffb00
    18d4:	03080046 	movweq	r0, #32838	; 0x8046
    18d8:	31010287 	smlabbcc	r1, r7, r2, r0
    18dc:	3d4b3d4c 	stclcc	13, cr3, [fp, #-304]	; 0xfffffed0
    18e0:	2f316730 	svccs	0x00316730
    18e4:	01000a02 	tsteq	r0, r2, lsl #20
    18e8:	02050001 	andeq	r0, r5, #1
    18ec:	00000000 	andeq	r0, r0, r0
    18f0:	0102a303 	tsteq	r2, r3, lsl #6
    18f4:	0702592f 	streq	r5, [r2, -pc, lsr #18]
    18f8:	c2010100 	andgt	r0, r1, #0, 2
    18fc:	02000001 	andeq	r0, r0, #1
    1900:	00015000 	andeq	r5, r1, r0
    1904:	fb010200 	blx	4210e <_Min_Stack_Size+0x41f0e>
    1908:	01000d0e 	tsteq	r0, lr, lsl #26
    190c:	00010101 	andeq	r0, r1, r1, lsl #2
    1910:	00010000 	andeq	r0, r1, r0
    1914:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    1918:	2f656d6f 	svccs	0x00656d6f
    191c:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    1920:	542f7673 	strtpl	r7, [pc], #-1651	; 1928 <_Min_Stack_Size+0x1728>
    1924:	53415344 	movtpl	r5, #4932	; 0x1344
    1928:	4f495f54 	svcmi	0x00495f54
    192c:	694c2f54 	stmdbvs	ip, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1930:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    1934:	2f736569 	svccs	0x00736569
    1938:	00637273 	rsbeq	r7, r3, r3, ror r2
    193c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1940:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1944:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1948:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    194c:	2f62696c 	svccs	0x0062696c
    1950:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    1954:	00656e69 	rsbeq	r6, r5, r9, ror #28
    1958:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    195c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1960:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1964:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1968:	2f62696c 	svccs	0x0062696c
    196c:	00737973 	rsbseq	r7, r3, r3, ror r9
    1970:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 18bc <_Min_Stack_Size+0x16bc>
    1974:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1978:	76737572 			; <UNDEFINED> instruction: 0x76737572
    197c:	5344542f 	movtpl	r5, #17455	; 0x442f
    1980:	5f545341 	svcpl	0x00545341
    1984:	2f544f49 	svccs	0x00544f49
    1988:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    198c:	4d432f53 	stclmi	15, cr2, [r3, #-332]	; 0xfffffeb4
    1990:	6f432f33 	svcvs	0x00432f33
    1994:	75536572 	ldrbvc	r6, [r3, #-1394]	; 0xfffffa8e
    1998:	726f7070 	rsbvc	r7, pc, #112	; 0x70
    199c:	682f0074 	stmdavs	pc!, {r2, r4, r5, r6}	; <UNPREDICTABLE>
    19a0:	2f656d6f 	svccs	0x00656d6f
    19a4:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    19a8:	542f7673 	strtpl	r7, [pc], #-1651	; 19b0 <_Min_Stack_Size+0x17b0>
    19ac:	53415344 	movtpl	r5, #4932	; 0x1344
    19b0:	4f495f54 	svcmi	0x00495f54
    19b4:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    19b8:	2f534953 	svccs	0x00534953
    19bc:	2f334d43 	svccs	0x00334d43
    19c0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    19c4:	75536563 	ldrbvc	r6, [r3, #-1379]	; 0xfffffa9d
    19c8:	726f7070 	rsbvc	r7, pc, #112	; 0x70
    19cc:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
    19d0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    19d4:	31463233 	cmpcc	r6, r3, lsr r2
    19d8:	2f007830 	svccs	0x00007830
    19dc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    19e0:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    19e4:	2f767375 	svccs	0x00767375
    19e8:	41534454 	cmpmi	r3, r4, asr r4
    19ec:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    19f0:	4c2f544f 	cfstrsmi	mvf5, [pc], #-316	; 18bc <_Min_Stack_Size+0x16bc>
    19f4:	61726269 	cmnvs	r2, r9, ror #4
    19f8:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    19fc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1a00:	696d0000 	stmdbvs	sp!, {}^	; <UNPREDICTABLE>
    1a04:	632e6373 			; <UNDEFINED> instruction: 0x632e6373
    1a08:	00000100 	andeq	r0, r0, r0, lsl #2
    1a0c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    1a10:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    1a14:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1a18:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1a1c:	00000200 	andeq	r0, r0, r0, lsl #4
    1a20:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    1a24:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1a28:	00030068 	andeq	r0, r3, r8, rrx
    1a2c:	726f6300 	rsbvc	r6, pc, #0, 6
    1a30:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    1a34:	00682e33 	rsbeq	r2, r8, r3, lsr lr
    1a38:	73000004 	movwvc	r0, #4
    1a3c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1a40:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1a44:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    1a48:	696d0000 	stmdbvs	sp!, {}^	; <UNPREDICTABLE>
    1a4c:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    1a50:	00000600 	andeq	r0, r0, r0, lsl #12
    1a54:	02050000 	andeq	r0, r5, #0
    1a58:	00000000 	andeq	r0, r0, r0
    1a5c:	0100e003 	tsteq	r0, r3
    1a60:	0702754f 	streq	r7, [r2, -pc, asr #10]
    1a64:	00010100 	andeq	r0, r1, r0, lsl #2
    1a68:	46700205 	ldrbtmi	r0, [r0], -r5, lsl #4
    1a6c:	f0030800 			; <UNDEFINED> instruction: 0xf0030800
    1a70:	6d4b0100 	stfvse	f0, [fp, #-0]
    1a74:	5a4b754d 	bpl	12defb0 <_Min_Stack_Size+0x12dedb0>
    1a78:	933e8375 	teqls	lr, #-738197503	; 0xd4000001
    1a7c:	67427367 	strbvs	r7, [r2, -r7, ror #6]
    1a80:	09024d65 	stmdbeq	r2, {r0, r2, r5, r6, r8, sl, fp, lr}
    1a84:	00010100 	andeq	r0, r1, r0, lsl #2
    1a88:	00000205 	andeq	r0, r0, r5, lsl #4
    1a8c:	9c030000 	stcls	0, cr0, [r3], {-0}
    1a90:	915d0101 	cmpls	sp, r1, lsl #2
    1a94:	01000802 	tsteq	r0, r2, lsl #16
    1a98:	02050001 	andeq	r0, r5, #1
    1a9c:	00000000 	andeq	r0, r0, r0
    1aa0:	0101af03 	tsteq	r1, r3, lsl #30
    1aa4:	76783e87 	ldrbtvc	r3, [r8], -r7, lsl #29
    1aa8:	01000702 	tsteq	r0, r2, lsl #14
    1aac:	02050001 	andeq	r0, r5, #1
    1ab0:	00000000 	andeq	r0, r0, r0
    1ab4:	0101c703 	tsteq	r1, r3, lsl #14
    1ab8:	68783e4d 	ldmdavs	r8!, {r0, r2, r3, r6, r9, sl, fp, ip, sp}^
    1abc:	01000802 	tsteq	r0, r2, lsl #16
    1ac0:	00044101 	andeq	r4, r4, r1, lsl #2
    1ac4:	62000200 	andvs	r0, r0, #0, 4
    1ac8:	02000001 	andeq	r0, r0, #1
    1acc:	0d0efb01 	vstreq	d15, [lr, #-4]
    1ad0:	01010100 	mrseq	r0, (UNDEF: 17)
    1ad4:	00000001 	andeq	r0, r0, r1
    1ad8:	01000001 	tsteq	r0, r1
    1adc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1a28 <_Min_Stack_Size+0x1828>
    1ae0:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1ae4:	76737572 			; <UNDEFINED> instruction: 0x76737572
    1ae8:	5344542f 	movtpl	r5, #17455	; 0x442f
    1aec:	5f545341 	svcpl	0x00545341
    1af0:	2f544f49 	svccs	0x00544f49
    1af4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1af8:	65697261 	strbvs	r7, [r9, #-609]!	; 0xfffffd9f
    1afc:	72732f73 	rsbsvc	r2, r3, #460	; 0x1cc
    1b00:	752f0063 	strvc	r0, [pc, #-99]!	; 1aa5 <_Min_Stack_Size+0x18a5>
    1b04:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1b08:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1b0c:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    1b10:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1b14:	616d2f62 	cmnvs	sp, r2, ror #30
    1b18:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    1b1c:	752f0065 	strvc	r0, [pc, #-101]!	; 1abf <_Min_Stack_Size+0x18bf>
    1b20:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1b24:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1b28:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    1b2c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1b30:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    1b34:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    1b38:	2f656d6f 	svccs	0x00656d6f
    1b3c:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    1b40:	542f7673 	strtpl	r7, [pc], #-1651	; 1b48 <_Min_Stack_Size+0x1948>
    1b44:	53415344 	movtpl	r5, #4932	; 0x1344
    1b48:	4f495f54 	svcmi	0x00495f54
    1b4c:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    1b50:	2f534953 	svccs	0x00534953
    1b54:	2f334d43 	svccs	0x00334d43
    1b58:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    1b5c:	75536563 	ldrbvc	r6, [r3, #-1379]	; 0xfffffa9d
    1b60:	726f7070 	rsbvc	r7, pc, #112	; 0x70
    1b64:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
    1b68:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1b6c:	31463233 	cmpcc	r6, r3, lsr r2
    1b70:	2f007830 	svccs	0x00007830
    1b74:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1b78:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    1b7c:	2f767375 	svccs	0x00767375
    1b80:	41534454 	cmpmi	r3, r4, asr r4
    1b84:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1b88:	4c2f544f 	cfstrsmi	mvf5, [pc], #-316	; 1a54 <_Min_Stack_Size+0x1854>
    1b8c:	61726269 	cmnvs	r2, r9, ror #4
    1b90:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    1b94:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1b98:	6f682f00 	svcvs	0x00682f00
    1b9c:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    1ba0:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    1ba4:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    1ba8:	54534153 	ldrbpl	r4, [r3], #-339	; 0xfffffead
    1bac:	544f495f 	strbpl	r4, [pc], #-2399	; 1bb4 <_Min_Stack_Size+0x19b4>
    1bb0:	534d432f 	movtpl	r4, #54063	; 0xd32f
    1bb4:	432f5349 			; <UNDEFINED> instruction: 0x432f5349
    1bb8:	432f334d 			; <UNDEFINED> instruction: 0x432f334d
    1bbc:	5365726f 	cmnpl	r5, #-268435450	; 0xf0000006
    1bc0:	6f707075 	svcvs	0x00707075
    1bc4:	00007472 	andeq	r7, r0, r2, ror r4
    1bc8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1bcc:	30316632 	eorscc	r6, r1, r2, lsr r6
    1bd0:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
    1bd4:	00632e63 	rsbeq	r2, r3, r3, ror #28
    1bd8:	5f000001 	svcpl	0x00000001
    1bdc:	61666564 	cmnvs	r6, r4, ror #10
    1be0:	5f746c75 	svcpl	0x00746c75
    1be4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    1be8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1bec:	5f000002 	svcpl	0x00000002
    1bf0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1bf4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1bf8:	00000300 	andeq	r0, r0, r0, lsl #6
    1bfc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1c00:	30316632 	eorscc	r6, r1, r2, lsr r6
    1c04:	00682e78 	rsbeq	r2, r8, r8, ror lr
    1c08:	73000004 	movwvc	r0, #4
    1c0c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1c10:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1c14:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    1c18:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    1c1c:	6f630000 	svcvs	0x00630000
    1c20:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    1c24:	682e336d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
    1c28:	00000600 	andeq	r0, r0, r0, lsl #12
    1c2c:	02050000 	andeq	r0, r5, #0
    1c30:	00000000 	andeq	r0, r0, r0
    1c34:	0101d903 	tsteq	r1, r3, lsl #18
    1c38:	856c6a30 	strbhi	r6, [ip, #-2608]!	; 0xfffff5d0
    1c3c:	66130369 	ldrvs	r0, [r3], -r9, ror #6
    1c40:	0008024d 	andeq	r0, r8, sp, asr #4
    1c44:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1c48:	00000002 	andeq	r0, r0, r2
    1c4c:	028e0300 	addeq	r0, lr, #0, 6
    1c50:	68684f01 	stmdavs	r8!, {r0, r8, r9, sl, fp, lr}^
    1c54:	03740d03 	cmneq	r4, #3, 26	; 0xc0
    1c58:	24672077 	strbtcs	r2, [r7], #-119	; 0xffffff89
    1c5c:	08022567 	stmdaeq	r2, {r0, r1, r2, r5, r6, r8, sl, sp}
    1c60:	00010100 	andeq	r0, r1, r0, lsl #2
    1c64:	00000205 	andeq	r0, r0, r5, lsl #4
    1c68:	b0030000 	andlt	r0, r3, r0
    1c6c:	2f3d0102 	svccs	0x003d0102
    1c70:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    1c74:	02003302 	andeq	r3, r0, #134217728	; 0x8000000
    1c78:	00590204 	subseq	r0, r9, r4, lsl #4
    1c7c:	3d020402 	cfstrscc	mvf0, [r2, #-8]
    1c80:	01040200 	mrseq	r0, R12_usr
    1c84:	3e064a06 	vmlacc.f32	s8, s12, s12
    1c88:	21304068 	teqcs	r0, r8, rrx
    1c8c:	01000402 	tsteq	r0, r2, lsl #8
    1c90:	02050001 	andeq	r0, r5, #1
    1c94:	00000000 	andeq	r0, r0, r0
    1c98:	0102ce03 	tsteq	r2, r3, lsl #28
    1c9c:	4c3e3159 	ldfmis	f3, [lr], #-356	; 0xfffffe9c
    1ca0:	08023d5a 	stmdaeq	r2, {r1, r3, r4, r6, r8, sl, fp, ip, sp}
    1ca4:	00010100 	andeq	r0, r1, r0, lsl #2
    1ca8:	00000205 	andeq	r0, r0, r5, lsl #4
    1cac:	e2030000 	and	r0, r3, #0
    1cb0:	3d5b0102 	ldfcce	f0, [fp, #-8]
    1cb4:	01000802 	tsteq	r0, r2, lsl #16
    1cb8:	02050001 	andeq	r0, r5, #1
    1cbc:	00000000 	andeq	r0, r0, r0
    1cc0:	0102fa03 	tsteq	r2, r3, lsl #20	; <UNPREDICTABLE>
    1cc4:	4c3e3459 	cfldrsmi	mvf3, [lr], #-356	; 0xfffffe9c
    1cc8:	07023d68 	streq	r3, [r2, -r8, ror #26]
    1ccc:	00010100 	andeq	r0, r1, r0, lsl #2
    1cd0:	00000205 	andeq	r0, r0, r5, lsl #4
    1cd4:	91030000 	mrsls	r0, (UNDEF: 3)
    1cd8:	3d5c0103 	ldfcce	f0, [ip, #-12]
    1cdc:	01000802 	tsteq	r0, r2, lsl #16
    1ce0:	02050001 	andeq	r0, r5, #1
    1ce4:	00000000 	andeq	r0, r0, r0
    1ce8:	0104b403 	tsteq	r4, r3, lsl #8
    1cec:	4c3e314b 	ldfmis	f3, [lr], #-300	; 0xfffffed4
    1cf0:	08023d4c 	stmdaeq	r2, {r2, r3, r6, r8, sl, fp, ip, sp}
    1cf4:	00010100 	andeq	r0, r1, r0, lsl #2
    1cf8:	00000205 	andeq	r0, r0, r5, lsl #4
    1cfc:	cb030000 	blgt	c1d04 <_Min_Stack_Size+0xc1b04>
    1d00:	672f0104 	strvs	r0, [pc, -r4, lsl #2]!
    1d04:	01000802 	tsteq	r0, r2, lsl #16
    1d08:	02050001 	andeq	r0, r5, #1
    1d0c:	00000000 	andeq	r0, r0, r0
    1d10:	0104e003 	tsteq	r4, r3
    1d14:	4c3e314b 	ldfmis	f3, [lr], #-300	; 0xfffffed4
    1d18:	08023d4c 	stmdaeq	r2, {r2, r3, r6, r8, sl, fp, ip, sp}
    1d1c:	00010100 	andeq	r0, r1, r0, lsl #2
    1d20:	00000205 	andeq	r0, r0, r5, lsl #4
    1d24:	fa030000 	blx	c1d2c <_Min_Stack_Size+0xc1b2c>
    1d28:	314b0104 	cmpcc	fp, r4, lsl #2
    1d2c:	3d4c4c3e 	stclcc	12, cr4, [ip, #-248]	; 0xffffff08
    1d30:	01000802 	tsteq	r0, r2, lsl #16
    1d34:	02050001 	andeq	r0, r5, #1
    1d38:	00000000 	andeq	r0, r0, r0
    1d3c:	01059403 	tsteq	r5, r3, lsl #8
    1d40:	4c3e314b 	ldfmis	f3, [lr], #-300	; 0xfffffed4
    1d44:	07023d5a 	smlsdeq	r2, sl, sp, r3
    1d48:	00010100 	andeq	r0, r1, r0, lsl #2
    1d4c:	00000205 	andeq	r0, r0, r5, lsl #4
    1d50:	bc030000 	stclt	0, cr0, [r3], {-0}
    1d54:	3f860105 	svccc	0x00860105
    1d58:	0802a095 	stmdaeq	r2, {r0, r2, r4, r7, sp, pc}
    1d5c:	00010100 	andeq	r0, r1, r0, lsl #2
    1d60:	00000205 	andeq	r0, r0, r5, lsl #4
    1d64:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    1d68:	3d4e0105 	stfcce	f0, [lr, #-20]	; 0xffffffec
    1d6c:	01000702 	tsteq	r0, r2, lsl #14
    1d70:	02050001 	andeq	r0, r5, #1
    1d74:	00000000 	andeq	r0, r0, r0
    1d78:	0105fe03 	tsteq	r5, r3, lsl #28	; <UNPREDICTABLE>
    1d7c:	4c3e314b 	ldfmis	f3, [lr], #-300	; 0xfffffed4
    1d80:	08023d4c 	stmdaeq	r2, {r2, r3, r6, r8, sl, fp, ip, sp}
    1d84:	00010100 	andeq	r0, r1, r0, lsl #2
    1d88:	00000205 	andeq	r0, r0, r5, lsl #4
    1d8c:	bd030000 	stclt	0, cr0, [r3, #-0]
    1d90:	3e5d0106 	rdfcce	f0, f5, f6
    1d94:	580d033e 	stmdapl	sp, {r1, r2, r3, r4, r5, r8, r9}
    1d98:	3d207703 	stccc	7, cr7, [r0, #-12]!
    1d9c:	02253d24 	eoreq	r3, r5, #36, 26	; 0x900
    1da0:	01010007 	tsteq	r1, r7
    1da4:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
    1da8:	03080047 	movweq	r0, #32839	; 0x8047
    1dac:	5b0106de 	blpl	4392c <_Min_Stack_Size+0x4372c>
    1db0:	0008023d 	andeq	r0, r8, sp, lsr r2
    1db4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1db8:	00000002 	andeq	r0, r0, r2
    1dbc:	06ef0300 	strbteq	r0, [pc], r0, lsl #6
    1dc0:	02674e01 	rsbeq	r4, r7, #1, 28
    1dc4:	01010008 	tsteq	r1, r8
    1dc8:	00020500 	andeq	r0, r2, r0, lsl #10
    1dcc:	03000000 	movweq	r0, #0
    1dd0:	5b0106fd 	blpl	439cc <_Min_Stack_Size+0x437cc>
    1dd4:	0008023d 	andeq	r0, r8, sp, lsr r2
    1dd8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1ddc:	00475402 	subeq	r5, r7, r2, lsl #8
    1de0:	078c0308 	streq	r0, [ip, r8, lsl #6]
    1de4:	0b034b01 	bleq	d49f0 <_Min_Stack_Size+0xd47f0>
    1de8:	3d775a82 	vldmdbcc	r7!, {s11-s140}
    1dec:	59243d22 	stmdbpl	r4!, {r1, r5, r8, sl, fp, ip, sp}
    1df0:	033e4c5b 	teqeq	lr, #23296	; 0x5b00
    1df4:	7868740a 	stmdavc	r8!, {r1, r3, sl, ip, sp, lr}^
    1df8:	31662903 	cmncc	r6, r3, lsl #18
    1dfc:	3d59253d 	cfldr64cc	mvdx2, [r9, #-244]	; 0xffffff0c
    1e00:	3d596868 	ldclcc	8, cr6, [r9, #-416]	; 0xfffffe60
    1e04:	3d596868 	ldclcc	8, cr6, [r9, #-416]	; 0xfffffe60
    1e08:	3d596868 	ldclcc	8, cr6, [r9, #-416]	; 0xfffffe60
    1e0c:	10027568 	andne	r7, r2, r8, ror #10
    1e10:	00010100 	andeq	r0, r1, r0, lsl #2
    1e14:	00000205 	andeq	r0, r0, r5, lsl #4
    1e18:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
    1e1c:	3e6b0108 	powcce	f0, f3, #0.0
    1e20:	07027678 	smlsdxeq	r2, r8, r6, r7
    1e24:	00010100 	andeq	r0, r1, r0, lsl #2
    1e28:	48b80205 	ldmmi	r8!, {r0, r2, r9}
    1e2c:	c7030800 	strgt	r0, [r3, -r0, lsl #16]
    1e30:	3e6a0108 	powcce	f0, f2, #0.0
    1e34:	07027678 	smlsdxeq	r2, r8, r6, r7
    1e38:	00010100 	andeq	r0, r1, r0, lsl #2
    1e3c:	48f40205 	ldmmi	r4!, {r0, r2, r9}^
    1e40:	e6030800 	str	r0, [r3], -r0, lsl #16
    1e44:	3e6a0108 	powcce	f0, f2, #0.0
    1e48:	07027678 	smlsdxeq	r2, r8, r6, r7
    1e4c:	00010100 	andeq	r0, r1, r0, lsl #2
    1e50:	00000205 	andeq	r0, r0, r5, lsl #4
    1e54:	a1030000 	mrsge	r0, (UNDEF: 3)
    1e58:	3e6a0109 	powcce	f0, f2, #1.0
    1e5c:	07027678 	smlsdxeq	r2, r8, r6, r7
    1e60:	00010100 	andeq	r0, r1, r0, lsl #2
    1e64:	49300205 	ldmdbmi	r0!, {r0, r2, r9}
    1e68:	c0030800 	andgt	r0, r3, r0, lsl #16
    1e6c:	3e6a0109 	powcce	f0, f2, #1.0
    1e70:	07027678 	smlsdxeq	r2, r8, r6, r7
    1e74:	00010100 	andeq	r0, r1, r0, lsl #2
    1e78:	00000205 	andeq	r0, r0, r5, lsl #4
    1e7c:	d5030000 	strle	r0, [r3, #-0]
    1e80:	3d5b0109 	ldfcce	f0, [fp, #-36]	; 0xffffffdc
    1e84:	01000802 	tsteq	r0, r2, lsl #16
    1e88:	02050001 	andeq	r0, r5, #1
    1e8c:	00000000 	andeq	r0, r0, r0
    1e90:	0109e203 	tsteq	r9, r3, lsl #4
    1e94:	08023d5b 	stmdaeq	r2, {r0, r1, r3, r4, r6, r8, sl, fp, ip, sp}
    1e98:	00010100 	andeq	r0, r1, r0, lsl #2
    1e9c:	00000205 	andeq	r0, r0, r5, lsl #4
    1ea0:	82030000 	andhi	r0, r3, #0
    1ea4:	3d5d010a 	ldfcce	f0, [sp, #-40]	; 0xffffffd8
    1ea8:	01000802 	tsteq	r0, r2, lsl #16
    1eac:	02050001 	andeq	r0, r5, #1
    1eb0:	0800496c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp, lr}
    1eb4:	010aae03 	tsteq	sl, r3, lsl #28
    1eb8:	332f2f59 			; <UNDEFINED> instruction: 0x332f2f59
    1ebc:	3e4c3e4b 	cdpcc	14, 4, cr3, cr12, cr11, {2}
    1ec0:	844b404e 	strbhi	r4, [fp], #-78	; 0xffffffb2
    1ec4:	02213240 	eoreq	r3, r1, #64, 4
    1ec8:	01010008 	tsteq	r1, r8
    1ecc:	00020500 	andeq	r0, r2, r0, lsl #10
    1ed0:	03000000 	movweq	r0, #0
    1ed4:	30010adb 	ldrdcc	r0, [r1], -fp
    1ed8:	00060267 	andeq	r0, r6, r7, ror #4
    1edc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1ee0:	00000002 	andeq	r0, r0, r2
    1ee4:	0afa0300 	beq	ffe82aec <BootRAM+0xedf328d>
    1ee8:	68335901 	ldmdavs	r3!, {r0, r8, fp, ip, lr}
    1eec:	02213240 	eoreq	r3, r1, #64, 4
    1ef0:	01010009 	tsteq	r1, r9
    1ef4:	00020500 	andeq	r0, r2, r0, lsl #10
    1ef8:	03000000 	movweq	r0, #0
    1efc:	5e010ba8 	vmlapl.f64	d0, d17, d24
    1f00:	0008023d 	andeq	r0, r8, sp, lsr r2
    1f04:	03340101 	teqeq	r4, #1073741824	; 0x40000000
    1f08:	00020000 	andeq	r0, r2, r0
    1f0c:	00000164 	andeq	r0, r0, r4, ror #2
    1f10:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1f14:	0101000d 	tsteq	r1, sp
    1f18:	00000101 	andeq	r0, r0, r1, lsl #2
    1f1c:	00000100 	andeq	r0, r0, r0, lsl #2
    1f20:	6f682f01 	svcvs	0x00682f01
    1f24:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    1f28:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    1f2c:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    1f30:	54534153 	ldrbpl	r4, [r3], #-339	; 0xfffffead
    1f34:	544f495f 	strbpl	r4, [pc], #-2399	; 1f3c <_Min_Stack_Size+0x1d3c>
    1f38:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1f3c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1f40:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
    1f44:	2f006372 	svccs	0x00006372
    1f48:	2f727375 	svccs	0x00727375
    1f4c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1f50:	2f656475 	svccs	0x00656475
    1f54:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1f58:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 1dbc <_Min_Stack_Size+0x1bbc>
    1f5c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    1f60:	2f00656e 	svccs	0x0000656e
    1f64:	2f727375 	svccs	0x00727375
    1f68:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1f6c:	2f656475 	svccs	0x00656475
    1f70:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1f74:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    1f78:	2f007379 	svccs	0x00007379
    1f7c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1f80:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    1f84:	2f767375 	svccs	0x00767375
    1f88:	41534454 	cmpmi	r3, r4, asr r4
    1f8c:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1f90:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    1f94:	5349534d 	movtpl	r5, #37709	; 0x934d
    1f98:	334d432f 	movtcc	r4, #54063	; 0xd32f
    1f9c:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    1fa0:	53656369 	cmnpl	r5, #-1543503871	; 0xa4000001
    1fa4:	6f707075 	svcvs	0x00707075
    1fa8:	532f7472 			; <UNDEFINED> instruction: 0x532f7472
    1fac:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xfffff0ac
    1fb0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1fb4:	00783031 	rsbseq	r3, r8, r1, lsr r0
    1fb8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1f04 <_Min_Stack_Size+0x1d04>
    1fbc:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1fc0:	76737572 			; <UNDEFINED> instruction: 0x76737572
    1fc4:	5344542f 	movtpl	r5, #17455	; 0x442f
    1fc8:	5f545341 	svcpl	0x00545341
    1fcc:	2f544f49 	svccs	0x00544f49
    1fd0:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1fd4:	65697261 	strbvs	r7, [r9, #-609]!	; 0xfffffd9f
    1fd8:	6e692f73 	mcrvs	15, 3, r2, cr9, cr3, {3}
    1fdc:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
    1fe0:	2f656d6f 	svccs	0x00656d6f
    1fe4:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    1fe8:	542f7673 	strtpl	r7, [pc], #-1651	; 1ff0 <_Min_Stack_Size+0x1df0>
    1fec:	53415344 	movtpl	r5, #4932	; 0x1344
    1ff0:	4f495f54 	svcmi	0x00495f54
    1ff4:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    1ff8:	2f534953 	svccs	0x00534953
    1ffc:	2f334d43 	svccs	0x00334d43
    2000:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    2004:	70707553 	rsbsvc	r7, r0, r3, asr r5
    2008:	0074726f 	rsbseq	r7, r4, pc, ror #4
    200c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2010:	31663233 	cmncc	r6, r3, lsr r2
    2014:	675f7830 	smmlarvs	pc, r0, r8, r7	; <UNPREDICTABLE>
    2018:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
    201c:	00010063 	andeq	r0, r1, r3, rrx
    2020:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    2024:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    2028:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    202c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    2030:	00020068 	andeq	r0, r2, r8, rrx
    2034:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    2038:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    203c:	0300682e 	movweq	r6, #2094	; 0x82e
    2040:	74730000 	ldrbtvc	r0, [r3], #-0
    2044:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2048:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
    204c:	00040068 	andeq	r0, r4, r8, rrx
    2050:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2054:	31663233 	cmncc	r6, r3, lsr r2
    2058:	675f7830 	smmlarvs	pc, r0, r8, r7	; <UNPREDICTABLE>
    205c:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
    2060:	00050068 	andeq	r0, r5, r8, rrx
    2064:	726f6300 	rsbvc	r6, pc, #0, 6
    2068:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    206c:	00682e33 	rsbeq	r2, r8, r3, lsr lr
    2070:	00000006 	andeq	r0, r0, r6
    2074:	00020500 	andeq	r0, r2, r0, lsl #10
    2078:	03000000 	movweq	r0, #0
    207c:	4e0100ec 	cdpmi	0, 0, cr0, cr1, cr12, {7}
    2080:	4c5a4b4c 	mrrcmi	11, 4, r4, sl, cr12
    2084:	4b4c5a4b 	blmi	13189b8 <_Min_Stack_Size+0x13187b8>
    2088:	5a4b4c5a 	bpl	12d51f8 <_Min_Stack_Size+0x12d4ff8>
    208c:	4c5a4b4c 	mrrcmi	11, 4, r4, sl, cr12
    2090:	594c5c4b 	stmdbpl	ip, {r0, r1, r3, r6, sl, fp, ip, lr}^
    2094:	0012025b 	andseq	r0, r2, fp, asr r2
    2098:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    209c:	00000002 	andeq	r0, r0, r2
    20a0:	019f0300 	orrseq	r0, pc, r0, lsl #6
    20a4:	4b4b2f01 	blmi	12cdcb0 <_Min_Stack_Size+0x12cdab0>
    20a8:	01000102 	tsteq	r0, r2, lsl #2
    20ac:	02050001 	andeq	r0, r5, #1
    20b0:	080049e0 	stmdaeq	r0, {r5, r6, r7, r8, fp, lr}
    20b4:	0101ad03 	tsteq	r1, r3, lsl #26
    20b8:	59518359 	ldmdbpl	r1, {r0, r3, r4, r6, r8, r9, pc}^
    20bc:	3d5a6a6b 	vldrcc	s13, [sl, #-428]	; 0xfffffe54
    20c0:	4c675a3e 	stclmi	10, cr5, [r7], #-248	; 0xffffff08
    20c4:	765a593e 			; <UNDEFINED> instruction: 0x765a593e
    20c8:	004c6b4c 	subeq	r6, ip, ip, asr #22
    20cc:	03020402 	movweq	r0, #9218	; 0x2402
    20d0:	02005869 	andeq	r5, r0, #6881280	; 0x690000
    20d4:	3c060104 	stfccs	f0, [r6], {4}
    20d8:	3c1c0306 	ldccc	3, cr0, [ip], {6}
    20dc:	3e3d4c40 	cdpcc	12, 3, cr4, cr13, cr0, {2}
    20e0:	3e4c6768 	cdpcc	7, 4, cr6, cr12, cr8, {3}
    20e4:	4c765a59 	ldclmi	10, cr5, [r6], #-356	; 0xfffffe9c
    20e8:	02004c85 	andeq	r4, r0, #34048	; 0x8500
    20ec:	6b030204 	blvs	c2904 <_Min_Stack_Size+0xc2704>
    20f0:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
    20f4:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    20f8:	3e3c1903 	cdpcc	9, 3, cr1, cr12, cr3, {0}
    20fc:	01000502 	tsteq	r0, r2, lsl #10
    2100:	02050001 	andeq	r0, r5, #1
    2104:	00000000 	andeq	r0, r0, r0
    2108:	01028a03 	tsteq	r2, r3, lsl #20
    210c:	3d3d4b4c 	vldmdbcc	sp!, {d4-<overflow reg d41>}
    2110:	01000502 	tsteq	r0, r2, lsl #10
    2114:	02050001 	andeq	r0, r5, #1
    2118:	00000000 	andeq	r0, r0, r0
    211c:	01029903 	tsteq	r2, r3, lsl #18
    2120:	40683467 	rsbmi	r3, r8, r7, ror #8
    2124:	06022130 			; <UNDEFINED> instruction: 0x06022130
    2128:	00010100 	andeq	r0, r1, r0, lsl #2
    212c:	00000205 	andeq	r0, r0, r5, lsl #4
    2130:	b1030000 	mrslt	r0, (UNDEF: 3)
    2134:	3d4e0102 	stfcce	f0, [lr, #-8]
    2138:	01000602 	tsteq	r0, r2, lsl #12
    213c:	02050001 	andeq	r0, r5, #1
    2140:	00000000 	andeq	r0, r0, r0
    2144:	0102c003 	tsteq	r2, r3
    2148:	40683367 	rsbmi	r3, r8, r7, ror #6
    214c:	06022130 			; <UNDEFINED> instruction: 0x06022130
    2150:	00010100 	andeq	r0, r1, r0, lsl #2
    2154:	00000205 	andeq	r0, r0, r5, lsl #4
    2158:	d7030000 	strle	r0, [r3, -r0]
    215c:	3d4e0102 	stfcce	f0, [lr, #-8]
    2160:	01000602 	tsteq	r0, r2, lsl #12
    2164:	02050001 	andeq	r0, r5, #1
    2168:	08004b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, lr}
    216c:	0102e603 	tsteq	r2, r3, lsl #12
    2170:	05023d6b 	streq	r3, [r2, #-3435]	; 0xfffff295
    2174:	00010100 	andeq	r0, r1, r0, lsl #2
    2178:	4b7c0205 	blmi	1f02994 <_Min_Stack_Size+0x1f02794>
    217c:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
    2180:	3d6b0102 	stfcce	f0, [fp, #-8]!
    2184:	01000502 	tsteq	r0, r2, lsl #10
    2188:	02050001 	andeq	r0, r5, #1
    218c:	00000000 	andeq	r0, r0, r0
    2190:	01038a03 	tsteq	r3, r3, lsl #20
    2194:	3e4e3e88 	cdpcc	14, 4, cr3, cr14, cr8, {4}
    2198:	01000502 	tsteq	r0, r2, lsl #10
    219c:	02050001 	andeq	r0, r5, #1
    21a0:	00000000 	andeq	r0, r0, r0
    21a4:	0103a103 	tsteq	r3, r3, lsl #2
    21a8:	05023d6a 	streq	r3, [r2, #-3434]	; 0xfffff296
    21ac:	00010100 	andeq	r0, r1, r0, lsl #2
    21b0:	00000205 	andeq	r0, r0, r5, lsl #4
    21b4:	b0030000 	andlt	r0, r3, r0
    21b8:	42670103 	rsbmi	r0, r7, #-1073741824	; 0xc0000000
    21bc:	3e3e3e4c 	cdpcc	14, 3, cr3, cr14, cr12, {2}
    21c0:	05023d3e 	streq	r3, [r2, #-3390]	; 0xfffff2c2
    21c4:	00010100 	andeq	r0, r1, r0, lsl #2
    21c8:	00000205 	andeq	r0, r0, r5, lsl #4
    21cc:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    21d0:	33830103 	orrcc	r0, r3, #-1073741824	; 0xc0000000
    21d4:	4b59593e 	blmi	16586d4 <_Min_Stack_Size+0x16584d4>
    21d8:	0008023d 	andeq	r0, r8, sp, lsr r2
    21dc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    21e0:	00000002 	andeq	r0, r0, r2
    21e4:	03e30300 	mvneq	r0, #0, 6
    21e8:	023d5c01 	eorseq	r5, sp, #256	; 0x100
    21ec:	01010008 	tsteq	r1, r8
    21f0:	00020500 	andeq	r0, r2, r0, lsl #10
    21f4:	03000000 	movweq	r0, #0
    21f8:	670104a5 	strvs	r0, [r1, -r5, lsr #9]
    21fc:	3f4e3e88 	svccc	0x004e3e88
    2200:	4b683e59 	blmi	1a11b6c <_Min_Stack_Size+0x1a1196c>
    2204:	59595a76 	ldmdbpl	r9, {r1, r2, r4, r5, r6, r9, fp, ip, lr}^
    2208:	3e4d9f5c 	mcrcc	15, 2, r9, cr13, cr12, {2}
    220c:	3e4e3e93 	mcrcc	14, 2, r3, cr14, cr3, {4}
    2210:	01000702 	tsteq	r0, r2, lsl #14
    2214:	02050001 	andeq	r0, r5, #1
    2218:	00000000 	andeq	r0, r0, r0
    221c:	0104e103 	tsteq	r4, r3, lsl #2
    2220:	08833383 	stmeq	r3, {r0, r1, r7, r8, r9, ip, sp}
    2224:	02670821 	rsbeq	r0, r7, #2162688	; 0x210000
    2228:	01010007 	tsteq	r1, r7
    222c:	00020500 	andeq	r0, r2, r0, lsl #10
    2230:	03000000 	movweq	r0, #0
    2234:	4e0104f6 	mcrmi	4, 0, r0, cr1, cr6, {7}
    2238:	0007023d 	andeq	r0, r7, sp, lsr r2
    223c:	039f0101 	orrseq	r0, pc, #1073741824	; 0x40000000
    2240:	00020000 	andeq	r0, r2, r0
    2244:	00000175 	andeq	r0, r0, r5, ror r1
    2248:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    224c:	0101000d 	tsteq	r1, sp
    2250:	00000101 	andeq	r0, r0, r1, lsl #2
    2254:	00000100 	andeq	r0, r0, r0, lsl #2
    2258:	6f682f01 	svcvs	0x00682f01
    225c:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    2260:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    2264:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    2268:	54534153 	ldrbpl	r4, [r3], #-339	; 0xfffffead
    226c:	544f495f 	strbpl	r4, [pc], #-2399	; 2274 <_Min_Stack_Size+0x2074>
    2270:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    2274:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2278:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
    227c:	2f006372 	svccs	0x00006372
    2280:	2f727375 	svccs	0x00727375
    2284:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2288:	2f656475 	svccs	0x00656475
    228c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    2290:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 20f4 <_Min_Stack_Size+0x1ef4>
    2294:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    2298:	2f00656e 	svccs	0x0000656e
    229c:	2f727375 	svccs	0x00727375
    22a0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    22a4:	2f656475 	svccs	0x00656475
    22a8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    22ac:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    22b0:	2f007379 	svccs	0x00007379
    22b4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    22b8:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    22bc:	2f767375 	svccs	0x00767375
    22c0:	41534454 	cmpmi	r3, r4, asr r4
    22c4:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    22c8:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    22cc:	5349534d 	movtpl	r5, #37709	; 0x934d
    22d0:	334d432f 	movtcc	r4, #54063	; 0xd32f
    22d4:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    22d8:	53656369 	cmnpl	r5, #-1543503871	; 0xa4000001
    22dc:	6f707075 	svcvs	0x00707075
    22e0:	532f7472 			; <UNDEFINED> instruction: 0x532f7472
    22e4:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xfffff0ac
    22e8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    22ec:	00783031 	rsbseq	r3, r8, r1, lsr r0
    22f0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 223c <_Min_Stack_Size+0x203c>
    22f4:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    22f8:	76737572 			; <UNDEFINED> instruction: 0x76737572
    22fc:	5344542f 	movtpl	r5, #17455	; 0x442f
    2300:	5f545341 	svcpl	0x00545341
    2304:	2f544f49 	svccs	0x00544f49
    2308:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    230c:	65697261 	strbvs	r7, [r9, #-609]!	; 0xfffffd9f
    2310:	6e692f73 	mcrvs	15, 3, r2, cr9, cr3, {3}
    2314:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
    2318:	2f656d6f 	svccs	0x00656d6f
    231c:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    2320:	542f7673 	strtpl	r7, [pc], #-1651	; 2328 <_Min_Stack_Size+0x2128>
    2324:	53415344 	movtpl	r5, #4932	; 0x1344
    2328:	4f495f54 	svcmi	0x00495f54
    232c:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    2330:	2f534953 	svccs	0x00534953
    2334:	2f334d43 	svccs	0x00334d43
    2338:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    233c:	70707553 	rsbsvc	r7, r0, r3, asr r5
    2340:	0074726f 	rsbseq	r7, r4, pc, ror #4
    2344:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2348:	31663233 	cmncc	r6, r3, lsr r2
    234c:	735f7830 	cmpvc	pc, #48, 16	; 0x300000
    2350:	632e6970 			; <UNDEFINED> instruction: 0x632e6970
    2354:	00000100 	andeq	r0, r0, r0, lsl #2
    2358:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    235c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    2360:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    2364:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    2368:	00000200 	andeq	r0, r0, r0, lsl #4
    236c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    2370:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    2374:	00030068 	andeq	r0, r3, r8, rrx
    2378:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    237c:	31663233 	cmncc	r6, r3, lsr r2
    2380:	682e7830 	stmdavs	lr!, {r4, r5, fp, ip, sp, lr}
    2384:	00000400 	andeq	r0, r0, r0, lsl #8
    2388:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    238c:	30316632 	eorscc	r6, r1, r2, lsr r6
    2390:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
    2394:	00682e63 	rsbeq	r2, r8, r3, ror #28
    2398:	73000005 	movwvc	r0, #5
    239c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    23a0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    23a4:	6970735f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    23a8:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    23ac:	6f630000 	svcvs	0x00630000
    23b0:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    23b4:	682e336d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
    23b8:	00000600 	andeq	r0, r0, r0, lsl #12
    23bc:	02050000 	andeq	r0, r5, #0
    23c0:	00000000 	andeq	r0, r0, r0
    23c4:	0100f703 	tsteq	r0, r3, lsl #14	; <UNPREDICTABLE>
    23c8:	685a4d4e 	ldmdavs	sl, {r1, r2, r3, r6, r8, sl, fp, lr}^
    23cc:	4d6a5a4d 	vstmdbmi	sl!, {s11-s87}
    23d0:	0a025b5a 	beq	99140 <_Min_Stack_Size+0x98f40>
    23d4:	00010100 	andeq	r0, r1, r0, lsl #2
    23d8:	4b980205 	blmi	fe602bf4 <BootRAM+0xd573395>
    23dc:	9e030800 	cdpls	8, 0, cr0, cr3, cr0, {0}
    23e0:	03590101 	cmpeq	r9, #1073741824	; 0x40000000
    23e4:	033e2e12 	teqeq	lr, #288	; 0x120
    23e8:	2d674a09 	vstmdbcs	r7!, {s9-s17}
    23ec:	2c302d2f 	ldccs	13, cr2, [r0], #-188	; 0xffffff44
    23f0:	2b312c30 	blcs	c4d4b8 <_Min_Stack_Size+0xc4d2b8>
    23f4:	3f5d2b31 	svccc	0x005d2b31
    23f8:	05024b86 	streq	r4, [r2, #-2950]	; 0xfffff47a
    23fc:	00010100 	andeq	r0, r1, r0, lsl #2
    2400:	00000205 	andeq	r0, r0, r5, lsl #4
    2404:	db030000 	blle	c240c <_Min_Stack_Size+0xc220c>
    2408:	83590101 	cmphi	r9, #1073741824	; 0x40000000
    240c:	2e0d0330 	mcrcs	3, 0, r0, cr13, cr0, {1}
    2410:	4c3f3f9f 	ldcmi	15, cr3, [pc], #-636	; 219c <_Min_Stack_Size+0x1f9c>
    2414:	414d422f 	cmpmi	sp, pc, lsr #4
    2418:	034f4d32 	movteq	r4, #64818	; 0xfd32
    241c:	325b3c29 	subscc	r3, fp, #10496	; 0x2900
    2420:	3208f75b 	andcc	pc, r8, #23855104	; 0x16c0000
    2424:	405b5b69 	subsmi	r5, fp, r9, ror #22
    2428:	01040200 	mrseq	r0, R12_usr
    242c:	3f063c06 	svccc	0x00063c06
    2430:	2fa1322f 	svccs	0x00a1322f
    2434:	87492d4b 	strbhi	r2, [r9, -fp, asr #26]
    2438:	0007023d 	andeq	r0, r7, sp, lsr r2
    243c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2440:	00000002 	andeq	r0, r0, r2
    2444:	02f20300 	rscseq	r0, r2, #0, 6
    2448:	3e3e4d01 	cdpcc	13, 3, cr4, cr14, cr1, {0}
    244c:	3e3e3e3e 	mrccc	14, 1, r3, cr14, cr14, {1}
    2450:	023d3e3e 	eorseq	r3, sp, #992	; 0x3e0
    2454:	01010005 	tsteq	r1, r5
    2458:	00020500 	andeq	r0, r2, r0, lsl #10
    245c:	03000000 	movweq	r0, #0
    2460:	4d01038e 	stcmi	3, cr0, [r1, #-568]	; 0xfffffdc8
    2464:	3f3f3f3f 	svccc	0x003f3f3f
    2468:	05023d3f 	streq	r3, [r2, #-3391]	; 0xfffff2c1
    246c:	00010100 	andeq	r0, r1, r0, lsl #2
    2470:	4c200205 	sfmmi	f0, 4, [r0], #-20	; 0xffffffec
    2474:	ab030800 	blge	c447c <_Min_Stack_Size+0xc427c>
    2478:	3f6a0103 	svccc	0x006a0103
    247c:	05028495 	streq	r8, [r2, #-1173]	; 0xfffffb6b
    2480:	00010100 	andeq	r0, r1, r0, lsl #2
    2484:	00000205 	andeq	r0, r0, r5, lsl #4
    2488:	c3030000 	movwgt	r0, #12288	; 0x3000
    248c:	3f6a0103 	svccc	0x006a0103
    2490:	05028495 	streq	r8, [r2, #-1173]	; 0xfffffb6b
    2494:	00010100 	andeq	r0, r1, r0, lsl #2
    2498:	00000205 	andeq	r0, r0, r5, lsl #4
    249c:	e2030000 	and	r0, r3, #0
    24a0:	51830103 	orrpl	r0, r3, r3, lsl #2
    24a4:	953f5a4d 	ldrls	r5, [pc, #-2637]!	; 1a5f <_Min_Stack_Size+0x185f>
    24a8:	000502a0 	andeq	r0, r5, r0, lsr #5
    24ac:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    24b0:	00000002 	andeq	r0, r0, r2
    24b4:	04890300 	streq	r0, [r9], #768	; 0x300
    24b8:	953f8701 	ldrls	r8, [pc, #-1793]!	; 1dbf <_Min_Stack_Size+0x1bbf>
    24bc:	000502a0 	andeq	r0, r5, r0, lsr #5
    24c0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    24c4:	004c6002 	subeq	r6, ip, r2
    24c8:	04a30308 	strteq	r0, [r3], #776	; 0x308
    24cc:	023d6b01 	eorseq	r6, sp, #1024	; 0x400
    24d0:	01010005 	tsteq	r1, r5
    24d4:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
    24d8:	0308004c 	movweq	r0, #32844	; 0x804c
    24dc:	4f0104b3 	svcmi	0x000104b3
    24e0:	0006023d 	andeq	r0, r6, sp, lsr r2
    24e4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    24e8:	00000002 	andeq	r0, r0, r2
    24ec:	04c50300 	strbeq	r0, [r5], #768	; 0x300
    24f0:	955b6a01 	ldrbls	r6, [fp, #-2561]	; 0xfffff5ff
    24f4:	00050284 	andeq	r0, r5, r4, lsl #5
    24f8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    24fc:	00000002 	andeq	r0, r0, r2
    2500:	04dd0300 	ldrbeq	r0, [sp], #768	; 0x300
    2504:	953f6a01 	ldrls	r6, [pc, #-2561]!	; 1b0b <_Min_Stack_Size+0x190b>
    2508:	00050284 	andeq	r0, r5, r4, lsl #5
    250c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2510:	00000002 	andeq	r0, r0, r2
    2514:	04f70300 	ldrbteq	r0, [r7], #768	; 0x300
    2518:	83846b01 	orrhi	r6, r4, #1024	; 0x400
    251c:	01000502 	tsteq	r0, r2, lsl #10
    2520:	02050001 	andeq	r0, r5, #1
    2524:	00000000 	andeq	r0, r0, r0
    2528:	01058703 	tsteq	r5, r3, lsl #14
    252c:	0502834f 	streq	r8, [r2, #-847]	; 0xfffffcb1
    2530:	00010100 	andeq	r0, r1, r0, lsl #2
    2534:	00000205 	andeq	r0, r0, r5, lsl #4
    2538:	97030000 	strls	r0, [r3, -r0]
    253c:	3f6a0105 	svccc	0x006a0105
    2540:	05028495 	streq	r8, [r2, #-1173]	; 0xfffffb6b
    2544:	00010100 	andeq	r0, r1, r0, lsl #2
    2548:	00000205 	andeq	r0, r0, r5, lsl #4
    254c:	b1030000 	mrslt	r0, (UNDEF: 3)
    2550:	32670105 	rsbcc	r0, r7, #1073741825	; 0x40000001
    2554:	213f4f3f 	teqcs	pc, pc, lsr pc	; <UNPREDICTABLE>
    2558:	01000602 	tsteq	r0, r2, lsl #12
    255c:	02050001 	andeq	r0, r5, #1
    2560:	00000000 	andeq	r0, r0, r0
    2564:	0105ca03 	tsteq	r5, r3, lsl #20
    2568:	06023d4f 	streq	r3, [r2], -pc, asr #26
    256c:	00010100 	andeq	r0, r1, r0, lsl #2
    2570:	00000205 	andeq	r0, r0, r5, lsl #4
    2574:	dc030000 	stcle	0, cr0, [r3], {-0}
    2578:	4d6a0105 	stfmie	f0, [sl, #-20]!	; 0xffffffec
    257c:	05028495 	streq	r8, [r2, #-1173]	; 0xfffffb6b
    2580:	00010100 	andeq	r0, r1, r0, lsl #2
    2584:	4c980205 	lfmmi	f0, 4, [r8], {5}
    2588:	fe030800 	cdp2	8, 0, cr0, cr3, cr0, {0}
    258c:	33670105 	cmncc	r7, #1073741825	; 0x40000001
    2590:	21314185 	teqcs	r1, r5, lsl #3
    2594:	01000602 	tsteq	r0, r2, lsl #12
    2598:	02050001 	andeq	r0, r5, #1
    259c:	00000000 	andeq	r0, r0, r0
    25a0:	0106a403 	tsteq	r6, r3, lsl #8
    25a4:	0502596c 	streq	r5, [r2, #-2412]	; 0xfffff694
    25a8:	00010100 	andeq	r0, r1, r0, lsl #2
    25ac:	00000205 	andeq	r0, r0, r5, lsl #4
    25b0:	bd030000 	stclt	0, cr0, [r3, #-0]
    25b4:	2f670106 	svccs	0x00670106
    25b8:	5b4d776d 	blpl	1360374 <_Min_Stack_Size+0x1360174>
    25bc:	04020069 	streq	r0, [r2], #-105	; 0xffffff97
    25c0:	06820601 	streq	r0, [r2], r1, lsl #12
    25c4:	2131413f 	teqcs	r1, pc, lsr r1
    25c8:	01000602 	tsteq	r0, r2, lsl #12
    25cc:	02050001 	andeq	r0, r5, #1
    25d0:	00000000 	andeq	r0, r0, r0
    25d4:	0106f303 	tsteq	r6, r3, lsl #6	; <UNPREDICTABLE>
    25d8:	59773467 	ldmdbpl	r7!, {r0, r1, r2, r5, r6, sl, ip, sp}^
    25dc:	01000502 	tsteq	r0, r2, lsl #10
    25e0:	000a5c01 	andeq	r5, sl, r1, lsl #24
    25e4:	62000200 	andvs	r0, r0, #0, 4
    25e8:	02000001 	andeq	r0, r0, #1
    25ec:	0d0efb01 	vstreq	d15, [lr, #-4]
    25f0:	01010100 	mrseq	r0, (UNDEF: 17)
    25f4:	00000001 	andeq	r0, r0, r1
    25f8:	01000001 	tsteq	r0, r1
    25fc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2548 <_Min_Stack_Size+0x2348>
    2600:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    2604:	76737572 			; <UNDEFINED> instruction: 0x76737572
    2608:	5344542f 	movtpl	r5, #17455	; 0x442f
    260c:	5f545341 	svcpl	0x00545341
    2610:	2f544f49 	svccs	0x00544f49
    2614:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    2618:	65697261 	strbvs	r7, [r9, #-609]!	; 0xfffffd9f
    261c:	72732f73 	rsbsvc	r2, r3, #460	; 0x1cc
    2620:	752f0063 	strvc	r0, [pc, #-99]!	; 25c5 <_Min_Stack_Size+0x23c5>
    2624:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    2628:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    262c:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    2630:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2634:	616d2f62 	cmnvs	sp, r2, ror #30
    2638:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    263c:	752f0065 	strvc	r0, [pc, #-101]!	; 25df <_Min_Stack_Size+0x23df>
    2640:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    2644:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    2648:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    264c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2650:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    2654:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    2658:	2f656d6f 	svccs	0x00656d6f
    265c:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    2660:	542f7673 	strtpl	r7, [pc], #-1651	; 2668 <_Min_Stack_Size+0x2468>
    2664:	53415344 	movtpl	r5, #4932	; 0x1344
    2668:	4f495f54 	svcmi	0x00495f54
    266c:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    2670:	2f534953 	svccs	0x00534953
    2674:	2f334d43 	svccs	0x00334d43
    2678:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    267c:	75536563 	ldrbvc	r6, [r3, #-1379]	; 0xfffffa9d
    2680:	726f7070 	rsbvc	r7, pc, #112	; 0x70
    2684:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
    2688:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    268c:	31463233 	cmpcc	r6, r3, lsr r2
    2690:	2f007830 	svccs	0x00007830
    2694:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    2698:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    269c:	2f767375 	svccs	0x00767375
    26a0:	41534454 	cmpmi	r3, r4, asr r4
    26a4:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    26a8:	4c2f544f 	cfstrsmi	mvf5, [pc], #-316	; 2574 <_Min_Stack_Size+0x2374>
    26ac:	61726269 	cmnvs	r2, r9, ror #4
    26b0:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    26b4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    26b8:	6f682f00 	svcvs	0x00682f00
    26bc:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    26c0:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    26c4:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    26c8:	54534153 	ldrbpl	r4, [r3], #-339	; 0xfffffead
    26cc:	544f495f 	strbpl	r4, [pc], #-2399	; 26d4 <_Min_Stack_Size+0x24d4>
    26d0:	534d432f 	movtpl	r4, #54063	; 0xd32f
    26d4:	432f5349 			; <UNDEFINED> instruction: 0x432f5349
    26d8:	432f334d 			; <UNDEFINED> instruction: 0x432f334d
    26dc:	5365726f 	cmnpl	r5, #-268435450	; 0xf0000006
    26e0:	6f707075 	svcvs	0x00707075
    26e4:	00007472 	andeq	r7, r0, r2, ror r4
    26e8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    26ec:	30316632 	eorscc	r6, r1, r2, lsr r6
    26f0:	69745f78 	ldmdbvs	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    26f4:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    26f8:	5f000001 	svcpl	0x00000001
    26fc:	61666564 	cmnvs	r6, r4, ror #10
    2700:	5f746c75 	svcpl	0x00746c75
    2704:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    2708:	00682e73 	rsbeq	r2, r8, r3, ror lr
    270c:	5f000002 	svcpl	0x00000002
    2710:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    2714:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2718:	00000300 	andeq	r0, r0, r0, lsl #6
    271c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2720:	30316632 	eorscc	r6, r1, r2, lsr r6
    2724:	00682e78 	rsbeq	r2, r8, r8, ror lr
    2728:	73000004 	movwvc	r0, #4
    272c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2730:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2734:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    2738:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    273c:	6f630000 	svcvs	0x00630000
    2740:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    2744:	682e336d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
    2748:	00000600 	andeq	r0, r0, r0, lsl #12
    274c:	02050000 	andeq	r0, r5, #0
    2750:	00000000 	andeq	r0, r0, r0
    2754:	0100fa03 	tsteq	r0, r3, lsl #20	; <UNPREDICTABLE>
    2758:	68594c4e 	ldmdavs	r9, {r1, r2, r3, r6, sl, fp, lr}^
    275c:	4c5a4b4c 	mrrcmi	11, 4, r4, sl, cr12
    2760:	4b4c5a4b 	blmi	1319094 <_Min_Stack_Size+0x1318e94>
    2764:	5a4b4c5a 	bpl	12d58d4 <_Min_Stack_Size+0x12d56d4>
    2768:	4c5a4b4c 	mrrcmi	11, 4, r4, sl, cr12
    276c:	594c5a4b 	stmdbpl	ip, {r0, r1, r3, r6, r9, fp, ip, lr}^
    2770:	68594c68 	ldmdavs	r9, {r3, r5, r6, sl, fp, lr}^
    2774:	4c68594c 	stclmi	9, cr5, [r8], #-304	; 0xfffffed0
    2778:	4b4c6859 	blmi	131c8e4 <_Min_Stack_Size+0x131c6e4>
    277c:	5a4b4c5a 	bpl	12d58ec <_Min_Stack_Size+0x12d56ec>
    2780:	4c68594c 	stclmi	9, cr5, [r8], #-304	; 0xfffffed0
    2784:	594c6859 	stmdbpl	ip, {r0, r3, r4, r6, fp, sp, lr}^
    2788:	5b594c6a 	blpl	1655938 <_Min_Stack_Size+0x1655738>
    278c:	01002402 	tsteq	r0, r2, lsl #8
    2790:	02050001 	andeq	r0, r5, #1
    2794:	08004cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, lr}
    2798:	0101e203 	tsteq	r1, r3, lsl #4
    279c:	003e3559 	eorseq	r3, lr, r9, asr r5
    27a0:	06010402 	streq	r0, [r1], -r2, lsl #8
    27a4:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    27a8:	02004a02 	andeq	r4, r0, #8192	; 0x2000
    27ac:	004a0304 	subeq	r0, sl, r4, lsl #6
    27b0:	4a040402 	bmi	1037c0 <_Min_Stack_Size+0x1035c0>
    27b4:	4b4d4b06 	blmi	13553d4 <_Min_Stack_Size+0x13551d4>
    27b8:	0402005b 	streq	r0, [r2], #-91	; 0xffffffa5
    27bc:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    27c0:	3f5b4b4d 	svccc	0x005b4b4d
    27c4:	02004c4d 	andeq	r4, r0, #19712	; 0x4d00
    27c8:	4a060104 	bmi	182be0 <_Min_Stack_Size+0x1829e0>
    27cc:	02040200 	andeq	r0, r4, #0, 4
    27d0:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    27d4:	02004a03 	andeq	r4, r0, #12288	; 0x3000
    27d8:	064a0404 	strbeq	r0, [sl], -r4, lsl #8
    27dc:	023d5d4d 	eorseq	r5, sp, #4928	; 0x1340
    27e0:	01010019 	tsteq	r1, r9, lsl r0
    27e4:	00020500 	andeq	r0, r2, r0, lsl #10
    27e8:	03000000 	movweq	r0, #0
    27ec:	59010297 	stmdbpl	r1, {r0, r1, r2, r4, r7, r9}
    27f0:	3f3e846e 	svccc	0x003e846e
    27f4:	5b4d4b3f 	blpl	13554f8 <_Min_Stack_Size+0x13552f8>
    27f8:	005a5b4c 	subseq	r5, sl, ip, asr #22
    27fc:	06010402 	streq	r0, [r1], -r2, lsl #8
    2800:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    2804:	02004a02 	andeq	r4, r0, #8192	; 0x2000
    2808:	064a0304 	strbeq	r0, [sl], -r4, lsl #6
    280c:	5b4c524b 	blpl	1317140 <_Min_Stack_Size+0x1316f40>
    2810:	4d4b5b4c 	vstrmi	d21, [fp, #-304]	; 0xfffffed0
    2814:	3f3f5b5a 	svccc	0x003f5b5a
    2818:	10023d4d 	andne	r3, r2, sp, asr #26
    281c:	00010100 	andeq	r0, r1, r0, lsl #2
    2820:	00000205 	andeq	r0, r0, r5, lsl #4
    2824:	ea030000 	b	c282c <_Min_Stack_Size+0xc262c>
    2828:	6e590102 	rdfvse	f0, f1, f2
    282c:	3f3f3e85 	svccc	0x003f3e85
    2830:	4c774d4b 	ldclmi	13, cr4, [r7], #-300	; 0xfffffed4
    2834:	02007677 	andeq	r7, r0, #124780544	; 0x7700000
    2838:	4a060104 	bmi	182c50 <_Min_Stack_Size+0x182a50>
    283c:	774c5206 	strbvc	r5, [ip, -r6, lsl #4]
    2840:	4d4b774c 	stclmi	7, cr7, [fp, #-304]	; 0xfffffed0
    2844:	3f3f7776 	svccc	0x003f7776
    2848:	0a023d4d 	beq	91d84 <_Min_Stack_Size+0x91b84>
    284c:	00010100 	andeq	r0, r1, r0, lsl #2
    2850:	00000205 	andeq	r0, r0, r5, lsl #4
    2854:	bc030000 	stclt	0, cr0, [r3], {-0}
    2858:	6e590103 	rdfvse	f0, f1, f3
    285c:	3f3f3e85 	svccc	0x003f3e85
    2860:	4c5b4c4b 	mrrcmi	12, 4, r4, fp, cr11
    2864:	02007677 	andeq	r7, r0, #124780544	; 0x7700000
    2868:	4a060104 	bmi	182c80 <_Min_Stack_Size+0x182a80>
    286c:	764c5206 	strbvc	r5, [ip], -r6, lsl #4
    2870:	4c4b764d 	mcrrmi	6, 4, r7, fp, cr13
    2874:	3f3f7776 	svccc	0x003f7776
    2878:	0a023d4d 	beq	91db4 <_Min_Stack_Size+0x91bb4>
    287c:	00010100 	andeq	r0, r1, r0, lsl #2
    2880:	00000205 	andeq	r0, r0, r5, lsl #4
    2884:	8b030000 	blhi	c288c <_Min_Stack_Size+0xc268c>
    2888:	6e590104 	rdfvse	f0, f1, f4
    288c:	3f3f3e85 	svccc	0x003f3e85
    2890:	4c774d4b 	ldclmi	13, cr4, [r7], #-300	; 0xfffffed4
    2894:	02007677 	andeq	r7, r0, #124780544	; 0x7700000
    2898:	4a060104 	bmi	182cb0 <_Min_Stack_Size+0x182ab0>
    289c:	774c4e06 	strbvc	r4, [ip, -r6, lsl #28]
    28a0:	3d5b3f3f 	ldclcc	15, cr3, [fp, #-252]	; 0xffffff04
    28a4:	01000a02 	tsteq	r0, r2, lsl #20
    28a8:	02050001 	andeq	r0, r5, #1
    28ac:	00000000 	andeq	r0, r0, r0
    28b0:	0104cb03 	tsteq	r4, r3, lsl #22
    28b4:	4e581003 	cdpmi	0, 5, cr1, cr8, cr3, {0}
    28b8:	944e7694 	strbls	r7, [lr], #-1684	; 0xfffff96c
    28bc:	7a944e76 	bvc	fe51629c <BootRAM+0xd486a3d>
    28c0:	03026894 	movweq	r6, #10388	; 0x2894
    28c4:	00010100 	andeq	r0, r1, r0, lsl #2
    28c8:	00000205 	andeq	r0, r0, r5, lsl #4
    28cc:	8e030000 	cdphi	0, 0, cr0, cr3, cr0, {0}
    28d0:	2f590105 	svccs	0x00590105
    28d4:	31404c32 	cmpcc	r0, r2, lsr ip
    28d8:	4d30404c 	ldcmi	0, cr4, [r0, #-304]!	; 0xfffffed0
    28dc:	79766893 	ldmdbvc	r6!, {r0, r1, r4, r7, fp, sp, lr}^
    28e0:	68766893 	ldmdavs	r6!, {r0, r1, r4, r7, fp, sp, lr}^
    28e4:	01000302 	tsteq	r0, r2, lsl #6
    28e8:	02050001 	andeq	r0, r5, #1
    28ec:	00000000 	andeq	r0, r0, r0
    28f0:	0105c803 	tsteq	r5, r3, lsl #16
    28f4:	67580b03 	ldrbvs	r0, [r8, -r3, lsl #22]
    28f8:	302d2f2d 	eorcc	r2, sp, sp, lsr #30
    28fc:	312c302c 			; <UNDEFINED> instruction: 0x312c302c
    2900:	05025c2b 	streq	r5, [r2, #-3115]	; 0xfffff3d5
    2904:	00010100 	andeq	r0, r1, r0, lsl #2
    2908:	00000205 	andeq	r0, r0, r5, lsl #4
    290c:	e0030000 	and	r0, r3, r0
    2910:	4b4c0105 	blmi	1302d2c <_Min_Stack_Size+0x1302b2c>
    2914:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2918:	01000502 	tsteq	r0, r2, lsl #10
    291c:	02050001 	andeq	r0, r5, #1
    2920:	00000000 	andeq	r0, r0, r0
    2924:	0105f003 	tsteq	r5, r3	; <UNPREDICTABLE>
    2928:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
    292c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2930:	0005023d 	andeq	r0, r5, sp, lsr r2
    2934:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2938:	00000002 	andeq	r0, r0, r2
    293c:	06830300 	streq	r0, [r3], r0, lsl #6
    2940:	3d3d4c01 	ldccc	12, cr4, [sp, #-4]!
    2944:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
    2948:	01010005 	tsteq	r1, r5
    294c:	00020500 	andeq	r0, r2, r0, lsl #10
    2950:	03000000 	movweq	r0, #0
    2954:	4c010693 	stcmi	6, cr0, [r1], {147}	; 0x93
    2958:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    295c:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
    2960:	01010005 	tsteq	r1, r5
    2964:	c8020500 	stmdagt	r2, {r8, sl}
    2968:	0308004d 	movweq	r0, #32845	; 0x804d
    296c:	6b0106a6 	blvs	4440c <_Min_Stack_Size+0x4420c>
    2970:	0284953f 	addeq	r9, r4, #264241152	; 0xfc00000
    2974:	01010005 	tsteq	r1, r5
    2978:	00020500 	andeq	r0, r2, r0, lsl #10
    297c:	03000000 	movweq	r0, #0
    2980:	6a0106bf 	bvs	44484 <_Min_Stack_Size+0x44284>
    2984:	02a0cd3f 	adceq	ip, r0, #4032	; 0xfc0
    2988:	01010005 	tsteq	r1, r5
    298c:	08020500 	stmdaeq	r2, {r8, sl}
    2990:	0308004e 	movweq	r0, #32846	; 0x804e
    2994:	880106e8 	stmdahi	r1, {r3, r5, r6, r7, r9, sl}
    2998:	02a0953f 	adceq	r9, r0, #264241152	; 0xfc00000
    299c:	01010005 	tsteq	r1, r5
    29a0:	00020500 	andeq	r0, r2, r0, lsl #10
    29a4:	03000000 	movweq	r0, #0
    29a8:	6c01078d 	stcvs	7, cr0, [r1], {141}	; 0x8d
    29ac:	0005023d 	andeq	r0, r5, sp, lsr r2
    29b0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    29b4:	00000002 	andeq	r0, r0, r2
    29b8:	07a90300 	streq	r0, [r9, r0, lsl #6]!
    29bc:	02758801 	rsbseq	r8, r5, #65536	; 0x10000
    29c0:	01010005 	tsteq	r1, r5
    29c4:	00020500 	andeq	r0, r2, r0, lsl #10
    29c8:	03000000 	movweq	r0, #0
    29cc:	880107c4 	stmdahi	r1, {r2, r6, r7, r8, r9, sl}
    29d0:	02a0953f 	adceq	r9, r0, #264241152	; 0xfc00000
    29d4:	01010005 	tsteq	r1, r5
    29d8:	00020500 	andeq	r0, r2, r0, lsl #10
    29dc:	03000000 	movweq	r0, #0
    29e0:	4e0107dd 	mcrmi	7, 0, r0, cr1, cr13, {6}
    29e4:	00050283 	andeq	r0, r5, r3, lsl #5
    29e8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    29ec:	00000002 	andeq	r0, r0, r2
    29f0:	07f00300 	ldrbeq	r0, [r0, r0, lsl #6]!
    29f4:	835a6b01 	cmphi	sl, #1024	; 0x400
    29f8:	01000302 	tsteq	r0, r2, lsl #6
    29fc:	02050001 	andeq	r0, r5, #1
    2a00:	00000000 	andeq	r0, r0, r0
    2a04:	01088c03 	tsteq	r8, r3, lsl #24
    2a08:	77863ecf 	strvc	r3, [r6, pc, asr #29]
    2a0c:	0302835a 	movweq	r8, #9050	; 0x235a
    2a10:	00010100 	andeq	r0, r1, r0, lsl #2
    2a14:	00000205 	andeq	r0, r0, r5, lsl #4
    2a18:	b4030000 	strlt	r0, [r3], #-0
    2a1c:	35c90108 	strbcc	r0, [r9, #264]	; 0x108
    2a20:	4c4c3e69 	mcrrmi	14, 6, r3, ip, cr9
    2a24:	023d4c4b 	eorseq	r4, sp, #19200	; 0x4b00
    2a28:	01010003 	tsteq	r1, r3
    2a2c:	00020500 	andeq	r0, r2, r0, lsl #10
    2a30:	03000000 	movweq	r0, #0
    2a34:	cf0108de 	svcgt	0x000108de
    2a38:	03028368 	movweq	r8, #9064	; 0x2368
    2a3c:	00010100 	andeq	r0, r1, r0, lsl #2
    2a40:	00000205 	andeq	r0, r0, r5, lsl #4
    2a44:	fd030000 	stc2	0, cr0, [r3, #-0]
    2a48:	34c90108 	strbcc	r0, [r9], #264	; 0x108
    2a4c:	3dbc3e3e 	ldccc	14, cr3, [ip, #248]!	; 0xf8
    2a50:	01000502 	tsteq	r0, r2, lsl #10
    2a54:	02050001 	andeq	r0, r5, #1
    2a58:	00000000 	andeq	r0, r0, r0
    2a5c:	01099803 	tsteq	r9, r3, lsl #16
    2a60:	023d3e87 	eorseq	r3, sp, #2160	; 0x870
    2a64:	01010005 	tsteq	r1, r5
    2a68:	00020500 	andeq	r0, r2, r0, lsl #10
    2a6c:	03000000 	movweq	r0, #0
    2a70:	670109af 	strvs	r0, [r1, -pc, lsr #19]
    2a74:	4c4c3e32 	mcrrmi	14, 3, r3, ip, cr2
    2a78:	0005023d 	andeq	r0, r5, sp, lsr r2
    2a7c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2a80:	00000002 	andeq	r0, r0, r2
    2a84:	09cd0300 	stmibeq	sp, {r8, r9}^
    2a88:	3e336701 	cdpcc	7, 3, cr6, cr3, cr1, {0}
    2a8c:	023d4c4c 	eorseq	r4, sp, #76, 24	; 0x4c00
    2a90:	01010005 	tsteq	r1, r5
    2a94:	00020500 	andeq	r0, r2, r0, lsl #10
    2a98:	03000000 	movweq	r0, #0
    2a9c:	c90109f1 	stmdbgt	r1, {r0, r4, r5, r6, r7, r8, fp}
    2aa0:	09032f2f 	stmdbeq	r3, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
    2aa4:	3f3f3f2e 	svccc	0x003f3f2e
    2aa8:	69674d4b 	stmdbvs	r7!, {r0, r1, r3, r6, r8, sl, fp, lr}^
    2aac:	3e3e934b 	cdpcc	3, 3, cr9, cr14, cr11, {2}
    2ab0:	0005023d 	andeq	r0, r5, sp, lsr r2
    2ab4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2ab8:	00000002 	andeq	r0, r0, r2
    2abc:	0aa30300 	beq	fe8c36c4 <BootRAM+0xd833e65>
    2ac0:	3e326701 	cdpcc	7, 3, cr6, cr2, cr1, {0}
    2ac4:	023d4c4c 	eorseq	r4, sp, #76, 24	; 0x4c00
    2ac8:	01010005 	tsteq	r1, r5
    2acc:	00020500 	andeq	r0, r2, r0, lsl #10
    2ad0:	03000000 	movweq	r0, #0
    2ad4:	67010abb 			; <UNDEFINED> instruction: 0x67010abb
    2ad8:	684c3e32 	stmdavs	ip, {r1, r4, r5, r9, sl, fp, ip, sp}^
    2adc:	0005023d 	andeq	r0, r5, sp, lsr r2
    2ae0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2ae4:	00000002 	andeq	r0, r0, r2
    2ae8:	0ad30300 	beq	ff4c36f0 <BootRAM+0xe433e91>
    2aec:	3e326701 	cdpcc	7, 3, cr6, cr2, cr1, {0}
    2af0:	023d4c4c 	eorseq	r4, sp, #76, 24	; 0x4c00
    2af4:	01010005 	tsteq	r1, r5
    2af8:	00020500 	andeq	r0, r2, r0, lsl #10
    2afc:	03000000 	movweq	r0, #0
    2b00:	67010aeb 	strvs	r0, [r1, -fp, ror #21]
    2b04:	684c3e32 	stmdavs	ip, {r1, r4, r5, r9, sl, fp, ip, sp}^
    2b08:	0005023d 	andeq	r0, r5, sp, lsr r2
    2b0c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2b10:	00000002 	andeq	r0, r0, r2
    2b14:	0b810300 	bleq	fe04371c <BootRAM+0xcfb3ebd>
    2b18:	953f6a01 	ldrls	r6, [pc, #-2561]!	; 211f <_Min_Stack_Size+0x1f1f>
    2b1c:	00050284 	andeq	r0, r5, r4, lsl #5
    2b20:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2b24:	00000002 	andeq	r0, r0, r2
    2b28:	0b990300 	bleq	fe643730 <BootRAM+0xd5b3ed1>
    2b2c:	953f6a01 	ldrls	r6, [pc, #-2561]!	; 2133 <_Min_Stack_Size+0x1f33>
    2b30:	00050284 	andeq	r0, r5, r4, lsl #5
    2b34:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2b38:	00000002 	andeq	r0, r0, r2
    2b3c:	0bb20300 	bleq	fec83744 <BootRAM+0xdbf3ee5>
    2b40:	953f6a01 	ldrls	r6, [pc, #-2561]!	; 2147 <_Min_Stack_Size+0x1f47>
    2b44:	00050284 	andeq	r0, r5, r4, lsl #5
    2b48:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2b4c:	00000002 	andeq	r0, r0, r2
    2b50:	0bcb0300 	bleq	ff2c3758 <BootRAM+0xe233ef9>
    2b54:	953f6a01 	ldrls	r6, [pc, #-2561]!	; 215b <_Min_Stack_Size+0x1f5b>
    2b58:	00050284 	andeq	r0, r5, r4, lsl #5
    2b5c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2b60:	00000002 	andeq	r0, r0, r2
    2b64:	0be50300 	bleq	ff94376c <BootRAM+0xe8b3f0d>
    2b68:	3e326701 	cdpcc	7, 3, cr6, cr2, cr1, {0}
    2b6c:	023d4c4c 	eorseq	r4, sp, #76, 24	; 0x4c00
    2b70:	01010005 	tsteq	r1, r5
    2b74:	00020500 	andeq	r0, r2, r0, lsl #10
    2b78:	03000000 	movweq	r0, #0
    2b7c:	67010bfe 			; <UNDEFINED> instruction: 0x67010bfe
    2b80:	684c3e32 	stmdavs	ip, {r1, r4, r5, r9, sl, fp, ip, sp}^
    2b84:	0005023d 	andeq	r0, r5, sp, lsr r2
    2b88:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2b8c:	00000002 	andeq	r0, r0, r2
    2b90:	0c960300 	ldceq	3, cr0, [r6], {0}
    2b94:	3e326701 	cdpcc	7, 3, cr6, cr2, cr1, {0}
    2b98:	023d4c4c 	eorseq	r4, sp, #76, 24	; 0x4c00
    2b9c:	01010005 	tsteq	r1, r5
    2ba0:	00020500 	andeq	r0, r2, r0, lsl #10
    2ba4:	03000000 	movweq	r0, #0
    2ba8:	67010cae 	strvs	r0, [r1, -lr, lsr #25]
    2bac:	684c3e32 	stmdavs	ip, {r1, r4, r5, r9, sl, fp, ip, sp}^
    2bb0:	0005023d 	andeq	r0, r5, sp, lsr r2
    2bb4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2bb8:	00000002 	andeq	r0, r0, r2
    2bbc:	0cc60300 	stcleq	3, cr0, [r6], {0}
    2bc0:	3e336701 	cdpcc	7, 3, cr6, cr3, cr1, {0}
    2bc4:	023d4c4c 	eorseq	r4, sp, #76, 24	; 0x4c00
    2bc8:	01010005 	tsteq	r1, r5
    2bcc:	00020500 	andeq	r0, r2, r0, lsl #10
    2bd0:	03000000 	movweq	r0, #0
    2bd4:	67010ce0 	strvs	r0, [r1, -r0, ror #25]
    2bd8:	684c3e33 	stmdavs	ip, {r0, r1, r4, r5, r9, sl, fp, ip, sp}^
    2bdc:	0005023d 	andeq	r0, r5, sp, lsr r2
    2be0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2be4:	00000002 	andeq	r0, r0, r2
    2be8:	0cf90300 	ldcleq	3, cr0, [r9]
    2bec:	3e336701 	cdpcc	7, 3, cr6, cr3, cr1, {0}
    2bf0:	023d4c4c 	eorseq	r4, sp, #76, 24	; 0x4c00
    2bf4:	01010005 	tsteq	r1, r5
    2bf8:	00020500 	andeq	r0, r2, r0, lsl #10
    2bfc:	03000000 	movweq	r0, #0
    2c00:	67010d92 			; <UNDEFINED> instruction: 0x67010d92
    2c04:	684c3e33 	stmdavs	ip, {r0, r1, r4, r5, r9, sl, fp, ip, sp}^
    2c08:	0005023d 	andeq	r0, r5, sp, lsr r2
    2c0c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2c10:	00000002 	andeq	r0, r0, r2
    2c14:	0dab0300 	stceq	3, cr0, [fp]
    2c18:	3f336701 	svccc	0x00336701
    2c1c:	023d4c4c 	eorseq	r4, sp, #76, 24	; 0x4c00
    2c20:	01010005 	tsteq	r1, r5
    2c24:	00020500 	andeq	r0, r2, r0, lsl #10
    2c28:	03000000 	movweq	r0, #0
    2c2c:	67010dc5 	strvs	r0, [r1, -r5, asr #27]
    2c30:	684c3e32 	stmdavs	ip, {r1, r4, r5, r9, sl, fp, ip, sp}^
    2c34:	0005023d 	andeq	r0, r5, sp, lsr r2
    2c38:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2c3c:	00000002 	andeq	r0, r0, r2
    2c40:	0ddd0300 	ldcleq	3, cr0, [sp]
    2c44:	3e326701 	cdpcc	7, 3, cr6, cr2, cr1, {0}
    2c48:	023d4c4c 	eorseq	r4, sp, #76, 24	; 0x4c00
    2c4c:	01010005 	tsteq	r1, r5
    2c50:	00020500 	andeq	r0, r2, r0, lsl #10
    2c54:	03000000 	movweq	r0, #0
    2c58:	67010df5 			; <UNDEFINED> instruction: 0x67010df5
    2c5c:	684c3e32 	stmdavs	ip, {r1, r4, r5, r9, sl, fp, ip, sp}^
    2c60:	0005023d 	andeq	r0, r5, sp, lsr r2
    2c64:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2c68:	00000002 	andeq	r0, r0, r2
    2c6c:	0e8d0300 	cdpeq	3, 8, cr0, cr13, cr0, {0}
    2c70:	3e326701 	cdpcc	7, 3, cr6, cr2, cr1, {0}
    2c74:	023d4c4b 	eorseq	r4, sp, #19200	; 0x4b00
    2c78:	01010005 	tsteq	r1, r5
    2c7c:	00020500 	andeq	r0, r2, r0, lsl #10
    2c80:	03000000 	movweq	r0, #0
    2c84:	67010ea4 	strvs	r0, [r1, -r4, lsr #29]
    2c88:	4c4b3e33 	mcrrmi	14, 3, r3, fp, cr3
    2c8c:	0005023d 	andeq	r0, r5, sp, lsr r2
    2c90:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2c94:	00000002 	andeq	r0, r0, r2
    2c98:	0ebc0300 	cdpeq	3, 11, cr0, cr12, cr0, {0}
    2c9c:	3e326701 	cdpcc	7, 3, cr6, cr2, cr1, {0}
    2ca0:	023d684b 	eorseq	r6, sp, #4915200	; 0x4b0000
    2ca4:	01010005 	tsteq	r1, r5
    2ca8:	00020500 	andeq	r0, r2, r0, lsl #10
    2cac:	03000000 	movweq	r0, #0
    2cb0:	67010ed3 			; <UNDEFINED> instruction: 0x67010ed3
    2cb4:	684b3e33 	stmdavs	fp, {r0, r1, r4, r5, r9, sl, fp, ip, sp}^
    2cb8:	0005023d 	andeq	r0, r5, sp, lsr r2
    2cbc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2cc0:	00000002 	andeq	r0, r0, r2
    2cc4:	0eeb0300 	cdpeq	3, 14, cr0, cr11, cr0, {0}
    2cc8:	3e326701 	cdpcc	7, 3, cr6, cr2, cr1, {0}
    2ccc:	023d684b 	eorseq	r6, sp, #4915200	; 0x4b0000
    2cd0:	01010005 	tsteq	r1, r5
    2cd4:	00020500 	andeq	r0, r2, r0, lsl #10
    2cd8:	03000000 	movweq	r0, #0
    2cdc:	67010f82 	strvs	r0, [r1, -r2, lsl #31]
    2ce0:	684b3e34 	stmdavs	fp, {r2, r4, r5, r9, sl, fp, ip, sp}^
    2ce4:	0005023d 	andeq	r0, r5, sp, lsr r2
    2ce8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2cec:	00000002 	andeq	r0, r0, r2
    2cf0:	0f9b0300 	svceq	0x009b0300
    2cf4:	3e326701 	cdpcc	7, 3, cr6, cr2, cr1, {0}
    2cf8:	023d684b 	eorseq	r6, sp, #4915200	; 0x4b0000
    2cfc:	01010005 	tsteq	r1, r5
    2d00:	00020500 	andeq	r0, r2, r0, lsl #10
    2d04:	03000000 	movweq	r0, #0
    2d08:	83010fb6 	movwhi	r0, #8118	; 0x1fb6
    2d0c:	bba15b35 	bllt	fe8599e8 <BootRAM+0xd7ca189>
    2d10:	01000502 	tsteq	r0, r2, lsl #10
    2d14:	02050001 	andeq	r0, r5, #1
    2d18:	00000000 	andeq	r0, r0, r0
    2d1c:	010fd403 	tsteq	pc, r3, lsl #8
    2d20:	a15b3583 	cmpge	fp, r3, lsl #11
    2d24:	000502bb 			; <UNDEFINED> instruction: 0x000502bb
    2d28:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2d2c:	00000002 	andeq	r0, r0, r2
    2d30:	0ffd0300 	svceq	0x00fd0300
    2d34:	352f8301 	strcc	r8, [pc, #-769]!	; 2a3b <_Min_Stack_Size+0x283b>
    2d38:	a05b3e2f 	subsge	r3, fp, pc, lsr #28
    2d3c:	01040200 	mrseq	r0, R12_usr
    2d40:	3e063c06 	cdpcc	12, 0, cr3, cr6, cr6, {0}
    2d44:	93786977 	cmnls	r8, #1949696	; 0x1dc000
    2d48:	05028469 	streq	r8, [r2, #-1129]	; 0xfffffb97
    2d4c:	00010100 	andeq	r0, r1, r0, lsl #2
    2d50:	00000205 	andeq	r0, r0, r5, lsl #4
    2d54:	ac030000 	stcge	0, cr0, [r3], {-0}
    2d58:	3f6a0110 	svccc	0x006a0110
    2d5c:	05028495 	streq	r8, [r2, #-1173]	; 0xfffffb6b
    2d60:	00010100 	andeq	r0, r1, r0, lsl #2
    2d64:	00000205 	andeq	r0, r0, r5, lsl #4
    2d68:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    2d6c:	3f6a0110 	svccc	0x006a0110
    2d70:	05028495 	streq	r8, [r2, #-1173]	; 0xfffffb6b
    2d74:	00010100 	andeq	r0, r1, r0, lsl #2
    2d78:	00000205 	andeq	r0, r0, r5, lsl #4
    2d7c:	e0030000 	and	r0, r3, r0
    2d80:	3f6a0110 	svccc	0x006a0110
    2d84:	05028495 	streq	r8, [r2, #-1173]	; 0xfffffb6b
    2d88:	00010100 	andeq	r0, r1, r0, lsl #2
    2d8c:	00000205 	andeq	r0, r0, r5, lsl #4
    2d90:	fa030000 	blx	c2d98 <_Min_Stack_Size+0xc2b98>
    2d94:	846b0110 	strbthi	r0, [fp], #-272	; 0xfffffef0
    2d98:	00050283 	andeq	r0, r5, r3, lsl #5
    2d9c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2da0:	00000002 	andeq	r0, r0, r2
    2da4:	119a0300 	orrsne	r0, sl, r0, lsl #6
    2da8:	83846b01 	orrhi	r6, r4, #1024	; 0x400
    2dac:	01000502 	tsteq	r0, r2, lsl #10
    2db0:	02050001 	andeq	r0, r5, #1
    2db4:	00000000 	andeq	r0, r0, r0
    2db8:	0111b103 	tsteq	r1, r3, lsl #2
    2dbc:	0283846b 	addeq	r8, r3, #1795162112	; 0x6b000000
    2dc0:	01010005 	tsteq	r1, r5
    2dc4:	00020500 	andeq	r0, r2, r0, lsl #10
    2dc8:	03000000 	movweq	r0, #0
    2dcc:	6b0111c6 	blvs	474ec <_Min_Stack_Size+0x472ec>
    2dd0:	05028385 	streq	r8, [r2, #-901]	; 0xfffffc7b
    2dd4:	00010100 	andeq	r0, r1, r0, lsl #2
    2dd8:	00000205 	andeq	r0, r0, r5, lsl #4
    2ddc:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    2de0:	3d6a0111 	stfcce	f0, [sl, #-68]!	; 0xffffffbc
    2de4:	01000502 	tsteq	r0, r2, lsl #10
    2de8:	02050001 	andeq	r0, r5, #1
    2dec:	00000000 	andeq	r0, r0, r0
    2df0:	0111e603 	tsteq	r1, r3, lsl #12
    2df4:	05023d6a 	streq	r3, [r2, #-3434]	; 0xfffff296
    2df8:	00010100 	andeq	r0, r1, r0, lsl #2
    2dfc:	00000205 	andeq	r0, r0, r5, lsl #4
    2e00:	f4030000 	vst4.8	{d0-d3}, [r3], r0
    2e04:	3d6a0111 	stfcce	f0, [sl, #-68]!	; 0xffffffbc
    2e08:	01000502 	tsteq	r0, r2, lsl #10
    2e0c:	02050001 	andeq	r0, r5, #1
    2e10:	00000000 	andeq	r0, r0, r0
    2e14:	01128203 	tsteq	r2, r3, lsl #4
    2e18:	05023d6a 	streq	r3, [r2, #-3434]	; 0xfffff296
    2e1c:	00010100 	andeq	r0, r1, r0, lsl #2
    2e20:	00000205 	andeq	r0, r0, r5, lsl #4
    2e24:	90030000 	andls	r0, r3, r0
    2e28:	3d6a0112 	stfcce	f0, [sl, #-72]!	; 0xffffffb8
    2e2c:	01000502 	tsteq	r0, r2, lsl #10
    2e30:	02050001 	andeq	r0, r5, #1
    2e34:	00000000 	andeq	r0, r0, r0
    2e38:	01129e03 	tsteq	r2, r3, lsl #28
    2e3c:	05024b6a 	streq	r4, [r2, #-2922]	; 0xfffff496
    2e40:	00010100 	andeq	r0, r1, r0, lsl #2
    2e44:	00000205 	andeq	r0, r0, r5, lsl #4
    2e48:	b1030000 	mrslt	r0, (UNDEF: 3)
    2e4c:	846b0112 	strbthi	r0, [fp], #-274	; 0xfffffeee
    2e50:	00050283 	andeq	r0, r5, r3, lsl #5
    2e54:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2e58:	00000002 	andeq	r0, r0, r2
    2e5c:	12c70300 	sbcne	r0, r7, #0, 6
    2e60:	9f846b01 	svcls	0x00846b01
    2e64:	01000502 	tsteq	r0, r2, lsl #10
    2e68:	02050001 	andeq	r0, r5, #1
    2e6c:	00000000 	andeq	r0, r0, r0
    2e70:	0112dd03 	tsteq	r2, r3, lsl #26
    2e74:	0283846b 	addeq	r8, r3, #1795162112	; 0x6b000000
    2e78:	01010005 	tsteq	r1, r5
    2e7c:	00020500 	andeq	r0, r2, r0, lsl #10
    2e80:	03000000 	movweq	r0, #0
    2e84:	6b0112f3 	blvs	47a58 <_Min_Stack_Size+0x47858>
    2e88:	05029f84 	streq	r9, [r2, #-3972]	; 0xfffff07c
    2e8c:	00010100 	andeq	r0, r1, r0, lsl #2
    2e90:	00000205 	andeq	r0, r0, r5, lsl #4
    2e94:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
    2e98:	846b0113 	strbthi	r0, [fp], #-275	; 0xfffffeed
    2e9c:	00050283 	andeq	r0, r5, r3, lsl #5
    2ea0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2ea4:	00000002 	andeq	r0, r0, r2
    2ea8:	13990300 	orrsne	r0, r9, #0, 6
    2eac:	023d4e01 	eorseq	r4, sp, #1, 28
    2eb0:	01010006 	tsteq	r1, r6
    2eb4:	00020500 	andeq	r0, r2, r0, lsl #10
    2eb8:	03000000 	movweq	r0, #0
    2ebc:	4e0113a6 	cdpmi	3, 0, cr1, cr1, cr6, {5}
    2ec0:	0006023d 	andeq	r0, r6, sp, lsr r2
    2ec4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2ec8:	00000002 	andeq	r0, r0, r2
    2ecc:	13b30300 			; <UNDEFINED> instruction: 0x13b30300
    2ed0:	023d4e01 	eorseq	r4, sp, #1, 28
    2ed4:	01010006 	tsteq	r1, r6
    2ed8:	00020500 	andeq	r0, r2, r0, lsl #10
    2edc:	03000000 	movweq	r0, #0
    2ee0:	4e0113c0 	cdpmi	3, 0, cr1, cr1, cr0, {6}
    2ee4:	0006024b 	andeq	r0, r6, fp, asr #4
    2ee8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2eec:	00000002 	andeq	r0, r0, r2
    2ef0:	13cd0300 	bicne	r0, sp, #0, 6
    2ef4:	023d4e01 	eorseq	r4, sp, #1, 28
    2ef8:	01010006 	tsteq	r1, r6
    2efc:	00020500 	andeq	r0, r2, r0, lsl #10
    2f00:	03000000 	movweq	r0, #0
    2f04:	4e0113da 	mcrmi	3, 0, r1, cr1, cr10, {6}
    2f08:	0006023d 	andeq	r0, r6, sp, lsr r2
    2f0c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2f10:	00000002 	andeq	r0, r0, r2
    2f14:	13fc0300 	mvnsne	r0, #0, 6
    2f18:	84336701 	ldrthi	r6, [r3], #-1793	; 0xfffff8ff
    2f1c:	02213040 	eoreq	r3, r1, #64	; 0x40
    2f20:	01010006 	tsteq	r1, r6
    2f24:	00020500 	andeq	r0, r2, r0, lsl #10
    2f28:	03000000 	movweq	r0, #0
    2f2c:	6c0114a8 	cfstrsvs	mvf1, [r1], {168}	; 0xa8
    2f30:	00050259 	andeq	r0, r5, r9, asr r2
    2f34:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2f38:	004e5002 	subeq	r5, lr, r2
    2f3c:	14c80308 	strbne	r0, [r8], #776	; 0x308
    2f40:	4f2f6701 	svcmi	0x002f6701
    2f44:	02006768 	andeq	r6, r0, #104, 14	; 0x1a00000
    2f48:	3c060104 	stfccs	f0, [r6], {4}
    2f4c:	30403e06 	subcc	r3, r0, r6, lsl #28
    2f50:	00060221 	andeq	r0, r6, r1, lsr #4
    2f54:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2f58:	004ea402 	subeq	sl, lr, r2, lsl #8
    2f5c:	14f40308 	ldrbtne	r0, [r4], #776	; 0x308
    2f60:	02596b01 	subseq	r6, r9, #1024	; 0x400
    2f64:	01010005 	tsteq	r1, r5
    2f68:	00020500 	andeq	r0, r2, r0, lsl #10
    2f6c:	03000000 	movweq	r0, #0
    2f70:	c901158e 	stmdbgt	r1, {r1, r2, r3, r7, r8, sl, ip}
    2f74:	3e3d834c 	cdpcc	3, 3, cr8, cr13, cr12, {2}
    2f78:	0200924b 	andeq	r9, r0, #-1342177276	; 0xb0000004
    2f7c:	4a060104 	bmi	183394 <_Min_Stack_Size+0x183194>
    2f80:	02040200 	andeq	r0, r4, #0, 4
    2f84:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    2f88:	02004a03 	andeq	r4, r0, #12288	; 0x3000
    2f8c:	064a0404 	strbeq	r0, [sl], -r4, lsl #8
    2f90:	874b4d4b 	strbhi	r4, [fp, -fp, asr #26]
    2f94:	3d3d784b 	ldccc	8, cr7, [sp, #-300]!	; 0xfffffed4
    2f98:	01000f02 	tsteq	r0, r2, lsl #30
    2f9c:	02050001 	andeq	r0, r5, #1
    2fa0:	00000000 	andeq	r0, r0, r0
    2fa4:	0115bd03 	tsteq	r5, r3, lsl #26
    2fa8:	3d8368c9 	stccc	8, cr6, [r3, #804]	; 0x324
    2fac:	67673e3d 			; <UNDEFINED> instruction: 0x67673e3d
    2fb0:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
    2fb4:	004a0601 	subeq	r0, sl, r1, lsl #12
    2fb8:	4a020402 	bmi	83fc8 <_Min_Stack_Size+0x83dc8>
    2fbc:	03040200 	movweq	r0, #16896	; 0x4200
    2fc0:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    2fc4:	4b064a04 	blmi	1957dc <_Min_Stack_Size+0x1955dc>
    2fc8:	4b874b4d 	blmi	fe1d5d04 <BootRAM+0xd1464a5>
    2fcc:	023d3d78 	eorseq	r3, sp, #120, 26	; 0x1e00
    2fd0:	0101000f 	tsteq	r1, pc
    2fd4:	00020500 	andeq	r0, r2, r0, lsl #10
    2fd8:	03000000 	movweq	r0, #0
    2fdc:	c90115ee 	stmdbgt	r1, {r1, r2, r3, r5, r6, r7, r8, sl, ip}
    2fe0:	3d3d8368 	ldccc	3, cr8, [sp, #-416]!	; 0xfffffe60
    2fe4:	00924b3e 	addseq	r4, r2, lr, lsr fp
    2fe8:	06010402 	streq	r0, [r1], -r2, lsl #8
    2fec:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    2ff0:	02004a02 	andeq	r4, r0, #8192	; 0x2000
    2ff4:	004a0304 	subeq	r0, sl, r4, lsl #6
    2ff8:	4a040402 	bmi	104008 <_Min_Stack_Size+0x103e08>
    2ffc:	4b4d4b06 	blmi	1355c1c <_Min_Stack_Size+0x1355a1c>
    3000:	3d784b87 	fldmdbxcc	r8!, {d20-d86}	;@ Deprecated
    3004:	0010023d 	andseq	r0, r0, sp, lsr r2
    3008:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    300c:	00000002 	andeq	r0, r0, r2
    3010:	169e0300 	ldrne	r0, [lr], r0, lsl #6
    3014:	8369c901 	cmnhi	r9, #16384	; 0x4000
    3018:	673e3d3d 			; <UNDEFINED> instruction: 0x673e3d3d
    301c:	02006867 	andeq	r6, r0, #6750208	; 0x670000
    3020:	4a060104 	bmi	183438 <_Min_Stack_Size+0x183238>
    3024:	02040200 	andeq	r0, r4, #0, 4
    3028:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    302c:	02004a03 	andeq	r4, r0, #12288	; 0x3000
    3030:	064a0404 	strbeq	r0, [sl], -r4, lsl #8
    3034:	874b4d4b 	strbhi	r4, [fp, -fp, asr #26]
    3038:	3d3d7767 	ldccc	7, cr7, [sp, #-412]!	; 0xfffffe64
    303c:	01000f02 	tsteq	r0, r2, lsl #30
    3040:	00045401 	andeq	r5, r4, r1, lsl #8
    3044:	75000200 	strvc	r0, [r0, #-512]	; 0xfffffe00
    3048:	02000001 	andeq	r0, r0, #1
    304c:	0d0efb01 	vstreq	d15, [lr, #-4]
    3050:	01010100 	mrseq	r0, (UNDEF: 17)
    3054:	00000001 	andeq	r0, r0, r1
    3058:	01000001 	tsteq	r0, r1
    305c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2fa8 <_Min_Stack_Size+0x2da8>
    3060:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    3064:	76737572 			; <UNDEFINED> instruction: 0x76737572
    3068:	5344542f 	movtpl	r5, #17455	; 0x442f
    306c:	5f545341 	svcpl	0x00545341
    3070:	2f544f49 	svccs	0x00544f49
    3074:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    3078:	65697261 	strbvs	r7, [r9, #-609]!	; 0xfffffd9f
    307c:	72732f73 	rsbsvc	r2, r3, #460	; 0x1cc
    3080:	752f0063 	strvc	r0, [pc, #-99]!	; 3025 <_Min_Stack_Size+0x2e25>
    3084:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3088:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    308c:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3090:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3094:	616d2f62 	cmnvs	sp, r2, ror #30
    3098:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    309c:	752f0065 	strvc	r0, [pc, #-101]!	; 303f <_Min_Stack_Size+0x2e3f>
    30a0:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    30a4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    30a8:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    30ac:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    30b0:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    30b4:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    30b8:	2f656d6f 	svccs	0x00656d6f
    30bc:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    30c0:	542f7673 	strtpl	r7, [pc], #-1651	; 30c8 <_Min_Stack_Size+0x2ec8>
    30c4:	53415344 	movtpl	r5, #4932	; 0x1344
    30c8:	4f495f54 	svcmi	0x00495f54
    30cc:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    30d0:	2f534953 	svccs	0x00534953
    30d4:	2f334d43 	svccs	0x00334d43
    30d8:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    30dc:	75536563 	ldrbvc	r6, [r3, #-1379]	; 0xfffffa9d
    30e0:	726f7070 	rsbvc	r7, pc, #112	; 0x70
    30e4:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
    30e8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    30ec:	31463233 	cmpcc	r6, r3, lsr r2
    30f0:	2f007830 	svccs	0x00007830
    30f4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    30f8:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    30fc:	2f767375 	svccs	0x00767375
    3100:	41534454 	cmpmi	r3, r4, asr r4
    3104:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3108:	4c2f544f 	cfstrsmi	mvf5, [pc], #-316	; 2fd4 <_Min_Stack_Size+0x2dd4>
    310c:	61726269 	cmnvs	r2, r9, ror #4
    3110:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    3114:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3118:	6f682f00 	svcvs	0x00682f00
    311c:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    3120:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    3124:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    3128:	54534153 	ldrbpl	r4, [r3], #-339	; 0xfffffead
    312c:	544f495f 	strbpl	r4, [pc], #-2399	; 3134 <_Min_Stack_Size+0x2f34>
    3130:	534d432f 	movtpl	r4, #54063	; 0xd32f
    3134:	432f5349 			; <UNDEFINED> instruction: 0x432f5349
    3138:	432f334d 			; <UNDEFINED> instruction: 0x432f334d
    313c:	5365726f 	cmnpl	r5, #-268435450	; 0xf0000006
    3140:	6f707075 	svcvs	0x00707075
    3144:	00007472 	andeq	r7, r0, r2, ror r4
    3148:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    314c:	30316632 	eorscc	r6, r1, r2, lsr r6
    3150:	32695f78 	rsbcc	r5, r9, #120, 30	; 0x1e0
    3154:	00632e63 	rsbeq	r2, r3, r3, ror #28
    3158:	5f000001 	svcpl	0x00000001
    315c:	61666564 	cmnvs	r6, r4, ror #10
    3160:	5f746c75 	svcpl	0x00746c75
    3164:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    3168:	00682e73 	rsbeq	r2, r8, r3, ror lr
    316c:	5f000002 	svcpl	0x00000002
    3170:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3174:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3178:	00000300 	andeq	r0, r0, r0, lsl #6
    317c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3180:	30316632 	eorscc	r6, r1, r2, lsr r6
    3184:	00682e78 	rsbeq	r2, r8, r8, ror lr
    3188:	73000004 	movwvc	r0, #4
    318c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3190:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    3194:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    3198:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    319c:	74730000 	ldrbtvc	r0, [r3], #-0
    31a0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    31a4:	5f783031 	svcpl	0x00783031
    31a8:	2e633269 	cdpcs	2, 6, cr3, cr3, cr9, {3}
    31ac:	00050068 	andeq	r0, r5, r8, rrx
    31b0:	726f6300 	rsbvc	r6, pc, #0, 6
    31b4:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    31b8:	00682e33 	rsbeq	r2, r8, r3, lsr lr
    31bc:	00000006 	andeq	r0, r0, r6
    31c0:	c4020500 	strgt	r0, [r2], #-1280	; 0xfffffb00
    31c4:	0308004e 	movweq	r0, #32846	; 0x804e
    31c8:	4e0101a2 	adfmidp	f0, f1, f2
    31cc:	5a6b5a4d 	bpl	1ad9b08 <_Min_Stack_Size+0x1ad9908>
    31d0:	0005025a 	andeq	r0, r5, sl, asr r2
    31d4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    31d8:	004f0802 	subeq	r0, pc, r2, lsl #16
    31dc:	01bf0308 			; <UNDEFINED> instruction: 0x01bf0308
    31e0:	2f4b5901 	svccs	0x004b5901
    31e4:	3e2e0d03 	cdpcc	13, 2, cr0, cr14, cr3, {0}
    31e8:	6730594c 	ldrvs	r5, [r0, -ip, asr #18]!
    31ec:	3185404c 	orrcc	r4, r5, ip, asr #32
    31f0:	313f765b 	teqcc	pc, fp, asr r6	; <UNPREDICTABLE>
    31f4:	a3696b4c 	cmnge	r9, #76, 22	; 0x13000
    31f8:	4d5b4eae 	ldclmi	14, cr4, [fp, #-696]	; 0xfffffd48
    31fc:	863ef692 			; <UNDEFINED> instruction: 0x863ef692
    3200:	40926a3e 	addsmi	r6, r2, lr, lsr sl
    3204:	000c0283 	andeq	r0, ip, r3, lsl #5
    3208:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    320c:	00000002 	andeq	r0, r0, r2
    3210:	02aa0300 	adceq	r0, sl, #0, 6
    3214:	3e4c4d01 	cdpcc	13, 4, cr4, cr12, cr1, {0}
    3218:	4b3e3e4c 	blmi	f92b50 <_Min_Stack_Size+0xf92950>
    321c:	01000502 	tsteq	r0, r2, lsl #10
    3220:	02050001 	andeq	r0, r5, #1
    3224:	0800508c 	stmdaeq	r0, {r2, r3, r7, ip, lr}
    3228:	0102c203 	tsteq	r2, r3, lsl #4
    322c:	84953f6a 	ldrhi	r3, [r5], #3946	; 0xf6a
    3230:	01000502 	tsteq	r0, r2, lsl #10
    3234:	02050001 	andeq	r0, r5, #1
    3238:	00000000 	andeq	r0, r0, r0
    323c:	0102da03 	tsteq	r2, r3, lsl #20
    3240:	84953f6a 	ldrhi	r3, [r5], #3946	; 0xf6a
    3244:	01000502 	tsteq	r0, r2, lsl #10
    3248:	02050001 	andeq	r0, r5, #1
    324c:	00000000 	andeq	r0, r0, r0
    3250:	0102f203 	tsteq	r2, r3, lsl #4	; <UNPREDICTABLE>
    3254:	84953f6a 	ldrhi	r3, [r5], #3946	; 0xf6a
    3258:	01000502 	tsteq	r0, r2, lsl #10
    325c:	02050001 	andeq	r0, r5, #1
    3260:	080050cc 	stmdaeq	r0, {r2, r3, r6, r7, ip, lr}
    3264:	01038a03 	tsteq	r3, r3, lsl #20
    3268:	84953f6a 	ldrhi	r3, [r5], #3946	; 0xf6a
    326c:	01000502 	tsteq	r0, r2, lsl #10
    3270:	02050001 	andeq	r0, r5, #1
    3274:	00000000 	andeq	r0, r0, r0
    3278:	0103a203 	tsteq	r3, r3, lsl #4
    327c:	84953f6a 	ldrhi	r3, [r5], #3946	; 0xf6a
    3280:	01000502 	tsteq	r0, r2, lsl #10
    3284:	02050001 	andeq	r0, r5, #1
    3288:	00000000 	andeq	r0, r0, r0
    328c:	0103ba03 	tsteq	r3, r3, lsl #20
    3290:	84953f6a 	ldrhi	r3, [r5], #3946	; 0xf6a
    3294:	01000502 	tsteq	r0, r2, lsl #10
    3298:	02050001 	andeq	r0, r5, #1
    329c:	00000000 	andeq	r0, r0, r0
    32a0:	0103d103 	tsteq	r3, r3, lsl #2
    32a4:	4d3f3467 	cfldrsmi	mvf3, [pc, #-412]!	; 3110 <_Min_Stack_Size+0x2f10>
    32a8:	05023d93 	streq	r3, [r2, #-3475]	; 0xfffff26d
    32ac:	00010100 	andeq	r0, r1, r0, lsl #2
    32b0:	00000205 	andeq	r0, r0, r5, lsl #4
    32b4:	ec030000 	stc	0, cr0, [r3], {-0}
    32b8:	3f6a0103 	svccc	0x006a0103
    32bc:	05028495 	streq	r8, [r2, #-1173]	; 0xfffffb6b
    32c0:	00010100 	andeq	r0, r1, r0, lsl #2
    32c4:	00000205 	andeq	r0, r0, r5, lsl #4
    32c8:	84030000 	strhi	r0, [r3], #-0
    32cc:	3f6a0104 	svccc	0x006a0104
    32d0:	05028495 	streq	r8, [r2, #-1173]	; 0xfffffb6b
    32d4:	00010100 	andeq	r0, r1, r0, lsl #2
    32d8:	00000205 	andeq	r0, r0, r5, lsl #4
    32dc:	a1030000 	mrsge	r0, (UNDEF: 3)
    32e0:	3f880104 	svccc	0x00880104
    32e4:	0502a095 	streq	sl, [r2, #-149]	; 0xffffff6b
    32e8:	00010100 	andeq	r0, r1, r0, lsl #2
    32ec:	510c0205 	tstpl	ip, r5, lsl #4
    32f0:	ba030800 	blt	c52f8 <_Min_Stack_Size+0xc50f8>
    32f4:	4b6a0104 	blmi	1a8370c <_Min_Stack_Size+0x1a8350c>
    32f8:	01000502 	tsteq	r0, r2, lsl #10
    32fc:	02050001 	andeq	r0, r5, #1
    3300:	00000000 	andeq	r0, r0, r0
    3304:	0104c703 	tsteq	r4, r3, lsl #14
    3308:	06024b4e 	streq	r4, [r2], -lr, asr #22
    330c:	00010100 	andeq	r0, r1, r0, lsl #2
    3310:	512c0205 			; <UNDEFINED> instruction: 0x512c0205
    3314:	d9030800 	stmdble	r3, {fp}
    3318:	3f870104 	svccc	0x00870104
    331c:	024b4d5d 	subeq	r4, fp, #5952	; 0x1740
    3320:	01010005 	tsteq	r1, r5
    3324:	00020500 	andeq	r0, r2, r0, lsl #10
    3328:	03000000 	movweq	r0, #0
    332c:	670104fc 			; <UNDEFINED> instruction: 0x670104fc
    3330:	3d4d2f34 	stclcc	15, cr2, [sp, #-208]	; 0xffffff30
    3334:	01000602 	tsteq	r0, r2, lsl #12
    3338:	02050001 	andeq	r0, r5, #1
    333c:	00000000 	andeq	r0, r0, r0
    3340:	01059203 	tsteq	r5, r3, lsl #4
    3344:	84b13f6a 	ldrthi	r3, [r1], #3946	; 0xf6a
    3348:	01000502 	tsteq	r0, r2, lsl #10
    334c:	02050001 	andeq	r0, r5, #1
    3350:	00000000 	andeq	r0, r0, r0
    3354:	0105b803 	tsteq	r5, r3, lsl #16
    3358:	84954d6c 	ldrhi	r4, [r5], #3436	; 0xd6c
    335c:	01000502 	tsteq	r0, r2, lsl #10
    3360:	02050001 	andeq	r0, r5, #1
    3364:	00000000 	andeq	r0, r0, r0
    3368:	0105d403 	tsteq	r5, r3, lsl #8
    336c:	84954d6a 	ldrhi	r4, [r5], #3434	; 0xd6a
    3370:	01000502 	tsteq	r0, r2, lsl #10
    3374:	02050001 	andeq	r0, r5, #1
    3378:	00000000 	andeq	r0, r0, r0
    337c:	0105ec03 	tsteq	r5, r3, lsl #24
    3380:	84953f6a 	ldrhi	r3, [r5], #3946	; 0xf6a
    3384:	01000502 	tsteq	r0, r2, lsl #10
    3388:	02050001 	andeq	r0, r5, #1
    338c:	00000000 	andeq	r0, r0, r0
    3390:	01068b03 	tsteq	r6, r3, lsl #22
    3394:	84954d6a 	ldrhi	r4, [r5], #3434	; 0xd6a
    3398:	01000502 	tsteq	r0, r2, lsl #10
    339c:	02050001 	andeq	r0, r5, #1
    33a0:	00000000 	andeq	r0, r0, r0
    33a4:	0106a303 	tsteq	r6, r3, lsl #6
    33a8:	84953f6a 	ldrhi	r3, [r5], #3946	; 0xf6a
    33ac:	01000502 	tsteq	r0, r2, lsl #10
    33b0:	02050001 	andeq	r0, r5, #1
    33b4:	00000000 	andeq	r0, r0, r0
    33b8:	0106b903 	tsteq	r6, r3, lsl #18
    33bc:	0602674e 	streq	r6, [r2], -lr, asr #14
    33c0:	00010100 	andeq	r0, r1, r0, lsl #2
    33c4:	00000205 	andeq	r0, r0, r5, lsl #4
    33c8:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    33cc:	3f6a0106 	svccc	0x006a0106
    33d0:	05028495 	streq	r8, [r2, #-1173]	; 0xfffffb6b
    33d4:	00010100 	andeq	r0, r1, r0, lsl #2
    33d8:	51680205 	cmnpl	r8, r5, lsl #4
    33dc:	e0030800 	and	r0, r3, r0, lsl #16
    33e0:	3f6a0106 	svccc	0x006a0106
    33e4:	05028495 	streq	r8, [r2, #-1173]	; 0xfffffb6b
    33e8:	00010100 	andeq	r0, r1, r0, lsl #2
    33ec:	00000205 	andeq	r0, r0, r5, lsl #4
    33f0:	fa030000 	blx	c33f8 <_Min_Stack_Size+0xc31f8>
    33f4:	4d6a0106 	stfmie	f0, [sl, #-24]!	; 0xffffffe8
    33f8:	05028495 	streq	r8, [r2, #-1173]	; 0xfffffb6b
    33fc:	00010100 	andeq	r0, r1, r0, lsl #2
    3400:	51a80205 			; <UNDEFINED> instruction: 0x51a80205
    3404:	86030800 	strhi	r0, [r3], -r0, lsl #16
    3408:	2f590108 	svccs	0x00590108
    340c:	4b4b354b 	blmi	12d0940 <_Min_Stack_Size+0x12d0740>
    3410:	4169693f 	cmnmi	r9, pc, lsr r9
    3414:	06022131 			; <UNDEFINED> instruction: 0x06022131
    3418:	00010100 	andeq	r0, r1, r0, lsl #2
    341c:	00000205 	andeq	r0, r0, r5, lsl #4
    3420:	b6030000 	strlt	r0, [r3], -r0
    3424:	2f4b0108 	svccs	0x004b0108
    3428:	3f4b4b50 	svccc	0x004b4b50
    342c:	06022169 	streq	r2, [r2], -r9, ror #2
    3430:	00010100 	andeq	r0, r1, r0, lsl #2
    3434:	52080205 	andpl	r0, r8, #1342177280	; 0x50000000
    3438:	ed030800 	stc	8, cr0, [r3, #-0]
    343c:	2f590108 	svccs	0x00590108
    3440:	4c3f3151 	ldfmis	f3, [pc], #-324	; 3304 <_Min_Stack_Size+0x3104>
    3444:	3f3e4f3f 	svccc	0x003e4f3f
    3448:	21324169 	teqcs	r2, r9, ror #2
    344c:	01000602 	tsteq	r0, r2, lsl #12
    3450:	02050001 	andeq	r0, r5, #1
    3454:	00000000 	andeq	r0, r0, r0
    3458:	0109bc03 	tsteq	r9, r3, lsl #24
    345c:	674c3359 	smlsldvs	r3, ip, r9, r3
    3460:	01000502 	tsteq	r0, r2, lsl #10
    3464:	02050001 	andeq	r0, r5, #1
    3468:	00000000 	andeq	r0, r0, r0
    346c:	0109de03 	tsteq	r9, r3, lsl #28
    3470:	93352f59 	teqls	r5, #356	; 0x164
    3474:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
    3478:	06820601 	streq	r0, [r2], r1, lsl #12
    347c:	2131413f 	teqcs	r1, pc, lsr r1
    3480:	01000602 	tsteq	r0, r2, lsl #12
    3484:	02050001 	andeq	r0, r5, #1
    3488:	00000000 	andeq	r0, r0, r0
    348c:	010a9b03 	tsteq	sl, r3, lsl #22
    3490:	674c3359 	smlsldvs	r3, ip, r9, r3
    3494:	01000502 	tsteq	r0, r2, lsl #10
    3498:	0001a001 	andeq	sl, r1, r1
    349c:	2a000200 	bcs	3ca4 <_Min_Stack_Size+0x3aa4>
    34a0:	02000001 	andeq	r0, r0, #1
    34a4:	0d0efb01 	vstreq	d15, [lr, #-4]
    34a8:	01010100 	mrseq	r0, (UNDEF: 17)
    34ac:	00000001 	andeq	r0, r0, r1
    34b0:	01000001 	tsteq	r0, r1
    34b4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3400 <_Min_Stack_Size+0x3200>
    34b8:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    34bc:	76737572 			; <UNDEFINED> instruction: 0x76737572
    34c0:	5344542f 	movtpl	r5, #17455	; 0x442f
    34c4:	5f545341 	svcpl	0x00545341
    34c8:	2f544f49 	svccs	0x00544f49
    34cc:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    34d0:	65697261 	strbvs	r7, [r9, #-609]!	; 0xfffffd9f
    34d4:	72732f73 	rsbsvc	r2, r3, #460	; 0x1cc
    34d8:	752f0063 	strvc	r0, [pc, #-99]!	; 347d <_Min_Stack_Size+0x327d>
    34dc:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    34e0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    34e4:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    34e8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    34ec:	616d2f62 	cmnvs	sp, r2, ror #30
    34f0:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    34f4:	752f0065 	strvc	r0, [pc, #-101]!	; 3497 <_Min_Stack_Size+0x3297>
    34f8:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    34fc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3500:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3504:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3508:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    350c:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    3510:	2f656d6f 	svccs	0x00656d6f
    3514:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    3518:	542f7673 	strtpl	r7, [pc], #-1651	; 3520 <_Min_Stack_Size+0x3320>
    351c:	53415344 	movtpl	r5, #4932	; 0x1344
    3520:	4f495f54 	svcmi	0x00495f54
    3524:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    3528:	2f534953 	svccs	0x00534953
    352c:	2f334d43 	svccs	0x00334d43
    3530:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    3534:	75536563 	ldrbvc	r6, [r3, #-1379]	; 0xfffffa9d
    3538:	726f7070 	rsbvc	r7, pc, #112	; 0x70
    353c:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
    3540:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    3544:	31463233 	cmpcc	r6, r3, lsr r2
    3548:	2f007830 	svccs	0x00007830
    354c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3550:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    3554:	2f767375 	svccs	0x00767375
    3558:	41534454 	cmpmi	r3, r4, asr r4
    355c:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3560:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    3564:	5349534d 	movtpl	r5, #37709	; 0x934d
    3568:	334d432f 	movtcc	r4, #54063	; 0xd32f
    356c:	726f432f 	rsbvc	r4, pc, #-1140850688	; 0xbc000000
    3570:	70755365 	rsbsvc	r5, r5, r5, ror #6
    3574:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    3578:	74730000 	ldrbtvc	r0, [r3], #-0
    357c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3580:	5f783031 	svcpl	0x00783031
    3584:	67647769 	strbvs	r7, [r4, -r9, ror #14]!
    3588:	0100632e 	tsteq	r0, lr, lsr #6
    358c:	645f0000 	ldrbvs	r0, [pc], #-0	; 3594 <_Min_Stack_Size+0x3394>
    3590:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    3594:	745f746c 	ldrbvc	r7, [pc], #-1132	; 359c <_Min_Stack_Size+0x339c>
    3598:	73657079 	cmnvc	r5, #121	; 0x79
    359c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    35a0:	735f0000 	cmpvc	pc, #0
    35a4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    35a8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    35ac:	73000003 	movwvc	r0, #3
    35b0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    35b4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    35b8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    35bc:	6f630000 	svcvs	0x00630000
    35c0:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    35c4:	682e336d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
    35c8:	00000500 	andeq	r0, r0, r0, lsl #10
    35cc:	02050000 	andeq	r0, r5, #0
    35d0:	08005270 	stmdaeq	r0, {r4, r5, r6, r9, ip, lr}
    35d4:	0100dc03 	tsteq	r0, r3, lsl #24
    35d8:	08023d5b 	stmdaeq	r2, {r0, r1, r3, r4, r6, r8, sl, fp, ip, sp}
    35dc:	00010100 	andeq	r0, r1, r0, lsl #2
    35e0:	52900205 	addspl	r0, r0, #1342177280	; 0x50000000
    35e4:	f0030800 			; <UNDEFINED> instruction: 0xf0030800
    35e8:	3d5b0100 	ldfcce	f0, [fp, #-0]
    35ec:	01000802 	tsteq	r0, r2, lsl #16
    35f0:	02050001 	andeq	r0, r5, #1
    35f4:	080052b0 	stmdaeq	r0, {r4, r5, r7, r9, ip, lr}
    35f8:	0100fd03 	tsteq	r0, r3, lsl #26	; <UNPREDICTABLE>
    35fc:	08023d5b 	stmdaeq	r2, {r0, r1, r3, r4, r6, r8, sl, fp, ip, sp}
    3600:	00010100 	andeq	r0, r1, r0, lsl #2
    3604:	52d00205 	sbcspl	r0, r0, #1342177280	; 0x50000000
    3608:	8a030800 	bhi	c5610 <_Min_Stack_Size+0xc5410>
    360c:	4b2f0101 	blmi	bc3a18 <_Min_Stack_Size+0xbc3818>
    3610:	01000602 	tsteq	r0, r2, lsl #12
    3614:	02050001 	andeq	r0, r5, #1
    3618:	080052e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, ip, lr}
    361c:	01019403 	tsteq	r1, r3, lsl #8
    3620:	06024b2f 	streq	r4, [r2], -pc, lsr #22
    3624:	00010100 	andeq	r0, r1, r0, lsl #2
    3628:	00000205 	andeq	r0, r0, r5, lsl #4
    362c:	a1030000 	mrsge	r0, (UNDEF: 3)
    3630:	31590101 	cmpcc	r9, r1, lsl #2
    3634:	21314068 	teqcs	r1, r8, rrx
    3638:	01000902 	tsteq	r0, r2, lsl #18
    363c:	00016a01 	andeq	r6, r1, r1, lsl #20
    3640:	2c000200 	sfmcs	f0, 4, [r0], {-0}
    3644:	02000001 	andeq	r0, r0, #1
    3648:	0d0efb01 	vstreq	d15, [lr, #-4]
    364c:	01010100 	mrseq	r0, (UNDEF: 17)
    3650:	00000001 	andeq	r0, r0, r1
    3654:	01000001 	tsteq	r0, r1
    3658:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 35a4 <_Min_Stack_Size+0x33a4>
    365c:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    3660:	76737572 			; <UNDEFINED> instruction: 0x76737572
    3664:	5344542f 	movtpl	r5, #17455	; 0x442f
    3668:	5f545341 	svcpl	0x00545341
    366c:	2f544f49 	svccs	0x00544f49
    3670:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    3674:	65697261 	strbvs	r7, [r9, #-609]!	; 0xfffffd9f
    3678:	72732f73 	rsbsvc	r2, r3, #460	; 0x1cc
    367c:	752f0063 	strvc	r0, [pc, #-99]!	; 3621 <_Min_Stack_Size+0x3421>
    3680:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3684:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3688:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    368c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3690:	616d2f62 	cmnvs	sp, r2, ror #30
    3694:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    3698:	752f0065 	strvc	r0, [pc, #-101]!	; 363b <_Min_Stack_Size+0x343b>
    369c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    36a0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    36a4:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    36a8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    36ac:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    36b0:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    36b4:	2f656d6f 	svccs	0x00656d6f
    36b8:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    36bc:	542f7673 	strtpl	r7, [pc], #-1651	; 36c4 <_Min_Stack_Size+0x34c4>
    36c0:	53415344 	movtpl	r5, #4932	; 0x1344
    36c4:	4f495f54 	svcmi	0x00495f54
    36c8:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    36cc:	2f534953 	svccs	0x00534953
    36d0:	2f334d43 	svccs	0x00334d43
    36d4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    36d8:	75536563 	ldrbvc	r6, [r3, #-1379]	; 0xfffffa9d
    36dc:	726f7070 	rsbvc	r7, pc, #112	; 0x70
    36e0:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
    36e4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    36e8:	31463233 	cmpcc	r6, r3, lsr r2
    36ec:	2f007830 	svccs	0x00007830
    36f0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    36f4:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    36f8:	2f767375 	svccs	0x00767375
    36fc:	41534454 	cmpmi	r3, r4, asr r4
    3700:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3704:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    3708:	5349534d 	movtpl	r5, #37709	; 0x934d
    370c:	334d432f 	movtcc	r4, #54063	; 0xd32f
    3710:	726f432f 	rsbvc	r4, pc, #-1140850688	; 0xbc000000
    3714:	70755365 	rsbsvc	r5, r5, r5, ror #6
    3718:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    371c:	74730000 	ldrbtvc	r0, [r3], #-0
    3720:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3724:	5f783031 	svcpl	0x00783031
    3728:	6d676264 	sfmvs	f6, 2, [r7, #-400]!	; 0xfffffe70
    372c:	632e7563 			; <UNDEFINED> instruction: 0x632e7563
    3730:	00000100 	andeq	r0, r0, r0, lsl #2
    3734:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    3738:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    373c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    3740:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    3744:	00000200 	andeq	r0, r0, r0, lsl #4
    3748:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    374c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3750:	00030068 	andeq	r0, r3, r8, rrx
    3754:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3758:	31663233 	cmncc	r6, r3, lsr r2
    375c:	682e7830 	stmdavs	lr!, {r4, r5, fp, ip, sp, lr}
    3760:	00000400 	andeq	r0, r0, r0, lsl #8
    3764:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    3768:	336d635f 	cmncc	sp, #2080374785	; 0x7c000001
    376c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    3770:	00000000 	andeq	r0, r0, r0
    3774:	00000205 	andeq	r0, r0, r5, lsl #4
    3778:	d4030000 	strle	r0, [r3], #-0
    377c:	3d2f0100 	stfccs	f0, [pc, #-0]	; 3784 <_Min_Stack_Size+0x3584>
    3780:	01000702 	tsteq	r0, r2, lsl #14
    3784:	02050001 	andeq	r0, r5, #1
    3788:	00000000 	andeq	r0, r0, r0
    378c:	0100de03 	tsteq	r0, r3, lsl #28
    3790:	08024b2f 	stmdaeq	r2, {r0, r1, r2, r3, r5, r8, r9, fp, lr}
    3794:	00010100 	andeq	r0, r1, r0, lsl #2
    3798:	53000205 	movwpl	r0, #517	; 0x205
    379c:	86030800 	strhi	r0, [r3], -r0, lsl #16
    37a0:	3e6b0101 	powcce	f0, f3, f1
    37a4:	07027678 	smlsdxeq	r2, r8, r6, r7
    37a8:	46010100 	strmi	r0, [r1], -r0, lsl #2
    37ac:	02000002 	andeq	r0, r0, #2
    37b0:	00019a00 	andeq	r9, r1, r0, lsl #20
    37b4:	fb010200 	blx	43fbe <_Min_Stack_Size+0x43dbe>
    37b8:	01000d0e 	tsteq	r0, lr, lsl #26
    37bc:	00010101 	andeq	r0, r1, r1, lsl #2
    37c0:	00010000 	andeq	r0, r1, r0
    37c4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    37c8:	2f656d6f 	svccs	0x00656d6f
    37cc:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    37d0:	542f7673 	strtpl	r7, [pc], #-1651	; 37d8 <_Min_Stack_Size+0x35d8>
    37d4:	53415344 	movtpl	r5, #4932	; 0x1344
    37d8:	4f495f54 	svcmi	0x00495f54
    37dc:	73552f54 	cmpvc	r5, #84, 30	; 0x150
    37e0:	2f007265 	svccs	0x00007265
    37e4:	2f727375 	svccs	0x00727375
    37e8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    37ec:	2f656475 	svccs	0x00656475
    37f0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    37f4:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 3658 <_Min_Stack_Size+0x3458>
    37f8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    37fc:	2f00656e 	svccs	0x0000656e
    3800:	2f727375 	svccs	0x00727375
    3804:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3808:	2f656475 	svccs	0x00656475
    380c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    3810:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    3814:	2f007379 	svccs	0x00007379
    3818:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    381c:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    3820:	2f767375 	svccs	0x00767375
    3824:	41534454 	cmpmi	r3, r4, asr r4
    3828:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    382c:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    3830:	5349534d 	movtpl	r5, #37709	; 0x934d
    3834:	334d432f 	movtcc	r4, #54063	; 0xd32f
    3838:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    383c:	53656369 	cmnpl	r5, #-1543503871	; 0xa4000001
    3840:	6f707075 	svcvs	0x00707075
    3844:	532f7472 			; <UNDEFINED> instruction: 0x532f7472
    3848:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xfffff0ac
    384c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3850:	00783031 	rsbseq	r3, r8, r1, lsr r0
    3854:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 37a0 <_Min_Stack_Size+0x35a0>
    3858:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    385c:	76737572 			; <UNDEFINED> instruction: 0x76737572
    3860:	5344542f 	movtpl	r5, #17455	; 0x442f
    3864:	5f545341 	svcpl	0x00545341
    3868:	2f544f49 	svccs	0x00544f49
    386c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    3870:	65697261 	strbvs	r7, [r9, #-609]!	; 0xfffffd9f
    3874:	6e692f73 	mcrvs	15, 3, r2, cr9, cr3, {3}
    3878:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
    387c:	2f656d6f 	svccs	0x00656d6f
    3880:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    3884:	542f7673 	strtpl	r7, [pc], #-1651	; 388c <_Min_Stack_Size+0x368c>
    3888:	53415344 	movtpl	r5, #4932	; 0x1344
    388c:	4f495f54 	svcmi	0x00495f54
    3890:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    3894:	2f534953 	svccs	0x00534953
    3898:	2f334d43 	svccs	0x00334d43
    389c:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    38a0:	70707553 	rsbsvc	r7, r0, r3, asr r5
    38a4:	0074726f 	rsbseq	r7, r4, pc, ror #4
    38a8:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
    38ac:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    38b0:	2e657a69 	vnmulcs.f32	s15, s10, s19
    38b4:	00010063 	andeq	r0, r1, r3, rrx
    38b8:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    38bc:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    38c0:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    38c4:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    38c8:	00020068 	andeq	r0, r2, r8, rrx
    38cc:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    38d0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    38d4:	0300682e 	movweq	r6, #2094	; 0x82e
    38d8:	74730000 	ldrbtvc	r0, [r3], #-0
    38dc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    38e0:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
    38e4:	00040068 	andeq	r0, r4, r8, rrx
    38e8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    38ec:	31663233 	cmncc	r6, r3, lsr r2
    38f0:	675f7830 	smmlarvs	pc, r0, r8, r7	; <UNPREDICTABLE>
    38f4:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
    38f8:	00050068 	andeq	r0, r5, r8, rrx
    38fc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3900:	31663233 	cmncc	r6, r3, lsr r2
    3904:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    3908:	682e6332 	stmdavs	lr!, {r1, r4, r5, r8, r9, sp, lr}
    390c:	00000500 	andeq	r0, r0, r0, lsl #10
    3910:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3914:	30316632 	eorscc	r6, r1, r2, lsr r6
    3918:	70735f78 	rsbsvc	r5, r3, r8, ror pc
    391c:	00682e69 	rsbeq	r2, r8, r9, ror #28
    3920:	73000005 	movwvc	r0, #5
    3924:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3928:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    392c:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    3930:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    3934:	696d0000 	stmdbvs	sp!, {}^	; <UNPREDICTABLE>
    3938:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    393c:	00000500 	andeq	r0, r0, r0, lsl #10
    3940:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    3944:	336d635f 	cmncc	sp, #2080374785	; 0x7c000001
    3948:	0600682e 	streq	r6, [r0], -lr, lsr #16
    394c:	00000000 	andeq	r0, r0, r0
    3950:	533c0205 	teqpl	ip, #1342177280	; 0x50000000
    3954:	1d030800 	stcne	8, cr0, [r3, #-0]
    3958:	4b593f01 	blmi	1653564 <_Min_Stack_Size+0x1653364>
    395c:	682f2f3d 	stmdavs	pc!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
    3960:	3d2f2f3d 	stccc	15, cr2, [pc, #-244]!	; 3874 <_Min_Stack_Size+0x3674>
    3964:	5a3d3d2f 	bpl	f52e28 <_Min_Stack_Size+0xf52c28>
    3968:	0a024b4b 	beq	9669c <_Min_Stack_Size+0x9649c>
    396c:	00010100 	andeq	r0, r1, r0, lsl #2
    3970:	53c00205 	bicpl	r0, r0, #1342177280	; 0x50000000
    3974:	35030800 	strcc	r0, [r3, #-2048]	; 0xfffff800
    3978:	3d4b3e01 	stclcc	14, cr3, [fp, #-4]
    397c:	595a2f2f 	ldmdbpl	sl, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    3980:	00050259 	andeq	r0, r5, r9, asr r2
    3984:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3988:	00540402 	subseq	r0, r4, r2, lsl #8
    398c:	00c20308 	sbceq	r0, r2, r8, lsl #6
    3990:	0a034001 	beq	d399c <_Min_Stack_Size+0xd379c>
    3994:	2f2f2f58 	svccs	0x002f2f58
    3998:	2f2f2f5a 	svccs	0x002f2f5a
    399c:	2f2f2f5b 	svccs	0x002f2f5b
    39a0:	2f3d4d59 	svccs	0x003d4d59
    39a4:	3d2f5b2f 	fstmdbxcc	pc!, {d5-d27}	;@ Deprecated
    39a8:	3d2f2f2f 	stccc	15, cr2, [pc, #-188]!	; 38f4 <_Min_Stack_Size+0x36f4>
    39ac:	5a2f2f2f 	bpl	bcf670 <_Min_Stack_Size+0xbcf470>
    39b0:	08024b4b 	stmdaeq	r2, {r0, r1, r3, r6, r8, r9, fp, lr}
    39b4:	00010100 	andeq	r0, r1, r0, lsl #2
    39b8:	54c80205 	strbpl	r0, [r8], #517	; 0x205
    39bc:	f8030800 			; <UNDEFINED> instruction: 0xf8030800
    39c0:	2f400100 	svccs	0x00400100
    39c4:	4d2f2f2f 	stcmi	15, cr2, [pc, #-188]!	; 3910 <_Min_Stack_Size+0x3710>
    39c8:	2f3d2f4b 	svccs	0x003d2f4b
    39cc:	5967672f 	stmdbpl	r7!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}^
    39d0:	01000302 	tsteq	r0, r2, lsl #6
    39d4:	02050001 	andeq	r0, r5, #1
    39d8:	08005528 	stmdaeq	r0, {r3, r5, r8, sl, ip, lr}
    39dc:	01018e03 	tsteq	r1, r3, lsl #28
    39e0:	02003e30 	andeq	r3, r0, #48, 28	; 0x300
    39e4:	20060104 	andcs	r0, r6, r4, lsl #2
    39e8:	515a6806 	cmppl	sl, r6, lsl #16
    39ec:	30304c3e 	eorscc	r4, r0, lr, lsr ip
    39f0:	01000102 	tsteq	r0, r2, lsl #2
    39f4:	00021401 	andeq	r1, r2, r1, lsl #8
    39f8:	1f000200 	svcne	0x00000200
    39fc:	02000001 	andeq	r0, r0, #1
    3a00:	0d0efb01 	vstreq	d15, [lr, #-4]
    3a04:	01010100 	mrseq	r0, (UNDEF: 17)
    3a08:	00000001 	andeq	r0, r0, r1
    3a0c:	01000001 	tsteq	r0, r1
    3a10:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 395c <_Min_Stack_Size+0x375c>
    3a14:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    3a18:	76737572 			; <UNDEFINED> instruction: 0x76737572
    3a1c:	5344542f 	movtpl	r5, #17455	; 0x442f
    3a20:	5f545341 	svcpl	0x00545341
    3a24:	2f544f49 	svccs	0x00544f49
    3a28:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    3a2c:	73752f00 	cmnvc	r5, #0, 30
    3a30:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    3a34:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3a38:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    3a3c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3a40:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    3a44:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    3a48:	73752f00 	cmnvc	r5, #0, 30
    3a4c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    3a50:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3a54:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    3a58:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3a5c:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    3a60:	6f682f00 	svcvs	0x00682f00
    3a64:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    3a68:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    3a6c:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    3a70:	54534153 	ldrbpl	r4, [r3], #-339	; 0xfffffead
    3a74:	544f495f 	strbpl	r4, [pc], #-2399	; 3a7c <_Min_Stack_Size+0x387c>
    3a78:	534d432f 	movtpl	r4, #54063	; 0xd32f
    3a7c:	432f5349 			; <UNDEFINED> instruction: 0x432f5349
    3a80:	442f334d 	strtmi	r3, [pc], #-845	; 3a88 <_Min_Stack_Size+0x3888>
    3a84:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3a88:	70755365 	rsbsvc	r5, r5, r5, ror #6
    3a8c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    3a90:	2f54532f 	svccs	0x0054532f
    3a94:	334d5453 	movtcc	r5, #54355	; 0xd453
    3a98:	30314632 	eorscc	r4, r1, r2, lsr r6
    3a9c:	682f0078 	stmdavs	pc!, {r3, r4, r5, r6}	; <UNPREDICTABLE>
    3aa0:	2f656d6f 	svccs	0x00656d6f
    3aa4:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    3aa8:	542f7673 	strtpl	r7, [pc], #-1651	; 3ab0 <_Min_Stack_Size+0x38b0>
    3aac:	53415344 	movtpl	r5, #4932	; 0x1344
    3ab0:	4f495f54 	svcmi	0x00495f54
    3ab4:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    3ab8:	2f534953 	svccs	0x00534953
    3abc:	2f334d43 	svccs	0x00334d43
    3ac0:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    3ac4:	70707553 	rsbsvc	r7, r0, r3, asr r5
    3ac8:	0074726f 	rsbseq	r7, r4, pc, ror #4
    3acc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3ad0:	31663233 	cmncc	r6, r3, lsr r2
    3ad4:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    3ad8:	00632e74 	rsbeq	r2, r3, r4, ror lr
    3adc:	5f000001 	svcpl	0x00000001
    3ae0:	61666564 	cmnvs	r6, r4, ror #10
    3ae4:	5f746c75 	svcpl	0x00746c75
    3ae8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    3aec:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3af0:	5f000002 	svcpl	0x00000002
    3af4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3af8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3afc:	00000300 	andeq	r0, r0, r0, lsl #6
    3b00:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3b04:	30316632 	eorscc	r6, r1, r2, lsr r6
    3b08:	00682e78 	rsbeq	r2, r8, r8, ror lr
    3b0c:	63000004 	movwvs	r0, #4
    3b10:	5f65726f 	svcpl	0x0065726f
    3b14:	2e336d63 	cdpcs	13, 3, cr6, cr3, cr3, {3}
    3b18:	00050068 	andeq	r0, r5, r8, rrx
    3b1c:	05000000 	streq	r0, [r0, #-0]
    3b20:	00556c02 	subseq	r6, r5, r2, lsl #24
    3b24:	012f0308 			; <UNDEFINED> instruction: 0x012f0308
    3b28:	0004022f 	andeq	r0, r4, pc, lsr #4
    3b2c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3b30:	00557802 	subseq	r7, r5, r2, lsl #16
    3b34:	01380308 	teqeq	r8, r8, lsl #6
    3b38:	01040200 	mrseq	r0, R12_usr
    3b3c:	00010232 	andeq	r0, r1, r2, lsr r2
    3b40:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3b44:	00558002 	subseq	r8, r5, r2
    3b48:	00c50308 	sbceq	r0, r5, r8, lsl #6
    3b4c:	04020001 	streq	r0, [r2], #-1
    3b50:	01023201 	tsteq	r2, r1, lsl #4
    3b54:	00010100 	andeq	r0, r1, r0, lsl #2
    3b58:	55880205 	strpl	r0, [r8, #517]	; 0x205
    3b5c:	d2030800 	andle	r0, r3, #0, 16
    3b60:	02000100 	andeq	r0, r0, #0, 2
    3b64:	02320104 	eorseq	r0, r2, #4, 2
    3b68:	01010001 	tsteq	r1, r1
    3b6c:	90020500 	andls	r0, r2, r0, lsl #10
    3b70:	03080055 	movweq	r0, #32853	; 0x8055
    3b74:	000100df 	ldrdeq	r0, [r1], -pc	; <UNPREDICTABLE>
    3b78:	32010402 	andcc	r0, r1, #33554432	; 0x2000000
    3b7c:	01000102 	tsteq	r0, r2, lsl #2
    3b80:	02050001 	andeq	r0, r5, #1
    3b84:	08005598 	stmdaeq	r0, {r3, r4, r7, r8, sl, ip, lr}
    3b88:	0100ec03 	tsteq	r0, r3, lsl #24
    3b8c:	0004022f 	andeq	r0, r4, pc, lsr #4
    3b90:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3b94:	0055a402 	subseq	sl, r5, r2, lsl #8
    3b98:	00f50308 	rscseq	r0, r5, r8, lsl #6
    3b9c:	04022f01 	streq	r2, [r2], #-3841	; 0xfffff0ff
    3ba0:	00010100 	andeq	r0, r1, r0, lsl #2
    3ba4:	55b00205 	ldrpl	r0, [r0, #517]!	; 0x205
    3ba8:	fe030800 	cdp2	8, 0, cr0, cr3, cr0, {0}
    3bac:	022f0100 	eoreq	r0, pc, #0, 2
    3bb0:	01010004 	tsteq	r1, r4
    3bb4:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
    3bb8:	03080055 	movweq	r0, #32853	; 0x8055
    3bbc:	2f010187 	svccs	0x00010187
    3bc0:	01000402 	tsteq	r0, r2, lsl #8
    3bc4:	02050001 	andeq	r0, r5, #1
    3bc8:	080055c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, ip, lr}
    3bcc:	01019203 	tsteq	r1, r3, lsl #4
    3bd0:	00040230 	andeq	r0, r4, r0, lsr r2
    3bd4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3bd8:	0055d402 	subseq	sp, r5, r2, lsl #8
    3bdc:	01970308 	orrseq	r0, r7, r8, lsl #6
    3be0:	04023001 	streq	r3, [r2], #-1
    3be4:	00010100 	andeq	r0, r1, r0, lsl #2
    3be8:	55e00205 	strbpl	r0, [r0, #517]!	; 0x205
    3bec:	9c030800 	stcls	8, cr0, [r3], {-0}
    3bf0:	83310101 	teqhi	r1, #1073741824	; 0x40000000
    3bf4:	025a5959 	subseq	r5, sl, #1458176	; 0x164000
    3bf8:	01010005 	tsteq	r1, r5
    3bfc:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
    3c00:	03080056 	movweq	r0, #32854	; 0x8056
    3c04:	2f0101a6 	svccs	0x000101a6
    3c08:	01000402 	tsteq	r0, r2, lsl #8
    3c0c:	00042401 	andeq	r2, r4, r1, lsl #8
    3c10:	f1000200 			; <UNDEFINED> instruction: 0xf1000200
    3c14:	02000001 	andeq	r0, r0, #1
    3c18:	0d0efb01 	vstreq	d15, [lr, #-4]
    3c1c:	01010100 	mrseq	r0, (UNDEF: 17)
    3c20:	00000001 	andeq	r0, r0, r1
    3c24:	01000001 	tsteq	r0, r1
    3c28:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3b74 <_Min_Stack_Size+0x3974>
    3c2c:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    3c30:	76737572 			; <UNDEFINED> instruction: 0x76737572
    3c34:	5344542f 	movtpl	r5, #17455	; 0x442f
    3c38:	5f545341 	svcpl	0x00545341
    3c3c:	2f544f49 	svccs	0x00544f49
    3c40:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    3c44:	73752f00 	cmnvc	r5, #0, 30
    3c48:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    3c4c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3c50:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    3c54:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3c58:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    3c5c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    3c60:	73752f00 	cmnvc	r5, #0, 30
    3c64:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    3c68:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3c6c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    3c70:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3c74:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    3c78:	6f682f00 	svcvs	0x00682f00
    3c7c:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    3c80:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    3c84:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    3c88:	54534153 	ldrbpl	r4, [r3], #-339	; 0xfffffead
    3c8c:	544f495f 	strbpl	r4, [pc], #-2399	; 3c94 <_Min_Stack_Size+0x3a94>
    3c90:	534d432f 	movtpl	r4, #54063	; 0xd32f
    3c94:	432f5349 			; <UNDEFINED> instruction: 0x432f5349
    3c98:	442f334d 	strtmi	r3, [pc], #-845	; 3ca0 <_Min_Stack_Size+0x3aa0>
    3c9c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3ca0:	70755365 	rsbsvc	r5, r5, r5, ror #6
    3ca4:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    3ca8:	2f54532f 	svccs	0x0054532f
    3cac:	334d5453 	movtcc	r5, #54355	; 0xd453
    3cb0:	30314632 	eorscc	r4, r1, r2, lsr r6
    3cb4:	2f2e0078 	svccs	0x002e0078
    3cb8:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
    3cbc:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
    3cc0:	6f682f00 	svcvs	0x00682f00
    3cc4:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    3cc8:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    3ccc:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    3cd0:	54534153 	ldrbpl	r4, [r3], #-339	; 0xfffffead
    3cd4:	544f495f 	strbpl	r4, [pc], #-2399	; 3cdc <_Min_Stack_Size+0x3adc>
    3cd8:	6874452f 	ldmdavs	r4!, {r0, r1, r2, r3, r5, r8, sl, lr}^
    3cdc:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    3ce0:	682f0074 	stmdavs	pc!, {r2, r4, r5, r6}	; <UNPREDICTABLE>
    3ce4:	2f656d6f 	svccs	0x00656d6f
    3ce8:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    3cec:	542f7673 	strtpl	r7, [pc], #-1651	; 3cf4 <_Min_Stack_Size+0x3af4>
    3cf0:	53415344 	movtpl	r5, #4932	; 0x1344
    3cf4:	4f495f54 	svcmi	0x00495f54
    3cf8:	6e492f54 	mcrvs	15, 2, r2, cr9, cr4, {2}
    3cfc:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    3d00:	442f7465 	strtmi	r7, [pc], #-1125	; 3d08 <_Min_Stack_Size+0x3b08>
    3d04:	00504348 	subseq	r4, r0, r8, asr #6
    3d08:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3c54 <_Min_Stack_Size+0x3a54>
    3d0c:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    3d10:	76737572 			; <UNDEFINED> instruction: 0x76737572
    3d14:	5344542f 	movtpl	r5, #17455	; 0x442f
    3d18:	5f545341 	svcpl	0x00545341
    3d1c:	2f544f49 	svccs	0x00544f49
    3d20:	6562696c 	strbvs	r6, [r2, #-2412]!	; 0xfffff694
    3d24:	7474716d 	ldrbtvc	r7, [r4], #-365	; 0xfffffe93
    3d28:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3d2c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3d30:	6f682f00 	svcvs	0x00682f00
    3d34:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    3d38:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    3d3c:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    3d40:	54534153 	ldrbpl	r4, [r3], #-339	; 0xfffffead
    3d44:	544f495f 	strbpl	r4, [pc], #-2399	; 3d4c <_Min_Stack_Size+0x3b4c>
    3d48:	534d432f 	movtpl	r4, #54063	; 0xd32f
    3d4c:	432f5349 			; <UNDEFINED> instruction: 0x432f5349
    3d50:	432f334d 			; <UNDEFINED> instruction: 0x432f334d
    3d54:	5365726f 	cmnpl	r5, #-268435450	; 0xf0000006
    3d58:	6f707075 	svcvs	0x00707075
    3d5c:	2f007472 	svccs	0x00007472
    3d60:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3d64:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    3d68:	2f767375 	svccs	0x00767375
    3d6c:	41534454 	cmpmi	r3, r4, asr r4
    3d70:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3d74:	442f544f 	strtmi	r5, [pc], #-1103	; 3d7c <_Min_Stack_Size+0x3b7c>
    3d78:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    3d7c:	6d000072 	stcvs	0, cr0, [r0, #-456]	; 0xfffffe38
    3d80:	2e6e6961 	cdpcs	9, 6, cr6, cr14, cr1, {3}
    3d84:	00010063 	andeq	r0, r1, r3, rrx
    3d88:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    3d8c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    3d90:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3d94:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    3d98:	00020068 	andeq	r0, r2, r8, rrx
    3d9c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    3da0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    3da4:	0300682e 	movweq	r6, #2094	; 0x82e
    3da8:	74730000 	ldrbtvc	r0, [r3], #-0
    3dac:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3db0:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
    3db4:	00040068 	andeq	r0, r4, r8, rrx
    3db8:	7a697700 	bvc	1a619c0 <_Min_Stack_Size+0x1a617c0>
    3dbc:	70696863 	rsbvc	r6, r9, r3, ror #16
    3dc0:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    3dc4:	00682e66 	rsbeq	r2, r8, r6, ror #28
    3dc8:	73000005 	movwvc	r0, #5
    3dcc:	656b636f 	strbvs	r6, [fp, #-879]!	; 0xfffffc91
    3dd0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3dd4:	64000006 	strvs	r0, [r0], #-6
    3dd8:	2e706368 	cdpcs	3, 7, cr6, cr0, cr8, {3}
    3ddc:	00070068 	andeq	r0, r7, r8, rrx
    3de0:	62696c00 	rsbvs	r6, r9, #0, 24
    3de4:	74716d65 	ldrbtvc	r6, [r1], #-3429	; 0xfffff29b
    3de8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3dec:	63000008 	movwvs	r0, #8
    3df0:	5f65726f 	svcpl	0x0065726f
    3df4:	2e336d63 	cdpcs	13, 3, cr6, cr3, cr3, {3}
    3df8:	00090068 	andeq	r0, r9, r8, rrx
    3dfc:	454c4f00 	strbmi	r4, [ip, #-3840]	; 0xfffff100
    3e00:	00682e44 	rsbeq	r2, r8, r4, asr #28
    3e04:	0000000a 	andeq	r0, r0, sl
    3e08:	28020500 	stmdacs	r2, {r8, sl}
    3e0c:	03080056 	movweq	r0, #32854	; 0x8056
    3e10:	2f0100c4 	svccs	0x000100c4
    3e14:	0004024b 	andeq	r0, r4, fp, asr #4
    3e18:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3e1c:	00563c02 	subseq	r3, r6, r2, lsl #24
    3e20:	00c80308 	sbceq	r0, r8, r8, lsl #6
    3e24:	024b2f01 	subeq	r2, fp, #1, 30
    3e28:	01010004 	tsteq	r1, r4
    3e2c:	50020500 	andpl	r0, r2, r0, lsl #10
    3e30:	03080056 	movweq	r0, #32854	; 0x8056
    3e34:	5a0100cd 	bpl	44170 <_Min_Stack_Size+0x43f70>
    3e38:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    3e3c:	06200601 	strteq	r0, [r0], -r1, lsl #12
    3e40:	00050275 	andeq	r0, r5, r5, ror r2
    3e44:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3e48:	00568002 	subseq	r8, r6, r2
    3e4c:	00d40308 	sbcseq	r0, r4, r8, lsl #6
    3e50:	3d593e01 	ldclcc	14, cr3, [r9, #-4]
    3e54:	0702215a 	smlsdeq	r2, sl, r1, r2
    3e58:	00010100 	andeq	r0, r1, r0, lsl #2
    3e5c:	56b00205 	ldrtpl	r0, [r0], r5, lsl #4
    3e60:	de030800 	cdple	8, 0, cr0, cr3, cr0, {0}
    3e64:	3d4b0100 	stfcce	f0, [fp, #-0]
    3e68:	025c2c22 	subseq	r2, ip, #8704	; 0x2200
    3e6c:	01010005 	tsteq	r1, r5
    3e70:	d8020500 	stmdale	r2, {r8, sl}
    3e74:	03080056 	movweq	r0, #32854	; 0x8056
    3e78:	3f0100e6 	svccc	0x000100e6
    3e7c:	0200675a 	andeq	r6, r0, #23592960	; 0x1680000
    3e80:	3c060104 	stfccs	f0, [r6], {4}
    3e84:	02040200 	andeq	r0, r4, #0, 4
    3e88:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    3e8c:	02002004 	andeq	r2, r0, #4
    3e90:	ad060404 	cfstrsge	mvf0, [r6, #-16]
    3e94:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    3e98:	04020092 	streq	r0, [r2], #-146	; 0xffffff6e
    3e9c:	02006704 	andeq	r6, r0, #4, 14	; 0x100000
    3ea0:	001f0404 	andseq	r0, pc, r4, lsl #8
    3ea4:	21040402 	tstcs	r4, r2, lsl #8
    3ea8:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    3eac:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    3eb0:	02002104 	andeq	r2, r0, #4, 2
    3eb4:	001f0404 	andseq	r0, pc, r4, lsl #8
    3eb8:	d8040402 	stmdale	r4, {r1, sl}
    3ebc:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    3ec0:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
    3ec4:	002f0804 	eoreq	r0, pc, r4, lsl #16
    3ec8:	91040402 	tstls	r4, r2, lsl #8
    3ecc:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    3ed0:	02002f08 	andeq	r2, r0, #8, 30
    3ed4:	00910404 	addseq	r0, r1, r4, lsl #8
    3ed8:	08040402 	stmdaeq	r4, {r1, sl}
    3edc:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    3ee0:	02009104 	andeq	r9, r0, #4, 2
    3ee4:	2f080404 	svccs	0x00080404
    3ee8:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    3eec:	00140291 	mulseq	r4, r1, r2
    3ef0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3ef4:	00587402 	subseq	r7, r8, r2, lsl #8
    3ef8:	00fd0308 	rscseq	r0, sp, r8, lsl #6
    3efc:	4c303d01 	ldcmi	13, cr3, [r0], #-4
    3f00:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
    3f04:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    3f08:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    3f0c:	3f4c3d3d 	svccc	0x004c3d3d
    3f10:	843e3030 	ldrthi	r3, [lr], #-48	; 0xffffffd0
    3f14:	30304c3e 	eorscc	r4, r0, lr, lsr ip
    3f18:	0012023f 	andseq	r0, r2, pc, lsr r2
    3f1c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3f20:	00592402 	subseq	r2, r9, r2, lsl #8
    3f24:	01a50308 			; <UNDEFINED> instruction: 0x01a50308
    3f28:	4d305901 	ldcmi	9, cr5, [r0, #-4]!
    3f2c:	0a022184 	beq	8c544 <_Min_Stack_Size+0x8c344>
    3f30:	00010100 	andeq	r0, r1, r0, lsl #2
    3f34:	59600205 	stmdbpl	r0!, {r0, r2, r9}^
    3f38:	b0030800 	andlt	r0, r3, r0, lsl #16
    3f3c:	2f670101 	svccs	0x00670101
    3f40:	0004029f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
    3f44:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3f48:	00598c02 	subseq	r8, r9, r2, lsl #24
    3f4c:	01b50308 			; <UNDEFINED> instruction: 0x01b50308
    3f50:	68323d01 	ldmdavs	r2!, {r0, r8, sl, fp, ip, sp}
    3f54:	004b3f9f 	umaaleq	r3, fp, pc, pc	; <UNPREDICTABLE>
    3f58:	06010402 	streq	r0, [r1], -r2, lsl #8
    3f5c:	5a3f063c 	bpl	fc5854 <_Min_Stack_Size+0xfc5654>
    3f60:	02005a5b 	andeq	r5, r0, #372736	; 0x5b000
    3f64:	4a060104 	bmi	18437c <_Min_Stack_Size+0x18417c>
    3f68:	00213e06 	eoreq	r3, r1, r6, lsl #28
    3f6c:	06010402 	streq	r0, [r1], -r2, lsl #8
    3f70:	3d061208 	sfmcc	f1, 4, [r6, #-32]	; 0xffffffe0
    3f74:	02214f48 	eoreq	r4, r1, #72, 30	; 0x120
    3f78:	01010006 	tsteq	r1, r6
    3f7c:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
    3f80:	0308005a 	movweq	r0, #32858	; 0x805a
    3f84:	3d0101d5 	stfccs	f0, [r1, #-852]	; 0xfffffcac
    3f88:	4b5a843d 	blmi	16a5084 <_Min_Stack_Size+0x16a4e84>
    3f8c:	30303050 	eorscc	r3, r0, r0, asr r0
    3f90:	4c3d3130 	ldfmis	f3, [sp], #-192	; 0xffffff40
    3f94:	0b03873e 	bleq	e5c94 <_Min_Stack_Size+0xe5a94>
    3f98:	9f324d4a 	svcls	0x00324d4a
    3f9c:	9f314d83 	svcls	0x00314d83
    3fa0:	01040200 	mrseq	r0, R12_usr
    3fa4:	4d312483 	cfldrsmi	mvf2, [r1, #-524]!	; 0xfffffdf4
    3fa8:	3e4b594c 	cdpcc	9, 4, cr5, cr11, cr12, {2}
    3fac:	02040200 	andeq	r0, r4, #0, 4
    3fb0:	36312483 	ldrtcc	r2, [r1], -r3, lsl #9
    3fb4:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    3fb8:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    3fbc:	660a0323 	strvs	r0, [sl], -r3, lsr #6
    3fc0:	5b4c3e31 	blpl	131388c <_Min_Stack_Size+0x131368c>
    3fc4:	4b928431 	blmi	fe4a5090 <BootRAM+0xd415831>
    3fc8:	3e30423d 	mrccc	2, 1, r4, cr0, cr13, {1}
    3fcc:	4b834b4c 	blmi	fe0d6d04 <BootRAM+0xd0474a5>
    3fd0:	4b836724 	blmi	fe0ddc68 <BootRAM+0xd04e409>
    3fd4:	4b834b24 	blmi	fe0d6c6c <BootRAM+0xd04740d>
    3fd8:	4b763027 	blmi	1d9007c <_Min_Stack_Size+0x1d8fe7c>
    3fdc:	234b834b 	movtcs	r8, #45899	; 0xb34b
    3fe0:	234b8367 	movtcs	r8, #45927	; 0xb367
    3fe4:	244b6867 	strbcs	r6, [fp], #-2151	; 0xfffff799
    3fe8:	234b9f3d 	movtcs	r9, #48957	; 0xbf3d
    3fec:	31225a59 			; <UNDEFINED> instruction: 0x31225a59
    3ff0:	003f3d67 	eorseq	r3, pc, r7, ror #26
    3ff4:	06010402 	streq	r0, [r1], -r2, lsl #8
    3ff8:	3e67064a 	cdpcc	6, 6, cr0, cr7, cr10, {2}
    3ffc:	024b4b5b 	subeq	r4, fp, #93184	; 0x16c00
    4000:	006c1540 	rsbeq	r1, ip, r0, asr #10
    4004:	06010402 	streq	r0, [r1], -r2, lsl #8
    4008:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
    400c:	02003c02 	andeq	r3, r0, #512	; 0x200
    4010:	00200404 	eoreq	r0, r0, r4, lsl #8
    4014:	06040402 	streq	r0, [r4], -r2, lsl #8
    4018:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    401c:	02008504 	andeq	r8, r0, #4, 10	; 0x1000000
    4020:	4a060104 	bmi	184438 <_Min_Stack_Size+0x184238>
    4024:	3d3d9206 	lfmcc	f1, 1, [sp, #-24]!	; 0xffffffe8
    4028:	03585d03 	cmpeq	r8, #3, 26	; 0xc0
    402c:	59598228 	ldmdbpl	r9, {r3, r5, r9, pc}^
    4030:	01000c02 	tsteq	r0, r2, lsl #24
    4034:	00033c01 	andeq	r3, r3, r1, lsl #24
    4038:	d2000200 	andle	r0, r0, #0, 4
    403c:	02000000 	andeq	r0, r0, #0
    4040:	0d0efb01 	vstreq	d15, [lr, #-4]
    4044:	01010100 	mrseq	r0, (UNDEF: 17)
    4048:	00000001 	andeq	r0, r0, r1
    404c:	01000001 	tsteq	r0, r1
    4050:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3f9c <_Min_Stack_Size+0x3d9c>
    4054:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    4058:	76737572 			; <UNDEFINED> instruction: 0x76737572
    405c:	5344542f 	movtpl	r5, #17455	; 0x442f
    4060:	5f545341 	svcpl	0x00545341
    4064:	2f544f49 	svccs	0x00544f49
    4068:	6562696c 	strbvs	r6, [r2, #-2412]!	; 0xfffff694
    406c:	7474716d 	ldrbtvc	r7, [r4], #-365	; 0xfffffe93
    4070:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    4074:	73752f00 	cmnvc	r5, #0, 30
    4078:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    407c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4080:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    4084:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4088:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    408c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    4090:	73752f00 	cmnvc	r5, #0, 30
    4094:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    4098:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    409c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    40a0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    40a4:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    40a8:	6f682f00 	svcvs	0x00682f00
    40ac:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    40b0:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    40b4:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    40b8:	54534153 	ldrbpl	r4, [r3], #-339	; 0xfffffead
    40bc:	544f495f 	strbpl	r4, [pc], #-2399	; 40c4 <_Min_Stack_Size+0x3ec4>
    40c0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    40c4:	74716d65 	ldrbtvc	r6, [r1], #-3429	; 0xfffff29b
    40c8:	6e692f74 	mcrvs	15, 3, r2, cr9, cr4, {3}
    40cc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    40d0:	6c000065 	stcvs	0, cr0, [r0], {101}	; 0x65
    40d4:	6d656269 	sfmvs	f6, 2, [r5, #-420]!	; 0xfffffe5c
    40d8:	2e747471 	mrccs	4, 3, r7, cr4, cr1, {3}
    40dc:	00010063 	andeq	r0, r1, r3, rrx
    40e0:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    40e4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    40e8:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    40ec:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    40f0:	00020068 	andeq	r0, r2, r8, rrx
    40f4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    40f8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    40fc:	0300682e 	movweq	r6, #2094	; 0x82e
    4100:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    4104:	716d6562 	cmnvc	sp, r2, ror #10
    4108:	682e7474 	stmdavs	lr!, {r2, r4, r5, r6, sl, ip, sp, lr}
    410c:	00000400 	andeq	r0, r0, r0, lsl #8
    4110:	02050000 	andeq	r0, r5, #0
    4114:	08005e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, ip, lr}
    4118:	4b012c03 	blmi	4f12c <_Min_Stack_Size+0x4ef2c>
    411c:	753d7532 	ldrvc	r7, [sp, #-1330]!	; 0xffffface
    4120:	2140753d 	cmpcs	r0, sp, lsr r5
    4124:	01000602 	tsteq	r0, r2, lsl #12
    4128:	02050001 	andeq	r0, r5, #1
    412c:	08005ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip, lr}
    4130:	4b013d03 	blmi	53544 <_Min_Stack_Size+0x53344>
    4134:	0200332f 	andeq	r3, r0, #-1140850688	; 0xbc000000
    4138:	003f0104 	eorseq	r0, pc, r4, lsl #2
    413c:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    4140:	01040200 	mrseq	r0, R12_usr
    4144:	040200bb 	streq	r0, [r2], #-187	; 0xffffff45
    4148:	02003d01 	andeq	r3, r0, #1, 26	; 0x40
    414c:	4c3d0104 	ldfmis	f0, [sp], #-16
    4150:	00060221 	andeq	r0, r6, r1, lsr #4
    4154:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4158:	005f3802 	subseq	r3, pc, r2, lsl #16
    415c:	00d00308 	sbcseq	r0, r0, r8, lsl #6
    4160:	67594b01 	ldrbvs	r4, [r9, -r1, lsl #22]
    4164:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
    4168:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    416c:	593f3d3d 	ldmdbpl	pc!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}	; <UNPREDICTABLE>
    4170:	7567832f 	strbvc	r8, [r7, #-815]!	; 0xfffffcd1
    4174:	938359a3 	orrls	r5, r3, #2670592	; 0x28c000
    4178:	00040221 	andeq	r0, r4, r1, lsr #4
    417c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4180:	00000002 	andeq	r0, r0, r2
    4184:	00ee0300 	rsceq	r0, lr, r0, lsl #6
    4188:	00865a01 	addeq	r5, r6, r1, lsl #20
    418c:	06010402 	streq	r0, [r1], -r2, lsl #8
    4190:	773d063c 			; <UNDEFINED> instruction: 0x773d063c
    4194:	00040221 	andeq	r0, r4, r1, lsr #4
    4198:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    419c:	00000002 	andeq	r0, r0, r2
    41a0:	00fb0300 	rscseq	r0, fp, r0, lsl #6
    41a4:	68325901 	ldmdavs	r2!, {r0, r8, fp, ip, lr}
    41a8:	76928359 			; <UNDEFINED> instruction: 0x76928359
    41ac:	0402213e 	streq	r2, [r2], #-318	; 0xfffffec2
    41b0:	00010100 	andeq	r0, r1, r0, lsl #2
    41b4:	5ff40205 	svcpl	0x00f40205
    41b8:	8d030800 	stchi	8, cr0, [r3, #-0]
    41bc:	845d0101 	ldrbhi	r0, [sp], #-257	; 0xfffffeff
    41c0:	01040200 	mrseq	r0, R12_usr
    41c4:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
    41c8:	04022177 	streq	r2, [r2], #-375	; 0xfffffe89
    41cc:	00010100 	andeq	r0, r1, r0, lsl #2
    41d0:	60340205 	eorsvs	r0, r4, r5, lsl #4
    41d4:	9b030800 	blls	c61dc <_Min_Stack_Size+0xc5fdc>
    41d8:	32590101 	subscc	r0, r9, #1073741824	; 0x40000000
    41dc:	832f5969 			; <UNDEFINED> instruction: 0x832f5969
    41e0:	5f3f7568 	svcpl	0x003f7568
    41e4:	02213ef4 	eoreq	r3, r1, #244, 28	; 0xf40
    41e8:	01010004 	tsteq	r1, r4
    41ec:	c8020500 	stmdagt	r2, {r8, sl}
    41f0:	03080060 	movweq	r0, #32864	; 0x8060
    41f4:	5a0101ba 	bpl	448e4 <_Min_Stack_Size+0x446e4>
    41f8:	75754c59 	ldrbvc	r4, [r5, #-3161]!	; 0xfffff3a7
    41fc:	77843d75 			; <UNDEFINED> instruction: 0x77843d75
    4200:	0005024b 	andeq	r0, r5, fp, asr #4
    4204:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4208:	00614402 	rsbeq	r4, r1, r2, lsl #8
    420c:	01cb0308 	biceq	r0, fp, r8, lsl #6
    4210:	02006701 	andeq	r6, r0, #262144	; 0x40000
    4214:	3c060104 	stfccs	f0, [r6], {4}
    4218:	00754b06 	rsbseq	r4, r5, r6, lsl #22
    421c:	06010402 	streq	r0, [r1], -r2, lsl #8
    4220:	754b063c 	strbvc	r0, [fp, #-1596]	; 0xfffff9c4
    4224:	01000302 	tsteq	r0, r2, lsl #6
    4228:	02050001 	andeq	r0, r5, #1
    422c:	08006190 	stmdaeq	r0, {r4, r7, r8, sp, lr}
    4230:	0101d203 	tsteq	r1, r3, lsl #4
    4234:	05024b67 	streq	r4, [r2, #-2919]	; 0xfffff499
    4238:	00010100 	andeq	r0, r1, r0, lsl #2
    423c:	61b00205 	lslsvs	r0, r5, #4
    4240:	d7030800 	strle	r0, [r3, -r0, lsl #16]
    4244:	3e750101 	rpwccs	f0, f5, f1
    4248:	3f757575 	svccc	0x00757575
    424c:	3d68673d 	stclcc	7, cr6, [r8, #-244]!	; 0xffffff0c
    4250:	6a596867 	bvs	165e3f4 <_Min_Stack_Size+0x165e1f4>
    4254:	4e384e08 	cdpmi	14, 3, cr4, cr8, cr8, {0}
    4258:	2e090338 	mcrcs	3, 0, r0, cr9, cr8, {1}
    425c:	5a59593d 	bpl	165a758 <_Min_Stack_Size+0x165a558>
    4260:	3f152302 	svccc	0x00152302
    4264:	76755b59 			; <UNDEFINED> instruction: 0x76755b59
    4268:	f3082f69 	vpmax.f32	q1, q4, <illegal reg q12.5>
    426c:	9f598367 	svcls	0x00598367
    4270:	bb839f3e 	bllt	fe0ebf70 <BootRAM+0xd05c711>
    4274:	839f3e4c 	orrshi	r3, pc, #76, 28	; 0x4c0
    4278:	9f3e4dbb 	svcls	0x003e4dbb
    427c:	bb4ebb83 	bllt	13b3090 <_Min_Stack_Size+0x13b2e90>
    4280:	05023d3f 	streq	r3, [r2, #-3391]	; 0xfffff2c1
    4284:	00010100 	andeq	r0, r1, r0, lsl #2
    4288:	00000205 	andeq	r0, r0, r5, lsl #4
    428c:	b0030000 	andlt	r0, r3, r0
    4290:	504b0102 	subpl	r0, fp, r2, lsl #2
    4294:	02003fc9 	andeq	r3, r0, #804	; 0x324
    4298:	02210104 	eoreq	r0, r1, #4, 2
    429c:	01010004 	tsteq	r1, r4
    42a0:	c0020500 	andgt	r0, r2, r0, lsl #10
    42a4:	03080064 	movweq	r0, #32868	; 0x8064
    42a8:	4b0102be 	blmi	44da8 <_Min_Stack_Size+0x44ba8>
    42ac:	003fc950 	eorseq	ip, pc, r0, asr r9	; <UNPREDICTABLE>
    42b0:	21010402 	tstcs	r1, r2, lsl #8
    42b4:	01000402 	tsteq	r0, r2, lsl #8
    42b8:	02050001 	andeq	r0, r5, #1
    42bc:	00000000 	andeq	r0, r0, r0
    42c0:	0102cc03 	tsteq	r2, r3, lsl #24
    42c4:	0402bb75 	streq	fp, [r2], #-2933	; 0xfffff48b
    42c8:	00010100 	andeq	r0, r1, r0, lsl #2
    42cc:	00000205 	andeq	r0, r0, r5, lsl #4
    42d0:	d0030000 	andle	r0, r3, r0
    42d4:	67ad0102 	strvs	r0, [sp, r2, lsl #2]!
    42d8:	4b3d3d68 	blmi	f53880 <_Min_Stack_Size+0xf53680>
    42dc:	3d4b4c3d 	stclcc	12, cr4, [fp, #-244]	; 0xffffff0c
    42e0:	13230240 			; <UNDEFINED> instruction: 0x13230240
    42e4:	91597567 	cmpls	r9, r7, ror #10
    42e8:	4b91ad4b 	blmi	fe46f81c <BootRAM+0xd3dffbd>
    42ec:	673d8968 	ldrvs	r8, [sp, -r8, ror #18]!
    42f0:	24025a4b 	strcs	r5, [r2], #-2635	; 0xfffff5b5
    42f4:	774b7515 	smlaldvc	r7, fp, r5, r5
    42f8:	7683694b 	strvc	r6, [r3], fp, asr #18
    42fc:	13250277 			; <UNDEFINED> instruction: 0x13250277
    4300:	bd9f8367 	ldclt	3, cr8, [pc, #412]	; 44a4 <_Min_Stack_Size+0x42a4>
    4304:	023d3fbb 	eorseq	r3, sp, #748	; 0x2ec
    4308:	01010005 	tsteq	r1, r5
    430c:	00020500 	andeq	r0, r2, r0, lsl #10
    4310:	03000000 	movweq	r0, #0
    4314:	67010397 			; <UNDEFINED> instruction: 0x67010397
    4318:	003fc9c2 	eorseq	ip, pc, r2, asr #19
    431c:	21010402 	tstcs	r1, r2, lsl #8
    4320:	01000402 	tsteq	r0, r2, lsl #8
    4324:	02050001 	andeq	r0, r5, #1
    4328:	080064fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, sp, lr}
    432c:	0103a703 	tsteq	r3, r3, lsl #14
    4330:	67835c91 			; <UNDEFINED> instruction: 0x67835c91
    4334:	02855a3d 	addeq	r5, r5, #249856	; 0x3d000
    4338:	67671323 	strbvs	r1, [r7, -r3, lsr #6]!
    433c:	086b854b 	stmdaeq	fp!, {r0, r1, r3, r6, r8, sl, pc}^
    4340:	756783f3 	strbvc	r8, [r7, #-1011]!	; 0xfffffc0d
    4344:	3d3fd793 	ldccc	7, cr13, [pc, #-588]!	; 4100 <_Min_Stack_Size+0x3f00>
    4348:	01000502 	tsteq	r0, r2, lsl #10
    434c:	02050001 	andeq	r0, r5, #1
    4350:	00000000 	andeq	r0, r0, r0
    4354:	0103ce03 	tsteq	r3, r3, lsl #28
    4358:	67835c91 			; <UNDEFINED> instruction: 0x67835c91
    435c:	02855a3d 	addeq	r5, r5, #249856	; 0x3d000
    4360:	67671323 	strbvs	r1, [r7, -r3, lsr #6]!
    4364:	086b854b 	stmdaeq	fp!, {r0, r1, r3, r6, r8, sl, pc}^
    4368:	756783f3 	strbvc	r8, [r7, #-1011]!	; 0xfffffc0d
    436c:	3d3fd793 	ldccc	7, cr13, [pc, #-588]!	; 4128 <_Min_Stack_Size+0x3f28>
    4370:	01000502 	tsteq	r0, r2, lsl #10
    4374:	0000e901 	andeq	lr, r0, r1, lsl #18
    4378:	cf000200 	svcgt	0x00000200
    437c:	02000000 	andeq	r0, r0, #0
    4380:	0d0efb01 	vstreq	d15, [lr, #-4]
    4384:	01010100 	mrseq	r0, (UNDEF: 17)
    4388:	00000001 	andeq	r0, r0, r1
    438c:	01000001 	tsteq	r0, r1
    4390:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4394:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4398:	2f2e2e2f 	svccs	0x002e2e2f
    439c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    43a0:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    43a4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    43a8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    43ac:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    43b0:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    43b4:	73752f00 	cmnvc	r5, #0, 30
    43b8:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    43bc:	63672f62 	cmnvs	r7, #392	; 0x188
    43c0:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    43c4:	6f6e2d6d 	svcvs	0x006e2d6d
    43c8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    43cc:	2f696261 	svccs	0x00696261
    43d0:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
    43d4:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
    43d8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    43dc:	622f0065 	eorvs	r0, pc, #101	; 0x65
    43e0:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    43e4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    43e8:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    43ec:	70777a35 	rsbsvc	r7, r7, r5, lsr sl
    43f0:	6e2f4578 	mcrvs	5, 1, r4, cr15, cr8, {3}
    43f4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    43f8:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    43fc:	2b302e32 	blcs	c0fccc <_Min_Stack_Size+0xc0facc>
    4400:	32746967 	rsbscc	r6, r4, #1687552	; 0x19c000
    4404:	30353130 	eorscc	r3, r5, r0, lsr r1
    4408:	2e303338 	mrccs	3, 1, r3, cr0, cr8, {1}
    440c:	64336135 	ldrtvs	r6, [r3], #-309	; 0xfffffecb
    4410:	2f363335 	svccs	0x00363335
    4414:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4418:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 427c <_Min_Stack_Size+0x407c>
    441c:	2f636269 	svccs	0x00636269
    4420:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4424:	00656475 	rsbeq	r6, r5, r5, ror r4
    4428:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    442c:	2e797063 	cdpcs	0, 7, cr7, cr9, cr3, {3}
    4430:	00010063 	andeq	r0, r1, r3, rrx
    4434:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4438:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    443c:	00020068 	andeq	r0, r2, r8, rrx
    4440:	72747300 	rsbsvc	r7, r4, #0, 6
    4444:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    4448:	00030068 	andeq	r0, r3, r8, rrx
    444c:	05000000 	streq	r0, [r0, #-0]
    4450:	0066ce02 	rsbeq	ip, r6, r2, lsl #28
    4454:	01390308 	teqeq	r9, r8, lsl #6
    4458:	2c033043 	stccs	0, cr3, [r3], {67}	; 0x43
    445c:	00010258 	andeq	r0, r1, r8, asr r2
    4460:	00ea0101 	rsceq	r0, sl, r1, lsl #2
    4464:	00020000 	andeq	r0, r2, r0
    4468:	000000cf 	andeq	r0, r0, pc, asr #1
    446c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4470:	0101000d 	tsteq	r1, sp
    4474:	00000101 	andeq	r0, r0, r1, lsl #2
    4478:	00000100 	andeq	r0, r0, r0, lsl #2
    447c:	2f2e2e01 	svccs	0x002e2e01
    4480:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4484:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4488:	2f2e2e2f 	svccs	0x002e2e2f
    448c:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    4490:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4494:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4498:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    449c:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    44a0:	752f0067 	strvc	r0, [pc, #-103]!	; 4441 <_Min_Stack_Size+0x4241>
    44a4:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 42e0 <_Min_Stack_Size+0x40e0>
    44a8:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    44ac:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    44b0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    44b4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    44b8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    44bc:	392e342f 	stmdbcc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
    44c0:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
    44c4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    44c8:	2f006564 	svccs	0x00006564
    44cc:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    44d0:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    44d4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    44d8:	777a352d 	ldrbvc	r3, [sl, -sp, lsr #10]!
    44dc:	2f457870 	svccs	0x00457870
    44e0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    44e4:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    44e8:	302e322e 	eorcc	r3, lr, lr, lsr #4
    44ec:	7469672b 	strbtvc	r6, [r9], #-1835	; 0xfffff8d5
    44f0:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    44f4:	30333830 	eorscc	r3, r3, r0, lsr r8
    44f8:	3361352e 	cmncc	r1, #192937984	; 0xb800000
    44fc:	36333564 	ldrtcc	r3, [r3], -r4, ror #10
    4500:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4504:	2f62696c 	svccs	0x0062696c
    4508:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    450c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4510:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4514:	656d0000 	strbvs	r0, [sp, #-0]!
    4518:	7465736d 	strbtvc	r7, [r5], #-877	; 0xfffffc93
    451c:	0100632e 	tsteq	r0, lr, lsr #6
    4520:	74730000 	ldrbtvc	r0, [r3], #-0
    4524:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    4528:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    452c:	74730000 	ldrbtvc	r0, [r3], #-0
    4530:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    4534:	0300682e 	movweq	r6, #2094	; 0x82e
    4538:	00000000 	andeq	r0, r0, r0
    453c:	66e40205 	strbtvs	r0, [r4], r5, lsl #4
    4540:	30030800 	andcc	r0, r3, r0, lsl #16
    4544:	32031301 	andcc	r1, r3, #67108864	; 0x4000000
    4548:	023f2f2e 	eorseq	r2, pc, #46, 30	; 0xb8
    454c:	01010001 	tsteq	r1, r1
    4550:	0000017e 	andeq	r0, r0, lr, ror r1
    4554:	013c0002 	teqeq	ip, r2
    4558:	01020000 	mrseq	r0, (UNDEF: 2)
    455c:	000d0efb 	strdeq	r0, [sp], -fp
    4560:	01010101 	tsteq	r1, r1, lsl #2
    4564:	01000000 	mrseq	r0, (UNDEF: 0)
    4568:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    456c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4570:	2f2e2e2f 	svccs	0x002e2e2f
    4574:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4578:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    457c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4580:	2f62696c 	svccs	0x0062696c
    4584:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    4588:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    458c:	0062696c 	rsbeq	r6, r2, ip, ror #18
    4590:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4594:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4598:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    459c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    45a0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    45a4:	61652d65 	cmnvs	r5, r5, ror #26
    45a8:	342f6962 	strtcc	r6, [pc], #-2402	; 45b0 <_Min_Stack_Size+0x43b0>
    45ac:	332e392e 			; <UNDEFINED> instruction: 0x332e392e
    45b0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    45b4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    45b8:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    45bc:	2f646c69 	svccs	0x00646c69
    45c0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    45c4:	352d6269 	strcc	r6, [sp, #-617]!	; 0xfffffd97
    45c8:	7870777a 	ldmdavc	r0!, {r1, r3, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
    45cc:	656e2f45 	strbvs	r2, [lr, #-3909]!	; 0xfffff0bb
    45d0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    45d4:	322e322d 	eorcc	r3, lr, #-805306366	; 0xd0000002
    45d8:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    45dc:	30327469 	eorscc	r7, r2, r9, ror #8
    45e0:	38303531 	ldmdacc	r0!, {r0, r4, r5, r8, sl, ip, sp}
    45e4:	352e3033 	strcc	r3, [lr, #-51]!	; 0xffffffcd
    45e8:	35643361 	strbcc	r3, [r4, #-865]!	; 0xfffffc9f
    45ec:	6e2f3633 	mcrvs	6, 1, r3, cr15, cr3, {1}
    45f0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    45f4:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    45f8:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    45fc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4600:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    4604:	2f007379 	svccs	0x00007379
    4608:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    460c:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    4610:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4614:	777a352d 	ldrbvc	r3, [sl, -sp, lsr #10]!
    4618:	2f457870 	svccs	0x00457870
    461c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4620:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    4624:	302e322e 	eorcc	r3, lr, lr, lsr #4
    4628:	7469672b 	strbtvc	r6, [r9], #-1835	; 0xfffff8d5
    462c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    4630:	30333830 	eorscc	r3, r3, r0, lsr r8
    4634:	3361352e 	cmncc	r1, #192937984	; 0xb800000
    4638:	36333564 	ldrtcc	r3, [r3], -r4, ror #10
    463c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4640:	2f62696c 	svccs	0x0062696c
    4644:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    4648:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    464c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4650:	61720000 	cmnvs	r2, r0
    4654:	632e646e 			; <UNDEFINED> instruction: 0x632e646e
    4658:	00000100 	andeq	r0, r0, r0, lsl #2
    465c:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    4660:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    4664:	00000200 	andeq	r0, r0, r0, lsl #4
    4668:	6b636f6c 	blvs	18e0420 <_Min_Stack_Size+0x18e0220>
    466c:	0300682e 	movweq	r6, #2094	; 0x82e
    4670:	745f0000 	ldrbvc	r0, [pc], #-0	; 4678 <_Min_Stack_Size+0x4478>
    4674:	73657079 	cmnvc	r5, #121	; 0x79
    4678:	0300682e 	movweq	r6, #2094	; 0x82e
    467c:	65720000 	ldrbvs	r0, [r2, #-0]!
    4680:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    4684:	00030068 	andeq	r0, r3, r8, rrx
    4688:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    468c:	2e62696c 	cdpcs	9, 6, cr6, cr2, cr12, {3}
    4690:	00040068 	andeq	r0, r4, r8, rrx
    4694:	05000000 	streq	r0, [r0, #-0]
    4698:	00000002 	andeq	r0, r0, r2
    469c:	00c90300 	sbceq	r0, r9, r0, lsl #6
    46a0:	211f2101 	tstcs	pc, r1, lsl #2
    46a4:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    46a8:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    46ac:	07029f08 	streq	r9, [r2, -r8, lsl #30]
    46b0:	00010100 	andeq	r0, r1, r0, lsl #2
    46b4:	66f40205 	ldrbtvs	r0, [r4], r5, lsl #4
    46b8:	d2030800 	andle	r0, r3, #0, 16
    46bc:	1f130100 	svcne	0x00130100
    46c0:	02002521 	andeq	r2, r0, #138412032	; 0x8400000
    46c4:	2e060104 	adfcss	f0, f6, f4
    46c8:	d5a00806 	strle	r0, [r0, #2054]!	; 0x806
    46cc:	000a0231 	andeq	r0, sl, r1, lsr r2
    46d0:	01b50101 			; <UNDEFINED> instruction: 0x01b50101
    46d4:	00020000 	andeq	r0, r2, r0
    46d8:	00000163 	andeq	r0, r0, r3, ror #2
    46dc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    46e0:	0101000d 	tsteq	r1, sp
    46e4:	00000101 	andeq	r0, r0, r1, lsl #2
    46e8:	00000100 	andeq	r0, r0, r0, lsl #2
    46ec:	2f2e2e01 	svccs	0x002e2e01
    46f0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    46f4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    46f8:	2f2e2e2f 	svccs	0x002e2e2f
    46fc:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    4700:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4704:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4708:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    470c:	6f696474 	svcvs	0x00696474
    4710:	73752f00 	cmnvc	r5, #0, 30
    4714:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4718:	63672f62 	cmnvs	r7, #392	; 0x188
    471c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4720:	6f6e2d6d 	svcvs	0x006e2d6d
    4724:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4728:	2f696261 	svccs	0x00696261
    472c:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
    4730:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
    4734:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4738:	622f0065 	eorvs	r0, pc, #101	; 0x65
    473c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    4740:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4744:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    4748:	70777a35 	rsbsvc	r7, r7, r5, lsr sl
    474c:	6e2f4578 	mcrvs	5, 1, r4, cr15, cr8, {3}
    4750:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4754:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    4758:	2b302e32 	blcs	c10028 <_Min_Stack_Size+0xc0fe28>
    475c:	32746967 	rsbscc	r6, r4, #1687552	; 0x19c000
    4760:	30353130 	eorscc	r3, r5, r0, lsr r1
    4764:	2e303338 	mrccs	3, 1, r3, cr0, cr8, {1}
    4768:	64336135 	ldrtvs	r6, [r3], #-309	; 0xfffffecb
    476c:	2f363335 	svccs	0x00363335
    4770:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4774:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 45d8 <_Min_Stack_Size+0x43d8>
    4778:	2f636269 	svccs	0x00636269
    477c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4780:	2f656475 	svccs	0x00656475
    4784:	00737973 	rsbseq	r7, r3, r3, ror r9
    4788:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    478c:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    4790:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4794:	7a352d62 	bvc	d4fd24 <_Min_Stack_Size+0xd4fb24>
    4798:	45787077 	ldrbmi	r7, [r8, #-119]!	; 0xffffff89
    479c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    47a0:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    47a4:	2e322e32 	mrccs	14, 1, r2, cr2, cr2, {1}
    47a8:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    47ac:	31303274 	teqcc	r0, r4, ror r2
    47b0:	33383035 	teqcc	r8, #53	; 0x35
    47b4:	61352e30 	teqvs	r5, r0, lsr lr
    47b8:	33356433 	teqcc	r5, #855638016	; 0x33000000
    47bc:	656e2f36 	strbvs	r2, [lr, #-3894]!	; 0xfffff0ca
    47c0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    47c4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    47c8:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    47cc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    47d0:	73000065 	movwvc	r0, #101	; 0x65
    47d4:	6972706e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, sp, lr}^
    47d8:	2e66746e 	cdpcs	4, 6, cr7, cr6, cr14, {3}
    47dc:	00010063 	andeq	r0, r1, r3, rrx
    47e0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    47e4:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    47e8:	00020068 	andeq	r0, r2, r8, rrx
    47ec:	636f6c00 	cmnvs	pc, #0, 24
    47f0:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    47f4:	5f000003 	svcpl	0x00000003
    47f8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    47fc:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4800:	72000003 	andvc	r0, r0, #3
    4804:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    4808:	0300682e 	movweq	r6, #2094	; 0x82e
    480c:	74730000 	ldrbtvc	r0, [r3], #-0
    4810:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    4814:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4818:	623c0000 	eorsvs	r0, ip, #0
    481c:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    4820:	3e6e692d 	cdpcc	9, 6, cr6, cr14, cr13, {1}
    4824:	00000000 	andeq	r0, r0, r0
    4828:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    482c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4830:	6c000004 	stcvs	0, cr0, [r0], {4}
    4834:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    4838:	0100682e 	tsteq	r0, lr, lsr #16
    483c:	00000000 	andeq	r0, r0, r0
    4840:	00000205 	andeq	r0, r0, r5, lsl #4
    4844:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    4848:	201b3301 	andscs	r3, fp, r1, lsl #6
    484c:	3e2f2225 	cdpcc	2, 2, cr2, cr15, cr5, {1}
    4850:	302c674c 	eorcc	r6, ip, ip, asr #14
    4854:	1c241c34 	stcne	12, cr1, [r4], #-208	; 0xffffff30
    4858:	3d213024 	stccc	0, cr3, [r1, #-144]!	; 0xffffff70
    485c:	05023e21 	streq	r3, [r2, #-3617]	; 0xfffff1df
    4860:	00010100 	andeq	r0, r1, r0, lsl #2
    4864:	67680205 	strbvs	r0, [r8, -r5, lsl #4]!
    4868:	df030800 	svcle	0x00030800
    486c:	22320100 	eorscs	r0, r2, #0, 2
    4870:	24207a03 	strtcs	r7, [r0], #-2563	; 0xfffff5fd
    4874:	3e2f2222 	cdpcc	2, 2, cr2, cr15, cr2, {1}
    4878:	302c674c 	eorcc	r6, ip, ip, asr #14
    487c:	2a241c34 	bcs	90b954 <_Min_Stack_Size+0x90b754>
    4880:	3d213024 	stccc	0, cr3, [r1, #-144]!	; 0xffffff70
    4884:	07023e21 	streq	r3, [r2, -r1, lsr #28]
    4888:	bc010100 	stflts	f0, [r1], {-0}
    488c:	02000000 	andeq	r0, r0, #0
    4890:	00009a00 	andeq	r9, r0, r0, lsl #20
    4894:	fb010200 	blx	4509e <_Min_Stack_Size+0x44e9e>
    4898:	01000d0e 	tsteq	r0, lr, lsl #26
    489c:	00010101 	andeq	r0, r1, r1, lsl #2
    48a0:	00010000 	andeq	r0, r1, r0
    48a4:	2e2e0100 	sufcse	f0, f6, f0
    48a8:	2f2e2e2f 	svccs	0x002e2e2f
    48ac:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    48b0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    48b4:	2f2e2e2f 	svccs	0x002e2e2f
    48b8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    48bc:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 4720 <_Min_Stack_Size+0x4520>
    48c0:	2f636269 	svccs	0x00636269
    48c4:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    48c8:	2f00676e 	svccs	0x0000676e
    48cc:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    48d0:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    48d4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    48d8:	777a352d 	ldrbvc	r3, [sl, -sp, lsr #10]!
    48dc:	2f457870 	svccs	0x00457870
    48e0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    48e4:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    48e8:	302e322e 	eorcc	r3, lr, lr, lsr #4
    48ec:	7469672b 	strbtvc	r6, [r9], #-1835	; 0xfffff8d5
    48f0:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    48f4:	30333830 	eorscc	r3, r3, r0, lsr r8
    48f8:	3361352e 	cmncc	r1, #192937984	; 0xb800000
    48fc:	36333564 	ldrtcc	r3, [r3], -r4, ror #10
    4900:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4904:	2f62696c 	svccs	0x0062696c
    4908:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    490c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4910:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4914:	74730000 	ldrbtvc	r0, [r3], #-0
    4918:	72686372 	rsbvc	r6, r8, #-939524095	; 0xc8000001
    491c:	0100632e 	tsteq	r0, lr, lsr #6
    4920:	74730000 	ldrbtvc	r0, [r3], #-0
    4924:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    4928:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    492c:	00000000 	andeq	r0, r0, r0
    4930:	67cc0205 	strbvs	r0, [ip, r5, lsl #4]
    4934:	3f030800 	svccc	0x00030800
    4938:	34031401 	strcc	r1, [r3], #-1025	; 0xfffffbff
    493c:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    4940:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    4944:	01024d4c 	tsteq	r2, ip, asr #26
    4948:	b8010100 	stmdalt	r1, {r8}
    494c:	02000000 	andeq	r0, r0, #0
    4950:	0000a200 	andeq	sl, r0, r0, lsl #4
    4954:	fb010200 	blx	4515e <_Min_Stack_Size+0x44f5e>
    4958:	01000d0e 	tsteq	r0, lr, lsl #26
    495c:	00010101 	andeq	r0, r1, r1, lsl #2
    4960:	00010000 	andeq	r0, r1, r0
    4964:	2e2e0100 	sufcse	f0, f6, f0
    4968:	2f2e2e2f 	svccs	0x002e2e2f
    496c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4970:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4974:	2f2e2e2f 	svccs	0x002e2e2f
    4978:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    497c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4980:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4984:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 4804 <_Min_Stack_Size+0x4604>
    4988:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    498c:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    4990:	2f006d72 	svccs	0x00006d72
    4994:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4998:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    499c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    49a0:	777a352d 	ldrbvc	r3, [sl, -sp, lsr #10]!
    49a4:	2f457870 	svccs	0x00457870
    49a8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    49ac:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    49b0:	302e322e 	eorcc	r3, lr, lr, lsr #4
    49b4:	7469672b 	strbtvc	r6, [r9], #-1835	; 0xfffff8d5
    49b8:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    49bc:	30333830 	eorscc	r3, r3, r0, lsr r8
    49c0:	3361352e 	cmncc	r1, #192937984	; 0xb800000
    49c4:	36333564 	ldrtcc	r3, [r3], -r4, ror #10
    49c8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    49cc:	2f62696c 	svccs	0x0062696c
    49d0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    49d4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    49d8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    49dc:	74730000 	ldrbtvc	r0, [r3], #-0
    49e0:	79706372 	ldmdbvc	r0!, {r1, r4, r5, r6, r8, r9, sp, lr}^
    49e4:	0100632e 	tsteq	r0, lr, lsr #6
    49e8:	74730000 	ldrbtvc	r0, [r3], #-0
    49ec:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    49f0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    49f4:	00000000 	andeq	r0, r0, r0
    49f8:	67e80205 	strbvs	r0, [r8, r5, lsl #4]!
    49fc:	2a030800 	bcs	c6a04 <_Min_Stack_Size+0xc6804>
    4a00:	08021301 	stmdaeq	r2, {r0, r8, r9, ip}
    4a04:	f1010100 	setend	le
    4a08:	02000000 	andeq	r0, r0, #0
    4a0c:	0000d700 	andeq	sp, r0, r0, lsl #14
    4a10:	fb010200 	blx	4521a <_Min_Stack_Size+0x4501a>
    4a14:	01000d0e 	tsteq	r0, lr, lsl #26
    4a18:	00010101 	andeq	r0, r1, r1, lsl #2
    4a1c:	00010000 	andeq	r0, r1, r0
    4a20:	2e2e0100 	sufcse	f0, f6, f0
    4a24:	2f2e2e2f 	svccs	0x002e2e2f
    4a28:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4a2c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4a30:	2f2e2e2f 	svccs	0x002e2e2f
    4a34:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    4a38:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4a3c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4a40:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 48c0 <_Min_Stack_Size+0x46c0>
    4a44:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    4a48:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    4a4c:	2f006d72 	svccs	0x00006d72
    4a50:	2f727375 	svccs	0x00727375
    4a54:	2f62696c 	svccs	0x0062696c
    4a58:	2f636367 	svccs	0x00636367
    4a5c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4a60:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4a64:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4a68:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
    4a6c:	2f332e39 	svccs	0x00332e39
    4a70:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4a74:	00656475 	rsbeq	r6, r5, r5, ror r4
    4a78:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    4a7c:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    4a80:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4a84:	7a352d62 	bvc	d50014 <_Min_Stack_Size+0xd4fe14>
    4a88:	45787077 	ldrbmi	r7, [r8, #-119]!	; 0xffffff89
    4a8c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4a90:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    4a94:	2e322e32 	mrccs	14, 1, r2, cr2, cr2, {1}
    4a98:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    4a9c:	31303274 	teqcc	r0, r4, ror r2
    4aa0:	33383035 	teqcc	r8, #53	; 0x35
    4aa4:	61352e30 	teqvs	r5, r0, lsr lr
    4aa8:	33356433 	teqcc	r5, #855638016	; 0x33000000
    4aac:	656e2f36 	strbvs	r2, [lr, #-3894]!	; 0xfffff0ca
    4ab0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4ab4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4ab8:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    4abc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4ac0:	73000065 	movwvc	r0, #101	; 0x65
    4ac4:	656c7274 	strbvs	r7, [ip, #-628]!	; 0xfffffd8c
    4ac8:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    4acc:	73000001 	movwvc	r0, #1
    4ad0:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    4ad4:	00682e66 	rsbeq	r2, r8, r6, ror #28
    4ad8:	73000002 	movwvc	r0, #2
    4adc:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    4ae0:	00682e67 	rsbeq	r2, r8, r7, ror #28
    4ae4:	00000003 	andeq	r0, r0, r3
    4ae8:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    4aec:	03080067 	movweq	r0, #32871	; 0x8067
    4af0:	0e030138 	mcreq	1, 0, r0, cr3, cr8, {1}
    4af4:	02225d01 	eoreq	r5, r2, #1, 26	; 0x40
    4af8:	01010002 	tsteq	r1, r2
    4afc:	000000f5 	strdeq	r0, [r0], -r5
    4b00:	00d00002 	sbcseq	r0, r0, r2
    4b04:	01020000 	mrseq	r0, (UNDEF: 2)
    4b08:	000d0efb 	strdeq	r0, [sp], -fp
    4b0c:	01010101 	tsteq	r1, r1, lsl #2
    4b10:	01000000 	mrseq	r0, (UNDEF: 0)
    4b14:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    4b18:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4b1c:	2f2e2e2f 	svccs	0x002e2e2f
    4b20:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4b24:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4b28:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4b2c:	2f62696c 	svccs	0x0062696c
    4b30:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    4b34:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    4b38:	00676e69 	rsbeq	r6, r7, r9, ror #28
    4b3c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4b40:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4b44:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4b48:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4b4c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4b50:	61652d65 	cmnvs	r5, r5, ror #26
    4b54:	342f6962 	strtcc	r6, [pc], #-2402	; 4b5c <_Min_Stack_Size+0x495c>
    4b58:	332e392e 			; <UNDEFINED> instruction: 0x332e392e
    4b5c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4b60:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4b64:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    4b68:	2f646c69 	svccs	0x00646c69
    4b6c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4b70:	352d6269 	strcc	r6, [sp, #-617]!	; 0xfffffd97
    4b74:	7870777a 	ldmdavc	r0!, {r1, r3, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
    4b78:	656e2f45 	strbvs	r2, [lr, #-3909]!	; 0xfffff0bb
    4b7c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4b80:	322e322d 	eorcc	r3, lr, #-805306366	; 0xd0000002
    4b84:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    4b88:	30327469 	eorscc	r7, r2, r9, ror #8
    4b8c:	38303531 	ldmdacc	r0!, {r0, r4, r5, r8, sl, ip, sp}
    4b90:	352e3033 	strcc	r3, [lr, #-51]!	; 0xffffffcd
    4b94:	35643361 	strbcc	r3, [r4, #-865]!	; 0xfffffc9f
    4b98:	6e2f3633 	mcrvs	6, 1, r3, cr15, cr3, {1}
    4b9c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4ba0:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4ba4:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    4ba8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4bac:	00006564 	andeq	r6, r0, r4, ror #10
    4bb0:	6e727473 	mrcvs	4, 3, r7, cr2, cr3, {3}
    4bb4:	2e706d63 	cdpcs	13, 7, cr6, cr0, cr3, {3}
    4bb8:	00010063 	andeq	r0, r1, r3, rrx
    4bbc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4bc0:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    4bc4:	00020068 	andeq	r0, r2, r8, rrx
    4bc8:	72747300 	rsbsvc	r7, r4, #0, 6
    4bcc:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    4bd0:	00030068 	andeq	r0, r3, r8, rrx
    4bd4:	05000000 	streq	r0, [r0, #-0]
    4bd8:	00680802 	rsbeq	r0, r8, r2, lsl #16
    4bdc:	00c10308 	sbceq	r0, r1, r8, lsl #6
    4be0:	a03f2201 	eorsge	r2, pc, r1, lsl #4
    4be4:	04020042 	streq	r0, [r2], #-66	; 0xffffffbe
    4be8:	3c7a0301 	ldclcc	3, cr0, [sl], #-4
    4bec:	20350338 	eorscs	r0, r5, r8, lsr r3
    4bf0:	01000102 	tsteq	r0, r2, lsl #2
    4bf4:	0000f101 	andeq	pc, r0, r1, lsl #2
    4bf8:	d0000200 	andle	r0, r0, r0, lsl #4
    4bfc:	02000000 	andeq	r0, r0, #0
    4c00:	0d0efb01 	vstreq	d15, [lr, #-4]
    4c04:	01010100 	mrseq	r0, (UNDEF: 17)
    4c08:	00000001 	andeq	r0, r0, r1
    4c0c:	01000001 	tsteq	r0, r1
    4c10:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4c14:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4c18:	2f2e2e2f 	svccs	0x002e2e2f
    4c1c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4c20:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    4c24:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4c28:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4c2c:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    4c30:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    4c34:	73752f00 	cmnvc	r5, #0, 30
    4c38:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4c3c:	63672f62 	cmnvs	r7, #392	; 0x188
    4c40:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4c44:	6f6e2d6d 	svcvs	0x006e2d6d
    4c48:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4c4c:	2f696261 	svccs	0x00696261
    4c50:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
    4c54:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
    4c58:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4c5c:	622f0065 	eorvs	r0, pc, #101	; 0x65
    4c60:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    4c64:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4c68:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    4c6c:	70777a35 	rsbsvc	r7, r7, r5, lsr sl
    4c70:	6e2f4578 	mcrvs	5, 1, r4, cr15, cr8, {3}
    4c74:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4c78:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    4c7c:	2b302e32 	blcs	c1054c <_Min_Stack_Size+0xc1034c>
    4c80:	32746967 	rsbscc	r6, r4, #1687552	; 0x19c000
    4c84:	30353130 	eorscc	r3, r5, r0, lsr r1
    4c88:	2e303338 	mrccs	3, 1, r3, cr0, cr8, {1}
    4c8c:	64336135 	ldrtvs	r6, [r3], #-309	; 0xfffffecb
    4c90:	2f363335 	svccs	0x00363335
    4c94:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4c98:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 4afc <_Min_Stack_Size+0x48fc>
    4c9c:	2f636269 	svccs	0x00636269
    4ca0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4ca4:	00656475 	rsbeq	r6, r5, r5, ror r4
    4ca8:	72747300 	rsbsvc	r7, r4, #0, 6
    4cac:	7970636e 	ldmdbvc	r0!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    4cb0:	0100632e 	tsteq	r0, lr, lsr #6
    4cb4:	74730000 	ldrbtvc	r0, [r3], #-0
    4cb8:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    4cbc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4cc0:	74730000 	ldrbtvc	r0, [r3], #-0
    4cc4:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    4cc8:	0300682e 	movweq	r6, #2094	; 0x82e
    4ccc:	00000000 	andeq	r0, r0, r0
    4cd0:	683a0205 	ldmdavs	sl!, {r0, r2, r9}
    4cd4:	c8030800 	stmdagt	r3, {fp}
    4cd8:	1b170100 	blne	5c50e0 <_Min_Stack_Size+0x5c4ee0>
    4cdc:	212d2327 			; <UNDEFINED> instruction: 0x212d2327
    4ce0:	27032f5b 	smlsdcs	r3, fp, pc, r2	; <UNPREDICTABLE>
    4ce4:	0001024a 	andeq	r0, r1, sl, asr #4
    4ce8:	00ed0101 	rsceq	r0, sp, r1, lsl #2
    4cec:	00020000 	andeq	r0, r2, r0
    4cf0:	000000e7 	andeq	r0, r0, r7, ror #1
    4cf4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4cf8:	0101000d 	tsteq	r1, sp
    4cfc:	00000101 	andeq	r0, r0, r1, lsl #2
    4d00:	00000100 	andeq	r0, r0, r0, lsl #2
    4d04:	75622f01 	strbvc	r2, [r2, #-3841]!	; 0xfffff0ff
    4d08:	2f646c69 	svccs	0x00646c69
    4d0c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4d10:	352d6269 	strcc	r6, [sp, #-617]!	; 0xfffffd97
    4d14:	7870777a 	ldmdavc	r0!, {r1, r3, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
    4d18:	656e2f45 	strbvs	r2, [lr, #-3909]!	; 0xfffff0bb
    4d1c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4d20:	322e322d 	eorcc	r3, lr, #-805306366	; 0xd0000002
    4d24:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    4d28:	30327469 	eorscc	r7, r2, r9, ror #8
    4d2c:	38303531 	ldmdacc	r0!, {r0, r4, r5, r8, sl, ip, sp}
    4d30:	352e3033 	strcc	r3, [lr, #-51]!	; 0xffffffcd
    4d34:	35643361 	strbcc	r3, [r4, #-865]!	; 0xfffffc9f
    4d38:	6e2f3633 	mcrvs	6, 1, r3, cr15, cr3, {1}
    4d3c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4d40:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4d44:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    4d48:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4d4c:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    4d50:	2f007379 	svccs	0x00007379
    4d54:	2f727375 	svccs	0x00727375
    4d58:	2f62696c 	svccs	0x0062696c
    4d5c:	2f636367 	svccs	0x00636367
    4d60:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4d64:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4d68:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4d6c:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
    4d70:	2f332e39 	svccs	0x00332e39
    4d74:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4d78:	00656475 	rsbeq	r6, r5, r5, ror r4
    4d7c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4d80:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4d84:	2f2e2e2f 	svccs	0x002e2e2f
    4d88:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4d8c:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    4d90:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4d94:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4d98:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xfffff09d
    4d9c:	00746e65 	rsbseq	r6, r4, r5, ror #28
    4da0:	636f6c00 	cmnvs	pc, #0, 24
    4da4:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    4da8:	5f000001 	svcpl	0x00000001
    4dac:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    4db0:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4db4:	73000001 	movwvc	r0, #1
    4db8:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    4dbc:	00682e66 	rsbeq	r2, r8, r6, ror #28
    4dc0:	72000002 	andvc	r0, r0, #2
    4dc4:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    4dc8:	0100682e 	tsteq	r0, lr, lsr #16
    4dcc:	6d690000 	stclvs	0, cr0, [r9, #-0]
    4dd0:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
    4dd4:	0300632e 	movweq	r6, #814	; 0x32e
    4dd8:	6a000000 	bvs	4de0 <_Min_Stack_Size+0x4be0>
    4ddc:	02000001 	andeq	r0, r0, #1
    4de0:	00013e00 	andeq	r3, r1, r0, lsl #28
    4de4:	fb010200 	blx	455ee <_Min_Stack_Size+0x453ee>
    4de8:	01000d0e 	tsteq	r0, lr, lsl #26
    4dec:	00010101 	andeq	r0, r1, r1, lsl #2
    4df0:	00010000 	andeq	r0, r1, r0
    4df4:	2e2e0100 	sufcse	f0, f6, f0
    4df8:	2f2e2e2f 	svccs	0x002e2e2f
    4dfc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4e00:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4e04:	2f2e2e2f 	svccs	0x002e2e2f
    4e08:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4e0c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 4c70 <_Min_Stack_Size+0x4a70>
    4e10:	2f636269 	svccs	0x00636269
    4e14:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    4e18:	2f006269 	svccs	0x00006269
    4e1c:	2f727375 	svccs	0x00727375
    4e20:	2f62696c 	svccs	0x0062696c
    4e24:	2f636367 	svccs	0x00636367
    4e28:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4e2c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4e30:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4e34:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
    4e38:	2f332e39 	svccs	0x00332e39
    4e3c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4e40:	00656475 	rsbeq	r6, r5, r5, ror r4
    4e44:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    4e48:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    4e4c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4e50:	7a352d62 	bvc	d503e0 <_Min_Stack_Size+0xd501e0>
    4e54:	45787077 	ldrbmi	r7, [r8, #-119]!	; 0xffffff89
    4e58:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4e5c:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    4e60:	2e322e32 	mrccs	14, 1, r2, cr2, cr2, {1}
    4e64:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    4e68:	31303274 	teqcc	r0, r4, ror r2
    4e6c:	33383035 	teqcc	r8, #53	; 0x35
    4e70:	61352e30 	teqvs	r5, r0, lsr lr
    4e74:	33356433 	teqcc	r5, #855638016	; 0x33000000
    4e78:	656e2f36 	strbvs	r2, [lr, #-3894]!	; 0xfffff0ca
    4e7c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4e80:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4e84:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    4e88:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4e8c:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    4e90:	622f0073 	eorvs	r0, pc, #115	; 0x73
    4e94:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    4e98:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4e9c:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    4ea0:	70777a35 	rsbsvc	r7, r7, r5, lsr sl
    4ea4:	6e2f4578 	mcrvs	5, 1, r4, cr15, cr8, {3}
    4ea8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4eac:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    4eb0:	2b302e32 	blcs	c10780 <_Min_Stack_Size+0xc10580>
    4eb4:	32746967 	rsbscc	r6, r4, #1687552	; 0x19c000
    4eb8:	30353130 	eorscc	r3, r5, r0, lsr r1
    4ebc:	2e303338 	mrccs	3, 1, r3, cr0, cr8, {1}
    4ec0:	64336135 	ldrtvs	r6, [r3], #-309	; 0xfffffecb
    4ec4:	2f363335 	svccs	0x00363335
    4ec8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4ecc:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 4d30 <_Min_Stack_Size+0x4b30>
    4ed0:	2f636269 	svccs	0x00636269
    4ed4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4ed8:	00656475 	rsbeq	r6, r5, r5, ror r4
    4edc:	6c616d00 	stclvs	13, cr6, [r1], #-0
    4ee0:	2e636f6c 	cdpcs	15, 6, cr6, cr3, cr12, {3}
    4ee4:	00010063 	andeq	r0, r1, r3, rrx
    4ee8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4eec:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    4ef0:	00020068 	andeq	r0, r2, r8, rrx
    4ef4:	636f6c00 	cmnvs	pc, #0, 24
    4ef8:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    4efc:	5f000003 	svcpl	0x00000003
    4f00:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    4f04:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4f08:	72000003 	andvc	r0, r0, #3
    4f0c:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    4f10:	0300682e 	movweq	r6, #2094	; 0x82e
    4f14:	616d0000 	cmnvs	sp, r0
    4f18:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    4f1c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4f20:	00000000 	andeq	r0, r0, r0
    4f24:	68600205 	stmdavs	r0!, {r0, r2, r9}^
    4f28:	d5030800 	strle	r0, [r3, #-2048]	; 0xfffff800
    4f2c:	1f130101 	svcne	0x00130101
    4f30:	00060221 	andeq	r0, r6, r1, lsr #4
    4f34:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4f38:	00000002 	andeq	r0, r0, r2
    4f3c:	01dc0300 	bicseq	r0, ip, r0, lsl #6
    4f40:	211f1301 	tstcs	pc, r1, lsl #6
    4f44:	01000602 	tsteq	r0, r2, lsl #12
    4f48:	00014101 	andeq	r4, r1, r1, lsl #2
    4f4c:	ee000200 	cdp	2, 0, cr0, cr0, cr0, {0}
    4f50:	02000000 	andeq	r0, r0, #0
    4f54:	0d0efb01 	vstreq	d15, [lr, #-4]
    4f58:	01010100 	mrseq	r0, (UNDEF: 17)
    4f5c:	00000001 	andeq	r0, r0, r1
    4f60:	01000001 	tsteq	r0, r1
    4f64:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4f68:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4f6c:	2f2e2e2f 	svccs	0x002e2e2f
    4f70:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4f74:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    4f78:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4f7c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4f80:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    4f84:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    4f88:	73752f00 	cmnvc	r5, #0, 30
    4f8c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4f90:	63672f62 	cmnvs	r7, #392	; 0x188
    4f94:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4f98:	6f6e2d6d 	svcvs	0x006e2d6d
    4f9c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4fa0:	2f696261 	svccs	0x00696261
    4fa4:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
    4fa8:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
    4fac:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4fb0:	622f0065 	eorvs	r0, pc, #101	; 0x65
    4fb4:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    4fb8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4fbc:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    4fc0:	70777a35 	rsbsvc	r7, r7, r5, lsr sl
    4fc4:	6e2f4578 	mcrvs	5, 1, r4, cr15, cr8, {3}
    4fc8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4fcc:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    4fd0:	2b302e32 	blcs	c108a0 <_Min_Stack_Size+0xc106a0>
    4fd4:	32746967 	rsbscc	r6, r4, #1687552	; 0x19c000
    4fd8:	30353130 	eorscc	r3, r5, r0, lsr r1
    4fdc:	2e303338 	mrccs	3, 1, r3, cr0, cr8, {1}
    4fe0:	64336135 	ldrtvs	r6, [r3], #-309	; 0xfffffecb
    4fe4:	2f363335 	svccs	0x00363335
    4fe8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4fec:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 4e50 <_Min_Stack_Size+0x4c50>
    4ff0:	2f636269 	svccs	0x00636269
    4ff4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4ff8:	2f656475 	svccs	0x00656475
    4ffc:	00737973 	rsbseq	r7, r3, r3, ror r9
    5000:	6e616e00 	cdpvs	14, 6, cr6, cr1, cr0, {0}
    5004:	616d2d6f 	cmnvs	sp, pc, ror #26
    5008:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    500c:	00632e72 	rsbeq	r2, r3, r2, ror lr
    5010:	73000001 	movwvc	r0, #1
    5014:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    5018:	00682e66 	rsbeq	r2, r8, r6, ror #28
    501c:	6c000002 	stcvs	0, cr0, [r0], {2}
    5020:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    5024:	00030068 	andeq	r0, r3, r8, rrx
    5028:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    502c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5030:	00030068 	andeq	r0, r3, r8, rrx
    5034:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    5038:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    503c:	00000300 	andeq	r0, r0, r0, lsl #6
    5040:	02050000 	andeq	r0, r5, #0
    5044:	08006870 	stmdaeq	r0, {r4, r5, r6, fp, sp, lr}
    5048:	0102d003 	tsteq	r2, r3
    504c:	7eea0324 	cdpvc	3, 14, cr0, cr10, cr4, {1}
    5050:	9d032c2e 	stcls	12, cr2, [r3, #-184]	; 0xffffff48
    5054:	e5032001 	str	r2, [r3, #-1]
    5058:	9b03207e 	blls	cd258 <_Min_Stack_Size+0xcd058>
    505c:	213f3c01 	teqcs	pc, r1, lsl #24
    5060:	40302322 	eorsmi	r2, r0, r2, lsr #6
    5064:	241e274b 	ldrcs	r2, [lr], #-1867	; 0xfffff8b5
    5068:	01040200 	mrseq	r0, R12_usr
    506c:	00200903 	eoreq	r0, r0, r3, lsl #18
    5070:	3b020402 	blcc	86080 <_Min_Stack_Size+0x85e80>
    5074:	02040200 	andeq	r0, r4, #0, 4
    5078:	314e3321 	cmpcc	lr, r1, lsr #6
    507c:	3d22232b 	stccc	3, cr2, [r2, #-172]!	; 0xffffff54
    5080:	23302332 	teqcs	r0, #-939524096	; 0xc8000000
    5084:	361f2f40 	ldrcc	r2, [pc], -r0, asr #30
    5088:	00050221 	andeq	r0, r5, r1, lsr #4
    508c:	01950101 	orrseq	r0, r5, r1, lsl #2
    5090:	00020000 	andeq	r0, r2, r0
    5094:	00000143 	andeq	r0, r0, r3, asr #2
    5098:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    509c:	0101000d 	tsteq	r1, sp
    50a0:	00000101 	andeq	r0, r0, r1, lsl #2
    50a4:	00000100 	andeq	r0, r0, r0, lsl #2
    50a8:	2f2e2e01 	svccs	0x002e2e01
    50ac:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    50b0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    50b4:	2f2e2e2f 	svccs	0x002e2e2f
    50b8:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    50bc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    50c0:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    50c4:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    50c8:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    50cc:	752f0062 	strvc	r0, [pc, #-98]!	; 5072 <_Min_Stack_Size+0x4e72>
    50d0:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4f0c <_Min_Stack_Size+0x4d0c>
    50d4:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    50d8:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    50dc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    50e0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    50e4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    50e8:	392e342f 	stmdbcc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
    50ec:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
    50f0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    50f4:	2f006564 	svccs	0x00006564
    50f8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    50fc:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    5100:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5104:	777a352d 	ldrbvc	r3, [sl, -sp, lsr #10]!
    5108:	2f457870 	svccs	0x00457870
    510c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5110:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    5114:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5118:	7469672b 	strbtvc	r6, [r9], #-1835	; 0xfffff8d5
    511c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    5120:	30333830 	eorscc	r3, r3, r0, lsr r8
    5124:	3361352e 	cmncc	r1, #192937984	; 0xb800000
    5128:	36333564 	ldrtcc	r3, [r3], -r4, ror #10
    512c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5130:	2f62696c 	svccs	0x0062696c
    5134:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5138:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    513c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5140:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    5144:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    5148:	2f646c69 	svccs	0x00646c69
    514c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5150:	352d6269 	strcc	r6, [sp, #-617]!	; 0xfffffd97
    5154:	7870777a 	ldmdavc	r0!, {r1, r3, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
    5158:	656e2f45 	strbvs	r2, [lr, #-3909]!	; 0xfffff0bb
    515c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5160:	322e322d 	eorcc	r3, lr, #-805306366	; 0xd0000002
    5164:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    5168:	30327469 	eorscc	r7, r2, r9, ror #8
    516c:	38303531 	ldmdacc	r0!, {r0, r4, r5, r8, sl, ip, sp}
    5170:	352e3033 	strcc	r3, [lr, #-51]!	; 0xffffffcd
    5174:	35643361 	strbcc	r3, [r4, #-865]!	; 0xfffffc9f
    5178:	6e2f3633 	mcrvs	6, 1, r3, cr15, cr3, {1}
    517c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5180:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5184:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    5188:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    518c:	00006564 	andeq	r6, r0, r4, ror #10
    5190:	6f6e616e 	svcvs	0x006e616e
    5194:	6c616d2d 	stclvs	13, cr6, [r1], #-180	; 0xffffff4c
    5198:	72636f6c 	rsbvc	r6, r3, #108, 30	; 0x1b0
    519c:	0100632e 	tsteq	r0, lr, lsr #6
    51a0:	74730000 	ldrbtvc	r0, [r3], #-0
    51a4:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    51a8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    51ac:	6f6c0000 	svcvs	0x006c0000
    51b0:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    51b4:	00000300 	andeq	r0, r0, r0, lsl #6
    51b8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    51bc:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    51c0:	00000300 	andeq	r0, r0, r0, lsl #6
    51c4:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    51c8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    51cc:	72000003 	andvc	r0, r0, #3
    51d0:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    51d4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    51d8:	00000000 	andeq	r0, r0, r0
    51dc:	68f80205 	ldmvs	r8!, {r0, r2, r9}^
    51e0:	ed030800 	stc	8, cr0, [r3, #-0]
    51e4:	3e270101 	sufccs	f0, f7, f1
    51e8:	74033e21 	strvc	r3, [r3], #-3617	; 0xfffff1df
    51ec:	200c0320 	andcs	r0, ip, r0, lsr #6
    51f0:	02002f22 	andeq	r2, r0, #34, 30	; 0x88
    51f4:	362b0104 	strtcc	r0, [fp], -r4, lsl #2
    51f8:	2122223d 			; <UNDEFINED> instruction: 0x2122223d
    51fc:	21213230 			; <UNDEFINED> instruction: 0x21213230
    5200:	1b332432 	blne	cce2d0 <_Min_Stack_Size+0xcce0d0>
    5204:	b2034f25 	andlt	r4, r3, #37, 30	; 0x94
    5208:	4d763c7f 	ldclmi	12, cr3, [r6, #-508]!	; 0xfffffe04
    520c:	3d23231d 	stccc	3, cr2, [r3, #-116]!	; 0xffffff8c
    5210:	2e00d403 	cdpcs	4, 0, cr13, cr0, cr3, {0}
    5214:	31222c26 			; <UNDEFINED> instruction: 0x31222c26
    5218:	7fa50330 	svcvc	0x00a50330
    521c:	df034b3c 	svcle	0x00034b3c
    5220:	05024a00 	streq	r4, [r2, #-2560]	; 0xfffff600
    5224:	e3010100 	movw	r0, #4352	; 0x1100
    5228:	02000002 	andeq	r0, r0, #2
    522c:	00019b00 	andeq	r9, r1, r0, lsl #22
    5230:	fb010200 	blx	45a3a <_Min_Stack_Size+0x4583a>
    5234:	01000d0e 	tsteq	r0, lr, lsl #26
    5238:	00010101 	andeq	r0, r1, r1, lsl #2
    523c:	00010000 	andeq	r0, r1, r0
    5240:	2e2e0100 	sufcse	f0, f6, f0
    5244:	2f2e2e2f 	svccs	0x002e2e2f
    5248:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    524c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5250:	2f2e2e2f 	svccs	0x002e2e2f
    5254:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5258:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 50bc <_Min_Stack_Size+0x4ebc>
    525c:	2f636269 	svccs	0x00636269
    5260:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    5264:	752f006f 	strvc	r0, [pc, #-111]!	; 51fd <_Min_Stack_Size+0x4ffd>
    5268:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 50a4 <_Min_Stack_Size+0x4ea4>
    526c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    5270:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    5274:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5278:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    527c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5280:	392e342f 	stmdbcc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
    5284:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
    5288:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    528c:	2f006564 	svccs	0x00006564
    5290:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5294:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    5298:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    529c:	777a352d 	ldrbvc	r3, [sl, -sp, lsr #10]!
    52a0:	2f457870 	svccs	0x00457870
    52a4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    52a8:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    52ac:	302e322e 	eorcc	r3, lr, lr, lsr #4
    52b0:	7469672b 	strbtvc	r6, [r9], #-1835	; 0xfffff8d5
    52b4:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    52b8:	30333830 	eorscc	r3, r3, r0, lsr r8
    52bc:	3361352e 	cmncc	r1, #192937984	; 0xb800000
    52c0:	36333564 	ldrtcc	r3, [r3], -r4, ror #10
    52c4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    52c8:	2f62696c 	svccs	0x0062696c
    52cc:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    52d0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    52d4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    52d8:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    52dc:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    52e0:	2f646c69 	svccs	0x00646c69
    52e4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    52e8:	352d6269 	strcc	r6, [sp, #-617]!	; 0xfffffd97
    52ec:	7870777a 	ldmdavc	r0!, {r1, r3, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
    52f0:	656e2f45 	strbvs	r2, [lr, #-3909]!	; 0xfffff0bb
    52f4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    52f8:	322e322d 	eorcc	r3, lr, #-805306366	; 0xd0000002
    52fc:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    5300:	30327469 	eorscc	r7, r2, r9, ror #8
    5304:	38303531 	ldmdacc	r0!, {r0, r4, r5, r8, sl, ip, sp}
    5308:	352e3033 	strcc	r3, [lr, #-51]!	; 0xffffffcd
    530c:	35643361 	strbcc	r3, [r4, #-865]!	; 0xfffffc9f
    5310:	6e2f3633 	mcrvs	6, 1, r3, cr15, cr3, {1}
    5314:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5318:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    531c:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    5320:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5324:	00006564 	andeq	r6, r0, r4, ror #10
    5328:	6f6e616e 	svcvs	0x006e616e
    532c:	7066762d 	rsbvc	r7, r6, sp, lsr #12
    5330:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    5334:	00632e66 	rsbeq	r2, r3, r6, ror #28
    5338:	73000001 	movwvc	r0, #1
    533c:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    5340:	00682e66 	rsbeq	r2, r8, r6, ror #28
    5344:	6c000002 	stcvs	0, cr0, [r0], {2}
    5348:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    534c:	00030068 	andeq	r0, r3, r8, rrx
    5350:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    5354:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5358:	00030068 	andeq	r0, r3, r8, rrx
    535c:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    5360:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    5364:	00000300 	andeq	r0, r0, r0, lsl #6
    5368:	61647473 	smcvs	18243	; 0x4743
    536c:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    5370:	00000200 	andeq	r0, r0, r0, lsl #4
    5374:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    5378:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    537c:	00003e6e 	andeq	r3, r0, lr, ror #28
    5380:	74730000 	ldrbtvc	r0, [r3], #-0
    5384:	2e6f6964 	cdpcs	9, 6, cr6, cr15, cr4, {3}
    5388:	00040068 	andeq	r0, r4, r8, rrx
    538c:	77766600 	ldrbvc	r6, [r6, -r0, lsl #12]!
    5390:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    5394:	0100682e 	tsteq	r0, lr, lsr #16
    5398:	616e0000 	cmnvs	lr, r0
    539c:	762d6f6e 	strtvc	r6, [sp], -lr, ror #30
    53a0:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    53a4:	5f66746e 	svcpl	0x0066746e
    53a8:	61636f6c 	cmnvs	r3, ip, ror #30
    53ac:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    53b0:	73000001 	movwvc	r0, #1
    53b4:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    53b8:	00682e62 	rsbeq	r2, r8, r2, ror #28
    53bc:	73000004 	movwvc	r0, #4
    53c0:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    53c4:	00682e67 	rsbeq	r2, r8, r7, ror #28
    53c8:	00000004 	andeq	r0, r0, r4
    53cc:	a4020500 	strge	r0, [r2], #-1280	; 0xfffffb00
    53d0:	03080069 	movweq	r0, #32873	; 0x8069
    53d4:	310101b3 			; <UNDEFINED> instruction: 0x310101b3
    53d8:	401c241d 	andsmi	r2, ip, sp, lsl r4
    53dc:	01040200 	mrseq	r0, R12_usr
    53e0:	4e062006 	cdpmi	0, 0, cr2, cr6, cr6, {0}
    53e4:	20780336 	rsbscs	r0, r8, r6, lsr r3
    53e8:	3d216728 	stccc	7, cr6, [r1, #-160]!	; 0xffffff60
    53ec:	4b333d31 	blmi	cd48b8 <_Min_Stack_Size+0xcd46b8>
    53f0:	4c313d78 	ldcmi	13, cr3, [r1], #-480	; 0xfffffe20
    53f4:	213c1303 	teqcs	ip, r3, lsl #6
    53f8:	6f033e2d 	svcvs	0x00033e2d
    53fc:	1f30212e 	svcne	0x0030212e
    5400:	222f3022 	eorcs	r3, pc, #34	; 0x22
    5404:	2f1e2259 	svccs	0x001e2259
    5408:	0002023d 	andeq	r0, r2, sp, lsr r2
    540c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5410:	00000002 	andeq	r0, r0, r2
    5414:	01f90300 	mvnseq	r0, r0, lsl #6
    5418:	31262e01 			; <UNDEFINED> instruction: 0x31262e01
    541c:	03207703 			; <UNDEFINED> instruction: 0x03207703
    5420:	0a032e09 	beq	d0c4c <_Min_Stack_Size+0xd0a4c>
    5424:	222d2f58 	eorcs	r2, sp, #88, 30	; 0x160
    5428:	0021342a 	eoreq	r3, r1, sl, lsr #8
    542c:	06010402 	streq	r0, [r1], -r2, lsl #8
    5430:	2f03062e 	svccs	0x0003062e
    5434:	3d59314a 	ldfcce	f3, [r9, #-296]	; 0xfffffed8
    5438:	2e7a0334 	mrccs	3, 3, r0, cr10, cr4, {1}
    543c:	7fb90326 	svcvc	0x00b90326
    5440:	10033d58 	andne	r3, r3, r8, asr sp
    5444:	78033620 	stmdavc	r3, {r5, r9, sl, ip, sp}
    5448:	21753620 	cmncs	r5, r0, lsr #12
    544c:	231d313e 	tstcs	sp, #-2147483633	; 0x8000000f
    5450:	784b333d 	stmdavc	fp, {r0, r2, r3, r4, r5, r8, r9, ip, sp}^
    5454:	034c313e 	movteq	r3, #49470	; 0xc13e
    5458:	2b233c1c 	blcs	8d44d0 <_Min_Stack_Size+0x8d42d0>
    545c:	032f3d3d 			; <UNDEFINED> instruction: 0x032f3d3d
    5460:	1f222065 	svcne	0x00222065
    5464:	1f232b23 	svcne	0x00232b23
    5468:	2e150332 	mrccs	3, 0, r0, cr5, cr2, {1}
    546c:	01000302 	tsteq	r0, r2, lsl #6
    5470:	02050001 	andeq	r0, r5, #1
    5474:	08006a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, sp, lr}
    5478:	0103de03 	tsteq	r3, r3, lsl #28
    547c:	201a033c 	andscs	r0, sl, ip, lsr r3
    5480:	03206603 			; <UNDEFINED> instruction: 0x03206603
    5484:	6603201a 			; <UNDEFINED> instruction: 0x6603201a
    5488:	2e1a0320 	cdpcs	3, 1, cr0, cr10, cr0, {1}
    548c:	01040200 	mrseq	r0, R12_usr
    5490:	30062006 	andcc	r2, r6, r6
    5494:	333f2259 	teqcc	pc, #-1879048187	; 0x90000005
    5498:	3f5e3d2f 	svccc	0x005e3d2f
    549c:	01040200 	mrseq	r0, R12_usr
    54a0:	3e914147 	fmlccsm	f4, f1, f7
    54a4:	212c224f 			; <UNDEFINED> instruction: 0x212c224f
    54a8:	30212121 	eorcc	r2, r1, r1, lsr #2
    54ac:	00207803 	eoreq	r7, r0, r3, lsl #16
    54b0:	03010402 	movweq	r0, #5122	; 0x1402
    54b4:	02003c11 	andeq	r3, r0, #4352	; 0x1100
    54b8:	76ad0204 	strtvc	r0, [sp], r4, lsl #4
    54bc:	4d215121 	stfmis	f5, [r1, #-132]!	; 0xffffff7c
    54c0:	7a03266e 	bvc	cee80 <_Min_Stack_Size+0xcec80>
    54c4:	2f223d20 	svccs	0x00223d20
    54c8:	0021232a 	eoreq	r2, r1, sl, lsr #6
    54cc:	50010402 	andpl	r0, r1, r2, lsl #8
    54d0:	02040200 	andeq	r0, r4, #0, 4
    54d4:	3f3f5c59 	svccc	0x003f5c59
    54d8:	213d211f 	teqcs	sp, pc, lsl r1
    54dc:	03587a03 	cmpeq	r8, #12288	; 0x3000
    54e0:	0200200b 	andeq	r2, r0, #11
    54e4:	2e060104 	adfcss	f0, f6, f4
    54e8:	02040200 	andeq	r0, r4, #0, 4
    54ec:	845e5906 	ldrbhi	r5, [lr], #-2310	; 0xfffff6fa
    54f0:	2d212475 	cfstrscs	mvf2, [r1, #-468]!	; 0xfffffe2c
    54f4:	3124314b 			; <UNDEFINED> instruction: 0x3124314b
    54f8:	1e84957a 	mcrne	5, 4, r9, cr4, cr10, {3}
    54fc:	273d2322 	ldrcs	r2, [sp, -r2, lsr #6]!
    5500:	01040200 	mrseq	r0, R12_usr
    5504:	062e3c06 	strteq	r3, [lr], -r6, lsl #24
    5508:	000e022f 	andeq	r0, lr, pc, lsr #4
    550c:	03010101 	movweq	r0, #4353	; 0x1101
    5510:	00020000 	andeq	r0, r2, r0
    5514:	0000018f 	andeq	r0, r0, pc, lsl #3
    5518:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    551c:	0101000d 	tsteq	r1, sp
    5520:	00000101 	andeq	r0, r0, r1, lsl #2
    5524:	00000100 	andeq	r0, r0, r0, lsl #2
    5528:	2f2e2e01 	svccs	0x002e2e01
    552c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5530:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5534:	2f2e2e2f 	svccs	0x002e2e2f
    5538:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    553c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5540:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5544:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    5548:	6f696474 	svcvs	0x00696474
    554c:	73752f00 	cmnvc	r5, #0, 30
    5550:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    5554:	63672f62 	cmnvs	r7, #392	; 0x188
    5558:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    555c:	6f6e2d6d 	svcvs	0x006e2d6d
    5560:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5564:	2f696261 	svccs	0x00696261
    5568:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
    556c:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
    5570:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5574:	622f0065 	eorvs	r0, pc, #101	; 0x65
    5578:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    557c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5580:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5584:	70777a35 	rsbsvc	r7, r7, r5, lsr sl
    5588:	6e2f4578 	mcrvs	5, 1, r4, cr15, cr8, {3}
    558c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5590:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    5594:	2b302e32 	blcs	c10e64 <_Min_Stack_Size+0xc10c64>
    5598:	32746967 	rsbscc	r6, r4, #1687552	; 0x19c000
    559c:	30353130 	eorscc	r3, r5, r0, lsr r1
    55a0:	2e303338 	mrccs	3, 1, r3, cr0, cr8, {1}
    55a4:	64336135 	ldrtvs	r6, [r3], #-309	; 0xfffffecb
    55a8:	2f363335 	svccs	0x00363335
    55ac:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    55b0:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5414 <_Min_Stack_Size+0x5214>
    55b4:	2f636269 	svccs	0x00636269
    55b8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    55bc:	2f656475 	svccs	0x00656475
    55c0:	00737973 	rsbseq	r7, r3, r3, ror r9
    55c4:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    55c8:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    55cc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    55d0:	7a352d62 	bvc	d50b60 <_Min_Stack_Size+0xd50960>
    55d4:	45787077 	ldrbmi	r7, [r8, #-119]!	; 0xffffff89
    55d8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    55dc:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    55e0:	2e322e32 	mrccs	14, 1, r2, cr2, cr2, {1}
    55e4:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    55e8:	31303274 	teqcc	r0, r4, ror r2
    55ec:	33383035 	teqcc	r8, #53	; 0x35
    55f0:	61352e30 	teqvs	r5, r0, lsr lr
    55f4:	33356433 	teqcc	r5, #855638016	; 0x33000000
    55f8:	656e2f36 	strbvs	r2, [lr, #-3894]!	; 0xfffff0ca
    55fc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5600:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5604:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    5608:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    560c:	6e000065 	cdpvs	0, 0, cr0, cr0, cr5, {3}
    5610:	2d6f6e61 	stclcs	14, cr6, [pc, #-388]!	; 5494 <_Min_Stack_Size+0x5294>
    5614:	72706676 	rsbsvc	r6, r0, #123731968	; 0x7600000
    5618:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    561c:	632e695f 			; <UNDEFINED> instruction: 0x632e695f
    5620:	00000100 	andeq	r0, r0, r0, lsl #2
    5624:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    5628:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    562c:	00000200 	andeq	r0, r0, r0, lsl #4
    5630:	6b636f6c 	blvs	18e13e8 <_Min_Stack_Size+0x18e11e8>
    5634:	0300682e 	movweq	r6, #2094	; 0x82e
    5638:	745f0000 	ldrbvc	r0, [pc], #-0	; 5640 <_Min_Stack_Size+0x5440>
    563c:	73657079 	cmnvc	r5, #121	; 0x79
    5640:	0300682e 	movweq	r6, #2094	; 0x82e
    5644:	65720000 	ldrbvs	r0, [r2, #-0]!
    5648:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    564c:	00030068 	andeq	r0, r3, r8, rrx
    5650:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5654:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    5658:	00020068 	andeq	r0, r2, r8, rrx
    565c:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    5660:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    5664:	003e6e69 	eorseq	r6, lr, r9, ror #28
    5668:	74000000 	strvc	r0, [r0], #-0
    566c:	73657079 	cmnvc	r5, #121	; 0x79
    5670:	0300682e 	movweq	r6, #2094	; 0x82e
    5674:	74730000 	ldrbtvc	r0, [r3], #-0
    5678:	2e6f6964 	cdpcs	9, 6, cr6, cr15, cr4, {3}
    567c:	00040068 	andeq	r0, r4, r8, rrx
    5680:	6e616e00 	cdpvs	14, 6, cr6, cr1, cr0, {0}
    5684:	66762d6f 	ldrbtvs	r2, [r6], -pc, ror #26
    5688:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    568c:	6c5f6674 	mrrcvs	6, 7, r6, pc, cr4	; <UNPREDICTABLE>
    5690:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    5694:	0100682e 	tsteq	r0, lr, lsr #16
    5698:	74730000 	ldrbtvc	r0, [r3], #-0
    569c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    56a0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    56a4:	00000000 	andeq	r0, r0, r0
    56a8:	6c3c0205 	lfmvs	f0, 4, [ip], #-20	; 0xffffffec
    56ac:	36030800 	strcc	r0, [r3], -r0, lsl #16
    56b0:	11032e01 	tstne	r3, r1, lsl #28
    56b4:	2e6f032e 	cdpcs	3, 6, cr0, cr15, cr14, {1}
    56b8:	59201103 	stmdbpl	r0!, {r0, r1, r8, ip}
    56bc:	032e6e03 			; <UNDEFINED> instruction: 0x032e6e03
    56c0:	3e213c12 	mcrcc	12, 1, r3, cr1, cr2, {0}
    56c4:	314f692f 	cmpcc	pc, pc, lsr #18
    56c8:	59303f1d 	ldmdbpl	r0!, {r0, r2, r3, r4, r8, r9, sl, fp, ip, sp}
    56cc:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    56d0:	00747603 	rsbseq	r7, r4, r3, lsl #12
    56d4:	06020402 	streq	r0, [r2], -r2, lsl #8
    56d8:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
    56dc:	03062003 	movweq	r2, #24579	; 0x6003
    56e0:	75037418 	strvc	r7, [r3, #-1048]	; 0xfffffbe8
    56e4:	3d1f764a 	ldccc	6, cr7, [pc, #-296]	; 55c4 <_Min_Stack_Size+0x53c4>
    56e8:	2256323b 	subscs	r3, r6, #-1342177277	; 0xb0000003
    56ec:	02003e21 	andeq	r3, r0, #528	; 0x210
    56f0:	2e060304 	cdpcs	3, 0, cr0, cr6, cr4, {0}
    56f4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    56f8:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    56fc:	3d068202 	sfmcc	f0, 1, [r6, #-8]
    5700:	00020223 	andeq	r0, r2, r3, lsr #4
    5704:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5708:	006d2802 	rsbeq	r2, sp, r2, lsl #16
    570c:	00ee0308 	rsceq	r0, lr, r8, lsl #6
    5710:	0a032e01 	beq	d0f1c <_Min_Stack_Size+0xd0d1c>
    5714:	2076032e 	rsbscs	r0, r6, lr, lsr #6
    5718:	03200a03 			; <UNDEFINED> instruction: 0x03200a03
    571c:	32342076 	eorscc	r2, r4, #118	; 0x76
    5720:	03ba1603 			; <UNDEFINED> instruction: 0x03ba1603
    5724:	1a032e67 	bne	d10c8 <_Min_Stack_Size+0xd0ec8>
    5728:	2069032e 	rsbcs	r0, r9, lr, lsr #6
    572c:	03d62003 	bicseq	r2, r6, #3
    5730:	955b5860 	ldrbls	r5, [fp, #-2144]	; 0xfffff7a0
    5734:	01040200 	mrseq	r0, R12_usr
    5738:	02005806 	andeq	r5, r0, #393216	; 0x60000
    573c:	003c0204 	eorseq	r0, ip, r4, lsl #4
    5740:	66040402 	strvs	r0, [r4], -r2, lsl #8
    5744:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    5748:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    574c:	31210608 			; <UNDEFINED> instruction: 0x31210608
    5750:	0042211f 	subeq	r2, r2, pc, lsl r1
    5754:	06010402 	streq	r0, [r1], -r2, lsl #8
    5758:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
    575c:	02003c02 	andeq	r3, r0, #512	; 0x200
    5760:	00820504 	addeq	r0, r2, r4, lsl #10
    5764:	06080402 	streq	r0, [r8], -r2, lsl #8
    5768:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    576c:	206a0308 	rsbcs	r0, sl, r8, lsl #6
    5770:	21742803 	cmncs	r4, r3, lsl #16
    5774:	0200312d 	andeq	r3, r0, #1073741835	; 0x4000000b
    5778:	82060204 	andhi	r0, r6, #4, 4	; 0x40000000
    577c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    5780:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    5784:	00220608 	eoreq	r0, r2, r8, lsl #12
    5788:	21080402 	tstcs	r8, r2, lsl #8
    578c:	08040200 	stmdaeq	r4, {r9}
    5790:	7a03214d 	bvc	cdccc <_Min_Stack_Size+0xcdacc>
    5794:	200a034a 	andcs	r0, sl, sl, asr #6
    5798:	034a4a03 	movteq	r4, #43523	; 0xaa03
    579c:	2c032e11 	stccs	14, cr2, [r3], {17}
    57a0:	212d2f20 			; <UNDEFINED> instruction: 0x212d2f20
    57a4:	04020051 	streq	r0, [r2], #-81	; 0xffffffaf
    57a8:	00200601 	eoreq	r0, r0, r1, lsl #12
    57ac:	06010402 	streq	r0, [r1], -r2, lsl #8
    57b0:	00204c03 	eoreq	r4, r0, r3, lsl #24
    57b4:	03010402 	movweq	r0, #5122	; 0x1402
    57b8:	02002038 	andeq	r2, r0, #56	; 0x38
    57bc:	03850104 	orreq	r0, r5, #4, 2
    57c0:	034a7fb3 	movteq	r7, #44979	; 0xafb3
    57c4:	002000d1 	ldrdeq	r0, [r0], -r1	; <UNPREDICTABLE>
    57c8:	06010402 	streq	r0, [r1], -r2, lsl #8
    57cc:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    57d0:	02003c02 	andeq	r3, r0, #512	; 0x200
    57d4:	3d060204 	sfmcc	f0, 4, [r6, #-16]
    57d8:	67222f68 	strvs	r2, [r2, -r8, ror #30]!
    57dc:	21492f4b 	cmpcs	r9, fp, asr #30
    57e0:	a2032230 	andge	r2, r3, #48, 4
    57e4:	df032e7f 	svcle	0x00032e7f
    57e8:	4f222000 	svcmi	0x00222000
    57ec:	3330215a 	teqcc	r0, #-2147483626	; 0x80000016
    57f0:	8341304b 	movthi	r3, #4171	; 0x104b
    57f4:	032e0a03 			; <UNDEFINED> instruction: 0x032e0a03
    57f8:	3f763c79 	svccc	0x00763c79
    57fc:	03040200 	movweq	r0, #16896	; 0x4200
    5800:	04020072 	streq	r0, [r2], #-114	; 0xffffff8e
    5804:	00580604 	subseq	r0, r8, r4, lsl #12
    5808:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
    580c:	07023306 	streq	r3, [r2, -r6, lsl #6]
    5810:	5e010100 	adfpls	f0, f1, f0
    5814:	02000001 	andeq	r0, r0, #1
    5818:	00013b00 	andeq	r3, r1, r0, lsl #22
    581c:	fb010200 	blx	46026 <_Min_Stack_Size+0x45e26>
    5820:	01000d0e 	tsteq	r0, lr, lsl #26
    5824:	00010101 	andeq	r0, r1, r1, lsl #2
    5828:	00010000 	andeq	r0, r1, r0
    582c:	2e2e0100 	sufcse	f0, f6, f0
    5830:	2f2e2e2f 	svccs	0x002e2e2f
    5834:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5838:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    583c:	2f2e2e2f 	svccs	0x002e2e2f
    5840:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5844:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 56a8 <_Min_Stack_Size+0x54a8>
    5848:	2f636269 	svccs	0x00636269
    584c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    5850:	752f0074 	strvc	r0, [pc, #-116]!	; 57e4 <_Min_Stack_Size+0x55e4>
    5854:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 5690 <_Min_Stack_Size+0x5490>
    5858:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    585c:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    5860:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5864:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5868:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    586c:	392e342f 	stmdbcc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
    5870:	692f332e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, r9, ip, sp}	; <UNPREDICTABLE>
    5874:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5878:	2f006564 	svccs	0x00006564
    587c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5880:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    5884:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5888:	777a352d 	ldrbvc	r3, [sl, -sp, lsr #10]!
    588c:	2f457870 	svccs	0x00457870
    5890:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5894:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    5898:	302e322e 	eorcc	r3, lr, lr, lsr #4
    589c:	7469672b 	strbtvc	r6, [r9], #-1835	; 0xfffff8d5
    58a0:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    58a4:	30333830 	eorscc	r3, r3, r0, lsr r8
    58a8:	3361352e 	cmncc	r1, #192937984	; 0xb800000
    58ac:	36333564 	ldrtcc	r3, [r3], -r4, ror #10
    58b0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    58b4:	2f62696c 	svccs	0x0062696c
    58b8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    58bc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    58c0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    58c4:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    58c8:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    58cc:	2f646c69 	svccs	0x00646c69
    58d0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    58d4:	352d6269 	strcc	r6, [sp, #-617]!	; 0xfffffd97
    58d8:	7870777a 	ldmdavc	r0!, {r1, r3, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
    58dc:	656e2f45 	strbvs	r2, [lr, #-3909]!	; 0xfffff0bb
    58e0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    58e4:	322e322d 	eorcc	r3, lr, #-805306366	; 0xd0000002
    58e8:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    58ec:	30327469 	eorscc	r7, r2, r9, ror #8
    58f0:	38303531 	ldmdacc	r0!, {r0, r4, r5, r8, sl, ip, sp}
    58f4:	352e3033 	strcc	r3, [lr, #-51]!	; 0xffffffcd
    58f8:	35643361 	strbcc	r3, [r4, #-865]!	; 0xfffffc9f
    58fc:	6e2f3633 	mcrvs	6, 1, r3, cr15, cr3, {1}
    5900:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5904:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5908:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    590c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5910:	00006564 	andeq	r6, r0, r4, ror #10
    5914:	6b726273 	blvs	1c9e2e8 <_Min_Stack_Size+0x1c9e0e8>
    5918:	00632e72 	rsbeq	r2, r3, r2, ror lr
    591c:	73000001 	movwvc	r0, #1
    5920:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    5924:	00682e66 	rsbeq	r2, r8, r6, ror #28
    5928:	6c000002 	stcvs	0, cr0, [r0], {2}
    592c:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    5930:	00030068 	andeq	r0, r3, r8, rrx
    5934:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    5938:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    593c:	00030068 	andeq	r0, r3, r8, rrx
    5940:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    5944:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    5948:	00000300 	andeq	r0, r0, r0, lsl #6
    594c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    5950:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5954:	00000004 	andeq	r0, r0, r4
    5958:	68020500 	stmdavs	r2, {r8, sl}
    595c:	0308006f 	movweq	r0, #32879	; 0x806f
    5960:	2a240134 	bcs	905e38 <_Min_Stack_Size+0x905c38>
    5964:	00211f25 	eoreq	r1, r1, r5, lsr #30
    5968:	06010402 	streq	r0, [r1], -r2, lsl #8
    596c:	222f064a 	eorcs	r0, pc, #77594624	; 0x4a00000
    5970:	01000302 	tsteq	r0, r2, lsl #6
    5974:	0000ec01 	andeq	lr, r0, r1, lsl #24
    5978:	cf000200 	svcgt	0x00000200
    597c:	02000000 	andeq	r0, r0, #0
    5980:	0d0efb01 	vstreq	d15, [lr, #-4]
    5984:	01010100 	mrseq	r0, (UNDEF: 17)
    5988:	00000001 	andeq	r0, r0, r1
    598c:	01000001 	tsteq	r0, r1
    5990:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5994:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5998:	2f2e2e2f 	svccs	0x002e2e2f
    599c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    59a0:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    59a4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    59a8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    59ac:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    59b0:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    59b4:	73752f00 	cmnvc	r5, #0, 30
    59b8:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    59bc:	63672f62 	cmnvs	r7, #392	; 0x188
    59c0:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    59c4:	6f6e2d6d 	svcvs	0x006e2d6d
    59c8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    59cc:	2f696261 	svccs	0x00696261
    59d0:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
    59d4:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
    59d8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    59dc:	622f0065 	eorvs	r0, pc, #101	; 0x65
    59e0:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    59e4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    59e8:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    59ec:	70777a35 	rsbsvc	r7, r7, r5, lsr sl
    59f0:	6e2f4578 	mcrvs	5, 1, r4, cr15, cr8, {3}
    59f4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    59f8:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    59fc:	2b302e32 	blcs	c112cc <_Min_Stack_Size+0xc110cc>
    5a00:	32746967 	rsbscc	r6, r4, #1687552	; 0x19c000
    5a04:	30353130 	eorscc	r3, r5, r0, lsr r1
    5a08:	2e303338 	mrccs	3, 1, r3, cr0, cr8, {1}
    5a0c:	64336135 	ldrtvs	r6, [r3], #-309	; 0xfffffecb
    5a10:	2f363335 	svccs	0x00363335
    5a14:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5a18:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 587c <_Min_Stack_Size+0x567c>
    5a1c:	2f636269 	svccs	0x00636269
    5a20:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5a24:	00656475 	rsbeq	r6, r5, r5, ror r4
    5a28:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    5a2c:	2e726863 	cdpcs	8, 7, cr6, cr2, cr3, {3}
    5a30:	00010063 	andeq	r0, r1, r3, rrx
    5a34:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5a38:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    5a3c:	00020068 	andeq	r0, r2, r8, rrx
    5a40:	72747300 	rsbsvc	r7, r4, #0, 6
    5a44:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    5a48:	00030068 	andeq	r0, r3, r8, rrx
    5a4c:	05000000 	streq	r0, [r0, #-0]
    5a50:	006f8802 	rsbeq	r8, pc, r2, lsl #16
    5a54:	00cb0308 	sbceq	r0, fp, r8, lsl #6
    5a58:	30032201 	andcc	r2, r3, r1, lsl #4
    5a5c:	1f5e3e2e 	svcne	0x005e3e2e
    5a60:	01000202 	tsteq	r0, r2, lsl #4
    5a64:	0000f701 	andeq	pc, r0, r1, lsl #14
    5a68:	d0000200 	andle	r0, r0, r0, lsl #4
    5a6c:	02000000 	andeq	r0, r0, #0
    5a70:	0d0efb01 	vstreq	d15, [lr, #-4]
    5a74:	01010100 	mrseq	r0, (UNDEF: 17)
    5a78:	00000001 	andeq	r0, r0, r1
    5a7c:	01000001 	tsteq	r0, r1
    5a80:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5a84:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5a88:	2f2e2e2f 	svccs	0x002e2e2f
    5a8c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5a90:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    5a94:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5a98:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5a9c:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    5aa0:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    5aa4:	73752f00 	cmnvc	r5, #0, 30
    5aa8:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    5aac:	63672f62 	cmnvs	r7, #392	; 0x188
    5ab0:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    5ab4:	6f6e2d6d 	svcvs	0x006e2d6d
    5ab8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5abc:	2f696261 	svccs	0x00696261
    5ac0:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
    5ac4:	6e692f33 	mcrvs	15, 3, r2, cr9, cr3, {1}
    5ac8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5acc:	622f0065 	eorvs	r0, pc, #101	; 0x65
    5ad0:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    5ad4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5ad8:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5adc:	70777a35 	rsbsvc	r7, r7, r5, lsr sl
    5ae0:	6e2f4578 	mcrvs	5, 1, r4, cr15, cr8, {3}
    5ae4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5ae8:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    5aec:	2b302e32 	blcs	c113bc <_Min_Stack_Size+0xc111bc>
    5af0:	32746967 	rsbscc	r6, r4, #1687552	; 0x19c000
    5af4:	30353130 	eorscc	r3, r5, r0, lsr r1
    5af8:	2e303338 	mrccs	3, 1, r3, cr0, cr8, {1}
    5afc:	64336135 	ldrtvs	r6, [r3], #-309	; 0xfffffecb
    5b00:	2f363335 	svccs	0x00363335
    5b04:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5b08:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 596c <_Min_Stack_Size+0x576c>
    5b0c:	2f636269 	svccs	0x00636269
    5b10:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5b14:	00656475 	rsbeq	r6, r5, r5, ror r4
    5b18:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    5b1c:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
    5b20:	0100632e 	tsteq	r0, lr, lsr #6
    5b24:	74730000 	ldrbtvc	r0, [r3], #-0
    5b28:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    5b2c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5b30:	74730000 	ldrbtvc	r0, [r3], #-0
    5b34:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    5b38:	0300682e 	movweq	r6, #2094	; 0x82e
    5b3c:	00000000 	andeq	r0, r0, r0
    5b40:	6fa40205 	svcvs	0x00a40205
    5b44:	3f030800 	svccc	0x00030800
    5b48:	411b1701 	tstmi	fp, r1, lsl #14
    5b4c:	01040200 	mrseq	r0, R12_usr
    5b50:	32063c06 	andcc	r3, r6, #1536	; 0x600
    5b54:	306b302f 	rsbcc	r3, fp, pc, lsr #32
    5b58:	02583d03 	subseq	r3, r8, #3, 26	; 0xc0
    5b5c:	01010001 	tsteq	r1, r1
    5b60:	0000017a 	andeq	r0, r0, sl, ror r1
    5b64:	01440002 	cmpeq	r4, r2
    5b68:	01020000 	mrseq	r0, (UNDEF: 2)
    5b6c:	000d0efb 	strdeq	r0, [sp], -fp
    5b70:	01010101 	tsteq	r1, r1, lsl #2
    5b74:	01000000 	mrseq	r0, (UNDEF: 0)
    5b78:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    5b7c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5b80:	2f2e2e2f 	svccs	0x002e2e2f
    5b84:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5b88:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5b8c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5b90:	2f62696c 	svccs	0x0062696c
    5b94:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5b98:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    5b9c:	0062696c 	rsbeq	r6, r2, ip, ror #18
    5ba0:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    5ba4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5ba8:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    5bac:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    5bb0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5bb4:	61652d65 	cmnvs	r5, r5, ror #26
    5bb8:	342f6962 	strtcc	r6, [pc], #-2402	; 5bc0 <_Min_Stack_Size+0x59c0>
    5bbc:	332e392e 			; <UNDEFINED> instruction: 0x332e392e
    5bc0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5bc4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5bc8:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    5bcc:	2f646c69 	svccs	0x00646c69
    5bd0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5bd4:	352d6269 	strcc	r6, [sp, #-617]!	; 0xfffffd97
    5bd8:	7870777a 	ldmdavc	r0!, {r1, r3, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
    5bdc:	656e2f45 	strbvs	r2, [lr, #-3909]!	; 0xfffff0bb
    5be0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5be4:	322e322d 	eorcc	r3, lr, #-805306366	; 0xd0000002
    5be8:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    5bec:	30327469 	eorscc	r7, r2, r9, ror #8
    5bf0:	38303531 	ldmdacc	r0!, {r0, r4, r5, r8, sl, ip, sp}
    5bf4:	352e3033 	strcc	r3, [lr, #-51]!	; 0xffffffcd
    5bf8:	35643361 	strbcc	r3, [r4, #-865]!	; 0xfffffc9f
    5bfc:	6e2f3633 	mcrvs	6, 1, r3, cr15, cr3, {1}
    5c00:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5c04:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5c08:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    5c0c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5c10:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    5c14:	2f007379 	svccs	0x00007379
    5c18:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5c1c:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    5c20:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5c24:	777a352d 	ldrbvc	r3, [sl, -sp, lsr #10]!
    5c28:	2f457870 	svccs	0x00457870
    5c2c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5c30:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    5c34:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5c38:	7469672b 	strbtvc	r6, [r9], #-1835	; 0xfffff8d5
    5c3c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    5c40:	30333830 	eorscc	r3, r3, r0, lsr r8
    5c44:	3361352e 	cmncc	r1, #192937984	; 0xb800000
    5c48:	36333564 	ldrtcc	r3, [r3], -r4, ror #10
    5c4c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5c50:	2f62696c 	svccs	0x0062696c
    5c54:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5c58:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5c5c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5c60:	616e0000 	cmnvs	lr, r0
    5c64:	6d2d6f6e 	stcvs	15, cr6, [sp, #-440]!	; 0xfffffe48
    5c68:	6f6c6c61 	svcvs	0x006c6c61
    5c6c:	632e7263 			; <UNDEFINED> instruction: 0x632e7263
    5c70:	00000100 	andeq	r0, r0, r0, lsl #2
    5c74:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    5c78:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    5c7c:	00000200 	andeq	r0, r0, r0, lsl #4
    5c80:	6b636f6c 	blvs	18e1a38 <_Min_Stack_Size+0x18e1838>
    5c84:	0300682e 	movweq	r6, #2094	; 0x82e
    5c88:	745f0000 	ldrbvc	r0, [pc], #-0	; 5c90 <_Min_Stack_Size+0x5a90>
    5c8c:	73657079 	cmnvc	r5, #121	; 0x79
    5c90:	0300682e 	movweq	r6, #2094	; 0x82e
    5c94:	65720000 	ldrbvs	r0, [r2, #-0]!
    5c98:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    5c9c:	00030068 	andeq	r0, r3, r8, rrx
    5ca0:	72747300 	rsbsvc	r7, r4, #0, 6
    5ca4:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    5ca8:	00040068 	andeq	r0, r4, r8, rrx
    5cac:	05000000 	streq	r0, [r0, #-0]
    5cb0:	006fda02 	rsbeq	sp, pc, r2, lsl #20
    5cb4:	03bf0308 			; <UNDEFINED> instruction: 0x03bf0308
    5cb8:	00322001 	eorseq	r2, r2, r1
    5cbc:	06010402 	streq	r0, [r1], -r2, lsl #8
    5cc0:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    5cc4:	14030601 	strne	r0, [r3], #-1537	; 0xfffff9ff
    5cc8:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    5ccc:	2e6c0301 	cdpcs	3, 6, cr0, cr12, cr1, {0}
    5cd0:	332f2230 			; <UNDEFINED> instruction: 0x332f2230
    5cd4:	4b304b4d 	blmi	c18a10 <_Min_Stack_Size+0xc18810>
    5cd8:	00010285 	andeq	r0, r1, r5, lsl #5
    5cdc:	019a0101 	orrseq	r0, sl, r1, lsl #2
    5ce0:	00020000 	andeq	r0, r2, r0
    5ce4:	0000013c 	andeq	r0, r0, ip, lsr r1
    5ce8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5cec:	0101000d 	tsteq	r1, sp
    5cf0:	00000101 	andeq	r0, r0, r1, lsl #2
    5cf4:	00000100 	andeq	r0, r0, r0, lsl #2
    5cf8:	2f2e2e01 	svccs	0x002e2e01
    5cfc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5d00:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5d04:	2f2e2e2f 	svccs	0x002e2e2f
    5d08:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    5d0c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5d10:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5d14:	722f6362 	eorvc	r6, pc, #-2013265919	; 0x88000001
    5d18:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    5d1c:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    5d20:	2f646c69 	svccs	0x00646c69
    5d24:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5d28:	352d6269 	strcc	r6, [sp, #-617]!	; 0xfffffd97
    5d2c:	7870777a 	ldmdavc	r0!, {r1, r3, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
    5d30:	656e2f45 	strbvs	r2, [lr, #-3909]!	; 0xfffff0bb
    5d34:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5d38:	322e322d 	eorcc	r3, lr, #-805306366	; 0xd0000002
    5d3c:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    5d40:	30327469 	eorscc	r7, r2, r9, ror #8
    5d44:	38303531 	ldmdacc	r0!, {r0, r4, r5, r8, sl, ip, sp}
    5d48:	352e3033 	strcc	r3, [lr, #-51]!	; 0xffffffcd
    5d4c:	35643361 	strbcc	r3, [r4, #-865]!	; 0xfffffc9f
    5d50:	6e2f3633 	mcrvs	6, 1, r3, cr15, cr3, {1}
    5d54:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5d58:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5d5c:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    5d60:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5d64:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    5d68:	2f007379 	svccs	0x00007379
    5d6c:	2f727375 	svccs	0x00727375
    5d70:	2f62696c 	svccs	0x0062696c
    5d74:	2f636367 	svccs	0x00636367
    5d78:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5d7c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5d80:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5d84:	2e342f69 	cdpcs	15, 3, cr2, cr4, cr9, {3}
    5d88:	2f332e39 	svccs	0x00332e39
    5d8c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5d90:	00656475 	rsbeq	r6, r5, r5, ror r4
    5d94:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5d98:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    5d9c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5da0:	7a352d62 	bvc	d51330 <_Min_Stack_Size+0xd51130>
    5da4:	45787077 	ldrbmi	r7, [r8, #-119]!	; 0xffffff89
    5da8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5dac:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    5db0:	2e322e32 	mrccs	14, 1, r2, cr2, cr2, {1}
    5db4:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    5db8:	31303274 	teqcc	r0, r4, ror r2
    5dbc:	33383035 	teqcc	r8, #53	; 0x35
    5dc0:	61352e30 	teqvs	r5, r0, lsr lr
    5dc4:	33356433 	teqcc	r5, #855638016	; 0x33000000
    5dc8:	656e2f36 	strbvs	r2, [lr, #-3894]!	; 0xfffff0ca
    5dcc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5dd0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5dd4:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    5dd8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5ddc:	72000065 	andvc	r0, r0, #101	; 0x65
    5de0:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    5de4:	0100632e 	tsteq	r0, lr, lsr #6
    5de8:	6f6c0000 	svcvs	0x006c0000
    5dec:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    5df0:	00000200 	andeq	r0, r0, r0, lsl #4
    5df4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    5df8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    5dfc:	00000200 	andeq	r0, r0, r0, lsl #4
    5e00:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    5e04:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    5e08:	00000300 	andeq	r0, r0, r0, lsl #6
    5e0c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    5e10:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5e14:	73000002 	movwvc	r0, #2
    5e18:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    5e1c:	00682e62 	rsbeq	r2, r8, r2, ror #28
    5e20:	00000004 	andeq	r0, r0, r4
    5e24:	00020500 	andeq	r0, r2, r0, lsl #10
    5e28:	03000000 	movweq	r0, #0
    5e2c:	22200123 	eorcs	r0, r0, #-1073741816	; 0xc0000008
    5e30:	3021221e 	eorcc	r2, r1, lr, lsl r2
    5e34:	02022d2f 	andeq	r2, r2, #3008	; 0xbc0
    5e38:	00010100 	andeq	r0, r1, r0, lsl #2
    5e3c:	00000205 	andeq	r0, r0, r5, lsl #4
    5e40:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    5e44:	211f1301 	tstcs	pc, r1, lsl #6
    5e48:	3132211f 	teqcc	r2, pc, lsl r1
    5e4c:	21233d43 			; <UNDEFINED> instruction: 0x21233d43
    5e50:	0402003b 	streq	r0, [r2], #-59	; 0xffffffc5
    5e54:	3c780302 	ldclcc	3, cr0, [r8], #-8
    5e58:	5a2e0d03 	bpl	b8926c <_Min_Stack_Size+0xb8906c>
    5e5c:	3d2f423d 	sfmcc	f4, 4, [pc, #-244]!	; 5d70 <_Min_Stack_Size+0x5b70>
    5e60:	3d2f3d2f 	stccc	13, cr3, [pc, #-188]!	; 5dac <_Min_Stack_Size+0x5bac>
    5e64:	3d2f3d2f 	stccc	13, cr3, [pc, #-188]!	; 5db0 <_Min_Stack_Size+0x5bb0>
    5e68:	032f3d2f 			; <UNDEFINED> instruction: 0x032f3d2f
    5e6c:	432f3c16 			; <UNDEFINED> instruction: 0x432f3c16
    5e70:	262f3e32 			; <UNDEFINED> instruction: 0x262f3e32
    5e74:	022e7a03 	eoreq	r7, lr, #12288	; 0x3000
    5e78:	01010005 	tsteq	r1, r5
    5e7c:	00000109 	andeq	r0, r0, r9, lsl #2
    5e80:	00ee0002 	rsceq	r0, lr, r2
    5e84:	01020000 	mrseq	r0, (UNDEF: 2)
    5e88:	000d0efb 	strdeq	r0, [sp], -fp
    5e8c:	01010101 	tsteq	r1, r1, lsl #2
    5e90:	01000000 	mrseq	r0, (UNDEF: 0)
    5e94:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    5e98:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5e9c:	2f2e2e2f 	svccs	0x002e2e2f
    5ea0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5ea4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5ea8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5eac:	2f62696c 	svccs	0x0062696c
    5eb0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5eb4:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    5eb8:	0062696c 	rsbeq	r6, r2, ip, ror #18
    5ebc:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    5ec0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5ec4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    5ec8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    5ecc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5ed0:	61652d65 	cmnvs	r5, r5, ror #26
    5ed4:	342f6962 	strtcc	r6, [pc], #-2402	; 5edc <_Min_Stack_Size+0x5cdc>
    5ed8:	332e392e 			; <UNDEFINED> instruction: 0x332e392e
    5edc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5ee0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5ee4:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    5ee8:	2f646c69 	svccs	0x00646c69
    5eec:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5ef0:	352d6269 	strcc	r6, [sp, #-617]!	; 0xfffffd97
    5ef4:	7870777a 	ldmdavc	r0!, {r1, r3, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
    5ef8:	656e2f45 	strbvs	r2, [lr, #-3909]!	; 0xfffff0bb
    5efc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5f00:	322e322d 	eorcc	r3, lr, #-805306366	; 0xd0000002
    5f04:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    5f08:	30327469 	eorscc	r7, r2, r9, ror #8
    5f0c:	38303531 	ldmdacc	r0!, {r0, r4, r5, r8, sl, ip, sp}
    5f10:	352e3033 	strcc	r3, [lr, #-51]!	; 0xffffffcd
    5f14:	35643361 	strbcc	r3, [r4, #-865]!	; 0xfffffc9f
    5f18:	6e2f3633 	mcrvs	6, 1, r3, cr15, cr3, {1}
    5f1c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5f20:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5f24:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    5f28:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5f2c:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    5f30:	00007379 	andeq	r7, r0, r9, ror r3
    5f34:	6f6e616e 	svcvs	0x006e616e
    5f38:	6c616d2d 	stclvs	13, cr6, [r1], #-180	; 0xffffff4c
    5f3c:	72636f6c 	rsbvc	r6, r3, #108, 30	; 0x1b0
    5f40:	0100632e 	tsteq	r0, lr, lsr #6
    5f44:	74730000 	ldrbtvc	r0, [r3], #-0
    5f48:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    5f4c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5f50:	6f6c0000 	svcvs	0x006c0000
    5f54:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    5f58:	00000300 	andeq	r0, r0, r0, lsl #6
    5f5c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    5f60:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    5f64:	00000300 	andeq	r0, r0, r0, lsl #6
    5f68:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    5f6c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5f70:	00000003 	andeq	r0, r0, r3
    5f74:	26020500 	strcs	r0, [r2], -r0, lsl #10
    5f78:	03080070 	movweq	r0, #32880	; 0x8070
    5f7c:	1401048b 	strne	r0, [r1], #-1163	; 0xfffffb75
    5f80:	215a2430 	cmpcs	sl, r0, lsr r4
    5f84:	01000102 	tsteq	r0, r2, lsl #2
    5f88:	00005401 	andeq	r5, r0, r1, lsl #8
    5f8c:	3e000200 	cdpcc	2, 0, cr0, cr0, cr0, {0}
    5f90:	02000000 	andeq	r0, r0, #0
    5f94:	0d0efb01 	vstreq	d15, [lr, #-4]
    5f98:	01010100 	mrseq	r0, (UNDEF: 17)
    5f9c:	00000001 	andeq	r0, r0, r1
    5fa0:	01000001 	tsteq	r0, r1
    5fa4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5fa8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5fac:	2f2e2e2f 	svccs	0x002e2e2f
    5fb0:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 5f00 <_Min_Stack_Size+0x5d00>
    5fb4:	6c676269 	sfmvs	f6, 2, [r7], #-420	; 0xfffffe5c
    5fb8:	2f73736f 	svccs	0x0073736f
    5fbc:	6e62696c 	cdpvs	9, 6, cr6, cr2, cr12, {3}
    5fc0:	7379736f 	cmnvc	r9, #-1140850687	; 0xbc000001
    5fc4:	62730000 	rsbsvs	r0, r3, #0
    5fc8:	632e6b72 			; <UNDEFINED> instruction: 0x632e6b72
    5fcc:	00000100 	andeq	r0, r0, r0, lsl #2
    5fd0:	02050000 	andeq	r0, r5, #0
    5fd4:	0800703c 	stmdaeq	r0, {r2, r3, r4, r5, ip, sp, lr}
    5fd8:	316a171a 	cmncc	sl, sl, lsl r7
    5fdc:	01000602 	tsteq	r0, r2, lsl #12
    5fe0:	Address 0x0000000000005fe0 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	5f434352 	svcpl	0x00434352
       4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
       8:	00666544 	rsbeq	r6, r6, r4, asr #10
       c:	31425041 	cmpcc	r2, r1, asr #32
      10:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
      14:	7a697300 	bvc	1a5cc1c <_Min_Stack_Size+0x1a5ca1c>
      18:	70797465 	rsbsvc	r7, r9, r5, ror #8
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
  {
    bitstatus = SET;
      1c:	44420065 	strbmi	r0, [r2], #-101	; 0xffffff9b
  }
  else
  {
    bitstatus = RESET;
      20:	5f005243 	svcpl	0x00005243
  }
  /* Return the flag status */
  return bitstatus;
      24:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
}
      28:	5f323374 	svcpl	0x00323374
      2c:	5f5f0074 	svcpl	0x005f0074
      30:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
      34:	745f3631 	ldrbvc	r3, [pc], #-1585	; 3c <_Min_Heap_Size+0x3c>
      38:	45534800 	ldrbmi	r4, [r3, #-2048]	; 0xfffff800
      3c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
      40:	43007375 	movwmi	r7, #885	; 0x375
      44:	44495550 	strbmi	r5, [r9], #-1360	; 0xfffffab0
      48:	42504100 	subsmi	r4, r0, #0, 2
      4c:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
      50:	6f687300 	svcvs	0x00687300
      54:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
      58:	4900746e 	stmdbmi	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
      5c:	00525343 	subseq	r5, r2, r3, asr #6
      60:	4b54504f 	blmi	15141a4 <_Min_Stack_Size+0x1513fa4>
      64:	00525945 	subseq	r5, r2, r5, asr #18
      68:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      6c:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
      70:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
      74:	46420074 			; <UNDEFINED> instruction: 0x46420074
      78:	70005241 	andvc	r5, r0, r1, asr #4
      7c:	756d6c6c 	strbvc	r6, [sp, #-3180]!	; 0xfffff394
      80:	41006c6c 	tstmi	r0, ip, ror #24
      84:	4e454248 	cdpmi	2, 4, cr4, cr5, cr8, {2}
      88:	50410052 	subpl	r0, r1, r2, asr r0
      8c:	53523242 	cmppl	r2, #536870916	; 0x20000004
      90:	5f005254 	svcpl	0x00005254
      94:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
      98:	745f3874 	ldrbvc	r3, [pc], #-2164	; a0 <_Min_Heap_Size+0xa0>
      9c:	50525700 	subspl	r5, r2, r0, lsl #14
      a0:	46430052 			; <UNDEFINED> instruction: 0x46430052
      a4:	53005253 	movwpl	r5, #595	; 0x253
      a8:	79537465 	ldmdbvc	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
      ac:	6f6c4373 	svcvs	0x006c4373
      b0:	6f546b63 	svcvs	0x00546b63
      b4:	70003237 	andvc	r3, r0, r7, lsr r2
      b8:	6f736c6c 	svcvs	0x00736c6c
      bc:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
      c0:	736e7500 	cmnvc	lr, #0, 10
      c4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
      c8:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
      cc:	41007261 	tstmi	r0, r1, ror #4
      d0:	52435249 	subpl	r5, r3, #-1879048188	; 0x90000004
      d4:	42435300 	submi	r5, r3, #0, 6
      d8:	7079545f 	rsbsvc	r5, r9, pc, asr r4
      dc:	50410065 	subpl	r0, r1, r5, rrx
      e0:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
      e4:	74530052 	ldrbvc	r0, [r3], #-82	; 0xffffffae
      e8:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0xfffffd9f
      ec:	756f4370 	strbvc	r4, [pc, #-880]!	; fffffd84 <BootRAM+0xef70525>
      f0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
      f4:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
      f8:	6f6c2067 	svcvs	0x006c2067
      fc:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }
  
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
     100:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     104:	2064656e 	rsbcs	r6, r4, lr, ror #10
     108:	00746e69 	rsbseq	r6, r4, r9, ror #28
  {
    /* Set the default values */
    i2sdiv = 2;
     10c:	53434853 	movtpl	r4, #14419	; 0x3853
    i2sodd = 0;
     110:	4d4d0052 	stclmi	0, cr0, [sp, #-328]	; 0xfffffeb8
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
     114:	00524146 	subseq	r4, r2, r6, asr #2
     118:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
     11c:	6e496d65 	cdpvs	13, 4, cr6, cr9, cr5, {3}
     120:	73007469 	movwvc	r7, #1129	; 0x469
     124:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     128:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
     12c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     130:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
     134:	54560074 	ldrbpl	r0, [r6], #-116	; 0xffffff8c
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
     138:	5300524f 	movwpl	r5, #591	; 0x24f
     13c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     140:	726f436d 	rsbvc	r4, pc, #-1275068415	; 0xb4000001
     144:	6f6c4365 	svcvs	0x006c4365
     148:	70556b63 	subsvc	r6, r5, r3, ror #22
     14c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;   
     150:	41534900 	cmpmi	r3, r0, lsl #18
     154:	46440052 			; <UNDEFINED> instruction: 0x46440052
}
     158:	53005253 	movwpl	r5, #595	; 0x253
     15c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     160:	726f436d 	rsbvc	r4, pc, #-1275068415	; 0xb4000001
         break;
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
         *(uint16_t*) arg = getSn_KPALVTR(sn);
         break;
     164:	6f6c4365 	svcvs	0x006c4365
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     168:	48006b63 	stmdami	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     16c:	00525346 	subseq	r5, r2, r6, asr #6
     170:	52464d4d 	subpl	r4, r6, #4928	; 0x1340
     174:	74655300 	strbtvc	r5, [r5], #-768	; 0xfffffd00
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     178:	43737953 	cmnmi	r3, #1359872	; 0x14c000
     17c:	6b636f6c 	blvs	18dbf34 <_Min_Stack_Size+0x18dbd34>
     180:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
     184:	34204320 	strtcc	r4, [r0], #-800	; 0xfffffce0
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
     188:	332e392e 			; <UNDEFINED> instruction: 0x332e392e
     18c:	31303220 	teqcc	r0, r0, lsr #4
     190:	32353035 	eorscc	r3, r5, #53	; 0x35
     194:	70282039 	eorvc	r2, r8, r9, lsr r0
     198:	65726572 	ldrbvs	r6, [r2, #-1394]!	; 0xfffffa8e
     19c:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
         break;
     1a0:	2d202965 	stccs	9, cr2, [r0, #-404]!	; 0xfffffe6c
      case SO_REMAINSIZE:
         if(getSn_MR(sn) == Sn_MR_TCP)
     1a4:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
     1a8:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
     1ac:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
     1b0:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
     1b4:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1b8:	2d20336d 	stccs	3, cr3, [r0, #-436]!	; 0xfffffe4c
     1bc:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
     1c0:	692d626d 	pushvs	{r0, r2, r3, r5, r6, r9, sp, lr}
     1c4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
         else
            *(uint16_t*)arg = sock_remained_size[sn];
     1c8:	6b726f77 	blvs	1c9bfac <_Min_Stack_Size+0x1c9bdac>
     1cc:	6c6d2d20 	stclvs	13, cr2, [sp], #-128	; 0xffffff80
     1d0:	6c747469 	cfldrdvs	mvd7, [r4], #-420	; 0xfffffe5c
         break;
     1d4:	6e652d65 	cdpvs	13, 6, cr2, cr5, cr5, {3}
      case SO_PACKINFO:
         CHECK_SOCKMODE(Sn_MR_TCP);
     1d8:	6e616964 	cdpvs	9, 6, cr6, cr1, cr4, {3}
     1dc:	67672d20 	strbvs	r2, [r7, -r0, lsr #26]!
     1e0:	2d206264 	sfmcs	f6, 4, [r0, #-400]!	; 0xfffffe70
     1e4:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
     1e8:	6e756666 	cdpvs	6, 7, cr6, cr5, cr6, {3}
     1ec:	6f697463 	svcvs	0x00697463
     1f0:	65732d6e 	ldrbvs	r2, [r3, #-3438]!	; 0xfffff292
         *(uint8_t*)arg = sock_pack_info[sn];
     1f4:	6f697463 	svcvs	0x00697463
     1f8:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
         break;
     1fc:	74616466 	strbtvc	r6, [r1], #-1126	; 0xfffffb9a
      default:
         return SOCKERR_SOCKOPT;
     200:	65732d61 	ldrbvs	r2, [r3, #-3425]!	; 0xfffff29f
   }
   return SOCK_OK;
     204:	6f697463 	svcvs	0x00697463
}
     208:	4100736e 	tstmi	r0, lr, ror #6
     20c:	00525346 	subseq	r5, r2, r6, asr #6
     210:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     214:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     218:	414c4600 	cmpmi	ip, r0, lsl #12
     21c:	545f4853 	ldrbpl	r4, [pc], #-2131	; 224 <_Min_Stack_Size+0x24>
     220:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     224:	49006665 	stmdbmi	r0, {r0, r2, r5, r6, r9, sl, sp, lr}
     228:	525f4d54 	subspl	r4, pc, #84, 26	; 0x1500
       fixed_header[1] = fixed_header[1] | 0x80;
       // second byte is number of 128s
       fixed_header[2] = remainLen / 128;
   }

	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     22c:	66754278 			; <UNDEFINED> instruction: 0x66754278
     230:	00726566 	rsbseq	r6, r2, r6, ror #10
     234:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 180 <_Min_Heap_Size+0x180>
     238:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     23c:	76737572 			; <UNDEFINED> instruction: 0x76737572
     240:	5344542f 	movtpl	r5, #17455	; 0x442f
     244:	5f545341 	svcpl	0x00545341
     248:	2f544f49 	svccs	0x00544f49
     24c:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
	memset(packet, 0, sizeof(packet));
     250:	4d432f53 	stclmi	15, cr2, [r3, #-332]	; 0xfffffeb4
     254:	65442f33 	strbvs	r2, [r4, #-3891]	; 0xfffff0cd
     258:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
	memcpy(packet, fixed_header, sizeof(fixed_header));
     25c:	70707553 	rsbsvc	r7, r0, r3, asr r5
     260:	2f74726f 	svccs	0x0074726f
     264:	532f5453 			; <UNDEFINED> instruction: 0x532f5453
     268:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	78303146 	ldmdavc	r0!, {r1, r2, r6, r8, ip, sp}
     270:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
     274:	5f6d6574 	svcpl	0x006d6574
     278:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     27c:	30316632 	eorscc	r6, r1, r2, lsr r6
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     280:	00632e78 	rsbeq	r2, r3, r8, ror lr
     284:	70736964 	rsbsvc	r6, r3, r4, ror #18
     288:	5f79616c 	svcpl	0x0079616c
     28c:	0066666f 	rsbeq	r6, r6, pc, ror #12
     290:	64656c6f 	strbtvs	r6, [r5], #-3183	; 0xfffff391
     294:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^

	// Send the packet
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     298:	72440074 	subvc	r0, r4, #116	; 0x74
     29c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     2a0:	454c4f5f 	strbmi	r4, [ip, #-3935]	; 0xfffff0a1
     2a4:	65535f44 	ldrbvs	r5, [r3, #-3908]	; 0xfffff0bc
     2a8:	6144646e 	cmpvs	r4, lr, ror #8
     2ac:	00736174 	rsbseq	r6, r3, r4, ror r1
		return -1;
     2b0:	31583846 	cmpcc	r8, r6, asr #16
	}

	return 1;
     2b4:	45520036 	ldrbmi	r0, [r2, #-54]	; 0xffffffca
     2b8:	56524553 			; <UNDEFINED> instruction: 0x56524553
}
     2bc:	00334445 	eorseq	r4, r3, r5, asr #8
     2c0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     2c4:	4f5f7265 	svcmi	0x005f7265
     2c8:	5f44454c 	svcpl	0x0044454c
     2cc:	5f746553 	svcpl	0x00746553
     2d0:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
     2d4:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     2d8:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 2e0 <_Min_Stack_Size+0xe0>
     2dc:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
     2e0:	45520073 	ldrbmi	r0, [r2, #-115]	; 0xffffff8d
     2e4:	56524553 			; <UNDEFINED> instruction: 0x56524553
     2e8:	00364445 	eorseq	r4, r6, r5, asr #8
     2ec:	72616843 	rsbvc	r6, r1, #4390912	; 0x430000
     2f0:	7a69535f 	bvc	1a55074 <_Min_Stack_Size+0x1a54e74>
     2f4:	696c0065 	stmdbvs	ip!, {r0, r2, r5, r6}^
     2f8:	4400656e 	strmi	r6, [r0], #-1390	; 0xfffffa92
     2fc:	42415349 	submi	r5, r1, #603979777	; 0x24000001
     300:	2f00454c 	svccs	0x0000454c
     304:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     308:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
     30c:	2f767375 	svccs	0x00767375
     310:	41534454 	cmpmi	r3, r4, asr r4
     314:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     318:	4400544f 	strmi	r5, [r0], #-1103	; 0xfffffbb1
     31c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     320:	4c4f5f72 	mcrrmi	15, 7, r5, pc, cr2
     324:	535f4445 	cmppl	pc, #1157627904	; 0x45000000
     328:	53776f68 	cmnpl	r7, #104, 30	; 0x1a0
     32c:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     330:	52450067 	subpl	r0, r5, #103	; 0x67
     334:	00524f52 	subseq	r4, r2, r2, asr pc
     338:	5f433249 	svcpl	0x00433249
     33c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     340:	00666544 	rsbeq	r6, r6, r4, asr #10
     344:	65766572 	ldrbvs	r6, [r6, #-1394]!	; 0xfffffa8e
     348:	72440072 	subvc	r0, r4, #114	; 0x72
     34c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     350:	454c4f5f 	strbmi	r4, [ip, #-3935]	; 0xfffff0a1
     354:	6c435f44 	mcrrvs	15, 4, r5, r3, cr4
     358:	52726165 	rsbspl	r6, r2, #1073741849	; 0x40000019
     35c:	4400776f 	strmi	r7, [r0], #-1903	; 0xfffff891
     360:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     364:	4c4f5f72 	mcrrmi	15, 7, r5, pc, cr2
     368:	465f4445 	ldrbmi	r4, [pc], -r5, asr #8
     36c:	006c6c69 	rsbeq	r6, ip, r9, ror #24
     370:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2bc <_Min_Stack_Size+0xbc>
     374:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     378:	76737572 			; <UNDEFINED> instruction: 0x76737572
     37c:	5344542f 	movtpl	r5, #17455	; 0x442f
     380:	5f545341 	svcpl	0x00545341
     384:	2f544f49 	svccs	0x00544f49
     388:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     38c:	4f2f7265 	svcmi	0x002f7265
     390:	2e44454c 	cdpcs	5, 4, cr4, cr4, cr12, {2}
     394:	72440063 	subvc	r0, r4, #99	; 0x63
     398:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     39c:	454c4f5f 	strbmi	r4, [ip, #-3935]	; 0xfffff0a1
     3a0:	68535f44 	ldmdavs	r3, {r2, r6, r8, r9, sl, fp, ip, lr}^
     3a4:	435f776f 	cmpmi	pc, #29097984	; 0x1bc0000
     3a8:	00726168 	rsbseq	r6, r2, r8, ror #2
     3ac:	70736964 	rsbsvc	r6, r3, r4, ror #18
     3b0:	5f79616c 	svcpl	0x0079616c
     3b4:	4f006e6f 	svcmi	0x00006e6f
     3b8:	00315241 	eorseq	r5, r1, r1, asr #4
     3bc:	3252414f 	subscc	r4, r2, #-1073741805	; 0xc0000013
     3c0:	53455200 	movtpl	r5, #20992	; 0x5200
     3c4:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     3c8:	52003044 	andpl	r3, r0, #68	; 0x44
     3cc:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     3d0:	31444556 	cmpcc	r4, r6, asr r5
     3d4:	53455200 	movtpl	r5, #20992	; 0x5200
     3d8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     3dc:	63003244 	movwvs	r3, #580	; 0x244
     3e0:	49726168 	ldmdbmi	r2!, {r3, r5, r6, r8, sp, lr}^
     3e4:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
     3e8:	53455200 	movtpl	r5, #20992	; 0x5200
     3ec:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     3f0:	52003444 	andpl	r3, r0, #68, 8	; 0x44000000
     3f4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     3f8:	35444556 	strbcc	r4, [r4, #-1366]	; 0xfffffaaa
     3fc:	69724400 	ldmdbvs	r2!, {sl, lr}^
     400:	5f726576 	svcpl	0x00726576
     404:	44454c4f 	strbmi	r4, [r5], #-3151	; 0xfffff3b1
     408:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
     40c:	54535f64 	ldrbpl	r5, [r3], #-3940	; 0xfffff09c
     410:	00545241 	subseq	r5, r4, r1, asr #4
     414:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     418:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     41c:	45520037 	ldrbmi	r0, [r2, #-55]	; 0xffffffc9
     420:	56524553 			; <UNDEFINED> instruction: 0x56524553
     424:	00384445 	eorseq	r4, r8, r5, asr #8
     428:	38783646 	ldmdacc	r8!, {r1, r2, r6, r9, sl, ip, sp}^
     42c:	69724400 	ldmdbvs	r2!, {sl, lr}^
     430:	5f726576 	svcpl	0x00726576
     434:	44454c4f 	strbmi	r4, [r5], #-3151	; 0xfffff3b1
     438:	6172445f 	cmnvs	r2, pc, asr r4
     43c:	504d4277 	subpl	r4, sp, r7, ror r2
     440:	61686300 	cmnvs	r8, r0, lsl #6
     444:	7a695372 	bvc	1a55214 <_Min_Stack_Size+0x1a55014>
     448:	52540065 	subspl	r0, r4, #101	; 0x65
     44c:	00455349 	subeq	r5, r5, r9, asr #6
     450:	61746164 	cmnvs	r4, r4, ror #2
     454:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     458:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 460 <_Min_Stack_Size+0x260>
     45c:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
     460:	414e4500 	cmpmi	lr, r0, lsl #10
     464:	00454c42 	subeq	r4, r5, r2, asr #24
     468:	5f4b4953 	svcpl	0x004b4953
     46c:	454d4954 	strbmi	r4, [sp, #-2388]	; 0xfffff6ac
     470:	0054554f 	subseq	r5, r4, pc, asr #10
     474:	475f5343 	ldrbmi	r5, [pc, -r3, asr #6]
     478:	4d5f5445 	cfldrdmi	mvd5, [pc, #-276]	; 36c <_Min_Stack_Size+0x16c>
     47c:	58525841 	ldmdapl	r2, {r0, r6, fp, ip, lr}^
     480:	00465542 	subeq	r5, r6, r2, asr #10
     484:	79746f73 	ldmdbvc	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     488:	70006570 	andvc	r6, r0, r0, ror r5
     48c:	5f6b6361 	svcpl	0x006b6361
     490:	006e656c 	rsbeq	r6, lr, ip, ror #10
     494:	535f4f53 	cmppl	pc, #332	; 0x14c
     498:	55544154 	ldrbpl	r4, [r4, #-340]	; 0xfffffeac
     49c:	6f730053 	svcvs	0x00730053
     4a0:	706f6b63 	rsbvc	r6, pc, r3, ror #22
     4a4:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     4a8:	63006570 	movwvs	r6, #1392	; 0x570
     4ac:	70797473 	rsbsvc	r7, r9, r3, ror r4
     4b0:	5f5f0065 	svcpl	0x005f0065
     4b4:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     4b8:	4300745f 	movwmi	r7, #1119	; 0x45f
     4bc:	45475f53 	strbmi	r5, [r7, #-3923]	; 0xfffff0ad
     4c0:	4f495f54 	svcmi	0x00495f54
     4c4:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
     4c8:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
     4cc:	6b636f73 	blvs	18dc2a0 <_Min_Stack_Size+0x18dc0a0>
     4d0:	0074706f 	rsbseq	r7, r4, pc, rrx
     4d4:	465f4f53 	usaxmi	r4, pc, r3	; <UNPREDICTABLE>
     4d8:	0047414c 	subeq	r4, r7, ip, asr #2
     4dc:	505f4f53 	subspl	r4, pc, r3, asr pc	; <UNPREDICTABLE>
     4e0:	494b4341 	stmdbmi	fp, {r0, r6, r8, r9, lr}^
     4e4:	004f464e 	subeq	r4, pc, lr, asr #12
     4e8:	6b636f73 	blvs	18dc2bc <_Min_Stack_Size+0x18dc0bc>
     4ec:	5f73695f 	svcpl	0x0073695f
     4f0:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
     4f4:	00676e69 	rsbeq	r6, r7, r9, ror #28
     4f8:	76636572 			; <UNDEFINED> instruction: 0x76636572
     4fc:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 36c <_Min_Stack_Size+0x16c>
     500:	65726600 	ldrbvs	r6, [r2, #-1536]!	; 0xfffffa00
     504:	7a697365 	bvc	1a5d2a0 <_Min_Stack_Size+0x1a5d0a0>
     508:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
     50c:	63007663 	movwvs	r7, #1635	; 0x663
     510:	6f736c74 	svcvs	0x00736c74
     514:	745f6b63 	ldrbvc	r6, [pc], #-2915	; 51c <_Min_Stack_Size+0x31c>
     518:	00657079 	rsbeq	r7, r5, r9, ror r0
     51c:	545f4f53 	ldrbpl	r4, [pc], #-3923	; 524 <_Min_Stack_Size+0x324>
     520:	53004c54 	movwpl	r4, #3156	; 0xc54
     524:	45535f4f 	ldrbmi	r5, [r3, #-3919]	; 0xfffff0b1
     528:	5542444e 	strbpl	r4, [r2, #-1102]	; 0xfffffbb2
     52c:	53430046 	movtpl	r0, #12358	; 0x3046
     530:	5445475f 	strbpl	r4, [r5], #-1887	; 0xfffff8a1
     534:	58414d5f 	stmdapl	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
     538:	55425854 	strbpl	r5, [r2, #-2132]	; 0xfffff7ac
     53c:	53430046 	movtpl	r0, #12358	; 0x3046
     540:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
     544:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
     548:	4b53414d 	blmi	14d0a84 <_Min_Stack_Size+0x14d0884>
     54c:	4b495300 	blmi	1255154 <_Min_Stack_Size+0x1254f54>
     550:	4e45535f 	mcrmi	3, 2, r5, cr5, cr15, {2}
     554:	49530054 	ldmdbmi	r3, {r2, r4, r6}^
     558:	4f435f4b 	svcmi	0x00435f4b
     55c:	43454e4e 	movtmi	r4, #24142	; 0x5e4e
     560:	00444554 	subeq	r4, r4, r4, asr r5
     564:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     568:	53006e65 	movwpl	r6, #3685	; 0xe65
     56c:	534d5f4f 	movtpl	r5, #57167	; 0xdf4f
     570:	6f730053 	svcvs	0x00730053
     574:	615f6b63 	cmpvs	pc, r3, ror #22
     578:	705f796e 	subsvc	r7, pc, lr, ror #18
     57c:	0074726f 	rsbseq	r7, r4, pc, ror #4
     580:	736c7463 	cmnvc	ip, #1660944384	; 0x63000000
     584:	656b636f 	strbvs	r6, [fp, #-879]!	; 0xfffffc91
     588:	53430074 	movtpl	r0, #12404	; 0x3074
     58c:	5445475f 	strbpl	r4, [r5], #-1887	; 0xfffff8a1
     590:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
     594:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
     598:	73005450 	movwvc	r5, #1104	; 0x450
     59c:	5f6b636f 	svcpl	0x006b636f
     5a0:	6d5f6f69 	ldclvs	15, cr6, [pc, #-420]	; 404 <_Min_Stack_Size+0x204>
     5a4:	0065646f 	rsbeq	r6, r5, pc, ror #8
     5a8:	6b636f73 	blvs	18dc37c <_Min_Stack_Size+0x18dc17c>
     5ac:	6361705f 	cmnvs	r1, #95	; 0x5f
     5b0:	6e695f6b 	cdpvs	15, 6, cr5, cr9, cr11, {3}
     5b4:	73006f66 	movwvc	r6, #3942	; 0xf66
     5b8:	00646e65 	rsbeq	r6, r4, r5, ror #28
     5bc:	5f4b4953 	svcpl	0x004b4953
     5c0:	43534944 	cmpmi	r3, #68, 18	; 0x110000
     5c4:	454e4e4f 	strbmi	r4, [lr, #-3663]	; 0xfffff1b1
     5c8:	44455443 	strbmi	r5, [r5], #-1091	; 0xfffffbbd
     5cc:	5f4f5300 	svcpl	0x004f5300
     5d0:	54534544 	ldrbpl	r4, [r3], #-1348	; 0xfffffabc
     5d4:	53005049 	movwpl	r5, #73	; 0x49
     5d8:	525f4b49 	subspl	r4, pc, #74752	; 0x12400
     5dc:	49454345 	stmdbmi	r5, {r0, r2, r6, r8, r9, lr}^
     5e0:	00444556 	subeq	r4, r4, r6, asr r5
     5e4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 530 <_Min_Stack_Size+0x330>
     5e8:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     5ec:	76737572 			; <UNDEFINED> instruction: 0x76737572
     5f0:	5344542f 	movtpl	r5, #17455	; 0x442f
     5f4:	5f545341 	svcpl	0x00545341
     5f8:	2f544f49 	svccs	0x00544f49
     5fc:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
     600:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
     604:	636f732f 	cmnvs	pc, #-1140850688	; 0xbc000000
     608:	2e74656b 	cdpcs	5, 7, cr6, cr4, cr11, {3}
     60c:	4f530063 	svcmi	0x00530063
     610:	534f545f 	movtpl	r5, #62559	; 0xf45f
     614:	6f727000 	svcvs	0x00727000
     618:	6f636f74 	svcvs	0x00636f74
     61c:	4f53006c 	svcmi	0x0053006c
     620:	45454b5f 	strbmi	r4, [r5, #-2911]	; 0xfffff4a1
     624:	494c4150 	stmdbmi	ip, {r4, r6, r8, lr}^
     628:	55414556 	strbpl	r4, [r1, #-1366]	; 0xfffffaaa
     62c:	68004f54 	stmdavs	r0, {r2, r4, r6, r8, r9, sl, fp, lr}
     630:	00646165 	rsbeq	r6, r4, r5, ror #2
     634:	475f5343 	ldrbmi	r5, [pc, -r3, asr #6]
     638:	495f5445 	ldmdbmi	pc, {r0, r2, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     63c:	414d544e 	cmpmi	sp, lr, asr #8
     640:	73004b53 	movwvc	r4, #2899	; 0xb53
     644:	5f6b636f 	svcpl	0x006b636f
     648:	616d6572 	smcvs	54866	; 0xd652
     64c:	64656e69 	strbtvs	r6, [r5], #-3689	; 0xfffff197
     650:	7a69735f 	bvc	1a5d3d4 <_Min_Stack_Size+0x1a5d1d4>
     654:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
     658:	6f74646e 	svcvs	0x0074646e
     65c:	5f4f5300 	svcpl	0x004f5300
     660:	5045454b 	subpl	r4, r5, fp, asr #10
     664:	56494c41 	strbpl	r4, [r9], -r1, asr #24
     668:	4e455345 	cdpmi	3, 4, cr5, cr5, cr5, {2}
     66c:	5f5f0044 	svcpl	0x005f0044
     670:	33746e69 	cmncc	r4, #1680	; 0x690
     674:	00745f32 	rsbseq	r5, r4, r2, lsr pc
     678:	76636572 			; <UNDEFINED> instruction: 0x76636572
     67c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     680:	5f4f5300 	svcpl	0x004f5300
     684:	56434552 			; <UNDEFINED> instruction: 0x56434552
     688:	00465542 	subeq	r5, r6, r2, asr #10
     68c:	535f5343 	cmppl	pc, #201326593	; 0xc000001
     690:	495f5445 	ldmdbmi	pc, {r0, r2, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     694:	444f4d4f 	strbmi	r4, [pc], #-3407	; 69c <_Min_Stack_Size+0x49c>
     698:	65730045 	ldrbvs	r0, [r3, #-69]!	; 0xffffffbb
     69c:	636f7374 	cmnvs	pc, #116, 6	; 0xd0000001
     6a0:	74706f6b 	ldrbtvc	r6, [r0], #-3947	; 0xfffff095
     6a4:	5f4f5300 	svcpl	0x004f5300
     6a8:	54534544 	ldrbpl	r4, [r3], #-1348	; 0xfffffabc
     6ac:	54524f50 	ldrbpl	r4, [r2], #-3920	; 0xfffff0b0
     6b0:	5f534300 	svcpl	0x00534300
     6b4:	5f524c43 	svcpl	0x00524c43
     6b8:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
     6bc:	50555252 	subspl	r5, r5, r2, asr r2
     6c0:	4f530054 	svcmi	0x00530054
     6c4:	4d45525f 	sfmmi	f5, 2, [r5, #-380]	; 0xfffffe84
     6c8:	534e4941 	movtpl	r4, #59713	; 0xe941
     6cc:	00455a49 	subeq	r5, r5, r9, asr #20
     6d0:	5f4b4953 	svcpl	0x004b4953
     6d4:	004c4c41 	subeq	r4, ip, r1, asr #24
     6d8:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     6dc:	5f706968 	svcpl	0x00706968
     6e0:	6e746567 	cdpvs	5, 7, cr6, cr4, cr7, {3}
     6e4:	6f6d7465 	svcvs	0x006d7465
     6e8:	43006564 	movwmi	r6, #1380	; 0x564
     6ec:	45475f57 	strbmi	r5, [r7, #-3927]	; 0xfffff0a9
     6f0:	48505f54 	ldmdami	r0, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     6f4:	574f5059 	smlsldpl	r5, pc, r9, r0	; <UNPREDICTABLE>
     6f8:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
     6fc:	7a697700 	bvc	1a5e304 <_Min_Stack_Size+0x1a5e104>
     700:	70696863 	rsbvc	r6, r9, r3, ror #16
     704:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     708:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     70c:	70757272 	rsbsvc	r7, r5, r2, ror r2
     710:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
     714:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
     718:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     71c:	75625f70 	strbvc	r5, [r2, #-3952]!	; 0xfffff090
     720:	72775f73 	rsbsvc	r5, r7, #460	; 0x1cc
     724:	62657469 	rsbvs	r7, r5, #1761607680	; 0x69000000
     728:	00657479 	rsbeq	r7, r5, r9, ror r4
     72c:	73697263 	cmnvc	r9, #805306374	; 0x30000006
     730:	006e655f 	rsbeq	r6, lr, pc, asr r5
     734:	49575f5f 	ldmdbmi	r7, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     738:	4948435a 	stmdbmi	r8, {r1, r3, r4, r6, r8, r9, lr}^
     73c:	69770050 	ldmdbvs	r7!, {r4, r6}^
     740:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     744:	72635f70 	rsbvc	r5, r3, #112, 30	; 0x1c0
     748:	655f7369 	ldrbvs	r7, [pc, #-873]	; 3e7 <_Min_Stack_Size+0x1e7>
     74c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     750:	5f4d4e00 	svcpl	0x004d4e00
     754:	43524f46 	cmpmi	r2, #280	; 0x118
     758:	50524145 	subspl	r4, r2, r5, asr #2
     75c:	5f736300 	svcpl	0x00736300
     760:	006c6573 	rsbeq	r6, ip, r3, ror r5
     764:	475f5743 	ldrbmi	r5, [pc, -r3, asr #14]
     768:	505f5445 	subspl	r5, pc, r5, asr #8
     76c:	54535948 	ldrbpl	r5, [r3], #-2376	; 0xfffff6b8
     770:	53555441 	cmppl	r5, #1090519040	; 0x41000000
     774:	7a697700 	bvc	1a5e37c <_Min_Stack_Size+0x1a5e17c>
     778:	70696863 	rsbvc	r6, r9, r3, ror #16
     77c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     780:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     784:	70757272 	rsbsvc	r7, r5, r2, ror r2
     788:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
     78c:	4e43006b 	cdpmi	0, 4, cr0, cr3, cr11, {3}
     790:	5445475f 	strbpl	r4, [r5], #-1887	; 0xfffff8a1
     794:	54454e5f 	strbpl	r4, [r5], #-3679	; 0xfffff1a1
     798:	4f464e49 	svcmi	0x00464e49
     79c:	5f574300 	svcpl	0x00574300
     7a0:	5f544553 	svcpl	0x00544553
     7a4:	52544e49 	subspl	r4, r4, #1168	; 0x490
     7a8:	454d4954 	strbmi	r4, [sp, #-2388]	; 0xfffff6ac
     7ac:	7a697700 	bvc	1a5e3b4 <_Min_Stack_Size+0x1a5e1b4>
     7b0:	74654e5f 	strbtvc	r4, [r5], #-3679	; 0xfffff1a1
     7b4:	6f666e49 	svcvs	0x00666e49
     7b8:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
     7bc:	775f6765 	ldrbvc	r6, [pc, -r5, ror #14]
     7c0:	68637a69 	stmdavs	r3!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
     7c4:	625f7069 	subsvs	r7, pc, #105	; 0x69
     7c8:	635f7375 	cmpvs	pc, #-738197503	; 0xd4000001
     7cc:	6e756662 	cdpvs	6, 7, cr6, cr5, cr2, {3}
     7d0:	69770063 	ldmdbvs	r7!, {r0, r1, r5, r6}^
     7d4:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     7d8:	70735f70 	rsbsvc	r5, r3, r0, ror pc
     7dc:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
     7e0:	62657469 	rsbvs	r7, r5, #1761607680	; 0x69000000
     7e4:	00657479 	rsbeq	r7, r5, r9, ror r4
     7e8:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     7ec:	5f706968 	svcpl	0x00706968
     7f0:	5f697073 	svcpl	0x00697073
     7f4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
     7f8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
     7fc:	48445f00 	stmdami	r4, {r8, r9, sl, fp, ip, lr}^
     800:	005f5043 	subseq	r5, pc, r3, asr #32
     804:	69737874 	ldmdbvs	r3!, {r2, r4, r5, r6, fp, ip, sp, lr}^
     808:	4300657a 	movwmi	r6, #1402	; 0x57a
     80c:	45535f57 	ldrbmi	r5, [r3, #-3927]	; 0xfffff0a9
     810:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
     814:	414d5254 	cmpmi	sp, r4, asr r2
     818:	63004b53 	movwvs	r4, #2899	; 0xb53
     81c:	69776c74 	ldmdbvs	r7!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     820:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     824:	69770070 	ldmdbvs	r7!, {r4, r5, r6}^
     828:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     82c:	65675f70 	strbvs	r5, [r7, #-3952]!	; 0xfffff090
     830:	746e6974 	strbtvc	r6, [lr], #-2420	; 0xfffff68c
     834:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
     838:	63007470 	movwvs	r7, #1136	; 0x470
     83c:	7079746e 	rsbsvc	r7, r9, lr, ror #8
     840:	4d4e0065 	stclmi	0, cr0, [lr, #-404]	; 0xfffffe6c
     844:	5050505f 	subspl	r5, r0, pc, asr r0
     848:	6e00454f 	cfsh32vs	mvfx4, mvfx0, #47
     84c:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     850:	4300656d 	movwmi	r6, #1389	; 0x56d
     854:	45535f57 	ldrbmi	r5, [r3, #-3927]	; 0xfffff0a9
     858:	48505f54 	ldmdami	r0, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     85c:	4e4f4359 	mcrmi	3, 2, r4, cr15, cr9, {2}
     860:	69770046 	ldmdbvs	r7!, {r1, r2, r6}^
     864:	7968707a 	stmdbvc	r8!, {r1, r3, r4, r5, r6, ip, sp, lr}^
     868:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     86c:	63796870 	cmnvs	r9, #112, 16	; 0x700000
     870:	00666e6f 	rsbeq	r6, r6, pc, ror #28
     874:	475f4e43 	ldrbmi	r4, [pc, -r3, asr #28]
     878:	4e5f5445 	cdpmi	4, 5, cr5, cr15, cr5, {2}
     87c:	4f4d5445 	svcmi	0x004d5445
     880:	43004544 	movwmi	r4, #1348	; 0x544
     884:	45525f57 	ldrbmi	r5, [r2, #-3927]	; 0xfffff0a9
     888:	5f544553 	svcpl	0x00544553
     88c:	435a4957 	cmpmi	sl, #1425408	; 0x15c000
     890:	00504948 	subseq	r4, r0, r8, asr #18
     894:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
     898:	6e635f79 	mcrvs	15, 3, r5, cr3, cr9, {3}
     89c:	68640074 	stmdavs	r4!, {r2, r4, r5, r6}^
     8a0:	6d5f7063 	ldclvs	0, cr7, [pc, #-396]	; 71c <_Min_Stack_Size+0x51c>
     8a4:	0065646f 	rsbeq	r6, r5, pc, ror #8
     8a8:	707a6977 	rsbsvc	r6, sl, r7, ror r9
     8ac:	675f7968 	ldrbvs	r7, [pc, -r8, ror #18]
     8b0:	68707465 	ldmdavs	r0!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     8b4:	6e696c79 	mcrvs	12, 3, r6, cr9, cr9, {3}
     8b8:	7562006b 	strbvc	r0, [r2, #-107]!	; 0xffffff95
     8bc:	62725f73 	rsbsvs	r5, r2, #460	; 0x1cc
     8c0:	7a697700 	bvc	1a5e4c8 <_Min_Stack_Size+0x1a5e2c8>
     8c4:	70696863 	rsbvc	r6, r9, r3, ror #16
     8c8:	5f73635f 	svcpl	0x0073635f
     8cc:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
     8d0:	5f007463 	svcpl	0x00007463
     8d4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
     8d8:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
     8dc:	4b490065 	blmi	1240a78 <_Min_Stack_Size+0x1240878>
     8e0:	5f50495f 	svcpl	0x0050495f
     8e4:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
     8e8:	5443494c 	strbpl	r4, [r3], #-2380	; 0xfffff6b4
     8ec:	7a697700 	bvc	1a5e4f4 <_Min_Stack_Size+0x1a5e2f4>
     8f0:	74654e5f 	strbtvc	r4, [r5], #-3679	; 0xfffff1a1
     8f4:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     8f8:	0074756f 	rsbseq	r7, r4, pc, ror #10
     8fc:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     900:	5f706968 	svcpl	0x00706968
     904:	6e746573 	mrcvs	5, 3, r6, cr4, cr3, {3}
     908:	6e697465 	cdpvs	4, 6, cr7, cr9, cr5, {3}
     90c:	63006f66 	movwvs	r6, #3942	; 0xf66
     910:	656e6c74 	strbvs	r6, [lr, #-3188]!	; 0xfffff38c
     914:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
     918:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
     91c:	68505f7a 	ldmdavs	r0, {r1, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     920:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
     924:	00745f66 	rsbseq	r5, r4, r6, ror #30
     928:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     92c:	5f706968 	svcpl	0x00706968
     930:	5f737562 	svcpl	0x00737562
     934:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
     938:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
     93c:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
     940:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
     944:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     948:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
     94c:	315f656d 	cmpcc	pc, sp, ror #10
     950:	73753030 	cmnvc	r5, #48	; 0x30
     954:	5f4b4900 	svcpl	0x004b4900
     958:	004c4f57 	subeq	r4, ip, r7, asr pc
     95c:	535f4e43 	cmppl	pc, #1072	; 0x430
     960:	4e5f5445 	cdpmi	4, 5, cr5, cr15, cr5, {2}
     964:	4e495445 	cdpmi	4, 4, cr5, cr9, cr5, {2}
     968:	77004f46 	strvc	r4, [r0, -r6, asr #30]
     96c:	68707a69 	ldmdavs	r0!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
     970:	65735f79 	ldrbvs	r5, [r3, #-3961]!	; 0xfffff087
     974:	79687074 	stmdbvc	r8!, {r2, r4, r5, r6, ip, sp, lr}^
     978:	646f6d70 	strbtvs	r6, [pc], #-3440	; 980 <_Min_Stack_Size+0x780>
     97c:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
     980:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     984:	65675f70 	strbvs	r5, [r7, #-3952]!	; 0xfffff090
     988:	74656e74 	strbtvc	r6, [r5], #-3700	; 0xfffff18c
     98c:	6f666e69 	svcvs	0x00666e69
     990:	5f4e4300 	svcpl	0x004e4300
     994:	5f544553 	svcpl	0x00544553
     998:	454d4954 	strbmi	r4, [sp, #-2388]	; 0xfffff6ac
     99c:	0054554f 	subseq	r5, r4, pc, asr #10
     9a0:	72746e69 	rsbsvc	r6, r4, #1680	; 0x690
     9a4:	69707300 	ldmdbvs	r0!, {r8, r9, ip, sp, lr}^
     9a8:	0062775f 	rsbeq	r7, r2, pc, asr r7
     9ac:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     9b0:	5f706968 	svcpl	0x00706968
     9b4:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
     9b8:	6f656d69 	svcvs	0x00656d69
     9bc:	43007475 	movwmi	r7, #1141	; 0x475
     9c0:	4c435f57 	mcrrmi	15, 5, r5, r3, cr7
     9c4:	4e495f52 	mcrmi	15, 2, r5, cr9, cr2, {2}
     9c8:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
     9cc:	00545055 	subseq	r5, r4, r5, asr r0
     9d0:	5f7a6977 	svcpl	0x007a6977
     9d4:	4974654e 	ldmdbmi	r4!, {r1, r2, r3, r6, r8, sl, sp, lr}^
     9d8:	006f666e 	rsbeq	r6, pc, lr, ror #12
     9dc:	4954454e 	ldmdbmi	r4, {r1, r2, r3, r6, r8, sl, lr}^
     9e0:	5f4f464e 	svcpl	0x004f464e
     9e4:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
     9e8:	43004349 	movwmi	r4, #841	; 0x349
     9ec:	45535f4e 	ldrbmi	r5, [r3, #-3918]	; 0xfffff0b2
     9f0:	454e5f54 	strbmi	r5, [lr, #-3924]	; 0xfffff0ac
     9f4:	444f4d54 	strbmi	r4, [pc], #-3412	; 9fc <_Min_Stack_Size+0x7fc>
     9f8:	775f0045 	ldrbvc	r0, [pc, -r5, asr #32]
     9fc:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     a00:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
     a04:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
     a08:	69775f67 	ldmdbvs	r7!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     a0c:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     a10:	73635f70 	cmnvc	r3, #112, 30	; 0x1c0
     a14:	6662635f 			; <UNDEFINED> instruction: 0x6662635f
     a18:	00636e75 	rsbeq	r6, r3, r5, ror lr
     a1c:	445f4b49 	ldrbmi	r4, [pc], #-2889	; a24 <_Min_Stack_Size+0x824>
     a20:	5f545345 	svcpl	0x00545345
     a24:	45524e55 	ldrbmi	r4, [r2, #-3669]	; 0xfffff1ab
     a28:	00484341 	subeq	r4, r8, r1, asr #6
     a2c:	535f5743 	cmppl	pc, #17563648	; 0x10c0000
     a30:	505f5445 	subspl	r5, pc, r5, asr #8
     a34:	4f505948 	svcmi	0x00505948
     a38:	444f4d57 	strbmi	r4, [pc], #-3415	; a40 <_Min_Stack_Size+0x840>
     a3c:	65720045 	ldrbvs	r0, [r2, #-69]!	; 0xffffffbb
     a40:	69775f67 	ldmdbvs	r7!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     a44:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     a48:	70735f70 	rsbsvc	r5, r3, r0, ror pc
     a4c:	62635f69 	rsbvs	r5, r3, #420	; 0x1a4
     a50:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     a54:	7a697700 	bvc	1a5e65c <_Min_Stack_Size+0x1a5e45c>
     a58:	5f796870 	svcpl	0x00796870
     a5c:	70746567 	rsbsvc	r6, r4, r7, ror #10
     a60:	74737968 	ldrbtvc	r7, [r3], #-2408	; 0xfffff698
     a64:	63007461 	movwvs	r7, #1121	; 0x461
     a68:	69776c74 	ldmdbvs	r7!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     a6c:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     a70:	79745f70 	ldmdbvc	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     a74:	43006570 	movwmi	r6, #1392	; 0x570
     a78:	45475f57 	strbmi	r5, [r7, #-3927]	; 0xfffff0a9
     a7c:	44495f54 	strbmi	r5, [r9], #-3924	; 0xfffff0ac
     a80:	69726300 	ldmdbvs	r2!, {r8, r9, sp, lr}^
     a84:	78655f73 	stmdavc	r5!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     a88:	74776300 	ldrbtvc	r6, [r7], #-768	; 0xfffffd00
     a8c:	00657079 	rsbeq	r7, r5, r9, ror r0
     a90:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     a94:	5f706968 	svcpl	0x00706968
     a98:	69726c63 	ldmdbvs	r2!, {r0, r1, r5, r6, sl, fp, sp, lr}^
     a9c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     aa0:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
     aa4:	7a697700 	bvc	1a5e6ac <_Min_Stack_Size+0x1a5e4ac>
     aa8:	70696863 	rsbvc	r6, r9, r3, ror #16
     aac:	5f73635f 	svcpl	0x0073635f
     ab0:	65736564 	ldrbvs	r6, [r3, #-1380]!	; 0xfffffa9c
     ab4:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
     ab8:	5f4d4e00 	svcpl	0x004d4e00
     abc:	474e4950 	smlsldmi	r4, lr, r0, r9
     ac0:	434f4c42 	movtmi	r4, #64578	; 0xfc42
     ac4:	6e70004b 	cdpvs	0, 7, cr0, cr0, cr11, {2}
     ac8:	6e697465 	cdpvs	4, 6, cr7, cr9, cr5, {3}
     acc:	49006f66 	stmdbmi	r0, {r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}
     ad0:	50505f4b 	subspl	r5, r0, fp, asr #30
     ad4:	5f454f50 	svcpl	0x00454f50
     ad8:	4d524554 	cfldr64mi	mvdx4, [r2, #-336]	; 0xfffffeb0
     adc:	54414e49 	strbpl	r4, [r1], #-3657	; 0xfffff1b7
     ae0:	43004445 	movwmi	r4, #1093	; 0x445
     ae4:	45475f57 	strbmi	r5, [r7, #-3927]	; 0xfffff0a9
     ae8:	48505f54 	ldmdami	r0, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     aec:	4e4f4359 	mcrmi	3, 2, r4, cr15, cr9, {2}
     af0:	445f0046 	ldrbmi	r0, [pc], #-70	; af8 <_Min_Stack_Size+0x8f8>
     af4:	005f534e 	subseq	r5, pc, lr, asr #6
     af8:	475f5743 	ldrbmi	r5, [pc, -r3, asr #14]
     afc:	495f5445 	ldmdbmi	pc, {r0, r2, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     b00:	4d52544e 	cfldrdmi	mvd5, [r2, #-312]	; 0xfffffec8
     b04:	004b5341 	subeq	r5, fp, r1, asr #6
     b08:	6e6c7463 	cdpvs	4, 6, cr7, cr12, cr3, {3}
     b0c:	6f777465 	svcvs	0x00777465
     b10:	745f6b72 	ldrbvc	r6, [pc], #-2930	; b18 <_Min_Stack_Size+0x918>
     b14:	00657079 	rsbeq	r7, r5, r9, ror r0
     b18:	4952435f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
     b1c:	74700053 	ldrbtvc	r0, [r0], #-83	; 0xffffffad
     b20:	6900706d 	stmdbvs	r0, {r0, r2, r3, r5, r6, ip, sp, lr}
     b24:	5f72746e 	svcpl	0x0072746e
     b28:	646e696b 	strbtvs	r6, [lr], #-2411	; 0xfffff695
     b2c:	5f574300 	svcpl	0x00574300
     b30:	5f544547 	svcpl	0x00544547
     b34:	4c594850 	mrrcmi	8, 5, r4, r9, cr0
     b38:	004b4e49 	subeq	r4, fp, r9, asr #28
     b3c:	475f5743 	ldrbmi	r5, [pc, -r3, asr #14]
     b40:	495f5445 	ldmdbmi	pc, {r0, r2, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     b44:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
     b48:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
     b4c:	5f666900 	svcpl	0x00666900
     b50:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
     b54:	6d697300 	stclvs	3, cr7, [r9, #-0]
     b58:	69770072 	ldmdbvs	r7!, {r1, r4, r5, r6}^
     b5c:	654e5f7a 	strbvs	r5, [lr, #-3962]	; 0xfffff086
     b60:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	; 0xfffffe30
     b64:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xfffff09b
     b68:	7700745f 	smlsdvc	r0, pc, r4, r7	; <UNPREDICTABLE>
     b6c:	68637a69 	stmdavs	r3!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
     b70:	735f7069 	cmpvc	pc, #105	; 0x69
     b74:	65725f77 	ldrbvs	r5, [r2, #-3959]!	; 0xfffff089
     b78:	00746573 	rsbseq	r6, r4, r3, ror r5
     b7c:	535f4b49 	cmppl	pc, #74752	; 0x12400
     b80:	5f4b434f 	svcpl	0x004b434f
     b84:	4b490030 	blmi	1240c4c <_Min_Stack_Size+0x1240a4c>
     b88:	434f535f 	movtmi	r5, #62303	; 0xf35f
     b8c:	00315f4b 	eorseq	r5, r1, fp, asr #30
     b90:	535f4b49 	cmppl	pc, #74752	; 0x12400
     b94:	5f4b434f 	svcpl	0x004b434f
     b98:	4b490032 	blmi	1240c68 <_Min_Stack_Size+0x1240a68>
     b9c:	434f535f 	movtmi	r5, #62303	; 0xf35f
     ba0:	00335f4b 	eorseq	r5, r3, fp, asr #30
     ba4:	535f4b49 	cmppl	pc, #74752	; 0x12400
     ba8:	5f4b434f 	svcpl	0x004b434f
     bac:	4b490034 	blmi	1240c84 <_Min_Stack_Size+0x1240a84>
     bb0:	434f535f 	movtmi	r5, #62303	; 0xf35f
     bb4:	00355f4b 	eorseq	r5, r5, fp, asr #30
     bb8:	535f4b49 	cmppl	pc, #74752	; 0x12400
     bbc:	5f4b434f 	svcpl	0x004b434f
     bc0:	4b490036 	blmi	1240ca0 <_Min_Stack_Size+0x1240aa0>
     bc4:	434f535f 	movtmi	r5, #62303	; 0xf35f
     bc8:	00375f4b 	eorseq	r5, r7, fp, asr #30
     bcc:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
     bd0:	006c6553 	rsbeq	r6, ip, r3, asr r5
     bd4:	645f7363 	ldrbvs	r7, [pc], #-867	; bdc <_Min_Stack_Size+0x9dc>
     bd8:	6c657365 	stclvs	3, cr7, [r5], #-404	; 0xfffffe6c
     bdc:	69707300 	ldmdbvs	r0!, {r8, r9, ip, sp, lr}^
     be0:	0062725f 	rsbeq	r7, r2, pc, asr r2
     be4:	495f5743 	ldmdbmi	pc, {r0, r1, r6, r8, r9, sl, ip, lr}^	; <UNPREDICTABLE>
     be8:	5f54494e 	svcpl	0x0054494e
     bec:	435a4957 	cmpmi	sl, #1425408	; 0x15c000
     bf0:	00504948 	subseq	r4, r0, r8, asr #18
     bf4:	6c707564 	cfldr64vs	mvdx7, [r0], #-400	; 0xfffffe70
     bf8:	43007865 	movwmi	r7, #2149	; 0x865
     bfc:	45525f57 	ldrbmi	r5, [r2, #-3927]	; 0xfffff0a9
     c00:	5f544553 	svcpl	0x00544553
     c04:	00594850 	subseq	r4, r9, r0, asr r8
     c08:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     c0c:	5f706968 	svcpl	0x00706968
     c10:	73697263 	cmnvc	r9, #805306374	; 0x30000006
     c14:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
     c18:	682f0074 	stmdavs	pc!, {r2, r4, r5, r6}	; <UNPREDICTABLE>
     c1c:	2f656d6f 	svccs	0x00656d6f
     c20:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
     c24:	542f7673 	strtpl	r7, [pc], #-1651	; c2c <_Min_Stack_Size+0xa2c>
     c28:	53415344 	movtpl	r5, #4932	; 0x1344
     c2c:	4f495f54 	svcmi	0x00495f54
     c30:	74452f54 	strbvc	r2, [r5], #-3924	; 0xfffff0ac
     c34:	6e726568 	cdpvs	5, 7, cr6, cr2, cr8, {3}
     c38:	772f7465 	strvc	r7, [pc, -r5, ror #8]!
     c3c:	68637a69 	stmdavs	r3!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
     c40:	635f7069 	cmpvs	pc, #105	; 0x69
     c44:	2e666e6f 	cdpcs	14, 6, cr6, cr6, cr15, {3}
     c48:	4e430063 	cdpmi	0, 4, cr0, cr3, cr3, {3}
     c4c:	5445475f 	strbpl	r4, [r5], #-1887	; 0xfffff8a1
     c50:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     c54:	54554f45 	ldrbpl	r4, [r5], #-3909	; 0xfffff0bb
     c58:	7a697700 	bvc	1a5e860 <_Min_Stack_Size+0x1a5e660>
     c5c:	7968505f 	stmdbvc	r8!, {r0, r1, r2, r3, r4, r6, ip, lr}^
     c60:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     c64:	63686400 	cmnvs	r8, #0, 8
     c68:	69770070 	ldmdbvs	r7!, {r4, r5, r6}^
     c6c:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     c70:	65735f70 	ldrbvs	r5, [r3, #-3952]!	; 0xfffff090
     c74:	74656e74 	strbtvc	r6, [r5], #-3700	; 0xfffff18c
     c78:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
     c7c:	67657200 	strbvs	r7, [r5, -r0, lsl #4]!
     c80:	7a69775f 	bvc	1a5ea04 <_Min_Stack_Size+0x1a5e804>
     c84:	70696863 	rsbvc	r6, r9, r3, ror #16
     c88:	6972635f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
     c8c:	62635f73 	rsbvs	r5, r3, #460	; 0x1cc
     c90:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     c94:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
     c98:	77006465 	strvc	r6, [r0, -r5, ror #8]
     c9c:	68707a69 	ldmdavs	r0!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
     ca0:	65675f79 	strbvs	r5, [r7, #-3961]!	; 0xfffff087
     ca4:	79687074 	stmdbvc	r8!, {r2, r4, r5, r6, ip, sp, lr}^
     ca8:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     cac:	73787200 	cmnvc	r8, #0, 4
     cb0:	00657a69 	rsbeq	r7, r5, r9, ror #20
     cb4:	575f4d4e 	ldrbpl	r4, [pc, -lr, asr #26]
     cb8:	4f454b41 	svcmi	0x00454b41
     cbc:	4e414c4e 	cdpmi	12, 4, cr4, cr1, cr14, {2}
     cc0:	5f4b4900 	svcpl	0x004b4900
     cc4:	4b434f53 	blmi	10d4a18 <_Min_Stack_Size+0x10d4818>
     cc8:	4c4c415f 	stfmie	f4, [ip], {95}	; 0x5f
     ccc:	73756200 	cmnvc	r5, #0, 4
     cd0:	0062775f 	rsbeq	r7, r2, pc, asr r7
     cd4:	475f5743 	ldrbmi	r5, [pc, -r3, asr #14]
     cd8:	495f5445 	ldmdbmi	pc, {r0, r2, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     cdc:	5452544e 	ldrbpl	r5, [r2], #-1102	; 0xfffffbb2
     ce0:	00454d49 	subeq	r4, r5, r9, asr #26
     ce4:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     ce8:	5f706968 	svcpl	0x00706968
     cec:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     cf0:	7a697700 	bvc	1a5e8f8 <_Min_Stack_Size+0x1a5e6f8>
     cf4:	5f796870 	svcpl	0x00796870
     cf8:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
     cfc:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
     d00:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     d04:	65675f70 	strbvs	r5, [r7, #-3952]!	; 0xfffff090
     d08:	6d697474 	cfstrdvs	mvd7, [r9, #-464]!	; 0xfffffe30
     d0c:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xfffff09b
     d10:	7a697700 	bvc	1a5e918 <_Min_Stack_Size+0x1a5e718>
     d14:	5f796870 	svcpl	0x00796870
     d18:	70746567 	rsbsvc	r6, r4, r7, ror #10
     d1c:	6d707968 	ldclvs	9, cr7, [r0, #-416]!	; 0xfffffe60
     d20:	0065646f 	rsbeq	r6, r5, pc, ror #8
     d24:	4954454e 	ldmdbmi	r4, {r1, r2, r3, r6, r8, sl, lr}^
     d28:	5f4f464e 	svcpl	0x004f464e
     d2c:	50434844 	subpl	r4, r3, r4, asr #16
     d30:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
     d34:	6c657372 	stclvs	3, cr7, [r5], #-456	; 0xfffffe38
     d38:	5a495700 	bpl	1256940 <_Min_Stack_Size+0x1256740>
     d3c:	50494843 	subpl	r4, r9, r3, asr #16
     d40:	4952575f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     d44:	425f4554 	subsmi	r4, pc, #84, 10	; 0x15000000
     d48:	77004655 	smlsdvc	r0, r5, r6, r4
     d4c:	725f7a69 	subsvc	r7, pc, #430080	; 0x69000
     d50:	5f766365 	svcpl	0x00766365
     d54:	61746164 	cmnvs	r4, r4, ror #2
     d58:	75427000 	strbvc	r7, [r2, #-0]
     d5c:	682f0066 	stmdavs	pc!, {r1, r2, r5, r6}	; <UNPREDICTABLE>
     d60:	2f656d6f 	svccs	0x00656d6f
     d64:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
     d68:	542f7673 	strtpl	r7, [pc], #-1651	; d70 <_Min_Stack_Size+0xb70>
     d6c:	53415344 	movtpl	r5, #4932	; 0x1344
     d70:	4f495f54 	svcmi	0x00495f54
     d74:	74452f54 	strbvc	r2, [r5], #-3924	; 0xfffff0ac
     d78:	6e726568 	cdpvs	5, 7, cr6, cr2, cr8, {3}
     d7c:	572f7465 	strpl	r7, [pc, -r5, ror #8]!
     d80:	30303535 	eorscc	r3, r0, r5, lsr r5
     d84:	3535772f 	ldrcc	r7, [r5, #-1839]!	; 0xfffff8d1
     d88:	632e3030 			; <UNDEFINED> instruction: 0x632e3030
     d8c:	5a495700 	bpl	1256994 <_Min_Stack_Size+0x1256794>
     d90:	50494843 	subpl	r4, r9, r3, asr #16
     d94:	4145525f 	cmpmi	r5, pc, asr r2
     d98:	49570044 	ldmdbmi	r7, {r2, r6}^
     d9c:	4948435a 	stmdbmi	r8, {r1, r3, r4, r6, r8, r9, lr}^
     da0:	52575f50 	subspl	r5, r7, #80, 30	; 0x140
     da4:	00455449 	subeq	r5, r5, r9, asr #8
     da8:	53746567 	cmnpl	r4, #432013312	; 0x19c00000
     dac:	58545f6e 	ldmdapl	r4, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     db0:	5253465f 	subspl	r4, r3, #99614720	; 0x5f00000
     db4:	6c617600 	stclvs	6, cr7, [r1], #-0
     db8:	69770031 	ldmdbvs	r7!, {r0, r4, r5}^
     dbc:	7461647a 	strbtvc	r6, [r1], #-1146	; 0xfffffb86
     dc0:	69770061 	ldmdbvs	r7!, {r0, r5, r6}^
     dc4:	65725f7a 	ldrbvs	r5, [r2, #-3962]!	; 0xfffff086
     dc8:	695f7663 	ldmdbvs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     dcc:	726f6e67 	rsbvc	r6, pc, #1648	; 0x670
     dd0:	49570065 	ldmdbmi	r7, {r0, r2, r5, r6}^
     dd4:	4948435a 	stmdbmi	r8, {r1, r3, r4, r6, r8, r9, lr}^
     dd8:	45525f50 	ldrbmi	r5, [r2, #-3920]	; 0xfffff0b0
     ddc:	425f4441 	subsmi	r4, pc, #1090519040	; 0x41000000
     de0:	67004655 	smlsdvs	r0, r5, r6, r4
     de4:	6e537465 	cdpvs	4, 5, cr7, cr3, cr5, {3}
     de8:	5f58525f 	svcpl	0x0058525f
     dec:	00525352 	subseq	r5, r2, r2, asr r3
     df0:	5f7a6977 	svcpl	0x007a6977
     df4:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
     df8:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
     dfc:	68630061 	stmdavs	r3!, {r0, r5, r6}^
     e00:	5f6b6365 	svcpl	0x006b6365
     e04:	50434844 	subpl	r4, r3, r4, asr #16
     e08:	6174735f 	cmnvs	r4, pc, asr r3
     e0c:	77006574 	smlsdxvc	r0, r4, r5, r6
     e10:	68637a69 	stmdavs	r3!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
     e14:	6d5f7069 	ldclvs	0, cr7, [pc, #-420]	; c78 <_Min_Stack_Size+0xa78>
     e18:	68006361 	stmdavs	r0, {r0, r5, r6, r8, r9, sp, lr}
     e1c:	4e74736f 	cdpmi	3, 7, cr7, cr4, cr15, {3}
     e20:	00656d61 	rsbeq	r6, r5, r1, ror #26
     e24:	4274656e 	rsbsmi	r6, r4, #461373440	; 0x1b800000
     e28:	73534f49 	cmpvc	r3, #292	; 0x124
     e2c:	65706f63 	ldrbvs	r6, [r0, #-3939]!	; 0xfffff09d
     e30:	43484400 	movtmi	r4, #33792	; 0x8400
     e34:	6c615f50 	stclvs	15, cr5, [r1], #-320	; 0xfffffec0
     e38:	61636f6c 	cmnvs	r3, ip, ror #30
     e3c:	5f646574 	svcpl	0x00646574
     e40:	68006e73 	stmdavs	r0, {r0, r1, r4, r5, r6, r9, sl, fp, sp, lr}
     e44:	0073706f 	rsbseq	r7, r3, pc, rrx
     e48:	50434844 	subpl	r4, r3, r4, asr #16
     e4c:	4941465f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r9, sl, lr}^
     e50:	0044454c 	subeq	r4, r4, ip, asr #10
     e54:	70797468 	rsbsvc	r7, r9, r8, ror #8
     e58:	656c0065 	strbvs	r0, [ip, #-101]!	; 0xffffff9b
     e5c:	5f657361 	svcpl	0x00657361
     e60:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     e64:	6f682f00 	svcvs	0x00682f00
     e68:	762f656d 	strtvc	r6, [pc], -sp, ror #10
     e6c:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
     e70:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
     e74:	54534153 	ldrbpl	r4, [r3], #-339	; 0xfffffead
     e78:	544f495f 	strbpl	r4, [pc], #-2399	; e80 <_Min_Stack_Size+0xc80>
     e7c:	746e492f 	strbtvc	r4, [lr], #-2351	; 0xfffff6d1
     e80:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     e84:	48442f74 	stmdami	r4, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
     e88:	642f5043 	strtvs	r5, [pc], #-67	; e90 <_Min_Stack_Size+0xc90>
     e8c:	2e706368 	cdpcs	3, 7, cr6, cr0, cr8, {3}
     e90:	69740063 	ldmdbvs	r4!, {r0, r1, r5, r6}^
     e94:	6553656d 	ldrbvs	r6, [r3, #-1389]	; 0xfffffa93
     e98:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
     e9c:	63686400 	cmnvs	r8, #0, 8
     ea0:	61504970 	cmpvs	r0, r0, ror r9
     ea4:	4c726464 	cfldrdmi	mvd6, [r2], #-400	; 0xfffffe70
     ea8:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
     eac:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     eb0:	61727400 	cmnvs	r2, r0, lsl #8
     eb4:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
     eb8:	61636e45 	cmnvs	r3, r5, asr #28
     ebc:	6c757370 	ldclvs	3, cr7, [r5], #-448	; 0xfffffe40
     ec0:	6f697461 	svcvs	0x00697461
     ec4:	4844006e 	stmdami	r4, {r1, r2, r3, r5, r6}^
     ec8:	525f5043 	subspl	r5, pc, #67	; 0x43
     ecc:	494e4e55 	stmdbmi	lr, {r0, r2, r4, r6, r9, sl, fp, lr}^
     ed0:	6400474e 	strvs	r4, [r0], #-1870	; 0xfffff8b2
     ed4:	52706368 	rsbspl	r6, r0, #104, 6	; 0xa0000001
     ed8:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
     edc:	64657473 	strbtvs	r7, [r5], #-1139	; 0xfffffb8d
     ee0:	64615049 	strbtvs	r5, [r1], #-73	; 0xffffffb7
     ee4:	6f007264 	svcvs	0x00007264
     ee8:	6c5f7470 	cfldrdvs	mvd7, [pc], {112}	; 0x70
     eec:	6c006e65 	stcvs	14, cr6, [r0], {101}	; 0x65
     ef0:	6553676f 	ldrbvs	r6, [r3, #-1903]	; 0xfffff891
     ef4:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
     ef8:	61696300 	cmnvs	r9, r0, lsl #6
     efc:	00726464 	rsbseq	r6, r2, r4, ror #8
     f00:	6e656c68 	cdpvs	12, 6, cr6, cr5, cr8, {3}
     f04:	43484400 	movtmi	r4, #33792	; 0x8400
     f08:	50495f50 	subpl	r5, r9, r0, asr pc
     f0c:	4148435f 	cmpmi	r8, pc, asr r3
     f10:	4445474e 	strbmi	r4, [r5], #-1870	; 0xfffff8b2
     f14:	61686300 	cmnvs	r8, r0, lsl #6
     f18:	00726464 	rsbseq	r6, r2, r4, ror #8
     f1c:	70636864 	rsbvc	r6, r3, r4, ror #16
     f20:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
     f24:	6449746e 	strbvs	r7, [r9], #-1134	; 0xfffffb92
     f28:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     f2c:	72656966 	rsbvc	r6, r5, #1671168	; 0x198000
     f30:	756f7200 	strbvc	r7, [pc, #-512]!	; d38 <_Min_Stack_Size+0xb38>
     f34:	53726574 	cmnpl	r2, #116, 10	; 0x1d000000
     f38:	63696c6f 	cmnvs	r9, #28416	; 0x6f00
     f3c:	74617469 	strbtvc	r7, [r1], #-1129	; 0xfffffb97
     f40:	416e6f69 	cmnmi	lr, r9, ror #30
     f44:	00726464 	rsbseq	r6, r2, r4, ror #8
     f48:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
     f4c:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     f50:	68640065 	stmdavs	r4!, {r0, r2, r5, r6}^
     f54:	6c437063 	mcrrvs	0, 6, r7, r3, cr3
     f58:	49737361 	ldmdbmi	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     f5c:	746e6564 	strbtvc	r6, [lr], #-1380	; 0xfffffa9c
     f60:	65696669 	strbvs	r6, [r9, #-1641]!	; 0xfffff997
     f64:	76730072 			; <UNDEFINED> instruction: 0x76730072
     f68:	6f705f72 	svcvs	0x00705f72
     f6c:	6e007472 	mcrvs	4, 0, r7, cr0, cr2, {3}
     f70:	6f447369 	svcvs	0x00447369
     f74:	6e69616d 	powvsez	f6, f1, #5.0
     f78:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
     f7c:	5f796d00 	svcpl	0x00796d00
     f80:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     f84:	63686400 	cmnvs	r8, #0, 8
     f88:	76315470 			; <UNDEFINED> instruction: 0x76315470
     f8c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     f90:	72656d00 	rsbvc	r6, r5, #0, 26
     f94:	75447469 	strbvc	r7, [r4, #-1129]	; 0xfffffb97
     f98:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     f9c:	4400656c 	strmi	r6, [r0], #-1388	; 0xfffffa94
     fa0:	5f504348 	svcpl	0x00504348
     fa4:	4b434f53 	blmi	10d4cf8 <_Min_Stack_Size+0x10d4af8>
     fa8:	70005445 	andvc	r5, r0, r5, asr #8
     fac:	63696c6f 	cmnvs	r9, #28416	; 0x6f00
     fb0:	6c694679 	stclvs	6, cr4, [r9], #-484	; 0xfffffe1c
     fb4:	00726574 	rsbseq	r6, r2, r4, ror r5
     fb8:	6e627573 	mcrvs	5, 3, r7, cr2, cr3, {3}
     fbc:	614d7465 	cmpvs	sp, r5, ror #8
     fc0:	6e006b73 	vmovvs.16	d0[1], r6
     fc4:	49427465 	stmdbmi	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
     fc8:	6f6e534f 	svcvs	0x006e534f
     fcc:	79546564 	ldmdbvc	r4, {r2, r5, r6, r8, sl, sp, lr}^
     fd0:	64006570 	strvs	r6, [r0], #-1392	; 0xfffffa90
     fd4:	4d706368 	ldclmi	3, cr6, [r0, #-416]!	; 0xfffffe60
     fd8:	734d7861 	movtvc	r7, #55393	; 0xd861
     fdc:	7a695367 	bvc	1a55d80 <_Min_Stack_Size+0x1a55b80>
     fe0:	616d0065 	cmnvs	sp, r5, rrx
     fe4:	72674478 	rsbvc	r4, r7, #120, 8	; 0x78000000
     fe8:	65526d61 	ldrbvs	r6, [r2, #-3425]	; 0xfffff29f
     fec:	536d7361 	cmnpl	sp, #-2080374783	; 0x84000001
     ff0:	00657a69 	rsbeq	r7, r5, r9, ror #20
     ff4:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
     ff8:	4348445f 	movtmi	r4, #33887	; 0x845f
     ffc:	45525f50 	ldrbmi	r5, [r2, #-3920]	; 0xfffff0b0
    1000:	53455551 	movtpl	r5, #21841	; 0x5551
    1004:	48440054 	stmdami	r4, {r2, r4, r6}^
    1008:	615f5043 	cmpvs	pc, r3, asr #32
    100c:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    1010:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
    1014:	0077675f 	rsbseq	r6, r7, pc, asr r7
    1018:	44706374 	ldrbtmi	r6, [r0], #-884	; 0xfffffc8c
    101c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    1020:	5454746c 	ldrbpl	r7, [r4], #-1132	; 0xfffffb94
    1024:	6570004c 	ldrbvs	r0, [r0, #-76]!	; 0xffffffb4
    1028:	726f6672 	rsbvc	r6, pc, #119537664	; 0x7200000
    102c:	756f526d 	strbvc	r5, [pc, #-621]!	; dc7 <_Min_Stack_Size+0xbc7>
    1030:	44726574 	ldrbtmi	r6, [r2], #-1396	; 0xfffffa8c
    1034:	6f637369 	svcvs	0x00637369
    1038:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    103c:	63686400 	cmnvs	r8, #0, 8
    1040:	70695f70 	rsbvc	r5, r9, r0, ror pc
    1044:	6470755f 	ldrbtvs	r7, [r0], #-1375	; 0xfffffaa1
    1048:	00657461 	rsbeq	r7, r5, r1, ror #8
    104c:	50434844 	subpl	r4, r3, r4, asr #16
    1050:	5049535f 	subpl	r5, r9, pc, asr r3
    1054:	61566300 	cmpvs	r6, r0, lsl #6
    1058:	6f6e006c 	svcvs	0x006e006c
    105c:	636f4c6e 	cmnvs	pc, #28160	; 0x6e00
    1060:	6f536c61 	svcvs	0x00536c61
    1064:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1068:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
    106c:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1070:	65747865 	ldrbvs	r7, [r4, #-2149]!	; 0xfffff79b
    1074:	6f69746e 	svcvs	0x0069746e
    1078:	6150736e 	cmpvs	r0, lr, ror #6
    107c:	62006874 	andvs	r6, r0, #116, 16	; 0x740000
    1080:	64616f72 	strbtvs	r6, [r1], #-3954	; 0xfffff08e
    1084:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
    1088:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    108c:	63686400 	cmnvs	r8, #0, 8
    1090:	74704f70 	ldrbtvc	r4, [r0], #-3952	; 0xfffff090
    1094:	4f6e6f69 	svcmi	0x006e6f69
    1098:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    109c:	0064616f 	rsbeq	r6, r4, pc, ror #2
    10a0:	72706d69 	rsbsvc	r6, r0, #6720	; 0x1a40
    10a4:	53737365 	cmnpl	r3, #-1811939327	; 0x94000001
    10a8:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    10ac:	61700072 	cmnvs	r0, r2, ror r0
    10b0:	544d6874 	strbpl	r6, [sp], #-2164	; 0xfffff78c
    10b4:	69676155 	stmdbvs	r7!, {r0, r2, r4, r6, r8, sp, lr}^
    10b8:	6954676e 	ldmdbvs	r4, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    10bc:	756f656d 	strbvc	r6, [pc, #-1389]!	; b57 <_Min_Stack_Size+0x957>
    10c0:	66690074 			; <UNDEFINED> instruction: 0x66690074
    10c4:	0055544d 	subseq	r5, r5, sp, asr #8
    10c8:	49746567 	ldmdbmi	r4!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
    10cc:	6f726650 	svcvs	0x00726650
    10d0:	4348446d 	movtmi	r4, #33901	; 0x846d
    10d4:	50490050 	subpl	r0, r9, r0, asr r0
    10d8:	77726f66 	ldrbvc	r6, [r2, -r6, ror #30]!
    10dc:	69647261 	stmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    10e0:	4800676e 	stmdami	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    10e4:	5f54534f 	svcpl	0x0054534f
    10e8:	454d414e 	strbmi	r4, [sp, #-334]	; 0xfffffeb2
    10ec:	43484400 	movtmi	r4, #33792	; 0x8400
    10f0:	6c615f50 	stclvs	15, cr5, [r1], #-320	; 0xfffffec0
    10f4:	61636f6c 	cmnvs	r3, ip, ror #30
    10f8:	5f646574 	svcpl	0x00646574
    10fc:	74007069 	strvc	r7, [r0], #-105	; 0xffffff97
    1100:	654b7063 	strbvs	r7, [fp, #-99]	; 0xffffff9d
    1104:	6c617065 	stclvs	0, cr7, [r1], #-404	; 0xfffffe6c
    1108:	49657669 	stmdbmi	r5!, {r0, r3, r5, r6, r9, sl, ip, sp, lr}^
    110c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1110:	006c6176 	rsbeq	r6, ip, r6, ror r1
    1114:	61666564 	cmnvs	r6, r4, ror #10
    1118:	49746c75 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    111c:	4c545450 	cfldrdmi	mvd5, [r4], {80}	; 0x50
    1120:	50495200 	subpl	r5, r9, r0, lsl #4
    1124:	47534d5f 			; <UNDEFINED> instruction: 0x47534d5f
    1128:	6d6f6400 	cfstrdvs	mvd6, [pc, #-0]	; 1130 <_Min_Stack_Size+0xf30>
    112c:	4e6e6961 	cdpmi	9, 6, cr6, cr14, cr1, {3}
    1130:	00656d61 	rsbeq	r6, r5, r1, ror #26
    1134:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
    1138:	4348445f 	movtmi	r4, #33887	; 0x845f
    113c:	45445f50 	strbmi	r5, [r4, #-3920]	; 0xfffff0b0
    1140:	4e494c43 	cdpmi	12, 4, cr4, cr9, cr3, {2}
    1144:	4c4f0045 	mcrrmi	0, 4, r0, pc, cr5
    1148:	49535f44 	ldmdbmi	r3, {r2, r6, r8, r9, sl, fp, ip, lr}^
    114c:	6e650050 	mcrvs	0, 3, r0, cr5, cr0, {2}
    1150:	74704f64 	ldrbtvc	r4, [r0], #-3940	; 0xfffff09c
    1154:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1158:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    115c:	6f526369 	svcvs	0x00526369
    1160:	00657475 	rsbeq	r7, r5, r5, ror r4
    1164:	4274656e 	rsbsmi	r6, r4, #461373440	; 0x1b800000
    1168:	64534f49 	ldrbvs	r4, [r3], #-3913	; 0xfffff0b7
    116c:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    1170:	74736944 	ldrbtvc	r6, [r3], #-2372	; 0xfffff6bc
    1174:	76726553 			; <UNDEFINED> instruction: 0x76726553
    1178:	79007265 	stmdbvc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    117c:	64646169 	strbtvs	r6, [r4], #-361	; 0xfffffe97
    1180:	65760072 	ldrbvs	r0, [r6, #-114]!	; 0xffffff8e
    1184:	726f646e 	rsbvc	r6, pc, #1845493760	; 0x6e000000
    1188:	63657053 	cmnvs	r5, #83	; 0x53
    118c:	63696669 	cmnvs	r9, #110100480	; 0x6900000
    1190:	6f666e49 	svcvs	0x00666e49
    1194:	61566c00 	cmpvs	r6, r0, lsl #24
    1198:	4678006c 	ldrbtmi	r0, [r8], -ip, rrx
    119c:	53746e6f 	cmnpl	r4, #1776	; 0x6f0
    11a0:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    11a4:	65730072 	ldrbvs	r0, [r3, #-114]!	; 0xffffff8e
    11a8:	63007363 	movwvs	r7, #867	; 0x363
    11ac:	696b6f6f 	stmdbvs	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    11b0:	72655365 	rsbvc	r5, r5, #-1811939327	; 0x94000001
    11b4:	00726576 	rsbseq	r6, r2, r6, ror r5
    11b8:	70636864 	rsbvc	r6, r3, r4, ror #16
    11bc:	0067734d 	rsbeq	r7, r7, sp, asr #6
    11c0:	47746567 	ldrbmi	r6, [r4, -r7, ror #10]!
    11c4:	6f726657 	svcvs	0x00726657
    11c8:	4348446d 	movtmi	r4, #33901	; 0x846d
    11cc:	48440050 	stmdami	r4, {r4, r6}^
    11d0:	535f5043 	cmppl	pc, #67	; 0x43
    11d4:	73004148 	movwvc	r4, #328	; 0x148
    11d8:	5f646e65 	svcpl	0x00646e65
    11dc:	50434844 	subpl	r4, r3, r4, asr #16
    11e0:	5349445f 	movtpl	r4, #37983	; 0x945f
    11e4:	45564f43 	ldrbmi	r4, [r6, #-3907]	; 0xfffff0bd
    11e8:	616d0052 	qdsubvs	r0, r2, sp
    11ec:	75536b73 	ldrbvc	r6, [r3, #-2931]	; 0xfffff48d
    11f0:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
    11f4:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
    11f8:	5f504348 	svcpl	0x00504348
    11fc:	00444958 	subeq	r4, r4, r8, asr r9
    1200:	64616967 	strbtvs	r6, [r1], #-2407	; 0xfffff699
    1204:	70007264 	andvc	r7, r0, r4, ror #4
    1208:	6f667265 	svcvs	0x00667265
    120c:	614d6d72 	hvcvs	54994	; 0xd6d2
    1210:	69446b73 	stmdbvs	r4, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    1214:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    1218:	00797265 	rsbseq	r7, r9, r5, ror #4
    121c:	5372706c 	cmnpl	r2, #108	; 0x6c
    1220:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1224:	755f0072 	ldrbvc	r0, [pc, #-114]	; 11ba <_Min_Stack_Size+0xfba>
    1228:	326c5f6e 	rsbcc	r5, ip, #440	; 0x1b8
    122c:	6c617663 	stclvs	6, cr7, [r1], #-396	; 0xfffffe74
    1230:	63686400 	cmnvs	r8, #0, 8
    1234:	70695f70 	rsbvc	r5, r9, r0, ror pc
    1238:	7373615f 	cmnvc	r3, #-1073741801	; 0xc0000017
    123c:	006e6769 	rsbeq	r6, lr, r9, ror #14
    1240:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    1244:	66664f72 	uqsub16vs	r4, r6, r2
    1248:	00746573 	rsbseq	r6, r4, r3, ror r5
    124c:	64615f64 	strbtvs	r5, [r1], #-3940	; 0xfffff09c
    1250:	44007264 	strmi	r7, [r0], #-612	; 0xfffffd9c
    1254:	5f504348 	svcpl	0x00504348
    1258:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    125c:	6c6c6100 	stfvse	f6, [ip], #-0
    1260:	6e627553 	mcrvs	5, 3, r7, cr2, cr3, {2}
    1264:	4c737465 	cfldrdmi	mvd7, [r3], #-404	; 0xfffffe6c
    1268:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    126c:	70637400 	rsbvc	r7, r3, r0, lsl #8
    1270:	7065654b 	rsbvc	r6, r5, fp, asr #10
    1274:	76696c61 	strbtvc	r6, [r9], -r1, ror #24
    1278:	72614765 	rsbvc	r4, r1, #26476544	; 0x1940000
    127c:	65676162 	strbvs	r6, [r7, #-354]!	; 0xfffffe9e
    1280:	63686400 	cmnvs	r8, #0, 8
    1284:	70695f70 	rsbvc	r5, r9, r0, ror pc
    1288:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    128c:	63696c66 	cmnvs	r9, #26112	; 0x6600
    1290:	68640074 	stmdavs	r4!, {r2, r4, r5, r6}^
    1294:	61507063 	cmpvs	r0, r3, rrx
    1298:	526d6172 	rsbpl	r6, sp, #-2147483620	; 0x8000001c
    129c:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    12a0:	6e007473 	mcrvs	4, 0, r7, cr0, cr3, {3}
    12a4:	65537369 	ldrbvs	r7, [r3, #-873]	; 0xfffffc97
    12a8:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
    12ac:	77730073 			; <UNDEFINED> instruction: 0x77730073
    12b0:	65537061 	ldrbvs	r7, [r3, #-97]	; 0xffffff9f
    12b4:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
    12b8:	70746e00 	rsbsvc	r6, r4, r0, lsl #28
    12bc:	76726553 			; <UNDEFINED> instruction: 0x76726553
    12c0:	00737265 	rsbseq	r7, r3, r5, ror #4
    12c4:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    12c8:	48445f74 	stmdami	r4, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    12cc:	745f5043 	ldrbvc	r5, [pc], #-67	; 12d4 <_Min_Stack_Size+0x10d4>
    12d0:	6f656d69 	svcvs	0x00656d69
    12d4:	44007475 	strmi	r7, [r0], #-1141	; 0xfffffb8b
    12d8:	5f504348 	svcpl	0x00504348
    12dc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    12e0:	6e614872 	mcrvs	8, 3, r4, cr1, cr2, {3}
    12e4:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    12e8:	756f7200 	strbvc	r7, [pc, #-512]!	; 10f0 <_Min_Stack_Size+0xef0>
    12ec:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
    12f0:	75536e4f 	ldrbvc	r6, [r3, #-3663]	; 0xfffff1b1
    12f4:	74656e62 	strbtvc	r6, [r5], #-3682	; 0xfffff19e
    12f8:	68746500 	ldmdavs	r4!, {r8, sl, sp, lr}^
    12fc:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    1300:	636e4574 	cmnvs	lr, #116, 10	; 0x1d000000
    1304:	75737061 	ldrbvc	r7, [r3, #-97]!	; 0xffffff9f
    1308:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    130c:	64006e6f 	strvs	r6, [r0], #-3695	; 0xfffff191
    1310:	54706368 	ldrbtpl	r6, [r0], #-872	; 0xfffffc98
    1314:	6c617632 	stclvs	6, cr7, [r1], #-200	; 0xffffff38
    1318:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    131c:	70736944 	rsbsvc	r6, r3, r4, asr #18
    1320:	4d79616c 	ldfmie	f6, [r9, #-432]!	; 0xfffffe50
    1324:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
    1328:	67007265 	strvs	r7, [r0, -r5, ror #4]
    132c:	4e537465 	cdpmi	4, 5, cr7, cr3, cr5, {3}
    1330:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 11a0 <_Min_Stack_Size+0xfa0>
    1334:	50434844 	subpl	r4, r3, r4, asr #16
    1338:	43484400 	movtmi	r4, #33792	; 0x8400
    133c:	6c615f50 	stclvs	15, cr5, [r1], #-320	; 0xfffffec0
    1340:	61636f6c 	cmnvs	r3, ip, ror #30
    1344:	5f646574 	svcpl	0x00646574
    1348:	00736e64 	rsbseq	r6, r3, r4, ror #28
    134c:	44746567 	ldrbtmi	r6, [r4], #-1383	; 0xfffffa99
    1350:	7266534e 	rsbvc	r5, r6, #939524097	; 0x38000001
    1354:	48446d6f 	stmdami	r4, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    1358:	44005043 	strmi	r5, [r0], #-67	; 0xffffffbd
    135c:	5f504348 	svcpl	0x00504348
    1360:	635f7069 	cmpvs	pc, #105	; 0x69
    1364:	676e6168 	strbvs	r6, [lr, -r8, ror #2]!
    1368:	665f6465 	ldrbvs	r6, [pc], -r5, ror #8
    136c:	0067616c 	rsbeq	r6, r7, ip, ror #2
    1370:	70636864 	rsbvc	r6, r3, r4, ror #16
    1374:	6174735f 	cmnvs	r4, pc, asr r3
    1378:	67006574 	smlsdxvs	r0, r4, r5, r6
    137c:	48447465 	stmdami	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1380:	654c5043 	strbvs	r5, [ip, #-67]	; 0xffffffbd
    1384:	74657361 	strbtvc	r7, [r5], #-865	; 0xfffffc9f
    1388:	00656d69 	rsbeq	r6, r5, r9, ror #26
    138c:	5f727673 	svcpl	0x00727673
    1390:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
    1394:	73657200 	cmnvc	r5, #0, 4
    1398:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    139c:	636f4c65 	cmnvs	pc, #25856	; 0x6500
    13a0:	6f697461 	svcvs	0x00697461
    13a4:	7265536e 	rsbvc	r5, r5, #-1207959551	; 0xb8000001
    13a8:	00726576 	rsbseq	r6, r2, r6, ror r5
    13ac:	73726170 	cmnvc	r2, #112, 2
    13b0:	43484465 	movtmi	r4, #33893	; 0x8465
    13b4:	47534d50 			; <UNDEFINED> instruction: 0x47534d50
    13b8:	70726100 	rsbsvc	r6, r2, r0, lsl #2
    13bc:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
    13c0:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!	; 0xfffffe6c
    13c4:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xfffff09b
    13c8:	43484400 	movtmi	r4, #33792	; 0x8400
    13cc:	75725f50 	ldrbvc	r5, [r2, #-3920]!	; 0xfffff0b0
    13d0:	6864006e 	stmdavs	r4!, {r1, r2, r3, r5, r6}^
    13d4:	65537063 	ldrbvs	r7, [r3, #-99]	; 0xffffff9d
    13d8:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
    13dc:	6e656449 	cdpvs	4, 6, cr6, cr5, cr9, {2}
    13e0:	69666974 	stmdbvs	r6!, {r2, r4, r5, r6, r8, fp, sp, lr}^
    13e4:	73007265 	movwvc	r7, #613	; 0x265
    13e8:	64646169 	strbtvs	r6, [r4], #-361	; 0xfffffe97
    13ec:	6f720072 	svcvs	0x00720072
    13f0:	6150746f 	cmpvs	r0, pc, ror #8
    13f4:	44006874 	strmi	r6, [r0], #-2164	; 0xfffff78c
    13f8:	5f504348 	svcpl	0x00504348
    13fc:	4c5f5049 	mrrcmi	0, 4, r5, pc, cr9	; <UNPREDICTABLE>
    1400:	45534145 	ldrbmi	r4, [r3, #-325]	; 0xfffffebb
    1404:	68630044 	stmdavs	r3!, {r2, r6}^
    1408:	5f6b6365 	svcpl	0x006b6365
    140c:	50434844 	subpl	r4, r3, r4, asr #16
    1410:	61656c5f 	cmnvs	r5, pc, asr ip
    1414:	49646573 	stmdbmi	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    1418:	6f620050 	svcvs	0x00620050
    141c:	6946746f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1420:	6953656c 	ldmdbvs	r3, {r2, r3, r5, r6, r8, sl, sp, lr}^
    1424:	6e00657a 	cfrshl64vs	mvdx0, mvdx10, r6
    1428:	49427465 	stmdbmi	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
    142c:	616e534f 	cmnvs	lr, pc, asr #6
    1430:	6553656d 	ldrbvs	r6, [r3, #-1389]	; 0xfffffa93
    1434:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
    1438:	64617000 	strbtvs	r7, [r1], #-0
    143c:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
    1440:	44006e6f 	strmi	r6, [r0], #-3695	; 0xfffff191
    1444:	5f504348 	svcpl	0x00504348
    1448:	43435553 	movtmi	r5, #13651	; 0x3553
    144c:	00535345 	subseq	r5, r3, r5, asr #6
    1450:	63656863 	cmnvs	r5, #6488064	; 0x630000
    1454:	48445f6b 	stmdami	r4, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1458:	745f5043 	ldrbvc	r5, [pc], #-67	; 1460 <_Min_Stack_Size+0x1260>
    145c:	6f656d69 	svcvs	0x00656d69
    1460:	72007475 	andvc	r7, r0, #1962934272	; 0x75000000
    1464:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1468:	756f635f 	strbvc	r6, [pc, #-863]!	; 1111 <_Min_Stack_Size+0xf11>
    146c:	7000746e 	andvc	r7, r0, lr, ror #8
    1470:	4d687461 	cfstrdmi	mvd7, [r8, #-388]!	; 0xfffffe7c
    1474:	6c705554 	cfldr64vs	mvdx5, [r0], #-336	; 0xfffffeb0
    1478:	61657461 	cmnvs	r5, r1, ror #8
    147c:	62615475 	rsbvs	r5, r1, #1962934272	; 0x75000000
    1480:	5000656c 	andpl	r6, r0, ip, ror #10
    1484:	45535241 	ldrbmi	r5, [r3, #-577]	; 0xfffffdbf
    1488:	444e455f 	strbmi	r4, [lr], #-1375	; 0xfffffaa1
    148c:	616e7300 	cmnvs	lr, r0, lsl #6
    1490:	6400656d 	strvs	r6, [r0], #-1389	; 0xfffffa93
    1494:	4d706368 	ldclmi	3, cr6, [r0, #-416]!	; 0xfffffe60
    1498:	61737365 	cmnvs	r3, r5, ror #6
    149c:	79546567 	ldmdbvc	r4, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
    14a0:	70006570 	andvc	r6, r0, r0, ror r5
    14a4:	72646864 	rsbvc	r6, r4, #100, 16	; 0x640000
    14a8:	63647100 	cmnvs	r4, #0, 2
    14ac:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    14b0:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    14b4:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
    14b8:	7000745f 	andvc	r7, r0, pc, asr r4
    14bc:	65737261 	ldrbvs	r7, [r3, #-609]!	; 0xfffffd9f
    14c0:	0047534d 	subeq	r5, r7, sp, asr #6
    14c4:	5f736e64 	svcpl	0x00736e64
    14c8:	77736e61 	ldrbvc	r6, [r3, -r1, ror #28]!
    14cc:	63007265 	movwvs	r7, #613	; 0x265
    14d0:	72706d6f 	rsbsvc	r6, r0, #7104	; 0x1bc0
    14d4:	65737365 	ldrbvs	r7, [r3, #-869]!	; 0xfffffc9b
    14d8:	70690064 	rsbvc	r0, r9, r4, rrx
    14dc:	6f72665f 	svcvs	0x0072665f
    14e0:	6e645f6d 	cdpvs	15, 6, cr5, cr4, cr13, {3}
    14e4:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    14e8:	2f656d6f 	svccs	0x00656d6f
    14ec:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    14f0:	542f7673 	strtpl	r7, [pc], #-1651	; 14f8 <_Min_Stack_Size+0x12f8>
    14f4:	53415344 	movtpl	r5, #4932	; 0x1344
    14f8:	4f495f54 	svcmi	0x00495f54
    14fc:	6e492f54 	mcrvs	15, 2, r2, cr9, cr4, {2}
    1500:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    1504:	442f7465 	strtmi	r7, [pc], #-1125	; 150c <_Min_Stack_Size+0x130c>
    1508:	642f534e 	strtvs	r5, [pc], #-846	; 1510 <_Min_Stack_Size+0x1310>
    150c:	705f736e 	subsvc	r7, pc, lr, ror #6
    1510:	65737261 	ldrbvs	r7, [r3, #-609]!	; 0xfffffd9f
    1514:	7300632e 	movwvc	r6, #814	; 0x32e
    1518:	006e656c 	rsbeq	r6, lr, ip, ror #10
    151c:	6f63736e 	svcvs	0x0063736e
    1520:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1524:	73726170 	cmnvc	r2, #112, 2
    1528:	616e5f65 	cmnvs	lr, r5, ror #30
    152c:	6f00656d 	svcvs	0x0000656d
    1530:	646f6370 	strbtvs	r6, [pc], #-880	; 1538 <_Min_Stack_Size+0x1338>
    1534:	63720065 	cmnvs	r2, #101	; 0x65
    1538:	0065646f 	rsbeq	r6, r5, pc, ror #8
    153c:	6f636e61 	svcvs	0x00636e61
    1540:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1544:	66756270 			; <UNDEFINED> instruction: 0x66756270
    1548:	65736e00 	ldrbvs	r6, [r3, #-3584]!	; 0xfffff200
    154c:	6e640067 	cdpvs	0, 6, cr0, cr4, cr7, {3}
    1550:	75715f73 	ldrbvc	r5, [r1, #-3955]!	; 0xfffff08d
    1554:	69747365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
    1558:	67006e6f 	strvs	r6, [r0, -pc, ror #28]
    155c:	36317465 	ldrtcc	r7, [r1], -r5, ror #8
    1560:	63726100 	cmnvs	r2, #0, 2
    1564:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    1568:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    156c:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
    1570:	6e640074 	mcrvs	0, 3, r0, cr4, cr4, {3}
    1574:	65735f73 	ldrbvs	r5, [r3, #-3955]!	; 0xfffff08d
    1578:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
    157c:	7473315f 	ldrbtvc	r3, [r3], #-351	; 0xfffffea1
    1580:	534e4400 	movtpl	r4, #58368	; 0xe400
    1584:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    1588:	61487265 	cmpvs	r8, r5, ror #4
    158c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1590:	4e440072 	mcrmi	0, 2, r0, cr4, cr2, {3}
    1594:	75725f53 	ldrbvc	r5, [r2, #-3923]!	; 0xfffff0ad
    1598:	6e64006e 	cdpvs	0, 6, cr0, cr4, cr14, {3}
    159c:	75625f73 	strbvc	r5, [r2, #-3955]!	; 0xfffff08d
    15a0:	75700066 	ldrbvc	r0, [r0, #-102]!	; 0xffffff9a
    15a4:	00363174 	eorseq	r3, r6, r4, ror r1
    15a8:	5f736e64 	svcpl	0x00736e64
    15ac:	76726573 			; <UNDEFINED> instruction: 0x76726573
    15b0:	325f7265 	subscc	r7, pc, #1342177286	; 0x50000006
    15b4:	4400646e 	strmi	r6, [r0], #-1134	; 0xfffffb92
    15b8:	695f534e 	ldmdbvs	pc, {r1, r2, r3, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
    15bc:	0074696e 	rsbseq	r6, r4, lr, ror #18
    15c0:	5f47534d 	svcpl	0x0047534d
    15c4:	72004449 	andvc	r4, r0, #1224736768	; 0x49000000
    15c8:	635f7465 	cmpvs	pc, #1694498816	; 0x65000000
    15cc:	6b636568 	blvs	18dab74 <_Min_Stack_Size+0x18da974>
    15d0:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    15d4:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xfffff09b
    15d8:	6f682f00 	svcvs	0x00682f00
    15dc:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    15e0:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    15e4:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    15e8:	54534153 	ldrbpl	r4, [r3], #-339	; 0xfffffead
    15ec:	544f495f 	strbpl	r4, [pc], #-2399	; 15f4 <_Min_Stack_Size+0x13f4>
    15f0:	746e492f 	strbtvc	r4, [lr], #-2351	; 0xfffff6d1
    15f4:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    15f8:	4e442f74 	mcrmi	15, 2, r2, cr4, cr4, {3}
    15fc:	6e642f53 	mcrvs	15, 3, r2, cr4, cr3, {2}
    1600:	00632e73 	rsbeq	r2, r3, r3, ror lr
    1604:	5f736e64 	svcpl	0x00736e64
    1608:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    160c:	736e6400 	cmnvc	lr, #0, 8
    1610:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
    1614:	68630074 	stmdavs	r3!, {r2, r4, r5, r6}^
    1618:	5f6b6365 	svcpl	0x006b6365
    161c:	5f534e44 	svcpl	0x00534e44
    1620:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    1624:	0074756f 	rsbseq	r7, r4, pc, ror #10
    1628:	6d616e64 	stclvs	14, cr6, [r1, #-400]!	; 0xfffffe70
    162c:	6e640065 	cdpvs	0, 6, cr0, cr4, cr5, {3}
    1630:	616d5f73 	smcvs	54771	; 0xd5f3
    1634:	7571656b 	ldrbvc	r6, [r1, #-1387]!	; 0xfffffa95
    1638:	00797265 	rsbseq	r7, r9, r5, ror #4
    163c:	5f534e44 	svcpl	0x00534e44
    1640:	72657571 	rsbvc	r7, r5, #473956352	; 0x1c400000
    1644:	4e440079 	mcrmi	0, 2, r0, cr4, cr9, {3}
    1648:	4f535f53 	svcmi	0x00535f53
    164c:	54454b43 	strbpl	r4, [r5], #-2883	; 0xfffff4bd
    1650:	42414900 	submi	r4, r1, #0, 18
    1654:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
    1658:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    165c:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
    1660:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1664:	4e006665 	cfmadd32mi	mvax3, mvfx6, mvfx0, mvfx5
    1668:	5f434956 	svcpl	0x00434956
    166c:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    1670:	6e6e6168 	powvsez	f6, f6, #0.0
    1674:	6d436c65 	stclvs	12, cr6, [r3, #-404]	; 0xfffffe6c
    1678:	79530064 	ldmdbvc	r3, {r2, r5, r6}^
    167c:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    1680:	4c435f6b 	mcrrmi	15, 6, r5, r3, cr11
    1684:	756f534b 	strbvc	r5, [pc, #-843]!	; 1341 <_Min_Stack_Size+0x1141>
    1688:	00656372 	rsbeq	r6, r5, r2, ror r3
    168c:	4349564e 	movtmi	r5, #38478	; 0x964e
    1690:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1694:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1698:	00746375 	rsbseq	r6, r4, r5, ror r3
    169c:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
    16a0:	5f6b6369 	svcpl	0x006b6369
    16a4:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    16a8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    16ac:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    16b0:	00676966 	rsbeq	r6, r7, r6, ror #18
    16b4:	4349564e 	movtmi	r5, #38478	; 0x964e
    16b8:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    16bc:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
    16c0:	6154726f 	cmpvs	r4, pc, ror #4
    16c4:	00656c62 	rsbeq	r6, r5, r2, ror #24
    16c8:	4349564e 	movtmi	r5, #38478	; 0x964e
    16cc:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    16d0:	6d740074 	ldclvs	0, cr0, [r4, #-464]!	; 0xfffffe30
    16d4:	65727070 	ldrbvs	r7, [r2, #-112]!	; 0xffffff90
    16d8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    16dc:	72505f43 	subsvc	r5, r0, #268	; 0x10c
    16e0:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    16e4:	72477974 	subvc	r7, r7, #116, 18	; 0x1d0000
    16e8:	0070756f 	rsbseq	r7, r0, pc, ror #10
    16ec:	5377654e 	cmnpl	r7, #327155712	; 0x13800000
    16f0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    16f4:	49545300 	ldmdbmi	r4, {r8, r9, ip, lr}^
    16f8:	53520052 	cmppl	r2, #82	; 0x52
    16fc:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    1700:	43003144 	movwmi	r3, #324	; 0x144
    1704:	42494c41 	submi	r4, r9, #16640	; 0x4100
    1708:	52544300 	subspl	r4, r4, #0, 6
    170c:	564e004c 	strbpl	r0, [lr], -ip, asr #32
    1710:	545f4349 	ldrbpl	r4, [pc], #-841	; 1718 <_Min_Stack_Size+0x1518>
    1714:	00657079 	rsbeq	r7, r5, r9, ror r0
    1718:	52504349 	subspl	r4, r0, #603979777	; 0x24000001
    171c:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    1720:	00627573 	rsbeq	r7, r2, r3, ror r5
    1724:	4349564e 	movtmi	r5, #38478	; 0x964e
    1728:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    172c:	4c6d6574 	cfstr64mi	mvdx6, [sp], #-464	; 0xfffffe30
    1730:	6e6f4350 	mcrvs	3, 3, r4, cr15, cr0, {2}
    1734:	00676966 	rsbeq	r6, r7, r6, ror #18
    1738:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
    173c:	5f6b6369 	svcpl	0x006b6369
    1740:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1744:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    1748:	6f697270 	svcvs	0x00697270
    174c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1750:	50534900 	subspl	r4, r3, r0, lsl #18
    1754:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
    1758:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    175c:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    1760:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    1764:	564e006c 	strbpl	r0, [lr], -ip, rrx
    1768:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    176c:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    1770:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    1774:	6275536c 	rsbsvs	r5, r5, #108, 6	; 0xb0000001
    1778:	6f697250 	svcvs	0x00697250
    177c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1780:	45434900 	strbmi	r4, [r3, #-2304]	; 0xfffff700
    1784:	53490052 	movtpl	r0, #36946	; 0x9052
    1788:	4e005245 	cdpmi	2, 0, cr5, cr0, cr5, {2}
    178c:	5f434956 	svcpl	0x00434956
    1790:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    1794:	6e6e6168 	powvsez	f6, f6, #0.0
    1798:	72506c65 	subsvc	r6, r0, #25856	; 0x6500
    179c:	706d6565 	rsbvc	r6, sp, r5, ror #10
    17a0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    17a4:	6f697250 	svcvs	0x00697250
    17a8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    17ac:	6e754600 	cdpvs	6, 7, cr4, cr5, cr0, {0}
    17b0:	6f697463 	svcvs	0x00697463
    17b4:	536c616e 	cmnpl	ip, #-2147483621	; 0x8000001b
    17b8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    17bc:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    17c0:	65565f43 	ldrbvs	r5, [r6, #-3907]	; 0xfffff0bd
    17c4:	61547463 	cmpvs	r4, r3, ror #8
    17c8:	4f4c0062 	svcmi	0x004c0062
    17cc:	4c004441 	cfstrsmi	mvf4, [r0], {65}	; 0x41
    17d0:	6f50776f 	svcvs	0x0050776f
    17d4:	4d726577 	cfldr64mi	mvdx6, [r2, #-476]!	; 0xfffffe24
    17d8:	0065646f 	rsbeq	r6, r5, pc, ror #8
    17dc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1728 <_Min_Stack_Size+0x1528>
    17e0:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    17e4:	76737572 			; <UNDEFINED> instruction: 0x76737572
    17e8:	5344542f 	movtpl	r5, #17455	; 0x442f
    17ec:	5f545341 	svcpl	0x00545341
    17f0:	2f544f49 	svccs	0x00544f49
    17f4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    17f8:	65697261 	strbvs	r7, [r9, #-609]!	; 0xfffffd9f
    17fc:	72732f73 	rsbsvc	r2, r3, #460	; 0x1cc
    1800:	696d2f63 	stmdbvs	sp!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    1804:	632e6373 			; <UNDEFINED> instruction: 0x632e6373
    1808:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    180c:	72505f43 	subsvc	r5, r0, #268	; 0x10c
    1810:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1814:	72477974 	subvc	r7, r7, #116, 18	; 0x1d0000
    1818:	4370756f 	cmnmi	r0, #465567744	; 0x1bc00000
    181c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1820:	43520067 	cmpmi	r2, #103	; 0x67
    1824:	43485f43 	movtmi	r5, #36675	; 0x8f43
    1828:	52004b4c 	andpl	r4, r0, #76, 22	; 0x13000
    182c:	415f4343 	cmpmi	pc, r3, asr #6
    1830:	4c434344 	mcrrmi	3, 4, r4, r3, cr4
    1834:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1838:	00676966 	rsbeq	r6, r7, r6, ror #18
    183c:	5f434352 	svcpl	0x00434352
    1840:	61656c43 	cmnvs	r5, r3, asr #24
    1844:	50544972 	subspl	r4, r4, r2, ror r9
    1848:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    184c:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1850:	43520074 	cmpmi	r2, #116	; 0x74
    1854:	50415f43 	subpl	r5, r1, r3, asr #30
    1858:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    185c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1860:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1864:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    1868:	43435200 	movtmi	r5, #12800	; 0x3200
    186c:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
    1870:	43435200 	movtmi	r5, #12800	; 0x3200
    1874:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1878:	74535449 	ldrbvc	r5, [r3], #-1097	; 0xfffffbb7
    187c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1880:	43435200 	movtmi	r5, #12800	; 0x3200
    1884:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1888:	72655032 	rsbvc	r5, r5, #50	; 0x32
    188c:	00687069 	rsbeq	r7, r8, r9, rrx
    1890:	5f434352 	svcpl	0x00434352
    1894:	4b4c4350 	blmi	13125dc <_Min_Stack_Size+0x13123dc>
    1898:	43520032 	cmpmi	r2, #50	; 0x32
    189c:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    18a0:	646d434c 	strbtvs	r4, [sp], #-844	; 0xfffffcb4
    18a4:	43435200 	movtmi	r5, #12800	; 0x3200
    18a8:	6f6c435f 	svcvs	0x006c435f
    18ac:	54736b63 	ldrbtpl	r6, [r3], #-2915	; 0xfffff49d
    18b0:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    18b4:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
    18b8:	505f4343 	subspl	r4, pc, r3, asr #6
    18bc:	754d4c4c 	strbvc	r4, [sp, #-3148]	; 0xfffff3b4
    18c0:	4352006c 	cmpmi	r2, #108	; 0x6c
    18c4:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    18c8:	72655042 	rsbvc	r5, r5, #66	; 0x42
    18cc:	43687069 	cmnmi	r8, #105	; 0x69
    18d0:	6b636f6c 	blvs	18dd688 <_Min_Stack_Size+0x18dd488>
    18d4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    18d8:	4b4c4348 	blmi	1312600 <_Min_Stack_Size+0x1312400>
    18dc:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
    18e0:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    18e4:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
    18e8:	415f4343 	cmpmi	pc, r3, asr #6
    18ec:	50314250 	eorspl	r4, r1, r0, asr r2
    18f0:	70697265 	rsbvc	r7, r9, r5, ror #4
    18f4:	72700068 	rsbsvc	r0, r0, #104	; 0x68
    18f8:	00637365 	rsbeq	r7, r3, r5, ror #6
    18fc:	5f434352 	svcpl	0x00434352
    1900:	434f434d 	movtmi	r4, #62285	; 0xf34d
    1904:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1908:	43520067 	cmpmi	r2, #103	; 0x67
    190c:	65445f43 	strbvs	r5, [r4, #-3907]	; 0xfffff0bd
    1910:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1914:	43435200 	movtmi	r5, #12800	; 0x3200
    1918:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    191c:	726f4674 	rsbvc	r4, pc, #116, 12	; 0x7400000
    1920:	53455348 	movtpl	r5, #21320	; 0x5348
    1924:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    1928:	52007055 	andpl	r7, r0, #85	; 0x55
    192c:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
    1930:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
    1934:	756f534b 	strbvc	r5, [pc, #-843]!	; 15f1 <_Min_Stack_Size+0x13f1>
    1938:	00656372 	rsbeq	r6, r5, r2, ror r3
    193c:	5f434352 	svcpl	0x00434352
    1940:	31425041 	cmpcc	r2, r1, asr #32
    1944:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1948:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    194c:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1950:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1954:	505f4343 	subspl	r4, pc, r3, asr #6
    1958:	6f434c4c 	svcvs	0x00434c4c
    195c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1960:	72724500 	rsbsvc	r4, r2, #0, 10
    1964:	7453726f 	ldrbvc	r7, [r3], #-623	; 0xfffffd91
    1968:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    196c:	6f682f00 	svcvs	0x00682f00
    1970:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    1974:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    1978:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    197c:	54534153 	ldrbpl	r4, [r3], #-339	; 0xfffffead
    1980:	544f495f 	strbpl	r4, [pc], #-2399	; 1988 <_Min_Stack_Size+0x1788>
    1984:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1988:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    198c:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
    1990:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    1994:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1998:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    199c:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    19a0:	5200632e 	andpl	r6, r0, #-1207959552	; 0xb8000000
    19a4:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    19a8:	6d434953 	stclvs	9, cr4, [r3, #-332]	; 0xfffffeb4
    19ac:	43520064 	cmpmi	r2, #100	; 0x64
    19b0:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
    19b4:	53595374 	cmppl	r9, #116, 6	; 0xd0000001
    19b8:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    19bc:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    19c0:	43520065 	cmpmi	r2, #101	; 0x65
    19c4:	43505f43 	cmpmi	r0, #268	; 0x10c
    19c8:	43314b4c 	teqmi	r1, #76, 22	; 0x13000
    19cc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    19d0:	6d740067 	ldclvs	0, cr0, [r4, #-412]!	; 0xfffffe64
    19d4:	67657270 			; <UNDEFINED> instruction: 0x67657270
    19d8:	74696200 	strbtvc	r6, [r9], #-512	; 0xfffffe00
    19dc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    19e0:	73007375 	movwvc	r7, #885	; 0x375
    19e4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    19e8:	67657273 			; <UNDEFINED> instruction: 0x67657273
    19ec:	43435200 	movtmi	r5, #12800	; 0x3200
    19f0:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    19f4:	72655031 	rsbvc	r5, r5, #49	; 0x31
    19f8:	43687069 	cmnmi	r8, #105	; 0x69
    19fc:	6b636f6c 	blvs	18dd7b4 <_Min_Stack_Size+0x18dd5b4>
    1a00:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1a04:	5f434352 	svcpl	0x00434352
    1a08:	6b636142 	blvs	18d9f18 <_Min_Stack_Size+0x18d9d18>
    1a0c:	65527075 	ldrbvs	r7, [r2, #-117]	; 0xffffff8b
    1a10:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1a14:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1a18:	465f4343 	ldrbmi	r4, [pc], -r3, asr #6
    1a1c:	0047414c 	subeq	r4, r7, ip, asr #2
    1a20:	5f434352 	svcpl	0x00434352
    1a24:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    1a28:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1a2c:	43520065 	cmpmi	r2, #101	; 0x65
    1a30:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1a34:	4b4c4353 	blmi	1312788 <_Min_Stack_Size+0x1312588>
    1a38:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1a3c:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1a40:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    1a44:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    1a48:	74536761 	ldrbvc	r6, [r3], #-1889	; 0xfffff89f
    1a4c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1a50:	43435200 	movtmi	r5, #12800	; 0x3200
    1a54:	4253555f 	subsmi	r5, r3, #398458880	; 0x17c00000
    1a58:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    1a5c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1a60:	43520067 	cmpmi	r2, #103	; 0x67
    1a64:	53555f43 	cmppl	r5, #268	; 0x10c
    1a68:	4b4c4342 	blmi	1312778 <_Min_Stack_Size+0x1312578>
    1a6c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1a70:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    1a74:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    1a78:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1a7c:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1a80:	43435200 	movtmi	r5, #12800	; 0x3200
    1a84:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    1a88:	004b4c43 	subeq	r4, fp, r3, asr #24
    1a8c:	43434441 	movtmi	r4, #13377	; 0x3441
    1a90:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
    1a94:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    1a98:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1a9c:	43435200 	movtmi	r5, #12800	; 0x3200
    1aa0:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0xfffff7a1
    1aa4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1aa8:	53006769 	movwpl	r6, #1897	; 0x769
    1aac:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    1ab0:	72465f4b 	subvc	r5, r6, #300	; 0x12c
    1ab4:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    1ab8:	0079636e 	rsbseq	r6, r9, lr, ror #6
    1abc:	5f434352 	svcpl	0x00434352
    1ac0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1ac4:	5000736b 	andpl	r7, r0, fp, ror #6
    1ac8:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
    1acc:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
    1ad0:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    1ad4:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
    1ad8:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1adc:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    1ae0:	00676966 	rsbeq	r6, r7, r6, ror #18
    1ae4:	5f434352 	svcpl	0x00434352
    1ae8:	32425041 	subcc	r5, r2, #65	; 0x41
    1aec:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1af0:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    1af4:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    1af8:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1afc:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
    1b00:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
    1b04:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1b08:	00676966 	rsbeq	r6, r7, r6, ror #18
    1b0c:	5f434352 	svcpl	0x00434352
    1b10:	00455348 	subeq	r5, r5, r8, asr #6
    1b14:	5f434352 	svcpl	0x00434352
    1b18:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1b1c:	6f534b4c 	svcvs	0x00534b4c
    1b20:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1b24:	4c435000 	marmi	acc0, r5, r3
    1b28:	465f314b 	ldrbmi	r3, [pc], -fp, asr #2
    1b2c:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    1b30:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1b34:	43435200 	movtmi	r5, #12800	; 0x3200
    1b38:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
    1b3c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1b40:	41006769 	tstmi	r0, r9, ror #14
    1b44:	48414250 	stmdami	r1, {r4, r6, r9, lr}^
    1b48:	65725042 	ldrbvs	r5, [r2, #-66]!	; 0xffffffbe
    1b4c:	61546373 	cmpvs	r4, r3, ror r3
    1b50:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1b54:	5f434352 	svcpl	0x00434352
    1b58:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1b5c:	6b636f6c 	blvs	18dd914 <_Min_Stack_Size+0x18dd714>
    1b60:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0xfffff98d
    1b64:	43520071 	cmpmi	r2, #113	; 0x71
    1b68:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
    1b6c:	4b4c4343 	blmi	1312880 <_Min_Stack_Size+0x1312680>
    1b70:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1b74:	5f434352 	svcpl	0x00434352
    1b78:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1b7c:	6365536b 	cmnvs	r5, #-1409286143	; 0xac000001
    1b80:	74697275 	strbtvc	r7, [r9], #-629	; 0xfffffd8b
    1b84:	73795379 	cmnvc	r9, #-469762047	; 0xe4000001
    1b88:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
    1b8c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1b90:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1b94:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    1b98:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1b9c:	43520067 	cmpmi	r2, #103	; 0x67
    1ba0:	53485f43 	movtpl	r5, #36675	; 0x8f43
    1ba4:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
    1ba8:	43435200 	movtmi	r5, #12800	; 0x3200
    1bac:	4f434d5f 	svcmi	0x00434d5f
    1bb0:	43435200 	movtmi	r5, #12800	; 0x3200
    1bb4:	0054495f 	subseq	r4, r4, pc, asr r9
    1bb8:	5f434352 	svcpl	0x00434352
    1bbc:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
    1bc0:	53487473 	movtpl	r7, #33907	; 0x8473
    1bc4:	6c614349 	stclvs	3, cr4, [r1], #-292	; 0xfffffedc
    1bc8:	61726269 	cmnvs	r2, r9, ror #4
    1bcc:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1bd0:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1bd4:	43520065 	cmpmi	r2, #101	; 0x65
    1bd8:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1bdc:	72655042 	rsbvc	r5, r5, #66	; 0x42
    1be0:	00687069 	rsbeq	r7, r8, r9, rrx
    1be4:	5f434352 	svcpl	0x00434352
    1be8:	4b4c4350 	blmi	1312930 <_Min_Stack_Size+0x1312730>
    1bec:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    1bf0:	00676966 	rsbeq	r6, r7, r6, ror #18
    1bf4:	50434441 	subpl	r4, r3, r1, asr #8
    1bf8:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1bfc:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
    1c00:	50470065 	subpl	r0, r7, r5, rrx
    1c04:	545f4f49 	ldrbpl	r4, [pc], #-3913	; 1c0c <_Min_Stack_Size+0x1a0c>
    1c08:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1c0c:	70006665 	andvc	r6, r0, r5, ror #12
    1c10:	6f706e69 	svcvs	0x00706e69
    1c14:	50470073 	subpl	r0, r7, r3, ror r0
    1c18:	505f4f49 	subspl	r4, pc, r9, asr #30
    1c1c:	42006e69 	andmi	r6, r0, #1680	; 0x690
    1c20:	535f7469 	cmppl	pc, #1761607680	; 0x69000000
    1c24:	47005445 	strmi	r5, [r0, -r5, asr #8]
    1c28:	5f4f4950 	svcpl	0x004f4950
    1c2c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    1c30:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    1c34:	61447475 	hvcvs	18245	; 0x4745
    1c38:	47006174 	smlsdxmi	r0, r4, r1, r6
    1c3c:	4d4f4950 	stclmi	9, cr4, [pc, #-320]	; 1b04 <_Min_Stack_Size+0x1904>
    1c40:	5f65646f 	svcpl	0x0065646f
    1c44:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1c48:	00666544 	rsbeq	r6, r6, r4, asr #10
    1c4c:	4f495047 	svcmi	0x00495047
    1c50:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 1c58 <_Min_Stack_Size+0x1a58>
    1c54:	46415f65 	strbmi	r5, [r1], -r5, ror #30
    1c58:	0050505f 	subseq	r5, r0, pc, asr r0
    1c5c:	4f495047 	svcmi	0x00495047
    1c60:	6576455f 	ldrbvs	r4, [r6, #-1375]!	; 0xfffffaa1
    1c64:	754f746e 	strbvc	r7, [pc, #-1134]	; 17fe <_Min_Stack_Size+0x15fe>
    1c68:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    1c6c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1c70:	4f495047 	svcmi	0x00495047
    1c74:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1c78:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    1c7c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1c80:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
    1c84:	42006c61 	andmi	r6, r0, #24832	; 0x6100
    1c88:	525f7469 	subspl	r7, pc, #1761607680	; 0x69000000
    1c8c:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
    1c90:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1c94:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    1c98:	42657469 	rsbmi	r7, r5, #1761607680	; 0x69000000
    1c9c:	47007469 	strmi	r7, [r0, -r9, ror #8]
    1ca0:	5f4f4950 	svcpl	0x004f4950
    1ca4:	5f485445 	svcpl	0x00485445
    1ca8:	6964654d 	stmdbvs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
    1cac:	746e4961 	strbtvc	r4, [lr], #-2401	; 0xfffff69f
    1cb0:	61667265 	cmnvs	r6, r5, ror #4
    1cb4:	47006563 	strmi	r6, [r0, -r3, ror #10]
    1cb8:	5f4f4950 	svcpl	0x004f4950
    1cbc:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
    1cc0:	00737469 	rsbseq	r7, r3, r9, ror #8
    1cc4:	4f495047 	svcmi	0x00495047
    1cc8:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
    1ccc:	47006465 	strmi	r6, [r0, -r5, ror #8]
    1cd0:	5f4f4950 	svcpl	0x004f4950
    1cd4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1cd8:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    1cdc:	00524349 	subseq	r4, r2, r9, asr #6
    1ce0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1c2c <_Min_Stack_Size+0x1a2c>
    1ce4:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1ce8:	76737572 			; <UNDEFINED> instruction: 0x76737572
    1cec:	5344542f 	movtpl	r5, #17455	; 0x442f
    1cf0:	5f545341 	svcpl	0x00545341
    1cf4:	2f544f49 	svccs	0x00544f49
    1cf8:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1cfc:	65697261 	strbvs	r7, [r9, #-609]!	; 0xfffffd9f
    1d00:	72732f73 	rsbsvc	r2, r3, #460	; 0x1cc
    1d04:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    1d08:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1d0c:	5f783031 	svcpl	0x00783031
    1d10:	6f697067 	svcvs	0x00697067
    1d14:	7000632e 	andvc	r6, r0, lr, lsr #6
    1d18:	616d6e69 	cmnvs	sp, r9, ror #28
    1d1c:	47006b73 	smlsdxmi	r0, r3, fp, r6
    1d20:	5f4f4950 	svcpl	0x004f4950
    1d24:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    1d28:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1d2c:	47006563 	strmi	r6, [r0, -r3, ror #10]
    1d30:	5f4f4950 	svcpl	0x004f4950
    1d34:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    1d38:	47007469 	strmi	r7, [r0, -r9, ror #8]
    1d3c:	5f4f4950 	svcpl	0x004f4950
    1d40:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    1d44:	74754f74 	ldrbtvc	r4, [r5], #-3956	; 0xfffff08c
    1d48:	43747570 	cmnmi	r4, #112, 10	; 0x1c000000
    1d4c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1d50:	53420067 	movtpl	r0, #8295	; 0x2067
    1d54:	47005252 	smlsdmi	r0, r2, r2, r5
    1d58:	5f4f4950 	svcpl	0x004f4950
    1d5c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    1d60:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
    1d64:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    1d68:	74694261 	strbtvc	r4, [r9], #-609	; 0xfffffd9f
    1d6c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1d70:	70535f4f 	subsvc	r5, r3, pc, asr #30
    1d74:	5f646565 	svcpl	0x00646565
    1d78:	484d3031 	stmdami	sp, {r0, r4, r5, ip, sp}^
    1d7c:	5047007a 	subpl	r0, r7, sl, ror r0
    1d80:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 1c64 <_Min_Stack_Size+0x1a64>
    1d84:	5f65646f 	svcpl	0x0065646f
    1d88:	5f74754f 	svcpl	0x0074754f
    1d8c:	4700444f 	strmi	r4, [r0, -pc, asr #8]
    1d90:	5f4f4950 	svcpl	0x004f4950
    1d94:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    1d98:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0xfffff6b4
    1d9c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1da0:	47006769 	strmi	r6, [r0, -r9, ror #14]
    1da4:	5f4f4950 	svcpl	0x004f4950
    1da8:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
    1dac:	4d325f64 	ldcmi	15, cr5, [r2, #-400]!	; 0xfffffe70
    1db0:	47007a48 	strmi	r7, [r0, -r8, asr #20]
    1db4:	5f4f4950 	svcpl	0x004f4950
    1db8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1dbc:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1dc0:	00666544 	rsbeq	r6, r6, r4, asr #10
    1dc4:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    1dc8:	006c6156 	rsbeq	r6, ip, r6, asr r1
    1dcc:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    1dd0:	6d746e65 	ldclvs	14, cr6, [r4, #-404]!	; 0xfffffe6c
    1dd4:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1dd8:	4f495047 	svcmi	0x00495047
    1ddc:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    1de0:	616d6552 	cmnvs	sp, r2, asr r5
    1de4:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    1de8:	00676966 	rsbeq	r6, r7, r6, ror #18
    1dec:	524b434c 	subpl	r4, fp, #76, 6	; 0x30000001
    1df0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1df4:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1df8:	756f536e 	strbvc	r5, [pc, #-878]!	; 1a92 <_Min_Stack_Size+0x1892>
    1dfc:	00656372 	rsbeq	r6, r5, r2, ror r3
    1e00:	4f495047 	svcmi	0x00495047
    1e04:	6165525f 	cmnvs	r5, pc, asr r2
    1e08:	706e4964 	rsbvc	r4, lr, r4, ror #18
    1e0c:	61447475 	hvcvs	18245	; 0x4745
    1e10:	74006174 	strvc	r6, [r0], #-372	; 0xfffffe8c
    1e14:	616d706d 	cmnvs	sp, sp, rrx
    1e18:	47006b73 	smlsdxmi	r0, r3, fp, r6
    1e1c:	5f4f4950 	svcpl	0x004f4950
    1e20:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1e24:	4450495f 	ldrbmi	r4, [r0], #-2399	; 0xfffff6a1
    1e28:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1e2c:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1e30:	636f4c6e 	cmnvs	pc, #28160	; 0x6e00
    1e34:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    1e38:	00676966 	rsbeq	r6, r7, r6, ror #18
    1e3c:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    1e40:	70746e65 	rsbsvc	r6, r4, r5, ror #28
    1e44:	47006e69 	strmi	r6, [r0, -r9, ror #28]
    1e48:	5f4f4950 	svcpl	0x004f4950
    1e4c:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    1e50:	50470065 	subpl	r0, r7, r5, rrx
    1e54:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 1d38 <_Min_Stack_Size+0x1b38>
    1e58:	5f65646f 	svcpl	0x0065646f
    1e5c:	00555049 	subseq	r5, r5, r9, asr #32
    1e60:	31706d74 	cmncc	r0, r4, ror sp
    1e64:	50414d00 	subpl	r4, r1, r0, lsl #26
    1e68:	47003252 	smlsdmi	r0, r2, r2, r3
    1e6c:	5f4f4950 	svcpl	0x004f4950
    1e70:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1e74:	4e49415f 	mcrmi	1, 2, r4, cr9, cr15, {2}
    1e78:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1e7c:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    1e80:	0070616d 	rsbseq	r6, r0, sp, ror #2
    1e84:	4f495047 	svcmi	0x00495047
    1e88:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 1e90 <_Min_Stack_Size+0x1c90>
    1e8c:	46410065 	strbmi	r0, [r1], -r5, rrx
    1e90:	545f4f49 	ldrbpl	r4, [pc], #-3913	; 1e98 <_Min_Stack_Size+0x1c98>
    1e94:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1e98:	42006665 	andmi	r6, r0, #105906176	; 0x6500000
    1e9c:	63417469 	movtvs	r7, #5225	; 0x1469
    1ea0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1ea4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1ea8:	6570534f 	ldrbvs	r5, [r0, #-847]!	; 0xfffffcb1
    1eac:	545f6465 	ldrbpl	r6, [pc], #-1125	; 1eb4 <_Min_Stack_Size+0x1cb4>
    1eb0:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1eb4:	4d006665 	stcmi	6, cr6, [r0, #-404]	; 0xfffffe6c
    1eb8:	00525041 	subseq	r5, r2, r1, asr #32
    1ebc:	4f495047 	svcmi	0x00495047
    1ec0:	50470078 	subpl	r0, r7, r8, ror r0
    1ec4:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    1ec8:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    1ecc:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1ed0:	50470074 	subpl	r0, r7, r4, ror r0
    1ed4:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 1db8 <_Min_Stack_Size+0x1bb8>
    1ed8:	5f65646f 	svcpl	0x0065646f
    1edc:	5f74754f 	svcpl	0x0074754f
    1ee0:	45005050 	strmi	r5, [r0, #-80]	; 0xffffffb0
    1ee4:	00524356 	subseq	r4, r2, r6, asr r3
    1ee8:	4f495047 	svcmi	0x00495047
    1eec:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
    1ef0:	355f6465 	ldrbcc	r6, [pc, #-1125]	; 1a93 <_Min_Stack_Size+0x1893>
    1ef4:	7a484d30 	bvc	12153bc <_Min_Stack_Size+0x12151bc>
    1ef8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1efc:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    1f00:	42746573 	rsbsmi	r6, r4, #482344960	; 0x1cc00000
    1f04:	00737469 	rsbseq	r7, r3, r9, ror #8
    1f08:	4f495047 	svcmi	0x00495047
    1f0c:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 1f14 <_Min_Stack_Size+0x1d14>
    1f10:	4e495f65 	cdpmi	15, 4, cr5, cr9, cr5, {3}
    1f14:	4f4c465f 	svcmi	0x004c465f
    1f18:	4e495441 	cdpmi	4, 4, cr5, cr9, cr1, {2}
    1f1c:	50470047 	subpl	r0, r7, r7, asr #32
    1f20:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1f24:	4f646165 	svcmi	0x00646165
    1f28:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    1f2c:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
    1f30:	74694261 	strbtvc	r4, [r9], #-609	; 0xfffffd9f
    1f34:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1f38:	46415f4f 	strbmi	r5, [r1], -pc, asr #30
    1f3c:	65444f49 	strbvs	r4, [r4, #-3913]	; 0xfffff0b7
    1f40:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1f44:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1f48:	6f4d5f4f 	svcvs	0x004d5f4f
    1f4c:	415f6564 	cmpmi	pc, r4, ror #10
    1f50:	444f5f46 	strbmi	r5, [pc], #-3910	; 1f58 <_Min_Stack_Size+0x1d58>
    1f54:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1f58:	54455f4f 	strbpl	r5, [r5], #-3919	; 0xfffff0b1
    1f5c:	654d5f48 	strbvs	r5, [sp, #-3912]	; 0xfffff0b8
    1f60:	49616964 	stmdbmi	r1!, {r2, r5, r6, r8, fp, sp, lr}^
    1f64:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1f68:	65636166 	strbvs	r6, [r3, #-358]!	; 0xfffffe9a
    1f6c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1f70:	53006769 	movwpl	r6, #1897	; 0x769
    1f74:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    1f78:	445f5332 	ldrbmi	r5, [pc], #-818	; 1f80 <_Min_Stack_Size+0x1d80>
    1f7c:	6d43414d 	stfvse	f4, [r3, #-308]	; 0xfffffecc
    1f80:	50530064 	subspl	r0, r3, r4, rrx
    1f84:	50435f49 	subpl	r5, r3, r9, asr #30
    1f88:	53004148 	movwpl	r4, #328	; 0x148
    1f8c:	445f4950 	ldrbmi	r4, [pc], #-2384	; 1f94 <_Min_Stack_Size+0x1d94>
    1f90:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
    1f94:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1f98:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    1f9c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1fa0:	50435243 	subpl	r5, r3, r3, asr #4
    1fa4:	6e796c6f 	cdpvs	12, 7, cr6, cr9, cr15, {3}
    1fa8:	61696d6f 	cmnvs	r9, pc, ror #26
    1fac:	7469006c 	strbtvc	r0, [r9], #-108	; 0xffffff94
    1fb0:	00736f70 	rsbseq	r6, r3, r0, ror pc
    1fb4:	5f495053 	svcpl	0x00495053
    1fb8:	61746144 	cmnvs	r4, r4, asr #2
    1fbc:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    1fc0:	6f682f00 	svcvs	0x00682f00
    1fc4:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    1fc8:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    1fcc:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    1fd0:	54534153 	ldrbpl	r4, [r3], #-339	; 0xfffffead
    1fd4:	544f495f 	strbpl	r4, [pc], #-2399	; 1fdc <_Min_Stack_Size+0x1ddc>
    1fd8:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1fdc:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1fe0:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
    1fe4:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    1fe8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1fec:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1ff0:	6970735f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    1ff4:	5300632e 	movwpl	r6, #814	; 0x32e
    1ff8:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    1ffc:	465f5332 			; <UNDEFINED> instruction: 0x465f5332
    2000:	0047414c 	subeq	r4, r7, ip, asr #2
    2004:	5f533249 	svcpl	0x00533249
    2008:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    200c:	64726164 	ldrbtvs	r6, [r2], #-356	; 0xfffffe9c
    2010:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2014:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2018:	50530074 	subspl	r0, r3, r4, ror r0
    201c:	69465f49 	stmdbvs	r6, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    2020:	42747372 	rsbsmi	r7, r4, #-939524095	; 0xc8000001
    2024:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    2028:	435f5332 	cmpmi	pc, #-939524096	; 0xc8000000
    202c:	004c4f50 	subeq	r4, ip, r0, asr pc
    2030:	6b636170 	blvs	18da5f8 <_Min_Stack_Size+0x18da3f8>
    2034:	656c7465 	strbvs	r7, [ip, #-1125]!	; 0xfffffb9b
    2038:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    203c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2040:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    2044:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    2048:	74614464 	strbtvc	r4, [r1], #-1124	; 0xfffffb9c
    204c:	50530061 	subspl	r0, r3, r1, rrx
    2050:	534e5f49 	movtpl	r5, #61257	; 0xef49
    2054:	50530053 	subspl	r0, r3, r3, asr r0
    2058:	32495f49 	subcc	r5, r9, #292	; 0x124
    205c:	4d445f53 	stclmi	15, cr5, [r4, #-332]	; 0xfffffeb4
    2060:	71655241 	cmnvc	r5, r1, asr #4
    2064:	43585400 	cmpmi	r8, #0, 8
    2068:	00524352 	subseq	r4, r2, r2, asr r3
    206c:	5f495053 	svcpl	0x00495053
    2070:	64756142 	ldrbtvs	r6, [r5], #-322	; 0xfffffebe
    2074:	65746152 	ldrbvs	r6, [r4, #-338]!	; 0xfffffeae
    2078:	73657250 	cmnvc	r5, #80, 4
    207c:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    2080:	58520072 	ldmdapl	r2, {r1, r4, r5, r6}^
    2084:	52435243 	subpl	r5, r3, #805306372	; 0x30000004
    2088:	756f7300 	strbvc	r7, [pc, #-768]!	; 1d90 <_Min_Stack_Size+0x1b90>
    208c:	63656372 	cmnvs	r5, #-939524095	; 0xc8000001
    2090:	6b636f6c 	blvs	18dde48 <_Min_Stack_Size+0x18ddc48>
    2094:	53324900 	teqpl	r2, #0, 18
    2098:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    209c:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    20a0:	00746375 	rsbseq	r6, r4, r5, ror r3
    20a4:	5f533249 	svcpl	0x00533249
    20a8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    20ac:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    20b0:	00666544 	rsbeq	r6, r6, r4, asr #10
    20b4:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    20b8:	7473656c 	ldrbtvc	r6, [r3], #-1388	; 0xfffffa94
    20bc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    20c0:	53324900 	teqpl	r2, #0, 18
    20c4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    20c8:	32490074 	subcc	r0, r9, #116	; 0x74
    20cc:	74535f53 	ldrbvc	r5, [r3], #-3923	; 0xfffff0ad
    20d0:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    20d4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    20d8:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    20dc:	4469425f 	strbtmi	r4, [r9], #-607	; 0xfffffda1
    20e0:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
    20e4:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    20e8:	694c6c61 	stmdbvs	ip, {r0, r5, r6, sl, fp, sp, lr}^
    20ec:	6f43656e 	svcvs	0x0043656e
    20f0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    20f4:	73326900 	teqvc	r2, #0, 18
    20f8:	00766964 	rsbseq	r6, r6, r4, ror #18
    20fc:	5f495053 	svcpl	0x00495053
    2100:	5f533249 	svcpl	0x00533249
    2104:	6f435449 	svcvs	0x00435449
    2108:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    210c:	53324900 	teqpl	r2, #0, 18
    2110:	6475415f 	ldrbtvs	r4, [r5], #-351	; 0xfffffea1
    2114:	72466f69 	subvc	r6, r6, #420	; 0x1a4
    2118:	49007165 	stmdbmi	r0, {r0, r2, r5, r6, r8, ip, sp, lr}
    211c:	4d5f5332 	ldclmi	3, cr5, [pc, #-200]	; 205c <_Min_Stack_Size+0x1e5c>
    2120:	4f4b4c43 	svcmi	0x004b4c43
    2124:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    2128:	50530074 	subspl	r0, r3, r4, ror r0
    212c:	52435f49 	subpl	r5, r3, #292	; 0x124
    2130:	50530043 	subspl	r0, r3, r3, asr #32
    2134:	32495f49 	subcc	r5, r9, #292	; 0x124
    2138:	54495f53 	strbpl	r5, [r9], #-3923	; 0xfffff0ad
    213c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2140:	646d435f 	strbtvs	r4, [sp], #-863	; 0xfffffca1
    2144:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2148:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    214c:	00435243 	subeq	r5, r3, r3, asr #4
    2150:	5f495053 	svcpl	0x00495053
    2154:	61746144 	cmnvs	r4, r4, asr #2
    2158:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    215c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2160:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    2164:	445f5332 	ldrbmi	r5, [pc], #-818	; 216c <_Min_Stack_Size+0x1f6c>
    2168:	46617461 	strbtmi	r7, [r1], -r1, ror #8
    216c:	616d726f 	cmnvs	sp, pc, ror #4
    2170:	50530074 	subspl	r0, r3, r4, ror r0
    2174:	32495f49 	subcc	r5, r9, #292	; 0x124
    2178:	65445f53 	strbvs	r5, [r4, #-3923]	; 0xfffff0ad
    217c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    2180:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2184:	53534e5f 	cmppl	r3, #1520	; 0x5f0
    2188:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    218c:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    2190:	74666f53 	strbtvc	r6, [r6], #-3923	; 0xfffff0ad
    2194:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0xfffffe89
    2198:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    219c:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    21a0:	46435332 			; <UNDEFINED> instruction: 0x46435332
    21a4:	53005247 	movwpl	r5, #583	; 0x247
    21a8:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    21ac:	475f5332 	smmlarmi	pc, r2, r3, r5	; <UNPREDICTABLE>
    21b0:	54497465 	strbpl	r7, [r9], #-1125	; 0xfffffb9b
    21b4:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    21b8:	43007375 	movwmi	r7, #885	; 0x375
    21bc:	52504352 	subspl	r4, r0, #1207959553	; 0x48000001
    21c0:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    21c4:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 21cc <_Min_Stack_Size+0x1fcc>
    21c8:	50530065 	subspl	r0, r3, r5, rrx
    21cc:	79545f49 	ldmdbvc	r4, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    21d0:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    21d4:	50530066 	subspl	r0, r3, r6, rrx
    21d8:	32495f49 	subcc	r5, r9, #292	; 0x124
    21dc:	65525f53 	ldrbvs	r5, [r2, #-3923]	; 0xfffff0ad
    21e0:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    21e4:	74614465 	strbtvc	r4, [r1], #-1125	; 0xfffffb9b
    21e8:	50530061 	subspl	r0, r3, r1, rrx
    21ec:	534e5f49 	movtpl	r5, #61257	; 0xef49
    21f0:	746e4953 	strbtvc	r4, [lr], #-2387	; 0xfffff6ad
    21f4:	616e7265 	cmnvs	lr, r5, ror #4
    21f8:	666f536c 	strbtvs	r5, [pc], -ip, ror #6
    21fc:	50530074 	subspl	r0, r3, r4, ror r0
    2200:	32495f49 	subcc	r5, r9, #292	; 0x124
    2204:	6c435f53 	mcrrvs	15, 5, r5, r3, cr3
    2208:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    220c:	0067616c 	rsbeq	r6, r7, ip, ror #2
    2210:	5f533249 	svcpl	0x00533249
    2214:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2218:	5f495053 	svcpl	0x00495053
    221c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    2220:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    2224:	53007469 	movwpl	r7, #1129	; 0x469
    2228:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    222c:	435f5332 	cmpmi	pc, #-939524096	; 0xc8000000
    2230:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2234:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0xfffffbb7
    2238:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    223c:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
    2240:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2244:	4f53535f 	svcmi	0x0053535f
    2248:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    224c:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    2250:	53324900 	teqpl	r2, #0, 18
    2254:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 225c <_Min_Stack_Size+0x205c>
    2258:	50530065 	subspl	r0, r3, r5, rrx
    225c:	32495f49 	subcc	r5, r9, #292	; 0x124
    2260:	65475f53 	strbvs	r5, [r7, #-3923]	; 0xfffff0ad
    2264:	616c4674 	smcvs	50276	; 0xc464
    2268:	61745367 	cmnvs	r4, r7, ror #6
    226c:	00737574 	rsbseq	r7, r3, r4, ror r5
    2270:	78495053 	stmdavc	r9, {r0, r1, r4, r6, ip, lr}^
    2274:	73326900 	teqvc	r2, #0, 18
    2278:	0064646f 	rsbeq	r6, r4, pc, ror #8
    227c:	5f495053 	svcpl	0x00495053
    2280:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    2284:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xfffff28d
    2288:	00435243 	subeq	r5, r3, r3, asr #4
    228c:	5f495053 	svcpl	0x00495053
    2290:	4c4f5043 	mcrrmi	0, 4, r5, pc, cr3
    2294:	6d746900 	ldclvs	9, cr6, [r4, #-0]
    2298:	006b7361 	rsbeq	r7, fp, r1, ror #6
    229c:	5f495053 	svcpl	0x00495053
    22a0:	636c6143 	cmnvs	ip, #-1073741808	; 0xc0000010
    22a4:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
    22a8:	43524365 	cmpmi	r2, #-1811939327	; 0x94000001
    22ac:	53324900 	teqpl	r2, #0, 18
    22b0:	63005250 	movwvs	r5, #592	; 0x250
    22b4:	65726372 	ldrbvs	r6, [r2, #-882]!	; 0xfffffc8e
    22b8:	50530067 	subspl	r0, r3, r7, rrx
    22bc:	52435f49 	subpl	r5, r3, #292	; 0x124
    22c0:	6c6f5043 	stclvs	0, cr5, [pc], #-268	; 21bc <_Min_Stack_Size+0x1fbc>
    22c4:	6d6f6e79 	stclvs	14, cr6, [pc, #-484]!	; 20e8 <_Min_Stack_Size+0x1ee8>
    22c8:	006c6169 	rsbeq	r6, ip, r9, ror #2
    22cc:	5f495053 	svcpl	0x00495053
    22d0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    22d4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    22d8:	00666544 	rsbeq	r6, r6, r4, asr #10
    22dc:	5f495053 	svcpl	0x00495053
    22e0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    22e4:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    22e8:	54007463 	strpl	r7, [r0], #-1123	; 0xfffffb9d
    22ec:	4f5f4d49 	svcmi	0x005f4d49
    22f0:	646f4d50 	strbtvs	r4, [pc], #-3408	; 22f8 <_Min_Stack_Size+0x20f8>
    22f4:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    22f8:	6f465f4d 	svcvs	0x00465f4d
    22fc:	64656372 	strbtvs	r6, [r5], #-882	; 0xfffffc8e
    2300:	4332434f 	teqmi	r2, #1006632961	; 0x3c000001
    2304:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2308:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    230c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    2310:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2314:	50656e4f 	rsbpl	r6, r5, pc, asr #28
    2318:	65736c75 	ldrbvs	r6, [r3, #-3189]!	; 0xfffff38b
    231c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    2320:	6f682f00 	svcvs	0x00682f00
    2324:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    2328:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    232c:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    2330:	54534153 	ldrbpl	r4, [r3], #-339	; 0xfffffead
    2334:	544f495f 	strbpl	r4, [pc], #-2399	; 233c <_Min_Stack_Size+0x213c>
    2338:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    233c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2340:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
    2344:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    2348:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    234c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2350:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    2354:	5400632e 	strpl	r6, [r0], #-814	; 0xfffffcd2
    2358:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 2360 <_Min_Stack_Size+0x2160>
    235c:	6d43414d 	stfvse	f4, [r3, #-308]	; 0xfffffecc
    2360:	49440064 	stmdbmi	r4, {r2, r5, r6}^
    2364:	54005245 	strpl	r5, [r0], #-581	; 0xfffffdbb
    2368:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    236c:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    2370:	67697254 			; <UNDEFINED> instruction: 0x67697254
    2374:	53726567 	cmnpl	r2, #432013312	; 0x19c00000
    2378:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    237c:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2380:	52545f4d 	subspl	r5, r4, #308	; 0x134
    2384:	6f534f47 	svcvs	0x00534f47
    2388:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    238c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2390:	756f435f 	strbvc	r4, [pc, #-863]!	; 2039 <_Min_Stack_Size+0x1e39>
    2394:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2398:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    239c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    23a0:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    23a4:	4f646563 	svcmi	0x00646563
    23a8:	6f433443 	svcvs	0x00433443
    23ac:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    23b0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    23b4:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    23b8:	434f7261 	movtmi	r7, #62049	; 0xf261
    23bc:	66655231 			; <UNDEFINED> instruction: 0x66655231
    23c0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    23c4:	414c465f 	cmpmi	ip, pc, asr r6
    23c8:	49540047 	ldmdbmi	r4, {r0, r1, r2, r6}^
    23cc:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    23d0:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 2208 <_Min_Stack_Size+0x2008>
    23d4:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
    23d8:	49540031 	ldmdbmi	r4, {r0, r4, r5}^
    23dc:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    23e0:	6c6f5032 	stclvs	0, cr5, [pc], #-200	; 2320 <_Min_Stack_Size+0x2120>
    23e4:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    23e8:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    23ec:	70555f4d 	subsvc	r5, r5, sp, asr #30
    23f0:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    23f4:	61736944 	cmnvs	r3, r4, asr #18
    23f8:	43656c62 	cmnmi	r5, #25088	; 0x6200
    23fc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2400:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2404:	75505f4d 	ldrbvc	r5, [r0, #-3917]	; 0xfffff0b3
    2408:	0065736c 	rsbeq	r7, r5, ip, ror #6
    240c:	63706d74 	cmnvs	r0, #116, 26	; 0x1d00
    2410:	31726d63 	cmncc	r2, r3, ror #26
    2414:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    2418:	726d6363 	rsbvc	r6, sp, #-1946157055	; 0x8c000001
    241c:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
    2420:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    2424:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2428:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
    242c:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    2430:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    2434:	52434300 	subpl	r4, r3, #0, 6
    2438:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
    243c:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2440:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    2444:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    2448:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    244c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2450:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    2454:	6b636f6c 	blvs	18de20c <_Min_Stack_Size+0x18de00c>
    2458:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    245c:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2460:	4f5f4d49 	svcmi	0x005f4d49
    2464:	6f503243 	svcvs	0x00503243
    2468:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    246c:	6f437974 	svcvs	0x00437974
    2470:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2474:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2478:	5252415f 	subspl	r4, r2, #-1073741801	; 0xc0000017
    247c:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    2480:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    2484:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2488:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    248c:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2490:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    2494:	6f697463 	svcvs	0x00697463
    2498:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    249c:	6e455f4d 	cdpvs	15, 4, cr5, cr5, cr13, {2}
    24a0:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    24a4:	746e4972 	strbtvc	r4, [lr], #-2418	; 0xfffff68e
    24a8:	61667265 	cmnvs	r6, r5, ror #4
    24ac:	6f436563 	svcvs	0x00436563
    24b0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    24b4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    24b8:	32434f5f 	subcc	r4, r3, #380	; 0x17c
    24bc:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    24c0:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    24c4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    24c8:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    24cc:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xfffff0b3
    24d0:	6172656e 	cmnvs	r2, lr, ror #10
    24d4:	76456574 			; <UNDEFINED> instruction: 0x76456574
    24d8:	00746e65 	rsbseq	r6, r4, r5, ror #28
    24dc:	5f4d4954 	svcpl	0x004d4954
    24e0:	50314349 	eorspl	r4, r1, r9, asr #6
    24e4:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    24e8:	00797469 	rsbseq	r7, r9, r9, ror #8
    24ec:	5f4d4954 	svcpl	0x004d4954
    24f0:	6146434f 	cmpvs	r6, pc, asr #6
    24f4:	54007473 	strpl	r7, [r0], #-1139	; 0xfffffb8d
    24f8:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    24fc:	6e6e6168 	powvsez	f6, f6, #0.0
    2500:	43006c65 	movwmi	r6, #3173	; 0xc65
    2504:	31524d43 	cmpcc	r2, r3, asr #26
    2508:	4d434300 	stclmi	3, cr4, [r3, #-0]
    250c:	54003252 	strpl	r3, [r0], #-594	; 0xfffffdae
    2510:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2514:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    2518:	6f4d7265 	svcvs	0x004d7265
    251c:	6f436564 	svcvs	0x00436564
    2520:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2524:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2528:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    252c:	41646563 	cmnmi	r4, r3, ror #10
    2530:	6f697463 	svcvs	0x00697463
    2534:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    2538:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
    253c:	646d4378 	strbtvs	r4, [sp], #-888	; 0xfffffc88
    2540:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2544:	50434f5f 	subpl	r4, r3, pc, asr pc
    2548:	6f6c6572 	svcvs	0x006c6572
    254c:	52006461 	andpl	r6, r0, #1627389952	; 0x61000000
    2550:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2554:	31444556 	cmpcc	r4, r6, asr r5
    2558:	45520030 	ldrbmi	r0, [r2, #-48]	; 0xffffffd0
    255c:	56524553 			; <UNDEFINED> instruction: 0x56524553
    2560:	31314445 	teqcc	r1, r5, asr #8
    2564:	53455200 	movtpl	r5, #20992	; 0x5200
    2568:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    256c:	00323144 	eorseq	r3, r2, r4, asr #2
    2570:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    2574:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    2578:	52003331 	andpl	r3, r0, #-1006632960	; 0xc4000000
    257c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2580:	31444556 	cmpcc	r4, r6, asr r5
    2584:	45520034 	ldrbmi	r0, [r2, #-52]	; 0xffffffcc
    2588:	56524553 			; <UNDEFINED> instruction: 0x56524553
    258c:	35314445 	ldrcc	r4, [r1, #-1093]!	; 0xfffffbbb
    2590:	53455200 	movtpl	r5, #20992	; 0x5200
    2594:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    2598:	00363144 	eorseq	r3, r6, r4, asr #2
    259c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    25a0:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    25a4:	52003731 	andpl	r3, r0, #12845056	; 0xc40000
    25a8:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    25ac:	31444556 	cmpcc	r4, r6, asr r5
    25b0:	45520038 	ldrbmi	r0, [r2, #-56]	; 0xffffffc8
    25b4:	56524553 			; <UNDEFINED> instruction: 0x56524553
    25b8:	39314445 	ldmdbcc	r1!, {r0, r2, r6, sl, lr}
    25bc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    25c0:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xfffff0a1
    25c4:	4e747570 	mrcmi	5, 3, r7, cr4, cr0, {3}
    25c8:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    25cc:	6d740065 	ldclvs	0, cr0, [r4, #-404]!	; 0xfffffe6c
    25d0:	6d636370 	stclvs	3, cr6, [r3, #-448]!	; 0xfffffe40
    25d4:	43007872 	movwmi	r7, #2162	; 0x872
    25d8:	00524543 	subseq	r4, r2, r3, asr #10
    25dc:	5f4d4954 	svcpl	0x004d4954
    25e0:	00444b43 	subeq	r4, r4, r3, asr #22
    25e4:	5f4d4954 	svcpl	0x004d4954
    25e8:	41746553 	cmnmi	r4, r3, asr r5
    25ec:	726f7475 	rsbvc	r7, pc, #1962934272	; 0x75000000
    25f0:	616f6c65 	cmnvs	pc, r5, ror #24
    25f4:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
    25f8:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    25fc:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    2600:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    2604:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    2608:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    260c:	61437465 	cmpvs	r3, r5, ror #8
    2610:	72757470 	rsbsvc	r7, r5, #112, 8	; 0x70000000
    2614:	54003265 	strpl	r3, [r0], #-613	; 0xfffffd9b
    2618:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    261c:	61437465 	cmpvs	r3, r5, ror #8
    2620:	72757470 	rsbsvc	r7, r5, #112, 8	; 0x70000000
    2624:	54003365 	strpl	r3, [r0], #-869	; 0xfffffc9b
    2628:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    262c:	61437465 	cmpvs	r3, r5, ror #8
    2630:	72757470 	rsbsvc	r7, r5, #112, 8	; 0x70000000
    2634:	54003465 	strpl	r3, [r0], #-1125	; 0xfffffb9b
    2638:	4f5f4d49 	svcmi	0x005f4d49
    263c:	6e493343 	cdpvs	3, 4, cr3, cr9, cr3, {2}
    2640:	69007469 	stmdbvs	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    2644:	70706f63 	rsbsvc	r6, r0, r3, ror #30
    2648:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    264c:	6c6f7065 	stclvs	0, cr7, [pc], #-404	; 24c0 <_Min_Stack_Size+0x22c0>
    2650:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    2654:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    2658:	70555f4d 	subsvc	r5, r5, sp, asr #30
    265c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    2660:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2664:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
    2668:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    266c:	004e7843 	subeq	r7, lr, r3, asr #16
    2670:	5f4d4954 	svcpl	0x004d4954
    2674:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    2678:	43437463 	movtmi	r7, #13411	; 0x3463
    267c:	00414d44 	subeq	r4, r1, r4, asr #26
    2680:	5f4d4954 	svcpl	0x004d4954
    2684:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    2688:	00666544 	rsbeq	r6, r6, r4, asr #10
    268c:	5f4d4954 	svcpl	0x004d4954
    2690:	5031434f 	eorspl	r4, r1, pc, asr #6
    2694:	6f6c6572 	svcvs	0x006c6572
    2698:	6f436461 	svcvs	0x00436461
    269c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    26a0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    26a4:	414d445f 	cmpmi	sp, pc, asr r4
    26a8:	73727542 	cmnvc	r2, #276824064	; 0x10800000
    26ac:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    26b0:	00687467 	rsbeq	r7, r8, r7, ror #8
    26b4:	5f4d4954 	svcpl	0x004d4954
    26b8:	61656c43 	cmnvs	r5, r3, asr #24
    26bc:	616c4672 	smcvs	50274	; 0xc462
    26c0:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    26c4:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    26c8:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 2500 <_Min_Stack_Size+0x2300>
    26cc:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
    26d0:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
    26d4:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    26d8:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 2510 <_Min_Stack_Size+0x2310>
    26dc:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
    26e0:	49540033 	ldmdbmi	r4, {r0, r1, r4, r5}^
    26e4:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    26e8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    26ec:	004d4f43 	subeq	r4, sp, r3, asr #30
    26f0:	63706d74 	cmnvs	r0, #116, 26	; 0x1d00
    26f4:	00726563 	rsbseq	r6, r2, r3, ror #10
    26f8:	5f4d4954 	svcpl	0x004d4954
    26fc:	4e32434f 	cdpmi	3, 3, cr4, cr2, cr15, {2}
    2700:	616c6f50 	cmnvs	ip, r0, asr pc
    2704:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2708:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    270c:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2710:	435f3449 	cmpmi	pc, #1224736768	; 0x49000000
    2714:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2718:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    271c:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2720:	616c6f50 	cmnvs	ip, r0, asr pc
    2724:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2728:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    272c:	6f6c435f 	svcvs	0x006c435f
    2730:	69446b63 	stmdbvs	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    2734:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    2738:	54006e6f 	strpl	r6, [r0], #-3695	; 0xfffff191
    273c:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    2740:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
    2744:	61637365 	cmnvs	r3, r5, ror #6
    2748:	0072656c 	rsbseq	r6, r2, ip, ror #10
    274c:	5f4d4954 	svcpl	0x004d4954
    2750:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2754:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    2758:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    275c:	545f4d49 	ldrbpl	r4, [pc], #-3401	; 2764 <_Min_Stack_Size+0x2564>
    2760:	42656d69 	rsbmi	r6, r5, #6720	; 0x1a40
    2764:	53657361 	cmnpl	r5, #-2080374783	; 0x84000001
    2768:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    276c:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    2770:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2774:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xfffff0b3
    2778:	70614374 	rsbvc	r4, r1, r4, ror r3
    277c:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    2780:	49540031 	ldmdbmi	r4, {r0, r4, r5}^
    2784:	614d5f4d 	cmpvs	sp, sp, asr #30
    2788:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    278c:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    2790:	646f4d65 	strbtvs	r4, [pc], #-3429	; 2798 <_Min_Stack_Size+0x2598>
    2794:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2798:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    279c:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    27a0:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    27a4:	646f4d65 	strbtvs	r4, [pc], #-3429	; 27ac <_Min_Stack_Size+0x25ac>
    27a8:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    27ac:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    27b0:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    27b4:	7473614d 	ldrbtvc	r6, [r3], #-333	; 0xfffffeb3
    27b8:	6c537265 	lfmvs	f7, 2, [r3], {101}	; 0x65
    27bc:	4d657661 	stclmi	6, cr7, [r5, #-388]!	; 0xfffffe7c
    27c0:	0065646f 	rsbeq	r6, r5, pc, ror #8
    27c4:	5f4d4954 	svcpl	0x004d4954
    27c8:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    27cc:	5367616c 	cmnpl	r7, #108, 2
    27d0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    27d4:	49540073 	ldmdbmi	r4, {r0, r1, r4, r5, r6}^
    27d8:	44425f4d 	strbmi	r5, [r2], #-3917	; 0xfffff0b3
    27dc:	6e495254 	mcrvs	2, 2, r5, cr9, cr4, {2}
    27e0:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    27e4:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    27e8:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    27ec:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    27f0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    27f4:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    27f8:	53007463 	movwpl	r7, #1123	; 0x463
    27fc:	0052434d 	subseq	r4, r2, sp, asr #6
    2800:	5f4d4954 	svcpl	0x004d4954
    2804:	5253534f 	subspl	r5, r3, #1006632961	; 0x3c000001
    2808:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    280c:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2810:	5400784d 	strpl	r7, [r0], #-2125	; 0xfffff7b3
    2814:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 1ad3 <_Min_Stack_Size+0x18d3>
    2818:	646f636e 	strbtvs	r6, [pc], #-878	; 2820 <_Min_Stack_Size+0x2620>
    281c:	6f4d7265 	svcvs	0x004d7265
    2820:	54006564 	strpl	r6, [r0], #-1380	; 0xfffffa9c
    2824:	4f5f4d49 	svcmi	0x005f4d49
    2828:	6f503443 	svcvs	0x00503443
    282c:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2830:	6f437974 	svcvs	0x00437974
    2834:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2838:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    283c:	7475415f 	ldrbtvc	r4, [r5], #-351	; 0xfffffea1
    2840:	74616d6f 	strbtvc	r6, [r1], #-3439	; 0xfffff291
    2844:	754f6369 	strbvc	r6, [pc, #-873]	; 24e3 <_Min_Stack_Size+0x22e3>
    2848:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    284c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2850:	6c65535f 	stclvs	3, cr5, [r5], #-380	; 0xfffffe84
    2854:	4f746365 	svcmi	0x00746365
    2858:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    285c:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    2860:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    2864:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2868:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    286c:	50314349 	eorspl	r4, r1, r9, asr #6
    2870:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2874:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2878:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    287c:	4d57505f 	ldclmi	0, cr5, [r7, #-380]	; 0xfffffe84
    2880:	6e6f4349 	cdpvs	3, 6, cr4, cr15, cr9, {2}
    2884:	00676966 	rsbeq	r6, r7, r6, ror #18
    2888:	5f334954 	svcpl	0x00334954
    288c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2890:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2894:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 289c <_Min_Stack_Size+0x269c>
    2898:	6f53414d 	svcvs	0x0053414d
    289c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    28a0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    28a4:	53434f5f 	movtpl	r4, #16223	; 0x3f5f
    28a8:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    28ac:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    28b0:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    28b4:	53505f4d 	cmppl	r0, #308	; 0x134
    28b8:	6c655243 	sfmvs	f5, 2, [r5], #-268	; 0xfffffef4
    28bc:	4d64616f 	stfmie	f6, [r4, #-444]!	; 0xfffffe44
    28c0:	0065646f 	rsbeq	r6, r5, pc, ror #8
    28c4:	73706d74 	cmnvc	r0, #116, 26	; 0x1d00
    28c8:	0072636d 	rsbseq	r6, r2, sp, ror #6
    28cc:	5f4d4954 	svcpl	0x004d4954
    28d0:	54747845 	ldrbtpl	r7, [r4], #-2117	; 0xfffff7bb
    28d4:	6f504752 	svcvs	0x00504752
    28d8:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    28dc:	54007974 	strpl	r7, [r0], #-2420	; 0xfffff68c
    28e0:	425f4d49 	subsmi	r4, pc, #4672	; 0x1240
    28e4:	53525444 	cmppl	r2, #68, 8	; 0x44000000
    28e8:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    28ec:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    28f0:	6d740074 	ldclvs	0, cr0, [r4, #-464]!	; 0xfffffe30
    28f4:	31726370 	cmncc	r2, r0, ror r3
    28f8:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    28fc:	00327263 	eorseq	r7, r2, r3, ror #4
    2900:	5f4d4954 	svcpl	0x004d4954
    2904:	54747845 	ldrbtpl	r7, [r4], #-2117	; 0xfffff7bb
    2908:	72504752 	subsvc	r4, r0, #21495808	; 0x1480000
    290c:	61637365 	cmnvs	r3, r5, ror #6
    2910:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2914:	5f4d4954 	svcpl	0x004d4954
    2918:	61657242 	cmnvs	r5, r2, asr #4
    291c:	4954006b 	ldmdbmi	r4, {r0, r1, r3, r5, r6}^
    2920:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    2924:	4f726165 	svcmi	0x00726165
    2928:	65523343 	ldrbvs	r3, [r2, #-835]	; 0xfffffcbd
    292c:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    2930:	65445f4d 	strbvs	r5, [r4, #-3917]	; 0xfffff0b3
    2934:	69546461 	ldmdbvs	r4, {r0, r5, r6, sl, sp, lr}^
    2938:	5400656d 	strpl	r6, [r0], #-1389	; 0xfffffa93
    293c:	4f5f4d49 	svcmi	0x005f4d49
    2940:	6f503143 	svcvs	0x00503143
    2944:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2948:	6f437974 	svcvs	0x00437974
    294c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2950:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2954:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    2958:	4f646563 	svcmi	0x00646563
    295c:	6f433143 	svcvs	0x00433143
    2960:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2964:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2968:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    296c:	4f646563 	svcmi	0x00646563
    2970:	6f433343 	svcvs	0x00433343
    2974:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2978:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    297c:	5043495f 	subpl	r4, r3, pc, asr r9
    2980:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2984:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2988:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    298c:	7843435f 	stmdavc	r3, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2990:	646d434e 	strbtvs	r4, [sp], #-846	; 0xfffffcb2
    2994:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2998:	4e434f5f 	mcrmi	15, 2, r4, cr3, cr15, {2}
    299c:	656c6449 	strbvs	r6, [ip, #-1097]!	; 0xfffffbb7
    29a0:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    29a4:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    29a8:	4d445f4d 	stclmi	15, cr5, [r4, #-308]	; 0xfffffecc
    29ac:	73614241 	cmnvc	r1, #268435460	; 0x10000004
    29b0:	63690065 	cmnvs	r9, #101	; 0x65
    29b4:	6f70706f 	svcvs	0x0070706f
    29b8:	65746973 	ldrbvs	r6, [r4, #-2419]!	; 0xfffff68d
    29bc:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
    29c0:	6f697463 	svcvs	0x00697463
    29c4:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    29c8:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    29cc:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 2804 <_Min_Stack_Size+0x2604>
    29d0:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
    29d4:	49540034 	ldmdbmi	r4, {r2, r4, r5}^
    29d8:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xfffff0b3
    29dc:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    29e0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    29e4:	49540073 	ldmdbmi	r4, {r0, r1, r4, r5, r6}^
    29e8:	69545f4d 	ldmdbvs	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    29ec:	6142656d 	cmpvs	r2, sp, ror #10
    29f0:	6e496573 	mcrvs	5, 2, r6, cr9, cr3, {3}
    29f4:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    29f8:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    29fc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2a00:	414d445f 	cmpmi	sp, pc, asr r4
    2a04:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2a08:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2a0c:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2a10:	6c437465 	cfstrdvs	mvd7, [r3], {101}	; 0x65
    2a14:	446b636f 	strbtmi	r6, [fp], #-879	; 0xfffffc91
    2a18:	73697669 	cmnvc	r9, #110100480	; 0x6900000
    2a1c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2a20:	5f4d4954 	svcpl	0x004d4954
    2a24:	00784343 	rsbseq	r4, r8, r3, asr #6
    2a28:	5f4d4954 	svcpl	0x004d4954
    2a2c:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    2a30:	74537475 	ldrbvc	r7, [r3], #-1141	; 0xfffffb8b
    2a34:	00657461 	rsbeq	r7, r5, r1, ror #8
    2a38:	5f4d4954 	svcpl	0x004d4954
    2a3c:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    2a40:	756f5374 	strbvc	r5, [pc, #-884]!	; 26d4 <_Min_Stack_Size+0x24d4>
    2a44:	00656372 	rsbeq	r6, r5, r2, ror r3
    2a48:	5f4d4954 	svcpl	0x004d4954
    2a4c:	6f504349 	svcvs	0x00504349
    2a50:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2a54:	52007974 	andpl	r7, r0, #116, 18	; 0x1d0000
    2a58:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2a5c:	39444556 	stmdbcc	r4, {r1, r2, r4, r6, r8, sl, lr}^
    2a60:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2a64:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0xffffffa1
    2a68:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2a6c:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    2a70:	545f4d49 	ldrbpl	r4, [pc], #-3401	; 2a78 <_Min_Stack_Size+0x2878>
    2a74:	78457849 	stmdavc	r5, {r0, r3, r6, fp, ip, sp, lr}^
    2a78:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2a7c:	6c436c61 	mcrrvs	12, 6, r6, r3, cr1
    2a80:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    2a84:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2a88:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2a8c:	4f4c5f4d 	svcmi	0x004c5f4d
    2a90:	654c4b43 	strbvs	r4, [ip, #-2883]	; 0xfffff4bd
    2a94:	006c6576 	rsbeq	r6, ip, r6, ror r5
    2a98:	5f4d4954 	svcpl	0x004d4954
    2a9c:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    2aa0:	4f4d5750 	svcmi	0x004d5750
    2aa4:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    2aa8:	54007374 	strpl	r7, [r0], #-884	; 0xfffffc8c
    2aac:	425f4d49 	subsmi	r4, pc, #4672	; 0x1240
    2ab0:	43525444 	cmpmi	r2, #68, 8	; 0x44000000
    2ab4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2ab8:	44420067 	strbmi	r0, [r2], #-103	; 0xffffff99
    2abc:	54005254 	strpl	r5, [r0], #-596	; 0xfffffdac
    2ac0:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2ac4:	43497465 	movtmi	r7, #37989	; 0x9465
    2ac8:	65725032 	ldrbvs	r5, [r2, #-50]!	; 0xffffffce
    2acc:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2ad0:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    2ad4:	505f4d49 	subspl	r4, pc, r9, asr #26
    2ad8:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2adc:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2ae0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2ae4:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2ae8:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2aec:	45785254 	ldrbmi	r5, [r8, #-596]!	; 0xfffffdac
    2af0:	72657478 	rsbvc	r7, r5, #120, 8	; 0x78000000
    2af4:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    2af8:	6b636f6c 	blvs	18de8b0 <_Min_Stack_Size+0x18de6b0>
    2afc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2b00:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2b04:	4f5f4d49 	svcmi	0x005f4d49
    2b08:	504e3343 	subpl	r3, lr, r3, asr #6
    2b0c:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2b10:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    2b14:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2b18:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2b1c:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2b20:	74534953 	ldrbvc	r4, [r3], #-2387	; 0xfffff6ad
    2b24:	00657461 	rsbeq	r7, r5, r1, ror #8
    2b28:	5f4d4954 	svcpl	0x004d4954
    2b2c:	54005449 	strpl	r5, [r0], #-1097	; 0xfffffbb7
    2b30:	545f4d49 	ldrbpl	r4, [pc], #-3401	; 2b38 <_Min_Stack_Size+0x2938>
    2b34:	42656d69 	rsbmi	r6, r5, #6720	; 0x1a40
    2b38:	49657361 	stmdbmi	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    2b3c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2b40:	5f4d4954 	svcpl	0x004d4954
    2b44:	45784954 	ldrbmi	r4, [r8, #-2388]!	; 0xfffff6ac
    2b48:	72657478 	rsbvc	r7, r5, #120, 8	; 0x78000000
    2b4c:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    2b50:	6f534b4c 	svcvs	0x00534b4c
    2b54:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2b58:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2b5c:	5444425f 	strbpl	r4, [r4], #-607	; 0xfffffda1
    2b60:	696e4952 	stmdbvs	lr!, {r1, r4, r6, r8, fp, lr}^
    2b64:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    2b68:	00746375 	rsbseq	r6, r4, r5, ror r3
    2b6c:	5f324954 	svcpl	0x00324954
    2b70:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2b74:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2b78:	4f5f4d49 	svcmi	0x005f4d49
    2b7c:	61463243 	cmpvs	r6, r3, asr #4
    2b80:	6f437473 	svcvs	0x00437473
    2b84:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2b88:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2b8c:	34434f5f 	strbcc	r4, [r3], #-3935	; 0xfffff0a1
    2b90:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
    2b94:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2b98:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2b9c:	4f5f4d49 	svcmi	0x005f4d49
    2ba0:	6f504e43 	svcvs	0x00504e43
    2ba4:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2ba8:	54007974 	strpl	r7, [r0], #-2420	; 0xfffff68c
    2bac:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 1e6b <_Min_Stack_Size+0x1c6b>
    2bb0:	6c435254 	sfmvs	f5, 2, [r3], {84}	; 0x54
    2bb4:	4d6b636f 	stclmi	3, cr6, [fp, #-444]!	; 0xfffffe44
    2bb8:	3265646f 	rsbcc	r6, r5, #1862270976	; 0x6f000000
    2bbc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2bc0:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2bc4:	435f3149 	cmpmi	pc, #1073741842	; 0x40000012
    2bc8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2bcc:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2bd0:	6d435f4d 	stclvs	15, cr5, [r3, #-308]	; 0xfffffecc
    2bd4:	4d440064 	stclmi	0, cr0, [r4, #-400]	; 0xfffffe70
    2bd8:	54005241 	strpl	r5, [r0], #-577	; 0xfffffdbf
    2bdc:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2be0:	43497465 	movtmi	r7, #37989	; 0x9465
    2be4:	65725033 	ldrbvs	r5, [r2, #-51]!	; 0xffffffcd
    2be8:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2bec:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    2bf0:	4f5f4d49 	svcmi	0x005f4d49
    2bf4:	6e493243 	cdpvs	2, 4, cr3, cr9, cr3, {2}
    2bf8:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    2bfc:	505f4d49 	subspl	r4, pc, r9, asr #26
    2c00:	6f697265 	svcvs	0x00697265
    2c04:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
    2c08:	69545f4d 	ldmdbvs	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    2c0c:	6142656d 	cmpvs	r2, sp, ror #10
    2c10:	6e496573 	mcrvs	5, 2, r6, cr9, cr3, {3}
    2c14:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2c18:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    2c1c:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    2c20:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    2c24:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    2c28:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    2c2c:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    2c30:	00746942 	rsbseq	r6, r4, r2, asr #18
    2c34:	5f4d4954 	svcpl	0x004d4954
    2c38:	6e494349 	cdpvs	3, 4, cr4, cr9, cr9, {2}
    2c3c:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2c40:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    2c44:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    2c48:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2c4c:	696e4934 	stmdbvs	lr!, {r2, r4, r5, r8, fp, lr}^
    2c50:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2c54:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2c58:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    2c5c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2c60:	6c65535f 	stclvs	3, cr5, [r5], #-380	; 0xfffffe84
    2c64:	4f746365 	svcmi	0x00746365
    2c68:	004d7843 	subeq	r7, sp, r3, asr #16
    2c6c:	5f4d4954 	svcpl	0x004d4954
    2c70:	61647055 	qdsubvs	r7, r5, r4
    2c74:	65526574 	ldrbvs	r6, [r2, #-1396]	; 0xfffffa8c
    2c78:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    2c7c:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    2c80:	00676966 	rsbeq	r6, r7, r6, ror #18
    2c84:	5f4d4954 	svcpl	0x004d4954
    2c88:	5034434f 	eorspl	r4, r4, pc, asr #6
    2c8c:	6f6c6572 	svcvs	0x006c6572
    2c90:	6f436461 	svcvs	0x00436461
    2c94:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2c98:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2c9c:	616c535f 	cmnvs	ip, pc, asr r3
    2ca0:	6f4d6576 	svcvs	0x004d6576
    2ca4:	54006564 	strpl	r6, [r0], #-1380	; 0xfffffa9c
    2ca8:	4f5f4d49 	svcmi	0x005f4d49
    2cac:	646f4d43 	strbtvs	r4, [pc], #-3395	; 2cb4 <_Min_Stack_Size+0x2ab4>
    2cb0:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2cb4:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    2cb8:	4f726165 	svcmi	0x00726165
    2cbc:	65523443 	ldrbvs	r3, [r2, #-1091]	; 0xfffffbbd
    2cc0:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    2cc4:	72425f4d 	subvc	r5, r2, #308	; 0x134
    2cc8:	506b6165 	rsbpl	r6, fp, r5, ror #2
    2ccc:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2cd0:	00797469 	rsbseq	r7, r9, r9, ror #8
    2cd4:	5f4d4954 	svcpl	0x004d4954
    2cd8:	4e31434f 	cdpmi	3, 3, cr4, cr1, cr15, {2}
    2cdc:	616c6f50 	cmnvs	ip, r0, asr pc
    2ce0:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2ce4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2ce8:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2cec:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2cf0:	65725043 	ldrbvs	r5, [r2, #-67]!	; 0xffffffbd
    2cf4:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    2cf8:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
    2cfc:	006c6f72 	rsbeq	r6, ip, r2, ror pc
    2d00:	31524343 	cmpcc	r2, r3, asr #6
    2d04:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2d08:	5254455f 	subspl	r4, r4, #398458880	; 0x17c00000
    2d0c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2d10:	646f4d6b 	strbtvs	r4, [pc], #-3435	; 2d18 <_Min_Stack_Size+0x2b18>
    2d14:	6f433165 	svcvs	0x00433165
    2d18:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2d1c:	52434300 	subpl	r4, r3, #0, 6
    2d20:	43430033 	movtmi	r0, #12339	; 0x3033
    2d24:	54003452 	strpl	r3, [r0], #-1106	; 0xfffffbae
    2d28:	4f5f4d49 	svcmi	0x005f4d49
    2d2c:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
    2d30:	70795474 	rsbsvc	r5, r9, r4, ror r4
    2d34:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    2d38:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2d3c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2d40:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    2d44:	00726574 	rsbseq	r6, r2, r4, ror r5
    2d48:	6e657469 	cdpvs	4, 6, cr7, cr5, cr9, {3}
    2d4c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2d50:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2d54:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    2d58:	616c6f50 	cmnvs	ip, r0, asr pc
    2d5c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2d60:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2d64:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2d68:	4f5f4d49 	svcmi	0x005f4d49
    2d6c:	6e493143 	dvfvsem	f3, f1, f3
    2d70:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    2d74:	525f4d49 	subspl	r4, pc, #4672	; 0x1240
    2d78:	74657065 	strbtvc	r7, [r5], #-101	; 0xffffff9b
    2d7c:	6f697469 	svcvs	0x00697469
    2d80:	756f436e 	strbvc	r4, [pc, #-878]!	; 2a1a <_Min_Stack_Size+0x281a>
    2d84:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2d88:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2d8c:	6c65535f 	stclvs	3, cr5, [r5], #-380	; 0xfffffe84
    2d90:	48746365 	ldmdami	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2d94:	536c6c61 	cmnpl	ip, #24832	; 0x6100
    2d98:	6f736e65 	svcvs	0x00736e65
    2d9c:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    2da0:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2da4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    2da8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    2dac:	54007463 	strpl	r7, [r0], #-1123	; 0xfffffb9d
    2db0:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2db4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2db8:	5232434f 	eorspl	r4, r2, #1006632961	; 0x3c000001
    2dbc:	45006665 	strmi	r6, [r0, #-1637]	; 0xfffff99b
    2dc0:	52547478 	subspl	r7, r4, #120, 8	; 0x78000000
    2dc4:	6c694647 	stclvs	6, cr4, [r9], #-284	; 0xfffffee4
    2dc8:	00726574 	rsbseq	r6, r2, r4, ror r5
    2dcc:	5f4d4954 	svcpl	0x004d4954
    2dd0:	6f435449 	svcvs	0x00435449
    2dd4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2dd8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2ddc:	49434f5f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
    2de0:	53656c64 	cmnpl	r5, #100, 24	; 0x6400
    2de4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    2de8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2dec:	43434f5f 	movtmi	r4, #16223	; 0x3f5f
    2df0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2df4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2df8:	5043495f 	subpl	r4, r3, pc, asr r9
    2dfc:	54004353 	strpl	r4, [r0], #-851	; 0xfffffcad
    2e00:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 20bf <_Min_Stack_Size+0x1ebf>
    2e04:	6f435254 	svcvs	0x00435254
    2e08:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2e0c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2e10:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2e14:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2e18:	5f4d4954 	svcpl	0x004d4954
    2e1c:	4633434f 	ldrtmi	r4, [r3], -pc, asr #6
    2e20:	43747361 	cmnmi	r4, #-2080374783	; 0x84000001
    2e24:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2e28:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2e2c:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2e30:	65725033 	ldrbvs	r5, [r2, #-51]!	; 0xffffffcd
    2e34:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    2e38:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2e3c:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2e40:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2e44:	43497465 	movtmi	r7, #37989	; 0x9465
    2e48:	65725034 	ldrbvs	r5, [r2, #-52]!	; 0xffffffcc
    2e4c:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2e50:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    2e54:	4f5f4d49 	svcmi	0x005f4d49
    2e58:	61463143 	cmpvs	r6, r3, asr #2
    2e5c:	6f437473 	svcvs	0x00437473
    2e60:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2e64:	43324900 	teqmi	r2, #0, 18
    2e68:	6165525f 	cmnvs	r5, pc, asr r2
    2e6c:	67655264 	strbvs	r5, [r5, -r4, ror #4]!
    2e70:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
    2e74:	32490072 	subcc	r0, r9, #114	; 0x72
    2e78:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
    2e7c:	616c4674 	smcvs	50276	; 0xc464
    2e80:	61745367 	cmnvs	r4, r7, ror #6
    2e84:	00737574 	rsbseq	r7, r3, r4, ror r5
    2e88:	5f433249 	svcpl	0x00433249
    2e8c:	636c6143 	cmnvs	ip, #-1073741808	; 0xc0000010
    2e90:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
    2e94:	43455065 	movtmi	r5, #20581	; 0x5065
    2e98:	43324900 	teqmi	r2, #0, 18
    2e9c:	666f535f 			; <UNDEFINED> instruction: 0x666f535f
    2ea0:	72617774 	rsbvc	r7, r1, #116, 14	; 0x1d00000
    2ea4:	73655265 	cmnvc	r5, #1342177286	; 0x50000006
    2ea8:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    2eac:	32490064 	subcc	r0, r9, #100	; 0x64
    2eb0:	54495f43 	strbpl	r5, [r9], #-3907	; 0xfffff0bd
    2eb4:	63326900 	teqvs	r2, #0, 18
    2eb8:	73616278 	cmnvc	r1, #120, 4	; 0x80000007
    2ebc:	616c0065 	cmnvs	ip, r5, rrx
    2ec0:	76657473 			; <UNDEFINED> instruction: 0x76657473
    2ec4:	00746e65 	rsbseq	r6, r4, r5, ror #28
    2ec8:	5f433249 	svcpl	0x00433249
    2ecc:	6e6b6341 	cdpvs	3, 6, cr6, cr11, cr1, {2}
    2ed0:	656c776f 	strbvs	r7, [ip, #-1903]!	; 0xfffff891
    2ed4:	64656764 	strbtvs	r6, [r5], #-1892	; 0xfffff89c
    2ed8:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    2edc:	00737365 	rsbseq	r7, r3, r5, ror #6
    2ee0:	5f433249 	svcpl	0x00433249
    2ee4:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
    2ee8:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
    2eec:	504f5453 	subpl	r5, pc, r3, asr r4	; <UNPREDICTABLE>
    2ef0:	43324900 	teqmi	r2, #0, 18
    2ef4:	646d435f 	strbtvs	r4, [sp], #-863	; 0xfffffca1
    2ef8:	43324900 	teqmi	r2, #0, 18
    2efc:	6172545f 	cmnvs	r2, pc, asr r4
    2f00:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    2f04:	43455074 	movtmi	r5, #20596	; 0x5074
    2f08:	43324900 	teqmi	r2, #0, 18
    2f0c:	63720078 	cmnvs	r2, #120	; 0x78
    2f10:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
    2f14:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    2f18:	43324900 	teqmi	r2, #0, 18
    2f1c:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    2f20:	54497261 	strbpl	r7, [r9], #-609	; 0xfffffd9f
    2f24:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
    2f28:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    2f2c:	2f007469 	svccs	0x00007469
    2f30:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    2f34:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    2f38:	2f767375 	svccs	0x00767375
    2f3c:	41534454 	cmpmi	r3, r4, asr r4
    2f40:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2f44:	4c2f544f 	cfstrsmi	mvf5, [pc], #-316	; 2e10 <_Min_Stack_Size+0x2c10>
    2f48:	61726269 	cmnvs	r2, r9, ror #4
    2f4c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    2f50:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    2f54:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    2f58:	31663233 	cmncc	r6, r3, lsr r2
    2f5c:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    2f60:	632e6332 			; <UNDEFINED> instruction: 0x632e6332
    2f64:	43324900 	teqmi	r2, #0, 18
    2f68:	414c465f 	cmpmi	ip, pc, asr r6
    2f6c:	32490047 	subcc	r0, r9, #71	; 0x47
    2f70:	414e5f43 	cmpmi	lr, r3, asr #30
    2f74:	6f504b43 	svcvs	0x00504b43
    2f78:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    2f7c:	49006e6f 	stmdbmi	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    2f80:	495f4332 	ldmdbmi	pc, {r1, r4, r5, r8, r9, lr}^	; <UNPREDICTABLE>
    2f84:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2f88:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2f8c:	6c660074 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30
    2f90:	00316761 	eorseq	r6, r1, r1, ror #14
    2f94:	5f433249 	svcpl	0x00433249
    2f98:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    2f9c:	61745354 	cmnvs	r4, r4, asr r3
    2fa0:	00737574 	rsbseq	r7, r3, r4, ror r5
    2fa4:	5f433249 	svcpl	0x00433249
    2fa8:	43505241 	cmpmi	r0, #268435460	; 0x10000004
    2fac:	7000646d 	andvc	r6, r0, sp, ror #8
    2fb0:	316b6c63 	cmncc	fp, r3, ror #24
    2fb4:	43324900 	teqmi	r2, #0, 18
    2fb8:	414d445f 	cmpmi	sp, pc, asr r4
    2fbc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2fc0:	5f433249 	svcpl	0x00433249
    2fc4:	4c414d44 	mcrrmi	13, 4, r4, r1, cr4
    2fc8:	54747361 	ldrbtpl	r7, [r4], #-865	; 0xfffffc9f
    2fcc:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    2fd0:	43726566 	cmnmi	r2, #427819008	; 0x19800000
    2fd4:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    2fd8:	475f4332 	smmlarmi	pc, r2, r3, r4	; <UNPREDICTABLE>
    2fdc:	45507465 	ldrbmi	r7, [r0, #-1125]	; 0xfffffb9b
    2fe0:	32490043 	subcc	r0, r9, #67	; 0x43
    2fe4:	75445f43 	strbvc	r5, [r4, #-3907]	; 0xfffff0bd
    2fe8:	64416c61 	strbvs	r6, [r1], #-3169	; 0xfffff39f
    2fec:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    2ff0:	646d4373 	strbtvs	r4, [sp], #-883	; 0xfffffc8d
    2ff4:	43324900 	teqmi	r2, #0, 18
    2ff8:	6e65475f 	mcrvs	7, 3, r4, cr5, cr15, {2}
    2ffc:	6c617265 	sfmvs	f7, 2, [r1], #-404	; 0xfffffe6c
    3000:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
    3004:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3008:	5f433249 	svcpl	0x00433249
    300c:	4b43414e 	blmi	10d354c <_Min_Stack_Size+0x10d334c>
    3010:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    3014:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    3018:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    301c:	66006769 	strvs	r6, [r0], -r9, ror #14
    3020:	7067616c 	rsbvc	r6, r7, ip, ror #2
    3024:	4900736f 	stmdbmi	r0, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
    3028:	4d5f4332 	ldclmi	3, cr4, [pc, #-200]	; 2f68 <_Min_Stack_Size+0x2d68>
    302c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    3030:	72633269 	rsbvc	r3, r3, #-1879048186	; 0x90000006
    3034:	49006765 	stmdbmi	r0, {r0, r2, r5, r6, r8, r9, sl, sp, lr}
    3038:	525f4332 	subspl	r4, pc, #-939524096	; 0xc8000000
    303c:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    3040:	61446576 	hvcvs	18006	; 0x4656
    3044:	49006174 	stmdbmi	r0, {r2, r4, r5, r6, r8, sp, lr}
    3048:	465f4332 			; <UNDEFINED> instruction: 0x465f4332
    304c:	4d747361 	ldclmi	3, cr7, [r4, #-388]!	; 0xfffffe7c
    3050:	4465646f 	strbtmi	r6, [r5], #-1135	; 0xfffffb91
    3054:	43797475 	cmnmi	r9, #1962934272	; 0x75000000
    3058:	656c6379 	strbvs	r6, [ip, #-889]!	; 0xfffffc87
    305c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3060:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    3064:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    3068:	7375424d 	cmnvc	r5, #-805306364	; 0xd0000004
    306c:	72656c41 	rsbvc	r6, r5, #16640	; 0x4100
    3070:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    3074:	00676966 	rsbeq	r6, r7, r6, ror #18
    3078:	5f433249 	svcpl	0x00433249
    307c:	6f435449 	svcvs	0x00435449
    3080:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3084:	43324900 	teqmi	r2, #0, 18
    3088:	4556455f 	ldrbmi	r4, [r6, #-1375]	; 0xfffffaa1
    308c:	4900544e 	stmdbmi	r0, {r1, r2, r3, r6, sl, ip, lr}
    3090:	415f4332 	cmpmi	pc, r2, lsr r3	; <UNPREDICTABLE>
    3094:	6f6e6b63 	svcvs	0x006e6b63
    3098:	64656c77 	strbtvs	r6, [r5], #-3191	; 0xfffff389
    309c:	6f436567 	svcvs	0x00436567
    30a0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    30a4:	616c6600 	cmnvs	ip, r0, lsl #12
    30a8:	49003267 	stmdbmi	r0, {r0, r1, r2, r5, r6, r9, ip, sp}
    30ac:	435f4332 	cmpmi	pc, #-939524096	; 0xc8000000
    30b0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    30b4:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    30b8:	43324900 	teqmi	r2, #0, 18
    30bc:	6765525f 			; <UNDEFINED> instruction: 0x6765525f
    30c0:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
    30c4:	32490072 	subcc	r0, r9, #114	; 0x72
    30c8:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
    30cc:	6172656e 	cmnvs	r2, lr, ror #10
    30d0:	54536574 	ldrbpl	r6, [r3], #-1396	; 0xfffffa8c
    30d4:	00545241 	subseq	r5, r4, r1, asr #4
    30d8:	5f433249 	svcpl	0x00433249
    30dc:	416e774f 	cmnmi	lr, pc, asr #14
    30e0:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    30e4:	00317373 	eorseq	r7, r1, r3, ror r3
    30e8:	5f433249 	svcpl	0x00433249
    30ec:	006b6341 	rsbeq	r6, fp, r1, asr #6
    30f0:	5f433249 	svcpl	0x00433249
    30f4:	50434550 	subpl	r4, r3, r0, asr r5
    30f8:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    30fc:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    3100:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3104:	72660067 	rsbvc	r0, r6, #103	; 0x67
    3108:	61727165 	cmnvs	r2, r5, ror #2
    310c:	0065676e 	rsbeq	r6, r5, lr, ror #14
    3110:	5f433249 	svcpl	0x00433249
    3114:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    3118:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    311c:	00666544 	rsbeq	r6, r6, r4, asr #10
    3120:	5f433249 	svcpl	0x00433249
    3124:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    3128:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    312c:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    3130:	445f4332 	ldrbmi	r4, [pc], #-818	; 3138 <_Min_Stack_Size+0x2f38>
    3134:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    3138:	32490074 	subcc	r0, r9, #116	; 0x74
    313c:	774f5f43 	strbvc	r5, [pc, -r3, asr #30]
    3140:	6464416e 	strbtvs	r4, [r4], #-366	; 0xfffffe92
    3144:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    3148:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    314c:	00676966 	rsbeq	r6, r7, r6, ror #18
    3150:	5f433249 	svcpl	0x00433249
    3154:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
    3158:	43686374 	cmnmi	r8, #116, 6	; 0xd0000001
    315c:	6b636f6c 	blvs	18def14 <_Min_Stack_Size+0x18ded14>
    3160:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3164:	5f433249 	svcpl	0x00433249
    3168:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    316c:	6570536b 	ldrbvs	r5, [r0, #-875]!	; 0xfffffc95
    3170:	49006465 	stmdbmi	r0, {r0, r2, r5, r6, sl, sp, lr}
    3174:	505f4332 	subspl	r4, pc, r2, lsr r3	; <UNPREDICTABLE>
    3178:	6f504345 	svcvs	0x00504345
    317c:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    3180:	49006e6f 	stmdbmi	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    3184:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    3188:	7375424d 	cmnvc	r5, #-805306364	; 0xd0000004
    318c:	72656c41 	rsbvc	r6, r5, #16640	; 0x4100
    3190:	32490074 	subcc	r0, r9, #116	; 0x74
    3194:	75445f43 	strbvc	r5, [r4, #-3907]	; 0xfffff0bd
    3198:	79437974 	stmdbvc	r3, {r2, r4, r5, r6, r8, fp, ip, sp, lr}^
    319c:	00656c63 	rsbeq	r6, r5, r3, ror #24
    31a0:	5f433249 	svcpl	0x00433249
    31a4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    31a8:	43324900 	teqmi	r2, #0, 18
    31ac:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    31b0:	74614464 	strbtvc	r4, [r1], #-1124	; 0xfffffb9c
    31b4:	32490061 	subcc	r0, r9, #97	; 0x61
    31b8:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xfffff0bd
    31bc:	6237646e 	eorsvs	r6, r7, #1845493760	; 0x6e000000
    31c0:	64417469 	strbvs	r7, [r1], #-1129	; 0xfffffb97
    31c4:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    31c8:	32490073 	subcc	r0, r9, #115	; 0x73
    31cc:	68435f43 	stmdavs	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    31d0:	456b6365 	strbmi	r6, [fp, #-869]!	; 0xfffffc9b
    31d4:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
    31d8:	43324900 	teqmi	r2, #0, 18
    31dc:	7269445f 	rsbvc	r4, r9, #1593835520	; 0x5f000000
    31e0:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    31e4:	49006e6f 	stmdbmi	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    31e8:	475f4332 	smmlarmi	pc, r2, r3, r4	; <UNPREDICTABLE>
    31ec:	614c7465 	cmpvs	ip, r5, ror #8
    31f0:	76457473 			; <UNDEFINED> instruction: 0x76457473
    31f4:	00746e65 	rsbseq	r6, r4, r5, ror #28
    31f8:	47445749 	strbmi	r5, [r4, -r9, asr #14]
    31fc:	616e455f 	cmnvs	lr, pc, asr r5
    3200:	00656c62 	rsbeq	r6, r5, r2, ror #24
    3204:	47445749 	strbmi	r5, [r4, -r9, asr #14]
    3208:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0xffffffa1
    320c:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    3210:	49007265 	stmdbmi	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    3214:	5f474457 	svcpl	0x00474457
    3218:	50746553 	rsbspl	r6, r4, r3, asr r5
    321c:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    3220:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    3224:	44574900 	ldrbmi	r4, [r7], #-2304	; 0xfffff700
    3228:	65535f47 	ldrbvs	r5, [r3, #-3911]	; 0xfffff0b9
    322c:	6c655274 	sfmvs	f5, 2, [r5], #-464	; 0xfffffe30
    3230:	0064616f 	rsbeq	r6, r4, pc, ror #2
    3234:	47445749 	strbmi	r5, [r4, -r9, asr #14]
    3238:	6c65525f 	sfmvs	f5, 2, [r5], #-380	; 0xfffffe84
    323c:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    3240:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    3244:	2f007265 	svccs	0x00007265
    3248:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    324c:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    3250:	2f767375 	svccs	0x00767375
    3254:	41534454 	cmpmi	r3, r4, asr r4
    3258:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    325c:	4c2f544f 	cfstrsmi	mvf5, [pc], #-316	; 3128 <_Min_Stack_Size+0x2f28>
    3260:	61726269 	cmnvs	r2, r9, ror #4
    3264:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    3268:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    326c:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    3270:	31663233 	cmncc	r6, r3, lsr r2
    3274:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    3278:	2e676477 	mcrcs	4, 3, r6, cr7, cr7, {3}
    327c:	57490063 	strbpl	r0, [r9, -r3, rrx]
    3280:	575f4744 	ldrbpl	r4, [pc, -r4, asr #14]
    3284:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    3288:	65636341 	strbvs	r6, [r3, #-833]!	; 0xfffffcbf
    328c:	6d437373 	stclvs	3, cr7, [r3, #-460]	; 0xfffffe34
    3290:	57490064 	strbpl	r0, [r9, -r4, rrx]
    3294:	575f4744 	ldrbpl	r4, [pc, -r4, asr #14]
    3298:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    329c:	65636341 	strbvs	r6, [r3, #-833]!	; 0xfffffcbf
    32a0:	49007373 	stmdbmi	r0, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}
    32a4:	5f474457 	svcpl	0x00474457
    32a8:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    32ac:	5367616c 	cmnpl	r7, #108, 2
    32b0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    32b4:	57490073 	smlsldxpl	r0, r9, r3, r0
    32b8:	465f4744 	ldrbmi	r4, [pc], -r4, asr #14
    32bc:	0047414c 	subeq	r4, r7, ip, asr #2
    32c0:	47445749 	strbmi	r5, [r4, -r9, asr #14]
    32c4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    32c8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    32cc:	6f682f00 	svcvs	0x00682f00
    32d0:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    32d4:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    32d8:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    32dc:	54534153 	ldrbpl	r4, [r3], #-339	; 0xfffffead
    32e0:	544f495f 	strbpl	r4, [pc], #-2399	; 32e8 <_Min_Stack_Size+0x30e8>
    32e4:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    32e8:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    32ec:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
    32f0:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    32f4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    32f8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    32fc:	6762645f 			; <UNDEFINED> instruction: 0x6762645f
    3300:	2e75636d 	cdpcs	3, 7, cr6, cr5, cr13, {3}
    3304:	42440063 	submi	r0, r4, #99	; 0x63
    3308:	55434d47 	strbpl	r4, [r3, #-3399]	; 0xfffff2b9
    330c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    3310:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    3314:	47424400 	strbmi	r4, [r2, -r0, lsl #8]
    3318:	5f55434d 	svcpl	0x0055434d
    331c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3320:	44006769 	strmi	r6, [r0], #-1897	; 0xfffff897
    3324:	434d4742 	movtmi	r4, #55106	; 0xd742
    3328:	65475f55 	strbvs	r5, [r7, #-3925]	; 0xfffff0ab
    332c:	56455274 			; <UNDEFINED> instruction: 0x56455274
    3330:	44004449 	strmi	r4, [r0], #-1097	; 0xfffffbb7
    3334:	434d4742 	movtmi	r4, #55106	; 0xd742
    3338:	65505f55 	ldrbvs	r5, [r0, #-3925]	; 0xfffff0ab
    333c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3340:	43444900 	movtmi	r4, #18688	; 0x4900
    3344:	0045444f 	subeq	r4, r5, pc, asr #8
    3348:	4d474244 	sfmmi	f4, 2, [r7, #-272]	; 0xfffffef0
    334c:	475f5543 	ldrbmi	r5, [pc, -r3, asr #10]
    3350:	45447465 	strbmi	r7, [r4, #-1125]	; 0xfffffb9b
    3354:	00444956 	subeq	r4, r4, r6, asr r9
    3358:	5f425355 	svcpl	0x00425355
    335c:	435f504c 	cmpmi	pc, #76	; 0x4c
    3360:	5f314e41 	svcpl	0x00314e41
    3364:	5f305852 	svcpl	0x00305852
    3368:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    336c:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    3370:	43535f31 	cmpmi	r3, #49, 30	; 0xc4
    3374:	52495f45 	subpl	r5, r9, #276	; 0x114
    3378:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
    337c:	5f31414d 	svcpl	0x0031414d
    3380:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    3384:	376c656e 	strbcc	r6, [ip, -lr, ror #10]!
    3388:	5152495f 	cmppl	r2, pc, asr r9
    338c:	3249006e 	subcc	r0, r9, #110	; 0x6e
    3390:	455f3243 	ldrbmi	r3, [pc, #-579]	; 3155 <_Min_Stack_Size+0x2f55>
    3394:	52495f52 	subpl	r5, r9, #328	; 0x148
    3398:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
    339c:	5f74696e 	svcpl	0x0074696e
    33a0:	326d6974 	rsbcc	r6, sp, #116, 18	; 0x1d0000
    33a4:	5f736d5f 	svcpl	0x00736d5f
    33a8:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    33ac:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    33b0:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    33b4:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
    33b8:	5f31414d 	svcpl	0x0031414d
    33bc:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    33c0:	326c656e 	rsbcc	r6, ip, #461373440	; 0x1b800000
    33c4:	5152495f 	cmppl	r2, pc, asr r9
    33c8:	4c46006e 	mcrrmi	0, 6, r0, r6, cr14
    33cc:	5f485341 	svcpl	0x00485341
    33d0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    33d4:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    33d8:	495f3049 	ldmdbmi	pc, {r0, r3, r6, ip, sp}^	; <UNPREDICTABLE>
    33dc:	006e5152 	rsbeq	r5, lr, r2, asr r1
    33e0:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    33e4:	315f3531 	cmpcc	pc, r1, lsr r5	; <UNPREDICTABLE>
    33e8:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
    33ec:	50006e51 	andpl	r6, r0, r1, asr lr
    33f0:	53646e65 	cmnpl	r4, #1616	; 0x650
    33f4:	52495f56 	subpl	r5, r9, #344	; 0x158
    33f8:	53006e51 	movwpl	r6, #3665	; 0xe51
    33fc:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    3400:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    3404:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    3408:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    340c:	43435200 	movtmi	r5, #12800	; 0x3200
    3410:	5152495f 	cmppl	r2, pc, asr r9
    3414:	654d006e 	strbvs	r0, [sp, #-110]	; 0xffffff92
    3418:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    341c:	616e614d 	cmnvs	lr, sp, asr #2
    3420:	656d6567 	strbvs	r6, [sp, #-1383]!	; 0xfffffa99
    3424:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3428:	006e5152 	rsbeq	r5, lr, r2, asr r1
    342c:	314d4954 	cmpcc	sp, r4, asr r9
    3430:	4b52425f 	blmi	1493db4 <_Min_Stack_Size+0x1493bb4>
    3434:	5152495f 	cmppl	r2, pc, asr r9
    3438:	5053006e 	subspl	r0, r3, lr, rrx
    343c:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    3440:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3444:	31414d44 	cmpcc	r1, r4, asr #26
    3448:	6168435f 	cmnvs	r8, pc, asr r3
    344c:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    3450:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    3454:	43006e51 	movwmi	r6, #3665	; 0xe51
    3458:	5f314e41 	svcpl	0x00314e41
    345c:	5f315852 	svcpl	0x00315852
    3460:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3464:	42535500 	subsmi	r5, r3, #0, 10
    3468:	5f50485f 	svcpl	0x0050485f
    346c:	314e4143 	cmpcc	lr, r3, asr #2
    3470:	5f58545f 	svcpl	0x0058545f
    3474:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3478:	41535500 	cmpmi	r3, r0, lsl #10
    347c:	5f325452 	svcpl	0x00325452
    3480:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3484:	454c4f00 	strbmi	r4, [ip, #-3840]	; 0xfffff100
    3488:	50475f44 	subpl	r5, r7, r4, asr #30
    348c:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    3490:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    3494:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    3498:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    349c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    34a0:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    34a4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    34a8:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
    34ac:	5f56455f 	svcpl	0x0056455f
    34b0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    34b4:	414d4400 	cmpmi	sp, r0, lsl #8
    34b8:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
    34bc:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    34c0:	495f366c 	ldmdbmi	pc, {r2, r3, r5, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
    34c4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    34c8:	334d4954 	movtcc	r4, #55636	; 0xd954
    34cc:	5152495f 	cmppl	r2, pc, asr r9
    34d0:	564e006e 	strbpl	r0, [lr], -lr, rrx
    34d4:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    34d8:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    34dc:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    34e0:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    34e4:	414d4400 	cmpmi	sp, r0, lsl #8
    34e8:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
    34ec:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    34f0:	495f316c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    34f4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    34f8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    34fc:	6970735f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    3500:	35775f31 	ldrbcc	r5, [r7, #-3889]!	; 0xfffff0cf
    3504:	00303035 	eorseq	r3, r0, r5, lsr r0
    3508:	44454c4f 	strbmi	r4, [r5], #-3151	; 0xfffff3b1
    350c:	4332495f 	teqmi	r2, #1556480	; 0x17c000
    3510:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    3514:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    3518:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0xfffffc8b
    351c:	55006572 	strpl	r6, [r0, #-1394]	; 0xfffffa8e
    3520:	61574253 	cmpvs	r7, r3, asr r2
    3524:	7055656b 	subsvc	r6, r5, fp, ror #10
    3528:	5152495f 	cmppl	r2, pc, asr r9
    352c:	5757006e 	ldrbpl	r0, [r7, -lr, rrx]
    3530:	495f4744 	ldmdbmi	pc, {r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    3534:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3538:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    353c:	64656c5f 	strbtvs	r6, [r5], #-3167	; 0xfffff3a1
    3540:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    3544:	682f006b 	stmdavs	pc!, {r0, r1, r3, r5, r6}	; <UNPREDICTABLE>
    3548:	2f656d6f 	svccs	0x00656d6f
    354c:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    3550:	542f7673 	strtpl	r7, [pc], #-1651	; 3558 <_Min_Stack_Size+0x3358>
    3554:	53415344 	movtpl	r5, #4932	; 0x1344
    3558:	4f495f54 	svcmi	0x00495f54
    355c:	73552f54 	cmpvc	r5, #84, 30	; 0x150
    3560:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3564:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    3568:	7a696c61 	bvc	1a5e6f4 <_Min_Stack_Size+0x1a5e4f4>
    356c:	00632e65 	rsbeq	r2, r3, r5, ror #28
    3570:	46737542 	ldrbtmi	r7, [r3], -r2, asr #10
    3574:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    3578:	5152495f 	cmppl	r2, pc, asr r9
    357c:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
    3580:	5f344954 	svcpl	0x00344954
    3584:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3588:	44565000 	ldrbmi	r5, [r6], #-0
    358c:	5152495f 	cmppl	r2, pc, asr r9
    3590:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    3594:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
    3598:	6e6e6168 	powvsez	f6, f6, #0.0
    359c:	5f336c65 	svcpl	0x00336c65
    35a0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    35a4:	43324900 	teqmi	r2, #0, 18
    35a8:	56455f31 			; <UNDEFINED> instruction: 0x56455f31
    35ac:	5152495f 	cmppl	r2, pc, asr r9
    35b0:	6e49006e 	cdpvs	0, 4, cr0, cr9, cr14, {3}
    35b4:	695f7469 	ldmdbvs	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    35b8:	5f316332 	svcpl	0x00316332
    35bc:	64656c6f 	strbtvs	r6, [r5], #-3183	; 0xfffff391
    35c0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    35c4:	50555f31 	subspl	r5, r5, r1, lsr pc
    35c8:	5152495f 	cmppl	r2, pc, asr r9
    35cc:	5452006e 	ldrbpl	r0, [r2], #-110	; 0xffffff92
    35d0:	52495f43 	subpl	r5, r9, #268	; 0x10c
    35d4:	55006e51 	strpl	r6, [r0, #-3665]	; 0xfffff1af
    35d8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    35dc:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    35e0:	4e006e51 	mcrmi	14, 0, r6, cr0, cr1, {2}
    35e4:	614d6e6f 	cmpvs	sp, pc, ror #28
    35e8:	62616b73 	rsbvs	r6, r1, #117760	; 0x1cc00
    35ec:	6e49656c 	cdpvs	5, 4, cr6, cr9, cr12, {3}
    35f0:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
    35f4:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
    35f8:	5f314d49 	svcpl	0x00314d49
    35fc:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    3600:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3604:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    3608:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    360c:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
    3610:	5f314d49 	svcpl	0x00314d49
    3614:	5f475254 	svcpl	0x00475254
    3618:	5f4d4f43 	svcpl	0x004d4f43
    361c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3620:	43324900 	teqmi	r2, #0, 18
    3624:	52455f31 	subpl	r5, r5, #49, 30	; 0xc4
    3628:	5152495f 	cmppl	r2, pc, asr r9
    362c:	7953006e 	ldmdbvc	r3, {r1, r2, r3, r5, r6}^
    3630:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    3634:	52495f6b 	subpl	r5, r9, #428	; 0x1ac
    3638:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
    363c:	5f324d49 	svcpl	0x00324d49
    3640:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3644:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    3648:	6d69545f 	cfstrdvs	mvd5, [r9, #-380]!	; 0xfffffe84
    364c:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
    3650:	72745365 	rsbsvc	r5, r4, #-1811939327	; 0x94000001
    3654:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0xfffffc8b
    3658:	44006572 	strmi	r6, [r0], #-1394	; 0xfffffa8e
    365c:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
    3660:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
    3664:	5f726f74 	svcpl	0x00726f74
    3668:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    366c:	61735500 	cmnvs	r3, r0, lsl #10
    3670:	61466567 	cmpvs	r6, r7, ror #10
    3674:	5f746c75 	svcpl	0x00746c75
    3678:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    367c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    3680:	355f3949 	ldrbcc	r3, [pc, #-2377]	; 2d3f <_Min_Stack_Size+0x2b3f>
    3684:	5152495f 	cmppl	r2, pc, asr r9
    3688:	5653006e 	ldrbpl	r0, [r3], -lr, rrx
    368c:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
    3690:	5152495f 	cmppl	r2, pc, asr r9
    3694:	5053006e 	subspl	r0, r3, lr, rrx
    3698:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    369c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    36a0:	31414d44 	cmpcc	r1, r4, asr #26
    36a4:	6168435f 	cmnvs	r8, pc, asr r3
    36a8:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    36ac:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
    36b0:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
    36b4:	33495458 	movtcc	r5, #37976	; 0x9458
    36b8:	5152495f 	cmppl	r2, pc, asr r9
    36bc:	6e49006e 	cdpvs	0, 4, cr0, cr9, cr14, {3}
    36c0:	695f7469 	ldmdbvs	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    36c4:	5f676477 	svcpl	0x00676477
    36c8:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    36cc:	44410074 	strbmi	r0, [r1], #-116	; 0xffffff8c
    36d0:	325f3143 	subscc	r3, pc, #-1073741808	; 0xc0000010
    36d4:	5152495f 	cmppl	r2, pc, asr r9
    36d8:	5355006e 	cmppl	r5, #110	; 0x6e
    36dc:	33545241 	cmpcc	r4, #268435460	; 0x10000004
    36e0:	5152495f 	cmppl	r2, pc, asr r9
    36e4:	4154006e 	cmpmi	r4, lr, rrx
    36e8:	5245504d 	subpl	r5, r5, #77	; 0x4d
    36ec:	5152495f 	cmppl	r2, pc, asr r9
    36f0:	5452006e 	ldrbpl	r0, [r2], #-110	; 0xffffff92
    36f4:	616c4143 	cmnvs	ip, r3, asr #2
    36f8:	495f6d72 	ldmdbmi	pc, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    36fc:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3700:	31414d44 	cmpcc	r1, r4, asr #26
    3704:	6168435f 	cmnvs	r8, pc, asr r3
    3708:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    370c:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
    3710:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    3714:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    3718:	61735500 	cmnvs	r3, r0, lsl #10
    371c:	61466567 	cmpvs	r6, r7, ror #10
    3720:	5f746c75 	svcpl	0x00746c75
    3724:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    3728:	0072656c 	rsbseq	r6, r2, ip, ror #10
    372c:	5f494d4e 	svcpl	0x00494d4e
    3730:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    3734:	0072656c 	rsbseq	r6, r2, ip, ror #10
    3738:	324d4954 	subcc	r4, sp, #84, 18	; 0x150000
    373c:	5152495f 	cmppl	r2, pc, asr r9
    3740:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    3744:	0072656c 	rsbseq	r6, r2, ip, ror #10
    3748:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    374c:	435f3272 	cmpmi	pc, #536870919	; 0x20000007
    3750:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    3754:	49007265 	stmdbmi	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    3758:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    375c:	5f6c6176 	svcpl	0x006c6176
    3760:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    3764:	00726574 	rsbseq	r6, r2, r4, ror r5
    3768:	64726148 	ldrbtvs	r6, [r2], #-328	; 0xfffffeb8
    376c:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
    3770:	61485f74 	hvcvs	34292	; 0x85f4
    3774:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    3778:	65440072 	strbvs	r0, [r4, #-114]	; 0xffffff8e
    377c:	4d677562 	cfstr64mi	mvdx7, [r7, #-392]!	; 0xfffffe78
    3780:	485f6e6f 	ldmdami	pc, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    3784:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    3788:	53007265 	movwpl	r7, #613	; 0x265
    378c:	485f4356 	ldmdami	pc, {r1, r2, r4, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    3790:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    3794:	2f007265 	svccs	0x00007265
    3798:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    379c:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    37a0:	2f767375 	svccs	0x00767375
    37a4:	41534454 	cmpmi	r3, r4, asr r4
    37a8:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    37ac:	552f544f 	strpl	r5, [pc, #-1103]!	; 3365 <_Min_Stack_Size+0x3165>
    37b0:	2f726573 	svccs	0x00726573
    37b4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    37b8:	30316632 	eorscc	r6, r1, r2, lsr r6
    37bc:	74695f78 	strbtvc	r5, [r9], #-3960	; 0xfffff088
    37c0:	5300632e 	movwpl	r6, #814	; 0x32e
    37c4:	5f324950 	svcpl	0x00324950
    37c8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    37cc:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    37d0:	53007265 	movwpl	r7, #613	; 0x265
    37d4:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    37d8:	485f6b63 	ldmdami	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
    37dc:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    37e0:	42007265 	andmi	r7, r0, #1342177286	; 0x50000006
    37e4:	61467375 	hvcvs	26421	; 0x6735
    37e8:	5f746c75 	svcpl	0x00746c75
    37ec:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    37f0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    37f4:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
    37f8:	485f5653 	ldmdami	pc, {r0, r1, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    37fc:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    3800:	4d007265 	sfmmi	f7, 4, [r0, #-404]	; 0xfffffe6c
    3804:	614d6d65 	cmpvs	sp, r5, ror #26
    3808:	6567616e 	strbvs	r6, [r7, #-366]!	; 0xfffffe92
    380c:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
    3810:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    3814:	414d4400 	cmpmi	sp, r0, lsl #8
    3818:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
    381c:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    3820:	495f336c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    3824:	61485152 	cmpvs	r8, r2, asr r1
    3828:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    382c:	48440072 	stmdami	r4, {r1, r4, r5, r6}^
    3830:	6c435043 	mcrrvs	0, 4, r5, r3, cr3
    3834:	746e6569 	strbtvc	r6, [lr], #-1385	; 0xfffffa97
    3838:	72657300 	rsbvc	r7, r5, #0, 6
    383c:	5f726576 	svcpl	0x00726576
    3840:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    3844:	73696400 	cmnvc	r9, #0, 8
    3848:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
    384c:	74656e5f 	strbtvc	r6, [r5], #-3679	; 0xfffff1a1
    3850:	6f666e69 	svcvs	0x00666e69
    3854:	63657300 	cmnvs	r5, #0, 6
    3858:	61646e6f 	cmnvs	r4, pc, ror #28
    385c:	645f7972 	ldrbvs	r7, [pc], #-2418	; 3864 <_Min_Stack_Size+0x3664>
    3860:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    3864:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    3868:	61700072 	cmnvs	r0, r2, ror r0
    386c:	6f777373 	svcvs	0x00777373
    3870:	64006472 	strvs	r6, [r0], #-1138	; 0xfffffb8e
    3874:	5f706368 	svcpl	0x00706368
    3878:	00746572 	rsbseq	r6, r4, r2, ror r5
    387c:	61656c63 	cmnvs	r5, r3, ror #24
    3880:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    3884:	6f697373 	svcvs	0x00697373
    3888:	716d006e 	cmnvc	sp, lr, rrx
    388c:	625f7474 	subsvs	r7, pc, #116, 8	; 0x74000000
    3890:	656b6f72 	strbvs	r6, [fp, #-3954]!	; 0xfffff08e
    3894:	61685f72 	smcvs	34290	; 0x85f2
    3898:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    389c:	6c00745f 	cfstrsvs	mvf7, [r0], {95}	; 0x5f
    38a0:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    38a4:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
    38a8:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
    38ac:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
    38b0:	65735f70 	ldrbvs	r5, [r3, #-3952]!	; 0xfffff090
    38b4:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    38b8:	736f6800 	cmnvc	pc, #0, 16
    38bc:	6d616e74 	stclvs	14, cr6, [r1, #-464]!	; 0xfffffe30
    38c0:	6f740065 	svcvs	0x00740065
    38c4:	5f6c6174 	svcpl	0x006c6174
    38c8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    38cc:	72620073 	rsbvc	r0, r2, #115	; 0x73
    38d0:	72656b6f 	rsbvc	r6, r5, #113664	; 0x1bc00
    38d4:	6e657300 	cdpvs	3, 6, cr7, cr5, cr0, {0}
    38d8:	61705f64 	cmnvs	r0, r4, ror #30
    38dc:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xfffff49d
    38e0:	696c6300 	stmdbvs	ip!, {r8, r9, sp, lr}^
    38e4:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    38e8:	736d0064 	cmnvc	sp, #100	; 0x64
    38ec:	64695f67 	strbtvs	r5, [r9], #-3943	; 0xfffff099
    38f0:	7663725f 			; <UNDEFINED> instruction: 0x7663725f
    38f4:	636f6c00 	cmnvs	pc, #0, 24
    38f8:	6e6f5f6b 	cdpvs	15, 6, cr5, cr15, cr11, {3}
    38fc:	6c697700 	stclvs	7, cr7, [r9], #-0
    3900:	6f715f6c 	svcvs	0x00715f6c
    3904:	73750073 	cmnvc	r5, #115	; 0x73
    3908:	616e7265 	cmnvs	lr, r5, ror #4
    390c:	2f00656d 	svccs	0x0000656d
    3910:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3914:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    3918:	2f767375 	svccs	0x00767375
    391c:	41534454 	cmpmi	r3, r4, asr r4
    3920:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3924:	552f544f 	strpl	r5, [pc, #-1103]!	; 34dd <_Min_Stack_Size+0x32dd>
    3928:	2f726573 	svccs	0x00726573
    392c:	6e69616d 	powvsez	f6, f1, #5.0
    3930:	7300632e 	movwvc	r6, #814	; 0x32e
    3934:	656b636f 	strbvs	r6, [fp, #-879]!	; 0xfffffc91
    3938:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    393c:	62006f66 	andvs	r6, r0, #408	; 0x198
    3940:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    3944:	7663725f 			; <UNDEFINED> instruction: 0x7663725f
    3948:	65730064 	ldrbvs	r0, [r3, #-100]!	; 0xffffff9c
    394c:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
    3950:	0070695f 	rsbseq	r6, r0, pc, asr r9
    3954:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
    3958:	5f706968 	svcpl	0x00706968
    395c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    3960:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
    3964:	725f6c6c 	subsvc	r6, pc, #108, 24	; 0x6c00
    3968:	69617465 	stmdbvs	r1!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    396c:	6564006e 	strbvs	r0, [r4, #-110]!	; 0xffffff92
    3970:	5f79616c 	svcpl	0x0079616c
    3974:	6700736d 	strvs	r7, [r0, -sp, ror #6]
    3978:	41544144 	cmpmi	r4, r4, asr #2
    397c:	00465542 	subeq	r5, r6, r2, asr #10
    3980:	5a495767 	bpl	1259724 <_Min_Stack_Size+0x1259524>
    3984:	4954454e 	ldmdbmi	r4, {r1, r2, r3, r6, r8, sl, lr}^
    3988:	004f464e 	subeq	r4, pc, lr, asr #12
    398c:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
    3990:	5f706968 	svcpl	0x00706968
    3994:	65736564 	ldrbvs	r6, [r3, #-1380]!	; 0xfffffa9c
    3998:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    399c:	63617000 	cmnvs	r1, #0
    39a0:	5f74656b 	svcpl	0x0074656b
    39a4:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    39a8:	64006874 	strvs	r6, [r0], #-2164	; 0xfffff78c
    39ac:	00707369 	rsbseq	r7, r0, r9, ror #6
    39b0:	6b636170 	blvs	18dbf78 <_Min_Stack_Size+0x18dbd78>
    39b4:	625f7465 	subsvs	r7, pc, #1694498816	; 0x65000000
    39b8:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    39bc:	656d0072 	strbvs	r0, [sp, #-114]!	; 0xffffff8e
    39c0:	7a69736d 	bvc	1a6077c <_Min_Stack_Size+0x1a6057c>
    39c4:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
    39c8:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
    39cc:	65725f70 	ldrbvs	r5, [r2, #-3952]!	; 0xfffff090
    39d0:	69006461 	stmdbvs	r0, {r0, r5, r6, sl, sp, lr}
    39d4:	6f635f70 	svcvs	0x00635f70
    39d8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    39dc:	72006465 	andvc	r6, r0, #1694498816	; 0x65000000
    39e0:	5f646165 	svcpl	0x00646165
    39e4:	6b636170 	blvs	18dbfac <_Min_Stack_Size+0x18dbdac>
    39e8:	6d007465 	cfstrsvs	mvf7, [r0, #-404]	; 0xfffffe6c
    39ec:	006e6961 	rsbeq	r6, lr, r1, ror #18
    39f0:	43534e44 	cmpmi	r3, #68, 28	; 0x440
    39f4:	6e65696c 	cdpvs	9, 6, cr6, cr5, cr12, {3}
    39f8:	6d740074 	ldclvs	0, cr0, [r4, #-464]!	; 0xfffffe30
    39fc:	72747370 	rsbsvc	r7, r4, #112, 6	; 0xc0000001
    3a00:	78696600 	stmdavc	r9!, {r9, sl, sp, lr}^
    3a04:	65486465 	strbvs	r6, [r8, #-1125]	; 0xfffffb9b
    3a08:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
    3a0c:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    3a10:	6d657200 	sfmvs	f7, 2, [r5, #-0]
    3a14:	4c6e6961 	stclmi	9, cr6, [lr], #-388	; 0xfffffe7c
    3a18:	66006e65 	strvs	r6, [r0], -r5, ror #28
    3a1c:	64657869 	strbtvs	r7, [r5], #-2153	; 0xfffff797
    3a20:	6165685f 	cmnvs	r5, pc, asr r8
    3a24:	00726564 	rsbseq	r6, r2, r4, ror #10
    3a28:	7474716d 	ldrbtvc	r7, [r4], #-365	; 0xfffffe93
    3a2c:	7261705f 	rsbvc	r7, r1, #95	; 0x5f
    3a30:	705f6573 	subsvc	r6, pc, r3, ror r5	; <UNPREDICTABLE>
    3a34:	696c6275 	stmdbvs	ip!, {r0, r2, r4, r5, r6, r9, sp, lr}^
    3a38:	6d5f6873 	ldclvs	8, cr6, [pc, #-460]	; 3874 <_Min_Stack_Size+0x3674>
    3a3c:	6d006773 	stcvs	7, cr6, [r0, #-460]	; 0xfffffe34
    3a40:	5f747471 	svcpl	0x00747471
    3a44:	73726170 	cmnvc	r2, #112, 2
    3a48:	75705f65 	ldrbvc	r5, [r0, #-3941]!	; 0xfffff09b
    3a4c:	6f745f62 	svcvs	0x00745f62
    3a50:	5f636970 	svcpl	0x00636970
    3a54:	00727470 	rsbseq	r7, r2, r0, ror r4
    3a58:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
    3a5c:	6c630074 	stclvs	0, cr0, [r3], #-464	; 0xfffffe30
    3a60:	746e6569 	strbtvc	r6, [lr], #-1385	; 0xfffffa97
    3a64:	656c6469 	strbvs	r6, [ip, #-1129]!	; 0xfffffb97
    3a68:	716d006e 	cmnvc	sp, lr, rrx
    3a6c:	705f7474 	subsvc	r7, pc, r4, ror r4	; <UNPREDICTABLE>
    3a70:	65737261 	ldrbvs	r7, [r3, #-609]!	; 0xfffffd9f
    3a74:	6d65725f 	sfmvs	f7, 2, [r5, #-380]!	; 0xfffffe84
    3a78:	6e656c5f 	mcrvs	12, 3, r6, cr5, cr15, {2}
    3a7c:	67736d00 	ldrbvs	r6, [r3, -r0, lsl #26]!
    3a80:	6e656c5f 	mcrvs	12, 3, r6, cr5, cr15, {2}
    3a84:	66747500 	ldrbtvs	r7, [r4], -r0, lsl #10
    3a88:	706f745f 	rsbvc	r7, pc, pc, asr r4	; <UNPREDICTABLE>
    3a8c:	71006369 	tstvc	r0, r9, ror #6
    3a90:	735f736f 	cmpvc	pc, #-1140850687	; 0xbc000001
    3a94:	00657a69 	rsbeq	r7, r5, r9, ror #20
    3a98:	69706f74 	ldmdbvs	r0!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    3a9c:	656c5f63 	strbvs	r5, [ip, #-3939]!	; 0xfffff09d
    3aa0:	656d006e 	strbvs	r0, [sp, #-110]!	; 0xffffff92
    3aa4:	67617373 			; <UNDEFINED> instruction: 0x67617373
    3aa8:	64695f65 	strbtvs	r5, [r9], #-3941	; 0xfffff09b
    3aac:	74716d00 	ldrbtvc	r6, [r1], #-3328	; 0xfffff300
    3ab0:	69705f74 	ldmdbvs	r0!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3ab4:	7600676e 	strvc	r6, [r0], -lr, ror #14
    3ab8:	685f7261 	ldmdavs	pc, {r0, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    3abc:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
    3ac0:	716d0072 	smcvc	53250	; 0xd002
    3ac4:	705f7474 	subsvc	r7, pc, r4, ror r4	; <UNPREDICTABLE>
    3ac8:	65737261 	ldrbvs	r7, [r3, #-609]!	; 0xfffffd9f
    3acc:	6275705f 	rsbsvs	r7, r5, #95	; 0x5f
    3ad0:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    3ad4:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
    3ad8:	6c756d00 	ldclvs	13, cr6, [r5], #-0
    3adc:	6c706974 	ldclvs	9, cr6, [r0], #-464	; 0xfffffe30
    3ae0:	00726569 	rsbseq	r6, r2, r9, ror #10
    3ae4:	7474716d 	ldrbtvc	r7, [r4], #-365	; 0xfffffe93
    3ae8:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    3aec:	7463656e 	strbtvc	r6, [r3], #-1390	; 0xfffffa92
    3af0:	67736d00 	ldrbvs	r6, [r3, -r0, lsl #26]!
    3af4:	006e656c 	rsbeq	r6, lr, ip, ror #10
    3af8:	7474716d 	ldrbtvc	r7, [r4], #-365	; 0xfffffe93
    3afc:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    3b00:	75615f74 	strbvc	r5, [r1, #-3956]!	; 0xfffff08c
    3b04:	6d006874 	stcvs	8, cr6, [r0, #-464]	; 0xfffffe30
    3b08:	5f747471 	svcpl	0x00747471
    3b0c:	75736e75 	ldrbvc	r6, [r3, #-3701]!	; 0xfffff18b
    3b10:	72637362 	rsbvc	r7, r3, #-2013265919	; 0x88000001
    3b14:	00656269 	rsbeq	r6, r5, r9, ror #4
    3b18:	7474716d 	ldrbtvc	r7, [r4], #-365	; 0xfffffe93
    3b1c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    3b20:	61700074 	cmnvs	r0, r4, ror r0
    3b24:	6f777373 	svcvs	0x00777373
    3b28:	656c6472 	strbvs	r6, [ip, #-1138]!	; 0xfffffb8e
    3b2c:	716d006e 	cmnvc	sp, lr, rrx
    3b30:	735f7474 	cmpvc	pc, #116, 8	; 0x74000000
    3b34:	63736275 	cmnvs	r3, #1342177287	; 0x50000007
    3b38:	65626972 	strbvs	r6, [r2, #-2418]!	; 0xfffff68e
    3b3c:	74716d00 	ldrbtvc	r6, [r1], #-3328	; 0xfffff300
    3b40:	61705f74 	cmnvs	r0, r4, ror pc
    3b44:	5f657372 	svcpl	0x00657372
    3b48:	5f627570 	svcpl	0x00627570
    3b4c:	69706f74 	ldmdbvs	r0!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    3b50:	716d0063 	cmnvc	sp, r3, rrx
    3b54:	645f7474 	ldrbvs	r7, [pc], #-1140	; 3b5c <_Min_Stack_Size+0x395c>
    3b58:	6f637369 	svcvs	0x00637369
    3b5c:	63656e6e 	cmnvs	r5, #1760	; 0x6e0
    3b60:	73750074 	cmnvc	r5, #116	; 0x74
    3b64:	616e7265 	cmnvs	lr, r5, ror #4
    3b68:	656c656d 	strbvs	r6, [ip, #-1389]!	; 0xfffffa93
    3b6c:	6170006e 	cmnvs	r0, lr, rrx
    3b70:	616f6c79 	smcvs	63177	; 0xf6c9
    3b74:	656c5f64 	strbvs	r5, [ip, #-3940]!	; 0xfffff09c
    3b78:	6f74006e 	svcvs	0x0074006e
    3b7c:	6c636970 	stclvs	9, cr6, [r3], #-448	; 0xfffffe40
    3b80:	6e006e65 	cdpvs	14, 0, cr6, cr0, cr5, {3}
    3b84:	625f6d75 	subsvs	r6, pc, #7488	; 0x1d40
    3b88:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    3b8c:	74716d00 	ldrbtvc	r6, [r1], #-3328	; 0xfffff300
    3b90:	75705f74 	ldrbvc	r5, [r0, #-3956]!	; 0xfffff08c
    3b94:	6c657262 	sfmvs	f7, 2, [r5], #-392	; 0xfffffe78
    3b98:	736f7100 	cmnvc	pc, #0, 2
    3b9c:	616c665f 	cmnvs	ip, pc, asr r6
    3ba0:	716d0067 	cmnvc	sp, r7, rrx
    3ba4:	6e5f7474 	mrcvs	4, 2, r7, cr15, cr4, {3}
    3ba8:	725f6d75 	subsvc	r6, pc, #7488	; 0x1d40
    3bac:	6c5f6d65 	mrrcvs	13, 6, r6, pc, cr5	; <UNPREDICTABLE>
    3bb0:	625f6e65 	subsvs	r6, pc, #1616	; 0x650
    3bb4:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    3bb8:	74716d00 	ldrbtvc	r6, [r1], #-3328	; 0xfffff300
    3bbc:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
    3bc0:	6c615f74 	stclvs	15, cr5, [r1], #-464	; 0xfffffe30
    3bc4:	00657669 	rsbeq	r7, r5, r9, ror #12
    3bc8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3b14 <_Min_Stack_Size+0x3914>
    3bcc:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    3bd0:	76737572 			; <UNDEFINED> instruction: 0x76737572
    3bd4:	5344542f 	movtpl	r5, #17455	; 0x442f
    3bd8:	5f545341 	svcpl	0x00545341
    3bdc:	2f544f49 	svccs	0x00544f49
    3be0:	6562696c 	strbvs	r6, [r2, #-2412]!	; 0xfffff694
    3be4:	7474716d 	ldrbtvc	r7, [r4], #-365	; 0xfffffe93
    3be8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    3bec:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3bf0:	74716d65 	ldrbtvc	r6, [r1], #-3429	; 0xfffff29b
    3bf4:	00632e74 	rsbeq	r2, r3, r4, ror lr
    3bf8:	7474716d 	ldrbtvc	r7, [r4], #-365	; 0xfffffe93
    3bfc:	6275705f 	rsbsvs	r7, r5, #95	; 0x5f
    3c00:	6873696c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    3c04:	74716d00 	ldrbtvc	r6, [r1], #-3328	; 0xfffff300
    3c08:	61705f74 	cmnvs	r0, r4, ror pc
    3c0c:	5f657372 	svcpl	0x00657372
    3c10:	5f67736d 	svcpl	0x0067736d
    3c14:	6d006469 	cfstrsvs	mvf6, [r0, #-420]	; 0xfffffe5c
    3c18:	5f747471 	svcpl	0x00747471
    3c1c:	6c627570 	cfstr64vs	mvdx7, [r2], #-448	; 0xfffffe40
    3c20:	5f687369 	svcpl	0x00687369
    3c24:	68746977 	ldmdavs	r4!, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    3c28:	736f715f 	cmnvc	pc, #-1073741801	; 0xc0000017
    3c2c:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    3c30:	2f646c69 	svccs	0x00646c69
    3c34:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    3c38:	352d6269 	strcc	r6, [sp, #-617]!	; 0xfffffd97
    3c3c:	7870777a 	ldmdavc	r0!, {r1, r3, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
    3c40:	656e2f45 	strbvs	r2, [lr, #-3909]!	; 0xfffff0bb
    3c44:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3c48:	322e322d 	eorcc	r3, lr, #-805306366	; 0xd0000002
    3c4c:	672b302e 	strvs	r3, [fp, -lr, lsr #32]!
    3c50:	30327469 	eorscc	r7, r2, r9, ror #8
    3c54:	38303531 	ldmdacc	r0!, {r0, r4, r5, r8, sl, ip, sp}
    3c58:	352e3033 	strcc	r3, [lr, #-51]!	; 0xffffffcd
    3c5c:	35643361 	strbcc	r3, [r4, #-865]!	; 0xfffffc9f
    3c60:	622f3633 	eorvs	r3, pc, #53477376	; 0x3300000
    3c64:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    3c68:	6e616e5f 	mcrvs	14, 3, r6, cr1, cr15, {2}
    3c6c:	72612f6f 	rsbvc	r2, r1, #444	; 0x1bc
    3c70:	6f6e2d6d 	svcvs	0x006e2d6d
    3c74:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3c78:	2f696261 	svccs	0x00696261
    3c7c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    3c80:	2f6d2d37 	svccs	0x006d2d37
    3c84:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    3c88:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 3aec <_Min_Stack_Size+0x38ec>
    3c8c:	2f636269 	svccs	0x00636269
    3c90:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3c94:	7300676e 	movwvc	r6, #1902	; 0x76e
    3c98:	00306372 	eorseq	r6, r0, r2, ror r3
    3c9c:	30747364 	rsbscc	r7, r4, r4, ror #6
    3ca0:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    3ca4:	00797063 	rsbseq	r7, r9, r3, rrx
    3ca8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3cac:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3cb0:	2f2e2e2f 	svccs	0x002e2e2f
    3cb4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3cb8:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    3cbc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3cc0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3cc4:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    3cc8:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    3ccc:	6d656d2f 	stclvs	13, cr6, [r5, #-188]!	; 0xffffff44
    3cd0:	2e797063 	cdpcs	0, 7, cr7, cr9, cr3, {3}
    3cd4:	656c0063 	strbvs	r0, [ip, #-99]!	; 0xffffff9d
    3cd8:	7300306e 	movwvc	r3, #110	; 0x6e
    3cdc:	00657661 	rsbeq	r7, r5, r1, ror #12
    3ce0:	20554e47 	subscs	r4, r5, r7, asr #28
    3ce4:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
    3ce8:	20332e39 	eorscs	r2, r3, r9, lsr lr
    3cec:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    3cf0:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
    3cf4:	72702820 	rsbsvc	r2, r0, #32, 16	; 0x200000
    3cf8:	6c657265 	sfmvs	f7, 2, [r5], #-404	; 0xfffffe6c
    3cfc:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
    3d00:	6d2d2029 	stcvs	0, cr2, [sp, #-164]!	; 0xffffff5c
    3d04:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    3d08:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
    3d0c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3d10:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    3d14:	6d2d3776 	stcvs	7, cr3, [sp, #-472]!	; 0xfffffe28
    3d18:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
    3d1c:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    3d20:	616d2d20 	cmnvs	sp, r0, lsr #26
    3d24:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
    3d28:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    3d2c:	206d2d37 	rsbcs	r2, sp, r7, lsr sp
    3d30:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    3d34:	2d20324f 	sfmcs	f3, 4, [r0, #-316]!	; 0xfffffec4
    3d38:	2d20734f 	stccs	3, cr7, [r0, #-316]!	; 0xfffffec4
    3d3c:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; 3bac <_Min_Stack_Size+0x39ac>
    3d40:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    3d44:	206e6974 	rsbcs	r6, lr, r4, ror r9
    3d48:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0xfffff9d3
    3d4c:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    3d50:	732d6e6f 			; <UNDEFINED> instruction: 0x732d6e6f
    3d54:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    3d58:	20736e6f 	rsbscs	r6, r3, pc, ror #28
    3d5c:	6164662d 	cmnvs	r4, sp, lsr #12
    3d60:	732d6174 			; <UNDEFINED> instruction: 0x732d6174
    3d64:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    3d68:	20736e6f 	rsbscs	r6, r3, pc, ror #28
    3d6c:	6873662d 	ldmdavs	r3!, {r0, r2, r3, r5, r9, sl, sp, lr}^
    3d70:	2d74726f 	lfmcs	f7, 2, [r4, #-444]!	; 0xfffffe44
    3d74:	61686377 	smcvs	34359	; 0x8637
    3d78:	2e2e0072 	mcrcs	0, 1, r0, cr14, cr2, {3}
    3d7c:	2f2e2e2f 	svccs	0x002e2e2f
    3d80:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3d84:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3d88:	2f2e2e2f 	svccs	0x002e2e2f
    3d8c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    3d90:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 3bf4 <_Min_Stack_Size+0x39f4>
    3d94:	2f636269 	svccs	0x00636269
    3d98:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3d9c:	6d2f676e 	stcvs	7, cr6, [pc, #-440]!	; 3bec <_Min_Stack_Size+0x39ec>
    3da0:	65736d65 	ldrbvs	r6, [r3, #-3429]!	; 0xfffff29b
    3da4:	00632e74 	rsbeq	r2, r3, r4, ror lr
    3da8:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
    3dac:	5f007465 	svcpl	0x00007465
    3db0:	73626f69 	cmnvc	r2, #420	; 0x1a4
    3db4:	6c665f00 	stclvs	15, cr5, [r6], #-0
    3db8:	32736761 	rsbscc	r6, r3, #25427968	; 0x1840000
    3dbc:	626d5f00 	rsbvs	r5, sp, #0, 30
    3dc0:	5f6e656c 	svcpl	0x006e656c
    3dc4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    3dc8:	622f0065 	eorvs	r0, pc, #101	; 0x65
    3dcc:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    3dd0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3dd4:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    3dd8:	70777a35 	rsbsvc	r7, r7, r5, lsr sl
    3ddc:	6e2f4578 	mcrvs	5, 1, r4, cr15, cr8, {3}
    3de0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3de4:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    3de8:	2b302e32 	blcs	c0f6b8 <_Min_Stack_Size+0xc0f4b8>
    3dec:	32746967 	rsbscc	r6, r4, #1687552	; 0x19c000
    3df0:	30353130 	eorscc	r3, r5, r0, lsr r1
    3df4:	2e303338 	mrccs	3, 1, r3, cr0, cr8, {1}
    3df8:	64336135 	ldrtvs	r6, [r3], #-309	; 0xfffffecb
    3dfc:	2f363335 	svccs	0x00363335
    3e00:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    3e04:	616e5f64 	cmnvs	lr, r4, ror #30
    3e08:	612f6f6e 			; <UNDEFINED> instruction: 0x612f6f6e
    3e0c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3e10:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3e14:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3e18:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    3e1c:	6d2d3776 	stcvs	7, cr3, [sp, #-472]!	; 0xfffffe28
    3e20:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3e24:	2f62696c 	svccs	0x0062696c
    3e28:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    3e2c:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    3e30:	0062696c 	rsbeq	r6, r2, ip, ror #18
    3e34:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
    3e38:	5f00745f 	svcpl	0x0000745f
    3e3c:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    3e40:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
    3e44:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3e48:	735f5f00 	cmpvc	pc, #0, 30
    3e4c:	00667562 	rsbeq	r7, r6, r2, ror #10
    3e50:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
    3e54:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
    3e58:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
    3e5c:	5f006b5f 	svcpl	0x00006b5f
    3e60:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    3e64:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
    3e68:	5f006675 	svcpl	0x00006675
    3e6c:	5f676973 	svcpl	0x00676973
    3e70:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    3e74:	6c665f00 	stclvs	15, cr5, [r6], #-0
    3e78:	00736761 	rsbseq	r6, r3, r1, ror #14
    3e7c:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    3e80:	69746c61 	ldmdbvs	r4!, {r0, r5, r6, sl, fp, sp, lr}^
    3e84:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
    3e88:	5f006675 	svcpl	0x00006675
    3e8c:	756f635f 	strbvc	r6, [pc, #-863]!	; 3b35 <_Min_Stack_Size+0x3935>
    3e90:	5f00746e 	svcpl	0x0000746e
    3e94:	5f6d745f 	svcpl	0x006d745f
    3e98:	7961646d 	stmdbvc	r1!, {r0, r2, r3, r5, r6, sl, sp, lr}^
    3e9c:	626d5f00 	rsbvs	r5, sp, #0, 30
    3ea0:	6f747273 	svcvs	0x00747273
    3ea4:	5f736377 	svcpl	0x00736377
    3ea8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    3eac:	725f0065 	subsvc	r0, pc, #101	; 0x65
    3eb0:	5f003834 	svcpl	0x00003834
    3eb4:	74727473 	ldrbtvc	r7, [r2], #-1139	; 0xfffffb8d
    3eb8:	6c5f6b6f 	mrrcvs	11, 6, r6, pc, cr15	; <UNPREDICTABLE>
    3ebc:	00747361 	rsbseq	r7, r4, r1, ror #6
    3ec0:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
    3ec4:	006e656c 	rsbeq	r6, lr, ip, ror #10
    3ec8:	75626e5f 	strbvc	r6, [r2, #-3679]!	; 0xfffff1a1
    3ecc:	4c5f0066 	mrrcmi	0, 6, r0, pc, cr6	; <UNPREDICTABLE>
    3ed0:	5f4b434f 	svcpl	0x004b434f
    3ed4:	55434552 	strbpl	r4, [r3, #-1362]	; 0xfffffaae
    3ed8:	56495352 			; <UNDEFINED> instruction: 0x56495352
    3edc:	00545f45 	subseq	r5, r4, r5, asr #30
    3ee0:	6f696e5f 	svcvs	0x00696e5f
    3ee4:	5f007362 	svcpl	0x00007362
    3ee8:	4c49465f 	mcrrmi	6, 5, r4, r9, cr15
    3eec:	655f0045 	ldrbvs	r0, [pc, #-69]	; 3eaf <_Min_Stack_Size+0x3caf>
    3ef0:	6f6e7272 	svcvs	0x006e7272
    3ef4:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
    3ef8:	74616474 	strbtvc	r6, [r1], #-1140	; 0xfffffb8c
    3efc:	72655f65 	rsbvc	r5, r5, #404	; 0x194
    3f00:	5f5f0072 	svcpl	0x005f0072
    3f04:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 3d3c <_Min_Stack_Size+0x3b3c>
    3f08:	2e006e69 	cdpcs	14, 0, cr6, cr0, cr9, {3}
    3f0c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3f10:	2f2e2e2f 	svccs	0x002e2e2f
    3f14:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3f18:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3f1c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3f20:	2f62696c 	svccs	0x0062696c
    3f24:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    3f28:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    3f2c:	2f62696c 	svccs	0x0062696c
    3f30:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
    3f34:	5f00632e 	svcpl	0x0000632e
    3f38:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    3f3c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
    3f40:	626d5f00 	rsbvs	r5, sp, #0, 30
    3f44:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    3f48:	5f5f0065 	svcpl	0x005f0065
    3f4c:	775f6d74 			; <UNDEFINED> instruction: 0x775f6d74
    3f50:	00796164 	rsbseq	r6, r9, r4, ror #2
    3f54:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
    3f58:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    3f5c:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
    3f60:	6c616d00 	stclvs	13, cr6, [r1], #-0
    3f64:	00636f6c 	rsbeq	r6, r3, ip, ror #30
    3f68:	6c756d5f 	ldclvs	13, cr6, [r5], #-380	; 0xfffffe84
    3f6c:	5f5f0074 	svcpl	0x005f0074
    3f70:	695f6d74 	ldmdbvs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    3f74:	74736473 	ldrbtvc	r6, [r3], #-1139	; 0xfffffb8d
    3f78:	735f5f00 	cmpvc	pc, #0, 30
    3f7c:	5f5f0066 	svcpl	0x005f0066
    3f80:	64696473 	strbtvs	r6, [r9], #-1139	; 0xfffffb8d
    3f84:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    3f88:	70665f00 	rsbvc	r5, r6, r0, lsl #30
    3f8c:	745f736f 	ldrbvc	r7, [pc], #-879	; 3f94 <_Min_Stack_Size+0x3d94>
    3f90:	6c635f00 	stclvs	15, cr5, [r3], #-0
    3f94:	0065736f 	rsbeq	r7, r5, pc, ror #6
    3f98:	34366c5f 	ldrtcc	r6, [r6], #-3167	; 0xfffff3a1
    3f9c:	75625f61 	strbvc	r5, [r2, #-3937]!	; 0xfffff09f
    3fa0:	665f0066 	ldrbvs	r0, [pc], -r6, rrx
    3fa4:	6b636f6c 	blvs	18dfd5c <_Min_Stack_Size+0x18dfb5c>
    3fa8:	5f00745f 	svcpl	0x0000745f
    3fac:	66756275 			; <UNDEFINED> instruction: 0x66756275
    3fb0:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 3fb8 <_Min_Stack_Size+0x3db8>
    3fb4:	65735f6d 	ldrbvs	r5, [r3, #-3949]!	; 0xfffff093
    3fb8:	5f5f0063 	svcpl	0x005f0063
    3fbc:	685f6d74 	ldmdavs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    3fc0:	0072756f 	rsbseq	r7, r2, pc, ror #10
    3fc4:	63775f5f 	cmnvs	r7, #380	; 0x17c
    3fc8:	5f006268 	svcpl	0x00006268
    3fcc:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
    3fd0:	735f5f00 	cmpvc	pc, #0, 30
    3fd4:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xfffff399
    3fd8:	63775f00 	cmnvs	r7, #0, 30
    3fdc:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
    3fe0:	6174735f 	cmnvs	r4, pc, asr r3
    3fe4:	5f006574 	svcpl	0x00006574
    3fe8:	7472626d 	ldrbtvc	r6, [r2], #-621	; 0xfffffd93
    3fec:	5f63776f 	svcpl	0x0063776f
    3ff0:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    3ff4:	635f0065 	cmpvs	pc, #101	; 0x65
    3ff8:	75627476 	strbvc	r7, [r2, #-1142]!	; 0xfffffb8a
    3ffc:	635f0066 	cmpvs	pc, #102	; 0x66
    4000:	696b6f6f 	stmdbvs	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4004:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
    4008:	00656c69 	rsbeq	r6, r5, r9, ror #24
    400c:	6d61675f 	stclvs	7, cr6, [r1, #-380]!	; 0xfffffe84
    4010:	735f616d 	cmpvc	pc, #1073741851	; 0x4000001b
    4014:	676e6769 	strbvs	r6, [lr, -r9, ror #14]!
    4018:	5f006d61 	svcpl	0x00006d61
    401c:	00736477 	rsbseq	r6, r3, r7, ror r4
    4020:	72706d5f 	rsbsvc	r6, r0, #6080	; 0x17c0
    4024:	5f006365 	svcpl	0x00006365
    4028:	006d745f 	rsbeq	r7, sp, pc, asr r4
    402c:	74626d5f 	strbtvc	r6, [r2], #-3423	; 0xfffff2a1
    4030:	5f63776f 	svcpl	0x0063776f
    4034:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    4038:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
    403c:	745f746e 	ldrbvc	r7, [pc], #-1134	; 4044 <_Min_Stack_Size+0x3e44>
    4040:	626d5f00 	rsbvs	r5, sp, #0, 30
    4044:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
    4048:	6174735f 	cmnvs	r4, pc, asr r3
    404c:	5f006574 	svcpl	0x00006574
    4050:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    4054:	5f746e65 	svcpl	0x00746e65
    4058:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0xfffffe9d
    405c:	79726f67 	ldmdbvc	r2!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}^
    4060:	635f5f00 	cmpvs	pc, #0, 30
    4064:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
    4068:	5f007075 	svcpl	0x00007075
    406c:	7473626d 	ldrbtvc	r6, [r3], #-621	; 0xfffffd93
    4070:	5f657461 	svcpl	0x00657461
    4074:	425f0074 	subsmi	r0, pc, #116	; 0x74
    4078:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
    407c:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 3eb4 <_Min_Stack_Size+0x3cb4>
    4080:	64777861 	ldrbtvs	r7, [r7], #-2145	; 0xfffff79f
    4084:	5f5f0073 	svcpl	0x005f0073
    4088:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    408c:	00726165 	rsbseq	r6, r2, r5, ror #2
    4090:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
    4094:	725f0064 	subsvc	r0, pc, #100	; 0x64
    4098:	34646e61 	strbtcc	r6, [r4], #-3681	; 0xfffff19f
    409c:	5f5f0038 	svcpl	0x005f0038
    40a0:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    40a4:	00796164 	rsbseq	r6, r9, r4, ror #2
    40a8:	4c555f5f 	mrrcmi	15, 5, r5, r5, cr15	; <UNPREDICTABLE>
    40ac:	00676e6f 	rsbeq	r6, r7, pc, ror #28
    40b0:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
    40b4:	725f006b 	subsvc	r0, pc, #107	; 0x6b
    40b8:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
    40bc:	5f5f0074 	svcpl	0x005f0074
    40c0:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 3ef8 <_Min_Stack_Size+0x3cf8>
    40c4:	5f006e6f 	svcpl	0x00006e6f
    40c8:	736b6c62 	cmnvc	fp, #25088	; 0x6200
    40cc:	00657a69 	rsbeq	r7, r5, r9, ror #20
    40d0:	636e695f 	cmnvs	lr, #1556480	; 0x17c000
    40d4:	63775f00 	cmnvs	r7, #0, 30
    40d8:	6f747273 	svcvs	0x00747273
    40dc:	5f73626d 	svcpl	0x0073626d
    40e0:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    40e4:	6c5f0065 	mrrcvs	0, 6, r0, pc, cr5	; <UNPREDICTABLE>
    40e8:	69736662 	ldmdbvs	r3!, {r1, r5, r6, r9, sl, sp, lr}^
    40ec:	7300657a 	movwvc	r6, #1402	; 0x57a
    40f0:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
    40f4:	35705f00 	ldrbcc	r5, [r0, #-3840]!	; 0xfffff100
    40f8:	735f0073 	cmpvc	pc, #115	; 0x73
    40fc:	006e6769 	rsbeq	r6, lr, r9, ror #14
    4100:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
    4104:	656e5f64 	strbvs	r5, [lr, #-3940]!	; 0xfffff09c
    4108:	5f007478 	svcpl	0x00007478
    410c:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
    4110:	6565725f 	strbvs	r7, [r5, #-607]!	; 0xfffffda1
    4114:	5f00746e 	svcpl	0x0000746e
    4118:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    411c:	5f746e65 	svcpl	0x00746e65
    4120:	61636f6c 	cmnvs	r3, ip, ror #30
    4124:	5f00656c 	svcpl	0x0000656c
    4128:	74726377 	ldrbtvc	r6, [r2], #-887	; 0xfffffc89
    412c:	5f626d6f 	svcpl	0x00626d6f
    4130:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    4134:	655f0065 	ldrbvs	r0, [pc, #-101]	; 40d7 <_Min_Stack_Size+0x3ed7>
    4138:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
    413c:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    4140:	735f5f00 	cmpvc	pc, #0, 30
    4144:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
    4148:	6e735f00 	cdpvs	15, 7, cr5, cr3, cr0, {0}
    414c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    4150:	725f6674 	subsvc	r6, pc, #116, 12	; 0x7400000
    4154:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
    4158:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    415c:	2e007473 	mcrcs	4, 0, r7, cr0, cr3, {3}
    4160:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4164:	2f2e2e2f 	svccs	0x002e2e2f
    4168:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    416c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4170:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4174:	2f62696c 	svccs	0x0062696c
    4178:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    417c:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    4180:	732f6f69 			; <UNDEFINED> instruction: 0x732f6f69
    4184:	6972706e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, sp, lr}^
    4188:	2e66746e 	cdpcs	4, 6, cr7, cr6, cr14, {3}
    418c:	5f5f0063 	svcpl	0x005f0063
    4190:	63756e67 	cmnvs	r5, #1648	; 0x670
    4194:	5f61765f 	svcpl	0x0061765f
    4198:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
    419c:	615f5f00 	cmpvs	pc, r0, lsl #30
    41a0:	6e730070 	mrcvs	0, 3, r0, cr3, cr0, {3}
    41a4:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    41a8:	5f006674 	svcpl	0x00006674
    41ac:	70667673 	rsbvc	r7, r6, r3, ror r6
    41b0:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    41b4:	00725f66 	rsbseq	r5, r2, r6, ror #30
    41b8:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    41bc:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    41c0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    41c4:	7a352d62 	bvc	d4f754 <_Min_Stack_Size+0xd4f554>
    41c8:	45787077 	ldrbmi	r7, [r8, #-119]!	; 0xffffff89
    41cc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    41d0:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    41d4:	2e322e32 	mrccs	14, 1, r2, cr2, cr2, {1}
    41d8:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    41dc:	31303274 	teqcc	r0, r4, ror r2
    41e0:	33383035 	teqcc	r8, #53	; 0x35
    41e4:	61352e30 	teqvs	r5, r0, lsr lr
    41e8:	33356433 	teqcc	r5, #855638016	; 0x33000000
    41ec:	75622f36 	strbvc	r2, [r2, #-3894]!	; 0xfffff0ca
    41f0:	5f646c69 	svcpl	0x00646c69
    41f4:	6f6e616e 	svcvs	0x006e616e
    41f8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    41fc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4200:	61652d65 	cmnvs	r5, r5, ror #26
    4204:	612f6962 			; <UNDEFINED> instruction: 0x612f6962
    4208:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    420c:	6e2f6d2d 	cdpvs	13, 2, cr6, cr15, cr13, {1}
    4210:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4214:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4218:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    421c:	6f696474 	svcvs	0x00696474
    4220:	2f2e2e00 	svccs	0x002e2e00
    4224:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4228:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    422c:	2f2e2e2f 	svccs	0x002e2e2f
    4230:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    4234:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4238:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    423c:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    4240:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    4244:	74732f67 	ldrbtvc	r2, [r3], #-3943	; 0xfffff099
    4248:	72686372 	rsbvc	r6, r8, #-939524095	; 0xc8000001
    424c:	7300632e 	movwvc	r6, #814	; 0x32e
    4250:	68637274 	stmdavs	r3!, {r2, r4, r5, r6, r9, ip, sp, lr}^
    4254:	74730072 	ldrbtvc	r0, [r3], #-114	; 0xffffff8e
    4258:	79706372 	ldmdbvc	r0!, {r1, r4, r5, r6, r8, r9, sp, lr}^
    425c:	2f2e2e00 	svccs	0x002e2e00
    4260:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4264:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4268:	2f2e2e2f 	svccs	0x002e2e2f
    426c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4270:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    4274:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4278:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    427c:	616d2f63 	cmnvs	sp, r3, ror #30
    4280:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    4284:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    4288:	74732f6d 	ldrbtvc	r2, [r3], #-3949	; 0xfffff093
    428c:	79706372 	ldmdbvc	r0!, {r1, r4, r5, r6, r8, r9, sp, lr}^
    4290:	2f00632e 	svccs	0x0000632e
    4294:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4298:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    429c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    42a0:	777a352d 	ldrbvc	r3, [sl, -sp, lsr #10]!
    42a4:	2f457870 	svccs	0x00457870
    42a8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    42ac:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    42b0:	302e322e 	eorcc	r3, lr, lr, lsr #4
    42b4:	7469672b 	strbtvc	r6, [r9], #-1835	; 0xfffff8d5
    42b8:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    42bc:	30333830 	eorscc	r3, r3, r0, lsr r8
    42c0:	3361352e 	cmncc	r1, #192937984	; 0xb800000
    42c4:	36333564 	ldrtcc	r3, [r3], -r4, ror #10
    42c8:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    42cc:	6e5f646c 	cdpvs	4, 5, cr6, cr15, cr12, {3}
    42d0:	2f6f6e61 	svccs	0x006f6e61
    42d4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    42d8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    42dc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    42e0:	72612f69 	rsbvc	r2, r1, #420	; 0x1a4
    42e4:	2d37766d 	ldccs	6, cr7, [r7, #-436]!	; 0xfffffe4c
    42e8:	656e2f6d 	strbvs	r2, [lr, #-3949]!	; 0xfffff093
    42ec:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    42f0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    42f4:	616d2f63 	cmnvs	sp, r3, ror #30
    42f8:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    42fc:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    4300:	2e2e006d 	cdpcs	0, 2, cr0, cr14, cr13, {3}
    4304:	2f2e2e2f 	svccs	0x002e2e2f
    4308:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    430c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4310:	2f2e2e2f 	svccs	0x002e2e2f
    4314:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    4318:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    431c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4320:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 41a0 <_Min_Stack_Size+0x3fa0>
    4324:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    4328:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    432c:	732f6d72 			; <UNDEFINED> instruction: 0x732f6d72
    4330:	656c7274 	strbvs	r7, [ip, #-628]!	; 0xfffffd8c
    4334:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    4338:	61726373 	cmnvs	r2, r3, ror r3
    433c:	00686374 	rsbeq	r6, r8, r4, ror r3
    4340:	6c727473 	cfldrdvs	mvd7, [r2], #-460	; 0xfffffe34
    4344:	2e006e65 	cdpcs	14, 0, cr6, cr0, cr5, {3}
    4348:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    434c:	2f2e2e2f 	svccs	0x002e2e2f
    4350:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4354:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4358:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    435c:	2f62696c 	svccs	0x0062696c
    4360:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    4364:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    4368:	2f676e69 	svccs	0x00676e69
    436c:	6e727473 	mrcvs	4, 3, r7, cr2, cr3, {3}
    4370:	2e706d63 	cdpcs	13, 7, cr6, cr0, cr3, {3}
    4374:	74730063 	ldrbtvc	r0, [r3], #-99	; 0xffffff9d
    4378:	6d636e72 	stclvs	14, cr6, [r3, #-456]!	; 0xfffffe38
    437c:	2e2e0070 	mcrcs	0, 1, r0, cr14, cr0, {3}
    4380:	2f2e2e2f 	svccs	0x002e2e2f
    4384:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4388:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    438c:	2f2e2e2f 	svccs	0x002e2e2f
    4390:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4394:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 41f8 <_Min_Stack_Size+0x3ff8>
    4398:	2f636269 	svccs	0x00636269
    439c:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    43a0:	732f676e 			; <UNDEFINED> instruction: 0x732f676e
    43a4:	636e7274 	cmnvs	lr, #116, 4	; 0x40000007
    43a8:	632e7970 			; <UNDEFINED> instruction: 0x632e7970
    43ac:	72747300 	rsbsvc	r7, r4, #0, 6
    43b0:	7970636e 	ldmdbvc	r0!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    43b4:	63737300 	cmnvs	r3, #0, 6
    43b8:	64006e61 	strvs	r6, [r0], #-3681	; 0xfffff19f
    43bc:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
    43c0:	706d6900 	rsbvc	r6, sp, r0, lsl #18
    43c4:	5f657275 	svcpl	0x00657275
    43c8:	61746164 	cmnvs	r4, r4, ror #2
    43cc:	735f5f00 	cmpvc	pc, #0, 30
    43d0:	61665f66 	cmnvs	r6, r6, ror #30
    43d4:	735f656b 	cmpvc	pc, #448790528	; 0x1ac00000
    43d8:	72656474 	rsbvc	r6, r5, #116, 8	; 0x74000000
    43dc:	622f0072 	eorvs	r0, pc, #114	; 0x72
    43e0:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    43e4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    43e8:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    43ec:	70777a35 	rsbsvc	r7, r7, r5, lsr sl
    43f0:	6e2f4578 	mcrvs	5, 1, r4, cr15, cr8, {3}
    43f4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    43f8:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    43fc:	2b302e32 	blcs	c0fccc <_Min_Stack_Size+0xc0facc>
    4400:	32746967 	rsbscc	r6, r4, #1687552	; 0x19c000
    4404:	30353130 	eorscc	r3, r5, r0, lsr r1
    4408:	2e303338 	mrccs	3, 1, r3, cr0, cr8, {1}
    440c:	64336135 	ldrtvs	r6, [r3], #-309	; 0xfffffecb
    4410:	2f363335 	svccs	0x00363335
    4414:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4418:	616e5f64 	cmnvs	lr, r4, ror #30
    441c:	612f6f6e 			; <UNDEFINED> instruction: 0x612f6f6e
    4420:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4424:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4428:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    442c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4430:	6d2d3776 	stcvs	7, cr3, [sp, #-472]!	; 0xfffffe28
    4434:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4438:	2f62696c 	svccs	0x0062696c
    443c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    4440:	6565722f 	strbvs	r7, [r5, #-559]!	; 0xfffffdd1
    4444:	5f00746e 	svcpl	0x0000746e
    4448:	5f66735f 	svcpl	0x0066735f
    444c:	656b6166 	strbvs	r6, [fp, #-358]!	; 0xfffffe9a
    4450:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    4454:	5f006e69 	svcpl	0x00006e69
    4458:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
    445c:	695f6c61 	ldmdbvs	pc, {r0, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    4460:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    4464:	74705f65 	ldrbtvc	r5, [r0], #-3941	; 0xfffff09b
    4468:	2e2e0072 	mcrcs	0, 1, r0, cr14, cr2, {3}
    446c:	2f2e2e2f 	svccs	0x002e2e2f
    4470:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4474:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4478:	2f2e2e2f 	svccs	0x002e2e2f
    447c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4480:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 42e4 <_Min_Stack_Size+0x40e4>
    4484:	2f636269 	svccs	0x00636269
    4488:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    448c:	6d692f74 	stclvs	15, cr2, [r9, #-464]!	; 0xfffffe30
    4490:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
    4494:	5f00632e 	svcpl	0x0000632e
    4498:	5f66735f 	svcpl	0x0066735f
    449c:	656b6166 	strbvs	r6, [fp, #-358]!	; 0xfffffe9a
    44a0:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    44a4:	0074756f 	rsbseq	r7, r4, pc, ror #10
    44a8:	46735f5f 	uhsaxmi	r5, r3, pc	; <UNPREDICTABLE>
    44ac:	5f454c49 	svcpl	0x00454c49
    44b0:	656b6166 	strbvs	r6, [fp, #-358]!	; 0xfffffe9a
    44b4:	74706100 	ldrbtvc	r6, [r0], #-256	; 0xffffff00
    44b8:	2e2e0072 	mcrcs	0, 1, r0, cr14, cr2, {3}
    44bc:	2f2e2e2f 	svccs	0x002e2e2f
    44c0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    44c4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    44c8:	2f2e2e2f 	svccs	0x002e2e2f
    44cc:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    44d0:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 4334 <_Min_Stack_Size+0x4134>
    44d4:	2f636269 	svccs	0x00636269
    44d8:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    44dc:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 4340 <_Min_Stack_Size+0x4140>
    44e0:	6f6c6c61 	svcvs	0x006c6c61
    44e4:	00632e63 	rsbeq	r2, r3, r3, ror #28
    44e8:	7479626e 	ldrbtvc	r6, [r9], #-622	; 0xfffffd92
    44ec:	5f007365 	svcpl	0x00007365
    44f0:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    44f4:	5f00725f 	svcpl	0x0000725f
    44f8:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    44fc:	725f636f 	subsvc	r6, pc, #-1140850687	; 0xbc000001
    4500:	6c616d00 	stclvs	13, cr6, [r1], #-0
    4504:	5f636f6c 	svcpl	0x00636f6c
    4508:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    450c:	2e00745f 	cfmvsrcs	mvf0, r7
    4510:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4514:	2f2e2e2f 	svccs	0x002e2e2f
    4518:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    451c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4520:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4524:	2f62696c 	svccs	0x0062696c
    4528:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    452c:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    4530:	2f62696c 	svccs	0x0062696c
    4534:	6f6e616e 	svcvs	0x006e616e
    4538:	6c616d2d 	stclvs	13, cr6, [r1], #-180	; 0xffffff4c
    453c:	72636f6c 	rsbvc	r6, r3, #108, 30	; 0x1b0
    4540:	7000632e 	andvc	r6, r0, lr, lsr #6
    4544:	5f6f745f 	svcpl	0x006f745f
    4548:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    454c:	65726600 	ldrbvs	r6, [r2, #-1536]!	; 0xfffffa00
    4550:	00705f65 	rsbseq	r5, r0, r5, ror #30
    4554:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    4558:	635f636f 	cmpvs	pc, #-1140850687	; 0xbc000001
    455c:	6b6e7568 	blvs	1ba1b04 <_Min_Stack_Size+0x1ba1904>
    4560:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    4564:	705f746e 	subsvc	r7, pc, lr, ror #8
    4568:	67007274 	smlsdxvs	r0, r4, r2, r7
    456c:	635f7465 	cmpvs	pc, #1694498816	; 0x65000000
    4570:	6b6e7568 	blvs	1ba1b18 <_Min_Stack_Size+0x1ba1918>
    4574:	6f72665f 	svcvs	0x0072665f
    4578:	74705f6d 	ldrbtvc	r5, [r0], #-3949	; 0xfffff093
    457c:	5f5f0072 	svcpl	0x005f0072
    4580:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    4584:	665f636f 	ldrbvs	r6, [pc], -pc, ror #6
    4588:	5f656572 	svcpl	0x00656572
    458c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
    4590:	6d5f5f00 	ldclvs	15, cr5, [pc, #-0]	; 4598 <_Min_Stack_Size+0x4398>
    4594:	6f6c6c61 	svcvs	0x006c6c61
    4598:	62735f63 	rsbsvs	r5, r3, #396	; 0x18c
    459c:	735f6b72 	cmpvc	pc, #116736	; 0x1c800
    45a0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    45a4:	72747000 	rsbsvc	r7, r4, #0
    45a8:	66666964 	strbtvs	r6, [r6], -r4, ror #18
    45ac:	6100745f 	tstvs	r0, pc, asr r4
    45b0:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
    45b4:	7300705f 	movwvc	r7, #95	; 0x5f
    45b8:	5f6b7262 	svcpl	0x006b7262
    45bc:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    45c0:	0064656e 	rsbeq	r6, r4, lr, ror #10
    45c4:	6f6c6c61 	svcvs	0x006c6c61
    45c8:	69735f63 	ldmdbvs	r3!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    45cc:	5f00657a 	svcpl	0x0000657a
    45d0:	6b726273 	blvs	1c9cfa4 <_Min_Stack_Size+0x1c9cda4>
    45d4:	6100725f 	tstvs	r0, pc, asr r2
    45d8:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
    45dc:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
    45e0:	72705f00 	rsbsvc	r5, r0, #0, 30
    45e4:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    45e8:	6f6c665f 	svcvs	0x006c665f
    45ec:	65007461 	strvs	r7, [r0, #-1121]	; 0xfffffb9f
    45f0:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    45f4:	616c6600 	cmnvs	ip, r0, lsl #12
    45f8:	68635f67 	stmdavs	r3!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    45fc:	00737261 	rsbseq	r7, r3, r1, ror #4
    4600:	7472705f 	ldrbtvc	r7, [r2], #-95	; 0xffffffa1
    4604:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    4608:	00745f61 	rsbseq	r5, r4, r1, ror #30
    460c:	6d6d656d 	cfstr64vs	mvdx6, [sp, #-436]!	; 0xfffffe4c
    4610:	0065766f 	rsbeq	r7, r5, pc, ror #12
    4614:	756f645f 	strbvc	r6, [pc, #-1119]!	; 41bd <_Min_Stack_Size+0x3fbd>
    4618:	5f656c62 	svcpl	0x00656c62
    461c:	72756300 	rsbsvc	r6, r5, #0, 6
    4620:	00736f70 	rsbseq	r6, r3, r0, ror pc
    4624:	5f6f6975 	svcpl	0x006f6975
    4628:	69736572 	ldmdbvs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    462c:	2e2e0064 	cdpcs	0, 2, cr0, cr14, cr4, {3}
    4630:	2f2e2e2f 	svccs	0x002e2e2f
    4634:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4638:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    463c:	2f2e2e2f 	svccs	0x002e2e2f
    4640:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4644:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 44a8 <_Min_Stack_Size+0x42a8>
    4648:	2f636269 	svccs	0x00636269
    464c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4650:	616e2f6f 	cmnvs	lr, pc, ror #30
    4654:	762d6f6e 	strtvc	r6, [sp], -lr, ror #30
    4658:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    465c:	2e66746e 	cdpcs	4, 6, cr7, cr6, cr14, {3}
    4660:	5f5f0063 	svcpl	0x005f0063
    4664:	766f6973 			; <UNDEFINED> instruction: 0x766f6973
    4668:	75667000 	strbvc	r7, [r6, #-0]!
    466c:	6600636e 	strvs	r6, [r0], -lr, ror #6
    4670:	0030746d 	eorseq	r7, r0, sp, ror #8
    4674:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
    4678:	5f5f0068 	svcpl	0x005f0068
    467c:	72707373 	rsbsvc	r7, r0, #-872415231	; 0xcc000001
    4680:	5f746e69 	svcpl	0x00746e69
    4684:	656d0072 	strbvs	r0, [sp, #-114]!	; 0xffffff8e
    4688:	7268636d 	rsbvc	r6, r8, #-1275068415	; 0xb4000001
    468c:	61656c00 	cmnvs	r5, r0, lsl #24
    4690:	4e470064 	cdpmi	0, 4, cr0, cr7, cr4, {3}
    4694:	20432055 	subcs	r2, r3, r5, asr r0
    4698:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
    469c:	30322033 	eorscc	r2, r2, r3, lsr r0
    46a0:	35303531 	ldrcc	r3, [r0, #-1329]!	; 0xfffffacf
    46a4:	28203932 	stmdacs	r0!, {r1, r4, r5, r8, fp, ip, sp}
    46a8:	72657270 	rsbvc	r7, r5, #112, 4
    46ac:	61656c65 	cmnvs	r5, r5, ror #24
    46b0:	20296573 	eorcs	r6, r9, r3, ror r5
    46b4:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
    46b8:	20626d75 	rsbcs	r6, r2, r5, ror sp
    46bc:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
    46c0:	613d6863 	teqvs	sp, r3, ror #16
    46c4:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    46c8:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
    46cc:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
    46d0:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
    46d4:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
    46d8:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
    46dc:	2d37766d 	ldccs	6, cr7, [r7, #-436]!	; 0xfffffe4c
    46e0:	672d206d 	strvs	r2, [sp, -sp, rrx]!
    46e4:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    46e8:	734f2d20 	movtvc	r2, #64800	; 0xfd20
    46ec:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
    46f0:	75622d6f 	strbvc	r2, [r2, #-3439]!	; 0xfffff291
    46f4:	69746c69 	ldmdbvs	r4!, {r0, r3, r5, r6, sl, fp, sp, lr}^
    46f8:	662d206e 	strtvs	r2, [sp], -lr, rrx
    46fc:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    4700:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    4704:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
    4708:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    470c:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
    4710:	61746164 	cmnvs	r4, r4, ror #2
    4714:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
    4718:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    471c:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
    4720:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
    4724:	63772d74 	cmnvs	r7, #116, 26	; 0x1d00
    4728:	20726168 	rsbscs	r6, r2, r8, ror #2
    472c:	6873662d 	ldmdavs	r3!, {r0, r2, r3, r5, r9, sl, sp, lr}^
    4730:	2d74726f 	lfmcs	f7, 2, [r4, #-444]!	; 0xfffffe44
    4734:	6d756e65 	ldclvs	14, cr6, [r5, #-404]!	; 0xfffffe6c
    4738:	705f0073 	subsvc	r0, pc, r3, ror r0	; <UNPREDICTABLE>
    473c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    4740:	00695f66 	rsbeq	r5, r9, r6, ror #30
    4744:	5f766f69 	svcpl	0x00766f69
    4748:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    474c:	6f697500 	svcvs	0x00697500
    4750:	766f695f 			; <UNDEFINED> instruction: 0x766f695f
    4754:	72657a00 	rsbvc	r7, r5, #0, 20
    4758:	6f69006f 	svcvs	0x0069006f
    475c:	656c5f76 	strbvs	r5, [ip, #-3958]!	; 0xfffff08a
    4760:	656e006e 	strbvs	r0, [lr, #-110]!	; 0xffffff92
    4764:	7a697377 	bvc	1a61548 <_Min_Stack_Size+0x1a61348>
    4768:	6f640065 	svcvs	0x00640065
    476c:	6c00656e 	cfstr32vs	mvfx6, [r0], {110}	; 0x6e
    4770:	20676e6f 	rsbcs	r6, r7, pc, ror #28
    4774:	62756f64 	rsbsvs	r6, r5, #100, 30	; 0x190
    4778:	5f00656c 	svcpl	0x0000656c
    477c:	6975735f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    4780:	725f006f 	subsvc	r0, pc, #111	; 0x6f
    4784:	6c6c6165 	stfvse	f6, [ip], #-404	; 0xfffffe6c
    4788:	725f636f 	subsvc	r6, pc, #-1140850687	; 0xbc000001
    478c:	72706400 	rsbsvc	r6, r0, #0, 8
    4790:	70006365 	andvc	r6, r0, r5, ror #6
    4794:	645f7472 	ldrbvs	r7, [pc], #-1138	; 479c <_Min_Stack_Size+0x459c>
    4798:	00617461 	rsbeq	r7, r1, r1, ror #8
    479c:	73707865 	cmnvc	r0, #6619136	; 0x650000
    47a0:	5f007274 	svcpl	0x00007274
    47a4:	7073735f 	rsbsvc	r7, r3, pc, asr r3
    47a8:	5f737475 	svcpl	0x00737475
    47ac:	6c620072 	stclvs	0, cr0, [r2], #-456	; 0xfffffe38
    47b0:	006b6e61 	rsbeq	r6, fp, r1, ror #28
    47b4:	5f6f6975 	svcpl	0x006f6975
    47b8:	63766f69 	cmnvs	r6, #420	; 0x1a4
    47bc:	7400746e 	strvc	r7, [r0], #-1134	; 0xfffffb92
    47c0:	5f706d65 	svcpl	0x00706d65
    47c4:	64780069 	ldrbtvs	r0, [r8], #-105	; 0xffffff97
    47c8:	00736769 	rsbseq	r6, r3, r9, ror #14
    47cc:	7571755f 	ldrbvc	r7, [r1, #-1375]!	; 0xfffffaa1
    47d0:	2e006461 	cdpcs	4, 0, cr6, cr0, cr1, {3}
    47d4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    47d8:	2f2e2e2f 	svccs	0x002e2e2f
    47dc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    47e0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    47e4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    47e8:	2f62696c 	svccs	0x0062696c
    47ec:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    47f0:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    47f4:	6e2f6f69 	cdpvs	15, 2, cr6, cr15, cr9, {3}
    47f8:	2d6f6e61 	stclcs	14, cr6, [pc, #-388]!	; 467c <_Min_Stack_Size+0x447c>
    47fc:	72706676 	rsbsvc	r6, r0, #123731968	; 0x7600000
    4800:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    4804:	632e695f 			; <UNDEFINED> instruction: 0x632e695f
    4808:	6e6f6e00 	cdpvs	14, 6, cr6, cr15, cr0, {0}
    480c:	6d756e5f 	ldclvs	14, cr6, [r5, #-380]!	; 0xfffffe84
    4810:	5f726562 	svcpl	0x00726562
    4814:	69736f6e 	ldmdbvs	r3!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4818:	72006e67 	andvc	r6, r0, #1648	; 0x670
    481c:	736c6165 	cmnvc	ip, #1073741849	; 0x40000019
    4820:	756e007a 	strbvc	r0, [lr, #-122]!	; 0xffffff86
    4824:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    4828:	735f7500 	cmpvc	pc, #0, 10
    482c:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
    4830:	61647000 	cmnvs	r4, r0
    4834:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
    4838:	6e6f6c5f 	mcrvs	12, 3, r6, cr15, cr15, {2}
    483c:	705f0067 	subsvc	r0, pc, r7, rrx
    4840:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    4844:	6f635f66 	svcvs	0x00635f66
    4848:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
    484c:	636e6900 	cmnvs	lr, #0, 18
    4850:	2e2e0072 	mcrcs	0, 1, r0, cr14, cr2, {3}
    4854:	2f2e2e2f 	svccs	0x002e2e2f
    4858:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    485c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4860:	2f2e2e2f 	svccs	0x002e2e2f
    4864:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4868:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 46cc <_Min_Stack_Size+0x44cc>
    486c:	2f636269 	svccs	0x00636269
    4870:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    4874:	62732f74 	rsbsvs	r2, r3, #116, 30	; 0x1d0
    4878:	2e726b72 	vmovcs.s8	r6, d2[7]
    487c:	735f0063 	cmpvc	pc, #99	; 0x63
    4880:	006b7262 	rsbeq	r7, fp, r2, ror #4
    4884:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4888:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    488c:	2f2e2e2f 	svccs	0x002e2e2f
    4890:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4894:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    4898:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    489c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    48a0:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    48a4:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    48a8:	6d656d2f 	stclvs	13, cr6, [r5, #-188]!	; 0xffffff44
    48ac:	2e726863 	cdpcs	8, 7, cr6, cr2, cr3, {3}
    48b0:	72730063 	rsbsvc	r0, r3, #99	; 0x63
    48b4:	6f765f63 	svcvs	0x00765f63
    48b8:	2e006469 	cdpcs	4, 0, cr6, cr0, cr9, {3}
    48bc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    48c0:	2f2e2e2f 	svccs	0x002e2e2f
    48c4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    48c8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    48cc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    48d0:	2f62696c 	svccs	0x0062696c
    48d4:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    48d8:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    48dc:	2f676e69 	svccs	0x00676e69
    48e0:	6d6d656d 	cfstr64vs	mvdx6, [sp, #-436]!	; 0xfffffe4c
    48e4:	2e65766f 	cdpcs	6, 6, cr7, cr5, cr15, {3}
    48e8:	73640063 	cmnvc	r4, #99	; 0x63
    48ec:	6f765f74 	svcvs	0x00765f74
    48f0:	70006469 	andvc	r6, r0, r9, ror #8
    48f4:	5f6f745f 	svcpl	0x006f745f
    48f8:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
    48fc:	00636f6c 	rsbeq	r6, r3, ip, ror #30
    4900:	6c616d5f 	stclvs	13, cr6, [r1], #-380	; 0xfffffe84
    4904:	5f636f6c 	svcpl	0x00636f6c
    4908:	62617375 	rsbvs	r7, r1, #-738197503	; 0xd4000001
    490c:	735f656c 	cmpvc	pc, #108, 10	; 0x1b000000
    4910:	5f657a69 	svcpl	0x00657a69
    4914:	656e0072 	strbvs	r0, [lr, #-114]!	; 0xffffff8e
    4918:	6e6f7478 	mcrvs	4, 3, r7, cr15, cr8, {3}
    491c:	6c630065 	stclvs	0, cr0, [r3], #-404	; 0xfffffe6c
    4920:	756e6165 	strbvc	r6, [lr, #-357]!	; 0xfffffe9b
    4924:	6c675f70 	stclvs	15, cr5, [r7], #-448	; 0xfffffe40
    4928:	2e006575 	cfrshl64cs	mvdx0, mvdx5, r6
    492c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4930:	2f2e2e2f 	svccs	0x002e2e2f
    4934:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4938:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    493c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4940:	2f62696c 	svccs	0x0062696c
    4944:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    4948:	6565722f 	strbvs	r7, [r5, #-559]!	; 0xfffffdd1
    494c:	722f746e 	eorvc	r7, pc, #1845493760	; 0x6e000000
    4950:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    4954:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
    4958:	6f736968 	svcvs	0x00736968
    495c:	5f00656e 	svcpl	0x0000656e
    4960:	6c636572 	cfstr64vs	mvdx6, [r3], #-456	; 0xfffffe38
    4964:	5f6d6961 	svcpl	0x006d6961
    4968:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    496c:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
    4970:	6f5f657a 	svcvs	0x005f657a
    4974:	666f5f72 	uqsub16vs	r5, pc, r2	; <UNPREDICTABLE>
    4978:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    497c:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
    4980:	34204320 	strtcc	r4, [r0], #-800	; 0xfffffce0
    4984:	332e392e 			; <UNDEFINED> instruction: 0x332e392e
    4988:	31303220 	teqcc	r0, r0, lsr #4
    498c:	32353035 	eorscc	r3, r5, #53	; 0x35
    4990:	70282039 	eorvc	r2, r8, r9, lsr r0
    4994:	65726572 	ldrbvs	r6, [r2, #-1394]!	; 0xfffffa8e
    4998:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    499c:	2d202965 	stccs	9, cr2, [r0, #-404]!	; 0xfffffe6c
    49a0:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
    49a4:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
    49a8:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
    49ac:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
    49b0:	2d37766d 	ldccs	6, cr7, [r7, #-436]!	; 0xfffffe4c
    49b4:	672d206d 	strvs	r2, [sp, -sp, rrx]!
    49b8:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    49bc:	20324f2d 	eorscs	r4, r2, sp, lsr #30
    49c0:	20324f2d 	eorscs	r4, r2, sp, lsr #30
    49c4:	20324f2d 	eorscs	r4, r2, sp, lsr #30
    49c8:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0xfffff9d3
    49cc:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    49d0:	732d6e6f 			; <UNDEFINED> instruction: 0x732d6e6f
    49d4:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    49d8:	20736e6f 	rsbscs	r6, r3, pc, ror #28
    49dc:	6164662d 	cmnvs	r4, sp, lsr #12
    49e0:	732d6174 			; <UNDEFINED> instruction: 0x732d6174
    49e4:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    49e8:	00736e6f 	rsbseq	r6, r3, pc, ror #28
    49ec:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    49f0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    49f4:	2f2e2e2f 	svccs	0x002e2e2f
    49f8:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 4948 <_Min_Stack_Size+0x4748>
    49fc:	6c676269 	sfmvs	f6, 2, [r7], #-420	; 0xfffffe5c
    4a00:	2f73736f 	svccs	0x0073736f
    4a04:	6e62696c 	cdpvs	9, 6, cr6, cr2, cr12, {3}
    4a08:	7379736f 	cmnvc	r9, #-1140850687	; 0xbc000001
    4a0c:	7262732f 	rsbvc	r7, r2, #-1140850688	; 0xbc000000
    4a10:	00632e6b 	rsbeq	r2, r3, fp, ror #28
    4a14:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    4a18:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    4a1c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4a20:	7a352d62 	bvc	d4ffb0 <_Min_Stack_Size+0xd4fdb0>
    4a24:	45787077 	ldrbmi	r7, [r8, #-119]!	; 0xffffff89
    4a28:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4a2c:	2d62696c 	stclcs	9, cr6, [r2, #-432]!	; 0xfffffe50
    4a30:	2e322e32 	mrccs	14, 1, r2, cr2, cr2, {1}
    4a34:	69672b30 	stmdbvs	r7!, {r4, r5, r8, r9, fp, sp}^
    4a38:	31303274 	teqcc	r0, r4, ror r2
    4a3c:	33383035 	teqcc	r8, #53	; 0x35
    4a40:	61352e30 	teqvs	r5, r0, lsr lr
    4a44:	33356433 	teqcc	r5, #855638016	; 0x33000000
    4a48:	75622f36 	strbvc	r2, [r2, #-3894]!	; 0xfffff0ca
    4a4c:	2f646c69 	svccs	0x00646c69
    4a50:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4a54:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4a58:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4a5c:	72612f69 	rsbvc	r2, r1, #420	; 0x1a4
    4a60:	2d37766d 	ldccs	6, cr7, [r7, #-436]!	; 0xfffffe4c
    4a64:	696c2f6d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
    4a68:	6f6c6762 	svcvs	0x006c6762
    4a6c:	6c2f7373 	stcvs	3, cr7, [pc], #-460	; 48a8 <_Min_Stack_Size+0x46a8>
    4a70:	6f6e6269 	svcvs	0x006e6269
    4a74:	00737973 	rsbseq	r7, r3, r3, ror r9
    4a78:	76657270 			; <UNDEFINED> instruction: 0x76657270
    4a7c:	6165685f 	cmnvs	r5, pc, asr r8
    4a80:	6e655f70 	mcrvs	15, 3, r5, cr5, cr0, {3}
    4a84:	Address 0x0000000000004a84 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <_Min_Stack_Size+0x10d0b24>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	392e343a 	stmdbcc	lr!, {r1, r3, r4, r5, sl, ip, sp}
   c:	732b332e 			; <UNDEFINED> instruction: 0x732b332e
  10:	33326e76 	teqcc	r2, #1888	; 0x760
  14:	37373131 			; <UNDEFINED> instruction: 0x37373131
  18:	2029312d 	eorcs	r3, r9, sp, lsr #2
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
  {
    bitstatus = SET;
  1c:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
  }
  else
  {
    bitstatus = RESET;
  20:	30322033 	eorscc	r2, r2, r3, lsr r0
  }
  /* Return the flag status */
  return bitstatus;
  24:	35303531 	ldrcc	r3, [r0, #-1329]!	; 0xfffffacf
}
  28:	28203932 	stmdacs	r0!, {r1, r4, r5, r8, fp, ip, sp}
  2c:	72657270 	rsbvc	r7, r5, #112, 4
  30:	61656c65 	cmnvs	r5, r5, ror #24
  34:	00296573 	eoreq	r6, r9, r3, ror r5
  38:	3a434347 	bcc	10d0d5c <_Min_Stack_Size+0x10d0b5c>
  3c:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
  40:	392e343a 	stmdbcc	lr!, {r1, r3, r4, r5, sl, ip, sp}
  44:	732b332e 			; <UNDEFINED> instruction: 0x732b332e
  48:	32326e76 	eorscc	r6, r2, #1888	; 0x760
  4c:	37393237 			; <UNDEFINED> instruction: 0x37393237
  50:	2029312d 	eorcs	r3, r9, sp, lsr #2
  54:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
  58:	30322033 	eorscc	r2, r2, r3, lsr r0
  5c:	35303531 	ldrcc	r3, [r0, #-1329]!	; 0xfffffacf
  60:	28203932 	stmdacs	r0!, {r1, r4, r5, r8, fp, ip, sp}
  64:	72657270 	rsbvc	r7, r5, #112, 4
  68:	61656c65 	cmnvs	r5, r5, ror #24
  6c:	00296573 	eoreq	r6, r9, r3, ror r5

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000018 	andeq	r0, r0, r8, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	0800010c 	stmdaeq	r0, {r2, r3, r8}
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
  {
    bitstatus = SET;
      1c:	00000068 	andeq	r0, r0, r8, rrx
  }
  else
  {
    bitstatus = RESET;
      20:	40080e41 	andmi	r0, r8, r1, asr #28
  }
  /* Return the flag status */
  return bitstatus;
      24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
}
      28:	070d4101 	streq	r4, [sp, -r1, lsl #2]
      2c:	00000024 	andeq	r0, r0, r4, lsr #32
	...
      38:	000000dc 	ldrdeq	r0, [r0], -ip
      3c:	40040e41 	andmi	r0, r4, r1, asr #28
      40:	0e410187 	dvfeqd	f0, f1, f7
      44:	070d4118 	smladeq	sp, r8, r1, r4
      48:	040e5c02 	streq	r5, [lr], #-3074	; 0xfffff3fe
      4c:	420d0d41 	andmi	r0, sp, #4160	; 0x1040
      50:	000e40c7 	andeq	r4, lr, r7, asr #1
      54:	00000018 	andeq	r0, r0, r8, lsl r0
      58:	00000000 	andeq	r0, r0, r0
      5c:	08000174 	stmdaeq	r0, {r2, r4, r5, r6, r8}
      60:	0000000a 	andeq	r0, r0, sl
      64:	40080e41 	andmi	r0, r8, r1, asr #28
      68:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      6c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
      70:	00000024 	andeq	r0, r0, r4, lsr #32
      74:	00000000 	andeq	r0, r0, r0
      78:	08000180 	stmdaeq	r0, {r7, r8}
      7c:	00000100 	andeq	r0, r0, r0, lsl #2
      80:	40040e41 	andmi	r0, r4, r1, asr #28
      84:	0e410187 	dvfeqd	f0, f1, f7
      88:	070d4110 	smladeq	sp, r0, r1, r4
      8c:	040e7402 	streq	r7, [lr], #-1026	; 0xfffffbfe
      90:	420d0d41 	andmi	r0, sp, #4160	; 0x1040
      94:	000e40c7 	andeq	r4, lr, r7, asr #1
      98:	0000000c 	andeq	r0, r0, ip
      9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      a0:	7c020001 	stcvc	0, cr0, [r2], {1}
      a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      a8:	00000024 	andeq	r0, r0, r4, lsr #32
      ac:	00000098 	muleq	r0, r8, r0
      b0:	08000280 	stmdaeq	r0, {r7, r9}
      b4:	00000078 	andeq	r0, r0, r8, ror r0
      b8:	40080e41 	andmi	r0, r8, r1, asr #28
      bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      c0:	100e4101 	andne	r4, lr, r1, lsl #2
      c4:	6f070d41 	svcvs	0x00070d41
      c8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
      cc:	0000000d 	andeq	r0, r0, sp
      d0:	00000024 	andeq	r0, r0, r4, lsr #32
      d4:	00000098 	muleq	r0, r8, r0
      d8:	080002f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9}
      dc:	00000060 	andeq	r0, r0, r0, rrx
      e0:	40080e41 	andmi	r0, r8, r1, asr #28
      e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      e8:	180e4101 	stmdane	lr, {r0, r8, lr}
      ec:	65070d41 	strvs	r0, [r7, #-3393]	; 0xfffff2bf
      f0:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
      f4:	0000000d 	andeq	r0, r0, sp
      f8:	00000024 	andeq	r0, r0, r4, lsr #32
      fc:	00000098 	muleq	r0, r8, r0
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }
  
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
     100:	08000358 	stmdaeq	r0, {r3, r4, r6, r8, r9}
     104:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     108:	40080e41 	andmi	r0, r8, r1, asr #28
  {
    /* Set the default values */
    i2sdiv = 2;
     10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    i2sodd = 0;
     110:	180e4101 	stmdane	lr, {r0, r8, lr}
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
     114:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     118:	41080e4a 	tstmi	r8, sl, asr #28
     11c:	00000d0d 	andeq	r0, r0, sp, lsl #26
     120:	00000024 	andeq	r0, r0, r4, lsr #32
     124:	00000098 	muleq	r0, r8, r0
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     128:	00000000 	andeq	r0, r0, r0
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
     12c:	0000009c 	muleq	r0, ip, r0
     130:	40080e41 	andmi	r0, r8, r1, asr #28
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
     134:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
     138:	180e4101 	stmdane	lr, {r0, r8, lr}
     13c:	02070d41 	andeq	r0, r7, #4160	; 0x1040

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     140:	41080e40 	tstmi	r8, r0, asr #28
     144:	00000d0d 	andeq	r0, r0, sp, lsl #26
     148:	00000024 	andeq	r0, r0, r4, lsr #32
     14c:	00000098 	muleq	r0, r8, r0
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;   
     150:	08000408 	stmdaeq	r0, {r3, sl}
     154:	00000084 	andeq	r0, r0, r4, lsl #1
}
     158:	40080e41 	andmi	r0, r8, r1, asr #28
     15c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     160:	100e4101 	andne	r4, lr, r1, lsl #2
         break;
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
         *(uint16_t*) arg = getSn_KPALVTR(sn);
         break;
     164:	77070d41 	strvc	r0, [r7, -r1, asr #26]
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     168:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     16c:	0000000d 	andeq	r0, r0, sp
     170:	00000028 	andeq	r0, r0, r8, lsr #32
     174:	00000098 	muleq	r0, r8, r0
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     178:	0800048c 	stmdaeq	r0, {r2, r3, r7, sl}
     17c:	000001a8 	andeq	r0, r0, r8, lsr #3
     180:	400c0e41 	andmi	r0, ip, r1, asr #28
     184:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
     188:	018e4002 	orreq	r4, lr, r2
     18c:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     190:	c502070d 	strgt	r0, [r2, #-1805]	; 0xfffff8f3
     194:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     198:	0000000d 	andeq	r0, r0, sp
     19c:	00000028 	andeq	r0, r0, r8, lsr #32
         break;
     1a0:	00000098 	muleq	r0, r8, r0
      case SO_REMAINSIZE:
         if(getSn_MR(sn) == Sn_MR_TCP)
     1a4:	08000634 	stmdaeq	r0, {r2, r4, r5, r9, sl}
     1a8:	00000082 	andeq	r0, r0, r2, lsl #1
     1ac:	400c0e41 	andmi	r0, ip, r1, asr #28
     1b0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     1b4:	018e4002 	orreq	r4, lr, r2
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1b8:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
     1bc:	7c20070c 	stcvc	7, cr0, [r0], #-48	; 0xffffffd0
     1c0:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     1c4:	0000000d 	andeq	r0, r0, sp
         else
            *(uint16_t*)arg = sock_remained_size[sn];
     1c8:	00000028 	andeq	r0, r0, r8, lsr #32
     1cc:	00000098 	muleq	r0, r8, r0
     1d0:	00000000 	andeq	r0, r0, r0
         break;
     1d4:	000000c8 	andeq	r0, r0, r8, asr #1
      case SO_PACKINFO:
         CHECK_SOCKMODE(Sn_MR_TCP);
     1d8:	400c0e41 	andmi	r0, ip, r1, asr #28
     1dc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     1e0:	018e4002 	orreq	r4, lr, r2
     1e4:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     1e8:	5802070d 	stmdapl	r2, {r0, r2, r3, r8, r9, sl}
     1ec:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     1f0:	0000000d 	andeq	r0, r0, sp
         *(uint8_t*)arg = sock_pack_info[sn];
     1f4:	0000000c 	andeq	r0, r0, ip
     1f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
         break;
     1fc:	7c020001 	stcvc	0, cr0, [r2], {1}
      default:
         return SOCKERR_SOCKOPT;
     200:	000d0c0e 	andeq	r0, sp, lr, lsl #24
   }
   return SOCK_OK;
     204:	00000028 	andeq	r0, r0, r8, lsr #32
}
     208:	000001f4 	strdeq	r0, [r0], -r4
     20c:	080006b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl}
     210:	000001f8 	strdeq	r0, [r0], -r8
     214:	400c0e41 	andmi	r0, ip, r1, asr #28
     218:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     21c:	018e4002 	orreq	r4, lr, r2
     220:	41180e41 	tstmi	r8, r1, asr #28
     224:	ed02070d 	stc	7, cr0, [r2, #-52]	; 0xffffffcc
     228:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
       fixed_header[1] = fixed_header[1] | 0x80;
       // second byte is number of 128s
       fixed_header[2] = remainLen / 128;
   }

	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     22c:	0000000d 	andeq	r0, r0, sp
     230:	00000024 	andeq	r0, r0, r4, lsr #32
     234:	000001f4 	strdeq	r0, [r0], -r4
     238:	080008b0 	stmdaeq	r0, {r4, r5, r7, fp}
     23c:	000000b8 	strheq	r0, [r0], -r8
     240:	40080e41 	andmi	r0, r8, r1, asr #28
     244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     248:	100e4101 	andne	r4, lr, r1, lsl #2
     24c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
	memset(packet, 0, sizeof(packet));
     250:	41080e51 	tstmi	r8, r1, asr lr
     254:	00000d0d 	andeq	r0, r0, sp, lsl #26
     258:	00000024 	andeq	r0, r0, r4, lsr #32
	memcpy(packet, fixed_header, sizeof(fixed_header));
     25c:	000001f4 	strdeq	r0, [r0], -r4
     260:	00000000 	andeq	r0, r0, r0
     264:	000000c4 	andeq	r0, r0, r4, asr #1
     268:	40080e41 	andmi	r0, r8, r1, asr #28
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     270:	100e4101 	andne	r4, lr, r1, lsl #2
     274:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     278:	41080e5d 	tstmi	r8, sp, asr lr
     27c:	00000d0d 	andeq	r0, r0, sp, lsl #26
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     280:	00000024 	andeq	r0, r0, r4, lsr #32
     284:	000001f4 	strdeq	r0, [r0], -r4
     288:	08000968 	stmdaeq	r0, {r3, r5, r6, r8, fp}
     28c:	00000164 	andeq	r0, r0, r4, ror #2
     290:	40080e41 	andmi	r0, r8, r1, asr #28
     294:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}

	// Send the packet
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     298:	100e4101 	andne	r4, lr, r1, lsl #2
     29c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     2a0:	41080eab 	smlatbmi	r8, fp, lr, r0
     2a4:	00000d0d 	andeq	r0, r0, sp, lsl #26
     2a8:	00000024 	andeq	r0, r0, r4, lsr #32
     2ac:	000001f4 	strdeq	r0, [r0], -r4
		return -1;
     2b0:	00000000 	andeq	r0, r0, r0
	}

	return 1;
     2b4:	000000ec 	andeq	r0, r0, ip, ror #1
     2b8:	40080e41 	andmi	r0, r8, r1, asr #28
}
     2bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2c0:	100e4101 	andne	r4, lr, r1, lsl #2
     2c4:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     2c8:	41080e6c 	tstmi	r8, ip, ror #28
     2cc:	00000d0d 	andeq	r0, r0, sp, lsl #26
     2d0:	00000024 	andeq	r0, r0, r4, lsr #32
     2d4:	000001f4 	strdeq	r0, [r0], -r4
     2d8:	08000acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp}
     2dc:	000001f4 	strdeq	r0, [r0], -r4
     2e0:	40080e41 	andmi	r0, r8, r1, asr #28
     2e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2e8:	180e4101 	stmdane	lr, {r0, r8, lr}
     2ec:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     2f0:	41080ef1 	strdmi	r0, [r8, -r1]
     2f4:	00000d0d 	andeq	r0, r0, sp, lsl #26
     2f8:	00000028 	andeq	r0, r0, r8, lsr #32
     2fc:	000001f4 	strdeq	r0, [r0], -r4
     300:	08000cc0 	stmdaeq	r0, {r6, r7, sl, fp}
     304:	0000016c 	andeq	r0, r0, ip, ror #2
     308:	400c0e41 	andmi	r0, ip, r1, asr #28
     30c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     310:	018e4002 	orreq	r4, lr, r2
     314:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     318:	ae02070d 	cdpge	7, 0, cr0, cr2, cr13, {0}
     31c:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     320:	0000000d 	andeq	r0, r0, sp
     324:	00000024 	andeq	r0, r0, r4, lsr #32
     328:	000001f4 	strdeq	r0, [r0], -r4
     32c:	08000e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp}
     330:	00000210 	andeq	r0, r0, r0, lsl r2
     334:	40080e41 	andmi	r0, r8, r1, asr #28
     338:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     33c:	200e4101 	andcs	r4, lr, r1, lsl #2
     340:	03070d41 	movweq	r0, #32065	; 0x7d41
     344:	080e0100 	stmdaeq	lr, {r8}
     348:	000d0d41 	andeq	r0, sp, r1, asr #26
     34c:	00000024 	andeq	r0, r0, r4, lsr #32
     350:	000001f4 	strdeq	r0, [r0], -r4
     354:	0800103c 	stmdaeq	r0, {r2, r3, r4, r5, ip}
     358:	00000304 	andeq	r0, r0, r4, lsl #6
     35c:	40080e41 	andmi	r0, r8, r1, asr #28
     360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     364:	280e4101 	stmdacs	lr, {r0, r8, lr}
     368:	03070d41 	movweq	r0, #32065	; 0x7d41
     36c:	080e0177 	stmdaeq	lr, {r0, r1, r2, r4, r5, r6, r8}
     370:	000d0d41 	andeq	r0, sp, r1, asr #26
     374:	00000024 	andeq	r0, r0, r4, lsr #32
     378:	000001f4 	strdeq	r0, [r0], -r4
     37c:	08001340 	stmdaeq	r0, {r6, r8, r9, ip}
     380:	000001a8 	andeq	r0, r0, r8, lsr #3
     384:	40080e41 	andmi	r0, r8, r1, asr #28
     388:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     38c:	180e4101 	stmdane	lr, {r0, r8, lr}
     390:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     394:	41080ecd 	smlabtmi	r8, sp, lr, r0
     398:	00000d0d 	andeq	r0, r0, sp, lsl #26
     39c:	00000024 	andeq	r0, r0, r4, lsr #32
     3a0:	000001f4 	strdeq	r0, [r0], -r4
     3a4:	00000000 	andeq	r0, r0, r0
     3a8:	000001fc 	strdeq	r0, [r0], -ip
     3ac:	40080e41 	andmi	r0, r8, r1, asr #28
     3b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3b4:	180e4101 	stmdane	lr, {r0, r8, lr}
     3b8:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     3bc:	41080ef9 	strdmi	r0, [r8, -r9]
     3c0:	00000d0d 	andeq	r0, r0, sp, lsl #26
     3c4:	00000028 	andeq	r0, r0, r8, lsr #32
     3c8:	000001f4 	strdeq	r0, [r0], -r4
     3cc:	00000000 	andeq	r0, r0, r0
     3d0:	00000218 	andeq	r0, r0, r8, lsl r2
     3d4:	400c0e41 	andmi	r0, ip, r1, asr #28
     3d8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     3dc:	018e4002 	orreq	r4, lr, r2
     3e0:	41180e41 	tstmi	r8, r1, asr #28
     3e4:	0203070d 	andeq	r0, r3, #3407872	; 0x340000
     3e8:	410c0e01 	tstmi	ip, r1, lsl #28
     3ec:	00000d0d 	andeq	r0, r0, sp, lsl #26
     3f0:	0000000c 	andeq	r0, r0, ip
     3f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     3f8:	7c020001 	stcvc	0, cr0, [r2], {1}
     3fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     400:	00000020 	andeq	r0, r0, r0, lsr #32
     404:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     408:	080014e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip}
     40c:	0000000c 	andeq	r0, r0, ip
     410:	40040e41 	andmi	r0, r4, r1, asr #28
     414:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     418:	0d0d4107 	stfeqs	f4, [sp, #-28]	; 0xffffffe4
     41c:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
     420:	00000000 	andeq	r0, r0, r0
     424:	00000020 	andeq	r0, r0, r0, lsr #32
     428:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     42c:	080014f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, ip}
     430:	0000000c 	andeq	r0, r0, ip
     434:	40040e41 	andmi	r0, r4, r1, asr #28
     438:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     43c:	0d0d4107 	stfeqs	f4, [sp, #-28]	; 0xffffffe4
     440:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
     444:	00000000 	andeq	r0, r0, r0
     448:	00000020 	andeq	r0, r0, r0, lsr #32
     44c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     450:	08001500 	stmdaeq	r0, {r8, sl, ip}
     454:	0000000c 	andeq	r0, r0, ip
     458:	40040e41 	andmi	r0, r4, r1, asr #28
     45c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     460:	0d0d4107 	stfeqs	f4, [sp, #-28]	; 0xffffffe4
     464:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
     468:	00000000 	andeq	r0, r0, r0
     46c:	00000020 	andeq	r0, r0, r0, lsr #32
     470:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     474:	0800150c 	stmdaeq	r0, {r2, r3, r8, sl, ip}
     478:	0000000c 	andeq	r0, r0, ip
     47c:	40040e41 	andmi	r0, r4, r1, asr #28
     480:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     484:	0d0d4107 	stfeqs	f4, [sp, #-28]	; 0xffffffe4
     488:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
     48c:	00000000 	andeq	r0, r0, r0
     490:	00000024 	andeq	r0, r0, r4, lsr #32
     494:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     498:	08001518 	stmdaeq	r0, {r3, r4, r8, sl, ip}
     49c:	0000001a 	andeq	r0, r0, sl, lsl r0
     4a0:	40040e41 	andmi	r0, r4, r1, asr #28
     4a4:	0e410187 	dvfeqd	f0, f1, f7
     4a8:	070d4110 	smladeq	sp, r0, r1, r4
     4ac:	41040e46 	tstmi	r4, r6, asr #28
     4b0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
     4b4:	00000e40 	andeq	r0, r0, r0, asr #28
     4b8:	00000024 	andeq	r0, r0, r4, lsr #32
     4bc:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     4c0:	08001534 	stmdaeq	r0, {r2, r4, r5, r8, sl, ip}
     4c4:	0000001c 	andeq	r0, r0, ip, lsl r0
     4c8:	40040e41 	andmi	r0, r4, r1, asr #28
     4cc:	0e410187 	dvfeqd	f0, f1, f7
     4d0:	070d4110 	smladeq	sp, r0, r1, r4
     4d4:	41040e47 	tstmi	r4, r7, asr #28
     4d8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
     4dc:	00000e40 	andeq	r0, r0, r0, asr #28
     4e0:	00000020 	andeq	r0, r0, r0, lsr #32
     4e4:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     4e8:	08001550 	stmdaeq	r0, {r4, r6, r8, sl, ip}
     4ec:	00000010 	andeq	r0, r0, r0, lsl r0
     4f0:	40040e41 	andmi	r0, r4, r1, asr #28
     4f4:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     4f8:	0d0d4307 	stceq	3, cr4, [sp, #-28]	; 0xffffffe4
     4fc:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
     500:	00000000 	andeq	r0, r0, r0
     504:	00000024 	andeq	r0, r0, r4, lsr #32
     508:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     50c:	08001560 	stmdaeq	r0, {r5, r6, r8, sl, ip}
     510:	00000014 	andeq	r0, r0, r4, lsl r0
     514:	40040e41 	andmi	r0, r4, r1, asr #28
     518:	0e410187 	dvfeqd	f0, f1, f7
     51c:	070d4110 	smladeq	sp, r0, r1, r4
     520:	41040e43 	tstmi	r4, r3, asr #28
     524:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
     528:	00000e40 	andeq	r0, r0, r0, asr #28
     52c:	00000024 	andeq	r0, r0, r4, lsr #32
     530:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     534:	00000000 	andeq	r0, r0, r0
     538:	00000048 	andeq	r0, r0, r8, asr #32
     53c:	40040e41 	andmi	r0, r4, r1, asr #28
     540:	0e410187 	dvfeqd	f0, f1, f7
     544:	070d4110 	smladeq	sp, r0, r1, r4
     548:	41040e56 	tstmi	r4, r6, asr lr
     54c:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
     550:	00000e40 	andeq	r0, r0, r0, asr #28
     554:	00000024 	andeq	r0, r0, r4, lsr #32
     558:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     55c:	08001574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, ip}
     560:	00000048 	andeq	r0, r0, r8, asr #32
     564:	40040e41 	andmi	r0, r4, r1, asr #28
     568:	0e410187 	dvfeqd	f0, f1, f7
     56c:	070d4110 	smladeq	sp, r0, r1, r4
     570:	41040e56 	tstmi	r4, r6, asr lr
     574:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
     578:	00000e40 	andeq	r0, r0, r0, asr #28
     57c:	00000024 	andeq	r0, r0, r4, lsr #32
     580:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     584:	00000000 	andeq	r0, r0, r0
     588:	00000054 	andeq	r0, r0, r4, asr r0
     58c:	40040e41 	andmi	r0, r4, r1, asr #28
     590:	0e410187 	dvfeqd	f0, f1, f7
     594:	070d4110 	smladeq	sp, r0, r1, r4
     598:	41040e5d 	tstmi	r4, sp, asr lr
     59c:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
     5a0:	00000e40 	andeq	r0, r0, r0, asr #28
     5a4:	00000024 	andeq	r0, r0, r4, lsr #32
     5a8:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     5ac:	080015bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, ip}
     5b0:	00000054 	andeq	r0, r0, r4, asr r0
     5b4:	40040e41 	andmi	r0, r4, r1, asr #28
     5b8:	0e410187 	dvfeqd	f0, f1, f7
     5bc:	070d4110 	smladeq	sp, r0, r1, r4
     5c0:	41040e5d 	tstmi	r4, sp, asr lr
     5c4:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
     5c8:	00000e40 	andeq	r0, r0, r0, asr #28
     5cc:	00000028 	andeq	r0, r0, r8, lsr #32
     5d0:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     5d4:	08001610 	stmdaeq	r0, {r4, r9, sl, ip}
     5d8:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     5dc:	400c0e41 	andmi	r0, ip, r1, asr #28
     5e0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     5e4:	018e4002 	orreq	r4, lr, r2
     5e8:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
     5ec:	d402070d 	strle	r0, [r2], #-1805	; 0xfffff8f3
     5f0:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     5f4:	0000000d 	andeq	r0, r0, sp
     5f8:	00000024 	andeq	r0, r0, r4, lsr #32
     5fc:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     600:	080017c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip}
     604:	0000007c 	andeq	r0, r0, ip, ror r0
     608:	40080e41 	andmi	r0, r8, r1, asr #28
     60c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     610:	100e4101 	andne	r4, lr, r1, lsl #2
     614:	79070d41 	stmdbvc	r7, {r0, r6, r8, sl, fp}
     618:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     61c:	0000000d 	andeq	r0, r0, sp
     620:	00000024 	andeq	r0, r0, r4, lsr #32
     624:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     628:	08001844 	stmdaeq	r0, {r2, r6, fp, ip}
     62c:	00000096 	muleq	r0, r6, r0
     630:	40080e41 	andmi	r0, r8, r1, asr #28
     634:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     638:	200e4101 	andcs	r4, lr, r1, lsl #2
     63c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     640:	41080e46 	tstmi	r8, r6, asr #28
     644:	00000d0d 	andeq	r0, r0, sp, lsl #26
     648:	00000024 	andeq	r0, r0, r4, lsr #32
     64c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     650:	080018dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, ip}
     654:	00000112 	andeq	r0, r0, r2, lsl r1
     658:	40080e41 	andmi	r0, r8, r1, asr #28
     65c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     660:	180e4101 	stmdane	lr, {r0, r8, lr}
     664:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     668:	41080e84 	smlabbmi	r8, r4, lr, r0
     66c:	00000d0d 	andeq	r0, r0, sp, lsl #26
     670:	00000024 	andeq	r0, r0, r4, lsr #32
     674:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     678:	080019f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, ip}
     67c:	0000003a 	andeq	r0, r0, sl, lsr r0
     680:	40080e41 	andmi	r0, r8, r1, asr #28
     684:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     688:	180e4101 	stmdane	lr, {r0, r8, lr}
     68c:	58070d41 	stmdapl	r7, {r0, r6, r8, sl, fp}
     690:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     694:	0000000d 	andeq	r0, r0, sp
     698:	00000024 	andeq	r0, r0, r4, lsr #32
     69c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     6a0:	08001a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, ip}
     6a4:	0000004a 	andeq	r0, r0, sl, asr #32
     6a8:	40080e41 	andmi	r0, r8, r1, asr #28
     6ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6b0:	100e4101 	andne	r4, lr, r1, lsl #2
     6b4:	60070d41 	andvs	r0, r7, r1, asr #26
     6b8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     6bc:	0000000d 	andeq	r0, r0, sp
     6c0:	00000024 	andeq	r0, r0, r4, lsr #32
     6c4:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     6c8:	08001a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp, ip}
     6cc:	00000034 	andeq	r0, r0, r4, lsr r0
     6d0:	40080e41 	andmi	r0, r8, r1, asr #28
     6d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6d8:	180e4101 	stmdane	lr, {r0, r8, lr}
     6dc:	55070d41 	strpl	r0, [r7, #-3393]	; 0xfffff2bf
     6e0:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     6e4:	0000000d 	andeq	r0, r0, sp
     6e8:	00000024 	andeq	r0, r0, r4, lsr #32
     6ec:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     6f0:	08001aac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp, ip}
     6f4:	00000046 	andeq	r0, r0, r6, asr #32
     6f8:	40080e41 	andmi	r0, r8, r1, asr #28
     6fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     700:	100e4101 	andne	r4, lr, r1, lsl #2
     704:	5e070d41 	cdppl	13, 0, cr0, cr7, cr1, {2}
     708:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     70c:	0000000d 	andeq	r0, r0, sp
     710:	00000024 	andeq	r0, r0, r4, lsr #32
     714:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     718:	08001af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip}
     71c:	0000002e 	andeq	r0, r0, lr, lsr #32
     720:	40080e41 	andmi	r0, r8, r1, asr #28
     724:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     728:	100e4101 	andne	r4, lr, r1, lsl #2
     72c:	52070d41 	andpl	r0, r7, #4160	; 0x1040
     730:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     734:	0000000d 	andeq	r0, r0, sp
     738:	00000024 	andeq	r0, r0, r4, lsr #32
     73c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     740:	08001b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, ip}
     744:	00000032 	andeq	r0, r0, r2, lsr r0
     748:	40080e41 	andmi	r0, r8, r1, asr #28
     74c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     750:	100e4101 	andne	r4, lr, r1, lsl #2
     754:	54070d41 	strpl	r0, [r7], #-3393	; 0xfffff2bf
     758:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     75c:	0000000d 	andeq	r0, r0, sp
     760:	00000024 	andeq	r0, r0, r4, lsr #32
     764:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     768:	08001b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, ip}
     76c:	0000004c 	andeq	r0, r0, ip, asr #32
     770:	40080e41 	andmi	r0, r8, r1, asr #28
     774:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     778:	100e4101 	andne	r4, lr, r1, lsl #2
     77c:	61070d41 	tstvs	r7, r1, asr #26
     780:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     784:	0000000d 	andeq	r0, r0, sp
     788:	00000024 	andeq	r0, r0, r4, lsr #32
     78c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     790:	08001ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp, ip}
     794:	00000082 	andeq	r0, r0, r2, lsl #1
     798:	40080e41 	andmi	r0, r8, r1, asr #28
     79c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7a0:	180e4101 	stmdane	lr, {r0, r8, lr}
     7a4:	7c070d41 	stcvc	13, cr0, [r7], {65}	; 0x41
     7a8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     7ac:	0000000d 	andeq	r0, r0, sp
     7b0:	00000024 	andeq	r0, r0, r4, lsr #32
     7b4:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     7b8:	08001c28 	stmdaeq	r0, {r3, r5, sl, fp, ip}
     7bc:	00000096 	muleq	r0, r6, r0
     7c0:	40080e41 	andmi	r0, r8, r1, asr #28
     7c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7c8:	180e4101 	stmdane	lr, {r0, r8, lr}
     7cc:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     7d0:	41080e46 	tstmi	r8, r6, asr #28
     7d4:	00000d0d 	andeq	r0, r0, sp, lsl #26
     7d8:	00000024 	andeq	r0, r0, r4, lsr #32
     7dc:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     7e0:	00000000 	andeq	r0, r0, r0
     7e4:	00000046 	andeq	r0, r0, r6, asr #32
     7e8:	40080e41 	andmi	r0, r8, r1, asr #28
     7ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7f0:	180e4101 	stmdane	lr, {r0, r8, lr}
     7f4:	5e070d41 	cdppl	13, 0, cr0, cr7, cr1, {2}
     7f8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     7fc:	0000000d 	andeq	r0, r0, sp
     800:	00000024 	andeq	r0, r0, r4, lsr #32
     804:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     808:	08001cc0 	stmdaeq	r0, {r6, r7, sl, fp, ip}
     80c:	00000092 	muleq	r0, r2, r0
     810:	40080e41 	andmi	r0, r8, r1, asr #28
     814:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     818:	180e4101 	stmdane	lr, {r0, r8, lr}
     81c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     820:	41080e44 	tstmi	r8, r4, asr #28
     824:	00000d0d 	andeq	r0, r0, sp, lsl #26
     828:	00000024 	andeq	r0, r0, r4, lsr #32
     82c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     830:	08001d54 	stmdaeq	r0, {r2, r4, r6, r8, sl, fp, ip}
     834:	0000007c 	andeq	r0, r0, ip, ror r0
     838:	40080e41 	andmi	r0, r8, r1, asr #28
     83c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     840:	100e4101 	andne	r4, lr, r1, lsl #2
     844:	75070d41 	strvc	r0, [r7, #-3393]	; 0xfffff2bf
     848:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     84c:	0000000d 	andeq	r0, r0, sp
     850:	00000024 	andeq	r0, r0, r4, lsr #32
     854:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     858:	08001dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip}
     85c:	0000007c 	andeq	r0, r0, ip, ror r0
     860:	40080e41 	andmi	r0, r8, r1, asr #28
     864:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     868:	100e4101 	andne	r4, lr, r1, lsl #2
     86c:	75070d41 	strvc	r0, [r7, #-3393]	; 0xfffff2bf
     870:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     874:	0000000d 	andeq	r0, r0, sp
     878:	00000024 	andeq	r0, r0, r4, lsr #32
     87c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     880:	08001e4c 	stmdaeq	r0, {r2, r3, r6, r9, sl, fp, ip}
     884:	00000044 	andeq	r0, r0, r4, asr #32
     888:	40080e41 	andmi	r0, r8, r1, asr #28
     88c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     890:	180e4101 	stmdane	lr, {r0, r8, lr}
     894:	5d070d41 	stcpl	13, cr0, [r7, #-260]	; 0xfffffefc
     898:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     89c:	0000000d 	andeq	r0, r0, sp
     8a0:	00000018 	andeq	r0, r0, r8, lsl r0
     8a4:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     8a8:	08001e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, ip}
     8ac:	00000010 	andeq	r0, r0, r0, lsl r0
     8b0:	40080e41 	andmi	r0, r8, r1, asr #28
     8b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8b8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     8bc:	00000024 	andeq	r0, r0, r4, lsr #32
     8c0:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     8c4:	08001ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip}
     8c8:	00000040 	andeq	r0, r0, r0, asr #32
     8cc:	40080e41 	andmi	r0, r8, r1, asr #28
     8d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8d4:	100e4101 	andne	r4, lr, r1, lsl #2
     8d8:	5b070d41 	blpl	1c3de4 <_Min_Stack_Size+0x1c3be4>
     8dc:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     8e0:	0000000d 	andeq	r0, r0, sp
     8e4:	00000024 	andeq	r0, r0, r4, lsr #32
     8e8:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     8ec:	08001ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip}
     8f0:	00000042 	andeq	r0, r0, r2, asr #32
     8f4:	400c0e41 	andmi	r0, ip, r1, asr #28
     8f8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     8fc:	018e4002 	orreq	r4, lr, r2
     900:	41180e41 	tstmi	r8, r1, asr #28
     904:	0e5c070d 	cdpeq	7, 5, cr0, cr12, cr13, {0}
     908:	0d0d410c 	stfeqs	f4, [sp, #-48]	; 0xffffffd0
     90c:	0000000c 	andeq	r0, r0, ip
     910:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     914:	7c020001 	stcvc	0, cr0, [r2], {1}
     918:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     91c:	00000024 	andeq	r0, r0, r4, lsr #32
     920:	0000090c 	andeq	r0, r0, ip, lsl #18
     924:	08001f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, ip}
     928:	00000068 	andeq	r0, r0, r8, rrx
     92c:	40080e41 	andmi	r0, r8, r1, asr #28
     930:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     934:	180e4101 	stmdane	lr, {r0, r8, lr}
     938:	6d070d41 	stcvs	13, cr0, [r7, #-260]	; 0xfffffefc
     93c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     940:	0000000d 	andeq	r0, r0, sp
     944:	00000024 	andeq	r0, r0, r4, lsr #32
     948:	0000090c 	andeq	r0, r0, ip, lsl #18
     94c:	08001f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, ip}
     950:	00000070 	andeq	r0, r0, r0, ror r0
     954:	40080e41 	andmi	r0, r8, r1, asr #28
     958:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     95c:	100e4101 	andne	r4, lr, r1, lsl #2
     960:	71070d41 	tstvc	r7, r1, asr #26
     964:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     968:	0000000d 	andeq	r0, r0, sp
     96c:	00000024 	andeq	r0, r0, r4, lsr #32
     970:	0000090c 	andeq	r0, r0, ip, lsl #18
     974:	08001ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
     978:	0000008c 	andeq	r0, r0, ip, lsl #1
     97c:	400c0e41 	andmi	r0, ip, r1, asr #28
     980:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     984:	018e4002 	orreq	r4, lr, r2
     988:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
     98c:	0e7f070d 	cdpeq	7, 7, cr0, cr15, cr13, {0}
     990:	0d0d410c 	stfeqs	f4, [sp, #-48]	; 0xffffffd0
     994:	00000024 	andeq	r0, r0, r4, lsr #32
     998:	0000090c 	andeq	r0, r0, ip, lsl #18
     99c:	08002088 	stmdaeq	r0, {r3, r7, sp}
     9a0:	00000094 	muleq	r0, r4, r0
     9a4:	40080e41 	andmi	r0, r8, r1, asr #28
     9a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9ac:	200e4101 	andcs	r4, lr, r1, lsl #2
     9b0:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     9b4:	41080e43 	tstmi	r8, r3, asr #28
     9b8:	00000d0d 	andeq	r0, r0, sp, lsl #26
     9bc:	00000028 	andeq	r0, r0, r8, lsr #32
     9c0:	0000090c 	andeq	r0, r0, ip, lsl #18
     9c4:	0800211c 	stmdaeq	r0, {r2, r3, r4, r8, sp}
     9c8:	00000096 	muleq	r0, r6, r0
     9cc:	400c0e41 	andmi	r0, ip, r1, asr #28
     9d0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     9d4:	018e4002 	orreq	r4, lr, r2
     9d8:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     9dc:	4602070d 	strmi	r0, [r2], -sp, lsl #14
     9e0:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     9e4:	0000000d 	andeq	r0, r0, sp
     9e8:	00000028 	andeq	r0, r0, r8, lsr #32
     9ec:	0000090c 	andeq	r0, r0, ip, lsl #18
     9f0:	080021b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sp}
     9f4:	00000096 	muleq	r0, r6, r0
     9f8:	400c0e41 	andmi	r0, ip, r1, asr #28
     9fc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     a00:	018e4002 	orreq	r4, lr, r2
     a04:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     a08:	4602070d 	strmi	r0, [r2], -sp, lsl #14
     a0c:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     a10:	0000000d 	andeq	r0, r0, sp
     a14:	00000028 	andeq	r0, r0, r8, lsr #32
     a18:	0000090c 	andeq	r0, r0, ip, lsl #18
     a1c:	0800224c 	stmdaeq	r0, {r2, r3, r6, r9, sp}
     a20:	000000b6 	strheq	r0, [r0], -r6
     a24:	400c0e41 	andmi	r0, ip, r1, asr #28
     a28:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     a2c:	018e4002 	orreq	r4, lr, r2
     a30:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     a34:	5602070d 	strpl	r0, [r2], -sp, lsl #14
     a38:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     a3c:	0000000d 	andeq	r0, r0, sp
     a40:	00000028 	andeq	r0, r0, r8, lsr #32
     a44:	0000090c 	andeq	r0, r0, ip, lsl #18
     a48:	08002304 	stmdaeq	r0, {r2, r8, r9, sp}
     a4c:	000000b6 	strheq	r0, [r0], -r6
     a50:	400c0e41 	andmi	r0, ip, r1, asr #28
     a54:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     a58:	018e4002 	orreq	r4, lr, r2
     a5c:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     a60:	5602070d 	strpl	r0, [r2], -sp, lsl #14
     a64:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     a68:	0000000d 	andeq	r0, r0, sp
     a6c:	00000028 	andeq	r0, r0, r8, lsr #32
     a70:	0000090c 	andeq	r0, r0, ip, lsl #18
     a74:	080023bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sp}
     a78:	0000008e 	andeq	r0, r0, lr, lsl #1
     a7c:	400c0e41 	andmi	r0, ip, r1, asr #28
     a80:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     a84:	018e4002 	orreq	r4, lr, r2
     a88:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     a8c:	4202070d 	andmi	r0, r2, #3407872	; 0x340000
     a90:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     a94:	0000000d 	andeq	r0, r0, sp
     a98:	0000000c 	andeq	r0, r0, ip
     a9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     aa0:	7c020001 	stcvc	0, cr0, [r2], {1}
     aa4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     aa8:	00000020 	andeq	r0, r0, r0, lsr #32
     aac:	00000a98 	muleq	r0, r8, sl
     ab0:	0800244c 	stmdaeq	r0, {r2, r3, r6, sl, sp}
     ab4:	0000000c 	andeq	r0, r0, ip
     ab8:	40040e41 	andmi	r0, r4, r1, asr #28
     abc:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     ac0:	0d0d4107 	stfeqs	f4, [sp, #-28]	; 0xffffffe4
     ac4:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
     ac8:	00000000 	andeq	r0, r0, r0
     acc:	00000018 	andeq	r0, r0, r8, lsl r0
     ad0:	00000a98 	muleq	r0, r8, sl
     ad4:	08002458 	stmdaeq	r0, {r3, r4, r6, sl, sp}
     ad8:	00000024 	andeq	r0, r0, r4, lsr #32
     adc:	40080e41 	andmi	r0, r8, r1, asr #28
     ae0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ae4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     ae8:	00000018 	andeq	r0, r0, r8, lsl r0
     aec:	00000a98 	muleq	r0, r8, sl
     af0:	0800247c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, sp}
     af4:	00000048 	andeq	r0, r0, r8, asr #32
     af8:	40080e41 	andmi	r0, r8, r1, asr #28
     afc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b00:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     b04:	00000028 	andeq	r0, r0, r8, lsr #32
     b08:	00000a98 	muleq	r0, r8, sl
     b0c:	080024c4 	stmdaeq	r0, {r2, r6, r7, sl, sp}
     b10:	000004cc 	andeq	r0, r0, ip, asr #9
     b14:	400c0e41 	andmi	r0, ip, r1, asr #28
     b18:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     b1c:	018e4002 	orreq	r4, lr, r2
     b20:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     b24:	0318070c 	tsteq	r8, #12, 14	; 0x300000
     b28:	0c0e025c 	sfmeq	f0, 4, [lr], {92}	; 0x5c
     b2c:	000d0d41 	andeq	r0, sp, r1, asr #26
     b30:	00000028 	andeq	r0, r0, r8, lsr #32
     b34:	00000a98 	muleq	r0, r8, sl
     b38:	08002990 	stmdaeq	r0, {r4, r7, r8, fp, sp}
     b3c:	0000063c 	andeq	r0, r0, ip, lsr r6
     b40:	400c0e41 	andmi	r0, ip, r1, asr #28
     b44:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     b48:	018e4002 	orreq	r4, lr, r2
     b4c:	41300e41 	teqmi	r0, r1, asr #28
     b50:	0328070c 			; <UNDEFINED> instruction: 0x0328070c
     b54:	0c0e0310 	stceq	3, cr0, [lr], {16}
     b58:	000d0d41 	andeq	r0, sp, r1, asr #26
     b5c:	00000028 	andeq	r0, r0, r8, lsr #32
     b60:	00000a98 	muleq	r0, r8, sl
     b64:	08002fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, sp}
     b68:	00000440 	andeq	r0, r0, r0, asr #8
     b6c:	400c0e41 	andmi	r0, ip, r1, asr #28
     b70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     b74:	018e4002 	orreq	r4, lr, r2
     b78:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
     b7c:	0320070c 			; <UNDEFINED> instruction: 0x0320070c
     b80:	0c0e0216 	sfmeq	f0, 4, [lr], {22}
     b84:	000d0d41 	andeq	r0, sp, r1, asr #26
     b88:	00000028 	andeq	r0, r0, r8, lsr #32
     b8c:	00000a98 	muleq	r0, r8, sl
     b90:	0800340c 	stmdaeq	r0, {r2, r3, sl, ip, sp}
     b94:	0000029c 	muleq	r0, ip, r2
     b98:	400c0e41 	andmi	r0, ip, r1, asr #28
     b9c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     ba0:	018e4002 	orreq	r4, lr, r2
     ba4:	41400e41 	cmpmi	r0, r1, asr #28
     ba8:	0338070c 	teqeq	r8, #12, 14	; 0x300000
     bac:	0c0e0136 	stfeqs	f0, [lr], {54}	; 0x36
     bb0:	000d0d41 	andeq	r0, sp, r1, asr #26
     bb4:	00000024 	andeq	r0, r0, r4, lsr #32
     bb8:	00000a98 	muleq	r0, r8, sl
     bbc:	080036a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip, sp}
     bc0:	00000230 	andeq	r0, r0, r0, lsr r2
     bc4:	40080e41 	andmi	r0, r8, r1, asr #28
     bc8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     bcc:	180e4101 	stmdane	lr, {r0, r8, lr}
     bd0:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     bd4:	41080ef9 	strdmi	r0, [r8, -r9]
     bd8:	00000d0d 	andeq	r0, r0, sp, lsl #26
     bdc:	00000024 	andeq	r0, r0, r4, lsr #32
     be0:	00000a98 	muleq	r0, r8, sl
     be4:	080038d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, ip, sp}
     be8:	00000110 	andeq	r0, r0, r0, lsl r1
     bec:	40080e41 	andmi	r0, r8, r1, asr #28
     bf0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     bf4:	100e4101 	andne	r4, lr, r1, lsl #2
     bf8:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     bfc:	41080e75 	tstmi	r8, r5, ror lr
     c00:	00000d0d 	andeq	r0, r0, sp, lsl #26
     c04:	00000024 	andeq	r0, r0, r4, lsr #32
     c08:	00000a98 	muleq	r0, r8, sl
     c0c:	080039e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip, sp}
     c10:	00000080 	andeq	r0, r0, r0, lsl #1
     c14:	40080e41 	andmi	r0, r8, r1, asr #28
     c18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c1c:	180e4101 	stmdane	lr, {r0, r8, lr}
     c20:	10070c41 	andne	r0, r7, r1, asr #24
     c24:	41080e75 	tstmi	r8, r5, ror lr
     c28:	00000d0d 	andeq	r0, r0, sp, lsl #26
     c2c:	00000024 	andeq	r0, r0, r4, lsr #32
     c30:	00000a98 	muleq	r0, r8, sl
     c34:	08003a68 	stmdaeq	r0, {r3, r5, r6, r9, fp, ip, sp}
     c38:	00000088 	andeq	r0, r0, r8, lsl #1
     c3c:	40080e41 	andmi	r0, r8, r1, asr #28
     c40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c44:	100e4101 	andne	r4, lr, r1, lsl #2
     c48:	70070d41 	andvc	r0, r7, r1, asr #26
     c4c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     c50:	0000000d 	andeq	r0, r0, sp
     c54:	00000018 	andeq	r0, r0, r8, lsl r0
     c58:	00000a98 	muleq	r0, r8, sl
     c5c:	08003af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, ip, sp}
     c60:	00000028 	andeq	r0, r0, r8, lsr #32
     c64:	40080e41 	andmi	r0, r8, r1, asr #28
     c68:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c6c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     c70:	00000020 	andeq	r0, r0, r0, lsr #32
     c74:	00000a98 	muleq	r0, r8, sl
     c78:	08003b18 	stmdaeq	r0, {r3, r4, r8, r9, fp, ip, sp}
     c7c:	0000002c 	andeq	r0, r0, ip, lsr #32
     c80:	40040e41 	andmi	r0, r4, r1, asr #28
     c84:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     c88:	0d0d4a07 	vstreq	s8, [sp, #-28]	; 0xffffffe4
     c8c:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
     c90:	00000000 	andeq	r0, r0, r0
     c94:	00000020 	andeq	r0, r0, r0, lsr #32
     c98:	00000a98 	muleq	r0, r8, sl
     c9c:	00000000 	andeq	r0, r0, r0
     ca0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ca4:	40040e41 	andmi	r0, r4, r1, asr #28
     ca8:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     cac:	0d0d4607 	stceq	6, cr4, [sp, #-28]	; 0xffffffe4
     cb0:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
     cb4:	00000000 	andeq	r0, r0, r0
     cb8:	00000024 	andeq	r0, r0, r4, lsr #32
     cbc:	00000a98 	muleq	r0, r8, sl
     cc0:	08003b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip, sp}
     cc4:	0000003c 	andeq	r0, r0, ip, lsr r0
     cc8:	40040e41 	andmi	r0, r4, r1, asr #28
     ccc:	0e410187 	dvfeqd	f0, f1, f7
     cd0:	070d4110 	smladeq	sp, r0, r1, r4
     cd4:	41040e55 	tstmi	r4, r5, asr lr
     cd8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
     cdc:	00000e40 	andeq	r0, r0, r0, asr #28
     ce0:	00000024 	andeq	r0, r0, r4, lsr #32
     ce4:	00000a98 	muleq	r0, r8, sl
     ce8:	08003b80 	stmdaeq	r0, {r7, r8, r9, fp, ip, sp}
     cec:	0000003c 	andeq	r0, r0, ip, lsr r0
     cf0:	40040e41 	andmi	r0, r4, r1, asr #28
     cf4:	0e410187 	dvfeqd	f0, f1, f7
     cf8:	070d4110 	smladeq	sp, r0, r1, r4
     cfc:	41040e55 	tstmi	r4, r5, asr lr
     d00:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
     d04:	00000e40 	andeq	r0, r0, r0, asr #28
     d08:	00000024 	andeq	r0, r0, r4, lsr #32
     d0c:	00000a98 	muleq	r0, r8, sl
     d10:	08003bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp, ip, sp}
     d14:	0000003c 	andeq	r0, r0, ip, lsr r0
     d18:	40040e41 	andmi	r0, r4, r1, asr #28
     d1c:	0e410187 	dvfeqd	f0, f1, f7
     d20:	070d4110 	smladeq	sp, r0, r1, r4
     d24:	41040e55 	tstmi	r4, r5, asr lr
     d28:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
     d2c:	00000e40 	andeq	r0, r0, r0, asr #28
     d30:	00000024 	andeq	r0, r0, r4, lsr #32
     d34:	00000a98 	muleq	r0, r8, sl
     d38:	08003bf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
     d3c:	0000003c 	andeq	r0, r0, ip, lsr r0
     d40:	40040e41 	andmi	r0, r4, r1, asr #28
     d44:	0e410187 	dvfeqd	f0, f1, f7
     d48:	070d4110 	smladeq	sp, r0, r1, r4
     d4c:	41040e55 	tstmi	r4, r5, asr lr
     d50:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
     d54:	00000e40 	andeq	r0, r0, r0, asr #28
     d58:	00000020 	andeq	r0, r0, r0, lsr #32
     d5c:	00000a98 	muleq	r0, r8, sl
     d60:	00000000 	andeq	r0, r0, r0
     d64:	00000018 	andeq	r0, r0, r8, lsl r0
     d68:	40040e41 	andmi	r0, r4, r1, asr #28
     d6c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     d70:	0d0d4407 	cfstrseq	mvf4, [sp, #-28]	; 0xffffffe4
     d74:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
     d78:	00000000 	andeq	r0, r0, r0
     d7c:	0000000c 	andeq	r0, r0, ip
     d80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d84:	7c020001 	stcvc	0, cr0, [r2], {1}
     d88:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d8c:	00000024 	andeq	r0, r0, r4, lsr #32
     d90:	00000d7c 	andeq	r0, r0, ip, ror sp
     d94:	08003c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip, sp}
     d98:	00000030 	andeq	r0, r0, r0, lsr r0
     d9c:	40040e41 	andmi	r0, r4, r1, asr #28
     da0:	0e410187 	dvfeqd	f0, f1, f7
     da4:	070d4118 	smladeq	sp, r8, r1, r4
     da8:	41040e51 	tstmi	r4, r1, asr lr
     dac:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
     db0:	00000e40 	andeq	r0, r0, r0, asr #28
     db4:	00000024 	andeq	r0, r0, r4, lsr #32
     db8:	00000d7c 	andeq	r0, r0, ip, ror sp
     dbc:	08003c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, ip, sp}
     dc0:	0000010c 	andeq	r0, r0, ip, lsl #2
     dc4:	40040e41 	andmi	r0, r4, r1, asr #28
     dc8:	0e410187 	dvfeqd	f0, f1, f7
     dcc:	070d4130 	smladxeq	sp, r0, r1, r4
     dd0:	040e7f02 	streq	r7, [lr], #-3842	; 0xfffff0fe
     dd4:	420d0d41 	andmi	r0, sp, #4160	; 0x1040
     dd8:	000e40c7 	andeq	r4, lr, r7, asr #1
     ddc:	00000028 	andeq	r0, r0, r8, lsr #32
     de0:	00000d7c 	andeq	r0, r0, ip, ror sp
     de4:	08003d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp, ip, sp}
     de8:	00000066 	andeq	r0, r0, r6, rrx
     dec:	400c0e41 	andmi	r0, ip, r1, asr #28
     df0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     df4:	018e4002 	orreq	r4, lr, r2
     df8:	02a00e41 	adceq	r0, r0, #1040	; 0x410
     dfc:	6e070d41 	cdpvs	13, 0, cr0, cr7, cr1, {2}
     e00:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     e04:	0000000d 	andeq	r0, r0, sp
     e08:	00000028 	andeq	r0, r0, r8, lsr #32
     e0c:	00000d7c 	andeq	r0, r0, ip, ror sp
     e10:	08003dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, ip, sp}
     e14:	00000302 	andeq	r0, r0, r2, lsl #6
     e18:	400c0e41 	andmi	r0, ip, r1, asr #28
     e1c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     e20:	018e4002 	orreq	r4, lr, r2
     e24:	02a80e41 	adceq	r0, r8, #1040	; 0x410
     e28:	03070d41 	movweq	r0, #32065	; 0x7d41
     e2c:	0c0e017c 	stfeqs	f0, [lr], {124}	; 0x7c
     e30:	000d0d41 	andeq	r0, sp, r1, asr #26
     e34:	00000024 	andeq	r0, r0, r4, lsr #32
     e38:	00000d7c 	andeq	r0, r0, ip, ror sp
     e3c:	080040dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, lr}
     e40:	00000176 	andeq	r0, r0, r6, ror r1
     e44:	40080e41 	andmi	r0, r8, r1, asr #28
     e48:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e4c:	280e4101 	stmdacs	lr, {r0, r8, lr}
     e50:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     e54:	41080eb6 			; <UNDEFINED> instruction: 0x41080eb6
     e58:	00000d0d 	andeq	r0, r0, sp, lsl #26
     e5c:	0000000c 	andeq	r0, r0, ip
     e60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e64:	7c020001 	stcvc	0, cr0, [r2], {1}
     e68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e6c:	00000024 	andeq	r0, r0, r4, lsr #32
     e70:	00000e5c 	andeq	r0, r0, ip, asr lr
     e74:	08004254 	stmdaeq	r0, {r2, r4, r6, r9, lr}
     e78:	00000036 	andeq	r0, r0, r6, lsr r0
     e7c:	40040e41 	andmi	r0, r4, r1, asr #28
     e80:	0e410187 	dvfeqd	f0, f1, f7
     e84:	070d4110 	smladeq	sp, r0, r1, r4
     e88:	41040e54 	tstmi	r4, r4, asr lr
     e8c:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
     e90:	00000e40 	andeq	r0, r0, r0, asr #28
     e94:	00000028 	andeq	r0, r0, r8, lsr #32
     e98:	00000e5c 	andeq	r0, r0, ip, asr lr
     e9c:	0800428c 	stmdaeq	r0, {r2, r3, r7, r9, lr}
     ea0:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     ea4:	400c0e41 	andmi	r0, ip, r1, asr #28
     ea8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     eac:	018e4002 	orreq	r4, lr, r2
     eb0:	02b00e41 	adcseq	r0, r0, #1040	; 0x410
     eb4:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     eb8:	410c0ed7 	ldrdmi	r0, [ip, -r7]
     ebc:	00000d0d 	andeq	r0, r0, sp, lsl #26
     ec0:	00000028 	andeq	r0, r0, r8, lsr #32
     ec4:	00000e5c 	andeq	r0, r0, ip, asr lr
     ec8:	08004448 	stmdaeq	r0, {r3, r6, sl, lr}
     ecc:	0000010c 	andeq	r0, r0, ip, lsl #2
     ed0:	400c0e41 	andmi	r0, ip, r1, asr #28
     ed4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     ed8:	018e4002 	orreq	r4, lr, r2
     edc:	41480e41 	cmpmi	r8, r1, asr #28
     ee0:	0240070c 	subeq	r0, r0, #12, 14	; 0x300000
     ee4:	410c0e7b 	tstmi	ip, fp, ror lr
     ee8:	00000d0d 	andeq	r0, r0, sp, lsl #26
     eec:	00000024 	andeq	r0, r0, r4, lsr #32
     ef0:	00000e5c 	andeq	r0, r0, ip, asr lr
     ef4:	08004554 	stmdaeq	r0, {r2, r4, r6, r8, sl, lr}
     ef8:	00000074 	andeq	r0, r0, r4, ror r0
     efc:	40080e41 	andmi	r0, r8, r1, asr #28
     f00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f04:	180e4101 	stmdane	lr, {r0, r8, lr}
     f08:	6c070d41 	stcvs	13, cr0, [r7], {65}	; 0x41
     f0c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     f10:	0000000d 	andeq	r0, r0, sp
     f14:	00000024 	andeq	r0, r0, r4, lsr #32
     f18:	00000e5c 	andeq	r0, r0, ip, asr lr
     f1c:	080045c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, lr}
     f20:	0000005c 	andeq	r0, r0, ip, asr r0
     f24:	40080e41 	andmi	r0, r8, r1, asr #28
     f28:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f2c:	200e4101 	andcs	r4, lr, r1, lsl #2
     f30:	66070d41 	strvs	r0, [r7], -r1, asr #26
     f34:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     f38:	0000000d 	andeq	r0, r0, sp
     f3c:	00000020 	andeq	r0, r0, r0, lsr #32
     f40:	00000e5c 	andeq	r0, r0, ip, asr lr
     f44:	08004624 	stmdaeq	r0, {r2, r5, r9, sl, lr}
     f48:	0000004c 	andeq	r0, r0, ip, asr #32
     f4c:	40040e41 	andmi	r0, r4, r1, asr #28
     f50:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     f54:	0d0d5c07 	stceq	12, cr5, [sp, #-28]	; 0xffffffe4
     f58:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
     f5c:	00000000 	andeq	r0, r0, r0
     f60:	00000020 	andeq	r0, r0, r0, lsr #32
     f64:	00000e5c 	andeq	r0, r0, ip, asr lr
     f68:	00000000 	andeq	r0, r0, r0
     f6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f70:	40040e41 	andmi	r0, r4, r1, asr #28
     f74:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     f78:	0d0d4607 	stceq	6, cr4, [sp, #-28]	; 0xffffffe4
     f7c:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
     f80:	00000000 	andeq	r0, r0, r0
     f84:	0000000c 	andeq	r0, r0, ip
     f88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f8c:	7c020001 	stcvc	0, cr0, [r2], {1}
     f90:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f94:	00000024 	andeq	r0, r0, r4, lsr #32
     f98:	00000f84 	andeq	r0, r0, r4, lsl #31
     f9c:	00000000 	andeq	r0, r0, r0
     fa0:	00000024 	andeq	r0, r0, r4, lsr #32
     fa4:	40040e41 	andmi	r0, r4, r1, asr #28
     fa8:	0e410187 	dvfeqd	f0, f1, f7
     fac:	070d4110 	smladeq	sp, r0, r1, r4
     fb0:	41040e49 	tstmi	r4, r9, asr #28
     fb4:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
     fb8:	00000e40 	andeq	r0, r0, r0, asr #28
     fbc:	00000024 	andeq	r0, r0, r4, lsr #32
     fc0:	00000f84 	andeq	r0, r0, r4, lsl #31
     fc4:	08004670 	stmdaeq	r0, {r4, r5, r6, r9, sl, lr}
     fc8:	000000c4 	andeq	r0, r0, r4, asr #1
     fcc:	40040e41 	andmi	r0, r4, r1, asr #28
     fd0:	0e410187 	dvfeqd	f0, f1, f7
     fd4:	070d4120 	streq	r4, [sp, -r0, lsr #2]
     fd8:	040e5702 	streq	r5, [lr], #-1794	; 0xfffff8fe
     fdc:	420d0d41 	andmi	r0, sp, #4160	; 0x1040
     fe0:	000e40c7 	andeq	r4, lr, r7, asr #1
     fe4:	00000024 	andeq	r0, r0, r4, lsr #32
     fe8:	00000f84 	andeq	r0, r0, r4, lsl #31
     fec:	00000000 	andeq	r0, r0, r0
     ff0:	0000002c 	andeq	r0, r0, ip, lsr #32
     ff4:	40040e41 	andmi	r0, r4, r1, asr #28
     ff8:	0e410187 	dvfeqd	f0, f1, f7
     ffc:	070d4110 	smladeq	sp, r0, r1, r4
    1000:	41040e4c 	tstmi	r4, ip, asr #28
    1004:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1008:	00000e40 	andeq	r0, r0, r0, asr #28
    100c:	00000024 	andeq	r0, r0, r4, lsr #32
    1010:	00000f84 	andeq	r0, r0, r4, lsl #31
    1014:	00000000 	andeq	r0, r0, r0
    1018:	00000040 	andeq	r0, r0, r0, asr #32
    101c:	40040e41 	andmi	r0, r4, r1, asr #28
    1020:	0e410187 	dvfeqd	f0, f1, f7
    1024:	070d4110 	smladeq	sp, r0, r1, r4
    1028:	41040e57 	tstmi	r4, r7, asr lr
    102c:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1030:	00000e40 	andeq	r0, r0, r0, asr #28
    1034:	00000024 	andeq	r0, r0, r4, lsr #32
    1038:	00000f84 	andeq	r0, r0, r4, lsl #31
    103c:	00000000 	andeq	r0, r0, r0
    1040:	00000038 	andeq	r0, r0, r8, lsr r0
    1044:	40040e41 	andmi	r0, r4, r1, asr #28
    1048:	0e410187 	dvfeqd	f0, f1, f7
    104c:	070d4110 	smladeq	sp, r0, r1, r4
    1050:	41040e52 	tstmi	r4, r2, asr lr
    1054:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1058:	00000e40 	andeq	r0, r0, r0, asr #28
    105c:	0000000c 	andeq	r0, r0, ip
    1060:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1064:	7c020001 	stcvc	0, cr0, [r2], {1}
    1068:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    106c:	00000020 	andeq	r0, r0, r0, lsr #32
    1070:	0000105c 	andeq	r1, r0, ip, asr r0
    1074:	00000000 	andeq	r0, r0, r0
    1078:	0000005c 	andeq	r0, r0, ip, asr r0
    107c:	40040e41 	andmi	r0, r4, r1, asr #28
    1080:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    1084:	0d0d6507 	cfstr32eq	mvfx6, [sp, #-28]	; 0xffffffe4
    1088:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
    108c:	00000000 	andeq	r0, r0, r0
    1090:	00000024 	andeq	r0, r0, r4, lsr #32
    1094:	0000105c 	andeq	r1, r0, ip, asr r0
    1098:	00000000 	andeq	r0, r0, r0
    109c:	0000005c 	andeq	r0, r0, ip, asr r0
    10a0:	40040e41 	andmi	r0, r4, r1, asr #28
    10a4:	0e410187 	dvfeqd	f0, f1, f7
    10a8:	070d4110 	smladeq	sp, r0, r1, r4
    10ac:	41040e64 	tstmi	r4, r4, ror #28
    10b0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    10b4:	00000e40 	andeq	r0, r0, r0, asr #28
    10b8:	00000024 	andeq	r0, r0, r4, lsr #32
    10bc:	0000105c 	andeq	r1, r0, ip, asr r0
    10c0:	00000000 	andeq	r0, r0, r0
    10c4:	00000050 	andeq	r0, r0, r0, asr r0
    10c8:	40080e41 	andmi	r0, r8, r1, asr #28
    10cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    10d0:	100e4101 	andne	r4, lr, r1, lsl #2
    10d4:	63070d41 	movwvs	r0, #32065	; 0x7d41
    10d8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    10dc:	0000000d 	andeq	r0, r0, sp
    10e0:	00000024 	andeq	r0, r0, r4, lsr #32
    10e4:	0000105c 	andeq	r1, r0, ip, asr r0
    10e8:	00000000 	andeq	r0, r0, r0
    10ec:	0000003c 	andeq	r0, r0, ip, lsr r0
    10f0:	40040e41 	andmi	r0, r4, r1, asr #28
    10f4:	0e410187 	dvfeqd	f0, f1, f7
    10f8:	070d4118 	smladeq	sp, r8, r1, r4
    10fc:	41040e54 	tstmi	r4, r4, asr lr
    1100:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1104:	00000e40 	andeq	r0, r0, r0, asr #28
    1108:	00000024 	andeq	r0, r0, r4, lsr #32
    110c:	0000105c 	andeq	r1, r0, ip, asr r0
    1110:	00000000 	andeq	r0, r0, r0
    1114:	00000020 	andeq	r0, r0, r0, lsr #32
    1118:	40040e41 	andmi	r0, r4, r1, asr #28
    111c:	0e410187 	dvfeqd	f0, f1, f7
    1120:	070d4110 	smladeq	sp, r0, r1, r4
    1124:	41040e46 	tstmi	r4, r6, asr #28
    1128:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    112c:	00000e40 	andeq	r0, r0, r0, asr #28
    1130:	00000024 	andeq	r0, r0, r4, lsr #32
    1134:	0000105c 	andeq	r1, r0, ip, asr r0
    1138:	00000000 	andeq	r0, r0, r0
    113c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1140:	40040e41 	andmi	r0, r4, r1, asr #28
    1144:	0e410187 	dvfeqd	f0, f1, f7
    1148:	070d4118 	smladeq	sp, r8, r1, r4
    114c:	41040e55 	tstmi	r4, r5, asr lr
    1150:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1154:	00000e40 	andeq	r0, r0, r0, asr #28
    1158:	00000024 	andeq	r0, r0, r4, lsr #32
    115c:	0000105c 	andeq	r1, r0, ip, asr r0
    1160:	00000000 	andeq	r0, r0, r0
    1164:	00000020 	andeq	r0, r0, r0, lsr #32
    1168:	40040e41 	andmi	r0, r4, r1, asr #28
    116c:	0e410187 	dvfeqd	f0, f1, f7
    1170:	070d4110 	smladeq	sp, r0, r1, r4
    1174:	41040e46 	tstmi	r4, r6, asr #28
    1178:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    117c:	00000e40 	andeq	r0, r0, r0, asr #28
    1180:	00000024 	andeq	r0, r0, r4, lsr #32
    1184:	0000105c 	andeq	r1, r0, ip, asr r0
    1188:	00000000 	andeq	r0, r0, r0
    118c:	00000038 	andeq	r0, r0, r8, lsr r0
    1190:	40040e41 	andmi	r0, r4, r1, asr #28
    1194:	0e410187 	dvfeqd	f0, f1, f7
    1198:	070d4118 	smladeq	sp, r8, r1, r4
    119c:	41040e52 	tstmi	r4, r2, asr lr
    11a0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    11a4:	00000e40 	andeq	r0, r0, r0, asr #28
    11a8:	00000020 	andeq	r0, r0, r0, lsr #32
    11ac:	0000105c 	andeq	r1, r0, ip, asr r0
    11b0:	00000000 	andeq	r0, r0, r0
    11b4:	00000020 	andeq	r0, r0, r0, lsr #32
    11b8:	40040e41 	andmi	r0, r4, r1, asr #28
    11bc:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    11c0:	0d0d4807 	stceq	8, cr4, [sp, #-28]	; 0xffffffe4
    11c4:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
    11c8:	00000000 	andeq	r0, r0, r0
    11cc:	00000024 	andeq	r0, r0, r4, lsr #32
    11d0:	0000105c 	andeq	r1, r0, ip, asr r0
    11d4:	00000000 	andeq	r0, r0, r0
    11d8:	00000038 	andeq	r0, r0, r8, lsr r0
    11dc:	40040e41 	andmi	r0, r4, r1, asr #28
    11e0:	0e410187 	dvfeqd	f0, f1, f7
    11e4:	070d4118 	smladeq	sp, r8, r1, r4
    11e8:	41040e52 	tstmi	r4, r2, asr lr
    11ec:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    11f0:	00000e40 	andeq	r0, r0, r0, asr #28
    11f4:	00000024 	andeq	r0, r0, r4, lsr #32
    11f8:	0000105c 	andeq	r1, r0, ip, asr r0
    11fc:	00000000 	andeq	r0, r0, r0
    1200:	00000038 	andeq	r0, r0, r8, lsr r0
    1204:	40040e41 	andmi	r0, r4, r1, asr #28
    1208:	0e410187 	dvfeqd	f0, f1, f7
    120c:	070d4118 	smladeq	sp, r8, r1, r4
    1210:	41040e52 	tstmi	r4, r2, asr lr
    1214:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1218:	00000e40 	andeq	r0, r0, r0, asr #28
    121c:	00000024 	andeq	r0, r0, r4, lsr #32
    1220:	0000105c 	andeq	r1, r0, ip, asr r0
    1224:	00000000 	andeq	r0, r0, r0
    1228:	00000038 	andeq	r0, r0, r8, lsr r0
    122c:	40040e41 	andmi	r0, r4, r1, asr #28
    1230:	0e410187 	dvfeqd	f0, f1, f7
    1234:	070d4118 	smladeq	sp, r8, r1, r4
    1238:	41040e53 	tstmi	r4, r3, asr lr
    123c:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1240:	00000e40 	andeq	r0, r0, r0, asr #28
    1244:	00000024 	andeq	r0, r0, r4, lsr #32
    1248:	0000105c 	andeq	r1, r0, ip, asr r0
    124c:	00000000 	andeq	r0, r0, r0
    1250:	0000004c 	andeq	r0, r0, ip, asr #32
    1254:	40040e41 	andmi	r0, r4, r1, asr #28
    1258:	0e410187 	dvfeqd	f0, f1, f7
    125c:	070d4110 	smladeq	sp, r0, r1, r4
    1260:	41040e5c 	tstmi	r4, ip, asr lr
    1264:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1268:	00000e40 	andeq	r0, r0, r0, asr #28
    126c:	00000024 	andeq	r0, r0, r4, lsr #32
    1270:	0000105c 	andeq	r1, r0, ip, asr r0
    1274:	00000000 	andeq	r0, r0, r0
    1278:	0000001c 	andeq	r0, r0, ip, lsl r0
    127c:	40040e41 	andmi	r0, r4, r1, asr #28
    1280:	0e410187 	dvfeqd	f0, f1, f7
    1284:	070d4110 	smladeq	sp, r0, r1, r4
    1288:	41040e45 	tstmi	r4, r5, asr #28
    128c:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1290:	00000e40 	andeq	r0, r0, r0, asr #28
    1294:	00000024 	andeq	r0, r0, r4, lsr #32
    1298:	0000105c 	andeq	r1, r0, ip, asr r0
    129c:	00000000 	andeq	r0, r0, r0
    12a0:	00000038 	andeq	r0, r0, r8, lsr r0
    12a4:	40040e41 	andmi	r0, r4, r1, asr #28
    12a8:	0e410187 	dvfeqd	f0, f1, f7
    12ac:	070d4118 	smladeq	sp, r8, r1, r4
    12b0:	41040e52 	tstmi	r4, r2, asr lr
    12b4:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    12b8:	00000e40 	andeq	r0, r0, r0, asr #28
    12bc:	00000024 	andeq	r0, r0, r4, lsr #32
    12c0:	0000105c 	andeq	r1, r0, ip, asr r0
    12c4:	00000000 	andeq	r0, r0, r0
    12c8:	00000040 	andeq	r0, r0, r0, asr #32
    12cc:	40040e41 	andmi	r0, r4, r1, asr #28
    12d0:	0e410187 	dvfeqd	f0, f1, f7
    12d4:	070d4110 	smladeq	sp, r0, r1, r4
    12d8:	41040e57 	tstmi	r4, r7, asr lr
    12dc:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    12e0:	00000e40 	andeq	r0, r0, r0, asr #28
    12e4:	00000024 	andeq	r0, r0, r4, lsr #32
    12e8:	0000105c 	andeq	r1, r0, ip, asr r0
    12ec:	08004734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, lr}
    12f0:	00000020 	andeq	r0, r0, r0, lsr #32
    12f4:	40040e41 	andmi	r0, r4, r1, asr #28
    12f8:	0e410187 	dvfeqd	f0, f1, f7
    12fc:	070d4110 	smladeq	sp, r0, r1, r4
    1300:	41040e46 	tstmi	r4, r6, asr #28
    1304:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1308:	00000e40 	andeq	r0, r0, r0, asr #28
    130c:	00000024 	andeq	r0, r0, r4, lsr #32
    1310:	0000105c 	andeq	r1, r0, ip, asr r0
    1314:	00000000 	andeq	r0, r0, r0
    1318:	00000024 	andeq	r0, r0, r4, lsr #32
    131c:	40040e41 	andmi	r0, r4, r1, asr #28
    1320:	0e410187 	dvfeqd	f0, f1, f7
    1324:	070d4110 	smladeq	sp, r0, r1, r4
    1328:	41040e48 	tstmi	r4, r8, asr #28
    132c:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1330:	00000e40 	andeq	r0, r0, r0, asr #28
    1334:	00000024 	andeq	r0, r0, r4, lsr #32
    1338:	0000105c 	andeq	r1, r0, ip, asr r0
    133c:	00000000 	andeq	r0, r0, r0
    1340:	00000020 	andeq	r0, r0, r0, lsr #32
    1344:	40040e41 	andmi	r0, r4, r1, asr #28
    1348:	0e410187 	dvfeqd	f0, f1, f7
    134c:	070d4110 	smladeq	sp, r0, r1, r4
    1350:	41040e46 	tstmi	r4, r6, asr #28
    1354:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1358:	00000e40 	andeq	r0, r0, r0, asr #28
    135c:	00000024 	andeq	r0, r0, r4, lsr #32
    1360:	0000105c 	andeq	r1, r0, ip, asr r0
    1364:	08004754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, lr}
    1368:	00000164 	andeq	r0, r0, r4, ror #2
    136c:	40040e41 	andmi	r0, r4, r1, asr #28
    1370:	0e410187 	dvfeqd	f0, f1, f7
    1374:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    1378:	040ea002 	streq	sl, [lr], #-2
    137c:	420d0d41 	andmi	r0, sp, #4160	; 0x1040
    1380:	000e40c7 	andeq	r4, lr, r7, asr #1
    1384:	00000024 	andeq	r0, r0, r4, lsr #32
    1388:	0000105c 	andeq	r1, r0, ip, asr r0
    138c:	00000000 	andeq	r0, r0, r0
    1390:	0000003c 	andeq	r0, r0, ip, lsr r0
    1394:	40040e41 	andmi	r0, r4, r1, asr #28
    1398:	0e410187 	dvfeqd	f0, f1, f7
    139c:	070d4110 	smladeq	sp, r0, r1, r4
    13a0:	41040e55 	tstmi	r4, r5, asr lr
    13a4:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    13a8:	00000e40 	andeq	r0, r0, r0, asr #28
    13ac:	00000024 	andeq	r0, r0, r4, lsr #32
    13b0:	0000105c 	andeq	r1, r0, ip, asr r0
    13b4:	080048b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, lr}
    13b8:	0000003c 	andeq	r0, r0, ip, lsr r0
    13bc:	40040e41 	andmi	r0, r4, r1, asr #28
    13c0:	0e410187 	dvfeqd	f0, f1, f7
    13c4:	070d4110 	smladeq	sp, r0, r1, r4
    13c8:	41040e55 	tstmi	r4, r5, asr lr
    13cc:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    13d0:	00000e40 	andeq	r0, r0, r0, asr #28
    13d4:	00000024 	andeq	r0, r0, r4, lsr #32
    13d8:	0000105c 	andeq	r1, r0, ip, asr r0
    13dc:	080048f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, lr}
    13e0:	0000003c 	andeq	r0, r0, ip, lsr r0
    13e4:	40040e41 	andmi	r0, r4, r1, asr #28
    13e8:	0e410187 	dvfeqd	f0, f1, f7
    13ec:	070d4110 	smladeq	sp, r0, r1, r4
    13f0:	41040e55 	tstmi	r4, r5, asr lr
    13f4:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    13f8:	00000e40 	andeq	r0, r0, r0, asr #28
    13fc:	00000024 	andeq	r0, r0, r4, lsr #32
    1400:	0000105c 	andeq	r1, r0, ip, asr r0
    1404:	00000000 	andeq	r0, r0, r0
    1408:	0000003c 	andeq	r0, r0, ip, lsr r0
    140c:	40040e41 	andmi	r0, r4, r1, asr #28
    1410:	0e410187 	dvfeqd	f0, f1, f7
    1414:	070d4110 	smladeq	sp, r0, r1, r4
    1418:	41040e55 	tstmi	r4, r5, asr lr
    141c:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1420:	00000e40 	andeq	r0, r0, r0, asr #28
    1424:	00000024 	andeq	r0, r0, r4, lsr #32
    1428:	0000105c 	andeq	r1, r0, ip, asr r0
    142c:	08004930 	stmdaeq	r0, {r4, r5, r8, fp, lr}
    1430:	0000003c 	andeq	r0, r0, ip, lsr r0
    1434:	40040e41 	andmi	r0, r4, r1, asr #28
    1438:	0e410187 	dvfeqd	f0, f1, f7
    143c:	070d4110 	smladeq	sp, r0, r1, r4
    1440:	41040e55 	tstmi	r4, r5, asr lr
    1444:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1448:	00000e40 	andeq	r0, r0, r0, asr #28
    144c:	00000024 	andeq	r0, r0, r4, lsr #32
    1450:	0000105c 	andeq	r1, r0, ip, asr r0
    1454:	00000000 	andeq	r0, r0, r0
    1458:	00000020 	andeq	r0, r0, r0, lsr #32
    145c:	40040e41 	andmi	r0, r4, r1, asr #28
    1460:	0e410187 	dvfeqd	f0, f1, f7
    1464:	070d4110 	smladeq	sp, r0, r1, r4
    1468:	41040e46 	tstmi	r4, r6, asr #28
    146c:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1470:	00000e40 	andeq	r0, r0, r0, asr #28
    1474:	00000024 	andeq	r0, r0, r4, lsr #32
    1478:	0000105c 	andeq	r1, r0, ip, asr r0
    147c:	00000000 	andeq	r0, r0, r0
    1480:	00000020 	andeq	r0, r0, r0, lsr #32
    1484:	40040e41 	andmi	r0, r4, r1, asr #28
    1488:	0e410187 	dvfeqd	f0, f1, f7
    148c:	070d4110 	smladeq	sp, r0, r1, r4
    1490:	41040e46 	tstmi	r4, r6, asr #28
    1494:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1498:	00000e40 	andeq	r0, r0, r0, asr #28
    149c:	00000024 	andeq	r0, r0, r4, lsr #32
    14a0:	0000105c 	andeq	r1, r0, ip, asr r0
    14a4:	00000000 	andeq	r0, r0, r0
    14a8:	00000020 	andeq	r0, r0, r0, lsr #32
    14ac:	40040e41 	andmi	r0, r4, r1, asr #28
    14b0:	0e410187 	dvfeqd	f0, f1, f7
    14b4:	070d4110 	smladeq	sp, r0, r1, r4
    14b8:	41040e46 	tstmi	r4, r6, asr #28
    14bc:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    14c0:	00000e40 	andeq	r0, r0, r0, asr #28
    14c4:	00000024 	andeq	r0, r0, r4, lsr #32
    14c8:	0000105c 	andeq	r1, r0, ip, asr r0
    14cc:	0800496c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp, lr}
    14d0:	00000074 	andeq	r0, r0, r4, ror r0
    14d4:	40040e41 	andmi	r0, r4, r1, asr #28
    14d8:	0e410187 	dvfeqd	f0, f1, f7
    14dc:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    14e0:	41040e71 	tstmi	r4, r1, ror lr
    14e4:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    14e8:	00000e40 	andeq	r0, r0, r0, asr #28
    14ec:	00000020 	andeq	r0, r0, r0, lsr #32
    14f0:	0000105c 	andeq	r1, r0, ip, asr r0
    14f4:	00000000 	andeq	r0, r0, r0
    14f8:	0000001c 	andeq	r0, r0, ip, lsl r0
    14fc:	40040e41 	andmi	r0, r4, r1, asr #28
    1500:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    1504:	0d0d4707 	stceq	7, cr4, [sp, #-28]	; 0xffffffe4
    1508:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
    150c:	00000000 	andeq	r0, r0, r0
    1510:	00000024 	andeq	r0, r0, r4, lsr #32
    1514:	0000105c 	andeq	r1, r0, ip, asr r0
    1518:	00000000 	andeq	r0, r0, r0
    151c:	00000038 	andeq	r0, r0, r8, lsr r0
    1520:	40040e41 	andmi	r0, r4, r1, asr #28
    1524:	0e410187 	dvfeqd	f0, f1, f7
    1528:	070d4118 	smladeq	sp, r8, r1, r4
    152c:	41040e52 	tstmi	r4, r2, asr lr
    1530:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1534:	00000e40 	andeq	r0, r0, r0, asr #28
    1538:	00000024 	andeq	r0, r0, r4, lsr #32
    153c:	0000105c 	andeq	r1, r0, ip, asr r0
    1540:	00000000 	andeq	r0, r0, r0
    1544:	00000020 	andeq	r0, r0, r0, lsr #32
    1548:	40040e41 	andmi	r0, r4, r1, asr #28
    154c:	0e410187 	dvfeqd	f0, f1, f7
    1550:	070d4110 	smladeq	sp, r0, r1, r4
    1554:	41040e46 	tstmi	r4, r6, asr #28
    1558:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    155c:	00000e40 	andeq	r0, r0, r0, asr #28
    1560:	0000000c 	andeq	r0, r0, ip
    1564:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1568:	7c020001 	stcvc	0, cr0, [r2], {1}
    156c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1570:	00000024 	andeq	r0, r0, r4, lsr #32
    1574:	00001560 	andeq	r1, r0, r0, ror #10
    1578:	00000000 	andeq	r0, r0, r0
    157c:	000000e4 	andeq	r0, r0, r4, ror #1
    1580:	40080e41 	andmi	r0, r8, r1, asr #28
    1584:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1588:	100e4101 	andne	r4, lr, r1, lsl #2
    158c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    1590:	41080e5e 	tstmi	r8, lr, asr lr
    1594:	00000d0d 	andeq	r0, r0, sp, lsl #26
    1598:	00000018 	andeq	r0, r0, r8, lsl r0
    159c:	00001560 	andeq	r1, r0, r0, ror #10
    15a0:	00000000 	andeq	r0, r0, r0
    15a4:	00000016 	andeq	r0, r0, r6, lsl r0
    15a8:	40080e41 	andmi	r0, r8, r1, asr #28
    15ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    15b0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    15b4:	00000024 	andeq	r0, r0, r4, lsr #32
    15b8:	00001560 	andeq	r1, r0, r0, ror #10
    15bc:	080049e0 	stmdaeq	r0, {r5, r6, r7, r8, fp, lr}
    15c0:	00000180 	andeq	r0, r0, r0, lsl #3
    15c4:	40040e41 	andmi	r0, r4, r1, asr #28
    15c8:	0e410187 	dvfeqd	f0, f1, f7
    15cc:	070d4128 	streq	r4, [sp, -r8, lsr #2]
    15d0:	040eb902 	streq	fp, [lr], #-2306	; 0xfffff6fe
    15d4:	420d0d41 	andmi	r0, sp, #4160	; 0x1040
    15d8:	000e40c7 	andeq	r4, lr, r7, asr #1
    15dc:	00000024 	andeq	r0, r0, r4, lsr #32
    15e0:	00001560 	andeq	r1, r0, r0, ror #10
    15e4:	00000000 	andeq	r0, r0, r0
    15e8:	00000026 	andeq	r0, r0, r6, lsr #32
    15ec:	40040e41 	andmi	r0, r4, r1, asr #28
    15f0:	0e410187 	dvfeqd	f0, f1, f7
    15f4:	070d4110 	smladeq	sp, r0, r1, r4
    15f8:	41040e4c 	tstmi	r4, ip, asr #28
    15fc:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1600:	00000e40 	andeq	r0, r0, r0, asr #28
    1604:	00000024 	andeq	r0, r0, r4, lsr #32
    1608:	00001560 	andeq	r1, r0, r0, ror #10
    160c:	00000000 	andeq	r0, r0, r0
    1610:	00000034 	andeq	r0, r0, r4, lsr r0
    1614:	40040e41 	andmi	r0, r4, r1, asr #28
    1618:	0e410187 	dvfeqd	f0, f1, f7
    161c:	070d4118 	smladeq	sp, r8, r1, r4
    1620:	41040e53 	tstmi	r4, r3, asr lr
    1624:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1628:	00000e40 	andeq	r0, r0, r0, asr #28
    162c:	00000024 	andeq	r0, r0, r4, lsr #32
    1630:	00001560 	andeq	r1, r0, r0, ror #10
    1634:	00000000 	andeq	r0, r0, r0
    1638:	0000001a 	andeq	r0, r0, sl, lsl r0
    163c:	40040e41 	andmi	r0, r4, r1, asr #28
    1640:	0e410187 	dvfeqd	f0, f1, f7
    1644:	070d4110 	smladeq	sp, r0, r1, r4
    1648:	41040e46 	tstmi	r4, r6, asr #28
    164c:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1650:	00000e40 	andeq	r0, r0, r0, asr #28
    1654:	00000024 	andeq	r0, r0, r4, lsr #32
    1658:	00001560 	andeq	r1, r0, r0, ror #10
    165c:	00000000 	andeq	r0, r0, r0
    1660:	00000034 	andeq	r0, r0, r4, lsr r0
    1664:	40040e41 	andmi	r0, r4, r1, asr #28
    1668:	0e410187 	dvfeqd	f0, f1, f7
    166c:	070d4118 	smladeq	sp, r8, r1, r4
    1670:	41040e53 	tstmi	r4, r3, asr lr
    1674:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1678:	00000e40 	andeq	r0, r0, r0, asr #28
    167c:	00000024 	andeq	r0, r0, r4, lsr #32
    1680:	00001560 	andeq	r1, r0, r0, ror #10
    1684:	00000000 	andeq	r0, r0, r0
    1688:	0000001a 	andeq	r0, r0, sl, lsl r0
    168c:	40040e41 	andmi	r0, r4, r1, asr #28
    1690:	0e410187 	dvfeqd	f0, f1, f7
    1694:	070d4110 	smladeq	sp, r0, r1, r4
    1698:	41040e46 	tstmi	r4, r6, asr #28
    169c:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    16a0:	00000e40 	andeq	r0, r0, r0, asr #28
    16a4:	00000024 	andeq	r0, r0, r4, lsr #32
    16a8:	00001560 	andeq	r1, r0, r0, ror #10
    16ac:	08004b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, lr}
    16b0:	0000001c 	andeq	r0, r0, ip, lsl r0
    16b4:	40040e41 	andmi	r0, r4, r1, asr #28
    16b8:	0e410187 	dvfeqd	f0, f1, f7
    16bc:	070d4110 	smladeq	sp, r0, r1, r4
    16c0:	41040e47 	tstmi	r4, r7, asr #28
    16c4:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    16c8:	00000e40 	andeq	r0, r0, r0, asr #28
    16cc:	00000024 	andeq	r0, r0, r4, lsr #32
    16d0:	00001560 	andeq	r1, r0, r0, ror #10
    16d4:	08004b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, lr}
    16d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    16dc:	40040e41 	andmi	r0, r4, r1, asr #28
    16e0:	0e410187 	dvfeqd	f0, f1, f7
    16e4:	070d4110 	smladeq	sp, r0, r1, r4
    16e8:	41040e47 	tstmi	r4, r7, asr #28
    16ec:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    16f0:	00000e40 	andeq	r0, r0, r0, asr #28
    16f4:	00000024 	andeq	r0, r0, r4, lsr #32
    16f8:	00001560 	andeq	r1, r0, r0, ror #10
    16fc:	00000000 	andeq	r0, r0, r0
    1700:	0000002e 	andeq	r0, r0, lr, lsr #32
    1704:	40040e41 	andmi	r0, r4, r1, asr #28
    1708:	0e410187 	dvfeqd	f0, f1, f7
    170c:	070d4110 	smladeq	sp, r0, r1, r4
    1710:	41040e50 	tstmi	r4, r0, asr lr
    1714:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1718:	00000e40 	andeq	r0, r0, r0, asr #28
    171c:	00000024 	andeq	r0, r0, r4, lsr #32
    1720:	00001560 	andeq	r1, r0, r0, ror #10
    1724:	00000000 	andeq	r0, r0, r0
    1728:	0000001c 	andeq	r0, r0, ip, lsl r0
    172c:	40040e41 	andmi	r0, r4, r1, asr #28
    1730:	0e410187 	dvfeqd	f0, f1, f7
    1734:	070d4110 	smladeq	sp, r0, r1, r4
    1738:	41040e47 	tstmi	r4, r7, asr #28
    173c:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1740:	00000e40 	andeq	r0, r0, r0, asr #28
    1744:	00000024 	andeq	r0, r0, r4, lsr #32
    1748:	00001560 	andeq	r1, r0, r0, ror #10
    174c:	00000000 	andeq	r0, r0, r0
    1750:	00000042 	andeq	r0, r0, r2, asr #32
    1754:	40040e41 	andmi	r0, r4, r1, asr #28
    1758:	0e410187 	dvfeqd	f0, f1, f7
    175c:	070d4118 	smladeq	sp, r8, r1, r4
    1760:	41040e5a 	tstmi	r4, sl, asr lr
    1764:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1768:	00000e40 	andeq	r0, r0, r0, asr #28
    176c:	00000024 	andeq	r0, r0, r4, lsr #32
    1770:	00001560 	andeq	r1, r0, r0, ror #10
    1774:	00000000 	andeq	r0, r0, r0
    1778:	0000004c 	andeq	r0, r0, ip, asr #32
    177c:	40040e41 	andmi	r0, r4, r1, asr #28
    1780:	0e410187 	dvfeqd	f0, f1, f7
    1784:	070d4118 	smladeq	sp, r8, r1, r4
    1788:	41040e5c 	tstmi	r4, ip, asr lr
    178c:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1790:	00000e40 	andeq	r0, r0, r0, asr #28
    1794:	00000024 	andeq	r0, r0, r4, lsr #32
    1798:	00001560 	andeq	r1, r0, r0, ror #10
    179c:	00000000 	andeq	r0, r0, r0
    17a0:	00000020 	andeq	r0, r0, r0, lsr #32
    17a4:	40040e41 	andmi	r0, r4, r1, asr #28
    17a8:	0e410187 	dvfeqd	f0, f1, f7
    17ac:	070d4110 	smladeq	sp, r0, r1, r4
    17b0:	41040e46 	tstmi	r4, r6, asr #28
    17b4:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    17b8:	00000e40 	andeq	r0, r0, r0, asr #28
    17bc:	00000024 	andeq	r0, r0, r4, lsr #32
    17c0:	00001560 	andeq	r1, r0, r0, ror #10
    17c4:	00000000 	andeq	r0, r0, r0
    17c8:	000000e0 	andeq	r0, r0, r0, ror #1
    17cc:	40040e41 	andmi	r0, r4, r1, asr #28
    17d0:	0e410187 	dvfeqd	f0, f1, f7
    17d4:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    17d8:	040e6702 	streq	r6, [lr], #-1794	; 0xfffff8fe
    17dc:	420d0d41 	andmi	r0, sp, #4160	; 0x1040
    17e0:	000e40c7 	andeq	r4, lr, r7, asr #1
    17e4:	00000028 	andeq	r0, r0, r8, lsr #32
    17e8:	00001560 	andeq	r1, r0, r0, ror #10
    17ec:	00000000 	andeq	r0, r0, r0
    17f0:	00000084 	andeq	r0, r0, r4, lsl #1
    17f4:	40080e41 	andmi	r0, r8, r1, asr #28
    17f8:	87400284 	strbhi	r0, [r0, -r4, lsl #5]
    17fc:	180e4101 	stmdane	lr, {r0, r8, lr}
    1800:	79070d41 	stmdbvc	r7, {r0, r6, r8, sl, fp}
    1804:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    1808:	40c7410d 	sbcmi	r4, r7, sp, lsl #2
    180c:	000e40c4 	andeq	r4, lr, r4, asr #1
    1810:	00000024 	andeq	r0, r0, r4, lsr #32
    1814:	00001560 	andeq	r1, r0, r0, ror #10
    1818:	00000000 	andeq	r0, r0, r0
    181c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1820:	40040e41 	andmi	r0, r4, r1, asr #28
    1824:	0e410187 	dvfeqd	f0, f1, f7
    1828:	070d4110 	smladeq	sp, r0, r1, r4
    182c:	41040e45 	tstmi	r4, r5, asr #28
    1830:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1834:	00000e40 	andeq	r0, r0, r0, asr #28
    1838:	0000000c 	andeq	r0, r0, ip
    183c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1840:	7c020001 	stcvc	0, cr0, [r2], {1}
    1844:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1848:	00000024 	andeq	r0, r0, r4, lsr #32
    184c:	00001838 	andeq	r1, r0, r8, lsr r8
    1850:	00000000 	andeq	r0, r0, r0
    1854:	00000074 	andeq	r0, r0, r4, ror r0
    1858:	40080e41 	andmi	r0, r8, r1, asr #28
    185c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1860:	100e4101 	andne	r4, lr, r1, lsl #2
    1864:	6e070d41 	cdpvs	13, 0, cr0, cr7, cr1, {2}
    1868:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    186c:	0000000d 	andeq	r0, r0, sp
    1870:	00000024 	andeq	r0, r0, r4, lsr #32
    1874:	00001838 	andeq	r1, r0, r8, lsr r8
    1878:	08004b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp, lr}
    187c:	00000086 	andeq	r0, r0, r6, lsl #1
    1880:	40040e41 	andmi	r0, r4, r1, asr #28
    1884:	0e410187 	dvfeqd	f0, f1, f7
    1888:	070d4118 	smladeq	sp, r8, r1, r4
    188c:	41040e7c 	tstmi	r4, ip, ror lr
    1890:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1894:	00000e40 	andeq	r0, r0, r0, asr #28
    1898:	00000024 	andeq	r0, r0, r4, lsr #32
    189c:	00001838 	andeq	r1, r0, r8, lsr r8
    18a0:	00000000 	andeq	r0, r0, r0
    18a4:	00000164 	andeq	r0, r0, r4, ror #2
    18a8:	40080e41 	andmi	r0, r8, r1, asr #28
    18ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    18b0:	380e4101 	stmdacc	lr, {r0, r8, lr}
    18b4:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    18b8:	41080ea9 	smlatbmi	r8, r9, lr, r0
    18bc:	00000d0d 	andeq	r0, r0, sp, lsl #26
    18c0:	00000024 	andeq	r0, r0, r4, lsr #32
    18c4:	00001838 	andeq	r1, r0, r8, lsr r8
    18c8:	00000000 	andeq	r0, r0, r0
    18cc:	00000048 	andeq	r0, r0, r8, asr #32
    18d0:	40040e41 	andmi	r0, r4, r1, asr #28
    18d4:	0e410187 	dvfeqd	f0, f1, f7
    18d8:	070d4110 	smladeq	sp, r0, r1, r4
    18dc:	41040e5d 	tstmi	r4, sp, asr lr
    18e0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    18e4:	00000e40 	andeq	r0, r0, r0, asr #28
    18e8:	00000024 	andeq	r0, r0, r4, lsr #32
    18ec:	00001838 	andeq	r1, r0, r8, lsr r8
    18f0:	00000000 	andeq	r0, r0, r0
    18f4:	00000036 	andeq	r0, r0, r6, lsr r0
    18f8:	40040e41 	andmi	r0, r4, r1, asr #28
    18fc:	0e410187 	dvfeqd	f0, f1, f7
    1900:	070d4110 	smladeq	sp, r0, r1, r4
    1904:	41040e54 	tstmi	r4, r4, asr lr
    1908:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    190c:	00000e40 	andeq	r0, r0, r0, asr #28
    1910:	00000024 	andeq	r0, r0, r4, lsr #32
    1914:	00001838 	andeq	r1, r0, r8, lsr r8
    1918:	08004c20 	stmdaeq	r0, {r5, sl, fp, lr}
    191c:	0000003e 	andeq	r0, r0, lr, lsr r0
    1920:	40040e41 	andmi	r0, r4, r1, asr #28
    1924:	0e410187 	dvfeqd	f0, f1, f7
    1928:	070d4110 	smladeq	sp, r0, r1, r4
    192c:	41040e58 	tstmi	r4, r8, asr lr
    1930:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1934:	00000e40 	andeq	r0, r0, r0, asr #28
    1938:	00000024 	andeq	r0, r0, r4, lsr #32
    193c:	00001838 	andeq	r1, r0, r8, lsr r8
    1940:	00000000 	andeq	r0, r0, r0
    1944:	0000003e 	andeq	r0, r0, lr, lsr r0
    1948:	40040e41 	andmi	r0, r4, r1, asr #28
    194c:	0e410187 	dvfeqd	f0, f1, f7
    1950:	070d4110 	smladeq	sp, r0, r1, r4
    1954:	41040e58 	tstmi	r4, r8, asr lr
    1958:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    195c:	00000e40 	andeq	r0, r0, r0, asr #28
    1960:	00000024 	andeq	r0, r0, r4, lsr #32
    1964:	00001838 	andeq	r1, r0, r8, lsr r8
    1968:	00000000 	andeq	r0, r0, r0
    196c:	00000060 	andeq	r0, r0, r0, rrx
    1970:	40040e41 	andmi	r0, r4, r1, asr #28
    1974:	0e410187 	dvfeqd	f0, f1, f7
    1978:	070d4118 	smladeq	sp, r8, r1, r4
    197c:	41040e69 	tstmi	r4, r9, ror #28
    1980:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1984:	00000e40 	andeq	r0, r0, r0, asr #28
    1988:	00000024 	andeq	r0, r0, r4, lsr #32
    198c:	00001838 	andeq	r1, r0, r8, lsr r8
    1990:	00000000 	andeq	r0, r0, r0
    1994:	00000046 	andeq	r0, r0, r6, asr #32
    1998:	40040e41 	andmi	r0, r4, r1, asr #28
    199c:	0e410187 	dvfeqd	f0, f1, f7
    19a0:	070d4110 	smladeq	sp, r0, r1, r4
    19a4:	41040e5c 	tstmi	r4, ip, asr lr
    19a8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    19ac:	00000e40 	andeq	r0, r0, r0, asr #28
    19b0:	00000024 	andeq	r0, r0, r4, lsr #32
    19b4:	00001838 	andeq	r1, r0, r8, lsr r8
    19b8:	08004c60 	stmdaeq	r0, {r5, r6, sl, fp, lr}
    19bc:	0000001c 	andeq	r0, r0, ip, lsl r0
    19c0:	40040e41 	andmi	r0, r4, r1, asr #28
    19c4:	0e410187 	dvfeqd	f0, f1, f7
    19c8:	070d4110 	smladeq	sp, r0, r1, r4
    19cc:	41040e47 	tstmi	r4, r7, asr #28
    19d0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    19d4:	00000e40 	andeq	r0, r0, r0, asr #28
    19d8:	00000024 	andeq	r0, r0, r4, lsr #32
    19dc:	00001838 	andeq	r1, r0, r8, lsr r8
    19e0:	08004c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, lr}
    19e4:	0000001a 	andeq	r0, r0, sl, lsl r0
    19e8:	40040e41 	andmi	r0, r4, r1, asr #28
    19ec:	0e410187 	dvfeqd	f0, f1, f7
    19f0:	070d4110 	smladeq	sp, r0, r1, r4
    19f4:	41040e46 	tstmi	r4, r6, asr #28
    19f8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    19fc:	00000e40 	andeq	r0, r0, r0, asr #28
    1a00:	00000024 	andeq	r0, r0, r4, lsr #32
    1a04:	00001838 	andeq	r1, r0, r8, lsr r8
    1a08:	00000000 	andeq	r0, r0, r0
    1a0c:	00000042 	andeq	r0, r0, r2, asr #32
    1a10:	40040e41 	andmi	r0, r4, r1, asr #28
    1a14:	0e410187 	dvfeqd	f0, f1, f7
    1a18:	070d4110 	smladeq	sp, r0, r1, r4
    1a1c:	41040e5a 	tstmi	r4, sl, asr lr
    1a20:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1a24:	00000e40 	andeq	r0, r0, r0, asr #28
    1a28:	00000024 	andeq	r0, r0, r4, lsr #32
    1a2c:	00001838 	andeq	r1, r0, r8, lsr r8
    1a30:	00000000 	andeq	r0, r0, r0
    1a34:	0000003e 	andeq	r0, r0, lr, lsr r0
    1a38:	40040e41 	andmi	r0, r4, r1, asr #28
    1a3c:	0e410187 	dvfeqd	f0, f1, f7
    1a40:	070d4110 	smladeq	sp, r0, r1, r4
    1a44:	41040e58 	tstmi	r4, r8, asr lr
    1a48:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1a4c:	00000e40 	andeq	r0, r0, r0, asr #28
    1a50:	00000024 	andeq	r0, r0, r4, lsr #32
    1a54:	00001838 	andeq	r1, r0, r8, lsr r8
    1a58:	00000000 	andeq	r0, r0, r0
    1a5c:	00000036 	andeq	r0, r0, r6, lsr r0
    1a60:	40040e41 	andmi	r0, r4, r1, asr #28
    1a64:	0e410187 	dvfeqd	f0, f1, f7
    1a68:	070d4110 	smladeq	sp, r0, r1, r4
    1a6c:	41040e54 	tstmi	r4, r4, asr lr
    1a70:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1a74:	00000e40 	andeq	r0, r0, r0, asr #28
    1a78:	00000024 	andeq	r0, r0, r4, lsr #32
    1a7c:	00001838 	andeq	r1, r0, r8, lsr r8
    1a80:	00000000 	andeq	r0, r0, r0
    1a84:	00000022 	andeq	r0, r0, r2, lsr #32
    1a88:	40040e41 	andmi	r0, r4, r1, asr #28
    1a8c:	0e410187 	dvfeqd	f0, f1, f7
    1a90:	070d4110 	smladeq	sp, r0, r1, r4
    1a94:	41040e4a 	tstmi	r4, sl, asr #28
    1a98:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1a9c:	00000e40 	andeq	r0, r0, r0, asr #28
    1aa0:	00000024 	andeq	r0, r0, r4, lsr #32
    1aa4:	00001838 	andeq	r1, r0, r8, lsr r8
    1aa8:	00000000 	andeq	r0, r0, r0
    1aac:	0000003e 	andeq	r0, r0, lr, lsr r0
    1ab0:	40040e41 	andmi	r0, r4, r1, asr #28
    1ab4:	0e410187 	dvfeqd	f0, f1, f7
    1ab8:	070d4110 	smladeq	sp, r0, r1, r4
    1abc:	41040e58 	tstmi	r4, r8, asr lr
    1ac0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1ac4:	00000e40 	andeq	r0, r0, r0, asr #28
    1ac8:	00000024 	andeq	r0, r0, r4, lsr #32
    1acc:	00001838 	andeq	r1, r0, r8, lsr r8
    1ad0:	00000000 	andeq	r0, r0, r0
    1ad4:	00000032 	andeq	r0, r0, r2, lsr r0
    1ad8:	40040e41 	andmi	r0, r4, r1, asr #28
    1adc:	0e410187 	dvfeqd	f0, f1, f7
    1ae0:	070d4118 	smladeq	sp, r8, r1, r4
    1ae4:	41040e52 	tstmi	r4, r2, asr lr
    1ae8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1aec:	00000e40 	andeq	r0, r0, r0, asr #28
    1af0:	00000024 	andeq	r0, r0, r4, lsr #32
    1af4:	00001838 	andeq	r1, r0, r8, lsr r8
    1af8:	00000000 	andeq	r0, r0, r0
    1afc:	0000001a 	andeq	r0, r0, sl, lsl r0
    1b00:	40040e41 	andmi	r0, r4, r1, asr #28
    1b04:	0e410187 	dvfeqd	f0, f1, f7
    1b08:	070d4110 	smladeq	sp, r0, r1, r4
    1b0c:	41040e46 	tstmi	r4, r6, asr #28
    1b10:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1b14:	00000e40 	andeq	r0, r0, r0, asr #28
    1b18:	00000024 	andeq	r0, r0, r4, lsr #32
    1b1c:	00001838 	andeq	r1, r0, r8, lsr r8
    1b20:	00000000 	andeq	r0, r0, r0
    1b24:	00000040 	andeq	r0, r0, r0, asr #32
    1b28:	40040e41 	andmi	r0, r4, r1, asr #28
    1b2c:	0e410187 	dvfeqd	f0, f1, f7
    1b30:	070d4110 	smladeq	sp, r0, r1, r4
    1b34:	41040e59 	tstmi	r4, r9, asr lr
    1b38:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1b3c:	00000e40 	andeq	r0, r0, r0, asr #28
    1b40:	00000024 	andeq	r0, r0, r4, lsr #32
    1b44:	00001838 	andeq	r1, r0, r8, lsr r8
    1b48:	08004c98 	stmdaeq	r0, {r3, r4, r7, sl, fp, lr}
    1b4c:	00000038 	andeq	r0, r0, r8, lsr r0
    1b50:	40040e41 	andmi	r0, r4, r1, asr #28
    1b54:	0e410187 	dvfeqd	f0, f1, f7
    1b58:	070d4118 	smladeq	sp, r8, r1, r4
    1b5c:	41040e55 	tstmi	r4, r5, asr lr
    1b60:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1b64:	00000e40 	andeq	r0, r0, r0, asr #28
    1b68:	00000024 	andeq	r0, r0, r4, lsr #32
    1b6c:	00001838 	andeq	r1, r0, r8, lsr r8
    1b70:	00000000 	andeq	r0, r0, r0
    1b74:	00000020 	andeq	r0, r0, r0, lsr #32
    1b78:	40040e41 	andmi	r0, r4, r1, asr #28
    1b7c:	0e410187 	dvfeqd	f0, f1, f7
    1b80:	070d4110 	smladeq	sp, r0, r1, r4
    1b84:	41040e49 	tstmi	r4, r9, asr #28
    1b88:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1b8c:	00000e40 	andeq	r0, r0, r0, asr #28
    1b90:	00000024 	andeq	r0, r0, r4, lsr #32
    1b94:	00001838 	andeq	r1, r0, r8, lsr r8
    1b98:	00000000 	andeq	r0, r0, r0
    1b9c:	00000076 	andeq	r0, r0, r6, ror r0
    1ba0:	40040e41 	andmi	r0, r4, r1, asr #28
    1ba4:	0e410187 	dvfeqd	f0, f1, f7
    1ba8:	070d4118 	smladeq	sp, r8, r1, r4
    1bac:	41040e74 	tstmi	r4, r4, ror lr
    1bb0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1bb4:	00000e40 	andeq	r0, r0, r0, asr #28
    1bb8:	00000024 	andeq	r0, r0, r4, lsr #32
    1bbc:	00001838 	andeq	r1, r0, r8, lsr r8
    1bc0:	00000000 	andeq	r0, r0, r0
    1bc4:	00000032 	andeq	r0, r0, r2, lsr r0
    1bc8:	40040e41 	andmi	r0, r4, r1, asr #28
    1bcc:	0e410187 	dvfeqd	f0, f1, f7
    1bd0:	070d4118 	smladeq	sp, r8, r1, r4
    1bd4:	41040e52 	tstmi	r4, r2, asr lr
    1bd8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1bdc:	00000e40 	andeq	r0, r0, r0, asr #28
    1be0:	0000000c 	andeq	r0, r0, ip
    1be4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1be8:	7c020001 	stcvc	0, cr0, [r2], {1}
    1bec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1bf0:	00000024 	andeq	r0, r0, r4, lsr #32
    1bf4:	00001be0 	andeq	r1, r0, r0, ror #23
    1bf8:	00000000 	andeq	r0, r0, r0
    1bfc:	0000022c 	andeq	r0, r0, ip, lsr #4
    1c00:	40080e41 	andmi	r0, r8, r1, asr #28
    1c04:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1c08:	100e4101 	andne	r4, lr, r1, lsl #2
    1c0c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    1c10:	41080ef0 	strdmi	r0, [r8, -r0]
    1c14:	00000d0d 	andeq	r0, r0, sp, lsl #26
    1c18:	00000024 	andeq	r0, r0, r4, lsr #32
    1c1c:	00001be0 	andeq	r1, r0, r0, ror #23
    1c20:	08004cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, lr}
    1c24:	000000f8 	strdeq	r0, [r0], -r8
    1c28:	40040e41 	andmi	r0, r4, r1, asr #28
    1c2c:	0e410187 	dvfeqd	f0, f1, f7
    1c30:	070d4118 	smladeq	sp, r8, r1, r4
    1c34:	040e6102 	streq	r6, [lr], #-258	; 0xfffffefe
    1c38:	420d0d41 	andmi	r0, sp, #4160	; 0x1040
    1c3c:	000e40c7 	andeq	r4, lr, r7, asr #1
    1c40:	00000024 	andeq	r0, r0, r4, lsr #32
    1c44:	00001be0 	andeq	r1, r0, r0, ror #23
    1c48:	00000000 	andeq	r0, r0, r0
    1c4c:	00000118 	andeq	r0, r0, r8, lsl r1
    1c50:	40040e41 	andmi	r0, r4, r1, asr #28
    1c54:	0e410187 	dvfeqd	f0, f1, f7
    1c58:	070d4118 	smladeq	sp, r8, r1, r4
    1c5c:	040e7a02 	streq	r7, [lr], #-2562	; 0xfffff5fe
    1c60:	420d0d41 	andmi	r0, sp, #4160	; 0x1040
    1c64:	000e40c7 	andeq	r4, lr, r7, asr #1
    1c68:	00000024 	andeq	r0, r0, r4, lsr #32
    1c6c:	00001be0 	andeq	r1, r0, r0, ror #23
    1c70:	00000000 	andeq	r0, r0, r0
    1c74:	00000110 	andeq	r0, r0, r0, lsl r1
    1c78:	40040e41 	andmi	r0, r4, r1, asr #28
    1c7c:	0e410187 	dvfeqd	f0, f1, f7
    1c80:	070d4118 	smladeq	sp, r8, r1, r4
    1c84:	040e7c02 	streq	r7, [lr], #-3074	; 0xfffff3fe
    1c88:	420d0d41 	andmi	r0, sp, #4160	; 0x1040
    1c8c:	000e40c7 	andeq	r4, lr, r7, asr #1
    1c90:	00000024 	andeq	r0, r0, r4, lsr #32
    1c94:	00001be0 	andeq	r1, r0, r0, ror #23
    1c98:	00000000 	andeq	r0, r0, r0
    1c9c:	0000010c 	andeq	r0, r0, ip, lsl #2
    1ca0:	40040e41 	andmi	r0, r4, r1, asr #28
    1ca4:	0e410187 	dvfeqd	f0, f1, f7
    1ca8:	070d4118 	smladeq	sp, r8, r1, r4
    1cac:	040e7a02 	streq	r7, [lr], #-2562	; 0xfffff5fe
    1cb0:	420d0d41 	andmi	r0, sp, #4160	; 0x1040
    1cb4:	000e40c7 	andeq	r4, lr, r7, asr #1
    1cb8:	00000024 	andeq	r0, r0, r4, lsr #32
    1cbc:	00001be0 	andeq	r1, r0, r0, ror #23
    1cc0:	00000000 	andeq	r0, r0, r0
    1cc4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1cc8:	40040e41 	andmi	r0, r4, r1, asr #28
    1ccc:	0e410187 	dvfeqd	f0, f1, f7
    1cd0:	070d4118 	smladeq	sp, r8, r1, r4
    1cd4:	040e5c02 	streq	r5, [lr], #-3074	; 0xfffff3fe
    1cd8:	420d0d41 	andmi	r0, sp, #4160	; 0x1040
    1cdc:	000e40c7 	andeq	r4, lr, r7, asr #1
    1ce0:	00000024 	andeq	r0, r0, r4, lsr #32
    1ce4:	00001be0 	andeq	r1, r0, r0, ror #23
    1ce8:	00000000 	andeq	r0, r0, r0
    1cec:	000000a6 	andeq	r0, r0, r6, lsr #1
    1cf0:	40080e41 	andmi	r0, r8, r1, asr #28
    1cf4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1cf8:	100e4101 	andne	r4, lr, r1, lsl #2
    1cfc:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    1d00:	41080e4e 	tstmi	r8, lr, asr #28
    1d04:	00000d0d 	andeq	r0, r0, sp, lsl #26
    1d08:	00000024 	andeq	r0, r0, r4, lsr #32
    1d0c:	00001be0 	andeq	r1, r0, r0, ror #23
    1d10:	00000000 	andeq	r0, r0, r0
    1d14:	000000b6 	strheq	r0, [r0], -r6
    1d18:	40080e41 	andmi	r0, r8, r1, asr #28
    1d1c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1d20:	180e4101 	stmdane	lr, {r0, r8, lr}
    1d24:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    1d28:	41080e56 	tstmi	r8, r6, asr lr
    1d2c:	00000d0d 	andeq	r0, r0, sp, lsl #26
    1d30:	00000024 	andeq	r0, r0, r4, lsr #32
    1d34:	00001be0 	andeq	r1, r0, r0, ror #23
    1d38:	00000000 	andeq	r0, r0, r0
    1d3c:	0000004e 	andeq	r0, r0, lr, asr #32
    1d40:	40040e41 	andmi	r0, r4, r1, asr #28
    1d44:	0e410187 	dvfeqd	f0, f1, f7
    1d48:	070d4110 	smladeq	sp, r0, r1, r4
    1d4c:	41040e60 	tstmi	r4, r0, ror #28
    1d50:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1d54:	00000e40 	andeq	r0, r0, r0, asr #28
    1d58:	00000024 	andeq	r0, r0, r4, lsr #32
    1d5c:	00001be0 	andeq	r1, r0, r0, ror #23
    1d60:	00000000 	andeq	r0, r0, r0
    1d64:	00000032 	andeq	r0, r0, r2, lsr r0
    1d68:	40040e41 	andmi	r0, r4, r1, asr #28
    1d6c:	0e410187 	dvfeqd	f0, f1, f7
    1d70:	070d4110 	smladeq	sp, r0, r1, r4
    1d74:	41040e52 	tstmi	r4, r2, asr lr
    1d78:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1d7c:	00000e40 	andeq	r0, r0, r0, asr #28
    1d80:	00000024 	andeq	r0, r0, r4, lsr #32
    1d84:	00001be0 	andeq	r1, r0, r0, ror #23
    1d88:	00000000 	andeq	r0, r0, r0
    1d8c:	00000042 	andeq	r0, r0, r2, asr #32
    1d90:	40040e41 	andmi	r0, r4, r1, asr #28
    1d94:	0e410187 	dvfeqd	f0, f1, f7
    1d98:	070d4110 	smladeq	sp, r0, r1, r4
    1d9c:	41040e5a 	tstmi	r4, sl, asr lr
    1da0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1da4:	00000e40 	andeq	r0, r0, r0, asr #28
    1da8:	00000024 	andeq	r0, r0, r4, lsr #32
    1dac:	00001be0 	andeq	r1, r0, r0, ror #23
    1db0:	00000000 	andeq	r0, r0, r0
    1db4:	00000030 	andeq	r0, r0, r0, lsr r0
    1db8:	40040e41 	andmi	r0, r4, r1, asr #28
    1dbc:	0e410187 	dvfeqd	f0, f1, f7
    1dc0:	070d4110 	smladeq	sp, r0, r1, r4
    1dc4:	41040e51 	tstmi	r4, r1, asr lr
    1dc8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1dcc:	00000e40 	andeq	r0, r0, r0, asr #28
    1dd0:	00000024 	andeq	r0, r0, r4, lsr #32
    1dd4:	00001be0 	andeq	r1, r0, r0, ror #23
    1dd8:	00000000 	andeq	r0, r0, r0
    1ddc:	0000003c 	andeq	r0, r0, ip, lsr r0
    1de0:	40040e41 	andmi	r0, r4, r1, asr #28
    1de4:	0e410187 	dvfeqd	f0, f1, f7
    1de8:	070d4110 	smladeq	sp, r0, r1, r4
    1dec:	41040e57 	tstmi	r4, r7, asr lr
    1df0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1df4:	00000e40 	andeq	r0, r0, r0, asr #28
    1df8:	00000024 	andeq	r0, r0, r4, lsr #32
    1dfc:	00001be0 	andeq	r1, r0, r0, ror #23
    1e00:	08004dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, lr}
    1e04:	0000003e 	andeq	r0, r0, lr, lsr r0
    1e08:	40040e41 	andmi	r0, r4, r1, asr #28
    1e0c:	0e410187 	dvfeqd	f0, f1, f7
    1e10:	070d4110 	smladeq	sp, r0, r1, r4
    1e14:	41040e58 	tstmi	r4, r8, asr lr
    1e18:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1e1c:	00000e40 	andeq	r0, r0, r0, asr #28
    1e20:	00000024 	andeq	r0, r0, r4, lsr #32
    1e24:	00001be0 	andeq	r1, r0, r0, ror #23
    1e28:	00000000 	andeq	r0, r0, r0
    1e2c:	0000004a 	andeq	r0, r0, sl, asr #32
    1e30:	40040e41 	andmi	r0, r4, r1, asr #28
    1e34:	0e410187 	dvfeqd	f0, f1, f7
    1e38:	070d4110 	smladeq	sp, r0, r1, r4
    1e3c:	41040e5e 	tstmi	r4, lr, asr lr
    1e40:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1e44:	00000e40 	andeq	r0, r0, r0, asr #28
    1e48:	00000024 	andeq	r0, r0, r4, lsr #32
    1e4c:	00001be0 	andeq	r1, r0, r0, ror #23
    1e50:	08004e08 	stmdaeq	r0, {r3, r9, sl, fp, lr}
    1e54:	00000046 	andeq	r0, r0, r6, asr #32
    1e58:	40040e41 	andmi	r0, r4, r1, asr #28
    1e5c:	0e410187 	dvfeqd	f0, f1, f7
    1e60:	070d4110 	smladeq	sp, r0, r1, r4
    1e64:	41040e5c 	tstmi	r4, ip, asr lr
    1e68:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1e6c:	00000e40 	andeq	r0, r0, r0, asr #28
    1e70:	00000024 	andeq	r0, r0, r4, lsr #32
    1e74:	00001be0 	andeq	r1, r0, r0, ror #23
    1e78:	00000000 	andeq	r0, r0, r0
    1e7c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1e80:	40040e41 	andmi	r0, r4, r1, asr #28
    1e84:	0e410187 	dvfeqd	f0, f1, f7
    1e88:	070d4110 	smladeq	sp, r0, r1, r4
    1e8c:	41040e47 	tstmi	r4, r7, asr #28
    1e90:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1e94:	00000e40 	andeq	r0, r0, r0, asr #28
    1e98:	00000024 	andeq	r0, r0, r4, lsr #32
    1e9c:	00001be0 	andeq	r1, r0, r0, ror #23
    1ea0:	00000000 	andeq	r0, r0, r0
    1ea4:	00000028 	andeq	r0, r0, r8, lsr #32
    1ea8:	40040e41 	andmi	r0, r4, r1, asr #28
    1eac:	0e410187 	dvfeqd	f0, f1, f7
    1eb0:	070d4110 	smladeq	sp, r0, r1, r4
    1eb4:	41040e4d 	tstmi	r4, sp, asr #28
    1eb8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1ebc:	00000e40 	andeq	r0, r0, r0, asr #28
    1ec0:	00000024 	andeq	r0, r0, r4, lsr #32
    1ec4:	00001be0 	andeq	r1, r0, r0, ror #23
    1ec8:	00000000 	andeq	r0, r0, r0
    1ecc:	00000046 	andeq	r0, r0, r6, asr #32
    1ed0:	40040e41 	andmi	r0, r4, r1, asr #28
    1ed4:	0e410187 	dvfeqd	f0, f1, f7
    1ed8:	070d4110 	smladeq	sp, r0, r1, r4
    1edc:	41040e5c 	tstmi	r4, ip, asr lr
    1ee0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1ee4:	00000e40 	andeq	r0, r0, r0, asr #28
    1ee8:	00000024 	andeq	r0, r0, r4, lsr #32
    1eec:	00001be0 	andeq	r1, r0, r0, ror #23
    1ef0:	00000000 	andeq	r0, r0, r0
    1ef4:	00000022 	andeq	r0, r0, r2, lsr #32
    1ef8:	40040e41 	andmi	r0, r4, r1, asr #28
    1efc:	0e410187 	dvfeqd	f0, f1, f7
    1f00:	070d4110 	smladeq	sp, r0, r1, r4
    1f04:	41040e4a 	tstmi	r4, sl, asr #28
    1f08:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1f0c:	00000e40 	andeq	r0, r0, r0, asr #28
    1f10:	00000024 	andeq	r0, r0, r4, lsr #32
    1f14:	00001be0 	andeq	r1, r0, r0, ror #23
    1f18:	00000000 	andeq	r0, r0, r0
    1f1c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1f20:	40080e41 	andmi	r0, r8, r1, asr #28
    1f24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1f28:	100e4101 	andne	r4, lr, r1, lsl #2
    1f2c:	51070d41 	tstpl	r7, r1, asr #26
    1f30:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    1f34:	0000000d 	andeq	r0, r0, sp
    1f38:	00000024 	andeq	r0, r0, r4, lsr #32
    1f3c:	00001be0 	andeq	r1, r0, r0, ror #23
    1f40:	00000000 	andeq	r0, r0, r0
    1f44:	0000005e 	andeq	r0, r0, lr, asr r0
    1f48:	40080e41 	andmi	r0, r8, r1, asr #28
    1f4c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1f50:	180e4101 	stmdane	lr, {r0, r8, lr}
    1f54:	6a070d41 	bvs	1c5460 <_Min_Stack_Size+0x1c5260>
    1f58:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    1f5c:	0000000d 	andeq	r0, r0, sp
    1f60:	00000024 	andeq	r0, r0, r4, lsr #32
    1f64:	00001be0 	andeq	r1, r0, r0, ror #23
    1f68:	00000000 	andeq	r0, r0, r0
    1f6c:	0000005c 	andeq	r0, r0, ip, asr r0
    1f70:	40080e41 	andmi	r0, r8, r1, asr #28
    1f74:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1f78:	200e4101 	andcs	r4, lr, r1, lsl #2
    1f7c:	69070d41 	stmdbvs	r7, {r0, r6, r8, sl, fp}
    1f80:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    1f84:	0000000d 	andeq	r0, r0, sp
    1f88:	00000024 	andeq	r0, r0, r4, lsr #32
    1f8c:	00001be0 	andeq	r1, r0, r0, ror #23
    1f90:	00000000 	andeq	r0, r0, r0
    1f94:	0000003c 	andeq	r0, r0, ip, lsr r0
    1f98:	40080e41 	andmi	r0, r8, r1, asr #28
    1f9c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1fa0:	180e4101 	stmdane	lr, {r0, r8, lr}
    1fa4:	59070d41 	stmdbpl	r7, {r0, r6, r8, sl, fp}
    1fa8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    1fac:	0000000d 	andeq	r0, r0, sp
    1fb0:	00000024 	andeq	r0, r0, r4, lsr #32
    1fb4:	00001be0 	andeq	r1, r0, r0, ror #23
    1fb8:	00000000 	andeq	r0, r0, r0
    1fbc:	00000052 	andeq	r0, r0, r2, asr r0
    1fc0:	40040e41 	andmi	r0, r4, r1, asr #28
    1fc4:	0e410187 	dvfeqd	f0, f1, f7
    1fc8:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    1fcc:	41040e62 	tstmi	r4, r2, ror #28
    1fd0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1fd4:	00000e40 	andeq	r0, r0, r0, asr #28
    1fd8:	00000024 	andeq	r0, r0, r4, lsr #32
    1fdc:	00001be0 	andeq	r1, r0, r0, ror #23
    1fe0:	00000000 	andeq	r0, r0, r0
    1fe4:	00000026 	andeq	r0, r0, r6, lsr #32
    1fe8:	40040e41 	andmi	r0, r4, r1, asr #28
    1fec:	0e410187 	dvfeqd	f0, f1, f7
    1ff0:	070d4110 	smladeq	sp, r0, r1, r4
    1ff4:	41040e4c 	tstmi	r4, ip, asr #28
    1ff8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    1ffc:	00000e40 	andeq	r0, r0, r0, asr #28
    2000:	00000024 	andeq	r0, r0, r4, lsr #32
    2004:	00001be0 	andeq	r1, r0, r0, ror #23
    2008:	00000000 	andeq	r0, r0, r0
    200c:	00000036 	andeq	r0, r0, r6, lsr r0
    2010:	40040e41 	andmi	r0, r4, r1, asr #28
    2014:	0e410187 	dvfeqd	f0, f1, f7
    2018:	070d4118 	smladeq	sp, r8, r1, r4
    201c:	41040e54 	tstmi	r4, r4, asr lr
    2020:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2024:	00000e40 	andeq	r0, r0, r0, asr #28
    2028:	00000024 	andeq	r0, r0, r4, lsr #32
    202c:	00001be0 	andeq	r1, r0, r0, ror #23
    2030:	00000000 	andeq	r0, r0, r0
    2034:	00000036 	andeq	r0, r0, r6, lsr r0
    2038:	40040e41 	andmi	r0, r4, r1, asr #28
    203c:	0e410187 	dvfeqd	f0, f1, f7
    2040:	070d4118 	smladeq	sp, r8, r1, r4
    2044:	41040e54 	tstmi	r4, r4, asr lr
    2048:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    204c:	00000e40 	andeq	r0, r0, r0, asr #28
    2050:	00000024 	andeq	r0, r0, r4, lsr #32
    2054:	00001be0 	andeq	r1, r0, r0, ror #23
    2058:	00000000 	andeq	r0, r0, r0
    205c:	00000096 	muleq	r0, r6, r0
    2060:	40040e41 	andmi	r0, r4, r1, asr #28
    2064:	0e410187 	dvfeqd	f0, f1, f7
    2068:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    206c:	040e4402 	streq	r4, [lr], #-1026	; 0xfffffbfe
    2070:	420d0d41 	andmi	r0, sp, #4160	; 0x1040
    2074:	000e40c7 	andeq	r4, lr, r7, asr #1
    2078:	00000024 	andeq	r0, r0, r4, lsr #32
    207c:	00001be0 	andeq	r1, r0, r0, ror #23
    2080:	00000000 	andeq	r0, r0, r0
    2084:	00000036 	andeq	r0, r0, r6, lsr r0
    2088:	40040e41 	andmi	r0, r4, r1, asr #28
    208c:	0e410187 	dvfeqd	f0, f1, f7
    2090:	070d4118 	smladeq	sp, r8, r1, r4
    2094:	41040e54 	tstmi	r4, r4, asr lr
    2098:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    209c:	00000e40 	andeq	r0, r0, r0, asr #28
    20a0:	00000024 	andeq	r0, r0, r4, lsr #32
    20a4:	00001be0 	andeq	r1, r0, r0, ror #23
    20a8:	00000000 	andeq	r0, r0, r0
    20ac:	0000003a 	andeq	r0, r0, sl, lsr r0
    20b0:	40040e41 	andmi	r0, r4, r1, asr #28
    20b4:	0e410187 	dvfeqd	f0, f1, f7
    20b8:	070d4118 	smladeq	sp, r8, r1, r4
    20bc:	41040e56 	tstmi	r4, r6, asr lr
    20c0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    20c4:	00000e40 	andeq	r0, r0, r0, asr #28
    20c8:	00000024 	andeq	r0, r0, r4, lsr #32
    20cc:	00001be0 	andeq	r1, r0, r0, ror #23
    20d0:	00000000 	andeq	r0, r0, r0
    20d4:	00000036 	andeq	r0, r0, r6, lsr r0
    20d8:	40040e41 	andmi	r0, r4, r1, asr #28
    20dc:	0e410187 	dvfeqd	f0, f1, f7
    20e0:	070d4118 	smladeq	sp, r8, r1, r4
    20e4:	41040e54 	tstmi	r4, r4, asr lr
    20e8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    20ec:	00000e40 	andeq	r0, r0, r0, asr #28
    20f0:	00000024 	andeq	r0, r0, r4, lsr #32
    20f4:	00001be0 	andeq	r1, r0, r0, ror #23
    20f8:	00000000 	andeq	r0, r0, r0
    20fc:	0000003a 	andeq	r0, r0, sl, lsr r0
    2100:	40040e41 	andmi	r0, r4, r1, asr #28
    2104:	0e410187 	dvfeqd	f0, f1, f7
    2108:	070d4118 	smladeq	sp, r8, r1, r4
    210c:	41040e56 	tstmi	r4, r6, asr lr
    2110:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2114:	00000e40 	andeq	r0, r0, r0, asr #28
    2118:	00000024 	andeq	r0, r0, r4, lsr #32
    211c:	00001be0 	andeq	r1, r0, r0, ror #23
    2120:	00000000 	andeq	r0, r0, r0
    2124:	0000003e 	andeq	r0, r0, lr, lsr r0
    2128:	40040e41 	andmi	r0, r4, r1, asr #28
    212c:	0e410187 	dvfeqd	f0, f1, f7
    2130:	070d4110 	smladeq	sp, r0, r1, r4
    2134:	41040e58 	tstmi	r4, r8, asr lr
    2138:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    213c:	00000e40 	andeq	r0, r0, r0, asr #28
    2140:	00000024 	andeq	r0, r0, r4, lsr #32
    2144:	00001be0 	andeq	r1, r0, r0, ror #23
    2148:	00000000 	andeq	r0, r0, r0
    214c:	0000003e 	andeq	r0, r0, lr, lsr r0
    2150:	40040e41 	andmi	r0, r4, r1, asr #28
    2154:	0e410187 	dvfeqd	f0, f1, f7
    2158:	070d4110 	smladeq	sp, r0, r1, r4
    215c:	41040e58 	tstmi	r4, r8, asr lr
    2160:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2164:	00000e40 	andeq	r0, r0, r0, asr #28
    2168:	00000024 	andeq	r0, r0, r4, lsr #32
    216c:	00001be0 	andeq	r1, r0, r0, ror #23
    2170:	00000000 	andeq	r0, r0, r0
    2174:	0000003e 	andeq	r0, r0, lr, lsr r0
    2178:	40040e41 	andmi	r0, r4, r1, asr #28
    217c:	0e410187 	dvfeqd	f0, f1, f7
    2180:	070d4110 	smladeq	sp, r0, r1, r4
    2184:	41040e58 	tstmi	r4, r8, asr lr
    2188:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    218c:	00000e40 	andeq	r0, r0, r0, asr #28
    2190:	00000024 	andeq	r0, r0, r4, lsr #32
    2194:	00001be0 	andeq	r1, r0, r0, ror #23
    2198:	00000000 	andeq	r0, r0, r0
    219c:	0000003e 	andeq	r0, r0, lr, lsr r0
    21a0:	40040e41 	andmi	r0, r4, r1, asr #28
    21a4:	0e410187 	dvfeqd	f0, f1, f7
    21a8:	070d4110 	smladeq	sp, r0, r1, r4
    21ac:	41040e58 	tstmi	r4, r8, asr lr
    21b0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    21b4:	00000e40 	andeq	r0, r0, r0, asr #28
    21b8:	00000024 	andeq	r0, r0, r4, lsr #32
    21bc:	00001be0 	andeq	r1, r0, r0, ror #23
    21c0:	00000000 	andeq	r0, r0, r0
    21c4:	00000036 	andeq	r0, r0, r6, lsr r0
    21c8:	40040e41 	andmi	r0, r4, r1, asr #28
    21cc:	0e410187 	dvfeqd	f0, f1, f7
    21d0:	070d4118 	smladeq	sp, r8, r1, r4
    21d4:	41040e54 	tstmi	r4, r4, asr lr
    21d8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    21dc:	00000e40 	andeq	r0, r0, r0, asr #28
    21e0:	00000024 	andeq	r0, r0, r4, lsr #32
    21e4:	00001be0 	andeq	r1, r0, r0, ror #23
    21e8:	00000000 	andeq	r0, r0, r0
    21ec:	0000003a 	andeq	r0, r0, sl, lsr r0
    21f0:	40040e41 	andmi	r0, r4, r1, asr #28
    21f4:	0e410187 	dvfeqd	f0, f1, f7
    21f8:	070d4118 	smladeq	sp, r8, r1, r4
    21fc:	41040e56 	tstmi	r4, r6, asr lr
    2200:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2204:	00000e40 	andeq	r0, r0, r0, asr #28
    2208:	00000024 	andeq	r0, r0, r4, lsr #32
    220c:	00001be0 	andeq	r1, r0, r0, ror #23
    2210:	00000000 	andeq	r0, r0, r0
    2214:	00000036 	andeq	r0, r0, r6, lsr r0
    2218:	40040e41 	andmi	r0, r4, r1, asr #28
    221c:	0e410187 	dvfeqd	f0, f1, f7
    2220:	070d4118 	smladeq	sp, r8, r1, r4
    2224:	41040e54 	tstmi	r4, r4, asr lr
    2228:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    222c:	00000e40 	andeq	r0, r0, r0, asr #28
    2230:	00000024 	andeq	r0, r0, r4, lsr #32
    2234:	00001be0 	andeq	r1, r0, r0, ror #23
    2238:	00000000 	andeq	r0, r0, r0
    223c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2240:	40040e41 	andmi	r0, r4, r1, asr #28
    2244:	0e410187 	dvfeqd	f0, f1, f7
    2248:	070d4118 	smladeq	sp, r8, r1, r4
    224c:	41040e56 	tstmi	r4, r6, asr lr
    2250:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2254:	00000e40 	andeq	r0, r0, r0, asr #28
    2258:	00000024 	andeq	r0, r0, r4, lsr #32
    225c:	00001be0 	andeq	r1, r0, r0, ror #23
    2260:	00000000 	andeq	r0, r0, r0
    2264:	00000036 	andeq	r0, r0, r6, lsr r0
    2268:	40040e41 	andmi	r0, r4, r1, asr #28
    226c:	0e410187 	dvfeqd	f0, f1, f7
    2270:	070d4118 	smladeq	sp, r8, r1, r4
    2274:	41040e54 	tstmi	r4, r4, asr lr
    2278:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    227c:	00000e40 	andeq	r0, r0, r0, asr #28
    2280:	00000024 	andeq	r0, r0, r4, lsr #32
    2284:	00001be0 	andeq	r1, r0, r0, ror #23
    2288:	00000000 	andeq	r0, r0, r0
    228c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2290:	40040e41 	andmi	r0, r4, r1, asr #28
    2294:	0e410187 	dvfeqd	f0, f1, f7
    2298:	070d4118 	smladeq	sp, r8, r1, r4
    229c:	41040e56 	tstmi	r4, r6, asr lr
    22a0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    22a4:	00000e40 	andeq	r0, r0, r0, asr #28
    22a8:	00000024 	andeq	r0, r0, r4, lsr #32
    22ac:	00001be0 	andeq	r1, r0, r0, ror #23
    22b0:	00000000 	andeq	r0, r0, r0
    22b4:	00000036 	andeq	r0, r0, r6, lsr r0
    22b8:	40040e41 	andmi	r0, r4, r1, asr #28
    22bc:	0e410187 	dvfeqd	f0, f1, f7
    22c0:	070d4118 	smladeq	sp, r8, r1, r4
    22c4:	41040e54 	tstmi	r4, r4, asr lr
    22c8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    22cc:	00000e40 	andeq	r0, r0, r0, asr #28
    22d0:	00000024 	andeq	r0, r0, r4, lsr #32
    22d4:	00001be0 	andeq	r1, r0, r0, ror #23
    22d8:	00000000 	andeq	r0, r0, r0
    22dc:	0000003a 	andeq	r0, r0, sl, lsr r0
    22e0:	40040e41 	andmi	r0, r4, r1, asr #28
    22e4:	0e410187 	dvfeqd	f0, f1, f7
    22e8:	070d4118 	smladeq	sp, r8, r1, r4
    22ec:	41040e56 	tstmi	r4, r6, asr lr
    22f0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    22f4:	00000e40 	andeq	r0, r0, r0, asr #28
    22f8:	00000024 	andeq	r0, r0, r4, lsr #32
    22fc:	00001be0 	andeq	r1, r0, r0, ror #23
    2300:	00000000 	andeq	r0, r0, r0
    2304:	00000036 	andeq	r0, r0, r6, lsr r0
    2308:	40040e41 	andmi	r0, r4, r1, asr #28
    230c:	0e410187 	dvfeqd	f0, f1, f7
    2310:	070d4118 	smladeq	sp, r8, r1, r4
    2314:	41040e54 	tstmi	r4, r4, asr lr
    2318:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    231c:	00000e40 	andeq	r0, r0, r0, asr #28
    2320:	00000024 	andeq	r0, r0, r4, lsr #32
    2324:	00001be0 	andeq	r1, r0, r0, ror #23
    2328:	00000000 	andeq	r0, r0, r0
    232c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2330:	40040e41 	andmi	r0, r4, r1, asr #28
    2334:	0e410187 	dvfeqd	f0, f1, f7
    2338:	070d4118 	smladeq	sp, r8, r1, r4
    233c:	41040e56 	tstmi	r4, r6, asr lr
    2340:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2344:	00000e40 	andeq	r0, r0, r0, asr #28
    2348:	00000024 	andeq	r0, r0, r4, lsr #32
    234c:	00001be0 	andeq	r1, r0, r0, ror #23
    2350:	00000000 	andeq	r0, r0, r0
    2354:	00000036 	andeq	r0, r0, r6, lsr r0
    2358:	40040e41 	andmi	r0, r4, r1, asr #28
    235c:	0e410187 	dvfeqd	f0, f1, f7
    2360:	070d4118 	smladeq	sp, r8, r1, r4
    2364:	41040e54 	tstmi	r4, r4, asr lr
    2368:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    236c:	00000e40 	andeq	r0, r0, r0, asr #28
    2370:	00000024 	andeq	r0, r0, r4, lsr #32
    2374:	00001be0 	andeq	r1, r0, r0, ror #23
    2378:	00000000 	andeq	r0, r0, r0
    237c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2380:	40040e41 	andmi	r0, r4, r1, asr #28
    2384:	0e410187 	dvfeqd	f0, f1, f7
    2388:	070d4118 	smladeq	sp, r8, r1, r4
    238c:	41040e56 	tstmi	r4, r6, asr lr
    2390:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2394:	00000e40 	andeq	r0, r0, r0, asr #28
    2398:	00000024 	andeq	r0, r0, r4, lsr #32
    239c:	00001be0 	andeq	r1, r0, r0, ror #23
    23a0:	00000000 	andeq	r0, r0, r0
    23a4:	00000036 	andeq	r0, r0, r6, lsr r0
    23a8:	40040e41 	andmi	r0, r4, r1, asr #28
    23ac:	0e410187 	dvfeqd	f0, f1, f7
    23b0:	070d4118 	smladeq	sp, r8, r1, r4
    23b4:	41040e54 	tstmi	r4, r4, asr lr
    23b8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    23bc:	00000e40 	andeq	r0, r0, r0, asr #28
    23c0:	00000024 	andeq	r0, r0, r4, lsr #32
    23c4:	00001be0 	andeq	r1, r0, r0, ror #23
    23c8:	00000000 	andeq	r0, r0, r0
    23cc:	00000036 	andeq	r0, r0, r6, lsr r0
    23d0:	40040e41 	andmi	r0, r4, r1, asr #28
    23d4:	0e410187 	dvfeqd	f0, f1, f7
    23d8:	070d4118 	smladeq	sp, r8, r1, r4
    23dc:	41040e54 	tstmi	r4, r4, asr lr
    23e0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    23e4:	00000e40 	andeq	r0, r0, r0, asr #28
    23e8:	00000024 	andeq	r0, r0, r4, lsr #32
    23ec:	00001be0 	andeq	r1, r0, r0, ror #23
    23f0:	00000000 	andeq	r0, r0, r0
    23f4:	0000003a 	andeq	r0, r0, sl, lsr r0
    23f8:	40040e41 	andmi	r0, r4, r1, asr #28
    23fc:	0e410187 	dvfeqd	f0, f1, f7
    2400:	070d4118 	smladeq	sp, r8, r1, r4
    2404:	41040e56 	tstmi	r4, r6, asr lr
    2408:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    240c:	00000e40 	andeq	r0, r0, r0, asr #28
    2410:	00000024 	andeq	r0, r0, r4, lsr #32
    2414:	00001be0 	andeq	r1, r0, r0, ror #23
    2418:	00000000 	andeq	r0, r0, r0
    241c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2420:	40040e41 	andmi	r0, r4, r1, asr #28
    2424:	0e410187 	dvfeqd	f0, f1, f7
    2428:	070d4118 	smladeq	sp, r8, r1, r4
    242c:	41040e56 	tstmi	r4, r6, asr lr
    2430:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2434:	00000e40 	andeq	r0, r0, r0, asr #28
    2438:	00000024 	andeq	r0, r0, r4, lsr #32
    243c:	00001be0 	andeq	r1, r0, r0, ror #23
    2440:	00000000 	andeq	r0, r0, r0
    2444:	0000003a 	andeq	r0, r0, sl, lsr r0
    2448:	40040e41 	andmi	r0, r4, r1, asr #28
    244c:	0e410187 	dvfeqd	f0, f1, f7
    2450:	070d4118 	smladeq	sp, r8, r1, r4
    2454:	41040e56 	tstmi	r4, r6, asr lr
    2458:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    245c:	00000e40 	andeq	r0, r0, r0, asr #28
    2460:	00000024 	andeq	r0, r0, r4, lsr #32
    2464:	00001be0 	andeq	r1, r0, r0, ror #23
    2468:	00000000 	andeq	r0, r0, r0
    246c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2470:	40040e41 	andmi	r0, r4, r1, asr #28
    2474:	0e410187 	dvfeqd	f0, f1, f7
    2478:	070d4118 	smladeq	sp, r8, r1, r4
    247c:	41040e56 	tstmi	r4, r6, asr lr
    2480:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2484:	00000e40 	andeq	r0, r0, r0, asr #28
    2488:	00000024 	andeq	r0, r0, r4, lsr #32
    248c:	00001be0 	andeq	r1, r0, r0, ror #23
    2490:	00000000 	andeq	r0, r0, r0
    2494:	0000003a 	andeq	r0, r0, sl, lsr r0
    2498:	40040e41 	andmi	r0, r4, r1, asr #28
    249c:	0e410187 	dvfeqd	f0, f1, f7
    24a0:	070d4118 	smladeq	sp, r8, r1, r4
    24a4:	41040e56 	tstmi	r4, r6, asr lr
    24a8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    24ac:	00000e40 	andeq	r0, r0, r0, asr #28
    24b0:	00000024 	andeq	r0, r0, r4, lsr #32
    24b4:	00001be0 	andeq	r1, r0, r0, ror #23
    24b8:	00000000 	andeq	r0, r0, r0
    24bc:	00000054 	andeq	r0, r0, r4, asr r0
    24c0:	40040e41 	andmi	r0, r4, r1, asr #28
    24c4:	0e410187 	dvfeqd	f0, f1, f7
    24c8:	070d4118 	smladeq	sp, r8, r1, r4
    24cc:	41040e63 	tstmi	r4, r3, ror #28
    24d0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    24d4:	00000e40 	andeq	r0, r0, r0, asr #28
    24d8:	00000024 	andeq	r0, r0, r4, lsr #32
    24dc:	00001be0 	andeq	r1, r0, r0, ror #23
    24e0:	00000000 	andeq	r0, r0, r0
    24e4:	00000054 	andeq	r0, r0, r4, asr r0
    24e8:	40040e41 	andmi	r0, r4, r1, asr #28
    24ec:	0e410187 	dvfeqd	f0, f1, f7
    24f0:	070d4118 	smladeq	sp, r8, r1, r4
    24f4:	41040e63 	tstmi	r4, r3, ror #28
    24f8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    24fc:	00000e40 	andeq	r0, r0, r0, asr #28
    2500:	00000024 	andeq	r0, r0, r4, lsr #32
    2504:	00001be0 	andeq	r1, r0, r0, ror #23
    2508:	00000000 	andeq	r0, r0, r0
    250c:	000000ac 	andeq	r0, r0, ip, lsr #1
    2510:	40040e41 	andmi	r0, r4, r1, asr #28
    2514:	0e410187 	dvfeqd	f0, f1, f7
    2518:	070d4118 	smladeq	sp, r8, r1, r4
    251c:	040e4f02 	streq	r4, [lr], #-3842	; 0xfffff0fe
    2520:	420d0d41 	andmi	r0, sp, #4160	; 0x1040
    2524:	000e40c7 	andeq	r4, lr, r7, asr #1
    2528:	00000024 	andeq	r0, r0, r4, lsr #32
    252c:	00001be0 	andeq	r1, r0, r0, ror #23
    2530:	00000000 	andeq	r0, r0, r0
    2534:	0000003e 	andeq	r0, r0, lr, lsr r0
    2538:	40040e41 	andmi	r0, r4, r1, asr #28
    253c:	0e410187 	dvfeqd	f0, f1, f7
    2540:	070d4110 	smladeq	sp, r0, r1, r4
    2544:	41040e58 	tstmi	r4, r8, asr lr
    2548:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    254c:	00000e40 	andeq	r0, r0, r0, asr #28
    2550:	00000024 	andeq	r0, r0, r4, lsr #32
    2554:	00001be0 	andeq	r1, r0, r0, ror #23
    2558:	00000000 	andeq	r0, r0, r0
    255c:	0000003e 	andeq	r0, r0, lr, lsr r0
    2560:	40040e41 	andmi	r0, r4, r1, asr #28
    2564:	0e410187 	dvfeqd	f0, f1, f7
    2568:	070d4110 	smladeq	sp, r0, r1, r4
    256c:	41040e58 	tstmi	r4, r8, asr lr
    2570:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2574:	00000e40 	andeq	r0, r0, r0, asr #28
    2578:	00000024 	andeq	r0, r0, r4, lsr #32
    257c:	00001be0 	andeq	r1, r0, r0, ror #23
    2580:	00000000 	andeq	r0, r0, r0
    2584:	0000003e 	andeq	r0, r0, lr, lsr r0
    2588:	40040e41 	andmi	r0, r4, r1, asr #28
    258c:	0e410187 	dvfeqd	f0, f1, f7
    2590:	070d4110 	smladeq	sp, r0, r1, r4
    2594:	41040e58 	tstmi	r4, r8, asr lr
    2598:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    259c:	00000e40 	andeq	r0, r0, r0, asr #28
    25a0:	00000024 	andeq	r0, r0, r4, lsr #32
    25a4:	00001be0 	andeq	r1, r0, r0, ror #23
    25a8:	00000000 	andeq	r0, r0, r0
    25ac:	00000036 	andeq	r0, r0, r6, lsr r0
    25b0:	40040e41 	andmi	r0, r4, r1, asr #28
    25b4:	0e410187 	dvfeqd	f0, f1, f7
    25b8:	070d4110 	smladeq	sp, r0, r1, r4
    25bc:	41040e54 	tstmi	r4, r4, asr lr
    25c0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    25c4:	00000e40 	andeq	r0, r0, r0, asr #28
    25c8:	00000024 	andeq	r0, r0, r4, lsr #32
    25cc:	00001be0 	andeq	r1, r0, r0, ror #23
    25d0:	00000000 	andeq	r0, r0, r0
    25d4:	00000036 	andeq	r0, r0, r6, lsr r0
    25d8:	40040e41 	andmi	r0, r4, r1, asr #28
    25dc:	0e410187 	dvfeqd	f0, f1, f7
    25e0:	070d4110 	smladeq	sp, r0, r1, r4
    25e4:	41040e54 	tstmi	r4, r4, asr lr
    25e8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    25ec:	00000e40 	andeq	r0, r0, r0, asr #28
    25f0:	00000024 	andeq	r0, r0, r4, lsr #32
    25f4:	00001be0 	andeq	r1, r0, r0, ror #23
    25f8:	00000000 	andeq	r0, r0, r0
    25fc:	00000036 	andeq	r0, r0, r6, lsr r0
    2600:	40040e41 	andmi	r0, r4, r1, asr #28
    2604:	0e410187 	dvfeqd	f0, f1, f7
    2608:	070d4110 	smladeq	sp, r0, r1, r4
    260c:	41040e54 	tstmi	r4, r4, asr lr
    2610:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2614:	00000e40 	andeq	r0, r0, r0, asr #28
    2618:	00000024 	andeq	r0, r0, r4, lsr #32
    261c:	00001be0 	andeq	r1, r0, r0, ror #23
    2620:	00000000 	andeq	r0, r0, r0
    2624:	00000036 	andeq	r0, r0, r6, lsr r0
    2628:	40040e41 	andmi	r0, r4, r1, asr #28
    262c:	0e410187 	dvfeqd	f0, f1, f7
    2630:	070d4110 	smladeq	sp, r0, r1, r4
    2634:	41040e54 	tstmi	r4, r4, asr lr
    2638:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    263c:	00000e40 	andeq	r0, r0, r0, asr #28
    2640:	00000024 	andeq	r0, r0, r4, lsr #32
    2644:	00001be0 	andeq	r1, r0, r0, ror #23
    2648:	00000000 	andeq	r0, r0, r0
    264c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2650:	40040e41 	andmi	r0, r4, r1, asr #28
    2654:	0e410187 	dvfeqd	f0, f1, f7
    2658:	070d4110 	smladeq	sp, r0, r1, r4
    265c:	41040e47 	tstmi	r4, r7, asr #28
    2660:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2664:	00000e40 	andeq	r0, r0, r0, asr #28
    2668:	00000024 	andeq	r0, r0, r4, lsr #32
    266c:	00001be0 	andeq	r1, r0, r0, ror #23
    2670:	00000000 	andeq	r0, r0, r0
    2674:	0000001c 	andeq	r0, r0, ip, lsl r0
    2678:	40040e41 	andmi	r0, r4, r1, asr #28
    267c:	0e410187 	dvfeqd	f0, f1, f7
    2680:	070d4110 	smladeq	sp, r0, r1, r4
    2684:	41040e47 	tstmi	r4, r7, asr #28
    2688:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    268c:	00000e40 	andeq	r0, r0, r0, asr #28
    2690:	00000024 	andeq	r0, r0, r4, lsr #32
    2694:	00001be0 	andeq	r1, r0, r0, ror #23
    2698:	00000000 	andeq	r0, r0, r0
    269c:	0000001c 	andeq	r0, r0, ip, lsl r0
    26a0:	40040e41 	andmi	r0, r4, r1, asr #28
    26a4:	0e410187 	dvfeqd	f0, f1, f7
    26a8:	070d4110 	smladeq	sp, r0, r1, r4
    26ac:	41040e47 	tstmi	r4, r7, asr #28
    26b0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    26b4:	00000e40 	andeq	r0, r0, r0, asr #28
    26b8:	00000024 	andeq	r0, r0, r4, lsr #32
    26bc:	00001be0 	andeq	r1, r0, r0, ror #23
    26c0:	00000000 	andeq	r0, r0, r0
    26c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    26c8:	40040e41 	andmi	r0, r4, r1, asr #28
    26cc:	0e410187 	dvfeqd	f0, f1, f7
    26d0:	070d4110 	smladeq	sp, r0, r1, r4
    26d4:	41040e47 	tstmi	r4, r7, asr #28
    26d8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    26dc:	00000e40 	andeq	r0, r0, r0, asr #28
    26e0:	00000024 	andeq	r0, r0, r4, lsr #32
    26e4:	00001be0 	andeq	r1, r0, r0, ror #23
    26e8:	00000000 	andeq	r0, r0, r0
    26ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    26f0:	40040e41 	andmi	r0, r4, r1, asr #28
    26f4:	0e410187 	dvfeqd	f0, f1, f7
    26f8:	070d4110 	smladeq	sp, r0, r1, r4
    26fc:	41040e47 	tstmi	r4, r7, asr #28
    2700:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2704:	00000e40 	andeq	r0, r0, r0, asr #28
    2708:	00000024 	andeq	r0, r0, r4, lsr #32
    270c:	00001be0 	andeq	r1, r0, r0, ror #23
    2710:	00000000 	andeq	r0, r0, r0
    2714:	0000001e 	andeq	r0, r0, lr, lsl r0
    2718:	40040e41 	andmi	r0, r4, r1, asr #28
    271c:	0e410187 	dvfeqd	f0, f1, f7
    2720:	070d4110 	smladeq	sp, r0, r1, r4
    2724:	41040e48 	tstmi	r4, r8, asr #28
    2728:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    272c:	00000e40 	andeq	r0, r0, r0, asr #28
    2730:	00000024 	andeq	r0, r0, r4, lsr #32
    2734:	00001be0 	andeq	r1, r0, r0, ror #23
    2738:	00000000 	andeq	r0, r0, r0
    273c:	00000036 	andeq	r0, r0, r6, lsr r0
    2740:	40040e41 	andmi	r0, r4, r1, asr #28
    2744:	0e410187 	dvfeqd	f0, f1, f7
    2748:	070d4110 	smladeq	sp, r0, r1, r4
    274c:	41040e54 	tstmi	r4, r4, asr lr
    2750:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2754:	00000e40 	andeq	r0, r0, r0, asr #28
    2758:	00000024 	andeq	r0, r0, r4, lsr #32
    275c:	00001be0 	andeq	r1, r0, r0, ror #23
    2760:	00000000 	andeq	r0, r0, r0
    2764:	0000003a 	andeq	r0, r0, sl, lsr r0
    2768:	40040e41 	andmi	r0, r4, r1, asr #28
    276c:	0e410187 	dvfeqd	f0, f1, f7
    2770:	070d4110 	smladeq	sp, r0, r1, r4
    2774:	41040e56 	tstmi	r4, r6, asr lr
    2778:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    277c:	00000e40 	andeq	r0, r0, r0, asr #28
    2780:	00000024 	andeq	r0, r0, r4, lsr #32
    2784:	00001be0 	andeq	r1, r0, r0, ror #23
    2788:	00000000 	andeq	r0, r0, r0
    278c:	00000036 	andeq	r0, r0, r6, lsr r0
    2790:	40040e41 	andmi	r0, r4, r1, asr #28
    2794:	0e410187 	dvfeqd	f0, f1, f7
    2798:	070d4110 	smladeq	sp, r0, r1, r4
    279c:	41040e54 	tstmi	r4, r4, asr lr
    27a0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    27a4:	00000e40 	andeq	r0, r0, r0, asr #28
    27a8:	00000024 	andeq	r0, r0, r4, lsr #32
    27ac:	00001be0 	andeq	r1, r0, r0, ror #23
    27b0:	00000000 	andeq	r0, r0, r0
    27b4:	0000003a 	andeq	r0, r0, sl, lsr r0
    27b8:	40040e41 	andmi	r0, r4, r1, asr #28
    27bc:	0e410187 	dvfeqd	f0, f1, f7
    27c0:	070d4110 	smladeq	sp, r0, r1, r4
    27c4:	41040e56 	tstmi	r4, r6, asr lr
    27c8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    27cc:	00000e40 	andeq	r0, r0, r0, asr #28
    27d0:	00000024 	andeq	r0, r0, r4, lsr #32
    27d4:	00001be0 	andeq	r1, r0, r0, ror #23
    27d8:	00000000 	andeq	r0, r0, r0
    27dc:	00000036 	andeq	r0, r0, r6, lsr r0
    27e0:	40040e41 	andmi	r0, r4, r1, asr #28
    27e4:	0e410187 	dvfeqd	f0, f1, f7
    27e8:	070d4110 	smladeq	sp, r0, r1, r4
    27ec:	41040e54 	tstmi	r4, r4, asr lr
    27f0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    27f4:	00000e40 	andeq	r0, r0, r0, asr #28
    27f8:	00000024 	andeq	r0, r0, r4, lsr #32
    27fc:	00001be0 	andeq	r1, r0, r0, ror #23
    2800:	00000000 	andeq	r0, r0, r0
    2804:	0000001a 	andeq	r0, r0, sl, lsl r0
    2808:	40040e41 	andmi	r0, r4, r1, asr #28
    280c:	0e410187 	dvfeqd	f0, f1, f7
    2810:	070d4110 	smladeq	sp, r0, r1, r4
    2814:	41040e46 	tstmi	r4, r6, asr #28
    2818:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    281c:	00000e40 	andeq	r0, r0, r0, asr #28
    2820:	00000024 	andeq	r0, r0, r4, lsr #32
    2824:	00001be0 	andeq	r1, r0, r0, ror #23
    2828:	00000000 	andeq	r0, r0, r0
    282c:	0000001a 	andeq	r0, r0, sl, lsl r0
    2830:	40040e41 	andmi	r0, r4, r1, asr #28
    2834:	0e410187 	dvfeqd	f0, f1, f7
    2838:	070d4110 	smladeq	sp, r0, r1, r4
    283c:	41040e46 	tstmi	r4, r6, asr #28
    2840:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2844:	00000e40 	andeq	r0, r0, r0, asr #28
    2848:	00000024 	andeq	r0, r0, r4, lsr #32
    284c:	00001be0 	andeq	r1, r0, r0, ror #23
    2850:	00000000 	andeq	r0, r0, r0
    2854:	0000001a 	andeq	r0, r0, sl, lsl r0
    2858:	40040e41 	andmi	r0, r4, r1, asr #28
    285c:	0e410187 	dvfeqd	f0, f1, f7
    2860:	070d4110 	smladeq	sp, r0, r1, r4
    2864:	41040e46 	tstmi	r4, r6, asr #28
    2868:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    286c:	00000e40 	andeq	r0, r0, r0, asr #28
    2870:	00000024 	andeq	r0, r0, r4, lsr #32
    2874:	00001be0 	andeq	r1, r0, r0, ror #23
    2878:	00000000 	andeq	r0, r0, r0
    287c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2880:	40040e41 	andmi	r0, r4, r1, asr #28
    2884:	0e410187 	dvfeqd	f0, f1, f7
    2888:	070d4110 	smladeq	sp, r0, r1, r4
    288c:	41040e47 	tstmi	r4, r7, asr #28
    2890:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2894:	00000e40 	andeq	r0, r0, r0, asr #28
    2898:	00000024 	andeq	r0, r0, r4, lsr #32
    289c:	00001be0 	andeq	r1, r0, r0, ror #23
    28a0:	00000000 	andeq	r0, r0, r0
    28a4:	0000001a 	andeq	r0, r0, sl, lsl r0
    28a8:	40040e41 	andmi	r0, r4, r1, asr #28
    28ac:	0e410187 	dvfeqd	f0, f1, f7
    28b0:	070d4110 	smladeq	sp, r0, r1, r4
    28b4:	41040e46 	tstmi	r4, r6, asr #28
    28b8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    28bc:	00000e40 	andeq	r0, r0, r0, asr #28
    28c0:	00000024 	andeq	r0, r0, r4, lsr #32
    28c4:	00001be0 	andeq	r1, r0, r0, ror #23
    28c8:	00000000 	andeq	r0, r0, r0
    28cc:	0000001a 	andeq	r0, r0, sl, lsl r0
    28d0:	40040e41 	andmi	r0, r4, r1, asr #28
    28d4:	0e410187 	dvfeqd	f0, f1, f7
    28d8:	070d4110 	smladeq	sp, r0, r1, r4
    28dc:	41040e46 	tstmi	r4, r6, asr #28
    28e0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    28e4:	00000e40 	andeq	r0, r0, r0, asr #28
    28e8:	00000024 	andeq	r0, r0, r4, lsr #32
    28ec:	00001be0 	andeq	r1, r0, r0, ror #23
    28f0:	00000000 	andeq	r0, r0, r0
    28f4:	00000038 	andeq	r0, r0, r8, lsr r0
    28f8:	40040e41 	andmi	r0, r4, r1, asr #28
    28fc:	0e410187 	dvfeqd	f0, f1, f7
    2900:	070d4118 	smladeq	sp, r8, r1, r4
    2904:	41040e55 	tstmi	r4, r5, asr lr
    2908:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    290c:	00000e40 	andeq	r0, r0, r0, asr #28
    2910:	00000024 	andeq	r0, r0, r4, lsr #32
    2914:	00001be0 	andeq	r1, r0, r0, ror #23
    2918:	00000000 	andeq	r0, r0, r0
    291c:	00000020 	andeq	r0, r0, r0, lsr #32
    2920:	40040e41 	andmi	r0, r4, r1, asr #28
    2924:	0e410187 	dvfeqd	f0, f1, f7
    2928:	070d4110 	smladeq	sp, r0, r1, r4
    292c:	41040e49 	tstmi	r4, r9, asr #28
    2930:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2934:	00000e40 	andeq	r0, r0, r0, asr #28
    2938:	00000024 	andeq	r0, r0, r4, lsr #32
    293c:	00001be0 	andeq	r1, r0, r0, ror #23
    2940:	08004e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, lr}
    2944:	00000054 	andeq	r0, r0, r4, asr r0
    2948:	40040e41 	andmi	r0, r4, r1, asr #28
    294c:	0e410187 	dvfeqd	f0, f1, f7
    2950:	070d4118 	smladeq	sp, r8, r1, r4
    2954:	41040e63 	tstmi	r4, r3, ror #28
    2958:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    295c:	00000e40 	andeq	r0, r0, r0, asr #28
    2960:	00000024 	andeq	r0, r0, r4, lsr #32
    2964:	00001be0 	andeq	r1, r0, r0, ror #23
    2968:	08004ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, lr}
    296c:	00000020 	andeq	r0, r0, r0, lsr #32
    2970:	40040e41 	andmi	r0, r4, r1, asr #28
    2974:	0e410187 	dvfeqd	f0, f1, f7
    2978:	070d4110 	smladeq	sp, r0, r1, r4
    297c:	41040e49 	tstmi	r4, r9, asr #28
    2980:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2984:	00000e40 	andeq	r0, r0, r0, asr #28
    2988:	00000024 	andeq	r0, r0, r4, lsr #32
    298c:	00001be0 	andeq	r1, r0, r0, ror #23
    2990:	00000000 	andeq	r0, r0, r0
    2994:	000000e0 	andeq	r0, r0, r0, ror #1
    2998:	40040e41 	andmi	r0, r4, r1, asr #28
    299c:	0e410187 	dvfeqd	f0, f1, f7
    29a0:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    29a4:	040e5f02 	streq	r5, [lr], #-3842	; 0xfffff0fe
    29a8:	420d0d41 	andmi	r0, sp, #4160	; 0x1040
    29ac:	000e40c7 	andeq	r4, lr, r7, asr #1
    29b0:	00000024 	andeq	r0, r0, r4, lsr #32
    29b4:	00001be0 	andeq	r1, r0, r0, ror #23
    29b8:	00000000 	andeq	r0, r0, r0
    29bc:	000000f4 	strdeq	r0, [r0], -r4
    29c0:	40040e41 	andmi	r0, r4, r1, asr #28
    29c4:	0e410187 	dvfeqd	f0, f1, f7
    29c8:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    29cc:	040e6902 	streq	r6, [lr], #-2306	; 0xfffff6fe
    29d0:	420d0d41 	andmi	r0, sp, #4160	; 0x1040
    29d4:	000e40c7 	andeq	r4, lr, r7, asr #1
    29d8:	00000024 	andeq	r0, r0, r4, lsr #32
    29dc:	00001be0 	andeq	r1, r0, r0, ror #23
    29e0:	00000000 	andeq	r0, r0, r0
    29e4:	000000ec 	andeq	r0, r0, ip, ror #1
    29e8:	40040e41 	andmi	r0, r4, r1, asr #28
    29ec:	0e410187 	dvfeqd	f0, f1, f7
    29f0:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    29f4:	040e6402 	streq	r6, [lr], #-1026	; 0xfffffbfe
    29f8:	420d0d41 	andmi	r0, sp, #4160	; 0x1040
    29fc:	000e40c7 	andeq	r4, lr, r7, asr #1
    2a00:	00000024 	andeq	r0, r0, r4, lsr #32
    2a04:	00001be0 	andeq	r1, r0, r0, ror #23
    2a08:	00000000 	andeq	r0, r0, r0
    2a0c:	000000f8 	strdeq	r0, [r0], -r8
    2a10:	40040e41 	andmi	r0, r4, r1, asr #28
    2a14:	0e410187 	dvfeqd	f0, f1, f7
    2a18:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    2a1c:	040e6b02 	streq	r6, [lr], #-2818	; 0xfffff4fe
    2a20:	420d0d41 	andmi	r0, sp, #4160	; 0x1040
    2a24:	000e40c7 	andeq	r4, lr, r7, asr #1
    2a28:	0000000c 	andeq	r0, r0, ip
    2a2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2a30:	7c020001 	stcvc	0, cr0, [r2], {1}
    2a34:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2a38:	00000024 	andeq	r0, r0, r4, lsr #32
    2a3c:	00002a28 	andeq	r2, r0, r8, lsr #20
    2a40:	08004ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, lr}
    2a44:	00000044 	andeq	r0, r0, r4, asr #32
    2a48:	40080e41 	andmi	r0, r8, r1, asr #28
    2a4c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    2a50:	100e4101 	andne	r4, lr, r1, lsl #2
    2a54:	5b070d41 	blpl	1c5f60 <_Min_Stack_Size+0x1c5d60>
    2a58:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    2a5c:	0000000d 	andeq	r0, r0, sp
    2a60:	00000024 	andeq	r0, r0, r4, lsr #32
    2a64:	00002a28 	andeq	r2, r0, r8, lsr #20
    2a68:	08004f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, lr}
    2a6c:	00000184 	andeq	r0, r0, r4, lsl #3
    2a70:	40080e41 	andmi	r0, r8, r1, asr #28
    2a74:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    2a78:	300e4101 	andcc	r4, lr, r1, lsl #2
    2a7c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    2a80:	41080eb4 			; <UNDEFINED> instruction: 0x41080eb4
    2a84:	00000d0d 	andeq	r0, r0, sp, lsl #26
    2a88:	00000024 	andeq	r0, r0, r4, lsr #32
    2a8c:	00002a28 	andeq	r2, r0, r8, lsr #20
    2a90:	00000000 	andeq	r0, r0, r0
    2a94:	0000003c 	andeq	r0, r0, ip, lsr r0
    2a98:	40040e41 	andmi	r0, r4, r1, asr #28
    2a9c:	0e410187 	dvfeqd	f0, f1, f7
    2aa0:	070d4110 	smladeq	sp, r0, r1, r4
    2aa4:	41040e57 	tstmi	r4, r7, asr lr
    2aa8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2aac:	00000e40 	andeq	r0, r0, r0, asr #28
    2ab0:	00000024 	andeq	r0, r0, r4, lsr #32
    2ab4:	00002a28 	andeq	r2, r0, r8, lsr #20
    2ab8:	0800508c 	stmdaeq	r0, {r2, r3, r7, ip, lr}
    2abc:	0000003e 	andeq	r0, r0, lr, lsr r0
    2ac0:	40040e41 	andmi	r0, r4, r1, asr #28
    2ac4:	0e410187 	dvfeqd	f0, f1, f7
    2ac8:	070d4110 	smladeq	sp, r0, r1, r4
    2acc:	41040e58 	tstmi	r4, r8, asr lr
    2ad0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2ad4:	00000e40 	andeq	r0, r0, r0, asr #28
    2ad8:	00000024 	andeq	r0, r0, r4, lsr #32
    2adc:	00002a28 	andeq	r2, r0, r8, lsr #20
    2ae0:	00000000 	andeq	r0, r0, r0
    2ae4:	0000003e 	andeq	r0, r0, lr, lsr r0
    2ae8:	40040e41 	andmi	r0, r4, r1, asr #28
    2aec:	0e410187 	dvfeqd	f0, f1, f7
    2af0:	070d4110 	smladeq	sp, r0, r1, r4
    2af4:	41040e58 	tstmi	r4, r8, asr lr
    2af8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2afc:	00000e40 	andeq	r0, r0, r0, asr #28
    2b00:	00000024 	andeq	r0, r0, r4, lsr #32
    2b04:	00002a28 	andeq	r2, r0, r8, lsr #20
    2b08:	00000000 	andeq	r0, r0, r0
    2b0c:	0000003e 	andeq	r0, r0, lr, lsr r0
    2b10:	40040e41 	andmi	r0, r4, r1, asr #28
    2b14:	0e410187 	dvfeqd	f0, f1, f7
    2b18:	070d4110 	smladeq	sp, r0, r1, r4
    2b1c:	41040e58 	tstmi	r4, r8, asr lr
    2b20:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2b24:	00000e40 	andeq	r0, r0, r0, asr #28
    2b28:	00000024 	andeq	r0, r0, r4, lsr #32
    2b2c:	00002a28 	andeq	r2, r0, r8, lsr #20
    2b30:	080050cc 	stmdaeq	r0, {r2, r3, r6, r7, ip, lr}
    2b34:	0000003e 	andeq	r0, r0, lr, lsr r0
    2b38:	40040e41 	andmi	r0, r4, r1, asr #28
    2b3c:	0e410187 	dvfeqd	f0, f1, f7
    2b40:	070d4110 	smladeq	sp, r0, r1, r4
    2b44:	41040e58 	tstmi	r4, r8, asr lr
    2b48:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2b4c:	00000e40 	andeq	r0, r0, r0, asr #28
    2b50:	00000024 	andeq	r0, r0, r4, lsr #32
    2b54:	00002a28 	andeq	r2, r0, r8, lsr #20
    2b58:	00000000 	andeq	r0, r0, r0
    2b5c:	0000003e 	andeq	r0, r0, lr, lsr r0
    2b60:	40040e41 	andmi	r0, r4, r1, asr #28
    2b64:	0e410187 	dvfeqd	f0, f1, f7
    2b68:	070d4110 	smladeq	sp, r0, r1, r4
    2b6c:	41040e58 	tstmi	r4, r8, asr lr
    2b70:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2b74:	00000e40 	andeq	r0, r0, r0, asr #28
    2b78:	00000024 	andeq	r0, r0, r4, lsr #32
    2b7c:	00002a28 	andeq	r2, r0, r8, lsr #20
    2b80:	00000000 	andeq	r0, r0, r0
    2b84:	0000003e 	andeq	r0, r0, lr, lsr r0
    2b88:	40040e41 	andmi	r0, r4, r1, asr #28
    2b8c:	0e410187 	dvfeqd	f0, f1, f7
    2b90:	070d4110 	smladeq	sp, r0, r1, r4
    2b94:	41040e58 	tstmi	r4, r8, asr lr
    2b98:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2b9c:	00000e40 	andeq	r0, r0, r0, asr #28
    2ba0:	00000024 	andeq	r0, r0, r4, lsr #32
    2ba4:	00002a28 	andeq	r2, r0, r8, lsr #20
    2ba8:	00000000 	andeq	r0, r0, r0
    2bac:	00000040 	andeq	r0, r0, r0, asr #32
    2bb0:	40040e41 	andmi	r0, r4, r1, asr #28
    2bb4:	0e410187 	dvfeqd	f0, f1, f7
    2bb8:	070d4118 	smladeq	sp, r8, r1, r4
    2bbc:	41040e59 	tstmi	r4, r9, asr lr
    2bc0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2bc4:	00000e40 	andeq	r0, r0, r0, asr #28
    2bc8:	00000024 	andeq	r0, r0, r4, lsr #32
    2bcc:	00002a28 	andeq	r2, r0, r8, lsr #20
    2bd0:	00000000 	andeq	r0, r0, r0
    2bd4:	0000003e 	andeq	r0, r0, lr, lsr r0
    2bd8:	40040e41 	andmi	r0, r4, r1, asr #28
    2bdc:	0e410187 	dvfeqd	f0, f1, f7
    2be0:	070d4110 	smladeq	sp, r0, r1, r4
    2be4:	41040e58 	tstmi	r4, r8, asr lr
    2be8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2bec:	00000e40 	andeq	r0, r0, r0, asr #28
    2bf0:	00000024 	andeq	r0, r0, r4, lsr #32
    2bf4:	00002a28 	andeq	r2, r0, r8, lsr #20
    2bf8:	00000000 	andeq	r0, r0, r0
    2bfc:	0000003e 	andeq	r0, r0, lr, lsr r0
    2c00:	40040e41 	andmi	r0, r4, r1, asr #28
    2c04:	0e410187 	dvfeqd	f0, f1, f7
    2c08:	070d4110 	smladeq	sp, r0, r1, r4
    2c0c:	41040e58 	tstmi	r4, r8, asr lr
    2c10:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2c14:	00000e40 	andeq	r0, r0, r0, asr #28
    2c18:	00000024 	andeq	r0, r0, r4, lsr #32
    2c1c:	00002a28 	andeq	r2, r0, r8, lsr #20
    2c20:	00000000 	andeq	r0, r0, r0
    2c24:	00000046 	andeq	r0, r0, r6, asr #32
    2c28:	40040e41 	andmi	r0, r4, r1, asr #28
    2c2c:	0e410187 	dvfeqd	f0, f1, f7
    2c30:	070d4110 	smladeq	sp, r0, r1, r4
    2c34:	41040e5c 	tstmi	r4, ip, asr lr
    2c38:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2c3c:	00000e40 	andeq	r0, r0, r0, asr #28
    2c40:	00000024 	andeq	r0, r0, r4, lsr #32
    2c44:	00002a28 	andeq	r2, r0, r8, lsr #20
    2c48:	0800510c 	stmdaeq	r0, {r2, r3, r8, ip, lr}
    2c4c:	0000001e 	andeq	r0, r0, lr, lsl r0
    2c50:	40040e41 	andmi	r0, r4, r1, asr #28
    2c54:	0e410187 	dvfeqd	f0, f1, f7
    2c58:	070d4110 	smladeq	sp, r0, r1, r4
    2c5c:	41040e48 	tstmi	r4, r8, asr #28
    2c60:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2c64:	00000e40 	andeq	r0, r0, r0, asr #28
    2c68:	00000024 	andeq	r0, r0, r4, lsr #32
    2c6c:	00002a28 	andeq	r2, r0, r8, lsr #20
    2c70:	00000000 	andeq	r0, r0, r0
    2c74:	0000001c 	andeq	r0, r0, ip, lsl r0
    2c78:	40040e41 	andmi	r0, r4, r1, asr #28
    2c7c:	0e410187 	dvfeqd	f0, f1, f7
    2c80:	070d4110 	smladeq	sp, r0, r1, r4
    2c84:	41040e47 	tstmi	r4, r7, asr #28
    2c88:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2c8c:	00000e40 	andeq	r0, r0, r0, asr #28
    2c90:	00000024 	andeq	r0, r0, r4, lsr #32
    2c94:	00002a28 	andeq	r2, r0, r8, lsr #20
    2c98:	0800512c 	stmdaeq	r0, {r2, r3, r5, r8, ip, lr}
    2c9c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2ca0:	40040e41 	andmi	r0, r4, r1, asr #28
    2ca4:	0e410187 	dvfeqd	f0, f1, f7
    2ca8:	070d4110 	smladeq	sp, r0, r1, r4
    2cac:	41040e56 	tstmi	r4, r6, asr lr
    2cb0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2cb4:	00000e40 	andeq	r0, r0, r0, asr #28
    2cb8:	00000024 	andeq	r0, r0, r4, lsr #32
    2cbc:	00002a28 	andeq	r2, r0, r8, lsr #20
    2cc0:	00000000 	andeq	r0, r0, r0
    2cc4:	0000002e 	andeq	r0, r0, lr, lsr #32
    2cc8:	40040e41 	andmi	r0, r4, r1, asr #28
    2ccc:	0e410187 	dvfeqd	f0, f1, f7
    2cd0:	070d4118 	smladeq	sp, r8, r1, r4
    2cd4:	41040e50 	tstmi	r4, r0, asr lr
    2cd8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2cdc:	00000e40 	andeq	r0, r0, r0, asr #28
    2ce0:	00000024 	andeq	r0, r0, r4, lsr #32
    2ce4:	00002a28 	andeq	r2, r0, r8, lsr #20
    2ce8:	00000000 	andeq	r0, r0, r0
    2cec:	00000042 	andeq	r0, r0, r2, asr #32
    2cf0:	40040e41 	andmi	r0, r4, r1, asr #28
    2cf4:	0e410187 	dvfeqd	f0, f1, f7
    2cf8:	070d4110 	smladeq	sp, r0, r1, r4
    2cfc:	41040e5a 	tstmi	r4, sl, asr lr
    2d00:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2d04:	00000e40 	andeq	r0, r0, r0, asr #28
    2d08:	00000024 	andeq	r0, r0, r4, lsr #32
    2d0c:	00002a28 	andeq	r2, r0, r8, lsr #20
    2d10:	00000000 	andeq	r0, r0, r0
    2d14:	00000040 	andeq	r0, r0, r0, asr #32
    2d18:	40040e41 	andmi	r0, r4, r1, asr #28
    2d1c:	0e410187 	dvfeqd	f0, f1, f7
    2d20:	070d4110 	smladeq	sp, r0, r1, r4
    2d24:	41040e59 	tstmi	r4, r9, asr lr
    2d28:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2d2c:	00000e40 	andeq	r0, r0, r0, asr #28
    2d30:	00000024 	andeq	r0, r0, r4, lsr #32
    2d34:	00002a28 	andeq	r2, r0, r8, lsr #20
    2d38:	00000000 	andeq	r0, r0, r0
    2d3c:	00000040 	andeq	r0, r0, r0, asr #32
    2d40:	40040e41 	andmi	r0, r4, r1, asr #28
    2d44:	0e410187 	dvfeqd	f0, f1, f7
    2d48:	070d4110 	smladeq	sp, r0, r1, r4
    2d4c:	41040e59 	tstmi	r4, r9, asr lr
    2d50:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2d54:	00000e40 	andeq	r0, r0, r0, asr #28
    2d58:	00000024 	andeq	r0, r0, r4, lsr #32
    2d5c:	00002a28 	andeq	r2, r0, r8, lsr #20
    2d60:	00000000 	andeq	r0, r0, r0
    2d64:	0000003e 	andeq	r0, r0, lr, lsr r0
    2d68:	40040e41 	andmi	r0, r4, r1, asr #28
    2d6c:	0e410187 	dvfeqd	f0, f1, f7
    2d70:	070d4110 	smladeq	sp, r0, r1, r4
    2d74:	41040e58 	tstmi	r4, r8, asr lr
    2d78:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2d7c:	00000e40 	andeq	r0, r0, r0, asr #28
    2d80:	00000024 	andeq	r0, r0, r4, lsr #32
    2d84:	00002a28 	andeq	r2, r0, r8, lsr #20
    2d88:	00000000 	andeq	r0, r0, r0
    2d8c:	00000040 	andeq	r0, r0, r0, asr #32
    2d90:	40040e41 	andmi	r0, r4, r1, asr #28
    2d94:	0e410187 	dvfeqd	f0, f1, f7
    2d98:	070d4110 	smladeq	sp, r0, r1, r4
    2d9c:	41040e59 	tstmi	r4, r9, asr lr
    2da0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2da4:	00000e40 	andeq	r0, r0, r0, asr #28
    2da8:	00000024 	andeq	r0, r0, r4, lsr #32
    2dac:	00002a28 	andeq	r2, r0, r8, lsr #20
    2db0:	00000000 	andeq	r0, r0, r0
    2db4:	0000003e 	andeq	r0, r0, lr, lsr r0
    2db8:	40040e41 	andmi	r0, r4, r1, asr #28
    2dbc:	0e410187 	dvfeqd	f0, f1, f7
    2dc0:	070d4110 	smladeq	sp, r0, r1, r4
    2dc4:	41040e58 	tstmi	r4, r8, asr lr
    2dc8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2dcc:	00000e40 	andeq	r0, r0, r0, asr #28
    2dd0:	00000024 	andeq	r0, r0, r4, lsr #32
    2dd4:	00002a28 	andeq	r2, r0, r8, lsr #20
    2dd8:	00000000 	andeq	r0, r0, r0
    2ddc:	00000020 	andeq	r0, r0, r0, lsr #32
    2de0:	40040e41 	andmi	r0, r4, r1, asr #28
    2de4:	0e410187 	dvfeqd	f0, f1, f7
    2de8:	070d4110 	smladeq	sp, r0, r1, r4
    2dec:	41040e49 	tstmi	r4, r9, asr #28
    2df0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2df4:	00000e40 	andeq	r0, r0, r0, asr #28
    2df8:	00000024 	andeq	r0, r0, r4, lsr #32
    2dfc:	00002a28 	andeq	r2, r0, r8, lsr #20
    2e00:	00000000 	andeq	r0, r0, r0
    2e04:	0000003e 	andeq	r0, r0, lr, lsr r0
    2e08:	40040e41 	andmi	r0, r4, r1, asr #28
    2e0c:	0e410187 	dvfeqd	f0, f1, f7
    2e10:	070d4110 	smladeq	sp, r0, r1, r4
    2e14:	41040e58 	tstmi	r4, r8, asr lr
    2e18:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2e1c:	00000e40 	andeq	r0, r0, r0, asr #28
    2e20:	00000024 	andeq	r0, r0, r4, lsr #32
    2e24:	00002a28 	andeq	r2, r0, r8, lsr #20
    2e28:	08005168 	stmdaeq	r0, {r3, r5, r6, r8, ip, lr}
    2e2c:	0000003e 	andeq	r0, r0, lr, lsr r0
    2e30:	40040e41 	andmi	r0, r4, r1, asr #28
    2e34:	0e410187 	dvfeqd	f0, f1, f7
    2e38:	070d4110 	smladeq	sp, r0, r1, r4
    2e3c:	41040e58 	tstmi	r4, r8, asr lr
    2e40:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2e44:	00000e40 	andeq	r0, r0, r0, asr #28
    2e48:	00000024 	andeq	r0, r0, r4, lsr #32
    2e4c:	00002a28 	andeq	r2, r0, r8, lsr #20
    2e50:	00000000 	andeq	r0, r0, r0
    2e54:	00000040 	andeq	r0, r0, r0, asr #32
    2e58:	40040e41 	andmi	r0, r4, r1, asr #28
    2e5c:	0e410187 	dvfeqd	f0, f1, f7
    2e60:	070d4110 	smladeq	sp, r0, r1, r4
    2e64:	41040e59 	tstmi	r4, r9, asr lr
    2e68:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2e6c:	00000e40 	andeq	r0, r0, r0, asr #28
    2e70:	00000024 	andeq	r0, r0, r4, lsr #32
    2e74:	00002a28 	andeq	r2, r0, r8, lsr #20
    2e78:	080051a8 	stmdaeq	r0, {r3, r5, r7, r8, ip, lr}
    2e7c:	00000060 	andeq	r0, r0, r0, rrx
    2e80:	40040e41 	andmi	r0, r4, r1, asr #28
    2e84:	0e410187 	dvfeqd	f0, f1, f7
    2e88:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    2e8c:	41040e69 	tstmi	r4, r9, ror #28
    2e90:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2e94:	00000e40 	andeq	r0, r0, r0, asr #28
    2e98:	00000024 	andeq	r0, r0, r4, lsr #32
    2e9c:	00002a28 	andeq	r2, r0, r8, lsr #20
    2ea0:	00000000 	andeq	r0, r0, r0
    2ea4:	00000044 	andeq	r0, r0, r4, asr #32
    2ea8:	40040e41 	andmi	r0, r4, r1, asr #28
    2eac:	0e410187 	dvfeqd	f0, f1, f7
    2eb0:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    2eb4:	41040e5b 	tstmi	r4, fp, asr lr
    2eb8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2ebc:	00000e40 	andeq	r0, r0, r0, asr #28
    2ec0:	00000024 	andeq	r0, r0, r4, lsr #32
    2ec4:	00002a28 	andeq	r2, r0, r8, lsr #20
    2ec8:	08005208 	stmdaeq	r0, {r3, r9, ip, lr}
    2ecc:	00000066 	andeq	r0, r0, r6, rrx
    2ed0:	40040e41 	andmi	r0, r4, r1, asr #28
    2ed4:	0e410187 	dvfeqd	f0, f1, f7
    2ed8:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    2edc:	41040e6c 	tstmi	r4, ip, ror #28
    2ee0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2ee4:	00000e40 	andeq	r0, r0, r0, asr #28
    2ee8:	00000024 	andeq	r0, r0, r4, lsr #32
    2eec:	00002a28 	andeq	r2, r0, r8, lsr #20
    2ef0:	00000000 	andeq	r0, r0, r0
    2ef4:	0000002c 	andeq	r0, r0, ip, lsr #32
    2ef8:	40040e41 	andmi	r0, r4, r1, asr #28
    2efc:	0e410187 	dvfeqd	f0, f1, f7
    2f00:	070d4118 	smladeq	sp, r8, r1, r4
    2f04:	41040e4f 	tstmi	r4, pc, asr #28
    2f08:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2f0c:	00000e40 	andeq	r0, r0, r0, asr #28
    2f10:	00000024 	andeq	r0, r0, r4, lsr #32
    2f14:	00002a28 	andeq	r2, r0, r8, lsr #20
    2f18:	00000000 	andeq	r0, r0, r0
    2f1c:	0000005a 	andeq	r0, r0, sl, asr r0
    2f20:	40040e41 	andmi	r0, r4, r1, asr #28
    2f24:	0e410187 	dvfeqd	f0, f1, f7
    2f28:	070d4118 	smladeq	sp, r8, r1, r4
    2f2c:	41040e66 	tstmi	r4, r6, ror #28
    2f30:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2f34:	00000e40 	andeq	r0, r0, r0, asr #28
    2f38:	00000024 	andeq	r0, r0, r4, lsr #32
    2f3c:	00002a28 	andeq	r2, r0, r8, lsr #20
    2f40:	00000000 	andeq	r0, r0, r0
    2f44:	0000002c 	andeq	r0, r0, ip, lsr #32
    2f48:	40040e41 	andmi	r0, r4, r1, asr #28
    2f4c:	0e410187 	dvfeqd	f0, f1, f7
    2f50:	070d4118 	smladeq	sp, r8, r1, r4
    2f54:	41040e4f 	tstmi	r4, pc, asr #28
    2f58:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2f5c:	00000e40 	andeq	r0, r0, r0, asr #28
    2f60:	0000000c 	andeq	r0, r0, ip
    2f64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2f68:	7c020001 	stcvc	0, cr0, [r2], {1}
    2f6c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2f70:	00000024 	andeq	r0, r0, r4, lsr #32
    2f74:	00002f60 	andeq	r2, r0, r0, ror #30
    2f78:	08005270 	stmdaeq	r0, {r4, r5, r6, r9, ip, lr}
    2f7c:	00000020 	andeq	r0, r0, r0, lsr #32
    2f80:	40040e41 	andmi	r0, r4, r1, asr #28
    2f84:	0e410187 	dvfeqd	f0, f1, f7
    2f88:	070d4110 	smladeq	sp, r0, r1, r4
    2f8c:	41040e46 	tstmi	r4, r6, asr #28
    2f90:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2f94:	00000e40 	andeq	r0, r0, r0, asr #28
    2f98:	00000024 	andeq	r0, r0, r4, lsr #32
    2f9c:	00002f60 	andeq	r2, r0, r0, ror #30
    2fa0:	08005290 	stmdaeq	r0, {r4, r7, r9, ip, lr}
    2fa4:	00000020 	andeq	r0, r0, r0, lsr #32
    2fa8:	40040e41 	andmi	r0, r4, r1, asr #28
    2fac:	0e410187 	dvfeqd	f0, f1, f7
    2fb0:	070d4110 	smladeq	sp, r0, r1, r4
    2fb4:	41040e46 	tstmi	r4, r6, asr #28
    2fb8:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2fbc:	00000e40 	andeq	r0, r0, r0, asr #28
    2fc0:	00000024 	andeq	r0, r0, r4, lsr #32
    2fc4:	00002f60 	andeq	r2, r0, r0, ror #30
    2fc8:	080052b0 	stmdaeq	r0, {r4, r5, r7, r9, ip, lr}
    2fcc:	00000020 	andeq	r0, r0, r0, lsr #32
    2fd0:	40040e41 	andmi	r0, r4, r1, asr #28
    2fd4:	0e410187 	dvfeqd	f0, f1, f7
    2fd8:	070d4110 	smladeq	sp, r0, r1, r4
    2fdc:	41040e46 	tstmi	r4, r6, asr #28
    2fe0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    2fe4:	00000e40 	andeq	r0, r0, r0, asr #28
    2fe8:	00000020 	andeq	r0, r0, r0, lsr #32
    2fec:	00002f60 	andeq	r2, r0, r0, ror #30
    2ff0:	080052d0 	stmdaeq	r0, {r4, r6, r7, r9, ip, lr}
    2ff4:	00000018 	andeq	r0, r0, r8, lsl r0
    2ff8:	40040e41 	andmi	r0, r4, r1, asr #28
    2ffc:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3000:	0d0d4507 	cfstr32eq	mvfx4, [sp, #-28]	; 0xffffffe4
    3004:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
    3008:	00000000 	andeq	r0, r0, r0
    300c:	00000020 	andeq	r0, r0, r0, lsr #32
    3010:	00002f60 	andeq	r2, r0, r0, ror #30
    3014:	080052e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, ip, lr}
    3018:	00000018 	andeq	r0, r0, r8, lsl r0
    301c:	40040e41 	andmi	r0, r4, r1, asr #28
    3020:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3024:	0d0d4507 	cfstr32eq	mvfx4, [sp, #-28]	; 0xffffffe4
    3028:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
    302c:	00000000 	andeq	r0, r0, r0
    3030:	00000024 	andeq	r0, r0, r4, lsr #32
    3034:	00002f60 	andeq	r2, r0, r0, ror #30
    3038:	00000000 	andeq	r0, r0, r0
    303c:	00000038 	andeq	r0, r0, r8, lsr r0
    3040:	40040e41 	andmi	r0, r4, r1, asr #28
    3044:	0e410187 	dvfeqd	f0, f1, f7
    3048:	070d4118 	smladeq	sp, r8, r1, r4
    304c:	41040e52 	tstmi	r4, r2, asr lr
    3050:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    3054:	00000e40 	andeq	r0, r0, r0, asr #28
    3058:	0000000c 	andeq	r0, r0, ip
    305c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3060:	7c020001 	stcvc	0, cr0, [r2], {1}
    3064:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3068:	00000020 	andeq	r0, r0, r0, lsr #32
    306c:	00003058 	andeq	r3, r0, r8, asr r0
    3070:	00000000 	andeq	r0, r0, r0
    3074:	00000018 	andeq	r0, r0, r8, lsl r0
    3078:	40040e41 	andmi	r0, r4, r1, asr #28
    307c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3080:	0d0d4507 	cfstr32eq	mvfx4, [sp, #-28]	; 0xffffffe4
    3084:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
    3088:	00000000 	andeq	r0, r0, r0
    308c:	00000020 	andeq	r0, r0, r0, lsr #32
    3090:	00003058 	andeq	r3, r0, r8, asr r0
    3094:	00000000 	andeq	r0, r0, r0
    3098:	0000001c 	andeq	r0, r0, ip, lsl r0
    309c:	40040e41 	andmi	r0, r4, r1, asr #28
    30a0:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    30a4:	0d0d4607 	stceq	6, cr4, [sp, #-28]	; 0xffffffe4
    30a8:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
    30ac:	00000000 	andeq	r0, r0, r0
    30b0:	00000024 	andeq	r0, r0, r4, lsr #32
    30b4:	00003058 	andeq	r3, r0, r8, asr r0
    30b8:	08005300 	stmdaeq	r0, {r8, r9, ip, lr}
    30bc:	0000003c 	andeq	r0, r0, ip, lsr r0
    30c0:	40040e41 	andmi	r0, r4, r1, asr #28
    30c4:	0e410187 	dvfeqd	f0, f1, f7
    30c8:	070d4110 	smladeq	sp, r0, r1, r4
    30cc:	41040e55 	tstmi	r4, r5, asr lr
    30d0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    30d4:	00000e40 	andeq	r0, r0, r0, asr #28
    30d8:	0000000c 	andeq	r0, r0, ip
    30dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    30e0:	7c020001 	stcvc	0, cr0, [r2], {1}
    30e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    30e8:	00000024 	andeq	r0, r0, r4, lsr #32
    30ec:	000030d8 	ldrdeq	r3, [r0], -r8
    30f0:	0800533c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, lr}
    30f4:	00000084 	andeq	r0, r0, r4, lsl #1
    30f8:	40080e41 	andmi	r0, r8, r1, asr #28
    30fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3100:	200e4101 	andcs	r4, lr, r1, lsl #2
    3104:	76070d41 	strvc	r0, [r7], -r1, asr #26
    3108:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    310c:	0000000d 	andeq	r0, r0, sp
    3110:	00000024 	andeq	r0, r0, r4, lsr #32
    3114:	000030d8 	ldrdeq	r3, [r0], -r8
    3118:	080053c0 	stmdaeq	r0, {r6, r7, r8, r9, ip, lr}
    311c:	00000044 	andeq	r0, r0, r4, asr #32
    3120:	40080e41 	andmi	r0, r8, r1, asr #28
    3124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3128:	100e4101 	andne	r4, lr, r1, lsl #2
    312c:	5b070d41 	blpl	1c6638 <_Min_Stack_Size+0x1c6438>
    3130:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3134:	0000000d 	andeq	r0, r0, sp
    3138:	00000024 	andeq	r0, r0, r4, lsr #32
    313c:	000030d8 	ldrdeq	r3, [r0], -r8
    3140:	08005404 	stmdaeq	r0, {r2, sl, ip, lr}
    3144:	000000c4 	andeq	r0, r0, r4, asr #1
    3148:	40080e41 	andmi	r0, r8, r1, asr #28
    314c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3150:	200e4101 	andcs	r4, lr, r1, lsl #2
    3154:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3158:	41080e58 	tstmi	r8, r8, asr lr
    315c:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3160:	00000024 	andeq	r0, r0, r4, lsr #32
    3164:	000030d8 	ldrdeq	r3, [r0], -r8
    3168:	080054c8 	stmdaeq	r0, {r3, r6, r7, sl, ip, lr}
    316c:	00000060 	andeq	r0, r0, r0, rrx
    3170:	40080e41 	andmi	r0, r8, r1, asr #28
    3174:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3178:	180e4101 	stmdane	lr, {r0, r8, lr}
    317c:	6b070d41 	blvs	1c6688 <_Min_Stack_Size+0x1c6488>
    3180:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3184:	0000000d 	andeq	r0, r0, sp
    3188:	00000018 	andeq	r0, r0, r8, lsl r0
    318c:	000030d8 	ldrdeq	r3, [r0], -r8
    3190:	08005528 	stmdaeq	r0, {r3, r5, r8, sl, ip, lr}
    3194:	00000042 	andeq	r0, r0, r2, asr #32
    3198:	40080e41 	andmi	r0, r8, r1, asr #28
    319c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    31a0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    31a4:	0000000c 	andeq	r0, r0, ip
    31a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    31ac:	7c020001 	stcvc	0, cr0, [r2], {1}
    31b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    31b4:	00000020 	andeq	r0, r0, r0, lsr #32
    31b8:	000031a4 	andeq	r3, r0, r4, lsr #3
    31bc:	0800556c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, ip, lr}
    31c0:	0000000c 	andeq	r0, r0, ip
    31c4:	40040e41 	andmi	r0, r4, r1, asr #28
    31c8:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    31cc:	0d0d4107 	stfeqs	f4, [sp, #-28]	; 0xffffffe4
    31d0:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
    31d4:	00000000 	andeq	r0, r0, r0
    31d8:	00000018 	andeq	r0, r0, r8, lsl r0
    31dc:	000031a4 	andeq	r3, r0, r4, lsr #3
    31e0:	08005578 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, ip, lr}
    31e4:	00000006 	andeq	r0, r0, r6
    31e8:	40040e41 	andmi	r0, r4, r1, asr #28
    31ec:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    31f0:	00000007 	andeq	r0, r0, r7
    31f4:	00000018 	andeq	r0, r0, r8, lsl r0
    31f8:	000031a4 	andeq	r3, r0, r4, lsr #3
    31fc:	08005580 	stmdaeq	r0, {r7, r8, sl, ip, lr}
    3200:	00000006 	andeq	r0, r0, r6
    3204:	40040e41 	andmi	r0, r4, r1, asr #28
    3208:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    320c:	00000007 	andeq	r0, r0, r7
    3210:	00000018 	andeq	r0, r0, r8, lsl r0
    3214:	000031a4 	andeq	r3, r0, r4, lsr #3
    3218:	08005588 	stmdaeq	r0, {r3, r7, r8, sl, ip, lr}
    321c:	00000006 	andeq	r0, r0, r6
    3220:	40040e41 	andmi	r0, r4, r1, asr #28
    3224:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3228:	00000007 	andeq	r0, r0, r7
    322c:	00000018 	andeq	r0, r0, r8, lsl r0
    3230:	000031a4 	andeq	r3, r0, r4, lsr #3
    3234:	08005590 	stmdaeq	r0, {r4, r7, r8, sl, ip, lr}
    3238:	00000006 	andeq	r0, r0, r6
    323c:	40040e41 	andmi	r0, r4, r1, asr #28
    3240:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3244:	00000007 	andeq	r0, r0, r7
    3248:	00000020 	andeq	r0, r0, r0, lsr #32
    324c:	000031a4 	andeq	r3, r0, r4, lsr #3
    3250:	08005598 	stmdaeq	r0, {r3, r4, r7, r8, sl, ip, lr}
    3254:	0000000c 	andeq	r0, r0, ip
    3258:	40040e41 	andmi	r0, r4, r1, asr #28
    325c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3260:	0d0d4107 	stfeqs	f4, [sp, #-28]	; 0xffffffe4
    3264:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
    3268:	00000000 	andeq	r0, r0, r0
    326c:	00000020 	andeq	r0, r0, r0, lsr #32
    3270:	000031a4 	andeq	r3, r0, r4, lsr #3
    3274:	080055a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip, lr}
    3278:	0000000c 	andeq	r0, r0, ip
    327c:	40040e41 	andmi	r0, r4, r1, asr #28
    3280:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3284:	0d0d4107 	stfeqs	f4, [sp, #-28]	; 0xffffffe4
    3288:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
    328c:	00000000 	andeq	r0, r0, r0
    3290:	00000020 	andeq	r0, r0, r0, lsr #32
    3294:	000031a4 	andeq	r3, r0, r4, lsr #3
    3298:	080055b0 	stmdaeq	r0, {r4, r5, r7, r8, sl, ip, lr}
    329c:	0000000c 	andeq	r0, r0, ip
    32a0:	40040e41 	andmi	r0, r4, r1, asr #28
    32a4:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    32a8:	0d0d4107 	stfeqs	f4, [sp, #-28]	; 0xffffffe4
    32ac:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
    32b0:	00000000 	andeq	r0, r0, r0
    32b4:	00000020 	andeq	r0, r0, r0, lsr #32
    32b8:	000031a4 	andeq	r3, r0, r4, lsr #3
    32bc:	080055bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, ip, lr}
    32c0:	0000000c 	andeq	r0, r0, ip
    32c4:	40040e41 	andmi	r0, r4, r1, asr #28
    32c8:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    32cc:	0d0d4107 	stfeqs	f4, [sp, #-28]	; 0xffffffe4
    32d0:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
    32d4:	00000000 	andeq	r0, r0, r0
    32d8:	00000020 	andeq	r0, r0, r0, lsr #32
    32dc:	000031a4 	andeq	r3, r0, r4, lsr #3
    32e0:	080055c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, ip, lr}
    32e4:	0000000c 	andeq	r0, r0, ip
    32e8:	40040e41 	andmi	r0, r4, r1, asr #28
    32ec:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    32f0:	0d0d4107 	stfeqs	f4, [sp, #-28]	; 0xffffffe4
    32f4:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
    32f8:	00000000 	andeq	r0, r0, r0
    32fc:	00000020 	andeq	r0, r0, r0, lsr #32
    3300:	000031a4 	andeq	r3, r0, r4, lsr #3
    3304:	080055d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, ip, lr}
    3308:	0000000c 	andeq	r0, r0, ip
    330c:	40040e41 	andmi	r0, r4, r1, asr #28
    3310:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3314:	0d0d4107 	stfeqs	f4, [sp, #-28]	; 0xffffffe4
    3318:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
    331c:	00000000 	andeq	r0, r0, r0
    3320:	00000018 	andeq	r0, r0, r8, lsl r0
    3324:	000031a4 	andeq	r3, r0, r4, lsr #3
    3328:	080055e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, ip, lr}
    332c:	0000003c 	andeq	r0, r0, ip, lsr r0
    3330:	40080e41 	andmi	r0, r8, r1, asr #28
    3334:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3338:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    333c:	00000020 	andeq	r0, r0, r0, lsr #32
    3340:	000031a4 	andeq	r3, r0, r4, lsr #3
    3344:	0800561c 	stmdaeq	r0, {r2, r3, r4, r9, sl, ip, lr}
    3348:	0000000c 	andeq	r0, r0, ip
    334c:	40040e41 	andmi	r0, r4, r1, asr #28
    3350:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3354:	0d0d4107 	stfeqs	f4, [sp, #-28]	; 0xffffffe4
    3358:	0e40c742 	cdpeq	7, 4, cr12, cr0, cr2, {2}
    335c:	00000000 	andeq	r0, r0, r0
    3360:	0000000c 	andeq	r0, r0, ip
    3364:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3368:	7c020001 	stcvc	0, cr0, [r2], {1}
    336c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3370:	00000018 	andeq	r0, r0, r8, lsl r0
    3374:	00003360 	andeq	r3, r0, r0, ror #6
    3378:	08005628 	stmdaeq	r0, {r3, r5, r9, sl, ip, lr}
    337c:	00000014 	andeq	r0, r0, r4, lsl r0
    3380:	40080e41 	andmi	r0, r8, r1, asr #28
    3384:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3388:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    338c:	00000018 	andeq	r0, r0, r8, lsl r0
    3390:	00003360 	andeq	r3, r0, r0, ror #6
    3394:	0800563c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip, lr}
    3398:	00000014 	andeq	r0, r0, r4, lsl r0
    339c:	40080e41 	andmi	r0, r8, r1, asr #28
    33a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    33a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    33a8:	00000024 	andeq	r0, r0, r4, lsr #32
    33ac:	00003360 	andeq	r3, r0, r0, ror #6
    33b0:	08005650 	stmdaeq	r0, {r4, r6, r9, sl, ip, lr}
    33b4:	00000030 	andeq	r0, r0, r0, lsr r0
    33b8:	40080e41 	andmi	r0, r8, r1, asr #28
    33bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    33c0:	100e4101 	andne	r4, lr, r1, lsl #2
    33c4:	51070d41 	tstpl	r7, r1, asr #26
    33c8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    33cc:	0000000d 	andeq	r0, r0, sp
    33d0:	00000024 	andeq	r0, r0, r4, lsr #32
    33d4:	00003360 	andeq	r3, r0, r0, ror #6
    33d8:	08005680 	stmdaeq	r0, {r7, r9, sl, ip, lr}
    33dc:	00000030 	andeq	r0, r0, r0, lsr r0
    33e0:	40080e41 	andmi	r0, r8, r1, asr #28
    33e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    33e8:	100e4101 	andne	r4, lr, r1, lsl #2
    33ec:	50070d41 	andpl	r0, r7, r1, asr #26
    33f0:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    33f4:	0000000d 	andeq	r0, r0, sp
    33f8:	00000024 	andeq	r0, r0, r4, lsr #32
    33fc:	00003360 	andeq	r3, r0, r0, ror #6
    3400:	080056b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, ip, lr}
    3404:	00000028 	andeq	r0, r0, r8, lsr #32
    3408:	40080e41 	andmi	r0, r8, r1, asr #28
    340c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3410:	100e4101 	andne	r4, lr, r1, lsl #2
    3414:	4d070d41 	stcmi	13, cr0, [r7, #-260]	; 0xfffffefc
    3418:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    341c:	0000000d 	andeq	r0, r0, sp
    3420:	0000002c 	andeq	r0, r0, ip, lsr #32
    3424:	00003360 	andeq	r3, r0, r0, ror #6
    3428:	080056d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip, lr}
    342c:	0000019c 	muleq	r0, ip, r1
    3430:	40140e41 	andsmi	r0, r4, r1, asr #28
    3434:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
    3438:	03864004 	orreq	r4, r6, #4
    343c:	40028740 	andmi	r8, r2, r0, asr #14
    3440:	0e41018e 	dvfeqd	f0, f1, #0.5
    3444:	070c4168 	streq	r4, [ip, -r8, ror #2]
    3448:	0eb80250 	mrceq	2, 5, r0, cr8, cr0, {2}
    344c:	0d0d4114 	stfeqs	f4, [sp, #-80]	; 0xffffffb0
    3450:	00000024 	andeq	r0, r0, r4, lsr #32
    3454:	00003360 	andeq	r3, r0, r0, ror #6
    3458:	08005874 	stmdaeq	r0, {r2, r4, r5, r6, fp, ip, lr}
    345c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    3460:	40080e41 	andmi	r0, r8, r1, asr #28
    3464:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3468:	180e4101 	stmdane	lr, {r0, r8, lr}
    346c:	10070c41 	andne	r0, r7, r1, asr #24
    3470:	080e4402 	stmdaeq	lr, {r1, sl, lr}
    3474:	000d0d41 	andeq	r0, sp, r1, asr #26
    3478:	00000024 	andeq	r0, r0, r4, lsr #32
    347c:	00003360 	andeq	r3, r0, r0, ror #6
    3480:	08005924 	stmdaeq	r0, {r2, r5, r8, fp, ip, lr}
    3484:	0000003c 	andeq	r0, r0, ip, lsr r0
    3488:	40080e41 	andmi	r0, r8, r1, asr #28
    348c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3490:	180e4101 	stmdane	lr, {r0, r8, lr}
    3494:	53070d41 	movwpl	r0, #32065	; 0x7d41
    3498:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    349c:	0000000d 	andeq	r0, r0, sp
    34a0:	00000024 	andeq	r0, r0, r4, lsr #32
    34a4:	00003360 	andeq	r3, r0, r0, ror #6
    34a8:	08005960 	stmdaeq	r0, {r5, r6, r8, fp, ip, lr}
    34ac:	0000002c 	andeq	r0, r0, ip, lsr #32
    34b0:	40080e41 	andmi	r0, r8, r1, asr #28
    34b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    34b8:	200e4101 	andcs	r4, lr, r1, lsl #2
    34bc:	51070d41 	tstpl	r7, r1, asr #26
    34c0:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    34c4:	0000000d 	andeq	r0, r0, sp
    34c8:	00000024 	andeq	r0, r0, r4, lsr #32
    34cc:	00003360 	andeq	r3, r0, r0, ror #6
    34d0:	0800598c 	stmdaeq	r0, {r2, r3, r7, r8, fp, ip, lr}
    34d4:	000000b8 	strheq	r0, [r0], -r8
    34d8:	40080e41 	andmi	r0, r8, r1, asr #28
    34dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    34e0:	180e4101 	stmdane	lr, {r0, r8, lr}
    34e4:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    34e8:	41080e55 	tstmi	r8, r5, asr lr
    34ec:	00000d0d 	andeq	r0, r0, sp, lsl #26
    34f0:	00000024 	andeq	r0, r0, r4, lsr #32
    34f4:	00003360 	andeq	r3, r0, r0, ror #6
    34f8:	08005a44 	stmdaeq	r0, {r2, r6, r9, fp, ip, lr}
    34fc:	00000444 	andeq	r0, r0, r4, asr #8
    3500:	400c0e41 	andmi	r0, ip, r1, asr #28
    3504:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
    3508:	018e4002 	orreq	r4, lr, r2
    350c:	01c00e41 	biceq	r0, r0, r1, asr #28
    3510:	b8070c41 	stmdalt	r7, {r0, r6, sl, fp}
    3514:	00000001 	andeq	r0, r0, r1
    3518:	0000000c 	andeq	r0, r0, ip
    351c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3520:	7c020001 	stcvc	0, cr0, [r2], {1}
    3524:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3528:	00000024 	andeq	r0, r0, r4, lsr #32
    352c:	00003518 	andeq	r3, r0, r8, lsl r5
    3530:	08005e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, ip, lr}
    3534:	00000056 	andeq	r0, r0, r6, asr r0
    3538:	40040e41 	andmi	r0, r4, r1, asr #28
    353c:	0e410187 	dvfeqd	f0, f1, f7
    3540:	070d4118 	smladeq	sp, r8, r1, r4
    3544:	41040e64 	tstmi	r4, r4, ror #28
    3548:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    354c:	00000e40 	andeq	r0, r0, r0, asr #28
    3550:	00000024 	andeq	r0, r0, r4, lsr #32
    3554:	00003518 	andeq	r3, r0, r8, lsl r5
    3558:	08005ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip, lr}
    355c:	00000056 	andeq	r0, r0, r6, asr r0
    3560:	40040e41 	andmi	r0, r4, r1, asr #28
    3564:	0e410187 	dvfeqd	f0, f1, f7
    3568:	070d4118 	smladeq	sp, r8, r1, r4
    356c:	41040e64 	tstmi	r4, r4, ror #28
    3570:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    3574:	00000e40 	andeq	r0, r0, r0, asr #28
    3578:	00000024 	andeq	r0, r0, r4, lsr #32
    357c:	00003518 	andeq	r3, r0, r8, lsl r5
    3580:	08005f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip, lr}
    3584:	000000bc 	strheq	r0, [r0], -ip
    3588:	40080e41 	andmi	r0, r8, r1, asr #28
    358c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3590:	180e4101 	stmdane	lr, {r0, r8, lr}
    3594:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3598:	41080e59 	tstmi	r8, r9, asr lr
    359c:	00000d0d 	andeq	r0, r0, sp, lsl #26
    35a0:	00000024 	andeq	r0, r0, r4, lsr #32
    35a4:	00003518 	andeq	r3, r0, r8, lsl r5
    35a8:	00000000 	andeq	r0, r0, r0
    35ac:	0000003e 	andeq	r0, r0, lr, lsr r0
    35b0:	40080e41 	andmi	r0, r8, r1, asr #28
    35b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    35b8:	180e4101 	stmdane	lr, {r0, r8, lr}
    35bc:	5a070d41 	bpl	1c6ac8 <_Min_Stack_Size+0x1c68c8>
    35c0:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    35c4:	0000000d 	andeq	r0, r0, sp
    35c8:	00000024 	andeq	r0, r0, r4, lsr #32
    35cc:	00003518 	andeq	r3, r0, r8, lsl r5
    35d0:	00000000 	andeq	r0, r0, r0
    35d4:	00000064 	andeq	r0, r0, r4, rrx
    35d8:	40080e41 	andmi	r0, r8, r1, asr #28
    35dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    35e0:	180e4101 	stmdane	lr, {r0, r8, lr}
    35e4:	6d070d41 	stcvs	13, cr0, [r7, #-260]	; 0xfffffefc
    35e8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    35ec:	0000000d 	andeq	r0, r0, sp
    35f0:	00000024 	andeq	r0, r0, r4, lsr #32
    35f4:	00003518 	andeq	r3, r0, r8, lsl r5
    35f8:	08005ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    35fc:	0000003e 	andeq	r0, r0, lr, lsr r0
    3600:	40080e41 	andmi	r0, r8, r1, asr #28
    3604:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3608:	180e4101 	stmdane	lr, {r0, r8, lr}
    360c:	5a070d41 	bpl	1c6b18 <_Min_Stack_Size+0x1c6918>
    3610:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3614:	0000000d 	andeq	r0, r0, sp
    3618:	00000024 	andeq	r0, r0, r4, lsr #32
    361c:	00003518 	andeq	r3, r0, r8, lsl r5
    3620:	08006034 	stmdaeq	r0, {r2, r4, r5, sp, lr}
    3624:	00000092 	muleq	r0, r2, r0
    3628:	40080e41 	andmi	r0, r8, r1, asr #28
    362c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3630:	180e4101 	stmdane	lr, {r0, r8, lr}
    3634:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3638:	41080e44 	tstmi	r8, r4, asr #28
    363c:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3640:	00000024 	andeq	r0, r0, r4, lsr #32
    3644:	00003518 	andeq	r3, r0, r8, lsl r5
    3648:	080060c8 	stmdaeq	r0, {r3, r6, r7, sp, lr}
    364c:	0000007c 	andeq	r0, r0, ip, ror r0
    3650:	40080e41 	andmi	r0, r8, r1, asr #28
    3654:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3658:	100e4101 	andne	r4, lr, r1, lsl #2
    365c:	77070d41 	strvc	r0, [r7, -r1, asr #26]
    3660:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3664:	0000000d 	andeq	r0, r0, sp
    3668:	00000024 	andeq	r0, r0, r4, lsr #32
    366c:	00003518 	andeq	r3, r0, r8, lsl r5
    3670:	08006144 	stmdaeq	r0, {r2, r6, r8, sp, lr}
    3674:	0000004a 	andeq	r0, r0, sl, asr #32
    3678:	40080e41 	andmi	r0, r8, r1, asr #28
    367c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3680:	180e4101 	stmdane	lr, {r0, r8, lr}
    3684:	60070d41 	andvs	r0, r7, r1, asr #26
    3688:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    368c:	0000000d 	andeq	r0, r0, sp
    3690:	00000024 	andeq	r0, r0, r4, lsr #32
    3694:	00003518 	andeq	r3, r0, r8, lsl r5
    3698:	08006190 	stmdaeq	r0, {r4, r7, r8, sp, lr}
    369c:	0000001e 	andeq	r0, r0, lr, lsl r0
    36a0:	40040e41 	andmi	r0, r4, r1, asr #28
    36a4:	0e410187 	dvfeqd	f0, f1, f7
    36a8:	070d4110 	smladeq	sp, r0, r1, r4
    36ac:	41040e48 	tstmi	r4, r8, asr #28
    36b0:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
    36b4:	00000e40 	andeq	r0, r0, r0, asr #28
    36b8:	00000038 	andeq	r0, r0, r8, lsr r0
    36bc:	00003518 	andeq	r3, r0, r8, lsl r5
    36c0:	080061b0 	stmdaeq	r0, {r4, r5, r7, r8, sp, lr}
    36c4:	00000310 	andeq	r0, r0, r0, lsl r3
    36c8:	40240e42 	eormi	r0, r4, r2, asr #28
    36cc:	85400984 	strbhi	r0, [r0, #-2436]	; 0xfffff67c
    36d0:	07864008 	streq	r4, [r6, r8]
    36d4:	40068740 	andmi	r8, r6, r0, asr #14
    36d8:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
    36dc:	038a4004 	orreq	r4, sl, #4
    36e0:	40028b40 	andmi	r8, r2, r0, asr #22
    36e4:	0e41018e 	dvfeqd	f0, f1, #0.5
    36e8:	070d4168 	streq	r4, [sp, -r8, ror #2]
    36ec:	0e018103 	mvfeqs	f0, f3
    36f0:	0d0d4124 	stfeqs	f4, [sp, #-144]	; 0xffffff70
    36f4:	00000024 	andeq	r0, r0, r4, lsr #32
    36f8:	00003518 	andeq	r3, r0, r8, lsl r5
    36fc:	00000000 	andeq	r0, r0, r0
    3700:	0000003a 	andeq	r0, r0, sl, lsr r0
    3704:	40080e41 	andmi	r0, r8, r1, asr #28
    3708:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    370c:	180e4101 	stmdane	lr, {r0, r8, lr}
    3710:	58070d41 	stmdapl	r7, {r0, r6, r8, sl, fp}
    3714:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3718:	0000000d 	andeq	r0, r0, sp
    371c:	00000024 	andeq	r0, r0, r4, lsr #32
    3720:	00003518 	andeq	r3, r0, r8, lsl r5
    3724:	080064c0 	stmdaeq	r0, {r6, r7, sl, sp, lr}
    3728:	0000003a 	andeq	r0, r0, sl, lsr r0
    372c:	40080e41 	andmi	r0, r8, r1, asr #28
    3730:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3734:	180e4101 	stmdane	lr, {r0, r8, lr}
    3738:	58070d41 	stmdapl	r7, {r0, r6, r8, sl, fp}
    373c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3740:	0000000d 	andeq	r0, r0, sp
    3744:	00000028 	andeq	r0, r0, r8, lsr #32
    3748:	00003518 	andeq	r3, r0, r8, lsl r5
    374c:	00000000 	andeq	r0, r0, r0
    3750:	0000002e 	andeq	r0, r0, lr, lsr #32
    3754:	400c0e41 	andmi	r0, ip, r1, asr #28
    3758:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
    375c:	018e4002 	orreq	r4, lr, r2
    3760:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
    3764:	5220070c 	eorpl	r0, r0, #12, 14	; 0x300000
    3768:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
    376c:	0000000d 	andeq	r0, r0, sp
    3770:	0000003c 	andeq	r0, r0, ip, lsr r0
    3774:	00003518 	andeq	r3, r0, r8, lsl r5
    3778:	00000000 	andeq	r0, r0, r0
    377c:	000002c4 	andeq	r0, r0, r4, asr #5
    3780:	40240e42 	eormi	r0, r4, r2, asr #28
    3784:	85400984 	strbhi	r0, [r0, #-2436]	; 0xfffff67c
    3788:	07864008 	streq	r4, [r6, r8]
    378c:	40068740 	andmi	r8, r6, r0, asr #14
    3790:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
    3794:	038a4004 	orreq	r4, sl, #4
    3798:	40028b40 	andmi	r8, r2, r0, asr #22
    379c:	0e41018e 	dvfeqd	f0, f1, #0.5
    37a0:	0d410180 	stfeqe	f0, [r1, #-512]	; 0xfffffe00
    37a4:	015b0307 	cmpeq	fp, r7, lsl #6
    37a8:	0d41240e 	cfstrdeq	mvd2, [r1, #-56]	; 0xffffffc8
    37ac:	0000000d 	andeq	r0, r0, sp
    37b0:	00000024 	andeq	r0, r0, r4, lsr #32
    37b4:	00003518 	andeq	r3, r0, r8, lsl r5
    37b8:	00000000 	andeq	r0, r0, r0
    37bc:	0000004e 	andeq	r0, r0, lr, asr #32
    37c0:	40080e41 	andmi	r0, r8, r1, asr #28
    37c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    37c8:	180e4101 	stmdane	lr, {r0, r8, lr}
    37cc:	62070d41 	andvs	r0, r7, #4160	; 0x1040
    37d0:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    37d4:	0000000d 	andeq	r0, r0, sp
    37d8:	00000038 	andeq	r0, r0, r8, lsr r0
    37dc:	00003518 	andeq	r3, r0, r8, lsl r5
    37e0:	080064fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, sp, lr}
    37e4:	0000018a 	andeq	r0, r0, sl, lsl #3
    37e8:	40240e42 	eormi	r0, r4, r2, asr #28
    37ec:	85400984 	strbhi	r0, [r0, #-2436]	; 0xfffff67c
    37f0:	07864008 	streq	r4, [r6, r8]
    37f4:	40068740 	andmi	r8, r6, r0, asr #14
    37f8:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
    37fc:	038a4004 	orreq	r4, sl, #4
    3800:	40028b40 	andmi	r8, r2, r0, asr #22
    3804:	0e41018e 	dvfeqd	f0, f1, #0.5
    3808:	070d4160 	streq	r4, [sp, -r0, ror #2]
    380c:	240ebe02 	strcs	fp, [lr], #-3586	; 0xfffff1fe
    3810:	000d0d41 	andeq	r0, sp, r1, asr #26
    3814:	00000038 	andeq	r0, r0, r8, lsr r0
    3818:	00003518 	andeq	r3, r0, r8, lsl r5
    381c:	00000000 	andeq	r0, r0, r0
    3820:	0000018a 	andeq	r0, r0, sl, lsl #3
    3824:	40240e42 	eormi	r0, r4, r2, asr #28
    3828:	85400984 	strbhi	r0, [r0, #-2436]	; 0xfffff67c
    382c:	07864008 	streq	r4, [r6, r8]
    3830:	40068740 	andmi	r8, r6, r0, asr #14
    3834:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
    3838:	038a4004 	orreq	r4, sl, #4
    383c:	40028b40 	andmi	r8, r2, r0, asr #22
    3840:	0e41018e 	dvfeqd	f0, f1, #0.5
    3844:	070d4160 	streq	r4, [sp, -r0, ror #2]
    3848:	240ebe02 	strcs	fp, [lr], #-3586	; 0xfffff1fe
    384c:	000d0d41 	andeq	r0, sp, r1, asr #26
    3850:	0000000c 	andeq	r0, r0, ip
    3854:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3858:	7c020001 	stcvc	0, cr0, [r2], {1}
    385c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3860:	00000014 	andeq	r0, r0, r4, lsl r0
    3864:	00003850 	andeq	r3, r0, r0, asr r8
    3868:	080066ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, sp, lr}
    386c:	00000016 	andeq	r0, r0, r6, lsl r0
    3870:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    3874:	00018e02 	andeq	r8, r1, r2, lsl #28
    3878:	0000000c 	andeq	r0, r0, ip
    387c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3880:	7c020001 	stcvc	0, cr0, [r2], {1}
    3884:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3888:	0000000c 	andeq	r0, r0, ip
    388c:	00003878 	andeq	r3, r0, r8, ror r8
    3890:	080066e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, sp, lr}
    3894:	00000010 	andeq	r0, r0, r0, lsl r0
    3898:	0000000c 	andeq	r0, r0, ip
    389c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    38a0:	7c020001 	stcvc	0, cr0, [r2], {1}
    38a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    38a8:	00000018 	andeq	r0, r0, r8, lsl r0
    38ac:	00003898 	muleq	r0, r8, r8
    38b0:	00000000 	andeq	r0, r0, r0
    38b4:	00000050 	andeq	r0, r0, r0, asr r0
    38b8:	83100e41 	tsthi	r0, #1040	; 0x410
    38bc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    38c0:	00018e02 	andeq	r8, r1, r2, lsl #28
    38c4:	00000014 	andeq	r0, r0, r4, lsl r0
    38c8:	00003898 	muleq	r0, r8, r8
    38cc:	080066f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, sp, lr}
    38d0:	00000074 	andeq	r0, r0, r4, ror r0
    38d4:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    38d8:	00018e02 	andeq	r8, r1, r2, lsl #28
    38dc:	0000000c 	andeq	r0, r0, ip
    38e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    38e4:	7c020001 	stcvc	0, cr0, [r2], {1}
    38e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    38ec:	0000002c 	andeq	r0, r0, ip, lsr #32
    38f0:	000038dc 	ldrdeq	r3, [r0], -ip
    38f4:	00000000 	andeq	r0, r0, r0
    38f8:	0000005c 	andeq	r0, r0, ip, asr r0
    38fc:	83040e41 	movwhi	r0, #20033	; 0x4e41
    3900:	100e4101 	andne	r4, lr, r1, lsl #2
    3904:	03850484 	orreq	r0, r5, #132, 8	; 0x84000000
    3908:	0e42028e 	cdpeq	2, 4, cr0, cr2, cr14, {4}
    390c:	0e660180 	poweqd	f0, f6, f0
    3910:	c5ce4210 	strbgt	r4, [lr, #528]	; 0x210
    3914:	41040ec4 	smlabtmi	r4, r4, lr, r0
    3918:	00000ec3 	andeq	r0, r0, r3, asr #29
    391c:	00000030 	andeq	r0, r0, r0, lsr r0
    3920:	000038dc 	ldrdeq	r3, [r0], -ip
    3924:	08006768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, sp, lr}
    3928:	00000064 	andeq	r0, r0, r4, rrx
    392c:	82080e41 	andhi	r0, r8, #1040	; 0x410
    3930:	41018302 	tstmi	r1, r2, lsl #6
    3934:	0584140e 	streq	r1, [r4, #1038]	; 0x40e
    3938:	038e0485 	orreq	r0, lr, #-2063597568	; 0x85000000
    393c:	01880e43 	orreq	r0, r8, r3, asr #28
    3940:	42140e67 	andsmi	r0, r4, #1648	; 0x670
    3944:	0ec4c5ce 	cdpeq	5, 12, cr12, cr4, cr14, {6}
    3948:	c2c34108 	sbcgt	r4, r3, #8, 2
    394c:	0000000e 	andeq	r0, r0, lr
    3950:	0000000c 	andeq	r0, r0, ip
    3954:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3958:	7c020001 	stcvc	0, cr0, [r2], {1}
    395c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3960:	0000000c 	andeq	r0, r0, ip
    3964:	00003950 	andeq	r3, r0, r0, asr r9
    3968:	080067cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, sp, lr}
    396c:	0000001c 	andeq	r0, r0, ip, lsl r0
    3970:	0000000c 	andeq	r0, r0, ip
    3974:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3978:	7c020001 	stcvc	0, cr0, [r2], {1}
    397c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3980:	0000000c 	andeq	r0, r0, ip
    3984:	00003970 	andeq	r3, r0, r0, ror r9
    3988:	080067e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, sp, lr}
    398c:	00000010 	andeq	r0, r0, r0, lsl r0
    3990:	0000000c 	andeq	r0, r0, ip
    3994:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3998:	7c020001 	stcvc	0, cr0, [r2], {1}
    399c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    39a0:	0000000c 	andeq	r0, r0, ip
    39a4:	00003990 	muleq	r0, r0, r9
    39a8:	080067f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, sp, lr}
    39ac:	00000010 	andeq	r0, r0, r0, lsl r0
    39b0:	0000000c 	andeq	r0, r0, ip
    39b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    39b8:	7c020001 	stcvc	0, cr0, [r2], {1}
    39bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    39c0:	00000018 	andeq	r0, r0, r8, lsl r0
    39c4:	000039b0 			; <UNDEFINED> instruction: 0x000039b0
    39c8:	08006808 	stmdaeq	r0, {r3, fp, sp, lr}
    39cc:	00000032 	andeq	r0, r0, r2, lsr r0
    39d0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    39d4:	86038504 	strhi	r8, [r3], -r4, lsl #10
    39d8:	00018e02 	andeq	r8, r1, r2, lsl #28
    39dc:	0000000c 	andeq	r0, r0, ip
    39e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    39e4:	7c020001 	stcvc	0, cr0, [r2], {1}
    39e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    39ec:	00000014 	andeq	r0, r0, r4, lsl r0
    39f0:	000039dc 	ldrdeq	r3, [r0], -ip
    39f4:	0800683a 	stmdaeq	r0, {r1, r3, r4, r5, fp, sp, lr}
    39f8:	00000024 	andeq	r0, r0, r4, lsr #32
    39fc:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    3a00:	00018e02 	andeq	r8, r1, r2, lsl #28
    3a04:	0000000c 	andeq	r0, r0, ip
    3a08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3a0c:	7c020001 	stcvc	0, cr0, [r2], {1}
    3a10:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3a14:	0000000c 	andeq	r0, r0, ip
    3a18:	00003a04 	andeq	r3, r0, r4, lsl #20
    3a1c:	08006860 	stmdaeq	r0, {r5, r6, fp, sp, lr}
    3a20:	00000010 	andeq	r0, r0, r0, lsl r0
    3a24:	0000000c 	andeq	r0, r0, ip
    3a28:	00003a04 	andeq	r3, r0, r4, lsl #20
    3a2c:	00000000 	andeq	r0, r0, r0
    3a30:	00000010 	andeq	r0, r0, r0, lsl r0
    3a34:	0000000c 	andeq	r0, r0, ip
    3a38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3a3c:	7c020001 	stcvc	0, cr0, [r2], {1}
    3a40:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3a44:	00000018 	andeq	r0, r0, r8, lsl r0
    3a48:	00003a34 	andeq	r3, r0, r4, lsr sl
    3a4c:	08006870 	stmdaeq	r0, {r4, r5, r6, fp, sp, lr}
    3a50:	00000088 	andeq	r0, r0, r8, lsl #1
    3a54:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    3a58:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    3a5c:	00000001 	andeq	r0, r0, r1
    3a60:	0000000c 	andeq	r0, r0, ip
    3a64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3a68:	7c020001 	stcvc	0, cr0, [r2], {1}
    3a6c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3a70:	00000018 	andeq	r0, r0, r8, lsl r0
    3a74:	00003a60 	andeq	r3, r0, r0, ror #20
    3a78:	080068f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp, sp, lr}
    3a7c:	000000ac 	andeq	r0, r0, ip, lsr #1
    3a80:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    3a84:	86038504 	strhi	r8, [r3], -r4, lsl #10
    3a88:	00018e02 	andeq	r8, r1, r2, lsl #28
    3a8c:	0000000c 	andeq	r0, r0, ip
    3a90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3a94:	7c020001 	stcvc	0, cr0, [r2], {1}
    3a98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3a9c:	00000020 	andeq	r0, r0, r0, lsr #32
    3aa0:	00003a8c 	andeq	r3, r0, ip, lsl #21
    3aa4:	080069a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, sp, lr}
    3aa8:	000000b2 	strheq	r0, [r0], -r2
    3aac:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
    3ab0:	86078508 	strhi	r8, [r7], -r8, lsl #10
    3ab4:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    3ab8:	8a038904 	bhi	e5ed0 <_Min_Stack_Size+0xe5cd0>
    3abc:	00018e02 	andeq	r8, r1, r2, lsl #28
    3ac0:	00000028 	andeq	r0, r0, r8, lsr #32
    3ac4:	00003a8c 	andeq	r3, r0, ip, lsl #21
    3ac8:	00000000 	andeq	r0, r0, r0
    3acc:	000000fe 	strdeq	r0, [r0], -lr
    3ad0:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
    3ad4:	86088509 	strhi	r8, [r8], -r9, lsl #10
    3ad8:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    3adc:	8a048905 	bhi	125ef8 <_Min_Stack_Size+0x125cf8>
    3ae0:	8e028b03 	vmlahi.f64	d8, d2, d3
    3ae4:	0e7b0201 	cdpeq	2, 7, cr0, cr11, cr1, {0}
    3ae8:	00000024 	andeq	r0, r0, r4, lsr #32
    3aec:	00000028 	andeq	r0, r0, r8, lsr #32
    3af0:	00003a8c 	andeq	r3, r0, ip, lsl #21
    3af4:	08006a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, sp, lr}
    3af8:	000001e4 	andeq	r0, r0, r4, ror #3
    3afc:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xfffff1be
    3b00:	86068507 	strhi	r8, [r6], -r7, lsl #10
    3b04:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    3b08:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    3b0c:	900e4101 	andls	r4, lr, r1, lsl #2
    3b10:	0ee20201 	cdpeq	2, 14, cr0, cr2, cr1, {0}
    3b14:	0000001c 	andeq	r0, r0, ip, lsl r0
    3b18:	0000000c 	andeq	r0, r0, ip
    3b1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3b20:	7c020001 	stcvc	0, cr0, [r2], {1}
    3b24:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3b28:	00000020 	andeq	r0, r0, r0, lsr #32
    3b2c:	00003b18 	andeq	r3, r0, r8, lsl fp
    3b30:	08006c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, sp, lr}
    3b34:	000000ea 	andeq	r0, r0, sl, ror #1
    3b38:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
    3b3c:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
    3b40:	87058606 	strhi	r8, [r5, -r6, lsl #12]
    3b44:	89038804 	stmdbhi	r3, {r2, fp, pc}
    3b48:	00018e02 	andeq	r8, r1, r2, lsl #28
    3b4c:	00000020 	andeq	r0, r0, r0, lsr #32
    3b50:	00003b18 	andeq	r3, r0, r8, lsl fp
    3b54:	08006d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, sp, lr}
    3b58:	00000240 	andeq	r0, r0, r0, asr #4
    3b5c:	84280e42 	strthi	r0, [r8], #-3650	; 0xfffff1be
    3b60:	86058506 	strhi	r8, [r5], -r6, lsl #10
    3b64:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    3b68:	03018e02 	movweq	r8, #7682	; 0x1e02
    3b6c:	180e0118 	stmdane	lr, {r3, r4, r8}
    3b70:	0000000c 	andeq	r0, r0, ip
    3b74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3b78:	7c020001 	stcvc	0, cr0, [r2], {1}
    3b7c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3b80:	00000018 	andeq	r0, r0, r8, lsl r0
    3b84:	00003b70 	andeq	r3, r0, r0, ror fp
    3b88:	08006f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3b8c:	00000020 	andeq	r0, r0, r0, lsr #32
    3b90:	83100e41 	tsthi	r0, #1040	; 0x410
    3b94:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    3b98:	00018e02 	andeq	r8, r1, r2, lsl #28
    3b9c:	0000000c 	andeq	r0, r0, ip
    3ba0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3ba4:	7c020001 	stcvc	0, cr0, [r2], {1}
    3ba8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3bac:	00000014 	andeq	r0, r0, r4, lsl r0
    3bb0:	00003b9c 	muleq	r0, ip, fp
    3bb4:	08006f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, sp, lr}
    3bb8:	0000001c 	andeq	r0, r0, ip, lsl r0
    3bbc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    3bc0:	00018e02 	andeq	r8, r1, r2, lsl #28
    3bc4:	0000000c 	andeq	r0, r0, ip
    3bc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3bcc:	7c020001 	stcvc	0, cr0, [r2], {1}
    3bd0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3bd4:	00000014 	andeq	r0, r0, r4, lsl r0
    3bd8:	00003bc4 	andeq	r3, r0, r4, asr #23
    3bdc:	08006fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, sp, lr}
    3be0:	00000036 	andeq	r0, r0, r6, lsr r0
    3be4:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    3be8:	00018e02 	andeq	r8, r1, r2, lsl #28
    3bec:	0000000c 	andeq	r0, r0, ip
    3bf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3bf4:	7c020001 	stcvc	0, cr0, [r2], {1}
    3bf8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3bfc:	00000028 	andeq	r0, r0, r8, lsr #32
    3c00:	00003bec 	andeq	r3, r0, ip, ror #23
    3c04:	08006fda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, fp, sp, lr}
    3c08:	0000004c 	andeq	r0, r0, ip, asr #32
    3c0c:	83180e41 	tsthi	r8, #1040	; 0x410
    3c10:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    3c14:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    3c18:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
    3c1c:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    3c20:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    3c24:	000b4200 	andeq	r4, fp, r0, lsl #4
    3c28:	0000000c 	andeq	r0, r0, ip
    3c2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3c30:	7c020001 	stcvc	0, cr0, [r2], {1}
    3c34:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3c38:	00000020 	andeq	r0, r0, r0, lsr #32
    3c3c:	00003c28 	andeq	r3, r0, r8, lsr #24
    3c40:	00000000 	andeq	r0, r0, r0
    3c44:	0000001a 	andeq	r0, r0, sl, lsl r0
    3c48:	83100e41 	tsthi	r0, #1040	; 0x410
    3c4c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    3c50:	4a018e02 	bmi	67460 <_Min_Stack_Size+0x67260>
    3c54:	c3c4c5ce 	bicgt	ip, r4, #864026624	; 0x33800000
    3c58:	0000000e 	andeq	r0, r0, lr
    3c5c:	00000024 	andeq	r0, r0, r4, lsr #32
    3c60:	00003c28 	andeq	r3, r0, r8, lsr #24
    3c64:	00000000 	andeq	r0, r0, r0
    3c68:	000000b4 	strheq	r0, [r0], -r4
    3c6c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    3c70:	86038504 	strhi	r8, [r3], -r4, lsl #10
    3c74:	02018e02 	andeq	r8, r1, #2, 28
    3c78:	c6ce0a53 			; <UNDEFINED> instruction: 0xc6ce0a53
    3c7c:	000ec4c5 	andeq	ip, lr, r5, asr #9
    3c80:	00000b42 	andeq	r0, r0, r2, asr #22
    3c84:	0000000c 	andeq	r0, r0, ip
    3c88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3c8c:	7c020001 	stcvc	0, cr0, [r2], {1}
    3c90:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3c94:	0000000c 	andeq	r0, r0, ip
    3c98:	00003c84 	andeq	r3, r0, r4, lsl #25
    3c9c:	08007026 	stmdaeq	r0, {r1, r2, r5, ip, sp, lr}
    3ca0:	00000014 	andeq	r0, r0, r4, lsl r0
    3ca4:	0000000c 	andeq	r0, r0, ip
    3ca8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3cac:	7c020001 	stcvc	0, cr0, [r2], {1}
    3cb0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3cb4:	0000000c 	andeq	r0, r0, ip
    3cb8:	00003ca4 	andeq	r3, r0, r4, lsr #25
    3cbc:	0800703c 	stmdaeq	r0, {r2, r3, r4, r5, ip, sp, lr}
    3cc0:	0000001c 	andeq	r0, r0, ip, lsl r0

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	080066ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, sp, lr}
       4:	080066d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, sp, lr}
       8:	d4510001 	ldrble	r0, [r1], #-1
       c:	e4080066 	str	r0, [r8], #-102	; 0xffffff9a
      10:	04080066 	streq	r0, [r8], #-102	; 0xffffff9a
      14:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
      18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
  {
    bitstatus = SET;
      1c:	00000000 	andeq	r0, r0, r0
  }
  else
  {
    bitstatus = RESET;
      20:	0066ce00 	rsbeq	ip, r6, r0, lsl #28
  }
  /* Return the flag status */
  return bitstatus;
      24:	0066d408 	rsbeq	sp, r6, r8, lsl #8
}
      28:	52000108 	andpl	r0, r0, #8, 2
      2c:	080066d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, sp, lr}
      30:	080066e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, sp, lr}
      34:	0071000b 	rsbseq	r0, r1, fp
      38:	22007120 	andcs	r7, r0, #32, 2
      3c:	225201f3 	subscs	r0, r2, #-1073741764	; 0xc000003c
      40:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      44:	00000000 	andeq	r0, r0, r0
      48:	0066ce00 	rsbeq	ip, r6, r0, lsl #28
      4c:	0066d408 	rsbeq	sp, r6, r8, lsl #8
      50:	50000108 	andpl	r0, r0, r8, lsl #2
	...
      5c:	080066ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, sp, lr}
      60:	080066dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, sp, lr}
      64:	dc510001 	mrrcle	0, 0, r0, r1, cr1
      68:	e2080066 	and	r0, r8, #102	; 0x66
      6c:	03080066 	movweq	r0, #32870	; 0x8066
      70:	9f7f7100 	svcls	0x007f7100
      74:	080066e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, sp, lr}
      78:	080066e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, sp, lr}
      7c:	00510001 	subseq	r0, r1, r1
      80:	00000000 	andeq	r0, r0, r0
      84:	e4000000 	str	r0, [r0], #-0
      88:	e8080066 	stmda	r8, {r1, r2, r5, r6}
      8c:	01080066 	tsteq	r8, r6, rrx
      90:	00005200 	andeq	r5, r0, r0, lsl #4
      94:	00000000 	andeq	r0, r0, r0
      98:	66e40000 	strbtvs	r0, [r4], r0
      9c:	66e80800 	strbtvs	r0, [r8], r0, lsl #16
      a0:	00010800 	andeq	r0, r1, r0, lsl #16
      a4:	0066e850 	rsbeq	lr, r6, r0, asr r8
      a8:	0066f008 	rsbeq	pc, r6, r8
      ac:	53000108 	movwpl	r0, #264	; 0x108
      b0:	080066f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, sp, lr}
      b4:	080066f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl, sp, lr}
      b8:	7f730003 	svcvc	0x00730003
      bc:	0066f29f 	mlseq	r6, pc, r2, pc	; <UNPREDICTABLE>
      c0:	0066f408 	rsbeq	pc, r6, r8, lsl #8
      c4:	53000108 	movwpl	r0, #264	; 0x108
	...
      d8:	00500001 	subseq	r0, r0, r1
      dc:	00000000 	andeq	r0, r0, r0
      e0:	01000000 	mrseq	r0, (UNDEF: 0)
      e4:	00005500 	andeq	r5, r0, r0, lsl #10
      e8:	00000000 	andeq	r0, r0, r0
      ec:	00040000 	andeq	r0, r4, r0
      f0:	9f5001f3 	svcls	0x005001f3
	...
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }
  
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
     104:	00540001 	subseq	r0, r4, r1
	...
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
     114:	01000000 	mrseq	r0, (UNDEF: 0)
     118:	00005400 	andeq	r5, r0, r0, lsl #8
     11c:	00000000 	andeq	r0, r0, r0
     120:	66fa0000 	ldrbtvs	r0, [sl], r0
     124:	67380800 	ldrvs	r0, [r8, -r0, lsl #16]!
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     128:	00010800 	andeq	r0, r1, r0, lsl #16
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
     12c:	00000054 	andeq	r0, r0, r4, asr r0
     130:	00000000 	andeq	r0, r0, r0
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
     134:	00670a00 	rsbeq	r0, r7, r0, lsl #20
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
     138:	00673408 	rsbeq	r3, r7, r8, lsl #8
     13c:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;   
     150:	00500001 	subseq	r0, r0, r1
     154:	00000000 	andeq	r0, r0, r0
}
     158:	01000000 	mrseq	r0, (UNDEF: 0)
     15c:	00005500 	andeq	r5, r0, r0, lsl #10
     160:	00000000 	andeq	r0, r0, r0
         break;
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
         *(uint16_t*) arg = getSn_KPALVTR(sn);
         break;
     164:	00010000 	andeq	r0, r1, r0
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     168:	00000050 	andeq	r0, r0, r0, asr r0
     16c:	00000000 	andeq	r0, r0, r0
     170:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     17c:	01f30004 	mvnseq	r0, r4
     180:	00009f50 	andeq	r9, r0, r0, asr pc
	...
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
     190:	00010000 	andeq	r0, r1, r0
     194:	00000051 	andeq	r0, r0, r1, asr r0
     198:	00000000 	andeq	r0, r0, r0
     19c:	71000200 	mrsvc	r0, R8_usr
	...
         break;
      case SO_REMAINSIZE:
         if(getSn_MR(sn) == Sn_MR_TCP)
     1a8:	f3000400 	vshl.u8	d0, d0, d0
     1ac:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1bc:	01000000 	mrseq	r0, (UNDEF: 0)
     1c0:	00005200 	andeq	r5, r0, r0, lsl #4
     1c4:	00000000 	andeq	r0, r0, r0
         else
            *(uint16_t*)arg = sock_remained_size[sn];
     1c8:	00010000 	andeq	r0, r1, r0
     1cc:	00000054 	andeq	r0, r0, r4, asr r0
     1d0:	00000000 	andeq	r0, r0, r0
         break;
     1d4:	f3000400 	vshl.u8	d0, d0, d0
      case SO_PACKINFO:
         CHECK_SOCKMODE(Sn_MR_TCP);
     1d8:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
     1e8:	01000000 	mrseq	r0, (UNDEF: 0)
     1ec:	00005000 	andeq	r5, r0, r0
     1f0:	00000000 	andeq	r0, r0, r0
         *(uint8_t*)arg = sock_pack_info[sn];
     1f4:	67680000 	strbvs	r0, [r8, -r0]!
     1f8:	677e0800 	ldrbvs	r0, [lr, -r0, lsl #16]!
         break;
     1fc:	00010800 	andeq	r0, r1, r0, lsl #16
      default:
         return SOCKERR_SOCKOPT;
     200:	00677e50 	rsbeq	r7, r7, r0, asr lr
   }
   return SOCK_OK;
     204:	00678008 	rsbeq	r8, r7, r8
}
     208:	f3000408 	vshl.u8	d0, d8, d0
     20c:	809f5001 	addshi	r5, pc, r1
     210:	a2080067 	andge	r0, r8, #103	; 0x67
     214:	01080067 	tsteq	r8, r7, rrx
     218:	67a25000 	strvs	r5, [r2, r0]!
     21c:	67a60800 	strvs	r0, [r6, r0, lsl #16]!
     220:	00030800 	andeq	r0, r3, r0, lsl #16
     224:	a67ef091 			; <UNDEFINED> instruction: 0xa67ef091
     228:	ad080067 	stcge	0, cr0, [r8, #-412]	; 0xfffffe64
       fixed_header[1] = fixed_header[1] | 0x80;
       // second byte is number of 128s
       fixed_header[2] = remainLen / 128;
   }

	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     22c:	02080067 	andeq	r0, r8, #103	; 0x67
     230:	ad007100 	stfges	f7, [r0, #-0]
     234:	cc080067 	stcgt	0, cr0, [r8], {103}	; 0x67
     238:	04080067 	streq	r0, [r8], #-103	; 0xffffff99
     23c:	5001f300 	andpl	pc, r1, r0, lsl #6
     240:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     244:	00000000 	andeq	r0, r0, r0
     248:	00676800 	rsbeq	r6, r7, r0, lsl #16
     24c:	0067a608 	rsbeq	sl, r7, r8, lsl #12
	memset(packet, 0, sizeof(packet));
     250:	51000108 	tstpl	r0, r8, lsl #2
     254:	080067a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, sp, lr}
     258:	080067c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, sp, lr}
	memcpy(packet, fixed_header, sizeof(fixed_header));
     25c:	c4540001 	ldrbgt	r0, [r4], #-1
     260:	cc080067 	stcgt	0, cr0, [r8], {103}	; 0x67
     264:	04080067 	streq	r0, [r8], #-103	; 0xffffff99
     268:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     270:	00000000 	andeq	r0, r0, r0
     274:	0067ae00 	rsbeq	sl, r7, r0, lsl #28
     278:	0067be08 	rsbeq	fp, r7, r8, lsl #28
     27c:	50000108 	andpl	r0, r0, r8, lsl #2
	...
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     288:	08006774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, sp, lr}
     28c:	080067c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, sp, lr}
     290:	00550001 	subseq	r0, r5, r1
     294:	00000000 	andeq	r0, r0, r0

	// Send the packet
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     298:	cc000000 	stcgt	0, cr0, [r0], {-0}
     29c:	ce080067 	cdpgt	0, 0, cr0, cr8, cr7, {3}
     2a0:	01080067 	tsteq	r8, r7, rrx
     2a4:	67ce5000 	strbvs	r5, [lr, r0]
     2a8:	67e80800 	strbvs	r0, [r8, r0, lsl #16]!
     2ac:	00040800 	andeq	r0, r4, r0, lsl #16
		return -1;
     2b0:	9f5001f3 	svcls	0x005001f3
	...
	}

	return 1;
}
     2bc:	080067cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, sp, lr}
     2c0:	080067ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, sl, sp, lr}
     2c4:	ce510001 	cdpgt	0, 5, cr0, cr1, cr1, {0}
     2c8:	e8080067 	stmda	r8, {r0, r1, r2, r5, r6}
     2cc:	04080067 	streq	r0, [r8], #-103	; 0xffffff99
     2d0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     2d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     2d8:	00000000 	andeq	r0, r0, r0
     2dc:	0067cc00 	rsbeq	ip, r7, r0, lsl #24
     2e0:	0067ce08 	rsbeq	ip, r7, r8, lsl #28
     2e4:	50000108 	andpl	r0, r0, r8, lsl #2
     2e8:	080067d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, sp, lr}
     2ec:	080067d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, sp, lr}
     2f0:	d4500001 	ldrble	r0, [r0], #-1
     2f4:	e8080067 	stmda	r8, {r0, r1, r2, r5, r6}
     2f8:	01080067 	tsteq	r8, r7, rrx
     2fc:	00005300 	andeq	r5, r0, r0, lsl #6
     300:	00000000 	andeq	r0, r0, r0
     304:	67e80000 	strbvs	r0, [r8, r0]!
     308:	67f80800 	ldrbvs	r0, [r8, r0, lsl #16]!
     30c:	00010800 	andeq	r0, r1, r0, lsl #16
     310:	0067f850 	rsbeq	pc, r7, r0, asr r8	; <UNPREDICTABLE>
     314:	0067f808 	rsbeq	pc, r7, r8, lsl #16
     318:	f3000408 	vshl.u8	d0, d8, d0
     31c:	009f5001 	addseq	r5, pc, r1
     320:	00000000 	andeq	r0, r0, r0
     324:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
     328:	04080067 	streq	r0, [r8], #-103	; 0xffffff99
     32c:	01080068 	tsteq	r8, r8, rrx
     330:	68045000 	stmdavs	r4, {ip, lr}
     334:	68080800 	stmdavs	r8, {fp}
     338:	00040800 	andeq	r0, r4, r0, lsl #16
     33c:	9f5001f3 	svcls	0x005001f3
	...
     348:	08006808 	stmdaeq	r0, {r3, fp, sp, lr}
     34c:	08006810 	stmdaeq	r0, {r4, fp, sp, lr}
     350:	10500001 	subsne	r0, r0, r1
     354:	18080068 	stmdane	r8, {r3, r5, r6}
     358:	03080068 	movweq	r0, #32872	; 0x8068
     35c:	9f017500 	svcls	0x00017500
     360:	08006818 	stmdaeq	r0, {r3, r4, fp, sp, lr}
     364:	08006834 	stmdaeq	r0, {r2, r4, r5, fp, sp, lr}
     368:	34560001 	ldrbcc	r0, [r6], #-1
     36c:	36080068 	strcc	r0, [r8], -r8, rrx
     370:	01080068 	tsteq	r8, r8, rrx
     374:	68365500 	ldmdavs	r6!, {r8, sl, ip, lr}
     378:	68380800 	ldmdavs	r8!, {fp}
     37c:	00010800 	andeq	r0, r1, r0, lsl #16
     380:	00683850 	rsbeq	r3, r8, r0, asr r8
     384:	00683a08 	rsbeq	r3, r8, r8, lsl #20
     388:	f3000408 	vshl.u8	d0, d8, d0
     38c:	009f5001 	addseq	r5, pc, r1
     390:	00000000 	andeq	r0, r0, r0
     394:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     398:	10080068 	andne	r0, r8, r8, rrx
     39c:	01080068 	tsteq	r8, r8, rrx
     3a0:	68365100 	ldmdavs	r6!, {r8, ip, lr}
     3a4:	683a0800 	ldmdavs	sl!, {fp}
     3a8:	00010800 	andeq	r0, r1, r0, lsl #16
     3ac:	00000051 	andeq	r0, r0, r1, asr r0
     3b0:	00000000 	andeq	r0, r0, r0
     3b4:	00680800 	rsbeq	r0, r8, r0, lsl #16
     3b8:	00681008 	rsbeq	r1, r8, r8
     3bc:	52000108 	andpl	r0, r0, #8, 2
     3c0:	08006836 	stmdaeq	r0, {r1, r2, r4, r5, fp, sp, lr}
     3c4:	0800683a 	stmdaeq	r0, {r1, r3, r4, r5, fp, sp, lr}
     3c8:	00520001 	subseq	r0, r2, r1
     3cc:	00000000 	andeq	r0, r0, r0
     3d0:	3a000000 	bcc	3d8 <_Min_Stack_Size+0x1d8>
     3d4:	3e080068 	cdpcc	0, 0, cr0, cr8, cr8, {3}
     3d8:	01080068 	tsteq	r8, r8, rrx
     3dc:	683e5100 	ldmdavs	lr!, {r8, ip, lr}
     3e0:	685e0800 	ldmdavs	lr, {fp}^
     3e4:	00040800 	andeq	r0, r4, r0, lsl #16
     3e8:	9f5101f3 	svcls	0x005101f3
	...
     3f4:	0800683a 	stmdaeq	r0, {r1, r3, r4, r5, fp, sp, lr}
     3f8:	0800683e 	stmdaeq	r0, {r1, r2, r3, r4, r5, fp, sp, lr}
     3fc:	3e520001 	cdpcc	0, 5, cr0, cr2, cr1, {0}
     400:	40080068 	andmi	r0, r8, r8, rrx
     404:	01080068 	tsteq	r8, r8, rrx
     408:	68405200 	stmdavs	r0, {r9, ip, lr}^
     40c:	68460800 	stmdavs	r6, {fp}^
     410:	00030800 	andeq	r0, r3, r0, lsl #16
     414:	469f7f72 			; <UNDEFINED> instruction: 0x469f7f72
     418:	50080068 	andpl	r0, r8, r8, rrx
     41c:	01080068 	tsteq	r8, r8, rrx
     420:	00005200 	andeq	r5, r0, r0, lsl #4
     424:	00000000 	andeq	r0, r0, r0
     428:	683a0000 	ldmdavs	sl!, {}	; <UNPREDICTABLE>
     42c:	683e0800 	ldmdavs	lr!, {fp}
     430:	00010800 	andeq	r0, r1, r0, lsl #16
     434:	00683e50 	rsbeq	r3, r8, r0, asr lr
     438:	00684a08 	rsbeq	r4, r8, r8, lsl #20
     43c:	53000108 	movwpl	r0, #264	; 0x108
     440:	0800684a 	stmdaeq	r0, {r1, r3, r6, fp, sp, lr}
     444:	0800684e 	stmdaeq	r0, {r1, r2, r3, r6, fp, sp, lr}
     448:	7f730003 	svcvc	0x00730003
     44c:	0068509f 	mlseq	r8, pc, r0, r5	; <UNPREDICTABLE>
     450:	00685a08 	rsbeq	r5, r8, r8, lsl #20
     454:	53000108 	movwpl	r0, #264	; 0x108
     458:	0800685a 	stmdaeq	r0, {r1, r3, r4, r6, fp, sp, lr}
     45c:	0800685c 	stmdaeq	r0, {r2, r3, r4, r6, fp, sp, lr}
     460:	7f730003 	svcvc	0x00730003
     464:	00685c9f 	mlseq	r8, pc, ip, r5	; <UNPREDICTABLE>
     468:	00685e08 	rsbeq	r5, r8, r8, lsl #28
     46c:	53000108 	movwpl	r0, #264	; 0x108
	...
     478:	0800683a 	stmdaeq	r0, {r1, r3, r4, r5, fp, sp, lr}
     47c:	08006844 	stmdaeq	r0, {r2, r6, fp, sp, lr}
     480:	44510001 	ldrbmi	r0, [r1], #-1
     484:	46080068 	strmi	r0, [r8], -r8, rrx
     488:	03080068 	movweq	r0, #32872	; 0x8068
     48c:	9f7f7100 	svcls	0x007f7100
	...
     498:	08006860 	stmdaeq	r0, {r5, r6, fp, sp, lr}
     49c:	08006866 	stmdaeq	r0, {r1, r2, r5, r6, fp, sp, lr}
     4a0:	66500001 	ldrbvs	r0, [r0], -r1
     4a4:	69080068 	stmdbvs	r8, {r3, r5, r6}
     4a8:	01080068 	tsteq	r8, r8, rrx
     4ac:	68695100 	stmdavs	r9!, {r8, ip, lr}^
     4b0:	68700800 	ldmdavs	r0!, {fp}^
     4b4:	00040800 	andeq	r0, r4, r0, lsl #16
     4b8:	9f5001f3 	svcls	0x005001f3
	...
     4cc:	00500001 	subseq	r0, r0, r1
     4d0:	00000000 	andeq	r0, r0, r0
     4d4:	01000000 	mrseq	r0, (UNDEF: 0)
     4d8:	00005100 	andeq	r5, r0, r0, lsl #2
     4dc:	00000000 	andeq	r0, r0, r0
     4e0:	00040000 	andeq	r0, r4, r0
     4e4:	9f5001f3 	svcls	0x005001f3
	...
     4f0:	08006870 	stmdaeq	r0, {r4, r5, r6, fp, sp, lr}
     4f4:	08006898 	stmdaeq	r0, {r3, r4, r7, fp, sp, lr}
     4f8:	98500001 	ldmdals	r0, {r0}^
     4fc:	aa080068 	bge	2006a4 <_Min_Stack_Size+0x2004a4>
     500:	04080068 	streq	r0, [r8], #-104	; 0xffffff98
     504:	5001f300 	andpl	pc, r1, r0, lsl #6
     508:	0068aa9f 	mlseq	r8, pc, sl, sl	; <UNPREDICTABLE>
     50c:	0068c408 	rsbeq	ip, r8, r8, lsl #8
     510:	50000108 	andpl	r0, r0, r8, lsl #2
     514:	080068c4 	stmdaeq	r0, {r2, r6, r7, fp, sp, lr}
     518:	080068d4 	stmdaeq	r0, {r2, r4, r6, r7, fp, sp, lr}
     51c:	01f30004 	mvnseq	r0, r4
     520:	68d49f50 	ldmvs	r4, {r4, r6, r8, r9, sl, fp, ip, pc}^
     524:	68e00800 	stmiavs	r0!, {fp}^
     528:	00010800 	andeq	r0, r1, r0, lsl #16
     52c:	0068e050 	rsbeq	lr, r8, r0, asr r0
     530:	0068f808 	rsbeq	pc, r8, r8, lsl #16
     534:	f3000408 	vshl.u8	d0, d8, d0
     538:	009f5001 	addseq	r5, pc, r1
     53c:	00000000 	andeq	r0, r0, r0
     540:	70000000 	andvc	r0, r0, r0
     544:	7e080068 	cdpvc	0, 0, cr0, cr8, cr8, {3}
     548:	01080068 	tsteq	r8, r8, rrx
     54c:	687e5100 	ldmdavs	lr!, {r8, ip, lr}^
     550:	68840800 	stmvs	r4, {fp}
     554:	00030800 	andeq	r0, r3, r0, lsl #16
     558:	849f0473 	ldrhi	r0, [pc], #1139	; 560 <_Min_Stack_Size+0x360>
     55c:	f8080068 			; <UNDEFINED> instruction: 0xf8080068
     560:	04080068 	streq	r0, [r8], #-104	; 0xffffff98
     564:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     568:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     56c:	00000000 	andeq	r0, r0, r0
     570:	0068aa00 	rsbeq	sl, r8, r0, lsl #20
     574:	0068f008 	rsbeq	pc, r8, r8
     578:	52000108 	andpl	r0, r0, #8, 2
	...
     584:	080068aa 	stmdaeq	r0, {r1, r3, r5, r7, fp, sp, lr}
     588:	080068b0 	stmdaeq	r0, {r4, r5, r7, fp, sp, lr}
     58c:	b0510001 	subslt	r0, r1, r1
     590:	b2080068 	andlt	r0, r8, #104	; 0x68
     594:	01080068 	tsteq	r8, r8, rrx
     598:	68b25200 	ldmvs	r2!, {r9, ip, lr}
     59c:	68e80800 	stmiavs	r8!, {fp}^
     5a0:	00010800 	andeq	r0, r1, r0, lsl #16
     5a4:	0068e851 	rsbeq	lr, r8, r1, asr r8
     5a8:	0068ee08 	rsbeq	lr, r8, r8, lsl #28
     5ac:	72000208 	andvc	r0, r0, #8, 4	; 0x80000000
     5b0:	00000004 	andeq	r0, r0, r4
     5b4:	00000000 	andeq	r0, r0, r0
     5b8:	00687600 	rsbeq	r7, r8, r0, lsl #12
     5bc:	00687e08 	rsbeq	r7, r8, r8, lsl #28
     5c0:	51000108 	tstpl	r0, r8, lsl #2
     5c4:	0800687e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, fp, sp, lr}
     5c8:	08006884 	stmdaeq	r0, {r2, r7, fp, sp, lr}
     5cc:	04730003 	ldrbteq	r0, [r3], #-3
     5d0:	0068849f 	mlseq	r8, pc, r4, r8	; <UNPREDICTABLE>
     5d4:	0068f008 	rsbeq	pc, r8, r8
     5d8:	f3000408 	vshl.u8	d0, d8, d0
     5dc:	009f5101 	addseq	r5, pc, r1, lsl #2
     5e0:	00000000 	andeq	r0, r0, r0
     5e4:	7c000000 	stcvc	0, cr0, [r0], {-0}
     5e8:	c0080068 	andgt	r0, r8, r8, rrx
     5ec:	01080068 	tsteq	r8, r8, rrx
     5f0:	68c05300 	stmiavs	r0, {r8, r9, ip, lr}^
     5f4:	68c80800 	stmiavs	r8, {fp}^
     5f8:	001f0800 	andseq	r0, pc, r0, lsl #16
     5fc:	f35101f3 	vbsl	q8, <illegal reg q8.5>, <illegal reg q9.5>
     600:	1c345101 	ldfnes	f5, [r4], #-4
     604:	1c342206 	lfmne	f2, 4, [r4], #-24	; 0xffffffe8
     608:	345101f3 	ldrbcc	r0, [r1], #-499	; 0xfffffe0d
     60c:	5101f31c 	tstpl	r1, ip, lsl r3	; <UNPREDICTABLE>
     610:	30061c34 	andcc	r1, r6, r4, lsr ip
     614:	0001282d 	andeq	r2, r1, sp, lsr #16
     618:	d49f1316 	ldrle	r1, [pc], #790	; 620 <_Min_Stack_Size+0x420>
     61c:	d8080068 	stmdale	r8, {r3, r5, r6}
     620:	01080068 	tsteq	r8, r8, rrx
     624:	68d85300 	ldmvs	r8, {r8, r9, ip, lr}^
     628:	68dc0800 	ldmvs	ip, {fp}^
     62c:	001f0800 	andseq	r0, pc, r0, lsl #16
     630:	f35101f3 	vbsl	q8, <illegal reg q8.5>, <illegal reg q9.5>
     634:	1c345101 	ldfnes	f5, [r4], #-4
     638:	1c342206 	lfmne	f2, 4, [r4], #-24	; 0xffffffe8
     63c:	345101f3 	ldrbcc	r0, [r1], #-499	; 0xfffffe0d
     640:	5101f31c 	tstpl	r1, ip, lsl r3	; <UNPREDICTABLE>
     644:	30061c34 	andcc	r1, r6, r4, lsr ip
     648:	0001282d 	andeq	r2, r1, sp, lsr #16
     64c:	dc9f1316 	ldcle	3, cr1, [pc], {22}
     650:	ee080068 	cdp	0, 0, cr0, cr8, cr8, {3}
     654:	01080068 	tsteq	r8, r8, rrx
     658:	00005300 	andeq	r5, r0, r0, lsl #6
     65c:	00000000 	andeq	r0, r0, r0
     660:	68f80000 	ldmvs	r8!, {}^	; <UNPREDICTABLE>
     664:	690e0800 	stmdbvs	lr, {fp}
     668:	00010800 	andeq	r0, r1, r0, lsl #16
     66c:	00690e50 	rsbeq	r0, r9, r0, asr lr
     670:	00691608 	rsbeq	r1, r9, r8, lsl #12
     674:	56000108 	strpl	r0, [r0], -r8, lsl #2
     678:	08006916 	stmdaeq	r0, {r1, r2, r4, r8, fp, sp, lr}
     67c:	08006920 	stmdaeq	r0, {r5, r8, fp, sp, lr}
     680:	20500001 	subscs	r0, r0, r1
     684:	9c080069 	stcls	0, cr0, [r8], {105}	; 0x69
     688:	01080069 	tsteq	r8, r9, rrx
     68c:	699c5600 	ldmibvs	ip, {r9, sl, ip, lr}
     690:	69a40800 	stmibvs	r4!, {fp}
     694:	00040800 	andeq	r0, r4, r0, lsl #16
     698:	9f5001f3 	svcls	0x005001f3
	...
     6a4:	080068f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp, sp, lr}
     6a8:	0800690e 	stmdaeq	r0, {r1, r2, r3, r8, fp, sp, lr}
     6ac:	0e510001 	cdpeq	0, 5, cr0, cr1, cr1, {0}
     6b0:	16080069 	strne	r0, [r8], -r9, rrx
     6b4:	04080069 	streq	r0, [r8], #-105	; 0xffffff97
     6b8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     6bc:	0069169f 	mlseq	r9, pc, r6, r1	; <UNPREDICTABLE>
     6c0:	00692208 	rsbeq	r2, r9, r8, lsl #4
     6c4:	51000108 	tstpl	r0, r8, lsl #2
     6c8:	08006922 	stmdaeq	r0, {r1, r5, r8, fp, sp, lr}
     6cc:	080069a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, sp, lr}
     6d0:	01f30004 	mvnseq	r0, r4
     6d4:	00009f51 	andeq	r9, r0, r1, asr pc
     6d8:	00000000 	andeq	r0, r0, r0
     6dc:	691e0000 	ldmdbvs	lr, {}	; <UNPREDICTABLE>
     6e0:	69220800 	stmdbvs	r2!, {fp}
     6e4:	00010800 	andeq	r0, r1, r0, lsl #16
     6e8:	00694853 	rsbeq	r4, r9, r3, asr r8
     6ec:	00694c08 	rsbeq	r4, r9, r8, lsl #24
     6f0:	51000108 	tstpl	r0, r8, lsl #2
     6f4:	0800694c 	stmdaeq	r0, {r2, r3, r6, r8, fp, sp, lr}
     6f8:	0800694e 	stmdaeq	r0, {r1, r2, r3, r6, r8, fp, sp, lr}
     6fc:	00530001 	subseq	r0, r3, r1
     700:	00000000 	andeq	r0, r0, r0
     704:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     708:	22080069 	andcs	r0, r8, #105	; 0x69
     70c:	01080069 	tsteq	r8, r9, rrx
     710:	69225300 	stmdbvs	r2!, {r8, r9, ip, lr}
     714:	69320800 	ldmdbvs	r2!, {fp}
     718:	00010800 	andeq	r0, r1, r0, lsl #16
     71c:	00693251 	rsbeq	r3, r9, r1, asr r2
     720:	00693608 	rsbeq	r3, r9, r8, lsl #12
     724:	53000108 	movwpl	r0, #264	; 0x108
     728:	08006936 	stmdaeq	r0, {r1, r2, r4, r5, r8, fp, sp, lr}
     72c:	08006948 	stmdaeq	r0, {r3, r6, r8, fp, sp, lr}
     730:	48510001 	ldmdami	r1, {r0}^
     734:	4c080069 	stcmi	0, cr0, [r8], {105}	; 0x69
     738:	02080069 	andeq	r0, r8, #105	; 0x69
     73c:	4c047100 	stfmis	f7, [r4], {-0}
     740:	4e080069 	cdpmi	0, 0, cr0, cr8, cr9, {3}
     744:	01080069 	tsteq	r8, r9, rrx
     748:	694e5100 	stmdbvs	lr, {r8, ip, lr}^
     74c:	69740800 	ldmdbvs	r4!, {fp}^
     750:	00020800 	andeq	r0, r2, r0, lsl #16
     754:	69769f30 	ldmdbvs	r6!, {r4, r5, r8, r9, sl, fp, ip, pc}^
     758:	698a0800 	stmibvs	sl, {fp}
     75c:	00010800 	andeq	r0, r1, r0, lsl #16
     760:	00698a53 	rsbeq	r8, r9, r3, asr sl
     764:	00699a08 	rsbeq	r9, r9, r8, lsl #20
     768:	30000208 	andcc	r0, r0, r8, lsl #4
     76c:	00699a9f 	mlseq	r9, pc, sl, r9	; <UNPREDICTABLE>
     770:	0069a408 	rsbeq	sl, r9, r8, lsl #8
     774:	53000108 	movwpl	r0, #264	; 0x108
	...
     780:	08006980 	stmdaeq	r0, {r7, r8, fp, sp, lr}
     784:	0800698a 	stmdaeq	r0, {r1, r3, r7, r8, fp, sp, lr}
     788:	9a500001 	bls	1400794 <_Min_Stack_Size+0x1400594>
     78c:	a4080069 	strge	r0, [r8], #-105	; 0xffffff97
     790:	01080069 	tsteq	r8, r9, rrx
     794:	00005000 	andeq	r5, r0, r0
     798:	00000000 	andeq	r0, r0, r0
     79c:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
     7a0:	69020800 	stmdbvs	r2, {fp}
     7a4:	00030800 	andeq	r0, r3, r0, lsl #16
     7a8:	029f0474 	addseq	r0, pc, #116, 8	; 0x74000000
     7ac:	08080069 	stmdaeq	r8, {r0, r3, r5, r6}
     7b0:	01080069 	tsteq	r8, r9, rrx
     7b4:	69085400 	stmdbvs	r8, {sl, ip, lr}
     7b8:	690e0800 	stmdbvs	lr, {fp}
     7bc:	001a0800 	andseq	r0, sl, r0, lsl #16
     7c0:	fc090371 	stc2	3, cr0, [r9], {113}	; 0x71
     7c4:	1208231a 	andne	r2, r8, #1744830464	; 0x68000000
     7c8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
     7cc:	4014163c 	andsmi	r1, r4, ip, lsr r6
     7d0:	2b22244b 	blcs	889904 <_Min_Stack_Size+0x889704>
     7d4:	16000128 	strne	r0, [r0], -r8, lsr #2
     7d8:	690e9f13 	stmdbvs	lr, {r0, r1, r4, r8, r9, sl, fp, ip, pc}
     7dc:	69160800 	ldmdbvs	r6, {fp}
     7e0:	001d0800 	andseq	r0, sp, r0, lsl #16
     7e4:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
     7e8:	1afc0903 	bne	fff02bfc <BootRAM+0xee7339d>
     7ec:	40120823 	andsmi	r0, r2, r3, lsr #16
     7f0:	3c22244b 	cfstrscc	mvf2, [r2], #-300	; 0xfffffed4
     7f4:	4b401416 	blmi	1005854 <_Min_Stack_Size+0x1005654>
     7f8:	282b2224 	stmdacs	fp!, {r2, r5, r9, sp}
     7fc:	13160001 	tstne	r6, #1
     800:	0069169f 	mlseq	r9, pc, r6, r1	; <UNPREDICTABLE>
     804:	00692208 	rsbeq	r2, r9, r8, lsl #4
     808:	71001a08 	tstvc	r0, r8, lsl #20
     80c:	1afc0903 	bne	fff02c20 <BootRAM+0xee733c1>
     810:	40120823 	andsmi	r0, r2, r3, lsr #16
     814:	3c22244b 	cfstrscc	mvf2, [r2], #-300	; 0xfffffed4
     818:	4b401416 	blmi	1005878 <_Min_Stack_Size+0x1005678>
     81c:	282b2224 	stmdacs	fp!, {r2, r5, r9, sp}
     820:	13160001 	tstne	r6, #1
     824:	0069229f 	mlseq	r9, pc, r2, r2	; <UNPREDICTABLE>
     828:	0069a408 	rsbeq	sl, r9, r8, lsl #8
     82c:	f3001d08 	vpadd.f32	d1, d0, d8
     830:	03235101 			; <UNDEFINED> instruction: 0x03235101
     834:	231afc09 	tstcs	sl, #2304	; 0x900	; <UNPREDICTABLE>
     838:	4b401208 	blmi	1005060 <_Min_Stack_Size+0x1004e60>
     83c:	163c2224 	ldrtne	r2, [ip], -r4, lsr #4
     840:	244b4014 	strbcs	r4, [fp], #-20	; 0xffffffec
     844:	01282b22 			; <UNDEFINED> instruction: 0x01282b22
     848:	9f131600 	svcls	0x00131600
	...
     854:	08006926 	stmdaeq	r0, {r1, r2, r5, r8, fp, sp, lr}
     858:	08006928 	stmdaeq	r0, {r3, r5, r8, fp, sp, lr}
     85c:	00720006 	rsbseq	r0, r2, r6
     860:	9f1c0074 	svcls	0x001c0074
     864:	08006928 	stmdaeq	r0, {r3, r5, r8, fp, sp, lr}
     868:	0800693c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, sp, lr}
     86c:	3c520001 	mrrccc	0, 0, r0, r2, cr1
     870:	48080069 	stmdami	r8, {r0, r3, r5, r6}
     874:	07080069 	streq	r0, [r8, -r9, rrx]
     878:	06007100 	streq	r7, [r0], -r0, lsl #2
     87c:	9f1c0074 	svcls	0x001c0074
     880:	08006948 	stmdaeq	r0, {r3, r6, r8, fp, sp, lr}
     884:	0800694e 	stmdaeq	r0, {r1, r2, r3, r6, r8, fp, sp, lr}
     888:	00520001 	subseq	r0, r2, r1
     88c:	00000000 	andeq	r0, r0, r0
     890:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     894:	76080069 	strvc	r0, [r8], -r9, rrx
     898:	1d080069 	stcne	0, cr0, [r8, #-420]	; 0xfffffe5c
     89c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     8a0:	fc090323 	stc2	3, cr0, [r9], {35}	; 0x23
     8a4:	1208231a 	andne	r2, r8, #1744830464	; 0x68000000
     8a8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
     8ac:	4014163c 	andsmi	r1, r4, ip, lsr r6
     8b0:	2b22244b 	blcs	8899e4 <_Min_Stack_Size+0x8897e4>
     8b4:	16000128 	strne	r0, [r0], -r8, lsr #2
     8b8:	698a9f13 	stmibvs	sl, {r0, r1, r4, r8, r9, sl, fp, ip, pc}
     8bc:	699a0800 	ldmibvs	sl, {fp}
     8c0:	001d0800 	andseq	r0, sp, r0, lsl #16
     8c4:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
     8c8:	1afc0903 	bne	fff02cdc <BootRAM+0xee7347d>
     8cc:	40120823 	andsmi	r0, r2, r3, lsr #16
     8d0:	3c22244b 	cfstrscc	mvf2, [r2], #-300	; 0xfffffed4
     8d4:	4b401416 	blmi	1005934 <_Min_Stack_Size+0x1005734>
     8d8:	282b2224 	stmdacs	fp!, {r2, r5, r9, sp}
     8dc:	13160001 	tstne	r6, #1
     8e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     8e4:	00000000 	andeq	r0, r0, r0
     8e8:	00694e00 	rsbeq	r4, r9, r0, lsl #28
     8ec:	00697608 	rsbeq	r7, r9, r8, lsl #12
     8f0:	56000108 	strpl	r0, [r0], -r8, lsl #2
     8f4:	0800698a 	stmdaeq	r0, {r1, r3, r7, r8, fp, sp, lr}
     8f8:	0800699a 	stmdaeq	r0, {r1, r3, r4, r7, r8, fp, sp, lr}
     8fc:	00560001 	subseq	r0, r6, r1
     900:	00000000 	andeq	r0, r0, r0
     904:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     908:	74080069 	strvc	r0, [r8], #-105	; 0xffffff97
     90c:	01080069 	tsteq	r8, r9, rrx
     910:	698a5000 	stmibvs	sl, {ip, lr}
     914:	698c0800 	stmibvs	ip, {fp}
     918:	00010800 	andeq	r0, r1, r0, lsl #16
     91c:	00698c50 	rsbeq	r8, r9, r0, asr ip
     920:	00699108 	rsbeq	r9, r9, r8, lsl #2
     924:	53000108 	movwpl	r0, #264	; 0x108
     928:	08006992 	stmdaeq	r0, {r1, r4, r7, r8, fp, sp, lr}
     92c:	08006994 	stmdaeq	r0, {r2, r4, r7, r8, fp, sp, lr}
     930:	94500001 	ldrbls	r0, [r0], #-1
     934:	9a080069 	bls	200ae0 <_Min_Stack_Size+0x2008e0>
     938:	03080069 	movweq	r0, #32873	; 0x8069
     93c:	9f7f7000 	svcls	0x007f7000
	...
     948:	08006970 	stmdaeq	r0, {r4, r5, r6, r8, fp, sp, lr}
     94c:	08006976 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, fp, sp, lr}
     950:	8a550001 	bhi	154095c <_Min_Stack_Size+0x154075c>
     954:	9a080069 	bls	200b00 <_Min_Stack_Size+0x200900>
     958:	01080069 	tsteq	r8, r9, rrx
     95c:	00005500 	andeq	r5, r0, r0, lsl #10
     960:	00000000 	andeq	r0, r0, r0
     964:	69a40000 	stmibvs	r4!, {}	; <UNPREDICTABLE>
     968:	69e30800 	stmibvs	r3!, {fp}^
     96c:	00010800 	andeq	r0, r1, r0, lsl #16
     970:	0069e350 	rsbeq	lr, r9, r0, asr r3
     974:	0069fe08 	rsbeq	pc, r9, r8, lsl #28
     978:	5a000108 	bpl	da0 <_Min_Stack_Size+0xba0>
     97c:	080069fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, fp, sp, lr}
     980:	08006a03 	stmdaeq	r0, {r0, r1, r9, fp, sp, lr}
     984:	03500001 	cmpeq	r0, #1
     988:	5608006a 	strpl	r0, [r8], -sl, rrx
     98c:	0108006a 	tsteq	r8, sl, rrx
     990:	00005a00 	andeq	r5, r0, r0, lsl #20
     994:	00000000 	andeq	r0, r0, r0
     998:	69a40000 	stmibvs	r4!, {}	; <UNPREDICTABLE>
     99c:	69c20800 	stmibvs	r2, {fp}^
     9a0:	00010800 	andeq	r0, r1, r0, lsl #16
     9a4:	0069c251 	rsbeq	ip, r9, r1, asr r2
     9a8:	006a5608 	rsbeq	r5, sl, r8, lsl #12
     9ac:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
	...
     9b8:	080069a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, sp, lr}
     9bc:	080069b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, fp, sp, lr}
     9c0:	b8520001 	ldmdalt	r2, {r0}^
     9c4:	56080069 	strpl	r0, [r8], -r9, rrx
     9c8:	0108006a 	tsteq	r8, sl, rrx
     9cc:	00005800 	andeq	r5, r0, r0, lsl #16
     9d0:	00000000 	andeq	r0, r0, r0
     9d4:	69a40000 	stmibvs	r4!, {}	; <UNPREDICTABLE>
     9d8:	69c40800 	stmibvs	r4, {fp}^
     9dc:	00010800 	andeq	r0, r1, r0, lsl #16
     9e0:	0069c453 	rsbeq	ip, r9, r3, asr r4
     9e4:	006a5608 	rsbeq	r5, sl, r8, lsl #12
     9e8:	59000108 	stmdbpl	r0, {r3, r8}
	...
     9f4:	080069aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, fp, sp, lr}
     9f8:	080069c2 	stmdaeq	r0, {r1, r6, r7, r8, fp, sp, lr}
     9fc:	08710002 	ldmdaeq	r1!, {r1}^
     a00:	080069c2 	stmdaeq	r0, {r1, r6, r7, r8, fp, sp, lr}
     a04:	080069e3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r8, fp, sp, lr}
     a08:	08740002 	ldmdaeq	r4!, {r1}^
     a0c:	080069fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, fp, sp, lr}
     a10:	08006a03 	stmdaeq	r0, {r0, r1, r9, fp, sp, lr}
     a14:	08740002 	ldmdaeq	r4!, {r1}^
     a18:	08006a30 	stmdaeq	r0, {r4, r5, r9, fp, sp, lr}
     a1c:	08006a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, sp, lr}
     a20:	38560001 	ldmdacc	r6, {r0}^
     a24:	3a08006a 	bcc	200bd4 <_Min_Stack_Size+0x2009d4>
     a28:	0108006a 	tsteq	r8, sl, rrx
     a2c:	00005900 	andeq	r5, r0, r0, lsl #18
     a30:	00000000 	andeq	r0, r0, r0
     a34:	69e40000 	stmibvs	r4!, {}^	; <UNPREDICTABLE>
     a38:	69ef0800 	stmibvs	pc!, {fp}^	; <UNPREDICTABLE>
     a3c:	00010800 	andeq	r0, r1, r0, lsl #16
     a40:	0069ef50 	rsbeq	lr, r9, r0, asr pc
     a44:	0069fe08 	rsbeq	pc, r9, r8, lsl #28
     a48:	56000108 	strpl	r0, [r0], -r8, lsl #2
     a4c:	08006a04 	stmdaeq	r0, {r2, r9, fp, sp, lr}
     a50:	08006a0a 	stmdaeq	r0, {r1, r3, r9, fp, sp, lr}
     a54:	0a500001 	beq	1400a60 <_Min_Stack_Size+0x1400860>
     a58:	2a08006a 	bcs	200c08 <_Min_Stack_Size+0x200a08>
     a5c:	0108006a 	tsteq	r8, sl, rrx
     a60:	6a2a5600 	bvs	a96268 <_Min_Stack_Size+0xa96068>
     a64:	6a340800 	bvs	d02a6c <_Min_Stack_Size+0xd0286c>
     a68:	00020800 	andeq	r0, r2, r0, lsl #16
     a6c:	00001074 	andeq	r1, r0, r4, ror r0
     a70:	00000000 	andeq	r0, r0, r0
     a74:	69c60000 	stmibvs	r6, {}^	; <UNPREDICTABLE>
     a78:	6a340800 	bvs	d02a80 <_Min_Stack_Size+0xd02880>
     a7c:	00010800 	andeq	r0, r1, r0, lsl #16
     a80:	00000057 	andeq	r0, r0, r7, asr r0
     a84:	00000000 	andeq	r0, r0, r0
     a88:	0069d000 	rsbeq	sp, r9, r0
     a8c:	006a3208 	rsbeq	r3, sl, r8, lsl #4
     a90:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
     a94:	08006a32 	stmdaeq	r0, {r1, r4, r5, r9, fp, sp, lr}
     a98:	08006a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, sp, lr}
     a9c:	14740002 	ldrbtne	r0, [r4], #-2
	...
     ab0:	00500001 	subseq	r0, r0, r1
     ab4:	00000000 	andeq	r0, r0, r0
     ab8:	01000000 	mrseq	r0, (UNDEF: 0)
     abc:	00005900 	andeq	r5, r0, r0, lsl #18
     ac0:	00000000 	andeq	r0, r0, r0
     ac4:	00010000 	andeq	r0, r1, r0
     ac8:	00000050 	andeq	r0, r0, r0, asr r0
     acc:	00000000 	andeq	r0, r0, r0
     ad0:	59000100 	stmdbpl	r0, {r8}
	...
     adc:	00500001 	subseq	r0, r0, r1
     ae0:	00000000 	andeq	r0, r0, r0
     ae4:	01000000 	mrseq	r0, (UNDEF: 0)
     ae8:	00005900 	andeq	r5, r0, r0, lsl #18
	...
     af8:	00010000 	andeq	r0, r1, r0
     afc:	00000051 	andeq	r0, r0, r1, asr r0
     b00:	00000000 	andeq	r0, r0, r0
     b04:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     b18:	00520001 	subseq	r0, r2, r1
     b1c:	00000000 	andeq	r0, r0, r0
     b20:	01000000 	mrseq	r0, (UNDEF: 0)
     b24:	00005b00 	andeq	r5, r0, r0, lsl #22
	...
     b34:	00020000 	andeq	r0, r2, r0
     b38:	00009f30 	andeq	r9, r0, r0, lsr pc
     b3c:	00000000 	andeq	r0, r0, r0
     b40:	00010000 	andeq	r0, r1, r0
     b44:	00000057 	andeq	r0, r0, r7, asr r0
     b48:	00000000 	andeq	r0, r0, r0
     b4c:	30000200 	andcc	r0, r0, r0, lsl #4
     b50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     b54:	00000000 	andeq	r0, r0, r0
     b58:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
     b6c:	00560001 	subseq	r0, r6, r1
     b70:	00000000 	andeq	r0, r0, r0
     b74:	01000000 	mrseq	r0, (UNDEF: 0)
     b78:	00005700 	andeq	r5, r0, r0, lsl #14
     b7c:	00000000 	andeq	r0, r0, r0
     b80:	00010000 	andeq	r0, r1, r0
     b84:	00000056 	andeq	r0, r0, r6, asr r0
     b88:	00000000 	andeq	r0, r0, r0
     b8c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     b98:	00570001 	subseq	r0, r7, r1
	...
     ba8:	02000000 	andeq	r0, r0, #0
     bac:	009f3000 	addseq	r3, pc, r0
     bb0:	00000000 	andeq	r0, r0, r0
     bb4:	02000000 	andeq	r0, r0, #0
     bb8:	00007a00 	andeq	r7, r0, r0, lsl #20
     bbc:	00000000 	andeq	r0, r0, r0
     bc0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     bc4:	31007700 	tstcc	r0, r0, lsl #14
     bc8:	06549124 	ldrbeq	r9, [r4], -r4, lsr #2
     bcc:	00009f22 	andeq	r9, r0, r2, lsr #30
	...
     bdc:	00010000 	andeq	r0, r1, r0
     be0:	00000050 	andeq	r0, r0, r0, asr r0
     be4:	00000000 	andeq	r0, r0, r0
     be8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     bf4:	00500001 	subseq	r0, r0, r1
     bf8:	00000000 	andeq	r0, r0, r0
     bfc:	01000000 	mrseq	r0, (UNDEF: 0)
     c00:	00005600 	andeq	r5, r0, r0, lsl #12
     c04:	00000000 	andeq	r0, r0, r0
     c08:	00020000 	andeq	r0, r2, r0
     c0c:	00001074 	andeq	r1, r0, r4, ror r0
	...
     c1c:	00010000 	andeq	r0, r1, r0
     c20:	00000058 	andeq	r0, r0, r8, asr r0
	...
     c30:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
     c3c:	14740002 	ldrbtne	r0, [r4], #-2
	...
     c48:	08006a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, sp, lr}
     c4c:	08006a75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, fp, sp, lr}
     c50:	75500001 	ldrbvc	r0, [r0, #-1]
     c54:	2608006a 	strcs	r0, [r8], -sl, rrx
     c58:	0108006c 	tsteq	r8, ip, rrx
     c5c:	6c265600 	stcvs	6, cr5, [r6], #-0
     c60:	6c3c0800 	ldcvs	8, cr0, [ip], #-0
     c64:	00040800 	andeq	r0, r4, r0, lsl #16
     c68:	9f5001f3 	svcls	0x005001f3
	...
     c74:	08006a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, sp, lr}
     c78:	08006a72 	stmdaeq	r0, {r1, r4, r5, r6, r9, fp, sp, lr}
     c7c:	72510001 	subsvc	r0, r1, #1
     c80:	2608006a 	strcs	r0, [r8], -sl, rrx
     c84:	0108006c 	tsteq	r8, ip, rrx
     c88:	6c265500 	cfstr32vs	mvfx5, [r6], #-0
     c8c:	6c3c0800 	ldcvs	8, cr0, [ip], #-0
     c90:	00040800 	andeq	r0, r4, r0, lsl #16
     c94:	9f5101f3 	svcls	0x005101f3
	...
     ca0:	08006a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, sp, lr}
     ca4:	08006a75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, fp, sp, lr}
     ca8:	75520001 	ldrbvc	r0, [r2, #-1]
     cac:	9608006a 	strls	r0, [r8], -sl, rrx
     cb0:	0108006a 	tsteq	r8, sl, rrx
     cb4:	6a965800 	bvs	fe596cbc <BootRAM+0xd50745d>
     cb8:	6c3c0800 	ldcvs	8, cr0, [ip], #-0
     cbc:	00040800 	andeq	r0, r4, r0, lsl #16
     cc0:	9f5201f3 	svcls	0x005201f3
	...
     ccc:	08006a86 	stmdaeq	r0, {r1, r2, r7, r9, fp, sp, lr}
     cd0:	08006a98 	stmdaeq	r0, {r3, r4, r7, r9, fp, sp, lr}
     cd4:	9a580001 	bls	1600ce0 <_Min_Stack_Size+0x1600ae0>
     cd8:	9e08006a 	cdpls	0, 0, cr0, cr8, cr10, {3}
     cdc:	0108006a 	tsteq	r8, sl, rrx
     ce0:	6a9e5300 	bvs	fe7958e8 <BootRAM+0xd706089>
     ce4:	6ace0800 	bvs	ff382cec <BootRAM+0xe2f348d>
     ce8:	00010800 	andeq	r0, r1, r0, lsl #16
     cec:	006ace54 	rsbeq	ip, sl, r4, asr lr
     cf0:	006ae608 	rsbeq	lr, sl, r8, lsl #12
     cf4:	74000308 	strvc	r0, [r0], #-776	; 0xfffffcf8
     cf8:	6ae69f01 	bvs	ff9a8904 <BootRAM+0xe9190a5>
     cfc:	6ae80800 	bvs	ffa02d04 <BootRAM+0xe9734a5>
     d00:	00010800 	andeq	r0, r1, r0, lsl #16
     d04:	006ae858 	rsbeq	lr, sl, r8, asr r8
     d08:	006b0a08 	rsbeq	r0, fp, r8, lsl #20
     d0c:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
     d10:	08006b0a 	stmdaeq	r0, {r1, r3, r8, r9, fp, sp, lr}
     d14:	08006b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, sp, lr}
     d18:	0c580001 	mrrceq	0, 0, r0, r8, cr1
     d1c:	4a08006b 	bmi	200ed0 <_Min_Stack_Size+0x200cd0>
     d20:	0108006b 	tsteq	r8, fp, rrx
     d24:	6b4a5400 	blvs	1295d2c <_Min_Stack_Size+0x1295b2c>
     d28:	6b4c0800 	blvs	1302d30 <_Min_Stack_Size+0x1302b30>
     d2c:	00010800 	andeq	r0, r1, r0, lsl #16
     d30:	006b4c53 	rsbeq	r4, fp, r3, asr ip
     d34:	006b5c08 	rsbeq	r5, fp, r8, lsl #24
     d38:	54000108 	strpl	r0, [r0], #-264	; 0xfffffef8
     d3c:	08006b5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, fp, sp, lr}
     d40:	08006b5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}
     d44:	5e530001 	cdppl	0, 5, cr0, cr3, cr1, {0}
     d48:	6608006b 	strvs	r0, [r8], -fp, rrx
     d4c:	0108006b 	tsteq	r8, fp, rrx
     d50:	6b665400 	blvs	1995d58 <_Min_Stack_Size+0x1995b58>
     d54:	6b700800 	blvs	1c02d5c <_Min_Stack_Size+0x1c02b5c>
     d58:	00030800 	andeq	r0, r3, r0, lsl #16
     d5c:	709f0174 	addsvc	r0, pc, r4, ror r1	; <UNPREDICTABLE>
     d60:	8208006b 	andhi	r0, r8, #107	; 0x6b
     d64:	0108006b 	tsteq	r8, fp, rrx
     d68:	6b825400 	blvs	fe095d70 <BootRAM+0xd006511>
     d6c:	6b860800 	blvs	fe182d74 <BootRAM+0xd0f3515>
     d70:	00030800 	andeq	r0, r3, r0, lsl #16
     d74:	889f0174 	ldmhi	pc, {r2, r4, r5, r6, r8}	; <UNPREDICTABLE>
     d78:	8c08006b 	stchi	0, cr0, [r8], {107}	; 0x6b
     d7c:	0108006b 	tsteq	r8, fp, rrx
     d80:	6b8c5100 	blvs	fe315188 <BootRAM+0xd285929>
     d84:	6b980800 	blvs	fe602d8c <BootRAM+0xd57352d>
     d88:	00010800 	andeq	r0, r1, r0, lsl #16
     d8c:	006b9854 	rsbeq	r9, fp, r4, asr r8
     d90:	006b9a08 	rsbeq	r9, fp, r8, lsl #20
     d94:	51000108 	tstpl	r0, r8, lsl #2
     d98:	08006b9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, fp, sp, lr}
     d9c:	08006bc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, fp, sp, lr}
     da0:	c6540001 	ldrbgt	r0, [r4], -r1
     da4:	1208006b 	andne	r0, r8, #107	; 0x6b
     da8:	0108006c 	tsteq	r8, ip, rrx
     dac:	00005800 	andeq	r5, r0, r0, lsl #16
     db0:	00000000 	andeq	r0, r0, r0
     db4:	6a960000 	bvs	fe580dbc <BootRAM+0xd4f155d>
     db8:	6c080800 	stcvs	8, cr0, [r8], {-0}
     dbc:	00010800 	andeq	r0, r1, r0, lsl #16
     dc0:	006c0857 	rsbeq	r0, ip, r7, asr r8
     dc4:	006c0a08 	rsbeq	r0, ip, r8, lsl #20
     dc8:	50000108 	andpl	r0, r0, r8, lsl #2
     dcc:	08006c0a 	stmdaeq	r0, {r1, r3, sl, fp, sp, lr}
     dd0:	08006c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, sp, lr}
     dd4:	00570001 	subseq	r0, r7, r1
     dd8:	00000000 	andeq	r0, r0, r0
     ddc:	a0000000 	andge	r0, r0, r0
     de0:	a408006a 	strge	r0, [r8], #-106	; 0xffffff96
     de4:	0608006a 	streq	r0, [r8], -sl, rrx
     de8:	78007400 	stmdavc	r0, {sl, ip, sp, lr}
     dec:	a49f1c00 	ldrge	r1, [pc], #3072	; df4 <_Min_Stack_Size+0xbf4>
     df0:	a808006a 	stmdage	r8, {r1, r3, r5, r6}
     df4:	0108006a 	tsteq	r8, sl, rrx
     df8:	6aae5900 	bvs	feb97200 <BootRAM+0xdb079a1>
     dfc:	6ae60800 	bvs	ff982e04 <BootRAM+0xe8f35a5>
     e00:	00010800 	andeq	r0, r1, r0, lsl #16
     e04:	00000059 	andeq	r0, r0, r9, asr r0
     e08:	00000000 	andeq	r0, r0, r0
     e0c:	006a9600 	rsbeq	r9, sl, r0, lsl #12
     e10:	006ae608 	rsbeq	lr, sl, r8, lsl #12
     e14:	58000108 	stmdapl	r0, {r3, r8}
     e18:	08006af6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, fp, sp, lr}
     e1c:	08006b02 	stmdaeq	r0, {r1, r8, r9, fp, sp, lr}
     e20:	02500001 	subseq	r0, r0, #1
     e24:	0c08006b 	stceq	0, cr0, [r8], {107}	; 0x6b
     e28:	0908006b 	stmdbeq	r8, {r0, r1, r3, r5, r6}
     e2c:	03007000 	movweq	r7, #0
     e30:	08007a66 	stmdaeq	r0, {r1, r2, r5, r6, r9, fp, ip, sp, lr}
     e34:	6b0c9f22 	blvs	328ac4 <_Min_Stack_Size+0x3288c4>
     e38:	6b0e0800 	blvs	382e40 <_Min_Stack_Size+0x382c40>
     e3c:	00010800 	andeq	r0, r1, r0, lsl #16
     e40:	006baa50 	rsbeq	sl, fp, r0, asr sl
     e44:	006bb208 	rsbeq	fp, fp, r8, lsl #4
     e48:	50000108 	andpl	r0, r0, r8, lsl #2
     e4c:	08006bb2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, fp, sp, lr}
     e50:	08006bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp, sp, lr}
     e54:	00700009 	rsbseq	r0, r0, r9
     e58:	007a6c03 	rsbseq	r6, sl, r3, lsl #24
     e5c:	ce9f2208 	cdpgt	2, 9, cr2, cr15, cr8, {0}
     e60:	e808006b 	stmda	r8, {r0, r1, r3, r5, r6}
     e64:	0108006b 	tsteq	r8, fp, rrx
     e68:	6bf45000 	blvs	ffd14e70 <BootRAM+0xec85611>
     e6c:	6bfa0800 	blvs	ffe82e74 <BootRAM+0xedf3615>
     e70:	00010800 	andeq	r0, r1, r0, lsl #16
     e74:	00000050 	andeq	r0, r0, r0, asr r0
     e78:	00000000 	andeq	r0, r0, r0
     e7c:	006ae200 	rsbeq	lr, sl, r0, lsl #4
     e80:	006b9c08 	rsbeq	r9, fp, r8, lsl #24
     e84:	03000608 	movweq	r0, #1544	; 0x608
     e88:	08007a66 	stmdaeq	r0, {r1, r2, r5, r6, r9, fp, ip, sp, lr}
     e8c:	006b9c9f 	mlseq	fp, pc, ip, r9	; <UNPREDICTABLE>
     e90:	006c1208 	rsbeq	r1, ip, r8, lsl #4
     e94:	03000608 	movweq	r0, #1544	; 0x608
     e98:	08007a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, ip, sp, lr}
     e9c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ea0:	00000000 	andeq	r0, r0, r0
     ea4:	006c3c00 	rsbeq	r3, ip, r0, lsl #24
     ea8:	006c7e08 	rsbeq	r7, ip, r8, lsl #28
     eac:	50000108 	andpl	r0, r0, r8, lsl #2
     eb0:	08006c7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, fp, sp, lr}
     eb4:	08006d26 	stmdaeq	r0, {r1, r2, r5, r8, sl, fp, sp, lr}
     eb8:	00560001 	subseq	r0, r6, r1
     ebc:	00000000 	andeq	r0, r0, r0
     ec0:	3c000000 	stccc	0, cr0, [r0], {-0}
     ec4:	6a08006c 	bvs	20107c <_Min_Stack_Size+0x200e7c>
     ec8:	0108006c 	tsteq	r8, ip, rrx
     ecc:	6c6a5100 	stfvse	f5, [sl], #-0
     ed0:	6d260800 	stcvs	8, cr0, [r6, #-0]
     ed4:	00010800 	andeq	r0, r1, r0, lsl #16
     ed8:	00000054 	andeq	r0, r0, r4, asr r0
     edc:	00000000 	andeq	r0, r0, r0
     ee0:	006c3c00 	rsbeq	r3, ip, r0, lsl #24
     ee4:	006c4608 	rsbeq	r4, ip, r8, lsl #12
     ee8:	52000108 	andpl	r0, r0, #8, 2
     eec:	08006c46 	stmdaeq	r0, {r1, r2, r6, sl, fp, sp, lr}
     ef0:	08006cc6 	stmdaeq	r0, {r1, r2, r6, r7, sl, fp, sp, lr}
     ef4:	c6590001 	ldrbgt	r0, [r9], -r1
     ef8:	ce08006c 	cdpgt	0, 0, cr0, cr8, cr12, {3}
     efc:	0408006c 	streq	r0, [r8], #-108	; 0xffffff94
     f00:	5201f300 	andpl	pc, r1, #0, 6
     f04:	006cce9f 	mlseq	ip, pc, lr, ip	; <UNPREDICTABLE>
     f08:	006d0608 	rsbeq	r0, sp, r8, lsl #12
     f0c:	59000108 	stmdbpl	r0, {r3, r8}
     f10:	08006d06 	stmdaeq	r0, {r1, r2, r8, sl, fp, sp, lr}
     f14:	08006d26 	stmdaeq	r0, {r1, r2, r5, r8, sl, fp, sp, lr}
     f18:	01f30004 	mvnseq	r0, r4
     f1c:	00009f52 	andeq	r9, r0, r2, asr pc
     f20:	00000000 	andeq	r0, r0, r0
     f24:	6c3c0000 	ldcvs	0, cr0, [ip], #-0
     f28:	6c480800 	mcrrvs	8, 0, r0, r8, cr0
     f2c:	00010800 	andeq	r0, r1, r0, lsl #16
     f30:	006c4853 	rsbeq	r4, ip, r3, asr r8
     f34:	006d2608 	rsbeq	r2, sp, r8, lsl #12
     f38:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
     f44:	08006c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, sp, lr}
     f48:	08006cce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, fp, sp, lr}
     f4c:	00910002 	addseq	r0, r1, r2
     f50:	08006cce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, fp, sp, lr}
     f54:	08006d26 	stmdaeq	r0, {r1, r2, r5, r8, sl, fp, sp, lr}
     f58:	00910002 	addseq	r0, r1, r2
	...
     f64:	08006c7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, fp, sp, lr}
     f68:	08006c8a 	stmdaeq	r0, {r1, r3, r7, sl, fp, sp, lr}
     f6c:	9f300002 	svcls	0x00300002
     f70:	08006c8a 	stmdaeq	r0, {r1, r3, r7, sl, fp, sp, lr}
     f74:	08006ca0 	stmdaeq	r0, {r5, r7, sl, fp, sp, lr}
     f78:	a0530001 	subsge	r0, r3, r1
     f7c:	a608006c 	strge	r0, [r8], -ip, rrx
     f80:	0308006c 	movweq	r0, #32876	; 0x806c
     f84:	9f7e7300 	svcls	0x007e7300
     f88:	08006cce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, fp, sp, lr}
     f8c:	08006cd7 	stmdaeq	r0, {r0, r1, r2, r4, r6, r7, sl, fp, sp, lr}
     f90:	e4530001 	ldrb	r0, [r3], #-1
     f94:	ee08006c 	cdp	0, 0, cr0, cr8, cr12, {3}
     f98:	0608006c 	streq	r0, [r8], -ip, rrx
     f9c:	75007300 	strvc	r7, [r0, #-768]	; 0xfffffd00
     fa0:	ee9f1c00 	cdp	12, 9, cr1, cr15, cr0, {0}
     fa4:	f208006c 	vhadd.s8	q0, q4, q14
     fa8:	0708006c 	streq	r0, [r8, -ip, rrx]
     fac:	79007300 	stmdbvc	r0, {r8, r9, ip, sp, lr}
     fb0:	9f1c0600 	svcls	0x001c0600
     fb4:	08006cf2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl, fp, sp, lr}
     fb8:	08006cfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sl, fp, sp, lr}
     fbc:	0c740008 	ldcleq	0, cr0, [r4], #-32	; 0xffffffe0
     fc0:	06007906 	streq	r7, [r0], -r6, lsl #18
     fc4:	6cfa9f1c 	ldclvs	15, cr9, [sl], #112	; 0x70
     fc8:	6d260800 	stcvs	8, cr0, [r6, #-0]
     fcc:	00010800 	andeq	r0, r1, r0, lsl #16
     fd0:	00000055 	andeq	r0, r0, r5, asr r0
     fd4:	00000000 	andeq	r0, r0, r0
     fd8:	006ca600 	rsbeq	sl, ip, r0, lsl #12
     fdc:	006cc608 	rsbeq	ip, ip, r8, lsl #12
     fe0:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
	...
     fec:	08006d02 	stmdaeq	r0, {r1, r8, sl, fp, sp, lr}
     ff0:	08006d06 	stmdaeq	r0, {r1, r2, r8, sl, fp, sp, lr}
     ff4:	9f300002 	svcls	0x00300002
     ff8:	08006d06 	stmdaeq	r0, {r1, r2, r8, sl, fp, sp, lr}
     ffc:	08006d26 	stmdaeq	r0, {r1, r2, r5, r8, sl, fp, sp, lr}
    1000:	00590001 	subseq	r0, r9, r1
    1004:	00000000 	andeq	r0, r0, r0
    1008:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    100c:	a408006d 	strge	r0, [r8], #-109	; 0xffffff93
    1010:	0108006d 	tsteq	r8, sp, rrx
    1014:	6da45000 	stcvs	0, cr5, [r4]
    1018:	6dd40800 	ldclvs	8, cr0, [r4]
    101c:	00010800 	andeq	r0, r1, r0, lsl #16
    1020:	006dd456 	rsbeq	sp, sp, r6, asr r4
    1024:	006dd608 	rsbeq	sp, sp, r8, lsl #12
    1028:	50000108 	andpl	r0, r0, r8, lsl #2
    102c:	08006dd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, fp, sp, lr}
    1030:	08006e06 	stmdaeq	r0, {r1, r2, r9, sl, fp, sp, lr}
    1034:	06560001 	ldrbeq	r0, [r6], -r1
    1038:	1408006e 	strne	r0, [r8], #-110	; 0xffffff92
    103c:	0108006e 	tsteq	r8, lr, rrx
    1040:	6e145000 	cdpvs	0, 1, cr5, cr4, cr0, {0}
    1044:	6ea20800 	cdpvs	8, 10, cr0, cr2, cr0, {0}
    1048:	00010800 	andeq	r0, r1, r0, lsl #16
    104c:	006ea256 	rsbeq	sl, lr, r6, asr r2
    1050:	006eac08 	rsbeq	sl, lr, r8, lsl #24
    1054:	50000108 	andpl	r0, r0, r8, lsl #2
    1058:	08006eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, sp, lr}
    105c:	08006ed2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, fp, sp, lr}
    1060:	d2560001 	subsle	r0, r6, #1
    1064:	de08006e 	cdple	0, 0, cr0, cr8, cr14, {3}
    1068:	0108006e 	tsteq	r8, lr, rrx
    106c:	6ede5000 	cdpvs	0, 13, cr5, cr14, cr0, {0}
    1070:	6eee0800 	cdpvs	8, 14, cr0, cr14, cr0, {0}
    1074:	00010800 	andeq	r0, r1, r0, lsl #16
    1078:	006eee56 	rsbeq	lr, lr, r6, asr lr
    107c:	006ef808 	rsbeq	pc, lr, r8, lsl #16
    1080:	50000108 	andpl	r0, r0, r8, lsl #2
    1084:	08006ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp, sp, lr}
    1088:	08006f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, sp, lr}
    108c:	60560001 	subsvs	r0, r6, r1
    1090:	6808006f 	stmdavs	r8, {r0, r1, r2, r3, r5, r6}
    1094:	0408006f 	streq	r0, [r8], #-111	; 0xffffff91
    1098:	5001f300 	andpl	pc, r1, r0, lsl #6
    109c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    10a0:	00000000 	andeq	r0, r0, r0
    10a4:	006d2800 	rsbeq	r2, sp, r0, lsl #16
    10a8:	006d3e08 	rsbeq	r3, sp, r8, lsl #28
    10ac:	51000108 	tstpl	r0, r8, lsl #2
    10b0:	08006d3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, sl, fp, sp, lr}
    10b4:	08006f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, sp, lr}
    10b8:	60540001 	subsvs	r0, r4, r1
    10bc:	6808006f 	stmdavs	r8, {r0, r1, r2, r3, r5, r6}
    10c0:	0408006f 	streq	r0, [r8], #-111	; 0xffffff91
    10c4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    10c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    10cc:	00000000 	andeq	r0, r0, r0
    10d0:	006d2800 	rsbeq	r2, sp, r0, lsl #16
    10d4:	006d3208 	rsbeq	r3, sp, r8, lsl #4
    10d8:	52000108 	andpl	r0, r0, #8, 2
    10dc:	08006d32 	stmdaeq	r0, {r1, r4, r5, r8, sl, fp, sp, lr}
    10e0:	08006f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, sp, lr}
    10e4:	60570001 	subsvs	r0, r7, r1
    10e8:	6808006f 	stmdavs	r8, {r0, r1, r2, r3, r5, r6}
    10ec:	0408006f 	streq	r0, [r8], #-111	; 0xffffff91
    10f0:	5201f300 	andpl	pc, r1, #0, 6
    10f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    10f8:	00000000 	andeq	r0, r0, r0
    10fc:	006d2800 	rsbeq	r2, sp, r0, lsl #16
    1100:	006d3a08 	rsbeq	r3, sp, r8, lsl #20
    1104:	53000108 	movwpl	r0, #264	; 0x108
    1108:	08006d3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, fp, sp, lr}
    110c:	08006f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, sp, lr}
    1110:	60580001 	subsvs	r0, r8, r1
    1114:	6808006f 	stmdavs	r8, {r0, r1, r2, r3, r5, r6}
    1118:	0408006f 	streq	r0, [r8], #-111	; 0xffffff91
    111c:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    1120:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1124:	00000000 	andeq	r0, r0, r0
    1128:	006d2800 	rsbeq	r2, sp, r0, lsl #16
    112c:	006eca08 	rsbeq	ip, lr, r8, lsl #20
    1130:	91000208 	tstls	r0, r8, lsl #4
    1134:	006ed200 	rsbeq	sp, lr, r0, lsl #4
    1138:	006f0008 	rsbeq	r0, pc, r8
    113c:	91000208 	tstls	r0, r8, lsl #4
	...
    1148:	006dc600 	rsbeq	ip, sp, r0, lsl #12
    114c:	006dd408 	rsbeq	sp, sp, r8, lsl #8
    1150:	53000108 	movwpl	r0, #264	; 0x108
    1154:	08006df6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sl, fp, sp, lr}
    1158:	08006e06 	stmdaeq	r0, {r1, r2, r9, sl, fp, sp, lr}
    115c:	2a530001 	bcs	14c1168 <_Min_Stack_Size+0x14c0f68>
    1160:	6a08006e 	bvs	201320 <_Min_Stack_Size+0x201120>
    1164:	0108006e 	tsteq	r8, lr, rrx
    1168:	6e6a5300 	cdpvs	3, 6, cr5, cr10, cr0, {0}
    116c:	6e7e0800 	cdpvs	8, 7, cr0, cr14, cr0, {0}
    1170:	00010800 	andeq	r0, r1, r0, lsl #16
    1174:	006e7e50 	rsbeq	r7, lr, r0, asr lr
    1178:	006e8608 	rsbeq	r8, lr, r8, lsl #12
    117c:	53000108 	movwpl	r0, #264	; 0x108
	...
    1188:	08006e2a 	stmdaeq	r0, {r1, r3, r5, r9, sl, fp, sp, lr}
    118c:	08006e40 	stmdaeq	r0, {r6, r9, sl, fp, sp, lr}
    1190:	9f400002 	svcls	0x00400002
    1194:	08006e40 	stmdaeq	r0, {r6, r9, sl, fp, sp, lr}
    1198:	08006e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, sp, lr}
    119c:	4e520001 	cdpmi	0, 5, cr0, cr2, cr1, {0}
    11a0:	8808006e 	stmdahi	r8, {r1, r2, r3, r5, r6}
    11a4:	0108006e 	tsteq	r8, lr, rrx
    11a8:	00005200 	andeq	r5, r0, r0, lsl #4
    11ac:	00000000 	andeq	r0, r0, r0
    11b0:	6f100000 	svcvs	0x00100000
    11b4:	6f120800 	svcvs	0x00120800
    11b8:	00010800 	andeq	r0, r1, r0, lsl #16
    11bc:	006f1250 	rsbeq	r1, pc, r0, asr r2	; <UNPREDICTABLE>
    11c0:	006f1408 	rsbeq	r1, pc, r8, lsl #8
    11c4:	70000308 	andvc	r0, r0, r8, lsl #6
    11c8:	6f1a9f7f 	svcvs	0x001a9f7f
    11cc:	6f1c0800 	svcvs	0x001c0800
    11d0:	00030800 	andeq	r0, r3, r0, lsl #16
    11d4:	009f7f70 	addseq	r7, pc, r0, ror pc	; <UNPREDICTABLE>
    11d8:	00000000 	andeq	r0, r0, r0
    11dc:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    11e0:	9608006d 	strls	r0, [r8], -sp, rrx
    11e4:	0108006d 	tsteq	r8, sp, rrx
    11e8:	6d965100 	ldfvss	f5, [r6]
    11ec:	6da20800 	stcvs	8, cr0, [r2]
    11f0:	00010800 	andeq	r0, r1, r0, lsl #16
    11f4:	006da255 	rsbeq	sl, sp, r5, asr r2
    11f8:	006e6608 	rsbeq	r6, lr, r8, lsl #12
    11fc:	51000108 	tstpl	r0, r8, lsl #2
    1200:	08006e66 	stmdaeq	r0, {r1, r2, r5, r6, r9, sl, fp, sp, lr}
    1204:	08006e76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, sl, fp, sp, lr}
    1208:	76550001 	ldrbvc	r0, [r5], -r1
    120c:	7e08006e 	cdpvc	0, 0, cr0, cr8, cr14, {3}
    1210:	0308006e 	movweq	r0, #32878	; 0x806e
    1214:	9f017500 	svcls	0x00017500
    1218:	08006e7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sl, fp, sp, lr}
    121c:	08006e80 	stmdaeq	r0, {r7, r9, sl, fp, sp, lr}
    1220:	80510001 	subshi	r0, r1, r1
    1224:	8a08006e 	bhi	2013e4 <_Min_Stack_Size+0x2011e4>
    1228:	0108006e 	tsteq	r8, lr, rrx
    122c:	6e8a5500 	cdpvs	5, 8, cr5, cr10, cr0, {0}
    1230:	6e9c0800 	cdpvs	8, 9, cr0, cr12, cr0, {0}
    1234:	00030800 	andeq	r0, r3, r0, lsl #16
    1238:	9c9f7f75 	ldcls	15, cr7, [pc], {117}	; 0x75
    123c:	a208006e 	andge	r0, r8, #110	; 0x6e
    1240:	0108006e 	tsteq	r8, lr, rrx
    1244:	6ea25500 	cdpvs	5, 10, cr5, cr2, cr0, {0}
    1248:	6ed60800 	cdpvs	8, 13, cr0, cr6, cr0, {0}
    124c:	00010800 	andeq	r0, r1, r0, lsl #16
    1250:	006ed651 	rsbeq	sp, lr, r1, asr r6
    1254:	006eda08 	rsbeq	sp, lr, r8, lsl #20
    1258:	74000408 	strvc	r0, [r0], #-1032	; 0xfffffbf8
    125c:	da9f00c3 	ble	fe7c1570 <BootRAM+0xd731d11>
    1260:	ee08006e 	cdp	0, 0, cr0, cr8, cr14, {3}
    1264:	0108006e 	tsteq	r8, lr, rrx
    1268:	6eee5500 	cdpvs	5, 14, cr5, cr14, cr0, {0}
    126c:	6ef20800 	cdpvs	8, 15, cr0, cr2, cr0, {0}
    1270:	00010800 	andeq	r0, r1, r0, lsl #16
    1274:	006ef251 	rsbeq	pc, lr, r1, asr r2	; <UNPREDICTABLE>
    1278:	006f1408 	rsbeq	r1, pc, r8, lsl #8
    127c:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    1280:	08006f1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, fp, sp, lr}
    1284:	08006f2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, sl, fp, sp, lr}
    1288:	3a550001 	bcc	1541294 <_Min_Stack_Size+0x1541094>
    128c:	3c08006f 	stccc	0, cr0, [r8], {111}	; 0x6f
    1290:	0108006f 	tsteq	r8, pc, rrx
    1294:	00005500 	andeq	r5, r0, r0, lsl #10
    1298:	00000000 	andeq	r0, r0, r0
    129c:	6d3e0000 	ldcvs	0, cr0, [lr, #-0]
    12a0:	6e100800 	cdpvs	8, 1, cr0, cr0, cr0, {0}
    12a4:	00060800 	andeq	r0, r6, r0, lsl #16
    12a8:	007a7703 	rsbseq	r7, sl, r3, lsl #14
    12ac:	6e109f08 	cdpvs	15, 1, cr9, cr0, cr8, {0}
    12b0:	6e480800 	cdpvs	8, 4, cr0, cr8, cr0, {0}
    12b4:	00010800 	andeq	r0, r1, r0, lsl #16
    12b8:	006e485e 	rsbeq	r4, lr, lr, asr r8
    12bc:	006e4e08 	rsbeq	r4, lr, r8, lsl #28
    12c0:	03000608 	movweq	r0, #1544	; 0x608
    12c4:	08007a77 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r9, fp, ip, sp, lr}
    12c8:	006e4e9f 	mlseq	lr, pc, lr, r4	; <UNPREDICTABLE>
    12cc:	006ea208 	rsbeq	sl, lr, r8, lsl #4
    12d0:	5e000108 	adfpls	f0, f0, #0.0
    12d4:	08006ea2 	stmdaeq	r0, {r1, r5, r7, r9, sl, fp, sp, lr}
    12d8:	08006f00 	stmdaeq	r0, {r8, r9, sl, fp, sp, lr}
    12dc:	77030006 	strvc	r0, [r3, -r6]
    12e0:	9f08007a 	svcls	0x0008007a
	...
    12ec:	08006ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, sp, lr}
    12f0:	08006ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp, sp, lr}
    12f4:	00500001 	subseq	r0, r0, r1
    12f8:	00000000 	andeq	r0, r0, r0
    12fc:	3c000000 	stccc	0, cr0, [r0], {-0}
    1300:	5a08006f 	bpl	2014c4 <_Min_Stack_Size+0x2012c4>
    1304:	0108006f 	tsteq	r8, pc, rrx
    1308:	00005500 	andeq	r5, r0, r0, lsl #10
    130c:	00000000 	andeq	r0, r0, r0
    1310:	6f680000 	svcvs	0x00680000
    1314:	6f720800 	svcvs	0x00720800
    1318:	00010800 	andeq	r0, r1, r0, lsl #16
    131c:	006f7250 	rsbeq	r7, pc, r0, asr r2	; <UNPREDICTABLE>
    1320:	006f8408 	rsbeq	r8, pc, r8, lsl #8
    1324:	55000108 	strpl	r0, [r0, #-264]	; 0xfffffef8
    1328:	08006f84 	stmdaeq	r0, {r2, r7, r8, r9, sl, fp, sp, lr}
    132c:	08006f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, sp, lr}
    1330:	01f30004 	mvnseq	r0, r4
    1334:	00009f50 	andeq	r9, r0, r0, asr pc
    1338:	00000000 	andeq	r0, r0, r0
    133c:	6f680000 	svcvs	0x00680000
    1340:	6f770800 	svcvs	0x00770800
    1344:	00010800 	andeq	r0, r1, r0, lsl #16
    1348:	006f7751 	rsbeq	r7, pc, r1, asr r7	; <UNPREDICTABLE>
    134c:	006f8808 	rsbeq	r8, pc, r8, lsl #16
    1350:	f3000408 	vshl.u8	d0, d8, d0
    1354:	009f5101 	addseq	r5, pc, r1, lsl #2
    1358:	00000000 	andeq	r0, r0, r0
    135c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    1360:	8e08006f 	cdphi	0, 0, cr0, cr8, cr15, {3}
    1364:	0108006f 	tsteq	r8, pc, rrx
    1368:	6f8e5000 	svcvs	0x008e5000
    136c:	6fa40800 	svcvs	0x00a40800
    1370:	00040800 	andeq	r0, r4, r0, lsl #16
    1374:	9f5001f3 	svcls	0x005001f3
	...
    1380:	08006f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, sp, lr}
    1384:	08006f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, sp, lr}
    1388:	8c510001 	mrrchi	0, 0, r0, r1, cr1
    138c:	a408006f 	strge	r0, [r8], #-111	; 0xffffff91
    1390:	0408006f 	streq	r0, [r8], #-111	; 0xffffff91
    1394:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1398:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    139c:	00000000 	andeq	r0, r0, r0
    13a0:	006f8800 	rsbeq	r8, pc, r0, lsl #16
    13a4:	006f8e08 	rsbeq	r8, pc, r8, lsl #28
    13a8:	52000108 	andpl	r0, r0, #8, 2
    13ac:	08006f92 	stmdaeq	r0, {r1, r4, r7, r8, r9, sl, fp, sp, lr}
    13b0:	08006f98 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, fp, sp, lr}
    13b4:	0070000c 	rsbseq	r0, r0, ip
    13b8:	5201f320 	andpl	pc, r1, #32, 6	; 0x80000000
    13bc:	5001f322 	andpl	pc, r1, r2, lsr #6
    13c0:	6f989f22 	svcvs	0x00989f22
    13c4:	6fa40800 	svcvs	0x00a40800
    13c8:	000c0800 	andeq	r0, ip, r0, lsl #16
    13cc:	f3200073 	vqadd.u32	q0, q0, <illegal reg q9.5>
    13d0:	f3225201 	vhsub.u32	d5, d2, d1
    13d4:	9f225001 	svcls	0x00225001
	...
    13e0:	08006f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, sp, lr}
    13e4:	08006f8e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, sl, fp, sp, lr}
    13e8:	92500001 	subsls	r0, r0, #1
    13ec:	9808006f 	stmdals	r8, {r0, r1, r2, r3, r5, r6}
    13f0:	0108006f 	tsteq	r8, pc, rrx
    13f4:	6f985000 	svcvs	0x00985000
    13f8:	6fa40800 	svcvs	0x00a40800
    13fc:	00010800 	andeq	r0, r1, r0, lsl #16
    1400:	00000053 	andeq	r0, r0, r3, asr r0
    1404:	00000000 	andeq	r0, r0, r0
    1408:	006fa400 	rsbeq	sl, pc, r0, lsl #8
    140c:	006fb808 	rsbeq	fp, pc, r8, lsl #16
    1410:	51000108 	tstpl	r0, r8, lsl #2
    1414:	08006fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, sp, lr}
    1418:	08006fda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, fp, sp, lr}
    141c:	01f30004 	mvnseq	r0, r4
    1420:	00009f51 	andeq	r9, r0, r1, asr pc
    1424:	00000000 	andeq	r0, r0, r0
    1428:	6fa40000 	svcvs	0x00a40000
    142c:	6fb00800 	svcvs	0x00b00800
    1430:	00010800 	andeq	r0, r1, r0, lsl #16
    1434:	006fb052 	rsbeq	fp, pc, r2, asr r0	; <UNPREDICTABLE>
    1438:	006fb208 	rsbeq	fp, pc, r8, lsl #4
    143c:	f3000408 	vshl.u8	d0, d8, d0
    1440:	b29f5201 	addslt	r5, pc, #268435456	; 0x10000000
    1444:	ba08006f 	blt	201608 <_Min_Stack_Size+0x201408>
    1448:	0108006f 	tsteq	r8, pc, rrx
    144c:	6fca5200 	svcvs	0x00ca5200
    1450:	6fda0800 	svcvs	0x00da0800
    1454:	000b0800 	andeq	r0, fp, r0, lsl #16
    1458:	71200071 			; <UNDEFINED> instruction: 0x71200071
    145c:	01f32200 	mvnseq	r2, r0, lsl #4
    1460:	009f2252 	addseq	r2, pc, r2, asr r2	; <UNPREDICTABLE>
    1464:	00000000 	andeq	r0, r0, r0
    1468:	a4000000 	strge	r0, [r0], #-0
    146c:	b608006f 	strlt	r0, [r8], -pc, rrx
    1470:	0108006f 	tsteq	r8, pc, rrx
    1474:	6fb65000 	svcvs	0x00b65000
    1478:	6fba0800 	svcvs	0x00ba0800
    147c:	00060800 	andeq	r0, r6, r0, lsl #16
    1480:	00720070 	rsbseq	r0, r2, r0, ror r0
    1484:	00009f22 	andeq	r9, r0, r2, lsr #30
    1488:	00000000 	andeq	r0, r0, r0
    148c:	6fa40000 	svcvs	0x00a40000
    1490:	6fb60800 	svcvs	0x00b60800
    1494:	00010800 	andeq	r0, r1, r0, lsl #16
    1498:	006fb651 	rsbeq	fp, pc, r1, asr r6	; <UNPREDICTABLE>
    149c:	006fc208 	rsbeq	ip, pc, r8, lsl #4
    14a0:	53000108 	movwpl	r0, #264	; 0x108
    14a4:	08006fc2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sl, fp, sp, lr}
    14a8:	08006fc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, fp, sp, lr}
    14ac:	01730003 	cmneq	r3, r3
    14b0:	006fc89f 	mlseq	pc, pc, r8, ip	; <UNPREDICTABLE>
    14b4:	006fca08 	rsbeq	ip, pc, r8, lsl #20
    14b8:	53000108 	movwpl	r0, #264	; 0x108
    14bc:	08006fca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, sl, fp, sp, lr}
    14c0:	08006fd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sl, fp, sp, lr}
    14c4:	d2510001 	subsle	r0, r1, #1
    14c8:	d808006f 	stmdale	r8, {r0, r1, r2, r3, r5, r6}
    14cc:	0308006f 	movweq	r0, #32879	; 0x806f
    14d0:	9f7f7100 	svcls	0x007f7100
    14d4:	08006fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp, sp, lr}
    14d8:	08006fda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, fp, sp, lr}
    14dc:	00510001 	subseq	r0, r1, r1
    14e0:	00000000 	andeq	r0, r0, r0
    14e4:	da000000 	ble	14ec <_Min_Stack_Size+0x12ec>
    14e8:	ed08006f 	stc	0, cr0, [r8, #-444]	; 0xfffffe44
    14ec:	0108006f 	tsteq	r8, pc, rrx
    14f0:	6fed5000 	svcvs	0x00ed5000
    14f4:	6fee0800 	svcvs	0x00ee0800
    14f8:	00040800 	andeq	r0, r4, r0, lsl #16
    14fc:	9f5001f3 	svcls	0x005001f3
    1500:	08006fee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, lr}
    1504:	08006ff3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
    1508:	f3500001 	vhadd.u16	d16, d0, d1
    150c:	f808006f 			; <UNDEFINED> instruction: 0xf808006f
    1510:	0108006f 	tsteq	r8, pc, rrx
    1514:	6ff85700 	svcvs	0x00f85700
    1518:	6ffb0800 	svcvs	0x00fb0800
    151c:	00010800 	andeq	r0, r1, r0, lsl #16
    1520:	006ffb50 	rsbeq	pc, pc, r0, asr fp	; <UNPREDICTABLE>
    1524:	00702608 	rsbseq	r2, r0, r8, lsl #12
    1528:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    1534:	08006fda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, fp, sp, lr}
    1538:	08006fe6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, fp, sp, lr}
    153c:	e6510001 	ldrb	r0, [r1], -r1
    1540:	ea08006f 	b	201704 <_Min_Stack_Size+0x201504>
    1544:	0108006f 	tsteq	r8, pc, rrx
    1548:	6fea5600 	svcvs	0x00ea5600
    154c:	6fee0800 	svcvs	0x00ee0800
    1550:	00040800 	andeq	r0, r4, r0, lsl #16
    1554:	9f5101f3 	svcls	0x005101f3
    1558:	08006fee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, lr}
    155c:	08006ff3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
    1560:	f3510001 	vhadd.u16	d16, d1, d1
    1564:	f808006f 			; <UNDEFINED> instruction: 0xf808006f
    1568:	0108006f 	tsteq	r8, pc, rrx
    156c:	6ff85600 	svcvs	0x00f85600
    1570:	6ffb0800 	svcvs	0x00fb0800
    1574:	00010800 	andeq	r0, r1, r0, lsl #16
    1578:	006ffb51 	rsbeq	pc, pc, r1, asr fp	; <UNPREDICTABLE>
    157c:	00702608 	rsbseq	r2, r0, r8, lsl #12
    1580:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    158c:	08006fda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, fp, sp, lr}
    1590:	08006fed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, lr}
    1594:	ed520001 	ldcl	0, cr0, [r2, #-4]
    1598:	ee08006f 	cdp	0, 0, cr0, cr8, cr15, {3}
    159c:	0408006f 	streq	r0, [r8], #-111	; 0xffffff91
    15a0:	5201f300 	andpl	pc, r1, #0, 6
    15a4:	006fee9f 	mlseq	pc, pc, lr, lr	; <UNPREDICTABLE>
    15a8:	006ff308 	rsbeq	pc, pc, r8, lsl #6
    15ac:	52000108 	andpl	r0, r0, #8, 2
    15b0:	08006ff3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
    15b4:	08006ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
    15b8:	f8550001 			; <UNDEFINED> instruction: 0xf8550001
    15bc:	fb08006f 	blx	201782 <_Min_Stack_Size+0x201582>
    15c0:	0108006f 	tsteq	r8, pc, rrx
    15c4:	6ffb5200 	svcvs	0x00fb5200
    15c8:	70260800 	eorvc	r0, r6, r0, lsl #16
    15cc:	00010800 	andeq	r0, r1, r0, lsl #16
    15d0:	00000055 	andeq	r0, r0, r5, asr r0
    15d4:	00000000 	andeq	r0, r0, r0
    15d8:	00700800 	rsbseq	r0, r0, r0, lsl #16
    15dc:	00701308 	rsbseq	r1, r0, r8, lsl #6
    15e0:	50000108 	andpl	r0, r0, r8, lsl #2
    15e4:	08007013 	stmdaeq	r0, {r0, r1, r4, ip, sp, lr}
    15e8:	0800701e 	stmdaeq	r0, {r1, r2, r3, r4, ip, sp, lr}
    15ec:	22540001 	subscs	r0, r4, #1
    15f0:	26080070 			; <UNDEFINED> instruction: 0x26080070
    15f4:	01080070 	tsteq	r8, r0, ror r0
    15f8:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    1608:	00010000 	andeq	r0, r1, r0
    160c:	00000050 	andeq	r0, r0, r0, asr r0
    1610:	00000000 	andeq	r0, r0, r0
    1614:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    1620:	00500001 	subseq	r0, r0, r1
    1624:	00000000 	andeq	r0, r0, r0
    1628:	04000000 	streq	r0, [r0], #-0
    162c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1630:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1640:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    164c:	00540001 	subseq	r0, r4, r1
    1650:	00000000 	andeq	r0, r0, r0
    1654:	01000000 	mrseq	r0, (UNDEF: 0)
    1658:	00005100 	andeq	r5, r0, r0, lsl #2
    165c:	00000000 	andeq	r0, r0, r0
    1660:	00040000 	andeq	r0, r4, r0
    1664:	9f5101f3 	svcls	0x005101f3
	...
    1678:	00500001 	subseq	r0, r0, r1
    167c:	00000000 	andeq	r0, r0, r0
    1680:	01000000 	mrseq	r0, (UNDEF: 0)
    1684:	00005400 	andeq	r5, r0, r0, lsl #8
    1688:	00000000 	andeq	r0, r0, r0
    168c:	00010000 	andeq	r0, r1, r0
    1690:	00000050 	andeq	r0, r0, r0, asr r0
    1694:	00000000 	andeq	r0, r0, r0
    1698:	f3000400 	vshl.u8	d0, d0, d0
    169c:	009f5001 	addseq	r5, pc, r1
    16a0:	00000000 	andeq	r0, r0, r0
    16a4:	01000000 	mrseq	r0, (UNDEF: 0)
    16a8:	00005400 	andeq	r5, r0, r0, lsl #8
    16ac:	00000000 	andeq	r0, r0, r0
    16b0:	00040000 	andeq	r0, r4, r0
    16b4:	9f5001f3 	svcls	0x005001f3
	...
    16c8:	00510001 	subseq	r0, r1, r1
	...
    16d8:	01000000 	mrseq	r0, (UNDEF: 0)
    16dc:	00005100 	andeq	r5, r0, r0, lsl #2
    16e0:	00000000 	andeq	r0, r0, r0
    16e4:	00010000 	andeq	r0, r1, r0
    16e8:	00000056 	andeq	r0, r0, r6, asr r0
    16ec:	00000000 	andeq	r0, r0, r0
    16f0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    16fc:	08007026 	stmdaeq	r0, {r1, r2, r5, ip, sp, lr}
    1700:	0800702a 	stmdaeq	r0, {r1, r3, r5, ip, sp, lr}
    1704:	2a500001 	bcs	1401710 <_Min_Stack_Size+0x1401510>
    1708:	3a080070 	bcc	2018d0 <_Min_Stack_Size+0x2016d0>
    170c:	04080070 	streq	r0, [r8], #-112	; 0xffffff90
    1710:	5001f300 	andpl	pc, r1, r0, lsl #6
    1714:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1718:	00000000 	andeq	r0, r0, r0
    171c:	00702600 	rsbseq	r2, r0, r0, lsl #12
    1720:	00703008 	rsbseq	r3, r0, r8
    1724:	51000108 	tstpl	r0, r8, lsl #2
    1728:	08007030 	stmdaeq	r0, {r4, r5, ip, sp, lr}
    172c:	0800703a 	stmdaeq	r0, {r1, r3, r4, r5, ip, sp, lr}
    1730:	01f30004 	mvnseq	r0, r4
    1734:	00009f51 	andeq	r9, r0, r1, asr pc
    1738:	00000000 	andeq	r0, r0, r0
    173c:	70260000 	eorvc	r0, r6, r0
    1740:	702c0800 	eorvc	r0, ip, r0, lsl #16
    1744:	00030800 	andeq	r0, r3, r0, lsl #16
    1748:	2c9f7c71 	ldccs	12, cr7, [pc], {113}	; 0x71
    174c:	30080070 	andcc	r0, r8, r0, ror r0
    1750:	08080070 	stmdaeq	r8, {r4, r5, r6}
    1754:	71007000 	mrsvc	r7, (UNDEF: 0)
    1758:	1c342200 	lfmne	f2, 4, [r4], #-0
    175c:	0070309f 			; <UNDEFINED> instruction: 0x0070309f
    1760:	00703608 	rsbseq	r3, r0, r8, lsl #12
    1764:	f3000908 	vmls.i8	d0, d0, d8
    1768:	00705101 	rsbseq	r5, r0, r1, lsl #2
    176c:	9f1c3422 	svcls	0x001c3422
    1770:	08007036 	stmdaeq	r0, {r1, r2, r4, r5, ip, sp, lr}
    1774:	0800703a 	stmdaeq	r0, {r1, r3, r4, r5, ip, sp, lr}
    1778:	01f3000d 	mvnseq	r0, sp
    177c:	5101f351 	tstpl	r1, r1, asr r3	; <UNPREDICTABLE>
    1780:	22061c34 	andcs	r1, r6, #52, 24	; 0x3400
    1784:	009f1c34 	addseq	r1, pc, r4, lsr ip	; <UNPREDICTABLE>
    1788:	00000000 	andeq	r0, r0, r0
    178c:	2a000000 	bcs	1794 <_Min_Stack_Size+0x1594>
    1790:	36080070 			; <UNDEFINED> instruction: 0x36080070
    1794:	01080070 	tsteq	r8, r0, ror r0
    1798:	70365000 	eorsvc	r5, r6, r0
    179c:	703a0800 	eorsvc	r0, sl, r0, lsl #16
    17a0:	00050800 	andeq	r0, r5, r0, lsl #16
    17a4:	345101f3 	ldrbcc	r0, [r1], #-499	; 0xfffffe0d
    17a8:	0000001c 	andeq	r0, r0, ip, lsl r0
    17ac:	00000000 	andeq	r0, r0, r0
    17b0:	00703c00 	rsbseq	r3, r0, r0, lsl #24
    17b4:	00704a08 	rsbseq	r4, r0, r8, lsl #20
    17b8:	50000108 	andpl	r0, r0, r8, lsl #2
    17bc:	0800704a 	stmdaeq	r0, {r1, r3, r6, ip, sp, lr}
    17c0:	08007058 	stmdaeq	r0, {r3, r4, r6, ip, sp, lr}
    17c4:	01f30004 	mvnseq	r0, r4
    17c8:	00009f50 	andeq	r9, r0, r0, asr pc
    17cc:	00000000 	andeq	r0, r0, r0
	...
