
/home/virusv/TDASAT-IOT/debug/sast_iot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ffc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000000ec  20000000  0800a10c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004218  200000ec  0800a1f8  000200ec  2**2
                  ALLOC
  4 ._user_heap_stack 00000200  20004304  0800a1f8  00024304  2**0
                  ALLOC
  5 .ARM.attributes 00000031  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
  6 .debug_info   00014996  00000000  00000000  0002011d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000045b7  00000000  00000000  00034ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00001470  00000000  00000000  00039070  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000011b8  00000000  00000000  0003a4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00007c28  00000000  00000000  0003b698  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000061f9  00000000  00000000  000432c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000002b  00000000  00000000  000494b9  2**0
                  CONTENTS, READONLY
 13 .debug_frame  0000513c  00000000  00000000  000494e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000023af  00000000  00000000  0004e620  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20005000 	andcs	r5, r0, r0
 8000004:	0800962d 	stmdaeq	r0, {r0, r2, r3, r5, r9, sl, ip, pc}
 8000008:	080067a5 	stmdaeq	r0, {r0, r2, r5, r7, r8, r9, sl, sp, lr}
 800000c:	080067b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, sp, lr}
 8000010:	080067b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, r9, sl, sp, lr}
 8000014:	080067c1 	stmdaeq	r0, {r0, r6, r7, r8, r9, sl, sp, lr}
 8000018:	080067c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, r9, sl, sp, lr}
	...
 800002c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8000030:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	080094d1 	stmdaeq	r0, {r0, r4, r6, r7, sl, ip, pc}
 800003c:	08009519 	stmdaeq	r0, {r0, r3, r4, r8, sl, ip, pc}
 8000040:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 8000044:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 8000048:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 800004c:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 8000050:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 8000054:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 8000058:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 800005c:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 8000060:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 8000064:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 8000068:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 800006c:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 8000070:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 8000074:	080067dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, r9, sl, sp, lr}
 8000078:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 800007c:	080067d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, r9, sl, sp, lr}
 8000080:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 8000084:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 8000088:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 800008c:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 8000090:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 8000094:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 8000098:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 800009c:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 80000a0:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 80000a4:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 80000a8:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 80000ac:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 80000b0:	080067e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, r9, sl, sp, lr}
 80000b4:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 80000b8:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 80000bc:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 80000c0:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 80000c4:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 80000c8:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 80000cc:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 80000d0:	0800684d 	stmdaeq	r0, {r0, r2, r3, r6, fp, sp, lr}
 80000d4:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 80000d8:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 80000dc:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 80000e0:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 80000e4:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
 80000e8:	08009671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, pc}
	...
 8000108:	f108f85f 			; <UNDEFINED> instruction: 0xf108f85f

Disassembly of section .text:

08000110 <memcpy>:
 8000110:	4684      	mov	ip, r0
 8000112:	ea41 0300 	orr.w	r3, r1, r0
 8000116:	f013 0303 	ands.w	r3, r3, #3
 800011a:	d149      	bne.n	80001b0 <memcpy+0xa0>
 800011c:	3a40      	subs	r2, #64	; 0x40
 800011e:	d323      	bcc.n	8000168 <memcpy+0x58>
 8000120:	680b      	ldr	r3, [r1, #0]
 8000122:	6003      	str	r3, [r0, #0]
 8000124:	684b      	ldr	r3, [r1, #4]
 8000126:	6043      	str	r3, [r0, #4]
 8000128:	688b      	ldr	r3, [r1, #8]
 800012a:	6083      	str	r3, [r0, #8]
 800012c:	68cb      	ldr	r3, [r1, #12]
 800012e:	60c3      	str	r3, [r0, #12]
 8000130:	690b      	ldr	r3, [r1, #16]
 8000132:	6103      	str	r3, [r0, #16]
 8000134:	694b      	ldr	r3, [r1, #20]
 8000136:	6143      	str	r3, [r0, #20]
 8000138:	698b      	ldr	r3, [r1, #24]
 800013a:	6183      	str	r3, [r0, #24]
 800013c:	69cb      	ldr	r3, [r1, #28]
 800013e:	61c3      	str	r3, [r0, #28]
 8000140:	6a0b      	ldr	r3, [r1, #32]
 8000142:	6203      	str	r3, [r0, #32]
 8000144:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000146:	6243      	str	r3, [r0, #36]	; 0x24
 8000148:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800014a:	6283      	str	r3, [r0, #40]	; 0x28
 800014c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800014e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000150:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000152:	6303      	str	r3, [r0, #48]	; 0x30
 8000154:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8000156:	6343      	str	r3, [r0, #52]	; 0x34
 8000158:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800015a:	6383      	str	r3, [r0, #56]	; 0x38
 800015c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800015e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000160:	3040      	adds	r0, #64	; 0x40
 8000162:	3140      	adds	r1, #64	; 0x40
 8000164:	3a40      	subs	r2, #64	; 0x40
 8000166:	d2db      	bcs.n	8000120 <memcpy+0x10>
 8000168:	3230      	adds	r2, #48	; 0x30
 800016a:	d30b      	bcc.n	8000184 <memcpy+0x74>
 800016c:	680b      	ldr	r3, [r1, #0]
 800016e:	6003      	str	r3, [r0, #0]
 8000170:	684b      	ldr	r3, [r1, #4]
 8000172:	6043      	str	r3, [r0, #4]
 8000174:	688b      	ldr	r3, [r1, #8]
 8000176:	6083      	str	r3, [r0, #8]
 8000178:	68cb      	ldr	r3, [r1, #12]
 800017a:	60c3      	str	r3, [r0, #12]
 800017c:	3010      	adds	r0, #16
 800017e:	3110      	adds	r1, #16
 8000180:	3a10      	subs	r2, #16
 8000182:	d2f3      	bcs.n	800016c <memcpy+0x5c>
 8000184:	320c      	adds	r2, #12
 8000186:	d305      	bcc.n	8000194 <memcpy+0x84>
 8000188:	f851 3b04 	ldr.w	r3, [r1], #4
 800018c:	f840 3b04 	str.w	r3, [r0], #4
 8000190:	3a04      	subs	r2, #4
 8000192:	d2f9      	bcs.n	8000188 <memcpy+0x78>
 8000194:	3204      	adds	r2, #4
 8000196:	d008      	beq.n	80001aa <memcpy+0x9a>
 8000198:	07d2      	lsls	r2, r2, #31
 800019a:	bf1c      	itt	ne
 800019c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80001a0:	f800 3b01 	strbne.w	r3, [r0], #1
 80001a4:	d301      	bcc.n	80001aa <memcpy+0x9a>
 80001a6:	880b      	ldrh	r3, [r1, #0]
 80001a8:	8003      	strh	r3, [r0, #0]
 80001aa:	4660      	mov	r0, ip
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	2a08      	cmp	r2, #8
 80001b2:	d313      	bcc.n	80001dc <memcpy+0xcc>
 80001b4:	078b      	lsls	r3, r1, #30
 80001b6:	d0b1      	beq.n	800011c <memcpy+0xc>
 80001b8:	f010 0303 	ands.w	r3, r0, #3
 80001bc:	d0ae      	beq.n	800011c <memcpy+0xc>
 80001be:	f1c3 0304 	rsb	r3, r3, #4
 80001c2:	1ad2      	subs	r2, r2, r3
 80001c4:	07db      	lsls	r3, r3, #31
 80001c6:	bf1c      	itt	ne
 80001c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80001cc:	f800 3b01 	strbne.w	r3, [r0], #1
 80001d0:	d3a4      	bcc.n	800011c <memcpy+0xc>
 80001d2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80001d6:	f820 3b02 	strh.w	r3, [r0], #2
 80001da:	e79f      	b.n	800011c <memcpy+0xc>
 80001dc:	3a04      	subs	r2, #4
 80001de:	d3d9      	bcc.n	8000194 <memcpy+0x84>
 80001e0:	3a01      	subs	r2, #1
 80001e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e6:	f800 3b01 	strb.w	r3, [r0], #1
 80001ea:	d2f9      	bcs.n	80001e0 <memcpy+0xd0>
 80001ec:	780b      	ldrb	r3, [r1, #0]
 80001ee:	7003      	strb	r3, [r0, #0]
 80001f0:	784b      	ldrb	r3, [r1, #1]
 80001f2:	7043      	strb	r3, [r0, #1]
 80001f4:	788b      	ldrb	r3, [r1, #2]
 80001f6:	7083      	strb	r3, [r0, #2]
 80001f8:	4660      	mov	r0, ip
 80001fa:	4770      	bx	lr

080001fc <memset>:
 80001fc:	b470      	push	{r4, r5, r6}
 80001fe:	0784      	lsls	r4, r0, #30
 8000200:	d046      	beq.n	8000290 <memset+0x94>
 8000202:	1e54      	subs	r4, r2, #1
 8000204:	2a00      	cmp	r2, #0
 8000206:	d041      	beq.n	800028c <memset+0x90>
 8000208:	b2cd      	uxtb	r5, r1
 800020a:	4603      	mov	r3, r0
 800020c:	e002      	b.n	8000214 <memset+0x18>
 800020e:	1e62      	subs	r2, r4, #1
 8000210:	b3e4      	cbz	r4, 800028c <memset+0x90>
 8000212:	4614      	mov	r4, r2
 8000214:	f803 5b01 	strb.w	r5, [r3], #1
 8000218:	079a      	lsls	r2, r3, #30
 800021a:	d1f8      	bne.n	800020e <memset+0x12>
 800021c:	2c03      	cmp	r4, #3
 800021e:	d92e      	bls.n	800027e <memset+0x82>
 8000220:	b2cd      	uxtb	r5, r1
 8000222:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000226:	2c0f      	cmp	r4, #15
 8000228:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800022c:	d919      	bls.n	8000262 <memset+0x66>
 800022e:	4626      	mov	r6, r4
 8000230:	f103 0210 	add.w	r2, r3, #16
 8000234:	3e10      	subs	r6, #16
 8000236:	2e0f      	cmp	r6, #15
 8000238:	f842 5c10 	str.w	r5, [r2, #-16]
 800023c:	f842 5c0c 	str.w	r5, [r2, #-12]
 8000240:	f842 5c08 	str.w	r5, [r2, #-8]
 8000244:	f842 5c04 	str.w	r5, [r2, #-4]
 8000248:	f102 0210 	add.w	r2, r2, #16
 800024c:	d8f2      	bhi.n	8000234 <memset+0x38>
 800024e:	f1a4 0210 	sub.w	r2, r4, #16
 8000252:	f022 020f 	bic.w	r2, r2, #15
 8000256:	f004 040f 	and.w	r4, r4, #15
 800025a:	3210      	adds	r2, #16
 800025c:	2c03      	cmp	r4, #3
 800025e:	4413      	add	r3, r2
 8000260:	d90d      	bls.n	800027e <memset+0x82>
 8000262:	461e      	mov	r6, r3
 8000264:	4622      	mov	r2, r4
 8000266:	3a04      	subs	r2, #4
 8000268:	2a03      	cmp	r2, #3
 800026a:	f846 5b04 	str.w	r5, [r6], #4
 800026e:	d8fa      	bhi.n	8000266 <memset+0x6a>
 8000270:	1f22      	subs	r2, r4, #4
 8000272:	f022 0203 	bic.w	r2, r2, #3
 8000276:	3204      	adds	r2, #4
 8000278:	4413      	add	r3, r2
 800027a:	f004 0403 	and.w	r4, r4, #3
 800027e:	b12c      	cbz	r4, 800028c <memset+0x90>
 8000280:	b2c9      	uxtb	r1, r1
 8000282:	441c      	add	r4, r3
 8000284:	f803 1b01 	strb.w	r1, [r3], #1
 8000288:	42a3      	cmp	r3, r4
 800028a:	d1fb      	bne.n	8000284 <memset+0x88>
 800028c:	bc70      	pop	{r4, r5, r6}
 800028e:	4770      	bx	lr
 8000290:	4614      	mov	r4, r2
 8000292:	4603      	mov	r3, r0
 8000294:	e7c2      	b.n	800021c <memset+0x20>
 8000296:	bf00      	nop

08000298 <srand>:
 8000298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800029c:	4b16      	ldr	r3, [pc, #88]	; (80002f8 <srand+0x60>)
 800029e:	4605      	mov	r5, r0
 80002a0:	681c      	ldr	r4, [r3, #0]
 80002a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80002a4:	b123      	cbz	r3, 80002b0 <srand+0x18>
 80002a6:	2200      	movs	r2, #0
 80002a8:	611d      	str	r5, [r3, #16]
 80002aa:	615a      	str	r2, [r3, #20]
 80002ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80002b0:	2018      	movs	r0, #24
 80002b2:	f000 fa7b 	bl	80007ac <malloc>
 80002b6:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 80002ba:	f243 310e 	movw	r1, #13070	; 0x330e
 80002be:	4603      	mov	r3, r0
 80002c0:	f241 2e34 	movw	lr, #4660	; 0x1234
 80002c4:	f24e 676d 	movw	r7, #58989	; 0xe66d
 80002c8:	f64d 66ec 	movw	r6, #57068	; 0xdeec
 80002cc:	63a0      	str	r0, [r4, #56]	; 0x38
 80002ce:	8042      	strh	r2, [r0, #2]
 80002d0:	220b      	movs	r2, #11
 80002d2:	8001      	strh	r1, [r0, #0]
 80002d4:	8182      	strh	r2, [r0, #12]
 80002d6:	f04f 0801 	mov.w	r8, #1
 80002da:	f04f 0900 	mov.w	r9, #0
 80002de:	2105      	movs	r1, #5
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c0 8904 	strd	r8, r9, [r0, #16]
 80002e6:	f8a0 e004 	strh.w	lr, [r0, #4]
 80002ea:	80c7      	strh	r7, [r0, #6]
 80002ec:	8106      	strh	r6, [r0, #8]
 80002ee:	8141      	strh	r1, [r0, #10]
 80002f0:	611d      	str	r5, [r3, #16]
 80002f2:	615a      	str	r2, [r3, #20]
 80002f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80002f8:	20000000 	andcs	r0, r0, r0

080002fc <rand>:
 80002fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000300:	4b23      	ldr	r3, [pc, #140]	; (8000390 <rand+0x94>)
 8000302:	681c      	ldr	r4, [r3, #0]
 8000304:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000306:	b199      	cbz	r1, 8000330 <rand+0x34>
 8000308:	690b      	ldr	r3, [r1, #16]
 800030a:	4c22      	ldr	r4, [pc, #136]	; (8000394 <rand+0x98>)
 800030c:	6948      	ldr	r0, [r1, #20]
 800030e:	fb04 f403 	mul.w	r4, r4, r3
 8000312:	4a21      	ldr	r2, [pc, #132]	; (8000398 <rand+0x9c>)
 8000314:	fb02 4000 	mla	r0, r2, r0, r4
 8000318:	fba3 2302 	umull	r2, r3, r3, r2
 800031c:	3201      	adds	r2, #1
 800031e:	4403      	add	r3, r0
 8000320:	f143 0300 	adc.w	r3, r3, #0
 8000324:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8000328:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800032c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000330:	2018      	movs	r0, #24
 8000332:	f000 fa3b 	bl	80007ac <malloc>
 8000336:	a314      	add	r3, pc, #80	; (adr r3, 8000388 <rand+0x8c>)
 8000338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800033c:	4605      	mov	r5, r0
 800033e:	f64a 36cd 	movw	r6, #43981	; 0xabcd
 8000342:	f243 3c0e 	movw	ip, #13070	; 0x330e
 8000346:	f241 2e34 	movw	lr, #4660	; 0x1234
 800034a:	f24e 606d 	movw	r0, #58989	; 0xe66d
 800034e:	f64d 67ec 	movw	r7, #57068	; 0xdeec
 8000352:	4629      	mov	r1, r5
 8000354:	63a5      	str	r5, [r4, #56]	; 0x38
 8000356:	f04f 0801 	mov.w	r8, #1
 800035a:	806e      	strh	r6, [r5, #2]
 800035c:	f04f 0900 	mov.w	r9, #0
 8000360:	2605      	movs	r6, #5
 8000362:	240b      	movs	r4, #11
 8000364:	80e8      	strh	r0, [r5, #6]
 8000366:	e9c5 8904 	strd	r8, r9, [r5, #16]
 800036a:	f8a5 c000 	strh.w	ip, [r5]
 800036e:	f8a5 e004 	strh.w	lr, [r5, #4]
 8000372:	812f      	strh	r7, [r5, #8]
 8000374:	816e      	strh	r6, [r5, #10]
 8000376:	81ac      	strh	r4, [r5, #12]
 8000378:	4806      	ldr	r0, [pc, #24]	; (8000394 <rand+0x98>)
 800037a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800037e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000382:	bf00      	nop
 8000384:	f3af 8000 	nop.w
 8000388:	4c957f2e 	ldcmi	15, cr7, [r5], {46}	; 0x2e
 800038c:	5851f42d 	ldmdapl	r1, {r0, r2, r3, r5, sl, ip, sp, lr, pc}^
 8000390:	20000000 	andcs	r0, r0, r0
 8000394:	5851f42d 	ldmdapl	r1, {r0, r2, r3, r5, sl, ip, sp, lr, pc}^
 8000398:	4c957f2d 	ldcmi	15, cr7, [r5], {45}	; 0x2d

0800039c <_sniprintf_r>:
 800039c:	b408      	push	{r3}
 800039e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	b09c      	sub	sp, #112	; 0x70
 80003a4:	db3b      	blt.n	800041e <_sniprintf_r+0x82>
 80003a6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80003aa:	4614      	mov	r4, r2
 80003ac:	4605      	mov	r5, r0
 80003ae:	9102      	str	r1, [sp, #8]
 80003b0:	9106      	str	r1, [sp, #24]
 80003b2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80003b6:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80003ba:	ae22      	add	r6, sp, #136	; 0x88
 80003bc:	d014      	beq.n	80003e8 <_sniprintf_r+0x4c>
 80003be:	1e54      	subs	r4, r2, #1
 80003c0:	4633      	mov	r3, r6
 80003c2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80003c4:	a902      	add	r1, sp, #8
 80003c6:	9404      	str	r4, [sp, #16]
 80003c8:	9407      	str	r4, [sp, #28]
 80003ca:	f8ad 7016 	strh.w	r7, [sp, #22]
 80003ce:	9601      	str	r6, [sp, #4]
 80003d0:	f000 fb84 	bl	8000adc <_svfiprintf_r>
 80003d4:	1c42      	adds	r2, r0, #1
 80003d6:	db18      	blt.n	800040a <_sniprintf_r+0x6e>
 80003d8:	9b02      	ldr	r3, [sp, #8]
 80003da:	2200      	movs	r2, #0
 80003dc:	701a      	strb	r2, [r3, #0]
 80003de:	b01c      	add	sp, #112	; 0x70
 80003e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80003e4:	b001      	add	sp, #4
 80003e6:	4770      	bx	lr
 80003e8:	4633      	mov	r3, r6
 80003ea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80003ec:	a902      	add	r1, sp, #8
 80003ee:	9404      	str	r4, [sp, #16]
 80003f0:	9407      	str	r4, [sp, #28]
 80003f2:	f8ad 7016 	strh.w	r7, [sp, #22]
 80003f6:	9601      	str	r6, [sp, #4]
 80003f8:	f000 fb70 	bl	8000adc <_svfiprintf_r>
 80003fc:	1c43      	adds	r3, r0, #1
 80003fe:	db07      	blt.n	8000410 <_sniprintf_r+0x74>
 8000400:	b01c      	add	sp, #112	; 0x70
 8000402:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000406:	b001      	add	sp, #4
 8000408:	4770      	bx	lr
 800040a:	238b      	movs	r3, #139	; 0x8b
 800040c:	602b      	str	r3, [r5, #0]
 800040e:	e7e3      	b.n	80003d8 <_sniprintf_r+0x3c>
 8000410:	238b      	movs	r3, #139	; 0x8b
 8000412:	602b      	str	r3, [r5, #0]
 8000414:	b01c      	add	sp, #112	; 0x70
 8000416:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800041a:	b001      	add	sp, #4
 800041c:	4770      	bx	lr
 800041e:	228b      	movs	r2, #139	; 0x8b
 8000420:	6002      	str	r2, [r0, #0]
 8000422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000426:	e7eb      	b.n	8000400 <_sniprintf_r+0x64>

08000428 <sniprintf>:
 8000428:	b40c      	push	{r2, r3}
 800042a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042c:	4b23      	ldr	r3, [pc, #140]	; (80004bc <sniprintf+0x94>)
 800042e:	2900      	cmp	r1, #0
 8000430:	b09d      	sub	sp, #116	; 0x74
 8000432:	681d      	ldr	r5, [r3, #0]
 8000434:	db3c      	blt.n	80004b0 <sniprintf+0x88>
 8000436:	f44f 7302 	mov.w	r3, #520	; 0x208
 800043a:	460c      	mov	r4, r1
 800043c:	9002      	str	r0, [sp, #8]
 800043e:	9006      	str	r0, [sp, #24]
 8000440:	f8ad 3014 	strh.w	r3, [sp, #20]
 8000444:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8000448:	ae23      	add	r6, sp, #140	; 0x8c
 800044a:	d015      	beq.n	8000478 <sniprintf+0x50>
 800044c:	1e4c      	subs	r4, r1, #1
 800044e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8000450:	4633      	mov	r3, r6
 8000452:	a902      	add	r1, sp, #8
 8000454:	4628      	mov	r0, r5
 8000456:	9404      	str	r4, [sp, #16]
 8000458:	9407      	str	r4, [sp, #28]
 800045a:	f8ad 7016 	strh.w	r7, [sp, #22]
 800045e:	9601      	str	r6, [sp, #4]
 8000460:	f000 fb3c 	bl	8000adc <_svfiprintf_r>
 8000464:	1c42      	adds	r2, r0, #1
 8000466:	db19      	blt.n	800049c <sniprintf+0x74>
 8000468:	9b02      	ldr	r3, [sp, #8]
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
 800046e:	b01d      	add	sp, #116	; 0x74
 8000470:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000474:	b002      	add	sp, #8
 8000476:	4770      	bx	lr
 8000478:	4633      	mov	r3, r6
 800047a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800047c:	a902      	add	r1, sp, #8
 800047e:	4628      	mov	r0, r5
 8000480:	9404      	str	r4, [sp, #16]
 8000482:	9407      	str	r4, [sp, #28]
 8000484:	f8ad 7016 	strh.w	r7, [sp, #22]
 8000488:	9601      	str	r6, [sp, #4]
 800048a:	f000 fb27 	bl	8000adc <_svfiprintf_r>
 800048e:	1c43      	adds	r3, r0, #1
 8000490:	db07      	blt.n	80004a2 <sniprintf+0x7a>
 8000492:	b01d      	add	sp, #116	; 0x74
 8000494:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000498:	b002      	add	sp, #8
 800049a:	4770      	bx	lr
 800049c:	238b      	movs	r3, #139	; 0x8b
 800049e:	602b      	str	r3, [r5, #0]
 80004a0:	e7e2      	b.n	8000468 <sniprintf+0x40>
 80004a2:	238b      	movs	r3, #139	; 0x8b
 80004a4:	602b      	str	r3, [r5, #0]
 80004a6:	b01d      	add	sp, #116	; 0x74
 80004a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80004ac:	b002      	add	sp, #8
 80004ae:	4770      	bx	lr
 80004b0:	238b      	movs	r3, #139	; 0x8b
 80004b2:	602b      	str	r3, [r5, #0]
 80004b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004b8:	e7eb      	b.n	8000492 <sniprintf+0x6a>
 80004ba:	bf00      	nop
 80004bc:	20000000 	andcs	r0, r0, r0

080004c0 <strchr>:
 80004c0:	b470      	push	{r4, r5, r6}
 80004c2:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
 80004c6:	d034      	beq.n	8000532 <strchr+0x72>
 80004c8:	0785      	lsls	r5, r0, #30
 80004ca:	d00f      	beq.n	80004ec <strchr+0x2c>
 80004cc:	7803      	ldrb	r3, [r0, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d05a      	beq.n	8000588 <strchr+0xc8>
 80004d2:	429c      	cmp	r4, r3
 80004d4:	d02b      	beq.n	800052e <strchr+0x6e>
 80004d6:	1c43      	adds	r3, r0, #1
 80004d8:	e005      	b.n	80004e6 <strchr+0x26>
 80004da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004de:	2a00      	cmp	r2, #0
 80004e0:	d04f      	beq.n	8000582 <strchr+0xc2>
 80004e2:	4294      	cmp	r4, r2
 80004e4:	d023      	beq.n	800052e <strchr+0x6e>
 80004e6:	079a      	lsls	r2, r3, #30
 80004e8:	4618      	mov	r0, r3
 80004ea:	d1f6      	bne.n	80004da <strchr+0x1a>
 80004ec:	020e      	lsls	r6, r1, #8
 80004ee:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80004f2:	4326      	orrs	r6, r4
 80004f4:	6803      	ldr	r3, [r0, #0]
 80004f6:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 80004fa:	e001      	b.n	8000500 <strchr+0x40>
 80004fc:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8000500:	ea86 0503 	eor.w	r5, r6, r3
 8000504:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 8000508:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
 800050c:	ea22 0205 	bic.w	r2, r2, r5
 8000510:	ea21 0303 	bic.w	r3, r1, r3
 8000514:	4313      	orrs	r3, r2
 8000516:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800051a:	d0ef      	beq.n	80004fc <strchr+0x3c>
 800051c:	7803      	ldrb	r3, [r0, #0]
 800051e:	b923      	cbnz	r3, 800052a <strchr+0x6a>
 8000520:	e032      	b.n	8000588 <strchr+0xc8>
 8000522:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8000526:	2b00      	cmp	r3, #0
 8000528:	d02e      	beq.n	8000588 <strchr+0xc8>
 800052a:	429c      	cmp	r4, r3
 800052c:	d1f9      	bne.n	8000522 <strchr+0x62>
 800052e:	bc70      	pop	{r4, r5, r6}
 8000530:	4770      	bx	lr
 8000532:	0784      	lsls	r4, r0, #30
 8000534:	d00b      	beq.n	800054e <strchr+0x8e>
 8000536:	7803      	ldrb	r3, [r0, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d0f8      	beq.n	800052e <strchr+0x6e>
 800053c:	1c43      	adds	r3, r0, #1
 800053e:	e003      	b.n	8000548 <strchr+0x88>
 8000540:	7802      	ldrb	r2, [r0, #0]
 8000542:	3301      	adds	r3, #1
 8000544:	2a00      	cmp	r2, #0
 8000546:	d0f2      	beq.n	800052e <strchr+0x6e>
 8000548:	0799      	lsls	r1, r3, #30
 800054a:	4618      	mov	r0, r3
 800054c:	d1f8      	bne.n	8000540 <strchr+0x80>
 800054e:	6802      	ldr	r2, [r0, #0]
 8000550:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8000554:	ea23 0302 	bic.w	r3, r3, r2
 8000558:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800055c:	d108      	bne.n	8000570 <strchr+0xb0>
 800055e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8000562:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8000566:	ea23 0302 	bic.w	r3, r3, r2
 800056a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800056e:	d0f6      	beq.n	800055e <strchr+0x9e>
 8000570:	7803      	ldrb	r3, [r0, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0db      	beq.n	800052e <strchr+0x6e>
 8000576:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1fb      	bne.n	8000576 <strchr+0xb6>
 800057e:	bc70      	pop	{r4, r5, r6}
 8000580:	4770      	bx	lr
 8000582:	4610      	mov	r0, r2
 8000584:	bc70      	pop	{r4, r5, r6}
 8000586:	4770      	bx	lr
 8000588:	4618      	mov	r0, r3
 800058a:	bc70      	pop	{r4, r5, r6}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <strcpy>:
 8000590:	ea80 0201 	eor.w	r2, r0, r1
 8000594:	4684      	mov	ip, r0
 8000596:	f012 0f03 	tst.w	r2, #3
 800059a:	d14f      	bne.n	800063c <strcpy+0xac>
 800059c:	f011 0f03 	tst.w	r1, #3
 80005a0:	d132      	bne.n	8000608 <strcpy+0x78>
 80005a2:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80005a6:	f011 0f04 	tst.w	r1, #4
 80005aa:	f851 3b04 	ldr.w	r3, [r1], #4
 80005ae:	d00b      	beq.n	80005c8 <strcpy+0x38>
 80005b0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80005b4:	439a      	bics	r2, r3
 80005b6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80005ba:	bf04      	itt	eq
 80005bc:	f84c 3b04 	streq.w	r3, [ip], #4
 80005c0:	f851 3b04 	ldreq.w	r3, [r1], #4
 80005c4:	d116      	bne.n	80005f4 <strcpy+0x64>
 80005c6:	bf00      	nop
 80005c8:	f851 4b04 	ldr.w	r4, [r1], #4
 80005cc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80005d0:	439a      	bics	r2, r3
 80005d2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80005d6:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80005da:	d10b      	bne.n	80005f4 <strcpy+0x64>
 80005dc:	f84c 3b04 	str.w	r3, [ip], #4
 80005e0:	43a2      	bics	r2, r4
 80005e2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80005e6:	bf04      	itt	eq
 80005e8:	f851 3b04 	ldreq.w	r3, [r1], #4
 80005ec:	f84c 4b04 	streq.w	r4, [ip], #4
 80005f0:	d0ea      	beq.n	80005c8 <strcpy+0x38>
 80005f2:	4623      	mov	r3, r4
 80005f4:	f80c 3b01 	strb.w	r3, [ip], #1
 80005f8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80005fc:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000600:	d1f8      	bne.n	80005f4 <strcpy+0x64>
 8000602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	f011 0f01 	tst.w	r1, #1
 800060c:	d006      	beq.n	800061c <strcpy+0x8c>
 800060e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000612:	f80c 2b01 	strb.w	r2, [ip], #1
 8000616:	2a00      	cmp	r2, #0
 8000618:	bf08      	it	eq
 800061a:	4770      	bxeq	lr
 800061c:	f011 0f02 	tst.w	r1, #2
 8000620:	d0bf      	beq.n	80005a2 <strcpy+0x12>
 8000622:	f831 2b02 	ldrh.w	r2, [r1], #2
 8000626:	f012 0fff 	tst.w	r2, #255	; 0xff
 800062a:	bf16      	itet	ne
 800062c:	f82c 2b02 	strhne.w	r2, [ip], #2
 8000630:	f88c 2000 	strbeq.w	r2, [ip]
 8000634:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8000638:	d1b3      	bne.n	80005a2 <strcpy+0x12>
 800063a:	4770      	bx	lr
 800063c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000640:	f80c 2b01 	strb.w	r2, [ip], #1
 8000644:	2a00      	cmp	r2, #0
 8000646:	d1f9      	bne.n	800063c <strcpy+0xac>
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <strlen>:
 800064c:	f020 0103 	bic.w	r1, r0, #3
 8000650:	f010 0003 	ands.w	r0, r0, #3
 8000654:	f1c0 0000 	rsb	r0, r0, #0
 8000658:	f851 3b04 	ldr.w	r3, [r1], #4
 800065c:	f100 0c04 	add.w	ip, r0, #4
 8000660:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000664:	f06f 0200 	mvn.w	r2, #0
 8000668:	bf1c      	itt	ne
 800066a:	fa22 f20c 	lsrne.w	r2, r2, ip
 800066e:	4313      	orrne	r3, r2
 8000670:	f04f 0c01 	mov.w	ip, #1
 8000674:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8000678:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800067c:	eba3 020c 	sub.w	r2, r3, ip
 8000680:	ea22 0203 	bic.w	r2, r2, r3
 8000684:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8000688:	bf04      	itt	eq
 800068a:	f851 3b04 	ldreq.w	r3, [r1], #4
 800068e:	3004      	addeq	r0, #4
 8000690:	d0f4      	beq.n	800067c <strlen+0x30>
 8000692:	f1c2 0100 	rsb	r1, r2, #0
 8000696:	ea02 0201 	and.w	r2, r2, r1
 800069a:	fab2 f282 	clz	r2, r2
 800069e:	f1c2 021f 	rsb	r2, r2, #31
 80006a2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80006a6:	4770      	bx	lr

080006a8 <strncmp>:
 80006a8:	2a00      	cmp	r2, #0
 80006aa:	d03f      	beq.n	800072c <strncmp+0x84>
 80006ac:	ea40 0301 	orr.w	r3, r0, r1
 80006b0:	f013 0303 	ands.w	r3, r3, #3
 80006b4:	b4f0      	push	{r4, r5, r6, r7}
 80006b6:	d125      	bne.n	8000704 <strncmp+0x5c>
 80006b8:	2a03      	cmp	r2, #3
 80006ba:	d923      	bls.n	8000704 <strncmp+0x5c>
 80006bc:	6804      	ldr	r4, [r0, #0]
 80006be:	680d      	ldr	r5, [r1, #0]
 80006c0:	42ac      	cmp	r4, r5
 80006c2:	d11f      	bne.n	8000704 <strncmp+0x5c>
 80006c4:	3a04      	subs	r2, #4
 80006c6:	d033      	beq.n	8000730 <strncmp+0x88>
 80006c8:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 80006cc:	ea25 0404 	bic.w	r4, r5, r4
 80006d0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80006d4:	d12f      	bne.n	8000736 <strncmp+0x8e>
 80006d6:	1d07      	adds	r7, r0, #4
 80006d8:	1d0d      	adds	r5, r1, #4
 80006da:	e00d      	b.n	80006f8 <strncmp+0x50>
 80006dc:	f857 3b04 	ldr.w	r3, [r7], #4
 80006e0:	680e      	ldr	r6, [r1, #0]
 80006e2:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 80006e6:	42b3      	cmp	r3, r6
 80006e8:	ea24 0403 	bic.w	r4, r4, r3
 80006ec:	d10a      	bne.n	8000704 <strncmp+0x5c>
 80006ee:	3a04      	subs	r2, #4
 80006f0:	d01e      	beq.n	8000730 <strncmp+0x88>
 80006f2:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80006f6:	d121      	bne.n	800073c <strncmp+0x94>
 80006f8:	2a03      	cmp	r2, #3
 80006fa:	4629      	mov	r1, r5
 80006fc:	4638      	mov	r0, r7
 80006fe:	f105 0504 	add.w	r5, r5, #4
 8000702:	d8eb      	bhi.n	80006dc <strncmp+0x34>
 8000704:	7803      	ldrb	r3, [r0, #0]
 8000706:	780c      	ldrb	r4, [r1, #0]
 8000708:	3a01      	subs	r2, #1
 800070a:	429c      	cmp	r4, r3
 800070c:	d10b      	bne.n	8000726 <strncmp+0x7e>
 800070e:	b17a      	cbz	r2, 8000730 <strncmp+0x88>
 8000710:	b914      	cbnz	r4, 8000718 <strncmp+0x70>
 8000712:	e015      	b.n	8000740 <strncmp+0x98>
 8000714:	b162      	cbz	r2, 8000730 <strncmp+0x88>
 8000716:	b173      	cbz	r3, 8000736 <strncmp+0x8e>
 8000718:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800071c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8000720:	3a01      	subs	r2, #1
 8000722:	42a3      	cmp	r3, r4
 8000724:	d0f6      	beq.n	8000714 <strncmp+0x6c>
 8000726:	1b18      	subs	r0, r3, r4
 8000728:	bcf0      	pop	{r4, r5, r6, r7}
 800072a:	4770      	bx	lr
 800072c:	4610      	mov	r0, r2
 800072e:	4770      	bx	lr
 8000730:	4610      	mov	r0, r2
 8000732:	bcf0      	pop	{r4, r5, r6, r7}
 8000734:	4770      	bx	lr
 8000736:	4618      	mov	r0, r3
 8000738:	bcf0      	pop	{r4, r5, r6, r7}
 800073a:	4770      	bx	lr
 800073c:	2000      	movs	r0, #0
 800073e:	e7f3      	b.n	8000728 <strncmp+0x80>
 8000740:	4620      	mov	r0, r4
 8000742:	e7f1      	b.n	8000728 <strncmp+0x80>

08000744 <strncpy>:
 8000744:	ea40 0301 	orr.w	r3, r0, r1
 8000748:	079b      	lsls	r3, r3, #30
 800074a:	b470      	push	{r4, r5, r6}
 800074c:	d12b      	bne.n	80007a6 <strncpy+0x62>
 800074e:	2a03      	cmp	r2, #3
 8000750:	d929      	bls.n	80007a6 <strncpy+0x62>
 8000752:	460c      	mov	r4, r1
 8000754:	4603      	mov	r3, r0
 8000756:	4621      	mov	r1, r4
 8000758:	f854 6b04 	ldr.w	r6, [r4], #4
 800075c:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 8000760:	ea25 0506 	bic.w	r5, r5, r6
 8000764:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8000768:	d106      	bne.n	8000778 <strncpy+0x34>
 800076a:	3a04      	subs	r2, #4
 800076c:	2a03      	cmp	r2, #3
 800076e:	f843 6b04 	str.w	r6, [r3], #4
 8000772:	4621      	mov	r1, r4
 8000774:	d8ef      	bhi.n	8000756 <strncpy+0x12>
 8000776:	b1a2      	cbz	r2, 80007a2 <strncpy+0x5e>
 8000778:	780c      	ldrb	r4, [r1, #0]
 800077a:	3a01      	subs	r2, #1
 800077c:	701c      	strb	r4, [r3, #0]
 800077e:	3101      	adds	r1, #1
 8000780:	3301      	adds	r3, #1
 8000782:	b13c      	cbz	r4, 8000794 <strncpy+0x50>
 8000784:	b16a      	cbz	r2, 80007a2 <strncpy+0x5e>
 8000786:	f811 4b01 	ldrb.w	r4, [r1], #1
 800078a:	3a01      	subs	r2, #1
 800078c:	f803 4b01 	strb.w	r4, [r3], #1
 8000790:	2c00      	cmp	r4, #0
 8000792:	d1f7      	bne.n	8000784 <strncpy+0x40>
 8000794:	b12a      	cbz	r2, 80007a2 <strncpy+0x5e>
 8000796:	441a      	add	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	f803 1b01 	strb.w	r1, [r3], #1
 800079e:	429a      	cmp	r2, r3
 80007a0:	d1fb      	bne.n	800079a <strncpy+0x56>
 80007a2:	bc70      	pop	{r4, r5, r6}
 80007a4:	4770      	bx	lr
 80007a6:	4603      	mov	r3, r0
 80007a8:	e7e5      	b.n	8000776 <strncpy+0x32>
 80007aa:	bf00      	nop

080007ac <malloc>:
 80007ac:	4b02      	ldr	r3, [pc, #8]	; (80007b8 <malloc+0xc>)
 80007ae:	4601      	mov	r1, r0
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	f000 b851 	b.w	8000858 <_malloc_r>
 80007b6:	bf00      	nop
 80007b8:	20000000 	andcs	r0, r0, r0

080007bc <free>:
 80007bc:	4b02      	ldr	r3, [pc, #8]	; (80007c8 <free+0xc>)
 80007be:	4601      	mov	r1, r0
 80007c0:	6818      	ldr	r0, [r3, #0]
 80007c2:	f000 b803 	b.w	80007cc <_free_r>
 80007c6:	bf00      	nop
 80007c8:	20000000 	andcs	r0, r0, r0

080007cc <_free_r>:
 80007cc:	b430      	push	{r4, r5}
 80007ce:	b181      	cbz	r1, 80007f2 <_free_r+0x26>
 80007d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80007d4:	3904      	subs	r1, #4
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	bfb8      	it	lt
 80007da:	18c9      	addlt	r1, r1, r3
 80007dc:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <_free_r+0x88>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	b12a      	cbz	r2, 80007ee <_free_r+0x22>
 80007e2:	428a      	cmp	r2, r1
 80007e4:	d90a      	bls.n	80007fc <_free_r+0x30>
 80007e6:	6808      	ldr	r0, [r1, #0]
 80007e8:	180c      	adds	r4, r1, r0
 80007ea:	42a2      	cmp	r2, r4
 80007ec:	d025      	beq.n	800083a <_free_r+0x6e>
 80007ee:	604a      	str	r2, [r1, #4]
 80007f0:	6019      	str	r1, [r3, #0]
 80007f2:	bc30      	pop	{r4, r5}
 80007f4:	4770      	bx	lr
 80007f6:	428b      	cmp	r3, r1
 80007f8:	d803      	bhi.n	8000802 <_free_r+0x36>
 80007fa:	461a      	mov	r2, r3
 80007fc:	6853      	ldr	r3, [r2, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1f9      	bne.n	80007f6 <_free_r+0x2a>
 8000802:	6814      	ldr	r4, [r2, #0]
 8000804:	1915      	adds	r5, r2, r4
 8000806:	428d      	cmp	r5, r1
 8000808:	d00c      	beq.n	8000824 <_free_r+0x58>
 800080a:	d807      	bhi.n	800081c <_free_r+0x50>
 800080c:	6808      	ldr	r0, [r1, #0]
 800080e:	180c      	adds	r4, r1, r0
 8000810:	429c      	cmp	r4, r3
 8000812:	d018      	beq.n	8000846 <_free_r+0x7a>
 8000814:	bc30      	pop	{r4, r5}
 8000816:	604b      	str	r3, [r1, #4]
 8000818:	6051      	str	r1, [r2, #4]
 800081a:	4770      	bx	lr
 800081c:	230c      	movs	r3, #12
 800081e:	6003      	str	r3, [r0, #0]
 8000820:	bc30      	pop	{r4, r5}
 8000822:	4770      	bx	lr
 8000824:	6809      	ldr	r1, [r1, #0]
 8000826:	440c      	add	r4, r1
 8000828:	1911      	adds	r1, r2, r4
 800082a:	4299      	cmp	r1, r3
 800082c:	6014      	str	r4, [r2, #0]
 800082e:	d1e0      	bne.n	80007f2 <_free_r+0x26>
 8000830:	cb0a      	ldmia	r3, {r1, r3}
 8000832:	440c      	add	r4, r1
 8000834:	6014      	str	r4, [r2, #0]
 8000836:	6053      	str	r3, [r2, #4]
 8000838:	e7db      	b.n	80007f2 <_free_r+0x26>
 800083a:	6814      	ldr	r4, [r2, #0]
 800083c:	6852      	ldr	r2, [r2, #4]
 800083e:	4420      	add	r0, r4
 8000840:	e881 0005 	stmia.w	r1, {r0, r2}
 8000844:	e7d4      	b.n	80007f0 <_free_r+0x24>
 8000846:	681c      	ldr	r4, [r3, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	4420      	add	r0, r4
 800084c:	e881 0009 	stmia.w	r1, {r0, r3}
 8000850:	6051      	str	r1, [r2, #4]
 8000852:	e7ce      	b.n	80007f2 <_free_r+0x26>
 8000854:	200000ec 	andcs	r0, r0, ip, ror #1

08000858 <_malloc_r>:
 8000858:	b570      	push	{r4, r5, r6, lr}
 800085a:	1ccd      	adds	r5, r1, #3
 800085c:	f025 0503 	bic.w	r5, r5, #3
 8000860:	3508      	adds	r5, #8
 8000862:	2d0c      	cmp	r5, #12
 8000864:	bf38      	it	cc
 8000866:	250c      	movcc	r5, #12
 8000868:	2d00      	cmp	r5, #0
 800086a:	4606      	mov	r6, r0
 800086c:	db3b      	blt.n	80008e6 <_malloc_r+0x8e>
 800086e:	42a9      	cmp	r1, r5
 8000870:	d839      	bhi.n	80008e6 <_malloc_r+0x8e>
 8000872:	4927      	ldr	r1, [pc, #156]	; (8000910 <_malloc_r+0xb8>)
 8000874:	680a      	ldr	r2, [r1, #0]
 8000876:	b152      	cbz	r2, 800088e <_malloc_r+0x36>
 8000878:	6813      	ldr	r3, [r2, #0]
 800087a:	1b5b      	subs	r3, r3, r5
 800087c:	d404      	bmi.n	8000888 <_malloc_r+0x30>
 800087e:	e036      	b.n	80008ee <_malloc_r+0x96>
 8000880:	6823      	ldr	r3, [r4, #0]
 8000882:	1b5b      	subs	r3, r3, r5
 8000884:	d51a      	bpl.n	80008bc <_malloc_r+0x64>
 8000886:	4622      	mov	r2, r4
 8000888:	6854      	ldr	r4, [r2, #4]
 800088a:	2c00      	cmp	r4, #0
 800088c:	d1f8      	bne.n	8000880 <_malloc_r+0x28>
 800088e:	6849      	ldr	r1, [r1, #4]
 8000890:	4c1f      	ldr	r4, [pc, #124]	; (8000910 <_malloc_r+0xb8>)
 8000892:	2900      	cmp	r1, #0
 8000894:	d036      	beq.n	8000904 <_malloc_r+0xac>
 8000896:	4629      	mov	r1, r5
 8000898:	4630      	mov	r0, r6
 800089a:	f000 fc2b 	bl	80010f4 <_sbrk_r>
 800089e:	1c43      	adds	r3, r0, #1
 80008a0:	d021      	beq.n	80008e6 <_malloc_r+0x8e>
 80008a2:	1cc4      	adds	r4, r0, #3
 80008a4:	f024 0403 	bic.w	r4, r4, #3
 80008a8:	42a0      	cmp	r0, r4
 80008aa:	d005      	beq.n	80008b8 <_malloc_r+0x60>
 80008ac:	1a21      	subs	r1, r4, r0
 80008ae:	4630      	mov	r0, r6
 80008b0:	f000 fc20 	bl	80010f4 <_sbrk_r>
 80008b4:	3001      	adds	r0, #1
 80008b6:	d016      	beq.n	80008e6 <_malloc_r+0x8e>
 80008b8:	6025      	str	r5, [r4, #0]
 80008ba:	e004      	b.n	80008c6 <_malloc_r+0x6e>
 80008bc:	2b0b      	cmp	r3, #11
 80008be:	d90d      	bls.n	80008dc <_malloc_r+0x84>
 80008c0:	6023      	str	r3, [r4, #0]
 80008c2:	441c      	add	r4, r3
 80008c4:	6025      	str	r5, [r4, #0]
 80008c6:	f104 000b 	add.w	r0, r4, #11
 80008ca:	f020 0007 	bic.w	r0, r0, #7
 80008ce:	1d23      	adds	r3, r4, #4
 80008d0:	1ac3      	subs	r3, r0, r3
 80008d2:	d002      	beq.n	80008da <_malloc_r+0x82>
 80008d4:	425a      	negs	r2, r3
 80008d6:	50e2      	str	r2, [r4, r3]
 80008d8:	bd70      	pop	{r4, r5, r6, pc}
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	4294      	cmp	r4, r2
 80008de:	d00e      	beq.n	80008fe <_malloc_r+0xa6>
 80008e0:	6863      	ldr	r3, [r4, #4]
 80008e2:	6053      	str	r3, [r2, #4]
 80008e4:	e7ef      	b.n	80008c6 <_malloc_r+0x6e>
 80008e6:	230c      	movs	r3, #12
 80008e8:	6033      	str	r3, [r6, #0]
 80008ea:	2000      	movs	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	2b0b      	cmp	r3, #11
 80008f0:	d803      	bhi.n	80008fa <_malloc_r+0xa2>
 80008f2:	4614      	mov	r4, r2
 80008f4:	6853      	ldr	r3, [r2, #4]
 80008f6:	600b      	str	r3, [r1, #0]
 80008f8:	e7e5      	b.n	80008c6 <_malloc_r+0x6e>
 80008fa:	4614      	mov	r4, r2
 80008fc:	e7e0      	b.n	80008c0 <_malloc_r+0x68>
 80008fe:	4613      	mov	r3, r2
 8000900:	4614      	mov	r4, r2
 8000902:	e7f8      	b.n	80008f6 <_malloc_r+0x9e>
 8000904:	4630      	mov	r0, r6
 8000906:	f000 fbf5 	bl	80010f4 <_sbrk_r>
 800090a:	6060      	str	r0, [r4, #4]
 800090c:	e7c3      	b.n	8000896 <_malloc_r+0x3e>
 800090e:	bf00      	nop
 8000910:	200000ec 	andcs	r0, r0, ip, ror #1

08000914 <__ssputs_r>:
 8000914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000918:	688e      	ldr	r6, [r1, #8]
 800091a:	460c      	mov	r4, r1
 800091c:	429e      	cmp	r6, r3
 800091e:	461f      	mov	r7, r3
 8000920:	4690      	mov	r8, r2
 8000922:	d812      	bhi.n	800094a <__ssputs_r+0x36>
 8000924:	898b      	ldrh	r3, [r1, #12]
 8000926:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800092a:	d110      	bne.n	800094e <__ssputs_r+0x3a>
 800092c:	4635      	mov	r5, r6
 800092e:	6820      	ldr	r0, [r4, #0]
 8000930:	462a      	mov	r2, r5
 8000932:	4641      	mov	r1, r8
 8000934:	f000 fc36 	bl	80011a4 <memmove>
 8000938:	68a3      	ldr	r3, [r4, #8]
 800093a:	6822      	ldr	r2, [r4, #0]
 800093c:	1b9e      	subs	r6, r3, r6
 800093e:	4415      	add	r5, r2
 8000940:	60a6      	str	r6, [r4, #8]
 8000942:	6025      	str	r5, [r4, #0]
 8000944:	2000      	movs	r0, #0
 8000946:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800094a:	461e      	mov	r6, r3
 800094c:	e7ee      	b.n	800092c <__ssputs_r+0x18>
 800094e:	694d      	ldr	r5, [r1, #20]
 8000950:	6822      	ldr	r2, [r4, #0]
 8000952:	6909      	ldr	r1, [r1, #16]
 8000954:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000958:	ebc1 0a02 	rsb	sl, r1, r2
 800095c:	4681      	mov	r9, r0
 800095e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000962:	f10a 0001 	add.w	r0, sl, #1
 8000966:	106d      	asrs	r5, r5, #1
 8000968:	4438      	add	r0, r7
 800096a:	42a8      	cmp	r0, r5
 800096c:	462a      	mov	r2, r5
 800096e:	bf84      	itt	hi
 8000970:	4605      	movhi	r5, r0
 8000972:	462a      	movhi	r2, r5
 8000974:	055b      	lsls	r3, r3, #21
 8000976:	d510      	bpl.n	800099a <__ssputs_r+0x86>
 8000978:	4611      	mov	r1, r2
 800097a:	4648      	mov	r0, r9
 800097c:	f7ff ff6c 	bl	8000858 <_malloc_r>
 8000980:	4683      	mov	fp, r0
 8000982:	b1f8      	cbz	r0, 80009c4 <__ssputs_r+0xb0>
 8000984:	4652      	mov	r2, sl
 8000986:	6921      	ldr	r1, [r4, #16]
 8000988:	f7ff fbc2 	bl	8000110 <memcpy>
 800098c:	89a3      	ldrh	r3, [r4, #12]
 800098e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000996:	81a3      	strh	r3, [r4, #12]
 8000998:	e004      	b.n	80009a4 <__ssputs_r+0x90>
 800099a:	4648      	mov	r0, r9
 800099c:	f000 fc66 	bl	800126c <_realloc_r>
 80009a0:	4683      	mov	fp, r0
 80009a2:	b158      	cbz	r0, 80009bc <__ssputs_r+0xa8>
 80009a4:	ebca 0305 	rsb	r3, sl, r5
 80009a8:	eb0b 000a 	add.w	r0, fp, sl
 80009ac:	6165      	str	r5, [r4, #20]
 80009ae:	463e      	mov	r6, r7
 80009b0:	f8c4 b010 	str.w	fp, [r4, #16]
 80009b4:	6020      	str	r0, [r4, #0]
 80009b6:	60a3      	str	r3, [r4, #8]
 80009b8:	463d      	mov	r5, r7
 80009ba:	e7b9      	b.n	8000930 <__ssputs_r+0x1c>
 80009bc:	6921      	ldr	r1, [r4, #16]
 80009be:	4648      	mov	r0, r9
 80009c0:	f7ff ff04 	bl	80007cc <_free_r>
 80009c4:	230c      	movs	r3, #12
 80009c6:	f8c9 3000 	str.w	r3, [r9]
 80009ca:	89a3      	ldrh	r3, [r4, #12]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d4:	81a3      	strh	r3, [r4, #12]
 80009d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009da:	bf00      	nop

080009dc <__ssprint_r>:
 80009dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009e0:	6893      	ldr	r3, [r2, #8]
 80009e2:	b083      	sub	sp, #12
 80009e4:	4690      	mov	r8, r2
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d072      	beq.n	8000ad0 <__ssprint_r+0xf4>
 80009ea:	f04f 0900 	mov.w	r9, #0
 80009ee:	460d      	mov	r5, r1
 80009f0:	464c      	mov	r4, r9
 80009f2:	4683      	mov	fp, r0
 80009f4:	6816      	ldr	r6, [r2, #0]
 80009f6:	6808      	ldr	r0, [r1, #0]
 80009f8:	688b      	ldr	r3, [r1, #8]
 80009fa:	2c00      	cmp	r4, #0
 80009fc:	d045      	beq.n	8000a8a <__ssprint_r+0xae>
 80009fe:	429c      	cmp	r4, r3
 8000a00:	461f      	mov	r7, r3
 8000a02:	469a      	mov	sl, r3
 8000a04:	d346      	bcc.n	8000a94 <__ssprint_r+0xb8>
 8000a06:	89ab      	ldrh	r3, [r5, #12]
 8000a08:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8000a0c:	d02d      	beq.n	8000a6a <__ssprint_r+0x8e>
 8000a0e:	696f      	ldr	r7, [r5, #20]
 8000a10:	6929      	ldr	r1, [r5, #16]
 8000a12:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8000a16:	ebc1 0a00 	rsb	sl, r1, r0
 8000a1a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8000a1e:	1c60      	adds	r0, r4, #1
 8000a20:	107f      	asrs	r7, r7, #1
 8000a22:	4450      	add	r0, sl
 8000a24:	42b8      	cmp	r0, r7
 8000a26:	463a      	mov	r2, r7
 8000a28:	bf84      	itt	hi
 8000a2a:	4607      	movhi	r7, r0
 8000a2c:	463a      	movhi	r2, r7
 8000a2e:	055b      	lsls	r3, r3, #21
 8000a30:	d533      	bpl.n	8000a9a <__ssprint_r+0xbe>
 8000a32:	4611      	mov	r1, r2
 8000a34:	4658      	mov	r0, fp
 8000a36:	f7ff ff0f 	bl	8000858 <_malloc_r>
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	d037      	beq.n	8000aae <__ssprint_r+0xd2>
 8000a3e:	4652      	mov	r2, sl
 8000a40:	6929      	ldr	r1, [r5, #16]
 8000a42:	9001      	str	r0, [sp, #4]
 8000a44:	f7ff fb64 	bl	8000110 <memcpy>
 8000a48:	89aa      	ldrh	r2, [r5, #12]
 8000a4a:	9b01      	ldr	r3, [sp, #4]
 8000a4c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8000a50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a54:	81aa      	strh	r2, [r5, #12]
 8000a56:	ebca 0207 	rsb	r2, sl, r7
 8000a5a:	eb03 000a 	add.w	r0, r3, sl
 8000a5e:	616f      	str	r7, [r5, #20]
 8000a60:	46a2      	mov	sl, r4
 8000a62:	4627      	mov	r7, r4
 8000a64:	612b      	str	r3, [r5, #16]
 8000a66:	6028      	str	r0, [r5, #0]
 8000a68:	60aa      	str	r2, [r5, #8]
 8000a6a:	4652      	mov	r2, sl
 8000a6c:	4649      	mov	r1, r9
 8000a6e:	f000 fb99 	bl	80011a4 <memmove>
 8000a72:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8000a76:	68ab      	ldr	r3, [r5, #8]
 8000a78:	6828      	ldr	r0, [r5, #0]
 8000a7a:	1bdb      	subs	r3, r3, r7
 8000a7c:	4450      	add	r0, sl
 8000a7e:	1b14      	subs	r4, r2, r4
 8000a80:	60ab      	str	r3, [r5, #8]
 8000a82:	6028      	str	r0, [r5, #0]
 8000a84:	f8c8 4008 	str.w	r4, [r8, #8]
 8000a88:	b314      	cbz	r4, 8000ad0 <__ssprint_r+0xf4>
 8000a8a:	f8d6 9000 	ldr.w	r9, [r6]
 8000a8e:	6874      	ldr	r4, [r6, #4]
 8000a90:	3608      	adds	r6, #8
 8000a92:	e7b2      	b.n	80009fa <__ssprint_r+0x1e>
 8000a94:	4627      	mov	r7, r4
 8000a96:	46a2      	mov	sl, r4
 8000a98:	e7e7      	b.n	8000a6a <__ssprint_r+0x8e>
 8000a9a:	4658      	mov	r0, fp
 8000a9c:	f000 fbe6 	bl	800126c <_realloc_r>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	d1d7      	bne.n	8000a56 <__ssprint_r+0x7a>
 8000aa6:	6929      	ldr	r1, [r5, #16]
 8000aa8:	4658      	mov	r0, fp
 8000aaa:	f7ff fe8f 	bl	80007cc <_free_r>
 8000aae:	230c      	movs	r3, #12
 8000ab0:	f8cb 3000 	str.w	r3, [fp]
 8000ab4:	89ab      	ldrh	r3, [r5, #12]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	81ab      	strh	r3, [r5, #12]
 8000ac2:	f8c8 2008 	str.w	r2, [r8, #8]
 8000ac6:	f8c8 2004 	str.w	r2, [r8, #4]
 8000aca:	b003      	add	sp, #12
 8000acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f8c8 0004 	str.w	r0, [r8, #4]
 8000ad6:	b003      	add	sp, #12
 8000ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000adc <_svfiprintf_r>:
 8000adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae0:	460f      	mov	r7, r1
 8000ae2:	8989      	ldrh	r1, [r1, #12]
 8000ae4:	b09d      	sub	sp, #116	; 0x74
 8000ae6:	060c      	lsls	r4, r1, #24
 8000ae8:	4692      	mov	sl, r2
 8000aea:	9303      	str	r3, [sp, #12]
 8000aec:	4680      	mov	r8, r0
 8000aee:	d503      	bpl.n	8000af8 <_svfiprintf_r+0x1c>
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	f000 80f7 	beq.w	8000ce6 <_svfiprintf_r+0x20a>
 8000af8:	2330      	movs	r3, #48	; 0x30
 8000afa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000afe:	f89a 3000 	ldrb.w	r3, [sl]
 8000b02:	2100      	movs	r1, #0
 8000b04:	2220      	movs	r2, #32
 8000b06:	4d7f      	ldr	r5, [pc, #508]	; (8000d04 <_svfiprintf_r+0x228>)
 8000b08:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 8000d08 <_svfiprintf_r+0x22c>
 8000b0c:	9109      	str	r1, [sp, #36]	; 0x24
 8000b0e:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f000 808c 	beq.w	8000c30 <_svfiprintf_r+0x154>
 8000b18:	2b25      	cmp	r3, #37	; 0x25
 8000b1a:	4654      	mov	r4, sl
 8000b1c:	d103      	bne.n	8000b26 <_svfiprintf_r+0x4a>
 8000b1e:	e017      	b.n	8000b50 <_svfiprintf_r+0x74>
 8000b20:	2b25      	cmp	r3, #37	; 0x25
 8000b22:	f000 808e 	beq.w	8000c42 <_svfiprintf_r+0x166>
 8000b26:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1f8      	bne.n	8000b20 <_svfiprintf_r+0x44>
 8000b2e:	ebb4 0b0a 	subs.w	fp, r4, sl
 8000b32:	d07d      	beq.n	8000c30 <_svfiprintf_r+0x154>
 8000b34:	4652      	mov	r2, sl
 8000b36:	465b      	mov	r3, fp
 8000b38:	4639      	mov	r1, r7
 8000b3a:	4640      	mov	r0, r8
 8000b3c:	f7ff feea 	bl	8000914 <__ssputs_r>
 8000b40:	3001      	adds	r0, #1
 8000b42:	d075      	beq.n	8000c30 <_svfiprintf_r+0x154>
 8000b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b46:	7822      	ldrb	r2, [r4, #0]
 8000b48:	445b      	add	r3, fp
 8000b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8000b4c:	2a00      	cmp	r2, #0
 8000b4e:	d06f      	beq.n	8000c30 <_svfiprintf_r+0x154>
 8000b50:	2200      	movs	r2, #0
 8000b52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b56:	1c63      	adds	r3, r4, #1
 8000b58:	9204      	str	r2, [sp, #16]
 8000b5a:	9207      	str	r2, [sp, #28]
 8000b5c:	9206      	str	r2, [sp, #24]
 8000b5e:	f88d 2053 	strb.w	r2, [sp, #83]	; 0x53
 8000b62:	921a      	str	r2, [sp, #104]	; 0x68
 8000b64:	9105      	str	r1, [sp, #20]
 8000b66:	2401      	movs	r4, #1
 8000b68:	e005      	b.n	8000b76 <_svfiprintf_r+0x9a>
 8000b6a:	9a04      	ldr	r2, [sp, #16]
 8000b6c:	1b40      	subs	r0, r0, r5
 8000b6e:	fa04 f000 	lsl.w	r0, r4, r0
 8000b72:	4310      	orrs	r0, r2
 8000b74:	9004      	str	r0, [sp, #16]
 8000b76:	7819      	ldrb	r1, [r3, #0]
 8000b78:	2205      	movs	r2, #5
 8000b7a:	4862      	ldr	r0, [pc, #392]	; (8000d04 <_svfiprintf_r+0x228>)
 8000b7c:	469a      	mov	sl, r3
 8000b7e:	f000 facb 	bl	8001118 <memchr>
 8000b82:	f10a 0301 	add.w	r3, sl, #1
 8000b86:	2800      	cmp	r0, #0
 8000b88:	d1ef      	bne.n	8000b6a <_svfiprintf_r+0x8e>
 8000b8a:	9b04      	ldr	r3, [sp, #16]
 8000b8c:	06d8      	lsls	r0, r3, #27
 8000b8e:	bf44      	itt	mi
 8000b90:	2220      	movmi	r2, #32
 8000b92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000b96:	0719      	lsls	r1, r3, #28
 8000b98:	f89a 1000 	ldrb.w	r1, [sl]
 8000b9c:	bf44      	itt	mi
 8000b9e:	222b      	movmi	r2, #43	; 0x2b
 8000ba0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000ba4:	292a      	cmp	r1, #42	; 0x2a
 8000ba6:	d06f      	beq.n	8000c88 <_svfiprintf_r+0x1ac>
 8000ba8:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000bac:	2a09      	cmp	r2, #9
 8000bae:	d80b      	bhi.n	8000bc8 <_svfiprintf_r+0xec>
 8000bb0:	9b07      	ldr	r3, [sp, #28]
 8000bb2:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8000bb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000bba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000bbe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000bc2:	2a09      	cmp	r2, #9
 8000bc4:	d9f5      	bls.n	8000bb2 <_svfiprintf_r+0xd6>
 8000bc6:	9307      	str	r3, [sp, #28]
 8000bc8:	292e      	cmp	r1, #46	; 0x2e
 8000bca:	d045      	beq.n	8000c58 <_svfiprintf_r+0x17c>
 8000bcc:	2203      	movs	r2, #3
 8000bce:	484e      	ldr	r0, [pc, #312]	; (8000d08 <_svfiprintf_r+0x22c>)
 8000bd0:	f000 faa2 	bl	8001118 <memchr>
 8000bd4:	b150      	cbz	r0, 8000bec <_svfiprintf_r+0x110>
 8000bd6:	9904      	ldr	r1, [sp, #16]
 8000bd8:	ebc9 0000 	rsb	r0, r9, r0
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	fa02 f000 	lsl.w	r0, r2, r0
 8000be2:	ea41 0300 	orr.w	r3, r1, r0
 8000be6:	f10a 0a01 	add.w	sl, sl, #1
 8000bea:	9304      	str	r3, [sp, #16]
 8000bec:	f89a 3000 	ldrb.w	r3, [sl]
 8000bf0:	2206      	movs	r2, #6
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4845      	ldr	r0, [pc, #276]	; (8000d0c <_svfiprintf_r+0x230>)
 8000bf6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8000bfa:	f10a 0a01 	add.w	sl, sl, #1
 8000bfe:	f000 fa8b 	bl	8001118 <memchr>
 8000c02:	2800      	cmp	r0, #0
 8000c04:	d065      	beq.n	8000cd2 <_svfiprintf_r+0x1f6>
 8000c06:	4b42      	ldr	r3, [pc, #264]	; (8000d10 <_svfiprintf_r+0x234>)
 8000c08:	b1fb      	cbz	r3, 8000c4a <_svfiprintf_r+0x16e>
 8000c0a:	ab03      	add	r3, sp, #12
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	463a      	mov	r2, r7
 8000c10:	4b40      	ldr	r3, [pc, #256]	; (8000d14 <_svfiprintf_r+0x238>)
 8000c12:	a904      	add	r1, sp, #16
 8000c14:	4640      	mov	r0, r8
 8000c16:	f3af 8000 	nop.w
 8000c1a:	4606      	mov	r6, r0
 8000c1c:	1c72      	adds	r2, r6, #1
 8000c1e:	d007      	beq.n	8000c30 <_svfiprintf_r+0x154>
 8000c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c22:	4433      	add	r3, r6
 8000c24:	9309      	str	r3, [sp, #36]	; 0x24
 8000c26:	f89a 3000 	ldrb.w	r3, [sl]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f47f af74 	bne.w	8000b18 <_svfiprintf_r+0x3c>
 8000c30:	89bb      	ldrh	r3, [r7, #12]
 8000c32:	065b      	lsls	r3, r3, #25
 8000c34:	bf54      	ite	pl
 8000c36:	9809      	ldrpl	r0, [sp, #36]	; 0x24
 8000c38:	f04f 30ff 	movmi.w	r0, #4294967295	; 0xffffffff
 8000c3c:	b01d      	add	sp, #116	; 0x74
 8000c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c42:	ebb4 0b0a 	subs.w	fp, r4, sl
 8000c46:	d083      	beq.n	8000b50 <_svfiprintf_r+0x74>
 8000c48:	e774      	b.n	8000b34 <_svfiprintf_r+0x58>
 8000c4a:	9b03      	ldr	r3, [sp, #12]
 8000c4c:	3307      	adds	r3, #7
 8000c4e:	f023 0307 	bic.w	r3, r3, #7
 8000c52:	3308      	adds	r3, #8
 8000c54:	9303      	str	r3, [sp, #12]
 8000c56:	e7e3      	b.n	8000c20 <_svfiprintf_r+0x144>
 8000c58:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8000c5c:	292a      	cmp	r1, #42	; 0x2a
 8000c5e:	d01f      	beq.n	8000ca0 <_svfiprintf_r+0x1c4>
 8000c60:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000c64:	2300      	movs	r3, #0
 8000c66:	2a09      	cmp	r2, #9
 8000c68:	f10a 0a01 	add.w	sl, sl, #1
 8000c6c:	9305      	str	r3, [sp, #20]
 8000c6e:	d8ad      	bhi.n	8000bcc <_svfiprintf_r+0xf0>
 8000c70:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8000c74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c78:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000c7c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000c80:	2a09      	cmp	r2, #9
 8000c82:	d9f5      	bls.n	8000c70 <_svfiprintf_r+0x194>
 8000c84:	9305      	str	r3, [sp, #20]
 8000c86:	e7a1      	b.n	8000bcc <_svfiprintf_r+0xf0>
 8000c88:	9a03      	ldr	r2, [sp, #12]
 8000c8a:	6811      	ldr	r1, [r2, #0]
 8000c8c:	3204      	adds	r2, #4
 8000c8e:	2900      	cmp	r1, #0
 8000c90:	9203      	str	r2, [sp, #12]
 8000c92:	db18      	blt.n	8000cc6 <_svfiprintf_r+0x1ea>
 8000c94:	9107      	str	r1, [sp, #28]
 8000c96:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8000c9a:	f10a 0a01 	add.w	sl, sl, #1
 8000c9e:	e793      	b.n	8000bc8 <_svfiprintf_r+0xec>
 8000ca0:	9b03      	ldr	r3, [sp, #12]
 8000ca2:	f10a 0002 	add.w	r0, sl, #2
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2a00      	cmp	r2, #0
 8000cac:	9303      	str	r3, [sp, #12]
 8000cae:	bfb8      	it	lt
 8000cb0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000cb4:	9205      	str	r2, [sp, #20]
 8000cb6:	bfae      	itee	ge
 8000cb8:	f89a 1002 	ldrbge.w	r1, [sl, #2]
 8000cbc:	f89a 1002 	ldrblt.w	r1, [sl, #2]
 8000cc0:	9305      	strlt	r3, [sp, #20]
 8000cc2:	4682      	mov	sl, r0
 8000cc4:	e782      	b.n	8000bcc <_svfiprintf_r+0xf0>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	9107      	str	r1, [sp, #28]
 8000cce:	9304      	str	r3, [sp, #16]
 8000cd0:	e7e1      	b.n	8000c96 <_svfiprintf_r+0x1ba>
 8000cd2:	ab03      	add	r3, sp, #12
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	463a      	mov	r2, r7
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <_svfiprintf_r+0x238>)
 8000cda:	a904      	add	r1, sp, #16
 8000cdc:	4640      	mov	r0, r8
 8000cde:	f000 f8b5 	bl	8000e4c <_printf_i>
 8000ce2:	4606      	mov	r6, r0
 8000ce4:	e79a      	b.n	8000c1c <_svfiprintf_r+0x140>
 8000ce6:	2140      	movs	r1, #64	; 0x40
 8000ce8:	f7ff fdb6 	bl	8000858 <_malloc_r>
 8000cec:	6038      	str	r0, [r7, #0]
 8000cee:	6138      	str	r0, [r7, #16]
 8000cf0:	b110      	cbz	r0, 8000cf8 <_svfiprintf_r+0x21c>
 8000cf2:	2340      	movs	r3, #64	; 0x40
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e6ff      	b.n	8000af8 <_svfiprintf_r+0x1c>
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	f8c8 3000 	str.w	r3, [r8]
 8000cfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d02:	e79b      	b.n	8000c3c <_svfiprintf_r+0x160>
 8000d04:	0800a0d0 	stmdaeq	r0, {r4, r6, r7, sp, pc}
 8000d08:	0800a0d8 	stmdaeq	r0, {r3, r4, r6, r7, sp, pc}
 8000d0c:	0800a0dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sp, pc}
 8000d10:	00000000 	andeq	r0, r0, r0
 8000d14:	08000915 	stmdaeq	r0, {r0, r2, r4, r8, fp}

08000d18 <_printf_common>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	690d      	ldr	r5, [r1, #16]
 8000d1e:	460c      	mov	r4, r1
 8000d20:	6889      	ldr	r1, [r1, #8]
 8000d22:	4691      	mov	r9, r2
 8000d24:	428d      	cmp	r5, r1
 8000d26:	462a      	mov	r2, r5
 8000d28:	bfb8      	it	lt
 8000d2a:	460a      	movlt	r2, r1
 8000d2c:	f8c9 2000 	str.w	r2, [r9]
 8000d30:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8000d34:	4606      	mov	r6, r0
 8000d36:	461f      	mov	r7, r3
 8000d38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000d3c:	b111      	cbz	r1, 8000d44 <_printf_common+0x2c>
 8000d3e:	3201      	adds	r2, #1
 8000d40:	f8c9 2000 	str.w	r2, [r9]
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	0699      	lsls	r1, r3, #26
 8000d48:	d55d      	bpl.n	8000e06 <_printf_common+0xee>
 8000d4a:	f8d9 2000 	ldr.w	r2, [r9]
 8000d4e:	3202      	adds	r2, #2
 8000d50:	f8c9 2000 	str.w	r2, [r9]
 8000d54:	6823      	ldr	r3, [r4, #0]
 8000d56:	f013 0f06 	tst.w	r3, #6
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	d11d      	bne.n	8000d9a <_printf_common+0x82>
 8000d5e:	68e1      	ldr	r1, [r4, #12]
 8000d60:	1a8a      	subs	r2, r1, r2
 8000d62:	2a00      	cmp	r2, #0
 8000d64:	bfd8      	it	le
 8000d66:	4619      	movle	r1, r3
 8000d68:	dd17      	ble.n	8000d9a <_printf_common+0x82>
 8000d6a:	f104 0a19 	add.w	sl, r4, #25
 8000d6e:	2500      	movs	r5, #0
 8000d70:	e005      	b.n	8000d7e <_printf_common+0x66>
 8000d72:	68e3      	ldr	r3, [r4, #12]
 8000d74:	f8d9 2000 	ldr.w	r2, [r9]
 8000d78:	1a9b      	subs	r3, r3, r2
 8000d7a:	42ab      	cmp	r3, r5
 8000d7c:	dd0c      	ble.n	8000d98 <_printf_common+0x80>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	4652      	mov	r2, sl
 8000d82:	4639      	mov	r1, r7
 8000d84:	4630      	mov	r0, r6
 8000d86:	47c0      	blx	r8
 8000d88:	3001      	adds	r0, #1
 8000d8a:	f105 0501 	add.w	r5, r5, #1
 8000d8e:	d1f0      	bne.n	8000d72 <_printf_common+0x5a>
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d98:	6821      	ldr	r1, [r4, #0]
 8000d9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8000d9e:	3300      	adds	r3, #0
 8000da0:	bf18      	it	ne
 8000da2:	2301      	movne	r3, #1
 8000da4:	068a      	lsls	r2, r1, #26
 8000da6:	d50a      	bpl.n	8000dbe <_printf_common+0xa6>
 8000da8:	18e2      	adds	r2, r4, r3
 8000daa:	2130      	movs	r1, #48	; 0x30
 8000dac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000db0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000db4:	1c5a      	adds	r2, r3, #1
 8000db6:	4422      	add	r2, r4
 8000db8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	47c0      	blx	r8
 8000dc8:	3001      	adds	r0, #1
 8000dca:	d0e1      	beq.n	8000d90 <_printf_common+0x78>
 8000dcc:	6823      	ldr	r3, [r4, #0]
 8000dce:	f003 0306 	and.w	r3, r3, #6
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	d029      	beq.n	8000e2a <_printf_common+0x112>
 8000dd6:	68a3      	ldr	r3, [r4, #8]
 8000dd8:	6922      	ldr	r2, [r4, #16]
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	bfc8      	it	gt
 8000dde:	f04f 0900 	movgt.w	r9, #0
 8000de2:	dd2f      	ble.n	8000e44 <_printf_common+0x12c>
 8000de4:	1a9b      	subs	r3, r3, r2
 8000de6:	4499      	add	r9, r3
 8000de8:	341a      	adds	r4, #26
 8000dea:	2500      	movs	r5, #0
 8000dec:	e001      	b.n	8000df2 <_printf_common+0xda>
 8000dee:	454d      	cmp	r5, r9
 8000df0:	d028      	beq.n	8000e44 <_printf_common+0x12c>
 8000df2:	2301      	movs	r3, #1
 8000df4:	4622      	mov	r2, r4
 8000df6:	4639      	mov	r1, r7
 8000df8:	4630      	mov	r0, r6
 8000dfa:	47c0      	blx	r8
 8000dfc:	3001      	adds	r0, #1
 8000dfe:	f105 0501 	add.w	r5, r5, #1
 8000e02:	d1f4      	bne.n	8000dee <_printf_common+0xd6>
 8000e04:	e7c4      	b.n	8000d90 <_printf_common+0x78>
 8000e06:	f013 0f06 	tst.w	r3, #6
 8000e0a:	d108      	bne.n	8000e1e <_printf_common+0x106>
 8000e0c:	68e1      	ldr	r1, [r4, #12]
 8000e0e:	f8d9 2000 	ldr.w	r2, [r9]
 8000e12:	1a8a      	subs	r2, r1, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	bfd8      	it	le
 8000e18:	4619      	movle	r1, r3
 8000e1a:	dca6      	bgt.n	8000d6a <_printf_common+0x52>
 8000e1c:	e7bd      	b.n	8000d9a <_printf_common+0x82>
 8000e1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8000e22:	3300      	adds	r3, #0
 8000e24:	bf18      	it	ne
 8000e26:	2301      	movne	r3, #1
 8000e28:	e7c9      	b.n	8000dbe <_printf_common+0xa6>
 8000e2a:	f8d9 0000 	ldr.w	r0, [r9]
 8000e2e:	68e1      	ldr	r1, [r4, #12]
 8000e30:	68a3      	ldr	r3, [r4, #8]
 8000e32:	6922      	ldr	r2, [r4, #16]
 8000e34:	1a09      	subs	r1, r1, r0
 8000e36:	4293      	cmp	r3, r2
 8000e38:	ea21 79e1 	bic.w	r9, r1, r1, asr #31
 8000e3c:	dcd2      	bgt.n	8000de4 <_printf_common+0xcc>
 8000e3e:	f1b9 0f00 	cmp.w	r9, #0
 8000e42:	d1d1      	bne.n	8000de8 <_printf_common+0xd0>
 8000e44:	2000      	movs	r0, #0
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	bf00      	nop

08000e4c <_printf_i>:
 8000e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e50:	460c      	mov	r4, r1
 8000e52:	7e09      	ldrb	r1, [r1, #24]
 8000e54:	b085      	sub	sp, #20
 8000e56:	296e      	cmp	r1, #110	; 0x6e
 8000e58:	4606      	mov	r6, r0
 8000e5a:	4617      	mov	r7, r2
 8000e5c:	4698      	mov	r8, r3
 8000e5e:	f104 0c43 	add.w	ip, r4, #67	; 0x43
 8000e62:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000e64:	d05a      	beq.n	8000f1c <_printf_i+0xd0>
 8000e66:	d81a      	bhi.n	8000e9e <_printf_i+0x52>
 8000e68:	2963      	cmp	r1, #99	; 0x63
 8000e6a:	f000 8112 	beq.w	8001092 <_printf_i+0x246>
 8000e6e:	f200 80d6 	bhi.w	800101e <_printf_i+0x1d2>
 8000e72:	2900      	cmp	r1, #0
 8000e74:	d05c      	beq.n	8000f30 <_printf_i+0xe4>
 8000e76:	2958      	cmp	r1, #88	; 0x58
 8000e78:	f040 80f5 	bne.w	8001066 <_printf_i+0x21a>
 8000e7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8000e80:	6822      	ldr	r2, [r4, #0]
 8000e82:	6803      	ldr	r3, [r0, #0]
 8000e84:	0615      	lsls	r5, r2, #24
 8000e86:	f8df e264 	ldr.w	lr, [pc, #612]	; 80010ec <_printf_i+0x2a0>
 8000e8a:	f103 0104 	add.w	r1, r3, #4
 8000e8e:	d41e      	bmi.n	8000ece <_printf_i+0x82>
 8000e90:	0655      	lsls	r5, r2, #25
 8000e92:	bf53      	iteet	pl
 8000e94:	681b      	ldrpl	r3, [r3, #0]
 8000e96:	6001      	strmi	r1, [r0, #0]
 8000e98:	881b      	ldrhmi	r3, [r3, #0]
 8000e9a:	6001      	strpl	r1, [r0, #0]
 8000e9c:	e019      	b.n	8000ed2 <_printf_i+0x86>
 8000e9e:	2973      	cmp	r1, #115	; 0x73
 8000ea0:	f000 80cf 	beq.w	8001042 <_printf_i+0x1f6>
 8000ea4:	d87e      	bhi.n	8000fa4 <_printf_i+0x158>
 8000ea6:	296f      	cmp	r1, #111	; 0x6f
 8000ea8:	f000 80e4 	beq.w	8001074 <_printf_i+0x228>
 8000eac:	2970      	cmp	r1, #112	; 0x70
 8000eae:	f040 80da 	bne.w	8001066 <_printf_i+0x21a>
 8000eb2:	6822      	ldr	r2, [r4, #0]
 8000eb4:	f042 0220 	orr.w	r2, r2, #32
 8000eb8:	6022      	str	r2, [r4, #0]
 8000eba:	2378      	movs	r3, #120	; 0x78
 8000ebc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000ec0:	6803      	ldr	r3, [r0, #0]
 8000ec2:	0615      	lsls	r5, r2, #24
 8000ec4:	f8df e228 	ldr.w	lr, [pc, #552]	; 80010f0 <_printf_i+0x2a4>
 8000ec8:	f103 0104 	add.w	r1, r3, #4
 8000ecc:	d5e0      	bpl.n	8000e90 <_printf_i+0x44>
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6001      	str	r1, [r0, #0]
 8000ed2:	07d0      	lsls	r0, r2, #31
 8000ed4:	bf44      	itt	mi
 8000ed6:	f042 0220 	orrmi.w	r2, r2, #32
 8000eda:	6022      	strmi	r2, [r4, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f040 8090 	bne.w	8001002 <_printf_i+0x1b6>
 8000ee2:	6822      	ldr	r2, [r4, #0]
 8000ee4:	2110      	movs	r1, #16
 8000ee6:	f022 0220 	bic.w	r2, r2, #32
 8000eea:	6022      	str	r2, [r4, #0]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8000ef2:	6860      	ldr	r0, [r4, #4]
 8000ef4:	2800      	cmp	r0, #0
 8000ef6:	60a0      	str	r0, [r4, #8]
 8000ef8:	f2c0 8088 	blt.w	800100c <_printf_i+0x1c0>
 8000efc:	6822      	ldr	r2, [r4, #0]
 8000efe:	f022 0204 	bic.w	r2, r2, #4
 8000f02:	6022      	str	r2, [r4, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d162      	bne.n	8000fce <_printf_i+0x182>
 8000f08:	2800      	cmp	r0, #0
 8000f0a:	f040 8081 	bne.w	8001010 <_printf_i+0x1c4>
 8000f0e:	4665      	mov	r5, ip
 8000f10:	2908      	cmp	r1, #8
 8000f12:	d06a      	beq.n	8000fea <_printf_i+0x19e>
 8000f14:	ebc5 030c 	rsb	r3, r5, ip
 8000f18:	6123      	str	r3, [r4, #16]
 8000f1a:	e00c      	b.n	8000f36 <_printf_i+0xea>
 8000f1c:	6823      	ldr	r3, [r4, #0]
 8000f1e:	061a      	lsls	r2, r3, #24
 8000f20:	f140 80d5 	bpl.w	80010ce <_printf_i+0x282>
 8000f24:	6803      	ldr	r3, [r0, #0]
 8000f26:	6962      	ldr	r2, [r4, #20]
 8000f28:	1d19      	adds	r1, r3, #4
 8000f2a:	6001      	str	r1, [r0, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	4665      	mov	r5, ip
 8000f32:	2300      	movs	r3, #0
 8000f34:	6123      	str	r3, [r4, #16]
 8000f36:	f8cd 8000 	str.w	r8, [sp]
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	aa03      	add	r2, sp, #12
 8000f3e:	4621      	mov	r1, r4
 8000f40:	4630      	mov	r0, r6
 8000f42:	f7ff fee9 	bl	8000d18 <_printf_common>
 8000f46:	3001      	adds	r0, #1
 8000f48:	d021      	beq.n	8000f8e <_printf_i+0x142>
 8000f4a:	462a      	mov	r2, r5
 8000f4c:	6923      	ldr	r3, [r4, #16]
 8000f4e:	4639      	mov	r1, r7
 8000f50:	4630      	mov	r0, r6
 8000f52:	47c0      	blx	r8
 8000f54:	3001      	adds	r0, #1
 8000f56:	d01a      	beq.n	8000f8e <_printf_i+0x142>
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	9803      	ldr	r0, [sp, #12]
 8000f5c:	f013 0f02 	tst.w	r3, #2
 8000f60:	68e3      	ldr	r3, [r4, #12]
 8000f62:	d019      	beq.n	8000f98 <_printf_i+0x14c>
 8000f64:	1a1a      	subs	r2, r3, r0
 8000f66:	2a00      	cmp	r2, #0
 8000f68:	dd16      	ble.n	8000f98 <_printf_i+0x14c>
 8000f6a:	f104 0919 	add.w	r9, r4, #25
 8000f6e:	2500      	movs	r5, #0
 8000f70:	e004      	b.n	8000f7c <_printf_i+0x130>
 8000f72:	68e3      	ldr	r3, [r4, #12]
 8000f74:	9803      	ldr	r0, [sp, #12]
 8000f76:	1a1a      	subs	r2, r3, r0
 8000f78:	42aa      	cmp	r2, r5
 8000f7a:	dd0d      	ble.n	8000f98 <_printf_i+0x14c>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	464a      	mov	r2, r9
 8000f80:	4639      	mov	r1, r7
 8000f82:	4630      	mov	r0, r6
 8000f84:	47c0      	blx	r8
 8000f86:	3001      	adds	r0, #1
 8000f88:	f105 0501 	add.w	r5, r5, #1
 8000f8c:	d1f1      	bne.n	8000f72 <_printf_i+0x126>
 8000f8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f92:	b005      	add	sp, #20
 8000f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f98:	4298      	cmp	r0, r3
 8000f9a:	bfb8      	it	lt
 8000f9c:	4618      	movlt	r0, r3
 8000f9e:	b005      	add	sp, #20
 8000fa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fa4:	2975      	cmp	r1, #117	; 0x75
 8000fa6:	d065      	beq.n	8001074 <_printf_i+0x228>
 8000fa8:	2978      	cmp	r1, #120	; 0x78
 8000faa:	d15c      	bne.n	8001066 <_printf_i+0x21a>
 8000fac:	6822      	ldr	r2, [r4, #0]
 8000fae:	e784      	b.n	8000eba <_printf_i+0x6e>
 8000fb0:	6861      	ldr	r1, [r4, #4]
 8000fb2:	202d      	movs	r0, #45	; 0x2d
 8000fb4:	2900      	cmp	r1, #0
 8000fb6:	f1c3 0300 	rsb	r3, r3, #0
 8000fba:	60a1      	str	r1, [r4, #8]
 8000fbc:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8000fc0:	db21      	blt.n	8001006 <_printf_i+0x1ba>
 8000fc2:	f022 0204 	bic.w	r2, r2, #4
 8000fc6:	f8df e124 	ldr.w	lr, [pc, #292]	; 80010ec <_printf_i+0x2a0>
 8000fca:	6022      	str	r2, [r4, #0]
 8000fcc:	210a      	movs	r1, #10
 8000fce:	4665      	mov	r5, ip
 8000fd0:	fbb3 f2f1 	udiv	r2, r3, r1
 8000fd4:	fb01 3312 	mls	r3, r1, r2, r3
 8000fd8:	f81e 0003 	ldrb.w	r0, [lr, r3]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	f805 0d01 	strb.w	r0, [r5, #-1]!
 8000fe2:	2a00      	cmp	r2, #0
 8000fe4:	d1f4      	bne.n	8000fd0 <_printf_i+0x184>
 8000fe6:	2908      	cmp	r1, #8
 8000fe8:	d194      	bne.n	8000f14 <_printf_i+0xc8>
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	07d9      	lsls	r1, r3, #31
 8000fee:	d591      	bpl.n	8000f14 <_printf_i+0xc8>
 8000ff0:	6862      	ldr	r2, [r4, #4]
 8000ff2:	6923      	ldr	r3, [r4, #16]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dc8d      	bgt.n	8000f14 <_printf_i+0xc8>
 8000ff8:	2330      	movs	r3, #48	; 0x30
 8000ffa:	f805 3c01 	strb.w	r3, [r5, #-1]
 8000ffe:	3d01      	subs	r5, #1
 8001000:	e788      	b.n	8000f14 <_printf_i+0xc8>
 8001002:	2110      	movs	r1, #16
 8001004:	e772      	b.n	8000eec <_printf_i+0xa0>
 8001006:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 80010ec <_printf_i+0x2a0>
 800100a:	210a      	movs	r1, #10
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1de      	bne.n	8000fce <_printf_i+0x182>
 8001010:	f89e 3000 	ldrb.w	r3, [lr]
 8001014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800101c:	e778      	b.n	8000f10 <_printf_i+0xc4>
 800101e:	2964      	cmp	r1, #100	; 0x64
 8001020:	d001      	beq.n	8001026 <_printf_i+0x1da>
 8001022:	2969      	cmp	r1, #105	; 0x69
 8001024:	d11f      	bne.n	8001066 <_printf_i+0x21a>
 8001026:	6822      	ldr	r2, [r4, #0]
 8001028:	6803      	ldr	r3, [r0, #0]
 800102a:	0615      	lsls	r5, r2, #24
 800102c:	f103 0104 	add.w	r1, r3, #4
 8001030:	d53a      	bpl.n	80010a8 <_printf_i+0x25c>
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6001      	str	r1, [r0, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	dbba      	blt.n	8000fb0 <_printf_i+0x164>
 800103a:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 80010ec <_printf_i+0x2a0>
 800103e:	210a      	movs	r1, #10
 8001040:	e757      	b.n	8000ef2 <_printf_i+0xa6>
 8001042:	6803      	ldr	r3, [r0, #0]
 8001044:	6862      	ldr	r2, [r4, #4]
 8001046:	1d19      	adds	r1, r3, #4
 8001048:	6001      	str	r1, [r0, #0]
 800104a:	681d      	ldr	r5, [r3, #0]
 800104c:	2100      	movs	r1, #0
 800104e:	4628      	mov	r0, r5
 8001050:	f000 f862 	bl	8001118 <memchr>
 8001054:	2800      	cmp	r0, #0
 8001056:	d046      	beq.n	80010e6 <_printf_i+0x29a>
 8001058:	1b40      	subs	r0, r0, r5
 800105a:	6060      	str	r0, [r4, #4]
 800105c:	6120      	str	r0, [r4, #16]
 800105e:	2300      	movs	r3, #0
 8001060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001064:	e767      	b.n	8000f36 <_printf_i+0xea>
 8001066:	2301      	movs	r3, #1
 8001068:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800106c:	6123      	str	r3, [r4, #16]
 800106e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001072:	e7f4      	b.n	800105e <_printf_i+0x212>
 8001074:	6823      	ldr	r3, [r4, #0]
 8001076:	061a      	lsls	r2, r3, #24
 8001078:	d51e      	bpl.n	80010b8 <_printf_i+0x26c>
 800107a:	6803      	ldr	r3, [r0, #0]
 800107c:	1d1a      	adds	r2, r3, #4
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6002      	str	r2, [r0, #0]
 8001082:	7e22      	ldrb	r2, [r4, #24]
 8001084:	f8df e064 	ldr.w	lr, [pc, #100]	; 80010ec <_printf_i+0x2a0>
 8001088:	2a6f      	cmp	r2, #111	; 0x6f
 800108a:	bf14      	ite	ne
 800108c:	210a      	movne	r1, #10
 800108e:	2108      	moveq	r1, #8
 8001090:	e72c      	b.n	8000eec <_printf_i+0xa0>
 8001092:	6803      	ldr	r3, [r0, #0]
 8001094:	2201      	movs	r2, #1
 8001096:	1d19      	adds	r1, r3, #4
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800109e:	6001      	str	r1, [r0, #0]
 80010a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80010a4:	6122      	str	r2, [r4, #16]
 80010a6:	e7da      	b.n	800105e <_printf_i+0x212>
 80010a8:	0655      	lsls	r5, r2, #25
 80010aa:	bf53      	iteet	pl
 80010ac:	681b      	ldrpl	r3, [r3, #0]
 80010ae:	6001      	strmi	r1, [r0, #0]
 80010b0:	f9b3 3000 	ldrshmi.w	r3, [r3]
 80010b4:	6001      	strpl	r1, [r0, #0]
 80010b6:	e7be      	b.n	8001036 <_printf_i+0x1ea>
 80010b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80010bc:	6803      	ldr	r3, [r0, #0]
 80010be:	f103 0204 	add.w	r2, r3, #4
 80010c2:	bf15      	itete	ne
 80010c4:	6002      	strne	r2, [r0, #0]
 80010c6:	681b      	ldreq	r3, [r3, #0]
 80010c8:	881b      	ldrhne	r3, [r3, #0]
 80010ca:	6002      	streq	r2, [r0, #0]
 80010cc:	e7d9      	b.n	8001082 <_printf_i+0x236>
 80010ce:	f013 0f40 	tst.w	r3, #64	; 0x40
 80010d2:	6803      	ldr	r3, [r0, #0]
 80010d4:	6962      	ldr	r2, [r4, #20]
 80010d6:	f103 0104 	add.w	r1, r3, #4
 80010da:	6001      	str	r1, [r0, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	bf14      	ite	ne
 80010e0:	801a      	strhne	r2, [r3, #0]
 80010e2:	601a      	streq	r2, [r3, #0]
 80010e4:	e724      	b.n	8000f30 <_printf_i+0xe4>
 80010e6:	6860      	ldr	r0, [r4, #4]
 80010e8:	e7b8      	b.n	800105c <_printf_i+0x210>
 80010ea:	bf00      	nop
 80010ec:	0800a0e4 	stmdaeq	r0, {r2, r5, r6, r7, sp, pc}
 80010f0:	0800a0f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sp, pc}

080010f4 <_sbrk_r>:
 80010f4:	b538      	push	{r3, r4, r5, lr}
 80010f6:	4c07      	ldr	r4, [pc, #28]	; (8001114 <_sbrk_r+0x20>)
 80010f8:	2300      	movs	r3, #0
 80010fa:	4605      	mov	r5, r0
 80010fc:	4608      	mov	r0, r1
 80010fe:	6023      	str	r3, [r4, #0]
 8001100:	f000 f8e2 	bl	80012c8 <_sbrk>
 8001104:	1c43      	adds	r3, r0, #1
 8001106:	d000      	beq.n	800110a <_sbrk_r+0x16>
 8001108:	bd38      	pop	{r3, r4, r5, pc}
 800110a:	6823      	ldr	r3, [r4, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0fb      	beq.n	8001108 <_sbrk_r+0x14>
 8001110:	602b      	str	r3, [r5, #0]
 8001112:	bd38      	pop	{r3, r4, r5, pc}
 8001114:	20004300 	andcs	r4, r0, r0, lsl #6

08001118 <memchr>:
 8001118:	0783      	lsls	r3, r0, #30
 800111a:	b470      	push	{r4, r5, r6}
 800111c:	b2cd      	uxtb	r5, r1
 800111e:	d03d      	beq.n	800119c <memchr+0x84>
 8001120:	1e53      	subs	r3, r2, #1
 8001122:	b302      	cbz	r2, 8001166 <memchr+0x4e>
 8001124:	7802      	ldrb	r2, [r0, #0]
 8001126:	42aa      	cmp	r2, r5
 8001128:	d01e      	beq.n	8001168 <memchr+0x50>
 800112a:	1c42      	adds	r2, r0, #1
 800112c:	e004      	b.n	8001138 <memchr+0x20>
 800112e:	b1d3      	cbz	r3, 8001166 <memchr+0x4e>
 8001130:	7804      	ldrb	r4, [r0, #0]
 8001132:	3b01      	subs	r3, #1
 8001134:	42ac      	cmp	r4, r5
 8001136:	d017      	beq.n	8001168 <memchr+0x50>
 8001138:	f012 0f03 	tst.w	r2, #3
 800113c:	4610      	mov	r0, r2
 800113e:	f102 0201 	add.w	r2, r2, #1
 8001142:	d1f4      	bne.n	800112e <memchr+0x16>
 8001144:	2b03      	cmp	r3, #3
 8001146:	d811      	bhi.n	800116c <memchr+0x54>
 8001148:	b353      	cbz	r3, 80011a0 <memchr+0x88>
 800114a:	7802      	ldrb	r2, [r0, #0]
 800114c:	42aa      	cmp	r2, r5
 800114e:	d00b      	beq.n	8001168 <memchr+0x50>
 8001150:	4403      	add	r3, r0
 8001152:	1c42      	adds	r2, r0, #1
 8001154:	e002      	b.n	800115c <memchr+0x44>
 8001156:	7801      	ldrb	r1, [r0, #0]
 8001158:	42a9      	cmp	r1, r5
 800115a:	d005      	beq.n	8001168 <memchr+0x50>
 800115c:	4293      	cmp	r3, r2
 800115e:	4610      	mov	r0, r2
 8001160:	f102 0201 	add.w	r2, r2, #1
 8001164:	d1f7      	bne.n	8001156 <memchr+0x3e>
 8001166:	2000      	movs	r0, #0
 8001168:	bc70      	pop	{r4, r5, r6}
 800116a:	4770      	bx	lr
 800116c:	4604      	mov	r4, r0
 800116e:	020e      	lsls	r6, r1, #8
 8001170:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8001174:	432e      	orrs	r6, r5
 8001176:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800117a:	6822      	ldr	r2, [r4, #0]
 800117c:	4620      	mov	r0, r4
 800117e:	4072      	eors	r2, r6
 8001180:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
 8001184:	ea21 0202 	bic.w	r2, r1, r2
 8001188:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800118c:	f104 0404 	add.w	r4, r4, #4
 8001190:	d1db      	bne.n	800114a <memchr+0x32>
 8001192:	3b04      	subs	r3, #4
 8001194:	2b03      	cmp	r3, #3
 8001196:	4620      	mov	r0, r4
 8001198:	d8ef      	bhi.n	800117a <memchr+0x62>
 800119a:	e7d5      	b.n	8001148 <memchr+0x30>
 800119c:	4613      	mov	r3, r2
 800119e:	e7d1      	b.n	8001144 <memchr+0x2c>
 80011a0:	4618      	mov	r0, r3
 80011a2:	e7e1      	b.n	8001168 <memchr+0x50>

080011a4 <memmove>:
 80011a4:	4288      	cmp	r0, r1
 80011a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a8:	d90d      	bls.n	80011c6 <memmove+0x22>
 80011aa:	188b      	adds	r3, r1, r2
 80011ac:	4298      	cmp	r0, r3
 80011ae:	d20a      	bcs.n	80011c6 <memmove+0x22>
 80011b0:	1881      	adds	r1, r0, r2
 80011b2:	2a00      	cmp	r2, #0
 80011b4:	d051      	beq.n	800125a <memmove+0xb6>
 80011b6:	1a9a      	subs	r2, r3, r2
 80011b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80011bc:	4293      	cmp	r3, r2
 80011be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80011c2:	d1f9      	bne.n	80011b8 <memmove+0x14>
 80011c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011c6:	2a0f      	cmp	r2, #15
 80011c8:	d948      	bls.n	800125c <memmove+0xb8>
 80011ca:	ea41 0300 	orr.w	r3, r1, r0
 80011ce:	079b      	lsls	r3, r3, #30
 80011d0:	d146      	bne.n	8001260 <memmove+0xbc>
 80011d2:	4615      	mov	r5, r2
 80011d4:	f100 0410 	add.w	r4, r0, #16
 80011d8:	f101 0310 	add.w	r3, r1, #16
 80011dc:	f853 6c10 	ldr.w	r6, [r3, #-16]
 80011e0:	3d10      	subs	r5, #16
 80011e2:	f844 6c10 	str.w	r6, [r4, #-16]
 80011e6:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 80011ea:	2d0f      	cmp	r5, #15
 80011ec:	f844 6c0c 	str.w	r6, [r4, #-12]
 80011f0:	f853 6c08 	ldr.w	r6, [r3, #-8]
 80011f4:	f104 0410 	add.w	r4, r4, #16
 80011f8:	f844 6c18 	str.w	r6, [r4, #-24]
 80011fc:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8001200:	f103 0310 	add.w	r3, r3, #16
 8001204:	f844 6c14 	str.w	r6, [r4, #-20]
 8001208:	d8e8      	bhi.n	80011dc <memmove+0x38>
 800120a:	f1a2 0310 	sub.w	r3, r2, #16
 800120e:	f023 030f 	bic.w	r3, r3, #15
 8001212:	f002 0e0f 	and.w	lr, r2, #15
 8001216:	3310      	adds	r3, #16
 8001218:	f1be 0f03 	cmp.w	lr, #3
 800121c:	4419      	add	r1, r3
 800121e:	4403      	add	r3, r0
 8001220:	d921      	bls.n	8001266 <memmove+0xc2>
 8001222:	460e      	mov	r6, r1
 8001224:	4674      	mov	r4, lr
 8001226:	1f1d      	subs	r5, r3, #4
 8001228:	f856 7b04 	ldr.w	r7, [r6], #4
 800122c:	3c04      	subs	r4, #4
 800122e:	2c03      	cmp	r4, #3
 8001230:	f845 7f04 	str.w	r7, [r5, #4]!
 8001234:	d8f8      	bhi.n	8001228 <memmove+0x84>
 8001236:	f1ae 0404 	sub.w	r4, lr, #4
 800123a:	f024 0403 	bic.w	r4, r4, #3
 800123e:	3404      	adds	r4, #4
 8001240:	4423      	add	r3, r4
 8001242:	4421      	add	r1, r4
 8001244:	f002 0203 	and.w	r2, r2, #3
 8001248:	b162      	cbz	r2, 8001264 <memmove+0xc0>
 800124a:	3b01      	subs	r3, #1
 800124c:	440a      	add	r2, r1
 800124e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001252:	428a      	cmp	r2, r1
 8001254:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001258:	d1f9      	bne.n	800124e <memmove+0xaa>
 800125a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800125c:	4603      	mov	r3, r0
 800125e:	e7f3      	b.n	8001248 <memmove+0xa4>
 8001260:	4603      	mov	r3, r0
 8001262:	e7f2      	b.n	800124a <memmove+0xa6>
 8001264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001266:	4672      	mov	r2, lr
 8001268:	e7ee      	b.n	8001248 <memmove+0xa4>
 800126a:	bf00      	nop

0800126c <_realloc_r>:
 800126c:	b1f9      	cbz	r1, 80012ae <_realloc_r+0x42>
 800126e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001270:	4606      	mov	r6, r0
 8001272:	4615      	mov	r5, r2
 8001274:	b1b2      	cbz	r2, 80012a4 <_realloc_r+0x38>
 8001276:	460c      	mov	r4, r1
 8001278:	f000 f81c 	bl	80012b4 <_malloc_usable_size_r>
 800127c:	4285      	cmp	r5, r0
 800127e:	d801      	bhi.n	8001284 <_realloc_r+0x18>
 8001280:	4620      	mov	r0, r4
 8001282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001284:	4629      	mov	r1, r5
 8001286:	4630      	mov	r0, r6
 8001288:	f7ff fae6 	bl	8000858 <_malloc_r>
 800128c:	4607      	mov	r7, r0
 800128e:	b168      	cbz	r0, 80012ac <_realloc_r+0x40>
 8001290:	462a      	mov	r2, r5
 8001292:	4621      	mov	r1, r4
 8001294:	f7fe ff3c 	bl	8000110 <memcpy>
 8001298:	4630      	mov	r0, r6
 800129a:	4621      	mov	r1, r4
 800129c:	f7ff fa96 	bl	80007cc <_free_r>
 80012a0:	4638      	mov	r0, r7
 80012a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012a4:	f7ff fa92 	bl	80007cc <_free_r>
 80012a8:	4628      	mov	r0, r5
 80012aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012ae:	4611      	mov	r1, r2
 80012b0:	f7ff bad2 	b.w	8000858 <_malloc_r>

080012b4 <_malloc_usable_size_r>:
 80012b4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80012b8:	2800      	cmp	r0, #0
 80012ba:	bfbe      	ittt	lt
 80012bc:	1809      	addlt	r1, r1, r0
 80012be:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 80012c2:	18c0      	addlt	r0, r0, r3
 80012c4:	3804      	subs	r0, #4
 80012c6:	4770      	bx	lr

080012c8 <_sbrk>:
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <_sbrk+0x14>)
 80012ca:	4905      	ldr	r1, [pc, #20]	; (80012e0 <_sbrk+0x18>)
 80012cc:	6813      	ldr	r3, [r2, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	bf08      	it	eq
 80012d2:	460b      	moveq	r3, r1
 80012d4:	4418      	add	r0, r3
 80012d6:	6010      	str	r0, [r2, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	4770      	bx	lr
 80012dc:	200000f4 	strdcs	r0, [r0], -r4
 80012e0:	20004304 	andcs	r4, r0, r4, lsl #6

080012e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80012e8:	4a15      	ldr	r2, [pc, #84]	; (8001340 <SystemInit+0x5c>)
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <SystemInit+0x5c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80012f4:	4912      	ldr	r1, [pc, #72]	; (8001340 <SystemInit+0x5c>)
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <SystemInit+0x5c>)
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <SystemInit+0x60>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001300:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <SystemInit+0x5c>)
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <SystemInit+0x5c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800130a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800130e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001310:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <SystemInit+0x5c>)
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <SystemInit+0x5c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800131c:	4a08      	ldr	r2, [pc, #32]	; (8001340 <SystemInit+0x5c>)
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <SystemInit+0x5c>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001326:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <SystemInit+0x5c>)
 800132a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800132e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001330:	f000 f80c 	bl	800134c <SetSysClock>
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <SystemInit+0x64>)
 8001336:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800133a:	609a      	str	r2, [r3, #8]
#endif 
return;
 800133c:	bf00      	nop
}
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	andmi	r1, r2, r0
 8001344:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000
 8001348:	e000ed00 	and	lr, r0, r0, lsl #26

0800134c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001350:	f000 f802 	bl	8001358 <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}

08001358 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001366:	4a3a      	ldr	r2, [pc, #232]	; (8001450 <SetSysClockTo72+0xf8>)
 8001368:	4b39      	ldr	r3, [pc, #228]	; (8001450 <SetSysClockTo72+0xf8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001370:	6013      	str	r3, [r2, #0]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001372:	4b37      	ldr	r3, [pc, #220]	; (8001450 <SetSysClockTo72+0xf8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3301      	adds	r3, #1
 8001380:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d103      	bne.n	8001390 <SetSysClockTo72+0x38>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800138e:	d1f0      	bne.n	8001372 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001390:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <SetSysClockTo72+0xf8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800139c:	2301      	movs	r3, #1
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	e001      	b.n	80013a6 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80013a2:	2300      	movs	r3, #0
 80013a4:	603b      	str	r3, [r7, #0]
  }  
  
  if (HSEStatus == (uint32_t)0x01)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d14b      	bne.n	8001444 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80013ac:	4a29      	ldr	r2, [pc, #164]	; (8001454 <SetSysClockTo72+0xfc>)
 80013ae:	4b29      	ldr	r3, [pc, #164]	; (8001454 <SetSysClockTo72+0xfc>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f043 0310 	orr.w	r3, r3, #16
 80013b6:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80013b8:	4a26      	ldr	r2, [pc, #152]	; (8001454 <SetSysClockTo72+0xfc>)
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <SetSysClockTo72+0xfc>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f023 0303 	bic.w	r3, r3, #3
 80013c2:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80013c4:	4a23      	ldr	r2, [pc, #140]	; (8001454 <SetSysClockTo72+0xfc>)
 80013c6:	4b23      	ldr	r3, [pc, #140]	; (8001454 <SetSysClockTo72+0xfc>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f043 0302 	orr.w	r3, r3, #2
 80013ce:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80013d0:	4a1f      	ldr	r2, [pc, #124]	; (8001450 <SetSysClockTo72+0xf8>)
 80013d2:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <SetSysClockTo72+0xf8>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80013d8:	4a1d      	ldr	r2, [pc, #116]	; (8001450 <SetSysClockTo72+0xf8>)
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <SetSysClockTo72+0xf8>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80013e0:	4a1b      	ldr	r2, [pc, #108]	; (8001450 <SetSysClockTo72+0xf8>)
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <SetSysClockTo72+0xf8>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ea:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80013ec:	4a18      	ldr	r2, [pc, #96]	; (8001450 <SetSysClockTo72+0xf8>)
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <SetSysClockTo72+0xf8>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80013f6:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80013f8:	4a15      	ldr	r2, [pc, #84]	; (8001450 <SetSysClockTo72+0xf8>)
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <SetSysClockTo72+0xf8>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001402:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */


    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001404:	4a12      	ldr	r2, [pc, #72]	; (8001450 <SetSysClockTo72+0xf8>)
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <SetSysClockTo72+0xf8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800140e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001410:	bf00      	nop
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <SetSysClockTo72+0xf8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f9      	beq.n	8001412 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800141e:	4a0c      	ldr	r2, [pc, #48]	; (8001450 <SetSysClockTo72+0xf8>)
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <SetSysClockTo72+0xf8>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f023 0303 	bic.w	r3, r3, #3
 8001428:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800142a:	4a09      	ldr	r2, [pc, #36]	; (8001450 <SetSysClockTo72+0xf8>)
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <SetSysClockTo72+0xf8>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001436:	bf00      	nop
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <SetSysClockTo72+0xf8>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 030c 	and.w	r3, r3, #12
 8001440:	2b08      	cmp	r3, #8
 8001442:	d1f9      	bne.n	8001438 <SetSysClockTo72+0xe0>
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
  
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40021000 	andmi	r1, r2, r0
 8001454:	40022000 	andmi	r2, r2, r0

08001458 <Driver_OLED_Send_START>:

uint8_t display_on[] = {0x8d, 0x14, 0xaf};
uint8_t display_off[] = {0x8d, 0x10, 0xae};

/* 启动向OLED发送数据或者指令 */
void Driver_OLED_Send_START(uint32_t dataType){
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
    
    /* 发送起始条件 */
    I2C_GenerateSTART(OLED_HARDWARE, ENABLE);
 8001460:	2101      	movs	r1, #1
 8001462:	4818      	ldr	r0, [pc, #96]	; (80014c4 <Driver_OLED_Send_START+0x6c>)
 8001464:	f005 f804 	bl	8006470 <I2C_GenerateSTART>
    /* 初始化重试次数 */
    /* 检查当前是否成功占用总线 */
    _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_MODE_SELECT) == ERROR);
 8001468:	bf00      	nop
 800146a:	4917      	ldr	r1, [pc, #92]	; (80014c8 <Driver_OLED_Send_START+0x70>)
 800146c:	4815      	ldr	r0, [pc, #84]	; (80014c4 <Driver_OLED_Send_START+0x6c>)
 800146e:	f005 f86d 	bl	800654c <I2C_CheckEvent>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f8      	beq.n	800146a <Driver_OLED_Send_START+0x12>
    /* 发送地址，要往这个地址写数据 */
    I2C_Send7bitAddress(OLED_HARDWARE, 0x78, I2C_Direction_Transmitter);
 8001478:	2200      	movs	r2, #0
 800147a:	2178      	movs	r1, #120	; 0x78
 800147c:	4811      	ldr	r0, [pc, #68]	; (80014c4 <Driver_OLED_Send_START+0x6c>)
 800147e:	f005 f827 	bl	80064d0 <I2C_Send7bitAddress>
    /* 检测当前是否是主发送模式 */
    _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED) == ERROR);
 8001482:	bf00      	nop
 8001484:	4911      	ldr	r1, [pc, #68]	; (80014cc <Driver_OLED_Send_START+0x74>)
 8001486:	480f      	ldr	r0, [pc, #60]	; (80014c4 <Driver_OLED_Send_START+0x6c>)
 8001488:	f005 f860 	bl	800654c <I2C_CheckEvent>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f8      	beq.n	8001484 <Driver_OLED_Send_START+0x2c>
    /* 发送指令：0x00代表指令，0x40代表数据 */
    if(dataType != OLED_COMMAND){
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d004      	beq.n	80014a2 <Driver_OLED_Send_START+0x4a>
        I2C_SendData(OLED_HARDWARE, 0x40);
 8001498:	2140      	movs	r1, #64	; 0x40
 800149a:	480a      	ldr	r0, [pc, #40]	; (80014c4 <Driver_OLED_Send_START+0x6c>)
 800149c:	f005 f808 	bl	80064b0 <I2C_SendData>
 80014a0:	e003      	b.n	80014aa <Driver_OLED_Send_START+0x52>
    }else{
        I2C_SendData(OLED_HARDWARE, 0x00);
 80014a2:	2100      	movs	r1, #0
 80014a4:	4807      	ldr	r0, [pc, #28]	; (80014c4 <Driver_OLED_Send_START+0x6c>)
 80014a6:	f005 f803 	bl	80064b0 <I2C_SendData>
    }
    _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTED) == ERROR);
 80014aa:	bf00      	nop
 80014ac:	4908      	ldr	r1, [pc, #32]	; (80014d0 <Driver_OLED_Send_START+0x78>)
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <Driver_OLED_Send_START+0x6c>)
 80014b0:	f005 f84c 	bl	800654c <I2C_CheckEvent>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f8      	beq.n	80014ac <Driver_OLED_Send_START+0x54>
    
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40005800 	andmi	r5, r0, r0, lsl #16
 80014c8:	00030001 	andeq	r0, r3, r1
 80014cc:	00070082 	andeq	r0, r7, r2, lsl #1
 80014d0:	00070084 	andeq	r0, r7, r4, lsl #1

080014d4 <Driver_OLED_SendDatas>:

/* 发送一串数据，数据中不包括地址 */
void Driver_OLED_SendDatas(uint8_t *commands, uint32_t length){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
    
    uint32_t i;
    /* 循环发送数据 */
    for(i=0; i<length; i++){
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e012      	b.n	800150a <Driver_OLED_SendDatas+0x36>
        I2C_SendData(OLED_HARDWARE, commands[i]);
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4413      	add	r3, r2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	480f      	ldr	r0, [pc, #60]	; (800152c <Driver_OLED_SendDatas+0x58>)
 80014f0:	f004 ffde 	bl	80064b0 <I2C_SendData>
        //I2C_SendData(OLED_HARDWARE, *(commands + i));
        /* 等待数据发送完成 */
        _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 80014f4:	bf00      	nop
 80014f6:	490e      	ldr	r1, [pc, #56]	; (8001530 <Driver_OLED_SendDatas+0x5c>)
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <Driver_OLED_SendDatas+0x58>)
 80014fa:	f005 f827 	bl	800654c <I2C_CheckEvent>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f8      	beq.n	80014f6 <Driver_OLED_SendDatas+0x22>
    for(i=0; i<length; i++){
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	3301      	adds	r3, #1
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d3e8      	bcc.n	80014e4 <Driver_OLED_SendDatas+0x10>
    }
    /* 等待最后一个数据发送完 */
    _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
 8001512:	bf00      	nop
 8001514:	4907      	ldr	r1, [pc, #28]	; (8001534 <Driver_OLED_SendDatas+0x60>)
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <Driver_OLED_SendDatas+0x58>)
 8001518:	f005 f848 	bl	80065ac <I2C_GetFlagStatus>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f8      	beq.n	8001514 <Driver_OLED_SendDatas+0x40>
    
}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40005800 	andmi	r5, r0, r0, lsl #16
 8001530:	00070080 	andeq	r0, r7, r0, lsl #1
 8001534:	10000004 	andne	r0, r0, r4

08001538 <Driver_OLED_Fill>:

/* 屏幕输出 false：全黑，true全白，这是命令*/
void Driver_OLED_Fill(uint8_t data){
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
    uint8_t i,j;
    /* 设置页地址0-7，设置显示位置—列低地址，设置显示位置—列高地址 */
    uint8_t command[] = {0x00, 0x10};
 8001542:	2300      	movs	r3, #0
 8001544:	733b      	strb	r3, [r7, #12]
 8001546:	2310      	movs	r3, #16
 8001548:	737b      	strb	r3, [r7, #13]
    /* 清理八页 */
    for(i=0;i<8;i++){
 800154a:	2300      	movs	r3, #0
 800154c:	73fb      	strb	r3, [r7, #15]
 800154e:	e034      	b.n	80015ba <Driver_OLED_Fill+0x82>
        /* 开始发送指令 */
        Driver_OLED_Send_START(OLED_COMMAND);
 8001550:	2000      	movs	r0, #0
 8001552:	f7ff ff81 	bl	8001458 <Driver_OLED_Send_START>
        /* 设置页地址0-7 */
        I2C_SendData(OLED_HARDWARE, 0xb0+i);
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	3b50      	subs	r3, #80	; 0x50
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4619      	mov	r1, r3
 800155e:	481e      	ldr	r0, [pc, #120]	; (80015d8 <Driver_OLED_Fill+0xa0>)
 8001560:	f004 ffa6 	bl	80064b0 <I2C_SendData>
        _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTED) == ERROR);
 8001564:	bf00      	nop
 8001566:	491d      	ldr	r1, [pc, #116]	; (80015dc <Driver_OLED_Fill+0xa4>)
 8001568:	481b      	ldr	r0, [pc, #108]	; (80015d8 <Driver_OLED_Fill+0xa0>)
 800156a:	f004 ffef 	bl	800654c <I2C_CheckEvent>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f8      	beq.n	8001566 <Driver_OLED_Fill+0x2e>
        /* 发送剩下的指令 */
        Driver_OLED_SendDatas(command, sizeof(command));
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	2102      	movs	r1, #2
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ffaa 	bl	80014d4 <Driver_OLED_SendDatas>
        /* 开始发送数据 */
        Driver_OLED_Send_START(OLED_DATA);
 8001580:	2040      	movs	r0, #64	; 0x40
 8001582:	f7ff ff69 	bl	8001458 <Driver_OLED_Send_START>
        for(j=0;j<128;j++){
 8001586:	2300      	movs	r3, #0
 8001588:	73bb      	strb	r3, [r7, #14]
 800158a:	e00f      	b.n	80015ac <Driver_OLED_Fill+0x74>
            /* 全黑 */
            I2C_SendData(OLED_HARDWARE, data);
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	4619      	mov	r1, r3
 8001590:	4811      	ldr	r0, [pc, #68]	; (80015d8 <Driver_OLED_Fill+0xa0>)
 8001592:	f004 ff8d 	bl	80064b0 <I2C_SendData>
            /* 等待数据发送完成 */
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 8001596:	bf00      	nop
 8001598:	4911      	ldr	r1, [pc, #68]	; (80015e0 <Driver_OLED_Fill+0xa8>)
 800159a:	480f      	ldr	r0, [pc, #60]	; (80015d8 <Driver_OLED_Fill+0xa0>)
 800159c:	f004 ffd6 	bl	800654c <I2C_CheckEvent>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f8      	beq.n	8001598 <Driver_OLED_Fill+0x60>
        for(j=0;j<128;j++){
 80015a6:	7bbb      	ldrb	r3, [r7, #14]
 80015a8:	3301      	adds	r3, #1
 80015aa:	73bb      	strb	r3, [r7, #14]
 80015ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	daeb      	bge.n	800158c <Driver_OLED_Fill+0x54>
    for(i=0;i<8;i++){
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	3301      	adds	r3, #1
 80015b8:	73fb      	strb	r3, [r7, #15]
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	2b07      	cmp	r3, #7
 80015be:	d9c7      	bls.n	8001550 <Driver_OLED_Fill+0x18>
        }
    }
    /* 等待最后一个数据发送完 */
    _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
 80015c0:	bf00      	nop
 80015c2:	4908      	ldr	r1, [pc, #32]	; (80015e4 <Driver_OLED_Fill+0xac>)
 80015c4:	4804      	ldr	r0, [pc, #16]	; (80015d8 <Driver_OLED_Fill+0xa0>)
 80015c6:	f004 fff1 	bl	80065ac <I2C_GetFlagStatus>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f8      	beq.n	80015c2 <Driver_OLED_Fill+0x8a>
    
}
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40005800 	andmi	r5, r0, r0, lsl #16
 80015dc:	00070084 	andeq	r0, r7, r4, lsl #1
 80015e0:	00070080 	andeq	r0, r7, r0, lsl #1
 80015e4:	10000004 	andne	r0, r0, r4

080015e8 <Driver_OLED_ClearRow>:

/* 清除一行,行距地址line 0-7 */
void Driver_OLED_ClearRow(uint8_t line){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
    uint8_t j;
    /* 设置页地址0-7，设置显示位置—列低地址，设置显示位置—列高地址 */
    uint8_t command[] = {0x00, 0x10};
 80015f2:	2300      	movs	r3, #0
 80015f4:	733b      	strb	r3, [r7, #12]
 80015f6:	2310      	movs	r3, #16
 80015f8:	737b      	strb	r3, [r7, #13]
    /* 开始发送指令 */
    Driver_OLED_Send_START(OLED_COMMAND);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f7ff ff2c 	bl	8001458 <Driver_OLED_Send_START>
    /* 设置页地址0-7 */
    I2C_SendData(OLED_HARDWARE, 0xb0+line);
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	3b50      	subs	r3, #80	; 0x50
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4619      	mov	r1, r3
 8001608:	481a      	ldr	r0, [pc, #104]	; (8001674 <Driver_OLED_ClearRow+0x8c>)
 800160a:	f004 ff51 	bl	80064b0 <I2C_SendData>
    _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTED) == ERROR);
 800160e:	bf00      	nop
 8001610:	4919      	ldr	r1, [pc, #100]	; (8001678 <Driver_OLED_ClearRow+0x90>)
 8001612:	4818      	ldr	r0, [pc, #96]	; (8001674 <Driver_OLED_ClearRow+0x8c>)
 8001614:	f004 ff9a 	bl	800654c <I2C_CheckEvent>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f8      	beq.n	8001610 <Driver_OLED_ClearRow+0x28>
    /* 发送剩下的指令 */
    Driver_OLED_SendDatas(command, sizeof(command));
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	2102      	movs	r1, #2
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff55 	bl	80014d4 <Driver_OLED_SendDatas>
    /* 开始发送数据 */
    Driver_OLED_Send_START(OLED_DATA);
 800162a:	2040      	movs	r0, #64	; 0x40
 800162c:	f7ff ff14 	bl	8001458 <Driver_OLED_Send_START>
    for(j=0;j<128;j++){
 8001630:	2300      	movs	r3, #0
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	e00e      	b.n	8001654 <Driver_OLED_ClearRow+0x6c>
        /* 全黑 */
        I2C_SendData(OLED_HARDWARE, 0x0);
 8001636:	2100      	movs	r1, #0
 8001638:	480e      	ldr	r0, [pc, #56]	; (8001674 <Driver_OLED_ClearRow+0x8c>)
 800163a:	f004 ff39 	bl	80064b0 <I2C_SendData>
        /* 等待数据发送完成 */
        _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 800163e:	bf00      	nop
 8001640:	490e      	ldr	r1, [pc, #56]	; (800167c <Driver_OLED_ClearRow+0x94>)
 8001642:	480c      	ldr	r0, [pc, #48]	; (8001674 <Driver_OLED_ClearRow+0x8c>)
 8001644:	f004 ff82 	bl	800654c <I2C_CheckEvent>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f8      	beq.n	8001640 <Driver_OLED_ClearRow+0x58>
    for(j=0;j<128;j++){
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	3301      	adds	r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
 8001654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001658:	2b00      	cmp	r3, #0
 800165a:	daec      	bge.n	8001636 <Driver_OLED_ClearRow+0x4e>
    }
    /* 等待最后一个数据发送完 */
    _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
 800165c:	bf00      	nop
 800165e:	4908      	ldr	r1, [pc, #32]	; (8001680 <Driver_OLED_ClearRow+0x98>)
 8001660:	4804      	ldr	r0, [pc, #16]	; (8001674 <Driver_OLED_ClearRow+0x8c>)
 8001662:	f004 ffa3 	bl	80065ac <I2C_GetFlagStatus>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f8      	beq.n	800165e <Driver_OLED_ClearRow+0x76>
    
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40005800 	andmi	r5, r0, r0, lsl #16
 8001678:	00070084 	andeq	r0, r7, r4, lsl #1
 800167c:	00070080 	andeq	r0, r7, r0, lsl #1
 8001680:	10000004 	andne	r0, r0, r4

08001684 <Driver_OLED_Set_Position>:

/* 设置位置X：0-127，Y：0-7，这是命令*/
void Driver_OLED_Set_Position(uint8_t x, uint8_t y){
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	460a      	mov	r2, r1
 800168e:	71fb      	strb	r3, [r7, #7]
 8001690:	4613      	mov	r3, r2
 8001692:	71bb      	strb	r3, [r7, #6]
    /* 发送列0-7 */
    I2C_SendData(OLED_HARDWARE, 0xb0 + y);
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	3b50      	subs	r3, #80	; 0x50
 8001698:	b2db      	uxtb	r3, r3
 800169a:	4619      	mov	r1, r3
 800169c:	4818      	ldr	r0, [pc, #96]	; (8001700 <Driver_OLED_Set_Position+0x7c>)
 800169e:	f004 ff07 	bl	80064b0 <I2C_SendData>
    _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 80016a2:	bf00      	nop
 80016a4:	4917      	ldr	r1, [pc, #92]	; (8001704 <Driver_OLED_Set_Position+0x80>)
 80016a6:	4816      	ldr	r0, [pc, #88]	; (8001700 <Driver_OLED_Set_Position+0x7c>)
 80016a8:	f004 ff50 	bl	800654c <I2C_CheckEvent>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f8      	beq.n	80016a4 <Driver_OLED_Set_Position+0x20>
    I2C_SendData(OLED_HARDWARE, ((x&0xf0)>>4)|0x10);
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	f043 0310 	orr.w	r3, r3, #16
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	4619      	mov	r1, r3
 80016c0:	480f      	ldr	r0, [pc, #60]	; (8001700 <Driver_OLED_Set_Position+0x7c>)
 80016c2:	f004 fef5 	bl	80064b0 <I2C_SendData>
    _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 80016c6:	bf00      	nop
 80016c8:	490e      	ldr	r1, [pc, #56]	; (8001704 <Driver_OLED_Set_Position+0x80>)
 80016ca:	480d      	ldr	r0, [pc, #52]	; (8001700 <Driver_OLED_Set_Position+0x7c>)
 80016cc:	f004 ff3e 	bl	800654c <I2C_CheckEvent>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f8      	beq.n	80016c8 <Driver_OLED_Set_Position+0x44>
    I2C_SendData(OLED_HARDWARE, ( x & 0x0f));
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	f003 030f 	and.w	r3, r3, #15
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	4619      	mov	r1, r3
 80016e0:	4807      	ldr	r0, [pc, #28]	; (8001700 <Driver_OLED_Set_Position+0x7c>)
 80016e2:	f004 fee5 	bl	80064b0 <I2C_SendData>
    _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTED) == ERROR);
 80016e6:	bf00      	nop
 80016e8:	4907      	ldr	r1, [pc, #28]	; (8001708 <Driver_OLED_Set_Position+0x84>)
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <Driver_OLED_Set_Position+0x7c>)
 80016ec:	f004 ff2e 	bl	800654c <I2C_CheckEvent>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f8      	beq.n	80016e8 <Driver_OLED_Set_Position+0x64>
    
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40005800 	andmi	r5, r0, r0, lsl #16
 8001704:	00070080 	andeq	r0, r7, r0, lsl #1
 8001708:	00070084 	andeq	r0, r7, r4, lsl #1

0800170c <Driver_OLED_Show_Char>:

/* 显示字符，这是数据 */
void Driver_OLED_Show_Char(uint8_t x, uint8_t y, uint8_t chr, uint8_t charSize, uint8_t rever){
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	4604      	mov	r4, r0
 8001714:	4608      	mov	r0, r1
 8001716:	4611      	mov	r1, r2
 8001718:	461a      	mov	r2, r3
 800171a:	4623      	mov	r3, r4
 800171c:	71fb      	strb	r3, [r7, #7]
 800171e:	4603      	mov	r3, r0
 8001720:	71bb      	strb	r3, [r7, #6]
 8001722:	460b      	mov	r3, r1
 8001724:	717b      	strb	r3, [r7, #5]
 8001726:	4613      	mov	r3, r2
 8001728:	713b      	strb	r3, [r7, #4]
    uint8_t charIndex = 0,i;
 800172a:	2300      	movs	r3, #0
 800172c:	73bb      	strb	r3, [r7, #14]
    charIndex = chr-0x20;
 800172e:	797b      	ldrb	r3, [r7, #5]
 8001730:	3b20      	subs	r3, #32
 8001732:	73bb      	strb	r3, [r7, #14]
    /* 转换显示位置 */
    y = (x/128 + y) % 64;
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	09db      	lsrs	r3, r3, #7
 8001738:	b2da      	uxtb	r2, r3
 800173a:	79bb      	ldrb	r3, [r7, #6]
 800173c:	4413      	add	r3, r2
 800173e:	b2db      	uxtb	r3, r3
 8001740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001744:	71bb      	strb	r3, [r7, #6]
    x = x%128;
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800174c:	71fb      	strb	r3, [r7, #7]
    /* 选择显示文字大小 */
    if(charSize == 16){
 800174e:	793b      	ldrb	r3, [r7, #4]
 8001750:	2b10      	cmp	r3, #16
 8001752:	d15e      	bne.n	8001812 <Driver_OLED_Show_Char+0x106>
        /* 发送第一行 */
        Driver_OLED_Send_START(OLED_COMMAND);
 8001754:	2000      	movs	r0, #0
 8001756:	f7ff fe7f 	bl	8001458 <Driver_OLED_Send_START>
           
        Driver_OLED_Set_Position(x,y);
 800175a:	79ba      	ldrb	r2, [r7, #6]
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff8f 	bl	8001684 <Driver_OLED_Set_Position>
        Driver_OLED_Send_START(OLED_DATA);
 8001766:	2040      	movs	r0, #64	; 0x40
 8001768:	f7ff fe76 	bl	8001458 <Driver_OLED_Send_START>
        /* 发送字符数据 */
        for(i=0;i<8;i++) {
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]
 8001770:	e021      	b.n	80017b6 <Driver_OLED_Show_Char+0xaa>
            
            I2C_SendData(OLED_HARDWARE, rever ? ~F8X16[charIndex*16+i] : F8X16[charIndex*16+i]);
 8001772:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d008      	beq.n	800178c <Driver_OLED_Show_Char+0x80>
 800177a:	7bbb      	ldrb	r3, [r7, #14]
 800177c:	011a      	lsls	r2, r3, #4
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	4413      	add	r3, r2
 8001782:	4a48      	ldr	r2, [pc, #288]	; (80018a4 <Driver_OLED_Show_Char+0x198>)
 8001784:	5cd3      	ldrb	r3, [r2, r3]
 8001786:	43db      	mvns	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	e005      	b.n	8001798 <Driver_OLED_Show_Char+0x8c>
 800178c:	7bbb      	ldrb	r3, [r7, #14]
 800178e:	011a      	lsls	r2, r3, #4
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	4413      	add	r3, r2
 8001794:	4a43      	ldr	r2, [pc, #268]	; (80018a4 <Driver_OLED_Show_Char+0x198>)
 8001796:	5cd3      	ldrb	r3, [r2, r3]
 8001798:	4619      	mov	r1, r3
 800179a:	4843      	ldr	r0, [pc, #268]	; (80018a8 <Driver_OLED_Show_Char+0x19c>)
 800179c:	f004 fe88 	bl	80064b0 <I2C_SendData>
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 80017a0:	bf00      	nop
 80017a2:	4942      	ldr	r1, [pc, #264]	; (80018ac <Driver_OLED_Show_Char+0x1a0>)
 80017a4:	4840      	ldr	r0, [pc, #256]	; (80018a8 <Driver_OLED_Show_Char+0x19c>)
 80017a6:	f004 fed1 	bl	800654c <I2C_CheckEvent>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f8      	beq.n	80017a2 <Driver_OLED_Show_Char+0x96>
        for(i=0;i<8;i++) {
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	3301      	adds	r3, #1
 80017b4:	73fb      	strb	r3, [r7, #15]
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	2b07      	cmp	r3, #7
 80017ba:	d9da      	bls.n	8001772 <Driver_OLED_Show_Char+0x66>
        }
        //发送第二行
        Driver_OLED_Send_START(OLED_COMMAND);
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff fe4b 	bl	8001458 <Driver_OLED_Send_START>
        Driver_OLED_Set_Position(x,y+1);
 80017c2:	79bb      	ldrb	r3, [r7, #6]
 80017c4:	3301      	adds	r3, #1
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff59 	bl	8001684 <Driver_OLED_Set_Position>
        Driver_OLED_Send_START(OLED_DATA);
 80017d2:	2040      	movs	r0, #64	; 0x40
 80017d4:	f7ff fe40 	bl	8001458 <Driver_OLED_Send_START>
        /* 发送字符数据 */
        for(i=0;i<8;i++){
 80017d8:	2300      	movs	r3, #0
 80017da:	73fb      	strb	r3, [r7, #15]
 80017dc:	e015      	b.n	800180a <Driver_OLED_Show_Char+0xfe>
            I2C_SendData(OLED_HARDWARE, F8X16[charIndex*16+i+8]);
 80017de:	7bbb      	ldrb	r3, [r7, #14]
 80017e0:	011a      	lsls	r2, r3, #4
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	4413      	add	r3, r2
 80017e6:	3308      	adds	r3, #8
 80017e8:	4a2e      	ldr	r2, [pc, #184]	; (80018a4 <Driver_OLED_Show_Char+0x198>)
 80017ea:	5cd3      	ldrb	r3, [r2, r3]
 80017ec:	4619      	mov	r1, r3
 80017ee:	482e      	ldr	r0, [pc, #184]	; (80018a8 <Driver_OLED_Show_Char+0x19c>)
 80017f0:	f004 fe5e 	bl	80064b0 <I2C_SendData>
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 80017f4:	bf00      	nop
 80017f6:	492d      	ldr	r1, [pc, #180]	; (80018ac <Driver_OLED_Show_Char+0x1a0>)
 80017f8:	482b      	ldr	r0, [pc, #172]	; (80018a8 <Driver_OLED_Show_Char+0x19c>)
 80017fa:	f004 fea7 	bl	800654c <I2C_CheckEvent>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f8      	beq.n	80017f6 <Driver_OLED_Show_Char+0xea>
        for(i=0;i<8;i++){
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	3301      	adds	r3, #1
 8001808:	73fb      	strb	r3, [r7, #15]
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	2b07      	cmp	r3, #7
 800180e:	d9e6      	bls.n	80017de <Driver_OLED_Show_Char+0xd2>
 8001810:	e03b      	b.n	800188a <Driver_OLED_Show_Char+0x17e>
        }
    }else {	
        Driver_OLED_Send_START(OLED_COMMAND);
 8001812:	2000      	movs	r0, #0
 8001814:	f7ff fe20 	bl	8001458 <Driver_OLED_Send_START>
        Driver_OLED_Set_Position(x,y);
 8001818:	79ba      	ldrb	r2, [r7, #6]
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff30 	bl	8001684 <Driver_OLED_Set_Position>
        Driver_OLED_Send_START(OLED_DATA);
 8001824:	2040      	movs	r0, #64	; 0x40
 8001826:	f7ff fe17 	bl	8001458 <Driver_OLED_Send_START>
        for(i=0;i<6;i++){
 800182a:	2300      	movs	r3, #0
 800182c:	73fb      	strb	r3, [r7, #15]
 800182e:	e029      	b.n	8001884 <Driver_OLED_Show_Char+0x178>
            I2C_SendData(OLED_HARDWARE, rever ? ~F6x8[charIndex][i] : F6x8[charIndex][i]);
 8001830:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00c      	beq.n	8001852 <Driver_OLED_Show_Char+0x146>
 8001838:	7bba      	ldrb	r2, [r7, #14]
 800183a:	7bf9      	ldrb	r1, [r7, #15]
 800183c:	481c      	ldr	r0, [pc, #112]	; (80018b0 <Driver_OLED_Show_Char+0x1a4>)
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4403      	add	r3, r0
 8001848:	440b      	add	r3, r1
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	43db      	mvns	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	e009      	b.n	8001866 <Driver_OLED_Show_Char+0x15a>
 8001852:	7bba      	ldrb	r2, [r7, #14]
 8001854:	7bf9      	ldrb	r1, [r7, #15]
 8001856:	4816      	ldr	r0, [pc, #88]	; (80018b0 <Driver_OLED_Show_Char+0x1a4>)
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4403      	add	r3, r0
 8001862:	440b      	add	r3, r1
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	4619      	mov	r1, r3
 8001868:	480f      	ldr	r0, [pc, #60]	; (80018a8 <Driver_OLED_Show_Char+0x19c>)
 800186a:	f004 fe21 	bl	80064b0 <I2C_SendData>
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);
 800186e:	bf00      	nop
 8001870:	490e      	ldr	r1, [pc, #56]	; (80018ac <Driver_OLED_Show_Char+0x1a0>)
 8001872:	480d      	ldr	r0, [pc, #52]	; (80018a8 <Driver_OLED_Show_Char+0x19c>)
 8001874:	f004 fe6a 	bl	800654c <I2C_CheckEvent>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f8      	beq.n	8001870 <Driver_OLED_Show_Char+0x164>
        for(i=0;i<6;i++){
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	3301      	adds	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	2b05      	cmp	r3, #5
 8001888:	d9d2      	bls.n	8001830 <Driver_OLED_Show_Char+0x124>
        }
    }
    /* 等待最后一个数据发送完 */
    _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
 800188a:	bf00      	nop
 800188c:	4909      	ldr	r1, [pc, #36]	; (80018b4 <Driver_OLED_Show_Char+0x1a8>)
 800188e:	4806      	ldr	r0, [pc, #24]	; (80018a8 <Driver_OLED_Show_Char+0x19c>)
 8001890:	f004 fe8c 	bl	80065ac <I2C_GetFlagStatus>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f8      	beq.n	800188c <Driver_OLED_Show_Char+0x180>
    
}
 800189a:	bf00      	nop
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd90      	pop	{r4, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	08009ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp, ip, pc}
 80018a8:	40005800 	andmi	r5, r0, r0, lsl #16
 80018ac:	00070080 	andeq	r0, r7, r0, lsl #1
 80018b0:	08009888 	stmdaeq	r0, {r3, r7, fp, ip, pc}
 80018b4:	10000004 	andne	r0, r0, r4

080018b8 <Driver_OLED_ShowString>:

/* 显示字符串 */
void Driver_OLED_ShowString(uint8_t x,uint8_t y,uint8_t *chr,uint8_t Char_Size, uint8_t rever){
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af02      	add	r7, sp, #8
 80018be:	603a      	str	r2, [r7, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
 80018c6:	460b      	mov	r3, r1
 80018c8:	71bb      	strb	r3, [r7, #6]
 80018ca:	4613      	mov	r3, r2
 80018cc:	717b      	strb	r3, [r7, #5]
    uint8_t j=0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]
    while (chr[j] != '\0'){
 80018d2:	e029      	b.n	8001928 <Driver_OLED_ShowString+0x70>
        Driver_OLED_Show_Char(x,y,chr[j],Char_Size, rever);
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	4413      	add	r3, r2
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	797c      	ldrb	r4, [r7, #5]
 80018de:	79b9      	ldrb	r1, [r7, #6]
 80018e0:	79f8      	ldrb	r0, [r7, #7]
 80018e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	4623      	mov	r3, r4
 80018ea:	f7ff ff0f 	bl	800170c <Driver_OLED_Show_Char>
        if(Char_Size == 16){
 80018ee:	797b      	ldrb	r3, [r7, #5]
 80018f0:	2b10      	cmp	r3, #16
 80018f2:	d10b      	bne.n	800190c <Driver_OLED_ShowString+0x54>
            x+=8;
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	3308      	adds	r3, #8
 80018f8:	71fb      	strb	r3, [r7, #7]
            if(x>120){x=0;y+=2;}
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b78      	cmp	r3, #120	; 0x78
 80018fe:	d910      	bls.n	8001922 <Driver_OLED_ShowString+0x6a>
 8001900:	2300      	movs	r3, #0
 8001902:	71fb      	strb	r3, [r7, #7]
 8001904:	79bb      	ldrb	r3, [r7, #6]
 8001906:	3302      	adds	r3, #2
 8001908:	71bb      	strb	r3, [r7, #6]
 800190a:	e00a      	b.n	8001922 <Driver_OLED_ShowString+0x6a>
        }else{
            x+=6;
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	3306      	adds	r3, #6
 8001910:	71fb      	strb	r3, [r7, #7]
            if(x>120){x=0;y+=1;}
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2b78      	cmp	r3, #120	; 0x78
 8001916:	d904      	bls.n	8001922 <Driver_OLED_ShowString+0x6a>
 8001918:	2300      	movs	r3, #0
 800191a:	71fb      	strb	r3, [r7, #7]
 800191c:	79bb      	ldrb	r3, [r7, #6]
 800191e:	3301      	adds	r3, #1
 8001920:	71bb      	strb	r3, [r7, #6]
        }
        j++;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	3301      	adds	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
    while (chr[j] != '\0'){
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	4413      	add	r3, r2
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1cf      	bne.n	80018d4 <Driver_OLED_ShowString+0x1c>
	}
    
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	bd90      	pop	{r4, r7, pc}

0800193c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4604      	mov	r4, r0
 8001944:	4608      	mov	r0, r1
 8001946:	4611      	mov	r1, r2
 8001948:	461a      	mov	r2, r3
 800194a:	4623      	mov	r3, r4
 800194c:	71fb      	strb	r3, [r7, #7]
 800194e:	4603      	mov	r3, r0
 8001950:	71bb      	strb	r3, [r7, #6]
 8001952:	460b      	mov	r3, r1
 8001954:	80bb      	strh	r3, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2b08      	cmp	r3, #8
 800195e:	d902      	bls.n	8001966 <socket+0x2a>
 8001960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001964:	e0e0      	b.n	8001b28 <socket+0x1ec>
	switch(protocol)
 8001966:	79bb      	ldrb	r3, [r7, #6]
 8001968:	2b01      	cmp	r3, #1
 800196a:	db03      	blt.n	8001974 <socket+0x38>
 800196c:	2b02      	cmp	r3, #2
 800196e:	dd04      	ble.n	800197a <socket+0x3e>
 8001970:	2b04      	cmp	r3, #4
 8001972:	d002      	beq.n	800197a <socket+0x3e>
      case Sn_MR_IPRAW :
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001974:	f06f 0304 	mvn.w	r3, #4
 8001978:	e0d6      	b.n	8001b28 <socket+0x1ec>
         break;
 800197a:	bf00      	nop
	}
	if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	f003 0306 	and.w	r3, r3, #6
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <socket+0x50>
 8001986:	f06f 0305 	mvn.w	r3, #5
 800198a:	e0cd      	b.n	8001b28 <socket+0x1ec>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d028      	beq.n	80019e4 <socket+0xa8>
	{
   	switch(protocol)
 8001992:	79bb      	ldrb	r3, [r7, #6]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d002      	beq.n	800199e <socket+0x62>
 8001998:	2b02      	cmp	r3, #2
 800199a:	d008      	beq.n	80019ae <socket+0x72>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800199c:	e022      	b.n	80019e4 <socket+0xa8>
   	      if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d11a      	bne.n	80019de <socket+0xa2>
 80019a8:	f06f 0305 	mvn.w	r3, #5
 80019ac:	e0bc      	b.n	8001b28 <socket+0x1ec>
   	      if(flag & SF_IGMP_VER2)
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	f003 0320 	and.w	r3, r3, #32
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <socket+0x8a>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80019b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	db02      	blt.n	80019c6 <socket+0x8a>
 80019c0:	f06f 0305 	mvn.w	r3, #5
 80019c4:	e0b0      	b.n	8001b28 <socket+0x1ec>
      	      if(flag & SF_UNI_BLOCK)
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d008      	beq.n	80019e2 <socket+0xa6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80019d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	db04      	blt.n	80019e2 <socket+0xa6>
 80019d8:	f06f 0305 	mvn.w	r3, #5
 80019dc:	e0a4      	b.n	8001b28 <socket+0x1ec>
   	      break;
 80019de:	bf00      	nop
 80019e0:	e000      	b.n	80019e4 <socket+0xa8>
   	      break;
 80019e2:	bf00      	nop
   	}
   }
	close(sn);
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f8ac 	bl	8001b44 <close>
	setSn_MR(sn, (protocol | (flag & 0xF0)));
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	3301      	adds	r3, #1
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4618      	mov	r0, r3
 80019f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019fa:	f023 030f 	bic.w	r3, r3, #15
 80019fe:	b25a      	sxtb	r2, r3
 8001a00:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	b25b      	sxtb	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f001 fc34 	bl	8003278 <WIZCHIP_WRITE>
	if(!port)
 8001a10:	88bb      	ldrh	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d110      	bne.n	8001a38 <socket+0xfc>
	{
	   port = sock_any_port++;
 8001a16:	4b46      	ldr	r3, [pc, #280]	; (8001b30 <socket+0x1f4>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	b291      	uxth	r1, r2
 8001a1e:	4a44      	ldr	r2, [pc, #272]	; (8001b30 <socket+0x1f4>)
 8001a20:	8011      	strh	r1, [r2, #0]
 8001a22:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001a24:	4b42      	ldr	r3, [pc, #264]	; (8001b30 <socket+0x1f4>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d103      	bne.n	8001a38 <socket+0xfc>
 8001a30:	4b3f      	ldr	r3, [pc, #252]	; (8001b30 <socket+0x1f4>)
 8001a32:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001a36:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a44:	461a      	mov	r2, r3
 8001a46:	88bb      	ldrh	r3, [r7, #4]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4610      	mov	r0, r2
 8001a52:	f001 fc11 	bl	8003278 <WIZCHIP_WRITE>
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a62:	461a      	mov	r2, r3
 8001a64:	88bb      	ldrh	r3, [r7, #4]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	f001 fc04 	bl	8003278 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	3301      	adds	r3, #1
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f001 fbfa 	bl	8003278 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001a84:	bf00      	nop
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001a92:	4618      	mov	r0, r3
 8001a94:	f001 fbc0 	bl	8003218 <WIZCHIP_READ>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f3      	bne.n	8001a86 <socket+0x14a>
   // 这儿没有清空socket 的io mode
   sock_io_mode &= ~(1 << sn);      //FIX:清除相应的位
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <socket+0x1f8>)
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <socket+0x1f8>)
 8001aba:	801a      	strh	r2, [r3, #0]
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001abc:	78fb      	ldrb	r3, [r7, #3]
 8001abe:	f003 0201 	and.w	r2, r3, #1
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <socket+0x1f8>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <socket+0x1f8>)
 8001ad8:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	2201      	movs	r2, #1
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	b21a      	sxth	r2, r3
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <socket+0x1fc>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	4013      	ands	r3, r2
 8001af0:	b21b      	sxth	r3, r3
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <socket+0x1fc>)
 8001af6:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	4a10      	ldr	r2, [pc, #64]	; (8001b3c <socket+0x200>)
 8001afc:	2100      	movs	r1, #0
 8001afe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = 0;
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <socket+0x204>)
 8001b06:	2100      	movs	r1, #0
 8001b08:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001b0a:	bf00      	nop
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	3301      	adds	r3, #1
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f001 fb7d 	bl	8003218 <WIZCHIP_READ>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f3      	beq.n	8001b0c <socket+0x1d0>
   return (int8_t)sn;
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd90      	pop	{r4, r7, pc}
 8001b30:	20000080 	andcs	r0, r0, r0, lsl #1
 8001b34:	200000f8 	strdcs	r0, [r0], -r8
 8001b38:	200000fa 	strdcs	r0, [r0], -sl
 8001b3c:	200000fc 	strdcs	r0, [r0], -ip
 8001b40:	2000010c 	andcs	r0, r0, ip, lsl #2

08001b44 <close>:

int8_t close(uint8_t sn)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d902      	bls.n	8001b5a <close+0x16>
 8001b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b58:	e046      	b.n	8001be8 <close+0xa4>
	
	setSn_CR(sn,Sn_CR_CLOSE);
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	3301      	adds	r3, #1
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b66:	2110      	movs	r1, #16
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f001 fb85 	bl	8003278 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001b6e:	bf00      	nop
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	3301      	adds	r3, #1
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f001 fb4b 	bl	8003218 <WIZCHIP_READ>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f3      	bne.n	8001b70 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001b94:	211f      	movs	r1, #31
 8001b96:	4618      	mov	r0, r3
 8001b98:	f001 fb6e 	bl	8003278 <WIZCHIP_WRITE>
	sock_is_sending &= ~(1<<sn);
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	b21b      	sxth	r3, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	b21a      	sxth	r2, r3
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <close+0xac>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <close+0xac>)
 8001bb8:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <close+0xb0>)
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	4a0c      	ldr	r2, [pc, #48]	; (8001bf8 <close+0xb4>)
 8001bc8:	2100      	movs	r1, #0
 8001bca:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001bcc:	bf00      	nop
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f001 fb1c 	bl	8003218 <WIZCHIP_READ>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f3      	bne.n	8001bce <close+0x8a>
	return SOCK_OK;
 8001be6:	2301      	movs	r3, #1
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	200000fa 	strdcs	r0, [r0], -sl
 8001bf4:	200000fc 	strdcs	r0, [r0], -ip
 8001bf8:	2000010c 	andcs	r0, r0, ip, lsl #2

08001bfc <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	6039      	str	r1, [r7, #0]
 8001c06:	71fb      	strb	r3, [r7, #7]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d902      	bls.n	8001c18 <connect+0x1c>
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c16:	e0a1      	b.n	8001d5c <connect+0x160>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4618      	mov	r0, r3
 8001c22:	f001 faf9 	bl	8003218 <WIZCHIP_READ>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d002      	beq.n	8001c36 <connect+0x3a>
 8001c30:	f06f 0304 	mvn.w	r3, #4
 8001c34:	e092      	b.n	8001d5c <connect+0x160>
   CHECK_SOCKINIT();
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001c42:	4618      	mov	r0, r3
 8001c44:	f001 fae8 	bl	8003218 <WIZCHIP_READ>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b13      	cmp	r3, #19
 8001c4c:	d002      	beq.n	8001c54 <connect+0x58>
 8001c4e:	f06f 0302 	mvn.w	r3, #2
 8001c52:	e083      	b.n	8001d5c <connect+0x160>
	if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c5c:	d003      	beq.n	8001c66 <connect+0x6a>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d102      	bne.n	8001c6c <connect+0x70>
 8001c66:	f06f 030b 	mvn.w	r3, #11
 8001c6a:	e077      	b.n	8001d5c <connect+0x160>
	if(port == 0) return SOCKERR_PORTZERO;
 8001c6c:	88bb      	ldrh	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <connect+0x7c>
 8001c72:	f06f 030a 	mvn.w	r3, #10
 8001c76:	e071      	b.n	8001d5c <connect+0x160>
	setSn_DIPR(sn,addr);
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001c84:	2204      	movs	r2, #4
 8001c86:	6839      	ldr	r1, [r7, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f001 fb6f 	bl	800336c <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	3301      	adds	r3, #1
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	88bb      	ldrh	r3, [r7, #4]
 8001c9e:	0a1b      	lsrs	r3, r3, #8
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	f001 fae6 	bl	8003278 <WIZCHIP_WRITE>
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001cb8:	461a      	mov	r2, r3
 8001cba:	88bb      	ldrh	r3, [r7, #4]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	f001 fad9 	bl	8003278 <WIZCHIP_WRITE>
   #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
      setSUBR(0);
   #endif
	setSn_CR(sn,Sn_CR_CONNECT);
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	3301      	adds	r3, #1
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001cd2:	2104      	movs	r1, #4
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f001 facf 	bl	8003278 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001cda:	bf00      	nop
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f001 fa95 	bl	8003218 <WIZCHIP_READ>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f3      	bne.n	8001cdc <connect+0xe0>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <connect+0x168>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	fa42 f303 	asr.w	r3, r2, r3
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01c      	beq.n	8001d42 <connect+0x146>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e027      	b.n	8001d5c <connect+0x160>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {   
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	3301      	adds	r3, #1
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f001 fa7d 	bl	8003218 <WIZCHIP_READ>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00c      	beq.n	8001d42 <connect+0x146>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d34:	2108      	movs	r1, #8
 8001d36:	4618      	mov	r0, r3
 8001d38:	f001 fa9e 	bl	8003278 <WIZCHIP_WRITE>
         #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
            setSUBR((uint8_t*)"\x00\x00\x00\x00");
         #endif
         return SOCKERR_TIMEOUT;
 8001d3c:	f06f 030c 	mvn.w	r3, #12
 8001d40:	e00c      	b.n	8001d5c <connect+0x160>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	3301      	adds	r3, #1
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f001 fa62 	bl	8003218 <WIZCHIP_READ>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b17      	cmp	r3, #23
 8001d58:	d1d8      	bne.n	8001d0c <connect+0x110>
	}
   #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
      setSUBR((uint8_t*)"\x00\x00\x00\x00");
   #endif
   
   return SOCK_OK;
 8001d5a:	2301      	movs	r3, #1
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	200000f8 	strdcs	r0, [r0], -r8

08001d68 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	71fb      	strb	r3, [r7, #7]
 8001d74:	4613      	mov	r3, r2
 8001d76:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d902      	bls.n	8001d8c <send+0x24>
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d8a:	e0de      	b.n	8001f4a <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	3301      	adds	r3, #1
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4618      	mov	r0, r3
 8001d96:	f001 fa3f 	bl	8003218 <WIZCHIP_READ>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d002      	beq.n	8001daa <send+0x42>
 8001da4:	f06f 0304 	mvn.w	r3, #4
 8001da8:	e0cf      	b.n	8001f4a <send+0x1e2>
   CHECK_SOCKDATA();
 8001daa:	88bb      	ldrh	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <send+0x4e>
 8001db0:	f06f 030d 	mvn.w	r3, #13
 8001db4:	e0c9      	b.n	8001f4a <send+0x1e2>
   tmp = getSn_SR(sn);
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	3301      	adds	r3, #1
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f001 fa28 	bl	8003218 <WIZCHIP_READ>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	2b17      	cmp	r3, #23
 8001dd0:	d005      	beq.n	8001dde <send+0x76>
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	2b1c      	cmp	r3, #28
 8001dd6:	d002      	beq.n	8001dde <send+0x76>
 8001dd8:	f06f 0306 	mvn.w	r3, #6
 8001ddc:	e0b5      	b.n	8001f4a <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8001dde:	4b5d      	ldr	r3, [pc, #372]	; (8001f54 <send+0x1ec>)
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	fa42 f303 	asr.w	r3, r2, r3
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d039      	beq.n	8001e66 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	3301      	adds	r3, #1
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f001 fa0a 	bl	8003218 <WIZCHIP_READ>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d019      	beq.n	8001e4a <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001e22:	2110      	movs	r1, #16
 8001e24:	4618      	mov	r0, r3
 8001e26:	f001 fa27 	bl	8003278 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCKERR_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	b21b      	sxth	r3, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	b21a      	sxth	r2, r3
 8001e38:	4b46      	ldr	r3, [pc, #280]	; (8001f54 <send+0x1ec>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	4013      	ands	r3, r2
 8001e40:	b21b      	sxth	r3, r3
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	4b43      	ldr	r3, [pc, #268]	; (8001f54 <send+0x1ec>)
 8001e46:	801a      	strh	r2, [r3, #0]
 8001e48:	e00d      	b.n	8001e66 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d006      	beq.n	8001e62 <send+0xfa>
      {
         close(sn);
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fe74 	bl	8001b44 <close>
         return SOCKERR_TIMEOUT;
 8001e5c:	f06f 030c 	mvn.w	r3, #12
 8001e60:	e073      	b.n	8001f4a <send+0x1e2>
      }
      else return SOCK_BUSY;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e071      	b.n	8001f4a <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001e72:	4618      	mov	r0, r3
 8001e74:	f001 f9d0 	bl	8003218 <WIZCHIP_READ>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	029b      	lsls	r3, r3, #10
 8001e7e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001e80:	88ba      	ldrh	r2, [r7, #4]
 8001e82:	89bb      	ldrh	r3, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d901      	bls.n	8001e8c <send+0x124>
 8001e88:	89bb      	ldrh	r3, [r7, #12]
 8001e8a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f001 fab4 	bl	80033fc <getSn_TX_FSR>
 8001e94:	4603      	mov	r3, r0
 8001e96:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f001 f9b7 	bl	8003218 <WIZCHIP_READ>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	2b17      	cmp	r3, #23
 8001eb2:	d009      	beq.n	8001ec8 <send+0x160>
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	2b1c      	cmp	r3, #28
 8001eb8:	d006      	beq.n	8001ec8 <send+0x160>
      {
         close(sn);
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fe41 	bl	8001b44 <close>
         return SOCKERR_SOCKSTATUS;
 8001ec2:	f06f 0306 	mvn.w	r3, #6
 8001ec6:	e040      	b.n	8001f4a <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001ec8:	4b23      	ldr	r3, [pc, #140]	; (8001f58 <send+0x1f0>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	fa42 f303 	asr.w	r3, r2, r3
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <send+0x180>
 8001edc:	88ba      	ldrh	r2, [r7, #4]
 8001ede:	89bb      	ldrh	r3, [r7, #12]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d901      	bls.n	8001ee8 <send+0x180>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e030      	b.n	8001f4a <send+0x1e2>
      if(len <= freesize) break;
 8001ee8:	88ba      	ldrh	r2, [r7, #4]
 8001eea:	89bb      	ldrh	r3, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d900      	bls.n	8001ef2 <send+0x18a>
   }
 8001ef0:	e7cc      	b.n	8001e8c <send+0x124>
      if(len <= freesize) break;
 8001ef2:	bf00      	nop
   wiz_send_data(sn, buf, len);
 8001ef4:	88ba      	ldrh	r2, [r7, #4]
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	6839      	ldr	r1, [r7, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f001 fb16 	bl	800352c <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif
   setSn_CR(sn,Sn_CR_SEND);
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	3301      	adds	r3, #1
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001f0c:	2120      	movs	r1, #32
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f001 f9b2 	bl	8003278 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8001f14:	bf00      	nop
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001f22:	4618      	mov	r0, r3
 8001f24:	f001 f978 	bl	8003218 <WIZCHIP_READ>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f3      	bne.n	8001f16 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	2201      	movs	r2, #1
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <send+0x1ec>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <send+0x1ec>)
 8001f46:	801a      	strh	r2, [r3, #0]
   return len;
 8001f48:	88bb      	ldrh	r3, [r7, #4]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200000fa 	strdcs	r0, [r0], -sl
 8001f58:	200000f8 	strdcs	r0, [r0], -r8

08001f5c <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	81bb      	strh	r3, [r7, #12]
   CHECK_SOCKNUM();
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d902      	bls.n	8001f80 <recv+0x24>
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f7e:	e09c      	b.n	80020ba <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	3301      	adds	r3, #1
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f001 f945 	bl	8003218 <WIZCHIP_READ>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d002      	beq.n	8001f9e <recv+0x42>
 8001f98:	f06f 0304 	mvn.w	r3, #4
 8001f9c:	e08d      	b.n	80020ba <recv+0x15e>
   CHECK_SOCKDATA();
 8001f9e:	88bb      	ldrh	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d102      	bne.n	8001faa <recv+0x4e>
 8001fa4:	f06f 030d 	mvn.w	r3, #13
 8001fa8:	e087      	b.n	80020ba <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	3301      	adds	r3, #1
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f001 f92e 	bl	8003218 <WIZCHIP_READ>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	029b      	lsls	r3, r3, #10
 8001fc2:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8001fc4:	89ba      	ldrh	r2, [r7, #12]
 8001fc6:	88bb      	ldrh	r3, [r7, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d201      	bcs.n	8001fd0 <recv+0x74>
 8001fcc:	89bb      	ldrh	r3, [r7, #12]
 8001fce:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      recvsize = getSn_RX_RSR(sn);
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f001 fa5e 	bl	8003494 <getSn_RX_RSR>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f001 f915 	bl	8003218 <WIZCHIP_READ>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED)
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	2b17      	cmp	r3, #23
 8001ff6:	d026      	beq.n	8002046 <recv+0xea>
      {
         if(tmp == SOCK_CLOSE_WAIT)
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	2b1c      	cmp	r3, #28
 8001ffc:	d11c      	bne.n	8002038 <recv+0xdc>
         {
            if(recvsize != 0) break;
 8001ffe:	89bb      	ldrh	r3, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d133      	bne.n	800206c <recv+0x110>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	4618      	mov	r0, r3
 8002008:	f001 f9f8 	bl	80033fc <getSn_TX_FSR>
 800200c:	4603      	mov	r3, r0
 800200e:	461c      	mov	r4, r3
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	3301      	adds	r3, #1
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800201c:	4618      	mov	r0, r3
 800201e:	f001 f8fb 	bl	8003218 <WIZCHIP_READ>
 8002022:	4603      	mov	r3, r0
 8002024:	029b      	lsls	r3, r3, #10
 8002026:	429c      	cmp	r4, r3
 8002028:	d10d      	bne.n	8002046 <recv+0xea>
            {
               close(sn);
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fd89 	bl	8001b44 <close>
               return SOCKERR_SOCKSTATUS;
 8002032:	f06f 0306 	mvn.w	r3, #6
 8002036:	e040      	b.n	80020ba <recv+0x15e>
            }
         }
         else
         {
            close(sn);
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fd82 	bl	8001b44 <close>
            return SOCKERR_SOCKSTATUS;
 8002040:	f06f 0306 	mvn.w	r3, #6
 8002044:	e039      	b.n	80020ba <recv+0x15e>
         }
      }
      if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8002046:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <recv+0x168>)
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	fa42 f303 	asr.w	r3, r2, r3
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d004      	beq.n	8002064 <recv+0x108>
 800205a:	89bb      	ldrh	r3, [r7, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <recv+0x108>
 8002060:	2300      	movs	r3, #0
 8002062:	e02a      	b.n	80020ba <recv+0x15e>
      if(recvsize != 0) break;
 8002064:	89bb      	ldrh	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d102      	bne.n	8002070 <recv+0x114>
   };
 800206a:	e7b1      	b.n	8001fd0 <recv+0x74>
            if(recvsize != 0) break;
 800206c:	bf00      	nop
 800206e:	e000      	b.n	8002072 <recv+0x116>
      if(recvsize != 0) break;
 8002070:	bf00      	nop
   if(recvsize < len) len = recvsize;
 8002072:	89ba      	ldrh	r2, [r7, #12]
 8002074:	88bb      	ldrh	r3, [r7, #4]
 8002076:	429a      	cmp	r2, r3
 8002078:	d201      	bcs.n	800207e <recv+0x122>
 800207a:	89bb      	ldrh	r3, [r7, #12]
 800207c:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800207e:	88ba      	ldrh	r2, [r7, #4]
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	6839      	ldr	r1, [r7, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f001 faad 	bl	80035e4 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	3301      	adds	r3, #1
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002096:	2140      	movs	r1, #64	; 0x40
 8002098:	4618      	mov	r0, r3
 800209a:	f001 f8ed 	bl	8003278 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800209e:	bf00      	nop
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	3301      	adds	r3, #1
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80020ac:	4618      	mov	r0, r3
 80020ae:	f001 f8b3 	bl	8003218 <WIZCHIP_READ>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f3      	bne.n	80020a0 <recv+0x144>
   return len;
 80020b8:	88bb      	ldrh	r3, [r7, #4]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd90      	pop	{r4, r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200000f8 	strdcs	r0, [r0], -r8

080020c8 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	4603      	mov	r3, r0
 80020d4:	73fb      	strb	r3, [r7, #15]
 80020d6:	4613      	mov	r3, r2
 80020d8:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	82bb      	strh	r3, [r7, #20]
   CHECK_SOCKNUM();
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d902      	bls.n	80020ee <sendto+0x26>
 80020e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020ec:	e0ea      	b.n	80022c4 <sendto+0x1fc>
   switch(getSn_MR(sn) & 0x0F)
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	3301      	adds	r3, #1
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4618      	mov	r0, r3
 80020f8:	f001 f88e 	bl	8003218 <WIZCHIP_READ>
 80020fc:	4603      	mov	r3, r0
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	2b02      	cmp	r3, #2
 8002104:	d004      	beq.n	8002110 <sendto+0x48>
 8002106:	2b04      	cmp	r3, #4
 8002108:	d002      	beq.n	8002110 <sendto+0x48>
   {
      case Sn_MR_UDP:
      case Sn_MR_MACRAW:
         break;
      default:
         return SOCKERR_SOCKMODE;
 800210a:	f06f 0304 	mvn.w	r3, #4
 800210e:	e0d9      	b.n	80022c4 <sendto+0x1fc>
         break;
 8002110:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8002112:	89bb      	ldrh	r3, [r7, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d102      	bne.n	800211e <sendto+0x56>
 8002118:	f06f 030d 	mvn.w	r3, #13
 800211c:	e0d2      	b.n	80022c4 <sendto+0x1fc>
   if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d102      	bne.n	800212c <sendto+0x64>
 8002126:	f06f 030b 	mvn.w	r3, #11
 800212a:	e0cb      	b.n	80022c4 <sendto+0x1fc>
   if(port == 0)               return SOCKERR_PORTZERO;
 800212c:	8c3b      	ldrh	r3, [r7, #32]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d102      	bne.n	8002138 <sendto+0x70>
 8002132:	f06f 030a 	mvn.w	r3, #10
 8002136:	e0c5      	b.n	80022c4 <sendto+0x1fc>
   tmp = getSn_SR(sn);
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	3301      	adds	r3, #1
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002144:	4618      	mov	r0, r3
 8002146:	f001 f867 	bl	8003218 <WIZCHIP_READ>
 800214a:	4603      	mov	r3, r0
 800214c:	75fb      	strb	r3, [r7, #23]
   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
 800214e:	7dfb      	ldrb	r3, [r7, #23]
 8002150:	2b42      	cmp	r3, #66	; 0x42
 8002152:	d005      	beq.n	8002160 <sendto+0x98>
 8002154:	7dfb      	ldrb	r3, [r7, #23]
 8002156:	2b22      	cmp	r3, #34	; 0x22
 8002158:	d002      	beq.n	8002160 <sendto+0x98>
 800215a:	f06f 0306 	mvn.w	r3, #6
 800215e:	e0b1      	b.n	80022c4 <sendto+0x1fc>
      
   setSn_DIPR(sn,addr);
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	3301      	adds	r3, #1
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800216c:	2204      	movs	r2, #4
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4618      	mov	r0, r3
 8002172:	f001 f8fb 	bl	800336c <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	3301      	adds	r3, #1
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002182:	461a      	mov	r2, r3
 8002184:	8c3b      	ldrh	r3, [r7, #32]
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	b29b      	uxth	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	4619      	mov	r1, r3
 800218e:	4610      	mov	r0, r2
 8002190:	f001 f872 	bl	8003278 <WIZCHIP_WRITE>
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	3301      	adds	r3, #1
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80021a0:	461a      	mov	r2, r3
 80021a2:	8c3b      	ldrh	r3, [r7, #32]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	4619      	mov	r1, r3
 80021a8:	4610      	mov	r0, r2
 80021aa:	f001 f865 	bl	8003278 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	3301      	adds	r3, #1
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80021ba:	4618      	mov	r0, r3
 80021bc:	f001 f82c 	bl	8003218 <WIZCHIP_READ>
 80021c0:	4603      	mov	r3, r0
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	029b      	lsls	r3, r3, #10
 80021c6:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80021c8:	89ba      	ldrh	r2, [r7, #12]
 80021ca:	8abb      	ldrh	r3, [r7, #20]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d901      	bls.n	80021d4 <sendto+0x10c>
 80021d0:	8abb      	ldrh	r3, [r7, #20]
 80021d2:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f001 f910 	bl	80033fc <getSn_TX_FSR>
 80021dc:	4603      	mov	r3, r0
 80021de:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	3301      	adds	r3, #1
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80021ec:	4618      	mov	r0, r3
 80021ee:	f001 f813 	bl	8003218 <WIZCHIP_READ>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d102      	bne.n	80021fe <sendto+0x136>
 80021f8:	f06f 0303 	mvn.w	r3, #3
 80021fc:	e062      	b.n	80022c4 <sendto+0x1fc>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80021fe:	4b33      	ldr	r3, [pc, #204]	; (80022cc <sendto+0x204>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	fa42 f303 	asr.w	r3, r2, r3
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <sendto+0x156>
 8002212:	89ba      	ldrh	r2, [r7, #12]
 8002214:	8abb      	ldrh	r3, [r7, #20]
 8002216:	429a      	cmp	r2, r3
 8002218:	d901      	bls.n	800221e <sendto+0x156>
 800221a:	2300      	movs	r3, #0
 800221c:	e052      	b.n	80022c4 <sendto+0x1fc>
      if(len <= freesize) break;
 800221e:	89ba      	ldrh	r2, [r7, #12]
 8002220:	8abb      	ldrh	r3, [r7, #20]
 8002222:	429a      	cmp	r2, r3
 8002224:	d900      	bls.n	8002228 <sendto+0x160>
   };
 8002226:	e7d5      	b.n	80021d4 <sendto+0x10c>
      if(len <= freesize) break;
 8002228:	bf00      	nop
	wiz_send_data(sn, buf, len);
 800222a:	89ba      	ldrh	r2, [r7, #12]
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	68b9      	ldr	r1, [r7, #8]
 8002230:	4618      	mov	r0, r3
 8002232:	f001 f97b 	bl	800352c <wiz_send_data>

   #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
      setSUBR(0);
   #endif

	setSn_CR(sn,Sn_CR_SEND);
 8002236:	7bfb      	ldrb	r3, [r7, #15]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	3301      	adds	r3, #1
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002242:	2120      	movs	r1, #32
 8002244:	4618      	mov	r0, r3
 8002246:	f001 f817 	bl	8003278 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800224a:	bf00      	nop
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	3301      	adds	r3, #1
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002258:	4618      	mov	r0, r3
 800225a:	f000 ffdd 	bl	8003218 <WIZCHIP_READ>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f3      	bne.n	800224c <sendto+0x184>
   #if _WIZCHIP_ == 5200   // for W5200 ARP errata 
      setSUBR((uint8_t*)"\x00\x00\x00\x00");
   #endif
   while(1)
   {
      tmp = getSn_IR(sn);
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	3301      	adds	r3, #1
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002270:	4618      	mov	r0, r3
 8002272:	f000 ffd1 	bl	8003218 <WIZCHIP_READ>
 8002276:	4603      	mov	r3, r0
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800227e:	7dfb      	ldrb	r3, [r7, #23]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00c      	beq.n	80022a2 <sendto+0x1da>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	3301      	adds	r3, #1
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002294:	2110      	movs	r1, #16
 8002296:	4618      	mov	r0, r3
 8002298:	f000 ffee 	bl	8003278 <WIZCHIP_WRITE>
         break;
 800229c:	bf00      	nop
         setSn_IR(sn, Sn_IR_TIMEOUT);
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
	return len;
 800229e:	89bb      	ldrh	r3, [r7, #12]
 80022a0:	e010      	b.n	80022c4 <sendto+0x1fc>
      else if(tmp & Sn_IR_TIMEOUT)
 80022a2:	7dfb      	ldrb	r3, [r7, #23]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0db      	beq.n	8002264 <sendto+0x19c>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	3301      	adds	r3, #1
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80022b8:	2108      	movs	r1, #8
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 ffdc 	bl	8003278 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80022c0:	f06f 030c 	mvn.w	r3, #12
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	200000f8 	strdcs	r0, [r0], -r8

080022d0 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	4603      	mov	r3, r0
 80022dc:	73fb      	strb	r3, [r7, #15]
 80022de:	4613      	mov	r3, r2
 80022e0:	81bb      	strh	r3, [r7, #12]
   uint8_t  mr;
   uint8_t  head[8];
	uint16_t pack_len=0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d902      	bls.n	80022f2 <recvfrom+0x22>
 80022ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022f0:	e162      	b.n	80025b8 <recvfrom+0x2e8>
   //CHECK_SOCKMODE(Sn_MR_UDP);
   switch((mr=getSn_MR(sn)) & 0x0F)
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	3301      	adds	r3, #1
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 ff8c 	bl	8003218 <WIZCHIP_READ>
 8002300:	4603      	mov	r3, r0
 8002302:	777b      	strb	r3, [r7, #29]
 8002304:	7f7b      	ldrb	r3, [r7, #29]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	2b02      	cmp	r3, #2
 800230c:	d004      	beq.n	8002318 <recvfrom+0x48>
 800230e:	2b04      	cmp	r3, #4
 8002310:	d002      	beq.n	8002318 <recvfrom+0x48>
      case Sn_MR_IPRAW:
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8002312:	f06f 0304 	mvn.w	r3, #4
 8002316:	e14f      	b.n	80025b8 <recvfrom+0x2e8>
         break;
 8002318:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800231a:	89bb      	ldrh	r3, [r7, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d102      	bne.n	8002326 <recvfrom+0x56>
 8002320:	f06f 030d 	mvn.w	r3, #13
 8002324:	e148      	b.n	80025b8 <recvfrom+0x2e8>
   if(sock_remained_size[sn] == 0)
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	4aa5      	ldr	r2, [pc, #660]	; (80025c0 <recvfrom+0x2f0>)
 800232a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d128      	bne.n	8002384 <recvfrom+0xb4>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	4618      	mov	r0, r3
 8002336:	f001 f8ad 	bl	8003494 <getSn_RX_RSR>
 800233a:	4603      	mov	r3, r0
 800233c:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	3301      	adds	r3, #1
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800234a:	4618      	mov	r0, r3
 800234c:	f000 ff64 	bl	8003218 <WIZCHIP_READ>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <recvfrom+0x8c>
 8002356:	f06f 0303 	mvn.w	r3, #3
 800235a:	e12d      	b.n	80025b8 <recvfrom+0x2e8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800235c:	4b99      	ldr	r3, [pc, #612]	; (80025c4 <recvfrom+0x2f4>)
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	fa42 f303 	asr.w	r3, r2, r3
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d004      	beq.n	800237a <recvfrom+0xaa>
 8002370:	8bfb      	ldrh	r3, [r7, #30]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <recvfrom+0xaa>
 8002376:	2300      	movs	r3, #0
 8002378:	e11e      	b.n	80025b8 <recvfrom+0x2e8>
         if(pack_len != 0) break;
 800237a:	8bfb      	ldrh	r3, [r7, #30]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d100      	bne.n	8002382 <recvfrom+0xb2>
      };
 8002380:	e7d7      	b.n	8002332 <recvfrom+0x62>
         if(pack_len != 0) break;
 8002382:	bf00      	nop
   }
   sock_pack_info[sn] = PACK_COMPLETED;
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	4a90      	ldr	r2, [pc, #576]	; (80025c8 <recvfrom+0x2f8>)
 8002388:	2100      	movs	r1, #0
 800238a:	54d1      	strb	r1, [r2, r3]
	switch (mr & 0x07)
 800238c:	7f7b      	ldrb	r3, [r7, #29]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	2b02      	cmp	r3, #2
 8002394:	d002      	beq.n	800239c <recvfrom+0xcc>
 8002396:	2b04      	cmp	r3, #4
 8002398:	d06f      	beq.n	800247a <recvfrom+0x1aa>
 800239a:	e0cf      	b.n	800253c <recvfrom+0x26c>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	4a88      	ldr	r2, [pc, #544]	; (80025c0 <recvfrom+0x2f0>)
 80023a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d152      	bne.n	800244e <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 80023a8:	f107 0114 	add.w	r1, r7, #20
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	2208      	movs	r2, #8
 80023b0:	4618      	mov	r0, r3
 80023b2:	f001 f917 	bl	80035e4 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	3301      	adds	r3, #1
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80023c2:	2140      	movs	r1, #64	; 0x40
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 ff57 	bl	8003278 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80023ca:	bf00      	nop
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	3301      	adds	r3, #1
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 ff1d 	bl	8003218 <WIZCHIP_READ>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1f3      	bne.n	80023cc <recvfrom+0xfc>
   			// read peer's IP address, port number & packet length
    			addr[0] = head[0];
 80023e4:	7d3a      	ldrb	r2, [r7, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3301      	adds	r3, #1
 80023ee:	7d7a      	ldrb	r2, [r7, #21]
 80023f0:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3302      	adds	r3, #2
 80023f6:	7dba      	ldrb	r2, [r7, #22]
 80023f8:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3303      	adds	r3, #3
 80023fe:	7dfa      	ldrb	r2, [r7, #23]
 8002400:	701a      	strb	r2, [r3, #0]
   			*port = head[4];
 8002402:	7e3b      	ldrb	r3, [r7, #24]
 8002404:	b29a      	uxth	r2, r3
 8002406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002408:	801a      	strh	r2, [r3, #0]
   			*port = (*port << 8) + head[5];
 800240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	b29a      	uxth	r2, r3
 8002412:	7e7b      	ldrb	r3, [r7, #25]
 8002414:	b29b      	uxth	r3, r3
 8002416:	4413      	add	r3, r2
 8002418:	b29a      	uxth	r2, r3
 800241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241c:	801a      	strh	r2, [r3, #0]
   			sock_remained_size[sn] = head[6];
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	7eba      	ldrb	r2, [r7, #26]
 8002422:	b291      	uxth	r1, r2
 8002424:	4a66      	ldr	r2, [pc, #408]	; (80025c0 <recvfrom+0x2f0>)
 8002426:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	7bfa      	ldrb	r2, [r7, #15]
 800242e:	4964      	ldr	r1, [pc, #400]	; (80025c0 <recvfrom+0x2f0>)
 8002430:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002434:	0212      	lsls	r2, r2, #8
 8002436:	b291      	uxth	r1, r2
 8002438:	7efa      	ldrb	r2, [r7, #27]
 800243a:	b292      	uxth	r2, r2
 800243c:	440a      	add	r2, r1
 800243e:	b291      	uxth	r1, r2
 8002440:	4a5f      	ldr	r2, [pc, #380]	; (80025c0 <recvfrom+0x2f0>)
 8002442:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8002446:	7bfb      	ldrb	r3, [r7, #15]
 8002448:	4a5f      	ldr	r2, [pc, #380]	; (80025c8 <recvfrom+0x2f8>)
 800244a:	2180      	movs	r1, #128	; 0x80
 800244c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	4a5b      	ldr	r2, [pc, #364]	; (80025c0 <recvfrom+0x2f0>)
 8002452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002456:	89ba      	ldrh	r2, [r7, #12]
 8002458:	429a      	cmp	r2, r3
 800245a:	d202      	bcs.n	8002462 <recvfrom+0x192>
 800245c:	89bb      	ldrh	r3, [r7, #12]
 800245e:	83fb      	strh	r3, [r7, #30]
 8002460:	e004      	b.n	800246c <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	4a56      	ldr	r2, [pc, #344]	; (80025c0 <recvfrom+0x2f0>)
 8002466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800246a:	83fb      	strh	r3, [r7, #30]
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800246c:	8bfa      	ldrh	r2, [r7, #30]
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	4618      	mov	r0, r3
 8002474:	f001 f8b6 	bl	80035e4 <wiz_recv_data>
			break;
 8002478:	e06c      	b.n	8002554 <recvfrom+0x284>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	4a50      	ldr	r2, [pc, #320]	; (80025c0 <recvfrom+0x2f0>)
 800247e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d144      	bne.n	8002510 <recvfrom+0x240>
	      {
   			wiz_recv_data(sn, head, 2);
 8002486:	f107 0114 	add.w	r1, r7, #20
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	2202      	movs	r2, #2
 800248e:	4618      	mov	r0, r3
 8002490:	f001 f8a8 	bl	80035e4 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	3301      	adds	r3, #1
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80024a0:	2140      	movs	r1, #64	; 0x40
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fee8 	bl	8003278 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80024a8:	bf00      	nop
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	3301      	adds	r3, #1
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 feae 	bl	8003218 <WIZCHIP_READ>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f3      	bne.n	80024aa <recvfrom+0x1da>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	7d3a      	ldrb	r2, [r7, #20]
 80024c6:	b291      	uxth	r1, r2
 80024c8:	4a3d      	ldr	r2, [pc, #244]	; (80025c0 <recvfrom+0x2f0>)
 80024ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1];
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	7bfa      	ldrb	r2, [r7, #15]
 80024d2:	493b      	ldr	r1, [pc, #236]	; (80025c0 <recvfrom+0x2f0>)
 80024d4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80024d8:	0212      	lsls	r2, r2, #8
 80024da:	b291      	uxth	r1, r2
 80024dc:	7d7a      	ldrb	r2, [r7, #21]
 80024de:	b292      	uxth	r2, r2
 80024e0:	440a      	add	r2, r1
 80024e2:	b291      	uxth	r1, r2
 80024e4:	4a36      	ldr	r2, [pc, #216]	; (80025c0 <recvfrom+0x2f0>)
 80024e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] > 1514) 
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	4a34      	ldr	r2, [pc, #208]	; (80025c0 <recvfrom+0x2f0>)
 80024ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024f2:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d906      	bls.n	8002508 <recvfrom+0x238>
   			{
   			   close(sn);
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fb21 	bl	8001b44 <close>
   			   return SOCKFATAL_PACKLEN;
 8002502:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8002506:	e057      	b.n	80025b8 <recvfrom+0x2e8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	4a2f      	ldr	r2, [pc, #188]	; (80025c8 <recvfrom+0x2f8>)
 800250c:	2180      	movs	r1, #128	; 0x80
 800250e:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	4a2b      	ldr	r2, [pc, #172]	; (80025c0 <recvfrom+0x2f0>)
 8002514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002518:	89ba      	ldrh	r2, [r7, #12]
 800251a:	429a      	cmp	r2, r3
 800251c:	d202      	bcs.n	8002524 <recvfrom+0x254>
 800251e:	89bb      	ldrh	r3, [r7, #12]
 8002520:	83fb      	strh	r3, [r7, #30]
 8002522:	e004      	b.n	800252e <recvfrom+0x25e>
			else pack_len = sock_remained_size[sn];
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	4a26      	ldr	r2, [pc, #152]	; (80025c0 <recvfrom+0x2f0>)
 8002528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800252c:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 800252e:	8bfa      	ldrh	r2, [r7, #30]
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	68b9      	ldr	r1, [r7, #8]
 8002534:	4618      	mov	r0, r3
 8002536:	f001 f855 	bl	80035e4 <wiz_recv_data>
		   break;
 800253a:	e00b      	b.n	8002554 <recvfrom+0x284>
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
			break;
   #endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 800253c:	8bfa      	ldrh	r2, [r7, #30]
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f001 f8aa 	bl	800369c <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	491d      	ldr	r1, [pc, #116]	; (80025c0 <recvfrom+0x2f0>)
 800254c:	8bfa      	ldrh	r2, [r7, #30]
 800254e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8002552:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	3301      	adds	r3, #1
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002560:	2140      	movs	r1, #64	; 0x40
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fe88 	bl	8003278 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8002568:	bf00      	nop
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	3301      	adds	r3, #1
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002576:	4618      	mov	r0, r3
 8002578:	f000 fe4e 	bl	8003218 <WIZCHIP_READ>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f3      	bne.n	800256a <recvfrom+0x29a>
	sock_remained_size[sn] -= pack_len;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	490e      	ldr	r1, [pc, #56]	; (80025c0 <recvfrom+0x2f0>)
 8002588:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800258c:	8bfa      	ldrh	r2, [r7, #30]
 800258e:	1a8a      	subs	r2, r1, r2
 8002590:	b291      	uxth	r1, r2
 8002592:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <recvfrom+0x2f0>)
 8002594:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <recvfrom+0x2f0>)
 800259c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <recvfrom+0x2e6>
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	7bfa      	ldrb	r2, [r7, #15]
 80025a8:	4907      	ldr	r1, [pc, #28]	; (80025c8 <recvfrom+0x2f8>)
 80025aa:	5c8a      	ldrb	r2, [r1, r2]
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	b2d1      	uxtb	r1, r2
 80025b2:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <recvfrom+0x2f8>)
 80025b4:	54d1      	strb	r1, [r2, r3]
 	return pack_len;
 80025b6:	8bfb      	ldrh	r3, [r7, #30]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3720      	adds	r7, #32
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	200000fc 	strdcs	r0, [r0], -ip
 80025c4:	200000f8 	strdcs	r0, [r0], -r8
 80025c8:	2000010c 	andcs	r0, r0, ip, lsl #2

080025cc <ctlsocket>:


int8_t  ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	603a      	str	r2, [r7, #0]
 80025d6:	71fb      	strb	r3, [r7, #7]
 80025d8:	460b      	mov	r3, r1
 80025da:	71bb      	strb	r3, [r7, #6]
   uint8_t tmp = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	73fb      	strb	r3, [r7, #15]
   CHECK_SOCKNUM();
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d902      	bls.n	80025ec <ctlsocket+0x20>
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ea:	e0c1      	b.n	8002770 <ctlsocket+0x1a4>
   switch(cstype)
 80025ec:	79bb      	ldrb	r3, [r7, #6]
 80025ee:	2b07      	cmp	r3, #7
 80025f0:	f200 80ba 	bhi.w	8002768 <ctlsocket+0x19c>
 80025f4:	a201      	add	r2, pc, #4	; (adr r2, 80025fc <ctlsocket+0x30>)
 80025f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fa:	bf00      	nop
 80025fc:	0800261d 	stmdaeq	r0, {r0, r2, r3, r4, r9, sl, sp}
 8002600:	08002671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, sp}
 8002604:	0800268b 	stmdaeq	r0, {r0, r1, r3, r7, r9, sl, sp}
 8002608:	080026ab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r9, sl, sp}
 800260c:	080026cb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r9, sl, sp}
 8002610:	080026fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sl, sp}
 8002614:	0800271b 	stmdaeq	r0, {r0, r1, r3, r4, r8, r9, sl, sp}
 8002618:	0800274b 	stmdaeq	r0, {r0, r1, r3, r6, r8, r9, sl, sp}
   {
      case CS_SET_IOMODE:
         tmp = *((uint8_t*)arg);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	73fb      	strb	r3, [r7, #15]
         if(tmp == SOCK_IO_NONBLOCK)  sock_io_mode |= (1<<sn);
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d10d      	bne.n	8002644 <ctlsocket+0x78>
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	2201      	movs	r2, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	b21a      	sxth	r2, r3
 8002632:	4b51      	ldr	r3, [pc, #324]	; (8002778 <ctlsocket+0x1ac>)
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	b21b      	sxth	r3, r3
 8002638:	4313      	orrs	r3, r2
 800263a:	b21b      	sxth	r3, r3
 800263c:	b29a      	uxth	r2, r3
 800263e:	4b4e      	ldr	r3, [pc, #312]	; (8002778 <ctlsocket+0x1ac>)
 8002640:	801a      	strh	r2, [r3, #0]
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
         else return SOCKERR_ARG;
         break;
 8002642:	e094      	b.n	800276e <ctlsocket+0x1a2>
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10f      	bne.n	800266a <ctlsocket+0x9e>
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	2201      	movs	r2, #1
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	b21b      	sxth	r3, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	b21a      	sxth	r2, r3
 8002658:	4b47      	ldr	r3, [pc, #284]	; (8002778 <ctlsocket+0x1ac>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	b21b      	sxth	r3, r3
 800265e:	4013      	ands	r3, r2
 8002660:	b21b      	sxth	r3, r3
 8002662:	b29a      	uxth	r2, r3
 8002664:	4b44      	ldr	r3, [pc, #272]	; (8002778 <ctlsocket+0x1ac>)
 8002666:	801a      	strh	r2, [r3, #0]
         break;
 8002668:	e081      	b.n	800276e <ctlsocket+0x1a2>
         else return SOCKERR_ARG;
 800266a:	f06f 0309 	mvn.w	r3, #9
 800266e:	e07f      	b.n	8002770 <ctlsocket+0x1a4>
      case CS_GET_IOMODE:   
         *((uint8_t*)arg) = (sock_io_mode >> sn) & 0x0001;
 8002670:	4b41      	ldr	r3, [pc, #260]	; (8002778 <ctlsocket+0x1ac>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	fa42 f303 	asr.w	r3, r2, r3
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	b2da      	uxtb	r2, r3
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	701a      	strb	r2, [r3, #0]
         break;
 8002688:	e071      	b.n	800276e <ctlsocket+0x1a2>
      case CS_GET_MAXTXBUF:
         *((uint16_t*)arg) = getSn_TxMAX(sn);
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	3301      	adds	r3, #1
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fdbe 	bl	8003218 <WIZCHIP_READ>
 800269c:	4603      	mov	r3, r0
 800269e:	b29b      	uxth	r3, r3
 80026a0:	029b      	lsls	r3, r3, #10
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	801a      	strh	r2, [r3, #0]
         break;
 80026a8:	e061      	b.n	800276e <ctlsocket+0x1a2>
      case CS_GET_MAXRXBUF:    
         *((uint16_t*)arg) = getSn_RxMAX(sn);
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	3301      	adds	r3, #1
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 fdae 	bl	8003218 <WIZCHIP_READ>
 80026bc:	4603      	mov	r3, r0
 80026be:	b29b      	uxth	r3, r3
 80026c0:	029b      	lsls	r3, r3, #10
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	801a      	strh	r2, [r3, #0]
         break;
 80026c8:	e051      	b.n	800276e <ctlsocket+0x1a2>
      case CS_CLR_INTERRUPT:
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b1f      	cmp	r3, #31
 80026d0:	d902      	bls.n	80026d8 <ctlsocket+0x10c>
 80026d2:	f06f 0309 	mvn.w	r3, #9
 80026d6:	e04b      	b.n	8002770 <ctlsocket+0x1a4>
         setSn_IR(sn,*(uint8_t*)arg);
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	3301      	adds	r3, #1
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80026e4:	461a      	mov	r2, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	4619      	mov	r1, r3
 80026f2:	4610      	mov	r0, r2
 80026f4:	f000 fdc0 	bl	8003278 <WIZCHIP_WRITE>
         break;
 80026f8:	e039      	b.n	800276e <ctlsocket+0x1a2>
      case CS_GET_INTERRUPT:
         *((uint8_t*)arg) = getSn_IR(sn);
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	3301      	adds	r3, #1
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fd86 	bl	8003218 <WIZCHIP_READ>
 800270c:	4603      	mov	r3, r0
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	b2da      	uxtb	r2, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	701a      	strb	r2, [r3, #0]
         break;
 8002718:	e029      	b.n	800276e <ctlsocket+0x1a2>
      case CS_SET_INTMASK:  
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b1f      	cmp	r3, #31
 8002720:	d902      	bls.n	8002728 <ctlsocket+0x15c>
 8002722:	f06f 0309 	mvn.w	r3, #9
 8002726:	e023      	b.n	8002770 <ctlsocket+0x1a4>
         setSn_IMR(sn,*(uint8_t*)arg);
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	3301      	adds	r3, #1
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 8002734:	461a      	mov	r2, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	b2db      	uxtb	r3, r3
 8002740:	4619      	mov	r1, r3
 8002742:	4610      	mov	r0, r2
 8002744:	f000 fd98 	bl	8003278 <WIZCHIP_WRITE>
         break;
 8002748:	e011      	b.n	800276e <ctlsocket+0x1a2>
      case CS_GET_INTMASK:   
         *((uint8_t*)arg) = getSn_IMR(sn);
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	3301      	adds	r3, #1
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fd5e 	bl	8003218 <WIZCHIP_READ>
 800275c:	4603      	mov	r3, r0
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	b2da      	uxtb	r2, r3
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	701a      	strb	r2, [r3, #0]
      default:
         return SOCKERR_ARG;
 8002768:	f06f 0309 	mvn.w	r3, #9
 800276c:	e000      	b.n	8002770 <ctlsocket+0x1a4>
   }
   return SOCK_OK;
 800276e:	2301      	movs	r3, #1
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	200000f8 	strdcs	r0, [r0], -r8

0800277c <wizchip_cris_enter>:
/**
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	  wizchip_cris_enter(void)           {};
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <wizchip_cris_exit>:
/**
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	  wizchip_cris_exit(void)          {};
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <wizchip_cs_select>:
/**
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_cs_select(void)            {};
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <wizchip_cs_deselect>:
/**
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_cs_deselect(void)          {};
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <wizchip_bus_readbyte>:
/**
 * @brief Default function to read in direct or indirect interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *) AddrSel); };
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <wizchip_bus_writebyte>:
 * @brief Default function to write in direct or indirect interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 
void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)AddrSel) = wb; };
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	70fb      	strb	r3, [r7, #3]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	78fa      	ldrb	r2, [r7, #3]
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <wizchip_spi_readbyte>:
/**
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
uint8_t wizchip_spi_readbyte(void)        {return 0;};
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	2300      	movs	r3, #0
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop

080027f0 <wizchip_spi_writebyte>:
/**
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_spi_writebyte(uint8_t wb) {};
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <reg_wizchip_cris_cbfunc+0x16>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d106      	bne.n	8002828 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <reg_wizchip_cris_cbfunc+0x3c>)
 800281c:	4a09      	ldr	r2, [pc, #36]	; (8002844 <reg_wizchip_cris_cbfunc+0x40>)
 800281e:	609a      	str	r2, [r3, #8]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <reg_wizchip_cris_cbfunc+0x3c>)
 8002822:	4a09      	ldr	r2, [pc, #36]	; (8002848 <reg_wizchip_cris_cbfunc+0x44>)
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	e005      	b.n	8002834 <reg_wizchip_cris_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8002828:	4a05      	ldr	r2, [pc, #20]	; (8002840 <reg_wizchip_cris_cbfunc+0x3c>)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6093      	str	r3, [r2, #8]
      WIZCHIP.CRIS._exit  = cris_ex;
 800282e:	4a04      	ldr	r2, [pc, #16]	; (8002840 <reg_wizchip_cris_cbfunc+0x3c>)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	60d3      	str	r3, [r2, #12]
   }
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000084 	andcs	r0, r0, r4, lsl #1
 8002844:	0800277d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, sl, sp}
 8002848:	08002789 	stmdaeq	r0, {r0, r3, r7, r8, r9, sl, sp}

0800284c <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <reg_wizchip_cs_cbfunc+0x16>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <reg_wizchip_cs_cbfunc+0x3c>)
 8002864:	4a09      	ldr	r2, [pc, #36]	; (800288c <reg_wizchip_cs_cbfunc+0x40>)
 8002866:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <reg_wizchip_cs_cbfunc+0x3c>)
 800286a:	4a09      	ldr	r2, [pc, #36]	; (8002890 <reg_wizchip_cs_cbfunc+0x44>)
 800286c:	615a      	str	r2, [r3, #20]
 800286e:	e005      	b.n	800287c <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002870:	4a05      	ldr	r2, [pc, #20]	; (8002888 <reg_wizchip_cs_cbfunc+0x3c>)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 8002876:	4a04      	ldr	r2, [pc, #16]	; (8002888 <reg_wizchip_cs_cbfunc+0x3c>)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	6153      	str	r3, [r2, #20]
   }
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000084 	andcs	r0, r0, r4, lsl #1
 800288c:	08002795 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, sl, sp}
 8002890:	080027a1 	stmdaeq	r0, {r0, r5, r7, r8, r9, sl, sp}

08002894 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800289e:	bf00      	nop
 80028a0:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <reg_wizchip_spi_cbfunc+0x48>)
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f9      	beq.n	80028a0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <reg_wizchip_spi_cbfunc+0x24>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d106      	bne.n	80028c6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80028b8:	4b08      	ldr	r3, [pc, #32]	; (80028dc <reg_wizchip_spi_cbfunc+0x48>)
 80028ba:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <reg_wizchip_spi_cbfunc+0x4c>)
 80028bc:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <reg_wizchip_spi_cbfunc+0x48>)
 80028c0:	4a08      	ldr	r2, [pc, #32]	; (80028e4 <reg_wizchip_spi_cbfunc+0x50>)
 80028c2:	61da      	str	r2, [r3, #28]
 80028c4:	e005      	b.n	80028d2 <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80028c6:	4a05      	ldr	r2, [pc, #20]	; (80028dc <reg_wizchip_spi_cbfunc+0x48>)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80028cc:	4a03      	ldr	r2, [pc, #12]	; (80028dc <reg_wizchip_spi_cbfunc+0x48>)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	61d3      	str	r3, [r2, #28]
   }
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	20000084 	andcs	r0, r0, r4, lsl #1
 80028e0:	080027e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, sl, sp}
 80028e4:	080027f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, sl, sp}

080028e8 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	6039      	str	r1, [r7, #0]
 80028f2:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	75fb      	strb	r3, [r7, #23]
   uint8_t* ptmp[2] = {0,0};
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	2300      	movs	r3, #0
 80028fe:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	2b0f      	cmp	r3, #15
 8002904:	f200 80c2 	bhi.w	8002a8c <ctlwizchip+0x1a4>
 8002908:	a201      	add	r2, pc, #4	; (adr r2, 8002910 <ctlwizchip+0x28>)
 800290a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290e:	bf00      	nop
 8002910:	08002951 	stmdaeq	r0, {r0, r4, r6, r8, fp, sp}
 8002914:	08002957 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, fp, sp}
 8002918:	08002983 	stmdaeq	r0, {r0, r1, r7, r8, fp, sp}
 800291c:	08002977 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r8, fp, sp}
 8002920:	08002991 	stmdaeq	r0, {r0, r4, r7, r8, fp, sp}
 8002924:	0800299d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, fp, sp}
 8002928:	080029ab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r8, fp, sp}
 800292c:	080029d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, fp, sp}
 8002930:	080029f7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, fp, sp}
 8002934:	08002a31 	stmdaeq	r0, {r0, r4, r5, r9, fp, sp}
 8002938:	08002a37 	stmdaeq	r0, {r0, r1, r2, r4, r5, r9, fp, sp}
 800293c:	08002a3f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r9, fp, sp}
 8002940:	08002a93 	stmdaeq	r0, {r0, r1, r4, r7, r9, fp, sp}
 8002944:	08002a47 	stmdaeq	r0, {r0, r1, r2, r6, r9, fp, sp}
 8002948:	08002a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp, sp}
 800294c:	08002a71 	stmdaeq	r0, {r0, r4, r5, r6, r9, fp, sp}
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8002950:	f000 f8e6 	bl	8002b20 <wizchip_sw_reset>
         break;
 8002954:	e09e      	b.n	8002a94 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	3308      	adds	r3, #8
 8002964:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f000 f923 	bl	8002bb8 <wizchip_init>
 8002972:	4603      	mov	r3, r0
 8002974:	e08f      	b.n	8002a96 <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f000 f9a8 	bl	8002cd0 <wizchip_clrinterrupt>
         break;
 8002980:	e088      	b.n	8002a94 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8002982:	f000 f9c3 	bl	8002d0c <wizchip_getinterrupt>
 8002986:	4603      	mov	r3, r0
 8002988:	461a      	mov	r2, r3
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	801a      	strh	r2, [r3, #0]
         break;
 800298e:	e081      	b.n	8002a94 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f000 f9df 	bl	8002d58 <wizchip_setinterruptmask>
         break;         
 800299a:	e07b      	b.n	8002a94 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 800299c:	f000 f9f8 	bl	8002d90 <wizchip_getinterruptmask>
 80029a0:	4603      	mov	r3, r0
 80029a2:	461a      	mov	r2, r3
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	801a      	strh	r2, [r3, #0]
         break;
 80029a8:	e074      	b.n	8002a94 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ > 5100
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	4619      	mov	r1, r3
 80029b6:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80029ba:	f000 fc5d 	bl	8003278 <WIZCHIP_WRITE>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	4619      	mov	r1, r3
 80029c6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80029ca:	f000 fc55 	bl	8003278 <WIZCHIP_WRITE>
         break;
 80029ce:	e061      	b.n	8002a94 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80029d0:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80029d4:	f000 fc20 	bl	8003218 <WIZCHIP_READ>
 80029d8:	4603      	mov	r3, r0
 80029da:	b29b      	uxth	r3, r3
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	b29c      	uxth	r4, r3
 80029e0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80029e4:	f000 fc18 	bl	8003218 <WIZCHIP_READ>
 80029e8:	4603      	mov	r3, r0
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	4423      	add	r3, r4
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	801a      	strh	r2, [r3, #0]
         break;
 80029f4:	e04e      	b.n	8002a94 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80029f6:	4b2a      	ldr	r3, [pc, #168]	; (8002aa0 <ctlwizchip+0x1b8>)
 80029f8:	789a      	ldrb	r2, [r3, #2]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	3301      	adds	r3, #1
 8002a02:	4a27      	ldr	r2, [pc, #156]	; (8002aa0 <ctlwizchip+0x1b8>)
 8002a04:	78d2      	ldrb	r2, [r2, #3]
 8002a06:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	3302      	adds	r3, #2
 8002a0c:	4a24      	ldr	r2, [pc, #144]	; (8002aa0 <ctlwizchip+0x1b8>)
 8002a0e:	7912      	ldrb	r2, [r2, #4]
 8002a10:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	3303      	adds	r3, #3
 8002a16:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <ctlwizchip+0x1b8>)
 8002a18:	7952      	ldrb	r2, [r2, #5]
 8002a1a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <ctlwizchip+0x1b8>)
 8002a22:	7992      	ldrb	r2, [r2, #6]
 8002a24:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	3305      	adds	r3, #5
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
         break;
 8002a2e:	e031      	b.n	8002a94 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ ==  5500
      case CW_RESET_PHY:
         wizphy_reset();
 8002a30:	f000 fa04 	bl	8002e3c <wizphy_reset>
         break;
 8002a34:	e02e      	b.n	8002a94 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8002a36:	6838      	ldr	r0, [r7, #0]
 8002a38:	f000 fa28 	bl	8002e8c <wizphy_setphyconf>
         break;
 8002a3c:	e02a      	b.n	8002a94 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8002a3e:	6838      	ldr	r0, [r7, #0]
 8002a40:	f000 fa66 	bl	8002f10 <wizphy_getphyconf>
         break;
 8002a44:	e026      	b.n	8002a94 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 faac 	bl	8002fa8 <wizphy_setphypmode>
 8002a50:	4603      	mov	r3, r0
 8002a52:	e020      	b.n	8002a96 <ctlwizchip+0x1ae>
   #endif
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8002a54:	f000 f9d8 	bl	8002e08 <wizphy_getphypmode>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002a5c:	7dfb      	ldrb	r3, [r7, #23]
 8002a5e:	2bff      	cmp	r3, #255	; 0xff
 8002a60:	d102      	bne.n	8002a68 <ctlwizchip+0x180>
 8002a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a66:	e016      	b.n	8002a96 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	7dfa      	ldrb	r2, [r7, #23]
 8002a6c:	701a      	strb	r2, [r3, #0]
         break;
 8002a6e:	e011      	b.n	8002a94 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8002a70:	f000 f9b2 	bl	8002dd8 <wizphy_getphylink>
 8002a74:	4603      	mov	r3, r0
 8002a76:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002a78:	7dfb      	ldrb	r3, [r7, #23]
 8002a7a:	2bff      	cmp	r3, #255	; 0xff
 8002a7c:	d102      	bne.n	8002a84 <ctlwizchip+0x19c>
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a82:	e008      	b.n	8002a96 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	7dfa      	ldrb	r2, [r7, #23]
 8002a88:	701a      	strb	r2, [r3, #0]
         break;
 8002a8a:	e003      	b.n	8002a94 <ctlwizchip+0x1ac>
      default:
         return -1;
 8002a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a90:	e001      	b.n	8002a96 <ctlwizchip+0x1ae>
         break;
 8002a92:	bf00      	nop
   }
   return 0;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd90      	pop	{r4, r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000084 	andcs	r0, r0, r4, lsl #1

08002aa4 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	6039      	str	r1, [r7, #0]
 8002aae:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	d82c      	bhi.n	8002b10 <ctlnetwork+0x6c>
 8002ab6:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <ctlnetwork+0x18>)
 8002ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abc:	08002ad5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r9, fp, sp}
 8002ac0:	08002add 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, fp, sp}
 8002ac4:	08002ae5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, fp, sp}
 8002ac8:	08002af3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r9, fp, sp}
 8002acc:	08002b01 	stmdaeq	r0, {r0, r8, r9, fp, sp}
 8002ad0:	08002b09 	stmdaeq	r0, {r0, r3, r8, r9, fp, sp}
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8002ad4:	6838      	ldr	r0, [r7, #0]
 8002ad6:	f000 fab1 	bl	800303c <wizchip_setnetinfo>
         break;
 8002ada:	e01c      	b.n	8002b16 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8002adc:	6838      	ldr	r0, [r7, #0]
 8002ade:	f000 faed 	bl	80030bc <wizchip_getnetinfo>
         break;
 8002ae2:	e018      	b.n	8002b16 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fb27 	bl	800313c <wizchip_setnetmode>
 8002aee:	4603      	mov	r3, r0
 8002af0:	e012      	b.n	8002b18 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8002af2:	f000 fb45 	bl	8003180 <wizchip_getnetmode>
 8002af6:	4603      	mov	r3, r0
 8002af8:	461a      	mov	r2, r3
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	701a      	strb	r2, [r3, #0]
         break;
 8002afe:	e00a      	b.n	8002b16 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8002b00:	6838      	ldr	r0, [r7, #0]
 8002b02:	f000 fb45 	bl	8003190 <wizchip_settimeout>
         break;
 8002b06:	e006      	b.n	8002b16 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8002b08:	6838      	ldr	r0, [r7, #0]
 8002b0a:	f000 fb63 	bl	80031d4 <wizchip_gettimeout>
         break;
 8002b0e:	e002      	b.n	8002b16 <ctlnetwork+0x72>
      default:
         return -1;
 8002b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b14:	e000      	b.n	8002b18 <ctlnetwork+0x74>
   }
   return 0;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
   uint8_t gw[4], sn[4], sip[4];
   uint8_t mac[6];
   getSHAR(mac);
 8002b26:	1d3b      	adds	r3, r7, #4
 8002b28:	2206      	movs	r2, #6
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002b30:	f000 fbd8 	bl	80032e4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8002b34:	f107 0314 	add.w	r3, r7, #20
 8002b38:	2204      	movs	r2, #4
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b40:	f000 fbd0 	bl	80032e4 <WIZCHIP_READ_BUF>
 8002b44:	f107 0310 	add.w	r3, r7, #16
 8002b48:	2204      	movs	r2, #4
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002b50:	f000 fbc8 	bl	80032e4 <WIZCHIP_READ_BUF>
 8002b54:	f107 030c 	add.w	r3, r7, #12
 8002b58:	2204      	movs	r2, #4
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002b60:	f000 fbc0 	bl	80032e4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8002b64:	2180      	movs	r1, #128	; 0x80
 8002b66:	2000      	movs	r0, #0
 8002b68:	f000 fb86 	bl	8003278 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f000 fb53 	bl	8003218 <WIZCHIP_READ>
   setSHAR(mac);
 8002b72:	1d3b      	adds	r3, r7, #4
 8002b74:	2206      	movs	r2, #6
 8002b76:	4619      	mov	r1, r3
 8002b78:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002b7c:	f000 fbf6 	bl	800336c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	2204      	movs	r2, #4
 8002b86:	4619      	mov	r1, r3
 8002b88:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b8c:	f000 fbee 	bl	800336c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8002b90:	f107 0310 	add.w	r3, r7, #16
 8002b94:	2204      	movs	r2, #4
 8002b96:	4619      	mov	r1, r3
 8002b98:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002b9c:	f000 fbe6 	bl	800336c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002bac:	f000 fbde 	bl	800336c <WIZCHIP_WRITE_BUF>
}
 8002bb0:	bf00      	nop
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8002bc6:	f7ff ffab 	bl	8002b20 <wizchip_sw_reset>
   if(txsize)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d03b      	beq.n	8002c48 <wizchip_init+0x90>
   {
      tmp = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	73fb      	strb	r3, [r7, #15]
 8002bd8:	e00e      	b.n	8002bf8 <wizchip_init+0x40>
         tmp += txsize[i];
 8002bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	781a      	ldrb	r2, [r3, #0]
 8002be4:	7bbb      	ldrb	r3, [r7, #14]
 8002be6:	4413      	add	r3, r2
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	73fb      	strb	r3, [r7, #15]
 8002bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfc:	2b07      	cmp	r3, #7
 8002bfe:	ddec      	ble.n	8002bda <wizchip_init+0x22>
      if(tmp > 16) return -1;
 8002c00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c04:	2b10      	cmp	r3, #16
 8002c06:	dd02      	ble.n	8002c0e <wizchip_init+0x56>
 8002c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c0c:	e05c      	b.n	8002cc8 <wizchip_init+0x110>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73fb      	strb	r3, [r7, #15]
 8002c12:	e015      	b.n	8002c40 <wizchip_init+0x88>
         setSn_TXBUF_SIZE(i, txsize[i]);
 8002c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002c22:	4618      	mov	r0, r3
 8002c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f000 fb22 	bl	8003278 <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c44:	2b07      	cmp	r3, #7
 8002c46:	dde5      	ble.n	8002c14 <wizchip_init+0x5c>
   }
   if(rxsize)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d03b      	beq.n	8002cc6 <wizchip_init+0x10e>
   {
      tmp = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c52:	2300      	movs	r3, #0
 8002c54:	73fb      	strb	r3, [r7, #15]
 8002c56:	e00e      	b.n	8002c76 <wizchip_init+0xbe>
         tmp += rxsize[i];
 8002c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	4413      	add	r3, r2
 8002c60:	781a      	ldrb	r2, [r3, #0]
 8002c62:	7bbb      	ldrb	r3, [r7, #14]
 8002c64:	4413      	add	r3, r2
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	3301      	adds	r3, #1
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	73fb      	strb	r3, [r7, #15]
 8002c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7a:	2b07      	cmp	r3, #7
 8002c7c:	ddec      	ble.n	8002c58 <wizchip_init+0xa0>
      if(tmp > 16) return -1;
 8002c7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c82:	2b10      	cmp	r3, #16
 8002c84:	dd02      	ble.n	8002c8c <wizchip_init+0xd4>
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c8a:	e01d      	b.n	8002cc8 <wizchip_init+0x110>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	73fb      	strb	r3, [r7, #15]
 8002c90:	e015      	b.n	8002cbe <wizchip_init+0x106>
         setSn_RXBUF_SIZE(i, rxsize[i]);
 8002c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	3301      	adds	r3, #1
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	4413      	add	r3, r2
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	f000 fae3 	bl	8003278 <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	3301      	adds	r3, #1
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	73fb      	strb	r3, [r7, #15]
 8002cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc2:	2b07      	cmp	r3, #7
 8002cc4:	dde5      	ble.n	8002c92 <wizchip_init+0xda>
   }
   return 0;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	0a1b      	lsrs	r3, r3, #8
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ == 5100
   ir |= sir;
   setIR(ir);
#else
   setIR(ir);
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	f023 030f 	bic.w	r3, r3, #15
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	4619      	mov	r1, r3
 8002cf0:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002cf4:	f000 fac0 	bl	8003278 <WIZCHIP_WRITE>
   setSIR(sir);
 8002cf8:	7bbb      	ldrb	r3, [r7, #14]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002d00:	f000 faba 	bl	8003278 <WIZCHIP_WRITE>
#endif   
}
 8002d04:	bf00      	nop
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ == 5100
   ir = getIR();
   sir = ir 0x0F;
#else
   ir  = getIR();
 8002d1e:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002d22:	f000 fa79 	bl	8003218 <WIZCHIP_READ>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f023 030f 	bic.w	r3, r3, #15
 8002d2c:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8002d2e:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002d32:	f000 fa71 	bl	8003218 <WIZCHIP_READ>
 8002d36:	4603      	mov	r3, r0
 8002d38:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == 5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8002d3a:	79bb      	ldrb	r3, [r7, #6]
 8002d3c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8002d3e:	88bb      	ldrh	r3, [r7, #4]
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002d4c:	88bb      	ldrh	r3, [r7, #4]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop

08002d58 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ == 5100
   imr |= simr;
   setIMR(imr);
#else
   setIMR(imr);
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	4619      	mov	r1, r3
 8002d72:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002d76:	f000 fa7f 	bl	8003278 <WIZCHIP_WRITE>
   setSIMR(simr);
 8002d7a:	7bbb      	ldrb	r3, [r7, #14]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002d82:	f000 fa79 	bl	8003278 <WIZCHIP_WRITE>
#endif   
}
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop

08002d90 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ == 5100
   imr  = getIMR();
   simr = imr 0x0F;
#else
   imr  = getIMR();
 8002da2:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002da6:	f000 fa37 	bl	8003218 <WIZCHIP_READ>
 8002daa:	4603      	mov	r3, r0
 8002dac:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8002dae:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002db2:	f000 fa31 	bl	8003218 <WIZCHIP_READ>
 8002db6:	4603      	mov	r3, r0
 8002db8:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == 5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8002dba:	79bb      	ldrb	r3, [r7, #6]
 8002dbc:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8002dbe:	88bb      	ldrh	r3, [r7, #4]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002dcc:	88bb      	ldrh	r3, [r7, #4]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop

08002dd8 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
   else
      tmp = PHY_LINK_OFF;
#elif _WIZCHIP_ == 5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8002dde:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002de2:	f000 fa19 	bl	8003218 <WIZCHIP_READ>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <wizphy_getphylink+0x1e>
      tmp = PHY_LINK_ON;
 8002df0:	2301      	movs	r3, #1
 8002df2:	71fb      	strb	r3, [r7, #7]
 8002df4:	e001      	b.n	8002dfa <wizphy_getphylink+0x22>
   else
      tmp = PHY_LINK_OFF;
 8002df6:	2300      	movs	r3, #0
 8002df8:	71fb      	strb	r3, [r7, #7]
#else
   tmp = -1;
#endif
   return tmp;
 8002dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop

08002e08 <wizphy_getphypmode>:

#if _WIZCHIP_ > 5100

int8_t wizphy_getphypmode(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if(getPHYCFGR() & PHYCFGR_OPMDC_PDOWN)
 8002e12:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e16:	f000 f9ff 	bl	8003218 <WIZCHIP_READ>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8002e24:	2301      	movs	r3, #1
 8002e26:	71fb      	strb	r3, [r7, #7]
 8002e28:	e001      	b.n	8002e2e <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop

08002e3c <wizphy_reset>:
#endif

#if _WIZCHIP_ == 5500
void wizphy_reset(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8002e42:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e46:	f000 f9e7 	bl	8003218 <WIZCHIP_READ>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e54:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e5e:	f000 fa0b 	bl	8003278 <WIZCHIP_WRITE>
   tmp = getPHYCFGR(); 
 8002e62:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e66:	f000 f9d7 	bl	8003218 <WIZCHIP_READ>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e74:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e7e:	f000 f9fb 	bl	8003278 <WIZCHIP_WRITE>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop

08002e8c <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d104      	bne.n	8002eaa <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ea6:	73fb      	strb	r3, [r7, #15]
 8002ea8:	e003      	b.n	8002eb2 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eb0:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	785b      	ldrb	r3, [r3, #1]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d104      	bne.n	8002ec4 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002ec0:	73fb      	strb	r3, [r7, #15]
 8002ec2:	e019      	b.n	8002ef8 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	78db      	ldrb	r3, [r3, #3]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d10d      	bne.n	8002ee8 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	789b      	ldrb	r3, [r3, #2]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d104      	bne.n	8002ede <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
 8002ed6:	f043 0318 	orr.w	r3, r3, #24
 8002eda:	73fb      	strb	r3, [r7, #15]
 8002edc:	e00c      	b.n	8002ef8 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	f043 0308 	orr.w	r3, r3, #8
 8002ee4:	73fb      	strb	r3, [r7, #15]
 8002ee6:	e007      	b.n	8002ef8 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	789b      	ldrb	r3, [r3, #2]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d103      	bne.n	8002ef8 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	f043 0310 	orr.w	r3, r3, #16
 8002ef6:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	4619      	mov	r1, r3
 8002efc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002f00:	f000 f9ba 	bl	8003278 <WIZCHIP_WRITE>
   wizphy_reset();
 8002f04:	f7ff ff9a 	bl	8002e3c <wizphy_reset>
}
 8002f08:	bf00      	nop
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002f1c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002f20:	f000 f97a 	bl	8003218 <WIZCHIP_READ>
 8002f24:	4603      	mov	r3, r0
 8002f26:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	bf14      	ite	ne
 8002f32:	2301      	movne	r3, #1
 8002f34:	2300      	moveq	r3, #0
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	d001      	beq.n	8002f4c <wizphy_getphyconf+0x3c>
 8002f48:	2b38      	cmp	r3, #56	; 0x38
 8002f4a:	d103      	bne.n	8002f54 <wizphy_getphyconf+0x44>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	705a      	strb	r2, [r3, #1]
         break;
 8002f52:	e003      	b.n	8002f5c <wizphy_getphyconf+0x4c>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	705a      	strb	r2, [r3, #1]
         break;
 8002f5a:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f62:	2b18      	cmp	r3, #24
 8002f64:	d003      	beq.n	8002f6e <wizphy_getphyconf+0x5e>
 8002f66:	2b20      	cmp	r3, #32
 8002f68:	d001      	beq.n	8002f6e <wizphy_getphyconf+0x5e>
 8002f6a:	2b10      	cmp	r3, #16
 8002f6c:	d103      	bne.n	8002f76 <wizphy_getphyconf+0x66>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	709a      	strb	r2, [r3, #2]
         break;
 8002f74:	e003      	b.n	8002f7e <wizphy_getphyconf+0x6e>
      default:
         phyconf->speed = PHY_SPEED_10;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	709a      	strb	r2, [r3, #2]
         break;
 8002f7c:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f84:	2b18      	cmp	r3, #24
 8002f86:	d003      	beq.n	8002f90 <wizphy_getphyconf+0x80>
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d001      	beq.n	8002f90 <wizphy_getphyconf+0x80>
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d103      	bne.n	8002f98 <wizphy_getphyconf+0x88>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	70da      	strb	r2, [r3, #3]
         break;
 8002f96:	e003      	b.n	8002fa0 <wizphy_getphyconf+0x90>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	70da      	strb	r2, [r3, #3]
         break;
 8002f9e:	bf00      	nop
   }
}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002fb6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002fba:	f000 f92d 	bl	8003218 <WIZCHIP_READ>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <wizphy_setphypmode+0x2a>
 8002fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fd0:	e030      	b.n	8003034 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002fd8:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d104      	bne.n	8002fea <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002fe6:	73fb      	strb	r3, [r7, #15]
 8002fe8:	e003      	b.n	8002ff2 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002ff0:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002ffa:	f000 f93d 	bl	8003278 <WIZCHIP_WRITE>
   wizphy_reset();
 8002ffe:	f7ff ff1d 	bl	8002e3c <wizphy_reset>
   tmp = getPHYCFGR();
 8003002:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003006:	f000 f907 	bl	8003218 <WIZCHIP_READ>
 800300a:	4603      	mov	r3, r0
 800300c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d106      	bne.n	8003022 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800301a:	2b00      	cmp	r3, #0
 800301c:	d008      	beq.n	8003030 <wizphy_setphypmode+0x88>
 800301e:	2300      	movs	r3, #0
 8003020:	e008      	b.n	8003034 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <wizphy_setphypmode+0x88>
 800302c:	2300      	movs	r3, #0
 800302e:	e001      	b.n	8003034 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8003030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2206      	movs	r2, #6
 8003048:	4619      	mov	r1, r3
 800304a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800304e:	f000 f98d 	bl	800336c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	330e      	adds	r3, #14
 8003056:	2204      	movs	r2, #4
 8003058:	4619      	mov	r1, r3
 800305a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800305e:	f000 f985 	bl	800336c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	330a      	adds	r3, #10
 8003066:	2204      	movs	r2, #4
 8003068:	4619      	mov	r1, r3
 800306a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800306e:	f000 f97d 	bl	800336c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3306      	adds	r3, #6
 8003076:	2204      	movs	r2, #4
 8003078:	4619      	mov	r1, r3
 800307a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800307e:	f000 f975 	bl	800336c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	7c9a      	ldrb	r2, [r3, #18]
 8003086:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <wizchip_setnetinfo+0x78>)
 8003088:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	7cda      	ldrb	r2, [r3, #19]
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <wizchip_setnetinfo+0x78>)
 8003090:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	7d1a      	ldrb	r2, [r3, #20]
 8003096:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <wizchip_setnetinfo+0x78>)
 8003098:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	7d5a      	ldrb	r2, [r3, #21]
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <wizchip_setnetinfo+0x78>)
 80030a0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	7d9a      	ldrb	r2, [r3, #22]
 80030a6:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <wizchip_setnetinfo+0x7c>)
 80030a8:	701a      	strb	r2, [r3, #0]
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000114 	andcs	r0, r0, r4, lsl r1
 80030b8:	20000118 	andcs	r0, r0, r8, lsl r1

080030bc <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2206      	movs	r2, #6
 80030c8:	4619      	mov	r1, r3
 80030ca:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80030ce:	f000 f909 	bl	80032e4 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	330e      	adds	r3, #14
 80030d6:	2204      	movs	r2, #4
 80030d8:	4619      	mov	r1, r3
 80030da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80030de:	f000 f901 	bl	80032e4 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	330a      	adds	r3, #10
 80030e6:	2204      	movs	r2, #4
 80030e8:	4619      	mov	r1, r3
 80030ea:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80030ee:	f000 f8f9 	bl	80032e4 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3306      	adds	r3, #6
 80030f6:	2204      	movs	r2, #4
 80030f8:	4619      	mov	r1, r3
 80030fa:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80030fe:	f000 f8f1 	bl	80032e4 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8003102:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <wizchip_getnetinfo+0x78>)
 8003104:	781a      	ldrb	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <wizchip_getnetinfo+0x78>)
 800310c:	785a      	ldrb	r2, [r3, #1]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8003112:	4b08      	ldr	r3, [pc, #32]	; (8003134 <wizchip_getnetinfo+0x78>)
 8003114:	789a      	ldrb	r2, [r3, #2]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <wizchip_getnetinfo+0x78>)
 800311c:	78da      	ldrb	r2, [r3, #3]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8003122:	4b05      	ldr	r3, [pc, #20]	; (8003138 <wizchip_getnetinfo+0x7c>)
 8003124:	781a      	ldrb	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	759a      	strb	r2, [r3, #22]
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000114 	andcs	r0, r0, r4, lsl r1
 8003138:	20000118 	andcs	r0, r0, r8, lsl r1

0800313c <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != 5500   
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <wizchip_setnetmode+0x1e>
 8003154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003158:	e00e      	b.n	8003178 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 800315a:	2000      	movs	r0, #0
 800315c:	f000 f85c 	bl	8003218 <WIZCHIP_READ>
 8003160:	4603      	mov	r3, r0
 8003162:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	4313      	orrs	r3, r2
 800316a:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	4619      	mov	r1, r3
 8003170:	2000      	movs	r0, #0
 8003172:	f000 f881 	bl	8003278 <WIZCHIP_WRITE>
   return 0;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8003184:	2000      	movs	r0, #0
 8003186:	f000 f847 	bl	8003218 <WIZCHIP_READ>
 800318a:	4603      	mov	r3, r0
}
 800318c:	4618      	mov	r0, r3
 800318e:	bd80      	pop	{r7, pc}

08003190 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	4619      	mov	r1, r3
 800319e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80031a2:	f000 f869 	bl	8003278 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	885b      	ldrh	r3, [r3, #2]
 80031aa:	0a1b      	lsrs	r3, r3, #8
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	4619      	mov	r1, r3
 80031b2:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 80031b6:	f000 f85f 	bl	8003278 <WIZCHIP_WRITE>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	885b      	ldrh	r3, [r3, #2]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	4619      	mov	r1, r3
 80031c2:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80031c6:	f000 f857 	bl	8003278 <WIZCHIP_WRITE>
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop

080031d4 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80031dc:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80031e0:	f000 f81a 	bl	8003218 <WIZCHIP_READ>
 80031e4:	4603      	mov	r3, r0
 80031e6:	461a      	mov	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80031ec:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 80031f0:	f000 f812 	bl	8003218 <WIZCHIP_READ>
 80031f4:	4603      	mov	r3, r0
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	b29c      	uxth	r4, r3
 80031fc:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003200:	f000 f80a 	bl	8003218 <WIZCHIP_READ>
 8003204:	4603      	mov	r3, r0
 8003206:	b29b      	uxth	r3, r3
 8003208:	4423      	add	r3, r4
 800320a:	b29a      	uxth	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	805a      	strh	r2, [r3, #2]
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bd90      	pop	{r4, r7, pc}

08003218 <WIZCHIP_READ>:
#define _W5500_SPI_FDM_OP_LEN4_     0x03

////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 8003220:	4b14      	ldr	r3, [pc, #80]	; (8003274 <WIZCHIP_READ+0x5c>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003226:	4b13      	ldr	r3, [pc, #76]	; (8003274 <WIZCHIP_READ+0x5c>)
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	4798      	blx	r3
   	   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800322c:	4b11      	ldr	r3, [pc, #68]	; (8003274 <WIZCHIP_READ+0x5c>)
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	0c12      	lsrs	r2, r2, #16
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	4610      	mov	r0, r2
 8003238:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800323a:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <WIZCHIP_READ+0x5c>)
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	0a12      	lsrs	r2, r2, #8
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	4610      	mov	r0, r2
 8003246:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003248:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <WIZCHIP_READ+0x5c>)
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	4610      	mov	r0, r2
 8003252:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte();
 8003254:	4b07      	ldr	r3, [pc, #28]	; (8003274 <WIZCHIP_READ+0x5c>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	4798      	blx	r3
 800325a:	4603      	mov	r3, r0
 800325c:	73fb      	strb	r3, [r7, #15]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5000. !!!"   
#endif

   WIZCHIP.CS._deselect();
 800325e:	4b05      	ldr	r3, [pc, #20]	; (8003274 <WIZCHIP_READ+0x5c>)
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <WIZCHIP_READ+0x5c>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4798      	blx	r3
   return ret;
 800326a:	7bfb      	ldrb	r3, [r7, #15]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	20000084 	andcs	r0, r0, r4, lsl #1

08003278 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	70fb      	strb	r3, [r7, #3]
	WIZCHIP_CRITICAL_ENTER();
 8003284:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <WIZCHIP_WRITE+0x68>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	4798      	blx	r3
   WIZCHIP.CS._select();
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <WIZCHIP_WRITE+0x68>)
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f043 0304 	orr.w	r3, r3, #4
 8003296:	607b      	str	r3, [r7, #4]
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003298:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <WIZCHIP_WRITE+0x68>)
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	0c12      	lsrs	r2, r2, #16
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	4610      	mov	r0, r2
 80032a4:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80032a6:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <WIZCHIP_WRITE+0x68>)
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	0a12      	lsrs	r2, r2, #8
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	4610      	mov	r0, r2
 80032b2:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80032b4:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <WIZCHIP_WRITE+0x68>)
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	4610      	mov	r0, r2
 80032be:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);
 80032c0:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <WIZCHIP_WRITE+0x68>)
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	4610      	mov	r0, r2
 80032c8:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!"
#endif

   WIZCHIP.CS._deselect();
 80032ca:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <WIZCHIP_WRITE+0x68>)
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <WIZCHIP_WRITE+0x68>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4798      	blx	r3
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000084 	andcs	r0, r0, r4, lsl #1

080032e4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80032e4:	b590      	push	{r4, r7, lr}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	4613      	mov	r3, r2
 80032f0:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	82fb      	strh	r3, [r7, #22]
   uint16_t j = 0;
 80032f6:	2300      	movs	r3, #0
 80032f8:	82bb      	strh	r3, [r7, #20]
   WIZCHIP_CRITICAL_ENTER();
 80032fa:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <WIZCHIP_READ_BUF+0x84>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003300:	4b19      	ldr	r3, [pc, #100]	; (8003368 <WIZCHIP_READ_BUF+0x84>)
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003306:	4b18      	ldr	r3, [pc, #96]	; (8003368 <WIZCHIP_READ_BUF+0x84>)
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	0c12      	lsrs	r2, r2, #16
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	4610      	mov	r0, r2
 8003312:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003314:	4b14      	ldr	r3, [pc, #80]	; (8003368 <WIZCHIP_READ_BUF+0x84>)
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	0a12      	lsrs	r2, r2, #8
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	4610      	mov	r0, r2
 8003320:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003322:	4b11      	ldr	r3, [pc, #68]	; (8003368 <WIZCHIP_READ_BUF+0x84>)
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	4610      	mov	r0, r2
 800332c:	4798      	blx	r3
      for(i = 0; i < len; i++)
 800332e:	2300      	movs	r3, #0
 8003330:	82fb      	strh	r3, [r7, #22]
 8003332:	e00a      	b.n	800334a <WIZCHIP_READ_BUF+0x66>
        pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8003334:	8afb      	ldrh	r3, [r7, #22]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	18d4      	adds	r4, r2, r3
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <WIZCHIP_READ_BUF+0x84>)
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	4798      	blx	r3
 8003340:	4603      	mov	r3, r0
 8003342:	7023      	strb	r3, [r4, #0]
      for(i = 0; i < len; i++)
 8003344:	8afb      	ldrh	r3, [r7, #22]
 8003346:	3301      	adds	r3, #1
 8003348:	82fb      	strh	r3, [r7, #22]
 800334a:	8afa      	ldrh	r2, [r7, #22]
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	429a      	cmp	r2, r3
 8003350:	d3f0      	bcc.n	8003334 <WIZCHIP_READ_BUF+0x50>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <WIZCHIP_READ_BUF+0x84>)
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003358:	4b03      	ldr	r3, [pc, #12]	; (8003368 <WIZCHIP_READ_BUF+0x84>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4798      	blx	r3
}
 800335e:	bf00      	nop
 8003360:	371c      	adds	r7, #28
 8003362:	46bd      	mov	sp, r7
 8003364:	bd90      	pop	{r4, r7, pc}
 8003366:	bf00      	nop
 8003368:	20000084 	andcs	r0, r0, r4, lsl #1

0800336c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	4613      	mov	r3, r2
 8003378:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 800337a:	2300      	movs	r3, #0
 800337c:	82fb      	strh	r3, [r7, #22]
   uint16_t j = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	82bb      	strh	r3, [r7, #20]
   WIZCHIP_CRITICAL_ENTER();
 8003382:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <WIZCHIP_WRITE_BUF+0x8c>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003388:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <WIZCHIP_WRITE_BUF+0x8c>)
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f043 0304 	orr.w	r3, r3, #4
 8003394:	60fb      	str	r3, [r7, #12]
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003396:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <WIZCHIP_WRITE_BUF+0x8c>)
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	0c12      	lsrs	r2, r2, #16
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	4610      	mov	r0, r2
 80033a2:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80033a4:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <WIZCHIP_WRITE_BUF+0x8c>)
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	0a12      	lsrs	r2, r2, #8
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	4610      	mov	r0, r2
 80033b0:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80033b2:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <WIZCHIP_WRITE_BUF+0x8c>)
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	4610      	mov	r0, r2
 80033bc:	4798      	blx	r3
      for(i = 0; i < len; i++)
 80033be:	2300      	movs	r3, #0
 80033c0:	82fb      	strh	r3, [r7, #22]
 80033c2:	e00a      	b.n	80033da <WIZCHIP_WRITE_BUF+0x6e>
         WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80033c4:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <WIZCHIP_WRITE_BUF+0x8c>)
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	8afa      	ldrh	r2, [r7, #22]
 80033ca:	68b9      	ldr	r1, [r7, #8]
 80033cc:	440a      	add	r2, r1
 80033ce:	7812      	ldrb	r2, [r2, #0]
 80033d0:	4610      	mov	r0, r2
 80033d2:	4798      	blx	r3
      for(i = 0; i < len; i++)
 80033d4:	8afb      	ldrh	r3, [r7, #22]
 80033d6:	3301      	adds	r3, #1
 80033d8:	82fb      	strh	r3, [r7, #22]
 80033da:	8afa      	ldrh	r2, [r7, #22]
 80033dc:	88fb      	ldrh	r3, [r7, #6]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d3f0      	bcc.n	80033c4 <WIZCHIP_WRITE_BUF+0x58>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
 80033e2:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <WIZCHIP_WRITE_BUF+0x8c>)
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80033e8:	4b03      	ldr	r3, [pc, #12]	; (80033f8 <WIZCHIP_WRITE_BUF+0x8c>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4798      	blx	r3
}
 80033ee:	bf00      	nop
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000084 	andcs	r0, r0, r4, lsl #1

080033fc <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003406:	2300      	movs	r3, #0
 8003408:	81fb      	strh	r3, [r7, #14]
 800340a:	2300      	movs	r3, #0
 800340c:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	3301      	adds	r3, #1
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fefc 	bl	8003218 <WIZCHIP_READ>
 8003420:	4603      	mov	r3, r0
 8003422:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003424:	89bb      	ldrh	r3, [r7, #12]
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	b29c      	uxth	r4, r3
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	3301      	adds	r3, #1
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff feee 	bl	8003218 <WIZCHIP_READ>
 800343c:	4603      	mov	r3, r0
 800343e:	b29b      	uxth	r3, r3
 8003440:	4423      	add	r3, r4
 8003442:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003444:	89bb      	ldrh	r3, [r7, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d01a      	beq.n	8003480 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	3301      	adds	r3, #1
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff fede 	bl	8003218 <WIZCHIP_READ>
 800345c:	4603      	mov	r3, r0
 800345e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003460:	89fb      	ldrh	r3, [r7, #14]
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	b29c      	uxth	r4, r3
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	3301      	adds	r3, #1
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fed0 	bl	8003218 <WIZCHIP_READ>
 8003478:	4603      	mov	r3, r0
 800347a:	b29b      	uxth	r3, r3
 800347c:	4423      	add	r3, r4
 800347e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003480:	89fa      	ldrh	r2, [r7, #14]
 8003482:	89bb      	ldrh	r3, [r7, #12]
 8003484:	429a      	cmp	r2, r3
 8003486:	d1c2      	bne.n	800340e <getSn_TX_FSR+0x12>
   return val;
 8003488:	89fb      	ldrh	r3, [r7, #14]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	bd90      	pop	{r4, r7, pc}
 8003492:	bf00      	nop

08003494 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800349e:	2300      	movs	r3, #0
 80034a0:	81fb      	strh	r3, [r7, #14]
 80034a2:	2300      	movs	r3, #0
 80034a4:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	3301      	adds	r3, #1
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff feb0 	bl	8003218 <WIZCHIP_READ>
 80034b8:	4603      	mov	r3, r0
 80034ba:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80034bc:	89bb      	ldrh	r3, [r7, #12]
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	b29c      	uxth	r4, r3
 80034c2:	79fb      	ldrb	r3, [r7, #7]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	3301      	adds	r3, #1
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fea2 	bl	8003218 <WIZCHIP_READ>
 80034d4:	4603      	mov	r3, r0
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	4423      	add	r3, r4
 80034da:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80034dc:	89bb      	ldrh	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d01a      	beq.n	8003518 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	3301      	adds	r3, #1
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff fe92 	bl	8003218 <WIZCHIP_READ>
 80034f4:	4603      	mov	r3, r0
 80034f6:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80034f8:	89fb      	ldrh	r3, [r7, #14]
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	b29c      	uxth	r4, r3
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	3301      	adds	r3, #1
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fe84 	bl	8003218 <WIZCHIP_READ>
 8003510:	4603      	mov	r3, r0
 8003512:	b29b      	uxth	r3, r3
 8003514:	4423      	add	r3, r4
 8003516:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003518:	89fa      	ldrh	r2, [r7, #14]
 800351a:	89bb      	ldrh	r3, [r7, #12]
 800351c:	429a      	cmp	r2, r3
 800351e:	d1c2      	bne.n	80034a6 <getSn_RX_RSR+0x12>
   return val;
 8003520:	89fb      	ldrh	r3, [r7, #14]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	bd90      	pop	{r4, r7, pc}
 800352a:	bf00      	nop

0800352c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800352c:	b590      	push	{r4, r7, lr}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	6039      	str	r1, [r7, #0]
 8003536:	71fb      	strb	r3, [r7, #7]
 8003538:	4613      	mov	r3, r2
 800353a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	60bb      	str	r3, [r7, #8]
   if(len == 0)  return;
 8003544:	88bb      	ldrh	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d048      	beq.n	80035dc <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	3301      	adds	r3, #1
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fe5e 	bl	8003218 <WIZCHIP_READ>
 800355c:	4603      	mov	r3, r0
 800355e:	b29b      	uxth	r3, r3
 8003560:	021b      	lsls	r3, r3, #8
 8003562:	b29c      	uxth	r4, r3
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	3301      	adds	r3, #1
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fe51 	bl	8003218 <WIZCHIP_READ>
 8003576:	4603      	mov	r3, r0
 8003578:	b29b      	uxth	r3, r3
 800357a:	4423      	add	r3, r4
 800357c:	81fb      	strh	r3, [r7, #14]
   
   addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800357e:	89fb      	ldrh	r3, [r7, #14]
 8003580:	021a      	lsls	r2, r3, #8
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	3302      	adds	r3, #2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4413      	add	r3, r2
 800358c:	60bb      	str	r3, [r7, #8]
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800358e:	88bb      	ldrh	r3, [r7, #4]
 8003590:	461a      	mov	r2, r3
 8003592:	6839      	ldr	r1, [r7, #0]
 8003594:	68b8      	ldr	r0, [r7, #8]
 8003596:	f7ff fee9 	bl	800336c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800359a:	89fa      	ldrh	r2, [r7, #14]
 800359c:	88bb      	ldrh	r3, [r7, #4]
 800359e:	4413      	add	r3, r2
 80035a0:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	3301      	adds	r3, #1
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80035ae:	461a      	mov	r2, r3
 80035b0:	89fb      	ldrh	r3, [r7, #14]
 80035b2:	0a1b      	lsrs	r3, r3, #8
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	4619      	mov	r1, r3
 80035ba:	4610      	mov	r0, r2
 80035bc:	f7ff fe5c 	bl	8003278 <WIZCHIP_WRITE>
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	3301      	adds	r3, #1
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80035cc:	461a      	mov	r2, r3
 80035ce:	89fb      	ldrh	r3, [r7, #14]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	4619      	mov	r1, r3
 80035d4:	4610      	mov	r0, r2
 80035d6:	f7ff fe4f 	bl	8003278 <WIZCHIP_WRITE>
 80035da:	e000      	b.n	80035de <wiz_send_data+0xb2>
   if(len == 0)  return;
 80035dc:	bf00      	nop
}
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd90      	pop	{r4, r7, pc}

080035e4 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	6039      	str	r1, [r7, #0]
 80035ee:	71fb      	strb	r3, [r7, #7]
 80035f0:	4613      	mov	r3, r2
 80035f2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80035fc:	88bb      	ldrh	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d048      	beq.n	8003694 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	3301      	adds	r3, #1
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff fe02 	bl	8003218 <WIZCHIP_READ>
 8003614:	4603      	mov	r3, r0
 8003616:	b29b      	uxth	r3, r3
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	b29c      	uxth	r4, r3
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	3301      	adds	r3, #1
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fdf5 	bl	8003218 <WIZCHIP_READ>
 800362e:	4603      	mov	r3, r0
 8003630:	b29b      	uxth	r3, r3
 8003632:	4423      	add	r3, r4
 8003634:	81fb      	strh	r3, [r7, #14]
   addrsel = (ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8003636:	89fb      	ldrh	r3, [r7, #14]
 8003638:	021a      	lsls	r2, r3, #8
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	3303      	adds	r3, #3
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4413      	add	r3, r2
 8003644:	60bb      	str	r3, [r7, #8]
   
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8003646:	88bb      	ldrh	r3, [r7, #4]
 8003648:	461a      	mov	r2, r3
 800364a:	6839      	ldr	r1, [r7, #0]
 800364c:	68b8      	ldr	r0, [r7, #8]
 800364e:	f7ff fe49 	bl	80032e4 <WIZCHIP_READ_BUF>
   ptr += len;
 8003652:	89fa      	ldrh	r2, [r7, #14]
 8003654:	88bb      	ldrh	r3, [r7, #4]
 8003656:	4413      	add	r3, r2
 8003658:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	3301      	adds	r3, #1
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003666:	461a      	mov	r2, r3
 8003668:	89fb      	ldrh	r3, [r7, #14]
 800366a:	0a1b      	lsrs	r3, r3, #8
 800366c:	b29b      	uxth	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f7ff fe00 	bl	8003278 <WIZCHIP_WRITE>
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	3301      	adds	r3, #1
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003684:	461a      	mov	r2, r3
 8003686:	89fb      	ldrh	r3, [r7, #14]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	4619      	mov	r1, r3
 800368c:	4610      	mov	r0, r2
 800368e:	f7ff fdf3 	bl	8003278 <WIZCHIP_WRITE>
 8003692:	e000      	b.n	8003696 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8003694:	bf00      	nop
}
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	bd90      	pop	{r4, r7, pc}

0800369c <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 800369c:	b590      	push	{r4, r7, lr}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	460a      	mov	r2, r1
 80036a6:	71fb      	strb	r3, [r7, #7]
 80036a8:	4613      	mov	r3, r2
 80036aa:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	81fb      	strh	r3, [r7, #14]
   ptr = getSn_RX_RD(sn);
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	3301      	adds	r3, #1
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff fdab 	bl	8003218 <WIZCHIP_READ>
 80036c2:	4603      	mov	r3, r0
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	b29c      	uxth	r4, r3
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	3301      	adds	r3, #1
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fd9e 	bl	8003218 <WIZCHIP_READ>
 80036dc:	4603      	mov	r3, r0
 80036de:	b29b      	uxth	r3, r3
 80036e0:	4423      	add	r3, r4
 80036e2:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 80036e4:	89fa      	ldrh	r2, [r7, #14]
 80036e6:	88bb      	ldrh	r3, [r7, #4]
 80036e8:	4413      	add	r3, r2
 80036ea:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 80036ec:	79fb      	ldrb	r3, [r7, #7]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	3301      	adds	r3, #1
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80036f8:	461a      	mov	r2, r3
 80036fa:	89fb      	ldrh	r3, [r7, #14]
 80036fc:	0a1b      	lsrs	r3, r3, #8
 80036fe:	b29b      	uxth	r3, r3
 8003700:	b2db      	uxtb	r3, r3
 8003702:	4619      	mov	r1, r3
 8003704:	4610      	mov	r0, r2
 8003706:	f7ff fdb7 	bl	8003278 <WIZCHIP_WRITE>
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	3301      	adds	r3, #1
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003716:	461a      	mov	r2, r3
 8003718:	89fb      	ldrh	r3, [r7, #14]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f7ff fdaa 	bl	8003278 <WIZCHIP_WRITE>
}
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	bd90      	pop	{r4, r7, pc}

0800372c <ip_assign>:
********************************************************************************
User's Function Implementation Part
********************************************************************************
*/

static void ip_assign(void) { }
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr

08003738 <ip_update>:

static void ip_update(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
	setMR(MR_RST);
 800373c:	2180      	movs	r1, #128	; 0x80
 800373e:	2000      	movs	r0, #0
 8003740:	f7ff fd9a 	bl	8003278 <WIZCHIP_WRITE>
	getMR(); // for delay
 8003744:	2000      	movs	r0, #0
 8003746:	f7ff fd67 	bl	8003218 <WIZCHIP_READ>
	setSHAR(wizchip_mac);
 800374a:	2206      	movs	r2, #6
 800374c:	4903      	ldr	r1, [pc, #12]	; (800375c <ip_update+0x24>)
 800374e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003752:	f7ff fe0b 	bl	800336c <WIZCHIP_WRITE_BUF>
}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	2000012c 	andcs	r0, r0, ip, lsr #2

08003760 <ip_conflict>:

static void ip_conflict(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8003764:	2180      	movs	r1, #128	; 0x80
 8003766:	2000      	movs	r0, #0
 8003768:	f7ff fd86 	bl	8003278 <WIZCHIP_WRITE>
	getMR(); // for delay
 800376c:	2000      	movs	r0, #0
 800376e:	f7ff fd53 	bl	8003218 <WIZCHIP_READ>
	setSHAR(wizchip_mac);
 8003772:	2206      	movs	r2, #6
 8003774:	4909      	ldr	r1, [pc, #36]	; (800379c <ip_conflict+0x3c>)
 8003776:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800377a:	f7ff fdf7 	bl	800336c <WIZCHIP_WRITE_BUF>

	socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <ip_conflict+0x40>)
 8003780:	7818      	ldrb	r0, [r3, #0]
 8003782:	2300      	movs	r3, #0
 8003784:	2244      	movs	r2, #68	; 0x44
 8003786:	2102      	movs	r1, #2
 8003788:	f7fe f8d8 	bl	800193c <socket>
	send_DHCP_DISCOVER();
 800378c:	f000 f80c 	bl	80037a8 <send_DHCP_DISCOVER>
	dhcp_state = STATE_DHCP_DISCOVER;
 8003790:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <ip_conflict+0x44>)
 8003792:	2201      	movs	r2, #1
 8003794:	701a      	strb	r2, [r3, #0]
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	2000012c 	andcs	r0, r0, ip, lsr #2
 80037a0:	20003670 	andcs	r3, r0, r0, ror r6
 80037a4:	20003644 	andcs	r3, r0, r4, asr #12

080037a8 <send_DHCP_DISCOVER>:
* Returns    : None.
* Note       : 
*********************************************************************************************************
*/
void send_DHCP_DISCOVER(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	80bb      	strh	r3, [r7, #4]

	MSG->op = DHCP_BOOTREQUEST;
 80037b2:	4b4f      	ldr	r3, [pc, #316]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2201      	movs	r2, #1
 80037b8:	701a      	strb	r2, [r3, #0]
	MSG->htype = DHCP_HTYPE10MB;
 80037ba:	4b4d      	ldr	r3, [pc, #308]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2201      	movs	r2, #1
 80037c0:	705a      	strb	r2, [r3, #1]
	MSG->hlen = DHCP_HLENETHERNET;
 80037c2:	4b4b      	ldr	r3, [pc, #300]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2206      	movs	r2, #6
 80037c8:	709a      	strb	r2, [r3, #2]
	MSG->hops = DHCP_HOPS;
 80037ca:	4b49      	ldr	r3, [pc, #292]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2200      	movs	r2, #0
 80037d0:	70da      	strb	r2, [r3, #3]
	MSG->xid = DHCP_XID;
 80037d2:	4b47      	ldr	r3, [pc, #284]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a47      	ldr	r2, [pc, #284]	; (80038f4 <send_DHCP_DISCOVER+0x14c>)
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	605a      	str	r2, [r3, #4]
	MSG->secs = DHCP_SECS;
 80037dc:	4b44      	ldr	r3, [pc, #272]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2200      	movs	r2, #0
 80037e2:	811a      	strh	r2, [r3, #8]
	MSG->flags = DHCP_FLAGSBROADCAST;
 80037e4:	4b42      	ldr	r3, [pc, #264]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2280      	movs	r2, #128	; 0x80
 80037ea:	815a      	strh	r2, [r3, #10]

	MSG->ciaddr[0] = 0;
 80037ec:	4b40      	ldr	r3, [pc, #256]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2200      	movs	r2, #0
 80037f2:	731a      	strb	r2, [r3, #12]
	MSG->ciaddr[1] = 0;
 80037f4:	4b3e      	ldr	r3, [pc, #248]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2200      	movs	r2, #0
 80037fa:	735a      	strb	r2, [r3, #13]
	MSG->ciaddr[2] = 0;
 80037fc:	4b3c      	ldr	r3, [pc, #240]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2200      	movs	r2, #0
 8003802:	739a      	strb	r2, [r3, #14]
	MSG->ciaddr[3] = 0;
 8003804:	4b3a      	ldr	r3, [pc, #232]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2200      	movs	r2, #0
 800380a:	73da      	strb	r2, [r3, #15]

	MSG->yiaddr[0] = 0;
 800380c:	4b38      	ldr	r3, [pc, #224]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2200      	movs	r2, #0
 8003812:	741a      	strb	r2, [r3, #16]
	MSG->yiaddr[1] = 0;
 8003814:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2200      	movs	r2, #0
 800381a:	745a      	strb	r2, [r3, #17]
	MSG->yiaddr[2] = 0;
 800381c:	4b34      	ldr	r3, [pc, #208]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2200      	movs	r2, #0
 8003822:	749a      	strb	r2, [r3, #18]
	MSG->yiaddr[3] = 0;
 8003824:	4b32      	ldr	r3, [pc, #200]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2200      	movs	r2, #0
 800382a:	74da      	strb	r2, [r3, #19]

	MSG->siaddr[0] = 0;
 800382c:	4b30      	ldr	r3, [pc, #192]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2200      	movs	r2, #0
 8003832:	751a      	strb	r2, [r3, #20]
	MSG->siaddr[1] = 0;
 8003834:	4b2e      	ldr	r3, [pc, #184]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2200      	movs	r2, #0
 800383a:	755a      	strb	r2, [r3, #21]
	MSG->siaddr[2] = 0;
 800383c:	4b2c      	ldr	r3, [pc, #176]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2200      	movs	r2, #0
 8003842:	759a      	strb	r2, [r3, #22]
	MSG->siaddr[3] = 0;
 8003844:	4b2a      	ldr	r3, [pc, #168]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2200      	movs	r2, #0
 800384a:	75da      	strb	r2, [r3, #23]

	MSG->giaddr[0] = 0;
 800384c:	4b28      	ldr	r3, [pc, #160]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2200      	movs	r2, #0
 8003852:	761a      	strb	r2, [r3, #24]
	MSG->giaddr[1] = 0;
 8003854:	4b26      	ldr	r3, [pc, #152]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2200      	movs	r2, #0
 800385a:	765a      	strb	r2, [r3, #25]
	MSG->giaddr[2] = 0;
 800385c:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2200      	movs	r2, #0
 8003862:	769a      	strb	r2, [r3, #26]
	MSG->giaddr[3] = 0;
 8003864:	4b22      	ldr	r3, [pc, #136]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2200      	movs	r2, #0
 800386a:	76da      	strb	r2, [r3, #27]

	MSG->chaddr[0] = wizchip_mac[0];
 800386c:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a21      	ldr	r2, [pc, #132]	; (80038f8 <send_DHCP_DISCOVER+0x150>)
 8003872:	7812      	ldrb	r2, [r2, #0]
 8003874:	771a      	strb	r2, [r3, #28]
	MSG->chaddr[1] = wizchip_mac[1];
 8003876:	4b1e      	ldr	r3, [pc, #120]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a1f      	ldr	r2, [pc, #124]	; (80038f8 <send_DHCP_DISCOVER+0x150>)
 800387c:	7852      	ldrb	r2, [r2, #1]
 800387e:	775a      	strb	r2, [r3, #29]
	MSG->chaddr[2] = wizchip_mac[2];
 8003880:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a1c      	ldr	r2, [pc, #112]	; (80038f8 <send_DHCP_DISCOVER+0x150>)
 8003886:	7892      	ldrb	r2, [r2, #2]
 8003888:	779a      	strb	r2, [r3, #30]
	MSG->chaddr[3] = wizchip_mac[3];
 800388a:	4b19      	ldr	r3, [pc, #100]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a1a      	ldr	r2, [pc, #104]	; (80038f8 <send_DHCP_DISCOVER+0x150>)
 8003890:	78d2      	ldrb	r2, [r2, #3]
 8003892:	77da      	strb	r2, [r3, #31]
	MSG->chaddr[4] = wizchip_mac[4];
 8003894:	4b16      	ldr	r3, [pc, #88]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a17      	ldr	r2, [pc, #92]	; (80038f8 <send_DHCP_DISCOVER+0x150>)
 800389a:	7912      	ldrb	r2, [r2, #4]
 800389c:	f883 2020 	strb.w	r2, [r3, #32]
	MSG->chaddr[5] = wizchip_mac[5];
 80038a0:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a14      	ldr	r2, [pc, #80]	; (80038f8 <send_DHCP_DISCOVER+0x150>)
 80038a6:	7952      	ldrb	r2, [r2, #5]
 80038a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++) MSG->chaddr[i] = 0;
 80038ac:	2306      	movs	r3, #6
 80038ae:	80fb      	strh	r3, [r7, #6]
 80038b0:	e008      	b.n	80038c4 <send_DHCP_DISCOVER+0x11c>
 80038b2:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	4413      	add	r3, r2
 80038ba:	2200      	movs	r2, #0
 80038bc:	771a      	strb	r2, [r3, #28]
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	3301      	adds	r3, #1
 80038c2:	80fb      	strh	r3, [r7, #6]
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	2b0f      	cmp	r3, #15
 80038c8:	d9f3      	bls.n	80038b2 <send_DHCP_DISCOVER+0x10a>
	for (i = 0; i < 64; i++) MSG->sname[i] = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	80fb      	strh	r3, [r7, #6]
 80038ce:	e009      	b.n	80038e4 <send_DHCP_DISCOVER+0x13c>
 80038d0:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <send_DHCP_DISCOVER+0x148>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	4413      	add	r3, r2
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	3301      	adds	r3, #1
 80038e2:	80fb      	strh	r3, [r7, #6]
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	2b3f      	cmp	r3, #63	; 0x3f
 80038e8:	d9f2      	bls.n	80038d0 <send_DHCP_DISCOVER+0x128>
	for (i = 0; i < 128; i++) MSG->file[i] = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	80fb      	strh	r3, [r7, #6]
 80038ee:	e00f      	b.n	8003910 <send_DHCP_DISCOVER+0x168>
 80038f0:	2000366c 	andcs	r3, r0, ip, ror #12
 80038f4:	20003654 	andcs	r3, r0, r4, asr r6
 80038f8:	2000012c 	andcs	r0, r0, ip, lsr #2
 80038fc:	4bab      	ldr	r3, [pc, #684]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	4413      	add	r3, r2
 8003904:	2200      	movs	r2, #0
 8003906:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	3301      	adds	r3, #1
 800390e:	80fb      	strh	r3, [r7, #6]
 8003910:	88fb      	ldrh	r3, [r7, #6]
 8003912:	2b7f      	cmp	r3, #127	; 0x7f
 8003914:	d9f2      	bls.n	80038fc <send_DHCP_DISCOVER+0x154>

	// MAGIC_COOKIE
	MSG->OPT[k++] = 0x63;
 8003916:	4ba5      	ldr	r3, [pc, #660]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	88bb      	ldrh	r3, [r7, #4]
 800391c:	1c59      	adds	r1, r3, #1
 800391e:	80b9      	strh	r1, [r7, #4]
 8003920:	4413      	add	r3, r2
 8003922:	2263      	movs	r2, #99	; 0x63
 8003924:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x82;
 8003928:	4ba0      	ldr	r3, [pc, #640]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	88bb      	ldrh	r3, [r7, #4]
 800392e:	1c59      	adds	r1, r3, #1
 8003930:	80b9      	strh	r1, [r7, #4]
 8003932:	4413      	add	r3, r2
 8003934:	2282      	movs	r2, #130	; 0x82
 8003936:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x53;
 800393a:	4b9c      	ldr	r3, [pc, #624]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	88bb      	ldrh	r3, [r7, #4]
 8003940:	1c59      	adds	r1, r3, #1
 8003942:	80b9      	strh	r1, [r7, #4]
 8003944:	4413      	add	r3, r2
 8003946:	2253      	movs	r2, #83	; 0x53
 8003948:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x63;
 800394c:	4b97      	ldr	r3, [pc, #604]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	88bb      	ldrh	r3, [r7, #4]
 8003952:	1c59      	adds	r1, r3, #1
 8003954:	80b9      	strh	r1, [r7, #4]
 8003956:	4413      	add	r3, r2
 8003958:	2263      	movs	r2, #99	; 0x63
 800395a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	// Option Request Param
	MSG->OPT[k++] = dhcpMessageType;
 800395e:	4b93      	ldr	r3, [pc, #588]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	88bb      	ldrh	r3, [r7, #4]
 8003964:	1c59      	adds	r1, r3, #1
 8003966:	80b9      	strh	r1, [r7, #4]
 8003968:	4413      	add	r3, r2
 800396a:	2235      	movs	r2, #53	; 0x35
 800396c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x01;
 8003970:	4b8e      	ldr	r3, [pc, #568]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	88bb      	ldrh	r3, [r7, #4]
 8003976:	1c59      	adds	r1, r3, #1
 8003978:	80b9      	strh	r1, [r7, #4]
 800397a:	4413      	add	r3, r2
 800397c:	2201      	movs	r2, #1
 800397e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_DISCOVER;
 8003982:	4b8a      	ldr	r3, [pc, #552]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	88bb      	ldrh	r3, [r7, #4]
 8003988:	1c59      	adds	r1, r3, #1
 800398a:	80b9      	strh	r1, [r7, #4]
 800398c:	4413      	add	r3, r2
 800398e:	2201      	movs	r2, #1
 8003990:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	MSG->OPT[k++] = dhcpClientIdentifier;
 8003994:	4b85      	ldr	r3, [pc, #532]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	88bb      	ldrh	r3, [r7, #4]
 800399a:	1c59      	adds	r1, r3, #1
 800399c:	80b9      	strh	r1, [r7, #4]
 800399e:	4413      	add	r3, r2
 80039a0:	223d      	movs	r2, #61	; 0x3d
 80039a2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x07;
 80039a6:	4b81      	ldr	r3, [pc, #516]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	88bb      	ldrh	r3, [r7, #4]
 80039ac:	1c59      	adds	r1, r3, #1
 80039ae:	80b9      	strh	r1, [r7, #4]
 80039b0:	4413      	add	r3, r2
 80039b2:	2207      	movs	r2, #7
 80039b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x01;
 80039b8:	4b7c      	ldr	r3, [pc, #496]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	88bb      	ldrh	r3, [r7, #4]
 80039be:	1c59      	adds	r1, r3, #1
 80039c0:	80b9      	strh	r1, [r7, #4]
 80039c2:	4413      	add	r3, r2
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[0];
 80039ca:	4b78      	ldr	r3, [pc, #480]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	88bb      	ldrh	r3, [r7, #4]
 80039d0:	1c59      	adds	r1, r3, #1
 80039d2:	80b9      	strh	r1, [r7, #4]
 80039d4:	4618      	mov	r0, r3
 80039d6:	4b76      	ldr	r3, [pc, #472]	; (8003bb0 <send_DHCP_DISCOVER+0x408>)
 80039d8:	7819      	ldrb	r1, [r3, #0]
 80039da:	1813      	adds	r3, r2, r0
 80039dc:	460a      	mov	r2, r1
 80039de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[1];
 80039e2:	4b72      	ldr	r3, [pc, #456]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	88bb      	ldrh	r3, [r7, #4]
 80039e8:	1c59      	adds	r1, r3, #1
 80039ea:	80b9      	strh	r1, [r7, #4]
 80039ec:	4618      	mov	r0, r3
 80039ee:	4b70      	ldr	r3, [pc, #448]	; (8003bb0 <send_DHCP_DISCOVER+0x408>)
 80039f0:	7859      	ldrb	r1, [r3, #1]
 80039f2:	1813      	adds	r3, r2, r0
 80039f4:	460a      	mov	r2, r1
 80039f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[2];
 80039fa:	4b6c      	ldr	r3, [pc, #432]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	88bb      	ldrh	r3, [r7, #4]
 8003a00:	1c59      	adds	r1, r3, #1
 8003a02:	80b9      	strh	r1, [r7, #4]
 8003a04:	4618      	mov	r0, r3
 8003a06:	4b6a      	ldr	r3, [pc, #424]	; (8003bb0 <send_DHCP_DISCOVER+0x408>)
 8003a08:	7899      	ldrb	r1, [r3, #2]
 8003a0a:	1813      	adds	r3, r2, r0
 8003a0c:	460a      	mov	r2, r1
 8003a0e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[3];
 8003a12:	4b66      	ldr	r3, [pc, #408]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	88bb      	ldrh	r3, [r7, #4]
 8003a18:	1c59      	adds	r1, r3, #1
 8003a1a:	80b9      	strh	r1, [r7, #4]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	4b64      	ldr	r3, [pc, #400]	; (8003bb0 <send_DHCP_DISCOVER+0x408>)
 8003a20:	78d9      	ldrb	r1, [r3, #3]
 8003a22:	1813      	adds	r3, r2, r0
 8003a24:	460a      	mov	r2, r1
 8003a26:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[4];
 8003a2a:	4b60      	ldr	r3, [pc, #384]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	88bb      	ldrh	r3, [r7, #4]
 8003a30:	1c59      	adds	r1, r3, #1
 8003a32:	80b9      	strh	r1, [r7, #4]
 8003a34:	4618      	mov	r0, r3
 8003a36:	4b5e      	ldr	r3, [pc, #376]	; (8003bb0 <send_DHCP_DISCOVER+0x408>)
 8003a38:	7919      	ldrb	r1, [r3, #4]
 8003a3a:	1813      	adds	r3, r2, r0
 8003a3c:	460a      	mov	r2, r1
 8003a3e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[5];
 8003a42:	4b5a      	ldr	r3, [pc, #360]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	88bb      	ldrh	r3, [r7, #4]
 8003a48:	1c59      	adds	r1, r3, #1
 8003a4a:	80b9      	strh	r1, [r7, #4]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	4b58      	ldr	r3, [pc, #352]	; (8003bb0 <send_DHCP_DISCOVER+0x408>)
 8003a50:	7959      	ldrb	r1, [r3, #5]
 8003a52:	1813      	adds	r3, r2, r0
 8003a54:	460a      	mov	r2, r1
 8003a56:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	MSG->OPT[k++] = hostName;
 8003a5a:	4b54      	ldr	r3, [pc, #336]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	88bb      	ldrh	r3, [r7, #4]
 8003a60:	1c59      	adds	r1, r3, #1
 8003a62:	80b9      	strh	r1, [r7, #4]
 8003a64:	4413      	add	r3, r2
 8003a66:	220c      	movs	r2, #12
 8003a68:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 9; // length of hostname
 8003a6c:	4b4f      	ldr	r3, [pc, #316]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	88bb      	ldrh	r3, [r7, #4]
 8003a72:	1c59      	adds	r1, r3, #1
 8003a74:	80b9      	strh	r1, [r7, #4]
 8003a76:	4413      	add	r3, r2
 8003a78:	2209      	movs	r2, #9
 8003a7a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[0];
 8003a7e:	4b4b      	ldr	r3, [pc, #300]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	88bb      	ldrh	r3, [r7, #4]
 8003a84:	1c59      	adds	r1, r3, #1
 8003a86:	80b9      	strh	r1, [r7, #4]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	4b4a      	ldr	r3, [pc, #296]	; (8003bb4 <send_DHCP_DISCOVER+0x40c>)
 8003a8c:	7819      	ldrb	r1, [r3, #0]
 8003a8e:	1813      	adds	r3, r2, r0
 8003a90:	460a      	mov	r2, r1
 8003a92:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[1];
 8003a96:	4b45      	ldr	r3, [pc, #276]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	88bb      	ldrh	r3, [r7, #4]
 8003a9c:	1c59      	adds	r1, r3, #1
 8003a9e:	80b9      	strh	r1, [r7, #4]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	4b44      	ldr	r3, [pc, #272]	; (8003bb4 <send_DHCP_DISCOVER+0x40c>)
 8003aa4:	7859      	ldrb	r1, [r3, #1]
 8003aa6:	1813      	adds	r3, r2, r0
 8003aa8:	460a      	mov	r2, r1
 8003aaa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[2];
 8003aae:	4b3f      	ldr	r3, [pc, #252]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	88bb      	ldrh	r3, [r7, #4]
 8003ab4:	1c59      	adds	r1, r3, #1
 8003ab6:	80b9      	strh	r1, [r7, #4]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	4b3e      	ldr	r3, [pc, #248]	; (8003bb4 <send_DHCP_DISCOVER+0x40c>)
 8003abc:	7899      	ldrb	r1, [r3, #2]
 8003abe:	1813      	adds	r3, r2, r0
 8003ac0:	460a      	mov	r2, r1
 8003ac2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[3];
 8003ac6:	4b39      	ldr	r3, [pc, #228]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	88bb      	ldrh	r3, [r7, #4]
 8003acc:	1c59      	adds	r1, r3, #1
 8003ace:	80b9      	strh	r1, [r7, #4]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	4b38      	ldr	r3, [pc, #224]	; (8003bb4 <send_DHCP_DISCOVER+0x40c>)
 8003ad4:	78d9      	ldrb	r1, [r3, #3]
 8003ad6:	1813      	adds	r3, r2, r0
 8003ad8:	460a      	mov	r2, r1
 8003ada:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[4];
 8003ade:	4b33      	ldr	r3, [pc, #204]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	88bb      	ldrh	r3, [r7, #4]
 8003ae4:	1c59      	adds	r1, r3, #1
 8003ae6:	80b9      	strh	r1, [r7, #4]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	4b32      	ldr	r3, [pc, #200]	; (8003bb4 <send_DHCP_DISCOVER+0x40c>)
 8003aec:	7919      	ldrb	r1, [r3, #4]
 8003aee:	1813      	adds	r3, r2, r0
 8003af0:	460a      	mov	r2, r1
 8003af2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[5];
 8003af6:	4b2d      	ldr	r3, [pc, #180]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	88bb      	ldrh	r3, [r7, #4]
 8003afc:	1c59      	adds	r1, r3, #1
 8003afe:	80b9      	strh	r1, [r7, #4]
 8003b00:	4618      	mov	r0, r3
 8003b02:	4b2c      	ldr	r3, [pc, #176]	; (8003bb4 <send_DHCP_DISCOVER+0x40c>)
 8003b04:	7959      	ldrb	r1, [r3, #5]
 8003b06:	1813      	adds	r3, r2, r0
 8003b08:	460a      	mov	r2, r1
 8003b0a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[3];
 8003b0e:	4b27      	ldr	r3, [pc, #156]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	88bb      	ldrh	r3, [r7, #4]
 8003b14:	1c59      	adds	r1, r3, #1
 8003b16:	80b9      	strh	r1, [r7, #4]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	4b25      	ldr	r3, [pc, #148]	; (8003bb0 <send_DHCP_DISCOVER+0x408>)
 8003b1c:	78d9      	ldrb	r1, [r3, #3]
 8003b1e:	1813      	adds	r3, r2, r0
 8003b20:	460a      	mov	r2, r1
 8003b22:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[4];
 8003b26:	4b21      	ldr	r3, [pc, #132]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	88bb      	ldrh	r3, [r7, #4]
 8003b2c:	1c59      	adds	r1, r3, #1
 8003b2e:	80b9      	strh	r1, [r7, #4]
 8003b30:	4618      	mov	r0, r3
 8003b32:	4b1f      	ldr	r3, [pc, #124]	; (8003bb0 <send_DHCP_DISCOVER+0x408>)
 8003b34:	7919      	ldrb	r1, [r3, #4]
 8003b36:	1813      	adds	r3, r2, r0
 8003b38:	460a      	mov	r2, r1
 8003b3a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[5];
 8003b3e:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	88bb      	ldrh	r3, [r7, #4]
 8003b44:	1c59      	adds	r1, r3, #1
 8003b46:	80b9      	strh	r1, [r7, #4]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	4b19      	ldr	r3, [pc, #100]	; (8003bb0 <send_DHCP_DISCOVER+0x408>)
 8003b4c:	7959      	ldrb	r1, [r3, #5]
 8003b4e:	1813      	adds	r3, r2, r0
 8003b50:	460a      	mov	r2, r1
 8003b52:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec


	MSG->OPT[k++] = dhcpParamRequest;
 8003b56:	4b15      	ldr	r3, [pc, #84]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	88bb      	ldrh	r3, [r7, #4]
 8003b5c:	1c59      	adds	r1, r3, #1
 8003b5e:	80b9      	strh	r1, [r7, #4]
 8003b60:	4413      	add	r3, r2
 8003b62:	2237      	movs	r2, #55	; 0x37
 8003b64:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x06;	// length of request
 8003b68:	4b10      	ldr	r3, [pc, #64]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	88bb      	ldrh	r3, [r7, #4]
 8003b6e:	1c59      	adds	r1, r3, #1
 8003b70:	80b9      	strh	r1, [r7, #4]
 8003b72:	4413      	add	r3, r2
 8003b74:	2206      	movs	r2, #6
 8003b76:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = subnetMask;
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	88bb      	ldrh	r3, [r7, #4]
 8003b80:	1c59      	adds	r1, r3, #1
 8003b82:	80b9      	strh	r1, [r7, #4]
 8003b84:	4413      	add	r3, r2
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = routersOnSubnet;
 8003b8c:	4b07      	ldr	r3, [pc, #28]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	88bb      	ldrh	r3, [r7, #4]
 8003b92:	1c59      	adds	r1, r3, #1
 8003b94:	80b9      	strh	r1, [r7, #4]
 8003b96:	4413      	add	r3, r2
 8003b98:	2203      	movs	r2, #3
 8003b9a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = dns;
 8003b9e:	4b03      	ldr	r3, [pc, #12]	; (8003bac <send_DHCP_DISCOVER+0x404>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	88bb      	ldrh	r3, [r7, #4]
 8003ba4:	1c59      	adds	r1, r3, #1
 8003ba6:	80b9      	strh	r1, [r7, #4]
 8003ba8:	4413      	add	r3, r2
 8003baa:	e005      	b.n	8003bb8 <send_DHCP_DISCOVER+0x410>
 8003bac:	2000366c 	andcs	r3, r0, ip, ror #12
 8003bb0:	2000012c 	andcs	r0, r0, ip, lsr #2
 8003bb4:	200000a4 	andcs	r0, r0, r4, lsr #1
 8003bb8:	2206      	movs	r2, #6
 8003bba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = domainName;
 8003bbe:	4b2a      	ldr	r3, [pc, #168]	; (8003c68 <send_DHCP_DISCOVER+0x4c0>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	88bb      	ldrh	r3, [r7, #4]
 8003bc4:	1c59      	adds	r1, r3, #1
 8003bc6:	80b9      	strh	r1, [r7, #4]
 8003bc8:	4413      	add	r3, r2
 8003bca:	220f      	movs	r2, #15
 8003bcc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = dhcpT1value;
 8003bd0:	4b25      	ldr	r3, [pc, #148]	; (8003c68 <send_DHCP_DISCOVER+0x4c0>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	88bb      	ldrh	r3, [r7, #4]
 8003bd6:	1c59      	adds	r1, r3, #1
 8003bd8:	80b9      	strh	r1, [r7, #4]
 8003bda:	4413      	add	r3, r2
 8003bdc:	223a      	movs	r2, #58	; 0x3a
 8003bde:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = dhcpT2value;
 8003be2:	4b21      	ldr	r3, [pc, #132]	; (8003c68 <send_DHCP_DISCOVER+0x4c0>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	88bb      	ldrh	r3, [r7, #4]
 8003be8:	1c59      	adds	r1, r3, #1
 8003bea:	80b9      	strh	r1, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	223b      	movs	r2, #59	; 0x3b
 8003bf0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = endOption;
 8003bf4:	4b1c      	ldr	r3, [pc, #112]	; (8003c68 <send_DHCP_DISCOVER+0x4c0>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	88bb      	ldrh	r3, [r7, #4]
 8003bfa:	1c59      	adds	r1, r3, #1
 8003bfc:	80b9      	strh	r1, [r7, #4]
 8003bfe:	4413      	add	r3, r2
 8003c00:	22ff      	movs	r2, #255	; 0xff
 8003c02:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) MSG->OPT[i] = 0;
 8003c06:	88bb      	ldrh	r3, [r7, #4]
 8003c08:	80fb      	strh	r3, [r7, #6]
 8003c0a:	e009      	b.n	8003c20 <send_DHCP_DISCOVER+0x478>
 8003c0c:	4b16      	ldr	r3, [pc, #88]	; (8003c68 <send_DHCP_DISCOVER+0x4c0>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	4413      	add	r3, r2
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	80fb      	strh	r3, [r7, #6]
 8003c20:	88fb      	ldrh	r3, [r7, #6]
 8003c22:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8003c26:	d3f1      	bcc.n	8003c0c <send_DHCP_DISCOVER+0x464>

	// send broadcasting packet
	for (i = 0; i < 4; i++) ip[i] = 255;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	80fb      	strh	r3, [r7, #6]
 8003c2c:	e009      	b.n	8003c42 <send_DHCP_DISCOVER+0x49a>
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	f107 0208 	add.w	r2, r7, #8
 8003c34:	4413      	add	r3, r2
 8003c36:	22ff      	movs	r2, #255	; 0xff
 8003c38:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	80fb      	strh	r3, [r7, #6]
 8003c42:	88fb      	ldrh	r3, [r7, #6]
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d9f2      	bls.n	8003c2e <send_DHCP_DISCOVER+0x486>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)MSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8003c48:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <send_DHCP_DISCOVER+0x4c4>)
 8003c4a:	7818      	ldrb	r0, [r3, #0]
 8003c4c:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <send_DHCP_DISCOVER+0x4c0>)
 8003c4e:	6819      	ldr	r1, [r3, #0]
 8003c50:	463a      	mov	r2, r7
 8003c52:	2343      	movs	r3, #67	; 0x43
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	4613      	mov	r3, r2
 8003c58:	f44f 7209 	mov.w	r2, #548	; 0x224
 8003c5c:	f7fe fa34 	bl	80020c8 <sendto>
}
 8003c60:	bf00      	nop
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	2000366c 	andcs	r3, r0, ip, ror #12
 8003c6c:	20003670 	andcs	r3, r0, r0, ror r6

08003c70 <send_DHCP_REQUEST>:
* Returns    : None.
* Note       : 
*********************************************************************************************************
*/
void send_DHCP_REQUEST(uint8_t *Cip, uint8_t *d_addr)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	827b      	strh	r3, [r7, #18]

	MSG->op = DHCP_BOOTREQUEST;
 8003c7e:	4b56      	ldr	r3, [pc, #344]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2201      	movs	r2, #1
 8003c84:	701a      	strb	r2, [r3, #0]
	MSG->htype = DHCP_HTYPE10MB;
 8003c86:	4b54      	ldr	r3, [pc, #336]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	705a      	strb	r2, [r3, #1]
	MSG->hlen = DHCP_HLENETHERNET;
 8003c8e:	4b52      	ldr	r3, [pc, #328]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2206      	movs	r2, #6
 8003c94:	709a      	strb	r2, [r3, #2]
	MSG->hops = DHCP_HOPS;
 8003c96:	4b50      	ldr	r3, [pc, #320]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	70da      	strb	r2, [r3, #3]
	MSG->xid = DHCP_XID;
 8003c9e:	4b4e      	ldr	r3, [pc, #312]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a4e      	ldr	r2, [pc, #312]	; (8003ddc <send_DHCP_REQUEST+0x16c>)
 8003ca4:	6812      	ldr	r2, [r2, #0]
 8003ca6:	605a      	str	r2, [r3, #4]
	MSG->secs = DHCP_SECS;
 8003ca8:	4b4b      	ldr	r3, [pc, #300]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2200      	movs	r2, #0
 8003cae:	811a      	strh	r2, [r3, #8]
	//MSG->flags = DHCP_FLAGSBROADCAST;
	if (d_addr[0] == 0xff) 	MSG->flags = DHCP_FLAGSBROADCAST;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2bff      	cmp	r3, #255	; 0xff
 8003cb6:	d104      	bne.n	8003cc2 <send_DHCP_REQUEST+0x52>
 8003cb8:	4b47      	ldr	r3, [pc, #284]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2280      	movs	r2, #128	; 0x80
 8003cbe:	815a      	strh	r2, [r3, #10]
 8003cc0:	e003      	b.n	8003cca <send_DHCP_REQUEST+0x5a>
	else MSG->flags = 0;
 8003cc2:	4b45      	ldr	r3, [pc, #276]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	815a      	strh	r2, [r3, #10]
	
	MSG->ciaddr[0] = Cip[0];
 8003cca:	4b43      	ldr	r3, [pc, #268]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	7812      	ldrb	r2, [r2, #0]
 8003cd2:	731a      	strb	r2, [r3, #12]
	MSG->ciaddr[1] = Cip[1];
 8003cd4:	4b40      	ldr	r3, [pc, #256]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	7852      	ldrb	r2, [r2, #1]
 8003cdc:	735a      	strb	r2, [r3, #13]
	MSG->ciaddr[2] = Cip[2];
 8003cde:	4b3e      	ldr	r3, [pc, #248]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	7892      	ldrb	r2, [r2, #2]
 8003ce6:	739a      	strb	r2, [r3, #14]
	MSG->ciaddr[3] = Cip[3];
 8003ce8:	4b3b      	ldr	r3, [pc, #236]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	78d2      	ldrb	r2, [r2, #3]
 8003cf0:	73da      	strb	r2, [r3, #15]

	MSG->yiaddr[0] = 0;
 8003cf2:	4b39      	ldr	r3, [pc, #228]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	741a      	strb	r2, [r3, #16]
	MSG->yiaddr[1] = 0;
 8003cfa:	4b37      	ldr	r3, [pc, #220]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	745a      	strb	r2, [r3, #17]
	MSG->yiaddr[2] = 0;
 8003d02:	4b35      	ldr	r3, [pc, #212]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2200      	movs	r2, #0
 8003d08:	749a      	strb	r2, [r3, #18]
	MSG->yiaddr[3] = 0;
 8003d0a:	4b33      	ldr	r3, [pc, #204]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	74da      	strb	r2, [r3, #19]

	MSG->siaddr[0] = 0;
 8003d12:	4b31      	ldr	r3, [pc, #196]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2200      	movs	r2, #0
 8003d18:	751a      	strb	r2, [r3, #20]
	MSG->siaddr[1] = 0;
 8003d1a:	4b2f      	ldr	r3, [pc, #188]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	755a      	strb	r2, [r3, #21]
	MSG->siaddr[2] = 0;
 8003d22:	4b2d      	ldr	r3, [pc, #180]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2200      	movs	r2, #0
 8003d28:	759a      	strb	r2, [r3, #22]
	MSG->siaddr[3] = 0;
 8003d2a:	4b2b      	ldr	r3, [pc, #172]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	75da      	strb	r2, [r3, #23]

	MSG->giaddr[0] = 0;
 8003d32:	4b29      	ldr	r3, [pc, #164]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	761a      	strb	r2, [r3, #24]
	MSG->giaddr[1] = 0;
 8003d3a:	4b27      	ldr	r3, [pc, #156]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	765a      	strb	r2, [r3, #25]
	MSG->giaddr[2] = 0;
 8003d42:	4b25      	ldr	r3, [pc, #148]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2200      	movs	r2, #0
 8003d48:	769a      	strb	r2, [r3, #26]
	MSG->giaddr[3] = 0;
 8003d4a:	4b23      	ldr	r3, [pc, #140]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	76da      	strb	r2, [r3, #27]

	MSG->chaddr[0] = wizchip_mac[0];
 8003d52:	4b21      	ldr	r3, [pc, #132]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a22      	ldr	r2, [pc, #136]	; (8003de0 <send_DHCP_REQUEST+0x170>)
 8003d58:	7812      	ldrb	r2, [r2, #0]
 8003d5a:	771a      	strb	r2, [r3, #28]
	MSG->chaddr[1] = wizchip_mac[1];
 8003d5c:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1f      	ldr	r2, [pc, #124]	; (8003de0 <send_DHCP_REQUEST+0x170>)
 8003d62:	7852      	ldrb	r2, [r2, #1]
 8003d64:	775a      	strb	r2, [r3, #29]
	MSG->chaddr[2] = wizchip_mac[2];
 8003d66:	4b1c      	ldr	r3, [pc, #112]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1d      	ldr	r2, [pc, #116]	; (8003de0 <send_DHCP_REQUEST+0x170>)
 8003d6c:	7892      	ldrb	r2, [r2, #2]
 8003d6e:	779a      	strb	r2, [r3, #30]
	MSG->chaddr[3] = wizchip_mac[3];
 8003d70:	4b19      	ldr	r3, [pc, #100]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1a      	ldr	r2, [pc, #104]	; (8003de0 <send_DHCP_REQUEST+0x170>)
 8003d76:	78d2      	ldrb	r2, [r2, #3]
 8003d78:	77da      	strb	r2, [r3, #31]
	MSG->chaddr[4] = wizchip_mac[4];
 8003d7a:	4b17      	ldr	r3, [pc, #92]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a18      	ldr	r2, [pc, #96]	; (8003de0 <send_DHCP_REQUEST+0x170>)
 8003d80:	7912      	ldrb	r2, [r2, #4]
 8003d82:	f883 2020 	strb.w	r2, [r3, #32]
	MSG->chaddr[5] = wizchip_mac[5];
 8003d86:	4b14      	ldr	r3, [pc, #80]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a15      	ldr	r2, [pc, #84]	; (8003de0 <send_DHCP_REQUEST+0x170>)
 8003d8c:	7952      	ldrb	r2, [r2, #5]
 8003d8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++) MSG->chaddr[i] = 0;
 8003d92:	2306      	movs	r3, #6
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	e009      	b.n	8003dac <send_DHCP_REQUEST+0x13c>
 8003d98:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	4413      	add	r3, r2
 8003da0:	331c      	adds	r3, #28
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	3301      	adds	r3, #1
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2b0f      	cmp	r3, #15
 8003db0:	ddf2      	ble.n	8003d98 <send_DHCP_REQUEST+0x128>
	for (i = 0; i < 64; i++) MSG->sname[i] = 0;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	e009      	b.n	8003dcc <send_DHCP_REQUEST+0x15c>
 8003db8:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <send_DHCP_REQUEST+0x168>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	332c      	adds	r3, #44	; 0x2c
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	2b3f      	cmp	r3, #63	; 0x3f
 8003dd0:	ddf2      	ble.n	8003db8 <send_DHCP_REQUEST+0x148>
	for (i = 0; i < 128; i++) MSG->file[i] = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	e00f      	b.n	8003df8 <send_DHCP_REQUEST+0x188>
 8003dd8:	2000366c 	andcs	r3, r0, ip, ror #12
 8003ddc:	20003654 	andcs	r3, r0, r4, asr r6
 8003de0:	2000012c 	andcs	r0, r0, ip, lsr #2
 8003de4:	4bab      	ldr	r3, [pc, #684]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	4413      	add	r3, r2
 8003dec:	336c      	adds	r3, #108	; 0x6c
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	3301      	adds	r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8003dfc:	ddf2      	ble.n	8003de4 <send_DHCP_REQUEST+0x174>

	// MAGIC_COOKIE 
	MSG->OPT[k++] = 0x63;
 8003dfe:	4ba5      	ldr	r3, [pc, #660]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	8a7b      	ldrh	r3, [r7, #18]
 8003e04:	1c59      	adds	r1, r3, #1
 8003e06:	8279      	strh	r1, [r7, #18]
 8003e08:	4413      	add	r3, r2
 8003e0a:	2263      	movs	r2, #99	; 0x63
 8003e0c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x82;
 8003e10:	4ba0      	ldr	r3, [pc, #640]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	8a7b      	ldrh	r3, [r7, #18]
 8003e16:	1c59      	adds	r1, r3, #1
 8003e18:	8279      	strh	r1, [r7, #18]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	2282      	movs	r2, #130	; 0x82
 8003e1e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x53;
 8003e22:	4b9c      	ldr	r3, [pc, #624]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	8a7b      	ldrh	r3, [r7, #18]
 8003e28:	1c59      	adds	r1, r3, #1
 8003e2a:	8279      	strh	r1, [r7, #18]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	2253      	movs	r2, #83	; 0x53
 8003e30:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x63;
 8003e34:	4b97      	ldr	r3, [pc, #604]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	8a7b      	ldrh	r3, [r7, #18]
 8003e3a:	1c59      	adds	r1, r3, #1
 8003e3c:	8279      	strh	r1, [r7, #18]
 8003e3e:	4413      	add	r3, r2
 8003e40:	2263      	movs	r2, #99	; 0x63
 8003e42:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	// Option Request Param.
	MSG->OPT[k++] = dhcpMessageType;
 8003e46:	4b93      	ldr	r3, [pc, #588]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	8a7b      	ldrh	r3, [r7, #18]
 8003e4c:	1c59      	adds	r1, r3, #1
 8003e4e:	8279      	strh	r1, [r7, #18]
 8003e50:	4413      	add	r3, r2
 8003e52:	2235      	movs	r2, #53	; 0x35
 8003e54:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x01;
 8003e58:	4b8e      	ldr	r3, [pc, #568]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	8a7b      	ldrh	r3, [r7, #18]
 8003e5e:	1c59      	adds	r1, r3, #1
 8003e60:	8279      	strh	r1, [r7, #18]
 8003e62:	4413      	add	r3, r2
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_REQUEST;
 8003e6a:	4b8a      	ldr	r3, [pc, #552]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	8a7b      	ldrh	r3, [r7, #18]
 8003e70:	1c59      	adds	r1, r3, #1
 8003e72:	8279      	strh	r1, [r7, #18]
 8003e74:	4413      	add	r3, r2
 8003e76:	2203      	movs	r2, #3
 8003e78:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	MSG->OPT[k++] = dhcpClientIdentifier;
 8003e7c:	4b85      	ldr	r3, [pc, #532]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	8a7b      	ldrh	r3, [r7, #18]
 8003e82:	1c59      	adds	r1, r3, #1
 8003e84:	8279      	strh	r1, [r7, #18]
 8003e86:	4413      	add	r3, r2
 8003e88:	223d      	movs	r2, #61	; 0x3d
 8003e8a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x07;
 8003e8e:	4b81      	ldr	r3, [pc, #516]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	8a7b      	ldrh	r3, [r7, #18]
 8003e94:	1c59      	adds	r1, r3, #1
 8003e96:	8279      	strh	r1, [r7, #18]
 8003e98:	4413      	add	r3, r2
 8003e9a:	2207      	movs	r2, #7
 8003e9c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x01;
 8003ea0:	4b7c      	ldr	r3, [pc, #496]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	8a7b      	ldrh	r3, [r7, #18]
 8003ea6:	1c59      	adds	r1, r3, #1
 8003ea8:	8279      	strh	r1, [r7, #18]
 8003eaa:	4413      	add	r3, r2
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[0];
 8003eb2:	4b78      	ldr	r3, [pc, #480]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	8a7b      	ldrh	r3, [r7, #18]
 8003eb8:	1c59      	adds	r1, r3, #1
 8003eba:	8279      	strh	r1, [r7, #18]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	4b76      	ldr	r3, [pc, #472]	; (8004098 <send_DHCP_REQUEST+0x428>)
 8003ec0:	7819      	ldrb	r1, [r3, #0]
 8003ec2:	1813      	adds	r3, r2, r0
 8003ec4:	460a      	mov	r2, r1
 8003ec6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[1];
 8003eca:	4b72      	ldr	r3, [pc, #456]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	8a7b      	ldrh	r3, [r7, #18]
 8003ed0:	1c59      	adds	r1, r3, #1
 8003ed2:	8279      	strh	r1, [r7, #18]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	4b70      	ldr	r3, [pc, #448]	; (8004098 <send_DHCP_REQUEST+0x428>)
 8003ed8:	7859      	ldrb	r1, [r3, #1]
 8003eda:	1813      	adds	r3, r2, r0
 8003edc:	460a      	mov	r2, r1
 8003ede:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[2];
 8003ee2:	4b6c      	ldr	r3, [pc, #432]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	8a7b      	ldrh	r3, [r7, #18]
 8003ee8:	1c59      	adds	r1, r3, #1
 8003eea:	8279      	strh	r1, [r7, #18]
 8003eec:	4618      	mov	r0, r3
 8003eee:	4b6a      	ldr	r3, [pc, #424]	; (8004098 <send_DHCP_REQUEST+0x428>)
 8003ef0:	7899      	ldrb	r1, [r3, #2]
 8003ef2:	1813      	adds	r3, r2, r0
 8003ef4:	460a      	mov	r2, r1
 8003ef6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[3];
 8003efa:	4b66      	ldr	r3, [pc, #408]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	8a7b      	ldrh	r3, [r7, #18]
 8003f00:	1c59      	adds	r1, r3, #1
 8003f02:	8279      	strh	r1, [r7, #18]
 8003f04:	4618      	mov	r0, r3
 8003f06:	4b64      	ldr	r3, [pc, #400]	; (8004098 <send_DHCP_REQUEST+0x428>)
 8003f08:	78d9      	ldrb	r1, [r3, #3]
 8003f0a:	1813      	adds	r3, r2, r0
 8003f0c:	460a      	mov	r2, r1
 8003f0e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[4];
 8003f12:	4b60      	ldr	r3, [pc, #384]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	8a7b      	ldrh	r3, [r7, #18]
 8003f18:	1c59      	adds	r1, r3, #1
 8003f1a:	8279      	strh	r1, [r7, #18]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	4b5e      	ldr	r3, [pc, #376]	; (8004098 <send_DHCP_REQUEST+0x428>)
 8003f20:	7919      	ldrb	r1, [r3, #4]
 8003f22:	1813      	adds	r3, r2, r0
 8003f24:	460a      	mov	r2, r1
 8003f26:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[5];
 8003f2a:	4b5a      	ldr	r3, [pc, #360]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	8a7b      	ldrh	r3, [r7, #18]
 8003f30:	1c59      	adds	r1, r3, #1
 8003f32:	8279      	strh	r1, [r7, #18]
 8003f34:	4618      	mov	r0, r3
 8003f36:	4b58      	ldr	r3, [pc, #352]	; (8004098 <send_DHCP_REQUEST+0x428>)
 8003f38:	7959      	ldrb	r1, [r3, #5]
 8003f3a:	1813      	adds	r3, r2, r0
 8003f3c:	460a      	mov	r2, r1
 8003f3e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	if (d_addr[0] == 0xff) {
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2bff      	cmp	r3, #255	; 0xff
 8003f48:	f040 8084 	bne.w	8004054 <send_DHCP_REQUEST+0x3e4>
		MSG->OPT[k++] = dhcpRequestedIPaddr;
 8003f4c:	4b51      	ldr	r3, [pc, #324]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	8a7b      	ldrh	r3, [r7, #18]
 8003f52:	1c59      	adds	r1, r3, #1
 8003f54:	8279      	strh	r1, [r7, #18]
 8003f56:	4413      	add	r3, r2
 8003f58:	2232      	movs	r2, #50	; 0x32
 8003f5a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = 0x04;
 8003f5e:	4b4d      	ldr	r3, [pc, #308]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	8a7b      	ldrh	r3, [r7, #18]
 8003f64:	1c59      	adds	r1, r3, #1
 8003f66:	8279      	strh	r1, [r7, #18]
 8003f68:	4413      	add	r3, r2
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_allocated_ip[0];
 8003f70:	4b48      	ldr	r3, [pc, #288]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	8a7b      	ldrh	r3, [r7, #18]
 8003f76:	1c59      	adds	r1, r3, #1
 8003f78:	8279      	strh	r1, [r7, #18]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	4b47      	ldr	r3, [pc, #284]	; (800409c <send_DHCP_REQUEST+0x42c>)
 8003f7e:	7819      	ldrb	r1, [r3, #0]
 8003f80:	1813      	adds	r3, r2, r0
 8003f82:	460a      	mov	r2, r1
 8003f84:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_allocated_ip[1];
 8003f88:	4b42      	ldr	r3, [pc, #264]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	8a7b      	ldrh	r3, [r7, #18]
 8003f8e:	1c59      	adds	r1, r3, #1
 8003f90:	8279      	strh	r1, [r7, #18]
 8003f92:	4618      	mov	r0, r3
 8003f94:	4b41      	ldr	r3, [pc, #260]	; (800409c <send_DHCP_REQUEST+0x42c>)
 8003f96:	7859      	ldrb	r1, [r3, #1]
 8003f98:	1813      	adds	r3, r2, r0
 8003f9a:	460a      	mov	r2, r1
 8003f9c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_allocated_ip[2];
 8003fa0:	4b3c      	ldr	r3, [pc, #240]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	8a7b      	ldrh	r3, [r7, #18]
 8003fa6:	1c59      	adds	r1, r3, #1
 8003fa8:	8279      	strh	r1, [r7, #18]
 8003faa:	4618      	mov	r0, r3
 8003fac:	4b3b      	ldr	r3, [pc, #236]	; (800409c <send_DHCP_REQUEST+0x42c>)
 8003fae:	7899      	ldrb	r1, [r3, #2]
 8003fb0:	1813      	adds	r3, r2, r0
 8003fb2:	460a      	mov	r2, r1
 8003fb4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_allocated_ip[3];
 8003fb8:	4b36      	ldr	r3, [pc, #216]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	8a7b      	ldrh	r3, [r7, #18]
 8003fbe:	1c59      	adds	r1, r3, #1
 8003fc0:	8279      	strh	r1, [r7, #18]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	4b35      	ldr	r3, [pc, #212]	; (800409c <send_DHCP_REQUEST+0x42c>)
 8003fc6:	78d9      	ldrb	r1, [r3, #3]
 8003fc8:	1813      	adds	r3, r2, r0
 8003fca:	460a      	mov	r2, r1
 8003fcc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		MSG->OPT[k++] = dhcpServerIdentifier;
 8003fd0:	4b30      	ldr	r3, [pc, #192]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	8a7b      	ldrh	r3, [r7, #18]
 8003fd6:	1c59      	adds	r1, r3, #1
 8003fd8:	8279      	strh	r1, [r7, #18]
 8003fda:	4413      	add	r3, r2
 8003fdc:	2236      	movs	r2, #54	; 0x36
 8003fde:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = 0x04;
 8003fe2:	4b2c      	ldr	r3, [pc, #176]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	8a7b      	ldrh	r3, [r7, #18]
 8003fe8:	1c59      	adds	r1, r3, #1
 8003fea:	8279      	strh	r1, [r7, #18]
 8003fec:	4413      	add	r3, r2
 8003fee:	2204      	movs	r2, #4
 8003ff0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_SIP[0];
 8003ff4:	4b27      	ldr	r3, [pc, #156]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	8a7b      	ldrh	r3, [r7, #18]
 8003ffa:	1c59      	adds	r1, r3, #1
 8003ffc:	8279      	strh	r1, [r7, #18]
 8003ffe:	4618      	mov	r0, r3
 8004000:	4b27      	ldr	r3, [pc, #156]	; (80040a0 <send_DHCP_REQUEST+0x430>)
 8004002:	7819      	ldrb	r1, [r3, #0]
 8004004:	1813      	adds	r3, r2, r0
 8004006:	460a      	mov	r2, r1
 8004008:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_SIP[1];
 800400c:	4b21      	ldr	r3, [pc, #132]	; (8004094 <send_DHCP_REQUEST+0x424>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	8a7b      	ldrh	r3, [r7, #18]
 8004012:	1c59      	adds	r1, r3, #1
 8004014:	8279      	strh	r1, [r7, #18]
 8004016:	4618      	mov	r0, r3
 8004018:	4b21      	ldr	r3, [pc, #132]	; (80040a0 <send_DHCP_REQUEST+0x430>)
 800401a:	7859      	ldrb	r1, [r3, #1]
 800401c:	1813      	adds	r3, r2, r0
 800401e:	460a      	mov	r2, r1
 8004020:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_SIP[2];
 8004024:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	8a7b      	ldrh	r3, [r7, #18]
 800402a:	1c59      	adds	r1, r3, #1
 800402c:	8279      	strh	r1, [r7, #18]
 800402e:	4618      	mov	r0, r3
 8004030:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <send_DHCP_REQUEST+0x430>)
 8004032:	7899      	ldrb	r1, [r3, #2]
 8004034:	1813      	adds	r3, r2, r0
 8004036:	460a      	mov	r2, r1
 8004038:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		MSG->OPT[k++] = DHCP_SIP[3];
 800403c:	4b15      	ldr	r3, [pc, #84]	; (8004094 <send_DHCP_REQUEST+0x424>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	8a7b      	ldrh	r3, [r7, #18]
 8004042:	1c59      	adds	r1, r3, #1
 8004044:	8279      	strh	r1, [r7, #18]
 8004046:	4618      	mov	r0, r3
 8004048:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <send_DHCP_REQUEST+0x430>)
 800404a:	78d9      	ldrb	r1, [r3, #3]
 800404c:	1813      	adds	r3, r2, r0
 800404e:	460a      	mov	r2, r1
 8004050:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	MSG->OPT[k++] = hostName;
 8004054:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	8a7b      	ldrh	r3, [r7, #18]
 800405a:	1c59      	adds	r1, r3, #1
 800405c:	8279      	strh	r1, [r7, #18]
 800405e:	4413      	add	r3, r2
 8004060:	220c      	movs	r2, #12
 8004062:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 9; // length of hostname
 8004066:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <send_DHCP_REQUEST+0x424>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	8a7b      	ldrh	r3, [r7, #18]
 800406c:	1c59      	adds	r1, r3, #1
 800406e:	8279      	strh	r1, [r7, #18]
 8004070:	4413      	add	r3, r2
 8004072:	2209      	movs	r2, #9
 8004074:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[0];
 8004078:	4b06      	ldr	r3, [pc, #24]	; (8004094 <send_DHCP_REQUEST+0x424>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	8a7b      	ldrh	r3, [r7, #18]
 800407e:	1c59      	adds	r1, r3, #1
 8004080:	8279      	strh	r1, [r7, #18]
 8004082:	4618      	mov	r0, r3
 8004084:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <send_DHCP_REQUEST+0x434>)
 8004086:	7819      	ldrb	r1, [r3, #0]
 8004088:	1813      	adds	r3, r2, r0
 800408a:	460a      	mov	r2, r1
 800408c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8004090:	e00a      	b.n	80040a8 <send_DHCP_REQUEST+0x438>
 8004092:	bf00      	nop
 8004094:	2000366c 	andcs	r3, r0, ip, ror #12
 8004098:	2000012c 	andcs	r0, r0, ip, lsr #2
 800409c:	2000011c 	andcs	r0, r0, ip, lsl r1
 80040a0:	20003658 	andcs	r3, r0, r8, asr r6
 80040a4:	200000a4 	andcs	r0, r0, r4, lsr #1
	MSG->OPT[k++] = HOST_NAME[1];
 80040a8:	4b7b      	ldr	r3, [pc, #492]	; (8004298 <send_DHCP_REQUEST+0x628>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	8a7b      	ldrh	r3, [r7, #18]
 80040ae:	1c59      	adds	r1, r3, #1
 80040b0:	8279      	strh	r1, [r7, #18]
 80040b2:	4618      	mov	r0, r3
 80040b4:	4b79      	ldr	r3, [pc, #484]	; (800429c <send_DHCP_REQUEST+0x62c>)
 80040b6:	7859      	ldrb	r1, [r3, #1]
 80040b8:	1813      	adds	r3, r2, r0
 80040ba:	460a      	mov	r2, r1
 80040bc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[2];
 80040c0:	4b75      	ldr	r3, [pc, #468]	; (8004298 <send_DHCP_REQUEST+0x628>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	8a7b      	ldrh	r3, [r7, #18]
 80040c6:	1c59      	adds	r1, r3, #1
 80040c8:	8279      	strh	r1, [r7, #18]
 80040ca:	4618      	mov	r0, r3
 80040cc:	4b73      	ldr	r3, [pc, #460]	; (800429c <send_DHCP_REQUEST+0x62c>)
 80040ce:	7899      	ldrb	r1, [r3, #2]
 80040d0:	1813      	adds	r3, r2, r0
 80040d2:	460a      	mov	r2, r1
 80040d4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[3];
 80040d8:	4b6f      	ldr	r3, [pc, #444]	; (8004298 <send_DHCP_REQUEST+0x628>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	8a7b      	ldrh	r3, [r7, #18]
 80040de:	1c59      	adds	r1, r3, #1
 80040e0:	8279      	strh	r1, [r7, #18]
 80040e2:	4618      	mov	r0, r3
 80040e4:	4b6d      	ldr	r3, [pc, #436]	; (800429c <send_DHCP_REQUEST+0x62c>)
 80040e6:	78d9      	ldrb	r1, [r3, #3]
 80040e8:	1813      	adds	r3, r2, r0
 80040ea:	460a      	mov	r2, r1
 80040ec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[4];
 80040f0:	4b69      	ldr	r3, [pc, #420]	; (8004298 <send_DHCP_REQUEST+0x628>)
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	8a7b      	ldrh	r3, [r7, #18]
 80040f6:	1c59      	adds	r1, r3, #1
 80040f8:	8279      	strh	r1, [r7, #18]
 80040fa:	4618      	mov	r0, r3
 80040fc:	4b67      	ldr	r3, [pc, #412]	; (800429c <send_DHCP_REQUEST+0x62c>)
 80040fe:	7919      	ldrb	r1, [r3, #4]
 8004100:	1813      	adds	r3, r2, r0
 8004102:	460a      	mov	r2, r1
 8004104:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = HOST_NAME[5];
 8004108:	4b63      	ldr	r3, [pc, #396]	; (8004298 <send_DHCP_REQUEST+0x628>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	8a7b      	ldrh	r3, [r7, #18]
 800410e:	1c59      	adds	r1, r3, #1
 8004110:	8279      	strh	r1, [r7, #18]
 8004112:	4618      	mov	r0, r3
 8004114:	4b61      	ldr	r3, [pc, #388]	; (800429c <send_DHCP_REQUEST+0x62c>)
 8004116:	7959      	ldrb	r1, [r3, #5]
 8004118:	1813      	adds	r3, r2, r0
 800411a:	460a      	mov	r2, r1
 800411c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[3];
 8004120:	4b5d      	ldr	r3, [pc, #372]	; (8004298 <send_DHCP_REQUEST+0x628>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	8a7b      	ldrh	r3, [r7, #18]
 8004126:	1c59      	adds	r1, r3, #1
 8004128:	8279      	strh	r1, [r7, #18]
 800412a:	4618      	mov	r0, r3
 800412c:	4b5c      	ldr	r3, [pc, #368]	; (80042a0 <send_DHCP_REQUEST+0x630>)
 800412e:	78d9      	ldrb	r1, [r3, #3]
 8004130:	1813      	adds	r3, r2, r0
 8004132:	460a      	mov	r2, r1
 8004134:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[4];
 8004138:	4b57      	ldr	r3, [pc, #348]	; (8004298 <send_DHCP_REQUEST+0x628>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	8a7b      	ldrh	r3, [r7, #18]
 800413e:	1c59      	adds	r1, r3, #1
 8004140:	8279      	strh	r1, [r7, #18]
 8004142:	4618      	mov	r0, r3
 8004144:	4b56      	ldr	r3, [pc, #344]	; (80042a0 <send_DHCP_REQUEST+0x630>)
 8004146:	7919      	ldrb	r1, [r3, #4]
 8004148:	1813      	adds	r3, r2, r0
 800414a:	460a      	mov	r2, r1
 800414c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[5];
 8004150:	4b51      	ldr	r3, [pc, #324]	; (8004298 <send_DHCP_REQUEST+0x628>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	8a7b      	ldrh	r3, [r7, #18]
 8004156:	1c59      	adds	r1, r3, #1
 8004158:	8279      	strh	r1, [r7, #18]
 800415a:	4618      	mov	r0, r3
 800415c:	4b50      	ldr	r3, [pc, #320]	; (80042a0 <send_DHCP_REQUEST+0x630>)
 800415e:	7959      	ldrb	r1, [r3, #5]
 8004160:	1813      	adds	r3, r2, r0
 8004162:	460a      	mov	r2, r1
 8004164:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	MSG->OPT[k++] = dhcpParamRequest;
 8004168:	4b4b      	ldr	r3, [pc, #300]	; (8004298 <send_DHCP_REQUEST+0x628>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	8a7b      	ldrh	r3, [r7, #18]
 800416e:	1c59      	adds	r1, r3, #1
 8004170:	8279      	strh	r1, [r7, #18]
 8004172:	4413      	add	r3, r2
 8004174:	2237      	movs	r2, #55	; 0x37
 8004176:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x08;
 800417a:	4b47      	ldr	r3, [pc, #284]	; (8004298 <send_DHCP_REQUEST+0x628>)
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	8a7b      	ldrh	r3, [r7, #18]
 8004180:	1c59      	adds	r1, r3, #1
 8004182:	8279      	strh	r1, [r7, #18]
 8004184:	4413      	add	r3, r2
 8004186:	2208      	movs	r2, #8
 8004188:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = subnetMask;
 800418c:	4b42      	ldr	r3, [pc, #264]	; (8004298 <send_DHCP_REQUEST+0x628>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	8a7b      	ldrh	r3, [r7, #18]
 8004192:	1c59      	adds	r1, r3, #1
 8004194:	8279      	strh	r1, [r7, #18]
 8004196:	4413      	add	r3, r2
 8004198:	2201      	movs	r2, #1
 800419a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = routersOnSubnet;
 800419e:	4b3e      	ldr	r3, [pc, #248]	; (8004298 <send_DHCP_REQUEST+0x628>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	8a7b      	ldrh	r3, [r7, #18]
 80041a4:	1c59      	adds	r1, r3, #1
 80041a6:	8279      	strh	r1, [r7, #18]
 80041a8:	4413      	add	r3, r2
 80041aa:	2203      	movs	r2, #3
 80041ac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = dns;
 80041b0:	4b39      	ldr	r3, [pc, #228]	; (8004298 <send_DHCP_REQUEST+0x628>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	8a7b      	ldrh	r3, [r7, #18]
 80041b6:	1c59      	adds	r1, r3, #1
 80041b8:	8279      	strh	r1, [r7, #18]
 80041ba:	4413      	add	r3, r2
 80041bc:	2206      	movs	r2, #6
 80041be:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = domainName;
 80041c2:	4b35      	ldr	r3, [pc, #212]	; (8004298 <send_DHCP_REQUEST+0x628>)
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	8a7b      	ldrh	r3, [r7, #18]
 80041c8:	1c59      	adds	r1, r3, #1
 80041ca:	8279      	strh	r1, [r7, #18]
 80041cc:	4413      	add	r3, r2
 80041ce:	220f      	movs	r2, #15
 80041d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = dhcpT1value;
 80041d4:	4b30      	ldr	r3, [pc, #192]	; (8004298 <send_DHCP_REQUEST+0x628>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	8a7b      	ldrh	r3, [r7, #18]
 80041da:	1c59      	adds	r1, r3, #1
 80041dc:	8279      	strh	r1, [r7, #18]
 80041de:	4413      	add	r3, r2
 80041e0:	223a      	movs	r2, #58	; 0x3a
 80041e2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = dhcpT2value;
 80041e6:	4b2c      	ldr	r3, [pc, #176]	; (8004298 <send_DHCP_REQUEST+0x628>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	8a7b      	ldrh	r3, [r7, #18]
 80041ec:	1c59      	adds	r1, r3, #1
 80041ee:	8279      	strh	r1, [r7, #18]
 80041f0:	4413      	add	r3, r2
 80041f2:	223b      	movs	r2, #59	; 0x3b
 80041f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = performRouterDiscovery;
 80041f8:	4b27      	ldr	r3, [pc, #156]	; (8004298 <send_DHCP_REQUEST+0x628>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	8a7b      	ldrh	r3, [r7, #18]
 80041fe:	1c59      	adds	r1, r3, #1
 8004200:	8279      	strh	r1, [r7, #18]
 8004202:	4413      	add	r3, r2
 8004204:	221f      	movs	r2, #31
 8004206:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = staticRoute;
 800420a:	4b23      	ldr	r3, [pc, #140]	; (8004298 <send_DHCP_REQUEST+0x628>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	8a7b      	ldrh	r3, [r7, #18]
 8004210:	1c59      	adds	r1, r3, #1
 8004212:	8279      	strh	r1, [r7, #18]
 8004214:	4413      	add	r3, r2
 8004216:	2221      	movs	r2, #33	; 0x21
 8004218:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = endOption;
 800421c:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <send_DHCP_REQUEST+0x628>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	8a7b      	ldrh	r3, [r7, #18]
 8004222:	1c59      	adds	r1, r3, #1
 8004224:	8279      	strh	r1, [r7, #18]
 8004226:	4413      	add	r3, r2
 8004228:	22ff      	movs	r2, #255	; 0xff
 800422a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) MSG->OPT[i] = 0;
 800422e:	8a7b      	ldrh	r3, [r7, #18]
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	e009      	b.n	8004248 <send_DHCP_REQUEST+0x5d8>
 8004234:	4b18      	ldr	r3, [pc, #96]	; (8004298 <send_DHCP_REQUEST+0x628>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	4413      	add	r3, r2
 800423c:	33ec      	adds	r3, #236	; 0xec
 800423e:	2200      	movs	r2, #0
 8004240:	701a      	strb	r2, [r3, #0]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	3301      	adds	r3, #1
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 800424e:	dbf1      	blt.n	8004234 <send_DHCP_REQUEST+0x5c4>

	// send broadcasting packet
	for (i = 0; i < 4; i++) ip[i] = d_addr[i];
 8004250:	2300      	movs	r3, #0
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	e00c      	b.n	8004270 <send_DHCP_REQUEST+0x600>
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	4413      	add	r3, r2
 800425c:	7819      	ldrb	r1, [r3, #0]
 800425e:	f107 020c 	add.w	r2, r7, #12
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	4413      	add	r3, r2
 8004266:	460a      	mov	r2, r1
 8004268:	701a      	strb	r2, [r3, #0]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	3301      	adds	r3, #1
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2b03      	cmp	r3, #3
 8004274:	ddef      	ble.n	8004256 <send_DHCP_REQUEST+0x5e6>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)MSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8004276:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <send_DHCP_REQUEST+0x634>)
 8004278:	7818      	ldrb	r0, [r3, #0]
 800427a:	4b07      	ldr	r3, [pc, #28]	; (8004298 <send_DHCP_REQUEST+0x628>)
 800427c:	6819      	ldr	r1, [r3, #0]
 800427e:	f107 020c 	add.w	r2, r7, #12
 8004282:	2343      	movs	r3, #67	; 0x43
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	4613      	mov	r3, r2
 8004288:	f44f 7209 	mov.w	r2, #548	; 0x224
 800428c:	f7fd ff1c 	bl	80020c8 <sendto>

}
 8004290:	bf00      	nop
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	2000366c 	andcs	r3, r0, ip, ror #12
 800429c:	200000a4 	andcs	r0, r0, r4, lsr #1
 80042a0:	2000012c 	andcs	r0, r0, ip, lsr #2
 80042a4:	20003670 	andcs	r3, r0, r0, ror r6

080042a8 <send_DHCP_DECLINE>:
* Returns    : None.
* Note       : 
*********************************************************************************************************
*/
void send_DHCP_DECLINE(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	817b      	strh	r3, [r7, #10]

	MSG->op = DHCP_BOOTREQUEST;
 80042b2:	4b50      	ldr	r3, [pc, #320]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2201      	movs	r2, #1
 80042b8:	701a      	strb	r2, [r3, #0]
	MSG->htype = DHCP_HTYPE10MB;
 80042ba:	4b4e      	ldr	r3, [pc, #312]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2201      	movs	r2, #1
 80042c0:	705a      	strb	r2, [r3, #1]
	MSG->hlen = DHCP_HLENETHERNET;
 80042c2:	4b4c      	ldr	r3, [pc, #304]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2206      	movs	r2, #6
 80042c8:	709a      	strb	r2, [r3, #2]
	MSG->hops = DHCP_HOPS;
 80042ca:	4b4a      	ldr	r3, [pc, #296]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2200      	movs	r2, #0
 80042d0:	70da      	strb	r2, [r3, #3]
	MSG->xid = DHCP_XID;
 80042d2:	4b48      	ldr	r3, [pc, #288]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a48      	ldr	r2, [pc, #288]	; (80043f8 <send_DHCP_DECLINE+0x150>)
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	605a      	str	r2, [r3, #4]
	MSG->secs = DHCP_SECS;
 80042dc:	4b45      	ldr	r3, [pc, #276]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2200      	movs	r2, #0
 80042e2:	811a      	strh	r2, [r3, #8]
	MSG->flags = 0;
 80042e4:	4b43      	ldr	r3, [pc, #268]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2200      	movs	r2, #0
 80042ea:	815a      	strh	r2, [r3, #10]

	MSG->ciaddr[0] = 0;
 80042ec:	4b41      	ldr	r3, [pc, #260]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2200      	movs	r2, #0
 80042f2:	731a      	strb	r2, [r3, #12]
	MSG->ciaddr[1] = 0;
 80042f4:	4b3f      	ldr	r3, [pc, #252]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2200      	movs	r2, #0
 80042fa:	735a      	strb	r2, [r3, #13]
	MSG->ciaddr[2] = 0;
 80042fc:	4b3d      	ldr	r3, [pc, #244]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2200      	movs	r2, #0
 8004302:	739a      	strb	r2, [r3, #14]
	MSG->ciaddr[3] = 0;
 8004304:	4b3b      	ldr	r3, [pc, #236]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2200      	movs	r2, #0
 800430a:	73da      	strb	r2, [r3, #15]

	MSG->yiaddr[0] = 0;
 800430c:	4b39      	ldr	r3, [pc, #228]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2200      	movs	r2, #0
 8004312:	741a      	strb	r2, [r3, #16]
	MSG->yiaddr[1] = 0;
 8004314:	4b37      	ldr	r3, [pc, #220]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2200      	movs	r2, #0
 800431a:	745a      	strb	r2, [r3, #17]
	MSG->yiaddr[2] = 0;
 800431c:	4b35      	ldr	r3, [pc, #212]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2200      	movs	r2, #0
 8004322:	749a      	strb	r2, [r3, #18]
	MSG->yiaddr[3] = 0;
 8004324:	4b33      	ldr	r3, [pc, #204]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2200      	movs	r2, #0
 800432a:	74da      	strb	r2, [r3, #19]

	MSG->siaddr[0] = 0;
 800432c:	4b31      	ldr	r3, [pc, #196]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2200      	movs	r2, #0
 8004332:	751a      	strb	r2, [r3, #20]
	MSG->siaddr[1] = 0;
 8004334:	4b2f      	ldr	r3, [pc, #188]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2200      	movs	r2, #0
 800433a:	755a      	strb	r2, [r3, #21]
	MSG->siaddr[2] = 0;
 800433c:	4b2d      	ldr	r3, [pc, #180]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2200      	movs	r2, #0
 8004342:	759a      	strb	r2, [r3, #22]
	MSG->siaddr[3] = 0;
 8004344:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2200      	movs	r2, #0
 800434a:	75da      	strb	r2, [r3, #23]

	MSG->giaddr[0] = 0;
 800434c:	4b29      	ldr	r3, [pc, #164]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2200      	movs	r2, #0
 8004352:	761a      	strb	r2, [r3, #24]
	MSG->giaddr[1] = 0;
 8004354:	4b27      	ldr	r3, [pc, #156]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2200      	movs	r2, #0
 800435a:	765a      	strb	r2, [r3, #25]
	MSG->giaddr[2] = 0;
 800435c:	4b25      	ldr	r3, [pc, #148]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2200      	movs	r2, #0
 8004362:	769a      	strb	r2, [r3, #26]
	MSG->giaddr[3] = 0;
 8004364:	4b23      	ldr	r3, [pc, #140]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2200      	movs	r2, #0
 800436a:	76da      	strb	r2, [r3, #27]

	MSG->chaddr[0] = wizchip_mac[0];
 800436c:	4b21      	ldr	r3, [pc, #132]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a22      	ldr	r2, [pc, #136]	; (80043fc <send_DHCP_DECLINE+0x154>)
 8004372:	7812      	ldrb	r2, [r2, #0]
 8004374:	771a      	strb	r2, [r3, #28]
	MSG->chaddr[1] = wizchip_mac[1];
 8004376:	4b1f      	ldr	r3, [pc, #124]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a20      	ldr	r2, [pc, #128]	; (80043fc <send_DHCP_DECLINE+0x154>)
 800437c:	7852      	ldrb	r2, [r2, #1]
 800437e:	775a      	strb	r2, [r3, #29]
	MSG->chaddr[2] = wizchip_mac[2];
 8004380:	4b1c      	ldr	r3, [pc, #112]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1d      	ldr	r2, [pc, #116]	; (80043fc <send_DHCP_DECLINE+0x154>)
 8004386:	7892      	ldrb	r2, [r2, #2]
 8004388:	779a      	strb	r2, [r3, #30]
	MSG->chaddr[3] = wizchip_mac[3];
 800438a:	4b1a      	ldr	r3, [pc, #104]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <send_DHCP_DECLINE+0x154>)
 8004390:	78d2      	ldrb	r2, [r2, #3]
 8004392:	77da      	strb	r2, [r3, #31]
	MSG->chaddr[4] = wizchip_mac[4];
 8004394:	4b17      	ldr	r3, [pc, #92]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a18      	ldr	r2, [pc, #96]	; (80043fc <send_DHCP_DECLINE+0x154>)
 800439a:	7912      	ldrb	r2, [r2, #4]
 800439c:	f883 2020 	strb.w	r2, [r3, #32]
	MSG->chaddr[5] = wizchip_mac[5];
 80043a0:	4b14      	ldr	r3, [pc, #80]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a15      	ldr	r2, [pc, #84]	; (80043fc <send_DHCP_DECLINE+0x154>)
 80043a6:	7952      	ldrb	r2, [r2, #5]
 80043a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++) MSG->chaddr[i] = 0;
 80043ac:	2306      	movs	r3, #6
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	e009      	b.n	80043c6 <send_DHCP_DECLINE+0x11e>
 80043b2:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4413      	add	r3, r2
 80043ba:	331c      	adds	r3, #28
 80043bc:	2200      	movs	r2, #0
 80043be:	701a      	strb	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3301      	adds	r3, #1
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2b0f      	cmp	r3, #15
 80043ca:	ddf2      	ble.n	80043b2 <send_DHCP_DECLINE+0x10a>
	for (i = 0; i < 64; i++) MSG->sname[i] = 0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	e009      	b.n	80043e6 <send_DHCP_DECLINE+0x13e>
 80043d2:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <send_DHCP_DECLINE+0x14c>)
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4413      	add	r3, r2
 80043da:	332c      	adds	r3, #44	; 0x2c
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3301      	adds	r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b3f      	cmp	r3, #63	; 0x3f
 80043ea:	ddf2      	ble.n	80043d2 <send_DHCP_DECLINE+0x12a>
	for (i = 0; i < 128; i++) MSG->file[i] = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	e010      	b.n	8004414 <send_DHCP_DECLINE+0x16c>
 80043f2:	bf00      	nop
 80043f4:	2000366c 	andcs	r3, r0, ip, ror #12
 80043f8:	20003654 	andcs	r3, r0, r4, asr r6
 80043fc:	2000012c 	andcs	r0, r0, ip, lsr #2
 8004400:	4b9f      	ldr	r3, [pc, #636]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4413      	add	r3, r2
 8004408:	336c      	adds	r3, #108	; 0x6c
 800440a:	2200      	movs	r2, #0
 800440c:	701a      	strb	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	3301      	adds	r3, #1
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b7f      	cmp	r3, #127	; 0x7f
 8004418:	ddf2      	ble.n	8004400 <send_DHCP_DECLINE+0x158>

	// MAGIC_COOKIE
	MSG->OPT[k++] = 0x63;
 800441a:	4b99      	ldr	r3, [pc, #612]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	897b      	ldrh	r3, [r7, #10]
 8004420:	1c59      	adds	r1, r3, #1
 8004422:	8179      	strh	r1, [r7, #10]
 8004424:	4413      	add	r3, r2
 8004426:	2263      	movs	r2, #99	; 0x63
 8004428:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x82;
 800442c:	4b94      	ldr	r3, [pc, #592]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	897b      	ldrh	r3, [r7, #10]
 8004432:	1c59      	adds	r1, r3, #1
 8004434:	8179      	strh	r1, [r7, #10]
 8004436:	4413      	add	r3, r2
 8004438:	2282      	movs	r2, #130	; 0x82
 800443a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x53;
 800443e:	4b90      	ldr	r3, [pc, #576]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	897b      	ldrh	r3, [r7, #10]
 8004444:	1c59      	adds	r1, r3, #1
 8004446:	8179      	strh	r1, [r7, #10]
 8004448:	4413      	add	r3, r2
 800444a:	2253      	movs	r2, #83	; 0x53
 800444c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x63;
 8004450:	4b8b      	ldr	r3, [pc, #556]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	897b      	ldrh	r3, [r7, #10]
 8004456:	1c59      	adds	r1, r3, #1
 8004458:	8179      	strh	r1, [r7, #10]
 800445a:	4413      	add	r3, r2
 800445c:	2263      	movs	r2, #99	; 0x63
 800445e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	// Option Request Param.
	MSG->OPT[k++] = dhcpMessageType;
 8004462:	4b87      	ldr	r3, [pc, #540]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	897b      	ldrh	r3, [r7, #10]
 8004468:	1c59      	adds	r1, r3, #1
 800446a:	8179      	strh	r1, [r7, #10]
 800446c:	4413      	add	r3, r2
 800446e:	2235      	movs	r2, #53	; 0x35
 8004470:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x01;
 8004474:	4b82      	ldr	r3, [pc, #520]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	897b      	ldrh	r3, [r7, #10]
 800447a:	1c59      	adds	r1, r3, #1
 800447c:	8179      	strh	r1, [r7, #10]
 800447e:	4413      	add	r3, r2
 8004480:	2201      	movs	r2, #1
 8004482:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_DECLINE;
 8004486:	4b7e      	ldr	r3, [pc, #504]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	897b      	ldrh	r3, [r7, #10]
 800448c:	1c59      	adds	r1, r3, #1
 800448e:	8179      	strh	r1, [r7, #10]
 8004490:	4413      	add	r3, r2
 8004492:	2204      	movs	r2, #4
 8004494:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	MSG->OPT[k++] = dhcpClientIdentifier;
 8004498:	4b79      	ldr	r3, [pc, #484]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	897b      	ldrh	r3, [r7, #10]
 800449e:	1c59      	adds	r1, r3, #1
 80044a0:	8179      	strh	r1, [r7, #10]
 80044a2:	4413      	add	r3, r2
 80044a4:	223d      	movs	r2, #61	; 0x3d
 80044a6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x07;
 80044aa:	4b75      	ldr	r3, [pc, #468]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	897b      	ldrh	r3, [r7, #10]
 80044b0:	1c59      	adds	r1, r3, #1
 80044b2:	8179      	strh	r1, [r7, #10]
 80044b4:	4413      	add	r3, r2
 80044b6:	2207      	movs	r2, #7
 80044b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x01;
 80044bc:	4b70      	ldr	r3, [pc, #448]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	897b      	ldrh	r3, [r7, #10]
 80044c2:	1c59      	adds	r1, r3, #1
 80044c4:	8179      	strh	r1, [r7, #10]
 80044c6:	4413      	add	r3, r2
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[0];
 80044ce:	4b6c      	ldr	r3, [pc, #432]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	897b      	ldrh	r3, [r7, #10]
 80044d4:	1c59      	adds	r1, r3, #1
 80044d6:	8179      	strh	r1, [r7, #10]
 80044d8:	4618      	mov	r0, r3
 80044da:	4b6a      	ldr	r3, [pc, #424]	; (8004684 <send_DHCP_DECLINE+0x3dc>)
 80044dc:	7819      	ldrb	r1, [r3, #0]
 80044de:	1813      	adds	r3, r2, r0
 80044e0:	460a      	mov	r2, r1
 80044e2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[1];
 80044e6:	4b66      	ldr	r3, [pc, #408]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	897b      	ldrh	r3, [r7, #10]
 80044ec:	1c59      	adds	r1, r3, #1
 80044ee:	8179      	strh	r1, [r7, #10]
 80044f0:	4618      	mov	r0, r3
 80044f2:	4b64      	ldr	r3, [pc, #400]	; (8004684 <send_DHCP_DECLINE+0x3dc>)
 80044f4:	7859      	ldrb	r1, [r3, #1]
 80044f6:	1813      	adds	r3, r2, r0
 80044f8:	460a      	mov	r2, r1
 80044fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[2];
 80044fe:	4b60      	ldr	r3, [pc, #384]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	897b      	ldrh	r3, [r7, #10]
 8004504:	1c59      	adds	r1, r3, #1
 8004506:	8179      	strh	r1, [r7, #10]
 8004508:	4618      	mov	r0, r3
 800450a:	4b5e      	ldr	r3, [pc, #376]	; (8004684 <send_DHCP_DECLINE+0x3dc>)
 800450c:	7899      	ldrb	r1, [r3, #2]
 800450e:	1813      	adds	r3, r2, r0
 8004510:	460a      	mov	r2, r1
 8004512:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[3];
 8004516:	4b5a      	ldr	r3, [pc, #360]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	897b      	ldrh	r3, [r7, #10]
 800451c:	1c59      	adds	r1, r3, #1
 800451e:	8179      	strh	r1, [r7, #10]
 8004520:	4618      	mov	r0, r3
 8004522:	4b58      	ldr	r3, [pc, #352]	; (8004684 <send_DHCP_DECLINE+0x3dc>)
 8004524:	78d9      	ldrb	r1, [r3, #3]
 8004526:	1813      	adds	r3, r2, r0
 8004528:	460a      	mov	r2, r1
 800452a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[4];
 800452e:	4b54      	ldr	r3, [pc, #336]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	897b      	ldrh	r3, [r7, #10]
 8004534:	1c59      	adds	r1, r3, #1
 8004536:	8179      	strh	r1, [r7, #10]
 8004538:	4618      	mov	r0, r3
 800453a:	4b52      	ldr	r3, [pc, #328]	; (8004684 <send_DHCP_DECLINE+0x3dc>)
 800453c:	7919      	ldrb	r1, [r3, #4]
 800453e:	1813      	adds	r3, r2, r0
 8004540:	460a      	mov	r2, r1
 8004542:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = wizchip_mac[5];
 8004546:	4b4e      	ldr	r3, [pc, #312]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	897b      	ldrh	r3, [r7, #10]
 800454c:	1c59      	adds	r1, r3, #1
 800454e:	8179      	strh	r1, [r7, #10]
 8004550:	4618      	mov	r0, r3
 8004552:	4b4c      	ldr	r3, [pc, #304]	; (8004684 <send_DHCP_DECLINE+0x3dc>)
 8004554:	7959      	ldrb	r1, [r3, #5]
 8004556:	1813      	adds	r3, r2, r0
 8004558:	460a      	mov	r2, r1
 800455a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	MSG->OPT[k++] = dhcpRequestedIPaddr;
 800455e:	4b48      	ldr	r3, [pc, #288]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	897b      	ldrh	r3, [r7, #10]
 8004564:	1c59      	adds	r1, r3, #1
 8004566:	8179      	strh	r1, [r7, #10]
 8004568:	4413      	add	r3, r2
 800456a:	2232      	movs	r2, #50	; 0x32
 800456c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x04;
 8004570:	4b43      	ldr	r3, [pc, #268]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	897b      	ldrh	r3, [r7, #10]
 8004576:	1c59      	adds	r1, r3, #1
 8004578:	8179      	strh	r1, [r7, #10]
 800457a:	4413      	add	r3, r2
 800457c:	2204      	movs	r2, #4
 800457e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_allocated_ip[0];
 8004582:	4b3f      	ldr	r3, [pc, #252]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	897b      	ldrh	r3, [r7, #10]
 8004588:	1c59      	adds	r1, r3, #1
 800458a:	8179      	strh	r1, [r7, #10]
 800458c:	4618      	mov	r0, r3
 800458e:	4b3e      	ldr	r3, [pc, #248]	; (8004688 <send_DHCP_DECLINE+0x3e0>)
 8004590:	7819      	ldrb	r1, [r3, #0]
 8004592:	1813      	adds	r3, r2, r0
 8004594:	460a      	mov	r2, r1
 8004596:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_allocated_ip[1];
 800459a:	4b39      	ldr	r3, [pc, #228]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	897b      	ldrh	r3, [r7, #10]
 80045a0:	1c59      	adds	r1, r3, #1
 80045a2:	8179      	strh	r1, [r7, #10]
 80045a4:	4618      	mov	r0, r3
 80045a6:	4b38      	ldr	r3, [pc, #224]	; (8004688 <send_DHCP_DECLINE+0x3e0>)
 80045a8:	7859      	ldrb	r1, [r3, #1]
 80045aa:	1813      	adds	r3, r2, r0
 80045ac:	460a      	mov	r2, r1
 80045ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_allocated_ip[2];
 80045b2:	4b33      	ldr	r3, [pc, #204]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	897b      	ldrh	r3, [r7, #10]
 80045b8:	1c59      	adds	r1, r3, #1
 80045ba:	8179      	strh	r1, [r7, #10]
 80045bc:	4618      	mov	r0, r3
 80045be:	4b32      	ldr	r3, [pc, #200]	; (8004688 <send_DHCP_DECLINE+0x3e0>)
 80045c0:	7899      	ldrb	r1, [r3, #2]
 80045c2:	1813      	adds	r3, r2, r0
 80045c4:	460a      	mov	r2, r1
 80045c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_allocated_ip[3];
 80045ca:	4b2d      	ldr	r3, [pc, #180]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	897b      	ldrh	r3, [r7, #10]
 80045d0:	1c59      	adds	r1, r3, #1
 80045d2:	8179      	strh	r1, [r7, #10]
 80045d4:	4618      	mov	r0, r3
 80045d6:	4b2c      	ldr	r3, [pc, #176]	; (8004688 <send_DHCP_DECLINE+0x3e0>)
 80045d8:	78d9      	ldrb	r1, [r3, #3]
 80045da:	1813      	adds	r3, r2, r0
 80045dc:	460a      	mov	r2, r1
 80045de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	MSG->OPT[k++] = dhcpServerIdentifier;
 80045e2:	4b27      	ldr	r3, [pc, #156]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	897b      	ldrh	r3, [r7, #10]
 80045e8:	1c59      	adds	r1, r3, #1
 80045ea:	8179      	strh	r1, [r7, #10]
 80045ec:	4413      	add	r3, r2
 80045ee:	2236      	movs	r2, #54	; 0x36
 80045f0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = 0x04;
 80045f4:	4b22      	ldr	r3, [pc, #136]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	897b      	ldrh	r3, [r7, #10]
 80045fa:	1c59      	adds	r1, r3, #1
 80045fc:	8179      	strh	r1, [r7, #10]
 80045fe:	4413      	add	r3, r2
 8004600:	2204      	movs	r2, #4
 8004602:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_SIP[0];
 8004606:	4b1e      	ldr	r3, [pc, #120]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	897b      	ldrh	r3, [r7, #10]
 800460c:	1c59      	adds	r1, r3, #1
 800460e:	8179      	strh	r1, [r7, #10]
 8004610:	4618      	mov	r0, r3
 8004612:	4b1e      	ldr	r3, [pc, #120]	; (800468c <send_DHCP_DECLINE+0x3e4>)
 8004614:	7819      	ldrb	r1, [r3, #0]
 8004616:	1813      	adds	r3, r2, r0
 8004618:	460a      	mov	r2, r1
 800461a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_SIP[1];
 800461e:	4b18      	ldr	r3, [pc, #96]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	897b      	ldrh	r3, [r7, #10]
 8004624:	1c59      	adds	r1, r3, #1
 8004626:	8179      	strh	r1, [r7, #10]
 8004628:	4618      	mov	r0, r3
 800462a:	4b18      	ldr	r3, [pc, #96]	; (800468c <send_DHCP_DECLINE+0x3e4>)
 800462c:	7859      	ldrb	r1, [r3, #1]
 800462e:	1813      	adds	r3, r2, r0
 8004630:	460a      	mov	r2, r1
 8004632:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_SIP[2];
 8004636:	4b12      	ldr	r3, [pc, #72]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	897b      	ldrh	r3, [r7, #10]
 800463c:	1c59      	adds	r1, r3, #1
 800463e:	8179      	strh	r1, [r7, #10]
 8004640:	4618      	mov	r0, r3
 8004642:	4b12      	ldr	r3, [pc, #72]	; (800468c <send_DHCP_DECLINE+0x3e4>)
 8004644:	7899      	ldrb	r1, [r3, #2]
 8004646:	1813      	adds	r3, r2, r0
 8004648:	460a      	mov	r2, r1
 800464a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	MSG->OPT[k++] = DHCP_SIP[3];
 800464e:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	897b      	ldrh	r3, [r7, #10]
 8004654:	1c59      	adds	r1, r3, #1
 8004656:	8179      	strh	r1, [r7, #10]
 8004658:	4618      	mov	r0, r3
 800465a:	4b0c      	ldr	r3, [pc, #48]	; (800468c <send_DHCP_DECLINE+0x3e4>)
 800465c:	78d9      	ldrb	r1, [r3, #3]
 800465e:	1813      	adds	r3, r2, r0
 8004660:	460a      	mov	r2, r1
 8004662:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	MSG->OPT[k++] = endOption;
 8004666:	4b06      	ldr	r3, [pc, #24]	; (8004680 <send_DHCP_DECLINE+0x3d8>)
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	897b      	ldrh	r3, [r7, #10]
 800466c:	1c59      	adds	r1, r3, #1
 800466e:	8179      	strh	r1, [r7, #10]
 8004670:	4413      	add	r3, r2
 8004672:	22ff      	movs	r2, #255	; 0xff
 8004674:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) MSG->OPT[i] = 0;
 8004678:	897b      	ldrh	r3, [r7, #10]
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	e012      	b.n	80046a4 <send_DHCP_DECLINE+0x3fc>
 800467e:	bf00      	nop
 8004680:	2000366c 	andcs	r3, r0, ip, ror #12
 8004684:	2000012c 	andcs	r0, r0, ip, lsr #2
 8004688:	2000011c 	andcs	r0, r0, ip, lsl r1
 800468c:	20003658 	andcs	r3, r0, r8, asr r6
 8004690:	4b12      	ldr	r3, [pc, #72]	; (80046dc <send_DHCP_DECLINE+0x434>)
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4413      	add	r3, r2
 8004698:	33ec      	adds	r3, #236	; 0xec
 800469a:	2200      	movs	r2, #0
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3301      	adds	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80046aa:	dbf1      	blt.n	8004690 <send_DHCP_DECLINE+0x3e8>

	//send broadcasting packet
	ip[0] = 0xFF;
 80046ac:	23ff      	movs	r3, #255	; 0xff
 80046ae:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 80046b0:	23ff      	movs	r3, #255	; 0xff
 80046b2:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 80046b4:	23ff      	movs	r3, #255	; 0xff
 80046b6:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 80046b8:	23ff      	movs	r3, #255	; 0xff
 80046ba:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)MSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80046bc:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <send_DHCP_DECLINE+0x438>)
 80046be:	7818      	ldrb	r0, [r3, #0]
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <send_DHCP_DECLINE+0x434>)
 80046c2:	6819      	ldr	r1, [r3, #0]
 80046c4:	1d3a      	adds	r2, r7, #4
 80046c6:	2343      	movs	r3, #67	; 0x43
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	4613      	mov	r3, r2
 80046cc:	f44f 7209 	mov.w	r2, #548	; 0x224
 80046d0:	f7fd fcfa 	bl	80020c8 <sendto>

}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	2000366c 	andcs	r3, r0, ip, ror #12
 80046e0:	20003670 	andcs	r3, r0, r0, ror r6

080046e4 <parseDHCPMSG>:
* Returns    : None.
* Note       : 
*********************************************************************************************************
*/
int8_t parseDHCPMSG(uint16_t length)
{
 80046e4:	b590      	push	{r4, r7, lr}
 80046e6:	b08d      	sub	sp, #52	; 0x34
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	4603      	mov	r3, r0
 80046ec:	80fb      	strh	r3, [r7, #6]
	uint16_t  svr_port;

	uint16_t i, len;
	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	77fb      	strb	r3, [r7, #31]
	uint8_t opt_len;

	len = recvfrom(DHCP_SOCKET, (uint8_t *)MSG, length, svr_addr, &svr_port);
 80046f2:	4b9a      	ldr	r3, [pc, #616]	; (800495c <parseDHCPMSG+0x278>)
 80046f4:	7818      	ldrb	r0, [r3, #0]
 80046f6:	4b9a      	ldr	r3, [pc, #616]	; (8004960 <parseDHCPMSG+0x27c>)
 80046f8:	6819      	ldr	r1, [r3, #0]
 80046fa:	f107 0410 	add.w	r4, r7, #16
 80046fe:	88fa      	ldrh	r2, [r7, #6]
 8004700:	f107 030e 	add.w	r3, r7, #14
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	4623      	mov	r3, r4
 8004708:	f7fd fde2 	bl	80022d0 <recvfrom>
 800470c:	4603      	mov	r3, r0
 800470e:	83bb      	strh	r3, [r7, #28]

	if (svr_port == DHCP_SERVER_PORT) {
 8004710:	89fb      	ldrh	r3, [r7, #14]
 8004712:	2b43      	cmp	r3, #67	; 0x43
 8004714:	f040 811b 	bne.w	800494e <parseDHCPMSG+0x26a>

		for (i = 0; i < 6; i++)
 8004718:	2300      	movs	r3, #0
 800471a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800471c:	e00f      	b.n	800473e <parseDHCPMSG+0x5a>
			if (MSG->chaddr[i] != wizchip_mac[i]) {
 800471e:	4b90      	ldr	r3, [pc, #576]	; (8004960 <parseDHCPMSG+0x27c>)
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004724:	4413      	add	r3, r2
 8004726:	7f1a      	ldrb	r2, [r3, #28]
 8004728:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800472a:	498e      	ldr	r1, [pc, #568]	; (8004964 <parseDHCPMSG+0x280>)
 800472c:	5ccb      	ldrb	r3, [r1, r3]
 800472e:	429a      	cmp	r2, r3
 8004730:	d002      	beq.n	8004738 <parseDHCPMSG+0x54>
				type = 0;
 8004732:	2300      	movs	r3, #0
 8004734:	77fb      	strb	r3, [r7, #31]
				goto PARSE_END;
 8004736:	e10a      	b.n	800494e <parseDHCPMSG+0x26a>
		for (i = 0; i < 6; i++)
 8004738:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800473a:	3301      	adds	r3, #1
 800473c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800473e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004740:	2b05      	cmp	r3, #5
 8004742:	d9ec      	bls.n	800471e <parseDHCPMSG+0x3a>
			}

		for (i = 0; i < 4; i++) {
 8004744:	2300      	movs	r3, #0
 8004746:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004748:	e00a      	b.n	8004760 <parseDHCPMSG+0x7c>
			DHCP_allocated_ip[i] = MSG->yiaddr[i];
 800474a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800474c:	4a84      	ldr	r2, [pc, #528]	; (8004960 <parseDHCPMSG+0x27c>)
 800474e:	6811      	ldr	r1, [r2, #0]
 8004750:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004752:	440a      	add	r2, r1
 8004754:	7c11      	ldrb	r1, [r2, #16]
 8004756:	4a84      	ldr	r2, [pc, #528]	; (8004968 <parseDHCPMSG+0x284>)
 8004758:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < 4; i++) {
 800475a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800475c:	3301      	adds	r3, #1
 800475e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004760:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004762:	2b03      	cmp	r3, #3
 8004764:	d9f1      	bls.n	800474a <parseDHCPMSG+0x66>
		}
		
		type = 0;
 8004766:	2300      	movs	r3, #0
 8004768:	77fb      	strb	r3, [r7, #31]
		p = (uint8_t *)(&MSG->op);
 800476a:	4b7d      	ldr	r3, [pc, #500]	; (8004960 <parseDHCPMSG+0x27c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	623b      	str	r3, [r7, #32]
		p = p + 240;
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	33f0      	adds	r3, #240	; 0xf0
 8004774:	623b      	str	r3, [r7, #32]
		e = p + (len - 240);
 8004776:	8bbb      	ldrh	r3, [r7, #28]
 8004778:	3bf0      	subs	r3, #240	; 0xf0
 800477a:	6a3a      	ldr	r2, [r7, #32]
 800477c:	4413      	add	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]

		while ( p < e ) {
 8004780:	e0de      	b.n	8004940 <parseDHCPMSG+0x25c>

			switch ( *p ) {
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b06      	cmp	r3, #6
 8004788:	d064      	beq.n	8004854 <parseDHCPMSG+0x170>
 800478a:	2b06      	cmp	r3, #6
 800478c:	dc06      	bgt.n	800479c <parseDHCPMSG+0xb8>
 800478e:	2b01      	cmp	r3, #1
 8004790:	d022      	beq.n	80047d8 <parseDHCPMSG+0xf4>
 8004792:	2b03      	cmp	r3, #3
 8004794:	d037      	beq.n	8004806 <parseDHCPMSG+0x122>
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00e      	beq.n	80047b8 <parseDHCPMSG+0xd4>
 800479a:	e0c4      	b.n	8004926 <parseDHCPMSG+0x242>
 800479c:	2b35      	cmp	r3, #53	; 0x35
 800479e:	d00f      	beq.n	80047c0 <parseDHCPMSG+0xdc>
 80047a0:	2b35      	cmp	r3, #53	; 0x35
 80047a2:	dc02      	bgt.n	80047aa <parseDHCPMSG+0xc6>
 80047a4:	2b33      	cmp	r3, #51	; 0x33
 80047a6:	d07c      	beq.n	80048a2 <parseDHCPMSG+0x1be>
 80047a8:	e0bd      	b.n	8004926 <parseDHCPMSG+0x242>
 80047aa:	2b36      	cmp	r3, #54	; 0x36
 80047ac:	f000 809a 	beq.w	80048e4 <parseDHCPMSG+0x200>
 80047b0:	2bff      	cmp	r3, #255	; 0xff
 80047b2:	f000 80cb 	beq.w	800494c <parseDHCPMSG+0x268>
 80047b6:	e0b6      	b.n	8004926 <parseDHCPMSG+0x242>

			case endOption :
				goto PARSE_END;
       			case padOption :
				p++;
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	3301      	adds	r3, #1
 80047bc:	623b      	str	r3, [r7, #32]
				break;
 80047be:	e0bf      	b.n	8004940 <parseDHCPMSG+0x25c>
			case dhcpMessageType :
				p++;
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	3301      	adds	r3, #1
 80047c4:	623b      	str	r3, [r7, #32]
				p++;
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	3301      	adds	r3, #1
 80047ca:	623b      	str	r3, [r7, #32]
				type = *p++;
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	623a      	str	r2, [r7, #32]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	77fb      	strb	r3, [r7, #31]
				break;
 80047d6:	e0b3      	b.n	8004940 <parseDHCPMSG+0x25c>
			case subnetMask :
				p++;
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	3301      	adds	r3, #1
 80047dc:	623b      	str	r3, [r7, #32]
				p++;
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	3301      	adds	r3, #1
 80047e2:	623b      	str	r3, [r7, #32]
				for (i = 0; i < 4; i++)	 DHCP_allocated_sn[i] = *p++;
 80047e4:	2300      	movs	r3, #0
 80047e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80047e8:	e009      	b.n	80047fe <parseDHCPMSG+0x11a>
 80047ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	1c59      	adds	r1, r3, #1
 80047f0:	6239      	str	r1, [r7, #32]
 80047f2:	7819      	ldrb	r1, [r3, #0]
 80047f4:	4b5d      	ldr	r3, [pc, #372]	; (800496c <parseDHCPMSG+0x288>)
 80047f6:	5499      	strb	r1, [r3, r2]
 80047f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047fa:	3301      	adds	r3, #1
 80047fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80047fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004800:	2b03      	cmp	r3, #3
 8004802:	d9f2      	bls.n	80047ea <parseDHCPMSG+0x106>
				break;
 8004804:	e09c      	b.n	8004940 <parseDHCPMSG+0x25c>
			case routersOnSubnet :
				p++;
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	3301      	adds	r3, #1
 800480a:	623b      	str	r3, [r7, #32]
				opt_len = *p++;       
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	623a      	str	r2, [r7, #32]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	75fb      	strb	r3, [r7, #23]
				for (i = 0; i < 4; i++)	DHCP_allocated_gw[i] = *p++;
 8004816:	2300      	movs	r3, #0
 8004818:	84fb      	strh	r3, [r7, #38]	; 0x26
 800481a:	e009      	b.n	8004830 <parseDHCPMSG+0x14c>
 800481c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	1c59      	adds	r1, r3, #1
 8004822:	6239      	str	r1, [r7, #32]
 8004824:	7819      	ldrb	r1, [r3, #0]
 8004826:	4b52      	ldr	r3, [pc, #328]	; (8004970 <parseDHCPMSG+0x28c>)
 8004828:	5499      	strb	r1, [r3, r2]
 800482a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800482c:	3301      	adds	r3, #1
 800482e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004830:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004832:	2b03      	cmp	r3, #3
 8004834:	d9f2      	bls.n	800481c <parseDHCPMSG+0x138>
				for (i = 0; i < (opt_len-4); i++) p++;
 8004836:	2300      	movs	r3, #0
 8004838:	84fb      	strh	r3, [r7, #38]	; 0x26
 800483a:	e005      	b.n	8004848 <parseDHCPMSG+0x164>
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	3301      	adds	r3, #1
 8004840:	623b      	str	r3, [r7, #32]
 8004842:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004844:	3301      	adds	r3, #1
 8004846:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004848:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800484a:	7dfb      	ldrb	r3, [r7, #23]
 800484c:	3b04      	subs	r3, #4
 800484e:	429a      	cmp	r2, r3
 8004850:	dbf4      	blt.n	800483c <parseDHCPMSG+0x158>
				break;
 8004852:	e075      	b.n	8004940 <parseDHCPMSG+0x25c>
			
			case dns :
				p++;                  
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	3301      	adds	r3, #1
 8004858:	623b      	str	r3, [r7, #32]
				opt_len = *p++;       
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	623a      	str	r2, [r7, #32]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	75fb      	strb	r3, [r7, #23]
				for (i = 0; i < 4; i++)	DHCP_allocated_dns[i] = *p++;
 8004864:	2300      	movs	r3, #0
 8004866:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004868:	e009      	b.n	800487e <parseDHCPMSG+0x19a>
 800486a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	1c59      	adds	r1, r3, #1
 8004870:	6239      	str	r1, [r7, #32]
 8004872:	7819      	ldrb	r1, [r3, #0]
 8004874:	4b3f      	ldr	r3, [pc, #252]	; (8004974 <parseDHCPMSG+0x290>)
 8004876:	5499      	strb	r1, [r3, r2]
 8004878:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800487a:	3301      	adds	r3, #1
 800487c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800487e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004880:	2b03      	cmp	r3, #3
 8004882:	d9f2      	bls.n	800486a <parseDHCPMSG+0x186>
				for (i = 0; i < (opt_len-4); i++) p++;
 8004884:	2300      	movs	r3, #0
 8004886:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004888:	e005      	b.n	8004896 <parseDHCPMSG+0x1b2>
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	3301      	adds	r3, #1
 800488e:	623b      	str	r3, [r7, #32]
 8004890:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004892:	3301      	adds	r3, #1
 8004894:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004896:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004898:	7dfb      	ldrb	r3, [r7, #23]
 800489a:	3b04      	subs	r3, #4
 800489c:	429a      	cmp	r2, r3
 800489e:	dbf4      	blt.n	800488a <parseDHCPMSG+0x1a6>
				break;
 80048a0:	e04e      	b.n	8004940 <parseDHCPMSG+0x25c>
				
				
			case dhcpIPaddrLeaseTime :
				p++;
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	3301      	adds	r3, #1
 80048a6:	623b      	str	r3, [r7, #32]
				opt_len = *p++;
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	623a      	str	r2, [r7, #32]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	75fb      	strb	r3, [r7, #23]
				lease_time.cVal[3] = *p++;
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	623a      	str	r2, [r7, #32]
 80048b8:	781a      	ldrb	r2, [r3, #0]
 80048ba:	4b2f      	ldr	r3, [pc, #188]	; (8004978 <parseDHCPMSG+0x294>)
 80048bc:	70da      	strb	r2, [r3, #3]
				lease_time.cVal[2] = *p++;
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	623a      	str	r2, [r7, #32]
 80048c4:	781a      	ldrb	r2, [r3, #0]
 80048c6:	4b2c      	ldr	r3, [pc, #176]	; (8004978 <parseDHCPMSG+0x294>)
 80048c8:	709a      	strb	r2, [r3, #2]
				lease_time.cVal[1] = *p++;
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	623a      	str	r2, [r7, #32]
 80048d0:	781a      	ldrb	r2, [r3, #0]
 80048d2:	4b29      	ldr	r3, [pc, #164]	; (8004978 <parseDHCPMSG+0x294>)
 80048d4:	705a      	strb	r2, [r3, #1]
				lease_time.cVal[0] = *p++;
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	623a      	str	r2, [r7, #32]
 80048dc:	781a      	ldrb	r2, [r3, #0]
 80048de:	4b26      	ldr	r3, [pc, #152]	; (8004978 <parseDHCPMSG+0x294>)
 80048e0:	701a      	strb	r2, [r3, #0]
				break;
 80048e2:	e02d      	b.n	8004940 <parseDHCPMSG+0x25c>

			case dhcpServerIdentifier :
				p++;
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	3301      	adds	r3, #1
 80048e8:	623b      	str	r3, [r7, #32]
				opt_len = *p++;
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	623a      	str	r2, [r7, #32]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	75fb      	strb	r3, [r7, #23]
				DHCP_SIP[0] = *p++;
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	623a      	str	r2, [r7, #32]
 80048fa:	781a      	ldrb	r2, [r3, #0]
 80048fc:	4b1f      	ldr	r3, [pc, #124]	; (800497c <parseDHCPMSG+0x298>)
 80048fe:	701a      	strb	r2, [r3, #0]
				DHCP_SIP[1] = *p++;
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	623a      	str	r2, [r7, #32]
 8004906:	781a      	ldrb	r2, [r3, #0]
 8004908:	4b1c      	ldr	r3, [pc, #112]	; (800497c <parseDHCPMSG+0x298>)
 800490a:	705a      	strb	r2, [r3, #1]
				DHCP_SIP[2] = *p++;
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	623a      	str	r2, [r7, #32]
 8004912:	781a      	ldrb	r2, [r3, #0]
 8004914:	4b19      	ldr	r3, [pc, #100]	; (800497c <parseDHCPMSG+0x298>)
 8004916:	709a      	strb	r2, [r3, #2]
				DHCP_SIP[3] = *p++;
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	623a      	str	r2, [r7, #32]
 800491e:	781a      	ldrb	r2, [r3, #0]
 8004920:	4b16      	ldr	r3, [pc, #88]	; (800497c <parseDHCPMSG+0x298>)
 8004922:	70da      	strb	r2, [r3, #3]
				break;
 8004924:	e00c      	b.n	8004940 <parseDHCPMSG+0x25c>

			default :
				p++;
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	3301      	adds	r3, #1
 800492a:	623b      	str	r3, [r7, #32]
				opt_len = *p++;
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	623a      	str	r2, [r7, #32]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	75fb      	strb	r3, [r7, #23]
				p += opt_len;
 8004936:	7dfb      	ldrb	r3, [r7, #23]
 8004938:	6a3a      	ldr	r2, [r7, #32]
 800493a:	4413      	add	r3, r2
 800493c:	623b      	str	r3, [r7, #32]
				break;
 800493e:	bf00      	nop
		while ( p < e ) {
 8004940:	6a3a      	ldr	r2, [r7, #32]
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	429a      	cmp	r2, r3
 8004946:	f4ff af1c 	bcc.w	8004782 <parseDHCPMSG+0x9e>
 800494a:	e000      	b.n	800494e <parseDHCPMSG+0x26a>
				goto PARSE_END;
 800494c:	bf00      	nop
			} // switch
		} // while
	} // if

PARSE_END :
	return	type;
 800494e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004952:	4618      	mov	r0, r3
 8004954:	372c      	adds	r7, #44	; 0x2c
 8004956:	46bd      	mov	sp, r7
 8004958:	bd90      	pop	{r4, r7, pc}
 800495a:	bf00      	nop
 800495c:	20003670 	andcs	r3, r0, r0, ror r6
 8004960:	2000366c 	andcs	r3, r0, ip, ror #12
 8004964:	2000012c 	andcs	r0, r0, ip, lsr #2
 8004968:	2000011c 	andcs	r0, r0, ip, lsl r1
 800496c:	20000124 	andcs	r0, r0, r4, lsr #2
 8004970:	20000120 	andcs	r0, r0, r0, lsr #2
 8004974:	20000128 	andcs	r0, r0, r8, lsr #2
 8004978:	20003668 	andcs	r3, r0, r8, ror #12
 800497c:	20003658 	andcs	r3, r0, r8, asr r6

08004980 <check_DHCP_state>:
* 				DHCP_IP_CHANGED
* Note       : 
*********************************************************************************************************
*/
uint8_t check_DHCP_state(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
	uint16_t len, i;
	uint8_t type, DHCP_ip_changed_flag;
	uint8_t d_addr[4];
	uint8_t ret;
	
	ret = DHCP_RUNNING;
 8004986:	2304      	movs	r3, #4
 8004988:	72fb      	strb	r3, [r7, #11]
	type = 0;
 800498a:	2300      	movs	r3, #0
 800498c:	737b      	strb	r3, [r7, #13]
	
	if ((len = getSn_RX_RSR(DHCP_SOCKET)) > 0) {
 800498e:	4b7a      	ldr	r3, [pc, #488]	; (8004b78 <check_DHCP_state+0x1f8>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f7fe fd7e 	bl	8003494 <getSn_RX_RSR>
 8004998:	4603      	mov	r3, r0
 800499a:	813b      	strh	r3, [r7, #8]
 800499c:	893b      	ldrh	r3, [r7, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <check_DHCP_state+0x2e>
		type = parseDHCPMSG(len);
 80049a2:	893b      	ldrh	r3, [r7, #8]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff fe9d 	bl	80046e4 <parseDHCPMSG>
 80049aa:	4603      	mov	r3, r0
 80049ac:	737b      	strb	r3, [r7, #13]
	}
	switch ( dhcp_state ) {
 80049ae:	4b73      	ldr	r3, [pc, #460]	; (8004b7c <check_DHCP_state+0x1fc>)
 80049b0:	f993 3000 	ldrsb.w	r3, [r3]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	f200 80d7 	bhi.w	8004b6a <check_DHCP_state+0x1ea>
 80049bc:	a201      	add	r2, pc, #4	; (adr r2, 80049c4 <check_DHCP_state+0x44>)
 80049be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c2:	bf00      	nop
 80049c4:	080049d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, fp, lr}
 80049c8:	08004a1b 	stmdaeq	r0, {r0, r1, r3, r4, r9, fp, lr}
 80049cc:	08004a69 	stmdaeq	r0, {r0, r3, r5, r6, r9, fp, lr}
 80049d0:	08004afb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, fp, lr}
 80049d4:	08004b6b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r8, r9, fp, lr}
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER) {
 80049d8:	7b7b      	ldrb	r3, [r7, #13]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d118      	bne.n	8004a10 <check_DHCP_state+0x90>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
				
				for (i = 0; i < 4; i++) d_addr[i] = 0xff;
 80049de:	2300      	movs	r3, #0
 80049e0:	81fb      	strh	r3, [r7, #14]
 80049e2:	e009      	b.n	80049f8 <check_DHCP_state+0x78>
 80049e4:	89fb      	ldrh	r3, [r7, #14]
 80049e6:	f107 0210 	add.w	r2, r7, #16
 80049ea:	4413      	add	r3, r2
 80049ec:	22ff      	movs	r2, #255	; 0xff
 80049ee:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80049f2:	89fb      	ldrh	r3, [r7, #14]
 80049f4:	3301      	adds	r3, #1
 80049f6:	81fb      	strh	r3, [r7, #14]
 80049f8:	89fb      	ldrh	r3, [r7, #14]
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	d9f2      	bls.n	80049e4 <check_DHCP_state+0x64>
				send_DHCP_REQUEST(Cip, d_addr);
 80049fe:	1d3b      	adds	r3, r7, #4
 8004a00:	4619      	mov	r1, r3
 8004a02:	485f      	ldr	r0, [pc, #380]	; (8004b80 <check_DHCP_state+0x200>)
 8004a04:	f7ff f934 	bl	8003c70 <send_DHCP_REQUEST>
				
				dhcp_state = STATE_DHCP_REQUEST;
 8004a08:	4b5c      	ldr	r3, [pc, #368]	; (8004b7c <check_DHCP_state+0x1fc>)
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
		break;
 8004a0e:	e0ad      	b.n	8004b6c <check_DHCP_state+0x1ec>
			} else ret = check_DHCP_timeout();
 8004a10:	f000 f8cc 	bl	8004bac <check_DHCP_timeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	72fb      	strb	r3, [r7, #11]
		break;
 8004a18:	e0a8      	b.n	8004b6c <check_DHCP_state+0x1ec>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8004a1a:	7b7b      	ldrb	r3, [r7, #13]
 8004a1c:	2b05      	cmp	r3, #5
 8004a1e:	d115      	bne.n	8004a4c <check_DHCP_state+0xcc>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				
				if (check_DHCP_leasedIP()) {
 8004a20:	f000 f94c 	bl	8004cbc <check_DHCP_leasedIP>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <check_DHCP_state+0xc0>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8004a2a:	4b56      	ldr	r3, [pc, #344]	; (8004b84 <check_DHCP_state+0x204>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4798      	blx	r3
					reset_DHCP_timeout();
 8004a30:	f000 f9dc 	bl	8004dec <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8004a34:	4b51      	ldr	r3, [pc, #324]	; (8004b7c <check_DHCP_state+0x1fc>)
 8004a36:	2203      	movs	r2, #3
 8004a38:	701a      	strb	r2, [r3, #0]
					ret = DHCP_SUCCESS;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	72fb      	strb	r3, [r7, #11]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8004a3e:	e095      	b.n	8004b6c <check_DHCP_state+0x1ec>
					reset_DHCP_timeout();
 8004a40:	f000 f9d4 	bl	8004dec <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8004a44:	4b50      	ldr	r3, [pc, #320]	; (8004b88 <check_DHCP_state+0x208>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4798      	blx	r3
		break;
 8004a4a:	e08f      	b.n	8004b6c <check_DHCP_state+0x1ec>
			} else if (type == DHCP_NAK) {
 8004a4c:	7b7b      	ldrb	r3, [r7, #13]
 8004a4e:	2b06      	cmp	r3, #6
 8004a50:	d105      	bne.n	8004a5e <check_DHCP_state+0xde>
				reset_DHCP_timeout();
 8004a52:	f000 f9cb 	bl	8004dec <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8004a56:	4b49      	ldr	r3, [pc, #292]	; (8004b7c <check_DHCP_state+0x1fc>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	701a      	strb	r2, [r3, #0]
		break;
 8004a5c:	e086      	b.n	8004b6c <check_DHCP_state+0x1ec>
			} else ret = check_DHCP_timeout();
 8004a5e:	f000 f8a5 	bl	8004bac <check_DHCP_timeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	72fb      	strb	r3, [r7, #11]
		break;
 8004a66:	e081      	b.n	8004b6c <check_DHCP_state+0x1ec>

		case STATE_DHCP_LEASED :
			if ((lease_time.lVal != 0xffffffff) && ((lease_time.lVal/2) < my_time)) {
 8004a68:	4b48      	ldr	r3, [pc, #288]	; (8004b8c <check_DHCP_state+0x20c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a70:	d040      	beq.n	8004af4 <check_DHCP_state+0x174>
 8004a72:	4b46      	ldr	r3, [pc, #280]	; (8004b8c <check_DHCP_state+0x20c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	085a      	lsrs	r2, r3, #1
 8004a78:	4b45      	ldr	r3, [pc, #276]	; (8004b90 <check_DHCP_state+0x210>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d239      	bcs.n	8004af4 <check_DHCP_state+0x174>
				
#ifdef _DHCP_DEBUG_
 				printf("> Renewal IP address \r\n");
#endif

				type = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	737b      	strb	r3, [r7, #13]
				for (i = 0; i < 4; i++)	OLD_SIP[i] = DHCP_allocated_ip[i];
 8004a84:	2300      	movs	r3, #0
 8004a86:	81fb      	strh	r3, [r7, #14]
 8004a88:	e008      	b.n	8004a9c <check_DHCP_state+0x11c>
 8004a8a:	89fb      	ldrh	r3, [r7, #14]
 8004a8c:	89fa      	ldrh	r2, [r7, #14]
 8004a8e:	4941      	ldr	r1, [pc, #260]	; (8004b94 <check_DHCP_state+0x214>)
 8004a90:	5c89      	ldrb	r1, [r1, r2]
 8004a92:	4a41      	ldr	r2, [pc, #260]	; (8004b98 <check_DHCP_state+0x218>)
 8004a94:	54d1      	strb	r1, [r2, r3]
 8004a96:	89fb      	ldrh	r3, [r7, #14]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	81fb      	strh	r3, [r7, #14]
 8004a9c:	89fb      	ldrh	r3, [r7, #14]
 8004a9e:	2b03      	cmp	r3, #3
 8004aa0:	d9f3      	bls.n	8004a8a <check_DHCP_state+0x10a>
				for (i = 0; i < 4; i++)	d_addr[i] = DHCP_SIP[i];
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	81fb      	strh	r3, [r7, #14]
 8004aa6:	e00b      	b.n	8004ac0 <check_DHCP_state+0x140>
 8004aa8:	89fb      	ldrh	r3, [r7, #14]
 8004aaa:	89fa      	ldrh	r2, [r7, #14]
 8004aac:	493b      	ldr	r1, [pc, #236]	; (8004b9c <check_DHCP_state+0x21c>)
 8004aae:	5c8a      	ldrb	r2, [r1, r2]
 8004ab0:	f107 0110 	add.w	r1, r7, #16
 8004ab4:	440b      	add	r3, r1
 8004ab6:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8004aba:	89fb      	ldrh	r3, [r7, #14]
 8004abc:	3301      	adds	r3, #1
 8004abe:	81fb      	strh	r3, [r7, #14]
 8004ac0:	89fb      	ldrh	r3, [r7, #14]
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d9f0      	bls.n	8004aa8 <check_DHCP_state+0x128>
				
				DHCP_XID++;
 8004ac6:	4b36      	ldr	r3, [pc, #216]	; (8004ba0 <check_DHCP_state+0x220>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3301      	adds	r3, #1
 8004acc:	4a34      	ldr	r2, [pc, #208]	; (8004ba0 <check_DHCP_state+0x220>)
 8004ace:	6013      	str	r3, [r2, #0]

				socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00); // added
 8004ad0:	4b29      	ldr	r3, [pc, #164]	; (8004b78 <check_DHCP_state+0x1f8>)
 8004ad2:	7818      	ldrb	r0, [r3, #0]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	2244      	movs	r2, #68	; 0x44
 8004ad8:	2102      	movs	r1, #2
 8004ada:	f7fc ff2f 	bl	800193c <socket>
				send_DHCP_REQUEST(DHCP_allocated_ip, d_addr);
 8004ade:	1d3b      	adds	r3, r7, #4
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	482c      	ldr	r0, [pc, #176]	; (8004b94 <check_DHCP_state+0x214>)
 8004ae4:	f7ff f8c4 	bl	8003c70 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8004ae8:	f000 f980 	bl	8004dec <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8004aec:	4b23      	ldr	r3, [pc, #140]	; (8004b7c <check_DHCP_state+0x1fc>)
 8004aee:	2204      	movs	r2, #4
 8004af0:	701a      	strb	r2, [r3, #0]
			} else {
				ret = DHCP_IP_LEASED;
			}
		break;
 8004af2:	e03b      	b.n	8004b6c <check_DHCP_state+0x1ec>
				ret = DHCP_IP_LEASED;
 8004af4:	2303      	movs	r3, #3
 8004af6:	72fb      	strb	r3, [r7, #11]
		break;
 8004af8:	e038      	b.n	8004b6c <check_DHCP_state+0x1ec>

		case STATE_DHCP_REREQUEST :
			if (type == DHCP_ACK) {
 8004afa:	7b7b      	ldrb	r3, [r7, #13]
 8004afc:	2b05      	cmp	r3, #5
 8004afe:	d126      	bne.n	8004b4e <check_DHCP_state+0x1ce>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK, IP Renewal Success\r\n");
#endif

				retry_count = 0;
 8004b00:	4b28      	ldr	r3, [pc, #160]	; (8004ba4 <check_DHCP_state+0x224>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
				DHCP_ip_changed_flag = 0;
 8004b06:	2300      	movs	r3, #0
 8004b08:	733b      	strb	r3, [r7, #12]

				for (i = 0; i < 4; i++)	{
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	81fb      	strh	r3, [r7, #14]
 8004b0e:	e00d      	b.n	8004b2c <check_DHCP_state+0x1ac>
					if (OLD_SIP[i] != DHCP_allocated_ip[i]) {
 8004b10:	89fb      	ldrh	r3, [r7, #14]
 8004b12:	4a21      	ldr	r2, [pc, #132]	; (8004b98 <check_DHCP_state+0x218>)
 8004b14:	5cd2      	ldrb	r2, [r2, r3]
 8004b16:	89fb      	ldrh	r3, [r7, #14]
 8004b18:	491e      	ldr	r1, [pc, #120]	; (8004b94 <check_DHCP_state+0x214>)
 8004b1a:	5ccb      	ldrb	r3, [r1, r3]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d002      	beq.n	8004b26 <check_DHCP_state+0x1a6>
						DHCP_ip_changed_flag = 1;
 8004b20:	2301      	movs	r3, #1
 8004b22:	733b      	strb	r3, [r7, #12]
						break;
 8004b24:	e005      	b.n	8004b32 <check_DHCP_state+0x1b2>
				for (i = 0; i < 4; i++)	{
 8004b26:	89fb      	ldrh	r3, [r7, #14]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	81fb      	strh	r3, [r7, #14]
 8004b2c:	89fb      	ldrh	r3, [r7, #14]
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d9ee      	bls.n	8004b10 <check_DHCP_state+0x190>
					}
				}

				// change to new IP address
				if (DHCP_ip_changed_flag) {
 8004b32:	7b3b      	ldrb	r3, [r7, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d004      	beq.n	8004b42 <check_DHCP_state+0x1c2>
					ret = DHCP_IP_CHANGED;
 8004b38:	2302      	movs	r3, #2
 8004b3a:	72fb      	strb	r3, [r7, #11]
					dhcp_ip_update();
 8004b3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <check_DHCP_state+0x228>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4798      	blx	r3
				}
				reset_DHCP_timeout();
 8004b42:	f000 f953 	bl	8004dec <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_LEASED;
 8004b46:	4b0d      	ldr	r3, [pc, #52]	; (8004b7c <check_DHCP_state+0x1fc>)
 8004b48:	2203      	movs	r2, #3
 8004b4a:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8004b4c:	e00e      	b.n	8004b6c <check_DHCP_state+0x1ec>
			} else if (type == DHCP_NAK) {
 8004b4e:	7b7b      	ldrb	r3, [r7, #13]
 8004b50:	2b06      	cmp	r3, #6
 8004b52:	d105      	bne.n	8004b60 <check_DHCP_state+0x1e0>
				reset_DHCP_timeout();
 8004b54:	f000 f94a 	bl	8004dec <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8004b58:	4b08      	ldr	r3, [pc, #32]	; (8004b7c <check_DHCP_state+0x1fc>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	701a      	strb	r2, [r3, #0]
		break;
 8004b5e:	e005      	b.n	8004b6c <check_DHCP_state+0x1ec>
			} else ret = check_DHCP_timeout();
 8004b60:	f000 f824 	bl	8004bac <check_DHCP_timeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	72fb      	strb	r3, [r7, #11]
		break;
 8004b68:	e000      	b.n	8004b6c <check_DHCP_state+0x1ec>

		case STATE_DHCP_RELEASE :
		break;

		default :
		break;
 8004b6a:	bf00      	nop
	}

	return ret;
 8004b6c:	7afb      	ldrb	r3, [r7, #11]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20003670 	andcs	r3, r0, r0, ror r6
 8004b7c:	20003644 	andcs	r3, r0, r4, asr #12
 8004b80:	20000134 	andcs	r0, r0, r4, lsr r1
 8004b84:	200000ac 	andcs	r0, r0, ip, lsr #1
 8004b88:	200000b4 	strhcs	r0, [r0], -r4
 8004b8c:	20003668 	andcs	r3, r0, r8, ror #12
 8004b90:	2000365c 	andcs	r3, r0, ip, asr r6
 8004b94:	2000011c 	andcs	r0, r0, ip, lsl r1
 8004b98:	20003650 	andcs	r3, r0, r0, asr r6
 8004b9c:	20003658 	andcs	r3, r0, r8, asr r6
 8004ba0:	20003654 	andcs	r3, r0, r4, asr r6
 8004ba4:	20003664 	andcs	r3, r0, r4, ror #12
 8004ba8:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>

08004bac <check_DHCP_timeout>:
* 			   DHCP_RUNNING - No timeout
* Note       : 
*********************************************************************************************************
*/
uint8_t check_DHCP_timeout(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
	uint8_t i, d_addr[4];
	uint8_t ret = DHCP_RUNNING;
 8004bb2:	2304      	movs	r3, #4
 8004bb4:	71bb      	strb	r3, [r7, #6]
	
	if (retry_count < MAX_DHCP_RETRY) {
 8004bb6:	4b3a      	ldr	r3, [pc, #232]	; (8004ca0 <check_DHCP_timeout+0xf4>)
 8004bb8:	f993 3000 	ldrsb.w	r3, [r3]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	dc52      	bgt.n	8004c66 <check_DHCP_timeout+0xba>
		if (next_time < my_time) {
 8004bc0:	4b38      	ldr	r3, [pc, #224]	; (8004ca4 <check_DHCP_timeout+0xf8>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	4b38      	ldr	r3, [pc, #224]	; (8004ca8 <check_DHCP_timeout+0xfc>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d264      	bcs.n	8004c96 <check_DHCP_timeout+0xea>

			switch ( dhcp_state ) {
 8004bcc:	4b37      	ldr	r3, [pc, #220]	; (8004cac <check_DHCP_timeout+0x100>)
 8004bce:	f993 3000 	ldrsb.w	r3, [r3]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d007      	beq.n	8004be6 <check_DHCP_timeout+0x3a>
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d01b      	beq.n	8004c12 <check_DHCP_timeout+0x66>
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d000      	beq.n	8004be0 <check_DHCP_timeout+0x34>
					for (i = 0; i < 4; i++)	d_addr[i] = DHCP_SIP[i];
					send_DHCP_REQUEST(DHCP_allocated_ip, d_addr);
				break;
		
				default :
				break;
 8004bde:	e030      	b.n	8004c42 <check_DHCP_timeout+0x96>
					send_DHCP_DISCOVER();
 8004be0:	f7fe fde2 	bl	80037a8 <send_DHCP_DISCOVER>
				break;
 8004be4:	e02d      	b.n	8004c42 <check_DHCP_timeout+0x96>
					for (i = 0; i < 4; i++) d_addr[i] = 0xff;
 8004be6:	2300      	movs	r3, #0
 8004be8:	71fb      	strb	r3, [r7, #7]
 8004bea:	e009      	b.n	8004c00 <check_DHCP_timeout+0x54>
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	f107 0208 	add.w	r2, r7, #8
 8004bf2:	4413      	add	r3, r2
 8004bf4:	22ff      	movs	r2, #255	; 0xff
 8004bf6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	71fb      	strb	r3, [r7, #7]
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d9f2      	bls.n	8004bec <check_DHCP_timeout+0x40>
					send_DHCP_REQUEST(Cip, d_addr);
 8004c06:	463b      	mov	r3, r7
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4829      	ldr	r0, [pc, #164]	; (8004cb0 <check_DHCP_timeout+0x104>)
 8004c0c:	f7ff f830 	bl	8003c70 <send_DHCP_REQUEST>
				break;
 8004c10:	e017      	b.n	8004c42 <check_DHCP_timeout+0x96>
					for (i = 0; i < 4; i++)	d_addr[i] = DHCP_SIP[i];
 8004c12:	2300      	movs	r3, #0
 8004c14:	71fb      	strb	r3, [r7, #7]
 8004c16:	e00b      	b.n	8004c30 <check_DHCP_timeout+0x84>
 8004c18:	79fb      	ldrb	r3, [r7, #7]
 8004c1a:	79fa      	ldrb	r2, [r7, #7]
 8004c1c:	4925      	ldr	r1, [pc, #148]	; (8004cb4 <check_DHCP_timeout+0x108>)
 8004c1e:	5c8a      	ldrb	r2, [r1, r2]
 8004c20:	f107 0108 	add.w	r1, r7, #8
 8004c24:	440b      	add	r3, r1
 8004c26:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	71fb      	strb	r3, [r7, #7]
 8004c30:	79fb      	ldrb	r3, [r7, #7]
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d9f0      	bls.n	8004c18 <check_DHCP_timeout+0x6c>
					send_DHCP_REQUEST(DHCP_allocated_ip, d_addr);
 8004c36:	463b      	mov	r3, r7
 8004c38:	4619      	mov	r1, r3
 8004c3a:	481f      	ldr	r0, [pc, #124]	; (8004cb8 <check_DHCP_timeout+0x10c>)
 8004c3c:	f7ff f818 	bl	8003c70 <send_DHCP_REQUEST>
				break;
 8004c40:	bf00      	nop
			}

			my_time = 0;
 8004c42:	4b19      	ldr	r3, [pc, #100]	; (8004ca8 <check_DHCP_timeout+0xfc>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
			next_time = my_time + DHCP_WAIT_TIME;
 8004c48:	4b17      	ldr	r3, [pc, #92]	; (8004ca8 <check_DHCP_timeout+0xfc>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	330a      	adds	r3, #10
 8004c4e:	4a15      	ldr	r2, [pc, #84]	; (8004ca4 <check_DHCP_timeout+0xf8>)
 8004c50:	6013      	str	r3, [r2, #0]
			retry_count++;
 8004c52:	4b13      	ldr	r3, [pc, #76]	; (8004ca0 <check_DHCP_timeout+0xf4>)
 8004c54:	f993 3000 	ldrsb.w	r3, [r3]
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	b25a      	sxtb	r2, r3
 8004c60:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <check_DHCP_timeout+0xf4>)
 8004c62:	701a      	strb	r2, [r3, #0]
 8004c64:	e017      	b.n	8004c96 <check_DHCP_timeout+0xea>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8004c66:	4b11      	ldr	r3, [pc, #68]	; (8004cac <check_DHCP_timeout+0x100>)
 8004c68:	f993 3000 	ldrsb.w	r3, [r3]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d00a      	beq.n	8004c86 <check_DHCP_timeout+0xda>
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d008      	beq.n	8004c86 <check_DHCP_timeout+0xda>
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d000      	beq.n	8004c7a <check_DHCP_timeout+0xce>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8004c78:	e00b      	b.n	8004c92 <check_DHCP_timeout+0xe6>
				dhcp_state = STATE_DHCP_INIT;
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <check_DHCP_timeout+0x100>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8004c80:	2300      	movs	r3, #0
 8004c82:	71bb      	strb	r3, [r7, #6]
				break;
 8004c84:	e005      	b.n	8004c92 <check_DHCP_timeout+0xe6>
				send_DHCP_DISCOVER();
 8004c86:	f7fe fd8f 	bl	80037a8 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8004c8a:	4b08      	ldr	r3, [pc, #32]	; (8004cac <check_DHCP_timeout+0x100>)
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	701a      	strb	r2, [r3, #0]
				break;
 8004c90:	bf00      	nop
		}
		reset_DHCP_timeout();
 8004c92:	f000 f8ab 	bl	8004dec <reset_DHCP_timeout>
	}
	return ret;
 8004c96:	79bb      	ldrb	r3, [r7, #6]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20003664 	andcs	r3, r0, r4, ror #12
 8004ca4:	20003660 	andcs	r3, r0, r0, ror #12
 8004ca8:	2000365c 	andcs	r3, r0, ip, asr r6
 8004cac:	20003644 	andcs	r3, r0, r4, asr #12
 8004cb0:	20000134 	andcs	r0, r0, r4, lsr r1
 8004cb4:	20003658 	andcs	r3, r0, r8, asr r6
 8004cb8:	2000011c 	andcs	r0, r0, ip, lsl r1

08004cbc <check_DHCP_leasedIP>:
* Note       :
*********************************************************************************************************
*/
//
int8_t check_DHCP_leasedIP(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8004cc2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8004cc6:	f7fe faa7 	bl	8003218 <WIZCHIP_READ>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8004cce:	2103      	movs	r1, #3
 8004cd0:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8004cd4:	f7fe fad0 	bl	8003278 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8004cd8:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <check_DHCP_leasedIP+0x70>)
 8004cda:	7818      	ldrb	r0, [r3, #0]
 8004cdc:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	4b13      	ldr	r3, [pc, #76]	; (8004d30 <check_DHCP_leasedIP+0x74>)
 8004ce4:	2211      	movs	r2, #17
 8004ce6:	4913      	ldr	r1, [pc, #76]	; (8004d34 <check_DHCP_leasedIP+0x78>)
 8004ce8:	f7fd f9ee 	bl	80020c8 <sendto>
 8004cec:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8004cee:	79fb      	ldrb	r3, [r7, #7]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8004cf6:	f7fe fabf 	bl	8003278 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	f113 0f0d 	cmn.w	r3, #13
 8004d00:	d101      	bne.n	8004d06 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e00e      	b.n	8004d24 <check_DHCP_leasedIP+0x68>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8004d06:	f7ff facf 	bl	80042a8 <send_DHCP_DECLINE>
		for(tmp = 0; tmp < 10; tmp++) getMR(); // for delay
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	71fb      	strb	r3, [r7, #7]
 8004d0e:	e005      	b.n	8004d1c <check_DHCP_leasedIP+0x60>
 8004d10:	2000      	movs	r0, #0
 8004d12:	f7fe fa81 	bl	8003218 <WIZCHIP_READ>
 8004d16:	79fb      	ldrb	r3, [r7, #7]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	71fb      	strb	r3, [r7, #7]
 8004d1c:	79fb      	ldrb	r3, [r7, #7]
 8004d1e:	2b09      	cmp	r3, #9
 8004d20:	d9f6      	bls.n	8004d10 <check_DHCP_leasedIP+0x54>
		return 0;
 8004d22:	2300      	movs	r3, #0
	}
}	
 8004d24:	4618      	mov	r0, r3
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	20003670 	andcs	r3, r0, r0, ror r6
 8004d30:	2000011c 	andcs	r0, r0, ip, lsl r1
 8004d34:	08009674 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, ip, pc}

08004d38 <DHCP_init>:
* Note       : 
*********************************************************************************************************
*/

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	6039      	str	r1, [r7, #0]
 8004d42:	71fb      	strb	r3, [r7, #7]
	DHCP_SOCKET = s; // SOCK_DHCP
 8004d44:	4a17      	ldr	r2, [pc, #92]	; (8004da4 <DHCP_init+0x6c>)
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	7013      	strb	r3, [r2, #0]
	MSG = (RIP_MSG*)buf;
 8004d4a:	4a17      	ldr	r2, [pc, #92]	; (8004da8 <DHCP_init+0x70>)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8004d50:	4b16      	ldr	r3, [pc, #88]	; (8004dac <DHCP_init+0x74>)
 8004d52:	4a17      	ldr	r2, [pc, #92]	; (8004db0 <DHCP_init+0x78>)
 8004d54:	601a      	str	r2, [r3, #0]

	// Get the MAC address
	getSHAR(wizchip_mac);
 8004d56:	2206      	movs	r2, #6
 8004d58:	4916      	ldr	r1, [pc, #88]	; (8004db4 <DHCP_init+0x7c>)
 8004d5a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004d5e:	f7fe fac1 	bl	80032e4 <WIZCHIP_READ_BUF>

	// WIZchip Netinfo Clear
	setSIPR(Cip);
 8004d62:	2204      	movs	r2, #4
 8004d64:	4914      	ldr	r1, [pc, #80]	; (8004db8 <DHCP_init+0x80>)
 8004d66:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004d6a:	f7fe faff 	bl	800336c <WIZCHIP_WRITE_BUF>
	setSIPR(Cip);
 8004d6e:	2204      	movs	r2, #4
 8004d70:	4911      	ldr	r1, [pc, #68]	; (8004db8 <DHCP_init+0x80>)
 8004d72:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004d76:	f7fe faf9 	bl	800336c <WIZCHIP_WRITE_BUF>
	setGAR(Cip);
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	490e      	ldr	r1, [pc, #56]	; (8004db8 <DHCP_init+0x80>)
 8004d7e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004d82:	f7fe faf3 	bl	800336c <WIZCHIP_WRITE_BUF>

	dhcp_state = STATE_DHCP_INIT;
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <DHCP_init+0x84>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	701a      	strb	r2, [r3, #0]
	socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8004d8c:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <DHCP_init+0x6c>)
 8004d8e:	7818      	ldrb	r0, [r3, #0]
 8004d90:	2300      	movs	r3, #0
 8004d92:	2244      	movs	r2, #68	; 0x44
 8004d94:	2102      	movs	r1, #2
 8004d96:	f7fc fdd1 	bl	800193c <socket>
}
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20003670 	andcs	r3, r0, r0, ror r6
 8004da8:	2000366c 	andcs	r3, r0, ip, ror #12
 8004dac:	20003654 	andcs	r3, r0, r4, asr r6
 8004db0:	12345678 	eorsne	r5, r4, #120, 12	; 0x7800000
 8004db4:	2000012c 	andcs	r0, r0, ip, lsr #2
 8004db8:	20000134 	andcs	r0, r0, r4, lsr r1
 8004dbc:	20003644 	andcs	r3, r0, r4, asr #12

08004dc0 <DHCP_run>:
* Note       :
*********************************************************************************************************
*/

uint8_t DHCP_run(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
	if(dhcp_state == STATE_DHCP_INIT) {
 8004dc4:	4b08      	ldr	r3, [pc, #32]	; (8004de8 <DHCP_run+0x28>)
 8004dc6:	f993 3000 	ldrsb.w	r3, [r3]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <DHCP_run+0x1c>
		send_DHCP_DISCOVER();
 8004dce:	f7fe fceb 	bl	80037a8 <send_DHCP_DISCOVER>
		dhcp_state = STATE_DHCP_DISCOVER;
 8004dd2:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <DHCP_run+0x28>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	701a      	strb	r2, [r3, #0]
		reset_DHCP_timeout();
 8004dd8:	f000 f808 	bl	8004dec <reset_DHCP_timeout>
	}

	return check_DHCP_state();
 8004ddc:	f7ff fdd0 	bl	8004980 <check_DHCP_state>
 8004de0:	4603      	mov	r3, r0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20003644 	andcs	r3, r0, r4, asr #12

08004dec <reset_DHCP_timeout>:
* Returns    : None.
* Note       :
*********************************************************************************************************
*/
void reset_DHCP_timeout(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
	my_time = 0;
 8004df0:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <reset_DHCP_timeout+0x20>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
	next_time = DHCP_WAIT_TIME;
 8004df6:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <reset_DHCP_timeout+0x24>)
 8004df8:	220a      	movs	r2, #10
 8004dfa:	601a      	str	r2, [r3, #0]
	retry_count = 0;
 8004dfc:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <reset_DHCP_timeout+0x28>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	701a      	strb	r2, [r3, #0]
}
 8004e02:	bf00      	nop
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	2000365c 	andcs	r3, r0, ip, asr r6
 8004e10:	20003660 	andcs	r3, r0, r0, ror #12
 8004e14:	20003664 	andcs	r3, r0, r4, ror #12

08004e18 <DHCP_timerHandler>:
* Returns    : None.
* Note       :
*********************************************************************************************************
*/
void DHCP_timerHandler(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
	my_time++;
 8004e1c:	4b04      	ldr	r3, [pc, #16]	; (8004e30 <DHCP_timerHandler+0x18>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3301      	adds	r3, #1
 8004e22:	4a03      	ldr	r2, [pc, #12]	; (8004e30 <DHCP_timerHandler+0x18>)
 8004e24:	6013      	str	r3, [r2, #0]
}
 8004e26:	bf00      	nop
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	2000365c 	andcs	r3, r0, ip, asr r6

08004e34 <getIPfromDHCP>:
* 			   getSNfromDHCP,
* 			   getDNSfromDHCP
*********************************************************************************************************
*/
void getIPfromDHCP(uint8_t * ip)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <getIPfromDHCP+0x38>)
 8004e3e:	781a      	ldrb	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3301      	adds	r3, #1
 8004e48:	4a08      	ldr	r2, [pc, #32]	; (8004e6c <getIPfromDHCP+0x38>)
 8004e4a:	7852      	ldrb	r2, [r2, #1]
 8004e4c:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3302      	adds	r3, #2
 8004e52:	4a06      	ldr	r2, [pc, #24]	; (8004e6c <getIPfromDHCP+0x38>)
 8004e54:	7892      	ldrb	r2, [r2, #2]
 8004e56:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3303      	adds	r3, #3
 8004e5c:	4a03      	ldr	r2, [pc, #12]	; (8004e6c <getIPfromDHCP+0x38>)
 8004e5e:	78d2      	ldrb	r2, [r2, #3]
 8004e60:	701a      	strb	r2, [r3, #0]
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bc80      	pop	{r7}
 8004e6a:	4770      	bx	lr
 8004e6c:	2000011c 	andcs	r0, r0, ip, lsl r1

08004e70 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t * gw)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	gw[0] = DHCP_allocated_gw[0];
 8004e78:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <getGWfromDHCP+0x38>)
 8004e7a:	781a      	ldrb	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	701a      	strb	r2, [r3, #0]
	gw[1] = DHCP_allocated_gw[1];
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3301      	adds	r3, #1
 8004e84:	4a08      	ldr	r2, [pc, #32]	; (8004ea8 <getGWfromDHCP+0x38>)
 8004e86:	7852      	ldrb	r2, [r2, #1]
 8004e88:	701a      	strb	r2, [r3, #0]
	gw[2] = DHCP_allocated_gw[2];
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3302      	adds	r3, #2
 8004e8e:	4a06      	ldr	r2, [pc, #24]	; (8004ea8 <getGWfromDHCP+0x38>)
 8004e90:	7892      	ldrb	r2, [r2, #2]
 8004e92:	701a      	strb	r2, [r3, #0]
	gw[3] = DHCP_allocated_gw[3];
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3303      	adds	r3, #3
 8004e98:	4a03      	ldr	r2, [pc, #12]	; (8004ea8 <getGWfromDHCP+0x38>)
 8004e9a:	78d2      	ldrb	r2, [r2, #3]
 8004e9c:	701a      	strb	r2, [r3, #0]
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bc80      	pop	{r7}
 8004ea6:	4770      	bx	lr
 8004ea8:	20000120 	andcs	r0, r0, r0, lsr #2

08004eac <getSNfromDHCP>:

void getSNfromDHCP(uint8_t * sn)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
	sn[0] = DHCP_allocated_sn[0];
 8004eb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <getSNfromDHCP+0x38>)
 8004eb6:	781a      	ldrb	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	701a      	strb	r2, [r3, #0]
	sn[1] = DHCP_allocated_sn[1];
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	4a08      	ldr	r2, [pc, #32]	; (8004ee4 <getSNfromDHCP+0x38>)
 8004ec2:	7852      	ldrb	r2, [r2, #1]
 8004ec4:	701a      	strb	r2, [r3, #0]
	sn[2] = DHCP_allocated_sn[2];
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3302      	adds	r3, #2
 8004eca:	4a06      	ldr	r2, [pc, #24]	; (8004ee4 <getSNfromDHCP+0x38>)
 8004ecc:	7892      	ldrb	r2, [r2, #2]
 8004ece:	701a      	strb	r2, [r3, #0]
	sn[3] = DHCP_allocated_sn[3];
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3303      	adds	r3, #3
 8004ed4:	4a03      	ldr	r2, [pc, #12]	; (8004ee4 <getSNfromDHCP+0x38>)
 8004ed6:	78d2      	ldrb	r2, [r2, #3]
 8004ed8:	701a      	strb	r2, [r3, #0]
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr
 8004ee4:	20000124 	andcs	r0, r0, r4, lsr #2

08004ee8 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t * dns)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
	dns[0] = DHCP_allocated_dns[0];
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <getDNSfromDHCP+0x38>)
 8004ef2:	781a      	ldrb	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	701a      	strb	r2, [r3, #0]
	dns[1] = DHCP_allocated_dns[1];
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3301      	adds	r3, #1
 8004efc:	4a08      	ldr	r2, [pc, #32]	; (8004f20 <getDNSfromDHCP+0x38>)
 8004efe:	7852      	ldrb	r2, [r2, #1]
 8004f00:	701a      	strb	r2, [r3, #0]
	dns[2] = DHCP_allocated_dns[2];
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3302      	adds	r3, #2
 8004f06:	4a06      	ldr	r2, [pc, #24]	; (8004f20 <getDNSfromDHCP+0x38>)
 8004f08:	7892      	ldrb	r2, [r2, #2]
 8004f0a:	701a      	strb	r2, [r3, #0]
	dns[3] = DHCP_allocated_dns[3];
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3303      	adds	r3, #3
 8004f10:	4a03      	ldr	r2, [pc, #12]	; (8004f20 <getDNSfromDHCP+0x38>)
 8004f12:	78d2      	ldrb	r2, [r2, #3]
 8004f14:	701a      	strb	r2, [r3, #0]
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr
 8004f20:	20000128 	andcs	r0, r0, r8, lsr #2

08004f24 <get16>:
* Returns     : host byte order unsigned integer.
* Note        : Internal Function
********************************************************************************
*/
uint16_t get16(uint8_t * s)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
	uint16_t i;

	i = *s++ << 8;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	607a      	str	r2, [r7, #4]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	021b      	lsls	r3, r3, #8
 8004f38:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	89fb      	ldrh	r3, [r7, #14]
 8004f42:	4413      	add	r3, r2
 8004f44:	81fb      	strh	r3, [r7, #14]

	return i;
 8004f46:	89fb      	ldrh	r3, [r7, #14]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop

08004f54 <parse_name>:
* Returns     : the length of compressed message
* Note        :
********************************************************************************
*/
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b08b      	sub	sp, #44	; 0x2c
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 8004f62:	2300      	movs	r3, #0
 8004f64:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 8004f66:	2300      	movs	r3, #0
 8004f68:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]

	cp = compressed;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	623a      	str	r2, [r7, #32]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d102      	bne.n	8004f88 <parse_name+0x34>
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	3301      	adds	r3, #1
 8004f86:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 8004f88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f8e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f90:	d117      	bne.n	8004fc2 <parse_name+0x6e>
		{
			if (!indirect)
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d102      	bne.n	8004f9e <parse_name+0x4a>
				clen++;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 8004fa2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fa4:	021b      	lsls	r3, r3, #8
 8004fa6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8004faa:	6a3a      	ldr	r2, [r7, #32]
 8004fac:	7812      	ldrb	r2, [r2, #0]
 8004fae:	4413      	add	r3, r2
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	623a      	str	r2, [r7, #32]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 8004fc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d02b      	beq.n	8005020 <parse_name+0xcc>
			break;

		len -= slen + 1;
 8004fc8:	887a      	ldrh	r2, [r7, #2]
 8004fca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 8004fd6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	da02      	bge.n	8004fe4 <parse_name+0x90>
 8004fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fe2:	e038      	b.n	8005056 <parse_name+0x102>

		if (!indirect) clen += slen;
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10c      	bne.n	8005004 <parse_name+0xb0>
 8004fea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	4413      	add	r3, r2
 8004ff0:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 8004ff2:	e007      	b.n	8005004 <parse_name+0xb0>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	607a      	str	r2, [r7, #4]
 8004ffa:	6a3a      	ldr	r2, [r7, #32]
 8004ffc:	1c51      	adds	r1, r2, #1
 8004ffe:	6239      	str	r1, [r7, #32]
 8005000:	7812      	ldrb	r2, [r2, #0]
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005006:	1e5a      	subs	r2, r3, #1
 8005008:	84fa      	strh	r2, [r7, #38]	; 0x26
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1f2      	bne.n	8004ff4 <parse_name+0xa0>
		*buf++ = '.';
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	222e      	movs	r2, #46	; 0x2e
 8005016:	701a      	strb	r2, [r3, #0]
		nseg++;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	3301      	adds	r3, #1
 800501c:	617b      	str	r3, [r7, #20]
	}
 800501e:	e7a8      	b.n	8004f72 <parse_name+0x1e>
			break;
 8005020:	bf00      	nop

	if (nseg == 0)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10a      	bne.n	800503e <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	607a      	str	r2, [r7, #4]
 800502e:	222e      	movs	r2, #46	; 0x2e
 8005030:	701a      	strb	r2, [r3, #0]
		len--;
 8005032:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005036:	b29b      	uxth	r3, r3
 8005038:	3b01      	subs	r3, #1
 800503a:	b29b      	uxth	r3, r3
 800503c:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	701a      	strb	r2, [r3, #0]
	len--;
 8005048:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29b      	uxth	r3, r3
 8005052:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 8005054:	69fb      	ldr	r3, [r7, #28]
}
 8005056:	4618      	mov	r0, r3
 8005058:	372c      	adds	r7, #44	; 0x2c
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr

08005060 <dns_question>:
* Returns     : a pointer the to next record.
* Note        :
********************************************************************************
*/
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b0c4      	sub	sp, #272	; 0x110
 8005064:	af00      	add	r7, sp, #0
 8005066:	1d3b      	adds	r3, r7, #4
 8005068:	6018      	str	r0, [r3, #0]
 800506a:	463b      	mov	r3, r7
 800506c:	6019      	str	r1, [r3, #0]
	int len;
	char name[MAX_DNS_BUF_SIZE];

	len = parse_name(msg, cp, name, MAX_DNS_BUF_SIZE);
 800506e:	f107 020c 	add.w	r2, r7, #12
 8005072:	4639      	mov	r1, r7
 8005074:	1d38      	adds	r0, r7, #4
 8005076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800507a:	6809      	ldr	r1, [r1, #0]
 800507c:	6800      	ldr	r0, [r0, #0]
 800507e:	f7ff ff69 	bl	8004f54 <parse_name>
 8005082:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c


	if (len == -1) return 0;
 8005086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800508a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800508e:	d101      	bne.n	8005094 <dns_question+0x34>
 8005090:	2300      	movs	r3, #0
 8005092:	e012      	b.n	80050ba <dns_question+0x5a>

	cp += len;
 8005094:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005098:	463b      	mov	r3, r7
 800509a:	4639      	mov	r1, r7
 800509c:	6809      	ldr	r1, [r1, #0]
 800509e:	440a      	add	r2, r1
 80050a0:	601a      	str	r2, [r3, #0]
	cp += 2;		/* type */
 80050a2:	463b      	mov	r3, r7
 80050a4:	463a      	mov	r2, r7
 80050a6:	6812      	ldr	r2, [r2, #0]
 80050a8:	3202      	adds	r2, #2
 80050aa:	601a      	str	r2, [r3, #0]
	cp += 2;		/* class */
 80050ac:	463b      	mov	r3, r7
 80050ae:	463a      	mov	r2, r7
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	3202      	adds	r2, #2
 80050b4:	601a      	str	r2, [r3, #0]

	return cp;
 80050b6:	463b      	mov	r3, r7
 80050b8:	681b      	ldr	r3, [r3, #0]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <dns_answer>:
* Returns     : a pointer the to next record.
* Note        :
********************************************************************************
*/
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b0c6      	sub	sp, #280	; 0x118
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	f107 030c 	add.w	r3, r7, #12
 80050ce:	6018      	str	r0, [r3, #0]
 80050d0:	f107 0308 	add.w	r3, r7, #8
 80050d4:	6019      	str	r1, [r3, #0]
 80050d6:	1d3b      	adds	r3, r7, #4
 80050d8:	601a      	str	r2, [r3, #0]
	int len, type;
	char name[MAX_DNS_BUF_SIZE];

	len = parse_name(msg, cp, name, MAX_DNS_BUF_SIZE);
 80050da:	f107 0210 	add.w	r2, r7, #16
 80050de:	f107 0108 	add.w	r1, r7, #8
 80050e2:	f107 000c 	add.w	r0, r7, #12
 80050e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050ea:	6809      	ldr	r1, [r1, #0]
 80050ec:	6800      	ldr	r0, [r0, #0]
 80050ee:	f7ff ff31 	bl	8004f54 <parse_name>
 80050f2:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	if (len == -1) return 0;
 80050f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050fe:	d101      	bne.n	8005104 <dns_answer+0x40>
 8005100:	2300      	movs	r3, #0
 8005102:	e155      	b.n	80053b0 <dns_answer+0x2ec>

	cp += len;
 8005104:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005108:	f107 0308 	add.w	r3, r7, #8
 800510c:	f107 0108 	add.w	r1, r7, #8
 8005110:	6809      	ldr	r1, [r1, #0]
 8005112:	440a      	add	r2, r1
 8005114:	601a      	str	r2, [r3, #0]
	type = get16(cp);
 8005116:	f107 0308 	add.w	r3, r7, #8
 800511a:	6818      	ldr	r0, [r3, #0]
 800511c:	f7ff ff02 	bl	8004f24 <get16>
 8005120:	4603      	mov	r3, r0
 8005122:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	cp += 2;		/* type */
 8005126:	f107 0308 	add.w	r3, r7, #8
 800512a:	f107 0208 	add.w	r2, r7, #8
 800512e:	6812      	ldr	r2, [r2, #0]
 8005130:	3202      	adds	r2, #2
 8005132:	601a      	str	r2, [r3, #0]
	cp += 2;		/* class */
 8005134:	f107 0308 	add.w	r3, r7, #8
 8005138:	f107 0208 	add.w	r2, r7, #8
 800513c:	6812      	ldr	r2, [r2, #0]
 800513e:	3202      	adds	r2, #2
 8005140:	601a      	str	r2, [r3, #0]
	cp += 4;		/* ttl */
 8005142:	f107 0308 	add.w	r3, r7, #8
 8005146:	f107 0208 	add.w	r2, r7, #8
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	3204      	adds	r2, #4
 800514e:	601a      	str	r2, [r3, #0]
	cp += 2;		/* len */
 8005150:	f107 0308 	add.w	r3, r7, #8
 8005154:	f107 0208 	add.w	r2, r7, #8
 8005158:	6812      	ldr	r2, [r2, #0]
 800515a:	3202      	adds	r2, #2
 800515c:	601a      	str	r2, [r3, #0]


	switch (type)
 800515e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005162:	3b01      	subs	r3, #1
 8005164:	2b0f      	cmp	r3, #15
 8005166:	f200 811f 	bhi.w	80053a8 <dns_answer+0x2e4>
 800516a:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <dns_answer+0xac>)
 800516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005170:	080051b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, ip, lr}
 8005174:	08005211 	stmdaeq	r0, {r0, r4, r9, ip, lr}
 8005178:	080053a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, ip, lr}
 800517c:	080053a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, ip, lr}
 8005180:	08005211 	stmdaeq	r0, {r0, r4, r9, ip, lr}
 8005184:	080052e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, ip, lr}
 8005188:	08005211 	stmdaeq	r0, {r0, r4, r9, ip, lr}
 800518c:	08005211 	stmdaeq	r0, {r0, r4, r9, ip, lr}
 8005190:	08005211 	stmdaeq	r0, {r0, r4, r9, ip, lr}
 8005194:	080053a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, ip, lr}
 8005198:	080053a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, ip, lr}
 800519c:	08005211 	stmdaeq	r0, {r0, r4, r9, ip, lr}
 80051a0:	0800524f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r9, ip, lr}
 80051a4:	080053a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, ip, lr}
 80051a8:	0800529d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, ip, lr}
 80051ac:	080053a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, ip, lr}
	{
	case TYPE_A:
		/* Just read the address directly into the structure */
		ip_from_dns[0] = *cp++;
 80051b0:	f107 0308 	add.w	r3, r7, #8
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f107 0208 	add.w	r2, r7, #8
 80051ba:	1c59      	adds	r1, r3, #1
 80051bc:	6011      	str	r1, [r2, #0]
 80051be:	781a      	ldrb	r2, [r3, #0]
 80051c0:	1d3b      	adds	r3, r7, #4
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 80051c6:	1d3b      	adds	r3, r7, #4
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	f107 0308 	add.w	r3, r7, #8
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f107 0108 	add.w	r1, r7, #8
 80051d6:	1c58      	adds	r0, r3, #1
 80051d8:	6008      	str	r0, [r1, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 80051de:	1d3b      	adds	r3, r7, #4
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	1c9a      	adds	r2, r3, #2
 80051e4:	f107 0308 	add.w	r3, r7, #8
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f107 0108 	add.w	r1, r7, #8
 80051ee:	1c58      	adds	r0, r3, #1
 80051f0:	6008      	str	r0, [r1, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 80051f6:	1d3b      	adds	r3, r7, #4
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	1cda      	adds	r2, r3, #3
 80051fc:	f107 0308 	add.w	r3, r7, #8
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f107 0108 	add.w	r1, r7, #8
 8005206:	1c58      	adds	r0, r3, #1
 8005208:	6008      	str	r0, [r1, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	7013      	strb	r3, [r2, #0]
		break;
 800520e:	e0cc      	b.n	80053aa <dns_answer+0x2e6>
	case TYPE_MR:
	case TYPE_NS:
	case TYPE_PTR:
		/* These types all consist of a single domain name */
		/* convert it to ascii format */
		len = parse_name(msg, cp, name, MAX_DNS_BUF_SIZE);
 8005210:	f107 0210 	add.w	r2, r7, #16
 8005214:	f107 0108 	add.w	r1, r7, #8
 8005218:	f107 000c 	add.w	r0, r7, #12
 800521c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005220:	6809      	ldr	r1, [r1, #0]
 8005222:	6800      	ldr	r0, [r0, #0]
 8005224:	f7ff fe96 	bl	8004f54 <parse_name>
 8005228:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
		if (len == -1) return 0;
 800522c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005234:	d101      	bne.n	800523a <dns_answer+0x176>
 8005236:	2300      	movs	r3, #0
 8005238:	e0ba      	b.n	80053b0 <dns_answer+0x2ec>

		cp += len;
 800523a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800523e:	f107 0308 	add.w	r3, r7, #8
 8005242:	f107 0108 	add.w	r1, r7, #8
 8005246:	6809      	ldr	r1, [r1, #0]
 8005248:	440a      	add	r2, r1
 800524a:	601a      	str	r2, [r3, #0]
		break;
 800524c:	e0ad      	b.n	80053aa <dns_answer+0x2e6>
	case TYPE_HINFO:
		len = *cp++;
 800524e:	f107 0308 	add.w	r3, r7, #8
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f107 0208 	add.w	r2, r7, #8
 8005258:	1c59      	adds	r1, r3, #1
 800525a:	6011      	str	r1, [r2, #0]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		cp += len;
 8005262:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005266:	f107 0308 	add.w	r3, r7, #8
 800526a:	f107 0108 	add.w	r1, r7, #8
 800526e:	6809      	ldr	r1, [r1, #0]
 8005270:	440a      	add	r2, r1
 8005272:	601a      	str	r2, [r3, #0]

		len = *cp++;
 8005274:	f107 0308 	add.w	r3, r7, #8
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f107 0208 	add.w	r2, r7, #8
 800527e:	1c59      	adds	r1, r3, #1
 8005280:	6011      	str	r1, [r2, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		cp += len;
 8005288:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800528c:	f107 0308 	add.w	r3, r7, #8
 8005290:	f107 0108 	add.w	r1, r7, #8
 8005294:	6809      	ldr	r1, [r1, #0]
 8005296:	440a      	add	r2, r1
 8005298:	601a      	str	r2, [r3, #0]
		break;
 800529a:	e086      	b.n	80053aa <dns_answer+0x2e6>
	case TYPE_MX:
		cp += 2;
 800529c:	f107 0308 	add.w	r3, r7, #8
 80052a0:	f107 0208 	add.w	r2, r7, #8
 80052a4:	6812      	ldr	r2, [r2, #0]
 80052a6:	3202      	adds	r2, #2
 80052a8:	601a      	str	r2, [r3, #0]
		/* Get domain name of exchanger */
		len = parse_name(msg, cp, name, MAX_DNS_BUF_SIZE);
 80052aa:	f107 0210 	add.w	r2, r7, #16
 80052ae:	f107 0108 	add.w	r1, r7, #8
 80052b2:	f107 000c 	add.w	r0, r7, #12
 80052b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052ba:	6809      	ldr	r1, [r1, #0]
 80052bc:	6800      	ldr	r0, [r0, #0]
 80052be:	f7ff fe49 	bl	8004f54 <parse_name>
 80052c2:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
		if (len == -1) return 0;
 80052c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ce:	d101      	bne.n	80052d4 <dns_answer+0x210>
 80052d0:	2300      	movs	r3, #0
 80052d2:	e06d      	b.n	80053b0 <dns_answer+0x2ec>

		cp += len;
 80052d4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80052d8:	f107 0308 	add.w	r3, r7, #8
 80052dc:	f107 0108 	add.w	r1, r7, #8
 80052e0:	6809      	ldr	r1, [r1, #0]
 80052e2:	440a      	add	r2, r1
 80052e4:	601a      	str	r2, [r3, #0]
		break;
 80052e6:	e060      	b.n	80053aa <dns_answer+0x2e6>
	case TYPE_SOA:
		/* Get domain name of name server */
		len = parse_name(msg, cp, name, MAX_DNS_BUF_SIZE);
 80052e8:	f107 0210 	add.w	r2, r7, #16
 80052ec:	f107 0108 	add.w	r1, r7, #8
 80052f0:	f107 000c 	add.w	r0, r7, #12
 80052f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052f8:	6809      	ldr	r1, [r1, #0]
 80052fa:	6800      	ldr	r0, [r0, #0]
 80052fc:	f7ff fe2a 	bl	8004f54 <parse_name>
 8005300:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
		if (len == -1) return 0;
 8005304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800530c:	d101      	bne.n	8005312 <dns_answer+0x24e>
 800530e:	2300      	movs	r3, #0
 8005310:	e04e      	b.n	80053b0 <dns_answer+0x2ec>

		cp += len;
 8005312:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005316:	f107 0308 	add.w	r3, r7, #8
 800531a:	f107 0108 	add.w	r1, r7, #8
 800531e:	6809      	ldr	r1, [r1, #0]
 8005320:	440a      	add	r2, r1
 8005322:	601a      	str	r2, [r3, #0]

		/* Get domain name of responsible person */
		len = parse_name(msg, cp, name, MAX_DNS_BUF_SIZE);
 8005324:	f107 0210 	add.w	r2, r7, #16
 8005328:	f107 0108 	add.w	r1, r7, #8
 800532c:	f107 000c 	add.w	r0, r7, #12
 8005330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005334:	6809      	ldr	r1, [r1, #0]
 8005336:	6800      	ldr	r0, [r0, #0]
 8005338:	f7ff fe0c 	bl	8004f54 <parse_name>
 800533c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
		if (len == -1) return 0;
 8005340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005348:	d101      	bne.n	800534e <dns_answer+0x28a>
 800534a:	2300      	movs	r3, #0
 800534c:	e030      	b.n	80053b0 <dns_answer+0x2ec>

		cp += len;
 800534e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005352:	f107 0308 	add.w	r3, r7, #8
 8005356:	f107 0108 	add.w	r1, r7, #8
 800535a:	6809      	ldr	r1, [r1, #0]
 800535c:	440a      	add	r2, r1
 800535e:	601a      	str	r2, [r3, #0]

		cp += 4;
 8005360:	f107 0308 	add.w	r3, r7, #8
 8005364:	f107 0208 	add.w	r2, r7, #8
 8005368:	6812      	ldr	r2, [r2, #0]
 800536a:	3204      	adds	r2, #4
 800536c:	601a      	str	r2, [r3, #0]
		cp += 4;
 800536e:	f107 0308 	add.w	r3, r7, #8
 8005372:	f107 0208 	add.w	r2, r7, #8
 8005376:	6812      	ldr	r2, [r2, #0]
 8005378:	3204      	adds	r2, #4
 800537a:	601a      	str	r2, [r3, #0]
		cp += 4;
 800537c:	f107 0308 	add.w	r3, r7, #8
 8005380:	f107 0208 	add.w	r2, r7, #8
 8005384:	6812      	ldr	r2, [r2, #0]
 8005386:	3204      	adds	r2, #4
 8005388:	601a      	str	r2, [r3, #0]
		cp += 4;
 800538a:	f107 0308 	add.w	r3, r7, #8
 800538e:	f107 0208 	add.w	r2, r7, #8
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	3204      	adds	r2, #4
 8005396:	601a      	str	r2, [r3, #0]
		cp += 4;
 8005398:	f107 0308 	add.w	r3, r7, #8
 800539c:	f107 0208 	add.w	r2, r7, #8
 80053a0:	6812      	ldr	r2, [r2, #0]
 80053a2:	3204      	adds	r2, #4
 80053a4:	601a      	str	r2, [r3, #0]
		break;
 80053a6:	e000      	b.n	80053aa <dns_answer+0x2e6>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 80053a8:	bf00      	nop
	}

	return cp;
 80053aa:	f107 0308 	add.w	r3, r7, #8
 80053ae:	681b      	ldr	r3, [r3, #0]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop

080053bc <parseMSG>:
* Returns     : 1 - is success, 0 - is fail
* Note        :
********************************************************************************
*/
uint8_t parseMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(pdhdr));
 80053cc:	2204      	movs	r2, #4
 80053ce:	2100      	movs	r1, #0
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f7fa ff13 	bl	80001fc <memset>

	pdhdr->id = get16(&msg[0]);
 80053d6:	6978      	ldr	r0, [r7, #20]
 80053d8:	f7ff fda4 	bl	8004f24 <get16>
 80053dc:	4603      	mov	r3, r0
 80053de:	461a      	mov	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	3302      	adds	r3, #2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff fd9b 	bl	8004f24 <get16>
 80053ee:	4603      	mov	r3, r0
 80053f0:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 80053f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	da02      	bge.n	8005400 <parseMSG+0x44>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 8005400:	8a7b      	ldrh	r3, [r7, #18]
 8005402:	0adb      	lsrs	r3, r3, #11
 8005404:	b29b      	uxth	r3, r3
 8005406:	b2db      	uxtb	r3, r3
 8005408:	f003 030f 	and.w	r3, r3, #15
 800540c:	b2da      	uxtb	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 8005412:	8a7b      	ldrh	r3, [r7, #18]
 8005414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <parseMSG+0x66>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2201      	movs	r2, #1
 8005420:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 8005422:	8a7b      	ldrh	r3, [r7, #18]
 8005424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <parseMSG+0x76>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2201      	movs	r2, #1
 8005430:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 8005432:	8a7b      	ldrh	r3, [r7, #18]
 8005434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <parseMSG+0x86>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 8005442:	8a7b      	ldrh	r3, [r7, #18]
 8005444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <parseMSG+0x96>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2201      	movs	r2, #1
 8005450:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 8005452:	8a7b      	ldrh	r3, [r7, #18]
 8005454:	b2db      	uxtb	r3, r3
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	b2da      	uxtb	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	3304      	adds	r3, #4
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff fd5d 	bl	8004f24 <get16>
 800546a:	4603      	mov	r3, r0
 800546c:	461a      	mov	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	3306      	adds	r3, #6
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff fd54 	bl	8004f24 <get16>
 800547c:	4603      	mov	r3, r0
 800547e:	461a      	mov	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	3308      	adds	r3, #8
 8005488:	4618      	mov	r0, r3
 800548a:	f7ff fd4b 	bl	8004f24 <get16>
 800548e:	4603      	mov	r3, r0
 8005490:	461a      	mov	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	330a      	adds	r3, #10
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff fd42 	bl	8004f24 <get16>
 80054a0:	4603      	mov	r3, r0
 80054a2:	461a      	mov	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	330c      	adds	r3, #12
 80054ac:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 80054ae:	2300      	movs	r3, #0
 80054b0:	83fb      	strh	r3, [r7, #30]
 80054b2:	e007      	b.n	80054c4 <parseMSG+0x108>
	{
		cp = dns_question(msg, cp);
 80054b4:	69b9      	ldr	r1, [r7, #24]
 80054b6:	6978      	ldr	r0, [r7, #20]
 80054b8:	f7ff fdd2 	bl	8005060 <dns_question>
 80054bc:	61b8      	str	r0, [r7, #24]
	for (i = 0; i < pdhdr->qdcount; i++)
 80054be:	8bfb      	ldrh	r3, [r7, #30]
 80054c0:	3301      	adds	r3, #1
 80054c2:	83fb      	strh	r3, [r7, #30]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	895b      	ldrh	r3, [r3, #10]
 80054c8:	8bfa      	ldrh	r2, [r7, #30]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d3f2      	bcc.n	80054b4 <parseMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 80054ce:	2300      	movs	r3, #0
 80054d0:	83fb      	strh	r3, [r7, #30]
 80054d2:	e008      	b.n	80054e6 <parseMSG+0x12a>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	69b9      	ldr	r1, [r7, #24]
 80054d8:	6978      	ldr	r0, [r7, #20]
 80054da:	f7ff fdf3 	bl	80050c4 <dns_answer>
 80054de:	61b8      	str	r0, [r7, #24]
	for (i = 0; i < pdhdr->ancount; i++)
 80054e0:	8bfb      	ldrh	r3, [r7, #30]
 80054e2:	3301      	adds	r3, #1
 80054e4:	83fb      	strh	r3, [r7, #30]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	899b      	ldrh	r3, [r3, #12]
 80054ea:	8bfa      	ldrh	r2, [r7, #30]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d3f1      	bcc.n	80054d4 <parseMSG+0x118>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 80054f0:	2300      	movs	r3, #0
 80054f2:	83fb      	strh	r3, [r7, #30]
 80054f4:	e002      	b.n	80054fc <parseMSG+0x140>
 80054f6:	8bfb      	ldrh	r3, [r7, #30]
 80054f8:	3301      	adds	r3, #1
 80054fa:	83fb      	strh	r3, [r7, #30]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	89db      	ldrh	r3, [r3, #14]
 8005500:	8bfa      	ldrh	r2, [r7, #30]
 8005502:	429a      	cmp	r2, r3
 8005504:	d3f7      	bcc.n	80054f6 <parseMSG+0x13a>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 8005506:	2300      	movs	r3, #0
 8005508:	83fb      	strh	r3, [r7, #30]
 800550a:	e002      	b.n	8005512 <parseMSG+0x156>
 800550c:	8bfb      	ldrh	r3, [r7, #30]
 800550e:	3301      	adds	r3, #1
 8005510:	83fb      	strh	r3, [r7, #30]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8a1b      	ldrh	r3, [r3, #16]
 8005516:	8bfa      	ldrh	r2, [r7, #30]
 8005518:	429a      	cmp	r2, r3
 800551a:	d3f7      	bcc.n	800550c <parseMSG+0x150>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	7a1b      	ldrb	r3, [r3, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <parseMSG+0x16c>
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <parseMSG+0x16e>
	else return 0;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3720      	adds	r7, #32
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop

08005534 <put16>:
* Returns     : a pointer to the buffer.
* Note        : Internal Function
********************************************************************************
*/
uint8_t * put16(uint8_t * s, uint16_t i)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	607a      	str	r2, [r7, #4]
 8005546:	887a      	ldrh	r2, [r7, #2]
 8005548:	0a12      	lsrs	r2, r2, #8
 800554a:	b292      	uxth	r2, r2
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	607a      	str	r2, [r7, #4]
 8005556:	887a      	ldrh	r2, [r7, #2]
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	701a      	strb	r2, [r3, #0]

	return s;
 800555c:	687b      	ldr	r3, [r7, #4]
}
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr

08005568 <dns_makequery>:
* Returns     : the pointer to the DNS message.
* Note        :
********************************************************************************
*/
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 8005568:	b590      	push	{r4, r7, lr}
 800556a:	b0c9      	sub	sp, #292	; 0x124
 800556c:	af00      	add	r7, sp, #0
 800556e:	4604      	mov	r4, r0
 8005570:	f107 0008 	add.w	r0, r7, #8
 8005574:	6001      	str	r1, [r0, #0]
 8005576:	1d39      	adds	r1, r7, #4
 8005578:	600a      	str	r2, [r1, #0]
 800557a:	4619      	mov	r1, r3
 800557c:	f107 030e 	add.w	r3, r7, #14
 8005580:	4622      	mov	r2, r4
 8005582:	801a      	strh	r2, [r3, #0]
 8005584:	f107 030c 	add.w	r3, r7, #12
 8005588:	460a      	mov	r2, r1
 800558a:	801a      	strh	r2, [r3, #0]
	char sname[MAX_DNS_BUF_SIZE];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 800558c:	1d3b      	adds	r3, r7, #4
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	MSG_ID++;
 8005594:	4b62      	ldr	r3, [pc, #392]	; (8005720 <dns_makequery+0x1b8>)
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	3301      	adds	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	4b60      	ldr	r3, [pc, #384]	; (8005720 <dns_makequery+0x1b8>)
 800559e:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, MSG_ID);
 80055a0:	4b5f      	ldr	r3, [pc, #380]	; (8005720 <dns_makequery+0x1b8>)
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	4619      	mov	r1, r3
 80055a6:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80055aa:	f7ff ffc3 	bl	8005534 <put16>
 80055ae:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	p = (op << 11) | 0x0100;			/* Recursion desired */
 80055b2:	f107 030e 	add.w	r3, r7, #14
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	02db      	lsls	r3, r3, #11
 80055ba:	b21b      	sxth	r3, r3
 80055bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c0:	b21b      	sxth	r3, r3
 80055c2:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
	cp = put16(cp, p);
 80055c6:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80055ca:	4619      	mov	r1, r3
 80055cc:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80055d0:	f7ff ffb0 	bl	8005534 <put16>
 80055d4:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	cp = put16(cp, 1);
 80055d8:	2101      	movs	r1, #1
 80055da:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80055de:	f7ff ffa9 	bl	8005534 <put16>
 80055e2:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	cp = put16(cp, 0);
 80055e6:	2100      	movs	r1, #0
 80055e8:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80055ec:	f7ff ffa2 	bl	8005534 <put16>
 80055f0:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	cp = put16(cp, 0);
 80055f4:	2100      	movs	r1, #0
 80055f6:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80055fa:	f7ff ff9b 	bl	8005534 <put16>
 80055fe:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	cp = put16(cp, 0);
 8005602:	2100      	movs	r1, #0
 8005604:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8005608:	f7ff ff94 	bl	8005534 <put16>
 800560c:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

	strcpy(sname, name);
 8005610:	f107 0308 	add.w	r3, r7, #8
 8005614:	f107 0210 	add.w	r2, r7, #16
 8005618:	6819      	ldr	r1, [r3, #0]
 800561a:	4610      	mov	r0, r2
 800561c:	f7fa ffb8 	bl	8000590 <strcpy>
	dname = sname;
 8005620:	f107 0310 	add.w	r3, r7, #16
 8005624:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	dlen = strlen(dname);
 8005628:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800562c:	f7fb f80e 	bl	800064c <strlen>
 8005630:	4603      	mov	r3, r0
 8005632:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 8005636:	212e      	movs	r1, #46	; 0x2e
 8005638:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800563c:	f7fa ff40 	bl	80004c0 <strchr>
 8005640:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 8005644:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005648:	2b00      	cmp	r3, #0
 800564a:	d008      	beq.n	800565e <dns_makequery+0xf6>
 800564c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005650:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005654:	1ad2      	subs	r2, r2, r3
 8005656:	f107 030c 	add.w	r3, r7, #12
 800565a:	801a      	strh	r2, [r3, #0]
 800565c:	e004      	b.n	8005668 <dns_makequery+0x100>
		else len = dlen;			/* Last component */
 800565e:	f107 030c 	add.w	r3, r7, #12
 8005662:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8005666:	801a      	strh	r2, [r3, #0]

		*cp++ = len;				/* Write length of component */
 8005668:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005672:	f107 020c 	add.w	r2, r7, #12
 8005676:	8812      	ldrh	r2, [r2, #0]
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 800567c:	f107 030c 	add.w	r3, r7, #12
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d031      	beq.n	80056ea <dns_makequery+0x182>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 8005686:	f107 030c 	add.w	r3, r7, #12
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	461a      	mov	r2, r3
 800568e:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8005692:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8005696:	f7fb f855 	bl	8000744 <strncpy>
		cp += len;
 800569a:	f107 030c 	add.w	r3, r7, #12
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80056a4:	4413      	add	r3, r2
 80056a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		if (cp1 == NULL)
 80056aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d107      	bne.n	80056c2 <dns_makequery+0x15a>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 80056b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80056bc:	2200      	movs	r2, #0
 80056be:	701a      	strb	r2, [r3, #0]
			break;
 80056c0:	e014      	b.n	80056ec <dns_makequery+0x184>
		}
		dname += len+1;
 80056c2:	f107 030c 	add.w	r3, r7, #12
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	3301      	adds	r3, #1
 80056ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80056ce:	4413      	add	r3, r2
 80056d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		dlen -= len+1;
 80056d4:	f107 030c 	add.w	r3, r7, #12
 80056d8:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
	}
 80056e8:	e7a5      	b.n	8005636 <dns_makequery+0xce>
		if (len == 0) break;
 80056ea:	bf00      	nop

	cp = put16(cp, 0x0001);				/* type */
 80056ec:	2101      	movs	r1, #1
 80056ee:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80056f2:	f7ff ff1f 	bl	8005534 <put16>
 80056f6:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	cp = put16(cp, 0x0001);				/* class */
 80056fa:	2101      	movs	r1, #1
 80056fc:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8005700:	f7ff ff18 	bl	8005534 <put16>
 8005704:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 8005708:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800570c:	1d3b      	adds	r3, r7, #4
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	b21b      	sxth	r3, r3
}
 8005714:	4618      	mov	r0, r3
 8005716:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800571a:	46bd      	mov	sp, r7
 800571c:	bd90      	pop	{r4, r7, pc}
 800571e:	bf00      	nop
 8005720:	20003680 	andcs	r3, r0, r0, lsl #13

08005724 <DNS_query>:
* Returns     : if succeeds : 1, fails : 0
* Note        :
********************************************************************************
*/
uint8_t DNS_query(uint8_t * dns_server, uint8_t * name, uint8_t * ip_from_dns)
{
 8005724:	b590      	push	{r4, r7, lr}
 8005726:	b08f      	sub	sp, #60	; 0x3c
 8005728:	af02      	add	r7, sp, #8
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;
	uint16_t dns_port;

	len = dns_makequery(0, (char *)name, dns_buf, MAX_DNS_BUF_SIZE);
 8005730:	4b3a      	ldr	r3, [pc, #232]	; (800581c <DNS_query+0xf8>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005738:	68b9      	ldr	r1, [r7, #8]
 800573a:	2000      	movs	r0, #0
 800573c:	f7ff ff14 	bl	8005568 <dns_makequery>
 8005740:	4603      	mov	r3, r0
 8005742:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, dns_buf, len, dns_server, IPPORT_DOMAIN);
 8005744:	4b36      	ldr	r3, [pc, #216]	; (8005820 <DNS_query+0xfc>)
 8005746:	7818      	ldrb	r0, [r3, #0]
 8005748:	4b34      	ldr	r3, [pc, #208]	; (800581c <DNS_query+0xf8>)
 800574a:	6819      	ldr	r1, [r3, #0]
 800574c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800574e:	2335      	movs	r3, #53	; 0x35
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f7fc fcb8 	bl	80020c8 <sendto>


	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8005758:	4b31      	ldr	r3, [pc, #196]	; (8005820 <DNS_query+0xfc>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	4618      	mov	r0, r3
 800575e:	f7fd fe99 	bl	8003494 <getSn_RX_RSR>
 8005762:	4603      	mov	r3, r0
 8005764:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005766:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005768:	2b00      	cmp	r3, #0
 800576a:	d020      	beq.n	80057ae <DNS_query+0x8a>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 800576c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800576e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005772:	d902      	bls.n	800577a <DNS_query+0x56>
 8005774:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005778:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, dns_buf, len, ip, &port);
 800577a:	4b29      	ldr	r3, [pc, #164]	; (8005820 <DNS_query+0xfc>)
 800577c:	7818      	ldrb	r0, [r3, #0]
 800577e:	4b27      	ldr	r3, [pc, #156]	; (800581c <DNS_query+0xf8>)
 8005780:	6819      	ldr	r1, [r3, #0]
 8005782:	f107 0414 	add.w	r4, r7, #20
 8005786:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005788:	f107 0312 	add.w	r3, r7, #18
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	4623      	mov	r3, r4
 8005790:	f7fc fd9e 	bl	80022d0 <recvfrom>
 8005794:	4603      	mov	r3, r0
 8005796:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 8005798:	bf00      	nop

			sendto(DNS_SOCKET, dns_buf, len, dns_server, IPPORT_DOMAIN);
		}
	}

	return(parseMSG(&dhp, dns_buf, ip_from_dns));	/* Convert to local format */
 800579a:	4b20      	ldr	r3, [pc, #128]	; (800581c <DNS_query+0xf8>)
 800579c:	6819      	ldr	r1, [r3, #0]
 800579e:	f107 0318 	add.w	r3, r7, #24
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff fe09 	bl	80053bc <parseMSG>
 80057aa:	4603      	mov	r3, r0
 80057ac:	e032      	b.n	8005814 <DNS_query+0xf0>
		ret_check_timeout = check_DNS_timeout();
 80057ae:	f000 f8a1 	bl	80058f4 <check_DNS_timeout>
 80057b2:	4603      	mov	r3, r0
 80057b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 80057b8:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80057bc:	2b00      	cmp	r3, #0
 80057be:	da01      	bge.n	80057c4 <DNS_query+0xa0>
			return 0; // timeout occurred
 80057c0:	2300      	movs	r3, #0
 80057c2:	e027      	b.n	8005814 <DNS_query+0xf0>
		else if (ret_check_timeout == 0) {
 80057c4:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1c5      	bne.n	8005758 <DNS_query+0x34>
			dns_port = rand() % 2000 + 63535; // 63535 ~ 65534
 80057cc:	f7fa fd96 	bl	80002fc <rand>
 80057d0:	4602      	mov	r2, r0
 80057d2:	4b14      	ldr	r3, [pc, #80]	; (8005824 <DNS_query+0x100>)
 80057d4:	fb83 1302 	smull	r1, r3, r3, r2
 80057d8:	11d9      	asrs	r1, r3, #7
 80057da:	17d3      	asrs	r3, r2, #31
 80057dc:	1acb      	subs	r3, r1, r3
 80057de:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80057e2:	fb01 f303 	mul.w	r3, r1, r3
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f2a3 73d1 	subw	r3, r3, #2001	; 0x7d1
 80057ee:	857b      	strh	r3, [r7, #42]	; 0x2a
			socket(DNS_SOCKET, Sn_MR_UDP, dns_port, 0);
 80057f0:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <DNS_query+0xfc>)
 80057f2:	7818      	ldrb	r0, [r3, #0]
 80057f4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80057f6:	2300      	movs	r3, #0
 80057f8:	2102      	movs	r1, #2
 80057fa:	f7fc f89f 	bl	800193c <socket>
			sendto(DNS_SOCKET, dns_buf, len, dns_server, IPPORT_DOMAIN);
 80057fe:	4b08      	ldr	r3, [pc, #32]	; (8005820 <DNS_query+0xfc>)
 8005800:	7818      	ldrb	r0, [r3, #0]
 8005802:	4b06      	ldr	r3, [pc, #24]	; (800581c <DNS_query+0xf8>)
 8005804:	6819      	ldr	r1, [r3, #0]
 8005806:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005808:	2335      	movs	r3, #53	; 0x35
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f7fc fc5b 	bl	80020c8 <sendto>
	}
 8005812:	e7a1      	b.n	8005758 <DNS_query+0x34>
}
 8005814:	4618      	mov	r0, r3
 8005816:	3734      	adds	r7, #52	; 0x34
 8005818:	46bd      	mov	sp, r7
 800581a:	bd90      	pop	{r4, r7, pc}
 800581c:	20003674 	andcs	r3, r0, r4, ror r6
 8005820:	20003678 	andcs	r3, r0, r8, ror r6
 8005824:	10624dd3 	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>

08005828 <DNS_init>:
* Note        :
********************************************************************************
*/

void DNS_init(uint8_t s, uint8_t * buf)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	4603      	mov	r3, r0
 8005830:	6039      	str	r1, [r7, #0]
 8005832:	71fb      	strb	r3, [r7, #7]
	uint16_t dns_port = 3000;
 8005834:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005838:	81fb      	strh	r3, [r7, #14]

	DNS_SOCKET = s; // SOCK_DNS
 800583a:	4a13      	ldr	r2, [pc, #76]	; (8005888 <DNS_init+0x60>)
 800583c:	79fb      	ldrb	r3, [r7, #7]
 800583e:	7013      	strb	r3, [r2, #0]
	dns_buf = buf; // User's shared buffer
 8005840:	4a12      	ldr	r2, [pc, #72]	; (800588c <DNS_init+0x64>)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6013      	str	r3, [r2, #0]
	MSG_ID = 0x1122;
 8005846:	4b12      	ldr	r3, [pc, #72]	; (8005890 <DNS_init+0x68>)
 8005848:	f241 1222 	movw	r2, #4386	; 0x1122
 800584c:	801a      	strh	r2, [r3, #0]

	// Generate random port number
	//srand(seed); users can use the seed value for make random variable.
	dns_port = rand() % 2000 + 63535; // 63535 ~ 65534
 800584e:	f7fa fd55 	bl	80002fc <rand>
 8005852:	4602      	mov	r2, r0
 8005854:	4b0f      	ldr	r3, [pc, #60]	; (8005894 <DNS_init+0x6c>)
 8005856:	fb83 1302 	smull	r1, r3, r3, r2
 800585a:	11d9      	asrs	r1, r3, #7
 800585c:	17d3      	asrs	r3, r2, #31
 800585e:	1acb      	subs	r3, r1, r3
 8005860:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005864:	fb01 f303 	mul.w	r3, r1, r3
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	b29b      	uxth	r3, r3
 800586c:	f2a3 73d1 	subw	r3, r3, #2001	; 0x7d1
 8005870:	81fb      	strh	r3, [r7, #14]
	// Socket open
	socket(DNS_SOCKET, Sn_MR_UDP, dns_port, 0);
 8005872:	4b05      	ldr	r3, [pc, #20]	; (8005888 <DNS_init+0x60>)
 8005874:	7818      	ldrb	r0, [r3, #0]
 8005876:	89fa      	ldrh	r2, [r7, #14]
 8005878:	2300      	movs	r3, #0
 800587a:	2102      	movs	r1, #2
 800587c:	f7fc f85e 	bl	800193c <socket>
}
 8005880:	bf00      	nop
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	20003678 	andcs	r3, r0, r8, ror r6
 800588c:	20003674 	andcs	r3, r0, r4, ror r6
 8005890:	20003680 	andcs	r3, r0, r0, lsl #13
 8005894:	10624dd3 	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>

08005898 <DNS_run>:
* Note        :
********************************************************************************
*/

uint8_t DNS_run(uint8_t * dns_server_1st, uint8_t * dns_server_2nd, uint8_t * name, uint8_t * ip_from_dns)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
 80058a4:	603b      	str	r3, [r7, #0]

#ifdef _DNS_DEBUG_
	printf("> DNS Query to Primary DNS Server : %d.%d.%d.%d\r\n", dns_server_1st[0], dns_server_1st[1], dns_server_1st[2], dns_server_1st[3]);
#endif

	ret = DNS_query(dns_server_1st, name, ip_from_dns);
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f7ff ff3a 	bl	8005724 <DNS_query>
 80058b0:	4603      	mov	r3, r0
 80058b2:	75fb      	strb	r3, [r7, #23]

	if(!ret) {
 80058b4:	7dfb      	ldrb	r3, [r7, #23]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10f      	bne.n	80058da <DNS_run+0x42>
		if(dns_server_2nd != 0) {
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00c      	beq.n	80058da <DNS_run+0x42>

#ifdef _DNS_DEBUG_
			printf("> DNS Query to Secondary DNS Server : %d.%d.%d.%d\r\n", dns_server_2nd[0], dns_server_2nd[1], dns_server_2nd[2], dns_server_2nd[3]);
#endif
			ret = DNS_query(dns_server_2nd, name, ip_from_dns);
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	6879      	ldr	r1, [r7, #4]
 80058c4:	68b8      	ldr	r0, [r7, #8]
 80058c6:	f7ff ff2d 	bl	8005724 <DNS_query>
 80058ca:	4603      	mov	r3, r0
 80058cc:	75fb      	strb	r3, [r7, #23]
			if(ret == 1) ret++;
 80058ce:	7dfb      	ldrb	r3, [r7, #23]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d102      	bne.n	80058da <DNS_run+0x42>
 80058d4:	7dfb      	ldrb	r3, [r7, #23]
 80058d6:	3301      	adds	r3, #1
 80058d8:	75fb      	strb	r3, [r7, #23]
		}
	}

	close(DNS_SOCKET);
 80058da:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <DNS_run+0x58>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fc f930 	bl	8001b44 <close>
	// Return value
	// 0 - both failed / 1 - primary success / 2 - secondary success (primary failed)
	return ret;
 80058e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20003678 	andcs	r3, r0, r8, ror r6

080058f4 <check_DNS_timeout>:
* Note        : timeout : retry count and timer both over.
********************************************************************************
*/

int8_t check_DNS_timeout(void)
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0
	static uint8_t retry_count;

	if(dns_time >= DNS_WAIT_TIME)
 80058f8:	4b0e      	ldr	r3, [pc, #56]	; (8005934 <check_DNS_timeout+0x40>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d914      	bls.n	800592a <check_DNS_timeout+0x36>
	{
		dns_time = 0;
 8005900:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <check_DNS_timeout+0x40>)
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 8005906:	4b0c      	ldr	r3, [pc, #48]	; (8005938 <check_DNS_timeout+0x44>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d905      	bls.n	800591a <check_DNS_timeout+0x26>
			retry_count = 0;
 800590e:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <check_DNS_timeout+0x44>)
 8005910:	2200      	movs	r2, #0
 8005912:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8005914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005918:	e008      	b.n	800592c <check_DNS_timeout+0x38>
		}
		retry_count++;
 800591a:	4b07      	ldr	r3, [pc, #28]	; (8005938 <check_DNS_timeout+0x44>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	3301      	adds	r3, #1
 8005920:	b2da      	uxtb	r2, r3
 8005922:	4b05      	ldr	r3, [pc, #20]	; (8005938 <check_DNS_timeout+0x44>)
 8005924:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 8005926:	2300      	movs	r3, #0
 8005928:	e000      	b.n	800592c <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 800592a:	2301      	movs	r3, #1
}
 800592c:	4618      	mov	r0, r3
 800592e:	46bd      	mov	sp, r7
 8005930:	bc80      	pop	{r7}
 8005932:	4770      	bx	lr
 8005934:	2000367c 	andcs	r3, r0, ip, ror r6
 8005938:	20000138 	andcs	r0, r0, r8, lsr r1

0800593c <DNS_timerHandler>:
* Returns    : None.
* Note       :
*********************************************************************************************************
*/
void DNS_timerHandler(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
	dns_time++;
 8005940:	4b04      	ldr	r3, [pc, #16]	; (8005954 <DNS_timerHandler+0x18>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3301      	adds	r3, #1
 8005946:	4a03      	ldr	r2, [pc, #12]	; (8005954 <DNS_timerHandler+0x18>)
 8005948:	6013      	str	r3, [r2, #0]
}
 800594a:	bf00      	nop
 800594c:	46bd      	mov	sp, r7
 800594e:	bc80      	pop	{r7}
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	2000367c 	andcs	r3, r0, ip, ror r6

08005958 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8005960:	4a05      	ldr	r2, [pc, #20]	; (8005978 <NVIC_PriorityGroupConfig+0x20>)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800596c:	60d3      	str	r3, [r2, #12]
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr
 8005978:	e000ed00 	and	lr, r0, r0, lsl #26

0800597c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8005984:	2300      	movs	r3, #0
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	2300      	movs	r3, #0
 800598a:	613b      	str	r3, [r7, #16]
 800598c:	230f      	movs	r3, #15
 800598e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	78db      	ldrb	r3, [r3, #3]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d03a      	beq.n	8005a0e <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8005998:	4b27      	ldr	r3, [pc, #156]	; (8005a38 <NVIC_Init+0xbc>)
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	43db      	mvns	r3, r3
 800599e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059a2:	0a1b      	lsrs	r3, r3, #8
 80059a4:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f1c3 0304 	rsb	r3, r3, #4
 80059ac:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	fa22 f303 	lsr.w	r3, r2, r3
 80059b6:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	461a      	mov	r2, r3
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	789b      	ldrb	r3, [r3, #2]
 80059ca:	461a      	mov	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4013      	ands	r3, r2
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	011b      	lsls	r3, r3, #4
 80059da:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80059dc:	4a17      	ldr	r2, [pc, #92]	; (8005a3c <NVIC_Init+0xc0>)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	6979      	ldr	r1, [r7, #20]
 80059e4:	b2c9      	uxtb	r1, r1
 80059e6:	4413      	add	r3, r2
 80059e8:	460a      	mov	r2, r1
 80059ea:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80059ee:	4a13      	ldr	r2, [pc, #76]	; (8005a3c <NVIC_Init+0xc0>)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	095b      	lsrs	r3, r3, #5
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	f003 031f 	and.w	r3, r3, #31
 8005a02:	2101      	movs	r1, #1
 8005a04:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005a08:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8005a0c:	e00f      	b.n	8005a2e <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005a0e:	490b      	ldr	r1, [pc, #44]	; (8005a3c <NVIC_Init+0xc0>)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	095b      	lsrs	r3, r3, #5
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	f003 031f 	and.w	r3, r3, #31
 8005a22:	2201      	movs	r2, #1
 8005a24:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005a26:	f100 0320 	add.w	r3, r0, #32
 8005a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005a2e:	bf00      	nop
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr
 8005a38:	e000ed00 	and	lr, r0, r0, lsl #26
 8005a3c:	e000e100 	and	lr, r0, r0, lsl #2

08005a40 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	4603      	mov	r3, r0
 8005a48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8005a4a:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <RCC_LSEConfig+0x3c>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8005a50:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <RCC_LSEConfig+0x3c>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8005a56:	79fb      	ldrb	r3, [r7, #7]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d002      	beq.n	8005a62 <RCC_LSEConfig+0x22>
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d004      	beq.n	8005a6a <RCC_LSEConfig+0x2a>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
 8005a60:	e007      	b.n	8005a72 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8005a62:	4b06      	ldr	r3, [pc, #24]	; (8005a7c <RCC_LSEConfig+0x3c>)
 8005a64:	2201      	movs	r2, #1
 8005a66:	701a      	strb	r2, [r3, #0]
      break;
 8005a68:	e003      	b.n	8005a72 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8005a6a:	4b04      	ldr	r3, [pc, #16]	; (8005a7c <RCC_LSEConfig+0x3c>)
 8005a6c:	2205      	movs	r2, #5
 8005a6e:	701a      	strb	r2, [r3, #0]
      break;            
 8005a70:	bf00      	nop
  }
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr
 8005a7c:	40021020 	andmi	r1, r2, r0, lsr #32

08005a80 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	4603      	mov	r3, r0
 8005a88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8005a8a:	4a04      	ldr	r2, [pc, #16]	; (8005a9c <RCC_LSICmd+0x1c>)
 8005a8c:	79fb      	ldrb	r3, [r7, #7]
 8005a8e:	6013      	str	r3, [r2, #0]
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bc80      	pop	{r7}
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	42420480 	submi	r0, r2, #128, 8	; 0x80000000

08005aa0 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8005aa8:	4905      	ldr	r1, [pc, #20]	; (8005ac0 <RCC_RTCCLKConfig+0x20>)
 8005aaa:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <RCC_RTCCLKConfig+0x20>)
 8005aac:	6a1a      	ldr	r2, [r3, #32]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	620b      	str	r3, [r1, #32]
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	40021000 	andmi	r1, r2, r0

08005ac4 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4603      	mov	r3, r0
 8005acc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8005ace:	4a04      	ldr	r2, [pc, #16]	; (8005ae0 <RCC_RTCCLKCmd+0x1c>)
 8005ad0:	79fb      	ldrb	r3, [r7, #7]
 8005ad2:	6013      	str	r3, [r2, #0]
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bc80      	pop	{r7}
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	4242043c 	submi	r0, r2, #60, 8	; 0x3c000000

08005ae4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	2300      	movs	r3, #0
 8005af2:	613b      	str	r3, [r7, #16]
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	2300      	movs	r3, #0
 8005afa:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8005afc:	4b4c      	ldr	r3, [pc, #304]	; (8005c30 <RCC_GetClocksFreq+0x14c>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f003 030c 	and.w	r3, r3, #12
 8005b04:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d007      	beq.n	8005b1c <RCC_GetClocksFreq+0x38>
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d009      	beq.n	8005b24 <RCC_GetClocksFreq+0x40>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d133      	bne.n	8005b7c <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a47      	ldr	r2, [pc, #284]	; (8005c34 <RCC_GetClocksFreq+0x150>)
 8005b18:	601a      	str	r2, [r3, #0]
      break;
 8005b1a:	e033      	b.n	8005b84 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a45      	ldr	r2, [pc, #276]	; (8005c34 <RCC_GetClocksFreq+0x150>)
 8005b20:	601a      	str	r2, [r3, #0]
      break;
 8005b22:	e02f      	b.n	8005b84 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8005b24:	4b42      	ldr	r3, [pc, #264]	; (8005c30 <RCC_GetClocksFreq+0x14c>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005b2c:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8005b2e:	4b40      	ldr	r3, [pc, #256]	; (8005c30 <RCC_GetClocksFreq+0x14c>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b36:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	0c9b      	lsrs	r3, r3, #18
 8005b3c:	3302      	adds	r3, #2
 8005b3e:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d106      	bne.n	8005b54 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	4a3b      	ldr	r2, [pc, #236]	; (8005c38 <RCC_GetClocksFreq+0x154>)
 8005b4a:	fb02 f203 	mul.w	r2, r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8005b52:	e017      	b.n	8005b84 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8005b54:	4b36      	ldr	r3, [pc, #216]	; (8005c30 <RCC_GetClocksFreq+0x14c>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d006      	beq.n	8005b6e <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	4a35      	ldr	r2, [pc, #212]	; (8005c38 <RCC_GetClocksFreq+0x154>)
 8005b64:	fb02 f203 	mul.w	r2, r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	601a      	str	r2, [r3, #0]
      break;
 8005b6c:	e00a      	b.n	8005b84 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	4a30      	ldr	r2, [pc, #192]	; (8005c34 <RCC_GetClocksFreq+0x150>)
 8005b72:	fb02 f203 	mul.w	r2, r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	601a      	str	r2, [r3, #0]
      break;
 8005b7a:	e003      	b.n	8005b84 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a2d      	ldr	r2, [pc, #180]	; (8005c34 <RCC_GetClocksFreq+0x150>)
 8005b80:	601a      	str	r2, [r3, #0]
      break;
 8005b82:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8005b84:	4b2a      	ldr	r3, [pc, #168]	; (8005c30 <RCC_GetClocksFreq+0x14c>)
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b8c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	091b      	lsrs	r3, r3, #4
 8005b92:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8005b94:	4a29      	ldr	r2, [pc, #164]	; (8005c3c <RCC_GetClocksFreq+0x158>)
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	4413      	add	r3, r2
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	40da      	lsrs	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8005bac:	4b20      	ldr	r3, [pc, #128]	; (8005c30 <RCC_GetClocksFreq+0x14c>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bb4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	0a1b      	lsrs	r3, r3, #8
 8005bba:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8005bbc:	4a1f      	ldr	r2, [pc, #124]	; (8005c3c <RCC_GetClocksFreq+0x158>)
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	40da      	lsrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8005bd4:	4b16      	ldr	r3, [pc, #88]	; (8005c30 <RCC_GetClocksFreq+0x14c>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005bdc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	0adb      	lsrs	r3, r3, #11
 8005be2:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8005be4:	4a15      	ldr	r2, [pc, #84]	; (8005c3c <RCC_GetClocksFreq+0x158>)
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	4413      	add	r3, r2
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	40da      	lsrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8005bfc:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <RCC_GetClocksFreq+0x14c>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c04:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	0b9b      	lsrs	r3, r3, #14
 8005c0a:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8005c0c:	4a0c      	ldr	r2, [pc, #48]	; (8005c40 <RCC_GetClocksFreq+0x15c>)
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	4413      	add	r3, r2
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	611a      	str	r2, [r3, #16]
}
 8005c26:	bf00      	nop
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bc80      	pop	{r7}
 8005c2e:	4770      	bx	lr
 8005c30:	40021000 	andmi	r1, r2, r0
 8005c34:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8005c38:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8005c3c:	200000b8 	strhcs	r0, [r0], -r8
 8005c40:	200000c8 	andcs	r0, r0, r8, asr #1

08005c44 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d006      	beq.n	8005c64 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8005c56:	4909      	ldr	r1, [pc, #36]	; (8005c7c <RCC_APB2PeriphClockCmd+0x38>)
 8005c58:	4b08      	ldr	r3, [pc, #32]	; (8005c7c <RCC_APB2PeriphClockCmd+0x38>)
 8005c5a:	699a      	ldr	r2, [r3, #24]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8005c62:	e006      	b.n	8005c72 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8005c64:	4905      	ldr	r1, [pc, #20]	; (8005c7c <RCC_APB2PeriphClockCmd+0x38>)
 8005c66:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <RCC_APB2PeriphClockCmd+0x38>)
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	43db      	mvns	r3, r3
 8005c6e:	4013      	ands	r3, r2
 8005c70:	618b      	str	r3, [r1, #24]
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bc80      	pop	{r7}
 8005c7a:	4770      	bx	lr
 8005c7c:	40021000 	andmi	r1, r2, r0

08005c80 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d006      	beq.n	8005ca0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8005c92:	4909      	ldr	r1, [pc, #36]	; (8005cb8 <RCC_APB1PeriphClockCmd+0x38>)
 8005c94:	4b08      	ldr	r3, [pc, #32]	; (8005cb8 <RCC_APB1PeriphClockCmd+0x38>)
 8005c96:	69da      	ldr	r2, [r3, #28]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8005c9e:	e006      	b.n	8005cae <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8005ca0:	4905      	ldr	r1, [pc, #20]	; (8005cb8 <RCC_APB1PeriphClockCmd+0x38>)
 8005ca2:	4b05      	ldr	r3, [pc, #20]	; (8005cb8 <RCC_APB1PeriphClockCmd+0x38>)
 8005ca4:	69da      	ldr	r2, [r3, #28]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	43db      	mvns	r3, r3
 8005caa:	4013      	ands	r3, r2
 8005cac:	61cb      	str	r3, [r1, #28]
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bc80      	pop	{r7}
 8005cb6:	4770      	bx	lr
 8005cb8:	40021000 	andmi	r1, r2, r0

08005cbc <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d006      	beq.n	8005cdc <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8005cce:	4909      	ldr	r1, [pc, #36]	; (8005cf4 <RCC_APB1PeriphResetCmd+0x38>)
 8005cd0:	4b08      	ldr	r3, [pc, #32]	; (8005cf4 <RCC_APB1PeriphResetCmd+0x38>)
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8005cda:	e006      	b.n	8005cea <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8005cdc:	4905      	ldr	r1, [pc, #20]	; (8005cf4 <RCC_APB1PeriphResetCmd+0x38>)
 8005cde:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <RCC_APB1PeriphResetCmd+0x38>)
 8005ce0:	691a      	ldr	r2, [r3, #16]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	610b      	str	r3, [r1, #16]
}
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bc80      	pop	{r7}
 8005cf2:	4770      	bx	lr
 8005cf4:	40021000 	andmi	r1, r2, r0

08005cf8 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8005d02:	4a04      	ldr	r2, [pc, #16]	; (8005d14 <RCC_BackupResetCmd+0x1c>)
 8005d04:	79fb      	ldrb	r3, [r7, #7]
 8005d06:	6013      	str	r3, [r2, #0]
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bc80      	pop	{r7}
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	42420440 	submi	r0, r2, #64, 8	; 0x40000000

08005d18 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	4603      	mov	r3, r0
 8005d20:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8005d26:	2300      	movs	r3, #0
 8005d28:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8005d2e:	79fb      	ldrb	r3, [r7, #7]
 8005d30:	095b      	lsrs	r3, r3, #5
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d103      	bne.n	8005d44 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8005d3c:	4b12      	ldr	r3, [pc, #72]	; (8005d88 <RCC_GetFlagStatus+0x70>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	e009      	b.n	8005d58 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d103      	bne.n	8005d52 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8005d4a:	4b0f      	ldr	r3, [pc, #60]	; (8005d88 <RCC_GetFlagStatus+0x70>)
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	e002      	b.n	8005d58 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8005d52:	4b0d      	ldr	r3, [pc, #52]	; (8005d88 <RCC_GetFlagStatus+0x70>)
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8005d58:	79fb      	ldrb	r3, [r7, #7]
 8005d5a:	f003 031f 	and.w	r3, r3, #31
 8005d5e:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	fa22 f303 	lsr.w	r3, r2, r3
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8005d70:	2301      	movs	r3, #1
 8005d72:	74fb      	strb	r3, [r7, #19]
 8005d74:	e001      	b.n	8005d7a <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8005d76:	2300      	movs	r3, #0
 8005d78:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 8005d7a:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	371c      	adds	r7, #28
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc80      	pop	{r7}
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40021000 	andmi	r1, r2, r0

08005d8c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b089      	sub	sp, #36	; 0x24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8005d96:	2300      	movs	r3, #0
 8005d98:	61fb      	str	r3, [r7, #28]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	613b      	str	r3, [r7, #16]
 8005d9e:	2300      	movs	r3, #0
 8005da0:	61bb      	str	r3, [r7, #24]
 8005da2:	2300      	movs	r3, #0
 8005da4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8005da6:	2300      	movs	r3, #0
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	2300      	movs	r3, #0
 8005dac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	78db      	ldrb	r3, [r3, #3]
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	78db      	ldrb	r3, [r3, #3]
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d005      	beq.n	8005dd0 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	789b      	ldrb	r3, [r3, #2]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d044      	beq.n	8005e64 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005de0:	2300      	movs	r3, #0
 8005de2:	61bb      	str	r3, [r7, #24]
 8005de4:	e038      	b.n	8005e58 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8005de6:	2201      	movs	r2, #1
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	fa02 f303 	lsl.w	r3, r2, r3
 8005dee:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	461a      	mov	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d126      	bne.n	8005e52 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8005e0a:	220f      	movs	r2, #15
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e12:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	43db      	mvns	r3, r3
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8005e1e:	69fa      	ldr	r2, [r7, #28]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	fa02 f303 	lsl.w	r3, r2, r3
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	78db      	ldrb	r3, [r3, #3]
 8005e30:	2b28      	cmp	r3, #40	; 0x28
 8005e32:	d105      	bne.n	8005e40 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8005e34:	2201      	movs	r2, #1
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	409a      	lsls	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	615a      	str	r2, [r3, #20]
 8005e3e:	e008      	b.n	8005e52 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	78db      	ldrb	r3, [r3, #3]
 8005e44:	2b48      	cmp	r3, #72	; 0x48
 8005e46:	d104      	bne.n	8005e52 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8005e48:	2201      	movs	r2, #1
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	409a      	lsls	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	3301      	adds	r3, #1
 8005e56:	61bb      	str	r3, [r7, #24]
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	2b07      	cmp	r3, #7
 8005e5c:	d9c3      	bls.n	8005de6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	2bff      	cmp	r3, #255	; 0xff
 8005e6a:	d946      	bls.n	8005efa <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005e72:	2300      	movs	r3, #0
 8005e74:	61bb      	str	r3, [r7, #24]
 8005e76:	e03a      	b.n	8005eee <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	3308      	adds	r3, #8
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e82:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d127      	bne.n	8005ee8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8005e9e:	220f      	movs	r2, #15
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	43db      	mvns	r3, r3
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8005eb2:	69fa      	ldr	r2, [r7, #28]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	78db      	ldrb	r3, [r3, #3]
 8005ec4:	2b28      	cmp	r3, #40	; 0x28
 8005ec6:	d105      	bne.n	8005ed4 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	3308      	adds	r3, #8
 8005ecc:	2201      	movs	r2, #1
 8005ece:	409a      	lsls	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	78db      	ldrb	r3, [r3, #3]
 8005ed8:	2b48      	cmp	r3, #72	; 0x48
 8005eda:	d105      	bne.n	8005ee8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	3308      	adds	r3, #8
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	409a      	lsls	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	3301      	adds	r3, #1
 8005eec:	61bb      	str	r3, [r7, #24]
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	2b07      	cmp	r3, #7
 8005ef2:	d9c1      	bls.n	8005e78 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	605a      	str	r2, [r3, #4]
  }
}
 8005efa:	bf00      	nop
 8005efc:	3724      	adds	r7, #36	; 0x24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bc80      	pop	{r7}
 8005f02:	4770      	bx	lr

08005f04 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8005f10:	887a      	ldrh	r2, [r7, #2]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	611a      	str	r2, [r3, #16]
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bc80      	pop	{r7}
 8005f1e:	4770      	bx	lr

08005f20 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8005f2c:	887a      	ldrh	r2, [r7, #2]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	615a      	str	r2, [r3, #20]
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bc80      	pop	{r7}
 8005f3a:	4770      	bx	lr

08005f3c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8005f50:	89fb      	ldrh	r3, [r7, #14]
 8005f52:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8005f56:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	881a      	ldrh	r2, [r3, #0]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	885b      	ldrh	r3, [r3, #2]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005f70:	4313      	orrs	r3, r2
 8005f72:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005f80:	4313      	orrs	r3, r2
 8005f82:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005f90:	4313      	orrs	r3, r2
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	89fb      	ldrh	r3, [r7, #14]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	89fa      	ldrh	r2, [r7, #14]
 8005f9e:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	8b9b      	ldrh	r3, [r3, #28]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	8a1a      	ldrh	r2, [r3, #16]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	821a      	strh	r2, [r3, #16]
}
 8005fb8:	bf00      	nop
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bc80      	pop	{r7}
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop

08005fc4 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	460b      	mov	r3, r1
 8005fce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005fd0:	78fb      	ldrb	r3, [r7, #3]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d008      	beq.n	8005fe8 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8005fe6:	e007      	b.n	8005ff8 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	801a      	strh	r2, [r3, #0]
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bc80      	pop	{r7}
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop

08006004 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	887a      	ldrh	r2, [r7, #2]
 8006014:	819a      	strh	r2, [r3, #12]
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr

08006020 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	899b      	ldrh	r3, [r3, #12]
 800602c:	b29b      	uxth	r3, r3
}
 800602e:	4618      	mov	r0, r3
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	bc80      	pop	{r7}
 8006036:	4770      	bx	lr

08006038 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8006044:	2300      	movs	r3, #0
 8006046:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	891b      	ldrh	r3, [r3, #8]
 800604c:	b29a      	uxth	r2, r3
 800604e:	887b      	ldrh	r3, [r7, #2]
 8006050:	4013      	ands	r3, r2
 8006052:	b29b      	uxth	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8006058:	2301      	movs	r3, #1
 800605a:	73fb      	strb	r3, [r7, #15]
 800605c:	e001      	b.n	8006062 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800605e:	2300      	movs	r3, #0
 8006060:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8006062:	7bfb      	ldrb	r3, [r7, #15]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	bc80      	pop	{r7}
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop

08006070 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800607a:	2300      	movs	r3, #0
 800607c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a2e      	ldr	r2, [pc, #184]	; (8006140 <TIM_TimeBaseInit+0xd0>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d013      	beq.n	80060b4 <TIM_TimeBaseInit+0x44>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a2d      	ldr	r2, [pc, #180]	; (8006144 <TIM_TimeBaseInit+0xd4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00f      	beq.n	80060b4 <TIM_TimeBaseInit+0x44>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609a:	d00b      	beq.n	80060b4 <TIM_TimeBaseInit+0x44>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a2a      	ldr	r2, [pc, #168]	; (8006148 <TIM_TimeBaseInit+0xd8>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d007      	beq.n	80060b4 <TIM_TimeBaseInit+0x44>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a29      	ldr	r2, [pc, #164]	; (800614c <TIM_TimeBaseInit+0xdc>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d003      	beq.n	80060b4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a28      	ldr	r2, [pc, #160]	; (8006150 <TIM_TimeBaseInit+0xe0>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d108      	bne.n	80060c6 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80060b4:	89fb      	ldrh	r3, [r7, #14]
 80060b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ba:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	885a      	ldrh	r2, [r3, #2]
 80060c0:	89fb      	ldrh	r3, [r7, #14]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a22      	ldr	r2, [pc, #136]	; (8006154 <TIM_TimeBaseInit+0xe4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00c      	beq.n	80060e8 <TIM_TimeBaseInit+0x78>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a21      	ldr	r2, [pc, #132]	; (8006158 <TIM_TimeBaseInit+0xe8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d008      	beq.n	80060e8 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80060d6:	89fb      	ldrh	r3, [r7, #14]
 80060d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060dc:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	88da      	ldrh	r2, [r3, #6]
 80060e2:	89fb      	ldrh	r3, [r7, #14]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	89fa      	ldrh	r2, [r7, #14]
 80060ec:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	889a      	ldrh	r2, [r3, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	881a      	ldrh	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a0f      	ldr	r2, [pc, #60]	; (8006140 <TIM_TimeBaseInit+0xd0>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d00f      	beq.n	8006126 <TIM_TimeBaseInit+0xb6>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a0e      	ldr	r2, [pc, #56]	; (8006144 <TIM_TimeBaseInit+0xd4>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d00b      	beq.n	8006126 <TIM_TimeBaseInit+0xb6>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a12      	ldr	r2, [pc, #72]	; (800615c <TIM_TimeBaseInit+0xec>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d007      	beq.n	8006126 <TIM_TimeBaseInit+0xb6>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a11      	ldr	r2, [pc, #68]	; (8006160 <TIM_TimeBaseInit+0xf0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d003      	beq.n	8006126 <TIM_TimeBaseInit+0xb6>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a10      	ldr	r2, [pc, #64]	; (8006164 <TIM_TimeBaseInit+0xf4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d104      	bne.n	8006130 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	7a1b      	ldrb	r3, [r3, #8]
 800612a:	b29a      	uxth	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	829a      	strh	r2, [r3, #20]
}
 8006136:	bf00      	nop
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	bc80      	pop	{r7}
 800613e:	4770      	bx	lr
 8006140:	40012c00 	andmi	r2, r1, r0, lsl #24
 8006144:	40013400 	andmi	r3, r1, r0, lsl #8
 8006148:	40000400 	andmi	r0, r0, r0, lsl #8
 800614c:	40000800 	andmi	r0, r0, r0, lsl #16
 8006150:	40000c00 	andmi	r0, r0, r0, lsl #24
 8006154:	40001000 	andmi	r1, r0, r0
 8006158:	40001400 	andmi	r1, r0, r0, lsl #8
 800615c:	40014000 	andmi	r4, r1, r0
 8006160:	40014400 	andmi	r4, r1, r0, lsl #8
 8006164:	40014800 	andmi	r4, r1, r0, lsl #16

08006168 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d008      	beq.n	800618c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	f043 0301 	orr.w	r3, r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 800618a:	e007      	b.n	800619c <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	b29b      	uxth	r3, r3
 8006192:	f023 0301 	bic.w	r3, r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	801a      	strh	r2, [r3, #0]
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bc80      	pop	{r7}
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop

080061a8 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	807b      	strh	r3, [r7, #2]
 80061b4:	4613      	mov	r3, r2
 80061b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80061b8:	787b      	ldrb	r3, [r7, #1]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d008      	beq.n	80061d0 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	899b      	ldrh	r3, [r3, #12]
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	887b      	ldrh	r3, [r7, #2]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80061ce:	e009      	b.n	80061e4 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	899b      	ldrh	r3, [r3, #12]
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	887b      	ldrh	r3, [r7, #2]
 80061d8:	43db      	mvns	r3, r3
 80061da:	b29b      	uxth	r3, r3
 80061dc:	4013      	ands	r3, r2
 80061de:	b29a      	uxth	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	819a      	strh	r2, [r3, #12]
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bc80      	pop	{r7}
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop

080061f0 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	460b      	mov	r3, r1
 80061fa:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80061fc:	2300      	movs	r3, #0
 80061fe:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8006200:	2300      	movs	r3, #0
 8006202:	81bb      	strh	r3, [r7, #12]
 8006204:	2300      	movs	r3, #0
 8006206:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	8a1b      	ldrh	r3, [r3, #16]
 800620c:	b29a      	uxth	r2, r3
 800620e:	887b      	ldrh	r3, [r7, #2]
 8006210:	4013      	ands	r3, r2
 8006212:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	899b      	ldrh	r3, [r3, #12]
 8006218:	b29a      	uxth	r2, r3
 800621a:	887b      	ldrh	r3, [r7, #2]
 800621c:	4013      	ands	r3, r2
 800621e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8006220:	89bb      	ldrh	r3, [r7, #12]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d005      	beq.n	8006232 <TIM_GetITStatus+0x42>
 8006226:	897b      	ldrh	r3, [r7, #10]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 800622c:	2301      	movs	r3, #1
 800622e:	73fb      	strb	r3, [r7, #15]
 8006230:	e001      	b.n	8006236 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8006232:	2300      	movs	r3, #0
 8006234:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006236:	7bfb      	ldrb	r3, [r7, #15]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	bc80      	pop	{r7}
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop

08006244 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	460b      	mov	r3, r1
 800624e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8006250:	887b      	ldrh	r3, [r7, #2]
 8006252:	43db      	mvns	r3, r3
 8006254:	b29a      	uxth	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	821a      	strh	r2, [r3, #16]
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr

08006264 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a0e      	ldr	r2, [pc, #56]	; (80062a8 <I2C_DeInit+0x44>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d10a      	bne.n	800628a <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8006274:	2101      	movs	r1, #1
 8006276:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800627a:	f7ff fd1f 	bl	8005cbc <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 800627e:	2100      	movs	r1, #0
 8006280:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006284:	f7ff fd1a 	bl	8005cbc <RCC_APB1PeriphResetCmd>
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
  }
}
 8006288:	e009      	b.n	800629e <I2C_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800628a:	2101      	movs	r1, #1
 800628c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8006290:	f7ff fd14 	bl	8005cbc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8006294:	2100      	movs	r1, #0
 8006296:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800629a:	f7ff fd0f 	bl	8005cbc <RCC_APB1PeriphResetCmd>
}
 800629e:	bf00      	nop
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	40005400 	andmi	r5, r0, r0, lsl #8

080062ac <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b08a      	sub	sp, #40	; 0x28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80062b6:	2300      	movs	r3, #0
 80062b8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80062ba:	2300      	movs	r3, #0
 80062bc:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80062be:	2304      	movs	r3, #4
 80062c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80062c2:	4b57      	ldr	r3, [pc, #348]	; (8006420 <I2C_Init+0x174>)
 80062c4:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	889b      	ldrh	r3, [r3, #4]
 80062ca:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 80062cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062d2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80062d4:	f107 0308 	add.w	r3, r7, #8
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff fc03 	bl	8005ae4 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	4a4f      	ldr	r2, [pc, #316]	; (8006424 <I2C_Init+0x178>)
 80062e6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ea:	0c9b      	lsrs	r3, r3, #18
 80062ec:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80062ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80062f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062f2:	4313      	orrs	r3, r2
 80062f4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80062fa:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	b29b      	uxth	r3, r3
 8006302:	f023 0301 	bic.w	r3, r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 800630c:	2300      	movs	r3, #0
 800630e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a44      	ldr	r2, [pc, #272]	; (8006428 <I2C_Init+0x17c>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d815      	bhi.n	8006346 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	69fa      	ldr	r2, [r7, #28]
 8006322:	fbb2 f3f3 	udiv	r3, r2, r3
 8006326:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8006328:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800632a:	2b03      	cmp	r3, #3
 800632c:	d801      	bhi.n	8006332 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800632e:	2304      	movs	r3, #4
 8006330:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8006332:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006334:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006336:	4313      	orrs	r3, r2
 8006338:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800633a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800633c:	3301      	adds	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	841a      	strh	r2, [r3, #32]
 8006344:	e040      	b.n	80063c8 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	88db      	ldrh	r3, [r3, #6]
 800634a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800634e:	4293      	cmp	r3, r2
 8006350:	d109      	bne.n	8006366 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	4613      	mov	r3, r2
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	4413      	add	r3, r2
 800635c:	69fa      	ldr	r2, [r7, #28]
 800635e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006362:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006364:	e00e      	b.n	8006384 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	009a      	lsls	r2, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	69fa      	ldr	r2, [r7, #28]
 8006376:	fbb2 f3f3 	udiv	r3, r2, r3
 800637a:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800637c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800637e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006382:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 8006384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800638a:	2b00      	cmp	r3, #0
 800638c:	d103      	bne.n	8006396 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800638e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006390:	f043 0301 	orr.w	r3, r3, #1
 8006394:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 8006396:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006398:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800639a:	4313      	orrs	r3, r2
 800639c:	b29b      	uxth	r3, r3
 800639e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063a6:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80063a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80063ae:	fb02 f303 	mul.w	r3, r2, r3
 80063b2:	4a1e      	ldr	r2, [pc, #120]	; (800642c <I2C_Init+0x180>)
 80063b4:	fb82 1203 	smull	r1, r2, r2, r3
 80063b8:	1192      	asrs	r2, r2, #6
 80063ba:	17db      	asrs	r3, r3, #31
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	b29b      	uxth	r3, r3
 80063c0:	3301      	adds	r3, #1
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80063cc:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f043 0301 	orr.w	r3, r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 80063e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063e6:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80063ea:	f023 0302 	bic.w	r3, r3, #2
 80063ee:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	889a      	ldrh	r2, [r3, #4]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	895b      	ldrh	r3, [r3, #10]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063fe:	4313      	orrs	r3, r2
 8006400:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006406:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	899a      	ldrh	r2, [r3, #12]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	891b      	ldrh	r3, [r3, #8]
 8006410:	4313      	orrs	r3, r2
 8006412:	b29a      	uxth	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	811a      	strh	r2, [r3, #8]
}
 8006418:	bf00      	nop
 800641a:	3728      	adds	r7, #40	; 0x28
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8006424:	431bde83 	tstmi	fp, #2096	; 0x830
 8006428:	000186a0 	andeq	r8, r1, r0, lsr #13
 800642c:	10624dd3 	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>

08006430 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800643c:	78fb      	ldrb	r3, [r7, #3]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d008      	beq.n	8006454 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	b29b      	uxth	r3, r3
 8006448:	f043 0301 	orr.w	r3, r3, #1
 800644c:	b29a      	uxth	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 8006452:	e007      	b.n	8006464 <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	b29b      	uxth	r3, r3
 800645a:	f023 0301 	bic.w	r3, r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	801a      	strh	r2, [r3, #0]
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	bc80      	pop	{r7}
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop

08006470 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d008      	beq.n	8006494 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	b29b      	uxth	r3, r3
 8006488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800648c:	b29a      	uxth	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 8006492:	e007      	b.n	80064a4 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	b29b      	uxth	r3, r3
 800649a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800649e:	b29a      	uxth	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	801a      	strh	r2, [r3, #0]
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bc80      	pop	{r7}
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop

080064b0 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	460b      	mov	r3, r1
 80064ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80064bc:	78fb      	ldrb	r3, [r7, #3]
 80064be:	b29a      	uxth	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	821a      	strh	r2, [r3, #16]
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bc80      	pop	{r7}
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop

080064d0 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	460b      	mov	r3, r1
 80064da:	70fb      	strb	r3, [r7, #3]
 80064dc:	4613      	mov	r3, r2
 80064de:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80064e0:	78bb      	ldrb	r3, [r7, #2]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 80064e6:	78fb      	ldrb	r3, [r7, #3]
 80064e8:	f043 0301 	orr.w	r3, r3, #1
 80064ec:	70fb      	strb	r3, [r7, #3]
 80064ee:	e003      	b.n	80064f8 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	f023 0301 	bic.w	r3, r3, #1
 80064f6:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	821a      	strh	r2, [r3, #16]
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	bc80      	pop	{r7}
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop

0800650c <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d108      	bne.n	8006530 <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= CR1_NOSTRETCH_Set;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	b29b      	uxth	r3, r3
 8006524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006528:	b29a      	uxth	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= CR1_NOSTRETCH_Reset;
  }
}
 800652e:	e007      	b.n	8006540 <I2C_StretchClockCmd+0x34>
    I2Cx->CR1 &= CR1_NOSTRETCH_Reset;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	881b      	ldrh	r3, [r3, #0]
 8006534:	b29b      	uxth	r3, r3
 8006536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800653a:	b29a      	uxth	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	801a      	strh	r2, [r3, #0]
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	bc80      	pop	{r7}
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop

0800654c <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8006556:	2300      	movs	r3, #0
 8006558:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	2300      	movs	r3, #0
 8006560:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8006562:	2300      	movs	r3, #0
 8006564:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	8a9b      	ldrh	r3, [r3, #20]
 800656a:	b29b      	uxth	r3, r3
 800656c:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	8b1b      	ldrh	r3, [r3, #24]
 8006572:	b29b      	uxth	r3, r3
 8006574:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	041b      	lsls	r3, r3, #16
 800657a:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	4313      	orrs	r3, r2
 8006582:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006586:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	401a      	ands	r2, r3
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	429a      	cmp	r2, r3
 8006592:	d102      	bne.n	800659a <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8006594:	2301      	movs	r3, #1
 8006596:	75fb      	strb	r3, [r7, #23]
 8006598:	e001      	b.n	800659e <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800659a:	2300      	movs	r3, #0
 800659c:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 800659e:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	371c      	adds	r7, #28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop

080065ac <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80065b6:	2300      	movs	r3, #0
 80065b8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	613b      	str	r3, [r7, #16]
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	0f1b      	lsrs	r3, r3, #28
 80065ca:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80065d2:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3314      	adds	r3, #20
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	e005      	b.n	80065ee <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	0c1b      	lsrs	r3, r3, #16
 80065e6:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3318      	adds	r3, #24
 80065ec:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	4013      	ands	r3, r2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80065fa:	2301      	movs	r3, #1
 80065fc:	75fb      	strb	r3, [r7, #23]
 80065fe:	e001      	b.n	8006604 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8006600:	2300      	movs	r3, #0
 8006602:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8006604:	7dfb      	ldrb	r3, [r7, #23]
}
 8006606:	4618      	mov	r0, r3
 8006608:	371c      	adds	r7, #28
 800660a:	46bd      	mov	sp, r7
 800660c:	bc80      	pop	{r7}
 800660e:	4770      	bx	lr

08006610 <IWDG_WriteAccessCmd>:
  *     @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *     @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	4603      	mov	r3, r0
 8006618:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 800661a:	4a04      	ldr	r2, [pc, #16]	; (800662c <IWDG_WriteAccessCmd+0x1c>)
 800661c:	88fb      	ldrh	r3, [r7, #6]
 800661e:	6013      	str	r3, [r2, #0]
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	bc80      	pop	{r7}
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	40003000 	andmi	r3, r0, r0

08006630 <IWDG_SetPrescaler>:
  *     @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *     @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	4603      	mov	r3, r0
 8006638:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 800663a:	4a04      	ldr	r2, [pc, #16]	; (800664c <IWDG_SetPrescaler+0x1c>)
 800663c:	79fb      	ldrb	r3, [r7, #7]
 800663e:	6053      	str	r3, [r2, #4]
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	bc80      	pop	{r7}
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	40003000 	andmi	r3, r0, r0

08006650 <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *   This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	4603      	mov	r3, r0
 8006658:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 800665a:	4a04      	ldr	r2, [pc, #16]	; (800666c <IWDG_SetReload+0x1c>)
 800665c:	88fb      	ldrh	r3, [r7, #6]
 800665e:	6093      	str	r3, [r2, #8]
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	bc80      	pop	{r7}
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	40003000 	andmi	r3, r0, r0

08006670 <IWDG_ReloadCounter>:
  *   (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 8006670:	b480      	push	{r7}
 8006672:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_Reload;
 8006674:	4b03      	ldr	r3, [pc, #12]	; (8006684 <IWDG_ReloadCounter+0x14>)
 8006676:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800667a:	601a      	str	r2, [r3, #0]
}
 800667c:	bf00      	nop
 800667e:	46bd      	mov	sp, r7
 8006680:	bc80      	pop	{r7}
 8006682:	4770      	bx	lr
 8006684:	40003000 	andmi	r3, r0, r0

08006688 <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 8006688:	b480      	push	{r7}
 800668a:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_Enable;
 800668c:	4b03      	ldr	r3, [pc, #12]	; (800669c <IWDG_Enable+0x14>)
 800668e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006692:	601a      	str	r2, [r3, #0]
}
 8006694:	bf00      	nop
 8006696:	46bd      	mov	sp, r7
 8006698:	bc80      	pop	{r7}
 800669a:	4770      	bx	lr
 800669c:	40003000 	andmi	r3, r0, r0

080066a0 <DBGMCU_Config>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80066ac:	78fb      	ldrb	r3, [r7, #3]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d006      	beq.n	80066c0 <DBGMCU_Config+0x20>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 80066b2:	4909      	ldr	r1, [pc, #36]	; (80066d8 <DBGMCU_Config+0x38>)
 80066b4:	4b08      	ldr	r3, [pc, #32]	; (80066d8 <DBGMCU_Config+0x38>)
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	604b      	str	r3, [r1, #4]
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
  }
}
 80066be:	e006      	b.n	80066ce <DBGMCU_Config+0x2e>
    DBGMCU->CR &= ~DBGMCU_Periph;
 80066c0:	4905      	ldr	r1, [pc, #20]	; (80066d8 <DBGMCU_Config+0x38>)
 80066c2:	4b05      	ldr	r3, [pc, #20]	; (80066d8 <DBGMCU_Config+0x38>)
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	43db      	mvns	r3, r3
 80066ca:	4013      	ands	r3, r2
 80066cc:	604b      	str	r3, [r1, #4]
}
 80066ce:	bf00      	nop
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr
 80066d8:	e0042000 	and	r2, r4, r0

080066dc <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the RTC and backup registers.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	4603      	mov	r3, r0
 80066e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 80066e6:	4a04      	ldr	r2, [pc, #16]	; (80066f8 <PWR_BackupAccessCmd+0x1c>)
 80066e8:	79fb      	ldrb	r3, [r7, #7]
 80066ea:	6013      	str	r3, [r2, #0]
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bc80      	pop	{r7}
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	420e0020 	andmi	r0, lr, #32

080066fc <BKP_DeInit>:
  * @brief  Deinitializes the BKP peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void BKP_DeInit(void)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	af00      	add	r7, sp, #0
  RCC_BackupResetCmd(ENABLE);
 8006700:	2001      	movs	r0, #1
 8006702:	f7ff faf9 	bl	8005cf8 <RCC_BackupResetCmd>
  RCC_BackupResetCmd(DISABLE);
 8006706:	2000      	movs	r0, #0
 8006708:	f7ff faf6 	bl	8005cf8 <RCC_BackupResetCmd>
}
 800670c:	bf00      	nop
 800670e:	bd80      	pop	{r7, pc}

08006710 <RTC_EnterConfigMode>:
  * @brief  Enters the RTC configuration mode.
  * @param  None
  * @retval None
  */
void RTC_EnterConfigMode(void)
{
 8006710:	b480      	push	{r7}
 8006712:	af00      	add	r7, sp, #0
  /* Set the CNF flag to enter in the Configuration Mode */
  RTC->CRL |= RTC_CRL_CNF;
 8006714:	4a05      	ldr	r2, [pc, #20]	; (800672c <RTC_EnterConfigMode+0x1c>)
 8006716:	4b05      	ldr	r3, [pc, #20]	; (800672c <RTC_EnterConfigMode+0x1c>)
 8006718:	889b      	ldrh	r3, [r3, #4]
 800671a:	b29b      	uxth	r3, r3
 800671c:	f043 0310 	orr.w	r3, r3, #16
 8006720:	b29b      	uxth	r3, r3
 8006722:	8093      	strh	r3, [r2, #4]
}
 8006724:	bf00      	nop
 8006726:	46bd      	mov	sp, r7
 8006728:	bc80      	pop	{r7}
 800672a:	4770      	bx	lr
 800672c:	40002800 	andmi	r2, r0, r0, lsl #16

08006730 <RTC_ExitConfigMode>:
  * @brief  Exits from the RTC configuration mode.
  * @param  None
  * @retval None
  */
void RTC_ExitConfigMode(void)
{
 8006730:	b480      	push	{r7}
 8006732:	af00      	add	r7, sp, #0
  /* Reset the CNF flag to exit from the Configuration Mode */
  RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
 8006734:	4a05      	ldr	r2, [pc, #20]	; (800674c <RTC_ExitConfigMode+0x1c>)
 8006736:	4b05      	ldr	r3, [pc, #20]	; (800674c <RTC_ExitConfigMode+0x1c>)
 8006738:	889b      	ldrh	r3, [r3, #4]
 800673a:	b29b      	uxth	r3, r3
 800673c:	f023 0310 	bic.w	r3, r3, #16
 8006740:	b29b      	uxth	r3, r3
 8006742:	8093      	strh	r3, [r2, #4]
}
 8006744:	bf00      	nop
 8006746:	46bd      	mov	sp, r7
 8006748:	bc80      	pop	{r7}
 800674a:	4770      	bx	lr
 800674c:	40002800 	andmi	r2, r0, r0, lsl #16

08006750 <RTC_SetPrescaler>:
  * @brief  Sets the RTC prescaler value.
  * @param  PrescalerValue: RTC prescaler new value.
  * @retval None
  */
void RTC_SetPrescaler(uint32_t PrescalerValue)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_PRESCALER(PrescalerValue));
  
  RTC_EnterConfigMode();
 8006758:	f7ff ffda 	bl	8006710 <RTC_EnterConfigMode>
  /* Set RTC PRESCALER MSB word */
  RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
 800675c:	4a08      	ldr	r2, [pc, #32]	; (8006780 <RTC_SetPrescaler+0x30>)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	0c1b      	lsrs	r3, r3, #16
 8006762:	b29b      	uxth	r3, r3
 8006764:	f003 030f 	and.w	r3, r3, #15
 8006768:	b29b      	uxth	r3, r3
 800676a:	8113      	strh	r3, [r2, #8]
  /* Set RTC PRESCALER LSB word */
  RTC->PRLL = (PrescalerValue & RTC_LSB_MASK);
 800676c:	4b04      	ldr	r3, [pc, #16]	; (8006780 <RTC_SetPrescaler+0x30>)
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	b292      	uxth	r2, r2
 8006772:	819a      	strh	r2, [r3, #12]
  RTC_ExitConfigMode();
 8006774:	f7ff ffdc 	bl	8006730 <RTC_ExitConfigMode>
}
 8006778:	bf00      	nop
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	40002800 	andmi	r2, r0, r0, lsl #16

08006784 <RTC_WaitForLastTask>:
  * @note   This function must be called before any write to RTC registers.
  * @param  None
  * @retval None
  */
void RTC_WaitForLastTask(void)
{
 8006784:	b480      	push	{r7}
 8006786:	af00      	add	r7, sp, #0
  /* Loop until RTOFF flag is set */
  while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
 8006788:	bf00      	nop
 800678a:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <RTC_WaitForLastTask+0x1c>)
 800678c:	889b      	ldrh	r3, [r3, #4]
 800678e:	b29b      	uxth	r3, r3
 8006790:	f003 0320 	and.w	r3, r3, #32
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0f8      	beq.n	800678a <RTC_WaitForLastTask+0x6>
  {
  }
}
 8006798:	bf00      	nop
 800679a:	46bd      	mov	sp, r7
 800679c:	bc80      	pop	{r7}
 800679e:	4770      	bx	lr
 80067a0:	40002800 	andmi	r2, r0, r0, lsl #16

080067a4 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
}
 80067a8:	bf00      	nop
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bc80      	pop	{r7}
 80067ae:	4770      	bx	lr

080067b0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80067b0:	b480      	push	{r7}
 80067b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80067b4:	e7fe      	b.n	80067b4 <HardFault_Handler+0x4>
 80067b6:	bf00      	nop

080067b8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80067b8:	b480      	push	{r7}
 80067ba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80067bc:	e7fe      	b.n	80067bc <MemManage_Handler+0x4>
 80067be:	bf00      	nop

080067c0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80067c0:	b480      	push	{r7}
 80067c2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80067c4:	e7fe      	b.n	80067c4 <BusFault_Handler+0x4>
 80067c6:	bf00      	nop

080067c8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80067c8:	b480      	push	{r7}
 80067ca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80067cc:	e7fe      	b.n	80067cc <UsageFault_Handler+0x4>
 80067ce:	bf00      	nop

080067d0 <DMA1_Channel5_IRQHandler>:
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32f10x_xx.s).                                            */
/******************************************************************************/

void DMA1_Channel5_IRQHandler(void)
{
 80067d0:	b480      	push	{r7}
 80067d2:	af00      	add	r7, sp, #0

}
 80067d4:	bf00      	nop
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bc80      	pop	{r7}
 80067da:	4770      	bx	lr

080067dc <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler(void)
{
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0

}
 80067e0:	bf00      	nop
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr

080067e8 <TIM2_IRQHandler>:

/* 定时器2的中断函数 */
void TIM2_IRQHandler(void){
 80067e8:	b580      	push	{r7, lr}
 80067ea:	af00      	add	r7, sp, #0
  extern __IO uint32_t Timer2_Counter,Interval_counter;
  static uint32_t timeSecond = 0;
  if(TIM_GetITStatus(TIM2, TIM_IT_Update) == SET){
 80067ec:	2101      	movs	r1, #1
 80067ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80067f2:	f7ff fcfd 	bl	80061f0 <TIM_GetITStatus>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d11f      	bne.n	800683c <TIM2_IRQHandler+0x54>
    TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 80067fc:	2101      	movs	r1, #1
 80067fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006802:	f7ff fd1f 	bl	8006244 <TIM_ClearITPendingBit>
    // 调度dhcp超时函数
    if(++timeSecond > 999){
 8006806:	4b0e      	ldr	r3, [pc, #56]	; (8006840 <TIM2_IRQHandler+0x58>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3301      	adds	r3, #1
 800680c:	4a0c      	ldr	r2, [pc, #48]	; (8006840 <TIM2_IRQHandler+0x58>)
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <TIM2_IRQHandler+0x58>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006818:	d306      	bcc.n	8006828 <TIM2_IRQHandler+0x40>
    	timeSecond = 0;
 800681a:	4b09      	ldr	r3, [pc, #36]	; (8006840 <TIM2_IRQHandler+0x58>)
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]
    	DHCP_timerHandler();
 8006820:	f7fe fafa 	bl	8004e18 <DHCP_timerHandler>
    	DNS_timerHandler();
 8006824:	f7ff f88a 	bl	800593c <DNS_timerHandler>
    }

    Timer2_Counter++;
 8006828:	4b06      	ldr	r3, [pc, #24]	; (8006844 <TIM2_IRQHandler+0x5c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3301      	adds	r3, #1
 800682e:	4a05      	ldr	r2, [pc, #20]	; (8006844 <TIM2_IRQHandler+0x5c>)
 8006830:	6013      	str	r3, [r2, #0]
    Interval_counter++;
 8006832:	4b05      	ldr	r3, [pc, #20]	; (8006848 <TIM2_IRQHandler+0x60>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3301      	adds	r3, #1
 8006838:	4a03      	ldr	r2, [pc, #12]	; (8006848 <TIM2_IRQHandler+0x60>)
 800683a:	6013      	str	r3, [r2, #0]
  }
}
 800683c:	bf00      	nop
 800683e:	bd80      	pop	{r7, pc}
 8006840:	2000013c 	andcs	r0, r0, ip, lsr r1
 8006844:	20000144 	andcs	r0, r0, r4, asr #2
 8006848:	20000140 	andcs	r0, r0, r0, asr #2

0800684c <SPI2_IRQHandler>:

void SPI2_IRQHandler(void){
 800684c:	b480      	push	{r7}
 800684e:	af00      	add	r7, sp, #0
}
 8006850:	bf00      	nop
 8006852:	46bd      	mov	sp, r7
 8006854:	bc80      	pop	{r7}
 8006856:	4770      	bx	lr

08006858 <Init_i2c1_oled>:
 */

#include "stm32f10x.h"
#include "initialize.h"

void Init_i2c1_oled(void){
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef OLED_GPIO_InitStructure;
    I2C_InitTypeDef OLED_I2C_InitStructure;
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
 800685e:	2101      	movs	r1, #1
 8006860:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8006864:	f7ff fa0c 	bl	8005c80 <RCC_APB1PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8006868:	2101      	movs	r1, #1
 800686a:	2008      	movs	r0, #8
 800686c:	f7ff f9ea 	bl	8005c44 <RCC_APB2PeriphClockCmd>
    OLED_GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 8006870:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006874:	82bb      	strh	r3, [r7, #20]
    OLED_GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8006876:	2301      	movs	r3, #1
 8006878:	75bb      	strb	r3, [r7, #22]
    OLED_GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 800687a:	231c      	movs	r3, #28
 800687c:	75fb      	strb	r3, [r7, #23]
    GPIO_Init(GPIOB, &OLED_GPIO_InitStructure);
 800687e:	f107 0314 	add.w	r3, r7, #20
 8006882:	4619      	mov	r1, r3
 8006884:	4812      	ldr	r0, [pc, #72]	; (80068d0 <Init_i2c1_oled+0x78>)
 8006886:	f7ff fa81 	bl	8005d8c <GPIO_Init>

    I2C_DeInit(I2C2); //这句一定要加
 800688a:	4812      	ldr	r0, [pc, #72]	; (80068d4 <Init_i2c1_oled+0x7c>)
 800688c:	f7ff fcea 	bl	8006264 <I2C_DeInit>
    OLED_I2C_InitStructure.I2C_ClockSpeed = 270000;
 8006890:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <Init_i2c1_oled+0x80>)
 8006892:	607b      	str	r3, [r7, #4]
    OLED_I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8006894:	2300      	movs	r3, #0
 8006896:	813b      	strh	r3, [r7, #8]
    OLED_I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_16_9;
 8006898:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800689c:	817b      	strh	r3, [r7, #10]
    OLED_I2C_InitStructure.I2C_OwnAddress1 = 0x45;
 800689e:	2345      	movs	r3, #69	; 0x45
 80068a0:	81bb      	strh	r3, [r7, #12]
    OLED_I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80068a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068a6:	81fb      	strh	r3, [r7, #14]
    OLED_I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit; //响应七位地址
 80068a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068ac:	823b      	strh	r3, [r7, #16]
    I2C_Init(I2C2, &OLED_I2C_InitStructure);
 80068ae:	1d3b      	adds	r3, r7, #4
 80068b0:	4619      	mov	r1, r3
 80068b2:	4808      	ldr	r0, [pc, #32]	; (80068d4 <Init_i2c1_oled+0x7c>)
 80068b4:	f7ff fcfa 	bl	80062ac <I2C_Init>
    /* 启动时钟拉长 */
    I2C_StretchClockCmd(I2C2, ENABLE);
 80068b8:	2101      	movs	r1, #1
 80068ba:	4806      	ldr	r0, [pc, #24]	; (80068d4 <Init_i2c1_oled+0x7c>)
 80068bc:	f7ff fe26 	bl	800650c <I2C_StretchClockCmd>
    I2C_Cmd(I2C2, ENABLE);
 80068c0:	2101      	movs	r1, #1
 80068c2:	4804      	ldr	r0, [pc, #16]	; (80068d4 <Init_i2c1_oled+0x7c>)
 80068c4:	f7ff fdb4 	bl	8006430 <I2C_Cmd>
}
 80068c8:	bf00      	nop
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	40010c00 	andmi	r0, r1, r0, lsl #24
 80068d4:	40005800 	andmi	r5, r0, r0, lsl #16
 80068d8:	00041eb0 			; <UNDEFINED> instruction: 0x00041eb0

080068dc <Init_led_lock>:

// 蓝色灯泡引脚和锁控制引脚
void Init_led_lock(void){
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80068e2:	2101      	movs	r1, #1
 80068e4:	2008      	movs	r0, #8
 80068e6:	f7ff f9ad 	bl	8005c44 <RCC_APB2PeriphClockCmd>
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 80068ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80068ee:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;  	
 80068f0:	2310      	movs	r3, #16
 80068f2:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  
 80068f4:	2303      	movs	r3, #3
 80068f6:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 80068f8:	1d3b      	adds	r3, r7, #4
 80068fa:	4619      	mov	r1, r3
 80068fc:	4808      	ldr	r0, [pc, #32]	; (8006920 <Init_led_lock+0x44>)
 80068fe:	f7ff fa45 	bl	8005d8c <GPIO_Init>
    // 熄灭灯
    GPIO_SetBits(GPIOB, GPIO_Pin_9);
 8006902:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006906:	4806      	ldr	r0, [pc, #24]	; (8006920 <Init_led_lock+0x44>)
 8006908:	f7ff fafc 	bl	8005f04 <GPIO_SetBits>
    GPIO_ResetBits(GPIOB, GPIO_Pin_8);  //开锁
 800690c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006910:	4803      	ldr	r0, [pc, #12]	; (8006920 <Init_led_lock+0x44>)
 8006912:	f7ff fb05 	bl	8005f20 <GPIO_ResetBits>
}
 8006916:	bf00      	nop
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	40010c00 	andmi	r0, r1, r0, lsl #24

08006924 <Init_spi1_w5500>:

//w5500网卡
void Init_spi1_w5500(void){
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
    SPI_InitTypeDef SPI_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;
    /* 打开SPI1外设和GPIOA的时钟 */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1 | RCC_APB2Periph_GPIOA , ENABLE);
 800692a:	2101      	movs	r1, #1
 800692c:	f241 0004 	movw	r0, #4100	; 0x1004
 8006930:	f7ff f988 	bl	8005c44 <RCC_APB2PeriphClockCmd>
     6.PA3=>W5500_RST,Output Push-pull
     7.PA11=>W5500_INT,上拉输入
     8.PA4=>W5500_SCS,推挽输出
    *****************/
    /* SPI1配置 */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_7;
 8006934:	23a0      	movs	r3, #160	; 0xa0
 8006936:	803b      	strh	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006938:	2303      	movs	r3, #3
 800693a:	70bb      	strb	r3, [r7, #2]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; 
 800693c:	2318      	movs	r3, #24
 800693e:	70fb      	strb	r3, [r7, #3]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8006940:	463b      	mov	r3, r7
 8006942:	4619      	mov	r1, r3
 8006944:	4826      	ldr	r0, [pc, #152]	; (80069e0 <Init_spi1_w5500+0xbc>)
 8006946:	f7ff fa21 	bl	8005d8c <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 800694a:	2340      	movs	r3, #64	; 0x40
 800694c:	803b      	strh	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800694e:	2303      	movs	r3, #3
 8006950:	70bb      	strb	r3, [r7, #2]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; 
 8006952:	2348      	movs	r3, #72	; 0x48
 8006954:	70fb      	strb	r3, [r7, #3]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8006956:	463b      	mov	r3, r7
 8006958:	4619      	mov	r1, r3
 800695a:	4821      	ldr	r0, [pc, #132]	; (80069e0 <Init_spi1_w5500+0xbc>)
 800695c:	f7ff fa16 	bl	8005d8c <GPIO_Init>

    /* W5500_RST引脚初始化配置(PA3) */
    GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_3 | GPIO_Pin_4;
 8006960:	2318      	movs	r3, #24
 8006962:	803b      	strh	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006964:	2303      	movs	r3, #3
 8006966:	70bb      	strb	r3, [r7, #2]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8006968:	2310      	movs	r3, #16
 800696a:	70fb      	strb	r3, [r7, #3]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 800696c:	463b      	mov	r3, r7
 800696e:	4619      	mov	r1, r3
 8006970:	481b      	ldr	r0, [pc, #108]	; (80069e0 <Init_spi1_w5500+0xbc>)
 8006972:	f7ff fa0b 	bl	8005d8c <GPIO_Init>
    GPIO_ResetBits(GPIOA, GPIO_Pin_3);//复位引脚拉低,复位
 8006976:	2108      	movs	r1, #8
 8006978:	4819      	ldr	r0, [pc, #100]	; (80069e0 <Init_spi1_w5500+0xbc>)
 800697a:	f7ff fad1 	bl	8005f20 <GPIO_ResetBits>

    /* W5500_INT引脚初始化配置(PA11) */	
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 800697e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006982:	803b      	strh	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006984:	2303      	movs	r3, #3
 8006986:	70bb      	strb	r3, [r7, #2]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8006988:	2348      	movs	r3, #72	; 0x48
 800698a:	70fb      	strb	r3, [r7, #3]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 800698c:	463b      	mov	r3, r7
 800698e:	4619      	mov	r1, r3
 8006990:	4813      	ldr	r0, [pc, #76]	; (80069e0 <Init_spi1_w5500+0xbc>)
 8006992:	f7ff f9fb 	bl	8005d8c <GPIO_Init>

    /* SPI1配置 */
    SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex; //双线全双工
 8006996:	2300      	movs	r3, #0
 8006998:	80bb      	strh	r3, [r7, #4]
    SPI_InitStructure.SPI_Mode = SPI_Mode_Master; //作为主机
 800699a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800699e:	80fb      	strh	r3, [r7, #6]
    SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b; //传输数据为8位
 80069a0:	2300      	movs	r3, #0
 80069a2:	813b      	strh	r3, [r7, #8]
    SPI_InitStructure.SPI_CPOL = SPI_CPOL_High; //时钟初始极性为高
 80069a4:	2302      	movs	r3, #2
 80069a6:	817b      	strh	r3, [r7, #10]
    SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge; //在第二个跳变同步，W5500总是在上升沿同步数据
 80069a8:	2301      	movs	r3, #1
 80069aa:	81bb      	strh	r3, [r7, #12]
    SPI_InitStructure.SPI_NSS = SPI_NSS_Soft; //软件管理NSS
 80069ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069b0:	81fb      	strh	r3, [r7, #14]
    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;//SPI_BaudRatePrescaler_2;
 80069b2:	2308      	movs	r3, #8
 80069b4:	823b      	strh	r3, [r7, #16]
    SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80069b6:	2300      	movs	r3, #0
 80069b8:	827b      	strh	r3, [r7, #18]
    SPI_InitStructure.SPI_CRCPolynomial = 7; //CRC
 80069ba:	2307      	movs	r3, #7
 80069bc:	82bb      	strh	r3, [r7, #20]
    SPI_Init(SPI1, &SPI_InitStructure);
 80069be:	1d3b      	adds	r3, r7, #4
 80069c0:	4619      	mov	r1, r3
 80069c2:	4808      	ldr	r0, [pc, #32]	; (80069e4 <Init_spi1_w5500+0xc0>)
 80069c4:	f7ff faba 	bl	8005f3c <SPI_Init>
    /* 启动SPI1 */
    SPI_Cmd(SPI1, ENABLE);
 80069c8:	2101      	movs	r1, #1
 80069ca:	4806      	ldr	r0, [pc, #24]	; (80069e4 <Init_spi1_w5500+0xc0>)
 80069cc:	f7ff fafa 	bl	8005fc4 <SPI_Cmd>
    GPIO_SetBits(GPIOA, GPIO_Pin_3);//复位引脚拉高,取消复位
 80069d0:	2108      	movs	r1, #8
 80069d2:	4803      	ldr	r0, [pc, #12]	; (80069e0 <Init_spi1_w5500+0xbc>)
 80069d4:	f7ff fa96 	bl	8005f04 <GPIO_SetBits>
}
 80069d8:	bf00      	nop
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	40010800 	andmi	r0, r1, r0, lsl #16
 80069e4:	40013000 	andmi	r3, r1, r0

080069e8 <Init_tim2_ms_base>:

// TIM2提供1ms时基
void Init_tim2_ms_base(void){
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
    /* 初始化TIM */
    NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80069ee:	231c      	movs	r3, #28
 80069f0:	703b      	strb	r3, [r7, #0]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 9;
 80069f2:	2309      	movs	r3, #9
 80069f4:	707b      	strb	r3, [r7, #1]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80069f6:	2300      	movs	r3, #0
 80069f8:	70bb      	strb	r3, [r7, #2]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80069fa:	2301      	movs	r3, #1
 80069fc:	70fb      	strb	r3, [r7, #3]
    NVIC_Init(&NVIC_InitStructure);
 80069fe:	463b      	mov	r3, r7
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fe ffbb 	bl	800597c <NVIC_Init>

    //使能Timer2时钟
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8006a06:	2101      	movs	r1, #1
 8006a08:	2001      	movs	r0, #1
 8006a0a:	f7ff f939 	bl	8005c80 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Period = 9;						//设置在下一个更新事件装入活动的自动重装载寄存器周期的值(计数到10为1ms)
 8006a0e:	2309      	movs	r3, #9
 8006a10:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_Prescaler = 7199;					//设置用来作为TIMx时钟频率除数的预分频值(10KHz的计数频率)
 8006a12:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8006a16:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;		//设置时钟分割:TDTS = TIM_CKD_DIV1
 8006a18:	2300      	movs	r3, #0
 8006a1a:	817b      	strh	r3, [r7, #10]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;	//TIM向上计数模式
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	80fb      	strh	r3, [r7, #6]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);				//根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位
 8006a20:	1d3b      	adds	r3, r7, #4
 8006a22:	4619      	mov	r1, r3
 8006a24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006a28:	f7ff fb22 	bl	8006070 <TIM_TimeBaseInit>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE); //使能TIM2指定的中断
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	2101      	movs	r1, #1
 8006a30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006a34:	f7ff fbb8 	bl	80061a8 <TIM_ITConfig>
	TIM_Cmd(TIM2, ENABLE); //使能TIMx外设
 8006a38:	2101      	movs	r1, #1
 8006a3a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006a3e:	f7ff fb93 	bl	8006168 <TIM_Cmd>
}
 8006a42:	bf00      	nop
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop

08006a4c <Init_iwdg_reset>:

// 独立看门狗，防止服务器连接意外断开
void Init_iwdg_reset(void){
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	af00      	add	r7, sp, #0
    // 使能独立看门狗使用的LSI时钟
    RCC_LSICmd(ENABLE);
 8006a50:	2001      	movs	r0, #1
 8006a52:	f7ff f815 	bl	8005a80 <RCC_LSICmd>
    // 等待时钟稳定
    while(RCC_GetFlagStatus(RCC_FLAG_LSIRDY) == RESET);
 8006a56:	bf00      	nop
 8006a58:	2061      	movs	r0, #97	; 0x61
 8006a5a:	f7ff f95d 	bl	8005d18 <RCC_GetFlagStatus>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d0f9      	beq.n	8006a58 <Init_iwdg_reset+0xc>
    // 在调试的时候暂停看门狗
    DBGMCU_Config(DBGMCU_IWDG_STOP, ENABLE);
 8006a64:	2101      	movs	r1, #1
 8006a66:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006a6a:	f7ff fe19 	bl	80066a0 <DBGMCU_Config>
    // 开启独立看门狗，使能访问
    IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);
 8006a6e:	f245 5055 	movw	r0, #21845	; 0x5555
 8006a72:	f7ff fdcd 	bl	8006610 <IWDG_WriteAccessCmd>
     * 设置预分频
     * 独立看门狗是内部一个独立的40KHz的震荡源提供频率
     * 记录时间为 = (时钟频率(40KHz) / 分频数)* IWDG_SetReload(t)
     * 最大记录时间 = (1/40K) * 256 * 0xFFF = 26.208秒
     */
    IWDG_SetPrescaler(IWDG_Prescaler_256);
 8006a76:	2006      	movs	r0, #6
 8006a78:	f7ff fdda 	bl	8006630 <IWDG_SetPrescaler>
    // 0x30D 等于 4.9984 秒，约为5秒
    IWDG_SetReload(0xFFF);
 8006a7c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8006a80:	f7ff fde6 	bl	8006650 <IWDG_SetReload>
    // 重置计数器
    IWDG_ReloadCounter();
 8006a84:	f7ff fdf4 	bl	8006670 <IWDG_ReloadCounter>
    // 启动看门狗
    IWDG_Enable();
 8006a88:	f7ff fdfe 	bl	8006688 <IWDG_Enable>
}
 8006a8c:	bf00      	nop
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <Init_RTC>:

/**
 * 实时时钟初始化
 */
void Init_RTC(void){
 8006a90:	b580      	push	{r7, lr}
 8006a92:	af00      	add	r7, sp, #0
	// 首先打开BKP和PWR
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_BKP|RCC_APB1Periph_PWR, ENABLE);
 8006a94:	2101      	movs	r1, #1
 8006a96:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
 8006a9a:	f7ff f8f1 	bl	8005c80 <RCC_APB1PeriphClockCmd>
	// 使能对BKP的访问
	PWR_BackupAccessCmd(ENABLE);
 8006a9e:	2001      	movs	r0, #1
 8006aa0:	f7ff fe1c 	bl	80066dc <PWR_BackupAccessCmd>
	BKP_DeInit();
 8006aa4:	f7ff fe2a 	bl	80066fc <BKP_DeInit>
	// 打开LSE时钟
	RCC_LSEConfig(RCC_LSE_ON);
 8006aa8:	2001      	movs	r0, #1
 8006aaa:	f7fe ffc9 	bl	8005a40 <RCC_LSEConfig>
	while(RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET);
 8006aae:	bf00      	nop
 8006ab0:	2041      	movs	r0, #65	; 0x41
 8006ab2:	f7ff f931 	bl	8005d18 <RCC_GetFlagStatus>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d0f9      	beq.n	8006ab0 <Init_RTC+0x20>
	// 配置RTC时钟
	RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);
 8006abc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006ac0:	f7fe ffee 	bl	8005aa0 <RCC_RTCCLKConfig>
	// 使能RTC
	RCC_RTCCLKCmd(ENABLE);
 8006ac4:	2001      	movs	r0, #1
 8006ac6:	f7fe fffd 	bl	8005ac4 <RCC_RTCCLKCmd>
	RTC_WaitForLastTask();
 8006aca:	f7ff fe5b 	bl	8006784 <RTC_WaitForLastTask>
	RTC_SetPrescaler(32767);	// 设置预分频值,时钟LSE:32768Hz,1秒
 8006ace:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8006ad2:	f7ff fe3d 	bl	8006750 <RTC_SetPrescaler>
}
 8006ad6:	bf00      	nop
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop

08006adc <wizchip_select>:
TaskHandle_t lockTask;
TaskHandle_t mainTask;
TaskHandle_t oledTask;

//W5500的片选信号 回调
static void wizchip_select(void){
 8006adc:	b580      	push	{r7, lr}
 8006ade:	af00      	add	r7, sp, #0
    GPIO_ResetBits(GPIOA, GPIO_Pin_4);//置W5500的SCS为低电平
 8006ae0:	2110      	movs	r1, #16
 8006ae2:	4802      	ldr	r0, [pc, #8]	; (8006aec <wizchip_select+0x10>)
 8006ae4:	f7ff fa1c 	bl	8005f20 <GPIO_ResetBits>
}
 8006ae8:	bf00      	nop
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40010800 	andmi	r0, r1, r0, lsl #16

08006af0 <wizchip_deselect>:
//W5500的片选信号 回调
static void wizchip_deselect(void){
 8006af0:	b580      	push	{r7, lr}
 8006af2:	af00      	add	r7, sp, #0
    GPIO_SetBits(GPIOA, GPIO_Pin_4);//置W5500的SCS为高电平
 8006af4:	2110      	movs	r1, #16
 8006af6:	4802      	ldr	r0, [pc, #8]	; (8006b00 <wizchip_deselect+0x10>)
 8006af8:	f7ff fa04 	bl	8005f04 <GPIO_SetBits>
}
 8006afc:	bf00      	nop
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40010800 	andmi	r0, r1, r0, lsl #16

08006b04 <wizchip_write>:

//向w5500 写一个字节，回调函数
static void wizchip_write(uint8_t wb){
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	71fb      	strb	r3, [r7, #7]
    //printf("W%02x ", wb);
    SPI_I2S_SendData(SPI1, wb);//写1个字节数据
 8006b0e:	79fb      	ldrb	r3, [r7, #7]
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	4619      	mov	r1, r3
 8006b14:	4807      	ldr	r0, [pc, #28]	; (8006b34 <wizchip_write+0x30>)
 8006b16:	f7ff fa75 	bl	8006004 <SPI_I2S_SendData>
    while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);//等待数据寄存器空
 8006b1a:	bf00      	nop
 8006b1c:	2102      	movs	r1, #2
 8006b1e:	4805      	ldr	r0, [pc, #20]	; (8006b34 <wizchip_write+0x30>)
 8006b20:	f7ff fa8a 	bl	8006038 <SPI_I2S_GetFlagStatus>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0f8      	beq.n	8006b1c <wizchip_write+0x18>
}
 8006b2a:	bf00      	nop
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	40013000 	andmi	r3, r1, r0

08006b38 <wizchip_read>:

//从w5500读一个字节，回调函数
static uint8_t wizchip_read(void){
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
    uint8_t i;
    i = SPI_I2S_ReceiveData(SPI1);//读取1个字节数据
 8006b3e:	4809      	ldr	r0, [pc, #36]	; (8006b64 <wizchip_read+0x2c>)
 8006b40:	f7ff fa6e 	bl	8006020 <SPI_I2S_ReceiveData>
 8006b44:	4603      	mov	r3, r0
 8006b46:	71fb      	strb	r3, [r7, #7]
    wizchip_write(0x00);//发送一个哑数据 !!!
 8006b48:	2000      	movs	r0, #0
 8006b4a:	f7ff ffdb 	bl	8006b04 <wizchip_write>
    i = SPI_I2S_ReceiveData(SPI1);//读取1个字节数据
 8006b4e:	4805      	ldr	r0, [pc, #20]	; (8006b64 <wizchip_read+0x2c>)
 8006b50:	f7ff fa66 	bl	8006020 <SPI_I2S_ReceiveData>
 8006b54:	4603      	mov	r3, r0
 8006b56:	71fb      	strb	r3, [r7, #7]
    //printf("R%02x ", i);
    return i;//读取1个字节数据
 8006b58:	79fb      	ldrb	r3, [r7, #7]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	40013000 	andmi	r3, r1, r0

08006b68 <DNSClient>:

//DNS 客户端，参数是域名，返回ip地址，失败返回0
uint8_t DNSClient(uint8_t *hostname, uint8_t ip_from_dns[]){
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
    uint8_t tmp = 0;
 8006b72:	2300      	movs	r3, #0
 8006b74:	73fb      	strb	r3, [r7, #15]
    /* DNS client initialization */
    xSemaphoreTake(socketLock, portMAX_DELAY);
 8006b76:	4b0f      	ldr	r3, [pc, #60]	; (8006bb4 <DNSClient+0x4c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f001 fbc6 	bl	8008310 <xQueueSemaphoreTake>
    DNS_init(SOCK_DNS, gDATABUF);
 8006b84:	490c      	ldr	r1, [pc, #48]	; (8006bb8 <DNSClient+0x50>)
 8006b86:	2006      	movs	r0, #6
 8006b88:	f7fe fe4e 	bl	8005828 <DNS_init>

    /* DNS query & response */
    tmp = DNS_run(gWIZNETINFO.dns, secondary_dns_server, hostname, ip_from_dns);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	490a      	ldr	r1, [pc, #40]	; (8006bbc <DNSClient+0x54>)
 8006b92:	480b      	ldr	r0, [pc, #44]	; (8006bc0 <DNSClient+0x58>)
 8006b94:	f7fe fe80 	bl	8005898 <DNS_run>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	73fb      	strb	r3, [r7, #15]
    xSemaphoreGive(socketLock);
 8006b9c:	4b05      	ldr	r3, [pc, #20]	; (8006bb4 <DNSClient+0x4c>)
 8006b9e:	6818      	ldr	r0, [r3, #0]
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	f001 fb09 	bl	80081bc <xQueueGenericSend>
    //tmp = DNS_run(gWIZNETINFO.dns, 0, hostname, ip_from_dns); // if you want to use only primary DNS server, second parameter set to 0
    return tmp;
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	200042f8 	strdcs	r4, [r0], -r8
 8006bb8:	20003af4 	strdcs	r3, [r0], -r4
 8006bbc:	200000e4 	andcs	r0, r0, r4, ror #1
 8006bc0:	200000de 	ldrdcs	r0, [r0], -lr

08006bc4 <mqtt_send_packet>:

static int mqtt_send_packet(void* socket_info, const void* buf, unsigned int count) {
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
    int32_t ret;uint8_t sn;
    sn = (int)socket_info;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	75fb      	strb	r3, [r7, #23]
    xSemaphoreTake(socketLock, portMAX_DELAY);
 8006bd4:	4b0d      	ldr	r3, [pc, #52]	; (8006c0c <mqtt_send_packet+0x48>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f001 fb97 	bl	8008310 <xQueueSemaphoreTake>
	ret = send(sn, (uint8_t *)buf, count);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	7dfb      	ldrb	r3, [r7, #23]
 8006be8:	68b9      	ldr	r1, [r7, #8]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fb f8bc 	bl	8001d68 <send>
 8006bf0:	6138      	str	r0, [r7, #16]
	xSemaphoreGive(socketLock);
 8006bf2:	4b06      	ldr	r3, [pc, #24]	; (8006c0c <mqtt_send_packet+0x48>)
 8006bf4:	6818      	ldr	r0, [r3, #0]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	f001 fade 	bl	80081bc <xQueueGenericSend>
	return ret;
 8006c00:	693b      	ldr	r3, [r7, #16]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	200042f8 	strdcs	r4, [r0], -r8

08006c10 <mqtt_read_packet>:

static int mqtt_read_packet(void){
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
    int total_bytes = 0, bytes_rcvd, packet_length;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
    uint8_t rem_len_bytes;  // 1~4
    uint16_t rem_len;   // 数据包中数据长度

	memset(packet_buffer, 0, sizeof(packet_buffer));
 8006c1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c1e:	2100      	movs	r1, #0
 8006c20:	4832      	ldr	r0, [pc, #200]	; (8006cec <mqtt_read_packet+0xdc>)
 8006c22:	f7f9 faeb 	bl	80001fc <memset>

	xSemaphoreTake(socketLock, portMAX_DELAY);
 8006c26:	4b32      	ldr	r3, [pc, #200]	; (8006cf0 <mqtt_read_packet+0xe0>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f001 fb6e 	bl	8008310 <xQueueSemaphoreTake>
	if((bytes_rcvd = recv(SOCK_MQTT, packet_buffer, MQTT_RCVBUFSIZE)) <= 0) {
 8006c34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c38:	492c      	ldr	r1, [pc, #176]	; (8006cec <mqtt_read_packet+0xdc>)
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	f7fb f98e 	bl	8001f5c <recv>
 8006c40:	60b8      	str	r0, [r7, #8]
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	dc09      	bgt.n	8006c5c <mqtt_read_packet+0x4c>
		xSemaphoreGive(socketLock);
 8006c48:	4b29      	ldr	r3, [pc, #164]	; (8006cf0 <mqtt_read_packet+0xe0>)
 8006c4a:	6818      	ldr	r0, [r3, #0]
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	2200      	movs	r2, #0
 8006c50:	2100      	movs	r1, #0
 8006c52:	f001 fab3 	bl	80081bc <xQueueGenericSend>
		return -1;
 8006c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c5a:	e042      	b.n	8006ce2 <mqtt_read_packet+0xd2>
    }
	xSemaphoreGive(socketLock);
 8006c5c:	4b24      	ldr	r3, [pc, #144]	; (8006cf0 <mqtt_read_packet+0xe0>)
 8006c5e:	6818      	ldr	r0, [r3, #0]
 8006c60:	2300      	movs	r3, #0
 8006c62:	2200      	movs	r2, #0
 8006c64:	2100      	movs	r1, #0
 8006c66:	f001 faa9 	bl	80081bc <xQueueGenericSend>

	total_bytes += bytes_rcvd;
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4413      	add	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]
	if (total_bytes < 2) return -1;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	dc02      	bgt.n	8006c7e <mqtt_read_packet+0x6e>
 8006c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c7c:	e031      	b.n	8006ce2 <mqtt_read_packet+0xd2>

    /* 获得帧中保存载荷数据长度的可变数据长度 */
    rem_len_bytes = mqtt_num_rem_len_bytes(packet_buffer);
 8006c7e:	481b      	ldr	r0, [pc, #108]	; (8006cec <mqtt_read_packet+0xdc>)
 8006c80:	f000 fd28 	bl	80076d4 <mqtt_num_rem_len_bytes>
 8006c84:	4603      	mov	r3, r0
 8006c86:	71fb      	strb	r3, [r7, #7]
	/* 获得载荷数据长度 */
    rem_len = mqtt_parse_rem_len(packet_buffer);
 8006c88:	4818      	ldr	r0, [pc, #96]	; (8006cec <mqtt_read_packet+0xdc>)
 8006c8a:	f000 fd4b 	bl	8007724 <mqtt_parse_rem_len>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	80bb      	strh	r3, [r7, #4]

	// 数据包总长度 = 载荷长度 + 1byte帧头 + 帧中表示载荷长度的可变数据长度
    packet_length = rem_len + rem_len_bytes + 1;
 8006c92:	88ba      	ldrh	r2, [r7, #4]
 8006c94:	79fb      	ldrb	r3, [r7, #7]
 8006c96:	4413      	add	r3, r2
 8006c98:	3301      	adds	r3, #1
 8006c9a:	603b      	str	r3, [r7, #0]
    // 判断数据长度是否大于缓冲区大小
    if(packet_length >= MQTT_RCVBUFSIZE) return -1;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ca2:	db19      	blt.n	8006cd8 <mqtt_read_packet+0xc8>
 8006ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ca8:	e01b      	b.n	8006ce2 <mqtt_read_packet+0xd2>

	while(total_bytes < packet_length){ //接收剩下的数据
		if((bytes_rcvd = recv(SOCK_MQTT, (packet_buffer+total_bytes), (MQTT_RCVBUFSIZE - total_bytes))) <= 0) return -1;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4a0f      	ldr	r2, [pc, #60]	; (8006cec <mqtt_read_packet+0xdc>)
 8006cae:	1899      	adds	r1, r3, r2
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	461a      	mov	r2, r3
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	f7fb f94d 	bl	8001f5c <recv>
 8006cc2:	60b8      	str	r0, [r7, #8]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	dc02      	bgt.n	8006cd0 <mqtt_read_packet+0xc0>
 8006cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cce:	e008      	b.n	8006ce2 <mqtt_read_packet+0xd2>
		total_bytes += bytes_rcvd;
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]
	while(total_bytes < packet_length){ //接收剩下的数据
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	dbe4      	blt.n	8006caa <mqtt_read_packet+0x9a>
	}

	return packet_length;
 8006ce0:	683b      	ldr	r3, [r7, #0]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	20003684 	andcs	r3, r0, r4, lsl #13
 8006cf0:	200042f8 	strdcs	r4, [r0], -r8

08006cf4 <main>:
static void vTask_Display(void * pvParameters);
static void vTask_DHCP(void * pvParameters);
static void vTask_LockOn(void * pvParameters);
//static void vTask_Main(void * pvParameters);

int main(void){
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af02      	add	r7, sp, #8
    uint8_t tmp = 0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	71fb      	strb	r3, [r7, #7]
    NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8006cfe:	f44f 7040 	mov.w	r0, #768	; 0x300
 8006d02:	f7fe fe29 	bl	8005958 <NVIC_PriorityGroupConfig>
    /* LED和锁 */
    Init_led_lock();
 8006d06:	f7ff fde9 	bl	80068dc <Init_led_lock>
    /* 产生时基 */
    Init_tim2_ms_base();
 8006d0a:	f7ff fe6d 	bl	80069e8 <Init_tim2_ms_base>
    /* OLED硬件初始化 */
    Init_i2c1_oled();
 8006d0e:	f7ff fda3 	bl	8006858 <Init_i2c1_oled>
    /* 初始化W5500 */
    Init_spi1_w5500();
 8006d12:	f7ff fe07 	bl	8006924 <Init_spi1_w5500>
    // 初始化独立看门狗
    Init_iwdg_reset();
 8006d16:	f7ff fe99 	bl	8006a4c <Init_iwdg_reset>
    // 初始化RTC
    Init_RTC();
 8006d1a:	f7ff feb9 	bl	8006a90 <Init_RTC>
    /* 发送初始化指令序列 */
    Driver_OLED_Send_START(OLED_COMMAND);
 8006d1e:	2000      	movs	r0, #0
 8006d20:	f7fa fb9a 	bl	8001458 <Driver_OLED_Send_START>
	Driver_OLED_SendDatas(oled_init, sizeof(oled_init));
 8006d24:	211b      	movs	r1, #27
 8006d26:	4856      	ldr	r0, [pc, #344]	; (8006e80 <main+0x18c>)
 8006d28:	f7fa fbd4 	bl	80014d4 <Driver_OLED_SendDatas>
	Driver_OLED_Fill(0x0);
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	f7fa fc03 	bl	8001538 <Driver_OLED_Fill>

    /* 片选回调函数 */
#if _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_
    reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8006d32:	4954      	ldr	r1, [pc, #336]	; (8006e84 <main+0x190>)
 8006d34:	4854      	ldr	r0, [pc, #336]	; (8006e88 <main+0x194>)
 8006d36:	f7fb fd89 	bl	800284c <reg_wizchip_cs_cbfunc>
    #else
        reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
    #endif
#endif
    /* SPI读写回调函数 */
    reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8006d3a:	4954      	ldr	r1, [pc, #336]	; (8006e8c <main+0x198>)
 8006d3c:	4854      	ldr	r0, [pc, #336]	; (8006e90 <main+0x19c>)
 8006d3e:	f7fb fda9 	bl	8002894 <reg_wizchip_spi_cbfunc>
    /* 操作系统临界区进出入接口 */
    reg_wizchip_cris_cbfunc(vPortEnterCritical, vPortExitCritical);
 8006d42:	4954      	ldr	r1, [pc, #336]	; (8006e94 <main+0x1a0>)
 8006d44:	4854      	ldr	r0, [pc, #336]	; (8006e98 <main+0x1a4>)
 8006d46:	f7fb fd5d 	bl	8002804 <reg_wizchip_cris_cbfunc>

    /* 喂狗 */
    IWDG_ReloadCounter();
 8006d4a:	f7ff fc91 	bl	8006670 <IWDG_ReloadCounter>

    /* PHY 连接状态检查,如果网线没连则一直在这儿 */
    do{
        if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
 8006d4e:	1dfb      	adds	r3, r7, #7
 8006d50:	4619      	mov	r1, r3
 8006d52:	200f      	movs	r0, #15
 8006d54:	f7fb fdc8 	bl	80028e8 <ctlwizchip>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d5e:	d107      	bne.n	8006d70 <main+0x7c>
            Driver_OLED_ShowString(0, 0, "Unknow PHY Link stat.", 8, 0);
 8006d60:	2300      	movs	r3, #0
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	2308      	movs	r3, #8
 8006d66:	4a4d      	ldr	r2, [pc, #308]	; (8006e9c <main+0x1a8>)
 8006d68:	2100      	movs	r1, #0
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	f7fa fda4 	bl	80018b8 <Driver_OLED_ShowString>
    }while(tmp == PHY_LINK_OFF);
 8006d70:	79fb      	ldrb	r3, [r7, #7]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0eb      	beq.n	8006d4e <main+0x5a>

    /* 喂狗 */
    IWDG_ReloadCounter();
 8006d76:	f7ff fc7b 	bl	8006670 <IWDG_ReloadCounter>

    /* 初始化缓冲区 */
    if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1){
 8006d7a:	4949      	ldr	r1, [pc, #292]	; (8006ea0 <main+0x1ac>)
 8006d7c:	2001      	movs	r0, #1
 8006d7e:	f7fb fdb3 	bl	80028e8 <ctlwizchip>
 8006d82:	4603      	mov	r3, r0
 8006d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d88:	d108      	bne.n	8006d9c <main+0xa8>
        Driver_OLED_ShowString(0, 0, "NET Initialized fail.", 8, 0);
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	2308      	movs	r3, #8
 8006d90:	4a44      	ldr	r2, [pc, #272]	; (8006ea4 <main+0x1b0>)
 8006d92:	2100      	movs	r1, #0
 8006d94:	2000      	movs	r0, #0
 8006d96:	f7fa fd8f 	bl	80018b8 <Driver_OLED_ShowString>
        while(1);
 8006d9a:	e7fe      	b.n	8006d9a <main+0xa6>
    }

    // 创建开锁通知信号量
	lockNotify = xSemaphoreCreateBinary();
 8006d9c:	2203      	movs	r2, #3
 8006d9e:	2100      	movs	r1, #0
 8006da0:	2001      	movs	r0, #1
 8006da2:	f001 f98b 	bl	80080bc <xQueueGenericCreate>
 8006da6:	4602      	mov	r2, r0
 8006da8:	4b3f      	ldr	r3, [pc, #252]	; (8006ea8 <main+0x1b4>)
 8006daa:	601a      	str	r2, [r3, #0]
	if(lockNotify == NULL){
 8006dac:	4b3e      	ldr	r3, [pc, #248]	; (8006ea8 <main+0x1b4>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d100      	bne.n	8006db6 <main+0xc2>
		// "Failed to Create Lock notify Semaphore!"
		while(1);
 8006db4:	e7fe      	b.n	8006db4 <main+0xc0>
	}
	// W5500互斥锁
	w5500Data = xSemaphoreCreateMutex();
 8006db6:	2001      	movs	r0, #1
 8006db8:	f001 f9e8 	bl	800818c <xQueueCreateMutex>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	4b3b      	ldr	r3, [pc, #236]	; (8006eac <main+0x1b8>)
 8006dc0:	601a      	str	r2, [r3, #0]
	if(w5500Data == NULL){
 8006dc2:	4b3a      	ldr	r3, [pc, #232]	; (8006eac <main+0x1b8>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d100      	bne.n	8006dcc <main+0xd8>
		//"Failed to Create W5500 Device Mutex!"
		while(1);
 8006dca:	e7fe      	b.n	8006dca <main+0xd6>
	}
	socketLock= xSemaphoreCreateMutex();
 8006dcc:	2001      	movs	r0, #1
 8006dce:	f001 f9dd 	bl	800818c <xQueueCreateMutex>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	4b36      	ldr	r3, [pc, #216]	; (8006eb0 <main+0x1bc>)
 8006dd6:	601a      	str	r2, [r3, #0]
	if(socketLock == NULL){
 8006dd8:	4b35      	ldr	r3, [pc, #212]	; (8006eb0 <main+0x1bc>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d100      	bne.n	8006de2 <main+0xee>
		//"Failed to Create Socket Lock Mutex!"
		while(1);
 8006de0:	e7fe      	b.n	8006de0 <main+0xec>
	}

    /* 初始化IP配置 */
	ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);	// 配置静态ip
 8006de2:	4934      	ldr	r1, [pc, #208]	; (8006eb4 <main+0x1c0>)
 8006de4:	2000      	movs	r0, #0
 8006de6:	f7fb fe5d 	bl	8002aa4 <ctlnetwork>
    if(gWIZNETINFO.dhcp == NETINFO_DHCP){
 8006dea:	4b32      	ldr	r3, [pc, #200]	; (8006eb4 <main+0x1c0>)
 8006dec:	7d9b      	ldrb	r3, [r3, #22]
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d10e      	bne.n	8006e10 <main+0x11c>
        /* >> DHCP 客户端 << */
        // 创建DHCP任务
    	if(xTaskCreate(vTask_DHCP, "DHCP Client", 3072 >> 2, NULL, 0, &dhcpClientTask) != pdPASS){
 8006df2:	4b31      	ldr	r3, [pc, #196]	; (8006eb8 <main+0x1c4>)
 8006df4:	9301      	str	r3, [sp, #4]
 8006df6:	2300      	movs	r3, #0
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006e00:	492e      	ldr	r1, [pc, #184]	; (8006ebc <main+0x1c8>)
 8006e02:	482f      	ldr	r0, [pc, #188]	; (8006ec0 <main+0x1cc>)
 8006e04:	f001 fc4e 	bl	80086a4 <xTaskCreate>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d003      	beq.n	8006e16 <main+0x122>
    		//"Failed to Create DHCP Client Task!"
    		while(1);
 8006e0e:	e7fe      	b.n	8006e0e <main+0x11a>
    	}
    }else{
    	ip_configed = 1;
 8006e10:	4b2c      	ldr	r3, [pc, #176]	; (8006ec4 <main+0x1d0>)
 8006e12:	2201      	movs	r2, #1
 8006e14:	701a      	strb	r2, [r3, #0]
    }

    // 创建开锁任务
    if(xTaskCreate(vTask_LockOn, "Lock Task", 1024 >> 2, NULL, 1, &lockTask) != pdPASS){
 8006e16:	4b2c      	ldr	r3, [pc, #176]	; (8006ec8 <main+0x1d4>)
 8006e18:	9301      	str	r3, [sp, #4]
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e24:	4929      	ldr	r1, [pc, #164]	; (8006ecc <main+0x1d8>)
 8006e26:	482a      	ldr	r0, [pc, #168]	; (8006ed0 <main+0x1dc>)
 8006e28:	f001 fc3c 	bl	80086a4 <xTaskCreate>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d000      	beq.n	8006e34 <main+0x140>
    	//"Failed to Create Lock Task!"
		while(1);
 8006e32:	e7fe      	b.n	8006e32 <main+0x13e>
	}
    // 显示任务
    if(xTaskCreate(vTask_Display, "OLED Task", 2048 >> 2, NULL, 0, &oledTask) != pdPASS){
 8006e34:	4b27      	ldr	r3, [pc, #156]	; (8006ed4 <main+0x1e0>)
 8006e36:	9301      	str	r3, [sp, #4]
 8006e38:	2300      	movs	r3, #0
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e42:	4925      	ldr	r1, [pc, #148]	; (8006ed8 <main+0x1e4>)
 8006e44:	4825      	ldr	r0, [pc, #148]	; (8006edc <main+0x1e8>)
 8006e46:	f001 fc2d 	bl	80086a4 <xTaskCreate>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d000      	beq.n	8006e52 <main+0x15e>
		//"Failed to Create Main Task!"
		while(1);
 8006e50:	e7fe      	b.n	8006e50 <main+0x15c>
	}
    // 创建主任务
    if(xTaskCreate(vTask_Main, "Main Task", 5120 >> 2, NULL, 0, &mainTask) != pdPASS){
 8006e52:	4b23      	ldr	r3, [pc, #140]	; (8006ee0 <main+0x1ec>)
 8006e54:	9301      	str	r3, [sp, #4]
 8006e56:	2300      	movs	r3, #0
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8006e60:	4920      	ldr	r1, [pc, #128]	; (8006ee4 <main+0x1f0>)
 8006e62:	4821      	ldr	r0, [pc, #132]	; (8006ee8 <main+0x1f4>)
 8006e64:	f001 fc1e 	bl	80086a4 <xTaskCreate>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d000      	beq.n	8006e70 <main+0x17c>
		//"Failed to Create Main Task!"
		while(1);
 8006e6e:	e7fe      	b.n	8006e6e <main+0x17a>
	}
    // 开始调度
    vTaskStartScheduler();
 8006e70:	f001 fd68 	bl	8008944 <vTaskStartScheduler>
    return 0;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20000064 	andcs	r0, r0, r4, rrx
 8006e84:	08006af1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r9, fp, sp, lr}
 8006e88:	08006add 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, fp, sp, lr}
 8006e8c:	08006b05 	stmdaeq	r0, {r0, r2, r8, r9, fp, sp, lr}
 8006e90:	08006b39 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9, fp, sp, lr}
 8006e94:	08009499 	stmdaeq	r0, {r0, r3, r4, r7, sl, ip, pc}
 8006e98:	08009469 	stmdaeq	r0, {r0, r3, r5, r6, sl, ip, pc}
 8006e9c:	08009688 	stmdaeq	r0, {r3, r7, r9, sl, ip, pc}
 8006ea0:	0800a0bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sp, pc}
 8006ea4:	080096a0 	stmdaeq	r0, {r5, r7, r9, sl, ip, pc}
 8006ea8:	20003a84 	andcs	r3, r0, r4, lsl #21
 8006eac:	20003a88 	andcs	r3, r0, r8, lsl #21
 8006eb0:	200042f8 	strdcs	r4, [r0], -r8
 8006eb4:	200000cc 	andcs	r0, r0, ip, asr #1
 8006eb8:	200042f4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
 8006ebc:	080096b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, ip, pc}
 8006ec0:	0800759d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, sl, ip, sp, lr}
 8006ec4:	2000014c 	andcs	r0, r0, ip, asr #2
 8006ec8:	20003a90 	mulcs	r0, r0, sl
 8006ecc:	080096c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, ip, pc}
 8006ed0:	08007669 	stmdaeq	r0, {r0, r3, r5, r6, r9, sl, ip, sp, lr}
 8006ed4:	200042fc 	strdcs	r4, [r0], -ip
 8006ed8:	080096d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, ip, pc}
 8006edc:	08006eed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r9, sl, fp, sp, lr}
 8006ee0:	20003a8c 	andcs	r3, r0, ip, lsl #21
 8006ee4:	080096dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, ip, pc}
 8006ee8:	08007275 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, ip, sp, lr}

08006eec <vTask_Display>:

// 显示任务
static void vTask_Display(void * pvParameters){
 8006eec:	b590      	push	{r4, r7, lr}
 8006eee:	b097      	sub	sp, #92	; 0x5c
 8006ef0:	af04      	add	r7, sp, #16
 8006ef2:	6078      	str	r0, [r7, #4]
	uint32_t times = 0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	647b      	str	r3, [r7, #68]	; 0x44
	char tmpstr[6],disp[22];
	wiz_NetInfo netinfo;
	char *msg;

	/* 清空屏幕 */
	Driver_OLED_Fill(0x0);
 8006ef8:	2000      	movs	r0, #0
 8006efa:	f7fa fb1d 	bl	8001538 <Driver_OLED_Fill>
	while(1){
		if(!ip_configed) {
 8006efe:	4b18      	ldr	r3, [pc, #96]	; (8006f60 <vTask_Display+0x74>)
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d107      	bne.n	8006f18 <vTask_Display+0x2c>
			// 换出当前任务
			taskYIELD();
 8006f08:	4b16      	ldr	r3, [pc, #88]	; (8006f64 <vTask_Display+0x78>)
 8006f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	f3bf 8f6f 	isb	sy
		}

		msg = infoMsg;	// 读msg,发起一次总线读操作,原子
 8006f18:	4b13      	ldr	r3, [pc, #76]	; (8006f68 <vTask_Display+0x7c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	643b      	str	r3, [r7, #64]	; 0x40
		infoMsg = NULL;
 8006f1e:	4b12      	ldr	r3, [pc, #72]	; (8006f68 <vTask_Display+0x7c>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]
		ctlnetwork(CN_GET_NETINFO, (void*)&netinfo);
 8006f24:	f107 0308 	add.w	r3, r7, #8
 8006f28:	4619      	mov	r1, r3
 8006f2a:	2001      	movs	r0, #1
 8006f2c:	f7fb fdba 	bl	8002aa4 <ctlnetwork>
		// 显示网络信息
		ctlwizchip(CW_GET_ID,(void*)tmpstr);
 8006f30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006f34:	4619      	mov	r1, r3
 8006f36:	2008      	movs	r0, #8
 8006f38:	f7fb fcd6 	bl	80028e8 <ctlwizchip>
		/* 打印版本信息 */
		Driver_OLED_ShowString(0, 0, "TDSAST-IOT V2.0.0", 8, times % 2);
 8006f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	2308      	movs	r3, #8
 8006f4a:	4a08      	ldr	r2, [pc, #32]	; (8006f6c <vTask_Display+0x80>)
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	2000      	movs	r0, #0
 8006f50:	f7fa fcb2 	bl	80018b8 <Driver_OLED_ShowString>
		snprintf(disp, sizeof(disp), "%s:%s", tmpstr, (netinfo.dhcp == NETINFO_DHCP ? "DHCP" : "STATIC"));
 8006f54:	7fbb      	ldrb	r3, [r7, #30]
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d10c      	bne.n	8006f74 <vTask_Display+0x88>
 8006f5a:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <vTask_Display+0x84>)
 8006f5c:	e00b      	b.n	8006f76 <vTask_Display+0x8a>
 8006f5e:	bf00      	nop
 8006f60:	2000014c 	andcs	r0, r0, ip, asr #2
 8006f64:	e000ed04 	and	lr, r0, r4, lsl #26
 8006f68:	20000148 	andcs	r0, r0, r8, asr #2
 8006f6c:	080096e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, ip, pc}
 8006f70:	080096fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, ip, pc}
 8006f74:	4bb6      	ldr	r3, [pc, #728]	; (8007250 <vTask_Display+0x364>)
 8006f76:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006f7a:	f107 0020 	add.w	r0, r7, #32
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	4613      	mov	r3, r2
 8006f82:	4ab4      	ldr	r2, [pc, #720]	; (8007254 <vTask_Display+0x368>)
 8006f84:	2116      	movs	r1, #22
 8006f86:	f7f9 fa4f 	bl	8000428 <sniprintf>
		Driver_OLED_ClearRow(((times) % 6) + 1);
 8006f8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f8c:	4bb2      	ldr	r3, [pc, #712]	; (8007258 <vTask_Display+0x36c>)
 8006f8e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f92:	089a      	lsrs	r2, r3, #2
 8006f94:	4613      	mov	r3, r2
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	4413      	add	r3, r2
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	1aca      	subs	r2, r1, r3
 8006f9e:	b2d3      	uxtb	r3, r2
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fa fb1f 	bl	80015e8 <Driver_OLED_ClearRow>
		Driver_OLED_ShowString(0, ((times) % 6) + 1, disp, 8, 0);
 8006faa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fac:	4baa      	ldr	r3, [pc, #680]	; (8007258 <vTask_Display+0x36c>)
 8006fae:	fba3 2301 	umull	r2, r3, r3, r1
 8006fb2:	089a      	lsrs	r2, r3, #2
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	005b      	lsls	r3, r3, #1
 8006fb8:	4413      	add	r3, r2
 8006fba:	005b      	lsls	r3, r3, #1
 8006fbc:	1aca      	subs	r2, r1, r3
 8006fbe:	b2d3      	uxtb	r3, r2
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	b2d9      	uxtb	r1, r3
 8006fc4:	f107 0220 	add.w	r2, r7, #32
 8006fc8:	2300      	movs	r3, #0
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	2308      	movs	r3, #8
 8006fce:	2000      	movs	r0, #0
 8006fd0:	f7fa fc72 	bl	80018b8 <Driver_OLED_ShowString>
//				netinfo.mac[3],netinfo.mac[4],netinfo.mac[5]);
//		Driver_OLED_ClearRow(((times + 1) % 6) + 1);
//		Driver_OLED_ShowString(0, ((times + 1) % 6) + 1, disp, 8, 0);

		// 显示当前ip地址
		taskENTER_CRITICAL();
 8006fd4:	f002 fa48 	bl	8009468 <vPortEnterCritical>
		tmpstr[0] = server_ip[0];
 8006fd8:	4ba0      	ldr	r3, [pc, #640]	; (800725c <vTask_Display+0x370>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		tmpstr[1] = server_ip[1];
 8006fe0:	4b9e      	ldr	r3, [pc, #632]	; (800725c <vTask_Display+0x370>)
 8006fe2:	785b      	ldrb	r3, [r3, #1]
 8006fe4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		tmpstr[2] = server_ip[2];
 8006fe8:	4b9c      	ldr	r3, [pc, #624]	; (800725c <vTask_Display+0x370>)
 8006fea:	789b      	ldrb	r3, [r3, #2]
 8006fec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		tmpstr[3] = server_ip[3];
 8006ff0:	4b9a      	ldr	r3, [pc, #616]	; (800725c <vTask_Display+0x370>)
 8006ff2:	78db      	ldrb	r3, [r3, #3]
 8006ff4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		taskEXIT_CRITICAL();
 8006ff8:	f002 fa4e 	bl	8009498 <vPortExitCritical>
		snprintf(disp, sizeof(disp), "MQTT:%d.%d.%d.%d",tmpstr[0],tmpstr[1],tmpstr[2],tmpstr[3]);
 8006ffc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007000:	461c      	mov	r4, r3
 8007002:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8007006:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800700a:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 800700e:	f107 0020 	add.w	r0, r7, #32
 8007012:	9102      	str	r1, [sp, #8]
 8007014:	9201      	str	r2, [sp, #4]
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	4623      	mov	r3, r4
 800701a:	4a91      	ldr	r2, [pc, #580]	; (8007260 <vTask_Display+0x374>)
 800701c:	2116      	movs	r1, #22
 800701e:	f7f9 fa03 	bl	8000428 <sniprintf>
		Driver_OLED_ClearRow(((times + 1) % 6) + 1);
 8007022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007024:	1c59      	adds	r1, r3, #1
 8007026:	4b8c      	ldr	r3, [pc, #560]	; (8007258 <vTask_Display+0x36c>)
 8007028:	fba3 2301 	umull	r2, r3, r3, r1
 800702c:	089a      	lsrs	r2, r3, #2
 800702e:	4613      	mov	r3, r2
 8007030:	005b      	lsls	r3, r3, #1
 8007032:	4413      	add	r3, r2
 8007034:	005b      	lsls	r3, r3, #1
 8007036:	1aca      	subs	r2, r1, r3
 8007038:	b2d3      	uxtb	r3, r2
 800703a:	3301      	adds	r3, #1
 800703c:	b2db      	uxtb	r3, r3
 800703e:	4618      	mov	r0, r3
 8007040:	f7fa fad2 	bl	80015e8 <Driver_OLED_ClearRow>
		Driver_OLED_ShowString(0, ((times + 1) % 6) + 1, disp, 8, 0);
 8007044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007046:	1c59      	adds	r1, r3, #1
 8007048:	4b83      	ldr	r3, [pc, #524]	; (8007258 <vTask_Display+0x36c>)
 800704a:	fba3 2301 	umull	r2, r3, r3, r1
 800704e:	089a      	lsrs	r2, r3, #2
 8007050:	4613      	mov	r3, r2
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	4413      	add	r3, r2
 8007056:	005b      	lsls	r3, r3, #1
 8007058:	1aca      	subs	r2, r1, r3
 800705a:	b2d3      	uxtb	r3, r2
 800705c:	3301      	adds	r3, #1
 800705e:	b2d9      	uxtb	r1, r3
 8007060:	f107 0220 	add.w	r2, r7, #32
 8007064:	2300      	movs	r3, #0
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	2308      	movs	r3, #8
 800706a:	2000      	movs	r0, #0
 800706c:	f7fa fc24 	bl	80018b8 <Driver_OLED_ShowString>

		snprintf(disp, sizeof(disp), "IP:%d.%d.%d.%d", netinfo.ip[0],netinfo.ip[1],netinfo.ip[2],netinfo.ip[3]);
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	461c      	mov	r4, r3
 8007074:	7bfb      	ldrb	r3, [r7, #15]
 8007076:	7c3a      	ldrb	r2, [r7, #16]
 8007078:	7c79      	ldrb	r1, [r7, #17]
 800707a:	f107 0020 	add.w	r0, r7, #32
 800707e:	9102      	str	r1, [sp, #8]
 8007080:	9201      	str	r2, [sp, #4]
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	4623      	mov	r3, r4
 8007086:	4a77      	ldr	r2, [pc, #476]	; (8007264 <vTask_Display+0x378>)
 8007088:	2116      	movs	r1, #22
 800708a:	f7f9 f9cd 	bl	8000428 <sniprintf>
		Driver_OLED_ClearRow(((times + 2) % 6) + 1);
 800708e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007090:	1c99      	adds	r1, r3, #2
 8007092:	4b71      	ldr	r3, [pc, #452]	; (8007258 <vTask_Display+0x36c>)
 8007094:	fba3 2301 	umull	r2, r3, r3, r1
 8007098:	089a      	lsrs	r2, r3, #2
 800709a:	4613      	mov	r3, r2
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	4413      	add	r3, r2
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	1aca      	subs	r2, r1, r3
 80070a4:	b2d3      	uxtb	r3, r2
 80070a6:	3301      	adds	r3, #1
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7fa fa9c 	bl	80015e8 <Driver_OLED_ClearRow>
		Driver_OLED_ShowString(0, ((times + 2) % 6) + 1, disp, 8, 0);
 80070b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070b2:	1c99      	adds	r1, r3, #2
 80070b4:	4b68      	ldr	r3, [pc, #416]	; (8007258 <vTask_Display+0x36c>)
 80070b6:	fba3 2301 	umull	r2, r3, r3, r1
 80070ba:	089a      	lsrs	r2, r3, #2
 80070bc:	4613      	mov	r3, r2
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	4413      	add	r3, r2
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	1aca      	subs	r2, r1, r3
 80070c6:	b2d3      	uxtb	r3, r2
 80070c8:	3301      	adds	r3, #1
 80070ca:	b2d9      	uxtb	r1, r3
 80070cc:	f107 0220 	add.w	r2, r7, #32
 80070d0:	2300      	movs	r3, #0
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	2308      	movs	r3, #8
 80070d6:	2000      	movs	r0, #0
 80070d8:	f7fa fbee 	bl	80018b8 <Driver_OLED_ShowString>

		snprintf(disp, sizeof(disp), "GAW:%d.%d.%d.%d", netinfo.gw[0],netinfo.gw[1],netinfo.gw[2],netinfo.gw[3]);
 80070dc:	7dbb      	ldrb	r3, [r7, #22]
 80070de:	461c      	mov	r4, r3
 80070e0:	7dfb      	ldrb	r3, [r7, #23]
 80070e2:	7e3a      	ldrb	r2, [r7, #24]
 80070e4:	7e79      	ldrb	r1, [r7, #25]
 80070e6:	f107 0020 	add.w	r0, r7, #32
 80070ea:	9102      	str	r1, [sp, #8]
 80070ec:	9201      	str	r2, [sp, #4]
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	4623      	mov	r3, r4
 80070f2:	4a5d      	ldr	r2, [pc, #372]	; (8007268 <vTask_Display+0x37c>)
 80070f4:	2116      	movs	r1, #22
 80070f6:	f7f9 f997 	bl	8000428 <sniprintf>
		Driver_OLED_ClearRow(((times + 3) % 6) + 1);
 80070fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070fc:	1cd9      	adds	r1, r3, #3
 80070fe:	4b56      	ldr	r3, [pc, #344]	; (8007258 <vTask_Display+0x36c>)
 8007100:	fba3 2301 	umull	r2, r3, r3, r1
 8007104:	089a      	lsrs	r2, r3, #2
 8007106:	4613      	mov	r3, r2
 8007108:	005b      	lsls	r3, r3, #1
 800710a:	4413      	add	r3, r2
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	1aca      	subs	r2, r1, r3
 8007110:	b2d3      	uxtb	r3, r2
 8007112:	3301      	adds	r3, #1
 8007114:	b2db      	uxtb	r3, r3
 8007116:	4618      	mov	r0, r3
 8007118:	f7fa fa66 	bl	80015e8 <Driver_OLED_ClearRow>
		Driver_OLED_ShowString(0, ((times + 3) % 6) + 1, disp, 8, 0);
 800711c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800711e:	1cd9      	adds	r1, r3, #3
 8007120:	4b4d      	ldr	r3, [pc, #308]	; (8007258 <vTask_Display+0x36c>)
 8007122:	fba3 2301 	umull	r2, r3, r3, r1
 8007126:	089a      	lsrs	r2, r3, #2
 8007128:	4613      	mov	r3, r2
 800712a:	005b      	lsls	r3, r3, #1
 800712c:	4413      	add	r3, r2
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	1aca      	subs	r2, r1, r3
 8007132:	b2d3      	uxtb	r3, r2
 8007134:	3301      	adds	r3, #1
 8007136:	b2d9      	uxtb	r1, r3
 8007138:	f107 0220 	add.w	r2, r7, #32
 800713c:	2300      	movs	r3, #0
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	2308      	movs	r3, #8
 8007142:	2000      	movs	r0, #0
 8007144:	f7fa fbb8 	bl	80018b8 <Driver_OLED_ShowString>
		// 这个可以不要
		snprintf(disp, sizeof(disp), "MSK:%d.%d.%d.%d", netinfo.sn[0],netinfo.sn[1],netinfo.sn[2],netinfo.sn[3]);
 8007148:	7cbb      	ldrb	r3, [r7, #18]
 800714a:	461c      	mov	r4, r3
 800714c:	7cfb      	ldrb	r3, [r7, #19]
 800714e:	7d3a      	ldrb	r2, [r7, #20]
 8007150:	7d79      	ldrb	r1, [r7, #21]
 8007152:	f107 0020 	add.w	r0, r7, #32
 8007156:	9102      	str	r1, [sp, #8]
 8007158:	9201      	str	r2, [sp, #4]
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	4623      	mov	r3, r4
 800715e:	4a43      	ldr	r2, [pc, #268]	; (800726c <vTask_Display+0x380>)
 8007160:	2116      	movs	r1, #22
 8007162:	f7f9 f961 	bl	8000428 <sniprintf>
		Driver_OLED_ClearRow(((times + 4) % 6) + 1);
 8007166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007168:	1d19      	adds	r1, r3, #4
 800716a:	4b3b      	ldr	r3, [pc, #236]	; (8007258 <vTask_Display+0x36c>)
 800716c:	fba3 2301 	umull	r2, r3, r3, r1
 8007170:	089a      	lsrs	r2, r3, #2
 8007172:	4613      	mov	r3, r2
 8007174:	005b      	lsls	r3, r3, #1
 8007176:	4413      	add	r3, r2
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	1aca      	subs	r2, r1, r3
 800717c:	b2d3      	uxtb	r3, r2
 800717e:	3301      	adds	r3, #1
 8007180:	b2db      	uxtb	r3, r3
 8007182:	4618      	mov	r0, r3
 8007184:	f7fa fa30 	bl	80015e8 <Driver_OLED_ClearRow>
		Driver_OLED_ShowString(0, ((times + 4) % 6) + 1, disp, 8, 0);
 8007188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800718a:	1d19      	adds	r1, r3, #4
 800718c:	4b32      	ldr	r3, [pc, #200]	; (8007258 <vTask_Display+0x36c>)
 800718e:	fba3 2301 	umull	r2, r3, r3, r1
 8007192:	089a      	lsrs	r2, r3, #2
 8007194:	4613      	mov	r3, r2
 8007196:	005b      	lsls	r3, r3, #1
 8007198:	4413      	add	r3, r2
 800719a:	005b      	lsls	r3, r3, #1
 800719c:	1aca      	subs	r2, r1, r3
 800719e:	b2d3      	uxtb	r3, r2
 80071a0:	3301      	adds	r3, #1
 80071a2:	b2d9      	uxtb	r1, r3
 80071a4:	f107 0220 	add.w	r2, r7, #32
 80071a8:	2300      	movs	r3, #0
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	2308      	movs	r3, #8
 80071ae:	2000      	movs	r0, #0
 80071b0:	f7fa fb82 	bl	80018b8 <Driver_OLED_ShowString>

		snprintf(disp, sizeof(disp), "DNS:%d.%d.%d.%d", netinfo.dns[0],netinfo.dns[1],netinfo.dns[2],netinfo.dns[3]);
 80071b4:	7ebb      	ldrb	r3, [r7, #26]
 80071b6:	461c      	mov	r4, r3
 80071b8:	7efb      	ldrb	r3, [r7, #27]
 80071ba:	7f3a      	ldrb	r2, [r7, #28]
 80071bc:	7f79      	ldrb	r1, [r7, #29]
 80071be:	f107 0020 	add.w	r0, r7, #32
 80071c2:	9102      	str	r1, [sp, #8]
 80071c4:	9201      	str	r2, [sp, #4]
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	4623      	mov	r3, r4
 80071ca:	4a29      	ldr	r2, [pc, #164]	; (8007270 <vTask_Display+0x384>)
 80071cc:	2116      	movs	r1, #22
 80071ce:	f7f9 f92b 	bl	8000428 <sniprintf>
		Driver_OLED_ClearRow(((times + 5) % 6) + 1);
 80071d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071d4:	1d59      	adds	r1, r3, #5
 80071d6:	4b20      	ldr	r3, [pc, #128]	; (8007258 <vTask_Display+0x36c>)
 80071d8:	fba3 2301 	umull	r2, r3, r3, r1
 80071dc:	089a      	lsrs	r2, r3, #2
 80071de:	4613      	mov	r3, r2
 80071e0:	005b      	lsls	r3, r3, #1
 80071e2:	4413      	add	r3, r2
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	1aca      	subs	r2, r1, r3
 80071e8:	b2d3      	uxtb	r3, r2
 80071ea:	3301      	adds	r3, #1
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fa f9fa 	bl	80015e8 <Driver_OLED_ClearRow>
		Driver_OLED_ShowString(0, ((times + 5) % 6) + 1, disp, 8, 0);
 80071f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071f6:	1d59      	adds	r1, r3, #5
 80071f8:	4b17      	ldr	r3, [pc, #92]	; (8007258 <vTask_Display+0x36c>)
 80071fa:	fba3 2301 	umull	r2, r3, r3, r1
 80071fe:	089a      	lsrs	r2, r3, #2
 8007200:	4613      	mov	r3, r2
 8007202:	005b      	lsls	r3, r3, #1
 8007204:	4413      	add	r3, r2
 8007206:	005b      	lsls	r3, r3, #1
 8007208:	1aca      	subs	r2, r1, r3
 800720a:	b2d3      	uxtb	r3, r2
 800720c:	3301      	adds	r3, #1
 800720e:	b2d9      	uxtb	r1, r3
 8007210:	f107 0220 	add.w	r2, r7, #32
 8007214:	2300      	movs	r3, #0
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	2308      	movs	r3, #8
 800721a:	2000      	movs	r0, #0
 800721c:	f7fa fb4c 	bl	80018b8 <Driver_OLED_ShowString>
		times++;
 8007220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007222:	3301      	adds	r3, #1
 8007224:	647b      	str	r3, [r7, #68]	; 0x44
		if(msg){
 8007226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007228:	2b00      	cmp	r3, #0
 800722a:	d009      	beq.n	8007240 <vTask_Display+0x354>
			Driver_OLED_ShowString(0, 7, msg, 8, 0); // 显示在最后一行
 800722c:	2300      	movs	r3, #0
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	2308      	movs	r3, #8
 8007232:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007234:	2107      	movs	r1, #7
 8007236:	2000      	movs	r0, #0
 8007238:	f7fa fb3e 	bl	80018b8 <Driver_OLED_ShowString>
			msg = NULL;
 800723c:	2300      	movs	r3, #0
 800723e:	643b      	str	r3, [r7, #64]	; 0x40
		}
		vTaskDelay(pdMS_TO_TICKS(3000));
 8007240:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007244:	f001 fb5a 	bl	80088fc <vTaskDelay>
		Driver_OLED_ClearRow(7);
 8007248:	2007      	movs	r0, #7
 800724a:	f7fa f9cd 	bl	80015e8 <Driver_OLED_ClearRow>
	}
 800724e:	e656      	b.n	8006efe <vTask_Display+0x12>
 8007250:	08009704 	stmdaeq	r0, {r2, r8, r9, sl, ip, pc}
 8007254:	0800970c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip, pc}
 8007258:	aaaaaaab 	bge	6ab1d0c <_Min_Stack_Size+0x6ab1b0c>
 800725c:	20003a94 	mulcs	r0, r4, sl
 8007260:	08009714 	stmdaeq	r0, {r2, r4, r8, r9, sl, ip, pc}
 8007264:	08009728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip, pc}
 8007268:	08009738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, pc}
 800726c:	08009748 	stmdaeq	r0, {r3, r6, r8, r9, sl, ip, pc}
 8007270:	08009758 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, ip, pc}

08007274 <vTask_Main>:
}

static void vTask_Main(void * pvParameters){
 8007274:	b580      	push	{r7, lr}
 8007276:	b0a6      	sub	sp, #152	; 0x98
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
//	/* 喂狗 */
//	IWDG_ReloadCounter();

	while(1){

		if(!ip_configed) {
 800727c:	4baa      	ldr	r3, [pc, #680]	; (8007528 <vTask_Main+0x2b4>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d107      	bne.n	8007296 <vTask_Main+0x22>
			// 换出当前任务
			taskYIELD();
 8007286:	4ba9      	ldr	r3, [pc, #676]	; (800752c <vTask_Main+0x2b8>)
 8007288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	f3bf 8f6f 	isb	sy
		}

		/* 喂狗 */
		IWDG_ReloadCounter();
 8007296:	f7ff f9eb 	bl	8006670 <IWDG_ReloadCounter>

		/* 从DNS获得IP地址,失败返回0 */

		if(DNSClient(MQTT_BROKER_HOST, server_ip) == 0){
 800729a:	49a5      	ldr	r1, [pc, #660]	; (8007530 <vTask_Main+0x2bc>)
 800729c:	48a5      	ldr	r0, [pc, #660]	; (8007534 <vTask_Main+0x2c0>)
 800729e:	f7ff fc63 	bl	8006b68 <DNSClient>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d103      	bne.n	80072b0 <vTask_Main+0x3c>
			// 设置成指定的ip,临界区
			memcpy(server_ip, MQTT_BROKER_IP, 4);
 80072a8:	4ba1      	ldr	r3, [pc, #644]	; (8007530 <vTask_Main+0x2bc>)
 80072aa:	4aa3      	ldr	r2, [pc, #652]	; (8007538 <vTask_Main+0x2c4>)
 80072ac:	6810      	ldr	r0, [r2, #0]
 80072ae:	6018      	str	r0, [r3, #0]
		}

		/* 喂狗 */
		IWDG_ReloadCounter();
 80072b0:	f7ff f9de 	bl	8006670 <IWDG_ReloadCounter>

		/* 初始化MQTT客户端 */
		mqtt_init(&broker, MQTT_CLIENT_ID);
 80072b4:	49a1      	ldr	r1, [pc, #644]	; (800753c <vTask_Main+0x2c8>)
 80072b6:	48a2      	ldr	r0, [pc, #648]	; (8007540 <vTask_Main+0x2cc>)
 80072b8:	f000 fb26 	bl	8007908 <mqtt_init>
		/* 登录MQTT服务器 */
		mqtt_init_auth(&broker, MQTT_USERNAME, MQTT_PASSWORD);
 80072bc:	4aa1      	ldr	r2, [pc, #644]	; (8007544 <vTask_Main+0x2d0>)
 80072be:	49a2      	ldr	r1, [pc, #648]	; (8007548 <vTask_Main+0x2d4>)
 80072c0:	489f      	ldr	r0, [pc, #636]	; (8007540 <vTask_Main+0x2cc>)
 80072c2:	f000 fb61 	bl	8007988 <mqtt_init_auth>

		xSemaphoreTake(socketLock, portMAX_DELAY);
 80072c6:	4ba1      	ldr	r3, [pc, #644]	; (800754c <vTask_Main+0x2d8>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80072ce:	4618      	mov	r0, r3
 80072d0:	f001 f81e 	bl	8008310 <xQueueSemaphoreTake>
		/* 先关闭该socket */
		close(SOCK_MQTT);
 80072d4:	2000      	movs	r0, #0
 80072d6:	f7fa fc35 	bl	8001b44 <close>
		/* 打开MQTT的socket */
		socket(SOCK_MQTT, Sn_MR_TCP, LOCAL_PORT, Sn_MR_ND | SOCK_IO_BLOCK);
 80072da:	2320      	movs	r3, #32
 80072dc:	f240 4264 	movw	r2, #1124	; 0x464
 80072e0:	2101      	movs	r1, #1
 80072e2:	2000      	movs	r0, #0
 80072e4:	f7fa fb2a 	bl	800193c <socket>
		/* 连接MQTT服务器 */
		connect(SOCK_MQTT, server_ip, MQTT_BROKER_PORT);
 80072e8:	f240 725b 	movw	r2, #1883	; 0x75b
 80072ec:	4990      	ldr	r1, [pc, #576]	; (8007530 <vTask_Main+0x2bc>)
 80072ee:	2000      	movs	r0, #0
 80072f0:	f7fa fc84 	bl	8001bfc <connect>
		xSemaphoreGive(socketLock);
 80072f4:	4b95      	ldr	r3, [pc, #596]	; (800754c <vTask_Main+0x2d8>)
 80072f6:	6818      	ldr	r0, [r3, #0]
 80072f8:	2300      	movs	r3, #0
 80072fa:	2200      	movs	r2, #0
 80072fc:	2100      	movs	r1, #0
 80072fe:	f000 ff5d 	bl	80081bc <xQueueGenericSend>

		/* MQTT stuffs */
		mqtt_set_alive(&broker, 30);    // 心跳超时30秒,默认是300秒
 8007302:	211e      	movs	r1, #30
 8007304:	488e      	ldr	r0, [pc, #568]	; (8007540 <vTask_Main+0x2cc>)
 8007306:	f000 fb65 	bl	80079d4 <mqtt_set_alive>
		broker.socket_info = (void*)SOCK_MQTT; //这个只会传给send对应的函数的第一个参数
 800730a:	4b8d      	ldr	r3, [pc, #564]	; (8007540 <vTask_Main+0x2cc>)
 800730c:	2200      	movs	r2, #0
 800730e:	601a      	str	r2, [r3, #0]
		broker.send = mqtt_send_packet;
 8007310:	4b8b      	ldr	r3, [pc, #556]	; (8007540 <vTask_Main+0x2cc>)
 8007312:	4a8f      	ldr	r2, [pc, #572]	; (8007550 <vTask_Main+0x2dc>)
 8007314:	605a      	str	r2, [r3, #4]

		/**
		 * 连接MQTT服务器
		 */
		/* 喂狗 */
		IWDG_ReloadCounter();
 8007316:	f7ff f9ab 	bl	8006670 <IWDG_ReloadCounter>
		// >>>>> CONNECT
		//__BKPT(1);
		mqtt_connect(&broker);
 800731a:	4889      	ldr	r0, [pc, #548]	; (8007540 <vTask_Main+0x2cc>)
 800731c:	f000 fb6a 	bl	80079f4 <mqtt_connect>

		// <<<<< CONNACK
		packet_length = mqtt_read_packet();
 8007320:	f7ff fc76 	bl	8006c10 <mqtt_read_packet>
 8007324:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

		if(packet_length < 0){
 8007328:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800732c:	2b00      	cmp	r3, #0
 800732e:	da07      	bge.n	8007340 <vTask_Main+0xcc>
			infoMsg = "Read CONN pack error.";
 8007330:	4b88      	ldr	r3, [pc, #544]	; (8007554 <vTask_Main+0x2e0>)
 8007332:	4a89      	ldr	r2, [pc, #548]	; (8007558 <vTask_Main+0x2e4>)
 8007334:	601a      	str	r2, [r3, #0]
			vTaskDelay(pdMS_TO_TICKS(1000));
 8007336:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800733a:	f001 fadf 	bl	80088fc <vTaskDelay>
			continue;
 800733e:	e0f2      	b.n	8007526 <vTask_Main+0x2b2>
		}

		// 检查回包类型
		if(MQTTParseMessageType(packet_buffer) != MQTT_MSG_CONNACK){
 8007340:	4b86      	ldr	r3, [pc, #536]	; (800755c <vTask_Main+0x2e8>)
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007348:	2b20      	cmp	r3, #32
 800734a:	d007      	beq.n	800735c <vTask_Main+0xe8>
			infoMsg = "CONNACK expected!";
 800734c:	4b81      	ldr	r3, [pc, #516]	; (8007554 <vTask_Main+0x2e0>)
 800734e:	4a84      	ldr	r2, [pc, #528]	; (8007560 <vTask_Main+0x2ec>)
 8007350:	601a      	str	r2, [r3, #0]
			vTaskDelay(pdMS_TO_TICKS(1000));
 8007352:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007356:	f001 fad1 	bl	80088fc <vTaskDelay>
			continue;
 800735a:	e0e4      	b.n	8007526 <vTask_Main+0x2b2>
		}

		// 检查是否成功
		if(packet_buffer[3] != 0x00){
 800735c:	4b7f      	ldr	r3, [pc, #508]	; (800755c <vTask_Main+0x2e8>)
 800735e:	78db      	ldrb	r3, [r3, #3]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d007      	beq.n	8007374 <vTask_Main+0x100>
			infoMsg = "CONNACK failed!";
 8007364:	4b7b      	ldr	r3, [pc, #492]	; (8007554 <vTask_Main+0x2e0>)
 8007366:	4a7f      	ldr	r2, [pc, #508]	; (8007564 <vTask_Main+0x2f0>)
 8007368:	601a      	str	r2, [r3, #0]
			vTaskDelay(pdMS_TO_TICKS(1000));
 800736a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800736e:	f001 fac5 	bl	80088fc <vTaskDelay>
			continue;
 8007372:	e0d8      	b.n	8007526 <vTask_Main+0x2b2>

		/**
		 * MQTT 订阅Topic
		 */
		// >>>>> SUBSCRIBE
		mqtt_subscribe(&broker, MQTT_SUBS_TOPIC, &msg_id);
 8007374:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007378:	461a      	mov	r2, r3
 800737a:	497b      	ldr	r1, [pc, #492]	; (8007568 <vTask_Main+0x2f4>)
 800737c:	4870      	ldr	r0, [pc, #448]	; (8007540 <vTask_Main+0x2cc>)
 800737e:	f000 fccf 	bl	8007d20 <mqtt_subscribe>
		// <<<<< SUBACK
		packet_length = mqtt_read_packet();
 8007382:	f7ff fc45 	bl	8006c10 <mqtt_read_packet>
 8007386:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		if(packet_length < 0){
 800738a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800738e:	2b00      	cmp	r3, #0
 8007390:	da07      	bge.n	80073a2 <vTask_Main+0x12e>
			infoMsg = "Read SUBS pack error.";
 8007392:	4b70      	ldr	r3, [pc, #448]	; (8007554 <vTask_Main+0x2e0>)
 8007394:	4a75      	ldr	r2, [pc, #468]	; (800756c <vTask_Main+0x2f8>)
 8007396:	601a      	str	r2, [r3, #0]
			vTaskDelay(pdMS_TO_TICKS(1000));
 8007398:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800739c:	f001 faae 	bl	80088fc <vTaskDelay>
			continue;
 80073a0:	e0c1      	b.n	8007526 <vTask_Main+0x2b2>
		}
		// 检查接收数据包类型
		if(MQTTParseMessageType(packet_buffer) != MQTT_MSG_SUBACK){
 80073a2:	4b6e      	ldr	r3, [pc, #440]	; (800755c <vTask_Main+0x2e8>)
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073aa:	2b90      	cmp	r3, #144	; 0x90
 80073ac:	d007      	beq.n	80073be <vTask_Main+0x14a>
			infoMsg = "SUBACK expected!";
 80073ae:	4b69      	ldr	r3, [pc, #420]	; (8007554 <vTask_Main+0x2e0>)
 80073b0:	4a6f      	ldr	r2, [pc, #444]	; (8007570 <vTask_Main+0x2fc>)
 80073b2:	601a      	str	r2, [r3, #0]
			vTaskDelay(pdMS_TO_TICKS(1000));
 80073b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80073b8:	f001 faa0 	bl	80088fc <vTaskDelay>
			continue;
 80073bc:	e0b3      	b.n	8007526 <vTask_Main+0x2b2>
		}
		// 检查接收数据包id
		msg_id_rcv = mqtt_parse_msg_id(packet_buffer);
 80073be:	4867      	ldr	r0, [pc, #412]	; (800755c <vTask_Main+0x2e8>)
 80073c0:	f000 f9da 	bl	8007778 <mqtt_parse_msg_id>
 80073c4:	4603      	mov	r3, r0
 80073c6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		if(msg_id != msg_id_rcv){
 80073ca:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80073ce:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d007      	beq.n	80073e6 <vTask_Main+0x172>
			// 发送包和接收包的msg id不匹配
			infoMsg = "Msg ID unmatch!";
 80073d6:	4b5f      	ldr	r3, [pc, #380]	; (8007554 <vTask_Main+0x2e0>)
 80073d8:	4a66      	ldr	r2, [pc, #408]	; (8007574 <vTask_Main+0x300>)
 80073da:	601a      	str	r2, [r3, #0]
			vTaskDelay(pdMS_TO_TICKS(1000));
 80073dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80073e0:	f001 fa8c 	bl	80088fc <vTaskDelay>
			continue;
 80073e4:	e09f      	b.n	8007526 <vTask_Main+0x2b2>
		}

		// 设置socket为非阻塞模式
		tmp = SOCK_IO_NONBLOCK;
 80073e6:	2301      	movs	r3, #1
 80073e8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		xSemaphoreTake(socketLock, portMAX_DELAY);
 80073ec:	4b57      	ldr	r3, [pc, #348]	; (800754c <vTask_Main+0x2d8>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80073f4:	4618      	mov	r0, r3
 80073f6:	f000 ff8b 	bl	8008310 <xQueueSemaphoreTake>
		if(ctlsocket(SOCK_MQTT, CS_SET_IOMODE, (void *)&tmp) != SOCK_OK){
 80073fa:	f107 038f 	add.w	r3, r7, #143	; 0x8f
 80073fe:	461a      	mov	r2, r3
 8007400:	2100      	movs	r1, #0
 8007402:	2000      	movs	r0, #0
 8007404:	f7fb f8e2 	bl	80025cc <ctlsocket>
 8007408:	4603      	mov	r3, r0
 800740a:	2b01      	cmp	r3, #1
 800740c:	d00e      	beq.n	800742c <vTask_Main+0x1b8>
			xSemaphoreGive(socketLock);
 800740e:	4b4f      	ldr	r3, [pc, #316]	; (800754c <vTask_Main+0x2d8>)
 8007410:	6818      	ldr	r0, [r3, #0]
 8007412:	2300      	movs	r3, #0
 8007414:	2200      	movs	r2, #0
 8007416:	2100      	movs	r1, #0
 8007418:	f000 fed0 	bl	80081bc <xQueueGenericSend>
			infoMsg = "Set IO Mode Failed!";
 800741c:	4b4d      	ldr	r3, [pc, #308]	; (8007554 <vTask_Main+0x2e0>)
 800741e:	4a56      	ldr	r2, [pc, #344]	; (8007578 <vTask_Main+0x304>)
 8007420:	601a      	str	r2, [r3, #0]
			vTaskDelay(pdMS_TO_TICKS(1000));
 8007422:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007426:	f001 fa69 	bl	80088fc <vTaskDelay>
			continue;
 800742a:	e07c      	b.n	8007526 <vTask_Main+0x2b2>
		}
		xSemaphoreGive(socketLock);
 800742c:	4b47      	ldr	r3, [pc, #284]	; (800754c <vTask_Main+0x2d8>)
 800742e:	6818      	ldr	r0, [r3, #0]
 8007430:	2300      	movs	r3, #0
 8007432:	2200      	movs	r2, #0
 8007434:	2100      	movs	r1, #0
 8007436:	f000 fec1 	bl	80081bc <xQueueGenericSend>

		//__BKPT(1);
		GPIO_ResetBits(GPIOB, GPIO_Pin_9);  // 点亮灯,表示已连接
 800743a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800743e:	484f      	ldr	r0, [pc, #316]	; (800757c <vTask_Main+0x308>)
 8007440:	f7fe fd6e 	bl	8005f20 <GPIO_ResetBits>
		GPIO_SetBits(GPIOB, GPIO_Pin_8);  //上锁
 8007444:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007448:	484c      	ldr	r0, [pc, #304]	; (800757c <vTask_Main+0x308>)
 800744a:	f7fe fd5b 	bl	8005f04 <GPIO_SetBits>
		lock_status = 1;	// 上锁状态
 800744e:	4b4c      	ldr	r3, [pc, #304]	; (8007580 <vTask_Main+0x30c>)
 8007450:	2201      	movs	r2, #1
 8007452:	701a      	strb	r2, [r3, #0]

		while(getSn_SR(SOCK_MQTT) == SOCK_ESTABLISHED){
 8007454:	e056      	b.n	8007504 <vTask_Main+0x290>
			/* 喂狗 */
			IWDG_ReloadCounter();
 8007456:	f7ff f90b 	bl	8006670 <IWDG_ReloadCounter>

			// 发送心跳包
			if(Interval_counter > 25000){
 800745a:	4b4a      	ldr	r3, [pc, #296]	; (8007584 <vTask_Main+0x310>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8007462:	4293      	cmp	r3, r2
 8007464:	d908      	bls.n	8007478 <vTask_Main+0x204>
				Interval_counter = 0;
 8007466:	4b47      	ldr	r3, [pc, #284]	; (8007584 <vTask_Main+0x310>)
 8007468:	2200      	movs	r2, #0
 800746a:	601a      	str	r2, [r3, #0]
				mqtt_ping(&broker);
 800746c:	4834      	ldr	r0, [pc, #208]	; (8007540 <vTask_Main+0x2cc>)
 800746e:	f000 fc3b 	bl	8007ce8 <mqtt_ping>
				infoMsg = "Ping~~~";
 8007472:	4b38      	ldr	r3, [pc, #224]	; (8007554 <vTask_Main+0x2e0>)
 8007474:	4a44      	ldr	r2, [pc, #272]	; (8007588 <vTask_Main+0x314>)
 8007476:	601a      	str	r2, [r3, #0]
			}

			// <<<<<
			packet_length = mqtt_read_packet();
 8007478:	f7ff fbca 	bl	8006c10 <mqtt_read_packet>
 800747c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

			if(packet_length <= 0){
 8007480:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007484:	2b00      	cmp	r3, #0
 8007486:	dc00      	bgt.n	800748a <vTask_Main+0x216>
				continue;
 8007488:	e03c      	b.n	8007504 <vTask_Main+0x290>
			}

			if(MQTTParseMessageType(packet_buffer) == MQTT_MSG_PUBLISH) {
 800748a:	4b34      	ldr	r3, [pc, #208]	; (800755c <vTask_Main+0x2e8>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007492:	2b30      	cmp	r3, #48	; 0x30
 8007494:	d136      	bne.n	8007504 <vTask_Main+0x290>
				infoMsg = "Receive PUB!";
 8007496:	4b2f      	ldr	r3, [pc, #188]	; (8007554 <vTask_Main+0x2e0>)
 8007498:	4a3c      	ldr	r2, [pc, #240]	; (800758c <vTask_Main+0x318>)
 800749a:	601a      	str	r2, [r3, #0]
				uint8_t msg[128];
				//uint8_t topic[32];
				uint16_t len;
				//len = (len = mqtt_parse_pub_topic(packet_buffer, topic)) >= sizeof(topic) ? sizeof(topic) - 1 : len;
				//topic[len] = '\0';
				len = (len = mqtt_parse_publish_msg(packet_buffer, msg)) >= sizeof(msg) ? sizeof(msg) - 1 : len;
 800749c:	f107 030c 	add.w	r3, r7, #12
 80074a0:	4619      	mov	r1, r3
 80074a2:	482e      	ldr	r0, [pc, #184]	; (800755c <vTask_Main+0x2e8>)
 80074a4:	f000 f9c8 	bl	8007838 <mqtt_parse_publish_msg>
 80074a8:	4603      	mov	r3, r0
 80074aa:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80074ae:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80074b2:	2b7f      	cmp	r3, #127	; 0x7f
 80074b4:	d802      	bhi.n	80074bc <vTask_Main+0x248>
 80074b6:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80074ba:	e000      	b.n	80074be <vTask_Main+0x24a>
 80074bc:	237f      	movs	r3, #127	; 0x7f
 80074be:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
				msg[len] = '\0';
 80074c2:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80074c6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80074ca:	4413      	add	r3, r2
 80074cc:	2200      	movs	r2, #0
 80074ce:	f803 2c8c 	strb.w	r2, [r3, #-140]
				if(lock_status && strncmp("Lock ON", msg, 7) == 0){  //判断是不是开锁指令
 80074d2:	4b2b      	ldr	r3, [pc, #172]	; (8007580 <vTask_Main+0x30c>)
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d013      	beq.n	8007504 <vTask_Main+0x290>
 80074dc:	f107 030c 	add.w	r3, r7, #12
 80074e0:	2207      	movs	r2, #7
 80074e2:	4619      	mov	r1, r3
 80074e4:	482a      	ldr	r0, [pc, #168]	; (8007590 <vTask_Main+0x31c>)
 80074e6:	f7f9 f8df 	bl	80006a8 <strncmp>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d109      	bne.n	8007504 <vTask_Main+0x290>
					infoMsg = "Lock On~";
 80074f0:	4b18      	ldr	r3, [pc, #96]	; (8007554 <vTask_Main+0x2e0>)
 80074f2:	4a28      	ldr	r2, [pc, #160]	; (8007594 <vTask_Main+0x320>)
 80074f4:	601a      	str	r2, [r3, #0]
					xSemaphoreGive(lockNotify);	//通知上锁
 80074f6:	4b28      	ldr	r3, [pc, #160]	; (8007598 <vTask_Main+0x324>)
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	2300      	movs	r3, #0
 80074fc:	2200      	movs	r2, #0
 80074fe:	2100      	movs	r1, #0
 8007500:	f000 fe5c 	bl	80081bc <xQueueGenericSend>
		while(getSn_SR(SOCK_MQTT) == SOCK_ESTABLISHED){
 8007504:	f44f 7042 	mov.w	r0, #776	; 0x308
 8007508:	f7fb fe86 	bl	8003218 <WIZCHIP_READ>
 800750c:	4603      	mov	r3, r0
 800750e:	2b17      	cmp	r3, #23
 8007510:	d0a1      	beq.n	8007456 <vTask_Main+0x1e2>
				}
			}
		}
		GPIO_SetBits(GPIOB, GPIO_Pin_9); // 熄灭灯
 8007512:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007516:	4819      	ldr	r0, [pc, #100]	; (800757c <vTask_Main+0x308>)
 8007518:	f7fe fcf4 	bl	8005f04 <GPIO_SetBits>
		GPIO_ResetBits(GPIOB, GPIO_Pin_8);  //开锁
 800751c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007520:	4816      	ldr	r0, [pc, #88]	; (800757c <vTask_Main+0x308>)
 8007522:	f7fe fcfd 	bl	8005f20 <GPIO_ResetBits>
	}
 8007526:	e6a9      	b.n	800727c <vTask_Main+0x8>
 8007528:	2000014c 	andcs	r0, r0, ip, asr #2
 800752c:	e000ed04 	and	lr, r0, r4, lsl #26
 8007530:	20003a94 	mulcs	r0, r4, sl
 8007534:	08009768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip, pc}
 8007538:	0800a0b8 	stmdaeq	r0, {r3, r4, r5, r7, sp, pc}
 800753c:	08009778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, ip, pc}
 8007540:	20003a98 	mulcs	r0, r8, sl
 8007544:	0800978c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, ip, pc}
 8007548:	0800979c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip, pc}
 800754c:	200042f8 	strdcs	r4, [r0], -r8
 8007550:	08006bc5 	stmdaeq	r0, {r0, r2, r6, r7, r8, r9, fp, sp, lr}
 8007554:	20000148 	andcs	r0, r0, r8, asr #2
 8007558:	080097a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, ip, pc}
 800755c:	20003684 	andcs	r3, r0, r4, lsl #13
 8007560:	080097bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip, pc}
 8007564:	080097d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, ip, pc}
 8007568:	080097e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip, pc}
 800756c:	080097fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip, pc}
 8007570:	08009814 	stmdaeq	r0, {r2, r4, fp, ip, pc}
 8007574:	08009828 	stmdaeq	r0, {r3, r5, fp, ip, pc}
 8007578:	08009838 	stmdaeq	r0, {r3, r4, r5, fp, ip, pc}
 800757c:	40010c00 	andmi	r0, r1, r0, lsl #24
 8007580:	2000014d 	andcs	r0, r0, sp, asr #2
 8007584:	20000140 	andcs	r0, r0, r0, asr #2
 8007588:	0800984c 	stmdaeq	r0, {r2, r3, r6, fp, ip, pc}
 800758c:	08009854 	stmdaeq	r0, {r2, r4, r6, fp, ip, pc}
 8007590:	08009864 	stmdaeq	r0, {r2, r5, r6, fp, ip, pc}
 8007594:	0800986c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip, pc}
 8007598:	20003a84 	andcs	r3, r0, r4, lsl #21

0800759c <vTask_DHCP>:
}

/* DHCP任务 */
static void vTask_DHCP( void * pvParameters ){
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
	uint8_t dhcp_ret = 0; //ip是否被配置
 80075a4:	2300      	movs	r3, #0
 80075a6:	73fb      	strb	r3, [r7, #15]
	xSemaphoreTake(socketLock, portMAX_DELAY);
 80075a8:	4b27      	ldr	r3, [pc, #156]	; (8007648 <vTask_DHCP+0xac>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 fead 	bl	8008310 <xQueueSemaphoreTake>
	DHCP_init(SOCK_DHCP, gDATABUF);
 80075b6:	4925      	ldr	r1, [pc, #148]	; (800764c <vTask_DHCP+0xb0>)
 80075b8:	2007      	movs	r0, #7
 80075ba:	f7fd fbbd 	bl	8004d38 <DHCP_init>
	xSemaphoreGive(socketLock);
 80075be:	4b22      	ldr	r3, [pc, #136]	; (8007648 <vTask_DHCP+0xac>)
 80075c0:	6818      	ldr	r0, [r3, #0]
 80075c2:	2300      	movs	r3, #0
 80075c4:	2200      	movs	r2, #0
 80075c6:	2100      	movs	r1, #0
 80075c8:	f000 fdf8 	bl	80081bc <xQueueGenericSend>
		 * 自动获得IP地址,然后检查该ip地址是否到期,
		 * 如果到期则再次自动获取,反之直接返回,
		 * 保持该函数在大循环里
		 */
		/* DHCP IP allocation and check the DHCP lease time (for IP renewal) */
		xSemaphoreTake(socketLock, portMAX_DELAY);
 80075cc:	4b1e      	ldr	r3, [pc, #120]	; (8007648 <vTask_DHCP+0xac>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 fe9b 	bl	8008310 <xQueueSemaphoreTake>
		dhcp_ret = DHCP_run();
 80075da:	f7fd fbf1 	bl	8004dc0 <DHCP_run>
 80075de:	4603      	mov	r3, r0
 80075e0:	73fb      	strb	r3, [r7, #15]
		//IWDG_ReloadCounter();	// DHCP_SUCCESS
		if((dhcp_ret == DHCP_SUCCESS) || (dhcp_ret == DHCP_IP_CHANGED)) {
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d002      	beq.n	80075ee <vTask_DHCP+0x52>
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d123      	bne.n	8007636 <vTask_DHCP+0x9a>
			getIPfromDHCP(gWIZNETINFO.ip);
 80075ee:	4818      	ldr	r0, [pc, #96]	; (8007650 <vTask_DHCP+0xb4>)
 80075f0:	f7fd fc20 	bl	8004e34 <getIPfromDHCP>
			getGWfromDHCP(gWIZNETINFO.gw);
 80075f4:	4817      	ldr	r0, [pc, #92]	; (8007654 <vTask_DHCP+0xb8>)
 80075f6:	f7fd fc3b 	bl	8004e70 <getGWfromDHCP>
			getSNfromDHCP(gWIZNETINFO.sn);
 80075fa:	4817      	ldr	r0, [pc, #92]	; (8007658 <vTask_DHCP+0xbc>)
 80075fc:	f7fd fc56 	bl	8004eac <getSNfromDHCP>
			getDNSfromDHCP(gWIZNETINFO.dns);
 8007600:	4816      	ldr	r0, [pc, #88]	; (800765c <vTask_DHCP+0xc0>)
 8007602:	f7fd fc71 	bl	8004ee8 <getDNSfromDHCP>
			gWIZNETINFO.dhcp = NETINFO_DHCP;
 8007606:	4b16      	ldr	r3, [pc, #88]	; (8007660 <vTask_DHCP+0xc4>)
 8007608:	2202      	movs	r2, #2
 800760a:	759a      	strb	r2, [r3, #22]
			ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 800760c:	4914      	ldr	r1, [pc, #80]	; (8007660 <vTask_DHCP+0xc4>)
 800760e:	2000      	movs	r0, #0
 8007610:	f7fb fa48 	bl	8002aa4 <ctlnetwork>
			//ip已被成功配置
			ip_configed = 1;
 8007614:	4b13      	ldr	r3, [pc, #76]	; (8007664 <vTask_DHCP+0xc8>)
 8007616:	2201      	movs	r2, #1
 8007618:	701a      	strb	r2, [r3, #0]
			// 喂狗
			IWDG_ReloadCounter();
 800761a:	f7ff f829 	bl	8006670 <IWDG_ReloadCounter>
			// 显示ip租约时间
			//printf("DHCP IP Leased Time : %ld Sec\r\n", getDHCPLeasetime());
			xSemaphoreGive(socketLock);
 800761e:	4b0a      	ldr	r3, [pc, #40]	; (8007648 <vTask_DHCP+0xac>)
 8007620:	6818      	ldr	r0, [r3, #0]
 8007622:	2300      	movs	r3, #0
 8007624:	2200      	movs	r2, #0
 8007626:	2100      	movs	r1, #0
 8007628:	f000 fdc8 	bl	80081bc <xQueueGenericSend>
			// 等待60秒,重新检查IP地址
			vTaskDelay(pdMS_TO_TICKS(60 * 1000));
 800762c:	f64e 2060 	movw	r0, #60000	; 0xea60
 8007630:	f001 f964 	bl	80088fc <vTaskDelay>
 8007634:	e006      	b.n	8007644 <vTask_DHCP+0xa8>
		}else{
			xSemaphoreGive(socketLock);
 8007636:	4b04      	ldr	r3, [pc, #16]	; (8007648 <vTask_DHCP+0xac>)
 8007638:	6818      	ldr	r0, [r3, #0]
 800763a:	2300      	movs	r3, #0
 800763c:	2200      	movs	r2, #0
 800763e:	2100      	movs	r1, #0
 8007640:	f000 fdbc 	bl	80081bc <xQueueGenericSend>
		}
	}
 8007644:	e7c2      	b.n	80075cc <vTask_DHCP+0x30>
 8007646:	bf00      	nop
 8007648:	200042f8 	strdcs	r4, [r0], -r8
 800764c:	20003af4 	strdcs	r3, [r0], -r4
 8007650:	200000d2 	ldrdcs	r0, [r0], -r2
 8007654:	200000da 	ldrdcs	r0, [r0], -sl
 8007658:	200000d6 	ldrdcs	r0, [r0], -r6
 800765c:	200000de 	ldrdcs	r0, [r0], -lr
 8007660:	200000cc 	andcs	r0, r0, ip, asr #1
 8007664:	2000014c 	andcs	r0, r0, ip, asr #2

08007668 <vTask_LockOn>:
}

// 开锁任务
static void vTask_LockOn(void *pvParameters){
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(lockNotify, portMAX_DELAY);
 8007670:	4b0d      	ldr	r3, [pc, #52]	; (80076a8 <vTask_LockOn+0x40>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007678:	4618      	mov	r0, r3
 800767a:	f000 fe49 	bl	8008310 <xQueueSemaphoreTake>
		lock_status = 0;
 800767e:	4b0b      	ldr	r3, [pc, #44]	; (80076ac <vTask_LockOn+0x44>)
 8007680:	2200      	movs	r2, #0
 8007682:	701a      	strb	r2, [r3, #0]
		GPIO_ResetBits(GPIOB, GPIO_Pin_8);  //开锁
 8007684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007688:	4809      	ldr	r0, [pc, #36]	; (80076b0 <vTask_LockOn+0x48>)
 800768a:	f7fe fc49 	bl	8005f20 <GPIO_ResetBits>
		vTaskDelay(pdMS_TO_TICKS(3 * 1000));	// 延时3秒
 800768e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007692:	f001 f933 	bl	80088fc <vTaskDelay>
		lock_status = 1;	// 上锁
 8007696:	4b05      	ldr	r3, [pc, #20]	; (80076ac <vTask_LockOn+0x44>)
 8007698:	2201      	movs	r2, #1
 800769a:	701a      	strb	r2, [r3, #0]
		GPIO_SetBits(GPIOB, GPIO_Pin_8);
 800769c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80076a0:	4803      	ldr	r0, [pc, #12]	; (80076b0 <vTask_LockOn+0x48>)
 80076a2:	f7fe fc2f 	bl	8005f04 <GPIO_SetBits>
	}
 80076a6:	e7e3      	b.n	8007670 <vTask_LockOn+0x8>
 80076a8:	20003a84 	andcs	r3, r0, r4, lsl #21
 80076ac:	2000014d 	andcs	r0, r0, sp, asr #2
 80076b0:	40010c00 	andmi	r0, r1, r0, lsl #24

080076b4 <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80076be:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	60fb      	str	r3, [r7, #12]
	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	//pcTaskGetName(xTaskGetCurrentTaskHandle());
	taskDISABLE_INTERRUPTS();
	for( ;; );
 80076d0:	e7fe      	b.n	80076d0 <vApplicationStackOverflowHook+0x1c>
 80076d2:	bf00      	nop

080076d4 <mqtt_num_rem_len_bytes>:
#define MQTT_WILL_RETAIN    1<<5
#define MQTT_USERNAME_FLAG  1<<7
#define MQTT_PASSWORD_FLAG  1<<6


uint8_t mqtt_num_rem_len_bytes(const uint8_t* buf) {
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
	uint8_t num_bytes = 1;
 80076dc:	2301      	movs	r3, #1
 80076de:	73fb      	strb	r3, [r7, #15]
	
	//printf("mqtt_num_rem_len_bytes\n");
	
	if ((buf[1] & 0x80) == 0x80) {
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	3301      	adds	r3, #1
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	b25b      	sxtb	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	da14      	bge.n	8007716 <mqtt_num_rem_len_bytes+0x42>
		num_bytes++;
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
 80076ee:	3301      	adds	r3, #1
 80076f0:	73fb      	strb	r3, [r7, #15]
		if ((buf[2] & 0x80) == 0x80) {
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	3302      	adds	r3, #2
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	b25b      	sxtb	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	da0b      	bge.n	8007716 <mqtt_num_rem_len_bytes+0x42>
			num_bytes ++;
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
 8007700:	3301      	adds	r3, #1
 8007702:	73fb      	strb	r3, [r7, #15]
			if ((buf[3] & 0x80) == 0x80) {
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3303      	adds	r3, #3
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	b25b      	sxtb	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	da02      	bge.n	8007716 <mqtt_num_rem_len_bytes+0x42>
				num_bytes ++;
 8007710:	7bfb      	ldrb	r3, [r7, #15]
 8007712:	3301      	adds	r3, #1
 8007714:	73fb      	strb	r3, [r7, #15]
			}
		}
	}
	return num_bytes;
 8007716:	7bfb      	ldrb	r3, [r7, #15]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	bc80      	pop	{r7}
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop

08007724 <mqtt_parse_rem_len>:

uint16_t mqtt_parse_rem_len(const uint8_t* buf) {
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
	uint16_t multiplier = 1;
 800772c:	2301      	movs	r3, #1
 800772e:	81fb      	strh	r3, [r7, #14]
	uint16_t value = 0;
 8007730:	2300      	movs	r3, #0
 8007732:	81bb      	strh	r3, [r7, #12]
	uint8_t digit;
	
	//printf("mqtt_parse_rem_len\n");
	
	buf++;	// skip "flags" byte in fixed header
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	3301      	adds	r3, #1
 8007738:	607b      	str	r3, [r7, #4]

	do {
		digit = *buf;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	72fb      	strb	r3, [r7, #11]
		value += (digit & 127) * multiplier;
 8007740:	7afb      	ldrb	r3, [r7, #11]
 8007742:	b29b      	uxth	r3, r3
 8007744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007748:	b29b      	uxth	r3, r3
 800774a:	89fa      	ldrh	r2, [r7, #14]
 800774c:	fb02 f303 	mul.w	r3, r2, r3
 8007750:	b29a      	uxth	r2, r3
 8007752:	89bb      	ldrh	r3, [r7, #12]
 8007754:	4413      	add	r3, r2
 8007756:	81bb      	strh	r3, [r7, #12]
		multiplier *= 128;
 8007758:	89fb      	ldrh	r3, [r7, #14]
 800775a:	01db      	lsls	r3, r3, #7
 800775c:	81fb      	strh	r3, [r7, #14]
		buf++;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	3301      	adds	r3, #1
 8007762:	607b      	str	r3, [r7, #4]
	} while ((digit & 128) != 0);
 8007764:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007768:	2b00      	cmp	r3, #0
 800776a:	dbe6      	blt.n	800773a <mqtt_parse_rem_len+0x16>

	return value;
 800776c:	89bb      	ldrh	r3, [r7, #12]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	bc80      	pop	{r7}
 8007776:	4770      	bx	lr

08007778 <mqtt_parse_msg_id>:

uint16_t mqtt_parse_msg_id(const uint8_t* buf) {
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
	uint8_t type = MQTTParseMessageType(buf);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	f023 030f 	bic.w	r3, r3, #15
 8007788:	737b      	strb	r3, [r7, #13]
	uint8_t qos = MQTTParseMessageQos(buf);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	105b      	asrs	r3, r3, #1
 8007790:	b2db      	uxtb	r3, r3
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	733b      	strb	r3, [r7, #12]
	uint16_t id = 0;
 8007798:	2300      	movs	r3, #0
 800779a:	81fb      	strh	r3, [r7, #14]
	
	//printf("mqtt_parse_msg_id\n");
	
	if(type >= MQTT_MSG_PUBLISH && type <= MQTT_MSG_UNSUBACK) {
 800779c:	7b7b      	ldrb	r3, [r7, #13]
 800779e:	2b2f      	cmp	r3, #47	; 0x2f
 80077a0:	d944      	bls.n	800782c <mqtt_parse_msg_id+0xb4>
 80077a2:	7b7b      	ldrb	r3, [r7, #13]
 80077a4:	2bb0      	cmp	r3, #176	; 0xb0
 80077a6:	d841      	bhi.n	800782c <mqtt_parse_msg_id+0xb4>
		if(type == MQTT_MSG_PUBLISH) {
 80077a8:	7b7b      	ldrb	r3, [r7, #13]
 80077aa:	2b30      	cmp	r3, #48	; 0x30
 80077ac:	d128      	bne.n	8007800 <mqtt_parse_msg_id+0x88>
			if(qos != 0) {
 80077ae:	7b3b      	ldrb	r3, [r7, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d03b      	beq.n	800782c <mqtt_parse_msg_id+0xb4>
				// fixed header length + Topic (UTF encoded)
				// = 1 for "flags" byte + rlb for length bytes + topic size
				uint8_t rlb = mqtt_num_rem_len_bytes(buf);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7ff ff8d 	bl	80076d4 <mqtt_num_rem_len_bytes>
 80077ba:	4603      	mov	r3, r0
 80077bc:	72fb      	strb	r3, [r7, #11]
				uint8_t offset = *(buf+1+rlb)<<8;	// topic UTF MSB
 80077be:	2300      	movs	r3, #0
 80077c0:	72bb      	strb	r3, [r7, #10]
				offset |= *(buf+1+rlb+1);			// topic UTF LSB
 80077c2:	7afb      	ldrb	r3, [r7, #11]
 80077c4:	3302      	adds	r3, #2
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	4413      	add	r3, r2
 80077ca:	781a      	ldrb	r2, [r3, #0]
 80077cc:	7abb      	ldrb	r3, [r7, #10]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	72bb      	strb	r3, [r7, #10]
				offset += (1+rlb+2);					// fixed header + topic size
 80077d2:	7afa      	ldrb	r2, [r7, #11]
 80077d4:	7abb      	ldrb	r3, [r7, #10]
 80077d6:	4413      	add	r3, r2
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	3303      	adds	r3, #3
 80077dc:	72bb      	strb	r3, [r7, #10]
				id = *(buf+offset)<<8;				// id MSB
 80077de:	7abb      	ldrb	r3, [r7, #10]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	4413      	add	r3, r2
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	021b      	lsls	r3, r3, #8
 80077ea:	81fb      	strh	r3, [r7, #14]
				id |= *(buf+offset+1);				// id LSB
 80077ec:	7abb      	ldrb	r3, [r7, #10]
 80077ee:	3301      	adds	r3, #1
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	4413      	add	r3, r2
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	89fb      	ldrh	r3, [r7, #14]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	81fb      	strh	r3, [r7, #14]
 80077fe:	e015      	b.n	800782c <mqtt_parse_msg_id+0xb4>
			}
		} else {
			// fixed header length
			// 1 for "flags" byte + rlb for length bytes
			uint8_t rlb = mqtt_num_rem_len_bytes(buf);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff ff67 	bl	80076d4 <mqtt_num_rem_len_bytes>
 8007806:	4603      	mov	r3, r0
 8007808:	727b      	strb	r3, [r7, #9]
			id = *(buf+1+rlb)<<8;	// id MSB
 800780a:	7a7b      	ldrb	r3, [r7, #9]
 800780c:	3301      	adds	r3, #1
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	4413      	add	r3, r2
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	b29b      	uxth	r3, r3
 8007816:	021b      	lsls	r3, r3, #8
 8007818:	81fb      	strh	r3, [r7, #14]
			id |= *(buf+1+rlb+1);	// id LSB
 800781a:	7a7b      	ldrb	r3, [r7, #9]
 800781c:	3302      	adds	r3, #2
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	4413      	add	r3, r2
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	b29a      	uxth	r2, r3
 8007826:	89fb      	ldrh	r3, [r7, #14]
 8007828:	4313      	orrs	r3, r2
 800782a:	81fb      	strh	r3, [r7, #14]
		}
	}
	return id;
 800782c:	89fb      	ldrh	r3, [r7, #14]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop

08007838 <mqtt_parse_publish_msg>:
		*topic_ptr = NULL;
	}
	return len;
}

uint16_t mqtt_parse_publish_msg(const uint8_t* buf, uint8_t* msg) {
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
	const uint8_t* ptr;
	
	//printf("mqtt_parse_publish_msg\n");
	
	uint16_t msg_len = mqtt_parse_pub_msg_ptr(buf, &ptr);
 8007842:	f107 0308 	add.w	r3, r7, #8
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f813 	bl	8007874 <mqtt_parse_pub_msg_ptr>
 800784e:	4603      	mov	r3, r0
 8007850:	81fb      	strh	r3, [r7, #14]
	
	if(msg_len != 0 && ptr != NULL) {
 8007852:	89fb      	ldrh	r3, [r7, #14]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d008      	beq.n	800786a <mqtt_parse_publish_msg+0x32>
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d005      	beq.n	800786a <mqtt_parse_publish_msg+0x32>
		memcpy(msg, ptr, msg_len);
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	89fa      	ldrh	r2, [r7, #14]
 8007862:	4619      	mov	r1, r3
 8007864:	6838      	ldr	r0, [r7, #0]
 8007866:	f7f8 fc53 	bl	8000110 <memcpy>
	}
	
	return msg_len;
 800786a:	89fb      	ldrh	r3, [r7, #14]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <mqtt_parse_pub_msg_ptr>:

uint16_t mqtt_parse_pub_msg_ptr(const uint8_t* buf, const uint8_t **msg_ptr) {
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
	uint16_t len = 0;
 800787e:	2300      	movs	r3, #0
 8007880:	81fb      	strh	r3, [r7, #14]
	
	//printf("mqtt_parse_pub_msg_ptr\n");
	
	if(MQTTParseMessageType(buf) == MQTT_MSG_PUBLISH) {
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800788a:	2b30      	cmp	r3, #48	; 0x30
 800788c:	d133      	bne.n	80078f6 <mqtt_parse_pub_msg_ptr+0x82>
		// message starts at
		// fixed header length + Topic (UTF encoded) + msg id (if QoS>0)
		uint8_t rlb = mqtt_num_rem_len_bytes(buf);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff ff20 	bl	80076d4 <mqtt_num_rem_len_bytes>
 8007894:	4603      	mov	r3, r0
 8007896:	733b      	strb	r3, [r7, #12]
		uint8_t offset = (*(buf+1+rlb))<<8;	// topic UTF MSB
 8007898:	2300      	movs	r3, #0
 800789a:	737b      	strb	r3, [r7, #13]
		offset |= *(buf+1+rlb+1);			// topic UTF LSB
 800789c:	7b3b      	ldrb	r3, [r7, #12]
 800789e:	3302      	adds	r3, #2
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	4413      	add	r3, r2
 80078a4:	781a      	ldrb	r2, [r3, #0]
 80078a6:	7b7b      	ldrb	r3, [r7, #13]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	737b      	strb	r3, [r7, #13]
		offset += (1+rlb+2);				// fixed header + topic size
 80078ac:	7b3a      	ldrb	r2, [r7, #12]
 80078ae:	7b7b      	ldrb	r3, [r7, #13]
 80078b0:	4413      	add	r3, r2
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	3303      	adds	r3, #3
 80078b6:	737b      	strb	r3, [r7, #13]

		if(MQTTParseMessageQos(buf)) {
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	105b      	asrs	r3, r3, #1
 80078be:	f003 0303 	and.w	r3, r3, #3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d002      	beq.n	80078cc <mqtt_parse_pub_msg_ptr+0x58>
			offset += 2;					// add two bytes of msg id
 80078c6:	7b7b      	ldrb	r3, [r7, #13]
 80078c8:	3302      	adds	r3, #2
 80078ca:	737b      	strb	r3, [r7, #13]
		}

		*msg_ptr = (buf + offset);
 80078cc:	7b7b      	ldrb	r3, [r7, #13]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	441a      	add	r2, r3
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	601a      	str	r2, [r3, #0]
		// offset is now pointing to start of message
		// length of the message is remaining length - variable header
		// variable header is offset - fixed header
		// fixed header is 1 + rlb
		// so, lom = remlen - (offset - (1+rlb))
      	len = mqtt_parse_rem_len(buf) - (offset-(rlb+1));
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7ff ff24 	bl	8007724 <mqtt_parse_rem_len>
 80078dc:	4603      	mov	r3, r0
 80078de:	4619      	mov	r1, r3
 80078e0:	7b3b      	ldrb	r3, [r7, #12]
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	7b7b      	ldrb	r3, [r7, #13]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	440b      	add	r3, r1
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	3301      	adds	r3, #1
 80078f2:	81fb      	strh	r3, [r7, #14]
 80078f4:	e002      	b.n	80078fc <mqtt_parse_pub_msg_ptr+0x88>
	} else {
		*msg_ptr = NULL;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]
	}
	return len;
 80078fc:	89fb      	ldrh	r3, [r7, #14]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop

08007908 <mqtt_init>:

void mqtt_init(mqtt_broker_handle_t* broker, const char* clientid) {
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
	// Connection options
	broker->alive = 300; // 300 seconds = 5 minutes
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007918:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	broker->seq = 1; // Sequency for message indetifiers
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	// Client options
	memset(broker->clientid, 0, sizeof(broker->clientid));
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3308      	adds	r3, #8
 8007928:	2232      	movs	r2, #50	; 0x32
 800792a:	2100      	movs	r1, #0
 800792c:	4618      	mov	r0, r3
 800792e:	f7f8 fc65 	bl	80001fc <memset>
	memset(broker->username, 0, sizeof(broker->username));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	333a      	adds	r3, #58	; 0x3a
 8007936:	220d      	movs	r2, #13
 8007938:	2100      	movs	r1, #0
 800793a:	4618      	mov	r0, r3
 800793c:	f7f8 fc5e 	bl	80001fc <memset>
	memset(broker->password, 0, sizeof(broker->password));
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	3347      	adds	r3, #71	; 0x47
 8007944:	220d      	movs	r2, #13
 8007946:	2100      	movs	r1, #0
 8007948:	4618      	mov	r0, r3
 800794a:	f7f8 fc57 	bl	80001fc <memset>
	if(clientid) {
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d007      	beq.n	8007964 <mqtt_init+0x5c>
		strncpy(broker->clientid, clientid, sizeof(broker->clientid));
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3308      	adds	r3, #8
 8007958:	2232      	movs	r2, #50	; 0x32
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	4618      	mov	r0, r3
 800795e:	f7f8 fef1 	bl	8000744 <strncpy>
 8007962:	e006      	b.n	8007972 <mqtt_init+0x6a>
	} else {
		strcpy(broker->clientid, "emqtt");
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3308      	adds	r3, #8
 8007968:	4a06      	ldr	r2, [pc, #24]	; (8007984 <mqtt_init+0x7c>)
 800796a:	6810      	ldr	r0, [r2, #0]
 800796c:	6018      	str	r0, [r3, #0]
 800796e:	8892      	ldrh	r2, [r2, #4]
 8007970:	809a      	strh	r2, [r3, #4]
	}
	// Will topic
	broker->clean_session = 1;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
}
 800797a:	bf00      	nop
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	08009878 	stmdaeq	r0, {r3, r4, r5, r6, fp, ip, pc}

08007988 <mqtt_init_auth>:

void mqtt_init_auth(mqtt_broker_handle_t* broker, const char* username, const char* password) {
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
	if(username && username[0] != '\0')
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <mqtt_init_auth+0x28>
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d006      	beq.n	80079b0 <mqtt_init_auth+0x28>
		strncpy(broker->username, username, sizeof(broker->username)-1);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	333a      	adds	r3, #58	; 0x3a
 80079a6:	220c      	movs	r2, #12
 80079a8:	68b9      	ldr	r1, [r7, #8]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7f8 feca 	bl	8000744 <strncpy>
	if(password && password[0] != '\0')
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <mqtt_init_auth+0x44>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d006      	beq.n	80079cc <mqtt_init_auth+0x44>
		strncpy(broker->password, password, sizeof(broker->password)-1);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	3347      	adds	r3, #71	; 0x47
 80079c2:	220c      	movs	r2, #12
 80079c4:	6879      	ldr	r1, [r7, #4]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7f8 febc 	bl	8000744 <strncpy>
}
 80079cc:	bf00      	nop
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <mqtt_set_alive>:

void mqtt_set_alive(mqtt_broker_handle_t* broker, uint16_t alive) {
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	460b      	mov	r3, r1
 80079de:	807b      	strh	r3, [r7, #2]
	broker->alive = alive;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	887a      	ldrh	r2, [r7, #2]
 80079e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bc80      	pop	{r7}
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop

080079f4 <mqtt_connect>:

int mqtt_connect(mqtt_broker_handle_t* broker)
{
 80079f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f8:	b091      	sub	sp, #68	; 0x44
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	60f8      	str	r0, [r7, #12]
 80079fe:	466b      	mov	r3, sp
 8007a00:	60bb      	str	r3, [r7, #8]
	uint8_t flags = 0x00;
 8007a02:	2300      	movs	r3, #0
 8007a04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	uint16_t clientidlen = strlen(broker->clientid);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3308      	adds	r3, #8
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7f8 fe1d 	bl	800064c <strlen>
 8007a12:	4603      	mov	r3, r0
 8007a14:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t usernamelen = strlen(broker->username);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	333a      	adds	r3, #58	; 0x3a
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7f8 fe16 	bl	800064c <strlen>
 8007a20:	4603      	mov	r3, r0
 8007a22:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t passwordlen = strlen(broker->password);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	3347      	adds	r3, #71	; 0x47
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7f8 fe0f 	bl	800064c <strlen>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t payload_len = clientidlen + 2;
 8007a32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a34:	3302      	adds	r3, #2
 8007a36:	87bb      	strh	r3, [r7, #60]	; 0x3c

	// Preparing the flags
	if(usernamelen) {
 8007a38:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00b      	beq.n	8007a56 <mqtt_connect+0x62>
		payload_len += usernamelen + 2;
 8007a3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007a40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007a42:	4413      	add	r3, r2
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	3302      	adds	r3, #2
 8007a48:	87bb      	strh	r3, [r7, #60]	; 0x3c
		flags |= MQTT_USERNAME_FLAG;
 8007a4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	if(passwordlen) {
 8007a56:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00b      	beq.n	8007a74 <mqtt_connect+0x80>
		payload_len += passwordlen + 2;
 8007a5c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8007a5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007a60:	4413      	add	r3, r2
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	3302      	adds	r3, #2
 8007a66:	87bb      	strh	r3, [r7, #60]	; 0x3c
		flags |= MQTT_PASSWORD_FLAG;
 8007a68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	if(broker->clean_session) {
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d005      	beq.n	8007a8a <mqtt_connect+0x96>
		flags |= MQTT_CLEAN_SESSION;
 8007a7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a82:	f043 0302 	orr.w	r3, r3, #2
 8007a86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	// Variable header
	uint8_t var_header[] = {
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	753b      	strb	r3, [r7, #20]
 8007a8e:	2306      	movs	r3, #6
 8007a90:	757b      	strb	r3, [r7, #21]
 8007a92:	234d      	movs	r3, #77	; 0x4d
 8007a94:	75bb      	strb	r3, [r7, #22]
 8007a96:	2351      	movs	r3, #81	; 0x51
 8007a98:	75fb      	strb	r3, [r7, #23]
 8007a9a:	2349      	movs	r3, #73	; 0x49
 8007a9c:	763b      	strb	r3, [r7, #24]
 8007a9e:	2373      	movs	r3, #115	; 0x73
 8007aa0:	767b      	strb	r3, [r7, #25]
 8007aa2:	2364      	movs	r3, #100	; 0x64
 8007aa4:	76bb      	strb	r3, [r7, #26]
 8007aa6:	2370      	movs	r3, #112	; 0x70
 8007aa8:	76fb      	strb	r3, [r7, #27]
 8007aaa:	2303      	movs	r3, #3
 8007aac:	773b      	strb	r3, [r7, #28]
 8007aae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007ab2:	777b      	strb	r3, [r7, #29]
		0x00,0x06,0x4d,0x51,0x49,0x73,0x64,0x70, // Protocol name: MQIsdp
		0x03, // Protocol version
		flags, // Connect flags
		broker->alive>>8, broker->alive&0xFF, // Keep alive
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
	uint8_t var_header[] = {
 8007aba:	0a1b      	lsrs	r3, r3, #8
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	77bb      	strb	r3, [r7, #30]
		broker->alive>>8, broker->alive&0xFF, // Keep alive
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
	uint8_t var_header[] = {
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	77fb      	strb	r3, [r7, #31]
	};


   	// Fixed header
    uint8_t fixedHeaderSize = 2;    // Default size = one byte Message Type + one byte Remaining Length
 8007acc:	2302      	movs	r3, #2
 8007ace:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    uint8_t remainLen = sizeof(var_header)+payload_len;
 8007ad2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	330c      	adds	r3, #12
 8007ad8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    if (remainLen > 127) {
 8007adc:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	da04      	bge.n	8007aee <mqtt_connect+0xfa>
        fixedHeaderSize++;          // add an additional byte for Remaining Length
 8007ae4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007ae8:	3301      	adds	r3, #1
 8007aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    }
    uint8_t fixed_header[fixedHeaderSize];
 8007aee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007af2:	4618      	mov	r0, r3
 8007af4:	4603      	mov	r3, r0
 8007af6:	3b01      	subs	r3, #1
 8007af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007afa:	b2c2      	uxtb	r2, r0
 8007afc:	f04f 0300 	mov.w	r3, #0
 8007b00:	00d9      	lsls	r1, r3, #3
 8007b02:	6079      	str	r1, [r7, #4]
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b0a:	6079      	str	r1, [r7, #4]
 8007b0c:	00d2      	lsls	r2, r2, #3
 8007b0e:	603a      	str	r2, [r7, #0]
 8007b10:	b2c2      	uxtb	r2, r0
 8007b12:	f04f 0300 	mov.w	r3, #0
 8007b16:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 8007b1a:	ea4b 7b52 	orr.w	fp, fp, r2, lsr #29
 8007b1e:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 8007b22:	4603      	mov	r3, r0
 8007b24:	3307      	adds	r3, #7
 8007b26:	08db      	lsrs	r3, r3, #3
 8007b28:	00db      	lsls	r3, r3, #3
 8007b2a:	ebad 0d03 	sub.w	sp, sp, r3
 8007b2e:	466b      	mov	r3, sp
 8007b30:	3300      	adds	r3, #0
 8007b32:	62bb      	str	r3, [r7, #40]	; 0x28
    
    // Message Type
    fixed_header[0] = MQTT_MSG_CONNECT;
 8007b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b36:	2210      	movs	r2, #16
 8007b38:	701a      	strb	r2, [r3, #0]

    // Remaining Length
    if (remainLen <= 127) {
 8007b3a:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	db04      	blt.n	8007b4c <mqtt_connect+0x158>
        fixed_header[1] = remainLen;
 8007b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b44:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8007b48:	705a      	strb	r2, [r3, #1]
 8007b4a:	e013      	b.n	8007b74 <mqtt_connect+0x180>
    } else {
        // first byte is remainder (mod) of 128, then set the MSB to indicate more bytes
        fixed_header[1] = remainLen % 128;
 8007b4c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b58:	705a      	strb	r2, [r3, #1]
        fixed_header[1] = fixed_header[1] | 0x80;
 8007b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5c:	785b      	ldrb	r3, [r3, #1]
 8007b5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b62:	b2da      	uxtb	r2, r3
 8007b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b66:	705a      	strb	r2, [r3, #1]
        // second byte is number of 128s
        fixed_header[2] = remainLen / 128;
 8007b68:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007b6c:	09db      	lsrs	r3, r3, #7
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	709a      	strb	r2, [r3, #2]
    }

	uint16_t offset = 0;
 8007b74:	2300      	movs	r3, #0
 8007b76:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+payload_len];
 8007b78:	4682      	mov	sl, r0
 8007b7a:	4652      	mov	r2, sl
 8007b7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007b7e:	4413      	add	r3, r2
 8007b80:	f103 060c 	add.w	r6, r3, #12
 8007b84:	4633      	mov	r3, r6
 8007b86:	3b01      	subs	r3, #1
 8007b88:	627b      	str	r3, [r7, #36]	; 0x24
 8007b8a:	4632      	mov	r2, r6
 8007b8c:	f04f 0300 	mov.w	r3, #0
 8007b90:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8007b94:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8007b98:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8007b9c:	4632      	mov	r2, r6
 8007b9e:	f04f 0300 	mov.w	r3, #0
 8007ba2:	00dd      	lsls	r5, r3, #3
 8007ba4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ba8:	00d4      	lsls	r4, r2, #3
 8007baa:	1df3      	adds	r3, r6, #7
 8007bac:	08db      	lsrs	r3, r3, #3
 8007bae:	00db      	lsls	r3, r3, #3
 8007bb0:	ebad 0d03 	sub.w	sp, sp, r3
 8007bb4:	466b      	mov	r3, sp
 8007bb6:	3300      	adds	r3, #0
 8007bb8:	623b      	str	r3, [r7, #32]
	memset(packet, 0, sizeof(packet));
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	4632      	mov	r2, r6
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7f8 fb1b 	bl	80001fc <memset>
	memcpy(packet, fixed_header, sizeof(fixed_header));
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bca:	4652      	mov	r2, sl
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7f8 fa9f 	bl	8000110 <memcpy>
	offset += sizeof(fixed_header);
 8007bd2:	fa1f f28a 	uxth.w	r2, sl
 8007bd6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007bd8:	4413      	add	r3, r2
 8007bda:	873b      	strh	r3, [r7, #56]	; 0x38
	memcpy(packet+offset, var_header, sizeof(var_header));
 8007bdc:	6a3a      	ldr	r2, [r7, #32]
 8007bde:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007be0:	4413      	add	r3, r2
 8007be2:	461c      	mov	r4, r3
 8007be4:	f107 0314 	add.w	r3, r7, #20
 8007be8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007bea:	6020      	str	r0, [r4, #0]
 8007bec:	6061      	str	r1, [r4, #4]
 8007bee:	60a2      	str	r2, [r4, #8]
	offset += sizeof(var_header);
 8007bf0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007bf2:	330c      	adds	r3, #12
 8007bf4:	873b      	strh	r3, [r7, #56]	; 0x38
	// Client ID - UTF encoded
	packet[offset++] = clientidlen>>8;
 8007bf6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007bf8:	1c5a      	adds	r2, r3, #1
 8007bfa:	873a      	strh	r2, [r7, #56]	; 0x38
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007c00:	0a1b      	lsrs	r3, r3, #8
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	b2d9      	uxtb	r1, r3
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	5499      	strb	r1, [r3, r2]
	packet[offset++] = clientidlen&0xFF;
 8007c0a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007c0c:	1c5a      	adds	r2, r3, #1
 8007c0e:	873a      	strh	r2, [r7, #56]	; 0x38
 8007c10:	461a      	mov	r2, r3
 8007c12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007c14:	b2d9      	uxtb	r1, r3
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	5499      	strb	r1, [r3, r2]
	memcpy(packet+offset, broker->clientid, clientidlen);
 8007c1a:	6a3a      	ldr	r2, [r7, #32]
 8007c1c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007c1e:	18d0      	adds	r0, r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3308      	adds	r3, #8
 8007c24:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007c26:	4619      	mov	r1, r3
 8007c28:	f7f8 fa72 	bl	8000110 <memcpy>
	offset += clientidlen;
 8007c2c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8007c2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007c30:	4413      	add	r3, r2
 8007c32:	873b      	strh	r3, [r7, #56]	; 0x38

	if(usernamelen) {
 8007c34:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d01e      	beq.n	8007c78 <mqtt_connect+0x284>
		// Username - UTF encoded
		packet[offset++] = usernamelen>>8;
 8007c3a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007c3c:	1c5a      	adds	r2, r3, #1
 8007c3e:	873a      	strh	r2, [r7, #56]	; 0x38
 8007c40:	461a      	mov	r2, r3
 8007c42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007c44:	0a1b      	lsrs	r3, r3, #8
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	b2d9      	uxtb	r1, r3
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	5499      	strb	r1, [r3, r2]
		packet[offset++] = usernamelen&0xFF;
 8007c4e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	873a      	strh	r2, [r7, #56]	; 0x38
 8007c54:	461a      	mov	r2, r3
 8007c56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007c58:	b2d9      	uxtb	r1, r3
 8007c5a:	6a3b      	ldr	r3, [r7, #32]
 8007c5c:	5499      	strb	r1, [r3, r2]
		memcpy(packet+offset, broker->username, usernamelen);
 8007c5e:	6a3a      	ldr	r2, [r7, #32]
 8007c60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007c62:	18d0      	adds	r0, r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	333a      	adds	r3, #58	; 0x3a
 8007c68:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	f7f8 fa50 	bl	8000110 <memcpy>
		offset += usernamelen;
 8007c70:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8007c72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007c74:	4413      	add	r3, r2
 8007c76:	873b      	strh	r3, [r7, #56]	; 0x38
	}

	if(passwordlen) {
 8007c78:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d01e      	beq.n	8007cbc <mqtt_connect+0x2c8>
		// Password - UTF encoded
		packet[offset++] = passwordlen>>8;
 8007c7e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	873a      	strh	r2, [r7, #56]	; 0x38
 8007c84:	461a      	mov	r2, r3
 8007c86:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007c88:	0a1b      	lsrs	r3, r3, #8
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	b2d9      	uxtb	r1, r3
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	5499      	strb	r1, [r3, r2]
		packet[offset++] = passwordlen&0xFF;
 8007c92:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007c94:	1c5a      	adds	r2, r3, #1
 8007c96:	873a      	strh	r2, [r7, #56]	; 0x38
 8007c98:	461a      	mov	r2, r3
 8007c9a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007c9c:	b2d9      	uxtb	r1, r3
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	5499      	strb	r1, [r3, r2]
		memcpy(packet+offset, broker->password, passwordlen);
 8007ca2:	6a3a      	ldr	r2, [r7, #32]
 8007ca4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007ca6:	18d0      	adds	r0, r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	3347      	adds	r3, #71	; 0x47
 8007cac:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8007cae:	4619      	mov	r1, r3
 8007cb0:	f7f8 fa2e 	bl	8000110 <memcpy>
		offset += passwordlen;
 8007cb4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8007cb6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007cb8:	4413      	add	r3, r2
 8007cba:	873b      	strh	r3, [r7, #56]	; 0x38
	}

	// Send the packet
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	6810      	ldr	r0, [r2, #0]
 8007cc4:	6a39      	ldr	r1, [r7, #32]
 8007cc6:	4632      	mov	r2, r6
 8007cc8:	4798      	blx	r3
 8007cca:	4603      	mov	r3, r0
 8007ccc:	42b3      	cmp	r3, r6
 8007cce:	d202      	bcs.n	8007cd6 <mqtt_connect+0x2e2>
		return -1;
 8007cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cd4:	e000      	b.n	8007cd8 <mqtt_connect+0x2e4>
	}

	return 1;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3744      	adds	r7, #68	; 0x44
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce6:	bf00      	nop

08007ce8 <mqtt_ping>:
	}

	return 1;
}

int mqtt_ping(mqtt_broker_handle_t* broker) {
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
	uint8_t packet[] = {
 8007cf0:	23c0      	movs	r3, #192	; 0xc0
 8007cf2:	733b      	strb	r3, [r7, #12]
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	737b      	strb	r3, [r7, #13]
		MQTT_MSG_PINGREQ, // Message Type, DUP flag, QoS level, Retain
		0x00 // Remaining length
	};

	// Send the packet
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	6810      	ldr	r0, [r2, #0]
 8007d00:	f107 010c 	add.w	r1, r7, #12
 8007d04:	2202      	movs	r2, #2
 8007d06:	4798      	blx	r3
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d802      	bhi.n	8007d14 <mqtt_ping+0x2c>
		return -1;
 8007d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d12:	e000      	b.n	8007d16 <mqtt_ping+0x2e>
	}

	return 1;
 8007d14:	2301      	movs	r3, #1
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop

08007d20 <mqtt_subscribe>:
	}

	return 1;
}

int mqtt_subscribe(mqtt_broker_handle_t* broker, const char* topic, uint16_t* message_id) {
 8007d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d24:	b08f      	sub	sp, #60	; 0x3c
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6178      	str	r0, [r7, #20]
 8007d2a:	6139      	str	r1, [r7, #16]
 8007d2c:	60fa      	str	r2, [r7, #12]
 8007d2e:	466b      	mov	r3, sp
 8007d30:	60bb      	str	r3, [r7, #8]
	uint16_t topiclen = strlen(topic);
 8007d32:	6938      	ldr	r0, [r7, #16]
 8007d34:	f7f8 fc8a 	bl	800064c <strlen>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	86fb      	strh	r3, [r7, #54]	; 0x36

	// Variable header
	uint8_t var_header[2]; // Message ID
	var_header[0] = broker->seq>>8;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d42:	0a1b      	lsrs	r3, r3, #8
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	f887 3020 	strb.w	r3, [r7, #32]
	var_header[1] = broker->seq&0xFF;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(message_id) { // Returning message id
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d004      	beq.n	8007d68 <mqtt_subscribe+0x48>
		*message_id = broker->seq;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	801a      	strh	r2, [r3, #0]
	}
	broker->seq++;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d6e:	3301      	adds	r3, #1
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	// utf topic
	uint8_t utf_topic[topiclen+3]; // Topic size (2 bytes), utf-encoded topic, QoS byte
 8007d78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d7a:	1cde      	adds	r6, r3, #3
 8007d7c:	1e73      	subs	r3, r6, #1
 8007d7e:	633b      	str	r3, [r7, #48]	; 0x30
 8007d80:	4633      	mov	r3, r6
 8007d82:	461a      	mov	r2, r3
 8007d84:	f04f 0300 	mov.w	r3, #0
 8007d88:	00d9      	lsls	r1, r3, #3
 8007d8a:	6079      	str	r1, [r7, #4]
 8007d8c:	6879      	ldr	r1, [r7, #4]
 8007d8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d92:	6079      	str	r1, [r7, #4]
 8007d94:	00d3      	lsls	r3, r2, #3
 8007d96:	603b      	str	r3, [r7, #0]
 8007d98:	4633      	mov	r3, r6
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	f04f 0300 	mov.w	r3, #0
 8007da0:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 8007da4:	ea4b 7b52 	orr.w	fp, fp, r2, lsr #29
 8007da8:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 8007dac:	4633      	mov	r3, r6
 8007dae:	3307      	adds	r3, #7
 8007db0:	08db      	lsrs	r3, r3, #3
 8007db2:	00db      	lsls	r3, r3, #3
 8007db4:	ebad 0d03 	sub.w	sp, sp, r3
 8007db8:	466b      	mov	r3, sp
 8007dba:	3300      	adds	r3, #0
 8007dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(utf_topic, 0, sizeof(utf_topic));
 8007dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc0:	4632      	mov	r2, r6
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7f8 fa19 	bl	80001fc <memset>
	utf_topic[0] = topiclen>>8;
 8007dca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007dcc:	0a1b      	lsrs	r3, r3, #8
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd4:	701a      	strb	r2, [r3, #0]
	utf_topic[1] = topiclen&0xFF;
 8007dd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ddc:	705a      	strb	r2, [r3, #1]
	memcpy(utf_topic+2, topic, topiclen);
 8007dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de0:	3302      	adds	r3, #2
 8007de2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007de4:	6939      	ldr	r1, [r7, #16]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7f8 f992 	bl	8000110 <memcpy>

	// Fixed header
	uint8_t fixed_header[] = {
 8007dec:	2382      	movs	r3, #130	; 0x82
 8007dee:	773b      	strb	r3, [r7, #28]
 8007df0:	b2f3      	uxtb	r3, r6
 8007df2:	3302      	adds	r3, #2
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	777b      	strb	r3, [r7, #29]
		MQTT_MSG_SUBSCRIBE | MQTT_QOS1_FLAG, // Message Type, DUP flag, QoS level, Retain
		sizeof(var_header)+sizeof(utf_topic)
	};

	uint8_t packet[sizeof(var_header)+sizeof(fixed_header)+sizeof(utf_topic)];
 8007df8:	4633      	mov	r3, r6
 8007dfa:	3303      	adds	r3, #3
 8007dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dfe:	4633      	mov	r3, r6
 8007e00:	3304      	adds	r3, #4
 8007e02:	461a      	mov	r2, r3
 8007e04:	f04f 0300 	mov.w	r3, #0
 8007e08:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8007e0c:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8007e10:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8007e14:	4633      	mov	r3, r6
 8007e16:	3304      	adds	r3, #4
 8007e18:	461a      	mov	r2, r3
 8007e1a:	f04f 0300 	mov.w	r3, #0
 8007e1e:	00dd      	lsls	r5, r3, #3
 8007e20:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e24:	00d4      	lsls	r4, r2, #3
 8007e26:	4633      	mov	r3, r6
 8007e28:	3304      	adds	r3, #4
 8007e2a:	3307      	adds	r3, #7
 8007e2c:	08db      	lsrs	r3, r3, #3
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	ebad 0d03 	sub.w	sp, sp, r3
 8007e34:	466b      	mov	r3, sp
 8007e36:	3300      	adds	r3, #0
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
	memset(packet, 0, sizeof(packet));
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	4632      	mov	r2, r6
 8007e3e:	3204      	adds	r2, #4
 8007e40:	2100      	movs	r1, #0
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7f8 f9da 	bl	80001fc <memset>
	memcpy(packet, fixed_header, sizeof(fixed_header));
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f107 031c 	add.w	r3, r7, #28
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	8013      	strh	r3, [r2, #0]
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
 8007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e56:	3302      	adds	r3, #2
 8007e58:	461a      	mov	r2, r3
 8007e5a:	f107 0320 	add.w	r3, r7, #32
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	8013      	strh	r3, [r2, #0]
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), utf_topic, sizeof(utf_topic));
 8007e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e64:	3304      	adds	r3, #4
 8007e66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e68:	4632      	mov	r2, r6
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7f8 f950 	bl	8000110 <memcpy>

	// Send the packet
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	6810      	ldr	r0, [r2, #0]
 8007e78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e7a:	4632      	mov	r2, r6
 8007e7c:	3204      	adds	r2, #4
 8007e7e:	4798      	blx	r3
 8007e80:	4603      	mov	r3, r0
 8007e82:	461a      	mov	r2, r3
 8007e84:	4633      	mov	r3, r6
 8007e86:	3304      	adds	r3, #4
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d202      	bcs.n	8007e92 <mqtt_subscribe+0x172>
		return -1;
 8007e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e90:	e000      	b.n	8007e94 <mqtt_subscribe+0x174>
	}

	return 1;
 8007e92:	2301      	movs	r3, #1
 8007e94:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	373c      	adds	r7, #60	; 0x3c
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea2:	bf00      	nop

08007ea4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f103 0208 	add.w	r2, r3, #8
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ebc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f103 0208 	add.w	r2, r3, #8
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f103 0208 	add.w	r2, r3, #8
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bc80      	pop	{r7}
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop

08007ee4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ef2:	bf00      	nop
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bc80      	pop	{r7}
 8007efa:	4770      	bx	lr

08007efc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	689a      	ldr	r2, [r3, #8]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	1c5a      	adds	r2, r3, #1
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	601a      	str	r2, [r3, #0]
}
 8007f38:	bf00      	nop
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bc80      	pop	{r7}
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop

08007f44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f5a:	d103      	bne.n	8007f64 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	60fb      	str	r3, [r7, #12]
 8007f62:	e00c      	b.n	8007f7e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3308      	adds	r3, #8
 8007f68:	60fb      	str	r3, [r7, #12]
 8007f6a:	e002      	b.n	8007f72 <vListInsert+0x2e>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	60fb      	str	r3, [r7, #12]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d9f6      	bls.n	8007f6c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	685a      	ldr	r2, [r3, #4]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	1c5a      	adds	r2, r3, #1
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	601a      	str	r2, [r3, #0]
}
 8007faa:	bf00      	nop
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bc80      	pop	{r7}
 8007fb2:	4770      	bx	lr

08007fb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	6892      	ldr	r2, [r2, #8]
 8007fca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	6852      	ldr	r2, [r2, #4]
 8007fd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d103      	bne.n	8007fe8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	689a      	ldr	r2, [r3, #8]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	1e5a      	subs	r2, r3, #1
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	bc80      	pop	{r7}
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop

08008008 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8008016:	f001 fa27 	bl	8009468 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008022:	68f9      	ldr	r1, [r7, #12]
 8008024:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008026:	fb01 f303 	mul.w	r3, r1, r3
 800802a:	441a      	add	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008046:	3b01      	subs	r3, #1
 8008048:	68f9      	ldr	r1, [r7, #12]
 800804a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800804c:	fb01 f303 	mul.w	r3, r1, r3
 8008050:	441a      	add	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	22ff      	movs	r2, #255	; 0xff
 800805a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	22ff      	movs	r2, #255	; 0xff
 8008062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d114      	bne.n	8008096 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d01a      	beq.n	80080aa <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	3310      	adds	r3, #16
 8008078:	4618      	mov	r0, r3
 800807a:	f000 fe5f 	bl	8008d3c <xTaskRemoveFromEventList>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d012      	beq.n	80080aa <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008084:	4b0c      	ldr	r3, [pc, #48]	; (80080b8 <xQueueGenericReset+0xb0>)
 8008086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800808a:	601a      	str	r2, [r3, #0]
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	e009      	b.n	80080aa <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	3310      	adds	r3, #16
 800809a:	4618      	mov	r0, r3
 800809c:	f7ff ff02 	bl	8007ea4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	3324      	adds	r3, #36	; 0x24
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7ff fefd 	bl	8007ea4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80080aa:	f001 f9f5 	bl	8009498 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80080ae:	2301      	movs	r3, #1
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	e000ed04 	and	lr, r0, r4, lsl #26

080080bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b08a      	sub	sp, #40	; 0x28
 80080c0:	af02      	add	r7, sp, #8
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	4613      	mov	r3, r2
 80080c8:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d102      	bne.n	80080d6 <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	61fb      	str	r3, [r7, #28]
 80080d4:	e004      	b.n	80080e0 <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	fb02 f303 	mul.w	r3, r2, r3
 80080de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	3348      	adds	r3, #72	; 0x48
 80080e4:	4618      	mov	r0, r3
 80080e6:	f001 fa51 	bl	800958c <pvPortMalloc>
 80080ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00d      	beq.n	800810e <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	3348      	adds	r3, #72	; 0x48
 80080fa:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080fc:	79fa      	ldrb	r2, [r7, #7]
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	4613      	mov	r3, r2
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	68b9      	ldr	r1, [r7, #8]
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f000 f805 	bl	8008118 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800810e:	69bb      	ldr	r3, [r7, #24]
	}
 8008110:	4618      	mov	r0, r3
 8008112:	3720      	adds	r7, #32
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d103      	bne.n	8008134 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	69ba      	ldr	r2, [r7, #24]
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	e002      	b.n	800813a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008146:	2101      	movs	r1, #1
 8008148:	69b8      	ldr	r0, [r7, #24]
 800814a:	f7ff ff5d 	bl	8008008 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800814e:	bf00      	nop
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop

08008158 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00e      	beq.n	8008184 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008178:	2300      	movs	r3, #0
 800817a:	2200      	movs	r2, #0
 800817c:	2100      	movs	r1, #0
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f81c 	bl	80081bc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008184:	bf00      	nop
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af00      	add	r7, sp, #0
 8008192:	4603      	mov	r3, r0
 8008194:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008196:	2301      	movs	r3, #1
 8008198:	617b      	str	r3, [r7, #20]
 800819a:	2300      	movs	r3, #0
 800819c:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800819e:	79fb      	ldrb	r3, [r7, #7]
 80081a0:	461a      	mov	r2, r3
 80081a2:	6939      	ldr	r1, [r7, #16]
 80081a4:	6978      	ldr	r0, [r7, #20]
 80081a6:	f7ff ff89 	bl	80080bc <xQueueGenericCreate>
 80081aa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f7ff ffd3 	bl	8008158 <prvInitialiseMutex>

		return xNewQueue;
 80081b2:	68fb      	ldr	r3, [r7, #12]
	}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b08a      	sub	sp, #40	; 0x28
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
 80081c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80081ca:	2300      	movs	r3, #0
 80081cc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081d2:	f001 f949 	bl	8009468 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081d6:	6a3b      	ldr	r3, [r7, #32]
 80081d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081da:	6a3b      	ldr	r3, [r7, #32]
 80081dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081de:	429a      	cmp	r2, r3
 80081e0:	d302      	bcc.n	80081e8 <xQueueGenericSend+0x2c>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d129      	bne.n	800823c <xQueueGenericSend+0x80>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081e8:	683a      	ldr	r2, [r7, #0]
 80081ea:	68b9      	ldr	r1, [r7, #8]
 80081ec:	6a38      	ldr	r0, [r7, #32]
 80081ee:	f000 f96f 	bl	80084d0 <prvCopyDataToQueue>
 80081f2:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d010      	beq.n	800821e <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	3324      	adds	r3, #36	; 0x24
 8008200:	4618      	mov	r0, r3
 8008202:	f000 fd9b 	bl	8008d3c <xTaskRemoveFromEventList>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d013      	beq.n	8008234 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800820c:	4b3f      	ldr	r3, [pc, #252]	; (800830c <xQueueGenericSend+0x150>)
 800820e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	e00a      	b.n	8008234 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d007      	beq.n	8008234 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008224:	4b39      	ldr	r3, [pc, #228]	; (800830c <xQueueGenericSend+0x150>)
 8008226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008234:	f001 f930 	bl	8009498 <vPortExitCritical>
				return pdPASS;
 8008238:	2301      	movs	r3, #1
 800823a:	e063      	b.n	8008304 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d103      	bne.n	800824a <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008242:	f001 f929 	bl	8009498 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008246:	2300      	movs	r3, #0
 8008248:	e05c      	b.n	8008304 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	2b00      	cmp	r3, #0
 800824e:	d106      	bne.n	800825e <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008250:	f107 0314 	add.w	r3, r7, #20
 8008254:	4618      	mov	r0, r3
 8008256:	f000 fdc5 	bl	8008de4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800825a:	2301      	movs	r3, #1
 800825c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800825e:	f001 f91b 	bl	8009498 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008262:	f000 fba5 	bl	80089b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008266:	f001 f8ff 	bl	8009468 <vPortEnterCritical>
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008270:	b25b      	sxtb	r3, r3
 8008272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008276:	d103      	bne.n	8008280 <xQueueGenericSend+0xc4>
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008286:	b25b      	sxtb	r3, r3
 8008288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800828c:	d103      	bne.n	8008296 <xQueueGenericSend+0xda>
 800828e:	6a3b      	ldr	r3, [r7, #32]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008296:	f001 f8ff 	bl	8009498 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800829a:	1d3a      	adds	r2, r7, #4
 800829c:	f107 0314 	add.w	r3, r7, #20
 80082a0:	4611      	mov	r1, r2
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 fdb4 	bl	8008e10 <xTaskCheckForTimeOut>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d124      	bne.n	80082f8 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80082ae:	6a38      	ldr	r0, [r7, #32]
 80082b0:	f000 f9e0 	bl	8008674 <prvIsQueueFull>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d018      	beq.n	80082ec <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082ba:	6a3b      	ldr	r3, [r7, #32]
 80082bc:	3310      	adds	r3, #16
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	4611      	mov	r1, r2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fd24 	bl	8008d10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082c8:	6a38      	ldr	r0, [r7, #32]
 80082ca:	f000 f96b 	bl	80085a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082ce:	f000 fb7d 	bl	80089cc <xTaskResumeAll>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f47f af7c 	bne.w	80081d2 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 80082da:	4b0c      	ldr	r3, [pc, #48]	; (800830c <xQueueGenericSend+0x150>)
 80082dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	e772      	b.n	80081d2 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082ec:	6a38      	ldr	r0, [r7, #32]
 80082ee:	f000 f959 	bl	80085a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082f2:	f000 fb6b 	bl	80089cc <xTaskResumeAll>
 80082f6:	e76c      	b.n	80081d2 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082f8:	6a38      	ldr	r0, [r7, #32]
 80082fa:	f000 f953 	bl	80085a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082fe:	f000 fb65 	bl	80089cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008302:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008304:	4618      	mov	r0, r3
 8008306:	3728      	adds	r7, #40	; 0x28
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	e000ed04 	and	lr, r0, r4, lsl #26

08008310 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b08a      	sub	sp, #40	; 0x28
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800831a:	2300      	movs	r3, #0
 800831c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008322:	2300      	movs	r3, #0
 8008324:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008326:	f001 f89f 	bl	8009468 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832e:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d024      	beq.n	8008380 <xQueueSemaphoreTake+0x70>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	1e5a      	subs	r2, r3, #1
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d104      	bne.n	8008350 <xQueueSemaphoreTake+0x40>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008346:	f000 ff89 	bl	800925c <pvTaskIncrementMutexHeldCount>
 800834a:	4602      	mov	r2, r0
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00f      	beq.n	8008378 <xQueueSemaphoreTake+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	3310      	adds	r3, #16
 800835c:	4618      	mov	r0, r3
 800835e:	f000 fced 	bl	8008d3c <xTaskRemoveFromEventList>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d007      	beq.n	8008378 <xQueueSemaphoreTake+0x68>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008368:	4b4c      	ldr	r3, [pc, #304]	; (800849c <xQueueSemaphoreTake+0x18c>)
 800836a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008378:	f001 f88e 	bl	8009498 <vPortExitCritical>
				return pdPASS;
 800837c:	2301      	movs	r3, #1
 800837e:	e089      	b.n	8008494 <xQueueSemaphoreTake+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d103      	bne.n	800838e <xQueueSemaphoreTake+0x7e>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008386:	f001 f887 	bl	8009498 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800838a:	2300      	movs	r3, #0
 800838c:	e082      	b.n	8008494 <xQueueSemaphoreTake+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	2b00      	cmp	r3, #0
 8008392:	d106      	bne.n	80083a2 <xQueueSemaphoreTake+0x92>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008394:	f107 030c 	add.w	r3, r7, #12
 8008398:	4618      	mov	r0, r3
 800839a:	f000 fd23 	bl	8008de4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800839e:	2301      	movs	r3, #1
 80083a0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083a2:	f001 f879 	bl	8009498 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083a6:	f000 fb03 	bl	80089b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083aa:	f001 f85d 	bl	8009468 <vPortEnterCritical>
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083b4:	b25b      	sxtb	r3, r3
 80083b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083ba:	d103      	bne.n	80083c4 <xQueueSemaphoreTake+0xb4>
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083ca:	b25b      	sxtb	r3, r3
 80083cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083d0:	d103      	bne.n	80083da <xQueueSemaphoreTake+0xca>
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083da:	f001 f85d 	bl	8009498 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083de:	463a      	mov	r2, r7
 80083e0:	f107 030c 	add.w	r3, r7, #12
 80083e4:	4611      	mov	r1, r2
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 fd12 	bl	8008e10 <xTaskCheckForTimeOut>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d132      	bne.n	8008458 <xQueueSemaphoreTake+0x148>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083f2:	69f8      	ldr	r0, [r7, #28]
 80083f4:	f000 f928 	bl	8008648 <prvIsQueueEmpty>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d026      	beq.n	800844c <xQueueSemaphoreTake+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d109      	bne.n	800841a <xQueueSemaphoreTake+0x10a>
					{
						taskENTER_CRITICAL();
 8008406:	f001 f82f 	bl	8009468 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	4618      	mov	r0, r3
 8008410:	f000 fdc8 	bl	8008fa4 <xTaskPriorityInherit>
 8008414:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8008416:	f001 f83f 	bl	8009498 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	3324      	adds	r3, #36	; 0x24
 800841e:	683a      	ldr	r2, [r7, #0]
 8008420:	4611      	mov	r1, r2
 8008422:	4618      	mov	r0, r3
 8008424:	f000 fc74 	bl	8008d10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008428:	69f8      	ldr	r0, [r7, #28]
 800842a:	f000 f8bb 	bl	80085a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800842e:	f000 facd 	bl	80089cc <xTaskResumeAll>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	f47f af76 	bne.w	8008326 <xQueueSemaphoreTake+0x16>
				{
					portYIELD_WITHIN_API();
 800843a:	4b18      	ldr	r3, [pc, #96]	; (800849c <xQueueSemaphoreTake+0x18c>)
 800843c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008440:	601a      	str	r2, [r3, #0]
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	e76c      	b.n	8008326 <xQueueSemaphoreTake+0x16>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800844c:	69f8      	ldr	r0, [r7, #28]
 800844e:	f000 f8a9 	bl	80085a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008452:	f000 fabb 	bl	80089cc <xTaskResumeAll>
 8008456:	e766      	b.n	8008326 <xQueueSemaphoreTake+0x16>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008458:	69f8      	ldr	r0, [r7, #28]
 800845a:	f000 f8a3 	bl	80085a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800845e:	f000 fab5 	bl	80089cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008462:	69f8      	ldr	r0, [r7, #28]
 8008464:	f000 f8f0 	bl	8008648 <prvIsQueueEmpty>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	f43f af5b 	beq.w	8008326 <xQueueSemaphoreTake+0x16>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00d      	beq.n	8008492 <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
 8008476:	f000 fff7 	bl	8009468 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800847a:	69f8      	ldr	r0, [r7, #28]
 800847c:	f000 f810 	bl	80084a0 <prvGetDisinheritPriorityAfterTimeout>
 8008480:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	6979      	ldr	r1, [r7, #20]
 8008488:	4618      	mov	r0, r3
 800848a:	f000 fe6f 	bl	800916c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800848e:	f001 f803 	bl	8009498 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008492:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008494:	4618      	mov	r0, r3
 8008496:	3728      	adds	r7, #40	; 0x28
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	e000ed04 	and	lr, r0, r4, lsl #26

080084a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d006      	beq.n	80084be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f1c3 0305 	rsb	r3, r3, #5
 80084ba:	60fb      	str	r3, [r7, #12]
 80084bc:	e001      	b.n	80084c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80084be:	2300      	movs	r3, #0
 80084c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80084c2:	68fb      	ldr	r3, [r7, #12]
	}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bc80      	pop	{r7}
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop

080084d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80084dc:	2300      	movs	r3, #0
 80084de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d10d      	bne.n	800850a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d14d      	bne.n	8008592 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 fdd2 	bl	80090a4 <xTaskPriorityDisinherit>
 8008500:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	609a      	str	r2, [r3, #8]
 8008508:	e043      	b.n	8008592 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d119      	bne.n	8008544 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6858      	ldr	r0, [r3, #4]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008518:	461a      	mov	r2, r3
 800851a:	68b9      	ldr	r1, [r7, #8]
 800851c:	f7f7 fdf8 	bl	8000110 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008528:	441a      	add	r2, r3
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	429a      	cmp	r2, r3
 8008538:	d32b      	bcc.n	8008592 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	605a      	str	r2, [r3, #4]
 8008542:	e026      	b.n	8008592 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	68d8      	ldr	r0, [r3, #12]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854c:	461a      	mov	r2, r3
 800854e:	68b9      	ldr	r1, [r7, #8]
 8008550:	f7f7 fdde 	bl	8000110 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	68da      	ldr	r2, [r3, #12]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855c:	425b      	negs	r3, r3
 800855e:	441a      	add	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	68da      	ldr	r2, [r3, #12]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	429a      	cmp	r2, r3
 800856e:	d207      	bcs.n	8008580 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	689a      	ldr	r2, [r3, #8]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008578:	425b      	negs	r3, r3
 800857a:	441a      	add	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b02      	cmp	r3, #2
 8008584:	d105      	bne.n	8008592 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d002      	beq.n	8008592 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	3b01      	subs	r3, #1
 8008590:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	1c5a      	adds	r2, r3, #1
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800859a:	697b      	ldr	r3, [r7, #20]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3718      	adds	r7, #24
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085ac:	f000 ff5c 	bl	8009468 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085b8:	e011      	b.n	80085de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d012      	beq.n	80085e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	3324      	adds	r3, #36	; 0x24
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 fbb8 	bl	8008d3c <xTaskRemoveFromEventList>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80085d2:	f000 fc63 	bl	8008e9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
 80085d8:	3b01      	subs	r3, #1
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	dce9      	bgt.n	80085ba <prvUnlockQueue+0x16>
 80085e6:	e000      	b.n	80085ea <prvUnlockQueue+0x46>
					break;
 80085e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	22ff      	movs	r2, #255	; 0xff
 80085ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80085f2:	f000 ff51 	bl	8009498 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80085f6:	f000 ff37 	bl	8009468 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008600:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008602:	e011      	b.n	8008628 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d012      	beq.n	8008632 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	3310      	adds	r3, #16
 8008610:	4618      	mov	r0, r3
 8008612:	f000 fb93 	bl	8008d3c <xTaskRemoveFromEventList>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800861c:	f000 fc3e 	bl	8008e9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008620:	7bbb      	ldrb	r3, [r7, #14]
 8008622:	3b01      	subs	r3, #1
 8008624:	b2db      	uxtb	r3, r3
 8008626:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008628:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800862c:	2b00      	cmp	r3, #0
 800862e:	dce9      	bgt.n	8008604 <prvUnlockQueue+0x60>
 8008630:	e000      	b.n	8008634 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008632:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	22ff      	movs	r2, #255	; 0xff
 8008638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800863c:	f000 ff2c 	bl	8009498 <vPortExitCritical>
}
 8008640:	bf00      	nop
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008650:	f000 ff0a 	bl	8009468 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008658:	2b00      	cmp	r3, #0
 800865a:	d102      	bne.n	8008662 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800865c:	2301      	movs	r3, #1
 800865e:	60fb      	str	r3, [r7, #12]
 8008660:	e001      	b.n	8008666 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008662:	2300      	movs	r3, #0
 8008664:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008666:	f000 ff17 	bl	8009498 <vPortExitCritical>

	return xReturn;
 800866a:	68fb      	ldr	r3, [r7, #12]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800867c:	f000 fef4 	bl	8009468 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008688:	429a      	cmp	r2, r3
 800868a:	d102      	bne.n	8008692 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800868c:	2301      	movs	r3, #1
 800868e:	60fb      	str	r3, [r7, #12]
 8008690:	e001      	b.n	8008696 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008692:	2300      	movs	r3, #0
 8008694:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008696:	f000 feff 	bl	8009498 <vPortExitCritical>

	return xReturn;
 800869a:	68fb      	ldr	r3, [r7, #12]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08c      	sub	sp, #48	; 0x30
 80086a8:	af04      	add	r7, sp, #16
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	603b      	str	r3, [r7, #0]
 80086b0:	4613      	mov	r3, r2
 80086b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80086b4:	88fb      	ldrh	r3, [r7, #6]
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 ff67 	bl	800958c <pvPortMalloc>
 80086be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00e      	beq.n	80086e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80086c6:	2054      	movs	r0, #84	; 0x54
 80086c8:	f000 ff60 	bl	800958c <pvPortMalloc>
 80086cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d003      	beq.n	80086dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	631a      	str	r2, [r3, #48]	; 0x30
 80086da:	e005      	b.n	80086e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80086dc:	6978      	ldr	r0, [r7, #20]
 80086de:	f000 ff9b 	bl	8009618 <vPortFree>
 80086e2:	e001      	b.n	80086e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80086e4:	2300      	movs	r3, #0
 80086e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d013      	beq.n	8008716 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80086ee:	88fa      	ldrh	r2, [r7, #6]
 80086f0:	2300      	movs	r3, #0
 80086f2:	9303      	str	r3, [sp, #12]
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	9302      	str	r3, [sp, #8]
 80086f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fa:	9301      	str	r3, [sp, #4]
 80086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	68b9      	ldr	r1, [r7, #8]
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f000 f80f 	bl	8008728 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800870a:	69f8      	ldr	r0, [r7, #28]
 800870c:	f000 f88c 	bl	8008828 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008710:	2301      	movs	r3, #1
 8008712:	61bb      	str	r3, [r7, #24]
 8008714:	e002      	b.n	800871c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800871a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800871c:	69bb      	ldr	r3, [r7, #24]
	}
 800871e:	4618      	mov	r0, r3
 8008720:	3720      	adds	r7, #32
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop

08008728 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
 8008734:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008738:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	461a      	mov	r2, r3
 8008740:	21a5      	movs	r1, #165	; 0xa5
 8008742:	f7f7 fd5b 	bl	80001fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008750:	3b01      	subs	r3, #1
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	f023 0307 	bic.w	r3, r3, #7
 800875e:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d01f      	beq.n	80087a6 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008766:	2300      	movs	r3, #0
 8008768:	617b      	str	r3, [r7, #20]
 800876a:	e012      	b.n	8008792 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	4413      	add	r3, r2
 8008772:	7819      	ldrb	r1, [r3, #0]
 8008774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	4413      	add	r3, r2
 800877a:	3334      	adds	r3, #52	; 0x34
 800877c:	460a      	mov	r2, r1
 800877e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	4413      	add	r3, r2
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d006      	beq.n	800879a <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	3301      	adds	r3, #1
 8008790:	617b      	str	r3, [r7, #20]
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	2b0f      	cmp	r3, #15
 8008796:	d9e9      	bls.n	800876c <prvInitialiseNewTask+0x44>
 8008798:	e000      	b.n	800879c <prvInitialiseNewTask+0x74>
			{
				break;
 800879a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087a4:	e003      	b.n	80087ae <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	d901      	bls.n	80087b8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80087b4:	2304      	movs	r3, #4
 80087b6:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80087b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ba:	6a3a      	ldr	r2, [r7, #32]
 80087bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80087be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c0:	6a3a      	ldr	r2, [r7, #32]
 80087c2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80087c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c6:	2200      	movs	r2, #0
 80087c8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	3304      	adds	r3, #4
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7ff fb88 	bl	8007ee4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80087d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d6:	3318      	adds	r3, #24
 80087d8:	4618      	mov	r0, r3
 80087da:	f7ff fb83 	bl	8007ee4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80087de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087e4:	6a3b      	ldr	r3, [r7, #32]
 80087e6:	f1c3 0205 	rsb	r2, r3, #5
 80087ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80087ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80087f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f6:	2200      	movs	r2, #0
 80087f8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	68f9      	ldr	r1, [r7, #12]
 8008806:	6938      	ldr	r0, [r7, #16]
 8008808:	f000 fda2 	bl	8009350 <pxPortInitialiseStack>
 800880c:	4602      	mov	r2, r0
 800880e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008810:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008814:	2b00      	cmp	r3, #0
 8008816:	d002      	beq.n	800881e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800881c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800881e:	bf00      	nop
 8008820:	3718      	adds	r7, #24
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop

08008828 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008830:	f000 fe1a 	bl	8009468 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008834:	4b2a      	ldr	r3, [pc, #168]	; (80088e0 <prvAddNewTaskToReadyList+0xb8>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	3301      	adds	r3, #1
 800883a:	4a29      	ldr	r2, [pc, #164]	; (80088e0 <prvAddNewTaskToReadyList+0xb8>)
 800883c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800883e:	4b29      	ldr	r3, [pc, #164]	; (80088e4 <prvAddNewTaskToReadyList+0xbc>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d109      	bne.n	800885a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008846:	4a27      	ldr	r2, [pc, #156]	; (80088e4 <prvAddNewTaskToReadyList+0xbc>)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800884c:	4b24      	ldr	r3, [pc, #144]	; (80088e0 <prvAddNewTaskToReadyList+0xb8>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d110      	bne.n	8008876 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008854:	f000 fb46 	bl	8008ee4 <prvInitialiseTaskLists>
 8008858:	e00d      	b.n	8008876 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800885a:	4b23      	ldr	r3, [pc, #140]	; (80088e8 <prvAddNewTaskToReadyList+0xc0>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d109      	bne.n	8008876 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008862:	4b20      	ldr	r3, [pc, #128]	; (80088e4 <prvAddNewTaskToReadyList+0xbc>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886c:	429a      	cmp	r2, r3
 800886e:	d802      	bhi.n	8008876 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008870:	4a1c      	ldr	r2, [pc, #112]	; (80088e4 <prvAddNewTaskToReadyList+0xbc>)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008876:	4b1d      	ldr	r3, [pc, #116]	; (80088ec <prvAddNewTaskToReadyList+0xc4>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3301      	adds	r3, #1
 800887c:	4a1b      	ldr	r2, [pc, #108]	; (80088ec <prvAddNewTaskToReadyList+0xc4>)
 800887e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008884:	2201      	movs	r2, #1
 8008886:	409a      	lsls	r2, r3
 8008888:	4b19      	ldr	r3, [pc, #100]	; (80088f0 <prvAddNewTaskToReadyList+0xc8>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4313      	orrs	r3, r2
 800888e:	4a18      	ldr	r2, [pc, #96]	; (80088f0 <prvAddNewTaskToReadyList+0xc8>)
 8008890:	6013      	str	r3, [r2, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008896:	4613      	mov	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4a15      	ldr	r2, [pc, #84]	; (80088f4 <prvAddNewTaskToReadyList+0xcc>)
 80088a0:	441a      	add	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	3304      	adds	r3, #4
 80088a6:	4619      	mov	r1, r3
 80088a8:	4610      	mov	r0, r2
 80088aa:	f7ff fb27 	bl	8007efc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80088ae:	f000 fdf3 	bl	8009498 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80088b2:	4b0d      	ldr	r3, [pc, #52]	; (80088e8 <prvAddNewTaskToReadyList+0xc0>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00e      	beq.n	80088d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80088ba:	4b0a      	ldr	r3, [pc, #40]	; (80088e4 <prvAddNewTaskToReadyList+0xbc>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d207      	bcs.n	80088d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80088c8:	4b0b      	ldr	r3, [pc, #44]	; (80088f8 <prvAddNewTaskToReadyList+0xd0>)
 80088ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ce:	601a      	str	r2, [r3, #0]
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088d8:	bf00      	nop
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	20000210 	andcs	r0, r0, r0, lsl r2
 80088e4:	20000150 	andcs	r0, r0, r0, asr r1
 80088e8:	2000021c 	andcs	r0, r0, ip, lsl r2
 80088ec:	2000022c 	andcs	r0, r0, ip, lsr #4
 80088f0:	20000218 	andcs	r0, r0, r8, lsl r2
 80088f4:	20000154 	andcs	r0, r0, r4, asr r1
 80088f8:	e000ed04 	and	lr, r0, r4, lsl #26

080088fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008904:	2300      	movs	r3, #0
 8008906:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d008      	beq.n	8008920 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 800890e:	f000 f84f 	bl	80089b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008912:	2100      	movs	r1, #0
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fcb5 	bl	8009284 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800891a:	f000 f857 	bl	80089cc <xTaskResumeAll>
 800891e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d107      	bne.n	8008936 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8008926:	4b06      	ldr	r3, [pc, #24]	; (8008940 <vTaskDelay+0x44>)
 8008928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008936:	bf00      	nop
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	e000ed04 	and	lr, r0, r4, lsl #26

08008944 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800894a:	4b13      	ldr	r3, [pc, #76]	; (8008998 <vTaskStartScheduler+0x54>)
 800894c:	9301      	str	r3, [sp, #4]
 800894e:	2300      	movs	r3, #0
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	2300      	movs	r3, #0
 8008954:	2280      	movs	r2, #128	; 0x80
 8008956:	4911      	ldr	r1, [pc, #68]	; (800899c <vTaskStartScheduler+0x58>)
 8008958:	4811      	ldr	r0, [pc, #68]	; (80089a0 <vTaskStartScheduler+0x5c>)
 800895a:	f7ff fea3 	bl	80086a4 <xTaskCreate>
 800895e:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d114      	bne.n	8008990 <vTaskStartScheduler+0x4c>
 8008966:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800896a:	f383 8811 	msr	BASEPRI, r3
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008978:	4b0a      	ldr	r3, [pc, #40]	; (80089a4 <vTaskStartScheduler+0x60>)
 800897a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800897e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008980:	4b09      	ldr	r3, [pc, #36]	; (80089a8 <vTaskStartScheduler+0x64>)
 8008982:	2201      	movs	r2, #1
 8008984:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008986:	4b09      	ldr	r3, [pc, #36]	; (80089ac <vTaskStartScheduler+0x68>)
 8008988:	2200      	movs	r2, #0
 800898a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800898c:	f000 fd4c 	bl	8009428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	20000234 	andcs	r0, r0, r4, lsr r2
 800899c:	08009880 	stmdaeq	r0, {r7, fp, ip, pc}
 80089a0:	08008eb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r9, sl, fp, pc}
 80089a4:	20000230 	andcs	r0, r0, r0, lsr r2
 80089a8:	2000021c 	andcs	r0, r0, ip, lsl r2
 80089ac:	20000214 	andcs	r0, r0, r4, lsl r2

080089b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80089b0:	b480      	push	{r7}
 80089b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80089b4:	4b04      	ldr	r3, [pc, #16]	; (80089c8 <vTaskSuspendAll+0x18>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	3301      	adds	r3, #1
 80089ba:	4a03      	ldr	r2, [pc, #12]	; (80089c8 <vTaskSuspendAll+0x18>)
 80089bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80089be:	bf00      	nop
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bc80      	pop	{r7}
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	20000238 	andcs	r0, r0, r8, lsr r2

080089cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80089d2:	2300      	movs	r3, #0
 80089d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80089d6:	2300      	movs	r3, #0
 80089d8:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80089da:	f000 fd45 	bl	8009468 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80089de:	4b39      	ldr	r3, [pc, #228]	; (8008ac4 <xTaskResumeAll+0xf8>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	3b01      	subs	r3, #1
 80089e4:	4a37      	ldr	r2, [pc, #220]	; (8008ac4 <xTaskResumeAll+0xf8>)
 80089e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089e8:	4b36      	ldr	r3, [pc, #216]	; (8008ac4 <xTaskResumeAll+0xf8>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d161      	bne.n	8008ab4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80089f0:	4b35      	ldr	r3, [pc, #212]	; (8008ac8 <xTaskResumeAll+0xfc>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d05d      	beq.n	8008ab4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089f8:	e02e      	b.n	8008a58 <xTaskResumeAll+0x8c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089fa:	4b34      	ldr	r3, [pc, #208]	; (8008acc <xTaskResumeAll+0x100>)
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	3318      	adds	r3, #24
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7ff fad4 	bl	8007fb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	3304      	adds	r3, #4
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7ff facf 	bl	8007fb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	409a      	lsls	r2, r3
 8008a1e:	4b2c      	ldr	r3, [pc, #176]	; (8008ad0 <xTaskResumeAll+0x104>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	4a2a      	ldr	r2, [pc, #168]	; (8008ad0 <xTaskResumeAll+0x104>)
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4a27      	ldr	r2, [pc, #156]	; (8008ad4 <xTaskResumeAll+0x108>)
 8008a36:	441a      	add	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	3304      	adds	r3, #4
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	4610      	mov	r0, r2
 8008a40:	f7ff fa5c 	bl	8007efc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a48:	4b23      	ldr	r3, [pc, #140]	; (8008ad8 <xTaskResumeAll+0x10c>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d302      	bcc.n	8008a58 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
 8008a52:	4b22      	ldr	r3, [pc, #136]	; (8008adc <xTaskResumeAll+0x110>)
 8008a54:	2201      	movs	r2, #1
 8008a56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a58:	4b1c      	ldr	r3, [pc, #112]	; (8008acc <xTaskResumeAll+0x100>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1cc      	bne.n	80089fa <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a66:	f000 fa7d 	bl	8008f64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008a6a:	4b1d      	ldr	r3, [pc, #116]	; (8008ae0 <xTaskResumeAll+0x114>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d010      	beq.n	8008a98 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a76:	f000 f837 	bl	8008ae8 <xTaskIncrementTick>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d002      	beq.n	8008a86 <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
 8008a80:	4b16      	ldr	r3, [pc, #88]	; (8008adc <xTaskResumeAll+0x110>)
 8008a82:	2201      	movs	r2, #1
 8008a84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1f1      	bne.n	8008a76 <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
 8008a92:	4b13      	ldr	r3, [pc, #76]	; (8008ae0 <xTaskResumeAll+0x114>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a98:	4b10      	ldr	r3, [pc, #64]	; (8008adc <xTaskResumeAll+0x110>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d009      	beq.n	8008ab4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008aa4:	4b0f      	ldr	r3, [pc, #60]	; (8008ae4 <xTaskResumeAll+0x118>)
 8008aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ab4:	f000 fcf0 	bl	8009498 <vPortExitCritical>

	return xAlreadyYielded;
 8008ab8:	68bb      	ldr	r3, [r7, #8]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	20000238 	andcs	r0, r0, r8, lsr r2
 8008ac8:	20000210 	andcs	r0, r0, r0, lsl r2
 8008acc:	200001e8 	andcs	r0, r0, r8, ror #3
 8008ad0:	20000218 	andcs	r0, r0, r8, lsl r2
 8008ad4:	20000154 	andcs	r0, r0, r4, asr r1
 8008ad8:	20000150 	andcs	r0, r0, r0, asr r1
 8008adc:	20000224 	andcs	r0, r0, r4, lsr #4
 8008ae0:	20000220 	andcs	r0, r0, r0, lsr #4
 8008ae4:	e000ed04 	and	lr, r0, r4, lsl #26

08008ae8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008aee:	2300      	movs	r3, #0
 8008af0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008af2:	4b46      	ldr	r3, [pc, #280]	; (8008c0c <xTaskIncrementTick+0x124>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d177      	bne.n	8008bea <xTaskIncrementTick+0x102>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008afa:	4b45      	ldr	r3, [pc, #276]	; (8008c10 <xTaskIncrementTick+0x128>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3301      	adds	r3, #1
 8008b00:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b02:	4a43      	ldr	r2, [pc, #268]	; (8008c10 <xTaskIncrementTick+0x128>)
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d110      	bne.n	8008b30 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b0e:	4b41      	ldr	r3, [pc, #260]	; (8008c14 <xTaskIncrementTick+0x12c>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	4b40      	ldr	r3, [pc, #256]	; (8008c18 <xTaskIncrementTick+0x130>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a3e      	ldr	r2, [pc, #248]	; (8008c14 <xTaskIncrementTick+0x12c>)
 8008b1a:	6013      	str	r3, [r2, #0]
 8008b1c:	4a3e      	ldr	r2, [pc, #248]	; (8008c18 <xTaskIncrementTick+0x130>)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6013      	str	r3, [r2, #0]
 8008b22:	4b3e      	ldr	r3, [pc, #248]	; (8008c1c <xTaskIncrementTick+0x134>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	3301      	adds	r3, #1
 8008b28:	4a3c      	ldr	r2, [pc, #240]	; (8008c1c <xTaskIncrementTick+0x134>)
 8008b2a:	6013      	str	r3, [r2, #0]
 8008b2c:	f000 fa1a 	bl	8008f64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b30:	4b3b      	ldr	r3, [pc, #236]	; (8008c20 <xTaskIncrementTick+0x138>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d348      	bcc.n	8008bcc <xTaskIncrementTick+0xe4>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b3a:	4b36      	ldr	r3, [pc, #216]	; (8008c14 <xTaskIncrementTick+0x12c>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d104      	bne.n	8008b4e <xTaskIncrementTick+0x66>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b44:	4b36      	ldr	r3, [pc, #216]	; (8008c20 <xTaskIncrementTick+0x138>)
 8008b46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b4a:	601a      	str	r2, [r3, #0]
					break;
 8008b4c:	e03e      	b.n	8008bcc <xTaskIncrementTick+0xe4>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b4e:	4b31      	ldr	r3, [pc, #196]	; (8008c14 <xTaskIncrementTick+0x12c>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d203      	bcs.n	8008b6e <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b66:	4a2e      	ldr	r2, [pc, #184]	; (8008c20 <xTaskIncrementTick+0x138>)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b6c:	e02e      	b.n	8008bcc <xTaskIncrementTick+0xe4>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	3304      	adds	r3, #4
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7ff fa1e 	bl	8007fb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d004      	beq.n	8008b8a <xTaskIncrementTick+0xa2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	3318      	adds	r3, #24
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7ff fa15 	bl	8007fb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8e:	2201      	movs	r2, #1
 8008b90:	409a      	lsls	r2, r3
 8008b92:	4b24      	ldr	r3, [pc, #144]	; (8008c24 <xTaskIncrementTick+0x13c>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	4a22      	ldr	r2, [pc, #136]	; (8008c24 <xTaskIncrementTick+0x13c>)
 8008b9a:	6013      	str	r3, [r2, #0]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4413      	add	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4a1f      	ldr	r2, [pc, #124]	; (8008c28 <xTaskIncrementTick+0x140>)
 8008baa:	441a      	add	r2, r3
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	3304      	adds	r3, #4
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	f7ff f9a2 	bl	8007efc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bbc:	4b1b      	ldr	r3, [pc, #108]	; (8008c2c <xTaskIncrementTick+0x144>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d3b9      	bcc.n	8008b3a <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 8008bca:	e7b6      	b.n	8008b3a <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bcc:	4b17      	ldr	r3, [pc, #92]	; (8008c2c <xTaskIncrementTick+0x144>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd2:	4915      	ldr	r1, [pc, #84]	; (8008c28 <xTaskIncrementTick+0x140>)
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	440b      	add	r3, r1
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d907      	bls.n	8008bf4 <xTaskIncrementTick+0x10c>
			{
				xSwitchRequired = pdTRUE;
 8008be4:	2301      	movs	r3, #1
 8008be6:	617b      	str	r3, [r7, #20]
 8008be8:	e004      	b.n	8008bf4 <xTaskIncrementTick+0x10c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008bea:	4b11      	ldr	r3, [pc, #68]	; (8008c30 <xTaskIncrementTick+0x148>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	4a0f      	ldr	r2, [pc, #60]	; (8008c30 <xTaskIncrementTick+0x148>)
 8008bf2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008bf4:	4b0f      	ldr	r3, [pc, #60]	; (8008c34 <xTaskIncrementTick+0x14c>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d001      	beq.n	8008c00 <xTaskIncrementTick+0x118>
		{
			xSwitchRequired = pdTRUE;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008c00:	697b      	ldr	r3, [r7, #20]
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3718      	adds	r7, #24
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	20000238 	andcs	r0, r0, r8, lsr r2
 8008c10:	20000214 	andcs	r0, r0, r4, lsl r2
 8008c14:	200001e0 	andcs	r0, r0, r0, ror #3
 8008c18:	200001e4 	andcs	r0, r0, r4, ror #3
 8008c1c:	20000228 	andcs	r0, r0, r8, lsr #4
 8008c20:	20000230 	andcs	r0, r0, r0, lsr r2
 8008c24:	20000218 	andcs	r0, r0, r8, lsl r2
 8008c28:	20000154 	andcs	r0, r0, r4, asr r1
 8008c2c:	20000150 	andcs	r0, r0, r0, asr r1
 8008c30:	20000220 	andcs	r0, r0, r0, lsr #4
 8008c34:	20000224 	andcs	r0, r0, r4, lsr #4

08008c38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c3e:	4b2f      	ldr	r3, [pc, #188]	; (8008cfc <vTaskSwitchContext+0xc4>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d003      	beq.n	8008c4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c46:	4b2e      	ldr	r3, [pc, #184]	; (8008d00 <vTaskSwitchContext+0xc8>)
 8008c48:	2201      	movs	r2, #1
 8008c4a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c4c:	e051      	b.n	8008cf2 <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 8008c4e:	4b2c      	ldr	r3, [pc, #176]	; (8008d00 <vTaskSwitchContext+0xc8>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008c54:	4b2b      	ldr	r3, [pc, #172]	; (8008d04 <vTaskSwitchContext+0xcc>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5a:	617b      	str	r3, [r7, #20]
 8008c5c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8008c60:	613b      	str	r3, [r7, #16]
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d111      	bne.n	8008c90 <vTaskSwitchContext+0x58>
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	3304      	adds	r3, #4
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d10b      	bne.n	8008c90 <vTaskSwitchContext+0x58>
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	3308      	adds	r3, #8
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d105      	bne.n	8008c90 <vTaskSwitchContext+0x58>
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	330c      	adds	r3, #12
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d008      	beq.n	8008ca2 <vTaskSwitchContext+0x6a>
 8008c90:	4b1c      	ldr	r3, [pc, #112]	; (8008d04 <vTaskSwitchContext+0xcc>)
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	4b1b      	ldr	r3, [pc, #108]	; (8008d04 <vTaskSwitchContext+0xcc>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	3334      	adds	r3, #52	; 0x34
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	f7fe fd09 	bl	80076b4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ca2:	4b19      	ldr	r3, [pc, #100]	; (8008d08 <vTaskSwitchContext+0xd0>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	fab3 f383 	clz	r3, r3
 8008cae:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8008cb0:	78fb      	ldrb	r3, [r7, #3]
 8008cb2:	f1c3 031f 	rsb	r3, r3, #31
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	4413      	add	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4a12      	ldr	r2, [pc, #72]	; (8008d0c <vTaskSwitchContext+0xd4>)
 8008cc4:	4413      	add	r3, r2
 8008cc6:	60bb      	str	r3, [r7, #8]
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	605a      	str	r2, [r3, #4]
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	3308      	adds	r3, #8
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d104      	bne.n	8008ce8 <vTaskSwitchContext+0xb0>
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	685a      	ldr	r2, [r3, #4]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	605a      	str	r2, [r3, #4]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	4a05      	ldr	r2, [pc, #20]	; (8008d04 <vTaskSwitchContext+0xcc>)
 8008cf0:	6013      	str	r3, [r2, #0]
}
 8008cf2:	bf00      	nop
 8008cf4:	3718      	adds	r7, #24
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	20000238 	andcs	r0, r0, r8, lsr r2
 8008d00:	20000224 	andcs	r0, r0, r4, lsr #4
 8008d04:	20000150 	andcs	r0, r0, r0, asr r1
 8008d08:	20000218 	andcs	r0, r0, r8, lsl r2
 8008d0c:	20000154 	andcs	r0, r0, r4, asr r1

08008d10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d1a:	4b07      	ldr	r3, [pc, #28]	; (8008d38 <vTaskPlaceOnEventList+0x28>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	3318      	adds	r3, #24
 8008d20:	4619      	mov	r1, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f7ff f90e 	bl	8007f44 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d28:	2101      	movs	r1, #1
 8008d2a:	6838      	ldr	r0, [r7, #0]
 8008d2c:	f000 faaa 	bl	8009284 <prvAddCurrentTaskToDelayedList>
}
 8008d30:	bf00      	nop
 8008d32:	3708      	adds	r7, #8
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	20000150 	andcs	r0, r0, r0, asr r1

08008d3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	3318      	adds	r3, #24
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7ff f92f 	bl	8007fb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d56:	4b1d      	ldr	r3, [pc, #116]	; (8008dcc <xTaskRemoveFromEventList+0x90>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d11c      	bne.n	8008d98 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	3304      	adds	r3, #4
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7ff f926 	bl	8007fb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	409a      	lsls	r2, r3
 8008d70:	4b17      	ldr	r3, [pc, #92]	; (8008dd0 <xTaskRemoveFromEventList+0x94>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	4a16      	ldr	r2, [pc, #88]	; (8008dd0 <xTaskRemoveFromEventList+0x94>)
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d7e:	4613      	mov	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4a13      	ldr	r2, [pc, #76]	; (8008dd4 <xTaskRemoveFromEventList+0x98>)
 8008d88:	441a      	add	r2, r3
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	4619      	mov	r1, r3
 8008d90:	4610      	mov	r0, r2
 8008d92:	f7ff f8b3 	bl	8007efc <vListInsertEnd>
 8008d96:	e005      	b.n	8008da4 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	3318      	adds	r3, #24
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	480e      	ldr	r0, [pc, #56]	; (8008dd8 <xTaskRemoveFromEventList+0x9c>)
 8008da0:	f7ff f8ac 	bl	8007efc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da8:	4b0c      	ldr	r3, [pc, #48]	; (8008ddc <xTaskRemoveFromEventList+0xa0>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d905      	bls.n	8008dbe <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008db2:	2301      	movs	r3, #1
 8008db4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008db6:	4b0a      	ldr	r3, [pc, #40]	; (8008de0 <xTaskRemoveFromEventList+0xa4>)
 8008db8:	2201      	movs	r2, #1
 8008dba:	601a      	str	r2, [r3, #0]
 8008dbc:	e001      	b.n	8008dc2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	20000238 	andcs	r0, r0, r8, lsr r2
 8008dd0:	20000218 	andcs	r0, r0, r8, lsl r2
 8008dd4:	20000154 	andcs	r0, r0, r4, asr r1
 8008dd8:	200001e8 	andcs	r0, r0, r8, ror #3
 8008ddc:	20000150 	andcs	r0, r0, r0, asr r1
 8008de0:	20000224 	andcs	r0, r0, r4, lsr #4

08008de4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008dec:	4b06      	ldr	r3, [pc, #24]	; (8008e08 <vTaskInternalSetTimeOutState+0x24>)
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008df4:	4b05      	ldr	r3, [pc, #20]	; (8008e0c <vTaskInternalSetTimeOutState+0x28>)
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	605a      	str	r2, [r3, #4]
}
 8008dfc:	bf00      	nop
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bc80      	pop	{r7}
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	20000228 	andcs	r0, r0, r8, lsr #4
 8008e0c:	20000214 	andcs	r0, r0, r4, lsl r2

08008e10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8008e1a:	f000 fb25 	bl	8009468 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e1e:	4b1d      	ldr	r3, [pc, #116]	; (8008e94 <xTaskCheckForTimeOut+0x84>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e36:	d102      	bne.n	8008e3e <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	617b      	str	r3, [r7, #20]
 8008e3c:	e023      	b.n	8008e86 <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	4b15      	ldr	r3, [pc, #84]	; (8008e98 <xTaskCheckForTimeOut+0x88>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d007      	beq.n	8008e5a <xTaskCheckForTimeOut+0x4a>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d802      	bhi.n	8008e5a <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e54:	2301      	movs	r3, #1
 8008e56:	617b      	str	r3, [r7, #20]
 8008e58:	e015      	b.n	8008e86 <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d90b      	bls.n	8008e7c <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	1ad2      	subs	r2, r2, r3
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f7ff ffb7 	bl	8008de4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e76:	2300      	movs	r3, #0
 8008e78:	617b      	str	r3, [r7, #20]
 8008e7a:	e004      	b.n	8008e86 <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e82:	2301      	movs	r3, #1
 8008e84:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8008e86:	f000 fb07 	bl	8009498 <vPortExitCritical>

	return xReturn;
 8008e8a:	697b      	ldr	r3, [r7, #20]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3718      	adds	r7, #24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	20000214 	andcs	r0, r0, r4, lsl r2
 8008e98:	20000228 	andcs	r0, r0, r8, lsr #4

08008e9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ea0:	4b03      	ldr	r3, [pc, #12]	; (8008eb0 <vTaskMissedYield+0x14>)
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	601a      	str	r2, [r3, #0]
}
 8008ea6:	bf00      	nop
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bc80      	pop	{r7}
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	20000224 	andcs	r0, r0, r4, lsr #4

08008eb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ebc:	f000 f84c 	bl	8008f58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ec0:	4b06      	ldr	r3, [pc, #24]	; (8008edc <prvIdleTask+0x28>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d9f9      	bls.n	8008ebc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ec8:	4b05      	ldr	r3, [pc, #20]	; (8008ee0 <prvIdleTask+0x2c>)
 8008eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ece:	601a      	str	r2, [r3, #0]
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8008ed8:	e7f0      	b.n	8008ebc <prvIdleTask+0x8>
 8008eda:	bf00      	nop
 8008edc:	20000154 	andcs	r0, r0, r4, asr r1
 8008ee0:	e000ed04 	and	lr, r0, r4, lsl #26

08008ee4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008eea:	2300      	movs	r3, #0
 8008eec:	607b      	str	r3, [r7, #4]
 8008eee:	e00c      	b.n	8008f0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	4413      	add	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4a10      	ldr	r2, [pc, #64]	; (8008f3c <prvInitialiseTaskLists+0x58>)
 8008efc:	4413      	add	r3, r2
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fe ffd0 	bl	8007ea4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	3301      	adds	r3, #1
 8008f08:	607b      	str	r3, [r7, #4]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2b04      	cmp	r3, #4
 8008f0e:	d9ef      	bls.n	8008ef0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f10:	480b      	ldr	r0, [pc, #44]	; (8008f40 <prvInitialiseTaskLists+0x5c>)
 8008f12:	f7fe ffc7 	bl	8007ea4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f16:	480b      	ldr	r0, [pc, #44]	; (8008f44 <prvInitialiseTaskLists+0x60>)
 8008f18:	f7fe ffc4 	bl	8007ea4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f1c:	480a      	ldr	r0, [pc, #40]	; (8008f48 <prvInitialiseTaskLists+0x64>)
 8008f1e:	f7fe ffc1 	bl	8007ea4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f22:	480a      	ldr	r0, [pc, #40]	; (8008f4c <prvInitialiseTaskLists+0x68>)
 8008f24:	f7fe ffbe 	bl	8007ea4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f28:	4b09      	ldr	r3, [pc, #36]	; (8008f50 <prvInitialiseTaskLists+0x6c>)
 8008f2a:	4a05      	ldr	r2, [pc, #20]	; (8008f40 <prvInitialiseTaskLists+0x5c>)
 8008f2c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f2e:	4b09      	ldr	r3, [pc, #36]	; (8008f54 <prvInitialiseTaskLists+0x70>)
 8008f30:	4a04      	ldr	r2, [pc, #16]	; (8008f44 <prvInitialiseTaskLists+0x60>)
 8008f32:	601a      	str	r2, [r3, #0]
}
 8008f34:	bf00      	nop
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	20000154 	andcs	r0, r0, r4, asr r1
 8008f40:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
 8008f44:	200001cc 	andcs	r0, r0, ip, asr #3
 8008f48:	200001e8 	andcs	r0, r0, r8, ror #3
 8008f4c:	200001fc 	strdcs	r0, [r0], -ip
 8008f50:	200001e0 	andcs	r0, r0, r0, ror #3
 8008f54:	200001e4 	andcs	r0, r0, r4, ror #3

08008f58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f58:	b480      	push	{r7}
 8008f5a:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f5c:	bf00      	nop
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bc80      	pop	{r7}
 8008f62:	4770      	bx	lr

08008f64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f6a:	4b0c      	ldr	r3, [pc, #48]	; (8008f9c <prvResetNextTaskUnblockTime+0x38>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d104      	bne.n	8008f7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f74:	4b0a      	ldr	r3, [pc, #40]	; (8008fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8008f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f7c:	e008      	b.n	8008f90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f7e:	4b07      	ldr	r3, [pc, #28]	; (8008f9c <prvResetNextTaskUnblockTime+0x38>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	4a04      	ldr	r2, [pc, #16]	; (8008fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8008f8e:	6013      	str	r3, [r2, #0]
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bc80      	pop	{r7}
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	200001e0 	andcs	r0, r0, r0, ror #3
 8008fa0:	20000230 	andcs	r0, r0, r0, lsr r2

08008fa4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d069      	beq.n	800908e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fbe:	4b36      	ldr	r3, [pc, #216]	; (8009098 <xTaskPriorityInherit+0xf4>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d259      	bcs.n	800907c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	db06      	blt.n	8008fde <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fd0:	4b31      	ldr	r3, [pc, #196]	; (8009098 <xTaskPriorityInherit+0xf4>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd6:	f1c3 0205 	rsb	r2, r3, #5
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	6959      	ldr	r1, [r3, #20]
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	4a2b      	ldr	r2, [pc, #172]	; (800909c <xTaskPriorityInherit+0xf8>)
 8008ff0:	4413      	add	r3, r2
 8008ff2:	4299      	cmp	r1, r3
 8008ff4:	d13a      	bne.n	800906c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fe ffda 	bl	8007fb4 <uxListRemove>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d115      	bne.n	8009032 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800900a:	4924      	ldr	r1, [pc, #144]	; (800909c <xTaskPriorityInherit+0xf8>)
 800900c:	4613      	mov	r3, r2
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	4413      	add	r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	440b      	add	r3, r1
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10a      	bne.n	8009032 <xTaskPriorityInherit+0x8e>
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009020:	2201      	movs	r2, #1
 8009022:	fa02 f303 	lsl.w	r3, r2, r3
 8009026:	43da      	mvns	r2, r3
 8009028:	4b1d      	ldr	r3, [pc, #116]	; (80090a0 <xTaskPriorityInherit+0xfc>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4013      	ands	r3, r2
 800902e:	4a1c      	ldr	r2, [pc, #112]	; (80090a0 <xTaskPriorityInherit+0xfc>)
 8009030:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009032:	4b19      	ldr	r3, [pc, #100]	; (8009098 <xTaskPriorityInherit+0xf4>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009040:	2201      	movs	r2, #1
 8009042:	409a      	lsls	r2, r3
 8009044:	4b16      	ldr	r3, [pc, #88]	; (80090a0 <xTaskPriorityInherit+0xfc>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4313      	orrs	r3, r2
 800904a:	4a15      	ldr	r2, [pc, #84]	; (80090a0 <xTaskPriorityInherit+0xfc>)
 800904c:	6013      	str	r3, [r2, #0]
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009052:	4613      	mov	r3, r2
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	4413      	add	r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4a10      	ldr	r2, [pc, #64]	; (800909c <xTaskPriorityInherit+0xf8>)
 800905c:	441a      	add	r2, r3
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	3304      	adds	r3, #4
 8009062:	4619      	mov	r1, r3
 8009064:	4610      	mov	r0, r2
 8009066:	f7fe ff49 	bl	8007efc <vListInsertEnd>
 800906a:	e004      	b.n	8009076 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800906c:	4b0a      	ldr	r3, [pc, #40]	; (8009098 <xTaskPriorityInherit+0xf4>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009076:	2301      	movs	r3, #1
 8009078:	60fb      	str	r3, [r7, #12]
 800907a:	e008      	b.n	800908e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009080:	4b05      	ldr	r3, [pc, #20]	; (8009098 <xTaskPriorityInherit+0xf4>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009086:	429a      	cmp	r2, r3
 8009088:	d201      	bcs.n	800908e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800908a:	2301      	movs	r3, #1
 800908c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800908e:	68fb      	ldr	r3, [r7, #12]
	}
 8009090:	4618      	mov	r0, r3
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	20000150 	andcs	r0, r0, r0, asr r1
 800909c:	20000154 	andcs	r0, r0, r4, asr r1
 80090a0:	20000218 	andcs	r0, r0, r8, lsl r2

080090a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80090b0:	2300      	movs	r3, #0
 80090b2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d04f      	beq.n	800915a <xTaskPriorityDisinherit+0xb6>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090be:	1e5a      	subs	r2, r3, #1
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d044      	beq.n	800915a <xTaskPriorityDisinherit+0xb6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d140      	bne.n	800915a <xTaskPriorityDisinherit+0xb6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	3304      	adds	r3, #4
 80090dc:	4618      	mov	r0, r3
 80090de:	f7fe ff69 	bl	8007fb4 <uxListRemove>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d115      	bne.n	8009114 <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ec:	491d      	ldr	r1, [pc, #116]	; (8009164 <xTaskPriorityDisinherit+0xc0>)
 80090ee:	4613      	mov	r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4413      	add	r3, r2
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	440b      	add	r3, r1
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10a      	bne.n	8009114 <xTaskPriorityDisinherit+0x70>
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009102:	2201      	movs	r2, #1
 8009104:	fa02 f303 	lsl.w	r3, r2, r3
 8009108:	43da      	mvns	r2, r3
 800910a:	4b17      	ldr	r3, [pc, #92]	; (8009168 <xTaskPriorityDisinherit+0xc4>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4013      	ands	r3, r2
 8009110:	4a15      	ldr	r2, [pc, #84]	; (8009168 <xTaskPriorityDisinherit+0xc4>)
 8009112:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009120:	f1c3 0205 	rsb	r2, r3, #5
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912c:	2201      	movs	r2, #1
 800912e:	409a      	lsls	r2, r3
 8009130:	4b0d      	ldr	r3, [pc, #52]	; (8009168 <xTaskPriorityDisinherit+0xc4>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4313      	orrs	r3, r2
 8009136:	4a0c      	ldr	r2, [pc, #48]	; (8009168 <xTaskPriorityDisinherit+0xc4>)
 8009138:	6013      	str	r3, [r2, #0]
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800913e:	4613      	mov	r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	4413      	add	r3, r2
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4a07      	ldr	r2, [pc, #28]	; (8009164 <xTaskPriorityDisinherit+0xc0>)
 8009148:	441a      	add	r2, r3
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	3304      	adds	r3, #4
 800914e:	4619      	mov	r1, r3
 8009150:	4610      	mov	r0, r2
 8009152:	f7fe fed3 	bl	8007efc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009156:	2301      	movs	r3, #1
 8009158:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800915a:	68fb      	ldr	r3, [r7, #12]
	}
 800915c:	4618      	mov	r0, r3
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	20000154 	andcs	r0, r0, r4, asr r1
 8009168:	20000218 	andcs	r0, r0, r8, lsl r2

0800916c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800916c:	b580      	push	{r7, lr}
 800916e:	b086      	sub	sp, #24
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800917a:	2301      	movs	r3, #1
 800917c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d063      	beq.n	800924c <vTaskPriorityDisinheritAfterTimeout+0xe0>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	429a      	cmp	r2, r3
 800918c:	d202      	bcs.n	8009194 <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	617b      	str	r3, [r7, #20]
 8009192:	e002      	b.n	800919a <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009198:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d053      	beq.n	800924c <vTaskPriorityDisinheritAfterTimeout+0xe0>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d14e      	bne.n	800924c <vTaskPriorityDisinheritAfterTimeout+0xe0>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b2:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	699b      	ldr	r3, [r3, #24]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	db04      	blt.n	80091cc <vTaskPriorityDisinheritAfterTimeout+0x60>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	f1c3 0205 	rsb	r2, r3, #5
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	6959      	ldr	r1, [r3, #20]
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	4613      	mov	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	4413      	add	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4a1e      	ldr	r2, [pc, #120]	; (8009254 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
 80091dc:	4413      	add	r3, r2
 80091de:	4299      	cmp	r1, r3
 80091e0:	d134      	bne.n	800924c <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	3304      	adds	r3, #4
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe fee4 	bl	8007fb4 <uxListRemove>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d115      	bne.n	800921e <vTaskPriorityDisinheritAfterTimeout+0xb2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f6:	4917      	ldr	r1, [pc, #92]	; (8009254 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
 80091f8:	4613      	mov	r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	440b      	add	r3, r1
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10a      	bne.n	800921e <vTaskPriorityDisinheritAfterTimeout+0xb2>
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920c:	2201      	movs	r2, #1
 800920e:	fa02 f303 	lsl.w	r3, r2, r3
 8009212:	43da      	mvns	r2, r3
 8009214:	4b10      	ldr	r3, [pc, #64]	; (8009258 <vTaskPriorityDisinheritAfterTimeout+0xec>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4013      	ands	r3, r2
 800921a:	4a0f      	ldr	r2, [pc, #60]	; (8009258 <vTaskPriorityDisinheritAfterTimeout+0xec>)
 800921c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009222:	2201      	movs	r2, #1
 8009224:	409a      	lsls	r2, r3
 8009226:	4b0c      	ldr	r3, [pc, #48]	; (8009258 <vTaskPriorityDisinheritAfterTimeout+0xec>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4313      	orrs	r3, r2
 800922c:	4a0a      	ldr	r2, [pc, #40]	; (8009258 <vTaskPriorityDisinheritAfterTimeout+0xec>)
 800922e:	6013      	str	r3, [r2, #0]
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009234:	4613      	mov	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4413      	add	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4a05      	ldr	r2, [pc, #20]	; (8009254 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
 800923e:	441a      	add	r2, r3
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	3304      	adds	r3, #4
 8009244:	4619      	mov	r1, r3
 8009246:	4610      	mov	r0, r2
 8009248:	f7fe fe58 	bl	8007efc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800924c:	bf00      	nop
 800924e:	3718      	adds	r7, #24
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	20000154 	andcs	r0, r0, r4, asr r1
 8009258:	20000218 	andcs	r0, r0, r8, lsl r2

0800925c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800925c:	b480      	push	{r7}
 800925e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009260:	4b07      	ldr	r3, [pc, #28]	; (8009280 <pvTaskIncrementMutexHeldCount+0x24>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d004      	beq.n	8009272 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009268:	4b05      	ldr	r3, [pc, #20]	; (8009280 <pvTaskIncrementMutexHeldCount+0x24>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800926e:	3201      	adds	r2, #1
 8009270:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009272:	4b03      	ldr	r3, [pc, #12]	; (8009280 <pvTaskIncrementMutexHeldCount+0x24>)
 8009274:	681b      	ldr	r3, [r3, #0]
	}
 8009276:	4618      	mov	r0, r3
 8009278:	46bd      	mov	sp, r7
 800927a:	bc80      	pop	{r7}
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	20000150 	andcs	r0, r0, r0, asr r1

08009284 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800928e:	4b29      	ldr	r3, [pc, #164]	; (8009334 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009294:	4b28      	ldr	r3, [pc, #160]	; (8009338 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	3304      	adds	r3, #4
 800929a:	4618      	mov	r0, r3
 800929c:	f7fe fe8a 	bl	8007fb4 <uxListRemove>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10b      	bne.n	80092be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80092a6:	4b24      	ldr	r3, [pc, #144]	; (8009338 <prvAddCurrentTaskToDelayedList+0xb4>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ac:	2201      	movs	r2, #1
 80092ae:	fa02 f303 	lsl.w	r3, r2, r3
 80092b2:	43da      	mvns	r2, r3
 80092b4:	4b21      	ldr	r3, [pc, #132]	; (800933c <prvAddCurrentTaskToDelayedList+0xb8>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4013      	ands	r3, r2
 80092ba:	4a20      	ldr	r2, [pc, #128]	; (800933c <prvAddCurrentTaskToDelayedList+0xb8>)
 80092bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092c4:	d10a      	bne.n	80092dc <prvAddCurrentTaskToDelayedList+0x58>
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d007      	beq.n	80092dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092cc:	4b1a      	ldr	r3, [pc, #104]	; (8009338 <prvAddCurrentTaskToDelayedList+0xb4>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3304      	adds	r3, #4
 80092d2:	4619      	mov	r1, r3
 80092d4:	481a      	ldr	r0, [pc, #104]	; (8009340 <prvAddCurrentTaskToDelayedList+0xbc>)
 80092d6:	f7fe fe11 	bl	8007efc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80092da:	e026      	b.n	800932a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4413      	add	r3, r2
 80092e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80092e4:	4b14      	ldr	r3, [pc, #80]	; (8009338 <prvAddCurrentTaskToDelayedList+0xb4>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d209      	bcs.n	8009308 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092f4:	4b13      	ldr	r3, [pc, #76]	; (8009344 <prvAddCurrentTaskToDelayedList+0xc0>)
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	4b0f      	ldr	r3, [pc, #60]	; (8009338 <prvAddCurrentTaskToDelayedList+0xb4>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	3304      	adds	r3, #4
 80092fe:	4619      	mov	r1, r3
 8009300:	4610      	mov	r0, r2
 8009302:	f7fe fe1f 	bl	8007f44 <vListInsert>
}
 8009306:	e010      	b.n	800932a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009308:	4b0f      	ldr	r3, [pc, #60]	; (8009348 <prvAddCurrentTaskToDelayedList+0xc4>)
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	4b0a      	ldr	r3, [pc, #40]	; (8009338 <prvAddCurrentTaskToDelayedList+0xb4>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	3304      	adds	r3, #4
 8009312:	4619      	mov	r1, r3
 8009314:	4610      	mov	r0, r2
 8009316:	f7fe fe15 	bl	8007f44 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800931a:	4b0c      	ldr	r3, [pc, #48]	; (800934c <prvAddCurrentTaskToDelayedList+0xc8>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	429a      	cmp	r2, r3
 8009322:	d202      	bcs.n	800932a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009324:	4a09      	ldr	r2, [pc, #36]	; (800934c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	6013      	str	r3, [r2, #0]
}
 800932a:	bf00      	nop
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	20000214 	andcs	r0, r0, r4, lsl r2
 8009338:	20000150 	andcs	r0, r0, r0, asr r1
 800933c:	20000218 	andcs	r0, r0, r8, lsl r2
 8009340:	200001fc 	strdcs	r0, [r0], -ip
 8009344:	200001e4 	andcs	r0, r0, r4, ror #3
 8009348:	200001e0 	andcs	r0, r0, r0, ror #3
 800934c:	20000230 	andcs	r0, r0, r0, lsr r2

08009350 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009350:	b480      	push	{r7}
 8009352:	b085      	sub	sp, #20
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	3b04      	subs	r3, #4
 8009360:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	3b04      	subs	r3, #4
 800936e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	f023 0201 	bic.w	r2, r3, #1
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	3b04      	subs	r3, #4
 800937e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009380:	4a08      	ldr	r2, [pc, #32]	; (80093a4 <pxPortInitialiseStack+0x54>)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	3b14      	subs	r3, #20
 800938a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	3b20      	subs	r3, #32
 8009396:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009398:	68fb      	ldr	r3, [r7, #12]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	bc80      	pop	{r7}
 80093a2:	4770      	bx	lr
 80093a4:	080093a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, ip, pc}

080093a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093b2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80093c4:	bf00      	nop
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d0fc      	beq.n	80093c6 <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bc80      	pop	{r7}
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
	...

080093e0 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80093e0:	4b07      	ldr	r3, [pc, #28]	; (8009400 <pxCurrentTCBConst2>)
 80093e2:	6819      	ldr	r1, [r3, #0]
 80093e4:	6808      	ldr	r0, [r1, #0]
 80093e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80093ea:	f380 8809 	msr	PSP, r0
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f04f 0000 	mov.w	r0, #0
 80093f6:	f380 8811 	msr	BASEPRI, r0
 80093fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80093fe:	4770      	bx	lr

08009400 <pxCurrentTCBConst2>:
 8009400:	20000150 	andcs	r0, r0, r0, asr r1
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009404:	bf00      	nop
 8009406:	bf00      	nop

08009408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009408:	4806      	ldr	r0, [pc, #24]	; (8009424 <prvPortStartFirstTask+0x1c>)
 800940a:	6800      	ldr	r0, [r0, #0]
 800940c:	6800      	ldr	r0, [r0, #0]
 800940e:	f380 8808 	msr	MSP, r0
 8009412:	b662      	cpsie	i
 8009414:	b661      	cpsie	f
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	df00      	svc	0
 8009420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009422:	bf00      	nop
 8009424:	e000ed08 	and	lr, r0, r8, lsl #26

08009428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800942c:	4a0c      	ldr	r2, [pc, #48]	; (8009460 <xPortStartScheduler+0x38>)
 800942e:	4b0c      	ldr	r3, [pc, #48]	; (8009460 <xPortStartScheduler+0x38>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009436:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009438:	4a09      	ldr	r2, [pc, #36]	; (8009460 <xPortStartScheduler+0x38>)
 800943a:	4b09      	ldr	r3, [pc, #36]	; (8009460 <xPortStartScheduler+0x38>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009442:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009444:	f000 f888 	bl	8009558 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009448:	4b06      	ldr	r3, [pc, #24]	; (8009464 <xPortStartScheduler+0x3c>)
 800944a:	2200      	movs	r2, #0
 800944c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800944e:	f7ff ffdb 	bl	8009408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009452:	f7ff fbf1 	bl	8008c38 <vTaskSwitchContext>
	prvTaskExitError();
 8009456:	f7ff ffa7 	bl	80093a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	bd80      	pop	{r7, pc}
 8009460:	e000ed20 	and	lr, r0, r0, lsr #26
 8009464:	200000e8 	andcs	r0, r0, r8, ror #1

08009468 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009480:	4b04      	ldr	r3, [pc, #16]	; (8009494 <vPortEnterCritical+0x2c>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3301      	adds	r3, #1
 8009486:	4a03      	ldr	r2, [pc, #12]	; (8009494 <vPortEnterCritical+0x2c>)
 8009488:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800948a:	bf00      	nop
 800948c:	370c      	adds	r7, #12
 800948e:	46bd      	mov	sp, r7
 8009490:	bc80      	pop	{r7}
 8009492:	4770      	bx	lr
 8009494:	200000e8 	andcs	r0, r0, r8, ror #1

08009498 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 800949e:	4b09      	ldr	r3, [pc, #36]	; (80094c4 <vPortExitCritical+0x2c>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3b01      	subs	r3, #1
 80094a4:	4a07      	ldr	r2, [pc, #28]	; (80094c4 <vPortExitCritical+0x2c>)
 80094a6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80094a8:	4b06      	ldr	r3, [pc, #24]	; (80094c4 <vPortExitCritical+0x2c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d104      	bne.n	80094ba <vPortExitCritical+0x22>
 80094b0:	2300      	movs	r3, #0
 80094b2:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80094ba:	bf00      	nop
 80094bc:	370c      	adds	r7, #12
 80094be:	46bd      	mov	sp, r7
 80094c0:	bc80      	pop	{r7}
 80094c2:	4770      	bx	lr
 80094c4:	200000e8 	andcs	r0, r0, r8, ror #1
	...

080094d0 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80094d0:	f3ef 8009 	mrs	r0, PSP
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	4b0d      	ldr	r3, [pc, #52]	; (8009510 <pxCurrentTCBConst>)
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80094e0:	6010      	str	r0, [r2, #0]
 80094e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80094e6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80094ea:	f380 8811 	msr	BASEPRI, r0
 80094ee:	f7ff fba3 	bl	8008c38 <vTaskSwitchContext>
 80094f2:	f04f 0000 	mov.w	r0, #0
 80094f6:	f380 8811 	msr	BASEPRI, r0
 80094fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80094fe:	6819      	ldr	r1, [r3, #0]
 8009500:	6808      	ldr	r0, [r1, #0]
 8009502:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009506:	f380 8809 	msr	PSP, r0
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	4770      	bx	lr

08009510 <pxCurrentTCBConst>:
 8009510:	20000150 	andcs	r0, r0, r0, asr r1
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009514:	bf00      	nop
 8009516:	bf00      	nop

08009518 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
	__asm volatile
 800951e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	603b      	str	r3, [r7, #0]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009530:	f7ff fada 	bl	8008ae8 <xTaskIncrementTick>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d003      	beq.n	8009542 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800953a:	4b06      	ldr	r3, [pc, #24]	; (8009554 <xPortSysTickHandler+0x3c>)
 800953c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009540:	601a      	str	r2, [r3, #0]
 8009542:	2300      	movs	r3, #0
 8009544:	607b      	str	r3, [r7, #4]
	__asm volatile
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800954c:	bf00      	nop
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	e000ed04 	and	lr, r0, r4, lsl #26

08009558 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009558:	b480      	push	{r7}
 800955a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800955c:	4b07      	ldr	r3, [pc, #28]	; (800957c <vPortSetupTimerInterrupt+0x24>)
 800955e:	2200      	movs	r2, #0
 8009560:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009562:	4b07      	ldr	r3, [pc, #28]	; (8009580 <vPortSetupTimerInterrupt+0x28>)
 8009564:	2200      	movs	r2, #0
 8009566:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009568:	4b06      	ldr	r3, [pc, #24]	; (8009584 <vPortSetupTimerInterrupt+0x2c>)
 800956a:	4a07      	ldr	r2, [pc, #28]	; (8009588 <vPortSetupTimerInterrupt+0x30>)
 800956c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800956e:	4b03      	ldr	r3, [pc, #12]	; (800957c <vPortSetupTimerInterrupt+0x24>)
 8009570:	2207      	movs	r2, #7
 8009572:	601a      	str	r2, [r3, #0]
}
 8009574:	bf00      	nop
 8009576:	46bd      	mov	sp, r7
 8009578:	bc80      	pop	{r7}
 800957a:	4770      	bx	lr
 800957c:	e000e010 	and	lr, r0, r0, lsl r0
 8009580:	e000e018 	and	lr, r0, r8, lsl r0
 8009584:	e000e014 	and	lr, r0, r4, lsl r0
 8009588:	0001193f 	andeq	r1, r1, pc, lsr r9

0800958c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8009594:	2300      	movs	r3, #0
 8009596:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f003 0307 	and.w	r3, r3, #7
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d004      	beq.n	80095ac <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f023 0307 	bic.w	r3, r3, #7
 80095a8:	3308      	adds	r3, #8
 80095aa:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 80095ac:	f7ff fa00 	bl	80089b0 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80095b0:	4b16      	ldr	r3, [pc, #88]	; (800960c <pvPortMalloc+0x80>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d105      	bne.n	80095c4 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80095b8:	4b15      	ldr	r3, [pc, #84]	; (8009610 <pvPortMalloc+0x84>)
 80095ba:	f023 0307 	bic.w	r3, r3, #7
 80095be:	461a      	mov	r2, r3
 80095c0:	4b12      	ldr	r3, [pc, #72]	; (800960c <pvPortMalloc+0x80>)
 80095c2:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80095c4:	4b13      	ldr	r3, [pc, #76]	; (8009614 <pvPortMalloc+0x88>)
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4413      	add	r3, r2
 80095cc:	f243 32f7 	movw	r2, #13303	; 0x33f7
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d813      	bhi.n	80095fc <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80095d4:	4b0f      	ldr	r3, [pc, #60]	; (8009614 <pvPortMalloc+0x88>)
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	441a      	add	r2, r3
 80095dc:	4b0d      	ldr	r3, [pc, #52]	; (8009614 <pvPortMalloc+0x88>)
 80095de:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d90b      	bls.n	80095fc <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80095e4:	4b09      	ldr	r3, [pc, #36]	; (800960c <pvPortMalloc+0x80>)
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	4b0a      	ldr	r3, [pc, #40]	; (8009614 <pvPortMalloc+0x88>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4413      	add	r3, r2
 80095ee:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80095f0:	4b08      	ldr	r3, [pc, #32]	; (8009614 <pvPortMalloc+0x88>)
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4413      	add	r3, r2
 80095f8:	4a06      	ldr	r2, [pc, #24]	; (8009614 <pvPortMalloc+0x88>)
 80095fa:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80095fc:	f7ff f9e6 	bl	80089cc <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8009600:	68fb      	ldr	r3, [r7, #12]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	20003640 	andcs	r3, r0, r0, asr #12
 8009610:	20000244 	andcs	r0, r0, r4, asr #4
 8009614:	2000363c 	andcs	r3, r0, ip, lsr r6

08009618 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	bc80      	pop	{r7}
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop

0800962c <Reset_Handler>:
 800962c:	2100      	movs	r1, #0
 800962e:	e003      	b.n	8009638 <LoopCopyDataInit>

08009630 <CopyDataInit>:
 8009630:	4b0a      	ldr	r3, [pc, #40]	; (800965c <LoopFillZerobss+0x10>)
 8009632:	585b      	ldr	r3, [r3, r1]
 8009634:	5043      	str	r3, [r0, r1]
 8009636:	3104      	adds	r1, #4

08009638 <LoopCopyDataInit>:
 8009638:	4809      	ldr	r0, [pc, #36]	; (8009660 <LoopFillZerobss+0x14>)
 800963a:	4b0a      	ldr	r3, [pc, #40]	; (8009664 <LoopFillZerobss+0x18>)
 800963c:	1842      	adds	r2, r0, r1
 800963e:	429a      	cmp	r2, r3
 8009640:	d3f6      	bcc.n	8009630 <CopyDataInit>
 8009642:	4a09      	ldr	r2, [pc, #36]	; (8009668 <LoopFillZerobss+0x1c>)
 8009644:	e002      	b.n	800964c <LoopFillZerobss>

08009646 <FillZerobss>:
 8009646:	2300      	movs	r3, #0
 8009648:	f842 3b04 	str.w	r3, [r2], #4

0800964c <LoopFillZerobss>:
 800964c:	4b07      	ldr	r3, [pc, #28]	; (800966c <LoopFillZerobss+0x20>)
 800964e:	429a      	cmp	r2, r3
 8009650:	d3f9      	bcc.n	8009646 <FillZerobss>
 8009652:	f7f7 fe47 	bl	80012e4 <SystemInit>
 8009656:	f7fd fb4d 	bl	8006cf4 <main>
 800965a:	4770      	bx	lr
 800965c:	0800a10c 	stmdaeq	r0, {r2, r3, r8, sp, pc}
 8009660:	20000000 	andcs	r0, r0, r0
 8009664:	200000ec 	andcs	r0, r0, ip, ror #1
 8009668:	200000ec 	andcs	r0, r0, ip, ror #1
 800966c:	20004304 	andcs	r4, r0, r4, lsl #6

08009670 <ADC1_2_IRQHandler>:
 8009670:	e7fe      	b.n	8009670 <ADC1_2_IRQHandler>
 8009672:	0000      	movs	r0, r0
 8009674:	43454843 	movtmi	r4, #22595	; 0x5843
 8009678:	50495f4b 	subpl	r5, r9, fp, asr #30
 800967c:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
 8009680:	43494c46 	movtmi	r4, #40006	; 0x9c46
 8009684:	00000054 	andeq	r0, r0, r4, asr r0
 8009688:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 800968c:	5020776f 	eorpl	r7, r0, pc, ror #14
 8009690:	4c205948 			; <UNDEFINED> instruction: 0x4c205948
 8009694:	206b6e69 	rsbcs	r6, fp, r9, ror #28
 8009698:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 800969c:	0000002e 	andeq	r0, r0, lr, lsr #32
 80096a0:	2054454e 	subscs	r4, r4, lr, asr #10
 80096a4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
 80096a8:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 80096ac:	2064657a 	rsbcs	r6, r4, sl, ror r5
 80096b0:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 80096b4:	0000002e 	andeq	r0, r0, lr, lsr #32
 80096b8:	50434844 	subpl	r4, r3, r4, asr #16
 80096bc:	696c4320 	stmdbvs	ip!, {r5, r8, r9, lr}^
 80096c0:	00746e65 	rsbseq	r6, r4, r5, ror #28
 80096c4:	6b636f4c 	blvs	98e53fc <_etext+0x18db2f0>
 80096c8:	73615420 	cmnvc	r1, #32, 8	; 0x20000000
 80096cc:	0000006b 	andeq	r0, r0, fp, rrx
 80096d0:	44454c4f 	strbmi	r4, [r5], #-3151	; 0xfffff3b1
 80096d4:	73615420 	cmnvc	r1, #32, 8	; 0x20000000
 80096d8:	0000006b 	andeq	r0, r0, fp, rrx
 80096dc:	6e69614d 	powvsem	f6, f1, #5.0
 80096e0:	73615420 	cmnvc	r1, #32, 8	; 0x20000000
 80096e4:	0000006b 	andeq	r0, r0, fp, rrx
 80096e8:	41534454 	cmpmi	r3, r4, asr r4
 80096ec:	492d5453 	pushmi	{r0, r1, r4, r6, sl, ip, lr}
 80096f0:	5620544f 	strtpl	r5, [r0], -pc, asr #8
 80096f4:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
 80096f8:	00000030 	andeq	r0, r0, r0, lsr r0
 80096fc:	50434844 	subpl	r4, r3, r4, asr #16
 8009700:	00000000 	andeq	r0, r0, r0
 8009704:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
 8009708:	00004349 	andeq	r4, r0, r9, asr #6
 800970c:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 8009710:	00000073 	andeq	r0, r0, r3, ror r0
 8009714:	5454514d 	ldrbpl	r5, [r4], #-333	; 0xfffffeb3
 8009718:	2e64253a 	mcrcs	5, 3, r2, cr4, cr10, {1}
 800971c:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8009720:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8009724:	00000000 	andeq	r0, r0, r0
 8009728:	253a5049 	ldrcs	r5, [sl, #-73]!	; 0xffffffb7
 800972c:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8009730:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8009734:	00006425 	andeq	r6, r0, r5, lsr #8
 8009738:	3a574147 	bcc	95d9c5c <_etext+0x15cfb50>
 800973c:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8009740:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8009744:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 8009748:	3a4b534d 	bcc	92de484 <_etext+0x12d4378>
 800974c:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8009750:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8009754:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 8009758:	3a534e44 	bcc	94dd070 <_etext+0x14d2f64>
 800975c:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8009760:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8009764:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 8009768:	2e777777 	mrccs	7, 3, r7, cr7, cr7, {3}
 800976c:	776e6177 			; <UNDEFINED> instruction: 0x776e6177
 8009770:	6e69782e 	cdpvs	8, 6, cr7, cr9, cr14, {1}
 8009774:	00000000 	andeq	r0, r0, r0
 8009778:	61736474 	cmnvs	r3, r4, ror r4
 800977c:	692d7473 	pushvs	{r0, r1, r4, r5, r6, sl, ip, sp, lr}
 8009780:	652d746f 	strvs	r7, [sp, #-1135]!	; 0xfffffb91
 8009784:	642d7478 	strtvs	r7, [sp], #-1144	; 0xfffffb88
 8009788:	00726f6f 	rsbseq	r6, r2, pc, ror #30
 800978c:	64747865 	ldrbtvs	r7, [r4], #-2149	; 0xfffff79b
 8009790:	31726f6f 	cmncc	r2, pc, ror #30
 8009794:	35343332 	ldrcc	r3, [r4, #-818]!	; 0xfffffcce
 8009798:	00000000 	andeq	r0, r0, r0
 800979c:	64747865 	ldrbtvs	r7, [r4], #-2149	; 0xfffff79b
 80097a0:	00726f6f 	rsbseq	r6, r2, pc, ror #30
 80097a4:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
 80097a8:	4e4f4320 	cdpmi	3, 4, cr4, cr15, cr0, {1}
 80097ac:	6170204e 	cmnvs	r0, lr, asr #32
 80097b0:	65206b63 	strvs	r6, [r0, #-2915]!	; 0xfffff49d
 80097b4:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 80097b8:	0000002e 	andeq	r0, r0, lr, lsr #32
 80097bc:	4e4e4f43 	cdpmi	15, 4, cr4, cr14, cr3, {2}
 80097c0:	204b4341 	subcs	r4, fp, r1, asr #6
 80097c4:	65707865 	ldrbvs	r7, [r0, #-2149]!	; 0xfffff79b
 80097c8:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
 80097cc:	00000021 	andeq	r0, r0, r1, lsr #32
 80097d0:	4e4e4f43 	cdpmi	15, 4, cr4, cr14, cr3, {2}
 80097d4:	204b4341 	subcs	r4, fp, r1, asr #6
 80097d8:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 80097dc:	00216465 	eoreq	r6, r1, r5, ror #8
 80097e0:	635f6474 	cmpvs	pc, #116, 8	; 0x74000000
 80097e4:	64756f6c 	ldrbtvs	r6, [r5], #-3948	; 0xfffff094
 80097e8:	7364742f 	cmnvc	r4, #788529152	; 0x2f000000
 80097ec:	2f747361 	svccs	0x00747361
 80097f0:	5f747865 	svcpl	0x00747865
 80097f4:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
 80097f8:	00000000 	andeq	r0, r0, r0
 80097fc:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
 8009800:	42555320 	subsmi	r5, r5, #32, 6	; 0x80000000
 8009804:	61702053 	cmnvs	r0, r3, asr r0
 8009808:	65206b63 	strvs	r6, [r0, #-2915]!	; 0xfffff49d
 800980c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 8009810:	0000002e 	andeq	r0, r0, lr, lsr #32
 8009814:	41425553 	cmpmi	r2, r3, asr r5
 8009818:	65204b43 	strvs	r4, [r0, #-2883]!	; 0xfffff4bd
 800981c:	63657078 	cmnvs	r5, #120	; 0x78
 8009820:	21646574 	smccs	18004	; 0x4654
 8009824:	00000000 	andeq	r0, r0, r0
 8009828:	2067734d 	rsbcs	r7, r7, sp, asr #6
 800982c:	75204449 	strvc	r4, [r0, #-1097]!	; 0xfffffbb7
 8009830:	74616d6e 	strbtvc	r6, [r1], #-3438	; 0xfffff292
 8009834:	00216863 	eoreq	r6, r1, r3, ror #16
 8009838:	20746553 	rsbscs	r6, r4, r3, asr r5
 800983c:	4d204f49 	stcmi	15, cr4, [r0, #-292]!	; 0xfffffedc
 8009840:	2065646f 	rsbcs	r6, r5, pc, ror #8
 8009844:	6c696146 	stfvse	f6, [r9], #-280	; 0xfffffee8
 8009848:	00216465 	eoreq	r6, r1, r5, ror #8
 800984c:	676e6950 			; <UNDEFINED> instruction: 0x676e6950
 8009850:	007e7e7e 	rsbseq	r7, lr, lr, ror lr
 8009854:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
 8009858:	20657669 	rsbcs	r7, r5, r9, ror #12
 800985c:	21425550 	cmpcs	r2, r0, asr r5
 8009860:	00000000 	andeq	r0, r0, r0
 8009864:	6b636f4c 	blvs	98e559c <_etext+0x18db490>
 8009868:	004e4f20 	subeq	r4, lr, r0, lsr #30
 800986c:	6b636f4c 	blvs	98e55a4 <_etext+0x18db498>
 8009870:	7e6e4f20 	cdpvc	15, 6, cr4, cr14, cr0, {1}
 8009874:	00000000 	andeq	r0, r0, r0
 8009878:	74716d65 	ldrbtvc	r6, [r1], #-3429	; 0xfffff29b
 800987c:	00000074 	andeq	r0, r0, r4, ror r0
 8009880:	454c4449 	strbmi	r4, [ip, #-1097]	; 0xfffffbb7
 8009884:	00000000 	andeq	r0, r0, r0

08009888 <F6x8>:
	...
 8009890:	00002f00 	andeq	r2, r0, r0, lsl #30
 8009894:	00070000 	andeq	r0, r7, r0
 8009898:	14000007 	strne	r0, [r0], #-7
 800989c:	147f147f 	ldrbtne	r1, [pc], #-1151	; 80098a4 <F6x8+0x1c>
 80098a0:	7f2a2400 	svcvc	0x002a2400
 80098a4:	6200122a 	andvs	r1, r0, #-1610612734	; 0xa0000002
 80098a8:	23130864 	tstcs	r3, #100, 16	; 0x640000
 80098ac:	55493600 	strbpl	r3, [r9, #-1536]	; 0xfffffa00
 80098b0:	00005022 	andeq	r5, r0, r2, lsr #32
 80098b4:	00000305 	andeq	r0, r0, r5, lsl #6
 80098b8:	221c0000 	andscs	r0, ip, #0
 80098bc:	00000041 	andeq	r0, r0, r1, asr #32
 80098c0:	001c2241 	andseq	r2, ip, r1, asr #4
 80098c4:	3e081400 	cfcpyscc	mvf1, mvf8
 80098c8:	08001408 	stmdaeq	r0, {r3, sl, ip}
 80098cc:	08083e08 	stmdaeq	r8, {r3, r9, sl, fp, ip, sp}
 80098d0:	a0000000 	andge	r0, r0, r0
 80098d4:	08000060 	stmdaeq	r0, {r5, r6}
 80098d8:	08080808 	stmdaeq	r8, {r3, fp}
 80098dc:	60600000 	rsbvs	r0, r0, r0
 80098e0:	20000000 	andcs	r0, r0, r0
 80098e4:	02040810 	andeq	r0, r4, #16, 16	; 0x100000
 80098e8:	49513e00 	ldmdbmi	r1, {r9, sl, fp, ip, sp}^
 80098ec:	00003e45 	andeq	r3, r0, r5, asr #28
 80098f0:	00407f42 	subeq	r7, r0, r2, asr #30
 80098f4:	51614200 	cmnpl	r1, r0, lsl #4
 80098f8:	21004649 	tstcs	r0, r9, asr #12
 80098fc:	314b4541 	cmpcc	fp, r1, asr #10
 8009900:	12141800 	andsne	r1, r4, #0, 16
 8009904:	2700107f 	smlsdxcs	r0, pc, r0, r1	; <UNPREDICTABLE>
 8009908:	39454545 	stmdbcc	r5, {r0, r2, r6, r8, sl, lr}^
 800990c:	494a3c00 	stmdbmi	sl, {sl, fp, ip, sp}^
 8009910:	01003049 	tsteq	r0, r9, asr #32
 8009914:	03050971 	movweq	r0, #22897	; 0x5971
 8009918:	49493600 	stmdbmi	r9, {r9, sl, ip, sp}^
 800991c:	06003649 	streq	r3, [r0], -r9, asr #12
 8009920:	1e294949 	vnmulne.f16	s8, s18, s18	; <UNPREDICTABLE>
 8009924:	36360000 	ldrtcc	r0, [r6], -r0
 8009928:	00000000 	andeq	r0, r0, r0
 800992c:	00003656 	andeq	r3, r0, r6, asr r6
 8009930:	22140800 	andscs	r0, r4, #0, 16
 8009934:	14000041 	strne	r0, [r0], #-65	; 0xffffffbf
 8009938:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 800993c:	22410000 	subcs	r0, r1, #0
 8009940:	02000814 	andeq	r0, r0, #20, 16	; 0x140000
 8009944:	06095101 	streq	r5, [r9], -r1, lsl #2
 8009948:	59493200 	stmdbpl	r9, {r9, ip, sp}^
 800994c:	7c003e51 	stcvc	14, cr3, [r0], {81}	; 0x51
 8009950:	7c121112 	ldfvcs	f1, [r2], {18}
 8009954:	49497f00 	stmdbmi	r9, {r8, r9, sl, fp, ip, sp, lr}^
 8009958:	3e003649 	cfmadd32cc	mvax2, mvfx3, mvfx0, mvfx9
 800995c:	22414141 	subcs	r4, r1, #1073741840	; 0x40000010
 8009960:	41417f00 	cmpmi	r1, r0, lsl #30
 8009964:	7f001c22 	svcvc	0x00001c22
 8009968:	41494949 	cmpmi	r9, r9, asr #18
 800996c:	09097f00 	stmdbeq	r9, {r8, r9, sl, fp, ip, sp, lr}
 8009970:	3e000109 	adfccs	f0, f0, #1.0
 8009974:	7a494941 	bvc	925be80 <_etext+0x1251d74>
 8009978:	08087f00 	stmdaeq	r8, {r8, r9, sl, fp, ip, sp, lr}
 800997c:	00007f08 	andeq	r7, r0, r8, lsl #30
 8009980:	00417f41 	subeq	r7, r1, r1, asr #30
 8009984:	41402000 	mrsmi	r2, (UNDEF: 64)
 8009988:	7f00013f 	svcvc	0x0000013f
 800998c:	41221408 			; <UNDEFINED> instruction: 0x41221408
 8009990:	40407f00 	submi	r7, r0, r0, lsl #30
 8009994:	7f004040 	svcvc	0x00004040
 8009998:	7f020c02 	svcvc	0x00020c02
 800999c:	08047f00 	stmdaeq	r4, {r8, r9, sl, fp, ip, sp, lr}
 80099a0:	3e007f10 	mcrcc	15, 0, r7, cr0, cr0, {0}
 80099a4:	3e414141 	dvfccsm	f4, f1, f1
 80099a8:	09097f00 	stmdbeq	r9, {r8, r9, sl, fp, ip, sp, lr}
 80099ac:	3e000609 	cfmadd32cc	mvax0, mvfx0, mvfx0, mvfx9
 80099b0:	5e215141 	sufplsm	f5, f1, f1
 80099b4:	19097f00 	stmdbne	r9, {r8, r9, sl, fp, ip, sp, lr}
 80099b8:	46004629 	strmi	r4, [r0], -r9, lsr #12
 80099bc:	31494949 	cmpcc	r9, r9, asr #18
 80099c0:	7f010100 	svcvc	0x00010100
 80099c4:	3f000101 	svccc	0x00000101
 80099c8:	3f404040 	svccc	0x00404040
 80099cc:	40201f00 	eormi	r1, r0, r0, lsl #30
 80099d0:	3f001f20 	svccc	0x00001f20
 80099d4:	3f403840 	svccc	0x00403840
 80099d8:	08146300 	ldmdaeq	r4, {r8, r9, sp, lr}
 80099dc:	07006314 	smladeq	r0, r4, r3, r6
 80099e0:	07087008 	streq	r7, [r8, -r8]
 80099e4:	49516100 	ldmdbmi	r1, {r8, sp, lr}^
 80099e8:	00004345 	andeq	r4, r0, r5, asr #6
 80099ec:	0041417f 	subeq	r4, r1, pc, ror r1
 80099f0:	552a5500 	strpl	r5, [sl, #-1280]!	; 0xfffffb00
 80099f4:	0000552a 	andeq	r5, r0, sl, lsr #10
 80099f8:	007f4141 	rsbseq	r4, pc, r1, asr #2
 80099fc:	01020400 	tsteq	r2, r0, lsl #8
 8009a00:	40000402 	andmi	r0, r0, r2, lsl #8
 8009a04:	40404040 	submi	r4, r0, r0, asr #32
 8009a08:	02010000 	andeq	r0, r1, #0
 8009a0c:	20000004 	andcs	r0, r0, r4
 8009a10:	78545454 	ldmdavc	r4, {r2, r4, r6, sl, ip, lr}^
 8009a14:	44487f00 	strbmi	r7, [r8], #-3840	; 0xfffff100
 8009a18:	38003844 	stmdacc	r0, {r2, r6, fp, ip, sp}
 8009a1c:	20444444 	subcs	r4, r4, r4, asr #8
 8009a20:	44443800 	strbmi	r3, [r4], #-2048	; 0xfffff800
 8009a24:	38007f48 	stmdacc	r0, {r3, r6, r8, r9, sl, fp, ip, sp, lr}
 8009a28:	18545454 	ldmdane	r4, {r2, r4, r6, sl, ip, lr}^
 8009a2c:	097e0800 	ldmdbeq	lr!, {fp}^
 8009a30:	18000201 	stmdane	r0, {r0, r9}
 8009a34:	7ca4a4a4 	cfstrsvc	mvf10, [r4], #656	; 0x290
 8009a38:	04087f00 	streq	r7, [r8], #-3840	; 0xfffff100
 8009a3c:	00007804 	andeq	r7, r0, r4, lsl #16
 8009a40:	00407d44 	subeq	r7, r0, r4, asr #26
 8009a44:	84804000 	strhi	r4, [r0], #0
 8009a48:	7f00007d 	svcvc	0x0000007d
 8009a4c:	00442810 	subeq	r2, r4, r0, lsl r8
 8009a50:	7f410000 	svcvc	0x00410000
 8009a54:	7c000040 	stcvc	0, cr0, [r0], {64}	; 0x40
 8009a58:	78041804 	stmdavc	r4, {r2, fp, ip}
 8009a5c:	04087c00 	streq	r7, [r8], #-3072	; 0xfffff400
 8009a60:	38007804 	stmdacc	r0, {r2, fp, ip, sp, lr}
 8009a64:	38444444 	stmdacc	r4, {r2, r6, sl, lr}^
 8009a68:	2424fc00 	strtcs	pc, [r4], #-3072	; 0xfffff400
 8009a6c:	18001824 	stmdane	r0, {r2, r5, fp, ip}
 8009a70:	fc182424 	ldc2	4, cr2, [r8], {36}	; 0x24
 8009a74:	04087c00 	streq	r7, [r8], #-3072	; 0xfffff400
 8009a78:	48000804 	stmdami	r0, {r2, fp}
 8009a7c:	20545454 	subscs	r5, r4, r4, asr r4
 8009a80:	443f0400 	ldrtmi	r0, [pc], #-1024	; 8009a88 <F6x8+0x200>
 8009a84:	3c002040 	stccc	0, cr2, [r0], {64}	; 0x40
 8009a88:	7c204040 	stcvc	0, cr4, [r0], #-256	; 0xffffff00
 8009a8c:	40201c00 	eormi	r1, r0, r0, lsl #24
 8009a90:	3c001c20 	stccc	12, cr1, [r0], {32}
 8009a94:	3c403040 	mcrrcc	0, 4, r3, r0, cr0
 8009a98:	10284400 	eorne	r4, r8, r0, lsl #8
 8009a9c:	1c004428 	cfstrsne	mvf4, [r0], {40}	; 0x28
 8009aa0:	7ca0a0a0 	stcvc	0, cr10, [r0], #640	; 0x280
 8009aa4:	54644400 	strbtpl	r4, [r4], #-1024	; 0xfffffc00
 8009aa8:	1000444c 	andne	r4, r0, ip, asr #8
 8009aac:	000082fe 	strdeq	r8, [r0], -lr
 8009ab0:	00ff0000 	rscseq	r0, pc, r0
 8009ab4:	00000000 	andeq	r0, r0, r0
 8009ab8:	0010fe82 	andseq	pc, r0, r2, lsl #29
 8009abc:	04020204 	streq	r0, [r2], #-516	; 0xfffffdfc
 8009ac0:	14140204 	ldrne	r0, [r4], #-516	; 0xfffffdfc
 8009ac4:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec

08009ac8 <F8X16>:
	...
 8009ad8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
 8009adc:	00000000 	andeq	r0, r0, r0
 8009ae0:	33000000 	movwcc	r0, #0
 8009ae4:	00000030 	andeq	r0, r0, r0, lsr r0
 8009ae8:	060c1000 	streq	r1, [ip], -r0
 8009aec:	00060c10 	andeq	r0, r6, r0, lsl ip
	...
 8009af8:	4078c040 	rsbsmi	ip, r8, r0, asr #32
 8009afc:	004078c0 	subeq	r7, r0, r0, asr #17
 8009b00:	04043f04 	streq	r3, [r4], #-3844	; 0xfffff0fc
 8009b04:	0004043f 	andeq	r0, r4, pc, lsr r4
 8009b08:	fc887000 	stc2	0, cr7, [r8], {0}
 8009b0c:	00003008 	andeq	r3, r0, r8
 8009b10:	ff201800 	vcmla.f16	d1, d0, d0[0], #180
 8009b14:	00001e21 	andeq	r1, r0, r1, lsr #28
 8009b18:	00f008f0 	ldrshteq	r0, [r0], #128	; 0x80
 8009b1c:	000018e0 	andeq	r1, r0, r0, ror #17
 8009b20:	031c2100 	tsteq	ip, #0, 2
 8009b24:	001e211e 	andseq	r2, lr, lr, lsl r1
 8009b28:	8808f000 	stmdahi	r8, {ip, sp, lr, pc}
 8009b2c:	00000070 	andeq	r0, r0, r0, ror r0
 8009b30:	2423211e 	strtcs	r2, [r3], #-286	; 0xfffffee2
 8009b34:	10212719 	eorne	r2, r1, r9, lsl r7
 8009b38:	000e1610 	andeq	r1, lr, r0, lsl r6
	...
 8009b48:	e0000000 	and	r0, r0, r0
 8009b4c:	00020418 	andeq	r0, r2, r8, lsl r4
 8009b50:	07000000 	streq	r0, [r0, -r0]
 8009b54:	00402018 	subeq	r2, r0, r8, lsl r0
 8009b58:	18040200 	stmdane	r4, {r9}
 8009b5c:	000000e0 	andeq	r0, r0, r0, ror #1
 8009b60:	18204000 	stmdane	r0!, {lr}
 8009b64:	00000007 	andeq	r0, r0, r7
 8009b68:	f0804040 			; <UNDEFINED> instruction: 0xf0804040
 8009b6c:	00404080 	subeq	r4, r0, r0, lsl #1
 8009b70:	0f010202 	svceq	0x00010202
 8009b74:	00020201 	andeq	r0, r2, r1, lsl #4
 8009b78:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
 8009b7c:	00000000 	andeq	r0, r0, r0
 8009b80:	1f010101 	svcne	0x00010101
 8009b84:	00010101 	andeq	r0, r1, r1, lsl #2
	...
 8009b90:	0070b080 	rsbseq	fp, r0, r0, lsl #1
	...
 8009ba0:	01010100 	mrseq	r0, (UNDEF: 17)
 8009ba4:	01010101 	tsteq	r1, r1, lsl #2
	...
 8009bb0:	00303000 	eorseq	r3, r0, r0
	...
 8009bbc:	04186080 	ldreq	r6, [r8], #-128	; 0xffffff80
 8009bc0:	06186000 	ldreq	r6, [r8], -r0
 8009bc4:	00000001 	andeq	r0, r0, r1
 8009bc8:	0810e000 	ldmdaeq	r0, {sp, lr, pc}
 8009bcc:	00e01008 	rsceq	r1, r0, r8
 8009bd0:	20100f00 	andscs	r0, r0, r0, lsl #30
 8009bd4:	000f1020 	andeq	r1, pc, r0, lsr #32
 8009bd8:	f8101000 			; <UNDEFINED> instruction: 0xf8101000
 8009bdc:	00000000 	andeq	r0, r0, r0
 8009be0:	3f202000 	svccc	0x00202000
 8009be4:	00002020 	andeq	r2, r0, r0, lsr #32
 8009be8:	08087000 	stmdaeq	r8, {ip, sp, lr}
 8009bec:	00708808 	rsbseq	r8, r0, r8, lsl #16
 8009bf0:	24283000 	strtcs	r3, [r8], #-0
 8009bf4:	00302122 	eorseq	r2, r0, r2, lsr #2
 8009bf8:	88083000 	stmdahi	r8, {ip, sp}
 8009bfc:	00304888 	eorseq	r4, r0, r8, lsl #17
 8009c00:	20201800 	eorcs	r1, r0, r0, lsl #16
 8009c04:	000e1120 	andeq	r1, lr, r0, lsr #2
 8009c08:	20c00000 	sbccs	r0, r0, r0
 8009c0c:	0000f810 	andeq	pc, r0, r0, lsl r8	; <UNPREDICTABLE>
 8009c10:	24040700 	strcs	r0, [r4], #-1792	; 0xfffff900
 8009c14:	00243f24 	eoreq	r3, r4, r4, lsr #30
 8009c18:	8808f800 	stmdahi	r8, {fp, ip, sp, lr, pc}
 8009c1c:	00080888 	andeq	r0, r8, r8, lsl #17
 8009c20:	20211900 	eorcs	r1, r1, r0, lsl #18
 8009c24:	000e1120 	andeq	r1, lr, r0, lsr #2
 8009c28:	8810e000 	ldmdahi	r0, {sp, lr, pc}
 8009c2c:	00001888 	andeq	r1, r0, r8, lsl #17
 8009c30:	20110f00 	andscs	r0, r1, r0, lsl #30
 8009c34:	000e1120 	andeq	r1, lr, r0, lsr #2
 8009c38:	08083800 	stmdaeq	r8, {fp, ip, sp}
 8009c3c:	000838c8 	andeq	r3, r8, r8, asr #17
 8009c40:	3f000000 	svccc	0x00000000
 8009c44:	00000000 	andeq	r0, r0, r0
 8009c48:	08887000 	stmeq	r8, {ip, sp, lr}
 8009c4c:	00708808 	rsbseq	r8, r0, r8, lsl #16
 8009c50:	21221c00 			; <UNDEFINED> instruction: 0x21221c00
 8009c54:	001c2221 	andseq	r2, ip, r1, lsr #4
 8009c58:	0810e000 	ldmdaeq	r0, {sp, lr, pc}
 8009c5c:	00e01008 	rsceq	r1, r0, r8
 8009c60:	22310000 	eorscs	r0, r1, #0
 8009c64:	000f1122 	andeq	r1, pc, r2, lsr #2
 8009c68:	c0000000 	andgt	r0, r0, r0
 8009c6c:	000000c0 	andeq	r0, r0, r0, asr #1
 8009c70:	30000000 	andcc	r0, r0, r0
 8009c74:	00000030 	andeq	r0, r0, r0, lsr r0
 8009c78:	80000000 	andhi	r0, r0, r0
 8009c7c:	00000000 	andeq	r0, r0, r0
 8009c80:	60800000 	addvs	r0, r0, r0
 8009c84:	00000000 	andeq	r0, r0, r0
 8009c88:	40800000 	addmi	r0, r0, r0
 8009c8c:	00081020 	andeq	r1, r8, r0, lsr #32
 8009c90:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
 8009c94:	00201008 	eoreq	r1, r0, r8
 8009c98:	40404040 	submi	r4, r0, r0, asr #32
 8009c9c:	00404040 	subeq	r4, r0, r0, asr #32
 8009ca0:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 8009ca4:	00040404 	andeq	r0, r4, r4, lsl #8
 8009ca8:	20100800 	andscs	r0, r0, r0, lsl #16
 8009cac:	00008040 	andeq	r8, r0, r0, asr #32
 8009cb0:	08102000 	ldmdaeq	r0, {sp}
 8009cb4:	00010204 	andeq	r0, r1, r4, lsl #4
 8009cb8:	08487000 	stmdaeq	r8, {ip, sp, lr}^
 8009cbc:	00f00808 	rscseq	r0, r0, r8, lsl #16
 8009cc0:	30000000 	andcc	r0, r0, r0
 8009cc4:	00000136 	andeq	r0, r0, r6, lsr r1
 8009cc8:	28c830c0 	stmiacs	r8, {r6, r7, ip, sp}^
 8009ccc:	00e010e8 	rsceq	r1, r0, r8, ror #1
 8009cd0:	24271807 	strtcs	r1, [r7], #-2055	; 0xfffff7f9
 8009cd4:	000b1423 	andeq	r1, fp, r3, lsr #8
 8009cd8:	38c00000 	stmiacc	r0, {}^	; <UNPREDICTABLE>
 8009cdc:	000000e0 	andeq	r0, r0, r0, ror #1
 8009ce0:	02233c20 	eoreq	r3, r3, #32, 24	; 0x2000
 8009ce4:	20382702 	eorscs	r2, r8, r2, lsl #14
 8009ce8:	8888f808 	stmhi	r8, {r3, fp, ip, sp, lr, pc}
 8009cec:	00007088 	andeq	r7, r0, r8, lsl #1
 8009cf0:	20203f20 	eorcs	r3, r0, r0, lsr #30
 8009cf4:	000e1120 	andeq	r1, lr, r0, lsr #2
 8009cf8:	080830c0 	stmdaeq	r8, {r6, r7, ip, sp}
 8009cfc:	00380808 	eorseq	r0, r8, r8, lsl #16
 8009d00:	20201807 	eorcs	r1, r0, r7, lsl #16
 8009d04:	00081020 	andeq	r1, r8, r0, lsr #32
 8009d08:	0808f808 	stmdaeq	r8, {r3, fp, ip, sp, lr, pc}
 8009d0c:	00e01008 	rsceq	r1, r0, r8
 8009d10:	20203f20 	eorcs	r3, r0, r0, lsr #30
 8009d14:	000f1020 	andeq	r1, pc, r0, lsr #32
 8009d18:	8888f808 	stmhi	r8, {r3, fp, ip, sp, lr, pc}
 8009d1c:	001008e8 	andseq	r0, r0, r8, ror #17
 8009d20:	20203f20 	eorcs	r3, r0, r0, lsr #30
 8009d24:	00182023 	andseq	r2, r8, r3, lsr #32
 8009d28:	8888f808 	stmhi	r8, {r3, fp, ip, sp, lr, pc}
 8009d2c:	001008e8 	andseq	r0, r0, r8, ror #17
 8009d30:	00203f20 	eoreq	r3, r0, r0, lsr #30
 8009d34:	00000003 	andeq	r0, r0, r3
 8009d38:	080830c0 	stmdaeq	r8, {r6, r7, ip, sp}
 8009d3c:	00003808 	andeq	r3, r0, r8, lsl #16
 8009d40:	20201807 	eorcs	r1, r0, r7, lsl #16
 8009d44:	00021e22 	andeq	r1, r2, r2, lsr #28
 8009d48:	0008f808 	andeq	pc, r8, r8, lsl #16
 8009d4c:	08f80800 	ldmeq	r8!, {fp}^
 8009d50:	01213f20 			; <UNDEFINED> instruction: 0x01213f20
 8009d54:	203f2101 	eorscs	r2, pc, r1, lsl #2
 8009d58:	f8080800 			; <UNDEFINED> instruction: 0xf8080800
 8009d5c:	00000808 	andeq	r0, r0, r8, lsl #16
 8009d60:	3f202000 	svccc	0x00202000
 8009d64:	00002020 	andeq	r2, r0, r0, lsr #32
 8009d68:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
 8009d6c:	000808f8 	strdeq	r0, [r8], -r8
 8009d70:	808080c0 	addhi	r8, r0, r0, asr #1
 8009d74:	0000007f 	andeq	r0, r0, pc, ror r0
 8009d78:	c088f808 	addgt	pc, r8, r8, lsl #16
 8009d7c:	00081828 	andeq	r1, r8, r8, lsr #16
 8009d80:	01203f20 			; <UNDEFINED> instruction: 0x01203f20
 8009d84:	00203826 	eoreq	r3, r0, r6, lsr #16
 8009d88:	0008f808 	andeq	pc, r8, r8, lsl #16
 8009d8c:	00000000 	andeq	r0, r0, r0
 8009d90:	20203f20 	eorcs	r3, r0, r0, lsr #30
 8009d94:	00302020 	eorseq	r2, r0, r0, lsr #32
 8009d98:	00f8f808 	rscseq	pc, r8, r8, lsl #16
 8009d9c:	0008f8f8 	strdeq	pc, [r8], -r8
 8009da0:	3f003f20 	svccc	0x00003f20
 8009da4:	00203f00 	eoreq	r3, r0, r0, lsl #30
 8009da8:	c030f808 	eorsgt	pc, r0, r8, lsl #16
 8009dac:	08f80800 	ldmeq	r8!, {fp}^
 8009db0:	00203f20 	eoreq	r3, r0, r0, lsr #30
 8009db4:	003f1807 	eorseq	r1, pc, r7, lsl #16
 8009db8:	080810e0 	stmdaeq	r8, {r5, r6, r7, ip}
 8009dbc:	00e01008 	rsceq	r1, r0, r8
 8009dc0:	2020100f 	eorcs	r1, r0, pc
 8009dc4:	000f1020 	andeq	r1, pc, r0, lsr #32
 8009dc8:	0808f808 	stmdaeq	r8, {r3, fp, ip, sp, lr, pc}
 8009dcc:	00f00808 	rscseq	r0, r0, r8, lsl #16
 8009dd0:	01213f20 			; <UNDEFINED> instruction: 0x01213f20
 8009dd4:	00000101 	andeq	r0, r0, r1, lsl #2
 8009dd8:	080810e0 	stmdaeq	r8, {r5, r6, r7, ip}
 8009ddc:	00e01008 	rsceq	r1, r0, r8
 8009de0:	2424180f 	strtcs	r1, [r4], #-2063	; 0xfffff7f1
 8009de4:	004f5038 	subeq	r5, pc, r8, lsr r0	; <UNPREDICTABLE>
 8009de8:	8888f808 	stmhi	r8, {r3, fp, ip, sp, lr, pc}
 8009dec:	00708888 	rsbseq	r8, r0, r8, lsl #17
 8009df0:	00203f20 	eoreq	r3, r0, r0, lsr #30
 8009df4:	20300c03 	eorscs	r0, r0, r3, lsl #24
 8009df8:	08887000 	stmeq	r8, {ip, sp, lr}
 8009dfc:	00380808 	eorseq	r0, r8, r8, lsl #16
 8009e00:	21203800 			; <UNDEFINED> instruction: 0x21203800
 8009e04:	001c2221 	andseq	r2, ip, r1, lsr #4
 8009e08:	f8080818 			; <UNDEFINED> instruction: 0xf8080818
 8009e0c:	00180808 	andseq	r0, r8, r8, lsl #16
 8009e10:	3f200000 	svccc	0x00200000
 8009e14:	00000020 	andeq	r0, r0, r0, lsr #32
 8009e18:	0008f808 	andeq	pc, r8, r8, lsl #16
 8009e1c:	08f80800 	ldmeq	r8!, {fp}^
 8009e20:	20201f00 	eorcs	r1, r0, r0, lsl #30
 8009e24:	001f2020 	andseq	r2, pc, r0, lsr #32
 8009e28:	00887808 	addeq	r7, r8, r8, lsl #16
 8009e2c:	0838c800 	ldmdaeq	r8!, {fp, lr, pc}
 8009e30:	38070000 	stmdacc	r7, {}	; <UNPREDICTABLE>
 8009e34:	0000010e 	andeq	r0, r0, lr, lsl #2
 8009e38:	f80008f8 			; <UNDEFINED> instruction: 0xf80008f8
 8009e3c:	00f80800 	rscseq	r0, r8, r0, lsl #16
 8009e40:	00073c03 	andeq	r3, r7, r3, lsl #24
 8009e44:	00033c07 	andeq	r3, r3, r7, lsl #24
 8009e48:	80681808 	rsbhi	r1, r8, r8, lsl #16
 8009e4c:	08186880 	ldmdaeq	r8, {r7, fp, sp, lr}
 8009e50:	032c3020 			; <UNDEFINED> instruction: 0x032c3020
 8009e54:	20302c03 	eorscs	r2, r0, r3, lsl #24
 8009e58:	00c83808 	sbceq	r3, r8, r8, lsl #16
 8009e5c:	000838c8 	andeq	r3, r8, r8, asr #17
 8009e60:	3f200000 	svccc	0x00200000
 8009e64:	00000020 	andeq	r0, r0, r0, lsr #32
 8009e68:	08080810 	stmdaeq	r8, {r4, fp}
 8009e6c:	000838c8 	andeq	r3, r8, r8, asr #17
 8009e70:	21263820 			; <UNDEFINED> instruction: 0x21263820
 8009e74:	00182020 	andseq	r2, r8, r0, lsr #32
 8009e78:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
 8009e7c:	00020202 	andeq	r0, r2, r2, lsl #4
 8009e80:	7f000000 	svcvc	0x00000000
 8009e84:	00404040 	subeq	r4, r0, r0, asr #32
 8009e88:	c0300c00 	eorsgt	r0, r0, r0, lsl #24
 8009e8c:	00000000 	andeq	r0, r0, r0
 8009e90:	01000000 	mrseq	r0, (UNDEF: 0)
 8009e94:	00c03806 	sbceq	r3, r0, r6, lsl #16
 8009e98:	02020200 	andeq	r0, r2, #0, 4
 8009e9c:	000000fe 	strdeq	r0, [r0], -lr
 8009ea0:	40404000 	submi	r4, r0, r0
 8009ea4:	0000007f 	andeq	r0, r0, pc, ror r0
 8009ea8:	02040000 	andeq	r0, r4, #0
 8009eac:	00040202 	andeq	r0, r4, r2, lsl #4
	...
 8009ec0:	80808080 	addhi	r8, r0, r0, lsl #1
 8009ec4:	80808080 	addhi	r8, r0, r0, lsl #1
 8009ec8:	04020200 	streq	r0, [r2], #-512	; 0xfffffe00
	...
 8009ed8:	80800000 	addhi	r0, r0, r0
 8009edc:	00008080 	andeq	r8, r0, r0, lsl #1
 8009ee0:	22241900 	eorcs	r1, r4, #0, 18
 8009ee4:	203f2222 	eorscs	r2, pc, r2, lsr #4
 8009ee8:	8000f808 	andhi	pc, r0, r8, lsl #16
 8009eec:	00000080 	andeq	r0, r0, r0, lsl #1
 8009ef0:	20113f00 	andscs	r3, r1, r0, lsl #30
 8009ef4:	000e1120 	andeq	r1, lr, r0, lsr #2
 8009ef8:	80000000 	andhi	r0, r0, r0
 8009efc:	00008080 	andeq	r8, r0, r0, lsl #1
 8009f00:	20110e00 	andscs	r0, r1, r0, lsl #28
 8009f04:	00112020 	andseq	r2, r1, r0, lsr #32
 8009f08:	80000000 	andhi	r0, r0, r0
 8009f0c:	00f88880 	rscseq	r8, r8, r0, lsl #17
 8009f10:	20110e00 	andscs	r0, r1, r0, lsl #28
 8009f14:	203f1020 	eorscs	r1, pc, r0, lsr #32
 8009f18:	80800000 	addhi	r0, r0, r0
 8009f1c:	00008080 	andeq	r8, r0, r0, lsl #1
 8009f20:	22221f00 	eorcs	r1, r2, #0, 30
 8009f24:	00132222 	andseq	r2, r3, r2, lsr #4
 8009f28:	f0808000 			; <UNDEFINED> instruction: 0xf0808000
 8009f2c:	18888888 	stmne	r8, {r3, r7, fp, pc}
 8009f30:	3f202000 	svccc	0x00202000
 8009f34:	00002020 	andeq	r2, r0, r0, lsr #32
 8009f38:	80800000 	addhi	r0, r0, r0
 8009f3c:	00808080 	addeq	r8, r0, r0, lsl #1
 8009f40:	94946b00 	ldrls	r6, [r4], #2816	; 0xb00
 8009f44:	00609394 	mlseq	r0, r4, r3, r9
 8009f48:	8000f808 	andhi	pc, r0, r8, lsl #16
 8009f4c:	00008080 	andeq	r8, r0, r0, lsl #1
 8009f50:	00213f20 	eoreq	r3, r1, r0, lsr #30
 8009f54:	203f2000 	eorscs	r2, pc, r0
 8009f58:	98988000 	ldmls	r8, {pc}
 8009f5c:	00000000 	andeq	r0, r0, r0
 8009f60:	3f202000 	svccc	0x00202000
 8009f64:	00002020 	andeq	r2, r0, r0, lsr #32
 8009f68:	80000000 	andhi	r0, r0, r0
 8009f6c:	00009898 	muleq	r0, r8, r8
 8009f70:	8080c000 	addhi	ip, r0, r0
 8009f74:	00007f80 	andeq	r7, r0, r0, lsl #31
 8009f78:	0000f808 	andeq	pc, r0, r8, lsl #16
 8009f7c:	00808080 	addeq	r8, r0, r0, lsl #1
 8009f80:	02243f20 	eoreq	r3, r4, #32, 30	; 0x80
 8009f84:	0020302d 	eoreq	r3, r0, sp, lsr #32
 8009f88:	f8080800 			; <UNDEFINED> instruction: 0xf8080800
 8009f8c:	00000000 	andeq	r0, r0, r0
 8009f90:	3f202000 	svccc	0x00202000
 8009f94:	00002020 	andeq	r2, r0, r0, lsr #32
 8009f98:	80808080 	addhi	r8, r0, r0, lsl #1
 8009f9c:	00808080 	addeq	r8, r0, r0, lsl #1
 8009fa0:	00203f20 	eoreq	r3, r0, r0, lsr #30
 8009fa4:	3f00203f 	svccc	0x0000203f
 8009fa8:	80008080 	andhi	r8, r0, r0, lsl #1
 8009fac:	00008080 	andeq	r8, r0, r0, lsl #1
 8009fb0:	00213f20 	eoreq	r3, r1, r0, lsr #30
 8009fb4:	203f2000 	eorscs	r2, pc, r0
 8009fb8:	80800000 	addhi	r0, r0, r0
 8009fbc:	00008080 	andeq	r8, r0, r0, lsl #1
 8009fc0:	20201f00 	eorcs	r1, r0, r0, lsl #30
 8009fc4:	001f2020 	andseq	r2, pc, r0, lsr #32
 8009fc8:	80008080 	andhi	r8, r0, r0, lsl #1
 8009fcc:	00000080 	andeq	r0, r0, r0, lsl #1
 8009fd0:	20a1ff80 	adccs	pc, r1, r0, lsl #31
 8009fd4:	000e1120 	andeq	r1, lr, r0, lsr #2
 8009fd8:	80000000 	andhi	r0, r0, r0
 8009fdc:	00808080 	addeq	r8, r0, r0, lsl #1
 8009fe0:	20110e00 	andscs	r0, r1, r0, lsl #28
 8009fe4:	80ffa020 	rscshi	sl, pc, r0, lsr #32
 8009fe8:	00808080 	addeq	r8, r0, r0, lsl #1
 8009fec:	00808080 	addeq	r8, r0, r0, lsl #1
 8009ff0:	213f2020 	teqcs	pc, r0, lsr #32
 8009ff4:	00010020 	andeq	r0, r1, r0, lsr #32
 8009ff8:	80800000 	addhi	r0, r0, r0
 8009ffc:	00808080 	addeq	r8, r0, r0, lsl #1
 800a000:	24243300 	strtcs	r3, [r4], #-768	; 0xfffffd00
 800a004:	00192424 	andseq	r2, r9, r4, lsr #8
 800a008:	e0808000 	add	r8, r0, r0
 800a00c:	00008080 	andeq	r8, r0, r0, lsl #1
 800a010:	1f000000 	svcne	0x00000000
 800a014:	00002020 	andeq	r2, r0, r0, lsr #32
 800a018:	00008080 	andeq	r8, r0, r0, lsl #1
 800a01c:	00808000 	addeq	r8, r0, r0
 800a020:	20201f00 	eorcs	r1, r0, r0, lsl #30
 800a024:	203f1020 	eorscs	r1, pc, r0, lsr #32
 800a028:	00808080 	addeq	r8, r0, r0, lsl #1
 800a02c:	80808000 	addhi	r8, r0, r0
 800a030:	300e0100 	andcc	r0, lr, r0, lsl #2
 800a034:	00010608 	andeq	r0, r1, r8, lsl #12
 800a038:	80008080 	andhi	r8, r0, r0, lsl #1
 800a03c:	80808000 	addhi	r8, r0, r0
 800a040:	030c300f 	movweq	r3, #49167	; 0xc00f
 800a044:	000f300c 	andeq	r3, pc, ip
 800a048:	00808000 	addeq	r8, r0, r0
 800a04c:	00808080 	addeq	r8, r0, r0, lsl #1
 800a050:	2e312000 	cdpcs	0, 3, cr2, cr1, cr0, {0}
 800a054:	0020310e 	eoreq	r3, r0, lr, lsl #2
 800a058:	00808080 	addeq	r8, r0, r0, lsl #1
 800a05c:	80808000 	addhi	r8, r0, r0
 800a060:	708e8180 	addvc	r8, lr, r0, lsl #3
 800a064:	00010618 	andeq	r0, r1, r8, lsl r6
 800a068:	80808000 	addhi	r8, r0, r0
 800a06c:	00808080 	addeq	r8, r0, r0, lsl #1
 800a070:	2c302100 	ldfcss	f2, [r0], #-0
 800a074:	00302122 	eorseq	r2, r0, r2, lsr #2
 800a078:	00000000 	andeq	r0, r0, r0
 800a07c:	02027c80 	andeq	r7, r2, #128, 24	; 0x8000
 800a080:	00000000 	andeq	r0, r0, r0
 800a084:	40403f00 	submi	r3, r0, r0, lsl #30
 800a088:	00000000 	andeq	r0, r0, r0
 800a08c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 800a090:	00000000 	andeq	r0, r0, r0
 800a094:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 800a098:	7c020200 	sfmvc	f0, 4, [r2], {-0}
 800a09c:	00000080 	andeq	r0, r0, r0, lsl #1
 800a0a0:	3f404000 	svccc	0x00404000
 800a0a4:	00000000 	andeq	r0, r0, r0
 800a0a8:	01010600 	tsteq	r1, r0, lsl #12
 800a0ac:	04040202 	streq	r0, [r4], #-514	; 0xfffffdfe
	...

0800a0b8 <MQTT_BROKER_IP>:
 800a0b8:	00000000 	andeq	r0, r0, r0

0800a0bc <memsize>:
 800a0bc:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800a0c0:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800a0c4:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800a0c8:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800a0cc:	00000043 	andeq	r0, r0, r3, asr #32
 800a0d0:	2b302d23 	blcs	8c15564 <_etext+0xc0b458>
 800a0d4:	00000020 	andeq	r0, r0, r0, lsr #32
 800a0d8:	004c6c68 	subeq	r6, ip, r8, ror #24
 800a0dc:	45676665 	strbmi	r6, [r7, #-1637]!	; 0xfffff99b
 800a0e0:	00004746 	andeq	r4, r0, r6, asr #14
 800a0e4:	33323130 	teqcc	r2, #48, 2
 800a0e8:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800a0ec:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
 800a0f0:	46454443 	strbmi	r4, [r5], -r3, asr #8
 800a0f4:	00000000 	andeq	r0, r0, r0
 800a0f8:	33323130 	teqcc	r2, #48, 2
 800a0fc:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800a100:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
 800a104:	66656463 	strbtvs	r6, [r5], -r3, ror #8
 800a108:	00000000 	andeq	r0, r0, r0

Disassembly of section .data:

20000000 <_impure_ptr>:
20000000:	20000004 	andcs	r0, r0, r4

20000004 <impure_data>:
	...
20000024:	0800a0cc 	stmdaeq	r0, {r2, r3, r6, r7, sp, pc}
	...

20000064 <oled_init>:
20000064:	401000ae 	andsmi	r0, r0, lr, lsr #1
20000068:	a1ff81b0 	ldrhge	r8, [pc, #16]	; 20000080 <sock_any_port>
2000006c:	c83fa8a6 	ldmdagt	pc!, {r1, r2, r5, r7, fp, sp, pc}	; <UNPREDICTABLE>
20000070:	80d500d3 	ldrsbhi	r0, [r5], #3
20000074:	f1d905d8 			; <UNDEFINED> instruction: 0xf1d905d8
20000078:	30db12da 	ldrsbcc	r1, [fp], #42	; 0x2a
2000007c:	00af148d 	adceq	r1, pc, sp, lsl #9

20000080 <sock_any_port>:
20000080:	0000c000 	andeq	ip, r0, r0

20000084 <WIZCHIP>:
20000084:	35570201 	ldrbcc	r0, [r7, #-513]	; 0xfffffdff
20000088:	00303035 	eorseq	r3, r0, r5, lsr r0
2000008c:	0800277d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, sl, sp}
20000090:	08002789 	stmdaeq	r0, {r0, r3, r7, r8, r9, sl, sp}
20000094:	08002795 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, sl, sp}
20000098:	080027a1 	stmdaeq	r0, {r0, r5, r7, r8, r9, sl, sp}
2000009c:	080027ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, sl, sp}
200000a0:	080027c5 	stmdaeq	r0, {r0, r2, r6, r7, r8, r9, sl, sp}

200000a4 <HOST_NAME>:
200000a4:	41534454 	cmpmi	r3, r4, asr r4
200000a8:	00005453 	andeq	r5, r0, r3, asr r4

200000ac <dhcp_ip_assign>:
200000ac:	0800372d 	stmdaeq	r0, {r0, r2, r3, r5, r8, r9, sl, ip, sp}

200000b0 <dhcp_ip_update>:
200000b0:	08003739 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9, sl, ip, sp}

200000b4 <dhcp_ip_conflict>:
200000b4:	08003761 	stmdaeq	r0, {r0, r5, r6, r8, r9, sl, ip, sp}

200000b8 <APBAHBPrescTable>:
200000b8:	00000000 	andeq	r0, r0, r0
200000bc:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
200000c0:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
200000c4:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

200000c8 <ADCPrescTable>:
200000c8:	08060402 	stmdaeq	r6, {r1, sl}

200000cc <gWIZNETINFO>:
200000cc:	00dc0800 	sbcseq	r0, ip, r0, lsl #16
200000d0:	000acdab 	andeq	ip, sl, fp, lsr #27
200000d4:	00fffd00 	rscseq	pc, pc, r0, lsl #26
200000d8:	000a0000 	andeq	r0, sl, r0
200000dc:	08080100 	stmdaeq	r8, {r8}
200000e0:	00020808 	andeq	r0, r2, r8, lsl #16

200000e4 <secondary_dns_server>:
200000e4:	04040808 	streq	r0, [r4], #-2056	; 0xfffff7f8

200000e8 <uxCriticalNesting>:
200000e8:	aaaaaaaa 	bge	1eaaab98 <__exidx_end+0x16aa0a8c>

Disassembly of section .bss:

200000ec <__malloc_free_list>:
200000ec:	00000000 	andeq	r0, r0, r0

200000f0 <__malloc_sbrk_start>:
200000f0:	00000000 	andeq	r0, r0, r0

200000f4 <heap_end.4167>:
200000f4:	00000000 	andeq	r0, r0, r0

200000f8 <sock_io_mode>:
	...

200000fa <sock_is_sending>:
	...

200000fc <sock_remained_size>:
	...

2000010c <sock_pack_info>:
	...

20000114 <_DNS_>:
20000114:	00000000 	andeq	r0, r0, r0

20000118 <_DHCP_>:
20000118:	00000000 	andeq	r0, r0, r0

2000011c <DHCP_allocated_ip>:
2000011c:	00000000 	andeq	r0, r0, r0

20000120 <DHCP_allocated_gw>:
20000120:	00000000 	andeq	r0, r0, r0

20000124 <DHCP_allocated_sn>:
20000124:	00000000 	andeq	r0, r0, r0

20000128 <DHCP_allocated_dns>:
20000128:	00000000 	andeq	r0, r0, r0

2000012c <wizchip_mac>:
	...

20000134 <Cip>:
20000134:	00000000 	andeq	r0, r0, r0

20000138 <retry_count.6115>:
20000138:	00000000 	andeq	r0, r0, r0

2000013c <timeSecond.6287>:
2000013c:	00000000 	andeq	r0, r0, r0

20000140 <Interval_counter>:
20000140:	00000000 	andeq	r0, r0, r0

20000144 <Timer2_Counter>:
20000144:	00000000 	andeq	r0, r0, r0

20000148 <infoMsg>:
20000148:	00000000 	andeq	r0, r0, r0

2000014c <ip_configed>:
	...

2000014d <lock_status>:
2000014d:	00000000 	andeq	r0, r0, r0

20000150 <pxCurrentTCB>:
20000150:	00000000 	andeq	r0, r0, r0

20000154 <pxReadyTasksLists>:
	...

200001b8 <xDelayedTaskList1>:
	...

200001cc <xDelayedTaskList2>:
	...

200001e0 <pxDelayedTaskList>:
200001e0:	00000000 	andeq	r0, r0, r0

200001e4 <pxOverflowDelayedTaskList>:
200001e4:	00000000 	andeq	r0, r0, r0

200001e8 <xPendingReadyList>:
	...

200001fc <xSuspendedTaskList>:
	...

20000210 <uxCurrentNumberOfTasks>:
20000210:	00000000 	andeq	r0, r0, r0

20000214 <xTickCount>:
20000214:	00000000 	andeq	r0, r0, r0

20000218 <uxTopReadyPriority>:
20000218:	00000000 	andeq	r0, r0, r0

2000021c <xSchedulerRunning>:
2000021c:	00000000 	andeq	r0, r0, r0

20000220 <uxPendedTicks>:
20000220:	00000000 	andeq	r0, r0, r0

20000224 <xYieldPending>:
20000224:	00000000 	andeq	r0, r0, r0

20000228 <xNumOfOverflows>:
20000228:	00000000 	andeq	r0, r0, r0

2000022c <uxTaskNumber>:
2000022c:	00000000 	andeq	r0, r0, r0

20000230 <xNextTaskUnblockTime>:
20000230:	00000000 	andeq	r0, r0, r0

20000234 <xIdleTaskHandle>:
20000234:	00000000 	andeq	r0, r0, r0

20000238 <uxSchedulerSuspended>:
20000238:	00000000 	andeq	r0, r0, r0

2000023c <ucHeap>:
	...

2000363c <xNextFreeByte>:
2000363c:	00000000 	andeq	r0, r0, r0

20003640 <pucAlignedHeap.5153>:
20003640:	00000000 	andeq	r0, r0, r0

20003644 <dhcp_state>:
20003644:	00000000 	andeq	r0, r0, r0

20003648 <DHCP_SHA>:
	...

20003650 <OLD_SIP>:
20003650:	00000000 	andeq	r0, r0, r0

20003654 <DHCP_XID>:
20003654:	00000000 	andeq	r0, r0, r0

20003658 <DHCP_SIP>:
20003658:	00000000 	andeq	r0, r0, r0

2000365c <my_time>:
2000365c:	00000000 	andeq	r0, r0, r0

20003660 <next_time>:
20003660:	00000000 	andeq	r0, r0, r0

20003664 <retry_count>:
20003664:	00000000 	andeq	r0, r0, r0

20003668 <lease_time>:
20003668:	00000000 	andeq	r0, r0, r0

2000366c <MSG>:
2000366c:	00000000 	andeq	r0, r0, r0

20003670 <DHCP_SOCKET>:
20003670:	00000000 	andeq	r0, r0, r0

20003674 <dns_buf>:
20003674:	00000000 	andeq	r0, r0, r0

20003678 <DNS_SOCKET>:
20003678:	00000000 	andeq	r0, r0, r0

2000367c <dns_time>:
2000367c:	00000000 	andeq	r0, r0, r0

20003680 <MSG_ID>:
20003680:	00000000 	andeq	r0, r0, r0

20003684 <packet_buffer>:
	...

20003a84 <lockNotify>:
20003a84:	00000000 	andeq	r0, r0, r0

20003a88 <w5500Data>:
20003a88:	00000000 	andeq	r0, r0, r0

20003a8c <mainTask>:
20003a8c:	00000000 	andeq	r0, r0, r0

20003a90 <lockTask>:
20003a90:	00000000 	andeq	r0, r0, r0

20003a94 <server_ip>:
20003a94:	00000000 	andeq	r0, r0, r0

20003a98 <broker>:
	...

20003af4 <gDATABUF>:
	...

200042f4 <dhcpClientTask>:
200042f4:	00000000 	andeq	r0, r0, r0

200042f8 <socketLock>:
200042f8:	00000000 	andeq	r0, r0, r0

200042fc <oledTask>:
200042fc:	00000000 	andeq	r0, r0, r0

20004300 <errno>:
20004300:	00000000 	andeq	r0, r0, r0

Disassembly of section ._user_heap_stack:

20004304 <end>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
{
   0:	00003041 	andeq	r3, r0, r1, asr #32
}
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
*********************************************************************************************************
*/
uint32_t getDHCPLeasetime(void)
{
	return lease_time.lVal;
}
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
}
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
}
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
  {
    bitstatus = SET;
  1c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
  }
  else
  {
    bitstatus = RESET;
  20:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  }
  /* Return the flag status */
  return bitstatus;
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
}
  28:	1a011803 	bne	4603c <_Min_Stack_Size+0x45e3c>
  2c:	22061e01 	andcs	r1, r6, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
{
       0:	00000443 	andeq	r0, r0, r3, asr #8
}
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000111 	andeq	r0, r0, r1, lsl r1
      10:	0000000c 	andeq	r0, r0, ip
	...
    bitstatus = RESET;
      20:	06010200 	streq	r0, [r1], -r0, lsl #4
  return bitstatus;
      24:	00000192 	muleq	r0, r2, r1
}
      28:	0000e303 	andeq	lr, r0, r3, lsl #6
      2c:	331d0200 	tstcc	sp, #0, 4
      30:	02000000 	andeq	r0, r0, #0
  tmpreg &= RTCCR_CAL_MASK;
  /* Set CAL[6:0] bits according to CalibrationValue value */
  tmpreg |= CalibrationValue;
  /* Store the new value */
  BKP->RTCCR = tmpreg;
}
      34:	01900801 	orrseq	r0, r0, r1, lsl #16
      38:	02020000 	andeq	r0, r2, #0
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
      3c:	00009505 	andeq	r9, r0, r5, lsl #10
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
      40:	00720300 	rsbseq	r0, r2, r0, lsl #6
      44:	2b020000 	blcs	8004c <_Min_Stack_Size+0x7fe4c>
      48:	0000004c 	andeq	r0, r0, ip, asr #32
      4c:	f2070202 	vhsub.s8	d0, d7, d2
}
      50:	02000001 	andeq	r0, r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
      54:	00bd0504 	adcseq	r0, sp, r4, lsl #10
}
      58:	67030000 	strvs	r0, [r3, -r0]
    __WFE();
  }
  
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);  
}
      5c:	02000000 	andeq	r0, r0, #0
      60:	00006541 	andeq	r6, r0, r1, asr #10
        Driver_OLED_Send_START(OLED_COMMAND);
		Driver_OLED_Set_Position(x0,y);
        /* 开始发送数据 */
        Driver_OLED_Send_START(OLED_DATA);
        for(x=x0;x<x1;x++){ 
            I2C_SendData(OLED_HARDWARE, BMP[j++]);
      64:	07040200 	streq	r0, [r4, -r0, lsl #4]
      68:	000001c9 	andeq	r0, r0, r9, asr #3
      6c:	b8050802 	stmdalt	r5, {r1, fp}
      70:	02000000 	andeq	r0, r0, #0
      74:	01c40708 	biceq	r0, r4, r8, lsl #14
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);    	
      78:	04040000 	streq	r0, [r4], #-0
      7c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
      80:	07040200 	streq	r0, [r4, -r0, lsl #4]
      84:	000001ce 	andeq	r0, r0, lr, asr #3
        for(x=x0;x<x1;x++){ 
      88:	0000e503 	andeq	lr, r0, r3, lsl #10
      8c:	28180300 	ldmdacs	r8, {r8, r9}
      90:	03000000 	movweq	r0, #0
      94:	00000074 	andeq	r0, r0, r4, ror r0
	    }
        /* 等待最后一个数据发送完 */
        _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
      98:	00412403 	subeq	r2, r1, r3, lsl #8
      9c:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
      a0:	03000000 	movweq	r0, #0
      a4:	00005a30 	andeq	r5, r0, r0, lsr sl
	for(y=y0;y<y1;y++){
      a8:	07040200 	streq	r0, [r4, -r0, lsl #4]
      ac:	00000059 	andeq	r0, r0, r9, asr r0
      b0:	00009e05 	andeq	r9, r0, r5, lsl #28
	}
    
}
      b4:	00880500 	addeq	r0, r8, r0, lsl #10
      b8:	74060000 	strvc	r0, [r6], #-0
      bc:	01a79b04 			; <UNDEFINED> instruction: 0x01a79b04
      c0:	87070000 	strhi	r0, [r7, -r0]
      c4:	04000000 	streq	r0, [r0], #-0
}
      c8:	0001a79d 	muleq	r1, sp, r7
      cc:	9f070000 	svcls	0x00070000
      d0:	04000000 	streq	r0, [r0], #-0
      d4:	0000b09e 	muleq	r0, lr, r0
      d8:	05070400 	streq	r0, [r7, #-1024]	; 0xfffffc00
      dc:	04000002 	streq	r0, [r0], #-2
}
      e0:	0000b09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      e4:	9e070800 	cdpls	8, 0, cr0, cr7, cr0, {0}
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      e8:	04000001 	streq	r0, [r0], #-1
      ec:	0000b0a0 	andeq	fp, r0, r0, lsr #1
      f0:	53080c00 	movwpl	r0, #35840	; 0x8c00
				prvUnlockQueue( pxQueue );
      f4:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
      f8:	0000b0a1 	andeq	fp, r0, r1, lsr #1
				if( xTaskResumeAll() == pdFALSE )
      fc:	43081000 	movwmi	r1, #32768	; 0x8000
     100:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
					portYIELD_WITHIN_API();
     104:	0000b0a2 	andeq	fp, r0, r2, lsr #1
     108:	53081400 	movwpl	r1, #33792	; 0x8400
     10c:	04005048 	streq	r5, [r0], #-72	; 0xffffffb8
     110:	0001bca3 	andeq	fp, r1, r3, lsr #25
     114:	db071800 	blle	1c611c <_Min_Stack_Size+0x1c5f1c>
				prvUnlockQueue( pxQueue );
     118:	04000001 	streq	r0, [r0], #-1
				( void ) xTaskResumeAll();
     11c:	0000b0a4 	andeq	fp, r0, r4, lsr #1
     120:	f2072400 	vshl.s8	d2, d0, d7
			prvUnlockQueue( pxQueue );
     124:	04000000 	streq	r0, [r0], #-0
			( void ) xTaskResumeAll();
     128:	0000b0a5 	andeq	fp, r0, r5, lsr #1
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     12c:	3a072800 	bcc	1ca134 <_Min_Stack_Size+0x1c9f34>
     130:	04000002 	streq	r0, [r0], #-2
     134:	0000b0a6 	andeq	fp, r0, r6, lsr #1
     138:	25072c00 	strcs	r2, [r7, #-3072]	; 0xfffff400
}
     13c:	04000002 	streq	r0, [r0], #-2
     140:	0000b0a7 	andeq	fp, r0, r7, lsr #1
     144:	e1073000 	mrs	r3, (UNDEF: 7)
	}
     148:	04000001 	streq	r0, [r0], #-1
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     14c:	0000b0a8 	andeq	fp, r0, r8, lsr #1
  SPIx->I2SCFGR = tmpreg;   
     150:	c6073400 	strgt	r3, [r7], -r0, lsl #8
     154:	04000000 	streq	r0, [r0], #-0
}
     158:	0000b0a9 	andeq	fp, r0, r9, lsr #1
     15c:	50073800 	andpl	r3, r7, r0, lsl #16
     160:	04000002 	streq	r0, [r0], #-2
     164:	0000b0aa 	andeq	fp, r0, sl, lsr #1
         *(uint16_t*) arg = getSn_DPORT(sn);
         break;
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
         *(uint16_t*) arg = getSn_KPALVTR(sn);
     168:	50083c00 	andpl	r3, r8, r0, lsl #24
         break;
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     16c:	04005246 	streq	r5, [r0], #-582	; 0xfffffdba
     170:	0001d6ab 	andeq	sp, r1, fp, lsr #13
     174:	44084000 	strmi	r4, [r8], #-0
     178:	04005246 	streq	r5, [r0], #-582	; 0xfffffdba
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     17c:	0001a7ac 	andeq	sl, r1, ip, lsr #15
     180:	41084800 	tstmi	r8, r0, lsl #16
     184:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
     188:	0001a7ad 	andeq	sl, r1, sp, lsr #15
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
     18c:	3f074c00 	svccc	0x00074c00
     190:	04000002 	streq	r0, [r0], #-2
     194:	0001f0ae 	andeq	pc, r1, lr, lsr #1
     198:	20075000 	andcs	r5, r7, r0
     19c:	04000002 	streq	r0, [r0], #-2
     1a0:	00020aaf 	andeq	r0, r2, pc, lsr #21
     1a4:	09006000 	stmdbeq	r0, {sp, lr}
         break;
      case SO_REMAINSIZE:
         if(getSn_MR(sn) == Sn_MR_TCP)
     1a8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     1ac:	0000b50a 	andeq	fp, r0, sl, lsl #10
     1b0:	0001bc00 	andeq	fp, r1, r0, lsl #24
     1b4:	00a90b00 	adceq	r0, r9, r0, lsl #22
     1b8:	000b0000 	andeq	r0, fp, r0
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1bc:	0001ac05 	andeq	sl, r1, r5, lsl #24
     1c0:	01a70a00 			; <UNDEFINED> instruction: 0x01a70a00
     1c4:	01d10000 	bicseq	r0, r1, r0
     1c8:	a90b0000 	stmdbge	fp, {}	; <UNPREDICTABLE>
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
     1cc:	01000000 	mrseq	r0, (UNDEF: 0)
            *(uint16_t*)arg = sock_remained_size[sn];
     1d0:	01c10500 	biceq	r0, r1, r0, lsl #10
     1d4:	d1090000 	mrsle	r0, (UNDEF: 9)
     1d8:	0a000001 	beq	1e4 <_Min_Heap_Size+0x1e4>
      case SO_PACKINFO:
         CHECK_SOCKMODE(Sn_MR_TCP);
     1dc:	000001a7 	andeq	r0, r0, r7, lsr #3
     1e0:	000001eb 	andeq	r0, r0, fp, ror #3
     1e4:	0000a90b 	andeq	sl, r0, fp, lsl #18
     1e8:	05000300 	streq	r0, [r0, #-768]	; 0xfffffd00
     1ec:	000001db 	ldrdeq	r0, [r0], -fp
     1f0:	0001eb09 	andeq	lr, r1, r9, lsl #22
     1f4:	01a70a00 			; <UNDEFINED> instruction: 0x01a70a00
     1f8:	02050000 	andeq	r0, r5, #0
         *(uint8_t*)arg = sock_pack_info[sn];
     1fc:	a90b0000 	stmdbge	fp, {}	; <UNPREDICTABLE>
     200:	04000000 	streq	r0, [r0], #-0
         break;
     204:	01f50500 	mvnseq	r0, r0, lsl #10
      default:
         return SOCKERR_SOCKOPT;
     208:	05090000 	streq	r0, [r9, #-0]
   }
   return SOCK_OK;
     20c:	03000002 	movweq	r0, #2
}
     210:	000001a4 	andeq	r0, r0, r4, lsr #3
     214:	00bab004 	adcseq	fp, sl, r4
     218:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
     21c:	05000000 	streq	r0, [r0, #-0]
}
     220:	0000021a 	andeq	r0, r0, sl, lsl r2
     224:	0033010c 	eorseq	r0, r3, ip, lsl #2
     228:	07050000 	streq	r0, [r5, -r0]
	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     22c:	00023e02 	andeq	r3, r2, r2, lsl #28
     230:	1c740d00 	ldclne	13, cr0, [r4], #-0
     234:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     238:	00544553 	subseq	r4, r4, r3, asr r5
     23c:	240f0001 	strcs	r0, [pc], #-1	; 244 <_Min_Stack_Size+0x44>
     240:	ba038505 	blt	e165c <_Min_Stack_Size+0xe145c>
     244:	10000002 	andne	r0, r0, r2
     248:	00524341 	subseq	r4, r2, r1, asr #6
     24c:	b0038705 	andlt	r8, r3, r5, lsl #14
     250:	00000000 	andeq	r0, r0, r0
	memset(packet, 0, sizeof(packet));
     254:	0000b311 	andeq	fp, r0, r1, lsl r3
     258:	03880500 	orreq	r0, r8, #0, 10
     25c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
	memcpy(packet, fixed_header, sizeof(fixed_header));
     260:	00b01104 	adcseq	r1, r0, r4, lsl #2
     264:	89050000 	stmdbhi	r5, {}	; <UNPREDICTABLE>
     268:	0000b003 	andeq	fp, r0, r3
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	53100800 	tstpl	r0, #0, 16
     270:	8a050052 	bhi	1403c0 <_Min_Stack_Size+0x1401c0>
     274:	0000b003 	andeq	fp, r0, r3
     278:	43100c00 	tstmi	r0, #0, 24
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     27c:	8b050052 	blhi	1403cc <_Min_Stack_Size+0x1401cc>
     280:	0000b003 	andeq	fp, r0, r3
     284:	41101000 	tstmi	r0, r0
     288:	8c050052 	stchi	0, cr0, [r5], {82}	; 0x52
     28c:	0000b003 	andeq	fp, r0, r3
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     290:	55111400 	ldrpl	r1, [r1, #-1024]	; 0xfffffc00
     294:	05000002 	streq	r0, [r0, #-2]
     298:	00b0038d 	adcseq	r0, r0, sp, lsl #7
     29c:	10180000 	andsne	r0, r8, r0
     2a0:	0052424f 	subseq	r4, r2, pc, asr #4
		return -1;
     2a4:	b0038e05 	andlt	r8, r3, r5, lsl #28
     2a8:	1c000000 	stcne	0, cr0, [r0], {-0}
	return 1;
     2ac:	0000ed11 	andeq	lr, r0, r1, lsl sp
}
     2b0:	038f0500 	orreq	r0, pc, #0, 10
     2b4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     2b8:	5e120020 	cdppl	0, 1, cr0, cr2, cr0, {1}
     2bc:	05000002 	streq	r0, [r0, #-2]
     2c0:	023e0398 	eorseq	r0, lr, #152, 6	; 0x60000002
     2c4:	280f0000 	stmdacs	pc, {}	; <UNPREDICTABLE>
     2c8:	51043405 	tstpl	r4, r5, lsl #8
     2cc:	10000003 	andne	r0, r0, r3
     2d0:	05005243 	streq	r5, [r0, #-579]	; 0xfffffdbd
     2d4:	00b00436 	adcseq	r0, r0, r6, lsr r4
     2d8:	11000000 	mrsne	r0, (UNDEF: 0)
     2dc:	00002166 	andeq	r2, r0, r6, ror #2
     2e0:	b0043705 	andlt	r3, r4, r5, lsl #14
     2e4:	04000000 	streq	r0, [r0], #-0
     2e8:	52494310 	subpl	r4, r9, #16, 6	; 0x40000000
     2ec:	04380500 	ldrteq	r0, [r8], #-1280	; 0xfffffb00
     2f0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     2f4:	00da1108 	sbcseq	r1, sl, r8, lsl #2
     2f8:	39050000 	stmdbcc	r5, {}	; <UNPREDICTABLE>
     2fc:	0000b004 	andeq	fp, r0, r4
     300:	50110c00 	andspl	r0, r1, r0, lsl #24
     304:	05000000 	streq	r0, [r0, #-0]
     308:	00b0043a 	adcseq	r0, r0, sl, lsr r4
     30c:	11100000 	tstne	r0, r0
     310:	000000d3 	ldrdeq	r0, [r0], -r3
     314:	b0043b05 	andlt	r3, r4, r5, lsl #22
     318:	14000000 	strne	r0, [r0], #-0
     31c:	0001ad11 	andeq	sl, r1, r1, lsl sp
     320:	043c0500 	ldrteq	r0, [ip], #-1280	; 0xfffffb00
     324:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     328:	008d1118 	addeq	r1, sp, r8, lsl r1
     32c:	3d050000 	stccc	0, cr0, [r5, #-0]
     330:	0000b004 	andeq	fp, r0, r4
     334:	62111c00 	andsvs	r1, r1, #0, 24
     338:	05000000 	streq	r0, [r0, #-0]
     33c:	00b0043e 	adcseq	r0, r0, lr, lsr r4
     340:	10200000 	eorne	r0, r0, r0
     344:	00525343 	subseq	r5, r2, r3, asr #6
     348:	b0043f05 	andlt	r3, r4, r5, lsl #30
     34c:	24000000 	strcs	r0, [r0], #-0
     350:	00a41200 	adceq	r1, r4, r0, lsl #4
     354:	4a050000 	bmi	14035c <_Min_Stack_Size+0x14015c>
     358:	0002c604 	andeq	ip, r2, r4, lsl #12
     35c:	01e71300 	mvneq	r1, r0, lsl #6
     360:	d4010000 	strle	r0, [r1], #-0
     364:	080012e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip}
     368:	00000068 	andeq	r0, r0, r8, rrx
     36c:	0a149c01 	beq	527378 <_Min_Stack_Size+0x527178>
     370:	01000002 	tsteq	r0, r2
     374:	00000132 	andeq	r0, r0, r2, lsr r1
     378:	00d80000 	sbcseq	r0, r8, r0
     37c:	9c010000 	stcls	0, cr0, [r1], {-0}
     380:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
     384:	706d7415 	rsbvc	r7, sp, r5, lsl r4
     388:	01340100 	teqeq	r4, r0, lsl #2
     38c:	0000009e 	muleq	r0, lr, r0
     390:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     394:	000000cb 	andeq	r0, r0, fp, asr #1
     398:	9e013401 	cdpls	4, 0, cr3, cr1, cr1, {0}
     39c:	02000000 	andeq	r0, r0, #0
     3a0:	07167091 			; <UNDEFINED> instruction: 0x07167091
     3a4:	01000001 	tsteq	r0, r1
     3a8:	009e0134 	addseq	r0, lr, r4, lsr r1
     3ac:	91020000 	mrsls	r0, (UNDEF: 2)
     3b0:	4417006c 	ldrmi	r0, [r7], #-108	; 0xffffff94
     3b4:	01000002 	tsteq	r0, r2
     3b8:	134c01a3 	movtne	r0, #49571	; 0xc1a3
     3bc:	000c0800 	andeq	r0, ip, r0, lsl #16
     3c0:	9c010000 	stcls	0, cr0, [r1], {-0}
     3c4:	0000f718 	andeq	pc, r0, r8, lsl r7	; <UNPREDICTABLE>
     3c8:	03dc0100 	bicseq	r0, ip, #0, 2
     3cc:	08001358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip}
     3d0:	00000100 	andeq	r0, r0, r0, lsl #2
     3d4:	03f99c01 	mvnseq	r9, #256	; 0x100
     3d8:	b5160000 	ldrlt	r0, [r6, #-0]
     3dc:	01000001 	tsteq	r0, r1
     3e0:	00b003de 	ldrsbteq	r0, [r0], lr
     3e4:	91020000 	mrsls	r0, (UNDEF: 2)
     3e8:	007d1674 	rsbseq	r1, sp, r4, ror r6
     3ec:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
     3f0:	0000b003 	andeq	fp, r0, r3
     3f4:	70910200 	addsvc	r0, r1, r0, lsl #4
     3f8:	026c1900 	rsbeq	r1, ip, #0, 18
     3fc:	ce040000 	cdpgt	0, 0, cr0, cr4, cr0, {0}
     400:	00040506 	andeq	r0, r4, r6, lsl #10
     404:	007a0500 	rsbseq	r0, sl, r0, lsl #10
     408:	2a1a0000 	bcs	680410 <_Min_Stack_Size+0x680210>
     40c:	01000002 	tsteq	r0, r2
     410:	00009ea2 	andeq	r9, r0, r2, lsr #29
     414:	00030500 	andeq	r0, r3, r0, lsl #10
     418:	0a000000 	beq	420 <_Min_Stack_Size+0x220>
     41c:	0000021f 	andeq	r0, r0, pc, lsl r2
     420:	0000042b 	andeq	r0, r0, fp, lsr #8
     424:	0000a90b 	andeq	sl, r0, fp, lsl #18
     428:	1a000f00 	bne	4030 <_Min_Stack_Size+0x3e30>
     42c:	00001b0a 	andeq	r1, r0, sl, lsl #22
     430:	0441a701 	strbeq	sl, [r1], #-1793	; 0xfffff8ff
     434:	03050000 	movweq	r0, #20480	; 0x5000
     438:	00000000 	andeq	r0, r0, r0
     43c:	00041b05 	andeq	r1, r4, r5, lsl #22
     440:	043c0900 	ldrteq	r0, [ip], #-2304	; 0xfffff700
     444:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     448:	04000005 	streq	r0, [r0], #-5
     44c:	00017900 	andeq	r7, r1, r0, lsl #18
     450:	11010400 	tstne	r1, r0, lsl #8
     454:	0c000001 	stceq	0, cr0, [r0], {1}
     458:	00000304 	andeq	r0, r0, r4, lsl #6
     45c:	0000036e 	andeq	r0, r0, lr, ror #6
     460:	00000028 	andeq	r0, r0, r8, lsr #32
     464:	00000000 	andeq	r0, r0, r0
     468:	000001c1 	andeq	r0, r0, r1, asr #3
     46c:	92060102 	andls	r0, r6, #-2147483648	; 0x80000000
     470:	03000001 	movweq	r0, #1
     474:	000000e3 	andeq	r0, r0, r3, ror #1
     478:	00371d02 	eorseq	r1, r7, r2, lsl #26
     47c:	01020000 	mrseq	r0, (UNDEF: 2)
     480:	00019008 	andeq	r9, r1, r8
     484:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
     488:	00000095 	muleq	r0, r5, r0
     48c:	00007203 	andeq	r7, r0, r3, lsl #4
     490:	502b0200 	eorpl	r0, fp, r0, lsl #4
     494:	02000000 	andeq	r0, r0, #0
     498:	01f20702 	mvnseq	r0, r2, lsl #14
     49c:	04020000 	streq	r0, [r2], #-0
     4a0:	0000bd05 	andeq	fp, r0, r5, lsl #26
     4a4:	00670300 	rsbeq	r0, r7, r0, lsl #6
     4a8:	41020000 	mrsmi	r0, (UNDEF: 2)
     4ac:	00000069 	andeq	r0, r0, r9, rrx
     4b0:	c9070402 	stmdbgt	r7, {r1, sl}
     4b4:	02000001 	andeq	r0, r0, #1
     4b8:	00b80508 	adcseq	r0, r8, r8, lsl #10
     4bc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     4c0:	0001c407 	andeq	ip, r1, r7, lsl #8
     4c4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
     4c8:	00746e69 	rsbseq	r6, r4, r9, ror #28
     4cc:	ce070402 	cdpgt	4, 0, cr0, cr7, cr2, {0}
     4d0:	02000001 	andeq	r0, r0, #1
     4d4:	02f80408 	rscseq	r0, r8, #8, 8	; 0x8000000
     4d8:	04020000 	streq	r0, [r2], #-0
     4dc:	00005907 	andeq	r5, r0, r7, lsl #18
     4e0:	08010200 	stmdaeq	r1, {r9}
     4e4:	00000199 	muleq	r0, r9, r1
     4e8:	0000e503 	andeq	lr, r0, r3, lsl #10
     4ec:	2c180300 	ldccs	3, cr0, [r8], {-0}
     4f0:	03000000 	movweq	r0, #0
     4f4:	00000074 	andeq	r0, r0, r4, ror r0
     4f8:	00452403 	subeq	r2, r5, r3, lsl #8
     4fc:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
     500:	03000000 	movweq	r0, #0
     504:	00005e30 	andeq	r5, r0, r0, lsr lr
     508:	00ac0500 	adceq	r0, ip, r0, lsl #10
     50c:	a1060000 	mrsge	r0, (UNDEF: 6)
     510:	07000000 	streq	r0, [r0, -r0]
     514:	00003701 	andeq	r3, r0, r1, lsl #14
     518:	02070400 	andeq	r0, r7, #0, 8
     51c:	000000e6 	andeq	r0, r0, r6, ror #1
     520:	001c7408 	andseq	r7, ip, r8, lsl #8
     524:	53090000 	movwpl	r0, #36864	; 0x9000
     528:	01005445 	tsteq	r0, r5, asr #8
     52c:	37010700 	strcc	r0, [r1, -r0, lsl #14]
     530:	04000000 	streq	r0, [r0], #-0
     534:	01000209 	tsteq	r0, r9, lsl #4
     538:	f0080000 			; <UNDEFINED> instruction: 0xf0080000
     53c:	00000002 	andeq	r0, r0, r2
     540:	00046208 	andeq	r6, r4, r8, lsl #4
     544:	07000100 	streq	r0, [r0, -r0, lsl #2]
     548:	00003701 	andeq	r3, r0, r1, lsl #14
     54c:	020c0400 	andeq	r0, ip, #0, 8
     550:	0000011a 	andeq	r0, r0, sl, lsl r1
     554:	00034108 	andeq	r4, r3, r8, lsl #2
     558:	15080000 	strne	r0, [r8, #-0]
     55c:	01000014 	tsteq	r0, r4, lsl r0
     560:	04240a00 	strteq	r0, [r4], #-2560	; 0xfffff600
     564:	020d0404 	andeq	r0, sp, #4, 8	; 0x4000000
     568:	430b0000 	movwmi	r0, #45056	; 0xb000
     56c:	04003152 	streq	r3, [r0], #-338	; 0xfffffeae
     570:	00c20406 	sbceq	r0, r2, r6, lsl #8
     574:	0c000000 	stceq	0, cr0, [r0], {-0}
     578:	000003c2 	andeq	r0, r0, r2, asr #7
     57c:	ac040704 	stcge	7, cr0, [r4], {4}
     580:	02000000 	andeq	r0, r0, #0
     584:	3252430b 	subscc	r4, r2, #738197504	; 0x2c000000
     588:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
     58c:	000000c2 	andeq	r0, r0, r2, asr #1
     590:	03cc0c04 	biceq	r0, ip, #4, 24	; 0x400
     594:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     598:	0000ac04 	andeq	sl, r0, r4, lsl #24
     59c:	b80c0600 	stmdalt	ip, {r9, sl}
     5a0:	04000003 	streq	r0, [r0], #-3
     5a4:	00c2040a 	sbceq	r0, r2, sl, lsl #8
     5a8:	0c080000 	stceq	0, cr0, [r8], {-0}
     5ac:	000003d6 	ldrdeq	r0, [r0], -r6
     5b0:	ac040b04 			; <UNDEFINED> instruction: 0xac040b04
     5b4:	0a000000 	beq	5bc <_Min_Stack_Size+0x3bc>
     5b8:	0003bd0c 	andeq	fp, r3, ip, lsl #26
     5bc:	040c0400 	streq	r0, [ip], #-1024	; 0xfffffc00
     5c0:	000000c2 	andeq	r0, r0, r2, asr #1
     5c4:	02ab0c0c 	adceq	r0, fp, #12, 24	; 0xc00
     5c8:	0d040000 	stceq	0, cr0, [r4, #-0]
     5cc:	0000ac04 	andeq	sl, r0, r4, lsl #24
     5d0:	440b0e00 	strmi	r0, [fp], #-3584	; 0xfffff200
     5d4:	0e040052 	mcreq	0, 0, r0, cr4, cr2, {2}
     5d8:	0000c204 	andeq	ip, r0, r4, lsl #4
     5dc:	ea0c1000 	b	3045e4 <_Min_Stack_Size+0x3043e4>
     5e0:	04000003 	streq	r0, [r0], #-3
     5e4:	00ac040f 	adceq	r0, ip, pc, lsl #8
     5e8:	0b120000 	bleq	4805f0 <_Min_Stack_Size+0x4803f0>
     5ec:	00315253 	eorseq	r5, r1, r3, asr r2
     5f0:	c2041004 	andgt	r1, r4, #4
     5f4:	14000000 	strne	r0, [r0], #-0
     5f8:	0003f40c 	andeq	pc, r3, ip, lsl #8
     5fc:	04110400 	ldreq	r0, [r1], #-1024	; 0xfffffc00
     600:	000000ac 	andeq	r0, r0, ip, lsr #1
     604:	52530b16 	subspl	r0, r3, #22528	; 0x5800
     608:	12040032 	andne	r0, r4, #50	; 0x32
     60c:	0000c204 	andeq	ip, r0, r4, lsl #4
     610:	d70c1800 	strle	r1, [ip, -r0, lsl #16]
     614:	04000002 	streq	r0, [r0], #-2
     618:	00ac0413 	adceq	r0, ip, r3, lsl r4
     61c:	0b1a0000 	bleq	680624 <_Min_Stack_Size+0x680424>
     620:	00524343 	subseq	r4, r2, r3, asr #6
     624:	c2041404 	andgt	r1, r4, #4, 8	; 0x4000000
     628:	1c000000 	stcne	0, cr0, [r0], {-0}
     62c:	0004150c 	andeq	r1, r4, ip, lsl #10
     630:	04150400 	ldreq	r0, [r5], #-1024	; 0xfffffc00
     634:	000000ac 	andeq	r0, r0, ip, lsr #1
     638:	044b0c1e 	strbeq	r0, [fp], #-3102	; 0xfffff3e2
     63c:	16040000 	strne	r0, [r4], -r0
     640:	0000c204 	andeq	ip, r0, r4, lsl #4
     644:	1f0c2000 	svcne	0x000c2000
     648:	04000004 	streq	r0, [r0], #-4
     64c:	00ac0417 	adceq	r0, ip, r7, lsl r4
     650:	00220000 	eoreq	r0, r2, r0
     654:	0003470d 	andeq	r4, r3, sp, lsl #14
     658:	04180400 	ldreq	r0, [r8], #-1024	; 0xfffffc00
     65c:	0000011a 	andeq	r0, r0, sl, lsl r1
     660:	0003fe0e 	andeq	pc, r3, lr, lsl #28
     664:	58130100 	ldmdapl	r3, {r8}
     668:	7c080014 	stcvc	0, cr0, [r8], {20}
     66c:	01000000 	mrseq	r0, (UNDEF: 0)
     670:	00023d9c 	muleq	r2, ip, sp
     674:	04510f00 	ldrbeq	r0, [r1], #-3840	; 0xfffff100
     678:	13010000 	movwne	r0, #4096	; 0x1000
     67c:	000000b7 	strheq	r0, [r0], -r7
     680:	00749102 	rsbseq	r9, r4, r2, lsl #2
     684:	00028f0e 	andeq	r8, r2, lr, lsl #30
     688:	d4290100 	strtle	r0, [r9], #-256	; 0xffffff00
     68c:	64080014 	strvs	r0, [r8], #-20	; 0xffffffec
     690:	01000000 	mrseq	r0, (UNDEF: 0)
     694:	00027b9c 	muleq	r2, ip, fp
     698:	02ce0f00 	sbceq	r0, lr, #0, 30
     69c:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
     6a0:	0000027b 	andeq	r0, r0, fp, ror r2
     6a4:	0f6c9102 	svceq	0x006c9102
     6a8:	00004038 	andeq	r4, r0, r8, lsr r0
     6ac:	00b72901 	adcseq	r2, r7, r1, lsl #18
     6b0:	91020000 	mrsls	r0, (UNDEF: 2)
     6b4:	00691068 	rsbeq	r1, r9, r8, rrx
     6b8:	00b72b01 	adcseq	r2, r7, r1, lsl #22
     6bc:	91020000 	mrsls	r0, (UNDEF: 2)
     6c0:	04110074 	ldreq	r0, [r1], #-116	; 0xffffff8c
     6c4:	000000a1 	andeq	r0, r0, r1, lsr #1
     6c8:	0003860e 	andeq	r8, r3, lr, lsl #12
     6cc:	38390100 	ldmdacc	r9!, {r8}
     6d0:	b0080015 	andlt	r0, r8, r5, lsl r0
     6d4:	01000000 	mrseq	r0, (UNDEF: 0)
     6d8:	0002cb9c 	muleq	r2, ip, fp
     6dc:	0dec0f00 	stcleq	15, cr0, [ip]
     6e0:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
     6e4:	000000a1 	andeq	r0, r0, r1, lsr #1
     6e8:	106f9102 	rsbne	r9, pc, r2, lsl #2
     6ec:	3a010069 	bcc	40898 <_Min_Stack_Size+0x40698>
     6f0:	000000a1 	andeq	r0, r0, r1, lsr #1
     6f4:	10779102 	rsbsne	r9, r7, r2, lsl #2
     6f8:	3a01006a 	bcc	408a8 <_Min_Stack_Size+0x406a8>
     6fc:	000000a1 	andeq	r0, r0, r1, lsr #1
     700:	12769102 	rsbsne	r9, r6, #-2147483648	; 0x80000000
     704:	0000045a 	andeq	r0, r0, sl, asr r4
     708:	02cb3c01 	sbceq	r3, fp, #256	; 0x100
     70c:	91020000 	mrsls	r0, (UNDEF: 2)
     710:	a1130074 	tstge	r3, r4, ror r0
     714:	db000000 	blle	71c <_Min_Stack_Size+0x51c>
     718:	14000002 	strne	r0, [r0], #-2
     71c:	00000093 	muleq	r0, r3, r0
     720:	590e0001 	stmdbpl	lr, {r0}
     724:	01000003 	tsteq	r0, r3
     728:	0015e855 	andseq	lr, r5, r5, asr r8
     72c:	00009c08 	andeq	r9, r0, r8, lsl #24
     730:	199c0100 	ldmibne	ip, {r8}
     734:	0f000003 	svceq	0x00000003
     738:	000002eb 	andeq	r0, r0, fp, ror #5
     73c:	00a15501 	adceq	r5, r1, r1, lsl #10
     740:	91020000 	mrsls	r0, (UNDEF: 2)
     744:	006a106f 	rsbeq	r1, sl, pc, rrx
     748:	00a15601 	adceq	r5, r1, r1, lsl #12
     74c:	91020000 	mrsls	r0, (UNDEF: 2)
     750:	045a1277 	ldrbeq	r1, [sl], #-631	; 0xfffffd89
     754:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
     758:	000002cb 	andeq	r0, r0, fp, asr #5
     75c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     760:	0002b50e 	andeq	fp, r2, lr, lsl #10
     764:	846e0100 	strbthi	r0, [lr], #-256	; 0xffffff00
     768:	88080016 	stmdahi	r8, {r1, r2, r4}
     76c:	01000000 	mrseq	r0, (UNDEF: 0)
     770:	0003479c 	muleq	r3, ip, r7
     774:	00781500 	rsbseq	r1, r8, r0, lsl #10
     778:	00a16e01 	adceq	r6, r1, r1, lsl #28
     77c:	91020000 	mrsls	r0, (UNDEF: 2)
     780:	00791577 	rsbseq	r1, r9, r7, ror r5
     784:	00a16e01 	adceq	r6, r1, r1, lsl #28
     788:	91020000 	mrsls	r0, (UNDEF: 2)
     78c:	970e0076 	smlsdxls	lr, r6, r0, r0
     790:	01000003 	tsteq	r0, r3
     794:	00170c7a 	andseq	r0, r7, sl, ror ip
     798:	0001ac08 	andeq	sl, r1, r8, lsl #24
     79c:	b99c0100 	ldmiblt	ip, {r8}
     7a0:	15000003 	strne	r0, [r0, #-3]
     7a4:	7a010078 	bvc	4098c <_Min_Stack_Size+0x4078c>
     7a8:	000000a1 	andeq	r0, r0, r1, lsr #1
     7ac:	15679102 	strbne	r9, [r7, #-258]!	; 0xfffffefe
     7b0:	7a010079 	bvc	4099c <_Min_Stack_Size+0x4079c>
     7b4:	000000a1 	andeq	r0, r0, r1, lsr #1
     7b8:	15669102 	strbne	r9, [r6, #-258]!	; 0xfffffefe
     7bc:	00726863 	rsbseq	r6, r2, r3, ror #16
     7c0:	00a17a01 	adceq	r7, r1, r1, lsl #20
     7c4:	91020000 	mrsls	r0, (UNDEF: 2)
     7c8:	04420f65 	strbeq	r0, [r2], #-3941	; 0xfffff09b
     7cc:	7a010000 	bvc	407d4 <_Min_Stack_Size+0x405d4>
     7d0:	000000a1 	andeq	r0, r0, r1, lsr #1
     7d4:	0f649102 	svceq	0x00649102
     7d8:	00000353 	andeq	r0, r0, r3, asr r3
     7dc:	00a17a01 	adceq	r7, r1, r1, lsl #20
     7e0:	91020000 	mrsls	r0, (UNDEF: 2)
     7e4:	03e01200 	mvneq	r1, #0, 4
     7e8:	7b010000 	blvc	407f0 <_Min_Stack_Size+0x405f0>
     7ec:	000000a1 	andeq	r0, r0, r1, lsr #1
     7f0:	106e9102 	rsbne	r9, lr, r2, lsl #2
     7f4:	7b010069 	blvc	409a0 <_Min_Stack_Size+0x407a0>
     7f8:	000000a1 	andeq	r0, r0, r1, lsr #1
     7fc:	006f9102 	rsbeq	r9, pc, r2, lsl #2
     800:	00032a0e 	andeq	r2, r3, lr, lsl #20
     804:	b8a50100 	stmialt	r5!, {r8}
     808:	84080018 	strhi	r0, [r8], #-24	; 0xffffffe8
     80c:	01000000 	mrseq	r0, (UNDEF: 0)
     810:	00041d9c 	muleq	r4, ip, sp
     814:	00781500 	rsbseq	r1, r8, r0, lsl #10
     818:	00a1a501 	adceq	sl, r1, r1, lsl #10
     81c:	91020000 	mrsls	r0, (UNDEF: 2)
     820:	00791567 	rsbseq	r1, r9, r7, ror #10
     824:	00a1a501 	adceq	sl, r1, r1, lsl #10
     828:	91020000 	mrsls	r0, (UNDEF: 2)
     82c:	68631566 	stmdavs	r3!, {r1, r2, r5, r6, r8, sl, ip}^
     830:	a5010072 	strge	r0, [r1, #-114]	; 0xffffff8e
     834:	0000027b 	andeq	r0, r0, fp, ror r2
     838:	0f609102 	svceq	0x00609102
     83c:	000002e1 	andeq	r0, r0, r1, ror #5
     840:	00a1a501 	adceq	sl, r1, r1, lsl #10
     844:	91020000 	mrsls	r0, (UNDEF: 2)
     848:	03530f65 	cmpeq	r3, #404	; 0x194
     84c:	a5010000 	strge	r0, [r1, #-0]
     850:	000000a1 	andeq	r0, r0, r1, lsr #1
     854:	10009102 	andne	r9, r0, r2, lsl #2
     858:	a601006a 	strge	r0, [r1], -sl, rrx
     85c:	000000a1 	andeq	r0, r0, r1, lsr #1
     860:	006f9102 	rsbeq	r9, pc, r2, lsl #2
     864:	00042e0e 	andeq	r2, r4, lr, lsl #28
     868:	00b60100 	adcseq	r0, r6, r0, lsl #2
     86c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     870:	01000000 	mrseq	r0, (UNDEF: 0)
     874:	0004999c 	muleq	r4, ip, r9
     878:	30781500 	rsbscc	r1, r8, r0, lsl #10
     87c:	a1b60100 			; <UNDEFINED> instruction: 0xa1b60100
     880:	02000000 	andeq	r0, r0, #0
     884:	79156791 	ldmdbvc	r5, {r0, r4, r7, r8, r9, sl, sp, lr}
     888:	b6010030 			; <UNDEFINED> instruction: 0xb6010030
     88c:	000000a1 	andeq	r0, r0, r1, lsr #1
     890:	15669102 	strbne	r9, [r6, #-258]!	; 0xfffffefe
     894:	01003178 	tsteq	r0, r8, ror r1
     898:	0000a1b6 			; <UNDEFINED> instruction: 0x0000a1b6
     89c:	65910200 	ldrvs	r0, [r1, #512]	; 0x200
     8a0:	00317915 	eorseq	r7, r1, r5, lsl r9
     8a4:	00a1b601 	adceq	fp, r1, r1, lsl #12
     8a8:	91020000 	mrsls	r0, (UNDEF: 2)
     8ac:	4d421564 	cfstr64mi	mvdx1, [r2, #-400]	; 0xfffffe70
     8b0:	b6010050 			; <UNDEFINED> instruction: 0xb6010050
     8b4:	00000499 	muleq	r0, r9, r4
     8b8:	10009102 	andne	r9, r0, r2, lsl #2
     8bc:	b701006a 	strlt	r0, [r1, -sl, rrx]
     8c0:	000000b7 	strheq	r0, [r0], -r7
     8c4:	106c9102 	rsbne	r9, ip, r2, lsl #2
     8c8:	b8010078 	stmdalt	r1, {r3, r4, r5, r6}
     8cc:	000000a1 	andeq	r0, r0, r1, lsr #1
     8d0:	106b9102 	rsbne	r9, fp, r2, lsl #2
     8d4:	b8010079 	stmdalt	r1, {r0, r3, r4, r5, r6}
     8d8:	000000a1 	andeq	r0, r0, r1, lsr #1
     8dc:	006a9102 	rsbeq	r9, sl, r2, lsl #2
     8e0:	00c70411 	sbceq	r0, r7, r1, lsl r4
     8e4:	6c160000 	ldcvs	0, cr0, [r6], {-0}
     8e8:	05000002 	streq	r0, [r0, #-2]
     8ec:	04ab06ce 	strteq	r0, [fp], #1742	; 0x6ce
     8f0:	7e050000 	cdpvc	0, 0, cr0, cr5, cr0, {0}
     8f4:	13000000 	movwne	r0, #0
     8f8:	000004c6 	andeq	r0, r0, r6, asr #9
     8fc:	000004c6 	andeq	r0, r0, r6, asr #9
     900:	00009314 	andeq	r9, r0, r4, lsl r3
     904:	93145f00 	tstls	r4, #0, 30
     908:	05000000 	streq	r0, [r0, #-0]
     90c:	00370600 	eorseq	r0, r7, r0, lsl #12
     910:	29170000 	ldmdbcs	r7, {}	; <UNPREDICTABLE>
     914:	06000004 	streq	r0, [r0], -r4
     918:	0004dc09 	andeq	sp, r4, r9, lsl #24
     91c:	88030500 	stmdahi	r3, {r8, sl}
     920:	06080098 			; <UNDEFINED> instruction: 0x06080098
     924:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
     928:	0004c613 	andeq	ip, r4, r3, lsl r6
     92c:	0004f200 	andeq	pc, r4, r0, lsl #4
     930:	00931800 	addseq	r1, r3, r0, lsl #16
     934:	05ef0000 	strbeq	r0, [pc, #0]!	; 93c <_Min_Stack_Size+0x73c>
     938:	02a51700 	adceq	r1, r5, #0, 14
     93c:	6d060000 	stcvs	0, cr0, [r6, #-0]
     940:	00000503 	andeq	r0, r0, r3, lsl #10
     944:	9ac80305 	bls	ff201560 <BootRAM+0xe171d01>
     948:	e1060800 	tst	r6, r0, lsl #16
     94c:	13000004 	movwne	r0, #4
     950:	000000a1 	andeq	r0, r0, r1, lsr #1
     954:	00000518 	andeq	r0, r0, r8, lsl r5
     958:	00009314 	andeq	r9, r0, r4, lsl r3
     95c:	17001a00 	strne	r1, [r0, -r0, lsl #20]
     960:	00000285 	andeq	r0, r0, r5, lsl #5
     964:	05080d01 	streq	r0, [r8, #-3329]	; 0xfffff2ff
     968:	03050000 	movweq	r0, #20480	; 0x5000
     96c:	20000064 	andcs	r0, r0, r4, rrx
     970:	0000a113 	andeq	sl, r0, r3, lsl r1
     974:	00053900 	andeq	r3, r5, r0, lsl #18
     978:	00931400 	addseq	r1, r3, r0, lsl #8
     97c:	00020000 	andeq	r0, r2, r0
     980:	0003ad17 	andeq	sl, r3, r7, lsl sp
     984:	290f0100 	stmdbcs	pc, {r8}	; <UNPREDICTABLE>
     988:	05000005 	streq	r0, [r0, #-5]
     98c:	00000003 	andeq	r0, r0, r3
     990:	02791700 	rsbseq	r1, r9, #0, 14
     994:	10010000 	andne	r0, r1, r0
     998:	00000529 	andeq	r0, r0, r9, lsr #10
     99c:	00000305 	andeq	r0, r0, r5, lsl #6
     9a0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     9a4:	04000006 	streq	r0, [r0], #-6
     9a8:	0002b300 	andeq	fp, r2, r0, lsl #6
     9ac:	11010400 	tstne	r1, r0, lsl #8
     9b0:	0c000001 	stceq	0, cr0, [r0], {1}
     9b4:	000005ce 	andeq	r0, r0, lr, asr #11
     9b8:	0000036e 	andeq	r0, r0, lr, ror #6
     9bc:	00000070 	andeq	r0, r0, r0, ror r0
     9c0:	00000000 	andeq	r0, r0, r0
     9c4:	0000050e 	andeq	r0, r0, lr, lsl #10
     9c8:	0004b302 	andeq	fp, r4, r2, lsl #6
     9cc:	301b0200 	andscc	r0, fp, r0, lsl #4
     9d0:	03000000 	movweq	r0, #0
     9d4:	01920601 	orrseq	r0, r2, r1, lsl #12
     9d8:	e3020000 	movw	r0, #8192	; 0x2000
     9dc:	02000000 	andeq	r0, r0, #0
     9e0:	0000421d 	andeq	r4, r0, sp, lsl r2
     9e4:	08010300 	stmdaeq	r1, {r8, r9}
     9e8:	00000190 	muleq	r0, r0, r1
     9ec:	95050203 	strls	r0, [r5, #-515]	; 0xfffffdfd
     9f0:	02000000 	andeq	r0, r0, #0
     9f4:	00000072 	andeq	r0, r0, r2, ror r0
     9f8:	005b2b02 	subseq	r2, fp, r2, lsl #22
     9fc:	02030000 	andeq	r0, r3, #0
     a00:	0001f207 	andeq	pc, r1, r7, lsl #4
     a04:	066f0200 	strbteq	r0, [pc], -r0, lsl #4
     a08:	3f020000 	svccc	0x00020000
     a0c:	0000006d 	andeq	r0, r0, sp, rrx
     a10:	bd050403 	cfstrslt	mvf0, [r5, #-12]
     a14:	02000000 	andeq	r0, r0, #0
     a18:	00000067 	andeq	r0, r0, r7, rrx
     a1c:	007f4102 	rsbseq	r4, pc, r2, lsl #2
     a20:	04030000 	streq	r0, [r3], #-0
     a24:	0001c907 	andeq	ip, r1, r7, lsl #18
     a28:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
     a2c:	000000b8 	strheq	r0, [r0], -r8
     a30:	c4070803 	strgt	r0, [r7], #-2051	; 0xfffff7fd
     a34:	04000001 	streq	r0, [r0], #-1
     a38:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     a3c:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
     a40:	0001ce07 	andeq	ip, r1, r7, lsl #28
     a44:	04b50200 	ldrteq	r0, [r5], #512	; 0x200
     a48:	14030000 	strne	r0, [r3], #-0
     a4c:	00000025 	andeq	r0, r0, r5, lsr #32
     a50:	0000e502 	andeq	lr, r0, r2, lsl #10
     a54:	37180300 	ldrcc	r0, [r8, -r0, lsl #6]
     a58:	02000000 	andeq	r0, r0, #0
     a5c:	00000074 	andeq	r0, r0, r4, ror r0
     a60:	00502403 	subseq	r2, r0, r3, lsl #8
     a64:	71020000 	mrsvc	r0, (UNDEF: 2)
     a68:	03000006 	movweq	r0, #6
     a6c:	0000622c 	andeq	r6, r0, ip, lsr #4
     a70:	00690200 	rsbeq	r0, r9, r0, lsl #4
     a74:	30030000 	andcc	r0, r3, r0
     a78:	00000074 	andeq	r0, r0, r4, ror r0
     a7c:	59070403 	stmdbpl	r7, {r0, r1, sl}
     a80:	05000000 	streq	r0, [r0, #-0]
     a84:	00004201 	andeq	r4, r0, r1, lsl #4
     a88:	014b0400 	cmpeq	fp, r0, lsl #8
     a8c:	00000112 	andeq	r0, r0, r2, lsl r1
     a90:	00055706 	andeq	r5, r5, r6, lsl #14
     a94:	bd060100 	stflts	f0, [r6, #-0]
     a98:	02000005 	andeq	r0, r0, #5
     a9c:	00060206 	andeq	r0, r6, r6, lsl #4
     aa0:	69060400 	stmdbvs	r6, {sl}
     aa4:	08000004 	stmdaeq	r0, {r2}
     aa8:	00054e06 	andeq	r4, r5, r6, lsl #28
     aac:	d1061000 	mrsle	r1, (UNDEF: 6)
     ab0:	1f000006 	svcne	0x00000006
     ab4:	42010500 	andmi	r0, r1, #0, 10
     ab8:	04000000 	streq	r0, [r0], #-0
     abc:	01500159 	cmpeq	r0, r9, asr r1
     ac0:	8d060000 	stchi	0, cr0, [r6, #-0]
     ac4:	00000006 	andeq	r0, r0, r6
     ac8:	0004bc06 	andeq	fp, r4, r6, lsl #24
     acc:	2f060100 	svccs	0x00060100
     ad0:	02000005 	andeq	r0, r0, #5
     ad4:	00047506 	andeq	r7, r4, r6, lsl #10
     ad8:	b2060300 	andlt	r0, r6, #0, 6
     adc:	04000006 	streq	r0, [r0], #-6
     ae0:	00058b06 	andeq	r8, r5, r6, lsl #22
     ae4:	3f060500 	svccc	0x00060500
     ae8:	06000005 	streq	r0, [r0], -r5
     aec:	00063506 	andeq	r3, r6, r6, lsl #10
     af0:	07000700 	streq	r0, [r0, -r0, lsl #14]
     af4:	00000510 	andeq	r0, r0, r0, lsl r5
     af8:	12016204 	andne	r6, r1, #4, 4	; 0x40000000
     afc:	05000001 	streq	r0, [r0, #-1]
     b00:	00004201 	andeq	r4, r0, r1, lsl #4
     b04:	016a0400 	cmneq	sl, r0, lsl #8
     b08:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     b0c:	0004d506 	andeq	sp, r4, r6, lsl #10
     b10:	1d060000 	stcne	0, cr0, [r6, #-0]
     b14:	01000005 	tsteq	r0, r5
     b18:	00060f06 	andeq	r0, r6, r6, lsl #30
     b1c:	6c060200 	sfmvs	f0, 4, [r6], {-0}
     b20:	03000005 	movweq	r0, #5
     b24:	0005f806 	andeq	pc, r5, r6, lsl #16
     b28:	a6060400 	strge	r0, [r6], -r0, lsl #8
     b2c:	05000006 	streq	r0, [r0, #-6]
     b30:	00065e06 	andeq	r5, r6, r6, lsl #28
     b34:	1f060600 	svcne	0x00060600
     b38:	07000006 	streq	r0, [r0, -r6]
     b3c:	00052406 	andeq	r2, r5, r6, lsl #8
     b40:	82060800 	andhi	r0, r6, #0, 16
     b44:	09000006 	stmdbeq	r0, {r1, r2}
     b48:	00049506 	andeq	r9, r4, r6, lsl #10
     b4c:	c3060a00 	movwgt	r0, #27136	; 0x6a00
     b50:	0b000006 	bleq	b70 <_Min_Stack_Size+0x970>
     b54:	0004dd06 	andeq	sp, r4, r6, lsl #26
     b58:	07000c00 	streq	r0, [r0, -r0, lsl #24]
     b5c:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     b60:	5c017c04 	stcpl	12, cr7, [r1], {4}
     b64:	08000001 	stmdaeq	r0, {r0}
     b68:	00000584 	andeq	r0, r0, r4, lsl #11
     b6c:	00a25001 	adceq	r5, r2, r1
     b70:	193c0000 	ldmdbne	ip!, {}	; <UNPREDICTABLE>
     b74:	02080800 	andeq	r0, r8, #0, 16
     b78:	9c010000 	stcls	0, cr0, [r1], {-0}
     b7c:	00000215 	andeq	r0, r0, r5, lsl r2
     b80:	006e7309 	rsbeq	r7, lr, r9, lsl #6
     b84:	00ad5001 	adceq	r5, sp, r1
     b88:	91020000 	mrsls	r0, (UNDEF: 2)
     b8c:	06160a6f 	ldreq	r0, [r6], -pc, ror #20
     b90:	50010000 	andpl	r0, r1, r0
     b94:	000000ad 	andeq	r0, r0, sp, lsr #1
     b98:	0a6e9102 	beq	1ba4fa8 <_Min_Stack_Size+0x1ba4da8>
     b9c:	00000f3e 	andeq	r0, r0, lr, lsr pc
     ba0:	00b85001 	adcseq	r5, r8, r1
     ba4:	91020000 	mrsls	r0, (UNDEF: 2)
     ba8:	13380a6c 	teqne	r8, #108, 20	; 0x6c000
     bac:	50010000 	andpl	r0, r1, r0
     bb0:	000000ad 	andeq	r0, r0, sp, lsr #1
     bb4:	006b9102 	rsbeq	r9, fp, r2, lsl #2
     bb8:	00591808 	subseq	r1, r9, r8, lsl #16
     bbc:	a2910100 	addsge	r0, r1, #0, 2
     bc0:	44000000 	strmi	r0, [r0], #-0
     bc4:	b808001b 	stmdalt	r8, {r0, r1, r3, r4}
     bc8:	01000000 	mrseq	r0, (UNDEF: 0)
     bcc:	00023c9c 	muleq	r2, ip, ip
     bd0:	6e730900 	vaddvs.f16	s1, s6, s0	; <UNPREDICTABLE>
     bd4:	ad910100 	ldfges	f0, [r1]
     bd8:	02000000 	andeq	r0, r0, #0
     bdc:	08007791 	stmdaeq	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
     be0:	00000565 	andeq	r0, r0, r5, ror #10
     be4:	00a2a101 	adceq	sl, r2, r1, lsl #2
     be8:	00000000 	andeq	r0, r0, r0
     bec:	00ca0000 	sbceq	r0, sl, r0
     bf0:	9c010000 	stcls	0, cr0, [r1], {-0}
     bf4:	00000263 	andeq	r0, r0, r3, ror #4
     bf8:	006e7309 	rsbeq	r7, lr, r9, lsl #6
     bfc:	00ada101 	adceq	sl, sp, r1, lsl #2
     c00:	91020000 	mrsls	r0, (UNDEF: 2)
     c04:	ab080077 	blge	200de8 <_Min_Stack_Size+0x200be8>
     c08:	01000041 	tsteq	r0, r1, asr #32
     c0c:	0000a2b4 			; <UNDEFINED> instruction: 0x0000a2b4
     c10:	001bfc00 	andseq	pc, fp, r0, lsl #24
     c14:	00016c08 	andeq	r6, r1, r8, lsl #24
     c18:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
     c1c:	09000002 	stmdbeq	r0, {r1}
     c20:	01006e73 	tsteq	r0, r3, ror lr
     c24:	0000adb4 			; <UNDEFINED> instruction: 0x0000adb4
     c28:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     c2c:	000eb60a 	andeq	fp, lr, sl, lsl #12
     c30:	a6b40100 	ldrtge	r0, [r4], r0, lsl #2
     c34:	02000002 	andeq	r0, r0, #2
     c38:	3e0a7091 	mcrcc	0, 0, r7, cr10, cr1, {4}
     c3c:	0100000f 	tsteq	r0, pc
     c40:	0000b8b4 			; <UNDEFINED> instruction: 0x0000b8b4
     c44:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     c48:	ad040b00 	vstrge	d0, [r4, #-0]
     c4c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     c50:	00004219 	andeq	r4, r0, r9, lsl r2
     c54:	00a2d501 	adceq	sp, r2, r1, lsl #10
     c58:	00000000 	andeq	r0, r0, r0
     c5c:	00ec0000 	rsceq	r0, ip, r0
     c60:	9c010000 	stcls	0, cr0, [r1], {-0}
     c64:	000002d3 	ldrdeq	r0, [r0], -r3
     c68:	006e7309 	rsbeq	r7, lr, r9, lsl #6
     c6c:	00add501 	adceq	sp, sp, r1, lsl #10
     c70:	91020000 	mrsls	r0, (UNDEF: 2)
     c74:	b8080077 	stmdalt	r8, {r0, r1, r2, r4, r5, r6}
     c78:	01000005 	tsteq	r0, r5
     c7c:	0000c3e9 	andeq	ip, r0, r9, ror #7
     c80:	001d6800 	andseq	r6, sp, r0, lsl #16
     c84:	0001f408 	andeq	pc, r1, r8, lsl #8
     c88:	329c0100 	addscc	r0, ip, #0, 2
     c8c:	09000003 	stmdbeq	r0, {r0, r1}
     c90:	01006e73 	tsteq	r0, r3, ror lr
     c94:	0000ade9 	andeq	sl, r0, r9, ror #27
     c98:	6f910200 	svcvs	0x00910200
     c9c:	66756209 	ldrbtvs	r6, [r5], -r9, lsl #4
     ca0:	a6e90100 	strbtge	r0, [r9], r0, lsl #2
     ca4:	02000002 	andeq	r0, r0, #2
     ca8:	6c096891 	stcvs	8, cr6, [r9], {145}	; 0x91
     cac:	01006e65 	tsteq	r0, r5, ror #28
     cb0:	0000b8e9 	andeq	fp, r0, r9, ror #17
     cb4:	6c910200 	lfmvs	f0, 4, [r1], {0}
     cb8:	706d740c 	rsbvc	r7, sp, ip, lsl #8
     cbc:	adeb0100 	stfgee	f0, [fp]
     cc0:	02000000 	andeq	r0, r0, #0
     cc4:	020d7791 	andeq	r7, sp, #38010880	; 0x2440000
     cc8:	01000005 	tsteq	r0, r5
     ccc:	0000b8ec 	andeq	fp, r0, ip, ror #17
     cd0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     cd4:	050b0e00 	streq	r0, [fp, #-3584]	; 0xfffff200
     cd8:	24010000 	strcs	r0, [r1], #-0
     cdc:	0000c301 	andeq	ip, r0, r1, lsl #6
     ce0:	001f5c00 	andseq	r5, pc, r0, lsl #24
     ce4:	00016c08 	andeq	r6, r1, r8, lsl #24
     ce8:	979c0100 	ldrls	r0, [ip, r0, lsl #2]
     cec:	0f000003 	svceq	0x00000003
     cf0:	01006e73 	tsteq	r0, r3, ror lr
     cf4:	00ad0124 	adceq	r0, sp, r4, lsr #2
     cf8:	91020000 	mrsls	r0, (UNDEF: 2)
     cfc:	75620f67 	strbvc	r0, [r2, #-3943]!	; 0xfffff099
     d00:	24010066 	strcs	r0, [r1], #-102	; 0xffffff9a
     d04:	0002a601 	andeq	sl, r2, r1, lsl #12
     d08:	60910200 	addsvs	r0, r1, r0, lsl #4
     d0c:	6e656c0f 	cdpvs	12, 6, cr6, cr5, cr15, {0}
     d10:	01240100 			; <UNDEFINED> instruction: 0x01240100
     d14:	000000b8 	strheq	r0, [r0], -r8
     d18:	10649102 	rsbne	r9, r4, r2, lsl #2
     d1c:	00706d74 	rsbseq	r6, r0, r4, ror sp
     d20:	ad012601 	stcge	6, cr2, [r1, #-4]
     d24:	02000000 	andeq	r0, r0, #0
     d28:	79116f91 	ldmdbvc	r1, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
     d2c:	01000006 	tsteq	r0, r6
     d30:	00b80127 	adcseq	r0, r8, r7, lsr #2
     d34:	91020000 	mrsls	r0, (UNDEF: 2)
     d38:	570e006c 	strpl	r0, [lr, -ip, rrx]
     d3c:	01000006 	tsteq	r0, r6
     d40:	00c3014d 	sbceq	r0, r3, sp, asr #2
     d44:	20c80000 	sbccs	r0, r8, r0
     d48:	02080800 	andeq	r0, r8, #0, 16
     d4c:	9c010000 	stcls	0, cr0, [r1], {-0}
     d50:	0000041a 	andeq	r0, r0, sl, lsl r4
     d54:	006e730f 	rsbeq	r7, lr, pc, lsl #6
     d58:	ad014d01 	stcge	13, cr4, [r1, #-4]
     d5c:	02000000 	andeq	r0, r0, #0
     d60:	620f6f91 	andvs	r6, pc, #580	; 0x244
     d64:	01006675 	tsteq	r0, r5, ror r6
     d68:	02a6014d 	adceq	r0, r6, #1073741843	; 0x40000013
     d6c:	91020000 	mrsls	r0, (UNDEF: 2)
     d70:	656c0f68 	strbvs	r0, [ip, #-3944]!	; 0xfffff098
     d74:	4d01006e 	stcmi	0, cr0, [r1, #-440]	; 0xfffffe48
     d78:	0000b801 	andeq	fp, r0, r1, lsl #16
     d7c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     d80:	000eb612 	andeq	fp, lr, r2, lsl r6
     d84:	014d0100 	mrseq	r0, (UNDEF: 93)
     d88:	000002a6 	andeq	r0, r0, r6, lsr #5
     d8c:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
     d90:	00000f3e 	andeq	r0, r0, lr, lsr pc
     d94:	b8014d01 	stmdalt	r1, {r0, r8, sl, fp, lr}
     d98:	02000000 	andeq	r0, r0, #0
     d9c:	74100091 	ldrvc	r0, [r0], #-145	; 0xffffff6f
     da0:	0100706d 	tsteq	r0, sp, rrx
     da4:	00ad014f 	adceq	r0, sp, pc, asr #2
     da8:	91020000 	mrsls	r0, (UNDEF: 2)
     dac:	05021177 	streq	r1, [r2, #-375]	; 0xfffffe89
     db0:	50010000 	andpl	r0, r1, r0
     db4:	0000b801 	andeq	fp, r0, r1, lsl #16
     db8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     dbc:	04f90e00 	ldrbteq	r0, [r9], #3584	; 0xe00
     dc0:	8d010000 	stchi	0, cr0, [r1, #-0]
     dc4:	0000c301 	andeq	ip, r0, r1, lsl #6
     dc8:	0022d000 	eoreq	sp, r2, r0
     dcc:	0002fc08 	andeq	pc, r2, r8, lsl #24
     dd0:	ab9c0100 	blge	fe7011d8 <BootRAM+0xd671979>
     dd4:	0f000004 	svceq	0x00000004
     dd8:	01006e73 	tsteq	r0, r3, ror lr
     ddc:	00ad018d 	adceq	r0, sp, sp, lsl #3
     de0:	91020000 	mrsls	r0, (UNDEF: 2)
     de4:	75620f67 	strbvc	r0, [r2, #-3943]!	; 0xfffff099
     de8:	8d010066 	stchi	0, cr0, [r1, #-408]	; 0xfffffe68
     dec:	0002a601 	andeq	sl, r2, r1, lsl #12
     df0:	60910200 	addsvs	r0, r1, r0, lsl #4
     df4:	6e656c0f 	cdpvs	12, 6, cr6, cr5, cr15, {0}
     df8:	018d0100 	orreq	r0, sp, r0, lsl #2
     dfc:	000000b8 	strheq	r0, [r0], -r8
     e00:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
     e04:	00000eb6 			; <UNDEFINED> instruction: 0x00000eb6
     e08:	a6018d01 	strge	r8, [r1], -r1, lsl #26
     e0c:	02000002 	andeq	r0, r0, #2
     e10:	3e125c91 	mrccc	12, 0, r5, cr2, cr1, {4}
     e14:	0100000f 	tsteq	r0, pc
     e18:	04ab018d 	strteq	r0, [fp], #397	; 0x18d
     e1c:	91020000 	mrsls	r0, (UNDEF: 2)
     e20:	726d1000 	rsbvc	r1, sp, #0
     e24:	018f0100 	orreq	r0, pc, r0, lsl #2
     e28:	000000ad 	andeq	r0, r0, sp, lsr #1
     e2c:	11759102 	cmnne	r5, r2, lsl #2
     e30:	00000630 	andeq	r0, r0, r0, lsr r6
     e34:	b1019001 	tstlt	r1, r1
     e38:	02000004 	andeq	r0, r0, #4
     e3c:	8c116c91 	ldchi	12, cr6, [r1], {145}	; 0x91
     e40:	01000004 	tsteq	r0, r4
     e44:	00b80191 	umlalseq	r0, r8, r1, r1
     e48:	91020000 	mrsls	r0, (UNDEF: 2)
     e4c:	040b0076 	streq	r0, [fp], #-118	; 0xffffff8a
     e50:	000000b8 	strheq	r0, [r0], -r8
     e54:	0000ad13 	andeq	sl, r0, r3, lsl sp
     e58:	0004c100 	andeq	ip, r4, r0, lsl #2
     e5c:	00d91400 	sbcseq	r1, r9, r0, lsl #8
     e60:	00070000 	andeq	r0, r7, r0
     e64:	0005810e 	andeq	r8, r5, lr, lsl #2
     e68:	02010100 	andeq	r0, r1, #0, 2
     e6c:	000000a2 	andeq	r0, r0, r2, lsr #1
     e70:	080025cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, sp}
     e74:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     e78:	05179c01 	ldreq	r9, [r7, #-3073]	; 0xfffff3ff
     e7c:	730f0000 	movwvc	r0, #61440	; 0xf000
     e80:	0101006e 	tsteq	r1, lr, rrx
     e84:	0000ad02 	andeq	sl, r0, r2, lsl #26
     e88:	6f910200 	svcvs	0x00910200
     e8c:	0004ac12 	andeq	sl, r4, r2, lsl ip
     e90:	02010100 	andeq	r0, r1, #0, 2
     e94:	00000150 	andeq	r0, r0, r0, asr r1
     e98:	0f6e9102 	svceq	0x006e9102
     e9c:	00677261 	rsbeq	r7, r7, r1, ror #4
     ea0:	17020101 	strne	r0, [r2, -r1, lsl #2]
     ea4:	02000005 	andeq	r0, r0, #5
     ea8:	74106891 	ldrvc	r6, [r0], #-2193	; 0xfffff76f
     eac:	0100706d 	tsteq	r0, sp, rrx
     eb0:	00ad0203 	adceq	r0, sp, r3, lsl #4
     eb4:	91020000 	mrsls	r0, (UNDEF: 2)
     eb8:	04150077 	ldreq	r0, [r5], #-119	; 0xffffff89
     ebc:	00069b0e 	andeq	r9, r6, lr, lsl #22
     ec0:	02290100 	eoreq	r0, r9, #0, 2
     ec4:	000000a2 	andeq	r0, r0, r2, lsr #1
     ec8:	00000000 	andeq	r0, r0, r0
     ecc:	00000204 	andeq	r0, r0, r4, lsl #4
     ed0:	056f9c01 	strbeq	r9, [pc, #-3073]!	; 2d7 <_Min_Stack_Size+0xd7>
     ed4:	730f0000 	movwvc	r0, #61440	; 0xf000
     ed8:	2901006e 	stmdbcs	r1, {r1, r2, r3, r5, r6}
     edc:	0000ad02 	andeq	sl, r0, r2, lsl #26
     ee0:	6f910200 	svcvs	0x00910200
     ee4:	00048512 	andeq	r8, r4, r2, lsl r5
     ee8:	02290100 	eoreq	r0, r9, #0, 2
     eec:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     ef0:	0f6e9102 	svceq	0x006e9102
     ef4:	00677261 	rsbeq	r7, r7, r1, ror #4
     ef8:	17022901 	strne	r2, [r2, -r1, lsl #18]
     efc:	02000005 	andeq	r0, r0, #5
     f00:	74106891 	ldrvc	r6, [r0], #-2193	; 0xfffff76f
     f04:	0100706d 	tsteq	r0, sp, rrx
     f08:	00ad022b 	adceq	r0, sp, fp, lsr #4
     f0c:	91020000 	mrsls	r0, (UNDEF: 2)
     f10:	ca0e0077 	bgt	3810f4 <_Min_Stack_Size+0x380ef4>
     f14:	01000004 	tsteq	r0, r4
     f18:	00a2025b 	adceq	r0, r2, fp, asr r2
     f1c:	00000000 	andeq	r0, r0, r0
     f20:	02200000 	eoreq	r0, r0, #0
     f24:	9c010000 	stcls	0, cr0, [r1], {-0}
     f28:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
     f2c:	006e730f 	rsbeq	r7, lr, pc, lsl #6
     f30:	ad025b01 	vstrge	d5, [r2, #-4]
     f34:	02000000 	andeq	r0, r0, #0
     f38:	85126f91 	ldrhi	r6, [r2, #-3985]	; 0xfffff06f
     f3c:	01000004 	tsteq	r0, r4
     f40:	01b8025b 			; <UNDEFINED> instruction: 0x01b8025b
     f44:	91020000 	mrsls	r0, (UNDEF: 2)
     f48:	72610f6e 	rsbvc	r0, r1, #440	; 0x1b8
     f4c:	5b010067 	blpl	410f0 <_Min_Stack_Size+0x40ef0>
     f50:	00051702 	andeq	r1, r5, r2, lsl #14
     f54:	68910200 	ldmvs	r1, {r9}
     f58:	05730d00 	ldrbeq	r0, [r3, #-3328]!	; 0xfffff300
     f5c:	30010000 	andcc	r0, r1, r0
     f60:	000000b8 	strheq	r0, [r0], -r8
     f64:	00800305 	addeq	r0, r0, r5, lsl #6
     f68:	9c0d2000 	stcls	0, cr2, [sp], {-0}
     f6c:	01000005 	tsteq	r0, r5
     f70:	0000b831 	andeq	fp, r0, r1, lsr r8
     f74:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
     f78:	0d200000 	stceq	0, cr0, [r0, #-0]
     f7c:	000004e9 	andeq	r0, r0, r9, ror #9
     f80:	00b83201 	adcseq	r3, r8, r1, lsl #4
     f84:	03050000 	movweq	r0, #20480	; 0x5000
     f88:	200000fa 	strdcs	r0, [r0], -sl
     f8c:	0000b813 	andeq	fp, r0, r3, lsl r8
     f90:	0005f900 	andeq	pc, r5, r0, lsl #18
     f94:	00d91400 	sbcseq	r1, r9, r0, lsl #8
     f98:	00070000 	andeq	r0, r7, r0
     f9c:	0006440d 	andeq	r4, r6, sp, lsl #8
     fa0:	e9330100 	ldmdb	r3!, {r8}
     fa4:	05000005 	streq	r0, [r0, #-5]
     fa8:	0000fc03 	andeq	pc, r0, r3, lsl #24
     fac:	05a90d20 	streq	r0, [r9, #3360]!	; 0xd20
     fb0:	34010000 	strcc	r0, [r1], #-0
     fb4:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
     fb8:	010c0305 	tsteq	ip, r5, lsl #6
     fbc:	0a002000 	beq	8fc4 <_Min_Stack_Size+0x8dc4>
     fc0:	0400000b 	streq	r0, [r0], #-11
     fc4:	0003e100 	andeq	lr, r3, r0, lsl #2
     fc8:	11010400 	tstne	r1, r0, lsl #8
     fcc:	0c000001 	stceq	0, cr0, [r0], {1}
     fd0:	00000bcd 	andeq	r0, r0, sp, asr #23
     fd4:	000000d8 	ldrdeq	r0, [r0], -r8
     fd8:	00000000 	andeq	r0, r0, r0
     fdc:	00000a0c 	andeq	r0, r0, ip, lsl #20
     fe0:	0004b302 	andeq	fp, r4, r2, lsl #6
     fe4:	2c1b0200 	lfmcs	f0, 4, [fp], {-0}
     fe8:	03000000 	movweq	r0, #0
     fec:	01920601 	orrseq	r0, r2, r1, lsl #12
     ff0:	e3020000 	movw	r0, #8192	; 0x2000
     ff4:	02000000 	andeq	r0, r0, #0
     ff8:	00003e1d 	andeq	r3, r0, sp, lsl lr
     ffc:	08010300 	stmdaeq	r1, {r8, r9}
    1000:	00000190 	muleq	r0, r0, r1
    1004:	95050203 	strls	r0, [r5, #-515]	; 0xfffffdfd
    1008:	02000000 	andeq	r0, r0, #0
    100c:	00000072 	andeq	r0, r0, r2, ror r0
    1010:	00572b02 	subseq	r2, r7, r2, lsl #22
    1014:	02030000 	andeq	r0, r3, #0
    1018:	0001f207 	andeq	pc, r1, r7, lsl #4
    101c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    1020:	000000bd 	strheq	r0, [r0], -sp
    1024:	00006702 	andeq	r6, r0, r2, lsl #14
    1028:	70410200 	subvc	r0, r1, r0, lsl #4
    102c:	03000000 	movweq	r0, #0
    1030:	01c90704 	biceq	r0, r9, r4, lsl #14
    1034:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1038:	0000b805 	andeq	fp, r0, r5, lsl #16
    103c:	07080300 	streq	r0, [r8, -r0, lsl #6]
    1040:	000001c4 	andeq	r0, r0, r4, asr #3
    1044:	69050404 	stmdbvs	r5, {r2, sl}
    1048:	0300746e 	movweq	r7, #1134	; 0x46e
    104c:	01ce0704 	biceq	r0, lr, r4, lsl #14
    1050:	b5020000 	strlt	r0, [r2, #-0]
    1054:	03000004 	movweq	r0, #4
    1058:	00002114 	andeq	r2, r0, r4, lsl r1
    105c:	00e50200 	rsceq	r0, r5, r0, lsl #4
    1060:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    1064:	00000033 	andeq	r0, r0, r3, lsr r0
    1068:	00007402 	andeq	r7, r0, r2, lsl #8
    106c:	4c240300 	stcmi	3, cr0, [r4], #-0
    1070:	02000000 	andeq	r0, r0, #0
    1074:	00000069 	andeq	r0, r0, r9, rrx
    1078:	00653003 	rsbeq	r3, r5, r3
    107c:	23050000 	movwcs	r0, #20480	; 0x5000
    1080:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1084:	00e49e04 	rsceq	r9, r4, r4, lsl #28
    1088:	4b060000 	blmi	181090 <_Min_Stack_Size+0x180e90>
    108c:	04000007 	streq	r0, [r0], #-7
    1090:	0000e5a0 	andeq	lr, r0, r0, lsr #11
    1094:	45060000 	strmi	r0, [r6, #-0]
    1098:	0400000c 	streq	r0, [r0], #-12
    109c:	0000e5a1 	andeq	lr, r0, r1, lsr #11
    10a0:	07000400 	streq	r0, [r0, -r0, lsl #8]
    10a4:	00e40408 	rsceq	r0, r4, r8, lsl #8
    10a8:	5f090000 	svcpl	0x00090000
    10ac:	08005343 	stmdaeq	r0, {r0, r1, r6, r8, r9, ip, lr}
    10b0:	0110a604 	tsteq	r0, r4, lsl #12
    10b4:	3a060000 	bcc	1810bc <_Min_Stack_Size+0x180ebc>
    10b8:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
    10bc:	0000e5a8 	andeq	lr, r0, r8, lsr #11
    10c0:	f6060000 			; <UNDEFINED> instruction: 0xf6060000
    10c4:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    10c8:	0000e5a9 	andeq	lr, r0, r9, lsr #11
    10cc:	0a000400 	beq	20d4 <_Min_Stack_Size+0x1ed4>
    10d0:	31b30408 			; <UNDEFINED> instruction: 0x31b30408
    10d4:	06000001 	streq	r0, [r0], -r1
    10d8:	000008eb 	andeq	r0, r0, fp, ror #17
    10dc:	0140b504 	cmpeq	r0, r4, lsl #10
    10e0:	06000000 	streq	r0, [r0], -r0
    10e4:	00000a12 	andeq	r0, r0, r2, lsl sl
    10e8:	0156b604 	cmpeq	r6, r4, lsl #12
    10ec:	00040000 	andeq	r0, r4, r0
    10f0:	00009e0b 	andeq	r9, r0, fp, lsl #28
    10f4:	00014000 	andeq	r4, r1, r0
    10f8:	00b40c00 	adcseq	r0, r4, r0, lsl #24
    10fc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1100:	00013104 	andeq	r3, r1, r4, lsl #2
    1104:	01560d00 	cmpeq	r6, r0, lsl #26
    1108:	b40c0000 	strlt	r0, [ip], #-0
    110c:	0c000000 	stceq	0, cr0, [r0], {-0}
    1110:	0000009e 	muleq	r0, lr, r0
    1114:	46040800 	strmi	r0, [r4], -r0, lsl #16
    1118:	0a000001 	beq	1124 <_Min_Stack_Size+0xf24>
    111c:	7dbb0408 	cfldrsvc	mvf0, [fp, #32]!
    1120:	06000001 	streq	r0, [r0], -r1
    1124:	000008eb 	andeq	r0, r0, fp, ror #17
    1128:	0182bd04 	orreq	fp, r2, r4, lsl #26
    112c:	06000000 	streq	r0, [r0], -r0
    1130:	00000a12 	andeq	r0, r0, r2, lsl sl
    1134:	0193be04 	orrseq	fp, r3, r4, lsl #28
    1138:	00040000 	andeq	r0, r4, r0
    113c:	00009e0e 	andeq	r9, r0, lr, lsl #28
    1140:	7d040800 	stcvc	8, cr0, [r4, #-0]
    1144:	0d000001 	stceq	0, cr0, [r0, #-4]
    1148:	00000193 	muleq	r0, r3, r1
    114c:	00009e0c 	andeq	r9, r0, ip, lsl #28
    1150:	04080000 	streq	r0, [r8], #-0
    1154:	00000188 	andeq	r0, r0, r8, lsl #3
    1158:	46495f0f 	strbmi	r5, [r9], -pc, lsl #30
    115c:	ae040800 	cdpge	8, 0, cr0, cr4, cr0, {0}
    1160:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    1164:	53554210 	cmppl	r5, #16, 4
    1168:	10b70400 	adcsne	r0, r7, r0, lsl #8
    116c:	10000001 	andne	r0, r0, r1
    1170:	00495053 	subeq	r5, r9, r3, asr r0
    1174:	015cbf04 	cmpeq	ip, r4, lsl #30
    1178:	05000000 	streq	r0, [r0, #-0]
    117c:	00000735 	andeq	r0, r0, r5, lsr r7
    1180:	02970420 	addseq	r0, r7, #32, 8	; 0x20000000
    1184:	06000002 	streq	r0, [r0], -r2
    1188:	00000b58 	andeq	r0, r0, r8, asr fp
    118c:	00a99904 	adceq	r9, r9, r4, lsl #18
    1190:	11000000 	mrsne	r0, (UNDEF: 0)
    1194:	04006469 	streq	r6, [r0], #-1129	; 0xfffffb97
    1198:	0002029a 	muleq	r2, sl, r2
    119c:	24060200 	strcs	r0, [r6], #-512	; 0xfffffe00
    11a0:	0400000b 	streq	r0, [r0], #-11
    11a4:	0000bfa2 	andeq	fp, r0, r2, lsr #31
    11a8:	43110800 	tstmi	r1, #0, 16
    11ac:	aa040053 	bge	101300 <_Min_Stack_Size+0x101100>
    11b0:	000000eb 	andeq	r0, r0, fp, ror #1
    11b4:	46491110 			; <UNDEFINED> instruction: 0x46491110
    11b8:	99c20400 	stmibls	r2, {sl}^
    11bc:	18000001 	stmdane	r0, {r0}
    11c0:	009e1200 	addseq	r1, lr, r0, lsl #4
    11c4:	02120000 	andseq	r0, r2, #0
    11c8:	12130000 	andsne	r0, r3, #0
    11cc:	05000002 	streq	r0, [r0, #-2]
    11d0:	07040300 	streq	r0, [r4, -r0, lsl #6]
    11d4:	00000059 	andeq	r0, r0, r9, asr r0
    11d8:	0008a302 	andeq	sl, r8, r2, lsl #6
    11dc:	bcc30400 	cfstrdlt	mvd0, [r3], {0}
    11e0:	14000001 	strne	r0, [r0], #-1
    11e4:	00003e01 	andeq	r3, r0, r1, lsl #28
    11e8:	91cc0400 	bicls	r0, ip, r0, lsl #8
    11ec:	15000002 	strne	r0, [r0, #-2]
    11f0:	0000089b 	muleq	r0, fp, r8
    11f4:	0c151500 	cfldr32eq	mvfx1, [r5], {-0}
    11f8:	15010000 	strne	r0, [r1, #-0]
    11fc:	00000b47 	andeq	r0, r0, r7, asr #22
    1200:	09d71502 	ldmibeq	r7, {r1, r8, sl, ip}^
    1204:	15030000 	strne	r0, [r3, #-0]
    1208:	0000080c 	andeq	r0, r0, ip, lsl #16
    120c:	0b031504 	bleq	c6624 <_Min_Stack_Size+0xc6424>
    1210:	15050000 	strne	r0, [r5, #-0]
    1214:	0000079e 	muleq	r0, lr, r7
    1218:	0cd51506 	cfldr64eq	mvdx1, [r5], {6}
    121c:	15070000 	strne	r0, [r7, #-0]
    1220:	00000a8f 	andeq	r0, r0, pc, lsl #21
    1224:	0c2c1508 	cfstr32eq	mvfx1, [ip], #-32	; 0xffffffe0
    1228:	15090000 	strne	r0, [r9, #-0]
    122c:	0000086b 	andeq	r0, r0, fp, ror #16
    1230:	0aee150a 	beq	ffb86660 <BootRAM+0xeaf6e01>
    1234:	150b0000 	strne	r0, [fp, #-0]
    1238:	00000765 	andeq	r0, r0, r5, ror #14
    123c:	0a44150c 	beq	1106674 <_Min_Stack_Size+0x1106474>
    1240:	150d0000 	strne	r0, [sp, #-0]
    1244:	000006ec 	andeq	r0, r0, ip, ror #13
    1248:	0b38150e 	bleq	e06688 <_Min_Stack_Size+0xe06488>
    124c:	000f0000 	andeq	r0, pc, r0
    1250:	000a7f02 	andeq	r7, sl, r2, lsl #30
    1254:	24e00400 	strbtcs	r0, [r0], #1024	; 0x400
    1258:	14000002 	strne	r0, [r0], #-2
    125c:	00003e01 	andeq	r3, r0, r1, lsl #28
    1260:	cde70400 	cfstrdgt	mvd0, [r7]
    1264:	15000002 	strne	r0, [r0, #-2]
    1268:	00000974 	andeq	r0, r0, r4, ror r9
    126c:	078f1500 	streq	r1, [pc, r0, lsl #10]
    1270:	15010000 	strne	r0, [r1, #-0]
    1274:	00000a03 	andeq	r0, r0, r3, lsl #20
    1278:	088c1502 	stmeq	ip, {r1, r8, sl, ip}
    127c:	15030000 	strne	r0, [r3, #-0]
    1280:	000009a9 	andeq	r0, r0, r9, lsr #19
    1284:	0c4b1504 	cfstr64eq	mvdx1, [fp], {4}
    1288:	00050000 	andeq	r0, r5, r0
    128c:	000b1302 	andeq	r1, fp, r2, lsl #6
    1290:	9cee0400 	cfstrdls	mvd0, [lr]
    1294:	14000002 	strne	r0, [r0], #-2
    1298:	00005702 	andeq	r5, r0, r2, lsl #14
    129c:	3cf70400 	cfldrdcc	mvd0, [r7]
    12a0:	15000003 	strne	r0, [r0, #-3]
    12a4:	0000096d 	andeq	r0, r0, sp, ror #18
    12a8:	0ada1510 	beq	ff6866f0 <BootRAM+0xe5f6e91>
    12ac:	15200000 	strne	r0, [r0, #-0]!
    12b0:	00000a34 	andeq	r0, r0, r4, lsr sl
    12b4:	08f61540 	ldmeq	r6!, {r6, r8, sl, ip}^
    12b8:	16800000 	strne	r0, [r0], r0
    12bc:	00000b87 	andeq	r0, r0, r7, lsl #23
    12c0:	91160100 	tstls	r6, r0, lsl #2
    12c4:	0000000b 	andeq	r0, r0, fp
    12c8:	0b9b1602 	bleq	fe6c6ad8 <BootRAM+0xd637279>
    12cc:	04000000 	streq	r0, [r0], #-0
    12d0:	000ba516 	andeq	sl, fp, r6, lsl r5
    12d4:	16080000 	strne	r0, [r8], -r0
    12d8:	00000baf 	andeq	r0, r0, pc, lsr #23
    12dc:	b9161000 	ldmdblt	r6, {ip}
    12e0:	0000000b 	andeq	r0, r0, fp
    12e4:	0bc31620 	bleq	ff0c6b6c <BootRAM+0xe03730d>
    12e8:	40000000 	andmi	r0, r0, r0
    12ec:	00081c16 	andeq	r1, r8, r6, lsl ip
    12f0:	16800000 	strne	r0, [r0], r0
    12f4:	00000cc2 	andeq	r0, r0, r2, asr #25
    12f8:	1700ff00 	strne	pc, [r0, -r0, lsl #30]
    12fc:	00000b2e 	andeq	r0, r0, lr, lsr #22
    1300:	d8011404 	stmdale	r1, {r2, sl, ip}
    1304:	18000002 	stmdane	r0, {r1}
    1308:	00000932 	andeq	r0, r0, r2, lsr r9
    130c:	012b0404 			; <UNDEFINED> instruction: 0x012b0404
    1310:	00000389 	andeq	r0, r0, r9, lsl #7
    1314:	00796219 	rsbseq	r6, r9, r9, lsl r2
    1318:	9e012d04 	cdpls	13, 0, cr2, cr1, cr4, {0}
    131c:	00000000 	andeq	r0, r0, r0
    1320:	000b5b1a 	andeq	r5, fp, sl, lsl fp
    1324:	012e0400 			; <UNDEFINED> instruction: 0x012e0400
    1328:	0000009e 	muleq	r0, lr, r0
    132c:	0c961a01 	vldmiaeq	r6, {s2}
    1330:	2f040000 	svccs	0x00040000
    1334:	00009e01 	andeq	r9, r0, r1, lsl #28
    1338:	251a0200 	ldrcs	r0, [sl, #-512]	; 0xfffffe00
    133c:	0400000c 	streq	r0, [r0], #-12
    1340:	009e0130 	addseq	r0, lr, r0, lsr r1
    1344:	00030000 	andeq	r0, r3, r0
    1348:	000c5a17 	andeq	r5, ip, r7, lsl sl
    134c:	01330400 	teqeq	r3, r0, lsl #8
    1350:	00000348 	andeq	r0, r0, r8, asr #6
    1354:	003e011b 	eorseq	r0, lr, fp, lsl r1
    1358:	3b040000 	blcc	101360 <_Min_Stack_Size+0x101160>
    135c:	0003af01 	andeq	sl, r3, r1, lsl #30
    1360:	09f41500 	ldmibeq	r4!, {r8, sl, ip}^
    1364:	15010000 	strne	r0, [r1, #-0]
    1368:	00000d25 	andeq	r0, r0, r5, lsr #26
    136c:	b6170002 	ldrlt	r0, [r7], -r2
    1370:	04000008 	streq	r0, [r0], #-8
    1374:	0395013e 	orrseq	r0, r5, #-2147483633	; 0x8000000f
    1378:	ae180000 	cdpge	0, 1, cr0, cr8, cr0, {0}
    137c:	17000007 	strne	r0, [r0, -r7]
    1380:	14014404 	strne	r4, [r1], #-1028	; 0xfffffbfc
    1384:	19000004 	stmdbne	r0, {r2}
    1388:	0063616d 	rsbeq	r6, r3, sp, ror #2
    138c:	02014604 	andeq	r4, r1, #4, 12	; 0x400000
    1390:	00000002 	andeq	r0, r0, r2
    1394:	00706919 	rsbseq	r6, r0, r9, lsl r9
    1398:	14014704 	strne	r4, [r1], #-1796	; 0xfffff8fc
    139c:	06000004 	streq	r0, [r0], -r4
    13a0:	006e7319 	rsbeq	r7, lr, r9, lsl r3
    13a4:	14014804 	strne	r4, [r1], #-2052	; 0xfffff7fc
    13a8:	0a000004 	beq	13c0 <_Min_Stack_Size+0x11c0>
    13ac:	00776719 	rsbseq	r6, r7, r9, lsl r7
    13b0:	14014904 	strne	r4, [r1], #-2308	; 0xfffff6fc
    13b4:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    13b8:	736e6419 	cmnvc	lr, #419430400	; 0x19000000
    13bc:	014a0400 	cmpeq	sl, r0, lsl #8
    13c0:	00000414 	andeq	r0, r0, r4, lsl r4
    13c4:	0c661a12 			; <UNDEFINED> instruction: 0x0c661a12
    13c8:	4b040000 	blmi	1013d0 <_Min_Stack_Size+0x1011d0>
    13cc:	0003af01 	andeq	sl, r3, r1, lsl #30
    13d0:	12001600 	andne	r1, r0, #0, 12
    13d4:	0000009e 	muleq	r0, lr, r0
    13d8:	00000424 	andeq	r0, r0, r4, lsr #8
    13dc:	00021213 	andeq	r1, r2, r3, lsl r2
    13e0:	17000300 	strne	r0, [r0, -r0, lsl #6]
    13e4:	000009e8 	andeq	r0, r0, r8, ror #19
    13e8:	bb014c04 	bllt	54400 <_Min_Stack_Size+0x54200>
    13ec:	1b000003 	blne	1400 <_Min_Stack_Size+0x1200>
    13f0:	00003e01 	andeq	r3, r0, r1, lsl #28
    13f4:	01530400 	cmpeq	r3, r0, lsl #8
    13f8:	00000456 	andeq	r0, r0, r6, asr r4
    13fc:	00075215 	andeq	r5, r7, r5, lsl r2
    1400:	b5150200 	ldrlt	r0, [r5, #-512]	; 0xfffffe00
    1404:	2000000c 	andcs	r0, r0, ip
    1408:	00082615 	andeq	r2, r8, r5, lsl r6
    140c:	5a151000 	bpl	545414 <_Min_Stack_Size+0x545214>
    1410:	08000008 	stmdaeq	r0, {r3}
    1414:	09551700 	ldmdbeq	r5, {r8, r9, sl, ip}^
    1418:	5a040000 	bpl	101420 <_Min_Stack_Size+0x101220>
    141c:	00043001 	andeq	r3, r4, r1
    1420:	0b651800 	bleq	1947428 <_Min_Stack_Size+0x1947228>
    1424:	04040000 	streq	r0, [r4], #-0
    1428:	048a0160 	streq	r0, [sl], #352	; 0x160
    142c:	ac1a0000 	ldcge	0, cr0, [sl], {-0}
    1430:	04000008 	streq	r0, [r0], #-8
    1434:	009e0162 	addseq	r0, lr, r2, ror #2
    1438:	1a000000 	bne	1440 <_Min_Stack_Size+0x1240>
    143c:	00000962 	andeq	r0, r0, r2, ror #18
    1440:	a9016304 	stmdbge	r1, {r2, r8, r9, sp, lr}
    1444:	02000000 	andeq	r0, r0, #0
    1448:	09051700 	stmdbeq	r5, {r8, r9, sl, ip}
    144c:	64040000 	strvs	r0, [r4], #-0
    1450:	00046201 	andeq	r6, r4, r1, lsl #4
    1454:	073f1c00 	ldreq	r1, [pc, -r0, lsl #24]!
    1458:	2f010000 	svccs	0x00010000
    145c:	0800277c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, sp}
    1460:	0000000c 	andeq	r0, r0, ip
    1464:	391c9c01 	ldmdbcc	ip, {r0, sl, fp, ip, pc}
    1468:	0100000c 	tsteq	r0, ip
    146c:	00278835 	eoreq	r8, r7, r5, lsr r8
    1470:	00000c08 	andeq	r0, r0, r8, lsl #24
    1474:	1c9c0100 	ldfnes	f0, [ip], {0}
    1478:	000008d9 	ldrdeq	r0, [r0], -r9
    147c:	27943b01 	ldrcs	r3, [r4, r1, lsl #22]
    1480:	000c0800 	andeq	r0, ip, r0, lsl #16
    1484:	9c010000 	stcls	0, cr0, [r1], {-0}
    1488:	000abd1c 	andeq	fp, sl, ip, lsl sp
    148c:	a0410100 	subge	r0, r1, r0, lsl #2
    1490:	0c080027 	stceq	0, cr0, [r8], {39}	; 0x27
    1494:	01000000 	mrseq	r0, (UNDEF: 0)
    1498:	09401d9c 	stmdbeq	r0, {r2, r3, r4, r7, r8, sl, fp, ip}^
    149c:	47010000 	strmi	r0, [r1, -r0]
    14a0:	0000009e 	muleq	r0, lr, r0
    14a4:	080027ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, sp}
    14a8:	00000018 	andeq	r0, r0, r8, lsl r0
    14ac:	05029c01 	streq	r9, [r2, #-3073]	; 0xfffff3ff
    14b0:	fd1e0000 	ldc2	0, cr0, [lr, #-0]
    14b4:	0100000b 	tsteq	r0, fp
    14b8:	0000b447 	andeq	fp, r0, r7, asr #8
    14bc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    14c0:	07171f00 	ldreq	r1, [r7, -r0, lsl #30]
    14c4:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    14c8:	080027c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, sp}
    14cc:	0000001c 	andeq	r0, r0, ip, lsl r0
    14d0:	05339c01 	ldreq	r9, [r3, #-3073]!	; 0xfffff3ff
    14d4:	fd1e0000 	ldc2	0, cr0, [lr, #-0]
    14d8:	0100000b 	tsteq	r0, fp
    14dc:	0000b44e 	andeq	fp, r0, lr, asr #8
    14e0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    14e4:	00627720 	rsbeq	r7, r2, r0, lsr #14
    14e8:	009e4e01 	addseq	r4, lr, r1, lsl #28
    14ec:	91020000 	mrsls	r0, (UNDEF: 2)
    14f0:	e9210073 	stmdb	r1!, {r0, r1, r4, r5, r6}
    14f4:	01000007 	tsteq	r0, r7
    14f8:	00009e54 	andeq	r9, r0, r4, asr lr
    14fc:	0027e000 	eoreq	lr, r7, r0
    1500:	00000e08 	andeq	r0, r0, r8, lsl #28
    1504:	1f9c0100 	svcne	0x009c0100
    1508:	000007d3 	ldrdeq	r0, [r0], -r3
    150c:	27f05a01 	ldrbcs	r5, [r0, r1, lsl #20]!
    1510:	00140800 	andseq	r0, r4, r0, lsl #16
    1514:	9c010000 	stcls	0, cr0, [r1], {-0}
    1518:	0000056b 	andeq	r0, r0, fp, ror #10
    151c:	00627720 	rsbeq	r7, r2, r0, lsr #14
    1520:	009e5a01 	addseq	r5, lr, r1, lsl #20
    1524:	91020000 	mrsls	r0, (UNDEF: 2)
    1528:	7e1f0077 	mrcvc	0, 0, r0, cr15, cr7, {3}
    152c:	0100000c 	tsteq	r0, ip
    1530:	00280470 	eoreq	r0, r8, r0, ror r4
    1534:	00004808 	andeq	r4, r0, r8, lsl #16
    1538:	9d9c0100 	ldflss	f0, [ip]
    153c:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    1540:	0000072d 	andeq	r0, r0, sp, lsr #14
    1544:	00e57001 	rsceq	r7, r5, r1
    1548:	91020000 	mrsls	r0, (UNDEF: 2)
    154c:	0a991e74 	beq	fe648f24 <BootRAM+0xd5b96c5>
    1550:	70010000 	andvc	r0, r1, r0
    1554:	000000e5 	andeq	r0, r0, r5, ror #1
    1558:	00709102 	rsbseq	r9, r0, r2, lsl #2
    155c:	000a1e1f 	andeq	r1, sl, pc, lsl lr
    1560:	4c7e0100 	ldfmie	f0, [lr], #-0
    1564:	48080028 	stmdami	r8, {r3, r5}
    1568:	01000000 	mrseq	r0, (UNDEF: 0)
    156c:	0005cf9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    1570:	075e1e00 	ldrbeq	r1, [lr, -r0, lsl #28]
    1574:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    1578:	000000e5 	andeq	r0, r0, r5, ror #1
    157c:	1e749102 	expnes	f1, f2
    1580:	00000c05 	andeq	r0, r0, r5, lsl #24
    1584:	00e57e01 	rsceq	r7, r5, r1, lsl #28
    1588:	91020000 	mrsls	r0, (UNDEF: 2)
    158c:	bc1f0070 	ldclt	0, cr0, [pc], {112}	; 0x70
    1590:	01000007 	tsteq	r0, r7
    1594:	0000008c 	andeq	r0, r0, ip, lsl #1
    1598:	00005400 	andeq	r5, r0, r0, lsl #8
    159c:	019c0100 	orrseq	r0, ip, r0, lsl #2
    15a0:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    15a4:	000008d2 	ldrdeq	r0, [r0], -r2
    15a8:	01408c01 	cmpeq	r0, r1, lsl #24
    15ac:	91020000 	mrsls	r0, (UNDEF: 2)
    15b0:	0cce1e74 	stcleq	14, cr1, [lr], {116}	; 0x74
    15b4:	8c010000 	stchi	0, cr0, [r1], {-0}
    15b8:	00000156 	andeq	r0, r0, r6, asr r1
    15bc:	00709102 	rsbseq	r9, r0, r2, lsl #2
    15c0:	000a561f 	andeq	r5, sl, pc, lsl r6
    15c4:	949c0100 	ldrls	r0, [ip], #256	; 0x100
    15c8:	54080028 	strpl	r0, [r8], #-40	; 0xffffffd8
    15cc:	01000000 	mrseq	r0, (UNDEF: 0)
    15d0:	0006339c 	muleq	r6, ip, r3
    15d4:	0c0e1e00 	stceq	14, cr1, [lr], {-0}
    15d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    15dc:	00000182 	andeq	r0, r0, r2, lsl #3
    15e0:	1e749102 	expnes	f1, f2
    15e4:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    15e8:	01939c01 	orrseq	r9, r3, r1, lsl #24
    15ec:	91020000 	mrsls	r0, (UNDEF: 2)
    15f0:	33220070 			; <UNDEFINED> instruction: 0x33220070
    15f4:	01000008 	tsteq	r0, r8
    15f8:	000093ac 	andeq	r9, r0, ip, lsr #7
    15fc:	0028e800 	eoreq	lr, r8, r0, lsl #16
    1600:	0001bc08 	andeq	fp, r1, r8, lsl #24
    1604:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
    1608:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    160c:	00000aa1 	andeq	r0, r0, r1, lsr #21
    1610:	0291ac01 	addseq	sl, r1, #256	; 0x100
    1614:	91020000 	mrsls	r0, (UNDEF: 2)
    1618:	7261205f 	rsbvc	r2, r1, #95	; 0x5f
    161c:	ac010067 	stcge	0, cr0, [r1], {103}	; 0x67
    1620:	00000685 	andeq	r0, r0, r5, lsl #13
    1624:	23589102 	cmpcs	r8, #-2147483648	; 0x80000000
    1628:	00706d74 	rsbseq	r6, r0, r4, ror sp
    162c:	009eae01 	addseq	sl, lr, r1, lsl #28
    1630:	91020000 	mrsls	r0, (UNDEF: 2)
    1634:	0b29246f 	bleq	a4a7f8 <_Min_Stack_Size+0xa4a5f8>
    1638:	af010000 	svcge	0x00010000
    163c:	00000687 	andeq	r0, r0, r7, lsl #13
    1640:	00649102 	rsbeq	r9, r4, r2, lsl #2
    1644:	97120425 	ldrls	r0, [r2, -r5, lsr #8]
    1648:	97000006 	strls	r0, [r0, -r6]
    164c:	13000006 	movwne	r0, #6
    1650:	00000212 	andeq	r0, r0, r2, lsl r2
    1654:	04080001 	streq	r0, [r8], #-1
    1658:	0000009e 	muleq	r0, lr, r0
    165c:	00092722 	andeq	r2, r9, r2, lsr #14
    1660:	93f80100 	mvnsls	r0, #0, 2
    1664:	a4000000 	strge	r0, [r0], #-0
    1668:	7c08002a 	stcvc	0, cr0, [r8], {42}	; 0x2a
    166c:	01000000 	mrseq	r0, (UNDEF: 0)
    1670:	0006d39c 	muleq	r6, ip, r3
    1674:	08531e00 	ldmdaeq	r3, {r9, sl, fp, ip}^
    1678:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    167c:	000002cd 	andeq	r0, r0, sp, asr #5
    1680:	20779102 	rsbscs	r9, r7, r2, lsl #2
    1684:	00677261 	rsbeq	r7, r7, r1, ror #4
    1688:	0685f801 	streq	pc, [r5], r1, lsl #16
    168c:	91020000 	mrsls	r0, (UNDEF: 2)
    1690:	76260070 			; <UNDEFINED> instruction: 0x76260070
    1694:	0100000b 	tsteq	r0, fp
    1698:	2b200114 	blcs	801af0 <_Min_Stack_Size+0x8018f0>
    169c:	00980800 	addseq	r0, r8, r0, lsl #16
    16a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    16a4:	00000724 	andeq	r0, r0, r4, lsr #14
    16a8:	00776727 	rsbseq	r6, r7, r7, lsr #14
    16ac:	14011601 	strne	r1, [r1], #-1537	; 0xfffff9ff
    16b0:	02000004 	andeq	r0, r0, #4
    16b4:	73277491 			; <UNDEFINED> instruction: 0x73277491
    16b8:	1601006e 	strne	r0, [r1], -lr, rrx
    16bc:	00041401 	andeq	r1, r4, r1, lsl #8
    16c0:	70910200 	addsvc	r0, r1, r0, lsl #4
    16c4:	70697327 	rsbvc	r7, r9, r7, lsr #6
    16c8:	01160100 	tsteq	r6, r0, lsl #2
    16cc:	00000414 	andeq	r0, r0, r4, lsl r4
    16d0:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
    16d4:	0063616d 	rsbeq	r6, r3, sp, ror #2
    16d8:	02011701 	andeq	r1, r1, #262144	; 0x40000
    16dc:	02000002 	andeq	r0, r0, #2
    16e0:	28006491 	stmdacs	r0, {r0, r4, r7, sl, sp, lr}
    16e4:	00000ce5 	andeq	r0, r0, r5, ror #25
    16e8:	93012201 	movwls	r2, #4609	; 0x1201
    16ec:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    16f0:	1808002b 	stmdane	r8, {r0, r1, r3, r5}
    16f4:	01000001 	tsteq	r0, r1
    16f8:	0007799c 	muleq	r7, ip, r9
    16fc:	08052900 	stmdaeq	r5, {r8, fp, sp}
    1700:	22010000 	andcs	r0, r1, #0
    1704:	00069701 	andeq	r9, r6, r1, lsl #14
    1708:	6c910200 	lfmvs	f0, 4, [r1], {0}
    170c:	000cae29 	andeq	sl, ip, r9, lsr #28
    1710:	01220100 			; <UNDEFINED> instruction: 0x01220100
    1714:	00000697 	muleq	r0, r7, r6
    1718:	27689102 	strbcs	r9, [r8, -r2, lsl #2]!
    171c:	24010069 	strcs	r0, [r1], #-105	; 0xffffff97
    1720:	00009301 	andeq	r9, r0, r1, lsl #6
    1724:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1728:	706d7427 	rsbvc	r7, sp, r7, lsr #8
    172c:	01250100 			; <UNDEFINED> instruction: 0x01250100
    1730:	00000093 	muleq	r0, r3, r0
    1734:	00769102 	rsbseq	r9, r6, r2, lsl #2
    1738:	000aa826 	andeq	sl, sl, r6, lsr #16
    173c:	013c0100 	teqeq	ip, r0, lsl #2
    1740:	08002cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, sp}
    1744:	0000003c 	andeq	r0, r0, ip, lsr r0
    1748:	07bc9c01 	ldreq	r9, [ip, r1, lsl #24]!
    174c:	b8290000 	stmdalt	r9!, {}	; <UNPREDICTABLE>
    1750:	01000009 	tsteq	r0, r9
    1754:	033c013c 	teqeq	ip, #60, 2
    1758:	91020000 	mrsls	r0, (UNDEF: 2)
    175c:	7269276e 	rsbvc	r2, r9, #28835840	; 0x1b80000
    1760:	013e0100 	teqeq	lr, r0, lsl #2
    1764:	0000009e 	muleq	r0, lr, r0
    1768:	27779102 	ldrbcs	r9, [r7, -r2, lsl #2]!
    176c:	00726973 	rsbseq	r6, r2, r3, ror r9
    1770:	9e013f01 	cdpls	15, 0, cr3, cr1, cr1, {0}
    1774:	02000000 	andeq	r0, r0, #0
    1778:	28007691 	stmdacs	r0, {r0, r4, r7, r9, sl, ip, sp, lr}
    177c:	0000083e 	andeq	r0, r0, lr, lsr r8
    1780:	3c015401 	cfstrscc	mvf5, [r1], {1}
    1784:	0c000003 	stceq	0, cr0, [r0], {3}
    1788:	4a08002d 	bmi	201844 <_Min_Stack_Size+0x201644>
    178c:	01000000 	mrseq	r0, (UNDEF: 0)
    1790:	0008039c 	muleq	r8, ip, r3
    1794:	72692700 	rsbvc	r2, r9, #0, 14
    1798:	01560100 	cmpeq	r6, r0, lsl #2
    179c:	0000009e 	muleq	r0, lr, r0
    17a0:	27779102 	ldrbcs	r9, [r7, -r2, lsl #2]!
    17a4:	00726973 	rsbseq	r6, r2, r3, ror r9
    17a8:	9e015701 	cdpls	7, 0, cr5, cr1, cr1, {0}
    17ac:	02000000 	andeq	r0, r0, #0
    17b0:	72277691 	eorvc	r7, r7, #152043520	; 0x9100000
    17b4:	01007465 	tsteq	r0, r5, ror #8
    17b8:	00a90158 	adceq	r0, r9, r8, asr r1
    17bc:	91020000 	mrsls	r0, (UNDEF: 2)
    17c0:	fe260074 	mcr2	0, 1, r0, cr6, cr4, {3}
    17c4:	01000006 	tsteq	r0, r6
    17c8:	2d58016c 	ldfcse	f0, [r8, #-432]	; 0xfffffe50
    17cc:	00360800 	eorseq	r0, r6, r0, lsl #16
    17d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    17d4:	00000847 	andeq	r0, r0, r7, asr #16
    17d8:	0009b829 	andeq	fp, r9, r9, lsr #16
    17dc:	016c0100 	cmneq	ip, r0, lsl #2
    17e0:	0000033c 	andeq	r0, r0, ip, lsr r3
    17e4:	276e9102 	strbcs	r9, [lr, -r2, lsl #2]!
    17e8:	00726d69 	rsbseq	r6, r2, r9, ror #26
    17ec:	9e016e01 	cdpls	14, 0, cr6, cr1, cr1, {0}
    17f0:	02000000 	andeq	r0, r0, #0
    17f4:	602a7791 	mlavs	sl, r1, r7, r7
    17f8:	0100000b 	tsteq	r0, fp
    17fc:	009e016f 	addseq	r0, lr, pc, ror #2
    1800:	91020000 	mrsls	r0, (UNDEF: 2)
    1804:	76280076 			; <UNDEFINED> instruction: 0x76280076
    1808:	01000007 	tsteq	r0, r7
    180c:	033c0184 	teqeq	ip, #132, 2	; 0x21
    1810:	2d900000 	ldccs	0, cr0, [r0]
    1814:	00460800 	subeq	r0, r6, r0, lsl #16
    1818:	9c010000 	stcls	0, cr0, [r1], {-0}
    181c:	0000088f 	andeq	r0, r0, pc, lsl #17
    1820:	726d6927 	rsbvc	r6, sp, #638976	; 0x9c000
    1824:	01860100 	orreq	r0, r6, r0, lsl #2
    1828:	0000009e 	muleq	r0, lr, r0
    182c:	2a779102 	bcs	1de5c3c <_Min_Stack_Size+0x1de5a3c>
    1830:	00000b60 	andeq	r0, r0, r0, ror #22
    1834:	9e018701 	cdpls	7, 0, cr8, cr1, cr1, {0}
    1838:	02000000 	andeq	r0, r0, #0
    183c:	72277691 	eorvc	r7, r7, #152043520	; 0x9100000
    1840:	01007465 	tsteq	r0, r5, ror #8
    1844:	00a90188 	adceq	r0, r9, r8, lsl #3
    1848:	91020000 	mrsls	r0, (UNDEF: 2)
    184c:	c0280074 	eorgt	r0, r8, r4, ror r0
    1850:	01000008 	tsteq	r0, r8
    1854:	0093019c 	umullseq	r0, r3, ip, r1
    1858:	2dd80000 	ldclcs	0, cr0, [r8]
    185c:	002e0800 	eoreq	r0, lr, r0, lsl #16
    1860:	9c010000 	stcls	0, cr0, [r1], {-0}
    1864:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
    1868:	706d7427 	rsbvc	r7, sp, r7, lsr #8
    186c:	019e0100 	orrseq	r0, lr, r0, lsl #2
    1870:	00000093 	muleq	r0, r3, r0
    1874:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1878:	000d1228 	andeq	r1, sp, r8, lsr #4
    187c:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    1880:	00000093 	muleq	r0, r3, r0
    1884:	08002e08 	stmdaeq	r0, {r3, r9, sl, fp, sp}
    1888:	00000032 	andeq	r0, r0, r2, lsr r0
    188c:	08e39c01 	stmiaeq	r3!, {r0, sl, fp, ip, pc}^
    1890:	74270000 	strtvc	r0, [r7], #-0
    1894:	0100706d 	tsteq	r0, sp, rrx
    1898:	009301b3 			; <UNDEFINED> instruction: 0x009301b3
    189c:	91020000 	mrsls	r0, (UNDEF: 2)
    18a0:	f2260077 	vqadd.s32	q0, q3, <illegal reg q11.5>
    18a4:	0100000c 	tsteq	r0, ip
    18a8:	2e3c01c6 	rsfcs<illegal precision>m	f0, f4, f6
    18ac:	004e0800 	subeq	r0, lr, r0, lsl #16
    18b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    18b4:	00000909 	andeq	r0, r0, r9, lsl #18
    18b8:	706d7427 	rsbvc	r7, sp, r7, lsr #8
    18bc:	01c80100 	biceq	r0, r8, r0, lsl #2
    18c0:	0000009e 	muleq	r0, lr, r0
    18c4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    18c8:	00087a26 	andeq	r7, r8, r6, lsr #20
    18cc:	01d00100 	bicseq	r0, r0, r0, lsl #2
    18d0:	08002e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, sp}
    18d4:	00000084 	andeq	r0, r0, r4, lsl #1
    18d8:	093e9c01 	ldmdbeq	lr!, {r0, sl, fp, ip, pc}
    18dc:	a6290000 	strtge	r0, [r9], -r0
    18e0:	0100000c 	tsteq	r0, ip
    18e4:	093e01d0 	ldmdbeq	lr!, {r4, r6, r7, r8}
    18e8:	91020000 	mrsls	r0, (UNDEF: 2)
    18ec:	6d74276c 	ldclvs	7, cr2, [r4, #-432]!	; 0xfffffe50
    18f0:	d2010070 	andle	r0, r1, #112	; 0x70
    18f4:	00009e01 	andeq	r9, r0, r1, lsl #28
    18f8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    18fc:	89040800 	stmdbhi	r4, {fp}
    1900:	26000003 	strcs	r0, [r0], -r3
    1904:	00000c9c 	muleq	r0, ip, ip
    1908:	1001ee01 	andne	lr, r1, r1, lsl #28
    190c:	9808002f 	stmdals	r8, {r0, r1, r2, r3, r5}
    1910:	01000000 	mrseq	r0, (UNDEF: 0)
    1914:	0009799c 	muleq	r9, ip, r9
    1918:	0ca62900 			; <UNDEFINED> instruction: 0x0ca62900
    191c:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    1920:	00093e01 	andeq	r3, r9, r1, lsl #28
    1924:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1928:	706d7427 	rsbvc	r7, sp, r7, lsr #8
    192c:	01f00100 	mvnseq	r0, r0, lsl #2
    1930:	0000009e 	muleq	r0, lr, r0
    1934:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1938:	000a6d26 	andeq	r6, sl, r6, lsr #26
    193c:	02150100 	andseq	r0, r5, #0, 2
    1940:	00000000 	andeq	r0, r0, r0
    1944:	00000048 	andeq	r0, r0, r8, asr #32
    1948:	09ae9c01 	stmibeq	lr!, {r0, sl, fp, ip, pc}
    194c:	a6290000 	strtge	r0, [r9], -r0
    1950:	0100000c 	tsteq	r0, ip
    1954:	093e0215 	ldmdbeq	lr!, {r0, r2, r4, r9}
    1958:	91020000 	mrsls	r0, (UNDEF: 2)
    195c:	6d74276c 	ldclvs	7, cr2, [r4, #-432]!	; 0xfffffe50
    1960:	17010070 	smlsdxne	r1, r0, r0, r0
    1964:	00009e02 	andeq	r9, r0, r2, lsl #28
    1968:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    196c:	09832800 	stmibeq	r3, {fp, sp}
    1970:	1c010000 	stcne	0, cr0, [r1], {-0}
    1974:	00009302 	andeq	r9, r0, r2, lsl #6
    1978:	002fa800 	eoreq	sl, pc, r0, lsl #16
    197c:	00009408 	andeq	r9, r0, r8, lsl #8
    1980:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    1984:	29000009 	stmdbcs	r0, {r0, r3}
    1988:	00000d1f 	andeq	r0, r0, pc, lsl sp
    198c:	9e021c01 	cdpls	12, 0, cr1, cr2, cr1, {0}
    1990:	02000000 	andeq	r0, r0, #0
    1994:	74276f91 	strtvc	r6, [r7], #-3985	; 0xfffff06f
    1998:	0100706d 	tsteq	r0, sp, rrx
    199c:	009e021e 	addseq	r0, lr, lr, lsl r2
    19a0:	91020000 	mrsls	r0, (UNDEF: 2)
    19a4:	14260077 	strtne	r0, [r6], #-119	; 0xffffff89
    19a8:	01000009 	tsteq	r0, r9
    19ac:	303c0236 	eorscc	r0, ip, r6, lsr r2
    19b0:	00800800 	addeq	r0, r0, r0, lsl #16
    19b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    19b8:	00000a0d 	andeq	r0, r0, sp, lsl #20
    19bc:	000ad129 	andeq	sp, sl, r9, lsr #2
    19c0:	02360100 	eorseq	r0, r6, #0, 2
    19c4:	00000a0d 	andeq	r0, r0, sp, lsl #20
    19c8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    19cc:	04240408 	strteq	r0, [r4], #-1032	; 0xfffffbf8
    19d0:	96260000 	strtls	r0, [r6], -r0
    19d4:	01000009 	tsteq	r0, r9
    19d8:	30bc0243 	adcscc	r0, ip, r3, asr #4
    19dc:	00800800 	addeq	r0, r0, r0, lsl #16
    19e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    19e4:	00000a39 	andeq	r0, r0, r9, lsr sl
    19e8:	000ad129 	andeq	sp, sl, r9, lsr #2
    19ec:	02430100 	subeq	r0, r3, #0, 2
    19f0:	00000a0d 	andeq	r0, r0, sp, lsl #20
    19f4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    19f8:	000c6b28 	andeq	r6, ip, r8, lsr #22
    19fc:	02500100 	subseq	r0, r0, #0, 2
    1a00:	00000093 	muleq	r0, r3, r0
    1a04:	0800313c 	stmdaeq	r0, {r2, r3, r4, r5, r8, ip, sp}
    1a08:	00000044 	andeq	r0, r0, r4, asr #32
    1a0c:	0a729c01 	beq	1ca8a18 <_Min_Stack_Size+0x1ca8818>
    1a10:	e4290000 	strt	r0, [r9], #-0
    1a14:	01000006 	tsteq	r0, r6
    1a18:	04560250 	ldrbeq	r0, [r6], #-592	; 0xfffffdb0
    1a1c:	91020000 	mrsls	r0, (UNDEF: 2)
    1a20:	6d74276f 	ldclvs	7, cr2, [r4, #-444]!	; 0xfffffe44
    1a24:	52010070 	andpl	r0, r1, #112	; 0x70
    1a28:	00009e02 	andeq	r9, r0, r2, lsl #28
    1a2c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1a30:	06d92b00 	ldrbeq	r2, [r9], r0, lsl #22
    1a34:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    1a38:	00045602 	andeq	r5, r4, r2, lsl #12
    1a3c:	00318000 	eorseq	r8, r1, r0
    1a40:	00001008 	andeq	r1, r0, r8
    1a44:	269c0100 	ldrcs	r0, [ip], r0, lsl #2
    1a48:	000009c4 	andeq	r0, r0, r4, asr #19
    1a4c:	90026301 	andls	r6, r2, r1, lsl #6
    1a50:	42080031 	andmi	r0, r8, #49	; 0x31
    1a54:	01000000 	mrseq	r0, (UNDEF: 0)
    1a58:	000aae9c 	muleq	sl, ip, lr
    1a5c:	08632900 	stmdaeq	r3!, {r8, fp, sp}^
    1a60:	63010000 	movwvs	r0, #4096	; 0x1000
    1a64:	000aae02 	andeq	sl, sl, r2, lsl #28
    1a68:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1a6c:	8a040800 	bhi	103a74 <_Min_Stack_Size+0x103874>
    1a70:	26000004 	strcs	r0, [r0], -r4
    1a74:	00000cff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1a78:	d4026901 	strle	r6, [r2], #-2305	; 0xfffff6ff
    1a7c:	44080031 	strmi	r0, [r8], #-49	; 0xffffffcf
    1a80:	01000000 	mrseq	r0, (UNDEF: 0)
    1a84:	000ada9c 	muleq	sl, ip, sl
    1a88:	08632900 	stmdaeq	r3!, {r8, fp, sp}^
    1a8c:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    1a90:	000aae02 	andeq	sl, sl, r2, lsl #28
    1a94:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1a98:	0afd2400 	beq	fff4aaa0 <BootRAM+0xeebb241>
    1a9c:	6d010000 	stcvs	0, cr0, [r1, #-0]
    1aa0:	00000414 	andeq	r0, r0, r4, lsl r4
    1aa4:	01140305 	tsteq	r4, r5, lsl #6
    1aa8:	fe242000 	cdp2	0, 2, cr2, cr4, cr0, {0}
    1aac:	01000007 	tsteq	r0, r7
    1ab0:	0003af6e 	andeq	sl, r3, lr, ror #30
    1ab4:	18030500 	stmdane	r3, {r8, sl}
    1ab8:	2c200001 	stccs	0, cr0, [r0], #-4
    1abc:	000008a4 	andeq	r0, r0, r4, lsr #17
    1ac0:	02195f01 	andseq	r5, r9, #1, 30
    1ac4:	03050000 	movweq	r0, #20480	; 0x5000
    1ac8:	20000084 	andcs	r0, r0, r4, lsl #1
    1acc:	0004d800 	andeq	sp, r4, r0, lsl #16
    1ad0:	80000400 	andhi	r0, r0, r0, lsl #8
    1ad4:	04000006 	streq	r0, [r0], #-6
    1ad8:	00011101 	andeq	r1, r1, r1, lsl #2
    1adc:	0db40c00 	ldceq	12, cr0, [r4]
    1ae0:	036e0000 	cmneq	lr, #0
    1ae4:	01e80000 	mvneq	r0, r0
    1ae8:	00000000 	andeq	r0, r0, r0
    1aec:	0e8b0000 	cdpeq	0, 8, cr0, cr11, cr0, {0}
    1af0:	01020000 	mrseq	r0, (UNDEF: 2)
    1af4:	00019206 	andeq	r9, r1, r6, lsl #4
    1af8:	00e30300 	rsceq	r0, r3, r0, lsl #6
    1afc:	1d020000 	stcne	0, cr0, [r2, #-0]
    1b00:	00000037 	andeq	r0, r0, r7, lsr r0
    1b04:	90080102 	andls	r0, r8, r2, lsl #2
    1b08:	02000001 	andeq	r0, r0, #1
    1b0c:	00950502 	addseq	r0, r5, r2, lsl #10
    1b10:	72030000 	andvc	r0, r3, #0
    1b14:	02000000 	andeq	r0, r0, #0
    1b18:	0000502b 	andeq	r5, r0, fp, lsr #32
    1b1c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1b20:	000001f2 	strdeq	r0, [r0], -r2
    1b24:	bd050402 	cfstrslt	mvf0, [r5, #-8]
    1b28:	03000000 	movweq	r0, #0
    1b2c:	00000067 	andeq	r0, r0, r7, rrx
    1b30:	00694102 	rsbeq	r4, r9, r2, lsl #2
    1b34:	04020000 	streq	r0, [r2], #-0
    1b38:	0001c907 	andeq	ip, r1, r7, lsl #18
    1b3c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    1b40:	000000b8 	strheq	r0, [r0], -r8
    1b44:	c4070802 	strgt	r0, [r7], #-2050	; 0xfffff7fe
    1b48:	04000001 	streq	r0, [r0], #-1
    1b4c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1b50:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    1b54:	0001ce07 	andeq	ip, r1, r7, lsl #28
    1b58:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
    1b5c:	000002f8 	strdeq	r0, [r0], -r8
    1b60:	59070402 	stmdbpl	r7, {r1, sl}
    1b64:	05000000 	streq	r0, [r0, #-0]
    1b68:	0000a004 	andeq	sl, r0, r4
    1b6c:	01020600 	tsteq	r2, r0, lsl #12
    1b70:	00019908 	andeq	r9, r1, r8, lsl #18
    1b74:	00e50300 	rsceq	r0, r5, r0, lsl #6
    1b78:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    1b7c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1b80:	00007403 	andeq	r7, r0, r3, lsl #8
    1b84:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
    1b88:	03000000 	movweq	r0, #0
    1b8c:	00000069 	andeq	r0, r0, r9, rrx
    1b90:	005e3003 	subseq	r3, lr, r3
    1b94:	23070000 	movwcs	r0, #28672	; 0x7000
    1b98:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1b9c:	00ee9e04 	rsceq	r9, lr, r4, lsl #28
    1ba0:	4b080000 	blmi	201ba8 <_Min_Stack_Size+0x2019a8>
    1ba4:	04000007 	streq	r0, [r0], #-7
    1ba8:	00009aa0 	andeq	r9, r0, r0, lsr #21
    1bac:	45080000 	strmi	r0, [r8, #-0]
    1bb0:	0400000c 	streq	r0, [r0], #-12
    1bb4:	00009aa1 	andeq	r9, r0, r1, lsr #21
    1bb8:	09000400 	stmdbeq	r0, {sl}
    1bbc:	0053435f 	subseq	r4, r3, pc, asr r3
    1bc0:	13a60408 			; <UNDEFINED> instruction: 0x13a60408
    1bc4:	08000001 	stmdaeq	r0, {r0}
    1bc8:	00003e3a 	andeq	r3, r0, sl, lsr lr
    1bcc:	009aa804 	addseq	sl, sl, r4, lsl #16
    1bd0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1bd4:	00003ff6 	strdeq	r3, [r0], -r6
    1bd8:	009aa904 	addseq	sl, sl, r4, lsl #18
    1bdc:	00040000 	andeq	r0, r4, r0
    1be0:	b304080a 	movwlt	r0, #18442	; 0x480a
    1be4:	00000134 	andeq	r0, r0, r4, lsr r1
    1be8:	0008eb08 	andeq	lr, r8, r8, lsl #22
    1bec:	43b50400 			; <UNDEFINED> instruction: 0x43b50400
    1bf0:	00000001 	andeq	r0, r0, r1
    1bf4:	000a1208 	andeq	r1, sl, r8, lsl #4
    1bf8:	59b60400 	ldmibpl	r6!, {sl}
    1bfc:	04000001 	streq	r0, [r0], #-1
    1c00:	00a80b00 	adceq	r0, r8, r0, lsl #22
    1c04:	01430000 	mrseq	r0, (UNDEF: 67)
    1c08:	be0c0000 	cdplt	0, 0, cr0, cr12, cr0, {0}
    1c0c:	00000000 	andeq	r0, r0, r0
    1c10:	01340405 	teqeq	r4, r5, lsl #8
    1c14:	590d0000 	stmdbpl	sp, {}	; <UNPREDICTABLE>
    1c18:	0c000001 	stceq	0, cr0, [r0], {1}
    1c1c:	000000be 	strheq	r0, [r0], -lr
    1c20:	0000a80c 	andeq	sl, r0, ip, lsl #16
    1c24:	04050000 	streq	r0, [r5], #-0
    1c28:	00000149 	andeq	r0, r0, r9, asr #2
    1c2c:	bb04080a 	bllt	103c5c <_Min_Stack_Size+0x103a5c>
    1c30:	00000180 	andeq	r0, r0, r0, lsl #3
    1c34:	0008eb08 	andeq	lr, r8, r8, lsl #22
    1c38:	85bd0400 	ldrhi	r0, [sp, #1024]!	; 0x400
    1c3c:	00000001 	andeq	r0, r0, r1
    1c40:	000a1208 	andeq	r1, sl, r8, lsl #4
    1c44:	96be0400 	ldrtls	r0, [lr], r0, lsl #8
    1c48:	04000001 	streq	r0, [r0], #-1
    1c4c:	00a80e00 	adceq	r0, r8, r0, lsl #28
    1c50:	04050000 	streq	r0, [r5], #-0
    1c54:	00000180 	andeq	r0, r0, r0, lsl #3
    1c58:	0001960d 	andeq	r9, r1, sp, lsl #12
    1c5c:	00a80c00 	adceq	r0, r8, r0, lsl #24
    1c60:	05000000 	streq	r0, [r0, #-0]
    1c64:	00018b04 	andeq	r8, r1, r4, lsl #22
    1c68:	495f0f00 	ldmdbmi	pc, {r8, r9, sl, fp}^	; <UNPREDICTABLE>
    1c6c:	04080046 	streq	r0, [r8], #-70	; 0xffffffba
    1c70:	0001bfae 	andeq	fp, r1, lr, lsr #31
    1c74:	55421000 	strbpl	r1, [r2, #-0]
    1c78:	b7040053 	smlsdlt	r4, r3, r0, r0
    1c7c:	00000113 	andeq	r0, r0, r3, lsl r1
    1c80:	49505310 	ldmdbmi	r0, {r4, r8, r9, ip, lr}^
    1c84:	5fbf0400 	svcpl	0x00bf0400
    1c88:	00000001 	andeq	r0, r0, r1
    1c8c:	00073507 	andeq	r3, r7, r7, lsl #10
    1c90:	97042000 	strls	r2, [r4, -r0]
    1c94:	00000205 	andeq	r0, r0, r5, lsl #4
    1c98:	000b5808 	andeq	r5, fp, r8, lsl #16
    1c9c:	b3990400 	orrslt	r0, r9, #0, 8
    1ca0:	00000000 	andeq	r0, r0, r0
    1ca4:	00646911 	rsbeq	r6, r4, r1, lsl r9
    1ca8:	02059a04 	andeq	r9, r5, #4, 20	; 0x4000
    1cac:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1cb0:	00000b24 	andeq	r0, r0, r4, lsr #22
    1cb4:	00c9a204 	sbceq	sl, r9, r4, lsl #4
    1cb8:	11080000 	mrsne	r0, (UNDEF: 8)
    1cbc:	04005343 	streq	r5, [r0], #-835	; 0xfffffcbd
    1cc0:	0000eeaa 	andeq	lr, r0, sl, lsr #29
    1cc4:	49111000 	ldmdbmi	r1, {ip}
    1cc8:	c2040046 	andgt	r0, r4, #70	; 0x46
    1ccc:	0000019c 	muleq	r0, ip, r1
    1cd0:	a8120018 	ldmdage	r2, {r3, r4}
    1cd4:	15000000 	strne	r0, [r0, #-0]
    1cd8:	13000002 	movwne	r0, #2
    1cdc:	00000093 	muleq	r0, r3, r0
    1ce0:	a3030005 	movwge	r0, #12293	; 0x3005
    1ce4:	04000008 	streq	r0, [r0], #-8
    1ce8:	0001bfc3 	andeq	fp, r1, r3, asr #31
    1cec:	0d5f1400 	cfldrdeq	mvd1, [pc, #-0]	; 1cf4 <_Min_Stack_Size+0x1af4>
    1cf0:	34010000 	strcc	r0, [r1], #-0
    1cf4:	000000a8 	andeq	r0, r0, r8, lsr #1
    1cf8:	08003218 	stmdaeq	r0, {r3, r4, r9, ip, sp}
    1cfc:	00000060 	andeq	r0, r0, r0, rrx
    1d00:	02569c01 	subseq	r9, r6, #256	; 0x100
    1d04:	fd150000 	ldc2	0, cr0, [r5, #-0]
    1d08:	0100000b 	tsteq	r0, fp
    1d0c:	0000be34 	andeq	fp, r0, r4, lsr lr
    1d10:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1d14:	74657216 	strbtvc	r7, [r5], #-534	; 0xfffffdea
    1d18:	a8360100 	ldmdage	r6!, {r8}
    1d1c:	02000000 	andeq	r0, r0, #0
    1d20:	17007791 			; <UNDEFINED> instruction: 0x17007791
    1d24:	00000df1 	strdeq	r0, [r0], -r1
    1d28:	32785c01 	rsbscc	r5, r8, #256	; 0x100
    1d2c:	006c0800 	rsbeq	r0, ip, r0, lsl #16
    1d30:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d34:	00000287 	andeq	r0, r0, r7, lsl #5
    1d38:	000bfd15 	andeq	pc, fp, r5, lsl sp	; <UNPREDICTABLE>
    1d3c:	be5c0100 	rdflte	f0, f4, f0
    1d40:	02000000 	andeq	r0, r0, #0
    1d44:	77187491 			; <UNDEFINED> instruction: 0x77187491
    1d48:	5c010062 	stcpl	0, cr0, [r1], {98}	; 0x62
    1d4c:	000000a8 	andeq	r0, r0, r8, lsr #1
    1d50:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1d54:	000d9617 	andeq	r9, sp, r7, lsl r6
    1d58:	e4810100 	str	r0, [r1], #256	; 0x100
    1d5c:	88080032 	stmdahi	r8, {r1, r4, r5}
    1d60:	01000000 	mrseq	r0, (UNDEF: 0)
    1d64:	0002df9c 	muleq	r2, ip, pc	; <UNPREDICTABLE>
    1d68:	0bfd1500 	bleq	fff47170 <BootRAM+0xeeb7911>
    1d6c:	81010000 	mrshi	r0, (UNDEF: 1)
    1d70:	000000be 	strheq	r0, [r0], -lr
    1d74:	15649102 	strbne	r9, [r4, #-258]!	; 0xfffffefe
    1d78:	00000d5a 	andeq	r0, r0, sl, asr sp
    1d7c:	02df8101 	sbcseq	r8, pc, #1073741824	; 0x40000000
    1d80:	91020000 	mrsls	r0, (UNDEF: 2)
    1d84:	656c1860 	strbvs	r1, [ip, #-2144]!	; 0xfffff7a0
    1d88:	8101006e 	tsthi	r1, lr, rrx
    1d8c:	000000b3 	strheq	r0, [r0], -r3
    1d90:	165e9102 	ldrbne	r9, [lr], -r2, lsl #2
    1d94:	83010069 	movwhi	r0, #4201	; 0x1069
    1d98:	000000b3 	strheq	r0, [r0], -r3
    1d9c:	166e9102 	strbtne	r9, [lr], -r2, lsl #2
    1da0:	8401006a 	strhi	r0, [r1], #-106	; 0xffffff96
    1da4:	000000b3 	strheq	r0, [r0], -r3
    1da8:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1dac:	00a80405 	adceq	r0, r8, r5, lsl #8
    1db0:	3a170000 	bcc	5c1db8 <_Min_Stack_Size+0x5c1bb8>
    1db4:	0100000d 	tsteq	r0, sp
    1db8:	00336cce 	eorseq	r6, r3, lr, asr #25
    1dbc:	00009008 	andeq	r9, r0, r8
    1dc0:	3d9c0100 	ldfccs	f0, [ip]
    1dc4:	15000003 	strne	r0, [r0, #-3]
    1dc8:	00000bfd 	strdeq	r0, [r0], -sp
    1dcc:	00bece01 	adcseq	ip, lr, r1, lsl #28
    1dd0:	91020000 	mrsls	r0, (UNDEF: 2)
    1dd4:	0d5a156c 	cfldr64eq	mvdx1, [sl, #-432]	; 0xfffffe50
    1dd8:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    1ddc:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1de0:	18689102 	stmdane	r8!, {r1, r8, ip, pc}^
    1de4:	006e656c 	rsbeq	r6, lr, ip, ror #10
    1de8:	00b3ce01 	adcseq	ip, r3, r1, lsl #28
    1dec:	91020000 	mrsls	r0, (UNDEF: 2)
    1df0:	00691666 	rsbeq	r1, r9, r6, ror #12
    1df4:	00b3d001 	adcseq	sp, r3, r1
    1df8:	91020000 	mrsls	r0, (UNDEF: 2)
    1dfc:	006a1676 	rsbeq	r1, sl, r6, ror r6
    1e00:	00b3d101 	adcseq	sp, r3, r1, lsl #2
    1e04:	91020000 	mrsls	r0, (UNDEF: 2)
    1e08:	6c190074 	ldcvs	0, cr0, [r9], {116}	; 0x74
    1e0c:	0100000d 	tsteq	r0, sp
    1e10:	00b3011c 	adcseq	r0, r3, ip, lsl r1
    1e14:	33fc0000 	mvnscc	r0, #0
    1e18:	00960800 	addseq	r0, r6, r0, lsl #16
    1e1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e20:	00000384 	andeq	r0, r0, r4, lsl #7
    1e24:	006e731a 	rsbeq	r7, lr, sl, lsl r3
    1e28:	a8011c01 	stmdage	r1, {r0, sl, fp, ip}
    1e2c:	02000000 	andeq	r0, r0, #0
    1e30:	761b6791 			; <UNDEFINED> instruction: 0x761b6791
    1e34:	01006c61 	tsteq	r0, r1, ror #24
    1e38:	00b3011e 	adcseq	r0, r3, lr, lsl r1
    1e3c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e40:	0d791c6e 	ldcleq	12, cr1, [r9, #-440]!	; 0xfffffe48
    1e44:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    1e48:	0000b301 	andeq	fp, r0, r1, lsl #6
    1e4c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1e50:	0da71900 			; <UNDEFINED> instruction: 0x0da71900
    1e54:	2d010000 	stccs	0, cr0, [r1, #-0]
    1e58:	0000b301 	andeq	fp, r0, r1, lsl #6
    1e5c:	00349400 	eorseq	r9, r4, r0, lsl #8
    1e60:	00009608 	andeq	r9, r0, r8, lsl #12
    1e64:	cb9c0100 	blgt	fe70226c <BootRAM+0xd672a0d>
    1e68:	1a000003 	bne	1e7c <_Min_Stack_Size+0x1c7c>
    1e6c:	01006e73 	tsteq	r0, r3, ror lr
    1e70:	00a8012d 	adceq	r0, r8, sp, lsr #2
    1e74:	91020000 	mrsls	r0, (UNDEF: 2)
    1e78:	61761b67 	cmnvs	r6, r7, ror #22
    1e7c:	2f01006c 	svccs	0x0001006c
    1e80:	0000b301 	andeq	fp, r0, r1, lsl #6
    1e84:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    1e88:	000d791c 	andeq	r7, sp, ip, lsl r9
    1e8c:	012f0100 			; <UNDEFINED> instruction: 0x012f0100
    1e90:	000000b3 	strheq	r0, [r0], -r3
    1e94:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1e98:	000de31d 	andeq	lr, sp, sp, lsl r3
    1e9c:	013d0100 	teqeq	sp, r0, lsl #2
    1ea0:	0800352c 	stmdaeq	r0, {r2, r3, r5, r8, sl, ip, sp}
    1ea4:	000000b8 	strheq	r0, [r0], -r8
    1ea8:	042c9c01 	strteq	r9, [ip], #-3073	; 0xfffff3ff
    1eac:	731a0000 	tstvc	sl, #0
    1eb0:	3d01006e 	stccc	0, cr0, [r1, #-440]	; 0xfffffe48
    1eb4:	0000a801 	andeq	sl, r0, r1, lsl #16
    1eb8:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
    1ebc:	000d7e1e 	andeq	r7, sp, lr, lsl lr
    1ec0:	013d0100 	teqeq	sp, r0, lsl #2
    1ec4:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1ec8:	1a609102 	bne	18262d8 <_Min_Stack_Size+0x18260d8>
    1ecc:	006e656c 	rsbeq	r6, lr, ip, ror #10
    1ed0:	b3013d01 	movwlt	r3, #7425	; 0x1d01
    1ed4:	02000000 	andeq	r0, r0, #0
    1ed8:	701b6491 	mulsvc	fp, r1, r4
    1edc:	01007274 	tsteq	r0, r4, ror r2
    1ee0:	00b3013f 	adcseq	r0, r3, pc, lsr r1
    1ee4:	91020000 	mrsls	r0, (UNDEF: 2)
    1ee8:	0d321c6e 	ldceq	12, cr1, [r2, #-440]!	; 0xfffffe48
    1eec:	40010000 	andmi	r0, r1, r0
    1ef0:	0000be01 	andeq	fp, r0, r1, lsl #28
    1ef4:	68910200 	ldmvs	r1, {r9}
    1ef8:	0d4c1d00 	stcleq	13, cr1, [ip, #-0]
    1efc:	4b010000 	blmi	41f04 <_Min_Stack_Size+0x41d04>
    1f00:	0035e401 	eorseq	lr, r5, r1, lsl #8
    1f04:	0000b808 	andeq	fp, r0, r8, lsl #16
    1f08:	8d9c0100 	ldfhis	f0, [ip]
    1f0c:	1a000004 	bne	1f24 <_Min_Stack_Size+0x1d24>
    1f10:	01006e73 	tsteq	r0, r3, ror lr
    1f14:	00a8014b 	adceq	r0, r8, fp, asr #2
    1f18:	91020000 	mrsls	r0, (UNDEF: 2)
    1f1c:	0d7e1e67 	ldcleq	14, cr1, [lr, #-412]!	; 0xfffffe64
    1f20:	4b010000 	blmi	41f28 <_Min_Stack_Size+0x41d28>
    1f24:	0002df01 	andeq	sp, r2, r1, lsl #30
    1f28:	60910200 	addsvs	r0, r1, r0, lsl #4
    1f2c:	6e656c1a 	mcrvs	12, 3, r6, cr5, cr10, {0}
    1f30:	014b0100 	mrseq	r0, (UNDEF: 91)
    1f34:	000000b3 	strheq	r0, [r0], -r3
    1f38:	1b649102 	blne	1926348 <_Min_Stack_Size+0x1926148>
    1f3c:	00727470 	rsbseq	r7, r2, r0, ror r4
    1f40:	b3014d01 	movwlt	r4, #7425	; 0x1d01
    1f44:	02000000 	andeq	r0, r0, #0
    1f48:	321c6e91 	andscc	r6, ip, #2320	; 0x910
    1f4c:	0100000d 	tsteq	r0, sp
    1f50:	00be014e 	adcseq	r0, lr, lr, asr #2
    1f54:	91020000 	mrsls	r0, (UNDEF: 2)
    1f58:	861d0068 	ldrhi	r0, [sp], -r8, rrx
    1f5c:	0100000d 	tsteq	r0, sp
    1f60:	369c015b 			; <UNDEFINED> instruction: 0x369c015b
    1f64:	00900800 	addseq	r0, r0, r0, lsl #16
    1f68:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f6c:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1f70:	006e731a 	rsbeq	r7, lr, sl, lsl r3
    1f74:	a8015b01 	stmdage	r1, {r0, r8, r9, fp, ip, lr}
    1f78:	02000000 	andeq	r0, r0, #0
    1f7c:	6c1a6791 	ldcvs	7, cr6, [sl], {145}	; 0x91
    1f80:	01006e65 	tsteq	r0, r5, ror #28
    1f84:	00b3015b 	adcseq	r0, r3, fp, asr r1
    1f88:	91020000 	mrsls	r0, (UNDEF: 2)
    1f8c:	74701b64 	ldrbtvc	r1, [r0], #-2916	; 0xfffff49c
    1f90:	5d010072 	stcpl	0, cr0, [r1, #-456]	; 0xfffffe38
    1f94:	0000b301 	andeq	fp, r0, r1, lsl #6
    1f98:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    1f9c:	08a41f00 	stmiaeq	r4!, {r8, r9, sl, fp, ip}
    1fa0:	c5040000 	strgt	r0, [r4, #-0]
    1fa4:	00000215 	andeq	r0, r0, r5, lsl r2
    1fa8:	00093200 	andeq	r3, r9, r0, lsl #4
    1fac:	48000400 	stmdami	r0, {sl}
    1fb0:	04000008 	streq	r0, [r0], #-8
    1fb4:	00011101 	andeq	r1, r1, r1, lsl #2
    1fb8:	14600c00 	strbtne	r0, [r0], #-3072	; 0xfffff400
    1fbc:	036e0000 	cmneq	lr, #0
    1fc0:	02380000 	eorseq	r0, r8, #0
    1fc4:	00000000 	andeq	r0, r0, r0
    1fc8:	10670000 	rsbne	r0, r7, r0
    1fcc:	b3020000 	movwlt	r0, #8192	; 0x2000
    1fd0:	02000004 	andeq	r0, r0, #4
    1fd4:	0000301b 	andeq	r3, r0, fp, lsl r0
    1fd8:	06010300 	streq	r0, [r1], -r0, lsl #6
    1fdc:	00000192 	muleq	r0, r2, r1
    1fe0:	0000e302 	andeq	lr, r0, r2, lsl #6
    1fe4:	421d0200 	andsmi	r0, sp, #0, 4
    1fe8:	03000000 	movweq	r0, #0
    1fec:	01900801 	orrseq	r0, r0, r1, lsl #16
    1ff0:	02030000 	andeq	r0, r3, #0
    1ff4:	00009505 	andeq	r9, r0, r5, lsl #10
    1ff8:	00720200 	rsbseq	r0, r2, r0, lsl #4
    1ffc:	2b020000 	blcs	82004 <_Min_Stack_Size+0x81e04>
    2000:	0000005b 	andeq	r0, r0, fp, asr r0
    2004:	f2070203 	vhsub.s8	d0, d7, d3
    2008:	02000001 	andeq	r0, r0, #1
    200c:	0000066f 	andeq	r0, r0, pc, ror #12
    2010:	006d3f02 	rsbeq	r3, sp, r2, lsl #30
    2014:	04030000 	streq	r0, [r3], #-0
    2018:	0000bd05 	andeq	fp, r0, r5, lsl #26
    201c:	00670200 	rsbeq	r0, r7, r0, lsl #4
    2020:	41020000 	mrsmi	r0, (UNDEF: 2)
    2024:	0000007f 	andeq	r0, r0, pc, ror r0
    2028:	c9070403 	stmdbgt	r7, {r0, r1, sl}
    202c:	03000001 	movweq	r0, #1
    2030:	00b80508 	adcseq	r0, r8, r8, lsl #10
    2034:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2038:	0001c407 	andeq	ip, r1, r7, lsl #8
    203c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    2040:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2044:	ce070403 	cdpgt	4, 0, cr0, cr7, cr3, {0}
    2048:	03000001 	movweq	r0, #1
    204c:	02f80408 	rscseq	r0, r8, #8, 8	; 0x8000000
    2050:	04030000 	streq	r0, [r3], #-0
    2054:	00005907 	andeq	r5, r0, r7, lsl #18
    2058:	b6040500 	strlt	r0, [r4], -r0, lsl #10
    205c:	06000000 	streq	r0, [r0], -r0
    2060:	99080103 	stmdbls	r8, {r0, r1, r8}
    2064:	02000001 	andeq	r0, r0, #1
    2068:	000004b5 			; <UNDEFINED> instruction: 0x000004b5
    206c:	00251403 	eoreq	r1, r5, r3, lsl #8
    2070:	e5020000 	str	r0, [r2, #-0]
    2074:	03000000 	movweq	r0, #0
    2078:	00003718 	andeq	r3, r0, r8, lsl r7
    207c:	00740200 	rsbseq	r0, r4, r0, lsl #4
    2080:	24030000 	strcs	r0, [r3], #-0
    2084:	00000050 	andeq	r0, r0, r0, asr r0
    2088:	00067102 	andeq	r7, r6, r2, lsl #2
    208c:	622c0300 	eorvs	r0, ip, #0, 6
    2090:	02000000 	andeq	r0, r0, #0
    2094:	00000069 	andeq	r0, r0, r9, rrx
    2098:	00743003 	rsbseq	r3, r4, r3
    209c:	c9070000 	stmdbgt	r7, {}	; <UNPREDICTABLE>
    20a0:	05000000 	streq	r0, [r0, #-0]
    20a4:	08000001 	stmdaeq	r0, {r0}
    20a8:	000000a9 	andeq	r0, r0, r9, lsr #1
    20ac:	c9070005 	stmdbgt	r7, {r0, r2}
    20b0:	15000000 	strne	r0, [r0, #-0]
    20b4:	08000001 	stmdaeq	r0, {r0}
    20b8:	000000a9 	andeq	r0, r0, r9, lsr #1
    20bc:	01090003 	tsteq	r9, r3
    20c0:	00000042 	andeq	r0, r0, r2, asr #32
    20c4:	01403f04 	cmpeq	r0, r4, lsl #30
    20c8:	490a0000 	stmdbmi	sl, {}	; <UNPREDICTABLE>
    20cc:	0000000e 	andeq	r0, r0, lr
    20d0:	0014100a 	andseq	r1, r4, sl
    20d4:	d90a0100 	stmdble	sl, {r8}
    20d8:	0200000e 	andeq	r0, r0, #14
    20dc:	0013c40a 	andseq	ip, r3, sl, lsl #8
    20e0:	9a0a0300 	bls	282ce8 <_Min_Stack_Size+0x282ae8>
    20e4:	0400000e 	streq	r0, [r0], #-14
    20e8:	42010900 	andmi	r0, r1, #0, 18
    20ec:	04000000 	streq	r0, [r0], #-0
    20f0:	0002c749 	andeq	ip, r2, r9, asr #14
    20f4:	14060a00 	strne	r0, [r6], #-2560	; 0xfffff600
    20f8:	0a000000 	beq	2100 <_Min_Stack_Size+0x1f00>
    20fc:	00000f8c 	andeq	r0, r0, ip, lsl #31
    2100:	12140a01 	andsne	r0, r4, #4096	; 0x1000
    2104:	0a020000 	beq	8210c <_Min_Stack_Size+0x81f0c>
    2108:	000012b6 			; <UNDEFINED> instruction: 0x000012b6
    210c:	0e660a03 	vmuleq.f32	s1, s12, s6
    2110:	0a040000 	beq	102118 <_Min_Stack_Size+0x101f18>
    2114:	000013fb 	strdeq	r1, [r0], -fp
    2118:	6e640b05 	vmulvs.f64	d16, d4, d5
    211c:	0a060073 	beq	1822f0 <_Min_Stack_Size+0x1820f0>
    2120:	00000ec3 	andeq	r0, r0, r3, asr #29
    2124:	117f0a07 	cmnne	pc, r7, lsl #20
    2128:	0a080000 	beq	202130 <_Min_Stack_Size+0x201f30>
    212c:	000011f0 	strdeq	r1, [r0], -r0
    2130:	10740a09 	rsbsne	r0, r4, r9, lsl #20
    2134:	0a0a0000 	beq	28213c <_Min_Stack_Size+0x281f3c>
    2138:	00001362 	andeq	r1, r0, r2, ror #6
    213c:	0e1c0a0b 	vnmlseq.f32	s0, s24, s22
    2140:	0a0c0000 	beq	302148 <_Min_Stack_Size+0x301f48>
    2144:	000013e7 	andeq	r1, r0, r7, ror #7
    2148:	0f650a0d 	svceq	0x00650a0d
    214c:	0a0e0000 	beq	382154 <_Min_Stack_Size+0x381f54>
    2150:	000010fd 	strdeq	r1, [r0], -sp
    2154:	127b0a0f 	rsbsne	r0, fp, #61440	; 0xf000
    2158:	0a100000 	beq	402160 <_Min_Stack_Size+0x401f60>
    215c:	000013bb 			; <UNDEFINED> instruction: 0x000013bb
    2160:	10440a11 	subne	r0, r4, r1, lsl sl
    2164:	0a120000 	beq	48216c <_Min_Stack_Size+0x481f6c>
    2168:	000010aa 	andeq	r1, r0, sl, lsr #1
    216c:	102e0a13 	eorne	r0, lr, r3, lsl sl
    2170:	0a140000 	beq	502178 <_Min_Stack_Size+0x501f78>
    2174:	00000f7f 	andeq	r0, r0, pc, ror pc
    2178:	0fb60a15 	svceq	0x00b60a15
    217c:	0a160000 	beq	582184 <_Min_Stack_Size+0x581f84>
    2180:	000010e8 	andeq	r1, r0, r8, ror #1
    2184:	10820a17 	addne	r0, r2, r7, lsl sl
    2188:	0a180000 	beq	602190 <_Min_Stack_Size+0x601f90>
    218c:	0000143c 	andeq	r1, r0, ip, lsr r4
    2190:	10960a19 	addsne	r0, r6, r9, lsl sl
    2194:	0a1a0000 	beq	68219c <_Min_Stack_Size+0x681f9c>
    2198:	0000122a 	andeq	r1, r0, sl, lsr #4
    219c:	10530a1b 	subsne	r0, r3, fp, lsl sl
    21a0:	0a1c0000 	beq	7021a8 <_Min_Stack_Size+0x701fa8>
    21a4:	000011db 	ldrdeq	r1, [r0], -fp
    21a8:	11be0a1d 			; <UNDEFINED> instruction: 0x11be0a1d
    21ac:	0a1e0000 	beq	7821b4 <_Min_Stack_Size+0x781fb4>
    21b0:	00000ffa 	strdeq	r0, [r0], -sl
    21b4:	0f050a1f 	svceq	0x00050a1f
    21b8:	0a200000 	beq	8021c0 <_Min_Stack_Size+0x801fc0>
    21bc:	0000112c 	andeq	r1, r0, ip, lsr #2
    21c0:	0e850a21 	vdiveq.f32	s0, s10, s3
    21c4:	0a220000 	beq	8821cc <_Min_Stack_Size+0x881fcc>
    21c8:	00001386 	andeq	r1, r0, r6, lsl #7
    21cc:	12c60a23 	sbcne	r0, r6, #143360	; 0x23000
    21d0:	0a240000 	beq	9021d8 <_Min_Stack_Size+0x901fd8>
    21d4:	00000fec 	andeq	r0, r0, ip, ror #31
    21d8:	10d30a25 	sbcsne	r0, r3, r5, lsr #20
    21dc:	0a260000 	beq	9821e4 <_Min_Stack_Size+0x981fe4>
    21e0:	0000123a 	andeq	r1, r0, sl, lsr r2
    21e4:	0f430a27 	svceq	0x00430a27
    21e8:	0a280000 	beq	a021f0 <_Min_Stack_Size+0xa01ff0>
    21ec:	00001270 	andeq	r1, r0, r0, ror r2
    21f0:	12860a29 	addne	r0, r6, #167936	; 0x29000
    21f4:	0a2a0000 	beq	a821fc <_Min_Stack_Size+0xa81ffc>
    21f8:	00001156 	andeq	r1, r0, r6, asr r1
    21fc:	13f40a2b 	mvnsne	r0, #176128	; 0x2b000
    2200:	0a2c0000 	beq	b02208 <_Min_Stack_Size+0xb02008>
    2204:	00001138 	andeq	r1, r0, r8, lsr r1
    2208:	0f970a2d 	svceq	0x00970a2d
    220c:	0a2e0000 	beq	b82214 <_Min_Stack_Size+0xb82014>
    2210:	00000e25 	andeq	r0, r0, r5, lsr #28
    2214:	116e0a2f 	cmnne	lr, pc, lsr #20
    2218:	0a300000 	beq	c02220 <_Min_Stack_Size+0xc02020>
    221c:	000012e8 	andeq	r1, r0, r8, ror #5
    2220:	0ea70a31 			; <UNDEFINED> instruction: 0x0ea70a31
    2224:	0a320000 	beq	c8222c <_Min_Stack_Size+0xc8202c>
    2228:	00000e71 	andeq	r0, r0, r1, ror lr
    222c:	10610a33 	rsbne	r0, r1, r3, lsr sl
    2230:	0a340000 	beq	d02238 <_Min_Stack_Size+0xd02038>
    2234:	0000148d 	andeq	r1, r0, sp, lsl #9
    2238:	139f0a35 	orrsne	r0, pc, #217088	; 0x35000
    223c:	0a360000 	beq	d82244 <_Min_Stack_Size+0xd82044>
    2240:	0000125f 	andeq	r1, r0, pc, asr r2
    2244:	118c0a37 	orrne	r0, ip, r7, lsr sl
    2248:	0a380000 	beq	e02250 <_Min_Stack_Size+0xe02050>
    224c:	00000fa7 	andeq	r0, r0, r7, lsr #31
    2250:	0f590a39 	svceq	0x00590a39
    2254:	0a3a0000 	beq	e8225c <_Min_Stack_Size+0xe8205c>
    2258:	000012dc 	ldrdeq	r1, [r0], -ip
    225c:	0f260a3b 	svceq	0x00260a3b
    2260:	0a3c0000 	beq	f02268 <_Min_Stack_Size+0xf02068>
    2264:	00000ef0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2268:	11220a3d 			; <UNDEFINED> instruction: 0x11220a3d
    226c:	00ff0000 	rscseq	r0, pc, r0
    2270:	0402240c 	streq	r2, [r2], #-1036	; 0xfffffbf4
    2274:	0003848b 	andeq	r8, r3, fp, lsl #9
    2278:	706f0d00 	rsbvc	r0, pc, r0, lsl #26
    227c:	c98c0400 	stmibgt	ip, {sl}
    2280:	00000000 	andeq	r0, r0, r0
    2284:	000e550e 	andeq	r5, lr, lr, lsl #10
    2288:	c98d0400 	stmibgt	sp, {sl}
    228c:	01000000 	mrseq	r0, (UNDEF: 0)
    2290:	000ed40e 	andeq	sp, lr, lr, lsl #8
    2294:	c98e0400 	stmibgt	lr, {sl}
    2298:	02000000 	andeq	r0, r0, #0
    229c:	000e440e 	andeq	r4, lr, lr, lsl #8
    22a0:	c98f0400 	stmibgt	pc, {sl}	; <UNPREDICTABLE>
    22a4:	03000000 	movweq	r0, #0
    22a8:	6469780d 	strbtvs	r7, [r9], #-2061	; 0xfffff7f3
    22ac:	ea900400 	b	fe4032b4 <BootRAM+0xd373a55>
    22b0:	04000000 	streq	r0, [r0], #-0
    22b4:	00117a0e 	andseq	r7, r1, lr, lsl #20
    22b8:	d4910400 	ldrle	r0, [r1], #1024	; 0x400
    22bc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    22c0:	00563d0e 	subseq	r3, r6, lr, lsl #26
    22c4:	d4920400 	ldrle	r0, [r2], #1024	; 0x400
    22c8:	0a000000 	beq	22d0 <_Min_Stack_Size+0x20d0>
    22cc:	000ecd0e 	andeq	ip, lr, lr, lsl #26
    22d0:	05930400 	ldreq	r0, [r3, #1024]	; 0x400
    22d4:	0c000001 	stceq	0, cr0, [r0], {1}
    22d8:	00114f0e 	andseq	r4, r1, lr, lsl #30
    22dc:	05940400 	ldreq	r0, [r4, #1024]	; 0x400
    22e0:	10000001 	andne	r0, r0, r1
    22e4:	0013b40e 	andseq	fp, r3, lr, lsl #8
    22e8:	05950400 	ldreq	r0, [r5, #1024]	; 0x400
    22ec:	14000001 	strne	r0, [r0], #-1
    22f0:	0011d40e 	andseq	sp, r1, lr, lsl #8
    22f4:	05960400 	ldreq	r0, [r6, #1024]	; 0x400
    22f8:	18000001 	stmdane	r0, {r0}
    22fc:	000ee90e 	andeq	lr, lr, lr, lsl #18
    2300:	84970400 	ldrhi	r0, [r7], #1024	; 0x400
    2304:	1c000003 	stcne	0, cr0, [r0], {3}
    2308:	00145a0e 	andseq	r5, r4, lr, lsl #20
    230c:	94980400 	ldrls	r0, [r8], #1024	; 0x400
    2310:	2c000003 	stccs	0, cr0, [r0], {3}
    2314:	0058cf0e 	subseq	ip, r8, lr, lsl #30
    2318:	a4990400 	ldrge	r0, [r9], #1024	; 0x400
    231c:	6c000003 	stcvs	0, cr0, [r0], {3}
    2320:	54504f0d 	ldrbpl	r4, [r0], #-3853	; 0xfffff0f3
    2324:	b49a0400 	ldrlt	r0, [sl], #1024	; 0x400
    2328:	ec000003 	stc	0, cr0, [r0], {3}
    232c:	00c90700 	sbceq	r0, r9, r0, lsl #14
    2330:	03940000 	orrseq	r0, r4, #0
    2334:	a9080000 	stmdbge	r8, {}	; <UNPREDICTABLE>
    2338:	0f000000 	svceq	0x00000000
    233c:	00c90700 	sbceq	r0, r9, r0, lsl #14
    2340:	03a40000 			; <UNDEFINED> instruction: 0x03a40000
    2344:	a9080000 	stmdbge	r8, {}	; <UNPREDICTABLE>
    2348:	3f000000 	svccc	0x00000000
    234c:	00c90700 	sbceq	r0, r9, r0, lsl #14
    2350:	03b40000 			; <UNDEFINED> instruction: 0x03b40000
    2354:	a9080000 	stmdbge	r8, {}	; <UNPREDICTABLE>
    2358:	7f000000 	svcvc	0x00000000
    235c:	00c90700 	sbceq	r0, r9, r0, lsl #14
    2360:	03c50000 	biceq	r0, r5, #0
    2364:	a90f0000 	stmdbge	pc, {}	; <UNPREDICTABLE>
    2368:	37000000 	strcc	r0, [r0, -r0]
    236c:	f5020001 			; <UNDEFINED> instruction: 0xf5020001
    2370:	04000010 	streq	r0, [r0], #-16
    2374:	0002c79b 	muleq	r2, fp, r7
    2378:	11fa1000 	mvnsne	r1, r0
    237c:	04040000 	streq	r0, [r4], #-0
    2380:	0003f39d 	muleq	r3, sp, r3
    2384:	11691100 	cmnne	r9, r0, lsl #2
    2388:	9e040000 	cdpls	0, 0, cr0, cr4, cr0, {0}
    238c:	000000ea 	andeq	r0, r0, sl, ror #1
    2390:	00102911 	andseq	r2, r0, r1, lsl r9
    2394:	059f0400 	ldreq	r0, [pc, #1024]	; 279c <_Min_Stack_Size+0x259c>
    2398:	00000001 	andeq	r0, r0, r1
    239c:	0011fb02 	andseq	pc, r1, r2, lsl #22
    23a0:	d0a00400 	adcle	r0, r0, r0, lsl #8
    23a4:	12000003 	andne	r0, r0, #3
    23a8:	0000120a 	andeq	r1, r0, sl, lsl #4
    23ac:	372c4b01 	strcc	r4, [ip, -r1, lsl #22]!
    23b0:	000c0800 	andeq	r0, ip, r0, lsl #16
    23b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    23b8:	00101613 	andseq	r1, r0, r3, lsl r6
    23bc:	384d0100 	stmdacc	sp, {r8}^
    23c0:	28080037 	stmdacs	r8, {r0, r1, r2, r4, r5}
    23c4:	01000000 	mrseq	r0, (UNDEF: 0)
    23c8:	1253139c 	subsne	r1, r3, #156, 6	; 0x70000002
    23cc:	55010000 	strpl	r0, [r1, #-0]
    23d0:	08003760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip, sp}
    23d4:	00000048 	andeq	r0, r0, r8, asr #32
    23d8:	ab149c01 	blge	5293e4 <_Min_Stack_Size+0x5291e4>
    23dc:	01000011 	tsteq	r0, r1, lsl r0
    23e0:	0037a876 	eorseq	sl, r7, r6, ror r8
    23e4:	0004c808 	andeq	ip, r4, r8, lsl #16
    23e8:	6c9c0100 	ldfvss	f0, [ip], {0}
    23ec:	15000004 	strne	r0, [r0, #-4]
    23f0:	78010069 	stmdavc	r1, {r0, r3, r5, r6}
    23f4:	000000d4 	ldrdeq	r0, [r0], -r4
    23f8:	15769102 	ldrbne	r9, [r6, #-258]!	; 0xfffffefe
    23fc:	01007069 	tsteq	r0, r9, rrx
    2400:	00010579 	andeq	r0, r1, r9, ror r5
    2404:	70910200 	addsvc	r0, r1, r0, lsl #4
    2408:	01006b15 	tsteq	r0, r5, lsl fp
    240c:	0000d47a 	andeq	sp, r0, sl, ror r4
    2410:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2414:	0fc81400 	svceq	0x00c81400
    2418:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    241c:	08003c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, ip, sp}
    2420:	00000638 	andeq	r0, r0, r8, lsr r6
    2424:	04c39c01 	strbeq	r9, [r3], #3073	; 0xc01
    2428:	43160000 	tstmi	r6, #0
    242c:	01007069 	tsteq	r0, r9, rrx
    2430:	0004c3e8 	andeq	ip, r4, r8, ror #7
    2434:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2438:	0054b817 	subseq	fp, r4, r7, lsl r8
    243c:	c3e80100 	mvngt	r0, #0, 2
    2440:	02000004 	andeq	r0, r0, #4
    2444:	69156091 	ldmdbvs	r5, {r0, r4, r7, sp, lr}
    2448:	94ea0100 	strbtls	r0, [sl], #256	; 0x100
    244c:	02000000 	andeq	r0, r0, #0
    2450:	69157491 	ldmdbvs	r5, {r0, r4, r7, sl, ip, sp, lr}
    2454:	eb010070 	bl	4261c <_Min_Stack_Size+0x4241c>
    2458:	00000105 	andeq	r0, r0, r5, lsl #2
    245c:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    2460:	ec01006b 	stc	0, cr0, [r1], {107}	; 0x6b
    2464:	000000d4 	ldrdeq	r0, [r0], -r4
    2468:	00729102 	rsbseq	r9, r2, r2, lsl #2
    246c:	00c90405 	sbceq	r0, r9, r5, lsl #8
    2470:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    2474:	01000011 	tsteq	r0, r1, lsl r0
    2478:	42a8016c 	adcmi	r0, r8, #108, 2
    247c:	043c0800 	ldrteq	r0, [ip], #-2048	; 0xfffff800
    2480:	9c010000 	stcls	0, cr0, [r1], {-0}
    2484:	00000508 	andeq	r0, r0, r8, lsl #10
    2488:	01006919 	tsteq	r0, r9, lsl r9
    248c:	0094016e 	addseq	r0, r4, lr, ror #2
    2490:	91020000 	mrsls	r0, (UNDEF: 2)
    2494:	70691974 	rsbvc	r1, r9, r4, ror r9
    2498:	016f0100 	cmneq	pc, r0, lsl #2
    249c:	00000105 	andeq	r0, r0, r5, lsl #2
    24a0:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    24a4:	7001006b 	andvc	r0, r1, fp, rrx
    24a8:	0000d401 	andeq	sp, r0, r1, lsl #8
    24ac:	72910200 	addsvc	r0, r1, #0, 4
    24b0:	13791a00 	cmnne	r9, #0, 20
    24b4:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    24b8:	0000be01 	andeq	fp, r0, r1, lsl #28
    24bc:	0046e400 	subeq	lr, r6, r0, lsl #8
    24c0:	00029c08 	andeq	r9, r2, r8, lsl #24
    24c4:	b09c0100 	addslt	r0, ip, r0, lsl #2
    24c8:	1b000005 	blne	24e4 <_Min_Stack_Size+0x22e4>
    24cc:	00004038 	andeq	r4, r0, r8, lsr r0
    24d0:	d401d901 	strle	sp, [r1], #-2305	; 0xfffff6ff
    24d4:	02000000 	andeq	r0, r0, #0
    24d8:	591c4e91 	ldmdbpl	ip, {r0, r4, r7, r9, sl, fp, lr}
    24dc:	01000013 	tsteq	r0, r3, lsl r0
    24e0:	00f501db 	ldrsbteq	r0, [r5], #27
    24e4:	91020000 	mrsls	r0, (UNDEF: 2)
    24e8:	0f3a1c58 	svceq	0x003a1c58
    24ec:	dc010000 	stcle	0, cr0, [r1], {-0}
    24f0:	0000d401 	andeq	sp, r0, r1, lsl #8
    24f4:	56910200 	ldrpl	r0, [r1], r0, lsl #4
    24f8:	01006919 	tsteq	r0, r9, lsl r9
    24fc:	00d401de 	ldrsbeq	r0, [r4], #30
    2500:	91020000 	mrsls	r0, (UNDEF: 2)
    2504:	656c196e 	strbvs	r1, [ip, #-2414]!	; 0xfffff692
    2508:	de01006e 	cdple	0, 0, cr0, cr1, cr14, {3}
    250c:	0000d401 	andeq	sp, r0, r1, lsl #8
    2510:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2514:	01007019 	tsteq	r0, r9, lsl r0
    2518:	04c301df 	strbeq	r0, [r3], #479	; 0x1df
    251c:	91020000 	mrsls	r0, (UNDEF: 2)
    2520:	00651968 	rsbeq	r1, r5, r8, ror #18
    2524:	c301e001 	movwgt	lr, #4097	; 0x1001
    2528:	02000004 	andeq	r0, r0, #4
    252c:	5d1c6091 	ldcpl	0, cr6, [ip, #-580]	; 0xfffffdbc
    2530:	01000009 	tsteq	r0, r9
    2534:	00c901e1 	sbceq	r0, r9, r1, ror #3
    2538:	91020000 	mrsls	r0, (UNDEF: 2)
    253c:	0ebb1c67 	cdpeq	12, 11, cr1, cr11, cr7, {3}
    2540:	e2010000 	and	r0, r1, #0
    2544:	0000c901 	andeq	ip, r0, r1, lsl #18
    2548:	5f910200 	svcpl	0x00910200
    254c:	0014501d 	andseq	r5, r4, sp, lsl r0
    2550:	02340100 	eorseq	r0, r4, #0, 2
    2554:	0800494e 	stmdaeq	r0, {r1, r2, r3, r6, r8, fp, lr}
    2558:	0dff1a00 			; <UNDEFINED> instruction: 0x0dff1a00
    255c:	46010000 	strmi	r0, [r1], -r0
    2560:	0000c902 	andeq	ip, r0, r2, lsl #18
    2564:	00498000 	subeq	r8, r9, r0
    2568:	00022c08 	andeq	r2, r2, r8, lsl #24
    256c:	239c0100 	orrscs	r0, ip, #0, 2
    2570:	19000006 	stmdbne	r0, {r1, r2}
    2574:	006e656c 	rsbeq	r6, lr, ip, ror #10
    2578:	d4024801 	strle	r4, [r2], #-2049	; 0xfffff7ff
    257c:	02000000 	andeq	r0, r0, #0
    2580:	69197091 	ldmdbvs	r9, {r0, r4, r7, ip, sp, lr}
    2584:	02480100 	subeq	r0, r8, #0, 2
    2588:	000000d4 	ldrdeq	r0, [r0], -r4
    258c:	1c769102 	ldfnep	f1, [r6], #-8
    2590:	0000095d 	andeq	r0, r0, sp, asr r9
    2594:	c9024901 	stmdbgt	r2, {r0, r8, fp, lr}
    2598:	02000000 	andeq	r0, r0, #0
    259c:	281c7591 	ldmdacs	ip, {r0, r4, r7, r8, sl, ip, sp, lr}
    25a0:	01000013 	tsteq	r0, r3, lsl r0
    25a4:	00c90249 	sbceq	r0, r9, r9, asr #4
    25a8:	91020000 	mrsls	r0, (UNDEF: 2)
    25ac:	54b81c74 	ldrtpl	r1, [r8], #3188	; 0xc74
    25b0:	4a010000 	bmi	425b8 <_Min_Stack_Size+0x423b8>
    25b4:	00010502 	andeq	r0, r1, r2, lsl #10
    25b8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    25bc:	74657219 	strbtvc	r7, [r5], #-537	; 0xfffffde7
    25c0:	024b0100 	subeq	r0, fp, #0, 2
    25c4:	000000c9 	andeq	r0, r0, r9, asr #1
    25c8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    25cc:	00141d1a 	andseq	r1, r4, sl, lsl sp
    25d0:	02d30100 	sbcseq	r0, r3, #0, 2
    25d4:	000000c9 	andeq	r0, r0, r9, asr #1
    25d8:	08004bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, lr}
    25dc:	00000110 	andeq	r0, r0, r0, lsl r1
    25e0:	06699c01 	strbteq	r9, [r9], -r1, lsl #24
    25e4:	69190000 	ldmdbvs	r9, {}	; <UNPREDICTABLE>
    25e8:	02d50100 	sbcseq	r0, r5, #0, 2
    25ec:	000000c9 	andeq	r0, r0, r9, asr #1
    25f0:	1c779102 	ldfnep	f1, [r7], #-8
    25f4:	000054b8 			; <UNDEFINED> instruction: 0x000054b8
    25f8:	0502d501 	streq	sp, [r2, #-1281]	; 0xfffffaff
    25fc:	02000001 	andeq	r0, r0, #1
    2600:	72197091 	andsvc	r7, r9, #145	; 0x91
    2604:	01007465 	tsteq	r0, r5, ror #8
    2608:	00c902d6 	ldrdeq	r0, [r9], #38	; 0x26
    260c:	91020000 	mrsls	r0, (UNDEF: 2)
    2610:	d31a0076 	tstle	sl, #118	; 0x76
    2614:	01000013 	tsteq	r0, r3, lsl r0
    2618:	00be0317 	adcseq	r0, lr, r7, lsl r3
    261c:	4cbc0000 	ldcmi	0, cr0, [ip]
    2620:	007c0800 	rsbseq	r0, ip, r0, lsl #16
    2624:	9c010000 	stcls	0, cr0, [r1], {-0}
    2628:	000006a2 	andeq	r0, r0, r2, lsr #13
    262c:	706d7419 	rsbvc	r7, sp, r9, lsl r4
    2630:	03190100 	tsteq	r9, #0, 2
    2634:	000000c9 	andeq	r0, r0, r9, asr #1
    2638:	19779102 	ldmdbne	r7!, {r1, r8, ip, pc}^
    263c:	00746572 	rsbseq	r6, r4, r2, ror r5
    2640:	df031a01 	svcle	0x00031a01
    2644:	02000000 	andeq	r0, r0, #0
    2648:	18007091 	stmdane	r0, {r0, r4, r7, ip, sp, lr}
    264c:	00001220 	andeq	r1, r0, r0, lsr #4
    2650:	38034301 	stmdacc	r3, {r0, r8, r9, lr}
    2654:	8808004d 	stmdahi	r8, {r0, r2, r3, r6}
    2658:	01000000 	mrseq	r0, (UNDEF: 0)
    265c:	0006d59c 	muleq	r6, ip, r5
    2660:	00731e00 	rsbseq	r1, r3, r0, lsl #28
    2664:	c9034301 	stmdbgt	r3, {r0, r8, r9, lr}
    2668:	02000000 	andeq	r0, r0, #0
    266c:	621e7791 	andsvs	r7, lr, #38010880	; 0x2440000
    2670:	01006675 	tsteq	r0, r5, ror r6
    2674:	04c30343 	strbeq	r0, [r3], #835	; 0x343
    2678:	91020000 	mrsls	r0, (UNDEF: 2)
    267c:	961f0070 			; <UNDEFINED> instruction: 0x961f0070
    2680:	01000013 	tsteq	r0, r3, lsl r0
    2684:	00c90364 	sbceq	r0, r9, r4, ror #6
    2688:	4dc00000 	stclmi	0, cr0, [r0]
    268c:	002c0800 	eoreq	r0, ip, r0, lsl #16
    2690:	9c010000 	stcls	0, cr0, [r1], {-0}
    2694:	00129120 	andseq	r9, r2, r0, lsr #2
    2698:	037a0100 	cmneq	sl, #0, 2
    269c:	08004dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, lr}
    26a0:	0000002c 	andeq	r0, r0, ip, lsr #32
    26a4:	a4209c01 	strtge	r9, [r0], #-3073	; 0xfffff3ff
    26a8:	01000012 	tsteq	r0, r2, lsl r0
    26ac:	4e18038b 	cdpmi	3, 1, cr0, cr8, cr11, {4}
    26b0:	001c0800 	andseq	r0, ip, r0, lsl #16
    26b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    26b8:	00109c21 	andseq	r9, r0, r1, lsr #24
    26bc:	039d0100 	orrseq	r0, sp, #0, 2
    26c0:	08004e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, lr}
    26c4:	0000003c 	andeq	r0, r0, ip, lsr r0
    26c8:	07349c01 	ldreq	r9, [r4, -r1, lsl #24]!
    26cc:	691e0000 	ldmdbvs	lr, {}	; <UNPREDICTABLE>
    26d0:	9d010070 	stcls	0, cr0, [r1, #-448]	; 0xfffffe40
    26d4:	0004c303 	andeq	ip, r4, r3, lsl #6
    26d8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    26dc:	11942100 	orrsne	r2, r4, r0, lsl #2
    26e0:	a5010000 	strge	r0, [r1, #-0]
    26e4:	004e7003 	subeq	r7, lr, r3
    26e8:	00003c08 	andeq	r3, r0, r8, lsl #24
    26ec:	599c0100 	ldmibpl	ip, {r8}
    26f0:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    26f4:	01007767 	tsteq	r0, r7, ror #14
    26f8:	04c303a5 	strbeq	r0, [r3], #933	; 0x3a5
    26fc:	91020000 	mrsls	r0, (UNDEF: 2)
    2700:	f8210074 			; <UNDEFINED> instruction: 0xf8210074
    2704:	01000012 	tsteq	r0, r2, lsl r0
    2708:	4eac03ad 	cdpmi	3, 10, cr0, cr12, cr13, {5}
    270c:	003c0800 	eorseq	r0, ip, r0, lsl #16
    2710:	9c010000 	stcls	0, cr0, [r1], {-0}
    2714:	0000077e 	andeq	r0, r0, lr, ror r7
    2718:	006e731e 	rsbeq	r7, lr, lr, lsl r3
    271c:	c303ad01 	movwgt	sl, #15617	; 0x3d01
    2720:	02000004 	andeq	r0, r0, #4
    2724:	21007491 			; <UNDEFINED> instruction: 0x21007491
    2728:	00001319 	andeq	r1, r0, r9, lsl r3
    272c:	e803b501 	stmda	r3, {r0, r8, sl, ip, sp, pc}
    2730:	3c08004e 	stccc	0, cr0, [r8], {78}	; 0x4e
    2734:	01000000 	mrseq	r0, (UNDEF: 0)
    2738:	0007a49c 	muleq	r7, ip, r4
    273c:	6e641e00 	cdpvs	14, 6, cr1, cr4, cr0, {0}
    2740:	b5010073 	strlt	r0, [r1, #-115]	; 0xffffff8d
    2744:	0004c303 	andeq	ip, r4, r3, lsl #6
    2748:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    274c:	13482200 	movtne	r2, #33280	; 0x8200
    2750:	c7010000 	strgt	r0, [r1, -r0]
    2754:	0000ea03 	andeq	lr, r0, r3, lsl #20
    2758:	00000000 	andeq	r0, r0, r0
    275c:	00001400 	andeq	r1, r0, r0, lsl #8
    2760:	239c0100 	orrscs	r0, ip, #0, 2
    2764:	00001020 	andeq	r1, r0, r0, lsr #32
    2768:	01052901 	tsteq	r5, r1, lsl #18
    276c:	03050000 	movweq	r0, #20480	; 0x5000
    2770:	20003658 	andcs	r3, r0, r8, asr r6
    2774:	0011a223 	andseq	sl, r1, r3, lsr #4
    2778:	f52a0100 			; <UNDEFINED> instruction: 0xf52a0100
    277c:	05000000 	streq	r0, [r0, #-0]
    2780:	00364803 	eorseq	r4, r6, r3, lsl #16
    2784:	111a2320 	tstne	sl, r0, lsr #6
    2788:	2b010000 	blcs	42790 <_Min_Stack_Size+0x42590>
    278c:	00000105 	andeq	r0, r0, r5, lsl #2
    2790:	36500305 	ldrbcc	r0, [r0], -r5, lsl #6
    2794:	c1232000 			; <UNDEFINED> instruction: 0xc1232000
    2798:	01000010 	tsteq	r0, r0, lsl r0
    279c:	0001052e 	andeq	r0, r1, lr, lsr #10
    27a0:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    27a4:	23200001 			; <UNDEFINED> instruction: 0x23200001
    27a8:	00000fda 	ldrdeq	r0, [r0], -sl
    27ac:	01052f01 	tsteq	r5, r1, lsl #30
    27b0:	03050000 	movweq	r0, #20480	; 0x5000
    27b4:	20000120 	andcs	r0, r0, r0, lsr #2
    27b8:	000e3223 	andeq	r3, lr, r3, lsr #4
    27bc:	05300100 	ldreq	r0, [r0, #-256]!	; 0xffffff00
    27c0:	05000001 	streq	r0, [r0, #-1]
    27c4:	00012403 	andeq	r2, r1, r3, lsl #8
    27c8:	13062320 	movwne	r2, #25376	; 0x6320
    27cc:	31010000 	mrscc	r0, (UNDEF: 1)
    27d0:	00000105 	andeq	r0, r0, r5, lsl #2
    27d4:	01280305 			; <UNDEFINED> instruction: 0x01280305
    27d8:	73232000 			; <UNDEFINED> instruction: 0x73232000
    27dc:	0100000f 	tsteq	r0, pc
    27e0:	0000c933 	andeq	ip, r0, r3, lsr r9
    27e4:	70030500 	andvc	r0, r3, r0, lsl #10
    27e8:	23200036 			; <UNDEFINED> instruction: 0x23200036
    27ec:	00000e10 	andeq	r0, r0, r0, lsl lr
    27f0:	00f53601 	rscseq	r3, r5, r1, lsl #12
    27f4:	03050000 	movweq	r0, #20480	; 0x5000
    27f8:	2000012c 	andcs	r0, r0, ip, lsr #2
    27fc:	00133d23 	andseq	r3, r3, r3, lsr #26
    2800:	be380100 	rsflte	f0, f0, f0
    2804:	05000000 	streq	r0, [r0, #-0]
    2808:	00364403 	eorseq	r4, r6, r3, lsl #8
    280c:	14302320 	ldrtne	r2, [r0], #-800	; 0xfffffce0
    2810:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    2814:	000000be 	strheq	r0, [r0], -lr
    2818:	36640305 	strbtcc	r0, [r4], -r5, lsl #6
    281c:	5b232000 	blpl	8ca824 <_Min_Stack_Size+0x8ca624>
    2820:	0100000e 	tsteq	r0, lr
    2824:	0003f33b 	andeq	pc, r3, fp, lsr r3	; <UNPREDICTABLE>
    2828:	68030500 	stmdavs	r3, {r8, sl}
    282c:	23200036 			; <UNDEFINED> instruction: 0x23200036
    2830:	00000f51 	andeq	r0, r0, r1, asr pc
    2834:	00ea3c01 	rsceq	r3, sl, r1, lsl #24
    2838:	03050000 	movweq	r0, #20480	; 0x5000
    283c:	2000365c 	andcs	r3, r0, ip, asr r6
    2840:	000f1c23 	andeq	r1, pc, r3, lsr #24
    2844:	ea3c0100 	b	f02c4c <_Min_Stack_Size+0xf02a4c>
    2848:	05000000 	streq	r0, [r0, #-0]
    284c:	00366003 	eorseq	r6, r6, r3
    2850:	11cb2320 	bicne	r2, fp, r0, lsr #6
    2854:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    2858:	000000ea 	andeq	r0, r0, sl, ror #1
    285c:	36540305 	ldrbcc	r0, [r4], -r5, lsl #6
    2860:	4d242000 	stcmi	0, cr2, [r4, #-0]
    2864:	01004753 	tsteq	r0, r3, asr r7
    2868:	0008ca40 	andeq	ip, r8, r0, asr #20
    286c:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
    2870:	05200036 	streq	r0, [r0, #-54]!	; 0xffffffca
    2874:	0003c504 	andeq	ip, r3, r4, lsl #10
    2878:	00c90700 	sbceq	r0, r9, r0, lsl #14
    287c:	08e00000 	stmiaeq	r0!, {}^	; <UNPREDICTABLE>
    2880:	a9080000 	stmdbge	r8, {}	; <UNPREDICTABLE>
    2884:	06000000 	streq	r0, [r0], -r0
    2888:	10b72300 	adcsne	r2, r7, r0, lsl #6
    288c:	42010000 	andmi	r0, r1, #0
    2890:	000008d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2894:	00a40305 	adceq	r0, r4, r5, lsl #6
    2898:	43242000 			; <UNDEFINED> instruction: 0x43242000
    289c:	01007069 	tsteq	r0, r9, rrx
    28a0:	00010543 	andeq	r0, r1, r3, asr #10
    28a4:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    28a8:	23200001 			; <UNDEFINED> instruction: 0x23200001
    28ac:	00001205 	andeq	r1, r0, r5, lsl #4
    28b0:	00b06101 	adcseq	r6, r0, r1, lsl #2
    28b4:	03050000 	movweq	r0, #20480	; 0x5000
    28b8:	200000ac 	andcs	r0, r0, ip, lsr #1
    28bc:	00101123 	andseq	r1, r0, r3, lsr #2
    28c0:	b0620100 	rsblt	r0, r2, r0, lsl #2
    28c4:	05000000 	streq	r0, [r0, #-0]
    28c8:	0000b003 	andeq	fp, r0, r3
    28cc:	124e2320 	subne	r2, lr, #32, 6	; 0x80000000
    28d0:	63010000 	movwvs	r0, #4096	; 0x1000
    28d4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    28d8:	00b40305 	adcseq	r0, r4, r5, lsl #6
    28dc:	7f002000 	svcvc	0x00002000
    28e0:	04000003 	streq	r0, [r0], #-3
    28e4:	000a8c00 	andeq	r8, sl, r0, lsl #24
    28e8:	11010400 	tstne	r1, r0, lsl #8
    28ec:	0c000001 	stceq	0, cr0, [r0], {1}
    28f0:	000014f9 	strdeq	r1, [r0], -r9
    28f4:	0000036e 	andeq	r0, r0, lr, ror #6
    28f8:	000002d8 	ldrdeq	r0, [r0], -r8
    28fc:	00000000 	andeq	r0, r0, r0
    2900:	0000157b 	andeq	r1, r0, fp, ror r5
    2904:	69050402 	stmdbvs	r5, {r1, sl}
    2908:	0300746e 	movweq	r7, #1134	; 0x46e
    290c:	01ce0704 	biceq	r0, lr, r4, lsl #14
    2910:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2914:	0000b805 	andeq	fp, r0, r5, lsl #16
    2918:	04080300 	streq	r0, [r8], #-768	; 0xfffffd00
    291c:	000002f8 	strdeq	r0, [r0], -r8
    2920:	92060103 	andls	r0, r6, #-1073741824	; 0xc0000000
    2924:	04000001 	streq	r0, [r0], #-1
    2928:	000000e3 	andeq	r0, r0, r3, ror #1
    292c:	00531d02 	subseq	r1, r3, r2, lsl #26
    2930:	01030000 	mrseq	r0, (UNDEF: 3)
    2934:	00019008 	andeq	r9, r1, r8
    2938:	14b00400 	ldrtne	r0, [r0], #1024	; 0x400
    293c:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
    2940:	00000065 	andeq	r0, r0, r5, rrx
    2944:	95050203 	strls	r0, [r5, #-515]	; 0xfffffdfd
    2948:	04000000 	streq	r0, [r0], #-0
    294c:	00000072 	andeq	r0, r0, r2, ror r0
    2950:	00772b02 	rsbseq	r2, r7, r2, lsl #22
    2954:	02030000 	andeq	r0, r3, #0
    2958:	0001f207 	andeq	pc, r1, r7, lsl #4
    295c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    2960:	000000bd 	strheq	r0, [r0], -sp
    2964:	c9070403 	stmdbgt	r7, {r0, r1, sl}
    2968:	03000001 	movweq	r0, #1
    296c:	01c40708 	biceq	r0, r4, r8, lsl #14
    2970:	04030000 	streq	r0, [r3], #-0
    2974:	00005907 	andeq	r5, r0, r7, lsl #18
    2978:	a0040500 	andge	r0, r4, r0, lsl #10
    297c:	03000000 	movweq	r0, #0
    2980:	01990801 	orrseq	r0, r9, r1, lsl #16
    2984:	e5040000 	str	r0, [r4, #-0]
    2988:	03000000 	movweq	r0, #0
    298c:	00004818 	andeq	r4, r0, r8, lsl r8
    2990:	14b20400 	ldrtne	r0, [r2], #1024	; 0x400
    2994:	20030000 	andcs	r0, r3, r0
    2998:	0000005a 	andeq	r0, r0, sl, asr r0
    299c:	00007404 	andeq	r7, r0, r4, lsl #8
    29a0:	6c240300 	stcvs	3, cr0, [r4], #-0
    29a4:	06000000 	streq	r0, [r0], -r0
    29a8:	000014bb 			; <UNDEFINED> instruction: 0x000014bb
    29ac:	5f2c0412 	svcpl	0x002c0412
    29b0:	07000001 	streq	r0, [r0, -r1]
    29b4:	04006469 	streq	r6, [r0], #-1129	; 0xfffffb97
    29b8:	0000bd2e 	andeq	fp, r0, lr, lsr #26
    29bc:	71070000 	mrsvc	r0, (UNDEF: 7)
    29c0:	2f040072 	svccs	0x00040072
    29c4:	000000a7 	andeq	r0, r0, r7, lsr #1
    29c8:	15560802 	ldrbne	r0, [r6, #-2050]	; 0xfffff7fe
    29cc:	32040000 	andcc	r0, r4, #0
    29d0:	000000a7 	andeq	r0, r0, r7, lsr #1
    29d4:	61610703 	cmnvs	r1, r3, lsl #14
    29d8:	a7340400 	ldrge	r0, [r4, -r0, lsl #8]!
    29dc:	04000000 	streq	r0, [r0], #-0
    29e0:	00637407 	rsbeq	r7, r3, r7, lsl #8
    29e4:	00a73504 	adceq	r3, r7, r4, lsl #10
    29e8:	07050000 	streq	r0, [r5, -r0]
    29ec:	04006472 	streq	r6, [r0], #-1138	; 0xfffffb8e
    29f0:	0000a736 	andeq	sl, r0, r6, lsr r7
    29f4:	72070600 	andvc	r0, r7, #0, 12
    29f8:	37040061 	strcc	r0, [r4, -r1, rrx]
    29fc:	000000a7 	andeq	r0, r0, r7, lsr #1
    2a00:	152a0807 	strne	r0, [sl, #-2055]!	; 0xfffff7f9
    2a04:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    2a08:	000000a7 	andeq	r0, r0, r7, lsr #1
    2a0c:	14a80808 	strtne	r0, [r8], #2056	; 0x808
    2a10:	3f040000 	svccc	0x00040000
    2a14:	000000bd 	strheq	r0, [r0], -sp
    2a18:	153b080a 	ldrne	r0, [fp, #-2058]!	; 0xfffff7f6
    2a1c:	40040000 	andmi	r0, r4, r0
    2a20:	000000bd 	strheq	r0, [r0], -sp
    2a24:	14de080c 	ldrbne	r0, [lr], #2060	; 0x80c
    2a28:	41040000 	mrsmi	r0, (UNDEF: 4)
    2a2c:	000000bd 	strheq	r0, [r0], -sp
    2a30:	14f1080e 	ldrbtne	r0, [r1], #2062	; 0x80e
    2a34:	42040000 	andmi	r0, r4, #0
    2a38:	000000bd 	strheq	r0, [r0], -sp
    2a3c:	5d090010 	stcpl	0, cr0, [r9, #-64]	; 0xffffffc0
    2a40:	01000015 	tsteq	r0, r5, lsl r0
    2a44:	0000bd11 	andeq	fp, r0, r1, lsl sp
    2a48:	004f2400 	subeq	r2, pc, r0, lsl #8
    2a4c:	00002e08 	andeq	r2, r0, r8, lsl #28
    2a50:	919c0100 	orrsls	r0, ip, r0, lsl #2
    2a54:	0a000001 	beq	2a60 <_Min_Stack_Size+0x2860>
    2a58:	11010073 	tstne	r1, r3, ror r0
    2a5c:	00000191 	muleq	r0, r1, r1
    2a60:	0b6c9102 	bleq	1b26e70 <_Min_Stack_Size+0x1b26c70>
    2a64:	13010069 	movwne	r0, #4201	; 0x1069
    2a68:	000000bd 	strheq	r0, [r0], -sp
    2a6c:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2a70:	00a70405 	adceq	r0, r7, r5, lsl #8
    2a74:	e6090000 	str	r0, [r9], -r0
    2a78:	01000014 	tsteq	r0, r4, lsl r0
    2a7c:	00002528 	andeq	r2, r0, r8, lsr #10
    2a80:	004f5400 	subeq	r5, pc, r0, lsl #8
    2a84:	00010c08 	andeq	r0, r1, r8, lsl #24
    2a88:	2e9c0100 	fmlcse	f0, f4, f0
    2a8c:	0a000002 	beq	2a9c <_Min_Stack_Size+0x289c>
    2a90:	0067736d 	rsbeq	r7, r7, sp, ror #6
    2a94:	01912801 	orrseq	r2, r1, r1, lsl #16
    2a98:	91020000 	mrsls	r0, (UNDEF: 2)
    2a9c:	149d0c5c 	ldrne	r0, [sp], #3164	; 0xc5c
    2aa0:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    2aa4:	00000191 	muleq	r0, r1, r1
    2aa8:	0a589102 	beq	1626eb8 <_Min_Stack_Size+0x1626cb8>
    2aac:	00667562 	rsbeq	r7, r6, r2, ror #10
    2ab0:	009a2801 	addseq	r2, sl, r1, lsl #16
    2ab4:	91020000 	mrsls	r0, (UNDEF: 2)
    2ab8:	656c0a54 	strbvs	r0, [ip, #-2644]!	; 0xfffff5ac
    2abc:	2801006e 	stmdacs	r1, {r1, r2, r3, r5, r6}
    2ac0:	000000b2 	strheq	r0, [r0], -r2
    2ac4:	0d529102 	ldfeqp	f1, [r2, #-8]
    2ac8:	000014cd 	andeq	r1, r0, sp, asr #9
    2acc:	00bd2a01 	adcseq	r2, sp, r1, lsl #20
    2ad0:	91020000 	mrsls	r0, (UNDEF: 2)
    2ad4:	70630b76 	rsbvc	r0, r3, r6, ror fp
    2ad8:	912b0100 			; <UNDEFINED> instruction: 0x912b0100
    2adc:	02000001 	andeq	r0, r0, #1
    2ae0:	400d7091 	mulmi	sp, r1, r0
    2ae4:	01000042 	tsteq	r0, r2, asr #32
    2ae8:	0000252c 	andeq	r2, r0, ip, lsr #10
    2aec:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2af0:	0015630d 	andseq	r6, r5, sp, lsl #6
    2af4:	252d0100 	strcs	r0, [sp, #-256]!	; 0xffffff00
    2af8:	02000000 	andeq	r0, r0, #0
    2afc:	480d6891 	stmdami	sp, {r0, r4, r7, fp, sp, lr}
    2b00:	01000015 	tsteq	r0, r5, lsl r0
    2b04:	0000252e 	andeq	r2, r0, lr, lsr #10
    2b08:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2b0c:	14c00e00 	strbne	r0, [r0], #3584	; 0xe00
    2b10:	6a010000 	bvs	42b18 <_Min_Stack_Size+0x42918>
    2b14:	00000191 	muleq	r0, r1, r1
    2b18:	08005060 	stmdaeq	r0, {r5, r6, ip, lr}
    2b1c:	00000064 	andeq	r0, r0, r4, rrx
    2b20:	02829c01 	addeq	r9, r2, #256	; 0x100
    2b24:	6d0a0000 	stcvs	0, cr0, [sl, #-0]
    2b28:	01006773 	tsteq	r0, r3, ror r7
    2b2c:	0001916a 	andeq	r9, r1, sl, ror #2
    2b30:	ec910300 	ldc	3, cr0, [r1], {0}
    2b34:	70630a7d 	rsbvc	r0, r3, sp, ror sl
    2b38:	916a0100 	cmnls	sl, r0, lsl #2
    2b3c:	03000001 	movweq	r0, #1
    2b40:	0b7de891 	bleq	1f7cd8c <_Min_Stack_Size+0x1f7cb8c>
    2b44:	006e656c 	rsbeq	r6, lr, ip, ror #10
    2b48:	00256c01 	eoreq	r6, r5, r1, lsl #24
    2b4c:	91020000 	mrsls	r0, (UNDEF: 2)
    2b50:	14ec0d74 	strbtne	r0, [ip], #3444	; 0xd74
    2b54:	6d010000 	stcvs	0, cr0, [r1, #-0]
    2b58:	00000282 	andeq	r0, r0, r2, lsl #5
    2b5c:	7df49103 	ldfvcp	f1, [r4, #12]!
    2b60:	00a00f00 	adceq	r0, r0, r0, lsl #30
    2b64:	02920000 	addseq	r0, r2, #0
    2b68:	93100000 	tstls	r0, #0
    2b6c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    2b70:	15300e00 	ldrne	r0, [r0, #-3584]!	; 0xfffff200
    2b74:	87010000 	strhi	r0, [r1, -r0]
    2b78:	00000191 	muleq	r0, r1, r1
    2b7c:	080050c4 	stmdaeq	r0, {r2, r6, r7, ip, lr}
    2b80:	000002f6 	strdeq	r0, [r0], -r6
    2b84:	03039c01 	movweq	r9, #15361	; 0x3c01
    2b88:	6d0a0000 	stcvs	0, cr0, [sl, #-0]
    2b8c:	01006773 	tsteq	r0, r3, ror r7
    2b90:	00019187 	andeq	r9, r1, r7, lsl #3
    2b94:	ec910300 	ldc	3, cr0, [r1], {0}
    2b98:	70630a7d 	rsbvc	r0, r3, sp, ror sl
    2b9c:	91870100 	orrls	r0, r7, r0, lsl #2
    2ba0:	03000001 	movweq	r0, #1
    2ba4:	0c7de891 	ldcleq	8, cr14, [sp], #-580	; 0xfffffdbc
    2ba8:	000014d2 	ldrdeq	r1, [r0], -r2
    2bac:	01918701 	orrseq	r8, r1, r1, lsl #14
    2bb0:	91030000 	mrsls	r0, (UNDEF: 3)
    2bb4:	6c0b7de4 	stcvs	13, cr7, [fp], {228}	; 0xe4
    2bb8:	01006e65 	tsteq	r0, r5, ror #28
    2bbc:	00002589 	andeq	r2, r0, r9, lsl #11
    2bc0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2bc4:	00095d0d 	andeq	r5, r9, sp, lsl #26
    2bc8:	25890100 	strcs	r0, [r9, #256]	; 0x100
    2bcc:	02000000 	andeq	r0, r0, #0
    2bd0:	ec0d7091 	stc	0, cr7, [sp], {145}	; 0x91
    2bd4:	01000014 	tsteq	r0, r4, lsl r0
    2bd8:	0002828a 	andeq	r8, r2, sl, lsl #5
    2bdc:	f0910300 			; <UNDEFINED> instruction: 0xf0910300
    2be0:	4d0e007d 	stcmi	0, cr0, [lr, #-500]	; 0xfffffe0c
    2be4:	01000015 	tsteq	r0, r5, lsl r0
    2be8:	0000a7e7 	andeq	sl, r0, r7, ror #15
    2bec:	0053bc00 	subseq	fp, r3, r0, lsl #24
    2bf0:	00017608 	andeq	r7, r1, r8, lsl #12
    2bf4:	7c9c0100 	ldfvcs	f0, [ip], {0}
    2bf8:	0c000003 	stceq	0, cr0, [r0], {3}
    2bfc:	000014ba 			; <UNDEFINED> instruction: 0x000014ba
    2c00:	037ce701 	cmneq	ip, #262144	; 0x40000
    2c04:	91020000 	mrsls	r0, (UNDEF: 2)
    2c08:	15430c64 	strbne	r0, [r3, #-3172]	; 0xfffff39c
    2c0c:	e7010000 	str	r0, [r1, -r0]
    2c10:	00000191 	muleq	r0, r1, r1
    2c14:	0c609102 	stfeqp	f1, [r0], #-8
    2c18:	000014d2 	ldrdeq	r1, [r0], -r2
    2c1c:	0191e701 	orrseq	lr, r1, r1, lsl #14
    2c20:	91020000 	mrsls	r0, (UNDEF: 2)
    2c24:	6d740b5c 	vldmdbvs	r4!, {d16-<overflow reg d61>}
    2c28:	e9010070 	stmdb	r1, {r4, r5, r6}
    2c2c:	000000bd 	strheq	r0, [r0], -sp
    2c30:	0b6a9102 	bleq	1aa7040 <_Min_Stack_Size+0x1aa6e40>
    2c34:	ea010069 	b	42de0 <_Min_Stack_Size+0x42be0>
    2c38:	000000bd 	strheq	r0, [r0], -sp
    2c3c:	0b769102 	bleq	1da704c <_Min_Stack_Size+0x1da6e4c>
    2c40:	0067736d 	rsbeq	r7, r7, sp, ror #6
    2c44:	0191eb01 	orrseq	lr, r1, r1, lsl #22
    2c48:	91020000 	mrsls	r0, (UNDEF: 2)
    2c4c:	70630b6c 	rsbvc	r0, r3, ip, ror #22
    2c50:	91ec0100 	mvnls	r0, r0, lsl #2
    2c54:	02000001 	andeq	r0, r0, #1
    2c58:	05007091 	streq	r7, [r0, #-145]	; 0xffffff6f
    2c5c:	0000c804 	andeq	ip, r0, r4, lsl #16
    2c60:	043f0000 	ldrteq	r0, [pc], #-0	; 2c68 <_Min_Stack_Size+0x2a68>
    2c64:	00040000 	andeq	r0, r4, r0
    2c68:	00000b7f 	andeq	r0, r0, pc, ror fp
    2c6c:	01110104 	tsteq	r1, r4, lsl #2
    2c70:	9c0c0000 	stcls	0, cr0, [ip], {-0}
    2c74:	6e000015 	mcrvs	0, 0, r0, cr0, cr5, {0}
    2c78:	08000003 	stmdaeq	r0, {r0, r1}
    2c7c:	00000003 	andeq	r0, r0, r3
    2c80:	a4000000 	strge	r0, [r0], #-0
    2c84:	02000017 	andeq	r0, r0, #23
    2c88:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
    2c8c:	00301b02 	eorseq	r1, r0, r2, lsl #22
    2c90:	01030000 	mrseq	r0, (UNDEF: 3)
    2c94:	00019206 	andeq	r9, r1, r6, lsl #4
    2c98:	00e30200 	rsceq	r0, r3, r0, lsl #4
    2c9c:	1d020000 	stcne	0, cr0, [r2, #-0]
    2ca0:	00000042 	andeq	r0, r0, r2, asr #32
    2ca4:	90080103 	andls	r0, r8, r3, lsl #2
    2ca8:	02000001 	andeq	r0, r0, #1
    2cac:	000014b0 			; <UNDEFINED> instruction: 0x000014b0
    2cb0:	00542902 	subseq	r2, r4, r2, lsl #18
    2cb4:	02030000 	andeq	r0, r3, #0
    2cb8:	00009505 	andeq	r9, r0, r5, lsl #10
    2cbc:	00720200 	rsbseq	r0, r2, r0, lsl #4
    2cc0:	2b020000 	blcs	82cc8 <_Min_Stack_Size+0x82ac8>
    2cc4:	00000066 	andeq	r0, r0, r6, rrx
    2cc8:	f2070203 	vhsub.s8	d0, d7, d3
    2ccc:	03000001 	movweq	r0, #1
    2cd0:	00bd0504 	adcseq	r0, sp, r4, lsl #10
    2cd4:	67020000 	strvs	r0, [r2, -r0]
    2cd8:	02000000 	andeq	r0, r0, #0
    2cdc:	00007f41 	andeq	r7, r0, r1, asr #30
    2ce0:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2ce4:	000001c9 	andeq	r0, r0, r9, asr #3
    2ce8:	b8050803 	stmdalt	r5, {r0, r1, fp}
    2cec:	03000000 	movweq	r0, #0
    2cf0:	01c40708 	biceq	r0, r4, r8, lsl #14
    2cf4:	04040000 	streq	r0, [r4], #-0
    2cf8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    2cfc:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2d00:	000001ce 	andeq	r0, r0, lr, asr #3
    2d04:	f8040803 			; <UNDEFINED> instruction: 0xf8040803
    2d08:	03000002 	movweq	r0, #2
    2d0c:	00590704 	subseq	r0, r9, r4, lsl #14
    2d10:	04050000 	streq	r0, [r5], #-0
    2d14:	000000b6 	strheq	r0, [r0], -r6
    2d18:	99080103 	stmdbls	r8, {r0, r1, r8}
    2d1c:	02000001 	andeq	r0, r0, #1
    2d20:	000004b5 			; <UNDEFINED> instruction: 0x000004b5
    2d24:	00251403 	eoreq	r1, r5, r3, lsl #8
    2d28:	e5020000 	str	r0, [r2, #-0]
    2d2c:	03000000 	movweq	r0, #0
    2d30:	00003718 	andeq	r3, r0, r8, lsl r7
    2d34:	14b20200 	ldrtne	r0, [r2], #512	; 0x200
    2d38:	20030000 	andcs	r0, r3, r0
    2d3c:	00000049 	andeq	r0, r0, r9, asr #32
    2d40:	00007402 	andeq	r7, r0, r2, lsl #8
    2d44:	5b240300 	blpl	90394c <_Min_Stack_Size+0x90374c>
    2d48:	02000000 	andeq	r0, r0, #0
    2d4c:	00000069 	andeq	r0, r0, r9, rrx
    2d50:	00743003 	rsbseq	r3, r4, r3
    2d54:	bb060000 	bllt	182d5c <_Min_Stack_Size+0x182b5c>
    2d58:	12000014 	andne	r0, r0, #20
    2d5c:	018b2c04 	orreq	r2, fp, r4, lsl #24
    2d60:	69070000 	stmdbvs	r7, {}	; <UNPREDICTABLE>
    2d64:	2e040064 	cdpcs	0, 0, cr0, cr4, cr4, {3}
    2d68:	000000de 	ldrdeq	r0, [r0], -lr
    2d6c:	72710700 	rsbsvc	r0, r1, #0, 14
    2d70:	c82f0400 	stmdagt	pc!, {sl}	; <UNPREDICTABLE>
    2d74:	02000000 	andeq	r0, r0, #0
    2d78:	00155608 	andseq	r5, r5, r8, lsl #12
    2d7c:	c8320400 	ldmdagt	r2!, {sl}
    2d80:	03000000 	movweq	r0, #0
    2d84:	00616107 	rsbeq	r6, r1, r7, lsl #2
    2d88:	00c83404 	sbceq	r3, r8, r4, lsl #8
    2d8c:	07040000 	streq	r0, [r4, -r0]
    2d90:	04006374 	streq	r6, [r0], #-884	; 0xfffffc8c
    2d94:	0000c835 	andeq	ip, r0, r5, lsr r8
    2d98:	72070500 	andvc	r0, r7, #0, 10
    2d9c:	36040064 	strcc	r0, [r4], -r4, rrx
    2da0:	000000c8 	andeq	r0, r0, r8, asr #1
    2da4:	61720706 	cmnvs	r2, r6, lsl #14
    2da8:	c8370400 	ldmdagt	r7!, {sl}
    2dac:	07000000 	streq	r0, [r0, -r0]
    2db0:	00152a08 	andseq	r2, r5, r8, lsl #20
    2db4:	c8380400 	ldmdagt	r8!, {sl}
    2db8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2dbc:	0014a808 	andseq	sl, r4, r8, lsl #16
    2dc0:	de3f0400 	cfabssle	mvf0, mvf15
    2dc4:	0a000000 	beq	2dcc <_Min_Stack_Size+0x2bcc>
    2dc8:	00153b08 	andseq	r3, r5, r8, lsl #22
    2dcc:	de400400 	cdple	4, 4, cr0, cr0, cr0, {0}
    2dd0:	0c000000 	stceq	0, cr0, [r0], {-0}
    2dd4:	0014de08 	andseq	sp, r4, r8, lsl #28
    2dd8:	de410400 	cdple	4, 4, cr0, cr1, cr0, {0}
    2ddc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2de0:	0014f108 	andseq	pc, r4, r8, lsl #2
    2de4:	de420400 	cdple	4, 4, cr0, cr2, cr0, {0}
    2de8:	10000000 	andne	r0, r0, r0
    2dec:	00c80900 	sbceq	r0, r8, r0, lsl #18
    2df0:	019b0000 	orrseq	r0, fp, r0
    2df4:	a90a0000 	stmdbge	sl, {}	; <UNPREDICTABLE>
    2df8:	03000000 	movweq	r0, #0
    2dfc:	15d90b00 	ldrbne	r0, [r9, #2816]	; 0xb00
    2e00:	33010000 	movwcc	r0, #4096	; 0x1000
    2e04:	000001cd 	andeq	r0, r0, sp, asr #3
    2e08:	08005534 	stmdaeq	r0, {r2, r4, r5, r8, sl, ip, lr}
    2e0c:	00000034 	andeq	r0, r0, r4, lsr r0
    2e10:	01cd9c01 	biceq	r9, sp, r1, lsl #24
    2e14:	730c0000 	movwvc	r0, #49152	; 0xc000
    2e18:	cd330100 	ldfgts	f0, [r3, #-0]
    2e1c:	02000001 	andeq	r0, r0, #1
    2e20:	690c7491 	stmdbvs	ip, {r0, r4, r7, sl, ip, sp, lr}
    2e24:	de330100 	rsfles	f0, f3, f0
    2e28:	02000000 	andeq	r0, r0, #0
    2e2c:	05007291 	streq	r7, [r0, #-657]	; 0xfffffd6f
    2e30:	0000c804 	andeq	ip, r0, r4, lsl #16
    2e34:	16280d00 	strtne	r0, [r8], -r0, lsl #26
    2e38:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    2e3c:	000000d3 	ldrdeq	r0, [r0], -r3
    2e40:	08005568 	stmdaeq	r0, {r3, r5, r6, r8, sl, ip, lr}
    2e44:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    2e48:	027a9c01 	rsbseq	r9, sl, #256	; 0x100
    2e4c:	6f0c0000 	svcvs	0x000c0000
    2e50:	49010070 	stmdbmi	r1, {r4, r5, r6}
    2e54:	000000de 	ldrdeq	r0, [r0], -lr
    2e58:	7dde9103 	ldfvcp	f1, [lr, #12]
    2e5c:	0014ec0e 	andseq	lr, r4, lr, lsl #24
    2e60:	b0490100 	sublt	r0, r9, r0, lsl #2
    2e64:	03000000 	movweq	r0, #0
    2e68:	0c7dd891 	ldcleq	8, cr13, [sp], #-580	; 0xfffffdbc
    2e6c:	00667562 	rsbeq	r7, r6, r2, ror #10
    2e70:	01cd4901 	biceq	r4, sp, r1, lsl #18
    2e74:	91030000 	mrsls	r0, (UNDEF: 3)
    2e78:	6c0c7dd4 	stcvs	13, cr7, [ip], {212}	; 0xd4
    2e7c:	01006e65 	tsteq	r0, r5, ror #28
    2e80:	0000de49 	andeq	sp, r0, r9, asr #28
    2e84:	dc910300 	ldcle	3, cr0, [r1], {0}
    2e88:	70630f7d 	rsbvc	r0, r3, sp, ror pc
    2e8c:	cd4b0100 	stfgte	f0, [fp, #-0]
    2e90:	02000001 	andeq	r0, r0, #1
    2e94:	630f6c91 	movwvs	r6, #64657	; 0xfc91
    2e98:	01003170 	tsteq	r0, r0, ror r1
    2e9c:	0000b04c 	andeq	fp, r0, ip, asr #32
    2ea0:	60910200 	addsvs	r0, r1, r0, lsl #4
    2ea4:	00145a10 	andseq	r5, r4, r0, lsl sl
    2ea8:	7a4d0100 	bvc	13432b0 <_Min_Stack_Size+0x13430b0>
    2eac:	03000002 	movweq	r0, #2
    2eb0:	107de091 			; <UNDEFINED> instruction: 0x107de091
    2eb4:	00001622 	andeq	r1, r0, r2, lsr #12
    2eb8:	00b04e01 	adcseq	r4, r0, r1, lsl #28
    2ebc:	91020000 	mrsls	r0, (UNDEF: 2)
    2ec0:	00700f68 	rsbseq	r0, r0, r8, ror #30
    2ec4:	00de4f01 	sbcseq	r4, lr, r1, lsl #30
    2ec8:	91020000 	mrsls	r0, (UNDEF: 2)
    2ecc:	41271064 			; <UNDEFINED> instruction: 0x41271064
    2ed0:	50010000 	andpl	r0, r1, r0
    2ed4:	000000de 	ldrdeq	r0, [r0], -lr
    2ed8:	00669102 	rsbeq	r9, r6, r2, lsl #2
    2edc:	0000b609 	andeq	fp, r0, r9, lsl #12
    2ee0:	00028a00 	andeq	r8, r2, r0, lsl #20
    2ee4:	00a90a00 	adceq	r0, r9, r0, lsl #20
    2ee8:	00ff0000 	rscseq	r0, pc, r0
    2eec:	0016360d 	andseq	r3, r6, sp, lsl #12
    2ef0:	c8870100 	stmgt	r7, {r8}
    2ef4:	24000000 	strcs	r0, [r0], #-0
    2ef8:	04080057 	streq	r0, [r8], #-87	; 0xffffffa9
    2efc:	01000001 	tsteq	r0, r1
    2f00:	0003219c 	muleq	r3, ip, r1
    2f04:	3dd80e00 	ldclcc	14, cr0, [r8]
    2f08:	87010000 	strhi	r0, [r1, -r0]
    2f0c:	000001cd 	andeq	r0, r0, sp, asr #3
    2f10:	0e4c9102 	sqteqe	f1, f2
    2f14:	000014ec 	andeq	r1, r0, ip, ror #9
    2f18:	01cd8701 	biceq	r8, sp, r1, lsl #14
    2f1c:	91020000 	mrsls	r0, (UNDEF: 2)
    2f20:	14d20e48 	ldrbne	r0, [r2], #3656	; 0xe48
    2f24:	87010000 	strhi	r0, [r1, -r0]
    2f28:	000001cd 	andeq	r0, r0, sp, asr #3
    2f2c:	0f449102 	svceq	0x00449102
    2f30:	00706864 	rsbseq	r6, r0, r4, ror #16
    2f34:	00f48901 	rscseq	r8, r4, r1, lsl #18
    2f38:	91020000 	mrsls	r0, (UNDEF: 2)
    2f3c:	70690f58 	rsbvc	r0, r9, r8, asr pc
    2f40:	8b8a0100 	blhi	fe283348 <BootRAM+0xd1f3ae9>
    2f44:	02000001 	andeq	r0, r0, #1
    2f48:	6c0f5491 	cfstrsvs	mvf5, [pc], {145}	; 0x91
    2f4c:	01006e65 	tsteq	r0, r5, ror #28
    2f50:	0000de8b 	andeq	sp, r0, fp, lsl #29
    2f54:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    2f58:	000f3e10 	andeq	r3, pc, r0, lsl lr	; <UNPREDICTABLE>
    2f5c:	de8b0100 	rmflee	f0, f3, f0
    2f60:	02000000 	andeq	r0, r0, #0
    2f64:	c7105291 			; <UNDEFINED> instruction: 0xc7105291
    2f68:	01000015 	tsteq	r0, r5, lsl r0
    2f6c:	0000bd8c 	andeq	fp, r0, ip, lsl #27
    2f70:	6d910200 	lfmvs	f0, 4, [r1]
    2f74:	00160710 	andseq	r0, r6, r0, lsl r7
    2f78:	de8d0100 	rmflee	f0, f5, f0
    2f7c:	02000000 	andeq	r0, r0, #0
    2f80:	11006a91 			; <UNDEFINED> instruction: 0x11006a91
    2f84:	000015ee 	andeq	r1, r0, lr, ror #11
    2f88:	5828c401 	stmdapl	r8!, {r0, sl, lr, pc}
    2f8c:	00700800 	rsbseq	r0, r0, r0, lsl #16
    2f90:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f94:	0000035f 	andeq	r0, r0, pc, asr r3
    2f98:	0100730c 	tsteq	r0, ip, lsl #6
    2f9c:	0000c8c4 	andeq	ip, r0, r4, asr #17
    2fa0:	6f910200 	svcvs	0x00910200
    2fa4:	6675620c 	ldrbtvs	r6, [r5], -ip, lsl #4
    2fa8:	cdc40100 	stfgte	f0, [r4]
    2fac:	02000001 	andeq	r0, r0, #1
    2fb0:	07106891 			; <UNDEFINED> instruction: 0x07106891
    2fb4:	01000016 	tsteq	r0, r6, lsl r0
    2fb8:	0000dec6 	andeq	sp, r0, r6, asr #29
    2fbc:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    2fc0:	158c0d00 	strne	r0, [ip, #3328]	; 0xd00
    2fc4:	e1010000 	mrs	r0, (UNDEF: 1)
    2fc8:	000000c8 	andeq	r0, r0, r8, asr #1
    2fcc:	08005898 	stmdaeq	r0, {r3, r4, r7, fp, ip, lr}
    2fd0:	0000005c 	andeq	r0, r0, ip, asr r0
    2fd4:	03bf9c01 			; <UNDEFINED> instruction: 0x03bf9c01
    2fd8:	6c0e0000 	stcvs	0, cr0, [lr], {-0}
    2fdc:	01000015 	tsteq	r0, r5, lsl r0
    2fe0:	0001cde1 	andeq	ip, r1, r1, ror #27
    2fe4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2fe8:	0015df0e 	andseq	sp, r5, lr, lsl #30
    2fec:	cde10100 	stfgte	f0, [r1]
    2ff0:	02000001 	andeq	r0, r0, #1
    2ff4:	ec0e6891 	stc	8, cr6, [lr], {145}	; 0x91
    2ff8:	01000014 	tsteq	r0, r4, lsl r0
    2ffc:	0001cde1 	andeq	ip, r1, r1, ror #27
    3000:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3004:	0014d20e 	andseq	sp, r4, lr, lsl #4
    3008:	cde10100 	stfgte	f0, [r1]
    300c:	02000001 	andeq	r0, r0, #1
    3010:	720f6091 	andvc	r6, pc, #145	; 0x91
    3014:	01007465 	tsteq	r0, r5, ror #8
    3018:	0000c8e3 	andeq	ip, r0, r3, ror #17
    301c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3020:	16101200 	ldrne	r1, [r0], -r0, lsl #4
    3024:	07010000 	streq	r0, [r1, -r0]
    3028:	0000bd01 	andeq	fp, r0, r1, lsl #26
    302c:	0058f400 	subseq	pc, r8, r0, lsl #8
    3030:	00004808 	andeq	r4, r0, r8, lsl #16
    3034:	ec9c0100 	ldfs	f0, [ip], {0}
    3038:	13000003 	movwne	r0, #3
    303c:	00001430 	andeq	r1, r0, r0, lsr r4
    3040:	c8010901 	stmdagt	r1, {r0, r8, fp}
    3044:	05000000 	streq	r0, [r0, #-0]
    3048:	00013803 	andeq	r3, r1, r3, lsl #16
    304c:	7b140020 	blvc	5030d4 <_Min_Stack_Size+0x502ed4>
    3050:	01000015 	tsteq	r0, r5, lsl r0
    3054:	593c0123 	ldmdbpl	ip!, {r0, r1, r5, r8}
    3058:	001c0800 	andseq	r0, ip, r0, lsl #16
    305c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3060:	00159415 	andseq	r9, r5, r5, lsl r4
    3064:	cd160100 	ldfgts	f0, [r6, #-0]
    3068:	05000001 	streq	r0, [r0, #-1]
    306c:	00367403 	eorseq	r7, r6, r3, lsl #8
    3070:	16401520 	strbne	r1, [r0], -r0, lsr #10
    3074:	17010000 	strne	r0, [r1, -r0]
    3078:	000000c8 	andeq	r0, r0, r8, asr #1
    307c:	36780305 	ldrbtcc	r0, [r8], -r5, lsl #6
    3080:	f7152000 			; <UNDEFINED> instruction: 0xf7152000
    3084:	01000015 	tsteq	r0, r5, lsl r0
    3088:	0000de18 	andeq	sp, r0, r8, lsl lr
    308c:	80030500 	andhi	r0, r3, r0, lsl #10
    3090:	15200036 	strne	r0, [r0, #-54]!	; 0xffffffca
    3094:	000015fe 	strdeq	r1, [r0], -lr
    3098:	00e91a01 	rsceq	r1, r9, r1, lsl #20
    309c:	03050000 	movweq	r0, #20480	; 0x5000
    30a0:	2000367c 	andcs	r3, r0, ip, ror r6
    30a4:	0004ee00 	andeq	lr, r4, r0, lsl #28
    30a8:	e0000400 	and	r0, r0, r0, lsl #8
    30ac:	0400000c 	streq	r0, [r0], #-12
    30b0:	00011101 	andeq	r1, r1, r1, lsl #2
    30b4:	16d30c00 	ldrbne	r0, [r3], r0, lsl #24
    30b8:	03480000 	movteq	r0, #32768	; 0x8000
    30bc:	00000000 	andeq	r0, r0, r0
    30c0:	192c0000 	stmdbne	ip!, {}	; <UNPREDICTABLE>
    30c4:	01020000 	mrseq	r0, (UNDEF: 2)
    30c8:	00019206 	andeq	r9, r1, r6, lsl #4
    30cc:	00e30300 	rsceq	r0, r3, r0, lsl #6
    30d0:	1d020000 	stcne	0, cr0, [r2, #-0]
    30d4:	00000033 	andeq	r0, r0, r3, lsr r0
    30d8:	90080102 	andls	r0, r8, r2, lsl #2
    30dc:	02000001 	andeq	r0, r0, #1
    30e0:	00950502 	addseq	r0, r5, r2, lsl #10
    30e4:	02020000 	andeq	r0, r2, #0
    30e8:	0001f207 	andeq	pc, r1, r7, lsl #4
    30ec:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    30f0:	000000bd 	strheq	r0, [r0], -sp
    30f4:	00006703 	andeq	r6, r0, r3, lsl #14
    30f8:	5a410200 	bpl	1043900 <_Min_Stack_Size+0x1043700>
    30fc:	02000000 	andeq	r0, r0, #0
    3100:	01c90704 	biceq	r0, r9, r4, lsl #14
    3104:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    3108:	0000b805 	andeq	fp, r0, r5, lsl #16
    310c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    3110:	000001c4 	andeq	r0, r0, r4, asr #3
    3114:	69050404 	stmdbvs	r5, {r2, sl}
    3118:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    311c:	01ce0704 	biceq	r0, lr, r4, lsl #14
    3120:	e5030000 	str	r0, [r3, #-0]
    3124:	03000000 	movweq	r0, #0
    3128:	00002818 	andeq	r2, r0, r8, lsl r8
    312c:	00690300 	rsbeq	r0, r9, r0, lsl #6
    3130:	30030000 	andcc	r0, r3, r0
    3134:	0000004f 	andeq	r0, r0, pc, asr #32
    3138:	040e0405 	streq	r0, [lr], #-1029	; 0xfffffbfb
    313c:	00014184 	andeq	r4, r1, r4, lsl #3
    3140:	17ad0600 	strne	r0, [sp, r0, lsl #12]!
    3144:	86040000 	strhi	r0, [r4], -r0
    3148:	0000015d 	andeq	r0, r0, sp, asr r1
    314c:	03c20600 	biceq	r0, r2, #0, 12
    3150:	87040000 	strhi	r0, [r4, -r0]
    3154:	00000162 	andeq	r0, r0, r2, ror #2
    3158:	17a80620 	strne	r0, [r8, r0, lsr #12]!
    315c:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
    3160:	00000172 	andeq	r0, r0, r2, ror r1
    3164:	17210680 	strne	r0, [r1, -r0, lsl #13]!
    3168:	89040000 	stmdbhi	r4, {}	; <UNPREDICTABLE>
    316c:	00000162 	andeq	r0, r0, r2, ror #2
    3170:	177807a0 	ldrbne	r0, [r8, -r0, lsr #15]!
    3174:	8a040000 	bhi	10317c <_Min_Stack_Size+0x102f7c>
    3178:	00000177 	andeq	r0, r0, r7, ror r1
    317c:	d6070100 	strle	r0, [r7], -r0, lsl #2
    3180:	04000003 	streq	r0, [r0], #-3
    3184:	0001628b 	andeq	r6, r1, fp, lsl #5
    3188:	07012000 	streq	r2, [r1, -r0]
    318c:	0000173f 	andeq	r1, r0, pc, lsr r7
    3190:	017c8c04 	cmneq	ip, r4, lsl #24
    3194:	01800000 	orreq	r0, r0, r0
    3198:	0002ab07 	andeq	sl, r2, r7, lsl #22
    319c:	628d0400 	addvs	r0, sp, #0, 8
    31a0:	a0000001 	andge	r0, r0, r1
    31a4:	164b0701 	strbne	r0, [fp], -r1, lsl #14
    31a8:	8e040000 	cdphi	0, 0, cr0, cr4, cr0, {0}
    31ac:	00000181 	andeq	r0, r0, r1, lsl #3
    31b0:	ea070200 	b	1c39b8 <_Min_Stack_Size+0x1c37b8>
    31b4:	04000003 	streq	r0, [r0], #-3
    31b8:	0001868f 	andeq	r8, r1, pc, lsl #13
    31bc:	08022000 	stmdaeq	r2, {sp}
    31c0:	04005049 	streq	r5, [r0], #-73	; 0xffffffb7
    31c4:	0001ab90 	muleq	r1, r0, fp
    31c8:	07030000 	streq	r0, [r3, -r0]
    31cc:	000003f4 	strdeq	r0, [r0], -r4
    31d0:	01b09104 	lslseq	r9, r4, #2
    31d4:	03f00000 	mvnseq	r0, #0
    31d8:	00171c07 	andseq	r1, r7, r7, lsl #24
    31dc:	58920400 	ldmpl	r2, {sl}
    31e0:	00000001 	andeq	r0, r0, r1
    31e4:	5809000e 	stmdapl	r9, {r1, r2, r3}
    31e8:	51000001 	tstpl	r0, r1
    31ec:	0a000001 	beq	31f8 <_Min_Stack_Size+0x2ff8>
    31f0:	00000151 	andeq	r0, r0, r1, asr r1
    31f4:	04020007 	streq	r0, [r2], #-7
    31f8:	00005907 	andeq	r5, r0, r7, lsl #18
    31fc:	00880b00 	addeq	r0, r8, r0, lsl #22
    3200:	410b0000 	mrsmi	r0, (UNDEF: 11)
    3204:	09000001 	stmdbeq	r0, {r0}
    3208:	00000088 	andeq	r0, r0, r8, lsl #1
    320c:	00000172 	andeq	r0, r0, r2, ror r1
    3210:	0001510a 	andeq	r5, r1, sl, lsl #2
    3214:	0b001700 	bleq	8e1c <_Min_Stack_Size+0x8c1c>
    3218:	00000141 	andeq	r0, r0, r1, asr #2
    321c:	0001410b 	andeq	r4, r1, fp, lsl #2
    3220:	01410b00 	cmpeq	r1, r0, lsl #22
    3224:	410b0000 	mrsmi	r0, (UNDEF: 11)
    3228:	09000001 	stmdbeq	r0, {r0}
    322c:	00000088 	andeq	r0, r0, r8, lsl #1
    3230:	00000196 	muleq	r0, r6, r1
    3234:	0001510a 	andeq	r5, r1, sl, lsl #2
    3238:	09003700 	stmdbeq	r0, {r8, r9, sl, ip, sp}
    323c:	000001a6 	andeq	r0, r0, r6, lsr #3
    3240:	000001a6 	andeq	r0, r0, r6, lsr #3
    3244:	0001510a 	andeq	r5, r1, sl, lsl #2
    3248:	0b00ef00 	bleq	3ee50 <_Min_Stack_Size+0x3ec50>
    324c:	0000007d 	andeq	r0, r0, sp, ror r0
    3250:	0001960b 	andeq	r9, r1, fp, lsl #12
    3254:	00880900 	addeq	r0, r8, r0, lsl #18
    3258:	01c10000 	biceq	r0, r1, r0
    325c:	510c0000 	mrspl	r0, (UNDEF: 12)
    3260:	83000001 	movwhi	r0, #1
    3264:	35030002 	strcc	r0, [r3, #-2]
    3268:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    326c:	00009393 	muleq	r0, r3, r3
    3270:	04740d00 	ldrbteq	r0, [r4], #-3328	; 0xfffff300
    3274:	0002b99b 	muleq	r2, fp, r9
    3278:	00870600 	addeq	r0, r7, r0, lsl #12
    327c:	9d040000 	stcls	0, cr0, [r4, #-0]
    3280:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    3284:	009f0600 	addseq	r0, pc, r0, lsl #12
    3288:	9e040000 	cdpls	0, 0, cr0, cr4, cr0, {0}
    328c:	00000158 	andeq	r0, r0, r8, asr r1
    3290:	02050604 	andeq	r0, r5, #4, 12	; 0x400000
    3294:	9f040000 	svcls	0x00040000
    3298:	00000158 	andeq	r0, r0, r8, asr r1
    329c:	019e0608 	orrseq	r0, lr, r8, lsl #12
    32a0:	a0040000 	andge	r0, r4, r0
    32a4:	00000158 	andeq	r0, r0, r8, asr r1
    32a8:	43530e0c 	cmpmi	r3, #12, 28	; 0xc0
    32ac:	a1040052 	qaddge	r0, r2, r4
    32b0:	00000158 	andeq	r0, r0, r8, asr r1
    32b4:	43430e10 	movtmi	r0, #15888	; 0x3e10
    32b8:	a2040052 	andge	r0, r4, #82	; 0x52
    32bc:	00000158 	andeq	r0, r0, r8, asr r1
    32c0:	48530e14 	ldmdami	r3, {r2, r4, r9, sl, fp}^
    32c4:	a3040050 	movwge	r0, #16464	; 0x4050
    32c8:	000002ce 	andeq	r0, r0, lr, asr #5
    32cc:	01db0618 	bicseq	r0, fp, r8, lsl r6
    32d0:	a4040000 	strge	r0, [r4], #-0
    32d4:	00000158 	andeq	r0, r0, r8, asr r1
    32d8:	00f20624 	rscseq	r0, r2, r4, lsr #12
    32dc:	a5040000 	strge	r0, [r4, #-0]
    32e0:	00000158 	andeq	r0, r0, r8, asr r1
    32e4:	023a0628 	eorseq	r0, sl, #40, 12	; 0x2800000
    32e8:	a6040000 	strge	r0, [r4], -r0
    32ec:	00000158 	andeq	r0, r0, r8, asr r1
    32f0:	0225062c 	eoreq	r0, r5, #44, 12	; 0x2c00000
    32f4:	a7040000 	strge	r0, [r4, -r0]
    32f8:	00000158 	andeq	r0, r0, r8, asr r1
    32fc:	01e10630 	mvneq	r0, r0, lsr r6
    3300:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    3304:	00000158 	andeq	r0, r0, r8, asr r1
    3308:	00c60634 	sbceq	r0, r6, r4, lsr r6
    330c:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
    3310:	00000158 	andeq	r0, r0, r8, asr r1
    3314:	02500638 	subseq	r0, r0, #56, 12	; 0x3800000
    3318:	aa040000 	bge	103320 <_Min_Stack_Size+0x103120>
    331c:	00000158 	andeq	r0, r0, r8, asr r1
    3320:	46500e3c 			; <UNDEFINED> instruction: 0x46500e3c
    3324:	ab040052 	blge	103474 <_Min_Stack_Size+0x103274>
    3328:	000002e8 	andeq	r0, r0, r8, ror #5
    332c:	46440e40 	strbmi	r0, [r4], -r0, asr #28
    3330:	ac040052 	stcge	0, cr0, [r4], {82}	; 0x52
    3334:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    3338:	44410e48 	strbmi	r0, [r1], #-3656	; 0xfffff1b8
    333c:	ad040052 	stcge	0, cr0, [r4, #-328]	; 0xfffffeb8
    3340:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    3344:	023f064c 	eorseq	r0, pc, #76, 12	; 0x4c00000
    3348:	ae040000 	cdpge	0, 0, cr0, cr4, cr0, {0}
    334c:	00000302 	andeq	r0, r0, r2, lsl #6
    3350:	02200650 	eoreq	r0, r0, #80, 12	; 0x5000000
    3354:	af040000 	svcge	0x00040000
    3358:	0000031c 	andeq	r0, r0, ip, lsl r3
    335c:	580f0060 	stmdapl	pc, {r5, r6}	; <UNPREDICTABLE>
    3360:	09000001 	stmdbeq	r0, {r0}
    3364:	000001a6 	andeq	r0, r0, r6, lsr #3
    3368:	000002ce 	andeq	r0, r0, lr, asr #5
    336c:	0001510a 	andeq	r5, r1, sl, lsl #2
    3370:	0b000b00 	bleq	5f78 <_Min_Stack_Size+0x5d78>
    3374:	000002be 			; <UNDEFINED> instruction: 0x000002be
    3378:	0002b909 	andeq	fp, r2, r9, lsl #18
    337c:	0002e300 	andeq	lr, r2, r0, lsl #6
    3380:	01510a00 	cmpeq	r1, r0, lsl #20
    3384:	00010000 	andeq	r0, r1, r0
    3388:	0002d30b 	andeq	sp, r2, fp, lsl #6
    338c:	02e30f00 	rsceq	r0, r3, #0, 30
    3390:	b9090000 	stmdblt	r9, {}	; <UNPREDICTABLE>
    3394:	fd000002 	stc2	0, cr0, [r0, #-8]
    3398:	0a000002 	beq	33a8 <_Min_Stack_Size+0x31a8>
    339c:	00000151 	andeq	r0, r0, r1, asr r1
    33a0:	ed0b0003 	stc	0, cr0, [fp, #-12]
    33a4:	0f000002 	svceq	0x00000002
    33a8:	000002fd 	strdeq	r0, [r0], -sp
    33ac:	0002b909 	andeq	fp, r2, r9, lsl #18
    33b0:	00031700 	andeq	r1, r3, r0, lsl #14
    33b4:	01510a00 	cmpeq	r1, r0, lsl #20
    33b8:	00040000 	andeq	r0, r4, r0
    33bc:	0003070b 	andeq	r0, r3, fp, lsl #14
    33c0:	03170f00 	tsteq	r7, #0, 30
    33c4:	a4030000 	strge	r0, [r3], #-0
    33c8:	04000001 	streq	r0, [r0], #-1
    33cc:	0001ccb0 			; <UNDEFINED> instruction: 0x0001ccb0
    33d0:	04101000 	ldreq	r1, [r0], #-0
    33d4:	036a016d 	cmneq	sl, #1073741851	; 0x4000001b
    33d8:	30110000 	andscc	r0, r1, r0
    33dc:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    33e0:	0158016f 	cmpeq	r8, pc, ror #2
    33e4:	11000000 	mrsne	r0, (UNDEF: 0)
    33e8:	000017f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    33ec:	58017004 	stmdapl	r1, {r2, ip, sp, lr}
    33f0:	04000001 	streq	r0, [r0], #-1
    33f4:	4c415612 	mcrrmi	6, 1, r5, r1, cr2
    33f8:	01710400 	cmneq	r1, r0, lsl #8
    33fc:	00000158 	andeq	r0, r0, r8, asr r1
    3400:	172a1108 	strne	r1, [sl, -r8, lsl #2]!
    3404:	72040000 	andvc	r0, r4, #0
    3408:	0002b901 	andeq	fp, r2, r1, lsl #18
    340c:	13000c00 	movwne	r0, #3072	; 0xc00
    3410:	0000175f 	andeq	r1, r0, pc, asr r7
    3414:	2c017304 	stccs	3, cr7, [r1], {4}
    3418:	14000003 	strne	r0, [r0], #-3
    341c:	00003301 	andeq	r3, r0, r1, lsl #6
    3420:	02090500 	andeq	r0, r9, #0, 10
    3424:	00000390 	muleq	r0, r0, r3
    3428:	0002f015 	andeq	pc, r2, r5, lsl r0	; <UNPREDICTABLE>
    342c:	62150000 	andsvs	r0, r5, #0
    3430:	01000004 	tsteq	r0, r4
    3434:	17d41300 	ldrbne	r1, [r4, r0, lsl #6]
    3438:	09050000 	stmdbeq	r5, {}	; <UNPREDICTABLE>
    343c:	00037602 	andeq	r7, r3, r2, lsl #12
    3440:	06040d00 	streq	r0, [r4], -r0, lsl #26
    3444:	0003d532 	andeq	sp, r3, r2, lsr r5
    3448:	177d0600 	ldrbne	r0, [sp, -r0, lsl #12]!
    344c:	34060000 	strcc	r0, [r6], #-0
    3450:	0000007d 	andeq	r0, r0, sp, ror r0
    3454:	17b20600 	ldrne	r0, [r2, r0, lsl #12]!
    3458:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
    345c:	0000007d 	andeq	r0, r0, sp, ror r0
    3460:	178d0601 	strne	r0, [sp, r1, lsl #12]
    3464:	3d060000 	stccc	0, cr0, [r6, #-0]
    3468:	0000007d 	andeq	r0, r0, sp, ror r0
    346c:	16610602 	strbtne	r0, [r1], -r2, lsl #12
    3470:	41060000 	mrsmi	r0, (UNDEF: 6)
    3474:	00000390 	muleq	r0, r0, r3
    3478:	50030003 	andpl	r0, r3, r3
    347c:	06000016 			; <UNDEFINED> instruction: 0x06000016
    3480:	00039c44 	andeq	r9, r3, r4, asr #24
    3484:	18031600 	stmdane	r3, {r9, sl, ip}
    3488:	60010000 	andvs	r0, r1, r0
    348c:	08005958 	stmdaeq	r0, {r3, r4, r6, r8, fp, ip, lr}
    3490:	00000024 	andeq	r0, r0, r4, lsr #32
    3494:	04049c01 	streq	r9, [r4], #-3073	; 0xfffff3ff
    3498:	00170000 	andseq	r0, r7, r0
    349c:	01000017 	tsteq	r0, r7, lsl r0
    34a0:	00008860 	andeq	r8, r0, r0, ror #16
    34a4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    34a8:	16c21600 	strbne	r1, [r2], r0, lsl #12
    34ac:	70010000 	andvc	r0, r1, r0
    34b0:	0800597c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, ip, lr}
    34b4:	000000c4 	andeq	r0, r0, r4, asr #1
    34b8:	04529c01 	ldrbeq	r9, [r2], #-3073	; 0xfffff3ff
    34bc:	86170000 	ldrhi	r0, [r7], -r0
    34c0:	01000016 	tsteq	r0, r6, lsl r0
    34c4:	00045270 	andeq	r5, r4, r0, ror r2
    34c8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    34cc:	00176c18 	andseq	r6, r7, r8, lsl ip
    34d0:	88720100 	ldmdahi	r2!, {r8}^
    34d4:	02000000 	andeq	r0, r0, #0
    34d8:	cc187491 	cfldrsgt	mvf7, [r8], {145}	; 0x91
    34dc:	01000016 	tsteq	r0, r6, lsl r0
    34e0:	00008872 	andeq	r8, r0, r2, ror r8
    34e4:	70910200 	addsvc	r0, r1, r0, lsl #4
    34e8:	00174418 	andseq	r4, r7, r8, lsl r4
    34ec:	88720100 	ldmdahi	r2!, {r8}^
    34f0:	02000000 	andeq	r0, r0, #0
    34f4:	19006c91 	stmdbne	r0, {r0, r4, r7, sl, fp, sp, lr}
    34f8:	0003d504 	andeq	sp, r3, r4, lsl #10
    34fc:	16ae1600 	strtne	r1, [lr], r0, lsl #12
    3500:	9c010000 	stcls	0, cr0, [r1], {-0}
    3504:	00000000 	andeq	r0, r0, r0
    3508:	0000002c 	andeq	r0, r0, ip, lsr #32
    350c:	048a9c01 	streq	r9, [sl], #3073	; 0xc01
    3510:	e4170000 	ldr	r0, [r7], #-0
    3514:	01000017 	tsteq	r0, r7, lsl r0
    3518:	0000889c 	muleq	r0, ip, r8
    351c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3520:	00121917 	andseq	r1, r2, r7, lsl r9
    3524:	889c0100 	ldmhi	ip, {r8}
    3528:	02000000 	andeq	r0, r0, #0
    352c:	16007091 			; <UNDEFINED> instruction: 0x16007091
    3530:	0000174b 	andeq	r1, r0, fp, asr #14
    3534:	0000af01 	andeq	sl, r0, r1, lsl #30
    3538:	00400000 	subeq	r0, r0, r0
    353c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3540:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    3544:	0017f617 	andseq	pc, r7, r7, lsl r6	; <UNPREDICTABLE>
    3548:	7daf0100 	stfvcs	f0, [pc]	; 3550 <_Min_Stack_Size+0x3350>
    354c:	02000000 	andeq	r0, r0, #0
    3550:	13177791 	tstne	r7, #38010880	; 0x2440000
    3554:	01000017 	tsteq	r0, r7, lsl r0
    3558:	000390af 	andeq	r9, r3, pc, lsr #1
    355c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    3560:	16961600 	ldrne	r1, [r6], r0, lsl #12
    3564:	c7010000 	strgt	r0, [r1, -r0]
    3568:	00000000 	andeq	r0, r0, r0
    356c:	00000038 	andeq	r0, r0, r8, lsr r0
    3570:	04e09c01 	strbteq	r9, [r0], #3073	; 0xc01
    3574:	74170000 	ldrvc	r0, [r7], #-0
    3578:	01000016 	tsteq	r0, r6, lsl r0
    357c:	000088c7 	andeq	r8, r0, r7, asr #17
    3580:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3584:	026c1a00 	rsbeq	r1, ip, #0, 20
    3588:	ce040000 	cdpgt	0, 0, cr0, cr4, cr0, {0}
    358c:	0004ec06 	andeq	lr, r4, r6, lsl #24
    3590:	006f0b00 	rsbeq	r0, pc, r0, lsl #22
    3594:	89000000 	stmdbhi	r0, {}	; <UNPREDICTABLE>
    3598:	04000008 	streq	r0, [r0], #-8
    359c:	000e3600 	andeq	r3, lr, r0, lsl #12
    35a0:	11010400 	tstne	r1, r0, lsl #8
    35a4:	0c000001 	stceq	0, cr0, [r0], {1}
    35a8:	00001b53 	andeq	r1, r0, r3, asr fp
    35ac:	00000378 	andeq	r0, r0, r8, ror r3
    35b0:	00000000 	andeq	r0, r0, r0
    35b4:	00001af7 	strdeq	r1, [r0], -r7
    35b8:	92060102 	andls	r0, r6, #-2147483648	; 0x80000000
    35bc:	03000001 	movweq	r0, #1
    35c0:	000000e3 	andeq	r0, r0, r3, ror #1
    35c4:	00331d02 	eorseq	r1, r3, r2, lsl #26
    35c8:	01020000 	mrseq	r0, (UNDEF: 2)
    35cc:	00019008 	andeq	r9, r1, r8
    35d0:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    35d4:	00000095 	muleq	r0, r5, r0
    35d8:	00007203 	andeq	r7, r0, r3, lsl #4
    35dc:	4c2b0200 	sfmmi	f0, 4, [fp], #-0
    35e0:	02000000 	andeq	r0, r0, #0
    35e4:	01f20702 	mvnseq	r0, r2, lsl #14
    35e8:	04020000 	streq	r0, [r2], #-0
    35ec:	0000bd05 	andeq	fp, r0, r5, lsl #26
    35f0:	00670300 	rsbeq	r0, r7, r0, lsl #6
    35f4:	41020000 	mrsmi	r0, (UNDEF: 2)
    35f8:	00000065 	andeq	r0, r0, r5, rrx
    35fc:	c9070402 	stmdbgt	r7, {r1, sl}
    3600:	02000001 	andeq	r0, r0, #1
    3604:	00b80508 	adcseq	r0, r8, r8, lsl #10
    3608:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    360c:	0001c407 	andeq	ip, r1, r7, lsl #8
    3610:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    3614:	00746e69 	rsbseq	r6, r4, r9, ror #28
    3618:	ce070402 	cdpgt	4, 0, cr0, cr7, cr2, {0}
    361c:	03000001 	movweq	r0, #1
    3620:	000000e5 	andeq	r0, r0, r5, ror #1
    3624:	00281803 	eoreq	r1, r8, r3, lsl #16
    3628:	74030000 	strvc	r0, [r3], #-0
    362c:	03000000 	movweq	r0, #0
    3630:	00004124 	andeq	r4, r0, r4, lsr #2
    3634:	00690300 	rsbeq	r0, r9, r0, lsl #6
    3638:	30030000 	andcc	r0, r3, r0
    363c:	0000005a 	andeq	r0, r0, sl, asr r0
    3640:	59070402 	stmdbpl	r7, {r1, sl}
    3644:	05000000 	streq	r0, [r0, #-0]
    3648:	0000009e 	muleq	r0, lr, r0
    364c:	00008806 	andeq	r8, r0, r6, lsl #16
    3650:	00b50500 	adcseq	r0, r5, r0, lsl #10
    3654:	01070000 	mrseq	r0, (UNDEF: 7)
    3658:	00000033 	andeq	r0, r0, r3, lsr r0
    365c:	d9020704 	stmdble	r2, {r2, r8, r9, sl}
    3660:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3664:	00001c74 	andeq	r1, r0, r4, ror ip
    3668:	45530900 	ldrbmi	r0, [r3, #-2304]	; 0xfffff700
    366c:	00010054 	andeq	r0, r1, r4, asr r0
    3670:	002e770a 	eoreq	r7, lr, sl, lsl #14
    3674:	02070400 	andeq	r0, r7, #0, 8
    3678:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    367c:	002f950a 	eoreq	r9, pc, sl, lsl #10
    3680:	02070400 	andeq	r0, r7, #0, 8
    3684:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    3688:	00330107 	eorseq	r0, r3, r7, lsl #2
    368c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    3690:	00010b02 	andeq	r0, r1, r2, lsl #22
    3694:	02f00800 	rscseq	r0, r0, #0, 16
    3698:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    369c:	00000462 	andeq	r0, r0, r2, ror #8
    36a0:	d40a0001 	strle	r0, [sl], #-1
    36a4:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    36a8:	00f10209 	rscseq	r0, r1, r9, lsl #4
    36ac:	01070000 	mrseq	r0, (UNDEF: 7)
    36b0:	00000033 	andeq	r0, r0, r3, lsr r0
    36b4:	31020c04 	tstcc	r2, r4, lsl #24
    36b8:	08000001 	stmdaeq	r0, {r0}
    36bc:	00000341 	andeq	r0, r0, r1, asr #6
    36c0:	14150800 	ldrne	r0, [r5], #-2048	; 0xfffff800
    36c4:	00010000 	andeq	r0, r1, r0
    36c8:	00195b0a 	andseq	r5, r9, sl, lsl #22
    36cc:	020c0400 	andeq	r0, ip, #0, 8
    36d0:	00000117 	andeq	r0, r0, r7, lsl r1
    36d4:	3404280b 	strcc	r2, [r4], #-2059	; 0xfffff7f5
    36d8:	0001c804 	andeq	ip, r1, r4, lsl #16
    36dc:	52430c00 	subpl	r0, r3, #0, 24
    36e0:	04360400 	ldrteq	r0, [r6], #-1024	; 0xfffffc00
    36e4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    36e8:	21660d00 	cmncs	r6, r0, lsl #26
    36ec:	37040000 	strcc	r0, [r4, -r0]
    36f0:	0000b004 	andeq	fp, r0, r4
    36f4:	430c0400 	movwmi	r0, #50176	; 0xc400
    36f8:	04005249 	streq	r5, [r0], #-585	; 0xfffffdb7
    36fc:	00b00438 	adcseq	r0, r0, r8, lsr r4
    3700:	0d080000 	stceq	0, cr0, [r8, #-0]
    3704:	000000da 	ldrdeq	r0, [r0], -sl
    3708:	b0043904 	andlt	r3, r4, r4, lsl #18
    370c:	0c000000 	stceq	0, cr0, [r0], {-0}
    3710:	0000500d 	andeq	r5, r0, sp
    3714:	043a0400 	ldrteq	r0, [sl], #-1024	; 0xfffffc00
    3718:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    371c:	00d30d10 	sbcseq	r0, r3, r0, lsl sp
    3720:	3b040000 	blcc	103728 <_Min_Stack_Size+0x103528>
    3724:	0000b004 	andeq	fp, r0, r4
    3728:	ad0d1400 	cfstrsge	mvf1, [sp, #-0]
    372c:	04000001 	streq	r0, [r0], #-1
    3730:	00b0043c 	adcseq	r0, r0, ip, lsr r4
    3734:	0d180000 	ldceq	0, cr0, [r8, #-0]
    3738:	0000008d 	andeq	r0, r0, sp, lsl #1
    373c:	b0043d04 	andlt	r3, r4, r4, lsl #26
    3740:	1c000000 	stcne	0, cr0, [r0], {-0}
    3744:	0000620d 	andeq	r6, r0, sp, lsl #4
    3748:	043e0400 	ldrteq	r0, [lr], #-1024	; 0xfffffc00
    374c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    3750:	53430c20 	movtpl	r0, #15392	; 0x3c20
    3754:	3f040052 	svccc	0x00040052
    3758:	0000b004 	andeq	fp, r0, r4
    375c:	0a002400 	beq	c764 <_Min_Stack_Size+0xc564>
    3760:	000000a4 	andeq	r0, r0, r4, lsr #1
    3764:	3d044a04 	vstrcc	s8, [r4, #-16]
    3768:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    376c:	192e0514 	stmdbne	lr!, {r2, r4, r8, sl}
    3770:	0f000002 	svceq	0x00000002
    3774:	00001a80 	andeq	r1, r0, r0, lsl #21
    3778:	009e3005 	addseq	r3, lr, r5
    377c:	0f000000 	svceq	0x00000000
    3780:	000018d2 	ldrdeq	r1, [r0], -r2
    3784:	009e3105 	addseq	r3, lr, r5, lsl #2
    3788:	0f040000 	svceq	0x00040000
    378c:	00001ae9 	andeq	r1, r0, r9, ror #21
    3790:	009e3205 	addseq	r3, lr, r5, lsl #4
    3794:	0f080000 	svceq	0x00080000
    3798:	00001a9c 	muleq	r0, ip, sl
    379c:	009e3305 	addseq	r3, lr, r5, lsl #6
    37a0:	0f0c0000 	svceq	0x000c0000
    37a4:	00001a61 	andeq	r1, r0, r1, ror #20
    37a8:	009e3405 	addseq	r3, lr, r5, lsl #8
    37ac:	00100000 	andseq	r0, r0, r0
    37b0:	00189f03 	andseq	r9, r8, r3, lsl #30
    37b4:	d4350500 	ldrtle	r0, [r5], #-1280	; 0xfffffb00
    37b8:	10000001 	andne	r0, r0, r1
    37bc:	00001904 	andeq	r1, r0, r4, lsl #18
    37c0:	0000d901 	andeq	sp, r0, r1, lsl #18
    37c4:	005c0000 	subseq	r0, ip, r0
    37c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    37cc:	001a7211 	andseq	r7, sl, r1, lsl r2
    37d0:	010e0100 	mrseq	r0, (UNDEF: 30)
    37d4:	00000000 	andeq	r0, r0, r0
    37d8:	0000005c 	andeq	r0, r0, ip, asr r0
    37dc:	025b9c01 	subseq	r9, fp, #256	; 0x100
    37e0:	d0120000 	andsle	r0, r2, r0
    37e4:	0100001a 	tsteq	r0, sl, lsl r0
    37e8:	009e010e 	addseq	r0, lr, lr, lsl #2
    37ec:	91020000 	mrsls	r0, (UNDEF: 2)
    37f0:	0f130074 	svceq	0x00130074
    37f4:	01000019 	tsteq	r0, r9, lsl r0
    37f8:	01310130 	teqeq	r1, r0, lsr r1
    37fc:	00000000 	andeq	r0, r0, r0
    3800:	00500000 	subseq	r0, r0, r0
    3804:	9c010000 	stcls	0, cr0, [r1], {-0}
    3808:	000002a3 	andeq	r0, r0, r3, lsr #5
    380c:	0001b514 	andeq	fp, r1, r4, lsl r5
    3810:	01320100 	teqeq	r2, r0, lsl #2
    3814:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    3818:	14709102 	ldrbtne	r9, [r0], #-258	; 0xfffffefe
    381c:	00003e47 	andeq	r3, r0, r7, asr #28
    3820:	31013301 	tstcc	r1, r1, lsl #6
    3824:	02000001 	andeq	r0, r0, #1
    3828:	7d147791 	ldcvc	7, cr7, [r4, #-580]	; 0xfffffdbc
    382c:	01000000 	mrseq	r0, (UNDEF: 0)
    3830:	00d90134 	sbcseq	r0, r9, r4, lsr r1
    3834:	91020000 	mrsls	r0, (UNDEF: 2)
    3838:	b2110076 	andslt	r0, r1, #118	; 0x76
    383c:	0100001b 	tsteq	r0, fp, lsl r0
    3840:	0000014e 	andeq	r0, r0, lr, asr #2
    3844:	003c0000 	eorseq	r0, ip, r0
    3848:	9c010000 	stcls	0, cr0, [r1], {-0}
    384c:	000002d8 	ldrdeq	r0, [r0], -r8
    3850:	001bbc12 	andseq	fp, fp, r2, lsl ip
    3854:	014e0100 	mrseq	r0, (UNDEF: 94)
    3858:	00000088 	andeq	r0, r0, r8, lsl #1
    385c:	146f9102 	strbtne	r9, [pc], #-258	; 3864 <_Min_Stack_Size+0x3664>
    3860:	000019a7 	andeq	r1, r0, r7, lsr #19
    3864:	9e015001 	cdpls	0, 0, cr5, cr1, cr1, {0}
    3868:	02000000 	andeq	r0, r0, #0
    386c:	11007491 			; <UNDEFINED> instruction: 0x11007491
    3870:	00001b98 	muleq	r0, r8, fp
    3874:	00016201 	andeq	r6, r1, r1, lsl #4
    3878:	20000000 	andcs	r0, r0, r0
    387c:	01000000 	mrseq	r0, (UNDEF: 0)
    3880:	0002fe9c 	muleq	r2, ip, lr
    3884:	17131200 	ldrne	r1, [r3, -r0, lsl #4]
    3888:	62010000 	andvs	r0, r1, #0
    388c:	00010b01 	andeq	r0, r1, r1, lsl #22
    3890:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3894:	194d1100 	stmdbne	sp, {r8, ip}^
    3898:	7a010000 	bvc	438a0 <_Min_Stack_Size+0x436a0>
    389c:	00000001 	andeq	r0, r0, r1
    38a0:	00003c00 	andeq	r3, r0, r0, lsl #24
    38a4:	429c0100 	addsmi	r0, ip, #0, 2
    38a8:	12000003 	andne	r0, r0, #3
    38ac:	000019f5 	strdeq	r1, [r0], -r5
    38b0:	9e017a01 	vmlals.f32	s14, s2, s2
    38b4:	02000000 	andeq	r0, r0, #0
    38b8:	b1126c91 			; <UNDEFINED> instruction: 0xb1126c91
    38bc:	01000018 	tsteq	r0, r8, lsl r0
    38c0:	009e017a 	addseq	r0, lr, sl, ror r1
    38c4:	91020000 	mrsls	r0, (UNDEF: 2)
    38c8:	19a71468 	stmibne	r7!, {r3, r5, r6, sl, ip}
    38cc:	7c010000 	stcvc	0, cr0, [r1], {-0}
    38d0:	00009e01 	andeq	r9, r0, r1, lsl #28
    38d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    38d8:	18941100 	ldmne	r4, {r8, ip}
    38dc:	91010000 	mrsls	r0, (UNDEF: 1)
    38e0:	00000001 	andeq	r0, r0, r1
    38e4:	00002000 	andeq	r2, r0, r0
    38e8:	689c0100 	ldmvs	ip, {r8}
    38ec:	12000003 	andne	r0, r0, #3
    38f0:	00001713 	andeq	r1, r0, r3, lsl r7
    38f4:	0b019101 	bleq	67d00 <_Min_Stack_Size+0x67b00>
    38f8:	02000001 	andeq	r0, r0, #1
    38fc:	11007791 			; <UNDEFINED> instruction: 0x11007791
    3900:	00001a03 	andeq	r1, r0, r3, lsl #20
    3904:	00023401 	andeq	r3, r2, r1, lsl #8
    3908:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    390c:	01000000 	mrseq	r0, (UNDEF: 0)
    3910:	00039d9c 	muleq	r3, ip, sp
    3914:	1ad81200 	bne	ff60811c <BootRAM+0xe5788bd>
    3918:	34010000 	strcc	r0, [r1], #-0
    391c:	00009e02 	andeq	r9, r0, r2, lsl #28
    3920:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3924:	0019a714 	andseq	sl, r9, r4, lsl r7
    3928:	02360100 	eorseq	r0, r6, #0, 2
    392c:	0000009e 	muleq	r0, lr, r0
    3930:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3934:	00198315 	andseq	r8, r9, r5, lsl r3
    3938:	024b0100 	subeq	r0, fp, #0, 2
    393c:	00000088 	andeq	r0, r0, r8, lsl #1
    3940:	00000000 	andeq	r0, r0, r0
    3944:	0000001c 	andeq	r0, r0, ip, lsl r0
    3948:	89119c01 	ldmdbhi	r1, {r0, sl, fp, ip, pc}
    394c:	0100001b 	tsteq	r0, fp, lsl r0
    3950:	00000260 	andeq	r0, r0, r0, ror #4
    3954:	00380000 	eorseq	r0, r8, r0
    3958:	9c010000 	stcls	0, cr0, [r1], {-0}
    395c:	000003e8 	andeq	r0, r0, r8, ror #7
    3960:	001a5612 	andseq	r5, sl, r2, lsl r6
    3964:	02600100 	rsbeq	r0, r0, #0, 2
    3968:	0000009e 	muleq	r0, lr, r0
    396c:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    3970:	000019a7 	andeq	r1, r0, r7, lsr #19
    3974:	9e026201 	cdpls	2, 0, cr6, cr2, cr1, {0}
    3978:	02000000 	andeq	r0, r0, #0
    397c:	11007491 			; <UNDEFINED> instruction: 0x11007491
    3980:	00001997 	muleq	r0, r7, r9
    3984:	00027a01 	andeq	r7, r2, r1, lsl #20
    3988:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    398c:	01000000 	mrseq	r0, (UNDEF: 0)
    3990:	00041d9c 	muleq	r4, ip, sp
    3994:	181c1200 	ldmdane	ip, {r9, ip}
    3998:	7a010000 	bvc	439a0 <_Min_Stack_Size+0x437a0>
    399c:	00009e02 	andeq	r9, r0, r2, lsl #28
    39a0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    39a4:	0019a714 	andseq	sl, r9, r4, lsl r7
    39a8:	027c0100 	rsbseq	r0, ip, #0, 2
    39ac:	0000009e 	muleq	r0, lr, r0
    39b0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    39b4:	001bde11 	andseq	sp, fp, r1, lsl lr
    39b8:	02940100 	addseq	r0, r4, #0, 2
    39bc:	00000000 	andeq	r0, r0, r0
    39c0:	00000038 	andeq	r0, r0, r8, lsr r0
    39c4:	04529c01 	ldrbeq	r9, [r2], #-3073	; 0xfffff3ff
    39c8:	1c120000 	ldcne	0, cr0, [r2], {-0}
    39cc:	01000018 	tsteq	r0, r8, lsl r0
    39d0:	009e0294 	umullseq	r0, lr, r4, r2
    39d4:	91020000 	mrsls	r0, (UNDEF: 2)
    39d8:	19a7146c 	stmibne	r7!, {r2, r3, r5, r6, sl, ip}
    39dc:	96010000 	strls	r0, [r1], -r0
    39e0:	00009e02 	andeq	r9, r0, r2, lsl #28
    39e4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    39e8:	1aac1100 	bne	feb07df0 <BootRAM+0xda78591>
    39ec:	bc010000 	stclt	0, cr0, [r1], {-0}
    39f0:	00000002 	andeq	r0, r0, r2
    39f4:	00004c00 	andeq	r4, r0, r0, lsl #24
    39f8:	879c0100 	ldrhi	r0, [ip, r0, lsl #2]
    39fc:	12000004 	andne	r0, r0, #4
    3a00:	00001bab 	andeq	r1, r0, fp, lsr #23
    3a04:	8802bc01 	stmdahi	r2, {r0, sl, fp, ip, sp, pc}
    3a08:	02000000 	andeq	r0, r0, #0
    3a0c:	13127791 	tstne	r2, #38010880	; 0x2440000
    3a10:	01000017 	tsteq	r0, r7, lsl r0
    3a14:	010b02bc 			; <UNDEFINED> instruction: 0x010b02bc
    3a18:	91020000 	mrsls	r0, (UNDEF: 2)
    3a1c:	67110076 			; <UNDEFINED> instruction: 0x67110076
    3a20:	01000019 	tsteq	r0, r9, lsl r0
    3a24:	000002d8 	ldrdeq	r0, [r0], -r8
    3a28:	001c0000 	andseq	r0, ip, r0
    3a2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3a30:	000004ad 	andeq	r0, r0, sp, lsr #9
    3a34:	001a3712 	andseq	r3, sl, r2, lsl r7
    3a38:	02d80100 	sbcseq	r0, r8, #0, 2
    3a3c:	0000009e 	muleq	r0, lr, r0
    3a40:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3a44:	00182511 	andseq	r2, r8, r1, lsl r5
    3a48:	02fe0100 	rscseq	r0, lr, #0, 2
    3a4c:	00000000 	andeq	r0, r0, r0
    3a50:	00000038 	andeq	r0, r0, r8, lsr r0
    3a54:	04e29c01 	strbteq	r9, [r2], #3073	; 0xc01
    3a58:	8a120000 	bhi	483a60 <_Min_Stack_Size+0x483860>
    3a5c:	01000018 	tsteq	r0, r8, lsl r0
    3a60:	009e02fe 			; <UNDEFINED> instruction: 0x009e02fe
    3a64:	91020000 	mrsls	r0, (UNDEF: 2)
    3a68:	19a7146c 	stmibne	r7!, {r2, r3, r5, r6, sl, ip}
    3a6c:	00010000 	andeq	r0, r1, r0
    3a70:	00009e03 	andeq	r9, r0, r3, lsl #28
    3a74:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3a78:	1af91100 	bne	ffe47e80 <BootRAM+0xedb8621>
    3a7c:	3d010000 	stccc	0, cr0, [r1, #-0]
    3a80:	005a4003 	subseq	r4, sl, r3
    3a84:	00004008 	andeq	r4, r0, r8
    3a88:	089c0100 	ldmeq	ip, {r8}
    3a8c:	12000005 	andne	r0, r0, #5
    3a90:	00001863 	andeq	r1, r0, r3, ror #16
    3a94:	88033d01 	stmdahi	r3, {r0, r8, sl, fp, ip, sp}
    3a98:	02000000 	andeq	r0, r0, #0
    3a9c:	11007791 			; <UNDEFINED> instruction: 0x11007791
    3aa0:	00001978 	andeq	r1, r0, r8, ror r9
    3aa4:	80035e01 	andhi	r5, r3, r1, lsl #28
    3aa8:	2008005a 	andcs	r0, r8, sl, asr r0
    3aac:	01000000 	mrseq	r0, (UNDEF: 0)
    3ab0:	00052e9c 	muleq	r5, ip, lr
    3ab4:	17131200 	ldrne	r1, [r3, -r0, lsl #4]
    3ab8:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    3abc:	00010b03 	andeq	r0, r1, r3, lsl #22
    3ac0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3ac4:	1a261100 	bne	987ecc <_Min_Stack_Size+0x987ccc>
    3ac8:	6f010000 	svcvs	0x00010000
    3acc:	005aa003 	subseq	sl, sl, r3
    3ad0:	00002408 	andeq	r2, r0, r8, lsl #8
    3ad4:	549c0100 	ldrpl	r0, [ip], #256	; 0x100
    3ad8:	12000005 	andne	r0, r0, #5
    3adc:	00001925 	andeq	r1, r0, r5, lsr #18
    3ae0:	9e036f01 	cdpls	15, 0, cr6, cr3, cr1, {0}
    3ae4:	02000000 	andeq	r0, r0, #0
    3ae8:	11007491 			; <UNDEFINED> instruction: 0x11007491
    3aec:	00001b2a 	andeq	r1, r0, sl, lsr #22
    3af0:	c4037d01 	strgt	r7, [r3], #-3329	; 0xfffff2ff
    3af4:	2008005a 	andcs	r0, r8, sl, asr r0
    3af8:	01000000 	mrseq	r0, (UNDEF: 0)
    3afc:	00057a9c 	muleq	r5, ip, sl
    3b00:	17131200 	ldrne	r1, [r3, -r0, lsl #4]
    3b04:	7d010000 	stcvc	0, cr0, [r1, #-0]
    3b08:	00010b03 	andeq	r0, r1, r3, lsl #22
    3b0c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3b10:	1b181100 	blne	607f18 <_Min_Stack_Size+0x607d18>
    3b14:	8c010000 	stchi	0, cr0, [r1], {-0}
    3b18:	005ae403 	subseq	lr, sl, r3, lsl #8
    3b1c:	00016008 	andeq	r6, r1, r8
    3b20:	dc9c0100 	ldfles	f0, [ip], {0}
    3b24:	12000005 	andne	r0, r0, #5
    3b28:	00001a91 	muleq	r0, r1, sl
    3b2c:	dc038c01 	stcle	12, cr8, [r3], {1}
    3b30:	02000005 	andeq	r0, r0, #5
    3b34:	74166491 	ldrvc	r6, [r6], #-1169	; 0xfffffb6f
    3b38:	0100706d 	tsteq	r0, sp, rrx
    3b3c:	009e038e 	addseq	r0, lr, lr, lsl #7
    3b40:	91020000 	mrsls	r0, (UNDEF: 2)
    3b44:	00cb1474 	sbceq	r1, fp, r4, ror r4
    3b48:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    3b4c:	00009e03 	andeq	r9, r0, r3, lsl #28
    3b50:	70910200 	addsvc	r0, r1, r0, lsl #4
    3b54:	00010714 	andeq	r0, r1, r4, lsl r7
    3b58:	038e0100 	orreq	r0, lr, #0, 2
    3b5c:	0000009e 	muleq	r0, lr, r0
    3b60:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    3b64:	000018f0 	strdeq	r1, [r0], -r0
    3b68:	9e038e01 	cdpls	14, 0, cr8, cr3, cr1, {0}
    3b6c:	02000000 	andeq	r0, r0, #0
    3b70:	17006891 			; <UNDEFINED> instruction: 0x17006891
    3b74:	00021904 	andeq	r1, r2, r4, lsl #18
    3b78:	18bc1100 	ldmne	ip!, {r8, ip}
    3b7c:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    3b80:	00000004 	andeq	r0, r0, r4
    3b84:	00003c00 	andeq	r3, r0, r0, lsl #24
    3b88:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    3b8c:	12000006 	andne	r0, r0, #6
    3b90:	00001bd0 	ldrdeq	r1, [r0], -r0
    3b94:	9e042801 	cdpls	8, 0, cr2, cr4, cr1, {0}
    3b98:	02000000 	andeq	r0, r0, #0
    3b9c:	13127491 	tstne	r2, #-1862270976	; 0x91000000
    3ba0:	01000017 	tsteq	r0, r7, lsl r0
    3ba4:	010b0428 	tsteq	fp, r8, lsr #8
    3ba8:	91020000 	mrsls	r0, (UNDEF: 2)
    3bac:	b9110073 	ldmdblt	r1, {r0, r1, r4, r5, r6}
    3bb0:	0100001a 	tsteq	r0, sl, lsl r0
    3bb4:	5c440447 	cfstrdpl	mvd0, [r4], {71}	; 0x47
    3bb8:	003c0800 	eorseq	r0, ip, r0, lsl #16
    3bbc:	9c010000 	stcls	0, cr0, [r1], {-0}
    3bc0:	0000064c 	andeq	r0, r0, ip, asr #12
    3bc4:	00187b12 	andseq	r7, r8, r2, lsl fp
    3bc8:	04470100 	strbeq	r0, [r7], #-256	; 0xffffff00
    3bcc:	0000009e 	muleq	r0, lr, r0
    3bd0:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    3bd4:	00001713 	andeq	r1, r0, r3, lsl r7
    3bd8:	0b044701 	bleq	1157e4 <_Min_Stack_Size+0x1155e4>
    3bdc:	02000001 	andeq	r0, r0, #1
    3be0:	11007391 			; <UNDEFINED> instruction: 0x11007391
    3be4:	000019c2 	andeq	r1, r0, r2, asr #19
    3be8:	80046601 	andhi	r6, r4, r1, lsl #12
    3bec:	3c08005c 	stccc	0, cr0, [r8], {92}	; 0x5c
    3bf0:	01000000 	mrseq	r0, (UNDEF: 0)
    3bf4:	0006819c 	muleq	r6, ip, r1
    3bf8:	18e11200 	stmiane	r1!, {r9, ip}^
    3bfc:	66010000 	strvs	r0, [r1], -r0
    3c00:	00009e04 	andeq	r9, r0, r4, lsl #28
    3c04:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3c08:	00171312 	andseq	r1, r7, r2, lsl r3
    3c0c:	04660100 	strbteq	r0, [r6], #-256	; 0xffffff00
    3c10:	0000010b 	andeq	r0, r0, fp, lsl #2
    3c14:	00739102 	rsbseq	r9, r3, r2, lsl #2
    3c18:	00184c11 	andseq	r4, r8, r1, lsl ip
    3c1c:	04a10100 	strteq	r0, [r1], #256	; 0x100
    3c20:	00000000 	andeq	r0, r0, r0
    3c24:	0000003c 	andeq	r0, r0, ip, lsr r0
    3c28:	06b69c01 	ldrteq	r9, [r6], r1, lsl #24
    3c2c:	7b120000 	blvc	483c34 <_Min_Stack_Size+0x483a34>
    3c30:	01000018 	tsteq	r0, r8, lsl r0
    3c34:	009e04a1 	addseq	r0, lr, r1, lsr #9
    3c38:	91020000 	mrsls	r0, (UNDEF: 2)
    3c3c:	17131274 			; <UNDEFINED> instruction: 0x17131274
    3c40:	a1010000 	mrsge	r0, (UNDEF: 1)
    3c44:	00010b04 	andeq	r0, r1, r4, lsl #22
    3c48:	73910200 	orrsvc	r0, r1, #0, 4
    3c4c:	19361100 	ldmdbne	r6!, {r8, ip}
    3c50:	c0010000 	andgt	r0, r1, r0
    3c54:	005cbc04 	subseq	fp, ip, r4, lsl #24
    3c58:	00003c08 	andeq	r3, r0, r8, lsl #24
    3c5c:	eb9c0100 	bl	fe704064 <BootRAM+0xd674805>
    3c60:	12000006 	andne	r0, r0, #6
    3c64:	000018e1 	andeq	r1, r0, r1, ror #17
    3c68:	9e04c001 	cdpls	0, 0, cr12, cr4, cr1, {0}
    3c6c:	02000000 	andeq	r0, r0, #0
    3c70:	13127491 	tstne	r2, #-1862270976	; 0x91000000
    3c74:	01000017 	tsteq	r0, r7, lsl r0
    3c78:	010b04c0 	smlabteq	fp, r0, r4, r0
    3c7c:	91020000 	mrsls	r0, (UNDEF: 2)
    3c80:	d9110073 	ldmdble	r1, {r0, r1, r4, r5, r6}
    3c84:	01000019 	tsteq	r0, r9, lsl r0
    3c88:	5cf804d5 	cfldrdpl	mvd0, [r8], #852	; 0x354
    3c8c:	00200800 	eoreq	r0, r0, r0, lsl #16
    3c90:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c94:	00000711 	andeq	r0, r0, r1, lsl r7
    3c98:	00171312 	andseq	r1, r7, r2, lsl r3
    3c9c:	04d50100 	ldrbeq	r0, [r5], #256	; 0x100
    3ca0:	0000010b 	andeq	r0, r0, fp, lsl #2
    3ca4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3ca8:	001b3811 	andseq	r3, fp, r1, lsl r8
    3cac:	04e20100 	strbteq	r0, [r2], #256	; 0x100
    3cb0:	00000000 	andeq	r0, r0, r0
    3cb4:	00000020 	andeq	r0, r0, r0, lsr #32
    3cb8:	07379c01 	ldreq	r9, [r7, -r1, lsl #24]!
    3cbc:	13120000 	tstne	r2, #0
    3cc0:	01000017 	tsteq	r0, r7, lsl r0
    3cc4:	010b04e2 	smlatteq	fp, r2, r4, r0
    3cc8:	91020000 	mrsls	r0, (UNDEF: 2)
    3ccc:	f6110077 			; <UNDEFINED> instruction: 0xf6110077
    3cd0:	01000018 	tsteq	r0, r8, lsl r0
    3cd4:	00000502 	andeq	r0, r0, r2, lsl #10
    3cd8:	00200000 	eoreq	r0, r0, r0
    3cdc:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ce0:	0000075d 	andeq	r0, r0, sp, asr r7
    3ce4:	001ba312 	andseq	sl, fp, r2, lsl r3
    3ce8:	05020100 	streq	r0, [r2, #-256]	; 0xffffff00
    3cec:	00000088 	andeq	r0, r0, r8, lsl #1
    3cf0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3cf4:	001a1418 	andseq	r1, sl, r8, lsl r4
    3cf8:	052e0100 	streq	r0, [lr, #-256]!	; 0xffffff00
    3cfc:	000000d9 	ldrdeq	r0, [r0], -r9
    3d00:	08005d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, ip, lr}
    3d04:	00000074 	andeq	r0, r0, r4, ror r0
    3d08:	07b49c01 	ldreq	r9, [r4, r1, lsl #24]!
    3d0c:	ec120000 	ldc	0, cr0, [r2], {-0}
    3d10:	01000019 	tsteq	r0, r9, lsl r0
    3d14:	0088052e 	addeq	r0, r8, lr, lsr #10
    3d18:	91020000 	mrsls	r0, (UNDEF: 2)
    3d1c:	6d741667 	ldclvs	6, cr1, [r4, #-412]!	; 0xfffffe64
    3d20:	30010070 	andcc	r0, r1, r0, ror r0
    3d24:	00009e05 	andeq	r9, r0, r5, lsl #28
    3d28:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3d2c:	0019b814 	andseq	fp, r9, r4, lsl r8
    3d30:	05310100 	ldreq	r0, [r1, #-256]!	; 0xffffff00
    3d34:	0000009e 	muleq	r0, lr, r0
    3d38:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    3d3c:	000019ae 	andeq	r1, r0, lr, lsr #19
    3d40:	d9053201 	stmdble	r5, {r0, r9, ip, sp}
    3d44:	02000000 	andeq	r0, r0, #0
    3d48:	19007391 	stmdbne	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
    3d4c:	00001a48 	andeq	r1, r0, r8, asr #20
    3d50:	00055b01 	andeq	r5, r5, r1, lsl #22
    3d54:	1c000000 	stcne	0, cr0, [r0], {-0}
    3d58:	01000000 	mrseq	r0, (UNDEF: 0)
    3d5c:	186b189c 	stmdane	fp!, {r2, r3, r4, r7, fp, ip}^
    3d60:	7a010000 	bvc	43d68 <_Min_Stack_Size+0x43b68>
    3d64:	0000e505 	andeq	lr, r0, r5, lsl #10
    3d68:	00000000 	andeq	r0, r0, r0
    3d6c:	00003400 	andeq	r3, r0, r0, lsl #8
    3d70:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    3d74:	12000007 	andne	r0, r0, #7
    3d78:	00001bab 	andeq	r1, r0, fp, lsr #23
    3d7c:	88057a01 	stmdahi	r5, {r0, r9, fp, ip, sp, lr}
    3d80:	02000000 	andeq	r0, r0, #0
    3d84:	ae146f91 	mrcge	15, 0, r6, cr4, cr1, {4}
    3d88:	01000019 	tsteq	r0, r9, lsl r0
    3d8c:	00e5057c 	rsceq	r0, r5, ip, ror r5
    3d90:	91020000 	mrsls	r0, (UNDEF: 2)
    3d94:	36110077 			; <UNDEFINED> instruction: 0x36110077
    3d98:	01000018 	tsteq	r0, r8, lsl r0
    3d9c:	000005a8 	andeq	r0, r0, r8, lsr #11
    3da0:	00200000 	eoreq	r0, r0, r0
    3da4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3da8:	00000825 	andeq	r0, r0, r5, lsr #16
    3dac:	001bab12 	andseq	sl, fp, r2, lsl fp
    3db0:	05a80100 	streq	r0, [r8, #256]!	; 0x100
    3db4:	00000088 	andeq	r0, r0, r8, lsl #1
    3db8:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3dbc:	0000ba1a 	andeq	fp, r0, sl, lsl sl
    3dc0:	00083500 	andeq	r3, r8, r0, lsl #10
    3dc4:	00a91b00 	adceq	r1, r9, r0, lsl #22
    3dc8:	000f0000 	andeq	r0, pc, r0
    3dcc:	001b071c 	andseq	r0, fp, ip, lsl r7
    3dd0:	4bc10100 	blmi	ff0441d8 <BootRAM+0xdfb4979>
    3dd4:	05000008 	streq	r0, [r0, #-8]
    3dd8:	0000b803 	andeq	fp, r0, r3, lsl #16
    3ddc:	08250520 	stmdaeq	r5!, {r5, r8, sl}
    3de0:	46060000 	strmi	r0, [r6], -r0
    3de4:	1a000008 	bne	3e0c <_Min_Stack_Size+0x3c0c>
    3de8:	000000ba 	strheq	r0, [r0], -sl
    3dec:	00000860 	andeq	r0, r0, r0, ror #16
    3df0:	0000a91b 	andeq	sl, r0, fp, lsl r9
    3df4:	1c000300 	stcne	3, cr0, [r0], {-0}
    3df8:	00001bee 	andeq	r1, r0, lr, ror #23
    3dfc:	0876c201 	ldmdaeq	r6!, {r0, r9, lr, pc}^
    3e00:	03050000 	movweq	r0, #20480	; 0x5000
    3e04:	200000c8 	andcs	r0, r0, r8, asr #1
    3e08:	00085005 	andeq	r5, r8, r5
    3e0c:	08710600 	ldmdaeq	r1!, {r9, sl}^
    3e10:	6c1d0000 	ldcvs	0, cr0, [sp], {-0}
    3e14:	06000002 	streq	r0, [r0], -r2
    3e18:	088706ce 	stmeq	r7, {r1, r2, r3, r6, r7, r9, sl}
    3e1c:	7a050000 	bvc	143e24 <_Min_Stack_Size+0x143c24>
    3e20:	00000000 	andeq	r0, r0, r0
    3e24:	000006dc 	ldrdeq	r0, [r0], -ip
    3e28:	0ff20004 	svceq	0x00f20004
    3e2c:	01040000 	mrseq	r0, (UNDEF: 4)
    3e30:	00000111 	andeq	r0, r0, r1, lsl r1
    3e34:	001d760c 	andseq	r7, sp, ip, lsl #12
    3e38:	00048000 	andeq	r8, r4, r0
    3e3c:	00000000 	andeq	r0, r0, r0
    3e40:	001f4a00 	andseq	r4, pc, r0, lsl #20
    3e44:	06010200 	streq	r0, [r1], -r0, lsl #4
    3e48:	00000192 	muleq	r0, r2, r1
    3e4c:	0000e303 	andeq	lr, r0, r3, lsl #6
    3e50:	331d0200 	tstcc	sp, #0, 4
    3e54:	02000000 	andeq	r0, r0, #0
    3e58:	01900801 	orrseq	r0, r0, r1, lsl #16
    3e5c:	02020000 	andeq	r0, r2, #0
    3e60:	00009505 	andeq	r9, r0, r5, lsl #10
    3e64:	00720300 	rsbseq	r0, r2, r0, lsl #6
    3e68:	2b020000 	blcs	83e70 <_Min_Stack_Size+0x83c70>
    3e6c:	0000004c 	andeq	r0, r0, ip, asr #32
    3e70:	f2070202 	vhsub.s8	d0, d7, d2
    3e74:	02000001 	andeq	r0, r0, #1
    3e78:	00bd0504 	adcseq	r0, sp, r4, lsl #10
    3e7c:	67030000 	strvs	r0, [r3, -r0]
    3e80:	02000000 	andeq	r0, r0, #0
    3e84:	00006541 	andeq	r6, r0, r1, asr #10
    3e88:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3e8c:	000001c9 	andeq	r0, r0, r9, asr #3
    3e90:	b8050802 	stmdalt	r5, {r1, fp}
    3e94:	02000000 	andeq	r0, r0, #0
    3e98:	01c40708 	biceq	r0, r4, r8, lsl #14
    3e9c:	04040000 	streq	r0, [r4], #-0
    3ea0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    3ea4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3ea8:	000001ce 	andeq	r0, r0, lr, asr #3
    3eac:	0000e503 	andeq	lr, r0, r3, lsl #10
    3eb0:	28180300 	ldmdacs	r8, {r8, r9}
    3eb4:	03000000 	movweq	r0, #0
    3eb8:	00000074 	andeq	r0, r0, r4, ror r0
    3ebc:	00412403 	subeq	r2, r1, r3, lsl #8
    3ec0:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
    3ec4:	03000000 	movweq	r0, #0
    3ec8:	00005a30 	andeq	r5, r0, r0, lsr sl
    3ecc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3ed0:	00000059 	andeq	r0, r0, r9, asr r0
    3ed4:	00009e05 	andeq	r9, r0, r5, lsl #28
    3ed8:	38750600 	ldmdacc	r5!, {r9, sl}^
    3edc:	01f90400 	mvnseq	r0, r0, lsl #8
    3ee0:	00000088 	andeq	r0, r0, r8, lsl #1
    3ee4:	00330107 	eorseq	r0, r3, r7, lsl #2
    3ee8:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    3eec:	0000da02 	andeq	sp, r0, r2, lsl #20
    3ef0:	02f00800 	rscseq	r0, r0, #0, 16
    3ef4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3ef8:	00000462 	andeq	r0, r0, r2, ror #8
    3efc:	d4090001 	strle	r0, [r9], #-1
    3f00:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    3f04:	00c00209 	sbceq	r0, r0, r9, lsl #4
    3f08:	1c0a0000 	stcne	0, cr0, [sl], {-0}
    3f0c:	4b03e904 	blmi	fe324 <_Min_Stack_Size+0xfe124>
    3f10:	0b000001 	bleq	3f1c <_Min_Stack_Size+0x3d1c>
    3f14:	004c5243 	subeq	r5, ip, r3, asr #4
    3f18:	b003eb04 	andlt	lr, r3, r4, lsl #22
    3f1c:	00000000 	andeq	r0, r0, r0
    3f20:	4852430b 	ldmdami	r2, {r0, r1, r3, r8, r9, lr}^
    3f24:	03ec0400 	mvneq	r0, #0, 8
    3f28:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    3f2c:	44490b04 	strbmi	r0, [r9], #-2820	; 0xfffff4fc
    3f30:	ed040052 	stc	0, cr0, [r4, #-328]	; 0xfffffeb8
    3f34:	0000b003 	andeq	fp, r0, r3
    3f38:	4f0b0800 	svcmi	0x000b0800
    3f3c:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
    3f40:	00b003ee 	adcseq	r0, r0, lr, ror #7
    3f44:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    3f48:	00001d04 	andeq	r1, r0, r4, lsl #26
    3f4c:	b003ef04 	andlt	lr, r3, r4, lsl #30
    3f50:	10000000 	andne	r0, r0, r0
    3f54:	5252420b 	subspl	r4, r2, #-1342177280	; 0xb0000000
    3f58:	03f00400 	mvnseq	r0, #0, 8
    3f5c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    3f60:	1dd50c14 	ldclne	12, cr0, [r5, #80]	; 0x50
    3f64:	f1040000 	cps	#0
    3f68:	0000b003 	andeq	fp, r0, r3
    3f6c:	09001800 	stmdbeq	r0, {fp, ip}
    3f70:	00001bfc 	strdeq	r1, [r0], -ip
    3f74:	e603f204 	str	pc, [r3], -r4, lsl #4
    3f78:	0a000000 	beq	3f80 <_Min_Stack_Size+0x3d80>
    3f7c:	03f80420 	mvnseq	r0, #32, 8	; 0x20000000
    3f80:	000001a2 	andeq	r0, r0, r2, lsr #3
    3f84:	001ecc0c 	andseq	ip, lr, ip, lsl #24
    3f88:	03fa0400 	mvnseq	r0, #0, 8
    3f8c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    3f90:	1ea00c00 	cdpne	12, 10, cr0, cr0, cr0, {0}
    3f94:	fb040000 	blx	103f9e <_Min_Stack_Size+0x103d9e>
    3f98:	0000b003 	andeq	fp, r0, r3
    3f9c:	c20c0400 	andgt	r0, ip, #0, 8
    3fa0:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    3fa4:	01b203fc 			; <UNDEFINED> instruction: 0x01b203fc
    3fa8:	0c080000 	stceq	0, cr0, [r8], {-0}
    3fac:	000003c2 	andeq	r0, r0, r2, asr #7
    3fb0:	9e03fd04 	cdpls	13, 0, cr15, cr3, cr4, {0}
    3fb4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3fb8:	001e4e0c 	andseq	r4, lr, ip, lsl #28
    3fbc:	03fe0400 	mvnseq	r0, #0, 8
    3fc0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    3fc4:	b00d001c 	andlt	r0, sp, ip, lsl r0
    3fc8:	b2000000 	andlt	r0, r0, #0
    3fcc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    3fd0:	000000a9 	andeq	r0, r0, r9, lsr #1
    3fd4:	a2050003 	andge	r0, r5, #3
    3fd8:	09000001 	stmdbeq	r0, {r0}
    3fdc:	00001e77 	andeq	r1, r0, r7, ror lr
    3fe0:	5703ff04 	strpl	pc, [r3, -r4, lsl #30]
    3fe4:	0f000001 	svceq	0x00000001
    3fe8:	00003301 	andeq	r3, r0, r1, lsl #6
    3fec:	e23b0500 	eors	r0, fp, #0, 10
    3ff0:	08000001 	stmdaeq	r0, {r0}
    3ff4:	00001d1f 	andeq	r1, r0, pc, lsl sp
    3ff8:	1d550801 	ldclne	8, cr0, [r5, #-4]
    3ffc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4000:	00001ed1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    4004:	8e030003 	cdphi	0, 0, cr0, cr3, cr3, {0}
    4008:	0500001e 	streq	r0, [r0, #-30]	; 0xffffffe2
    400c:	0001c33f 	andeq	ip, r1, pc, lsr r3
    4010:	33010f00 	movwcc	r0, #7936	; 0x1f00
    4014:	05000000 	streq	r0, [r0, #-0]
    4018:	00022a48 	andeq	r2, r2, r8, asr #20
    401c:	1e540800 	cdpne	8, 5, cr0, cr4, cr0, {0}
    4020:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4024:	00001f02 	andeq	r1, r0, r2, lsl #30
    4028:	1e040804 	cdpne	8, 0, cr0, cr4, cr4, {0}
    402c:	08280000 	stmdaeq	r8!, {}	; <UNPREDICTABLE>
    4030:	00001e3b 	andeq	r1, r0, fp, lsr lr
    4034:	1d300848 	ldcne	8, cr0, [r0, #-288]!	; 0xfffffee0
    4038:	08140000 	ldmdaeq	r4, {}	; <UNPREDICTABLE>
    403c:	00001ebb 			; <UNDEFINED> instruction: 0x00001ebb
    4040:	1f3f0810 	svcne	0x003f0810
    4044:	081c0000 	ldmdaeq	ip, {}	; <UNPREDICTABLE>
    4048:	00001c35 	andeq	r1, r0, r5, lsr ip
    404c:	e2030018 	and	r0, r3, #24
    4050:	0500001e 	streq	r0, [r0, #-30]	; 0xffffffe2
    4054:	0001ed50 	andeq	lr, r1, r0, asr sp
    4058:	05041000 	streq	r1, [r4, #-0]
    405c:	0002625b 	andeq	r6, r2, fp, asr r2
    4060:	1c101100 	ldfnes	f1, [r0], {-0}
    4064:	5d050000 	stcpl	0, cr0, [r5, #-0]
    4068:	00000093 	muleq	r0, r3, r0
    406c:	1cad1100 	stfnes	f1, [sp]
    4070:	60050000 	andvs	r0, r5, r0
    4074:	000001e2 	andeq	r0, r0, r2, ror #3
    4078:	1e6d1102 	pownee	f1, f5, f2
    407c:	63050000 	movwvs	r0, #20480	; 0x5000
    4080:	0000022a 	andeq	r0, r0, sl, lsr #4
    4084:	65030003 	strvs	r0, [r3, #-3]
    4088:	0500001d 	streq	r0, [r0, #-29]	; 0xffffffe3
    408c:	00023565 	andeq	r3, r2, r5, ror #10
    4090:	33010f00 	movwcc	r0, #7936	; 0x1f00
    4094:	05000000 	streq	r0, [r0, #-0]
    4098:	0002866d 	andeq	r8, r2, sp, ror #12
    409c:	1c700800 	ldclne	8, cr0, [r0], #-0
    40a0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    40a4:	00001c19 	andeq	r1, r0, r9, lsl ip
    40a8:	84030001 	strhi	r0, [r3], #-1
    40ac:	0500001e 	streq	r0, [r0, #-30]	; 0xffffffe2
    40b0:	00026d6f 	andeq	r6, r2, pc, ror #26
    40b4:	1ce11200 	sfmne	f1, 2, [r1]
    40b8:	6c010000 	stcvs	0, cr0, [r1], {-0}
    40bc:	00000000 	andeq	r0, r0, r0
    40c0:	000000e4 	andeq	r0, r0, r4, ror #1
    40c4:	02b59c01 	adcseq	r9, r5, #256	; 0x100
    40c8:	a5130000 	ldrge	r0, [r3, #-0]
    40cc:	0100001e 	tsteq	r0, lr, lsl r0
    40d0:	0002b56c 	andeq	fp, r2, ip, ror #10
    40d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    40d8:	4b041400 	blmi	1090e0 <_Min_Stack_Size+0x108ee0>
    40dc:	15000001 	strne	r0, [r0, #-1]
    40e0:	00001f2f 	andeq	r1, r0, pc, lsr #30
    40e4:	00009f01 	andeq	r9, r0, r1, lsl #30
    40e8:	00180000 	andseq	r0, r8, r0
    40ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    40f0:	001cb816 	andseq	fp, ip, r6, lsl r8
    40f4:	8cad0100 	stfhis	f0, [sp]
    40f8:	7808005d 	stmdavc	r8, {r0, r2, r3, r4, r6}
    40fc:	01000001 	tsteq	r0, r1
    4100:	0003529c 	muleq	r3, ip, r2
    4104:	1ea51300 	cdpne	3, 10, cr1, cr5, cr0, {0}
    4108:	ad010000 	stcge	0, cr0, [r1, #-0]
    410c:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    4110:	135c9102 	cmpne	ip, #-2147483648	; 0x80000000
    4114:	00001eab 	andeq	r1, r0, fp, lsr #29
    4118:	0352ad01 	cmpeq	r2, #1, 26	; 0x40
    411c:	91020000 	mrsls	r0, (UNDEF: 2)
    4120:	1db51758 	ldcne	7, cr1, [r5, #352]!	; 0x160
    4124:	af010000 	svcge	0x00010000
    4128:	0000009e 	muleq	r0, lr, r0
    412c:	17749102 	ldrbne	r9, [r4, -r2, lsl #2]!
    4130:	00001e25 	andeq	r1, r0, r5, lsr #28
    4134:	009eaf01 	addseq	sl, lr, r1, lsl #30
    4138:	91020000 	mrsls	r0, (UNDEF: 2)
    413c:	1c091768 	stcne	7, cr1, [r9], {104}	; 0x68
    4140:	af010000 	svcge	0x00010000
    4144:	0000009e 	muleq	r0, lr, r0
    4148:	18709102 	ldmdane	r0!, {r1, r8, ip, pc}^
    414c:	00736f70 	rsbseq	r6, r3, r0, ror pc
    4150:	009eaf01 	addseq	sl, lr, r1, lsl #30
    4154:	91020000 	mrsls	r0, (UNDEF: 2)
    4158:	19a71764 	stmibne	r7!, {r2, r5, r6, r8, r9, sl, ip}
    415c:	b0010000 	andlt	r0, r1, r0
    4160:	0000009e 	muleq	r0, lr, r0
    4164:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    4168:	00001cc9 	andeq	r1, r0, r9, asr #25
    416c:	009eb001 	addseq	fp, lr, r1
    4170:	91020000 	mrsls	r0, (UNDEF: 2)
    4174:	04140060 	ldreq	r0, [r4], #-96	; 0xffffffa0
    4178:	00000262 	andeq	r0, r0, r2, ror #4
    417c:	001c5919 	andseq	r5, ip, r9, lsl r9
    4180:	010a0100 	mrseq	r0, (UNDEF: 26)
    4184:	00000000 	andeq	r0, r0, r0
    4188:	00000026 	andeq	r0, r0, r6, lsr #32
    418c:	037e9c01 	cmneq	lr, #256	; 0x100
    4190:	ab1a0000 	blge	684198 <_Min_Stack_Size+0x683f98>
    4194:	0100001e 	tsteq	r0, lr, lsl r0
    4198:	0352010a 	cmpeq	r2, #-2147483646	; 0x80000002
    419c:	91020000 	mrsls	r0, (UNDEF: 2)
    41a0:	091b0074 	ldmdbeq	fp, {r2, r4, r5, r6}
    41a4:	0100001d 	tsteq	r0, sp, lsl r0
    41a8:	00880119 	addeq	r0, r8, r9, lsl r1
    41ac:	00000000 	andeq	r0, r0, r0
    41b0:	00320000 	eorseq	r0, r2, r0
    41b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    41b8:	000003c6 	andeq	r0, r0, r6, asr #7
    41bc:	001ea51a 	andseq	sl, lr, sl, lsl r5
    41c0:	01190100 	tsteq	r9, r0, lsl #2
    41c4:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    41c8:	1a6c9102 	bne	1b285d8 <_Min_Stack_Size+0x1b283d8>
    41cc:	00001c10 	andeq	r1, r0, r0, lsl ip
    41d0:	93011901 	movwls	r1, #6401	; 0x1901
    41d4:	02000000 	andeq	r0, r0, #0
    41d8:	ae1c6a91 			; <UNDEFINED> instruction: 0xae1c6a91
    41dc:	01000019 	tsteq	r0, r9, lsl r0
    41e0:	0088011b 	addeq	r0, r8, fp, lsl r1
    41e4:	91020000 	mrsls	r0, (UNDEF: 2)
    41e8:	e91b0077 	ldmdb	fp, {r0, r1, r2, r4, r5, r6}
    41ec:	0100001d 	tsteq	r0, sp, lsl r0
    41f0:	00930131 	addseq	r0, r3, r1, lsr r1
    41f4:	00000000 	andeq	r0, r0, r0
    41f8:	00180000 	andseq	r0, r8, r0
    41fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    4200:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4204:	001ea51a 	andseq	sl, lr, sl, lsl r5
    4208:	01310100 	teqeq	r1, r0, lsl #2
    420c:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    4210:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4214:	001f181b 	andseq	r1, pc, fp, lsl r8	; <UNPREDICTABLE>
    4218:	01400100 	mrseq	r0, (UNDEF: 80)
    421c:	00000088 	andeq	r0, r0, r8, lsl #1
    4220:	00000000 	andeq	r0, r0, r0
    4224:	00000032 	andeq	r0, r0, r2, lsr r0
    4228:	04389c01 	ldrteq	r9, [r8], #-3073	; 0xfffff3ff
    422c:	a51a0000 	ldrge	r0, [sl, #-0]
    4230:	0100001e 	tsteq	r0, lr, lsl r0
    4234:	02b50140 	adcseq	r0, r5, #64, 2
    4238:	91020000 	mrsls	r0, (UNDEF: 2)
    423c:	1c101a6c 			; <UNDEFINED> instruction: 0x1c101a6c
    4240:	40010000 	andmi	r0, r1, r0
    4244:	00009301 	andeq	r9, r0, r1, lsl #6
    4248:	6a910200 	bvs	fe444a50 <BootRAM+0xd3b51f1>
    424c:	0019ae1c 	andseq	sl, r9, ip, lsl lr
    4250:	01420100 	mrseq	r0, (UNDEF: 82)
    4254:	00000088 	andeq	r0, r0, r8, lsl #1
    4258:	00779102 	rsbseq	r9, r7, r2, lsl #2
    425c:	001c211b 	andseq	r2, ip, fp, lsl r1
    4260:	01570100 	cmpeq	r7, r0, lsl #2
    4264:	00000093 	muleq	r0, r3, r0
    4268:	00000000 	andeq	r0, r0, r0
    426c:	00000018 	andeq	r0, r0, r8, lsl r0
    4270:	04629c01 	strbteq	r9, [r2], #-3073	; 0xfffff3ff
    4274:	a51a0000 	ldrge	r0, [sl, #-0]
    4278:	0100001e 	tsteq	r0, lr, lsl r0
    427c:	02b50157 	adcseq	r0, r5, #-1073741803	; 0xc0000015
    4280:	91020000 	mrsls	r0, (UNDEF: 2)
    4284:	a0190074 	andsge	r0, r9, r4, ror r0
    4288:	0100001c 	tsteq	r0, ip, lsl r0
    428c:	5f040166 	svcpl	0x00040166
    4290:	001c0800 	andseq	r0, ip, r0, lsl #16
    4294:	9c010000 	stcls	0, cr0, [r1], {-0}
    4298:	00000497 	muleq	r0, r7, r4
    429c:	001ea51a 	andseq	sl, lr, sl, lsl r5
    42a0:	01660100 	cmneq	r6, r0, lsl #2
    42a4:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    42a8:	1a749102 	bne	1d286b8 <_Min_Stack_Size+0x1d284b8>
    42ac:	00001c10 	andeq	r1, r0, r0, lsl ip
    42b0:	93016601 	movwls	r6, #5633	; 0x1601
    42b4:	02000000 	andeq	r0, r0, #0
    42b8:	19007291 	stmdbne	r0, {r0, r4, r7, r9, ip, sp, lr}
    42bc:	00001ef3 	strdeq	r1, [r0], -r3
    42c0:	20017601 	andcs	r7, r1, r1, lsl #12
    42c4:	1c08005f 	stcne	0, cr0, [r8], {95}	; 0x5f
    42c8:	01000000 	mrseq	r0, (UNDEF: 0)
    42cc:	0004cc9c 	muleq	r4, ip, ip
    42d0:	1ea51a00 	vfmane.f32	s2, s10, s0
    42d4:	76010000 	strvc	r0, [r1], -r0
    42d8:	0002b501 	andeq	fp, r2, r1, lsl #10
    42dc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    42e0:	001c101a 	andseq	r1, ip, sl, lsl r0
    42e4:	01760100 	cmneq	r6, r0, lsl #2
    42e8:	00000093 	muleq	r0, r3, r0
    42ec:	00729102 	rsbseq	r9, r2, r2, lsl #2
    42f0:	001c7a19 	andseq	r7, ip, r9, lsl sl
    42f4:	018a0100 	orreq	r0, sl, r0, lsl #2
    42f8:	00000000 	andeq	r0, r0, r0
    42fc:	0000002e 	andeq	r0, r0, lr, lsr #32
    4300:	05109c01 	ldreq	r9, [r0, #-3073]	; 0xfffff3ff
    4304:	a51a0000 	ldrge	r0, [sl, #-0]
    4308:	0100001e 	tsteq	r0, lr, lsl r0
    430c:	02b5018a 	adcseq	r0, r5, #-2147483614	; 0x80000022
    4310:	91020000 	mrsls	r0, (UNDEF: 2)
    4314:	1c101a74 			; <UNDEFINED> instruction: 0x1c101a74
    4318:	8a010000 	bhi	44320 <_Min_Stack_Size+0x44120>
    431c:	00009301 	andeq	r9, r0, r1, lsl #6
    4320:	72910200 	addsvc	r0, r1, #0, 4
    4324:	001c691a 	andseq	r6, ip, sl, lsl r9
    4328:	018a0100 	orreq	r0, sl, r0, lsl #2
    432c:	00000286 	andeq	r0, r0, r6, lsl #5
    4330:	00719102 	rsbseq	r9, r1, r2, lsl #2
    4334:	001e3019 	andseq	r3, lr, r9, lsl r0
    4338:	01a10100 			; <UNDEFINED> instruction: 0x01a10100
    433c:	00000000 	andeq	r0, r0, r0
    4340:	0000001c 	andeq	r0, r0, ip, lsl r0
    4344:	05459c01 	strbeq	r9, [r5, #-3073]	; 0xfffff3ff
    4348:	a51a0000 	ldrge	r0, [sl, #-0]
    434c:	0100001e 	tsteq	r0, lr, lsl r0
    4350:	02b501a1 	adcseq	r0, r5, #1073741864	; 0x40000028
    4354:	91020000 	mrsls	r0, (UNDEF: 2)
    4358:	1dad1a74 			; <UNDEFINED> instruction: 0x1dad1a74
    435c:	a1010000 	mrsge	r0, (UNDEF: 1)
    4360:	00009301 	andeq	r9, r0, r1, lsl #6
    4364:	72910200 	addsvc	r0, r1, #0, 4
    4368:	1e121900 	vnmlsne.f16	s2, s4, s0	; <UNPREDICTABLE>
    436c:	b0010000 	andlt	r0, r1, r0
    4370:	00000001 	andeq	r0, r0, r1
    4374:	00004200 	andeq	r4, r0, r0, lsl #4
    4378:	899c0100 	ldmibhi	ip, {r8}
    437c:	1a000005 	bne	4398 <_Min_Stack_Size+0x4198>
    4380:	00001ea5 	andeq	r1, r0, r5, lsr #29
    4384:	b501b001 	strlt	fp, [r1, #-1]
    4388:	02000002 	andeq	r0, r0, #2
    438c:	101a6c91 	mulsne	sl, r1, ip
    4390:	0100001c 	tsteq	r0, ip, lsl r0
    4394:	009301b0 			; <UNDEFINED> instruction: 0x009301b0
    4398:	91020000 	mrsls	r0, (UNDEF: 2)
    439c:	6d741d6a 	ldclvs	13, cr1, [r4, #-424]!	; 0xfffffe58
    43a0:	b2010070 	andlt	r0, r1, #112	; 0x70
    43a4:	00009e01 	andeq	r9, r0, r1, lsl #28
    43a8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    43ac:	1ced1900 			; <UNDEFINED> instruction: 0x1ced1900
    43b0:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    43b4:	00000001 	andeq	r0, r0, r1
    43b8:	00004c00 	andeq	r4, r0, r0, lsl #24
    43bc:	cd9c0100 	ldfgts	f0, [ip]
    43c0:	1a000005 	bne	43dc <_Min_Stack_Size+0x41dc>
    43c4:	00001cd1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    43c8:	8801ce01 	stmdahi	r1, {r0, r9, sl, fp, lr, pc}
    43cc:	02000000 	andeq	r0, r0, #0
    43d0:	da1a6f91 	ble	6a021c <_Min_Stack_Size+0x6a001c>
    43d4:	0100001d 	tsteq	r0, sp, lsl r0
    43d8:	008801ce 	addeq	r0, r8, lr, asr #3
    43dc:	91020000 	mrsls	r0, (UNDEF: 2)
    43e0:	19a71c6e 	stmibne	r7!, {r1, r2, r3, r5, r6, sl, fp, ip}
    43e4:	d0010000 	andle	r0, r1, r0
    43e8:	00009e01 	andeq	r9, r0, r1, lsl #28
    43ec:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    43f0:	1c451900 	mcrrne	9, 0, r1, r5, cr0	; <UNPREDICTABLE>
    43f4:	e3010000 	movw	r0, #4096	; 0x1000
    43f8:	00000001 	andeq	r0, r0, r1
    43fc:	00002000 	andeq	r2, r0, r0
    4400:	f39c0100 	vaddw.u16	q0, q6, d0
    4404:	1a000005 	bne	4420 <_Min_Stack_Size+0x4220>
    4408:	00001713 	andeq	r1, r0, r3, lsl r7
    440c:	da01e301 	ble	7d018 <_Min_Stack_Size+0x7ce18>
    4410:	02000000 	andeq	r0, r0, #0
    4414:	19007791 	stmdbne	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    4418:	00001dc1 	andeq	r1, r0, r1, asr #27
    441c:	00022501 	andeq	r2, r2, r1, lsl #10
    4420:	e0000000 	and	r0, r0, r0
    4424:	01000000 	mrseq	r0, (UNDEF: 0)
    4428:	0006649c 	muleq	r6, ip, r4
    442c:	1e621a00 	vmulne.f32	s3, s4, s0
    4430:	25010000 	strcs	r0, [r1, #-0]
    4434:	00009e02 	andeq	r9, r0, r2, lsl #28
    4438:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    443c:	0017131a 	andseq	r1, r7, sl, lsl r3
    4440:	02250100 	eoreq	r0, r5, #0, 2
    4444:	000000da 	ldrdeq	r0, [r0], -sl
    4448:	1d639102 	stfnep	f1, [r3, #-8]!
    444c:	00706d74 	rsbseq	r6, r0, r4, ror sp
    4450:	9e022701 	cdpls	7, 0, cr2, cr2, cr1, {0}
    4454:	02000000 	andeq	r0, r0, #0
    4458:	491c7091 	ldmdbmi	ip, {r0, r4, r7, ip, sp, lr}
    445c:	0100001e 	tsteq	r0, lr, lsl r0
    4460:	009e0227 	addseq	r0, lr, r7, lsr #4
    4464:	91020000 	mrsls	r0, (UNDEF: 2)
    4468:	19a71c6c 	stmibne	r7!, {r2, r3, r5, r6, sl, fp, ip}
    446c:	27010000 	strcs	r0, [r1, -r0]
    4470:	00009e02 	andeq	r9, r0, r2, lsl #28
    4474:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4478:	001dfc1c 	andseq	pc, sp, ip, lsl ip	; <UNPREDICTABLE>
    447c:	02270100 	eoreq	r0, r7, #0, 2
    4480:	0000009e 	muleq	r0, lr, r0
    4484:	00689102 	rsbeq	r9, r8, r2, lsl #2
    4488:	001d4119 	andseq	r4, sp, r9, lsl r1
    448c:	02610100 	rsbeq	r0, r1, #0, 2
    4490:	00000000 	andeq	r0, r0, r0
    4494:	00000084 	andeq	r0, r0, r4, lsl #1
    4498:	06a89c01 	strteq	r9, [r8], r1, lsl #24
    449c:	d11a0000 	tstle	sl, r0
    44a0:	0100001c 	tsteq	r0, ip, lsl r0
    44a4:	00880261 	addeq	r0, r8, r1, ror #4
    44a8:	91020000 	mrsls	r0, (UNDEF: 2)
    44ac:	1dda1a6f 	vldrne	s3, [sl, #444]	; 0x1bc
    44b0:	61010000 	mrsvs	r0, (UNDEF: 1)
    44b4:	00008802 	andeq	r8, r0, r2, lsl #16
    44b8:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    44bc:	706d741d 	rsbvc	r7, sp, sp, lsl r4
    44c0:	02630100 	rsbeq	r0, r3, #0, 2
    44c4:	0000009e 	muleq	r0, lr, r0
    44c8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    44cc:	001f4f19 	andseq	r4, pc, r9, lsl pc	; <UNPREDICTABLE>
    44d0:	02760100 	rsbseq	r0, r6, #0, 2
    44d4:	00000000 	andeq	r0, r0, r0
    44d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    44dc:	06ce9c01 	strbeq	r9, [lr], r1, lsl #24
    44e0:	881a0000 	ldmdahi	sl, {}	; <UNPREDICTABLE>
    44e4:	0100001c 	tsteq	r0, ip, lsl r0
    44e8:	009e0276 	addseq	r0, lr, r6, ror r2
    44ec:	91020000 	mrsls	r0, (UNDEF: 2)
    44f0:	6c1e0074 	ldcvs	0, cr0, [lr], {116}	; 0x74
    44f4:	06000002 	streq	r0, [r0], -r2
    44f8:	06da06ce 	ldrbeq	r0, [sl], lr, asr #13
    44fc:	7a050000 	bvc	144504 <_Min_Stack_Size+0x144304>
    4500:	00000000 	andeq	r0, r0, r0
    4504:	000008e1 	andeq	r0, r0, r1, ror #17
    4508:	11be0004 			; <UNDEFINED> instruction: 0x11be0004
    450c:	01040000 	mrseq	r0, (UNDEF: 4)
    4510:	00000111 	andeq	r0, r0, r1, lsl r1
    4514:	0022500c 	eoreq	r5, r2, ip
    4518:	00051800 	andeq	r1, r5, r0, lsl #16
    451c:	00000000 	andeq	r0, r0, r0
    4520:	0022a200 	eoreq	sl, r2, r0, lsl #4
    4524:	06010200 	streq	r0, [r1], -r0, lsl #4
    4528:	00000192 	muleq	r0, r2, r1
    452c:	0000e303 	andeq	lr, r0, r3, lsl #6
    4530:	331d0200 	tstcc	sp, #0, 4
    4534:	02000000 	andeq	r0, r0, #0
    4538:	01900801 	orrseq	r0, r0, r1, lsl #16
    453c:	02020000 	andeq	r0, r2, #0
    4540:	00009505 	andeq	r9, r0, r5, lsl #10
    4544:	00720300 	rsbseq	r0, r2, r0, lsl #6
    4548:	2b020000 	blcs	84550 <_Min_Stack_Size+0x84350>
    454c:	0000004c 	andeq	r0, r0, ip, asr #32
    4550:	f2070202 	vhsub.s8	d0, d7, d2
    4554:	02000001 	andeq	r0, r0, #1
    4558:	00bd0504 	adcseq	r0, sp, r4, lsl #10
    455c:	67030000 	strvs	r0, [r3, -r0]
    4560:	02000000 	andeq	r0, r0, #0
    4564:	00006541 	andeq	r6, r0, r1, asr #10
    4568:	07040200 	streq	r0, [r4, -r0, lsl #4]
    456c:	000001c9 	andeq	r0, r0, r9, asr #3
    4570:	b8050802 	stmdalt	r5, {r1, fp}
    4574:	02000000 	andeq	r0, r0, #0
    4578:	01c40708 	biceq	r0, r4, r8, lsl #14
    457c:	04040000 	streq	r0, [r4], #-0
    4580:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4584:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4588:	000001ce 	andeq	r0, r0, lr, asr #3
    458c:	0000e503 	andeq	lr, r0, r3, lsl #10
    4590:	28180300 	ldmdacs	r8, {r8, r9}
    4594:	03000000 	movweq	r0, #0
    4598:	00000074 	andeq	r0, r0, r4, ror r0
    459c:	00412403 	subeq	r2, r1, r3, lsl #8
    45a0:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
    45a4:	03000000 	movweq	r0, #0
    45a8:	00005a30 	andeq	r5, r0, r0, lsr sl
    45ac:	07040200 	streq	r0, [r4, -r0, lsl #4]
    45b0:	00000059 	andeq	r0, r0, r9, asr r0
    45b4:	00009305 	andeq	r9, r0, r5, lsl #6
    45b8:	33010600 	movwcc	r0, #5632	; 0x1600
    45bc:	04000000 	streq	r0, [r0], #-0
    45c0:	00cf0207 	sbceq	r0, pc, r7, lsl #4
    45c4:	74070000 	strvc	r0, [r7], #-0
    45c8:	0000001c 	andeq	r0, r0, ip, lsl r0
    45cc:	54455308 	strbpl	r5, [r5], #-776	; 0xfffffcf8
    45d0:	09000100 	stmdbeq	r0, {r8}
    45d4:	00002e77 	andeq	r2, r0, r7, ror lr
    45d8:	b5020704 	strlt	r0, [r2, #-1796]	; 0xfffff8fc
    45dc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    45e0:	00002f95 	muleq	r0, r5, pc	; <UNPREDICTABLE>
    45e4:	b5020704 	strlt	r0, [r2, #-1796]	; 0xfffff8fc
    45e8:	06000000 	streq	r0, [r0], -r0
    45ec:	00003301 	andeq	r3, r0, r1, lsl #6
    45f0:	02090400 	andeq	r0, r9, #0, 8
    45f4:	00000101 	andeq	r0, r0, r1, lsl #2
    45f8:	0002f007 	andeq	pc, r2, r7
    45fc:	62070000 	andvs	r0, r7, #0
    4600:	01000004 	tsteq	r0, r4
    4604:	17d40900 	ldrbne	r0, [r4, r0, lsl #18]
    4608:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    460c:	0000e702 	andeq	lr, r0, r2, lsl #14
    4610:	04240a00 	strteq	r0, [r4], #-2560	; 0xfffff600
    4614:	01ff0488 	mvnseq	r0, r8, lsl #9
    4618:	430b0000 	movwmi	r0, #45056	; 0xb000
    461c:	04003152 	streq	r3, [r0], #-338	; 0xfffffeae
    4620:	00b0048a 	adcseq	r0, r0, sl, lsl #9
    4624:	0c000000 	stceq	0, cr0, [r0], {-0}
    4628:	000003c2 	andeq	r0, r0, r2, asr #7
    462c:	93048b04 	movwls	r8, #19204	; 0x4b04
    4630:	02000000 	andeq	r0, r0, #0
    4634:	3252430b 	subscc	r4, r2, #738197504	; 0x2c000000
    4638:	048c0400 	streq	r0, [ip], #1024	; 0x400
    463c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    4640:	03cc0c04 	biceq	r0, ip, #4, 24	; 0x400
    4644:	8d040000 	stchi	0, cr0, [r4, #-0]
    4648:	00009304 	andeq	r9, r0, r4, lsl #6
    464c:	530b0600 	movwpl	r0, #46592	; 0xb600
    4650:	8e040052 	mcrhi	0, 0, r0, cr4, cr2, {2}
    4654:	0000b004 	andeq	fp, r0, r4
    4658:	d60c0800 	strle	r0, [ip], -r0, lsl #16
    465c:	04000003 	streq	r0, [r0], #-3
    4660:	0093048f 	addseq	r0, r3, pc, lsl #9
    4664:	0b0a0000 	bleq	28466c <_Min_Stack_Size+0x28446c>
    4668:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
    466c:	00b00490 	umlalseq	r0, r0, r0, r4	; <UNPREDICTABLE>
    4670:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    4674:	000002ab 	andeq	r0, r0, fp, lsr #5
    4678:	93049104 	movwls	r9, #16644	; 0x4104
    467c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4680:	00218f0c 	eoreq	r8, r1, ip, lsl #30
    4684:	04920400 	ldreq	r0, [r2], #1024	; 0x400
    4688:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    468c:	03ea0c10 	mvneq	r0, #16, 24	; 0x1000
    4690:	93040000 	movwls	r0, #16384	; 0x4000
    4694:	00009304 	andeq	r9, r0, r4, lsl #6
    4698:	460c1200 	strmi	r1, [ip], -r0, lsl #4
    469c:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    46a0:	00b00494 	umlalseq	r0, r0, r4, r4	; <UNPREDICTABLE>
    46a4:	0c140000 	ldceq	0, cr0, [r4], {-0}
    46a8:	000003f4 	strdeq	r0, [r0], -r4
    46ac:	93049504 	movwls	r9, #17668	; 0x4504
    46b0:	16000000 	strne	r0, [r0], -r0
    46b4:	0020290c 	eoreq	r2, r0, ip, lsl #18
    46b8:	04960400 	ldreq	r0, [r6], #1024	; 0x400
    46bc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    46c0:	02d70c18 	sbcseq	r0, r7, #24, 24	; 0x1800
    46c4:	97040000 	strls	r0, [r4, -r0]
    46c8:	00009304 	andeq	r9, r0, r4, lsl #6
    46cc:	630c1a00 	movwvs	r1, #51712	; 0xca00
    46d0:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    46d4:	00b00498 	umlalseq	r0, r0, r8, r4	; <UNPREDICTABLE>
    46d8:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    46dc:	00000415 	andeq	r0, r0, r5, lsl r4
    46e0:	93049904 	movwls	r9, #18692	; 0x4904
    46e4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    46e8:	0022a70c 	eoreq	sl, r2, ip, lsl #14
    46ec:	049a0400 	ldreq	r0, [sl], #1024	; 0x400
    46f0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    46f4:	041f0c20 	ldreq	r0, [pc], #-3104	; 46fc <_Min_Stack_Size+0x44fc>
    46f8:	9b040000 	blls	104700 <_Min_Stack_Size+0x104500>
    46fc:	00009304 	andeq	r9, r0, r4, lsl #6
    4700:	09002200 	stmdbeq	r0, {r9, sp}
    4704:	0000219e 	muleq	r0, lr, r1
    4708:	0d049c04 	stceq	12, cr9, [r4, #-16]
    470c:	0d000001 	stceq	0, cr0, [r0, #-4]
    4710:	502e0514 	eorpl	r0, lr, r4, lsl r5
    4714:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    4718:	00001a80 	andeq	r1, r0, r0, lsl #21
    471c:	009e3005 	addseq	r3, lr, r5
    4720:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4724:	000018d2 	ldrdeq	r1, [r0], -r2
    4728:	009e3105 	addseq	r3, lr, r5, lsl #2
    472c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    4730:	00001ae9 	andeq	r1, r0, r9, ror #21
    4734:	009e3205 	addseq	r3, lr, r5, lsl #4
    4738:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    473c:	00001a9c 	muleq	r0, ip, sl
    4740:	009e3305 	addseq	r3, lr, r5, lsl #6
    4744:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    4748:	00001a61 	andeq	r1, r0, r1, ror #20
    474c:	009e3405 	addseq	r3, lr, r5, lsl #8
    4750:	00100000 	andseq	r0, r0, r0
    4754:	00189f03 	andseq	r9, r8, r3, lsl #30
    4758:	0b350500 	bleq	d45b60 <_Min_Stack_Size+0xd45960>
    475c:	0d000002 	stceq	0, cr0, [r0, #-8]
    4760:	d0320612 	eorsle	r0, r2, r2, lsl r6
    4764:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    4768:	00001f85 	andeq	r1, r0, r5, lsl #31
    476c:	00933406 	addseq	r3, r3, r6, lsl #8
    4770:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4774:	00002195 	muleq	r0, r5, r1
    4778:	00933706 	addseq	r3, r3, r6, lsl #14
    477c:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    4780:	00001fae 	andeq	r1, r0, lr, lsr #31
    4784:	00933a06 	addseq	r3, r3, r6, lsl #20
    4788:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    478c:	00002286 	andeq	r2, r0, r6, lsl #5
    4790:	00933d06 	addseq	r3, r3, r6, lsl #26
    4794:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    4798:	00001f7c 	andeq	r1, r0, ip, ror pc
    479c:	00934006 	addseq	r4, r3, r6
    47a0:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    47a4:	00002012 	andeq	r2, r0, r2, lsl r0
    47a8:	00934306 	addseq	r4, r3, r6, lsl #6
    47ac:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    47b0:	00002030 	andeq	r2, r0, r0, lsr r0
    47b4:	00934706 	addseq	r4, r3, r6, lsl #14
    47b8:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    47bc:	00001fde 	ldrdeq	r1, [r0], -lr
    47c0:	00934d06 	addseq	r4, r3, r6, lsl #26
    47c4:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
    47c8:	000022b4 			; <UNDEFINED> instruction: 0x000022b4
    47cc:	00935006 	addseq	r5, r3, r6
    47d0:	00100000 	andseq	r0, r0, r0
    47d4:	0022c603 	eoreq	ip, r2, r3, lsl #12
    47d8:	5b510600 	blpl	1445fe0 <_Min_Stack_Size+0x1445de0>
    47dc:	0d000002 	stceq	0, cr0, [r0, #-8]
    47e0:	2c570610 	mrrccs	6, 1, r0, r7, cr0
    47e4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    47e8:	00002215 	andeq	r2, r0, r5, lsl r2
    47ec:	00935a06 	addseq	r5, r3, r6, lsl #20
    47f0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    47f4:	00001fc8 	andeq	r1, r0, r8, asr #31
    47f8:	00935d06 	addseq	r5, r3, r6, lsl #26
    47fc:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    4800:	00002127 	andeq	r2, r0, r7, lsr #2
    4804:	00936006 	addseq	r6, r3, r6
    4808:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    480c:	000020df 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    4810:	00936306 	addseq	r6, r3, r6, lsl #6
    4814:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    4818:	000020d1 	ldrdeq	r2, [r0], -r1
    481c:	009e6606 	addseq	r6, lr, r6, lsl #12
    4820:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    4824:	00001feb 	andeq	r1, r0, fp, ror #31
    4828:	00936906 	addseq	r6, r3, r6, lsl #18
    482c:	000c0000 	andeq	r0, ip, r0
    4830:	00206803 	eoreq	r6, r0, r3, lsl #16
    4834:	db6b0600 	blle	1ac603c <_Min_Stack_Size+0x1ac5e3c>
    4838:	0f000002 	svceq	0x00000002
    483c:	00002136 	andeq	r2, r0, r6, lsr r1
    4840:	00007701 	andeq	r7, r0, r1, lsl #14
    4844:	00740000 	rsbseq	r0, r4, r0
    4848:	9c010000 	stcls	0, cr0, [r1], {-0}
    484c:	0000035b 	andeq	r0, r0, fp, asr r3
    4850:	00223410 	eoreq	r3, r2, r0, lsl r4
    4854:	5b770100 	blpl	1dc4c5c <_Min_Stack_Size+0x1dc4a5c>
    4858:	02000003 	andeq	r0, r0, #3
    485c:	11007491 			; <UNDEFINED> instruction: 0x11007491
    4860:	0001ff04 	andeq	pc, r1, r4, lsl #30
    4864:	1fd51200 	svcne	0x00d51200
    4868:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    486c:	08005f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, ip, lr}
    4870:	00000086 	andeq	r0, r0, r6, lsl #1
    4874:	03a19c01 			; <UNDEFINED> instruction: 0x03a19c01
    4878:	34100000 	ldrcc	r0, [r0], #-0
    487c:	01000022 	tsteq	r0, r2, lsr #32
    4880:	00035b9e 	muleq	r3, lr, fp
    4884:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4888:	0022d610 	eoreq	sp, r2, r0, lsl r6
    488c:	a19e0100 	orrsge	r0, lr, r0, lsl #2
    4890:	02000003 	andeq	r0, r0, #3
    4894:	a7136891 			; <UNDEFINED> instruction: 0xa7136891
    4898:	01000019 	tsteq	r0, r9, lsl r0
    489c:	000093a0 	andeq	r9, r0, r0, lsr #7
    48a0:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    48a4:	d0041100 	andle	r1, r4, r0, lsl #2
    48a8:	0f000002 	svceq	0x00000002
    48ac:	00002085 	andeq	r2, r0, r5, lsl #1
    48b0:	0000db01 	andeq	sp, r0, r1, lsl #22
    48b4:	01680000 	cmneq	r8, r0
    48b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    48bc:	0000043b 	andeq	r0, r0, fp, lsr r4
    48c0:	00223410 	eoreq	r3, r2, r0, lsl r4
    48c4:	5bdb0100 	blpl	ff6c4ccc <BootRAM+0xe63546d>
    48c8:	02000003 	andeq	r0, r0, #3
    48cc:	59104c91 	ldmdbpl	r0, {r0, r4, r7, sl, fp, lr}
    48d0:	01000020 	tsteq	r0, r0, lsr #32
    48d4:	00043bdb 	ldrdeq	r3, [r4], -fp
    48d8:	48910200 	ldmmi	r1, {r9}
    48dc:	0019a713 	andseq	sl, r9, r3, lsl r7
    48e0:	93dd0100 	bicsls	r0, sp, #0, 2
    48e4:	02000000 	andeq	r0, r0, #0
    48e8:	b9136a91 	ldmdblt	r3, {r0, r4, r7, r9, fp, sp, lr}
    48ec:	01000020 	tsteq	r0, r0, lsr #32
    48f0:	000093dd 	ldrdeq	r9, [r0], -sp
    48f4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    48f8:	00224913 	eoreq	r4, r2, r3, lsl r9
    48fc:	93dd0100 	bicsls	r0, sp, #0, 2
    4900:	02000000 	andeq	r0, r0, #0
    4904:	f4137491 			; <UNDEFINED> instruction: 0xf4137491
    4908:	0100001f 	tsteq	r0, pc, lsl r0
    490c:	000093dd 	ldrdeq	r9, [r0], -sp
    4910:	72910200 	addsvc	r0, r1, #0, 4
    4914:	706d7414 	rsbvc	r7, sp, r4, lsl r4
    4918:	9ede0100 	cdpls	1, 13, cr0, cr14, cr0, {0}
    491c:	02000000 	andeq	r0, r0, #0
    4920:	91136c91 			; <UNDEFINED> instruction: 0x91136c91
    4924:	0100001a 	tsteq	r0, sl, lsl r0
    4928:	000250df 	ldrdeq	r5, [r2], -pc	; <UNPREDICTABLE>
    492c:	50910200 	addspl	r0, r1, r0, lsl #4
    4930:	00204d13 	eoreq	r4, r0, r3, lsl sp
    4934:	9ee00100 	cdpls	1, 14, cr0, cr0, cr0, {0}
    4938:	02000000 	andeq	r0, r0, #0
    493c:	11006491 			; <UNDEFINED> instruction: 0x11006491
    4940:	00032c04 	andeq	r2, r3, r4, lsl #24
    4944:	21ec1500 	mvncs	r1, r0, lsl #10
    4948:	72010000 	andvc	r0, r1, #0
    494c:	00000001 	andeq	r0, r0, r1
    4950:	00004800 	andeq	r4, r0, r0, lsl #16
    4954:	679c0100 	ldrvs	r0, [ip, r0, lsl #2]
    4958:	16000004 	strne	r0, [r0], -r4
    495c:	000022d6 	ldrdeq	r2, [r0], -r6
    4960:	a1017201 	tstge	r1, r1, lsl #4
    4964:	02000003 	andeq	r0, r0, #3
    4968:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    496c:	0000208e 	andeq	r2, r0, lr, lsl #1
    4970:	00018e01 	andeq	r8, r1, r1, lsl #28
    4974:	36000000 	strcc	r0, [r0], -r0
    4978:	01000000 	mrseq	r0, (UNDEF: 0)
    497c:	00048d9c 	muleq	r4, ip, sp
    4980:	20591600 	subscs	r1, r9, r0, lsl #12
    4984:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    4988:	00043b01 	andeq	r3, r4, r1, lsl #22
    498c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4990:	21011500 	tstcs	r1, r0, lsl #10
    4994:	ab010000 	blge	4499c <_Min_Stack_Size+0x4479c>
    4998:	005fc401 	subseq	ip, pc, r1, lsl #8
    499c:	00003e08 	andeq	r3, r0, r8, lsl #28
    49a0:	c29c0100 	addsgt	r0, ip, #0, 2
    49a4:	16000004 	strne	r0, [r0], -r4
    49a8:	00002234 	andeq	r2, r0, r4, lsr r2
    49ac:	5b01ab01 	blpl	6f5b8 <_Min_Stack_Size+0x6f3b8>
    49b0:	02000003 	andeq	r0, r0, #3
    49b4:	13167491 	tstne	r6, #-1862270976	; 0x91000000
    49b8:	01000017 	tsteq	r0, r7, lsl r0
    49bc:	010101ab 	smlatbeq	r1, fp, r1, r0
    49c0:	91020000 	mrsls	r0, (UNDEF: 2)
    49c4:	e4150073 	ldr	r0, [r5], #-115	; 0xffffff8d
    49c8:	01000021 	tsteq	r0, r1, lsr #32
    49cc:	000001c3 	andeq	r0, r0, r3, asr #3
    49d0:	003e0000 	eorseq	r0, lr, r0
    49d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    49d8:	000004f7 	strdeq	r0, [r0], -r7
    49dc:	00223416 	eoreq	r3, r2, r6, lsl r4
    49e0:	01c30100 	biceq	r0, r3, r0, lsl #2
    49e4:	0000035b 	andeq	r0, r0, fp, asr r3
    49e8:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    49ec:	00001713 	andeq	r1, r0, r3, lsl r7
    49f0:	0101c301 	tsteq	r1, r1, lsl #6
    49f4:	02000001 	andeq	r0, r0, #1
    49f8:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
    49fc:	000020c0 	andeq	r2, r0, r0, asr #1
    4a00:	0001e201 	andeq	lr, r1, r1, lsl #4
    4a04:	60000000 	andvs	r0, r0, r0
    4a08:	01000000 	mrseq	r0, (UNDEF: 0)
    4a0c:	0005599c 	muleq	r5, ip, r9
    4a10:	22341600 	eorscs	r1, r4, #0, 12
    4a14:	e2010000 	and	r0, r1, #0
    4a18:	00035b01 	andeq	r5, r3, r1, lsl #22
    4a1c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4a20:	0020f616 	eoreq	pc, r0, r6, lsl r6	; <UNPREDICTABLE>
    4a24:	01e20100 	mvneq	r0, r0, lsl #2
    4a28:	00000088 	andeq	r0, r0, r8, lsl #1
    4a2c:	166b9102 	strbtne	r9, [fp], -r2, lsl #2
    4a30:	00001713 	andeq	r1, r0, r3, lsl r7
    4a34:	0101e201 	tsteq	r1, r1, lsl #4
    4a38:	02000001 	andeq	r0, r0, #1
    4a3c:	a8176a91 	ldmdage	r7, {r0, r4, r7, r9, fp, sp, lr}
    4a40:	0100001f 	tsteq	r0, pc, lsl r0
    4a44:	009301e4 	addseq	r0, r3, r4, ror #3
    4a48:	91020000 	mrsls	r0, (UNDEF: 2)
    4a4c:	228f1776 	addcs	r1, pc, #30932992	; 0x1d80000
    4a50:	e4010000 	str	r0, [r1], #-0
    4a54:	00009301 	andeq	r9, r0, r1, lsl #6
    4a58:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4a5c:	1f6d1500 	svcne	0x006d1500
    4a60:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    4a64:	00000002 	andeq	r0, r0, r2
    4a68:	00004600 	andeq	r4, r0, r0, lsl #12
    4a6c:	9d9c0100 	ldflss	f0, [ip]
    4a70:	16000005 	strne	r0, [r0], -r5
    4a74:	00002234 	andeq	r2, r0, r4, lsr r2
    4a78:	5b020901 	blpl	86e84 <_Min_Stack_Size+0x86c84>
    4a7c:	02000003 	andeq	r0, r0, #3
    4a80:	1a167491 	bne	5a1ccc <_Min_Stack_Size+0x5a1acc>
    4a84:	01000020 	tsteq	r0, r0, lsr #32
    4a88:	00930209 	addseq	r0, r3, r9, lsl #4
    4a8c:	91020000 	mrsls	r0, (UNDEF: 2)
    4a90:	17131672 			; <UNDEFINED> instruction: 0x17131672
    4a94:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    4a98:	00010102 	andeq	r0, r1, r2, lsl #2
    4a9c:	71910200 	orrsvc	r0, r1, r0, lsl #4
    4aa0:	20011500 	andcs	r1, r1, r0, lsl #10
    4aa4:	23010000 	movwcs	r0, #4096	; 0x1000
    4aa8:	00600402 	rsbeq	r0, r0, r2, lsl #8
    4aac:	00001c08 	andeq	r1, r0, r8, lsl #24
    4ab0:	d29c0100 	addsle	r0, ip, #0, 2
    4ab4:	16000005 	strne	r0, [r0], -r5
    4ab8:	00002234 	andeq	r2, r0, r4, lsr r2
    4abc:	5b022301 	blpl	8d6c8 <_Min_Stack_Size+0x8d4c8>
    4ac0:	02000003 	andeq	r0, r0, #3
    4ac4:	77167491 			; <UNDEFINED> instruction: 0x77167491
    4ac8:	01000040 	tsteq	r0, r0, asr #32
    4acc:	00930223 	addseq	r0, r3, r3, lsr #4
    4ad0:	91020000 	mrsls	r0, (UNDEF: 2)
    4ad4:	aa180072 	bge	604ca4 <_Min_Stack_Size+0x604aa4>
    4ad8:	01000021 	tsteq	r0, r1, lsr #32
    4adc:	00930233 	addseq	r0, r3, r3, lsr r2
    4ae0:	60200000 	eorvs	r0, r0, r0
    4ae4:	00180800 	andseq	r0, r8, r0, lsl #16
    4ae8:	9c010000 	stcls	0, cr0, [r1], {-0}
    4aec:	000005fc 	strdeq	r0, [r0], -ip
    4af0:	00223416 	eoreq	r3, r2, r6, lsl r4
    4af4:	02330100 	eorseq	r0, r3, #0, 2
    4af8:	0000035b 	andeq	r0, r0, fp, asr r3
    4afc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4b00:	00214515 	eoreq	r4, r1, r5, lsl r5
    4b04:	02450100 	subeq	r0, r5, #0, 2
    4b08:	00000000 	andeq	r0, r0, r0
    4b0c:	00000042 	andeq	r0, r0, r2, asr #32
    4b10:	06319c01 	ldrteq	r9, [r1], -r1, lsl #24
    4b14:	34160000 	ldrcc	r0, [r6], #-0
    4b18:	01000022 	tsteq	r0, r2, lsr #32
    4b1c:	035b0245 	cmpeq	fp, #1342177284	; 0x50000004
    4b20:	91020000 	mrsls	r0, (UNDEF: 2)
    4b24:	21be1674 			; <UNDEFINED> instruction: 0x21be1674
    4b28:	45010000 	strmi	r0, [r1, #-0]
    4b2c:	00009302 	andeq	r9, r0, r2, lsl #6
    4b30:	72910200 	addsvc	r0, r1, #0, 4
    4b34:	22391500 	eorscs	r1, r9, #0, 10
    4b38:	5d010000 	stcpl	0, cr0, [r1, #-0]
    4b3c:	00000002 	andeq	r0, r0, r2
    4b40:	00003e00 	andeq	r3, r0, r0, lsl #28
    4b44:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
    4b48:	16000006 	strne	r0, [r0], -r6
    4b4c:	00002234 	andeq	r2, r0, r4, lsr r2
    4b50:	5b025d01 	blpl	9bf5c <_Min_Stack_Size+0x9bd5c>
    4b54:	02000003 	andeq	r0, r0, #3
    4b58:	13167491 	tstne	r6, #-1862270976	; 0x91000000
    4b5c:	01000017 	tsteq	r0, r7, lsl r0
    4b60:	0101025d 	tsteq	r1, sp, asr r2
    4b64:	91020000 	mrsls	r0, (UNDEF: 2)
    4b68:	14150073 	ldrne	r0, [r5], #-115	; 0xffffff8d
    4b6c:	01000021 	tsteq	r0, r1, lsr #32
    4b70:	00000277 	andeq	r0, r0, r7, ror r2
    4b74:	00360000 	eorseq	r0, r6, r0
    4b78:	9c010000 	stcls	0, cr0, [r1], {-0}
    4b7c:	0000069b 	muleq	r0, fp, r6
    4b80:	00223416 	eoreq	r3, r2, r6, lsl r4
    4b84:	02770100 	rsbseq	r0, r7, #0, 2
    4b88:	0000035b 	andeq	r0, r0, fp, asr r3
    4b8c:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    4b90:	00001fae 	andeq	r1, r0, lr, lsr #31
    4b94:	93027701 	movwls	r7, #9985	; 0x2701
    4b98:	02000000 	andeq	r0, r0, #0
    4b9c:	15007291 	strne	r7, [r0, #-657]	; 0xfffffd6f
    4ba0:	0000217f 	andeq	r2, r0, pc, ror r1
    4ba4:	00028701 	andeq	r8, r2, r1, lsl #14
    4ba8:	22000000 	andcs	r0, r0, #0
    4bac:	01000000 	mrseq	r0, (UNDEF: 0)
    4bb0:	0006c19c 	muleq	r6, ip, r1
    4bb4:	22341600 	eorscs	r1, r4, #0, 12
    4bb8:	87010000 	strhi	r0, [r1, -r0]
    4bbc:	00035b02 	andeq	r5, r3, r2, lsl #22
    4bc0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4bc4:	22961500 	addscs	r1, r6, #0, 10
    4bc8:	97010000 	strls	r0, [r1, -r0]
    4bcc:	00000002 	andeq	r0, r0, r2
    4bd0:	00003e00 	andeq	r3, r0, r0, lsl #28
    4bd4:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    4bd8:	16000006 	strne	r0, [r0], -r6
    4bdc:	00002234 	andeq	r2, r0, r4, lsr r2
    4be0:	5b029701 	blpl	aa7ec <_Min_Stack_Size+0xaa5ec>
    4be4:	02000003 	andeq	r0, r0, #3
    4be8:	13167491 	tstne	r6, #-1862270976	; 0x91000000
    4bec:	01000017 	tsteq	r0, r7, lsl r0
    4bf0:	01010297 			; <UNDEFINED> instruction: 0x01010297
    4bf4:	91020000 	mrsls	r0, (UNDEF: 2)
    4bf8:	09180073 	ldmdbeq	r8, {r0, r1, r4, r5, r6}
    4bfc:	01000021 	tsteq	r0, r1, lsr #32
    4c00:	009302b1 			; <UNDEFINED> instruction: 0x009302b1
    4c04:	00000000 	andeq	r0, r0, r0
    4c08:	00300000 	eorseq	r0, r0, r0
    4c0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4c10:	0000073e 	andeq	r0, r0, lr, lsr r7
    4c14:	00223416 	eoreq	r3, r2, r6, lsl r4
    4c18:	02b10100 	adcseq	r0, r1, #0, 2
    4c1c:	0000035b 	andeq	r0, r0, fp, asr r3
    4c20:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
    4c24:	000020ee 	andeq	r2, r0, lr, ror #1
    4c28:	8802b101 	stmdahi	r2, {r0, r8, ip, sp, pc}
    4c2c:	02000000 	andeq	r0, r0, #0
    4c30:	ad176b91 	vldrge	d6, [r7, #-580]	; 0xfffffdbc
    4c34:	01000022 	tsteq	r0, r2, lsr #32
    4c38:	009302b3 			; <UNDEFINED> instruction: 0x009302b3
    4c3c:	91020000 	mrsls	r0, (UNDEF: 2)
    4c40:	93180076 	tstls	r8, #118	; 0x76
    4c44:	0100001f 	tsteq	r0, pc, lsl r0
    4c48:	009302ca 	addseq	r0, r3, sl, asr #5
    4c4c:	00000000 	andeq	r0, r0, r0
    4c50:	00180000 	andseq	r0, r8, r0
    4c54:	9c010000 	stcls	0, cr0, [r1], {-0}
    4c58:	00000768 	andeq	r0, r0, r8, ror #14
    4c5c:	00223416 	eoreq	r3, r2, r6, lsl r4
    4c60:	02ca0100 	sbceq	r0, sl, #0, 2
    4c64:	0000035b 	andeq	r0, r0, fp, asr r3
    4c68:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4c6c:	00209d15 	eoreq	r9, r0, r5, lsl sp
    4c70:	02dc0100 	sbcseq	r0, ip, #0, 2
    4c74:	00000000 	andeq	r0, r0, r0
    4c78:	00000040 	andeq	r0, r0, r0, asr #32
    4c7c:	079d9c01 	ldreq	r9, [sp, r1, lsl #24]
    4c80:	34160000 	ldrcc	r0, [r6], #-0
    4c84:	01000022 	tsteq	r0, r2, lsr #32
    4c88:	035b02dc 	cmpeq	fp, #220, 4	; 0xc000000d
    4c8c:	91020000 	mrsls	r0, (UNDEF: 2)
    4c90:	1f851674 	svcne	0x00851674
    4c94:	dc010000 	stcle	0, cr0, [r1], {-0}
    4c98:	00009302 	andeq	r9, r0, r2, lsl #6
    4c9c:	72910200 	addsvc	r0, r1, #0, 4
    4ca0:	221e1800 	andscs	r1, lr, #0, 16
    4ca4:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    4ca8:	0000cf02 	andeq	ip, r0, r2, lsl #30
    4cac:	00603800 	rsbeq	r3, r0, r0, lsl #16
    4cb0:	00003608 	andeq	r3, r0, r8, lsl #12
    4cb4:	e59c0100 	ldr	r0, [ip, #256]	; 0x100
    4cb8:	16000007 	strne	r0, [r0], -r7
    4cbc:	00002234 	andeq	r2, r0, r4, lsr r2
    4cc0:	5b02fe01 	blpl	c44cc <_Min_Stack_Size+0xc42cc>
    4cc4:	02000003 	andeq	r0, r0, #3
    4cc8:	bb166c91 	bllt	59ff14 <_Min_Stack_Size+0x59fd14>
    4ccc:	0100001f 	tsteq	r0, pc, lsl r0
    4cd0:	009302fe 			; <UNDEFINED> instruction: 0x009302fe
    4cd4:	91020000 	mrsls	r0, (UNDEF: 2)
    4cd8:	19ae176a 	stmibne	lr!, {r1, r3, r5, r6, r8, r9, sl, ip}
    4cdc:	00010000 	andeq	r0, r1, r0
    4ce0:	0000cf03 	andeq	ip, r0, r3, lsl #30
    4ce4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4ce8:	21d21500 	bicscs	r1, r2, r0, lsl #10
    4cec:	24010000 	strcs	r0, [r1], #-0
    4cf0:	00000003 	andeq	r0, r0, r3
    4cf4:	00002000 	andeq	r2, r0, r0
    4cf8:	1a9c0100 	bne	fe705100 <BootRAM+0xd6758a1>
    4cfc:	16000008 	strne	r0, [r0], -r8
    4d00:	00002234 	andeq	r2, r0, r4, lsr r2
    4d04:	5b032401 	blpl	cdd10 <_Min_Stack_Size+0xcdb10>
    4d08:	02000003 	andeq	r0, r0, #3
    4d0c:	bb167491 	bllt	5a1f58 <_Min_Stack_Size+0x5a1d58>
    4d10:	0100001f 	tsteq	r0, pc, lsl r0
    4d14:	00930324 	addseq	r0, r3, r4, lsr #6
    4d18:	91020000 	mrsls	r0, (UNDEF: 2)
    4d1c:	6b180072 	blvs	604eec <_Min_Stack_Size+0x604cec>
    4d20:	01000021 	tsteq	r0, r1, lsr #32
    4d24:	00db033d 	sbcseq	r0, fp, sp, lsr r3
    4d28:	00000000 	andeq	r0, r0, r0
    4d2c:	00740000 	rsbseq	r0, r4, r0
    4d30:	9c010000 	stcls	0, cr0, [r1], {-0}
    4d34:	0000088f 	andeq	r0, r0, pc, lsl #17
    4d38:	00223416 	eoreq	r3, r2, r6, lsl r4
    4d3c:	033d0100 	teqeq	sp, #0, 2
    4d40:	0000035b 	andeq	r0, r0, fp, asr r3
    4d44:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
    4d48:	000020f6 	strdeq	r2, [r0], -r6
    4d4c:	88033d01 	stmdahi	r3, {r0, r8, sl, fp, ip, sp}
    4d50:	02000000 	andeq	r0, r0, #0
    4d54:	ae176b91 	vmovge.32	r6, d23[0]
    4d58:	01000019 	tsteq	r0, r9, lsl r0
    4d5c:	00db033f 	sbcseq	r0, fp, pc, lsr r3
    4d60:	91020000 	mrsls	r0, (UNDEF: 2)
    4d64:	1fa81777 	svcne	0x00a81777
    4d68:	40010000 	andmi	r0, r1, r0
    4d6c:	00009303 	andeq	r9, r0, r3, lsl #6
    4d70:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4d74:	00228f17 	eoreq	r8, r2, r7, lsl pc
    4d78:	03400100 	movteq	r0, #256	; 0x100
    4d7c:	00000093 	muleq	r0, r3, r0
    4d80:	17729102 	ldrbne	r9, [r2, -r2, lsl #2]!
    4d84:	00002078 	andeq	r2, r0, r8, ror r0
    4d88:	93034001 	movwls	r4, #12289	; 0x3001
    4d8c:	02000000 	andeq	r0, r0, #0
    4d90:	15007091 	strne	r7, [r0, #-145]	; 0xffffff6f
    4d94:	000021fb 	strdeq	r2, [r0], -fp
    4d98:	00037301 	andeq	r7, r3, r1, lsl #6
    4d9c:	32000000 	andcc	r0, r0, #0
    4da0:	01000000 	mrseq	r0, (UNDEF: 0)
    4da4:	0008d39c 	muleq	r8, ip, r3
    4da8:	22341600 	eorscs	r1, r4, #0, 12
    4dac:	73010000 	movwvc	r0, #4096	; 0x1000
    4db0:	00035b03 	andeq	r5, r3, r3, lsl #22
    4db4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4db8:	0020f616 	eoreq	pc, r0, r6, lsl r6	; <UNPREDICTABLE>
    4dbc:	03730100 	cmneq	r3, #0, 2
    4dc0:	00000088 	andeq	r0, r0, r8, lsl #1
    4dc4:	176b9102 	strbne	r9, [fp, -r2, lsl #2]!
    4dc8:	00001fa8 	andeq	r1, r0, r8, lsr #31
    4dcc:	93037501 	movwls	r7, #13569	; 0x3501
    4dd0:	02000000 	andeq	r0, r0, #0
    4dd4:	19007691 	stmdbne	r0, {r0, r4, r7, r9, sl, ip, sp, lr}
    4dd8:	0000026c 	andeq	r0, r0, ip, ror #4
    4ddc:	df06ce07 	svcle	0x0006ce07
    4de0:	05000008 	streq	r0, [r0, #-8]
    4de4:	0000007a 	andeq	r0, r0, sl, ror r0
    4de8:	001c4600 	andseq	r4, ip, r0, lsl #12
    4dec:	3e000400 	cfcpyscc	mvf0, mvf0
    4df0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    4df4:	00011101 	andeq	r1, r1, r1, lsl #2
    4df8:	28110c00 	ldmdacs	r1, {sl, fp}
    4dfc:	05d80000 	ldrbeq	r0, [r8]
    4e00:	00000000 	andeq	r0, r0, r0
    4e04:	26570000 	ldrbcs	r0, [r7], -r0
    4e08:	01020000 	mrseq	r0, (UNDEF: 2)
    4e0c:	00019206 	andeq	r9, r1, r6, lsl #4
    4e10:	00e30300 	rsceq	r0, r3, r0, lsl #6
    4e14:	1d020000 	stcne	0, cr0, [r2, #-0]
    4e18:	00000033 	andeq	r0, r0, r3, lsr r0
    4e1c:	90080102 	andls	r0, r8, r2, lsl #2
    4e20:	02000001 	andeq	r0, r0, #1
    4e24:	00950502 	addseq	r0, r5, r2, lsl #10
    4e28:	72030000 	andvc	r0, r3, #0
    4e2c:	02000000 	andeq	r0, r0, #0
    4e30:	00004c2b 	andeq	r4, r0, fp, lsr #24
    4e34:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4e38:	000001f2 	strdeq	r0, [r0], -r2
    4e3c:	bd050402 	cfstrslt	mvf0, [r5, #-8]
    4e40:	03000000 	movweq	r0, #0
    4e44:	00000067 	andeq	r0, r0, r7, rrx
    4e48:	00654102 	rsbeq	r4, r5, r2, lsl #2
    4e4c:	04020000 	streq	r0, [r2], #-0
    4e50:	0001c907 	andeq	ip, r1, r7, lsl #18
    4e54:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    4e58:	000000b8 	strheq	r0, [r0], -r8
    4e5c:	c4070802 	strgt	r0, [r7], #-2050	; 0xfffff7fe
    4e60:	04000001 	streq	r0, [r0], #-1
    4e64:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4e68:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    4e6c:	0001ce07 	andeq	ip, r1, r7, lsl #28
    4e70:	00e50300 	rsceq	r0, r5, r0, lsl #6
    4e74:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    4e78:	00000028 	andeq	r0, r0, r8, lsr #32
    4e7c:	00007403 	andeq	r7, r0, r3, lsl #8
    4e80:	41240300 			; <UNDEFINED> instruction: 0x41240300
    4e84:	03000000 	movweq	r0, #0
    4e88:	00000069 	andeq	r0, r0, r9, rrx
    4e8c:	005a3003 	subseq	r3, sl, r3
    4e90:	04020000 	streq	r0, [r2], #-0
    4e94:	00005907 	andeq	r5, r0, r7, lsl #18
    4e98:	00930500 	addseq	r0, r3, r0, lsl #10
    4e9c:	01060000 	mrseq	r0, (UNDEF: 6)
    4ea0:	00000033 	andeq	r0, r0, r3, lsr r0
    4ea4:	cf020704 	svcgt	0x00020704
    4ea8:	07000000 	streq	r0, [r0, -r0]
    4eac:	00001c74 	andeq	r1, r0, r4, ror ip
    4eb0:	45530800 	ldrbmi	r0, [r3, #-2048]	; 0xfffff800
    4eb4:	00010054 	andeq	r0, r1, r4, asr r0
    4eb8:	002e7709 	eoreq	r7, lr, r9, lsl #14
    4ebc:	02070400 	andeq	r0, r7, #0, 8
    4ec0:	000000b5 	strheq	r0, [r0], -r5
    4ec4:	002f9509 	eoreq	r9, pc, r9, lsl #10
    4ec8:	02070400 	andeq	r0, r7, #0, 8
    4ecc:	000000b5 	strheq	r0, [r0], -r5
    4ed0:	00330106 	eorseq	r0, r3, r6, lsl #2
    4ed4:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    4ed8:	00010102 	andeq	r0, r1, r2, lsl #2
    4edc:	02f00700 	rscseq	r0, r0, #0, 14
    4ee0:	07000000 	streq	r0, [r0, -r0]
    4ee4:	00000462 	andeq	r0, r0, r2, ror #8
    4ee8:	d4090001 	strle	r0, [r9], #-1
    4eec:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    4ef0:	00e70209 	rsceq	r0, r7, r9, lsl #4
    4ef4:	500a0000 	andpl	r0, sl, r0
    4ef8:	1e04a204 	cdpne	2, 0, cr10, cr4, cr4, {0}
    4efc:	0b000003 	bleq	4f10 <_Min_Stack_Size+0x4d10>
    4f00:	00315243 	eorseq	r5, r1, r3, asr #4
    4f04:	b004a404 	andlt	sl, r4, r4, lsl #8
    4f08:	00000000 	andeq	r0, r0, r0
    4f0c:	0003c20c 	andeq	ip, r3, ip, lsl #4
    4f10:	04a50400 	strteq	r0, [r5], #1024	; 0x400
    4f14:	00000093 	muleq	r0, r3, r0
    4f18:	52430b02 	subpl	r0, r3, #2048	; 0x800
    4f1c:	a6040032 			; <UNDEFINED> instruction: 0xa6040032
    4f20:	0000b004 	andeq	fp, r0, r4
    4f24:	cc0c0400 	cfstrsgt	mvf0, [ip], {-0}
    4f28:	04000003 	streq	r0, [r0], #-3
    4f2c:	009304a7 	addseq	r0, r3, r7, lsr #9
    4f30:	0c060000 	stceq	0, cr0, [r6], {-0}
    4f34:	000027bf 			; <UNDEFINED> instruction: 0x000027bf
    4f38:	b004a804 	andlt	sl, r4, r4, lsl #16
    4f3c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4f40:	0003d60c 	andeq	sp, r3, ip, lsl #12
    4f44:	04a90400 	strteq	r0, [r9], #1024	; 0x400
    4f48:	00000093 	muleq	r0, r3, r0
    4f4c:	23260c0a 			; <UNDEFINED> instruction: 0x23260c0a
    4f50:	aa040000 	bge	104f58 <_Min_Stack_Size+0x104d58>
    4f54:	0000b004 	andeq	fp, r0, r4
    4f58:	ab0c0c00 	blge	307f60 <_Min_Stack_Size+0x307d60>
    4f5c:	04000002 	streq	r0, [r0], #-2
    4f60:	009304ab 	addseq	r0, r3, fp, lsr #9
    4f64:	0b0e0000 	bleq	384f6c <_Min_Stack_Size+0x384d6c>
    4f68:	04005253 	streq	r5, [r0], #-595	; 0xfffffdad
    4f6c:	00b004ac 	adcseq	r0, r0, ip, lsr #9
    4f70:	0c100000 	ldceq	0, cr0, [r0], {-0}
    4f74:	000003ea 	andeq	r0, r0, sl, ror #7
    4f78:	9304ad04 	movwls	sl, #19716	; 0x4d04
    4f7c:	12000000 	andne	r0, r0, #0
    4f80:	5247450b 	subpl	r4, r7, #46137344	; 0x2c00000
    4f84:	04ae0400 	strteq	r0, [lr], #1024	; 0x400
    4f88:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    4f8c:	03f40c14 	mvnseq	r0, #20, 24	; 0x1400
    4f90:	af040000 	svcge	0x00040000
    4f94:	00009304 	andeq	r9, r0, r4, lsl #6
    4f98:	c70c1600 	strgt	r1, [ip, -r0, lsl #12]
    4f9c:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    4fa0:	00b004b0 	ldrhteq	r0, [r0], r0
    4fa4:	0c180000 	ldceq	0, cr0, [r8], {-0}
    4fa8:	000002d7 	ldrdeq	r0, [r0], -r7
    4fac:	9304b104 	movwls	fp, #16644	; 0x4104
    4fb0:	1a000000 	bne	4fb8 <_Min_Stack_Size+0x4db8>
    4fb4:	0024cd0c 	eoreq	ip, r4, ip, lsl #26
    4fb8:	04b20400 	ldrteq	r0, [r2], #1024	; 0x400
    4fbc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    4fc0:	04150c1c 	ldreq	r0, [r5], #-3100	; 0xfffff3e4
    4fc4:	b3040000 	movwlt	r0, #16384	; 0x4000
    4fc8:	00009304 	andeq	r9, r0, r4, lsl #6
    4fcc:	9b0c1e00 	blls	30c7d4 <_Min_Stack_Size+0x30c5d4>
    4fd0:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    4fd4:	00b004b4 	ldrhteq	r0, [r0], r4
    4fd8:	0c200000 	stceq	0, cr0, [r0], #-0
    4fdc:	0000041f 	andeq	r0, r0, pc, lsl r4
    4fe0:	9304b504 	movwls	fp, #17668	; 0x4504
    4fe4:	22000000 	andcs	r0, r0, #0
    4fe8:	544e430b 	strbpl	r4, [lr], #-779	; 0xfffffcf5
    4fec:	04b60400 	ldrteq	r0, [r6], #1024	; 0x400
    4ff0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    4ff4:	2a510c24 	bcs	144808c <_Min_Stack_Size+0x1447e8c>
    4ff8:	b7040000 	strlt	r0, [r4, -r0]
    4ffc:	00009304 	andeq	r9, r0, r4, lsl #6
    5000:	500b2600 	andpl	r2, fp, r0, lsl #12
    5004:	04004353 	streq	r4, [r0], #-851	; 0xfffffcad
    5008:	00b004b8 	ldrhteq	r0, [r0], r8
    500c:	0c280000 	stceq	0, cr0, [r8], #-0
    5010:	00002513 	andeq	r2, r0, r3, lsl r5
    5014:	9304b904 	movwls	fp, #18692	; 0x4904
    5018:	2a000000 	bcs	5020 <_Min_Stack_Size+0x4e20>
    501c:	5252410b 	subspl	r4, r2, #-1073741822	; 0xc0000002
    5020:	04ba0400 	ldrteq	r0, [sl], #1024	; 0x400
    5024:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    5028:	251e0c2c 	ldrcs	r0, [lr, #-3116]	; 0xfffff3d4
    502c:	bb040000 	bllt	105034 <_Min_Stack_Size+0x104e34>
    5030:	00009304 	andeq	r9, r0, r4, lsl #6
    5034:	520b2e00 	andpl	r2, fp, #0, 28
    5038:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
    503c:	00b004bc 	ldrhteq	r0, [r0], ip
    5040:	0c300000 	ldceq	0, cr0, [r0], #-0
    5044:	00002529 	andeq	r2, r0, r9, lsr #10
    5048:	9304bd04 	movwls	fp, #19716	; 0x4d04
    504c:	32000000 	andcc	r0, r0, #0
    5050:	002cfa0c 	eoreq	pc, ip, ip, lsl #20
    5054:	04be0400 	ldrteq	r0, [lr], #1024	; 0x400
    5058:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    505c:	25340c34 	ldrcs	r0, [r4, #-3124]!	; 0xfffff3cc
    5060:	bf040000 	svclt	0x00040000
    5064:	00009304 	andeq	r9, r0, r4, lsl #6
    5068:	f90c3600 			; <UNDEFINED> instruction: 0xf90c3600
    506c:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    5070:	00b004c0 	adcseq	r0, r0, r0, asr #9
    5074:	0c380000 	ldceq	0, cr0, [r8], #-0
    5078:	0000253f 	andeq	r2, r0, pc, lsr r5
    507c:	9304c104 	movwls	ip, #16644	; 0x4104
    5080:	3a000000 	bcc	5088 <_Min_Stack_Size+0x4e88>
    5084:	002d170c 	eoreq	r1, sp, ip, lsl #14
    5088:	04c20400 	strbeq	r0, [r2], #1024	; 0x400
    508c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    5090:	254a0c3c 	strbcs	r0, [sl, #-3132]	; 0xfffff3c4
    5094:	c3040000 	movwgt	r0, #16384	; 0x4000
    5098:	00009304 	andeq	r9, r0, r4, lsl #6
    509c:	1c0c3e00 	stcne	14, cr3, [ip], {-0}
    50a0:	0400002d 	streq	r0, [r0], #-45	; 0xffffffd3
    50a4:	00b004c4 	adcseq	r0, r0, r4, asr #9
    50a8:	0c400000 	mareq	acc0, r0, r0
    50ac:	00002555 	andeq	r2, r0, r5, asr r5
    50b0:	9304c504 	movwls	ip, #17668	; 0x4504
    50b4:	42000000 	andmi	r0, r0, #0
    50b8:	002ab40c 	eoreq	fp, sl, ip, lsl #8
    50bc:	04c60400 	strbeq	r0, [r6], #1024	; 0x400
    50c0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    50c4:	25600c44 	strbcs	r0, [r0, #-3140]!	; 0xfffff3bc
    50c8:	c7040000 	strgt	r0, [r4, -r0]
    50cc:	00009304 	andeq	r9, r0, r4, lsl #6
    50d0:	440b4600 	strmi	r4, [fp], #-1536	; 0xfffffa00
    50d4:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
    50d8:	00b004c8 	adcseq	r0, r0, r8, asr #9
    50dc:	0c480000 	mareq	acc0, r0, r8
    50e0:	0000256b 	andeq	r2, r0, fp, ror #10
    50e4:	9304c904 	movwls	ip, #18692	; 0x4904
    50e8:	4a000000 	bmi	50f0 <_Min_Stack_Size+0x4ef0>
    50ec:	002bd00c 	eoreq	sp, fp, ip
    50f0:	04ca0400 	strbeq	r0, [sl], #1024	; 0x400
    50f4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    50f8:	25760c4c 	ldrbcs	r0, [r6, #-3148]!	; 0xfffff3b4
    50fc:	cb040000 	blgt	105104 <_Min_Stack_Size+0x104f04>
    5100:	00009304 	andeq	r9, r0, r4, lsl #6
    5104:	09004e00 	stmdbeq	r0, {r9, sl, fp, lr}
    5108:	00002644 	andeq	r2, r0, r4, asr #12
    510c:	0d04cc04 	stceq	12, cr12, [r4, #-16]
    5110:	0d000001 	stceq	0, cr0, [r0, #-4]
    5114:	6f33050a 	svcvs	0x0033050a
    5118:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    511c:	00002a5b 	andeq	r2, r0, fp, asr sl
    5120:	00933505 	addseq	r3, r3, r5, lsl #10
    5124:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    5128:	00002351 	andeq	r2, r0, r1, asr r3
    512c:	00933805 	addseq	r3, r3, r5, lsl #16
    5130:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    5134:	00002bf5 	strdeq	r2, [r0], -r5
    5138:	00933b05 	addseq	r3, r3, r5, lsl #22
    513c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    5140:	000026ed 	andeq	r2, r0, sp, ror #13
    5144:	00933f05 	addseq	r3, r3, r5, lsl #30
    5148:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    514c:	00002d6d 	andeq	r2, r0, sp, ror #26
    5150:	00884205 	addeq	r4, r8, r5, lsl #4
    5154:	00080000 	andeq	r0, r8, r0
    5158:	002c0003 	eoreq	r0, ip, r3
    515c:	2a4a0500 	bcs	1286564 <_Min_Stack_Size+0x1286364>
    5160:	0d000003 	stceq	0, cr0, [r0, #-12]
    5164:	e3500510 	cmp	r0, #16, 10	; 0x4000000
    5168:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    516c:	00002ca1 	andeq	r2, r0, r1, lsr #25
    5170:	00935205 	addseq	r5, r3, r5, lsl #4
    5174:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    5178:	00002a22 	andeq	r2, r0, r2, lsr #20
    517c:	00935505 	addseq	r5, r3, r5, lsl #10
    5180:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    5184:	00002581 	andeq	r2, r0, r1, lsl #11
    5188:	00935805 	addseq	r5, r3, r5, lsl #16
    518c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    5190:	000023c6 	andeq	r2, r0, r6, asr #7
    5194:	00935c05 	addseq	r5, r3, r5, lsl #24
    5198:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    519c:	000026de 	ldrdeq	r2, [r0], -lr
    51a0:	00935f05 	addseq	r5, r3, r5, lsl #30
    51a4:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    51a8:	00002b95 	muleq	r0, r5, fp
    51ac:	00936205 	addseq	r6, r3, r5, lsl #4
    51b0:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    51b4:	00002dd3 	ldrdeq	r2, [r0], -r3
    51b8:	00936605 	addseq	r6, r3, r5, lsl #12
    51bc:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    51c0:	0000298f 	andeq	r2, r0, pc, lsl #19
    51c4:	00936a05 	addseq	r6, r3, r5, lsl #20
    51c8:	000e0000 	andeq	r0, lr, r0
    51cc:	002d2103 	eoreq	r2, sp, r3, lsl #2
    51d0:	7a6d0500 	bvc	1b465d8 <_Min_Stack_Size+0x1b463d8>
    51d4:	0d000003 	stceq	0, cr0, [r0, #-12]
    51d8:	3373050a 	cmncc	r3, #41943040	; 0x2800000
    51dc:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    51e0:	000024bb 			; <UNDEFINED> instruction: 0x000024bb
    51e4:	00937605 	addseq	r7, r3, r5, lsl #12
    51e8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    51ec:	00002a42 	andeq	r2, r0, r2, asr #20
    51f0:	00937905 	addseq	r7, r3, r5, lsl #18
    51f4:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    51f8:	0000244e 	andeq	r2, r0, lr, asr #8
    51fc:	00937c05 	addseq	r7, r3, r5, lsl #24
    5200:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    5204:	00002973 	andeq	r2, r0, r3, ror r9
    5208:	00937f05 	addseq	r7, r3, r5, lsl #30
    520c:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    5210:	000023fe 	strdeq	r2, [r0], -lr
    5214:	00938205 	addseq	r8, r3, r5, lsl #4
    5218:	00080000 	andeq	r0, r8, r0
    521c:	002c2e03 	eoreq	r2, ip, r3, lsl #28
    5220:	ee840500 	cdp	5, 8, cr0, cr4, cr0, {0}
    5224:	0d000003 	stceq	0, cr0, [r0, #-12]
    5228:	9b8b050e 	blls	fe2c6668 <BootRAM+0xd236e09>
    522c:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    5230:	000027c4 	andeq	r2, r0, r4, asr #15
    5234:	00938e05 	addseq	r8, r3, r5, lsl #28
    5238:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    523c:	00002b14 	andeq	r2, r0, r4, lsl fp
    5240:	00939105 	addseq	r9, r3, r5, lsl #2
    5244:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    5248:	00002a84 	andeq	r2, r0, r4, lsl #21
    524c:	00939405 	addseq	r9, r3, r5, lsl #8
    5250:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    5254:	00002928 	andeq	r2, r0, r8, lsr #18
    5258:	00939705 	addseq	r9, r3, r5, lsl #14
    525c:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    5260:	0000290e 	andeq	r2, r0, lr, lsl #18
    5264:	00939b05 	addseq	r9, r3, r5, lsl #22
    5268:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    526c:	00002cbc 			; <UNDEFINED> instruction: 0x00002cbc
    5270:	00939e05 	addseq	r9, r3, r5, lsl #28
    5274:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    5278:	000027fd 	strdeq	r2, [r0], -sp
    527c:	0093a105 	addseq	sl, r3, r5, lsl #2
    5280:	000c0000 	andeq	r0, ip, r0
    5284:	00279a03 	eoreq	r9, r7, r3, lsl #20
    5288:	3ea30500 	cdpcc	5, 10, cr0, cr3, cr0, {0}
    528c:	0f000004 	svceq	0x00000004
    5290:	00002e07 	andeq	r2, r0, r7, lsl #28
    5294:	00007a01 	andeq	r7, r0, r1, lsl #20
    5298:	022c0000 	eoreq	r0, ip, #0
    529c:	9c010000 	stcls	0, cr0, [r1], {-0}
    52a0:	000004ca 	andeq	r0, r0, sl, asr #9
    52a4:	0027d210 	eoreq	sp, r7, r0, lsl r2
    52a8:	ca7a0100 	bgt	1e856b0 <_Min_Stack_Size+0x1e854b0>
    52ac:	02000004 	andeq	r0, r0, #4
    52b0:	11007491 			; <UNDEFINED> instruction: 0x11007491
    52b4:	00031e04 	andeq	r1, r3, r4, lsl #28
    52b8:	2b291200 	blcs	a49ac0 <_Min_Stack_Size+0xa498c0>
    52bc:	e2010000 	and	r0, r1, #0
    52c0:	08006070 	stmdaeq	r0, {r4, r5, r6, sp, lr}
    52c4:	000000f8 	strdeq	r0, [r0], -r8
    52c8:	05109c01 	ldreq	r9, [r0, #-3073]	; 0xfffff3ff
    52cc:	d2100000 	andsle	r0, r0, #0
    52d0:	01000027 	tsteq	r0, r7, lsr #32
    52d4:	0004cae2 	andeq	ip, r4, r2, ror #21
    52d8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    52dc:	0029e010 	eoreq	lr, r9, r0, lsl r0
    52e0:	10e20100 	rscne	r0, r2, r0, lsl #2
    52e4:	02000005 	andeq	r0, r0, #5
    52e8:	ec136891 	ldc	8, cr6, [r3], {145}	; 0x91
    52ec:	01000028 	tsteq	r0, r8, lsr #32
    52f0:	000093e4 	andeq	r9, r0, r4, ror #7
    52f4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    52f8:	6f041100 	svcvs	0x00041100
    52fc:	14000003 	strne	r0, [r0], #-3
    5300:	00002d61 	andeq	r2, r0, r1, ror #26
    5304:	00011701 	andeq	r1, r1, r1, lsl #14
    5308:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    530c:	01000001 	tsteq	r0, r1
    5310:	0005789c 	muleq	r5, ip, r8
    5314:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    5318:	17010000 	strne	r0, [r1, -r0]
    531c:	0004ca01 	andeq	ip, r4, r1, lsl #20
    5320:	6c910200 	lfmvs	f0, 4, [r1], {0}
    5324:	0027ae15 	eoreq	sl, r7, r5, lsl lr
    5328:	01170100 	tsteq	r7, r0, lsl #2
    532c:	00000578 	andeq	r0, r0, r8, ror r5
    5330:	16689102 	strbtne	r9, [r8], -r2, lsl #2
    5334:	00002592 	muleq	r0, r2, r5
    5338:	93011901 	movwls	r1, #6401	; 0x1901
    533c:	02000000 	andeq	r0, r0, #0
    5340:	b4167291 	ldrlt	r7, [r6], #-657	; 0xfffffd6f
    5344:	01000026 	tsteq	r0, r6, lsr #32
    5348:	00930119 	addseq	r0, r3, r9, lsl r1
    534c:	91020000 	mrsls	r0, (UNDEF: 2)
    5350:	28f31676 	ldmcs	r3!, {r1, r2, r4, r5, r6, r9, sl, ip}^
    5354:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    5358:	00009301 	andeq	r9, r0, r1, lsl #6
    535c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5360:	e3041100 	movw	r1, #16640	; 0x4100
    5364:	14000003 	strne	r0, [r0], #-3
    5368:	00002be9 	andeq	r2, r0, r9, ror #23
    536c:	00016a01 	andeq	r6, r1, r1, lsl #20
    5370:	10000000 	andne	r0, r0, r0
    5374:	01000001 	tsteq	r0, r1
    5378:	0005e09c 	muleq	r5, ip, r0
    537c:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    5380:	6a010000 	bvs	45388 <_Min_Stack_Size+0x45188>
    5384:	0004ca01 	andeq	ip, r4, r1, lsl #20
    5388:	6c910200 	lfmvs	f0, 4, [r1], {0}
    538c:	0027ae15 	eoreq	sl, r7, r5, lsl lr
    5390:	016a0100 	cmneq	sl, r0, lsl #2
    5394:	00000578 	andeq	r0, r0, r8, ror r5
    5398:	16689102 	strbtne	r9, [r8], -r2, lsl #2
    539c:	00002592 	muleq	r0, r2, r5
    53a0:	93016c01 	movwls	r6, #7169	; 0x1c01
    53a4:	02000000 	andeq	r0, r0, #0
    53a8:	b4167291 	ldrlt	r7, [r6], #-657	; 0xfffffd6f
    53ac:	01000026 	tsteq	r0, r6, lsr #32
    53b0:	0093016c 	addseq	r0, r3, ip, ror #2
    53b4:	91020000 	mrsls	r0, (UNDEF: 2)
    53b8:	28f31676 	ldmcs	r3!, {r1, r2, r4, r5, r6, r9, sl, ip}^
    53bc:	6c010000 	stcvs	0, cr0, [r1], {-0}
    53c0:	00009301 	andeq	r9, r0, r1, lsl #6
    53c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    53c8:	25fb1400 	ldrbcs	r1, [fp, #1024]!	; 0x400
    53cc:	bc010000 	stclt	0, cr0, [r1], {-0}
    53d0:	00000001 	andeq	r0, r0, r1
    53d4:	00010c00 	andeq	r0, r1, r0, lsl #24
    53d8:	429c0100 	addsmi	r0, ip, #0, 2
    53dc:	15000006 	strne	r0, [r0, #-6]
    53e0:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    53e4:	ca01bc01 	bgt	743f0 <_Min_Stack_Size+0x741f0>
    53e8:	02000004 	andeq	r0, r0, #4
    53ec:	ae156c91 	mrcge	12, 0, r6, cr5, cr1, {4}
    53f0:	01000027 	tsteq	r0, r7, lsr #32
    53f4:	057801bc 	ldrbeq	r0, [r8, #-444]!	; 0xfffffe44
    53f8:	91020000 	mrsls	r0, (UNDEF: 2)
    53fc:	25921668 	ldrcs	r1, [r2, #1640]	; 0x668
    5400:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    5404:	00009301 	andeq	r9, r0, r1, lsl #6
    5408:	72910200 	addsvc	r0, r1, #0, 4
    540c:	0026b416 	eoreq	fp, r6, r6, lsl r4
    5410:	01be0100 			; <UNDEFINED> instruction: 0x01be0100
    5414:	00000093 	muleq	r0, r3, r0
    5418:	16769102 	ldrbtne	r9, [r6], -r2, lsl #2
    541c:	000028f3 	strdeq	r2, [r0], -r3
    5420:	9301be01 	movwls	fp, #7681	; 0x1e01
    5424:	02000000 	andeq	r0, r0, #0
    5428:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
    542c:	00002c40 	andeq	r2, r0, r0, asr #24
    5430:	00020b01 	andeq	r0, r2, r1, lsl #22
    5434:	d0000000 	andle	r0, r0, r0
    5438:	01000000 	mrseq	r0, (UNDEF: 0)
    543c:	0006a49c 	muleq	r6, ip, r4
    5440:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    5444:	0b010000 	bleq	4544c <_Min_Stack_Size+0x4524c>
    5448:	0004ca02 	andeq	ip, r4, r2, lsl #20
    544c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    5450:	0027ae15 	eoreq	sl, r7, r5, lsl lr
    5454:	020b0100 	andeq	r0, fp, #0, 2
    5458:	00000578 	andeq	r0, r0, r8, ror r5
    545c:	16689102 	strbtne	r9, [r8], -r2, lsl #2
    5460:	00002592 	muleq	r0, r2, r5
    5464:	93020d01 	movwls	r0, #11521	; 0x2d01
    5468:	02000000 	andeq	r0, r0, #0
    546c:	b4167491 	ldrlt	r7, [r6], #-1169	; 0xfffffb6f
    5470:	01000026 	tsteq	r0, r6, lsr #32
    5474:	0093020d 	addseq	r0, r3, sp, lsl #4
    5478:	91020000 	mrsls	r0, (UNDEF: 2)
    547c:	28f31672 	ldmcs	r3!, {r1, r4, r5, r6, r9, sl, ip}^
    5480:	0d010000 	stceq	0, cr0, [r1, #-0]
    5484:	00009302 	andeq	r9, r0, r2, lsl #6
    5488:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    548c:	2c4c1700 	mcrrcs	7, 0, r1, ip, cr0
    5490:	4b010000 	blmi	45498 <_Min_Stack_Size+0x45298>
    5494:	00000002 	andeq	r0, r0, r2
    5498:	0000a800 	andeq	sl, r0, r0, lsl #16
    549c:	d99c0100 	ldmible	ip, {r8}
    54a0:	15000006 	strne	r0, [r0, #-6]
    54a4:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    54a8:	ca024b01 	bgt	980b4 <_Min_Stack_Size+0x97eb4>
    54ac:	02000004 	andeq	r0, r0, #4
    54b0:	98157491 	ldmdals	r5, {r0, r4, r7, sl, ip, sp, lr}
    54b4:	0100002d 	tsteq	r0, sp, lsr #32
    54b8:	06d9024b 	ldrbeq	r0, [r9], fp, asr #4
    54bc:	91020000 	mrsls	r0, (UNDEF: 2)
    54c0:	04110070 	ldreq	r0, [r1], #-112	; 0xffffff90
    54c4:	00000433 	andeq	r0, r0, r3, lsr r4
    54c8:	00287317 	eoreq	r7, r8, r7, lsl r3
    54cc:	028e0100 	addeq	r0, lr, #0, 2
    54d0:	00000000 	andeq	r0, r0, r0
    54d4:	000000b8 	strheq	r0, [r0], -r8
    54d8:	07329c01 	ldreq	r9, [r2, -r1, lsl #24]!
    54dc:	d2150000 	andsle	r0, r5, #0
    54e0:	01000027 	tsteq	r0, r7, lsr #32
    54e4:	04ca028e 	strbeq	r0, [sl], #654	; 0x28e
    54e8:	91020000 	mrsls	r0, (UNDEF: 2)
    54ec:	2d98156c 	cfldr32cs	mvfx1, [r8, #432]	; 0x1b0
    54f0:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    54f4:	0006d902 	andeq	sp, r6, r2, lsl #18
    54f8:	68910200 	ldmvs	r1, {r9}
    54fc:	00260716 	eoreq	r0, r6, r6, lsl r7
    5500:	02900100 	addseq	r0, r0, #0, 2
    5504:	00000093 	muleq	r0, r3, r0
    5508:	16769102 	ldrbtne	r9, [r6], -r2, lsl #2
    550c:	000029ac 	andeq	r2, r0, ip, lsr #19
    5510:	93029101 	movwls	r9, #8449	; 0x2101
    5514:	02000000 	andeq	r0, r0, #0
    5518:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
    551c:	00002aa5 	andeq	r2, r0, r5, lsr #21
    5520:	0002c801 	andeq	ip, r2, r1, lsl #16
    5524:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    5528:	01000000 	mrseq	r0, (UNDEF: 0)
    552c:	0007679c 	muleq	r7, ip, r7
    5530:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    5534:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    5538:	0004ca02 	andeq	ip, r4, r2, lsl #20
    553c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5540:	002b5315 	eoreq	r5, fp, r5, lsl r3
    5544:	02c80100 	sbceq	r0, r8, #0, 2
    5548:	00000767 	andeq	r0, r0, r7, ror #14
    554c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    5550:	049b0411 	ldreq	r0, [fp], #1041	; 0x411
    5554:	1f140000 	svcne	0x00140000
    5558:	01000027 	tsteq	r0, r7, lsr #32
    555c:	000002e0 	andeq	r0, r0, r0, ror #5
    5560:	00320000 	eorseq	r0, r2, r0
    5564:	9c010000 	stcls	0, cr0, [r1], {-0}
    5568:	00000793 	muleq	r0, r3, r7
    556c:	0029e015 	eoreq	lr, r9, r5, lsl r0
    5570:	02e00100 	rsceq	r0, r0, #0, 2
    5574:	00000510 	andeq	r0, r0, r0, lsl r5
    5578:	00749102 	rsbseq	r9, r4, r2, lsl #2
    557c:	00289b14 	eoreq	r9, r8, r4, lsl fp
    5580:	02f00100 	rscseq	r0, r0, #0, 2
    5584:	00000000 	andeq	r0, r0, r0
    5588:	00000042 	andeq	r0, r0, r2, asr #32
    558c:	07b99c01 	ldreq	r9, [r9, r1, lsl #24]!
    5590:	ae150000 	cdpge	0, 1, cr0, cr5, cr0, {0}
    5594:	01000027 	tsteq	r0, r7, lsr #32
    5598:	057802f0 	ldrbeq	r0, [r8, #-752]!	; 0xfffffd10
    559c:	91020000 	mrsls	r0, (UNDEF: 2)
    55a0:	ba140074 	blt	505778 <_Min_Stack_Size+0x505578>
    55a4:	01000025 	tsteq	r0, r5, lsr #32
    55a8:	00000303 	andeq	r0, r0, r3, lsl #6
    55ac:	00300000 	eorseq	r0, r0, r0
    55b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    55b4:	000007df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    55b8:	002d9815 	eoreq	r9, sp, r5, lsl r8
    55bc:	03030100 	movweq	r0, #12544	; 0x3100
    55c0:	000006d9 	ldrdeq	r0, [r0], -r9
    55c4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    55c8:	0028d914 	eoreq	sp, r8, r4, lsl r9
    55cc:	03130100 	tsteq	r3, #0, 2
    55d0:	00000000 	andeq	r0, r0, r0
    55d4:	0000003c 	andeq	r0, r0, ip, lsr r0
    55d8:	08059c01 	stmdaeq	r5, {r0, sl, fp, ip, pc}
    55dc:	53150000 	tstpl	r5, #0
    55e0:	0100002b 	tsteq	r0, fp, lsr #32
    55e4:	07670313 			; <UNDEFINED> instruction: 0x07670313
    55e8:	91020000 	mrsls	r0, (UNDEF: 2)
    55ec:	c8140074 	ldmdagt	r4, {r2, r4, r5, r6}
    55f0:	0100002b 	tsteq	r0, fp, lsr #32
    55f4:	61680326 	cmnvs	r8, r6, lsr #6
    55f8:	003e0800 	eorseq	r0, lr, r0, lsl #16
    55fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    5600:	0000083a 	andeq	r0, r0, sl, lsr r8
    5604:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5608:	03260100 			; <UNDEFINED> instruction: 0x03260100
    560c:	000004ca 	andeq	r0, r0, sl, asr #9
    5610:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    5614:	00001713 	andeq	r1, r0, r3, lsl r7
    5618:	01032601 	tsteq	r3, r1, lsl #12
    561c:	02000001 	andeq	r0, r0, #1
    5620:	14007391 	strne	r7, [r0], #-913	; 0xfffffc6f
    5624:	00002a92 	muleq	r0, r2, sl
    5628:	00033f01 	andeq	r3, r3, r1, lsl #30
    562c:	4a000000 	bmi	5634 <_Min_Stack_Size+0x5434>
    5630:	01000000 	mrseq	r0, (UNDEF: 0)
    5634:	00086f9c 	muleq	r8, ip, pc	; <UNPREDICTABLE>
    5638:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    563c:	3f010000 	svccc	0x00010000
    5640:	0004ca03 	andeq	ip, r4, r3, lsl #20
    5644:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5648:	00171315 	andseq	r1, r7, r5, lsl r3
    564c:	033f0100 	teqeq	pc, #0, 2
    5650:	00000101 	andeq	r0, r0, r1, lsl #2
    5654:	00739102 	rsbseq	r9, r3, r2, lsl #2
    5658:	002dc614 	eoreq	ip, sp, r4, lsl r6
    565c:	03680100 	cmneq	r8, #0, 2
    5660:	080061a8 	stmdaeq	r0, {r3, r5, r7, r8, sp, lr}
    5664:	00000046 	andeq	r0, r0, r6, asr #32
    5668:	08b39c01 	ldmeq	r3!, {r0, sl, fp, ip, pc}
    566c:	d2150000 	andsle	r0, r5, #0
    5670:	01000027 	tsteq	r0, r7, lsr #32
    5674:	04ca0368 	strbeq	r0, [sl], #872	; 0x368
    5678:	91020000 	mrsls	r0, (UNDEF: 2)
    567c:	2b221574 	blcs	88ac54 <_Min_Stack_Size+0x88aa54>
    5680:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    5684:	00009303 	andeq	r9, r0, r3, lsl #6
    5688:	72910200 	addsvc	r0, r1, #0, 4
    568c:	00171315 	andseq	r1, r7, r5, lsl r3
    5690:	03680100 	cmneq	r8, #0, 2
    5694:	00000101 	andeq	r0, r0, r1, lsl #2
    5698:	00719102 	rsbseq	r9, r1, r2, lsl #2
    569c:	00248e14 	eoreq	r8, r4, r4, lsl lr
    56a0:	038d0100 	orreq	r0, sp, #0, 2
    56a4:	00000000 	andeq	r0, r0, r0
    56a8:	0000001c 	andeq	r0, r0, ip, lsl r0
    56ac:	08e89c01 	stmiaeq	r8!, {r0, sl, fp, ip, pc}^
    56b0:	d2150000 	andsle	r0, r5, #0
    56b4:	01000027 	tsteq	r0, r7, lsr #32
    56b8:	04ca038d 	strbeq	r0, [sl], #909	; 0x38d
    56bc:	91020000 	mrsls	r0, (UNDEF: 2)
    56c0:	2a321574 	bcs	c8ac98 <_Min_Stack_Size+0xc8aa98>
    56c4:	8d010000 	stchi	0, cr0, [r1, #-0]
    56c8:	00009303 	andeq	r9, r0, r3, lsl #6
    56cc:	72910200 	addsvc	r0, r1, #0, 4
    56d0:	29f71400 	ldmibcs	r7!, {sl, ip}^
    56d4:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    56d8:	00000003 	andeq	r0, r0, r3
    56dc:	00002800 	andeq	r2, r0, r0, lsl #16
    56e0:	2c9c0100 	ldfcss	f0, [ip], {0}
    56e4:	15000009 	strne	r0, [r0, #-9]
    56e8:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    56ec:	ca03a901 	bgt	efaf8 <_Min_Stack_Size+0xef8f8>
    56f0:	02000004 	andeq	r0, r0, #4
    56f4:	a0157491 	mulsge	r5, r1, r4
    56f8:	01000029 	tsteq	r0, r9, lsr #32
    56fc:	009303a9 	addseq	r0, r3, r9, lsr #7
    5700:	91020000 	mrsls	r0, (UNDEF: 2)
    5704:	26651572 			; <UNDEFINED> instruction: 0x26651572
    5708:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    570c:	00009303 	andeq	r9, r0, r3, lsl #6
    5710:	70910200 	addsvc	r0, r1, r0, lsl #4
    5714:	231b1400 	tstcs	fp, #0, 8
    5718:	c4010000 	strgt	r0, [r1], #-0
    571c:	00000003 	andeq	r0, r0, r3
    5720:	00004600 	andeq	r4, r0, r0, lsl #12
    5724:	709c0100 	addsvc	r0, ip, r0, lsl #2
    5728:	15000009 	strne	r0, [r0, #-9]
    572c:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    5730:	ca03c401 	bgt	f673c <_Min_Stack_Size+0xf653c>
    5734:	02000004 	andeq	r0, r0, #4
    5738:	8d157491 	cfldrshi	mvf7, [r5, #-580]	; 0xfffffdbc
    573c:	01000028 	tsteq	r0, r8, lsr #32
    5740:	009303c4 	addseq	r0, r3, r4, asr #7
    5744:	91020000 	mrsls	r0, (UNDEF: 2)
    5748:	17131572 			; <UNDEFINED> instruction: 0x17131572
    574c:	c4010000 	strgt	r0, [r1], #-0
    5750:	00010103 	andeq	r0, r1, r3, lsl #2
    5754:	71910200 	orrsvc	r0, r1, r0, lsl #4
    5758:	240b1400 	strcs	r1, [fp], #-1024	; 0xfffffc00
    575c:	dd010000 	stcle	0, cr0, [r1, #-0]
    5760:	00000003 	andeq	r0, r0, r3
    5764:	00002200 	andeq	r2, r0, r0, lsl #4
    5768:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    576c:	15000009 	strne	r0, [r0, #-9]
    5770:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    5774:	ca03dd01 	bgt	fcb80 <_Min_Stack_Size+0xfc980>
    5778:	02000004 	andeq	r0, r0, #4
    577c:	17007491 			; <UNDEFINED> instruction: 0x17007491
    5780:	00002ae1 	andeq	r2, r0, r1, ror #21
    5784:	0003f001 	andeq	pc, r3, r1
    5788:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    578c:	01000000 	mrseq	r0, (UNDEF: 0)
    5790:	0009cb9c 	muleq	r9, ip, fp
    5794:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    5798:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    579c:	0004ca03 	andeq	ip, r4, r3, lsl #20
    57a0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    57a4:	00232b15 	eoreq	r2, r3, r5, lsl fp
    57a8:	03f00100 	mvnseq	r0, #0, 2
    57ac:	00000093 	muleq	r0, r3, r0
    57b0:	00729102 	rsbseq	r9, r2, r2, lsl #2
    57b4:	002a6917 	eoreq	r6, sl, r7, lsl r9
    57b8:	040b0100 	streq	r0, [fp], #-256	; 0xffffff00
    57bc:	00000000 	andeq	r0, r0, r0
    57c0:	0000005c 	andeq	r0, r0, ip, asr r0
    57c4:	0a1e9c01 	beq	7ac7d0 <_Min_Stack_Size+0x7ac5d0>
    57c8:	d2150000 	andsle	r0, r5, #0
    57cc:	01000027 	tsteq	r0, r7, lsr #32
    57d0:	04ca040b 	strbeq	r0, [sl], #1035	; 0x40b
    57d4:	91020000 	mrsls	r0, (UNDEF: 2)
    57d8:	2b3a1574 	blcs	e8adb0 <_Min_Stack_Size+0xe8abb0>
    57dc:	0b010000 	bleq	457e4 <_Min_Stack_Size+0x455e4>
    57e0:	00009304 	andeq	r9, r0, r4, lsl #6
    57e4:	72910200 	addsvc	r0, r1, #0, 4
    57e8:	002a4215 	eoreq	r4, sl, r5, lsl r2
    57ec:	040c0100 	streq	r0, [ip], #-256	; 0xffffff00
    57f0:	00000093 	muleq	r0, r3, r0
    57f4:	15709102 	ldrbne	r9, [r0, #-258]!	; 0xfffffefe
    57f8:	00002402 	andeq	r2, r0, r2, lsl #8
    57fc:	93040c01 	movwls	r0, #19457	; 0x4c01
    5800:	02000000 	andeq	r0, r0, #0
    5804:	17006e91 			; <UNDEFINED> instruction: 0x17006e91
    5808:	00002cff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    580c:	00043301 	andeq	r3, r4, r1, lsl #6
    5810:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    5814:	01000000 	mrseq	r0, (UNDEF: 0)
    5818:	000a809c 	muleq	sl, ip, r0
    581c:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    5820:	33010000 	movwcc	r0, #4096	; 0x1000
    5824:	0004ca04 	andeq	ip, r4, r4, lsl #20
    5828:	6c910200 	lfmvs	f0, 4, [r1], {0}
    582c:	0028fa15 	eoreq	pc, r8, r5, lsl sl	; <UNPREDICTABLE>
    5830:	04330100 	ldrteq	r0, [r3], #-256	; 0xffffff00
    5834:	00000093 	muleq	r0, r3, r0
    5838:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
    583c:	000028c6 	andeq	r2, r0, r6, asr #17
    5840:	93043301 	movwls	r3, #17153	; 0x4301
    5844:	02000000 	andeq	r0, r0, #0
    5848:	b9156891 	ldmdblt	r5, {r0, r4, r7, fp, sp, lr}
    584c:	0100002d 	tsteq	r0, sp, lsr #32
    5850:	00930434 	addseq	r0, r3, r4, lsr r4
    5854:	91020000 	mrsls	r0, (UNDEF: 2)
    5858:	28be1666 	ldmcs	lr!, {r1, r2, r5, r6, r9, sl, ip}
    585c:	36010000 	strcc	r0, [r1], -r0
    5860:	00009304 	andeq	r9, r0, r4, lsl #6
    5864:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    5868:	2ba51700 	blcs	fe94b470 <BootRAM+0xd8bbc11>
    586c:	5d010000 	stcpl	0, cr0, [r1, #-0]
    5870:	00000004 	andeq	r0, r0, r4
    5874:	00003e00 	andeq	r3, r0, r0, lsl #28
    5878:	d39c0100 	orrsle	r0, ip, #0, 2
    587c:	1500000a 	strne	r0, [r0, #-10]
    5880:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    5884:	ca045d01 	bgt	11cc90 <_Min_Stack_Size+0x11ca90>
    5888:	02000004 	andeq	r0, r0, #4
    588c:	fa157491 	blx	562ad8 <_Min_Stack_Size+0x5628d8>
    5890:	01000028 	tsteq	r0, r8, lsr #32
    5894:	0093045d 	addseq	r0, r3, sp, asr r4
    5898:	91020000 	mrsls	r0, (UNDEF: 2)
    589c:	28c61572 	stmiacs	r6, {r1, r4, r5, r6, r8, sl, ip}^
    58a0:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    58a4:	00009304 	andeq	r9, r0, r4, lsl #6
    58a8:	70910200 	addsvc	r0, r1, r0, lsl #4
    58ac:	002db915 	eoreq	fp, sp, r5, lsl r9
    58b0:	045e0100 	ldrbeq	r0, [lr], #-256	; 0xffffff00
    58b4:	00000093 	muleq	r0, r3, r0
    58b8:	006e9102 	rsbeq	r9, lr, r2, lsl #2
    58bc:	002df914 	eoreq	pc, sp, r4, lsl r9	; <UNPREDICTABLE>
    58c0:	047c0100 	ldrbteq	r0, [ip], #-256	; 0xffffff00
    58c4:	00000000 	andeq	r0, r0, r0
    58c8:	00000052 	andeq	r0, r0, r2, asr r0
    58cc:	0b359c01 	bleq	d6c8d8 <_Min_Stack_Size+0xd6c6d8>
    58d0:	d2150000 	andsle	r0, r5, #0
    58d4:	01000027 	tsteq	r0, r7, lsr #32
    58d8:	04ca047c 	strbeq	r0, [sl], #1148	; 0x47c
    58dc:	91020000 	mrsls	r0, (UNDEF: 2)
    58e0:	28fa156c 	ldmcs	sl!, {r2, r3, r5, r6, r8, sl, ip}^
    58e4:	7c010000 	stcvc	0, cr0, [r1], {-0}
    58e8:	00009304 	andeq	r9, r0, r4, lsl #6
    58ec:	6a910200 	bvs	fe4460f4 <BootRAM+0xd3b6895>
    58f0:	0028c615 	eoreq	ip, r8, r5, lsl r6
    58f4:	047c0100 	ldrbteq	r0, [ip], #-256	; 0xffffff00
    58f8:	00000093 	muleq	r0, r3, r0
    58fc:	15689102 	strbne	r9, [r8, #-258]!	; 0xfffffefe
    5900:	00002db9 			; <UNDEFINED> instruction: 0x00002db9
    5904:	93047d01 	movwls	r7, #19713	; 0x4d01
    5908:	02000000 	andeq	r0, r0, #0
    590c:	be166691 	mrclt	6, 0, r6, cr6, cr1, {4}
    5910:	01000028 	tsteq	r0, r8, lsr #32
    5914:	0093047f 	addseq	r0, r3, pc, ror r4
    5918:	91020000 	mrsls	r0, (UNDEF: 2)
    591c:	cd140076 	ldcgt	0, cr0, [r4, #-472]	; 0xfffffe28
    5920:	0100002a 	tsteq	r0, sl, lsr #32
    5924:	00000498 	muleq	r0, r8, r4
    5928:	00260000 	eoreq	r0, r6, r0
    592c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5930:	00000b79 	andeq	r0, r0, r9, ror fp
    5934:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5938:	04980100 	ldreq	r0, [r8], #256	; 0x100
    593c:	000004ca 	andeq	r0, r0, sl, asr #9
    5940:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    5944:	00002869 	andeq	r2, r0, r9, ror #16
    5948:	93049801 	movwls	r9, #18433	; 0x4801
    594c:	02000000 	andeq	r0, r0, #0
    5950:	ac157291 	lfmge	f7, 4, [r5], {145}	; 0x91
    5954:	01000028 	tsteq	r0, r8, lsr #32
    5958:	00930498 	umullseq	r0, r3, r8, r4
    595c:	91020000 	mrsls	r0, (UNDEF: 2)
    5960:	d3140070 	tstle	r4, #112	; 0x70
    5964:	01000024 	tsteq	r0, r4, lsr #32
    5968:	000004af 	andeq	r0, r0, pc, lsr #9
    596c:	00360000 	eorseq	r0, r6, r0
    5970:	9c010000 	stcls	0, cr0, [r1], {-0}
    5974:	00000bbd 			; <UNDEFINED> instruction: 0x00000bbd
    5978:	0027d215 	eoreq	sp, r7, r5, lsl r2
    597c:	04af0100 	strteq	r0, [pc], #256	; 5984 <_Min_Stack_Size+0x5784>
    5980:	000004ca 	andeq	r0, r0, sl, asr #9
    5984:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5988:	00002351 	andeq	r2, r0, r1, asr r3
    598c:	9304af01 	movwls	sl, #20225	; 0x4f01
    5990:	02000000 	andeq	r0, r0, #0
    5994:	ec166a91 			; <UNDEFINED> instruction: 0xec166a91
    5998:	01000028 	tsteq	r0, r8, lsr #32
    599c:	009304b1 			; <UNDEFINED> instruction: 0x009304b1
    59a0:	91020000 	mrsls	r0, (UNDEF: 2)
    59a4:	e2140076 	ands	r0, r4, #118	; 0x76
    59a8:	01000023 	tsteq	r0, r3, lsr #32
    59ac:	000004cd 	andeq	r0, r0, sp, asr #9
    59b0:	00360000 	eorseq	r0, r6, r0
    59b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    59b8:	00000c01 	andeq	r0, r0, r1, lsl #24
    59bc:	0027d215 	eoreq	sp, r7, r5, lsl r2
    59c0:	04cd0100 	strbeq	r0, [sp], #256	; 0x100
    59c4:	000004ca 	andeq	r0, r0, sl, asr #9
    59c8:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    59cc:	0000232b 	andeq	r2, r0, fp, lsr #6
    59d0:	9304cd01 	movwls	ip, #19713	; 0x4d01
    59d4:	02000000 	andeq	r0, r0, #0
    59d8:	be166a91 			; <UNDEFINED> instruction: 0xbe166a91
    59dc:	01000028 	tsteq	r0, r8, lsr #32
    59e0:	009304cf 	addseq	r0, r3, pc, asr #9
    59e4:	91020000 	mrsls	r0, (UNDEF: 2)
    59e8:	5e140076 	mrcpl	0, 0, r0, cr4, cr6, {3}
    59ec:	01000024 	tsteq	r0, r4, lsr #32
    59f0:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    59f4:	00960000 	addseq	r0, r6, r0
    59f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    59fc:	00000c81 	andeq	r0, r0, r1, lsl #25
    5a00:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5a04:	04f00100 	ldrbteq	r0, [r0], #256	; 0x100
    5a08:	000004ca 	andeq	r0, r0, sl, asr #9
    5a0c:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5a10:	000027d7 	ldrdeq	r2, [r0], -r7
    5a14:	9304f001 	movwls	pc, #16385	; 0x4001	; <UNPREDICTABLE>
    5a18:	02000000 	andeq	r0, r0, #0
    5a1c:	a0156a91 	mulsge	r5, r1, sl
    5a20:	01000024 	tsteq	r0, r4, lsr #32
    5a24:	009304f1 			; <UNDEFINED> instruction: 0x009304f1
    5a28:	91020000 	mrsls	r0, (UNDEF: 2)
    5a2c:	239e1568 	orrscs	r1, lr, #104, 10	; 0x1a000000
    5a30:	f1010000 	setend	le
    5a34:	00009304 	andeq	r9, r0, r4, lsl #6
    5a38:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    5a3c:	0028be16 	eoreq	fp, r8, r6, lsl lr
    5a40:	04f30100 	ldrbteq	r0, [r3], #256	; 0x100
    5a44:	00000093 	muleq	r0, r3, r0
    5a48:	16769102 	ldrbtne	r9, [r6], -r2, lsl #2
    5a4c:	000023d0 	ldrdeq	r2, [r0], -r0
    5a50:	9304f401 	movwls	pc, #17409	; 0x4401	; <UNPREDICTABLE>
    5a54:	02000000 	andeq	r0, r0, #0
    5a58:	b4167491 	ldrlt	r7, [r6], #-1169	; 0xfffffb6f
    5a5c:	01000026 	tsteq	r0, r6, lsr #32
    5a60:	009304f5 			; <UNDEFINED> instruction: 0x009304f5
    5a64:	91020000 	mrsls	r0, (UNDEF: 2)
    5a68:	4b140072 	blmi	505c38 <_Min_Stack_Size+0x505a38>
    5a6c:	01000029 	tsteq	r0, r9, lsr #32
    5a70:	00000523 	andeq	r0, r0, r3, lsr #10
    5a74:	00360000 	eorseq	r0, r6, r0
    5a78:	9c010000 	stcls	0, cr0, [r1], {-0}
    5a7c:	00000cc5 	andeq	r0, r0, r5, asr #25
    5a80:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5a84:	05230100 	streq	r0, [r3, #-256]!	; 0xffffff00
    5a88:	000004ca 	andeq	r0, r0, sl, asr #9
    5a8c:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5a90:	000024e9 	andeq	r2, r0, r9, ror #9
    5a94:	93052301 	movwls	r2, #21249	; 0x5301
    5a98:	02000000 	andeq	r0, r0, #0
    5a9c:	d0166a91 	mulsle	r6, r1, sl
    5aa0:	01000023 	tsteq	r0, r3, lsr #32
    5aa4:	00930525 	addseq	r0, r3, r5, lsr #10
    5aa8:	91020000 	mrsls	r0, (UNDEF: 2)
    5aac:	f0140076 			; <UNDEFINED> instruction: 0xf0140076
    5ab0:	01000022 	tsteq	r0, r2, lsr #32
    5ab4:	0000053b 	andeq	r0, r0, fp, lsr r5
    5ab8:	003a0000 	eorseq	r0, sl, r0
    5abc:	9c010000 	stcls	0, cr0, [r1], {-0}
    5ac0:	00000d09 	andeq	r0, r0, r9, lsl #26
    5ac4:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5ac8:	053b0100 	ldreq	r0, [fp, #-256]!	; 0xffffff00
    5acc:	000004ca 	andeq	r0, r0, sl, asr #9
    5ad0:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5ad4:	000024e9 	andeq	r2, r0, r9, ror #9
    5ad8:	93053b01 	movwls	r3, #23297	; 0x5b01
    5adc:	02000000 	andeq	r0, r0, #0
    5ae0:	d0166a91 	mulsle	r6, r1, sl
    5ae4:	01000023 	tsteq	r0, r3, lsr #32
    5ae8:	0093053d 	addseq	r0, r3, sp, lsr r5
    5aec:	91020000 	mrsls	r0, (UNDEF: 2)
    5af0:	5f140076 	svcpl	0x00140076
    5af4:	01000029 	tsteq	r0, r9, lsr #32
    5af8:	00000553 	andeq	r0, r0, r3, asr r5
    5afc:	00360000 	eorseq	r0, r6, r0
    5b00:	9c010000 	stcls	0, cr0, [r1], {-0}
    5b04:	00000d4d 	andeq	r0, r0, sp, asr #26
    5b08:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5b0c:	05530100 	ldrbeq	r0, [r3, #-256]	; 0xffffff00
    5b10:	000004ca 	andeq	r0, r0, sl, asr #9
    5b14:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5b18:	000024e9 	andeq	r2, r0, r9, ror #9
    5b1c:	93055301 	movwls	r5, #21249	; 0x5301
    5b20:	02000000 	andeq	r0, r0, #0
    5b24:	d9166a91 	ldmdble	r6, {r0, r4, r7, r9, fp, sp, lr}
    5b28:	01000023 	tsteq	r0, r3, lsr #32
    5b2c:	00930555 	addseq	r0, r3, r5, asr r5
    5b30:	91020000 	mrsls	r0, (UNDEF: 2)
    5b34:	61140076 	tstvs	r4, r6, ror r0
    5b38:	01000023 	tsteq	r0, r3, lsr #32
    5b3c:	0000056b 	andeq	r0, r0, fp, ror #10
    5b40:	003a0000 	eorseq	r0, sl, r0
    5b44:	9c010000 	stcls	0, cr0, [r1], {-0}
    5b48:	00000d91 	muleq	r0, r1, sp
    5b4c:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5b50:	056b0100 	strbeq	r0, [fp, #-256]!	; 0xffffff00
    5b54:	000004ca 	andeq	r0, r0, sl, asr #9
    5b58:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5b5c:	000024e9 	andeq	r2, r0, r9, ror #9
    5b60:	93056b01 	movwls	r6, #23297	; 0x5b01
    5b64:	02000000 	andeq	r0, r0, #0
    5b68:	d9166a91 	ldmdble	r6, {r0, r4, r7, r9, fp, sp, lr}
    5b6c:	01000023 	tsteq	r0, r3, lsr #32
    5b70:	0093056d 	addseq	r0, r3, sp, ror #10
    5b74:	91020000 	mrsls	r0, (UNDEF: 2)
    5b78:	39140076 	ldmdbcc	r4, {r1, r2, r4, r5, r6}
    5b7c:	01000024 	tsteq	r0, r4, lsr #32
    5b80:	00000581 	andeq	r0, r0, r1, lsl #11
    5b84:	003e0000 	eorseq	r0, lr, r0
    5b88:	9c010000 	stcls	0, cr0, [r1], {-0}
    5b8c:	00000dc6 	andeq	r0, r0, r6, asr #27
    5b90:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5b94:	05810100 	streq	r0, [r1, #256]	; 0x100
    5b98:	000004ca 	andeq	r0, r0, sl, asr #9
    5b9c:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    5ba0:	00001713 	andeq	r1, r0, r3, lsl r7
    5ba4:	01058101 	tsteq	r5, r1, lsl #2
    5ba8:	02000001 	andeq	r0, r0, #1
    5bac:	14007391 	strne	r7, [r0], #-913	; 0xfffffc6f
    5bb0:	000026a6 	andeq	r2, r0, r6, lsr #13
    5bb4:	00059901 	andeq	r9, r5, r1, lsl #18
    5bb8:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    5bbc:	01000000 	mrseq	r0, (UNDEF: 0)
    5bc0:	000dfb9c 	muleq	sp, ip, fp
    5bc4:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    5bc8:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    5bcc:	0004ca05 	andeq	ip, r4, r5, lsl #20
    5bd0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5bd4:	00171315 	andseq	r1, r7, r5, lsl r3
    5bd8:	05990100 	ldreq	r0, [r9, #256]	; 0x100
    5bdc:	00000101 	andeq	r0, r0, r1, lsl #2
    5be0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    5be4:	00263414 	eoreq	r3, r6, r4, lsl r4
    5be8:	05b20100 	ldreq	r0, [r2, #256]!	; 0x100
    5bec:	00000000 	andeq	r0, r0, r0
    5bf0:	0000003e 	andeq	r0, r0, lr, lsr r0
    5bf4:	0e309c01 	cdpeq	12, 3, cr9, cr0, cr1, {0}
    5bf8:	d2150000 	andsle	r0, r5, #0
    5bfc:	01000027 	tsteq	r0, r7, lsr #32
    5c00:	04ca05b2 	strbeq	r0, [sl], #1458	; 0x5b2
    5c04:	91020000 	mrsls	r0, (UNDEF: 2)
    5c08:	17131574 			; <UNDEFINED> instruction: 0x17131574
    5c0c:	b2010000 	andlt	r0, r1, #0
    5c10:	00010105 	andeq	r0, r1, r5, lsl #2
    5c14:	73910200 	orrsvc	r0, r1, #0, 4
    5c18:	2ce51400 	cfstrdcs	mvd1, [r5]
    5c1c:	cb010000 	blgt	45c24 <_Min_Stack_Size+0x45a24>
    5c20:	00000005 	andeq	r0, r0, r5
    5c24:	00003e00 	andeq	r3, r0, r0, lsl #28
    5c28:	659c0100 	ldrvs	r0, [ip, #256]	; 0x100
    5c2c:	1500000e 	strne	r0, [r0, #-14]
    5c30:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    5c34:	ca05cb01 	bgt	178840 <_Min_Stack_Size+0x178640>
    5c38:	02000004 	andeq	r0, r0, #4
    5c3c:	13157491 	tstne	r5, #-1862270976	; 0x91000000
    5c40:	01000017 	tsteq	r0, r7, lsl r0
    5c44:	010105cb 	smlabteq	r1, fp, r5, r0
    5c48:	91020000 	mrsls	r0, (UNDEF: 2)
    5c4c:	50140073 	andspl	r0, r4, r3, ror r0
    5c50:	01000026 	tsteq	r0, r6, lsr #32
    5c54:	000005e5 	andeq	r0, r0, r5, ror #11
    5c58:	00360000 	eorseq	r0, r6, r0
    5c5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5c60:	00000ea9 	andeq	r0, r0, r9, lsr #29
    5c64:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5c68:	05e50100 	strbeq	r0, [r5, #256]!	; 0x100
    5c6c:	000004ca 	andeq	r0, r0, sl, asr #9
    5c70:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5c74:	00002505 	andeq	r2, r0, r5, lsl #10
    5c78:	9305e501 	movwls	lr, #21761	; 0x5501
    5c7c:	02000000 	andeq	r0, r0, #0
    5c80:	d0166a91 	mulsle	r6, r1, sl
    5c84:	01000023 	tsteq	r0, r3, lsr #32
    5c88:	009305e7 	addseq	r0, r3, r7, ror #11
    5c8c:	91020000 	mrsls	r0, (UNDEF: 2)
    5c90:	79140076 	ldmdbvc	r4, {r1, r2, r4, r5, r6}
    5c94:	01000024 	tsteq	r0, r4, lsr #32
    5c98:	000005fe 	strdeq	r0, [r0], -lr
    5c9c:	003a0000 	eorseq	r0, sl, r0
    5ca0:	9c010000 	stcls	0, cr0, [r1], {-0}
    5ca4:	00000eed 	andeq	r0, r0, sp, ror #29
    5ca8:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5cac:	05fe0100 	ldrbeq	r0, [lr, #256]!	; 0x100
    5cb0:	000004ca 	andeq	r0, r0, sl, asr #9
    5cb4:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5cb8:	00002505 	andeq	r2, r0, r5, lsl #10
    5cbc:	9305fe01 	movwls	pc, #24065	; 0x5e01	; <UNPREDICTABLE>
    5cc0:	02000000 	andeq	r0, r0, #0
    5cc4:	d0166a91 	mulsle	r6, r1, sl
    5cc8:	01000023 	tsteq	r0, r3, lsr #32
    5ccc:	00930600 	addseq	r0, r3, r0, lsl #12
    5cd0:	91020000 	mrsls	r0, (UNDEF: 2)
    5cd4:	24140076 	ldrcs	r0, [r4], #-118	; 0xffffff8a
    5cd8:	0100002e 	tsteq	r0, lr, lsr #32
    5cdc:	00000616 	andeq	r0, r0, r6, lsl r6
    5ce0:	00360000 	eorseq	r0, r6, r0
    5ce4:	9c010000 	stcls	0, cr0, [r1], {-0}
    5ce8:	00000f31 	andeq	r0, r0, r1, lsr pc
    5cec:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5cf0:	06160100 	ldreq	r0, [r6], -r0, lsl #2
    5cf4:	000004ca 	andeq	r0, r0, sl, asr #9
    5cf8:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5cfc:	00002505 	andeq	r2, r0, r5, lsl #10
    5d00:	93061601 	movwls	r1, #26113	; 0x6601
    5d04:	02000000 	andeq	r0, r0, #0
    5d08:	d9166a91 	ldmdble	r6, {r0, r4, r7, r9, fp, sp, lr}
    5d0c:	01000023 	tsteq	r0, r3, lsr #32
    5d10:	00930618 	addseq	r0, r3, r8, lsl r6
    5d14:	91020000 	mrsls	r0, (UNDEF: 2)
    5d18:	7e140076 	mrcvc	0, 0, r0, cr4, cr6, {3}
    5d1c:	0100002c 	tsteq	r0, ip, lsr #32
    5d20:	0000062e 	andeq	r0, r0, lr, lsr #12
    5d24:	003a0000 	eorseq	r0, sl, r0
    5d28:	9c010000 	stcls	0, cr0, [r1], {-0}
    5d2c:	00000f75 	andeq	r0, r0, r5, ror pc
    5d30:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5d34:	062e0100 	strteq	r0, [lr], -r0, lsl #2
    5d38:	000004ca 	andeq	r0, r0, sl, asr #9
    5d3c:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5d40:	00002505 	andeq	r2, r0, r5, lsl #10
    5d44:	93062e01 	movwls	r2, #28161	; 0x6e01
    5d48:	02000000 	andeq	r0, r0, #0
    5d4c:	d9166a91 	ldmdble	r6, {r0, r4, r7, r9, fp, sp, lr}
    5d50:	01000023 	tsteq	r0, r3, lsr #32
    5d54:	00930630 	addseq	r0, r3, r0, lsr r6
    5d58:	91020000 	mrsls	r0, (UNDEF: 2)
    5d5c:	4d140076 	ldcmi	0, cr0, [r4, #-472]	; 0xfffffe28
    5d60:	0100002e 	tsteq	r0, lr, lsr #32
    5d64:	00000646 	andeq	r0, r0, r6, asr #12
    5d68:	00360000 	eorseq	r0, r6, r0
    5d6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5d70:	00000fb9 			; <UNDEFINED> instruction: 0x00000fb9
    5d74:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5d78:	06460100 	strbeq	r0, [r6], -r0, lsl #2
    5d7c:	000004ca 	andeq	r0, r0, sl, asr #9
    5d80:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5d84:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
    5d88:	93064601 	movwls	r4, #26113	; 0x6601
    5d8c:	02000000 	andeq	r0, r0, #0
    5d90:	d0166a91 	mulsle	r6, r1, sl
    5d94:	01000023 	tsteq	r0, r3, lsr #32
    5d98:	00930648 	addseq	r0, r3, r8, asr #12
    5d9c:	91020000 	mrsls	r0, (UNDEF: 2)
    5da0:	71140076 	tstvc	r4, r6, ror r0
    5da4:	0100002b 	tsteq	r0, fp, lsr #32
    5da8:	00000660 	andeq	r0, r0, r0, ror #12
    5dac:	003a0000 	eorseq	r0, sl, r0
    5db0:	9c010000 	stcls	0, cr0, [r1], {-0}
    5db4:	00000ffd 	strdeq	r0, [r0], -sp
    5db8:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5dbc:	06600100 	strbteq	r0, [r0], -r0, lsl #2
    5dc0:	000004ca 	andeq	r0, r0, sl, asr #9
    5dc4:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5dc8:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
    5dcc:	93066001 	movwls	r6, #24577	; 0x6001
    5dd0:	02000000 	andeq	r0, r0, #0
    5dd4:	d0166a91 	mulsle	r6, r1, sl
    5dd8:	01000023 	tsteq	r0, r3, lsr #32
    5ddc:	00930662 	addseq	r0, r3, r2, ror #12
    5de0:	91020000 	mrsls	r0, (UNDEF: 2)
    5de4:	12140076 	andsne	r0, r4, #118	; 0x76
    5de8:	0100002e 	tsteq	r0, lr, lsr #32
    5dec:	00000679 	andeq	r0, r0, r9, ror r6
    5df0:	00360000 	eorseq	r0, r6, r0
    5df4:	9c010000 	stcls	0, cr0, [r1], {-0}
    5df8:	00001041 	andeq	r1, r0, r1, asr #32
    5dfc:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5e00:	06790100 	ldrbteq	r0, [r9], -r0, lsl #2
    5e04:	000004ca 	andeq	r0, r0, sl, asr #9
    5e08:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5e0c:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
    5e10:	93067901 	movwls	r7, #26881	; 0x6901
    5e14:	02000000 	andeq	r0, r0, #0
    5e18:	d9166a91 	ldmdble	r6, {r0, r4, r7, r9, fp, sp, lr}
    5e1c:	01000023 	tsteq	r0, r3, lsr #32
    5e20:	0093067b 	addseq	r0, r3, fp, ror r6
    5e24:	91020000 	mrsls	r0, (UNDEF: 2)
    5e28:	83140076 	tsthi	r4, #118	; 0x76
    5e2c:	0100002b 	tsteq	r0, fp, lsr #32
    5e30:	00000692 	muleq	r0, r2, r6
    5e34:	003a0000 	eorseq	r0, sl, r0
    5e38:	9c010000 	stcls	0, cr0, [r1], {-0}
    5e3c:	00001085 	andeq	r1, r0, r5, lsl #1
    5e40:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5e44:	06920100 	ldreq	r0, [r2], r0, lsl #2
    5e48:	000004ca 	andeq	r0, r0, sl, asr #9
    5e4c:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5e50:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
    5e54:	93069201 	movwls	r9, #25089	; 0x6201
    5e58:	02000000 	andeq	r0, r0, #0
    5e5c:	d9166a91 	ldmdble	r6, {r0, r4, r7, r9, fp, sp, lr}
    5e60:	01000023 	tsteq	r0, r3, lsr #32
    5e64:	00930694 	umullseq	r0, r3, r4, r6
    5e68:	91020000 	mrsls	r0, (UNDEF: 2)
    5e6c:	75140076 	ldrvc	r0, [r4, #-118]	; 0xffffff8a
    5e70:	01000023 	tsteq	r0, r3, lsr #32
    5e74:	000006ab 	andeq	r0, r0, fp, lsr #13
    5e78:	00360000 	eorseq	r0, r6, r0
    5e7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5e80:	000010c9 	andeq	r1, r0, r9, asr #1
    5e84:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5e88:	06ab0100 	strteq	r0, [fp], r0, lsl #2
    5e8c:	000004ca 	andeq	r0, r0, sl, asr #9
    5e90:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5e94:	00002de3 	andeq	r2, r0, r3, ror #27
    5e98:	9306ab01 	movwls	sl, #27393	; 0x6b01
    5e9c:	02000000 	andeq	r0, r0, #0
    5ea0:	d0166a91 	mulsle	r6, r1, sl
    5ea4:	01000023 	tsteq	r0, r3, lsr #32
    5ea8:	009306ad 	addseq	r0, r3, sp, lsr #13
    5eac:	91020000 	mrsls	r0, (UNDEF: 2)
    5eb0:	a9140076 	ldmdbge	r4, {r1, r2, r4, r5, r6}
    5eb4:	0100002d 	tsteq	r0, sp, lsr #32
    5eb8:	000006c5 	andeq	r0, r0, r5, asr #13
    5ebc:	003a0000 	eorseq	r0, sl, r0
    5ec0:	9c010000 	stcls	0, cr0, [r1], {-0}
    5ec4:	0000110d 	andeq	r1, r0, sp, lsl #2
    5ec8:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5ecc:	06c50100 	strbeq	r0, [r5], r0, lsl #2
    5ed0:	000004ca 	andeq	r0, r0, sl, asr #9
    5ed4:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5ed8:	00002de3 	andeq	r2, r0, r3, ror #27
    5edc:	9306c501 	movwls	ip, #25857	; 0x6501
    5ee0:	02000000 	andeq	r0, r0, #0
    5ee4:	d0166a91 	mulsle	r6, r1, sl
    5ee8:	01000023 	tsteq	r0, r3, lsr #32
    5eec:	009306c7 	addseq	r0, r3, r7, asr #13
    5ef0:	91020000 	mrsls	r0, (UNDEF: 2)
    5ef4:	18140076 	ldmdane	r4, {r1, r2, r4, r5, r6}
    5ef8:	01000029 	tsteq	r0, r9, lsr #32
    5efc:	000006dd 	ldrdeq	r0, [r0], -sp
    5f00:	00360000 	eorseq	r0, r6, r0
    5f04:	9c010000 	stcls	0, cr0, [r1], {-0}
    5f08:	00001151 	andeq	r1, r0, r1, asr r1
    5f0c:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5f10:	06dd0100 	ldrbeq	r0, [sp], r0, lsl #2
    5f14:	000004ca 	andeq	r0, r0, sl, asr #9
    5f18:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5f1c:	00002de3 	andeq	r2, r0, r3, ror #27
    5f20:	9306dd01 	movwls	sp, #27905	; 0x6d01
    5f24:	02000000 	andeq	r0, r0, #0
    5f28:	d9166a91 	ldmdble	r6, {r0, r4, r7, r9, fp, sp, lr}
    5f2c:	01000023 	tsteq	r0, r3, lsr #32
    5f30:	009306df 			; <UNDEFINED> instruction: 0x009306df
    5f34:	91020000 	mrsls	r0, (UNDEF: 2)
    5f38:	ac140076 	ldcge	0, cr0, [r4], {118}	; 0x76
    5f3c:	0100002c 	tsteq	r0, ip, lsr #32
    5f40:	000006f5 	strdeq	r0, [r0], -r5
    5f44:	003a0000 	eorseq	r0, sl, r0
    5f48:	9c010000 	stcls	0, cr0, [r1], {-0}
    5f4c:	00001195 	muleq	r0, r5, r1
    5f50:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5f54:	06f50100 	ldrbteq	r0, [r5], r0, lsl #2
    5f58:	000004ca 	andeq	r0, r0, sl, asr #9
    5f5c:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5f60:	00002de3 	andeq	r2, r0, r3, ror #27
    5f64:	9306f501 	movwls	pc, #25857	; 0x6501	; <UNPREDICTABLE>
    5f68:	02000000 	andeq	r0, r0, #0
    5f6c:	d9166a91 	ldmdble	r6, {r0, r4, r7, r9, fp, sp, lr}
    5f70:	01000023 	tsteq	r0, r3, lsr #32
    5f74:	009306f7 			; <UNDEFINED> instruction: 0x009306f7
    5f78:	91020000 	mrsls	r0, (UNDEF: 2)
    5f7c:	35140076 	ldrcc	r0, [r4, #-118]	; 0xffffff8a
    5f80:	01000029 	tsteq	r0, r9, lsr #32
    5f84:	0000070d 	andeq	r0, r0, sp, lsl #14
    5f88:	00360000 	eorseq	r0, r6, r0
    5f8c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5f90:	000011d9 	ldrdeq	r1, [r0], -r9
    5f94:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5f98:	070d0100 	streq	r0, [sp, -r0, lsl #2]
    5f9c:	000004ca 	andeq	r0, r0, sl, asr #9
    5fa0:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5fa4:	000026de 	ldrdeq	r2, [r0], -lr
    5fa8:	93070d01 	movwls	r0, #32001	; 0x7d01
    5fac:	02000000 	andeq	r0, r0, #0
    5fb0:	b4166a91 	ldrlt	r6, [r6], #-2705	; 0xfffff56f
    5fb4:	01000026 	tsteq	r0, r6, lsr #32
    5fb8:	0093070f 	addseq	r0, r3, pc, lsl #14
    5fbc:	91020000 	mrsls	r0, (UNDEF: 2)
    5fc0:	ce140076 	mrcgt	0, 0, r0, cr4, cr6, {3}
    5fc4:	0100002c 	tsteq	r0, ip, lsr #32
    5fc8:	00000724 	andeq	r0, r0, r4, lsr #14
    5fcc:	00360000 	eorseq	r0, r6, r0
    5fd0:	9c010000 	stcls	0, cr0, [r1], {-0}
    5fd4:	0000121d 	andeq	r1, r0, sp, lsl r2
    5fd8:	0027d215 	eoreq	sp, r7, r5, lsl r2
    5fdc:	07240100 	streq	r0, [r4, -r0, lsl #2]!
    5fe0:	000004ca 	andeq	r0, r0, sl, asr #9
    5fe4:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    5fe8:	00002b95 	muleq	r0, r5, fp
    5fec:	93072401 	movwls	r2, #29697	; 0x7401
    5ff0:	02000000 	andeq	r0, r0, #0
    5ff4:	b4166a91 	ldrlt	r6, [r6], #-2705	; 0xfffff56f
    5ff8:	01000026 	tsteq	r0, r6, lsr #32
    5ffc:	00930726 	addseq	r0, r3, r6, lsr #14
    6000:	91020000 	mrsls	r0, (UNDEF: 2)
    6004:	23140076 	tstcs	r4, #118	; 0x76
    6008:	01000024 	tsteq	r0, r4, lsr #32
    600c:	0000073c 	andeq	r0, r0, ip, lsr r7
    6010:	003a0000 	eorseq	r0, sl, r0
    6014:	9c010000 	stcls	0, cr0, [r1], {-0}
    6018:	00001261 	andeq	r1, r0, r1, ror #4
    601c:	0027d215 	eoreq	sp, r7, r5, lsl r2
    6020:	073c0100 	ldreq	r0, [ip, -r0, lsl #2]!
    6024:	000004ca 	andeq	r0, r0, sl, asr #9
    6028:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    602c:	000026de 	ldrdeq	r2, [r0], -lr
    6030:	93073c01 	movwls	r3, #31745	; 0x7c01
    6034:	02000000 	andeq	r0, r0, #0
    6038:	b4166a91 	ldrlt	r6, [r6], #-2705	; 0xfffff56f
    603c:	01000026 	tsteq	r0, r6, lsr #32
    6040:	0093073e 	addseq	r0, r3, lr, lsr r7
    6044:	91020000 	mrsls	r0, (UNDEF: 2)
    6048:	bc140076 	ldclt	0, cr0, [r4], {118}	; 0x76
    604c:	01000026 	tsteq	r0, r6, lsr #32
    6050:	00000753 	andeq	r0, r0, r3, asr r7
    6054:	003a0000 	eorseq	r0, sl, r0
    6058:	9c010000 	stcls	0, cr0, [r1], {-0}
    605c:	000012a5 	andeq	r1, r0, r5, lsr #5
    6060:	0027d215 	eoreq	sp, r7, r5, lsl r2
    6064:	07530100 	ldrbeq	r0, [r3, -r0, lsl #2]
    6068:	000004ca 	andeq	r0, r0, sl, asr #9
    606c:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    6070:	00002b95 	muleq	r0, r5, fp
    6074:	93075301 	movwls	r5, #29441	; 0x7301
    6078:	02000000 	andeq	r0, r0, #0
    607c:	b4166a91 	ldrlt	r6, [r6], #-2705	; 0xfffff56f
    6080:	01000026 	tsteq	r0, r6, lsr #32
    6084:	00930755 	addseq	r0, r3, r5, asr r7
    6088:	91020000 	mrsls	r0, (UNDEF: 2)
    608c:	4b140076 	blmi	50626c <_Min_Stack_Size+0x50606c>
    6090:	0100002d 	tsteq	r0, sp, lsr #32
    6094:	0000076b 	andeq	r0, r0, fp, ror #14
    6098:	003a0000 	eorseq	r0, sl, r0
    609c:	9c010000 	stcls	0, cr0, [r1], {-0}
    60a0:	000012e9 	andeq	r1, r0, r9, ror #5
    60a4:	0027d215 	eoreq	sp, r7, r5, lsl r2
    60a8:	076b0100 	strbeq	r0, [fp, -r0, lsl #2]!
    60ac:	000004ca 	andeq	r0, r0, sl, asr #9
    60b0:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    60b4:	000026de 	ldrdeq	r2, [r0], -lr
    60b8:	93076b01 	movwls	r6, #31489	; 0x7b01
    60bc:	02000000 	andeq	r0, r0, #0
    60c0:	b4166a91 	ldrlt	r6, [r6], #-2705	; 0xfffff56f
    60c4:	01000026 	tsteq	r0, r6, lsr #32
    60c8:	0093076d 	addseq	r0, r3, sp, ror #14
    60cc:	91020000 	mrsls	r0, (UNDEF: 2)
    60d0:	fd140076 	ldc2	0, cr0, [r4, #-472]	; 0xfffffe28
    60d4:	0100002a 	tsteq	r0, sl, lsr #32
    60d8:	00000782 	andeq	r0, r0, r2, lsl #15
    60dc:	003a0000 	eorseq	r0, sl, r0
    60e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    60e4:	0000132d 	andeq	r1, r0, sp, lsr #6
    60e8:	0027d215 	eoreq	sp, r7, r5, lsl r2
    60ec:	07820100 	streq	r0, [r2, r0, lsl #2]
    60f0:	000004ca 	andeq	r0, r0, sl, asr #9
    60f4:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    60f8:	00002b95 	muleq	r0, r5, fp
    60fc:	93078201 	movwls	r8, #29185	; 0x7201
    6100:	02000000 	andeq	r0, r0, #0
    6104:	b4166a91 	ldrlt	r6, [r6], #-2705	; 0xfffff56f
    6108:	01000026 	tsteq	r0, r6, lsr #32
    610c:	00930784 	addseq	r0, r3, r4, lsl #15
    6110:	91020000 	mrsls	r0, (UNDEF: 2)
    6114:	e7140076 			; <UNDEFINED> instruction: 0xe7140076
    6118:	01000027 	tsteq	r0, r7, lsr #32
    611c:	0000079b 	muleq	r0, fp, r7
    6120:	003a0000 	eorseq	r0, sl, r0
    6124:	9c010000 	stcls	0, cr0, [r1], {-0}
    6128:	00001371 	andeq	r1, r0, r1, ror r3
    612c:	0027d215 	eoreq	sp, r7, r5, lsl r2
    6130:	079b0100 	ldreq	r0, [fp, r0, lsl #2]
    6134:	000004ca 	andeq	r0, r0, sl, asr #9
    6138:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    613c:	000026de 	ldrdeq	r2, [r0], -lr
    6140:	93079b01 	movwls	r9, #31489	; 0x7b01
    6144:	02000000 	andeq	r0, r0, #0
    6148:	b4166a91 	ldrlt	r6, [r6], #-2705	; 0xfffff56f
    614c:	01000026 	tsteq	r0, r6, lsr #32
    6150:	0093079d 	umullseq	r0, r3, sp, r7
    6154:	91020000 	mrsls	r0, (UNDEF: 2)
    6158:	fa140076 	blx	506338 <_Min_Stack_Size+0x506138>
    615c:	01000024 	tsteq	r0, r4, lsr #32
    6160:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
    6164:	00540000 	subseq	r0, r4, r0
    6168:	9c010000 	stcls	0, cr0, [r1], {-0}
    616c:	000013c4 	andeq	r1, r0, r4, asr #7
    6170:	0027d215 	eoreq	sp, r7, r5, lsl r2
    6174:	07b60100 	ldreq	r0, [r6, r0, lsl #2]!
    6178:	000004ca 	andeq	r0, r0, sl, asr #9
    617c:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    6180:	000024bb 			; <UNDEFINED> instruction: 0x000024bb
    6184:	9307b601 	movwls	fp, #30209	; 0x7601
    6188:	02000000 	andeq	r0, r0, #0
    618c:	1a156a91 	bne	560bd8 <_Min_Stack_Size+0x5609d8>
    6190:	0100002a 	tsteq	r0, sl, lsr #32
    6194:	009307b6 			; <UNDEFINED> instruction: 0x009307b6
    6198:	91020000 	mrsls	r0, (UNDEF: 2)
    619c:	6d741868 	ldclvs	8, cr1, [r4, #-416]!	; 0xfffffe60
    61a0:	b8010070 	stmdalt	r1, {r4, r5, r6}
    61a4:	00009307 	andeq	r9, r0, r7, lsl #6
    61a8:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    61ac:	29831400 	stmibcs	r3, {sl, ip}
    61b0:	d4010000 	strle	r0, [r1], #-0
    61b4:	00000007 	andeq	r0, r0, r7
    61b8:	00005400 	andeq	r5, r0, r0, lsl #8
    61bc:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    61c0:	15000014 	strne	r0, [r0, #-20]	; 0xffffffec
    61c4:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    61c8:	ca07d401 	bgt	1fb1d4 <_Min_Stack_Size+0x1fafd4>
    61cc:	02000004 	andeq	r0, r0, #4
    61d0:	bb156c91 	bllt	56141c <_Min_Stack_Size+0x56121c>
    61d4:	01000024 	tsteq	r0, r4, lsr #32
    61d8:	009307d4 			; <UNDEFINED> instruction: 0x009307d4
    61dc:	91020000 	mrsls	r0, (UNDEF: 2)
    61e0:	262b156a 	strtcs	r1, [fp], -sl, ror #10
    61e4:	d4010000 	strle	r0, [r1], #-0
    61e8:	00009307 	andeq	r9, r0, r7, lsl #6
    61ec:	68910200 	ldmvs	r1, {r9}
    61f0:	706d7418 	rsbvc	r7, sp, r8, lsl r4
    61f4:	07d60100 	ldrbeq	r0, [r6, r0, lsl #2]
    61f8:	00000093 	muleq	r0, r3, r0
    61fc:	00769102 	rsbseq	r9, r6, r2, lsl #2
    6200:	002c5714 	eoreq	r5, ip, r4, lsl r7
    6204:	07fd0100 	ldrbeq	r0, [sp, r0, lsl #2]!
    6208:	00000000 	andeq	r0, r0, r0
    620c:	000000ac 	andeq	r0, r0, ip, lsr #1
    6210:	14799c01 	ldrbtne	r9, [r9], #-3073	; 0xfffff3ff
    6214:	d2150000 	andsle	r0, r5, #0
    6218:	01000027 	tsteq	r0, r7, lsr #32
    621c:	04ca07fd 	strbeq	r0, [sl], #2045	; 0x7fd
    6220:	91020000 	mrsls	r0, (UNDEF: 2)
    6224:	24bb156c 	ldrtcs	r1, [fp], #1388	; 0x56c
    6228:	fd010000 	stc2	0, cr0, [r1, #-0]
    622c:	00009307 	andeq	r9, r0, r7, lsl #6
    6230:	6a910200 	bvs	fe446a38 <BootRAM+0xd3b71d9>
    6234:	002ca115 	eoreq	sl, ip, r5, lsl r1
    6238:	07fd0100 	ldrbeq	r0, [sp, r0, lsl #2]!
    623c:	00000093 	muleq	r0, r3, r0
    6240:	18689102 	stmdane	r8!, {r1, r8, ip, pc}^
    6244:	00706d74 	rsbseq	r6, r0, r4, ror sp
    6248:	9e07ff01 	cdpls	15, 0, cr15, cr7, cr1, {0}
    624c:	02000000 	andeq	r0, r0, #0
    6250:	49167491 	ldmdbmi	r6, {r0, r4, r7, sl, ip, sp, lr}
    6254:	0100001e 	tsteq	r0, lr, lsl r0
    6258:	00930800 	addseq	r0, r3, r0, lsl #16
    625c:	91020000 	mrsls	r0, (UNDEF: 2)
    6260:	ae140072 	mrcge	0, 0, r0, cr4, cr2, {3}
    6264:	01000023 	tsteq	r0, r3, lsr #32
    6268:	0000082c 	andeq	r0, r0, ip, lsr #16
    626c:	003e0000 	eorseq	r0, lr, r0
    6270:	9c010000 	stcls	0, cr0, [r1], {-0}
    6274:	000014ae 	andeq	r1, r0, lr, lsr #9
    6278:	0027d215 	eoreq	sp, r7, r5, lsl r2
    627c:	082c0100 	stmdaeq	ip!, {r8}
    6280:	000004ca 	andeq	r0, r0, sl, asr #9
    6284:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    6288:	00001713 	andeq	r1, r0, r3, lsl r7
    628c:	01082c01 	tsteq	r8, r1, lsl #24
    6290:	02000001 	andeq	r0, r0, #1
    6294:	14007391 	strne	r7, [r0], #-913	; 0xfffffc6f
    6298:	00002c66 	andeq	r2, r0, r6, ror #24
    629c:	00084801 	andeq	r4, r8, r1, lsl #16
    62a0:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    62a4:	01000000 	mrseq	r0, (UNDEF: 0)
    62a8:	0014e39c 	mulseq	r4, ip, r3
    62ac:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    62b0:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    62b4:	0004ca08 	andeq	ip, r4, r8, lsl #20
    62b8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    62bc:	00261a15 	eoreq	r1, r6, r5, lsl sl
    62c0:	08480100 	stmdaeq	r8, {r8}^
    62c4:	00000093 	muleq	r0, r3, r0
    62c8:	00729102 	rsbseq	r9, r2, r2, lsl #2
    62cc:	002d8314 	eoreq	r8, sp, r4, lsl r3
    62d0:	08600100 	stmdaeq	r0!, {r8}^
    62d4:	00000000 	andeq	r0, r0, r0
    62d8:	0000003e 	andeq	r0, r0, lr, lsr r0
    62dc:	15189c01 	ldrne	r9, [r8, #-3073]	; 0xfffff3ff
    62e0:	d2150000 	andsle	r0, r5, #0
    62e4:	01000027 	tsteq	r0, r7, lsr #32
    62e8:	04ca0860 	strbeq	r0, [sl], #2144	; 0x860
    62ec:	91020000 	mrsls	r0, (UNDEF: 2)
    62f0:	17131574 			; <UNDEFINED> instruction: 0x17131574
    62f4:	60010000 	andvs	r0, r1, r0
    62f8:	00010108 	andeq	r0, r1, r8, lsl #2
    62fc:	73910200 	orrsvc	r0, r1, #0, 4
    6300:	23041400 	movwcs	r1, #17408	; 0x4400
    6304:	7a010000 	bvc	4630c <_Min_Stack_Size+0x4610c>
    6308:	00000008 	andeq	r0, r0, r8
    630c:	00003600 	andeq	r3, r0, r0, lsl #12
    6310:	4d9c0100 	ldfmis	f0, [ip]
    6314:	15000015 	strne	r0, [r0, #-21]	; 0xffffffeb
    6318:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    631c:	ca087a01 	bgt	224b28 <_Min_Stack_Size+0x224928>
    6320:	02000004 	andeq	r0, r0, #4
    6324:	e5157491 	ldr	r7, [r5, #-1169]	; 0xfffffb6f
    6328:	01000022 	tsteq	r0, r2, lsr #32
    632c:	0093087a 	addseq	r0, r3, sl, ror r8
    6330:	91020000 	mrsls	r0, (UNDEF: 2)
    6334:	47140072 			; <UNDEFINED> instruction: 0x47140072
    6338:	01000028 	tsteq	r0, r8, lsr #32
    633c:	0000089a 	muleq	r0, sl, r8
    6340:	00360000 	eorseq	r0, r6, r0
    6344:	9c010000 	stcls	0, cr0, [r1], {-0}
    6348:	00001582 	andeq	r1, r0, r2, lsl #11
    634c:	0027d215 	eoreq	sp, r7, r5, lsl r2
    6350:	089a0100 	ldmeq	sl, {r8}
    6354:	000004ca 	andeq	r0, r0, sl, asr #9
    6358:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    635c:	00002342 	andeq	r2, r0, r2, asr #6
    6360:	93089a01 	movwls	r9, #35329	; 0x8a01
    6364:	02000000 	andeq	r0, r0, #0
    6368:	14007291 	strne	r7, [r0], #-657	; 0xfffffd6f
    636c:	0000275a 	andeq	r2, r0, sl, asr r7
    6370:	0008b101 	andeq	fp, r8, r1, lsl #2
    6374:	36000000 	strcc	r0, [r0], -r0
    6378:	01000000 	mrseq	r0, (UNDEF: 0)
    637c:	0015b79c 	mulseq	r5, ip, r7
    6380:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    6384:	b1010000 	mrslt	r0, (UNDEF: 1)
    6388:	0004ca08 	andeq	ip, r4, r8, lsl #20
    638c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6390:	002c9315 	eoreq	r9, ip, r5, lsl r3
    6394:	08b10100 	ldmeq	r1!, {r8}
    6398:	00000093 	muleq	r0, r3, r0
    639c:	00729102 	rsbseq	r9, r2, r2, lsl #2
    63a0:	00276e14 	eoreq	r6, r7, r4, lsl lr
    63a4:	08c60100 	stmiaeq	r6, {r8}^
    63a8:	00000000 	andeq	r0, r0, r0
    63ac:	00000036 	andeq	r0, r0, r6, lsr r0
    63b0:	15ec9c01 	strbne	r9, [ip, #3073]!	; 0xc01
    63b4:	d2150000 	andsle	r0, r5, #0
    63b8:	01000027 	tsteq	r0, r7, lsr #32
    63bc:	04ca08c6 	strbeq	r0, [sl], #2246	; 0x8c6
    63c0:	91020000 	mrsls	r0, (UNDEF: 2)
    63c4:	27461574 	smlsldxcs	r1, r6, r4, r5
    63c8:	c6010000 	strgt	r0, [r1], -r0
    63cc:	00009308 	andeq	r9, r0, r8, lsl #6
    63d0:	72910200 	addsvc	r0, r1, #0, 4
    63d4:	2d331400 	cfldrscs	mvf1, [r3, #-0]
    63d8:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    63dc:	00000008 	andeq	r0, r0, r8
    63e0:	00001c00 	andeq	r1, r0, r0, lsl #24
    63e4:	219c0100 	orrscs	r0, ip, r0, lsl #2
    63e8:	15000016 	strne	r0, [r0, #-22]	; 0xffffffea
    63ec:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    63f0:	ca08d801 	bgt	23c3fc <_Min_Stack_Size+0x23c1fc>
    63f4:	02000004 	andeq	r0, r0, #4
    63f8:	56157491 			; <UNDEFINED> instruction: 0x56157491
    63fc:	01000039 	tsteq	r0, r9, lsr r0
    6400:	009308d8 			; <UNDEFINED> instruction: 0x009308d8
    6404:	91020000 	mrsls	r0, (UNDEF: 2)
    6408:	a8140072 	ldmdage	r4, {r1, r4, r5, r6}
    640c:	01000025 	tsteq	r0, r5, lsr #32
    6410:	000008e6 	andeq	r0, r0, r6, ror #17
    6414:	001c0000 	andseq	r0, ip, r0
    6418:	9c010000 	stcls	0, cr0, [r1], {-0}
    641c:	00001656 	andeq	r1, r0, r6, asr r6
    6420:	0027d215 	eoreq	sp, r7, r5, lsl r2
    6424:	08e60100 	stmiaeq	r6!, {r8}^
    6428:	000004ca 	andeq	r0, r0, sl, asr #9
    642c:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    6430:	000025af 	andeq	r2, r0, pc, lsr #11
    6434:	9308e601 	movwls	lr, #34305	; 0x8601
    6438:	02000000 	andeq	r0, r0, #0
    643c:	14007291 	strne	r7, [r0], #-657	; 0xfffffd6f
    6440:	0000238e 	andeq	r2, r0, lr, lsl #7
    6444:	0008f401 	andeq	pc, r8, r1, lsl #8
    6448:	1c000000 	stcne	0, cr0, [r0], {-0}
    644c:	01000000 	mrseq	r0, (UNDEF: 0)
    6450:	00168b9c 	mulseq	r6, ip, fp
    6454:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    6458:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    645c:	0004ca08 	andeq	ip, r4, r8, lsl #20
    6460:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6464:	00239515 	eoreq	r9, r3, r5, lsl r5
    6468:	08f40100 	ldmeq	r4!, {r8}^
    646c:	00000093 	muleq	r0, r3, r0
    6470:	00729102 	rsbseq	r9, r2, r2, lsl #2
    6474:	00268614 	eoreq	r8, r6, r4, lsl r6
    6478:	09020100 	stmdbeq	r2, {r8}
    647c:	00000000 	andeq	r0, r0, r0
    6480:	0000001c 	andeq	r0, r0, ip, lsl r0
    6484:	16c09c01 	strbne	r9, [r0], r1, lsl #24
    6488:	d2150000 	andsle	r0, r5, #0
    648c:	01000027 	tsteq	r0, r7, lsr #32
    6490:	04ca0902 	strbeq	r0, [sl], #2306	; 0x902
    6494:	91020000 	mrsls	r0, (UNDEF: 2)
    6498:	268d1574 			; <UNDEFINED> instruction: 0x268d1574
    649c:	02010000 	andeq	r0, r1, #0
    64a0:	00009309 	andeq	r9, r0, r9, lsl #6
    64a4:	72910200 	addsvc	r0, r1, #0, 4
    64a8:	26961400 	ldrcs	r1, [r6], r0, lsl #8
    64ac:	10010000 	andne	r0, r1, r0
    64b0:	00000009 	andeq	r0, r0, r9
    64b4:	00001c00 	andeq	r1, r0, r0, lsl #24
    64b8:	f59c0100 			; <UNDEFINED> instruction: 0xf59c0100
    64bc:	15000016 	strne	r0, [r0, #-22]	; 0xffffffea
    64c0:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    64c4:	ca091001 	bgt	24a4d0 <_Min_Stack_Size+0x24a2d0>
    64c8:	02000004 	andeq	r0, r0, #4
    64cc:	9d157491 	cfldrsls	mvf7, [r5, #-580]	; 0xfffffdbc
    64d0:	01000026 	tsteq	r0, r6, lsr #32
    64d4:	00930910 	addseq	r0, r3, r0, lsl r9
    64d8:	91020000 	mrsls	r0, (UNDEF: 2)
    64dc:	c0140072 	andsgt	r0, r4, r2, ror r0
    64e0:	01000029 	tsteq	r0, r9, lsr #32
    64e4:	0000091e 	andeq	r0, r0, lr, lsl r9
    64e8:	001e0000 	andseq	r0, lr, r0
    64ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    64f0:	0000172a 	andeq	r1, r0, sl, lsr #14
    64f4:	0027d215 	eoreq	sp, r7, r5, lsl r2
    64f8:	091e0100 	ldmdbeq	lr, {r8}
    64fc:	000004ca 	andeq	r0, r0, sl, asr #9
    6500:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    6504:	000029c7 	andeq	r2, r0, r7, asr #19
    6508:	93091e01 	movwls	r1, #40449	; 0x9e01
    650c:	02000000 	andeq	r0, r0, #0
    6510:	14007291 	strne	r7, [r0], #-657	; 0xfffffd6f
    6514:	0000285f 	andeq	r2, r0, pc, asr r8
    6518:	00093101 	andeq	r3, r9, r1, lsl #2
    651c:	36000000 	strcc	r0, [r0], -r0
    6520:	01000000 	mrseq	r0, (UNDEF: 0)
    6524:	00175f9c 	mulseq	r7, ip, pc	; <UNPREDICTABLE>
    6528:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    652c:	31010000 	mrscc	r0, (UNDEF: 1)
    6530:	0004ca09 	andeq	ip, r4, r9, lsl #20
    6534:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6538:	002def15 	eoreq	lr, sp, r5, lsl pc
    653c:	09310100 	ldmdbeq	r1!, {r8}
    6540:	00000093 	muleq	r0, r3, r0
    6544:	00729102 	rsbseq	r9, r2, r2, lsl #2
    6548:	002ab914 	eoreq	fp, sl, r4, lsl r9
    654c:	09470100 	stmdbeq	r7, {r8}^
    6550:	00000000 	andeq	r0, r0, r0
    6554:	0000003a 	andeq	r0, r0, sl, lsr r0
    6558:	17949c01 	ldrne	r9, [r4, r1, lsl #24]
    655c:	d2150000 	andsle	r0, r5, #0
    6560:	01000027 	tsteq	r0, r7, lsr #32
    6564:	04ca0947 	strbeq	r0, [sl], #2375	; 0x947
    6568:	91020000 	mrsls	r0, (UNDEF: 2)
    656c:	2def1574 	cfstr64cs	mvdx1, [pc, #464]!	; 6744 <_Min_Stack_Size+0x6544>
    6570:	47010000 	strmi	r0, [r1, -r0]
    6574:	00009309 	andeq	r9, r0, r9, lsl #6
    6578:	72910200 	addsvc	r0, r1, #0, 4
    657c:	2bd51400 	blcs	ff54b584 <BootRAM+0xe4bbd25>
    6580:	5d010000 	stcpl	0, cr0, [r1, #-0]
    6584:	00000009 	andeq	r0, r0, r9
    6588:	00003600 	andeq	r3, r0, r0, lsl #12
    658c:	c99c0100 	ldmibgt	ip, {r8}
    6590:	15000017 	strne	r0, [r0, #-23]	; 0xffffffe9
    6594:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    6598:	ca095d01 	bgt	25d9a4 <_Min_Stack_Size+0x25d7a4>
    659c:	02000004 	andeq	r0, r0, #4
    65a0:	ef157491 	svc	0x00157491
    65a4:	0100002d 	tsteq	r0, sp, lsr #32
    65a8:	0093095d 	addseq	r0, r3, sp, asr r9
    65ac:	91020000 	mrsls	r0, (UNDEF: 2)
    65b0:	39140072 	ldmdbcc	r4, {r1, r4, r5, r6}
    65b4:	0100002e 	tsteq	r0, lr, lsr #32
    65b8:	00000973 	andeq	r0, r0, r3, ror r9
    65bc:	003a0000 	eorseq	r0, sl, r0
    65c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    65c4:	000017fe 	strdeq	r1, [r0], -lr
    65c8:	0027d215 	eoreq	sp, r7, r5, lsl r2
    65cc:	09730100 	ldmdbeq	r3!, {r8}^
    65d0:	000004ca 	andeq	r0, r0, sl, asr #9
    65d4:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    65d8:	00002def 	andeq	r2, r0, pc, ror #27
    65dc:	93097301 	movwls	r7, #37633	; 0x9301
    65e0:	02000000 	andeq	r0, r0, #0
    65e4:	14007291 	strne	r7, [r0], #-657	; 0xfffffd6f
    65e8:	00002a05 	andeq	r2, r0, r5, lsl #20
    65ec:	00098901 	andeq	r8, r9, r1, lsl #18
    65f0:	36000000 	strcc	r0, [r0], -r0
    65f4:	01000000 	mrseq	r0, (UNDEF: 0)
    65f8:	0018339c 	mulseq	r8, ip, r3
    65fc:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    6600:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    6604:	0004ca09 	andeq	ip, r4, r9, lsl #20
    6608:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    660c:	0025a015 	eoreq	sl, r5, r5, lsl r0
    6610:	09890100 	stmibeq	r9, {r8}
    6614:	00000093 	muleq	r0, r3, r0
    6618:	00729102 	rsbseq	r9, r2, r2, lsl #2
    661c:	00273619 	eoreq	r3, r7, r9, lsl r6
    6620:	09990100 	ldmibeq	r9, {r8}
    6624:	00000093 	muleq	r0, r3, r0
    6628:	00000000 	andeq	r0, r0, r0
    662c:	00000018 	andeq	r0, r0, r8, lsl r0
    6630:	185d9c01 	ldmdane	sp, {r0, sl, fp, ip, pc}^
    6634:	d2150000 	andsle	r0, r5, #0
    6638:	01000027 	tsteq	r0, r7, lsr #32
    663c:	04ca0999 	strbeq	r0, [sl], #2457	; 0x999
    6640:	91020000 	mrsls	r0, (UNDEF: 2)
    6644:	cb190074 	blgt	64681c <_Min_Stack_Size+0x64661c>
    6648:	01000025 	tsteq	r0, r5, lsr #32
    664c:	009309a6 	addseq	r0, r3, r6, lsr #19
    6650:	00000000 	andeq	r0, r0, r0
    6654:	00180000 	andseq	r0, r8, r0
    6658:	9c010000 	stcls	0, cr0, [r1], {-0}
    665c:	00001887 	andeq	r1, r0, r7, lsl #17
    6660:	0027d215 	eoreq	sp, r7, r5, lsl r2
    6664:	09a60100 	stmibeq	r6!, {r8}
    6668:	000004ca 	andeq	r0, r0, sl, asr #9
    666c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    6670:	0025db19 	eoreq	sp, r5, r9, lsl fp
    6674:	09b30100 	ldmibeq	r3!, {r8}
    6678:	00000093 	muleq	r0, r3, r0
    667c:	00000000 	andeq	r0, r0, r0
    6680:	00000018 	andeq	r0, r0, r8, lsl r0
    6684:	18b19c01 	ldmne	r1!, {r0, sl, fp, ip, pc}
    6688:	d2150000 	andsle	r0, r5, #0
    668c:	01000027 	tsteq	r0, r7, lsr #32
    6690:	04ca09b3 	strbeq	r0, [sl], #2483	; 0x9b3
    6694:	91020000 	mrsls	r0, (UNDEF: 2)
    6698:	eb190074 	bl	646870 <_Min_Stack_Size+0x646670>
    669c:	01000025 	tsteq	r0, r5, lsr #32
    66a0:	009309c0 	addseq	r0, r3, r0, asr #19
    66a4:	00000000 	andeq	r0, r0, r0
    66a8:	001a0000 	andseq	r0, sl, r0
    66ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    66b0:	000018db 	ldrdeq	r1, [r0], -fp
    66b4:	0027d215 	eoreq	sp, r7, r5, lsl r2
    66b8:	09c00100 	stmibeq	r0, {r8}^
    66bc:	000004ca 	andeq	r0, r0, sl, asr #9
    66c0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    66c4:	00271019 	eoreq	r1, r7, r9, lsl r0
    66c8:	09cd0100 	stmibeq	sp, {r8}^
    66cc:	00000093 	muleq	r0, r3, r0
    66d0:	00000000 	andeq	r0, r0, r0
    66d4:	00000018 	andeq	r0, r0, r8, lsl r0
    66d8:	19059c01 	stmdbne	r5, {r0, sl, fp, ip, pc}
    66dc:	d2150000 	andsle	r0, r5, #0
    66e0:	01000027 	tsteq	r0, r7, lsr #32
    66e4:	04ca09cd 	strbeq	r0, [sl], #2509	; 0x9cd
    66e8:	91020000 	mrsls	r0, (UNDEF: 2)
    66ec:	ff190074 			; <UNDEFINED> instruction: 0xff190074
    66f0:	01000026 	tsteq	r0, r6, lsr #32
    66f4:	009309da 			; <UNDEFINED> instruction: 0x009309da
    66f8:	00000000 	andeq	r0, r0, r0
    66fc:	00180000 	andseq	r0, r8, r0
    6700:	9c010000 	stcls	0, cr0, [r1], {-0}
    6704:	0000192f 	andeq	r1, r0, pc, lsr #18
    6708:	0027d215 	eoreq	sp, r7, r5, lsl r2
    670c:	09da0100 	ldmibeq	sl, {r8}^
    6710:	000004ca 	andeq	r0, r0, sl, asr #9
    6714:	00749102 	rsbseq	r9, r4, r2, lsl #2
    6718:	00278819 	eoreq	r8, r7, r9, lsl r8
    671c:	09fc0100 	ldmibeq	ip!, {r8}^
    6720:	000000cf 	andeq	r0, r0, pc, asr #1
    6724:	00000000 	andeq	r0, r0, r0
    6728:	00000036 	andeq	r0, r0, r6, lsr r0
    672c:	19779c01 	ldmdbne	r7!, {r0, sl, fp, ip, pc}^
    6730:	d2150000 	andsle	r0, r5, #0
    6734:	01000027 	tsteq	r0, r7, lsr #32
    6738:	04ca09fc 	strbeq	r0, [sl], #2556	; 0x9fc
    673c:	91020000 	mrsls	r0, (UNDEF: 2)
    6740:	2385156c 	orrcs	r1, r5, #108, 10	; 0x1b000000
    6744:	fc010000 	stc2	0, cr0, [r1], {-0}
    6748:	00009309 	andeq	r9, r0, r9, lsl #6
    674c:	6a910200 	bvs	fe446f54 <BootRAM+0xd3b76f5>
    6750:	0019ae16 	andseq	sl, r9, r6, lsl lr
    6754:	09fe0100 	ldmibeq	lr!, {r8}^
    6758:	000000db 	ldrdeq	r0, [r0], -fp
    675c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    6760:	00267814 	eoreq	r7, r6, r4, lsl r8
    6764:	0a280100 	beq	a06b6c <_Min_Stack_Size+0xa0696c>
    6768:	00000000 	andeq	r0, r0, r0
    676c:	00000020 	andeq	r0, r0, r0, lsr #32
    6770:	19ac9c01 	stmibne	ip!, {r0, sl, fp, ip, pc}
    6774:	d2150000 	andsle	r0, r5, #0
    6778:	01000027 	tsteq	r0, r7, lsr #32
    677c:	04ca0a28 	strbeq	r0, [sl], #2600	; 0xa28
    6780:	91020000 	mrsls	r0, (UNDEF: 2)
    6784:	23851574 	orrcs	r1, r5, #116, 10	; 0x1d000000
    6788:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    678c:	0000930a 	andeq	r9, r0, sl, lsl #6
    6790:	72910200 	addsvc	r0, r1, #0, 4
    6794:	29d01900 	ldmibcs	r0, {r8, fp, ip}^
    6798:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    679c:	0000db0a 	andeq	sp, r0, sl, lsl #22
    67a0:	0061f000 	rsbeq	pc, r1, r0
    67a4:	00005208 	andeq	r5, r0, r8, lsl #4
    67a8:	129c0100 	addsne	r0, ip, #0, 2
    67ac:	1500001a 	strne	r0, [r0, #-26]	; 0xffffffe6
    67b0:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    67b4:	ca0a4801 	bgt	2987c0 <_Min_Stack_Size+0x2985c0>
    67b8:	02000004 	andeq	r0, r0, #4
    67bc:	22156c91 	andscs	r6, r5, #37120	; 0x9100
    67c0:	0100002b 	tsteq	r0, fp, lsr #32
    67c4:	00930a48 	addseq	r0, r3, r8, asr #20
    67c8:	91020000 	mrsls	r0, (UNDEF: 2)
    67cc:	19ae166a 	stmibne	lr!, {r1, r3, r5, r6, r9, sl, ip}
    67d0:	4a010000 	bmi	467d8 <_Min_Stack_Size+0x465d8>
    67d4:	0000db0a 	andeq	sp, r0, sl, lsl #22
    67d8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    67dc:	0019af16 	andseq	sl, r9, r6, lsl pc
    67e0:	0a4b0100 	beq	12c6be8 <_Min_Stack_Size+0x12c69e8>
    67e4:	00000093 	muleq	r0, r3, r0
    67e8:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    67ec:	00002d42 	andeq	r2, r0, r2, asr #26
    67f0:	930a4b01 	movwls	r4, #43777	; 0xab01
    67f4:	02000000 	andeq	r0, r0, #0
    67f8:	14007291 	strne	r7, [r0], #-657	; 0xfffffd6f
    67fc:	00002c18 	andeq	r2, r0, r8, lsl ip
    6800:	440a7401 	strmi	r7, [sl], #-1025	; 0xfffffbff
    6804:	20080062 	andcs	r0, r8, r2, rrx
    6808:	01000000 	mrseq	r0, (UNDEF: 0)
    680c:	001a479c 	mulseq	sl, ip, r7
    6810:	27d21500 	ldrbcs	r1, [r2, r0, lsl #10]
    6814:	74010000 	strvc	r0, [r1], #-0
    6818:	0004ca0a 	andeq	ip, r4, sl, lsl #20
    681c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6820:	002b2215 	eoreq	r2, fp, r5, lsl r2
    6824:	0a740100 	beq	1d06c2c <_Min_Stack_Size+0x1d06a2c>
    6828:	00000093 	muleq	r0, r3, r0
    682c:	00729102 	rsbseq	r9, r2, r2, lsl #2
    6830:	002bbd1a 	eoreq	fp, fp, sl, lsl sp
    6834:	0a8d0100 	beq	fe346c3c <BootRAM+0xd2b73dd>
    6838:	00000000 	andeq	r0, r0, r0
    683c:	000000e0 	andeq	r0, r0, r0, ror #1
    6840:	1ab89c01 	bne	fee2d84c <BootRAM+0xdd9dfed>
    6844:	d2150000 	andsle	r0, r5, #0
    6848:	01000027 	tsteq	r0, r7, lsr #32
    684c:	04ca0a8d 	strbeq	r0, [sl], #2701	; 0xa8d
    6850:	91020000 	mrsls	r0, (UNDEF: 2)
    6854:	2a42156c 	bcs	108be0c <_Min_Stack_Size+0x108bc0c>
    6858:	8d010000 	stchi	0, cr0, [r1, #-0]
    685c:	0000930a 	andeq	r9, r0, sl, lsl #6
    6860:	6a910200 	bvs	fe447068 <BootRAM+0xd3b7809>
    6864:	00244e15 	eoreq	r4, r4, r5, lsl lr
    6868:	0a8d0100 	beq	fe346c70 <BootRAM+0xd2b7411>
    686c:	00000093 	muleq	r0, r3, r0
    6870:	15689102 	strbne	r9, [r8, #-258]!	; 0xfffffefe
    6874:	000023fe 	strdeq	r2, [r0], -lr
    6878:	930a8e01 	movwls	r8, #44545	; 0xae01
    687c:	02000000 	andeq	r0, r0, #0
    6880:	d0166691 	mulsle	r6, r1, r6
    6884:	01000023 	tsteq	r0, r3, lsr #32
    6888:	00930a90 	umullseq	r0, r3, r0, sl
    688c:	91020000 	mrsls	r0, (UNDEF: 2)
    6890:	26b41674 			; <UNDEFINED> instruction: 0x26b41674
    6894:	90010000 	andls	r0, r1, r0
    6898:	0000930a 	andeq	r9, r0, sl, lsl #6
    689c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    68a0:	2b661a00 	blcs	198d0a8 <_Min_Stack_Size+0x198cea8>
    68a4:	bc010000 	stclt	0, cr0, [r1], {-0}
    68a8:	0000000a 	andeq	r0, r0, sl
    68ac:	0000f400 	andeq	pc, r0, r0, lsl #8
    68b0:	389c0100 	ldmcc	ip, {r8}
    68b4:	1500001b 	strne	r0, [r0, #-27]	; 0xffffffe5
    68b8:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    68bc:	ca0abc01 	bgt	2b58c8 <_Min_Stack_Size+0x2b56c8>
    68c0:	02000004 	andeq	r0, r0, #4
    68c4:	42156c91 	andsmi	r6, r5, #37120	; 0x9100
    68c8:	0100002a 	tsteq	r0, sl, lsr #32
    68cc:	00930abc 			; <UNDEFINED> instruction: 0x00930abc
    68d0:	91020000 	mrsls	r0, (UNDEF: 2)
    68d4:	244e156a 	strbcs	r1, [lr], #-1386	; 0xfffffa96
    68d8:	bc010000 	stclt	0, cr0, [r1], {-0}
    68dc:	0000930a 	andeq	r9, r0, sl, lsl #6
    68e0:	68910200 	ldmvs	r1, {r9}
    68e4:	0023fe15 	eoreq	pc, r3, r5, lsl lr	; <UNPREDICTABLE>
    68e8:	0abd0100 	beq	fef46cf0 <BootRAM+0xdeb7491>
    68ec:	00000093 	muleq	r0, r3, r0
    68f0:	16669102 	strbtne	r9, [r6], -r2, lsl #2
    68f4:	000023d0 	ldrdeq	r2, [r0], -r0
    68f8:	930abf01 	movwls	fp, #44801	; 0xaf01
    68fc:	02000000 	andeq	r0, r0, #0
    6900:	b4167491 	ldrlt	r7, [r6], #-1169	; 0xfffffb6f
    6904:	01000026 	tsteq	r0, r6, lsr #32
    6908:	00930abf 			; <UNDEFINED> instruction: 0x00930abf
    690c:	91020000 	mrsls	r0, (UNDEF: 2)
    6910:	6d741876 	ldclvs	8, cr1, [r4, #-472]!	; 0xfffffe28
    6914:	bf010070 	svclt	0x00010070
    6918:	0000930a 	andeq	r9, r0, sl, lsl #6
    691c:	72910200 	addsvc	r0, r1, #0, 4
    6920:	28821a00 	stmcs	r2, {r9, fp, ip}
    6924:	ed010000 	stc	0, cr0, [r1, #-0]
    6928:	0000000a 	andeq	r0, r0, sl
    692c:	0000ec00 	andeq	lr, r0, r0, lsl #24
    6930:	b89c0100 	ldmlt	ip, {r8}
    6934:	1500001b 	strne	r0, [r0, #-27]	; 0xffffffe5
    6938:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    693c:	ca0aed01 	bgt	2c1d48 <_Min_Stack_Size+0x2c1b48>
    6940:	02000004 	andeq	r0, r0, #4
    6944:	42156c91 	andsmi	r6, r5, #37120	; 0x9100
    6948:	0100002a 	tsteq	r0, sl, lsr #32
    694c:	00930aed 	addseq	r0, r3, sp, ror #21
    6950:	91020000 	mrsls	r0, (UNDEF: 2)
    6954:	244e156a 	strbcs	r1, [lr], #-1386	; 0xfffffa96
    6958:	ed010000 	stc	0, cr0, [r1, #-0]
    695c:	0000930a 	andeq	r9, r0, sl, lsl #6
    6960:	68910200 	ldmvs	r1, {r9}
    6964:	0023fe15 	eoreq	pc, r3, r5, lsl lr	; <UNPREDICTABLE>
    6968:	0aee0100 	beq	ffb86d70 <BootRAM+0xeaf7511>
    696c:	00000093 	muleq	r0, r3, r0
    6970:	16669102 	strbtne	r9, [r6], -r2, lsl #2
    6974:	000023d9 	ldrdeq	r2, [r0], -r9
    6978:	930af001 	movwls	pc, #40961	; 0xa001	; <UNPREDICTABLE>
    697c:	02000000 	andeq	r0, r0, #0
    6980:	b4167491 	ldrlt	r7, [r6], #-1169	; 0xfffffb6f
    6984:	01000026 	tsteq	r0, r6, lsr #32
    6988:	00930af0 			; <UNDEFINED> instruction: 0x00930af0
    698c:	91020000 	mrsls	r0, (UNDEF: 2)
    6990:	6d741876 	ldclvs	8, cr1, [r4, #-472]!	; 0xfffffe28
    6994:	f0010070 			; <UNDEFINED> instruction: 0xf0010070
    6998:	0000930a 	andeq	r9, r0, sl, lsl #6
    699c:	72910200 	addsvc	r0, r1, #0, 4
    69a0:	26d31a00 	ldrbcs	r1, [r3], r0, lsl #20
    69a4:	1d010000 	stcne	0, cr0, [r1, #-0]
    69a8:	0000000b 	andeq	r0, r0, fp
    69ac:	0000f800 	andeq	pc, r0, r0, lsl #16
    69b0:	389c0100 	ldmcc	ip, {r8}
    69b4:	1500001c 	strne	r0, [r0, #-28]	; 0xffffffe4
    69b8:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    69bc:	ca0b1d01 	bgt	2cddc8 <_Min_Stack_Size+0x2cdbc8>
    69c0:	02000004 	andeq	r0, r0, #4
    69c4:	42156c91 	andsmi	r6, r5, #37120	; 0x9100
    69c8:	0100002a 	tsteq	r0, sl, lsr #32
    69cc:	00930b1d 	addseq	r0, r3, sp, lsl fp
    69d0:	91020000 	mrsls	r0, (UNDEF: 2)
    69d4:	244e156a 	strbcs	r1, [lr], #-1386	; 0xfffffa96
    69d8:	1d010000 	stcne	0, cr0, [r1, #-0]
    69dc:	0000930b 	andeq	r9, r0, fp, lsl #6
    69e0:	68910200 	ldmvs	r1, {r9}
    69e4:	0023fe15 	eoreq	pc, r3, r5, lsl lr	; <UNPREDICTABLE>
    69e8:	0b1e0100 	bleq	786df0 <_Min_Stack_Size+0x786bf0>
    69ec:	00000093 	muleq	r0, r3, r0
    69f0:	16669102 	strbtne	r9, [r6], -r2, lsl #2
    69f4:	000023d9 	ldrdeq	r2, [r0], -r9
    69f8:	930b2001 	movwls	r2, #45057	; 0xb001
    69fc:	02000000 	andeq	r0, r0, #0
    6a00:	b4167491 	ldrlt	r7, [r6], #-1169	; 0xfffffb6f
    6a04:	01000026 	tsteq	r0, r6, lsr #32
    6a08:	00930b20 	addseq	r0, r3, r0, lsr #22
    6a0c:	91020000 	mrsls	r0, (UNDEF: 2)
    6a10:	6d741876 	ldclvs	8, cr1, [r4, #-472]!	; 0xfffffe28
    6a14:	20010070 	andcs	r0, r1, r0, ror r0
    6a18:	0000930b 	andeq	r9, r0, fp, lsl #6
    6a1c:	72910200 	addsvc	r0, r1, #0, 4
    6a20:	026c1b00 	rsbeq	r1, ip, #0, 22
    6a24:	ce060000 	cdpgt	0, 0, cr0, cr6, cr0, {0}
    6a28:	001c4406 	andseq	r4, ip, r6, lsl #8
    6a2c:	007a0500 	rsbseq	r0, sl, r0, lsl #10
    6a30:	f2000000 	vhadd.s8	d0, d0, d0
    6a34:	0400000a 	streq	r0, [r0], #-10
    6a38:	0014f000 	andseq	pc, r4, r0
    6a3c:	11010400 	tstne	r1, r0, lsl #8
    6a40:	0c000001 	stceq	0, cr0, [r0], {1}
    6a44:	00002eda 	ldrdeq	r2, [r0], -sl
    6a48:	000008b8 			; <UNDEFINED> instruction: 0x000008b8
    6a4c:	00000000 	andeq	r0, r0, r0
    6a50:	0000312f 	andeq	r3, r0, pc, lsr #2
    6a54:	92060102 	andls	r0, r6, #-2147483648	; 0x80000000
    6a58:	03000001 	movweq	r0, #1
    6a5c:	000000e3 	andeq	r0, r0, r3, ror #1
    6a60:	00331d02 	eorseq	r1, r3, r2, lsl #26
    6a64:	01020000 	mrseq	r0, (UNDEF: 2)
    6a68:	00019008 	andeq	r9, r1, r8
    6a6c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    6a70:	00000095 	muleq	r0, r5, r0
    6a74:	00007203 	andeq	r7, r0, r3, lsl #4
    6a78:	4c2b0200 	sfmmi	f0, 4, [fp], #-0
    6a7c:	02000000 	andeq	r0, r0, #0
    6a80:	01f20702 	mvnseq	r0, r2, lsl #14
    6a84:	04020000 	streq	r0, [r2], #-0
    6a88:	0000bd05 	andeq	fp, r0, r5, lsl #26
    6a8c:	00670300 	rsbeq	r0, r7, r0, lsl #6
    6a90:	41020000 	mrsmi	r0, (UNDEF: 2)
    6a94:	00000065 	andeq	r0, r0, r5, rrx
    6a98:	c9070402 	stmdbgt	r7, {r1, sl}
    6a9c:	02000001 	andeq	r0, r0, #1
    6aa0:	00b80508 	adcseq	r0, r8, r8, lsl #10
    6aa4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6aa8:	0001c407 	andeq	ip, r1, r7, lsl #8
    6aac:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    6ab0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    6ab4:	ce070402 	cdpgt	4, 0, cr0, cr7, cr2, {0}
    6ab8:	03000001 	movweq	r0, #1
    6abc:	000000e5 	andeq	r0, r0, r5, ror #1
    6ac0:	00281803 	eoreq	r1, r8, r3, lsl #16
    6ac4:	74030000 	strvc	r0, [r3], #-0
    6ac8:	03000000 	movweq	r0, #0
    6acc:	00004124 	andeq	r4, r0, r4, lsr #2
    6ad0:	00690300 	rsbeq	r0, r9, r0, lsl #6
    6ad4:	30030000 	andcc	r0, r3, r0
    6ad8:	0000005a 	andeq	r0, r0, sl, asr r0
    6adc:	59070402 	stmdbpl	r7, {r1, sl}
    6ae0:	05000000 	streq	r0, [r0, #-0]
    6ae4:	0000009e 	muleq	r0, lr, r0
    6ae8:	00009305 	andeq	r9, r0, r5, lsl #6
    6aec:	33010600 	movwcc	r0, #5632	; 0x1600
    6af0:	04000000 	streq	r0, [r0], #-0
    6af4:	00d40207 	sbcseq	r0, r4, r7, lsl #4
    6af8:	74070000 	strvc	r0, [r7], #-0
    6afc:	0000001c 	andeq	r0, r0, ip, lsl r0
    6b00:	54455308 	strbpl	r5, [r5], #-776	; 0xfffffcf8
    6b04:	09000100 	stmdbeq	r0, {r8}
    6b08:	00002e77 	andeq	r2, r0, r7, ror lr
    6b0c:	ba020704 	blt	88724 <_Min_Stack_Size+0x88524>
    6b10:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    6b14:	00002f95 	muleq	r0, r5, pc	; <UNPREDICTABLE>
    6b18:	ba020704 	blt	88730 <_Min_Stack_Size+0x88530>
    6b1c:	06000000 	streq	r0, [r0], -r0
    6b20:	00003301 	andeq	r3, r0, r1, lsl #6
    6b24:	02090400 	andeq	r0, r9, #0, 8
    6b28:	00000106 	andeq	r0, r0, r6, lsl #2
    6b2c:	0002f007 	andeq	pc, r2, r7
    6b30:	62070000 	andvs	r0, r7, #0
    6b34:	01000004 	tsteq	r0, r4
    6b38:	17d40900 	ldrbne	r0, [r4, r0, lsl #18]
    6b3c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    6b40:	0000ec02 	andeq	lr, r0, r2, lsl #24
    6b44:	33010600 	movwcc	r0, #5632	; 0x1600
    6b48:	04000000 	streq	r0, [r0], #-0
    6b4c:	012c020c 			; <UNDEFINED> instruction: 0x012c020c
    6b50:	41070000 	mrsmi	r0, (UNDEF: 7)
    6b54:	00000003 	andeq	r0, r0, r3
    6b58:	00141507 	andseq	r1, r4, r7, lsl #10
    6b5c:	09000100 	stmdbeq	r0, {r8}
    6b60:	0000195b 	andeq	r1, r0, fp, asr r9
    6b64:	12020c04 	andne	r0, r2, #4, 24	; 0x400
    6b68:	0a000001 	beq	6b74 <_Min_Stack_Size+0x6974>
    6b6c:	04040424 	streq	r0, [r4], #-1060	; 0xfffffbdc
    6b70:	0000022b 	andeq	r0, r0, fp, lsr #4
    6b74:	3152430b 	cmpcc	r2, fp, lsl #6
    6b78:	04060400 	streq	r0, [r6], #-1024	; 0xfffffc00
    6b7c:	000000b5 	strheq	r0, [r0], -r5
    6b80:	03c20c00 	biceq	r0, r2, #0, 24
    6b84:	07040000 	streq	r0, [r4, -r0]
    6b88:	00009304 	andeq	r9, r0, r4, lsl #6
    6b8c:	430b0200 	movwmi	r0, #45568	; 0xb200
    6b90:	04003252 	streq	r3, [r0], #-594	; 0xfffffdae
    6b94:	00b50408 	adcseq	r0, r5, r8, lsl #8
    6b98:	0c040000 	stceq	0, cr0, [r4], {-0}
    6b9c:	000003cc 	andeq	r0, r0, ip, asr #7
    6ba0:	93040904 	movwls	r0, #18692	; 0x4904
    6ba4:	06000000 	streq	r0, [r0], -r0
    6ba8:	0003b80c 	andeq	fp, r3, ip, lsl #16
    6bac:	040a0400 	streq	r0, [sl], #-1024	; 0xfffffc00
    6bb0:	000000b5 	strheq	r0, [r0], -r5
    6bb4:	03d60c08 	bicseq	r0, r6, #8, 24	; 0x800
    6bb8:	0b040000 	bleq	106bc0 <_Min_Stack_Size+0x1069c0>
    6bbc:	00009304 	andeq	r9, r0, r4, lsl #6
    6bc0:	bd0c0a00 	vstrlt	s0, [ip, #-0]
    6bc4:	04000003 	streq	r0, [r0], #-3
    6bc8:	00b5040c 	adcseq	r0, r5, ip, lsl #8
    6bcc:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    6bd0:	000002ab 	andeq	r0, r0, fp, lsr #5
    6bd4:	93040d04 	movwls	r0, #19716	; 0x4d04
    6bd8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    6bdc:	0052440b 	subseq	r4, r2, fp, lsl #8
    6be0:	b5040e04 	strlt	r0, [r4, #-3588]	; 0xfffff1fc
    6be4:	10000000 	andne	r0, r0, r0
    6be8:	0003ea0c 	andeq	lr, r3, ip, lsl #20
    6bec:	040f0400 	streq	r0, [pc], #-1024	; 6bf4 <_Min_Stack_Size+0x69f4>
    6bf0:	00000093 	muleq	r0, r3, r0
    6bf4:	52530b12 	subspl	r0, r3, #18432	; 0x4800
    6bf8:	10040031 	andne	r0, r4, r1, lsr r0
    6bfc:	0000b504 	andeq	fp, r0, r4, lsl #10
    6c00:	f40c1400 	vst3.8	{d1-d3}, [ip], r0
    6c04:	04000003 	streq	r0, [r0], #-3
    6c08:	00930411 	addseq	r0, r3, r1, lsl r4
    6c0c:	0b160000 	bleq	586c14 <_Min_Stack_Size+0x586a14>
    6c10:	00325253 	eorseq	r5, r2, r3, asr r2
    6c14:	b5041204 	strlt	r1, [r4, #-516]	; 0xfffffdfc
    6c18:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6c1c:	0002d70c 	andeq	sp, r2, ip, lsl #14
    6c20:	04130400 	ldreq	r0, [r3], #-1024	; 0xfffffc00
    6c24:	00000093 	muleq	r0, r3, r0
    6c28:	43430b1a 	movtmi	r0, #15130	; 0x3b1a
    6c2c:	14040052 	strne	r0, [r4], #-82	; 0xffffffae
    6c30:	0000b504 	andeq	fp, r0, r4, lsl #10
    6c34:	150c1c00 	strne	r1, [ip, #-3072]	; 0xfffff400
    6c38:	04000004 	streq	r0, [r0], #-4
    6c3c:	00930415 	addseq	r0, r3, r5, lsl r4
    6c40:	0c1e0000 	ldceq	0, cr0, [lr], {-0}
    6c44:	0000044b 	andeq	r0, r0, fp, asr #8
    6c48:	b5041604 	strlt	r1, [r4, #-1540]	; 0xfffff9fc
    6c4c:	20000000 	andcs	r0, r0, r0
    6c50:	00041f0c 	andeq	r1, r4, ip, lsl #30
    6c54:	04170400 	ldreq	r0, [r7], #-1024	; 0xfffffc00
    6c58:	00000093 	muleq	r0, r3, r0
    6c5c:	47090022 	strmi	r0, [r9, -r2, lsr #32]
    6c60:	04000003 	streq	r0, [r0], #-3
    6c64:	01380418 	teqeq	r8, r8, lsl r4
    6c68:	140d0000 	strne	r0, [sp], #-0
    6c6c:	027c2e05 	rsbseq	r2, ip, #5, 28	; 0x50
    6c70:	800e0000 	andhi	r0, lr, r0
    6c74:	0500001a 	streq	r0, [r0, #-26]	; 0xffffffe6
    6c78:	00009e30 	andeq	r9, r0, r0, lsr lr
    6c7c:	d20e0000 	andle	r0, lr, #0
    6c80:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    6c84:	00009e31 	andeq	r9, r0, r1, lsr lr
    6c88:	e90e0400 	stmdb	lr, {sl}
    6c8c:	0500001a 	streq	r0, [r0, #-26]	; 0xffffffe6
    6c90:	00009e32 	andeq	r9, r0, r2, lsr lr
    6c94:	9c0e0800 	stcls	8, cr0, [lr], {-0}
    6c98:	0500001a 	streq	r0, [r0, #-26]	; 0xffffffe6
    6c9c:	00009e33 	andeq	r9, r0, r3, lsr lr
    6ca0:	610e0c00 	tstvs	lr, r0, lsl #24
    6ca4:	0500001a 	streq	r0, [r0, #-26]	; 0xffffffe6
    6ca8:	00009e34 	andeq	r9, r0, r4, lsr lr
    6cac:	03001000 	movweq	r1, #0
    6cb0:	0000189f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    6cb4:	02373505 	eorseq	r3, r7, #20971520	; 0x1400000
    6cb8:	100d0000 	andne	r0, sp, r0
    6cbc:	02d83206 	sbcseq	r3, r8, #1610612736	; 0x60000000
    6cc0:	5e0e0000 	cdppl	0, 0, cr0, cr14, cr0, {0}
    6cc4:	06000031 			; <UNDEFINED> instruction: 0x06000031
    6cc8:	00009e34 	andeq	r9, r0, r4, lsr lr
    6ccc:	210e0000 	mrscs	r0, (UNDEF: 14)
    6cd0:	06000030 			; <UNDEFINED> instruction: 0x06000030
    6cd4:	00009337 	andeq	r9, r0, r7, lsr r3
    6cd8:	8c0e0400 	cfstrshi	mvf0, [lr], {-0}
    6cdc:	06000031 			; <UNDEFINED> instruction: 0x06000031
    6ce0:	0000933a 	andeq	r9, r0, sl, lsr r3
    6ce4:	d20e0600 	andle	r0, lr, #0, 12
    6ce8:	06000030 			; <UNDEFINED> instruction: 0x06000030
    6cec:	0000933d 	andeq	r9, r0, sp, lsr r3
    6cf0:	e20e0800 	and	r0, lr, #0, 16
    6cf4:	06000030 			; <UNDEFINED> instruction: 0x06000030
    6cf8:	00009340 	andeq	r9, r0, r0, asr #6
    6cfc:	930e0a00 	movwls	r0, #59904	; 0xea00
    6d00:	0600002e 	streq	r0, [r0], -lr, lsr #32
    6d04:	00009343 	andeq	r9, r0, r3, asr #6
    6d08:	03000c00 	movweq	r0, #3072	; 0xc00
    6d0c:	0000310a 	andeq	r3, r0, sl, lsl #2
    6d10:	02874506 	addeq	r4, r7, #25165824	; 0x1800000
    6d14:	290f0000 	stmdbcs	pc, {}	; <UNPREDICTABLE>
    6d18:	01000031 	tsteq	r0, r1, lsr r0
    6d1c:	006264a2 	rsbeq	r6, r2, r2, lsr #9
    6d20:	00004808 	andeq	r4, r0, r8, lsl #16
    6d24:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
    6d28:	10000003 	andne	r0, r0, r3
    6d2c:	00002f39 	andeq	r2, r0, r9, lsr pc
    6d30:	0307a201 	movweq	sl, #29185	; 0x7201
    6d34:	91020000 	mrsls	r0, (UNDEF: 2)
    6d38:	04110074 	ldreq	r0, [r1], #-116	; 0xffffff8c
    6d3c:	0000022b 	andeq	r0, r0, fp, lsr #4
    6d40:	00319a0f 	eorseq	r9, r1, pc, lsl #20
    6d44:	acbf0100 	ldfges	f0, [pc]	; 6d4c <_Min_Stack_Size+0x6b4c>
    6d48:	84080062 	strhi	r0, [r8], #-98	; 0xffffff9e
    6d4c:	01000001 	tsteq	r0, r1
    6d50:	0003859c 	muleq	r3, ip, r5
    6d54:	2f391000 	svccs	0x00391000
    6d58:	bf010000 	svclt	0x00010000
    6d5c:	00000307 	andeq	r0, r0, r7, lsl #6
    6d60:	10549102 	subsne	r9, r4, r2, lsl #2
    6d64:	00002f79 	andeq	r2, r0, r9, ror pc
    6d68:	0385bf01 	orreq	fp, r5, #1, 30
    6d6c:	91020000 	mrsls	r0, (UNDEF: 2)
    6d70:	19a71250 	stmibne	r7!, {r4, r6, r9, ip}
    6d74:	c1010000 	mrsgt	r0, (UNDEF: 1)
    6d78:	00000093 	muleq	r0, r3, r0
    6d7c:	12769102 	rsbsne	r9, r6, #-2147483648	; 0x80000000
    6d80:	00003100 	andeq	r3, r0, r0, lsl #2
    6d84:	0093c101 	addseq	ip, r3, r1, lsl #2
    6d88:	91020000 	mrsls	r0, (UNDEF: 2)
    6d8c:	57531272 			; <UNDEFINED> instruction: 0x57531272
    6d90:	c2010000 	andgt	r0, r1, #0
    6d94:	00000093 	muleq	r0, r3, r0
    6d98:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    6d9c:	00002fa9 	andeq	r2, r0, r9, lsr #31
    6da0:	009ec301 	addseq	ip, lr, r1, lsl #6
    6da4:	91020000 	mrsls	r0, (UNDEF: 2)
    6da8:	2f3e126c 	svccs	0x003e126c
    6dac:	c4010000 	strgt	r0, [r1], #-0
    6db0:	0000027c 	andeq	r0, r0, ip, ror r2
    6db4:	00589102 	subseq	r9, r8, r2, lsl #2
    6db8:	02d80411 	sbcseq	r0, r8, #285212672	; 0x11000000
    6dbc:	1a130000 	bne	4c6dc4 <_Min_Stack_Size+0x4c6bc4>
    6dc0:	01000031 	tsteq	r0, r1, lsr r0
    6dc4:	0000012a 	andeq	r0, r0, sl, lsr #2
    6dc8:	003c0000 	eorseq	r0, ip, r0
    6dcc:	9c010000 	stcls	0, cr0, [r1], {-0}
    6dd0:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
    6dd4:	002f7914 	eoreq	r7, pc, r4, lsl r9	; <UNPREDICTABLE>
    6dd8:	012a0100 			; <UNDEFINED> instruction: 0x012a0100
    6ddc:	00000385 	andeq	r0, r0, r5, lsl #7
    6de0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    6de4:	002f2113 	eoreq	r2, pc, r3, lsl r1	; <UNPREDICTABLE>
    6de8:	01420100 	mrseq	r0, (UNDEF: 82)
    6dec:	08006430 	stmdaeq	r0, {r4, r5, sl, sp, lr}
    6df0:	0000003e 	andeq	r0, r0, lr, lsr r0
    6df4:	03e69c01 	mvneq	r9, #256	; 0x100
    6df8:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    6dfc:	0100002f 	tsteq	r0, pc, lsr #32
    6e00:	03070142 	movweq	r0, #28994	; 0x7142
    6e04:	91020000 	mrsls	r0, (UNDEF: 2)
    6e08:	17131474 			; <UNDEFINED> instruction: 0x17131474
    6e0c:	42010000 	andmi	r0, r1, #0
    6e10:	00010601 	andeq	r0, r1, r1, lsl #12
    6e14:	73910200 	orrsvc	r0, r1, #0, 4
    6e18:	2faf1300 	svccs	0x00af1300
    6e1c:	5a010000 	bpl	46e24 <_Min_Stack_Size+0x46c24>
    6e20:	00000001 	andeq	r0, r0, r1
    6e24:	00003e00 	andeq	r3, r0, r0, lsl #28
    6e28:	1b9c0100 	blne	fe707230 <BootRAM+0xd6779d1>
    6e2c:	14000004 	strne	r0, [r0], #-4
    6e30:	00002f39 	andeq	r2, r0, r9, lsr pc
    6e34:	07015a01 	streq	r5, [r1, -r1, lsl #20]
    6e38:	02000003 	andeq	r0, r0, #3
    6e3c:	13147491 	tstne	r4, #-1862270976	; 0x91000000
    6e40:	01000017 	tsteq	r0, r7, lsl r0
    6e44:	0106015a 	tsteq	r6, sl, asr r1
    6e48:	91020000 	mrsls	r0, (UNDEF: 2)
    6e4c:	ba130073 	blt	4c7020 <_Min_Stack_Size+0x4c6e20>
    6e50:	0100002f 	tsteq	r0, pc, lsr #32
    6e54:	00000172 	andeq	r0, r0, r2, ror r1
    6e58:	003e0000 	eorseq	r0, lr, r0
    6e5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6e60:	00000450 	andeq	r0, r0, r0, asr r4
    6e64:	002f3914 	eoreq	r3, pc, r4, lsl r9	; <UNPREDICTABLE>
    6e68:	01720100 	cmneq	r2, r0, lsl #2
    6e6c:	00000307 	andeq	r0, r0, r7, lsl #6
    6e70:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    6e74:	00001713 	andeq	r1, r0, r3, lsl r7
    6e78:	06017201 	streq	r7, [r1], -r1, lsl #4
    6e7c:	02000001 	andeq	r0, r0, #1
    6e80:	13007391 	movwne	r7, #913	; 0x391
    6e84:	000030c0 	andeq	r3, r0, r0, asr #1
    6e88:	70018a01 	andvc	r8, r1, r1, lsl #20
    6e8c:	3e080064 	cdpcc	0, 0, cr0, cr8, cr4, {3}
    6e90:	01000000 	mrseq	r0, (UNDEF: 0)
    6e94:	0004859c 	muleq	r4, ip, r5
    6e98:	2f391400 	svccs	0x00391400
    6e9c:	8a010000 	bhi	46ea4 <_Min_Stack_Size+0x46ca4>
    6ea0:	00030701 	andeq	r0, r3, r1, lsl #14
    6ea4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6ea8:	00171314 	andseq	r1, r7, r4, lsl r3
    6eac:	018a0100 	orreq	r0, sl, r0, lsl #2
    6eb0:	00000106 	andeq	r0, r0, r6, lsl #2
    6eb4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    6eb8:	002f1013 	eoreq	r1, pc, r3, lsl r0	; <UNPREDICTABLE>
    6ebc:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
    6ec0:	00000000 	andeq	r0, r0, r0
    6ec4:	0000003e 	andeq	r0, r0, lr, lsr r0
    6ec8:	04ba9c01 	ldrteq	r9, [sl], #3073	; 0xc01
    6ecc:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    6ed0:	0100002f 	tsteq	r0, pc, lsr #32
    6ed4:	030701a2 	movweq	r0, #29090	; 0x71a2
    6ed8:	91020000 	mrsls	r0, (UNDEF: 2)
    6edc:	17131474 			; <UNDEFINED> instruction: 0x17131474
    6ee0:	a2010000 	andge	r0, r1, #0
    6ee4:	00010601 	andeq	r0, r1, r1, lsl #12
    6ee8:	73910200 	orrsvc	r0, r1, #0, 4
    6eec:	30891300 	addcc	r1, r9, r0, lsl #6
    6ef0:	ba010000 	blt	46ef8 <_Min_Stack_Size+0x46cf8>
    6ef4:	00000001 	andeq	r0, r0, r1
    6ef8:	00003e00 	andeq	r3, r0, r0, lsl #28
    6efc:	ef9c0100 	svc	0x009c0100
    6f00:	14000004 	strne	r0, [r0], #-4
    6f04:	00002f39 	andeq	r2, r0, r9, lsr pc
    6f08:	0701ba01 	streq	fp, [r1, -r1, lsl #20]
    6f0c:	02000003 	andeq	r0, r0, #3
    6f10:	13147491 	tstne	r4, #-1862270976	; 0x91000000
    6f14:	01000017 	tsteq	r0, r7, lsl r0
    6f18:	010601ba 			; <UNDEFINED> instruction: 0x010601ba
    6f1c:	91020000 	mrsls	r0, (UNDEF: 2)
    6f20:	34130073 	ldrcc	r0, [r3], #-115	; 0xffffff8d
    6f24:	01000031 	tsteq	r0, r1, lsr r0
    6f28:	000001d1 	ldrdeq	r0, [r0], -r1
    6f2c:	00420000 	subeq	r0, r2, r0
    6f30:	9c010000 	stcls	0, cr0, [r1], {-0}
    6f34:	00000533 	andeq	r0, r0, r3, lsr r5
    6f38:	002f3914 	eoreq	r3, pc, r4, lsl r9	; <UNPREDICTABLE>
    6f3c:	01d10100 	bicseq	r0, r1, r0, lsl #2
    6f40:	00000307 	andeq	r0, r0, r7, lsl #6
    6f44:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    6f48:	00002ea3 	andeq	r2, r0, r3, lsr #29
    6f4c:	8801d101 	stmdahi	r1, {r0, r8, ip, lr, pc}
    6f50:	02000000 	andeq	r0, r0, #0
    6f54:	a7156b91 			; <UNDEFINED> instruction: 0xa7156b91
    6f58:	01000019 	tsteq	r0, r9, lsl r0
    6f5c:	009301d3 			; <UNDEFINED> instruction: 0x009301d3
    6f60:	91020000 	mrsls	r0, (UNDEF: 2)
    6f64:	dc130076 	ldcle	0, cr0, [r3], {118}	; 0x76
    6f68:	0100002f 	tsteq	r0, pc, lsr #32
    6f6c:	000001ec 	andeq	r0, r0, ip, ror #3
    6f70:	003e0000 	eorseq	r0, lr, r0
    6f74:	9c010000 	stcls	0, cr0, [r1], {-0}
    6f78:	00000568 	andeq	r0, r0, r8, ror #10
    6f7c:	002f3914 	eoreq	r3, pc, r4, lsl r9	; <UNPREDICTABLE>
    6f80:	01ec0100 	mvneq	r0, r0, lsl #2
    6f84:	00000307 	andeq	r0, r0, r7, lsl #6
    6f88:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    6f8c:	00001713 	andeq	r1, r0, r3, lsl r7
    6f90:	0601ec01 	streq	lr, [r1], -r1, lsl #24
    6f94:	02000001 	andeq	r0, r0, #1
    6f98:	13007391 	movwne	r7, #913	; 0x391
    6f9c:	00002fef 	andeq	r2, r0, pc, ror #31
    6fa0:	00020401 	andeq	r0, r2, r1, lsl #8
    6fa4:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    6fa8:	01000000 	mrseq	r0, (UNDEF: 0)
    6fac:	00059d9c 	muleq	r5, ip, sp
    6fb0:	2f391400 	svccs	0x00391400
    6fb4:	04010000 	streq	r0, [r1], #-0
    6fb8:	00030702 	andeq	r0, r3, r2, lsl #14
    6fbc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6fc0:	00171314 	andseq	r1, r7, r4, lsl r3
    6fc4:	02040100 	andeq	r0, r4, #0, 2
    6fc8:	00000106 	andeq	r0, r0, r6, lsl #2
    6fcc:	00739102 	rsbseq	r9, r3, r2, lsl #2
    6fd0:	00307213 	eorseq	r7, r0, r3, lsl r2
    6fd4:	02210100 	eoreq	r0, r1, #0, 2
    6fd8:	00000000 	andeq	r0, r0, r0
    6fdc:	00000046 	andeq	r0, r0, r6, asr #32
    6fe0:	05e19c01 	strbeq	r9, [r1, #3073]!	; 0xc01
    6fe4:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    6fe8:	0100002f 	tsteq	r0, pc, lsr #32
    6fec:	03070221 	movweq	r0, #29217	; 0x7221
    6ff0:	91020000 	mrsls	r0, (UNDEF: 2)
    6ff4:	2ec01474 	mcrcs	4, 6, r1, cr0, cr4, {3}
    6ff8:	21010000 	mrscs	r0, (UNDEF: 1)
    6ffc:	00009302 	andeq	r9, r0, r2, lsl #6
    7000:	72910200 	addsvc	r0, r1, #0, 4
    7004:	00171314 	andseq	r1, r7, r4, lsl r3
    7008:	02210100 	eoreq	r0, r1, #0, 2
    700c:	00000106 	andeq	r0, r0, r6, lsl #2
    7010:	00719102 	rsbseq	r9, r1, r2, lsl #2
    7014:	0031a313 	eorseq	sl, r1, r3, lsl r3
    7018:	023a0100 	eorseq	r0, sl, #0, 2
    701c:	080064b0 	stmdaeq	r0, {r4, r5, r7, sl, sp, lr}
    7020:	0000001e 	andeq	r0, r0, lr, lsl r0
    7024:	06169c01 	ldreq	r9, [r6], -r1, lsl #24
    7028:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    702c:	0100002f 	tsteq	r0, pc, lsr #32
    7030:	0307023a 	movweq	r0, #29242	; 0x723a
    7034:	91020000 	mrsls	r0, (UNDEF: 2)
    7038:	40771474 	rsbsmi	r1, r7, r4, ror r4
    703c:	3a010000 	bcc	47044 <_Min_Stack_Size+0x46e44>
    7040:	00008802 	andeq	r8, r0, r2, lsl #16
    7044:	73910200 	orrsvc	r0, r1, #0, 4
    7048:	30311600 	eorscc	r1, r1, r0, lsl #12
    704c:	47010000 	strmi	r0, [r1, -r0]
    7050:	00008802 	andeq	r8, r0, r2, lsl #16
    7054:	00000000 	andeq	r0, r0, r0
    7058:	00001a00 	andeq	r1, r0, r0, lsl #20
    705c:	409c0100 	addsmi	r0, ip, r0, lsl #2
    7060:	14000006 	strne	r0, [r0], #-6
    7064:	00002f39 	andeq	r2, r0, r9, lsr pc
    7068:	07024701 	streq	r4, [r2, -r1, lsl #14]
    706c:	02000003 	andeq	r0, r0, #3
    7070:	13007491 	movwne	r7, #1169	; 0x491
    7074:	000031b0 			; <UNDEFINED> instruction: 0x000031b0
    7078:	d0025901 	andle	r5, r2, r1, lsl #18
    707c:	3a080064 	bcc	207214 <_Min_Stack_Size+0x207014>
    7080:	01000000 	mrseq	r0, (UNDEF: 0)
    7084:	0006849c 	muleq	r6, ip, r4
    7088:	2f391400 	svccs	0x00391400
    708c:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    7090:	00030702 	andeq	r0, r3, r2, lsl #14
    7094:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    7098:	002ea314 	eoreq	sl, lr, r4, lsl r3
    709c:	02590100 	subseq	r0, r9, #0, 2
    70a0:	00000088 	andeq	r0, r0, r8, lsl #1
    70a4:	14739102 	ldrbtne	r9, [r3], #-258	; 0xfffffefe
    70a8:	000031d3 	ldrdeq	r3, [r0], -r3	; <UNPREDICTABLE>
    70ac:	88025901 	stmdahi	r2, {r0, r8, fp, ip, lr}
    70b0:	02000000 	andeq	r0, r0, #0
    70b4:	16007291 			; <UNDEFINED> instruction: 0x16007291
    70b8:	00002e5f 	andeq	r2, r0, pc, asr lr
    70bc:	93027c01 	movwls	r7, #11265	; 0x2c01
    70c0:	00000000 	andeq	r0, r0, r0
    70c4:	2c000000 	stccs	0, cr0, [r0], {-0}
    70c8:	01000000 	mrseq	r0, (UNDEF: 0)
    70cc:	0006cc9c 	muleq	r6, ip, ip
    70d0:	2f391400 	svccs	0x00391400
    70d4:	7c010000 	stcvc	0, cr0, [r1], {-0}
    70d8:	00030702 	andeq	r0, r3, r2, lsl #14
    70dc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    70e0:	0030b314 	eorseq	fp, r0, r4, lsl r3
    70e4:	027c0100 	rsbseq	r0, ip, #0, 2
    70e8:	00000088 	andeq	r0, r0, r8, lsl #1
    70ec:	176b9102 	strbne	r9, [fp, -r2, lsl #2]!
    70f0:	00706d74 	rsbseq	r6, r0, r4, ror sp
    70f4:	b0027e01 	andlt	r7, r2, r1, lsl #28
    70f8:	02000000 	andeq	r0, r0, #0
    70fc:	13007491 	movwne	r7, #1169	; 0x491
    7100:	00002eab 	andeq	r2, r0, fp, lsr #29
    7104:	00029201 	andeq	r9, r2, r1, lsl #4
    7108:	42000000 	andmi	r0, r0, #0
    710c:	01000000 	mrseq	r0, (UNDEF: 0)
    7110:	0007019c 	muleq	r7, ip, r1
    7114:	2f391400 	svccs	0x00391400
    7118:	92010000 	andls	r0, r1, #0
    711c:	00030702 	andeq	r0, r3, r2, lsl #14
    7120:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    7124:	00171314 	andseq	r1, r7, r4, lsl r3
    7128:	02920100 	addseq	r0, r2, #0, 2
    712c:	00000106 	andeq	r0, r0, r6, lsl #2
    7130:	00739102 	rsbseq	r9, r3, r2, lsl #2
    7134:	00300213 	eorseq	r0, r0, r3, lsl r2
    7138:	02b80100 	adcseq	r0, r8, #0, 2
    713c:	00000000 	andeq	r0, r0, r0
    7140:	00000040 	andeq	r0, r0, r0, asr #32
    7144:	07369c01 	ldreq	r9, [r6, -r1, lsl #24]!
    7148:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    714c:	0100002f 	tsteq	r0, pc, lsr #32
    7150:	030702b8 	movweq	r0, #29368	; 0x72b8
    7154:	91020000 	mrsls	r0, (UNDEF: 2)
    7158:	2f681474 	svccs	0x00681474
    715c:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    7160:	00009302 	andeq	r9, r0, r2, lsl #6
    7164:	72910200 	addsvc	r0, r1, #0, 4
    7168:	305d1300 	subscc	r1, sp, r0, lsl #6
    716c:	d4010000 	strle	r0, [r1], #-0
    7170:	00000002 	andeq	r0, r0, r2
    7174:	00004000 	andeq	r4, r0, r0
    7178:	6b9c0100 	blvs	fe707580 <BootRAM+0xd677d21>
    717c:	14000007 	strne	r0, [r0], #-7
    7180:	00002f39 	andeq	r2, r0, r9, lsr pc
    7184:	0702d401 	streq	sp, [r2, -r1, lsl #8]
    7188:	02000003 	andeq	r0, r0, #3
    718c:	7d147491 	cfldrsvc	mvf7, [r4, #-580]	; 0xfffffdbc
    7190:	01000031 	tsteq	r0, r1, lsr r0
    7194:	009302d4 			; <UNDEFINED> instruction: 0x009302d4
    7198:	91020000 	mrsls	r0, (UNDEF: 2)
    719c:	29130072 	ldmdbcs	r3, {r1, r4, r5, r6}
    71a0:	0100002f 	tsteq	r0, pc, lsr #32
    71a4:	000002ec 	andeq	r0, r0, ip, ror #5
    71a8:	003e0000 	eorseq	r0, lr, r0
    71ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    71b0:	000007a0 	andeq	r0, r0, r0, lsr #15
    71b4:	002f3914 	eoreq	r3, pc, r4, lsl r9	; <UNPREDICTABLE>
    71b8:	02ec0100 	rsceq	r0, ip, #0, 2
    71bc:	00000307 	andeq	r0, r0, r7, lsl #6
    71c0:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    71c4:	00001713 	andeq	r1, r0, r3, lsl r7
    71c8:	0602ec01 	streq	lr, [r2], -r1, lsl #24
    71cc:	02000001 	andeq	r0, r0, #1
    71d0:	13007391 	movwne	r7, #913	; 0x391
    71d4:	000030ea 	andeq	r3, r0, sl, ror #1
    71d8:	00030b01 	andeq	r0, r3, r1, lsl #22
    71dc:	40000000 	andmi	r0, r0, r0
    71e0:	01000000 	mrseq	r0, (UNDEF: 0)
    71e4:	0007d59c 	muleq	r7, ip, r5
    71e8:	2f391400 	svccs	0x00391400
    71ec:	0b010000 	bleq	471f4 <_Min_Stack_Size+0x46ff4>
    71f0:	00030703 	andeq	r0, r3, r3, lsl #14
    71f4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    71f8:	00316d14 	eorseq	r6, r1, r4, lsl sp
    71fc:	030b0100 	movweq	r0, #45312	; 0xb100
    7200:	00000093 	muleq	r0, r3, r0
    7204:	00729102 	rsbseq	r9, r2, r2, lsl #2
    7208:	002e8213 	eoreq	r8, lr, r3, lsl r2
    720c:	03230100 			; <UNDEFINED> instruction: 0x03230100
    7210:	00000000 	andeq	r0, r0, r0
    7214:	0000003e 	andeq	r0, r0, lr, lsr r0
    7218:	080a9c01 	stmdaeq	sl, {r0, sl, fp, ip, pc}
    721c:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    7220:	0100002f 	tsteq	r0, pc, lsr #32
    7224:	03070323 	movweq	r0, #29475	; 0x7323
    7228:	91020000 	mrsls	r0, (UNDEF: 2)
    722c:	17131474 			; <UNDEFINED> instruction: 0x17131474
    7230:	23010000 	movwcs	r0, #4096	; 0x1000
    7234:	00010603 	andeq	r0, r1, r3, lsl #12
    7238:	73910200 	orrsvc	r0, r1, #0, 4
    723c:	2fd11600 	svccs	0x00d11600
    7240:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    7244:	00008803 	andeq	r8, r0, r3, lsl #16
    7248:	00000000 	andeq	r0, r0, r0
    724c:	00001e00 	andeq	r1, r0, r0, lsl #28
    7250:	349c0100 	ldrcc	r0, [ip], #256	; 0x100
    7254:	14000008 	strne	r0, [r0], #-8
    7258:	00002f39 	andeq	r2, r0, r9, lsr pc
    725c:	07033901 	streq	r3, [r3, -r1, lsl #18]
    7260:	02000003 	andeq	r0, r0, #3
    7264:	13007491 	movwne	r7, #1169	; 0x491
    7268:	00002f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
    726c:	00034801 	andeq	r4, r3, r1, lsl #16
    7270:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    7274:	01000000 	mrseq	r0, (UNDEF: 0)
    7278:	0008699c 	muleq	r8, ip, r9
    727c:	2f391400 	svccs	0x00391400
    7280:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    7284:	00030703 	andeq	r0, r3, r3, lsl #14
    7288:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    728c:	00171314 	andseq	r1, r7, r4, lsl r3
    7290:	03480100 	movteq	r0, #33024	; 0x8100
    7294:	00000106 	andeq	r0, r0, r6, lsl #2
    7298:	00739102 	rsbseq	r9, r3, r2, lsl #2
    729c:	00314a13 	eorseq	r4, r1, r3, lsl sl
    72a0:	03600100 	cmneq	r0, #0, 2
    72a4:	0800650c 	stmdaeq	r0, {r2, r3, r8, sl, sp, lr}
    72a8:	0000003e 	andeq	r0, r0, lr, lsr r0
    72ac:	089e9c01 	ldmeq	lr, {r0, sl, fp, ip, pc}
    72b0:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    72b4:	0100002f 	tsteq	r0, pc, lsr #32
    72b8:	03070360 	movweq	r0, #29536	; 0x7360
    72bc:	91020000 	mrsls	r0, (UNDEF: 2)
    72c0:	17131474 			; <UNDEFINED> instruction: 0x17131474
    72c4:	60010000 	andvs	r0, r1, r0
    72c8:	00010603 	andeq	r0, r1, r3, lsl #12
    72cc:	73910200 	orrsvc	r0, r1, #0, 4
    72d0:	30411300 	subcc	r1, r1, r0, lsl #6
    72d4:	7a010000 	bvc	472dc <_Min_Stack_Size+0x470dc>
    72d8:	00000003 	andeq	r0, r0, r3
    72dc:	00004000 	andeq	r4, r0, r0
    72e0:	d39c0100 	orrsle	r0, ip, #0, 2
    72e4:	14000008 	strne	r0, [r0], #-8
    72e8:	00002f39 	andeq	r2, r0, r9, lsr pc
    72ec:	07037a01 	streq	r7, [r3, -r1, lsl #20]
    72f0:	02000003 	andeq	r0, r0, #3
    72f4:	8c147491 	cfldrshi	mvf7, [r4], {145}	; 0x91
    72f8:	01000031 	tsteq	r0, r1, lsr r0
    72fc:	0093037a 	addseq	r0, r3, sl, ror r3
    7300:	91020000 	mrsls	r0, (UNDEF: 2)
    7304:	c4160072 	ldrgt	r0, [r6], #-114	; 0xffffff8e
    7308:	01000031 	tsteq	r0, r1, lsr r0
    730c:	012c0406 			; <UNDEFINED> instruction: 0x012c0406
    7310:	654c0000 	strbvs	r0, [ip, #-0]
    7314:	005e0800 	subseq	r0, lr, r0, lsl #16
    7318:	9c010000 	stcls	0, cr0, [r1], {-0}
    731c:	00000948 	andeq	r0, r0, r8, asr #18
    7320:	002f3914 	eoreq	r3, pc, r4, lsl r9	; <UNPREDICTABLE>
    7324:	04060100 	streq	r0, [r6], #-256	; 0xffffff00
    7328:	00000307 	andeq	r0, r0, r7, lsl #6
    732c:	14649102 	strbtne	r9, [r4], #-258	; 0xfffffefe
    7330:	0000307f 	andeq	r3, r0, pc, ror r0
    7334:	9e040601 	cfmadd32ls	mvax0, mvfx0, mvfx4, mvfx1
    7338:	02000000 	andeq	r0, r0, #0
    733c:	d0156091 	mulsle	r5, r1, r0
    7340:	0100002e 	tsteq	r0, lr, lsr #32
    7344:	009e0408 	addseq	r0, lr, r8, lsl #8
    7348:	91020000 	mrsls	r0, (UNDEF: 2)
    734c:	2f881570 	svccs	0x00881570
    7350:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    7354:	00009e04 	andeq	r9, r0, r4, lsl #28
    7358:	6c910200 	lfmvs	f0, 4, [r1], {0}
    735c:	00309f15 	eorseq	r9, r0, r5, lsl pc
    7360:	04090100 	streq	r0, [r9], #-256	; 0xffffff00
    7364:	0000009e 	muleq	r0, lr, r0
    7368:	15689102 	strbne	r9, [r8, #-258]!	; 0xfffffefe
    736c:	00003e47 	andeq	r3, r0, r7, asr #28
    7370:	2c040a01 			; <UNDEFINED> instruction: 0x2c040a01
    7374:	02000001 	andeq	r0, r0, #1
    7378:	16007791 			; <UNDEFINED> instruction: 0x16007791
    737c:	000031e1 	andeq	r3, r0, r1, ror #3
    7380:	9e043601 	cfmadd32ls	mvax0, mvfx3, mvfx4, mvfx1
    7384:	00000000 	andeq	r0, r0, r0
    7388:	42000000 	andmi	r0, r0, #0
    738c:	01000000 	mrseq	r0, (UNDEF: 0)
    7390:	00099f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    7394:	2f391400 	svccs	0x00391400
    7398:	36010000 	strcc	r0, [r1], -r0
    739c:	00030704 	andeq	r0, r3, r4, lsl #14
    73a0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    73a4:	002ed015 	eoreq	sp, lr, r5, lsl r0
    73a8:	04380100 	ldrteq	r0, [r8], #-256	; 0xffffff00
    73ac:	0000009e 	muleq	r0, lr, r0
    73b0:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    73b4:	00002f88 	andeq	r2, r0, r8, lsl #31
    73b8:	9e043901 	vmlals.f16	s6, s8, s2	; <UNPREDICTABLE>
    73bc:	02000000 	andeq	r0, r0, #0
    73c0:	9f157091 	svcls	0x00157091
    73c4:	01000030 	tsteq	r0, r0, lsr r0
    73c8:	009e0439 	addseq	r0, lr, r9, lsr r4
    73cc:	91020000 	mrsls	r0, (UNDEF: 2)
    73d0:	7016006c 	andsvc	r0, r6, ip, rrx
    73d4:	0100002e 	tsteq	r0, lr, lsr #32
    73d8:	00d4046d 	sbcseq	r0, r4, sp, ror #8
    73dc:	65ac0000 	strvs	r0, [ip, #0]!
    73e0:	00640800 	rsbeq	r0, r4, r0, lsl #16
    73e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    73e8:	00000a05 	andeq	r0, r0, r5, lsl #20
    73ec:	002f3914 	eoreq	r3, pc, r4, lsl r9	; <UNPREDICTABLE>
    73f0:	046d0100 	strbteq	r0, [sp], #-256	; 0xffffff00
    73f4:	00000307 	andeq	r0, r0, r7, lsl #6
    73f8:	14649102 	strbtne	r9, [r4], #-258	; 0xfffffefe
    73fc:	00002f5f 	andeq	r2, r0, pc, asr pc
    7400:	9e046d01 	cdpls	13, 0, cr6, cr4, cr1, {0}
    7404:	02000000 	andeq	r0, r0, #0
    7408:	ae156091 	mrcge	0, 0, r6, cr5, cr1, {4}
    740c:	01000019 	tsteq	r0, r9, lsl r0
    7410:	00d4046f 	sbcseq	r0, r4, pc, ror #8
    7414:	91020000 	mrsls	r0, (UNDEF: 2)
    7418:	302a1577 	eorcc	r1, sl, r7, ror r5
    741c:	70010000 	andvc	r0, r1, r0
    7420:	0000b004 	andeq	fp, r0, r4
    7424:	70910200 	addsvc	r0, r1, r0, lsl #4
    7428:	002ec715 	eoreq	ip, lr, r5, lsl r7
    742c:	04700100 	ldrbteq	r0, [r0], #-256	; 0xffffff00
    7430:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    7434:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    7438:	0030a513 	eorseq	sl, r0, r3, lsl r5
    743c:	04bc0100 	ldrteq	r0, [ip], #256	; 0x100
    7440:	00000000 	andeq	r0, r0, r0
    7444:	0000002c 	andeq	r0, r0, ip, lsr #32
    7448:	0a499c01 	beq	126e454 <_Min_Stack_Size+0x126e254>
    744c:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    7450:	0100002f 	tsteq	r0, pc, lsr #32
    7454:	030704bc 	movweq	r0, #29884	; 0x74bc
    7458:	91020000 	mrsls	r0, (UNDEF: 2)
    745c:	2f5f146c 	svccs	0x005f146c
    7460:	bc010000 	stclt	0, cr0, [r1], {-0}
    7464:	00009e04 	andeq	r9, r0, r4, lsl #28
    7468:	68910200 	ldmvs	r1, {r9}
    746c:	00301915 	eorseq	r1, r0, r5, lsl r9
    7470:	04be0100 	ldrteq	r0, [lr], #256	; 0x100
    7474:	0000009e 	muleq	r0, lr, r0
    7478:	00749102 	rsbseq	r9, r4, r2, lsl #2
    747c:	002f8e16 	eoreq	r8, pc, r6, lsl lr	; <UNPREDICTABLE>
    7480:	04de0100 	ldrbeq	r0, [lr], #256	; 0x100
    7484:	000000e0 	andeq	r0, r0, r0, ror #1
    7488:	00000000 	andeq	r0, r0, r0
    748c:	00000058 	andeq	r0, r0, r8, asr r0
    7490:	0aa09c01 	beq	fe82e49c <BootRAM+0xd79ec3d>
    7494:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    7498:	0100002f 	tsteq	r0, pc, lsr #32
    749c:	030704de 	movweq	r0, #29918	; 0x74de
    74a0:	91020000 	mrsls	r0, (UNDEF: 2)
    74a4:	2ec0146c 	cdpcs	4, 12, cr1, cr0, cr12, {3}
    74a8:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    74ac:	00009e04 	andeq	r9, r0, r4, lsl #28
    74b0:	68910200 	ldmvs	r1, {r9}
    74b4:	0019ae15 	andseq	sl, r9, r5, lsl lr
    74b8:	04e00100 	strbteq	r0, [r0], #256	; 0x100
    74bc:	000000e0 	andeq	r0, r0, r0, ror #1
    74c0:	15779102 	ldrbne	r9, [r7, #-258]!	; 0xfffffefe
    74c4:	00002078 	andeq	r2, r0, r8, ror r0
    74c8:	9e04e101 	mvflss	f6, f1
    74cc:	02000000 	andeq	r0, r0, #0
    74d0:	13007091 	movwne	r7, #145	; 0x91
    74d4:	00002f49 	andeq	r2, r0, r9, asr #30
    74d8:	00051b01 	andeq	r1, r5, r1, lsl #22
    74dc:	2c000000 	stccs	0, cr0, [r0], {-0}
    74e0:	01000000 	mrseq	r0, (UNDEF: 0)
    74e4:	000ae49c 	muleq	sl, ip, r4
    74e8:	2f391400 	svccs	0x00391400
    74ec:	1b010000 	blne	474f4 <_Min_Stack_Size+0x472f4>
    74f0:	00030705 	andeq	r0, r3, r5, lsl #14
    74f4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    74f8:	002ec014 	eoreq	ip, lr, r4, lsl r0
    74fc:	051b0100 	ldreq	r0, [fp, #-256]	; 0xffffff00
    7500:	0000009e 	muleq	r0, lr, r0
    7504:	15689102 	strbne	r9, [r8, #-258]!	; 0xfffffefe
    7508:	00003019 	andeq	r3, r0, r9, lsl r0
    750c:	9e051d01 	cdpls	13, 0, cr1, cr5, cr1, {0}
    7510:	02000000 	andeq	r0, r0, #0
    7514:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    7518:	0000026c 	andeq	r0, r0, ip, ror #4
    751c:	f006ce07 			; <UNDEFINED> instruction: 0xf006ce07
    7520:	0500000a 	streq	r0, [r0, #-10]
    7524:	0000007a 	andeq	r0, r0, sl, ror r0
    7528:	0001f400 	andeq	pc, r1, r0, lsl #8
    752c:	56000400 	strpl	r0, [r0], -r0, lsl #8
    7530:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    7534:	00011101 	andeq	r1, r1, r1, lsl #2
    7538:	32550c00 	subscc	r0, r5, #0, 24
    753c:	09c80000 	stmibeq	r8, {}^	; <UNPREDICTABLE>
    7540:	00000000 	andeq	r0, r0, r0
    7544:	359c0000 	ldrcc	r0, [ip]
    7548:	01020000 	mrseq	r0, (UNDEF: 2)
    754c:	00019206 	andeq	r9, r1, r6, lsl #4
    7550:	00e30300 	rsceq	r0, r3, r0, lsl #6
    7554:	1d020000 	stcne	0, cr0, [r2, #-0]
    7558:	00000033 	andeq	r0, r0, r3, lsr r0
    755c:	90080102 	andls	r0, r8, r2, lsl #2
    7560:	02000001 	andeq	r0, r0, #1
    7564:	00950502 	addseq	r0, r5, r2, lsl #10
    7568:	72030000 	andvc	r0, r3, #0
    756c:	02000000 	andeq	r0, r0, #0
    7570:	00004c2b 	andeq	r4, r0, fp, lsr #24
    7574:	07020200 	streq	r0, [r2, -r0, lsl #4]
    7578:	000001f2 	strdeq	r0, [r0], -r2
    757c:	bd050402 	cfstrslt	mvf0, [r5, #-8]
    7580:	03000000 	movweq	r0, #0
    7584:	00000067 	andeq	r0, r0, r7, rrx
    7588:	00654102 	rsbeq	r4, r5, r2, lsl #2
    758c:	04020000 	streq	r0, [r2], #-0
    7590:	0001c907 	andeq	ip, r1, r7, lsl #18
    7594:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    7598:	000000b8 	strheq	r0, [r0], -r8
    759c:	c4070802 	strgt	r0, [r7], #-2050	; 0xfffff7fe
    75a0:	04000001 	streq	r0, [r0], #-1
    75a4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    75a8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    75ac:	0001ce07 	andeq	ip, r1, r7, lsl #28
    75b0:	00e50300 	rsceq	r0, r5, r0, lsl #6
    75b4:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    75b8:	00000028 	andeq	r0, r0, r8, lsr #32
    75bc:	00007403 	andeq	r7, r0, r3, lsl #8
    75c0:	41240300 			; <UNDEFINED> instruction: 0x41240300
    75c4:	03000000 	movweq	r0, #0
    75c8:	00000069 	andeq	r0, r0, r9, rrx
    75cc:	005a3003 	subseq	r3, sl, r3
    75d0:	04020000 	streq	r0, [r2], #-0
    75d4:	00005907 	andeq	r5, r0, r7, lsl #18
    75d8:	009e0500 	addseq	r0, lr, r0, lsl #10
    75dc:	01060000 	mrseq	r0, (UNDEF: 6)
    75e0:	00000033 	andeq	r0, r0, r3, lsr r0
    75e4:	cf020704 	svcgt	0x00020704
    75e8:	07000000 	streq	r0, [r0, -r0]
    75ec:	00001c74 	andeq	r1, r0, r4, ror ip
    75f0:	45530800 	ldrbmi	r0, [r3, #-2048]	; 0xfffff800
    75f4:	00010054 	andeq	r0, r1, r4, asr r0
    75f8:	002e7709 	eoreq	r7, lr, r9, lsl #14
    75fc:	02070400 	andeq	r0, r7, #0, 8
    7600:	000000b5 	strheq	r0, [r0], -r5
    7604:	1e04100a 	cdpne	0, 0, cr1, cr4, cr10, {0}
    7608:	00011604 	andeq	r1, r1, r4, lsl #12
    760c:	524b0b00 	subpl	r0, fp, #0, 22
    7610:	04200400 	strteq	r0, [r0], #-1024	; 0xfffffc00
    7614:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    7618:	52500b00 	subspl	r0, r0, #0, 22
    761c:	04210400 	strteq	r0, [r1], #-1024	; 0xfffffc00
    7620:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    7624:	4c520b04 	mrrcmi	11, 0, r0, r2, cr4
    7628:	22040052 	andcs	r0, r4, #82	; 0x52
    762c:	0000b004 	andeq	fp, r0, r4
    7630:	530b0800 	movwpl	r0, #47104	; 0xb800
    7634:	23040052 	movwcs	r0, #16466	; 0x4052
    7638:	0000b004 	andeq	fp, r0, r4
    763c:	09000c00 	stmdbeq	r0, {sl, fp}
    7640:	000032ba 			; <UNDEFINED> instruction: 0x000032ba
    7644:	db042404 	blle	11065c <_Min_Stack_Size+0x11045c>
    7648:	0c000000 	stceq	0, cr0, [r0], {-0}
    764c:	00003241 	andeq	r3, r0, r1, asr #4
    7650:	66105c01 	ldrvs	r5, [r0], -r1, lsl #24
    7654:	00200800 	eoreq	r0, r0, r0, lsl #16
    7658:	9c010000 	stcls	0, cr0, [r1], {-0}
    765c:	00000146 	andeq	r0, r0, r6, asr #2
    7660:	00328c0d 	eorseq	r8, r2, sp, lsl #24
    7664:	935c0100 	cmpls	ip, #0, 2
    7668:	02000000 	andeq	r0, r0, #0
    766c:	0c007691 	stceq	6, cr7, [r0], {145}	; 0x91
    7670:	0000320d 	andeq	r3, r0, sp, lsl #4
    7674:	66307001 	ldrtvs	r7, [r0], -r1
    7678:	00200800 	eoreq	r0, r0, r0, lsl #16
    767c:	9c010000 	stcls	0, cr0, [r1], {-0}
    7680:	0000016a 	andeq	r0, r0, sl, ror #2
    7684:	0031fe0d 	eorseq	pc, r1, sp, lsl #28
    7688:	88700100 	ldmdahi	r0!, {r8}^
    768c:	02000000 	andeq	r0, r0, #0
    7690:	0c007791 	stceq	7, cr7, [r0], {145}	; 0x91
    7694:	0000321f 	andeq	r3, r0, pc, lsl r2
    7698:	66507d01 	ldrbvs	r7, [r0], -r1, lsl #26
    769c:	00200800 	eoreq	r0, r0, r0, lsl #16
    76a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    76a4:	0000018e 	andeq	r0, r0, lr, lsl #3
    76a8:	0032270d 	eorseq	r2, r2, sp, lsl #14
    76ac:	937d0100 	cmnls	sp, #0, 2
    76b0:	02000000 	andeq	r0, r0, #0
    76b4:	0e007691 	mcreq	6, 0, r7, cr0, cr1, {4}
    76b8:	0000322e 	andeq	r3, r0, lr, lsr #4
    76bc:	66708a01 	ldrbtvs	r8, [r0], -r1, lsl #20
    76c0:	00180800 	andseq	r0, r8, r0, lsl #16
    76c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    76c8:	0031f20e 	eorseq	pc, r1, lr, lsl #4
    76cc:	88940100 	ldmhi	r4, {r8}
    76d0:	18080066 	stmdane	r8, {r1, r2, r5, r6}
    76d4:	01000000 	mrseq	r0, (UNDEF: 0)
    76d8:	32a70f9c 	adccc	r0, r7, #156, 30	; 0x270
    76dc:	a1010000 	mrsge	r0, (UNDEF: 1)
    76e0:	000000cf 	andeq	r0, r0, pc, asr #1
    76e4:	00000000 	andeq	r0, r0, r0
    76e8:	00000034 	andeq	r0, r0, r4, lsr r0
    76ec:	01e69c01 	mvneq	r9, r1, lsl #24
    76f0:	9d0d0000 	stcls	0, cr0, [sp, #-0]
    76f4:	01000032 	tsteq	r0, r2, lsr r0
    76f8:	000093a1 	andeq	r9, r0, r1, lsr #7
    76fc:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    7700:	0019ae10 	andseq	sl, r9, r0, lsl lr
    7704:	cfa30100 	svcgt	0x00a30100
    7708:	02000000 	andeq	r0, r0, #0
    770c:	11007791 			; <UNDEFINED> instruction: 0x11007791
    7710:	0000026c 	andeq	r0, r0, ip, ror #4
    7714:	f206ce05 	vceq.f32	d12, d6, d5
    7718:	05000001 	streq	r0, [r0, #-1]
    771c:	0000007a 	andeq	r0, r0, sl, ror r0
    7720:	00014800 	andeq	r4, r1, r0, lsl #16
    7724:	59000400 	stmdbpl	r0, {sl}
    7728:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    772c:	00011101 	andeq	r1, r1, r1, lsl #2
    7730:	32d60c00 	sbcscc	r0, r6, #0, 24
    7734:	0a000000 	beq	773c <_Min_Stack_Size+0x753c>
    7738:	00000000 	andeq	r0, r0, r0
    773c:	37400000 	strbcc	r0, [r0, -r0]
    7740:	01020000 	mrseq	r0, (UNDEF: 2)
    7744:	00019206 	andeq	r9, r1, r6, lsl #4
    7748:	08010200 	stmdaeq	r1, {r9}
    774c:	00000190 	muleq	r0, r0, r1
    7750:	95050202 	strls	r0, [r5, #-514]	; 0xfffffdfe
    7754:	02000000 	andeq	r0, r0, #0
    7758:	01f20702 	mvnseq	r0, r2, lsl #14
    775c:	04020000 	streq	r0, [r2], #-0
    7760:	0000bd05 	andeq	fp, r0, r5, lsl #26
    7764:	00670300 	rsbeq	r0, r7, r0, lsl #6
    7768:	41020000 	mrsmi	r0, (UNDEF: 2)
    776c:	0000004f 	andeq	r0, r0, pc, asr #32
    7770:	c9070402 	stmdbgt	r7, {r1, sl}
    7774:	02000001 	andeq	r0, r0, #1
    7778:	00b80508 	adcseq	r0, r8, r8, lsl #10
    777c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7780:	0001c407 	andeq	ip, r1, r7, lsl #8
    7784:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    7788:	00746e69 	rsbseq	r6, r4, r9, ror #28
    778c:	ce070402 	cdpgt	4, 0, cr0, cr7, cr2, {0}
    7790:	03000001 	movweq	r0, #1
    7794:	00000069 	andeq	r0, r0, r9, rrx
    7798:	00443003 	subeq	r3, r4, r3
    779c:	04020000 	streq	r0, [r2], #-0
    77a0:	00005907 	andeq	r5, r0, r7, lsl #18
    77a4:	00720500 	rsbseq	r0, r2, r0, lsl #10
    77a8:	01060000 	mrseq	r0, (UNDEF: 6)
    77ac:	00000028 	andeq	r0, r0, r8, lsr #32
    77b0:	a3020904 	movwge	r0, #10500	; 0x2904
    77b4:	07000000 	streq	r0, [r0, -r0]
    77b8:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    77bc:	04620700 	strbteq	r0, [r2], #-1792	; 0xfffff900
    77c0:	00010000 	andeq	r0, r1, r0
    77c4:	0017d408 	andseq	sp, r7, r8, lsl #8
    77c8:	02090400 	andeq	r0, r9, #0, 8
    77cc:	00000089 	andeq	r0, r0, r9, lsl #1
    77d0:	14040809 	strne	r0, [r4], #-2057	; 0xfffff7f7
    77d4:	0000d203 	andeq	sp, r0, r3, lsl #4
    77d8:	333b0a00 	teqcc	fp, #0, 20
    77dc:	16040000 	strne	r0, [r4], -r0
    77e0:	00008403 	andeq	r8, r0, r3, lsl #8
    77e4:	430b0000 	movwmi	r0, #45056	; 0xb000
    77e8:	17040052 	smlsdne	r4, r2, r0, r0
    77ec:	00008403 	andeq	r8, r0, r3, lsl #8
    77f0:	08000400 	stmdaeq	r0, {sl}
    77f4:	000032c7 	andeq	r3, r0, r7, asr #5
    77f8:	af031804 	svcge	0x00031804
    77fc:	0c000000 	stceq	0, cr0, [r0], {-0}
    7800:	0000331d 	andeq	r3, r0, sp, lsl r3
    7804:	00725401 	rsbseq	r5, r2, r1, lsl #8
    7808:	00000000 	andeq	r0, r0, r0
    780c:	00180000 	andseq	r0, r8, r0
    7810:	9c010000 	stcls	0, cr0, [r1], {-0}
    7814:	0033420c 	eorseq	r4, r3, ip, lsl #4
    7818:	725e0100 	subsvc	r0, lr, #0, 2
    781c:	00000000 	andeq	r0, r0, r0
    7820:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    7824:	01000000 	mrseq	r0, (UNDEF: 0)
    7828:	330f0d9c 	movwcc	r0, #64924	; 0xfd9c
    782c:	86010000 	strhi	r0, [r1], -r0
    7830:	080066a0 	stmdaeq	r0, {r5, r7, r9, sl, sp, lr}
    7834:	0000003c 	andeq	r0, r0, ip, lsr r0
    7838:	013a9c01 	teqeq	sl, r1, lsl #24
    783c:	2d0e0000 	stccs	0, cr0, [lr, #-0]
    7840:	01000033 	tsteq	r0, r3, lsr r0
    7844:	00007286 	andeq	r7, r0, r6, lsl #5
    7848:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    784c:	0017130e 	andseq	r1, r7, lr, lsl #6
    7850:	a3860100 	orrge	r0, r6, #0, 2
    7854:	02000000 	andeq	r0, r0, #0
    7858:	0f007391 	svceq	0x00007391
    785c:	0000026c 	andeq	r0, r0, ip, ror #4
    7860:	4606ce05 	strmi	ip, [r6], -r5, lsl #28
    7864:	05000001 	streq	r0, [r0, #-1]
    7868:	00000064 	andeq	r0, r0, r4, rrx
    786c:	00042600 	andeq	r2, r4, r0, lsl #12
    7870:	39000400 	stmdbcc	r0, {sl}
    7874:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    7878:	00011101 	andeq	r1, r1, r1, lsl #2
    787c:	33d30c00 	bicscc	r0, r3, #0, 24
    7880:	0a200000 	beq	807888 <_Min_Stack_Size+0x807688>
    7884:	00000000 	andeq	r0, r0, r0
    7888:	38af0000 	stmiacc	pc!, {}	; <UNPREDICTABLE>
    788c:	01020000 	mrseq	r0, (UNDEF: 2)
    7890:	00019206 	andeq	r9, r1, r6, lsl #4
    7894:	00e30300 	rsceq	r0, r3, r0, lsl #6
    7898:	1d030000 	stcne	0, cr0, [r3, #-0]
    789c:	00000033 	andeq	r0, r0, r3, lsr r0
    78a0:	90080102 	andls	r0, r8, r2, lsl #2
    78a4:	02000001 	andeq	r0, r0, #1
    78a8:	00950502 	addseq	r0, r5, r2, lsl #10
    78ac:	72030000 	andvc	r0, r3, #0
    78b0:	03000000 	movweq	r0, #0
    78b4:	00004c2b 	andeq	r4, r0, fp, lsr #24
    78b8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    78bc:	000001f2 	strdeq	r0, [r0], -r2
    78c0:	bd050402 	cfstrslt	mvf0, [r5, #-8]
    78c4:	03000000 	movweq	r0, #0
    78c8:	00000067 	andeq	r0, r0, r7, rrx
    78cc:	00654103 	rsbeq	r4, r5, r3, lsl #2
    78d0:	04020000 	streq	r0, [r2], #-0
    78d4:	0001c907 	andeq	ip, r1, r7, lsl #18
    78d8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    78dc:	000000b8 	strheq	r0, [r0], -r8
    78e0:	c4070802 	strgt	r0, [r7], #-2050	; 0xfffff7fe
    78e4:	04000001 	streq	r0, [r0], #-1
    78e8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    78ec:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    78f0:	0001ce07 	andeq	ip, r1, r7, lsl #28
    78f4:	00e50300 	rsceq	r0, r5, r0, lsl #6
    78f8:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    78fc:	00000028 	andeq	r0, r0, r8, lsr #32
    7900:	00007403 	andeq	r7, r0, r3, lsl #8
    7904:	41240400 			; <UNDEFINED> instruction: 0x41240400
    7908:	03000000 	movweq	r0, #0
    790c:	00000069 	andeq	r0, r0, r9, rrx
    7910:	005a3004 	subseq	r3, sl, r4
    7914:	04020000 	streq	r0, [r2], #-0
    7918:	00005907 	andeq	r5, r0, r7, lsl #18
    791c:	009e0500 	addseq	r0, lr, r0, lsl #10
    7920:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
    7924:	06000000 	streq	r0, [r0], -r0
    7928:	a79b0174 			; <UNDEFINED> instruction: 0xa79b0174
    792c:	07000001 	streq	r0, [r0, -r1]
    7930:	00000087 	andeq	r0, r0, r7, lsl #1
    7934:	01a79d01 			; <UNDEFINED> instruction: 0x01a79d01
    7938:	07000000 	streq	r0, [r0, -r0]
    793c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7940:	00b09e01 	adcseq	r9, r0, r1, lsl #28
    7944:	07040000 	streq	r0, [r4, -r0]
    7948:	00000205 	andeq	r0, r0, r5, lsl #4
    794c:	00b09f01 	adcseq	r9, r0, r1, lsl #30
    7950:	07080000 	streq	r0, [r8, -r0]
    7954:	0000019e 	muleq	r0, lr, r1
    7958:	00b0a001 	adcseq	sl, r0, r1
    795c:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    7960:	00524353 	subseq	r4, r2, r3, asr r3
    7964:	00b0a101 	adcseq	sl, r0, r1, lsl #2
    7968:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
    796c:	00524343 	subseq	r4, r2, r3, asr #6
    7970:	00b0a201 	adcseq	sl, r0, r1, lsl #4
    7974:	08140000 	ldmdaeq	r4, {}	; <UNPREDICTABLE>
    7978:	00504853 	subseq	r4, r0, r3, asr r8
    797c:	01bca301 			; <UNDEFINED> instruction: 0x01bca301
    7980:	07180000 	ldreq	r0, [r8, -r0]
    7984:	000001db 	ldrdeq	r0, [r0], -fp
    7988:	00b0a401 	adcseq	sl, r0, r1, lsl #8
    798c:	07240000 	streq	r0, [r4, -r0]!
    7990:	000000f2 	strdeq	r0, [r0], -r2
    7994:	00b0a501 	adcseq	sl, r0, r1, lsl #10
    7998:	07280000 	streq	r0, [r8, -r0]!
    799c:	0000023a 	andeq	r0, r0, sl, lsr r2
    79a0:	00b0a601 	adcseq	sl, r0, r1, lsl #12
    79a4:	072c0000 	streq	r0, [ip, -r0]!
    79a8:	00000225 	andeq	r0, r0, r5, lsr #4
    79ac:	00b0a701 	adcseq	sl, r0, r1, lsl #14
    79b0:	07300000 	ldreq	r0, [r0, -r0]!
    79b4:	000001e1 	andeq	r0, r0, r1, ror #3
    79b8:	00b0a801 	adcseq	sl, r0, r1, lsl #16
    79bc:	07340000 	ldreq	r0, [r4, -r0]!
    79c0:	000000c6 	andeq	r0, r0, r6, asr #1
    79c4:	00b0a901 	adcseq	sl, r0, r1, lsl #18
    79c8:	07380000 	ldreq	r0, [r8, -r0]!
    79cc:	00000250 	andeq	r0, r0, r0, asr r2
    79d0:	00b0aa01 	adcseq	sl, r0, r1, lsl #20
    79d4:	083c0000 	ldmdaeq	ip!, {}	; <UNPREDICTABLE>
    79d8:	00524650 	subseq	r4, r2, r0, asr r6
    79dc:	01d6ab01 	bicseq	sl, r6, r1, lsl #22
    79e0:	08400000 	stmdaeq	r0, {}^	; <UNPREDICTABLE>
    79e4:	00524644 	subseq	r4, r2, r4, asr #12
    79e8:	01a7ac01 			; <UNDEFINED> instruction: 0x01a7ac01
    79ec:	08480000 	stmdaeq	r8, {}^	; <UNPREDICTABLE>
    79f0:	00524441 	subseq	r4, r2, r1, asr #8
    79f4:	01a7ad01 			; <UNDEFINED> instruction: 0x01a7ad01
    79f8:	074c0000 	strbeq	r0, [ip, -r0]
    79fc:	0000023f 	andeq	r0, r0, pc, lsr r2
    7a00:	01f0ae01 	mvnseq	sl, r1, lsl #28
    7a04:	07500000 	ldrbeq	r0, [r0, -r0]
    7a08:	00000220 	andeq	r0, r0, r0, lsr #4
    7a0c:	020aaf01 	andeq	sl, sl, #1, 30
    7a10:	00600000 	rsbeq	r0, r0, r0
    7a14:	0000b009 	andeq	fp, r0, r9
    7a18:	00b50a00 	adcseq	r0, r5, r0, lsl #20
    7a1c:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
    7a20:	a90b0000 	stmdbge	fp, {}	; <UNPREDICTABLE>
    7a24:	0b000000 	bleq	7a2c <_Min_Stack_Size+0x782c>
    7a28:	01ac0500 			; <UNDEFINED> instruction: 0x01ac0500
    7a2c:	a70a0000 	strge	r0, [sl, -r0]
    7a30:	d1000001 	tstle	r0, r1
    7a34:	0b000001 	bleq	7a40 <_Min_Stack_Size+0x7840>
    7a38:	000000a9 	andeq	r0, r0, r9, lsr #1
    7a3c:	c1050001 	tstgt	r5, r1
    7a40:	09000001 	stmdbeq	r0, {r0}
    7a44:	000001d1 	ldrdeq	r0, [r0], -r1
    7a48:	0001a70a 	andeq	sl, r1, sl, lsl #14
    7a4c:	0001eb00 	andeq	lr, r1, r0, lsl #22
    7a50:	00a90b00 	adceq	r0, r9, r0, lsl #22
    7a54:	00030000 	andeq	r0, r3, r0
    7a58:	0001db05 	andeq	sp, r1, r5, lsl #22
    7a5c:	01eb0900 	mvneq	r0, r0, lsl #18
    7a60:	a70a0000 	strge	r0, [sl, -r0]
    7a64:	05000001 	streq	r0, [r0, #-1]
    7a68:	0b000002 	bleq	7a78 <_Min_Stack_Size+0x7878>
    7a6c:	000000a9 	andeq	r0, r0, r9, lsr #1
    7a70:	f5050004 			; <UNDEFINED> instruction: 0xf5050004
    7a74:	09000001 	stmdbeq	r0, {r0}
    7a78:	00000205 	andeq	r0, r0, r5, lsl #4
    7a7c:	0001a403 	andeq	sl, r1, r3, lsl #8
    7a80:	bab00100 	blt	fec07e88 <BootRAM+0xdb78629>
    7a84:	0c000000 	stceq	0, cr0, [r0], {-0}
    7a88:	00003301 	andeq	r3, r0, r1, lsl #6
    7a8c:	02070500 	andeq	r0, r7, #0, 10
    7a90:	00000234 	andeq	r0, r0, r4, lsr r2
    7a94:	001c740d 	andseq	r7, ip, sp, lsl #8
    7a98:	530e0000 	movwpl	r0, #57344	; 0xe000
    7a9c:	01005445 	tsteq	r0, r5, asr #8
    7aa0:	2e770f00 	cdpcs	15, 7, cr0, cr7, cr0, {0}
    7aa4:	07050000 	streq	r0, [r5, -r0]
    7aa8:	00021a02 	andeq	r1, r2, r2, lsl #20
    7aac:	33010c00 	movwcc	r0, #7168	; 0x1c00
    7ab0:	05000000 	streq	r0, [r0, #-0]
    7ab4:	025a0209 	subseq	r0, sl, #-1879048192	; 0x90000000
    7ab8:	f00d0000 			; <UNDEFINED> instruction: 0xf00d0000
    7abc:	00000002 	andeq	r0, r0, r2
    7ac0:	0004620d 	andeq	r6, r4, sp, lsl #4
    7ac4:	0f000100 	svceq	0x00000100
    7ac8:	000017d4 	ldrdeq	r1, [r0], -r4
    7acc:	40020905 	andmi	r0, r2, r5, lsl #18
    7ad0:	10000002 	andne	r0, r0, r2
    7ad4:	042a0508 	strteq	r0, [sl], #-1288	; 0xfffffaf8
    7ad8:	00000289 	andeq	r0, r0, r9, lsl #5
    7adc:	00524311 	subseq	r4, r2, r1, lsl r3
    7ae0:	b0042c05 	andlt	r2, r4, r5, lsl #24
    7ae4:	00000000 	andeq	r0, r0, r0
    7ae8:	52534311 	subspl	r4, r3, #1140850688	; 0x44000000
    7aec:	042d0500 	strteq	r0, [sp], #-1280	; 0xfffffb00
    7af0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    7af4:	6d0f0004 	stcvs	0, cr0, [pc, #-16]	; 7aec <_Min_Stack_Size+0x78ec>
    7af8:	05000033 	streq	r0, [r0, #-51]	; 0xffffffcd
    7afc:	0266042e 	rsbeq	r0, r6, #771751936	; 0x2e000000
    7b00:	3a120000 	bcc	487b08 <_Min_Stack_Size+0x487908>
    7b04:	01000034 	tsteq	r0, r4, lsr r0
    7b08:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    7b0c:	000e0000 	andeq	r0, lr, r0
    7b10:	9c010000 	stcls	0, cr0, [r1], {-0}
    7b14:	00343412 	eorseq	r3, r4, r2, lsl r4
    7b18:	04bc0100 	ldrteq	r0, [ip], #256	; 0x100
    7b1c:	00000000 	andeq	r0, r0, r0
    7b20:	0000000e 	andeq	r0, r0, lr
    7b24:	9b139c01 	blls	4eeb30 <_Min_Stack_Size+0x4ee930>
    7b28:	02000033 	andeq	r0, r0, #51	; 0x33
    7b2c:	00000070 	andeq	r0, r0, r0, ror r0
    7b30:	00001c00 	andeq	r1, r0, r0, lsl #24
    7b34:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    7b38:	00003379 	andeq	r3, r0, r9, ror r3
    7b3c:	66dc7c02 	ldrbvs	r7, [ip], r2, lsl #24
    7b40:	00200800 	eoreq	r0, r0, r0, lsl #16
    7b44:	9c010000 	stcls	0, cr0, [r1], {-0}
    7b48:	000002ee 	andeq	r0, r0, lr, ror #5
    7b4c:	00171315 	andseq	r1, r7, r5, lsl r3
    7b50:	5a7c0200 	bpl	1f08358 <_Min_Stack_Size+0x1f08158>
    7b54:	02000002 	andeq	r0, r0, #2
    7b58:	14007791 	strne	r7, [r0], #-1937	; 0xfffff86f
    7b5c:	00003409 	andeq	r3, r0, r9, lsl #8
    7b60:	00008902 	andeq	r8, r0, r2, lsl #18
    7b64:	00200000 	eoreq	r0, r0, r0
    7b68:	9c010000 	stcls	0, cr0, [r1], {-0}
    7b6c:	00000312 	andeq	r0, r0, r2, lsl r3
    7b70:	00171315 	andseq	r1, r7, r5, lsl r3
    7b74:	5a890200 	bpl	fe24837c <BootRAM+0xd1b8b1d>
    7b78:	02000002 	andeq	r0, r0, #2
    7b7c:	14007791 	strne	r7, [r0], #-1937	; 0xfffff86f
    7b80:	00003421 	andeq	r3, r0, r1, lsr #8
    7b84:	00009e02 	andeq	r9, r0, r2, lsl #28
    7b88:	00380000 	eorseq	r0, r8, r0
    7b8c:	9c010000 	stcls	0, cr0, [r1], {-0}
    7b90:	00000344 	andeq	r0, r0, r4, asr #6
    7b94:	00341415 	eorseq	r1, r4, r5, lsl r4
    7b98:	9e9e0200 	cdpls	2, 9, cr0, cr14, cr0, {0}
    7b9c:	02000000 	andeq	r0, r0, #0
    7ba0:	a7166c91 			; <UNDEFINED> instruction: 0xa7166c91
    7ba4:	02000019 	andeq	r0, r0, #25
    7ba8:	00009ea0 	andeq	r9, r0, r0, lsr #29
    7bac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    7bb0:	33b41400 			; <UNDEFINED> instruction: 0x33b41400
    7bb4:	b2020000 	andlt	r0, r2, #0
    7bb8:	00000000 	andeq	r0, r0, r0
    7bbc:	00000020 	andeq	r0, r0, r0, lsr #32
    7bc0:	03689c01 	cmneq	r8, #256	; 0x100
    7bc4:	13150000 	tstne	r5, #0
    7bc8:	02000017 	andeq	r0, r0, #23
    7bcc:	00025ab2 			; <UNDEFINED> instruction: 0x00025ab2
    7bd0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    7bd4:	33521700 	cmpcc	r2, #0, 14
    7bd8:	c5020000 	strgt	r0, [r2, #-0]
    7bdc:	00000000 	andeq	r0, r0, r0
    7be0:	00000064 	andeq	r0, r0, r4, rrx
    7be4:	03a89c01 			; <UNDEFINED> instruction: 0x03a89c01
    7be8:	c5150000 	ldrgt	r0, [r5, #-0]
    7bec:	02000033 	andeq	r0, r0, #51	; 0x33
    7bf0:	00009ec5 	andeq	r9, r0, r5, asr #29
    7bf4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    7bf8:	0033a615 	eorseq	sl, r3, r5, lsl r6
    7bfc:	88c50200 	stmiahi	r5, {r9}^
    7c00:	02000000 	andeq	r0, r0, #0
    7c04:	a7166b91 			; <UNDEFINED> instruction: 0xa7166b91
    7c08:	02000019 	andeq	r0, r0, #25
    7c0c:	00009ec7 	andeq	r9, r0, r7, asr #29
    7c10:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    7c14:	34401300 	strbcc	r1, [r0], #-768	; 0xfffffd00
    7c18:	ec020000 	stc	0, cr0, [r2], {-0}
    7c1c:	00000000 	andeq	r0, r0, r0
    7c20:	00000038 	andeq	r0, r0, r8, lsr r0
    7c24:	55189c01 	ldrpl	r9, [r8, #-3073]	; 0xfffff3ff
    7c28:	02000034 	andeq	r0, r0, #52	; 0x34
    7c2c:	02340105 	eorseq	r0, r4, #1073741825	; 0x40000001
    7c30:	00000000 	andeq	r0, r0, r0
    7c34:	00340000 	eorseq	r0, r4, r0
    7c38:	9c010000 	stcls	0, cr0, [r1], {-0}
    7c3c:	000003f2 	strdeq	r0, [r0], -r2
    7c40:	00336419 	eorseq	r6, r3, r9, lsl r4
    7c44:	01050200 	mrseq	r0, SP_usr
    7c48:	0000009e 	muleq	r0, lr, r0
    7c4c:	1a6c9102 	bne	1b2c05c <_Min_Stack_Size+0x1b2be5c>
    7c50:	000019ae 	andeq	r1, r0, lr, lsr #19
    7c54:	34010702 	strcc	r0, [r1], #-1794	; 0xfffff8fe
    7c58:	02000002 	andeq	r0, r0, #2
    7c5c:	1b007791 	blne	25aa8 <_Min_Stack_Size+0x258a8>
    7c60:	0000338d 	andeq	r3, r0, sp, lsl #7
    7c64:	00011f02 	andeq	r1, r1, r2, lsl #30
    7c68:	24000000 	strcs	r0, [r0], #-0
    7c6c:	01000000 	mrseq	r0, (UNDEF: 0)
    7c70:	0004189c 	muleq	r4, ip, r8
    7c74:	33641900 	cmncc	r4, #0, 18
    7c78:	1f020000 	svcne	0x00020000
    7c7c:	00009e01 	andeq	r9, r0, r1, lsl #28
    7c80:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    7c84:	026c1c00 	rsbeq	r1, ip, #0, 24
    7c88:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    7c8c:	00042406 	andeq	r2, r4, r6, lsl #8
    7c90:	007a0500 	rsbseq	r0, sl, r0, lsl #10
    7c94:	8b000000 	blhi	7c9c <_Min_Stack_Size+0x7a9c>
    7c98:	04000007 	streq	r0, [r0], #-7
    7c9c:	0019e600 	andseq	lr, r9, r0, lsl #12
    7ca0:	11010400 	tstne	r1, r0, lsl #8
    7ca4:	0c000001 	stceq	0, cr0, [r0], {1}
    7ca8:	00003473 	andeq	r3, r0, r3, ror r4
    7cac:	00000a80 	andeq	r0, r0, r0, lsl #21
    7cb0:	00000000 	andeq	r0, r0, r0
    7cb4:	00003acd 	andeq	r3, r0, sp, asr #21
    7cb8:	92060102 	andls	r0, r6, #-2147483648	; 0x80000000
    7cbc:	03000001 	movweq	r0, #1
    7cc0:	000000e3 	andeq	r0, r0, r3, ror #1
    7cc4:	00331d02 	eorseq	r1, r3, r2, lsl #26
    7cc8:	01020000 	mrseq	r0, (UNDEF: 2)
    7ccc:	00019008 	andeq	r9, r1, r8
    7cd0:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    7cd4:	00000095 	muleq	r0, r5, r0
    7cd8:	00007203 	andeq	r7, r0, r3, lsl #4
    7cdc:	4c2b0200 	sfmmi	f0, 4, [fp], #-0
    7ce0:	02000000 	andeq	r0, r0, #0
    7ce4:	01f20702 	mvnseq	r0, r2, lsl #14
    7ce8:	04020000 	streq	r0, [r2], #-0
    7cec:	0000bd05 	andeq	fp, r0, r5, lsl #26
    7cf0:	00670300 	rsbeq	r0, r7, r0, lsl #6
    7cf4:	41020000 	mrsmi	r0, (UNDEF: 2)
    7cf8:	00000065 	andeq	r0, r0, r5, rrx
    7cfc:	c9070402 	stmdbgt	r7, {r1, sl}
    7d00:	02000001 	andeq	r0, r0, #1
    7d04:	00b80508 	adcseq	r0, r8, r8, lsl #10
    7d08:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7d0c:	0001c407 	andeq	ip, r1, r7, lsl #8
    7d10:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    7d14:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7d18:	ce070402 	cdpgt	4, 0, cr0, cr7, cr2, {0}
    7d1c:	03000001 	movweq	r0, #1
    7d20:	000000e5 	andeq	r0, r0, r5, ror #1
    7d24:	00281803 	eoreq	r1, r8, r3, lsl #16
    7d28:	74030000 	strvc	r0, [r3], #-0
    7d2c:	03000000 	movweq	r0, #0
    7d30:	00004124 	andeq	r4, r0, r4, lsr #2
    7d34:	00690300 	rsbeq	r0, r9, r0, lsl #6
    7d38:	30030000 	andcc	r0, r3, r0
    7d3c:	0000005a 	andeq	r0, r0, sl, asr r0
    7d40:	59070402 	stmdbpl	r7, {r1, sl}
    7d44:	05000000 	streq	r0, [r0, #-0]
    7d48:	0000009e 	muleq	r0, lr, r0
    7d4c:	00009305 	andeq	r9, r0, r5, lsl #6
    7d50:	33010600 	movwcc	r0, #5632	; 0x1600
    7d54:	04000000 	streq	r0, [r0], #-0
    7d58:	00d40207 	sbcseq	r0, r4, r7, lsl #4
    7d5c:	74070000 	strvc	r0, [r7], #-0
    7d60:	0000001c 	andeq	r0, r0, ip, lsl r0
    7d64:	54455308 	strbpl	r5, [r5], #-776	; 0xfffffcf8
    7d68:	09000100 	stmdbeq	r0, {r8}
    7d6c:	00002e77 	andeq	r2, r0, r7, ror lr
    7d70:	ba020704 	blt	89988 <_Min_Stack_Size+0x89788>
    7d74:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7d78:	00002f95 	muleq	r0, r5, pc	; <UNPREDICTABLE>
    7d7c:	ba020704 	blt	89994 <_Min_Stack_Size+0x89794>
    7d80:	06000000 	streq	r0, [r0], -r0
    7d84:	00003301 	andeq	r3, r0, r1, lsl #6
    7d88:	02090400 	andeq	r0, r9, #0, 8
    7d8c:	00000106 	andeq	r0, r0, r6, lsl #2
    7d90:	0002f007 	andeq	pc, r2, r7
    7d94:	62070000 	andvs	r0, r7, #0
    7d98:	01000004 	tsteq	r0, r4
    7d9c:	17d40900 	ldrbne	r0, [r4, r0, lsl #18]
    7da0:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    7da4:	0000ec02 	andeq	lr, r0, r2, lsl #24
    7da8:	04c00a00 	strbeq	r0, [r0], #2560	; 0xa00
    7dac:	05ba023a 	ldreq	r0, [sl, #570]!	; 0x23a
    7db0:	c20b0000 	andgt	r0, fp, #0
    7db4:	04000003 	streq	r0, [r0], #-3
    7db8:	009e023c 	addseq	r0, lr, ip, lsr r2
    7dbc:	0c000000 	stceq	0, cr0, [r0], {-0}
    7dc0:	00315244 	eorseq	r5, r1, r4, asr #4
    7dc4:	b5023d04 	strlt	r3, [r2, #-3332]	; 0xfffff2fc
    7dc8:	04000000 	streq	r0, [r0], #-0
    7dcc:	0003cc0b 	andeq	ip, r3, fp, lsl #24
    7dd0:	023e0400 	eorseq	r0, lr, #0, 8
    7dd4:	00000093 	muleq	r0, r3, r0
    7dd8:	52440c06 	subpl	r0, r4, #1536	; 0x600
    7ddc:	3f040032 	svccc	0x00040032
    7de0:	0000b502 	andeq	fp, r0, r2, lsl #10
    7de4:	d60b0800 	strle	r0, [fp], -r0, lsl #16
    7de8:	04000003 	streq	r0, [r0], #-3
    7dec:	00930240 	addseq	r0, r3, r0, asr #4
    7df0:	0c0a0000 	stceq	0, cr0, [sl], {-0}
    7df4:	00335244 	eorseq	r5, r3, r4, asr #4
    7df8:	b5024104 	strlt	r4, [r2, #-260]	; 0xfffffefc
    7dfc:	0c000000 	stceq	0, cr0, [r0], {-0}
    7e00:	0002ab0b 	andeq	sl, r2, fp, lsl #22
    7e04:	02420400 	subeq	r0, r2, #0, 8
    7e08:	00000093 	muleq	r0, r3, r0
    7e0c:	52440c0e 	subpl	r0, r4, #3584	; 0xe00
    7e10:	43040034 	movwmi	r0, #16436	; 0x4034
    7e14:	0000b502 	andeq	fp, r0, r2, lsl #10
    7e18:	ea0b1000 	b	2cbe20 <_Min_Stack_Size+0x2cbc20>
    7e1c:	04000003 	streq	r0, [r0], #-3
    7e20:	00930244 	addseq	r0, r3, r4, asr #4
    7e24:	0c120000 	ldceq	0, cr0, [r2], {-0}
    7e28:	00355244 	eorseq	r5, r5, r4, asr #4
    7e2c:	b5024504 	strlt	r4, [r2, #-1284]	; 0xfffffafc
    7e30:	14000000 	strne	r0, [r0], #-0
    7e34:	0003f40b 	andeq	pc, r3, fp, lsl #8
    7e38:	02460400 	subeq	r0, r6, #0, 8
    7e3c:	00000093 	muleq	r0, r3, r0
    7e40:	52440c16 	subpl	r0, r4, #5632	; 0x1600
    7e44:	47040036 	smladxmi	r4, r6, r0, r0
    7e48:	0000b502 	andeq	fp, r0, r2, lsl #10
    7e4c:	d70b1800 	strle	r1, [fp, -r0, lsl #16]
    7e50:	04000002 	streq	r0, [r0], #-2
    7e54:	00930248 	addseq	r0, r3, r8, asr #4
    7e58:	0c1a0000 	ldceq	0, cr0, [sl], {-0}
    7e5c:	00375244 	eorseq	r5, r7, r4, asr #4
    7e60:	b5024904 	strlt	r4, [r2, #-2308]	; 0xfffff6fc
    7e64:	1c000000 	stcne	0, cr0, [r0], {-0}
    7e68:	0004150b 	andeq	r1, r4, fp, lsl #10
    7e6c:	024a0400 	subeq	r0, sl, #0, 8
    7e70:	00000093 	muleq	r0, r3, r0
    7e74:	52440c1e 	subpl	r0, r4, #7680	; 0x1e00
    7e78:	4b040038 	blmi	107f60 <_Min_Stack_Size+0x107d60>
    7e7c:	0000b502 	andeq	fp, r0, r2, lsl #10
    7e80:	1f0b2000 	svcne	0x000b2000
    7e84:	04000004 	streq	r0, [r0], #-4
    7e88:	0093024c 	addseq	r0, r3, ip, asr #4
    7e8c:	0c220000 	stceq	0, cr0, [r2], #-0
    7e90:	00395244 	eorseq	r5, r9, r4, asr #4
    7e94:	b5024d04 	strlt	r4, [r2, #-3332]	; 0xfffff2fc
    7e98:	24000000 	strcs	r0, [r0], #-0
    7e9c:	002a510b 	eoreq	r5, sl, fp, lsl #2
    7ea0:	024e0400 	subeq	r0, lr, #0, 8
    7ea4:	00000093 	muleq	r0, r3, r0
    7ea8:	35ad0b26 	strcc	r0, [sp, #2854]!	; 0xb26
    7eac:	4f040000 	svcmi	0x00040000
    7eb0:	0000b502 	andeq	fp, r0, r2, lsl #10
    7eb4:	130b2800 	movwne	r2, #47104	; 0xb800
    7eb8:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    7ebc:	00930250 	addseq	r0, r3, r0, asr r2
    7ec0:	0b2a0000 	bleq	a87ec8 <_Min_Stack_Size+0xa87cc8>
    7ec4:	0000368c 	andeq	r3, r0, ip, lsl #13
    7ec8:	b5025104 	strlt	r5, [r2, #-260]	; 0xfffffefc
    7ecc:	2c000000 	stccs	0, cr0, [r0], {-0}
    7ed0:	00251e0b 	eoreq	r1, r5, fp, lsl #28
    7ed4:	02520400 	subseq	r0, r2, #0, 8
    7ed8:	00000093 	muleq	r0, r3, r0
    7edc:	52430c2e 	subpl	r0, r3, #11776	; 0x2e00
    7ee0:	02530400 	subseq	r0, r3, #0, 8
    7ee4:	000000b5 	strheq	r0, [r0], -r5
    7ee8:	25290b30 	strcs	r0, [r9, #-2864]!	; 0xfffff4d0
    7eec:	54040000 	strpl	r0, [r4], #-0
    7ef0:	00009302 	andeq	r9, r0, r2, lsl #6
    7ef4:	430c3200 	movwmi	r3, #49664	; 0xc200
    7ef8:	04005253 	streq	r5, [r0], #-595	; 0xfffffdad
    7efc:	00b50255 	adcseq	r0, r5, r5, asr r2
    7f00:	0b340000 	bleq	d07f08 <_Min_Stack_Size+0xd07d08>
    7f04:	00002534 	andeq	r2, r0, r4, lsr r5
    7f08:	ba025604 	blt	9d720 <_Min_Stack_Size+0x9d520>
    7f0c:	36000005 	strcc	r0, [r0], -r5
    7f10:	0035b20b 	eorseq	fp, r5, fp, lsl #4
    7f14:	02570400 	subseq	r0, r7, #0, 8
    7f18:	000000b5 	strheq	r0, [r0], -r5
    7f1c:	253f0b40 	ldrcs	r0, [pc, #-2880]!	; 73e4 <_Min_Stack_Size+0x71e4>
    7f20:	58040000 	stmdapl	r4, {}	; <UNPREDICTABLE>
    7f24:	00009302 	andeq	r9, r0, r2, lsl #6
    7f28:	b70b4200 	strlt	r4, [fp, -r0, lsl #4]
    7f2c:	04000035 	streq	r0, [r0], #-53	; 0xffffffcb
    7f30:	00b50259 	adcseq	r0, r5, r9, asr r2
    7f34:	0b440000 	bleq	1107f3c <_Min_Stack_Size+0x1107d3c>
    7f38:	0000254a 	andeq	r2, r0, sl, asr #10
    7f3c:	93025a04 	movwls	r5, #10756	; 0x2a04
    7f40:	46000000 	strmi	r0, [r0], -r0
    7f44:	0035bc0b 	eorseq	fp, r5, fp, lsl #24
    7f48:	025b0400 	subseq	r0, fp, #0, 8
    7f4c:	000000b5 	strheq	r0, [r0], -r5
    7f50:	25550b48 	ldrbcs	r0, [r5, #-2888]	; 0xfffff4b8
    7f54:	5c040000 	stcpl	0, cr0, [r4], {-0}
    7f58:	00009302 	andeq	r9, r0, r2, lsl #6
    7f5c:	c10b4a00 	tstgt	fp, r0, lsl #20
    7f60:	04000035 	streq	r0, [r0], #-53	; 0xffffffcb
    7f64:	00b5025d 	adcseq	r0, r5, sp, asr r2
    7f68:	0b4c0000 	bleq	1307f70 <_Min_Stack_Size+0x1307d70>
    7f6c:	00002560 	andeq	r2, r0, r0, ror #10
    7f70:	93025e04 	movwls	r5, #11780	; 0x2e04
    7f74:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    7f78:	0035c60b 	eorseq	ip, r5, fp, lsl #12
    7f7c:	025f0400 	subseq	r0, pc, #0, 8
    7f80:	000000b5 	strheq	r0, [r0], -r5
    7f84:	256b0b50 	strbcs	r0, [fp, #-2896]!	; 0xfffff4b0
    7f88:	60040000 	andvs	r0, r4, r0
    7f8c:	00009302 	andeq	r9, r0, r2, lsl #6
    7f90:	cb0b5200 	blgt	2dc798 <_Min_Stack_Size+0x2dc598>
    7f94:	04000035 	streq	r0, [r0], #-53	; 0xffffffcb
    7f98:	00b50261 	adcseq	r0, r5, r1, ror #4
    7f9c:	0b540000 	bleq	1507fa4 <_Min_Stack_Size+0x1507da4>
    7fa0:	00002576 	andeq	r2, r0, r6, ror r5
    7fa4:	93026204 	movwls	r6, #8708	; 0x2204
    7fa8:	56000000 	strpl	r0, [r0], -r0
    7fac:	0035d00b 	eorseq	sp, r5, fp
    7fb0:	02630400 	rsbeq	r0, r3, #0, 8
    7fb4:	000000b5 	strheq	r0, [r0], -r5
    7fb8:	36aa0b58 	ssatcc	r0, #11, r8, asr #22
    7fbc:	64040000 	strvs	r0, [r4], #-0
    7fc0:	00009302 	andeq	r9, r0, r2, lsl #6
    7fc4:	d50b5a00 	strle	r5, [fp, #-2560]	; 0xfffff600
    7fc8:	04000035 	streq	r0, [r0], #-53	; 0xffffffcb
    7fcc:	00b50265 	adcseq	r0, r5, r5, ror #4
    7fd0:	0b5c0000 	bleq	1707fd8 <_Min_Stack_Size+0x1707dd8>
    7fd4:	000036b5 			; <UNDEFINED> instruction: 0x000036b5
    7fd8:	93026604 	movwls	r6, #9732	; 0x2604
    7fdc:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    7fe0:	0035da0b 	eorseq	sp, r5, fp, lsl #20
    7fe4:	02670400 	rsbeq	r0, r7, #0, 8
    7fe8:	000000b5 	strheq	r0, [r0], -r5
    7fec:	36c00b60 	strbcc	r0, [r0], r0, ror #22
    7ff0:	68040000 	stmdavs	r4, {}	; <UNPREDICTABLE>
    7ff4:	00009302 	andeq	r9, r0, r2, lsl #6
    7ff8:	f00b6200 			; <UNDEFINED> instruction: 0xf00b6200
    7ffc:	04000035 	streq	r0, [r0], #-53	; 0xffffffcb
    8000:	00b50269 	adcseq	r0, r5, r9, ror #4
    8004:	0b640000 	bleq	190800c <_Min_Stack_Size+0x1907e0c>
    8008:	000036cb 	andeq	r3, r0, fp, asr #13
    800c:	93026a04 	movwls	r6, #10756	; 0x2a04
    8010:	66000000 	strvs	r0, [r0], -r0
    8014:	0035f50b 	eorseq	pc, r5, fp, lsl #10
    8018:	026b0400 	rsbeq	r0, fp, #0, 8
    801c:	000000b5 	strheq	r0, [r0], -r5
    8020:	36d60b68 	ldrbcc	r0, [r6], r8, ror #22
    8024:	6c040000 	stcvs	0, cr0, [r4], {-0}
    8028:	00009302 	andeq	r9, r0, r2, lsl #6
    802c:	fa0b6a00 	blx	2e2834 <_Min_Stack_Size+0x2e2634>
    8030:	04000035 	streq	r0, [r0], #-53	; 0xffffffcb
    8034:	00b5026d 	adcseq	r0, r5, sp, ror #4
    8038:	0b6c0000 	bleq	1b08040 <_Min_Stack_Size+0x1b07e40>
    803c:	000036e1 	andeq	r3, r0, r1, ror #13
    8040:	93026e04 	movwls	r6, #11780	; 0x2e04
    8044:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    8048:	0035ff0b 	eorseq	pc, r5, fp, lsl #30
    804c:	026f0400 	rsbeq	r0, pc, #0, 8
    8050:	000000b5 	strheq	r0, [r0], -r5
    8054:	36ec0b70 			; <UNDEFINED> instruction: 0x36ec0b70
    8058:	70040000 	andvc	r0, r4, r0
    805c:	00009302 	andeq	r9, r0, r2, lsl #6
    8060:	040b7200 	streq	r7, [fp], #-512	; 0xfffffe00
    8064:	04000036 	streq	r0, [r0], #-54	; 0xffffffca
    8068:	00b50271 	adcseq	r0, r5, r1, ror r2
    806c:	0b740000 	bleq	1d08074 <_Min_Stack_Size+0x1d07e74>
    8070:	000036f7 	strdeq	r3, [r0], -r7
    8074:	93027204 	movwls	r7, #8708	; 0x2204
    8078:	76000000 	strvc	r0, [r0], -r0
    807c:	0036090b 	eorseq	r0, r6, fp, lsl #18
    8080:	02730400 	rsbseq	r0, r3, #0, 8
    8084:	000000b5 	strheq	r0, [r0], -r5
    8088:	37020b78 	smlsdxcc	r2, r8, fp, r0
    808c:	74040000 	strvc	r0, [r4], #-0
    8090:	00009302 	andeq	r9, r0, r2, lsl #6
    8094:	0e0b7a00 	vmlaeq.f32	s14, s22, s0
    8098:	04000036 	streq	r0, [r0], #-54	; 0xffffffca
    809c:	00b50275 	adcseq	r0, r5, r5, ror r2
    80a0:	0b7c0000 	bleq	1f080a8 <_Min_Stack_Size+0x1f07ea8>
    80a4:	0000370d 	andeq	r3, r0, sp, lsl #14
    80a8:	93027604 	movwls	r7, #9732	; 0x2604
    80ac:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    80b0:	0036130b 	eorseq	r1, r6, fp, lsl #6
    80b4:	02770400 	rsbseq	r0, r7, #0, 8
    80b8:	000000b5 	strheq	r0, [r0], -r5
    80bc:	37180b80 	ldrcc	r0, [r8, -r0, lsl #23]
    80c0:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
    80c4:	00009302 	andeq	r9, r0, r2, lsl #6
    80c8:	180b8200 	stmdane	fp, {r9, pc}
    80cc:	04000036 	streq	r0, [r0], #-54	; 0xffffffca
    80d0:	00b50279 	adcseq	r0, r5, r9, ror r2
    80d4:	0b840000 	bleq	fe1080dc <BootRAM+0xd07887d>
    80d8:	00003723 	andeq	r3, r0, r3, lsr #14
    80dc:	93027a04 	movwls	r7, #10756	; 0x2a04
    80e0:	86000000 	strhi	r0, [r0], -r0
    80e4:	00361d0b 	eorseq	r1, r6, fp, lsl #26
    80e8:	027b0400 	rsbseq	r0, fp, #0, 8
    80ec:	000000b5 	strheq	r0, [r0], -r5
    80f0:	372e0b88 	strcc	r0, [lr, -r8, lsl #23]!
    80f4:	7c040000 	stcvc	0, cr0, [r4], {-0}
    80f8:	00009302 	andeq	r9, r0, r2, lsl #6
    80fc:	2d0b8a00 	vstrcs	s16, [fp, #-0]
    8100:	04000036 	streq	r0, [r0], #-54	; 0xffffffca
    8104:	00b5027d 	adcseq	r0, r5, sp, ror r2
    8108:	0b8c0000 	bleq	fe308110 <BootRAM+0xd2788b1>
    810c:	00003739 	andeq	r3, r0, r9, lsr r7
    8110:	93027e04 	movwls	r7, #11780	; 0x2e04
    8114:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    8118:	0036320b 	eorseq	r3, r6, fp, lsl #4
    811c:	027f0400 	rsbseq	r0, pc, #0, 8
    8120:	000000b5 	strheq	r0, [r0], -r5
    8124:	37440b90 			; <UNDEFINED> instruction: 0x37440b90
    8128:	80040000 	andhi	r0, r4, r0
    812c:	00009302 	andeq	r9, r0, r2, lsl #6
    8130:	370b9200 	strcc	r9, [fp, -r0, lsl #4]
    8134:	04000036 	streq	r0, [r0], #-54	; 0xffffffca
    8138:	00b50281 	adcseq	r0, r5, r1, lsl #5
    813c:	0b940000 	bleq	fe508144 <BootRAM+0xd4788e5>
    8140:	0000374f 	andeq	r3, r0, pc, asr #14
    8144:	93028204 	movwls	r8, #8708	; 0x2204
    8148:	96000000 	strls	r0, [r0], -r0
    814c:	00363c0b 	eorseq	r3, r6, fp, lsl #24
    8150:	02830400 	addeq	r0, r3, #0, 8
    8154:	000000b5 	strheq	r0, [r0], -r5
    8158:	375a0b98 			; <UNDEFINED> instruction: 0x375a0b98
    815c:	84040000 	strhi	r0, [r4], #-0
    8160:	00009302 	andeq	r9, r0, r2, lsl #6
    8164:	410b9a00 	tstmi	fp, r0, lsl #20
    8168:	04000036 	streq	r0, [r0], #-54	; 0xffffffca
    816c:	00b50285 	adcseq	r0, r5, r5, lsl #5
    8170:	0b9c0000 	bleq	fe708178 <BootRAM+0xd678919>
    8174:	00003765 	andeq	r3, r0, r5, ror #14
    8178:	93028604 	movwls	r8, #9732	; 0x2604
    817c:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    8180:	0036460b 	eorseq	r4, r6, fp, lsl #12
    8184:	02870400 	addeq	r0, r7, #0, 8
    8188:	000000b5 	strheq	r0, [r0], -r5
    818c:	37700ba0 	ldrbcc	r0, [r0, -r0, lsr #23]!
    8190:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
    8194:	00009302 	andeq	r9, r0, r2, lsl #6
    8198:	4b0ba200 	blmi	2f09a0 <_Min_Stack_Size+0x2f07a0>
    819c:	04000036 	streq	r0, [r0], #-54	; 0xffffffca
    81a0:	00b50289 	adcseq	r0, r5, r9, lsl #5
    81a4:	0ba40000 	bleq	fe9081ac <BootRAM+0xd87894d>
    81a8:	0000377b 	andeq	r3, r0, fp, ror r7
    81ac:	93028a04 	movwls	r8, #10756	; 0x2a04
    81b0:	a6000000 	strge	r0, [r0], -r0
    81b4:	0036500b 	eorseq	r5, r6, fp
    81b8:	028b0400 	addeq	r0, fp, #0, 8
    81bc:	000000b5 	strheq	r0, [r0], -r5
    81c0:	34a90ba8 	strtcc	r0, [r9], #2984	; 0xba8
    81c4:	8c040000 	stchi	0, cr0, [r4], {-0}
    81c8:	00009302 	andeq	r9, r0, r2, lsl #6
    81cc:	550baa00 	strpl	sl, [fp, #-2560]	; 0xfffff600
    81d0:	04000036 	streq	r0, [r0], #-54	; 0xffffffca
    81d4:	00b5028d 	adcseq	r0, r5, sp, lsl #5
    81d8:	0bac0000 	bleq	feb081e0 <BootRAM+0xda78981>
    81dc:	000034b4 			; <UNDEFINED> instruction: 0x000034b4
    81e0:	93028e04 	movwls	r8, #11780	; 0x2e04
    81e4:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    81e8:	00365a0b 	eorseq	r5, r6, fp, lsl #20
    81ec:	028f0400 	addeq	r0, pc, #0, 8
    81f0:	000000b5 	strheq	r0, [r0], -r5
    81f4:	34bf0bb0 	ldrtcc	r0, [pc], #2992	; 81fc <_Min_Stack_Size+0x7ffc>
    81f8:	90040000 	andls	r0, r4, r0
    81fc:	00009302 	andeq	r9, r0, r2, lsl #6
    8200:	820bb200 	andhi	fp, fp, #0, 4
    8204:	04000036 	streq	r0, [r0], #-54	; 0xffffffca
    8208:	00b50291 	umlalseq	r0, r5, r1, r2
    820c:	0bb40000 	bleq	fed08214 <BootRAM+0xdc789b5>
    8210:	000034ca 	andeq	r3, r0, sl, asr #9
    8214:	93029204 	movwls	r9, #8708	; 0x2204
    8218:	b6000000 	strlt	r0, [r0], -r0
    821c:	0035a80b 	eorseq	sl, r5, fp, lsl #16
    8220:	02930400 	addseq	r0, r3, #0, 8
    8224:	000000b5 	strheq	r0, [r0], -r5
    8228:	34d50bb8 	ldrbcc	r0, [r5], #3000	; 0xbb8
    822c:	94040000 	strls	r0, [r4], #-0
    8230:	00009302 	andeq	r9, r0, r2, lsl #6
    8234:	870bba00 	strhi	fp, [fp, -r0, lsl #20]
    8238:	04000036 	streq	r0, [r0], #-54	; 0xffffffca
    823c:	00b50295 	umlalseq	r0, r5, r5, r2
    8240:	0bbc0000 	bleq	fef08248 <BootRAM+0xde789e9>
    8244:	00003622 	andeq	r3, r0, r2, lsr #12
    8248:	93029604 	movwls	r9, #9732	; 0x2604
    824c:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    8250:	00930d00 	addseq	r0, r3, r0, lsl #26
    8254:	05ca0000 	strbeq	r0, [sl]
    8258:	a90e0000 	stmdbge	lr, {}	; <UNPREDICTABLE>
    825c:	04000000 	streq	r0, [r0], #-0
    8260:	34670900 	strbtcc	r0, [r7], #-2304	; 0xfffff700
    8264:	97040000 	strls	r0, [r4, -r0]
    8268:	00011202 	andeq	r1, r1, r2, lsl #4
    826c:	34e70f00 	strbtcc	r0, [r7], #3840	; 0xf00
    8270:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    8274:	080066fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, sp, lr}
    8278:	00000014 	andeq	r0, r0, r4, lsl r0
    827c:	4d109c01 	ldcmi	12, cr9, [r0, #-4]
    8280:	01000035 	tsteq	r0, r5, lsr r0
    8284:	00000086 	andeq	r0, r0, r6, lsl #1
    8288:	00002000 	andeq	r2, r0, r0
    828c:	0b9c0100 	bleq	fe708694 <BootRAM+0xd678e35>
    8290:	11000006 	tstne	r0, r6
    8294:	00003595 	muleq	r0, r5, r5
    8298:	00938601 	addseq	r8, r3, r1, lsl #12
    829c:	91020000 	mrsls	r0, (UNDEF: 2)
    82a0:	df100076 	svcle	0x00100076
    82a4:	01000035 	tsteq	r0, r5, lsr r0
    82a8:	00000093 	muleq	r0, r3, r0
    82ac:	00002000 	andeq	r2, r0, r0
    82b0:	2f9c0100 	svccs	0x009c0100
    82b4:	11000006 	tstne	r0, r6
    82b8:	00001713 	andeq	r1, r0, r3, lsl r7
    82bc:	01069301 	tsteq	r6, r1, lsl #6
    82c0:	91020000 	mrsls	r0, (UNDEF: 2)
    82c4:	75100077 	ldrvc	r0, [r0, #-119]	; 0xffffff89
    82c8:	01000036 	tsteq	r0, r6, lsr r0
    82cc:	000000a0 	andeq	r0, r0, r0, lsr #1
    82d0:	00002000 	andeq	r2, r0, r0
    82d4:	539c0100 	orrspl	r0, ip, #0, 2
    82d8:	11000006 	tstne	r0, r6
    82dc:	00001713 	andeq	r1, r0, r3, lsl r7
    82e0:	0106a001 	tsteq	r6, r1
    82e4:	91020000 	mrsls	r0, (UNDEF: 2)
    82e8:	1b100077 	blne	4084cc <_Min_Stack_Size+0x4082cc>
    82ec:	01000035 	tsteq	r0, r5, lsr r0
    82f0:	000000b4 	strheq	r0, [r0], -r4
    82f4:	00003800 	andeq	r3, r0, r0, lsl #16
    82f8:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
    82fc:	11000006 	tstne	r0, r6
    8300:	00003566 	andeq	r3, r0, r6, ror #10
    8304:	0093b401 	addseq	fp, r3, r1, lsl #8
    8308:	91020000 	mrsls	r0, (UNDEF: 2)
    830c:	19a7126e 	stmibne	r7!, {r1, r2, r3, r5, r6, r9, ip}
    8310:	b6010000 	strlt	r0, [r1], -r0
    8314:	00000093 	muleq	r0, r3, r0
    8318:	00769102 	rsbseq	r9, r6, r2, lsl #2
    831c:	00357a10 	eorseq	r7, r5, r0, lsl sl
    8320:	00c90100 	sbceq	r0, r9, r0, lsl #2
    8324:	3c000000 	stccc	0, cr0, [r0], {-0}
    8328:	01000000 	mrseq	r0, (UNDEF: 0)
    832c:	0006b79c 	muleq	r6, ip, r7
    8330:	35841100 	strcc	r1, [r4, #256]	; 0x100
    8334:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    8338:	00000088 	andeq	r0, r0, r8, lsl #1
    833c:	126f9102 	rsbne	r9, pc, #-2147483648	; 0x80000000
    8340:	000019a7 	andeq	r1, r0, r7, lsr #19
    8344:	0093cb01 	addseq	ip, r3, r1, lsl #22
    8348:	91020000 	mrsls	r0, (UNDEF: 2)
    834c:	92100076 	andsls	r0, r0, #118	; 0x76
    8350:	01000036 	tsteq	r0, r6, lsr r0
    8354:	000000de 	ldrdeq	r0, [r0], -lr
    8358:	00003800 	andeq	r3, r0, r0, lsl #16
    835c:	f79c0100 			; <UNDEFINED> instruction: 0xf79c0100
    8360:	11000006 	tstne	r0, r6
    8364:	000034e0 	andeq	r3, r0, r0, ror #9
    8368:	0093de01 	addseq	sp, r3, r1, lsl #28
    836c:	91020000 	mrsls	r0, (UNDEF: 2)
    8370:	4077116e 	rsbsmi	r1, r7, lr, ror #2
    8374:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    8378:	00000093 	muleq	r0, r3, r0
    837c:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    8380:	00706d74 	rsbseq	r6, r0, r4, ror sp
    8384:	00b0e001 	adcseq	lr, r0, r1
    8388:	91020000 	mrsls	r0, (UNDEF: 2)
    838c:	f2140074 	vqadd.s16	q0, q2, q10
    8390:	01000034 	tsteq	r0, r4, lsr r0
    8394:	000093f1 	strdeq	r9, [r0], -r1
    8398:	00000000 	andeq	r0, r0, r0
    839c:	00003000 	andeq	r3, r0, r0
    83a0:	2d9c0100 	ldfcss	f0, [ip]
    83a4:	11000007 	tstne	r0, r7
    83a8:	000034e0 	andeq	r3, r0, r0, ror #9
    83ac:	0093f101 	addseq	pc, r3, r1, lsl #2
    83b0:	91020000 	mrsls	r0, (UNDEF: 2)
    83b4:	6d74136e 	ldclvs	3, cr1, [r4, #-440]!	; 0xfffffe48
    83b8:	f3010070 	vqadd.u8	q0, <illegal reg q0.5>, q8
    83bc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    83c0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    83c4:	00350915 	eorseq	r0, r5, r5, lsl r9
    83c8:	01030100 	mrseq	r0, (UNDEF: 19)
    83cc:	000000d4 	ldrdeq	r0, [r0], -r4
    83d0:	00000000 	andeq	r0, r0, r0
    83d4:	00000018 	andeq	r0, r0, r8, lsl r0
    83d8:	3f169c01 	svccc	0x00169c01
    83dc:	01000035 	tsteq	r0, r5, lsr r0
    83e0:	0000010d 	andeq	r0, r0, sp, lsl #2
    83e4:	00200000 	eoreq	r0, r0, r0
    83e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    83ec:	00352f15 	eorseq	r2, r5, r5, lsl pc
    83f0:	01180100 	tsteq	r8, r0, lsl #2
    83f4:	000000e0 	andeq	r0, r0, r0, ror #1
    83f8:	00000000 	andeq	r0, r0, r0
    83fc:	00000018 	andeq	r0, r0, r8, lsl r0
    8400:	5f169c01 	svcpl	0x00169c01
    8404:	01000036 	tsteq	r0, r6, lsr r0
    8408:	00000122 	andeq	r0, r0, r2, lsr #2
    840c:	00200000 	eoreq	r0, r0, r0
    8410:	9c010000 	stcls	0, cr0, [r1], {-0}
    8414:	00026c17 	andeq	r6, r2, r7, lsl ip
    8418:	06ce0500 	strbeq	r0, [lr], r0, lsl #10
    841c:	00000789 	andeq	r0, r0, r9, lsl #15
    8420:	00007a05 	andeq	r7, r0, r5, lsl #20
    8424:	04220000 	strteq	r0, [r2], #-0
    8428:	00040000 	andeq	r0, r4, r0
    842c:	00001b4b 	andeq	r1, r0, fp, asr #22
    8430:	01110104 	tsteq	r1, r4, lsl #2
    8434:	970c0000 	strls	r0, [ip, -r0]
    8438:	e8000037 	stmda	r0, {r0, r1, r2, r4, r5}
    843c:	0000000a 	andeq	r0, r0, sl
    8440:	e7000000 	str	r0, [r0, -r0]
    8444:	0200003c 	andeq	r0, r0, #60	; 0x3c
    8448:	01920601 	orrseq	r0, r2, r1, lsl #12
    844c:	e3030000 	movw	r0, #12288	; 0x3000
    8450:	02000000 	andeq	r0, r0, #0
    8454:	0000331d 	andeq	r3, r0, sp, lsl r3
    8458:	08010200 	stmdaeq	r1, {r9}
    845c:	00000190 	muleq	r0, r0, r1
    8460:	95050202 	strls	r0, [r5, #-514]	; 0xfffffdfe
    8464:	03000000 	movweq	r0, #0
    8468:	00000072 	andeq	r0, r0, r2, ror r0
    846c:	004c2b02 	subeq	r2, ip, r2, lsl #22
    8470:	02020000 	andeq	r0, r2, #0
    8474:	0001f207 	andeq	pc, r1, r7, lsl #4
    8478:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    847c:	000000bd 	strheq	r0, [r0], -sp
    8480:	00006703 	andeq	r6, r0, r3, lsl #14
    8484:	65410200 	strbvs	r0, [r1, #-512]	; 0xfffffe00
    8488:	02000000 	andeq	r0, r0, #0
    848c:	01c90704 	biceq	r0, r9, r4, lsl #14
    8490:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    8494:	0000b805 	andeq	fp, r0, r5, lsl #16
    8498:	07080200 	streq	r0, [r8, -r0, lsl #4]
    849c:	000001c4 	andeq	r0, r0, r4, asr #3
    84a0:	69050404 	stmdbvs	r5, {r2, sl}
    84a4:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    84a8:	01ce0704 	biceq	r0, lr, r4, lsl #14
    84ac:	e5030000 	str	r0, [r3, #-0]
    84b0:	03000000 	movweq	r0, #0
    84b4:	00002818 	andeq	r2, r0, r8, lsl r8
    84b8:	00740300 	rsbseq	r0, r4, r0, lsl #6
    84bc:	24030000 	strcs	r0, [r3], #-0
    84c0:	00000041 	andeq	r0, r0, r1, asr #32
    84c4:	00006903 	andeq	r6, r0, r3, lsl #18
    84c8:	5a300300 	bpl	c090d0 <_Min_Stack_Size+0xc08ed0>
    84cc:	02000000 	andeq	r0, r0, #0
    84d0:	00590704 	subseq	r0, r9, r4, lsl #14
    84d4:	93050000 	movwls	r0, #20480	; 0x5000
    84d8:	06000000 	streq	r0, [r0], -r0
    84dc:	00003301 	andeq	r3, r0, r1, lsl #6
    84e0:	02070400 	andeq	r0, r7, #0, 8
    84e4:	000000cf 	andeq	r0, r0, pc, asr #1
    84e8:	001c7407 	andseq	r7, ip, r7, lsl #8
    84ec:	53080000 	movwpl	r0, #32768	; 0x8000
    84f0:	01005445 	tsteq	r0, r5, asr #8
    84f4:	2e770900 	vaddcs.f16	s1, s14, s0	; <UNPREDICTABLE>
    84f8:	07040000 	streq	r0, [r4, -r0]
    84fc:	0000b502 	andeq	fp, r0, r2, lsl #10
    8500:	2f950900 	svccs	0x00950900
    8504:	07040000 	streq	r0, [r4, -r0]
    8508:	0000b502 	andeq	fp, r0, r2, lsl #10
    850c:	33010600 	movwcc	r0, #5632	; 0x1600
    8510:	04000000 	streq	r0, [r0], #-0
    8514:	01010209 	tsteq	r1, r9, lsl #4
    8518:	f0070000 			; <UNDEFINED> instruction: 0xf0070000
    851c:	00000002 	andeq	r0, r0, r2
    8520:	00046207 	andeq	r6, r4, r7, lsl #4
    8524:	09000100 	stmdbeq	r0, {r8}
    8528:	000017d4 	ldrdeq	r1, [r0], -r4
    852c:	e7020904 	str	r0, [r2, -r4, lsl #18]
    8530:	0a000000 	beq	8538 <_Min_Stack_Size+0x8338>
    8534:	04500428 	ldrbeq	r0, [r0], #-1064	; 0xfffffbd8
    8538:	0000021b 	andeq	r0, r0, fp, lsl r2
    853c:	4852430b 	ldmdami	r2, {r0, r1, r3, r8, r9, lr}^
    8540:	04520400 	ldrbeq	r0, [r2], #-1024	; 0xfffffc00
    8544:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    8548:	03c20c00 	biceq	r0, r2, #0, 24
    854c:	53040000 	movwpl	r0, #16384	; 0x4000
    8550:	00009304 	andeq	r9, r0, r4, lsl #6
    8554:	430b0200 	movwmi	r0, #45568	; 0xb200
    8558:	04004c52 	streq	r4, [r0], #-3154	; 0xfffff3ae
    855c:	00b00454 	adcseq	r0, r0, r4, asr r4
    8560:	0c040000 	stceq	0, cr0, [r4], {-0}
    8564:	000003cc 	andeq	r0, r0, ip, asr #7
    8568:	93045504 	movwls	r5, #17668	; 0x4504
    856c:	06000000 	streq	r0, [r0], -r0
    8570:	0038850c 	eorseq	r8, r8, ip, lsl #10
    8574:	04560400 	ldrbeq	r0, [r6], #-1024	; 0xfffffc00
    8578:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    857c:	03d60c08 	bicseq	r0, r6, #8, 24	; 0x800
    8580:	57040000 	strpl	r0, [r4, -r0]
    8584:	00009304 	andeq	r9, r0, r4, lsl #6
    8588:	8a0c0a00 	bhi	30ad90 <_Min_Stack_Size+0x30ab90>
    858c:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
    8590:	00b00458 	adcseq	r0, r0, r8, asr r4
    8594:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    8598:	000002ab 	andeq	r0, r0, fp, lsr #5
    859c:	93045904 	movwls	r5, #18692	; 0x4904
    85a0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    85a4:	0037da0c 	eorseq	sp, r7, ip, lsl #20
    85a8:	045a0400 	ldrbeq	r0, [sl], #-1024	; 0xfffffc00
    85ac:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    85b0:	03ea0c10 	mvneq	r0, #16, 24	; 0x1000
    85b4:	5b040000 	blpl	1085bc <_Min_Stack_Size+0x1083bc>
    85b8:	00009304 	andeq	r9, r0, r4, lsl #6
    85bc:	df0c1200 	svcle	0x000c1200
    85c0:	04000037 	streq	r0, [r0], #-55	; 0xffffffc9
    85c4:	00b0045c 	adcseq	r0, r0, ip, asr r4
    85c8:	0c140000 	ldceq	0, cr0, [r4], {-0}
    85cc:	000003f4 	strdeq	r0, [r0], -r4
    85d0:	93045d04 	movwls	r5, #19716	; 0x4d04
    85d4:	16000000 	strne	r0, [r0], -r0
    85d8:	0038c80c 	eorseq	ip, r8, ip, lsl #16
    85dc:	045e0400 	ldrbeq	r0, [lr], #-1024	; 0xfffffc00
    85e0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    85e4:	02d70c18 	sbcseq	r0, r7, #24, 24	; 0x1800
    85e8:	5f040000 	svcpl	0x00040000
    85ec:	00009304 	andeq	r9, r0, r4, lsl #6
    85f0:	ee0c1a00 	vmla.f32	s2, s24, s0
    85f4:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
    85f8:	00b00460 	adcseq	r0, r0, r0, ror #8
    85fc:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    8600:	00000415 	andeq	r0, r0, r5, lsl r4
    8604:	93046104 	movwls	r6, #16644	; 0x4104
    8608:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    860c:	0039020c 	eorseq	r0, r9, ip, lsl #4
    8610:	04620400 	strbteq	r0, [r2], #-1024	; 0xfffffc00
    8614:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    8618:	041f0c20 	ldreq	r0, [pc], #-3104	; 8620 <_Min_Stack_Size+0x8420>
    861c:	63040000 	movwvs	r0, #16384	; 0x4000
    8620:	00009304 	andeq	r9, r0, r4, lsl #6
    8624:	070c2200 	streq	r2, [ip, -r0, lsl #4]
    8628:	04000039 	streq	r0, [r0], #-57	; 0xffffffc7
    862c:	00b00464 	adcseq	r0, r0, r4, ror #8
    8630:	0c240000 	stceq	0, cr0, [r4], #-0
    8634:	00002a51 	andeq	r2, r0, r1, asr sl
    8638:	93046504 	movwls	r6, #17668	; 0x4504
    863c:	26000000 	strcs	r0, [r0], -r0
    8640:	38bc0900 	ldmcc	ip!, {r8, fp}
    8644:	66040000 	strvs	r0, [r4], -r0
    8648:	00010d04 	andeq	r0, r1, r4, lsl #26
    864c:	37cd0d00 	strbcc	r0, [sp, r0, lsl #26]
    8650:	5a010000 	bpl	48658 <_Min_Stack_Size+0x48458>
    8654:	00000000 	andeq	r0, r0, r0
    8658:	0000004c 	andeq	r0, r0, ip, asr #32
    865c:	02599c01 	subseq	r9, r9, #256	; 0x100
    8660:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    8664:	01000039 	tsteq	r0, r9, lsr r0
    8668:	0000935a 	andeq	r9, r0, sl, asr r3
    866c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    8670:	0017130e 	andseq	r1, r7, lr, lsl #6
    8674:	015a0100 	cmpeq	sl, r0, lsl #2
    8678:	02000001 	andeq	r0, r0, #1
    867c:	0f007591 	svceq	0x00007591
    8680:	000038da 	ldrdeq	r3, [r0], -sl
    8684:	67106f01 	ldrvs	r6, [r0, -r1, lsl #30]
    8688:	00200800 	eoreq	r0, r0, r0, lsl #16
    868c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8690:	0038a90f 	eorseq	sl, r8, pc, lsl #18
    8694:	307a0100 	rsbscc	r0, sl, r0, lsl #2
    8698:	20080067 	andcs	r0, r8, r7, rrx
    869c:	01000000 	mrseq	r0, (UNDEF: 0)
    86a0:	38f3109c 	ldmcc	r3!, {r2, r3, r4, r7, ip}^
    86a4:	85010000 	strhi	r0, [r1, #-0]
    86a8:	0000009e 	muleq	r0, lr, r0
    86ac:	00000000 	andeq	r0, r0, r0
    86b0:	0000002c 	andeq	r0, r0, ip, lsr #32
    86b4:	02a39c01 	adceq	r9, r3, #256	; 0x100
    86b8:	74110000 	ldrvc	r0, [r1], #-0
    86bc:	0100706d 	tsteq	r0, sp, rrx
    86c0:	00009387 	andeq	r9, r0, r7, lsl #7
    86c4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    86c8:	38011200 	stmdacc	r1, {r9, ip}
    86cc:	91010000 	mrsls	r0, (UNDEF: 1)
    86d0:	00000000 	andeq	r0, r0, r0
    86d4:	00000030 	andeq	r0, r0, r0, lsr r0
    86d8:	02c79c01 	sbceq	r9, r7, #256	; 0x100
    86dc:	e40e0000 	str	r0, [lr], #-0
    86e0:	01000037 	tsteq	r0, r7, lsr r0
    86e4:	00009e91 	muleq	r0, r1, lr
    86e8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    86ec:	37861200 	strcc	r1, [r6, r0, lsl #4]
    86f0:	a0010000 	andge	r0, r1, r0
    86f4:	08006750 	stmdaeq	r0, {r4, r6, r8, r9, sl, sp, lr}
    86f8:	00000034 	andeq	r0, r0, r4, lsr r0
    86fc:	02eb9c01 	rsceq	r9, fp, #256	; 0x100
    8700:	8f0e0000 	svchi	0x000e0000
    8704:	01000038 	tsteq	r0, r8, lsr r0
    8708:	00009ea0 	andeq	r9, r0, r0, lsr #29
    870c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    8710:	38cd1200 	stmiacc	sp, {r9, ip}^
    8714:	b2010000 	andlt	r0, r1, #0
    8718:	00000000 	andeq	r0, r0, r0
    871c:	00000030 	andeq	r0, r0, r0, lsr r0
    8720:	030f9c01 	movweq	r9, #64513	; 0xfc01
    8724:	9e0e0000 	cdpls	0, 0, cr0, cr14, cr0, {0}
    8728:	01000038 	tsteq	r0, r8, lsr r0
    872c:	00009eb2 			; <UNDEFINED> instruction: 0x00009eb2
    8730:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    8734:	38501000 	ldmdacc	r0, {ip}^
    8738:	c1010000 	mrsgt	r0, (UNDEF: 1)
    873c:	0000009e 	muleq	r0, lr, r0
    8740:	00000000 	andeq	r0, r0, r0
    8744:	00000038 	andeq	r0, r0, r8, lsr r0
    8748:	03379c01 	teqeq	r7, #256	; 0x100
    874c:	74110000 	ldrvc	r0, [r1], #-0
    8750:	0100706d 	tsteq	r0, sp, rrx
    8754:	00009ec3 	andeq	r9, r0, r3, asr #29
    8758:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    875c:	385f0f00 	ldmdacc	pc, {r8, r9, sl, fp}^	; <UNPREDICTABLE>
    8760:	cf010000 	svcgt	0x00010000
    8764:	08006784 	stmdaeq	r0, {r2, r7, r8, r9, sl, sp, lr}
    8768:	00000020 	andeq	r0, r0, r0, lsr #32
    876c:	3d0f9c01 	stccc	12, cr9, [pc, #-4]	; 8770 <_Min_Stack_Size+0x8570>
    8770:	01000038 	tsteq	r0, r8, lsr r0
    8774:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    8778:	00003000 	andeq	r3, r0, r0
    877c:	109c0100 	addsne	r0, ip, r0, lsl #2
    8780:	00003873 	andeq	r3, r0, r3, ror r8
    8784:	00cff401 	sbceq	pc, pc, r1, lsl #8
    8788:	00000000 	andeq	r0, r0, r0
    878c:	00380000 	eorseq	r0, r8, r0
    8790:	9c010000 	stcls	0, cr0, [r1], {-0}
    8794:	0000038f 	andeq	r0, r0, pc, lsl #7
    8798:	00381e0e 	eorseq	r1, r8, lr, lsl #28
    879c:	93f40100 	mvnsls	r0, #0, 2
    87a0:	02000000 	andeq	r0, r0, #0
    87a4:	ae136e91 	mrcge	14, 0, r6, cr3, cr1, {4}
    87a8:	01000019 	tsteq	r0, r9, lsl r0
    87ac:	0000cff6 	strdeq	ip, [r0], -r6
    87b0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    87b4:	38101400 	ldmdacc	r0, {sl, ip}
    87b8:	11010000 	mrsne	r0, (UNDEF: 1)
    87bc:	00000001 	andeq	r0, r0, r1
    87c0:	00002c00 	andeq	r2, r0, r0, lsl #24
    87c4:	b59c0100 	ldrlt	r0, [ip, #256]	; 0x100
    87c8:	15000003 	strne	r0, [r0, #-3]
    87cc:	0000381e 	andeq	r3, r0, lr, lsl r8
    87d0:	93011101 	movwls	r1, #4353	; 0x1101
    87d4:	02000000 	andeq	r0, r0, #0
    87d8:	16007691 			; <UNDEFINED> instruction: 0x16007691
    87dc:	000037f1 	strdeq	r3, [r0], -r1
    87e0:	db012301 	blle	513ec <_Min_Stack_Size+0x511ec>
    87e4:	00000000 	andeq	r0, r0, r0
    87e8:	50000000 	andpl	r0, r0, r0
    87ec:	01000000 	mrseq	r0, (UNDEF: 0)
    87f0:	0003ee9c 	muleq	r3, ip, lr
    87f4:	390c1500 	stmdbcc	ip, {r8, sl, ip}
    87f8:	23010000 	movwcs	r0, #4096	; 0x1000
    87fc:	00009301 	andeq	r9, r0, r1, lsl #6
    8800:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    8804:	0019ae17 	andseq	sl, r9, r7, lsl lr
    8808:	01250100 			; <UNDEFINED> instruction: 0x01250100
    880c:	000000db 	ldrdeq	r0, [r0], -fp
    8810:	00779102 	rsbseq	r9, r7, r2, lsl #2
    8814:	00382714 	eorseq	r2, r8, r4, lsl r7
    8818:	013e0100 	teqeq	lr, r0, lsl #2
    881c:	00000000 	andeq	r0, r0, r0
    8820:	0000002c 	andeq	r0, r0, ip, lsr #32
    8824:	04149c01 	ldreq	r9, [r4], #-3073	; 0xfffff3ff
    8828:	0c150000 	ldceq	0, cr0, [r5], {-0}
    882c:	01000039 	tsteq	r0, r9, lsr r0
    8830:	0093013e 	addseq	r0, r3, lr, lsr r1
    8834:	91020000 	mrsls	r0, (UNDEF: 2)
    8838:	6c180076 	ldcvs	0, cr0, [r8], {118}	; 0x76
    883c:	05000002 	streq	r0, [r0, #-2]
    8840:	042006ce 	strteq	r0, [r0], #-1742	; 0xfffff932
    8844:	7a050000 	bvc	14884c <_Min_Stack_Size+0x14864c>
    8848:	00000000 	andeq	r0, r0, r0
    884c:	000003c4 	andeq	r0, r0, r4, asr #7
    8850:	1cda0004 	ldclne	0, cr0, [sl], {4}
    8854:	01040000 	mrseq	r0, (UNDEF: 4)
    8858:	00000111 	andeq	r0, r0, r1, lsl r1
    885c:	00398b0c 	eorseq	r8, r9, ip, lsl #22
    8860:	000b6000 	andeq	r6, fp, r0
    8864:	00000000 	andeq	r0, r0, r0
    8868:	003f4600 	eorseq	r4, pc, r0, lsl #12
    886c:	06010200 	streq	r0, [r1], -r0, lsl #4
    8870:	00000192 	muleq	r0, r2, r1
    8874:	90080102 	andls	r0, r8, r2, lsl #2
    8878:	02000001 	andeq	r0, r0, #1
    887c:	00950502 	addseq	r0, r5, r2, lsl #10
    8880:	72030000 	andvc	r0, r3, #0
    8884:	02000000 	andeq	r0, r0, #0
    8888:	0000412b 	andeq	r4, r0, fp, lsr #2
    888c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    8890:	000001f2 	strdeq	r0, [r0], -r2
    8894:	bd050402 	cfstrslt	mvf0, [r5, #-8]
    8898:	03000000 	movweq	r0, #0
    889c:	00000067 	andeq	r0, r0, r7, rrx
    88a0:	005a4102 	subseq	r4, sl, r2, lsl #2
    88a4:	04020000 	streq	r0, [r2], #-0
    88a8:	0001c907 	andeq	ip, r1, r7, lsl #18
    88ac:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    88b0:	000000b8 	strheq	r0, [r0], -r8
    88b4:	c4070802 	strgt	r0, [r7], #-2050	; 0xfffff7fe
    88b8:	04000001 	streq	r0, [r0], #-1
    88bc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    88c0:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    88c4:	0001ce07 	andeq	ip, r1, r7, lsl #28
    88c8:	00740300 	rsbseq	r0, r4, r0, lsl #6
    88cc:	24030000 	strcs	r0, [r3], #-0
    88d0:	00000036 	andeq	r0, r0, r6, lsr r0
    88d4:	00006903 	andeq	r6, r0, r3, lsl #18
    88d8:	4f300300 	svcmi	0x00300300
    88dc:	02000000 	andeq	r0, r0, #0
    88e0:	00590704 	subseq	r0, r9, r4, lsl #14
    88e4:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
    88e8:	05000000 	streq	r0, [r0, #-0]
    88ec:	0000007d 	andeq	r0, r0, sp, ror r0
    88f0:	00280106 	eoreq	r0, r8, r6, lsl #2
    88f4:	07040000 	streq	r0, [r4, -r0]
    88f8:	0000be02 	andeq	fp, r0, r2, lsl #28
    88fc:	1c740700 	ldclne	7, cr0, [r4], #-0
    8900:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8904:	00544553 	subseq	r4, r4, r3, asr r5
    8908:	50090001 	andpl	r0, r9, r1
    890c:	cf04a204 	svcgt	0x0004a204
    8910:	0a000002 	beq	8920 <_Min_Stack_Size+0x8720>
    8914:	00315243 	eorseq	r5, r1, r3, asr #4
    8918:	9f04a404 	svcls	0x0004a404
    891c:	00000000 	andeq	r0, r0, r0
    8920:	0003c20b 	andeq	ip, r3, fp, lsl #4
    8924:	04a50400 	strteq	r0, [r5], #1024	; 0x400
    8928:	0000007d 	andeq	r0, r0, sp, ror r0
    892c:	52430a02 	subpl	r0, r3, #8192	; 0x2000
    8930:	a6040032 			; <UNDEFINED> instruction: 0xa6040032
    8934:	00009f04 	andeq	r9, r0, r4, lsl #30
    8938:	cc0b0400 	cfstrsgt	mvf0, [fp], {-0}
    893c:	04000003 	streq	r0, [r0], #-3
    8940:	007d04a7 	rsbseq	r0, sp, r7, lsr #9
    8944:	0b060000 	bleq	18894c <_Min_Stack_Size+0x18874c>
    8948:	000027bf 			; <UNDEFINED> instruction: 0x000027bf
    894c:	9f04a804 	svcls	0x0004a804
    8950:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8954:	0003d60b 	andeq	sp, r3, fp, lsl #12
    8958:	04a90400 	strteq	r0, [r9], #1024	; 0x400
    895c:	0000007d 	andeq	r0, r0, sp, ror r0
    8960:	23260b0a 			; <UNDEFINED> instruction: 0x23260b0a
    8964:	aa040000 	bge	10896c <_Min_Stack_Size+0x10876c>
    8968:	00009f04 	andeq	r9, r0, r4, lsl #30
    896c:	ab0b0c00 	blge	2cb974 <_Min_Stack_Size+0x2cb774>
    8970:	04000002 	streq	r0, [r0], #-2
    8974:	007d04ab 	rsbseq	r0, sp, fp, lsr #9
    8978:	0a0e0000 	beq	388980 <_Min_Stack_Size+0x388780>
    897c:	04005253 	streq	r5, [r0], #-595	; 0xfffffdad
    8980:	009f04ac 	addseq	r0, pc, ip, lsr #9
    8984:	0b100000 	bleq	40898c <_Min_Stack_Size+0x40878c>
    8988:	000003ea 	andeq	r0, r0, sl, ror #7
    898c:	7d04ad04 	stcvc	13, cr10, [r4, #-16]
    8990:	12000000 	andne	r0, r0, #0
    8994:	5247450a 	subpl	r4, r7, #41943040	; 0x2800000
    8998:	04ae0400 	strteq	r0, [lr], #1024	; 0x400
    899c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    89a0:	03f40b14 	mvnseq	r0, #20, 22	; 0x5000
    89a4:	af040000 	svcge	0x00040000
    89a8:	00007d04 	andeq	r7, r0, r4, lsl #26
    89ac:	c70b1600 	strgt	r1, [fp, -r0, lsl #12]
    89b0:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    89b4:	009f04b0 			; <UNDEFINED> instruction: 0x009f04b0
    89b8:	0b180000 	bleq	6089c0 <_Min_Stack_Size+0x6087c0>
    89bc:	000002d7 	ldrdeq	r0, [r0], -r7
    89c0:	7d04b104 	stfvcd	f3, [r4, #-16]
    89c4:	1a000000 	bne	89cc <_Min_Stack_Size+0x87cc>
    89c8:	0024cd0b 	eoreq	ip, r4, fp, lsl #26
    89cc:	04b20400 	ldrteq	r0, [r2], #1024	; 0x400
    89d0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    89d4:	04150b1c 	ldreq	r0, [r5], #-2844	; 0xfffff4e4
    89d8:	b3040000 	movwlt	r0, #16384	; 0x4000
    89dc:	00007d04 	andeq	r7, r0, r4, lsl #26
    89e0:	9b0b1e00 	blls	2d01e8 <_Min_Stack_Size+0x2cffe8>
    89e4:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    89e8:	009f04b4 			; <UNDEFINED> instruction: 0x009f04b4
    89ec:	0b200000 	bleq	8089f4 <_Min_Stack_Size+0x8087f4>
    89f0:	0000041f 	andeq	r0, r0, pc, lsl r4
    89f4:	7d04b504 	cfstr32vc	mvfx11, [r4, #-16]
    89f8:	22000000 	andcs	r0, r0, #0
    89fc:	544e430a 	strbpl	r4, [lr], #-778	; 0xfffffcf6
    8a00:	04b60400 	ldrteq	r0, [r6], #1024	; 0x400
    8a04:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8a08:	2a510b24 	bcs	144b6a0 <_Min_Stack_Size+0x144b4a0>
    8a0c:	b7040000 	strlt	r0, [r4, -r0]
    8a10:	00007d04 	andeq	r7, r0, r4, lsl #26
    8a14:	500a2600 	andpl	r2, sl, r0, lsl #12
    8a18:	04004353 	streq	r4, [r0], #-851	; 0xfffffcad
    8a1c:	009f04b8 			; <UNDEFINED> instruction: 0x009f04b8
    8a20:	0b280000 	bleq	a08a28 <_Min_Stack_Size+0xa08828>
    8a24:	00002513 	andeq	r2, r0, r3, lsl r5
    8a28:	7d04b904 	vstrvc.16	s22, [r4, #-8]	; <UNPREDICTABLE>
    8a2c:	2a000000 	bcs	8a34 <_Min_Stack_Size+0x8834>
    8a30:	5252410a 	subspl	r4, r2, #-2147483646	; 0x80000002
    8a34:	04ba0400 	ldrteq	r0, [sl], #1024	; 0x400
    8a38:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8a3c:	251e0b2c 	ldrcs	r0, [lr, #-2860]	; 0xfffff4d4
    8a40:	bb040000 	bllt	108a48 <_Min_Stack_Size+0x108848>
    8a44:	00007d04 	andeq	r7, r0, r4, lsl #26
    8a48:	520a2e00 	andpl	r2, sl, #0, 28
    8a4c:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
    8a50:	009f04bc 			; <UNDEFINED> instruction: 0x009f04bc
    8a54:	0b300000 	bleq	c08a5c <_Min_Stack_Size+0xc0885c>
    8a58:	00002529 	andeq	r2, r0, r9, lsr #10
    8a5c:	7d04bd04 	stcvc	13, cr11, [r4, #-16]
    8a60:	32000000 	andcc	r0, r0, #0
    8a64:	002cfa0b 	eoreq	pc, ip, fp, lsl #20
    8a68:	04be0400 	ldrteq	r0, [lr], #1024	; 0x400
    8a6c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8a70:	25340b34 	ldrcs	r0, [r4, #-2868]!	; 0xfffff4cc
    8a74:	bf040000 	svclt	0x00040000
    8a78:	00007d04 	andeq	r7, r0, r4, lsl #26
    8a7c:	f90b3600 			; <UNDEFINED> instruction: 0xf90b3600
    8a80:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    8a84:	009f04c0 	addseq	r0, pc, r0, asr #9
    8a88:	0b380000 	bleq	e08a90 <_Min_Stack_Size+0xe08890>
    8a8c:	0000253f 	andeq	r2, r0, pc, lsr r5
    8a90:	7d04c104 	stfvcd	f4, [r4, #-16]
    8a94:	3a000000 	bcc	8a9c <_Min_Stack_Size+0x889c>
    8a98:	002d170b 	eoreq	r1, sp, fp, lsl #14
    8a9c:	04c20400 	strbeq	r0, [r2], #1024	; 0x400
    8aa0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8aa4:	254a0b3c 	strbcs	r0, [sl, #-2876]	; 0xfffff4c4
    8aa8:	c3040000 	movwgt	r0, #16384	; 0x4000
    8aac:	00007d04 	andeq	r7, r0, r4, lsl #26
    8ab0:	1c0b3e00 	stcne	14, cr3, [fp], {-0}
    8ab4:	0400002d 	streq	r0, [r0], #-45	; 0xffffffd3
    8ab8:	009f04c4 	addseq	r0, pc, r4, asr #9
    8abc:	0b400000 	bleq	1008ac4 <_Min_Stack_Size+0x10088c4>
    8ac0:	00002555 	andeq	r2, r0, r5, asr r5
    8ac4:	7d04c504 	cfstr32vc	mvfx12, [r4, #-16]
    8ac8:	42000000 	andmi	r0, r0, #0
    8acc:	002ab40b 	eoreq	fp, sl, fp, lsl #8
    8ad0:	04c60400 	strbeq	r0, [r6], #1024	; 0x400
    8ad4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8ad8:	25600b44 	strbcs	r0, [r0, #-2884]!	; 0xfffff4bc
    8adc:	c7040000 	strgt	r0, [r4, -r0]
    8ae0:	00007d04 	andeq	r7, r0, r4, lsl #26
    8ae4:	440a4600 	strmi	r4, [sl], #-1536	; 0xfffffa00
    8ae8:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
    8aec:	009f04c8 	addseq	r0, pc, r8, asr #9
    8af0:	0b480000 	bleq	1208af8 <_Min_Stack_Size+0x12088f8>
    8af4:	0000256b 	andeq	r2, r0, fp, ror #10
    8af8:	7d04c904 	vstrvc.16	s24, [r4, #-8]	; <UNPREDICTABLE>
    8afc:	4a000000 	bmi	8b04 <_Min_Stack_Size+0x8904>
    8b00:	002bd00b 	eoreq	sp, fp, fp
    8b04:	04ca0400 	strbeq	r0, [sl], #1024	; 0x400
    8b08:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8b0c:	25760b4c 	ldrbcs	r0, [r6, #-2892]!	; 0xfffff4b4
    8b10:	cb040000 	blgt	108b18 <_Min_Stack_Size+0x108918>
    8b14:	00007d04 	andeq	r7, r0, r4, lsl #26
    8b18:	0c004e00 	stceq	14, cr4, [r0], {-0}
    8b1c:	00002644 	andeq	r2, r0, r4, asr #12
    8b20:	be04cc04 	cdplt	12, 0, cr12, cr4, cr4, {0}
    8b24:	0d000000 	stceq	0, cr0, [r0, #-0]
    8b28:	000039eb 	andeq	r3, r0, fp, ror #19
    8b2c:	67a43001 	strvs	r3, [r4, r1]!
    8b30:	000c0800 	andeq	r0, ip, r0, lsl #16
    8b34:	9c010000 	stcls	0, cr0, [r1], {-0}
    8b38:	0039790d 	eorseq	r7, r9, sp, lsl #18
    8b3c:	b0390100 	eorslt	r0, r9, r0, lsl #2
    8b40:	06080067 	streq	r0, [r8], -r7, rrx
    8b44:	01000000 	mrseq	r0, (UNDEF: 0)
    8b48:	39d90d9c 	ldmibcc	r9, {r2, r3, r4, r7, r8, sl, fp}^
    8b4c:	46010000 	strmi	r0, [r1], -r0
    8b50:	080067b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, sp, lr}
    8b54:	00000006 	andeq	r0, r0, r6
    8b58:	c80d9c01 	stmdagt	sp, {r0, sl, fp, ip, pc}
    8b5c:	01000039 	tsteq	r0, r9, lsr r0
    8b60:	0067c053 	rsbeq	ip, r7, r3, asr r0
    8b64:	00000608 	andeq	r0, r0, r8, lsl #12
    8b68:	0d9c0100 	ldfeqs	f0, [ip]
    8b6c:	0000392c 	andeq	r3, r0, ip, lsr #18
    8b70:	67c86001 	strbvs	r6, [r8, r1]
    8b74:	00060800 	andeq	r0, r6, r0, lsl #16
    8b78:	9c010000 	stcls	0, cr0, [r1], {-0}
    8b7c:	0039130d 	eorseq	r1, r9, sp, lsl #6
    8b80:	d0930100 	addsle	r0, r3, r0, lsl #2
    8b84:	0c080067 	stceq	0, cr0, [r8], {103}	; 0x67
    8b88:	01000000 	mrseq	r0, (UNDEF: 0)
    8b8c:	39f70d9c 	ldmibcc	r7!, {r2, r3, r4, r7, r8, sl, fp}^
    8b90:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    8b94:	080067dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, sp, lr}
    8b98:	0000000c 	andeq	r0, r0, ip
    8b9c:	3f0e9c01 	svccc	0x000e9c01
    8ba0:	01000039 	tsteq	r0, r9, lsr r0
    8ba4:	0067e89e 	mlseq	r7, lr, r8, lr
    8ba8:	00006408 	andeq	r6, r0, r8, lsl #8
    8bac:	8f9c0100 	svchi	0x009c0100
    8bb0:	0f000003 	svceq	0x00000003
    8bb4:	0000394f 	andeq	r3, r0, pc, asr #18
    8bb8:	009a9f01 	addseq	r9, sl, r1, lsl #30
    8bbc:	b70f0000 	strlt	r0, [pc, -r0]
    8bc0:	01000039 	tsteq	r0, r9, lsr r0
    8bc4:	00009a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    8bc8:	396e1000 	stmdbcc	lr!, {ip}^
    8bcc:	a0010000 	andge	r0, r1, r0
    8bd0:	00000088 	andeq	r0, r0, r8, lsl #1
    8bd4:	013c0305 	teqeq	ip, r5, lsl #6
    8bd8:	0d002000 	stceq	0, cr2, [r0, #-0]
    8bdc:	0000395e 	andeq	r3, r0, lr, asr r9
    8be0:	684caf01 	stmdavs	ip, {r0, r8, r9, sl, fp, sp, pc}^
    8be4:	000c0800 	andeq	r0, ip, r0, lsl #16
    8be8:	9c010000 	stcls	0, cr0, [r1], {-0}
    8bec:	00026c11 	andeq	r6, r2, r1, lsl ip
    8bf0:	06ce0500 	strbeq	r0, [lr], r0, lsl #10
    8bf4:	000003ac 	andeq	r0, r0, ip, lsr #7
    8bf8:	00006f05 	andeq	r6, r0, r5, lsl #30
    8bfc:	394f0f00 	stmdbcc	pc, {r8, r9, sl, fp}^	; <UNPREDICTABLE>
    8c00:	9f010000 	svcls	0x00010000
    8c04:	0000009a 	muleq	r0, sl, r0
    8c08:	0039b70f 	eorseq	fp, r9, pc, lsl #14
    8c0c:	9a9f0100 	bls	fe7c9014 <BootRAM+0xd7397b5>
    8c10:	00000000 	andeq	r0, r0, r0
    8c14:	000009cc 	andeq	r0, r0, ip, asr #19
    8c18:	1dd20004 	ldclne	0, cr0, [r2, #16]
    8c1c:	01040000 	mrseq	r0, (UNDEF: 4)
    8c20:	00000111 	andeq	r0, r0, r1, lsl r1
    8c24:	003d710c 	eorseq	r7, sp, ip, lsl #2
    8c28:	000bb000 	andeq	fp, fp, r0
    8c2c:	00000000 	andeq	r0, r0, r0
    8c30:	00411e00 	subeq	r1, r1, r0, lsl #28
    8c34:	3aa20200 	bcc	fe88943c <BootRAM+0xd7f9bdd>
    8c38:	64010000 	strvs	r0, [r1], #-0
    8c3c:	04000001 	streq	r0, [r0], #-1
    8c40:	000164a7 	andeq	r6, r1, r7, lsr #9
    8c44:	3c7a0300 	ldclcc	3, cr0, [sl], #-0
    8c48:	03720000 	cmneq	r2, #0
    8c4c:	00003ace 	andeq	r3, r0, lr, asr #21
    8c50:	3c070374 	stccc	3, cr0, [r7], {116}	; 0x74
    8c54:	03750000 	cmneq	r5, #0
    8c58:	00003d04 	andeq	r3, r0, r4, lsl #26
    8c5c:	3d210376 	stccc	3, cr0, [r1, #-472]!	; 0xfffffe28
    8c60:	037b0000 	cmneq	fp, #0
    8c64:	00003cf2 	strdeq	r3, [r0], -r2
    8c68:	3aa7037c 	bcc	fe9c9a60 <BootRAM+0xd93a201>
    8c6c:	037e0000 	cmneq	lr, #0
    8c70:	00003cc5 	andeq	r3, r0, r5, asr #25
    8c74:	3bef047f 	blcc	ffbc9e78 <BootRAM+0xeb3a619>
    8c78:	04000000 	streq	r0, [r0], #-0
    8c7c:	00003c20 	andeq	r3, r0, r0, lsr #24
    8c80:	3da70401 	cfstrscc	mvf0, [r7, #4]!
    8c84:	04020000 	streq	r0, [r2], #-0
    8c88:	00003c65 	andeq	r3, r0, r5, ror #24
    8c8c:	3a820403 	bcc	fe089ca0 <BootRAM+0xcffa441>
    8c90:	04040000 	streq	r0, [r4], #-0
    8c94:	00003ac5 	andeq	r3, r0, r5, asr #21
    8c98:	3a8d0405 	bcc	fe349cb4 <BootRAM+0xd2ba455>
    8c9c:	04060000 	streq	r0, [r6], #-0
    8ca0:	00003c9b 	muleq	r0, fp, ip
    8ca4:	3b5e0407 	blcc	1789cc8 <_Min_Stack_Size+0x1789ac8>
    8ca8:	04080000 	streq	r0, [r8], #-0
    8cac:	00003d4a 	andeq	r3, r0, sl, asr #26
    8cb0:	3c150409 	cfldrscc	mvf0, [r5], {9}
    8cb4:	040a0000 	streq	r0, [sl], #-0
    8cb8:	00003ba6 	andeq	r3, r0, r6, lsr #23
    8cbc:	3a6f040b 	bcc	1bc9cf0 <_Min_Stack_Size+0x1bc9af0>
    8cc0:	040c0000 	streq	r0, [ip], #-0
    8cc4:	00003c29 	andeq	r3, r0, r9, lsr #24
    8cc8:	3afc040d 	bcc	fff09d04 <BootRAM+0xee7a4a5>
    8ccc:	040e0000 	streq	r0, [lr], #-0
    8cd0:	00003d37 	andeq	r3, r0, r7, lsr sp
    8cd4:	3b76040f 	blcc	1d89d18 <_Min_Stack_Size+0x1d89b18>
    8cd8:	04100000 	ldreq	r0, [r0], #-0
    8cdc:	00003a33 	andeq	r3, r0, r3, lsr sl
    8ce0:	3d650411 	cfstrdcc	mvd0, [r5, #-68]!	; 0xffffffbc
    8ce4:	04120000 	ldreq	r0, [r2], #-0
    8ce8:	00003b1d 	andeq	r3, r0, sp, lsl fp
    8cec:	3a100413 	bcc	409d40 <_Min_Stack_Size+0x409b40>
    8cf0:	04140000 	ldreq	r0, [r4], #-0
    8cf4:	00003b0f 	andeq	r3, r0, pc, lsl #22
    8cf8:	3a250415 	bcc	949d54 <_Min_Stack_Size+0x949b54>
    8cfc:	04160000 	ldreq	r0, [r6], #-0
    8d00:	00003d14 	andeq	r3, r0, r4, lsl sp
    8d04:	3ae40417 	bcc	ff909d68 <BootRAM+0xe87a509>
    8d08:	04180000 	ldreq	r0, [r8], #-0
    8d0c:	00003c58 	andeq	r3, r0, r8, asr ip
    8d10:	3ca60419 	cfstrscc	mvf0, [r6], #100	; 0x64
    8d14:	041a0000 	ldreq	r0, [sl], #-0
    8d18:	00003c8e 	andeq	r3, r0, lr, lsl #25
    8d1c:	3cd2041b 	cfldrdcc	mvd0, [r2], {27}
    8d20:	041c0000 	ldreq	r0, [ip], #-0
    8d24:	00003b9c 	muleq	r0, ip, fp
    8d28:	3a65041d 	bcc	1949da4 <_Min_Stack_Size+0x1949ba4>
    8d2c:	041e0000 	ldreq	r0, [lr], #-0
    8d30:	00003c3c 	andeq	r3, r0, ip, lsr ip
    8d34:	3cb8041f 	cfldrscc	mvf0, [r8], #124	; 0x7c
    8d38:	04200000 	strteq	r0, [r0], #-0
    8d3c:	00003b69 	andeq	r3, r0, r9, ror #22
    8d40:	3a460421 	bcc	1189dcc <_Min_Stack_Size+0x1189bcc>
    8d44:	04220000 	strteq	r0, [r2], #-0
    8d48:	00003af2 	strdeq	r3, [r0], -r2
    8d4c:	3d2d0423 	cfstrscc	mvf0, [sp, #-140]!	; 0xffffff74
    8d50:	04240000 	strteq	r0, [r4], #-0
    8d54:	00003c6e 	andeq	r3, r0, lr, ror #24
    8d58:	3b310425 	blcc	c49df4 <_Min_Stack_Size+0xc49bf4>
    8d5c:	04260000 	strteq	r0, [r6], #-0
    8d60:	00003d9b 	muleq	r0, fp, sp
    8d64:	3a980427 	bcc	fe609e08 <BootRAM+0xd57a5a9>
    8d68:	04280000 	strteq	r0, [r8], #-0
    8d6c:	00003db3 			; <UNDEFINED> instruction: 0x00003db3
    8d70:	3be00429 	blcc	ff809e1c <BootRAM+0xe77a5bd>
    8d74:	002a0000 	eoreq	r0, sl, r0
    8d78:	92060105 	andls	r0, r6, #1073741825	; 0x40000001
    8d7c:	06000001 	streq	r0, [r0], -r1
    8d80:	000000e3 	andeq	r0, r0, r3, ror #1
    8d84:	01761d02 	cmneq	r6, r2, lsl #26
    8d88:	01050000 	mrseq	r0, (UNDEF: 5)
    8d8c:	00019008 	andeq	r9, r1, r8
    8d90:	05020500 	streq	r0, [r2, #-1280]	; 0xfffffb00
    8d94:	00000095 	muleq	r0, r5, r0
    8d98:	00007206 	andeq	r7, r0, r6, lsl #4
    8d9c:	8f2b0200 	svchi	0x002b0200
    8da0:	05000001 	streq	r0, [r0, #-1]
    8da4:	01f20702 	mvnseq	r0, r2, lsl #14
    8da8:	04050000 	streq	r0, [r5], #-0
    8dac:	0000bd05 	andeq	fp, r0, r5, lsl #26
    8db0:	00670600 	rsbeq	r0, r7, r0, lsl #12
    8db4:	41020000 	mrsmi	r0, (UNDEF: 2)
    8db8:	000001a8 	andeq	r0, r0, r8, lsr #3
    8dbc:	c9070405 	stmdbgt	r7, {r0, r2, sl}
    8dc0:	05000001 	streq	r0, [r0, #-1]
    8dc4:	00b80508 	adcseq	r0, r8, r8, lsl #10
    8dc8:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    8dcc:	0001c407 	andeq	ip, r1, r7, lsl #8
    8dd0:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
    8dd4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    8dd8:	ce070405 	cdpgt	4, 0, cr0, cr7, cr5, {0}
    8ddc:	06000001 	streq	r0, [r0], -r1
    8de0:	000000e5 	andeq	r0, r0, r5, ror #1
    8de4:	016b1803 	cmneq	fp, r3, lsl #16
    8de8:	74060000 	strvc	r0, [r6], #-0
    8dec:	03000000 	movweq	r0, #0
    8df0:	00018424 	andeq	r8, r1, r4, lsr #8
    8df4:	00690600 	rsbeq	r0, r9, r0, lsl #12
    8df8:	30030000 	andcc	r0, r3, r0
    8dfc:	0000019d 	muleq	r0, sp, r1
    8e00:	59070405 	stmdbpl	r7, {r0, r2, sl}
    8e04:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8e08:	000001e1 	andeq	r0, r0, r1, ror #3
    8e0c:	0001d608 	andeq	sp, r1, r8, lsl #12
    8e10:	76010900 	strvc	r0, [r1], -r0, lsl #18
    8e14:	04000001 	streq	r0, [r0], #-1
    8e18:	02170207 	andseq	r0, r7, #1879048192	; 0x70000000
    8e1c:	74040000 	strvc	r0, [r4], #-0
    8e20:	0000001c 	andeq	r0, r0, ip, lsl r0
    8e24:	5445530a 	strbpl	r5, [r5], #-778	; 0xfffffcf6
    8e28:	09000100 	stmdbeq	r0, {r8}
    8e2c:	00017601 	andeq	r7, r1, r1, lsl #12
    8e30:	02090400 	andeq	r0, r9, #0, 8
    8e34:	00000231 	andeq	r0, r0, r1, lsr r2
    8e38:	0002f004 	andeq	pc, r2, r4
    8e3c:	62040000 	andvs	r0, r4, #0
    8e40:	01000004 	tsteq	r0, r4
    8e44:	17d40b00 	ldrbne	r0, [r4, r0, lsl #22]
    8e48:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    8e4c:	00021702 	andeq	r1, r2, r2, lsl #14
    8e50:	041c0c00 	ldreq	r0, [ip], #-3072	; 0xfffff400
    8e54:	02a203e9 	adceq	r0, r2, #-1543503869	; 0xa4000003
    8e58:	430d0000 	movwmi	r0, #53248	; 0xd000
    8e5c:	04004c52 	streq	r4, [r0], #-3154	; 0xfffff3ae
    8e60:	01f303eb 	mvnseq	r0, fp, ror #7
    8e64:	0d000000 	stceq	0, cr0, [r0, #-0]
    8e68:	00485243 	subeq	r5, r8, r3, asr #4
    8e6c:	f303ec04 			; <UNDEFINED> instruction: 0xf303ec04
    8e70:	04000001 	streq	r0, [r0], #-1
    8e74:	5244490d 	subpl	r4, r4, #212992	; 0x34000
    8e78:	03ed0400 	mvneq	r0, #0, 8
    8e7c:	000001f3 	strdeq	r0, [r0], -r3
    8e80:	444f0d08 	strbmi	r0, [pc], #-3336	; 8e88 <_Min_Stack_Size+0x8c88>
    8e84:	ee040052 	mcr	0, 0, r0, cr4, cr2, {2}
    8e88:	0001f303 	andeq	pc, r1, r3, lsl #6
    8e8c:	040e0c00 	streq	r0, [lr], #-3072	; 0xfffff400
    8e90:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    8e94:	01f303ef 	mvnseq	r0, pc, ror #7
    8e98:	0d100000 	ldceq	0, cr0, [r0, #-0]
    8e9c:	00525242 	subseq	r5, r2, r2, asr #4
    8ea0:	f303f004 	vhadd.u8	d15, d3, d4
    8ea4:	14000001 	strne	r0, [r0], #-1
    8ea8:	001dd50e 	andseq	sp, sp, lr, lsl #10
    8eac:	03f10400 	mvnseq	r0, #0, 8
    8eb0:	000001f3 	strdeq	r0, [r0], -r3
    8eb4:	fc0b0018 	stc2	0, cr0, [fp], {24}
    8eb8:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    8ebc:	023d03f2 	eorseq	r0, sp, #-939524093	; 0xc8000003
    8ec0:	240c0000 	strcs	r0, [ip], #-0
    8ec4:	a1040404 	tstge	r4, r4, lsl #8
    8ec8:	0d000003 	stceq	0, cr0, [r0, #-12]
    8ecc:	00315243 	eorseq	r5, r1, r3, asr #4
    8ed0:	f8040604 			; <UNDEFINED> instruction: 0xf8040604
    8ed4:	00000001 	andeq	r0, r0, r1
    8ed8:	0003c20e 	andeq	ip, r3, lr, lsl #4
    8edc:	04070400 	streq	r0, [r7], #-1024	; 0xfffffc00
    8ee0:	000001d6 	ldrdeq	r0, [r0], -r6
    8ee4:	52430d02 	subpl	r0, r3, #2, 26	; 0x80
    8ee8:	08040032 	stmdaeq	r4, {r1, r4, r5}
    8eec:	0001f804 	andeq	pc, r1, r4, lsl #16
    8ef0:	cc0e0400 	cfstrsgt	mvf0, [lr], {-0}
    8ef4:	04000003 	streq	r0, [r0], #-3
    8ef8:	01d60409 	bicseq	r0, r6, r9, lsl #8
    8efc:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    8f00:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
    8f04:	f8040a04 			; <UNDEFINED> instruction: 0xf8040a04
    8f08:	08000001 	stmdaeq	r0, {r0}
    8f0c:	0003d60e 	andeq	sp, r3, lr, lsl #12
    8f10:	040b0400 	streq	r0, [fp], #-1024	; 0xfffffc00
    8f14:	000001d6 	ldrdeq	r0, [r0], -r6
    8f18:	03bd0e0a 			; <UNDEFINED> instruction: 0x03bd0e0a
    8f1c:	0c040000 	stceq	0, cr0, [r4], {-0}
    8f20:	0001f804 	andeq	pc, r1, r4, lsl #16
    8f24:	ab0e0c00 	blge	38bf2c <_Min_Stack_Size+0x38bd2c>
    8f28:	04000002 	streq	r0, [r0], #-2
    8f2c:	01d6040d 	bicseq	r0, r6, sp, lsl #8
    8f30:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    8f34:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
    8f38:	01f8040e 	mvnseq	r0, lr, lsl #8
    8f3c:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    8f40:	000003ea 	andeq	r0, r0, sl, ror #7
    8f44:	d6040f04 	strle	r0, [r4], -r4, lsl #30
    8f48:	12000001 	andne	r0, r0, #1
    8f4c:	3152530d 	cmpcc	r2, sp, lsl #6
    8f50:	04100400 	ldreq	r0, [r0], #-1024	; 0xfffffc00
    8f54:	000001f8 	strdeq	r0, [r0], -r8
    8f58:	03f40e14 	mvnseq	r0, #20, 28	; 0x140
    8f5c:	11040000 	mrsne	r0, (UNDEF: 4)
    8f60:	0001d604 	andeq	sp, r1, r4, lsl #12
    8f64:	530d1600 	movwpl	r1, #54784	; 0xd600
    8f68:	04003252 	streq	r3, [r0], #-594	; 0xfffffdae
    8f6c:	01f80412 	mvnseq	r0, r2, lsl r4
    8f70:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    8f74:	000002d7 	ldrdeq	r0, [r0], -r7
    8f78:	d6041304 	strle	r1, [r4], -r4, lsl #6
    8f7c:	1a000001 	bne	8f88 <_Min_Stack_Size+0x8d88>
    8f80:	5243430d 	subpl	r4, r3, #872415232	; 0x34000000
    8f84:	04140400 	ldreq	r0, [r4], #-1024	; 0xfffffc00
    8f88:	000001f8 	strdeq	r0, [r0], -r8
    8f8c:	04150e1c 	ldreq	r0, [r5], #-3612	; 0xfffff1e4
    8f90:	15040000 	strne	r0, [r4, #-0]
    8f94:	0001d604 	andeq	sp, r1, r4, lsl #12
    8f98:	4b0e1e00 	blmi	3907a0 <_Min_Stack_Size+0x3905a0>
    8f9c:	04000004 	streq	r0, [r0], #-4
    8fa0:	01f80416 	mvnseq	r0, r6, lsl r4
    8fa4:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
    8fa8:	0000041f 	andeq	r0, r0, pc, lsl r4
    8fac:	d6041704 	strle	r1, [r4], -r4, lsl #14
    8fb0:	22000001 	andcs	r0, r0, #1
    8fb4:	03470b00 	movteq	r0, #31488	; 0x7b00
    8fb8:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    8fbc:	0002ae04 	andeq	sl, r2, r4, lsl #28
    8fc0:	04240c00 	strteq	r0, [r4], #-3072	; 0xfffff400
    8fc4:	049f0488 	ldreq	r0, [pc], #1160	; 8fcc <_Min_Stack_Size+0x8dcc>
    8fc8:	430d0000 	movwmi	r0, #53248	; 0xd000
    8fcc:	04003152 	streq	r3, [r0], #-338	; 0xfffffeae
    8fd0:	01f8048a 	mvnseq	r0, sl, lsl #9
    8fd4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    8fd8:	000003c2 	andeq	r0, r0, r2, asr #7
    8fdc:	d6048b04 	strle	r8, [r4], -r4, lsl #22
    8fe0:	02000001 	andeq	r0, r0, #1
    8fe4:	3252430d 	subscc	r4, r2, #872415232	; 0x34000000
    8fe8:	048c0400 	streq	r0, [ip], #1024	; 0x400
    8fec:	000001f8 	strdeq	r0, [r0], -r8
    8ff0:	03cc0e04 	biceq	r0, ip, #4, 28	; 0x40
    8ff4:	8d040000 	stchi	0, cr0, [r4, #-0]
    8ff8:	0001d604 	andeq	sp, r1, r4, lsl #12
    8ffc:	530d0600 	movwpl	r0, #54784	; 0xd600
    9000:	8e040052 	mcrhi	0, 0, r0, cr4, cr2, {2}
    9004:	0001f804 	andeq	pc, r1, r4, lsl #16
    9008:	d60e0800 	strle	r0, [lr], -r0, lsl #16
    900c:	04000003 	streq	r0, [r0], #-3
    9010:	01d6048f 	bicseq	r0, r6, pc, lsl #9
    9014:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    9018:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
    901c:	01f80490 			; <UNDEFINED> instruction: 0x01f80490
    9020:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    9024:	000002ab 	andeq	r0, r0, fp, lsr #5
    9028:	d6049104 	strle	r9, [r4], -r4, lsl #2
    902c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    9030:	00218f0e 	eoreq	r8, r1, lr, lsl #30
    9034:	04920400 	ldreq	r0, [r2], #1024	; 0x400
    9038:	000001f8 	strdeq	r0, [r0], -r8
    903c:	03ea0e10 	mvneq	r0, #16, 28	; 0x100
    9040:	93040000 	movwls	r0, #16384	; 0x4000
    9044:	0001d604 	andeq	sp, r1, r4, lsl #12
    9048:	460e1200 	strmi	r1, [lr], -r0, lsl #4
    904c:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    9050:	01f80494 			; <UNDEFINED> instruction: 0x01f80494
    9054:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    9058:	000003f4 	strdeq	r0, [r0], -r4
    905c:	d6049504 	strle	r9, [r4], -r4, lsl #10
    9060:	16000001 	strne	r0, [r0], -r1
    9064:	0020290e 	eoreq	r2, r0, lr, lsl #18
    9068:	04960400 	ldreq	r0, [r6], #1024	; 0x400
    906c:	000001f8 	strdeq	r0, [r0], -r8
    9070:	02d70e18 	sbcseq	r0, r7, #24, 28	; 0x180
    9074:	97040000 	strls	r0, [r4, -r0]
    9078:	0001d604 	andeq	sp, r1, r4, lsl #12
    907c:	630e1a00 	movwvs	r1, #59904	; 0xea00
    9080:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    9084:	01f80498 			; <UNDEFINED> instruction: 0x01f80498
    9088:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
    908c:	00000415 	andeq	r0, r0, r5, lsl r4
    9090:	d6049904 	strle	r9, [r4], -r4, lsl #18
    9094:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    9098:	0022a70e 	eoreq	sl, r2, lr, lsl #14
    909c:	049a0400 	ldreq	r0, [sl], #1024	; 0x400
    90a0:	000001f8 	strdeq	r0, [r0], -r8
    90a4:	041f0e20 	ldreq	r0, [pc], #-3616	; 90ac <_Min_Stack_Size+0x8eac>
    90a8:	9b040000 	blls	1090b0 <_Min_Stack_Size+0x108eb0>
    90ac:	0001d604 	andeq	sp, r1, r4, lsl #12
    90b0:	0b002200 	bleq	118b8 <_Min_Stack_Size+0x116b8>
    90b4:	0000219e 	muleq	r0, lr, r1
    90b8:	ad049c04 	stcge	12, cr9, [r4, #-16]
    90bc:	0c000003 	stceq	0, cr0, [r0], {3}
    90c0:	04a20450 	strteq	r0, [r2], #1104	; 0x450
    90c4:	000006bc 			; <UNDEFINED> instruction: 0x000006bc
    90c8:	3152430d 	cmpcc	r2, sp, lsl #6
    90cc:	04a40400 	strteq	r0, [r4], #1024	; 0x400
    90d0:	000001f8 	strdeq	r0, [r0], -r8
    90d4:	03c20e00 	biceq	r0, r2, #0, 28
    90d8:	a5040000 	strge	r0, [r4, #-0]
    90dc:	0001d604 	andeq	sp, r1, r4, lsl #12
    90e0:	430d0200 	movwmi	r0, #53760	; 0xd200
    90e4:	04003252 	streq	r3, [r0], #-594	; 0xfffffdae
    90e8:	01f804a6 	mvnseq	r0, r6, lsr #9
    90ec:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    90f0:	000003cc 	andeq	r0, r0, ip, asr #7
    90f4:	d604a704 	strle	sl, [r4], -r4, lsl #14
    90f8:	06000001 	streq	r0, [r0], -r1
    90fc:	0027bf0e 	eoreq	fp, r7, lr, lsl #30
    9100:	04a80400 	strteq	r0, [r8], #1024	; 0x400
    9104:	000001f8 	strdeq	r0, [r0], -r8
    9108:	03d60e08 	bicseq	r0, r6, #8, 28	; 0x80
    910c:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
    9110:	0001d604 	andeq	sp, r1, r4, lsl #12
    9114:	260e0a00 	strcs	r0, [lr], -r0, lsl #20
    9118:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    911c:	01f804aa 	mvnseq	r0, sl, lsr #9
    9120:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    9124:	000002ab 	andeq	r0, r0, fp, lsr #5
    9128:	d604ab04 	strle	sl, [r4], -r4, lsl #22
    912c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    9130:	0052530d 	subseq	r5, r2, sp, lsl #6
    9134:	f804ac04 			; <UNDEFINED> instruction: 0xf804ac04
    9138:	10000001 	andne	r0, r0, r1
    913c:	0003ea0e 	andeq	lr, r3, lr, lsl #20
    9140:	04ad0400 	strteq	r0, [sp], #1024	; 0x400
    9144:	000001d6 	ldrdeq	r0, [r0], -r6
    9148:	47450d12 	smlaldmi	r0, r5, r2, sp
    914c:	ae040052 	mcrge	0, 0, r0, cr4, cr2, {2}
    9150:	0001f804 	andeq	pc, r1, r4, lsl #16
    9154:	f40e1400 	vst3.8	{d1-d3}, [lr], r0
    9158:	04000003 	streq	r0, [r0], #-3
    915c:	01d604af 	bicseq	r0, r6, pc, lsr #9
    9160:	0e160000 	cdpeq	0, 1, cr0, cr6, cr0, {0}
    9164:	000024c7 	andeq	r2, r0, r7, asr #9
    9168:	f804b004 			; <UNDEFINED> instruction: 0xf804b004
    916c:	18000001 	stmdane	r0, {r0}
    9170:	0002d70e 	andeq	sp, r2, lr, lsl #14
    9174:	04b10400 	ldrteq	r0, [r1], #1024	; 0x400
    9178:	000001d6 	ldrdeq	r0, [r0], -r6
    917c:	24cd0e1a 	strbcs	r0, [sp], #3610	; 0xe1a
    9180:	b2040000 	andlt	r0, r4, #0
    9184:	0001f804 	andeq	pc, r1, r4, lsl #16
    9188:	150e1c00 	strne	r1, [lr, #-3072]	; 0xfffff400
    918c:	04000004 	streq	r0, [r0], #-4
    9190:	01d604b3 	ldrheq	r0, [r6, #67]	; 0x43
    9194:	0e1e0000 	cdpeq	0, 1, cr0, cr14, cr0, {0}
    9198:	0000259b 	muleq	r0, fp, r5
    919c:	f804b404 			; <UNDEFINED> instruction: 0xf804b404
    91a0:	20000001 	andcs	r0, r0, r1
    91a4:	00041f0e 	andeq	r1, r4, lr, lsl #30
    91a8:	04b50400 	ldrteq	r0, [r5], #1024	; 0x400
    91ac:	000001d6 	ldrdeq	r0, [r0], -r6
    91b0:	4e430d22 	cdpmi	13, 4, cr0, cr3, cr2, {1}
    91b4:	b6040054 			; <UNDEFINED> instruction: 0xb6040054
    91b8:	0001f804 	andeq	pc, r1, r4, lsl #16
    91bc:	510e2400 	tstpl	lr, r0, lsl #8
    91c0:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    91c4:	01d604b7 	ldrheq	r0, [r6, #71]	; 0x47
    91c8:	0d260000 	stceq	0, cr0, [r6, #-0]
    91cc:	00435350 	subeq	r5, r3, r0, asr r3
    91d0:	f804b804 			; <UNDEFINED> instruction: 0xf804b804
    91d4:	28000001 	stmdacs	r0, {r0}
    91d8:	0025130e 	eoreq	r1, r5, lr, lsl #6
    91dc:	04b90400 	ldrteq	r0, [r9], #1024	; 0x400
    91e0:	000001d6 	ldrdeq	r0, [r0], -r6
    91e4:	52410d2a 	subpl	r0, r1, #2688	; 0xa80
    91e8:	ba040052 	blt	109338 <_Min_Stack_Size+0x109138>
    91ec:	0001f804 	andeq	pc, r1, r4, lsl #16
    91f0:	1e0e2c00 	cdpne	12, 0, cr2, cr14, cr0, {0}
    91f4:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    91f8:	01d604bb 	ldrheq	r0, [r6, #75]	; 0x4b
    91fc:	0d2e0000 	stceq	0, cr0, [lr, #-0]
    9200:	00524352 	subseq	r4, r2, r2, asr r3
    9204:	f804bc04 			; <UNDEFINED> instruction: 0xf804bc04
    9208:	30000001 	andcc	r0, r0, r1
    920c:	0025290e 	eoreq	r2, r5, lr, lsl #18
    9210:	04bd0400 	ldrteq	r0, [sp], #1024	; 0x400
    9214:	000001d6 	ldrdeq	r0, [r0], -r6
    9218:	2cfa0e32 	ldclcs	14, cr0, [sl], #200	; 0xc8
    921c:	be040000 	cdplt	0, 0, cr0, cr4, cr0, {0}
    9220:	0001f804 	andeq	pc, r1, r4, lsl #16
    9224:	340e3400 	strcc	r3, [lr], #-1024	; 0xfffffc00
    9228:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    922c:	01d604bf 	ldrheq	r0, [r6, #79]	; 0x4f
    9230:	0e360000 	cdpeq	0, 3, cr0, cr6, cr0, {0}
    9234:	000023f9 	strdeq	r2, [r0], -r9
    9238:	f804c004 			; <UNDEFINED> instruction: 0xf804c004
    923c:	38000001 	stmdacc	r0, {r0}
    9240:	00253f0e 	eoreq	r3, r5, lr, lsl #30
    9244:	04c10400 	strbeq	r0, [r1], #1024	; 0x400
    9248:	000001d6 	ldrdeq	r0, [r0], -r6
    924c:	2d170e3a 	ldccs	14, cr0, [r7, #-232]	; 0xffffff18
    9250:	c2040000 	andgt	r0, r4, #0
    9254:	0001f804 	andeq	pc, r1, r4, lsl #16
    9258:	4a0e3c00 	bmi	398260 <_Min_Stack_Size+0x398060>
    925c:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    9260:	01d604c3 	bicseq	r0, r6, r3, asr #9
    9264:	0e3e0000 	cdpeq	0, 3, cr0, cr14, cr0, {0}
    9268:	00002d1c 	andeq	r2, r0, ip, lsl sp
    926c:	f804c404 			; <UNDEFINED> instruction: 0xf804c404
    9270:	40000001 	andmi	r0, r0, r1
    9274:	0025550e 	eoreq	r5, r5, lr, lsl #10
    9278:	04c50400 	strbeq	r0, [r5], #1024	; 0x400
    927c:	000001d6 	ldrdeq	r0, [r0], -r6
    9280:	2ab40e42 	bcs	fed0cb90 <BootRAM+0xdc7d331>
    9284:	c6040000 	strgt	r0, [r4], -r0
    9288:	0001f804 	andeq	pc, r1, r4, lsl #16
    928c:	600e4400 	andvs	r4, lr, r0, lsl #8
    9290:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    9294:	01d604c7 	bicseq	r0, r6, r7, asr #9
    9298:	0d460000 	stcleq	0, cr0, [r6, #-0]
    929c:	00524344 	subseq	r4, r2, r4, asr #6
    92a0:	f804c804 			; <UNDEFINED> instruction: 0xf804c804
    92a4:	48000001 	stmdami	r0, {r0}
    92a8:	00256b0e 	eoreq	r6, r5, lr, lsl #22
    92ac:	04c90400 	strbeq	r0, [r9], #1024	; 0x400
    92b0:	000001d6 	ldrdeq	r0, [r0], -r6
    92b4:	2bd00e4a 	blcs	ff40cbe4 <BootRAM+0xe37d385>
    92b8:	ca040000 	bgt	1092c0 <_Min_Stack_Size+0x1090c0>
    92bc:	0001f804 	andeq	pc, r1, r4, lsl #16
    92c0:	760e4c00 	strvc	r4, [lr], -r0, lsl #24
    92c4:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    92c8:	01d604cb 	bicseq	r0, r6, fp, asr #9
    92cc:	004e0000 	subeq	r0, lr, r0
    92d0:	0026440b 	eoreq	r4, r6, fp, lsl #8
    92d4:	04cc0400 	strbeq	r0, [ip], #1024	; 0x400
    92d8:	000004ab 	andeq	r0, r0, fp, lsr #9
    92dc:	0176010f 	cmneq	r6, pc, lsl #2
    92e0:	3b050000 	blcc	1492e8 <_Min_Stack_Size+0x1490e8>
    92e4:	000006e7 	andeq	r0, r0, r7, ror #13
    92e8:	001d1f04 	andseq	r1, sp, r4, lsl #30
    92ec:	55040100 	strpl	r0, [r4, #-256]	; 0xffffff00
    92f0:	0200001d 	andeq	r0, r0, #29
    92f4:	001ed104 	andseq	sp, lr, r4, lsl #2
    92f8:	06000300 	streq	r0, [r0], -r0, lsl #6
    92fc:	00001e8e 	andeq	r1, r0, lr, lsl #29
    9300:	06c83f05 	strbeq	r3, [r8], r5, lsl #30
    9304:	010f0000 	mrseq	r0, CPSR
    9308:	00000176 	andeq	r0, r0, r6, ror r1
    930c:	072f4805 	streq	r4, [pc, -r5, lsl #16]!
    9310:	54040000 	strpl	r0, [r4], #-0
    9314:	0000001e 	andeq	r0, r0, lr, lsl r0
    9318:	001f0204 	andseq	r0, pc, r4, lsl #4
    931c:	04040400 	streq	r0, [r4], #-1024	; 0xfffffc00
    9320:	2800001e 	stmdacs	r0, {r1, r2, r3, r4}
    9324:	001e3b04 	andseq	r3, lr, r4, lsl #22
    9328:	30044800 	andcc	r4, r4, r0, lsl #16
    932c:	1400001d 	strne	r0, [r0], #-29	; 0xffffffe3
    9330:	001ebb04 	andseq	fp, lr, r4, lsl #22
    9334:	3f041000 	svccc	0x00041000
    9338:	1c00001f 	stcne	0, cr0, [r0], {31}
    933c:	001c3504 	andseq	r3, ip, r4, lsl #10
    9340:	06001800 	streq	r1, [r0], -r0, lsl #16
    9344:	00001ee2 	andeq	r1, r0, r2, ror #29
    9348:	06f25005 	ldrbteq	r5, [r2], r5
    934c:	04100000 	ldreq	r0, [r0], #-0
    9350:	07675b05 	strbeq	r5, [r7, -r5, lsl #22]!
    9354:	10110000 	andsne	r0, r1, r0
    9358:	0500001c 	streq	r0, [r0, #-28]	; 0xffffffe4
    935c:	0001d65d 	andeq	sp, r1, sp, asr r6
    9360:	ad110000 	ldcge	0, cr0, [r1, #-0]
    9364:	0500001c 	streq	r0, [r0, #-28]	; 0xffffffe4
    9368:	0006e760 	andeq	lr, r6, r0, ror #14
    936c:	6d110200 	lfmvs	f0, 4, [r1, #-0]
    9370:	0500001e 	streq	r0, [r0, #-30]	; 0xffffffe2
    9374:	00072f63 	andeq	r2, r7, r3, ror #30
    9378:	06000300 	streq	r0, [r0], -r0, lsl #6
    937c:	00001d65 	andeq	r1, r0, r5, ror #26
    9380:	073a6505 	ldreq	r6, [sl, -r5, lsl #10]!
    9384:	10100000 	andsne	r0, r0, r0
    9388:	07c33206 	strbeq	r3, [r3, r6, lsl #4]
    938c:	5e110000 	cdppl	0, 1, cr0, cr1, cr0, {0}
    9390:	06000031 			; <UNDEFINED> instruction: 0x06000031
    9394:	0001e134 	andeq	lr, r1, r4, lsr r1
    9398:	21110000 	tstcs	r1, r0
    939c:	06000030 			; <UNDEFINED> instruction: 0x06000030
    93a0:	0001d637 	andeq	sp, r1, r7, lsr r6
    93a4:	8c110400 	cfldrshi	mvf0, [r1], {-0}
    93a8:	06000031 			; <UNDEFINED> instruction: 0x06000031
    93ac:	0001d63a 	andeq	sp, r1, sl, lsr r6
    93b0:	d2110600 	andsle	r0, r1, #0, 12
    93b4:	06000030 			; <UNDEFINED> instruction: 0x06000030
    93b8:	0001d63d 	andeq	sp, r1, sp, lsr r6
    93bc:	e2110800 	ands	r0, r1, #0, 16
    93c0:	06000030 			; <UNDEFINED> instruction: 0x06000030
    93c4:	0001d640 	andeq	sp, r1, r0, asr #12
    93c8:	93110a00 	tstls	r1, #0, 20
    93cc:	0600002e 	streq	r0, [r0], -lr, lsr #32
    93d0:	0001d643 	andeq	sp, r1, r3, asr #12
    93d4:	06000c00 	streq	r0, [r0], -r0, lsl #24
    93d8:	0000310a 	andeq	r3, r0, sl, lsl #2
    93dc:	07724506 	ldrbeq	r4, [r2, -r6, lsl #10]!
    93e0:	12100000 	andsne	r0, r0, #0
    93e4:	08433207 	stmdaeq	r3, {r0, r1, r2, r9, ip, sp}^
    93e8:	85110000 	ldrhi	r0, [r1, #-0]
    93ec:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    93f0:	0001d634 	andeq	sp, r1, r4, lsr r6
    93f4:	95110000 	ldrls	r0, [r1, #-0]
    93f8:	07000021 	streq	r0, [r0, -r1, lsr #32]
    93fc:	0001d637 	andeq	sp, r1, r7, lsr r6
    9400:	ae110200 	cdpge	2, 1, cr0, cr1, cr0, {0}
    9404:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    9408:	0001d63a 	andeq	sp, r1, sl, lsr r6
    940c:	86110400 	ldrhi	r0, [r1], -r0, lsl #8
    9410:	07000022 	streq	r0, [r0, -r2, lsr #32]
    9414:	0001d63d 	andeq	sp, r1, sp, lsr r6
    9418:	7c110600 	ldcvc	6, cr0, [r1], {-0}
    941c:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    9420:	0001d640 	andeq	sp, r1, r0, asr #12
    9424:	12110800 	andsne	r0, r1, #0, 16
    9428:	07000020 	streq	r0, [r0, -r0, lsr #32]
    942c:	0001d643 	andeq	sp, r1, r3, asr #12
    9430:	30110a00 	andscc	r0, r1, r0, lsl #20
    9434:	07000020 	streq	r0, [r0, -r0, lsr #32]
    9438:	0001d647 	andeq	sp, r1, r7, asr #12
    943c:	de110c00 	cdple	12, 1, cr0, cr1, cr0, {0}
    9440:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    9444:	0001d64d 	andeq	sp, r1, sp, asr #12
    9448:	b4110e00 	ldrlt	r0, [r1], #-3584	; 0xfffff200
    944c:	07000022 	streq	r0, [r0, -r2, lsr #32]
    9450:	0001d650 	andeq	sp, r1, r0, asr r6
    9454:	06001000 	streq	r1, [r0], -r0
    9458:	000022c6 	andeq	r2, r0, r6, asr #5
    945c:	07ce5107 	strbeq	r5, [lr, r7, lsl #2]
    9460:	0a100000 	beq	409468 <_Min_Stack_Size+0x409268>
    9464:	08933308 	ldmeq	r3, {r3, r8, r9, ip, sp}
    9468:	5b110000 	blpl	449470 <_Min_Stack_Size+0x449270>
    946c:	0800002a 	stmdaeq	r0, {r1, r3, r5}
    9470:	0001d635 	andeq	sp, r1, r5, lsr r6
    9474:	51110000 	tstpl	r1, r0
    9478:	08000023 	stmdaeq	r0, {r0, r1, r5}
    947c:	0001d638 	andeq	sp, r1, r8, lsr r6
    9480:	f5110200 			; <UNDEFINED> instruction: 0xf5110200
    9484:	0800002b 	stmdaeq	r0, {r0, r1, r3, r5}
    9488:	0001d63b 	andeq	sp, r1, fp, lsr r6
    948c:	ed110400 	cfldrs	mvf0, [r1, #-0]
    9490:	08000026 	stmdaeq	r0, {r1, r2, r5}
    9494:	0001d63f 	andeq	sp, r1, pc, lsr r6
    9498:	6d110600 	ldcvs	6, cr0, [r1, #-0]
    949c:	0800002d 	stmdaeq	r0, {r0, r2, r3, r5}
    94a0:	0001cb42 	andeq	ip, r1, r2, asr #22
    94a4:	06000800 	streq	r0, [r0], -r0, lsl #16
    94a8:	00002c00 	andeq	r2, r0, r0, lsl #24
    94ac:	084e4a08 	stmdaeq	lr, {r3, r9, fp, lr}^
    94b0:	04100000 	ldreq	r0, [r0], #-0
    94b4:	08d73209 	ldmeq	r7, {r0, r3, r9, ip, sp}^
    94b8:	7d110000 	ldcvc	0, cr0, [r1, #-0]
    94bc:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    94c0:	0001cb34 	andeq	ip, r1, r4, lsr fp
    94c4:	b2110000 	andslt	r0, r1, #0
    94c8:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    94cc:	0001cb39 	andeq	ip, r1, r9, lsr fp
    94d0:	8d110100 	ldfhis	f0, [r1, #-0]
    94d4:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    94d8:	0001cb3d 	andeq	ip, r1, sp, lsr fp
    94dc:	61110200 	tstvs	r1, r0, lsl #4
    94e0:	09000016 	stmdbeq	r0, {r1, r2, r4}
    94e4:	00023141 	andeq	r3, r2, r1, asr #2
    94e8:	06000300 	streq	r0, [r0], -r0, lsl #6
    94ec:	00001650 	andeq	r1, r0, r0, asr r6
    94f0:	089e4409 	ldmeq	lr, {r0, r3, sl, lr}
    94f4:	49120000 	ldmdbmi	r2, {}	; <UNPREDICTABLE>
    94f8:	0100003c 	tsteq	r0, ip, lsr r0
    94fc:	0068581e 	rsbeq	r5, r8, lr, lsl r8
    9500:	00008408 	andeq	r8, r0, r8, lsl #8
    9504:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    9508:	13000009 	movwne	r0, #9
    950c:	00003b46 	andeq	r3, r0, r6, asr #22
    9510:	07671f01 	strbeq	r1, [r7, -r1, lsl #30]!
    9514:	91020000 	mrsls	r0, (UNDEF: 2)
    9518:	3bc91374 	blcc	ff24e2f0 <BootRAM+0xe1bea91>
    951c:	20010000 	andcs	r0, r1, r0
    9520:	000007c3 	andeq	r0, r0, r3, asr #15
    9524:	00649102 	rsbeq	r9, r4, r2, lsl #2
    9528:	003bf912 	eorseq	pc, fp, r2, lsl r9	; <UNPREDICTABLE>
    952c:	dc360100 	ldfles	f0, [r6], #-0
    9530:	48080068 	stmdami	r8, {r3, r5, r6}
    9534:	01000000 	mrseq	r0, (UNDEF: 0)
    9538:	0009389c 	muleq	r9, ip, r8
    953c:	3b4b1300 	blcc	12ce144 <_Min_Stack_Size+0x12cdf44>
    9540:	37010000 	strcc	r0, [r1, -r0]
    9544:	00000767 	andeq	r0, r0, r7, ror #14
    9548:	00749102 	rsbseq	r9, r4, r2, lsl #2
    954c:	003bb912 	eorseq	fp, fp, r2, lsl r9
    9550:	24430100 	strbcs	r0, [r3], #-256	; 0xffffff00
    9554:	c4080069 	strgt	r0, [r8], #-105	; 0xffffff97
    9558:	01000000 	mrseq	r0, (UNDEF: 0)
    955c:	00096a9c 	muleq	r9, ip, sl
    9560:	3ab31300 	bcc	fecce168 <BootRAM+0xdc3e909>
    9564:	44010000 	strmi	r0, [r1], #-0
    9568:	00000843 	andeq	r0, r0, r3, asr #16
    956c:	13649102 	cmnne	r4, #-2147483648	; 0x80000000
    9570:	00003b4b 	andeq	r3, r0, fp, asr #22
    9574:	07674501 	strbeq	r4, [r7, -r1, lsl #10]!
    9578:	91020000 	mrsls	r0, (UNDEF: 2)
    957c:	53120060 	tstpl	r2, #96	; 0x60
    9580:	0100003a 	tsteq	r0, sl, lsr r0
    9584:	0069e879 	rsbeq	lr, r9, r9, ror r8
    9588:	00006208 	andeq	r6, r0, r8, lsl #4
    958c:	9c9c0100 	ldflss	f0, [ip], {0}
    9590:	13000009 	movwne	r0, #9
    9594:	00003cdc 	ldrdeq	r3, [r0], -ip
    9598:	08937a01 	ldmeq	r3, {r0, r9, fp, ip, sp, lr}
    959c:	91020000 	mrsls	r0, (UNDEF: 2)
    95a0:	3b89136c 	blcc	fe24e358 <BootRAM+0xd1beaf9>
    95a4:	7b010000 	blvc	495ac <_Min_Stack_Size+0x493ac>
    95a8:	000008d7 	ldrdeq	r0, [r0], -r7
    95ac:	00689102 	rsbeq	r9, r8, r2, lsl #2
    95b0:	003d5514 	eorseq	r5, sp, r4, lsl r5
    95b4:	4c8f0100 	stfmis	f0, [pc], {0}
    95b8:	4408006a 	strmi	r0, [r8], #-106	; 0xffffff96
    95bc:	01000000 	mrseq	r0, (UNDEF: 0)
    95c0:	3b3d149c 	blcc	f4e838 <_Min_Stack_Size+0xf4e638>
    95c4:	aa010000 	bge	495cc <_Min_Stack_Size+0x493cc>
    95c8:	08006a90 	stmdaeq	r0, {r4, r7, r9, fp, sp, lr}
    95cc:	0000004a 	andeq	r0, r0, sl, asr #32
    95d0:	6c159c01 	ldcvs	12, cr9, [r5], {1}
    95d4:	0a000002 	beq	95e4 <_Min_Stack_Size+0x93e4>
    95d8:	09ca06ce 	stmibeq	sl, {r1, r2, r3, r6, r7, r9, sl}^
    95dc:	bd080000 	stclt	0, cr0, [r8, #-0]
    95e0:	00000001 	andeq	r0, r0, r1
    95e4:	00000ac9 	andeq	r0, r0, r9, asr #21
    95e8:	1efe0004 	cdpne	0, 15, cr0, cr14, cr4, {0}
    95ec:	01040000 	mrseq	r0, (UNDEF: 4)
    95f0:	00000111 	andeq	r0, r0, r1, lsl r1
    95f4:	003e710c 	eorseq	r7, lr, ip, lsl #2
    95f8:	00036e00 	andeq	r6, r3, r0, lsl #28
    95fc:	000be800 	andeq	lr, fp, r0, lsl #16
    9600:	00000000 	andeq	r0, r0, r0
    9604:	00438900 	subeq	r8, r3, r0, lsl #18
    9608:	06010200 	streq	r0, [r1], -r0, lsl #4
    960c:	00000192 	muleq	r0, r2, r1
    9610:	0000e303 	andeq	lr, r0, r3, lsl #6
    9614:	371d0300 	ldrcc	r0, [sp, -r0, lsl #6]
    9618:	02000000 	andeq	r0, r0, #0
    961c:	01900801 	orrseq	r0, r0, r1, lsl #16
    9620:	02020000 	andeq	r0, r2, #0
    9624:	00009505 	andeq	r9, r0, r5, lsl #10
    9628:	00720300 	rsbseq	r0, r2, r0, lsl #6
    962c:	2b030000 	blcs	c9634 <_Min_Stack_Size+0xc9434>
    9630:	00000050 	andeq	r0, r0, r0, asr r0
    9634:	f2070202 	vhsub.s8	d0, d7, d2
    9638:	03000001 	movweq	r0, #1
    963c:	0000066f 	andeq	r0, r0, pc, ror #12
    9640:	00623f03 	rsbeq	r3, r2, r3, lsl #30
    9644:	04020000 	streq	r0, [r2], #-0
    9648:	0000bd05 	andeq	fp, r0, r5, lsl #26
    964c:	00670300 	rsbeq	r0, r7, r0, lsl #6
    9650:	41030000 	mrsmi	r0, (UNDEF: 3)
    9654:	00000074 	andeq	r0, r0, r4, ror r0
    9658:	c9070402 	stmdbgt	r7, {r1, sl}
    965c:	02000001 	andeq	r0, r0, #1
    9660:	00b80508 	adcseq	r0, r8, r8, lsl #10
    9664:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    9668:	0001c407 	andeq	ip, r1, r7, lsl #8
    966c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    9670:	00746e69 	rsbseq	r6, r4, r9, ror #28
    9674:	ce070402 	cdpgt	4, 0, cr0, cr7, cr2, {0}
    9678:	02000001 	andeq	r0, r0, #1
    967c:	02f80408 	rscseq	r0, r8, #8, 8	; 0x8000000
    9680:	04050000 	streq	r0, [r5], #-0
    9684:	59070402 	stmdbpl	r7, {r1, sl}
    9688:	06000000 	streq	r0, [r0], -r0
    968c:	0000ad04 	andeq	sl, r0, r4, lsl #26
    9690:	08010200 	stmdaeq	r1, {r9}
    9694:	00000199 	muleq	r0, r9, r1
    9698:	0000e503 	andeq	lr, r0, r3, lsl #10
    969c:	2c180400 	cfldrscs	mvf0, [r8], {-0}
    96a0:	03000000 	movweq	r0, #0
    96a4:	00000074 	andeq	r0, r0, r4, ror r0
    96a8:	00452404 	subeq	r2, r5, r4, lsl #8
    96ac:	71030000 	mrsvc	r0, (UNDEF: 3)
    96b0:	04000006 	streq	r0, [r0], #-6
    96b4:	0000572c 	andeq	r5, r0, ip, lsr #14
    96b8:	00690300 	rsbeq	r0, r9, r0, lsl #6
    96bc:	30040000 	andcc	r0, r4, r0
    96c0:	00000069 	andeq	r0, r0, r9, rrx
    96c4:	0040a703 	subeq	sl, r0, r3, lsl #14
    96c8:	62380200 	eorsvs	r0, r8, #0, 4
    96cc:	03000000 	movweq	r0, #0
    96d0:	000040a6 	andeq	r4, r0, r6, lsr #1
    96d4:	00743902 	rsbseq	r3, r4, r2, lsl #18
    96d8:	ab030000 	blge	c96e0 <_Min_Stack_Size+0xc94e0>
    96dc:	0200003e 	andeq	r0, r0, #62	; 0x3e
    96e0:	0000d53f 	andeq	sp, r0, pc, lsr r5
    96e4:	b4040600 	strlt	r0, [r4], #-1536	; 0xfffffa00
    96e8:	03000000 	movweq	r0, #0
    96ec:	00003e95 	muleq	r0, r5, lr
    96f0:	01124605 	tsteq	r2, r5, lsl #12
    96f4:	04060000 	streq	r0, [r6], #-0
    96f8:	00000118 	andeq	r0, r0, r8, lsl r1
    96fc:	00401d07 	subeq	r1, r0, r7, lsl #26
    9700:	3e020300 	cdpcc	3, 0, cr0, cr2, cr0, {0}
    9704:	30060000 	andcc	r0, r6, r0
    9708:	00000128 	andeq	r0, r0, r8, lsr #2
    970c:	012e0406 			; <UNDEFINED> instruction: 0x012e0406
    9710:	a5070000 	strge	r0, [r7, #-0]
    9714:	0300003f 	movweq	r0, #63	; 0x3f
    9718:	00004000 	andeq	r4, r0, r0
    971c:	011d2507 	tsteq	sp, r7, lsl #10
    9720:	d5080000 	strle	r0, [r8, #-0]
    9724:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9728:	000000b4 	strheq	r0, [r0], -r4
    972c:	0000bf08 	andeq	fp, r0, r8, lsl #30
    9730:	00b40900 	adcseq	r0, r4, r0, lsl #18
    9734:	010a0000 	mrseq	r0, (UNDEF: 10)
    9738:	00000037 	andeq	r0, r0, r7, lsr r0
    973c:	6c020708 	stcvs	7, cr0, [r2], {8}
    9740:	0b000001 	bleq	974c <_Min_Stack_Size+0x954c>
    9744:	00001c74 	andeq	r1, r0, r4, ror ip
    9748:	45530c00 	ldrbmi	r0, [r3, #-3072]	; 0xfffff400
    974c:	00010054 	andeq	r0, r1, r4, asr r0
    9750:	e9081c0d 	stmdb	r8, {r0, r2, r3, sl, fp, ip}
    9754:	0001d103 	andeq	sp, r1, r3, lsl #2
    9758:	52430e00 	subpl	r0, r3, #0, 28
    975c:	eb08004c 	bl	209894 <_Min_Stack_Size+0x209694>
    9760:	00013e03 	andeq	r3, r1, r3, lsl #28
    9764:	430e0000 	movwmi	r0, #57344	; 0xe000
    9768:	08004852 	stmdaeq	r0, {r1, r4, r6, fp, lr}
    976c:	013e03ec 	teqeq	lr, ip, ror #7
    9770:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    9774:	00524449 	subseq	r4, r2, r9, asr #8
    9778:	3e03ed08 	cdpcc	13, 0, cr14, cr3, cr8, {0}
    977c:	08000001 	stmdaeq	r0, {r0}
    9780:	52444f0e 	subpl	r4, r4, #14, 30	; 0x38
    9784:	03ee0800 	mvneq	r0, #0, 16
    9788:	0000013e 	andeq	r0, r0, lr, lsr r1
    978c:	1d040f0c 	stcne	15, cr0, [r4, #-48]	; 0xffffffd0
    9790:	ef080000 	svc	0x00080000
    9794:	00013e03 	andeq	r3, r1, r3, lsl #28
    9798:	420e1000 	andmi	r1, lr, #0
    979c:	08005252 	stmdaeq	r0, {r1, r4, r6, r9, ip, lr}
    97a0:	013e03f0 	teqeq	lr, r0	; <illegal shifter operand>
    97a4:	0f140000 	svceq	0x00140000
    97a8:	00001dd5 	ldrdeq	r1, [r0], -r5
    97ac:	3e03f108 	mvfccs	f7, #0.0
    97b0:	18000001 	stmdane	r0, {r0}
    97b4:	1bfc1000 	blne	fff0d7bc <BootRAM+0xee7df5d>
    97b8:	f2080000 	vhadd.s8	d0, d8, d0
    97bc:	00016c03 	andeq	r6, r1, r3, lsl #24
    97c0:	08240d00 	stmdaeq	r4!, {r8, sl, fp}
    97c4:	02cf0488 	sbceq	r0, pc, #136, 8	; 0x88000000
    97c8:	430e0000 	movwmi	r0, #57344	; 0xe000
    97cc:	08003152 	stmdaeq	r0, {r1, r4, r6, r8, ip, sp}
    97d0:	0148048a 	smlalbbeq	r0, r8, sl, r4
    97d4:	0f000000 	svceq	0x00000000
    97d8:	000003c2 	andeq	r0, r0, r2, asr #7
    97dc:	bf048b08 	svclt	0x00048b08
    97e0:	02000000 	andeq	r0, r0, #0
    97e4:	3252430e 	subscc	r4, r2, #939524096	; 0x38000000
    97e8:	048c0800 	streq	r0, [ip], #2048	; 0x800
    97ec:	00000148 	andeq	r0, r0, r8, asr #2
    97f0:	03cc0f04 	biceq	r0, ip, #4, 30
    97f4:	8d080000 	stchi	0, cr0, [r8, #-0]
    97f8:	0000bf04 	andeq	fp, r0, r4, lsl #30
    97fc:	530e0600 	movwpl	r0, #58880	; 0xe600
    9800:	8e080052 	mcrhi	0, 0, r0, cr8, cr2, {2}
    9804:	00014804 	andeq	r4, r1, r4, lsl #16
    9808:	d60f0800 	strle	r0, [pc], -r0, lsl #16
    980c:	08000003 	stmdaeq	r0, {r0, r1}
    9810:	00bf048f 	adcseq	r0, pc, pc, lsl #9
    9814:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    9818:	08005244 	stmdaeq	r0, {r2, r6, r9, ip, lr}
    981c:	01480490 			; <UNDEFINED> instruction: 0x01480490
    9820:	0f0c0000 	svceq	0x000c0000
    9824:	000002ab 	andeq	r0, r0, fp, lsr #5
    9828:	bf049108 	svclt	0x00049108
    982c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    9830:	00218f0f 	eoreq	r8, r1, pc, lsl #30
    9834:	04920800 	ldreq	r0, [r2], #2048	; 0x800
    9838:	00000148 	andeq	r0, r0, r8, asr #2
    983c:	03ea0f10 	mvneq	r0, #16, 30	; 0x40
    9840:	93080000 	movwls	r0, #32768	; 0x8000
    9844:	0000bf04 	andeq	fp, r0, r4, lsl #30
    9848:	460f1200 	strmi	r1, [pc], -r0, lsl #4
    984c:	08000020 	stmdaeq	r0, {r5}
    9850:	01480494 			; <UNDEFINED> instruction: 0x01480494
    9854:	0f140000 	svceq	0x00140000
    9858:	000003f4 	strdeq	r0, [r0], -r4
    985c:	bf049508 	svclt	0x00049508
    9860:	16000000 	strne	r0, [r0], -r0
    9864:	0020290f 	eoreq	r2, r0, pc, lsl #18
    9868:	04960800 	ldreq	r0, [r6], #2048	; 0x800
    986c:	00000148 	andeq	r0, r0, r8, asr #2
    9870:	02d70f18 	sbcseq	r0, r7, #24, 30	; 0x60
    9874:	97080000 	strls	r0, [r8, -r0]
    9878:	0000bf04 	andeq	fp, r0, r4, lsl #30
    987c:	630f1a00 	movwvs	r1, #64000	; 0xfa00
    9880:	08000021 	stmdaeq	r0, {r0, r5}
    9884:	01480498 			; <UNDEFINED> instruction: 0x01480498
    9888:	0f1c0000 	svceq	0x001c0000
    988c:	00000415 	andeq	r0, r0, r5, lsl r4
    9890:	bf049908 	svclt	0x00049908
    9894:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    9898:	0022a70f 	eoreq	sl, r2, pc, lsl #14
    989c:	049a0800 	ldreq	r0, [sl], #2048	; 0x800
    98a0:	00000148 	andeq	r0, r0, r8, asr #2
    98a4:	041f0f20 	ldreq	r0, [pc], #-3872	; 98ac <_Min_Stack_Size+0x96ac>
    98a8:	9b080000 	blls	2098b0 <_Min_Stack_Size+0x2096b0>
    98ac:	0000bf04 	andeq	fp, r0, r4, lsl #30
    98b0:	10002200 	andne	r2, r0, r0, lsl #4
    98b4:	0000219e 	muleq	r0, lr, r1
    98b8:	dd049c08 	stcle	12, cr9, [r4, #-32]	; 0xffffffe0
    98bc:	11000001 	tstne	r0, r1
    98c0:	000000b4 	strheq	r0, [r0], -r4
    98c4:	000002eb 	andeq	r0, r0, fp, ror #5
    98c8:	0000a012 	andeq	sl, r0, r2, lsl r0
    98cc:	13000500 	movwne	r0, #1280	; 0x500
    98d0:	00003701 	andeq	r3, r0, r1, lsl #14
    98d4:	58cc0900 	stmiapl	ip, {r8, fp}^
    98d8:	0b000003 	bleq	98ec <_Min_Stack_Size+0x96ec>
    98dc:	0000089b 	muleq	r0, fp, r8
    98e0:	0c150b00 			; <UNDEFINED> instruction: 0x0c150b00
    98e4:	0b010000 	bleq	498ec <_Min_Stack_Size+0x496ec>
    98e8:	00000b47 	andeq	r0, r0, r7, asr #22
    98ec:	09d70b02 	ldmibeq	r7, {r1, r8, r9, fp}^
    98f0:	0b030000 	bleq	c98f8 <_Min_Stack_Size+0xc96f8>
    98f4:	0000080c 	andeq	r0, r0, ip, lsl #16
    98f8:	0b030b04 	bleq	cc510 <_Min_Stack_Size+0xcc310>
    98fc:	0b050000 	bleq	149904 <_Min_Stack_Size+0x149704>
    9900:	0000079e 	muleq	r0, lr, r7
    9904:	0cd50b06 	vldmiaeq	r5, {d16-d18}
    9908:	0b070000 	bleq	1c9910 <_Min_Stack_Size+0x1c9710>
    990c:	00000a8f 	andeq	r0, r0, pc, lsl #21
    9910:	0c2c0b08 			; <UNDEFINED> instruction: 0x0c2c0b08
    9914:	0b090000 	bleq	24991c <_Min_Stack_Size+0x24971c>
    9918:	0000086b 	andeq	r0, r0, fp, ror #16
    991c:	0aee0b0a 	beq	ffb8c54c <BootRAM+0xeafcced>
    9920:	0b0b0000 	bleq	2c9928 <_Min_Stack_Size+0x2c9728>
    9924:	00000765 	andeq	r0, r0, r5, ror #14
    9928:	0a440b0c 	beq	110c560 <_Min_Stack_Size+0x110c360>
    992c:	0b0d0000 	bleq	349934 <_Min_Stack_Size+0x349734>
    9930:	000006ec 	andeq	r0, r0, ip, ror #13
    9934:	0b380b0e 	bleq	e0c574 <_Min_Stack_Size+0xe0c374>
    9938:	000f0000 	andeq	r0, pc, r0
    993c:	00370113 	eorseq	r0, r7, r3, lsl r1
    9940:	e7090000 	str	r0, [r9, -r0]
    9944:	00000389 	andeq	r0, r0, r9, lsl #7
    9948:	0009740b 	andeq	r7, r9, fp, lsl #8
    994c:	8f0b0000 	svchi	0x000b0000
    9950:	01000007 	tsteq	r0, r7
    9954:	000a030b 	andeq	r0, sl, fp, lsl #6
    9958:	8c0b0200 	sfmhi	f0, 4, [fp], {-0}
    995c:	03000008 	movweq	r0, #8
    9960:	0009a90b 	andeq	sl, r9, fp, lsl #18
    9964:	4b0b0400 	blmi	2ca96c <_Min_Stack_Size+0x2ca76c>
    9968:	0500000c 	streq	r0, [r0, #-12]
    996c:	37010a00 	strcc	r0, [r1, -r0, lsl #20]
    9970:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    9974:	03a3013b 			; <UNDEFINED> instruction: 0x03a3013b
    9978:	f40b0000 	vst4.8	{d0-d3}, [fp], r0
    997c:	01000009 	tsteq	r0, r9
    9980:	000d250b 	andeq	r2, sp, fp, lsl #10
    9984:	10000200 	andne	r0, r0, r0, lsl #4
    9988:	000008b6 			; <UNDEFINED> instruction: 0x000008b6
    998c:	89013e09 	stmdbhi	r1, {r0, r3, r9, sl, fp, ip, sp}
    9990:	14000003 	strne	r0, [r0], #-3
    9994:	000007ae 	andeq	r0, r0, lr, lsr #15
    9998:	01440917 	cmpeq	r4, r7, lsl r9
    999c:	00000408 	andeq	r0, r0, r8, lsl #8
    99a0:	63616d0e 	cmnvs	r1, #896	; 0x380
    99a4:	01460900 	cmpeq	r6, r0, lsl #18
    99a8:	000002db 	ldrdeq	r0, [r0], -fp
    99ac:	70690e00 	rsbvc	r0, r9, r0, lsl #28
    99b0:	01470900 	cmpeq	r7, r0, lsl #18
    99b4:	00000408 	andeq	r0, r0, r8, lsl #8
    99b8:	6e730e06 	cdpvs	14, 7, cr0, cr3, cr6, {0}
    99bc:	01480900 	cmpeq	r8, r0, lsl #18
    99c0:	00000408 	andeq	r0, r0, r8, lsl #8
    99c4:	77670e0a 	strbvc	r0, [r7, -sl, lsl #28]!
    99c8:	01490900 	cmpeq	r9, r0, lsl #18
    99cc:	00000408 	andeq	r0, r0, r8, lsl #8
    99d0:	6e640e0e 	cdpvs	14, 6, cr0, cr4, cr14, {0}
    99d4:	4a090073 	bmi	249ba8 <_Min_Stack_Size+0x2499a8>
    99d8:	00040801 	andeq	r0, r4, r1, lsl #16
    99dc:	660f1200 	strvs	r1, [pc], -r0, lsl #4
    99e0:	0900000c 	stmdbeq	r0, {r2, r3}
    99e4:	03a3014b 			; <UNDEFINED> instruction: 0x03a3014b
    99e8:	00160000 	andseq	r0, r6, r0
    99ec:	0000b411 	andeq	fp, r0, r1, lsl r4
    99f0:	00041800 	andeq	r1, r4, r0, lsl #16
    99f4:	00a01200 	adceq	r1, r0, r0, lsl #4
    99f8:	00030000 	andeq	r0, r3, r0
    99fc:	0009e810 	andeq	lr, r9, r0, lsl r8
    9a00:	014c0900 	cmpeq	ip, r0, lsl #18
    9a04:	000003af 	andeq	r0, r0, pc, lsr #7
    9a08:	0037010a 	eorseq	r0, r7, sl, lsl #2
    9a0c:	590a0000 	stmdbpl	sl, {}	; <UNPREDICTABLE>
    9a10:	00046201 	andeq	r6, r4, r1, lsl #4
    9a14:	068d0b00 	streq	r0, [sp], r0, lsl #22
    9a18:	0b000000 	bleq	9a20 <_Min_Stack_Size+0x9820>
    9a1c:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    9a20:	052f0b01 	streq	r0, [pc, #-2817]!	; 8f27 <_Min_Stack_Size+0x8d27>
    9a24:	0b020000 	bleq	89a2c <_Min_Stack_Size+0x8982c>
    9a28:	00000475 	andeq	r0, r0, r5, ror r4
    9a2c:	06b20b03 	ldrteq	r0, [r2], r3, lsl #22
    9a30:	0b040000 	bleq	109a38 <_Min_Stack_Size+0x109838>
    9a34:	0000058b 	andeq	r0, r0, fp, lsl #11
    9a38:	053f0b05 	ldreq	r0, [pc, #-2821]!	; 8f3b <_Min_Stack_Size+0x8d3b>
    9a3c:	0b060000 	bleq	189a44 <_Min_Stack_Size+0x189844>
    9a40:	00000635 	andeq	r0, r0, r5, lsr r6
    9a44:	01130007 	tsteq	r3, r7
    9a48:	00000037 	andeq	r0, r0, r7, lsr r0
    9a4c:	048d3f0b 	streq	r3, [sp], #3851	; 0xf0b
    9a50:	490b0000 	stmdbmi	fp, {}	; <UNPREDICTABLE>
    9a54:	0000000e 	andeq	r0, r0, lr
    9a58:	0014100b 	andseq	r1, r4, fp
    9a5c:	d90b0100 	stmdble	fp, {r8}
    9a60:	0200000e 	andeq	r0, r0, #14
    9a64:	0013c40b 	andseq	ip, r3, fp, lsl #8
    9a68:	9a0b0300 	bls	2ca670 <_Min_Stack_Size+0x2ca470>
    9a6c:	0400000e 	streq	r0, [r0], #-14
    9a70:	00b41100 	adcseq	r1, r4, r0, lsl #2
    9a74:	049d0000 	ldreq	r0, [sp], #0
    9a78:	a0120000 	andsge	r0, r2, r0
    9a7c:	7f000000 	svcvc	0x00000000
    9a80:	0c5c1500 	cfldr64eq	mvdx1, [ip], {-0}
    9a84:	00051e9c 	muleq	r5, ip, lr
    9a88:	3f691600 	svccc	0x00691600
    9a8c:	9d0c0000 	stcls	0, cr0, [ip, #-0]
    9a90:	0000009e 	muleq	r0, lr, r0
    9a94:	05b81600 	ldreq	r1, [r8, #1536]!	; 0x600
    9a98:	9e0c0000 	cdpls	0, 0, cr0, cr12, cr0, {0}
    9a9c:	0000053e 	andeq	r0, r0, lr, lsr r5
    9aa0:	3ef51604 	cdpcc	6, 15, cr1, cr5, cr4, {0}
    9aa4:	a00c0000 	andge	r0, ip, r0
    9aa8:	00000544 	andeq	r0, r0, r4, asr #10
    9aac:	3f161608 	svccc	0x00161608
    9ab0:	a20c0000 	andge	r0, ip, #0
    9ab4:	00000554 	andeq	r0, r0, r4, asr r5
    9ab8:	3de3163a 	stclcc	6, cr1, [r3, #232]!	; 0xe8
    9abc:	a30c0000 	movwge	r0, #49152	; 0xc000
    9ac0:	00000554 	andeq	r0, r0, r4, asr r5
    9ac4:	3fce1647 	svccc	0x00ce1647
    9ac8:	a50c0000 	strge	r0, [ip, #-0]
    9acc:	000000b4 	strheq	r0, [r0], -r4
    9ad0:	3f4e1654 	svccc	0x004e1654
    9ad4:	a60c0000 	strge	r0, [ip], -r0
    9ad8:	000000b4 	strheq	r0, [r0], -r4
    9adc:	3e101655 	mrccc	6, 0, r1, cr0, cr5, {2}
    9ae0:	a70c0000 	strge	r0, [ip, -r0]
    9ae4:	000000b4 	strheq	r0, [r0], -r4
    9ae8:	65731756 	ldrbvs	r1, [r3, #-1878]!	; 0xfffff8aa
    9aec:	a90c0071 	stmdbge	ip, {r0, r4, r5, r6}
    9af0:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    9af4:	42b41658 	adcsmi	r1, r4, #88, 12	; 0x5800000
    9af8:	aa0c0000 	bge	309b00 <_Min_Stack_Size+0x309900>
    9afc:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    9b00:	8918005a 	ldmdbhi	r8, {r1, r3, r4, r6}
    9b04:	37000000 	strcc	r0, [r0, -r0]
    9b08:	19000005 	stmdbne	r0, {r0, r2}
    9b0c:	0000009e 	muleq	r0, lr, r0
    9b10:	00053719 	andeq	r3, r5, r9, lsl r7
    9b14:	00901900 	addseq	r1, r0, r0, lsl #18
    9b18:	06000000 	streq	r0, [r0], -r0
    9b1c:	00053d04 	andeq	r3, r5, r4, lsl #26
    9b20:	04061a00 	streq	r1, [r6], #-2560	; 0xfffff600
    9b24:	0000051e 	andeq	r0, r0, lr, lsl r5
    9b28:	0000ad11 	andeq	sl, r0, r1, lsl sp
    9b2c:	00055400 	andeq	r5, r5, r0, lsl #8
    9b30:	00a01200 	adceq	r1, r0, r0, lsl #4
    9b34:	00310000 	eorseq	r0, r1, r0
    9b38:	0000ad11 	andeq	sl, r0, r1, lsl sp
    9b3c:	00056400 	andeq	r6, r5, r0, lsl #8
    9b40:	00a01200 	adceq	r1, r0, r0, lsl #4
    9b44:	000c0000 	andeq	r0, ip, r0
    9b48:	003e1e03 	eorseq	r1, lr, r3, lsl #28
    9b4c:	9dab0c00 	stcls	12, cr0, [fp]
    9b50:	1b000004 	blne	9b68 <_Min_Stack_Size+0x9968>
    9b54:	00003f57 	andeq	r3, r0, r7, asr pc
    9b58:	8703bf02 	strhi	fp, [r3, -r2, lsl #30]
    9b5c:	1c000005 	stcne	0, cr0, [r0], {5}
    9b60:	00003df5 	strdeq	r3, [r0], -r5
    9b64:	00d5c102 	sbcseq	ip, r5, r2, lsl #2
    9b68:	1d000000 	stcne	0, cr0, [r0, #-0]
    9b6c:	00003e33 	andeq	r3, r0, r3, lsr lr
    9b70:	6adc6701 	bvs	ff72377c <BootRAM+0xe693f1d>
    9b74:	00140800 	andseq	r0, r4, r0, lsl #16
    9b78:	9c010000 	stcls	0, cr0, [r1], {-0}
    9b7c:	003fef1d 	eorseq	lr, pc, sp, lsl pc	; <UNPREDICTABLE>
    9b80:	f06b0100 			; <UNDEFINED> instruction: 0xf06b0100
    9b84:	1408006a 	strne	r0, [r8], #-106	; 0xffffff96
    9b88:	01000000 	mrseq	r0, (UNDEF: 0)
    9b8c:	3fb51e9c 	svccc	0x00b51e9c
    9b90:	70010000 	andvc	r0, r1, r0
    9b94:	08006b04 	stmdaeq	r0, {r2, r8, r9, fp, sp, lr}
    9b98:	00000034 	andeq	r0, r0, r4, lsr r0
    9b9c:	05cc9c01 	strbeq	r9, [ip, #3073]	; 0xc01
    9ba0:	771f0000 	ldrvc	r0, [pc, -r0]
    9ba4:	70010062 	andvc	r0, r1, r2, rrx
    9ba8:	000000b4 	strheq	r0, [r0], -r4
    9bac:	00779102 	rsbseq	r9, r7, r2, lsl #2
    9bb0:	00405a20 	subeq	r5, r0, r0, lsr #20
    9bb4:	b4770100 	ldrbtlt	r0, [r7], #-256	; 0xffffff00
    9bb8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    9bbc:	3008006b 	andcc	r0, r8, fp, rrx
    9bc0:	01000000 	mrseq	r0, (UNDEF: 0)
    9bc4:	0005f29c 	muleq	r5, ip, r2
    9bc8:	00692100 	rsbeq	r2, r9, r0, lsl #2
    9bcc:	00b47801 	adcseq	r7, r4, r1, lsl #16
    9bd0:	91020000 	mrsls	r0, (UNDEF: 2)
    9bd4:	b2220077 	eorlt	r0, r2, #119	; 0x77
    9bd8:	01000040 	tsteq	r0, r0, asr #32
    9bdc:	0000b481 	andeq	fp, r0, r1, lsl #9
    9be0:	006b6800 	rsbeq	r6, fp, r0, lsl #16
    9be4:	00005c08 	andeq	r5, r0, r8, lsl #24
    9be8:	369c0100 	ldrcc	r0, [ip], r0, lsl #2
    9bec:	23000006 	movwcs	r0, #6
    9bf0:	00003e4e 	andeq	r3, r0, lr, asr #28
    9bf4:	01018101 	tsteq	r1, r1, lsl #2
    9bf8:	91020000 	mrsls	r0, (UNDEF: 2)
    9bfc:	14d2236c 	ldrbne	r2, [r2], #876	; 0x36c
    9c00:	81010000 	mrshi	r0, (UNDEF: 1)
    9c04:	00000101 	andeq	r0, r0, r1, lsl #2
    9c08:	21689102 	cmncs	r8, r2, lsl #2
    9c0c:	00706d74 	rsbseq	r6, r0, r4, ror sp
    9c10:	00b48201 	adcseq	r8, r4, r1, lsl #4
    9c14:	91020000 	mrsls	r0, (UNDEF: 2)
    9c18:	bf200077 	svclt	0x00200077
    9c1c:	0100003e 	tsteq	r0, lr, lsr r0
    9c20:	0000898e 	andeq	r8, r0, lr, lsl #19
    9c24:	006bc400 	rsbeq	ip, fp, r0, lsl #8
    9c28:	00004c08 	andeq	r4, r0, r8, lsl #24
    9c2c:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
    9c30:	23000006 	movwcs	r0, #6
    9c34:	00003f69 	andeq	r3, r0, r9, ror #30
    9c38:	009e8e01 	addseq	r8, lr, r1, lsl #28
    9c3c:	91020000 	mrsls	r0, (UNDEF: 2)
    9c40:	75621f6c 	strbvc	r1, [r2, #-3948]!	; 0xfffff094
    9c44:	8e010066 	cdphi	0, 0, cr0, cr1, cr6, {3}
    9c48:	00000537 	andeq	r0, r0, r7, lsr r5
    9c4c:	23689102 	cmncs	r8, #-2147483648	; 0x80000000
    9c50:	00005869 	andeq	r5, r0, r9, ror #16
    9c54:	00908e01 	addseq	r8, r0, r1, lsl #28
    9c58:	91020000 	mrsls	r0, (UNDEF: 2)
    9c5c:	65722164 	ldrbvs	r2, [r2, #-356]!	; 0xfffffe9c
    9c60:	8f010074 	svchi	0x00010074
    9c64:	000000ca 	andeq	r0, r0, sl, asr #1
    9c68:	21709102 	cmncs	r0, r2, lsl #2
    9c6c:	01006e73 	tsteq	r0, r3, ror lr
    9c70:	0000b48f 	andeq	fp, r0, pc, lsl #9
    9c74:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    9c78:	3f1f2000 	svccc	0x001f2000
    9c7c:	97010000 	strls	r0, [r1, -r0]
    9c80:	00000089 	andeq	r0, r0, r9, lsl #1
    9c84:	08006c10 	stmdaeq	r0, {r4, sl, fp, sp, lr}
    9c88:	000000e4 	andeq	r0, r0, r4, ror #1
    9c8c:	06f59c01 	ldrbteq	r9, [r5], r1, lsl #24
    9c90:	d7240000 	strle	r0, [r4, -r0]!
    9c94:	0100003e 	tsteq	r0, lr, lsr r0
    9c98:	00008998 	muleq	r0, r8, r9
    9c9c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    9ca0:	003eea24 	eorseq	lr, lr, r4, lsr #20
    9ca4:	89980100 	ldmibhi	r8, {r8}
    9ca8:	02000000 	andeq	r0, r0, #0
    9cac:	31247091 			; <UNDEFINED> instruction: 0x31247091
    9cb0:	01000040 	tsteq	r0, r0, asr #32
    9cb4:	00008998 	muleq	r0, r8, r9
    9cb8:	68910200 	ldmvs	r1, {r9}
    9cbc:	00429d24 	subeq	r9, r2, r4, lsr #26
    9cc0:	b4990100 	ldrlt	r0, [r9], #256	; 0x100
    9cc4:	02000000 	andeq	r0, r0, #0
    9cc8:	37246f91 			; <UNDEFINED> instruction: 0x37246f91
    9ccc:	01000041 	tsteq	r0, r1, asr #32
    9cd0:	0000bf9a 	muleq	r0, sl, pc	; <UNPREDICTABLE>
    9cd4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    9cd8:	40a12200 	adcmi	r2, r1, r0, lsl #4
    9cdc:	c1010000 	mrsgt	r0, (UNDEF: 1)
    9ce0:	00000089 	andeq	r0, r0, r9, lsl #1
    9ce4:	08006cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, sp, lr}
    9ce8:	000001f8 	strdeq	r0, [r0], -r8
    9cec:	071d9c01 	ldreq	r9, [sp, -r1, lsl #24]
    9cf0:	74210000 	strtvc	r0, [r1], #-0
    9cf4:	0100706d 	tsteq	r0, sp, rrx
    9cf8:	0000b4c2 	andeq	fp, r0, r2, asr #9
    9cfc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    9d00:	3f7e2500 	svccc	0x007e2500
    9d04:	2c010000 	stccs	0, cr0, [r1], {-0}
    9d08:	006eec01 	rsbeq	lr, lr, r1, lsl #24
    9d0c:	00038808 	andeq	r8, r3, r8, lsl #16
    9d10:	909c0100 	addsls	r0, ip, r0, lsl #2
    9d14:	26000007 	strcs	r0, [r0], -r7
    9d18:	00003f09 	andeq	r3, r0, r9, lsl #30
    9d1c:	9e012c01 	cdpls	12, 0, cr2, cr1, cr1, {0}
    9d20:	03000000 	movweq	r0, #0
    9d24:	277fac91 			; <UNDEFINED> instruction: 0x277fac91
    9d28:	0000407c 	andeq	r4, r0, ip, ror r0
    9d2c:	d5012d01 	strle	r2, [r1, #-3329]	; 0xfffff2ff
    9d30:	02000000 	andeq	r0, r0, #0
    9d34:	bc276c91 	stclt	12, cr6, [r7], #-580	; 0xfffffdbc
    9d38:	01000040 	tsteq	r0, r0, asr #32
    9d3c:	0790012e 	ldreq	r0, [r0, lr, lsr #2]
    9d40:	91020000 	mrsls	r0, (UNDEF: 2)
    9d44:	403f2760 	eorsmi	r2, pc, r0, ror #14
    9d48:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    9d4c:	0007a001 	andeq	sl, r7, r1
    9d50:	48910200 	ldmmi	r1, {r9}
    9d54:	000ad227 	andeq	sp, sl, r7, lsr #4
    9d58:	012f0100 			; <UNDEFINED> instruction: 0x012f0100
    9d5c:	00000418 	andeq	r0, r0, r8, lsl r4
    9d60:	7fb09103 	svcvc	0x00b09103
    9d64:	67736d28 	ldrbvs	r6, [r3, -r8, lsr #26]!
    9d68:	01300100 	teqeq	r0, r0, lsl #2
    9d6c:	000000a7 	andeq	r0, r0, r7, lsr #1
    9d70:	00689102 	rsbeq	r9, r8, r2, lsl #2
    9d74:	0000ad11 	andeq	sl, r0, r1, lsl sp
    9d78:	0007a000 	andeq	sl, r7, r0
    9d7c:	00a01200 	adceq	r1, r0, r0, lsl #4
    9d80:	00050000 	andeq	r0, r5, r0
    9d84:	0000ad11 	andeq	sl, r0, r1, lsl sp
    9d88:	0007b000 	andeq	fp, r7, r0
    9d8c:	00a01200 	adceq	r1, r0, r0, lsl #4
    9d90:	00150000 	andseq	r0, r5, r0
    9d94:	00401225 	subeq	r1, r0, r5, lsr #4
    9d98:	016e0100 	cmneq	lr, r0, lsl #2
    9d9c:	08007274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip, sp, lr}
    9da0:	00000328 	andeq	r0, r0, r8, lsr #6
    9da4:	083c9c01 	ldmdaeq	ip!, {r0, sl, fp, ip, pc}
    9da8:	09260000 	stmdbeq	r6!, {}	; <UNPREDICTABLE>
    9dac:	0100003f 	tsteq	r0, pc, lsr r0
    9db0:	009e016e 	addseq	r0, lr, lr, ror #2
    9db4:	91030000 	mrsls	r0, (UNDEF: 3)
    9db8:	74287ee4 	strtvc	r7, [r8], #-3812	; 0xfffff11c
    9dbc:	0100706d 	tsteq	r0, sp, rrx
    9dc0:	00b4016f 	adcseq	r0, r4, pc, ror #2
    9dc4:	91020000 	mrsls	r0, (UNDEF: 2)
    9dc8:	4031276f 	eorsmi	r2, r1, pc, ror #14
    9dcc:	70010000 	andvc	r0, r1, r0
    9dd0:	00008901 	andeq	r8, r0, r1, lsl #18
    9dd4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    9dd8:	0042d227 	subeq	sp, r2, r7, lsr #4
    9ddc:	01710100 	cmneq	r1, r0, lsl #2
    9de0:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    9de4:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
    9de8:	00003efe 	strdeq	r3, [r0], -lr
    9dec:	bf017101 	svclt	0x00017101
    9df0:	02000000 	andeq	r0, r0, #0
    9df4:	96297291 			; <UNDEFINED> instruction: 0x96297291
    9df8:	6e080074 	mcrvs	0, 0, r0, cr8, cr4, {3}
    9dfc:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    9e00:	0067736d 	rsbeq	r7, r7, sp, ror #6
    9e04:	8d021201 	sfmhi	f1, 4, [r2, #-4]
    9e08:	03000004 	movweq	r0, #4
    9e0c:	287eec91 	ldmdacs	lr!, {r0, r4, r7, sl, fp, sp, lr, pc}^
    9e10:	006e656c 	rsbeq	r6, lr, ip, ror #10
    9e14:	bf021401 	svclt	0x00021401
    9e18:	02000000 	andeq	r0, r0, #0
    9e1c:	00007091 	muleq	r0, r1, r0
    9e20:	003fc325 	eorseq	ip, pc, r5, lsr #6
    9e24:	02250100 	eoreq	r0, r5, #0, 2
    9e28:	0800759c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
    9e2c:	000000cc 	andeq	r0, r0, ip, asr #1
    9e30:	08719c01 	ldmdaeq	r1!, {r0, sl, fp, ip, pc}^
    9e34:	09260000 	stmdbeq	r6!, {}	; <UNPREDICTABLE>
    9e38:	0100003f 	tsteq	r0, pc, lsr r0
    9e3c:	009e0225 	addseq	r0, lr, r5, lsr #4
    9e40:	91020000 	mrsls	r0, (UNDEF: 2)
    9e44:	3dec276c 	stclcc	7, cr2, [ip, #432]!	; 0x1b0
    9e48:	26010000 	strcs	r0, [r1], -r0
    9e4c:	0000b402 	andeq	fp, r0, r2, lsl #8
    9e50:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    9e54:	3dc12500 	cfstr64cc	mvdx2, [r1]
    9e58:	4b010000 	blmi	49e60 <_Min_Stack_Size+0x49c60>
    9e5c:	00766802 	rsbseq	r6, r6, r2, lsl #16
    9e60:	00004c08 	andeq	r4, r0, r8, lsl #24
    9e64:	979c0100 	ldrls	r0, [ip, r0, lsl #2]
    9e68:	26000008 	strcs	r0, [r0], -r8
    9e6c:	00003f09 	andeq	r3, r0, r9, lsl #30
    9e70:	9e024b01 	vmlals.f64	d4, d2, d1
    9e74:	02000000 	andeq	r0, r0, #0
    9e78:	2a007491 	bcs	270c4 <_Min_Stack_Size+0x26ec4>
    9e7c:	00003f30 	andeq	r3, r0, r0, lsr pc
    9e80:	b4025601 	strlt	r5, [r2], #-1537	; 0xfffff9ff
    9e84:	1e080076 	mcrne	0, 0, r0, cr8, cr6, {3}
    9e88:	01000000 	mrseq	r0, (UNDEF: 0)
    9e8c:	0008ef9c 	muleq	r8, ip, pc	; <UNPREDICTABLE>
    9e90:	3ed02600 	cdpcc	6, 13, cr2, cr0, cr0, {0}
    9e94:	56010000 	strpl	r0, [r1], -r0
    9e98:	00010702 	andeq	r0, r1, r2, lsl #14
    9e9c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    9ea0:	00406726 	subeq	r6, r0, r6, lsr #14
    9ea4:	02560100 	subseq	r0, r6, #0, 2
    9ea8:	000000a7 	andeq	r0, r0, r7, lsr #1
    9eac:	2b689102 	blcs	1a2e2bc <_Min_Stack_Size+0x1a2e0bc>
    9eb0:	0000056f 	andeq	r0, r0, pc, ror #10
    9eb4:	080076be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, ip, sp, lr}
    9eb8:	00000012 	andeq	r0, r0, r2, lsl r0
    9ebc:	29025f01 	stmdbcs	r2, {r0, r8, r9, sl, fp, ip, lr}
    9ec0:	080076be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, ip, sp, lr}
    9ec4:	00000012 	andeq	r0, r0, r2, lsl r0
    9ec8:	00057b2c 	andeq	r7, r5, ip, lsr #22
    9ecc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    9ed0:	2d000000 	stccs	0, cr0, [r0, #-0]
    9ed4:	0000026c 	andeq	r0, r0, ip, ror #4
    9ed8:	fb06ce0d 	blx	1bd716 <_Min_Stack_Size+0x1bd516>
    9edc:	08000008 	stmdaeq	r0, {r3}
    9ee0:	00000089 	andeq	r0, r0, r9, lsl #1
    9ee4:	0000b411 	andeq	fp, r0, r1, lsl r4
    9ee8:	00091000 	andeq	r1, r9, r0
    9eec:	00a01200 	adceq	r1, r0, r0, lsl #4
    9ef0:	001a0000 	andseq	r0, sl, r0
    9ef4:	0002852e 	andeq	r8, r2, lr, lsr #10
    9ef8:	00090e00 	andeq	r0, r9, r0, lsl #28
    9efc:	2f000009 	svccs	0x00000009
    9f00:	000039b7 			; <UNDEFINED> instruction: 0x000039b7
    9f04:	013e3301 	teqeq	lr, r1, lsl #6
    9f08:	03050000 	movweq	r0, #20480	; 0x5000
    9f0c:	20000140 	andcs	r0, r0, r0, asr #2
    9f10:	00394f2f 	eorseq	r4, r9, pc, lsr #30
    9f14:	3e340100 	rsfccs	f0, f4, f0
    9f18:	05000001 	streq	r0, [r0, #-1]
    9f1c:	00014403 	andeq	r4, r1, r3, lsl #8
    9f20:	014d1120 	cmpeq	sp, r0, lsr #2
    9f24:	094d0000 	stmdbeq	sp, {}^	; <UNPREDICTABLE>
    9f28:	a0120000 	andsge	r0, r2, r0
    9f2c:	03000000 	movweq	r0, #0
    9f30:	3f8c2f00 	svccc	0x008c2f00
    9f34:	3b010000 	blcc	49f3c <_Min_Stack_Size+0x49d3c>
    9f38:	0000095e 	andeq	r0, r0, lr, asr r9
    9f3c:	a0b80305 	adcsge	r0, r8, r5, lsl #6
    9f40:	3d090800 	stccc	8, cr0, [r9, #-0]
    9f44:	2f000009 	svccs	0x00000009
    9f48:	00004099 	muleq	r0, r9, r0
    9f4c:	09744601 	ldmdbeq	r4!, {r0, r9, sl, lr}^
    9f50:	03050000 	movweq	r0, #20480	; 0x5000
    9f54:	20000148 	andcs	r0, r0, r8, asr #2
    9f58:	097a0406 	ldmdbeq	sl!, {r1, r2, sl}^
    9f5c:	ad080000 	stcge	0, cr0, [r8, #-0]
    9f60:	11000000 	mrsne	r0, (UNDEF: 0)
    9f64:	0000014d 	andeq	r0, r0, sp, asr #2
    9f68:	00000995 	muleq	r0, r5, r9
    9f6c:	0000a012 	andeq	sl, r0, r2, lsl r0
    9f70:	a0120100 	andsge	r0, r2, r0, lsl #2
    9f74:	07000000 	streq	r0, [r0, -r0]
    9f78:	40522f00 	subsmi	r2, r2, r0, lsl #30
    9f7c:	47010000 	strmi	r0, [r1, -r0]
    9f80:	000009a6 	andeq	r0, r0, r6, lsr #19
    9f84:	a0bc0305 	adcsge	r0, ip, r5, lsl #6
    9f88:	7f090800 	svcvc	0x00090800
    9f8c:	2f000009 	svccs	0x00000009
    9f90:	00003f9b 	muleq	r0, fp, pc	; <UNPREDICTABLE>
    9f94:	04084901 	streq	r4, [r8], #-2305	; 0xfffff6ff
    9f98:	03050000 	movweq	r0, #20480	; 0x5000
    9f9c:	20003a94 	mulcs	r0, r4, sl
    9fa0:	0000b411 	andeq	fp, r0, r1, lsl r4
    9fa4:	0009cd00 	andeq	ip, r9, r0, lsl #26
    9fa8:	00a03000 	adceq	r3, r0, r0
    9fac:	07ff0000 	ldrbeq	r0, [pc, r0]!
    9fb0:	3fda2f00 	svccc	0x00da2f00
    9fb4:	4b010000 	blmi	49fbc <_Min_Stack_Size+0x49dbc>
    9fb8:	000009bc 			; <UNDEFINED> instruction: 0x000009bc
    9fbc:	3af40305 	bcc	ffd0abd8 <BootRAM+0xec7b379>
    9fc0:	b4112000 	ldrlt	r2, [r1], #-0
    9fc4:	ef000000 	svc	0x00000000
    9fc8:	30000009 	andcc	r0, r0, r9
    9fcc:	000000a0 	andeq	r0, r0, r0, lsr #1
    9fd0:	2f0003ff 	svccs	0x000003ff
    9fd4:	00004044 	andeq	r4, r0, r4, asr #32
    9fd8:	09de4d01 	ldmibeq	lr, {r0, r8, sl, fp, lr}^
    9fdc:	03050000 	movweq	r0, #20480	; 0x5000
    9fe0:	20003684 	andcs	r3, r0, r4, lsl #13
    9fe4:	003fe32f 	eorseq	lr, pc, pc, lsr #6
    9fe8:	184f0100 	stmdane	pc, {r8}^	; <UNPREDICTABLE>
    9fec:	05000004 	streq	r0, [r0, #-4]
    9ff0:	0000cc03 	andeq	ip, r0, r3, lsl #24
    9ff4:	3dce2f20 	stclcc	15, cr2, [lr, #128]	; 0x80
    9ff8:	56010000 	strpl	r0, [r1], -r0
    9ffc:	00000408 	andeq	r0, r0, r8, lsl #8
    a000:	00e40305 	rsceq	r0, r4, r5, lsl #6
    a004:	822f2000 	eorhi	r2, pc, #0
    a008:	01000040 	tsteq	r0, r0, asr #32
    a00c:	00014359 	andeq	r4, r1, r9, asr r3
    a010:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    a014:	2f200001 	svccs	0x00200001
    a018:	00003e42 	andeq	r3, r0, r2, asr #28
    a01c:	01435901 	cmpeq	r3, r1, lsl #18
    a020:	03050000 	movweq	r0, #20480	; 0x5000
    a024:	2000014d 	andcs	r0, r0, sp, asr #2
    a028:	003ee32f 	eorseq	lr, lr, pc, lsr #6
    a02c:	645b0100 	ldrbvs	r0, [fp], #-256	; 0xffffff00
    a030:	05000005 	streq	r0, [r0, #-5]
    a034:	003a9803 	eorseq	r9, sl, r3, lsl #16
    a038:	408e2f20 	addmi	r2, lr, r0, lsr #30
    a03c:	5d010000 	stcpl	0, cr0, [r1, #-0]
    a040:	00000133 	andeq	r0, r0, r3, lsr r1
    a044:	3a840305 	bcc	fe10ac60 <BootRAM+0xd07b401>
    a048:	722f2000 	eorvc	r2, pc, #0
    a04c:	01000040 	tsteq	r0, r0, asr #32
    a050:	0001335e 	andeq	r3, r1, lr, asr r3
    a054:	88030500 	stmdahi	r3, {r8, sl}
    a058:	2f20003a 	svccs	0x0020003a
    a05c:	00003e57 	andeq	r3, r0, r7, asr lr
    a060:	01335f01 	teqeq	r3, r1, lsl #30
    a064:	03050000 	movweq	r0, #20480	; 0x5000
    a068:	200042f8 	strdcs	r4, [r0], -r8
    a06c:	003e622f 	eorseq	r6, lr, pc, lsr #4
    a070:	07610100 	strbeq	r0, [r1, -r0, lsl #2]!
    a074:	05000001 	streq	r0, [r0, #-1]
    a078:	0042f403 	subeq	pc, r2, r3, lsl #8
    a07c:	3f752f20 	svccc	0x00752f20
    a080:	62010000 	andvs	r0, r1, #0
    a084:	00000107 	andeq	r0, r0, r7, lsl #2
    a088:	3a900305 	bcc	fe40aca4 <BootRAM+0xd37b445>
    a08c:	b62f2000 	strtlt	r2, [pc], -r0
    a090:	0100003e 	tsteq	r0, lr, lsr r0
    a094:	00010763 	andeq	r0, r1, r3, ror #14
    a098:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
    a09c:	2f20003a 	svccs	0x0020003a
    a0a0:	00003ea2 	andeq	r3, r0, r2, lsr #29
    a0a4:	01076401 	tsteq	r7, r1, lsl #8
    a0a8:	03050000 	movweq	r0, #20480	; 0x5000
    a0ac:	200042fc 	strdcs	r4, [r0], -ip
    a0b0:	0009ba00 	andeq	fp, r9, r0, lsl #20
    a0b4:	a1000400 	tstge	r0, r0, lsl #8
    a0b8:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    a0bc:	00011101 	andeq	r1, r1, r1, lsl #2
    a0c0:	425b0c00 	subsmi	r0, fp, #0, 24
    a0c4:	0c580000 	mraeq	r0, r8, acc0
    a0c8:	00000000 	andeq	r0, r0, r0
    a0cc:	48d60000 	ldmmi	r6, {}^	; <UNPREDICTABLE>
    a0d0:	04020000 	streq	r0, [r2], #-0
    a0d4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    a0d8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    a0dc:	000001ce 	andeq	r0, r0, lr, asr #3
    a0e0:	b8050803 	stmdalt	r5, {r0, r1, fp}
    a0e4:	03000000 	movweq	r0, #0
    a0e8:	02f80408 	rscseq	r0, r8, #8, 8	; 0x8000000
    a0ec:	01030000 	mrseq	r0, (UNDEF: 3)
    a0f0:	00019206 	andeq	r9, r1, r6, lsl #4
    a0f4:	00e30400 	rsceq	r0, r3, r0, lsl #8
    a0f8:	1d020000 	stcne	0, cr0, [r2, #-0]
    a0fc:	0000004f 	andeq	r0, r0, pc, asr #32
    a100:	90080103 	andls	r0, r8, r3, lsl #2
    a104:	03000001 	movweq	r0, #1
    a108:	00950502 	addseq	r0, r5, r2, lsl #10
    a10c:	72040000 	andvc	r0, r4, #0
    a110:	02000000 	andeq	r0, r0, #0
    a114:	0000682b 	andeq	r6, r0, fp, lsr #16
    a118:	07020300 	streq	r0, [r2, -r0, lsl #6]
    a11c:	000001f2 	strdeq	r0, [r0], -r2
    a120:	bd050403 	cfstrslt	mvf0, [r5, #-12]
    a124:	03000000 	movweq	r0, #0
    a128:	01c90704 	biceq	r0, r9, r4, lsl #14
    a12c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    a130:	0001c407 	andeq	ip, r1, r7, lsl #8
    a134:	07040300 	streq	r0, [r4, -r0, lsl #6]
    a138:	00000059 	andeq	r0, r0, r9, asr r0
    a13c:	01030405 	tsteq	r3, r5, lsl #8
    a140:	00019908 	andeq	r9, r1, r8, lsl #18
    a144:	9a040600 	bls	10b94c <_Min_Stack_Size+0x10b74c>
    a148:	07000000 	streq	r0, [r0, -r0]
    a14c:	0000008d 	andeq	r0, r0, sp, lsl #1
    a150:	0000e504 	andeq	lr, r0, r4, lsl #10
    a154:	44180300 	ldrmi	r0, [r8], #-768	; 0xfffffd00
    a158:	04000000 	streq	r0, [r0], #-0
    a15c:	00000074 	andeq	r0, r0, r4, ror r0
    a160:	005d2403 	subseq	r2, sp, r3, lsl #8
    a164:	5c080000 	stcpl	0, cr0, [r8], {-0}
    a168:	01369c04 	teqeq	r6, r4, lsl #24
    a16c:	69090000 	stmdbvs	r9, {}	; <UNPREDICTABLE>
    a170:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    a174:	00008b9d 	muleq	r0, sp, fp
    a178:	b8090000 	stmdalt	r9, {}	; <UNPREDICTABLE>
    a17c:	04000005 	streq	r0, [r0], #-5
    a180:	0001569e 	muleq	r1, lr, r6
    a184:	f5090400 			; <UNDEFINED> instruction: 0xf5090400
    a188:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
    a18c:	00015ca0 	andeq	r5, r1, r0, lsr #25
    a190:	16090800 	strne	r0, [r9], -r0, lsl #16
    a194:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    a198:	00016ca2 	andeq	r6, r1, r2, lsr #25
    a19c:	e3093a00 	movw	r3, #39424	; 0x9a00
    a1a0:	0400003d 	streq	r0, [r0], #-61	; 0xffffffc3
    a1a4:	00016ca3 	andeq	r6, r1, r3, lsr #25
    a1a8:	ce094700 	cdpgt	7, 0, cr4, cr9, cr0, {0}
    a1ac:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    a1b0:	00009fa5 	andeq	r9, r0, r5, lsr #31
    a1b4:	4e095400 	cfcpysmi	mvf5, mvf9
    a1b8:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    a1bc:	00009fa6 	andeq	r9, r0, r6, lsr #31
    a1c0:	10095500 	andne	r5, r9, r0, lsl #10
    a1c4:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
    a1c8:	00009fa7 	andeq	r9, r0, r7, lsr #31
    a1cc:	730a5600 	movwvc	r5, #42496	; 0xa600
    a1d0:	04007165 	streq	r7, [r0], #-357	; 0xfffffe9b
    a1d4:	0000aaa9 	andeq	sl, r0, r9, lsr #21
    a1d8:	b4095800 	strlt	r5, [r9], #-2048	; 0xfffff800
    a1dc:	04000042 	streq	r0, [r0], #-66	; 0xffffffbe
    a1e0:	0000aaaa 	andeq	sl, r0, sl, lsr #21
    a1e4:	0b005a00 	bleq	209ec <_Min_Stack_Size+0x207ec>
    a1e8:	00000021 	andeq	r0, r0, r1, lsr #32
    a1ec:	0000014f 	andeq	r0, r0, pc, asr #2
    a1f0:	00008b0c 	andeq	r8, r0, ip, lsl #22
    a1f4:	014f0c00 	cmpeq	pc, r0, lsl #24
    a1f8:	280c0000 	stmdacs	ip, {}	; <UNPREDICTABLE>
    a1fc:	00000000 	andeq	r0, r0, r0
    a200:	01550406 	cmpeq	r5, r6, lsl #8
    a204:	060d0000 	streq	r0, [sp], -r0
    a208:	00013604 	andeq	r3, r1, r4, lsl #12
    a20c:	008d0e00 	addeq	r0, sp, r0, lsl #28
    a210:	016c0000 	cmneq	ip, r0
    a214:	840f0000 	strhi	r0, [pc], #-0	; a21c <_Min_Stack_Size+0xa01c>
    a218:	31000000 	mrscc	r0, (UNDEF: 0)
    a21c:	008d0e00 	addeq	r0, sp, r0, lsl #28
    a220:	017c0000 	cmneq	ip, r0
    a224:	840f0000 	strhi	r0, [pc], #-0	; a22c <_Min_Stack_Size+0xa02c>
    a228:	0c000000 	stceq	0, cr0, [r0], {-0}
    a22c:	3e1e0400 	cfmulscc	mvf0, mvf14, mvf0
    a230:	ab040000 	blge	10a238 <_Min_Stack_Size+0x10a038>
    a234:	000000b5 	strheq	r0, [r0], -r5
    a238:	00429410 	subeq	r9, r2, r0, lsl r4
    a23c:	9f2d0100 	svcls	0x002d0100
    a240:	d4000000 	strle	r0, [r0], #-0
    a244:	4e080076 	mcrmi	0, 0, r0, cr8, cr6, {3}
    a248:	01000000 	mrseq	r0, (UNDEF: 0)
    a24c:	0001bd9c 	muleq	r1, ip, sp
    a250:	75621100 	strbvc	r1, [r2, #-256]!	; 0xffffff00
    a254:	2d010066 	stccs	0, cr0, [r1, #-408]	; 0xfffffe68
    a258:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
    a25c:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    a260:	00004245 	andeq	r4, r0, r5, asr #4
    a264:	009f2e01 	addseq	r2, pc, r1, lsl #28
    a268:	91020000 	mrsls	r0, (UNDEF: 2)
    a26c:	04060077 	streq	r0, [r6], #-119	; 0xffffff89
    a270:	000001c3 	andeq	r0, r0, r3, asr #3
    a274:	00009f07 	andeq	r9, r0, r7, lsl #30
    a278:	412c1000 			; <UNDEFINED> instruction: 0x412c1000
    a27c:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    a280:	000000aa 	andeq	r0, r0, sl, lsr #1
    a284:	08007724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip, sp, lr}
    a288:	00000054 	andeq	r0, r0, r4, asr r0
    a28c:	021a9c01 	andseq	r9, sl, #256	; 0x100
    a290:	62110000 	andsvs	r0, r1, #0
    a294:	01006675 	tsteq	r0, r5, ror r6
    a298:	0001bd3e 	andeq	fp, r1, lr, lsr sp
    a29c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a2a0:	00419b12 	subeq	r9, r1, r2, lsl fp
    a2a4:	aa3f0100 	bge	fca6ac <_Min_Stack_Size+0xfca4ac>
    a2a8:	02000000 	andeq	r0, r0, #0
    a2ac:	5f127691 	svcpl	0x00127691
    a2b0:	0100000f 	tsteq	r0, pc
    a2b4:	0000aa40 	andeq	sl, r0, r0, asr #20
    a2b8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    a2bc:	00411a12 	subeq	r1, r1, r2, lsl sl
    a2c0:	9f410100 	svcls	0x00410100
    a2c4:	02000000 	andeq	r0, r0, #0
    a2c8:	13007391 	movwne	r7, #913	; 0x391
    a2cc:	000042c7 	andeq	r4, r0, r7, asr #5
    a2d0:	00aa5101 	adceq	r5, sl, r1, lsl #2
    a2d4:	77780000 	ldrbvc	r0, [r8, -r0]!
    a2d8:	00be0800 	adcseq	r0, lr, r0, lsl #16
    a2dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    a2e0:	000002ad 	andeq	r0, r0, sp, lsr #5
    a2e4:	66756211 			; <UNDEFINED> instruction: 0x66756211
    a2e8:	bd510100 	ldflte	f0, [r1, #-0]
    a2ec:	02000001 	andeq	r0, r0, #1
    a2f0:	5d126c91 	ldcpl	12, cr6, [r2, #-580]	; 0xfffffdbc
    a2f4:	01000009 	tsteq	r0, r9
    a2f8:	00009f52 	andeq	r9, r0, r2, asr pc
    a2fc:	75910200 	ldrvc	r0, [r1, #512]	; 0x200
    a300:	736f7114 	cmnvc	pc, #20, 2
    a304:	9f530100 	svcls	0x00530100
    a308:	02000000 	andeq	r0, r0, #0
    a30c:	69147491 	ldmdbvs	r4, {r0, r4, r7, sl, ip, sp, lr}
    a310:	54010064 	strpl	r0, [r1], #-100	; 0xffffff9c
    a314:	000000aa 	andeq	r0, r0, sl, lsr #1
    a318:	15769102 	ldrbne	r9, [r6, #-258]!	; 0xfffffefe
    a31c:	080077b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, ip, sp, lr}
    a320:	0000004c 	andeq	r0, r0, ip, asr #32
    a324:	00000294 	muleq	r0, r4, r2
    a328:	626c7214 	rsbvs	r7, ip, #20, 4	; 0x40000001
    a32c:	9f5d0100 	svcls	0x005d0100
    a330:	02000000 	andeq	r0, r0, #0
    a334:	26127391 			; <UNDEFINED> instruction: 0x26127391
    a338:	01000061 	tsteq	r0, r1, rrx
    a33c:	00009f5e 	andeq	r9, r0, lr, asr pc
    a340:	72910200 	addsvc	r0, r1, #0, 4
    a344:	78001600 	stmdavc	r0, {r9, sl, ip}
    a348:	002c0800 	eoreq	r0, ip, r0, lsl #16
    a34c:	72140000 	andsvc	r0, r4, #0
    a350:	0100626c 	tsteq	r0, ip, ror #4
    a354:	00009f67 	andeq	r9, r0, r7, ror #30
    a358:	71910200 	orrsvc	r0, r1, r0, lsl #4
    a35c:	ff130000 			; <UNDEFINED> instruction: 0xff130000
    a360:	01000041 	tsteq	r0, r1, asr #32
    a364:	0000aa6f 	andeq	sl, r0, pc, ror #20
    a368:	00000000 	andeq	r0, r0, r0
    a36c:	00003c00 	andeq	r3, r0, r0, lsl #24
    a370:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    a374:	11000002 	tstne	r0, r2
    a378:	00667562 	rsbeq	r7, r6, r2, ror #10
    a37c:	01bd6f01 			; <UNDEFINED> instruction: 0x01bd6f01
    a380:	91020000 	mrsls	r0, (UNDEF: 2)
    a384:	420e176c 	andmi	r1, lr, #108, 14	; 0x1b00000
    a388:	6f010000 	svcvs	0x00010000
    a38c:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    a390:	14689102 	strbtne	r9, [r8], #-258	; 0xfffffefe
    a394:	00727470 	rsbseq	r7, r2, r0, ror r4
    a398:	01bd7001 			; <UNDEFINED> instruction: 0x01bd7001
    a39c:	91020000 	mrsls	r0, (UNDEF: 2)
    a3a0:	415a1270 	cmpmi	sl, r0, ror r2
    a3a4:	71010000 	mrsvc	r0, (UNDEF: 1)
    a3a8:	000000aa 	andeq	r0, r0, sl, lsr #1
    a3ac:	00769102 	rsbseq	r9, r6, r2, lsl #2
    a3b0:	009f0406 	addseq	r0, pc, r6, lsl #8
    a3b4:	01130000 	tsteq	r3, r0
    a3b8:	01000041 	tsteq	r0, r1, asr #32
    a3bc:	0000aa7c 	andeq	sl, r0, ip, ror sl
    a3c0:	00000000 	andeq	r0, r0, r0
    a3c4:	00006400 	andeq	r6, r0, r0, lsl #8
    a3c8:	619c0100 	orrsvs	r0, ip, r0, lsl #2
    a3cc:	11000003 	tstne	r0, r3
    a3d0:	00667562 	rsbeq	r7, r6, r2, ror #10
    a3d4:	01bd7c01 			; <UNDEFINED> instruction: 0x01bd7c01
    a3d8:	91020000 	mrsls	r0, (UNDEF: 2)
    a3dc:	4110176c 	tstmi	r0, ip, ror #14
    a3e0:	7c010000 	stcvc	0, cr0, [r1], {-0}
    a3e4:	00000361 	andeq	r0, r0, r1, ror #6
    a3e8:	14689102 	strbtne	r9, [r8], #-258	; 0xfffffefe
    a3ec:	006e656c 	rsbeq	r6, lr, ip, ror #10
    a3f0:	00aa7d01 	adceq	r7, sl, r1, lsl #26
    a3f4:	91020000 	mrsls	r0, (UNDEF: 2)
    a3f8:	00001676 	andeq	r1, r0, r6, ror r6
    a3fc:	00380000 	eorseq	r0, r8, r0
    a400:	72140000 	andsvc	r0, r4, #0
    a404:	0100626c 	tsteq	r0, ip, ror #4
    a408:	00009f83 	andeq	r9, r0, r3, lsl #31
    a40c:	75910200 	ldrvc	r0, [r1, #512]	; 0x200
    a410:	04060000 	streq	r0, [r6], #-0
    a414:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
    a418:	0040ea13 	subeq	lr, r0, r3, lsl sl
    a41c:	aa8e0100 	bge	fe38a824 <BootRAM+0xd2fafc5>
    a420:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    a424:	3c080078 	stccc	0, cr0, [r8], {120}	; 0x78
    a428:	01000000 	mrseq	r0, (UNDEF: 0)
    a42c:	0003b99c 	muleq	r3, ip, r9
    a430:	75621100 	strbvc	r1, [r2, #-256]!	; 0xffffff00
    a434:	8e010066 	cdphi	0, 0, cr0, cr1, cr6, {3}
    a438:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
    a43c:	116c9102 	cmnne	ip, r2, lsl #2
    a440:	0067736d 	rsbeq	r7, r7, sp, ror #6
    a444:	02ff8e01 	rscseq	r8, pc, #1, 28
    a448:	91020000 	mrsls	r0, (UNDEF: 2)
    a44c:	74701468 	ldrbtvc	r1, [r0], #-1128	; 0xfffffb98
    a450:	8f010072 	svchi	0x00010072
    a454:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
    a458:	12709102 	rsbsne	r9, r0, #-2147483648	; 0x80000000
    a45c:	0000413f 	andeq	r4, r0, pc, lsr r1
    a460:	00aa9301 	adceq	r9, sl, r1, lsl #6
    a464:	91020000 	mrsls	r0, (UNDEF: 2)
    a468:	84130076 	ldrhi	r0, [r3], #-118	; 0xffffff8a
    a46c:	01000041 	tsteq	r0, r1, asr #32
    a470:	0000aa9c 	muleq	r0, ip, sl
    a474:	00787400 	rsbseq	r7, r8, r0, lsl #8
    a478:	00009208 	andeq	r9, r0, r8, lsl #4
    a47c:	239c0100 	orrscs	r0, ip, #0, 2
    a480:	11000004 	tstne	r0, r4
    a484:	00667562 	rsbeq	r7, r6, r2, ror #10
    a488:	01bd9c01 			; <UNDEFINED> instruction: 0x01bd9c01
    a48c:	91020000 	mrsls	r0, (UNDEF: 2)
    a490:	4193176c 	orrsmi	r1, r3, ip, ror #14
    a494:	9c010000 	stcls	0, cr0, [r1], {-0}
    a498:	00000361 	andeq	r0, r0, r1, ror #6
    a49c:	14689102 	strbtne	r9, [r8], #-258	; 0xfffffefe
    a4a0:	006e656c 	rsbeq	r6, lr, ip, ror #10
    a4a4:	00aa9d01 	adceq	r9, sl, r1, lsl #26
    a4a8:	91020000 	mrsls	r0, (UNDEF: 2)
    a4ac:	788e1676 	stmvc	lr, {r1, r2, r4, r5, r6, r9, sl, ip}
    a4b0:	00660800 	rsbeq	r0, r6, r0, lsl #16
    a4b4:	72140000 	andsvc	r0, r4, #0
    a4b8:	0100626c 	tsteq	r0, ip, ror #4
    a4bc:	00009fa4 	andeq	r9, r0, r4, lsr #31
    a4c0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    a4c4:	00612612 	rsbeq	r2, r1, r2, lsl r6
    a4c8:	9fa50100 	svcls	0x00a50100
    a4cc:	02000000 	andeq	r0, r0, #0
    a4d0:	00007591 	muleq	r0, r1, r5
    a4d4:	0041da18 	subeq	sp, r1, r8, lsl sl
    a4d8:	08bb0100 	ldmeq	fp!, {r8}
    a4dc:	80080079 	andhi	r0, r8, r9, ror r0
    a4e0:	01000000 	mrseq	r0, (UNDEF: 0)
    a4e4:	0004559c 	muleq	r4, ip, r5
    a4e8:	3ee31700 	cdpcc	7, 14, cr1, cr3, cr0, {0}
    a4ec:	bb010000 	bllt	4a4f4 <_Min_Stack_Size+0x4a2f4>
    a4f0:	00000455 	andeq	r0, r0, r5, asr r4
    a4f4:	17749102 	ldrbne	r9, [r4, -r2, lsl #2]!
    a4f8:	00003ef5 	strdeq	r3, [r0], -r5
    a4fc:	0094bb01 	addseq	fp, r4, r1, lsl #22
    a500:	91020000 	mrsls	r0, (UNDEF: 2)
    a504:	04060070 	streq	r0, [r6], #-112	; 0xffffff90
    a508:	0000017c 	andeq	r0, r0, ip, ror r1
    a50c:	0041ba18 	subeq	fp, r1, r8, lsl sl
    a510:	88cc0100 	stmiahi	ip, {r8}^
    a514:	4c080079 	stcmi	0, cr0, [r8], {121}	; 0x79
    a518:	01000000 	mrseq	r0, (UNDEF: 0)
    a51c:	00049b9c 	muleq	r4, ip, fp
    a520:	3ee31700 	cdpcc	7, 14, cr1, cr3, cr0, {0}
    a524:	cc010000 	stcgt	0, cr0, [r1], {-0}
    a528:	00000455 	andeq	r0, r0, r5, asr r4
    a52c:	17749102 	ldrbne	r9, [r4, -r2, lsl #2]!
    a530:	00003f16 	andeq	r3, r0, r6, lsl pc
    a534:	0094cc01 	addseq	ip, r4, r1, lsl #24
    a538:	91020000 	mrsls	r0, (UNDEF: 2)
    a53c:	3de31770 	stclcc	7, cr1, [r3, #448]!	; 0x1c0
    a540:	cc010000 	stcgt	0, cr0, [r1], {-0}
    a544:	00000094 	muleq	r0, r4, r0
    a548:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    a54c:	0042ab19 	subeq	sl, r2, r9, lsl fp
    a550:	d4d30100 	ldrble	r0, [r3], #256	; 0x100
    a554:	1e080079 	mcrne	0, 0, r0, cr8, cr9, {3}
    a558:	01000000 	mrseq	r0, (UNDEF: 0)
    a55c:	0004cd9c 	muleq	r4, ip, sp
    a560:	3ee31700 	cdpcc	7, 14, cr1, cr3, cr0, {0}
    a564:	d3010000 	movwle	r0, #4096	; 0x1000
    a568:	00000455 	andeq	r0, r0, r5, asr r4
    a56c:	17749102 	ldrbne	r9, [r4, -r2, lsl #2]!
    a570:	000042b4 			; <UNDEFINED> instruction: 0x000042b4
    a574:	00aad301 	adceq	sp, sl, r1, lsl #6
    a578:	91020000 	mrsls	r0, (UNDEF: 2)
    a57c:	a6130072 			; <UNDEFINED> instruction: 0xa6130072
    a580:	01000041 	tsteq	r0, r1, asr #32
    a584:	000021d7 	ldrdeq	r2, [r0], -r7
    a588:	0079f400 	rsbseq	pc, r9, r0, lsl #8
    a58c:	0002f208 	andeq	pc, r2, r8, lsl #4
    a590:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    a594:	17000005 	strne	r0, [r0, -r5]
    a598:	00003ee3 	andeq	r3, r0, r3, ror #29
    a59c:	0455d701 	ldrbeq	sp, [r5], #-1793	; 0xfffff8ff
    a5a0:	91030000 	mrsls	r0, (UNDEF: 3)
    a5a4:	3d127fa4 	ldccc	15, cr7, [r2, #-656]	; 0xfffffd70
    a5a8:	01000056 	qaddeq	r0, r6, r0
    a5ac:	00009fd9 	ldrdeq	r9, [r0], -r9	; <UNPREDICTABLE>
    a5b0:	57910200 	ldrpl	r0, [r1, r0, lsl #4]
    a5b4:	00412012 	subeq	r2, r1, r2, lsl r0
    a5b8:	aadb0100 	bge	ff6ca9c0 <BootRAM+0xe63b161>
    a5bc:	02000000 	andeq	r0, r0, #0
    a5c0:	24124e91 	ldrcs	r4, [r2], #-3729	; 0xfffff16f
    a5c4:	01000042 	tsteq	r0, r2, asr #32
    a5c8:	0000aadc 	ldrdeq	sl, [r0], -ip
    a5cc:	4c910200 	lfmmi	f0, 4, [r1], {0}
    a5d0:	0041e412 	subeq	lr, r1, r2, lsl r4
    a5d4:	aadd0100 	bge	ff74a9dc <BootRAM+0xe6bb17d>
    a5d8:	02000000 	andeq	r0, r0, #0
    a5dc:	30124a91 	mulscc	r2, r1, sl
    a5e0:	01000042 	tsteq	r0, r2, asr #32
    a5e4:	0000aade 	ldrdeq	sl, [r0], -lr
    a5e8:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    a5ec:	00417912 	subeq	r7, r1, r2, lsl r9
    a5f0:	96ee0100 	strbtls	r0, [lr], r0, lsl #2
    a5f4:	03000005 	movweq	r0, #5
    a5f8:	127fac91 	rsbsne	sl, pc, #37120	; 0x9100
    a5fc:	000040c3 	andeq	r4, r0, r3, asr #1
    a600:	009ff701 	addseq	pc, pc, r1, lsl #14
    a604:	91020000 	mrsls	r0, (UNDEF: 2)
    a608:	40d31253 	sbcsmi	r1, r3, r3, asr r2
    a60c:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    a610:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    a614:	12499102 	subne	r9, r9, #-2147483648	; 0x80000000
    a618:	000040dd 	ldrdeq	r4, [r0], -sp
    a61c:	05a6fc01 	streq	pc, [r6, #3073]!	; 0xc01
    a620:	91030000 	mrsls	r0, (UNDEF: 3)
    a624:	261a0640 	ldrcs	r0, [sl], -r0, asr #12
    a628:	01000061 	tsteq	r0, r1, rrx
    a62c:	00aa010c 	adceq	r0, sl, ip, lsl #2
    a630:	91020000 	mrsls	r0, (UNDEF: 2)
    a634:	3f291a50 	svccc	0x00291a50
    a638:	0d010000 	stceq	0, cr0, [r1, #-0]
    a63c:	0005b901 	andeq	fp, r5, r1, lsl #18
    a640:	b8910400 	ldmlt	r1, {sl}
    a644:	0e00067f 	mcreq	6, 0, r0, cr0, cr15, {3}
    a648:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    a64c:	000005a6 	andeq	r0, r0, r6, lsr #11
    a650:	0000840f 	andeq	r8, r0, pc, lsl #8
    a654:	0e000b00 	vmlaeq.f64	d0, d0, d0
    a658:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    a65c:	000005b9 			; <UNDEFINED> instruction: 0x000005b9
    a660:	0000841b 	andeq	r8, r0, fp, lsl r4
    a664:	44910300 	ldrmi	r0, [r1], #768	; 0x300
    a668:	9f0e0006 	svcls	0x000e0006
    a66c:	cd000000 	stcgt	0, cr0, [r0, #-0]
    a670:	1b000005 	blne	a68c <_Min_Stack_Size+0xa48c>
    a674:	00000084 	andeq	r0, r0, r4, lsl #1
    a678:	7fbc9104 	svcvc	0x00bc9104
    a67c:	141c0006 	ldrne	r0, [ip], #-6
    a680:	01000042 	tsteq	r0, r2, asr #32
    a684:	00210131 	eoreq	r0, r1, r1, lsr r1
    a688:	00000000 	andeq	r0, r0, r0
    a68c:	00360000 	eorseq	r0, r6, r0
    a690:	9c010000 	stcls	0, cr0, [r1], {-0}
    a694:	00000606 	andeq	r0, r0, r6, lsl #12
    a698:	003ee31d 	eorseq	lr, lr, sp, lsl r3
    a69c:	01310100 	teqeq	r1, r0, lsl #2
    a6a0:	00000455 	andeq	r0, r0, r5, asr r4
    a6a4:	1a6c9102 	bne	1b2eab4 <_Min_Stack_Size+0x1b2e8b4>
    a6a8:	00003f29 	andeq	r3, r0, r9, lsr #30
    a6ac:	06013201 	streq	r3, [r1], -r1, lsl #4
    a6b0:	02000006 	andeq	r0, r0, #6
    a6b4:	0e007491 	mcreq	4, 0, r7, cr0, cr1, {4}
    a6b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    a6bc:	00000616 	andeq	r0, r0, r6, lsl r6
    a6c0:	0000840f 	andeq	r8, r0, pc, lsl #8
    a6c4:	1c000100 	stfnes	f0, [r0], {-0}
    a6c8:	0000416f 	andeq	r4, r0, pc, ror #2
    a6cc:	21013f01 	tstcs	r1, r1, lsl #30
    a6d0:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    a6d4:	3608007c 			; <UNDEFINED> instruction: 0x3608007c
    a6d8:	01000000 	mrseq	r0, (UNDEF: 0)
    a6dc:	00064f9c 	muleq	r6, ip, pc	; <UNPREDICTABLE>
    a6e0:	3ee31d00 	cdpcc	13, 14, cr1, cr3, cr0, {0}
    a6e4:	3f010000 	svccc	0x00010000
    a6e8:	00045501 	andeq	r5, r4, r1, lsl #10
    a6ec:	6c910200 	lfmvs	f0, 4, [r1], {0}
    a6f0:	003f291a 	eorseq	r2, pc, sl, lsl r9	; <UNPREDICTABLE>
    a6f4:	01400100 	mrseq	r0, (UNDEF: 80)
    a6f8:	00000606 	andeq	r0, r0, r6, lsl #12
    a6fc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    a700:	0042ba1c 	subeq	fp, r2, ip, lsl sl
    a704:	014d0100 	mrseq	r0, (UNDEF: 93)
    a708:	00000021 	andeq	r0, r0, r1, lsr #32
    a70c:	00000000 	andeq	r0, r0, r0
    a710:	0000002e 	andeq	r0, r0, lr, lsr #32
    a714:	06a69c01 	strteq	r9, [r6], r1, lsl #24
    a718:	e31d0000 	tst	sp, #0
    a71c:	0100003e 	tsteq	r0, lr, lsr r0
    a720:	0455014d 	ldrbeq	r0, [r5], #-333	; 0xfffffeb3
    a724:	91020000 	mrsls	r0, (UNDEF: 2)
    a728:	420e1d74 	andmi	r1, lr, #116, 26	; 0x1d00
    a72c:	4d010000 	stcmi	0, cr0, [r1, #-0]
    a730:	00009401 	andeq	r9, r0, r1, lsl #8
    a734:	70910200 	addsvc	r0, r1, r0, lsl #4
    a738:	67736d1e 			; <UNDEFINED> instruction: 0x67736d1e
    a73c:	014d0100 	mrseq	r0, (UNDEF: 93)
    a740:	00000094 	muleq	r0, r4, r0
    a744:	1d6c9102 	stfnep	f1, [ip, #-8]!
    a748:	00003fd3 	ldrdeq	r3, [r0], -r3	; <UNPREDICTABLE>
    a74c:	9f014d01 	svcls	0x00014d01
    a750:	02000000 	andeq	r0, r0, #0
    a754:	1c006b91 			; <UNDEFINED> instruction: 0x1c006b91
    a758:	000042d9 	ldrdeq	r4, [r0], -r9
    a75c:	21015101 	tstcs	r1, r1, lsl #2
    a760:	00000000 	andeq	r0, r0, r0
    a764:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    a768:	01000002 	tsteq	r0, r2
    a76c:	0007ab9c 	muleq	r7, ip, fp
    a770:	3ee31d00 	cdpcc	13, 14, cr1, cr3, cr0, {0}
    a774:	51010000 	mrspl	r0, (UNDEF: 1)
    a778:	00045501 	andeq	r5, r4, r1, lsl #10
    a77c:	ac910300 	ldcge	3, cr0, [r1], {0}
    a780:	420e1d7f 	andmi	r1, lr, #8128	; 0x1fc0
    a784:	51010000 	mrspl	r0, (UNDEF: 1)
    a788:	00009401 	andeq	r9, r0, r1, lsl #8
    a78c:	a8910300 	ldmge	r1, {r8, r9}
    a790:	736d1e7f 	cmnvc	sp, #2032	; 0x7f0
    a794:	51010067 	tstpl	r1, r7, rrx
    a798:	00009401 	andeq	r9, r0, r1, lsl #8
    a79c:	a4910300 	ldrge	r0, [r1], #768	; 0x300
    a7a0:	3fd31d7f 	svccc	0x00d31d7f
    a7a4:	51010000 	mrspl	r0, (UNDEF: 1)
    a7a8:	00009f01 	andeq	r9, r0, r1, lsl #30
    a7ac:	a3910300 	orrsge	r0, r1, #0, 6
    a7b0:	6f711e7f 	svcvs	0x00711e7f
    a7b4:	51010073 	tstpl	r1, r3, ror r0
    a7b8:	00009f01 	andeq	r9, r0, r1, lsl #30
    a7bc:	00910200 	addseq	r0, r1, r0, lsl #4
    a7c0:	0041641d 	subeq	r6, r1, sp, lsl r4
    a7c4:	01510100 	cmpeq	r1, r0, lsl #2
    a7c8:	000007ab 	andeq	r0, r0, fp, lsr #15
    a7cc:	1a049102 	bne	12ebdc <_Min_Stack_Size+0x12e9dc>
    a7d0:	0000423c 	andeq	r4, r0, ip, lsr r2
    a7d4:	aa015201 	bge	5efe0 <_Min_Stack_Size+0x5ede0>
    a7d8:	02000000 	andeq	r0, r0, #0
    a7dc:	b31a5291 	tstlt	sl, #268435465	; 0x10000009
    a7e0:	01000041 	tsteq	r0, r1, asr #32
    a7e4:	00aa0153 	adceq	r0, sl, r3, asr r1
    a7e8:	91020000 	mrsls	r0, (UNDEF: 2)
    a7ec:	428b1a50 	addmi	r1, fp, #80, 20	; 0x50000
    a7f0:	55010000 	strpl	r0, [r1, #-0]
    a7f4:	00009f01 	andeq	r9, r0, r1, lsl #30
    a7f8:	57910200 	ldrpl	r0, [r1, r0, lsl #4]
    a7fc:	0041511a 	subeq	r5, r1, sl, lsl r1
    a800:	01560100 	cmpeq	r6, r0, lsl #2
    a804:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    a808:	1a569102 	bne	15aec18 <_Min_Stack_Size+0x15aea18>
    a80c:	00004179 	andeq	r4, r0, r9, ror r1
    a810:	b1016101 	tstlt	r1, r1, lsl #2
    a814:	03000007 	movweq	r0, #7
    a818:	1a064891 	bne	19ca64 <_Min_Stack_Size+0x19c864>
    a81c:	000040c3 	andeq	r4, r0, r3, asr #1
    a820:	9f017301 	svcls	0x00017301
    a824:	02000000 	andeq	r0, r0, #0
    a828:	d31a5591 	tstle	sl, #608174080	; 0x24400000
    a82c:	01000040 	tsteq	r0, r0, asr #32
    a830:	00aa0174 	adceq	r0, sl, r4, ror r1
    a834:	91020000 	mrsls	r0, (UNDEF: 2)
    a838:	40dd1a46 	sbcsmi	r1, sp, r6, asr #20
    a83c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    a840:	0007c401 	andeq	ip, r7, r1, lsl #8
    a844:	bc910400 	cfldrslt	mvf0, [r1], {0}
    a848:	291a067f 	ldmdbcs	sl, {r0, r1, r2, r3, r4, r5, r6, r9, sl}
    a84c:	0100003f 	tsteq	r0, pc, lsr r0
    a850:	07d7018a 	ldrbeq	r0, [r7, sl, lsl #3]
    a854:	91040000 	mrsls	r0, (UNDEF: 4)
    a858:	00067fb4 			; <UNDEFINED> instruction: 0x00067fb4
    a85c:	00aa0406 	adceq	r0, sl, r6, lsl #8
    a860:	9f0e0000 	svcls	0x000e0000
    a864:	c4000000 	strgt	r0, [r0], #-0
    a868:	1b000007 	blne	a88c <_Min_Stack_Size+0xa68c>
    a86c:	00000084 	andeq	r0, r0, r4, lsl #1
    a870:	064c9103 	strbeq	r9, [ip], -r3, lsl #2
    a874:	009f0e00 	addseq	r0, pc, r0, lsl #28
    a878:	07d70000 	ldrbeq	r0, [r7, r0]
    a87c:	841b0000 	ldrhi	r0, [fp], #-0
    a880:	03000000 	movweq	r0, #0
    a884:	00064091 	muleq	r6, r1, r0
    a888:	00009f0e 	andeq	r9, r0, lr, lsl #30
    a88c:	0007eb00 	andeq	lr, r7, r0, lsl #22
    a890:	00841b00 	addeq	r1, r4, r0, lsl #22
    a894:	91040000 	mrsls	r0, (UNDEF: 4)
    a898:	00067fb8 			; <UNDEFINED> instruction: 0x00067fb8
    a89c:	00424f1c 	subeq	r4, r2, ip, lsl pc
    a8a0:	01980100 	orrseq	r0, r8, r0, lsl #2
    a8a4:	00000021 	andeq	r0, r0, r1, lsr #32
    a8a8:	00000000 	andeq	r0, r0, r0
    a8ac:	0000004a 	andeq	r0, r0, sl, asr #32
    a8b0:	08339c01 	ldmdaeq	r3!, {r0, sl, fp, ip, pc}
    a8b4:	e31d0000 	tst	sp, #0
    a8b8:	0100003e 	tsteq	r0, lr, lsr r0
    a8bc:	04550198 	ldrbeq	r0, [r5], #-408	; 0xfffffe68
    a8c0:	91020000 	mrsls	r0, (UNDEF: 2)
    a8c4:	41641d6c 	cmnmi	r4, ip, ror #26
    a8c8:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    a8cc:	0000aa01 	andeq	sl, r0, r1, lsl #20
    a8d0:	6a910200 	bvs	fe44b0d8 <BootRAM+0xd3bb879>
    a8d4:	003f291a 	eorseq	r2, pc, sl, lsl r9	; <UNPREDICTABLE>
    a8d8:	01990100 	orrseq	r0, r9, r0, lsl #2
    a8dc:	00000833 	andeq	r0, r0, r3, lsr r8
    a8e0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    a8e4:	00009f0e 	andeq	r9, r0, lr, lsl #30
    a8e8:	00084300 	andeq	r4, r8, r0, lsl #6
    a8ec:	00840f00 	addeq	r0, r4, r0, lsl #30
    a8f0:	00030000 	andeq	r0, r3, r0
    a8f4:	0041f01c 	subeq	pc, r1, ip, lsl r0	; <UNPREDICTABLE>
    a8f8:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    a8fc:	00000021 	andeq	r0, r0, r1, lsr #32
    a900:	08007d20 	stmdaeq	r0, {r5, r8, sl, fp, ip, sp, lr}
    a904:	00000182 	andeq	r0, r0, r2, lsl #3
    a908:	08dc9c01 	ldmeq	ip, {r0, sl, fp, ip, pc}^
    a90c:	e31d0000 	tst	sp, #0
    a910:	0100003e 	tsteq	r0, lr, lsr r0
    a914:	045501a8 	ldrbeq	r0, [r5], #-424	; 0xfffffe58
    a918:	91030000 	mrsls	r0, (UNDEF: 3)
    a91c:	0e1d7fb4 	mrceq	15, 0, r7, cr13, cr4, {5}
    a920:	01000042 	tsteq	r0, r2, asr #32
    a924:	009401a8 	addseq	r0, r4, r8, lsr #3
    a928:	91030000 	mrsls	r0, (UNDEF: 3)
    a92c:	641d7fb0 	ldrvs	r7, [sp], #-4016	; 0xfffff050
    a930:	01000041 	tsteq	r0, r1, asr #32
    a934:	07ab01a8 	streq	r0, [fp, r8, lsr #3]!
    a938:	91030000 	mrsls	r0, (UNDEF: 3)
    a93c:	3c1a7fac 	ldccc	15, cr7, [sl], {172}	; 0xac
    a940:	01000042 	tsteq	r0, r2, asr #32
    a944:	00aa01a9 	adceq	r0, sl, r9, lsr #3
    a948:	91020000 	mrsls	r0, (UNDEF: 2)
    a94c:	41791a56 	cmnmi	r9, r6, asr sl
    a950:	ac010000 	stcge	0, cr0, [r1], {-0}
    a954:	00060601 	andeq	r0, r6, r1, lsl #12
    a958:	40910200 	addsmi	r0, r1, r0, lsl #4
    a95c:	0041471a 	subeq	r4, r1, sl, lsl r7
    a960:	01b50100 			; <UNDEFINED> instruction: 0x01b50100
    a964:	000008dc 	ldrdeq	r0, [r0], -ip
    a968:	064c9103 	strbeq	r9, [ip], -r3, lsl #2
    a96c:	0040dd1a 	subeq	sp, r0, sl, lsl sp
    a970:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
    a974:	00000606 	andeq	r0, r0, r6, lsl #12
    a978:	7fbc9103 	svcvc	0x00bc9103
    a97c:	003f291a 	eorseq	r2, pc, sl, lsl r9	; <UNPREDICTABLE>
    a980:	01c10100 	biceq	r0, r1, r0, lsl #2
    a984:	000008ef 	andeq	r0, r0, pc, ror #17
    a988:	06449103 	strbeq	r9, [r4], -r3, lsl #2
    a98c:	009f0e00 	addseq	r0, pc, r0, lsl #28
    a990:	08ef0000 	stmiaeq	pc!, {}^	; <UNPREDICTABLE>
    a994:	841b0000 	ldrhi	r0, [fp], #-0
    a998:	03000000 	movweq	r0, #0
    a99c:	00065091 	muleq	r6, r1, r0
    a9a0:	00009f0e 	andeq	r9, r0, lr, lsl #30
    a9a4:	00090200 	andeq	r0, r9, r0, lsl #4
    a9a8:	00841b00 	addeq	r1, r4, r0, lsl #22
    a9ac:	91030000 	mrsls	r0, (UNDEF: 3)
    a9b0:	1c000648 	stcne	6, cr0, [r0], {72}	; 0x48
    a9b4:	000041c9 	andeq	r4, r0, r9, asr #3
    a9b8:	2101cf01 	tstcs	r1, r1, lsl #30
    a9bc:	00000000 	andeq	r0, r0, r0
    a9c0:	82000000 	andhi	r0, r0, #0
    a9c4:	01000001 	tsteq	r0, r1
    a9c8:	00099b9c 	muleq	r9, ip, fp
    a9cc:	3ee31d00 	cdpcc	13, 14, cr1, cr3, cr0, {0}
    a9d0:	cf010000 	svcgt	0x00010000
    a9d4:	00045501 	andeq	r5, r4, r1, lsl #10
    a9d8:	b4910300 	ldrlt	r0, [r1], #768	; 0x300
    a9dc:	420e1d7f 	andmi	r1, lr, #8128	; 0x1fc0
    a9e0:	cf010000 	svcgt	0x00010000
    a9e4:	00009401 	andeq	r9, r0, r1, lsl #8
    a9e8:	b0910300 	addslt	r0, r1, r0, lsl #6
    a9ec:	41641d7f 	smcmi	16863	; 0x41df
    a9f0:	cf010000 	svcgt	0x00010000
    a9f4:	0007ab01 	andeq	sl, r7, r1, lsl #22
    a9f8:	ac910300 	ldcge	3, cr0, [r1], {0}
    a9fc:	423c1a7f 	eorsmi	r1, ip, #520192	; 0x7f000
    aa00:	d0010000 	andle	r0, r1, r0
    aa04:	0000aa01 	andeq	sl, r0, r1, lsl #20
    aa08:	56910200 	ldrpl	r0, [r1], r0, lsl #4
    aa0c:	0041791a 	subeq	r7, r1, sl, lsl r9
    aa10:	01d30100 	bicseq	r0, r3, r0, lsl #2
    aa14:	00000606 	andeq	r0, r0, r6, lsl #12
    aa18:	1a409102 	bne	102ee28 <_Min_Stack_Size+0x102ec28>
    aa1c:	00004147 	andeq	r4, r0, r7, asr #2
    aa20:	9b01dc01 	blls	81a2c <_Min_Stack_Size+0x8182c>
    aa24:	03000009 	movweq	r0, #9
    aa28:	1a064c91 	bne	19dc74 <_Min_Stack_Size+0x19da74>
    aa2c:	000040dd 	ldrdeq	r4, [r0], -sp
    aa30:	0601e301 	streq	lr, [r1], -r1, lsl #6
    aa34:	03000006 	movweq	r0, #6
    aa38:	1a7fbc91 	bne	1ff9c84 <_Min_Stack_Size+0x1ff9a84>
    aa3c:	00003f29 	andeq	r3, r0, r9, lsr #30
    aa40:	ae01e801 	cdpge	8, 0, cr14, cr1, cr1, {0}
    aa44:	03000009 	movweq	r0, #9
    aa48:	00064491 	muleq	r6, r1, r4
    aa4c:	00009f0e 	andeq	r9, r0, lr, lsl #30
    aa50:	0009ae00 	andeq	sl, r9, r0, lsl #28
    aa54:	00841b00 	addeq	r1, r4, r0, lsl #22
    aa58:	91030000 	mrsls	r0, (UNDEF: 3)
    aa5c:	1f000650 	svcne	0x00000650
    aa60:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    aa64:	0000841b 	andeq	r8, r0, fp, lsl r4
    aa68:	48910300 	ldmmi	r1, {r8, r9}
    aa6c:	a7000006 	strge	r0, [r0, -r6]
    aa70:	04000002 	streq	r0, [r0], #-2
    aa74:	00235600 	eoreq	r5, r3, r0, lsl #12
    aa78:	11010400 	tstne	r1, r0, lsl #8
    aa7c:	0c000001 	stceq	0, cr0, [r0], {1}
    aa80:	000042ef 	andeq	r4, r0, pc, ror #5
    aa84:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    aa88:	00000000 	andeq	r0, r0, r0
    aa8c:	00004c1a 	andeq	r4, r0, sl, lsl ip
    aa90:	ce070402 	cdpgt	4, 0, cr0, cr7, cr2, {0}
    aa94:	03000001 	movweq	r0, #1
    aa98:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    aa9c:	08020074 	stmdaeq	r2, {r2, r4, r5, r6}
    aaa0:	0000b805 	andeq	fp, r0, r5, lsl #16
    aaa4:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
    aaa8:	000002f8 	strdeq	r0, [r0], -r8
    aaac:	92060102 	andls	r0, r6, #-2147483648	; 0x80000000
    aab0:	02000001 	andeq	r0, r0, #1
    aab4:	01900801 	orrseq	r0, r0, r1, lsl #16
    aab8:	02020000 	andeq	r0, r2, #0
    aabc:	00009505 	andeq	r9, r0, r5, lsl #10
    aac0:	07020200 	streq	r0, [r2, -r0, lsl #4]
    aac4:	000001f2 	strdeq	r0, [r0], -r2
    aac8:	bd050402 	cfstrslt	mvf0, [r5, #-8]
    aacc:	04000000 	streq	r0, [r0], #-0
    aad0:	00000067 	andeq	r0, r0, r7, rrx
    aad4:	006b4102 	rsbeq	r4, fp, r2, lsl #2
    aad8:	04020000 	streq	r0, [r2], #-0
    aadc:	0001c907 	andeq	ip, r1, r7, lsl #18
    aae0:	07080200 	streq	r0, [r8, -r0, lsl #4]
    aae4:	000001c4 	andeq	r0, r0, r4, asr #3
    aae8:	59070402 	stmdbpl	r7, {r1, sl}
    aaec:	05000000 	streq	r0, [r0, #-0]
    aaf0:	08010204 	stmdaeq	r1, {r2, r9}
    aaf4:	00000199 	muleq	r0, r9, r1
    aaf8:	00006904 	andeq	r6, r0, r4, lsl #18
    aafc:	60300300 	eorsvs	r0, r0, r0, lsl #6
    ab00:	04000000 	streq	r0, [r0], #-0
    ab04:	000040a6 	andeq	r4, r0, r6, lsr #1
    ab08:	006b3904 	rsbeq	r3, fp, r4, lsl #18
    ab0c:	ab040000 	blge	10ab14 <_Min_Stack_Size+0x10a914>
    ab10:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
    ab14:	0000893f 	andeq	r8, r0, pc, lsr r9
    ab18:	43480600 	movtmi	r0, #34304	; 0x8600
    ab1c:	05140000 	ldreq	r0, [r4, #-0]
    ab20:	0000f38c 	andeq	pc, r0, ip, lsl #7
    ab24:	432c0700 			; <UNDEFINED> instruction: 0x432c0700
    ab28:	8f050000 	svchi	0x00050000
    ab2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    ab30:	439c0700 	orrsmi	r0, ip, #0, 14
    ab34:	90050000 	andls	r0, r5, r0
    ab38:	000000f3 	strdeq	r0, [r0], -r3
    ab3c:	43df0704 	bicsmi	r0, pc, #4, 14	; 0x100000
    ab40:	91050000 	mrsls	r0, (UNDEF: 5)
    ab44:	000000f3 	strdeq	r0, [r0], -r3
    ab48:	43400708 	movtmi	r0, #1800	; 0x708
    ab4c:	92050000 	andls	r0, r5, #0
    ab50:	00000080 	andeq	r0, r0, r0, lsl #1
    ab54:	4311070c 	tstmi	r1, #12, 14	; 0x300000
    ab58:	93050000 	movwls	r0, #20480	; 0x5000
    ab5c:	0000012a 	andeq	r0, r0, sl, lsr #2
    ab60:	04080010 	streq	r0, [r8], #-16
    ab64:	000000aa 	andeq	r0, r0, sl, lsr #1
    ab68:	00440106 	subeq	r0, r4, r6, lsl #2
    ab6c:	a4051400 	strge	r1, [r5], #-1024	; 0xfffffc00
    ab70:	0000012a 	andeq	r0, r0, sl, lsr #2
    ab74:	00437d07 	subeq	r7, r3, r7, lsl #26
    ab78:	77a70500 	strvc	r0, [r7, r0, lsl #10]!
    ab7c:	00000001 	andeq	r0, r0, r1
    ab80:	0043d707 	subeq	sp, r3, r7, lsl #14
    ab84:	7ca80500 	cfstr32vc	mvfx0, [r8]
    ab88:	04000001 	streq	r0, [r0], #-1
    ab8c:	00433707 	subeq	r3, r3, r7, lsl #14
    ab90:	6ca90500 	cfstr32vs	mvfx0, [r9]
    ab94:	08000001 	stmdaeq	r0, {r0}
    ab98:	f9040800 			; <UNDEFINED> instruction: 0xf9040800
    ab9c:	04000000 	streq	r0, [r0], #-0
    aba0:	00004321 	andeq	r4, r0, r1, lsr #6
    aba4:	00aa9605 	adceq	r9, sl, r5, lsl #12
    aba8:	ea060000 	b	18abb0 <_Min_Stack_Size+0x18a9b0>
    abac:	0c000043 	stceq	0, cr0, [r0], {67}	; 0x43
    abb0:	016c9805 	cmneq	ip, r5, lsl #16
    abb4:	2c070000 	stccs	0, cr0, [r7], {-0}
    abb8:	05000043 	streq	r0, [r0, #-67]	; 0xffffffbd
    abbc:	00009f9b 	muleq	r0, fp, pc	; <UNPREDICTABLE>
    abc0:	9c070000 	stcls	0, cr0, [r7], {-0}
    abc4:	05000043 	streq	r0, [r0, #-67]	; 0xffffffbd
    abc8:	0000f39c 	muleq	r0, ip, r3
    abcc:	df070400 	svcle	0x00070400
    abd0:	05000043 	streq	r0, [r0, #-67]	; 0xffffffbd
    abd4:	0000f39d 	muleq	r0, sp, r3
    abd8:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    abdc:	0000431d 	andeq	r4, r0, sp, lsl r3
    abe0:	013b9f05 	teqeq	fp, r5, lsl #30
    abe4:	94090000 	strls	r0, [r9], #-0
    abe8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    abec:	00013004 	andeq	r3, r1, r4
    abf0:	43760400 	cmnmi	r6, #0, 8
    abf4:	ab050000 	blge	14abfc <_Min_Stack_Size+0x14a9fc>
    abf8:	000000f9 	strdeq	r0, [r0], -r9
    abfc:	0043a30a 	subeq	sl, r3, sl, lsl #6
    ac00:	a4250100 	strtge	r0, [r5], #-256	; 0xffffff00
    ac04:	3e08007e 	mcrcc	0, 0, r0, cr8, cr14, {3}
    ac08:	01000000 	mrseq	r0, (UNDEF: 0)
    ac0c:	0001b19c 	muleq	r1, ip, r1
    ac10:	43fa0b00 	mvnsmi	r0, #0, 22
    ac14:	25010000 	strcs	r0, [r1, #-0]
    ac18:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
    ac1c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    ac20:	01820408 	orreq	r0, r2, r8, lsl #8
    ac24:	b10c0000 	mrslt	r0, (UNDEF: 12)
    ac28:	0a000001 	beq	ac34 <_Min_Stack_Size+0xaa34>
    ac2c:	00004362 	andeq	r4, r0, r2, ror #6
    ac30:	7ee43e01 	cdpvc	14, 14, cr3, cr4, cr1, {0}
    ac34:	00180800 	andseq	r0, r8, r0, lsl #16
    ac38:	9c010000 	stcls	0, cr0, [r1], {-0}
    ac3c:	000001e0 	andeq	r0, r0, r0, ror #3
    ac40:	0043c50b 	subeq	ip, r3, fp, lsl #10
    ac44:	e03e0100 	eors	r0, lr, r0, lsl #2
    ac48:	02000001 	andeq	r0, r0, #1
    ac4c:	0c007491 	cfstrseq	mvf7, [r0], {145}	; 0x91
    ac50:	0000017c 	andeq	r0, r0, ip, ror r1
    ac54:	00438d0a 	subeq	r8, r3, sl, lsl #26
    ac58:	fc4a0100 	mcrr2	1, 0, r0, sl, cr0
    ac5c:	4608007e 			; <UNDEFINED> instruction: 0x4608007e
    ac60:	01000000 	mrseq	r0, (UNDEF: 0)
    ac64:	0002259c 	muleq	r2, ip, r5
    ac68:	43fa0b00 	mvnsmi	r0, #0, 22
    ac6c:	4a010000 	bmi	4ac74 <_Min_Stack_Size+0x4aa74>
    ac70:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
    ac74:	0b6c9102 	bleq	1b2f084 <_Min_Stack_Size+0x1b2ee84>
    ac78:	00004414 	andeq	r4, r0, r4, lsl r4
    ac7c:	01e04a01 	mvneq	r4, r1, lsl #20
    ac80:	91020000 	mrsls	r0, (UNDEF: 2)
    ac84:	43d70d68 	bicsmi	r0, r7, #104, 26	; 0x1a00
    ac88:	4c010000 	stcmi	0, cr0, [r1], {-0}
    ac8c:	000001e0 	andeq	r0, r0, r0, ror #3
    ac90:	00749102 	rsbseq	r9, r4, r2, lsl #2
    ac94:	0044220a 	subeq	r2, r4, sl, lsl #4
    ac98:	44670100 	strbtmi	r0, [r7], #-256	; 0xffffff00
    ac9c:	7008007f 	andvc	r0, r8, pc, ror r0
    aca0:	01000000 	mrseq	r0, (UNDEF: 0)
    aca4:	0002739c 	muleq	r2, ip, r3
    aca8:	43fa0b00 	mvnsmi	r0, #0, 22
    acac:	67010000 	strvs	r0, [r1, -r0]
    acb0:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
    acb4:	0b6c9102 	bleq	1b2f0c4 <_Min_Stack_Size+0x1b2eec4>
    acb8:	00004414 	andeq	r4, r0, r4, lsl r4
    acbc:	01e06701 	mvneq	r6, r1, lsl #14
    acc0:	91020000 	mrsls	r0, (UNDEF: 2)
    acc4:	43cc0d68 	bicmi	r0, ip, #104, 26	; 0x1a00
    acc8:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    accc:	0000017c 	andeq	r0, r0, ip, ror r1
    acd0:	0d749102 	ldfeqp	f1, [r4, #-8]!
    acd4:	000043b3 			; <UNDEFINED> instruction: 0x000043b3
    acd8:	02736a01 	rsbseq	r6, r3, #4096	; 0x1000
    acdc:	91020000 	mrsls	r0, (UNDEF: 2)
    ace0:	9f0c0070 	svcls	0x000c0070
    ace4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    ace8:	00004407 	andeq	r4, r0, r7, lsl #8
    acec:	0094aa01 	addseq	sl, r4, r1, lsl #20
    acf0:	7fb40000 	svcvc	0x00b40000
    acf4:	00520800 	subseq	r0, r2, r0, lsl #16
    acf8:	9c010000 	stcls	0, cr0, [r1], {-0}
    acfc:	0043530b 	subeq	r5, r3, fp, lsl #6
    ad00:	e0aa0100 	adc	r0, sl, r0, lsl #2
    ad04:	02000001 	andeq	r0, r0, #1
    ad08:	fa0d6c91 	blx	365f54 <_Min_Stack_Size+0x365d54>
    ad0c:	01000043 	tsteq	r0, r3, asr #32
    ad10:	0001b7ae 	andeq	fp, r1, lr, lsr #15
    ad14:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    ad18:	0e860000 	cdpeq	0, 8, cr0, cr6, cr0, {0}
    ad1c:	00040000 	andeq	r0, r4, r0
    ad20:	00002419 	andeq	r2, r0, r9, lsl r4
    ad24:	01110104 	tsteq	r1, r4, lsl #2
    ad28:	d50c0000 	strle	r0, [ip, #-0]
    ad2c:	20000046 	andcs	r0, r0, r6, asr #32
    ad30:	0000000d 	andeq	r0, r0, sp
    ad34:	a1000000 	mrsge	r0, (UNDEF: 0)
    ad38:	0200004d 	andeq	r0, r0, #77	; 0x4d
    ad3c:	00005cec 	andeq	r5, r0, ip, ror #25
    ad40:	002cd803 	eoreq	sp, ip, r3, lsl #16
    ad44:	04030000 	streq	r0, [r3], #-0
    ad48:	0001ce07 	andeq	ip, r1, r7, lsl #28
    ad4c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    ad50:	00746e69 	rsbseq	r6, r4, r9, ror #28
    ad54:	b8050803 	stmdalt	r5, {r0, r1, fp}
    ad58:	03000000 	movweq	r0, #0
    ad5c:	02f80408 	rscseq	r0, r8, #8, 8	; 0x8000000
    ad60:	b3020000 	movwlt	r0, #8192	; 0x2000
    ad64:	04000004 	streq	r0, [r0], #-4
    ad68:	0000531b 	andeq	r5, r0, fp, lsl r3
    ad6c:	06010300 	streq	r0, [r1], -r0, lsl #6
    ad70:	00000192 	muleq	r0, r2, r1
    ad74:	0000e302 	andeq	lr, r0, r2, lsl #6
    ad78:	651d0400 	ldrvs	r0, [sp, #-1024]	; 0xfffffc00
    ad7c:	03000000 	movweq	r0, #0
    ad80:	01900801 	orrseq	r0, r0, r1, lsl #16
    ad84:	02030000 	andeq	r0, r3, #0
    ad88:	00009505 	andeq	r9, r0, r5, lsl #10
    ad8c:	07020300 	streq	r0, [r2, -r0, lsl #6]
    ad90:	000001f2 	strdeq	r0, [r0], -r2
    ad94:	bd050403 	cfstrslt	mvf0, [r5, #-12]
    ad98:	02000000 	andeq	r0, r0, #0
    ad9c:	00000067 	andeq	r0, r0, r7, rrx
    ada0:	008c4104 	addeq	r4, ip, r4, lsl #2
    ada4:	04030000 	streq	r0, [r3], #-0
    ada8:	0001c907 	andeq	ip, r1, r7, lsl #18
    adac:	07080300 	streq	r0, [r8, -r0, lsl #6]
    adb0:	000001c4 	andeq	r0, r0, r4, asr #3
    adb4:	59070403 	stmdbpl	r7, {r0, r1, sl}
    adb8:	05000000 	streq	r0, [r0, #-0]
    adbc:	08010304 	stmdaeq	r1, {r2, r8, r9}
    adc0:	00000199 	muleq	r0, r9, r1
    adc4:	00b00406 	adcseq	r0, r0, r6, lsl #8
    adc8:	02070000 	andeq	r0, r7, #0
    adcc:	000004b5 			; <UNDEFINED> instruction: 0x000004b5
    add0:	00481405 	subeq	r1, r8, r5, lsl #8
    add4:	e5020000 	str	r0, [r2, #-0]
    add8:	05000000 	streq	r0, [r0, #-0]
    addc:	00005a18 	andeq	r5, r0, r8, lsl sl
    ade0:	00690200 	rsbeq	r0, r9, r0, lsl #4
    ade4:	30050000 	andcc	r0, r5, r0
    ade8:	00000081 	andeq	r0, r0, r1, lsl #1
    adec:	0040a702 	subeq	sl, r0, r2, lsl #14
    adf0:	7a380200 	bvc	e0b5f8 <_Min_Stack_Size+0xe0b3f8>
    adf4:	02000000 	andeq	r0, r0, #0
    adf8:	000040a6 	andeq	r4, r0, r6, lsr #1
    adfc:	008c3902 	addeq	r3, ip, r2, lsl #18
    ae00:	ab020000 	blge	8ae08 <_Min_Stack_Size+0x8ac08>
    ae04:	0200003e 	andeq	r0, r0, #62	; 0x3e
    ae08:	0000c73f 	andeq	ip, r0, pc, lsr r7
    ae0c:	bc040600 	stclt	6, cr0, [r4], {-0}
    ae10:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    ae14:	00004348 	andeq	r4, r0, r8, asr #6
    ae18:	428c0614 	addmi	r0, ip, #20, 12	; 0x1400000
    ae1c:	09000001 	stmdbeq	r0, {r0}
    ae20:	0000432c 	andeq	r4, r0, ip, lsr #6
    ae24:	00e88f06 	rsceq	r8, r8, r6, lsl #30
    ae28:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    ae2c:	0000439c 	muleq	r0, ip, r3
    ae30:	01429006 	cmpeq	r2, r6
    ae34:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    ae38:	000043df 	ldrdeq	r4, [r0], -pc	; <UNPREDICTABLE>
    ae3c:	01429106 	cmpeq	r2, r6, lsl #2
    ae40:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    ae44:	00004340 	andeq	r4, r0, r0, asr #6
    ae48:	00a19206 	adceq	r9, r1, r6, lsl #4
    ae4c:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    ae50:	00004311 	andeq	r4, r0, r1, lsl r3
    ae54:	01799306 	cmneq	r9, r6, lsl #6
    ae58:	00100000 	andseq	r0, r0, r0
    ae5c:	00f90406 	rscseq	r0, r9, r6, lsl #8
    ae60:	01080000 	mrseq	r0, (UNDEF: 8)
    ae64:	14000044 	strne	r0, [r0], #-68	; 0xffffffbc
    ae68:	0179a406 	cmneq	r9, r6, lsl #8
    ae6c:	7d090000 	stcvc	0, cr0, [r9, #-0]
    ae70:	06000043 	streq	r0, [r0], -r3, asr #32
    ae74:	0001c6a7 	andeq	ip, r1, r7, lsr #13
    ae78:	d7090000 	strle	r0, [r9, -r0]
    ae7c:	06000043 	streq	r0, [r0], -r3, asr #32
    ae80:	0001cba8 	andeq	ip, r1, r8, lsr #23
    ae84:	37090400 	strcc	r0, [r9, -r0, lsl #8]
    ae88:	06000043 	streq	r0, [r0], -r3, asr #32
    ae8c:	0001bba9 	andeq	fp, r1, r9, lsr #23
    ae90:	06000800 	streq	r0, [r0], -r0, lsl #16
    ae94:	00014804 	andeq	r4, r1, r4, lsl #16
    ae98:	43210200 			; <UNDEFINED> instruction: 0x43210200
    ae9c:	96060000 	strls	r0, [r6], -r0
    aea0:	000000f9 	strdeq	r0, [r0], -r9
    aea4:	0043ea08 	subeq	lr, r3, r8, lsl #20
    aea8:	98060c00 	stmdals	r6, {sl, fp}
    aeac:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    aeb0:	00432c09 	subeq	r2, r3, r9, lsl #24
    aeb4:	e89b0600 	ldm	fp, {r9, sl}
    aeb8:	00000000 	andeq	r0, r0, r0
    aebc:	00439c09 	subeq	r9, r3, r9, lsl #24
    aec0:	429c0600 	addsmi	r0, ip, #0, 12
    aec4:	04000001 	streq	r0, [r0], #-1
    aec8:	0043df09 	subeq	sp, r3, r9, lsl #30
    aecc:	429d0600 	addsmi	r0, sp, #0, 12
    aed0:	08000001 	stmdaeq	r0, {r0}
    aed4:	431d0200 	tstmi	sp, #0, 4
    aed8:	9f060000 	svcls	0x00060000
    aedc:	0000018a 	andeq	r0, r0, sl, lsl #3
    aee0:	0000dd0a 	andeq	sp, r0, sl, lsl #26
    aee4:	7f040600 	svcvc	0x00040600
    aee8:	02000001 	andeq	r0, r0, #1
    aeec:	00004376 	andeq	r4, r0, r6, ror r3
    aef0:	0148ab06 	cmpeq	r8, r6, lsl #22
    aef4:	95020000 	strls	r0, [r2, #-0]
    aef8:	0700003e 	smladxeq	r0, lr, r0, r0
    aefc:	0001e746 	andeq	lr, r1, r6, asr #14
    af00:	ed040600 	stc	6, cr0, [r4, #-0]
    af04:	0b000001 	bleq	af10 <_Min_Stack_Size+0xad10>
    af08:	0000401d 	andeq	r4, r0, sp, lsl r0
    af0c:	00446008 	subeq	r6, r4, r8
    af10:	66070800 	strvs	r0, [r7], -r0, lsl #16
    af14:	00000217 	andeq	r0, r0, r7, lsl r2
    af18:	0046ac09 	subeq	sl, r6, r9, lsl #24
    af1c:	d2680700 	rsble	r0, r8, #0, 14
    af20:	00000000 	andeq	r0, r0, r0
    af24:	00469c09 	subeq	r9, r6, r9, lsl #24
    af28:	e8690700 	stmda	r9!, {r8, r9, sl}^
    af2c:	04000000 	streq	r0, [r0], #-0
    af30:	446a0200 	strbtmi	r0, [sl], #-512	; 0xfffffe00
    af34:	6a070000 	bvs	1caf3c <_Min_Stack_Size+0x1cad3c>
    af38:	000001f2 	strdeq	r0, [r0], -r2
    af3c:	003e0202 	eorseq	r0, lr, r2, lsl #4
    af40:	2d300800 	ldccs	8, cr0, [r0, #-0]
    af44:	06000002 	streq	r0, [r0], -r2
    af48:	00023304 	andeq	r3, r2, r4, lsl #6
    af4c:	3fa50800 	svccc	0x00a50800
    af50:	01480000 	mrseq	r0, (UNDEF: 72)
    af54:	0002b661 	andeq	fp, r2, r1, ror #12
    af58:	458f0900 	strmi	r0, [pc, #2304]	; b860 <_Min_Stack_Size+0xb660>
    af5c:	63010000 	movwvs	r0, #4096	; 0x1000
    af60:	000002db 	ldrdeq	r0, [r0], -fp
    af64:	478f0900 	strmi	r0, [pc, r0, lsl #18]
    af68:	64010000 	strvs	r0, [r1], #-0
    af6c:	000002db 	ldrdeq	r0, [r0], -fp
    af70:	00750c04 	rsbseq	r0, r5, r4, lsl #24
    af74:	031c6a01 	tsteq	ip, #4096	; 0x1000
    af78:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    af7c:	000048e7 	andeq	r4, r0, r7, ror #17
    af80:	01d16c01 	bicseq	r6, r1, r1, lsl #24
    af84:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    af88:	00004728 	andeq	r4, r0, r8, lsr #14
    af8c:	01d16d01 	bicseq	r6, r1, r1, lsl #26
    af90:	09240000 	stmdbeq	r4!, {}	; <UNPREDICTABLE>
    af94:	00004869 	andeq	r4, r0, r9, ror #16
    af98:	01c66f01 	biceq	r6, r6, r1, lsl #30
    af9c:	09380000 	ldmdbeq	r8!, {}	; <UNPREDICTABLE>
    afa0:	000045c6 	andeq	r4, r0, r6, asr #11
    afa4:	00dd7001 	sbcseq	r7, sp, r1
    afa8:	093c0000 	ldmdbeq	ip!, {}	; <UNPREDICTABLE>
    afac:	0000463f 	andeq	r4, r0, pc, lsr r6
    afb0:	00dd7101 	sbcseq	r7, sp, r1, lsl #2
    afb4:	09400000 	stmdbeq	r0, {}^	; <UNPREDICTABLE>
    afb8:	0000490e 	andeq	r4, r0, lr, lsl #18
    afbc:	033b7301 	teqeq	fp, #67108864	; 0x4000000
    afc0:	09440000 	stmdbeq	r4, {}^	; <UNPREDICTABLE>
    afc4:	0000464a 	andeq	r4, r0, sl, asr #12
    afc8:	033b7401 	teqeq	fp, #16777216	; 0x1000000
    afcc:	00450000 	subeq	r0, r5, r0
    afd0:	0048b408 	subeq	fp, r8, r8, lsl #8
    afd4:	43010800 	movwmi	r0, #6144	; 0x1800
    afd8:	000002db 	ldrdeq	r0, [r0], -fp
    afdc:	00454009 	subeq	r4, r5, r9
    afe0:	db450100 	blle	114b3e8 <_Min_Stack_Size+0x114b1e8>
    afe4:	00000002 	andeq	r0, r0, r2
    afe8:	0047c409 	subeq	ip, r7, r9, lsl #8
    afec:	db460100 	blle	118b3f4 <_Min_Stack_Size+0x118b1f4>
    aff0:	04000002 	streq	r0, [r0], #-2
    aff4:	b1040600 	tstlt	r4, r0, lsl #12
    aff8:	02000000 	andeq	r0, r0, #0
    affc:	000048a4 	andeq	r4, r0, r4, lsr #17
    b000:	02b64701 	adcseq	r4, r6, #262144	; 0x40000
    b004:	f8080000 			; <UNDEFINED> instruction: 0xf8080000
    b008:	08000046 	stmdaeq	r0, {r1, r2, r6}
    b00c:	03114901 	tsteq	r1, #16384	; 0x4000
    b010:	d1090000 	mrsle	r0, (UNDEF: 9)
    b014:	0100004f 	tsteq	r0, pc, asr #32
    b018:	0001dc4b 	andeq	sp, r1, fp, asr #24
    b01c:	87090000 	strhi	r0, [r9, -r0]
    b020:	01000046 	tsteq	r0, r6, asr #32
    b024:	0000dd4c 	andeq	sp, r0, ip, asr #26
    b028:	02000400 	andeq	r0, r0, #0, 8
    b02c:	0000450a 	andeq	r4, r0, sl, lsl #10
    b030:	02ec4d01 	rsceq	r4, ip, #1, 26	; 0x40
    b034:	080d0000 	stmdaeq	sp, {}	; <UNPREDICTABLE>
    b038:	033b6601 	teqeq	fp, #1048576	; 0x100000
    b03c:	6f0e0000 	svcvs	0x000e0000
    b040:	01000047 	tsteq	r0, r7, asr #32
    b044:	0002e168 	andeq	lr, r2, r8, ror #2
    b048:	44aa0e00 	strtmi	r0, [sl], #3584	; 0xe00
    b04c:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    b050:	00000311 	andeq	r0, r0, r1, lsl r3
    b054:	00b10a00 	adcseq	r0, r1, r0, lsl #20
    b058:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    b05c:	01000046 	tsteq	r0, r6, asr #32
    b060:	00023383 	andeq	r3, r2, r3, lsl #7
    b064:	46cd0200 	strbmi	r0, [sp], r0, lsl #4
    b068:	87010000 	strhi	r0, [r1, -r0]
    b06c:	00000340 	andeq	r0, r0, r0, asr #6
    b070:	0048fb0f 	subeq	pc, r8, pc, lsl #22
    b074:	c7cf0200 	strbgt	r0, [pc, r0, lsl #4]
    b078:	03000000 	movweq	r0, #0
    b07c:	0000037d 	andeq	r0, r0, sp, ror r3
    b080:	0046bb10 	subeq	fp, r6, r0, lsl fp
    b084:	c7d10200 	ldrbgt	r0, [r1, r0, lsl #4]
    b088:	10000000 	andne	r0, r0, r0
    b08c:	00003df5 	strdeq	r3, [r0], -r5
    b090:	00c7d102 	sbceq	sp, r7, r2, lsl #2
    b094:	11000000 	mrsne	r0, (UNDEF: 0)
    b098:	00004556 	andeq	r4, r0, r6, asr r5
    b09c:	9503e302 	strls	lr, [r3, #-770]	; 0xfffffcfe
    b0a0:	12000003 	andne	r0, r0, #3
    b0a4:	000047f0 	strdeq	r4, [r0], -r0
    b0a8:	00c7e302 	sbceq	lr, r7, r2, lsl #6
    b0ac:	13000000 	movwne	r0, #0
    b0b0:	0000443f 	andeq	r4, r0, pc, lsr r4
    b0b4:	00d2ff01 	sbcseq	pc, r2, r1, lsl #30
    b0b8:	80080000 	andhi	r0, r8, r0
    b0bc:	00b40800 	adcseq	r0, r4, r0, lsl #16
    b0c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    b0c4:	000003da 	ldrdeq	r0, [r0], -sl
    b0c8:	00476f14 	subeq	r6, r7, r4, lsl pc
    b0cc:	22ff0100 	rscscs	r0, pc, #0, 2
    b0d0:	02000002 	andeq	r0, r0, #2
    b0d4:	7d146c91 	ldcvc	12, cr6, [r4, #-580]	; 0xfffffdbc
    b0d8:	01000046 	tsteq	r0, r6, asr #32
    b0dc:	0000d2ff 	strdeq	sp, [r0], -pc	; <UNPREDICTABLE>
    b0e0:	68910200 	ldmvs	r1, {r9}
    b0e4:	00476e15 	subeq	r6, r7, r5, lsl lr
    b0e8:	01010100 	mrseq	r0, (UNDEF: 17)
    b0ec:	000003e0 	andeq	r0, r0, r0, ror #7
    b0f0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    b0f4:	034b0406 	movteq	r0, #46086	; 0xb406
    b0f8:	da160000 	ble	58b100 <_Min_Stack_Size+0x58af00>
    b0fc:	17000003 	strne	r0, [r0, -r3]
    b100:	00004668 	andeq	r4, r0, r8, ror #12
    b104:	22017001 	andcs	r7, r1, #1
    b108:	bc000002 	stclt	0, cr0, [r0], {2}
    b10c:	5c080080 	stcpl	0, cr0, [r8], {128}	; 0x80
    b110:	01000000 	mrseq	r0, (UNDEF: 0)
    b114:	00045a9c 	muleq	r4, ip, sl
    b118:	47601800 	strbmi	r1, [r0, -r0, lsl #16]!
    b11c:	70010000 	andvc	r0, r1, r0
    b120:	00045a01 	andeq	r5, r4, r1, lsl #20
    b124:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    b128:	00463f18 	subeq	r3, r6, r8, lsl pc
    b12c:	01700100 	cmneq	r0, r0, lsl #2
    b130:	0000045a 	andeq	r0, r0, sl, asr r4
    b134:	18609102 	stmdane	r0!, {r1, r8, ip, pc}^
    b138:	0000460e 	andeq	r4, r0, lr, lsl #12
    b13c:	5f017001 	svcpl	0x00017001
    b140:	02000004 	andeq	r0, r0, #4
    b144:	7c155f91 	ldcvc	15, cr5, [r5], {145}	; 0x91
    b148:	01000046 	tsteq	r0, r6, asr #32
    b14c:	03da0172 	bicseq	r0, sl, #-2147483620	; 0x8000001c
    b150:	91020000 	mrsls	r0, (UNDEF: 2)
    b154:	473f1570 			; <UNDEFINED> instruction: 0x473f1570
    b158:	73010000 	movwvc	r0, #4096	; 0x1000
    b15c:	00002101 	andeq	r2, r0, r1, lsl #2
    b160:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    b164:	00459615 	subeq	r9, r5, r5, lsl r6
    b168:	01740100 	cmneq	r4, r0, lsl #2
    b16c:	000000f3 	strdeq	r0, [r0], -r3
    b170:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    b174:	0000dd16 	andeq	sp, r0, r6, lsl sp
    b178:	00bc1600 	adcseq	r1, ip, r0, lsl #12
    b17c:	52190000 	andspl	r0, r9, #0
    b180:	01000046 	tsteq	r0, r6, asr #32
    b184:	811801ad 	tsthi	r8, sp, lsr #3
    b188:	003e0800 	eorseq	r0, lr, r0, lsl #16
    b18c:	9c010000 	stcls	0, cr0, [r1], {-0}
    b190:	000004c6 	andeq	r0, r0, r6, asr #9
    b194:	00476018 	subeq	r6, r7, r8, lsl r0
    b198:	01ad0100 			; <UNDEFINED> instruction: 0x01ad0100
    b19c:	0000045a 	andeq	r0, r0, sl, asr r4
    b1a0:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    b1a4:	0000463f 	andeq	r4, r0, pc, lsr r6
    b1a8:	5a01ad01 	bpl	765b4 <_Min_Stack_Size+0x763b4>
    b1ac:	02000004 	andeq	r0, r0, #4
    b1b0:	96187091 			; <UNDEFINED> instruction: 0x96187091
    b1b4:	01000045 	tsteq	r0, r5, asr #32
    b1b8:	00f301ad 	rscseq	r0, r3, sp, lsr #3
    b1bc:	91020000 	mrsls	r0, (UNDEF: 2)
    b1c0:	460e186c 	strmi	r1, [lr], -ip, ror #16
    b1c4:	ad010000 	stcge	0, cr0, [r1, #-0]
    b1c8:	00045f01 	andeq	r5, r4, r1, lsl #30
    b1cc:	6b910200 	blvs	fe44b9d4 <BootRAM+0xd3bc175>
    b1d0:	00467c18 	subeq	r7, r6, r8, lsl ip
    b1d4:	01ad0100 			; <UNDEFINED> instruction: 0x01ad0100
    b1d8:	000003da 	ldrdeq	r0, [r0], -sl
    b1dc:	00009102 	andeq	r9, r0, r2, lsl #2
    b1e0:	0047ff19 	subeq	pc, r7, r9, lsl pc	; <UNPREDICTABLE>
    b1e4:	01d90100 	bicseq	r0, r9, r0, lsl #2
    b1e8:	08008158 	stmdaeq	r0, {r3, r4, r6, r8, pc}
    b1ec:	00000034 	andeq	r0, r0, r4, lsr r0
    b1f0:	04ec9c01 	strbteq	r9, [ip], #3073	; 0xc01
    b1f4:	7c180000 	ldcvc	0, cr0, [r8], {-0}
    b1f8:	01000046 	tsteq	r0, r6, asr #32
    b1fc:	03da01d9 	bicseq	r0, sl, #1073741878	; 0x40000036
    b200:	91020000 	mrsls	r0, (UNDEF: 2)
    b204:	b4170074 	ldrlt	r0, [r7], #-116	; 0xffffff8c
    b208:	01000045 	tsteq	r0, r5, asr #32
    b20c:	022201f7 	eoreq	r0, r2, #-1073741763	; 0xc000003d
    b210:	818c0000 	orrhi	r0, ip, r0
    b214:	00300800 	eorseq	r0, r0, r0, lsl #16
    b218:	9c010000 	stcls	0, cr0, [r1], {-0}
    b21c:	00000543 	andeq	r0, r0, r3, asr #10
    b220:	00460e18 	subeq	r0, r6, r8, lsl lr
    b224:	01f70100 	mvnseq	r0, r0, lsl #2
    b228:	0000045f 	andeq	r0, r0, pc, asr r4
    b22c:	15679102 	strbne	r9, [r7, #-258]!	; 0xfffffefe
    b230:	0000467d 	andeq	r4, r0, sp, ror r6
    b234:	2201f901 	andcs	pc, r1, #16384	; 0x4000
    b238:	02000002 	andeq	r0, r0, #2
    b23c:	a6156c91 			; <UNDEFINED> instruction: 0xa6156c91
    b240:	01000045 	tsteq	r0, r5, asr #32
    b244:	045a01fa 	ldrbeq	r0, [sl], #-506	; 0xfffffe06
    b248:	91020000 	mrsls	r0, (UNDEF: 2)
    b24c:	47cf1574 			; <UNDEFINED> instruction: 0x47cf1574
    b250:	fa010000 	blx	4b258 <_Min_Stack_Size+0x4b058>
    b254:	00045a01 	andeq	r5, r4, r1, lsl #20
    b258:	70910200 	addsvc	r0, r1, r0, lsl #4
    b25c:	48921700 	ldmmi	r2, {r8, r9, sl, ip}
    b260:	eb010000 	bl	4b268 <_Min_Stack_Size+0x4b068>
    b264:	0000d202 	andeq	sp, r0, r2, lsl #4
    b268:	0081bc00 	addeq	fp, r1, r0, lsl #24
    b26c:	00015408 	andeq	r5, r1, r8, lsl #8
    b270:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
    b274:	18000005 	stmdane	r0, {r0, r2}
    b278:	0000476f 	andeq	r4, r0, pc, ror #14
    b27c:	2202eb01 	andcs	lr, r2, #1024	; 0x400
    b280:	02000002 	andeq	r0, r0, #2
    b284:	1a185c91 	bne	6224d0 <_Min_Stack_Size+0x6222d0>
    b288:	01000047 	tsteq	r0, r7, asr #32
    b28c:	05d602eb 	ldrbeq	r0, [r6, #747]	; 0x2eb
    b290:	91020000 	mrsls	r0, (UNDEF: 2)
    b294:	51221858 			; <UNDEFINED> instruction: 0x51221858
    b298:	eb010000 	bl	4b2a0 <_Min_Stack_Size+0x4b0a0>
    b29c:	0000e802 	andeq	lr, r0, r2, lsl #16
    b2a0:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    b2a4:	00484b18 	subeq	r4, r8, r8, lsl fp
    b2a8:	02eb0100 	rsceq	r0, fp, #0, 2
    b2ac:	000005db 	ldrdeq	r0, [r0], -fp
    b2b0:	15509102 	ldrbne	r9, [r0, #-258]	; 0xfffffefe
    b2b4:	00004812 	andeq	r4, r0, r2, lsl r8
    b2b8:	d202ed01 	andle	lr, r2, #1, 26	; 0x40
    b2bc:	02000000 	andeq	r0, r0, #0
    b2c0:	47157491 			; <UNDEFINED> instruction: 0x47157491
    b2c4:	01000045 	tsteq	r0, r5, asr #32
    b2c8:	00d202ed 	sbcseq	r0, r2, sp, ror #5
    b2cc:	91020000 	mrsls	r0, (UNDEF: 2)
    b2d0:	4e38156c 	cdpmi	5, 3, cr1, cr8, cr12, {3}
    b2d4:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    b2d8:	00021702 	andeq	r1, r2, r2, lsl #14
    b2dc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    b2e0:	00476e15 	subeq	r6, r7, r5, lsl lr
    b2e4:	02ef0100 	rsceq	r0, pc, #0, 2
    b2e8:	000003e0 	andeq	r0, r0, r0, ror #7
    b2ec:	00709102 	rsbseq	r9, r0, r2, lsl #2
    b2f0:	0000aa16 	andeq	sl, r0, r6, lsl sl
    b2f4:	00d21600 	sbcseq	r1, r2, r0, lsl #12
    b2f8:	76170000 	ldrvc	r0, [r7], -r0
    b2fc:	01000047 	tsteq	r0, r7, asr #32
    b300:	00d203bd 	ldrheq	r0, [r2], #61	; 0x3d
    b304:	00000000 	andeq	r0, r0, r0
    b308:	00ae0000 	adceq	r0, lr, r0
    b30c:	9c010000 	stcls	0, cr0, [r1], {-0}
    b310:	000006c9 	andeq	r0, r0, r9, asr #13
    b314:	00476f18 	subeq	r6, r7, r8, lsl pc
    b318:	03bd0100 			; <UNDEFINED> instruction: 0x03bd0100
    b31c:	00000222 	andeq	r0, r0, r2, lsr #4
    b320:	18549102 	ldmdane	r4, {r1, r8, ip, pc}^
    b324:	0000471a 	andeq	r4, r0, sl, lsl r7
    b328:	d603bd01 	strle	fp, [r3], -r1, lsl #26
    b32c:	02000005 	andeq	r0, r0, #5
    b330:	c2185091 	andsgt	r5, r8, #145	; 0x91
    b334:	01000048 	tsteq	r0, r8, asr #32
    b338:	06cf03bd 			; <UNDEFINED> instruction: 0x06cf03bd
    b33c:	91020000 	mrsls	r0, (UNDEF: 2)
    b340:	484b184c 	stmdami	fp, {r2, r3, r6, fp, ip}^
    b344:	bd010000 	stclt	0, cr0, [r1, #-0]
    b348:	0005db03 	andeq	sp, r5, r3, lsl #22
    b34c:	48910200 	ldmmi	r1, {r9}
    b350:	00482e15 	subeq	r2, r8, r5, lsl lr
    b354:	03bf0100 			; <UNDEFINED> instruction: 0x03bf0100
    b358:	000000d2 	ldrdeq	r0, [r0], -r2
    b35c:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    b360:	0000487b 	andeq	r4, r0, fp, ror r8
    b364:	dd03c001 	stcle	0, cr12, [r3, #-4]
    b368:	02000000 	andeq	r0, r0, #0
    b36c:	6e156891 	mrcvs	8, 0, r6, cr5, cr1, {4}
    b370:	01000047 	tsteq	r0, r7, asr #32
    b374:	03e003c1 	mvneq	r0, #67108867	; 0x4000003
    b378:	91020000 	mrsls	r0, (UNDEF: 2)
    b37c:	03561a70 	cmpeq	r6, #112, 20	; 0x70000
    b380:	00000000 	andeq	r0, r0, r0
    b384:	001a0000 	andseq	r0, sl, r0
    b388:	dc010000 	stcle	0, cr0, [r1], {-0}
    b38c:	00069203 	andeq	r9, r6, r3, lsl #4
    b390:	00001b00 	andeq	r1, r0, r0, lsl #22
    b394:	001a0000 	andseq	r0, sl, r0
    b398:	661c0000 	ldrvs	r0, [ip], -r0
    b39c:	02000003 	andeq	r0, r0, #3
    b3a0:	711c6091 			; <UNDEFINED> instruction: 0x711c6091
    b3a4:	02000003 	andeq	r0, r0, #3
    b3a8:	00005c91 	muleq	r0, r1, ip
    b3ac:	0000001d 	andeq	r0, r0, sp, lsl r0
    b3b0:	00005400 	andeq	r5, r0, r0, lsl #8
    b3b4:	0006af00 	andeq	sl, r6, r0, lsl #30
    b3b8:	464a1500 	strbmi	r1, [sl], -r0, lsl #10
    b3bc:	e0010000 	and	r0, r1, r0
    b3c0:	0006d403 	andeq	sp, r6, r3, lsl #8
    b3c4:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
    b3c8:	037d1e00 	cmneq	sp, #0, 28
    b3cc:	00000000 	andeq	r0, r0, r0
    b3d0:	00060000 	andeq	r0, r6, r0
    b3d4:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    b3d8:	03891f04 	orreq	r1, r9, #4, 30
    b3dc:	91020000 	mrsls	r0, (UNDEF: 2)
    b3e0:	0600006c 	streq	r0, [r0], -ip, rrx
    b3e4:	0000d204 	andeq	sp, r0, r4, lsl #4
    b3e8:	06c91600 	strbeq	r1, [r9], r0, lsl #12
    b3ec:	b1160000 	tstlt	r6, r0
    b3f0:	17000000 	strne	r0, [r0, -r0]
    b3f4:	00004799 	muleq	r0, r9, r7
    b3f8:	d2045401 	andle	r5, r4, #16777216	; 0x1000000
    b3fc:	00000000 	andeq	r0, r0, r0
    b400:	a6000000 	strge	r0, [r0], -r0
    b404:	01000000 	mrseq	r0, (UNDEF: 0)
    b408:	0007bd9c 	muleq	r7, ip, sp
    b40c:	476f1800 	strbmi	r1, [pc, -r0, lsl #16]!
    b410:	54010000 	strpl	r0, [r1], #-0
    b414:	00022204 	andeq	r2, r2, r4, lsl #4
    b418:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    b41c:	0048c218 	subeq	ip, r8, r8, lsl r2
    b420:	04540100 	ldrbeq	r0, [r4], #-256	; 0xffffff00
    b424:	000006cf 	andeq	r0, r0, pc, asr #13
    b428:	15509102 	ldrbne	r9, [r0, #-258]	; 0xfffffefe
    b42c:	0000482e 	andeq	r4, r0, lr, lsr #16
    b430:	d2045601 	andle	r5, r4, #1048576	; 0x100000
    b434:	02000000 	andeq	r0, r0, #0
    b438:	7b157491 	blvc	568684 <_Min_Stack_Size+0x568484>
    b43c:	01000048 	tsteq	r0, r8, asr #32
    b440:	00dd0457 	sbcseq	r0, sp, r7, asr r4
    b444:	91020000 	mrsls	r0, (UNDEF: 2)
    b448:	476e1568 	strbmi	r1, [lr, -r8, ror #10]!
    b44c:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    b450:	0003e004 	andeq	lr, r3, r4
    b454:	70910200 	addsvc	r0, r1, r0, lsl #4
    b458:	0003561a 	andeq	r5, r3, sl, lsl r6
    b45c:	00000000 	andeq	r0, r0, r0
    b460:	00001a00 	andeq	r1, r0, r0, lsl #20
    b464:	047b0100 	ldrbteq	r0, [fp], #-256	; 0xffffff00
    b468:	0000076d 	andeq	r0, r0, sp, ror #14
    b46c:	0000001b 	andeq	r0, r0, fp, lsl r0
    b470:	00001a00 	andeq	r1, r0, r0, lsl #20
    b474:	03661c00 	cmneq	r6, #0, 24
    b478:	91020000 	mrsls	r0, (UNDEF: 2)
    b47c:	03711c5c 	cmneq	r1, #92, 24	; 0x5c00
    b480:	91020000 	mrsls	r0, (UNDEF: 2)
    b484:	1d000058 	stcne	0, cr0, [r0, #-352]	; 0xfffffea0
    b488:	00000000 	andeq	r0, r0, r0
    b48c:	0000006c 	andeq	r0, r0, ip, rrx
    b490:	000007a3 	andeq	r0, r0, r3, lsr #15
    b494:	00486915 	subeq	r6, r8, r5, lsl r9
    b498:	047d0100 	ldrbteq	r0, [sp], #-256	; 0xffffff00
    b49c:	0000045a 	andeq	r0, r0, sl, asr r4
    b4a0:	1b649102 	blne	192f8b0 <_Min_Stack_Size+0x192f6b0>
    b4a4:	00000000 	andeq	r0, r0, r0
    b4a8:	00000052 	andeq	r0, r0, r2, asr r0
    b4ac:	00464a15 	subeq	r4, r6, r5, lsl sl
    b4b0:	04840100 	streq	r0, [r4], #256	; 0x100
    b4b4:	000006d4 	ldrdeq	r0, [r0], -r4
    b4b8:	00639102 	rsbeq	r9, r3, r2, lsl #2
    b4bc:	037d1e00 	cmneq	sp, #0, 28
    b4c0:	00000000 	andeq	r0, r0, r0
    b4c4:	00060000 	andeq	r0, r6, r0
    b4c8:	f3010000 	vhadd.u8	d0, d1, d0
    b4cc:	03891f04 	orreq	r1, r9, #4, 30
    b4d0:	91020000 	mrsls	r0, (UNDEF: 2)
    b4d4:	1700006c 	strne	r0, [r0, -ip, rrx]
    b4d8:	00004452 	andeq	r4, r0, r2, asr r4
    b4dc:	d204f901 	andle	pc, r4, #16384	; 0x4000
    b4e0:	00000000 	andeq	r0, r0, r0
    b4e4:	44000000 	strmi	r0, [r0], #-0
    b4e8:	01000001 	tsteq	r0, r1
    b4ec:	00084b9c 	muleq	r8, ip, fp
    b4f0:	476f1800 	strbmi	r1, [pc, -r0, lsl #16]!
    b4f4:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    b4f8:	00022204 	andeq	r2, r2, r4, lsl #4
    b4fc:	5c910200 	lfmpl	f0, 4, [r1], {0}
    b500:	00458618 	subeq	r8, r5, r8, lsl r6
    b504:	04f90100 	ldrbteq	r0, [r9], #256	; 0x100
    b508:	0000084b 	andeq	r0, r0, fp, asr #16
    b50c:	18589102 	ldmdane	r8, {r1, r8, ip, pc}^
    b510:	00005122 	andeq	r5, r0, r2, lsr #2
    b514:	e804f901 	stmda	r4, {r0, r8, fp, ip, sp, lr, pc}
    b518:	02000000 	andeq	r0, r0, #0
    b51c:	12155491 	andsne	r5, r5, #-1862270976	; 0x91000000
    b520:	01000048 	tsteq	r0, r8, asr #32
    b524:	00d204fb 	ldrsheq	r0, [r2], #75	; 0x4b
    b528:	91020000 	mrsls	r0, (UNDEF: 2)
    b52c:	4e381574 	mrcmi	5, 1, r1, cr8, cr4, {3}
    b530:	fc010000 	stc2	0, cr0, [r1], {-0}
    b534:	00021704 	andeq	r1, r2, r4, lsl #14
    b538:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    b53c:	00476e15 	subeq	r6, r7, r5, lsl lr
    b540:	04fd0100 	ldrbteq	r0, [sp], #256	; 0x100
    b544:	000003e0 	andeq	r0, r0, r0, ror #7
    b548:	1b709102 	blne	1c2f958 <_Min_Stack_Size+0x1c2f758>
    b54c:	00000000 	andeq	r0, r0, r0
    b550:	0000006e 	andeq	r0, r0, lr, rrx
    b554:	00486915 	subeq	r6, r8, r5, lsl r9
    b558:	05150100 	ldreq	r0, [r5, #-256]	; 0xffffff00
    b55c:	0000045a 	andeq	r0, r0, sl, asr r4
    b560:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    b564:	00a11600 	adceq	r1, r1, r0, lsl #12
    b568:	06170000 	ldreq	r0, [r7], -r0
    b56c:	01000047 	tsteq	r0, r7, asr #32
    b570:	00d20586 	sbcseq	r0, r2, r6, lsl #11
    b574:	83100000 	tsthi	r0, #0
    b578:	01900800 	orrseq	r0, r0, r0, lsl #16
    b57c:	9c010000 	stcls	0, cr0, [r1], {-0}
    b580:	000008fb 	strdeq	r0, [r0], -fp
    b584:	00476f18 	subeq	r6, r7, r8, lsl pc
    b588:	05860100 	streq	r0, [r6, #256]	; 0x100
    b58c:	00000222 	andeq	r0, r0, r2, lsr #4
    b590:	18549102 	ldmdane	r4, {r1, r8, ip, pc}^
    b594:	00005122 	andeq	r5, r0, r2, lsr #2
    b598:	e8058601 	stmda	r5, {r0, r9, sl, pc}
    b59c:	02000000 	andeq	r0, r0, #0
    b5a0:	12155091 	andsne	r5, r5, #145	; 0x91
    b5a4:	01000048 	tsteq	r0, r8, asr #32
    b5a8:	00d20588 	sbcseq	r0, r2, r8, lsl #11
    b5ac:	91020000 	mrsls	r0, (UNDEF: 2)
    b5b0:	4e381574 	mrcmi	5, 1, r1, cr8, cr4, {3}
    b5b4:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    b5b8:	00021705 	andeq	r1, r2, r5, lsl #14
    b5bc:	5c910200 	lfmpl	f0, 4, [r1], {0}
    b5c0:	00476e15 	subeq	r6, r7, r5, lsl lr
    b5c4:	058a0100 	streq	r0, [sl, #256]	; 0x100
    b5c8:	000003e0 	andeq	r0, r0, r0, ror #7
    b5cc:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    b5d0:	00004836 	andeq	r4, r0, r6, lsr r8
    b5d4:	d2058d01 	andle	r8, r5, #1, 26	; 0x40
    b5d8:	02000000 	andeq	r0, r0, #0
    b5dc:	2a1d7091 	bcs	767828 <_Min_Stack_Size+0x767628>
    b5e0:	78080083 	stmdavc	r8, {r0, r1, r7}
    b5e4:	e1000000 	mrs	r0, (UNDEF: 0)
    b5e8:	15000008 	strne	r0, [r0, #-8]
    b5ec:	0000442e 	andeq	r4, r0, lr, lsr #8
    b5f0:	5a05a801 	bpl	1755fc <_Min_Stack_Size+0x1753fc>
    b5f4:	02000004 	andeq	r0, r0, #4
    b5f8:	1b006891 	blne	25844 <_Min_Stack_Size+0x25644>
    b5fc:	0800847a 	stmdaeq	r0, {r1, r3, r4, r5, r6, sl, pc}
    b600:	00000014 	andeq	r0, r0, r4, lsl r0
    b604:	00449115 	subeq	r9, r4, r5, lsl r1
    b608:	06450100 	strbeq	r0, [r5], -r0, lsl #2
    b60c:	000000dd 	ldrdeq	r0, [r0], -sp
    b610:	00649102 	rsbeq	r9, r4, r2, lsl #2
    b614:	48dc1700 	ldmmi	ip, {r8, r9, sl, ip}^
    b618:	60010000 	andvs	r0, r1, r0
    b61c:	0000d206 	andeq	sp, r0, r6, lsl #4
    b620:	00000000 	andeq	r0, r0, r0
    b624:	00014800 	andeq	r4, r1, r0, lsl #16
    b628:	989c0100 	ldmls	ip, {r8}
    b62c:	18000009 	stmdane	r0, {r0, r3}
    b630:	0000476f 	andeq	r4, r0, pc, ror #14
    b634:	22066001 	andcs	r6, r6, #1
    b638:	02000002 	andeq	r0, r0, #2
    b63c:	86185c91 			; <UNDEFINED> instruction: 0x86185c91
    b640:	01000045 	tsteq	r0, r5, asr #32
    b644:	084b0660 	stmdaeq	fp, {r5, r6, r9, sl}^
    b648:	91020000 	mrsls	r0, (UNDEF: 2)
    b64c:	51221858 			; <UNDEFINED> instruction: 0x51221858
    b650:	60010000 	andvs	r0, r1, r0
    b654:	0000e806 	andeq	lr, r0, r6, lsl #16
    b658:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    b65c:	00481215 	subeq	r1, r8, r5, lsl r2
    b660:	06620100 	strbteq	r0, [r2], -r0, lsl #2
    b664:	000000d2 	ldrdeq	r0, [r0], -r2
    b668:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    b66c:	00004e38 	andeq	r4, r0, r8, lsr lr
    b670:	17066301 	strne	r6, [r6, -r1, lsl #6]
    b674:	02000002 	andeq	r0, r0, #2
    b678:	1a156091 	bne	5638c4 <_Min_Stack_Size+0x5636c4>
    b67c:	01000045 	tsteq	r0, r5, asr #32
    b680:	02db0664 	sbcseq	r0, fp, #100, 12	; 0x6400000
    b684:	91020000 	mrsls	r0, (UNDEF: 2)
    b688:	476e1568 	strbmi	r1, [lr, -r8, ror #10]!
    b68c:	65010000 	strvs	r0, [r1, #-0]
    b690:	0003e006 	andeq	lr, r3, r6
    b694:	70910200 	addsvc	r0, r1, r0, lsl #4
    b698:	0000001b 	andeq	r0, r0, fp, lsl r0
    b69c:	00007200 	andeq	r7, r0, r0, lsl #4
    b6a0:	48691500 	stmdami	r9!, {r8, sl, ip}^
    b6a4:	7d010000 	stcvc	0, cr0, [r1, #-0]
    b6a8:	00045a06 	andeq	r5, r4, r6, lsl #20
    b6ac:	6c910200 	lfmvs	f0, 4, [r1], {0}
    b6b0:	f5170000 			; <UNDEFINED> instruction: 0xf5170000
    b6b4:	01000044 	tsteq	r0, r4, asr #32
    b6b8:	00d206f5 	ldrsheq	r0, [r2], #101	; 0x65
    b6bc:	00000000 	andeq	r0, r0, r0
    b6c0:	00ac0000 	adceq	r0, ip, r0
    b6c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    b6c8:	00000a8b 	andeq	r0, r0, fp, lsl #21
    b6cc:	00476f18 	subeq	r6, r7, r8, lsl pc
    b6d0:	06f50100 	ldrbteq	r0, [r5], r0, lsl #2
    b6d4:	00000222 	andeq	r0, r0, r2, lsr #4
    b6d8:	18549102 	ldmdane	r4, {r1, r8, ip, pc}^
    b6dc:	00004586 	andeq	r4, r0, r6, lsl #11
    b6e0:	4b06f501 	blmi	1c8aec <_Min_Stack_Size+0x1c88ec>
    b6e4:	02000008 	andeq	r0, r0, #8
    b6e8:	c2185091 	andsgt	r5, r8, #145	; 0x91
    b6ec:	01000048 	tsteq	r0, r8, asr #32
    b6f0:	06cf06f5 			; <UNDEFINED> instruction: 0x06cf06f5
    b6f4:	91020000 	mrsls	r0, (UNDEF: 2)
    b6f8:	482e154c 	stmdami	lr!, {r2, r3, r6, r8, sl, ip}
    b6fc:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    b700:	0000d206 	andeq	sp, r0, r6, lsl #4
    b704:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    b708:	00487b15 	subeq	r7, r8, r5, lsl fp
    b70c:	06f80100 	ldrbteq	r0, [r8], r0, lsl #2
    b710:	000000dd 	ldrdeq	r0, [r0], -sp
    b714:	15689102 	strbne	r9, [r8, #-258]!	; 0xfffffefe
    b718:	0000476e 	andeq	r4, r0, lr, ror #14
    b71c:	e006f901 	and	pc, r6, r1, lsl #18
    b720:	02000003 	andeq	r0, r0, #3
    b724:	561a7091 			; <UNDEFINED> instruction: 0x561a7091
    b728:	00000003 	andeq	r0, r0, r3
    b72c:	1a000000 	bne	b734 <_Min_Stack_Size+0xb534>
    b730:	01000000 	mrseq	r0, (UNDEF: 0)
    b734:	0a3b070e 	beq	ecd374 <_Min_Stack_Size+0xecd174>
    b738:	001b0000 	andseq	r0, fp, r0
    b73c:	1a000000 	bne	b744 <_Min_Stack_Size+0xb544>
    b740:	1c000000 	stcne	0, cr0, [r0], {-0}
    b744:	00000366 	andeq	r0, r0, r6, ror #6
    b748:	1c5c9102 	ldfnep	f1, [ip], {2}
    b74c:	00000371 	andeq	r0, r0, r1, ror r3
    b750:	00589102 	subseq	r9, r8, r2, lsl #2
    b754:	00001d00 	andeq	r1, r0, r0, lsl #26
    b758:	00700000 	rsbseq	r0, r0, r0
    b75c:	0a710000 	beq	1c4b764 <_Min_Stack_Size+0x1c4b564>
    b760:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
    b764:	01000048 	tsteq	r0, r8, asr #32
    b768:	045a0710 	ldrbeq	r0, [sl], #-1808	; 0xfffff8f0
    b76c:	91020000 	mrsls	r0, (UNDEF: 2)
    b770:	00001b64 	andeq	r1, r0, r4, ror #22
    b774:	005a0000 	subseq	r0, sl, r0
    b778:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
    b77c:	01000049 	tsteq	r0, r9, asr #32
    b780:	06d40715 			; <UNDEFINED> instruction: 0x06d40715
    b784:	91020000 	mrsls	r0, (UNDEF: 2)
    b788:	1e000063 	cdpne	0, 0, cr0, cr0, cr3, {3}
    b78c:	0000037d 	andeq	r0, r0, sp, ror r3
    b790:	00000000 	andeq	r0, r0, r0
    b794:	00000006 	andeq	r0, r0, r6
    b798:	1f074a01 	svcne	0x00074a01
    b79c:	00000389 	andeq	r0, r0, r9, lsl #7
    b7a0:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    b7a4:	44cc1700 	strbmi	r1, [ip], #1792	; 0x700
    b7a8:	50010000 	andpl	r0, r1, r0
    b7ac:	0000d207 	andeq	sp, r0, r7, lsl #4
    b7b0:	00000000 	andeq	r0, r0, r0
    b7b4:	00006400 	andeq	r6, r0, r0, lsl #8
    b7b8:	489c0100 	ldmmi	ip, {r8}
    b7bc:	1800000b 	stmdane	r0, {r0, r1, r3}
    b7c0:	0000476f 	andeq	r4, r0, pc, ror #14
    b7c4:	22075001 	andcs	r5, r7, #1
    b7c8:	02000002 	andeq	r0, r0, #2
    b7cc:	86185491 			; <UNDEFINED> instruction: 0x86185491
    b7d0:	01000045 	tsteq	r0, r5, asr #32
    b7d4:	084b0750 	stmdaeq	fp, {r4, r6, r8, r9, sl}^
    b7d8:	91020000 	mrsls	r0, (UNDEF: 2)
    b7dc:	482e1550 	stmdami	lr!, {r4, r6, r8, sl, ip}
    b7e0:	52010000 	andpl	r0, r1, #0
    b7e4:	0000d207 	andeq	sp, r0, r7, lsl #4
    b7e8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    b7ec:	00487b15 	subeq	r7, r8, r5, lsl fp
    b7f0:	07530100 	ldrbeq	r0, [r3, -r0, lsl #2]
    b7f4:	000000dd 	ldrdeq	r0, [r0], -sp
    b7f8:	15689102 	strbne	r9, [r8, #-258]!	; 0xfffffefe
    b7fc:	0000451a 	andeq	r4, r0, sl, lsl r5
    b800:	db075401 	blle	1e080c <_Min_Stack_Size+0x1e060c>
    b804:	02000002 	andeq	r0, r0, #2
    b808:	6e156491 	cfcmpsvs	r6, mvf5, mvf1
    b80c:	01000047 	tsteq	r0, r7, asr #32
    b810:	03e00755 	mvneq	r0, #22282240	; 0x1540000
    b814:	91020000 	mrsls	r0, (UNDEF: 2)
    b818:	03561a70 	cmpeq	r6, #112, 20	; 0x70000
    b81c:	00000000 	andeq	r0, r0, r0
    b820:	001a0000 	andseq	r0, sl, r0
    b824:	6b010000 	blvs	4b82c <_Min_Stack_Size+0x4b62c>
    b828:	000b2e07 	andeq	r2, fp, r7, lsl #28
    b82c:	00001b00 	andeq	r1, r0, r0, lsl #22
    b830:	001a0000 	andseq	r0, sl, r0
    b834:	661c0000 	ldrvs	r0, [ip], -r0
    b838:	02000003 	andeq	r0, r0, #3
    b83c:	711c6091 			; <UNDEFINED> instruction: 0x711c6091
    b840:	02000003 	andeq	r0, r0, #3
    b844:	00005c91 	muleq	r0, r1, ip
    b848:	00037d1e 	andeq	r7, r3, lr, lsl sp
    b84c:	00000000 	andeq	r0, r0, r0
    b850:	00000600 	andeq	r0, r0, r0, lsl #12
    b854:	07800100 	streq	r0, [r0, r0, lsl #2]
    b858:	0003891f 	andeq	r8, r3, pc, lsl r9
    b85c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    b860:	b5170000 	ldrlt	r0, [r7, #-0]
    b864:	01000044 	tsteq	r0, r4, asr #32
    b868:	00dd0786 	sbcseq	r0, sp, r6, lsl #15
    b86c:	00000000 	andeq	r0, r0, r0
    b870:	00200000 	eoreq	r0, r0, r0
    b874:	9c010000 	stcls	0, cr0, [r1], {-0}
    b878:	00000b81 	andeq	r0, r0, r1, lsl #23
    b87c:	00476f18 	subeq	r6, r7, r8, lsl pc
    b880:	07860100 	streq	r0, [r6, r0, lsl #2]
    b884:	00000b81 	andeq	r0, r0, r1, lsl #23
    b888:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    b88c:	0000482d 	andeq	r4, r0, sp, lsr #16
    b890:	dd078801 	stcle	8, cr8, [r7, #-4]
    b894:	02000000 	andeq	r0, r0, #0
    b898:	16007491 			; <UNDEFINED> instruction: 0x16007491
    b89c:	00000222 	andeq	r0, r0, r2, lsr #4
    b8a0:	0044de17 	subeq	sp, r4, r7, lsl lr
    b8a4:	07960100 	ldreq	r0, [r6, r0, lsl #2]
    b8a8:	000000dd 	ldrdeq	r0, [r0], -sp
    b8ac:	00000000 	andeq	r0, r0, r0
    b8b0:	0000002a 	andeq	r0, r0, sl, lsr #32
    b8b4:	0bce9c01 	bleq	ff3b28c0 <BootRAM+0xe323061>
    b8b8:	6f180000 	svcvs	0x00180000
    b8bc:	01000047 	tsteq	r0, r7, asr #32
    b8c0:	0b810796 	bleq	fe04d720 <BootRAM+0xcfbdec1>
    b8c4:	91020000 	mrsls	r0, (UNDEF: 2)
    b8c8:	482d156c 	stmdami	sp!, {r2, r3, r5, r6, r8, sl, ip}
    b8cc:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    b8d0:	0000dd07 	andeq	sp, r0, r7, lsl #26
    b8d4:	70910200 	addsvc	r0, r1, r0, lsl #4
    b8d8:	00476e15 	subeq	r6, r7, r5, lsl lr
    b8dc:	07990100 	ldreq	r0, [r9, r0, lsl #2]
    b8e0:	000003e0 	andeq	r0, r0, r0, ror #7
    b8e4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    b8e8:	00461a20 	subeq	r1, r6, r0, lsr #20
    b8ec:	07a70100 	streq	r0, [r7, r0, lsl #2]!
    b8f0:	000000dd 	ldrdeq	r0, [r0], -sp
    b8f4:	00000000 	andeq	r0, r0, r0
    b8f8:	0000001e 	andeq	r0, r0, lr, lsl r0
    b8fc:	0c169c01 	ldceq	12, cr9, [r6], {1}
    b900:	6f180000 	svcvs	0x00180000
    b904:	01000047 	tsteq	r0, r7, asr #32
    b908:	0b8107a7 	bleq	fe04d7ac <BootRAM+0xcfbdf4d>
    b90c:	91020000 	mrsls	r0, (UNDEF: 2)
    b910:	482d156c 	stmdami	sp!, {r2, r3, r5, r6, r8, sl, ip}
    b914:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    b918:	0000dd07 	andeq	sp, r0, r7, lsl #26
    b91c:	70910200 	addsvc	r0, r1, r0, lsl #4
    b920:	00476e15 	subeq	r6, r7, r5, lsl lr
    b924:	07aa0100 	streq	r0, [sl, r0, lsl #2]!
    b928:	000003e0 	andeq	r0, r0, r0, ror #7
    b92c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    b930:	00482021 	subeq	r2, r8, r1, lsr #32
    b934:	07b30100 	ldreq	r0, [r3, r0, lsl #2]!
    b938:	00000000 	andeq	r0, r0, r0
    b93c:	0000001a 	andeq	r0, r0, sl, lsl r0
    b940:	0c4b9c01 	mcrreq	12, 0, r9, fp, cr1
    b944:	6f180000 	svcvs	0x00180000
    b948:	01000047 	tsteq	r0, r7, asr #32
    b94c:	022207b3 	eoreq	r0, r2, #46923776	; 0x2cc0000
    b950:	91020000 	mrsls	r0, (UNDEF: 2)
    b954:	476e156c 	strbmi	r1, [lr, -ip, ror #10]!
    b958:	b5010000 	strlt	r0, [r1, #-0]
    b95c:	0003e007 	andeq	lr, r3, r7
    b960:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    b964:	45cf2200 	strbmi	r2, [pc, #512]	; bb6c <_Min_Stack_Size+0xb96c>
    b968:	fd010000 	stc2	0, cr0, [r1, #-0]
    b96c:	0000dd07 	andeq	sp, r0, r7, lsl #26
    b970:	0084a000 	addeq	sl, r4, r0
    b974:	00002e08 	andeq	r2, r0, r8, lsl #28
    b978:	849c0100 	ldrhi	r0, [ip], #256	; 0x100
    b97c:	1800000c 	stmdane	r0, {r2, r3}
    b980:	0000476e 	andeq	r4, r0, lr, ror #14
    b984:	8f07fd01 	svchi	0x0007fd01
    b988:	0200000c 	andeq	r0, r0, #12
    b98c:	66156c91 			; <UNDEFINED> instruction: 0x66156c91
    b990:	01000045 	tsteq	r0, r5, asr #32
    b994:	00dd07ff 	ldrsheq	r0, [sp], #127	; 0x7f
    b998:	91020000 	mrsls	r0, (UNDEF: 2)
    b99c:	04060074 	streq	r0, [r6], #-116	; 0xffffff8c
    b9a0:	00000c8a 	andeq	r0, r0, sl, lsl #25
    b9a4:	00034b16 	andeq	r4, r3, r6, lsl fp
    b9a8:	0c841600 	stceq	6, cr1, [r4], {0}
    b9ac:	74230000 	strtvc	r0, [r3], #-0
    b9b0:	01000044 	tsteq	r0, r4, asr #32
    b9b4:	00d20816 	sbcseq	r0, r2, r6, lsl r8
    b9b8:	84d00000 	ldrbhi	r0, [r0], #0
    b9bc:	00d40800 	sbcseq	r0, r4, r0, lsl #16
    b9c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    b9c4:	00000cfa 	strdeq	r0, [r0], -sl
    b9c8:	00476e18 	subeq	r6, r7, r8, lsl lr
    b9cc:	08160100 	ldmdaeq	r6, {r8}
    b9d0:	000003e0 	andeq	r0, r0, r0, ror #7
    b9d4:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    b9d8:	0000471a 	andeq	r4, r0, sl, lsl r7
    b9dc:	aa081601 	bge	2111e8 <_Min_Stack_Size+0x210fe8>
    b9e0:	02000000 	andeq	r0, r0, #0
    b9e4:	87186891 			; <UNDEFINED> instruction: 0x87186891
    b9e8:	01000044 	tsteq	r0, r4, asr #32
    b9ec:	05db0816 	ldrbeq	r0, [fp, #2070]	; 0x816
    b9f0:	91020000 	mrsls	r0, (UNDEF: 2)
    b9f4:	482e1564 	stmdami	lr!, {r2, r5, r6, r8, sl, ip}
    b9f8:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    b9fc:	0000d208 	andeq	sp, r0, r8, lsl #4
    ba00:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    ba04:	00486915 	subeq	r6, r8, r5, lsl r9
    ba08:	08190100 	ldmdaeq	r9, {r8}
    ba0c:	000000dd 	ldrdeq	r0, [r0], -sp
    ba10:	00709102 	rsbseq	r9, r0, r2, lsl #2
    ba14:	0047db19 	subeq	sp, r7, r9, lsl fp
    ba18:	08650100 	stmdaeq	r5!, {r8}^
    ba1c:	00000000 	andeq	r0, r0, r0
    ba20:	0000004c 	andeq	r0, r0, ip, asr #32
    ba24:	0d2f9c01 	stceq	12, cr9, [pc, #-4]!	; ba28 <_Min_Stack_Size+0xb828>
    ba28:	6e180000 	cdpvs	0, 1, cr0, cr8, cr0, {0}
    ba2c:	01000047 	tsteq	r0, r7, asr #32
    ba30:	03e00865 	mvneq	r0, #6619136	; 0x650000
    ba34:	91020000 	mrsls	r0, (UNDEF: 2)
    ba38:	45861874 	strmi	r1, [r6, #2164]	; 0x874
    ba3c:	65010000 	strvs	r0, [r1, #-0]
    ba40:	00084b08 	andeq	r4, r8, r8, lsl #22
    ba44:	70910200 	addsvc	r0, r1, r0, lsl #4
    ba48:	47511900 	ldrbmi	r1, [r1, -r0, lsl #18]
    ba4c:	77010000 	strvc	r0, [r1, -r0]
    ba50:	0085a408 	addeq	sl, r5, r8, lsl #8
    ba54:	0000a408 	andeq	sl, r0, r8, lsl #8
    ba58:	8b9c0100 	blhi	fe70be60 <BootRAM+0xd67c601>
    ba5c:	1800000d 	stmdane	r0, {r0, r2, r3}
    ba60:	0000476e 	andeq	r4, r0, lr, ror #14
    ba64:	e0087701 	and	r7, r8, r1, lsl #14
    ba68:	02000003 	andeq	r0, r0, #3
    ba6c:	b01d6c91 	mulslt	sp, r1, ip
    ba70:	42080085 	andmi	r0, r8, #133	; 0x85
    ba74:	71000000 	mrsvc	r0, (UNDEF: 0)
    ba78:	1500000d 	strne	r0, [r0, #-13]
    ba7c:	0000464a 	andeq	r4, r0, sl, asr #12
    ba80:	b1088101 	tstlt	r8, r1, lsl #2
    ba84:	02000000 	andeq	r0, r0, #0
    ba88:	1b007791 	blne	298d4 <_Min_Stack_Size+0x296d4>
    ba8c:	080085fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, pc}
    ba90:	00000042 	andeq	r0, r0, r2, asr #32
    ba94:	00490e15 	subeq	r0, r9, r5, lsl lr
    ba98:	08d20100 	ldmeq	r2, {r8}^
    ba9c:	000000b1 	strheq	r0, [r0], -r1
    baa0:	00769102 	rsbseq	r9, r6, r2, lsl #2
    baa4:	48592300 	ldmdami	r9, {r8, r9, sp}^
    baa8:	ef010000 	svc	0x00010000
    baac:	0000d208 	andeq	sp, r0, r8, lsl #4
    bab0:	00864800 	addeq	r4, r6, r0, lsl #16
    bab4:	00002c08 	andeq	r2, r0, r8, lsl #24
    bab8:	c49c0100 	ldrgt	r0, [ip], #256	; 0x100
    babc:	1800000d 	stmdane	r0, {r0, r2, r3}
    bac0:	0000476e 	andeq	r4, r0, lr, ror #14
    bac4:	8408ef01 	strhi	lr, [r8], #-3841	; 0xfffff0ff
    bac8:	0200000c 	andeq	r0, r0, #12
    bacc:	2e156c91 	mrccs	12, 0, r6, cr5, cr1, {4}
    bad0:	01000048 	tsteq	r0, r8, asr #32
    bad4:	00d208f1 	ldrsheq	r0, [r2], #129	; 0x81
    bad8:	91020000 	mrsls	r0, (UNDEF: 2)
    badc:	f4200074 	vld4.16	{d0-d3}, [r0 :256], r4
    bae0:	01000045 	tsteq	r0, r5, asr #32
    bae4:	00d20904 	sbcseq	r0, r2, r4, lsl #18
    bae8:	00000000 	andeq	r0, r0, r0
    baec:	002a0000 	eoreq	r0, sl, r0
    baf0:	9c010000 	stcls	0, cr0, [r1], {-0}
    baf4:	00000e0c 	andeq	r0, r0, ip, lsl #28
    baf8:	00476f18 	subeq	r6, r7, r8, lsl pc
    bafc:	09040100 	stmdbeq	r4, {r8}
    bb00:	00000b81 	andeq	r0, r0, r1, lsl #23
    bb04:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    bb08:	0000482e 	andeq	r4, r0, lr, lsr #16
    bb0c:	d2090601 	andle	r0, r9, #1048576	; 0x100000
    bb10:	02000000 	andeq	r0, r0, #0
    bb14:	6e157491 	cfcmpsvs	r7, mvf5, mvf1
    bb18:	01000047 	tsteq	r0, r7, asr #32
    bb1c:	03e00907 	mvneq	r0, #114688	; 0x1c000
    bb20:	91020000 	mrsls	r0, (UNDEF: 2)
    bb24:	31230070 			; <UNDEFINED> instruction: 0x31230070
    bb28:	01000045 	tsteq	r0, r5, asr #32
    bb2c:	00d20917 	sbcseq	r0, r2, r7, lsl r9
    bb30:	86740000 	ldrbthi	r0, [r4], -r0
    bb34:	00300800 	eorseq	r0, r0, r0, lsl #16
    bb38:	9c010000 	stcls	0, cr0, [r1], {-0}
    bb3c:	00000e45 	andeq	r0, r0, r5, asr #28
    bb40:	00476e18 	subeq	r6, r7, r8, lsl lr
    bb44:	09170100 	ldmdbeq	r7, {r8}
    bb48:	00000c84 	andeq	r0, r0, r4, lsl #25
    bb4c:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    bb50:	0000482e 	andeq	r4, r0, lr, lsr #16
    bb54:	d2091901 	andle	r1, r9, #16384	; 0x4000
    bb58:	02000000 	andeq	r0, r0, #0
    bb5c:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
    bb60:	000047ab 	andeq	r4, r0, fp, lsr #15
    bb64:	d2092c01 	andle	r2, r9, #256	; 0x100
    bb68:	00000000 	andeq	r0, r0, r0
    bb6c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    bb70:	01000000 	mrseq	r0, (UNDEF: 0)
    bb74:	476f189c 			; <UNDEFINED> instruction: 0x476f189c
    bb78:	2c010000 	stccs	0, cr0, [r1], {-0}
    bb7c:	000b8109 	andeq	r8, fp, r9, lsl #2
    bb80:	6c910200 	lfmvs	f0, 4, [r1], {0}
    bb84:	00482e15 	subeq	r2, r8, r5, lsl lr
    bb88:	092e0100 	stmdbeq	lr!, {r8}
    bb8c:	000000d2 	ldrdeq	r0, [r0], -r2
    bb90:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    bb94:	0000476e 	andeq	r4, r0, lr, ror #14
    bb98:	e0092f01 	and	r2, r9, r1, lsl #30
    bb9c:	02000003 	andeq	r0, r0, #3
    bba0:	00007091 	muleq	r0, r1, r0
    bba4:	000014d6 	ldrdeq	r1, [r0], -r6
    bba8:	26460004 	strbcs	r0, [r6], -r4
    bbac:	01040000 	mrseq	r0, (UNDEF: 4)
    bbb0:	00000111 	andeq	r0, r0, r1, lsl r1
    bbb4:	0049500c 	subeq	r5, r9, ip
    bbb8:	000df000 	andeq	pc, sp, r0
    bbbc:	00000000 	andeq	r0, r0, r0
    bbc0:	00532500 	subseq	r2, r3, r0, lsl #10
    bbc4:	5cec0200 	sfmpl	f0, 2, [ip]
    bbc8:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    bbcc:	0000002c 	andeq	r0, r0, ip, lsr #32
    bbd0:	ce070403 	cdpgt	4, 0, cr0, cr7, cr3, {0}
    bbd4:	04000001 	streq	r0, [r0], #-1
    bbd8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    bbdc:	08030074 	stmdaeq	r3, {r2, r4, r5, r6}
    bbe0:	0000b805 	andeq	fp, r0, r5, lsl #16
    bbe4:	04080300 	streq	r0, [r8], #-768	; 0xfffffd00
    bbe8:	000002f8 	strdeq	r0, [r0], -r8
    bbec:	92060103 	andls	r0, r6, #-1073741824	; 0xc0000000
    bbf0:	02000001 	andeq	r0, r0, #1
    bbf4:	000000e3 	andeq	r0, r0, r3, ror #1
    bbf8:	005a1d04 	subseq	r1, sl, r4, lsl #26
    bbfc:	01030000 	mrseq	r0, (UNDEF: 3)
    bc00:	00019008 	andeq	r9, r1, r8
    bc04:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    bc08:	00000095 	muleq	r0, r5, r0
    bc0c:	00007202 	andeq	r7, r0, r2, lsl #4
    bc10:	732b0400 			; <UNDEFINED> instruction: 0x732b0400
    bc14:	03000000 	movweq	r0, #0
    bc18:	01f20702 	mvnseq	r0, r2, lsl #14
    bc1c:	04030000 	streq	r0, [r3], #-0
    bc20:	0000bd05 	andeq	fp, r0, r5, lsl #26
    bc24:	00670200 	rsbeq	r0, r7, r0, lsl #4
    bc28:	41040000 	mrsmi	r0, (UNDEF: 4)
    bc2c:	0000008c 	andeq	r0, r0, ip, lsl #1
    bc30:	c9070403 	stmdbgt	r7, {r0, r1, sl}
    bc34:	03000001 	movweq	r0, #1
    bc38:	01c40708 	biceq	r0, r4, r8, lsl #14
    bc3c:	04030000 	streq	r0, [r3], #-0
    bc40:	00005907 	andeq	r5, r0, r7, lsl #18
    bc44:	06040500 	streq	r0, [r4], -r0, lsl #10
    bc48:	0000a904 	andeq	sl, r0, r4, lsl #18
    bc4c:	08010300 	stmdaeq	r1, {r8, r9}
    bc50:	00000199 	muleq	r0, r9, r1
    bc54:	00b60406 	adcseq	r0, r6, r6, lsl #8
    bc58:	a9070000 	stmdbge	r7, {}	; <UNPREDICTABLE>
    bc5c:	02000000 	andeq	r0, r0, #0
    bc60:	000000e5 	andeq	r0, r0, r5, ror #1
    bc64:	004f1805 	subeq	r1, pc, r5, lsl #16
    bc68:	74020000 	strvc	r0, [r2], #-0
    bc6c:	05000000 	streq	r0, [r0, #-0]
    bc70:	00006824 	andeq	r6, r0, r4, lsr #16
    bc74:	00690200 	rsbeq	r0, r9, r0, lsl #4
    bc78:	30050000 	andcc	r0, r5, r0
    bc7c:	00000081 	andeq	r0, r0, r1, lsl #1
    bc80:	004e0b02 	subeq	r0, lr, r2, lsl #22
    bc84:	e7230600 	str	r0, [r3, -r0, lsl #12]!
    bc88:	06000000 	streq	r0, [r0], -r0
    bc8c:	0000ed04 	andeq	lr, r0, r4, lsl #26
    bc90:	00f80800 	rscseq	r0, r8, r0, lsl #16
    bc94:	a1090000 	mrsge	r0, (UNDEF: 9)
    bc98:	00000000 	andeq	r0, r0, r0
    bc9c:	0049ae02 	subeq	sl, r9, r2, lsl #28
    bca0:	d1370200 	teqle	r7, r0, lsl #4
    bca4:	02000000 	andeq	r0, r0, #0
    bca8:	000040a7 	andeq	r4, r0, r7, lsr #1
    bcac:	007a3802 	rsbseq	r3, sl, r2, lsl #16
    bcb0:	a6020000 	strge	r0, [r2], -r0
    bcb4:	02000040 	andeq	r0, r0, #64	; 0x40
    bcb8:	00008c39 	andeq	r8, r0, r9, lsr ip
    bcbc:	3eab0200 	cdpcc	2, 10, cr0, cr11, cr0, {0}
    bcc0:	3f020000 	svccc	0x00020000
    bcc4:	000000d1 	ldrdeq	r0, [r0], -r1
    bcc8:	0043480a 	subeq	r4, r3, sl, lsl #16
    bccc:	8c071400 	cfstrshi	mvf1, [r7], {-0}
    bcd0:	0000016d 	andeq	r0, r0, sp, ror #2
    bcd4:	00432c0b 	subeq	r2, r3, fp, lsl #24
    bcd8:	198f0700 	stmibne	pc, {r8, r9, sl}	; <UNPREDICTABLE>
    bcdc:	00000001 	andeq	r0, r0, r1
    bce0:	00439c0b 	subeq	r9, r3, fp, lsl #24
    bce4:	6d900700 	ldcvs	7, cr0, [r0]
    bce8:	04000001 	streq	r0, [r0], #-1
    bcec:	0043df0b 	subeq	sp, r3, fp, lsl #30
    bcf0:	6d910700 	ldcvs	7, cr0, [r1]
    bcf4:	08000001 	stmdaeq	r0, {r0}
    bcf8:	0043400b 	subeq	r4, r3, fp
    bcfc:	a1920700 	orrsge	r0, r2, r0, lsl #14
    bd00:	0c000000 	stceq	0, cr0, [r0], {-0}
    bd04:	0043110b 	subeq	r1, r3, fp, lsl #2
    bd08:	a4930700 	ldrge	r0, [r3], #1792	; 0x700
    bd0c:	10000001 	andne	r0, r0, r1
    bd10:	24040600 	strcs	r0, [r4], #-1536	; 0xfffffa00
    bd14:	0a000001 	beq	bd20 <_Min_Stack_Size+0xbb20>
    bd18:	00004401 	andeq	r4, r0, r1, lsl #8
    bd1c:	a4a40714 	strtge	r0, [r4], #1812	; 0x714
    bd20:	0b000001 	bleq	bd2c <_Min_Stack_Size+0xbb2c>
    bd24:	0000437d 	andeq	r4, r0, sp, ror r3
    bd28:	01f1a707 	mvnseq	sl, r7, lsl #14
    bd2c:	0b000000 	bleq	bd34 <_Min_Stack_Size+0xbb34>
    bd30:	000043d7 	ldrdeq	r4, [r0], -r7
    bd34:	01f6a807 	mvnseq	sl, r7, lsl #16
    bd38:	0b040000 	bleq	10bd40 <_Min_Stack_Size+0x10bb40>
    bd3c:	00004337 	andeq	r4, r0, r7, lsr r3
    bd40:	01e6a907 	mvneq	sl, r7, lsl #18
    bd44:	00080000 	andeq	r0, r8, r0
    bd48:	01730406 	cmneq	r3, r6, lsl #8
    bd4c:	21020000 	mrscs	r0, (UNDEF: 2)
    bd50:	07000043 	streq	r0, [r0, -r3, asr #32]
    bd54:	00012496 	muleq	r1, r6, r4
    bd58:	43ea0a00 	mvnmi	r0, #0, 20
    bd5c:	070c0000 	streq	r0, [ip, -r0]
    bd60:	0001e698 	muleq	r1, r8, r6
    bd64:	432c0b00 			; <UNDEFINED> instruction: 0x432c0b00
    bd68:	9b070000 	blls	1cbd70 <_Min_Stack_Size+0x1cbb70>
    bd6c:	00000119 	andeq	r0, r0, r9, lsl r1
    bd70:	439c0b00 	orrsmi	r0, ip, #0, 22
    bd74:	9c070000 	stcls	0, cr0, [r7], {-0}
    bd78:	0000016d 	andeq	r0, r0, sp, ror #2
    bd7c:	43df0b04 	bicsmi	r0, pc, #4, 22	; 0x1000
    bd80:	9d070000 	stcls	0, cr0, [r7, #-0]
    bd84:	0000016d 	andeq	r0, r0, sp, ror #2
    bd88:	1d020008 	stcne	0, cr0, [r2, #-32]	; 0xffffffe0
    bd8c:	07000043 	streq	r0, [r0, -r3, asr #32]
    bd90:	0001b59f 	muleq	r1, pc, r5	; <UNPREDICTABLE>
    bd94:	010e0c00 	tsteq	lr, r0, lsl #24
    bd98:	04060000 	streq	r0, [r6], #-0
    bd9c:	000001aa 	andeq	r0, r0, sl, lsr #3
    bda0:	00437602 	subeq	r7, r3, r2, lsl #12
    bda4:	73ab0700 			; <UNDEFINED> instruction: 0x73ab0700
    bda8:	02000001 	andeq	r0, r0, #1
    bdac:	00003e95 	muleq	r0, r5, lr
    bdb0:	02124608 	andseq	r4, r2, #8, 12	; 0x800000
    bdb4:	04060000 	streq	r0, [r6], #-0
    bdb8:	00000218 	andeq	r0, r0, r8, lsl r2
    bdbc:	00401d0a 	subeq	r1, r0, sl, lsl #26
    bdc0:	fc015400 	stc2	4, cr5, [r1], {-0}
    bdc4:	000002a6 	andeq	r0, r0, r6, lsr #5
    bdc8:	0052400b 	subseq	r4, r2, fp
    bdcc:	53fe0100 	mvnspl	r0, #0, 2
    bdd0:	00000003 	andeq	r0, r0, r3
    bdd4:	0052160d 	subseq	r1, r2, sp, lsl #12
    bdd8:	01040100 	mrseq	r0, (UNDEF: 20)
    bddc:	000001aa 	andeq	r0, r0, sl, lsr #3
    bde0:	52710d04 	rsbspl	r0, r1, #4, 26	; 0x100
    bde4:	05010000 	streq	r0, [r1, #-0]
    bde8:	0001aa01 	andeq	sl, r1, r1, lsl #20
    bdec:	160d1800 	strne	r1, [sp], -r0, lsl #16
    bdf0:	01000049 	tsteq	r0, r9, asr #32
    bdf4:	010e0106 	tsteq	lr, r6, lsl #2
    bdf8:	0d2c0000 	stceq	0, cr0, [ip, #-0]
    bdfc:	00004fde 	ldrdeq	r4, [r0], -lr
    be00:	4d010701 	stcmi	7, cr0, [r1, #-4]
    be04:	30000003 	andcc	r0, r0, r3
    be08:	0040670d 	subeq	r6, r0, sp, lsl #14
    be0c:	01080100 	mrseq	r0, (UNDEF: 24)
    be10:	0000035e 	andeq	r0, r0, lr, asr r3
    be14:	513d0d34 	teqpl	sp, r4, lsr sp
    be18:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    be1c:	00010e01 	andeq	r0, r1, r1, lsl #28
    be20:	9b0d4400 	blls	35ce28 <_Min_Stack_Size+0x35cc28>
    be24:	0100004c 	tsteq	r0, ip, asr #32
    be28:	010e0119 	tsteq	lr, r9, lsl r1
    be2c:	0d480000 	stcleq	0, cr0, [r8, #-0]
    be30:	00004c69 	andeq	r4, r0, r9, ror #24
    be34:	6e013401 	cdpvs	4, 0, cr3, cr1, cr1, {0}
    be38:	4c000003 	stcmi	0, cr0, [r0], {3}
    be3c:	004a910d 	subeq	r9, sl, sp, lsl #2
    be40:	01350100 	teqeq	r5, r0, lsl #2
    be44:	00000373 	andeq	r0, r0, r3, ror r3
    be48:	010e0050 	qaddeq	r0, r0, lr
    be4c:	0000005a 	andeq	r0, r0, sl, asr r0
    be50:	02d15b08 	sbcseq	r5, r1, #8, 22	; 0x2000
    be54:	730f0000 	movwvc	r0, #61440	; 0xf000
    be58:	00000049 	andeq	r0, r0, r9, asr #32
    be5c:	004ee40f 	subeq	lr, lr, pc, lsl #8
    be60:	ff0f0100 			; <UNDEFINED> instruction: 0xff0f0100
    be64:	02000051 	andeq	r0, r0, #81	; 0x51
    be68:	004aed0f 	subeq	lr, sl, pc, lsl #26
    be6c:	da0f0300 	ble	3cca74 <_Min_Stack_Size+0x3cc874>
    be70:	0400004c 	streq	r0, [r0], #-76	; 0xffffffb4
    be74:	4ba10200 	blmi	fe84c67c <BootRAM+0xd7bce1d>
    be78:	61080000 	mrsvs	r0, (UNDEF: 8)
    be7c:	000002a6 	andeq	r0, r0, r6, lsr #5
    be80:	0044600a 	subeq	r6, r4, sl
    be84:	66080800 	strvs	r0, [r8], -r0, lsl #16
    be88:	00000301 	andeq	r0, r0, r1, lsl #6
    be8c:	0046ac0b 	subeq	sl, r6, fp, lsl #24
    be90:	03680800 	cmneq	r8, #0, 16
    be94:	00000001 	andeq	r0, r0, r1
    be98:	00469c0b 	subeq	r9, r6, fp, lsl #24
    be9c:	19690800 	stmdbne	r9!, {fp}^
    bea0:	04000001 	streq	r0, [r0], #-1
    bea4:	446a0200 	strbtmi	r0, [sl], #-512	; 0xfffffe00
    bea8:	6a080000 	bvs	20beb0 <_Min_Stack_Size+0x20bcb0>
    beac:	000002dc 	ldrdeq	r0, [r0], -ip
    beb0:	004eed0a 	subeq	lr, lr, sl, lsl #26
    beb4:	6f080c00 	svcvs	0x00080c00
    beb8:	0000033d 	andeq	r0, r0, sp, lsr r3
    bebc:	0050d00b 	subseq	sp, r0, fp
    bec0:	a1710800 	cmnge	r1, r0, lsl #16
    bec4:	00000000 	andeq	r0, r0, r0
    bec8:	004dc40b 	subeq	ip, sp, fp, lsl #8
    becc:	d1720800 	cmnle	r2, r0, lsl #16
    bed0:	04000000 	streq	r0, [r0], #-0
    bed4:	004a510b 	subeq	r5, sl, fp, lsl #2
    bed8:	d1730800 	cmnle	r3, r0, lsl #16
    bedc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    bee0:	4d740200 	lfmmi	f0, 2, [r4, #-0]
    bee4:	74080000 	strvc	r0, [r8], #-0
    bee8:	0000030c 	andeq	r0, r0, ip, lsl #6
    beec:	0000b007 	andeq	fp, r0, r7
    bef0:	f8040600 			; <UNDEFINED> instruction: 0xf8040600
    bef4:	06000000 	streq	r0, [r0], -r0
    bef8:	00035904 	andeq	r5, r3, r4, lsl #18
    befc:	00f80c00 	rscseq	r0, r8, r0, lsl #24
    bf00:	a9100000 	ldmdbge	r0, {}	; <UNPREDICTABLE>
    bf04:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    bf08:	11000003 	tstne	r0, r3
    bf0c:	0000009a 	muleq	r0, sl, r0
    bf10:	d10c000f 	tstle	ip, pc
    bf14:	0c000000 	stceq	0, cr0, [r0], {-0}
    bf18:	000000bb 	strheq	r0, [r0], -fp
    bf1c:	004a8a12 	subeq	r8, sl, r2, lsl sl
    bf20:	01460100 	mrseq	r0, (UNDEF: 86)
    bf24:	00000218 	andeq	r0, r0, r8, lsl r2
    bf28:	00517212 	subseq	r7, r1, r2, lsl r2
    bf2c:	014a0100 	mrseq	r0, (UNDEF: 90)
    bf30:	00000378 	andeq	r0, r0, r8, ror r3
    bf34:	0048fb13 	subeq	pc, r8, r3, lsl fp	; <UNPREDICTABLE>
    bf38:	d1cf0200 	bicle	r0, pc, r0, lsl #4
    bf3c:	03000000 	movweq	r0, #0
    bf40:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    bf44:	0046bb14 	subeq	fp, r6, r4, lsl fp
    bf48:	d1d10200 	bicsle	r0, r1, r0, lsl #4
    bf4c:	14000000 	strne	r0, [r0], #-0
    bf50:	00003df5 	strdeq	r3, [r0], -r5
    bf54:	00d1d102 	sbcseq	sp, r1, r2, lsl #2
    bf58:	15000000 	strne	r0, [r0, #-0]
    bf5c:	00004556 	andeq	r4, r0, r6, asr r5
    bf60:	cf03e302 	svcgt	0x0003e302
    bf64:	16000003 	strne	r0, [r0], -r3
    bf68:	000047f0 	strdeq	r4, [r0], -r0
    bf6c:	00d1e302 	sbcseq	lr, r1, r2, lsl #6
    bf70:	15000000 	strne	r0, [r0, #-0]
    bf74:	00003f57 	andeq	r3, r0, r7, asr pc
    bf78:	e703bf02 	str	fp, [r3, -r2, lsl #30]
    bf7c:	14000003 	strne	r0, [r0], #-3
    bf80:	00003df5 	strdeq	r3, [r0], -r5
    bf84:	00d1c102 	sbcseq	ip, r1, r2, lsl #2
    bf88:	13000000 	movwne	r0, #0
    bf8c:	00004dac 	andeq	r4, r0, ip, lsr #27
    bf90:	00bb8202 	adcseq	r8, fp, r2, lsl #4
    bf94:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
    bf98:	16000004 	strne	r0, [r0], -r4
    bf9c:	00004a24 	andeq	r4, r0, r4, lsr #20
    bfa0:	00d18202 	sbcseq	r8, r1, r2, lsl #4
    bfa4:	25140000 	ldrcs	r0, [r4, #-0]
    bfa8:	02000050 	andeq	r0, r0, #80	; 0x50
    bfac:	0000bb84 	andeq	fp, r0, r4, lsl #23
    bfb0:	3b170000 	blcc	5cbfb8 <_Min_Stack_Size+0x5cbdb8>
    bfb4:	0100004d 	tsteq	r0, sp, asr #32
    bfb8:	010302da 	ldrdeq	r0, [r3, -sl]
    bfbc:	86a40000 	strthi	r0, [r4], r0
    bfc0:	00820800 	addeq	r0, r2, r0, lsl #16
    bfc4:	9c010000 	stcls	0, cr0, [r1], {-0}
    bfc8:	000004ba 			; <UNDEFINED> instruction: 0x000004ba
    bfcc:	004d6918 	subeq	r6, sp, r8, lsl r9
    bfd0:	02da0100 	sbcseq	r0, sl, #0, 2
    bfd4:	000000dc 	ldrdeq	r0, [r0], -ip
    bfd8:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
    bfdc:	00004a83 	andeq	r4, r0, r3, lsl #21
    bfe0:	4802db01 	stmdami	r2, {r0, r8, r9, fp, ip, lr, pc}
    bfe4:	02000003 	andeq	r0, r0, #3
    bfe8:	c1186091 			; <UNDEFINED> instruction: 0xc1186091
    bfec:	0100004a 	tsteq	r0, sl, asr #32
    bff0:	04ba02dc 	ldrteq	r0, [sl], #732	; 0x2dc
    bff4:	91020000 	mrsls	r0, (UNDEF: 2)
    bff8:	3f09185e 	svccc	0x0009185e
    bffc:	dd010000 	stcle	0, cr0, [r1, #-0]
    c000:	0004bf02 	andeq	fp, r4, r2, lsl #30
    c004:	58910200 	ldmpl	r1, {r9}
    c008:	00491618 	subeq	r1, r9, r8, lsl r6
    c00c:	02de0100 	sbcseq	r0, lr, #0, 2
    c010:	0000010e 	andeq	r0, r0, lr, lsl #2
    c014:	18009102 	stmdane	r0, {r1, r8, ip, pc}
    c018:	00005280 	andeq	r5, r0, r0, lsl #5
    c01c:	ca02df01 	bgt	c3c28 <_Min_Stack_Size+0xc3a28>
    c020:	02000004 	andeq	r0, r0, #4
    c024:	60190491 	mulsvs	r9, r1, r4
    c028:	0100004d 	tsteq	r0, sp, asr #32
    c02c:	04cf02e1 	strbeq	r0, [pc], #737	; c034 <_Min_Stack_Size+0xbe34>
    c030:	91020000 	mrsls	r0, (UNDEF: 2)
    c034:	482e1974 	stmdami	lr!, {r2, r4, r5, r6, r8, fp, ip}
    c038:	e2010000 	and	r0, r1, #0
    c03c:	00010302 	andeq	r0, r1, r2, lsl #6
    c040:	70910200 	addsvc	r0, r1, r0, lsl #4
    c044:	0086b41a 	addeq	fp, r6, sl, lsl r4
    c048:	00003408 	andeq	r3, r0, r8, lsl #8
    c04c:	4fde1900 	svcmi	0x00de1900
    c050:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    c054:	00034d02 	andeq	r4, r3, r2, lsl #26
    c058:	6c910200 	lfmvs	f0, 4, [r1], {0}
    c05c:	c6070000 	strgt	r0, [r7], -r0
    c060:	07000000 	streq	r0, [r0, -r0]
    c064:	000000a1 	andeq	r0, r0, r1, lsr #1
    c068:	02070406 	andeq	r0, r7, #100663296	; 0x6000000
    c06c:	c4070000 	strgt	r0, [r7], #-0
    c070:	06000004 	streq	r0, [r0], -r4
    c074:	00038404 	andeq	r8, r3, r4, lsl #8
    c078:	4f5c1b00 	svcmi	0x005c1b00
    c07c:	35010000 	strcc	r0, [r1, #-0]
    c080:	00872803 	addeq	r2, r7, r3, lsl #16
    c084:	0000fe08 	andeq	pc, r0, r8, lsl #28
    c088:	809c0100 	addshi	r0, ip, r0, lsl #2
    c08c:	18000005 	stmdane	r0, {r0, r2}
    c090:	00004d69 	andeq	r4, r0, r9, ror #26
    c094:	dc033501 	cfstr32le	mvfx3, [r3], {1}
    c098:	02000000 	andeq	r0, r0, #0
    c09c:	83186c91 	tsthi	r8, #37120	; 0x9100
    c0a0:	0100004a 	tsteq	r0, sl, asr #32
    c0a4:	03480336 	movteq	r0, #33590	; 0x8336
    c0a8:	91020000 	mrsls	r0, (UNDEF: 2)
    c0ac:	4cf41868 	ldclmi	8, cr1, [r4], #416	; 0x1a0
    c0b0:	37010000 	strcc	r0, [r1, -r0]
    c0b4:	00058003 	andeq	r8, r5, r3
    c0b8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    c0bc:	003f0918 	eorseq	r0, pc, r8, lsl r9	; <UNPREDICTABLE>
    c0c0:	03380100 	teqeq	r8, #0, 2
    c0c4:	000004bf 			; <UNDEFINED> instruction: 0x000004bf
    c0c8:	18609102 	stmdane	r0!, {r1, r8, ip, pc}^
    c0cc:	00004916 	andeq	r4, r0, r6, lsl r9
    c0d0:	0e033901 	vmlaeq.f16	s6, s6, s2	; <UNPREDICTABLE>
    c0d4:	02000001 	andeq	r0, r0, #1
    c0d8:	80180091 	mulshi	r8, r1, r0
    c0dc:	01000052 	qaddeq	r0, r2, r0
    c0e0:	04ca033a 	strbeq	r0, [sl], #826	; 0x33a
    c0e4:	91020000 	mrsls	r0, (UNDEF: 2)
    c0e8:	4d601804 	stclmi	8, cr1, [r0, #-16]!
    c0ec:	3b010000 	blcc	4c0f4 <_Min_Stack_Size+0x4bef4>
    c0f0:	0004cf03 	andeq	ip, r4, r3, lsl #30
    c0f4:	08910200 	ldmeq	r1, {r9}
    c0f8:	0051af18 	subseq	sl, r1, r8, lsl pc
    c0fc:	033c0100 	teqeq	ip, #0, 2
    c100:	00000590 	muleq	r0, r0, r5
    c104:	190c9102 	stmdbne	ip, {r1, r8, ip, pc}
    c108:	00005240 	andeq	r5, r0, r0, asr #4
    c10c:	4d033e01 	stcmi	14, cr3, [r3, #-4]
    c110:	02000003 	andeq	r0, r0, #3
    c114:	781c7091 	ldmdavc	ip, {r0, r4, r7, ip, sp, lr}
    c118:	033f0100 	teqeq	pc, #0, 2
    c11c:	0000010e 	andeq	r0, r0, lr, lsl #2
    c120:	00749102 	rsbseq	r9, r4, r2, lsl #2
    c124:	0000d107 	andeq	sp, r0, r7, lsl #2
    c128:	8b040600 	blhi	10d930 <_Min_Stack_Size+0x10d730>
    c12c:	07000005 	streq	r0, [r0, -r5]
    c130:	0000033d 	andeq	r0, r0, sp, lsr r3
    c134:	00058507 	andeq	r8, r5, r7, lsl #10
    c138:	4d471b00 	vstrmi	d17, [r7, #-0]
    c13c:	30010000 	andcc	r0, r1, r0
    c140:	00882804 	addeq	r2, r8, r4, lsl #16
    c144:	0000d408 	andeq	sp, r0, r8, lsl #8
    c148:	bb9c0100 	bllt	fe70c550 <BootRAM+0xd67ccf1>
    c14c:	18000005 	stmdane	r0, {r0, r2}
    c150:	00004d60 	andeq	r4, r0, r0, ror #26
    c154:	cf043001 	svcgt	0x00043001
    c158:	02000004 	andeq	r0, r0, #4
    c15c:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
    c160:	0000514c 	andeq	r5, r0, ip, asr #2
    c164:	0004e101 	andeq	lr, r4, r1, lsl #2
    c168:	a0000000 	andge	r0, r0, r0
    c16c:	01000000 	mrseq	r0, (UNDEF: 0)
    c170:	0006369c 	muleq	r6, ip, r6
    c174:	50121800 	andspl	r1, r2, r0, lsl #16
    c178:	e1010000 	mrs	r0, (UNDEF: 1)
    c17c:	00063c04 	andeq	r3, r6, r4, lsl #24
    c180:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    c184:	0051fb18 	subseq	pc, r1, r8, lsl fp	; <UNPREDICTABLE>
    c188:	04e10100 	strbteq	r0, [r1], #256	; 0x100
    c18c:	00000641 	andeq	r0, r0, r1, asr #12
    c190:	19609102 	stmdbne	r0!, {r1, r8, ip, pc}^
    c194:	0000520a 	andeq	r5, r0, sl, lsl #4
    c198:	1904e301 	stmdbne	r4, {r0, r8, r9, sp, lr, pc}
    c19c:	02000001 	andeq	r0, r0, #1
    c1a0:	85196c91 	ldrhi	r6, [r9, #-3217]	; 0xfffff36f
    c1a4:	01000051 	qaddeq	r0, r1, r0
    c1a8:	010304e4 	smlatteq	r3, r4, r4, r0
    c1ac:	91020000 	mrsls	r0, (UNDEF: 2)
    c1b0:	4d011968 	vstrmi.16	s2, [r1, #-208]	; 0xffffff30	; <UNPREDICTABLE>
    c1b4:	e4010000 	str	r0, [r1], #-0
    c1b8:	00010304 	andeq	r0, r1, r4, lsl #6
    c1bc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    c1c0:	0000001a 	andeq	r0, r0, sl, lsl r0
    c1c4:	00006200 	andeq	r6, r0, r0, lsl #4
    c1c8:	4be61900 	blmi	ff9925d0 <BootRAM+0xe902d71>
    c1cc:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    c1d0:	00064104 	andeq	r4, r6, r4, lsl #2
    c1d4:	70910200 	addsvc	r0, r1, r0, lsl #4
    c1d8:	04060000 	streq	r0, [r6], #-0
    c1dc:	00000119 	andeq	r0, r0, r9, lsl r1
    c1e0:	00063607 	andeq	r3, r6, r7, lsl #12
    c1e4:	01190700 	tsteq	r9, r0, lsl #14
    c1e8:	401d0000 	andsmi	r0, sp, r0
    c1ec:	0100004c 	tsteq	r0, ip, asr #32
    c1f0:	88fc0535 	ldmhi	ip!, {r0, r2, r4, r5, r8, sl}^
    c1f4:	00480800 	subeq	r0, r8, r0, lsl #16
    c1f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    c1fc:	0000067b 	andeq	r0, r0, fp, ror r6
    c200:	0050de18 	subseq	sp, r0, r8, lsl lr
    c204:	05350100 	ldreq	r0, [r5, #-256]!	; 0xffffff00
    c208:	00000641 	andeq	r0, r0, r1, asr #12
    c20c:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    c210:	00005185 	andeq	r5, r0, r5, lsl #3
    c214:	03053701 	movweq	r3, #22273	; 0x5701
    c218:	02000001 	andeq	r0, r0, #1
    c21c:	17007491 			; <UNDEFINED> instruction: 0x17007491
    c220:	00004bd4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    c224:	0e05be01 	cdpeq	14, 0, cr11, cr5, cr1, {0}
    c228:	00000001 	andeq	r0, r0, r1
    c22c:	34000000 	strcc	r0, [r0], #-0
    c230:	01000000 	mrseq	r0, (UNDEF: 0)
    c234:	0006c39c 	muleq	r6, ip, r3
    c238:	3ed11800 	cdpcc	8, 13, cr1, cr1, cr0, {0}
    c23c:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    c240:	0006c305 	andeq	ip, r6, r5, lsl #6
    c244:	6c910200 	lfmvs	f0, 4, [r1], {0}
    c248:	00522519 	subseq	r2, r2, r9, lsl r5
    c24c:	05c00100 	strbeq	r0, [r0, #256]	; 0x100
    c250:	000006c8 	andeq	r0, r0, r8, asr #13
    c254:	19749102 	ldmdbne	r4!, {r1, r8, ip, pc}^
    c258:	0000482d 	andeq	r4, r0, sp, lsr #16
    c25c:	0e05c101 	mvfeqs	f4, f1
    c260:	02000001 	andeq	r0, r0, #1
    c264:	07007091 			; <UNDEFINED> instruction: 0x07007091
    c268:	00000207 	andeq	r0, r0, r7, lsl #4
    c26c:	06ce0406 	strbeq	r0, [lr], r6, lsl #8
    c270:	84070000 	strhi	r0, [r7], #-0
    c274:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    c278:	00004e41 	andeq	r4, r0, r1, asr #28
    c27c:	0e05d401 	cdpeq	4, 0, cr13, cr5, cr1, {0}
    c280:	00000001 	andeq	r0, r0, r1
    c284:	54000000 	strpl	r0, [r0], #-0
    c288:	01000000 	mrseq	r0, (UNDEF: 0)
    c28c:	0007729c 	muleq	r7, ip, r2
    c290:	3ed11800 	cdpcc	8, 13, cr1, cr1, cr0, {0}
    c294:	d4010000 	strle	r0, [r1], #-0
    c298:	0006c305 	andeq	ip, r6, r5, lsl #6
    c29c:	5c910200 	lfmpl	f0, 4, [r1], {0}
    c2a0:	00522519 	subseq	r2, r2, r9, lsl r5
    c2a4:	05d60100 	ldrbeq	r0, [r6, #256]	; 0x100
    c2a8:	000006c8 	andeq	r0, r0, r8, asr #13
    c2ac:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    c2b0:	0000482d 	andeq	r4, r0, sp, lsr #16
    c2b4:	0e05d701 	cdpeq	7, 0, cr13, cr5, cr1, {0}
    c2b8:	02000001 	andeq	r0, r0, #1
    c2bc:	1d196891 	ldcne	8, cr6, [r9, #-580]	; 0xfffffdbc
    c2c0:	0100004b 	tsteq	r0, fp, asr #32
    c2c4:	010e05d7 	ldrdeq	r0, [lr, -r7]
    c2c8:	91020000 	mrsls	r0, (UNDEF: 2)
    c2cc:	03901f70 	orrseq	r1, r0, #112, 30	; 0x1c0
    c2d0:	00000000 	andeq	r0, r0, r0
    c2d4:	001a0000 	andseq	r0, sl, r0
    c2d8:	eb010000 	bl	4c2e0 <_Min_Stack_Size+0x4c0e0>
    c2dc:	00075805 	andeq	r5, r7, r5, lsl #16
    c2e0:	00001a00 	andeq	r1, r0, r0, lsl #20
    c2e4:	001a0000 	andseq	r0, sl, r0
    c2e8:	a0200000 	eorge	r0, r0, r0
    c2ec:	02000003 	andeq	r0, r0, #3
    c2f0:	ab206491 	blge	82553c <_Min_Stack_Size+0x82533c>
    c2f4:	02000003 	andeq	r0, r0, #3
    c2f8:	00006091 	muleq	r0, r1, r0
    c2fc:	0003b721 	andeq	fp, r3, r1, lsr #14
    c300:	00000000 	andeq	r0, r0, r0
    c304:	00000600 	andeq	r0, r0, r0, lsl #12
    c308:	05f20100 	ldrbeq	r0, [r2, #256]!	; 0x100
    c30c:	0003c322 	andeq	ip, r3, r2, lsr #6
    c310:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    c314:	b81d0000 	ldmdalt	sp, {}	; <UNPREDICTABLE>
    c318:	0100004e 	tsteq	r0, lr, asr #32
    c31c:	000005fc 	strdeq	r0, [r0], -ip
    c320:	01380000 	teqeq	r8, r0
    c324:	9c010000 	stcls	0, cr0, [r1], {-0}
    c328:	000007e3 	andeq	r0, r0, r3, ror #15
    c32c:	003ed118 	eorseq	sp, lr, r8, lsl r1
    c330:	05fc0100 	ldrbeq	r0, [ip, #256]!	; 0x100
    c334:	00000207 	andeq	r0, r0, r7, lsl #4
    c338:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
    c33c:	00004dfd 	strdeq	r4, [r0], -sp
    c340:	0e05fc01 	cdpeq	12, 0, cr15, cr5, cr1, {0}
    c344:	02000001 	andeq	r0, r0, #1
    c348:	25196091 	ldrcs	r6, [r9, #-145]	; 0xffffff6f
    c34c:	01000052 	qaddeq	r0, r2, r0
    c350:	04cf05fe 	strbeq	r0, [pc], #1534	; c358 <_Min_Stack_Size+0xc158>
    c354:	91020000 	mrsls	r0, (UNDEF: 2)
    c358:	52ae1970 	adcpl	r1, lr, #112, 18	; 0x1c0000
    c35c:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    c360:	00010e05 	andeq	r0, r1, r5, lsl #28
    c364:	6c910200 	lfmvs	f0, 4, [r1], {0}
    c368:	00515c19 	subseq	r5, r1, r9, lsl ip
    c36c:	05ff0100 	ldrbeq	r0, [pc, #256]!	; c474 <_Min_Stack_Size+0xc274>
    c370:	0000010e 	andeq	r0, r0, lr, lsl #2
    c374:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
    c378:	00004547 	andeq	r4, r0, r7, asr #10
    c37c:	03060001 	movweq	r0, #24577	; 0x6001
    c380:	02000001 	andeq	r0, r0, #1
    c384:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
    c388:	00005178 	andeq	r5, r0, r8, ror r1
    c38c:	0006a001 	andeq	sl, r6, r1
    c390:	04000000 	streq	r0, [r0], #-0
    c394:	01000001 	tsteq	r0, r1
    c398:	0008189c 	muleq	r8, ip, r8
    c39c:	4fee1800 	svcmi	0x00ee1800
    c3a0:	a0010000 	andge	r0, r1, r0
    c3a4:	00020706 	andeq	r0, r2, r6, lsl #14
    c3a8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    c3ac:	00522519 	subseq	r2, r2, r9, lsl r5
    c3b0:	06a20100 	strteq	r0, [r2], r0, lsl #2
    c3b4:	000004cf 	andeq	r0, r0, pc, asr #9
    c3b8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    c3bc:	004fa923 	subeq	sl, pc, r3, lsr #18
    c3c0:	07050100 	streq	r0, [r5, -r0, lsl #2]
    c3c4:	00000103 	andeq	r0, r0, r3, lsl #2
    c3c8:	00000000 	andeq	r0, r0, r0
    c3cc:	00000044 	andeq	r0, r0, r4, asr #32
    c3d0:	08609c01 	stmdaeq	r0!, {r0, sl, fp, ip, pc}^
    c3d4:	d1180000 	tstle	r8, r0
    c3d8:	0100003e 	tsteq	r0, lr, lsr r0
    c3dc:	06c30705 	strbeq	r0, [r3], r5, lsl #14
    c3e0:	91020000 	mrsls	r0, (UNDEF: 2)
    c3e4:	482e196c 	stmdami	lr!, {r2, r3, r5, r6, r8, fp, ip}
    c3e8:	07010000 	streq	r0, [r1, -r0]
    c3ec:	00010307 	andeq	r0, r1, r7, lsl #6
    c3f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    c3f4:	00522519 	subseq	r2, r2, r9, lsl r5
    c3f8:	07080100 	streq	r0, [r8, -r0, lsl #2]
    c3fc:	00000860 	andeq	r0, r0, r0, ror #16
    c400:	00709102 	rsbseq	r9, r0, r2, lsl #2
    c404:	0006c807 	andeq	ip, r6, r7, lsl #16
    c408:	524d1d00 	subpl	r1, sp, #0, 26
    c40c:	33010000 	movwcc	r0, #4096	; 0x1000
    c410:	00000007 	andeq	r0, r0, r7
    c414:	0000a000 	andeq	sl, r0, r0
    c418:	9a9c0100 	bls	fe70c820 <BootRAM+0xd67cfc1>
    c41c:	18000008 	stmdane	r0, {r3}
    c420:	00004a5e 	andeq	r4, r0, lr, asr sl
    c424:	07073301 	streq	r3, [r7, -r1, lsl #6]
    c428:	02000002 	andeq	r0, r0, #2
    c42c:	25196c91 	ldrcs	r6, [r9, #-3217]	; 0xfffff36f
    c430:	01000052 	qaddeq	r0, r2, r0
    c434:	089a0735 	ldmeq	sl, {r0, r2, r4, r5, r8, r9, sl}
    c438:	91020000 	mrsls	r0, (UNDEF: 2)
    c43c:	cf070074 	svcgt	0x00070074
    c440:	17000004 	strne	r0, [r0, -r4]
    c444:	00004b7e 	andeq	r4, r0, lr, ror fp
    c448:	03076901 	movweq	r6, #30977	; 0x7901
    c44c:	00000001 	andeq	r0, r0, r1
    c450:	c0000000 	andgt	r0, r0, r0
    c454:	01000000 	mrseq	r0, (UNDEF: 0)
    c458:	00093e9c 	muleq	r9, ip, lr
    c45c:	4a5e1800 	bmi	1792464 <_Min_Stack_Size+0x1792264>
    c460:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    c464:	00020707 	andeq	r0, r2, r7, lsl #14
    c468:	5c910200 	lfmpl	f0, 4, [r1], {0}
    c46c:	00454719 	subeq	r4, r5, r9, lsl r7
    c470:	076b0100 	strbeq	r0, [fp, -r0, lsl #2]!
    c474:	00000103 	andeq	r0, r0, r3, lsl #2
    c478:	19749102 	ldmdbne	r4!, {r1, r8, ip, pc}^
    c47c:	00005225 	andeq	r5, r0, r5, lsr #4
    c480:	9a076c01 	bls	1e748c <_Min_Stack_Size+0x1e728c>
    c484:	02000008 	andeq	r0, r0, #8
    c488:	7b197091 	blvc	6686d4 <_Min_Stack_Size+0x6684d4>
    c48c:	01000048 	tsteq	r0, r8, asr #32
    c490:	010e076d 	tsteq	lr, sp, ror #14
    c494:	91020000 	mrsls	r0, (UNDEF: 2)
    c498:	03901f68 	orrseq	r1, r0, #104, 30	; 0x1a0
    c49c:	00000000 	andeq	r0, r0, r0
    c4a0:	001a0000 	andseq	r0, sl, r0
    c4a4:	83010000 	movwhi	r0, #4096	; 0x1000
    c4a8:	00092407 	andeq	r2, r9, r7, lsl #8
    c4ac:	00001a00 	andeq	r1, r0, r0, lsl #20
    c4b0:	001a0000 	andseq	r0, sl, r0
    c4b4:	a0200000 	eorge	r0, r0, r0
    c4b8:	02000003 	andeq	r0, r0, #3
    c4bc:	ab206491 	blge	825708 <_Min_Stack_Size+0x825508>
    c4c0:	02000003 	andeq	r0, r0, #3
    c4c4:	00006091 	muleq	r0, r1, r0
    c4c8:	0003b721 	andeq	fp, r3, r1, lsr #14
    c4cc:	00000000 	andeq	r0, r0, r0
    c4d0:	00000600 	andeq	r0, r0, r0, lsl #12
    c4d4:	07a70100 	streq	r0, [r7, r0, lsl #2]!
    c4d8:	0003c322 	andeq	ip, r3, r2, lsr #6
    c4dc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    c4e0:	9d1d0000 	ldcls	0, cr0, [sp, #-0]
    c4e4:	01000050 	qaddeq	r0, r0, r0
    c4e8:	894407af 	stmdbhi	r4, {r0, r1, r2, r3, r5, r7, r8, r9, sl}^
    c4ec:	006c0800 	rsbeq	r0, ip, r0, lsl #16
    c4f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    c4f4:	00000987 	andeq	r0, r0, r7, lsl #19
    c4f8:	00482e19 	subeq	r2, r8, r9, lsl lr
    c4fc:	07b10100 	ldreq	r0, [r1, r0, lsl #2]!
    c500:	00000103 	andeq	r0, r0, r3, lsl #2
    c504:	21749102 	cmncs	r4, r2, lsl #2
    c508:	000003cf 	andeq	r0, r0, pc, asr #7
    c50c:	08008966 	stmdaeq	r0, {r1, r2, r5, r6, r8, fp, pc}
    c510:	00000012 	andeq	r0, r0, r2, lsl r0
    c514:	1a07f701 	bne	20a120 <_Min_Stack_Size+0x209f20>
    c518:	08008966 	stmdaeq	r0, {r1, r2, r5, r6, r8, fp, pc}
    c51c:	00000012 	andeq	r0, r0, r2, lsl r0
    c520:	0003db20 	andeq	sp, r3, r0, lsr #22
    c524:	70910200 	addsvc	r0, r1, r0, lsl #4
    c528:	1d000000 	stcne	0, cr0, [r0, #-0]
    c52c:	00004bc2 	andeq	r4, r0, r2, asr #23
    c530:	00082901 	andeq	r2, r8, r1, lsl #18
    c534:	30000000 	andcc	r0, r0, r0
    c538:	01000000 	mrseq	r0, (UNDEF: 0)
    c53c:	0009c19c 	muleq	r9, ip, r1
    c540:	03cf2100 	biceq	r2, pc, #0, 2
    c544:	00000000 	andeq	r0, r0, r0
    c548:	00120000 	andseq	r0, r2, r0
    c54c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    c550:	00001a08 	andeq	r1, r0, r8, lsl #20
    c554:	00120000 	andseq	r0, r2, r0
    c558:	db200000 	blle	80c560 <_Min_Stack_Size+0x80c360>
    c55c:	02000003 	andeq	r0, r0, #3
    c560:	00007491 	muleq	r0, r1, r4
    c564:	4b912400 	blmi	fe45556c <BootRAM+0xd3c5d0d>
    c568:	34010000 	strcc	r0, [r1], #-0
    c56c:	0089b008 	addeq	fp, r9, r8
    c570:	00001c08 	andeq	r1, r0, r8, lsl #24
    c574:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    c578:	00004f71 	andeq	r4, r0, r1, ror pc
    c57c:	03087e01 	movweq	r7, #36353	; 0x8e01
    c580:	cc000001 	stcgt	0, cr0, [r0], {1}
    c584:	1c080089 	stcne	0, cr0, [r8], {137}	; 0x89
    c588:	01000001 	tsteq	r0, r1
    c58c:	000a259c 	muleq	sl, ip, r5
    c590:	52251900 	eorpl	r1, r5, #0, 18
    c594:	80010000 	andhi	r0, r1, r0
    c598:	0004cf08 	andeq	ip, r4, r8, lsl #30
    c59c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    c5a0:	00518519 	subseq	r8, r1, r9, lsl r5
    c5a4:	08810100 	stmeq	r1, {r8}
    c5a8:	00000103 	andeq	r0, r0, r3, lsl #2
    c5ac:	1a709102 	bne	1c309bc <_Min_Stack_Size+0x1c307bc>
    c5b0:	08008a6a 	stmdaeq	r0, {r1, r3, r5, r6, r9, fp, pc}
    c5b4:	0000002e 	andeq	r0, r0, lr, lsr #32
    c5b8:	00492d19 	subeq	r2, r9, r9, lsl sp
    c5bc:	08b90100 	ldmeq	r9!, {r8}
    c5c0:	0000010e 	andeq	r0, r0, lr, lsl #2
    c5c4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    c5c8:	4e5a1e00 	cdpmi	14, 5, cr1, cr10, cr0, {0}
    c5cc:	ec010000 	stc	0, cr0, [r1], {-0}
    c5d0:	00011908 	andeq	r1, r1, r8, lsl #18
    c5d4:	00000000 	andeq	r0, r0, r0
    c5d8:	00001c00 	andeq	r1, r0, r0, lsl #24
    c5dc:	4f9c0100 	svcmi	0x009c0100
    c5e0:	1900000a 	stmdbne	r0, {r1, r3}
    c5e4:	00005096 	muleq	r0, r6, r0
    c5e8:	1908ee01 	stmdbne	r8, {r0, r9, sl, fp, sp, lr, pc}
    c5ec:	02000001 	andeq	r0, r0, #1
    c5f0:	1e007491 	mcrne	4, 0, r7, cr0, cr1, {4}
    c5f4:	00004b04 	andeq	r4, r0, r4, lsl #22
    c5f8:	1908fb01 	stmdbne	r8, {r0, r8, r9, fp, ip, sp, lr, pc}
    c5fc:	00000001 	andeq	r0, r0, r1
    c600:	20000000 	andcs	r0, r0, r0
    c604:	01000000 	mrseq	r0, (UNDEF: 0)
    c608:	000a889c 	muleq	sl, ip, r8
    c60c:	482e1900 	stmdami	lr!, {r8, fp, ip}
    c610:	fd010000 	stc2	0, cr0, [r1, #-0]
    c614:	00011908 	andeq	r1, r1, r8, lsl #18
    c618:	70910200 	addsvc	r0, r1, r0, lsl #4
    c61c:	00487b19 	subeq	r7, r8, r9, lsl fp
    c620:	08fe0100 	ldmeq	lr!, {r8}^
    c624:	0000010e 	andeq	r0, r0, lr, lsl #2
    c628:	00749102 	rsbseq	r9, r4, r2, lsl #2
    c62c:	004a6c25 	subeq	r6, sl, r5, lsr #24
    c630:	091a0100 	ldmdbeq	sl, {r8}
    c634:	0000010e 	andeq	r0, r0, lr, lsl #2
    c638:	00000000 	andeq	r0, r0, r0
    c63c:	00000014 	andeq	r0, r0, r4, lsl r0
    c640:	881e9c01 	ldmdahi	lr, {r0, sl, fp, ip, pc}
    c644:	01000050 	qaddeq	r0, r0, r0
    c648:	00a30922 	adceq	r0, r3, r2, lsr #18
    c64c:	00000000 	andeq	r0, r0, r0
    c650:	002c0000 	eoreq	r0, ip, r0
    c654:	9c010000 	stcls	0, cr0, [r1], {-0}
    c658:	00000ad7 	ldrdeq	r0, [r0], -r7
    c65c:	004ec918 	subeq	ip, lr, r8, lsl r9
    c660:	09220100 	stmdbeq	r2!, {r8}
    c664:	00000207 	andeq	r0, r0, r7, lsl #4
    c668:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    c66c:	00005225 	andeq	r5, r0, r5, lsr #4
    c670:	cf092401 	svcgt	0x00092401
    c674:	02000004 	andeq	r0, r0, #4
    c678:	17007491 			; <UNDEFINED> instruction: 0x17007491
    c67c:	00004a11 	andeq	r4, r0, r1, lsl sl
    c680:	030a6901 	movweq	r6, #43265	; 0xa901
    c684:	e8000001 	stmda	r0, {r0}
    c688:	5008008a 	andpl	r0, r8, sl, lsl #1
    c68c:	01000001 	tsteq	r0, r1
    c690:	000b519c 	muleq	fp, ip, r1
    c694:	52251900 	eorpl	r1, r5, #0, 18
    c698:	6b010000 	blvs	4c6a0 <_Min_Stack_Size+0x4c4a0>
    c69c:	0004cf0a 	andeq	ip, r4, sl, lsl #30
    c6a0:	68910200 	ldmvs	r1, {r9}
    c6a4:	00432c19 	subeq	r2, r3, r9, lsl ip
    c6a8:	0a6c0100 	beq	1b0cab0 <_Min_Stack_Size+0x1b0c8b0>
    c6ac:	00000119 	andeq	r0, r0, r9, lsl r1
    c6b0:	19649102 	stmdbne	r4!, {r1, r8, ip, pc}^
    c6b4:	00004fc0 	andeq	r4, r0, r0, asr #31
    c6b8:	030a6d01 	movweq	r6, #44289	; 0xad01
    c6bc:	02000001 	andeq	r0, r0, #1
    c6c0:	fa1a7491 	blx	6a990c <_Min_Stack_Size+0x6a970c>
    c6c4:	f008008a 			; <UNDEFINED> instruction: 0xf008008a
    c6c8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    c6cc:	00004be6 	andeq	r4, r0, r6, ror #23
    c6d0:	410a7701 	tstmi	sl, r1, lsl #14
    c6d4:	02000006 	andeq	r0, r0, #6
    c6d8:	0e1a7091 	mrceq	0, 0, r7, cr10, cr1, {4}
    c6dc:	2208008b 	andcs	r0, r8, #139	; 0x8b
    c6e0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    c6e4:	00004c23 	andeq	r4, r0, r3, lsr #24
    c6e8:	510a7f01 	tstpl	sl, r1, lsl #30
    c6ec:	0200000b 	andeq	r0, r0, #11
    c6f0:	00006c91 	muleq	r0, r1, ip
    c6f4:	fc040600 	stc2	6, cr0, [r4], {-0}
    c6f8:	1d000001 	stcne	0, cr0, [r0, #-4]
    c6fc:	00004f0c 	andeq	r4, r0, ip, lsl #30
    c700:	380b8301 	stmdacc	fp, {r0, r8, r9, pc}
    c704:	d808008c 	stmdale	r8, {r2, r3, r7}
    c708:	01000000 	mrseq	r0, (UNDEF: 0)
    c70c:	000bfb9c 	muleq	fp, ip, fp
    c710:	8c542600 	mrrchi	6, 0, r2, r4, cr0
    c714:	004e0800 	subeq	r0, lr, r0, lsl #16
    c718:	0b990000 	bleq	fe64c720 <BootRAM+0xd5bcec1>
    c71c:	c7190000 	ldrgt	r0, [r9, -r0]
    c720:	01000050 	qaddeq	r0, r0, r0
    c724:	0c010bac 			; <UNDEFINED> instruction: 0x0c010bac
    c728:	91020000 	mrsls	r0, (UNDEF: 2)
    c72c:	4dd41974 	vldrmi.16	s3, [r4, #232]	; 0xe8	; <UNPREDICTABLE>
    c730:	ac010000 	stcge	0, cr0, [r1], {-0}
    c734:	0005800b 	andeq	r8, r5, fp
    c738:	70910200 	addsvc	r0, r1, r0, lsl #4
    c73c:	8ca21a00 	vstmiahi	r2!, {s2-s1}
    c740:	00500800 	subseq	r0, r0, r0, lsl #16
    c744:	2f190000 	svccs	0x00190000
    c748:	01000051 	qaddeq	r0, r1, r0
    c74c:	010e0bb7 			; <UNDEFINED> instruction: 0x010e0bb7
    c750:	91020000 	mrsls	r0, (UNDEF: 2)
    c754:	03e71f6c 	mvneq	r1, #108, 30	; 0x1b0
    c758:	8ca80000 	stchi	0, cr0, [r8]
    c75c:	000a0800 	andeq	r0, sl, r0, lsl #16
    c760:	b7010000 	strlt	r0, [r1, -r0]
    c764:	000be00b 	andeq	lr, fp, fp
    c768:	03f72200 	mvnseq	r2, #0, 4
    c76c:	91020000 	mrsls	r0, (UNDEF: 2)
    c770:	8ca81a64 	vstmiahi	r8!, {s2-s101}
    c774:	000a0800 	andeq	r0, sl, r0, lsl #16
    c778:	02200000 	eoreq	r0, r0, #0
    c77c:	02000004 	andeq	r0, r0, #4
    c780:	00006391 	muleq	r0, r1, r3
    c784:	008cb81a 	addeq	fp, ip, sl, lsl r8
    c788:	00003a08 	andeq	r3, r0, r8, lsl #20
    c78c:	49211900 	stmdbmi	r1!, {r8, fp, ip}
    c790:	b7010000 	strlt	r0, [r1, -r0]
    c794:	000c060b 	andeq	r0, ip, fp, lsl #12
    c798:	68910200 	ldmvs	r1, {r9}
    c79c:	06000000 	streq	r0, [r0], -r0
    c7a0:	00058004 	andeq	r8, r5, r4
    c7a4:	0bfb0700 	bleq	ffece3ac <BootRAM+0xee3eb4d>
    c7a8:	51070000 	mrspl	r0, (UNDEF: 7)
    c7ac:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    c7b0:	00004c2a 	andeq	r4, r0, sl, lsr #24
    c7b4:	100bcc01 	andne	ip, fp, r1, lsl #24
    c7b8:	2c08008d 	stccs	0, cr0, [r8], {141}	; 0x8d
    c7bc:	01000000 	mrseq	r0, (UNDEF: 0)
    c7c0:	000c409c 	muleq	ip, ip, r0
    c7c4:	49901800 	ldmibmi	r0, {fp, ip}
    c7c8:	cc010000 	stcgt	0, cr0, [r1], {-0}
    c7cc:	000c060b 	andeq	r0, ip, fp, lsl #12
    c7d0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    c7d4:	00512218 	subseq	r2, r1, r8, lsl r2
    c7d8:	0bcc0100 	bleq	ff30cbe0 <BootRAM+0xe27d381>
    c7dc:	00000641 	andeq	r0, r0, r1, asr #12
    c7e0:	00709102 	rsbseq	r9, r0, r2, lsl #2
    c7e4:	0050ec1d 	subseq	lr, r0, sp, lsl ip
    c7e8:	0bdd0100 	bleq	ff74cbf0 <BootRAM+0xe6bd391>
    c7ec:	00000000 	andeq	r0, r0, r0
    c7f0:	0000003c 	andeq	r0, r0, ip, lsr r0
    c7f4:	0c849c01 	stceq	12, cr9, [r4], {1}
    c7f8:	90180000 	andsls	r0, r8, r0
    c7fc:	01000049 	tsteq	r0, r9, asr #32
    c800:	0b510bdd 	bleq	144f77c <_Min_Stack_Size+0x144f57c>
    c804:	91020000 	mrsls	r0, (UNDEF: 2)
    c808:	432c1874 			; <UNDEFINED> instruction: 0x432c1874
    c80c:	dd010000 	stcle	0, cr0, [r1, #-0]
    c810:	0006410b 	andeq	r4, r6, fp, lsl #2
    c814:	70910200 	addsvc	r0, r1, r0, lsl #4
    c818:	00512218 	subseq	r2, r1, r8, lsl r2
    c81c:	0bdd0100 	bleq	ff74cc24 <BootRAM+0xe6bd3c5>
    c820:	00000641 	andeq	r0, r0, r1, asr #12
    c824:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    c828:	004cc117 	subeq	ip, ip, r7, lsl r1
    c82c:	0c160100 	ldfeqs	f0, [r6], {-0}
    c830:	00000103 	andeq	r0, r0, r3, lsl #2
    c834:	08008d3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, fp, pc}
    c838:	000000a8 	andeq	r0, r0, r8, lsr #1
    c83c:	0ccc9c01 	stcleq	12, cr9, [ip], {1}
    c840:	90180000 	andsls	r0, r8, r0
    c844:	01000049 	tsteq	r0, r9, asr #32
    c848:	0cd70c16 	ldcleq	12, cr0, [r7], {22}
    c84c:	91020000 	mrsls	r0, (UNDEF: 2)
    c850:	4ab2196c 	bmi	fec92e08 <BootRAM+0xdc035a9>
    c854:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    c858:	0004cf0c 	andeq	ip, r4, ip, lsl #30
    c85c:	70910200 	addsvc	r0, r1, r0, lsl #4
    c860:	00482e19 	subeq	r2, r8, r9, lsl lr
    c864:	0c190100 	ldfeqs	f0, [r9], {-0}
    c868:	00000103 	andeq	r0, r0, r3, lsl #2
    c86c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    c870:	0cd20406 	cfldrdeq	mvd0, [r2], {6}
    c874:	fc070000 	stc2	0, cr0, [r7], {-0}
    c878:	07000001 	streq	r0, [r0, -r1]
    c87c:	00000ccc 	andeq	r0, r0, ip, asr #25
    c880:	004c791d 	subeq	r7, ip, sp, lsl r9
    c884:	0c5a0100 	ldfeqe	f0, [sl], {-0}
    c888:	00000000 	andeq	r0, r0, r0
    c88c:	00000084 	andeq	r0, r0, r4, lsl #1
    c890:	0d209c01 	stceq	12, cr9, [r0, #-4]!
    c894:	70180000 	andsvc	r0, r8, r0
    c898:	01000052 	qaddeq	r0, r2, r0
    c89c:	01f60c5a 	mvnseq	r0, sl, asr ip
    c8a0:	91020000 	mrsls	r0, (UNDEF: 2)
    c8a4:	432c186c 			; <UNDEFINED> instruction: 0x432c186c
    c8a8:	5a010000 	bpl	4c8b0 <_Min_Stack_Size+0x4c6b0>
    c8ac:	0006410c 	andeq	r4, r6, ip, lsl #2
    c8b0:	68910200 	ldmvs	r1, {r9}
    c8b4:	004ab219 	subeq	fp, sl, r9, lsl r2
    c8b8:	0c5c0100 	ldfeqe	f0, [ip], {-0}
    c8bc:	000004cf 	andeq	r0, r0, pc, asr #9
    c8c0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    c8c4:	0049e21d 	subeq	lr, r9, sp, lsl r2
    c8c8:	0c7c0100 	ldfeqe	f0, [ip], #-0
    c8cc:	00000000 	andeq	r0, r0, r0
    c8d0:	00000030 	andeq	r0, r0, r0, lsr r0
    c8d4:	0d469c01 	stcleq	12, cr9, [r6, #-4]
    c8d8:	37180000 	ldrcc	r0, [r8, -r0]
    c8dc:	0100004e 	tsteq	r0, lr, asr #32
    c8e0:	0d4c0c7c 	stcleq	12, cr0, [ip, #-496]	; 0xfffffe10
    c8e4:	91020000 	mrsls	r0, (UNDEF: 2)
    c8e8:	04060074 	streq	r0, [r6], #-116	; 0xffffff8c
    c8ec:	00000301 	andeq	r0, r0, r1, lsl #6
    c8f0:	000d4607 	andeq	r4, sp, r7, lsl #12
    c8f4:	4e6c2700 	cdpmi	7, 6, cr2, cr12, cr0, {0}
    c8f8:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    c8fc:	008de40c 	addeq	lr, sp, ip, lsl #8
    c900:	00002c08 	andeq	r2, r0, r8, lsl #24
    c904:	779c0100 	ldrvc	r0, [ip, r0, lsl #2]
    c908:	1800000d 	stmdane	r0, {r0, r2, r3}
    c90c:	00004e37 	andeq	r4, r0, r7, lsr lr
    c910:	4c0c8801 	stcmi	8, cr8, [ip], {1}
    c914:	0200000d 	andeq	r0, r0, #13
    c918:	17007491 			; <UNDEFINED> instruction: 0x17007491
    c91c:	00004ffd 	strdeq	r4, [r0], -sp
    c920:	030c9001 	movweq	r9, #49153	; 0xc001
    c924:	10000001 	andne	r0, r0, r1
    c928:	8c08008e 	stchi	0, cr0, [r8], {142}	; 0x8e
    c92c:	01000000 	mrseq	r0, (UNDEF: 0)
    c930:	000de79c 	muleq	sp, ip, r7
    c934:	4e371800 	cdpmi	8, 3, cr1, cr7, cr0, {0}
    c938:	90010000 	andls	r0, r1, r0
    c93c:	000d4c0c 	andeq	r4, sp, ip, lsl #24
    c940:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    c944:	00512118 	subseq	r2, r1, r8, lsl r1
    c948:	0c900100 	ldfeqs	f0, [r0], {0}
    c94c:	0000063c 	andeq	r0, r0, ip, lsr r6
    c950:	19609102 	stmdbne	r0!, {r1, r8, ip, pc}^
    c954:	0000482e 	andeq	r4, r0, lr, lsr #16
    c958:	030c9201 	movweq	r9, #49665	; 0xc201
    c95c:	02000001 	andeq	r0, r0, #1
    c960:	1e1a7491 	cfcmpsne	r7, mvf10, mvf1
    c964:	6808008e 	stmdavs	r8, {r1, r2, r3, r7}
    c968:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    c96c:	00004be6 	andeq	r4, r0, r6, ror #23
    c970:	410c9a01 	tstmi	ip, r1, lsl #20
    c974:	02000006 	andeq	r0, r0, #6
    c978:	e0197091 	muls	r9, r1, r0
    c97c:	0100004a 	tsteq	r0, sl, asr #32
    c980:	06410c9b 			; <UNDEFINED> instruction: 0x06410c9b
    c984:	91020000 	mrsls	r0, (UNDEF: 2)
    c988:	2400006c 	strcs	r0, [r0], #-108	; 0xffffff94
    c98c:	00005043 	andeq	r5, r0, r3, asr #32
    c990:	9c0ccf01 	stcls	15, cr12, [ip], {1}
    c994:	1808008e 	stmdane	r8, {r1, r2, r3, r7}
    c998:	01000000 	mrseq	r0, (UNDEF: 0)
    c99c:	4d0e1b9c 	vstrmi	d1, [lr, #-624]	; 0xfffffd90
    c9a0:	06010000 	streq	r0, [r1], -r0
    c9a4:	008eb40d 	addeq	fp, lr, sp, lsl #8
    c9a8:	00003008 	andeq	r3, r0, r8
    c9ac:	1f9c0100 	svcne	0x009c0100
    c9b0:	1800000e 	stmdane	r0, {r1, r2, r3}
    c9b4:	00003f09 	andeq	r3, r0, r9, lsl #30
    c9b8:	a10d0601 	tstge	sp, r1, lsl #12
    c9bc:	02000000 	andeq	r0, r0, #0
    c9c0:	1b007491 	blne	29c0c <_Min_Stack_Size+0x29a0c>
    c9c4:	00005259 	andeq	r5, r0, r9, asr r2
    c9c8:	e40dda01 	str	sp, [sp], #-2561	; 0xfffff5ff
    c9cc:	7408008e 	strvc	r0, [r8], #-142	; 0xffffff72
    c9d0:	01000000 	mrseq	r0, (UNDEF: 0)
    c9d4:	000e459c 	muleq	lr, ip, r5
    c9d8:	49161900 	ldmdbmi	r6, {r8, fp, ip}
    c9dc:	dc010000 	stcle	0, cr0, [r1], {-0}
    c9e0:	00010e0d 	andeq	r0, r1, sp, lsl #28
    c9e4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    c9e8:	528e2800 	addpl	r2, lr, #0, 16
    c9ec:	fa010000 	blx	4c9f4 <_Min_Stack_Size+0x4c7f4>
    c9f0:	008f580d 	addeq	r5, pc, sp, lsl #16
    c9f4:	00000c08 	andeq	r0, r0, r8, lsl #24
    c9f8:	299c0100 	ldmibcs	ip, {r8}
    c9fc:	00004de1 	andeq	r4, r0, r1, ror #27
    ca00:	640f2801 	strvs	r2, [pc], #-2049	; ca08 <_Min_Stack_Size+0xc808>
    ca04:	4008008f 	andmi	r0, r8, pc, lsl #1
    ca08:	01000000 	mrseq	r0, (UNDEF: 0)
    ca0c:	000e7d9c 	muleq	lr, ip, sp
    ca10:	52251900 	eorpl	r1, r5, #0, 18
    ca14:	2a010000 	bcs	4ca1c <_Min_Stack_Size+0x4c81c>
    ca18:	0004cf0f 	andeq	ip, r4, pc, lsl #30
    ca1c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    ca20:	51951e00 	orrspl	r1, r5, r0, lsl #28
    ca24:	42010000 	andmi	r0, r1, #0
    ca28:	0002070f 	andeq	r0, r2, pc, lsl #14
    ca2c:	00000000 	andeq	r0, r0, r0
    ca30:	00001c00 	andeq	r1, r0, r0, lsl #24
    ca34:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
    ca38:	1900000e 	stmdbne	r0, {r1, r2, r3}
    ca3c:	0000482e 	andeq	r4, r0, lr, lsr #16
    ca40:	070f4401 	streq	r4, [pc, -r1, lsl #8]
    ca44:	02000002 	andeq	r0, r0, #2
    ca48:	17007491 			; <UNDEFINED> instruction: 0x17007491
    ca4c:	00005062 	andeq	r5, r0, r2, rrx
    ca50:	030f6f01 	movweq	r6, #65281	; 0xff01
    ca54:	a4000001 	strge	r0, [r0], #-1
    ca58:	0008008f 	andeq	r0, r8, pc, lsl #1
    ca5c:	01000001 	tsteq	r0, r1
    ca60:	000eef9c 	muleq	lr, ip, pc	; <UNPREDICTABLE>
    ca64:	4fd01800 	svcmi	0x00d01800
    ca68:	6f010000 	svcvs	0x00010000
    ca6c:	0006c30f 	andeq	ip, r6, pc, lsl #6
    ca70:	6c910200 	lfmvs	f0, 4, [r1], {0}
    ca74:	00507719 	subseq	r7, r0, r9, lsl r7
    ca78:	0f710100 	svceq	0x00710100
    ca7c:	0000089a 	muleq	r0, sl, r8
    ca80:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
    ca84:	0000482e 	andeq	r4, r0, lr, lsr #16
    ca88:	030f7201 	movweq	r7, #61953	; 0xf201
    ca8c:	02000001 	andeq	r0, r0, #1
    ca90:	17007491 			; <UNDEFINED> instruction: 0x17007491
    ca94:	00004ca9 	andeq	r4, r0, r9, lsr #25
    ca98:	030fc601 	movweq	ip, #62977	; 0xf601
    ca9c:	a4000001 	strge	r0, [r0], #-1
    caa0:	c8080090 	stmdagt	r8, {r4, r7}
    caa4:	01000000 	mrseq	r0, (UNDEF: 0)
    caa8:	000f379c 	muleq	pc, ip, r7	; <UNPREDICTABLE>
    caac:	4fd01800 	svcmi	0x00d01800
    cab0:	c6010000 	strgt	r0, [r1], -r0
    cab4:	0006c30f 	andeq	ip, r6, pc, lsl #6
    cab8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    cabc:	00522519 	subseq	r2, r2, r9, lsl r5
    cac0:	0fc80100 	svceq	0x00c80100
    cac4:	0000089a 	muleq	r0, sl, r8
    cac8:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
    cacc:	0000482e 	andeq	r4, r0, lr, lsr #16
    cad0:	030fc901 	movweq	ip, #63745	; 0xf901
    cad4:	02000001 	andeq	r0, r0, #1
    cad8:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
    cadc:	00004b5a 	andeq	r4, r0, sl, asr fp
    cae0:	6c101601 	ldcvs	6, cr1, [r0], {1}
    cae4:	f0080091 			; <UNDEFINED> instruction: 0xf0080091
    cae8:	01000000 	mrseq	r0, (UNDEF: 0)
    caec:	000fa89c 	muleq	pc, ip, r8	; <UNPREDICTABLE>
    caf0:	4fd01800 	svcmi	0x00d01800
    caf4:	16010000 	strne	r0, [r1], -r0
    caf8:	0006c310 	andeq	ip, r6, r0, lsl r3
    cafc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    cb00:	004f3f18 	subeq	r3, pc, r8, lsl pc	; <UNPREDICTABLE>
    cb04:	10160100 	andsne	r0, r6, r0, lsl #2
    cb08:	0000010e 	andeq	r0, r0, lr, lsl #2
    cb0c:	19609102 	stmdbne	r0!, {r1, r8, ip, pc}^
    cb10:	00005225 	andeq	r5, r0, r5, lsr #4
    cb14:	9a101801 	bls	412b20 <_Min_Stack_Size+0x412920>
    cb18:	02000008 	andeq	r0, r0, #8
    cb1c:	5c197091 	ldcpl	0, cr7, [r9], {145}	; 0x91
    cb20:	01000051 	qaddeq	r0, r1, r0
    cb24:	010e1019 	tsteq	lr, r9, lsl r0
    cb28:	91020000 	mrsls	r0, (UNDEF: 2)
    cb2c:	4efc1968 	vcvtrmi.u32.f16	s3, s17	; <UNPREDICTABLE>
    cb30:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    cb34:	00010e10 	andeq	r0, r1, r0, lsl lr
    cb38:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    cb3c:	004baf19 	subeq	sl, fp, r9, lsl pc
    cb40:	101a0100 	andsne	r0, sl, r0, lsl #2
    cb44:	00000fa8 	andeq	r0, r0, r8, lsr #31
    cb48:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    cb4c:	00010e07 	andeq	r0, r1, r7, lsl #28
    cb50:	4e9e1e00 	cdpmi	14, 9, cr1, cr14, cr0, {0}
    cb54:	b5010000 	strlt	r0, [r1, #-0]
    cb58:	00011911 	andeq	r1, r1, r1, lsl r9
    cb5c:	00000000 	andeq	r0, r0, r0
    cb60:	00003000 	andeq	r3, r0, r0
    cb64:	d79c0100 	ldrle	r0, [ip, r0, lsl #2]
    cb68:	1900000f 	stmdbne	r0, {r0, r1, r2, r3}
    cb6c:	0000482d 	andeq	r4, r0, sp, lsr #16
    cb70:	1911b701 	ldmdbne	r1, {r0, r8, r9, sl, ip, sp, pc}
    cb74:	02000001 	andeq	r0, r0, #1
    cb78:	25007491 	strcs	r7, [r0, #-1169]	; 0xfffffb6f
    cb7c:	00004c4b 	andeq	r4, r0, fp, asr #24
    cb80:	0711c501 	ldreq	ip, [r1, -r1, lsl #10]
    cb84:	5c000002 	stcpl	0, cr0, [r0], {2}
    cb88:	28080092 	stmdacs	r8, {r1, r4, r7}
    cb8c:	01000000 	mrseq	r0, (UNDEF: 0)
    cb90:	4d1a179c 	ldcmi	7, cr1, [sl, #-624]	; 0xfffffd90
    cb94:	d6010000 	strle	r0, [r1], -r0
    cb98:	0000d111 	andeq	sp, r0, r1, lsl r1
    cb9c:	00000000 	andeq	r0, r0, r0
    cba0:	00009000 	andeq	r9, r0, r0
    cba4:	359c0100 	ldrcc	r0, [ip, #256]	; 0x100
    cba8:	18000010 	stmdane	r0, {r4}
    cbac:	00004ace 	andeq	r4, r0, lr, asr #21
    cbb0:	0311d601 	tsteq	r1, #1048576	; 0x100000
    cbb4:	02000001 	andeq	r0, r0, #1
    cbb8:	22186c91 	andscs	r6, r8, #37120	; 0x9100
    cbbc:	01000051 	qaddeq	r0, r1, r0
    cbc0:	011911d6 			; <UNDEFINED> instruction: 0x011911d6
    cbc4:	91020000 	mrsls	r0, (UNDEF: 2)
    cbc8:	4da31968 			; <UNDEFINED> instruction: 0x4da31968
    cbcc:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    cbd0:	0000d111 	andeq	sp, r0, r1, lsl r1
    cbd4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    cbd8:	4d2b1700 	stcmi	7, cr1, [fp, #-0]
    cbdc:	1a010000 	bne	4cbe4 <_Min_Stack_Size+0x4c9e4>
    cbe0:	00010312 	andeq	r0, r1, r2, lsl r3
    cbe4:	00000000 	andeq	r0, r0, r0
    cbe8:	0000b400 	andeq	fp, r0, r0, lsl #8
    cbec:	9b9c0100 	blls	fe70cff4 <BootRAM+0xd67d795>
    cbf0:	18000010 	stmdane	r0, {r4}
    cbf4:	00004b33 	andeq	r4, r0, r3, lsr fp
    cbf8:	d1121a01 	tstle	r2, r1, lsl #20
    cbfc:	02000000 	andeq	r0, r0, #0
    cc00:	3c186c91 	ldccc	12, cr6, [r8], {145}	; 0x91
    cc04:	01000049 	tsteq	r0, r9, asr #32
    cc08:	00d1121a 	sbcseq	r1, r1, sl, lsl r2
    cc0c:	91020000 	mrsls	r0, (UNDEF: 2)
    cc10:	502e1868 	eorpl	r1, lr, r8, ror #16
    cc14:	1a010000 	bne	4cc1c <_Min_Stack_Size+0x4ca1c>
    cc18:	00109b12 	andseq	r9, r0, r2, lsl fp
    cc1c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    cc20:	00512218 	subseq	r2, r1, r8, lsl r2
    cc24:	121a0100 	andsne	r0, sl, #0, 2
    cc28:	00000119 	andeq	r0, r0, r9, lsl r1
    cc2c:	19609102 	stmdbne	r0!, {r1, r8, ip, pc}^
    cc30:	0000482e 	andeq	r4, r0, lr, lsr #16
    cc34:	03121c01 	tsteq	r2, #256	; 0x100
    cc38:	02000001 	andeq	r0, r0, #1
    cc3c:	06007491 			; <UNDEFINED> instruction: 0x06007491
    cc40:	0000d104 	andeq	sp, r0, r4, lsl #2
    cc44:	4a9f1700 	bmi	fe7d284c <BootRAM+0xd742fed>
    cc48:	6a010000 	bvs	4cc50 <_Min_Stack_Size+0x4ca50>
    cc4c:	00010312 	andeq	r0, r1, r2, lsl r3
    cc50:	00000000 	andeq	r0, r0, r0
    cc54:	00011000 	andeq	r1, r1, r0
    cc58:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    cc5c:	18000011 	stmdane	r0, {r0, r4}
    cc60:	00004ed6 	ldrdeq	r4, [r0], -r6
    cc64:	07126a01 	ldreq	r6, [r2, -r1, lsl #20]
    cc68:	02000002 	andeq	r0, r0, #2
    cc6c:	e6186491 			; <UNDEFINED> instruction: 0xe6186491
    cc70:	0100004f 	tsteq	r0, pc, asr #32
    cc74:	00d1126a 	sbcseq	r1, r1, sl, ror #4
    cc78:	91020000 	mrsls	r0, (UNDEF: 2)
    cc7c:	4e961860 	cdpmi	8, 9, cr1, cr6, cr0, {3}
    cc80:	6a010000 	bvs	4cc88 <_Min_Stack_Size+0x4ca88>
    cc84:	0002d112 	andeq	sp, r2, r2, lsl r1
    cc88:	5f910200 	svcpl	0x00910200
    cc8c:	004e1a18 	subeq	r1, lr, r8, lsl sl
    cc90:	126a0100 	rsbne	r0, sl, #0, 2
    cc94:	0000109b 	muleq	r0, fp, r0
    cc98:	19589102 	ldmdbne	r8, {r1, r8, ip, pc}^
    cc9c:	00005225 	andeq	r5, r0, r5, lsr #4
    cca0:	cf126c01 	svcgt	0x00126c01
    cca4:	02000004 	andeq	r0, r0, #4
    cca8:	2e197091 	mrccs	0, 0, r7, cr9, cr1, {4}
    ccac:	01000048 	tsteq	r0, r8, asr #32
    ccb0:	0103126d 	tsteq	r3, sp, ror #4
    ccb4:	91020000 	mrsls	r0, (UNDEF: 2)
    ccb8:	49cc1974 	stmibmi	ip, {r2, r4, r5, r6, r8, fp, ip}^
    ccbc:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    ccc0:	0000bb12 	andeq	fp, r0, r2, lsl fp
    ccc4:	6f910200 	svcvs	0x00910200
    ccc8:	49f71700 	ldmibmi	r7!, {r8, r9, sl, ip}^
    cccc:	dc010000 	stcle	0, cr0, [r1], {-0}
    ccd0:	00010312 	andeq	r0, r1, r2, lsl r3
    ccd4:	00000000 	andeq	r0, r0, r0
    ccd8:	00014c00 	andeq	r4, r1, r0, lsl #24
    ccdc:	0f9c0100 	svceq	0x009c0100
    cce0:	18000012 	stmdane	r0, {r1, r4}
    cce4:	00004ed6 	ldrdeq	r4, [r0], -r6
    cce8:	0712dc01 	ldreq	sp, [r2, -r1, lsl #24]
    ccec:	02000002 	andeq	r0, r0, #2
    ccf0:	e6185491 			; <UNDEFINED> instruction: 0xe6185491
    ccf4:	0100004f 	tsteq	r0, pc, asr #32
    ccf8:	00d112dc 	ldrsbeq	r1, [r1], #44	; 0x2c
    ccfc:	91020000 	mrsls	r0, (UNDEF: 2)
    cd00:	4e961850 	mrcmi	8, 4, r1, cr6, cr0, {2}
    cd04:	dc010000 	stcle	0, cr0, [r1], {-0}
    cd08:	0002d112 	andeq	sp, r2, r2, lsl r1
    cd0c:	4f910200 	svcmi	0x00910200
    cd10:	004e1a18 	subeq	r1, lr, r8, lsl sl
    cd14:	12dc0100 	sbcsne	r0, ip, #0, 2
    cd18:	0000109b 	muleq	r0, fp, r0
    cd1c:	18489102 	stmdane	r8, {r1, r8, ip, pc}^
    cd20:	000048c2 	andeq	r4, r0, r2, asr #17
    cd24:	0f12dc01 	svceq	0x0012dc01
    cd28:	02000012 	andeq	r0, r0, #18
    cd2c:	25190091 	ldrcs	r0, [r9, #-145]	; 0xffffff6f
    cd30:	01000052 	qaddeq	r0, r2, r0
    cd34:	04cf12de 	strbeq	r1, [pc], #734	; cd3c <_Min_Stack_Size+0xcb3c>
    cd38:	91020000 	mrsls	r0, (UNDEF: 2)
    cd3c:	49cc1970 	stmibmi	ip, {r4, r5, r6, r8, fp, ip}^
    cd40:	df010000 	svcle	0x00010000
    cd44:	0000bb12 	andeq	fp, r0, r2, lsl fp
    cd48:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
    cd4c:	00482e19 	subeq	r2, r8, r9, lsl lr
    cd50:	12e00100 	rscne	r0, r0, #0, 2
    cd54:	00000103 	andeq	r0, r0, r3, lsl #2
    cd58:	19749102 	ldmdbne	r4!, {r1, r8, ip, pc}^
    cd5c:	0000487b 	andeq	r4, r0, fp, ror r8
    cd60:	0e12e101 	mnfeqs	f6, f1
    cd64:	02000001 	andeq	r0, r0, #1
    cd68:	901f6891 	mulsls	pc, r1, r8	; <UNPREDICTABLE>
    cd6c:	00000003 	andeq	r0, r0, r3
    cd70:	1a000000 	bne	cd78 <_Min_Stack_Size+0xcb78>
    cd74:	01000000 	mrseq	r0, (UNDEF: 0)
    cd78:	11f512f9 	ldrshne	r1, [r5, #41]!	; 0x29
    cd7c:	001a0000 	andseq	r0, sl, r0
    cd80:	1a000000 	bne	cd88 <_Min_Stack_Size+0xcb88>
    cd84:	20000000 	andcs	r0, r0, r0
    cd88:	000003a0 	andeq	r0, r0, r0, lsr #7
    cd8c:	20609102 	rsbcs	r9, r0, r2, lsl #2
    cd90:	000003ab 	andeq	r0, r0, fp, lsr #7
    cd94:	005c9102 	subseq	r9, ip, r2, lsl #2
    cd98:	03b72100 			; <UNDEFINED> instruction: 0x03b72100
    cd9c:	00000000 	andeq	r0, r0, r0
    cda0:	00060000 	andeq	r0, r6, r0
    cda4:	53010000 	movwpl	r0, #4096	; 0x1000
    cda8:	03c32213 	biceq	r2, r3, #805306369	; 0x30000001
    cdac:	91020000 	mrsls	r0, (UNDEF: 2)
    cdb0:	0600006c 	streq	r0, [r0], -ip, rrx
    cdb4:	00010304 	andeq	r0, r1, r4, lsl #6
    cdb8:	4f801d00 	svcmi	0x00801d00
    cdbc:	5d010000 	stcpl	0, cr0, [r1, #-0]
    cdc0:	00000013 	andeq	r0, r0, r3, lsl r0
    cdc4:	0000e400 	andeq	lr, r0, r0, lsl #8
    cdc8:	bf9c0100 	svclt	0x009c0100
    cdcc:	18000012 	stmdane	r0, {r1, r4}
    cdd0:	00004ed6 	ldrdeq	r4, [r0], -r6
    cdd4:	07135d01 	ldreq	r5, [r3, -r1, lsl #26]
    cdd8:	02000002 	andeq	r0, r0, #2
    cddc:	c2185c91 	andsgt	r5, r8, #37120	; 0x9100
    cde0:	01000048 	tsteq	r0, r8, asr #32
    cde4:	120f135d 	andne	r1, pc, #1946157057	; 0x74000001
    cde8:	91020000 	mrsls	r0, (UNDEF: 2)
    cdec:	52251958 	eorpl	r1, r5, #88, 18	; 0x160000
    cdf0:	5f010000 	svcpl	0x00010000
    cdf4:	0004cf13 	andeq	ip, r4, r3, lsl pc
    cdf8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    cdfc:	0049cc19 	subeq	ip, r9, r9, lsl ip
    ce00:	13600100 	cmnne	r0, #0, 2
    ce04:	000000bb 	strheq	r0, [r0], -fp
    ce08:	196b9102 	stmdbne	fp!, {r1, r8, ip, pc}^
    ce0c:	0000487b 	andeq	r4, r0, fp, ror r8
    ce10:	0e136101 	mufeqs	f6, f3, f1
    ce14:	02000001 	andeq	r0, r0, #1
    ce18:	901f6c91 	mulsls	pc, r1, ip	; <UNPREDICTABLE>
    ce1c:	00000003 	andeq	r0, r0, r3
    ce20:	1a000000 	bne	ce28 <_Min_Stack_Size+0xcc28>
    ce24:	01000000 	mrseq	r0, (UNDEF: 0)
    ce28:	12a51379 	adcne	r1, r5, #-469762047	; 0xe4000001
    ce2c:	001a0000 	andseq	r0, sl, r0
    ce30:	1a000000 	bne	ce38 <_Min_Stack_Size+0xcc38>
    ce34:	20000000 	andcs	r0, r0, r0
    ce38:	000003a0 	andeq	r0, r0, r0, lsr #7
    ce3c:	20649102 	rsbcs	r9, r4, r2, lsl #2
    ce40:	000003ab 	andeq	r0, r0, fp, lsr #7
    ce44:	00609102 	rsbeq	r9, r0, r2, lsl #2
    ce48:	03b72100 			; <UNDEFINED> instruction: 0x03b72100
    ce4c:	00000000 	andeq	r0, r0, r0
    ce50:	00060000 	andeq	r0, r6, r0
    ce54:	ab010000 	blge	4ce5c <_Min_Stack_Size+0x4cc5c>
    ce58:	03c32213 	biceq	r2, r3, #805306369	; 0x30000001
    ce5c:	91020000 	mrsls	r0, (UNDEF: 2)
    ce60:	17000070 	smlsdxne	r0, r0, r0, r0
    ce64:	0000510b 	andeq	r5, r0, fp, lsl #2
    ce68:	0313b401 	tsteq	r3, #16777216	; 0x1000000
    ce6c:	00000001 	andeq	r0, r0, r1
    ce70:	4c000000 	stcmi	0, cr0, [r0], {-0}
    ce74:	01000000 	mrseq	r0, (UNDEF: 0)
    ce78:	0013079c 	mulseq	r3, ip, r7
    ce7c:	3ed11800 	cdpcc	8, 13, cr1, cr1, cr0, {0}
    ce80:	b4010000 	strlt	r0, [r1], #-0
    ce84:	00020713 	andeq	r0, r2, r3, lsl r7
    ce88:	6c910200 	lfmvs	f0, 4, [r1], {0}
    ce8c:	00522519 	subseq	r2, r2, r9, lsl r5
    ce90:	13b60100 			; <UNDEFINED> instruction: 0x13b60100
    ce94:	000004cf 	andeq	r0, r0, pc, asr #9
    ce98:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
    ce9c:	0000482e 	andeq	r4, r0, lr, lsr #16
    cea0:	0313b701 	tsteq	r3, #262144	; 0x40000
    cea4:	02000001 	andeq	r0, r0, #1
    cea8:	1b007491 	blne	2a0f4 <_Min_Stack_Size+0x29ef4>
    ceac:	000051b8 			; <UNDEFINED> instruction: 0x000051b8
    ceb0:	8413d901 	ldrhi	sp, [r3], #-2305	; 0xfffff6ff
    ceb4:	cc080092 	stcgt	0, cr0, [r8], {146}	; 0x92
    ceb8:	01000000 	mrseq	r0, (UNDEF: 0)
    cebc:	00135a9c 	mulseq	r3, ip, sl
    cec0:	51221800 			; <UNDEFINED> instruction: 0x51221800
    cec4:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    cec8:	00011913 	andeq	r1, r1, r3, lsl r9
    cecc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    ced0:	0050b118 	subseq	fp, r0, r8, lsl r1
    ced4:	13d90100 	bicsne	r0, r9, #0, 2
    ced8:	0000135a 	andeq	r1, r0, sl, asr r3
    cedc:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
    cee0:	0000520a 	andeq	r5, r0, sl, lsl #4
    cee4:	1913db01 	ldmdbne	r3, {r0, r8, r9, fp, ip, lr, pc}
    cee8:	02000001 	andeq	r0, r0, #1
    ceec:	e6197091 			; <UNDEFINED> instruction: 0xe6197091
    cef0:	0100004b 	tsteq	r0, fp, asr #32
    cef4:	064113dc 			; <UNDEFINED> instruction: 0x064113dc
    cef8:	91020000 	mrsls	r0, (UNDEF: 2)
    cefc:	03070074 	movweq	r0, #28788	; 0x7074
    cf00:	10000001 	andne	r0, r0, r1
    cf04:	000001fc 	strdeq	r0, [r0], -ip
    cf08:	0000136f 	andeq	r1, r0, pc, ror #6
    cf0c:	00009a11 	andeq	r9, r0, r1, lsl sl
    cf10:	19000400 	stmdbne	r0, {sl}
    cf14:	000049ba 			; <UNDEFINED> instruction: 0x000049ba
    cf18:	5f015401 	svcpl	0x00015401
    cf1c:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    cf20:	00015403 	andeq	r5, r1, r3, lsl #8
    cf24:	4a2d1920 	bmi	b533ac <_Min_Stack_Size+0xb531ac>
    cf28:	55010000 	strpl	r0, [r1, #-0]
    cf2c:	0001fc01 	andeq	pc, r1, r1, lsl #24
    cf30:	b8030500 	stmdalt	r3, {r8, sl}
    cf34:	19200001 	stmdbne	r0!, {r0}
    cf38:	00004a3f 	andeq	r4, r0, pc, lsr sl
    cf3c:	fc015601 	stc2	6, cr5, [r1], {1}
    cf40:	05000001 	streq	r0, [r0, #-1]
    cf44:	0001cc03 	andeq	ip, r1, r3, lsl #24
    cf48:	4f971920 	svcmi	0x00971920
    cf4c:	57010000 	strpl	r0, [r1, -r0]
    cf50:	0013b701 	andseq	fp, r3, r1, lsl #14
    cf54:	e0030500 	and	r0, r3, r0, lsl #10
    cf58:	0c200001 	stceq	0, cr0, [r0], #-4
    cf5c:	00000b51 	andeq	r0, r0, r1, asr fp
    cf60:	004c0919 	subeq	r0, ip, r9, lsl r9
    cf64:	01580100 	cmpeq	r8, r0, lsl #2
    cf68:	000013b7 			; <UNDEFINED> instruction: 0x000013b7
    cf6c:	01e40305 	mvneq	r0, r5, lsl #6
    cf70:	48192000 	ldmdami	r9, {sp}
    cf74:	0100004b 	tsteq	r0, fp, asr #32
    cf78:	01fc0159 	mvnseq	r0, r9, asr r1
    cf7c:	03050000 	movweq	r0, #20480	; 0x5000
    cf80:	200001e8 	andcs	r0, r0, r8, ror #3
    cf84:	004bf619 	subeq	pc, fp, r9, lsl r6	; <UNPREDICTABLE>
    cf88:	01640100 	cmneq	r4, r0, lsl #2
    cf8c:	000001fc 	strdeq	r0, [r0], -ip
    cf90:	01fc0305 	mvnseq	r0, r5, lsl #6
    cf94:	e4192000 	ldr	r2, [r9], #-0
    cf98:	01000051 	qaddeq	r0, r1, r0
    cf9c:	01f1016f 	mvnseq	r0, pc, ror #2
    cfa0:	03050000 	movweq	r0, #20480	; 0x5000
    cfa4:	20000210 	andcs	r0, r0, r0, lsl r2
    cfa8:	004d9819 	subeq	r9, sp, r9, lsl r8
    cfac:	01700100 	cmneq	r0, r0, lsl #2
    cfb0:	00001416 	andeq	r1, r0, r6, lsl r4
    cfb4:	02140305 	andseq	r0, r4, #335544320	; 0x14000000
    cfb8:	190c2000 	stmdbne	ip, {sp}
    cfbc:	19000001 	stmdbne	r0, {r0}
    cfc0:	0000497d 	andeq	r4, r0, sp, ror r9
    cfc4:	f1017101 			; <UNDEFINED> instruction: 0xf1017101
    cfc8:	05000001 	streq	r0, [r0, #-1]
    cfcc:	00021803 	andeq	r1, r2, r3, lsl #16
    cfd0:	499c1920 	ldmibmi	ip, {r5, r8, fp, ip}
    cfd4:	72010000 	andvc	r0, r1, #0
    cfd8:	00143f01 	andseq	r3, r4, r1, lsl #30
    cfdc:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    cfe0:	0c200002 	stceq	0, cr0, [r0], #-8
    cfe4:	00000103 	andeq	r0, r0, r3, lsl #2
    cfe8:	00505419 	subseq	r5, r0, r9, lsl r4
    cfec:	01730100 	cmneq	r3, r0, lsl #2
    cff0:	000001f1 	strdeq	r0, [r0], -r1
    cff4:	02200305 	eoreq	r0, r0, #335544320	; 0x14000000
    cff8:	c4192000 	ldrgt	r2, [r9], #-0
    cffc:	01000052 	qaddeq	r0, r2, r0
    d000:	143f0174 	ldrtne	r0, [pc], #-372	; d008 <_Min_Stack_Size+0xce08>
    d004:	03050000 	movweq	r0, #20480	; 0x5000
    d008:	20000224 	andcs	r0, r0, r4, lsr #4
    d00c:	004f1f19 	subeq	r1, pc, r9, lsl pc	; <UNPREDICTABLE>
    d010:	01750100 	cmneq	r5, r0, lsl #2
    d014:	0000143f 	andeq	r1, r0, pc, lsr r4
    d018:	02280305 	eoreq	r0, r8, #335544320	; 0x14000000
    d01c:	89192000 	ldmdbhi	r9, {sp}
    d020:	0100004e 	tsteq	r0, lr, asr #32
    d024:	010e0176 	tsteq	lr, r6, ror r1
    d028:	03050000 	movweq	r0, #20480	; 0x5000
    d02c:	2000022c 	andcs	r0, r0, ip, lsr #4
    d030:	004d8319 	subeq	r8, sp, r9, lsl r3
    d034:	01770100 	cmneq	r7, r0, lsl #2
    d038:	00001416 	andeq	r1, r0, r6, lsl r4
    d03c:	02300305 	eorseq	r0, r0, #335544320	; 0x14000000
    d040:	2f192000 	svccs	0x00192000
    d044:	0100004f 	tsteq	r0, pc, asr #32
    d048:	02070178 	andeq	r0, r7, #120, 2
    d04c:	03050000 	movweq	r0, #20480	; 0x5000
    d050:	20000234 	andcs	r0, r0, r4, lsr r2
    d054:	00522b19 	subseq	r2, r2, r9, lsl fp
    d058:	01820100 	orreq	r0, r2, r0, lsl #2
    d05c:	000001f1 	strdeq	r0, [r0], -r1
    d060:	02380305 	eorseq	r0, r8, #335544320	; 0x14000000
    d064:	d72a2000 	strle	r2, [sl, -r0]!
    d068:	01000051 	qaddeq	r0, r1, r0
    d06c:	14d4014e 	ldrbne	r0, [r4], #334	; 0x14e
    d070:	03050000 	movweq	r0, #20480	; 0x5000
    d074:	20000150 	andcs	r0, r0, r0, asr r1
    d078:	0004cf0c 	andeq	ip, r4, ip, lsl #30
    d07c:	02de0000 	sbcseq	r0, lr, #0
    d080:	00040000 	andeq	r0, r4, r0
    d084:	000028cd 	andeq	r2, r0, sp, asr #17
    d088:	01110104 	tsteq	r1, r4, lsl #2
    d08c:	540c0000 	strpl	r0, [ip], #-0
    d090:	70000053 	andvc	r0, r0, r3, asr r0
    d094:	0000000f 	andeq	r0, r0, pc
    d098:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    d09c:	0200005b 	andeq	r0, r0, #91	; 0x5b
    d0a0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    d0a4:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
    d0a8:	0001ce07 	andeq	ip, r1, r7, lsl #28
    d0ac:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
    d0b0:	000000b8 	strheq	r0, [r0], -r8
    d0b4:	f8040803 			; <UNDEFINED> instruction: 0xf8040803
    d0b8:	03000002 	movweq	r0, #2
    d0bc:	01920601 	orrseq	r0, r2, r1, lsl #12
    d0c0:	01030000 	mrseq	r0, (UNDEF: 3)
    d0c4:	00019008 	andeq	r9, r1, r8
    d0c8:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    d0cc:	00000095 	muleq	r0, r5, r0
    d0d0:	f2070203 	vhsub.s8	d0, d7, d3
    d0d4:	03000001 	movweq	r0, #1
    d0d8:	00bd0504 	adcseq	r0, sp, r4, lsl #10
    d0dc:	67040000 	strvs	r0, [r4, -r0]
    d0e0:	03000000 	movweq	r0, #0
    d0e4:	00006b41 	andeq	r6, r0, r1, asr #22
    d0e8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    d0ec:	000001c9 	andeq	r0, r0, r9, asr #3
    d0f0:	c4070803 	strgt	r0, [r7], #-2051	; 0xfffff7fd
    d0f4:	04000001 	streq	r0, [r0], #-1
    d0f8:	00000069 	andeq	r0, r0, r9, rrx
    d0fc:	00603004 	rsbeq	r3, r0, r4
    d100:	0b040000 	bleq	10d108 <_Min_Stack_Size+0x10cf08>
    d104:	0500004e 	streq	r0, [r0, #-78]	; 0xffffffb2
    d108:	00008f23 	andeq	r8, r0, r3, lsr #30
    d10c:	95040500 	strls	r0, [r4, #-1280]	; 0xfffffb00
    d110:	06000000 	streq	r0, [r0], -r0
    d114:	000000a0 	andeq	r0, r0, r0, lsr #1
    d118:	0000a007 	andeq	sl, r0, r7
    d11c:	04080000 	streq	r0, [r8], #-0
    d120:	0049ae04 	subeq	sl, r9, r4, lsl #28
    d124:	79370200 	ldmdbvc	r7!, {r9}
    d128:	04000000 	streq	r0, [r0], #-0
    d12c:	000040a7 	andeq	r4, r0, r7, lsr #1
    d130:	00593802 	subseq	r3, r9, r2, lsl #16
    d134:	a6040000 	strge	r0, [r4], -r0
    d138:	02000040 	andeq	r0, r0, #64	; 0x40
    d13c:	00006b39 	andeq	r6, r0, r9, lsr fp
    d140:	3eab0400 	cdpcc	4, 10, cr0, cr11, cr0, {0}
    d144:	3f020000 	svccc	0x00020000
    d148:	00000079 	andeq	r0, r0, r9, ror r0
    d14c:	59070403 	stmdbpl	r7, {r0, r1, sl}
    d150:	03000000 	movweq	r0, #0
    d154:	01990801 	orrseq	r0, r9, r1, lsl #16
    d158:	04050000 	streq	r0, [r5], #-0
    d15c:	000000a2 	andeq	r0, r0, r2, lsr #1
    d160:	003f5709 	eorseq	r5, pc, r9, lsl #14
    d164:	03bf0200 			; <UNDEFINED> instruction: 0x03bf0200
    d168:	000000fa 	strdeq	r0, [r0], -sl
    d16c:	003df50a 	eorseq	pc, sp, sl, lsl #10
    d170:	79c10200 	stmibvc	r1, {r9}^
    d174:	00000000 	andeq	r0, r0, r0
    d178:	00455609 	subeq	r5, r5, r9, lsl #12
    d17c:	03e30200 	mvneq	r0, #0, 4
    d180:	00000112 	andeq	r0, r0, r2, lsl r1
    d184:	0047f00b 	subeq	pc, r7, fp
    d188:	79e30200 	stmibvc	r3!, {r9}^
    d18c:	00000000 	andeq	r0, r0, r0
    d190:	00532a0c 	subseq	r2, r3, ip, lsl #20
    d194:	dcae0100 	stfles	f0, [lr]
    d198:	50000000 	andpl	r0, r0, r0
    d19c:	58080093 	stmdapl	r8, {r0, r1, r4, r7}
    d1a0:	01000000 	mrseq	r0, (UNDEF: 0)
    d1a4:	0001569c 	muleq	r1, ip, r6
    d1a8:	52400d00 	subpl	r0, r0, #0, 26
    d1ac:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    d1b0:	000000dc 	ldrdeq	r0, [r0], -ip
    d1b4:	0d749102 	ldfeqp	f1, [r4, #-8]!
    d1b8:	000052e5 	andeq	r5, r0, r5, ror #5
    d1bc:	0084ae01 	addeq	sl, r4, r1, lsl #28
    d1c0:	91020000 	mrsls	r0, (UNDEF: 2)
    d1c4:	3f090d70 	svccc	0x00090d70
    d1c8:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    d1cc:	000000a0 	andeq	r0, r0, r0, lsr #1
    d1d0:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    d1d4:	0053110e 	subseq	r1, r3, lr, lsl #2
    d1d8:	a8c00100 	stmiage	r0, {r8}^
    d1dc:	2e080093 	mcrcs	0, 0, r0, cr8, cr3, {4}
    d1e0:	01000000 	mrseq	r0, (UNDEF: 0)
    d1e4:	00019c9c 	muleq	r1, ip, ip
    d1e8:	53220f00 			; <UNDEFINED> instruction: 0x53220f00
    d1ec:	c2010000 	andgt	r0, r1, #0
    d1f0:	0000019c 	muleq	r0, ip, r1
    d1f4:	10709102 	rsbsne	r9, r0, r2, lsl #2
    d1f8:	000000e2 	andeq	r0, r0, r2, ror #1
    d1fc:	080093b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, ip, pc}
    d200:	00000012 	andeq	r0, r0, r2, lsl r0
    d204:	b211cb01 	andslt	ip, r1, #1024	; 0x400
    d208:	12080093 	andne	r0, r8, #147	; 0x93
    d20c:	12000000 	andne	r0, r0, #0
    d210:	000000ee 	andeq	r0, r0, lr, ror #1
    d214:	00749102 	rsbseq	r9, r4, r2, lsl #2
    d218:	79130000 	ldmdbvc	r3, {}	; <UNPREDICTABLE>
    d21c:	14000000 	strne	r0, [r0], #-0
    d220:	000053b6 			; <UNDEFINED> instruction: 0x000053b6
    d224:	93e0d901 	mvnls	sp, #16384	; 0x4000
    d228:	00260800 	eoreq	r0, r6, r0, lsl #16
    d22c:	9c010000 	stcls	0, cr0, [r1], {-0}
    d230:	0053d815 	subseq	sp, r3, r5, lsl r8
    d234:	08ed0100 	stmiaeq	sp!, {r8}^
    d238:	1c080094 	stcne	0, cr0, [r8], {148}	; 0x94
    d23c:	01000000 	mrseq	r0, (UNDEF: 0)
    d240:	53ee169c 	mvnpl	r1, #156, 12	; 0x9c00000
    d244:	01010000 	mrseq	r0, (UNDEF: 1)
    d248:	0000ad01 	andeq	sl, r0, r1, lsl #26
    d24c:	00942800 	addseq	r2, r4, r0, lsl #16
    d250:	00004008 	andeq	r4, r0, r8
    d254:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    d258:	000052ec 	andeq	r5, r0, ip, ror #5
    d25c:	00016101 	andeq	r6, r1, r1, lsl #2
    d260:	0c000000 	stceq	0, cr0, [r0], {-0}
    d264:	01000000 	mrseq	r0, (UNDEF: 0)
    d268:	52d2189c 	sbcspl	r1, r2, #156, 16	; 0x9c0000
    d26c:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    d270:	00946801 	addseq	r6, r4, r1, lsl #16
    d274:	00003008 	andeq	r3, r0, r8
    d278:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    d27c:	19000002 	stmdbne	r0, {r1}
    d280:	000000e2 	andeq	r0, r0, r2, ror #1
    d284:	0800946e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, pc}
    d288:	00000012 	andeq	r0, r0, r2, lsl r0
    d28c:	11016b01 	tstne	r1, r1, lsl #22
    d290:	0800946e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, pc}
    d294:	00000012 	andeq	r0, r0, r2, lsl r0
    d298:	0000ee12 	andeq	lr, r0, r2, lsl lr
    d29c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    d2a0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    d2a4:	000053c6 	andeq	r5, r0, r6, asr #7
    d2a8:	98017a01 	stmdals	r1, {r0, r9, fp, ip, sp, lr}
    d2ac:	30080094 	mulcc	r8, r4, r0
    d2b0:	01000000 	mrseq	r0, (UNDEF: 0)
    d2b4:	0002559c 	muleq	r2, ip, r5
    d2b8:	00fa1900 	rscseq	r1, sl, r0, lsl #18
    d2bc:	94b40000 	ldrtls	r0, [r4], #0
    d2c0:	00060800 	andeq	r0, r6, r0, lsl #16
    d2c4:	80010000 	andhi	r0, r1, r0
    d2c8:	01061a01 	tsteq	r6, r1, lsl #20
    d2cc:	91020000 	mrsls	r0, (UNDEF: 2)
    d2d0:	17000074 	smlsdxne	r0, r4, r0, r0
    d2d4:	000052fe 	strdeq	r5, [r0], -lr
    d2d8:	d0018501 	andle	r8, r1, r1, lsl #10
    d2dc:	46080094 			; <UNDEFINED> instruction: 0x46080094
    d2e0:	01000000 	mrseq	r0, (UNDEF: 0)
    d2e4:	53401b9c 	movtpl	r1, #2972	; 0xb9c
    d2e8:	aa010000 	bge	4d2f0 <_Min_Stack_Size+0x4d0f0>
    d2ec:	00951801 	addseq	r1, r5, r1, lsl #16
    d2f0:	00004008 	andeq	r4, r0, r8
    d2f4:	be9c0100 	fmllte	f0, f4, f0
    d2f8:	1c000002 	stcne	0, cr0, [r0], {2}
    d2fc:	000000e2 	andeq	r0, r0, r2, ror #1
    d300:	0800951e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, ip, pc}
    d304:	00000012 	andeq	r0, r0, r2, lsl r0
    d308:	a401b001 	strge	fp, [r1], #-1
    d30c:	11000002 	tstne	r0, r2
    d310:	0800951e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, ip, pc}
    d314:	00000012 	andeq	r0, r0, r2, lsl r0
    d318:	0000ee12 	andeq	lr, r0, r2, lsl lr
    d31c:	70910200 	addsvc	r0, r1, r0, lsl #4
    d320:	fa190000 	blx	64d328 <_Min_Stack_Size+0x64d128>
    d324:	46000000 	strmi	r0, [r0], -r0
    d328:	06080095 			; <UNDEFINED> instruction: 0x06080095
    d32c:	01000000 	mrseq	r0, (UNDEF: 0)
    d330:	061a01ba 			; <UNDEFINED> instruction: 0x061a01ba
    d334:	02000001 	andeq	r0, r0, #1
    d338:	00007491 	muleq	r0, r1, r4
    d33c:	00539d17 	subseq	r9, r3, r7, lsl sp
    d340:	02690100 	rsbeq	r0, r9, #0, 2
    d344:	08009558 	stmdaeq	r0, {r3, r4, r6, r8, sl, ip, pc}
    d348:	00000034 	andeq	r0, r0, r4, lsr r0
    d34c:	8b0f9c01 	blhi	3f4358 <_Min_Stack_Size+0x3f4158>
    d350:	01000053 	qaddeq	r0, r3, r0
    d354:	0000b885 	andeq	fp, r0, r5, lsl #17
    d358:	e8030500 	stmda	r3, {r8, sl}
    d35c:	00200000 	eoreq	r0, r0, r0
    d360:	0000017b 	andeq	r0, r0, fp, ror r1
    d364:	2a840004 	bcs	fe10d37c <BootRAM+0xd07db1d>
    d368:	01040000 	mrseq	r0, (UNDEF: 4)
    d36c:	00000111 	andeq	r0, r0, r1, lsl r1
    d370:	0054020c 	subseq	r0, r4, ip, lsl #4
    d374:	000fd000 	andeq	sp, pc, r0
    d378:	00000000 	andeq	r0, r0, r0
    d37c:	005df100 	subseq	pc, sp, r0, lsl #2
    d380:	5cec0200 	sfmpl	f0, 2, [ip]
    d384:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
    d388:	0000002c 	andeq	r0, r0, ip, lsr #32
    d38c:	ce070403 	cdpgt	4, 0, cr0, cr7, cr3, {0}
    d390:	04000001 	streq	r0, [r0], #-1
    d394:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    d398:	08030074 	stmdaeq	r3, {r2, r4, r5, r6}
    d39c:	0000b805 	andeq	fp, r0, r5, lsl #16
    d3a0:	04080300 	streq	r0, [r8], #-768	; 0xfffffd00
    d3a4:	000002f8 	strdeq	r0, [r0], -r8
    d3a8:	92060103 	andls	r0, r6, #-1073741824	; 0xc0000000
    d3ac:	02000001 	andeq	r0, r0, #1
    d3b0:	000000e3 	andeq	r0, r0, r3, ror #1
    d3b4:	005a1d03 	subseq	r1, sl, r3, lsl #26
    d3b8:	01030000 	mrseq	r0, (UNDEF: 3)
    d3bc:	00019008 	andeq	r9, r1, r8
    d3c0:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    d3c4:	00000095 	muleq	r0, r5, r0
    d3c8:	f2070203 	vhsub.s8	d0, d7, d3
    d3cc:	03000001 	movweq	r0, #1
    d3d0:	00bd0504 	adcseq	r0, sp, r4, lsl #10
    d3d4:	67020000 	strvs	r0, [r2, -r0]
    d3d8:	03000000 	movweq	r0, #0
    d3dc:	00008141 	andeq	r8, r0, r1, asr #2
    d3e0:	07040300 	streq	r0, [r4, -r0, lsl #6]
    d3e4:	000001c9 	andeq	r0, r0, r9, asr #3
    d3e8:	c4070803 	strgt	r0, [r7], #-2051	; 0xfffff7fd
    d3ec:	03000001 	movweq	r0, #1
    d3f0:	00590704 	subseq	r0, r9, r4, lsl #14
    d3f4:	04050000 	streq	r0, [r5], #-0
    d3f8:	99080103 	stmdbls	r8, {r0, r1, r8}
    d3fc:	02000001 	andeq	r0, r0, #1
    d400:	000000e5 	andeq	r0, r0, r5, ror #1
    d404:	004f1804 	subeq	r1, pc, r4, lsl #16
    d408:	69020000 	stmdbvs	r2, {}	; <UNPREDICTABLE>
    d40c:	04000000 	streq	r0, [r0], #-0
    d410:	00007630 	andeq	r7, r0, r0, lsr r6
    d414:	9f040600 	svcls	0x00040600
    d418:	07000000 	streq	r0, [r0, -r0]
    d41c:	00005488 	andeq	r5, r0, r8, lsl #9
    d420:	00964501 	addseq	r4, r6, r1, lsl #10
    d424:	958c0000 	strls	r0, [ip]
    d428:	008c0800 	addeq	r0, ip, r0, lsl #16
    d42c:	9c010000 	stcls	0, cr0, [r1], {-0}
    d430:	00000102 	andeq	r0, r0, r2, lsl #2
    d434:	00549c08 	subseq	r9, r4, r8, lsl #24
    d438:	21450100 	mrscs	r0, (UNDEF: 85)
    d43c:	02000000 	andeq	r0, r0, #0
    d440:	62096c91 	andvs	r6, r9, #37120	; 0x9100
    d444:	01000054 	qaddeq	r0, r4, r0
    d448:	00009647 	andeq	r9, r0, r7, asr #12
    d44c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    d450:	00547909 	subseq	r7, r4, r9, lsl #18
    d454:	b5480100 	strblt	r0, [r8, #-256]	; 0xffffff00
    d458:	05000000 	streq	r0, [r0, #-0]
    d45c:	00364003 	eorseq	r4, r6, r3
    d460:	a80a0020 	stmdage	sl, {r5}
    d464:	01000054 	qaddeq	r0, r4, r0
    d468:	00961879 	addseq	r1, r6, r9, ror r8
    d46c:	00001208 	andeq	r1, r0, r8, lsl #4
    d470:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    d474:	0b000001 	bleq	d480 <_Min_Stack_Size+0xd280>
    d478:	01007670 	tsteq	r0, r0, ror r6
    d47c:	00009679 	andeq	r9, r0, r9, ror r6
    d480:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    d484:	54370c00 	ldrtpl	r0, [r7], #-3072	; 0xfffff400
    d488:	85010000 	strhi	r0, [r1, #-0]
    d48c:	00000000 	andeq	r0, r0, r0
    d490:	00000018 	andeq	r0, r0, r8, lsl r0
    d494:	4d0d9c01 	stcmi	12, cr9, [sp, #-4]
    d498:	01000054 	qaddeq	r0, r4, r0
    d49c:	0000218c 	andeq	r2, r0, ip, lsl #3
    d4a0:	00000000 	andeq	r0, r0, r0
    d4a4:	00001c00 	andeq	r1, r0, r0, lsl #24
    d4a8:	0e9c0100 	fmleqe	f0, f4, f0
    d4ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    d4b0:	0000015c 	andeq	r0, r0, ip, asr r1
    d4b4:	00008f0f 	andeq	r8, r0, pc, lsl #30
    d4b8:	0033ff00 	eorseq	pc, r3, r0, lsl #30
    d4bc:	00549509 	subseq	r9, r4, r9, lsl #10
    d4c0:	4b3d0100 	blmi	f4d8c8 <_Min_Stack_Size+0xf4d6c8>
    d4c4:	05000001 	streq	r0, [r0, #-1]
    d4c8:	00023c03 	andeq	r3, r2, r3, lsl #24
    d4cc:	546b0920 	strbtpl	r0, [fp], #-2336	; 0xfffff6e0
    d4d0:	41010000 	mrsmi	r0, (UNDEF: 1)
    d4d4:	00000021 	andeq	r0, r0, r1, lsr #32
    d4d8:	363c0305 	ldrtcc	r0, [ip], -r5, lsl #6
    d4dc:	c3002000 	movwgt	r2, #0
    d4e0:	02000000 	andeq	r0, r0, #0
    d4e4:	002b7000 	eoreq	r7, fp, r0
    d4e8:	2d010400 	cfstrscs	mvf0, [r1, #-0]
    d4ec:	1000005f 	andne	r0, r0, pc, asr r0
    d4f0:	fc080001 	stc2	0, cr0, [r8], {1}
    d4f4:	2e080001 	cdpcs	0, 0, cr0, cr8, cr1, {0}
    d4f8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    d4fc:	2f2e2e2f 	svccs	0x002e2e2f
    d500:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    d504:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    d508:	2f2e2e2f 	svccs	0x002e2e2f
    d50c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    d510:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; d374 <_Min_Stack_Size+0xd174>
    d514:	2f636269 	svccs	0x00636269
    d518:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    d51c:	2f656e69 	svccs	0x00656e69
    d520:	2f6d7261 	svccs	0x006d7261
    d524:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    d528:	612d7970 			; <UNDEFINED> instruction: 0x612d7970
    d52c:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    d530:	00532e6d 	subseq	r2, r3, sp, ror #28
    d534:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    d538:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    d53c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    d540:	41582d62 	cmpmi	r8, r2, ror #26
    d544:	50317a75 	eorspl	r7, r1, r5, ror sl
    d548:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    d54c:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    d550:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    d554:	30322e30 	eorscc	r2, r2, r0, lsr lr
    d558:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    d55c:	622f3732 	eorvs	r3, pc, #13107200	; 0xc80000
    d560:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    d564:	6e616e5f 	mcrvs	14, 3, r6, cr1, cr15, {2}
    d568:	72612f6f 	rsbvc	r2, r1, #444	; 0x1bc
    d56c:	6f6e2d6d 	svcvs	0x006e2d6d
    d570:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    d574:	2f696261 	svccs	0x00696261
    d578:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    d57c:	2f6d2d37 	svccs	0x006d2d37
    d580:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    d584:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; d3e8 <_Min_Stack_Size+0xd1e8>
    d588:	2f636269 	svccs	0x00636269
    d58c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    d590:	2f656e69 	svccs	0x00656e69
    d594:	006d7261 	rsbeq	r7, sp, r1, ror #4
    d598:	20554e47 	subscs	r4, r5, r7, asr #28
    d59c:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
    d5a0:	0037322e 	eorseq	r3, r7, lr, lsr #4
    d5a4:	011a8001 	tsteq	sl, r1
    d5a8:	00040000 	andeq	r0, r4, r0
    d5ac:	00002b84 	andeq	r2, r0, r4, lsl #23
    d5b0:	54bf0104 	ldrtpl	r0, [pc], #260	; d5b8 <_Min_Stack_Size+0xd3b8>
    d5b4:	770c0000 	strvc	r0, [ip, -r0]
    d5b8:	18000055 	stmdane	r0, {r0, r2, r4, r6}
    d5bc:	fc000055 	stc2	0, cr0, [r0], {85}	; 0x55
    d5c0:	9a080001 	bls	20d5cc <_Min_Stack_Size+0x20d3cc>
    d5c4:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    d5c8:	0200005f 	andeq	r0, r0, #95	; 0x5f
    d5cc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    d5d0:	ec030074 	stc	0, cr0, [r3], {116}	; 0x74
    d5d4:	0200005c 	andeq	r0, r0, #92	; 0x5c
    d5d8:	000037d8 	ldrdeq	r3, [r0], -r8
    d5dc:	07040400 	streq	r0, [r4, -r0, lsl #8]
    d5e0:	000001ce 	andeq	r0, r0, lr, asr #3
    d5e4:	b8050804 	stmdalt	r5, {r2, fp}
    d5e8:	04000000 	streq	r0, [r0], #-0
    d5ec:	02f80408 	rscseq	r0, r8, #8, 8	; 0x8000000
    d5f0:	01040000 	mrseq	r0, (UNDEF: 4)
    d5f4:	00019206 	andeq	r9, r1, r6, lsl #4
    d5f8:	08010400 	stmdaeq	r1, {sl}
    d5fc:	00000190 	muleq	r0, r0, r1
    d600:	95050204 	strls	r0, [r5, #-516]	; 0xfffffdfc
    d604:	04000000 	streq	r0, [r0], #-0
    d608:	01f20702 	mvnseq	r0, r2, lsl #14
    d60c:	04040000 	streq	r0, [r4], #-0
    d610:	0000bd05 	andeq	fp, r0, r5, lsl #26
    d614:	07040400 	streq	r0, [r4, -r0, lsl #8]
    d618:	000001c9 	andeq	r0, r0, r9, asr #3
    d61c:	c4070804 	strgt	r0, [r7], #-2052	; 0xfffff7fc
    d620:	04000001 	streq	r0, [r0], #-1
    d624:	00590704 	subseq	r0, r9, r4, lsl #14
    d628:	04050000 	streq	r0, [r5], #-0
    d62c:	008c0406 	addeq	r0, ip, r6, lsl #8
    d630:	01040000 	mrseq	r0, (UNDEF: 4)
    d634:	00019908 	andeq	r9, r1, r8, lsl #18
    d638:	55a50700 	strpl	r0, [r5, #1792]!	; 0x700
    d63c:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
    d640:	00000084 	andeq	r0, r0, r4, lsl #1
    d644:	080001fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8}
    d648:	0000009a 	muleq	r0, sl, r0
    d64c:	01179c01 	tsteq	r7, r1, lsl #24
    d650:	6d080000 	stcvs	0, cr0, [r8, #-0]
    d654:	842d0100 	strthi	r0, [sp], #-256	; 0xffffff00
    d658:	01000000 	mrseq	r0, (UNDEF: 0)
    d65c:	00630950 	rsbeq	r0, r3, r0, asr r9
    d660:	00252d01 	eoreq	r2, r5, r1, lsl #26
    d664:	00000000 	andeq	r0, r0, r0
    d668:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
    d66c:	2c2d0100 	stfcss	f0, [sp], #-0
    d670:	2c000000 	stccs	0, cr0, [r0], {-0}
    d674:	0a000000 	beq	d67c <_Min_Stack_Size+0xd47c>
    d678:	32010073 	andcc	r0, r1, #115	; 0x73
    d67c:	00000086 	andeq	r0, r0, r6, lsl #1
    d680:	000000b1 	strheq	r0, [r0], -r1
    d684:	0100690a 	tsteq	r0, sl, lsl #18
    d688:	00003735 	andeq	r3, r0, r5, lsr r7
    d68c:	0000e500 	andeq	lr, r0, r0, lsl #10
    d690:	404b0b00 	submi	r0, fp, r0, lsl #22
    d694:	36010000 	strcc	r0, [r1], -r0
    d698:	0000006f 	andeq	r0, r0, pc, rrx
    d69c:	000000fa 	strdeq	r0, [r0], -sl
    d6a0:	0054b20b 	subseq	fp, r4, fp, lsl #4
    d6a4:	17370100 	ldrne	r0, [r7, -r0, lsl #2]!
    d6a8:	0d000001 	stceq	0, cr0, [r0, #-4]
    d6ac:	0a000001 	beq	d6b8 <_Min_Stack_Size+0xd4b8>
    d6b0:	38010064 	stmdacc	r1, {r2, r5, r6}
    d6b4:	00000037 	andeq	r0, r0, r7, lsr r0
    d6b8:	00000175 	andeq	r0, r0, r5, ror r1
    d6bc:	6f040600 	svcvs	0x00040600
    d6c0:	00000000 	andeq	r0, r0, r0
    d6c4:	000007fb 	strdeq	r0, [r0], -fp
    d6c8:	2c230004 	stccs	0, cr0, [r3], #-16
    d6cc:	01040000 	mrseq	r0, (UNDEF: 4)
    d6d0:	000054bf 			; <UNDEFINED> instruction: 0x000054bf
    d6d4:	0057bc0c 	subseq	fp, r7, ip, lsl #24
    d6d8:	0056e600 	subseq	lr, r6, r0, lsl #12
    d6dc:	00029800 	andeq	r9, r2, r0, lsl #16
    d6e0:	00010408 	andeq	r0, r1, r8, lsl #8
    d6e4:	0060f600 	rsbeq	pc, r0, r0, lsl #12
    d6e8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    d6ec:	000001ce 	andeq	r0, r0, lr, asr #3
    d6f0:	69050403 	stmdbvs	r5, {r0, r1, sl}
    d6f4:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    d6f8:	00b80508 	adcseq	r0, r8, r8, lsl #10
    d6fc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    d700:	0002f804 	andeq	pc, r2, r4, lsl #16
    d704:	06010200 	streq	r0, [r1], -r0, lsl #4
    d708:	00000192 	muleq	r0, r2, r1
    d70c:	90080102 	andls	r0, r8, r2, lsl #2
    d710:	02000001 	andeq	r0, r0, #1
    d714:	00950502 	addseq	r0, r5, r2, lsl #10
    d718:	02020000 	andeq	r0, r2, #0
    d71c:	0001f207 	andeq	pc, r1, r7, lsl #4
    d720:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    d724:	000000bd 	strheq	r0, [r0], -sp
    d728:	c9070402 	stmdbgt	r7, {r1, sl}
    d72c:	02000001 	andeq	r0, r0, #1
    d730:	01c40708 	biceq	r0, r4, r8, lsl #14
    d734:	a4040000 	strge	r0, [r4], #-0
    d738:	02000057 	andeq	r0, r0, #87	; 0x57
    d73c:	00002c07 	andeq	r2, r0, r7, lsl #24
    d740:	57930400 	ldrpl	r0, [r3, r0, lsl #8]
    d744:	2c030000 	stccs	0, cr0, [r3], {-0}
    d748:	0000005d 	andeq	r0, r0, sp, asr r0
    d74c:	00587d04 	subseq	r7, r8, r4, lsl #26
    d750:	5d720300 	ldclpl	3, cr0, [r2, #-0]
    d754:	05000000 	streq	r0, [r0, #-0]
    d758:	00005760 	andeq	r5, r0, r0, ror #14
    d75c:	25016504 	strcs	r6, [r1, #-1284]	; 0xfffffafc
    d760:	06000000 	streq	r0, [r0], -r0
    d764:	bea60304 	cdplt	3, 10, cr0, cr6, cr4, {0}
    d768:	07000000 	streq	r0, [r0, -r0]
    d76c:	0000575a 	andeq	r5, r0, sl, asr r7
    d770:	0093a803 	addseq	sl, r3, r3, lsl #16
    d774:	a8070000 	stmdage	r7, {}	; <UNPREDICTABLE>
    d778:	03000056 	movweq	r0, #86	; 0x56
    d77c:	0000bea9 	andeq	fp, r0, r9, lsr #29
    d780:	48080000 	stmdami	r8, {}	; <UNPREDICTABLE>
    d784:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    d788:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    d78c:	000000ce 	andeq	r0, r0, lr, asr #1
    d790:	04020003 	streq	r0, [r2], #-3
    d794:	00005907 	andeq	r5, r0, r7, lsl #18
    d798:	03080a00 	movweq	r0, #35328	; 0x8a00
    d79c:	0000f6a3 	andeq	pc, r0, r3, lsr #13
    d7a0:	58670b00 	stmdapl	r7!, {r8, r9, fp}^
    d7a4:	a5030000 	strge	r0, [r3, #-0]
    d7a8:	0000002c 	andeq	r0, r0, ip, lsr #32
    d7ac:	586f0b00 	stmdapl	pc!, {r8, r9, fp}^	; <UNPREDICTABLE>
    d7b0:	aa030000 	bge	cd7b8 <_Min_Stack_Size+0xcd5b8>
    d7b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    d7b8:	06040004 	streq	r0, [r4], -r4
    d7bc:	03000058 	movweq	r0, #88	; 0x58
    d7c0:	0000d5ab 	andeq	sp, r0, fp, lsr #11
    d7c4:	56790400 	ldrbtpl	r0, [r9], -r0, lsl #8
    d7c8:	af030000 	svcge	0x00030000
    d7cc:	00000072 	andeq	r0, r0, r2, ror r0
    d7d0:	040d040c 	streq	r0, [sp], #-1036	; 0xfffffbf4
    d7d4:	00000114 	andeq	r0, r0, r4, lsl r1
    d7d8:	99080102 	stmdbls	r8, {r1, r8}
    d7dc:	04000001 	streq	r0, [r0], #-1
    d7e0:	000058b9 			; <UNDEFINED> instruction: 0x000058b9
    d7e4:	00641605 	rsbeq	r1, r4, r5, lsl #12
    d7e8:	820e0000 	andhi	r0, lr, #0
    d7ec:	18000056 	stmdane	r0, {r1, r2, r4, r6}
    d7f0:	01792d05 	cmneq	r9, r5, lsl #26
    d7f4:	270b0000 	strcs	r0, [fp, -r0]
    d7f8:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    d7fc:	0001792f 	andeq	r7, r1, pc, lsr #18
    d800:	5f0f0000 	svcpl	0x000f0000
    d804:	3005006b 	andcc	r0, r5, fp, rrx
    d808:	0000002c 	andeq	r0, r0, ip, lsr #32
    d80c:	58590b04 	ldmdapl	r9, {r2, r8, r9, fp}^
    d810:	30050000 	andcc	r0, r5, r0
    d814:	0000002c 	andeq	r0, r0, ip, lsr #32
    d818:	56730b08 	ldrbtpl	r0, [r3], -r8, lsl #22
    d81c:	30050000 	andcc	r0, r5, r0
    d820:	0000002c 	andeq	r0, r0, ip, lsr #32
    d824:	58d40b0c 	ldmpl	r4, {r2, r3, r8, r9, fp}^
    d828:	30050000 	andcc	r0, r5, r0
    d82c:	0000002c 	andeq	r0, r0, ip, lsr #32
    d830:	785f0f10 	ldmdavc	pc, {r4, r8, r9, sl, fp}^	; <UNPREDICTABLE>
    d834:	7f310500 	svcvc	0x00310500
    d838:	14000001 	strne	r0, [r0], #-1
    d83c:	26040d00 	strcs	r0, [r4], -r0, lsl #26
    d840:	08000001 	stmdaeq	r0, {r0}
    d844:	0000011b 	andeq	r0, r0, fp, lsl r1
    d848:	0000018f 	andeq	r0, r0, pc, lsl #3
    d84c:	0000ce09 	andeq	ip, r0, r9, lsl #28
    d850:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    d854:	000056a3 	andeq	r5, r0, r3, lsr #13
    d858:	08350524 	ldmdaeq	r5!, {r2, r5, r8, sl}
    d85c:	0b000002 	bleq	d86c <_Min_Stack_Size+0xd66c>
    d860:	00005607 	andeq	r5, r0, r7, lsl #12
    d864:	002c3705 	eoreq	r3, ip, r5, lsl #14
    d868:	0b000000 	bleq	d870 <_Min_Stack_Size+0xd670>
    d86c:	0000588c 	andeq	r5, r0, ip, lsl #17
    d870:	002c3805 	eoreq	r3, ip, r5, lsl #16
    d874:	0b040000 	bleq	10d87c <_Min_Stack_Size+0x10d67c>
    d878:	00005616 	andeq	r5, r0, r6, lsl r6
    d87c:	002c3905 	eoreq	r3, ip, r5, lsl #18
    d880:	0b080000 	bleq	20d888 <_Min_Stack_Size+0x20d688>
    d884:	00005931 	andeq	r5, r0, r1, lsr r9
    d888:	002c3a05 	eoreq	r3, ip, r5, lsl #20
    d88c:	0b0c0000 	bleq	30d894 <_Min_Stack_Size+0x30d694>
    d890:	0000577f 	andeq	r5, r0, pc, ror r7
    d894:	002c3b05 	eoreq	r3, ip, r5, lsl #22
    d898:	0b100000 	bleq	40d8a0 <_Min_Stack_Size+0x40d6a0>
    d89c:	0000576f 	andeq	r5, r0, pc, ror #14
    d8a0:	002c3c05 	eoreq	r3, ip, r5, lsl #24
    d8a4:	0b140000 	bleq	50d8ac <_Min_Stack_Size+0x50d6ac>
    d8a8:	000058d9 	ldrdeq	r5, [r0], -r9
    d8ac:	002c3d05 	eoreq	r3, ip, r5, lsl #26
    d8b0:	0b180000 	bleq	60d8b8 <_Min_Stack_Size+0x60d6b8>
    d8b4:	000057ee 	andeq	r5, r0, lr, ror #15
    d8b8:	002c3e05 	eoreq	r3, ip, r5, lsl #28
    d8bc:	0b1c0000 	bleq	70d8c4 <_Min_Stack_Size+0x70d6c4>
    d8c0:	000058fd 	strdeq	r5, [r0], -sp
    d8c4:	002c3f05 	eoreq	r3, ip, r5, lsl #30
    d8c8:	00200000 	eoreq	r0, r0, r0
    d8cc:	0057f80e 	subseq	pc, r7, lr, lsl #16
    d8d0:	73050800 	movwvc	r0, #22528	; 0x5800
    d8d4:	0000022d 	andeq	r0, r0, sp, lsr #4
    d8d8:	003a5f0b 	eorseq	r5, sl, fp, lsl #30
    d8dc:	2d740500 	cfldr64cs	mvdx0, [r4, #-0]
    d8e0:	00000002 	andeq	r0, r0, r2
    d8e4:	005da30b 	subseq	sl, sp, fp, lsl #6
    d8e8:	2c750500 	cfldr64cs	mvdx0, [r5], #-0
    d8ec:	04000000 	streq	r0, [r0], #-0
    d8f0:	48040d00 	stmdami	r4, {r8, sl, fp}
    d8f4:	10000000 	andne	r0, r0, r0
    d8f8:	000058ad 	andeq	r5, r0, sp, lsr #17
    d8fc:	01720560 	cmneq	r2, r0, ror #10
    d900:	0000035f 	andeq	r0, r0, pc, asr r3
    d904:	00588511 	subseq	r8, r8, r1, lsl r5
    d908:	01760500 	cmneq	r6, r0, lsl #10
    d90c:	0000002c 	andeq	r0, r0, ip, lsr #32
    d910:	5bc61100 	blpl	ff191d18 <BootRAM+0xe1024b9>
    d914:	7b050000 	blvc	14d91c <_Min_Stack_Size+0x14d71c>
    d918:	00058701 	andeq	r8, r5, r1, lsl #14
    d91c:	d6110400 	ldrle	r0, [r1], -r0, lsl #8
    d920:	0500005b 	streq	r0, [r0, #-91]	; 0xffffffa5
    d924:	0587017b 	streq	r0, [r7, #379]	; 0x17b
    d928:	11080000 	mrsne	r0, (UNDEF: 8)
    d92c:	00005c91 	muleq	r0, r1, ip
    d930:	87017b05 	strhi	r7, [r1, -r5, lsl #22]
    d934:	0c000005 	stceq	0, cr0, [r0], {5}
    d938:	00583a11 	subseq	r3, r8, r1, lsl sl
    d93c:	017d0500 	cmneq	sp, r0, lsl #10
    d940:	0000002c 	andeq	r0, r0, ip, lsr #32
    d944:	55bb1110 	ldrpl	r1, [fp, #272]!	; 0x110
    d948:	7f050000 	svcvc	0x00050000
    d94c:	00010e01 	andeq	r0, r1, r1, lsl #28
    d950:	88111400 	ldmdahi	r1, {sl, ip}
    d954:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
    d958:	002c0181 	eoreq	r0, ip, r1, lsl #3
    d95c:	11180000 	tstne	r8, r0
    d960:	000056c0 	andeq	r5, r0, r0, asr #13
    d964:	2c018305 	stccs	3, cr8, [r1], {5}
    d968:	1c000000 	stcne	0, cr0, [r0], {-0}
    d96c:	00583f11 	subseq	r3, r8, r1, lsl pc
    d970:	01840500 	orreq	r0, r4, r0, lsl #10
    d974:	000004d1 	ldrdeq	r0, [r0], -r1
    d978:	6d5f1220 	lfmvs	f1, 2, [pc, #-128]	; d900 <_Min_Stack_Size+0xd700>
    d97c:	86050070 			; <UNDEFINED> instruction: 0x86050070
    d980:	0006d401 	andeq	sp, r6, r1, lsl #8
    d984:	4f112400 	svcmi	0x00112400
    d988:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    d98c:	06e50188 	strbteq	r0, [r5], r8, lsl #3
    d990:	11280000 			; <UNDEFINED> instruction: 0x11280000
    d994:	0000568a 	andeq	r5, r0, sl, lsl #13
    d998:	2c018a05 			; <UNDEFINED> instruction: 0x2c018a05
    d99c:	2c000000 	stccs	0, cr0, [r0], {-0}
    d9a0:	0056d211 	subseq	sp, r6, r1, lsl r2
    d9a4:	018d0500 	orreq	r0, sp, r0, lsl #10
    d9a8:	0000002c 	andeq	r0, r0, ip, lsr #32
    d9ac:	564c1130 			; <UNDEFINED> instruction: 0x564c1130
    d9b0:	8e050000 	cdphi	0, 0, cr0, cr5, cr0, {0}
    d9b4:	00010e01 	andeq	r0, r1, r1, lsl #28
    d9b8:	da113400 	ble	45a9c0 <_Min_Stack_Size+0x45a7c0>
    d9bc:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    d9c0:	06eb0190 	usateq	r0, #11, r0, lsl #3
    d9c4:	11380000 	teqne	r8, r0
    d9c8:	00005908 	andeq	r5, r0, r8, lsl #18
    d9cc:	f1019105 			; <UNDEFINED> instruction: 0xf1019105
    d9d0:	3c000006 	stccc	0, cr0, [r0], {6}
    d9d4:	00574511 	subseq	r4, r7, r1, lsl r5
    d9d8:	01920500 	orrseq	r0, r2, r0, lsl #10
    d9dc:	0000010e 	andeq	r0, r0, lr, lsl #2
    d9e0:	58ed1140 	stmiapl	sp!, {r6, r8, ip}^
    d9e4:	95050000 	strls	r0, [r5, #-0]
    d9e8:	00070201 	andeq	r0, r7, r1, lsl #4
    d9ec:	2d114400 	cfldrscs	mvf4, [r1, #-0]
    d9f0:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    d9f4:	054c019d 	strbeq	r0, [ip, #-413]	; 0xfffffe63
    d9f8:	11480000 	mrsne	r0, (UNDEF: 72)
    d9fc:	00005620 	andeq	r5, r0, r0, lsr #12
    da00:	87019e05 	strhi	r9, [r1, -r5, lsl #28]
    da04:	54000005 	strpl	r0, [r0], #-5
    da08:	00577911 	subseq	r7, r7, r1, lsl r9
    da0c:	019f0500 	orrseq	r0, pc, r0, lsl #10
    da10:	0000070e 	andeq	r0, r0, lr, lsl #14
    da14:	55d51158 	ldrbpl	r1, [r5, #344]	; 0x158
    da18:	a0050000 	andge	r0, r5, r0
    da1c:	00010e01 	andeq	r0, r1, r1, lsl #28
    da20:	0d005c00 	stceq	12, cr5, [r0, #-0]
    da24:	00023304 	andeq	r3, r2, r4, lsl #6
    da28:	58110e00 	ldmdapl	r1, {r9, sl, fp}
    da2c:	05680000 	strbeq	r0, [r8, #-0]!
    da30:	00048fb3 			; <UNDEFINED> instruction: 0x00048fb3
    da34:	705f0f00 	subsvc	r0, pc, r0, lsl #30
    da38:	2db40500 	cfldr32cs	mvfx0, [r4]
    da3c:	00000002 	andeq	r0, r0, r2
    da40:	00725f0f 	rsbseq	r5, r2, pc, lsl #30
    da44:	002cb505 	eoreq	fp, ip, r5, lsl #10
    da48:	0f040000 	svceq	0x00040000
    da4c:	0500775f 	streq	r7, [r0, #-1887]	; 0xfffff8a1
    da50:	00002cb6 			; <UNDEFINED> instruction: 0x00002cb6
    da54:	3c0b0800 	stccc	8, cr0, [fp], {-0}
    da58:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    da5c:	00004fb7 			; <UNDEFINED> instruction: 0x00004fb7
    da60:	ce0b0c00 	cdpgt	12, 0, cr0, cr11, cr0, {0}
    da64:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    da68:	00004fb8 			; <UNDEFINED> instruction: 0x00004fb8
    da6c:	5f0f0e00 	svcpl	0x000f0e00
    da70:	05006662 	streq	r6, [r0, #-1634]	; 0xfffff99e
    da74:	000208b9 			; <UNDEFINED> instruction: 0x000208b9
    da78:	e10b1000 	mrs	r1, (UNDEF: 11)
    da7c:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
    da80:	00002cba 			; <UNDEFINED> instruction: 0x00002cba
    da84:	eb0b1800 	bl	2d3a8c <_Min_Stack_Size+0x2d388c>
    da88:	0500000d 	streq	r0, [r0, #-13]
    da8c:	00035fbd 			; <UNDEFINED> instruction: 0x00035fbd
    da90:	250b1c00 	strcs	r1, [fp, #-3072]	; 0xfffff400
    da94:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    da98:	00010cc1 	andeq	r0, r1, r1, asr #25
    da9c:	610b2000 	mrsvs	r2, (UNDEF: 11)
    daa0:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    daa4:	0004adc3 	andeq	sl, r4, r3, asr #27
    daa8:	bc0b2400 	cfstrslt	mvf2, [fp], {-0}
    daac:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    dab0:	0004dcc5 	andeq	sp, r4, r5, asr #25
    dab4:	770b2800 	strvc	r2, [fp, -r0, lsl #16]
    dab8:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    dabc:	000500c8 	andeq	r0, r5, r8, asr #1
    dac0:	170b2c00 	strne	r2, [fp, -r0, lsl #24]
    dac4:	05000059 	streq	r0, [r0, #-89]	; 0xffffffa7
    dac8:	00051ac9 	andeq	r1, r5, r9, asr #21
    dacc:	5f0f3000 	svcpl	0x000f3000
    dad0:	05006275 	streq	r6, [r0, #-629]	; 0xfffffd8b
    dad4:	000208cc 	andeq	r0, r2, ip, asr #17
    dad8:	5f0f3400 	svcpl	0x000f3400
    dadc:	05007075 	streq	r7, [r0, #-117]	; 0xffffff8b
    dae0:	00022dcd 	andeq	r2, r2, sp, asr #27
    dae4:	5f0f3c00 	svcpl	0x000f3c00
    dae8:	05007275 	streq	r7, [r0, #-629]	; 0xfffffd8b
    daec:	00002cce 	andeq	r2, r0, lr, asr #25
    daf0:	100b4000 	andne	r4, fp, r0
    daf4:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    daf8:	000520d1 	ldrdeq	r2, [r5], -r1
    dafc:	f70b4400 			; <UNDEFINED> instruction: 0xf70b4400
    db00:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    db04:	000530d2 	ldrdeq	r3, [r5], -r2
    db08:	5f0f4700 	svcpl	0x000f4700
    db0c:	0500626c 	streq	r6, [r0, #-620]	; 0xfffffd94
    db10:	000208d5 	ldrdeq	r0, [r2], -r5
    db14:	430b4800 	movwmi	r4, #47104	; 0xb800
    db18:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    db1c:	00002cd8 	ldrdeq	r2, [r0], -r8
    db20:	250b5000 	strcs	r5, [fp, #-0]
    db24:	05000061 	streq	r0, [r0, #-97]	; 0xffffff9f
    db28:	00007dd9 	ldrdeq	r7, [r0], -r9
    db2c:	010b5400 	tsteq	fp, r0, lsl #8
    db30:	0500003c 	streq	r0, [r0, #-60]	; 0xffffffc4
    db34:	000101e0 	andeq	r0, r1, r0, ror #3
    db38:	190b5800 	stmdbne	fp, {fp, ip, lr}
    db3c:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    db40:	0000f6e2 	andeq	pc, r0, r2, ror #13
    db44:	670b5c00 	strvs	r5, [fp, -r0, lsl #24]
    db48:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
    db4c:	00002ce3 	andeq	r2, r0, r3, ror #25
    db50:	13006400 	movwne	r6, #1024	; 0x400
    db54:	0000002c 	andeq	r0, r0, ip, lsr #32
    db58:	000004ad 	andeq	r0, r0, sp, lsr #9
    db5c:	00035f14 	andeq	r5, r3, r4, lsl pc
    db60:	010c1400 	tsteq	ip, r0, lsl #8
    db64:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    db68:	14000001 	strne	r0, [r0], #-1
    db6c:	0000002c 	andeq	r0, r0, ip, lsr #32
    db70:	8f040d00 	svchi	0x00040d00
    db74:	13000004 	movwne	r0, #4
    db78:	0000002c 	andeq	r0, r0, ip, lsr #32
    db7c:	000004d1 	ldrdeq	r0, [r0], -r1
    db80:	00035f14 	andeq	r5, r3, r4, lsl pc
    db84:	010c1400 	tsteq	ip, r0, lsl #8
    db88:	d1140000 	tstle	r4, r0
    db8c:	14000004 	strne	r0, [r0], #-4
    db90:	0000002c 	andeq	r0, r0, ip, lsr #32
    db94:	d7040d00 	strle	r0, [r4, -r0, lsl #26]
    db98:	15000004 	strne	r0, [r0, #-4]
    db9c:	00000114 	andeq	r0, r0, r4, lsl r1
    dba0:	04b3040d 	ldrteq	r0, [r3], #1037	; 0x40d
    dba4:	88130000 	ldmdahi	r3, {}	; <UNPREDICTABLE>
    dba8:	00000000 	andeq	r0, r0, r0
    dbac:	14000005 	strne	r0, [r0], #-5
    dbb0:	0000035f 	andeq	r0, r0, pc, asr r3
    dbb4:	00010c14 	andeq	r0, r1, r4, lsl ip
    dbb8:	00881400 	addeq	r1, r8, r0, lsl #8
    dbbc:	2c140000 	ldccs	0, cr0, [r4], {-0}
    dbc0:	00000000 	andeq	r0, r0, r0
    dbc4:	04e2040d 	strbteq	r0, [r2], #1037	; 0x40d
    dbc8:	2c130000 	ldccs	0, cr0, [r3], {-0}
    dbcc:	1a000000 	bne	dbd4 <_Min_Stack_Size+0xd9d4>
    dbd0:	14000005 	strne	r0, [r0], #-5
    dbd4:	0000035f 	andeq	r0, r0, pc, asr r3
    dbd8:	00010c14 	andeq	r0, r1, r4, lsl ip
    dbdc:	040d0000 	streq	r0, [sp], #-0
    dbe0:	00000506 	andeq	r0, r0, r6, lsl #10
    dbe4:	00004808 	andeq	r4, r0, r8, lsl #16
    dbe8:	00053000 	andeq	r3, r5, r0
    dbec:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    dbf0:	00020000 	andeq	r0, r2, r0
    dbf4:	00004808 	andeq	r4, r0, r8, lsl #16
    dbf8:	00054000 	andeq	r4, r5, r0
    dbfc:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    dc00:	00000000 	andeq	r0, r0, r0
    dc04:	0057ff05 	subseq	pc, r7, r5, lsl #30
    dc08:	011d0500 	tsteq	sp, r0, lsl #10
    dc0c:	00000365 	andeq	r0, r0, r5, ror #6
    dc10:	0060e410 	rsbeq	lr, r0, r0, lsl r4
    dc14:	21050c00 	tstcs	r5, r0, lsl #24
    dc18:	00058101 	andeq	r8, r5, r1, lsl #2
    dc1c:	58271100 	stmdapl	r7!, {r8, ip}
    dc20:	23050000 	movwcs	r0, #20480	; 0x5000
    dc24:	00058101 	andeq	r8, r5, r1, lsl #2
    dc28:	df110000 	svcle	0x00110000
    dc2c:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    dc30:	002c0124 	eoreq	r0, ip, r4, lsr #2
    dc34:	11040000 	mrsne	r0, (UNDEF: 4)
    dc38:	000057e8 	andeq	r5, r0, r8, ror #15
    dc3c:	87012505 	strhi	r2, [r1, -r5, lsl #10]
    dc40:	08000005 	stmdaeq	r0, {r0, r2}
    dc44:	4c040d00 	stcmi	13, cr0, [r4], {-0}
    dc48:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    dc4c:	00054004 	andeq	r4, r5, r4
    dc50:	55b31000 	ldrpl	r1, [r3, #0]!
    dc54:	05180000 	ldreq	r0, [r8, #-0]
    dc58:	05cf013d 	strbeq	r0, [pc, #317]	; dd9d <_Min_Stack_Size+0xdb9d>
    dc5c:	61110000 	tstvs	r1, r0
    dc60:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    dc64:	05cf013e 	strbeq	r0, [pc, #318]	; ddaa <_Min_Stack_Size+0xdbaa>
    dc68:	11000000 	mrsne	r0, (UNDEF: 0)
    dc6c:	00005895 	muleq	r0, r5, r8
    dc70:	cf013f05 	svcgt	0x00013f05
    dc74:	06000005 	streq	r0, [r0], -r5
    dc78:	0058b411 	subseq	fp, r8, r1, lsl r4
    dc7c:	01400500 	cmpeq	r0, r0, lsl #10
    dc80:	00000056 	andeq	r0, r0, r6, asr r0
    dc84:	5822110c 	stmdapl	r2!, {r2, r3, r8, ip}
    dc88:	43050000 	movwmi	r0, #20480	; 0x5000
    dc8c:	00006b01 	andeq	r6, r0, r1, lsl #22
    dc90:	08001000 	stmdaeq	r0, {ip}
    dc94:	00000056 	andeq	r0, r0, r6, asr r0
    dc98:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    dc9c:	0000ce09 	andeq	ip, r0, r9, lsl #28
    dca0:	10000200 	andne	r0, r0, r0, lsl #4
    dca4:	00005635 	andeq	r5, r0, r5, lsr r6
    dca8:	01560510 	cmpeq	r6, r0, lsl r5
    dcac:	00000621 	andeq	r0, r0, r1, lsr #12
    dcb0:	00575211 	subseq	r5, r7, r1, lsl r2
    dcb4:	01590500 	cmpeq	r9, r0, lsl #10
    dcb8:	00000179 	andeq	r0, r0, r9, ror r1
    dcbc:	56991100 	ldrpl	r1, [r9], r0, lsl #2
    dcc0:	5a050000 	bpl	14dcc8 <_Min_Stack_Size+0x14dac8>
    dcc4:	00002c01 	andeq	r2, r0, r1, lsl #24
    dcc8:	2c110400 	cfldrscs	mvf0, [r1], {-0}
    dccc:	05000059 	streq	r0, [r0, #-89]	; 0xffffffa7
    dcd0:	0179015b 	cmneq	r9, fp, asr r1
    dcd4:	11080000 	mrsne	r0, (UNDEF: 8)
    dcd8:	0000579a 	muleq	r0, sl, r7
    dcdc:	21015c05 	tstcs	r1, r5, lsl #24
    dce0:	0c000006 	stceq	0, cr0, [r0], {6}
    dce4:	79040d00 	stmdbvc	r4, {r8, sl, fp}
    dce8:	10000001 	andne	r0, r0, r1
    dcec:	000058a8 	andeq	r5, r0, r8, lsr #17
    dcf0:	01600550 	cmneq	r0, r0, asr r5
    dcf4:	000006c4 	andeq	r0, r0, r4, asr #13
    dcf8:	00589b11 	subseq	r9, r8, r1, lsl fp
    dcfc:	01630500 	cmneq	r3, r0, lsl #10
    dd00:	0000010e 	andeq	r0, r0, lr, lsl #2
    dd04:	582d1100 	stmdapl	sp!, {r8, ip}
    dd08:	64050000 	strvs	r0, [r5], #-0
    dd0c:	0000f601 	andeq	pc, r0, r1, lsl #12
    dd10:	f9110400 			; <UNDEFINED> instruction: 0xf9110400
    dd14:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
    dd18:	00f60165 	rscseq	r0, r6, r5, ror #2
    dd1c:	110c0000 	mrsne	r0, (UNDEF: 12)
    dd20:	0000591e 	andeq	r5, r0, lr, lsl r9
    dd24:	f6016605 			; <UNDEFINED> instruction: 0xf6016605
    dd28:	14000000 	strne	r0, [r0], #-0
    dd2c:	0058e311 	subseq	lr, r8, r1, lsl r3
    dd30:	01670500 	cmneq	r7, r0, lsl #10
    dd34:	000006c4 	andeq	r0, r0, r4, asr #13
    dd38:	58c1111c 	stmiapl	r1, {r2, r3, r4, r8, ip}^
    dd3c:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
    dd40:	00002c01 	andeq	r2, r0, r1, lsl #24
    dd44:	65112400 	ldrvs	r2, [r1, #-1024]	; 0xfffffc00
    dd48:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    dd4c:	00f60169 	rscseq	r0, r6, r9, ror #2
    dd50:	11280000 			; <UNDEFINED> instruction: 0x11280000
    dd54:	000055ea 	andeq	r5, r0, sl, ror #11
    dd58:	f6016a05 			; <UNDEFINED> instruction: 0xf6016a05
    dd5c:	30000000 	andcc	r0, r0, r0
    dd60:	00565411 	subseq	r5, r6, r1, lsl r4
    dd64:	016b0500 	cmneq	fp, r0, lsl #10
    dd68:	000000f6 	strdeq	r0, [r0], -r6
    dd6c:	55c61138 	strbpl	r1, [r6, #312]	; 0x138
    dd70:	6c050000 	stcvs	0, cr0, [r5], {-0}
    dd74:	0000f601 	andeq	pc, r0, r1, lsl #12
    dd78:	af114000 	svcge	0x00114000
    dd7c:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    dd80:	00f6016d 	rscseq	r0, r6, sp, ror #2
    dd84:	00480000 	subeq	r0, r8, r0
    dd88:	00011408 	andeq	r1, r1, r8, lsl #8
    dd8c:	0006d400 	andeq	sp, r6, r0, lsl #8
    dd90:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    dd94:	00070000 	andeq	r0, r7, r0
    dd98:	05df040d 	ldrbeq	r0, [pc, #1037]	; e1ad <_Min_Stack_Size+0xdfad>
    dd9c:	e5160000 	ldr	r0, [r6, #-0]
    dda0:	14000006 	strne	r0, [r0], #-6
    dda4:	0000035f 	andeq	r0, r0, pc, asr r3
    dda8:	da040d00 	ble	1111b0 <_Min_Stack_Size+0x110fb0>
    ddac:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
    ddb0:	00058d04 	andeq	r8, r5, r4, lsl #26
    ddb4:	8f040d00 	svchi	0x00040d00
    ddb8:	16000001 	strne	r0, [r0], -r1
    ddbc:	00000702 	andeq	r0, r0, r2, lsl #14
    ddc0:	00002c14 	andeq	r2, r0, r4, lsl ip
    ddc4:	040d0000 	streq	r0, [sp], #-0
    ddc8:	00000708 	andeq	r0, r0, r8, lsl #14
    ddcc:	06f7040d 	ldrbteq	r0, [r7], sp, lsl #8
    ddd0:	040d0000 	streq	r0, [sp], #-0
    ddd4:	00000627 	andeq	r0, r0, r7, lsr #12
    ddd8:	0057b617 	subseq	fp, r7, r7, lsl r6
    dddc:	98930600 	ldmls	r3, {r9, sl}
    dde0:	64080002 	strvs	r0, [r8], #-2
    dde4:	01000000 	mrseq	r0, (UNDEF: 0)
    dde8:	0007839c 	muleq	r7, ip, r3
    ddec:	58621800 	stmdapl	r2!, {fp, ip}^
    ddf0:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    ddf4:	00000025 	andeq	r0, r0, r5, lsr #32
    ddf8:	000001ae 	andeq	r0, r0, lr, lsr #3
    ddfc:	005c3619 	subseq	r3, ip, r9, lsl r6
    de00:	5f4b0100 	svcpl	0x004b0100
    de04:	d8000003 	stmdale	r0, {r0, r1}
    de08:	1a000001 	bne	de14 <_Min_Stack_Size+0xdc14>
    de0c:	00000ff8 	strdeq	r0, [r0], -r8
    de10:	00725f1b 	rsbseq	r5, r2, fp, lsl pc
    de14:	035f4d01 	cmpeq	pc, #1, 26	; 0x40
    de18:	01d80000 	bicseq	r0, r8, r0
    de1c:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    de20:	72000010 	andvc	r0, r0, #16
    de24:	1b000007 	blne	de48 <_Min_Stack_Size+0xdc48>
    de28:	0100725f 	tsteq	r0, pc, asr r2
    de2c:	00035f4d 	andeq	r5, r3, sp, asr #30
    de30:	0001eb00 	andeq	lr, r1, r0, lsl #22
    de34:	b61d0000 	ldrlt	r0, [sp], -r0
    de38:	f3080002 	vhadd.u8	d0, d8, d2
    de3c:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    de40:	48015001 	stmdami	r1, {r0, ip, lr}
    de44:	1f000000 	svcne	0x00000000
    de48:	000057b7 			; <UNDEFINED> instruction: 0x000057b7
    de4c:	002c8806 	eoreq	r8, ip, r6, lsl #16
    de50:	02fc0000 	rscseq	r0, ip, #0
    de54:	00a00800 	adceq	r0, r0, r0, lsl #16
    de58:	9c010000 	stcls	0, cr0, [r1], {-0}
    de5c:	000007e7 	andeq	r0, r0, r7, ror #15
    de60:	005c3619 	subseq	r3, ip, r9, lsl r6
    de64:	5f540100 	svcpl	0x00540100
    de68:	fe000003 	cdp2	0, 0, cr0, cr0, cr3, {0}
    de6c:	1a000001 	bne	de78 <_Min_Stack_Size+0xdc78>
    de70:	00001038 	andeq	r1, r0, r8, lsr r0
    de74:	00725f1b 	rsbseq	r5, r2, fp, lsl pc
    de78:	035f5901 	cmpeq	pc, #16384	; 0x4000
    de7c:	01fe0000 	mvnseq	r0, r0
    de80:	501c0000 	andspl	r0, ip, r0
    de84:	d6000010 			; <UNDEFINED> instruction: 0xd6000010
    de88:	1b000007 	blne	deac <_Min_Stack_Size+0xdcac>
    de8c:	0100725f 	tsteq	r0, pc, asr r2
    de90:	00035f59 	andeq	r5, r3, r9, asr pc
    de94:	00021c00 	andeq	r1, r2, r0, lsl #24
    de98:	361d0000 	ldrcc	r0, [sp], -r0
    de9c:	f3080003 	vhadd.u8	d0, d8, d3
    dea0:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    dea4:	48015001 	stmdami	r1, {r0, ip, lr}
    dea8:	20000000 	andcs	r0, r0, r0
    deac:	00005c7c 	andeq	r5, r0, ip, ror ip
    deb0:	5f02fd05 	svcpl	0x0002fd05
    deb4:	21000003 	tstcs	r0, r3
    deb8:	000055ac 	andeq	r5, r0, ip, lsr #11
    debc:	000055ac 	andeq	r5, r0, ip, lsr #11
    dec0:	08006406 	stmdaeq	r0, {r1, r2, sl, sp, lr}
    dec4:	04000009 	streq	r0, [r0], #-9
    dec8:	002dd800 	eoreq	sp, sp, r0, lsl #16
    decc:	bf010400 	svclt	0x00010400
    ded0:	0c000054 	stceq	0, cr0, [r0], {84}	; 0x54
    ded4:	000059af 	andeq	r5, r0, pc, lsr #19
    ded8:	00005947 	andeq	r5, r0, r7, asr #18
    dedc:	0800039c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9}
    dee0:	00000124 	andeq	r0, r0, r4, lsr #2
    dee4:	00006267 	andeq	r6, r0, r7, ror #4
    dee8:	69050402 	stmdbvs	r5, {r1, sl}
    deec:	0300746e 	movweq	r7, #1134	; 0x46e
    def0:	00005cec 	andeq	r5, r0, ip, ror #25
    def4:	0037d802 	eorseq	sp, r7, r2, lsl #16
    def8:	04040000 	streq	r0, [r4], #-0
    defc:	0001ce07 	andeq	ip, r1, r7, lsl #28
    df00:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    df04:	000000b8 	strheq	r0, [r0], -r8
    df08:	f8040804 			; <UNDEFINED> instruction: 0xf8040804
    df0c:	04000002 	streq	r0, [r0], #-2
    df10:	01920601 	orrseq	r0, r2, r1, lsl #12
    df14:	01040000 	mrseq	r0, (UNDEF: 4)
    df18:	00019008 	andeq	r9, r1, r8
    df1c:	05020400 	streq	r0, [r2, #-1024]	; 0xfffffc00
    df20:	00000095 	muleq	r0, r5, r0
    df24:	f2070204 	vhsub.s8	d0, d7, d4
    df28:	04000001 	streq	r0, [r0], #-1
    df2c:	00bd0504 	adcseq	r0, sp, r4, lsl #10
    df30:	04040000 	streq	r0, [r4], #-0
    df34:	0001c907 	andeq	ip, r1, r7, lsl #18
    df38:	07080400 	streq	r0, [r8, -r0, lsl #8]
    df3c:	000001c4 	andeq	r0, r0, r4, asr #3
    df40:	0057a403 	subseq	sl, r7, r3, lsl #8
    df44:	25070300 	strcs	r0, [r7, #-768]	; 0xfffffd00
    df48:	03000000 	movweq	r0, #0
    df4c:	00005793 	muleq	r0, r3, r7
    df50:	00682c04 	rsbeq	r2, r8, r4, lsl #24
    df54:	7d030000 	stcvc	0, cr0, [r3, #-0]
    df58:	04000058 	streq	r0, [r0], #-88	; 0xffffffa8
    df5c:	00006872 	andeq	r6, r0, r2, ror r8
    df60:	57600500 	strbpl	r0, [r0, -r0, lsl #10]!
    df64:	65020000 	strvs	r0, [r2, #-0]
    df68:	00003701 	andeq	r3, r0, r1, lsl #14
    df6c:	04040600 	streq	r0, [r4], #-1536	; 0xfffffa00
    df70:	0000c9a6 	andeq	ip, r0, r6, lsr #19
    df74:	575a0700 	ldrbpl	r0, [sl, -r0, lsl #14]
    df78:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    df7c:	0000009e 	muleq	r0, lr, r0
    df80:	0056a807 	subseq	sl, r6, r7, lsl #16
    df84:	c9a90400 	stmibgt	r9!, {sl}
    df88:	00000000 	andeq	r0, r0, r0
    df8c:	00005308 	andeq	r5, r0, r8, lsl #6
    df90:	0000d900 	andeq	sp, r0, r0, lsl #18
    df94:	00d90900 	sbcseq	r0, r9, r0, lsl #18
    df98:	00030000 	andeq	r0, r3, r0
    df9c:	59070404 	stmdbpl	r7, {r2, sl}
    dfa0:	0a000000 	beq	dfa8 <_Min_Stack_Size+0xdda8>
    dfa4:	01a30408 			; <UNDEFINED> instruction: 0x01a30408
    dfa8:	0b000001 	bleq	dfb4 <_Min_Stack_Size+0xddb4>
    dfac:	00005867 	andeq	r5, r0, r7, ror #16
    dfb0:	0025a504 	eoreq	sl, r5, r4, lsl #10
    dfb4:	0b000000 	bleq	dfbc <_Min_Stack_Size+0xddbc>
    dfb8:	0000586f 	andeq	r5, r0, pc, ror #16
    dfbc:	00aaaa04 	adceq	sl, sl, r4, lsl #20
    dfc0:	00040000 	andeq	r0, r4, r0
    dfc4:	00580603 	subseq	r0, r8, r3, lsl #12
    dfc8:	e0ab0400 	adc	r0, fp, r0, lsl #8
    dfcc:	03000000 	movweq	r0, #0
    dfd0:	00005679 	andeq	r5, r0, r9, ror r6
    dfd4:	007daf04 	rsbseq	sl, sp, r4, lsl #30
    dfd8:	040c0000 	streq	r0, [ip], #-0
    dfdc:	011f040d 	tsteq	pc, sp, lsl #8
    dfe0:	01040000 	mrseq	r0, (UNDEF: 4)
    dfe4:	00019908 	andeq	r9, r1, r8, lsl #18
    dfe8:	58b90300 	ldmpl	r9!, {r8, r9}
    dfec:	16050000 	strne	r0, [r5], -r0
    dff0:	0000006f 	andeq	r0, r0, pc, rrx
    dff4:	0056820e 	subseq	r8, r6, lr, lsl #4
    dff8:	2d051800 	stccs	8, cr1, [r5, #-0]
    dffc:	00000184 	andeq	r0, r0, r4, lsl #3
    e000:	0058270b 	subseq	r2, r8, fp, lsl #14
    e004:	842f0500 	strthi	r0, [pc], #-1280	; e00c <_Min_Stack_Size+0xde0c>
    e008:	00000001 	andeq	r0, r0, r1
    e00c:	006b5f0f 	rsbeq	r5, fp, pc, lsl #30
    e010:	00253005 	eoreq	r3, r5, r5
    e014:	0b040000 	bleq	10e01c <_Min_Stack_Size+0x10de1c>
    e018:	00005859 	andeq	r5, r0, r9, asr r8
    e01c:	00253005 	eoreq	r3, r5, r5
    e020:	0b080000 	bleq	20e028 <_Min_Stack_Size+0x20de28>
    e024:	00005673 	andeq	r5, r0, r3, ror r6
    e028:	00253005 	eoreq	r3, r5, r5
    e02c:	0b0c0000 	bleq	30e034 <_Min_Stack_Size+0x30de34>
    e030:	000058d4 	ldrdeq	r5, [r0], -r4
    e034:	00253005 	eoreq	r3, r5, r5
    e038:	0f100000 	svceq	0x00100000
    e03c:	0500785f 	streq	r7, [r0, #-2143]	; 0xfffff7a1
    e040:	00018a31 	andeq	r8, r1, r1, lsr sl
    e044:	0d001400 	cfstrseq	mvf1, [r0, #-0]
    e048:	00013104 	andeq	r3, r1, r4, lsl #2
    e04c:	01260800 			; <UNDEFINED> instruction: 0x01260800
    e050:	019a0000 	orrseq	r0, sl, r0
    e054:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
    e058:	00000000 	andeq	r0, r0, r0
    e05c:	56a30e00 	strtpl	r0, [r3], r0, lsl #28
    e060:	05240000 	streq	r0, [r4, #-0]!
    e064:	00021335 	andeq	r1, r2, r5, lsr r3
    e068:	56070b00 	strpl	r0, [r7], -r0, lsl #22
    e06c:	37050000 	strcc	r0, [r5, -r0]
    e070:	00000025 	andeq	r0, r0, r5, lsr #32
    e074:	588c0b00 	stmpl	ip, {r8, r9, fp}
    e078:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    e07c:	00000025 	andeq	r0, r0, r5, lsr #32
    e080:	56160b04 	ldrpl	r0, [r6], -r4, lsl #22
    e084:	39050000 	stmdbcc	r5, {}	; <UNPREDICTABLE>
    e088:	00000025 	andeq	r0, r0, r5, lsr #32
    e08c:	59310b08 	ldmdbpl	r1!, {r3, r8, r9, fp}
    e090:	3a050000 	bcc	14e098 <_Min_Stack_Size+0x14de98>
    e094:	00000025 	andeq	r0, r0, r5, lsr #32
    e098:	577f0b0c 	ldrbpl	r0, [pc, -ip, lsl #22]!
    e09c:	3b050000 	blcc	14e0a4 <_Min_Stack_Size+0x14dea4>
    e0a0:	00000025 	andeq	r0, r0, r5, lsr #32
    e0a4:	576f0b10 			; <UNDEFINED> instruction: 0x576f0b10
    e0a8:	3c050000 	stccc	0, cr0, [r5], {-0}
    e0ac:	00000025 	andeq	r0, r0, r5, lsr #32
    e0b0:	58d90b14 	ldmpl	r9, {r2, r4, r8, r9, fp}^
    e0b4:	3d050000 	stccc	0, cr0, [r5, #-0]
    e0b8:	00000025 	andeq	r0, r0, r5, lsr #32
    e0bc:	57ee0b18 			; <UNDEFINED> instruction: 0x57ee0b18
    e0c0:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    e0c4:	00000025 	andeq	r0, r0, r5, lsr #32
    e0c8:	58fd0b1c 	ldmpl	sp!, {r2, r3, r4, r8, r9, fp}^
    e0cc:	3f050000 	svccc	0x00050000
    e0d0:	00000025 	andeq	r0, r0, r5, lsr #32
    e0d4:	f80e0020 			; <UNDEFINED> instruction: 0xf80e0020
    e0d8:	08000057 	stmdaeq	r0, {r0, r1, r2, r4, r6}
    e0dc:	02387305 	eorseq	r7, r8, #335544320	; 0x14000000
    e0e0:	5f0b0000 	svcpl	0x000b0000
    e0e4:	0500003a 	streq	r0, [r0, #-58]	; 0xffffffc6
    e0e8:	00023874 	andeq	r3, r2, r4, ror r8
    e0ec:	a30b0000 	movwge	r0, #45056	; 0xb000
    e0f0:	0500005d 	streq	r0, [r0, #-93]	; 0xffffffa3
    e0f4:	00002575 	andeq	r2, r0, r5, ror r5
    e0f8:	0d000400 	cfstrseq	mvf0, [r0, #-0]
    e0fc:	00005304 	andeq	r5, r0, r4, lsl #6
    e100:	58ad1000 	stmiapl	sp!, {ip}
    e104:	05600000 	strbeq	r0, [r0, #-0]!
    e108:	036a0172 	cmneq	sl, #-2147483620	; 0x8000001c
    e10c:	85110000 	ldrhi	r0, [r1, #-0]
    e110:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    e114:	00250176 	eoreq	r0, r5, r6, ror r1
    e118:	11000000 	mrsne	r0, (UNDEF: 0)
    e11c:	00005bc6 	andeq	r5, r0, r6, asr #23
    e120:	92017b05 	andls	r7, r1, #5120	; 0x1400
    e124:	04000005 	streq	r0, [r0], #-5
    e128:	005bd611 	subseq	sp, fp, r1, lsl r6
    e12c:	017b0500 	cmneq	fp, r0, lsl #10
    e130:	00000592 	muleq	r0, r2, r5
    e134:	5c911108 	ldfpls	f1, [r1], {8}
    e138:	7b050000 	blvc	14e140 <_Min_Stack_Size+0x14df40>
    e13c:	00059201 	andeq	r9, r5, r1, lsl #4
    e140:	3a110c00 	bcc	451148 <_Min_Stack_Size+0x450f48>
    e144:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    e148:	0025017d 	eoreq	r0, r5, sp, ror r1
    e14c:	11100000 	tstne	r0, r0
    e150:	000055bb 			; <UNDEFINED> instruction: 0x000055bb
    e154:	19017f05 	stmdbne	r1, {r0, r2, r8, r9, sl, fp, ip, sp, lr}
    e158:	14000001 	strne	r0, [r0], #-1
    e15c:	00578811 	subseq	r8, r7, r1, lsl r8
    e160:	01810500 	orreq	r0, r1, r0, lsl #10
    e164:	00000025 	andeq	r0, r0, r5, lsr #32
    e168:	56c01118 			; <UNDEFINED> instruction: 0x56c01118
    e16c:	83050000 	movwhi	r0, #20480	; 0x5000
    e170:	00002501 	andeq	r2, r0, r1, lsl #10
    e174:	3f111c00 	svccc	0x00111c00
    e178:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    e17c:	04dc0184 	ldrbeq	r0, [ip], #388	; 0x184
    e180:	12200000 	eorne	r0, r0, #0
    e184:	00706d5f 	rsbseq	r6, r0, pc, asr sp
    e188:	df018605 	svcle	0x00018605
    e18c:	24000006 	strcs	r0, [r0], #-6
    e190:	00584f11 	subseq	r4, r8, r1, lsl pc
    e194:	01880500 	orreq	r0, r8, r0, lsl #10
    e198:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    e19c:	568a1128 	strpl	r1, [sl], r8, lsr #2
    e1a0:	8a050000 	bhi	14e1a8 <_Min_Stack_Size+0x14dfa8>
    e1a4:	00002501 	andeq	r2, r0, r1, lsl #10
    e1a8:	d2112c00 	andsle	r2, r1, #0, 24
    e1ac:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    e1b0:	0025018d 	eoreq	r0, r5, sp, lsl #3
    e1b4:	11300000 	teqne	r0, r0
    e1b8:	0000564c 	andeq	r5, r0, ip, asr #12
    e1bc:	19018e05 	stmdbne	r1, {r0, r2, r9, sl, fp, pc}
    e1c0:	34000001 	strcc	r0, [r0], #-1
    e1c4:	0056da11 	subseq	sp, r6, r1, lsl sl
    e1c8:	01900500 	orrseq	r0, r0, r0, lsl #10
    e1cc:	000006f6 	strdeq	r0, [r0], -r6
    e1d0:	59081138 	stmdbpl	r8, {r3, r4, r5, r8, ip}
    e1d4:	91050000 	mrsls	r0, (UNDEF: 5)
    e1d8:	0006fc01 	andeq	pc, r6, r1, lsl #24
    e1dc:	45113c00 	ldrmi	r3, [r1, #-3072]	; 0xfffff400
    e1e0:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
    e1e4:	01190192 			; <UNDEFINED> instruction: 0x01190192
    e1e8:	11400000 	mrsne	r0, (UNDEF: 64)
    e1ec:	000058ed 	andeq	r5, r0, sp, ror #17
    e1f0:	0d019505 	cfstr32eq	mvfx9, [r1, #-20]	; 0xffffffec
    e1f4:	44000007 	strmi	r0, [r0], #-7
    e1f8:	00562d11 	subseq	r2, r6, r1, lsl sp
    e1fc:	019d0500 	orrseq	r0, sp, r0, lsl #10
    e200:	00000557 	andeq	r0, r0, r7, asr r5
    e204:	56201148 	strtpl	r1, [r0], -r8, asr #2
    e208:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
    e20c:	00059201 	andeq	r9, r5, r1, lsl #4
    e210:	79115400 	ldmdbvc	r1, {sl, ip, lr}
    e214:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
    e218:	0719019f 			; <UNDEFINED> instruction: 0x0719019f
    e21c:	11580000 	cmpne	r8, r0
    e220:	000055d5 	ldrdeq	r5, [r0], -r5	; <UNPREDICTABLE>
    e224:	1901a005 	stmdbne	r1, {r0, r2, sp, pc}
    e228:	5c000001 	stcpl	0, cr0, [r0], {1}
    e22c:	3e040d00 	cdpcc	13, 0, cr0, cr4, cr0, {0}
    e230:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    e234:	00005811 	andeq	r5, r0, r1, lsl r8
    e238:	9ab30568 	bls	feccf7e0 <BootRAM+0xdc3ff81>
    e23c:	0f000004 	svceq	0x00000004
    e240:	0500705f 	streq	r7, [r0, #-95]	; 0xffffffa1
    e244:	000238b4 			; <UNDEFINED> instruction: 0x000238b4
    e248:	5f0f0000 	svcpl	0x000f0000
    e24c:	b5050072 	strlt	r0, [r5, #-114]	; 0xffffff8e
    e250:	00000025 	andeq	r0, r0, r5, lsr #32
    e254:	775f0f04 	ldrbvc	r0, [pc, -r4, lsl #30]
    e258:	25b60500 	ldrcs	r0, [r6, #1280]!	; 0x500
    e25c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e260:	00563c0b 	subseq	r3, r6, fp, lsl #24
    e264:	5ab70500 	bpl	fedcf66c <BootRAM+0xdd3fe0d>
    e268:	0c000000 	stceq	0, cr0, [r0], {-0}
    e26c:	0058ce0b 	subseq	ip, r8, fp, lsl #28
    e270:	5ab80500 	bpl	fee0f678 <BootRAM+0xdd7fe19>
    e274:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    e278:	66625f0f 	strbtvs	r5, [r2], -pc, lsl #30
    e27c:	13b90500 			; <UNDEFINED> instruction: 0x13b90500
    e280:	10000002 	andne	r0, r0, r2
    e284:	0055e10b 	subseq	lr, r5, fp, lsl #2
    e288:	25ba0500 	ldrcs	r0, [sl, #1280]!	; 0x500
    e28c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    e290:	000deb0b 	andeq	lr, sp, fp, lsl #22
    e294:	6abd0500 	bvs	fef4f69c <BootRAM+0xdebfe3d>
    e298:	1c000003 	stcne	0, cr0, [r0], {3}
    e29c:	0056250b 	subseq	r2, r6, fp, lsl #10
    e2a0:	17c10500 	strbne	r0, [r1, r0, lsl #10]
    e2a4:	20000001 	andcs	r0, r0, r1
    e2a8:	0040610b 	subeq	r6, r0, fp, lsl #2
    e2ac:	b8c30500 	stmialt	r3, {r8, sl}^
    e2b0:	24000004 	strcs	r0, [r0], #-4
    e2b4:	003fbc0b 	eorseq	fp, pc, fp, lsl #24
    e2b8:	e7c50500 	strb	r0, [r5, r0, lsl #10]
    e2bc:	28000004 	stmdacs	r0, {r2}
    e2c0:	0058770b 	subseq	r7, r8, fp, lsl #14
    e2c4:	0bc80500 	bleq	ff20f6cc <BootRAM+0xe17fe6d>
    e2c8:	2c000005 	stccs	0, cr0, [r0], {5}
    e2cc:	0059170b 	subseq	r1, r9, fp, lsl #14
    e2d0:	25c90500 	strbcs	r0, [r9, #1280]	; 0x500
    e2d4:	30000005 	andcc	r0, r0, r5
    e2d8:	62755f0f 	rsbsvs	r5, r5, #15, 30	; 0x3c
    e2dc:	13cc0500 	bicne	r0, ip, #0, 10
    e2e0:	34000002 	strcc	r0, [r0], #-2
    e2e4:	70755f0f 	rsbsvc	r5, r5, pc, lsl #30
    e2e8:	38cd0500 	stmiacc	sp, {r8, sl}^
    e2ec:	3c000002 	stccc	0, cr0, [r0], {2}
    e2f0:	72755f0f 	rsbsvc	r5, r5, #15, 30	; 0x3c
    e2f4:	25ce0500 	strbcs	r0, [lr, #1280]	; 0x500
    e2f8:	40000000 	andmi	r0, r0, r0
    e2fc:	0056100b 	subseq	r1, r6, fp
    e300:	2bd10500 	blcs	ff44f708 <BootRAM+0xe3bfea9>
    e304:	44000005 	strmi	r0, [r0], #-5
    e308:	0058f70b 	subseq	pc, r8, fp, lsl #14
    e30c:	3bd20500 	blcc	ff48f714 <BootRAM+0xe3ffeb5>
    e310:	47000005 	strmi	r0, [r0, -r5]
    e314:	626c5f0f 	rsbvs	r5, ip, #15, 30	; 0x3c
    e318:	13d50500 	bicsne	r0, r5, #0, 10
    e31c:	48000002 	stmdami	r0, {r1}
    e320:	0056430b 	subseq	r4, r6, fp, lsl #6
    e324:	25d80500 	ldrbcs	r0, [r8, #1280]	; 0x500
    e328:	50000000 	andpl	r0, r0, r0
    e32c:	0061250b 	rsbeq	r2, r1, fp, lsl #10
    e330:	88d90500 	ldmhi	r9, {r8, sl}^
    e334:	54000000 	strpl	r0, [r0], #-0
    e338:	003c010b 	eorseq	r0, ip, fp, lsl #2
    e33c:	0ce00500 	cfstr64eq	mvdx0, [r0]
    e340:	58000001 	stmdapl	r0, {r0}
    e344:	0058190b 	subseq	r1, r8, fp, lsl #18
    e348:	01e20500 	mvneq	r0, r0, lsl #10
    e34c:	5c000001 	stcpl	0, cr0, [r0], {1}
    e350:	0057670b 	subseq	r6, r7, fp, lsl #14
    e354:	25e30500 	strbcs	r0, [r3, #1280]!	; 0x500
    e358:	64000000 	strvs	r0, [r0], #-0
    e35c:	00251300 	eoreq	r1, r5, r0, lsl #6
    e360:	04b80000 	ldrteq	r0, [r8], #0
    e364:	6a140000 	bvs	50e36c <_Min_Stack_Size+0x50e16c>
    e368:	14000003 	strne	r0, [r0], #-3
    e36c:	00000117 	andeq	r0, r0, r7, lsl r1
    e370:	00011914 	andeq	r1, r1, r4, lsl r9
    e374:	00251400 	eoreq	r1, r5, r0, lsl #8
    e378:	0d000000 	stceq	0, cr0, [r0, #-0]
    e37c:	00049a04 	andeq	r9, r4, r4, lsl #20
    e380:	00251300 	eoreq	r1, r5, r0, lsl #6
    e384:	04dc0000 	ldrbeq	r0, [ip], #0
    e388:	6a140000 	bvs	50e390 <_Min_Stack_Size+0x50e190>
    e38c:	14000003 	strne	r0, [r0], #-3
    e390:	00000117 	andeq	r0, r0, r7, lsl r1
    e394:	0004dc14 	andeq	sp, r4, r4, lsl ip
    e398:	00251400 	eoreq	r1, r5, r0, lsl #8
    e39c:	0d000000 	stceq	0, cr0, [r0, #-0]
    e3a0:	0004e204 	andeq	lr, r4, r4, lsl #4
    e3a4:	011f1500 	tsteq	pc, r0, lsl #10
    e3a8:	040d0000 	streq	r0, [sp], #-0
    e3ac:	000004be 			; <UNDEFINED> instruction: 0x000004be
    e3b0:	00009313 	andeq	r9, r0, r3, lsl r3
    e3b4:	00050b00 	andeq	r0, r5, r0, lsl #22
    e3b8:	036a1400 	cmneq	sl, #0, 8
    e3bc:	17140000 	ldrne	r0, [r4, -r0]
    e3c0:	14000001 	strne	r0, [r0], #-1
    e3c4:	00000093 	muleq	r0, r3, r0
    e3c8:	00002514 	andeq	r2, r0, r4, lsl r5
    e3cc:	040d0000 	streq	r0, [sp], #-0
    e3d0:	000004ed 	andeq	r0, r0, sp, ror #9
    e3d4:	00002513 	andeq	r2, r0, r3, lsl r5
    e3d8:	00052500 	andeq	r2, r5, r0, lsl #10
    e3dc:	036a1400 	cmneq	sl, #0, 8
    e3e0:	17140000 	ldrne	r0, [r4, -r0]
    e3e4:	00000001 	andeq	r0, r0, r1
    e3e8:	0511040d 	ldreq	r0, [r1, #-1037]	; 0xfffffbf3
    e3ec:	53080000 	movwpl	r0, #32768	; 0x8000
    e3f0:	3b000000 	blcc	e3f8 <_Min_Stack_Size+0xe1f8>
    e3f4:	09000005 	stmdbeq	r0, {r0, r2}
    e3f8:	000000d9 	ldrdeq	r0, [r0], -r9
    e3fc:	53080002 	movwpl	r0, #32770	; 0x8002
    e400:	4b000000 	blmi	e408 <_Min_Stack_Size+0xe208>
    e404:	09000005 	stmdbeq	r0, {r0, r2}
    e408:	000000d9 	ldrdeq	r0, [r0], -r9
    e40c:	ff050000 			; <UNDEFINED> instruction: 0xff050000
    e410:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
    e414:	0370011d 	cmneq	r0, #1073741831	; 0x40000007
    e418:	e4100000 	ldr	r0, [r0], #-0
    e41c:	0c000060 	stceq	0, cr0, [r0], {96}	; 0x60
    e420:	8c012105 	stfhis	f2, [r1], {5}
    e424:	11000005 	tstne	r0, r5
    e428:	00005827 	andeq	r5, r0, r7, lsr #16
    e42c:	8c012305 	stchi	3, cr2, [r1], {5}
    e430:	00000005 	andeq	r0, r0, r5
    e434:	0056df11 	subseq	sp, r6, r1, lsl pc
    e438:	01240500 			; <UNDEFINED> instruction: 0x01240500
    e43c:	00000025 	andeq	r0, r0, r5, lsr #32
    e440:	57e81104 	strbpl	r1, [r8, r4, lsl #2]!
    e444:	25050000 	strcs	r0, [r5, #-0]
    e448:	00059201 	andeq	r9, r5, r1, lsl #4
    e44c:	0d000800 	stceq	8, cr0, [r0, #-0]
    e450:	00055704 	andeq	r5, r5, r4, lsl #14
    e454:	4b040d00 	blmi	11185c <_Min_Stack_Size+0x11165c>
    e458:	10000005 	andne	r0, r0, r5
    e45c:	000055b3 			; <UNDEFINED> instruction: 0x000055b3
    e460:	013d0518 	teqeq	sp, r8, lsl r5
    e464:	000005da 	ldrdeq	r0, [r0], -sl
    e468:	00586111 	subseq	r6, r8, r1, lsl r1
    e46c:	013e0500 	teqeq	lr, r0, lsl #10
    e470:	000005da 	ldrdeq	r0, [r0], -sl
    e474:	58951100 	ldmpl	r5, {r8, ip}
    e478:	3f050000 	svccc	0x00050000
    e47c:	0005da01 	andeq	sp, r5, r1, lsl #20
    e480:	b4110600 	ldrlt	r0, [r1], #-1536	; 0xfffffa00
    e484:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    e488:	00610140 	rsbeq	r0, r1, r0, asr #2
    e48c:	110c0000 	mrsne	r0, (UNDEF: 12)
    e490:	00005822 	andeq	r5, r0, r2, lsr #16
    e494:	76014305 	strvc	r4, [r1], -r5, lsl #6
    e498:	10000000 	andne	r0, r0, r0
    e49c:	00610800 	rsbeq	r0, r1, r0, lsl #16
    e4a0:	05ea0000 	strbeq	r0, [sl, #0]!
    e4a4:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
    e4a8:	02000000 	andeq	r0, r0, #0
    e4ac:	56351000 	ldrtpl	r1, [r5], -r0
    e4b0:	05100000 	ldreq	r0, [r0, #-0]
    e4b4:	062c0156 			; <UNDEFINED> instruction: 0x062c0156
    e4b8:	52110000 	andspl	r0, r1, #0
    e4bc:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
    e4c0:	01840159 	orreq	r0, r4, r9, asr r1
    e4c4:	11000000 	mrsne	r0, (UNDEF: 0)
    e4c8:	00005699 	muleq	r0, r9, r6
    e4cc:	25015a05 	strcs	r5, [r1, #-2565]	; 0xfffff5fb
    e4d0:	04000000 	streq	r0, [r0], #-0
    e4d4:	00592c11 	subseq	r2, r9, r1, lsl ip
    e4d8:	015b0500 	cmpeq	fp, r0, lsl #10
    e4dc:	00000184 	andeq	r0, r0, r4, lsl #3
    e4e0:	579a1108 	ldrpl	r1, [sl, r8, lsl #2]
    e4e4:	5c050000 	stcpl	0, cr0, [r5], {-0}
    e4e8:	00062c01 	andeq	r2, r6, r1, lsl #24
    e4ec:	0d000c00 	stceq	12, cr0, [r0, #-0]
    e4f0:	00018404 	andeq	r8, r1, r4, lsl #8
    e4f4:	58a81000 	stmiapl	r8!, {ip}
    e4f8:	05500000 	ldrbeq	r0, [r0, #-0]
    e4fc:	06cf0160 	strbeq	r0, [pc], r0, ror #2
    e500:	9b110000 	blls	44e508 <_Min_Stack_Size+0x44e308>
    e504:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    e508:	01190163 	tsteq	r9, r3, ror #2
    e50c:	11000000 	mrsne	r0, (UNDEF: 0)
    e510:	0000582d 	andeq	r5, r0, sp, lsr #16
    e514:	01016405 	tsteq	r1, r5, lsl #8
    e518:	04000001 	streq	r0, [r0], #-1
    e51c:	0055f911 	subseq	pc, r5, r1, lsl r9	; <UNPREDICTABLE>
    e520:	01650500 	cmneq	r5, r0, lsl #10
    e524:	00000101 	andeq	r0, r0, r1, lsl #2
    e528:	591e110c 	ldmdbpl	lr, {r2, r3, r8, ip}
    e52c:	66050000 	strvs	r0, [r5], -r0
    e530:	00010101 	andeq	r0, r1, r1, lsl #2
    e534:	e3111400 	tst	r1, #0, 8
    e538:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    e53c:	06cf0167 	strbeq	r0, [pc], r7, ror #2
    e540:	111c0000 	tstne	ip, r0
    e544:	000058c1 	andeq	r5, r0, r1, asr #17
    e548:	25016805 	strcs	r6, [r1, #-2053]	; 0xfffff7fb
    e54c:	24000000 	strcs	r0, [r0], #-0
    e550:	00566511 	subseq	r6, r6, r1, lsl r5
    e554:	01690500 	cmneq	r9, r0, lsl #10
    e558:	00000101 	andeq	r0, r0, r1, lsl #2
    e55c:	55ea1128 	strbpl	r1, [sl, #296]!	; 0x128
    e560:	6a050000 	bvs	14e568 <_Min_Stack_Size+0x14e368>
    e564:	00010101 	andeq	r0, r1, r1, lsl #2
    e568:	54113000 	ldrpl	r3, [r1], #-0
    e56c:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    e570:	0101016b 	tsteq	r1, fp, ror #2
    e574:	11380000 	teqne	r8, r0
    e578:	000055c6 	andeq	r5, r0, r6, asr #11
    e57c:	01016c05 	tsteq	r1, r5, lsl #24
    e580:	40000001 	andmi	r0, r0, r1
    e584:	0056af11 	subseq	sl, r6, r1, lsl pc
    e588:	016d0500 	cmneq	sp, r0, lsl #10
    e58c:	00000101 	andeq	r0, r0, r1, lsl #2
    e590:	1f080048 	svcne	0x00080048
    e594:	df000001 	svcle	0x00000001
    e598:	09000006 	stmdbeq	r0, {r1, r2}
    e59c:	000000d9 	ldrdeq	r0, [r0], -r9
    e5a0:	040d0007 	streq	r0, [sp], #-7
    e5a4:	000005ea 	andeq	r0, r0, sl, ror #11
    e5a8:	0006f016 	andeq	pc, r6, r6, lsl r0	; <UNPREDICTABLE>
    e5ac:	036a1400 	cmneq	sl, #0, 8
    e5b0:	0d000000 	stceq	0, cr0, [r0, #-0]
    e5b4:	0006e504 	andeq	lr, r6, r4, lsl #10
    e5b8:	98040d00 	stmdals	r4, {r8, sl, fp}
    e5bc:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    e5c0:	00019a04 	andeq	r9, r1, r4, lsl #20
    e5c4:	070d1600 	streq	r1, [sp, -r0, lsl #12]
    e5c8:	25140000 	ldrcs	r0, [r4, #-0]
    e5cc:	00000000 	andeq	r0, r0, r0
    e5d0:	0713040d 	ldreq	r0, [r3, -sp, lsl #8]
    e5d4:	040d0000 	streq	r0, [sp], #-0
    e5d8:	00000702 	andeq	r0, r0, r2, lsl #14
    e5dc:	0632040d 	ldrteq	r0, [r2], -sp, lsl #8
    e5e0:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    e5e4:	06000059 			; <UNDEFINED> instruction: 0x06000059
    e5e8:	00072a28 	andeq	r2, r7, r8, lsr #20
    e5ec:	59a50e00 	stmibpl	r5!, {r9, sl, fp}
    e5f0:	07040000 	streq	r0, [r4, -r0]
    e5f4:	00074100 	andeq	r4, r7, r0, lsl #2
    e5f8:	59ed1700 	stmibpl	sp!, {r8, r9, sl, ip}^
    e5fc:	01170000 	tsteq	r7, r0
    e600:	00000000 	andeq	r0, r0, r0
    e604:	00580103 	subseq	r0, r8, r3, lsl #2
    e608:	4b350800 	blmi	d50610 <_Min_Stack_Size+0xd50410>
    e60c:	03000005 	movweq	r0, #5
    e610:	000059a7 	andeq	r5, r0, r7, lsr #19
    e614:	071f6206 	ldreq	r6, [pc, -r6, lsl #4]
    e618:	3b180000 	blcc	60e620 <_Min_Stack_Size+0x60e420>
    e61c:	08000059 	stmdaeq	r0, {r0, r3, r4, r6}
    e620:	002501cd 	eoreq	r0, r5, sp, asr #3
    e624:	039c0000 	orrseq	r0, ip, #0
    e628:	008c0800 	addeq	r0, ip, r0, lsl #16
    e62c:	9c010000 	stcls	0, cr0, [r1], {-0}
    e630:	0000081e 	andeq	r0, r0, lr, lsl r8
    e634:	72747019 	rsbsvc	r7, r4, #25
    e638:	6a220100 	bvs	88ea40 <_Min_Stack_Size+0x88e840>
    e63c:	2f000003 	svccs	0x00000003
    e640:	19000002 	stmdbne	r0, {r1}
    e644:	00727473 	rsbseq	r7, r2, r3, ror r4
    e648:	081e2201 	ldmdaeq	lr, {r0, r9, sp}
    e64c:	02b10000 	adcseq	r0, r1, #0
    e650:	a41a0000 	ldrge	r0, [sl], #-0
    e654:	0100005d 	qaddeq	r0, sp, r0
    e658:	00002c22 	andeq	r2, r0, r2, lsr #24
    e65c:	00030e00 	andeq	r0, r3, r0, lsl #28
    e660:	6d661b00 	vstmdbvs	r6!, {d17-d16}
    e664:	22010074 	andcs	r0, r1, #116	; 0x74
    e668:	00000823 	andeq	r0, r0, r3, lsr #16
    e66c:	1c7c9102 	ldfnep	f1, [ip], #-8
    e670:	7465721d 	strbtvc	r7, [r5], #-541	; 0xfffffde3
    e674:	25300100 	ldrcs	r0, [r0, #-256]!	; 0xffffff00
    e678:	92000000 	andls	r0, r0, #0
    e67c:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    e680:	01007061 	tsteq	r0, r1, rrx
    e684:	00074c31 	andeq	r4, r7, r1, lsr ip
    e688:	fc910300 	ldc2	3, cr0, [r1], {0}
    e68c:	00661e7e 	rsbeq	r1, r6, lr, ror lr
    e690:	07413201 	strbeq	r3, [r1, -r1, lsl #4]
    e694:	91030000 	mrsls	r0, (UNDEF: 3)
    e698:	d41f7f80 	ldrle	r7, [pc], #-3968	; e6a0 <_Min_Stack_Size+0xe4a0>
    e69c:	00080003 	andeq	r0, r8, r3
    e6a0:	ff000009 			; <UNDEFINED> instruction: 0xff000009
    e6a4:	20000007 	andcs	r0, r0, r7
    e6a8:	75025001 	strvc	r5, [r2, #-1]
    e6ac:	51012000 	mrspl	r2, (UNDEF: 1)
    e6b0:	7ef89103 	nrmvce	f1, f3
    e6b4:	03520120 	cmpeq	r2, #32, 2
    e6b8:	20067491 	mulcs	r6, r1, r4
    e6bc:	76025301 	strvc	r5, [r2], -r1, lsl #6
    e6c0:	fc210000 	stc2	0, cr0, [r1], #-0
    e6c4:	00080003 	andeq	r0, r8, r3
    e6c8:	20000009 	andcs	r0, r0, r9
    e6cc:	91035101 	tstls	r3, r1, lsl #2
    e6d0:	01207ef8 	strdeq	r7, [r0, -r8]!
    e6d4:	74910352 	ldrvc	r0, [r1], #850	; 0x352
    e6d8:	53012006 	movwpl	r2, #4102	; 0x1006
    e6dc:	00007602 	andeq	r7, r0, r2, lsl #12
    e6e0:	01192200 	tsteq	r9, r0, lsl #4
    e6e4:	dc220000 	stcle	0, cr0, [r2], #-0
    e6e8:	23000004 	movwcs	r0, #4
    e6ec:	000059f2 	strdeq	r5, [r0], -r2
    e6f0:	0025fd08 	eoreq	pc, r5, r8, lsl #26
    e6f4:	04280000 	strteq	r0, [r8], #-0
    e6f8:	00980800 	addseq	r0, r8, r0, lsl #16
    e6fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    e700:	000008f4 	strdeq	r0, [r0], -r4
    e704:	72747319 	rsbsvc	r7, r4, #1677721600	; 0x64000000
    e708:	1e550100 	rdfnes	f0, f5, f0
    e70c:	bb000008 	bllt	e734 <_Min_Stack_Size+0xe534>
    e710:	1a000003 	bne	e724 <_Min_Stack_Size+0xe524>
    e714:	00005da4 	andeq	r5, r0, r4, lsr #27
    e718:	002c5501 	eoreq	r5, ip, r1, lsl #10
    e71c:	04260000 	strteq	r0, [r6], #-0
    e720:	661b0000 	ldrvs	r0, [fp], -r0
    e724:	0100746d 	tsteq	r0, sp, ror #8
    e728:	00082355 	andeq	r2, r8, r5, asr r3
    e72c:	78910200 	ldmvc	r1, {r9}
    e730:	65721d1c 	ldrbvs	r1, [r2, #-3356]!	; 0xfffff2e4
    e734:	61010074 	tstvs	r1, r4, ror r0
    e738:	00000025 	andeq	r0, r0, r5, lsr #32
    e73c:	0000049c 	muleq	r0, ip, r4
    e740:	0070611e 	rsbseq	r6, r0, lr, lsl r1
    e744:	074c6201 	strbeq	r6, [ip, -r1, lsl #4]
    e748:	91030000 	mrsls	r0, (UNDEF: 3)
    e74c:	661e7ef4 			; <UNDEFINED> instruction: 0x661e7ef4
    e750:	41630100 	cmnmi	r3, r0, lsl #2
    e754:	03000007 	movweq	r0, #7
    e758:	1d7ef891 	ldclne	8, cr15, [lr, #-580]!	; 0xfffffdbc
    e75c:	00727470 	rsbseq	r7, r2, r0, ror r4
    e760:	036a6401 	cmneq	sl, #16777216	; 0x1000000
    e764:	04c50000 	strbeq	r0, [r5], #0
    e768:	641f0000 	ldrvs	r0, [pc], #-0	; e770 <_Min_Stack_Size+0xe570>
    e76c:	00080004 	andeq	r0, r8, r4
    e770:	cf000009 	svcgt	0x00000009
    e774:	20000008 	andcs	r0, r0, r8
    e778:	75025001 	strvc	r5, [r2, #-1]
    e77c:	51012000 	mrspl	r2, (UNDEF: 1)
    e780:	7ee89103 	urdvce	f1, f3
    e784:	03520120 	cmpeq	r2, #32, 2
    e788:	20066891 	mulcs	r6, r1, r8
    e78c:	76025301 	strvc	r5, [r2], -r1, lsl #6
    e790:	8e210000 	cdphi	0, 2, cr0, cr1, cr0, {0}
    e794:	00080004 	andeq	r0, r8, r4
    e798:	20000009 	andcs	r0, r0, r9
    e79c:	75025001 	strvc	r5, [r2, #-1]
    e7a0:	51012000 	mrspl	r2, (UNDEF: 1)
    e7a4:	7ee89103 	urdvce	f1, f3
    e7a8:	03520120 	cmpeq	r2, #32, 2
    e7ac:	20066891 	mulcs	r6, r1, r8
    e7b0:	76025301 	strvc	r5, [r2], -r1, lsl #6
    e7b4:	24000000 	strcs	r0, [r0], #-0
    e7b8:	00005c7c 	andeq	r5, r0, ip, ror ip
    e7bc:	6a02fd05 	bvs	cdbd8 <_Min_Stack_Size+0xcd9d8>
    e7c0:	25000003 	strcs	r0, [r0, #-3]
    e7c4:	000059fb 	strdeq	r5, [r0], -fp
    e7c8:	000059fb 	strdeq	r5, [r0], -fp
    e7cc:	19009a09 	stmdbne	r0, {r0, r3, r9, fp, ip, pc}
    e7d0:	04000001 	streq	r0, [r0], #-1
    e7d4:	002fc300 	eoreq	ip, pc, r0, lsl #6
    e7d8:	bf010400 	svclt	0x00010400
    e7dc:	0c000054 	stceq	0, cr0, [r0], {84}	; 0x54
    e7e0:	00005a0f 	andeq	r5, r0, pc, lsl #20
    e7e4:	00005518 	andeq	r5, r0, r8, lsl r5
    e7e8:	080004c0 	stmdaeq	r0, {r6, r7, sl}
    e7ec:	000000ce 	andeq	r0, r0, lr, asr #1
    e7f0:	0000645a 	andeq	r6, r0, sl, asr r4
    e7f4:	69050402 	stmdbvs	r5, {r1, sl}
    e7f8:	0300746e 	movweq	r7, #1134	; 0x46e
    e7fc:	01ce0704 	biceq	r0, lr, r4, lsl #14
    e800:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    e804:	0000b805 	andeq	fp, r0, r5, lsl #16
    e808:	04080300 	streq	r0, [r8], #-768	; 0xfffffd00
    e80c:	000002f8 	strdeq	r0, [r0], -r8
    e810:	92060103 	andls	r0, r6, #-1073741824	; 0xc0000000
    e814:	03000001 	movweq	r0, #1
    e818:	01900801 	orrseq	r0, r0, r1, lsl #16
    e81c:	02030000 	andeq	r0, r3, #0
    e820:	00009505 	andeq	r9, r0, r5, lsl #10
    e824:	07020300 	streq	r0, [r2, -r0, lsl #6]
    e828:	000001f2 	strdeq	r0, [r0], -r2
    e82c:	bd050403 	cfstrslt	mvf0, [r5, #-12]
    e830:	03000000 	movweq	r0, #0
    e834:	01c90704 	biceq	r0, r9, r4, lsl #14
    e838:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    e83c:	0001c407 	andeq	ip, r1, r7, lsl #8
    e840:	07040300 	streq	r0, [r4, -r0, lsl #6]
    e844:	00000059 	andeq	r0, r0, r9, asr r0
    e848:	007f0404 	rsbseq	r0, pc, r4, lsl #8
    e84c:	01030000 	mrseq	r0, (UNDEF: 3)
    e850:	00019908 	andeq	r9, r1, r8, lsl #18
    e854:	8c040400 	cfstrshi	mvf0, [r4], {-0}
    e858:	05000000 	streq	r0, [r0, #-0]
    e85c:	0000007f 	andeq	r0, r0, pc, ror r0
    e860:	005a0806 	subseq	r0, sl, r6, lsl #16
    e864:	791b0200 	ldmdbvc	fp, {r9}
    e868:	c0000000 	andgt	r0, r0, r0
    e86c:	ce080004 	cdpgt	0, 0, cr0, cr8, cr4, {0}
    e870:	01000000 	mrseq	r0, (UNDEF: 0)
    e874:	00010b9c 	muleq	r1, ip, fp
    e878:	31730700 	cmncc	r3, r0, lsl #14
    e87c:	863d0100 	ldrthi	r0, [sp], -r0, lsl #2
    e880:	f9000000 			; <UNDEFINED> instruction: 0xf9000000
    e884:	07000004 	streq	r0, [r0, -r4]
    e888:	3d010069 	stccc	0, cr0, [r1, #-420]	; 0xfffffe5c
    e88c:	00000025 	andeq	r0, r0, r5, lsr #32
    e890:	00000533 	andeq	r0, r0, r3, lsr r5
    e894:	01007308 	tsteq	r0, r8, lsl #6
    e898:	00010b41 	andeq	r0, r1, r1, asr #22
    e89c:	00058600 	andeq	r8, r5, r0, lsl #12
    e8a0:	00630800 	rsbeq	r0, r3, r0, lsl #16
    e8a4:	00484201 	subeq	r4, r8, r1, lsl #4
    e8a8:	06320000 	ldrteq	r0, [r2], -r0
    e8ac:	cc090000 	stcgt	0, cr0, [r9], {-0}
    e8b0:	0100001c 	tsteq	r0, ip, lsl r0
    e8b4:	00006445 	andeq	r6, r0, r5, asr #8
    e8b8:	00068500 	andeq	r8, r6, r0, lsl #10
    e8bc:	006a0800 	rsbeq	r0, sl, r0, lsl #16
    e8c0:	00644501 	rsbeq	r4, r4, r1, lsl #10
    e8c4:	06c40000 	strbeq	r0, [r4], r0
    e8c8:	b2090000 	andlt	r0, r9, #0
    e8cc:	01000054 	qaddeq	r0, r4, r0
    e8d0:	00011646 	andeq	r1, r1, r6, asr #12
    e8d4:	0006f100 	andeq	pc, r6, r0, lsl #2
    e8d8:	04040000 	streq	r0, [r4], #-0
    e8dc:	00000111 	andeq	r0, r0, r1, lsl r1
    e8e0:	00004805 	andeq	r4, r0, r5, lsl #16
    e8e4:	64040400 	strvs	r0, [r4], #-1024	; 0xfffffc00
    e8e8:	00000000 	andeq	r0, r0, r0
    e8ec:	000000c0 	andeq	r0, r0, r0, asr #1
    e8f0:	30460004 	subcc	r0, r6, r4
    e8f4:	01040000 	mrseq	r0, (UNDEF: 4)
    e8f8:	000054bf 			; <UNDEFINED> instruction: 0x000054bf
    e8fc:	005a440c 	subseq	r4, sl, ip, lsl #8
    e900:	005a7a00 	subseq	r7, sl, r0, lsl #20
    e904:	00107000 	andseq	r7, r0, r0
    e908:	00000000 	andeq	r0, r0, r0
    e90c:	00653400 	rsbeq	r3, r5, r0, lsl #8
    e910:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    e914:	00746e69 	rsbseq	r6, r4, r9, ror #28
    e918:	ce070403 	cdpgt	4, 0, cr0, cr7, cr3, {0}
    e91c:	03000001 	movweq	r0, #1
    e920:	00b80508 	adcseq	r0, r8, r8, lsl #10
    e924:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    e928:	0002f804 	andeq	pc, r2, r4, lsl #16
    e92c:	06010300 	streq	r0, [r1], -r0, lsl #6
    e930:	00000192 	muleq	r0, r2, r1
    e934:	90080103 	andls	r0, r8, r3, lsl #2
    e938:	03000001 	movweq	r0, #1
    e93c:	00950502 	addseq	r0, r5, r2, lsl #10
    e940:	02030000 	andeq	r0, r3, #0
    e944:	0001f207 	andeq	pc, r1, r7, lsl #4
    e948:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    e94c:	000000bd 	strheq	r0, [r0], -sp
    e950:	c9070403 	stmdbgt	r7, {r0, r1, sl}
    e954:	03000001 	movweq	r0, #1
    e958:	01c40708 	biceq	r0, r4, r8, lsl #14
    e95c:	04030000 	streq	r0, [r3], #-0
    e960:	00005907 	andeq	r5, r0, r7, lsl #18
    e964:	7f040400 	svcvc	0x00040400
    e968:	03000000 	movweq	r0, #0
    e96c:	01990801 	orrseq	r0, r9, r1, lsl #16
    e970:	04040000 	streq	r0, [r4], #-0
    e974:	0000008c 	andeq	r0, r0, ip, lsl #1
    e978:	00007f05 	andeq	r7, r0, r5, lsl #30
    e97c:	5a3d0600 	bpl	f50184 <_Min_Stack_Size+0xf4ff84>
    e980:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
    e984:	00000079 	andeq	r0, r0, r9, ror r0
    e988:	08000590 	stmdaeq	r0, {r4, r7, r8, sl}
    e98c:	000000ba 	strheq	r0, [r0], -sl
    e990:	64079c01 	strvs	r9, [r7], #-3073	; 0xfffff3ff
    e994:	01007473 	tsteq	r0, r3, ror r4
    e998:	0000792a 	andeq	r7, r0, sl, lsr #18
    e99c:	00071c00 	andeq	r1, r7, r0, lsl #24
    e9a0:	72730800 	rsbsvc	r0, r3, #0, 16
    e9a4:	2a010063 	bcs	4eb38 <_Min_Stack_Size+0x4e938>
    e9a8:	00000086 	andeq	r0, r0, r6, lsl #1
    e9ac:	00005101 	andeq	r5, r0, r1, lsl #2
    e9b0:	000000b8 	strheq	r0, [r0], -r8
    e9b4:	30b80004 	adcscc	r0, r8, r4
    e9b8:	01040000 	mrseq	r0, (UNDEF: 4)
    e9bc:	000054bf 			; <UNDEFINED> instruction: 0x000054bf
    e9c0:	005ade0c 	subseq	sp, sl, ip, lsl #28
    e9c4:	005a7a00 	subseq	r7, sl, r0, lsl #20
    e9c8:	00108000 	andseq	r8, r0, r0
    e9cc:	00000000 	andeq	r0, r0, r0
    e9d0:	0065e500 	rsbeq	lr, r5, r0, lsl #10
    e9d4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    e9d8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    e9dc:	005cec03 	subseq	lr, ip, r3, lsl #24
    e9e0:	37d80200 	ldrbcc	r0, [r8, r0, lsl #4]
    e9e4:	04000000 	streq	r0, [r0], #-0
    e9e8:	01ce0704 	biceq	r0, lr, r4, lsl #14
    e9ec:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    e9f0:	0000b805 	andeq	fp, r0, r5, lsl #16
    e9f4:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
    e9f8:	000002f8 	strdeq	r0, [r0], -r8
    e9fc:	92060104 	andls	r0, r6, #4, 2
    ea00:	04000001 	streq	r0, [r0], #-1
    ea04:	01900801 	orrseq	r0, r0, r1, lsl #16
    ea08:	02040000 	andeq	r0, r4, #0
    ea0c:	00009505 	andeq	r9, r0, r5, lsl #10
    ea10:	07020400 	streq	r0, [r2, -r0, lsl #8]
    ea14:	000001f2 	strdeq	r0, [r0], -r2
    ea18:	bd050404 	cfstrslt	mvf0, [r5, #-16]
    ea1c:	04000000 	streq	r0, [r0], #-0
    ea20:	01c90704 	biceq	r0, r9, r4, lsl #14
    ea24:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    ea28:	0001c407 	andeq	ip, r1, r7, lsl #8
    ea2c:	07040400 	streq	r0, [r4, -r0, lsl #8]
    ea30:	00000059 	andeq	r0, r0, r9, asr r0
    ea34:	99080104 	stmdbls	r8, {r2, r8}
    ea38:	05000001 	streq	r0, [r0, #-1]
    ea3c:	00009104 	andeq	r9, r0, r4, lsl #2
    ea40:	00840600 	addeq	r0, r4, r0, lsl #12
    ea44:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    ea48:	0300005b 	movweq	r0, #91	; 0x5b
    ea4c:	00002c21 	andeq	r2, r0, r1, lsr #24
    ea50:	00064c00 	andeq	r4, r6, r0, lsl #24
    ea54:	00005c08 	andeq	r5, r0, r8, lsl #24
    ea58:	089c0100 	ldmeq	ip, {r8}
    ea5c:	00727473 	rsbseq	r7, r2, r3, ror r4
    ea60:	008b3701 	addeq	r3, fp, r1, lsl #14
    ea64:	073d0000 	ldreq	r0, [sp, -r0]!
    ea68:	00000000 	andeq	r0, r0, r0
    ea6c:	000000f8 	strdeq	r0, [r0], -r8
    ea70:	31280004 			; <UNDEFINED> instruction: 0x31280004
    ea74:	01040000 	mrseq	r0, (UNDEF: 4)
    ea78:	000054bf 			; <UNDEFINED> instruction: 0x000054bf
    ea7c:	005b200c 	subseq	r2, fp, ip
    ea80:	00551800 	subseq	r1, r5, r0, lsl #16
    ea84:	0006a800 	andeq	sl, r6, r0, lsl #16
    ea88:	00009c08 	andeq	r9, r0, r8, lsl #24
    ea8c:	0066d000 	rsbeq	sp, r6, r0
    ea90:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    ea94:	00746e69 	rsbseq	r6, r4, r9, ror #28
    ea98:	005cec03 	subseq	lr, ip, r3, lsl #24
    ea9c:	37d80200 	ldrbcc	r0, [r8, r0, lsl #4]
    eaa0:	04000000 	streq	r0, [r0], #-0
    eaa4:	01ce0704 	biceq	r0, lr, r4, lsl #14
    eaa8:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    eaac:	0000b805 	andeq	fp, r0, r5, lsl #16
    eab0:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
    eab4:	000002f8 	strdeq	r0, [r0], -r8
    eab8:	92060104 	andls	r0, r6, #4, 2
    eabc:	04000001 	streq	r0, [r0], #-1
    eac0:	01900801 	orrseq	r0, r0, r1, lsl #16
    eac4:	02040000 	andeq	r0, r4, #0
    eac8:	00009505 	andeq	r9, r0, r5, lsl #10
    eacc:	07020400 	streq	r0, [r2, -r0, lsl #8]
    ead0:	000001f2 	strdeq	r0, [r0], -r2
    ead4:	bd050404 	cfstrslt	mvf0, [r5, #-16]
    ead8:	04000000 	streq	r0, [r0], #-0
    eadc:	01c90704 	biceq	r0, r9, r4, lsl #14
    eae0:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    eae4:	0001c407 	andeq	ip, r1, r7, lsl #8
    eae8:	07040400 	streq	r0, [r4, -r0, lsl #8]
    eaec:	00000059 	andeq	r0, r0, r9, asr r0
    eaf0:	99080104 	stmdbls	r8, {r2, r8}
    eaf4:	05000001 	streq	r0, [r0, #-1]
    eaf8:	00009104 	andeq	r9, r0, r4, lsl #2
    eafc:	00840600 	addeq	r0, r4, r0, lsl #12
    eb00:	4f070000 	svcmi	0x00070000
    eb04:	0300005b 	movweq	r0, #91	; 0x5b
    eb08:	00002523 	andeq	r2, r0, r3, lsr #10
    eb0c:	0006a800 	andeq	sl, r6, r0, lsl #16
    eb10:	00009c08 	andeq	r9, r0, r8, lsl #24
    eb14:	f59c0100 			; <UNDEFINED> instruction: 0xf59c0100
    eb18:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    eb1c:	01003173 	tsteq	r0, r3, ror r1
    eb20:	00008b3e 	andeq	r8, r0, lr, lsr fp
    eb24:	00075e00 	andeq	r5, r7, r0, lsl #28
    eb28:	32730800 	rsbscc	r0, r3, #0, 16
    eb2c:	8b3e0100 	blhi	f8ef34 <_Min_Stack_Size+0xf8ed34>
    eb30:	d4000000 	strle	r0, [r0], #-0
    eb34:	08000007 	stmdaeq	r0, {r0, r1, r2}
    eb38:	3e01006e 	cdpcc	0, 0, cr0, cr1, cr14, {3}
    eb3c:	0000002c 	andeq	r0, r0, ip, lsr #32
    eb40:	00000824 	andeq	r0, r0, r4, lsr #16
    eb44:	00316109 	eorseq	r6, r1, r9, lsl #2
    eb48:	00f55101 	rscseq	r5, r5, r1, lsl #2
    eb4c:	08950000 	ldmeq	r5, {}	; <UNPREDICTABLE>
    eb50:	61090000 	mrsvs	r0, (UNDEF: 9)
    eb54:	52010032 	andpl	r0, r1, #50	; 0x32
    eb58:	000000f5 	strdeq	r0, [r0], -r5
    eb5c:	000008d8 	ldrdeq	r0, [r0], -r8
    eb60:	6f040500 	svcvs	0x00040500
    eb64:	00000000 	andeq	r0, r0, r0
    eb68:	00000135 	andeq	r0, r0, r5, lsr r1
    eb6c:	31a90004 			; <UNDEFINED> instruction: 0x31a90004
    eb70:	01040000 	mrseq	r0, (UNDEF: 4)
    eb74:	000054bf 			; <UNDEFINED> instruction: 0x000054bf
    eb78:	005b5c0c 	subseq	r5, fp, ip, lsl #24
    eb7c:	00551800 	subseq	r1, r5, r0, lsl #16
    eb80:	00074400 	andeq	r4, r7, r0, lsl #8
    eb84:	00006608 	andeq	r6, r0, r8, lsl #12
    eb88:	00681100 	rsbeq	r1, r8, r0, lsl #2
    eb8c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    eb90:	00746e69 	rsbseq	r6, r4, r9, ror #28
    eb94:	005cec03 	subseq	lr, ip, r3, lsl #24
    eb98:	37d80200 	ldrbcc	r0, [r8, r0, lsl #4]
    eb9c:	04000000 	streq	r0, [r0], #-0
    eba0:	01ce0704 	biceq	r0, lr, r4, lsl #14
    eba4:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    eba8:	0000b805 	andeq	fp, r0, r5, lsl #16
    ebac:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
    ebb0:	000002f8 	strdeq	r0, [r0], -r8
    ebb4:	92060104 	andls	r0, r6, #4, 2
    ebb8:	04000001 	streq	r0, [r0], #-1
    ebbc:	01900801 	orrseq	r0, r0, r1, lsl #16
    ebc0:	02040000 	andeq	r0, r4, #0
    ebc4:	00009505 	andeq	r9, r0, r5, lsl #10
    ebc8:	07020400 	streq	r0, [r2, -r0, lsl #8]
    ebcc:	000001f2 	strdeq	r0, [r0], -r2
    ebd0:	bd050404 	cfstrslt	mvf0, [r5, #-16]
    ebd4:	04000000 	streq	r0, [r0], #-0
    ebd8:	01c90704 	biceq	r0, r9, r4, lsl #14
    ebdc:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    ebe0:	0001c407 	andeq	ip, r1, r7, lsl #8
    ebe4:	07040400 	streq	r0, [r4, -r0, lsl #8]
    ebe8:	00000059 	andeq	r0, r0, r9, asr r0
    ebec:	008a0405 	addeq	r0, sl, r5, lsl #8
    ebf0:	01040000 	mrseq	r0, (UNDEF: 4)
    ebf4:	00019908 	andeq	r9, r1, r8, lsl #18
    ebf8:	97040500 	strls	r0, [r4, -r0, lsl #10]
    ebfc:	06000000 	streq	r0, [r0], -r0
    ec00:	0000008a 	andeq	r0, r0, sl, lsl #1
    ec04:	005b9007 	subseq	r9, fp, r7
    ec08:	84240300 	strthi	r0, [r4], #-768	; 0xfffffd00
    ec0c:	44000000 	strmi	r0, [r0], #-0
    ec10:	66080007 	strvs	r0, [r8], -r7
    ec14:	01000000 	mrseq	r0, (UNDEF: 0)
    ec18:	00011d9c 	muleq	r1, ip, sp
    ec1c:	5b8b0800 	blpl	fe2d0c24 <BootRAM+0xd2413c5>
    ec20:	45010000 	strmi	r0, [r1, #-0]
    ec24:	0000011d 	andeq	r0, r0, sp, lsl r1
    ec28:	57095001 	strpl	r5, [r9, -r1]
    ec2c:	0100005b 	qaddeq	r0, fp, r0
    ec30:	00012245 	andeq	r2, r1, r5, asr #4
    ec34:	00090e00 	andeq	r0, r9, r0, lsl #28
    ec38:	58690900 	stmdapl	r9!, {r8, fp}^
    ec3c:	45010000 	strmi	r0, [r1, #-0]
    ec40:	0000002c 	andeq	r0, r0, ip, lsr #32
    ec44:	0000093a 	andeq	r0, r0, sl, lsr r9
    ec48:	7473640a 	ldrbtvc	r6, [r3], #-1034	; 0xfffffbf6
    ec4c:	845b0100 	ldrbhi	r0, [fp], #-256	; 0xffffff00
    ec50:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    ec54:	0a000009 	beq	ec80 <_Min_Stack_Size+0xea80>
    ec58:	00637273 	rsbeq	r7, r3, r3, ror r2
    ec5c:	00915c01 	addseq	r5, r1, r1, lsl #24
    ec60:	09c90000 	stmibeq	r9, {}^	; <UNPREDICTABLE>
    ec64:	980b0000 	stmdals	fp, {}	; <UNPREDICTABLE>
    ec68:	0100005b 	qaddeq	r0, fp, r0
    ec6c:	0001275d 	andeq	r2, r1, sp, asr r7
    ec70:	000a2500 	andeq	r2, sl, r0, lsl #10
    ec74:	5ba40b00 	blpl	fe91187c <BootRAM+0xd88201d>
    ec78:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    ec7c:	0000012d 	andeq	r0, r0, sp, lsr #2
    ec80:	00000a50 	andeq	r0, r0, r0, asr sl
    ec84:	00840c00 	addeq	r0, r4, r0, lsl #24
    ec88:	910c0000 	mrsls	r0, (UNDEF: 12)
    ec8c:	05000000 	streq	r0, [r0, #-0]
    ec90:	00006804 	andeq	r6, r0, r4, lsl #16
    ec94:	33040500 	movwcc	r0, #17664	; 0x4500
    ec98:	06000001 	streq	r0, [r0], -r1
    ec9c:	00000068 	andeq	r0, r0, r8, rrx
    eca0:	0007d600 	andeq	sp, r7, r0, lsl #12
    eca4:	4f000400 	svcmi	0x00000400
    eca8:	04000032 	streq	r0, [r0], #-50	; 0xffffffce
    ecac:	0054bf01 	subseq	fp, r4, r1, lsl #30
    ecb0:	5c480c00 	mcrrpl	12, 0, r0, r8, cr0
    ecb4:	5bde0000 	blpl	ff78ecbc <BootRAM+0xe6ff45d>
    ecb8:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
    ecbc:	04020000 	streq	r0, [r2], #-0
    ecc0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    ecc4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    ecc8:	000001ce 	andeq	r0, r0, lr, asr #3
    eccc:	b8050803 	stmdalt	r5, {r0, r1, fp}
    ecd0:	03000000 	movweq	r0, #0
    ecd4:	02f80408 	rscseq	r0, r8, #8, 8	; 0x8000000
    ecd8:	01030000 	mrseq	r0, (UNDEF: 3)
    ecdc:	00019206 	andeq	r9, r1, r6, lsl #4
    ece0:	08010300 	stmdaeq	r1, {r8, r9}
    ece4:	00000190 	muleq	r0, r0, r1
    ece8:	95050203 	strls	r0, [r5, #-515]	; 0xfffffdfd
    ecec:	03000000 	movweq	r0, #0
    ecf0:	01f20702 	mvnseq	r0, r2, lsl #14
    ecf4:	04030000 	streq	r0, [r3], #-0
    ecf8:	0000bd05 	andeq	fp, r0, r5, lsl #26
    ecfc:	07040300 	streq	r0, [r4, -r0, lsl #6]
    ed00:	000001c9 	andeq	r0, r0, r9, asr #3
    ed04:	c4070803 	strgt	r0, [r7], #-2051	; 0xfffff7fd
    ed08:	04000001 	streq	r0, [r0], #-1
    ed0c:	000057a4 	andeq	r5, r0, r4, lsr #15
    ed10:	001d0701 	andseq	r0, sp, r1, lsl #14
    ed14:	93040000 	movwls	r0, #16384	; 0x4000
    ed18:	02000057 	andeq	r0, r0, #87	; 0x57
    ed1c:	0000552c 	andeq	r5, r0, ip, lsr #10
    ed20:	587d0400 	ldmdapl	sp!, {sl}^
    ed24:	72020000 	andvc	r0, r2, #0
    ed28:	00000055 	andeq	r0, r0, r5, asr r0
    ed2c:	00576005 	subseq	r6, r7, r5
    ed30:	01650300 	cmneq	r5, r0, lsl #6
    ed34:	00000024 	andeq	r0, r0, r4, lsr #32
    ed38:	a6020406 	strge	r0, [r2], -r6, lsl #8
    ed3c:	000000b6 	strheq	r0, [r0], -r6
    ed40:	00575a07 	subseq	r5, r7, r7, lsl #20
    ed44:	8ba80200 	blhi	fea0f54c <BootRAM+0xd97fced>
    ed48:	07000000 	streq	r0, [r0, -r0]
    ed4c:	000056a8 	andeq	r5, r0, r8, lsr #13
    ed50:	00b6a902 	adcseq	sl, r6, r2, lsl #18
    ed54:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    ed58:	00000040 	andeq	r0, r0, r0, asr #32
    ed5c:	000000c6 	andeq	r0, r0, r6, asr #1
    ed60:	0000c609 	andeq	ip, r0, r9, lsl #12
    ed64:	03000300 	movweq	r0, #768	; 0x300
    ed68:	00590704 	subseq	r0, r9, r4, lsl #14
    ed6c:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
    ed70:	00eea302 	rsceq	sl, lr, r2, lsl #6
    ed74:	670b0000 	strvs	r0, [fp, -r0]
    ed78:	02000058 	andeq	r0, r0, #88	; 0x58
    ed7c:	00001da5 	andeq	r1, r0, r5, lsr #27
    ed80:	6f0b0000 	svcvs	0x000b0000
    ed84:	02000058 	andeq	r0, r0, #88	; 0x58
    ed88:	000097aa 	andeq	r9, r0, sl, lsr #15
    ed8c:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
    ed90:	00005806 	andeq	r5, r0, r6, lsl #16
    ed94:	00cdab02 	sbceq	sl, sp, r2, lsl #22
    ed98:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
    ed9c:	02000056 	andeq	r0, r0, #86	; 0x56
    eda0:	00006aaf 	andeq	r6, r0, pc, lsr #21
    eda4:	0d040c00 	stceq	12, cr0, [r4, #-0]
    eda8:	00010c04 	andeq	r0, r1, r4, lsl #24
    edac:	08010300 	stmdaeq	r1, {r8, r9}
    edb0:	00000199 	muleq	r0, r9, r1
    edb4:	0058b904 	subseq	fp, r8, r4, lsl #18
    edb8:	5c160400 	cfldrspl	mvf0, [r6], {-0}
    edbc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    edc0:	00005682 	andeq	r5, r0, r2, lsl #13
    edc4:	712d0418 			; <UNDEFINED> instruction: 0x712d0418
    edc8:	0b000001 	bleq	edd4 <_Min_Stack_Size+0xebd4>
    edcc:	00005827 	andeq	r5, r0, r7, lsr #16
    edd0:	01712f04 	cmneq	r1, r4, lsl #30
    edd4:	0f000000 	svceq	0x00000000
    edd8:	04006b5f 	streq	r6, [r0], #-2911	; 0xfffff4a1
    eddc:	00001d30 	andeq	r1, r0, r0, lsr sp
    ede0:	590b0400 	stmdbpl	fp, {sl}
    ede4:	04000058 	streq	r0, [r0], #-88	; 0xffffffa8
    ede8:	00001d30 	andeq	r1, r0, r0, lsr sp
    edec:	730b0800 	movwvc	r0, #47104	; 0xb800
    edf0:	04000056 	streq	r0, [r0], #-86	; 0xffffffaa
    edf4:	00001d30 	andeq	r1, r0, r0, lsr sp
    edf8:	d40b0c00 	strle	r0, [fp], #-3072	; 0xfffff400
    edfc:	04000058 	streq	r0, [r0], #-88	; 0xffffffa8
    ee00:	00001d30 	andeq	r1, r0, r0, lsr sp
    ee04:	5f0f1000 	svcpl	0x000f1000
    ee08:	31040078 	tstcc	r4, r8, ror r0
    ee0c:	00000177 	andeq	r0, r0, r7, ror r1
    ee10:	040d0014 	streq	r0, [sp], #-20	; 0xffffffec
    ee14:	0000011e 	andeq	r0, r0, lr, lsl r1
    ee18:	00011308 	andeq	r1, r1, r8, lsl #6
    ee1c:	00018700 	andeq	r8, r1, r0, lsl #14
    ee20:	00c60900 	sbceq	r0, r6, r0, lsl #18
    ee24:	00000000 	andeq	r0, r0, r0
    ee28:	0056a30e 	subseq	sl, r6, lr, lsl #6
    ee2c:	35042400 	strcc	r2, [r4, #-1024]	; 0xfffffc00
    ee30:	00000200 	andeq	r0, r0, r0, lsl #4
    ee34:	0056070b 	subseq	r0, r6, fp, lsl #14
    ee38:	1d370400 	cfldrsne	mvf0, [r7, #-0]
    ee3c:	00000000 	andeq	r0, r0, r0
    ee40:	00588c0b 	subseq	r8, r8, fp, lsl #24
    ee44:	1d380400 	cfldrsne	mvf0, [r8, #-0]
    ee48:	04000000 	streq	r0, [r0], #-0
    ee4c:	0056160b 	subseq	r1, r6, fp, lsl #12
    ee50:	1d390400 	cfldrsne	mvf0, [r9, #-0]
    ee54:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    ee58:	0059310b 	subseq	r3, r9, fp, lsl #2
    ee5c:	1d3a0400 	cfldrsne	mvf0, [sl, #-0]
    ee60:	0c000000 	stceq	0, cr0, [r0], {-0}
    ee64:	00577f0b 	subseq	r7, r7, fp, lsl #30
    ee68:	1d3b0400 	cfldrsne	mvf0, [fp, #-0]
    ee6c:	10000000 	andne	r0, r0, r0
    ee70:	00576f0b 	subseq	r6, r7, fp, lsl #30
    ee74:	1d3c0400 	cfldrsne	mvf0, [ip, #-0]
    ee78:	14000000 	strne	r0, [r0], #-0
    ee7c:	0058d90b 	subseq	sp, r8, fp, lsl #18
    ee80:	1d3d0400 	cfldrsne	mvf0, [sp, #-0]
    ee84:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    ee88:	0057ee0b 	subseq	lr, r7, fp, lsl #28
    ee8c:	1d3e0400 	cfldrsne	mvf0, [lr, #-0]
    ee90:	1c000000 	stcne	0, cr0, [r0], {-0}
    ee94:	0058fd0b 	subseq	pc, r8, fp, lsl #26
    ee98:	1d3f0400 	cfldrsne	mvf0, [pc, #-0]	; eea0 <_Min_Stack_Size+0xeca0>
    ee9c:	20000000 	andcs	r0, r0, r0
    eea0:	57f80e00 	ldrbpl	r0, [r8, r0, lsl #28]!
    eea4:	04080000 	streq	r0, [r8], #-0
    eea8:	00022573 	andeq	r2, r2, r3, ror r5
    eeac:	3a5f0b00 	bcc	17d1ab4 <_Min_Stack_Size+0x17d18b4>
    eeb0:	74040000 	strvc	r0, [r4], #-0
    eeb4:	00000225 	andeq	r0, r0, r5, lsr #4
    eeb8:	5da30b00 			; <UNDEFINED> instruction: 0x5da30b00
    eebc:	75040000 	strvc	r0, [r4, #-0]
    eec0:	0000001d 	andeq	r0, r0, sp, lsl r0
    eec4:	040d0004 	streq	r0, [sp], #-4
    eec8:	00000040 	andeq	r0, r0, r0, asr #32
    eecc:	005bb00e 	subseq	fp, fp, lr
    eed0:	97042000 	strls	r2, [r4, -r0]
    eed4:	00000295 	muleq	r0, r5, r2
    eed8:	00705f0f 	rsbseq	r5, r0, pc, lsl #30
    eedc:	02259804 	eoreq	r9, r5, #4, 16	; 0x40000
    eee0:	0f000000 	svceq	0x00000000
    eee4:	0400725f 	streq	r7, [r0], #-607	; 0xfffffda1
    eee8:	00001d99 	muleq	r0, r9, sp
    eeec:	5f0f0400 	svcpl	0x000f0400
    eef0:	9a040077 	bls	10f0d4 <_Min_Stack_Size+0x10eed4>
    eef4:	0000001d 	andeq	r0, r0, sp, lsl r0
    eef8:	563c0b08 	ldrtpl	r0, [ip], -r8, lsl #22
    eefc:	9b040000 	blls	10ef04 <_Min_Stack_Size+0x10ed04>
    ef00:	00000047 	andeq	r0, r0, r7, asr #32
    ef04:	58ce0b0c 	stmiapl	lr, {r2, r3, r8, r9, fp}^
    ef08:	9c040000 	stcls	0, cr0, [r4], {-0}
    ef0c:	00000047 	andeq	r0, r0, r7, asr #32
    ef10:	625f0f0e 	subsvs	r0, pc, #14, 30	; 0x38
    ef14:	9d040066 	stcls	0, cr0, [r4, #-408]	; 0xfffffe68
    ef18:	00000200 	andeq	r0, r0, r0, lsl #4
    ef1c:	55e10b10 	strbpl	r0, [r1, #2832]!	; 0xb10
    ef20:	9e040000 	cdpls	0, 0, cr0, cr4, cr0, {0}
    ef24:	0000001d 	andeq	r0, r0, sp, lsl r0
    ef28:	0deb0b18 			; <UNDEFINED> instruction: 0x0deb0b18
    ef2c:	a0040000 	andge	r0, r4, r0
    ef30:	000003c1 	andeq	r0, r0, r1, asr #7
    ef34:	ad10001c 	ldcge	0, cr0, [r0, #-112]	; 0xffffff90
    ef38:	60000058 	andvs	r0, r0, r8, asr r0
    ef3c:	c1017204 	tstgt	r1, r4, lsl #4
    ef40:	11000003 	tstne	r0, r3
    ef44:	00005885 	andeq	r5, r0, r5, lsl #17
    ef48:	1d017604 	stcne	6, cr7, [r1, #-16]
    ef4c:	00000000 	andeq	r0, r0, r0
    ef50:	005bc611 	subseq	ip, fp, r1, lsl r6
    ef54:	017b0400 	cmneq	fp, r0, lsl #8
    ef58:	000005e9 	andeq	r0, r0, r9, ror #11
    ef5c:	5bd61104 	blpl	ff593374 <BootRAM+0xe503b15>
    ef60:	7b040000 	blvc	10ef68 <_Min_Stack_Size+0x10ed68>
    ef64:	0005e901 	andeq	lr, r5, r1, lsl #18
    ef68:	91110800 	tstls	r1, r0, lsl #16
    ef6c:	0400005c 	streq	r0, [r0], #-92	; 0xffffffa4
    ef70:	05e9017b 	strbeq	r0, [r9, #379]!	; 0x17b
    ef74:	110c0000 	mrsne	r0, (UNDEF: 12)
    ef78:	0000583a 	andeq	r5, r0, sl, lsr r8
    ef7c:	1d017d04 	stcne	13, cr7, [r1, #-16]
    ef80:	10000000 	andne	r0, r0, r0
    ef84:	0055bb11 	subseq	fp, r5, r1, lsl fp
    ef88:	017f0400 	cmneq	pc, r0, lsl #8
    ef8c:	00000106 	andeq	r0, r0, r6, lsl #2
    ef90:	57881114 	usada8pl	r8, r4, r1, r1
    ef94:	81040000 	mrshi	r0, (UNDEF: 4)
    ef98:	00001d01 	andeq	r1, r0, r1, lsl #26
    ef9c:	c0111800 	andsgt	r1, r1, r0, lsl #16
    efa0:	04000056 	streq	r0, [r0], #-86	; 0xffffffaa
    efa4:	001d0183 	andseq	r0, sp, r3, lsl #3
    efa8:	111c0000 	tstne	ip, r0
    efac:	0000583f 	andeq	r5, r0, pc, lsr r8
    efb0:	33018404 	movwcc	r8, #5124	; 0x1404
    efb4:	20000005 	andcs	r0, r0, r5
    efb8:	706d5f12 	rsbvc	r5, sp, r2, lsl pc
    efbc:	01860400 	orreq	r0, r6, r0, lsl #8
    efc0:	00000736 	andeq	r0, r0, r6, lsr r7
    efc4:	584f1124 	stmdapl	pc, {r2, r5, r8, ip}^	; <UNPREDICTABLE>
    efc8:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
    efcc:	00074701 	andeq	r4, r7, r1, lsl #14
    efd0:	8a112800 	bhi	458fd8 <_Min_Stack_Size+0x458dd8>
    efd4:	04000056 	streq	r0, [r0], #-86	; 0xffffffaa
    efd8:	001d018a 	andseq	r0, sp, sl, lsl #3
    efdc:	112c0000 			; <UNDEFINED> instruction: 0x112c0000
    efe0:	000056d2 	ldrdeq	r5, [r0], -r2
    efe4:	1d018d04 	stcne	13, cr8, [r1, #-16]
    efe8:	30000000 	andcc	r0, r0, r0
    efec:	00564c11 	subseq	r4, r6, r1, lsl ip
    eff0:	018e0400 	orreq	r0, lr, r0, lsl #8
    eff4:	00000106 	andeq	r0, r0, r6, lsl #2
    eff8:	56da1134 			; <UNDEFINED> instruction: 0x56da1134
    effc:	90040000 	andls	r0, r4, r0
    f000:	00074d01 	andeq	r4, r7, r1, lsl #26
    f004:	08113800 	ldmdaeq	r1, {fp, ip, sp}
    f008:	04000059 	streq	r0, [r0], #-89	; 0xffffffa7
    f00c:	07530191 			; <UNDEFINED> instruction: 0x07530191
    f010:	113c0000 	teqne	ip, r0
    f014:	00005745 	andeq	r5, r0, r5, asr #14
    f018:	06019204 	streq	r9, [r1], -r4, lsl #4
    f01c:	40000001 	andmi	r0, r0, r1
    f020:	0058ed11 	subseq	lr, r8, r1, lsl sp
    f024:	01950400 	orrseq	r0, r5, r0, lsl #8
    f028:	00000764 	andeq	r0, r0, r4, ror #14
    f02c:	562d1144 	strtpl	r1, [sp], -r4, asr #2
    f030:	9d040000 	stcls	0, cr0, [r4, #-0]
    f034:	0005ae01 	andeq	sl, r5, r1, lsl #28
    f038:	20114800 	andscs	r4, r1, r0, lsl #16
    f03c:	04000056 	streq	r0, [r0], #-86	; 0xffffffaa
    f040:	05e9019e 	strbeq	r0, [r9, #414]!	; 0x19e
    f044:	11540000 	cmpne	r4, r0
    f048:	00005779 	andeq	r5, r0, r9, ror r7
    f04c:	70019f04 	andvc	r9, r1, r4, lsl #30
    f050:	58000007 	stmdapl	r0, {r0, r1, r2}
    f054:	0055d511 	subseq	sp, r5, r1, lsl r5
    f058:	01a00400 	lsleq	r0, r0, #8
    f05c:	00000106 	andeq	r0, r0, r6, lsl #2
    f060:	040d005c 	streq	r0, [sp], #-92	; 0xffffffa4
    f064:	00000295 	muleq	r0, r5, r2
    f068:	0058110e 	subseq	r1, r8, lr, lsl #2
    f06c:	b3046800 	movwlt	r6, #18432	; 0x4800
    f070:	000004f1 	strdeq	r0, [r0], -r1
    f074:	00705f0f 	rsbseq	r5, r0, pc, lsl #30
    f078:	0225b404 	eoreq	fp, r5, #4, 8	; 0x4000000
    f07c:	0f000000 	svceq	0x00000000
    f080:	0400725f 	streq	r7, [r0], #-607	; 0xfffffda1
    f084:	00001db5 			; <UNDEFINED> instruction: 0x00001db5
    f088:	5f0f0400 	svcpl	0x000f0400
    f08c:	b6040077 			; <UNDEFINED> instruction: 0xb6040077
    f090:	0000001d 	andeq	r0, r0, sp, lsl r0
    f094:	563c0b08 	ldrtpl	r0, [ip], -r8, lsl #22
    f098:	b7040000 	strlt	r0, [r4, -r0]
    f09c:	00000047 	andeq	r0, r0, r7, asr #32
    f0a0:	58ce0b0c 	stmiapl	lr, {r2, r3, r8, r9, fp}^
    f0a4:	b8040000 	stmdalt	r4, {}	; <UNPREDICTABLE>
    f0a8:	00000047 	andeq	r0, r0, r7, asr #32
    f0ac:	625f0f0e 	subsvs	r0, pc, #14, 30	; 0x38
    f0b0:	b9040066 	stmdblt	r4, {r1, r2, r5, r6}
    f0b4:	00000200 	andeq	r0, r0, r0, lsl #4
    f0b8:	55e10b10 	strbpl	r0, [r1, #2832]!	; 0xb10
    f0bc:	ba040000 	blt	10f0c4 <_Min_Stack_Size+0x10eec4>
    f0c0:	0000001d 	andeq	r0, r0, sp, lsl r0
    f0c4:	0deb0b18 			; <UNDEFINED> instruction: 0x0deb0b18
    f0c8:	bd040000 	stclt	0, cr0, [r4, #-0]
    f0cc:	000003c1 	andeq	r0, r0, r1, asr #7
    f0d0:	56250b1c 			; <UNDEFINED> instruction: 0x56250b1c
    f0d4:	c1040000 	mrsgt	r0, (UNDEF: 4)
    f0d8:	00000104 	andeq	r0, r0, r4, lsl #2
    f0dc:	40610b20 	rsbmi	r0, r1, r0, lsr #22
    f0e0:	c3040000 	movwgt	r0, #16384	; 0x4000
    f0e4:	0000050f 	andeq	r0, r0, pc, lsl #10
    f0e8:	3fbc0b24 	svccc	0x00bc0b24
    f0ec:	c5040000 	strgt	r0, [r4, #-0]
    f0f0:	0000053e 	andeq	r0, r0, lr, lsr r5
    f0f4:	58770b28 	ldmdapl	r7!, {r3, r5, r8, r9, fp}^
    f0f8:	c8040000 	stmdagt	r4, {}	; <UNPREDICTABLE>
    f0fc:	00000562 	andeq	r0, r0, r2, ror #10
    f100:	59170b2c 	ldmdbpl	r7, {r2, r3, r5, r8, r9, fp}
    f104:	c9040000 	stmdbgt	r4, {}	; <UNPREDICTABLE>
    f108:	0000057c 	andeq	r0, r0, ip, ror r5
    f10c:	755f0f30 	ldrbvc	r0, [pc, #-3888]	; e1e4 <_Min_Stack_Size+0xdfe4>
    f110:	cc040062 	stcgt	0, cr0, [r4], {98}	; 0x62
    f114:	00000200 	andeq	r0, r0, r0, lsl #4
    f118:	755f0f34 	ldrbvc	r0, [pc, #-3892]	; e1ec <_Min_Stack_Size+0xdfec>
    f11c:	cd040070 	stcgt	0, cr0, [r4, #-448]	; 0xfffffe40
    f120:	00000225 	andeq	r0, r0, r5, lsr #4
    f124:	755f0f3c 	ldrbvc	r0, [pc, #-3900]	; e1f0 <_Min_Stack_Size+0xdff0>
    f128:	ce040072 	mcrgt	0, 0, r0, cr4, cr2, {3}
    f12c:	0000001d 	andeq	r0, r0, sp, lsl r0
    f130:	56100b40 	ldrpl	r0, [r0], -r0, asr #22
    f134:	d1040000 	mrsle	r0, (UNDEF: 4)
    f138:	00000582 	andeq	r0, r0, r2, lsl #11
    f13c:	58f70b44 	ldmpl	r7!, {r2, r6, r8, r9, fp}^
    f140:	d2040000 	andle	r0, r4, #0
    f144:	00000592 	muleq	r0, r2, r5
    f148:	6c5f0f47 	mrrcvs	15, 4, r0, pc, cr7	; <UNPREDICTABLE>
    f14c:	d5040062 	strle	r0, [r4, #-98]	; 0xffffff9e
    f150:	00000200 	andeq	r0, r0, r0, lsl #4
    f154:	56430b48 	strbpl	r0, [r3], -r8, asr #22
    f158:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
    f15c:	0000001d 	andeq	r0, r0, sp, lsl r0
    f160:	61250b50 			; <UNDEFINED> instruction: 0x61250b50
    f164:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
    f168:	00000075 	andeq	r0, r0, r5, ror r0
    f16c:	3c010b54 			; <UNDEFINED> instruction: 0x3c010b54
    f170:	e0040000 	and	r0, r4, r0
    f174:	000000f9 	strdeq	r0, [r0], -r9
    f178:	58190b58 	ldmdapl	r9, {r3, r4, r6, r8, r9, fp}
    f17c:	e2040000 	and	r0, r4, #0
    f180:	000000ee 	andeq	r0, r0, lr, ror #1
    f184:	57670b5c 			; <UNDEFINED> instruction: 0x57670b5c
    f188:	e3040000 	movw	r0, #16384	; 0x4000
    f18c:	0000001d 	andeq	r0, r0, sp, lsl r0
    f190:	1d130064 	ldcne	0, cr0, [r3, #-400]	; 0xfffffe70
    f194:	0f000000 	svceq	0x00000000
    f198:	14000005 	strne	r0, [r0], #-5
    f19c:	000003c1 	andeq	r0, r0, r1, asr #7
    f1a0:	00010414 	andeq	r0, r1, r4, lsl r4
    f1a4:	01061400 	tsteq	r6, r0, lsl #8
    f1a8:	1d140000 	ldcne	0, cr0, [r4, #-0]
    f1ac:	00000000 	andeq	r0, r0, r0
    f1b0:	04f1040d 	ldrbteq	r0, [r1], #1037	; 0x40d
    f1b4:	1d130000 	ldcne	0, cr0, [r3, #-0]
    f1b8:	33000000 	movwcc	r0, #0
    f1bc:	14000005 	strne	r0, [r0], #-5
    f1c0:	000003c1 	andeq	r0, r0, r1, asr #7
    f1c4:	00010414 	andeq	r0, r1, r4, lsl r4
    f1c8:	05331400 	ldreq	r1, [r3, #-1024]!	; 0xfffffc00
    f1cc:	1d140000 	ldcne	0, cr0, [r4, #-0]
    f1d0:	00000000 	andeq	r0, r0, r0
    f1d4:	0539040d 	ldreq	r0, [r9, #-1037]!	; 0xfffffbf3
    f1d8:	0c150000 	ldceq	0, cr0, [r5], {-0}
    f1dc:	0d000001 	stceq	0, cr0, [r0, #-4]
    f1e0:	00051504 	andeq	r1, r5, r4, lsl #10
    f1e4:	00801300 	addeq	r1, r0, r0, lsl #6
    f1e8:	05620000 	strbeq	r0, [r2, #-0]!
    f1ec:	c1140000 	tstgt	r4, r0
    f1f0:	14000003 	strne	r0, [r0], #-3
    f1f4:	00000104 	andeq	r0, r0, r4, lsl #2
    f1f8:	00008014 	andeq	r8, r0, r4, lsl r0
    f1fc:	001d1400 	andseq	r1, sp, r0, lsl #8
    f200:	0d000000 	stceq	0, cr0, [r0, #-0]
    f204:	00054404 	andeq	r4, r5, r4, lsl #8
    f208:	001d1300 	andseq	r1, sp, r0, lsl #6
    f20c:	057c0000 	ldrbeq	r0, [ip, #-0]!
    f210:	c1140000 	tstgt	r4, r0
    f214:	14000003 	strne	r0, [r0], #-3
    f218:	00000104 	andeq	r0, r0, r4, lsl #2
    f21c:	68040d00 	stmdavs	r4, {r8, sl, fp}
    f220:	08000005 	stmdaeq	r0, {r0, r2}
    f224:	00000040 	andeq	r0, r0, r0, asr #32
    f228:	00000592 	muleq	r0, r2, r5
    f22c:	0000c609 	andeq	ip, r0, r9, lsl #12
    f230:	08000200 	stmdaeq	r0, {r9}
    f234:	00000040 	andeq	r0, r0, r0, asr #32
    f238:	000005a2 	andeq	r0, r0, r2, lsr #11
    f23c:	0000c609 	andeq	ip, r0, r9, lsl #12
    f240:	05000000 	streq	r0, [r0, #-0]
    f244:	000057ff 	strdeq	r5, [r0], -pc	; <UNPREDICTABLE>
    f248:	c7011d04 	strgt	r1, [r1, -r4, lsl #26]
    f24c:	10000003 	andne	r0, r0, r3
    f250:	000060e4 	andeq	r6, r0, r4, ror #1
    f254:	0121040c 			; <UNDEFINED> instruction: 0x0121040c
    f258:	000005e3 	andeq	r0, r0, r3, ror #11
    f25c:	00582711 	subseq	r2, r8, r1, lsl r7
    f260:	01230400 			; <UNDEFINED> instruction: 0x01230400
    f264:	000005e3 	andeq	r0, r0, r3, ror #11
    f268:	56df1100 	ldrbpl	r1, [pc], r0, lsl #2
    f26c:	24040000 	strcs	r0, [r4], #-0
    f270:	00001d01 	andeq	r1, r0, r1, lsl #26
    f274:	e8110400 	ldmda	r1, {sl}
    f278:	04000057 	streq	r0, [r0], #-87	; 0xffffffa9
    f27c:	05e90125 	strbeq	r0, [r9, #293]!	; 0x125
    f280:	00080000 	andeq	r0, r8, r0
    f284:	05ae040d 	streq	r0, [lr, #1037]!	; 0x40d
    f288:	040d0000 	streq	r0, [sp], #-0
    f28c:	000005a2 	andeq	r0, r0, r2, lsr #11
    f290:	0055b310 	subseq	fp, r5, r0, lsl r3
    f294:	3d041800 	stccc	8, cr1, [r4, #-0]
    f298:	00063101 	andeq	r3, r6, r1, lsl #2
    f29c:	58611100 	stmdapl	r1!, {r8, ip}^
    f2a0:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
    f2a4:	00063101 	andeq	r3, r6, r1, lsl #2
    f2a8:	95110000 	ldrls	r0, [r1, #-0]
    f2ac:	04000058 	streq	r0, [r0], #-88	; 0xffffffa8
    f2b0:	0631013f 			; <UNDEFINED> instruction: 0x0631013f
    f2b4:	11060000 	mrsne	r0, (UNDEF: 6)
    f2b8:	000058b4 			; <UNDEFINED> instruction: 0x000058b4
    f2bc:	4e014004 	cdpmi	0, 0, cr4, cr1, cr4, {0}
    f2c0:	0c000000 	stceq	0, cr0, [r0], {-0}
    f2c4:	00582211 	subseq	r2, r8, r1, lsl r2
    f2c8:	01430400 	cmpeq	r3, r0, lsl #8
    f2cc:	00000063 	andeq	r0, r0, r3, rrx
    f2d0:	4e080010 	mcrmi	0, 0, r0, cr8, cr0, {0}
    f2d4:	41000000 	mrsmi	r0, (UNDEF: 0)
    f2d8:	09000006 	stmdbeq	r0, {r1, r2}
    f2dc:	000000c6 	andeq	r0, r0, r6, asr #1
    f2e0:	35100002 	ldrcc	r0, [r0, #-2]
    f2e4:	10000056 	andne	r0, r0, r6, asr r0
    f2e8:	83015604 	movwhi	r5, #5636	; 0x1604
    f2ec:	11000006 	tstne	r0, r6
    f2f0:	00005752 	andeq	r5, r0, r2, asr r7
    f2f4:	71015904 	tstvc	r1, r4, lsl #18
    f2f8:	00000001 	andeq	r0, r0, r1
    f2fc:	00569911 	subseq	r9, r6, r1, lsl r9
    f300:	015a0400 	cmpeq	sl, r0, lsl #8
    f304:	0000001d 	andeq	r0, r0, sp, lsl r0
    f308:	592c1104 	stmdbpl	ip!, {r2, r8, ip}
    f30c:	5b040000 	blpl	10f314 <_Min_Stack_Size+0x10f114>
    f310:	00017101 	andeq	r7, r1, r1, lsl #2
    f314:	9a110800 	bls	45131c <_Min_Stack_Size+0x45111c>
    f318:	04000057 	streq	r0, [r0], #-87	; 0xffffffa9
    f31c:	0683015c 	pkhtbeq	r0, r3, ip, asr #2
    f320:	000c0000 	andeq	r0, ip, r0
    f324:	0171040d 	cmneq	r1, sp, lsl #8
    f328:	a8100000 	ldmdage	r0, {}	; <UNPREDICTABLE>
    f32c:	50000058 	andpl	r0, r0, r8, asr r0
    f330:	26016004 	strcs	r6, [r1], -r4
    f334:	11000007 	tstne	r0, r7
    f338:	0000589b 	muleq	r0, fp, r8
    f33c:	06016304 	streq	r6, [r1], -r4, lsl #6
    f340:	00000001 	andeq	r0, r0, r1
    f344:	00582d11 	subseq	r2, r8, r1, lsl sp
    f348:	01640400 	cmneq	r4, r0, lsl #8
    f34c:	000000ee 	andeq	r0, r0, lr, ror #1
    f350:	55f91104 	ldrbpl	r1, [r9, #260]!	; 0x104
    f354:	65040000 	strvs	r0, [r4, #-0]
    f358:	0000ee01 	andeq	lr, r0, r1, lsl #28
    f35c:	1e110c00 	cdpne	12, 1, cr0, cr1, cr0, {0}
    f360:	04000059 	streq	r0, [r0], #-89	; 0xffffffa7
    f364:	00ee0166 	rsceq	r0, lr, r6, ror #2
    f368:	11140000 	tstne	r4, r0
    f36c:	000058e3 	andeq	r5, r0, r3, ror #17
    f370:	26016704 	strcs	r6, [r1], -r4, lsl #14
    f374:	1c000007 	stcne	0, cr0, [r0], {7}
    f378:	0058c111 	subseq	ip, r8, r1, lsl r1
    f37c:	01680400 	cmneq	r8, r0, lsl #8
    f380:	0000001d 	andeq	r0, r0, sp, lsl r0
    f384:	56651124 	strbtpl	r1, [r5], -r4, lsr #2
    f388:	69040000 	stmdbvs	r4, {}	; <UNPREDICTABLE>
    f38c:	0000ee01 	andeq	lr, r0, r1, lsl #28
    f390:	ea112800 	b	459398 <_Min_Stack_Size+0x459198>
    f394:	04000055 	streq	r0, [r0], #-85	; 0xffffffab
    f398:	00ee016a 	rsceq	r0, lr, sl, ror #2
    f39c:	11300000 	teqne	r0, r0
    f3a0:	00005654 	andeq	r5, r0, r4, asr r6
    f3a4:	ee016b04 	vmla.f64	d6, d1, d4
    f3a8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    f3ac:	0055c611 	subseq	ip, r5, r1, lsl r6
    f3b0:	016c0400 	cmneq	ip, r0, lsl #8
    f3b4:	000000ee 	andeq	r0, r0, lr, ror #1
    f3b8:	56af1140 	strtpl	r1, [pc], r0, asr #2
    f3bc:	6d040000 	stcvs	0, cr0, [r4, #-0]
    f3c0:	0000ee01 	andeq	lr, r0, r1, lsl #28
    f3c4:	08004800 	stmdaeq	r0, {fp, lr}
    f3c8:	0000010c 	andeq	r0, r0, ip, lsl #2
    f3cc:	00000736 	andeq	r0, r0, r6, lsr r7
    f3d0:	0000c609 	andeq	ip, r0, r9, lsl #12
    f3d4:	0d000700 	stceq	7, cr0, [r0, #-0]
    f3d8:	00064104 	andeq	r4, r6, r4, lsl #2
    f3dc:	07471600 	strbeq	r1, [r7, -r0, lsl #12]
    f3e0:	c1140000 	tstgt	r4, r0
    f3e4:	00000003 	andeq	r0, r0, r3
    f3e8:	073c040d 	ldreq	r0, [ip, -sp, lsl #8]!
    f3ec:	040d0000 	streq	r0, [sp], #-0
    f3f0:	000005ef 	andeq	r0, r0, pc, ror #11
    f3f4:	0187040d 	orreq	r0, r7, sp, lsl #8
    f3f8:	64160000 	ldrvs	r0, [r6], #-0
    f3fc:	14000007 	strne	r0, [r0], #-7
    f400:	0000001d 	andeq	r0, r0, sp, lsl r0
    f404:	6a040d00 	bvs	11280c <_Min_Stack_Size+0x11260c>
    f408:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    f40c:	00075904 	andeq	r5, r7, r4, lsl #18
    f410:	89040d00 	stmdbhi	r4, {r8, sl, fp}
    f414:	17000006 	strne	r0, [r0, -r6]
    f418:	00005c3c 	andeq	r5, r0, ip, lsr ip
    f41c:	02951705 	addseq	r1, r5, #1310720	; 0x140000
    f420:	03050000 	movweq	r0, #20480	; 0x5000
    f424:	20000004 	andcs	r0, r0, r4
    f428:	005bbd18 	subseq	fp, fp, r8, lsl sp
    f42c:	01a30400 			; <UNDEFINED> instruction: 0x01a30400
    f430:	00000793 	muleq	r0, r3, r7
    f434:	00022b15 	andeq	r2, r2, r5, lsl fp
    f438:	5bcd1800 	blpl	ff355440 <BootRAM+0xe2c5be1>
    f43c:	a4040000 	strge	r0, [r4], #-0
    f440:	00079301 	andeq	r9, r7, r1, lsl #6
    f444:	5c881800 	stcpl	8, cr1, [r8], {0}
    f448:	a5040000 	strge	r0, [r4, #-0]
    f44c:	00079301 	andeq	r9, r7, r1, lsl #6
    f450:	5c7c1900 			; <UNDEFINED> instruction: 0x5c7c1900
    f454:	fd040000 	stc2	0, cr0, [r4, #-0]
    f458:	0003c102 	andeq	ip, r3, r2, lsl #2
    f45c:	00030500 	andeq	r0, r3, r0, lsl #10
    f460:	19200000 	stmdbne	r0!, {}	; <UNPREDICTABLE>
    f464:	00005c75 	andeq	r5, r0, r5, ror ip
    f468:	d402fe04 	strle	pc, [r2], #-3588	; 0xfffff1fc
    f46c:	05000007 	streq	r0, [r0, #-7]
    f470:	00000003 	andeq	r0, r0, r3
    f474:	03c11500 	biceq	r1, r1, #0, 10
    f478:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    f47c:	04000007 	streq	r0, [r0], #-7
    f480:	00338500 	eorseq	r8, r3, r0, lsl #10
    f484:	bf010400 	svclt	0x00010400
    f488:	0c000054 	stceq	0, cr0, [r0], {84}	; 0x54
    f48c:	00005c9e 	muleq	r0, lr, ip
    f490:	000056e6 	andeq	r5, r0, r6, ror #13
    f494:	080007ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl}
    f498:	00000020 	andeq	r0, r0, r0, lsr #32
    f49c:	00006a00 	andeq	r6, r0, r0, lsl #20
    f4a0:	69050402 	stmdbvs	r5, {r1, sl}
    f4a4:	0300746e 	movweq	r7, #1134	; 0x46e
    f4a8:	00005cec 	andeq	r5, r0, ip, ror #25
    f4ac:	0037d802 	eorseq	sp, r7, r2, lsl #16
    f4b0:	04040000 	streq	r0, [r4], #-0
    f4b4:	0001ce07 	andeq	ip, r1, r7, lsl #28
    f4b8:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    f4bc:	000000b8 	strheq	r0, [r0], -r8
    f4c0:	f8040804 			; <UNDEFINED> instruction: 0xf8040804
    f4c4:	04000002 	streq	r0, [r0], #-2
    f4c8:	01920601 	orrseq	r0, r2, r1, lsl #12
    f4cc:	01040000 	mrseq	r0, (UNDEF: 4)
    f4d0:	00019008 	andeq	r9, r1, r8
    f4d4:	05020400 	streq	r0, [r2, #-1024]	; 0xfffffc00
    f4d8:	00000095 	muleq	r0, r5, r0
    f4dc:	f2070204 	vhsub.s8	d0, d7, d4
    f4e0:	04000001 	streq	r0, [r0], #-1
    f4e4:	00bd0504 	adcseq	r0, sp, r4, lsl #10
    f4e8:	04040000 	streq	r0, [r4], #-0
    f4ec:	0001c907 	andeq	ip, r1, r7, lsl #18
    f4f0:	07080400 	streq	r0, [r8, -r0, lsl #8]
    f4f4:	000001c4 	andeq	r0, r0, r4, asr #3
    f4f8:	0057a403 	subseq	sl, r7, r3, lsl #8
    f4fc:	25070300 	strcs	r0, [r7, #-768]	; 0xfffffd00
    f500:	03000000 	movweq	r0, #0
    f504:	00005793 	muleq	r0, r3, r7
    f508:	00682c04 	rsbeq	r2, r8, r4, lsl #24
    f50c:	7d030000 	stcvc	0, cr0, [r3, #-0]
    f510:	04000058 	streq	r0, [r0], #-88	; 0xffffffa8
    f514:	00006872 	andeq	r6, r0, r2, ror r8
    f518:	57600500 	strbpl	r0, [r0, -r0, lsl #10]!
    f51c:	65020000 	strvs	r0, [r2, #-0]
    f520:	00003701 	andeq	r3, r0, r1, lsl #14
    f524:	04040600 	streq	r0, [r4], #-1536	; 0xfffffa00
    f528:	0000c9a6 	andeq	ip, r0, r6, lsr #19
    f52c:	575a0700 	ldrbpl	r0, [sl, -r0, lsl #14]
    f530:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    f534:	0000009e 	muleq	r0, lr, r0
    f538:	0056a807 	subseq	sl, r6, r7, lsl #16
    f53c:	c9a90400 	stmibgt	r9!, {sl}
    f540:	00000000 	andeq	r0, r0, r0
    f544:	00005308 	andeq	r5, r0, r8, lsl #6
    f548:	0000d900 	andeq	sp, r0, r0, lsl #18
    f54c:	00d90900 	sbcseq	r0, r9, r0, lsl #18
    f550:	00030000 	andeq	r0, r3, r0
    f554:	59070404 	stmdbpl	r7, {r2, sl}
    f558:	0a000000 	beq	f560 <_Min_Stack_Size+0xf360>
    f55c:	01a30408 			; <UNDEFINED> instruction: 0x01a30408
    f560:	0b000001 	bleq	f56c <_Min_Stack_Size+0xf36c>
    f564:	00005867 	andeq	r5, r0, r7, ror #16
    f568:	0025a504 	eoreq	sl, r5, r4, lsl #10
    f56c:	0b000000 	bleq	f574 <_Min_Stack_Size+0xf374>
    f570:	0000586f 	andeq	r5, r0, pc, ror #16
    f574:	00aaaa04 	adceq	sl, sl, r4, lsl #20
    f578:	00040000 	andeq	r0, r4, r0
    f57c:	00580603 	subseq	r0, r8, r3, lsl #12
    f580:	e0ab0400 	adc	r0, fp, r0, lsl #8
    f584:	03000000 	movweq	r0, #0
    f588:	00005679 	andeq	r5, r0, r9, ror r6
    f58c:	007daf04 	rsbseq	sl, sp, r4, lsl #30
    f590:	040c0000 	streq	r0, [ip], #-0
    f594:	011f040d 	tsteq	pc, sp, lsl #8
    f598:	01040000 	mrseq	r0, (UNDEF: 4)
    f59c:	00019908 	andeq	r9, r1, r8, lsl #18
    f5a0:	58b90300 	ldmpl	r9!, {r8, r9}
    f5a4:	16050000 	strne	r0, [r5], -r0
    f5a8:	0000006f 	andeq	r0, r0, pc, rrx
    f5ac:	0056820e 	subseq	r8, r6, lr, lsl #4
    f5b0:	2d051800 	stccs	8, cr1, [r5, #-0]
    f5b4:	00000184 	andeq	r0, r0, r4, lsl #3
    f5b8:	0058270b 	subseq	r2, r8, fp, lsl #14
    f5bc:	842f0500 	strthi	r0, [pc], #-1280	; f5c4 <_Min_Stack_Size+0xf3c4>
    f5c0:	00000001 	andeq	r0, r0, r1
    f5c4:	006b5f0f 	rsbeq	r5, fp, pc, lsl #30
    f5c8:	00253005 	eoreq	r3, r5, r5
    f5cc:	0b040000 	bleq	10f5d4 <_Min_Stack_Size+0x10f3d4>
    f5d0:	00005859 	andeq	r5, r0, r9, asr r8
    f5d4:	00253005 	eoreq	r3, r5, r5
    f5d8:	0b080000 	bleq	20f5e0 <_Min_Stack_Size+0x20f3e0>
    f5dc:	00005673 	andeq	r5, r0, r3, ror r6
    f5e0:	00253005 	eoreq	r3, r5, r5
    f5e4:	0b0c0000 	bleq	30f5ec <_Min_Stack_Size+0x30f3ec>
    f5e8:	000058d4 	ldrdeq	r5, [r0], -r4
    f5ec:	00253005 	eoreq	r3, r5, r5
    f5f0:	0f100000 	svceq	0x00100000
    f5f4:	0500785f 	streq	r7, [r0, #-2143]	; 0xfffff7a1
    f5f8:	00018a31 	andeq	r8, r1, r1, lsr sl
    f5fc:	0d001400 	cfstrseq	mvf1, [r0, #-0]
    f600:	00013104 	andeq	r3, r1, r4, lsl #2
    f604:	01260800 			; <UNDEFINED> instruction: 0x01260800
    f608:	019a0000 	orrseq	r0, sl, r0
    f60c:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
    f610:	00000000 	andeq	r0, r0, r0
    f614:	56a30e00 	strtpl	r0, [r3], r0, lsl #28
    f618:	05240000 	streq	r0, [r4, #-0]!
    f61c:	00021335 	andeq	r1, r2, r5, lsr r3
    f620:	56070b00 	strpl	r0, [r7], -r0, lsl #22
    f624:	37050000 	strcc	r0, [r5, -r0]
    f628:	00000025 	andeq	r0, r0, r5, lsr #32
    f62c:	588c0b00 	stmpl	ip, {r8, r9, fp}
    f630:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    f634:	00000025 	andeq	r0, r0, r5, lsr #32
    f638:	56160b04 	ldrpl	r0, [r6], -r4, lsl #22
    f63c:	39050000 	stmdbcc	r5, {}	; <UNPREDICTABLE>
    f640:	00000025 	andeq	r0, r0, r5, lsr #32
    f644:	59310b08 	ldmdbpl	r1!, {r3, r8, r9, fp}
    f648:	3a050000 	bcc	14f650 <_Min_Stack_Size+0x14f450>
    f64c:	00000025 	andeq	r0, r0, r5, lsr #32
    f650:	577f0b0c 	ldrbpl	r0, [pc, -ip, lsl #22]!
    f654:	3b050000 	blcc	14f65c <_Min_Stack_Size+0x14f45c>
    f658:	00000025 	andeq	r0, r0, r5, lsr #32
    f65c:	576f0b10 			; <UNDEFINED> instruction: 0x576f0b10
    f660:	3c050000 	stccc	0, cr0, [r5], {-0}
    f664:	00000025 	andeq	r0, r0, r5, lsr #32
    f668:	58d90b14 	ldmpl	r9, {r2, r4, r8, r9, fp}^
    f66c:	3d050000 	stccc	0, cr0, [r5, #-0]
    f670:	00000025 	andeq	r0, r0, r5, lsr #32
    f674:	57ee0b18 			; <UNDEFINED> instruction: 0x57ee0b18
    f678:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    f67c:	00000025 	andeq	r0, r0, r5, lsr #32
    f680:	58fd0b1c 	ldmpl	sp!, {r2, r3, r4, r8, r9, fp}^
    f684:	3f050000 	svccc	0x00050000
    f688:	00000025 	andeq	r0, r0, r5, lsr #32
    f68c:	f80e0020 			; <UNDEFINED> instruction: 0xf80e0020
    f690:	08000057 	stmdaeq	r0, {r0, r1, r2, r4, r6}
    f694:	02387305 	eorseq	r7, r8, #335544320	; 0x14000000
    f698:	5f0b0000 	svcpl	0x000b0000
    f69c:	0500003a 	streq	r0, [r0, #-58]	; 0xffffffc6
    f6a0:	00023874 	andeq	r3, r2, r4, ror r8
    f6a4:	a30b0000 	movwge	r0, #45056	; 0xb000
    f6a8:	0500005d 	streq	r0, [r0, #-93]	; 0xffffffa3
    f6ac:	00002575 	andeq	r2, r0, r5, ror r5
    f6b0:	0d000400 	cfstrseq	mvf0, [r0, #-0]
    f6b4:	00005304 	andeq	r5, r0, r4, lsl #6
    f6b8:	58ad1000 	stmiapl	sp!, {ip}
    f6bc:	05600000 	strbeq	r0, [r0, #-0]!
    f6c0:	036a0172 	cmneq	sl, #-2147483620	; 0x8000001c
    f6c4:	85110000 	ldrhi	r0, [r1, #-0]
    f6c8:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    f6cc:	00250176 	eoreq	r0, r5, r6, ror r1
    f6d0:	11000000 	mrsne	r0, (UNDEF: 0)
    f6d4:	00005bc6 	andeq	r5, r0, r6, asr #23
    f6d8:	92017b05 	andls	r7, r1, #5120	; 0x1400
    f6dc:	04000005 	streq	r0, [r0], #-5
    f6e0:	005bd611 	subseq	sp, fp, r1, lsl r6
    f6e4:	017b0500 	cmneq	fp, r0, lsl #10
    f6e8:	00000592 	muleq	r0, r2, r5
    f6ec:	5c911108 	ldfpls	f1, [r1], {8}
    f6f0:	7b050000 	blvc	14f6f8 <_Min_Stack_Size+0x14f4f8>
    f6f4:	00059201 	andeq	r9, r5, r1, lsl #4
    f6f8:	3a110c00 	bcc	452700 <_Min_Stack_Size+0x452500>
    f6fc:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    f700:	0025017d 	eoreq	r0, r5, sp, ror r1
    f704:	11100000 	tstne	r0, r0
    f708:	000055bb 			; <UNDEFINED> instruction: 0x000055bb
    f70c:	19017f05 	stmdbne	r1, {r0, r2, r8, r9, sl, fp, ip, sp, lr}
    f710:	14000001 	strne	r0, [r0], #-1
    f714:	00578811 	subseq	r8, r7, r1, lsl r8
    f718:	01810500 	orreq	r0, r1, r0, lsl #10
    f71c:	00000025 	andeq	r0, r0, r5, lsr #32
    f720:	56c01118 			; <UNDEFINED> instruction: 0x56c01118
    f724:	83050000 	movwhi	r0, #20480	; 0x5000
    f728:	00002501 	andeq	r2, r0, r1, lsl #10
    f72c:	3f111c00 	svccc	0x00111c00
    f730:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    f734:	04dc0184 	ldrbeq	r0, [ip], #388	; 0x184
    f738:	12200000 	eorne	r0, r0, #0
    f73c:	00706d5f 	rsbseq	r6, r0, pc, asr sp
    f740:	df018605 	svcle	0x00018605
    f744:	24000006 	strcs	r0, [r0], #-6
    f748:	00584f11 	subseq	r4, r8, r1, lsl pc
    f74c:	01880500 	orreq	r0, r8, r0, lsl #10
    f750:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    f754:	568a1128 	strpl	r1, [sl], r8, lsr #2
    f758:	8a050000 	bhi	14f760 <_Min_Stack_Size+0x14f560>
    f75c:	00002501 	andeq	r2, r0, r1, lsl #10
    f760:	d2112c00 	andsle	r2, r1, #0, 24
    f764:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    f768:	0025018d 	eoreq	r0, r5, sp, lsl #3
    f76c:	11300000 	teqne	r0, r0
    f770:	0000564c 	andeq	r5, r0, ip, asr #12
    f774:	19018e05 	stmdbne	r1, {r0, r2, r9, sl, fp, pc}
    f778:	34000001 	strcc	r0, [r0], #-1
    f77c:	0056da11 	subseq	sp, r6, r1, lsl sl
    f780:	01900500 	orrseq	r0, r0, r0, lsl #10
    f784:	000006f6 	strdeq	r0, [r0], -r6
    f788:	59081138 	stmdbpl	r8, {r3, r4, r5, r8, ip}
    f78c:	91050000 	mrsls	r0, (UNDEF: 5)
    f790:	0006fc01 	andeq	pc, r6, r1, lsl #24
    f794:	45113c00 	ldrmi	r3, [r1, #-3072]	; 0xfffff400
    f798:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
    f79c:	01190192 			; <UNDEFINED> instruction: 0x01190192
    f7a0:	11400000 	mrsne	r0, (UNDEF: 64)
    f7a4:	000058ed 	andeq	r5, r0, sp, ror #17
    f7a8:	0d019505 	cfstr32eq	mvfx9, [r1, #-20]	; 0xffffffec
    f7ac:	44000007 	strmi	r0, [r0], #-7
    f7b0:	00562d11 	subseq	r2, r6, r1, lsl sp
    f7b4:	019d0500 	orrseq	r0, sp, r0, lsl #10
    f7b8:	00000557 	andeq	r0, r0, r7, asr r5
    f7bc:	56201148 	strtpl	r1, [r0], -r8, asr #2
    f7c0:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
    f7c4:	00059201 	andeq	r9, r5, r1, lsl #4
    f7c8:	79115400 	ldmdbvc	r1, {sl, ip, lr}
    f7cc:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
    f7d0:	0719019f 			; <UNDEFINED> instruction: 0x0719019f
    f7d4:	11580000 	cmpne	r8, r0
    f7d8:	000055d5 	ldrdeq	r5, [r0], -r5	; <UNPREDICTABLE>
    f7dc:	1901a005 	stmdbne	r1, {r0, r2, sp, pc}
    f7e0:	5c000001 	stcpl	0, cr0, [r0], {1}
    f7e4:	3e040d00 	cdpcc	13, 0, cr0, cr4, cr0, {0}
    f7e8:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    f7ec:	00005811 	andeq	r5, r0, r1, lsl r8
    f7f0:	9ab30568 	bls	fecd0d98 <BootRAM+0xdc41539>
    f7f4:	0f000004 	svceq	0x00000004
    f7f8:	0500705f 	streq	r7, [r0, #-95]	; 0xffffffa1
    f7fc:	000238b4 			; <UNDEFINED> instruction: 0x000238b4
    f800:	5f0f0000 	svcpl	0x000f0000
    f804:	b5050072 	strlt	r0, [r5, #-114]	; 0xffffff8e
    f808:	00000025 	andeq	r0, r0, r5, lsr #32
    f80c:	775f0f04 	ldrbvc	r0, [pc, -r4, lsl #30]
    f810:	25b60500 	ldrcs	r0, [r6, #1280]!	; 0x500
    f814:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f818:	00563c0b 	subseq	r3, r6, fp, lsl #24
    f81c:	5ab70500 	bpl	fedd0c24 <BootRAM+0xdd413c5>
    f820:	0c000000 	stceq	0, cr0, [r0], {-0}
    f824:	0058ce0b 	subseq	ip, r8, fp, lsl #28
    f828:	5ab80500 	bpl	fee10c30 <BootRAM+0xdd813d1>
    f82c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    f830:	66625f0f 	strbtvs	r5, [r2], -pc, lsl #30
    f834:	13b90500 			; <UNDEFINED> instruction: 0x13b90500
    f838:	10000002 	andne	r0, r0, r2
    f83c:	0055e10b 	subseq	lr, r5, fp, lsl #2
    f840:	25ba0500 	ldrcs	r0, [sl, #1280]!	; 0x500
    f844:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    f848:	000deb0b 	andeq	lr, sp, fp, lsl #22
    f84c:	6abd0500 	bvs	fef50c54 <BootRAM+0xdec13f5>
    f850:	1c000003 	stcne	0, cr0, [r0], {3}
    f854:	0056250b 	subseq	r2, r6, fp, lsl #10
    f858:	17c10500 	strbne	r0, [r1, r0, lsl #10]
    f85c:	20000001 	andcs	r0, r0, r1
    f860:	0040610b 	subeq	r6, r0, fp, lsl #2
    f864:	b8c30500 	stmialt	r3, {r8, sl}^
    f868:	24000004 	strcs	r0, [r0], #-4
    f86c:	003fbc0b 	eorseq	fp, pc, fp, lsl #24
    f870:	e7c50500 	strb	r0, [r5, r0, lsl #10]
    f874:	28000004 	stmdacs	r0, {r2}
    f878:	0058770b 	subseq	r7, r8, fp, lsl #14
    f87c:	0bc80500 	bleq	ff210c84 <BootRAM+0xe181425>
    f880:	2c000005 	stccs	0, cr0, [r0], {5}
    f884:	0059170b 	subseq	r1, r9, fp, lsl #14
    f888:	25c90500 	strbcs	r0, [r9, #1280]	; 0x500
    f88c:	30000005 	andcc	r0, r0, r5
    f890:	62755f0f 	rsbsvs	r5, r5, #15, 30	; 0x3c
    f894:	13cc0500 	bicne	r0, ip, #0, 10
    f898:	34000002 	strcc	r0, [r0], #-2
    f89c:	70755f0f 	rsbsvc	r5, r5, pc, lsl #30
    f8a0:	38cd0500 	stmiacc	sp, {r8, sl}^
    f8a4:	3c000002 	stccc	0, cr0, [r0], {2}
    f8a8:	72755f0f 	rsbsvc	r5, r5, #15, 30	; 0x3c
    f8ac:	25ce0500 	strbcs	r0, [lr, #1280]	; 0x500
    f8b0:	40000000 	andmi	r0, r0, r0
    f8b4:	0056100b 	subseq	r1, r6, fp
    f8b8:	2bd10500 	blcs	ff450cc0 <BootRAM+0xe3c1461>
    f8bc:	44000005 	strmi	r0, [r0], #-5
    f8c0:	0058f70b 	subseq	pc, r8, fp, lsl #14
    f8c4:	3bd20500 	blcc	ff490ccc <BootRAM+0xe40146d>
    f8c8:	47000005 	strmi	r0, [r0, -r5]
    f8cc:	626c5f0f 	rsbvs	r5, ip, #15, 30	; 0x3c
    f8d0:	13d50500 	bicsne	r0, r5, #0, 10
    f8d4:	48000002 	stmdami	r0, {r1}
    f8d8:	0056430b 	subseq	r4, r6, fp, lsl #6
    f8dc:	25d80500 	ldrbcs	r0, [r8, #1280]	; 0x500
    f8e0:	50000000 	andpl	r0, r0, r0
    f8e4:	0061250b 	rsbeq	r2, r1, fp, lsl #10
    f8e8:	88d90500 	ldmhi	r9, {r8, sl}^
    f8ec:	54000000 	strpl	r0, [r0], #-0
    f8f0:	003c010b 	eorseq	r0, ip, fp, lsl #2
    f8f4:	0ce00500 	cfstr64eq	mvdx0, [r0]
    f8f8:	58000001 	stmdapl	r0, {r0}
    f8fc:	0058190b 	subseq	r1, r8, fp, lsl #18
    f900:	01e20500 	mvneq	r0, r0, lsl #10
    f904:	5c000001 	stcpl	0, cr0, [r0], {1}
    f908:	0057670b 	subseq	r6, r7, fp, lsl #14
    f90c:	25e30500 	strbcs	r0, [r3, #1280]!	; 0x500
    f910:	64000000 	strvs	r0, [r0], #-0
    f914:	00251300 	eoreq	r1, r5, r0, lsl #6
    f918:	04b80000 	ldrteq	r0, [r8], #0
    f91c:	6a140000 	bvs	50f924 <_Min_Stack_Size+0x50f724>
    f920:	14000003 	strne	r0, [r0], #-3
    f924:	00000117 	andeq	r0, r0, r7, lsl r1
    f928:	00011914 	andeq	r1, r1, r4, lsl r9
    f92c:	00251400 	eoreq	r1, r5, r0, lsl #8
    f930:	0d000000 	stceq	0, cr0, [r0, #-0]
    f934:	00049a04 	andeq	r9, r4, r4, lsl #20
    f938:	00251300 	eoreq	r1, r5, r0, lsl #6
    f93c:	04dc0000 	ldrbeq	r0, [ip], #0
    f940:	6a140000 	bvs	50f948 <_Min_Stack_Size+0x50f748>
    f944:	14000003 	strne	r0, [r0], #-3
    f948:	00000117 	andeq	r0, r0, r7, lsl r1
    f94c:	0004dc14 	andeq	sp, r4, r4, lsl ip
    f950:	00251400 	eoreq	r1, r5, r0, lsl #8
    f954:	0d000000 	stceq	0, cr0, [r0, #-0]
    f958:	0004e204 	andeq	lr, r4, r4, lsl #4
    f95c:	011f1500 	tsteq	pc, r0, lsl #10
    f960:	040d0000 	streq	r0, [sp], #-0
    f964:	000004be 			; <UNDEFINED> instruction: 0x000004be
    f968:	00009313 	andeq	r9, r0, r3, lsl r3
    f96c:	00050b00 	andeq	r0, r5, r0, lsl #22
    f970:	036a1400 	cmneq	sl, #0, 8
    f974:	17140000 	ldrne	r0, [r4, -r0]
    f978:	14000001 	strne	r0, [r0], #-1
    f97c:	00000093 	muleq	r0, r3, r0
    f980:	00002514 	andeq	r2, r0, r4, lsl r5
    f984:	040d0000 	streq	r0, [sp], #-0
    f988:	000004ed 	andeq	r0, r0, sp, ror #9
    f98c:	00002513 	andeq	r2, r0, r3, lsl r5
    f990:	00052500 	andeq	r2, r5, r0, lsl #10
    f994:	036a1400 	cmneq	sl, #0, 8
    f998:	17140000 	ldrne	r0, [r4, -r0]
    f99c:	00000001 	andeq	r0, r0, r1
    f9a0:	0511040d 	ldreq	r0, [r1, #-1037]	; 0xfffffbf3
    f9a4:	53080000 	movwpl	r0, #32768	; 0x8000
    f9a8:	3b000000 	blcc	f9b0 <_Min_Stack_Size+0xf7b0>
    f9ac:	09000005 	stmdbeq	r0, {r0, r2}
    f9b0:	000000d9 	ldrdeq	r0, [r0], -r9
    f9b4:	53080002 	movwpl	r0, #32770	; 0x8002
    f9b8:	4b000000 	blmi	f9c0 <_Min_Stack_Size+0xf7c0>
    f9bc:	09000005 	stmdbeq	r0, {r0, r2}
    f9c0:	000000d9 	ldrdeq	r0, [r0], -r9
    f9c4:	ff050000 			; <UNDEFINED> instruction: 0xff050000
    f9c8:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
    f9cc:	0370011d 	cmneq	r0, #1073741831	; 0x40000007
    f9d0:	e4100000 	ldr	r0, [r0], #-0
    f9d4:	0c000060 	stceq	0, cr0, [r0], {96}	; 0x60
    f9d8:	8c012105 	stfhis	f2, [r1], {5}
    f9dc:	11000005 	tstne	r0, r5
    f9e0:	00005827 	andeq	r5, r0, r7, lsr #16
    f9e4:	8c012305 	stchi	3, cr2, [r1], {5}
    f9e8:	00000005 	andeq	r0, r0, r5
    f9ec:	0056df11 	subseq	sp, r6, r1, lsl pc
    f9f0:	01240500 			; <UNDEFINED> instruction: 0x01240500
    f9f4:	00000025 	andeq	r0, r0, r5, lsr #32
    f9f8:	57e81104 	strbpl	r1, [r8, r4, lsl #2]!
    f9fc:	25050000 	strcs	r0, [r5, #-0]
    fa00:	00059201 	andeq	r9, r5, r1, lsl #4
    fa04:	0d000800 	stceq	8, cr0, [r0, #-0]
    fa08:	00055704 	andeq	r5, r5, r4, lsl #14
    fa0c:	4b040d00 	blmi	112e14 <_Min_Stack_Size+0x112c14>
    fa10:	10000005 	andne	r0, r0, r5
    fa14:	000055b3 			; <UNDEFINED> instruction: 0x000055b3
    fa18:	013d0518 	teqeq	sp, r8, lsl r5
    fa1c:	000005da 	ldrdeq	r0, [r0], -sl
    fa20:	00586111 	subseq	r6, r8, r1, lsl r1
    fa24:	013e0500 	teqeq	lr, r0, lsl #10
    fa28:	000005da 	ldrdeq	r0, [r0], -sl
    fa2c:	58951100 	ldmpl	r5, {r8, ip}
    fa30:	3f050000 	svccc	0x00050000
    fa34:	0005da01 	andeq	sp, r5, r1, lsl #20
    fa38:	b4110600 	ldrlt	r0, [r1], #-1536	; 0xfffffa00
    fa3c:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    fa40:	00610140 	rsbeq	r0, r1, r0, asr #2
    fa44:	110c0000 	mrsne	r0, (UNDEF: 12)
    fa48:	00005822 	andeq	r5, r0, r2, lsr #16
    fa4c:	76014305 	strvc	r4, [r1], -r5, lsl #6
    fa50:	10000000 	andne	r0, r0, r0
    fa54:	00610800 	rsbeq	r0, r1, r0, lsl #16
    fa58:	05ea0000 	strbeq	r0, [sl, #0]!
    fa5c:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
    fa60:	02000000 	andeq	r0, r0, #0
    fa64:	56351000 	ldrtpl	r1, [r5], -r0
    fa68:	05100000 	ldreq	r0, [r0, #-0]
    fa6c:	062c0156 			; <UNDEFINED> instruction: 0x062c0156
    fa70:	52110000 	andspl	r0, r1, #0
    fa74:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
    fa78:	01840159 	orreq	r0, r4, r9, asr r1
    fa7c:	11000000 	mrsne	r0, (UNDEF: 0)
    fa80:	00005699 	muleq	r0, r9, r6
    fa84:	25015a05 	strcs	r5, [r1, #-2565]	; 0xfffff5fb
    fa88:	04000000 	streq	r0, [r0], #-0
    fa8c:	00592c11 	subseq	r2, r9, r1, lsl ip
    fa90:	015b0500 	cmpeq	fp, r0, lsl #10
    fa94:	00000184 	andeq	r0, r0, r4, lsl #3
    fa98:	579a1108 	ldrpl	r1, [sl, r8, lsl #2]
    fa9c:	5c050000 	stcpl	0, cr0, [r5], {-0}
    faa0:	00062c01 	andeq	r2, r6, r1, lsl #24
    faa4:	0d000c00 	stceq	12, cr0, [r0, #-0]
    faa8:	00018404 	andeq	r8, r1, r4, lsl #8
    faac:	58a81000 	stmiapl	r8!, {ip}
    fab0:	05500000 	ldrbeq	r0, [r0, #-0]
    fab4:	06cf0160 	strbeq	r0, [pc], r0, ror #2
    fab8:	9b110000 	blls	44fac0 <_Min_Stack_Size+0x44f8c0>
    fabc:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    fac0:	01190163 	tsteq	r9, r3, ror #2
    fac4:	11000000 	mrsne	r0, (UNDEF: 0)
    fac8:	0000582d 	andeq	r5, r0, sp, lsr #16
    facc:	01016405 	tsteq	r1, r5, lsl #8
    fad0:	04000001 	streq	r0, [r0], #-1
    fad4:	0055f911 	subseq	pc, r5, r1, lsl r9	; <UNPREDICTABLE>
    fad8:	01650500 	cmneq	r5, r0, lsl #10
    fadc:	00000101 	andeq	r0, r0, r1, lsl #2
    fae0:	591e110c 	ldmdbpl	lr, {r2, r3, r8, ip}
    fae4:	66050000 	strvs	r0, [r5], -r0
    fae8:	00010101 	andeq	r0, r1, r1, lsl #2
    faec:	e3111400 	tst	r1, #0, 8
    faf0:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    faf4:	06cf0167 	strbeq	r0, [pc], r7, ror #2
    faf8:	111c0000 	tstne	ip, r0
    fafc:	000058c1 	andeq	r5, r0, r1, asr #17
    fb00:	25016805 	strcs	r6, [r1, #-2053]	; 0xfffff7fb
    fb04:	24000000 	strcs	r0, [r0], #-0
    fb08:	00566511 	subseq	r6, r6, r1, lsl r5
    fb0c:	01690500 	cmneq	r9, r0, lsl #10
    fb10:	00000101 	andeq	r0, r0, r1, lsl #2
    fb14:	55ea1128 	strbpl	r1, [sl, #296]!	; 0x128
    fb18:	6a050000 	bvs	14fb20 <_Min_Stack_Size+0x14f920>
    fb1c:	00010101 	andeq	r0, r1, r1, lsl #2
    fb20:	54113000 	ldrpl	r3, [r1], #-0
    fb24:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    fb28:	0101016b 	tsteq	r1, fp, ror #2
    fb2c:	11380000 	teqne	r8, r0
    fb30:	000055c6 	andeq	r5, r0, r6, asr #11
    fb34:	01016c05 	tsteq	r1, r5, lsl #24
    fb38:	40000001 	andmi	r0, r0, r1
    fb3c:	0056af11 	subseq	sl, r6, r1, lsl pc
    fb40:	016d0500 	cmneq	sp, r0, lsl #10
    fb44:	00000101 	andeq	r0, r0, r1, lsl #2
    fb48:	1f080048 	svcne	0x00080048
    fb4c:	df000001 	svcle	0x00000001
    fb50:	09000006 	stmdbeq	r0, {r1, r2}
    fb54:	000000d9 	ldrdeq	r0, [r0], -r9
    fb58:	040d0007 	streq	r0, [sp], #-7
    fb5c:	000005ea 	andeq	r0, r0, sl, ror #11
    fb60:	0006f016 	andeq	pc, r6, r6, lsl r0	; <UNPREDICTABLE>
    fb64:	036a1400 	cmneq	sl, #0, 8
    fb68:	0d000000 	stceq	0, cr0, [r0, #-0]
    fb6c:	0006e504 	andeq	lr, r6, r4, lsl #10
    fb70:	98040d00 	stmdals	r4, {r8, sl, fp}
    fb74:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    fb78:	00019a04 	andeq	r9, r1, r4, lsl #20
    fb7c:	070d1600 	streq	r1, [sp, -r0, lsl #12]
    fb80:	25140000 	ldrcs	r0, [r4, #-0]
    fb84:	00000000 	andeq	r0, r0, r0
    fb88:	0713040d 	ldreq	r0, [r3, -sp, lsl #8]
    fb8c:	040d0000 	streq	r0, [sp], #-0
    fb90:	00000702 	andeq	r0, r0, r2, lsl #14
    fb94:	0632040d 	ldrteq	r0, [r2], -sp, lsl #8
    fb98:	ac170000 	ldcge	0, cr0, [r7], {-0}
    fb9c:	06000055 			; <UNDEFINED> instruction: 0x06000055
    fba0:	00011725 	andeq	r1, r1, r5, lsr #14
    fba4:	0007ac00 	andeq	sl, r7, r0, lsl #24
    fba8:	00001008 	andeq	r1, r0, r8
    fbac:	599c0100 	ldmibpl	ip, {r8}
    fbb0:	18000007 	stmdane	r0, {r0, r1, r2}
    fbb4:	00005ccc 	andeq	r5, r0, ip, asr #25
    fbb8:	002cd401 	eoreq	sp, ip, r1, lsl #8
    fbbc:	0a630000 	beq	18cfbc4 <_Min_Stack_Size+0x18cf9c4>
    fbc0:	b6190000 	ldrlt	r0, [r9], -r0
    fbc4:	9b080007 	blls	20fbe8 <_Min_Stack_Size+0x20f9e8>
    fbc8:	1a000007 	bne	fbec <_Min_Stack_Size+0xf9ec>
    fbcc:	f3035101 	vrhadd.u8	d5, d3, d1
    fbd0:	00005001 	andeq	r5, r0, r1
    fbd4:	005d2c1b 	subseq	r2, sp, fp, lsl ip
    fbd8:	bc2d0600 	stclt	6, cr0, [sp], #-0
    fbdc:	10080007 	andne	r0, r8, r7
    fbe0:	01000000 	mrseq	r0, (UNDEF: 0)
    fbe4:	00078f9c 	muleq	r7, ip, pc	; <UNPREDICTABLE>
    fbe8:	5c991800 	ldcpl	8, cr1, [r9], {0}
    fbec:	db010000 	blle	4fbf4 <_Min_Stack_Size+0x4f9f4>
    fbf0:	00000117 	andeq	r0, r0, r7, lsl r1
    fbf4:	00000a8f 	andeq	r0, r0, pc, lsl #21
    fbf8:	0007c619 	andeq	ip, r7, r9, lsl r6
    fbfc:	0007a608 	andeq	sl, r7, r8, lsl #12
    fc00:	51011a00 	tstpl	r1, r0, lsl #20
    fc04:	5001f303 	andpl	pc, r1, r3, lsl #6
    fc08:	7c1c0000 	ldcvc	0, cr0, [ip], {-0}
    fc0c:	0500005c 	streq	r0, [r0, #-92]	; 0xffffffa4
    fc10:	036a02fd 	cmneq	sl, #-805306353	; 0xd000000f
    fc14:	db1d0000 	blle	74fc1c <_Min_Stack_Size+0x74fa1c>
    fc18:	db00005c 	blle	fd90 <_Min_Stack_Size+0xfb90>
    fc1c:	0600005c 			; <UNDEFINED> instruction: 0x0600005c
    fc20:	5cd31d2a 	ldclpl	13, cr1, [r3], {42}	; 0x2a
    fc24:	5cd30000 	ldclpl	0, cr0, [r3], {0}
    fc28:	32060000 	andcc	r0, r6, #0
    fc2c:	00082100 	andeq	r2, r8, r0, lsl #2
    fc30:	0f000400 	svceq	0x00000400
    fc34:	04000035 	streq	r0, [r0], #-53	; 0xffffffcb
    fc38:	0054bf01 	subseq	fp, r4, r1, lsl #30
    fc3c:	5cf30c00 	ldclpl	12, cr0, [r3]
    fc40:	56e60000 	strbtpl	r0, [r6], r0
    fc44:	07cc0000 	strbeq	r0, [ip, r0]
    fc48:	008c0800 	addeq	r0, ip, r0, lsl #16
    fc4c:	6b450000 	blvs	114fc54 <_Min_Stack_Size+0x114fa54>
    fc50:	01020000 	mrseq	r0, (UNDEF: 2)
    fc54:	00019206 	andeq	r9, r1, r6, lsl #4
    fc58:	08010200 	stmdaeq	r1, {r9}
    fc5c:	00000190 	muleq	r0, r0, r1
    fc60:	95050202 	strls	r0, [r5, #-514]	; 0xfffffdfe
    fc64:	02000000 	andeq	r0, r0, #0
    fc68:	01f20702 	mvnseq	r0, r2, lsl #14
    fc6c:	04020000 	streq	r0, [r2], #-0
    fc70:	0000bd05 	andeq	fp, r0, r5, lsl #26
    fc74:	07040200 	streq	r0, [r4, -r0, lsl #4]
    fc78:	000001c9 	andeq	r0, r0, r9, asr #3
    fc7c:	b8050802 	stmdalt	r5, {r1, fp}
    fc80:	02000000 	andeq	r0, r0, #0
    fc84:	01c40708 	biceq	r0, r4, r8, lsl #14
    fc88:	04030000 	streq	r0, [r3], #-0
    fc8c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    fc90:	07040200 	streq	r0, [r4, -r0, lsl #4]
    fc94:	000001ce 	andeq	r0, r0, lr, asr #3
    fc98:	005cec04 	subseq	lr, ip, r4, lsl #24
    fc9c:	64d80200 	ldrbvs	r0, [r8], #512	; 0x200
    fca0:	02000000 	andeq	r0, r0, #0
    fca4:	02f80408 	rscseq	r0, r8, #8, 8	; 0x8000000
    fca8:	04050000 	streq	r0, [r5], #-0
    fcac:	0057a404 	subseq	sl, r7, r4, lsl #8
    fcb0:	5d070300 	stcpl	3, cr0, [r7, #-0]
    fcb4:	04000000 	streq	r0, [r0], #-0
    fcb8:	00005793 	muleq	r0, r3, r7
    fcbc:	00412c04 	subeq	r2, r1, r4, lsl #24
    fcc0:	7d040000 	stcvc	0, cr0, [r4, #-0]
    fcc4:	04000058 	streq	r0, [r0], #-88	; 0xffffffa8
    fcc8:	00004172 	andeq	r4, r0, r2, ror r1
    fccc:	57600600 	strbpl	r0, [r0, -r0, lsl #12]!
    fcd0:	65020000 	strvs	r0, [r2, #-0]
    fcd4:	00006401 	andeq	r6, r0, r1, lsl #8
    fcd8:	04040700 	streq	r0, [r4], #-1792	; 0xfffff900
    fcdc:	0000cba6 	andeq	ip, r0, r6, lsr #23
    fce0:	575a0800 	ldrbpl	r0, [sl, -r0, lsl #16]
    fce4:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    fce8:	000000a0 	andeq	r0, r0, r0, lsr #1
    fcec:	0056a808 	subseq	sl, r6, r8, lsl #16
    fcf0:	cba90400 	blgt	fea50cf8 <BootRAM+0xd9c1499>
    fcf4:	00000000 	andeq	r0, r0, r0
    fcf8:	00002c09 	andeq	r2, r0, r9, lsl #24
    fcfc:	0000db00 	andeq	sp, r0, r0, lsl #22
    fd00:	00db0a00 	sbcseq	r0, fp, r0, lsl #20
    fd04:	00030000 	andeq	r0, r3, r0
    fd08:	59070402 	stmdbpl	r7, {r1, sl}
    fd0c:	0b000000 	bleq	fd14 <_Min_Stack_Size+0xfb14>
    fd10:	03a30408 			; <UNDEFINED> instruction: 0x03a30408
    fd14:	0c000001 	stceq	0, cr0, [r0], {1}
    fd18:	00005867 	andeq	r5, r0, r7, ror #16
    fd1c:	005da504 	subseq	sl, sp, r4, lsl #10
    fd20:	0c000000 	stceq	0, cr0, [r0], {-0}
    fd24:	0000586f 	andeq	r5, r0, pc, ror #16
    fd28:	00acaa04 	adceq	sl, ip, r4, lsl #20
    fd2c:	00040000 	andeq	r0, r4, r0
    fd30:	00580604 	subseq	r0, r8, r4, lsl #12
    fd34:	e2ab0400 	adc	r0, fp, #0, 8
    fd38:	04000000 	streq	r0, [r0], #-0
    fd3c:	00005679 	andeq	r5, r0, r9, ror r6
    fd40:	007faf04 	rsbseq	sl, pc, r4, lsl #30
    fd44:	b9040000 	stmdblt	r4, {}	; <UNPREDICTABLE>
    fd48:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    fd4c:	00004816 	andeq	r4, r0, r6, lsl r8
    fd50:	56820d00 	strpl	r0, [r2], r0, lsl #26
    fd54:	05180000 	ldreq	r0, [r8, #-0]
    fd58:	0001772d 	andeq	r7, r1, sp, lsr #14
    fd5c:	58270c00 	stmdapl	r7!, {sl, fp}
    fd60:	2f050000 	svccs	0x00050000
    fd64:	00000177 	andeq	r0, r0, r7, ror r1
    fd68:	6b5f0e00 	blvs	17d3570 <_Min_Stack_Size+0x17d3370>
    fd6c:	5d300500 	cfldr32pl	mvfx0, [r0, #-0]
    fd70:	04000000 	streq	r0, [r0], #-0
    fd74:	0058590c 	subseq	r5, r8, ip, lsl #18
    fd78:	5d300500 	cfldr32pl	mvfx0, [r0, #-0]
    fd7c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    fd80:	0056730c 	subseq	r7, r6, ip, lsl #6
    fd84:	5d300500 	cfldr32pl	mvfx0, [r0, #-0]
    fd88:	0c000000 	stceq	0, cr0, [r0], {-0}
    fd8c:	0058d40c 	subseq	sp, r8, ip, lsl #8
    fd90:	5d300500 	cfldr32pl	mvfx0, [r0, #-0]
    fd94:	10000000 	andne	r0, r0, r0
    fd98:	00785f0e 	rsbseq	r5, r8, lr, lsl #30
    fd9c:	017d3105 	cmneq	sp, r5, lsl #2
    fda0:	00140000 	andseq	r0, r4, r0
    fda4:	0124040f 			; <UNDEFINED> instruction: 0x0124040f
    fda8:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    fdac:	8d000001 	stchi	0, cr0, [r0, #-4]
    fdb0:	0a000001 	beq	fdbc <_Min_Stack_Size+0xfbbc>
    fdb4:	000000db 	ldrdeq	r0, [r0], -fp
    fdb8:	a30d0000 	movwge	r0, #53248	; 0xd000
    fdbc:	24000056 	strcs	r0, [r0], #-86	; 0xffffffaa
    fdc0:	02063505 	andeq	r3, r6, #20971520	; 0x1400000
    fdc4:	070c0000 	streq	r0, [ip, -r0]
    fdc8:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    fdcc:	00005d37 	andeq	r5, r0, r7, lsr sp
    fdd0:	8c0c0000 	stchi	0, cr0, [ip], {-0}
    fdd4:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    fdd8:	00005d38 	andeq	r5, r0, r8, lsr sp
    fddc:	160c0400 	strne	r0, [ip], -r0, lsl #8
    fde0:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    fde4:	00005d39 	andeq	r5, r0, r9, lsr sp
    fde8:	310c0800 	tstcc	ip, r0, lsl #16
    fdec:	05000059 	streq	r0, [r0, #-89]	; 0xffffffa7
    fdf0:	00005d3a 	andeq	r5, r0, sl, lsr sp
    fdf4:	7f0c0c00 	svcvc	0x000c0c00
    fdf8:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
    fdfc:	00005d3b 	andeq	r5, r0, fp, lsr sp
    fe00:	6f0c1000 	svcvs	0x000c1000
    fe04:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
    fe08:	00005d3c 	andeq	r5, r0, ip, lsr sp
    fe0c:	d90c1400 	stmdble	ip, {sl, ip}
    fe10:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    fe14:	00005d3d 	andeq	r5, r0, sp, lsr sp
    fe18:	ee0c1800 	cdp	8, 0, cr1, cr12, cr0, {0}
    fe1c:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
    fe20:	00005d3e 	andeq	r5, r0, lr, lsr sp
    fe24:	fd0c1c00 	stc2	12, cr1, [ip, #-0]
    fe28:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
    fe2c:	00005d3f 	andeq	r5, r0, pc, lsr sp
    fe30:	0d002000 	stceq	0, cr2, [r0, #-0]
    fe34:	000057f8 	strdeq	r5, [r0], -r8
    fe38:	2b730508 	blcs	1cd1260 <_Min_Stack_Size+0x1cd1060>
    fe3c:	0c000002 	stceq	0, cr0, [r0], {2}
    fe40:	00003a5f 	andeq	r3, r0, pc, asr sl
    fe44:	022b7405 	eoreq	r7, fp, #83886080	; 0x5000000
    fe48:	0c000000 	stceq	0, cr0, [r0], {-0}
    fe4c:	00005da3 	andeq	r5, r0, r3, lsr #27
    fe50:	005d7505 	subseq	r7, sp, r5, lsl #10
    fe54:	00040000 	andeq	r0, r4, r0
    fe58:	002c040f 	eoreq	r0, ip, pc, lsl #8
    fe5c:	ad100000 	ldcge	0, cr0, [r0, #-0]
    fe60:	60000058 	andvs	r0, r0, r8, asr r0
    fe64:	5d017205 	sfmpl	f7, 4, [r1, #-20]	; 0xffffffec
    fe68:	11000003 	tstne	r0, r3
    fe6c:	00005885 	andeq	r5, r0, r5, lsl #17
    fe70:	5d017605 	stcpl	6, cr7, [r1, #-20]	; 0xffffffec
    fe74:	00000000 	andeq	r0, r0, r0
    fe78:	005bc611 	subseq	ip, fp, r1, lsl r6
    fe7c:	017b0500 	cmneq	fp, r0, lsl #10
    fe80:	00000592 	muleq	r0, r2, r5
    fe84:	5bd61104 	blpl	ff59429c <BootRAM+0xe504a3d>
    fe88:	7b050000 	blvc	14fe90 <_Min_Stack_Size+0x14fc90>
    fe8c:	00059201 	andeq	r9, r5, r1, lsl #4
    fe90:	91110800 	tstls	r1, r0, lsl #16
    fe94:	0500005c 	streq	r0, [r0, #-92]	; 0xffffffa4
    fe98:	0592017b 	ldreq	r0, [r2, #379]	; 0x17b
    fe9c:	110c0000 	mrsne	r0, (UNDEF: 12)
    fea0:	0000583a 	andeq	r5, r0, sl, lsr r8
    fea4:	5d017d05 	stcpl	13, cr7, [r1, #-20]	; 0xffffffec
    fea8:	10000000 	andne	r0, r0, r0
    feac:	0055bb11 	subseq	fp, r5, r1, lsl fp
    feb0:	017f0500 	cmneq	pc, r0, lsl #10
    feb4:	000004ab 	andeq	r0, r0, fp, lsr #9
    feb8:	57881114 	usada8pl	r8, r4, r1, r1
    febc:	81050000 	mrshi	r0, (UNDEF: 5)
    fec0:	00005d01 	andeq	r5, r0, r1, lsl #26
    fec4:	c0111800 	andsgt	r1, r1, r0, lsl #16
    fec8:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    fecc:	005d0183 	subseq	r0, sp, r3, lsl #3
    fed0:	111c0000 	tstne	ip, r0
    fed4:	0000583f 	andeq	r5, r0, pc, lsr r8
    fed8:	dc018405 	cfstrsle	mvf8, [r1], {5}
    fedc:	20000004 	andcs	r0, r0, r4
    fee0:	706d5f12 	rsbvc	r5, sp, r2, lsl pc
    fee4:	01860500 	orreq	r0, r6, r0, lsl #10
    fee8:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    feec:	584f1124 	stmdapl	pc, {r2, r5, r8, ip}^	; <UNPREDICTABLE>
    fef0:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
    fef4:	0006f001 	andeq	pc, r6, r1
    fef8:	8a112800 	bhi	459f00 <_Min_Stack_Size+0x459d00>
    fefc:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    ff00:	005d018a 	subseq	r0, sp, sl, lsl #3
    ff04:	112c0000 			; <UNDEFINED> instruction: 0x112c0000
    ff08:	000056d2 	ldrdeq	r5, [r0], -r2
    ff0c:	5d018d05 	stcpl	13, cr8, [r1, #-20]	; 0xffffffec
    ff10:	30000000 	andcc	r0, r0, r0
    ff14:	00564c11 	subseq	r4, r6, r1, lsl ip
    ff18:	018e0500 	orreq	r0, lr, r0, lsl #10
    ff1c:	000004ab 	andeq	r0, r0, fp, lsr #9
    ff20:	56da1134 			; <UNDEFINED> instruction: 0x56da1134
    ff24:	90050000 	andls	r0, r5, r0
    ff28:	0006f601 	andeq	pc, r6, r1, lsl #12
    ff2c:	08113800 	ldmdaeq	r1, {fp, ip, sp}
    ff30:	05000059 	streq	r0, [r0, #-89]	; 0xffffffa7
    ff34:	06fc0191 	usateq	r0, #28, r1, lsl #3
    ff38:	113c0000 	teqne	ip, r0
    ff3c:	00005745 	andeq	r5, r0, r5, asr #14
    ff40:	ab019205 	blge	7475c <_Min_Stack_Size+0x7455c>
    ff44:	40000004 	andmi	r0, r0, r4
    ff48:	0058ed11 	subseq	lr, r8, r1, lsl sp
    ff4c:	01950500 	orrseq	r0, r5, r0, lsl #10
    ff50:	0000070d 	andeq	r0, r0, sp, lsl #14
    ff54:	562d1144 	strtpl	r1, [sp], -r4, asr #2
    ff58:	9d050000 	stcls	0, cr0, [r5, #-0]
    ff5c:	00055701 	andeq	r5, r5, r1, lsl #14
    ff60:	20114800 	andscs	r4, r1, r0, lsl #16
    ff64:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
    ff68:	0592019e 	ldreq	r0, [r2, #414]	; 0x19e
    ff6c:	11540000 	cmpne	r4, r0
    ff70:	00005779 	andeq	r5, r0, r9, ror r7
    ff74:	19019f05 	stmdbne	r1, {r0, r2, r8, r9, sl, fp, ip, pc}
    ff78:	58000007 	stmdapl	r0, {r0, r1, r2}
    ff7c:	0055d511 	subseq	sp, r5, r1, lsl r5
    ff80:	01a00500 	lsleq	r0, r0, #10
    ff84:	000004ab 	andeq	r0, r0, fp, lsr #9
    ff88:	040f005c 	streq	r0, [pc], #-92	; ff90 <_Min_Stack_Size+0xfd90>
    ff8c:	00000231 	andeq	r0, r0, r1, lsr r2
    ff90:	0058110d 	subseq	r1, r8, sp, lsl #2
    ff94:	b3056800 	movwlt	r6, #22528	; 0x5800
    ff98:	0000048d 	andeq	r0, r0, sp, lsl #9
    ff9c:	00705f0e 	rsbseq	r5, r0, lr, lsl #30
    ffa0:	022bb405 	eoreq	fp, fp, #83886080	; 0x5000000
    ffa4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    ffa8:	0500725f 	streq	r7, [r0, #-607]	; 0xfffffda1
    ffac:	00005db5 			; <UNDEFINED> instruction: 0x00005db5
    ffb0:	5f0e0400 	svcpl	0x000e0400
    ffb4:	b6050077 			; <UNDEFINED> instruction: 0xb6050077
    ffb8:	0000005d 	andeq	r0, r0, sp, asr r0
    ffbc:	563c0c08 	ldrtpl	r0, [ip], -r8, lsl #24
    ffc0:	b7050000 	strlt	r0, [r5, -r0]
    ffc4:	00000033 	andeq	r0, r0, r3, lsr r0
    ffc8:	58ce0c0c 	stmiapl	lr, {r2, r3, sl, fp}^
    ffcc:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    ffd0:	00000033 	andeq	r0, r0, r3, lsr r0
    ffd4:	625f0e0e 	subsvs	r0, pc, #14, 28	; 0xe0
    ffd8:	b9050066 	stmdblt	r5, {r1, r2, r5, r6}
    ffdc:	00000206 	andeq	r0, r0, r6, lsl #4
    ffe0:	55e10c10 	strbpl	r0, [r1, #3088]!	; 0xc10
    ffe4:	ba050000 	blt	14ffec <_Min_Stack_Size+0x14fdec>
    ffe8:	0000005d 	andeq	r0, r0, sp, asr r0
    ffec:	0deb0c18 	stcleq	12, cr0, [fp, #96]!	; 0x60
    fff0:	bd050000 	stclt	0, cr0, [r5, #-0]
    fff4:	0000035d 	andeq	r0, r0, sp, asr r3
    fff8:	56250c1c 			; <UNDEFINED> instruction: 0x56250c1c
    fffc:	c1050000 	mrsgt	r0, (UNDEF: 5)
   10000:	0000007d 	andeq	r0, r0, sp, ror r0
   10004:	40610c20 	rsbmi	r0, r1, r0, lsr #24
   10008:	c3050000 	movwgt	r0, #20480	; 0x5000
   1000c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
   10010:	3fbc0c24 	svccc	0x00bc0c24
   10014:	c5050000 	strgt	r0, [r5, #-0]
   10018:	000004e7 	andeq	r0, r0, r7, ror #9
   1001c:	58770c28 	ldmdapl	r7!, {r3, r5, sl, fp}^
   10020:	c8050000 	stmdagt	r5, {}	; <UNPREDICTABLE>
   10024:	0000050b 	andeq	r0, r0, fp, lsl #10
   10028:	59170c2c 	ldmdbpl	r7, {r2, r3, r5, sl, fp}
   1002c:	c9050000 	stmdbgt	r5, {}	; <UNPREDICTABLE>
   10030:	00000525 	andeq	r0, r0, r5, lsr #10
   10034:	755f0e30 	ldrbvc	r0, [pc, #-3632]	; f20c <_Min_Stack_Size+0xf00c>
   10038:	cc050062 	stcgt	0, cr0, [r5], {98}	; 0x62
   1003c:	00000206 	andeq	r0, r0, r6, lsl #4
   10040:	755f0e34 	ldrbvc	r0, [pc, #-3636]	; f214 <_Min_Stack_Size+0xf014>
   10044:	cd050070 	stcgt	0, cr0, [r5, #-448]	; 0xfffffe40
   10048:	0000022b 	andeq	r0, r0, fp, lsr #4
   1004c:	755f0e3c 	ldrbvc	r0, [pc, #-3644]	; f218 <_Min_Stack_Size+0xf018>
   10050:	ce050072 	mcrgt	0, 0, r0, cr5, cr2, {3}
   10054:	0000005d 	andeq	r0, r0, sp, asr r0
   10058:	56100c40 	ldrpl	r0, [r0], -r0, asr #24
   1005c:	d1050000 	mrsle	r0, (UNDEF: 5)
   10060:	0000052b 	andeq	r0, r0, fp, lsr #10
   10064:	58f70c44 	ldmpl	r7!, {r2, r6, sl, fp}^
   10068:	d2050000 	andle	r0, r5, #0
   1006c:	0000053b 	andeq	r0, r0, fp, lsr r5
   10070:	6c5f0e47 	mrrcvs	14, 4, r0, pc, cr7	; <UNPREDICTABLE>
   10074:	d5050062 	strle	r0, [r5, #-98]	; 0xffffff9e
   10078:	00000206 	andeq	r0, r0, r6, lsl #4
   1007c:	56430c48 	strbpl	r0, [r3], -r8, asr #24
   10080:	d8050000 	stmdale	r5, {}	; <UNPREDICTABLE>
   10084:	0000005d 	andeq	r0, r0, sp, asr r0
   10088:	61250c50 			; <UNDEFINED> instruction: 0x61250c50
   1008c:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
   10090:	0000008a 	andeq	r0, r0, sl, lsl #1
   10094:	3c010c54 	stccc	12, cr0, [r1], {84}	; 0x54
   10098:	e0050000 	and	r0, r5, r0
   1009c:	0000010e 	andeq	r0, r0, lr, lsl #2
   100a0:	58190c58 	ldmdapl	r9, {r3, r4, r6, sl, fp}
   100a4:	e2050000 	and	r0, r5, #0
   100a8:	00000103 	andeq	r0, r0, r3, lsl #2
   100ac:	57670c5c 			; <UNDEFINED> instruction: 0x57670c5c
   100b0:	e3050000 	movw	r0, #20480	; 0x5000
   100b4:	0000005d 	andeq	r0, r0, sp, asr r0
   100b8:	5d130064 	ldcpl	0, cr0, [r3, #-400]	; 0xfffffe70
   100bc:	ab000000 	blge	100c4 <_Min_Stack_Size+0xfec4>
   100c0:	14000004 	strne	r0, [r0], #-4
   100c4:	0000035d 	andeq	r0, r0, sp, asr r3
   100c8:	00007d14 	andeq	r7, r0, r4, lsl sp
   100cc:	04ab1400 	strteq	r1, [fp], #1024	; 0x400
   100d0:	5d140000 	ldcpl	0, cr0, [r4, #-0]
   100d4:	00000000 	andeq	r0, r0, r0
   100d8:	04b1040f 	ldrteq	r0, [r1], #1039	; 0x40f
   100dc:	01020000 	mrseq	r0, (UNDEF: 2)
   100e0:	00019908 	andeq	r9, r1, r8, lsl #18
   100e4:	8d040f00 	stchi	15, cr0, [r4, #-0]
   100e8:	13000004 	movwne	r0, #4
   100ec:	0000005d 	andeq	r0, r0, sp, asr r0
   100f0:	000004dc 	ldrdeq	r0, [r0], -ip
   100f4:	00035d14 	andeq	r5, r3, r4, lsl sp
   100f8:	007d1400 	rsbseq	r1, sp, r0, lsl #8
   100fc:	dc140000 	ldcle	0, cr0, [r4], {-0}
   10100:	14000004 	strne	r0, [r0], #-4
   10104:	0000005d 	andeq	r0, r0, sp, asr r0
   10108:	e2040f00 	and	r0, r4, #0, 30
   1010c:	15000004 	strne	r0, [r0, #-4]
   10110:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
   10114:	04be040f 	ldrteq	r0, [lr], #1039	; 0x40f
   10118:	95130000 	ldrls	r0, [r3, #-0]
   1011c:	0b000000 	bleq	10124 <_Min_Stack_Size+0xff24>
   10120:	14000005 	strne	r0, [r0], #-5
   10124:	0000035d 	andeq	r0, r0, sp, asr r3
   10128:	00007d14 	andeq	r7, r0, r4, lsl sp
   1012c:	00951400 	addseq	r1, r5, r0, lsl #8
   10130:	5d140000 	ldcpl	0, cr0, [r4, #-0]
   10134:	00000000 	andeq	r0, r0, r0
   10138:	04ed040f 	strbteq	r0, [sp], #1039	; 0x40f
   1013c:	5d130000 	ldcpl	0, cr0, [r3, #-0]
   10140:	25000000 	strcs	r0, [r0, #-0]
   10144:	14000005 	strne	r0, [r0], #-5
   10148:	0000035d 	andeq	r0, r0, sp, asr r3
   1014c:	00007d14 	andeq	r7, r0, r4, lsl sp
   10150:	040f0000 	streq	r0, [pc], #-0	; 10158 <_Min_Stack_Size+0xff58>
   10154:	00000511 	andeq	r0, r0, r1, lsl r5
   10158:	00002c09 	andeq	r2, r0, r9, lsl #24
   1015c:	00053b00 	andeq	r3, r5, r0, lsl #22
   10160:	00db0a00 	sbcseq	r0, fp, r0, lsl #20
   10164:	00020000 	andeq	r0, r2, r0
   10168:	00002c09 	andeq	r2, r0, r9, lsl #24
   1016c:	00054b00 	andeq	r4, r5, r0, lsl #22
   10170:	00db0a00 	sbcseq	r0, fp, r0, lsl #20
   10174:	00000000 	andeq	r0, r0, r0
   10178:	0057ff06 	subseq	pc, r7, r6, lsl #30
   1017c:	011d0500 	tsteq	sp, r0, lsl #10
   10180:	00000363 	andeq	r0, r0, r3, ror #6
   10184:	0060e410 	rsbeq	lr, r0, r0, lsl r4
   10188:	21050c00 	tstcs	r5, r0, lsl #24
   1018c:	00058c01 	andeq	r8, r5, r1, lsl #24
   10190:	58271100 	stmdapl	r7!, {r8, ip}
   10194:	23050000 	movwcs	r0, #20480	; 0x5000
   10198:	00058c01 	andeq	r8, r5, r1, lsl #24
   1019c:	df110000 	svcle	0x00110000
   101a0:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   101a4:	005d0124 	subseq	r0, sp, r4, lsr #2
   101a8:	11040000 	mrsne	r0, (UNDEF: 4)
   101ac:	000057e8 	andeq	r5, r0, r8, ror #15
   101b0:	92012505 	andls	r2, r1, #20971520	; 0x1400000
   101b4:	08000005 	stmdaeq	r0, {r0, r2}
   101b8:	57040f00 	strpl	r0, [r4, -r0, lsl #30]
   101bc:	0f000005 	svceq	0x00000005
   101c0:	00054b04 	andeq	r4, r5, r4, lsl #22
   101c4:	55b31000 	ldrpl	r1, [r3, #0]!
   101c8:	05180000 	ldreq	r0, [r8, #-0]
   101cc:	05da013d 	ldrbeq	r0, [sl, #317]	; 0x13d
   101d0:	61110000 	tstvs	r1, r0
   101d4:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   101d8:	05da013e 	ldrbeq	r0, [sl, #318]	; 0x13e
   101dc:	11000000 	mrsne	r0, (UNDEF: 0)
   101e0:	00005895 	muleq	r0, r5, r8
   101e4:	da013f05 	ble	5fe00 <_Min_Stack_Size+0x5fc00>
   101e8:	06000005 	streq	r0, [r0], -r5
   101ec:	0058b411 	subseq	fp, r8, r1, lsl r4
   101f0:	01400500 	cmpeq	r0, r0, lsl #10
   101f4:	0000003a 	andeq	r0, r0, sl, lsr r0
   101f8:	5822110c 	stmdapl	r2!, {r2, r3, r8, ip}
   101fc:	43050000 	movwmi	r0, #20480	; 0x5000
   10200:	00005601 	andeq	r5, r0, r1, lsl #12
   10204:	09001000 	stmdbeq	r0, {ip}
   10208:	0000003a 	andeq	r0, r0, sl, lsr r0
   1020c:	000005ea 	andeq	r0, r0, sl, ror #11
   10210:	0000db0a 	andeq	sp, r0, sl, lsl #22
   10214:	10000200 	andne	r0, r0, r0, lsl #4
   10218:	00005635 	andeq	r5, r0, r5, lsr r6
   1021c:	01560510 	cmpeq	r6, r0, lsl r5
   10220:	0000062c 	andeq	r0, r0, ip, lsr #12
   10224:	00575211 	subseq	r5, r7, r1, lsl r2
   10228:	01590500 	cmpeq	r9, r0, lsl #10
   1022c:	00000177 	andeq	r0, r0, r7, ror r1
   10230:	56991100 	ldrpl	r1, [r9], r0, lsl #2
   10234:	5a050000 	bpl	15023c <_Min_Stack_Size+0x15003c>
   10238:	00005d01 	andeq	r5, r0, r1, lsl #26
   1023c:	2c110400 	cfldrscs	mvf0, [r1], {-0}
   10240:	05000059 	streq	r0, [r0, #-89]	; 0xffffffa7
   10244:	0177015b 	cmneq	r7, fp, asr r1
   10248:	11080000 	mrsne	r0, (UNDEF: 8)
   1024c:	0000579a 	muleq	r0, sl, r7
   10250:	2c015c05 	stccs	12, cr5, [r1], {5}
   10254:	0c000006 	stceq	0, cr0, [r0], {6}
   10258:	77040f00 	strvc	r0, [r4, -r0, lsl #30]
   1025c:	10000001 	andne	r0, r0, r1
   10260:	000058a8 	andeq	r5, r0, r8, lsr #17
   10264:	01600550 	cmneq	r0, r0, asr r5
   10268:	000006cf 	andeq	r0, r0, pc, asr #13
   1026c:	00589b11 	subseq	r9, r8, r1, lsl fp
   10270:	01630500 	cmneq	r3, r0, lsl #10
   10274:	000004ab 	andeq	r0, r0, fp, lsr #9
   10278:	582d1100 	stmdapl	sp!, {r8, ip}
   1027c:	64050000 	strvs	r0, [r5], #-0
   10280:	00010301 	andeq	r0, r1, r1, lsl #6
   10284:	f9110400 			; <UNDEFINED> instruction: 0xf9110400
   10288:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
   1028c:	01030165 	tsteq	r3, r5, ror #2
   10290:	110c0000 	mrsne	r0, (UNDEF: 12)
   10294:	0000591e 	andeq	r5, r0, lr, lsl r9
   10298:	03016605 	movweq	r6, #5637	; 0x1605
   1029c:	14000001 	strne	r0, [r0], #-1
   102a0:	0058e311 	subseq	lr, r8, r1, lsl r3
   102a4:	01670500 	cmneq	r7, r0, lsl #10
   102a8:	000006cf 	andeq	r0, r0, pc, asr #13
   102ac:	58c1111c 	stmiapl	r1, {r2, r3, r4, r8, ip}^
   102b0:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
   102b4:	00005d01 	andeq	r5, r0, r1, lsl #26
   102b8:	65112400 	ldrvs	r2, [r1, #-1024]	; 0xfffffc00
   102bc:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   102c0:	01030169 	tsteq	r3, r9, ror #2
   102c4:	11280000 			; <UNDEFINED> instruction: 0x11280000
   102c8:	000055ea 	andeq	r5, r0, sl, ror #11
   102cc:	03016a05 	movweq	r6, #6661	; 0x1a05
   102d0:	30000001 	andcc	r0, r0, r1
   102d4:	00565411 	subseq	r5, r6, r1, lsl r4
   102d8:	016b0500 	cmneq	fp, r0, lsl #10
   102dc:	00000103 	andeq	r0, r0, r3, lsl #2
   102e0:	55c61138 	strbpl	r1, [r6, #312]	; 0x138
   102e4:	6c050000 	stcvs	0, cr0, [r5], {-0}
   102e8:	00010301 	andeq	r0, r1, r1, lsl #6
   102ec:	af114000 	svcge	0x00114000
   102f0:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   102f4:	0103016d 	tsteq	r3, sp, ror #2
   102f8:	00480000 	subeq	r0, r8, r0
   102fc:	0004b109 	andeq	fp, r4, r9, lsl #2
   10300:	0006df00 	andeq	sp, r6, r0, lsl #30
   10304:	00db0a00 	sbcseq	r0, fp, r0, lsl #20
   10308:	00070000 	andeq	r0, r7, r0
   1030c:	05ea040f 	strbeq	r0, [sl, #1039]!	; 0x40f
   10310:	f0160000 			; <UNDEFINED> instruction: 0xf0160000
   10314:	14000006 	strne	r0, [r0], #-6
   10318:	0000035d 	andeq	r0, r0, sp, asr r3
   1031c:	e5040f00 	str	r0, [r4, #-3840]	; 0xfffff100
   10320:	0f000006 	svceq	0x00000006
   10324:	00059804 	andeq	r9, r5, r4, lsl #16
   10328:	8d040f00 	stchi	15, cr0, [r4, #-0]
   1032c:	16000001 	strne	r0, [r0], -r1
   10330:	0000070d 	andeq	r0, r0, sp, lsl #14
   10334:	00005d14 	andeq	r5, r0, r4, lsl sp
   10338:	040f0000 	streq	r0, [pc], #-0	; 10340 <_Min_Stack_Size+0x10140>
   1033c:	00000713 	andeq	r0, r0, r3, lsl r7
   10340:	0702040f 	streq	r0, [r2, -pc, lsl #8]
   10344:	040f0000 	streq	r0, [pc], #-0	; 1034c <_Min_Stack_Size+0x1014c>
   10348:	00000632 	andeq	r0, r0, r2, lsr r6
   1034c:	005ce504 	subseq	lr, ip, r4, lsl #10
   10350:	6b7b0100 	blvs	1ed0758 <_Min_Stack_Size+0x1ed0558>
   10354:	0d000000 	stceq	0, cr0, [r0, #-0]
   10358:	00005d38 	andeq	r5, r0, r8, lsr sp
   1035c:	4f7d0108 	svcmi	0x007d0108
   10360:	0c000007 	stceq	0, cr0, [r0], {7}
   10364:	00005da4 	andeq	r5, r0, r4, lsr #27
   10368:	00418f01 	subeq	r8, r1, r1, lsl #30
   1036c:	0c000000 	stceq	0, cr0, [r0], {-0}
   10370:	00005828 	andeq	r5, r0, r8, lsr #16
   10374:	074f9201 	strbeq	r9, [pc, -r1, lsl #4]
   10378:	00040000 	andeq	r0, r4, r0
   1037c:	072a040f 	streq	r0, [sl, -pc, lsl #8]!
   10380:	3f040000 	svccc	0x00040000
   10384:	0100005d 	qaddeq	r0, sp, r0
   10388:	00072a93 	muleq	r7, r3, sl
   1038c:	5d4f1700 	stclpl	7, cr1, [pc, #-0]	; 10394 <_Min_Stack_Size+0x10194>
   10390:	bd010000 	stclt	0, cr0, [r1, #-0]
   10394:	00000785 	andeq	r0, r0, r5, lsl #15
   10398:	00078503 	andeq	r8, r7, r3, lsl #10
   1039c:	74701800 	ldrbtvc	r1, [r0], #-2048	; 0xfffff800
   103a0:	bd010072 	stclt	0, cr0, [r1, #-456]	; 0xfffffe38
   103a4:	0000007d 	andeq	r0, r0, sp, ror r0
   103a8:	01006319 	tsteq	r0, r9, lsl r3
   103ac:	000785bf 			; <UNDEFINED> instruction: 0x000785bf
   103b0:	040f0000 	streq	r0, [pc], #-0	; 103b8 <_Min_Stack_Size+0x101b8>
   103b4:	00000755 	andeq	r0, r0, r5, asr r7
   103b8:	005cd31a 	subseq	sp, ip, sl, lsl r3
   103bc:	01520100 	cmpeq	r2, r0, lsl #2
   103c0:	080007cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl}
   103c4:	0000008c 	andeq	r0, r0, ip, lsl #1
   103c8:	08199c01 	ldmdaeq	r9, {r0, sl, fp, ip, pc}
   103cc:	451b0000 	ldrmi	r0, [fp, #-0]
   103d0:	0100005d 	qaddeq	r0, sp, r0
   103d4:	035d0152 	cmpeq	sp, #-2147483628	; 0x80000014
   103d8:	0abb0000 	beq	feed03e0 <BootRAM+0xde40b81>
   103dc:	311b0000 	tstcc	fp, r0
   103e0:	0100005d 	qaddeq	r0, sp, r0
   103e4:	007d0152 	rsbseq	r0, sp, r2, asr r1
   103e8:	0b0e0000 	bleq	3903f0 <_Min_Stack_Size+0x3901f0>
   103ec:	271c0000 	ldrcs	r0, [ip, -r0]
   103f0:	0100005d 	qaddeq	r0, sp, r0
   103f4:	07850154 			; <UNDEFINED> instruction: 0x07850154
   103f8:	51010000 	mrspl	r0, (UNDEF: 1)
   103fc:	0100701d 	tsteq	r0, sp, lsl r0
   10400:	07850155 			; <UNDEFINED> instruction: 0x07850155
   10404:	0b3c0000 	bleq	f1040c <_Min_Stack_Size+0xf1020c>
   10408:	711d0000 	tstvc	sp, r0
   1040c:	01550100 	cmpeq	r5, r0, lsl #2
   10410:	00000785 	andeq	r0, r0, r5, lsl #15
   10414:	00000b5a 	andeq	r0, r0, sl, asr fp
   10418:	0007601e 	andeq	r6, r7, lr, lsl r0
   1041c:	0007d000 	andeq	sp, r7, r0
   10420:	00000c08 	andeq	r0, r0, r8, lsl #24
   10424:	01590100 	cmpeq	r9, r0, lsl #2
   10428:	0007701f 	andeq	r7, r7, pc, lsl r0
   1042c:	000bbd00 	andeq	fp, fp, r0, lsl #26
   10430:	07d02000 	ldrbeq	r2, [r0, r0]
   10434:	000c0800 	andeq	r0, ip, r0, lsl #16
   10438:	7b210000 	blvc	850440 <_Min_Stack_Size+0x850240>
   1043c:	dd000007 	stcle	0, cr0, [r0, #-28]	; 0xffffffe4
   10440:	0000000b 	andeq	r0, r0, fp
   10444:	62220000 	eorvs	r0, r2, #0
   10448:	0100005d 	qaddeq	r0, sp, r0
   1044c:	000785ab 	andeq	r8, r7, fp, lsr #11
   10450:	08e80000 	stmiaeq	r8!, {}^	; <UNPREDICTABLE>
   10454:	00040000 	andeq	r0, r4, r0
   10458:	000036c7 	andeq	r3, r0, r7, asr #13
   1045c:	54bf0104 	ldrtpl	r0, [pc], #260	; 10464 <_Min_Stack_Size+0x10264>
   10460:	f30c0000 	vhadd.u8	d0, d12, d0
   10464:	e600005c 			; <UNDEFINED> instruction: 0xe600005c
   10468:	58000056 	stmdapl	r0, {r1, r2, r4, r6}
   1046c:	bc080008 	stclt	0, cr0, [r8], {8}
   10470:	90000000 	andls	r0, r0, r0
   10474:	0200006c 	andeq	r0, r0, #108	; 0x6c
   10478:	01920601 	orrseq	r0, r2, r1, lsl #12
   1047c:	01020000 	mrseq	r0, (UNDEF: 2)
   10480:	00019008 	andeq	r9, r1, r8
   10484:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
   10488:	00000095 	muleq	r0, r5, r0
   1048c:	f2070202 	vhsub.s8	d0, d7, d2
   10490:	02000001 	andeq	r0, r0, #1
   10494:	00bd0504 	adcseq	r0, sp, r4, lsl #10
   10498:	04020000 	streq	r0, [r2], #-0
   1049c:	0001c907 	andeq	ip, r1, r7, lsl #18
   104a0:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
   104a4:	000000b8 	strheq	r0, [r0], -r8
   104a8:	c4070802 	strgt	r0, [r7], #-2050	; 0xfffff7fe
   104ac:	03000001 	movweq	r0, #1
   104b0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   104b4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
   104b8:	0001ce07 	andeq	ip, r1, r7, lsl #28
   104bc:	5cec0400 	cfstrdpl	mvd0, [ip]
   104c0:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
   104c4:	00000064 	andeq	r0, r0, r4, rrx
   104c8:	f8040802 			; <UNDEFINED> instruction: 0xf8040802
   104cc:	05000002 	streq	r0, [r0, #-2]
   104d0:	57a40404 	strpl	r0, [r4, r4, lsl #8]!
   104d4:	07030000 	streq	r0, [r3, -r0]
   104d8:	0000005d 	andeq	r0, r0, sp, asr r0
   104dc:	00579304 	subseq	r9, r7, r4, lsl #6
   104e0:	412c0400 			; <UNDEFINED> instruction: 0x412c0400
   104e4:	04000000 	streq	r0, [r0], #-0
   104e8:	0000587d 	andeq	r5, r0, sp, ror r8
   104ec:	00417204 	subeq	r7, r1, r4, lsl #4
   104f0:	60060000 	andvs	r0, r6, r0
   104f4:	02000057 	andeq	r0, r0, #87	; 0x57
   104f8:	00640165 	rsbeq	r0, r4, r5, ror #2
   104fc:	04070000 	streq	r0, [r7], #-0
   10500:	00cba604 	sbceq	sl, fp, r4, lsl #12
   10504:	5a080000 	bpl	21050c <_Min_Stack_Size+0x21030c>
   10508:	04000057 	streq	r0, [r0], #-87	; 0xffffffa9
   1050c:	0000a0a8 	andeq	sl, r0, r8, lsr #1
   10510:	56a80800 	strtpl	r0, [r8], r0, lsl #16
   10514:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
   10518:	000000cb 	andeq	r0, r0, fp, asr #1
   1051c:	002c0900 	eoreq	r0, ip, r0, lsl #18
   10520:	00db0000 	sbcseq	r0, fp, r0
   10524:	db0a0000 	blle	29052c <_Min_Stack_Size+0x29032c>
   10528:	03000000 	movweq	r0, #0
   1052c:	07040200 	streq	r0, [r4, -r0, lsl #4]
   10530:	00000059 	andeq	r0, r0, r9, asr r0
   10534:	a304080b 	movwge	r0, #18443	; 0x480b
   10538:	00000103 	andeq	r0, r0, r3, lsl #2
   1053c:	0058670c 	subseq	r6, r8, ip, lsl #14
   10540:	5da50400 	cfstrspl	mvf0, [r5]
   10544:	00000000 	andeq	r0, r0, r0
   10548:	00586f0c 	subseq	r6, r8, ip, lsl #30
   1054c:	acaa0400 	cfstrsge	mvf0, [sl]
   10550:	04000000 	streq	r0, [r0], #-0
   10554:	58060400 	stmdapl	r6, {sl}
   10558:	ab040000 	blge	110560 <_Min_Stack_Size+0x110360>
   1055c:	000000e2 	andeq	r0, r0, r2, ror #1
   10560:	00567904 	subseq	r7, r6, r4, lsl #18
   10564:	7faf0400 	svcvc	0x00af0400
   10568:	04000000 	streq	r0, [r0], #-0
   1056c:	000058b9 			; <UNDEFINED> instruction: 0x000058b9
   10570:	00481605 	subeq	r1, r8, r5, lsl #12
   10574:	820d0000 	andhi	r0, sp, #0
   10578:	18000056 	stmdane	r0, {r1, r2, r4, r6}
   1057c:	01772d05 	cmneq	r7, r5, lsl #26
   10580:	270c0000 	strcs	r0, [ip, -r0]
   10584:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   10588:	0001772f 	andeq	r7, r1, pc, lsr #14
   1058c:	5f0e0000 	svcpl	0x000e0000
   10590:	3005006b 	andcc	r0, r5, fp, rrx
   10594:	0000005d 	andeq	r0, r0, sp, asr r0
   10598:	58590c04 	ldmdapl	r9, {r2, sl, fp}^
   1059c:	30050000 	andcc	r0, r5, r0
   105a0:	0000005d 	andeq	r0, r0, sp, asr r0
   105a4:	56730c08 	ldrbtpl	r0, [r3], -r8, lsl #24
   105a8:	30050000 	andcc	r0, r5, r0
   105ac:	0000005d 	andeq	r0, r0, sp, asr r0
   105b0:	58d40c0c 	ldmpl	r4, {r2, r3, sl, fp}^
   105b4:	30050000 	andcc	r0, r5, r0
   105b8:	0000005d 	andeq	r0, r0, sp, asr r0
   105bc:	785f0e10 	ldmdavc	pc, {r4, r9, sl, fp}^	; <UNPREDICTABLE>
   105c0:	7d310500 	cfldr32vc	mvfx0, [r1, #-0]
   105c4:	14000001 	strne	r0, [r0], #-1
   105c8:	24040f00 	strcs	r0, [r4], #-3840	; 0xfffff100
   105cc:	09000001 	stmdbeq	r0, {r0}
   105d0:	00000119 	andeq	r0, r0, r9, lsl r1
   105d4:	0000018d 	andeq	r0, r0, sp, lsl #3
   105d8:	0000db0a 	andeq	sp, r0, sl, lsl #22
   105dc:	0d000000 	stceq	0, cr0, [r0, #-0]
   105e0:	000056a3 	andeq	r5, r0, r3, lsr #13
   105e4:	06350524 	ldrteq	r0, [r5], -r4, lsr #10
   105e8:	0c000002 	stceq	0, cr0, [r0], {2}
   105ec:	00005607 	andeq	r5, r0, r7, lsl #12
   105f0:	005d3705 	subseq	r3, sp, r5, lsl #14
   105f4:	0c000000 	stceq	0, cr0, [r0], {-0}
   105f8:	0000588c 	andeq	r5, r0, ip, lsl #17
   105fc:	005d3805 	subseq	r3, sp, r5, lsl #16
   10600:	0c040000 	stceq	0, cr0, [r4], {-0}
   10604:	00005616 	andeq	r5, r0, r6, lsl r6
   10608:	005d3905 	subseq	r3, sp, r5, lsl #18
   1060c:	0c080000 	stceq	0, cr0, [r8], {-0}
   10610:	00005931 	andeq	r5, r0, r1, lsr r9
   10614:	005d3a05 	subseq	r3, sp, r5, lsl #20
   10618:	0c0c0000 	stceq	0, cr0, [ip], {-0}
   1061c:	0000577f 	andeq	r5, r0, pc, ror r7
   10620:	005d3b05 	subseq	r3, sp, r5, lsl #22
   10624:	0c100000 	ldceq	0, cr0, [r0], {-0}
   10628:	0000576f 	andeq	r5, r0, pc, ror #14
   1062c:	005d3c05 	subseq	r3, sp, r5, lsl #24
   10630:	0c140000 	ldceq	0, cr0, [r4], {-0}
   10634:	000058d9 	ldrdeq	r5, [r0], -r9
   10638:	005d3d05 	subseq	r3, sp, r5, lsl #26
   1063c:	0c180000 	ldceq	0, cr0, [r8], {-0}
   10640:	000057ee 	andeq	r5, r0, lr, ror #15
   10644:	005d3e05 	subseq	r3, sp, r5, lsl #28
   10648:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
   1064c:	000058fd 	strdeq	r5, [r0], -sp
   10650:	005d3f05 	subseq	r3, sp, r5, lsl #30
   10654:	00200000 	eoreq	r0, r0, r0
   10658:	0057f80d 	subseq	pc, r7, sp, lsl #16
   1065c:	73050800 	movwvc	r0, #22528	; 0x5800
   10660:	0000022b 	andeq	r0, r0, fp, lsr #4
   10664:	003a5f0c 	eorseq	r5, sl, ip, lsl #30
   10668:	2b740500 	blcs	1d11a70 <_Min_Stack_Size+0x1d11870>
   1066c:	00000002 	andeq	r0, r0, r2
   10670:	005da30c 	subseq	sl, sp, ip, lsl #6
   10674:	5d750500 	cfldr64pl	mvdx0, [r5, #-0]
   10678:	04000000 	streq	r0, [r0], #-0
   1067c:	2c040f00 	stccs	15, cr0, [r4], {-0}
   10680:	10000000 	andne	r0, r0, r0
   10684:	000058ad 	andeq	r5, r0, sp, lsr #17
   10688:	01720560 	cmneq	r2, r0, ror #10
   1068c:	0000035d 	andeq	r0, r0, sp, asr r3
   10690:	00588511 	subseq	r8, r8, r1, lsl r5
   10694:	01760500 	cmneq	r6, r0, lsl #10
   10698:	0000005d 	andeq	r0, r0, sp, asr r0
   1069c:	5bc61100 	blpl	ff194aa4 <BootRAM+0xe105245>
   106a0:	7b050000 	blvc	1506a8 <_Min_Stack_Size+0x1504a8>
   106a4:	00059201 	andeq	r9, r5, r1, lsl #4
   106a8:	d6110400 	ldrle	r0, [r1], -r0, lsl #8
   106ac:	0500005b 	streq	r0, [r0, #-91]	; 0xffffffa5
   106b0:	0592017b 	ldreq	r0, [r2, #379]	; 0x17b
   106b4:	11080000 	mrsne	r0, (UNDEF: 8)
   106b8:	00005c91 	muleq	r0, r1, ip
   106bc:	92017b05 	andls	r7, r1, #5120	; 0x1400
   106c0:	0c000005 	stceq	0, cr0, [r0], {5}
   106c4:	00583a11 	subseq	r3, r8, r1, lsl sl
   106c8:	017d0500 	cmneq	sp, r0, lsl #10
   106cc:	0000005d 	andeq	r0, r0, sp, asr r0
   106d0:	55bb1110 	ldrpl	r1, [fp, #272]!	; 0x110
   106d4:	7f050000 	svcvc	0x00050000
   106d8:	0004ab01 	andeq	sl, r4, r1, lsl #22
   106dc:	88111400 	ldmdahi	r1, {sl, ip}
   106e0:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
   106e4:	005d0181 	subseq	r0, sp, r1, lsl #3
   106e8:	11180000 	tstne	r8, r0
   106ec:	000056c0 	andeq	r5, r0, r0, asr #13
   106f0:	5d018305 	stcpl	3, cr8, [r1, #-20]	; 0xffffffec
   106f4:	1c000000 	stcne	0, cr0, [r0], {-0}
   106f8:	00583f11 	subseq	r3, r8, r1, lsl pc
   106fc:	01840500 	orreq	r0, r4, r0, lsl #10
   10700:	000004dc 	ldrdeq	r0, [r0], -ip
   10704:	6d5f1220 	lfmvs	f1, 2, [pc, #-128]	; 1068c <_Min_Stack_Size+0x1048c>
   10708:	86050070 			; <UNDEFINED> instruction: 0x86050070
   1070c:	0006df01 	andeq	sp, r6, r1, lsl #30
   10710:	4f112400 	svcmi	0x00112400
   10714:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   10718:	06f00188 	ldrbteq	r0, [r0], r8, lsl #3
   1071c:	11280000 			; <UNDEFINED> instruction: 0x11280000
   10720:	0000568a 	andeq	r5, r0, sl, lsl #13
   10724:	5d018a05 	vstrpl	s16, [r1, #-20]	; 0xffffffec
   10728:	2c000000 	stccs	0, cr0, [r0], {-0}
   1072c:	0056d211 	subseq	sp, r6, r1, lsl r2
   10730:	018d0500 	orreq	r0, sp, r0, lsl #10
   10734:	0000005d 	andeq	r0, r0, sp, asr r0
   10738:	564c1130 			; <UNDEFINED> instruction: 0x564c1130
   1073c:	8e050000 	cdphi	0, 0, cr0, cr5, cr0, {0}
   10740:	0004ab01 	andeq	sl, r4, r1, lsl #22
   10744:	da113400 	ble	45d74c <_Min_Stack_Size+0x45d54c>
   10748:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   1074c:	06f60190 	usateq	r0, #22, r0, lsl #3
   10750:	11380000 	teqne	r8, r0
   10754:	00005908 	andeq	r5, r0, r8, lsl #18
   10758:	fc019105 	stc2	1, cr9, [r1], {5}
   1075c:	3c000006 	stccc	0, cr0, [r0], {6}
   10760:	00574511 	subseq	r4, r7, r1, lsl r5
   10764:	01920500 	orrseq	r0, r2, r0, lsl #10
   10768:	000004ab 	andeq	r0, r0, fp, lsr #9
   1076c:	58ed1140 	stmiapl	sp!, {r6, r8, ip}^
   10770:	95050000 	strls	r0, [r5, #-0]
   10774:	00070d01 	andeq	r0, r7, r1, lsl #26
   10778:	2d114400 	cfldrscs	mvf4, [r1, #-0]
   1077c:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   10780:	0557019d 	ldrbeq	r0, [r7, #-413]	; 0xfffffe63
   10784:	11480000 	mrsne	r0, (UNDEF: 72)
   10788:	00005620 	andeq	r5, r0, r0, lsr #12
   1078c:	92019e05 	andls	r9, r1, #5, 28	; 0x50
   10790:	54000005 	strpl	r0, [r0], #-5
   10794:	00577911 	subseq	r7, r7, r1, lsl r9
   10798:	019f0500 	orrseq	r0, pc, r0, lsl #10
   1079c:	00000719 	andeq	r0, r0, r9, lsl r7
   107a0:	55d51158 	ldrbpl	r1, [r5, #344]	; 0x158
   107a4:	a0050000 	andge	r0, r5, r0
   107a8:	0004ab01 	andeq	sl, r4, r1, lsl #22
   107ac:	0f005c00 	svceq	0x00005c00
   107b0:	00023104 	andeq	r3, r2, r4, lsl #2
   107b4:	58110d00 	ldmdapl	r1, {r8, sl, fp}
   107b8:	05680000 	strbeq	r0, [r8, #-0]!
   107bc:	00048db3 			; <UNDEFINED> instruction: 0x00048db3
   107c0:	705f0e00 	subsvc	r0, pc, r0, lsl #28
   107c4:	2bb40500 	blcs	fed11bcc <BootRAM+0xdc8236d>
   107c8:	00000002 	andeq	r0, r0, r2
   107cc:	00725f0e 	rsbseq	r5, r2, lr, lsl #30
   107d0:	005db505 	subseq	fp, sp, r5, lsl #10
   107d4:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
   107d8:	0500775f 	streq	r7, [r0, #-1887]	; 0xfffff8a1
   107dc:	00005db6 			; <UNDEFINED> instruction: 0x00005db6
   107e0:	3c0c0800 	stccc	8, cr0, [ip], {-0}
   107e4:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   107e8:	000033b7 			; <UNDEFINED> instruction: 0x000033b7
   107ec:	ce0c0c00 	cdpgt	12, 0, cr0, cr12, cr0, {0}
   107f0:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   107f4:	000033b8 			; <UNDEFINED> instruction: 0x000033b8
   107f8:	5f0e0e00 	svcpl	0x000e0e00
   107fc:	05006662 	streq	r6, [r0, #-1634]	; 0xfffff99e
   10800:	000206b9 			; <UNDEFINED> instruction: 0x000206b9
   10804:	e10c1000 	mrs	r1, (UNDEF: 12)
   10808:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
   1080c:	00005dba 			; <UNDEFINED> instruction: 0x00005dba
   10810:	eb0c1800 	bl	316818 <_Min_Stack_Size+0x316618>
   10814:	0500000d 	streq	r0, [r0, #-13]
   10818:	00035dbd 			; <UNDEFINED> instruction: 0x00035dbd
   1081c:	250c1c00 	strcs	r1, [ip, #-3072]	; 0xfffff400
   10820:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   10824:	00007dc1 	andeq	r7, r0, r1, asr #27
   10828:	610c2000 	mrsvs	r2, (UNDEF: 12)
   1082c:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
   10830:	0004b8c3 	andeq	fp, r4, r3, asr #17
   10834:	bc0c2400 	cfstrslt	mvf2, [ip], {-0}
   10838:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
   1083c:	0004e7c5 	andeq	lr, r4, r5, asr #15
   10840:	770c2800 	strvc	r2, [ip, -r0, lsl #16]
   10844:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   10848:	00050bc8 	andeq	r0, r5, r8, asr #23
   1084c:	170c2c00 	strne	r2, [ip, -r0, lsl #24]
   10850:	05000059 	streq	r0, [r0, #-89]	; 0xffffffa7
   10854:	000525c9 	andeq	r2, r5, r9, asr #11
   10858:	5f0e3000 	svcpl	0x000e3000
   1085c:	05006275 	streq	r6, [r0, #-629]	; 0xfffffd8b
   10860:	000206cc 	andeq	r0, r2, ip, asr #13
   10864:	5f0e3400 	svcpl	0x000e3400
   10868:	05007075 	streq	r7, [r0, #-117]	; 0xffffff8b
   1086c:	00022bcd 	andeq	r2, r2, sp, asr #23
   10870:	5f0e3c00 	svcpl	0x000e3c00
   10874:	05007275 	streq	r7, [r0, #-629]	; 0xfffffd8b
   10878:	00005dce 	andeq	r5, r0, lr, asr #27
   1087c:	100c4000 	andne	r4, ip, r0
   10880:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   10884:	00052bd1 	ldrdeq	r2, [r5], -r1
   10888:	f70c4400 			; <UNDEFINED> instruction: 0xf70c4400
   1088c:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   10890:	00053bd2 	ldrdeq	r3, [r5], -r2
   10894:	5f0e4700 	svcpl	0x000e4700
   10898:	0500626c 	streq	r6, [r0, #-620]	; 0xfffffd94
   1089c:	000206d5 	ldrdeq	r0, [r2], -r5
   108a0:	430c4800 	movwmi	r4, #51200	; 0xc800
   108a4:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   108a8:	00005dd8 	ldrdeq	r5, [r0], -r8
   108ac:	250c5000 	strcs	r5, [ip, #-0]
   108b0:	05000061 	streq	r0, [r0, #-97]	; 0xffffff9f
   108b4:	00008ad9 	ldrdeq	r8, [r0], -r9
   108b8:	010c5400 	tsteq	ip, r0, lsl #8
   108bc:	0500003c 	streq	r0, [r0, #-60]	; 0xffffffc4
   108c0:	00010ee0 	andeq	r0, r1, r0, ror #29
   108c4:	190c5800 	stmdbne	ip, {fp, ip, lr}
   108c8:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   108cc:	000103e2 	andeq	r0, r1, r2, ror #7
   108d0:	670c5c00 	strvs	r5, [ip, -r0, lsl #24]
   108d4:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
   108d8:	00005de3 	andeq	r5, r0, r3, ror #27
   108dc:	13006400 	movwne	r6, #1024	; 0x400
   108e0:	0000005d 	andeq	r0, r0, sp, asr r0
   108e4:	000004ab 	andeq	r0, r0, fp, lsr #9
   108e8:	00035d14 	andeq	r5, r3, r4, lsl sp
   108ec:	007d1400 	rsbseq	r1, sp, r0, lsl #8
   108f0:	ab140000 	blge	5108f8 <_Min_Stack_Size+0x5106f8>
   108f4:	14000004 	strne	r0, [r0], #-4
   108f8:	0000005d 	andeq	r0, r0, sp, asr r0
   108fc:	b1040f00 	tstlt	r4, r0, lsl #30
   10900:	02000004 	andeq	r0, r0, #4
   10904:	01990801 	orrseq	r0, r9, r1, lsl #16
   10908:	040f0000 	streq	r0, [pc], #-0	; 10910 <_Min_Stack_Size+0x10710>
   1090c:	0000048d 	andeq	r0, r0, sp, lsl #9
   10910:	00005d13 	andeq	r5, r0, r3, lsl sp
   10914:	0004dc00 	andeq	sp, r4, r0, lsl #24
   10918:	035d1400 	cmpeq	sp, #0, 8
   1091c:	7d140000 	ldcvc	0, cr0, [r4, #-0]
   10920:	14000000 	strne	r0, [r0], #-0
   10924:	000004dc 	ldrdeq	r0, [r0], -ip
   10928:	00005d14 	andeq	r5, r0, r4, lsl sp
   1092c:	040f0000 	streq	r0, [pc], #-0	; 10934 <_Min_Stack_Size+0x10734>
   10930:	000004e2 	andeq	r0, r0, r2, ror #9
   10934:	0004b115 	andeq	fp, r4, r5, lsl r1
   10938:	be040f00 	cdplt	15, 0, cr0, cr4, cr0, {0}
   1093c:	13000004 	movwne	r0, #4
   10940:	00000095 	muleq	r0, r5, r0
   10944:	0000050b 	andeq	r0, r0, fp, lsl #10
   10948:	00035d14 	andeq	r5, r3, r4, lsl sp
   1094c:	007d1400 	rsbseq	r1, sp, r0, lsl #8
   10950:	95140000 	ldrls	r0, [r4, #-0]
   10954:	14000000 	strne	r0, [r0], #-0
   10958:	0000005d 	andeq	r0, r0, sp, asr r0
   1095c:	ed040f00 	stc	15, cr0, [r4, #-0]
   10960:	13000004 	movwne	r0, #4
   10964:	0000005d 	andeq	r0, r0, sp, asr r0
   10968:	00000525 	andeq	r0, r0, r5, lsr #10
   1096c:	00035d14 	andeq	r5, r3, r4, lsl sp
   10970:	007d1400 	rsbseq	r1, sp, r0, lsl #8
   10974:	0f000000 	svceq	0x00000000
   10978:	00051104 	andeq	r1, r5, r4, lsl #2
   1097c:	002c0900 	eoreq	r0, ip, r0, lsl #18
   10980:	053b0000 	ldreq	r0, [fp, #-0]!
   10984:	db0a0000 	blle	29098c <_Min_Stack_Size+0x29078c>
   10988:	02000000 	andeq	r0, r0, #0
   1098c:	002c0900 	eoreq	r0, ip, r0, lsl #18
   10990:	054b0000 	strbeq	r0, [fp, #-0]
   10994:	db0a0000 	blle	29099c <_Min_Stack_Size+0x29079c>
   10998:	00000000 	andeq	r0, r0, r0
   1099c:	57ff0600 	ldrbpl	r0, [pc, r0, lsl #12]!
   109a0:	1d050000 	stcne	0, cr0, [r5, #-0]
   109a4:	00036301 	andeq	r6, r3, r1, lsl #6
   109a8:	60e41000 	rscvs	r1, r4, r0
   109ac:	050c0000 	streq	r0, [ip, #-0]
   109b0:	058c0121 	streq	r0, [ip, #289]	; 0x121
   109b4:	27110000 	ldrcs	r0, [r1, -r0]
   109b8:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   109bc:	058c0123 	streq	r0, [ip, #291]	; 0x123
   109c0:	11000000 	mrsne	r0, (UNDEF: 0)
   109c4:	000056df 	ldrdeq	r5, [r0], -pc	; <UNPREDICTABLE>
   109c8:	5d012405 	cfstrspl	mvf2, [r1, #-20]	; 0xffffffec
   109cc:	04000000 	streq	r0, [r0], #-0
   109d0:	0057e811 	subseq	lr, r7, r1, lsl r8
   109d4:	01250500 			; <UNDEFINED> instruction: 0x01250500
   109d8:	00000592 	muleq	r0, r2, r5
   109dc:	040f0008 	streq	r0, [pc], #-8	; 109e4 <_Min_Stack_Size+0x107e4>
   109e0:	00000557 	andeq	r0, r0, r7, asr r5
   109e4:	054b040f 	strbeq	r0, [fp, #-1039]	; 0xfffffbf1
   109e8:	b3100000 	tstlt	r0, #0
   109ec:	18000055 	stmdane	r0, {r0, r2, r4, r6}
   109f0:	da013d05 	ble	5fe0c <_Min_Stack_Size+0x5fc0c>
   109f4:	11000005 	tstne	r0, r5
   109f8:	00005861 	andeq	r5, r0, r1, ror #16
   109fc:	da013e05 	ble	60218 <_Min_Stack_Size+0x60018>
   10a00:	00000005 	andeq	r0, r0, r5
   10a04:	00589511 	subseq	r9, r8, r1, lsl r5
   10a08:	013f0500 	teqeq	pc, r0, lsl #10
   10a0c:	000005da 	ldrdeq	r0, [r0], -sl
   10a10:	58b41106 	ldmpl	r4!, {r1, r2, r8, ip}
   10a14:	40050000 	andmi	r0, r5, r0
   10a18:	00003a01 	andeq	r3, r0, r1, lsl #20
   10a1c:	22110c00 	andscs	r0, r1, #0, 24
   10a20:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   10a24:	00560143 	subseq	r0, r6, r3, asr #2
   10a28:	00100000 	andseq	r0, r0, r0
   10a2c:	00003a09 	andeq	r3, r0, r9, lsl #20
   10a30:	0005ea00 	andeq	lr, r5, r0, lsl #20
   10a34:	00db0a00 	sbcseq	r0, fp, r0, lsl #20
   10a38:	00020000 	andeq	r0, r2, r0
   10a3c:	00563510 	subseq	r3, r6, r0, lsl r5
   10a40:	56051000 	strpl	r1, [r5], -r0
   10a44:	00062c01 	andeq	r2, r6, r1, lsl #24
   10a48:	57521100 	ldrbpl	r1, [r2, -r0, lsl #2]
   10a4c:	59050000 	stmdbpl	r5, {}	; <UNPREDICTABLE>
   10a50:	00017701 	andeq	r7, r1, r1, lsl #14
   10a54:	99110000 	ldmdbls	r1, {}	; <UNPREDICTABLE>
   10a58:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   10a5c:	005d015a 	subseq	r0, sp, sl, asr r1
   10a60:	11040000 	mrsne	r0, (UNDEF: 4)
   10a64:	0000592c 	andeq	r5, r0, ip, lsr #18
   10a68:	77015b05 	strvc	r5, [r1, -r5, lsl #22]
   10a6c:	08000001 	stmdaeq	r0, {r0}
   10a70:	00579a11 	subseq	r9, r7, r1, lsl sl
   10a74:	015c0500 	cmpeq	ip, r0, lsl #10
   10a78:	0000062c 	andeq	r0, r0, ip, lsr #12
   10a7c:	040f000c 	streq	r0, [pc], #-12	; 10a84 <_Min_Stack_Size+0x10884>
   10a80:	00000177 	andeq	r0, r0, r7, ror r1
   10a84:	0058a810 	subseq	sl, r8, r0, lsl r8
   10a88:	60055000 	andvs	r5, r5, r0
   10a8c:	0006cf01 	andeq	ip, r6, r1, lsl #30
   10a90:	589b1100 	ldmpl	fp, {r8, ip}
   10a94:	63050000 	movwvs	r0, #20480	; 0x5000
   10a98:	0004ab01 	andeq	sl, r4, r1, lsl #22
   10a9c:	2d110000 	ldccs	0, cr0, [r1, #-0]
   10aa0:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   10aa4:	01030164 	tsteq	r3, r4, ror #2
   10aa8:	11040000 	mrsne	r0, (UNDEF: 4)
   10aac:	000055f9 	strdeq	r5, [r0], -r9
   10ab0:	03016505 	movweq	r6, #5381	; 0x1505
   10ab4:	0c000001 	stceq	0, cr0, [r0], {1}
   10ab8:	00591e11 	subseq	r1, r9, r1, lsl lr
   10abc:	01660500 	cmneq	r6, r0, lsl #10
   10ac0:	00000103 	andeq	r0, r0, r3, lsl #2
   10ac4:	58e31114 	stmiapl	r3!, {r2, r4, r8, ip}^
   10ac8:	67050000 	strvs	r0, [r5, -r0]
   10acc:	0006cf01 	andeq	ip, r6, r1, lsl #30
   10ad0:	c1111c00 	tstgt	r1, r0, lsl #24
   10ad4:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   10ad8:	005d0168 	subseq	r0, sp, r8, ror #2
   10adc:	11240000 			; <UNDEFINED> instruction: 0x11240000
   10ae0:	00005665 	andeq	r5, r0, r5, ror #12
   10ae4:	03016905 	movweq	r6, #6405	; 0x1905
   10ae8:	28000001 	stmdacs	r0, {r0}
   10aec:	0055ea11 	subseq	lr, r5, r1, lsl sl
   10af0:	016a0500 	cmneq	sl, r0, lsl #10
   10af4:	00000103 	andeq	r0, r0, r3, lsl #2
   10af8:	56541130 			; <UNDEFINED> instruction: 0x56541130
   10afc:	6b050000 	blvs	150b04 <_Min_Stack_Size+0x150904>
   10b00:	00010301 	andeq	r0, r1, r1, lsl #6
   10b04:	c6113800 	ldrgt	r3, [r1], -r0, lsl #16
   10b08:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
   10b0c:	0103016c 	tsteq	r3, ip, ror #2
   10b10:	11400000 	mrsne	r0, (UNDEF: 64)
   10b14:	000056af 	andeq	r5, r0, pc, lsr #13
   10b18:	03016d05 	movweq	r6, #7429	; 0x1d05
   10b1c:	48000001 	stmdami	r0, {r0}
   10b20:	04b10900 	ldrteq	r0, [r1], #2304	; 0x900
   10b24:	06df0000 	ldrbeq	r0, [pc], r0
   10b28:	db0a0000 	blle	290b30 <_Min_Stack_Size+0x290930>
   10b2c:	07000000 	streq	r0, [r0, -r0]
   10b30:	ea040f00 	b	114738 <_Min_Stack_Size+0x114538>
   10b34:	16000005 	strne	r0, [r0], -r5
   10b38:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   10b3c:	00035d14 	andeq	r5, r3, r4, lsl sp
   10b40:	040f0000 	streq	r0, [pc], #-0	; 10b48 <_Min_Stack_Size+0x10948>
   10b44:	000006e5 	andeq	r0, r0, r5, ror #13
   10b48:	0598040f 	ldreq	r0, [r8, #1039]	; 0x40f
   10b4c:	040f0000 	streq	r0, [pc], #-0	; 10b54 <_Min_Stack_Size+0x10954>
   10b50:	0000018d 	andeq	r0, r0, sp, lsl #3
   10b54:	00070d16 	andeq	r0, r7, r6, lsl sp
   10b58:	005d1400 	subseq	r1, sp, r0, lsl #8
   10b5c:	0f000000 	svceq	0x00000000
   10b60:	00071304 	andeq	r1, r7, r4, lsl #6
   10b64:	02040f00 	andeq	r0, r4, #0, 30
   10b68:	0f000007 	svceq	0x00000007
   10b6c:	00063204 	andeq	r3, r6, r4, lsl #4
   10b70:	5ce50400 	cfstrdpl	mvd0, [r5]
   10b74:	7b010000 	blvc	50b7c <_Min_Stack_Size+0x5097c>
   10b78:	0000006b 	andeq	r0, r0, fp, rrx
   10b7c:	005d380d 	subseq	r3, sp, sp, lsl #16
   10b80:	7d010800 	stcvc	8, cr0, [r1, #-0]
   10b84:	0000074f 	andeq	r0, r0, pc, asr #14
   10b88:	005da40c 	subseq	sl, sp, ip, lsl #8
   10b8c:	418f0100 	orrmi	r0, pc, r0, lsl #2
   10b90:	00000000 	andeq	r0, r0, r0
   10b94:	0058280c 	subseq	r2, r8, ip, lsl #16
   10b98:	4f920100 	svcmi	0x00920100
   10b9c:	04000007 	streq	r0, [r0], #-7
   10ba0:	2a040f00 	bcs	1147a8 <_Min_Stack_Size+0x1145a8>
   10ba4:	04000007 	streq	r0, [r0], #-7
   10ba8:	00005d3f 	andeq	r5, r0, pc, lsr sp
   10bac:	072a9301 	streq	r9, [sl, -r1, lsl #6]!
   10bb0:	91170000 	tstls	r7, r0
   10bb4:	0100005d 	qaddeq	r0, sp, r0
   10bb8:	00007dd2 	ldrdeq	r7, [r0], -r2
   10bbc:	07990100 	ldreq	r0, [r9, r0, lsl #2]
   10bc0:	45180000 	ldrmi	r0, [r8, #-0]
   10bc4:	0100005d 	qaddeq	r0, sp, r0
   10bc8:	00035dd2 	ldrdeq	r5, [r3], -r2
   10bcc:	00731900 	rsbseq	r1, r3, r0, lsl #18
   10bd0:	071fd201 	ldreq	sp, [pc, -r1, lsl #4]
   10bd4:	701a0000 	andsvc	r0, sl, r0
   10bd8:	abd40100 	blge	ff510fe0 <BootRAM+0xe481781>
   10bdc:	1b000004 	blne	10bf4 <_Min_Stack_Size+0x109f4>
   10be0:	00005d89 	andeq	r5, r0, r9, lsl #27
   10be4:	04abd401 	strteq	sp, [fp], #1025	; 0x401
   10be8:	1c000000 	stcne	0, cr0, [r0], {-0}
   10bec:	00005cdb 	ldrdeq	r5, [r0], -fp
   10bf0:	007def01 	rsbseq	lr, sp, r1, lsl #30
   10bf4:	08580000 	ldmdaeq	r8, {}^	; <UNPREDICTABLE>
   10bf8:	00bc0800 	adcseq	r0, ip, r0, lsl #16
   10bfc:	9c010000 	stcls	0, cr0, [r1], {-0}
   10c00:	000008b8 			; <UNDEFINED> instruction: 0x000008b8
   10c04:	005d451d 	subseq	r4, sp, sp, lsl r5
   10c08:	5def0100 	stfple	f0, [pc]	; 10c10 <_Min_Stack_Size+0x10a10>
   10c0c:	f0000003 			; <UNDEFINED> instruction: 0xf0000003
   10c10:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
   10c14:	ef010073 	svc	0x00010073
   10c18:	0000071f 	andeq	r0, r0, pc, lsl r7
   10c1c:	00000c50 	andeq	r0, r0, r0, asr ip
   10c20:	0100701f 	tsteq	r0, pc, lsl r0
   10c24:	0008b8f1 	strdeq	fp, [r8], -r1
   10c28:	000c7100 	andeq	r7, ip, r0, lsl #2
   10c2c:	00721f00 	rsbseq	r1, r2, r0, lsl #30
   10c30:	08b8f101 	ldmeq	r8!, {r0, r8, ip, sp, lr, pc}
   10c34:	0cb00000 	ldceq	0, cr0, [r0]
   10c38:	701f0000 	andsvc	r0, pc, r0
   10c3c:	01007274 	tsteq	r0, r4, ror r2
   10c40:	0004abf2 	strdeq	sl, [r4], -r2
   10c44:	000d3400 	andeq	r3, sp, r0, lsl #8
   10c48:	5db12000 	ldcpl	0, cr2, [r1]
   10c4c:	f2010000 	vhadd.s8	d0, d1, d0
   10c50:	000004ab 	andeq	r0, r0, fp, lsr #9
   10c54:	00000d54 	andeq	r0, r0, r4, asr sp
   10c58:	00612620 	rsbeq	r2, r1, r0, lsr #12
   10c5c:	5df30100 	ldfple	f0, [r3]
   10c60:	67000000 	strvs	r0, [r0, -r0]
   10c64:	2000000d 	andcs	r0, r0, sp
   10c68:	00005d9e 	muleq	r0, lr, sp
   10c6c:	071ff501 	ldreq	pc, [pc, -r1, lsl #10]
   10c70:	0d8a0000 	stceq	0, cr0, [sl]
   10c74:	90210000 	eorls	r0, r1, r0
   10c78:	3e000010 	mcrcc	0, 0, r0, cr0, cr0, {0}
   10c7c:	22000008 	andcs	r0, r0, #8
   10c80:	006d6572 	rsbeq	r6, sp, r2, ror r5
   10c84:	5d010901 	vstrpl.16	s0, [r1, #-2]	; <UNPREDICTABLE>
   10c88:	f5000000 			; <UNDEFINED> instruction: 0xf5000000
   10c8c:	0000000d 	andeq	r0, r0, sp
   10c90:	00076023 	andeq	r6, r7, r3, lsr #32
   10c94:	00088e00 	andeq	r8, r8, r0, lsl #28
   10c98:	0010b808 	andseq	fp, r0, r8, lsl #16
   10c9c:	012a0100 			; <UNDEFINED> instruction: 0x012a0100
   10ca0:	00077b24 	andeq	r7, r7, r4, lsr #22
   10ca4:	000e9300 	andeq	r9, lr, r0, lsl #6
   10ca8:	07702400 	ldrbeq	r2, [r0, -r0, lsl #8]!
   10cac:	0ee90000 	cdpeq	0, 14, cr0, cr9, cr0, {0}
   10cb0:	b8250000 	stmdalt	r5!, {}	; <UNPREDICTABLE>
   10cb4:	26000010 			; <UNDEFINED> instruction: 0x26000010
   10cb8:	00000784 	andeq	r0, r0, r4, lsl #15
   10cbc:	00000f1d 	andeq	r0, r0, sp, lsl pc
   10cc0:	00078d26 	andeq	r8, r7, r6, lsr #26
   10cc4:	000f5500 	andeq	r5, pc, r0, lsl #10
   10cc8:	089e2700 	ldmeq	lr, {r8, r9, sl, sp}
   10ccc:	08e00800 	stmiaeq	r0!, {fp}^
   10cd0:	08910000 	ldmeq	r1, {}	; <UNPREDICTABLE>
   10cd4:	01280000 			; <UNDEFINED> instruction: 0x01280000
   10cd8:	00760250 	rsbseq	r0, r6, r0, asr r2
   10cdc:	02510128 	subseq	r0, r1, #40, 2
   10ce0:	27000075 	smlsdxcs	r0, r5, r0, r0
   10ce4:	080008b4 	stmdaeq	r0, {r2, r4, r5, r7, fp}
   10ce8:	000008e0 	andeq	r0, r0, r0, ror #17
   10cec:	000008a5 	andeq	r0, r0, r5, lsr #17
   10cf0:	02500128 	subseq	r0, r0, #40, 2
   10cf4:	29000076 	stmdbcs	r0, {r1, r2, r4, r5, r6}
   10cf8:	0800090a 	stmdaeq	r0, {r1, r3, r8, fp}
   10cfc:	000008e0 	andeq	r0, r0, r0, ror #17
   10d00:	02500128 	subseq	r0, r0, #40, 2
   10d04:	00000076 	andeq	r0, r0, r6, ror r0
   10d08:	040f0000 	streq	r0, [pc], #-0	; 10d10 <_Min_Stack_Size+0x10b10>
   10d0c:	00000755 	andeq	r0, r0, r5, asr r7
   10d10:	005d622a 	subseq	r6, sp, sl, lsr #4
   10d14:	b8c70100 	stmialt	r7, {r8}^
   10d18:	05000008 	streq	r0, [r0, #-8]
   10d1c:	0000ec03 	andeq	lr, r0, r3, lsl #24
   10d20:	5d752a20 	vldmdbpl	r5!, {s5-s36}
   10d24:	ca010000 	bgt	50d2c <_Min_Stack_Size+0x50b2c>
   10d28:	000004ab 	andeq	r0, r0, fp, lsr #9
   10d2c:	00f00305 	rscseq	r0, r0, r5, lsl #6
   10d30:	a92b2000 	stmdbge	fp!, {sp}
   10d34:	a900005d 	stmdbge	r0, {r0, r2, r3, r4, r6}
   10d38:	0600005d 			; <UNDEFINED> instruction: 0x0600005d
   10d3c:	0d330099 	ldceq	0, cr0, [r3, #-612]!	; 0xfffffd9c
   10d40:	00040000 	andeq	r0, r4, r0
   10d44:	000038f5 	strdeq	r3, [r0], -r5
   10d48:	5dbb0104 	ldfpls	f0, [fp, #16]!
   10d4c:	6f0c0000 	svcvs	0x000c0000
   10d50:	4700005e 	smlsdmi	r0, lr, r0, r0
   10d54:	14000059 	strne	r0, [r0], #-89	; 0xffffffa7
   10d58:	04080009 	streq	r0, [r8], #-9
   10d5c:	24000004 	strcs	r0, [r0], #-4
   10d60:	0200006e 	andeq	r0, r0, #110	; 0x6e
   10d64:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   10d68:	ec030074 	stc	0, cr0, [r3], {116}	; 0x74
   10d6c:	0200005c 	andeq	r0, r0, #92	; 0x5c
   10d70:	000037d8 	ldrdeq	r3, [r0], -r8
   10d74:	07040400 	streq	r0, [r4, -r0, lsl #8]
   10d78:	000001ce 	andeq	r0, r0, lr, asr #3
   10d7c:	b8050804 	stmdalt	r5, {r2, fp}
   10d80:	04000000 	streq	r0, [r0], #-0
   10d84:	02f80408 	rscseq	r0, r8, #8, 8	; 0x8000000
   10d88:	01040000 	mrseq	r0, (UNDEF: 4)
   10d8c:	00019206 	andeq	r9, r1, r6, lsl #4
   10d90:	08010400 	stmdaeq	r1, {sl}
   10d94:	00000190 	muleq	r0, r0, r1
   10d98:	95050204 	strls	r0, [r5, #-516]	; 0xfffffdfc
   10d9c:	04000000 	streq	r0, [r0], #-0
   10da0:	01f20702 	mvnseq	r0, r2, lsl #14
   10da4:	04040000 	streq	r0, [r4], #-0
   10da8:	0000bd05 	andeq	fp, r0, r5, lsl #26
   10dac:	07040400 	streq	r0, [r4, -r0, lsl #8]
   10db0:	000001c9 	andeq	r0, r0, r9, asr #3
   10db4:	c4070804 	strgt	r0, [r7], #-2052	; 0xfffff7fc
   10db8:	03000001 	movweq	r0, #1
   10dbc:	000057a4 	andeq	r5, r0, r4, lsr #15
   10dc0:	00250703 	eoreq	r0, r5, r3, lsl #14
   10dc4:	93030000 	movwls	r0, #12288	; 0x3000
   10dc8:	04000057 	streq	r0, [r0], #-87	; 0xffffffa9
   10dcc:	0000682c 	andeq	r6, r0, ip, lsr #16
   10dd0:	587d0300 	ldmdapl	sp!, {r8, r9}^
   10dd4:	72040000 	andvc	r0, r4, #0
   10dd8:	00000068 	andeq	r0, r0, r8, rrx
   10ddc:	00576005 	subseq	r6, r7, r5
   10de0:	01650200 	cmneq	r5, r0, lsl #4
   10de4:	00000037 	andeq	r0, r0, r7, lsr r0
   10de8:	a6040406 	strge	r0, [r4], -r6, lsl #8
   10dec:	000000c9 	andeq	r0, r0, r9, asr #1
   10df0:	00575a07 	subseq	r5, r7, r7, lsl #20
   10df4:	9ea80400 	cdpls	4, 10, cr0, cr8, cr0, {0}
   10df8:	07000000 	streq	r0, [r0, -r0]
   10dfc:	000056a8 	andeq	r5, r0, r8, lsr #13
   10e00:	00c9a904 	sbceq	sl, r9, r4, lsl #18
   10e04:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   10e08:	00000053 	andeq	r0, r0, r3, asr r0
   10e0c:	000000d9 	ldrdeq	r0, [r0], -r9
   10e10:	0000d909 	andeq	sp, r0, r9, lsl #18
   10e14:	04000300 	streq	r0, [r0], #-768	; 0xfffffd00
   10e18:	00590704 	subseq	r0, r9, r4, lsl #14
   10e1c:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
   10e20:	0101a304 	tsteq	r1, r4, lsl #6
   10e24:	670b0000 	strvs	r0, [fp, -r0]
   10e28:	04000058 	streq	r0, [r0], #-88	; 0xffffffa8
   10e2c:	000025a5 	andeq	r2, r0, r5, lsr #11
   10e30:	6f0b0000 	svcvs	0x000b0000
   10e34:	04000058 	streq	r0, [r0], #-88	; 0xffffffa8
   10e38:	0000aaaa 	andeq	sl, r0, sl, lsr #21
   10e3c:	03000400 	movweq	r0, #1024	; 0x400
   10e40:	00005806 	andeq	r5, r0, r6, lsl #16
   10e44:	00e0ab04 	rsceq	sl, r0, r4, lsl #22
   10e48:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
   10e4c:	04000056 	streq	r0, [r0], #-86	; 0xffffffaa
   10e50:	00007daf 	andeq	r7, r0, pc, lsr #27
   10e54:	0d040c00 	stceq	12, cr0, [r4, #-0]
   10e58:	00011f04 	andeq	r1, r1, r4, lsl #30
   10e5c:	08010400 	stmdaeq	r1, {sl}
   10e60:	00000199 	muleq	r0, r9, r1
   10e64:	0058b903 	subseq	fp, r8, r3, lsl #18
   10e68:	6f160500 	svcvs	0x00160500
   10e6c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   10e70:	00005682 	andeq	r5, r0, r2, lsl #13
   10e74:	842d0518 	strthi	r0, [sp], #-1304	; 0xfffffae8
   10e78:	0b000001 	bleq	10e84 <_Min_Stack_Size+0x10c84>
   10e7c:	00005827 	andeq	r5, r0, r7, lsr #16
   10e80:	01842f05 	orreq	r2, r4, r5, lsl #30
   10e84:	0f000000 	svceq	0x00000000
   10e88:	05006b5f 	streq	r6, [r0, #-2911]	; 0xfffff4a1
   10e8c:	00002530 	andeq	r2, r0, r0, lsr r5
   10e90:	590b0400 	stmdbpl	fp, {sl}
   10e94:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   10e98:	00002530 	andeq	r2, r0, r0, lsr r5
   10e9c:	730b0800 	movwvc	r0, #47104	; 0xb800
   10ea0:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   10ea4:	00002530 	andeq	r2, r0, r0, lsr r5
   10ea8:	d40b0c00 	strle	r0, [fp], #-3072	; 0xfffff400
   10eac:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   10eb0:	00002530 	andeq	r2, r0, r0, lsr r5
   10eb4:	5f0f1000 	svcpl	0x000f1000
   10eb8:	31050078 	tstcc	r5, r8, ror r0
   10ebc:	0000018a 	andeq	r0, r0, sl, lsl #3
   10ec0:	040d0014 	streq	r0, [sp], #-20	; 0xffffffec
   10ec4:	00000131 	andeq	r0, r0, r1, lsr r1
   10ec8:	00012608 	andeq	r2, r1, r8, lsl #12
   10ecc:	00019a00 	andeq	r9, r1, r0, lsl #20
   10ed0:	00d90900 	sbcseq	r0, r9, r0, lsl #18
   10ed4:	00000000 	andeq	r0, r0, r0
   10ed8:	0056a30e 	subseq	sl, r6, lr, lsl #6
   10edc:	35052400 	strcc	r2, [r5, #-1024]	; 0xfffffc00
   10ee0:	00000213 	andeq	r0, r0, r3, lsl r2
   10ee4:	0056070b 	subseq	r0, r6, fp, lsl #14
   10ee8:	25370500 	ldrcs	r0, [r7, #-1280]!	; 0xfffffb00
   10eec:	00000000 	andeq	r0, r0, r0
   10ef0:	00588c0b 	subseq	r8, r8, fp, lsl #24
   10ef4:	25380500 	ldrcs	r0, [r8, #-1280]!	; 0xfffffb00
   10ef8:	04000000 	streq	r0, [r0], #-0
   10efc:	0056160b 	subseq	r1, r6, fp, lsl #12
   10f00:	25390500 	ldrcs	r0, [r9, #-1280]!	; 0xfffffb00
   10f04:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   10f08:	0059310b 	subseq	r3, r9, fp, lsl #2
   10f0c:	253a0500 	ldrcs	r0, [sl, #-1280]!	; 0xfffffb00
   10f10:	0c000000 	stceq	0, cr0, [r0], {-0}
   10f14:	00577f0b 	subseq	r7, r7, fp, lsl #30
   10f18:	253b0500 	ldrcs	r0, [fp, #-1280]!	; 0xfffffb00
   10f1c:	10000000 	andne	r0, r0, r0
   10f20:	00576f0b 	subseq	r6, r7, fp, lsl #30
   10f24:	253c0500 	ldrcs	r0, [ip, #-1280]!	; 0xfffffb00
   10f28:	14000000 	strne	r0, [r0], #-0
   10f2c:	0058d90b 	subseq	sp, r8, fp, lsl #18
   10f30:	253d0500 	ldrcs	r0, [sp, #-1280]!	; 0xfffffb00
   10f34:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   10f38:	0057ee0b 	subseq	lr, r7, fp, lsl #28
   10f3c:	253e0500 	ldrcs	r0, [lr, #-1280]!	; 0xfffffb00
   10f40:	1c000000 	stcne	0, cr0, [r0], {-0}
   10f44:	0058fd0b 	subseq	pc, r8, fp, lsl #26
   10f48:	253f0500 	ldrcs	r0, [pc, #-1280]!	; 10a50 <_Min_Stack_Size+0x10850>
   10f4c:	20000000 	andcs	r0, r0, r0
   10f50:	57f80e00 	ldrbpl	r0, [r8, r0, lsl #28]!
   10f54:	05080000 	streq	r0, [r8, #-0]
   10f58:	00023873 	andeq	r3, r2, r3, ror r8
   10f5c:	3a5f0b00 	bcc	17d3b64 <_Min_Stack_Size+0x17d3964>
   10f60:	74050000 	strvc	r0, [r5], #-0
   10f64:	00000238 	andeq	r0, r0, r8, lsr r2
   10f68:	5da30b00 			; <UNDEFINED> instruction: 0x5da30b00
   10f6c:	75050000 	strvc	r0, [r5, #-0]
   10f70:	00000025 	andeq	r0, r0, r5, lsr #32
   10f74:	040d0004 	streq	r0, [sp], #-4
   10f78:	00000053 	andeq	r0, r0, r3, asr r0
   10f7c:	0058ad10 	subseq	sl, r8, r0, lsl sp
   10f80:	72056000 	andvc	r6, r5, #0
   10f84:	00036a01 	andeq	r6, r3, r1, lsl #20
   10f88:	58851100 	stmpl	r5, {r8, ip}
   10f8c:	76050000 	strvc	r0, [r5], -r0
   10f90:	00002501 	andeq	r2, r0, r1, lsl #10
   10f94:	c6110000 	ldrgt	r0, [r1], -r0
   10f98:	0500005b 	streq	r0, [r0, #-91]	; 0xffffffa5
   10f9c:	0592017b 	ldreq	r0, [r2, #379]	; 0x17b
   10fa0:	11040000 	mrsne	r0, (UNDEF: 4)
   10fa4:	00005bd6 	ldrdeq	r5, [r0], -r6
   10fa8:	92017b05 	andls	r7, r1, #5120	; 0x1400
   10fac:	08000005 	stmdaeq	r0, {r0, r2}
   10fb0:	005c9111 	subseq	r9, ip, r1, lsl r1
   10fb4:	017b0500 	cmneq	fp, r0, lsl #10
   10fb8:	00000592 	muleq	r0, r2, r5
   10fbc:	583a110c 	ldmdapl	sl!, {r2, r3, r8, ip}
   10fc0:	7d050000 	stcvc	0, cr0, [r5, #-0]
   10fc4:	00002501 	andeq	r2, r0, r1, lsl #10
   10fc8:	bb111000 	bllt	454fd0 <_Min_Stack_Size+0x454dd0>
   10fcc:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
   10fd0:	0119017f 	tsteq	r9, pc, ror r1
   10fd4:	11140000 	tstne	r4, r0
   10fd8:	00005788 	andeq	r5, r0, r8, lsl #15
   10fdc:	25018105 	strcs	r8, [r1, #-261]	; 0xfffffefb
   10fe0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   10fe4:	0056c011 	subseq	ip, r6, r1, lsl r0
   10fe8:	01830500 	orreq	r0, r3, r0, lsl #10
   10fec:	00000025 	andeq	r0, r0, r5, lsr #32
   10ff0:	583f111c 	ldmdapl	pc!, {r2, r3, r4, r8, ip}	; <UNPREDICTABLE>
   10ff4:	84050000 	strhi	r0, [r5], #-0
   10ff8:	0004dc01 	andeq	sp, r4, r1, lsl #24
   10ffc:	5f122000 	svcpl	0x00122000
   11000:	0500706d 	streq	r7, [r0, #-109]	; 0xffffff93
   11004:	06df0186 	ldrbeq	r0, [pc], r6, lsl #3
   11008:	11240000 			; <UNDEFINED> instruction: 0x11240000
   1100c:	0000584f 	andeq	r5, r0, pc, asr #16
   11010:	f0018805 			; <UNDEFINED> instruction: 0xf0018805
   11014:	28000006 	stmdacs	r0, {r1, r2}
   11018:	00568a11 	subseq	r8, r6, r1, lsl sl
   1101c:	018a0500 	orreq	r0, sl, r0, lsl #10
   11020:	00000025 	andeq	r0, r0, r5, lsr #32
   11024:	56d2112c 	ldrbpl	r1, [r2], ip, lsr #2
   11028:	8d050000 	stchi	0, cr0, [r5, #-0]
   1102c:	00002501 	andeq	r2, r0, r1, lsl #10
   11030:	4c113000 	ldcmi	0, cr3, [r1], {-0}
   11034:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   11038:	0119018e 	tsteq	r9, lr, lsl #3
   1103c:	11340000 	teqne	r4, r0
   11040:	000056da 	ldrdeq	r5, [r0], -sl
   11044:	f6019005 			; <UNDEFINED> instruction: 0xf6019005
   11048:	38000006 	stmdacc	r0, {r1, r2}
   1104c:	00590811 	subseq	r0, r9, r1, lsl r8
   11050:	01910500 	orrseq	r0, r1, r0, lsl #10
   11054:	000006fc 	strdeq	r0, [r0], -ip
   11058:	5745113c 	smlaldxpl	r1, r5, ip, r1
   1105c:	92050000 	andls	r0, r5, #0
   11060:	00011901 	andeq	r1, r1, r1, lsl #18
   11064:	ed114000 	ldc	0, cr4, [r1, #-0]
   11068:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   1106c:	070d0195 			; <UNDEFINED> instruction: 0x070d0195
   11070:	11440000 	mrsne	r0, (UNDEF: 68)
   11074:	0000562d 	andeq	r5, r0, sp, lsr #12
   11078:	57019d05 	strpl	r9, [r1, -r5, lsl #26]
   1107c:	48000005 	stmdami	r0, {r0, r2}
   11080:	00562011 	subseq	r2, r6, r1, lsl r0
   11084:	019e0500 	orrseq	r0, lr, r0, lsl #10
   11088:	00000592 	muleq	r0, r2, r5
   1108c:	57791154 			; <UNDEFINED> instruction: 0x57791154
   11090:	9f050000 	svcls	0x00050000
   11094:	00071901 	andeq	r1, r7, r1, lsl #18
   11098:	d5115800 	ldrle	r5, [r1, #-2048]	; 0xfffff800
   1109c:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
   110a0:	011901a0 	tsteq	r9, r0, lsr #3
   110a4:	005c0000 	subseq	r0, ip, r0
   110a8:	023e040d 	eorseq	r0, lr, #218103808	; 0xd000000
   110ac:	110e0000 	mrsne	r0, (UNDEF: 14)
   110b0:	68000058 	stmdavs	r0, {r3, r4, r6}
   110b4:	049ab305 	ldreq	fp, [sl], #773	; 0x305
   110b8:	5f0f0000 	svcpl	0x000f0000
   110bc:	b4050070 	strlt	r0, [r5], #-112	; 0xffffff90
   110c0:	00000238 	andeq	r0, r0, r8, lsr r2
   110c4:	725f0f00 	subsvc	r0, pc, #0, 30
   110c8:	25b50500 	ldrcs	r0, [r5, #1280]!	; 0x500
   110cc:	04000000 	streq	r0, [r0], #-0
   110d0:	00775f0f 	rsbseq	r5, r7, pc, lsl #30
   110d4:	0025b605 	eoreq	fp, r5, r5, lsl #12
   110d8:	0b080000 	bleq	2110e0 <_Min_Stack_Size+0x210ee0>
   110dc:	0000563c 	andeq	r5, r0, ip, lsr r6
   110e0:	005ab705 	subseq	fp, sl, r5, lsl #14
   110e4:	0b0c0000 	bleq	3110ec <_Min_Stack_Size+0x310eec>
   110e8:	000058ce 	andeq	r5, r0, lr, asr #17
   110ec:	005ab805 	subseq	fp, sl, r5, lsl #16
   110f0:	0f0e0000 	svceq	0x000e0000
   110f4:	0066625f 	rsbeq	r6, r6, pc, asr r2
   110f8:	0213b905 	andseq	fp, r3, #81920	; 0x14000
   110fc:	0b100000 	bleq	411104 <_Min_Stack_Size+0x410f04>
   11100:	000055e1 	andeq	r5, r0, r1, ror #11
   11104:	0025ba05 	eoreq	fp, r5, r5, lsl #20
   11108:	0b180000 	bleq	611110 <_Min_Stack_Size+0x610f10>
   1110c:	00000deb 	andeq	r0, r0, fp, ror #27
   11110:	036abd05 	cmneq	sl, #320	; 0x140
   11114:	0b1c0000 	bleq	71111c <_Min_Stack_Size+0x710f1c>
   11118:	00005625 	andeq	r5, r0, r5, lsr #12
   1111c:	0117c105 	tsteq	r7, r5, lsl #2
   11120:	0b200000 	bleq	811128 <_Min_Stack_Size+0x810f28>
   11124:	00004061 	andeq	r4, r0, r1, rrx
   11128:	04b8c305 	ldrteq	ip, [r8], #773	; 0x305
   1112c:	0b240000 	bleq	911134 <_Min_Stack_Size+0x910f34>
   11130:	00003fbc 			; <UNDEFINED> instruction: 0x00003fbc
   11134:	04e7c505 	strbteq	ip, [r7], #1285	; 0x505
   11138:	0b280000 	bleq	a11140 <_Min_Stack_Size+0xa10f40>
   1113c:	00005877 	andeq	r5, r0, r7, ror r8
   11140:	050bc805 	streq	ip, [fp, #-2053]	; 0xfffff7fb
   11144:	0b2c0000 	bleq	b1114c <_Min_Stack_Size+0xb10f4c>
   11148:	00005917 	andeq	r5, r0, r7, lsl r9
   1114c:	0525c905 	streq	ip, [r5, #-2309]!	; 0xfffff6fb
   11150:	0f300000 	svceq	0x00300000
   11154:	0062755f 	rsbeq	r7, r2, pc, asr r5
   11158:	0213cc05 	andseq	ip, r3, #1280	; 0x500
   1115c:	0f340000 	svceq	0x00340000
   11160:	0070755f 	rsbseq	r7, r0, pc, asr r5
   11164:	0238cd05 	eorseq	ip, r8, #320	; 0x140
   11168:	0f3c0000 	svceq	0x003c0000
   1116c:	0072755f 	rsbseq	r7, r2, pc, asr r5
   11170:	0025ce05 	eoreq	ip, r5, r5, lsl #28
   11174:	0b400000 	bleq	101117c <_Min_Stack_Size+0x1010f7c>
   11178:	00005610 	andeq	r5, r0, r0, lsl r6
   1117c:	052bd105 	streq	sp, [fp, #-261]!	; 0xfffffefb
   11180:	0b440000 	bleq	1111188 <_Min_Stack_Size+0x1110f88>
   11184:	000058f7 	strdeq	r5, [r0], -r7
   11188:	053bd205 	ldreq	sp, [fp, #-517]!	; 0xfffffdfb
   1118c:	0f470000 	svceq	0x00470000
   11190:	00626c5f 	rsbeq	r6, r2, pc, asr ip
   11194:	0213d505 	andseq	sp, r3, #20971520	; 0x1400000
   11198:	0b480000 	bleq	12111a0 <_Min_Stack_Size+0x1210fa0>
   1119c:	00005643 	andeq	r5, r0, r3, asr #12
   111a0:	0025d805 	eoreq	sp, r5, r5, lsl #16
   111a4:	0b500000 	bleq	14111ac <_Min_Stack_Size+0x1410fac>
   111a8:	00006125 	andeq	r6, r0, r5, lsr #2
   111ac:	0088d905 	addeq	sp, r8, r5, lsl #18
   111b0:	0b540000 	bleq	15111b8 <_Min_Stack_Size+0x1510fb8>
   111b4:	00003c01 	andeq	r3, r0, r1, lsl #24
   111b8:	010ce005 	tsteq	ip, r5
   111bc:	0b580000 	bleq	16111c4 <_Min_Stack_Size+0x1610fc4>
   111c0:	00005819 	andeq	r5, r0, r9, lsl r8
   111c4:	0101e205 	tsteq	r1, r5, lsl #4
   111c8:	0b5c0000 	bleq	17111d0 <_Min_Stack_Size+0x1710fd0>
   111cc:	00005767 	andeq	r5, r0, r7, ror #14
   111d0:	0025e305 	eoreq	lr, r5, r5, lsl #6
   111d4:	00640000 	rsbeq	r0, r4, r0
   111d8:	00002513 	andeq	r2, r0, r3, lsl r5
   111dc:	0004b800 	andeq	fp, r4, r0, lsl #16
   111e0:	036a1400 	cmneq	sl, #0, 8
   111e4:	17140000 	ldrne	r0, [r4, -r0]
   111e8:	14000001 	strne	r0, [r0], #-1
   111ec:	00000119 	andeq	r0, r0, r9, lsl r1
   111f0:	00002514 	andeq	r2, r0, r4, lsl r5
   111f4:	040d0000 	streq	r0, [sp], #-0
   111f8:	0000049a 	muleq	r0, sl, r4
   111fc:	00002513 	andeq	r2, r0, r3, lsl r5
   11200:	0004dc00 	andeq	sp, r4, r0, lsl #24
   11204:	036a1400 	cmneq	sl, #0, 8
   11208:	17140000 	ldrne	r0, [r4, -r0]
   1120c:	14000001 	strne	r0, [r0], #-1
   11210:	000004dc 	ldrdeq	r0, [r0], -ip
   11214:	00002514 	andeq	r2, r0, r4, lsl r5
   11218:	040d0000 	streq	r0, [sp], #-0
   1121c:	000004e2 	andeq	r0, r0, r2, ror #9
   11220:	00011f15 	andeq	r1, r1, r5, lsl pc
   11224:	be040d00 	cdplt	13, 0, cr0, cr4, cr0, {0}
   11228:	13000004 	movwne	r0, #4
   1122c:	00000093 	muleq	r0, r3, r0
   11230:	0000050b 	andeq	r0, r0, fp, lsl #10
   11234:	00036a14 	andeq	r6, r3, r4, lsl sl
   11238:	01171400 	tsteq	r7, r0, lsl #8
   1123c:	93140000 	tstls	r4, #0
   11240:	14000000 	strne	r0, [r0], #-0
   11244:	00000025 	andeq	r0, r0, r5, lsr #32
   11248:	ed040d00 	stc	13, cr0, [r4, #-0]
   1124c:	13000004 	movwne	r0, #4
   11250:	00000025 	andeq	r0, r0, r5, lsr #32
   11254:	00000525 	andeq	r0, r0, r5, lsr #10
   11258:	00036a14 	andeq	r6, r3, r4, lsl sl
   1125c:	01171400 	tsteq	r7, r0, lsl #8
   11260:	0d000000 	stceq	0, cr0, [r0, #-0]
   11264:	00051104 	andeq	r1, r5, r4, lsl #2
   11268:	00530800 	subseq	r0, r3, r0, lsl #16
   1126c:	053b0000 	ldreq	r0, [fp, #-0]!
   11270:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
   11274:	02000000 	andeq	r0, r0, #0
   11278:	00530800 	subseq	r0, r3, r0, lsl #16
   1127c:	054b0000 	strbeq	r0, [fp, #-0]
   11280:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
   11284:	00000000 	andeq	r0, r0, r0
   11288:	57ff0500 	ldrbpl	r0, [pc, r0, lsl #10]!
   1128c:	1d050000 	stcne	0, cr0, [r5, #-0]
   11290:	00037001 	andeq	r7, r3, r1
   11294:	60e41000 	rscvs	r1, r4, r0
   11298:	050c0000 	streq	r0, [ip, #-0]
   1129c:	058c0121 	streq	r0, [ip, #289]	; 0x121
   112a0:	27110000 	ldrcs	r0, [r1, -r0]
   112a4:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   112a8:	058c0123 	streq	r0, [ip, #291]	; 0x123
   112ac:	11000000 	mrsne	r0, (UNDEF: 0)
   112b0:	000056df 	ldrdeq	r5, [r0], -pc	; <UNPREDICTABLE>
   112b4:	25012405 	strcs	r2, [r1, #-1029]	; 0xfffffbfb
   112b8:	04000000 	streq	r0, [r0], #-0
   112bc:	0057e811 	subseq	lr, r7, r1, lsl r8
   112c0:	01250500 			; <UNDEFINED> instruction: 0x01250500
   112c4:	00000592 	muleq	r0, r2, r5
   112c8:	040d0008 	streq	r0, [sp], #-8
   112cc:	00000557 	andeq	r0, r0, r7, asr r5
   112d0:	054b040d 	strbeq	r0, [fp, #-1037]	; 0xfffffbf3
   112d4:	b3100000 	tstlt	r0, #0
   112d8:	18000055 	stmdane	r0, {r0, r2, r4, r6}
   112dc:	da013d05 	ble	606f8 <_Min_Stack_Size+0x604f8>
   112e0:	11000005 	tstne	r0, r5
   112e4:	00005861 	andeq	r5, r0, r1, ror #16
   112e8:	da013e05 	ble	60b04 <_Min_Stack_Size+0x60904>
   112ec:	00000005 	andeq	r0, r0, r5
   112f0:	00589511 	subseq	r9, r8, r1, lsl r5
   112f4:	013f0500 	teqeq	pc, r0, lsl #10
   112f8:	000005da 	ldrdeq	r0, [r0], -sl
   112fc:	58b41106 	ldmpl	r4!, {r1, r2, r8, ip}
   11300:	40050000 	andmi	r0, r5, r0
   11304:	00006101 	andeq	r6, r0, r1, lsl #2
   11308:	22110c00 	andscs	r0, r1, #0, 24
   1130c:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   11310:	00760143 	rsbseq	r0, r6, r3, asr #2
   11314:	00100000 	andseq	r0, r0, r0
   11318:	00006108 	andeq	r6, r0, r8, lsl #2
   1131c:	0005ea00 	andeq	lr, r5, r0, lsl #20
   11320:	00d90900 	sbcseq	r0, r9, r0, lsl #18
   11324:	00020000 	andeq	r0, r2, r0
   11328:	00563510 	subseq	r3, r6, r0, lsl r5
   1132c:	56051000 	strpl	r1, [r5], -r0
   11330:	00062c01 	andeq	r2, r6, r1, lsl #24
   11334:	57521100 	ldrbpl	r1, [r2, -r0, lsl #2]
   11338:	59050000 	stmdbpl	r5, {}	; <UNPREDICTABLE>
   1133c:	00018401 	andeq	r8, r1, r1, lsl #8
   11340:	99110000 	ldmdbls	r1, {}	; <UNPREDICTABLE>
   11344:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   11348:	0025015a 	eoreq	r0, r5, sl, asr r1
   1134c:	11040000 	mrsne	r0, (UNDEF: 4)
   11350:	0000592c 	andeq	r5, r0, ip, lsr #18
   11354:	84015b05 	strhi	r5, [r1], #-2821	; 0xfffff4fb
   11358:	08000001 	stmdaeq	r0, {r0}
   1135c:	00579a11 	subseq	r9, r7, r1, lsl sl
   11360:	015c0500 	cmpeq	ip, r0, lsl #10
   11364:	0000062c 	andeq	r0, r0, ip, lsr #12
   11368:	040d000c 	streq	r0, [sp], #-12
   1136c:	00000184 	andeq	r0, r0, r4, lsl #3
   11370:	0058a810 	subseq	sl, r8, r0, lsl r8
   11374:	60055000 	andvs	r5, r5, r0
   11378:	0006cf01 	andeq	ip, r6, r1, lsl #30
   1137c:	589b1100 	ldmpl	fp, {r8, ip}
   11380:	63050000 	movwvs	r0, #20480	; 0x5000
   11384:	00011901 	andeq	r1, r1, r1, lsl #18
   11388:	2d110000 	ldccs	0, cr0, [r1, #-0]
   1138c:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   11390:	01010164 	tsteq	r1, r4, ror #2
   11394:	11040000 	mrsne	r0, (UNDEF: 4)
   11398:	000055f9 	strdeq	r5, [r0], -r9
   1139c:	01016505 	tsteq	r1, r5, lsl #10
   113a0:	0c000001 	stceq	0, cr0, [r0], {1}
   113a4:	00591e11 	subseq	r1, r9, r1, lsl lr
   113a8:	01660500 	cmneq	r6, r0, lsl #10
   113ac:	00000101 	andeq	r0, r0, r1, lsl #2
   113b0:	58e31114 	stmiapl	r3!, {r2, r4, r8, ip}^
   113b4:	67050000 	strvs	r0, [r5, -r0]
   113b8:	0006cf01 	andeq	ip, r6, r1, lsl #30
   113bc:	c1111c00 	tstgt	r1, r0, lsl #24
   113c0:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   113c4:	00250168 	eoreq	r0, r5, r8, ror #2
   113c8:	11240000 			; <UNDEFINED> instruction: 0x11240000
   113cc:	00005665 	andeq	r5, r0, r5, ror #12
   113d0:	01016905 	tsteq	r1, r5, lsl #18
   113d4:	28000001 	stmdacs	r0, {r0}
   113d8:	0055ea11 	subseq	lr, r5, r1, lsl sl
   113dc:	016a0500 	cmneq	sl, r0, lsl #10
   113e0:	00000101 	andeq	r0, r0, r1, lsl #2
   113e4:	56541130 			; <UNDEFINED> instruction: 0x56541130
   113e8:	6b050000 	blvs	1513f0 <_Min_Stack_Size+0x1511f0>
   113ec:	00010101 	andeq	r0, r1, r1, lsl #2
   113f0:	c6113800 	ldrgt	r3, [r1], -r0, lsl #16
   113f4:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
   113f8:	0101016c 	tsteq	r1, ip, ror #2
   113fc:	11400000 	mrsne	r0, (UNDEF: 64)
   11400:	000056af 	andeq	r5, r0, pc, lsr #13
   11404:	01016d05 	tsteq	r1, r5, lsl #26
   11408:	48000001 	stmdami	r0, {r0}
   1140c:	011f0800 	tsteq	pc, r0, lsl #16
   11410:	06df0000 	ldrbeq	r0, [pc], r0
   11414:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
   11418:	07000000 	streq	r0, [r0, -r0]
   1141c:	ea040d00 	b	114824 <_Min_Stack_Size+0x114624>
   11420:	16000005 	strne	r0, [r0], -r5
   11424:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11428:	00036a14 	andeq	r6, r3, r4, lsl sl
   1142c:	040d0000 	streq	r0, [sp], #-0
   11430:	000006e5 	andeq	r0, r0, r5, ror #13
   11434:	0598040d 	ldreq	r0, [r8, #1037]	; 0x40d
   11438:	040d0000 	streq	r0, [sp], #-0
   1143c:	0000019a 	muleq	r0, sl, r1
   11440:	00070d16 	andeq	r0, r7, r6, lsl sp
   11444:	00251400 	eoreq	r1, r5, r0, lsl #8
   11448:	0d000000 	stceq	0, cr0, [r0, #-0]
   1144c:	00071304 	andeq	r1, r7, r4, lsl #6
   11450:	02040d00 	andeq	r0, r4, #0, 26
   11454:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
   11458:	00063204 	andeq	r3, r6, r4, lsl #4
   1145c:	59de0300 	ldmibpl	lr, {r8, r9}^
   11460:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
   11464:	0000072a 	andeq	r0, r0, sl, lsr #14
   11468:	0059a50e 	subseq	sl, r9, lr, lsl #10
   1146c:	00070400 	andeq	r0, r7, r0, lsl #8
   11470:	00000741 	andeq	r0, r0, r1, asr #14
   11474:	0059ed17 	subseq	lr, r9, r7, lsl sp
   11478:	00011700 	andeq	r1, r1, r0, lsl #14
   1147c:	03000000 	movweq	r0, #0
   11480:	00005801 	andeq	r5, r0, r1, lsl #16
   11484:	054b3508 	strbeq	r3, [fp, #-1288]	; 0xfffffaf8
   11488:	040d0000 	streq	r0, [sp], #-0
   1148c:	00000752 	andeq	r0, r0, r2, asr r7
   11490:	59a70318 	stmibpl	r7!, {r3, r4, r8, r9}
   11494:	62060000 	andvs	r0, r6, #0
   11498:	0000071f 	andeq	r0, r0, pc, lsl r7
   1149c:	005ea30e 	subseq	sl, lr, lr, lsl #6
   114a0:	18090800 	stmdane	r9, {fp}
   114a4:	00000783 	andeq	r0, r0, r3, lsl #15
   114a8:	005edd0b 	subseq	sp, lr, fp, lsl #26
   114ac:	4c190900 			; <UNDEFINED> instruction: 0x4c190900
   114b0:	00000007 	andeq	r0, r0, r7
   114b4:	005ef30b 	subseq	pc, lr, fp, lsl #6
   114b8:	2c1a0900 			; <UNDEFINED> instruction: 0x2c1a0900
   114bc:	04000000 	streq	r0, [r0], #-0
   114c0:	5f080e00 	svcpl	0x00080e00
   114c4:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
   114c8:	0007b41c 	andeq	fp, r7, ip, lsl r4
   114cc:	5ee60b00 	vfmapl.f64	d16, d6, d0
   114d0:	1d090000 	stcne	0, cr0, [r9, #-0]
   114d4:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
   114d8:	5f480b00 	svcpl	0x00480b00
   114dc:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
   114e0:	00000025 	andeq	r0, r0, r5, lsr #32
   114e4:	5e650b04 	vmulpl.f64	d16, d5, d4
   114e8:	1f090000 	svcne	0x00090000
   114ec:	0000002c 	andeq	r0, r0, ip, lsr #32
   114f0:	040d0008 	streq	r0, [sp], #-8
   114f4:	0000075e 	andeq	r0, r0, lr, asr r7
   114f8:	fd040804 	stc2	8, cr0, [r4, #-16]
   114fc:	04000002 	streq	r0, [r0], #-2
   11500:	5e2a0404 	cdppl	4, 2, cr0, cr10, cr4, {0}
   11504:	410e0000 	mrsmi	r0, (UNDEF: 14)
   11508:	6000005e 	andvs	r0, r0, lr, asr r0
   1150c:	087dc00a 	ldmdaeq	sp!, {r1, r3, lr, pc}^
   11510:	3d0b0000 	stccc	0, cr0, [fp, #-0]
   11514:	0a000056 	beq	11674 <_Min_Stack_Size+0x11474>
   11518:	000025c2 	andeq	r2, r0, r2, asr #11
   1151c:	1b0b0000 	blne	2d1524 <_Min_Stack_Size+0x2d1324>
   11520:	0a00005f 	beq	116a4 <_Min_Stack_Size+0x114a4>
   11524:	000025c3 	andeq	r2, r0, r3, asr #11
   11528:	1a0b0400 	bne	2d2530 <_Min_Stack_Size+0x2d2330>
   1152c:	0a00005f 	beq	116b0 <_Min_Stack_Size+0x114b0>
   11530:	000025c4 	andeq	r2, r0, r4, asr #11
   11534:	b50b0800 	strlt	r0, [fp, #-2048]	; 0xfffff800
   11538:	0a00005e 	beq	116b8 <_Min_Stack_Size+0x114b8>
   1153c:	000025c5 	andeq	r2, r0, r5, asr #11
   11540:	a40b0c00 	strge	r0, [fp], #-3072	; 0xfffff400
   11544:	0a00005d 	beq	116c0 <_Min_Stack_Size+0x114c0>
   11548:	000025c6 	andeq	r2, r0, r6, asr #11
   1154c:	720f1000 	andvc	r1, pc, #0
   11550:	0a007465 	beq	2e6ec <_Min_Stack_Size+0x2e4ec>
   11554:	000025c7 	andeq	r2, r0, r7, asr #11
   11558:	580b1400 	stmdapl	fp, {sl, ip}
   1155c:	0a000015 	beq	115b8 <_Min_Stack_Size+0x113b8>
   11560:	00011fc8 	andeq	r1, r1, r8, asr #31
   11564:	3b0b1800 	blcc	2d756c <_Min_Stack_Size+0x2d736c>
   11568:	0a00005f 	beq	116ec <_Min_Stack_Size+0x114ec>
   1156c:	00011fc9 	andeq	r1, r1, r9, asr #31
   11570:	ee0b1900 	vmla.f16	s2, s22, s0
   11574:	0a00005e 	beq	116f4 <_Min_Stack_Size+0x114f4>
   11578:	00011fca 	andeq	r1, r1, sl, asr #31
   1157c:	620f1a00 	andvs	r1, pc, #0, 20
   11580:	0a006675 	beq	2af5c <_Min_Stack_Size+0x2ad5c>
   11584:	00087dcb 	andeq	r7, r8, fp, asr #27
   11588:	db0b1b00 	blle	2d8190 <_Min_Stack_Size+0x2d7f90>
   1158c:	0a000055 	beq	116e8 <_Min_Stack_Size+0x114e8>
   11590:	00088dcc 	andeq	r8, r8, ip, asr #27
   11594:	550b4300 	strpl	r4, [fp, #-768]	; 0xfffffd00
   11598:	0a00005e 	beq	11718 <_Min_Stack_Size+0x11518>
   1159c:	0007bace 	andeq	fp, r7, lr, asr #21
   115a0:	290b4800 	stmdbcs	fp, {fp, lr}
   115a4:	0a00005f 	beq	11728 <_Min_Stack_Size+0x11528>
   115a8:	00089dcf 	andeq	r9, r8, pc, asr #27
   115ac:	ce0b5000 	cdpgt	0, 0, cr5, cr11, cr0, {0}
   115b0:	0a00005e 	beq	11730 <_Min_Stack_Size+0x11530>
   115b4:	000025d0 	ldrdeq	r2, [r0], -r0
   115b8:	08005800 	stmdaeq	r0, {fp, ip, lr}
   115bc:	0000011f 	andeq	r0, r0, pc, lsl r1
   115c0:	0000088d 	andeq	r0, r0, sp, lsl #17
   115c4:	0000d909 	andeq	sp, r0, r9, lsl #18
   115c8:	08002700 	stmdaeq	r0, {r8, r9, sl, sp}
   115cc:	0000011f 	andeq	r0, r0, pc, lsl r1
   115d0:	0000089d 	muleq	r0, sp, r8
   115d4:	0000d909 	andeq	sp, r0, r9, lsl #18
   115d8:	08000200 	stmdaeq	r0, {r9}
   115dc:	0000011f 	andeq	r0, r0, pc, lsl r1
   115e0:	000008ad 	andeq	r0, r0, sp, lsr #17
   115e4:	0000d909 	andeq	sp, r0, r9, lsl #18
   115e8:	19000600 	stmdbne	r0, {r9, sl}
   115ec:	00005f30 	andeq	r5, r0, r0, lsr pc
   115f0:	0025af01 	eoreq	sl, r5, r1, lsl #30
   115f4:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
   115f8:	00c60800 	sbceq	r0, r6, r0, lsl #16
   115fc:	9c010000 	stcls	0, cr0, [r1], {-0}
   11600:	000009b7 			; <UNDEFINED> instruction: 0x000009b7
   11604:	7274701a 	rsbsvc	r7, r4, #26
   11608:	6aaf0100 	bvs	febd1a10 <BootRAM+0xdb421b1>
   1160c:	68000003 	stmdavs	r0, {r0, r1}
   11610:	1a00000f 	bne	11654 <_Min_Stack_Size+0x11454>
   11614:	01007066 	tsteq	r0, r6, rrx
   11618:	0009b7af 	andeq	fp, r9, pc, lsr #15
   1161c:	000f9f00 	andeq	r9, pc, r0, lsl #30
   11620:	75621a00 	strbvc	r1, [r2, #-2560]!	; 0xfffff600
   11624:	af010066 	svcge	0x00010066
   11628:	000004dc 	ldrdeq	r0, [r0], -ip
   1162c:	00000fd3 	ldrdeq	r0, [r0], -r3
   11630:	6e656c1a 	mcrvs	12, 3, r6, cr5, cr10, {0}
   11634:	2caf0100 	stfcss	f0, [pc]	; 1163c <_Min_Stack_Size+0x1143c>
   11638:	07000000 	streq	r0, [r0, -r0]
   1163c:	1b000010 	blne	11684 <_Min_Stack_Size+0x11484>
   11640:	b5010077 	strlt	r0, [r1, #-119]	; 0xffffff89
   11644:	00000025 	andeq	r0, r0, r5, lsr #32
   11648:	0000103b 	andeq	r1, r0, fp, lsr r0
   1164c:	7272651c 	rsbsvc	r6, r2, #28, 10	; 0x7000000
   11650:	c4ed0100 	strbtgt	r0, [sp], #256	; 0x100
   11654:	1d080009 	stcne	0, cr0, [r8, #-36]	; 0xffffffdc
   11658:	000010d0 	ldrdeq	r1, [r0], -r0
   1165c:	000009a0 	andeq	r0, r0, r0, lsr #19
   11660:	7274731b 	rsbsvc	r7, r4, #1811939328	; 0x6c000000
   11664:	38bb0100 	ldmcc	fp!, {r8}
   11668:	64000002 	strvs	r0, [r0], #-2
   1166c:	1e000010 	mcrne	0, 0, r0, cr0, cr0, {0}
   11670:	00005e5e 	andeq	r5, r0, lr, asr lr
   11674:	0025bc01 	eoreq	fp, r5, r1, lsl #24
   11678:	5a010000 	bpl	51680 <_Min_Stack_Size+0x51480>
   1167c:	005efb1f 	subseq	pc, lr, pc, lsl fp	; <UNPREDICTABLE>
   11680:	25c40100 	strbcs	r0, [r4, #256]	; 0x100
   11684:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
   11688:	20000010 	andcs	r0, r0, r0, lsl r0
   1168c:	08000980 	stmdaeq	r0, {r7, r8, fp}
   11690:	00000cdb 	ldrdeq	r0, [r0], -fp
   11694:	00000961 	andeq	r0, r0, r1, ror #18
   11698:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
   1169c:	20000079 	andcs	r0, r0, r9, ror r0
   116a0:	0800098c 	stmdaeq	r0, {r2, r3, r7, r8, fp}
   116a4:	00000ce7 	andeq	r0, r0, r7, ror #25
   116a8:	0000097b 	andeq	r0, r0, fp, ror r9
   116ac:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
   116b0:	0121007b 			; <UNDEFINED> instruction: 0x0121007b
   116b4:	007a0252 	rsbseq	r0, sl, r2, asr r2
   116b8:	09a02000 	stmibeq	r0!, {sp}
   116bc:	0cf20800 	ldcleq	8, cr0, [r2]
   116c0:	098f0000 	stmibeq	pc, {}	; <UNPREDICTABLE>
   116c4:	01210000 			; <UNDEFINED> instruction: 0x01210000
   116c8:	00790250 	rsbseq	r0, r9, r0, asr r2
   116cc:	09c42200 	stmibeq	r4, {r9, sp}^
   116d0:	0cfe0800 	ldcleq	8, cr0, [lr]
   116d4:	01210000 			; <UNDEFINED> instruction: 0x01210000
   116d8:	00790250 	rsbseq	r0, r9, r0, asr r2
   116dc:	38220000 	stmdacc	r2!, {}	; <UNPREDICTABLE>
   116e0:	0a080009 	beq	21170c <_Min_Stack_Size+0x21150c>
   116e4:	2100000d 	tstcs	r0, sp
   116e8:	78025101 	stmdavc	r2, {r0, r8, ip, lr}
   116ec:	52012100 	andpl	r2, r1, #0, 2
   116f0:	00007502 	andeq	r7, r0, r2, lsl #10
   116f4:	41040d00 	tstmi	r4, r0, lsl #26
   116f8:	19000007 	stmdbne	r0, {r0, r1, r2}
   116fc:	00005ebb 			; <UNDEFINED> instruction: 0x00005ebb
   11700:	0025f601 	eoreq	pc, r5, r1, lsl #12
   11704:	09dc0000 	ldmibeq	ip, {}^	; <UNPREDICTABLE>
   11708:	01000800 	tsteq	r0, r0, lsl #16
   1170c:	9c010000 	stcls	0, cr0, [r1], {-0}
   11710:	00000aea 	andeq	r0, r0, sl, ror #21
   11714:	7274701a 	rsbsvc	r7, r4, #26
   11718:	6af60100 	bvs	ffd91b20 <BootRAM+0xed022c1>
   1171c:	d8000003 	stmdale	r0, {r0, r1}
   11720:	1a000010 	bne	11768 <_Min_Stack_Size+0x11568>
   11724:	01007066 	tsteq	r0, r6, rrx
   11728:	0009b7f6 	strdeq	fp, [r9], -r6
   1172c:	00110400 	andseq	r0, r1, r0, lsl #8
   11730:	69751a00 	ldmdbvs	r5!, {r9, fp, ip}^
   11734:	f601006f 			; <UNDEFINED> instruction: 0xf601006f
   11738:	00000aea 	andeq	r0, r0, sl, ror #21
   1173c:	00001130 	andeq	r1, r0, r0, lsr r1
   11740:	6e656c1b 	mcrvs	12, 3, r6, cr5, cr11, {0}
   11744:	2cfb0100 	ldfcse	f0, [fp]
   11748:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
   1174c:	1b000011 	blne	11798 <_Min_Stack_Size+0x11598>
   11750:	fc010077 	stc2	0, cr0, [r1], {119}	; 0x77
   11754:	00000025 	andeq	r0, r0, r5, lsr #32
   11758:	00001190 	muleq	r0, r0, r1
   1175c:	766f691b 			; <UNDEFINED> instruction: 0x766f691b
   11760:	b4fd0100 	ldrbtlt	r0, [sp], #256	; 0x100
   11764:	cf000007 	svcgt	0x00000007
   11768:	1b000011 	blne	117b4 <_Min_Stack_Size+0x115b4>
   1176c:	fe010070 	mcr2	0, 0, r0, cr1, cr0, {3}
   11770:	000004dc 	ldrdeq	r0, [r0], -ip
   11774:	000011ee 	andeq	r1, r0, lr, ror #3
   11778:	72726523 	rsbsvc	r6, r2, #146800640	; 0x8c00000
   1177c:	01520100 	cmpeq	r2, r0, lsl #2
   11780:	08000aae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, fp}
   11784:	0010e81d 	andseq	lr, r0, sp, lsl r8
   11788:	000ad300 	andeq	sp, sl, r0, lsl #6
   1178c:	74732400 	ldrbtvc	r2, [r3], #-1024	; 0xfffffc00
   11790:	15010072 	strne	r0, [r1, #-114]	; 0xffffff8e
   11794:	00023801 	andeq	r3, r2, r1, lsl #16
   11798:	00121900 	andseq	r1, r2, r0, lsl #18
   1179c:	5e5e2500 	cdppl	5, 5, cr2, cr14, cr0, {0}
   117a0:	16010000 	strne	r0, [r1], -r0
   117a4:	00002501 	andeq	r2, r0, r1, lsl #10
   117a8:	00125900 	andseq	r5, r2, r0, lsl #18
   117ac:	5efb2500 	cdppl	5, 15, cr2, cr11, cr0, {0}
   117b0:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
   117b4:	00002501 	andeq	r2, r0, r1, lsl #10
   117b8:	00127700 	andseq	r7, r2, r0, lsl #14
   117bc:	0a3a2000 	beq	e997c4 <_Min_Stack_Size+0xe995c4>
   117c0:	0cdb0800 	ldcleq	8, cr0, [fp], {0}
   117c4:	0a930000 	beq	fe4d17cc <BootRAM+0xd441f6d>
   117c8:	01210000 			; <UNDEFINED> instruction: 0x01210000
   117cc:	007b0250 	rsbseq	r0, fp, r0, asr r2
   117d0:	0a482000 	beq	12197d8 <_Min_Stack_Size+0x12195d8>
   117d4:	0ce70800 	stcleq	8, cr0, [r7]
   117d8:	0aae0000 	beq	feb917e0 <BootRAM+0xdb01f81>
   117dc:	01210000 			; <UNDEFINED> instruction: 0x01210000
   117e0:	54910350 	ldrpl	r0, [r1], #848	; 0x350
   117e4:	52012106 	andpl	r2, r1, #-2147483647	; 0x80000001
   117e8:	00007a02 	andeq	r7, r0, r2, lsl #20
   117ec:	000aa020 	andeq	sl, sl, r0, lsr #32
   117f0:	000cf208 	andeq	pc, ip, r8, lsl #4
   117f4:	000ac200 	andeq	ip, sl, r0, lsl #4
   117f8:	50012100 	andpl	r2, r1, r0, lsl #2
   117fc:	00007b02 	andeq	r7, r0, r2, lsl #22
   11800:	000aae22 	andeq	sl, sl, r2, lsr #28
   11804:	000cfe08 	andeq	pc, ip, r8, lsl #28
   11808:	50012100 	andpl	r2, r1, r0, lsl #2
   1180c:	00007b02 	andeq	r7, r0, r2, lsl #22
   11810:	0a722200 	beq	1c9a018 <_Min_Stack_Size+0x1c99e18>
   11814:	0d0a0800 	stceq	8, cr0, [sl, #-0]
   11818:	01210000 			; <UNDEFINED> instruction: 0x01210000
   1181c:	00790251 	rsbseq	r0, r9, r1, asr r2
   11820:	02520121 	subseq	r0, r2, #1073741832	; 0x40000008
   11824:	00000077 	andeq	r0, r0, r7, ror r0
   11828:	0783040d 	streq	r0, [r3, sp, lsl #8]
   1182c:	fb260000 	blx	991836 <_Min_Stack_Size+0x991636>
   11830:	01000059 	qaddeq	r0, r9, r0
   11834:	002501da 	ldrdeq	r0, [r5], -sl	; <UNPREDICTABLE>
   11838:	0adc0000 	beq	ff711840 <BootRAM+0xe681fe1>
   1183c:	023c0800 	eorseq	r0, ip, #0, 16
   11840:	9c010000 	stcls	0, cr0, [r1], {-0}
   11844:	00000cb7 			; <UNDEFINED> instruction: 0x00000cb7
   11848:	000dec27 	andeq	lr, sp, r7, lsr #24
   1184c:	01da0100 	bicseq	r0, sl, r0, lsl #2
   11850:	0000036a 	andeq	r0, r0, sl, ror #6
   11854:	000012a1 	andeq	r1, r0, r1, lsr #5
   11858:	00706628 	rsbseq	r6, r0, r8, lsr #12
   1185c:	b701da01 	strlt	sp, [r1, -r1, lsl #20]
   11860:	d5000009 	strle	r0, [r0, #-9]
   11864:	27000012 	smladcs	r0, r2, r0, r0
   11868:	00005eb0 			; <UNDEFINED> instruction: 0x00005eb0
   1186c:	dc01da01 			; <UNDEFINED> instruction: 0xdc01da01
   11870:	f3000004 	vhadd.u8	d0, d0, d4
   11874:	29000012 	stmdbcs	r0, {r1, r4}
   11878:	01007061 	tsteq	r0, r1, rrx
   1187c:	075301da 	smmlseq	r3, sl, r1, r0
   11880:	91030000 	mrsls	r0, (UNDEF: 3)
   11884:	66247ef4 			; <UNDEFINED> instruction: 0x66247ef4
   11888:	0100746d 	tsteq	r0, sp, ror #8
   1188c:	011901e0 	tsteq	r9, r0, ror #3
   11890:	13350000 	teqne	r5, #0
   11894:	6e240000 	cdpvs	0, 2, cr0, cr4, cr0, {0}
   11898:	01e10100 	mvneq	r0, r0, lsl #2
   1189c:	00000025 	andeq	r0, r0, r5, lsr #32
   118a0:	0000144c 	andeq	r1, r0, ip, asr #8
   118a4:	01006d24 	tsteq	r0, r4, lsr #26
   118a8:	002501e1 	eoreq	r0, r5, r1, ror #3
   118ac:	148b0000 	strne	r0, [fp], #0
   118b0:	63240000 			; <UNDEFINED> instruction: 0x63240000
   118b4:	e2010070 	and	r0, r1, #112	; 0x70
   118b8:	00011901 	andeq	r1, r1, r1, lsl #18
   118bc:	0014b300 	andseq	fp, r4, r0, lsl #6
   118c0:	5e362500 	cfabs32pl	mvfx2, mvfx6
   118c4:	e3010000 	movw	r0, #4096	; 0x1000
   118c8:	0004dc01 	andeq	sp, r4, r1, lsl #24
   118cc:	00153400 	andseq	r3, r5, r0, lsl #8
   118d0:	5f202a00 	svcpl	0x00202a00
   118d4:	e4010000 	str	r0, [r1], #-0
   118d8:	0007c801 	andeq	ip, r7, r1, lsl #16
   118dc:	f8910300 			; <UNDEFINED> instruction: 0xf8910300
   118e0:	5eaa2a7e 			; <UNDEFINED> instruction: 0x5eaa2a7e
   118e4:	e7010000 	str	r0, [r1, -r0]
   118e8:	000cd501 	andeq	sp, ip, r1, lsl #10
   118ec:	15030600 	strne	r0, [r3, #-1536]	; 0xfffffa00
   118f0:	9f080009 	svcls	0x00080009
   118f4:	005e302b 	subseq	r3, lr, fp, lsr #32
   118f8:	028a0100 	addeq	r0, sl, #0, 2
   118fc:	08000c30 	stmdaeq	r0, {r4, r5, sl, fp}
   11900:	005f032b 	subseq	r0, pc, fp, lsr #6
   11904:	02880100 	addeq	r0, r8, #0, 2
   11908:	08000c30 	stmdaeq	r0, {r4, r5, sl, fp}
   1190c:	000b4020 	andeq	r4, fp, r0, lsr #32
   11910:	0008ad08 	andeq	sl, r8, r8, lsl #26
   11914:	000bf400 	andeq	pc, fp, r0, lsl #8
   11918:	50012100 	andpl	r2, r1, r0, lsl #2
   1191c:	21007802 	tstcs	r0, r2, lsl #16
   11920:	77025101 	strvc	r5, [r2, -r1, lsl #2]
   11924:	52012100 	andpl	r2, r1, #0, 2
   11928:	21007a02 	tstcs	r0, r2, lsl #20
   1192c:	7b025301 	blvc	a6538 <_Min_Stack_Size+0xa6338>
   11930:	82200000 	eorhi	r0, r0, #0
   11934:	1508000b 	strne	r0, [r8, #-11]
   11938:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
   1193c:	2100000c 	tstcs	r0, ip
   11940:	75025001 	strvc	r5, [r2, #-1]
   11944:	52012100 	andpl	r2, r1, #0, 2
   11948:	20003501 	andcs	r3, r0, r1, lsl #10
   1194c:	08000bd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, fp}
   11950:	00000d15 	andeq	r0, r0, r5, lsl sp
   11954:	00000c26 	andeq	r0, r0, r6, lsr #24
   11958:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
   1195c:	01210079 			; <UNDEFINED> instruction: 0x01210079
   11960:	00330152 	eorseq	r0, r3, r2, asr r1
   11964:	000c0220 	andeq	r0, ip, r0, lsr #4
   11968:	000d1508 	andeq	r1, sp, r8, lsl #10
   1196c:	000c4200 	andeq	r4, ip, r0, lsl #4
   11970:	50012100 	andpl	r2, r1, r0, lsl #2
   11974:	a0dc0305 	sbcsge	r0, ip, r5, lsl #6
   11978:	01210800 			; <UNDEFINED> instruction: 0x01210800
   1197c:	00360152 	eorseq	r0, r6, r2, asr r1
   11980:	000c1a20 	andeq	r1, ip, r0, lsr #20
   11984:	000d2008 	andeq	r2, sp, r8
   11988:	000c7400 	andeq	r7, ip, r0, lsl #8
   1198c:	50012100 	andpl	r2, r1, r0, lsl #2
   11990:	21007802 	tstcs	r0, r2, lsl #16
   11994:	91035101 	tstls	r3, r1, lsl #2
   11998:	01217ef8 	strdeq	r7, [r1, -r8]!
   1199c:	00770252 	rsbseq	r0, r7, r2, asr r2
   119a0:	05530121 	ldrbeq	r0, [r3, #-289]	; 0xfffffedf
   119a4:	00091503 	andeq	r1, r9, r3, lsl #10
   119a8:	7d022108 	stfvcs	f2, [r2, #-32]	; 0xffffffe0
   119ac:	f4910300 			; <UNDEFINED> instruction: 0xf4910300
   119b0:	e220007e 	eor	r0, r0, #126	; 0x7e
   119b4:	2b08000c 	blcs	2119ec <_Min_Stack_Size+0x2117ec>
   119b8:	a600000d 	strge	r0, [r0], -sp
   119bc:	2100000c 	tstcs	r0, ip
   119c0:	78025001 	stmdavc	r2, {r0, ip, lr}
   119c4:	51012100 	mrspl	r2, (UNDEF: 17)
   119c8:	7ef89103 	nrmvce	f1, f3
   119cc:	02520121 	subseq	r0, r2, #1073741832	; 0x40000008
   119d0:	01210077 			; <UNDEFINED> instruction: 0x01210077
   119d4:	15030553 	strne	r0, [r3, #-1363]	; 0xfffffaad
   119d8:	21080009 	tstcs	r8, r9
   119dc:	03007d02 	movweq	r7, #3330	; 0xd02
   119e0:	007ef491 			; <UNDEFINED> instruction: 0x007ef491
   119e4:	000cec22 	andeq	lr, ip, r2, lsr #24
   119e8:	000cdb08 	andeq	sp, ip, r8, lsl #22
   119ec:	51012100 	mrspl	r2, (UNDEF: 17)
   119f0:	00400802 	subeq	r0, r0, r2, lsl #16
   119f4:	00251300 	eoreq	r1, r5, r0, lsl #6
   119f8:	0cd50000 	ldcleq	0, cr0, [r5], {0}
   119fc:	6a140000 	bvs	511a04 <_Min_Stack_Size+0x511804>
   11a00:	14000003 	strne	r0, [r0], #-3
   11a04:	000009b7 			; <UNDEFINED> instruction: 0x000009b7
   11a08:	0004dc14 	andeq	sp, r4, r4, lsl ip
   11a0c:	002c1400 	eoreq	r1, ip, r0, lsl #8
   11a10:	0d000000 	stceq	0, cr0, [r0, #-0]
   11a14:	000cb704 	andeq	fp, ip, r4, lsl #14
   11a18:	5cdb2c00 	ldclpl	12, cr2, [fp], {0}
   11a1c:	5cdb0000 	ldclpl	0, cr0, [fp], {0}
   11a20:	0a0b0000 	beq	2d1a28 <_Min_Stack_Size+0x2d1828>
   11a24:	5f412d01 	svcpl	0x00412d01
   11a28:	5f410000 	svcpl	0x00410000
   11a2c:	170c0000 	strne	r0, [ip, -r0]
   11a30:	005f0f2c 	subseq	r0, pc, ip, lsr #30
   11a34:	005f0f00 	subseq	r0, pc, r0, lsl #30
   11a38:	010d0b00 	tsteq	sp, r0, lsl #22
   11a3c:	005cd32c 	subseq	sp, ip, ip, lsr #6
   11a40:	005cd300 	subseq	sp, ip, r0, lsl #6
   11a44:	010c0b00 	tsteq	ip, r0, lsl #22
   11a48:	005e4d2d 	subseq	r4, lr, sp, lsr #26
   11a4c:	005e4d00 	subseq	r4, lr, r0, lsl #26
   11a50:	2d180c00 	ldccs	12, cr0, [r8, #-0]
   11a54:	00005ec7 	andeq	r5, r0, r7, asr #29
   11a58:	00005ec7 	andeq	r5, r0, r7, asr #29
   11a5c:	222d150c 	eorcs	r1, sp, #12, 10	; 0x3000000
   11a60:	2200005e 	andcs	r0, r0, #94	; 0x5e
   11a64:	0a00005e 	beq	11be4 <_Min_Stack_Size+0x119e4>
   11a68:	5ed32de4 	cdppl	13, 13, cr2, cr3, cr4, {7}
   11a6c:	5ed30000 	cdppl	0, 13, cr0, cr3, cr0, {0}
   11a70:	dd0a0000 	stcle	0, cr0, [sl, #-0]
   11a74:	000b3700 	andeq	r3, fp, r0, lsl #14
   11a78:	54000400 	strpl	r0, [r0], #-1024	; 0xfffffc00
   11a7c:	0400003b 	streq	r0, [r0], #-59	; 0xffffffc5
   11a80:	005dbb01 	subseq	fp, sp, r1, lsl #22
   11a84:	5f670c00 	svcpl	0x00670c00
   11a88:	59470000 	stmdbpl	r7, {}^	; <UNPREDICTABLE>
   11a8c:	0d180000 	ldceq	0, cr0, [r8, #-0]
   11a90:	03dc0800 	bicseq	r0, ip, #0, 16
   11a94:	71410000 	mrsvc	r0, (UNDEF: 65)
   11a98:	04020000 	streq	r0, [r2], #-0
   11a9c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   11aa0:	5cec0300 	stclpl	3, cr0, [ip]
   11aa4:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
   11aa8:	00000037 	andeq	r0, r0, r7, lsr r0
   11aac:	ce070404 	cdpgt	4, 0, cr0, cr7, cr4, {0}
   11ab0:	04000001 	streq	r0, [r0], #-1
   11ab4:	00b80508 	adcseq	r0, r8, r8, lsl #10
   11ab8:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
   11abc:	0002f804 	andeq	pc, r2, r4, lsl #16
   11ac0:	06010400 	streq	r0, [r1], -r0, lsl #8
   11ac4:	00000192 	muleq	r0, r2, r1
   11ac8:	90080104 	andls	r0, r8, r4, lsl #2
   11acc:	04000001 	streq	r0, [r0], #-1
   11ad0:	00950502 	addseq	r0, r5, r2, lsl #10
   11ad4:	02040000 	andeq	r0, r4, #0
   11ad8:	0001f207 	andeq	pc, r1, r7, lsl #4
   11adc:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
   11ae0:	000000bd 	strheq	r0, [r0], -sp
   11ae4:	c9070404 	stmdbgt	r7, {r2, sl}
   11ae8:	04000001 	streq	r0, [r0], #-1
   11aec:	01c40708 	biceq	r0, r4, r8, lsl #14
   11af0:	a4030000 	strge	r0, [r3], #-0
   11af4:	03000057 	movweq	r0, #87	; 0x57
   11af8:	00002507 	andeq	r2, r0, r7, lsl #10
   11afc:	57930300 	ldrpl	r0, [r3, r0, lsl #6]
   11b00:	2c040000 	stccs	0, cr0, [r4], {-0}
   11b04:	00000068 	andeq	r0, r0, r8, rrx
   11b08:	00587d03 	subseq	r7, r8, r3, lsl #26
   11b0c:	68720400 	ldmdavs	r2!, {sl}^
   11b10:	05000000 	streq	r0, [r0, #-0]
   11b14:	00005760 	andeq	r5, r0, r0, ror #14
   11b18:	37016502 	strcc	r6, [r1, -r2, lsl #10]
   11b1c:	06000000 	streq	r0, [r0], -r0
   11b20:	c9a60404 	stmibgt	r6!, {r2, sl}
   11b24:	07000000 	streq	r0, [r0, -r0]
   11b28:	0000575a 	andeq	r5, r0, sl, asr r7
   11b2c:	009ea804 	addseq	sl, lr, r4, lsl #16
   11b30:	a8070000 	stmdage	r7, {}	; <UNPREDICTABLE>
   11b34:	04000056 	streq	r0, [r0], #-86	; 0xffffffaa
   11b38:	0000c9a9 	andeq	ip, r0, r9, lsr #19
   11b3c:	53080000 	movwpl	r0, #32768	; 0x8000
   11b40:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
   11b44:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   11b48:	000000d9 	ldrdeq	r0, [r0], -r9
   11b4c:	04040003 	streq	r0, [r4], #-3
   11b50:	00005907 	andeq	r5, r0, r7, lsl #18
   11b54:	04080a00 	streq	r0, [r8], #-2560	; 0xfffff600
   11b58:	000101a3 	andeq	r0, r1, r3, lsr #3
   11b5c:	58670b00 	stmdapl	r7!, {r8, r9, fp}^
   11b60:	a5040000 	strge	r0, [r4, #-0]
   11b64:	00000025 	andeq	r0, r0, r5, lsr #32
   11b68:	586f0b00 	stmdapl	pc!, {r8, r9, fp}^	; <UNPREDICTABLE>
   11b6c:	aa040000 	bge	111b74 <_Min_Stack_Size+0x111974>
   11b70:	000000aa 	andeq	r0, r0, sl, lsr #1
   11b74:	06030004 	streq	r0, [r3], -r4
   11b78:	04000058 	streq	r0, [r0], #-88	; 0xffffffa8
   11b7c:	0000e0ab 	andeq	lr, r0, fp, lsr #1
   11b80:	56790300 	ldrbtpl	r0, [r9], -r0, lsl #6
   11b84:	af040000 	svcge	0x00040000
   11b88:	0000007d 	andeq	r0, r0, sp, ror r0
   11b8c:	040d040c 	streq	r0, [sp], #-1036	; 0xfffffbf4
   11b90:	0000011f 	andeq	r0, r0, pc, lsl r1
   11b94:	99080104 	stmdbls	r8, {r2, r8}
   11b98:	03000001 	movweq	r0, #1
   11b9c:	000058b9 			; <UNDEFINED> instruction: 0x000058b9
   11ba0:	006f1605 	rsbeq	r1, pc, r5, lsl #12
   11ba4:	820e0000 	andhi	r0, lr, #0
   11ba8:	18000056 	stmdane	r0, {r1, r2, r4, r6}
   11bac:	01842d05 	orreq	r2, r4, r5, lsl #26
   11bb0:	270b0000 	strcs	r0, [fp, -r0]
   11bb4:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   11bb8:	0001842f 	andeq	r8, r1, pc, lsr #8
   11bbc:	5f0f0000 	svcpl	0x000f0000
   11bc0:	3005006b 	andcc	r0, r5, fp, rrx
   11bc4:	00000025 	andeq	r0, r0, r5, lsr #32
   11bc8:	58590b04 	ldmdapl	r9, {r2, r8, r9, fp}^
   11bcc:	30050000 	andcc	r0, r5, r0
   11bd0:	00000025 	andeq	r0, r0, r5, lsr #32
   11bd4:	56730b08 	ldrbtpl	r0, [r3], -r8, lsl #22
   11bd8:	30050000 	andcc	r0, r5, r0
   11bdc:	00000025 	andeq	r0, r0, r5, lsr #32
   11be0:	58d40b0c 	ldmpl	r4, {r2, r3, r8, r9, fp}^
   11be4:	30050000 	andcc	r0, r5, r0
   11be8:	00000025 	andeq	r0, r0, r5, lsr #32
   11bec:	785f0f10 	ldmdavc	pc, {r4, r8, r9, sl, fp}^	; <UNPREDICTABLE>
   11bf0:	8a310500 	bhi	c52ff8 <_Min_Stack_Size+0xc52df8>
   11bf4:	14000001 	strne	r0, [r0], #-1
   11bf8:	31040d00 	tstcc	r4, r0, lsl #26
   11bfc:	08000001 	stmdaeq	r0, {r0}
   11c00:	00000126 	andeq	r0, r0, r6, lsr #2
   11c04:	0000019a 	muleq	r0, sl, r1
   11c08:	0000d909 	andeq	sp, r0, r9, lsl #18
   11c0c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   11c10:	000056a3 	andeq	r5, r0, r3, lsr #13
   11c14:	13350524 	teqne	r5, #36, 10	; 0x9000000
   11c18:	0b000002 	bleq	11c28 <_Min_Stack_Size+0x11a28>
   11c1c:	00005607 	andeq	r5, r0, r7, lsl #12
   11c20:	00253705 	eoreq	r3, r5, r5, lsl #14
   11c24:	0b000000 	bleq	11c2c <_Min_Stack_Size+0x11a2c>
   11c28:	0000588c 	andeq	r5, r0, ip, lsl #17
   11c2c:	00253805 	eoreq	r3, r5, r5, lsl #16
   11c30:	0b040000 	bleq	111c38 <_Min_Stack_Size+0x111a38>
   11c34:	00005616 	andeq	r5, r0, r6, lsl r6
   11c38:	00253905 	eoreq	r3, r5, r5, lsl #18
   11c3c:	0b080000 	bleq	211c44 <_Min_Stack_Size+0x211a44>
   11c40:	00005931 	andeq	r5, r0, r1, lsr r9
   11c44:	00253a05 	eoreq	r3, r5, r5, lsl #20
   11c48:	0b0c0000 	bleq	311c50 <_Min_Stack_Size+0x311a50>
   11c4c:	0000577f 	andeq	r5, r0, pc, ror r7
   11c50:	00253b05 	eoreq	r3, r5, r5, lsl #22
   11c54:	0b100000 	bleq	411c5c <_Min_Stack_Size+0x411a5c>
   11c58:	0000576f 	andeq	r5, r0, pc, ror #14
   11c5c:	00253c05 	eoreq	r3, r5, r5, lsl #24
   11c60:	0b140000 	bleq	511c68 <_Min_Stack_Size+0x511a68>
   11c64:	000058d9 	ldrdeq	r5, [r0], -r9
   11c68:	00253d05 	eoreq	r3, r5, r5, lsl #26
   11c6c:	0b180000 	bleq	611c74 <_Min_Stack_Size+0x611a74>
   11c70:	000057ee 	andeq	r5, r0, lr, ror #15
   11c74:	00253e05 	eoreq	r3, r5, r5, lsl #28
   11c78:	0b1c0000 	bleq	711c80 <_Min_Stack_Size+0x711a80>
   11c7c:	000058fd 	strdeq	r5, [r0], -sp
   11c80:	00253f05 	eoreq	r3, r5, r5, lsl #30
   11c84:	00200000 	eoreq	r0, r0, r0
   11c88:	0057f80e 	subseq	pc, r7, lr, lsl #16
   11c8c:	73050800 	movwvc	r0, #22528	; 0x5800
   11c90:	00000238 	andeq	r0, r0, r8, lsr r2
   11c94:	003a5f0b 	eorseq	r5, sl, fp, lsl #30
   11c98:	38740500 	ldmdacc	r4!, {r8, sl}^
   11c9c:	00000002 	andeq	r0, r0, r2
   11ca0:	005da30b 	subseq	sl, sp, fp, lsl #6
   11ca4:	25750500 	ldrbcs	r0, [r5, #-1280]!	; 0xfffffb00
   11ca8:	04000000 	streq	r0, [r0], #-0
   11cac:	53040d00 	movwpl	r0, #19712	; 0x4d00
   11cb0:	10000000 	andne	r0, r0, r0
   11cb4:	000058ad 	andeq	r5, r0, sp, lsr #17
   11cb8:	01720560 	cmneq	r2, r0, ror #10
   11cbc:	0000036a 	andeq	r0, r0, sl, ror #6
   11cc0:	00588511 	subseq	r8, r8, r1, lsl r5
   11cc4:	01760500 	cmneq	r6, r0, lsl #10
   11cc8:	00000025 	andeq	r0, r0, r5, lsr #32
   11ccc:	5bc61100 	blpl	ff1960d4 <BootRAM+0xe106875>
   11cd0:	7b050000 	blvc	151cd8 <_Min_Stack_Size+0x151ad8>
   11cd4:	00059201 	andeq	r9, r5, r1, lsl #4
   11cd8:	d6110400 	ldrle	r0, [r1], -r0, lsl #8
   11cdc:	0500005b 	streq	r0, [r0, #-91]	; 0xffffffa5
   11ce0:	0592017b 	ldreq	r0, [r2, #379]	; 0x17b
   11ce4:	11080000 	mrsne	r0, (UNDEF: 8)
   11ce8:	00005c91 	muleq	r0, r1, ip
   11cec:	92017b05 	andls	r7, r1, #5120	; 0x1400
   11cf0:	0c000005 	stceq	0, cr0, [r0], {5}
   11cf4:	00583a11 	subseq	r3, r8, r1, lsl sl
   11cf8:	017d0500 	cmneq	sp, r0, lsl #10
   11cfc:	00000025 	andeq	r0, r0, r5, lsr #32
   11d00:	55bb1110 	ldrpl	r1, [fp, #272]!	; 0x110
   11d04:	7f050000 	svcvc	0x00050000
   11d08:	00011901 	andeq	r1, r1, r1, lsl #18
   11d0c:	88111400 	ldmdahi	r1, {sl, ip}
   11d10:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
   11d14:	00250181 	eoreq	r0, r5, r1, lsl #3
   11d18:	11180000 	tstne	r8, r0
   11d1c:	000056c0 	andeq	r5, r0, r0, asr #13
   11d20:	25018305 	strcs	r8, [r1, #-773]	; 0xfffffcfb
   11d24:	1c000000 	stcne	0, cr0, [r0], {-0}
   11d28:	00583f11 	subseq	r3, r8, r1, lsl pc
   11d2c:	01840500 	orreq	r0, r4, r0, lsl #10
   11d30:	000004dc 	ldrdeq	r0, [r0], -ip
   11d34:	6d5f1220 	lfmvs	f1, 2, [pc, #-128]	; 11cbc <_Min_Stack_Size+0x11abc>
   11d38:	86050070 			; <UNDEFINED> instruction: 0x86050070
   11d3c:	0006df01 	andeq	sp, r6, r1, lsl #30
   11d40:	4f112400 	svcmi	0x00112400
   11d44:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   11d48:	06f00188 	ldrbteq	r0, [r0], r8, lsl #3
   11d4c:	11280000 			; <UNDEFINED> instruction: 0x11280000
   11d50:	0000568a 	andeq	r5, r0, sl, lsl #13
   11d54:	25018a05 	strcs	r8, [r1, #-2565]	; 0xfffff5fb
   11d58:	2c000000 	stccs	0, cr0, [r0], {-0}
   11d5c:	0056d211 	subseq	sp, r6, r1, lsl r2
   11d60:	018d0500 	orreq	r0, sp, r0, lsl #10
   11d64:	00000025 	andeq	r0, r0, r5, lsr #32
   11d68:	564c1130 			; <UNDEFINED> instruction: 0x564c1130
   11d6c:	8e050000 	cdphi	0, 0, cr0, cr5, cr0, {0}
   11d70:	00011901 	andeq	r1, r1, r1, lsl #18
   11d74:	da113400 	ble	45ed7c <_Min_Stack_Size+0x45eb7c>
   11d78:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   11d7c:	06f60190 	usateq	r0, #22, r0, lsl #3
   11d80:	11380000 	teqne	r8, r0
   11d84:	00005908 	andeq	r5, r0, r8, lsl #18
   11d88:	fc019105 	stc2	1, cr9, [r1], {5}
   11d8c:	3c000006 	stccc	0, cr0, [r0], {6}
   11d90:	00574511 	subseq	r4, r7, r1, lsl r5
   11d94:	01920500 	orrseq	r0, r2, r0, lsl #10
   11d98:	00000119 	andeq	r0, r0, r9, lsl r1
   11d9c:	58ed1140 	stmiapl	sp!, {r6, r8, ip}^
   11da0:	95050000 	strls	r0, [r5, #-0]
   11da4:	00070d01 	andeq	r0, r7, r1, lsl #26
   11da8:	2d114400 	cfldrscs	mvf4, [r1, #-0]
   11dac:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   11db0:	0557019d 	ldrbeq	r0, [r7, #-413]	; 0xfffffe63
   11db4:	11480000 	mrsne	r0, (UNDEF: 72)
   11db8:	00005620 	andeq	r5, r0, r0, lsr #12
   11dbc:	92019e05 	andls	r9, r1, #5, 28	; 0x50
   11dc0:	54000005 	strpl	r0, [r0], #-5
   11dc4:	00577911 	subseq	r7, r7, r1, lsl r9
   11dc8:	019f0500 	orrseq	r0, pc, r0, lsl #10
   11dcc:	00000719 	andeq	r0, r0, r9, lsl r7
   11dd0:	55d51158 	ldrbpl	r1, [r5, #344]	; 0x158
   11dd4:	a0050000 	andge	r0, r5, r0
   11dd8:	00011901 	andeq	r1, r1, r1, lsl #18
   11ddc:	0d005c00 	stceq	12, cr5, [r0, #-0]
   11de0:	00023e04 	andeq	r3, r2, r4, lsl #28
   11de4:	58110e00 	ldmdapl	r1, {r9, sl, fp}
   11de8:	05680000 	strbeq	r0, [r8, #-0]!
   11dec:	00049ab3 			; <UNDEFINED> instruction: 0x00049ab3
   11df0:	705f0f00 	subsvc	r0, pc, r0, lsl #30
   11df4:	38b40500 	ldmcc	r4!, {r8, sl}
   11df8:	00000002 	andeq	r0, r0, r2
   11dfc:	00725f0f 	rsbseq	r5, r2, pc, lsl #30
   11e00:	0025b505 	eoreq	fp, r5, r5, lsl #10
   11e04:	0f040000 	svceq	0x00040000
   11e08:	0500775f 	streq	r7, [r0, #-1887]	; 0xfffff8a1
   11e0c:	000025b6 			; <UNDEFINED> instruction: 0x000025b6
   11e10:	3c0b0800 	stccc	8, cr0, [fp], {-0}
   11e14:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   11e18:	00005ab7 			; <UNDEFINED> instruction: 0x00005ab7
   11e1c:	ce0b0c00 	cdpgt	12, 0, cr0, cr11, cr0, {0}
   11e20:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   11e24:	00005ab8 			; <UNDEFINED> instruction: 0x00005ab8
   11e28:	5f0f0e00 	svcpl	0x000f0e00
   11e2c:	05006662 	streq	r6, [r0, #-1634]	; 0xfffff99e
   11e30:	000213b9 			; <UNDEFINED> instruction: 0x000213b9
   11e34:	e10b1000 	mrs	r1, (UNDEF: 11)
   11e38:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
   11e3c:	000025ba 			; <UNDEFINED> instruction: 0x000025ba
   11e40:	eb0b1800 	bl	2d7e48 <_Min_Stack_Size+0x2d7c48>
   11e44:	0500000d 	streq	r0, [r0, #-13]
   11e48:	00036abd 			; <UNDEFINED> instruction: 0x00036abd
   11e4c:	250b1c00 	strcs	r1, [fp, #-3072]	; 0xfffff400
   11e50:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   11e54:	000117c1 	andeq	r1, r1, r1, asr #15
   11e58:	610b2000 	mrsvs	r2, (UNDEF: 11)
   11e5c:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
   11e60:	0004b8c3 	andeq	fp, r4, r3, asr #17
   11e64:	bc0b2400 	cfstrslt	mvf2, [fp], {-0}
   11e68:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
   11e6c:	0004e7c5 	andeq	lr, r4, r5, asr #15
   11e70:	770b2800 	strvc	r2, [fp, -r0, lsl #16]
   11e74:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   11e78:	00050bc8 	andeq	r0, r5, r8, asr #23
   11e7c:	170b2c00 	strne	r2, [fp, -r0, lsl #24]
   11e80:	05000059 	streq	r0, [r0, #-89]	; 0xffffffa7
   11e84:	000525c9 	andeq	r2, r5, r9, asr #11
   11e88:	5f0f3000 	svcpl	0x000f3000
   11e8c:	05006275 	streq	r6, [r0, #-629]	; 0xfffffd8b
   11e90:	000213cc 	andeq	r1, r2, ip, asr #7
   11e94:	5f0f3400 	svcpl	0x000f3400
   11e98:	05007075 	streq	r7, [r0, #-117]	; 0xffffff8b
   11e9c:	000238cd 	andeq	r3, r2, sp, asr #17
   11ea0:	5f0f3c00 	svcpl	0x000f3c00
   11ea4:	05007275 	streq	r7, [r0, #-629]	; 0xfffffd8b
   11ea8:	000025ce 	andeq	r2, r0, lr, asr #11
   11eac:	100b4000 	andne	r4, fp, r0
   11eb0:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   11eb4:	00052bd1 	ldrdeq	r2, [r5], -r1
   11eb8:	f70b4400 			; <UNDEFINED> instruction: 0xf70b4400
   11ebc:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   11ec0:	00053bd2 	ldrdeq	r3, [r5], -r2
   11ec4:	5f0f4700 	svcpl	0x000f4700
   11ec8:	0500626c 	streq	r6, [r0, #-620]	; 0xfffffd94
   11ecc:	000213d5 	ldrdeq	r1, [r2], -r5
   11ed0:	430b4800 	movwmi	r4, #47104	; 0xb800
   11ed4:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   11ed8:	000025d8 	ldrdeq	r2, [r0], -r8
   11edc:	250b5000 	strcs	r5, [fp, #-0]
   11ee0:	05000061 	streq	r0, [r0, #-97]	; 0xffffff9f
   11ee4:	000088d9 	ldrdeq	r8, [r0], -r9
   11ee8:	010b5400 	tsteq	fp, r0, lsl #8
   11eec:	0500003c 	streq	r0, [r0, #-60]	; 0xffffffc4
   11ef0:	00010ce0 	andeq	r0, r1, r0, ror #25
   11ef4:	190b5800 	stmdbne	fp, {fp, ip, lr}
   11ef8:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   11efc:	000101e2 	andeq	r0, r1, r2, ror #3
   11f00:	670b5c00 	strvs	r5, [fp, -r0, lsl #24]
   11f04:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
   11f08:	000025e3 	andeq	r2, r0, r3, ror #11
   11f0c:	13006400 	movwne	r6, #1024	; 0x400
   11f10:	00000025 	andeq	r0, r0, r5, lsr #32
   11f14:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
   11f18:	00036a14 	andeq	r6, r3, r4, lsl sl
   11f1c:	01171400 	tsteq	r7, r0, lsl #8
   11f20:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
   11f24:	14000001 	strne	r0, [r0], #-1
   11f28:	00000025 	andeq	r0, r0, r5, lsr #32
   11f2c:	9a040d00 	bls	115334 <_Min_Stack_Size+0x115134>
   11f30:	13000004 	movwne	r0, #4
   11f34:	00000025 	andeq	r0, r0, r5, lsr #32
   11f38:	000004dc 	ldrdeq	r0, [r0], -ip
   11f3c:	00036a14 	andeq	r6, r3, r4, lsl sl
   11f40:	01171400 	tsteq	r7, r0, lsl #8
   11f44:	dc140000 	ldcle	0, cr0, [r4], {-0}
   11f48:	14000004 	strne	r0, [r0], #-4
   11f4c:	00000025 	andeq	r0, r0, r5, lsr #32
   11f50:	e2040d00 	and	r0, r4, #0, 26
   11f54:	15000004 	strne	r0, [r0, #-4]
   11f58:	0000011f 	andeq	r0, r0, pc, lsl r1
   11f5c:	04be040d 	ldrteq	r0, [lr], #1037	; 0x40d
   11f60:	93130000 	tstls	r3, #0
   11f64:	0b000000 	bleq	11f6c <_Min_Stack_Size+0x11d6c>
   11f68:	14000005 	strne	r0, [r0], #-5
   11f6c:	0000036a 	andeq	r0, r0, sl, ror #6
   11f70:	00011714 	andeq	r1, r1, r4, lsl r7
   11f74:	00931400 	addseq	r1, r3, r0, lsl #8
   11f78:	25140000 	ldrcs	r0, [r4, #-0]
   11f7c:	00000000 	andeq	r0, r0, r0
   11f80:	04ed040d 	strbteq	r0, [sp], #1037	; 0x40d
   11f84:	25130000 	ldrcs	r0, [r3, #-0]
   11f88:	25000000 	strcs	r0, [r0, #-0]
   11f8c:	14000005 	strne	r0, [r0], #-5
   11f90:	0000036a 	andeq	r0, r0, sl, ror #6
   11f94:	00011714 	andeq	r1, r1, r4, lsl r7
   11f98:	040d0000 	streq	r0, [sp], #-0
   11f9c:	00000511 	andeq	r0, r0, r1, lsl r5
   11fa0:	00005308 	andeq	r5, r0, r8, lsl #6
   11fa4:	00053b00 	andeq	r3, r5, r0, lsl #22
   11fa8:	00d90900 	sbcseq	r0, r9, r0, lsl #18
   11fac:	00020000 	andeq	r0, r2, r0
   11fb0:	00005308 	andeq	r5, r0, r8, lsl #6
   11fb4:	00054b00 	andeq	r4, r5, r0, lsl #22
   11fb8:	00d90900 	sbcseq	r0, r9, r0, lsl #18
   11fbc:	00000000 	andeq	r0, r0, r0
   11fc0:	0057ff05 	subseq	pc, r7, r5, lsl #30
   11fc4:	011d0500 	tsteq	sp, r0, lsl #10
   11fc8:	00000370 	andeq	r0, r0, r0, ror r3
   11fcc:	0060e410 	rsbeq	lr, r0, r0, lsl r4
   11fd0:	21050c00 	tstcs	r5, r0, lsl #24
   11fd4:	00058c01 	andeq	r8, r5, r1, lsl #24
   11fd8:	58271100 	stmdapl	r7!, {r8, ip}
   11fdc:	23050000 	movwcs	r0, #20480	; 0x5000
   11fe0:	00058c01 	andeq	r8, r5, r1, lsl #24
   11fe4:	df110000 	svcle	0x00110000
   11fe8:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   11fec:	00250124 	eoreq	r0, r5, r4, lsr #2
   11ff0:	11040000 	mrsne	r0, (UNDEF: 4)
   11ff4:	000057e8 	andeq	r5, r0, r8, ror #15
   11ff8:	92012505 	andls	r2, r1, #20971520	; 0x1400000
   11ffc:	08000005 	stmdaeq	r0, {r0, r2}
   12000:	57040d00 	strpl	r0, [r4, -r0, lsl #26]
   12004:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
   12008:	00054b04 	andeq	r4, r5, r4, lsl #22
   1200c:	55b31000 	ldrpl	r1, [r3, #0]!
   12010:	05180000 	ldreq	r0, [r8, #-0]
   12014:	05da013d 	ldrbeq	r0, [sl, #317]	; 0x13d
   12018:	61110000 	tstvs	r1, r0
   1201c:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   12020:	05da013e 	ldrbeq	r0, [sl, #318]	; 0x13e
   12024:	11000000 	mrsne	r0, (UNDEF: 0)
   12028:	00005895 	muleq	r0, r5, r8
   1202c:	da013f05 	ble	61c48 <_Min_Stack_Size+0x61a48>
   12030:	06000005 	streq	r0, [r0], -r5
   12034:	0058b411 	subseq	fp, r8, r1, lsl r4
   12038:	01400500 	cmpeq	r0, r0, lsl #10
   1203c:	00000061 	andeq	r0, r0, r1, rrx
   12040:	5822110c 	stmdapl	r2!, {r2, r3, r8, ip}
   12044:	43050000 	movwmi	r0, #20480	; 0x5000
   12048:	00007601 	andeq	r7, r0, r1, lsl #12
   1204c:	08001000 	stmdaeq	r0, {ip}
   12050:	00000061 	andeq	r0, r0, r1, rrx
   12054:	000005ea 	andeq	r0, r0, sl, ror #11
   12058:	0000d909 	andeq	sp, r0, r9, lsl #18
   1205c:	10000200 	andne	r0, r0, r0, lsl #4
   12060:	00005635 	andeq	r5, r0, r5, lsr r6
   12064:	01560510 	cmpeq	r6, r0, lsl r5
   12068:	0000062c 	andeq	r0, r0, ip, lsr #12
   1206c:	00575211 	subseq	r5, r7, r1, lsl r2
   12070:	01590500 	cmpeq	r9, r0, lsl #10
   12074:	00000184 	andeq	r0, r0, r4, lsl #3
   12078:	56991100 	ldrpl	r1, [r9], r0, lsl #2
   1207c:	5a050000 	bpl	152084 <_Min_Stack_Size+0x151e84>
   12080:	00002501 	andeq	r2, r0, r1, lsl #10
   12084:	2c110400 	cfldrscs	mvf0, [r1], {-0}
   12088:	05000059 	streq	r0, [r0, #-89]	; 0xffffffa7
   1208c:	0184015b 	orreq	r0, r4, fp, asr r1
   12090:	11080000 	mrsne	r0, (UNDEF: 8)
   12094:	0000579a 	muleq	r0, sl, r7
   12098:	2c015c05 	stccs	12, cr5, [r1], {5}
   1209c:	0c000006 	stceq	0, cr0, [r0], {6}
   120a0:	84040d00 	strhi	r0, [r4], #-3328	; 0xfffff300
   120a4:	10000001 	andne	r0, r0, r1
   120a8:	000058a8 	andeq	r5, r0, r8, lsr #17
   120ac:	01600550 	cmneq	r0, r0, asr r5
   120b0:	000006cf 	andeq	r0, r0, pc, asr #13
   120b4:	00589b11 	subseq	r9, r8, r1, lsl fp
   120b8:	01630500 	cmneq	r3, r0, lsl #10
   120bc:	00000119 	andeq	r0, r0, r9, lsl r1
   120c0:	582d1100 	stmdapl	sp!, {r8, ip}
   120c4:	64050000 	strvs	r0, [r5], #-0
   120c8:	00010101 	andeq	r0, r1, r1, lsl #2
   120cc:	f9110400 			; <UNDEFINED> instruction: 0xf9110400
   120d0:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
   120d4:	01010165 	tsteq	r1, r5, ror #2
   120d8:	110c0000 	mrsne	r0, (UNDEF: 12)
   120dc:	0000591e 	andeq	r5, r0, lr, lsl r9
   120e0:	01016605 	tsteq	r1, r5, lsl #12
   120e4:	14000001 	strne	r0, [r0], #-1
   120e8:	0058e311 	subseq	lr, r8, r1, lsl r3
   120ec:	01670500 	cmneq	r7, r0, lsl #10
   120f0:	000006cf 	andeq	r0, r0, pc, asr #13
   120f4:	58c1111c 	stmiapl	r1, {r2, r3, r4, r8, ip}^
   120f8:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
   120fc:	00002501 	andeq	r2, r0, r1, lsl #10
   12100:	65112400 	ldrvs	r2, [r1, #-1024]	; 0xfffffc00
   12104:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   12108:	01010169 	tsteq	r1, r9, ror #2
   1210c:	11280000 			; <UNDEFINED> instruction: 0x11280000
   12110:	000055ea 	andeq	r5, r0, sl, ror #11
   12114:	01016a05 	tsteq	r1, r5, lsl #20
   12118:	30000001 	andcc	r0, r0, r1
   1211c:	00565411 	subseq	r5, r6, r1, lsl r4
   12120:	016b0500 	cmneq	fp, r0, lsl #10
   12124:	00000101 	andeq	r0, r0, r1, lsl #2
   12128:	55c61138 	strbpl	r1, [r6, #312]	; 0x138
   1212c:	6c050000 	stcvs	0, cr0, [r5], {-0}
   12130:	00010101 	andeq	r0, r1, r1, lsl #2
   12134:	af114000 	svcge	0x00114000
   12138:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   1213c:	0101016d 	tsteq	r1, sp, ror #2
   12140:	00480000 	subeq	r0, r8, r0
   12144:	00011f08 	andeq	r1, r1, r8, lsl #30
   12148:	0006df00 	andeq	sp, r6, r0, lsl #30
   1214c:	00d90900 	sbcseq	r0, r9, r0, lsl #18
   12150:	00070000 	andeq	r0, r7, r0
   12154:	05ea040d 	strbeq	r0, [sl, #1037]!	; 0x40d
   12158:	f0160000 			; <UNDEFINED> instruction: 0xf0160000
   1215c:	14000006 	strne	r0, [r0], #-6
   12160:	0000036a 	andeq	r0, r0, sl, ror #6
   12164:	e5040d00 	str	r0, [r4, #-3328]	; 0xfffff300
   12168:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
   1216c:	00059804 	andeq	r9, r5, r4, lsl #16
   12170:	9a040d00 	bls	115578 <_Min_Stack_Size+0x115378>
   12174:	16000001 	strne	r0, [r0], -r1
   12178:	0000070d 	andeq	r0, r0, sp, lsl #14
   1217c:	00002514 	andeq	r2, r0, r4, lsl r5
   12180:	040d0000 	streq	r0, [sp], #-0
   12184:	00000713 	andeq	r0, r0, r3, lsl r7
   12188:	0702040d 	streq	r0, [r2, -sp, lsl #8]
   1218c:	040d0000 	streq	r0, [sp], #-0
   12190:	00000632 	andeq	r0, r0, r2, lsr r6
   12194:	0059de03 	subseq	sp, r9, r3, lsl #28
   12198:	2a280600 	bcs	a139a0 <_Min_Stack_Size+0xa137a0>
   1219c:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
   121a0:	000059a5 	andeq	r5, r0, r5, lsr #19
   121a4:	41000704 	tstmi	r0, r4, lsl #14
   121a8:	17000007 	strne	r0, [r0, -r7]
   121ac:	000059ed 	andeq	r5, r0, sp, ror #19
   121b0:	00000117 	andeq	r0, r0, r7, lsl r1
   121b4:	bd030000 	stclt	0, cr0, [r3, #-0]
   121b8:	0800005f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6}
   121bc:	0000615b 	andeq	r6, r0, fp, asr r1
   121c0:	5fcb0300 	svcpl	0x00cb0300
   121c4:	63080000 	movwvs	r0, #32768	; 0x8000
   121c8:	0000006f 	andeq	r0, r0, pc, rrx
   121cc:	00580103 	subseq	r0, r8, r3, lsl #2
   121d0:	4b350900 	blmi	d545d8 <_Min_Stack_Size+0xd543d8>
   121d4:	03000005 	movweq	r0, #5
   121d8:	000059a7 	andeq	r5, r0, r7, lsr #19
   121dc:	071f6206 	ldreq	r6, [pc, -r6, lsl #4]
   121e0:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
   121e4:	0002fd04 	andeq	pc, r2, r4, lsl #26
   121e8:	04040400 	streq	r0, [r4], #-1024	; 0xfffffc00
   121ec:	00005e2a 	andeq	r5, r0, sl, lsr #28
   121f0:	0025040d 	eoreq	r0, r5, sp, lsl #8
   121f4:	410e0000 	mrsmi	r0, (UNDEF: 14)
   121f8:	6000005e 	andvs	r0, r0, lr, asr r0
   121fc:	0836c00a 	ldmdaeq	r6!, {r1, r3, lr, pc}
   12200:	3d0b0000 	stccc	0, cr0, [fp, #-0]
   12204:	0a000056 	beq	12364 <_Min_Stack_Size+0x12164>
   12208:	000025c2 	andeq	r2, r0, r2, asr #11
   1220c:	1b0b0000 	blne	2d2214 <_Min_Stack_Size+0x2d2014>
   12210:	0a00005f 	beq	12394 <_Min_Stack_Size+0x12194>
   12214:	000025c3 	andeq	r2, r0, r3, asr #11
   12218:	1a0b0400 	bne	2d3220 <_Min_Stack_Size+0x2d3020>
   1221c:	0a00005f 	beq	123a0 <_Min_Stack_Size+0x121a0>
   12220:	000025c4 	andeq	r2, r0, r4, asr #11
   12224:	b50b0800 	strlt	r0, [fp, #-2048]	; 0xfffff800
   12228:	0a00005e 	beq	123a8 <_Min_Stack_Size+0x121a8>
   1222c:	000025c5 	andeq	r2, r0, r5, asr #11
   12230:	a40b0c00 	strge	r0, [fp], #-3072	; 0xfffff400
   12234:	0a00005d 	beq	123b0 <_Min_Stack_Size+0x121b0>
   12238:	000025c6 	andeq	r2, r0, r6, asr #11
   1223c:	720f1000 	andvc	r1, pc, #0
   12240:	0a007465 	beq	2f3dc <_Min_Stack_Size+0x2f1dc>
   12244:	000025c7 	andeq	r2, r0, r7, asr #11
   12248:	580b1400 	stmdapl	fp, {sl, ip}
   1224c:	0a000015 	beq	122a8 <_Min_Stack_Size+0x120a8>
   12250:	00011fc8 	andeq	r1, r1, r8, asr #31
   12254:	3b0b1800 	blcc	2d825c <_Min_Stack_Size+0x2d805c>
   12258:	0a00005f 	beq	123dc <_Min_Stack_Size+0x121dc>
   1225c:	00011fc9 	andeq	r1, r1, r9, asr #31
   12260:	ee0b1900 	vmla.f16	s2, s22, s0
   12264:	0a00005e 	beq	123e4 <_Min_Stack_Size+0x121e4>
   12268:	00011fca 	andeq	r1, r1, sl, asr #31
   1226c:	620f1a00 	andvs	r1, pc, #0, 20
   12270:	0a006675 	beq	2bc4c <_Min_Stack_Size+0x2ba4c>
   12274:	000836cb 	andeq	r3, r8, fp, asr #13
   12278:	db0b1b00 	blle	2d8e80 <_Min_Stack_Size+0x2d8c80>
   1227c:	0a000055 	beq	123d8 <_Min_Stack_Size+0x121d8>
   12280:	000846cc 	andeq	r4, r8, ip, asr #13
   12284:	550b4300 	strpl	r4, [fp, #-768]	; 0xfffffd00
   12288:	0a00005e 	beq	12408 <_Min_Stack_Size+0x12208>
   1228c:	00076dce 	andeq	r6, r7, lr, asr #27
   12290:	290b4800 	stmdbcs	fp, {fp, lr}
   12294:	0a00005f 	beq	12418 <_Min_Stack_Size+0x12218>
   12298:	000856cf 	andeq	r5, r8, pc, asr #13
   1229c:	ce0b5000 	cdpgt	0, 0, cr5, cr11, cr0, {0}
   122a0:	0a00005e 	beq	12420 <_Min_Stack_Size+0x12220>
   122a4:	000025d0 	ldrdeq	r2, [r0], -r0
   122a8:	08005800 	stmdaeq	r0, {fp, ip, lr}
   122ac:	0000011f 	andeq	r0, r0, pc, lsl r1
   122b0:	00000846 	andeq	r0, r0, r6, asr #16
   122b4:	0000d909 	andeq	sp, r0, r9, lsl #18
   122b8:	08002700 	stmdaeq	r0, {r8, r9, sl, sp}
   122bc:	0000011f 	andeq	r0, r0, pc, lsl r1
   122c0:	00000856 	andeq	r0, r0, r6, asr r8
   122c4:	0000d909 	andeq	sp, r0, r9, lsl #18
   122c8:	08000200 	stmdaeq	r0, {r9}
   122cc:	0000011f 	andeq	r0, r0, pc, lsl r1
   122d0:	00000866 	andeq	r0, r0, r6, ror #16
   122d4:	0000d909 	andeq	sp, r0, r9, lsl #18
   122d8:	18000600 	stmdane	r0, {r9, sl}
   122dc:	00005fd2 	ldrdeq	r5, [r0], -r2
   122e0:	00253101 	eoreq	r3, r5, r1, lsl #2
   122e4:	0d180000 	ldceq	0, cr0, [r8, #-0]
   122e8:	01320800 	teqeq	r2, r0, lsl #16
   122ec:	9c010000 	stcls	0, cr0, [r1], {-0}
   122f0:	00000963 	andeq	r0, r0, r3, ror #18
   122f4:	000dec19 	andeq	lr, sp, r9, lsl ip
   122f8:	6a310100 	bvs	c52700 <_Min_Stack_Size+0xc52500>
   122fc:	8c000003 	stchi	0, cr0, [r0], {3}
   12300:	19000015 	stmdbne	r0, {r0, r2, r4}
   12304:	00005fc5 	andeq	r5, r0, r5, asr #31
   12308:	09633201 	stmdbeq	r3!, {r0, r9, ip, sp}^
   1230c:	15c00000 	strbne	r0, [r0]
   12310:	af190000 	svcge	0x00190000
   12314:	0100005f 	qaddeq	r0, pc, r0	; <UNPREDICTABLE>
   12318:	00077b33 	andeq	r7, r7, r3, lsr fp
   1231c:	00161d00 	andseq	r1, r6, r0, lsl #26
   12320:	70661a00 	rsbvc	r1, r6, r0, lsl #20
   12324:	69340100 	ldmdbvs	r4!, {r8}
   12328:	7b000009 	blvc	12354 <_Min_Stack_Size+0x12154>
   1232c:	19000016 	stmdbne	r0, {r1, r2, r4}
   12330:	00005eaa 	andeq	r5, r0, sl, lsr #29
   12334:	098d3501 	stmibeq	sp, {r0, r8, sl, ip, sp}
   12338:	16990000 	ldrne	r0, [r9], r0
   1233c:	6e1b0000 	cdpvs	0, 1, cr0, cr11, cr0, {0}
   12340:	25380100 	ldrcs	r0, [r8, #-256]!	; 0xffffff00
   12344:	b9000000 	stmdblt	r0, {}	; <UNPREDICTABLE>
   12348:	1c000016 	stcne	0, cr0, [r0], {22}
   1234c:	00005e30 	andeq	r5, r0, r0, lsr lr
   12350:	081d6801 	ldmdaeq	sp, {r0, fp, sp, lr}
   12354:	13000011 	movwne	r0, #17
   12358:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
   1235c:	00005f53 	andeq	r5, r0, r3, asr pc
   12360:	00255101 	eoreq	r5, r5, r1, lsl #2
   12364:	17580000 	ldrbne	r0, [r8, -r0]
   12368:	881f0000 	ldmdahi	pc, {}	; <UNPREDICTABLE>
   1236c:	2008000d 	andcs	r0, r8, sp
   12370:	76025001 	strvc	r5, [r2], -r1
   12374:	51012000 	mrspl	r2, (UNDEF: 1)
   12378:	20007702 	andcs	r7, r0, r2, lsl #14
   1237c:	7a025201 	bvc	a6b88 <_Min_Stack_Size+0xa6988>
   12380:	53012000 	movwpl	r2, #4096	; 0x1000
   12384:	00003101 	andeq	r3, r0, r1, lsl #2
   12388:	0011201d 	andseq	r2, r1, sp, lsl r0
   1238c:	00094900 	andeq	r4, r9, r0, lsl #18
   12390:	5f531e00 	svcpl	0x00531e00
   12394:	66010000 	strvs	r0, [r1], -r0
   12398:	00000025 	andeq	r0, r0, r5, lsr #32
   1239c:	0000178e 	andeq	r1, r0, lr, lsl #15
   123a0:	000dfc1f 	andeq	pc, sp, pc, lsl ip	; <UNPREDICTABLE>
   123a4:	50012008 	andpl	r2, r1, r8
   123a8:	20007602 	andcs	r7, r0, r2, lsl #12
   123ac:	77025101 	strvc	r5, [r2, -r1, lsl #2]
   123b0:	52012000 	andpl	r2, r1, #0
   123b4:	20007402 	andcs	r7, r0, r2, lsl #8
   123b8:	31015301 	tstcc	r1, r1, lsl #6
   123bc:	c81f0000 	ldmdagt	pc, {}	; <UNPREDICTABLE>
   123c0:	2008000d 	andcs	r0, r8, sp
   123c4:	76025001 	strvc	r5, [r2], -r1
   123c8:	51012000 	mrspl	r2, (UNDEF: 1)
   123cc:	20007702 	andcs	r7, r0, r2, lsl #14
   123d0:	74035201 	strvc	r5, [r3], #-513	; 0xfffffdff
   123d4:	000000c3 	andeq	r0, r0, r3, asr #1
   123d8:	0781040d 	streq	r0, [r1, sp, lsl #8]
   123dc:	040d0000 	streq	r0, [sp], #-0
   123e0:	00000757 	andeq	r0, r0, r7, asr r7
   123e4:	00002513 	andeq	r2, r0, r3, lsl r5
   123e8:	00098d00 	andeq	r8, r9, r0, lsl #26
   123ec:	036a1400 	cmneq	sl, #0, 8
   123f0:	69140000 	ldmdbvs	r4, {}	; <UNPREDICTABLE>
   123f4:	14000009 	strne	r0, [r0], #-9
   123f8:	000004dc 	ldrdeq	r0, [r0], -ip
   123fc:	00002c14 	andeq	r2, r0, r4, lsl ip
   12400:	040d0000 	streq	r0, [sp], #-0
   12404:	0000096f 	andeq	r0, r0, pc, ror #18
   12408:	005ed318 	subseq	sp, lr, r8, lsl r3
   1240c:	256c0100 	strbcs	r0, [ip, #-256]!	; 0xffffff00
   12410:	4c000000 	stcmi	0, cr0, [r0], {-0}
   12414:	a808000e 	stmdage	r8, {r1, r2, r3}
   12418:	01000002 	tsteq	r0, r2
   1241c:	000b299c 	muleq	fp, ip, r9
   12420:	0dec1900 			; <UNDEFINED> instruction: 0x0dec1900
   12424:	6c010000 	stcvs	0, cr0, [r1], {-0}
   12428:	0000036a 	andeq	r0, r0, sl, ror #6
   1242c:	000017b9 			; <UNDEFINED> instruction: 0x000017b9
   12430:	005fc519 	subseq	ip, pc, r9, lsl r5	; <UNPREDICTABLE>
   12434:	636c0100 	cmnvs	ip, #0, 2
   12438:	d7000009 	strle	r0, [r0, -r9]
   1243c:	1a000017 	bne	124a0 <_Min_Stack_Size+0x122a0>
   12440:	01007066 	tsteq	r0, r6, rrx
   12444:	0009696c 	andeq	r6, r9, ip, ror #18
   12448:	0017f500 	andseq	pc, r7, r0, lsl #10
   1244c:	5eaa1900 	vfmapl.f16	s2, s20, s0	; <UNPREDICTABLE>
   12450:	6d010000 	stcvs	0, cr0, [r1, #-0]
   12454:	0000098d 	andeq	r0, r0, sp, lsl #19
   12458:	000018ad 	andeq	r1, r0, sp, lsr #17
   1245c:	0070611a 	rsbseq	r6, r0, sl, lsl r1
   12460:	0b296e01 	bleq	a6dc6c <_Min_Stack_Size+0xa6da6c>
   12464:	197b0000 	ldmdbne	fp!, {}^	; <UNPREDICTABLE>
   12468:	af210000 	svcge	0x00210000
   1246c:	0100005f 	qaddeq	r0, pc, r0	; <UNPREDICTABLE>
   12470:	00002571 	andeq	r2, r0, r1, ror r5
   12474:	5c910200 	lfmpl	f0, 4, [r1], {0}
   12478:	005f601e 	subseq	r6, pc, lr, lsl r0	; <UNPREDICTABLE>
   1247c:	6f720100 	svcvs	0x00720100
   12480:	a7000000 	strge	r0, [r0, -r0]
   12484:	1e000019 	mcrne	0, 0, r0, cr0, cr9, {0}
   12488:	00003a60 	andeq	r3, r0, r0, ror #20
   1248c:	00257301 	eoreq	r7, r5, r1, lsl #6
   12490:	19fd0000 	ldmibne	sp!, {}^	; <UNPREDICTABLE>
   12494:	6e1b0000 	cdpvs	0, 1, cr0, cr11, cr0, {0}
   12498:	25740100 	ldrbcs	r0, [r4, #-256]!	; 0xffffff00
   1249c:	40000000 	andmi	r0, r0, r0
   124a0:	1b00001a 	blne	12510 <_Min_Stack_Size+0x12310>
   124a4:	01007063 	tsteq	r0, r3, rrx
   124a8:	00011975 	andeq	r1, r1, r5, ror r9
   124ac:	001a6000 	andseq	r6, sl, r0
   124b0:	5f5a1e00 	svcpl	0x005a1e00
   124b4:	76010000 	strvc	r0, [r1], -r0
   124b8:	00000119 	andeq	r0, r0, r9, lsl r1
   124bc:	00001b48 	andeq	r1, r0, r8, asr #22
   124c0:	005f9d22 	subseq	r9, pc, r2, lsr #26
   124c4:	5ee70100 	cdppl	1, 14, cr0, cr7, cr0, {0}
   124c8:	22080010 	andcs	r0, r8, #16
   124cc:	00005fb6 			; <UNDEFINED> instruction: 0x00005fb6
   124d0:	0ef2b201 	cdpeq	2, 15, cr11, cr2, cr1, {0}
   124d4:	a8220800 	stmdage	r2!, {fp}
   124d8:	0100005f 	qaddeq	r0, pc, r0	; <UNPREDICTABLE>
   124dc:	000eecab 	andeq	lr, lr, fp, lsr #25
   124e0:	65682308 	strbvs	r2, [r8, #-776]!	; 0xfffffcf8
   124e4:	a0010078 	andge	r0, r1, r8, ror r0
   124e8:	08000eba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl, fp}
   124ec:	005e301c 	subseq	r3, lr, ip, lsl r0
   124f0:	1df70100 	ldfnee	f0, [r7]
   124f4:	00001138 	andeq	r1, r0, r8, lsr r1
   124f8:	00000aaa 	andeq	r0, r0, sl, lsr #21
   124fc:	0100701b 	tsteq	r0, fp, lsl r0
   12500:	000119db 	ldrdeq	r1, [r1], -fp
   12504:	001be100 	andseq	lr, fp, r0, lsl #2
   12508:	10542400 	subsne	r2, r4, r0, lsl #8
   1250c:	0b2f0800 	bleq	bd4514 <_Min_Stack_Size+0xbd4314>
   12510:	01200000 			; <UNDEFINED> instruction: 0x01200000
   12514:	00750250 	rsbseq	r0, r5, r0, asr r2
   12518:	01510120 	cmpeq	r1, r0, lsr #2
   1251c:	1d000030 	stcne	0, cr0, [r0, #-192]	; 0xffffff40
   12520:	00001198 	muleq	r0, r8, r1
   12524:	00000ae0 	andeq	r0, r0, r0, ror #21
   12528:	005f531e 	subseq	r5, pc, lr, lsl r3	; <UNPREDICTABLE>
   1252c:	25f40100 	ldrbcs	r0, [r4, #256]!	; 0x100
   12530:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   12534:	1f00001b 	svcne	0x0000001b
   12538:	08000f86 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, fp}
   1253c:	02500120 	subseq	r0, r0, #32, 2
   12540:	01200076 			; <UNDEFINED> instruction: 0x01200076
   12544:	00770251 	rsbseq	r0, r7, r1, asr r2
   12548:	02520120 	subseq	r0, r2, #32, 2
   1254c:	01200079 			; <UNDEFINED> instruction: 0x01200079
   12550:	00310153 	eorseq	r0, r1, r3, asr r1
   12554:	0f462500 	svceq	0x00462500
   12558:	08660800 	stmdaeq	r6!, {fp}^
   1255c:	0b0d0000 	bleq	352564 <_Min_Stack_Size+0x352364>
   12560:	01200000 			; <UNDEFINED> instruction: 0x01200000
   12564:	00760250 	rsbseq	r0, r6, r0, asr r2
   12568:	02510120 	subseq	r0, r1, #32, 2
   1256c:	01200074 			; <UNDEFINED> instruction: 0x01200074
   12570:	5c910252 	lfmpl	f0, 4, [r1], {82}	; 0x52
   12574:	02530120 	subseq	r0, r3, #32, 2
   12578:	02200077 	eoreq	r0, r0, #119	; 0x77
   1257c:	7802007d 	stmdavc	r2, {r0, r2, r3, r4, r5, r6}
   12580:	54260000 	strtpl	r0, [r6], #-0
   12584:	0208000f 	andeq	r0, r8, #15
   12588:	01200078 			; <UNDEFINED> instruction: 0x01200078
   1258c:	00760250 	rsbseq	r0, r6, r0, asr r2
   12590:	02510120 	subseq	r0, r1, #32, 2
   12594:	01200077 			; <UNDEFINED> instruction: 0x01200077
   12598:	00750252 	rsbseq	r0, r5, r2, asr r2
   1259c:	040d0000 	streq	r0, [sp], #-0
   125a0:	00000762 	andeq	r0, r0, r2, ror #14
   125a4:	005ec727 	subseq	ip, lr, r7, lsr #14
   125a8:	005ec700 	subseq	ip, lr, r0, lsl #14
   125ac:	00150b00 	andseq	r0, r5, r0, lsl #22
   125b0:	0000079d 	muleq	r0, sp, r7
   125b4:	3d490004 	stclcc	0, cr0, [r9, #-16]
   125b8:	01040000 	mrseq	r0, (UNDEF: 4)
   125bc:	000054bf 			; <UNDEFINED> instruction: 0x000054bf
   125c0:	005ff00c 	subseq	pc, pc, ip
   125c4:	005bde00 	subseq	sp, fp, r0, lsl #28
   125c8:	0010f400 	andseq	pc, r0, r0, lsl #8
   125cc:	00002408 	andeq	r2, r0, r8, lsl #8
   125d0:	00746e00 	rsbseq	r6, r4, r0, lsl #28
   125d4:	5fe60200 	svcpl	0x00e60200
   125d8:	95020000 	strls	r0, [r2, #-0]
   125dc:	00000030 	andeq	r0, r0, r0, lsr r0
   125e0:	69050403 	stmdbvs	r5, {r0, r1, sl}
   125e4:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
   125e8:	01ce0704 	biceq	r0, lr, r4, lsl #14
   125ec:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
   125f0:	0000b805 	andeq	fp, r0, r5, lsl #16
   125f4:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
   125f8:	000002f8 	strdeq	r0, [r0], -r8
   125fc:	92060104 	andls	r0, r6, #4, 2
   12600:	04000001 	streq	r0, [r0], #-1
   12604:	01900801 	orrseq	r0, r0, r1, lsl #16
   12608:	02040000 	andeq	r0, r4, #0
   1260c:	00009505 	andeq	r9, r0, r5, lsl #10
   12610:	07020400 	streq	r0, [r2, -r0, lsl #8]
   12614:	000001f2 	strdeq	r0, [r0], -r2
   12618:	bd050404 	cfstrslt	mvf0, [r5, #-16]
   1261c:	04000000 	streq	r0, [r0], #-0
   12620:	01c90704 	biceq	r0, r9, r4, lsl #14
   12624:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
   12628:	0001c407 	andeq	ip, r1, r7, lsl #8
   1262c:	57a40200 	strpl	r0, [r4, r0, lsl #4]!
   12630:	07030000 	streq	r0, [r3, -r0]
   12634:	00000030 	andeq	r0, r0, r0, lsr r0
   12638:	00579302 	subseq	r9, r7, r2, lsl #6
   1263c:	682c0400 	stmdavs	ip!, {sl}
   12640:	02000000 	andeq	r0, r0, #0
   12644:	0000587d 	andeq	r5, r0, sp, ror r8
   12648:	00687204 	rsbeq	r7, r8, r4, lsl #4
   1264c:	60050000 	andvs	r0, r5, r0
   12650:	02000057 	andeq	r0, r0, #87	; 0x57
   12654:	00370165 	eorseq	r0, r7, r5, ror #2
   12658:	04060000 	streq	r0, [r6], #-0
   1265c:	00c9a604 	sbceq	sl, r9, r4, lsl #12
   12660:	5a070000 	bpl	1d2668 <_Min_Stack_Size+0x1d2468>
   12664:	04000057 	streq	r0, [r0], #-87	; 0xffffffa9
   12668:	00009ea8 	andeq	r9, r0, r8, lsr #29
   1266c:	56a80700 	strtpl	r0, [r8], r0, lsl #14
   12670:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
   12674:	000000c9 	andeq	r0, r0, r9, asr #1
   12678:	00530800 	subseq	r0, r3, r0, lsl #16
   1267c:	00d90000 	sbcseq	r0, r9, r0
   12680:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
   12684:	03000000 	movweq	r0, #0
   12688:	07040400 	streq	r0, [r4, -r0, lsl #8]
   1268c:	00000059 	andeq	r0, r0, r9, asr r0
   12690:	a304080a 	movwge	r0, #18442	; 0x480a
   12694:	00000101 	andeq	r0, r0, r1, lsl #2
   12698:	0058670b 	subseq	r6, r8, fp, lsl #14
   1269c:	30a50400 	adccc	r0, r5, r0, lsl #8
   126a0:	00000000 	andeq	r0, r0, r0
   126a4:	00586f0b 	subseq	r6, r8, fp, lsl #30
   126a8:	aaaa0400 	bge	fea936b0 <BootRAM+0xda03e51>
   126ac:	04000000 	streq	r0, [r0], #-0
   126b0:	58060200 	stmdapl	r6, {r9}
   126b4:	ab040000 	blge	1126bc <_Min_Stack_Size+0x1124bc>
   126b8:	000000e0 	andeq	r0, r0, r0, ror #1
   126bc:	00567902 	subseq	r7, r6, r2, lsl #18
   126c0:	7daf0400 	cfstrsvc	mvf0, [pc]	; 126c8 <_Min_Stack_Size+0x124c8>
   126c4:	0c000000 	stceq	0, cr0, [r0], {-0}
   126c8:	1f040d04 	svcne	0x00040d04
   126cc:	04000001 	streq	r0, [r0], #-1
   126d0:	01990801 	orrseq	r0, r9, r1, lsl #16
   126d4:	b9020000 	stmdblt	r2, {}	; <UNPREDICTABLE>
   126d8:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   126dc:	00006f16 	andeq	r6, r0, r6, lsl pc
   126e0:	56820e00 	strpl	r0, [r2], r0, lsl #28
   126e4:	05180000 	ldreq	r0, [r8, #-0]
   126e8:	0001842d 	andeq	r8, r1, sp, lsr #8
   126ec:	58270b00 	stmdapl	r7!, {r8, r9, fp}
   126f0:	2f050000 	svccs	0x00050000
   126f4:	00000184 	andeq	r0, r0, r4, lsl #3
   126f8:	6b5f0f00 	blvs	17d6300 <_Min_Stack_Size+0x17d6100>
   126fc:	30300500 	eorscc	r0, r0, r0, lsl #10
   12700:	04000000 	streq	r0, [r0], #-0
   12704:	0058590b 	subseq	r5, r8, fp, lsl #18
   12708:	30300500 	eorscc	r0, r0, r0, lsl #10
   1270c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   12710:	0056730b 	subseq	r7, r6, fp, lsl #6
   12714:	30300500 	eorscc	r0, r0, r0, lsl #10
   12718:	0c000000 	stceq	0, cr0, [r0], {-0}
   1271c:	0058d40b 	subseq	sp, r8, fp, lsl #8
   12720:	30300500 	eorscc	r0, r0, r0, lsl #10
   12724:	10000000 	andne	r0, r0, r0
   12728:	00785f0f 	rsbseq	r5, r8, pc, lsl #30
   1272c:	018a3105 	orreq	r3, sl, r5, lsl #2
   12730:	00140000 	andseq	r0, r4, r0
   12734:	0131040d 	teqeq	r1, sp, lsl #8
   12738:	26080000 	strcs	r0, [r8], -r0
   1273c:	9a000001 	bls	12748 <_Min_Stack_Size+0x12548>
   12740:	09000001 	stmdbeq	r0, {r0}
   12744:	000000d9 	ldrdeq	r0, [r0], -r9
   12748:	a30e0000 	movwge	r0, #57344	; 0xe000
   1274c:	24000056 	strcs	r0, [r0], #-86	; 0xffffffaa
   12750:	02133505 	andseq	r3, r3, #20971520	; 0x1400000
   12754:	070b0000 	streq	r0, [fp, -r0]
   12758:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   1275c:	00003037 	andeq	r3, r0, r7, lsr r0
   12760:	8c0b0000 	stchi	0, cr0, [fp], {-0}
   12764:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   12768:	00003038 	andeq	r3, r0, r8, lsr r0
   1276c:	160b0400 	strne	r0, [fp], -r0, lsl #8
   12770:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   12774:	00003039 	andeq	r3, r0, r9, lsr r0
   12778:	310b0800 	tstcc	fp, r0, lsl #16
   1277c:	05000059 	streq	r0, [r0, #-89]	; 0xffffffa7
   12780:	0000303a 	andeq	r3, r0, sl, lsr r0
   12784:	7f0b0c00 	svcvc	0x000b0c00
   12788:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
   1278c:	0000303b 	andeq	r3, r0, fp, lsr r0
   12790:	6f0b1000 	svcvs	0x000b1000
   12794:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
   12798:	0000303c 	andeq	r3, r0, ip, lsr r0
   1279c:	d90b1400 	stmdble	fp, {sl, ip}
   127a0:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   127a4:	0000303d 	andeq	r3, r0, sp, lsr r0
   127a8:	ee0b1800 	cdp	8, 0, cr1, cr11, cr0, {0}
   127ac:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
   127b0:	0000303e 	andeq	r3, r0, lr, lsr r0
   127b4:	fd0b1c00 	stc2	12, cr1, [fp, #-0]
   127b8:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   127bc:	0000303f 	andeq	r3, r0, pc, lsr r0
   127c0:	0e002000 	cdpeq	0, 0, cr2, cr0, cr0, {0}
   127c4:	000057f8 	strdeq	r5, [r0], -r8
   127c8:	38730508 	ldmdacc	r3!, {r3, r8, sl}^
   127cc:	0b000002 	bleq	127dc <_Min_Stack_Size+0x125dc>
   127d0:	00003a5f 	andeq	r3, r0, pc, asr sl
   127d4:	02387405 	eorseq	r7, r8, #83886080	; 0x5000000
   127d8:	0b000000 	bleq	127e0 <_Min_Stack_Size+0x125e0>
   127dc:	00005da3 	andeq	r5, r0, r3, lsr #27
   127e0:	00307505 	eorseq	r7, r0, r5, lsl #10
   127e4:	00040000 	andeq	r0, r4, r0
   127e8:	0053040d 	subseq	r0, r3, sp, lsl #8
   127ec:	ad100000 	ldcge	0, cr0, [r0, #-0]
   127f0:	60000058 	andvs	r0, r0, r8, asr r0
   127f4:	6a017205 	bvs	6f010 <_Min_Stack_Size+0x6ee10>
   127f8:	11000003 	tstne	r0, r3
   127fc:	00005885 	andeq	r5, r0, r5, lsl #17
   12800:	30017605 	andcc	r7, r1, r5, lsl #12
   12804:	00000000 	andeq	r0, r0, r0
   12808:	005bc611 	subseq	ip, fp, r1, lsl r6
   1280c:	017b0500 	cmneq	fp, r0, lsl #10
   12810:	00000592 	muleq	r0, r2, r5
   12814:	5bd61104 	blpl	ff596c2c <BootRAM+0xe5073cd>
   12818:	7b050000 	blvc	152820 <_Min_Stack_Size+0x152620>
   1281c:	00059201 	andeq	r9, r5, r1, lsl #4
   12820:	91110800 	tstls	r1, r0, lsl #16
   12824:	0500005c 	streq	r0, [r0, #-92]	; 0xffffffa4
   12828:	0592017b 	ldreq	r0, [r2, #379]	; 0x17b
   1282c:	110c0000 	mrsne	r0, (UNDEF: 12)
   12830:	0000583a 	andeq	r5, r0, sl, lsr r8
   12834:	30017d05 	andcc	r7, r1, r5, lsl #26
   12838:	10000000 	andne	r0, r0, r0
   1283c:	0055bb11 	subseq	fp, r5, r1, lsl fp
   12840:	017f0500 	cmneq	pc, r0, lsl #10
   12844:	00000119 	andeq	r0, r0, r9, lsl r1
   12848:	57881114 	usada8pl	r8, r4, r1, r1
   1284c:	81050000 	mrshi	r0, (UNDEF: 5)
   12850:	00003001 	andeq	r3, r0, r1
   12854:	c0111800 	andsgt	r1, r1, r0, lsl #16
   12858:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   1285c:	00300183 	eorseq	r0, r0, r3, lsl #3
   12860:	111c0000 	tstne	ip, r0
   12864:	0000583f 	andeq	r5, r0, pc, lsr r8
   12868:	dc018405 	cfstrsle	mvf8, [r1], {5}
   1286c:	20000004 	andcs	r0, r0, r4
   12870:	706d5f12 	rsbvc	r5, sp, r2, lsl pc
   12874:	01860500 	orreq	r0, r6, r0, lsl #10
   12878:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1287c:	584f1124 	stmdapl	pc, {r2, r5, r8, ip}^	; <UNPREDICTABLE>
   12880:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
   12884:	0006f001 	andeq	pc, r6, r1
   12888:	8a112800 	bhi	45c890 <_Min_Stack_Size+0x45c690>
   1288c:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   12890:	0030018a 	eorseq	r0, r0, sl, lsl #3
   12894:	112c0000 			; <UNDEFINED> instruction: 0x112c0000
   12898:	000056d2 	ldrdeq	r5, [r0], -r2
   1289c:	30018d05 	andcc	r8, r1, r5, lsl #26
   128a0:	30000000 	andcc	r0, r0, r0
   128a4:	00564c11 	subseq	r4, r6, r1, lsl ip
   128a8:	018e0500 	orreq	r0, lr, r0, lsl #10
   128ac:	00000119 	andeq	r0, r0, r9, lsl r1
   128b0:	56da1134 			; <UNDEFINED> instruction: 0x56da1134
   128b4:	90050000 	andls	r0, r5, r0
   128b8:	0006f601 	andeq	pc, r6, r1, lsl #12
   128bc:	08113800 	ldmdaeq	r1, {fp, ip, sp}
   128c0:	05000059 	streq	r0, [r0, #-89]	; 0xffffffa7
   128c4:	06fc0191 	usateq	r0, #28, r1, lsl #3
   128c8:	113c0000 	teqne	ip, r0
   128cc:	00005745 	andeq	r5, r0, r5, asr #14
   128d0:	19019205 	stmdbne	r1, {r0, r2, r9, ip, pc}
   128d4:	40000001 	andmi	r0, r0, r1
   128d8:	0058ed11 	subseq	lr, r8, r1, lsl sp
   128dc:	01950500 	orrseq	r0, r5, r0, lsl #10
   128e0:	0000070d 	andeq	r0, r0, sp, lsl #14
   128e4:	562d1144 	strtpl	r1, [sp], -r4, asr #2
   128e8:	9d050000 	stcls	0, cr0, [r5, #-0]
   128ec:	00055701 	andeq	r5, r5, r1, lsl #14
   128f0:	20114800 	andscs	r4, r1, r0, lsl #16
   128f4:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   128f8:	0592019e 	ldreq	r0, [r2, #414]	; 0x19e
   128fc:	11540000 	cmpne	r4, r0
   12900:	00005779 	andeq	r5, r0, r9, ror r7
   12904:	19019f05 	stmdbne	r1, {r0, r2, r8, r9, sl, fp, ip, pc}
   12908:	58000007 	stmdapl	r0, {r0, r1, r2}
   1290c:	0055d511 	subseq	sp, r5, r1, lsl r5
   12910:	01a00500 	lsleq	r0, r0, #10
   12914:	00000119 	andeq	r0, r0, r9, lsl r1
   12918:	040d005c 	streq	r0, [sp], #-92	; 0xffffffa4
   1291c:	0000023e 	andeq	r0, r0, lr, lsr r2
   12920:	0058110e 	subseq	r1, r8, lr, lsl #2
   12924:	b3056800 	movwlt	r6, #22528	; 0x5800
   12928:	0000049a 	muleq	r0, sl, r4
   1292c:	00705f0f 	rsbseq	r5, r0, pc, lsl #30
   12930:	0238b405 	eorseq	fp, r8, #83886080	; 0x5000000
   12934:	0f000000 	svceq	0x00000000
   12938:	0500725f 	streq	r7, [r0, #-607]	; 0xfffffda1
   1293c:	000030b5 	strheq	r3, [r0], -r5
   12940:	5f0f0400 	svcpl	0x000f0400
   12944:	b6050077 			; <UNDEFINED> instruction: 0xb6050077
   12948:	00000030 	andeq	r0, r0, r0, lsr r0
   1294c:	563c0b08 	ldrtpl	r0, [ip], -r8, lsl #22
   12950:	b7050000 	strlt	r0, [r5, -r0]
   12954:	0000005a 	andeq	r0, r0, sl, asr r0
   12958:	58ce0b0c 	stmiapl	lr, {r2, r3, r8, r9, fp}^
   1295c:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
   12960:	0000005a 	andeq	r0, r0, sl, asr r0
   12964:	625f0f0e 	subsvs	r0, pc, #14, 30	; 0x38
   12968:	b9050066 	stmdblt	r5, {r1, r2, r5, r6}
   1296c:	00000213 	andeq	r0, r0, r3, lsl r2
   12970:	55e10b10 	strbpl	r0, [r1, #2832]!	; 0xb10
   12974:	ba050000 	blt	15297c <_Min_Stack_Size+0x15277c>
   12978:	00000030 	andeq	r0, r0, r0, lsr r0
   1297c:	0deb0b18 			; <UNDEFINED> instruction: 0x0deb0b18
   12980:	bd050000 	stclt	0, cr0, [r5, #-0]
   12984:	0000036a 	andeq	r0, r0, sl, ror #6
   12988:	56250b1c 			; <UNDEFINED> instruction: 0x56250b1c
   1298c:	c1050000 	mrsgt	r0, (UNDEF: 5)
   12990:	00000117 	andeq	r0, r0, r7, lsl r1
   12994:	40610b20 	rsbmi	r0, r1, r0, lsr #22
   12998:	c3050000 	movwgt	r0, #20480	; 0x5000
   1299c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
   129a0:	3fbc0b24 	svccc	0x00bc0b24
   129a4:	c5050000 	strgt	r0, [r5, #-0]
   129a8:	000004e7 	andeq	r0, r0, r7, ror #9
   129ac:	58770b28 	ldmdapl	r7!, {r3, r5, r8, r9, fp}^
   129b0:	c8050000 	stmdagt	r5, {}	; <UNPREDICTABLE>
   129b4:	0000050b 	andeq	r0, r0, fp, lsl #10
   129b8:	59170b2c 	ldmdbpl	r7, {r2, r3, r5, r8, r9, fp}
   129bc:	c9050000 	stmdbgt	r5, {}	; <UNPREDICTABLE>
   129c0:	00000525 	andeq	r0, r0, r5, lsr #10
   129c4:	755f0f30 	ldrbvc	r0, [pc, #-3888]	; 11a9c <_Min_Stack_Size+0x1189c>
   129c8:	cc050062 	stcgt	0, cr0, [r5], {98}	; 0x62
   129cc:	00000213 	andeq	r0, r0, r3, lsl r2
   129d0:	755f0f34 	ldrbvc	r0, [pc, #-3892]	; 11aa4 <_Min_Stack_Size+0x118a4>
   129d4:	cd050070 	stcgt	0, cr0, [r5, #-448]	; 0xfffffe40
   129d8:	00000238 	andeq	r0, r0, r8, lsr r2
   129dc:	755f0f3c 	ldrbvc	r0, [pc, #-3900]	; 11aa8 <_Min_Stack_Size+0x118a8>
   129e0:	ce050072 	mcrgt	0, 0, r0, cr5, cr2, {3}
   129e4:	00000030 	andeq	r0, r0, r0, lsr r0
   129e8:	56100b40 	ldrpl	r0, [r0], -r0, asr #22
   129ec:	d1050000 	mrsle	r0, (UNDEF: 5)
   129f0:	0000052b 	andeq	r0, r0, fp, lsr #10
   129f4:	58f70b44 	ldmpl	r7!, {r2, r6, r8, r9, fp}^
   129f8:	d2050000 	andle	r0, r5, #0
   129fc:	0000053b 	andeq	r0, r0, fp, lsr r5
   12a00:	6c5f0f47 	mrrcvs	15, 4, r0, pc, cr7	; <UNPREDICTABLE>
   12a04:	d5050062 	strle	r0, [r5, #-98]	; 0xffffff9e
   12a08:	00000213 	andeq	r0, r0, r3, lsl r2
   12a0c:	56430b48 	strbpl	r0, [r3], -r8, asr #22
   12a10:	d8050000 	stmdale	r5, {}	; <UNPREDICTABLE>
   12a14:	00000030 	andeq	r0, r0, r0, lsr r0
   12a18:	61250b50 			; <UNDEFINED> instruction: 0x61250b50
   12a1c:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
   12a20:	00000088 	andeq	r0, r0, r8, lsl #1
   12a24:	3c010b54 			; <UNDEFINED> instruction: 0x3c010b54
   12a28:	e0050000 	and	r0, r5, r0
   12a2c:	0000010c 	andeq	r0, r0, ip, lsl #2
   12a30:	58190b58 	ldmdapl	r9, {r3, r4, r6, r8, r9, fp}
   12a34:	e2050000 	and	r0, r5, #0
   12a38:	00000101 	andeq	r0, r0, r1, lsl #2
   12a3c:	57670b5c 			; <UNDEFINED> instruction: 0x57670b5c
   12a40:	e3050000 	movw	r0, #20480	; 0x5000
   12a44:	00000030 	andeq	r0, r0, r0, lsr r0
   12a48:	30130064 	andscc	r0, r3, r4, rrx
   12a4c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
   12a50:	14000004 	strne	r0, [r0], #-4
   12a54:	0000036a 	andeq	r0, r0, sl, ror #6
   12a58:	00011714 	andeq	r1, r1, r4, lsl r7
   12a5c:	01191400 	tsteq	r9, r0, lsl #8
   12a60:	30140000 	andscc	r0, r4, r0
   12a64:	00000000 	andeq	r0, r0, r0
   12a68:	049a040d 	ldreq	r0, [sl], #1037	; 0x40d
   12a6c:	30130000 	andscc	r0, r3, r0
   12a70:	dc000000 	stcle	0, cr0, [r0], {-0}
   12a74:	14000004 	strne	r0, [r0], #-4
   12a78:	0000036a 	andeq	r0, r0, sl, ror #6
   12a7c:	00011714 	andeq	r1, r1, r4, lsl r7
   12a80:	04dc1400 	ldrbeq	r1, [ip], #1024	; 0x400
   12a84:	30140000 	andscc	r0, r4, r0
   12a88:	00000000 	andeq	r0, r0, r0
   12a8c:	04e2040d 	strbteq	r0, [r2], #1037	; 0x40d
   12a90:	1f150000 	svcne	0x00150000
   12a94:	0d000001 	stceq	0, cr0, [r0, #-4]
   12a98:	0004be04 	andeq	fp, r4, r4, lsl #28
   12a9c:	00931300 	addseq	r1, r3, r0, lsl #6
   12aa0:	050b0000 	streq	r0, [fp, #-0]
   12aa4:	6a140000 	bvs	512aac <_Min_Stack_Size+0x5128ac>
   12aa8:	14000003 	strne	r0, [r0], #-3
   12aac:	00000117 	andeq	r0, r0, r7, lsl r1
   12ab0:	00009314 	andeq	r9, r0, r4, lsl r3
   12ab4:	00301400 	eorseq	r1, r0, r0, lsl #8
   12ab8:	0d000000 	stceq	0, cr0, [r0, #-0]
   12abc:	0004ed04 	andeq	lr, r4, r4, lsl #26
   12ac0:	00301300 	eorseq	r1, r0, r0, lsl #6
   12ac4:	05250000 	streq	r0, [r5, #-0]!
   12ac8:	6a140000 	bvs	512ad0 <_Min_Stack_Size+0x5128d0>
   12acc:	14000003 	strne	r0, [r0], #-3
   12ad0:	00000117 	andeq	r0, r0, r7, lsl r1
   12ad4:	11040d00 	tstne	r4, r0, lsl #26
   12ad8:	08000005 	stmdaeq	r0, {r0, r2}
   12adc:	00000053 	andeq	r0, r0, r3, asr r0
   12ae0:	0000053b 	andeq	r0, r0, fp, lsr r5
   12ae4:	0000d909 	andeq	sp, r0, r9, lsl #18
   12ae8:	08000200 	stmdaeq	r0, {r9}
   12aec:	00000053 	andeq	r0, r0, r3, asr r0
   12af0:	0000054b 	andeq	r0, r0, fp, asr #10
   12af4:	0000d909 	andeq	sp, r0, r9, lsl #18
   12af8:	05000000 	streq	r0, [r0, #-0]
   12afc:	000057ff 	strdeq	r5, [r0], -pc	; <UNPREDICTABLE>
   12b00:	70011d05 	andvc	r1, r1, r5, lsl #26
   12b04:	10000003 	andne	r0, r0, r3
   12b08:	000060e4 	andeq	r6, r0, r4, ror #1
   12b0c:	0121050c 			; <UNDEFINED> instruction: 0x0121050c
   12b10:	0000058c 	andeq	r0, r0, ip, lsl #11
   12b14:	00582711 	subseq	r2, r8, r1, lsl r7
   12b18:	01230500 			; <UNDEFINED> instruction: 0x01230500
   12b1c:	0000058c 	andeq	r0, r0, ip, lsl #11
   12b20:	56df1100 	ldrbpl	r1, [pc], r0, lsl #2
   12b24:	24050000 	strcs	r0, [r5], #-0
   12b28:	00003001 	andeq	r3, r0, r1
   12b2c:	e8110400 	ldmda	r1, {sl}
   12b30:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
   12b34:	05920125 	ldreq	r0, [r2, #293]	; 0x125
   12b38:	00080000 	andeq	r0, r8, r0
   12b3c:	0557040d 	ldrbeq	r0, [r7, #-1037]	; 0xfffffbf3
   12b40:	040d0000 	streq	r0, [sp], #-0
   12b44:	0000054b 	andeq	r0, r0, fp, asr #10
   12b48:	0055b310 	subseq	fp, r5, r0, lsl r3
   12b4c:	3d051800 	stccc	8, cr1, [r5, #-0]
   12b50:	0005da01 	andeq	sp, r5, r1, lsl #20
   12b54:	58611100 	stmdapl	r1!, {r8, ip}^
   12b58:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
   12b5c:	0005da01 	andeq	sp, r5, r1, lsl #20
   12b60:	95110000 	ldrls	r0, [r1, #-0]
   12b64:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   12b68:	05da013f 	ldrbeq	r0, [sl, #319]	; 0x13f
   12b6c:	11060000 	mrsne	r0, (UNDEF: 6)
   12b70:	000058b4 			; <UNDEFINED> instruction: 0x000058b4
   12b74:	61014005 	tstvs	r1, r5
   12b78:	0c000000 	stceq	0, cr0, [r0], {-0}
   12b7c:	00582211 	subseq	r2, r8, r1, lsl r2
   12b80:	01430500 	cmpeq	r3, r0, lsl #10
   12b84:	00000076 	andeq	r0, r0, r6, ror r0
   12b88:	61080010 	tstvs	r8, r0, lsl r0
   12b8c:	ea000000 	b	12b94 <_Min_Stack_Size+0x12994>
   12b90:	09000005 	stmdbeq	r0, {r0, r2}
   12b94:	000000d9 	ldrdeq	r0, [r0], -r9
   12b98:	35100002 	ldrcc	r0, [r0, #-2]
   12b9c:	10000056 	andne	r0, r0, r6, asr r0
   12ba0:	2c015605 	stccs	6, cr5, [r1], {5}
   12ba4:	11000006 	tstne	r0, r6
   12ba8:	00005752 	andeq	r5, r0, r2, asr r7
   12bac:	84015905 	strhi	r5, [r1], #-2309	; 0xfffff6fb
   12bb0:	00000001 	andeq	r0, r0, r1
   12bb4:	00569911 	subseq	r9, r6, r1, lsl r9
   12bb8:	015a0500 	cmpeq	sl, r0, lsl #10
   12bbc:	00000030 	andeq	r0, r0, r0, lsr r0
   12bc0:	592c1104 	stmdbpl	ip!, {r2, r8, ip}
   12bc4:	5b050000 	blpl	152bcc <_Min_Stack_Size+0x1529cc>
   12bc8:	00018401 	andeq	r8, r1, r1, lsl #8
   12bcc:	9a110800 	bls	454bd4 <_Min_Stack_Size+0x4549d4>
   12bd0:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
   12bd4:	062c015c 			; <UNDEFINED> instruction: 0x062c015c
   12bd8:	000c0000 	andeq	r0, ip, r0
   12bdc:	0184040d 	orreq	r0, r4, sp, lsl #8
   12be0:	a8100000 	ldmdage	r0, {}	; <UNPREDICTABLE>
   12be4:	50000058 	andpl	r0, r0, r8, asr r0
   12be8:	cf016005 	svcgt	0x00016005
   12bec:	11000006 	tstne	r0, r6
   12bf0:	0000589b 	muleq	r0, fp, r8
   12bf4:	19016305 	stmdbne	r1, {r0, r2, r8, r9, sp, lr}
   12bf8:	00000001 	andeq	r0, r0, r1
   12bfc:	00582d11 	subseq	r2, r8, r1, lsl sp
   12c00:	01640500 	cmneq	r4, r0, lsl #10
   12c04:	00000101 	andeq	r0, r0, r1, lsl #2
   12c08:	55f91104 	ldrbpl	r1, [r9, #260]!	; 0x104
   12c0c:	65050000 	strvs	r0, [r5, #-0]
   12c10:	00010101 	andeq	r0, r1, r1, lsl #2
   12c14:	1e110c00 	cdpne	12, 1, cr0, cr1, cr0, {0}
   12c18:	05000059 	streq	r0, [r0, #-89]	; 0xffffffa7
   12c1c:	01010166 	tsteq	r1, r6, ror #2
   12c20:	11140000 	tstne	r4, r0
   12c24:	000058e3 	andeq	r5, r0, r3, ror #17
   12c28:	cf016705 	svcgt	0x00016705
   12c2c:	1c000006 	stcne	0, cr0, [r0], {6}
   12c30:	0058c111 	subseq	ip, r8, r1, lsl r1
   12c34:	01680500 	cmneq	r8, r0, lsl #10
   12c38:	00000030 	andeq	r0, r0, r0, lsr r0
   12c3c:	56651124 	strbtpl	r1, [r5], -r4, lsr #2
   12c40:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
   12c44:	00010101 	andeq	r0, r1, r1, lsl #2
   12c48:	ea112800 	b	45cc50 <_Min_Stack_Size+0x45ca50>
   12c4c:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
   12c50:	0101016a 	tsteq	r1, sl, ror #2
   12c54:	11300000 	teqne	r0, r0
   12c58:	00005654 	andeq	r5, r0, r4, asr r6
   12c5c:	01016b05 	tsteq	r1, r5, lsl #22
   12c60:	38000001 	stmdacc	r0, {r0}
   12c64:	0055c611 	subseq	ip, r5, r1, lsl r6
   12c68:	016c0500 	cmneq	ip, r0, lsl #10
   12c6c:	00000101 	andeq	r0, r0, r1, lsl #2
   12c70:	56af1140 	strtpl	r1, [pc], r0, asr #2
   12c74:	6d050000 	stcvs	0, cr0, [r5, #-0]
   12c78:	00010101 	andeq	r0, r1, r1, lsl #2
   12c7c:	08004800 	stmdaeq	r0, {fp, lr}
   12c80:	0000011f 	andeq	r0, r0, pc, lsl r1
   12c84:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12c88:	0000d909 	andeq	sp, r0, r9, lsl #18
   12c8c:	0d000700 	stceq	7, cr0, [r0, #-0]
   12c90:	0005ea04 	andeq	lr, r5, r4, lsl #20
   12c94:	06f01600 	ldrbteq	r1, [r0], r0, lsl #12
   12c98:	6a140000 	bvs	512ca0 <_Min_Stack_Size+0x512aa0>
   12c9c:	00000003 	andeq	r0, r0, r3
   12ca0:	06e5040d 	strbteq	r0, [r5], sp, lsl #8
   12ca4:	040d0000 	streq	r0, [sp], #-0
   12ca8:	00000598 	muleq	r0, r8, r5
   12cac:	019a040d 	orrseq	r0, sl, sp, lsl #8
   12cb0:	0d160000 	ldceq	0, cr0, [r6, #-0]
   12cb4:	14000007 	strne	r0, [r0], #-7
   12cb8:	00000030 	andeq	r0, r0, r0, lsr r0
   12cbc:	13040d00 	movwne	r0, #19712	; 0x4d00
   12cc0:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
   12cc4:	00070204 	andeq	r0, r7, r4, lsl #4
   12cc8:	32040d00 	andcc	r0, r4, #0, 26
   12ccc:	17000006 	strne	r0, [r0, -r6]
   12cd0:	00005da9 	andeq	r5, r0, r9, lsr #27
   12cd4:	01179906 	tsteq	r7, r6, lsl #18
   12cd8:	10f40000 	rscsne	r0, r4, r0
   12cdc:	00240800 	eoreq	r0, r4, r0, lsl #16
   12ce0:	9c010000 	stcls	0, cr0, [r1], {-0}
   12ce4:	0000078a 	andeq	r0, r0, sl, lsl #15
   12ce8:	72747018 	rsbsvc	r7, r4, #24
   12cec:	6a320100 	bvs	c930f4 <_Min_Stack_Size+0xc92ef4>
   12cf0:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
   12cf4:	1900001c 	stmdbne	r0, {r2, r3, r4}
   12cf8:	00005fe1 	andeq	r5, r0, r1, ror #31
   12cfc:	00253201 	eoreq	r3, r5, r1, lsl #4
   12d00:	1c4a0000 	marne	acc0, r0, sl
   12d04:	721a0000 	andsvc	r0, sl, #0
   12d08:	01007465 	tsteq	r0, r5, ror #8
   12d0c:	00011936 	andeq	r1, r1, r6, lsr r9
   12d10:	1b500100 	blne	1413118 <_Min_Stack_Size+0x1412f18>
   12d14:	0000601c 	andeq	r6, r0, ip, lsl r0
   12d18:	01173701 	tsteq	r7, r1, lsl #14
   12d1c:	07780000 	ldrbeq	r0, [r8, -r0]!
   12d20:	25140000 	ldrcs	r0, [r4, #-0]
   12d24:	00000000 	andeq	r0, r0, r0
   12d28:	0011041c 	andseq	r0, r1, ip, lsl r4
   12d2c:	00079508 	andeq	r9, r7, r8, lsl #10
   12d30:	50011d00 	andpl	r1, r1, r0, lsl #26
   12d34:	5101f303 	tstpl	r1, r3, lsl #6	; <UNPREDICTABLE>
   12d38:	861e0000 	ldrhi	r0, [lr], -r0
   12d3c:	01000058 	qaddeq	r0, r8, r0
   12d40:	00003018 	andeq	r3, r0, r8, lsl r0
   12d44:	601c1f00 	andsvs	r1, ip, r0, lsl #30
   12d48:	601c0000 	andsvs	r0, ip, r0
   12d4c:	37010000 	strcc	r0, [r1, -r0]
   12d50:	00012e00 	andeq	r2, r1, r0, lsl #28
   12d54:	e9000400 	stmdb	r0, {sl}
   12d58:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
   12d5c:	0054bf01 	subseq	fp, r4, r1, lsl #30
   12d60:	60270c00 	eorvs	r0, r7, r0, lsl #24
   12d64:	5a7a0000 	bpl	1e92d6c <_Min_Stack_Size+0x1e92b6c>
   12d68:	11180000 	tstne	r8, r0
   12d6c:	008c0800 	addeq	r0, ip, r0, lsl #16
   12d70:	75b90000 	ldrvc	r0, [r9, #0]!
   12d74:	04020000 	streq	r0, [r2], #-0
   12d78:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   12d7c:	5cec0300 	stclpl	3, cr0, [ip]
   12d80:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
   12d84:	00000037 	andeq	r0, r0, r7, lsr r0
   12d88:	ce070404 	cdpgt	4, 0, cr0, cr7, cr4, {0}
   12d8c:	04000001 	streq	r0, [r0], #-1
   12d90:	00b80508 	adcseq	r0, r8, r8, lsl #10
   12d94:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
   12d98:	0002f804 	andeq	pc, r2, r4, lsl #16
   12d9c:	06010400 	streq	r0, [r1], -r0, lsl #8
   12da0:	00000192 	muleq	r0, r2, r1
   12da4:	90080104 	andls	r0, r8, r4, lsl #2
   12da8:	04000001 	streq	r0, [r0], #-1
   12dac:	00950502 	addseq	r0, r5, r2, lsl #10
   12db0:	02040000 	andeq	r0, r4, #0
   12db4:	0001f207 	andeq	pc, r1, r7, lsl #4
   12db8:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
   12dbc:	000000bd 	strheq	r0, [r0], -sp
   12dc0:	c9070404 	stmdbgt	r7, {r2, sl}
   12dc4:	04000001 	streq	r0, [r0], #-1
   12dc8:	01c40708 	biceq	r0, r4, r8, lsl #14
   12dcc:	04040000 	streq	r0, [r4], #-0
   12dd0:	00005907 	andeq	r5, r0, r7, lsl #18
   12dd4:	04040500 	streq	r0, [r4], #-1280	; 0xfffffb00
   12dd8:	01990801 	orrseq	r0, r9, r1, lsl #16
   12ddc:	c7060000 	strgt	r0, [r6, -r0]
   12de0:	0300005e 	movweq	r0, #94	; 0x5e
   12de4:	00008415 	andeq	r8, r0, r5, lsl r4
   12de8:	00111800 	andseq	r1, r1, r0, lsl #16
   12dec:	00008c08 	andeq	r8, r0, r8, lsl #24
   12df0:	199c0100 	ldmibne	ip, {r8}
   12df4:	07000001 	streq	r0, [r0, -r1]
   12df8:	00006062 	andeq	r6, r0, r2, rrx
   12dfc:	01194801 	tsteq	r9, r1, lsl #16
   12e00:	1c6b0000 	stclne	0, cr0, [fp], #-0
   12e04:	63080000 	movwvs	r0, #32768	; 0x8000
   12e08:	25480100 	strbcs	r0, [r8, #-256]	; 0xffffff00
   12e0c:	a5000000 	strge	r0, [r0, #-0]
   12e10:	0700001c 	smladeq	r0, ip, r0, r0
   12e14:	00004038 	andeq	r4, r0, r8, lsr r0
   12e18:	002c4801 	eoreq	r4, ip, r1, lsl #16
   12e1c:	1cf80000 	ldclne	0, cr0, [r8]
   12e20:	73090000 	movwvc	r0, #36864	; 0x9000
   12e24:	01006372 	tsteq	r0, r2, ror r3
   12e28:	0001204d 	andeq	r2, r1, sp, asr #32
   12e2c:	001d3900 	andseq	r3, sp, r0, lsl #18
   12e30:	00640900 	rsbeq	r0, r4, r0, lsl #18
   12e34:	00534e01 	subseq	r4, r3, r1, lsl #28
   12e38:	1db30000 	ldcne	0, cr0, [r3]
   12e3c:	220a0000 	andcs	r0, sl, #0
   12e40:	01000060 	tsteq	r0, r0, rrx
   12e44:	00012b51 	andeq	r2, r1, r1, asr fp
   12e48:	001ddf00 	andseq	sp, sp, r0, lsl #30
   12e4c:	1ccc0a00 	vstmiane	ip, {s1-s0}
   12e50:	52010000 	andpl	r0, r1, #0
   12e54:	0000006f 	andeq	r0, r0, pc, rrx
   12e58:	00001dfd 	strdeq	r1, [r0], -sp
   12e5c:	01006909 	tsteq	r0, r9, lsl #18
   12e60:	00003753 	andeq	r3, r0, r3, asr r7
   12e64:	001e1000 	andseq	r1, lr, r0
   12e68:	040b0000 	streq	r0, [fp], #-0
   12e6c:	0000011f 	andeq	r0, r0, pc, lsl r1
   12e70:	26040b0c 	strcs	r0, [r4], -ip, lsl #22
   12e74:	0d000001 	stceq	0, cr0, [r0, #-4]
   12e78:	00000053 	andeq	r0, r0, r3, asr r0
   12e7c:	006f040b 	rsbeq	r0, pc, fp, lsl #8
   12e80:	34000000 	strcc	r0, [r0], #-0
   12e84:	04000001 	streq	r0, [r0], #-1
   12e88:	003f9400 	eorseq	r9, pc, r0, lsl #8
   12e8c:	bf010400 	svclt	0x00010400
   12e90:	0c000054 	stceq	0, cr0, [r0], {84}	; 0x54
   12e94:	0000606b 	andeq	r6, r0, fp, rrx
   12e98:	00005518 	andeq	r5, r0, r8, lsl r5
   12e9c:	080011a4 	stmdaeq	r0, {r2, r5, r7, r8, ip}
   12ea0:	000000c6 	andeq	r0, r0, r6, asr #1
   12ea4:	000076da 	ldrdeq	r7, [r0], -sl
   12ea8:	69050402 	stmdbvs	r5, {r1, sl}
   12eac:	0300746e 	movweq	r7, #1134	; 0x46e
   12eb0:	00005cec 	andeq	r5, r0, ip, ror #25
   12eb4:	0037d802 	eorseq	sp, r7, r2, lsl #16
   12eb8:	04040000 	streq	r0, [r4], #-0
   12ebc:	0001ce07 	andeq	ip, r1, r7, lsl #28
   12ec0:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
   12ec4:	000000b8 	strheq	r0, [r0], -r8
   12ec8:	f8040804 			; <UNDEFINED> instruction: 0xf8040804
   12ecc:	04000002 	streq	r0, [r0], #-2
   12ed0:	01920601 	orrseq	r0, r2, r1, lsl #12
   12ed4:	01040000 	mrseq	r0, (UNDEF: 4)
   12ed8:	00019008 	andeq	r9, r1, r8
   12edc:	05020400 	streq	r0, [r2, #-1024]	; 0xfffffc00
   12ee0:	00000095 	muleq	r0, r5, r0
   12ee4:	f2070204 	vhsub.s8	d0, d7, d4
   12ee8:	04000001 	streq	r0, [r0], #-1
   12eec:	00bd0504 	adcseq	r0, sp, r4, lsl #10
   12ef0:	04040000 	streq	r0, [r4], #-0
   12ef4:	0001c907 	andeq	ip, r1, r7, lsl #18
   12ef8:	07080400 	streq	r0, [r8, -r0, lsl #8]
   12efc:	000001c4 	andeq	r0, r0, r4, asr #3
   12f00:	59070404 	stmdbpl	r7, {r2, sl}
   12f04:	05000000 	streq	r0, [r0, #-0]
   12f08:	8c040604 	stchi	6, cr0, [r4], {4}
   12f0c:	04000000 	streq	r0, [r0], #-0
   12f10:	01990801 	orrseq	r0, r9, r1, lsl #16
   12f14:	04060000 	streq	r0, [r6], #-0
   12f18:	00000099 	muleq	r0, r9, r0
   12f1c:	00008c07 	andeq	r8, r0, r7, lsl #24
   12f20:	5e4d0800 	cdppl	8, 4, cr0, cr13, cr0, {0}
   12f24:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
   12f28:	00000084 	andeq	r0, r0, r4, lsl #1
   12f2c:	080011a4 	stmdaeq	r0, {r2, r5, r7, r8, ip}
   12f30:	000000c6 	andeq	r0, r0, r6, asr #1
   12f34:	011f9c01 	tsteq	pc, r1, lsl #24
   12f38:	9a090000 	bls	252f40 <_Min_Stack_Size+0x252d40>
   12f3c:	01000060 	tsteq	r0, r0, rrx
   12f40:	0000843c 	andeq	r8, r0, ip, lsr r4
   12f44:	0a500100 	beq	141334c <_Min_Stack_Size+0x141314c>
   12f48:	00006062 	andeq	r6, r0, r2, rrx
   12f4c:	011f3c01 	tsteq	pc, r1, lsl #24
   12f50:	1e250000 	cdpne	0, 2, cr0, cr5, cr0, {0}
   12f54:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   12f58:	01000040 	tsteq	r0, r0, asr #32
   12f5c:	00002c3c 	andeq	r2, r0, ip, lsr ip
   12f60:	001e7800 	andseq	r7, lr, r0, lsl #16
   12f64:	73640b00 	cmnvc	r4, #0, 22
   12f68:	59010074 	stmdbpl	r1, {r2, r4, r5, r6}
   12f6c:	00000086 	andeq	r0, r0, r6, lsl #1
   12f70:	00001f21 	andeq	r1, r0, r1, lsr #30
   12f74:	6372730b 	cmnvs	r2, #738197504	; 0x2c000000
   12f78:	935a0100 	cmpls	sl, #0, 2
   12f7c:	96000000 	strls	r0, [r0], -r0
   12f80:	0c00001f 	stceq	0, cr0, [r0], {31}
   12f84:	00005b98 	muleq	r0, r8, fp
   12f88:	01265b01 			; <UNDEFINED> instruction: 0x01265b01
   12f8c:	20210000 	eorcs	r0, r1, r0
   12f90:	a40c0000 	strge	r0, [ip], #-0
   12f94:	0100005b 	qaddeq	r0, fp, r0
   12f98:	00012c5c 	andeq	r2, r1, ip, asr ip
   12f9c:	00204f00 	eoreq	r4, r0, r0, lsl #30
   12fa0:	04060000 	streq	r0, [r6], #-0
   12fa4:	00000125 	andeq	r0, r0, r5, lsr #2
   12fa8:	6804060d 	stmdavs	r4, {r0, r2, r3, r9, sl}
   12fac:	06000000 	streq	r0, [r0], -r0
   12fb0:	00013204 	andeq	r3, r1, r4, lsl #4
   12fb4:	00680700 	rsbeq	r0, r8, r0, lsl #14
   12fb8:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
   12fbc:	04000008 	streq	r0, [r0], #-8
   12fc0:	00403f00 	subeq	r3, r0, r0, lsl #30
   12fc4:	bf010400 	svclt	0x00010400
   12fc8:	0c000054 	stceq	0, cr0, [r0], {84}	; 0x54
   12fcc:	00005cf3 	strdeq	r5, [r0], -r3
   12fd0:	000056e6 	andeq	r5, r0, r6, ror #13
   12fd4:	0800126c 	stmdaeq	r0, {r2, r3, r5, r6, r9, ip}
   12fd8:	00000048 	andeq	r0, r0, r8, asr #32
   12fdc:	000077f7 	strdeq	r7, [r0], -r7	; <UNPREDICTABLE>
   12fe0:	92060102 	andls	r0, r6, #-2147483648	; 0x80000000
   12fe4:	02000001 	andeq	r0, r0, #1
   12fe8:	01900801 	orrseq	r0, r0, r1, lsl #16
   12fec:	02020000 	andeq	r0, r2, #0
   12ff0:	00009505 	andeq	r9, r0, r5, lsl #10
   12ff4:	07020200 	streq	r0, [r2, -r0, lsl #4]
   12ff8:	000001f2 	strdeq	r0, [r0], -r2
   12ffc:	bd050402 	cfstrslt	mvf0, [r5, #-8]
   13000:	02000000 	andeq	r0, r0, #0
   13004:	01c90704 	biceq	r0, r9, r4, lsl #14
   13008:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   1300c:	0000b805 	andeq	fp, r0, r5, lsl #16
   13010:	07080200 	streq	r0, [r8, -r0, lsl #4]
   13014:	000001c4 	andeq	r0, r0, r4, asr #3
   13018:	69050403 	stmdbvs	r5, {r0, r1, sl}
   1301c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
   13020:	01ce0704 	biceq	r0, lr, r4, lsl #14
   13024:	ec040000 	stc	0, cr0, [r4], {-0}
   13028:	0200005c 	andeq	r0, r0, #92	; 0x5c
   1302c:	000064d8 	ldrdeq	r6, [r0], -r8
   13030:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
   13034:	000002f8 	strdeq	r0, [r0], -r8
   13038:	a4040405 	strge	r0, [r4], #-1029	; 0xfffffbfb
   1303c:	03000057 	movweq	r0, #87	; 0x57
   13040:	00005d07 	andeq	r5, r0, r7, lsl #26
   13044:	57930400 	ldrpl	r0, [r3, r0, lsl #8]
   13048:	2c040000 	stccs	0, cr0, [r4], {-0}
   1304c:	00000041 	andeq	r0, r0, r1, asr #32
   13050:	00587d04 	subseq	r7, r8, r4, lsl #26
   13054:	41720400 	cmnmi	r2, r0, lsl #8
   13058:	06000000 	streq	r0, [r0], -r0
   1305c:	00005760 	andeq	r5, r0, r0, ror #14
   13060:	64016502 	strvs	r6, [r1], #-1282	; 0xfffffafe
   13064:	07000000 	streq	r0, [r0, -r0]
   13068:	cba60404 	blgt	fe994080 <BootRAM+0xd904821>
   1306c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13070:	0000575a 	andeq	r5, r0, sl, asr r7
   13074:	00a0a804 	adceq	sl, r0, r4, lsl #16
   13078:	a8080000 	stmdage	r8, {}	; <UNPREDICTABLE>
   1307c:	04000056 	streq	r0, [r0], #-86	; 0xffffffaa
   13080:	0000cba9 	andeq	ip, r0, r9, lsr #23
   13084:	2c090000 	stccs	0, cr0, [r9], {-0}
   13088:	db000000 	blle	13090 <_Min_Stack_Size+0x12e90>
   1308c:	0a000000 	beq	13094 <_Min_Stack_Size+0x12e94>
   13090:	000000db 	ldrdeq	r0, [r0], -fp
   13094:	04020003 	streq	r0, [r2], #-3
   13098:	00005907 	andeq	r5, r0, r7, lsl #18
   1309c:	04080b00 	streq	r0, [r8], #-2816	; 0xfffff500
   130a0:	000103a3 	andeq	r0, r1, r3, lsr #7
   130a4:	58670c00 	stmdapl	r7!, {sl, fp}^
   130a8:	a5040000 	strge	r0, [r4, #-0]
   130ac:	0000005d 	andeq	r0, r0, sp, asr r0
   130b0:	586f0c00 	stmdapl	pc!, {sl, fp}^	; <UNPREDICTABLE>
   130b4:	aa040000 	bge	1130bc <_Min_Stack_Size+0x112ebc>
   130b8:	000000ac 	andeq	r0, r0, ip, lsr #1
   130bc:	06040004 	streq	r0, [r4], -r4
   130c0:	04000058 	streq	r0, [r0], #-88	; 0xffffffa8
   130c4:	0000e2ab 	andeq	lr, r0, fp, lsr #5
   130c8:	56790400 	ldrbtpl	r0, [r9], -r0, lsl #8
   130cc:	af040000 	svcge	0x00040000
   130d0:	0000007f 	andeq	r0, r0, pc, ror r0
   130d4:	0058b904 	subseq	fp, r8, r4, lsl #18
   130d8:	48160500 	ldmdami	r6, {r8, sl}
   130dc:	0d000000 	stceq	0, cr0, [r0, #-0]
   130e0:	00005682 	andeq	r5, r0, r2, lsl #13
   130e4:	772d0518 			; <UNDEFINED> instruction: 0x772d0518
   130e8:	0c000001 	stceq	0, cr0, [r0], {1}
   130ec:	00005827 	andeq	r5, r0, r7, lsr #16
   130f0:	01772f05 	cmneq	r7, r5, lsl #30
   130f4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   130f8:	05006b5f 	streq	r6, [r0, #-2911]	; 0xfffff4a1
   130fc:	00005d30 	andeq	r5, r0, r0, lsr sp
   13100:	590c0400 	stmdbpl	ip, {sl}
   13104:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   13108:	00005d30 	andeq	r5, r0, r0, lsr sp
   1310c:	730c0800 	movwvc	r0, #51200	; 0xc800
   13110:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   13114:	00005d30 	andeq	r5, r0, r0, lsr sp
   13118:	d40c0c00 	strle	r0, [ip], #-3072	; 0xfffff400
   1311c:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   13120:	00005d30 	andeq	r5, r0, r0, lsr sp
   13124:	5f0e1000 	svcpl	0x000e1000
   13128:	31050078 	tstcc	r5, r8, ror r0
   1312c:	0000017d 	andeq	r0, r0, sp, ror r1
   13130:	040f0014 	streq	r0, [pc], #-20	; 13138 <_Min_Stack_Size+0x12f38>
   13134:	00000124 	andeq	r0, r0, r4, lsr #2
   13138:	00011909 	andeq	r1, r1, r9, lsl #18
   1313c:	00018d00 	andeq	r8, r1, r0, lsl #26
   13140:	00db0a00 	sbcseq	r0, fp, r0, lsl #20
   13144:	00000000 	andeq	r0, r0, r0
   13148:	0056a30d 	subseq	sl, r6, sp, lsl #6
   1314c:	35052400 	strcc	r2, [r5, #-1024]	; 0xfffffc00
   13150:	00000206 	andeq	r0, r0, r6, lsl #4
   13154:	0056070c 	subseq	r0, r6, ip, lsl #14
   13158:	5d370500 	cfldr32pl	mvfx0, [r7, #-0]
   1315c:	00000000 	andeq	r0, r0, r0
   13160:	00588c0c 	subseq	r8, r8, ip, lsl #24
   13164:	5d380500 	cfldr32pl	mvfx0, [r8, #-0]
   13168:	04000000 	streq	r0, [r0], #-0
   1316c:	0056160c 	subseq	r1, r6, ip, lsl #12
   13170:	5d390500 	cfldr32pl	mvfx0, [r9, #-0]
   13174:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13178:	0059310c 	subseq	r3, r9, ip, lsl #2
   1317c:	5d3a0500 	cfldr32pl	mvfx0, [sl, #-0]
   13180:	0c000000 	stceq	0, cr0, [r0], {-0}
   13184:	00577f0c 	subseq	r7, r7, ip, lsl #30
   13188:	5d3b0500 	cfldr32pl	mvfx0, [fp, #-0]
   1318c:	10000000 	andne	r0, r0, r0
   13190:	00576f0c 	subseq	r6, r7, ip, lsl #30
   13194:	5d3c0500 	cfldr32pl	mvfx0, [ip, #-0]
   13198:	14000000 	strne	r0, [r0], #-0
   1319c:	0058d90c 	subseq	sp, r8, ip, lsl #18
   131a0:	5d3d0500 	cfldr32pl	mvfx0, [sp, #-0]
   131a4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   131a8:	0057ee0c 	subseq	lr, r7, ip, lsl #28
   131ac:	5d3e0500 	cfldr32pl	mvfx0, [lr, #-0]
   131b0:	1c000000 	stcne	0, cr0, [r0], {-0}
   131b4:	0058fd0c 	subseq	pc, r8, ip, lsl #26
   131b8:	5d3f0500 	cfldr32pl	mvfx0, [pc, #-0]	; 131c0 <_Min_Stack_Size+0x12fc0>
   131bc:	20000000 	andcs	r0, r0, r0
   131c0:	57f80d00 	ldrbpl	r0, [r8, r0, lsl #26]!
   131c4:	05080000 	streq	r0, [r8, #-0]
   131c8:	00022b73 	andeq	r2, r2, r3, ror fp
   131cc:	3a5f0c00 	bcc	17d61d4 <_Min_Stack_Size+0x17d5fd4>
   131d0:	74050000 	strvc	r0, [r5], #-0
   131d4:	0000022b 	andeq	r0, r0, fp, lsr #4
   131d8:	5da30c00 	stcpl	12, cr0, [r3]
   131dc:	75050000 	strvc	r0, [r5, #-0]
   131e0:	0000005d 	andeq	r0, r0, sp, asr r0
   131e4:	040f0004 	streq	r0, [pc], #-4	; 131ec <_Min_Stack_Size+0x12fec>
   131e8:	0000002c 	andeq	r0, r0, ip, lsr #32
   131ec:	0058ad10 	subseq	sl, r8, r0, lsl sp
   131f0:	72056000 	andvc	r6, r5, #0
   131f4:	00035d01 	andeq	r5, r3, r1, lsl #26
   131f8:	58851100 	stmpl	r5, {r8, ip}
   131fc:	76050000 	strvc	r0, [r5], -r0
   13200:	00005d01 	andeq	r5, r0, r1, lsl #26
   13204:	c6110000 	ldrgt	r0, [r1], -r0
   13208:	0500005b 	streq	r0, [r0, #-91]	; 0xffffffa5
   1320c:	0592017b 	ldreq	r0, [r2, #379]	; 0x17b
   13210:	11040000 	mrsne	r0, (UNDEF: 4)
   13214:	00005bd6 	ldrdeq	r5, [r0], -r6
   13218:	92017b05 	andls	r7, r1, #5120	; 0x1400
   1321c:	08000005 	stmdaeq	r0, {r0, r2}
   13220:	005c9111 	subseq	r9, ip, r1, lsl r1
   13224:	017b0500 	cmneq	fp, r0, lsl #10
   13228:	00000592 	muleq	r0, r2, r5
   1322c:	583a110c 	ldmdapl	sl!, {r2, r3, r8, ip}
   13230:	7d050000 	stcvc	0, cr0, [r5, #-0]
   13234:	00005d01 	andeq	r5, r0, r1, lsl #26
   13238:	bb111000 	bllt	457240 <_Min_Stack_Size+0x457040>
   1323c:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
   13240:	04ab017f 	strteq	r0, [fp], #383	; 0x17f
   13244:	11140000 	tstne	r4, r0
   13248:	00005788 	andeq	r5, r0, r8, lsl #15
   1324c:	5d018105 	stfpld	f0, [r1, #-20]	; 0xffffffec
   13250:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   13254:	0056c011 	subseq	ip, r6, r1, lsl r0
   13258:	01830500 	orreq	r0, r3, r0, lsl #10
   1325c:	0000005d 	andeq	r0, r0, sp, asr r0
   13260:	583f111c 	ldmdapl	pc!, {r2, r3, r4, r8, ip}	; <UNPREDICTABLE>
   13264:	84050000 	strhi	r0, [r5], #-0
   13268:	0004dc01 	andeq	sp, r4, r1, lsl #24
   1326c:	5f122000 	svcpl	0x00122000
   13270:	0500706d 	streq	r7, [r0, #-109]	; 0xffffff93
   13274:	06df0186 	ldrbeq	r0, [pc], r6, lsl #3
   13278:	11240000 			; <UNDEFINED> instruction: 0x11240000
   1327c:	0000584f 	andeq	r5, r0, pc, asr #16
   13280:	f0018805 			; <UNDEFINED> instruction: 0xf0018805
   13284:	28000006 	stmdacs	r0, {r1, r2}
   13288:	00568a11 	subseq	r8, r6, r1, lsl sl
   1328c:	018a0500 	orreq	r0, sl, r0, lsl #10
   13290:	0000005d 	andeq	r0, r0, sp, asr r0
   13294:	56d2112c 	ldrbpl	r1, [r2], ip, lsr #2
   13298:	8d050000 	stchi	0, cr0, [r5, #-0]
   1329c:	00005d01 	andeq	r5, r0, r1, lsl #26
   132a0:	4c113000 	ldcmi	0, cr3, [r1], {-0}
   132a4:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   132a8:	04ab018e 	strteq	r0, [fp], #398	; 0x18e
   132ac:	11340000 	teqne	r4, r0
   132b0:	000056da 	ldrdeq	r5, [r0], -sl
   132b4:	f6019005 			; <UNDEFINED> instruction: 0xf6019005
   132b8:	38000006 	stmdacc	r0, {r1, r2}
   132bc:	00590811 	subseq	r0, r9, r1, lsl r8
   132c0:	01910500 	orrseq	r0, r1, r0, lsl #10
   132c4:	000006fc 	strdeq	r0, [r0], -ip
   132c8:	5745113c 	smlaldxpl	r1, r5, ip, r1
   132cc:	92050000 	andls	r0, r5, #0
   132d0:	0004ab01 	andeq	sl, r4, r1, lsl #22
   132d4:	ed114000 	ldc	0, cr4, [r1, #-0]
   132d8:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   132dc:	070d0195 			; <UNDEFINED> instruction: 0x070d0195
   132e0:	11440000 	mrsne	r0, (UNDEF: 68)
   132e4:	0000562d 	andeq	r5, r0, sp, lsr #12
   132e8:	57019d05 	strpl	r9, [r1, -r5, lsl #26]
   132ec:	48000005 	stmdami	r0, {r0, r2}
   132f0:	00562011 	subseq	r2, r6, r1, lsl r0
   132f4:	019e0500 	orrseq	r0, lr, r0, lsl #10
   132f8:	00000592 	muleq	r0, r2, r5
   132fc:	57791154 			; <UNDEFINED> instruction: 0x57791154
   13300:	9f050000 	svcls	0x00050000
   13304:	00071901 	andeq	r1, r7, r1, lsl #18
   13308:	d5115800 	ldrle	r5, [r1, #-2048]	; 0xfffff800
   1330c:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
   13310:	04ab01a0 	strteq	r0, [fp], #416	; 0x1a0
   13314:	005c0000 	subseq	r0, ip, r0
   13318:	0231040f 	eorseq	r0, r1, #251658240	; 0xf000000
   1331c:	110d0000 	mrsne	r0, (UNDEF: 13)
   13320:	68000058 	stmdavs	r0, {r3, r4, r6}
   13324:	048db305 	streq	fp, [sp], #773	; 0x305
   13328:	5f0e0000 	svcpl	0x000e0000
   1332c:	b4050070 	strlt	r0, [r5], #-112	; 0xffffff90
   13330:	0000022b 	andeq	r0, r0, fp, lsr #4
   13334:	725f0e00 	subsvc	r0, pc, #0, 28
   13338:	5db50500 	cfldr32pl	mvfx0, [r5]
   1333c:	04000000 	streq	r0, [r0], #-0
   13340:	00775f0e 	rsbseq	r5, r7, lr, lsl #30
   13344:	005db605 	subseq	fp, sp, r5, lsl #12
   13348:	0c080000 	stceq	0, cr0, [r8], {-0}
   1334c:	0000563c 	andeq	r5, r0, ip, lsr r6
   13350:	0033b705 	eorseq	fp, r3, r5, lsl #14
   13354:	0c0c0000 	stceq	0, cr0, [ip], {-0}
   13358:	000058ce 	andeq	r5, r0, lr, asr #17
   1335c:	0033b805 	eorseq	fp, r3, r5, lsl #16
   13360:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
   13364:	0066625f 	rsbeq	r6, r6, pc, asr r2
   13368:	0206b905 	andeq	fp, r6, #81920	; 0x14000
   1336c:	0c100000 	ldceq	0, cr0, [r0], {-0}
   13370:	000055e1 	andeq	r5, r0, r1, ror #11
   13374:	005dba05 	subseq	fp, sp, r5, lsl #20
   13378:	0c180000 	ldceq	0, cr0, [r8], {-0}
   1337c:	00000deb 	andeq	r0, r0, fp, ror #27
   13380:	035dbd05 	cmpeq	sp, #320	; 0x140
   13384:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
   13388:	00005625 	andeq	r5, r0, r5, lsr #12
   1338c:	007dc105 	rsbseq	ip, sp, r5, lsl #2
   13390:	0c200000 	stceq	0, cr0, [r0], #-0
   13394:	00004061 	andeq	r4, r0, r1, rrx
   13398:	04b8c305 	ldrteq	ip, [r8], #773	; 0x305
   1339c:	0c240000 	stceq	0, cr0, [r4], #-0
   133a0:	00003fbc 			; <UNDEFINED> instruction: 0x00003fbc
   133a4:	04e7c505 	strbteq	ip, [r7], #1285	; 0x505
   133a8:	0c280000 	stceq	0, cr0, [r8], #-0
   133ac:	00005877 	andeq	r5, r0, r7, ror r8
   133b0:	050bc805 	streq	ip, [fp, #-2053]	; 0xfffff7fb
   133b4:	0c2c0000 	stceq	0, cr0, [ip], #-0
   133b8:	00005917 	andeq	r5, r0, r7, lsl r9
   133bc:	0525c905 	streq	ip, [r5, #-2309]!	; 0xfffff6fb
   133c0:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
   133c4:	0062755f 	rsbeq	r7, r2, pc, asr r5
   133c8:	0206cc05 	andeq	ip, r6, #1280	; 0x500
   133cc:	0e340000 	cdpeq	0, 3, cr0, cr4, cr0, {0}
   133d0:	0070755f 	rsbseq	r7, r0, pc, asr r5
   133d4:	022bcd05 	eoreq	ip, fp, #320	; 0x140
   133d8:	0e3c0000 	cdpeq	0, 3, cr0, cr12, cr0, {0}
   133dc:	0072755f 	rsbseq	r7, r2, pc, asr r5
   133e0:	005dce05 	subseq	ip, sp, r5, lsl #28
   133e4:	0c400000 	mareq	acc0, r0, r0
   133e8:	00005610 	andeq	r5, r0, r0, lsl r6
   133ec:	052bd105 	streq	sp, [fp, #-261]!	; 0xfffffefb
   133f0:	0c440000 	mareq	acc0, r0, r4
   133f4:	000058f7 	strdeq	r5, [r0], -r7
   133f8:	053bd205 	ldreq	sp, [fp, #-517]!	; 0xfffffdfb
   133fc:	0e470000 	cdpeq	0, 4, cr0, cr7, cr0, {0}
   13400:	00626c5f 	rsbeq	r6, r2, pc, asr ip
   13404:	0206d505 	andeq	sp, r6, #20971520	; 0x1400000
   13408:	0c480000 	mareq	acc0, r0, r8
   1340c:	00005643 	andeq	r5, r0, r3, asr #12
   13410:	005dd805 	subseq	sp, sp, r5, lsl #16
   13414:	0c500000 	mraeq	r0, r0, acc0
   13418:	00006125 	andeq	r6, r0, r5, lsr #2
   1341c:	008ad905 	addeq	sp, sl, r5, lsl #18
   13420:	0c540000 	mraeq	r0, r4, acc0
   13424:	00003c01 	andeq	r3, r0, r1, lsl #24
   13428:	010ee005 	tsteq	lr, r5
   1342c:	0c580000 	mraeq	r0, r8, acc0
   13430:	00005819 	andeq	r5, r0, r9, lsl r8
   13434:	0103e205 	tsteq	r3, r5, lsl #4
   13438:	0c5c0000 	mraeq	r0, ip, acc0
   1343c:	00005767 	andeq	r5, r0, r7, ror #14
   13440:	005de305 	subseq	lr, sp, r5, lsl #6
   13444:	00640000 	rsbeq	r0, r4, r0
   13448:	00005d13 	andeq	r5, r0, r3, lsl sp
   1344c:	0004ab00 	andeq	sl, r4, r0, lsl #22
   13450:	035d1400 	cmpeq	sp, #0, 8
   13454:	7d140000 	ldcvc	0, cr0, [r4, #-0]
   13458:	14000000 	strne	r0, [r0], #-0
   1345c:	000004ab 	andeq	r0, r0, fp, lsr #9
   13460:	00005d14 	andeq	r5, r0, r4, lsl sp
   13464:	040f0000 	streq	r0, [pc], #-0	; 1346c <_Min_Stack_Size+0x1326c>
   13468:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
   1346c:	99080102 	stmdbls	r8, {r1, r8}
   13470:	0f000001 	svceq	0x00000001
   13474:	00048d04 	andeq	r8, r4, r4, lsl #26
   13478:	005d1300 	subseq	r1, sp, r0, lsl #6
   1347c:	04dc0000 	ldrbeq	r0, [ip], #0
   13480:	5d140000 	ldcpl	0, cr0, [r4, #-0]
   13484:	14000003 	strne	r0, [r0], #-3
   13488:	0000007d 	andeq	r0, r0, sp, ror r0
   1348c:	0004dc14 	andeq	sp, r4, r4, lsl ip
   13490:	005d1400 	subseq	r1, sp, r0, lsl #8
   13494:	0f000000 	svceq	0x00000000
   13498:	0004e204 	andeq	lr, r4, r4, lsl #4
   1349c:	04b11500 	ldrteq	r1, [r1], #1280	; 0x500
   134a0:	040f0000 	streq	r0, [pc], #-0	; 134a8 <_Min_Stack_Size+0x132a8>
   134a4:	000004be 			; <UNDEFINED> instruction: 0x000004be
   134a8:	00009513 	andeq	r9, r0, r3, lsl r5
   134ac:	00050b00 	andeq	r0, r5, r0, lsl #22
   134b0:	035d1400 	cmpeq	sp, #0, 8
   134b4:	7d140000 	ldcvc	0, cr0, [r4, #-0]
   134b8:	14000000 	strne	r0, [r0], #-0
   134bc:	00000095 	muleq	r0, r5, r0
   134c0:	00005d14 	andeq	r5, r0, r4, lsl sp
   134c4:	040f0000 	streq	r0, [pc], #-0	; 134cc <_Min_Stack_Size+0x132cc>
   134c8:	000004ed 	andeq	r0, r0, sp, ror #9
   134cc:	00005d13 	andeq	r5, r0, r3, lsl sp
   134d0:	00052500 	andeq	r2, r5, r0, lsl #10
   134d4:	035d1400 	cmpeq	sp, #0, 8
   134d8:	7d140000 	ldcvc	0, cr0, [r4, #-0]
   134dc:	00000000 	andeq	r0, r0, r0
   134e0:	0511040f 	ldreq	r0, [r1, #-1039]	; 0xfffffbf1
   134e4:	2c090000 	stccs	0, cr0, [r9], {-0}
   134e8:	3b000000 	blcc	134f0 <_Min_Stack_Size+0x132f0>
   134ec:	0a000005 	beq	13508 <_Min_Stack_Size+0x13308>
   134f0:	000000db 	ldrdeq	r0, [r0], -fp
   134f4:	2c090002 	stccs	0, cr0, [r9], {2}
   134f8:	4b000000 	blmi	13500 <_Min_Stack_Size+0x13300>
   134fc:	0a000005 	beq	13518 <_Min_Stack_Size+0x13318>
   13500:	000000db 	ldrdeq	r0, [r0], -fp
   13504:	ff060000 			; <UNDEFINED> instruction: 0xff060000
   13508:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
   1350c:	0363011d 	cmneq	r3, #1073741831	; 0x40000007
   13510:	e4100000 	ldr	r0, [r0], #-0
   13514:	0c000060 	stceq	0, cr0, [r0], {96}	; 0x60
   13518:	8c012105 	stfhis	f2, [r1], {5}
   1351c:	11000005 	tstne	r0, r5
   13520:	00005827 	andeq	r5, r0, r7, lsr #16
   13524:	8c012305 	stchi	3, cr2, [r1], {5}
   13528:	00000005 	andeq	r0, r0, r5
   1352c:	0056df11 	subseq	sp, r6, r1, lsl pc
   13530:	01240500 			; <UNDEFINED> instruction: 0x01240500
   13534:	0000005d 	andeq	r0, r0, sp, asr r0
   13538:	57e81104 	strbpl	r1, [r8, r4, lsl #2]!
   1353c:	25050000 	strcs	r0, [r5, #-0]
   13540:	00059201 	andeq	r9, r5, r1, lsl #4
   13544:	0f000800 	svceq	0x00000800
   13548:	00055704 	andeq	r5, r5, r4, lsl #14
   1354c:	4b040f00 	blmi	117154 <_Min_Stack_Size+0x116f54>
   13550:	10000005 	andne	r0, r0, r5
   13554:	000055b3 			; <UNDEFINED> instruction: 0x000055b3
   13558:	013d0518 	teqeq	sp, r8, lsl r5
   1355c:	000005da 	ldrdeq	r0, [r0], -sl
   13560:	00586111 	subseq	r6, r8, r1, lsl r1
   13564:	013e0500 	teqeq	lr, r0, lsl #10
   13568:	000005da 	ldrdeq	r0, [r0], -sl
   1356c:	58951100 	ldmpl	r5, {r8, ip}
   13570:	3f050000 	svccc	0x00050000
   13574:	0005da01 	andeq	sp, r5, r1, lsl #20
   13578:	b4110600 	ldrlt	r0, [r1], #-1536	; 0xfffffa00
   1357c:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   13580:	003a0140 	eorseq	r0, sl, r0, asr #2
   13584:	110c0000 	mrsne	r0, (UNDEF: 12)
   13588:	00005822 	andeq	r5, r0, r2, lsr #16
   1358c:	56014305 	strpl	r4, [r1], -r5, lsl #6
   13590:	10000000 	andne	r0, r0, r0
   13594:	003a0900 	eorseq	r0, sl, r0, lsl #18
   13598:	05ea0000 	strbeq	r0, [sl, #0]!
   1359c:	db0a0000 	blle	2935a4 <_Min_Stack_Size+0x2933a4>
   135a0:	02000000 	andeq	r0, r0, #0
   135a4:	56351000 	ldrtpl	r1, [r5], -r0
   135a8:	05100000 	ldreq	r0, [r0, #-0]
   135ac:	062c0156 			; <UNDEFINED> instruction: 0x062c0156
   135b0:	52110000 	andspl	r0, r1, #0
   135b4:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
   135b8:	01770159 	cmneq	r7, r9, asr r1
   135bc:	11000000 	mrsne	r0, (UNDEF: 0)
   135c0:	00005699 	muleq	r0, r9, r6
   135c4:	5d015a05 	vstrpl	s10, [r1, #-20]	; 0xffffffec
   135c8:	04000000 	streq	r0, [r0], #-0
   135cc:	00592c11 	subseq	r2, r9, r1, lsl ip
   135d0:	015b0500 	cmpeq	fp, r0, lsl #10
   135d4:	00000177 	andeq	r0, r0, r7, ror r1
   135d8:	579a1108 	ldrpl	r1, [sl, r8, lsl #2]
   135dc:	5c050000 	stcpl	0, cr0, [r5], {-0}
   135e0:	00062c01 	andeq	r2, r6, r1, lsl #24
   135e4:	0f000c00 	svceq	0x00000c00
   135e8:	00017704 	andeq	r7, r1, r4, lsl #14
   135ec:	58a81000 	stmiapl	r8!, {ip}
   135f0:	05500000 	ldrbeq	r0, [r0, #-0]
   135f4:	06cf0160 	strbeq	r0, [pc], r0, ror #2
   135f8:	9b110000 	blls	453600 <_Min_Stack_Size+0x453400>
   135fc:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   13600:	04ab0163 	strteq	r0, [fp], #355	; 0x163
   13604:	11000000 	mrsne	r0, (UNDEF: 0)
   13608:	0000582d 	andeq	r5, r0, sp, lsr #16
   1360c:	03016405 	movweq	r6, #5125	; 0x1405
   13610:	04000001 	streq	r0, [r0], #-1
   13614:	0055f911 	subseq	pc, r5, r1, lsl r9	; <UNPREDICTABLE>
   13618:	01650500 	cmneq	r5, r0, lsl #10
   1361c:	00000103 	andeq	r0, r0, r3, lsl #2
   13620:	591e110c 	ldmdbpl	lr, {r2, r3, r8, ip}
   13624:	66050000 	strvs	r0, [r5], -r0
   13628:	00010301 	andeq	r0, r1, r1, lsl #6
   1362c:	e3111400 	tst	r1, #0, 8
   13630:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   13634:	06cf0167 	strbeq	r0, [pc], r7, ror #2
   13638:	111c0000 	tstne	ip, r0
   1363c:	000058c1 	andeq	r5, r0, r1, asr #17
   13640:	5d016805 	stcpl	8, cr6, [r1, #-20]	; 0xffffffec
   13644:	24000000 	strcs	r0, [r0], #-0
   13648:	00566511 	subseq	r6, r6, r1, lsl r5
   1364c:	01690500 	cmneq	r9, r0, lsl #10
   13650:	00000103 	andeq	r0, r0, r3, lsl #2
   13654:	55ea1128 	strbpl	r1, [sl, #296]!	; 0x128
   13658:	6a050000 	bvs	153660 <_Min_Stack_Size+0x153460>
   1365c:	00010301 	andeq	r0, r1, r1, lsl #6
   13660:	54113000 	ldrpl	r3, [r1], #-0
   13664:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   13668:	0103016b 	tsteq	r3, fp, ror #2
   1366c:	11380000 	teqne	r8, r0
   13670:	000055c6 	andeq	r5, r0, r6, asr #11
   13674:	03016c05 	movweq	r6, #7173	; 0x1c05
   13678:	40000001 	andmi	r0, r0, r1
   1367c:	0056af11 	subseq	sl, r6, r1, lsl pc
   13680:	016d0500 	cmneq	sp, r0, lsl #10
   13684:	00000103 	andeq	r0, r0, r3, lsl #2
   13688:	b1090048 	tstlt	r9, r8, asr #32
   1368c:	df000004 	svcle	0x00000004
   13690:	0a000006 	beq	136b0 <_Min_Stack_Size+0x134b0>
   13694:	000000db 	ldrdeq	r0, [r0], -fp
   13698:	040f0007 	streq	r0, [pc], #-7	; 136a0 <_Min_Stack_Size+0x134a0>
   1369c:	000005ea 	andeq	r0, r0, sl, ror #11
   136a0:	0006f016 	andeq	pc, r6, r6, lsl r0	; <UNPREDICTABLE>
   136a4:	035d1400 	cmpeq	sp, #0, 8
   136a8:	0f000000 	svceq	0x00000000
   136ac:	0006e504 	andeq	lr, r6, r4, lsl #10
   136b0:	98040f00 	stmdals	r4, {r8, r9, sl, fp}
   136b4:	0f000005 	svceq	0x00000005
   136b8:	00018d04 	andeq	r8, r1, r4, lsl #26
   136bc:	070d1600 	streq	r1, [sp, -r0, lsl #12]
   136c0:	5d140000 	ldcpl	0, cr0, [r4, #-0]
   136c4:	00000000 	andeq	r0, r0, r0
   136c8:	0713040f 	ldreq	r0, [r3, -pc, lsl #8]
   136cc:	040f0000 	streq	r0, [pc], #-0	; 136d4 <_Min_Stack_Size+0x134d4>
   136d0:	00000702 	andeq	r0, r0, r2, lsl #14
   136d4:	0632040f 	ldrteq	r0, [r2], -pc, lsl #8
   136d8:	e5040000 	str	r0, [r4, #-0]
   136dc:	0100005c 	qaddeq	r0, ip, r0
   136e0:	00006b7b 	andeq	r6, r0, fp, ror fp
   136e4:	5d380d00 	ldcpl	13, cr0, [r8, #-0]
   136e8:	01080000 	mrseq	r0, (UNDEF: 8)
   136ec:	00074f7d 	andeq	r4, r7, sp, ror pc
   136f0:	5da40c00 	stcpl	12, cr0, [r4]
   136f4:	8f010000 	svchi	0x00010000
   136f8:	00000041 	andeq	r0, r0, r1, asr #32
   136fc:	58280c00 	stmdapl	r8!, {sl, fp}
   13700:	92010000 	andls	r0, r1, #0
   13704:	0000074f 	andeq	r0, r0, pc, asr #14
   13708:	040f0004 	streq	r0, [pc], #-4	; 13710 <_Min_Stack_Size+0x13510>
   1370c:	0000072a 	andeq	r0, r0, sl, lsr #14
   13710:	005d3f04 	subseq	r3, sp, r4, lsl #30
   13714:	2a930100 	bcs	fe4d3b1c <BootRAM+0xd4442bd>
   13718:	17000007 	strne	r0, [r0, -r7]
   1371c:	00005f0f 	andeq	r5, r0, pc, lsl #30
   13720:	7d01c101 	stfvcd	f4, [r1, #-4]
   13724:	6c000000 	stcvs	0, cr0, [r0], {-0}
   13728:	48080012 	stmdami	r8, {r1, r4}
   1372c:	01000000 	mrseq	r0, (UNDEF: 0)
   13730:	00084f9c 	muleq	r8, ip, pc	; <UNPREDICTABLE>
   13734:	5d451800 	stclpl	8, cr1, [r5, #-0]
   13738:	c1010000 	mrsgt	r0, (UNDEF: 1)
   1373c:	00035d01 	andeq	r5, r3, r1, lsl #26
   13740:	0020cf00 	eoreq	ip, r0, r0, lsl #30
   13744:	74701900 	ldrbtvc	r1, [r0], #-2304	; 0xfffff700
   13748:	c1010072 	tstgt	r1, r2, ror r0
   1374c:	00007d01 	andeq	r7, r0, r1, lsl #26
   13750:	00211c00 	eoreq	r1, r1, r0, lsl #24
   13754:	5da41800 	stcpl	8, cr1, [r4]
   13758:	c1010000 	mrsgt	r0, (UNDEF: 1)
   1375c:	00071f01 	andeq	r1, r7, r1, lsl #30
   13760:	00217700 	eoreq	r7, r1, r0, lsl #14
   13764:	656d1a00 	strbvs	r1, [sp, #-2560]!	; 0xfffff600
   13768:	c301006d 	movwgt	r0, #4205	; 0x106d
   1376c:	00007d01 	andeq	r7, r0, r1, lsl #26
   13770:	0021c400 	eoreq	ip, r1, r0, lsl #8
   13774:	60a31b00 	adcvs	r1, r3, r0, lsl #22
   13778:	c4010000 	strgt	r0, [r1], #-0
   1377c:	00084f01 	andeq	r4, r8, r1, lsl #30
   13780:	127c1c00 	rsbsne	r1, ip, #0, 24
   13784:	08550800 	ldmdaeq	r5, {fp}^
   13788:	07e00000 	strbeq	r0, [r0, r0]!
   1378c:	011d0000 	tsteq	sp, r0
   13790:	00760250 	rsbseq	r0, r6, r0, asr r2
   13794:	0251011d 	subseq	r0, r1, #1073741831	; 0x40000007
   13798:	1c000074 	stcne	0, cr0, [r0], {116}	; 0x74
   1379c:	0800128c 	stmdaeq	r0, {r2, r3, r7, r9, ip}
   137a0:	00000860 	andeq	r0, r0, r0, ror #16
   137a4:	000007fa 	strdeq	r0, [r0], -sl
   137a8:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
   137ac:	011d0076 	tsteq	sp, r6, ror r0
   137b0:	00750251 	rsbseq	r0, r5, r1, asr r2
   137b4:	12981c00 	addsne	r1, r8, #0, 24
   137b8:	086b0800 	stmdaeq	fp!, {fp}^
   137bc:	081a0000 	ldmdaeq	sl, {}	; <UNPREDICTABLE>
   137c0:	011d0000 	tsteq	sp, r0
   137c4:	00770250 	rsbseq	r0, r7, r0, asr r2
   137c8:	0251011d 	subseq	r0, r1, #1073741831	; 0x40000007
   137cc:	011d0074 	tsteq	sp, r4, ror r0
   137d0:	00750252 	rsbseq	r0, r5, r2, asr r2
   137d4:	12a01c00 	adcne	r1, r0, #0, 24
   137d8:	08760800 	ldmdaeq	r6!, {fp}^
   137dc:	08340000 	ldmdaeq	r4!, {}	; <UNPREDICTABLE>
   137e0:	011d0000 	tsteq	sp, r0
   137e4:	00760250 	rsbseq	r0, r6, r0, asr r2
   137e8:	0251011d 	subseq	r0, r1, #1073741831	; 0x40000007
   137ec:	1e000074 	mcrne	0, 0, r0, cr0, cr4, {3}
   137f0:	080012a8 	stmdaeq	r0, {r3, r5, r7, r9, ip}
   137f4:	00000876 	andeq	r0, r0, r6, ror r8
   137f8:	0012b41f 	andseq	fp, r2, pc, lsl r4
   137fc:	00086008 	andeq	r6, r8, r8
   13800:	51011d00 	tstpl	r1, r0, lsl #26
   13804:	5201f303 	andpl	pc, r1, #201326592	; 0xc000000
   13808:	040f0000 	streq	r0, [pc], #-0	; 13810 <_Min_Stack_Size+0x13610>
   1380c:	00000755 	andeq	r0, r0, r5, asr r7
   13810:	0060b020 	rsbeq	fp, r0, r0, lsr #32
   13814:	0060b000 	rsbeq	fp, r0, r0
   13818:	20b60100 	adcscs	r0, r6, r0, lsl #2
   1381c:	00005cdb 	ldrdeq	r5, [r0], -fp
   13820:	00005cdb 	ldrdeq	r5, [r0], -fp
   13824:	4120b001 			; <UNDEFINED> instruction: 0x4120b001
   13828:	4100005f 	qaddmi	r0, pc, r0	; <UNPREDICTABLE>
   1382c:	0600005f 			; <UNDEFINED> instruction: 0x0600005f
   13830:	5cd32017 	ldclpl	0, cr2, [r3], {23}
   13834:	5cd30000 	ldclpl	0, cr0, [r3], {0}
   13838:	b1010000 	mrslt	r0, (UNDEF: 1)
   1383c:	0008f800 	andeq	pc, r8, r0, lsl #16
   13840:	e1000400 	tst	r0, r0, lsl #8
   13844:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
   13848:	0054bf01 	subseq	fp, r4, r1, lsl #30
   1384c:	60ea0c00 	rscvs	r0, sl, r0, lsl #24
   13850:	5bde0000 	blpl	ff793858 <BootRAM+0xe703ff9>
   13854:	00000000 	andeq	r0, r0, r0
   13858:	00e00000 	rsceq	r0, r0, r0
   1385c:	79550000 	ldmdbvc	r5, {}^	; <UNPREDICTABLE>
   13860:	04020000 	streq	r0, [r2], #-0
   13864:	0001ce07 	andeq	ip, r1, r7, lsl #28
   13868:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
   1386c:	00746e69 	rsbseq	r6, r4, r9, ror #28
   13870:	b8050802 	stmdalt	r5, {r1, fp}
   13874:	02000000 	andeq	r0, r0, #0
   13878:	02f80408 	rscseq	r0, r8, #8, 8	; 0x8000000
   1387c:	01020000 	mrseq	r0, (UNDEF: 2)
   13880:	00019206 	andeq	r9, r1, r6, lsl #4
   13884:	08010200 	stmdaeq	r1, {r9}
   13888:	00000190 	muleq	r0, r0, r1
   1388c:	95050202 	strls	r0, [r5, #-514]	; 0xfffffdfe
   13890:	02000000 	andeq	r0, r0, #0
   13894:	01f20702 	mvnseq	r0, r2, lsl #14
   13898:	04020000 	streq	r0, [r2], #-0
   1389c:	0000bd05 	andeq	fp, r0, r5, lsl #26
   138a0:	07040200 	streq	r0, [r4, -r0, lsl #4]
   138a4:	000001c9 	andeq	r0, r0, r9, asr #3
   138a8:	c4070802 	strgt	r0, [r7], #-2050	; 0xfffff7fe
   138ac:	04000001 	streq	r0, [r0], #-1
   138b0:	000057a4 	andeq	r5, r0, r4, lsr #15
   138b4:	002c0702 	eoreq	r0, ip, r2, lsl #14
   138b8:	93040000 	movwls	r0, #16384	; 0x4000
   138bc:	03000057 	movweq	r0, #87	; 0x57
   138c0:	00005d2c 	andeq	r5, r0, ip, lsr #26
   138c4:	587d0400 	ldmdapl	sp!, {sl}^
   138c8:	72030000 	andvc	r0, r3, #0
   138cc:	0000005d 	andeq	r0, r0, sp, asr r0
   138d0:	00576005 	subseq	r6, r7, r5
   138d4:	01650400 	cmneq	r5, r0, lsl #8
   138d8:	00000025 	andeq	r0, r0, r5, lsr #32
   138dc:	a6030406 	strge	r0, [r3], -r6, lsl #8
   138e0:	000000be 	strheq	r0, [r0], -lr
   138e4:	00575a07 	subseq	r5, r7, r7, lsl #20
   138e8:	93a80300 			; <UNDEFINED> instruction: 0x93a80300
   138ec:	07000000 	streq	r0, [r0, -r0]
   138f0:	000056a8 	andeq	r5, r0, r8, lsr #13
   138f4:	00bea903 	adcseq	sl, lr, r3, lsl #18
   138f8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   138fc:	00000048 	andeq	r0, r0, r8, asr #32
   13900:	000000ce 	andeq	r0, r0, lr, asr #1
   13904:	0000ce09 	andeq	ip, r0, r9, lsl #28
   13908:	02000300 	andeq	r0, r0, #0, 6
   1390c:	00590704 	subseq	r0, r9, r4, lsl #14
   13910:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
   13914:	00f6a303 	rscseq	sl, r6, r3, lsl #6
   13918:	670b0000 	strvs	r0, [fp, -r0]
   1391c:	03000058 	movweq	r0, #88	; 0x58
   13920:	00002ca5 	andeq	r2, r0, r5, lsr #25
   13924:	6f0b0000 	svcvs	0x000b0000
   13928:	03000058 	movweq	r0, #88	; 0x58
   1392c:	00009faa 	andeq	r9, r0, sl, lsr #31
   13930:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
   13934:	00005806 	andeq	r5, r0, r6, lsl #16
   13938:	00d5ab03 	sbcseq	sl, r5, r3, lsl #22
   1393c:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
   13940:	03000056 	movweq	r0, #86	; 0x56
   13944:	000072af 	andeq	r7, r0, pc, lsr #5
   13948:	0d040c00 	stceq	12, cr0, [r4, #-0]
   1394c:	00011404 	andeq	r1, r1, r4, lsl #8
   13950:	08010200 	stmdaeq	r1, {r9}
   13954:	00000199 	muleq	r0, r9, r1
   13958:	0058b904 	subseq	fp, r8, r4, lsl #18
   1395c:	64160500 	ldrvs	r0, [r6], #-1280	; 0xfffffb00
   13960:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   13964:	00005682 	andeq	r5, r0, r2, lsl #13
   13968:	792d0518 	pushvc	{r3, r4, r8, sl}
   1396c:	0b000001 	bleq	13978 <_Min_Stack_Size+0x13778>
   13970:	00005827 	andeq	r5, r0, r7, lsr #16
   13974:	01792f05 	cmneq	r9, r5, lsl #30
   13978:	0f000000 	svceq	0x00000000
   1397c:	05006b5f 	streq	r6, [r0, #-2911]	; 0xfffff4a1
   13980:	00002c30 	andeq	r2, r0, r0, lsr ip
   13984:	590b0400 	stmdbpl	fp, {sl}
   13988:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   1398c:	00002c30 	andeq	r2, r0, r0, lsr ip
   13990:	730b0800 	movwvc	r0, #47104	; 0xb800
   13994:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   13998:	00002c30 	andeq	r2, r0, r0, lsr ip
   1399c:	d40b0c00 	strle	r0, [fp], #-3072	; 0xfffff400
   139a0:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   139a4:	00002c30 	andeq	r2, r0, r0, lsr ip
   139a8:	5f0f1000 	svcpl	0x000f1000
   139ac:	31050078 	tstcc	r5, r8, ror r0
   139b0:	0000017f 	andeq	r0, r0, pc, ror r1
   139b4:	040d0014 	streq	r0, [sp], #-20	; 0xffffffec
   139b8:	00000126 	andeq	r0, r0, r6, lsr #2
   139bc:	00011b08 	andeq	r1, r1, r8, lsl #22
   139c0:	00018f00 	andeq	r8, r1, r0, lsl #30
   139c4:	00ce0900 	sbceq	r0, lr, r0, lsl #18
   139c8:	00000000 	andeq	r0, r0, r0
   139cc:	0056a30e 	subseq	sl, r6, lr, lsl #6
   139d0:	35052400 	strcc	r2, [r5, #-1024]	; 0xfffffc00
   139d4:	00000208 	andeq	r0, r0, r8, lsl #4
   139d8:	0056070b 	subseq	r0, r6, fp, lsl #14
   139dc:	2c370500 	cfldr32cs	mvfx0, [r7], #-0
   139e0:	00000000 	andeq	r0, r0, r0
   139e4:	00588c0b 	subseq	r8, r8, fp, lsl #24
   139e8:	2c380500 	cfldr32cs	mvfx0, [r8], #-0
   139ec:	04000000 	streq	r0, [r0], #-0
   139f0:	0056160b 	subseq	r1, r6, fp, lsl #12
   139f4:	2c390500 	cfldr32cs	mvfx0, [r9], #-0
   139f8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   139fc:	0059310b 	subseq	r3, r9, fp, lsl #2
   13a00:	2c3a0500 	cfldr32cs	mvfx0, [sl], #-0
   13a04:	0c000000 	stceq	0, cr0, [r0], {-0}
   13a08:	00577f0b 	subseq	r7, r7, fp, lsl #30
   13a0c:	2c3b0500 	cfldr32cs	mvfx0, [fp], #-0
   13a10:	10000000 	andne	r0, r0, r0
   13a14:	00576f0b 	subseq	r6, r7, fp, lsl #30
   13a18:	2c3c0500 	cfldr32cs	mvfx0, [ip], #-0
   13a1c:	14000000 	strne	r0, [r0], #-0
   13a20:	0058d90b 	subseq	sp, r8, fp, lsl #18
   13a24:	2c3d0500 	cfldr32cs	mvfx0, [sp], #-0
   13a28:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   13a2c:	0057ee0b 	subseq	lr, r7, fp, lsl #28
   13a30:	2c3e0500 	cfldr32cs	mvfx0, [lr], #-0
   13a34:	1c000000 	stcne	0, cr0, [r0], {-0}
   13a38:	0058fd0b 	subseq	pc, r8, fp, lsl #26
   13a3c:	2c3f0500 	cfldr32cs	mvfx0, [pc], #-0	; 13a44 <_Min_Stack_Size+0x13844>
   13a40:	20000000 	andcs	r0, r0, r0
   13a44:	57f80e00 	ldrbpl	r0, [r8, r0, lsl #28]!
   13a48:	05080000 	streq	r0, [r8, #-0]
   13a4c:	00022d73 	andeq	r2, r2, r3, ror sp
   13a50:	3a5f0b00 	bcc	17d6658 <_Min_Stack_Size+0x17d6458>
   13a54:	74050000 	strvc	r0, [r5], #-0
   13a58:	0000022d 	andeq	r0, r0, sp, lsr #4
   13a5c:	5da30b00 			; <UNDEFINED> instruction: 0x5da30b00
   13a60:	75050000 	strvc	r0, [r5, #-0]
   13a64:	0000002c 	andeq	r0, r0, ip, lsr #32
   13a68:	040d0004 	streq	r0, [sp], #-4
   13a6c:	00000048 	andeq	r0, r0, r8, asr #32
   13a70:	0058ad10 	subseq	sl, r8, r0, lsl sp
   13a74:	72056000 	andvc	r6, r5, #0
   13a78:	00035f01 	andeq	r5, r3, r1, lsl #30
   13a7c:	58851100 	stmpl	r5, {r8, ip}
   13a80:	76050000 	strvc	r0, [r5], -r0
   13a84:	00002c01 	andeq	r2, r0, r1, lsl #24
   13a88:	c6110000 	ldrgt	r0, [r1], -r0
   13a8c:	0500005b 	streq	r0, [r0, #-91]	; 0xffffffa5
   13a90:	0587017b 	streq	r0, [r7, #379]	; 0x17b
   13a94:	11040000 	mrsne	r0, (UNDEF: 4)
   13a98:	00005bd6 	ldrdeq	r5, [r0], -r6
   13a9c:	87017b05 	strhi	r7, [r1, -r5, lsl #22]
   13aa0:	08000005 	stmdaeq	r0, {r0, r2}
   13aa4:	005c9111 	subseq	r9, ip, r1, lsl r1
   13aa8:	017b0500 	cmneq	fp, r0, lsl #10
   13aac:	00000587 	andeq	r0, r0, r7, lsl #11
   13ab0:	583a110c 	ldmdapl	sl!, {r2, r3, r8, ip}
   13ab4:	7d050000 	stcvc	0, cr0, [r5, #-0]
   13ab8:	00002c01 	andeq	r2, r0, r1, lsl #24
   13abc:	bb111000 	bllt	457ac4 <_Min_Stack_Size+0x4578c4>
   13ac0:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
   13ac4:	010e017f 	tsteq	lr, pc, ror r1
   13ac8:	11140000 	tstne	r4, r0
   13acc:	00005788 	andeq	r5, r0, r8, lsl #15
   13ad0:	2c018105 	stfcsd	f0, [r1], {5}
   13ad4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   13ad8:	0056c011 	subseq	ip, r6, r1, lsl r0
   13adc:	01830500 	orreq	r0, r3, r0, lsl #10
   13ae0:	0000002c 	andeq	r0, r0, ip, lsr #32
   13ae4:	583f111c 	ldmdapl	pc!, {r2, r3, r4, r8, ip}	; <UNPREDICTABLE>
   13ae8:	84050000 	strhi	r0, [r5], #-0
   13aec:	0004d101 	andeq	sp, r4, r1, lsl #2
   13af0:	5f122000 	svcpl	0x00122000
   13af4:	0500706d 	streq	r7, [r0, #-109]	; 0xffffff93
   13af8:	06d40186 	ldrbeq	r0, [r4], r6, lsl #3
   13afc:	11240000 			; <UNDEFINED> instruction: 0x11240000
   13b00:	0000584f 	andeq	r5, r0, pc, asr #16
   13b04:	e5018805 	str	r8, [r1, #-2053]	; 0xfffff7fb
   13b08:	28000006 	stmdacs	r0, {r1, r2}
   13b0c:	00568a11 	subseq	r8, r6, r1, lsl sl
   13b10:	018a0500 	orreq	r0, sl, r0, lsl #10
   13b14:	0000002c 	andeq	r0, r0, ip, lsr #32
   13b18:	56d2112c 	ldrbpl	r1, [r2], ip, lsr #2
   13b1c:	8d050000 	stchi	0, cr0, [r5, #-0]
   13b20:	00002c01 	andeq	r2, r0, r1, lsl #24
   13b24:	4c113000 	ldcmi	0, cr3, [r1], {-0}
   13b28:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   13b2c:	010e018e 	smlabbeq	lr, lr, r1, r0
   13b30:	11340000 	teqne	r4, r0
   13b34:	000056da 	ldrdeq	r5, [r0], -sl
   13b38:	eb019005 	bl	77b54 <_Min_Stack_Size+0x77954>
   13b3c:	38000006 	stmdacc	r0, {r1, r2}
   13b40:	00590811 	subseq	r0, r9, r1, lsl r8
   13b44:	01910500 	orrseq	r0, r1, r0, lsl #10
   13b48:	000006f1 	strdeq	r0, [r0], -r1
   13b4c:	5745113c 	smlaldxpl	r1, r5, ip, r1
   13b50:	92050000 	andls	r0, r5, #0
   13b54:	00010e01 	andeq	r0, r1, r1, lsl #28
   13b58:	ed114000 	ldc	0, cr4, [r1, #-0]
   13b5c:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   13b60:	07020195 			; <UNDEFINED> instruction: 0x07020195
   13b64:	11440000 	mrsne	r0, (UNDEF: 68)
   13b68:	0000562d 	andeq	r5, r0, sp, lsr #12
   13b6c:	4c019d05 	stcmi	13, cr9, [r1], {5}
   13b70:	48000005 	stmdami	r0, {r0, r2}
   13b74:	00562011 	subseq	r2, r6, r1, lsl r0
   13b78:	019e0500 	orrseq	r0, lr, r0, lsl #10
   13b7c:	00000587 	andeq	r0, r0, r7, lsl #11
   13b80:	57791154 			; <UNDEFINED> instruction: 0x57791154
   13b84:	9f050000 	svcls	0x00050000
   13b88:	00070e01 	andeq	r0, r7, r1, lsl #28
   13b8c:	d5115800 	ldrle	r5, [r1, #-2048]	; 0xfffff800
   13b90:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
   13b94:	010e01a0 	smlatbeq	lr, r0, r1, r0
   13b98:	005c0000 	subseq	r0, ip, r0
   13b9c:	0233040d 	eorseq	r0, r3, #218103808	; 0xd000000
   13ba0:	110e0000 	mrsne	r0, (UNDEF: 14)
   13ba4:	68000058 	stmdavs	r0, {r3, r4, r6}
   13ba8:	048fb305 	streq	fp, [pc], #773	; 13bb0 <_Min_Stack_Size+0x139b0>
   13bac:	5f0f0000 	svcpl	0x000f0000
   13bb0:	b4050070 	strlt	r0, [r5], #-112	; 0xffffff90
   13bb4:	0000022d 	andeq	r0, r0, sp, lsr #4
   13bb8:	725f0f00 	subsvc	r0, pc, #0, 30
   13bbc:	2cb50500 	cfldr32cs	mvfx0, [r5]
   13bc0:	04000000 	streq	r0, [r0], #-0
   13bc4:	00775f0f 	rsbseq	r5, r7, pc, lsl #30
   13bc8:	002cb605 	eoreq	fp, ip, r5, lsl #12
   13bcc:	0b080000 	bleq	213bd4 <_Min_Stack_Size+0x2139d4>
   13bd0:	0000563c 	andeq	r5, r0, ip, lsr r6
   13bd4:	004fb705 	subeq	fp, pc, r5, lsl #14
   13bd8:	0b0c0000 	bleq	313be0 <_Min_Stack_Size+0x3139e0>
   13bdc:	000058ce 	andeq	r5, r0, lr, asr #17
   13be0:	004fb805 	subeq	fp, pc, r5, lsl #16
   13be4:	0f0e0000 	svceq	0x000e0000
   13be8:	0066625f 	rsbeq	r6, r6, pc, asr r2
   13bec:	0208b905 	andeq	fp, r8, #81920	; 0x14000
   13bf0:	0b100000 	bleq	413bf8 <_Min_Stack_Size+0x4139f8>
   13bf4:	000055e1 	andeq	r5, r0, r1, ror #11
   13bf8:	002cba05 	eoreq	fp, ip, r5, lsl #20
   13bfc:	0b180000 	bleq	613c04 <_Min_Stack_Size+0x613a04>
   13c00:	00000deb 	andeq	r0, r0, fp, ror #27
   13c04:	035fbd05 	cmpeq	pc, #320	; 0x140
   13c08:	0b1c0000 	bleq	713c10 <_Min_Stack_Size+0x713a10>
   13c0c:	00005625 	andeq	r5, r0, r5, lsr #12
   13c10:	010cc105 	tsteq	ip, r5, lsl #2
   13c14:	0b200000 	bleq	813c1c <_Min_Stack_Size+0x813a1c>
   13c18:	00004061 	andeq	r4, r0, r1, rrx
   13c1c:	04adc305 	strteq	ip, [sp], #773	; 0x305
   13c20:	0b240000 	bleq	913c28 <_Min_Stack_Size+0x913a28>
   13c24:	00003fbc 			; <UNDEFINED> instruction: 0x00003fbc
   13c28:	04dcc505 	ldrbeq	ip, [ip], #1285	; 0x505
   13c2c:	0b280000 	bleq	a13c34 <_Min_Stack_Size+0xa13a34>
   13c30:	00005877 	andeq	r5, r0, r7, ror r8
   13c34:	0500c805 	streq	ip, [r0, #-2053]	; 0xfffff7fb
   13c38:	0b2c0000 	bleq	b13c40 <_Min_Stack_Size+0xb13a40>
   13c3c:	00005917 	andeq	r5, r0, r7, lsl r9
   13c40:	051ac905 	ldreq	ip, [sl, #-2309]	; 0xfffff6fb
   13c44:	0f300000 	svceq	0x00300000
   13c48:	0062755f 	rsbeq	r7, r2, pc, asr r5
   13c4c:	0208cc05 	andeq	ip, r8, #1280	; 0x500
   13c50:	0f340000 	svceq	0x00340000
   13c54:	0070755f 	rsbseq	r7, r0, pc, asr r5
   13c58:	022dcd05 	eoreq	ip, sp, #320	; 0x140
   13c5c:	0f3c0000 	svceq	0x003c0000
   13c60:	0072755f 	rsbseq	r7, r2, pc, asr r5
   13c64:	002cce05 	eoreq	ip, ip, r5, lsl #28
   13c68:	0b400000 	bleq	1013c70 <_Min_Stack_Size+0x1013a70>
   13c6c:	00005610 	andeq	r5, r0, r0, lsl r6
   13c70:	0520d105 	streq	sp, [r0, #-261]!	; 0xfffffefb
   13c74:	0b440000 	bleq	1113c7c <_Min_Stack_Size+0x1113a7c>
   13c78:	000058f7 	strdeq	r5, [r0], -r7
   13c7c:	0530d205 	ldreq	sp, [r0, #-517]!	; 0xfffffdfb
   13c80:	0f470000 	svceq	0x00470000
   13c84:	00626c5f 	rsbeq	r6, r2, pc, asr ip
   13c88:	0208d505 	andeq	sp, r8, #20971520	; 0x1400000
   13c8c:	0b480000 	bleq	1213c94 <_Min_Stack_Size+0x1213a94>
   13c90:	00005643 	andeq	r5, r0, r3, asr #12
   13c94:	002cd805 	eoreq	sp, ip, r5, lsl #16
   13c98:	0b500000 	bleq	1413ca0 <_Min_Stack_Size+0x1413aa0>
   13c9c:	00006125 	andeq	r6, r0, r5, lsr #2
   13ca0:	007dd905 	rsbseq	sp, sp, r5, lsl #18
   13ca4:	0b540000 	bleq	1513cac <_Min_Stack_Size+0x1513aac>
   13ca8:	00003c01 	andeq	r3, r0, r1, lsl #24
   13cac:	0101e005 	tsteq	r1, r5
   13cb0:	0b580000 	bleq	1613cb8 <_Min_Stack_Size+0x1613ab8>
   13cb4:	00005819 	andeq	r5, r0, r9, lsl r8
   13cb8:	00f6e205 	rscseq	lr, r6, r5, lsl #4
   13cbc:	0b5c0000 	bleq	1713cc4 <_Min_Stack_Size+0x1713ac4>
   13cc0:	00005767 	andeq	r5, r0, r7, ror #14
   13cc4:	002ce305 	eoreq	lr, ip, r5, lsl #6
   13cc8:	00640000 	rsbeq	r0, r4, r0
   13ccc:	00002c13 	andeq	r2, r0, r3, lsl ip
   13cd0:	0004ad00 	andeq	sl, r4, r0, lsl #26
   13cd4:	035f1400 	cmpeq	pc, #0, 8
   13cd8:	0c140000 	ldceq	0, cr0, [r4], {-0}
   13cdc:	14000001 	strne	r0, [r0], #-1
   13ce0:	0000010e 	andeq	r0, r0, lr, lsl #2
   13ce4:	00002c14 	andeq	r2, r0, r4, lsl ip
   13ce8:	040d0000 	streq	r0, [sp], #-0
   13cec:	0000048f 	andeq	r0, r0, pc, lsl #9
   13cf0:	00002c13 	andeq	r2, r0, r3, lsl ip
   13cf4:	0004d100 	andeq	sp, r4, r0, lsl #2
   13cf8:	035f1400 	cmpeq	pc, #0, 8
   13cfc:	0c140000 	ldceq	0, cr0, [r4], {-0}
   13d00:	14000001 	strne	r0, [r0], #-1
   13d04:	000004d1 	ldrdeq	r0, [r0], -r1
   13d08:	00002c14 	andeq	r2, r0, r4, lsl ip
   13d0c:	040d0000 	streq	r0, [sp], #-0
   13d10:	000004d7 	ldrdeq	r0, [r0], -r7
   13d14:	00011415 	andeq	r1, r1, r5, lsl r4
   13d18:	b3040d00 	movwlt	r0, #19712	; 0x4d00
   13d1c:	13000004 	movwne	r0, #4
   13d20:	00000088 	andeq	r0, r0, r8, lsl #1
   13d24:	00000500 	andeq	r0, r0, r0, lsl #10
   13d28:	00035f14 	andeq	r5, r3, r4, lsl pc
   13d2c:	010c1400 	tsteq	ip, r0, lsl #8
   13d30:	88140000 	ldmdahi	r4, {}	; <UNPREDICTABLE>
   13d34:	14000000 	strne	r0, [r0], #-0
   13d38:	0000002c 	andeq	r0, r0, ip, lsr #32
   13d3c:	e2040d00 	and	r0, r4, #0, 26
   13d40:	13000004 	movwne	r0, #4
   13d44:	0000002c 	andeq	r0, r0, ip, lsr #32
   13d48:	0000051a 	andeq	r0, r0, sl, lsl r5
   13d4c:	00035f14 	andeq	r5, r3, r4, lsl pc
   13d50:	010c1400 	tsteq	ip, r0, lsl #8
   13d54:	0d000000 	stceq	0, cr0, [r0, #-0]
   13d58:	00050604 	andeq	r0, r5, r4, lsl #12
   13d5c:	00480800 	subeq	r0, r8, r0, lsl #16
   13d60:	05300000 	ldreq	r0, [r0, #-0]!
   13d64:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
   13d68:	02000000 	andeq	r0, r0, #0
   13d6c:	00480800 	subeq	r0, r8, r0, lsl #16
   13d70:	05400000 	strbeq	r0, [r0, #-0]
   13d74:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
   13d78:	00000000 	andeq	r0, r0, r0
   13d7c:	57ff0500 	ldrbpl	r0, [pc, r0, lsl #10]!
   13d80:	1d050000 	stcne	0, cr0, [r5, #-0]
   13d84:	00036501 	andeq	r6, r3, r1, lsl #10
   13d88:	60e41000 	rscvs	r1, r4, r0
   13d8c:	050c0000 	streq	r0, [ip, #-0]
   13d90:	05810121 	streq	r0, [r1, #289]	; 0x121
   13d94:	27110000 	ldrcs	r0, [r1, -r0]
   13d98:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   13d9c:	05810123 	streq	r0, [r1, #291]	; 0x123
   13da0:	11000000 	mrsne	r0, (UNDEF: 0)
   13da4:	000056df 	ldrdeq	r5, [r0], -pc	; <UNPREDICTABLE>
   13da8:	2c012405 	cfstrscs	mvf2, [r1], {5}
   13dac:	04000000 	streq	r0, [r0], #-0
   13db0:	0057e811 	subseq	lr, r7, r1, lsl r8
   13db4:	01250500 			; <UNDEFINED> instruction: 0x01250500
   13db8:	00000587 	andeq	r0, r0, r7, lsl #11
   13dbc:	040d0008 	streq	r0, [sp], #-8
   13dc0:	0000054c 	andeq	r0, r0, ip, asr #10
   13dc4:	0540040d 	strbeq	r0, [r0, #-1037]	; 0xfffffbf3
   13dc8:	b3100000 	tstlt	r0, #0
   13dcc:	18000055 	stmdane	r0, {r0, r2, r4, r6}
   13dd0:	cf013d05 	svcgt	0x00013d05
   13dd4:	11000005 	tstne	r0, r5
   13dd8:	00005861 	andeq	r5, r0, r1, ror #16
   13ddc:	cf013e05 	svcgt	0x00013e05
   13de0:	00000005 	andeq	r0, r0, r5
   13de4:	00589511 	subseq	r9, r8, r1, lsl r5
   13de8:	013f0500 	teqeq	pc, r0, lsl #10
   13dec:	000005cf 	andeq	r0, r0, pc, asr #11
   13df0:	58b41106 	ldmpl	r4!, {r1, r2, r8, ip}
   13df4:	40050000 	andmi	r0, r5, r0
   13df8:	00005601 	andeq	r5, r0, r1, lsl #12
   13dfc:	22110c00 	andscs	r0, r1, #0, 24
   13e00:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   13e04:	006b0143 	rsbeq	r0, fp, r3, asr #2
   13e08:	00100000 	andseq	r0, r0, r0
   13e0c:	00005608 	andeq	r5, r0, r8, lsl #12
   13e10:	0005df00 	andeq	sp, r5, r0, lsl #30
   13e14:	00ce0900 	sbceq	r0, lr, r0, lsl #18
   13e18:	00020000 	andeq	r0, r2, r0
   13e1c:	00563510 	subseq	r3, r6, r0, lsl r5
   13e20:	56051000 	strpl	r1, [r5], -r0
   13e24:	00062101 	andeq	r2, r6, r1, lsl #2
   13e28:	57521100 	ldrbpl	r1, [r2, -r0, lsl #2]
   13e2c:	59050000 	stmdbpl	r5, {}	; <UNPREDICTABLE>
   13e30:	00017901 	andeq	r7, r1, r1, lsl #18
   13e34:	99110000 	ldmdbls	r1, {}	; <UNPREDICTABLE>
   13e38:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   13e3c:	002c015a 	eoreq	r0, ip, sl, asr r1
   13e40:	11040000 	mrsne	r0, (UNDEF: 4)
   13e44:	0000592c 	andeq	r5, r0, ip, lsr #18
   13e48:	79015b05 	stmdbvc	r1, {r0, r2, r8, r9, fp, ip, lr}
   13e4c:	08000001 	stmdaeq	r0, {r0}
   13e50:	00579a11 	subseq	r9, r7, r1, lsl sl
   13e54:	015c0500 	cmpeq	ip, r0, lsl #10
   13e58:	00000621 	andeq	r0, r0, r1, lsr #12
   13e5c:	040d000c 	streq	r0, [sp], #-12
   13e60:	00000179 	andeq	r0, r0, r9, ror r1
   13e64:	0058a810 	subseq	sl, r8, r0, lsl r8
   13e68:	60055000 	andvs	r5, r5, r0
   13e6c:	0006c401 	andeq	ip, r6, r1, lsl #8
   13e70:	589b1100 	ldmpl	fp, {r8, ip}
   13e74:	63050000 	movwvs	r0, #20480	; 0x5000
   13e78:	00010e01 	andeq	r0, r1, r1, lsl #28
   13e7c:	2d110000 	ldccs	0, cr0, [r1, #-0]
   13e80:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   13e84:	00f60164 	rscseq	r0, r6, r4, ror #2
   13e88:	11040000 	mrsne	r0, (UNDEF: 4)
   13e8c:	000055f9 	strdeq	r5, [r0], -r9
   13e90:	f6016505 			; <UNDEFINED> instruction: 0xf6016505
   13e94:	0c000000 	stceq	0, cr0, [r0], {-0}
   13e98:	00591e11 	subseq	r1, r9, r1, lsl lr
   13e9c:	01660500 	cmneq	r6, r0, lsl #10
   13ea0:	000000f6 	strdeq	r0, [r0], -r6
   13ea4:	58e31114 	stmiapl	r3!, {r2, r4, r8, ip}^
   13ea8:	67050000 	strvs	r0, [r5, -r0]
   13eac:	0006c401 	andeq	ip, r6, r1, lsl #8
   13eb0:	c1111c00 	tstgt	r1, r0, lsl #24
   13eb4:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   13eb8:	002c0168 	eoreq	r0, ip, r8, ror #2
   13ebc:	11240000 			; <UNDEFINED> instruction: 0x11240000
   13ec0:	00005665 	andeq	r5, r0, r5, ror #12
   13ec4:	f6016905 			; <UNDEFINED> instruction: 0xf6016905
   13ec8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
   13ecc:	0055ea11 	subseq	lr, r5, r1, lsl sl
   13ed0:	016a0500 	cmneq	sl, r0, lsl #10
   13ed4:	000000f6 	strdeq	r0, [r0], -r6
   13ed8:	56541130 			; <UNDEFINED> instruction: 0x56541130
   13edc:	6b050000 	blvs	153ee4 <_Min_Stack_Size+0x153ce4>
   13ee0:	0000f601 	andeq	pc, r0, r1, lsl #12
   13ee4:	c6113800 	ldrgt	r3, [r1], -r0, lsl #16
   13ee8:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
   13eec:	00f6016c 	rscseq	r0, r6, ip, ror #2
   13ef0:	11400000 	mrsne	r0, (UNDEF: 64)
   13ef4:	000056af 	andeq	r5, r0, pc, lsr #13
   13ef8:	f6016d05 			; <UNDEFINED> instruction: 0xf6016d05
   13efc:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
   13f00:	01140800 	tsteq	r4, r0, lsl #16
   13f04:	06d40000 	ldrbeq	r0, [r4], r0
   13f08:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
   13f0c:	07000000 	streq	r0, [r0, -r0]
   13f10:	df040d00 	svcle	0x00040d00
   13f14:	16000005 	strne	r0, [r0], -r5
   13f18:	000006e5 	andeq	r0, r0, r5, ror #13
   13f1c:	00035f14 	andeq	r5, r3, r4, lsl pc
   13f20:	040d0000 	streq	r0, [sp], #-0
   13f24:	000006da 	ldrdeq	r0, [r0], -sl
   13f28:	058d040d 	streq	r0, [sp, #1037]	; 0x40d
   13f2c:	040d0000 	streq	r0, [sp], #-0
   13f30:	0000018f 	andeq	r0, r0, pc, lsl #3
   13f34:	00070216 	andeq	r0, r7, r6, lsl r2
   13f38:	002c1400 	eoreq	r1, ip, r0, lsl #8
   13f3c:	0d000000 	stceq	0, cr0, [r0, #-0]
   13f40:	00070804 	andeq	r0, r7, r4, lsl #16
   13f44:	f7040d00 			; <UNDEFINED> instruction: 0xf7040d00
   13f48:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
   13f4c:	00062704 	andeq	r2, r6, r4, lsl #14
   13f50:	60dd1700 	sbcsvs	r1, sp, r0, lsl #14
   13f54:	21010000 	mrscs	r0, (UNDEF: 1)
   13f58:	00000000 	andeq	r0, r0, r0
   13f5c:	0000001a 	andeq	r0, r0, sl, lsl r0
   13f60:	07749c01 	ldrbeq	r9, [r4, -r1, lsl #24]!
   13f64:	70180000 	andsvc	r0, r8, r0
   13f68:	01007274 	tsteq	r0, r4, ror r2
   13f6c:	00035f21 	andeq	r5, r3, r1, lsr #30
   13f70:	0021ed00 	eoreq	lr, r1, r0, lsl #26
   13f74:	60e51900 	rscvs	r1, r5, r0, lsl #18
   13f78:	21010000 	mrscs	r0, (UNDEF: 1)
   13f7c:	00000581 	andeq	r0, r0, r1, lsl #11
   13f80:	00002224 	andeq	r2, r0, r4, lsr #4
   13f84:	0000001a 	andeq	r0, r0, sl, lsl r0
   13f88:	00071400 	andeq	r1, r7, r0, lsl #8
   13f8c:	00075b00 	andeq	r5, r7, r0, lsl #22
   13f90:	50011b00 	andpl	r1, r1, r0, lsl #22
   13f94:	00007502 	andeq	r7, r0, r2, lsl #10
   13f98:	0000001c 	andeq	r0, r0, ip, lsl r0
   13f9c:	0008ef00 	andeq	lr, r8, r0, lsl #30
   13fa0:	50011b00 	andpl	r1, r1, r0, lsl #22
   13fa4:	5001f303 	andpl	pc, r1, r3, lsl #6
   13fa8:	0351011b 	cmpeq	r1, #-1073741818	; 0xc0000006
   13fac:	005101f3 	ldrsheq	r0, [r1], #-19	; 0xffffffed
   13fb0:	60c61d00 	sbcvs	r1, r6, r0, lsl #26
   13fb4:	00050000 	andeq	r0, r5, r0
   13fb8:	00000003 	andeq	r0, r0, r3
   13fbc:	0000c400 	andeq	ip, r0, r0, lsl #8
   13fc0:	d29c0100 	addsle	r0, ip, #0, 2
   13fc4:	18000008 	stmdane	r0, {r3}
   13fc8:	00727470 	rsbseq	r7, r2, r0, ror r4
   13fcc:	035f2d01 	cmpeq	pc, #1, 26	; 0x40
   13fd0:	225b0000 	subscs	r0, fp, #0
   13fd4:	001e0000 	andseq	r0, lr, r0
   13fd8:	26000000 	strcs	r0, [r0], -r0
   13fdc:	fc000000 	stc2	0, cr0, [r0], {-0}
   13fe0:	1f000007 	svcne	0x00000007
   13fe4:	39010069 	stmdbcc	r1, {r0, r3, r5, r6}
   13fe8:	0000002c 	andeq	r0, r0, ip, lsr #32
   13fec:	0000001e 	andeq	r0, r0, lr, lsl r0
   13ff0:	00001800 	andeq	r1, r0, r0, lsl #16
   13ff4:	0007eb00 	andeq	lr, r7, r0, lsl #22
   13ff8:	60d52000 	sbcsvs	r2, r5, r0
   13ffc:	3c010000 	stccc	0, cr0, [r1], {-0}
   14000:	00000179 	andeq	r0, r0, r9, ror r1
   14004:	0000229d 	muleq	r0, sp, r2
   14008:	00611620 	rsbeq	r1, r1, r0, lsr #12
   1400c:	793c0100 	ldmdbvc	ip!, {r8}
   14010:	b0000001 	andlt	r0, r0, r1
   14014:	21000022 	tstcs	r0, r2, lsr #32
   14018:	00000000 	andeq	r0, r0, r0
   1401c:	000008ef 	andeq	r0, r0, pc, ror #17
   14020:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
   14024:	00000075 	andeq	r0, r0, r5, ror r0
   14028:	00000021 	andeq	r0, r0, r1, lsr #32
   1402c:	0008ef00 	andeq	lr, r8, r0, lsl #30
   14030:	50011b00 	andpl	r1, r1, r0, lsl #22
   14034:	00007502 	andeq	r7, r0, r2, lsl #10
   14038:	00001a00 	andeq	r1, r0, r0, lsl #20
   1403c:	08ef0000 	stmiaeq	pc!, {}^	; <UNPREDICTABLE>
   14040:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
   14044:	011b0000 	tsteq	fp, r0
   14048:	00750250 	rsbseq	r0, r5, r0, asr r2
   1404c:	00001a00 	andeq	r1, r0, r0, lsl #20
   14050:	08ef0000 	stmiaeq	pc!, {}^	; <UNPREDICTABLE>
   14054:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
   14058:	011b0000 	tsteq	fp, r0
   1405c:	00750250 	rsbseq	r0, r5, r0, asr r2
   14060:	00001a00 	andeq	r1, r0, r0, lsl #20
   14064:	08ef0000 	stmiaeq	pc!, {}^	; <UNPREDICTABLE>
   14068:	08380000 	ldmdaeq	r8!, {}	; <UNPREDICTABLE>
   1406c:	011b0000 	tsteq	fp, r0
   14070:	00750250 	rsbseq	r0, r5, r0, asr r2
   14074:	00001a00 	andeq	r1, r0, r0, lsl #20
   14078:	08ef0000 	stmiaeq	pc!, {}^	; <UNPREDICTABLE>
   1407c:	084c0000 	stmdaeq	ip, {}^	; <UNPREDICTABLE>
   14080:	011b0000 	tsteq	fp, r0
   14084:	00750250 	rsbseq	r0, r5, r0, asr r2
   14088:	00001a00 	andeq	r1, r0, r0, lsl #20
   1408c:	08ef0000 	stmiaeq	pc!, {}^	; <UNPREDICTABLE>
   14090:	08600000 	stmdaeq	r0!, {}^	; <UNPREDICTABLE>
   14094:	011b0000 	tsteq	fp, r0
   14098:	00750250 	rsbseq	r0, r5, r0, asr r2
   1409c:	00001a00 	andeq	r1, r0, r0, lsl #20
   140a0:	08ef0000 	stmiaeq	pc!, {}^	; <UNPREDICTABLE>
   140a4:	08740000 	ldmdaeq	r4!, {}^	; <UNPREDICTABLE>
   140a8:	011b0000 	tsteq	fp, r0
   140ac:	00750250 	rsbseq	r0, r5, r0, asr r2
   140b0:	00001a00 	andeq	r1, r0, r0, lsl #20
   140b4:	08ef0000 	stmiaeq	pc!, {}^	; <UNPREDICTABLE>
   140b8:	08880000 	stmeq	r8, {}	; <UNPREDICTABLE>
   140bc:	011b0000 	tsteq	fp, r0
   140c0:	00750250 	rsbseq	r0, r5, r0, asr r2
   140c4:	00001a00 	andeq	r1, r0, r0, lsl #20
   140c8:	08ef0000 	stmiaeq	pc!, {}^	; <UNPREDICTABLE>
   140cc:	089c0000 	ldmeq	ip, {}	; <UNPREDICTABLE>
   140d0:	011b0000 	tsteq	fp, r0
   140d4:	00750250 	rsbseq	r0, r5, r0, asr r2
   140d8:	00001a00 	andeq	r1, r0, r0, lsl #20
   140dc:	08ef0000 	stmiaeq	pc!, {}^	; <UNPREDICTABLE>
   140e0:	08b00000 	ldmeq	r0!, {}	; <UNPREDICTABLE>
   140e4:	011b0000 	tsteq	fp, r0
   140e8:	00750250 	rsbseq	r0, r5, r0, asr r2
   140ec:	00002200 	andeq	r2, r0, r0, lsl #4
   140f0:	08c00000 	stmiaeq	r0, {}^	; <UNPREDICTABLE>
   140f4:	011b0000 	tsteq	fp, r0
   140f8:	00750250 	rsbseq	r0, r5, r0, asr r2
   140fc:	00001c00 	andeq	r1, r0, r0, lsl #24
   14100:	07140000 	ldreq	r0, [r4, -r0]
   14104:	011b0000 	tsteq	fp, r0
   14108:	01f30350 	mvnseq	r0, r0, asr r3
   1410c:	23000050 	movwcs	r0, #80	; 0x50
   14110:	00005c7c 	andeq	r5, r0, ip, ror ip
   14114:	5f02fd05 	svcpl	0x0002fd05
   14118:	24000003 	strcs	r0, [r0], #-3
   1411c:	00005886 	andeq	r5, r0, r6, lsl #17
   14120:	002c1a01 	eoreq	r1, ip, r1, lsl #20
   14124:	03050000 	movweq	r0, #20480	; 0x5000
   14128:	20004300 	andcs	r4, r0, r0, lsl #6
   1412c:	005cd325 	subseq	sp, ip, r5, lsr #6
   14130:	005cd300 	subseq	sp, ip, r0, lsl #6
   14134:	010c0600 	tsteq	ip, r0, lsl #12
   14138:	0007bc00 	andeq	fp, r7, r0, lsl #24
   1413c:	d3000400 	movwle	r0, #1024	; 0x400
   14140:	04000043 	streq	r0, [r0], #-67	; 0xffffffbd
   14144:	0054bf01 	subseq	fp, r4, r1, lsl #30
   14148:	5cf30c00 	ldclpl	12, cr0, [r3]
   1414c:	56e60000 	strbtpl	r0, [r6], r0
   14150:	12b40000 	adcsne	r0, r4, #0
   14154:	00140800 	andseq	r0, r4, r0, lsl #16
   14158:	7ace0000 	bvc	ff394160 <BootRAM+0xe304901>
   1415c:	01020000 	mrseq	r0, (UNDEF: 2)
   14160:	00019206 	andeq	r9, r1, r6, lsl #4
   14164:	08010200 	stmdaeq	r1, {r9}
   14168:	00000190 	muleq	r0, r0, r1
   1416c:	95050202 	strls	r0, [r5, #-514]	; 0xfffffdfe
   14170:	02000000 	andeq	r0, r0, #0
   14174:	01f20702 	mvnseq	r0, r2, lsl #14
   14178:	04020000 	streq	r0, [r2], #-0
   1417c:	0000bd05 	andeq	fp, r0, r5, lsl #26
   14180:	07040200 	streq	r0, [r4, -r0, lsl #4]
   14184:	000001c9 	andeq	r0, r0, r9, asr #3
   14188:	b8050802 	stmdalt	r5, {r1, fp}
   1418c:	02000000 	andeq	r0, r0, #0
   14190:	01c40708 	biceq	r0, r4, r8, lsl #14
   14194:	04030000 	streq	r0, [r3], #-0
   14198:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   1419c:	07040200 	streq	r0, [r4, -r0, lsl #4]
   141a0:	000001ce 	andeq	r0, r0, lr, asr #3
   141a4:	005cec04 	subseq	lr, ip, r4, lsl #24
   141a8:	64d80200 	ldrbvs	r0, [r8], #512	; 0x200
   141ac:	02000000 	andeq	r0, r0, #0
   141b0:	02f80408 	rscseq	r0, r8, #8, 8	; 0x8000000
   141b4:	04050000 	streq	r0, [r5], #-0
   141b8:	0057a404 	subseq	sl, r7, r4, lsl #8
   141bc:	5d070300 	stcpl	3, cr0, [r7, #-0]
   141c0:	04000000 	streq	r0, [r0], #-0
   141c4:	00005793 	muleq	r0, r3, r7
   141c8:	00412c04 	subeq	r2, r1, r4, lsl #24
   141cc:	7d040000 	stcvc	0, cr0, [r4, #-0]
   141d0:	04000058 	streq	r0, [r0], #-88	; 0xffffffa8
   141d4:	00004172 	andeq	r4, r0, r2, ror r1
   141d8:	57600600 	strbpl	r0, [r0, -r0, lsl #12]!
   141dc:	65020000 	strvs	r0, [r2, #-0]
   141e0:	00006401 	andeq	r6, r0, r1, lsl #8
   141e4:	04040700 	streq	r0, [r4], #-1792	; 0xfffff900
   141e8:	0000cba6 	andeq	ip, r0, r6, lsr #23
   141ec:	575a0800 	ldrbpl	r0, [sl, -r0, lsl #16]
   141f0:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
   141f4:	000000a0 	andeq	r0, r0, r0, lsr #1
   141f8:	0056a808 	subseq	sl, r6, r8, lsl #16
   141fc:	cba90400 	blgt	fea55204 <BootRAM+0xd9c59a5>
   14200:	00000000 	andeq	r0, r0, r0
   14204:	00002c09 	andeq	r2, r0, r9, lsl #24
   14208:	0000db00 	andeq	sp, r0, r0, lsl #22
   1420c:	00db0a00 	sbcseq	r0, fp, r0, lsl #20
   14210:	00030000 	andeq	r0, r3, r0
   14214:	59070402 	stmdbpl	r7, {r1, sl}
   14218:	0b000000 	bleq	14220 <_Min_Stack_Size+0x14020>
   1421c:	03a30408 			; <UNDEFINED> instruction: 0x03a30408
   14220:	0c000001 	stceq	0, cr0, [r0], {1}
   14224:	00005867 	andeq	r5, r0, r7, ror #16
   14228:	005da504 	subseq	sl, sp, r4, lsl #10
   1422c:	0c000000 	stceq	0, cr0, [r0], {-0}
   14230:	0000586f 	andeq	r5, r0, pc, ror #16
   14234:	00acaa04 	adceq	sl, ip, r4, lsl #20
   14238:	00040000 	andeq	r0, r4, r0
   1423c:	00580604 	subseq	r0, r8, r4, lsl #12
   14240:	e2ab0400 	adc	r0, fp, #0, 8
   14244:	04000000 	streq	r0, [r0], #-0
   14248:	00005679 	andeq	r5, r0, r9, ror r6
   1424c:	007faf04 	rsbseq	sl, pc, r4, lsl #30
   14250:	b9040000 	stmdblt	r4, {}	; <UNPREDICTABLE>
   14254:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   14258:	00004816 	andeq	r4, r0, r6, lsl r8
   1425c:	56820d00 	strpl	r0, [r2], r0, lsl #26
   14260:	05180000 	ldreq	r0, [r8, #-0]
   14264:	0001772d 	andeq	r7, r1, sp, lsr #14
   14268:	58270c00 	stmdapl	r7!, {sl, fp}
   1426c:	2f050000 	svccs	0x00050000
   14270:	00000177 	andeq	r0, r0, r7, ror r1
   14274:	6b5f0e00 	blvs	17d7a7c <_Min_Stack_Size+0x17d787c>
   14278:	5d300500 	cfldr32pl	mvfx0, [r0, #-0]
   1427c:	04000000 	streq	r0, [r0], #-0
   14280:	0058590c 	subseq	r5, r8, ip, lsl #18
   14284:	5d300500 	cfldr32pl	mvfx0, [r0, #-0]
   14288:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   1428c:	0056730c 	subseq	r7, r6, ip, lsl #6
   14290:	5d300500 	cfldr32pl	mvfx0, [r0, #-0]
   14294:	0c000000 	stceq	0, cr0, [r0], {-0}
   14298:	0058d40c 	subseq	sp, r8, ip, lsl #8
   1429c:	5d300500 	cfldr32pl	mvfx0, [r0, #-0]
   142a0:	10000000 	andne	r0, r0, r0
   142a4:	00785f0e 	rsbseq	r5, r8, lr, lsl #30
   142a8:	017d3105 	cmneq	sp, r5, lsl #2
   142ac:	00140000 	andseq	r0, r4, r0
   142b0:	0124040f 			; <UNDEFINED> instruction: 0x0124040f
   142b4:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
   142b8:	8d000001 	stchi	0, cr0, [r0, #-4]
   142bc:	0a000001 	beq	142c8 <_Min_Stack_Size+0x140c8>
   142c0:	000000db 	ldrdeq	r0, [r0], -fp
   142c4:	a30d0000 	movwge	r0, #53248	; 0xd000
   142c8:	24000056 	strcs	r0, [r0], #-86	; 0xffffffaa
   142cc:	02063505 	andeq	r3, r6, #20971520	; 0x1400000
   142d0:	070c0000 	streq	r0, [ip, -r0]
   142d4:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   142d8:	00005d37 	andeq	r5, r0, r7, lsr sp
   142dc:	8c0c0000 	stchi	0, cr0, [ip], {-0}
   142e0:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   142e4:	00005d38 	andeq	r5, r0, r8, lsr sp
   142e8:	160c0400 	strne	r0, [ip], -r0, lsl #8
   142ec:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   142f0:	00005d39 	andeq	r5, r0, r9, lsr sp
   142f4:	310c0800 	tstcc	ip, r0, lsl #16
   142f8:	05000059 	streq	r0, [r0, #-89]	; 0xffffffa7
   142fc:	00005d3a 	andeq	r5, r0, sl, lsr sp
   14300:	7f0c0c00 	svcvc	0x000c0c00
   14304:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
   14308:	00005d3b 	andeq	r5, r0, fp, lsr sp
   1430c:	6f0c1000 	svcvs	0x000c1000
   14310:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
   14314:	00005d3c 	andeq	r5, r0, ip, lsr sp
   14318:	d90c1400 	stmdble	ip, {sl, ip}
   1431c:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   14320:	00005d3d 	andeq	r5, r0, sp, lsr sp
   14324:	ee0c1800 	cdp	8, 0, cr1, cr12, cr0, {0}
   14328:	05000057 	streq	r0, [r0, #-87]	; 0xffffffa9
   1432c:	00005d3e 	andeq	r5, r0, lr, lsr sp
   14330:	fd0c1c00 	stc2	12, cr1, [ip, #-0]
   14334:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   14338:	00005d3f 	andeq	r5, r0, pc, lsr sp
   1433c:	0d002000 	stceq	0, cr2, [r0, #-0]
   14340:	000057f8 	strdeq	r5, [r0], -r8
   14344:	2b730508 	blcs	1cd576c <_Min_Stack_Size+0x1cd556c>
   14348:	0c000002 	stceq	0, cr0, [r0], {2}
   1434c:	00003a5f 	andeq	r3, r0, pc, asr sl
   14350:	022b7405 	eoreq	r7, fp, #83886080	; 0x5000000
   14354:	0c000000 	stceq	0, cr0, [r0], {-0}
   14358:	00005da3 	andeq	r5, r0, r3, lsr #27
   1435c:	005d7505 	subseq	r7, sp, r5, lsl #10
   14360:	00040000 	andeq	r0, r4, r0
   14364:	002c040f 	eoreq	r0, ip, pc, lsl #8
   14368:	ad100000 	ldcge	0, cr0, [r0, #-0]
   1436c:	60000058 	andvs	r0, r0, r8, asr r0
   14370:	5d017205 	sfmpl	f7, 4, [r1, #-20]	; 0xffffffec
   14374:	11000003 	tstne	r0, r3
   14378:	00005885 	andeq	r5, r0, r5, lsl #17
   1437c:	5d017605 	stcpl	6, cr7, [r1, #-20]	; 0xffffffec
   14380:	00000000 	andeq	r0, r0, r0
   14384:	005bc611 	subseq	ip, fp, r1, lsl r6
   14388:	017b0500 	cmneq	fp, r0, lsl #10
   1438c:	00000592 	muleq	r0, r2, r5
   14390:	5bd61104 	blpl	ff5987a8 <BootRAM+0xe508f49>
   14394:	7b050000 	blvc	15439c <_Min_Stack_Size+0x15419c>
   14398:	00059201 	andeq	r9, r5, r1, lsl #4
   1439c:	91110800 	tstls	r1, r0, lsl #16
   143a0:	0500005c 	streq	r0, [r0, #-92]	; 0xffffffa4
   143a4:	0592017b 	ldreq	r0, [r2, #379]	; 0x17b
   143a8:	110c0000 	mrsne	r0, (UNDEF: 12)
   143ac:	0000583a 	andeq	r5, r0, sl, lsr r8
   143b0:	5d017d05 	stcpl	13, cr7, [r1, #-20]	; 0xffffffec
   143b4:	10000000 	andne	r0, r0, r0
   143b8:	0055bb11 	subseq	fp, r5, r1, lsl fp
   143bc:	017f0500 	cmneq	pc, r0, lsl #10
   143c0:	000004ab 	andeq	r0, r0, fp, lsr #9
   143c4:	57881114 	usada8pl	r8, r4, r1, r1
   143c8:	81050000 	mrshi	r0, (UNDEF: 5)
   143cc:	00005d01 	andeq	r5, r0, r1, lsl #26
   143d0:	c0111800 	andsgt	r1, r1, r0, lsl #16
   143d4:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   143d8:	005d0183 	subseq	r0, sp, r3, lsl #3
   143dc:	111c0000 	tstne	ip, r0
   143e0:	0000583f 	andeq	r5, r0, pc, lsr r8
   143e4:	dc018405 	cfstrsle	mvf8, [r1], {5}
   143e8:	20000004 	andcs	r0, r0, r4
   143ec:	706d5f12 	rsbvc	r5, sp, r2, lsl pc
   143f0:	01860500 	orreq	r0, r6, r0, lsl #10
   143f4:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   143f8:	584f1124 	stmdapl	pc, {r2, r5, r8, ip}^	; <UNPREDICTABLE>
   143fc:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
   14400:	0006f001 	andeq	pc, r6, r1
   14404:	8a112800 	bhi	45e40c <_Min_Stack_Size+0x45e20c>
   14408:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   1440c:	005d018a 	subseq	r0, sp, sl, lsl #3
   14410:	112c0000 			; <UNDEFINED> instruction: 0x112c0000
   14414:	000056d2 	ldrdeq	r5, [r0], -r2
   14418:	5d018d05 	stcpl	13, cr8, [r1, #-20]	; 0xffffffec
   1441c:	30000000 	andcc	r0, r0, r0
   14420:	00564c11 	subseq	r4, r6, r1, lsl ip
   14424:	018e0500 	orreq	r0, lr, r0, lsl #10
   14428:	000004ab 	andeq	r0, r0, fp, lsr #9
   1442c:	56da1134 			; <UNDEFINED> instruction: 0x56da1134
   14430:	90050000 	andls	r0, r5, r0
   14434:	0006f601 	andeq	pc, r6, r1, lsl #12
   14438:	08113800 	ldmdaeq	r1, {fp, ip, sp}
   1443c:	05000059 	streq	r0, [r0, #-89]	; 0xffffffa7
   14440:	06fc0191 	usateq	r0, #28, r1, lsl #3
   14444:	113c0000 	teqne	ip, r0
   14448:	00005745 	andeq	r5, r0, r5, asr #14
   1444c:	ab019205 	blge	78c68 <_Min_Stack_Size+0x78a68>
   14450:	40000004 	andmi	r0, r0, r4
   14454:	0058ed11 	subseq	lr, r8, r1, lsl sp
   14458:	01950500 	orrseq	r0, r5, r0, lsl #10
   1445c:	0000070d 	andeq	r0, r0, sp, lsl #14
   14460:	562d1144 	strtpl	r1, [sp], -r4, asr #2
   14464:	9d050000 	stcls	0, cr0, [r5, #-0]
   14468:	00055701 	andeq	r5, r5, r1, lsl #14
   1446c:	20114800 	andscs	r4, r1, r0, lsl #16
   14470:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   14474:	0592019e 	ldreq	r0, [r2, #414]	; 0x19e
   14478:	11540000 	cmpne	r4, r0
   1447c:	00005779 	andeq	r5, r0, r9, ror r7
   14480:	19019f05 	stmdbne	r1, {r0, r2, r8, r9, sl, fp, ip, pc}
   14484:	58000007 	stmdapl	r0, {r0, r1, r2}
   14488:	0055d511 	subseq	sp, r5, r1, lsl r5
   1448c:	01a00500 	lsleq	r0, r0, #10
   14490:	000004ab 	andeq	r0, r0, fp, lsr #9
   14494:	040f005c 	streq	r0, [pc], #-92	; 1449c <_Min_Stack_Size+0x1429c>
   14498:	00000231 	andeq	r0, r0, r1, lsr r2
   1449c:	0058110d 	subseq	r1, r8, sp, lsl #2
   144a0:	b3056800 	movwlt	r6, #22528	; 0x5800
   144a4:	0000048d 	andeq	r0, r0, sp, lsl #9
   144a8:	00705f0e 	rsbseq	r5, r0, lr, lsl #30
   144ac:	022bb405 	eoreq	fp, fp, #83886080	; 0x5000000
   144b0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   144b4:	0500725f 	streq	r7, [r0, #-607]	; 0xfffffda1
   144b8:	00005db5 			; <UNDEFINED> instruction: 0x00005db5
   144bc:	5f0e0400 	svcpl	0x000e0400
   144c0:	b6050077 			; <UNDEFINED> instruction: 0xb6050077
   144c4:	0000005d 	andeq	r0, r0, sp, asr r0
   144c8:	563c0c08 	ldrtpl	r0, [ip], -r8, lsl #24
   144cc:	b7050000 	strlt	r0, [r5, -r0]
   144d0:	00000033 	andeq	r0, r0, r3, lsr r0
   144d4:	58ce0c0c 	stmiapl	lr, {r2, r3, sl, fp}^
   144d8:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
   144dc:	00000033 	andeq	r0, r0, r3, lsr r0
   144e0:	625f0e0e 	subsvs	r0, pc, #14, 28	; 0xe0
   144e4:	b9050066 	stmdblt	r5, {r1, r2, r5, r6}
   144e8:	00000206 	andeq	r0, r0, r6, lsl #4
   144ec:	55e10c10 	strbpl	r0, [r1, #3088]!	; 0xc10
   144f0:	ba050000 	blt	1544f8 <_Min_Stack_Size+0x1542f8>
   144f4:	0000005d 	andeq	r0, r0, sp, asr r0
   144f8:	0deb0c18 	stcleq	12, cr0, [fp, #96]!	; 0x60
   144fc:	bd050000 	stclt	0, cr0, [r5, #-0]
   14500:	0000035d 	andeq	r0, r0, sp, asr r3
   14504:	56250c1c 			; <UNDEFINED> instruction: 0x56250c1c
   14508:	c1050000 	mrsgt	r0, (UNDEF: 5)
   1450c:	0000007d 	andeq	r0, r0, sp, ror r0
   14510:	40610c20 	rsbmi	r0, r1, r0, lsr #24
   14514:	c3050000 	movwgt	r0, #20480	; 0x5000
   14518:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
   1451c:	3fbc0c24 	svccc	0x00bc0c24
   14520:	c5050000 	strgt	r0, [r5, #-0]
   14524:	000004e7 	andeq	r0, r0, r7, ror #9
   14528:	58770c28 	ldmdapl	r7!, {r3, r5, sl, fp}^
   1452c:	c8050000 	stmdagt	r5, {}	; <UNPREDICTABLE>
   14530:	0000050b 	andeq	r0, r0, fp, lsl #10
   14534:	59170c2c 	ldmdbpl	r7, {r2, r3, r5, sl, fp}
   14538:	c9050000 	stmdbgt	r5, {}	; <UNPREDICTABLE>
   1453c:	00000525 	andeq	r0, r0, r5, lsr #10
   14540:	755f0e30 	ldrbvc	r0, [pc, #-3632]	; 13718 <_Min_Stack_Size+0x13518>
   14544:	cc050062 	stcgt	0, cr0, [r5], {98}	; 0x62
   14548:	00000206 	andeq	r0, r0, r6, lsl #4
   1454c:	755f0e34 	ldrbvc	r0, [pc, #-3636]	; 13720 <_Min_Stack_Size+0x13520>
   14550:	cd050070 	stcgt	0, cr0, [r5, #-448]	; 0xfffffe40
   14554:	0000022b 	andeq	r0, r0, fp, lsr #4
   14558:	755f0e3c 	ldrbvc	r0, [pc, #-3644]	; 13724 <_Min_Stack_Size+0x13524>
   1455c:	ce050072 	mcrgt	0, 0, r0, cr5, cr2, {3}
   14560:	0000005d 	andeq	r0, r0, sp, asr r0
   14564:	56100c40 	ldrpl	r0, [r0], -r0, asr #24
   14568:	d1050000 	mrsle	r0, (UNDEF: 5)
   1456c:	0000052b 	andeq	r0, r0, fp, lsr #10
   14570:	58f70c44 	ldmpl	r7!, {r2, r6, sl, fp}^
   14574:	d2050000 	andle	r0, r5, #0
   14578:	0000053b 	andeq	r0, r0, fp, lsr r5
   1457c:	6c5f0e47 	mrrcvs	14, 4, r0, pc, cr7	; <UNPREDICTABLE>
   14580:	d5050062 	strle	r0, [r5, #-98]	; 0xffffff9e
   14584:	00000206 	andeq	r0, r0, r6, lsl #4
   14588:	56430c48 	strbpl	r0, [r3], -r8, asr #24
   1458c:	d8050000 	stmdale	r5, {}	; <UNPREDICTABLE>
   14590:	0000005d 	andeq	r0, r0, sp, asr r0
   14594:	61250c50 			; <UNDEFINED> instruction: 0x61250c50
   14598:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
   1459c:	0000008a 	andeq	r0, r0, sl, lsl #1
   145a0:	3c010c54 	stccc	12, cr0, [r1], {84}	; 0x54
   145a4:	e0050000 	and	r0, r5, r0
   145a8:	0000010e 	andeq	r0, r0, lr, lsl #2
   145ac:	58190c58 	ldmdapl	r9, {r3, r4, r6, sl, fp}
   145b0:	e2050000 	and	r0, r5, #0
   145b4:	00000103 	andeq	r0, r0, r3, lsl #2
   145b8:	57670c5c 			; <UNDEFINED> instruction: 0x57670c5c
   145bc:	e3050000 	movw	r0, #20480	; 0x5000
   145c0:	0000005d 	andeq	r0, r0, sp, asr r0
   145c4:	5d130064 	ldcpl	0, cr0, [r3, #-400]	; 0xfffffe70
   145c8:	ab000000 	blge	145d0 <_Min_Stack_Size+0x143d0>
   145cc:	14000004 	strne	r0, [r0], #-4
   145d0:	0000035d 	andeq	r0, r0, sp, asr r3
   145d4:	00007d14 	andeq	r7, r0, r4, lsl sp
   145d8:	04ab1400 	strteq	r1, [fp], #1024	; 0x400
   145dc:	5d140000 	ldcpl	0, cr0, [r4, #-0]
   145e0:	00000000 	andeq	r0, r0, r0
   145e4:	04b1040f 	ldrteq	r0, [r1], #1039	; 0x40f
   145e8:	01020000 	mrseq	r0, (UNDEF: 2)
   145ec:	00019908 	andeq	r9, r1, r8, lsl #18
   145f0:	8d040f00 	stchi	15, cr0, [r4, #-0]
   145f4:	13000004 	movwne	r0, #4
   145f8:	0000005d 	andeq	r0, r0, sp, asr r0
   145fc:	000004dc 	ldrdeq	r0, [r0], -ip
   14600:	00035d14 	andeq	r5, r3, r4, lsl sp
   14604:	007d1400 	rsbseq	r1, sp, r0, lsl #8
   14608:	dc140000 	ldcle	0, cr0, [r4], {-0}
   1460c:	14000004 	strne	r0, [r0], #-4
   14610:	0000005d 	andeq	r0, r0, sp, asr r0
   14614:	e2040f00 	and	r0, r4, #0, 30
   14618:	15000004 	strne	r0, [r0, #-4]
   1461c:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
   14620:	04be040f 	ldrteq	r0, [lr], #1039	; 0x40f
   14624:	95130000 	ldrls	r0, [r3, #-0]
   14628:	0b000000 	bleq	14630 <_Min_Stack_Size+0x14430>
   1462c:	14000005 	strne	r0, [r0], #-5
   14630:	0000035d 	andeq	r0, r0, sp, asr r3
   14634:	00007d14 	andeq	r7, r0, r4, lsl sp
   14638:	00951400 	addseq	r1, r5, r0, lsl #8
   1463c:	5d140000 	ldcpl	0, cr0, [r4, #-0]
   14640:	00000000 	andeq	r0, r0, r0
   14644:	04ed040f 	strbteq	r0, [sp], #1039	; 0x40f
   14648:	5d130000 	ldcpl	0, cr0, [r3, #-0]
   1464c:	25000000 	strcs	r0, [r0, #-0]
   14650:	14000005 	strne	r0, [r0], #-5
   14654:	0000035d 	andeq	r0, r0, sp, asr r3
   14658:	00007d14 	andeq	r7, r0, r4, lsl sp
   1465c:	040f0000 	streq	r0, [pc], #-0	; 14664 <_Min_Stack_Size+0x14464>
   14660:	00000511 	andeq	r0, r0, r1, lsl r5
   14664:	00002c09 	andeq	r2, r0, r9, lsl #24
   14668:	00053b00 	andeq	r3, r5, r0, lsl #22
   1466c:	00db0a00 	sbcseq	r0, fp, r0, lsl #20
   14670:	00020000 	andeq	r0, r2, r0
   14674:	00002c09 	andeq	r2, r0, r9, lsl #24
   14678:	00054b00 	andeq	r4, r5, r0, lsl #22
   1467c:	00db0a00 	sbcseq	r0, fp, r0, lsl #20
   14680:	00000000 	andeq	r0, r0, r0
   14684:	0057ff06 	subseq	pc, r7, r6, lsl #30
   14688:	011d0500 	tsteq	sp, r0, lsl #10
   1468c:	00000363 	andeq	r0, r0, r3, ror #6
   14690:	0060e410 	rsbeq	lr, r0, r0, lsl r4
   14694:	21050c00 	tstcs	r5, r0, lsl #24
   14698:	00058c01 	andeq	r8, r5, r1, lsl #24
   1469c:	58271100 	stmdapl	r7!, {r8, ip}
   146a0:	23050000 	movwcs	r0, #20480	; 0x5000
   146a4:	00058c01 	andeq	r8, r5, r1, lsl #24
   146a8:	df110000 	svcle	0x00110000
   146ac:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   146b0:	005d0124 	subseq	r0, sp, r4, lsr #2
   146b4:	11040000 	mrsne	r0, (UNDEF: 4)
   146b8:	000057e8 	andeq	r5, r0, r8, ror #15
   146bc:	92012505 	andls	r2, r1, #20971520	; 0x1400000
   146c0:	08000005 	stmdaeq	r0, {r0, r2}
   146c4:	57040f00 	strpl	r0, [r4, -r0, lsl #30]
   146c8:	0f000005 	svceq	0x00000005
   146cc:	00054b04 	andeq	r4, r5, r4, lsl #22
   146d0:	55b31000 	ldrpl	r1, [r3, #0]!
   146d4:	05180000 	ldreq	r0, [r8, #-0]
   146d8:	05da013d 	ldrbeq	r0, [sl, #317]	; 0x13d
   146dc:	61110000 	tstvs	r1, r0
   146e0:	05000058 	streq	r0, [r0, #-88]	; 0xffffffa8
   146e4:	05da013e 	ldrbeq	r0, [sl, #318]	; 0x13e
   146e8:	11000000 	mrsne	r0, (UNDEF: 0)
   146ec:	00005895 	muleq	r0, r5, r8
   146f0:	da013f05 	ble	6430c <_Min_Stack_Size+0x6410c>
   146f4:	06000005 	streq	r0, [r0], -r5
   146f8:	0058b411 	subseq	fp, r8, r1, lsl r4
   146fc:	01400500 	cmpeq	r0, r0, lsl #10
   14700:	0000003a 	andeq	r0, r0, sl, lsr r0
   14704:	5822110c 	stmdapl	r2!, {r2, r3, r8, ip}
   14708:	43050000 	movwmi	r0, #20480	; 0x5000
   1470c:	00005601 	andeq	r5, r0, r1, lsl #12
   14710:	09001000 	stmdbeq	r0, {ip}
   14714:	0000003a 	andeq	r0, r0, sl, lsr r0
   14718:	000005ea 	andeq	r0, r0, sl, ror #11
   1471c:	0000db0a 	andeq	sp, r0, sl, lsl #22
   14720:	10000200 	andne	r0, r0, r0, lsl #4
   14724:	00005635 	andeq	r5, r0, r5, lsr r6
   14728:	01560510 	cmpeq	r6, r0, lsl r5
   1472c:	0000062c 	andeq	r0, r0, ip, lsr #12
   14730:	00575211 	subseq	r5, r7, r1, lsl r2
   14734:	01590500 	cmpeq	r9, r0, lsl #10
   14738:	00000177 	andeq	r0, r0, r7, ror r1
   1473c:	56991100 	ldrpl	r1, [r9], r0, lsl #2
   14740:	5a050000 	bpl	154748 <_Min_Stack_Size+0x154548>
   14744:	00005d01 	andeq	r5, r0, r1, lsl #26
   14748:	2c110400 	cfldrscs	mvf0, [r1], {-0}
   1474c:	05000059 	streq	r0, [r0, #-89]	; 0xffffffa7
   14750:	0177015b 	cmneq	r7, fp, asr r1
   14754:	11080000 	mrsne	r0, (UNDEF: 8)
   14758:	0000579a 	muleq	r0, sl, r7
   1475c:	2c015c05 	stccs	12, cr5, [r1], {5}
   14760:	0c000006 	stceq	0, cr0, [r0], {6}
   14764:	77040f00 	strvc	r0, [r4, -r0, lsl #30]
   14768:	10000001 	andne	r0, r0, r1
   1476c:	000058a8 	andeq	r5, r0, r8, lsr #17
   14770:	01600550 	cmneq	r0, r0, asr r5
   14774:	000006cf 	andeq	r0, r0, pc, asr #13
   14778:	00589b11 	subseq	r9, r8, r1, lsl fp
   1477c:	01630500 	cmneq	r3, r0, lsl #10
   14780:	000004ab 	andeq	r0, r0, fp, lsr #9
   14784:	582d1100 	stmdapl	sp!, {r8, ip}
   14788:	64050000 	strvs	r0, [r5], #-0
   1478c:	00010301 	andeq	r0, r1, r1, lsl #6
   14790:	f9110400 			; <UNDEFINED> instruction: 0xf9110400
   14794:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
   14798:	01030165 	tsteq	r3, r5, ror #2
   1479c:	110c0000 	mrsne	r0, (UNDEF: 12)
   147a0:	0000591e 	andeq	r5, r0, lr, lsl r9
   147a4:	03016605 	movweq	r6, #5637	; 0x1605
   147a8:	14000001 	strne	r0, [r0], #-1
   147ac:	0058e311 	subseq	lr, r8, r1, lsl r3
   147b0:	01670500 	cmneq	r7, r0, lsl #10
   147b4:	000006cf 	andeq	r0, r0, pc, asr #13
   147b8:	58c1111c 	stmiapl	r1, {r2, r3, r4, r8, ip}^
   147bc:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
   147c0:	00005d01 	andeq	r5, r0, r1, lsl #26
   147c4:	65112400 	ldrvs	r2, [r1, #-1024]	; 0xfffffc00
   147c8:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   147cc:	01030169 	tsteq	r3, r9, ror #2
   147d0:	11280000 			; <UNDEFINED> instruction: 0x11280000
   147d4:	000055ea 	andeq	r5, r0, sl, ror #11
   147d8:	03016a05 	movweq	r6, #6661	; 0x1a05
   147dc:	30000001 	andcc	r0, r0, r1
   147e0:	00565411 	subseq	r5, r6, r1, lsl r4
   147e4:	016b0500 	cmneq	fp, r0, lsl #10
   147e8:	00000103 	andeq	r0, r0, r3, lsl #2
   147ec:	55c61138 	strbpl	r1, [r6, #312]	; 0x138
   147f0:	6c050000 	stcvs	0, cr0, [r5], {-0}
   147f4:	00010301 	andeq	r0, r1, r1, lsl #6
   147f8:	af114000 	svcge	0x00114000
   147fc:	05000056 	streq	r0, [r0, #-86]	; 0xffffffaa
   14800:	0103016d 	tsteq	r3, sp, ror #2
   14804:	00480000 	subeq	r0, r8, r0
   14808:	0004b109 	andeq	fp, r4, r9, lsl #2
   1480c:	0006df00 	andeq	sp, r6, r0, lsl #30
   14810:	00db0a00 	sbcseq	r0, fp, r0, lsl #20
   14814:	00070000 	andeq	r0, r7, r0
   14818:	05ea040f 	strbeq	r0, [sl, #1039]!	; 0x40f
   1481c:	f0160000 			; <UNDEFINED> instruction: 0xf0160000
   14820:	14000006 	strne	r0, [r0], #-6
   14824:	0000035d 	andeq	r0, r0, sp, asr r3
   14828:	e5040f00 	str	r0, [r4, #-3840]	; 0xfffff100
   1482c:	0f000006 	svceq	0x00000006
   14830:	00059804 	andeq	r9, r5, r4, lsl #16
   14834:	8d040f00 	stchi	15, cr0, [r4, #-0]
   14838:	16000001 	strne	r0, [r0], -r1
   1483c:	0000070d 	andeq	r0, r0, sp, lsl #14
   14840:	00005d14 	andeq	r5, r0, r4, lsl sp
   14844:	040f0000 	streq	r0, [pc], #-0	; 1484c <_Min_Stack_Size+0x1464c>
   14848:	00000713 	andeq	r0, r0, r3, lsl r7
   1484c:	0702040f 	streq	r0, [r2, -pc, lsl #8]
   14850:	040f0000 	streq	r0, [pc], #-0	; 14858 <_Min_Stack_Size+0x14658>
   14854:	00000632 	andeq	r0, r0, r2, lsr r6
   14858:	005ce504 	subseq	lr, ip, r4, lsl #10
   1485c:	6b7b0100 	blvs	1ed4c64 <_Min_Stack_Size+0x1ed4a64>
   14860:	0d000000 	stceq	0, cr0, [r0, #-0]
   14864:	00005d38 	andeq	r5, r0, r8, lsr sp
   14868:	4f7d0108 	svcmi	0x007d0108
   1486c:	0c000007 	stceq	0, cr0, [r0], {7}
   14870:	00005da4 	andeq	r5, r0, r4, lsr #27
   14874:	00418f01 	subeq	r8, r1, r1, lsl #30
   14878:	0c000000 	stceq	0, cr0, [r0], {-0}
   1487c:	00005828 	andeq	r5, r0, r8, lsr #16
   14880:	074f9201 	strbeq	r9, [pc, -r1, lsl #4]
   14884:	00040000 	andeq	r0, r4, r0
   14888:	072a040f 	streq	r0, [sl, -pc, lsl #8]!
   1488c:	3f040000 	svccc	0x00040000
   14890:	0100005d 	qaddeq	r0, sp, r0
   14894:	00072a93 	muleq	r7, r3, sl
   14898:	60b01700 	adcsvs	r1, r0, r0, lsl #14
   1489c:	0d010000 	stceq	0, cr0, [r1, #-0]
   148a0:	00071f02 	andeq	r1, r7, r2, lsl #30
   148a4:	0012b400 	andseq	fp, r2, r0, lsl #8
   148a8:	00001408 	andeq	r1, r0, r8, lsl #8
   148ac:	b99c0100 	ldmiblt	ip, {r8}
   148b0:	18000007 	stmdane	r0, {r0, r1, r2}
   148b4:	00005d45 	andeq	r5, r0, r5, asr #26
   148b8:	5d020d01 	stcpl	13, cr0, [r2, #-4]
   148bc:	d9000003 	stmdble	r0, {r0, r1}
   148c0:	19000022 	stmdbne	r0, {r1, r5}
   148c4:	00727470 	rsbseq	r7, r2, r0, ror r4
   148c8:	7d020d01 	stcvc	13, cr0, [r2, #-4]
   148cc:	fa000000 	blx	148d4 <_Min_Stack_Size+0x146d4>
   148d0:	1a000022 	bne	14960 <_Min_Stack_Size+0x14760>
   148d4:	0f010063 	svceq	0x00010063
   148d8:	0007b902 	andeq	fp, r7, r2, lsl #18
   148dc:	00231b00 	eoreq	r1, r3, r0, lsl #22
   148e0:	611e1b00 	tstvs	lr, r0, lsl #22
   148e4:	10010000 	andne	r0, r1, r0
   148e8:	00005d02 	andeq	r5, r0, r2, lsl #26
   148ec:	00236c00 	eoreq	r6, r3, r0, lsl #24
   148f0:	040f0000 	streq	r0, [pc], #-0	; 148f8 <_Min_Stack_Size+0x146f8>
   148f4:	00000755 	andeq	r0, r0, r5, asr r7
   148f8:	00009900 	andeq	r9, r0, r0, lsl #18
   148fc:	34000400 	strcc	r0, [r0], #-1024	; 0xfffffc00
   14900:	04000045 	streq	r0, [r0], #-69	; 0xffffffbb
   14904:	0061bc01 	rsbeq	fp, r1, r1, lsl #24
   14908:	61860c00 	orrvs	r0, r6, r0, lsl #24
   1490c:	612d0000 			; <UNDEFINED> instruction: 0x612d0000
   14910:	12c80000 	sbcne	r0, r8, #0
   14914:	001c0800 	andseq	r0, ip, r0, lsl #16
   14918:	7bd00000 	blvc	ff414920 <BootRAM+0xe3850c1>
   1491c:	1c020000 	stcne	0, cr0, [r2], {-0}
   14920:	01000060 	tsteq	r0, r0, rrx
   14924:	00007b07 	andeq	r7, r0, r7, lsl #22
   14928:	0012c800 	andseq	ip, r2, r0, lsl #16
   1492c:	00001c08 	andeq	r1, r0, r8, lsl #24
   14930:	7b9c0100 	blvc	fe714d38 <BootRAM+0xd6854d9>
   14934:	03000000 	movweq	r0, #0
   14938:	00005fe1 	andeq	r5, r0, r1, ror #31
   1493c:	007d0801 	rsbseq	r0, sp, r1, lsl #16
   14940:	238e0000 	orrcs	r0, lr, #0
   14944:	65040000 	strvs	r0, [r4, #-0]
   14948:	0100646e 	tsteq	r0, lr, ror #8
   1494c:	0000840a 	andeq	r8, r0, sl, lsl #8
   14950:	61b30500 			; <UNDEFINED> instruction: 0x61b30500
   14954:	0b010000 	bleq	5495c <_Min_Stack_Size+0x5475c>
   14958:	0000008b 	andeq	r0, r0, fp, lsl #1
   1495c:	00f40305 	rscseq	r0, r4, r5, lsl #6
   14960:	ae052000 	cdpge	0, 0, cr2, cr5, cr0, {0}
   14964:	01000061 	tsteq	r0, r1, rrx
   14968:	00008b0c 	andeq	r8, r0, ip, lsl #22
   1496c:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
   14970:	00200000 	eoreq	r0, r0, r0
   14974:	04070406 	streq	r0, [r7], #-1030	; 0xfffffbfa
   14978:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   1497c:	08010800 	stmdaeq	r1, {fp}
   14980:	00000199 	muleq	r0, r9, r1
   14984:	00840409 	addeq	r0, r4, r9, lsl #8
   14988:	65040000 	strvs	r0, [r4, #-0]
   1498c:	0100646e 	tsteq	r0, lr, ror #8
   14990:	0000840a 	andeq	r8, r0, sl, lsl #8
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
{
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
}
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	1117550e 	tstne	r7, lr, lsl #10
       c:	00171001 	andseq	r1, r7, r1
      10:	00240200 	eoreq	r0, r4, r0, lsl #4
      14:	0b3e0b0b 	bleq	f82c48 <_Min_Stack_Size+0xf82a48>
      18:	00000e03 	andeq	r0, r0, r3, lsl #28
    bitstatus = SET;
      1c:	03001603 	movweq	r1, #1539	; 0x603
    bitstatus = RESET;
      20:	3b0b3a0e 	blcc	2ce860 <_Min_Stack_Size+0x2ce660>
  return bitstatus;
      24:	0013490b 	andseq	r4, r3, fp, lsl #18
}
      28:	00240400 	eoreq	r0, r4, r0, lsl #8
      2c:	0b3e0b0b 	bleq	f82c60 <_Min_Stack_Size+0xf82a60>
      30:	00000803 	andeq	r0, r0, r3, lsl #16
      34:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
      38:	06000013 			; <UNDEFINED> instruction: 0x06000013
      3c:	0b0b0113 	bleq	2c0490 <_Min_Stack_Size+0x2c0290>
      40:	0b3b0b3a 	bleq	ec2d30 <_Min_Stack_Size+0xec2b30>
      44:	00001301 	andeq	r1, r0, r1, lsl #6
      48:	03000d07 	movweq	r0, #3335	; 0xd07
      4c:	3b0b3a0e 	blcc	2ce88c <_Min_Stack_Size+0x2ce68c>
      50:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      54:	0800000b 	stmdaeq	r0, {r0, r1, r3}
      58:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      5c:	0b3b0b3a 	bleq	ec2d4c <_Min_Stack_Size+0xec2b4c>
      60:	0b381349 	bleq	e04d8c <_Min_Stack_Size+0xe04b8c>
            I2C_SendData(OLED_HARDWARE, BMP[j++]);
      64:	26090000 	strcs	r0, [r9], -r0
      68:	00134900 	andseq	r4, r3, r0, lsl #18
      6c:	01010a00 	tsteq	r1, r0, lsl #20
      70:	13011349 	movwne	r1, #4937	; 0x1349
      74:	210b0000 	mrscs	r0, (UNDEF: 11)
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);    	
      78:	2f134900 	svccs	0x00134900
      7c:	0c00000b 	stceq	0, cr0, [r0], {11}
      80:	0b0b0104 	bleq	2c0498 <_Min_Stack_Size+0x2c0298>
      84:	0b3a1349 	bleq	e84db0 <_Min_Stack_Size+0xe84bb0>
        for(x=x0;x<x1;x++){ 
      88:	1301053b 	movwne	r0, #5435	; 0x153b
      8c:	280d0000 	stmdacs	sp, {}	; <UNPREDICTABLE>
      90:	1c0e0300 	stcne	3, cr0, [lr], {-0}
      94:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
        _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
      98:	08030028 	stmdaeq	r3, {r3, r5}
      9c:	00000b1c 	andeq	r0, r0, ip, lsl fp
      a0:	0b01130f 	bleq	44ce4 <_Min_Stack_Size+0x44ae4>
      a4:	3b0b3a0b 	blcc	2ce8d8 <_Min_Stack_Size+0x2ce6d8>
	for(y=y0;y<y1;y++){
      a8:	00130105 	andseq	r0, r3, r5, lsl #2
      ac:	000d1000 	andeq	r1, sp, r0
      b0:	0b3a0803 	bleq	e820c4 <_Min_Stack_Size+0xe81ec4>
}
      b4:	1349053b 	movtne	r0, #38203	; 0x953b
      b8:	00000b38 	andeq	r0, r0, r8, lsr fp
      bc:	03000d11 	movweq	r0, #3345	; 0xd11
      c0:	3b0b3a0e 	blcc	2ce900 <_Min_Stack_Size+0x2ce700>
      c4:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
      c8:	1200000b 	andne	r0, r0, #11
      cc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      d4:	00001349 	andeq	r1, r0, r9, asr #6
      d8:	3f002e13 	svccc	0x00002e13
      dc:	3a0e0319 	bcc	380d48 <_Min_Stack_Size+0x380b48>
      e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      e4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      e8:	96184006 	ldrls	r4, [r8], -r6
      ec:	00001942 	andeq	r1, r0, r2, asr #18
      f0:	3f012e14 	svccc	0x00012e14
				prvUnlockQueue( pxQueue );
      f4:	3a0e0319 	bcc	380d60 <_Min_Stack_Size+0x380b60>
      f8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
				if( xTaskResumeAll() == pdFALSE )
      fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     100:	97184006 	ldrls	r4, [r8, -r6]
					portYIELD_WITHIN_API();
     104:	13011942 	movwne	r1, #6466	; 0x1942
     108:	34150000 	ldrcc	r0, [r5], #-0
     10c:	3a080300 	bcc	200d14 <_Min_Stack_Size+0x200b14>
     110:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     114:	00180213 	andseq	r0, r8, r3, lsl r2
				prvUnlockQueue( pxQueue );
     118:	00341600 	eorseq	r1, r4, r0, lsl #12
				( void ) xTaskResumeAll();
     11c:	0b3a0e03 	bleq	e83930 <_Min_Stack_Size+0xe83730>
     120:	1349053b 	movtne	r0, #38203	; 0x953b
			prvUnlockQueue( pxQueue );
     124:	00001802 	andeq	r1, r0, r2, lsl #16
			( void ) xTaskResumeAll();
     128:	03002e17 	movweq	r2, #3607	; 0xe17
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     12c:	3b0b3a0e 	blcc	2ce96c <_Min_Stack_Size+0x2ce76c>
     130:	11192705 	tstne	r9, r5, lsl #14
     134:	40061201 	andmi	r1, r6, r1, lsl #4
     138:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
}
     13c:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     140:	3a0e0301 	bcc	380d4c <_Min_Stack_Size+0x380b4c>
     144:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     148:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     14c:	97184006 	ldrls	r4, [r8, -r6]
  SPIx->I2SCFGR = tmpreg;   
     150:	13011942 	movwne	r1, #6466	; 0x1942
     154:	34190000 	ldrcc	r0, [r9], #-0
}
     158:	3a0e0300 	bcc	380d60 <_Min_Stack_Size+0x380b60>
     15c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     160:	3c193f13 	ldccc	15, cr3, [r9], {19}
     164:	1a000019 	bne	1d0 <_Min_Heap_Size+0x1d0>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
     168:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     16c:	0b3b0b3a 	bleq	ec2e5c <_Min_Stack_Size+0xec2c5c>
     170:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     174:	00001802 	andeq	r1, r0, r2, lsl #16
     178:	01110100 	tsteq	r1, r0, lsl #2
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     17c:	0b130e25 	bleq	4c3a18 <_Min_Stack_Size+0x4c3818>
     180:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     184:	01111755 	tsteq	r1, r5, asr r7
     188:	00001710 	andeq	r1, r0, r0, lsl r7
         *(uint8_t*) arg = getSn_SR(sn);
     18c:	0b002402 	bleq	919c <_Min_Stack_Size+0x8f9c>
     190:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     194:	0300000e 	movweq	r0, #14
     198:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     19c:	0b3b0b3a 	bleq	ec2e8c <_Min_Stack_Size+0xec2c8c>
     1a0:	00001349 	andeq	r1, r0, r9, asr #6
     1a4:	0b002404 	bleq	91bc <_Min_Stack_Size+0x8fbc>
         if(getSn_MR(sn) == Sn_MR_TCP)
     1a8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     1ac:	05000008 	streq	r0, [r0, #-8]
     1b0:	13490035 	movtne	r0, #36917	; 0x9035
     1b4:	26060000 	strcs	r0, [r6], -r0
     1b8:	00134900 	andseq	r4, r3, r0, lsl #18
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1bc:	01040700 	tsteq	r4, r0, lsl #14
     1c0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     1c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     1c8:	00001301 	andeq	r1, r0, r1, lsl #6
         break;
     1cc:	03002808 	movweq	r2, #2056	; 0x808
            *(uint16_t*)arg = sock_remained_size[sn];
     1d0:	000b1c0e 	andeq	r1, fp, lr, lsl #24
     1d4:	00280900 	eoreq	r0, r8, r0, lsl #18
     1d8:	0b1c0803 	bleq	7021ec <_Min_Stack_Size+0x701fec>
         CHECK_SOCKMODE(Sn_MR_TCP);
     1dc:	130a0000 	movwne	r0, #40960	; 0xa000
     1e0:	3a0b0b01 	bcc	2c2dec <_Min_Stack_Size+0x2c2bec>
     1e4:	01053b0b 	tsteq	r5, fp, lsl #22
     1e8:	0b000013 	bleq	23c <_Min_Stack_Size+0x3c>
     1ec:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     1f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     1f4:	0b381349 	bleq	e04f20 <_Min_Stack_Size+0xe04d20>
     1f8:	0d0c0000 	stceq	0, cr0, [ip, #-0]
         *(uint8_t*)arg = sock_pack_info[sn];
     1fc:	3a0e0300 	bcc	380e04 <_Min_Stack_Size+0x380c04>
     200:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
         break;
     204:	000b3813 	andeq	r3, fp, r3, lsl r8
         return SOCKERR_SOCKOPT;
     208:	00160d00 	andseq	r0, r6, r0, lsl #26
   return SOCK_OK;
     20c:	0b3a0e03 	bleq	e83a20 <_Min_Stack_Size+0xe83820>
}
     210:	1349053b 	movtne	r0, #38203	; 0x953b
     214:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
     218:	03193f01 	tsteq	r9, #1, 30
     21c:	3b0b3a0e 	blcc	2cea5c <_Min_Stack_Size+0x2ce85c>
     220:	1119270b 	tstne	r9, fp, lsl #14
     224:	40061201 	andmi	r1, r6, r1, lsl #4
     228:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     22c:	00001301 	andeq	r1, r0, r1, lsl #6
     230:	0300050f 	movweq	r0, #1295	; 0x50f
     234:	3b0b3a0e 	blcc	2cea74 <_Min_Stack_Size+0x2ce874>
     238:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     23c:	10000018 	andne	r0, r0, r8, lsl r0
     240:	08030034 	stmdaeq	r3, {r2, r4, r5}
     244:	0b3b0b3a 	bleq	ec2f34 <_Min_Stack_Size+0xec2d34>
     248:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     24c:	0f110000 	svceq	0x00110000
     250:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
	memset(packet, 0, sizeof(packet));
     254:	12000013 	andne	r0, r0, #19
     258:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     25c:	0b3b0b3a 	bleq	ec2f4c <_Min_Stack_Size+0xec2d4c>
	memcpy(packet, fixed_header, sizeof(fixed_header));
     260:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     264:	01130000 	tsteq	r3, r0
     268:	01134901 	tsteq	r3, r1, lsl #18
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
     270:	13490021 	movtne	r0, #36897	; 0x9021
     274:	00000b2f 	andeq	r0, r0, pc, lsr #22
     278:	03000515 	movweq	r0, #1301	; 0x515
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     27c:	3b0b3a08 	blcc	2ceaa4 <_Min_Stack_Size+0x2ce8a4>
     280:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     284:	16000018 			; <UNDEFINED> instruction: 0x16000018
     288:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     28c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     290:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     294:	0000193c 	andeq	r1, r0, ip, lsr r9
     298:	03003417 	movweq	r3, #1047	; 0x417
     29c:	3b0b3a0e 	blcc	2ceadc <_Min_Stack_Size+0x2ce8dc>
     2a0:	3f13490b 	svccc	0x0013490b
		return -1;
     2a4:	00180219 	andseq	r0, r8, r9, lsl r2
     2a8:	00211800 	eoreq	r1, r1, r0, lsl #16
	return 1;
     2ac:	052f1349 	streq	r1, [pc, #-841]!	; ffffff6b <BootRAM+0xef7070c>
}
     2b0:	01000000 	mrseq	r0, (UNDEF: 0)
     2b4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     2b8:	0e030b13 	vmoveq.32	d3[0], r0
     2bc:	17550e1b 	smmlane	r5, fp, lr, r0
     2c0:	17100111 			; <UNDEFINED> instruction: 0x17100111
     2c4:	16020000 	strne	r0, [r2], -r0
     2c8:	3a0e0300 	bcc	380ed0 <_Min_Stack_Size+0x380cd0>
     2cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2d0:	03000013 	movweq	r0, #19
     2d4:	0b0b0024 	bleq	2c036c <_Min_Stack_Size+0x2c016c>
     2d8:	0e030b3e 	vmoveq.16	d3[0], r0
     2dc:	24040000 	strcs	r0, [r4], #-0
     2e0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     2e4:	0008030b 	andeq	r0, r8, fp, lsl #6
     2e8:	01040500 	tsteq	r4, r0, lsl #10
     2ec:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     2f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     2f4:	00001301 	andeq	r1, r0, r1, lsl #6
     2f8:	03002806 	movweq	r2, #2054	; 0x806
     2fc:	000b1c0e 	andeq	r1, fp, lr, lsl #24
     300:	00160700 	andseq	r0, r6, r0, lsl #14
     304:	0b3a0e03 	bleq	e83b18 <_Min_Stack_Size+0xe83918>
     308:	1349053b 	movtne	r0, #38203	; 0x953b
     30c:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
     310:	03193f01 	tsteq	r9, #1, 30
     314:	3b0b3a0e 	blcc	2ceb54 <_Min_Stack_Size+0x2ce954>
     318:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     31c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     320:	96184006 	ldrls	r4, [r8], -r6
     324:	13011942 	movwne	r1, #6466	; 0x1942
     328:	05090000 	streq	r0, [r9, #-0]
     32c:	3a080300 	bcc	200f34 <_Min_Stack_Size+0x200d34>
     330:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     334:	00180213 	andseq	r0, r8, r3, lsl r2
     338:	00050a00 	andeq	r0, r5, r0, lsl #20
     33c:	0b3a0e03 	bleq	e83b50 <_Min_Stack_Size+0xe83950>
     340:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     344:	00001802 	andeq	r1, r0, r2, lsl #16
     348:	0b000f0b 	bleq	3f7c <_Min_Stack_Size+0x3d7c>
     34c:	0013490b 	andseq	r4, r3, fp, lsl #18
     350:	00340c00 	eorseq	r0, r4, r0, lsl #24
     354:	0b3a0803 	bleq	e82368 <_Min_Stack_Size+0xe82168>
     358:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     35c:	00001802 	andeq	r1, r0, r2, lsl #16
     360:	0300340d 	movweq	r3, #1037	; 0x40d
     364:	3b0b3a0e 	blcc	2ceba4 <_Min_Stack_Size+0x2ce9a4>
     368:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     36c:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
     370:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     374:	0b3a0e03 	bleq	e83b88 <_Min_Stack_Size+0xe83988>
     378:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     37c:	01111349 	tsteq	r1, r9, asr #6
     380:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     384:	01194296 			; <UNDEFINED> instruction: 0x01194296
     388:	0f000013 	svceq	0x00000013
     38c:	08030005 	stmdaeq	r3, {r0, r2}
     390:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     394:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     398:	34100000 	ldrcc	r0, [r0], #-0
     39c:	3a080300 	bcc	200fa4 <_Min_Stack_Size+0x200da4>
     3a0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     3a4:	00180213 	andseq	r0, r8, r3, lsl r2
     3a8:	00341100 	eorseq	r1, r4, r0, lsl #2
     3ac:	0b3a0e03 	bleq	e83bc0 <_Min_Stack_Size+0xe839c0>
     3b0:	1349053b 	movtne	r0, #38203	; 0x953b
     3b4:	00001802 	andeq	r1, r0, r2, lsl #16
     3b8:	03000512 	movweq	r0, #1298	; 0x512
     3bc:	3b0b3a0e 	blcc	2cebfc <_Min_Stack_Size+0x2ce9fc>
     3c0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     3c4:	13000018 	movwne	r0, #24
     3c8:	13490101 	movtne	r0, #37121	; 0x9101
     3cc:	00001301 	andeq	r1, r0, r1, lsl #6
     3d0:	49002114 	stmdbmi	r0, {r2, r4, r8, sp}
     3d4:	000b2f13 	andeq	r2, fp, r3, lsl pc
     3d8:	000f1500 	andeq	r1, pc, r0, lsl #10
     3dc:	00000b0b 	andeq	r0, r0, fp, lsl #22
     3e0:	01110100 	tsteq	r1, r0, lsl #2
     3e4:	0b130e25 	bleq	4c3c80 <_Min_Stack_Size+0x4c3a80>
     3e8:	17550e03 	ldrbne	r0, [r5, -r3, lsl #28]
     3ec:	17100111 			; <UNDEFINED> instruction: 0x17100111
     3f0:	16020000 	strne	r0, [r2], -r0
     3f4:	3a0e0300 	bcc	380ffc <_Min_Stack_Size+0x380dfc>
     3f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3fc:	03000013 	movweq	r0, #19
     400:	0b0b0024 	bleq	2c0498 <_Min_Stack_Size+0x2c0298>
     404:	0e030b3e 	vmoveq.16	d3[0], r0
     408:	24040000 	strcs	r0, [r4], #-0
     40c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     410:	0008030b 	andeq	r0, r8, fp, lsl #6
     414:	01130500 	tsteq	r3, r0, lsl #10
     418:	0b0b0e03 	bleq	2c3c2c <_Min_Stack_Size+0x2c3a2c>
     41c:	0b3b0b3a 	bleq	ec310c <_Min_Stack_Size+0xec2f0c>
     420:	00001301 	andeq	r1, r0, r1, lsl #6
     424:	03000d06 	movweq	r0, #3334	; 0xd06
     428:	3b0b3a0e 	blcc	2cec68 <_Min_Stack_Size+0x2cea68>
     42c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     430:	0700000b 	streq	r0, [r0, -fp]
     434:	19270015 	stmdbne	r7!, {r0, r2, r4}
     438:	0f080000 	svceq	0x00080000
     43c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     440:	09000013 	stmdbeq	r0, {r0, r1, r4}
     444:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
     448:	0b3a0b0b 	bleq	e8307c <_Min_Stack_Size+0xe82e7c>
     44c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     450:	130a0000 	movwne	r0, #40960	; 0xa000
     454:	3a0b0b01 	bcc	2c3060 <_Min_Stack_Size+0x2c2e60>
     458:	010b3b0b 	tsteq	fp, fp, lsl #22
     45c:	0b000013 	bleq	4b0 <_Min_Stack_Size+0x2b0>
     460:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     464:	13011349 	movwne	r1, #4937	; 0x1349
     468:	050c0000 	streq	r0, [ip, #-0]
     46c:	00134900 	andseq	r4, r3, r0, lsl #18
     470:	01150d00 	tsteq	r5, r0, lsl #26
     474:	13011927 	movwne	r1, #6439	; 0x1927
     478:	150e0000 	strne	r0, [lr, #-0]
     47c:	49192700 	ldmdbmi	r9, {r8, r9, sl, sp}
     480:	0f000013 	svceq	0x00000013
     484:	08030117 	stmdaeq	r3, {r0, r1, r2, r4, r8}
     488:	0b3a0b0b 	bleq	e830bc <_Min_Stack_Size+0xe82ebc>
     48c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     490:	0d100000 	ldceq	0, cr0, [r0, #-0]
     494:	3a080300 	bcc	20109c <_Min_Stack_Size+0x200e9c>
     498:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     49c:	11000013 	tstne	r0, r3, lsl r0
     4a0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     4a4:	0b3b0b3a 	bleq	ec3194 <_Min_Stack_Size+0xec2f94>
     4a8:	0b381349 	bleq	e051d4 <_Min_Stack_Size+0xe04fd4>
     4ac:	01120000 	tsteq	r2, r0
     4b0:	01134901 	tsteq	r3, r1, lsl #18
     4b4:	13000013 	movwne	r0, #19
     4b8:	13490021 	movtne	r0, #36897	; 0x9021
     4bc:	00000b2f 	andeq	r0, r0, pc, lsr #22
     4c0:	0b010414 	bleq	41518 <_Min_Stack_Size+0x41318>
     4c4:	3a13490b 	bcc	4d28f8 <_Min_Stack_Size+0x4d26f8>
     4c8:	010b3b0b 	tsteq	fp, fp, lsl #22
     4cc:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
     4d0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     4d4:	00000b1c 	andeq	r0, r0, ip, lsl fp
     4d8:	03002816 	movweq	r2, #2070	; 0x816
     4dc:	00051c0e 	andeq	r1, r5, lr, lsl #24
     4e0:	00161700 	andseq	r1, r6, r0, lsl #14
     4e4:	0b3a0e03 	bleq	e83cf8 <_Min_Stack_Size+0xe83af8>
     4e8:	1349053b 	movtne	r0, #38203	; 0x953b
     4ec:	13180000 	tstne	r8, #0
     4f0:	0b0e0301 	bleq	3810fc <_Min_Stack_Size+0x380efc>
     4f4:	3b0b3a0b 	blcc	2ced28 <_Min_Stack_Size+0x2ceb28>
     4f8:	00130105 	andseq	r0, r3, r5, lsl #2
     4fc:	000d1900 	andeq	r1, sp, r0, lsl #18
     500:	0b3a0803 	bleq	e82514 <_Min_Stack_Size+0xe82314>
     504:	1349053b 	movtne	r0, #38203	; 0x953b
     508:	00000b38 	andeq	r0, r0, r8, lsr fp
     50c:	03000d1a 	movweq	r0, #3354	; 0xd1a
     510:	3b0b3a0e 	blcc	2ced50 <_Min_Stack_Size+0x2ceb50>
     514:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     518:	1b00000b 	blne	54c <_Min_Stack_Size+0x34c>
     51c:	0b0b0104 	bleq	2c0934 <_Min_Stack_Size+0x2c0734>
     520:	0b3a1349 	bleq	e8524c <_Min_Stack_Size+0xe8504c>
     524:	1301053b 	movwne	r0, #5435	; 0x153b
     528:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
     52c:	03193f00 	tsteq	r9, #0, 30
     530:	3b0b3a0e 	blcc	2ced70 <_Min_Stack_Size+0x2ceb70>
     534:	1119270b 	tstne	r9, fp, lsl #14
     538:	40061201 	andmi	r1, r6, r1, lsl #4
     53c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     540:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
     544:	03193f01 	tsteq	r9, #1, 30
     548:	3b0b3a0e 	blcc	2ced88 <_Min_Stack_Size+0x2ceb88>
     54c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     550:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     554:	97184006 	ldrls	r4, [r8, -r6]
     558:	13011942 	movwne	r1, #6466	; 0x1942
     55c:	051e0000 	ldreq	r0, [lr, #-0]
     560:	3a0e0300 	bcc	381168 <_Min_Stack_Size+0x380f68>
     564:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     568:	00180213 	andseq	r0, r8, r3, lsl r2
     56c:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
     570:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     574:	0b3b0b3a 	bleq	ec3264 <_Min_Stack_Size+0xec3064>
     578:	01111927 	tsteq	r1, r7, lsr #18
     57c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     580:	01194297 			; <UNDEFINED> instruction: 0x01194297
     584:	20000013 	andcs	r0, r0, r3, lsl r0
     588:	08030005 	stmdaeq	r3, {r0, r2}
     58c:	0b3b0b3a 	bleq	ec327c <_Min_Stack_Size+0xec307c>
     590:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     594:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     598:	03193f00 	tsteq	r9, #0, 30
     59c:	3b0b3a0e 	blcc	2ceddc <_Min_Stack_Size+0x2cebdc>
     5a0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     5a4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     5a8:	97184006 	ldrls	r4, [r8, -r6]
     5ac:	00001942 	andeq	r1, r0, r2, asr #18
     5b0:	3f012e22 	svccc	0x00012e22
     5b4:	3a0e0319 	bcc	381220 <_Min_Stack_Size+0x381020>
     5b8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     5bc:	11134919 	tstne	r3, r9, lsl r9
     5c0:	40061201 	andmi	r1, r6, r1, lsl #4
     5c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     5c8:	00001301 	andeq	r1, r0, r1, lsl #6
     5cc:	03003423 	movweq	r3, #1059	; 0x423
     5d0:	3b0b3a08 	blcc	2cedf8 <_Min_Stack_Size+0x2cebf8>
     5d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     5d8:	24000018 	strcs	r0, [r0], #-24	; 0xffffffe8
     5dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     5e0:	0b3b0b3a 	bleq	ec32d0 <_Min_Stack_Size+0xec30d0>
     5e4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     5e8:	0f250000 	svceq	0x00250000
     5ec:	000b0b00 	andeq	r0, fp, r0, lsl #22
     5f0:	012e2600 			; <UNDEFINED> instruction: 0x012e2600
     5f4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     5f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     5fc:	01111927 	tsteq	r1, r7, lsr #18
     600:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     604:	01194296 			; <UNDEFINED> instruction: 0x01194296
     608:	27000013 	smladcs	r0, r3, r0, r0
     60c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     610:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     614:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     618:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
     61c:	03193f01 	tsteq	r9, #1, 30
     620:	3b0b3a0e 	blcc	2cee60 <_Min_Stack_Size+0x2cec60>
     624:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     628:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     62c:	96184006 	ldrls	r4, [r8], -r6
     630:	13011942 	movwne	r1, #6466	; 0x1942
     634:	05290000 	streq	r0, [r9, #-0]!
     638:	3a0e0300 	bcc	381240 <_Min_Stack_Size+0x381040>
     63c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     640:	00180213 	andseq	r0, r8, r3, lsl r2
     644:	00342a00 	eorseq	r2, r4, r0, lsl #20
     648:	0b3a0e03 	bleq	e83e5c <_Min_Stack_Size+0xe83c5c>
     64c:	1349053b 	movtne	r0, #38203	; 0x953b
     650:	00001802 	andeq	r1, r0, r2, lsl #16
     654:	3f002e2b 	svccc	0x00002e2b
     658:	3a0e0319 	bcc	3812c4 <_Min_Stack_Size+0x3810c4>
     65c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     660:	11134919 	tstne	r3, r9, lsl r9
     664:	40061201 	andmi	r1, r6, r1, lsl #4
     668:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     66c:	342c0000 	strtcc	r0, [ip], #-0
     670:	3a0e0300 	bcc	381278 <_Min_Stack_Size+0x381078>
     674:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     678:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     67c:	00000018 	andeq	r0, r0, r8, lsl r0
     680:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     684:	030b130e 	movweq	r1, #45838	; 0xb30e
     688:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     68c:	10011117 	andne	r1, r1, r7, lsl r1
     690:	02000017 	andeq	r0, r0, #23
     694:	0b0b0024 	bleq	2c072c <_Min_Stack_Size+0x2c052c>
     698:	0e030b3e 	vmoveq.16	d3[0], r0
     69c:	16030000 	strne	r0, [r3], -r0
     6a0:	3a0e0300 	bcc	3812a8 <_Min_Stack_Size+0x3810a8>
     6a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6a8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     6ac:	0b0b0024 	bleq	2c0744 <_Min_Stack_Size+0x2c0544>
     6b0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     6b4:	0f050000 	svceq	0x00050000
     6b8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     6bc:	06000013 			; <UNDEFINED> instruction: 0x06000013
     6c0:	19270015 	stmdbne	r7!, {r0, r2, r4}
     6c4:	13070000 	movwne	r0, #28672	; 0x7000
     6c8:	0b0e0301 	bleq	3812d4 <_Min_Stack_Size+0x3810d4>
     6cc:	3b0b3a0b 	blcc	2cef00 <_Min_Stack_Size+0x2ced00>
     6d0:	0013010b 	andseq	r0, r3, fp, lsl #2
     6d4:	000d0800 	andeq	r0, sp, r0, lsl #16
     6d8:	0b3a0e03 	bleq	e83eec <_Min_Stack_Size+0xe83cec>
     6dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     6e0:	00000b38 	andeq	r0, r0, r8, lsr fp
     6e4:	03011309 	movweq	r1, #4873	; 0x1309
     6e8:	3a0b0b08 	bcc	2c3310 <_Min_Stack_Size+0x2c3110>
     6ec:	010b3b0b 	tsteq	fp, fp, lsl #22
     6f0:	0a000013 	beq	744 <_Min_Stack_Size+0x544>
     6f4:	0b0b0113 	bleq	2c0b48 <_Min_Stack_Size+0x2c0948>
     6f8:	0b3b0b3a 	bleq	ec33e8 <_Min_Stack_Size+0xec31e8>
     6fc:	00001301 	andeq	r1, r0, r1, lsl #6
     700:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
     704:	01134919 	tsteq	r3, r9, lsl r9
     708:	0c000013 	stceq	0, cr0, [r0], {19}
     70c:	13490005 	movtne	r0, #36869	; 0x9005
     710:	150d0000 	strne	r0, [sp, #-0]
     714:	01192701 	tsteq	r9, r1, lsl #14
     718:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     71c:	19270015 	stmdbne	r7!, {r0, r2, r4}
     720:	00001349 	andeq	r1, r0, r9, asr #6
     724:	0301170f 	movweq	r1, #5903	; 0x170f
     728:	3a0b0b08 	bcc	2c3350 <_Min_Stack_Size+0x2c3150>
     72c:	010b3b0b 	tsteq	fp, fp, lsl #22
     730:	10000013 	andne	r0, r0, r3, lsl r0
     734:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     738:	0b3b0b3a 	bleq	ec3428 <_Min_Stack_Size+0xec3228>
     73c:	00001349 	andeq	r1, r0, r9, asr #6
     740:	03000d11 	movweq	r0, #3345	; 0xd11
     744:	3b0b3a08 	blcc	2cef6c <_Min_Stack_Size+0x2ced6c>
     748:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     74c:	1200000b 	andne	r0, r0, #11
     750:	13490101 	movtne	r0, #37121	; 0x9101
     754:	00001301 	andeq	r1, r0, r1, lsl #6
     758:	49002113 	stmdbmi	r0, {r0, r1, r4, r8, sp}
     75c:	000b2f13 	andeq	r2, fp, r3, lsl pc
     760:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
     764:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     768:	0b3b0b3a 	bleq	ec3458 <_Min_Stack_Size+0xec3258>
     76c:	13491927 	movtne	r1, #39207	; 0x9927
     770:	06120111 			; <UNDEFINED> instruction: 0x06120111
     774:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     778:	00130119 	andseq	r0, r3, r9, lsl r1
     77c:	00051500 	andeq	r1, r5, r0, lsl #10
     780:	0b3a0e03 	bleq	e83f94 <_Min_Stack_Size+0xe83d94>
     784:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     788:	00001802 	andeq	r1, r0, r2, lsl #16
     78c:	03003416 	movweq	r3, #1046	; 0x416
     790:	3b0b3a08 	blcc	2cefb8 <_Min_Stack_Size+0x2cedb8>
     794:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     798:	17000018 	smladne	r0, r8, r0, r0
     79c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     7a0:	0b3a0e03 	bleq	e83fb4 <_Min_Stack_Size+0xe83db4>
     7a4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     7a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7ac:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     7b0:	00130119 	andseq	r0, r3, r9, lsl r1
     7b4:	00051800 	andeq	r1, r5, r0, lsl #16
     7b8:	0b3a0803 	bleq	e827cc <_Min_Stack_Size+0xe825cc>
     7bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     7c0:	00001802 	andeq	r1, r0, r2, lsl #16
     7c4:	3f012e19 	svccc	0x00012e19
     7c8:	3a0e0319 	bcc	381434 <_Min_Stack_Size+0x381234>
     7cc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     7d0:	11134919 	tstne	r3, r9, lsl r9
     7d4:	40061201 	andmi	r1, r6, r1, lsl #4
     7d8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     7dc:	00001301 	andeq	r1, r0, r1, lsl #6
     7e0:	0300051a 	movweq	r0, #1306	; 0x51a
     7e4:	3b0b3a08 	blcc	2cf00c <_Min_Stack_Size+0x2cee0c>
     7e8:	02134905 	andseq	r4, r3, #81920	; 0x14000
     7ec:	1b000018 	blne	854 <_Min_Stack_Size+0x654>
     7f0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     7f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     7f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     7fc:	341c0000 	ldrcc	r0, [ip], #-0
     800:	3a0e0300 	bcc	381408 <_Min_Stack_Size+0x381208>
     804:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     808:	00180213 	andseq	r0, r8, r3, lsl r2
     80c:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
     810:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     814:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     818:	01111927 	tsteq	r1, r7, lsr #18
     81c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     820:	01194296 			; <UNDEFINED> instruction: 0x01194296
     824:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     828:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     82c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     830:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     834:	341f0000 	ldrcc	r0, [pc], #-0	; 83c <_Min_Stack_Size+0x63c>
     838:	3a0e0300 	bcc	381440 <_Min_Stack_Size+0x381240>
     83c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     840:	3c193f13 	ldccc	15, cr3, [r9], {19}
     844:	00000019 	andeq	r0, r0, r9, lsl r0
     848:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     84c:	030b130e 	movweq	r1, #45838	; 0xb30e
     850:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     854:	10011117 	andne	r1, r1, r7, lsl r1
     858:	02000017 	andeq	r0, r0, #23
     85c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     860:	0b3b0b3a 	bleq	ec3550 <_Min_Stack_Size+0xec3350>
     864:	00001349 	andeq	r1, r0, r9, asr #6
     868:	0b002403 	bleq	987c <_Min_Stack_Size+0x967c>
     86c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     870:	0400000e 	streq	r0, [r0], #-14
     874:	0b0b0024 	bleq	2c090c <_Min_Stack_Size+0x2c070c>
     878:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     87c:	0f050000 	svceq	0x00050000
     880:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     884:	06000013 			; <UNDEFINED> instruction: 0x06000013
     888:	19270015 	stmdbne	r7!, {r0, r2, r4}
     88c:	01070000 	mrseq	r0, (UNDEF: 7)
     890:	01134901 	tsteq	r3, r1, lsl #18
     894:	08000013 	stmdaeq	r0, {r0, r1, r4}
     898:	13490021 	movtne	r0, #36897	; 0x9021
     89c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     8a0:	0b010409 	bleq	418cc <_Min_Stack_Size+0x416cc>
     8a4:	3a13490b 	bcc	4d2cd8 <_Min_Stack_Size+0x4d2ad8>
     8a8:	010b3b0b 	tsteq	fp, fp, lsl #22
     8ac:	0a000013 	beq	900 <_Min_Stack_Size+0x700>
     8b0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     8b4:	00000b1c 	andeq	r0, r0, ip, lsl fp
     8b8:	0300280b 	movweq	r2, #2059	; 0x80b
     8bc:	000b1c08 	andeq	r1, fp, r8, lsl #24
     8c0:	01130c00 	tsteq	r3, r0, lsl #24
     8c4:	0b3a050b 	bleq	e81cf8 <_Min_Stack_Size+0xe81af8>
     8c8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     8cc:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     8d0:	3a080300 	bcc	2014d8 <_Min_Stack_Size+0x2012d8>
     8d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8d8:	000b3813 	andeq	r3, fp, r3, lsl r8
     8dc:	000d0e00 	andeq	r0, sp, r0, lsl #28
     8e0:	0b3a0e03 	bleq	e840f4 <_Min_Stack_Size+0xe83ef4>
     8e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     8e8:	00000b38 	andeq	r0, r0, r8, lsr fp
     8ec:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
     8f0:	00052f13 	andeq	r2, r5, r3, lsl pc
     8f4:	01171000 	tsteq	r7, r0
     8f8:	0b0b0e03 	bleq	2c410c <_Min_Stack_Size+0x2c3f0c>
     8fc:	0b3b0b3a 	bleq	ec35ec <_Min_Stack_Size+0xec33ec>
     900:	00001301 	andeq	r1, r0, r1, lsl #6
     904:	03000d11 	movweq	r0, #3345	; 0xd11
     908:	3b0b3a0e 	blcc	2cf148 <_Min_Stack_Size+0x2cef48>
     90c:	0013490b 	andseq	r4, r3, fp, lsl #18
     910:	002e1200 	eoreq	r1, lr, r0, lsl #4
     914:	0b3a0e03 	bleq	e84128 <_Min_Stack_Size+0xe83f28>
     918:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     91c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     920:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     924:	13000019 	movwne	r0, #25
     928:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     92c:	0b3b0b3a 	bleq	ec361c <_Min_Stack_Size+0xec341c>
     930:	01111927 	tsteq	r1, r7, lsr #18
     934:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     938:	00194296 	mulseq	r9, r6, r2
     93c:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
     940:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     944:	0b3b0b3a 	bleq	ec3634 <_Min_Stack_Size+0xec3434>
     948:	01111927 	tsteq	r1, r7, lsr #18
     94c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     950:	01194296 			; <UNDEFINED> instruction: 0x01194296
     954:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
     958:	08030034 	stmdaeq	r3, {r2, r4, r5}
     95c:	0b3b0b3a 	bleq	ec364c <_Min_Stack_Size+0xec344c>
     960:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     964:	05160000 	ldreq	r0, [r6, #-0]
     968:	3a080300 	bcc	201570 <_Min_Stack_Size+0x201370>
     96c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     970:	00180213 	andseq	r0, r8, r3, lsl r2
     974:	00051700 	andeq	r1, r5, r0, lsl #14
     978:	0b3a0e03 	bleq	e8418c <_Min_Stack_Size+0xe83f8c>
     97c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     980:	00001802 	andeq	r1, r0, r2, lsl #16
     984:	3f012e18 	svccc	0x00012e18
     988:	3a0e0319 	bcc	3815f4 <_Min_Stack_Size+0x3813f4>
     98c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     990:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     994:	96184006 	ldrls	r4, [r8], -r6
     998:	13011942 	movwne	r1, #6466	; 0x1942
     99c:	34190000 	ldrcc	r0, [r9], #-0
     9a0:	3a080300 	bcc	2015a8 <_Min_Stack_Size+0x2013a8>
     9a4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9a8:	00180213 	andseq	r0, r8, r3, lsl r2
     9ac:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
     9b0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     9b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     9b8:	13491927 	movtne	r1, #39207	; 0x9927
     9bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     9c0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     9c4:	00130119 	andseq	r0, r3, r9, lsl r1
     9c8:	00051b00 	andeq	r1, r5, r0, lsl #22
     9cc:	0b3a0e03 	bleq	e841e0 <_Min_Stack_Size+0xe83fe0>
     9d0:	1349053b 	movtne	r0, #38203	; 0x953b
     9d4:	00001802 	andeq	r1, r0, r2, lsl #16
     9d8:	0300341c 	movweq	r3, #1052	; 0x41c
     9dc:	3b0b3a0e 	blcc	2cf21c <_Min_Stack_Size+0x2cf01c>
     9e0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     9e4:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
     9e8:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     9ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     9f0:	00000111 	andeq	r0, r0, r1, lsl r1
     9f4:	0300051e 	movweq	r0, #1310	; 0x51e
     9f8:	3b0b3a08 	blcc	2cf220 <_Min_Stack_Size+0x2cf020>
     9fc:	02134905 	andseq	r4, r3, #81920	; 0x14000
     a00:	1f000018 	svcne	0x00000018
     a04:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     a08:	0b3a0e03 	bleq	e8421c <_Min_Stack_Size+0xe8401c>
     a0c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     a10:	01111349 	tsteq	r1, r9, asr #6
     a14:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a18:	00194296 	mulseq	r9, r6, r2
     a1c:	002e2000 	eoreq	r2, lr, r0
     a20:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     a24:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a28:	01111927 	tsteq	r1, r7, lsr #18
     a2c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a30:	00194297 	mulseq	r9, r7, r2
     a34:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
     a38:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     a3c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a40:	01111927 	tsteq	r1, r7, lsr #18
     a44:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a48:	01194297 			; <UNDEFINED> instruction: 0x01194297
     a4c:	22000013 	andcs	r0, r0, #19
     a50:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     a54:	0b3a0e03 	bleq	e84268 <_Min_Stack_Size+0xe84068>
     a58:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     a5c:	01111349 	tsteq	r1, r9, asr #6
     a60:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a64:	00194297 	mulseq	r9, r7, r2
     a68:	00342300 	eorseq	r2, r4, r0, lsl #6
     a6c:	0b3a0e03 	bleq	e84280 <_Min_Stack_Size+0xe84080>
     a70:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a74:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     a78:	34240000 	strtcc	r0, [r4], #-0
     a7c:	3a080300 	bcc	201684 <_Min_Stack_Size+0x201484>
     a80:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a84:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     a88:	00000018 	andeq	r0, r0, r8, lsl r0
     a8c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     a90:	030b130e 	movweq	r1, #45838	; 0xb30e
     a94:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     a98:	10011117 	andne	r1, r1, r7, lsl r1
     a9c:	02000017 	andeq	r0, r0, #23
     aa0:	0b0b0024 	bleq	2c0b38 <_Min_Stack_Size+0x2c0938>
     aa4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     aa8:	24030000 	strcs	r0, [r3], #-0
     aac:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     ab0:	000e030b 	andeq	r0, lr, fp, lsl #6
     ab4:	00160400 	andseq	r0, r6, r0, lsl #8
     ab8:	0b3a0e03 	bleq	e842cc <_Min_Stack_Size+0xe840cc>
     abc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ac0:	0f050000 	svceq	0x00050000
     ac4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     ac8:	06000013 			; <UNDEFINED> instruction: 0x06000013
     acc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     ad0:	0b3a0b0b 	bleq	e83704 <_Min_Stack_Size+0xe83504>
     ad4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     ad8:	0d070000 	stceq	0, cr0, [r7, #-0]
     adc:	3a080300 	bcc	2016e4 <_Min_Stack_Size+0x2014e4>
     ae0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ae4:	000b3813 	andeq	r3, fp, r3, lsl r8
     ae8:	000d0800 	andeq	r0, sp, r0, lsl #16
     aec:	0b3a0e03 	bleq	e84300 <_Min_Stack_Size+0xe84100>
     af0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     af4:	00000b38 	andeq	r0, r0, r8, lsr fp
     af8:	3f012e09 	svccc	0x00012e09
     afc:	3a0e0319 	bcc	381768 <_Min_Stack_Size+0x381568>
     b00:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     b04:	11134919 	tstne	r3, r9, lsl r9
     b08:	40061201 	andmi	r1, r6, r1, lsl #4
     b0c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b10:	00001301 	andeq	r1, r0, r1, lsl #6
     b14:	0300050a 	movweq	r0, #1290	; 0x50a
     b18:	3b0b3a08 	blcc	2cf340 <_Min_Stack_Size+0x2cf140>
     b1c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b20:	0b000018 	bleq	b88 <_Min_Stack_Size+0x988>
     b24:	08030034 	stmdaeq	r3, {r2, r4, r5}
     b28:	0b3b0b3a 	bleq	ec3818 <_Min_Stack_Size+0xec3618>
     b2c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     b30:	050c0000 	streq	r0, [ip, #-0]
     b34:	3a0e0300 	bcc	38173c <_Min_Stack_Size+0x38153c>
     b38:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b3c:	00180213 	andseq	r0, r8, r3, lsl r2
     b40:	00340d00 	eorseq	r0, r4, r0, lsl #26
     b44:	0b3a0e03 	bleq	e84358 <_Min_Stack_Size+0xe84158>
     b48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     b4c:	00001802 	andeq	r1, r0, r2, lsl #16
     b50:	3f012e0e 	svccc	0x00012e0e
     b54:	3a0e0319 	bcc	3817c0 <_Min_Stack_Size+0x3815c0>
     b58:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     b5c:	11134919 	tstne	r3, r9, lsl r9
     b60:	40061201 	andmi	r1, r6, r1, lsl #4
     b64:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     b68:	00001301 	andeq	r1, r0, r1, lsl #6
     b6c:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
     b70:	00130113 	andseq	r0, r3, r3, lsl r1
     b74:	00211000 	eoreq	r1, r1, r0
     b78:	0b2f1349 	bleq	bc58a4 <_Min_Stack_Size+0xbc56a4>
     b7c:	01000000 	mrseq	r0, (UNDEF: 0)
     b80:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     b84:	0e030b13 	vmoveq.32	d3[0], r0
     b88:	17550e1b 	smmlane	r5, fp, lr, r0
     b8c:	17100111 			; <UNDEFINED> instruction: 0x17100111
     b90:	16020000 	strne	r0, [r2], -r0
     b94:	3a0e0300 	bcc	38179c <_Min_Stack_Size+0x38159c>
     b98:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b9c:	03000013 	movweq	r0, #19
     ba0:	0b0b0024 	bleq	2c0c38 <_Min_Stack_Size+0x2c0a38>
     ba4:	0e030b3e 	vmoveq.16	d3[0], r0
     ba8:	24040000 	strcs	r0, [r4], #-0
     bac:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     bb0:	0008030b 	andeq	r0, r8, fp, lsl #6
     bb4:	000f0500 	andeq	r0, pc, r0, lsl #10
     bb8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     bbc:	13060000 	movwne	r0, #24576	; 0x6000
     bc0:	0b0e0301 	bleq	3817cc <_Min_Stack_Size+0x3815cc>
     bc4:	3b0b3a0b 	blcc	2cf3f8 <_Min_Stack_Size+0x2cf1f8>
     bc8:	0013010b 	andseq	r0, r3, fp, lsl #2
     bcc:	000d0700 	andeq	r0, sp, r0, lsl #14
     bd0:	0b3a0803 	bleq	e82be4 <_Min_Stack_Size+0xe829e4>
     bd4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     bd8:	00000b38 	andeq	r0, r0, r8, lsr fp
     bdc:	03000d08 	movweq	r0, #3336	; 0xd08
     be0:	3b0b3a0e 	blcc	2cf420 <_Min_Stack_Size+0x2cf220>
     be4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     be8:	0900000b 	stmdbeq	r0, {r0, r1, r3}
     bec:	13490101 	movtne	r0, #37121	; 0x9101
     bf0:	00001301 	andeq	r1, r0, r1, lsl #6
     bf4:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
     bf8:	000b2f13 	andeq	r2, fp, r3, lsl pc
     bfc:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
     c00:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     c04:	0b3b0b3a 	bleq	ec38f4 <_Min_Stack_Size+0xec36f4>
     c08:	13491927 	movtne	r1, #39207	; 0x9927
     c0c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c10:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     c14:	00130119 	andseq	r0, r3, r9, lsl r1
     c18:	00050c00 	andeq	r0, r5, r0, lsl #24
     c1c:	0b3a0803 	bleq	e82c30 <_Min_Stack_Size+0xe82a30>
     c20:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c24:	00001802 	andeq	r1, r0, r2, lsl #16
     c28:	3f012e0d 	svccc	0x00012e0d
     c2c:	3a0e0319 	bcc	381898 <_Min_Stack_Size+0x381698>
     c30:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     c34:	11134919 	tstne	r3, r9, lsl r9
     c38:	40061201 	andmi	r1, r6, r1, lsl #4
     c3c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     c40:	00001301 	andeq	r1, r0, r1, lsl #6
     c44:	0300050e 	movweq	r0, #1294	; 0x50e
     c48:	3b0b3a0e 	blcc	2cf488 <_Min_Stack_Size+0x2cf288>
     c4c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     c50:	0f000018 	svceq	0x00000018
     c54:	08030034 	stmdaeq	r3, {r2, r4, r5}
     c58:	0b3b0b3a 	bleq	ec3948 <_Min_Stack_Size+0xec3748>
     c5c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     c60:	34100000 	ldrcc	r0, [r0], #-0
     c64:	3a0e0300 	bcc	38186c <_Min_Stack_Size+0x38166c>
     c68:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c6c:	00180213 	andseq	r0, r8, r3, lsl r2
     c70:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
     c74:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     c78:	0b3b0b3a 	bleq	ec3968 <_Min_Stack_Size+0xec3768>
     c7c:	01111927 	tsteq	r1, r7, lsr #18
     c80:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     c84:	01194296 			; <UNDEFINED> instruction: 0x01194296
     c88:	12000013 	andne	r0, r0, #19
     c8c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     c90:	0b3a0e03 	bleq	e844a4 <_Min_Stack_Size+0xe842a4>
     c94:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     c98:	01111349 	tsteq	r1, r9, asr #6
     c9c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     ca0:	01194297 			; <UNDEFINED> instruction: 0x01194297
     ca4:	13000013 	movwne	r0, #19
     ca8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     cac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     cb0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     cb4:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     cb8:	03193f00 	tsteq	r9, #0, 30
     cbc:	3b0b3a0e 	blcc	2cf4fc <_Min_Stack_Size+0x2cf2fc>
     cc0:	11192705 	tstne	r9, r5, lsl #14
     cc4:	40061201 	andmi	r1, r6, r1, lsl #4
     cc8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     ccc:	34150000 	ldrcc	r0, [r5], #-0
     cd0:	3a0e0300 	bcc	3818d8 <_Min_Stack_Size+0x3816d8>
     cd4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cd8:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     cdc:	00000018 	andeq	r0, r0, r8, lsl r0
     ce0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     ce4:	030b130e 	movweq	r1, #45838	; 0xb30e
     ce8:	1117550e 	tstne	r7, lr, lsl #10
     cec:	00171001 	andseq	r1, r7, r1
     cf0:	00240200 	eoreq	r0, r4, r0, lsl #4
     cf4:	0b3e0b0b 	bleq	f83928 <_Min_Stack_Size+0xf83728>
     cf8:	00000e03 	andeq	r0, r0, r3, lsl #28
     cfc:	03001603 	movweq	r1, #1539	; 0x603
     d00:	3b0b3a0e 	blcc	2cf540 <_Min_Stack_Size+0x2cf340>
     d04:	0013490b 	andseq	r4, r3, fp, lsl #18
     d08:	00240400 	eoreq	r0, r4, r0, lsl #8
     d0c:	0b3e0b0b 	bleq	f83940 <_Min_Stack_Size+0xf83740>
     d10:	00000803 	andeq	r0, r0, r3, lsl #16
     d14:	0b011305 	bleq	45930 <_Min_Stack_Size+0x45730>
     d18:	3b0b3a05 	blcc	2cf534 <_Min_Stack_Size+0x2cf334>
     d1c:	0013010b 	andseq	r0, r3, fp, lsl #2
     d20:	000d0600 	andeq	r0, sp, r0, lsl #12
     d24:	0b3a0e03 	bleq	e84538 <_Min_Stack_Size+0xe84338>
     d28:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d2c:	00000b38 	andeq	r0, r0, r8, lsr fp
     d30:	03000d07 	movweq	r0, #3335	; 0xd07
     d34:	3b0b3a0e 	blcc	2cf574 <_Min_Stack_Size+0x2cf374>
     d38:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     d3c:	08000005 	stmdaeq	r0, {r0, r2}
     d40:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     d44:	0b3b0b3a 	bleq	ec3a34 <_Min_Stack_Size+0xec3834>
     d48:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     d4c:	01090000 	mrseq	r0, (UNDEF: 9)
     d50:	01134901 	tsteq	r3, r1, lsl #18
     d54:	0a000013 	beq	da8 <_Min_Stack_Size+0xba8>
     d58:	13490021 	movtne	r0, #36897	; 0x9021
     d5c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     d60:	4900350b 	stmdbmi	r0, {r0, r1, r3, r8, sl, ip, sp}
     d64:	0c000013 	stceq	0, cr0, [r0], {19}
     d68:	13490021 	movtne	r0, #36897	; 0x9021
     d6c:	0000052f 	andeq	r0, r0, pc, lsr #10
     d70:	0b01130d 	bleq	459ac <_Min_Stack_Size+0x457ac>
     d74:	3b0b3a0b 	blcc	2cf5a8 <_Min_Stack_Size+0x2cf3a8>
     d78:	0013010b 	andseq	r0, r3, fp, lsl #2
     d7c:	000d0e00 	andeq	r0, sp, r0, lsl #28
     d80:	0b3a0803 	bleq	e82d94 <_Min_Stack_Size+0xe82b94>
     d84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d88:	00000b38 	andeq	r0, r0, r8, lsr fp
     d8c:	4900260f 	stmdbmi	r0, {r0, r1, r2, r3, r9, sl, sp}
     d90:	10000013 	andne	r0, r0, r3, lsl r0
     d94:	0b0b0113 	bleq	2c11e8 <_Min_Stack_Size+0x2c0fe8>
     d98:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     d9c:	00001301 	andeq	r1, r0, r1, lsl #6
     da0:	03000d11 	movweq	r0, #3345	; 0xd11
     da4:	3b0b3a0e 	blcc	2cf5e4 <_Min_Stack_Size+0x2cf3e4>
     da8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     dac:	1200000b 	andne	r0, r0, #11
     db0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     db4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     db8:	0b381349 	bleq	e05ae4 <_Min_Stack_Size+0xe058e4>
     dbc:	16130000 	ldrne	r0, [r3], -r0
     dc0:	3a0e0300 	bcc	3819c8 <_Min_Stack_Size+0x3817c8>
     dc4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     dc8:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
     dcc:	0b0b0104 	bleq	2c11e4 <_Min_Stack_Size+0x2c0fe4>
     dd0:	0b3a1349 	bleq	e85afc <_Min_Stack_Size+0xe858fc>
     dd4:	1301053b 	movwne	r0, #5435	; 0x153b
     dd8:	28150000 	ldmdacs	r5, {}	; <UNPREDICTABLE>
     ddc:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     de0:	1600000b 	strne	r0, [r0], -fp
     de4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     de8:	0b3a0e03 	bleq	e845fc <_Min_Stack_Size+0xe843fc>
     dec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     df0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     df4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     df8:	00130119 	andseq	r0, r3, r9, lsl r1
     dfc:	00051700 	andeq	r1, r5, r0, lsl #14
     e00:	0b3a0e03 	bleq	e84614 <_Min_Stack_Size+0xe84414>
     e04:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e08:	00001802 	andeq	r1, r0, r2, lsl #16
     e0c:	03003418 	movweq	r3, #1048	; 0x418
     e10:	3b0b3a0e 	blcc	2cf650 <_Min_Stack_Size+0x2cf450>
     e14:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e18:	19000018 	stmdbne	r0, {r3, r4}
     e1c:	0b0b000f 	bleq	2c0e60 <_Min_Stack_Size+0x2c0c60>
     e20:	00001349 	andeq	r1, r0, r9, asr #6
     e24:	0300341a 	movweq	r3, #1050	; 0x41a
     e28:	3b0b3a0e 	blcc	2cf668 <_Min_Stack_Size+0x2cf468>
     e2c:	3f134905 	svccc	0x00134905
     e30:	00193c19 	andseq	r3, r9, r9, lsl ip
     e34:	11010000 	mrsne	r0, (UNDEF: 1)
     e38:	130e2501 	movwne	r2, #58625	; 0xe501
     e3c:	550e030b 	strpl	r0, [lr, #-779]	; 0xfffffcf5
     e40:	10011117 	andne	r1, r1, r7, lsl r1
     e44:	02000017 	andeq	r0, r0, #23
     e48:	0b0b0024 	bleq	2c0ee0 <_Min_Stack_Size+0x2c0ce0>
     e4c:	0e030b3e 	vmoveq.16	d3[0], r0
     e50:	16030000 	strne	r0, [r3], -r0
     e54:	3a0e0300 	bcc	381a5c <_Min_Stack_Size+0x38185c>
     e58:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e5c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     e60:	0b0b0024 	bleq	2c0ef8 <_Min_Stack_Size+0x2c0cf8>
     e64:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     e68:	35050000 	strcc	r0, [r5, #-0]
     e6c:	00134900 	andseq	r4, r3, r0, lsl #18
     e70:	00260600 	eoreq	r0, r6, r0, lsl #12
     e74:	00001349 	andeq	r1, r0, r9, asr #6
     e78:	0b010407 	bleq	41e9c <_Min_Stack_Size+0x41c9c>
     e7c:	3a13490b 	bcc	4d32b0 <_Min_Stack_Size+0x4d30b0>
     e80:	01053b0b 	tsteq	r5, fp, lsl #22
     e84:	08000013 	stmdaeq	r0, {r0, r1, r4}
     e88:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     e8c:	00000b1c 	andeq	r0, r0, ip, lsl fp
     e90:	03002809 	movweq	r2, #2057	; 0x809
     e94:	000b1c08 	andeq	r1, fp, r8, lsl #24
     e98:	00160a00 	andseq	r0, r6, r0, lsl #20
     e9c:	0b3a0e03 	bleq	e846b0 <_Min_Stack_Size+0xe844b0>
     ea0:	1349053b 	movtne	r0, #38203	; 0x953b
     ea4:	130b0000 	movwne	r0, #45056	; 0xb000
     ea8:	3a0b0b01 	bcc	2c3ab4 <_Min_Stack_Size+0x2c38b4>
     eac:	01053b0b 	tsteq	r5, fp, lsl #22
     eb0:	0c000013 	stceq	0, cr0, [r0], {19}
     eb4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     eb8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ebc:	0b381349 	bleq	e05be8 <_Min_Stack_Size+0xe059e8>
     ec0:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     ec4:	3a0e0300 	bcc	381acc <_Min_Stack_Size+0x3818cc>
     ec8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ecc:	000b3813 	andeq	r3, fp, r3, lsl r8
     ed0:	01130e00 	tsteq	r3, r0, lsl #28
     ed4:	0b3a0b0b 	bleq	e83b08 <_Min_Stack_Size+0xe83908>
     ed8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     edc:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; ee4 <_Min_Stack_Size+0xce4>
     ee0:	3a0e0300 	bcc	381ae8 <_Min_Stack_Size+0x3818e8>
     ee4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ee8:	000b3813 	andeq	r3, fp, r3, lsl r8
     eec:	002e1000 	eoreq	r1, lr, r0
     ef0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     ef4:	0b3b0b3a 	bleq	ec3be4 <_Min_Stack_Size+0xec39e4>
     ef8:	01111927 	tsteq	r1, r7, lsr #18
     efc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f00:	00194297 	mulseq	r9, r7, r2
     f04:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
     f08:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     f0c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f10:	01111927 	tsteq	r1, r7, lsr #18
     f14:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f18:	01194297 			; <UNDEFINED> instruction: 0x01194297
     f1c:	12000013 	andne	r0, r0, #19
     f20:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     f24:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f28:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     f2c:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     f30:	03193f01 	tsteq	r9, #1, 30
     f34:	3b0b3a0e 	blcc	2cf774 <_Min_Stack_Size+0x2cf574>
     f38:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     f3c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     f40:	96184006 	ldrls	r4, [r8], -r6
     f44:	13011942 	movwne	r1, #6466	; 0x1942
     f48:	34140000 	ldrcc	r0, [r4], #-0
     f4c:	3a0e0300 	bcc	381b54 <_Min_Stack_Size+0x381954>
     f50:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f54:	00180213 	andseq	r0, r8, r3, lsl r2
     f58:	002e1500 	eoreq	r1, lr, r0, lsl #10
     f5c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     f60:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f64:	13491927 	movtne	r1, #39207	; 0x9927
     f68:	06120111 			; <UNDEFINED> instruction: 0x06120111
     f6c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     f70:	16000019 			; <UNDEFINED> instruction: 0x16000019
     f74:	08030034 	stmdaeq	r3, {r2, r4, r5}
     f78:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f7c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     f80:	0f170000 	svceq	0x00170000
     f84:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     f88:	18000013 	stmdane	r0, {r0, r1, r4}
     f8c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     f90:	0b3a0e03 	bleq	e847a4 <_Min_Stack_Size+0xe845a4>
     f94:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     f98:	01111349 	tsteq	r1, r9, asr #6
     f9c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     fa0:	01194297 			; <UNDEFINED> instruction: 0x01194297
     fa4:	19000013 	stmdbne	r0, {r0, r1, r4}
     fa8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     fac:	0b3a0e03 	bleq	e847c0 <_Min_Stack_Size+0xe845c0>
     fb0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     fb4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     fb8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     fbc:	1a000019 	bne	1028 <_Min_Stack_Size+0xe28>
     fc0:	13490101 	movtne	r0, #37121	; 0x9101
     fc4:	00001301 	andeq	r1, r0, r1, lsl #6
     fc8:	4900211b 	stmdbmi	r0, {r0, r1, r3, r4, r8, sp}
     fcc:	000b2f13 	andeq	r2, fp, r3, lsl pc
     fd0:	00341c00 	eorseq	r1, r4, r0, lsl #24
     fd4:	0b3a0e03 	bleq	e847e8 <_Min_Stack_Size+0xe845e8>
     fd8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     fdc:	00001802 	andeq	r1, r0, r2, lsl #16
     fe0:	0300341d 	movweq	r3, #1053	; 0x41d
     fe4:	3b0b3a0e 	blcc	2cf824 <_Min_Stack_Size+0x2cf624>
     fe8:	3f134905 	svccc	0x00134905
     fec:	00193c19 	andseq	r3, r9, r9, lsl ip
     ff0:	11010000 	mrsne	r0, (UNDEF: 1)
     ff4:	130e2501 	movwne	r2, #58625	; 0xe501
     ff8:	550e030b 	strpl	r0, [lr, #-779]	; 0xfffffcf5
     ffc:	10011117 	andne	r1, r1, r7, lsl r1
    1000:	02000017 	andeq	r0, r0, #23
    1004:	0b0b0024 	bleq	2c109c <_Min_Stack_Size+0x2c0e9c>
    1008:	0e030b3e 	vmoveq.16	d3[0], r0
    100c:	16030000 	strne	r0, [r3], -r0
    1010:	3a0e0300 	bcc	381c18 <_Min_Stack_Size+0x381a18>
    1014:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1018:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    101c:	0b0b0024 	bleq	2c10b4 <_Min_Stack_Size+0x2c0eb4>
    1020:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1024:	35050000 	strcc	r0, [r5, #-0]
    1028:	00134900 	andseq	r4, r3, r0, lsl #18
    102c:	00160600 	andseq	r0, r6, r0, lsl #12
    1030:	0b3a0803 	bleq	e83044 <_Min_Stack_Size+0xe82e44>
    1034:	1349053b 	movtne	r0, #38203	; 0x953b
    1038:	04070000 	streq	r0, [r7], #-0
    103c:	490b0b01 	stmdbmi	fp, {r0, r8, r9, fp}
    1040:	3b0b3a13 	blcc	2cf894 <_Min_Stack_Size+0x2cf694>
    1044:	00130105 	andseq	r0, r3, r5, lsl #2
    1048:	00280800 	eoreq	r0, r8, r0, lsl #16
    104c:	0b1c0e03 	bleq	704860 <_Min_Stack_Size+0x704660>
    1050:	16090000 	strne	r0, [r9], -r0
    1054:	3a0e0300 	bcc	381c5c <_Min_Stack_Size+0x381a5c>
    1058:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    105c:	0a000013 	beq	10b0 <_Min_Stack_Size+0xeb0>
    1060:	0b0b0113 	bleq	2c14b4 <_Min_Stack_Size+0x2c12b4>
    1064:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1068:	00001301 	andeq	r1, r0, r1, lsl #6
    106c:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1070:	3b0b3a08 	blcc	2cf898 <_Min_Stack_Size+0x2cf698>
    1074:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1078:	0c00000b 	stceq	0, cr0, [r0], {11}
    107c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1080:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1084:	0b381349 	bleq	e05db0 <_Min_Stack_Size+0xe05bb0>
    1088:	010d0000 	mrseq	r0, (UNDEF: 13)
    108c:	01134901 	tsteq	r3, r1, lsl #18
    1090:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1094:	13490021 	movtne	r0, #36897	; 0x9021
    1098:	00000b2f 	andeq	r0, r0, pc, lsr #22
    109c:	0b01040f 	bleq	420e0 <_Min_Stack_Size+0x41ee0>
    10a0:	3a13490b 	bcc	4d34d4 <_Min_Stack_Size+0x4d32d4>
    10a4:	010b3b0b 	tsteq	fp, fp, lsl #22
    10a8:	10000013 	andne	r0, r0, r3, lsl r0
    10ac:	0b0b0113 	bleq	2c1500 <_Min_Stack_Size+0x2c1300>
    10b0:	0b3b0b3a 	bleq	ec3da0 <_Min_Stack_Size+0xec3ba0>
    10b4:	00001301 	andeq	r1, r0, r1, lsl #6
    10b8:	03000d11 	movweq	r0, #3345	; 0xd11
    10bc:	3b0b3a0e 	blcc	2cf8fc <_Min_Stack_Size+0x2cf6fc>
    10c0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    10c4:	1200000b 	andne	r0, r0, #11
    10c8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    10cc:	0b3a0e03 	bleq	e848e0 <_Min_Stack_Size+0xe846e0>
    10d0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    10d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    10d8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    10dc:	00130119 	andseq	r0, r3, r9, lsl r1
    10e0:	00051300 	andeq	r1, r5, r0, lsl #6
    10e4:	0b3a0e03 	bleq	e848f8 <_Min_Stack_Size+0xe846f8>
    10e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    10ec:	00001802 	andeq	r1, r0, r2, lsl #16
    10f0:	0b000f14 	bleq	4d48 <_Min_Stack_Size+0x4b48>
    10f4:	0013490b 	andseq	r4, r3, fp, lsl #18
    10f8:	002e1500 	eoreq	r1, lr, r0, lsl #10
    10fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1100:	0b3b0b3a 	bleq	ec3df0 <_Min_Stack_Size+0xec3bf0>
    1104:	01111927 	tsteq	r1, r7, lsr #18
    1108:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    110c:	00194296 	mulseq	r9, r6, r2
    1110:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    1114:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1118:	0b3b0b3a 	bleq	ec3e08 <_Min_Stack_Size+0xec3c08>
    111c:	01111927 	tsteq	r1, r7, lsr #18
    1120:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1124:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1128:	17000013 	smladne	r0, r3, r0, r0
    112c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1130:	0b3b0b3a 	bleq	ec3e20 <_Min_Stack_Size+0xec3c20>
    1134:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1138:	34180000 	ldrcc	r0, [r8], #-0
    113c:	3a080300 	bcc	201d44 <_Min_Stack_Size+0x201b44>
    1140:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1144:	00180213 	andseq	r0, r8, r3, lsl r2
    1148:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
    114c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1150:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1154:	01111927 	tsteq	r1, r7, lsr #18
    1158:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    115c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1160:	1a000013 	bne	11b4 <_Min_Stack_Size+0xfb4>
    1164:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1168:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    116c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1170:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    1174:	03193f01 	tsteq	r9, #1, 30
    1178:	3b0b3a0e 	blcc	2cf9b8 <_Min_Stack_Size+0x2cf7b8>
    117c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1180:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1184:	97184006 	ldrls	r4, [r8, -r6]
    1188:	13011942 	movwne	r1, #6466	; 0x1942
    118c:	341c0000 	ldrcc	r0, [ip], #-0
    1190:	3a0e0300 	bcc	381d98 <_Min_Stack_Size+0x381b98>
    1194:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1198:	00180213 	andseq	r0, r8, r3, lsl r2
    119c:	00341d00 	eorseq	r1, r4, r0, lsl #26
    11a0:	0b3a0803 	bleq	e831b4 <_Min_Stack_Size+0xe82fb4>
    11a4:	1349053b 	movtne	r0, #38203	; 0x953b
    11a8:	00001802 	andeq	r1, r0, r2, lsl #16
    11ac:	0300341e 	movweq	r3, #1054	; 0x41e
    11b0:	3b0b3a0e 	blcc	2cf9f0 <_Min_Stack_Size+0x2cf7f0>
    11b4:	3f134905 	svccc	0x00134905
    11b8:	00193c19 	andseq	r3, r9, r9, lsl ip
    11bc:	11010000 	mrsne	r0, (UNDEF: 1)
    11c0:	130e2501 	movwne	r2, #58625	; 0xe501
    11c4:	550e030b 	strpl	r0, [lr, #-779]	; 0xfffffcf5
    11c8:	10011117 	andne	r1, r1, r7, lsl r1
    11cc:	02000017 	andeq	r0, r0, #23
    11d0:	0b0b0024 	bleq	2c1268 <_Min_Stack_Size+0x2c1068>
    11d4:	0e030b3e 	vmoveq.16	d3[0], r0
    11d8:	16030000 	strne	r0, [r3], -r0
    11dc:	3a0e0300 	bcc	381de4 <_Min_Stack_Size+0x381be4>
    11e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    11e4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    11e8:	0b0b0024 	bleq	2c1280 <_Min_Stack_Size+0x2c1080>
    11ec:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    11f0:	35050000 	strcc	r0, [r5, #-0]
    11f4:	00134900 	andseq	r4, r3, r0, lsl #18
    11f8:	01040600 	tsteq	r4, r0, lsl #12
    11fc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1200:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1204:	00001301 	andeq	r1, r0, r1, lsl #6
    1208:	03002807 	movweq	r2, #2055	; 0x807
    120c:	000b1c0e 	andeq	r1, fp, lr, lsl #24
    1210:	00280800 	eoreq	r0, r8, r0, lsl #16
    1214:	0b1c0803 	bleq	703228 <_Min_Stack_Size+0x703028>
    1218:	16090000 	strne	r0, [r9], -r0
    121c:	3a0e0300 	bcc	381e24 <_Min_Stack_Size+0x381c24>
    1220:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1224:	0a000013 	beq	1278 <_Min_Stack_Size+0x1078>
    1228:	0b0b0113 	bleq	2c167c <_Min_Stack_Size+0x2c147c>
    122c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1230:	00001301 	andeq	r1, r0, r1, lsl #6
    1234:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1238:	3b0b3a08 	blcc	2cfa60 <_Min_Stack_Size+0x2cf860>
    123c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1240:	0c00000b 	stceq	0, cr0, [r0], {11}
    1244:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1248:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    124c:	0b381349 	bleq	e05f78 <_Min_Stack_Size+0xe05d78>
    1250:	130d0000 	movwne	r0, #53248	; 0xd000
    1254:	3a0b0b01 	bcc	2c3e60 <_Min_Stack_Size+0x2c3c60>
    1258:	010b3b0b 	tsteq	fp, fp, lsl #22
    125c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1260:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1264:	0b3b0b3a 	bleq	ec3f54 <_Min_Stack_Size+0xec3d54>
    1268:	0b381349 	bleq	e05f94 <_Min_Stack_Size+0xe05d94>
    126c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    1270:	03193f01 	tsteq	r9, #1, 30
    1274:	3b0b3a0e 	blcc	2cfab4 <_Min_Stack_Size+0x2cf8b4>
    1278:	1119270b 	tstne	r9, fp, lsl #14
    127c:	40061201 	andmi	r1, r6, r1, lsl #4
    1280:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1284:	00001301 	andeq	r1, r0, r1, lsl #6
    1288:	03000510 	movweq	r0, #1296	; 0x510
    128c:	3b0b3a0e 	blcc	2cfacc <_Min_Stack_Size+0x2cf8cc>
    1290:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1294:	11000018 	tstne	r0, r8, lsl r0
    1298:	0b0b000f 	bleq	2c12dc <_Min_Stack_Size+0x2c10dc>
    129c:	00001349 	andeq	r1, r0, r9, asr #6
    12a0:	3f012e12 	svccc	0x00012e12
    12a4:	3a0e0319 	bcc	381f10 <_Min_Stack_Size+0x381d10>
    12a8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    12ac:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    12b0:	97184006 	ldrls	r4, [r8, -r6]
    12b4:	13011942 	movwne	r1, #6466	; 0x1942
    12b8:	34130000 	ldrcc	r0, [r3], #-0
    12bc:	3a0e0300 	bcc	381ec4 <_Min_Stack_Size+0x381cc4>
    12c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12c4:	00180213 	andseq	r0, r8, r3, lsl r2
    12c8:	00341400 	eorseq	r1, r4, r0, lsl #8
    12cc:	0b3a0803 	bleq	e832e0 <_Min_Stack_Size+0xe830e0>
    12d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    12d4:	00001802 	andeq	r1, r0, r2, lsl #16
    12d8:	3f012e15 	svccc	0x00012e15
    12dc:	3a0e0319 	bcc	381f48 <_Min_Stack_Size+0x381d48>
    12e0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    12e4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    12e8:	97184006 	ldrls	r4, [r8, -r6]
    12ec:	13011942 	movwne	r1, #6466	; 0x1942
    12f0:	05160000 	ldreq	r0, [r6, #-0]
    12f4:	3a0e0300 	bcc	381efc <_Min_Stack_Size+0x381cfc>
    12f8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    12fc:	00180213 	andseq	r0, r8, r3, lsl r2
    1300:	00341700 	eorseq	r1, r4, r0, lsl #14
    1304:	0b3a0e03 	bleq	e84b18 <_Min_Stack_Size+0xe84918>
    1308:	1349053b 	movtne	r0, #38203	; 0x953b
    130c:	00001802 	andeq	r1, r0, r2, lsl #16
    1310:	3f012e18 	svccc	0x00012e18
    1314:	3a0e0319 	bcc	381f80 <_Min_Stack_Size+0x381d80>
    1318:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    131c:	11134919 	tstne	r3, r9, lsl r9
    1320:	40061201 	andmi	r1, r6, r1, lsl #4
    1324:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1328:	00001301 	andeq	r1, r0, r1, lsl #6
    132c:	03003419 	movweq	r3, #1049	; 0x419
    1330:	3b0b3a0e 	blcc	2cfb70 <_Min_Stack_Size+0x2cf970>
    1334:	3f134905 	svccc	0x00134905
    1338:	00193c19 	andseq	r3, r9, r9, lsl ip
    133c:	11010000 	mrsne	r0, (UNDEF: 1)
    1340:	130e2501 	movwne	r2, #58625	; 0xe501
    1344:	550e030b 	strpl	r0, [lr, #-779]	; 0xfffffcf5
    1348:	10011117 	andne	r1, r1, r7, lsl r1
    134c:	02000017 	andeq	r0, r0, #23
    1350:	0b0b0024 	bleq	2c13e8 <_Min_Stack_Size+0x2c11e8>
    1354:	0e030b3e 	vmoveq.16	d3[0], r0
    1358:	16030000 	strne	r0, [r3], -r0
    135c:	3a0e0300 	bcc	381f64 <_Min_Stack_Size+0x381d64>
    1360:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1364:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1368:	0b0b0024 	bleq	2c1400 <_Min_Stack_Size+0x2c1200>
    136c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1370:	35050000 	strcc	r0, [r5, #-0]
    1374:	00134900 	andseq	r4, r3, r0, lsl #18
    1378:	01040600 	tsteq	r4, r0, lsl #12
    137c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1380:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1384:	00001301 	andeq	r1, r0, r1, lsl #6
    1388:	03002807 	movweq	r2, #2055	; 0x807
    138c:	000b1c0e 	andeq	r1, fp, lr, lsl #24
    1390:	00280800 	eoreq	r0, r8, r0, lsl #16
    1394:	0b1c0803 	bleq	7033a8 <_Min_Stack_Size+0x7031a8>
    1398:	16090000 	strne	r0, [r9], -r0
    139c:	3a0e0300 	bcc	381fa4 <_Min_Stack_Size+0x381da4>
    13a0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    13a4:	0a000013 	beq	13f8 <_Min_Stack_Size+0x11f8>
    13a8:	0b0b0113 	bleq	2c17fc <_Min_Stack_Size+0x2c15fc>
    13ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    13b0:	00001301 	andeq	r1, r0, r1, lsl #6
    13b4:	03000d0b 	movweq	r0, #3339	; 0xd0b
    13b8:	3b0b3a08 	blcc	2cfbe0 <_Min_Stack_Size+0x2cf9e0>
    13bc:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    13c0:	0c00000b 	stceq	0, cr0, [r0], {11}
    13c4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    13c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    13cc:	0b381349 	bleq	e060f8 <_Min_Stack_Size+0xe05ef8>
    13d0:	130d0000 	movwne	r0, #53248	; 0xd000
    13d4:	3a0b0b01 	bcc	2c3fe0 <_Min_Stack_Size+0x2c3de0>
    13d8:	010b3b0b 	tsteq	fp, fp, lsl #22
    13dc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    13e0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    13e4:	0b3b0b3a 	bleq	ec40d4 <_Min_Stack_Size+0xec3ed4>
    13e8:	0b381349 	bleq	e06114 <_Min_Stack_Size+0xe05f14>
    13ec:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    13f0:	03193f01 	tsteq	r9, #1, 30
    13f4:	3b0b3a0e 	blcc	2cfc34 <_Min_Stack_Size+0x2cfa34>
    13f8:	1119270b 	tstne	r9, fp, lsl #14
    13fc:	40061201 	andmi	r1, r6, r1, lsl #4
    1400:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1404:	00001301 	andeq	r1, r0, r1, lsl #6
    1408:	03000510 	movweq	r0, #1296	; 0x510
    140c:	3b0b3a0e 	blcc	2cfc4c <_Min_Stack_Size+0x2cfa4c>
    1410:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1414:	11000018 	tstne	r0, r8, lsl r0
    1418:	0b0b000f 	bleq	2c145c <_Min_Stack_Size+0x2c125c>
    141c:	00001349 	andeq	r1, r0, r9, asr #6
    1420:	3f012e12 	svccc	0x00012e12
    1424:	3a0e0319 	bcc	382090 <_Min_Stack_Size+0x381e90>
    1428:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    142c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1430:	97184006 	ldrls	r4, [r8, -r6]
    1434:	13011942 	movwne	r1, #6466	; 0x1942
    1438:	34130000 	ldrcc	r0, [r3], #-0
    143c:	3a0e0300 	bcc	382044 <_Min_Stack_Size+0x381e44>
    1440:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1444:	00180213 	andseq	r0, r8, r3, lsl r2
    1448:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    144c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1450:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1454:	01111927 	tsteq	r1, r7, lsr #18
    1458:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    145c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1460:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    1464:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1468:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    146c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1470:	34160000 	ldrcc	r0, [r6], #-0
    1474:	3a0e0300 	bcc	38207c <_Min_Stack_Size+0x381e7c>
    1478:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    147c:	00180213 	andseq	r0, r8, r3, lsl r2
    1480:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
    1484:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1488:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    148c:	01111927 	tsteq	r1, r7, lsr #18
    1490:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1494:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1498:	18000013 	stmdane	r0, {r0, r1, r4}
    149c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    14a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    14a4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    14a8:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    14ac:	03193f01 	tsteq	r9, #1, 30
    14b0:	3b0b3a0e 	blcc	2cfcf0 <_Min_Stack_Size+0x2cfaf0>
    14b4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    14b8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    14bc:	97184006 	ldrls	r4, [r8, -r6]
    14c0:	13011942 	movwne	r1, #6466	; 0x1942
    14c4:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
    14c8:	3a0e0301 	bcc	3820d4 <_Min_Stack_Size+0x381ed4>
    14cc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    14d0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    14d4:	97184006 	ldrls	r4, [r8, -r6]
    14d8:	13011942 	movwne	r1, #6466	; 0x1942
    14dc:	341b0000 	ldrcc	r0, [fp], #-0
    14e0:	3a0e0300 	bcc	3820e8 <_Min_Stack_Size+0x381ee8>
    14e4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    14e8:	3c193f13 	ldccc	15, cr3, [r9], {19}
    14ec:	00000019 	andeq	r0, r0, r9, lsl r0
    14f0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    14f4:	030b130e 	movweq	r1, #45838	; 0xb30e
    14f8:	1117550e 	tstne	r7, lr, lsl #10
    14fc:	00171001 	andseq	r1, r7, r1
    1500:	00240200 	eoreq	r0, r4, r0, lsl #4
    1504:	0b3e0b0b 	bleq	f84138 <_Min_Stack_Size+0xf83f38>
    1508:	00000e03 	andeq	r0, r0, r3, lsl #28
    150c:	03001603 	movweq	r1, #1539	; 0x603
    1510:	3b0b3a0e 	blcc	2cfd50 <_Min_Stack_Size+0x2cfb50>
    1514:	0013490b 	andseq	r4, r3, fp, lsl #18
    1518:	00240400 	eoreq	r0, r4, r0, lsl #8
    151c:	0b3e0b0b 	bleq	f84150 <_Min_Stack_Size+0xf83f50>
    1520:	00000803 	andeq	r0, r0, r3, lsl #16
    1524:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
    1528:	06000013 			; <UNDEFINED> instruction: 0x06000013
    152c:	0b0b0104 	bleq	2c1944 <_Min_Stack_Size+0x2c1744>
    1530:	0b3a1349 	bleq	e8625c <_Min_Stack_Size+0xe8605c>
    1534:	1301053b 	movwne	r0, #5435	; 0x153b
    1538:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
    153c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1540:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1544:	08030028 	stmdaeq	r3, {r3, r5}
    1548:	00000b1c 	andeq	r0, r0, ip, lsl fp
    154c:	03001609 	movweq	r1, #1545	; 0x609
    1550:	3b0b3a0e 	blcc	2cfd90 <_Min_Stack_Size+0x2cfb90>
    1554:	00134905 	andseq	r4, r3, r5, lsl #18
    1558:	01130a00 	tsteq	r3, r0, lsl #20
    155c:	0b3a0b0b 	bleq	e84190 <_Min_Stack_Size+0xe83f90>
    1560:	1301053b 	movwne	r0, #5435	; 0x153b
    1564:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    1568:	3a080300 	bcc	202170 <_Min_Stack_Size+0x201f70>
    156c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1570:	000b3813 	andeq	r3, fp, r3, lsl r8
    1574:	000d0c00 	andeq	r0, sp, r0, lsl #24
    1578:	0b3a0e03 	bleq	e84d8c <_Min_Stack_Size+0xe84b8c>
    157c:	1349053b 	movtne	r0, #38203	; 0x953b
    1580:	00000b38 	andeq	r0, r0, r8, lsr fp
    1584:	0b01130d 	bleq	461c0 <_Min_Stack_Size+0x45fc0>
    1588:	3b0b3a0b 	blcc	2cfdbc <_Min_Stack_Size+0x2cfbbc>
    158c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1590:	000d0e00 	andeq	r0, sp, r0, lsl #28
    1594:	0b3a0e03 	bleq	e84da8 <_Min_Stack_Size+0xe84ba8>
    1598:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    159c:	00000b38 	andeq	r0, r0, r8, lsr fp
    15a0:	3f012e0f 	svccc	0x00012e0f
    15a4:	3a0e0319 	bcc	382210 <_Min_Stack_Size+0x382010>
    15a8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    15ac:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    15b0:	96184006 	ldrls	r4, [r8], -r6
    15b4:	13011942 	movwne	r1, #6466	; 0x1942
    15b8:	05100000 	ldreq	r0, [r0, #-0]
    15bc:	3a0e0300 	bcc	3821c4 <_Min_Stack_Size+0x381fc4>
    15c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15c4:	00180213 	andseq	r0, r8, r3, lsl r2
    15c8:	000f1100 	andeq	r1, pc, r0, lsl #2
    15cc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    15d0:	34120000 	ldrcc	r0, [r2], #-0
    15d4:	3a0e0300 	bcc	3821dc <_Min_Stack_Size+0x381fdc>
    15d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15dc:	00180213 	andseq	r0, r8, r3, lsl r2
    15e0:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
    15e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    15e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    15ec:	01111927 	tsteq	r1, r7, lsr #18
    15f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    15f4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    15f8:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    15fc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1600:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1604:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1608:	34150000 	ldrcc	r0, [r5], #-0
    160c:	3a0e0300 	bcc	382214 <_Min_Stack_Size+0x382014>
    1610:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1614:	00180213 	andseq	r0, r8, r3, lsl r2
    1618:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    161c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1620:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1624:	13491927 	movtne	r1, #39207	; 0x9927
    1628:	06120111 			; <UNDEFINED> instruction: 0x06120111
    162c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1630:	00130119 	andseq	r0, r3, r9, lsl r1
    1634:	00341700 	eorseq	r1, r4, r0, lsl #14
    1638:	0b3a0803 	bleq	e8364c <_Min_Stack_Size+0xe8344c>
    163c:	1349053b 	movtne	r0, #38203	; 0x953b
    1640:	00001802 	andeq	r1, r0, r2, lsl #16
    1644:	03003418 	movweq	r3, #1048	; 0x418
    1648:	3b0b3a0e 	blcc	2cfe88 <_Min_Stack_Size+0x2cfc88>
    164c:	3f134905 	svccc	0x00134905
    1650:	00193c19 	andseq	r3, r9, r9, lsl ip
    1654:	11010000 	mrsne	r0, (UNDEF: 1)
    1658:	130e2501 	movwne	r2, #58625	; 0xe501
    165c:	550e030b 	strpl	r0, [lr, #-779]	; 0xfffffcf5
    1660:	10011117 	andne	r1, r1, r7, lsl r1
    1664:	02000017 	andeq	r0, r0, #23
    1668:	0b0b0024 	bleq	2c1700 <_Min_Stack_Size+0x2c1500>
    166c:	0e030b3e 	vmoveq.16	d3[0], r0
    1670:	16030000 	strne	r0, [r3], -r0
    1674:	3a0e0300 	bcc	38227c <_Min_Stack_Size+0x38207c>
    1678:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    167c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1680:	0b0b0024 	bleq	2c1718 <_Min_Stack_Size+0x2c1518>
    1684:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1688:	35050000 	strcc	r0, [r5, #-0]
    168c:	00134900 	andseq	r4, r3, r0, lsl #18
    1690:	01040600 	tsteq	r4, r0, lsl #12
    1694:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1698:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    169c:	00001301 	andeq	r1, r0, r1, lsl #6
    16a0:	03002807 	movweq	r2, #2055	; 0x807
    16a4:	000b1c0e 	andeq	r1, fp, lr, lsl #24
    16a8:	00280800 	eoreq	r0, r8, r0, lsl #16
    16ac:	0b1c0803 	bleq	7036c0 <_Min_Stack_Size+0x7034c0>
    16b0:	16090000 	strne	r0, [r9], -r0
    16b4:	3a0e0300 	bcc	3822bc <_Min_Stack_Size+0x3820bc>
    16b8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    16bc:	0a000013 	beq	1710 <_Min_Stack_Size+0x1510>
    16c0:	0b0b0113 	bleq	2c1b14 <_Min_Stack_Size+0x2c1914>
    16c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    16c8:	00001301 	andeq	r1, r0, r1, lsl #6
    16cc:	03000d0b 	movweq	r0, #3339	; 0xd0b
    16d0:	3b0b3a08 	blcc	2cfef8 <_Min_Stack_Size+0x2cfcf8>
    16d4:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    16d8:	0c00000b 	stceq	0, cr0, [r0], {11}
    16dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    16e0:	0b3a0e03 	bleq	e84ef4 <_Min_Stack_Size+0xe84cf4>
    16e4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    16e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    16ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    16f0:	00130119 	andseq	r0, r3, r9, lsl r1
    16f4:	00050d00 	andeq	r0, r5, r0, lsl #26
    16f8:	0b3a0e03 	bleq	e84f0c <_Min_Stack_Size+0xe84d0c>
    16fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1700:	00001802 	andeq	r1, r0, r2, lsl #16
    1704:	3f002e0e 	svccc	0x00002e0e
    1708:	3a0e0319 	bcc	382374 <_Min_Stack_Size+0x382174>
    170c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1710:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1714:	97184006 	ldrls	r4, [r8, -r6]
    1718:	00001942 	andeq	r1, r0, r2, asr #18
    171c:	3f012e0f 	svccc	0x00012e0f
    1720:	3a0e0319 	bcc	38238c <_Min_Stack_Size+0x38218c>
    1724:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1728:	11134919 	tstne	r3, r9, lsl r9
    172c:	40061201 	andmi	r1, r6, r1, lsl #4
    1730:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1734:	00001301 	andeq	r1, r0, r1, lsl #6
    1738:	03003410 	movweq	r3, #1040	; 0x410
    173c:	3b0b3a0e 	blcc	2cff7c <_Min_Stack_Size+0x2cfd7c>
    1740:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1744:	11000018 	tstne	r0, r8, lsl r0
    1748:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    174c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1750:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1754:	0000193c 	andeq	r1, r0, ip, lsr r9
    1758:	01110100 	tsteq	r1, r0, lsl #2
    175c:	0b130e25 	bleq	4c4ff8 <_Min_Stack_Size+0x4c4df8>
    1760:	17550e03 	ldrbne	r0, [r5, -r3, lsl #28]
    1764:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1768:	24020000 	strcs	r0, [r2], #-0
    176c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1770:	000e030b 	andeq	r0, lr, fp, lsl #6
    1774:	00160300 	andseq	r0, r6, r0, lsl #6
    1778:	0b3a0e03 	bleq	e84f8c <_Min_Stack_Size+0xe84d8c>
    177c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1780:	24040000 	strcs	r0, [r4], #-0
    1784:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1788:	0008030b 	andeq	r0, r8, fp, lsl #6
    178c:	00350500 	eorseq	r0, r5, r0, lsl #10
    1790:	00001349 	andeq	r1, r0, r9, asr #6
    1794:	0b010406 	bleq	427b4 <_Min_Stack_Size+0x425b4>
    1798:	3a13490b 	bcc	4d3bcc <_Min_Stack_Size+0x4d39cc>
    179c:	01053b0b 	tsteq	r5, fp, lsl #22
    17a0:	07000013 	smladeq	r0, r3, r0, r0
    17a4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    17a8:	00000b1c 	andeq	r0, r0, ip, lsl fp
    17ac:	03001608 	movweq	r1, #1544	; 0x608
    17b0:	3b0b3a0e 	blcc	2cfff0 <_Min_Stack_Size+0x2cfdf0>
    17b4:	00134905 	andseq	r4, r3, r5, lsl #18
    17b8:	01130900 	tsteq	r3, r0, lsl #18
    17bc:	0b3a0b0b 	bleq	e843f0 <_Min_Stack_Size+0xe841f0>
    17c0:	1301053b 	movwne	r0, #5435	; 0x153b
    17c4:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    17c8:	3a0e0300 	bcc	3823d0 <_Min_Stack_Size+0x3821d0>
    17cc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    17d0:	000b3813 	andeq	r3, fp, r3, lsl r8
    17d4:	000d0b00 	andeq	r0, sp, r0, lsl #22
    17d8:	0b3a0803 	bleq	e837ec <_Min_Stack_Size+0xe835ec>
    17dc:	1349053b 	movtne	r0, #38203	; 0x953b
    17e0:	00000b38 	andeq	r0, r0, r8, lsr fp
    17e4:	3f002e0c 	svccc	0x00002e0c
    17e8:	3a0e0319 	bcc	382454 <_Min_Stack_Size+0x382254>
    17ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    17f0:	11134919 	tstne	r3, r9, lsl r9
    17f4:	40061201 	andmi	r1, r6, r1, lsl #4
    17f8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    17fc:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    1800:	03193f01 	tsteq	r9, #1, 30
    1804:	3b0b3a0e 	blcc	2d0044 <_Min_Stack_Size+0x2cfe44>
    1808:	1119270b 	tstne	r9, fp, lsl #14
    180c:	40061201 	andmi	r1, r6, r1, lsl #4
    1810:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1814:	00001301 	andeq	r1, r0, r1, lsl #6
    1818:	0300050e 	movweq	r0, #1294	; 0x50e
    181c:	3b0b3a0e 	blcc	2d005c <_Min_Stack_Size+0x2cfe5c>
    1820:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1824:	0f000018 	svceq	0x00000018
    1828:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    182c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1830:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1834:	0000193c 	andeq	r1, r0, ip, lsr r9
    1838:	01110100 	tsteq	r1, r0, lsl #2
    183c:	0b130e25 	bleq	4c50d8 <_Min_Stack_Size+0x4c4ed8>
    1840:	17550e03 	ldrbne	r0, [r5, -r3, lsl #28]
    1844:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1848:	24020000 	strcs	r0, [r2], #-0
    184c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1850:	000e030b 	andeq	r0, lr, fp, lsl #6
    1854:	00160300 	andseq	r0, r6, r0, lsl #6
    1858:	0b3a0e03 	bleq	e8506c <_Min_Stack_Size+0xe84e6c>
    185c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1860:	24040000 	strcs	r0, [r4], #-0
    1864:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1868:	0008030b 	andeq	r0, r8, fp, lsl #6
    186c:	00350500 	eorseq	r0, r5, r0, lsl #10
    1870:	00001349 	andeq	r1, r0, r9, asr #6
    1874:	0b011306 	bleq	46494 <_Min_Stack_Size+0x46294>
    1878:	3b0b3a0b 	blcc	2d00ac <_Min_Stack_Size+0x2cfeac>
    187c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1880:	000d0700 	andeq	r0, sp, r0, lsl #14
    1884:	0b3a0e03 	bleq	e85098 <_Min_Stack_Size+0xe84e98>
    1888:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    188c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1890:	03000d08 	movweq	r0, #3336	; 0xd08
    1894:	3b0b3a08 	blcc	2d00bc <_Min_Stack_Size+0x2cfebc>
    1898:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    189c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    18a0:	13490026 	movtne	r0, #36902	; 0x9026
    18a4:	010a0000 	mrseq	r0, (UNDEF: 10)
    18a8:	01134901 	tsteq	r3, r1, lsl #18
    18ac:	0b000013 	bleq	1900 <_Min_Stack_Size+0x1700>
    18b0:	13490021 	movtne	r0, #36897	; 0x9021
    18b4:	00000b2f 	andeq	r0, r0, pc, lsr #22
    18b8:	0b01040c 	bleq	428f0 <_Min_Stack_Size+0x426f0>
    18bc:	3a13490b 	bcc	4d3cf0 <_Min_Stack_Size+0x4d3af0>
    18c0:	01053b0b 	tsteq	r5, fp, lsl #22
    18c4:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    18c8:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    18cc:	00000b1c 	andeq	r0, r0, ip, lsl fp
    18d0:	0300280e 	movweq	r2, #2062	; 0x80e
    18d4:	000b1c08 	andeq	r1, fp, r8, lsl #24
    18d8:	00160f00 	andseq	r0, r6, r0, lsl #30
    18dc:	0b3a0e03 	bleq	e850f0 <_Min_Stack_Size+0xe84ef0>
    18e0:	1349053b 	movtne	r0, #38203	; 0x953b
    18e4:	13100000 	tstne	r0, #0
    18e8:	3a0b0b01 	bcc	2c44f4 <_Min_Stack_Size+0x2c42f4>
    18ec:	01053b0b 	tsteq	r5, fp, lsl #22
    18f0:	11000013 	tstne	r0, r3, lsl r0
    18f4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    18f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    18fc:	0b381349 	bleq	e06628 <_Min_Stack_Size+0xe06428>
    1900:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
    1904:	3a0e0300 	bcc	38250c <_Min_Stack_Size+0x38230c>
    1908:	11053b0b 	tstne	r5, fp, lsl #22
    190c:	40061201 	andmi	r1, r6, r1, lsl #4
    1910:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1914:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    1918:	03193f00 	tsteq	r9, #0, 30
    191c:	3b0b3a0e 	blcc	2d015c <_Min_Stack_Size+0x2cff5c>
    1920:	1119270b 	tstne	r9, fp, lsl #14
    1924:	40061201 	andmi	r1, r6, r1, lsl #4
    1928:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    192c:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    1930:	03193f01 	tsteq	r9, #1, 30
    1934:	3b0b3a0e 	blcc	2d0174 <_Min_Stack_Size+0x2cff74>
    1938:	1119270b 	tstne	r9, fp, lsl #14
    193c:	40061201 	andmi	r1, r6, r1, lsl #4
    1940:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1944:	00001301 	andeq	r1, r0, r1, lsl #6
    1948:	03000515 	movweq	r0, #1301	; 0x515
    194c:	3b0b3a0e 	blcc	2d018c <_Min_Stack_Size+0x2cff8c>
    1950:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1954:	16000018 			; <UNDEFINED> instruction: 0x16000018
    1958:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    195c:	0b3b0b3a 	bleq	ec464c <_Min_Stack_Size+0xec444c>
    1960:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1964:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    1968:	03193f01 	tsteq	r9, #1, 30
    196c:	3b0b3a0e 	blcc	2d01ac <_Min_Stack_Size+0x2cffac>
    1970:	1119270b 	tstne	r9, fp, lsl #14
    1974:	40061201 	andmi	r1, r6, r1, lsl #4
    1978:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    197c:	00001301 	andeq	r1, r0, r1, lsl #6
    1980:	3f012e18 	svccc	0x00012e18
    1984:	3a0e0319 	bcc	3825f0 <_Min_Stack_Size+0x3823f0>
    1988:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    198c:	11134919 	tstne	r3, r9, lsl r9
    1990:	40061201 	andmi	r1, r6, r1, lsl #4
    1994:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1998:	00001301 	andeq	r1, r0, r1, lsl #6
    199c:	03000519 	movweq	r0, #1305	; 0x519
    19a0:	3b0b3a0e 	blcc	2d01e0 <_Min_Stack_Size+0x2cffe0>
    19a4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    19a8:	1a000018 	bne	1a10 <_Min_Stack_Size+0x1810>
    19ac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    19b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    19b4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    19b8:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    19bc:	03193f01 	tsteq	r9, #1, 30
    19c0:	3b0b3a0e 	blcc	2d0200 <_Min_Stack_Size+0x2d0000>
    19c4:	11192705 	tstne	r9, r5, lsl #14
    19c8:	40061201 	andmi	r1, r6, r1, lsl #4
    19cc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    19d0:	00001301 	andeq	r1, r0, r1, lsl #6
    19d4:	0300341c 	movweq	r3, #1052	; 0x41c
    19d8:	3b0b3a0e 	blcc	2d0218 <_Min_Stack_Size+0x2d0018>
    19dc:	3f134905 	svccc	0x00134905
    19e0:	00193c19 	andseq	r3, r9, r9, lsl ip
    19e4:	11010000 	mrsne	r0, (UNDEF: 1)
    19e8:	130e2501 	movwne	r2, #58625	; 0xe501
    19ec:	550e030b 	strpl	r0, [lr, #-779]	; 0xfffffcf5
    19f0:	10011117 	andne	r1, r1, r7, lsl r1
    19f4:	02000017 	andeq	r0, r0, #23
    19f8:	0b0b0024 	bleq	2c1a90 <_Min_Stack_Size+0x2c1890>
    19fc:	0e030b3e 	vmoveq.16	d3[0], r0
    1a00:	16030000 	strne	r0, [r3], -r0
    1a04:	3a0e0300 	bcc	38260c <_Min_Stack_Size+0x38240c>
    1a08:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a0c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1a10:	0b0b0024 	bleq	2c1aa8 <_Min_Stack_Size+0x2c18a8>
    1a14:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1a18:	35050000 	strcc	r0, [r5, #-0]
    1a1c:	00134900 	andseq	r4, r3, r0, lsl #18
    1a20:	01040600 	tsteq	r4, r0, lsl #12
    1a24:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1a28:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1a2c:	00001301 	andeq	r1, r0, r1, lsl #6
    1a30:	03002807 	movweq	r2, #2055	; 0x807
    1a34:	000b1c0e 	andeq	r1, fp, lr, lsl #24
    1a38:	00280800 	eoreq	r0, r8, r0, lsl #16
    1a3c:	0b1c0803 	bleq	703a50 <_Min_Stack_Size+0x703850>
    1a40:	16090000 	strne	r0, [r9], -r0
    1a44:	3a0e0300 	bcc	38264c <_Min_Stack_Size+0x38244c>
    1a48:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a4c:	0a000013 	beq	1aa0 <_Min_Stack_Size+0x18a0>
    1a50:	0b0b0113 	bleq	2c1ea4 <_Min_Stack_Size+0x2c1ca4>
    1a54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1a58:	00001301 	andeq	r1, r0, r1, lsl #6
    1a5c:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1a60:	3b0b3a0e 	blcc	2d02a0 <_Min_Stack_Size+0x2d00a0>
    1a64:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1a68:	0c00000b 	stceq	0, cr0, [r0], {11}
    1a6c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1a70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1a74:	0b381349 	bleq	e067a0 <_Min_Stack_Size+0xe065a0>
    1a78:	010d0000 	mrseq	r0, (UNDEF: 13)
    1a7c:	01134901 	tsteq	r3, r1, lsl #18
    1a80:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1a84:	13490021 	movtne	r0, #36897	; 0x9021
    1a88:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1a8c:	3f002e0f 	svccc	0x00002e0f
    1a90:	3a0e0319 	bcc	3826fc <_Min_Stack_Size+0x3824fc>
    1a94:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1a98:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1a9c:	96184006 	ldrls	r4, [r8], -r6
    1aa0:	00001942 	andeq	r1, r0, r2, asr #18
    1aa4:	3f012e10 	svccc	0x00012e10
    1aa8:	3a0e0319 	bcc	382714 <_Min_Stack_Size+0x382514>
    1aac:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1ab0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1ab4:	97184006 	ldrls	r4, [r8, -r6]
    1ab8:	13011942 	movwne	r1, #6466	; 0x1942
    1abc:	05110000 	ldreq	r0, [r1, #-0]
    1ac0:	3a0e0300 	bcc	3826c8 <_Min_Stack_Size+0x3824c8>
    1ac4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ac8:	00180213 	andseq	r0, r8, r3, lsl r2
    1acc:	00341200 	eorseq	r1, r4, r0, lsl #4
    1ad0:	0b3a0e03 	bleq	e852e4 <_Min_Stack_Size+0xe850e4>
    1ad4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1ad8:	00001802 	andeq	r1, r0, r2, lsl #16
    1adc:	03003413 	movweq	r3, #1043	; 0x413
    1ae0:	3b0b3a08 	blcc	2d0308 <_Min_Stack_Size+0x2d0108>
    1ae4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1ae8:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
    1aec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1af0:	0b3a0e03 	bleq	e85304 <_Min_Stack_Size+0xe85104>
    1af4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1af8:	01111349 	tsteq	r1, r9, asr #6
    1afc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1b00:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1b04:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    1b08:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1b0c:	0b3a0e03 	bleq	e85320 <_Min_Stack_Size+0xe85120>
    1b10:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1b14:	01111349 	tsteq	r1, r9, asr #6
    1b18:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1b1c:	00194297 	mulseq	r9, r7, r2
    1b20:	002e1600 	eoreq	r1, lr, r0, lsl #12
    1b24:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1b28:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1b2c:	01111927 	tsteq	r1, r7, lsr #18
    1b30:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1b34:	00194297 	mulseq	r9, r7, r2
    1b38:	00341700 	eorseq	r1, r4, r0, lsl #14
    1b3c:	0b3a0e03 	bleq	e85350 <_Min_Stack_Size+0xe85150>
    1b40:	1349053b 	movtne	r0, #38203	; 0x953b
    1b44:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1b48:	01000000 	mrseq	r0, (UNDEF: 0)
    1b4c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1b50:	0e030b13 	vmoveq.32	d3[0], r0
    1b54:	01111755 	tsteq	r1, r5, asr r7
    1b58:	00001710 	andeq	r1, r0, r0, lsl r7
    1b5c:	0b002402 	bleq	ab6c <_Min_Stack_Size+0xa96c>
    1b60:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1b64:	0300000e 	movweq	r0, #14
    1b68:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1b6c:	0b3b0b3a 	bleq	ec485c <_Min_Stack_Size+0xec465c>
    1b70:	00001349 	andeq	r1, r0, r9, asr #6
    1b74:	0b002404 	bleq	ab8c <_Min_Stack_Size+0xa98c>
    1b78:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1b7c:	05000008 	streq	r0, [r0, #-8]
    1b80:	13490035 	movtne	r0, #36917	; 0x9035
    1b84:	04060000 	streq	r0, [r6], #-0
    1b88:	490b0b01 	stmdbmi	fp, {r0, r8, r9, fp}
    1b8c:	3b0b3a13 	blcc	2d03e0 <_Min_Stack_Size+0x2d01e0>
    1b90:	00130105 	andseq	r0, r3, r5, lsl #2
    1b94:	00280700 	eoreq	r0, r8, r0, lsl #14
    1b98:	0b1c0e03 	bleq	7053ac <_Min_Stack_Size+0x7051ac>
    1b9c:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    1ba0:	1c080300 	stcne	3, cr0, [r8], {-0}
    1ba4:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    1ba8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1bac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1bb0:	00001349 	andeq	r1, r0, r9, asr #6
    1bb4:	0b01130a 	bleq	467e4 <_Min_Stack_Size+0x465e4>
    1bb8:	3b0b3a0b 	blcc	2d03ec <_Min_Stack_Size+0x2d01ec>
    1bbc:	00130105 	andseq	r0, r3, r5, lsl #2
    1bc0:	000d0b00 	andeq	r0, sp, r0, lsl #22
    1bc4:	0b3a0803 	bleq	e83bd8 <_Min_Stack_Size+0xe839d8>
    1bc8:	1349053b 	movtne	r0, #38203	; 0x953b
    1bcc:	00000b38 	andeq	r0, r0, r8, lsr fp
    1bd0:	03000d0c 	movweq	r0, #3340	; 0xd0c
    1bd4:	3b0b3a0e 	blcc	2d0414 <_Min_Stack_Size+0x2d0214>
    1bd8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1bdc:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    1be0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1be4:	0b3a0e03 	bleq	e853f8 <_Min_Stack_Size+0xe851f8>
    1be8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1bec:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1bf0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1bf4:	00130119 	andseq	r0, r3, r9, lsl r1
    1bf8:	00050e00 	andeq	r0, r5, r0, lsl #28
    1bfc:	0b3a0e03 	bleq	e85410 <_Min_Stack_Size+0xe85210>
    1c00:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1c04:	00001802 	andeq	r1, r0, r2, lsl #16
    1c08:	3f002e0f 	svccc	0x00002e0f
    1c0c:	3a0e0319 	bcc	382878 <_Min_Stack_Size+0x382678>
    1c10:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1c14:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1c18:	97184006 	ldrls	r4, [r8, -r6]
    1c1c:	00001942 	andeq	r1, r0, r2, asr #18
    1c20:	3f012e10 	svccc	0x00012e10
    1c24:	3a0e0319 	bcc	382890 <_Min_Stack_Size+0x382690>
    1c28:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1c2c:	11134919 	tstne	r3, r9, lsl r9
    1c30:	40061201 	andmi	r1, r6, r1, lsl #4
    1c34:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1c38:	00001301 	andeq	r1, r0, r1, lsl #6
    1c3c:	03003411 	movweq	r3, #1041	; 0x411
    1c40:	3b0b3a08 	blcc	2d0468 <_Min_Stack_Size+0x2d0268>
    1c44:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1c48:	12000018 	andne	r0, r0, #24
    1c4c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1c50:	0b3a0e03 	bleq	e85464 <_Min_Stack_Size+0xe85264>
    1c54:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1c58:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1c5c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1c60:	00130119 	andseq	r0, r3, r9, lsl r1
    1c64:	00341300 	eorseq	r1, r4, r0, lsl #6
    1c68:	0b3a0e03 	bleq	e8547c <_Min_Stack_Size+0xe8527c>
    1c6c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1c70:	00001802 	andeq	r1, r0, r2, lsl #16
    1c74:	3f012e14 	svccc	0x00012e14
    1c78:	3a0e0319 	bcc	3828e4 <_Min_Stack_Size+0x3826e4>
    1c7c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1c80:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1c84:	97184006 	ldrls	r4, [r8, -r6]
    1c88:	13011942 	movwne	r1, #6466	; 0x1942
    1c8c:	05150000 	ldreq	r0, [r5, #-0]
    1c90:	3a0e0300 	bcc	382898 <_Min_Stack_Size+0x382698>
    1c94:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c98:	00180213 	andseq	r0, r8, r3, lsl r2
    1c9c:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    1ca0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1ca4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1ca8:	13491927 	movtne	r1, #39207	; 0x9927
    1cac:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1cb0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1cb4:	00130119 	andseq	r0, r3, r9, lsl r1
    1cb8:	00341700 	eorseq	r1, r4, r0, lsl #14
    1cbc:	0b3a0e03 	bleq	e854d0 <_Min_Stack_Size+0xe852d0>
    1cc0:	1349053b 	movtne	r0, #38203	; 0x953b
    1cc4:	00001802 	andeq	r1, r0, r2, lsl #16
    1cc8:	03003418 	movweq	r3, #1048	; 0x418
    1ccc:	3b0b3a0e 	blcc	2d050c <_Min_Stack_Size+0x2d030c>
    1cd0:	3f134905 	svccc	0x00134905
    1cd4:	00193c19 	andseq	r3, r9, r9, lsl ip
    1cd8:	11010000 	mrsne	r0, (UNDEF: 1)
    1cdc:	130e2501 	movwne	r2, #58625	; 0xe501
    1ce0:	550e030b 	strpl	r0, [lr, #-779]	; 0xfffffcf5
    1ce4:	10011117 	andne	r1, r1, r7, lsl r1
    1ce8:	02000017 	andeq	r0, r0, #23
    1cec:	0b0b0024 	bleq	2c1d84 <_Min_Stack_Size+0x2c1b84>
    1cf0:	0e030b3e 	vmoveq.16	d3[0], r0
    1cf4:	16030000 	strne	r0, [r3], -r0
    1cf8:	3a0e0300 	bcc	382900 <_Min_Stack_Size+0x382700>
    1cfc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d00:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1d04:	0b0b0024 	bleq	2c1d9c <_Min_Stack_Size+0x2c1b9c>
    1d08:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1d0c:	35050000 	strcc	r0, [r5, #-0]
    1d10:	00134900 	andseq	r4, r3, r0, lsl #18
    1d14:	01040600 	tsteq	r4, r0, lsl #12
    1d18:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1d1c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1d20:	00001301 	andeq	r1, r0, r1, lsl #6
    1d24:	03002807 	movweq	r2, #2055	; 0x807
    1d28:	000b1c0e 	andeq	r1, fp, lr, lsl #24
    1d2c:	00280800 	eoreq	r0, r8, r0, lsl #16
    1d30:	0b1c0803 	bleq	703d44 <_Min_Stack_Size+0x703b44>
    1d34:	13090000 	movwne	r0, #36864	; 0x9000
    1d38:	3a0b0b01 	bcc	2c4944 <_Min_Stack_Size+0x2c4744>
    1d3c:	01053b0b 	tsteq	r5, fp, lsl #22
    1d40:	0a000013 	beq	1d94 <_Min_Stack_Size+0x1b94>
    1d44:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1d48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1d4c:	0b381349 	bleq	e06a78 <_Min_Stack_Size+0xe06878>
    1d50:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    1d54:	3a0e0300 	bcc	38295c <_Min_Stack_Size+0x38275c>
    1d58:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d5c:	000b3813 	andeq	r3, fp, r3, lsl r8
    1d60:	00160c00 	andseq	r0, r6, r0, lsl #24
    1d64:	0b3a0e03 	bleq	e85578 <_Min_Stack_Size+0xe85378>
    1d68:	1349053b 	movtne	r0, #38203	; 0x953b
    1d6c:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    1d70:	03193f00 	tsteq	r9, #0, 30
    1d74:	3b0b3a0e 	blcc	2d05b4 <_Min_Stack_Size+0x2d03b4>
    1d78:	1119270b 	tstne	r9, fp, lsl #14
    1d7c:	40061201 	andmi	r1, r6, r1, lsl #4
    1d80:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1d84:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    1d88:	03193f01 	tsteq	r9, #1, 30
    1d8c:	3b0b3a0e 	blcc	2d05cc <_Min_Stack_Size+0x2d03cc>
    1d90:	1119270b 	tstne	r9, fp, lsl #14
    1d94:	40061201 	andmi	r1, r6, r1, lsl #4
    1d98:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1d9c:	00001301 	andeq	r1, r0, r1, lsl #6
    1da0:	0300340f 	movweq	r3, #1039	; 0x40f
    1da4:	3b0b3a0e 	blcc	2d05e4 <_Min_Stack_Size+0x2d03e4>
    1da8:	3f13490b 	svccc	0x0013490b
    1dac:	00193c19 	andseq	r3, r9, r9, lsl ip
    1db0:	00341000 	eorseq	r1, r4, r0
    1db4:	0b3a0e03 	bleq	e855c8 <_Min_Stack_Size+0xe853c8>
    1db8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1dbc:	00001802 	andeq	r1, r0, r2, lsl #16
    1dc0:	03003411 	movweq	r3, #1041	; 0x411
    1dc4:	3b0b3a0e 	blcc	2d0604 <_Min_Stack_Size+0x2d0404>
    1dc8:	3f134905 	svccc	0x00134905
    1dcc:	00193c19 	andseq	r3, r9, r9, lsl ip
    1dd0:	11010000 	mrsne	r0, (UNDEF: 1)
    1dd4:	130e2501 	movwne	r2, #58625	; 0xe501
    1dd8:	550e030b 	strpl	r0, [lr, #-779]	; 0xfffffcf5
    1ddc:	10011117 	andne	r1, r1, r7, lsl r1
    1de0:	02000017 	andeq	r0, r0, #23
    1de4:	0e030104 	adfeqs	f0, f3, f4
    1de8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1dec:	0b3b0b3a 	bleq	ec4adc <_Min_Stack_Size+0xec48dc>
    1df0:	00001301 	andeq	r1, r0, r1, lsl #6
    1df4:	03002803 	movweq	r2, #2051	; 0x803
    1df8:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    1dfc:	00280400 	eoreq	r0, r8, r0, lsl #8
    1e00:	0b1c0e03 	bleq	705614 <_Min_Stack_Size+0x705414>
    1e04:	24050000 	strcs	r0, [r5], #-0
    1e08:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1e0c:	000e030b 	andeq	r0, lr, fp, lsl #6
    1e10:	00160600 	andseq	r0, r6, r0, lsl #12
    1e14:	0b3a0e03 	bleq	e85628 <_Min_Stack_Size+0xe85428>
    1e18:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1e1c:	24070000 	strcs	r0, [r7], #-0
    1e20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1e24:	0008030b 	andeq	r0, r8, fp, lsl #6
    1e28:	00350800 	eorseq	r0, r5, r0, lsl #16
    1e2c:	00001349 	andeq	r1, r0, r9, asr #6
    1e30:	0b010409 	bleq	42e5c <_Min_Stack_Size+0x42c5c>
    1e34:	3a13490b 	bcc	4d4268 <_Min_Stack_Size+0x4d4068>
    1e38:	01053b0b 	tsteq	r5, fp, lsl #22
    1e3c:	0a000013 	beq	1e90 <_Min_Stack_Size+0x1c90>
    1e40:	08030028 	stmdaeq	r3, {r3, r5}
    1e44:	00000b1c 	andeq	r0, r0, ip, lsl fp
    1e48:	0300160b 	movweq	r1, #1547	; 0x60b
    1e4c:	3b0b3a0e 	blcc	2d068c <_Min_Stack_Size+0x2d048c>
    1e50:	00134905 	andseq	r4, r3, r5, lsl #18
    1e54:	01130c00 	tsteq	r3, r0, lsl #24
    1e58:	0b3a0b0b 	bleq	e84a8c <_Min_Stack_Size+0xe8488c>
    1e5c:	1301053b 	movwne	r0, #5435	; 0x153b
    1e60:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    1e64:	3a080300 	bcc	202a6c <_Min_Stack_Size+0x20286c>
    1e68:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e6c:	000b3813 	andeq	r3, fp, r3, lsl r8
    1e70:	000d0e00 	andeq	r0, sp, r0, lsl #28
    1e74:	0b3a0e03 	bleq	e85688 <_Min_Stack_Size+0xe85488>
    1e78:	1349053b 	movtne	r0, #38203	; 0x953b
    1e7c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1e80:	0b01040f 	bleq	42ec4 <_Min_Stack_Size+0x42cc4>
    1e84:	3a13490b 	bcc	4d42b8 <_Min_Stack_Size+0x4d40b8>
    1e88:	010b3b0b 	tsteq	fp, fp, lsl #22
    1e8c:	10000013 	andne	r0, r0, r3, lsl r0
    1e90:	0b0b0113 	bleq	2c22e4 <_Min_Stack_Size+0x2c20e4>
    1e94:	0b3b0b3a 	bleq	ec4b84 <_Min_Stack_Size+0xec4984>
    1e98:	00001301 	andeq	r1, r0, r1, lsl #6
    1e9c:	03000d11 	movweq	r0, #3345	; 0xd11
    1ea0:	3b0b3a0e 	blcc	2d06e0 <_Min_Stack_Size+0x2d04e0>
    1ea4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1ea8:	1200000b 	andne	r0, r0, #11
    1eac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1eb0:	0b3a0e03 	bleq	e856c4 <_Min_Stack_Size+0xe854c4>
    1eb4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1eb8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1ebc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1ec0:	00130119 	andseq	r0, r3, r9, lsl r1
    1ec4:	00341300 	eorseq	r1, r4, r0, lsl #6
    1ec8:	0b3a0e03 	bleq	e856dc <_Min_Stack_Size+0xe854dc>
    1ecc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1ed0:	00001802 	andeq	r1, r0, r2, lsl #16
    1ed4:	3f002e14 	svccc	0x00002e14
    1ed8:	3a0e0319 	bcc	382b44 <_Min_Stack_Size+0x382944>
    1edc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1ee0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1ee4:	96184006 	ldrls	r4, [r8], -r6
    1ee8:	00001942 	andeq	r1, r0, r2, asr #18
    1eec:	03003415 	movweq	r3, #1045	; 0x415
    1ef0:	3b0b3a0e 	blcc	2d0730 <_Min_Stack_Size+0x2d0530>
    1ef4:	3f134905 	svccc	0x00134905
    1ef8:	00193c19 	andseq	r3, r9, r9, lsl ip
    1efc:	11010000 	mrsne	r0, (UNDEF: 1)
    1f00:	130e2501 	movwne	r2, #58625	; 0xe501
    1f04:	1b0e030b 	blne	382b38 <_Min_Stack_Size+0x382938>
    1f08:	1117550e 	tstne	r7, lr, lsl #10
    1f0c:	00171001 	andseq	r1, r7, r1
    1f10:	00240200 	eoreq	r0, r4, r0, lsl #4
    1f14:	0b3e0b0b 	bleq	f84b48 <_Min_Stack_Size+0xf84948>
    1f18:	00000e03 	andeq	r0, r0, r3, lsl #28
    1f1c:	03001603 	movweq	r1, #1539	; 0x603
    1f20:	3b0b3a0e 	blcc	2d0760 <_Min_Stack_Size+0x2d0560>
    1f24:	0013490b 	andseq	r4, r3, fp, lsl #18
    1f28:	00240400 	eoreq	r0, r4, r0, lsl #8
    1f2c:	0b3e0b0b 	bleq	f84b60 <_Min_Stack_Size+0xf84960>
    1f30:	00000803 	andeq	r0, r0, r3, lsl #16
    1f34:	0b000f05 	bleq	5b50 <_Min_Stack_Size+0x5950>
    1f38:	0600000b 	streq	r0, [r0], -fp
    1f3c:	0b0b000f 	bleq	2c1f80 <_Min_Stack_Size+0x2c1d80>
    1f40:	00001349 	andeq	r1, r0, r9, asr #6
    1f44:	03001307 	movweq	r1, #775	; 0x307
    1f48:	00193c0e 	andseq	r3, r9, lr, lsl #24
    1f4c:	00350800 	eorseq	r0, r5, r0, lsl #16
    1f50:	00001349 	andeq	r1, r0, r9, asr #6
    1f54:	49002609 	stmdbmi	r0, {r0, r3, r9, sl, sp}
    1f58:	0a000013 	beq	1fac <_Min_Stack_Size+0x1dac>
    1f5c:	0b0b0104 	bleq	2c2374 <_Min_Stack_Size+0x2c2174>
    1f60:	0b3a1349 	bleq	e86c8c <_Min_Stack_Size+0xe86a8c>
    1f64:	1301053b 	movwne	r0, #5435	; 0x153b
    1f68:	280b0000 	stmdacs	fp, {}	; <UNPREDICTABLE>
    1f6c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1f70:	0c00000b 	stceq	0, cr0, [r0], {11}
    1f74:	08030028 	stmdaeq	r3, {r3, r5}
    1f78:	00000b1c 	andeq	r0, r0, ip, lsl fp
    1f7c:	0b01130d 	bleq	46bb8 <_Min_Stack_Size+0x469b8>
    1f80:	3b0b3a0b 	blcc	2d07b4 <_Min_Stack_Size+0x2d05b4>
    1f84:	00130105 	andseq	r0, r3, r5, lsl #2
    1f88:	000d0e00 	andeq	r0, sp, r0, lsl #28
    1f8c:	0b3a0803 	bleq	e83fa0 <_Min_Stack_Size+0xe83da0>
    1f90:	1349053b 	movtne	r0, #38203	; 0x953b
    1f94:	00000b38 	andeq	r0, r0, r8, lsr fp
    1f98:	03000d0f 	movweq	r0, #3343	; 0xd0f
    1f9c:	3b0b3a0e 	blcc	2d07dc <_Min_Stack_Size+0x2d05dc>
    1fa0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1fa4:	1000000b 	andne	r0, r0, fp
    1fa8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1fac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1fb0:	00001349 	andeq	r1, r0, r9, asr #6
    1fb4:	49010111 	stmdbmi	r1, {r0, r4, r8}
    1fb8:	00130113 	andseq	r0, r3, r3, lsl r1
    1fbc:	00211200 	eoreq	r1, r1, r0, lsl #4
    1fc0:	0b2f1349 	bleq	bc6cec <_Min_Stack_Size+0xbc6aec>
    1fc4:	04130000 	ldreq	r0, [r3], #-0
    1fc8:	490b0b01 	stmdbmi	fp, {r0, r8, r9, fp}
    1fcc:	3b0b3a13 	blcc	2d0820 <_Min_Stack_Size+0x2d0620>
    1fd0:	0013010b 	andseq	r0, r3, fp, lsl #2
    1fd4:	01131400 	tsteq	r3, r0, lsl #8
    1fd8:	0b0b0e03 	bleq	2c57ec <_Min_Stack_Size+0x2c55ec>
    1fdc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1fe0:	00001301 	andeq	r1, r0, r1, lsl #6
    1fe4:	0b011315 	bleq	46c40 <_Min_Stack_Size+0x46a40>
    1fe8:	3b0b3a0b 	blcc	2d081c <_Min_Stack_Size+0x2d061c>
    1fec:	0013010b 	andseq	r0, r3, fp, lsl #2
    1ff0:	000d1600 	andeq	r1, sp, r0, lsl #12
    1ff4:	0b3a0e03 	bleq	e85808 <_Min_Stack_Size+0xe85608>
    1ff8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1ffc:	00000b38 	andeq	r0, r0, r8, lsr fp
    2000:	03000d17 	movweq	r0, #3351	; 0xd17
    2004:	3b0b3a08 	blcc	2d082c <_Min_Stack_Size+0x2d062c>
    2008:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    200c:	1800000b 	stmdane	r0, {r0, r1, r3}
    2010:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    2014:	13011349 	movwne	r1, #4937	; 0x1349
    2018:	05190000 	ldreq	r0, [r9, #-0]
    201c:	00134900 	andseq	r4, r3, r0, lsl #18
    2020:	00261a00 	eoreq	r1, r6, r0, lsl #20
    2024:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    2028:	3a0e0301 	bcc	382c34 <_Min_Stack_Size+0x382a34>
    202c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2030:	010b2019 	tsteq	fp, r9, lsl r0
    2034:	1c000013 	stcne	0, cr0, [r0], {19}
    2038:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    203c:	0b3b0b3a 	bleq	ec4d2c <_Min_Stack_Size+0xec4b2c>
    2040:	00001349 	andeq	r1, r0, r9, asr #6
    2044:	03002e1d 	movweq	r2, #3613	; 0xe1d
    2048:	3b0b3a0e 	blcc	2d0888 <_Min_Stack_Size+0x2d0688>
    204c:	1119270b 	tstne	r9, fp, lsl #14
    2050:	40061201 	andmi	r1, r6, r1, lsl #4
    2054:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2058:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
    205c:	3a0e0301 	bcc	382c68 <_Min_Stack_Size+0x382a68>
    2060:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2064:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2068:	96184006 	ldrls	r4, [r8], -r6
    206c:	13011942 	movwne	r1, #6466	; 0x1942
    2070:	051f0000 	ldreq	r0, [pc, #-0]	; 2078 <_Min_Stack_Size+0x1e78>
    2074:	3a080300 	bcc	202c7c <_Min_Stack_Size+0x202a7c>
    2078:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    207c:	00180213 	andseq	r0, r8, r3, lsl r2
    2080:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
    2084:	0b3a0e03 	bleq	e85898 <_Min_Stack_Size+0xe85698>
    2088:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    208c:	01111349 	tsteq	r1, r9, asr #6
    2090:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2094:	01194296 			; <UNDEFINED> instruction: 0x01194296
    2098:	21000013 	tstcs	r0, r3, lsl r0
    209c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    20a0:	0b3b0b3a 	bleq	ec4d90 <_Min_Stack_Size+0xec4b90>
    20a4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    20a8:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
    20ac:	03193f01 	tsteq	r9, #1, 30
    20b0:	3b0b3a0e 	blcc	2d08f0 <_Min_Stack_Size+0x2d06f0>
    20b4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    20b8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    20bc:	96184006 	ldrls	r4, [r8], -r6
    20c0:	13011942 	movwne	r1, #6466	; 0x1942
    20c4:	05230000 	streq	r0, [r3, #-0]!
    20c8:	3a0e0300 	bcc	382cd0 <_Min_Stack_Size+0x382ad0>
    20cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    20d0:	00180213 	andseq	r0, r8, r3, lsl r2
    20d4:	00342400 	eorseq	r2, r4, r0, lsl #8
    20d8:	0b3a0e03 	bleq	e858ec <_Min_Stack_Size+0xe856ec>
    20dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    20e0:	00001802 	andeq	r1, r0, r2, lsl #16
    20e4:	03012e25 	movweq	r2, #7717	; 0x1e25
    20e8:	3b0b3a0e 	blcc	2d0928 <_Min_Stack_Size+0x2d0728>
    20ec:	11192705 	tstne	r9, r5, lsl #14
    20f0:	40061201 	andmi	r1, r6, r1, lsl #4
    20f4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    20f8:	00001301 	andeq	r1, r0, r1, lsl #6
    20fc:	03000526 	movweq	r0, #1318	; 0x526
    2100:	3b0b3a0e 	blcc	2d0940 <_Min_Stack_Size+0x2d0740>
    2104:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2108:	27000018 	smladcs	r0, r8, r0, r0
    210c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2110:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2114:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2118:	34280000 	strtcc	r0, [r8], #-0
    211c:	3a080300 	bcc	202d24 <_Min_Stack_Size+0x202b24>
    2120:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2124:	00180213 	andseq	r0, r8, r3, lsl r2
    2128:	010b2900 	tsteq	fp, r0, lsl #18
    212c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2130:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
    2134:	03193f01 	tsteq	r9, #1, 30
    2138:	3b0b3a0e 	blcc	2d0978 <_Min_Stack_Size+0x2d0778>
    213c:	11192705 	tstne	r9, r5, lsl #14
    2140:	40061201 	andmi	r1, r6, r1, lsl #4
    2144:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2148:	00001301 	andeq	r1, r0, r1, lsl #6
    214c:	31011d2b 	tstcc	r1, fp, lsr #26
    2150:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2154:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2158:	2c000005 	stccs	0, cr0, [r0], {5}
    215c:	13310034 	teqne	r1, #52	; 0x34
    2160:	00001802 	andeq	r1, r0, r2, lsl #16
    2164:	0300342d 	movweq	r3, #1069	; 0x42d
    2168:	3b0b3a0e 	blcc	2d09a8 <_Min_Stack_Size+0x2d07a8>
    216c:	3f134905 	svccc	0x00134905
    2170:	00193c19 	andseq	r3, r9, r9, lsl ip
    2174:	00342e00 	eorseq	r2, r4, r0, lsl #28
    2178:	0b3a0e03 	bleq	e8598c <_Min_Stack_Size+0xe8578c>
    217c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2180:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    2184:	342f0000 	strtcc	r0, [pc], #-0	; 218c <_Min_Stack_Size+0x1f8c>
    2188:	3a0e0300 	bcc	382d90 <_Min_Stack_Size+0x382b90>
    218c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2190:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    2194:	30000018 	andcc	r0, r0, r8, lsl r0
    2198:	13490021 	movtne	r0, #36897	; 0x9021
    219c:	0000052f 	andeq	r0, r0, pc, lsr #10
    21a0:	01110100 	tsteq	r1, r0, lsl #2
    21a4:	0b130e25 	bleq	4c5a40 <_Min_Stack_Size+0x4c5840>
    21a8:	17550e03 	ldrbne	r0, [r5, -r3, lsl #28]
    21ac:	17100111 			; <UNDEFINED> instruction: 0x17100111
    21b0:	24020000 	strcs	r0, [r2], #-0
    21b4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    21b8:	0008030b 	andeq	r0, r8, fp, lsl #6
    21bc:	00240300 	eoreq	r0, r4, r0, lsl #6
    21c0:	0b3e0b0b 	bleq	f84df4 <_Min_Stack_Size+0xf84bf4>
    21c4:	00000e03 	andeq	r0, r0, r3, lsl #28
    21c8:	03001604 	movweq	r1, #1540	; 0x604
    21cc:	3b0b3a0e 	blcc	2d0a0c <_Min_Stack_Size+0x2d080c>
    21d0:	0013490b 	andseq	r4, r3, fp, lsl #18
    21d4:	000f0500 	andeq	r0, pc, r0, lsl #10
    21d8:	00000b0b 	andeq	r0, r0, fp, lsl #22
    21dc:	0b000f06 	bleq	5dfc <_Min_Stack_Size+0x5bfc>
    21e0:	0013490b 	andseq	r4, r3, fp, lsl #18
    21e4:	00260700 	eoreq	r0, r6, r0, lsl #14
    21e8:	00001349 	andeq	r1, r0, r9, asr #6
    21ec:	0b011308 	bleq	46e14 <_Min_Stack_Size+0x46c14>
    21f0:	3b0b3a0b 	blcc	2d0a24 <_Min_Stack_Size+0x2d0824>
    21f4:	0013010b 	andseq	r0, r3, fp, lsl #2
    21f8:	000d0900 	andeq	r0, sp, r0, lsl #18
    21fc:	0b3a0e03 	bleq	e85a10 <_Min_Stack_Size+0xe85810>
    2200:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2204:	00000b38 	andeq	r0, r0, r8, lsr fp
    2208:	03000d0a 	movweq	r0, #3338	; 0xd0a
    220c:	3b0b3a08 	blcc	2d0a34 <_Min_Stack_Size+0x2d0834>
    2210:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2214:	0b00000b 	bleq	2248 <_Min_Stack_Size+0x2048>
    2218:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    221c:	13011349 	movwne	r1, #4937	; 0x1349
    2220:	050c0000 	streq	r0, [ip, #-0]
    2224:	00134900 	andseq	r4, r3, r0, lsl #18
    2228:	00260d00 	eoreq	r0, r6, r0, lsl #26
    222c:	010e0000 	mrseq	r0, (UNDEF: 14)
    2230:	01134901 	tsteq	r3, r1, lsl #18
    2234:	0f000013 	svceq	0x00000013
    2238:	13490021 	movtne	r0, #36897	; 0x9021
    223c:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2240:	3f012e10 	svccc	0x00012e10
    2244:	3a0e0319 	bcc	382eb0 <_Min_Stack_Size+0x382cb0>
    2248:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    224c:	11134919 	tstne	r3, r9, lsl r9
    2250:	40061201 	andmi	r1, r6, r1, lsl #4
    2254:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2258:	00001301 	andeq	r1, r0, r1, lsl #6
    225c:	03000511 	movweq	r0, #1297	; 0x511
    2260:	3b0b3a08 	blcc	2d0a88 <_Min_Stack_Size+0x2d0888>
    2264:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2268:	12000018 	andne	r0, r0, #24
    226c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2270:	0b3b0b3a 	bleq	ec4f60 <_Min_Stack_Size+0xec4d60>
    2274:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2278:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    227c:	03193f01 	tsteq	r9, #1, 30
    2280:	3b0b3a0e 	blcc	2d0ac0 <_Min_Stack_Size+0x2d08c0>
    2284:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2288:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    228c:	96184006 	ldrls	r4, [r8], -r6
    2290:	13011942 	movwne	r1, #6466	; 0x1942
    2294:	34140000 	ldrcc	r0, [r4], #-0
    2298:	3a080300 	bcc	202ea0 <_Min_Stack_Size+0x202ca0>
    229c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    22a0:	00180213 	andseq	r0, r8, r3, lsl r2
    22a4:	010b1500 	tsteq	fp, r0, lsl #10
    22a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    22ac:	00001301 	andeq	r1, r0, r1, lsl #6
    22b0:	11010b16 	tstne	r1, r6, lsl fp
    22b4:	00061201 	andeq	r1, r6, r1, lsl #4
    22b8:	00051700 	andeq	r1, r5, r0, lsl #14
    22bc:	0b3a0e03 	bleq	e85ad0 <_Min_Stack_Size+0xe858d0>
    22c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    22c4:	00001802 	andeq	r1, r0, r2, lsl #16
    22c8:	3f012e18 	svccc	0x00012e18
    22cc:	3a0e0319 	bcc	382f38 <_Min_Stack_Size+0x382d38>
    22d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    22d4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    22d8:	96184006 	ldrls	r4, [r8], -r6
    22dc:	13011942 	movwne	r1, #6466	; 0x1942
    22e0:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    22e4:	03193f01 	tsteq	r9, #1, 30
    22e8:	3b0b3a0e 	blcc	2d0b28 <_Min_Stack_Size+0x2d0928>
    22ec:	1119270b 	tstne	r9, fp, lsl #14
    22f0:	40061201 	andmi	r1, r6, r1, lsl #4
    22f4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    22f8:	00001301 	andeq	r1, r0, r1, lsl #6
    22fc:	0300341a 	movweq	r3, #1050	; 0x41a
    2300:	3b0b3a0e 	blcc	2d0b40 <_Min_Stack_Size+0x2d0940>
    2304:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2308:	1b000018 	blne	2370 <_Min_Stack_Size+0x2170>
    230c:	13490021 	movtne	r0, #36897	; 0x9021
    2310:	0000182f 	andeq	r1, r0, pc, lsr #16
    2314:	3f012e1c 	svccc	0x00012e1c
    2318:	3a0e0319 	bcc	382f84 <_Min_Stack_Size+0x382d84>
    231c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2320:	11134919 	tstne	r3, r9, lsl r9
    2324:	40061201 	andmi	r1, r6, r1, lsl #4
    2328:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    232c:	00001301 	andeq	r1, r0, r1, lsl #6
    2330:	0300051d 	movweq	r0, #1309	; 0x51d
    2334:	3b0b3a0e 	blcc	2d0b74 <_Min_Stack_Size+0x2d0974>
    2338:	02134905 	andseq	r4, r3, #81920	; 0x14000
    233c:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
    2340:	08030005 	stmdaeq	r3, {r0, r2}
    2344:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2348:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    234c:	011f0000 	tsteq	pc, r0
    2350:	00134901 	andseq	r4, r3, r1, lsl #18
    2354:	11010000 	mrsne	r0, (UNDEF: 1)
    2358:	130e2501 	movwne	r2, #58625	; 0xe501
    235c:	550e030b 	strpl	r0, [lr, #-779]	; 0xfffffcf5
    2360:	10011117 	andne	r1, r1, r7, lsl r1
    2364:	02000017 	andeq	r0, r0, #23
    2368:	0b0b0024 	bleq	2c2400 <_Min_Stack_Size+0x2c2200>
    236c:	0e030b3e 	vmoveq.16	d3[0], r0
    2370:	24030000 	strcs	r0, [r3], #-0
    2374:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2378:	0008030b 	andeq	r0, r8, fp, lsl #6
    237c:	00160400 	andseq	r0, r6, r0, lsl #8
    2380:	0b3a0e03 	bleq	e85b94 <_Min_Stack_Size+0xe85994>
    2384:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2388:	0f050000 	svceq	0x00050000
    238c:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2390:	01130600 	tsteq	r3, r0, lsl #12
    2394:	0b0b0e03 	bleq	2c5ba8 <_Min_Stack_Size+0x2c59a8>
    2398:	0b3b0b3a 	bleq	ec5088 <_Min_Stack_Size+0xec4e88>
    239c:	00001301 	andeq	r1, r0, r1, lsl #6
    23a0:	03000d07 	movweq	r0, #3335	; 0xd07
    23a4:	3b0b3a0e 	blcc	2d0be4 <_Min_Stack_Size+0x2d09e4>
    23a8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    23ac:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    23b0:	0b0b000f 	bleq	2c23f4 <_Min_Stack_Size+0x2c21f4>
    23b4:	00001349 	andeq	r1, r0, r9, asr #6
    23b8:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    23bc:	0a000013 	beq	2410 <_Min_Stack_Size+0x2210>
    23c0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    23c4:	0b3a0e03 	bleq	e85bd8 <_Min_Stack_Size+0xe859d8>
    23c8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    23cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    23d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    23d4:	00130119 	andseq	r0, r3, r9, lsl r1
    23d8:	00050b00 	andeq	r0, r5, r0, lsl #22
    23dc:	0b3a0e03 	bleq	e85bf0 <_Min_Stack_Size+0xe859f0>
    23e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    23e4:	00001802 	andeq	r1, r0, r2, lsl #16
    23e8:	4900260c 	stmdbmi	r0, {r2, r3, r9, sl, sp}
    23ec:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    23f0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    23f4:	0b3b0b3a 	bleq	ec50e4 <_Min_Stack_Size+0xec4ee4>
    23f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    23fc:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    2400:	03193f01 	tsteq	r9, #1, 30
    2404:	3b0b3a0e 	blcc	2d0c44 <_Min_Stack_Size+0x2d0a44>
    2408:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    240c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2410:	97184006 	ldrls	r4, [r8, -r6]
    2414:	00001942 	andeq	r1, r0, r2, asr #18
    2418:	01110100 	tsteq	r1, r0, lsl #2
    241c:	0b130e25 	bleq	4c5cb8 <_Min_Stack_Size+0x4c5ab8>
    2420:	17550e03 	ldrbne	r0, [r5, -r3, lsl #28]
    2424:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2428:	16020000 	strne	r0, [r2], -r0
    242c:	3a0e0300 	bcc	383034 <_Min_Stack_Size+0x382e34>
    2430:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2434:	03000013 	movweq	r0, #19
    2438:	0b0b0024 	bleq	2c24d0 <_Min_Stack_Size+0x2c22d0>
    243c:	0e030b3e 	vmoveq.16	d3[0], r0
    2440:	24040000 	strcs	r0, [r4], #-0
    2444:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2448:	0008030b 	andeq	r0, r8, fp, lsl #6
    244c:	000f0500 	andeq	r0, pc, r0, lsl #10
    2450:	00000b0b 	andeq	r0, r0, fp, lsl #22
    2454:	0b000f06 	bleq	6074 <_Min_Stack_Size+0x5e74>
    2458:	0013490b 	andseq	r4, r3, fp, lsl #18
    245c:	00260700 	eoreq	r0, r6, r0, lsl #14
    2460:	13080000 	movwne	r0, #32768	; 0x8000
    2464:	0b0e0301 	bleq	383070 <_Min_Stack_Size+0x382e70>
    2468:	3b0b3a0b 	blcc	2d0c9c <_Min_Stack_Size+0x2d0a9c>
    246c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2470:	000d0900 	andeq	r0, sp, r0, lsl #18
    2474:	0b3a0e03 	bleq	e85c88 <_Min_Stack_Size+0xe85a88>
    2478:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    247c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2480:	4900350a 	stmdbmi	r0, {r1, r3, r8, sl, ip, sp}
    2484:	0b000013 	bleq	24d8 <_Min_Stack_Size+0x22d8>
    2488:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    248c:	0000193c 	andeq	r1, r0, ip, lsr r9
    2490:	03000d0c 	movweq	r0, #3340	; 0xd0c
    2494:	3b0b3a08 	blcc	2d0cbc <_Min_Stack_Size+0x2d0abc>
    2498:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    249c:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    24a0:	0b0b0117 	bleq	2c2904 <_Min_Stack_Size+0x2c2704>
    24a4:	0b3b0b3a 	bleq	ec5194 <_Min_Stack_Size+0xec4f94>
    24a8:	00001301 	andeq	r1, r0, r1, lsl #6
    24ac:	03000d0e 	movweq	r0, #3342	; 0xd0e
    24b0:	3b0b3a0e 	blcc	2d0cf0 <_Min_Stack_Size+0x2d0af0>
    24b4:	0013490b 	andseq	r4, r3, fp, lsl #18
    24b8:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
    24bc:	0b3a0e03 	bleq	e85cd0 <_Min_Stack_Size+0xe85ad0>
    24c0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    24c4:	0b201349 	bleq	8071f0 <_Min_Stack_Size+0x806ff0>
    24c8:	00001301 	andeq	r1, r0, r1, lsl #6
    24cc:	03003410 	movweq	r3, #1040	; 0x410
    24d0:	3b0b3a0e 	blcc	2d0d10 <_Min_Stack_Size+0x2d0b10>
    24d4:	0013490b 	andseq	r4, r3, fp, lsl #18
    24d8:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
    24dc:	0b3a0e03 	bleq	e85cf0 <_Min_Stack_Size+0xe85af0>
    24e0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    24e4:	13010b20 	movwne	r0, #6944	; 0x1b20
    24e8:	05120000 	ldreq	r0, [r2, #-0]
    24ec:	3a0e0300 	bcc	3830f4 <_Min_Stack_Size+0x382ef4>
    24f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    24f4:	13000013 	movwne	r0, #19
    24f8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    24fc:	0b3a0e03 	bleq	e85d10 <_Min_Stack_Size+0xe85b10>
    2500:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2504:	01111349 	tsteq	r1, r9, asr #6
    2508:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    250c:	01194296 			; <UNDEFINED> instruction: 0x01194296
    2510:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    2514:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2518:	0b3b0b3a 	bleq	ec5208 <_Min_Stack_Size+0xec5008>
    251c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2520:	34150000 	ldrcc	r0, [r5], #-0
    2524:	3a0e0300 	bcc	38312c <_Min_Stack_Size+0x382f2c>
    2528:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    252c:	00180213 	andseq	r0, r8, r3, lsl r2
    2530:	00261600 	eoreq	r1, r6, r0, lsl #12
    2534:	00001349 	andeq	r1, r0, r9, asr #6
    2538:	3f012e17 	svccc	0x00012e17
    253c:	3a0e0319 	bcc	3831a8 <_Min_Stack_Size+0x382fa8>
    2540:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2544:	11134919 	tstne	r3, r9, lsl r9
    2548:	40061201 	andmi	r1, r6, r1, lsl #4
    254c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2550:	00001301 	andeq	r1, r0, r1, lsl #6
    2554:	03000518 	movweq	r0, #1304	; 0x518
    2558:	3b0b3a0e 	blcc	2d0d98 <_Min_Stack_Size+0x2d0b98>
    255c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2560:	19000018 	stmdbne	r0, {r3, r4}
    2564:	0e03012e 	adfeqsp	f0, f3, #0.5
    2568:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    256c:	01111927 	tsteq	r1, r7, lsr #18
    2570:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2574:	01194296 			; <UNDEFINED> instruction: 0x01194296
    2578:	1a000013 	bne	25cc <_Min_Stack_Size+0x23cc>
    257c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2580:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2584:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    2588:	00001301 	andeq	r1, r0, r1, lsl #6
    258c:	11010b1b 	tstne	r1, fp, lsl fp
    2590:	00061201 	andeq	r1, r6, r1, lsl #4
    2594:	00341c00 	eorseq	r1, r4, r0, lsl #24
    2598:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    259c:	0b1d0000 	bleq	7425a4 <_Min_Stack_Size+0x7423a4>
    25a0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    25a4:	00130106 	andseq	r0, r3, r6, lsl #2
    25a8:	011d1e00 	tsteq	sp, r0, lsl #28
    25ac:	01111331 	tsteq	r1, r1, lsr r3
    25b0:	0b580612 	bleq	1603e00 <_Min_Stack_Size+0x1603c00>
    25b4:	00000559 	andeq	r0, r0, r9, asr r5
    25b8:	3100051f 	tstcc	r0, pc, lsl r5
    25bc:	00180213 	andseq	r0, r8, r3, lsl r2
    25c0:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
    25c4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    25c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    25cc:	13491927 	movtne	r1, #39207	; 0x9927
    25d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    25d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    25d8:	00130119 	andseq	r0, r3, r9, lsl r1
    25dc:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
    25e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    25e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    25e8:	01111927 	tsteq	r1, r7, lsr #18
    25ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    25f0:	01194296 			; <UNDEFINED> instruction: 0x01194296
    25f4:	22000013 	andcs	r0, r0, #19
    25f8:	0e03012e 	adfeqsp	f0, f3, #0.5
    25fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2600:	13491927 	movtne	r1, #39207	; 0x9927
    2604:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2608:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    260c:	00130119 	andseq	r0, r3, r9, lsl r1
    2610:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
    2614:	0b3a0e03 	bleq	e85e28 <_Min_Stack_Size+0xe85c28>
    2618:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    261c:	01111349 	tsteq	r1, r9, asr #6
    2620:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2624:	01194296 			; <UNDEFINED> instruction: 0x01194296
    2628:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    262c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2630:	0b3a0e03 	bleq	e85e44 <_Min_Stack_Size+0xe85c44>
    2634:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2638:	01111349 	tsteq	r1, r9, asr #6
    263c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2640:	00194297 	mulseq	r9, r7, r2
    2644:	11010000 	mrsne	r0, (UNDEF: 1)
    2648:	130e2501 	movwne	r2, #58625	; 0xe501
    264c:	550e030b 	strpl	r0, [lr, #-779]	; 0xfffffcf5
    2650:	10011117 	andne	r1, r1, r7, lsl r1
    2654:	02000017 	andeq	r0, r0, #23
    2658:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    265c:	0b3b0b3a 	bleq	ec534c <_Min_Stack_Size+0xec514c>
    2660:	00001349 	andeq	r1, r0, r9, asr #6
    2664:	0b002403 	bleq	b678 <_Min_Stack_Size+0xb478>
    2668:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    266c:	0400000e 	streq	r0, [r0], #-14
    2670:	0b0b0024 	bleq	2c2708 <_Min_Stack_Size+0x2c2508>
    2674:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2678:	0f050000 	svceq	0x00050000
    267c:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2680:	000f0600 	andeq	r0, pc, r0, lsl #12
    2684:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2688:	26070000 	strcs	r0, [r7], -r0
    268c:	00134900 	andseq	r4, r3, r0, lsl #18
    2690:	01150800 	tsteq	r5, r0, lsl #16
    2694:	13011927 	movwne	r1, #6439	; 0x1927
    2698:	05090000 	streq	r0, [r9, #-0]
    269c:	00134900 	andseq	r4, r3, r0, lsl #18
    26a0:	01130a00 	tsteq	r3, r0, lsl #20
    26a4:	0b0b0e03 	bleq	2c5eb8 <_Min_Stack_Size+0x2c5cb8>
    26a8:	0b3b0b3a 	bleq	ec5398 <_Min_Stack_Size+0xec5198>
    26ac:	00001301 	andeq	r1, r0, r1, lsl #6
    26b0:	03000d0b 	movweq	r0, #3339	; 0xd0b
    26b4:	3b0b3a0e 	blcc	2d0ef4 <_Min_Stack_Size+0x2d0cf4>
    26b8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    26bc:	0c00000b 	stceq	0, cr0, [r0], {11}
    26c0:	13490035 	movtne	r0, #36917	; 0x9035
    26c4:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    26c8:	3a0e0300 	bcc	3832d0 <_Min_Stack_Size+0x3830d0>
    26cc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    26d0:	000b3813 	andeq	r3, fp, r3, lsl r8
    26d4:	01040e00 	tsteq	r4, r0, lsl #28
    26d8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    26dc:	0b3b0b3a 	bleq	ec53cc <_Min_Stack_Size+0xec51cc>
    26e0:	00001301 	andeq	r1, r0, r1, lsl #6
    26e4:	0300280f 	movweq	r2, #2063	; 0x80f
    26e8:	000b1c0e 	andeq	r1, fp, lr, lsl #24
    26ec:	01011000 	mrseq	r1, (UNDEF: 1)
    26f0:	13011349 	movwne	r1, #4937	; 0x1349
    26f4:	21110000 	tstcs	r1, r0
    26f8:	2f134900 	svccs	0x00134900
    26fc:	1200000b 	andne	r0, r0, #11
    2700:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2704:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2708:	00001349 	andeq	r1, r0, r9, asr #6
    270c:	03012e13 	movweq	r2, #7699	; 0x1e13
    2710:	3b0b3a0e 	blcc	2d0f50 <_Min_Stack_Size+0x2d0d50>
    2714:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2718:	010b2013 	tsteq	fp, r3, lsl r0
    271c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    2720:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2724:	0b3b0b3a 	bleq	ec5414 <_Min_Stack_Size+0xec5214>
    2728:	00001349 	andeq	r1, r0, r9, asr #6
    272c:	03012e15 	movweq	r2, #7701	; 0x1e15
    2730:	3b0b3a0e 	blcc	2d0f70 <_Min_Stack_Size+0x2d0d70>
    2734:	2019270b 	andscs	r2, r9, fp, lsl #14
    2738:	0013010b 	andseq	r0, r3, fp, lsl #2
    273c:	00051600 	andeq	r1, r5, r0, lsl #12
    2740:	0b3a0e03 	bleq	e85f54 <_Min_Stack_Size+0xe85d54>
    2744:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2748:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    274c:	03193f01 	tsteq	r9, #1, 30
    2750:	3b0b3a0e 	blcc	2d0f90 <_Min_Stack_Size+0x2d0d90>
    2754:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2758:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    275c:	96184006 	ldrls	r4, [r8], -r6
    2760:	13011942 	movwne	r1, #6466	; 0x1942
    2764:	05180000 	ldreq	r0, [r8, #-0]
    2768:	3a0e0300 	bcc	383370 <_Min_Stack_Size+0x383170>
    276c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2770:	00180213 	andseq	r0, r8, r3, lsl r2
    2774:	00341900 	eorseq	r1, r4, r0, lsl #18
    2778:	0b3a0e03 	bleq	e85f8c <_Min_Stack_Size+0xe85d8c>
    277c:	1349053b 	movtne	r0, #38203	; 0x953b
    2780:	00001802 	andeq	r1, r0, r2, lsl #16
    2784:	11010b1a 	tstne	r1, sl, lsl fp
    2788:	00061201 	andeq	r1, r6, r1, lsl #4
    278c:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
    2790:	0b3a0e03 	bleq	e85fa4 <_Min_Stack_Size+0xe85da4>
    2794:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2798:	06120111 			; <UNDEFINED> instruction: 0x06120111
    279c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    27a0:	00130119 	andseq	r0, r3, r9, lsl r1
    27a4:	00341c00 	eorseq	r1, r4, r0, lsl #24
    27a8:	0b3a0803 	bleq	e847bc <_Min_Stack_Size+0xe845bc>
    27ac:	1349053b 	movtne	r0, #38203	; 0x953b
    27b0:	00001802 	andeq	r1, r0, r2, lsl #16
    27b4:	3f012e1d 	svccc	0x00012e1d
    27b8:	3a0e0319 	bcc	383424 <_Min_Stack_Size+0x383224>
    27bc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    27c0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    27c4:	96184006 	ldrls	r4, [r8], -r6
    27c8:	13011942 	movwne	r1, #6466	; 0x1942
    27cc:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
    27d0:	03193f01 	tsteq	r9, #1, 30
    27d4:	3b0b3a0e 	blcc	2d1014 <_Min_Stack_Size+0x2d0e14>
    27d8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    27dc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    27e0:	97184006 	ldrls	r4, [r8, -r6]
    27e4:	13011942 	movwne	r1, #6466	; 0x1942
    27e8:	1d1f0000 	ldcne	0, cr0, [pc, #-0]	; 27f0 <_Min_Stack_Size+0x25f0>
    27ec:	11133101 	tstne	r3, r1, lsl #2
    27f0:	58061201 	stmdapl	r6, {r0, r9, ip}
    27f4:	0105590b 	tsteq	r5, fp, lsl #18
    27f8:	20000013 	andcs	r0, r0, r3, lsl r0
    27fc:	13310034 	teqne	r1, #52	; 0x34
    2800:	00001802 	andeq	r1, r0, r2, lsl #16
    2804:	31011d21 	tstcc	r1, r1, lsr #26
    2808:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    280c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2810:	22000005 	andcs	r0, r0, #5
    2814:	13310005 	teqne	r1, #5
    2818:	00001802 	andeq	r1, r0, r2, lsl #16
    281c:	03012e23 	movweq	r2, #7715	; 0x1e23
    2820:	3b0b3a0e 	blcc	2d1060 <_Min_Stack_Size+0x2d0e60>
    2824:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2828:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    282c:	97184006 	ldrls	r4, [r8, -r6]
    2830:	13011942 	movwne	r1, #6466	; 0x1942
    2834:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
    2838:	03193f00 	tsteq	r9, #0, 30
    283c:	3b0b3a0e 	blcc	2d107c <_Min_Stack_Size+0x2d0e7c>
    2840:	11192705 	tstne	r9, r5, lsl #14
    2844:	40061201 	andmi	r1, r6, r1, lsl #4
    2848:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    284c:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
    2850:	03193f00 	tsteq	r9, #0, 30
    2854:	3b0b3a0e 	blcc	2d1094 <_Min_Stack_Size+0x2d0e94>
    2858:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    285c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2860:	97184006 	ldrls	r4, [r8, -r6]
    2864:	00001942 	andeq	r1, r0, r2, asr #18
    2868:	11010b26 	tstne	r1, r6, lsr #22
    286c:	01061201 	tsteq	r6, r1, lsl #4
    2870:	27000013 	smladcs	r0, r3, r0, r0
    2874:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2878:	0b3a0e03 	bleq	e8608c <_Min_Stack_Size+0xe85e8c>
    287c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2880:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2884:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2888:	00130119 	andseq	r0, r3, r9, lsl r1
    288c:	002e2800 	eoreq	r2, lr, r0, lsl #16
    2890:	0b3a0e03 	bleq	e860a4 <_Min_Stack_Size+0xe85ea4>
    2894:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2898:	06120111 			; <UNDEFINED> instruction: 0x06120111
    289c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    28a0:	29000019 	stmdbcs	r0, {r0, r3, r4}
    28a4:	0e03012e 	adfeqsp	f0, f3, #0.5
    28a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    28ac:	01111927 	tsteq	r1, r7, lsr #18
    28b0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    28b4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    28b8:	2a000013 	bcs	290c <_Min_Stack_Size+0x270c>
    28bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    28c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    28c4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    28c8:	00001802 	andeq	r1, r0, r2, lsl #16
    28cc:	01110100 	tsteq	r1, r0, lsl #2
    28d0:	0b130e25 	bleq	4c616c <_Min_Stack_Size+0x4c5f6c>
    28d4:	17550e03 	ldrbne	r0, [r5, -r3, lsl #28]
    28d8:	17100111 			; <UNDEFINED> instruction: 0x17100111
    28dc:	24020000 	strcs	r0, [r2], #-0
    28e0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    28e4:	0008030b 	andeq	r0, r8, fp, lsl #6
    28e8:	00240300 	eoreq	r0, r4, r0, lsl #6
    28ec:	0b3e0b0b 	bleq	f85520 <_Min_Stack_Size+0xf85320>
    28f0:	00000e03 	andeq	r0, r0, r3, lsl #28
    28f4:	03001604 	movweq	r1, #1540	; 0x604
    28f8:	3b0b3a0e 	blcc	2d1138 <_Min_Stack_Size+0x2d0f38>
    28fc:	0013490b 	andseq	r4, r3, fp, lsl #18
    2900:	000f0500 	andeq	r0, pc, r0, lsl #10
    2904:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2908:	15060000 	strne	r0, [r6, #-0]
    290c:	01192701 	tsteq	r9, r1, lsl #14
    2910:	07000013 	smladeq	r0, r3, r0, r0
    2914:	13490005 	movtne	r0, #36869	; 0x9005
    2918:	0f080000 	svceq	0x00080000
    291c:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2920:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
    2924:	0b3a0e03 	bleq	e86138 <_Min_Stack_Size+0xe85f38>
    2928:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    292c:	13010b20 	movwne	r0, #6944	; 0x1b20
    2930:	340a0000 	strcc	r0, [sl], #-0
    2934:	3a0e0300 	bcc	38353c <_Min_Stack_Size+0x38333c>
    2938:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    293c:	0b000013 	bleq	2990 <_Min_Stack_Size+0x2790>
    2940:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2944:	0b3b0b3a 	bleq	ec5634 <_Min_Stack_Size+0xec5434>
    2948:	00001349 	andeq	r1, r0, r9, asr #6
    294c:	3f012e0c 	svccc	0x00012e0c
    2950:	3a0e0319 	bcc	3835bc <_Min_Stack_Size+0x3833bc>
    2954:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2958:	11134919 	tstne	r3, r9, lsl r9
    295c:	40061201 	andmi	r1, r6, r1, lsl #4
    2960:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2964:	00001301 	andeq	r1, r0, r1, lsl #6
    2968:	0300050d 	movweq	r0, #1293	; 0x50d
    296c:	3b0b3a0e 	blcc	2d11ac <_Min_Stack_Size+0x2d0fac>
    2970:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2974:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
    2978:	0e03012e 	adfeqsp	f0, f3, #0.5
    297c:	0b3b0b3a 	bleq	ec566c <_Min_Stack_Size+0xec546c>
    2980:	01111927 	tsteq	r1, r7, lsr #18
    2984:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2988:	01194297 			; <UNDEFINED> instruction: 0x01194297
    298c:	0f000013 	svceq	0x00000013
    2990:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2994:	0b3b0b3a 	bleq	ec5684 <_Min_Stack_Size+0xec5484>
    2998:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    299c:	1d100000 	ldcne	0, cr0, [r0, #-0]
    29a0:	11133101 	tstne	r3, r1, lsl #2
    29a4:	58061201 	stmdapl	r6, {r0, r9, ip}
    29a8:	000b590b 	andeq	r5, fp, fp, lsl #18
    29ac:	010b1100 	mrseq	r1, (UNDEF: 27)
    29b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    29b4:	34120000 	ldrcc	r0, [r2], #-0
    29b8:	02133100 	andseq	r3, r3, #0, 2
    29bc:	13000018 	movwne	r0, #24
    29c0:	13490035 	movtne	r0, #36917	; 0x9035
    29c4:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    29c8:	03193f00 	tsteq	r9, #0, 30
    29cc:	3b0b3a0e 	blcc	2d120c <_Min_Stack_Size+0x2d100c>
    29d0:	1119270b 	tstne	r9, fp, lsl #14
    29d4:	40061201 	andmi	r1, r6, r1, lsl #4
    29d8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    29dc:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    29e0:	3a0e0300 	bcc	3835e8 <_Min_Stack_Size+0x3833e8>
    29e4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    29e8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    29ec:	97184006 	ldrls	r4, [r8, -r6]
    29f0:	00001942 	andeq	r1, r0, r2, asr #18
    29f4:	3f002e16 	svccc	0x00002e16
    29f8:	3a0e0319 	bcc	383664 <_Min_Stack_Size+0x383464>
    29fc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2a00:	11134919 	tstne	r3, r9, lsl r9
    2a04:	40061201 	andmi	r1, r6, r1, lsl #4
    2a08:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2a0c:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    2a10:	03193f00 	tsteq	r9, #0, 30
    2a14:	3b0b3a0e 	blcc	2d1254 <_Min_Stack_Size+0x2d1054>
    2a18:	11192705 	tstne	r9, r5, lsl #14
    2a1c:	40061201 	andmi	r1, r6, r1, lsl #4
    2a20:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2a24:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
    2a28:	03193f01 	tsteq	r9, #1, 30
    2a2c:	3b0b3a0e 	blcc	2d126c <_Min_Stack_Size+0x2d106c>
    2a30:	11192705 	tstne	r9, r5, lsl #14
    2a34:	40061201 	andmi	r1, r6, r1, lsl #4
    2a38:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2a3c:	00001301 	andeq	r1, r0, r1, lsl #6
    2a40:	31011d19 	tstcc	r1, r9, lsl sp
    2a44:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2a48:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2a4c:	1a000005 	bne	2a68 <_Min_Stack_Size+0x2868>
    2a50:	13310005 	teqne	r1, #5
    2a54:	00001802 	andeq	r1, r0, r2, lsl #16
    2a58:	3f012e1b 	svccc	0x00012e1b
    2a5c:	3a0e0319 	bcc	3836c8 <_Min_Stack_Size+0x3834c8>
    2a60:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2a64:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2a68:	96184006 	ldrls	r4, [r8], -r6
    2a6c:	13011942 	movwne	r1, #6466	; 0x1942
    2a70:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
    2a74:	11133101 	tstne	r3, r1, lsl #2
    2a78:	58061201 	stmdapl	r6, {r0, r9, ip}
    2a7c:	0105590b 	tsteq	r5, fp, lsl #18
    2a80:	00000013 	andeq	r0, r0, r3, lsl r0
    2a84:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2a88:	030b130e 	movweq	r1, #45838	; 0xb30e
    2a8c:	1117550e 	tstne	r7, lr, lsl #10
    2a90:	00171001 	andseq	r1, r7, r1
    2a94:	00160200 	andseq	r0, r6, r0, lsl #4
    2a98:	0b3a0e03 	bleq	e862ac <_Min_Stack_Size+0xe860ac>
    2a9c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2aa0:	24030000 	strcs	r0, [r3], #-0
    2aa4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2aa8:	000e030b 	andeq	r0, lr, fp, lsl #6
    2aac:	00240400 	eoreq	r0, r4, r0, lsl #8
    2ab0:	0b3e0b0b 	bleq	f856e4 <_Min_Stack_Size+0xf854e4>
    2ab4:	00000803 	andeq	r0, r0, r3, lsl #16
    2ab8:	0b000f05 	bleq	66d4 <_Min_Stack_Size+0x64d4>
    2abc:	0600000b 	streq	r0, [r0], -fp
    2ac0:	0b0b000f 	bleq	2c2b04 <_Min_Stack_Size+0x2c2904>
    2ac4:	00001349 	andeq	r1, r0, r9, asr #6
    2ac8:	3f012e07 	svccc	0x00012e07
    2acc:	3a0e0319 	bcc	383738 <_Min_Stack_Size+0x383538>
    2ad0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2ad4:	11134919 	tstne	r3, r9, lsl r9
    2ad8:	40061201 	andmi	r1, r6, r1, lsl #4
    2adc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2ae0:	00001301 	andeq	r1, r0, r1, lsl #6
    2ae4:	03000508 	movweq	r0, #1288	; 0x508
    2ae8:	3b0b3a0e 	blcc	2d1328 <_Min_Stack_Size+0x2d1128>
    2aec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2af0:	09000018 	stmdbeq	r0, {r3, r4}
    2af4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2af8:	0b3b0b3a 	bleq	ec57e8 <_Min_Stack_Size+0xec55e8>
    2afc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2b00:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
    2b04:	03193f01 	tsteq	r9, #1, 30
    2b08:	3b0b3a0e 	blcc	2d1348 <_Min_Stack_Size+0x2d1148>
    2b0c:	1119270b 	tstne	r9, fp, lsl #14
    2b10:	40061201 	andmi	r1, r6, r1, lsl #4
    2b14:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2b18:	00001301 	andeq	r1, r0, r1, lsl #6
    2b1c:	0300050b 	movweq	r0, #1291	; 0x50b
    2b20:	3b0b3a08 	blcc	2d1348 <_Min_Stack_Size+0x2d1148>
    2b24:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2b28:	0c000018 	stceq	0, cr0, [r0], {24}
    2b2c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2b30:	0b3a0e03 	bleq	e86344 <_Min_Stack_Size+0xe86144>
    2b34:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2b38:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2b3c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2b40:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    2b44:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2b48:	0b3a0e03 	bleq	e8635c <_Min_Stack_Size+0xe8615c>
    2b4c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2b50:	01111349 	tsteq	r1, r9, asr #6
    2b54:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2b58:	00194297 	mulseq	r9, r7, r2
    2b5c:	01010e00 	tsteq	r1, r0, lsl #28
    2b60:	13011349 	movwne	r1, #4937	; 0x1349
    2b64:	210f0000 	mrscs	r0, CPSR
    2b68:	2f134900 	svccs	0x00134900
    2b6c:	00000005 	andeq	r0, r0, r5
    2b70:	10001101 	andne	r1, r0, r1, lsl #2
    2b74:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
    2b78:	1b080301 	blne	203784 <_Min_Stack_Size+0x203584>
    2b7c:	13082508 	movwne	r2, #34056	; 0x8508
    2b80:	00000005 	andeq	r0, r0, r5
    2b84:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2b88:	030b130e 	movweq	r1, #45838	; 0xb30e
    2b8c:	110e1b0e 	tstne	lr, lr, lsl #22
    2b90:	10061201 	andne	r1, r6, r1, lsl #4
    2b94:	02000017 	andeq	r0, r0, #23
    2b98:	0b0b0024 	bleq	2c2c30 <_Min_Stack_Size+0x2c2a30>
    2b9c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2ba0:	16030000 	strne	r0, [r3], -r0
    2ba4:	3a0e0300 	bcc	3837ac <_Min_Stack_Size+0x3835ac>
    2ba8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2bac:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2bb0:	0b0b0024 	bleq	2c2c48 <_Min_Stack_Size+0x2c2a48>
    2bb4:	0e030b3e 	vmoveq.16	d3[0], r0
    2bb8:	0f050000 	svceq	0x00050000
    2bbc:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2bc0:	000f0600 	andeq	r0, pc, r0, lsl #12
    2bc4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2bc8:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
    2bcc:	03193f01 	tsteq	r9, #1, 30
    2bd0:	3b0b3a0e 	blcc	2d1410 <_Min_Stack_Size+0x2d1210>
    2bd4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2bd8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2bdc:	97184006 	ldrls	r4, [r8, -r6]
    2be0:	13011942 	movwne	r1, #6466	; 0x1942
    2be4:	05080000 	streq	r0, [r8, #-0]
    2be8:	3a080300 	bcc	2037f0 <_Min_Stack_Size+0x2035f0>
    2bec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2bf0:	00180213 	andseq	r0, r8, r3, lsl r2
    2bf4:	00050900 	andeq	r0, r5, r0, lsl #18
    2bf8:	0b3a0803 	bleq	e84c0c <_Min_Stack_Size+0xe84a0c>
    2bfc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2c00:	00001702 	andeq	r1, r0, r2, lsl #14
    2c04:	0300340a 	movweq	r3, #1034	; 0x40a
    2c08:	3b0b3a08 	blcc	2d1430 <_Min_Stack_Size+0x2d1230>
    2c0c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2c10:	0b000017 	bleq	2c74 <_Min_Stack_Size+0x2a74>
    2c14:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2c18:	0b3b0b3a 	bleq	ec5908 <_Min_Stack_Size+0xec5708>
    2c1c:	17021349 	strne	r1, [r2, -r9, asr #6]
    2c20:	01000000 	mrseq	r0, (UNDEF: 0)
    2c24:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2c28:	0e030b13 	vmoveq.32	d3[0], r0
    2c2c:	01110e1b 	tsteq	r1, fp, lsl lr
    2c30:	17100612 			; <UNDEFINED> instruction: 0x17100612
    2c34:	24020000 	strcs	r0, [r2], #-0
    2c38:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2c3c:	000e030b 	andeq	r0, lr, fp, lsl #6
    2c40:	00240300 	eoreq	r0, r4, r0, lsl #6
    2c44:	0b3e0b0b 	bleq	f85878 <_Min_Stack_Size+0xf85678>
    2c48:	00000803 	andeq	r0, r0, r3, lsl #16
    2c4c:	03001604 	movweq	r1, #1540	; 0x604
    2c50:	3b0b3a0e 	blcc	2d1490 <_Min_Stack_Size+0x2d1290>
    2c54:	0013490b 	andseq	r4, r3, fp, lsl #18
    2c58:	00160500 	andseq	r0, r6, r0, lsl #10
    2c5c:	0b3a0e03 	bleq	e86470 <_Min_Stack_Size+0xe86270>
    2c60:	1349053b 	movtne	r0, #38203	; 0x953b
    2c64:	17060000 	strne	r0, [r6, -r0]
    2c68:	3a0b0b01 	bcc	2c5874 <_Min_Stack_Size+0x2c5674>
    2c6c:	010b3b0b 	tsteq	fp, fp, lsl #22
    2c70:	07000013 	smladeq	r0, r3, r0, r0
    2c74:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2c78:	0b3b0b3a 	bleq	ec5968 <_Min_Stack_Size+0xec5768>
    2c7c:	00001349 	andeq	r1, r0, r9, asr #6
    2c80:	49010108 	stmdbmi	r1, {r3, r8}
    2c84:	00130113 	andseq	r0, r3, r3, lsl r1
    2c88:	00210900 	eoreq	r0, r1, r0, lsl #18
    2c8c:	0b2f1349 	bleq	bc79b8 <_Min_Stack_Size+0xbc77b8>
    2c90:	130a0000 	movwne	r0, #40960	; 0xa000
    2c94:	3a0b0b01 	bcc	2c58a0 <_Min_Stack_Size+0x2c56a0>
    2c98:	010b3b0b 	tsteq	fp, fp, lsl #22
    2c9c:	0b000013 	bleq	2cf0 <_Min_Stack_Size+0x2af0>
    2ca0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2ca4:	0b3b0b3a 	bleq	ec5994 <_Min_Stack_Size+0xec5794>
    2ca8:	0b381349 	bleq	e079d4 <_Min_Stack_Size+0xe077d4>
    2cac:	0f0c0000 	svceq	0x000c0000
    2cb0:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2cb4:	000f0d00 	andeq	r0, pc, r0, lsl #26
    2cb8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2cbc:	130e0000 	movwne	r0, #57344	; 0xe000
    2cc0:	0b0e0301 	bleq	3838cc <_Min_Stack_Size+0x3836cc>
    2cc4:	3b0b3a0b 	blcc	2d14f8 <_Min_Stack_Size+0x2d12f8>
    2cc8:	0013010b 	andseq	r0, r3, fp, lsl #2
    2ccc:	000d0f00 	andeq	r0, sp, r0, lsl #30
    2cd0:	0b3a0803 	bleq	e84ce4 <_Min_Stack_Size+0xe84ae4>
    2cd4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2cd8:	00000b38 	andeq	r0, r0, r8, lsr fp
    2cdc:	03011310 	movweq	r1, #4880	; 0x1310
    2ce0:	3a0b0b0e 	bcc	2c5920 <_Min_Stack_Size+0x2c5720>
    2ce4:	01053b0b 	tsteq	r5, fp, lsl #22
    2ce8:	11000013 	tstne	r0, r3, lsl r0
    2cec:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2cf0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2cf4:	0b381349 	bleq	e07a20 <_Min_Stack_Size+0xe07820>
    2cf8:	0d120000 	ldceq	0, cr0, [r2, #-0]
    2cfc:	3a080300 	bcc	203904 <_Min_Stack_Size+0x203704>
    2d00:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2d04:	000b3813 	andeq	r3, fp, r3, lsl r8
    2d08:	01151300 	tsteq	r5, r0, lsl #6
    2d0c:	13491927 	movtne	r1, #39207	; 0x9927
    2d10:	00001301 	andeq	r1, r0, r1, lsl #6
    2d14:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    2d18:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    2d1c:	13490026 	movtne	r0, #36902	; 0x9026
    2d20:	15160000 	ldrne	r0, [r6, #-0]
    2d24:	01192701 	tsteq	r9, r1, lsl #14
    2d28:	17000013 	smladne	r0, r3, r0, r0
    2d2c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2d30:	0b3a0e03 	bleq	e86544 <_Min_Stack_Size+0xe86344>
    2d34:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2d38:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2d3c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2d40:	00130119 	andseq	r0, r3, r9, lsl r1
    2d44:	00051800 	andeq	r1, r5, r0, lsl #16
    2d48:	0b3a0e03 	bleq	e8655c <_Min_Stack_Size+0xe8635c>
    2d4c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2d50:	00001702 	andeq	r1, r0, r2, lsl #14
    2d54:	03003419 	movweq	r3, #1049	; 0x419
    2d58:	3b0b3a0e 	blcc	2d1598 <_Min_Stack_Size+0x2d1398>
    2d5c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2d60:	1a000017 	bne	2dc4 <_Min_Stack_Size+0x2bc4>
    2d64:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    2d68:	341b0000 	ldrcc	r0, [fp], #-0
    2d6c:	3a080300 	bcc	203974 <_Min_Stack_Size+0x203774>
    2d70:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2d74:	00170213 	andseq	r0, r7, r3, lsl r2
    2d78:	010b1c00 	tsteq	fp, r0, lsl #24
    2d7c:	13011755 	movwne	r1, #5973	; 0x1755
    2d80:	891d0000 	ldmdbhi	sp, {}	; <UNPREDICTABLE>
    2d84:	11010182 	smlabbne	r1, r2, r1, r0
    2d88:	00133101 	andseq	r3, r3, r1, lsl #2
    2d8c:	828a1e00 	addhi	r1, sl, #0, 28
    2d90:	18020001 	stmdane	r2, {r0}
    2d94:	00184291 	mulseq	r8, r1, r2
    2d98:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
    2d9c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2da0:	0b3b0b3a 	bleq	ec5a90 <_Min_Stack_Size+0xec5890>
    2da4:	13491927 	movtne	r1, #39207	; 0x9927
    2da8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2dac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2db0:	00130119 	andseq	r0, r3, r9, lsl r1
    2db4:	00342000 	eorseq	r2, r4, r0
    2db8:	0b3a0e03 	bleq	e865cc <_Min_Stack_Size+0xe863cc>
    2dbc:	1349053b 	movtne	r0, #38203	; 0x953b
    2dc0:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    2dc4:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
    2dc8:	3c193f00 	ldccc	15, cr3, [r9], {-0}
    2dcc:	030e6e19 	movweq	r6, #60953	; 0xee19
    2dd0:	3b0b3a0e 	blcc	2d1610 <_Min_Stack_Size+0x2d1410>
    2dd4:	0000000b 	andeq	r0, r0, fp
    2dd8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2ddc:	030b130e 	movweq	r1, #45838	; 0xb30e
    2de0:	110e1b0e 	tstne	lr, lr, lsl #22
    2de4:	10061201 	andne	r1, r6, r1, lsl #4
    2de8:	02000017 	andeq	r0, r0, #23
    2dec:	0b0b0024 	bleq	2c2e84 <_Min_Stack_Size+0x2c2c84>
    2df0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2df4:	16030000 	strne	r0, [r3], -r0
    2df8:	3a0e0300 	bcc	383a00 <_Min_Stack_Size+0x383800>
    2dfc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e00:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2e04:	0b0b0024 	bleq	2c2e9c <_Min_Stack_Size+0x2c2c9c>
    2e08:	0e030b3e 	vmoveq.16	d3[0], r0
    2e0c:	16050000 	strne	r0, [r5], -r0
    2e10:	3a0e0300 	bcc	383a18 <_Min_Stack_Size+0x383818>
    2e14:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e18:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2e1c:	0b0b0117 	bleq	2c3280 <_Min_Stack_Size+0x2c3080>
    2e20:	0b3b0b3a 	bleq	ec5b10 <_Min_Stack_Size+0xec5910>
    2e24:	00001301 	andeq	r1, r0, r1, lsl #6
    2e28:	03000d07 	movweq	r0, #3335	; 0xd07
    2e2c:	3b0b3a0e 	blcc	2d166c <_Min_Stack_Size+0x2d146c>
    2e30:	0013490b 	andseq	r4, r3, fp, lsl #18
    2e34:	01010800 	tsteq	r1, r0, lsl #16
    2e38:	13011349 	movwne	r1, #4937	; 0x1349
    2e3c:	21090000 	mrscs	r0, (UNDEF: 9)
    2e40:	2f134900 	svccs	0x00134900
    2e44:	0a00000b 	beq	2e78 <_Min_Stack_Size+0x2c78>
    2e48:	0b0b0113 	bleq	2c329c <_Min_Stack_Size+0x2c309c>
    2e4c:	0b3b0b3a 	bleq	ec5b3c <_Min_Stack_Size+0xec593c>
    2e50:	00001301 	andeq	r1, r0, r1, lsl #6
    2e54:	03000d0b 	movweq	r0, #3339	; 0xd0b
    2e58:	3b0b3a0e 	blcc	2d1698 <_Min_Stack_Size+0x2d1498>
    2e5c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2e60:	0c00000b 	stceq	0, cr0, [r0], {11}
    2e64:	0b0b000f 	bleq	2c2ea8 <_Min_Stack_Size+0x2c2ca8>
    2e68:	0f0d0000 	svceq	0x000d0000
    2e6c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2e70:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    2e74:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2e78:	0b3a0b0b 	bleq	e85aac <_Min_Stack_Size+0xe858ac>
    2e7c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2e80:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 2e88 <_Min_Stack_Size+0x2c88>
    2e84:	3a080300 	bcc	203a8c <_Min_Stack_Size+0x20388c>
    2e88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e8c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2e90:	01131000 	tsteq	r3, r0
    2e94:	0b0b0e03 	bleq	2c66a8 <_Min_Stack_Size+0x2c64a8>
    2e98:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2e9c:	00001301 	andeq	r1, r0, r1, lsl #6
    2ea0:	03000d11 	movweq	r0, #3345	; 0xd11
    2ea4:	3b0b3a0e 	blcc	2d16e4 <_Min_Stack_Size+0x2d14e4>
    2ea8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    2eac:	1200000b 	andne	r0, r0, #11
    2eb0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    2eb4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2eb8:	0b381349 	bleq	e07be4 <_Min_Stack_Size+0xe079e4>
    2ebc:	15130000 	ldrne	r0, [r3, #-0]
    2ec0:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    2ec4:	00130113 	andseq	r0, r3, r3, lsl r1
    2ec8:	00051400 	andeq	r1, r5, r0, lsl #8
    2ecc:	00001349 	andeq	r1, r0, r9, asr #6
    2ed0:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    2ed4:	16000013 			; <UNDEFINED> instruction: 0x16000013
    2ed8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    2edc:	00001301 	andeq	r1, r0, r1, lsl #6
    2ee0:	03000d17 	movweq	r0, #3351	; 0xd17
    2ee4:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
    2ee8:	0019340b 	andseq	r3, r9, fp, lsl #8
    2eec:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
    2ef0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2ef4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2ef8:	13491927 	movtne	r1, #39207	; 0x9927
    2efc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2f00:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2f04:	00130119 	andseq	r0, r3, r9, lsl r1
    2f08:	00051900 	andeq	r1, r5, r0, lsl #18
    2f0c:	0b3a0803 	bleq	e84f20 <_Min_Stack_Size+0xe84d20>
    2f10:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2f14:	00001702 	andeq	r1, r0, r2, lsl #14
    2f18:	0300051a 	movweq	r0, #1306	; 0x51a
    2f1c:	3b0b3a0e 	blcc	2d175c <_Min_Stack_Size+0x2d155c>
    2f20:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2f24:	1b000017 	blne	2f88 <_Min_Stack_Size+0x2d88>
    2f28:	08030005 	stmdaeq	r3, {r0, r2}
    2f2c:	0b3b0b3a 	bleq	ec5c1c <_Min_Stack_Size+0xec5a1c>
    2f30:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2f34:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    2f38:	1d000000 	stcne	0, cr0, [r0, #-0]
    2f3c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2f40:	0b3b0b3a 	bleq	ec5c30 <_Min_Stack_Size+0xec5a30>
    2f44:	17021349 	strne	r1, [r2, -r9, asr #6]
    2f48:	341e0000 	ldrcc	r0, [lr], #-0
    2f4c:	3a080300 	bcc	203b54 <_Min_Stack_Size+0x203954>
    2f50:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2f54:	00180213 	andseq	r0, r8, r3, lsl r2
    2f58:	82891f00 	addhi	r1, r9, #0, 30
    2f5c:	01110101 	tsteq	r1, r1, lsl #2
    2f60:	13011331 	movwne	r1, #4913	; 0x1331
    2f64:	8a200000 	bhi	802f6c <_Min_Stack_Size+0x802d6c>
    2f68:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    2f6c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    2f70:	89210000 	stmdbhi	r1!, {}	; <UNPREDICTABLE>
    2f74:	11010182 	smlabbne	r1, r2, r1, r0
    2f78:	00133101 	andseq	r3, r3, r1, lsl #2
    2f7c:	00372200 	eorseq	r2, r7, r0, lsl #4
    2f80:	00001349 	andeq	r1, r0, r9, asr #6
    2f84:	3f012e23 	svccc	0x00012e23
    2f88:	3a0e0319 	bcc	383bf4 <_Min_Stack_Size+0x3839f4>
    2f8c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2f90:	11134919 	tstne	r3, r9, lsl r9
    2f94:	40061201 	andmi	r1, r6, r1, lsl #4
    2f98:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2f9c:	00001301 	andeq	r1, r0, r1, lsl #6
    2fa0:	03003424 	movweq	r3, #1060	; 0x424
    2fa4:	3b0b3a0e 	blcc	2d17e4 <_Min_Stack_Size+0x2d15e4>
    2fa8:	3f134905 	svccc	0x00134905
    2fac:	00193c19 	andseq	r3, r9, r9, lsl ip
    2fb0:	002e2500 	eoreq	r2, lr, r0, lsl #10
    2fb4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    2fb8:	0e030e6e 	cdpeq	14, 0, cr0, cr3, cr14, {3}
    2fbc:	0b3b0b3a 	bleq	ec5cac <_Min_Stack_Size+0xec5aac>
    2fc0:	01000000 	mrseq	r0, (UNDEF: 0)
    2fc4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2fc8:	0e030b13 	vmoveq.32	d3[0], r0
    2fcc:	01110e1b 	tsteq	r1, fp, lsl lr
    2fd0:	17100612 			; <UNDEFINED> instruction: 0x17100612
    2fd4:	24020000 	strcs	r0, [r2], #-0
    2fd8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2fdc:	0008030b 	andeq	r0, r8, fp, lsl #6
    2fe0:	00240300 	eoreq	r0, r4, r0, lsl #6
    2fe4:	0b3e0b0b 	bleq	f85c18 <_Min_Stack_Size+0xf85a18>
    2fe8:	00000e03 	andeq	r0, r0, r3, lsl #28
    2fec:	0b000f04 	bleq	6c04 <_Min_Stack_Size+0x6a04>
    2ff0:	0013490b 	andseq	r4, r3, fp, lsl #18
    2ff4:	00260500 	eoreq	r0, r6, r0, lsl #10
    2ff8:	00001349 	andeq	r1, r0, r9, asr #6
    2ffc:	3f012e06 	svccc	0x00012e06
    3000:	3a0e0319 	bcc	383c6c <_Min_Stack_Size+0x383a6c>
    3004:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3008:	11134919 	tstne	r3, r9, lsl r9
    300c:	40061201 	andmi	r1, r6, r1, lsl #4
    3010:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3014:	00001301 	andeq	r1, r0, r1, lsl #6
    3018:	03000507 	movweq	r0, #1287	; 0x507
    301c:	3b0b3a08 	blcc	2d1844 <_Min_Stack_Size+0x2d1644>
    3020:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3024:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    3028:	08030034 	stmdaeq	r3, {r2, r4, r5}
    302c:	0b3b0b3a 	bleq	ec5d1c <_Min_Stack_Size+0xec5b1c>
    3030:	17021349 	strne	r1, [r2, -r9, asr #6]
    3034:	34090000 	strcc	r0, [r9], #-0
    3038:	3a0e0300 	bcc	383c40 <_Min_Stack_Size+0x383a40>
    303c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3040:	00170213 	andseq	r0, r7, r3, lsl r2
    3044:	11010000 	mrsne	r0, (UNDEF: 1)
    3048:	130e2501 	movwne	r2, #58625	; 0xe501
    304c:	1b0e030b 	blne	383c80 <_Min_Stack_Size+0x383a80>
    3050:	1117550e 	tstne	r7, lr, lsl #10
    3054:	00171001 	andseq	r1, r7, r1
    3058:	00240200 	eoreq	r0, r4, r0, lsl #4
    305c:	0b3e0b0b 	bleq	f85c90 <_Min_Stack_Size+0xf85a90>
    3060:	00000803 	andeq	r0, r0, r3, lsl #16
    3064:	0b002403 	bleq	c078 <_Min_Stack_Size+0xbe78>
    3068:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    306c:	0400000e 	streq	r0, [r0], #-14
    3070:	0b0b000f 	bleq	2c30b4 <_Min_Stack_Size+0x2c2eb4>
    3074:	00001349 	andeq	r1, r0, r9, asr #6
    3078:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    307c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3080:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3084:	0b3a0e03 	bleq	e86898 <_Min_Stack_Size+0xe86698>
    3088:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    308c:	01111349 	tsteq	r1, r9, asr #6
    3090:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3094:	00194297 	mulseq	r9, r7, r2
    3098:	00050700 	andeq	r0, r5, r0, lsl #14
    309c:	0b3a0803 	bleq	e850b0 <_Min_Stack_Size+0xe84eb0>
    30a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    30a4:	00001702 	andeq	r1, r0, r2, lsl #14
    30a8:	03000508 	movweq	r0, #1288	; 0x508
    30ac:	3b0b3a08 	blcc	2d18d4 <_Min_Stack_Size+0x2d16d4>
    30b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    30b4:	00000018 	andeq	r0, r0, r8, lsl r0
    30b8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    30bc:	030b130e 	movweq	r1, #45838	; 0xb30e
    30c0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    30c4:	10011117 	andne	r1, r1, r7, lsl r1
    30c8:	02000017 	andeq	r0, r0, #23
    30cc:	0b0b0024 	bleq	2c3164 <_Min_Stack_Size+0x2c2f64>
    30d0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    30d4:	16030000 	strne	r0, [r3], -r0
    30d8:	3a0e0300 	bcc	383ce0 <_Min_Stack_Size+0x383ae0>
    30dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    30e0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    30e4:	0b0b0024 	bleq	2c317c <_Min_Stack_Size+0x2c2f7c>
    30e8:	0e030b3e 	vmoveq.16	d3[0], r0
    30ec:	0f050000 	svceq	0x00050000
    30f0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    30f4:	06000013 			; <UNDEFINED> instruction: 0x06000013
    30f8:	13490026 	movtne	r0, #36902	; 0x9026
    30fc:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
    3100:	03193f01 	tsteq	r9, #1, 30
    3104:	3b0b3a0e 	blcc	2d1944 <_Min_Stack_Size+0x2d1744>
    3108:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    310c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3110:	97184006 	ldrls	r4, [r8, -r6]
    3114:	00001942 	andeq	r1, r0, r2, asr #18
    3118:	03000508 	movweq	r0, #1288	; 0x508
    311c:	3b0b3a08 	blcc	2d1944 <_Min_Stack_Size+0x2d1744>
    3120:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3124:	00000017 	andeq	r0, r0, r7, lsl r0
    3128:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    312c:	030b130e 	movweq	r1, #45838	; 0xb30e
    3130:	110e1b0e 	tstne	lr, lr, lsl #22
    3134:	10061201 	andne	r1, r6, r1, lsl #4
    3138:	02000017 	andeq	r0, r0, #23
    313c:	0b0b0024 	bleq	2c31d4 <_Min_Stack_Size+0x2c2fd4>
    3140:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3144:	16030000 	strne	r0, [r3], -r0
    3148:	3a0e0300 	bcc	383d50 <_Min_Stack_Size+0x383b50>
    314c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3150:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    3154:	0b0b0024 	bleq	2c31ec <_Min_Stack_Size+0x2c2fec>
    3158:	0e030b3e 	vmoveq.16	d3[0], r0
    315c:	0f050000 	svceq	0x00050000
    3160:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3164:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3168:	13490026 	movtne	r0, #36902	; 0x9026
    316c:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
    3170:	03193f01 	tsteq	r9, #1, 30
    3174:	3b0b3a0e 	blcc	2d19b4 <_Min_Stack_Size+0x2d17b4>
    3178:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    317c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3180:	97184006 	ldrls	r4, [r8, -r6]
    3184:	13011942 	movwne	r1, #6466	; 0x1942
    3188:	05080000 	streq	r0, [r8, #-0]
    318c:	3a080300 	bcc	203d94 <_Min_Stack_Size+0x203b94>
    3190:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3194:	00170213 	andseq	r0, r7, r3, lsl r2
    3198:	00340900 	eorseq	r0, r4, r0, lsl #18
    319c:	0b3a0803 	bleq	e851b0 <_Min_Stack_Size+0xe84fb0>
    31a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    31a4:	00001702 	andeq	r1, r0, r2, lsl #14
    31a8:	01110100 	tsteq	r1, r0, lsl #2
    31ac:	0b130e25 	bleq	4c6a48 <_Min_Stack_Size+0x4c6848>
    31b0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    31b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    31b8:	00001710 	andeq	r1, r0, r0, lsl r7
    31bc:	0b002402 	bleq	c1cc <_Min_Stack_Size+0xbfcc>
    31c0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    31c4:	03000008 	movweq	r0, #8
    31c8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    31cc:	0b3b0b3a 	bleq	ec5ebc <_Min_Stack_Size+0xec5cbc>
    31d0:	00001349 	andeq	r1, r0, r9, asr #6
    31d4:	0b002404 	bleq	c1ec <_Min_Stack_Size+0xbfec>
    31d8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    31dc:	0500000e 	streq	r0, [r0, #-14]
    31e0:	0b0b000f 	bleq	2c3224 <_Min_Stack_Size+0x2c3024>
    31e4:	00001349 	andeq	r1, r0, r9, asr #6
    31e8:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
    31ec:	07000013 	smladeq	r0, r3, r0, r0
    31f0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    31f4:	0b3a0e03 	bleq	e86a08 <_Min_Stack_Size+0xe86808>
    31f8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    31fc:	01111349 	tsteq	r1, r9, asr #6
    3200:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3204:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3208:	08000013 	stmdaeq	r0, {r0, r1, r4}
    320c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3210:	0b3b0b3a 	bleq	ec5f00 <_Min_Stack_Size+0xec5d00>
    3214:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    3218:	05090000 	streq	r0, [r9, #-0]
    321c:	3a0e0300 	bcc	383e24 <_Min_Stack_Size+0x383c24>
    3220:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3224:	00170213 	andseq	r0, r7, r3, lsl r2
    3228:	00340a00 	eorseq	r0, r4, r0, lsl #20
    322c:	0b3a0803 	bleq	e85240 <_Min_Stack_Size+0xe85040>
    3230:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3234:	00001702 	andeq	r1, r0, r2, lsl #14
    3238:	0300340b 	movweq	r3, #1035	; 0x40b
    323c:	3b0b3a0e 	blcc	2d1a7c <_Min_Stack_Size+0x2d187c>
    3240:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3244:	0c000017 	stceq	0, cr0, [r0], {23}
    3248:	13490037 	movtne	r0, #36919	; 0x9037
    324c:	01000000 	mrseq	r0, (UNDEF: 0)
    3250:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    3254:	0e030b13 	vmoveq.32	d3[0], r0
    3258:	17100e1b 			; <UNDEFINED> instruction: 0x17100e1b
    325c:	24020000 	strcs	r0, [r2], #-0
    3260:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3264:	0008030b 	andeq	r0, r8, fp, lsl #6
    3268:	00240300 	eoreq	r0, r4, r0, lsl #6
    326c:	0b3e0b0b 	bleq	f85ea0 <_Min_Stack_Size+0xf85ca0>
    3270:	00000e03 	andeq	r0, r0, r3, lsl #28
    3274:	03001604 	movweq	r1, #1540	; 0x604
    3278:	3b0b3a0e 	blcc	2d1ab8 <_Min_Stack_Size+0x2d18b8>
    327c:	0013490b 	andseq	r4, r3, fp, lsl #18
    3280:	00160500 	andseq	r0, r6, r0, lsl #10
    3284:	0b3a0e03 	bleq	e86a98 <_Min_Stack_Size+0xe86898>
    3288:	1349053b 	movtne	r0, #38203	; 0x953b
    328c:	17060000 	strne	r0, [r6, -r0]
    3290:	3a0b0b01 	bcc	2c5e9c <_Min_Stack_Size+0x2c5c9c>
    3294:	010b3b0b 	tsteq	fp, fp, lsl #22
    3298:	07000013 	smladeq	r0, r3, r0, r0
    329c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    32a0:	0b3b0b3a 	bleq	ec5f90 <_Min_Stack_Size+0xec5d90>
    32a4:	00001349 	andeq	r1, r0, r9, asr #6
    32a8:	49010108 	stmdbmi	r1, {r3, r8}
    32ac:	00130113 	andseq	r0, r3, r3, lsl r1
    32b0:	00210900 	eoreq	r0, r1, r0, lsl #18
    32b4:	0b2f1349 	bleq	bc7fe0 <_Min_Stack_Size+0xbc7de0>
    32b8:	130a0000 	movwne	r0, #40960	; 0xa000
    32bc:	3a0b0b01 	bcc	2c5ec8 <_Min_Stack_Size+0x2c5cc8>
    32c0:	010b3b0b 	tsteq	fp, fp, lsl #22
    32c4:	0b000013 	bleq	3318 <_Min_Stack_Size+0x3118>
    32c8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    32cc:	0b3b0b3a 	bleq	ec5fbc <_Min_Stack_Size+0xec5dbc>
    32d0:	0b381349 	bleq	e07ffc <_Min_Stack_Size+0xe07dfc>
    32d4:	0f0c0000 	svceq	0x000c0000
    32d8:	000b0b00 	andeq	r0, fp, r0, lsl #22
    32dc:	000f0d00 	andeq	r0, pc, r0, lsl #26
    32e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    32e4:	130e0000 	movwne	r0, #57344	; 0xe000
    32e8:	0b0e0301 	bleq	383ef4 <_Min_Stack_Size+0x383cf4>
    32ec:	3b0b3a0b 	blcc	2d1b20 <_Min_Stack_Size+0x2d1920>
    32f0:	0013010b 	andseq	r0, r3, fp, lsl #2
    32f4:	000d0f00 	andeq	r0, sp, r0, lsl #30
    32f8:	0b3a0803 	bleq	e8530c <_Min_Stack_Size+0xe8510c>
    32fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3300:	00000b38 	andeq	r0, r0, r8, lsr fp
    3304:	03011310 	movweq	r1, #4880	; 0x1310
    3308:	3a0b0b0e 	bcc	2c5f48 <_Min_Stack_Size+0x2c5d48>
    330c:	01053b0b 	tsteq	r5, fp, lsl #22
    3310:	11000013 	tstne	r0, r3, lsl r0
    3314:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3318:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    331c:	0b381349 	bleq	e08048 <_Min_Stack_Size+0xe07e48>
    3320:	0d120000 	ldceq	0, cr0, [r2, #-0]
    3324:	3a080300 	bcc	203f2c <_Min_Stack_Size+0x203d2c>
    3328:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    332c:	000b3813 	andeq	r3, fp, r3, lsl r8
    3330:	01151300 	tsteq	r5, r0, lsl #6
    3334:	13491927 	movtne	r1, #39207	; 0x9927
    3338:	00001301 	andeq	r1, r0, r1, lsl #6
    333c:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    3340:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    3344:	13490026 	movtne	r0, #36902	; 0x9026
    3348:	15160000 	ldrne	r0, [r6, #-0]
    334c:	01192701 	tsteq	r9, r1, lsl #14
    3350:	17000013 	smladne	r0, r3, r0, r0
    3354:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3358:	0b3b0b3a 	bleq	ec6048 <_Min_Stack_Size+0xec5e48>
    335c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    3360:	34180000 	ldrcc	r0, [r8], #-0
    3364:	3a0e0300 	bcc	383f6c <_Min_Stack_Size+0x383d6c>
    3368:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    336c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    3370:	19000019 	stmdbne	r0, {r0, r3, r4}
    3374:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3378:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    337c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    3380:	00001802 	andeq	r1, r0, r2, lsl #16
    3384:	01110100 	tsteq	r1, r0, lsl #2
    3388:	0b130e25 	bleq	4c6c24 <_Min_Stack_Size+0x4c6a24>
    338c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    3390:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3394:	00001710 	andeq	r1, r0, r0, lsl r7
    3398:	0b002402 	bleq	c3a8 <_Min_Stack_Size+0xc1a8>
    339c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    33a0:	03000008 	movweq	r0, #8
    33a4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    33a8:	0b3b0b3a 	bleq	ec6098 <_Min_Stack_Size+0xec5e98>
    33ac:	00001349 	andeq	r1, r0, r9, asr #6
    33b0:	0b002404 	bleq	c3c8 <_Min_Stack_Size+0xc1c8>
    33b4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    33b8:	0500000e 	streq	r0, [r0, #-14]
    33bc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    33c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    33c4:	00001349 	andeq	r1, r0, r9, asr #6
    33c8:	0b011706 	bleq	48fe8 <_Min_Stack_Size+0x48de8>
    33cc:	3b0b3a0b 	blcc	2d1c00 <_Min_Stack_Size+0x2d1a00>
    33d0:	0013010b 	andseq	r0, r3, fp, lsl #2
    33d4:	000d0700 	andeq	r0, sp, r0, lsl #14
    33d8:	0b3a0e03 	bleq	e86bec <_Min_Stack_Size+0xe869ec>
    33dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    33e0:	01080000 	mrseq	r0, (UNDEF: 8)
    33e4:	01134901 	tsteq	r3, r1, lsl #18
    33e8:	09000013 	stmdbeq	r0, {r0, r1, r4}
    33ec:	13490021 	movtne	r0, #36897	; 0x9021
    33f0:	00000b2f 	andeq	r0, r0, pc, lsr #22
    33f4:	0b01130a 	bleq	48024 <_Min_Stack_Size+0x47e24>
    33f8:	3b0b3a0b 	blcc	2d1c2c <_Min_Stack_Size+0x2d1a2c>
    33fc:	0013010b 	andseq	r0, r3, fp, lsl #2
    3400:	000d0b00 	andeq	r0, sp, r0, lsl #22
    3404:	0b3a0e03 	bleq	e86c18 <_Min_Stack_Size+0xe86a18>
    3408:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    340c:	00000b38 	andeq	r0, r0, r8, lsr fp
    3410:	0b000f0c 	bleq	7048 <_Min_Stack_Size+0x6e48>
    3414:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    3418:	0b0b000f 	bleq	2c345c <_Min_Stack_Size+0x2c325c>
    341c:	00001349 	andeq	r1, r0, r9, asr #6
    3420:	0301130e 	movweq	r1, #4878	; 0x130e
    3424:	3a0b0b0e 	bcc	2c6064 <_Min_Stack_Size+0x2c5e64>
    3428:	010b3b0b 	tsteq	fp, fp, lsl #22
    342c:	0f000013 	svceq	0x00000013
    3430:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    3434:	0b3b0b3a 	bleq	ec6124 <_Min_Stack_Size+0xec5f24>
    3438:	0b381349 	bleq	e08164 <_Min_Stack_Size+0xe07f64>
    343c:	13100000 	tstne	r0, #0
    3440:	0b0e0301 	bleq	38404c <_Min_Stack_Size+0x383e4c>
    3444:	3b0b3a0b 	blcc	2d1c78 <_Min_Stack_Size+0x2d1a78>
    3448:	00130105 	andseq	r0, r3, r5, lsl #2
    344c:	000d1100 	andeq	r1, sp, r0, lsl #2
    3450:	0b3a0e03 	bleq	e86c64 <_Min_Stack_Size+0xe86a64>
    3454:	1349053b 	movtne	r0, #38203	; 0x953b
    3458:	00000b38 	andeq	r0, r0, r8, lsr fp
    345c:	03000d12 	movweq	r0, #3346	; 0xd12
    3460:	3b0b3a08 	blcc	2d1c88 <_Min_Stack_Size+0x2d1a88>
    3464:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    3468:	1300000b 	movwne	r0, #11
    346c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    3470:	13011349 	movwne	r1, #4937	; 0x1349
    3474:	05140000 	ldreq	r0, [r4, #-0]
    3478:	00134900 	andseq	r4, r3, r0, lsl #18
    347c:	00261500 	eoreq	r1, r6, r0, lsl #10
    3480:	00001349 	andeq	r1, r0, r9, asr #6
    3484:	27011516 	smladcs	r1, r6, r5, r1
    3488:	00130119 	andseq	r0, r3, r9, lsl r1
    348c:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
    3490:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3494:	0b3b0b3a 	bleq	ec6184 <_Min_Stack_Size+0xec5f84>
    3498:	13491927 	movtne	r1, #39207	; 0x9927
    349c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    34a0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    34a4:	00130119 	andseq	r0, r3, r9, lsl r1
    34a8:	00051800 	andeq	r1, r5, r0, lsl #16
    34ac:	0b3a0e03 	bleq	e86cc0 <_Min_Stack_Size+0xe86ac0>
    34b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    34b4:	00001702 	andeq	r1, r0, r2, lsl #14
    34b8:	01828919 	orreq	r8, r2, r9, lsl r9
    34bc:	95011101 	strls	r1, [r1, #-257]	; 0xfffffeff
    34c0:	13311942 	teqne	r1, #1081344	; 0x108000
    34c4:	8a1a0000 	bhi	6834cc <_Min_Stack_Size+0x6832cc>
    34c8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    34cc:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    34d0:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    34d4:	03193f01 	tsteq	r9, #1, 30
    34d8:	3b0b3a0e 	blcc	2d1d18 <_Min_Stack_Size+0x2d1b18>
    34dc:	1119270b 	tstne	r9, fp, lsl #14
    34e0:	40061201 	andmi	r1, r6, r1, lsl #4
    34e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    34e8:	00001301 	andeq	r1, r0, r1, lsl #6
    34ec:	0300341c 	movweq	r3, #1052	; 0x41c
    34f0:	3b0b3a0e 	blcc	2d1d30 <_Min_Stack_Size+0x2d1b30>
    34f4:	3f134905 	svccc	0x00134905
    34f8:	00193c19 	andseq	r3, r9, r9, lsl ip
    34fc:	002e1d00 	eoreq	r1, lr, r0, lsl #26
    3500:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    3504:	0e030e6e 	cdpeq	14, 0, cr0, cr3, cr14, {3}
    3508:	0b3b0b3a 	bleq	ec61f8 <_Min_Stack_Size+0xec5ff8>
    350c:	01000000 	mrseq	r0, (UNDEF: 0)
    3510:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    3514:	0e030b13 	vmoveq.32	d3[0], r0
    3518:	01110e1b 	tsteq	r1, fp, lsl lr
    351c:	17100612 			; <UNDEFINED> instruction: 0x17100612
    3520:	24020000 	strcs	r0, [r2], #-0
    3524:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3528:	000e030b 	andeq	r0, lr, fp, lsl #6
    352c:	00240300 	eoreq	r0, r4, r0, lsl #6
    3530:	0b3e0b0b 	bleq	f86164 <_Min_Stack_Size+0xf85f64>
    3534:	00000803 	andeq	r0, r0, r3, lsl #16
    3538:	03001604 	movweq	r1, #1540	; 0x604
    353c:	3b0b3a0e 	blcc	2d1d7c <_Min_Stack_Size+0x2d1b7c>
    3540:	0013490b 	andseq	r4, r3, fp, lsl #18
    3544:	000f0500 	andeq	r0, pc, r0, lsl #10
    3548:	00000b0b 	andeq	r0, r0, fp, lsl #22
    354c:	03001606 	movweq	r1, #1542	; 0x606
    3550:	3b0b3a0e 	blcc	2d1d90 <_Min_Stack_Size+0x2d1b90>
    3554:	00134905 	andseq	r4, r3, r5, lsl #18
    3558:	01170700 	tsteq	r7, r0, lsl #14
    355c:	0b3a0b0b 	bleq	e86190 <_Min_Stack_Size+0xe85f90>
    3560:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    3564:	0d080000 	stceq	0, cr0, [r8, #-0]
    3568:	3a0e0300 	bcc	384170 <_Min_Stack_Size+0x383f70>
    356c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3570:	09000013 	stmdbeq	r0, {r0, r1, r4}
    3574:	13490101 	movtne	r0, #37121	; 0x9101
    3578:	00001301 	andeq	r1, r0, r1, lsl #6
    357c:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
    3580:	000b2f13 	andeq	r2, fp, r3, lsl pc
    3584:	01130b00 	tsteq	r3, r0, lsl #22
    3588:	0b3a0b0b 	bleq	e861bc <_Min_Stack_Size+0xe85fbc>
    358c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    3590:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    3594:	3a0e0300 	bcc	38419c <_Min_Stack_Size+0x383f9c>
    3598:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    359c:	000b3813 	andeq	r3, fp, r3, lsl r8
    35a0:	01130d00 	tsteq	r3, r0, lsl #26
    35a4:	0b0b0e03 	bleq	2c6db8 <_Min_Stack_Size+0x2c6bb8>
    35a8:	0b3b0b3a 	bleq	ec6298 <_Min_Stack_Size+0xec6098>
    35ac:	00001301 	andeq	r1, r0, r1, lsl #6
    35b0:	03000d0e 	movweq	r0, #3342	; 0xd0e
    35b4:	3b0b3a08 	blcc	2d1ddc <_Min_Stack_Size+0x2d1bdc>
    35b8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    35bc:	0f00000b 	svceq	0x0000000b
    35c0:	0b0b000f 	bleq	2c3604 <_Min_Stack_Size+0x2c3404>
    35c4:	00001349 	andeq	r1, r0, r9, asr #6
    35c8:	03011310 	movweq	r1, #4880	; 0x1310
    35cc:	3a0b0b0e 	bcc	2c620c <_Min_Stack_Size+0x2c600c>
    35d0:	01053b0b 	tsteq	r5, fp, lsl #22
    35d4:	11000013 	tstne	r0, r3, lsl r0
    35d8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    35dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    35e0:	0b381349 	bleq	e0830c <_Min_Stack_Size+0xe0810c>
    35e4:	0d120000 	ldceq	0, cr0, [r2, #-0]
    35e8:	3a080300 	bcc	2041f0 <_Min_Stack_Size+0x203ff0>
    35ec:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    35f0:	000b3813 	andeq	r3, fp, r3, lsl r8
    35f4:	01151300 	tsteq	r5, r0, lsl #6
    35f8:	13491927 	movtne	r1, #39207	; 0x9927
    35fc:	00001301 	andeq	r1, r0, r1, lsl #6
    3600:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    3604:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    3608:	13490026 	movtne	r0, #36902	; 0x9026
    360c:	15160000 	ldrne	r0, [r6, #-0]
    3610:	01192701 	tsteq	r9, r1, lsl #14
    3614:	17000013 	smladne	r0, r3, r0, r0
    3618:	0e03012e 	adfeqsp	f0, f3, #0.5
    361c:	0b3b0b3a 	bleq	ec630c <_Min_Stack_Size+0xec610c>
    3620:	13491927 	movtne	r1, #39207	; 0x9927
    3624:	13010b20 	movwne	r0, #6944	; 0x1b20
    3628:	05180000 	ldreq	r0, [r8, #-0]
    362c:	3a080300 	bcc	204234 <_Min_Stack_Size+0x204034>
    3630:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3634:	19000013 	stmdbne	r0, {r0, r1, r4}
    3638:	08030034 	stmdaeq	r3, {r2, r4, r5}
    363c:	0b3b0b3a 	bleq	ec632c <_Min_Stack_Size+0xec612c>
    3640:	00001349 	andeq	r1, r0, r9, asr #6
    3644:	3f012e1a 	svccc	0x00012e1a
    3648:	3a0e0319 	bcc	3842b4 <_Min_Stack_Size+0x3840b4>
    364c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3650:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3654:	97184006 	ldrls	r4, [r8, -r6]
    3658:	13011942 	movwne	r1, #6466	; 0x1942
    365c:	051b0000 	ldreq	r0, [fp, #-0]
    3660:	3a0e0300 	bcc	384268 <_Min_Stack_Size+0x384068>
    3664:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3668:	00170213 	andseq	r0, r7, r3, lsl r2
    366c:	00341c00 	eorseq	r1, r4, r0, lsl #24
    3670:	0b3a0e03 	bleq	e86e84 <_Min_Stack_Size+0xe86c84>
    3674:	1349053b 	movtne	r0, #38203	; 0x953b
    3678:	00001802 	andeq	r1, r0, r2, lsl #16
    367c:	0300341d 	movweq	r3, #1053	; 0x41d
    3680:	3b0b3a08 	blcc	2d1ea8 <_Min_Stack_Size+0x2d1ca8>
    3684:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3688:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
    368c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3690:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3694:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    3698:	051f0000 	ldreq	r0, [pc, #-0]	; 36a0 <_Min_Stack_Size+0x34a0>
    369c:	02133100 	andseq	r3, r3, #0, 2
    36a0:	20000017 	andcs	r0, r0, r7, lsl r0
    36a4:	0111010b 	tsteq	r1, fp, lsl #2
    36a8:	00000612 	andeq	r0, r0, r2, lsl r6
    36ac:	31003421 	tstcc	r0, r1, lsr #8
    36b0:	00170213 	andseq	r0, r7, r3, lsl r2
    36b4:	00342200 	eorseq	r2, r4, r0, lsl #4
    36b8:	0b3a0e03 	bleq	e86ecc <_Min_Stack_Size+0xe86ccc>
    36bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    36c0:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    36c4:	01000000 	mrseq	r0, (UNDEF: 0)
    36c8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    36cc:	0e030b13 	vmoveq.32	d3[0], r0
    36d0:	01110e1b 	tsteq	r1, fp, lsl lr
    36d4:	17100612 			; <UNDEFINED> instruction: 0x17100612
    36d8:	24020000 	strcs	r0, [r2], #-0
    36dc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    36e0:	000e030b 	andeq	r0, lr, fp, lsl #6
    36e4:	00240300 	eoreq	r0, r4, r0, lsl #6
    36e8:	0b3e0b0b 	bleq	f8631c <_Min_Stack_Size+0xf8611c>
    36ec:	00000803 	andeq	r0, r0, r3, lsl #16
    36f0:	03001604 	movweq	r1, #1540	; 0x604
    36f4:	3b0b3a0e 	blcc	2d1f34 <_Min_Stack_Size+0x2d1d34>
    36f8:	0013490b 	andseq	r4, r3, fp, lsl #18
    36fc:	000f0500 	andeq	r0, pc, r0, lsl #10
    3700:	00000b0b 	andeq	r0, r0, fp, lsl #22
    3704:	03001606 	movweq	r1, #1542	; 0x606
    3708:	3b0b3a0e 	blcc	2d1f48 <_Min_Stack_Size+0x2d1d48>
    370c:	00134905 	andseq	r4, r3, r5, lsl #18
    3710:	01170700 	tsteq	r7, r0, lsl #14
    3714:	0b3a0b0b 	bleq	e86348 <_Min_Stack_Size+0xe86148>
    3718:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    371c:	0d080000 	stceq	0, cr0, [r8, #-0]
    3720:	3a0e0300 	bcc	384328 <_Min_Stack_Size+0x384128>
    3724:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3728:	09000013 	stmdbeq	r0, {r0, r1, r4}
    372c:	13490101 	movtne	r0, #37121	; 0x9101
    3730:	00001301 	andeq	r1, r0, r1, lsl #6
    3734:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
    3738:	000b2f13 	andeq	r2, fp, r3, lsl pc
    373c:	01130b00 	tsteq	r3, r0, lsl #22
    3740:	0b3a0b0b 	bleq	e86374 <_Min_Stack_Size+0xe86174>
    3744:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    3748:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    374c:	3a0e0300 	bcc	384354 <_Min_Stack_Size+0x384154>
    3750:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3754:	000b3813 	andeq	r3, fp, r3, lsl r8
    3758:	01130d00 	tsteq	r3, r0, lsl #26
    375c:	0b0b0e03 	bleq	2c6f70 <_Min_Stack_Size+0x2c6d70>
    3760:	0b3b0b3a 	bleq	ec6450 <_Min_Stack_Size+0xec6250>
    3764:	00001301 	andeq	r1, r0, r1, lsl #6
    3768:	03000d0e 	movweq	r0, #3342	; 0xd0e
    376c:	3b0b3a08 	blcc	2d1f94 <_Min_Stack_Size+0x2d1d94>
    3770:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    3774:	0f00000b 	svceq	0x0000000b
    3778:	0b0b000f 	bleq	2c37bc <_Min_Stack_Size+0x2c35bc>
    377c:	00001349 	andeq	r1, r0, r9, asr #6
    3780:	03011310 	movweq	r1, #4880	; 0x1310
    3784:	3a0b0b0e 	bcc	2c63c4 <_Min_Stack_Size+0x2c61c4>
    3788:	01053b0b 	tsteq	r5, fp, lsl #22
    378c:	11000013 	tstne	r0, r3, lsl r0
    3790:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3794:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3798:	0b381349 	bleq	e084c4 <_Min_Stack_Size+0xe082c4>
    379c:	0d120000 	ldceq	0, cr0, [r2, #-0]
    37a0:	3a080300 	bcc	2043a8 <_Min_Stack_Size+0x2041a8>
    37a4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    37a8:	000b3813 	andeq	r3, fp, r3, lsl r8
    37ac:	01151300 	tsteq	r5, r0, lsl #6
    37b0:	13491927 	movtne	r1, #39207	; 0x9927
    37b4:	00001301 	andeq	r1, r0, r1, lsl #6
    37b8:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    37bc:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    37c0:	13490026 	movtne	r0, #36902	; 0x9026
    37c4:	15160000 	ldrne	r0, [r6, #-0]
    37c8:	01192701 	tsteq	r9, r1, lsl #14
    37cc:	17000013 	smladne	r0, r3, r0, r0
    37d0:	0e03012e 	adfeqsp	f0, f3, #0.5
    37d4:	0b3b0b3a 	bleq	ec64c4 <_Min_Stack_Size+0xec62c4>
    37d8:	13491927 	movtne	r1, #39207	; 0x9927
    37dc:	13010b20 	movwne	r0, #6944	; 0x1b20
    37e0:	05180000 	ldreq	r0, [r8, #-0]
    37e4:	3a0e0300 	bcc	3843ec <_Min_Stack_Size+0x3841ec>
    37e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    37ec:	19000013 	stmdbne	r0, {r0, r1, r4}
    37f0:	08030005 	stmdaeq	r3, {r0, r2}
    37f4:	0b3b0b3a 	bleq	ec64e4 <_Min_Stack_Size+0xec62e4>
    37f8:	00001349 	andeq	r1, r0, r9, asr #6
    37fc:	0300341a 	movweq	r3, #1050	; 0x41a
    3800:	3b0b3a08 	blcc	2d2028 <_Min_Stack_Size+0x2d1e28>
    3804:	0013490b 	andseq	r4, r3, fp, lsl #18
    3808:	00341b00 	eorseq	r1, r4, r0, lsl #22
    380c:	0b3a0e03 	bleq	e87020 <_Min_Stack_Size+0xe86e20>
    3810:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3814:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
    3818:	03193f01 	tsteq	r9, #1, 30
    381c:	3b0b3a0e 	blcc	2d205c <_Min_Stack_Size+0x2d1e5c>
    3820:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3824:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3828:	97184006 	ldrls	r4, [r8, -r6]
    382c:	13011942 	movwne	r1, #6466	; 0x1942
    3830:	051d0000 	ldreq	r0, [sp, #-0]
    3834:	3a0e0300 	bcc	38443c <_Min_Stack_Size+0x38423c>
    3838:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    383c:	00170213 	andseq	r0, r7, r3, lsl r2
    3840:	00051e00 	andeq	r1, r5, r0, lsl #28
    3844:	0b3a0803 	bleq	e85858 <_Min_Stack_Size+0xe85658>
    3848:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    384c:	00001702 	andeq	r1, r0, r2, lsl #14
    3850:	0300341f 	movweq	r3, #1055	; 0x41f
    3854:	3b0b3a08 	blcc	2d207c <_Min_Stack_Size+0x2d1e7c>
    3858:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    385c:	20000017 	andcs	r0, r0, r7, lsl r0
    3860:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3864:	0b3b0b3a 	bleq	ec6554 <_Min_Stack_Size+0xec6354>
    3868:	17021349 	strne	r1, [r2, -r9, asr #6]
    386c:	0b210000 	bleq	843874 <_Min_Stack_Size+0x843674>
    3870:	01175501 	tsteq	r7, r1, lsl #10
    3874:	22000013 	andcs	r0, r0, #19
    3878:	08030034 	stmdaeq	r3, {r2, r4, r5}
    387c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3880:	17021349 	strne	r1, [r2, -r9, asr #6]
    3884:	1d230000 	stcne	0, cr0, [r3, #-0]
    3888:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    388c:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    3890:	0005590b 	andeq	r5, r5, fp, lsl #18
    3894:	00052400 	andeq	r2, r5, r0, lsl #8
    3898:	17021331 	smladxne	r2, r1, r3, r1
    389c:	0b250000 	bleq	9438a4 <_Min_Stack_Size+0x9436a4>
    38a0:	00175501 	andseq	r5, r7, r1, lsl #10
    38a4:	00342600 	eorseq	r2, r4, r0, lsl #12
    38a8:	17021331 	smladxne	r2, r1, r3, r1
    38ac:	89270000 	stmdbhi	r7!, {}	; <UNPREDICTABLE>
    38b0:	11010182 	smlabbne	r1, r2, r1, r0
    38b4:	01133101 	tsteq	r3, r1, lsl #2
    38b8:	28000013 	stmdacs	r0, {r0, r1, r4}
    38bc:	0001828a 	andeq	r8, r1, sl, lsl #5
    38c0:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    38c4:	29000018 	stmdbcs	r0, {r3, r4}
    38c8:	01018289 	smlabbeq	r1, r9, r2, r8
    38cc:	13310111 	teqne	r1, #1073741828	; 0x40000004
    38d0:	342a0000 	strtcc	r0, [sl], #-0
    38d4:	3a0e0300 	bcc	3844dc <_Min_Stack_Size+0x3842dc>
    38d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    38dc:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    38e0:	2b000018 	blcs	3948 <_Min_Stack_Size+0x3748>
    38e4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    38e8:	0e6e193c 			; <UNDEFINED> instruction: 0x0e6e193c
    38ec:	0b3a0e03 	bleq	e87100 <_Min_Stack_Size+0xe86f00>
    38f0:	00000b3b 	andeq	r0, r0, fp, lsr fp
    38f4:	01110100 	tsteq	r1, r0, lsl #2
    38f8:	0b130e25 	bleq	4c7194 <_Min_Stack_Size+0x4c6f94>
    38fc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    3900:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3904:	00001710 	andeq	r1, r0, r0, lsl r7
    3908:	0b002402 	bleq	c918 <_Min_Stack_Size+0xc718>
    390c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3910:	03000008 	movweq	r0, #8
    3914:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3918:	0b3b0b3a 	bleq	ec6608 <_Min_Stack_Size+0xec6408>
    391c:	00001349 	andeq	r1, r0, r9, asr #6
    3920:	0b002404 	bleq	c938 <_Min_Stack_Size+0xc738>
    3924:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3928:	0500000e 	streq	r0, [r0, #-14]
    392c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3930:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3934:	00001349 	andeq	r1, r0, r9, asr #6
    3938:	0b011706 	bleq	49558 <_Min_Stack_Size+0x49358>
    393c:	3b0b3a0b 	blcc	2d2170 <_Min_Stack_Size+0x2d1f70>
    3940:	0013010b 	andseq	r0, r3, fp, lsl #2
    3944:	000d0700 	andeq	r0, sp, r0, lsl #14
    3948:	0b3a0e03 	bleq	e8715c <_Min_Stack_Size+0xe86f5c>
    394c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3950:	01080000 	mrseq	r0, (UNDEF: 8)
    3954:	01134901 	tsteq	r3, r1, lsl #18
    3958:	09000013 	stmdbeq	r0, {r0, r1, r4}
    395c:	13490021 	movtne	r0, #36897	; 0x9021
    3960:	00000b2f 	andeq	r0, r0, pc, lsr #22
    3964:	0b01130a 	bleq	48594 <_Min_Stack_Size+0x48394>
    3968:	3b0b3a0b 	blcc	2d219c <_Min_Stack_Size+0x2d1f9c>
    396c:	0013010b 	andseq	r0, r3, fp, lsl #2
    3970:	000d0b00 	andeq	r0, sp, r0, lsl #22
    3974:	0b3a0e03 	bleq	e87188 <_Min_Stack_Size+0xe86f88>
    3978:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    397c:	00000b38 	andeq	r0, r0, r8, lsr fp
    3980:	0b000f0c 	bleq	75b8 <_Min_Stack_Size+0x73b8>
    3984:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    3988:	0b0b000f 	bleq	2c39cc <_Min_Stack_Size+0x2c37cc>
    398c:	00001349 	andeq	r1, r0, r9, asr #6
    3990:	0301130e 	movweq	r1, #4878	; 0x130e
    3994:	3a0b0b0e 	bcc	2c65d4 <_Min_Stack_Size+0x2c63d4>
    3998:	010b3b0b 	tsteq	fp, fp, lsl #22
    399c:	0f000013 	svceq	0x00000013
    39a0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    39a4:	0b3b0b3a 	bleq	ec6694 <_Min_Stack_Size+0xec6494>
    39a8:	0b381349 	bleq	e086d4 <_Min_Stack_Size+0xe084d4>
    39ac:	13100000 	tstne	r0, #0
    39b0:	0b0e0301 	bleq	3845bc <_Min_Stack_Size+0x3843bc>
    39b4:	3b0b3a0b 	blcc	2d21e8 <_Min_Stack_Size+0x2d1fe8>
    39b8:	00130105 	andseq	r0, r3, r5, lsl #2
    39bc:	000d1100 	andeq	r1, sp, r0, lsl #2
    39c0:	0b3a0e03 	bleq	e871d4 <_Min_Stack_Size+0xe86fd4>
    39c4:	1349053b 	movtne	r0, #38203	; 0x953b
    39c8:	00000b38 	andeq	r0, r0, r8, lsr fp
    39cc:	03000d12 	movweq	r0, #3346	; 0xd12
    39d0:	3b0b3a08 	blcc	2d21f8 <_Min_Stack_Size+0x2d1ff8>
    39d4:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    39d8:	1300000b 	movwne	r0, #11
    39dc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    39e0:	13011349 	movwne	r1, #4937	; 0x1349
    39e4:	05140000 	ldreq	r0, [r4, #-0]
    39e8:	00134900 	andseq	r4, r3, r0, lsl #18
    39ec:	00261500 	eoreq	r1, r6, r0, lsl #10
    39f0:	00001349 	andeq	r1, r0, r9, asr #6
    39f4:	27011516 	smladcs	r1, r6, r5, r1
    39f8:	00130119 	andseq	r0, r3, r9, lsl r1
    39fc:	000d1700 	andeq	r1, sp, r0, lsl #14
    3a00:	13490e03 	movtne	r0, #40451	; 0x9e03
    3a04:	19340b38 	ldmdbne	r4!, {r3, r4, r5, r8, r9, fp}
    3a08:	26180000 	ldrcs	r0, [r8], -r0
    3a0c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    3a10:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3a14:	0b3a0e03 	bleq	e87228 <_Min_Stack_Size+0xe87028>
    3a18:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3a1c:	01111349 	tsteq	r1, r9, asr #6
    3a20:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3a24:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3a28:	1a000013 	bne	3a7c <_Min_Stack_Size+0x387c>
    3a2c:	08030005 	stmdaeq	r3, {r0, r2}
    3a30:	0b3b0b3a 	bleq	ec6720 <_Min_Stack_Size+0xec6520>
    3a34:	17021349 	strne	r1, [r2, -r9, asr #6]
    3a38:	341b0000 	ldrcc	r0, [fp], #-0
    3a3c:	3a080300 	bcc	204644 <_Min_Stack_Size+0x204444>
    3a40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3a44:	00170213 	andseq	r0, r7, r3, lsl r2
    3a48:	000a1c00 	andeq	r1, sl, r0, lsl #24
    3a4c:	0b3a0803 	bleq	e85a60 <_Min_Stack_Size+0xe85860>
    3a50:	01110b3b 	tsteq	r1, fp, lsr fp
    3a54:	0b1d0000 	bleq	743a5c <_Min_Stack_Size+0x74385c>
    3a58:	01175501 	tsteq	r7, r1, lsl #10
    3a5c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    3a60:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3a64:	0b3b0b3a 	bleq	ec6754 <_Min_Stack_Size+0xec6554>
    3a68:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    3a6c:	341f0000 	ldrcc	r0, [pc], #-0	; 3a74 <_Min_Stack_Size+0x3874>
    3a70:	3a0e0300 	bcc	384678 <_Min_Stack_Size+0x384478>
    3a74:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3a78:	00170213 	andseq	r0, r7, r3, lsl r2
    3a7c:	82892000 	addhi	r2, r9, #0
    3a80:	01110101 	tsteq	r1, r1, lsl #2
    3a84:	13011331 	movwne	r1, #4913	; 0x1331
    3a88:	8a210000 	bhi	843a90 <_Min_Stack_Size+0x843890>
    3a8c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    3a90:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    3a94:	89220000 	stmdbhi	r2!, {}	; <UNPREDICTABLE>
    3a98:	11010182 	smlabbne	r1, r2, r1, r0
    3a9c:	00133101 	andseq	r3, r3, r1, lsl #2
    3aa0:	000a2300 	andeq	r2, sl, r0, lsl #6
    3aa4:	0b3a0803 	bleq	e85ab8 <_Min_Stack_Size+0xe858b8>
    3aa8:	0111053b 	tsteq	r1, fp, lsr r5
    3aac:	34240000 	strtcc	r0, [r4], #-0
    3ab0:	3a080300 	bcc	2046b8 <_Min_Stack_Size+0x2044b8>
    3ab4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3ab8:	00170213 	andseq	r0, r7, r3, lsl r2
    3abc:	00342500 	eorseq	r2, r4, r0, lsl #10
    3ac0:	0b3a0e03 	bleq	e872d4 <_Min_Stack_Size+0xe870d4>
    3ac4:	1349053b 	movtne	r0, #38203	; 0x953b
    3ac8:	00001702 	andeq	r1, r0, r2, lsl #14
    3acc:	3f012e26 	svccc	0x00012e26
    3ad0:	3a0e0319 	bcc	38473c <_Min_Stack_Size+0x38453c>
    3ad4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3ad8:	11134919 	tstne	r3, r9, lsl r9
    3adc:	40061201 	andmi	r1, r6, r1, lsl #4
    3ae0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3ae4:	00001301 	andeq	r1, r0, r1, lsl #6
    3ae8:	03000527 	movweq	r0, #1319	; 0x527
    3aec:	3b0b3a0e 	blcc	2d232c <_Min_Stack_Size+0x2d212c>
    3af0:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3af4:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    3af8:	08030005 	stmdaeq	r3, {r0, r2}
    3afc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3b00:	17021349 	strne	r1, [r2, -r9, asr #6]
    3b04:	05290000 	streq	r0, [r9, #-0]!
    3b08:	3a080300 	bcc	204710 <_Min_Stack_Size+0x204510>
    3b0c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3b10:	00180213 	andseq	r0, r8, r3, lsl r2
    3b14:	00342a00 	eorseq	r2, r4, r0, lsl #20
    3b18:	0b3a0e03 	bleq	e8732c <_Min_Stack_Size+0xe8712c>
    3b1c:	1349053b 	movtne	r0, #38203	; 0x953b
    3b20:	00001802 	andeq	r1, r0, r2, lsl #16
    3b24:	03000a2b 	movweq	r0, #2603	; 0xa2b
    3b28:	3b0b3a0e 	blcc	2d2368 <_Min_Stack_Size+0x2d2168>
    3b2c:	00011105 	andeq	r1, r1, r5, lsl #2
    3b30:	002e2c00 	eoreq	r2, lr, r0, lsl #24
    3b34:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    3b38:	0e030e6e 	cdpeq	14, 0, cr0, cr3, cr14, {3}
    3b3c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3b40:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
    3b44:	3c193f00 	ldccc	15, cr3, [r9], {-0}
    3b48:	030e6e19 	movweq	r6, #60953	; 0xee19
    3b4c:	3b0b3a0e 	blcc	2d238c <_Min_Stack_Size+0x2d218c>
    3b50:	0000000b 	andeq	r0, r0, fp
    3b54:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3b58:	030b130e 	movweq	r1, #45838	; 0xb30e
    3b5c:	110e1b0e 	tstne	lr, lr, lsl #22
    3b60:	10061201 	andne	r1, r6, r1, lsl #4
    3b64:	02000017 	andeq	r0, r0, #23
    3b68:	0b0b0024 	bleq	2c3c00 <_Min_Stack_Size+0x2c3a00>
    3b6c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3b70:	16030000 	strne	r0, [r3], -r0
    3b74:	3a0e0300 	bcc	38477c <_Min_Stack_Size+0x38457c>
    3b78:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3b7c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    3b80:	0b0b0024 	bleq	2c3c18 <_Min_Stack_Size+0x2c3a18>
    3b84:	0e030b3e 	vmoveq.16	d3[0], r0
    3b88:	16050000 	strne	r0, [r5], -r0
    3b8c:	3a0e0300 	bcc	384794 <_Min_Stack_Size+0x384594>
    3b90:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3b94:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3b98:	0b0b0117 	bleq	2c3ffc <_Min_Stack_Size+0x2c3dfc>
    3b9c:	0b3b0b3a 	bleq	ec688c <_Min_Stack_Size+0xec668c>
    3ba0:	00001301 	andeq	r1, r0, r1, lsl #6
    3ba4:	03000d07 	movweq	r0, #3335	; 0xd07
    3ba8:	3b0b3a0e 	blcc	2d23e8 <_Min_Stack_Size+0x2d21e8>
    3bac:	0013490b 	andseq	r4, r3, fp, lsl #18
    3bb0:	01010800 	tsteq	r1, r0, lsl #16
    3bb4:	13011349 	movwne	r1, #4937	; 0x1349
    3bb8:	21090000 	mrscs	r0, (UNDEF: 9)
    3bbc:	2f134900 	svccs	0x00134900
    3bc0:	0a00000b 	beq	3bf4 <_Min_Stack_Size+0x39f4>
    3bc4:	0b0b0113 	bleq	2c4018 <_Min_Stack_Size+0x2c3e18>
    3bc8:	0b3b0b3a 	bleq	ec68b8 <_Min_Stack_Size+0xec66b8>
    3bcc:	00001301 	andeq	r1, r0, r1, lsl #6
    3bd0:	03000d0b 	movweq	r0, #3339	; 0xd0b
    3bd4:	3b0b3a0e 	blcc	2d2414 <_Min_Stack_Size+0x2d2214>
    3bd8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    3bdc:	0c00000b 	stceq	0, cr0, [r0], {11}
    3be0:	0b0b000f 	bleq	2c3c24 <_Min_Stack_Size+0x2c3a24>
    3be4:	0f0d0000 	svceq	0x000d0000
    3be8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3bec:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    3bf0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    3bf4:	0b3a0b0b 	bleq	e86828 <_Min_Stack_Size+0xe86628>
    3bf8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    3bfc:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 3c04 <_Min_Stack_Size+0x3a04>
    3c00:	3a080300 	bcc	204808 <_Min_Stack_Size+0x204608>
    3c04:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3c08:	000b3813 	andeq	r3, fp, r3, lsl r8
    3c0c:	01131000 	tsteq	r3, r0
    3c10:	0b0b0e03 	bleq	2c7424 <_Min_Stack_Size+0x2c7224>
    3c14:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3c18:	00001301 	andeq	r1, r0, r1, lsl #6
    3c1c:	03000d11 	movweq	r0, #3345	; 0xd11
    3c20:	3b0b3a0e 	blcc	2d2460 <_Min_Stack_Size+0x2d2260>
    3c24:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    3c28:	1200000b 	andne	r0, r0, #11
    3c2c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    3c30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3c34:	0b381349 	bleq	e08960 <_Min_Stack_Size+0xe08760>
    3c38:	15130000 	ldrne	r0, [r3, #-0]
    3c3c:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    3c40:	00130113 	andseq	r0, r3, r3, lsl r1
    3c44:	00051400 	andeq	r1, r5, r0, lsl #8
    3c48:	00001349 	andeq	r1, r0, r9, asr #6
    3c4c:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    3c50:	16000013 			; <UNDEFINED> instruction: 0x16000013
    3c54:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    3c58:	00001301 	andeq	r1, r0, r1, lsl #6
    3c5c:	03000d17 	movweq	r0, #3351	; 0xd17
    3c60:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
    3c64:	0019340b 	andseq	r3, r9, fp, lsl #8
    3c68:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
    3c6c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3c70:	0b3b0b3a 	bleq	ec6960 <_Min_Stack_Size+0xec6760>
    3c74:	13491927 	movtne	r1, #39207	; 0x9927
    3c78:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3c7c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3c80:	00130119 	andseq	r0, r3, r9, lsl r1
    3c84:	00051900 	andeq	r1, r5, r0, lsl #18
    3c88:	0b3a0e03 	bleq	e8749c <_Min_Stack_Size+0xe8729c>
    3c8c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3c90:	00001702 	andeq	r1, r0, r2, lsl #14
    3c94:	0300051a 	movweq	r0, #1306	; 0x51a
    3c98:	3b0b3a08 	blcc	2d24c0 <_Min_Stack_Size+0x2d22c0>
    3c9c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3ca0:	1b000017 	blne	3d04 <_Min_Stack_Size+0x3b04>
    3ca4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    3ca8:	0b3b0b3a 	bleq	ec6998 <_Min_Stack_Size+0xec6798>
    3cac:	17021349 	strne	r1, [r2, -r9, asr #6]
    3cb0:	0a1c0000 	beq	703cb8 <_Min_Stack_Size+0x703ab8>
    3cb4:	3a0e0300 	bcc	3848bc <_Min_Stack_Size+0x3846bc>
    3cb8:	000b3b0b 	andeq	r3, fp, fp, lsl #22
    3cbc:	010b1d00 	tsteq	fp, r0, lsl #26
    3cc0:	13011755 	movwne	r1, #5973	; 0x1755
    3cc4:	341e0000 	ldrcc	r0, [lr], #-0
    3cc8:	3a0e0300 	bcc	3848d0 <_Min_Stack_Size+0x3846d0>
    3ccc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3cd0:	00170213 	andseq	r0, r7, r3, lsl r2
    3cd4:	82891f00 	addhi	r1, r9, #0, 30
    3cd8:	01110101 	tsteq	r1, r1, lsl #2
    3cdc:	8a200000 	bhi	803ce4 <_Min_Stack_Size+0x803ae4>
    3ce0:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    3ce4:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    3ce8:	34210000 	strtcc	r0, [r1], #-0
    3cec:	3a0e0300 	bcc	3848f4 <_Min_Stack_Size+0x3846f4>
    3cf0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3cf4:	00180213 	andseq	r0, r8, r3, lsl r2
    3cf8:	000a2200 	andeq	r2, sl, r0, lsl #4
    3cfc:	0b3a0e03 	bleq	e87510 <_Min_Stack_Size+0xe87310>
    3d00:	01110b3b 	tsteq	r1, fp, lsr fp
    3d04:	0a230000 	beq	8c3d0c <_Min_Stack_Size+0x8c3b0c>
    3d08:	3a080300 	bcc	204910 <_Min_Stack_Size+0x204710>
    3d0c:	110b3b0b 	tstne	fp, fp, lsl #22
    3d10:	24000001 	strcs	r0, [r0], #-1
    3d14:	01018289 	smlabbeq	r1, r9, r2, r8
    3d18:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3d1c:	89250000 	stmdbhi	r5!, {}	; <UNPREDICTABLE>
    3d20:	11010182 	smlabbne	r1, r2, r1, r0
    3d24:	01133101 	tsteq	r3, r1, lsl #2
    3d28:	26000013 			; <UNDEFINED> instruction: 0x26000013
    3d2c:	01018289 	smlabbeq	r1, r9, r2, r8
    3d30:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    3d34:	27000018 	smladcs	r0, r8, r0, r0
    3d38:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3d3c:	0e6e193c 			; <UNDEFINED> instruction: 0x0e6e193c
    3d40:	0b3a0e03 	bleq	e87554 <_Min_Stack_Size+0xe87354>
    3d44:	00000b3b 	andeq	r0, r0, fp, lsr fp
    3d48:	01110100 	tsteq	r1, r0, lsl #2
    3d4c:	0b130e25 	bleq	4c75e8 <_Min_Stack_Size+0x4c73e8>
    3d50:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    3d54:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3d58:	00001710 	andeq	r1, r0, r0, lsl r7
    3d5c:	03001602 	movweq	r1, #1538	; 0x602
    3d60:	3b0b3a0e 	blcc	2d25a0 <_Min_Stack_Size+0x2d23a0>
    3d64:	0013490b 	andseq	r4, r3, fp, lsl #18
    3d68:	00240300 	eoreq	r0, r4, r0, lsl #6
    3d6c:	0b3e0b0b 	bleq	f869a0 <_Min_Stack_Size+0xf867a0>
    3d70:	00000803 	andeq	r0, r0, r3, lsl #16
    3d74:	0b002404 	bleq	cd8c <_Min_Stack_Size+0xcb8c>
    3d78:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3d7c:	0500000e 	streq	r0, [r0, #-14]
    3d80:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3d84:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3d88:	00001349 	andeq	r1, r0, r9, asr #6
    3d8c:	0b011706 	bleq	499ac <_Min_Stack_Size+0x497ac>
    3d90:	3b0b3a0b 	blcc	2d25c4 <_Min_Stack_Size+0x2d23c4>
    3d94:	0013010b 	andseq	r0, r3, fp, lsl #2
    3d98:	000d0700 	andeq	r0, sp, r0, lsl #14
    3d9c:	0b3a0e03 	bleq	e875b0 <_Min_Stack_Size+0xe873b0>
    3da0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3da4:	01080000 	mrseq	r0, (UNDEF: 8)
    3da8:	01134901 	tsteq	r3, r1, lsl #18
    3dac:	09000013 	stmdbeq	r0, {r0, r1, r4}
    3db0:	13490021 	movtne	r0, #36897	; 0x9021
    3db4:	00000b2f 	andeq	r0, r0, pc, lsr #22
    3db8:	0b01130a 	bleq	489e8 <_Min_Stack_Size+0x487e8>
    3dbc:	3b0b3a0b 	blcc	2d25f0 <_Min_Stack_Size+0x2d23f0>
    3dc0:	0013010b 	andseq	r0, r3, fp, lsl #2
    3dc4:	000d0b00 	andeq	r0, sp, r0, lsl #22
    3dc8:	0b3a0e03 	bleq	e875dc <_Min_Stack_Size+0xe873dc>
    3dcc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3dd0:	00000b38 	andeq	r0, r0, r8, lsr fp
    3dd4:	0b000f0c 	bleq	7a0c <_Min_Stack_Size+0x780c>
    3dd8:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    3ddc:	0b0b000f 	bleq	2c3e20 <_Min_Stack_Size+0x2c3c20>
    3de0:	00001349 	andeq	r1, r0, r9, asr #6
    3de4:	0301130e 	movweq	r1, #4878	; 0x130e
    3de8:	3a0b0b0e 	bcc	2c6a28 <_Min_Stack_Size+0x2c6828>
    3dec:	010b3b0b 	tsteq	fp, fp, lsl #22
    3df0:	0f000013 	svceq	0x00000013
    3df4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    3df8:	0b3b0b3a 	bleq	ec6ae8 <_Min_Stack_Size+0xec68e8>
    3dfc:	0b381349 	bleq	e08b28 <_Min_Stack_Size+0xe08928>
    3e00:	13100000 	tstne	r0, #0
    3e04:	0b0e0301 	bleq	384a10 <_Min_Stack_Size+0x384810>
    3e08:	3b0b3a0b 	blcc	2d263c <_Min_Stack_Size+0x2d243c>
    3e0c:	00130105 	andseq	r0, r3, r5, lsl #2
    3e10:	000d1100 	andeq	r1, sp, r0, lsl #2
    3e14:	0b3a0e03 	bleq	e87628 <_Min_Stack_Size+0xe87428>
    3e18:	1349053b 	movtne	r0, #38203	; 0x953b
    3e1c:	00000b38 	andeq	r0, r0, r8, lsr fp
    3e20:	03000d12 	movweq	r0, #3346	; 0xd12
    3e24:	3b0b3a08 	blcc	2d264c <_Min_Stack_Size+0x2d244c>
    3e28:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    3e2c:	1300000b 	movwne	r0, #11
    3e30:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    3e34:	13011349 	movwne	r1, #4937	; 0x1349
    3e38:	05140000 	ldreq	r0, [r4, #-0]
    3e3c:	00134900 	andseq	r4, r3, r0, lsl #18
    3e40:	00261500 	eoreq	r1, r6, r0, lsl #10
    3e44:	00001349 	andeq	r1, r0, r9, asr #6
    3e48:	27011516 	smladcs	r1, r6, r5, r1
    3e4c:	00130119 	andseq	r0, r3, r9, lsl r1
    3e50:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
    3e54:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3e58:	0b3b0b3a 	bleq	ec6b48 <_Min_Stack_Size+0xec6948>
    3e5c:	13491927 	movtne	r1, #39207	; 0x9927
    3e60:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3e64:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3e68:	00130119 	andseq	r0, r3, r9, lsl r1
    3e6c:	00051800 	andeq	r1, r5, r0, lsl #16
    3e70:	0b3a0803 	bleq	e85e84 <_Min_Stack_Size+0xe85c84>
    3e74:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3e78:	00001702 	andeq	r1, r0, r2, lsl #14
    3e7c:	03000519 	movweq	r0, #1305	; 0x519
    3e80:	3b0b3a0e 	blcc	2d26c0 <_Min_Stack_Size+0x2d24c0>
    3e84:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3e88:	1a000017 	bne	3eec <_Min_Stack_Size+0x3cec>
    3e8c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    3e90:	0b3b0b3a 	bleq	ec6b80 <_Min_Stack_Size+0xec6980>
    3e94:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    3e98:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    3e9c:	03193f01 	tsteq	r9, #1, 30
    3ea0:	3b0b3a0e 	blcc	2d26e0 <_Min_Stack_Size+0x2d24e0>
    3ea4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3ea8:	01193c13 	tsteq	r9, r3, lsl ip
    3eac:	1c000013 	stcne	0, cr0, [r0], {19}
    3eb0:	01018289 	smlabbeq	r1, r9, r2, r8
    3eb4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3eb8:	8a1d0000 	bhi	743ec0 <_Min_Stack_Size+0x743cc0>
    3ebc:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    3ec0:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    3ec4:	341e0000 	ldrcc	r0, [lr], #-0
    3ec8:	3a0e0300 	bcc	384ad0 <_Min_Stack_Size+0x3848d0>
    3ecc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3ed0:	3c193f13 	ldccc	15, cr3, [r9], {19}
    3ed4:	1f000019 	svcne	0x00000019
    3ed8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3edc:	0e6e193c 			; <UNDEFINED> instruction: 0x0e6e193c
    3ee0:	0b3a0e03 	bleq	e876f4 <_Min_Stack_Size+0xe874f4>
    3ee4:	00000b3b 	andeq	r0, r0, fp, lsr fp
    3ee8:	01110100 	tsteq	r1, r0, lsl #2
    3eec:	0b130e25 	bleq	4c7788 <_Min_Stack_Size+0x4c7588>
    3ef0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    3ef4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3ef8:	00001710 	andeq	r1, r0, r0, lsl r7
    3efc:	0b002402 	bleq	cf0c <_Min_Stack_Size+0xcd0c>
    3f00:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3f04:	03000008 	movweq	r0, #8
    3f08:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3f0c:	0b3b0b3a 	bleq	ec6bfc <_Min_Stack_Size+0xec69fc>
    3f10:	00001349 	andeq	r1, r0, r9, asr #6
    3f14:	0b002404 	bleq	cf2c <_Min_Stack_Size+0xcd2c>
    3f18:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3f1c:	0500000e 	streq	r0, [r0, #-14]
    3f20:	0b0b000f 	bleq	2c3f64 <_Min_Stack_Size+0x2c3d64>
    3f24:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    3f28:	03193f01 	tsteq	r9, #1, 30
    3f2c:	3b0b3a0e 	blcc	2d276c <_Min_Stack_Size+0x2d256c>
    3f30:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3f34:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3f38:	97184006 	ldrls	r4, [r8, -r6]
    3f3c:	13011942 	movwne	r1, #6466	; 0x1942
    3f40:	05070000 	streq	r0, [r7, #-0]
    3f44:	3a0e0300 	bcc	384b4c <_Min_Stack_Size+0x38494c>
    3f48:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3f4c:	00170213 	andseq	r0, r7, r3, lsl r2
    3f50:	00050800 	andeq	r0, r5, r0, lsl #16
    3f54:	0b3a0803 	bleq	e85f68 <_Min_Stack_Size+0xe85d68>
    3f58:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3f5c:	00001702 	andeq	r1, r0, r2, lsl #14
    3f60:	03003409 	movweq	r3, #1033	; 0x409
    3f64:	3b0b3a08 	blcc	2d278c <_Min_Stack_Size+0x2d258c>
    3f68:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3f6c:	0a000017 	beq	3fd0 <_Min_Stack_Size+0x3dd0>
    3f70:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3f74:	0b3b0b3a 	bleq	ec6c64 <_Min_Stack_Size+0xec6a64>
    3f78:	17021349 	strne	r1, [r2, -r9, asr #6]
    3f7c:	0f0b0000 	svceq	0x000b0000
    3f80:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3f84:	0c000013 	stceq	0, cr0, [r0], {19}
    3f88:	00000026 	andeq	r0, r0, r6, lsr #32
    3f8c:	4900260d 	stmdbmi	r0, {r0, r2, r3, r9, sl, sp}
    3f90:	00000013 	andeq	r0, r0, r3, lsl r0
    3f94:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3f98:	030b130e 	movweq	r1, #45838	; 0xb30e
    3f9c:	110e1b0e 	tstne	lr, lr, lsl #22
    3fa0:	10061201 	andne	r1, r6, r1, lsl #4
    3fa4:	02000017 	andeq	r0, r0, #23
    3fa8:	0b0b0024 	bleq	2c4040 <_Min_Stack_Size+0x2c3e40>
    3fac:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3fb0:	16030000 	strne	r0, [r3], -r0
    3fb4:	3a0e0300 	bcc	384bbc <_Min_Stack_Size+0x3849bc>
    3fb8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3fbc:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    3fc0:	0b0b0024 	bleq	2c4058 <_Min_Stack_Size+0x2c3e58>
    3fc4:	0e030b3e 	vmoveq.16	d3[0], r0
    3fc8:	0f050000 	svceq	0x00050000
    3fcc:	000b0b00 	andeq	r0, fp, r0, lsl #22
    3fd0:	000f0600 	andeq	r0, pc, r0, lsl #12
    3fd4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    3fd8:	26070000 	strcs	r0, [r7], -r0
    3fdc:	00134900 	andseq	r4, r3, r0, lsl #18
    3fe0:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    3fe4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3fe8:	0b3b0b3a 	bleq	ec6cd8 <_Min_Stack_Size+0xec6ad8>
    3fec:	13491927 	movtne	r1, #39207	; 0x9927
    3ff0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3ff4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3ff8:	00130119 	andseq	r0, r3, r9, lsl r1
    3ffc:	00050900 	andeq	r0, r5, r0, lsl #18
    4000:	0b3a0e03 	bleq	e87814 <_Min_Stack_Size+0xe87614>
    4004:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    4008:	00001802 	andeq	r1, r0, r2, lsl #16
    400c:	0300050a 	movweq	r0, #1290	; 0x50a
    4010:	3b0b3a0e 	blcc	2d2850 <_Min_Stack_Size+0x2d2650>
    4014:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4018:	0b000017 	bleq	407c <_Min_Stack_Size+0x3e7c>
    401c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    4020:	0b3b0b3a 	bleq	ec6d10 <_Min_Stack_Size+0xec6b10>
    4024:	17021349 	strne	r1, [r2, -r9, asr #6]
    4028:	340c0000 	strcc	r0, [ip], #-0
    402c:	3a0e0300 	bcc	384c34 <_Min_Stack_Size+0x384a34>
    4030:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4034:	00170213 	andseq	r0, r7, r3, lsl r2
    4038:	00260d00 	eoreq	r0, r6, r0, lsl #26
    403c:	01000000 	mrseq	r0, (UNDEF: 0)
    4040:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    4044:	0e030b13 	vmoveq.32	d3[0], r0
    4048:	01110e1b 	tsteq	r1, fp, lsl lr
    404c:	17100612 			; <UNDEFINED> instruction: 0x17100612
    4050:	24020000 	strcs	r0, [r2], #-0
    4054:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    4058:	000e030b 	andeq	r0, lr, fp, lsl #6
    405c:	00240300 	eoreq	r0, r4, r0, lsl #6
    4060:	0b3e0b0b 	bleq	f86c94 <_Min_Stack_Size+0xf86a94>
    4064:	00000803 	andeq	r0, r0, r3, lsl #16
    4068:	03001604 	movweq	r1, #1540	; 0x604
    406c:	3b0b3a0e 	blcc	2d28ac <_Min_Stack_Size+0x2d26ac>
    4070:	0013490b 	andseq	r4, r3, fp, lsl #18
    4074:	000f0500 	andeq	r0, pc, r0, lsl #10
    4078:	00000b0b 	andeq	r0, r0, fp, lsl #22
    407c:	03001606 	movweq	r1, #1542	; 0x606
    4080:	3b0b3a0e 	blcc	2d28c0 <_Min_Stack_Size+0x2d26c0>
    4084:	00134905 	andseq	r4, r3, r5, lsl #18
    4088:	01170700 	tsteq	r7, r0, lsl #14
    408c:	0b3a0b0b 	bleq	e86cc0 <_Min_Stack_Size+0xe86ac0>
    4090:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    4094:	0d080000 	stceq	0, cr0, [r8, #-0]
    4098:	3a0e0300 	bcc	384ca0 <_Min_Stack_Size+0x384aa0>
    409c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    40a0:	09000013 	stmdbeq	r0, {r0, r1, r4}
    40a4:	13490101 	movtne	r0, #37121	; 0x9101
    40a8:	00001301 	andeq	r1, r0, r1, lsl #6
    40ac:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
    40b0:	000b2f13 	andeq	r2, fp, r3, lsl pc
    40b4:	01130b00 	tsteq	r3, r0, lsl #22
    40b8:	0b3a0b0b 	bleq	e86cec <_Min_Stack_Size+0xe86aec>
    40bc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    40c0:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    40c4:	3a0e0300 	bcc	384ccc <_Min_Stack_Size+0x384acc>
    40c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    40cc:	000b3813 	andeq	r3, fp, r3, lsl r8
    40d0:	01130d00 	tsteq	r3, r0, lsl #26
    40d4:	0b0b0e03 	bleq	2c78e8 <_Min_Stack_Size+0x2c76e8>
    40d8:	0b3b0b3a 	bleq	ec6dc8 <_Min_Stack_Size+0xec6bc8>
    40dc:	00001301 	andeq	r1, r0, r1, lsl #6
    40e0:	03000d0e 	movweq	r0, #3342	; 0xd0e
    40e4:	3b0b3a08 	blcc	2d290c <_Min_Stack_Size+0x2d270c>
    40e8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    40ec:	0f00000b 	svceq	0x0000000b
    40f0:	0b0b000f 	bleq	2c4134 <_Min_Stack_Size+0x2c3f34>
    40f4:	00001349 	andeq	r1, r0, r9, asr #6
    40f8:	03011310 	movweq	r1, #4880	; 0x1310
    40fc:	3a0b0b0e 	bcc	2c6d3c <_Min_Stack_Size+0x2c6b3c>
    4100:	01053b0b 	tsteq	r5, fp, lsl #22
    4104:	11000013 	tstne	r0, r3, lsl r0
    4108:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    410c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4110:	0b381349 	bleq	e08e3c <_Min_Stack_Size+0xe08c3c>
    4114:	0d120000 	ldceq	0, cr0, [r2, #-0]
    4118:	3a080300 	bcc	204d20 <_Min_Stack_Size+0x204b20>
    411c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4120:	000b3813 	andeq	r3, fp, r3, lsl r8
    4124:	01151300 	tsteq	r5, r0, lsl #6
    4128:	13491927 	movtne	r1, #39207	; 0x9927
    412c:	00001301 	andeq	r1, r0, r1, lsl #6
    4130:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    4134:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    4138:	13490026 	movtne	r0, #36902	; 0x9026
    413c:	15160000 	ldrne	r0, [r6, #-0]
    4140:	01192701 	tsteq	r9, r1, lsl #14
    4144:	17000013 	smladne	r0, r3, r0, r0
    4148:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    414c:	0b3a0e03 	bleq	e87960 <_Min_Stack_Size+0xe87760>
    4150:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    4154:	01111349 	tsteq	r1, r9, asr #6
    4158:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    415c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    4160:	18000013 	stmdane	r0, {r0, r1, r4}
    4164:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    4168:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    416c:	17021349 	strne	r1, [r2, -r9, asr #6]
    4170:	05190000 	ldreq	r0, [r9, #-0]
    4174:	3a080300 	bcc	204d7c <_Min_Stack_Size+0x204b7c>
    4178:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    417c:	00170213 	andseq	r0, r7, r3, lsl r2
    4180:	00341a00 	eorseq	r1, r4, r0, lsl #20
    4184:	0b3a0803 	bleq	e86198 <_Min_Stack_Size+0xe85f98>
    4188:	1349053b 	movtne	r0, #38203	; 0x953b
    418c:	00001702 	andeq	r1, r0, r2, lsl #14
    4190:	0300341b 	movweq	r3, #1051	; 0x41b
    4194:	3b0b3a0e 	blcc	2d29d4 <_Min_Stack_Size+0x2d27d4>
    4198:	00134905 	andseq	r4, r3, r5, lsl #18
    419c:	82891c00 	addhi	r1, r9, #0, 24
    41a0:	01110101 	tsteq	r1, r1, lsl #2
    41a4:	13011331 	movwne	r1, #4913	; 0x1331
    41a8:	8a1d0000 	bhi	7441b0 <_Min_Stack_Size+0x743fb0>
    41ac:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    41b0:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    41b4:	891e0000 	ldmdbhi	lr, {}	; <UNPREDICTABLE>
    41b8:	11000182 	smlabbne	r0, r2, r1, r0
    41bc:	00133101 	andseq	r3, r3, r1, lsl #2
    41c0:	82891f00 	addhi	r1, r9, #0, 30
    41c4:	01110101 	tsteq	r1, r1, lsl #2
    41c8:	31194295 			; <UNDEFINED> instruction: 0x31194295
    41cc:	20000013 	andcs	r0, r0, r3, lsl r0
    41d0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    41d4:	0e6e193c 			; <UNDEFINED> instruction: 0x0e6e193c
    41d8:	0b3a0e03 	bleq	e879ec <_Min_Stack_Size+0xe877ec>
    41dc:	00000b3b 	andeq	r0, r0, fp, lsr fp
    41e0:	01110100 	tsteq	r1, r0, lsl #2
    41e4:	0b130e25 	bleq	4c7a80 <_Min_Stack_Size+0x4c7880>
    41e8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    41ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
    41f0:	00001710 	andeq	r1, r0, r0, lsl r7
    41f4:	0b002402 	bleq	d204 <_Min_Stack_Size+0xd004>
    41f8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    41fc:	0300000e 	movweq	r0, #14
    4200:	0b0b0024 	bleq	2c4298 <_Min_Stack_Size+0x2c4098>
    4204:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    4208:	16040000 	strne	r0, [r4], -r0
    420c:	3a0e0300 	bcc	384e14 <_Min_Stack_Size+0x384c14>
    4210:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4214:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    4218:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    421c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4220:	00001349 	andeq	r1, r0, r9, asr #6
    4224:	0b011706 	bleq	49e44 <_Min_Stack_Size+0x49c44>
    4228:	3b0b3a0b 	blcc	2d2a5c <_Min_Stack_Size+0x2d285c>
    422c:	0013010b 	andseq	r0, r3, fp, lsl #2
    4230:	000d0700 	andeq	r0, sp, r0, lsl #14
    4234:	0b3a0e03 	bleq	e87a48 <_Min_Stack_Size+0xe87848>
    4238:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    423c:	01080000 	mrseq	r0, (UNDEF: 8)
    4240:	01134901 	tsteq	r3, r1, lsl #18
    4244:	09000013 	stmdbeq	r0, {r0, r1, r4}
    4248:	13490021 	movtne	r0, #36897	; 0x9021
    424c:	00000b2f 	andeq	r0, r0, pc, lsr #22
    4250:	0b01130a 	bleq	48e80 <_Min_Stack_Size+0x48c80>
    4254:	3b0b3a0b 	blcc	2d2a88 <_Min_Stack_Size+0x2d2888>
    4258:	0013010b 	andseq	r0, r3, fp, lsl #2
    425c:	000d0b00 	andeq	r0, sp, r0, lsl #22
    4260:	0b3a0e03 	bleq	e87a74 <_Min_Stack_Size+0xe87874>
    4264:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    4268:	00000b38 	andeq	r0, r0, r8, lsr fp
    426c:	0b000f0c 	bleq	7ea4 <_Min_Stack_Size+0x7ca4>
    4270:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    4274:	0b0b000f 	bleq	2c42b8 <_Min_Stack_Size+0x2c40b8>
    4278:	00001349 	andeq	r1, r0, r9, asr #6
    427c:	0301130e 	movweq	r1, #4878	; 0x130e
    4280:	3a0b0b0e 	bcc	2c6ec0 <_Min_Stack_Size+0x2c6cc0>
    4284:	010b3b0b 	tsteq	fp, fp, lsl #22
    4288:	0f000013 	svceq	0x00000013
    428c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    4290:	0b3b0b3a 	bleq	ec6f80 <_Min_Stack_Size+0xec6d80>
    4294:	0b381349 	bleq	e08fc0 <_Min_Stack_Size+0xe08dc0>
    4298:	13100000 	tstne	r0, #0
    429c:	0b0e0301 	bleq	384ea8 <_Min_Stack_Size+0x384ca8>
    42a0:	3b0b3a0b 	blcc	2d2ad4 <_Min_Stack_Size+0x2d28d4>
    42a4:	00130105 	andseq	r0, r3, r5, lsl #2
    42a8:	000d1100 	andeq	r1, sp, r0, lsl #2
    42ac:	0b3a0e03 	bleq	e87ac0 <_Min_Stack_Size+0xe878c0>
    42b0:	1349053b 	movtne	r0, #38203	; 0x953b
    42b4:	00000b38 	andeq	r0, r0, r8, lsr fp
    42b8:	03000d12 	movweq	r0, #3346	; 0xd12
    42bc:	3b0b3a08 	blcc	2d2ae4 <_Min_Stack_Size+0x2d28e4>
    42c0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    42c4:	1300000b 	movwne	r0, #11
    42c8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    42cc:	13011349 	movwne	r1, #4937	; 0x1349
    42d0:	05140000 	ldreq	r0, [r4, #-0]
    42d4:	00134900 	andseq	r4, r3, r0, lsl #18
    42d8:	00261500 	eoreq	r1, r6, r0, lsl #10
    42dc:	00001349 	andeq	r1, r0, r9, asr #6
    42e0:	27011516 	smladcs	r1, r6, r5, r1
    42e4:	00130119 	andseq	r0, r3, r9, lsl r1
    42e8:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
    42ec:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    42f0:	0b3b0b3a 	bleq	ec6fe0 <_Min_Stack_Size+0xec6de0>
    42f4:	01111927 	tsteq	r1, r7, lsr #18
    42f8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    42fc:	01194297 			; <UNDEFINED> instruction: 0x01194297
    4300:	18000013 	stmdane	r0, {r0, r1, r4}
    4304:	08030005 	stmdaeq	r3, {r0, r2}
    4308:	0b3b0b3a 	bleq	ec6ff8 <_Min_Stack_Size+0xec6df8>
    430c:	17021349 	strne	r1, [r2, -r9, asr #6]
    4310:	05190000 	ldreq	r0, [r9, #-0]
    4314:	3a0e0300 	bcc	384f1c <_Min_Stack_Size+0x384d1c>
    4318:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    431c:	00170213 	andseq	r0, r7, r3, lsl r2
    4320:	82891a00 	addhi	r1, r9, #0, 20
    4324:	01110101 	tsteq	r1, r1, lsl #2
    4328:	13011331 	movwne	r1, #4913	; 0x1331
    432c:	8a1b0000 	bhi	6c4334 <_Min_Stack_Size+0x6c4134>
    4330:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    4334:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    4338:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
    433c:	11010182 	smlabbne	r1, r2, r1, r0
    4340:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    4344:	00001331 	andeq	r1, r0, r1, lsr r3
    4348:	3f012e1d 	svccc	0x00012e1d
    434c:	3a0e0319 	bcc	384fb8 <_Min_Stack_Size+0x384db8>
    4350:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    4354:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    4358:	97184006 	ldrls	r4, [r8, -r6]
    435c:	13011942 	movwne	r1, #6466	; 0x1942
    4360:	0b1e0000 	bleq	784368 <_Min_Stack_Size+0x784168>
    4364:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    4368:	00130106 	andseq	r0, r3, r6, lsl #2
    436c:	00341f00 	eorseq	r1, r4, r0, lsl #30
    4370:	0b3a0803 	bleq	e86384 <_Min_Stack_Size+0xe86184>
    4374:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    4378:	34200000 	strtcc	r0, [r0], #-0
    437c:	3a0e0300 	bcc	384f84 <_Min_Stack_Size+0x384d84>
    4380:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4384:	00170213 	andseq	r0, r7, r3, lsl r2
    4388:	82892100 	addhi	r2, r9, #0, 2
    438c:	01110101 	tsteq	r1, r1, lsl #2
    4390:	00001331 	andeq	r1, r0, r1, lsr r3
    4394:	01828922 	orreq	r8, r2, r2, lsr #18
    4398:	01011101 	tsteq	r1, r1, lsl #2
    439c:	23000013 	movwcs	r0, #19
    43a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    43a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    43a8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    43ac:	0000193c 	andeq	r1, r0, ip, lsr r9
    43b0:	03003424 	movweq	r3, #1060	; 0x424
    43b4:	3b0b3a0e 	blcc	2d2bf4 <_Min_Stack_Size+0x2d29f4>
    43b8:	3f13490b 	svccc	0x0013490b
    43bc:	00180219 	andseq	r0, r8, r9, lsl r2
    43c0:	002e2500 	eoreq	r2, lr, r0, lsl #10
    43c4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    43c8:	0e030e6e 	cdpeq	14, 0, cr0, cr3, cr14, {3}
    43cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    43d0:	01000000 	mrseq	r0, (UNDEF: 0)
    43d4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    43d8:	0e030b13 	vmoveq.32	d3[0], r0
    43dc:	01110e1b 	tsteq	r1, fp, lsl lr
    43e0:	17100612 			; <UNDEFINED> instruction: 0x17100612
    43e4:	24020000 	strcs	r0, [r2], #-0
    43e8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    43ec:	000e030b 	andeq	r0, lr, fp, lsl #6
    43f0:	00240300 	eoreq	r0, r4, r0, lsl #6
    43f4:	0b3e0b0b 	bleq	f87028 <_Min_Stack_Size+0xf86e28>
    43f8:	00000803 	andeq	r0, r0, r3, lsl #16
    43fc:	03001604 	movweq	r1, #1540	; 0x604
    4400:	3b0b3a0e 	blcc	2d2c40 <_Min_Stack_Size+0x2d2a40>
    4404:	0013490b 	andseq	r4, r3, fp, lsl #18
    4408:	000f0500 	andeq	r0, pc, r0, lsl #10
    440c:	00000b0b 	andeq	r0, r0, fp, lsl #22
    4410:	03001606 	movweq	r1, #1542	; 0x606
    4414:	3b0b3a0e 	blcc	2d2c54 <_Min_Stack_Size+0x2d2a54>
    4418:	00134905 	andseq	r4, r3, r5, lsl #18
    441c:	01170700 	tsteq	r7, r0, lsl #14
    4420:	0b3a0b0b 	bleq	e87054 <_Min_Stack_Size+0xe86e54>
    4424:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    4428:	0d080000 	stceq	0, cr0, [r8, #-0]
    442c:	3a0e0300 	bcc	385034 <_Min_Stack_Size+0x384e34>
    4430:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4434:	09000013 	stmdbeq	r0, {r0, r1, r4}
    4438:	13490101 	movtne	r0, #37121	; 0x9101
    443c:	00001301 	andeq	r1, r0, r1, lsl #6
    4440:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
    4444:	000b2f13 	andeq	r2, fp, r3, lsl pc
    4448:	01130b00 	tsteq	r3, r0, lsl #22
    444c:	0b3a0b0b 	bleq	e87080 <_Min_Stack_Size+0xe86e80>
    4450:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    4454:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    4458:	3a0e0300 	bcc	385060 <_Min_Stack_Size+0x384e60>
    445c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4460:	000b3813 	andeq	r3, fp, r3, lsl r8
    4464:	01130d00 	tsteq	r3, r0, lsl #26
    4468:	0b0b0e03 	bleq	2c7c7c <_Min_Stack_Size+0x2c7a7c>
    446c:	0b3b0b3a 	bleq	ec715c <_Min_Stack_Size+0xec6f5c>
    4470:	00001301 	andeq	r1, r0, r1, lsl #6
    4474:	03000d0e 	movweq	r0, #3342	; 0xd0e
    4478:	3b0b3a08 	blcc	2d2ca0 <_Min_Stack_Size+0x2d2aa0>
    447c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4480:	0f00000b 	svceq	0x0000000b
    4484:	0b0b000f 	bleq	2c44c8 <_Min_Stack_Size+0x2c42c8>
    4488:	00001349 	andeq	r1, r0, r9, asr #6
    448c:	03011310 	movweq	r1, #4880	; 0x1310
    4490:	3a0b0b0e 	bcc	2c70d0 <_Min_Stack_Size+0x2c6ed0>
    4494:	01053b0b 	tsteq	r5, fp, lsl #22
    4498:	11000013 	tstne	r0, r3, lsl r0
    449c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    44a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    44a4:	0b381349 	bleq	e091d0 <_Min_Stack_Size+0xe08fd0>
    44a8:	0d120000 	ldceq	0, cr0, [r2, #-0]
    44ac:	3a080300 	bcc	2050b4 <_Min_Stack_Size+0x204eb4>
    44b0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    44b4:	000b3813 	andeq	r3, fp, r3, lsl r8
    44b8:	01151300 	tsteq	r5, r0, lsl #6
    44bc:	13491927 	movtne	r1, #39207	; 0x9927
    44c0:	00001301 	andeq	r1, r0, r1, lsl #6
    44c4:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    44c8:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    44cc:	13490026 	movtne	r0, #36902	; 0x9026
    44d0:	15160000 	ldrne	r0, [r6, #-0]
    44d4:	01192701 	tsteq	r9, r1, lsl #14
    44d8:	17000013 	smladne	r0, r3, r0, r0
    44dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    44e0:	0b3a0e03 	bleq	e87cf4 <_Min_Stack_Size+0xe87af4>
    44e4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    44e8:	01111349 	tsteq	r1, r9, asr #6
    44ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    44f0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    44f4:	18000013 	stmdane	r0, {r0, r1, r4}
    44f8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    44fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4500:	17021349 	strne	r1, [r2, -r9, asr #6]
    4504:	05190000 	ldreq	r0, [r9, #-0]
    4508:	3a080300 	bcc	205110 <_Min_Stack_Size+0x204f10>
    450c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4510:	00170213 	andseq	r0, r7, r3, lsl r2
    4514:	00341a00 	eorseq	r1, r4, r0, lsl #20
    4518:	0b3a0803 	bleq	e8652c <_Min_Stack_Size+0xe8632c>
    451c:	1349053b 	movtne	r0, #38203	; 0x953b
    4520:	00001702 	andeq	r1, r0, r2, lsl #14
    4524:	0300341b 	movweq	r3, #1051	; 0x41b
    4528:	3b0b3a0e 	blcc	2d2d68 <_Min_Stack_Size+0x2d2b68>
    452c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    4530:	00000017 	andeq	r0, r0, r7, lsl r0
    4534:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    4538:	030b130e 	movweq	r1, #45838	; 0xb30e
    453c:	110e1b0e 	tstne	lr, lr, lsl #22
    4540:	10061201 	andne	r1, r6, r1, lsl #4
    4544:	02000017 	andeq	r0, r0, #23
    4548:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    454c:	0b3a0e03 	bleq	e87d60 <_Min_Stack_Size+0xe87b60>
    4550:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    4554:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4558:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    455c:	00130119 	andseq	r0, r3, r9, lsl r1
    4560:	00050300 	andeq	r0, r5, r0, lsl #6
    4564:	0b3a0e03 	bleq	e87d78 <_Min_Stack_Size+0xe87b78>
    4568:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    456c:	00001702 	andeq	r1, r0, r2, lsl #14
    4570:	03003404 	movweq	r3, #1028	; 0x404
    4574:	3b0b3a08 	blcc	2d2d9c <_Min_Stack_Size+0x2d2b9c>
    4578:	3f13490b 	svccc	0x0013490b
    457c:	00193c19 	andseq	r3, r9, r9, lsl ip
    4580:	00340500 	eorseq	r0, r4, r0, lsl #10
    4584:	0b3a0e03 	bleq	e87d98 <_Min_Stack_Size+0xe87b98>
    4588:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    458c:	00001802 	andeq	r1, r0, r2, lsl #16
    4590:	0b000f06 	bleq	81b0 <_Min_Stack_Size+0x7fb0>
    4594:	0700000b 	streq	r0, [r0, -fp]
    4598:	0b0b0024 	bleq	2c4630 <_Min_Stack_Size+0x2c4430>
    459c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    45a0:	24080000 	strcs	r0, [r8], #-0
    45a4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    45a8:	000e030b 	andeq	r0, lr, fp, lsl #6
    45ac:	000f0900 	andeq	r0, pc, r0, lsl #18
    45b0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    45b4:	Address 0x00000000000045b4 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
{
       0:	00000034 	andeq	r0, r0, r4, lsr r0
}
       4:	00000002 	andeq	r0, r0, r2
       8:	00040000 	andeq	r0, r4, r0
       c:	00000000 	andeq	r0, r0, r0
      10:	080012e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip}
      14:	00000068 	andeq	r0, r0, r8, rrx
      18:	00000000 	andeq	r0, r0, r0
    bitstatus = SET;
      1c:	000000d8 	ldrdeq	r0, [r0], -r8
    bitstatus = RESET;
      20:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
  return bitstatus;
      24:	0000000c 	andeq	r0, r0, ip
}
      28:	08001358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip}
      2c:	00000100 	andeq	r0, r0, r0, lsl #2
	...
      38:	00000054 	andeq	r0, r0, r4, asr r0
      3c:	04470002 	strbeq	r0, [r7], #-2
      40:	00040000 	andeq	r0, r4, r0
      44:	00000000 	andeq	r0, r0, r0
      48:	08001458 	stmdaeq	r0, {r3, r4, r6, sl, ip}
      4c:	0000007c 	andeq	r0, r0, ip, ror r0
      50:	080014d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, ip}
      54:	00000064 	andeq	r0, r0, r4, rrx
      58:	08001538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip}
      5c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
      60:	080015e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip}
            I2C_SendData(OLED_HARDWARE, BMP[j++]);
      64:	0000009c 	muleq	r0, ip, r0
      68:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
      6c:	00000088 	andeq	r0, r0, r8, lsl #1
      70:	0800170c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip}
      74:	000001ac 	andeq	r0, r0, ip, lsr #3
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);    	
      78:	080018b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, ip}
      7c:	00000084 	andeq	r0, r0, r4, lsl #1
      80:	00000000 	andeq	r0, r0, r0
      84:	000000c8 	andeq	r0, r0, r8, asr #1
	...
        for(x=x0;x<x1;x++){ 
      90:	00000074 	andeq	r0, r0, r4, ror r0
      94:	09a30002 	stmibeq	r3!, {r1}
        _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
      98:	00040000 	andeq	r0, r4, r0
      9c:	00000000 	andeq	r0, r0, r0
      a0:	0800193c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip}
      a4:	00000208 	andeq	r0, r0, r8, lsl #4
	for(y=y0;y<y1;y++){
      a8:	08001b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip}
      ac:	000000b8 	strheq	r0, [r0], -r8
      b0:	00000000 	andeq	r0, r0, r0
}
      b4:	000000ca 	andeq	r0, r0, sl, asr #1
      b8:	08001bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip}
      bc:	0000016c 	andeq	r0, r0, ip, ror #2
      c0:	00000000 	andeq	r0, r0, r0
      c4:	000000ec 	andeq	r0, r0, ip, ror #1
      c8:	08001d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip}
      cc:	000001f4 	strdeq	r0, [r0], -r4
      d0:	08001f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip}
      d4:	0000016c 	andeq	r0, r0, ip, ror #2
      d8:	080020c8 	stmdaeq	r0, {r3, r6, r7, sp}
      dc:	00000208 	andeq	r0, r0, r8, lsl #4
      e0:	080022d0 	stmdaeq	r0, {r4, r6, r7, r9, sp}
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      e4:	000002fc 	strdeq	r0, [r0], -ip
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      e8:	080025cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, sp}
      ec:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
      f0:	00000000 	andeq	r0, r0, r0
				prvUnlockQueue( pxQueue );
      f4:	00000204 	andeq	r0, r0, r4, lsl #4
      f8:	00000000 	andeq	r0, r0, r0
				if( xTaskResumeAll() == pdFALSE )
      fc:	00000220 	andeq	r0, r0, r0, lsr #4
	...
					portYIELD_WITHIN_API();
     108:	0000011c 	andeq	r0, r0, ip, lsl r1
     10c:	0fbf0002 	svceq	0x00bf0002
     110:	00040000 	andeq	r0, r4, r0
     114:	00000000 	andeq	r0, r0, r0
				prvUnlockQueue( pxQueue );
     118:	0800277c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, sp}
				( void ) xTaskResumeAll();
     11c:	0000000c 	andeq	r0, r0, ip
     120:	08002788 	stmdaeq	r0, {r3, r7, r8, r9, sl, sp}
			prvUnlockQueue( pxQueue );
     124:	0000000c 	andeq	r0, r0, ip
			( void ) xTaskResumeAll();
     128:	08002794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, sp}
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     12c:	0000000c 	andeq	r0, r0, ip
     130:	080027a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, sp}
     134:	0000000c 	andeq	r0, r0, ip
     138:	080027ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, sp}
}
     13c:	00000018 	andeq	r0, r0, r8, lsl r0
     140:	080027c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, sp}
     144:	0000001c 	andeq	r0, r0, ip, lsl r0
     148:	080027e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, sp}
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     14c:	0000000e 	andeq	r0, r0, lr
  SPIx->I2SCFGR = tmpreg;   
     150:	080027f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, sp}
     154:	00000014 	andeq	r0, r0, r4, lsl r0
}
     158:	08002804 	stmdaeq	r0, {r2, fp, sp}
     15c:	00000048 	andeq	r0, r0, r8, asr #32
     160:	0800284c 	stmdaeq	r0, {r2, r3, r6, fp, sp}
     164:	00000048 	andeq	r0, r0, r8, asr #32
         *(uint16_t*) arg = getSn_KPALVTR(sn);
     168:	00000000 	andeq	r0, r0, r0
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     16c:	00000054 	andeq	r0, r0, r4, asr r0
     170:	08002894 	stmdaeq	r0, {r2, r4, r7, fp, sp}
     174:	00000054 	andeq	r0, r0, r4, asr r0
     178:	080028e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, sp}
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     17c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     180:	08002aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, sp}
     184:	0000007c 	andeq	r0, r0, ip, ror r0
     188:	08002b20 	stmdaeq	r0, {r5, r8, r9, fp, sp}
         *(uint8_t*) arg = getSn_SR(sn);
     18c:	00000098 	muleq	r0, r8, r0
     190:	08002bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, sp}
     194:	00000118 	andeq	r0, r0, r8, lsl r1
     198:	08002cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, sp}
     19c:	0000003c 	andeq	r0, r0, ip, lsr r0
     1a0:	08002d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, sp}
     1a4:	0000004a 	andeq	r0, r0, sl, asr #32
         if(getSn_MR(sn) == Sn_MR_TCP)
     1a8:	08002d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, sp}
     1ac:	00000036 	andeq	r0, r0, r6, lsr r0
     1b0:	08002d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, sp}
     1b4:	00000046 	andeq	r0, r0, r6, asr #32
     1b8:	08002dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, sp}
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1bc:	0000002e 	andeq	r0, r0, lr, lsr #32
     1c0:	08002e08 	stmdaeq	r0, {r3, r9, sl, fp, sp}
     1c4:	00000032 	andeq	r0, r0, r2, lsr r0
     1c8:	08002e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, sp}
         break;
     1cc:	0000004e 	andeq	r0, r0, lr, asr #32
            *(uint16_t*)arg = sock_remained_size[sn];
     1d0:	08002e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, sp}
     1d4:	00000084 	andeq	r0, r0, r4, lsl #1
     1d8:	08002f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, sp}
         CHECK_SOCKMODE(Sn_MR_TCP);
     1dc:	00000098 	muleq	r0, r8, r0
     1e0:	00000000 	andeq	r0, r0, r0
     1e4:	00000048 	andeq	r0, r0, r8, asr #32
     1e8:	08002fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp, sp}
     1ec:	00000094 	muleq	r0, r4, r0
     1f0:	0800303c 	stmdaeq	r0, {r2, r3, r4, r5, ip, sp}
     1f4:	00000080 	andeq	r0, r0, r0, lsl #1
     1f8:	080030bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, sp}
         *(uint8_t*)arg = sock_pack_info[sn];
     1fc:	00000080 	andeq	r0, r0, r0, lsl #1
     200:	0800313c 	stmdaeq	r0, {r2, r3, r4, r5, r8, ip, sp}
         break;
     204:	00000044 	andeq	r0, r0, r4, asr #32
         return SOCKERR_SOCKOPT;
     208:	08003180 	stmdaeq	r0, {r7, r8, ip, sp}
   return SOCK_OK;
     20c:	00000010 	andeq	r0, r0, r0, lsl r0
}
     210:	08003190 	stmdaeq	r0, {r4, r7, r8, ip, sp}
     214:	00000042 	andeq	r0, r0, r2, asr #32
     218:	080031d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, ip, sp}
     21c:	00000044 	andeq	r0, r0, r4, asr #32
	...
     228:	0000005c 	andeq	r0, r0, ip, asr r0
	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     22c:	1acd0002 	bne	ff34023c <BootRAM+0xe2b09dd>
     230:	00040000 	andeq	r0, r4, r0
     234:	00000000 	andeq	r0, r0, r0
     238:	08003218 	stmdaeq	r0, {r3, r4, r9, ip, sp}
     23c:	00000060 	andeq	r0, r0, r0, rrx
     240:	08003278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, sp}
     244:	0000006c 	andeq	r0, r0, ip, rrx
     248:	080032e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip, sp}
     24c:	00000088 	andeq	r0, r0, r8, lsl #1
     250:	0800336c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, ip, sp}
	memset(packet, 0, sizeof(packet));
     254:	00000090 	muleq	r0, r0, r0
     258:	080033fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, ip, sp}
     25c:	00000096 	muleq	r0, r6, r0
	memcpy(packet, fixed_header, sizeof(fixed_header));
     260:	08003494 	stmdaeq	r0, {r2, r4, r7, sl, ip, sp}
     264:	00000096 	muleq	r0, r6, r0
     268:	0800352c 	stmdaeq	r0, {r2, r3, r5, r8, sl, ip, sp}
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	000000b8 	strheq	r0, [r0], -r8
     270:	080035e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, ip, sp}
     274:	000000b8 	strheq	r0, [r0], -r8
     278:	0800369c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, sp}
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     27c:	00000090 	muleq	r0, r0, r0
	...
     288:	000000ac 	andeq	r0, r0, ip, lsr #1
     28c:	1fa90002 	svcne	0x00a90002
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     290:	00040000 	andeq	r0, r4, r0
     294:	00000000 	andeq	r0, r0, r0
     298:	0800372c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, ip, sp}
     29c:	0000000c 	andeq	r0, r0, ip
     2a0:	08003738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, sp}
		return -1;
     2a4:	00000028 	andeq	r0, r0, r8, lsr #32
     2a8:	08003760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip, sp}
	return 1;
     2ac:	00000048 	andeq	r0, r0, r8, asr #32
}
     2b0:	080037a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, ip, sp}
     2b4:	000004c8 	andeq	r0, r0, r8, asr #9
     2b8:	08003c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, ip, sp}
     2bc:	00000638 	andeq	r0, r0, r8, lsr r6
     2c0:	080042a8 	stmdaeq	r0, {r3, r5, r7, r9, lr}
     2c4:	0000043c 	andeq	r0, r0, ip, lsr r4
     2c8:	080046e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, lr}
     2cc:	0000029c 	muleq	r0, ip, r2
     2d0:	08004980 	stmdaeq	r0, {r7, r8, fp, lr}
     2d4:	0000022c 	andeq	r0, r0, ip, lsr #4
     2d8:	08004bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, lr}
     2dc:	00000110 	andeq	r0, r0, r0, lsl r1
     2e0:	08004cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, lr}
     2e4:	0000007c 	andeq	r0, r0, ip, ror r0
     2e8:	08004d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, lr}
     2ec:	00000088 	andeq	r0, r0, r8, lsl #1
     2f0:	08004dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, lr}
     2f4:	0000002c 	andeq	r0, r0, ip, lsr #32
     2f8:	08004dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, lr}
     2fc:	0000002c 	andeq	r0, r0, ip, lsr #32
     300:	08004e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, lr}
     304:	0000001c 	andeq	r0, r0, ip, lsl r0
     308:	08004e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, lr}
     30c:	0000003c 	andeq	r0, r0, ip, lsr r0
     310:	08004e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, lr}
     314:	0000003c 	andeq	r0, r0, ip, lsr r0
     318:	08004eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, lr}
     31c:	0000003c 	andeq	r0, r0, ip, lsr r0
     320:	08004ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp, lr}
     324:	0000003c 	andeq	r0, r0, ip, lsr r0
     328:	00000000 	andeq	r0, r0, r0
     32c:	00000014 	andeq	r0, r0, r4, lsl r0
	...
     338:	0000003c 	andeq	r0, r0, ip, lsr r0
     33c:	28df0002 	ldmcs	pc, {r1}^	; <UNPREDICTABLE>
     340:	00040000 	andeq	r0, r4, r0
     344:	00000000 	andeq	r0, r0, r0
     348:	08004f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, lr}
     34c:	0000002e 	andeq	r0, r0, lr, lsr #32
     350:	08004f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, lr}
     354:	0000010c 	andeq	r0, r0, ip, lsl #2
     358:	08005060 	stmdaeq	r0, {r5, r6, ip, lr}
     35c:	00000064 	andeq	r0, r0, r4, rrx
     360:	080050c4 	stmdaeq	r0, {r2, r6, r7, ip, lr}
     364:	000002f6 	strdeq	r0, [r0], -r6
     368:	080053bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, ip, lr}
     36c:	00000176 	andeq	r0, r0, r6, ror r1
	...
     378:	0000004c 	andeq	r0, r0, ip, asr #32
     37c:	2c620002 	stclcs	0, cr0, [r2], #-8
     380:	00040000 	andeq	r0, r4, r0
     384:	00000000 	andeq	r0, r0, r0
     388:	08005534 	stmdaeq	r0, {r2, r4, r5, r8, sl, ip, lr}
     38c:	00000034 	andeq	r0, r0, r4, lsr r0
     390:	08005568 	stmdaeq	r0, {r3, r5, r6, r8, sl, ip, lr}
     394:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     398:	08005724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip, lr}
     39c:	00000104 	andeq	r0, r0, r4, lsl #2
     3a0:	08005828 	stmdaeq	r0, {r3, r5, fp, ip, lr}
     3a4:	00000070 	andeq	r0, r0, r0, ror r0
     3a8:	08005898 	stmdaeq	r0, {r3, r4, r7, fp, ip, lr}
     3ac:	0000005c 	andeq	r0, r0, ip, asr r0
     3b0:	080058f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, lr}
     3b4:	00000048 	andeq	r0, r0, r8, asr #32
     3b8:	0800593c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip, lr}
     3bc:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
     3c8:	0000003c 	andeq	r0, r0, ip, lsr r0
     3cc:	30a50002 	adccc	r0, r5, r2
     3d0:	00040000 	andeq	r0, r4, r0
     3d4:	00000000 	andeq	r0, r0, r0
     3d8:	08005958 	stmdaeq	r0, {r3, r4, r6, r8, fp, ip, lr}
     3dc:	00000024 	andeq	r0, r0, r4, lsr #32
     3e0:	0800597c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, ip, lr}
     3e4:	000000c4 	andeq	r0, r0, r4, asr #1
     3e8:	00000000 	andeq	r0, r0, r0
     3ec:	0000002c 	andeq	r0, r0, ip, lsr #32
     3f0:	00000000 	andeq	r0, r0, r0
     3f4:	00000040 	andeq	r0, r0, r0, asr #32
     3f8:	00000000 	andeq	r0, r0, r0
     3fc:	00000038 	andeq	r0, r0, r8, lsr r0
	...
     408:	00000114 	andeq	r0, r0, r4, lsl r1
     40c:	35970002 	ldrcc	r0, [r7, #2]
     410:	00040000 	andeq	r0, r4, r0
	...
     41c:	0000005c 	andeq	r0, r0, ip, asr r0
     420:	00000000 	andeq	r0, r0, r0
     424:	0000005c 	andeq	r0, r0, ip, asr r0
     428:	00000000 	andeq	r0, r0, r0
     42c:	00000050 	andeq	r0, r0, r0, asr r0
     430:	00000000 	andeq	r0, r0, r0
     434:	0000003c 	andeq	r0, r0, ip, lsr r0
     438:	00000000 	andeq	r0, r0, r0
     43c:	00000020 	andeq	r0, r0, r0, lsr #32
     440:	00000000 	andeq	r0, r0, r0
     444:	0000003c 	andeq	r0, r0, ip, lsr r0
     448:	00000000 	andeq	r0, r0, r0
     44c:	00000020 	andeq	r0, r0, r0, lsr #32
     450:	00000000 	andeq	r0, r0, r0
     454:	00000038 	andeq	r0, r0, r8, lsr r0
     458:	00000000 	andeq	r0, r0, r0
     45c:	0000001c 	andeq	r0, r0, ip, lsl r0
     460:	00000000 	andeq	r0, r0, r0
     464:	00000038 	andeq	r0, r0, r8, lsr r0
     468:	00000000 	andeq	r0, r0, r0
     46c:	00000038 	andeq	r0, r0, r8, lsr r0
     470:	00000000 	andeq	r0, r0, r0
     474:	00000038 	andeq	r0, r0, r8, lsr r0
     478:	00000000 	andeq	r0, r0, r0
     47c:	0000004c 	andeq	r0, r0, ip, asr #32
     480:	00000000 	andeq	r0, r0, r0
     484:	0000001c 	andeq	r0, r0, ip, lsl r0
     488:	00000000 	andeq	r0, r0, r0
     48c:	00000038 	andeq	r0, r0, r8, lsr r0
     490:	08005a40 	stmdaeq	r0, {r6, r9, fp, ip, lr}
     494:	00000040 	andeq	r0, r0, r0, asr #32
     498:	08005a80 	stmdaeq	r0, {r7, r9, fp, ip, lr}
     49c:	00000020 	andeq	r0, r0, r0, lsr #32
     4a0:	08005aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip, lr}
     4a4:	00000024 	andeq	r0, r0, r4, lsr #32
     4a8:	08005ac4 	stmdaeq	r0, {r2, r6, r7, r9, fp, ip, lr}
     4ac:	00000020 	andeq	r0, r0, r0, lsr #32
     4b0:	08005ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, ip, lr}
     4b4:	00000160 	andeq	r0, r0, r0, ror #2
     4b8:	00000000 	andeq	r0, r0, r0
     4bc:	0000003c 	andeq	r0, r0, ip, lsr r0
     4c0:	08005c44 	stmdaeq	r0, {r2, r6, sl, fp, ip, lr}
     4c4:	0000003c 	andeq	r0, r0, ip, lsr r0
     4c8:	08005c80 	stmdaeq	r0, {r7, sl, fp, ip, lr}
     4cc:	0000003c 	andeq	r0, r0, ip, lsr r0
     4d0:	00000000 	andeq	r0, r0, r0
     4d4:	0000003c 	andeq	r0, r0, ip, lsr r0
     4d8:	08005cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip, lr}
     4dc:	0000003c 	andeq	r0, r0, ip, lsr r0
     4e0:	08005cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, ip, lr}
     4e4:	00000020 	andeq	r0, r0, r0, lsr #32
     4e8:	00000000 	andeq	r0, r0, r0
     4ec:	00000020 	andeq	r0, r0, r0, lsr #32
     4f0:	00000000 	andeq	r0, r0, r0
     4f4:	00000020 	andeq	r0, r0, r0, lsr #32
     4f8:	08005d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, ip, lr}
     4fc:	00000074 	andeq	r0, r0, r4, ror r0
     500:	00000000 	andeq	r0, r0, r0
     504:	0000001c 	andeq	r0, r0, ip, lsl r0
     508:	00000000 	andeq	r0, r0, r0
     50c:	00000034 	andeq	r0, r0, r4, lsr r0
     510:	00000000 	andeq	r0, r0, r0
     514:	00000020 	andeq	r0, r0, r0, lsr #32
	...
     520:	000000a4 	andeq	r0, r0, r4, lsr #1
     524:	3e240002 	cdpcc	0, 2, cr0, cr4, cr2, {0}
     528:	00040000 	andeq	r0, r4, r0
	...
     534:	000000e4 	andeq	r0, r0, r4, ror #1
     538:	00000000 	andeq	r0, r0, r0
     53c:	00000018 	andeq	r0, r0, r8, lsl r0
     540:	08005d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp, ip, lr}
     544:	00000178 	andeq	r0, r0, r8, ror r1
     548:	00000000 	andeq	r0, r0, r0
     54c:	00000026 	andeq	r0, r0, r6, lsr #32
     550:	00000000 	andeq	r0, r0, r0
     554:	00000032 	andeq	r0, r0, r2, lsr r0
     558:	00000000 	andeq	r0, r0, r0
     55c:	00000018 	andeq	r0, r0, r8, lsl r0
     560:	00000000 	andeq	r0, r0, r0
     564:	00000032 	andeq	r0, r0, r2, lsr r0
     568:	00000000 	andeq	r0, r0, r0
     56c:	00000018 	andeq	r0, r0, r8, lsl r0
     570:	08005f04 	stmdaeq	r0, {r2, r8, r9, sl, fp, ip, lr}
     574:	0000001c 	andeq	r0, r0, ip, lsl r0
     578:	08005f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip, lr}
     57c:	0000001c 	andeq	r0, r0, ip, lsl r0
     580:	00000000 	andeq	r0, r0, r0
     584:	0000002e 	andeq	r0, r0, lr, lsr #32
     588:	00000000 	andeq	r0, r0, r0
     58c:	0000001c 	andeq	r0, r0, ip, lsl r0
     590:	00000000 	andeq	r0, r0, r0
     594:	00000042 	andeq	r0, r0, r2, asr #32
     598:	00000000 	andeq	r0, r0, r0
     59c:	0000004c 	andeq	r0, r0, ip, asr #32
     5a0:	00000000 	andeq	r0, r0, r0
     5a4:	00000020 	andeq	r0, r0, r0, lsr #32
     5a8:	00000000 	andeq	r0, r0, r0
     5ac:	000000e0 	andeq	r0, r0, r0, ror #1
     5b0:	00000000 	andeq	r0, r0, r0
     5b4:	00000084 	andeq	r0, r0, r4, lsl #1
     5b8:	00000000 	andeq	r0, r0, r0
     5bc:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
     5c8:	000000cc 	andeq	r0, r0, ip, asr #1
     5cc:	45040002 	strmi	r0, [r4, #-2]
     5d0:	00040000 	andeq	r0, r4, r0
	...
     5dc:	00000074 	andeq	r0, r0, r4, ror r0
     5e0:	08005f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, ip, lr}
     5e4:	00000086 	andeq	r0, r0, r6, lsl #1
     5e8:	00000000 	andeq	r0, r0, r0
     5ec:	00000168 	andeq	r0, r0, r8, ror #2
     5f0:	00000000 	andeq	r0, r0, r0
     5f4:	00000048 	andeq	r0, r0, r8, asr #32
     5f8:	00000000 	andeq	r0, r0, r0
     5fc:	00000036 	andeq	r0, r0, r6, lsr r0
     600:	08005fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, ip, lr}
     604:	0000003e 	andeq	r0, r0, lr, lsr r0
     608:	00000000 	andeq	r0, r0, r0
     60c:	0000003e 	andeq	r0, r0, lr, lsr r0
     610:	00000000 	andeq	r0, r0, r0
     614:	00000060 	andeq	r0, r0, r0, rrx
     618:	00000000 	andeq	r0, r0, r0
     61c:	00000046 	andeq	r0, r0, r6, asr #32
     620:	08006004 	stmdaeq	r0, {r2, sp, lr}
     624:	0000001c 	andeq	r0, r0, ip, lsl r0
     628:	08006020 	stmdaeq	r0, {r5, sp, lr}
     62c:	00000018 	andeq	r0, r0, r8, lsl r0
     630:	00000000 	andeq	r0, r0, r0
     634:	00000042 	andeq	r0, r0, r2, asr #32
     638:	00000000 	andeq	r0, r0, r0
     63c:	0000003e 	andeq	r0, r0, lr, lsr r0
     640:	00000000 	andeq	r0, r0, r0
     644:	00000036 	andeq	r0, r0, r6, lsr r0
     648:	00000000 	andeq	r0, r0, r0
     64c:	00000022 	andeq	r0, r0, r2, lsr #32
     650:	00000000 	andeq	r0, r0, r0
     654:	0000003e 	andeq	r0, r0, lr, lsr r0
     658:	00000000 	andeq	r0, r0, r0
     65c:	00000030 	andeq	r0, r0, r0, lsr r0
     660:	00000000 	andeq	r0, r0, r0
     664:	00000018 	andeq	r0, r0, r8, lsl r0
     668:	00000000 	andeq	r0, r0, r0
     66c:	00000040 	andeq	r0, r0, r0, asr #32
     670:	08006038 	stmdaeq	r0, {r3, r4, r5, sp, lr}
     674:	00000036 	andeq	r0, r0, r6, lsr r0
     678:	00000000 	andeq	r0, r0, r0
     67c:	00000020 	andeq	r0, r0, r0, lsr #32
     680:	00000000 	andeq	r0, r0, r0
     684:	00000074 	andeq	r0, r0, r4, ror r0
     688:	00000000 	andeq	r0, r0, r0
     68c:	00000032 	andeq	r0, r0, r2, lsr r0
	...
     698:	000002ec 	andeq	r0, r0, ip, ror #5
     69c:	4de90002 	stclmi	0, cr0, [r9, #8]!
     6a0:	00040000 	andeq	r0, r4, r0
	...
     6ac:	0000022c 	andeq	r0, r0, ip, lsr #4
     6b0:	08006070 	stmdaeq	r0, {r4, r5, r6, sp, lr}
     6b4:	000000f8 	strdeq	r0, [r0], -r8
     6b8:	00000000 	andeq	r0, r0, r0
     6bc:	00000118 	andeq	r0, r0, r8, lsl r1
     6c0:	00000000 	andeq	r0, r0, r0
     6c4:	00000110 	andeq	r0, r0, r0, lsl r1
     6c8:	00000000 	andeq	r0, r0, r0
     6cc:	0000010c 	andeq	r0, r0, ip, lsl #2
     6d0:	00000000 	andeq	r0, r0, r0
     6d4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     6d8:	00000000 	andeq	r0, r0, r0
     6dc:	000000a8 	andeq	r0, r0, r8, lsr #1
     6e0:	00000000 	andeq	r0, r0, r0
     6e4:	000000b8 	strheq	r0, [r0], -r8
     6e8:	00000000 	andeq	r0, r0, r0
     6ec:	0000004e 	andeq	r0, r0, lr, asr #32
     6f0:	00000000 	andeq	r0, r0, r0
     6f4:	00000032 	andeq	r0, r0, r2, lsr r0
     6f8:	00000000 	andeq	r0, r0, r0
     6fc:	00000042 	andeq	r0, r0, r2, asr #32
     700:	00000000 	andeq	r0, r0, r0
     704:	00000030 	andeq	r0, r0, r0, lsr r0
     708:	00000000 	andeq	r0, r0, r0
     70c:	0000003c 	andeq	r0, r0, ip, lsr r0
     710:	08006168 	stmdaeq	r0, {r3, r5, r6, r8, sp, lr}
     714:	0000003e 	andeq	r0, r0, lr, lsr r0
     718:	00000000 	andeq	r0, r0, r0
     71c:	0000004a 	andeq	r0, r0, sl, asr #32
     720:	080061a8 	stmdaeq	r0, {r3, r5, r7, r8, sp, lr}
     724:	00000046 	andeq	r0, r0, r6, asr #32
     728:	00000000 	andeq	r0, r0, r0
     72c:	0000001c 	andeq	r0, r0, ip, lsl r0
     730:	00000000 	andeq	r0, r0, r0
     734:	00000028 	andeq	r0, r0, r8, lsr #32
     738:	00000000 	andeq	r0, r0, r0
     73c:	00000046 	andeq	r0, r0, r6, asr #32
     740:	00000000 	andeq	r0, r0, r0
     744:	00000022 	andeq	r0, r0, r2, lsr #32
     748:	00000000 	andeq	r0, r0, r0
     74c:	0000002e 	andeq	r0, r0, lr, lsr #32
     750:	00000000 	andeq	r0, r0, r0
     754:	0000005c 	andeq	r0, r0, ip, asr r0
     758:	00000000 	andeq	r0, r0, r0
     75c:	0000005e 	andeq	r0, r0, lr, asr r0
     760:	00000000 	andeq	r0, r0, r0
     764:	0000003e 	andeq	r0, r0, lr, lsr r0
     768:	00000000 	andeq	r0, r0, r0
     76c:	00000052 	andeq	r0, r0, r2, asr r0
     770:	00000000 	andeq	r0, r0, r0
     774:	00000026 	andeq	r0, r0, r6, lsr #32
     778:	00000000 	andeq	r0, r0, r0
     77c:	00000036 	andeq	r0, r0, r6, lsr r0
     780:	00000000 	andeq	r0, r0, r0
     784:	00000036 	andeq	r0, r0, r6, lsr r0
     788:	00000000 	andeq	r0, r0, r0
     78c:	00000096 	muleq	r0, r6, r0
     790:	00000000 	andeq	r0, r0, r0
     794:	00000036 	andeq	r0, r0, r6, lsr r0
     798:	00000000 	andeq	r0, r0, r0
     79c:	0000003a 	andeq	r0, r0, sl, lsr r0
     7a0:	00000000 	andeq	r0, r0, r0
     7a4:	00000036 	andeq	r0, r0, r6, lsr r0
     7a8:	00000000 	andeq	r0, r0, r0
     7ac:	0000003a 	andeq	r0, r0, sl, lsr r0
     7b0:	00000000 	andeq	r0, r0, r0
     7b4:	0000003e 	andeq	r0, r0, lr, lsr r0
     7b8:	00000000 	andeq	r0, r0, r0
     7bc:	0000003e 	andeq	r0, r0, lr, lsr r0
     7c0:	00000000 	andeq	r0, r0, r0
     7c4:	0000003e 	andeq	r0, r0, lr, lsr r0
     7c8:	00000000 	andeq	r0, r0, r0
     7cc:	0000003e 	andeq	r0, r0, lr, lsr r0
     7d0:	00000000 	andeq	r0, r0, r0
     7d4:	00000036 	andeq	r0, r0, r6, lsr r0
     7d8:	00000000 	andeq	r0, r0, r0
     7dc:	0000003a 	andeq	r0, r0, sl, lsr r0
     7e0:	00000000 	andeq	r0, r0, r0
     7e4:	00000036 	andeq	r0, r0, r6, lsr r0
     7e8:	00000000 	andeq	r0, r0, r0
     7ec:	0000003a 	andeq	r0, r0, sl, lsr r0
     7f0:	00000000 	andeq	r0, r0, r0
     7f4:	00000036 	andeq	r0, r0, r6, lsr r0
     7f8:	00000000 	andeq	r0, r0, r0
     7fc:	0000003a 	andeq	r0, r0, sl, lsr r0
     800:	00000000 	andeq	r0, r0, r0
     804:	00000036 	andeq	r0, r0, r6, lsr r0
     808:	00000000 	andeq	r0, r0, r0
     80c:	0000003a 	andeq	r0, r0, sl, lsr r0
     810:	00000000 	andeq	r0, r0, r0
     814:	00000036 	andeq	r0, r0, r6, lsr r0
     818:	00000000 	andeq	r0, r0, r0
     81c:	0000003a 	andeq	r0, r0, sl, lsr r0
     820:	00000000 	andeq	r0, r0, r0
     824:	00000036 	andeq	r0, r0, r6, lsr r0
     828:	00000000 	andeq	r0, r0, r0
     82c:	0000003a 	andeq	r0, r0, sl, lsr r0
     830:	00000000 	andeq	r0, r0, r0
     834:	00000036 	andeq	r0, r0, r6, lsr r0
     838:	00000000 	andeq	r0, r0, r0
     83c:	00000036 	andeq	r0, r0, r6, lsr r0
     840:	00000000 	andeq	r0, r0, r0
     844:	0000003a 	andeq	r0, r0, sl, lsr r0
     848:	00000000 	andeq	r0, r0, r0
     84c:	0000003a 	andeq	r0, r0, sl, lsr r0
     850:	00000000 	andeq	r0, r0, r0
     854:	0000003a 	andeq	r0, r0, sl, lsr r0
     858:	00000000 	andeq	r0, r0, r0
     85c:	0000003a 	andeq	r0, r0, sl, lsr r0
     860:	00000000 	andeq	r0, r0, r0
     864:	0000003a 	andeq	r0, r0, sl, lsr r0
     868:	00000000 	andeq	r0, r0, r0
     86c:	00000054 	andeq	r0, r0, r4, asr r0
     870:	00000000 	andeq	r0, r0, r0
     874:	00000054 	andeq	r0, r0, r4, asr r0
     878:	00000000 	andeq	r0, r0, r0
     87c:	000000ac 	andeq	r0, r0, ip, lsr #1
     880:	00000000 	andeq	r0, r0, r0
     884:	0000003e 	andeq	r0, r0, lr, lsr r0
     888:	00000000 	andeq	r0, r0, r0
     88c:	0000003e 	andeq	r0, r0, lr, lsr r0
     890:	00000000 	andeq	r0, r0, r0
     894:	0000003e 	andeq	r0, r0, lr, lsr r0
     898:	00000000 	andeq	r0, r0, r0
     89c:	00000036 	andeq	r0, r0, r6, lsr r0
     8a0:	00000000 	andeq	r0, r0, r0
     8a4:	00000036 	andeq	r0, r0, r6, lsr r0
     8a8:	00000000 	andeq	r0, r0, r0
     8ac:	00000036 	andeq	r0, r0, r6, lsr r0
     8b0:	00000000 	andeq	r0, r0, r0
     8b4:	00000036 	andeq	r0, r0, r6, lsr r0
     8b8:	00000000 	andeq	r0, r0, r0
     8bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     8c0:	00000000 	andeq	r0, r0, r0
     8c4:	0000001c 	andeq	r0, r0, ip, lsl r0
     8c8:	00000000 	andeq	r0, r0, r0
     8cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     8d0:	00000000 	andeq	r0, r0, r0
     8d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     8d8:	00000000 	andeq	r0, r0, r0
     8dc:	0000001c 	andeq	r0, r0, ip, lsl r0
     8e0:	00000000 	andeq	r0, r0, r0
     8e4:	0000001e 	andeq	r0, r0, lr, lsl r0
     8e8:	00000000 	andeq	r0, r0, r0
     8ec:	00000036 	andeq	r0, r0, r6, lsr r0
     8f0:	00000000 	andeq	r0, r0, r0
     8f4:	0000003a 	andeq	r0, r0, sl, lsr r0
     8f8:	00000000 	andeq	r0, r0, r0
     8fc:	00000036 	andeq	r0, r0, r6, lsr r0
     900:	00000000 	andeq	r0, r0, r0
     904:	0000003a 	andeq	r0, r0, sl, lsr r0
     908:	00000000 	andeq	r0, r0, r0
     90c:	00000036 	andeq	r0, r0, r6, lsr r0
     910:	00000000 	andeq	r0, r0, r0
     914:	00000018 	andeq	r0, r0, r8, lsl r0
     918:	00000000 	andeq	r0, r0, r0
     91c:	00000018 	andeq	r0, r0, r8, lsl r0
     920:	00000000 	andeq	r0, r0, r0
     924:	00000018 	andeq	r0, r0, r8, lsl r0
     928:	00000000 	andeq	r0, r0, r0
     92c:	0000001a 	andeq	r0, r0, sl, lsl r0
     930:	00000000 	andeq	r0, r0, r0
     934:	00000018 	andeq	r0, r0, r8, lsl r0
     938:	00000000 	andeq	r0, r0, r0
     93c:	00000018 	andeq	r0, r0, r8, lsl r0
     940:	00000000 	andeq	r0, r0, r0
     944:	00000036 	andeq	r0, r0, r6, lsr r0
     948:	00000000 	andeq	r0, r0, r0
     94c:	00000020 	andeq	r0, r0, r0, lsr #32
     950:	080061f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sp, lr}
     954:	00000052 	andeq	r0, r0, r2, asr r0
     958:	08006244 	stmdaeq	r0, {r2, r6, r9, sp, lr}
     95c:	00000020 	andeq	r0, r0, r0, lsr #32
     960:	00000000 	andeq	r0, r0, r0
     964:	000000e0 	andeq	r0, r0, r0, ror #1
     968:	00000000 	andeq	r0, r0, r0
     96c:	000000f4 	strdeq	r0, [r0], -r4
     970:	00000000 	andeq	r0, r0, r0
     974:	000000ec 	andeq	r0, r0, ip, ror #1
     978:	00000000 	andeq	r0, r0, r0
     97c:	000000f8 	strdeq	r0, [r0], -r8
	...
     988:	0000011c 	andeq	r0, r0, ip, lsl r1
     98c:	6a330002 	bvs	cc099c <_Min_Stack_Size+0xcc079c>
     990:	00040000 	andeq	r0, r4, r0
     994:	00000000 	andeq	r0, r0, r0
     998:	08006264 	stmdaeq	r0, {r2, r5, r6, r9, sp, lr}
     99c:	00000048 	andeq	r0, r0, r8, asr #32
     9a0:	080062ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sp, lr}
     9a4:	00000184 	andeq	r0, r0, r4, lsl #3
     9a8:	00000000 	andeq	r0, r0, r0
     9ac:	0000003c 	andeq	r0, r0, ip, lsr r0
     9b0:	08006430 	stmdaeq	r0, {r4, r5, sl, sp, lr}
     9b4:	0000003e 	andeq	r0, r0, lr, lsr r0
     9b8:	00000000 	andeq	r0, r0, r0
     9bc:	0000003e 	andeq	r0, r0, lr, lsr r0
     9c0:	00000000 	andeq	r0, r0, r0
     9c4:	0000003e 	andeq	r0, r0, lr, lsr r0
     9c8:	08006470 	stmdaeq	r0, {r4, r5, r6, sl, sp, lr}
     9cc:	0000003e 	andeq	r0, r0, lr, lsr r0
     9d0:	00000000 	andeq	r0, r0, r0
     9d4:	0000003e 	andeq	r0, r0, lr, lsr r0
     9d8:	00000000 	andeq	r0, r0, r0
     9dc:	0000003e 	andeq	r0, r0, lr, lsr r0
     9e0:	00000000 	andeq	r0, r0, r0
     9e4:	00000042 	andeq	r0, r0, r2, asr #32
     9e8:	00000000 	andeq	r0, r0, r0
     9ec:	0000003e 	andeq	r0, r0, lr, lsr r0
     9f0:	00000000 	andeq	r0, r0, r0
     9f4:	0000003e 	andeq	r0, r0, lr, lsr r0
     9f8:	00000000 	andeq	r0, r0, r0
     9fc:	00000046 	andeq	r0, r0, r6, asr #32
     a00:	080064b0 	stmdaeq	r0, {r4, r5, r7, sl, sp, lr}
     a04:	0000001e 	andeq	r0, r0, lr, lsl r0
     a08:	00000000 	andeq	r0, r0, r0
     a0c:	0000001a 	andeq	r0, r0, sl, lsl r0
     a10:	080064d0 	stmdaeq	r0, {r4, r6, r7, sl, sp, lr}
     a14:	0000003a 	andeq	r0, r0, sl, lsr r0
     a18:	00000000 	andeq	r0, r0, r0
     a1c:	0000002c 	andeq	r0, r0, ip, lsr #32
     a20:	00000000 	andeq	r0, r0, r0
     a24:	00000042 	andeq	r0, r0, r2, asr #32
     a28:	00000000 	andeq	r0, r0, r0
     a2c:	00000040 	andeq	r0, r0, r0, asr #32
     a30:	00000000 	andeq	r0, r0, r0
     a34:	00000040 	andeq	r0, r0, r0, asr #32
     a38:	00000000 	andeq	r0, r0, r0
     a3c:	0000003e 	andeq	r0, r0, lr, lsr r0
     a40:	00000000 	andeq	r0, r0, r0
     a44:	00000040 	andeq	r0, r0, r0, asr #32
     a48:	00000000 	andeq	r0, r0, r0
     a4c:	0000003e 	andeq	r0, r0, lr, lsr r0
     a50:	00000000 	andeq	r0, r0, r0
     a54:	0000001e 	andeq	r0, r0, lr, lsl r0
     a58:	00000000 	andeq	r0, r0, r0
     a5c:	0000003e 	andeq	r0, r0, lr, lsr r0
     a60:	0800650c 	stmdaeq	r0, {r2, r3, r8, sl, sp, lr}
     a64:	0000003e 	andeq	r0, r0, lr, lsr r0
     a68:	00000000 	andeq	r0, r0, r0
     a6c:	00000040 	andeq	r0, r0, r0, asr #32
     a70:	0800654c 	stmdaeq	r0, {r2, r3, r6, r8, sl, sp, lr}
     a74:	0000005e 	andeq	r0, r0, lr, asr r0
     a78:	00000000 	andeq	r0, r0, r0
     a7c:	00000042 	andeq	r0, r0, r2, asr #32
     a80:	080065ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, sp, lr}
     a84:	00000064 	andeq	r0, r0, r4, rrx
     a88:	00000000 	andeq	r0, r0, r0
     a8c:	0000002c 	andeq	r0, r0, ip, lsr #32
     a90:	00000000 	andeq	r0, r0, r0
     a94:	00000058 	andeq	r0, r0, r8, asr r0
     a98:	00000000 	andeq	r0, r0, r0
     a9c:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
     aa8:	00000044 	andeq	r0, r0, r4, asr #32
     aac:	75290002 	strvc	r0, [r9, #-2]!
     ab0:	00040000 	andeq	r0, r4, r0
     ab4:	00000000 	andeq	r0, r0, r0
     ab8:	08006610 	stmdaeq	r0, {r4, r9, sl, sp, lr}
     abc:	00000020 	andeq	r0, r0, r0, lsr #32
     ac0:	08006630 	stmdaeq	r0, {r4, r5, r9, sl, sp, lr}
     ac4:	00000020 	andeq	r0, r0, r0, lsr #32
     ac8:	08006650 	stmdaeq	r0, {r4, r6, r9, sl, sp, lr}
     acc:	00000020 	andeq	r0, r0, r0, lsr #32
     ad0:	08006670 	stmdaeq	r0, {r4, r5, r6, r9, sl, sp, lr}
     ad4:	00000018 	andeq	r0, r0, r8, lsl r0
     ad8:	08006688 	stmdaeq	r0, {r3, r7, r9, sl, sp, lr}
     adc:	00000018 	andeq	r0, r0, r8, lsl r0
     ae0:	00000000 	andeq	r0, r0, r0
     ae4:	00000034 	andeq	r0, r0, r4, lsr r0
	...
     af0:	0000002c 	andeq	r0, r0, ip, lsr #32
     af4:	77210002 	strvc	r0, [r1, -r2]!
     af8:	00040000 	andeq	r0, r4, r0
	...
     b04:	00000018 	andeq	r0, r0, r8, lsl r0
     b08:	00000000 	andeq	r0, r0, r0
     b0c:	00000018 	andeq	r0, r0, r8, lsl r0
     b10:	080066a0 	stmdaeq	r0, {r5, r7, r9, sl, sp, lr}
     b14:	0000003c 	andeq	r0, r0, ip, lsr r0
	...
     b20:	0000006c 	andeq	r0, r0, ip, rrx
     b24:	786d0002 	stmdavc	sp!, {r1}^
     b28:	00040000 	andeq	r0, r4, r0
	...
     b34:	0000000e 	andeq	r0, r0, lr
     b38:	00000000 	andeq	r0, r0, r0
     b3c:	0000000e 	andeq	r0, r0, lr
     b40:	00000000 	andeq	r0, r0, r0
     b44:	0000001c 	andeq	r0, r0, ip, lsl r0
     b48:	080066dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, sp, lr}
     b4c:	00000020 	andeq	r0, r0, r0, lsr #32
     b50:	00000000 	andeq	r0, r0, r0
     b54:	00000020 	andeq	r0, r0, r0, lsr #32
     b58:	00000000 	andeq	r0, r0, r0
     b5c:	00000038 	andeq	r0, r0, r8, lsr r0
     b60:	00000000 	andeq	r0, r0, r0
     b64:	00000020 	andeq	r0, r0, r0, lsr #32
     b68:	00000000 	andeq	r0, r0, r0
     b6c:	00000064 	andeq	r0, r0, r4, rrx
     b70:	00000000 	andeq	r0, r0, r0
     b74:	00000038 	andeq	r0, r0, r8, lsr r0
     b78:	00000000 	andeq	r0, r0, r0
     b7c:	00000034 	andeq	r0, r0, r4, lsr r0
     b80:	00000000 	andeq	r0, r0, r0
     b84:	00000024 	andeq	r0, r0, r4, lsr #32
	...
     b90:	00000074 	andeq	r0, r0, r4, ror r0
     b94:	7c970002 	ldcvc	0, cr0, [r7], {2}
     b98:	00040000 	andeq	r0, r4, r0
     b9c:	00000000 	andeq	r0, r0, r0
     ba0:	080066fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, sp, lr}
     ba4:	00000014 	andeq	r0, r0, r4, lsl r0
     ba8:	00000000 	andeq	r0, r0, r0
     bac:	00000020 	andeq	r0, r0, r0, lsr #32
     bb0:	00000000 	andeq	r0, r0, r0
     bb4:	00000020 	andeq	r0, r0, r0, lsr #32
     bb8:	00000000 	andeq	r0, r0, r0
     bbc:	00000020 	andeq	r0, r0, r0, lsr #32
     bc0:	00000000 	andeq	r0, r0, r0
     bc4:	00000038 	andeq	r0, r0, r8, lsr r0
     bc8:	00000000 	andeq	r0, r0, r0
     bcc:	0000003c 	andeq	r0, r0, ip, lsr r0
     bd0:	00000000 	andeq	r0, r0, r0
     bd4:	00000038 	andeq	r0, r0, r8, lsr r0
     bd8:	00000000 	andeq	r0, r0, r0
     bdc:	00000030 	andeq	r0, r0, r0, lsr r0
     be0:	00000000 	andeq	r0, r0, r0
     be4:	00000018 	andeq	r0, r0, r8, lsl r0
     be8:	00000000 	andeq	r0, r0, r0
     bec:	00000020 	andeq	r0, r0, r0, lsr #32
     bf0:	00000000 	andeq	r0, r0, r0
     bf4:	00000018 	andeq	r0, r0, r8, lsl r0
     bf8:	00000000 	andeq	r0, r0, r0
     bfc:	00000020 	andeq	r0, r0, r0, lsr #32
	...
     c08:	00000084 	andeq	r0, r0, r4, lsl #1
     c0c:	84260002 	strthi	r0, [r6], #-2
     c10:	00040000 	andeq	r0, r4, r0
	...
     c1c:	0000004c 	andeq	r0, r0, ip, asr #32
     c20:	08006710 	stmdaeq	r0, {r4, r8, r9, sl, sp, lr}
     c24:	00000020 	andeq	r0, r0, r0, lsr #32
     c28:	08006730 	stmdaeq	r0, {r4, r5, r8, r9, sl, sp, lr}
     c2c:	00000020 	andeq	r0, r0, r0, lsr #32
     c30:	00000000 	andeq	r0, r0, r0
     c34:	0000002c 	andeq	r0, r0, ip, lsr #32
     c38:	00000000 	andeq	r0, r0, r0
     c3c:	00000030 	andeq	r0, r0, r0, lsr r0
     c40:	08006750 	stmdaeq	r0, {r4, r6, r8, r9, sl, sp, lr}
     c44:	00000034 	andeq	r0, r0, r4, lsr r0
     c48:	00000000 	andeq	r0, r0, r0
     c4c:	00000030 	andeq	r0, r0, r0, lsr r0
     c50:	00000000 	andeq	r0, r0, r0
     c54:	00000038 	andeq	r0, r0, r8, lsr r0
     c58:	08006784 	stmdaeq	r0, {r2, r7, r8, r9, sl, sp, lr}
     c5c:	00000020 	andeq	r0, r0, r0, lsr #32
     c60:	00000000 	andeq	r0, r0, r0
     c64:	00000030 	andeq	r0, r0, r0, lsr r0
     c68:	00000000 	andeq	r0, r0, r0
     c6c:	00000038 	andeq	r0, r0, r8, lsr r0
     c70:	00000000 	andeq	r0, r0, r0
     c74:	0000002c 	andeq	r0, r0, ip, lsr #32
     c78:	00000000 	andeq	r0, r0, r0
     c7c:	00000050 	andeq	r0, r0, r0, asr r0
     c80:	00000000 	andeq	r0, r0, r0
     c84:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
     c90:	0000005c 	andeq	r0, r0, ip, asr r0
     c94:	884c0002 	stmdahi	ip, {r1}^
     c98:	00040000 	andeq	r0, r4, r0
     c9c:	00000000 	andeq	r0, r0, r0
     ca0:	080067a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, sp, lr}
     ca4:	0000000c 	andeq	r0, r0, ip
     ca8:	080067b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, sp, lr}
     cac:	00000006 	andeq	r0, r0, r6
     cb0:	080067b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, sp, lr}
     cb4:	00000006 	andeq	r0, r0, r6
     cb8:	080067c0 	stmdaeq	r0, {r6, r7, r8, r9, sl, sp, lr}
     cbc:	00000006 	andeq	r0, r0, r6
     cc0:	080067c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, sp, lr}
     cc4:	00000006 	andeq	r0, r0, r6
     cc8:	080067d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, sp, lr}
     ccc:	0000000c 	andeq	r0, r0, ip
     cd0:	080067dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, sp, lr}
     cd4:	0000000c 	andeq	r0, r0, ip
     cd8:	080067e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, sp, lr}
     cdc:	00000064 	andeq	r0, r0, r4, rrx
     ce0:	0800684c 	stmdaeq	r0, {r2, r3, r6, fp, sp, lr}
     ce4:	0000000c 	andeq	r0, r0, ip
	...
     cf0:	00000044 	andeq	r0, r0, r4, asr #32
     cf4:	8c140002 	ldchi	0, cr0, [r4], {2}
     cf8:	00040000 	andeq	r0, r4, r0
     cfc:	00000000 	andeq	r0, r0, r0
     d00:	08006858 	stmdaeq	r0, {r3, r4, r6, fp, sp, lr}
     d04:	00000084 	andeq	r0, r0, r4, lsl #1
     d08:	080068dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, sp, lr}
     d0c:	00000048 	andeq	r0, r0, r8, asr #32
     d10:	08006924 	stmdaeq	r0, {r2, r5, r8, fp, sp, lr}
     d14:	000000c4 	andeq	r0, r0, r4, asr #1
     d18:	080069e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, sp, lr}
     d1c:	00000062 	andeq	r0, r0, r2, rrx
     d20:	08006a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp, sp, lr}
     d24:	00000044 	andeq	r0, r0, r4, asr #32
     d28:	08006a90 	stmdaeq	r0, {r4, r7, r9, fp, sp, lr}
     d2c:	0000004a 	andeq	r0, r0, sl, asr #32
	...
     d38:	0000007c 	andeq	r0, r0, ip, ror r0
     d3c:	95e40002 	strbls	r0, [r4, #2]!
     d40:	00040000 	andeq	r0, r4, r0
     d44:	00000000 	andeq	r0, r0, r0
     d48:	08006adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, sp, lr}
     d4c:	00000014 	andeq	r0, r0, r4, lsl r0
     d50:	08006af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, sp, lr}
     d54:	00000014 	andeq	r0, r0, r4, lsl r0
     d58:	08006b04 	stmdaeq	r0, {r2, r8, r9, fp, sp, lr}
     d5c:	00000034 	andeq	r0, r0, r4, lsr r0
     d60:	08006b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, sp, lr}
     d64:	00000030 	andeq	r0, r0, r0, lsr r0
     d68:	08006b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, sp, lr}
     d6c:	0000005c 	andeq	r0, r0, ip, asr r0
     d70:	08006bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp, sp, lr}
     d74:	0000004c 	andeq	r0, r0, ip, asr #32
     d78:	08006c10 	stmdaeq	r0, {r4, sl, fp, sp, lr}
     d7c:	000000e4 	andeq	r0, r0, r4, ror #1
     d80:	08006cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, sp, lr}
     d84:	000001f8 	strdeq	r0, [r0], -r8
     d88:	08006eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, sp, lr}
     d8c:	00000388 	andeq	r0, r0, r8, lsl #7
     d90:	08007274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip, sp, lr}
     d94:	00000328 	andeq	r0, r0, r8, lsr #6
     d98:	0800759c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
     d9c:	000000cc 	andeq	r0, r0, ip, asr #1
     da0:	08007668 	stmdaeq	r0, {r3, r5, r6, r9, sl, ip, sp, lr}
     da4:	0000004c 	andeq	r0, r0, ip, asr #32
     da8:	080076b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, ip, sp, lr}
     dac:	0000001e 	andeq	r0, r0, lr, lsl r0
	...
     db8:	000000a4 	andeq	r0, r0, r4, lsr #1
     dbc:	a0b10002 	adcsge	r0, r1, r2
     dc0:	00040000 	andeq	r0, r4, r0
     dc4:	00000000 	andeq	r0, r0, r0
     dc8:	080076d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, ip, sp, lr}
     dcc:	0000004e 	andeq	r0, r0, lr, asr #32
     dd0:	08007724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip, sp, lr}
     dd4:	00000054 	andeq	r0, r0, r4, asr r0
     dd8:	08007778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, ip, sp, lr}
     ddc:	000000be 	strheq	r0, [r0], -lr
     de0:	00000000 	andeq	r0, r0, r0
     de4:	0000003c 	andeq	r0, r0, ip, lsr r0
     de8:	00000000 	andeq	r0, r0, r0
     dec:	00000064 	andeq	r0, r0, r4, rrx
     df0:	08007838 	stmdaeq	r0, {r3, r4, r5, fp, ip, sp, lr}
     df4:	0000003c 	andeq	r0, r0, ip, lsr r0
     df8:	08007874 	stmdaeq	r0, {r2, r4, r5, r6, fp, ip, sp, lr}
     dfc:	00000092 	muleq	r0, r2, r0
     e00:	08007908 	stmdaeq	r0, {r3, r8, fp, ip, sp, lr}
     e04:	00000080 	andeq	r0, r0, r0, lsl #1
     e08:	08007988 	stmdaeq	r0, {r3, r7, r8, fp, ip, sp, lr}
     e0c:	0000004c 	andeq	r0, r0, ip, asr #32
     e10:	080079d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, sp, lr}
     e14:	0000001e 	andeq	r0, r0, lr, lsl r0
     e18:	080079f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, ip, sp, lr}
     e1c:	000002f2 	strdeq	r0, [r0], -r2
     e20:	00000000 	andeq	r0, r0, r0
     e24:	00000036 	andeq	r0, r0, r6, lsr r0
     e28:	08007ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp, ip, sp, lr}
     e2c:	00000036 	andeq	r0, r0, r6, lsr r0
     e30:	00000000 	andeq	r0, r0, r0
     e34:	0000002e 	andeq	r0, r0, lr, lsr #32
     e38:	00000000 	andeq	r0, r0, r0
     e3c:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     e40:	00000000 	andeq	r0, r0, r0
     e44:	0000004a 	andeq	r0, r0, sl, asr #32
     e48:	08007d20 	stmdaeq	r0, {r5, r8, sl, fp, ip, sp, lr}
     e4c:	00000182 	andeq	r0, r0, r2, lsl #3
     e50:	00000000 	andeq	r0, r0, r0
     e54:	00000182 	andeq	r0, r0, r2, lsl #3
	...
     e60:	0000003c 	andeq	r0, r0, ip, lsr r0
     e64:	aa6f0002 	bge	1bc0e74 <_Min_Stack_Size+0x1bc0c74>
     e68:	00040000 	andeq	r0, r4, r0
     e6c:	00000000 	andeq	r0, r0, r0
     e70:	08007ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, sp, lr}
     e74:	0000003e 	andeq	r0, r0, lr, lsr r0
     e78:	08007ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, ip, sp, lr}
     e7c:	00000018 	andeq	r0, r0, r8, lsl r0
     e80:	08007efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}
     e84:	00000046 	andeq	r0, r0, r6, asr #32
     e88:	08007f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, ip, sp, lr}
     e8c:	00000070 	andeq	r0, r0, r0, ror r0
     e90:	08007fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
     e94:	00000052 	andeq	r0, r0, r2, asr r0
	...
     ea0:	000000dc 	ldrdeq	r0, [r0], -ip
     ea4:	ad1a0002 	ldcge	0, cr0, [sl, #-8]
     ea8:	00040000 	andeq	r0, r4, r0
     eac:	00000000 	andeq	r0, r0, r0
     eb0:	08008008 	stmdaeq	r0, {r3, pc}
     eb4:	000000b4 	strheq	r0, [r0], -r4
     eb8:	080080bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, pc}
     ebc:	0000005c 	andeq	r0, r0, ip, asr r0
     ec0:	08008118 	stmdaeq	r0, {r3, r4, r8, pc}
     ec4:	0000003e 	andeq	r0, r0, lr, lsr r0
     ec8:	08008158 	stmdaeq	r0, {r3, r4, r6, r8, pc}
     ecc:	00000034 	andeq	r0, r0, r4, lsr r0
     ed0:	0800818c 	stmdaeq	r0, {r2, r3, r7, r8, pc}
     ed4:	00000030 	andeq	r0, r0, r0, lsr r0
     ed8:	080081bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, pc}
     edc:	00000154 	andeq	r0, r0, r4, asr r1
     ee0:	00000000 	andeq	r0, r0, r0
     ee4:	000000ae 	andeq	r0, r0, lr, lsr #1
     ee8:	00000000 	andeq	r0, r0, r0
     eec:	000000a6 	andeq	r0, r0, r6, lsr #1
     ef0:	00000000 	andeq	r0, r0, r0
     ef4:	00000144 	andeq	r0, r0, r4, asr #2
     ef8:	08008310 	stmdaeq	r0, {r4, r8, r9, pc}
     efc:	00000190 	muleq	r0, r0, r1
     f00:	00000000 	andeq	r0, r0, r0
     f04:	00000148 	andeq	r0, r0, r8, asr #2
     f08:	00000000 	andeq	r0, r0, r0
     f0c:	000000ac 	andeq	r0, r0, ip, lsr #1
     f10:	00000000 	andeq	r0, r0, r0
     f14:	00000064 	andeq	r0, r0, r4, rrx
     f18:	00000000 	andeq	r0, r0, r0
     f1c:	00000020 	andeq	r0, r0, r0, lsr #32
     f20:	00000000 	andeq	r0, r0, r0
     f24:	0000002a 	andeq	r0, r0, sl, lsr #32
     f28:	00000000 	andeq	r0, r0, r0
     f2c:	0000001e 	andeq	r0, r0, lr, lsl r0
     f30:	00000000 	andeq	r0, r0, r0
     f34:	0000001a 	andeq	r0, r0, sl, lsl r0
     f38:	080084a0 	stmdaeq	r0, {r5, r7, sl, pc}
     f3c:	0000002e 	andeq	r0, r0, lr, lsr #32
     f40:	080084d0 	stmdaeq	r0, {r4, r6, r7, sl, pc}
     f44:	000000d4 	ldrdeq	r0, [r0], -r4
     f48:	00000000 	andeq	r0, r0, r0
     f4c:	0000004c 	andeq	r0, r0, ip, asr #32
     f50:	080085a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, pc}
     f54:	000000a4 	andeq	r0, r0, r4, lsr #1
     f58:	08008648 	stmdaeq	r0, {r3, r6, r9, sl, pc}
     f5c:	0000002c 	andeq	r0, r0, ip, lsr #32
     f60:	00000000 	andeq	r0, r0, r0
     f64:	0000002a 	andeq	r0, r0, sl, lsr #32
     f68:	08008674 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, pc}
     f6c:	00000030 	andeq	r0, r0, r0, lsr r0
     f70:	00000000 	andeq	r0, r0, r0
     f74:	0000002e 	andeq	r0, r0, lr, lsr #32
	...
     f80:	0000018c 	andeq	r0, r0, ip, lsl #3
     f84:	bba40002 	bllt	fe900f94 <BootRAM+0xd871735>
     f88:	00040000 	andeq	r0, r4, r0
     f8c:	00000000 	andeq	r0, r0, r0
     f90:	080086a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, pc}
     f94:	00000082 	andeq	r0, r0, r2, lsl #1
     f98:	08008728 	stmdaeq	r0, {r3, r5, r8, r9, sl, pc}
     f9c:	000000fe 	strdeq	r0, [r0], -lr
     fa0:	08008828 	stmdaeq	r0, {r3, r5, fp, pc}
     fa4:	000000d4 	ldrdeq	r0, [r0], -r4
     fa8:	00000000 	andeq	r0, r0, r0
     fac:	000000a0 	andeq	r0, r0, r0, lsr #1
     fb0:	080088fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, pc}
     fb4:	00000048 	andeq	r0, r0, r8, asr #32
     fb8:	00000000 	andeq	r0, r0, r0
     fbc:	00000034 	andeq	r0, r0, r4, lsr r0
     fc0:	00000000 	andeq	r0, r0, r0
     fc4:	00000054 	andeq	r0, r0, r4, asr r0
     fc8:	00000000 	andeq	r0, r0, r0
     fcc:	00000138 	andeq	r0, r0, r8, lsr r1
     fd0:	00000000 	andeq	r0, r0, r0
     fd4:	00000104 	andeq	r0, r0, r4, lsl #2
     fd8:	00000000 	andeq	r0, r0, r0
     fdc:	00000044 	andeq	r0, r0, r4, asr #32
     fe0:	00000000 	andeq	r0, r0, r0
     fe4:	000000a0 	andeq	r0, r0, r0, lsr #1
     fe8:	00000000 	andeq	r0, r0, r0
     fec:	000000c0 	andeq	r0, r0, r0, asr #1
     ff0:	08008944 	stmdaeq	r0, {r2, r6, r8, fp, pc}
     ff4:	0000006c 	andeq	r0, r0, ip, rrx
     ff8:	00000000 	andeq	r0, r0, r0
     ffc:	00000030 	andeq	r0, r0, r0, lsr r0
    1000:	080089b0 	stmdaeq	r0, {r4, r5, r7, r8, fp, pc}
    1004:	0000001c 	andeq	r0, r0, ip, lsl r0
    1008:	080089cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp, pc}
    100c:	0000011c 	andeq	r0, r0, ip, lsl r1
    1010:	00000000 	andeq	r0, r0, r0
    1014:	0000001c 	andeq	r0, r0, ip, lsl r0
    1018:	00000000 	andeq	r0, r0, r0
    101c:	00000020 	andeq	r0, r0, r0, lsr #32
    1020:	00000000 	andeq	r0, r0, r0
    1024:	00000014 	andeq	r0, r0, r4, lsl r0
    1028:	00000000 	andeq	r0, r0, r0
    102c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1030:	08008ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, pc}
    1034:	00000150 	andeq	r0, r0, r0, asr r1
    1038:	08008c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, pc}
    103c:	000000d8 	ldrdeq	r0, [r0], -r8
    1040:	08008d10 	stmdaeq	r0, {r4, r8, sl, fp, pc}
    1044:	0000002c 	andeq	r0, r0, ip, lsr #32
    1048:	00000000 	andeq	r0, r0, r0
    104c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1050:	08008d3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, fp, pc}
    1054:	000000a8 	andeq	r0, r0, r8, lsr #1
    1058:	00000000 	andeq	r0, r0, r0
    105c:	00000084 	andeq	r0, r0, r4, lsl #1
    1060:	00000000 	andeq	r0, r0, r0
    1064:	00000030 	andeq	r0, r0, r0, lsr r0
    1068:	08008de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, pc}
    106c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1070:	08008e10 	stmdaeq	r0, {r4, r9, sl, fp, pc}
    1074:	0000008c 	andeq	r0, r0, ip, lsl #1
    1078:	08008e9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, fp, pc}
    107c:	00000018 	andeq	r0, r0, r8, lsl r0
    1080:	08008eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, pc}
    1084:	00000030 	andeq	r0, r0, r0, lsr r0
    1088:	08008ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, pc}
    108c:	00000074 	andeq	r0, r0, r4, ror r0
    1090:	08008f58 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, fp, pc}
    1094:	0000000c 	andeq	r0, r0, ip
    1098:	08008f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, pc}
    109c:	00000040 	andeq	r0, r0, r0, asr #32
    10a0:	00000000 	andeq	r0, r0, r0
    10a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    10a8:	08008fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, pc}
    10ac:	00000100 	andeq	r0, r0, r0, lsl #2
    10b0:	080090a4 	stmdaeq	r0, {r2, r5, r7, ip, pc}
    10b4:	000000c8 	andeq	r0, r0, r8, asr #1
    10b8:	0800916c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip, pc}
    10bc:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    10c0:	00000000 	andeq	r0, r0, r0
    10c4:	00000030 	andeq	r0, r0, r0, lsr r0
    10c8:	0800925c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, pc}
    10cc:	00000028 	andeq	r0, r0, r8, lsr #32
    10d0:	00000000 	andeq	r0, r0, r0
    10d4:	00000090 	muleq	r0, r0, r0
    10d8:	00000000 	andeq	r0, r0, r0
    10dc:	000000b4 	strheq	r0, [r0], -r4
    10e0:	00000000 	andeq	r0, r0, r0
    10e4:	00000110 	andeq	r0, r0, r0, lsl r1
    10e8:	00000000 	andeq	r0, r0, r0
    10ec:	0000014c 	andeq	r0, r0, ip, asr #2
    10f0:	00000000 	andeq	r0, r0, r0
    10f4:	000000e4 	andeq	r0, r0, r4, ror #1
    10f8:	00000000 	andeq	r0, r0, r0
    10fc:	0000004c 	andeq	r0, r0, ip, asr #32
    1100:	08009284 	stmdaeq	r0, {r2, r7, r9, ip, pc}
    1104:	000000cc 	andeq	r0, r0, ip, asr #1
	...
    1110:	0000006c 	andeq	r0, r0, ip, rrx
    1114:	d07e0002 	rsbsle	r0, lr, r2
    1118:	00040000 	andeq	r0, r4, r0
    111c:	00000000 	andeq	r0, r0, r0
    1120:	08009350 	stmdaeq	r0, {r4, r6, r8, r9, ip, pc}
    1124:	00000058 	andeq	r0, r0, r8, asr r0
    1128:	080093a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, ip, pc}
    112c:	0000002e 	andeq	r0, r0, lr, lsr #32
    1130:	080093e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip, pc}
    1134:	00000026 	andeq	r0, r0, r6, lsr #32
    1138:	08009408 	stmdaeq	r0, {r3, sl, ip, pc}
    113c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1140:	08009428 	stmdaeq	r0, {r3, r5, sl, ip, pc}
    1144:	00000040 	andeq	r0, r0, r0, asr #32
    1148:	00000000 	andeq	r0, r0, r0
    114c:	0000000c 	andeq	r0, r0, ip
    1150:	08009468 	stmdaeq	r0, {r3, r5, r6, sl, ip, pc}
    1154:	00000030 	andeq	r0, r0, r0, lsr r0
    1158:	08009498 	stmdaeq	r0, {r3, r4, r7, sl, ip, pc}
    115c:	00000030 	andeq	r0, r0, r0, lsr r0
    1160:	080094d0 	stmdaeq	r0, {r4, r6, r7, sl, ip, pc}
    1164:	00000046 	andeq	r0, r0, r6, asr #32
    1168:	08009518 	stmdaeq	r0, {r3, r4, r8, sl, ip, pc}
    116c:	00000040 	andeq	r0, r0, r0, asr #32
    1170:	08009558 	stmdaeq	r0, {r3, r4, r6, r8, sl, ip, pc}
    1174:	00000034 	andeq	r0, r0, r4, lsr r0
	...
    1180:	00000034 	andeq	r0, r0, r4, lsr r0
    1184:	d3600002 	cmnle	r0, #2
    1188:	00040000 	andeq	r0, r4, r0
    118c:	00000000 	andeq	r0, r0, r0
    1190:	0800958c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip, pc}
    1194:	0000008c 	andeq	r0, r0, ip, lsl #1
    1198:	08009618 	stmdaeq	r0, {r3, r4, r9, sl, ip, pc}
    119c:	00000012 	andeq	r0, r0, r2, lsl r0
    11a0:	00000000 	andeq	r0, r0, r0
    11a4:	00000018 	andeq	r0, r0, r8, lsl r0
    11a8:	00000000 	andeq	r0, r0, r0
    11ac:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
    11b8:	0000001c 	andeq	r0, r0, ip, lsl r0
    11bc:	d4df0002 	ldrble	r0, [pc], #2	; 11c4 <_Min_Stack_Size+0xfc4>
    11c0:	00040000 	andeq	r0, r4, r0
    11c4:	00000000 	andeq	r0, r0, r0
    11c8:	08000110 	stmdaeq	r0, {r4, r8}
    11cc:	000000ec 	andeq	r0, r0, ip, ror #1
	...
    11d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    11dc:	d5a60002 	strle	r0, [r6, #2]!
    11e0:	00040000 	andeq	r0, r4, r0
    11e4:	00000000 	andeq	r0, r0, r0
    11e8:	080001fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8}
    11ec:	0000009a 	muleq	r0, sl, r0
	...
    11f8:	0000001c 	andeq	r0, r0, ip, lsl r0
    11fc:	d6c40002 	strble	r0, [r4], r2
    1200:	00040000 	andeq	r0, r4, r0
    1204:	00000000 	andeq	r0, r0, r0
    1208:	08000298 	stmdaeq	r0, {r3, r4, r7, r9}
    120c:	00000104 	andeq	r0, r0, r4, lsl #2
	...
    1218:	0000001c 	andeq	r0, r0, ip, lsl r0
    121c:	dec30002 	cdple	0, 12, cr0, cr3, cr2, {0}
    1220:	00040000 	andeq	r0, r4, r0
    1224:	00000000 	andeq	r0, r0, r0
    1228:	0800039c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9}
    122c:	00000124 	andeq	r0, r0, r4, lsr #2
	...
    1238:	0000001c 	andeq	r0, r0, ip, lsl r0
    123c:	e7cf0002 	strb	r0, [pc, r2]
    1240:	00040000 	andeq	r0, r4, r0
    1244:	00000000 	andeq	r0, r0, r0
    1248:	080004c0 	stmdaeq	r0, {r6, r7, sl}
    124c:	000000ce 	andeq	r0, r0, lr, asr #1
	...
    1258:	0000001c 	andeq	r0, r0, ip, lsl r0
    125c:	e8ec0002 	stmia	ip!, {r1}^
    1260:	00040000 	andeq	r0, r4, r0
    1264:	00000000 	andeq	r0, r0, r0
    1268:	08000590 	stmdaeq	r0, {r4, r7, r8, sl}
    126c:	000000ba 	strheq	r0, [r0], -sl
	...
    1278:	0000001c 	andeq	r0, r0, ip, lsl r0
    127c:	e9b00002 	ldmib	r0!, {r1}
    1280:	00040000 	andeq	r0, r4, r0
    1284:	00000000 	andeq	r0, r0, r0
    1288:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
    128c:	0000005c 	andeq	r0, r0, ip, asr r0
	...
    1298:	0000001c 	andeq	r0, r0, ip, lsl r0
    129c:	ea6c0002 	b	1b012ac <_Min_Stack_Size+0x1b010ac>
    12a0:	00040000 	andeq	r0, r4, r0
    12a4:	00000000 	andeq	r0, r0, r0
    12a8:	080006a8 	stmdaeq	r0, {r3, r5, r7, r9, sl}
    12ac:	0000009c 	muleq	r0, ip, r0
	...
    12b8:	0000001c 	andeq	r0, r0, ip, lsl r0
    12bc:	eb680002 	bl	1a012cc <_Min_Stack_Size+0x1a010cc>
    12c0:	00040000 	andeq	r0, r4, r0
    12c4:	00000000 	andeq	r0, r0, r0
    12c8:	08000744 	stmdaeq	r0, {r2, r6, r8, r9, sl}
    12cc:	00000066 	andeq	r0, r0, r6, rrx
	...
    12d8:	00000014 	andeq	r0, r0, r4, lsl r0
    12dc:	eca10002 	stc	0, cr0, [r1], #8
    12e0:	00040000 	andeq	r0, r4, r0
	...
    12f0:	0000001c 	andeq	r0, r0, ip, lsl r0
    12f4:	f47b0002 			; <UNDEFINED> instruction: 0xf47b0002
    12f8:	00040000 	andeq	r0, r4, r0
    12fc:	00000000 	andeq	r0, r0, r0
    1300:	080007ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl}
    1304:	00000020 	andeq	r0, r0, r0, lsr #32
	...
    1310:	0000001c 	andeq	r0, r0, ip, lsl r0
    1314:	fc2d0002 	stc2	0, cr0, [sp], #-8
    1318:	00040000 	andeq	r0, r4, r0
    131c:	00000000 	andeq	r0, r0, r0
    1320:	080007cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl}
    1324:	0000008c 	andeq	r0, r0, ip, lsl #1
	...
    1330:	0000001c 	andeq	r0, r0, ip, lsl r0
    1334:	04520002 	ldrbeq	r0, [r2], #-2
    1338:	00040001 	andeq	r0, r4, r1
    133c:	00000000 	andeq	r0, r0, r0
    1340:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
    1344:	000000bc 	strheq	r0, [r0], -ip
	...
    1350:	0000001c 	andeq	r0, r0, ip, lsl r0
    1354:	0d3e0002 	ldceq	0, cr0, [lr, #-8]!
    1358:	00040001 	andeq	r0, r4, r1
    135c:	00000000 	andeq	r0, r0, r0
    1360:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
    1364:	00000404 	andeq	r0, r0, r4, lsl #8
	...
    1370:	0000001c 	andeq	r0, r0, ip, lsl r0
    1374:	1a750002 	bne	1d41384 <_Min_Stack_Size+0x1d41184>
    1378:	00040001 	andeq	r0, r4, r1
    137c:	00000000 	andeq	r0, r0, r0
    1380:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
    1384:	000003dc 	ldrdeq	r0, [r0], -ip
	...
    1390:	0000001c 	andeq	r0, r0, ip, lsl r0
    1394:	25b00002 	ldrcs	r0, [r0, #2]!
    1398:	00040001 	andeq	r0, r4, r1
    139c:	00000000 	andeq	r0, r0, r0
    13a0:	080010f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, ip}
    13a4:	00000024 	andeq	r0, r0, r4, lsr #32
	...
    13b0:	0000001c 	andeq	r0, r0, ip, lsl r0
    13b4:	2d510002 	ldclcs	0, cr0, [r1, #-8]
    13b8:	00040001 	andeq	r0, r4, r1
    13bc:	00000000 	andeq	r0, r0, r0
    13c0:	08001118 	stmdaeq	r0, {r3, r4, r8, ip}
    13c4:	0000008c 	andeq	r0, r0, ip, lsl #1
	...
    13d0:	0000001c 	andeq	r0, r0, ip, lsl r0
    13d4:	2e830002 	cdpcs	0, 8, cr0, cr3, cr2, {0}
    13d8:	00040001 	andeq	r0, r4, r1
    13dc:	00000000 	andeq	r0, r0, r0
    13e0:	080011a4 	stmdaeq	r0, {r2, r5, r7, r8, ip}
    13e4:	000000c6 	andeq	r0, r0, r6, asr #1
	...
    13f0:	0000001c 	andeq	r0, r0, ip, lsl r0
    13f4:	2fbb0002 	svccs	0x00bb0002
    13f8:	00040001 	andeq	r0, r4, r1
    13fc:	00000000 	andeq	r0, r0, r0
    1400:	0800126c 	stmdaeq	r0, {r2, r3, r5, r6, r9, ip}
    1404:	00000048 	andeq	r0, r0, r8, asr #32
	...
    1410:	0000001c 	andeq	r0, r0, ip, lsl r0
    1414:	383d0002 	ldmdacc	sp!, {r1}
    1418:	00040001 	andeq	r0, r4, r1
	...
    1424:	000000e0 	andeq	r0, r0, r0, ror #1
	...
    1430:	0000001c 	andeq	r0, r0, ip, lsl r0
    1434:	41390002 	teqmi	r9, r2
    1438:	00040001 	andeq	r0, r4, r1
    143c:	00000000 	andeq	r0, r0, r0
    1440:	080012b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, ip}
    1444:	00000014 	andeq	r0, r0, r4, lsl r0
	...
    1450:	0000001c 	andeq	r0, r0, ip, lsl r0
    1454:	48f90002 	ldmmi	r9!, {r1}^
    1458:	00040001 	andeq	r0, r4, r1
    145c:	00000000 	andeq	r0, r0, r0
    1460:	080012c8 	stmdaeq	r0, {r3, r6, r7, r9, ip}
    1464:	0000001c 	andeq	r0, r0, ip, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
{
       0:	080012e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip}
}
       4:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
       8:	00000001 	andeq	r0, r0, r1
       c:	00000001 	andeq	r0, r0, r1
      10:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
      14:	08001358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip}
      18:	08001358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip}
    bitstatus = SET;
      1c:	08001458 	stmdaeq	r0, {r3, r4, r6, sl, ip}
	...
}
      28:	08001458 	stmdaeq	r0, {r3, r4, r6, sl, ip}
      2c:	080014d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, ip}
      30:	080014d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, ip}
      34:	08001538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip}
      38:	08001538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip}
      3c:	080015e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip}
      40:	080015e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip}
      44:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
      48:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
      4c:	0800170c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip}
      50:	0800170c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip}
      54:	080018b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, ip}
      58:	080018b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, ip}
      5c:	0800193c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip}
      60:	00000001 	andeq	r0, r0, r1
            I2C_SendData(OLED_HARDWARE, BMP[j++]);
      64:	00000001 	andeq	r0, r0, r1
	...
      70:	0800193c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip}
      74:	08001b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip}
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);    	
      78:	08001b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip}
      7c:	08001bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip}
      80:	00000001 	andeq	r0, r0, r1
      84:	00000001 	andeq	r0, r0, r1
        for(x=x0;x<x1;x++){ 
      88:	08001bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip}
      8c:	08001d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip}
      90:	00000001 	andeq	r0, r0, r1
      94:	00000001 	andeq	r0, r0, r1
        _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
      98:	08001d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip}
      9c:	08001f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip}
      a0:	08001f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip}
      a4:	080020c8 	stmdaeq	r0, {r3, r6, r7, sp}
	for(y=y0;y<y1;y++){
      a8:	080020c8 	stmdaeq	r0, {r3, r6, r7, sp}
      ac:	080022d0 	stmdaeq	r0, {r4, r6, r7, r9, sp}
      b0:	080022d0 	stmdaeq	r0, {r4, r6, r7, r9, sp}
}
      b4:	080025cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, sp}
      b8:	080025cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, sp}
      bc:	0800277c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, sp}
      c0:	00000001 	andeq	r0, r0, r1
      c4:	00000001 	andeq	r0, r0, r1
      c8:	00000001 	andeq	r0, r0, r1
      cc:	00000001 	andeq	r0, r0, r1
	...
      d8:	0800277c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, sp}
      dc:	08002788 	stmdaeq	r0, {r3, r7, r8, r9, sl, sp}
      e0:	08002788 	stmdaeq	r0, {r3, r7, r8, r9, sl, sp}
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      e4:	08002794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, sp}
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      e8:	08002794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, sp}
      ec:	080027a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, sp}
      f0:	080027a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, sp}
				prvUnlockQueue( pxQueue );
      f4:	080027ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, sp}
      f8:	080027ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, sp}
				if( xTaskResumeAll() == pdFALSE )
      fc:	080027c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, sp}
     100:	080027c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, sp}
					portYIELD_WITHIN_API();
     104:	080027e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, sp}
     108:	080027e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, sp}
     10c:	080027ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, sp}
     110:	080027f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, sp}
     114:	08002804 	stmdaeq	r0, {r2, fp, sp}
				prvUnlockQueue( pxQueue );
     118:	08002804 	stmdaeq	r0, {r2, fp, sp}
				( void ) xTaskResumeAll();
     11c:	0800284c 	stmdaeq	r0, {r2, r3, r6, fp, sp}
     120:	0800284c 	stmdaeq	r0, {r2, r3, r6, fp, sp}
			prvUnlockQueue( pxQueue );
     124:	08002894 	stmdaeq	r0, {r2, r4, r7, fp, sp}
			( void ) xTaskResumeAll();
     128:	00000001 	andeq	r0, r0, r1
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     12c:	00000001 	andeq	r0, r0, r1
     130:	08002894 	stmdaeq	r0, {r2, r4, r7, fp, sp}
     134:	080028e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, sp}
     138:	080028e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, sp}
}
     13c:	08002aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, sp}
     140:	08002aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, sp}
     144:	08002b20 	stmdaeq	r0, {r5, r8, r9, fp, sp}
     148:	08002b20 	stmdaeq	r0, {r5, r8, r9, fp, sp}
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     14c:	08002bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, sp}
  SPIx->I2SCFGR = tmpreg;   
     150:	08002bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, sp}
     154:	08002cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, sp}
}
     158:	08002cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, sp}
     15c:	08002d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, sp}
     160:	08002d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, sp}
     164:	08002d56 	stmdaeq	r0, {r1, r2, r4, r6, r8, sl, fp, sp}
         *(uint16_t*) arg = getSn_KPALVTR(sn);
     168:	08002d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, sp}
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     16c:	08002d8e 	stmdaeq	r0, {r1, r2, r3, r7, r8, sl, fp, sp}
     170:	08002d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, sp}
     174:	08002dd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, fp, sp}
     178:	08002dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, sp}
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     17c:	08002e06 	stmdaeq	r0, {r1, r2, r9, sl, fp, sp}
     180:	08002e08 	stmdaeq	r0, {r3, r9, sl, fp, sp}
     184:	08002e3a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl, fp, sp}
     188:	08002e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, sp}
         *(uint8_t*) arg = getSn_SR(sn);
     18c:	08002e8a 	stmdaeq	r0, {r1, r3, r7, r9, sl, fp, sp}
     190:	08002e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, sp}
     194:	08002f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, sp}
     198:	08002f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, sp}
     19c:	08002fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp, sp}
     1a0:	00000001 	andeq	r0, r0, r1
     1a4:	00000001 	andeq	r0, r0, r1
         if(getSn_MR(sn) == Sn_MR_TCP)
     1a8:	08002fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp, sp}
     1ac:	0800303c 	stmdaeq	r0, {r2, r3, r4, r5, ip, sp}
     1b0:	0800303c 	stmdaeq	r0, {r2, r3, r4, r5, ip, sp}
     1b4:	080030bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, sp}
     1b8:	080030bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, sp}
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1bc:	0800313c 	stmdaeq	r0, {r2, r3, r4, r5, r8, ip, sp}
     1c0:	0800313c 	stmdaeq	r0, {r2, r3, r4, r5, r8, ip, sp}
     1c4:	08003180 	stmdaeq	r0, {r7, r8, ip, sp}
     1c8:	08003180 	stmdaeq	r0, {r7, r8, ip, sp}
         break;
     1cc:	08003190 	stmdaeq	r0, {r4, r7, r8, ip, sp}
            *(uint16_t*)arg = sock_remained_size[sn];
     1d0:	08003190 	stmdaeq	r0, {r4, r7, r8, ip, sp}
     1d4:	080031d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, ip, sp}
     1d8:	080031d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, ip, sp}
         CHECK_SOCKMODE(Sn_MR_TCP);
     1dc:	08003218 	stmdaeq	r0, {r3, r4, r9, ip, sp}
	...
     1e8:	08003218 	stmdaeq	r0, {r3, r4, r9, ip, sp}
     1ec:	08003278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, sp}
     1f0:	08003278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, sp}
     1f4:	080032e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip, sp}
     1f8:	080032e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip, sp}
         *(uint8_t*)arg = sock_pack_info[sn];
     1fc:	0800336c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, ip, sp}
     200:	0800336c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, ip, sp}
         break;
     204:	080033fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, ip, sp}
         return SOCKERR_SOCKOPT;
     208:	080033fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, ip, sp}
   return SOCK_OK;
     20c:	08003492 	stmdaeq	r0, {r1, r4, r7, sl, ip, sp}
}
     210:	08003494 	stmdaeq	r0, {r2, r4, r7, sl, ip, sp}
     214:	0800352a 	stmdaeq	r0, {r1, r3, r5, r8, sl, ip, sp}
     218:	0800352c 	stmdaeq	r0, {r2, r3, r5, r8, sl, ip, sp}
     21c:	080035e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, ip, sp}
     220:	080035e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, ip, sp}
     224:	0800369c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, sp}
     228:	0800369c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, sp}
	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     22c:	0800372c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, ip, sp}
	...
     238:	0800372c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, ip, sp}
     23c:	08003738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, sp}
     240:	08003738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, sp}
     244:	08003760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip, sp}
     248:	08003760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip, sp}
     24c:	080037a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, ip, sp}
     250:	080037a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, ip, sp}
	memset(packet, 0, sizeof(packet));
     254:	08003c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, ip, sp}
     258:	08003c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, ip, sp}
     25c:	080042a8 	stmdaeq	r0, {r3, r5, r7, r9, lr}
	memcpy(packet, fixed_header, sizeof(fixed_header));
     260:	080042a8 	stmdaeq	r0, {r3, r5, r7, r9, lr}
     264:	080046e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, lr}
     268:	080046e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, lr}
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	08004980 	stmdaeq	r0, {r7, r8, fp, lr}
     270:	08004980 	stmdaeq	r0, {r7, r8, fp, lr}
     274:	08004bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, lr}
     278:	08004bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, lr}
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     27c:	08004cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, lr}
     280:	08004cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, lr}
     284:	08004d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, lr}
     288:	08004d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, lr}
     28c:	08004dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, lr}
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     290:	08004dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, lr}
     294:	08004dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, lr}
     298:	08004dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, lr}
     29c:	08004e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, lr}
     2a0:	08004e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, lr}
		return -1;
     2a4:	08004e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, lr}
     2a8:	08004e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, lr}
	return 1;
     2ac:	08004e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, lr}
}
     2b0:	08004e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, lr}
     2b4:	08004eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, lr}
     2b8:	08004eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, lr}
     2bc:	08004ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp, lr}
     2c0:	08004ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp, lr}
     2c4:	08004f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, lr}
     2c8:	00000001 	andeq	r0, r0, r1
     2cc:	00000001 	andeq	r0, r0, r1
	...
     2d8:	08004f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, lr}
     2dc:	08004f52 	stmdaeq	r0, {r1, r4, r6, r8, r9, sl, fp, lr}
     2e0:	08004f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, lr}
     2e4:	08005060 	stmdaeq	r0, {r5, r6, ip, lr}
     2e8:	08005060 	stmdaeq	r0, {r5, r6, ip, lr}
     2ec:	080050c4 	stmdaeq	r0, {r2, r6, r7, ip, lr}
     2f0:	080050c4 	stmdaeq	r0, {r2, r6, r7, ip, lr}
     2f4:	080053ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, ip, lr}
     2f8:	080053bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, ip, lr}
     2fc:	08005532 	stmdaeq	r0, {r1, r4, r5, r8, sl, ip, lr}
	...
     308:	08005534 	stmdaeq	r0, {r2, r4, r5, r8, sl, ip, lr}
     30c:	08005568 	stmdaeq	r0, {r3, r5, r6, r8, sl, ip, lr}
     310:	08005568 	stmdaeq	r0, {r3, r5, r6, r8, sl, ip, lr}
     314:	08005724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip, lr}
     318:	08005724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip, lr}
     31c:	08005828 	stmdaeq	r0, {r3, r5, fp, ip, lr}
     320:	08005828 	stmdaeq	r0, {r3, r5, fp, ip, lr}
     324:	08005898 	stmdaeq	r0, {r3, r4, r7, fp, ip, lr}
     328:	08005898 	stmdaeq	r0, {r3, r4, r7, fp, ip, lr}
     32c:	080058f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, lr}
     330:	080058f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, lr}
     334:	0800593c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip, lr}
     338:	0800593c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip, lr}
     33c:	08005958 	stmdaeq	r0, {r3, r4, r6, r8, fp, ip, lr}
	...
     348:	08005958 	stmdaeq	r0, {r3, r4, r6, r8, fp, ip, lr}
     34c:	0800597c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, ip, lr}
     350:	0800597c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, ip, lr}
     354:	08005a40 	stmdaeq	r0, {r6, r9, fp, ip, lr}
     358:	00000001 	andeq	r0, r0, r1
     35c:	00000001 	andeq	r0, r0, r1
     360:	00000001 	andeq	r0, r0, r1
     364:	00000001 	andeq	r0, r0, r1
     368:	00000001 	andeq	r0, r0, r1
     36c:	00000001 	andeq	r0, r0, r1
	...
     378:	00000001 	andeq	r0, r0, r1
     37c:	00000001 	andeq	r0, r0, r1
     380:	00000001 	andeq	r0, r0, r1
     384:	00000001 	andeq	r0, r0, r1
     388:	00000001 	andeq	r0, r0, r1
     38c:	00000001 	andeq	r0, r0, r1
     390:	00000001 	andeq	r0, r0, r1
     394:	00000001 	andeq	r0, r0, r1
     398:	00000001 	andeq	r0, r0, r1
     39c:	00000001 	andeq	r0, r0, r1
     3a0:	00000001 	andeq	r0, r0, r1
     3a4:	00000001 	andeq	r0, r0, r1
     3a8:	00000001 	andeq	r0, r0, r1
     3ac:	00000001 	andeq	r0, r0, r1
     3b0:	00000001 	andeq	r0, r0, r1
     3b4:	00000001 	andeq	r0, r0, r1
     3b8:	00000001 	andeq	r0, r0, r1
     3bc:	00000001 	andeq	r0, r0, r1
     3c0:	00000001 	andeq	r0, r0, r1
     3c4:	00000001 	andeq	r0, r0, r1
     3c8:	00000001 	andeq	r0, r0, r1
     3cc:	00000001 	andeq	r0, r0, r1
     3d0:	00000001 	andeq	r0, r0, r1
     3d4:	00000001 	andeq	r0, r0, r1
     3d8:	00000001 	andeq	r0, r0, r1
     3dc:	00000001 	andeq	r0, r0, r1
     3e0:	00000001 	andeq	r0, r0, r1
     3e4:	00000001 	andeq	r0, r0, r1
     3e8:	00000001 	andeq	r0, r0, r1
     3ec:	00000001 	andeq	r0, r0, r1
     3f0:	08005a40 	stmdaeq	r0, {r6, r9, fp, ip, lr}
     3f4:	08005a80 	stmdaeq	r0, {r7, r9, fp, ip, lr}
     3f8:	08005a80 	stmdaeq	r0, {r7, r9, fp, ip, lr}
     3fc:	08005aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip, lr}
     400:	08005aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip, lr}
     404:	08005ac4 	stmdaeq	r0, {r2, r6, r7, r9, fp, ip, lr}
     408:	08005ac4 	stmdaeq	r0, {r2, r6, r7, r9, fp, ip, lr}
     40c:	08005ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, ip, lr}
     410:	08005ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, ip, lr}
     414:	08005c44 	stmdaeq	r0, {r2, r6, sl, fp, ip, lr}
     418:	00000001 	andeq	r0, r0, r1
     41c:	00000001 	andeq	r0, r0, r1
     420:	08005c44 	stmdaeq	r0, {r2, r6, sl, fp, ip, lr}
     424:	08005c80 	stmdaeq	r0, {r7, sl, fp, ip, lr}
     428:	08005c80 	stmdaeq	r0, {r7, sl, fp, ip, lr}
     42c:	08005cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip, lr}
     430:	00000001 	andeq	r0, r0, r1
     434:	00000001 	andeq	r0, r0, r1
     438:	08005cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip, lr}
     43c:	08005cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, ip, lr}
     440:	08005cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, ip, lr}
     444:	08005d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, ip, lr}
     448:	00000001 	andeq	r0, r0, r1
     44c:	00000001 	andeq	r0, r0, r1
     450:	00000001 	andeq	r0, r0, r1
     454:	00000001 	andeq	r0, r0, r1
     458:	08005d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, ip, lr}
     45c:	08005d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp, ip, lr}
     460:	00000001 	andeq	r0, r0, r1
     464:	00000001 	andeq	r0, r0, r1
     468:	00000001 	andeq	r0, r0, r1
     46c:	00000001 	andeq	r0, r0, r1
     470:	00000001 	andeq	r0, r0, r1
     474:	00000001 	andeq	r0, r0, r1
	...
     480:	00000001 	andeq	r0, r0, r1
     484:	00000001 	andeq	r0, r0, r1
     488:	00000001 	andeq	r0, r0, r1
     48c:	00000001 	andeq	r0, r0, r1
     490:	08005d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp, ip, lr}
     494:	08005f04 	stmdaeq	r0, {r2, r8, r9, sl, fp, ip, lr}
     498:	00000001 	andeq	r0, r0, r1
     49c:	00000001 	andeq	r0, r0, r1
     4a0:	00000001 	andeq	r0, r0, r1
     4a4:	00000001 	andeq	r0, r0, r1
     4a8:	00000001 	andeq	r0, r0, r1
     4ac:	00000001 	andeq	r0, r0, r1
     4b0:	00000001 	andeq	r0, r0, r1
     4b4:	00000001 	andeq	r0, r0, r1
     4b8:	00000001 	andeq	r0, r0, r1
     4bc:	00000001 	andeq	r0, r0, r1
     4c0:	08005f04 	stmdaeq	r0, {r2, r8, r9, sl, fp, ip, lr}
     4c4:	08005f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip, lr}
     4c8:	08005f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip, lr}
     4cc:	08005f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, ip, lr}
     4d0:	00000001 	andeq	r0, r0, r1
     4d4:	00000001 	andeq	r0, r0, r1
     4d8:	00000001 	andeq	r0, r0, r1
     4dc:	00000001 	andeq	r0, r0, r1
     4e0:	00000001 	andeq	r0, r0, r1
     4e4:	00000001 	andeq	r0, r0, r1
     4e8:	00000001 	andeq	r0, r0, r1
     4ec:	00000001 	andeq	r0, r0, r1
     4f0:	00000001 	andeq	r0, r0, r1
     4f4:	00000001 	andeq	r0, r0, r1
     4f8:	00000001 	andeq	r0, r0, r1
     4fc:	00000001 	andeq	r0, r0, r1
     500:	00000001 	andeq	r0, r0, r1
     504:	00000001 	andeq	r0, r0, r1
     508:	00000001 	andeq	r0, r0, r1
     50c:	00000001 	andeq	r0, r0, r1
	...
     518:	00000001 	andeq	r0, r0, r1
     51c:	00000001 	andeq	r0, r0, r1
     520:	08005f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, ip, lr}
     524:	08005fc2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sl, fp, ip, lr}
     528:	00000001 	andeq	r0, r0, r1
     52c:	00000001 	andeq	r0, r0, r1
     530:	00000001 	andeq	r0, r0, r1
     534:	00000001 	andeq	r0, r0, r1
     538:	00000001 	andeq	r0, r0, r1
     53c:	00000001 	andeq	r0, r0, r1
     540:	08005fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, ip, lr}
     544:	08006002 	stmdaeq	r0, {r1, sp, lr}
     548:	00000001 	andeq	r0, r0, r1
     54c:	00000001 	andeq	r0, r0, r1
     550:	00000001 	andeq	r0, r0, r1
     554:	00000001 	andeq	r0, r0, r1
     558:	00000001 	andeq	r0, r0, r1
     55c:	00000001 	andeq	r0, r0, r1
     560:	08006004 	stmdaeq	r0, {r2, sp, lr}
     564:	08006020 	stmdaeq	r0, {r5, sp, lr}
     568:	08006020 	stmdaeq	r0, {r5, sp, lr}
     56c:	08006038 	stmdaeq	r0, {r3, r4, r5, sp, lr}
     570:	00000001 	andeq	r0, r0, r1
     574:	00000001 	andeq	r0, r0, r1
     578:	00000001 	andeq	r0, r0, r1
     57c:	00000001 	andeq	r0, r0, r1
     580:	00000001 	andeq	r0, r0, r1
     584:	00000001 	andeq	r0, r0, r1
     588:	00000001 	andeq	r0, r0, r1
     58c:	00000001 	andeq	r0, r0, r1
     590:	00000001 	andeq	r0, r0, r1
     594:	00000001 	andeq	r0, r0, r1
     598:	00000001 	andeq	r0, r0, r1
     59c:	00000001 	andeq	r0, r0, r1
     5a0:	00000001 	andeq	r0, r0, r1
     5a4:	00000001 	andeq	r0, r0, r1
     5a8:	00000001 	andeq	r0, r0, r1
     5ac:	00000001 	andeq	r0, r0, r1
     5b0:	08006038 	stmdaeq	r0, {r3, r4, r5, sp, lr}
     5b4:	0800606e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sp, lr}
     5b8:	00000001 	andeq	r0, r0, r1
     5bc:	00000001 	andeq	r0, r0, r1
     5c0:	00000001 	andeq	r0, r0, r1
     5c4:	00000001 	andeq	r0, r0, r1
     5c8:	00000001 	andeq	r0, r0, r1
     5cc:	00000001 	andeq	r0, r0, r1
	...
     5d8:	00000001 	andeq	r0, r0, r1
     5dc:	00000001 	andeq	r0, r0, r1
     5e0:	08006070 	stmdaeq	r0, {r4, r5, r6, sp, lr}
     5e4:	08006168 	stmdaeq	r0, {r3, r5, r6, r8, sp, lr}
     5e8:	00000001 	andeq	r0, r0, r1
     5ec:	00000001 	andeq	r0, r0, r1
     5f0:	00000001 	andeq	r0, r0, r1
     5f4:	00000001 	andeq	r0, r0, r1
     5f8:	00000001 	andeq	r0, r0, r1
     5fc:	00000001 	andeq	r0, r0, r1
     600:	00000001 	andeq	r0, r0, r1
     604:	00000001 	andeq	r0, r0, r1
     608:	00000001 	andeq	r0, r0, r1
     60c:	00000001 	andeq	r0, r0, r1
     610:	00000001 	andeq	r0, r0, r1
     614:	00000001 	andeq	r0, r0, r1
     618:	00000001 	andeq	r0, r0, r1
     61c:	00000001 	andeq	r0, r0, r1
     620:	00000001 	andeq	r0, r0, r1
     624:	00000001 	andeq	r0, r0, r1
     628:	00000001 	andeq	r0, r0, r1
     62c:	00000001 	andeq	r0, r0, r1
     630:	00000001 	andeq	r0, r0, r1
     634:	00000001 	andeq	r0, r0, r1
     638:	00000001 	andeq	r0, r0, r1
     63c:	00000001 	andeq	r0, r0, r1
     640:	08006168 	stmdaeq	r0, {r3, r5, r6, r8, sp, lr}
     644:	080061a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, sp, lr}
     648:	00000001 	andeq	r0, r0, r1
     64c:	00000001 	andeq	r0, r0, r1
     650:	080061a8 	stmdaeq	r0, {r3, r5, r7, r8, sp, lr}
     654:	080061ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sp, lr}
     658:	00000001 	andeq	r0, r0, r1
     65c:	00000001 	andeq	r0, r0, r1
     660:	00000001 	andeq	r0, r0, r1
     664:	00000001 	andeq	r0, r0, r1
     668:	00000001 	andeq	r0, r0, r1
     66c:	00000001 	andeq	r0, r0, r1
     670:	00000001 	andeq	r0, r0, r1
     674:	00000001 	andeq	r0, r0, r1
     678:	00000001 	andeq	r0, r0, r1
     67c:	00000001 	andeq	r0, r0, r1
     680:	00000001 	andeq	r0, r0, r1
     684:	00000001 	andeq	r0, r0, r1
     688:	00000001 	andeq	r0, r0, r1
     68c:	00000001 	andeq	r0, r0, r1
     690:	00000001 	andeq	r0, r0, r1
     694:	00000001 	andeq	r0, r0, r1
     698:	00000001 	andeq	r0, r0, r1
     69c:	00000001 	andeq	r0, r0, r1
     6a0:	00000001 	andeq	r0, r0, r1
     6a4:	00000001 	andeq	r0, r0, r1
     6a8:	00000001 	andeq	r0, r0, r1
     6ac:	00000001 	andeq	r0, r0, r1
     6b0:	00000001 	andeq	r0, r0, r1
     6b4:	00000001 	andeq	r0, r0, r1
     6b8:	00000001 	andeq	r0, r0, r1
     6bc:	00000001 	andeq	r0, r0, r1
     6c0:	00000001 	andeq	r0, r0, r1
     6c4:	00000001 	andeq	r0, r0, r1
     6c8:	00000001 	andeq	r0, r0, r1
     6cc:	00000001 	andeq	r0, r0, r1
     6d0:	00000001 	andeq	r0, r0, r1
     6d4:	00000001 	andeq	r0, r0, r1
     6d8:	00000001 	andeq	r0, r0, r1
     6dc:	00000001 	andeq	r0, r0, r1
     6e0:	00000001 	andeq	r0, r0, r1
     6e4:	00000001 	andeq	r0, r0, r1
     6e8:	00000001 	andeq	r0, r0, r1
     6ec:	00000001 	andeq	r0, r0, r1
     6f0:	00000001 	andeq	r0, r0, r1
     6f4:	00000001 	andeq	r0, r0, r1
     6f8:	00000001 	andeq	r0, r0, r1
     6fc:	00000001 	andeq	r0, r0, r1
     700:	00000001 	andeq	r0, r0, r1
     704:	00000001 	andeq	r0, r0, r1
     708:	00000001 	andeq	r0, r0, r1
     70c:	00000001 	andeq	r0, r0, r1
     710:	00000001 	andeq	r0, r0, r1
     714:	00000001 	andeq	r0, r0, r1
     718:	00000001 	andeq	r0, r0, r1
     71c:	00000001 	andeq	r0, r0, r1
     720:	00000001 	andeq	r0, r0, r1
     724:	00000001 	andeq	r0, r0, r1
     728:	00000001 	andeq	r0, r0, r1
     72c:	00000001 	andeq	r0, r0, r1
     730:	00000001 	andeq	r0, r0, r1
     734:	00000001 	andeq	r0, r0, r1
     738:	00000001 	andeq	r0, r0, r1
     73c:	00000001 	andeq	r0, r0, r1
     740:	00000001 	andeq	r0, r0, r1
     744:	00000001 	andeq	r0, r0, r1
     748:	00000001 	andeq	r0, r0, r1
     74c:	00000001 	andeq	r0, r0, r1
     750:	00000001 	andeq	r0, r0, r1
     754:	00000001 	andeq	r0, r0, r1
     758:	00000001 	andeq	r0, r0, r1
     75c:	00000001 	andeq	r0, r0, r1
     760:	00000001 	andeq	r0, r0, r1
     764:	00000001 	andeq	r0, r0, r1
     768:	00000001 	andeq	r0, r0, r1
     76c:	00000001 	andeq	r0, r0, r1
     770:	00000001 	andeq	r0, r0, r1
     774:	00000001 	andeq	r0, r0, r1
     778:	00000001 	andeq	r0, r0, r1
     77c:	00000001 	andeq	r0, r0, r1
     780:	00000001 	andeq	r0, r0, r1
     784:	00000001 	andeq	r0, r0, r1
     788:	00000001 	andeq	r0, r0, r1
     78c:	00000001 	andeq	r0, r0, r1
     790:	00000001 	andeq	r0, r0, r1
     794:	00000001 	andeq	r0, r0, r1
     798:	00000001 	andeq	r0, r0, r1
     79c:	00000001 	andeq	r0, r0, r1
     7a0:	00000001 	andeq	r0, r0, r1
     7a4:	00000001 	andeq	r0, r0, r1
     7a8:	00000001 	andeq	r0, r0, r1
     7ac:	00000001 	andeq	r0, r0, r1
     7b0:	00000001 	andeq	r0, r0, r1
     7b4:	00000001 	andeq	r0, r0, r1
     7b8:	00000001 	andeq	r0, r0, r1
     7bc:	00000001 	andeq	r0, r0, r1
     7c0:	00000001 	andeq	r0, r0, r1
     7c4:	00000001 	andeq	r0, r0, r1
     7c8:	00000001 	andeq	r0, r0, r1
     7cc:	00000001 	andeq	r0, r0, r1
     7d0:	00000001 	andeq	r0, r0, r1
     7d4:	00000001 	andeq	r0, r0, r1
     7d8:	00000001 	andeq	r0, r0, r1
     7dc:	00000001 	andeq	r0, r0, r1
     7e0:	00000001 	andeq	r0, r0, r1
     7e4:	00000001 	andeq	r0, r0, r1
     7e8:	00000001 	andeq	r0, r0, r1
     7ec:	00000001 	andeq	r0, r0, r1
     7f0:	00000001 	andeq	r0, r0, r1
     7f4:	00000001 	andeq	r0, r0, r1
     7f8:	00000001 	andeq	r0, r0, r1
     7fc:	00000001 	andeq	r0, r0, r1
     800:	00000001 	andeq	r0, r0, r1
     804:	00000001 	andeq	r0, r0, r1
     808:	00000001 	andeq	r0, r0, r1
     80c:	00000001 	andeq	r0, r0, r1
     810:	00000001 	andeq	r0, r0, r1
     814:	00000001 	andeq	r0, r0, r1
     818:	00000001 	andeq	r0, r0, r1
     81c:	00000001 	andeq	r0, r0, r1
     820:	00000001 	andeq	r0, r0, r1
     824:	00000001 	andeq	r0, r0, r1
     828:	00000001 	andeq	r0, r0, r1
     82c:	00000001 	andeq	r0, r0, r1
     830:	00000001 	andeq	r0, r0, r1
     834:	00000001 	andeq	r0, r0, r1
     838:	00000001 	andeq	r0, r0, r1
     83c:	00000001 	andeq	r0, r0, r1
     840:	00000001 	andeq	r0, r0, r1
     844:	00000001 	andeq	r0, r0, r1
     848:	00000001 	andeq	r0, r0, r1
     84c:	00000001 	andeq	r0, r0, r1
     850:	00000001 	andeq	r0, r0, r1
     854:	00000001 	andeq	r0, r0, r1
     858:	00000001 	andeq	r0, r0, r1
     85c:	00000001 	andeq	r0, r0, r1
     860:	00000001 	andeq	r0, r0, r1
     864:	00000001 	andeq	r0, r0, r1
     868:	00000001 	andeq	r0, r0, r1
     86c:	00000001 	andeq	r0, r0, r1
     870:	00000001 	andeq	r0, r0, r1
     874:	00000001 	andeq	r0, r0, r1
     878:	00000001 	andeq	r0, r0, r1
     87c:	00000001 	andeq	r0, r0, r1
     880:	080061f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sp, lr}
     884:	08006242 	stmdaeq	r0, {r1, r6, r9, sp, lr}
     888:	08006244 	stmdaeq	r0, {r2, r6, r9, sp, lr}
     88c:	08006264 	stmdaeq	r0, {r2, r5, r6, r9, sp, lr}
     890:	00000001 	andeq	r0, r0, r1
     894:	00000001 	andeq	r0, r0, r1
     898:	00000001 	andeq	r0, r0, r1
     89c:	00000001 	andeq	r0, r0, r1
     8a0:	00000001 	andeq	r0, r0, r1
     8a4:	00000001 	andeq	r0, r0, r1
     8a8:	00000001 	andeq	r0, r0, r1
     8ac:	00000001 	andeq	r0, r0, r1
	...
     8b8:	08006264 	stmdaeq	r0, {r2, r5, r6, r9, sp, lr}
     8bc:	080062ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sp, lr}
     8c0:	080062ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sp, lr}
     8c4:	08006430 	stmdaeq	r0, {r4, r5, sl, sp, lr}
     8c8:	00000001 	andeq	r0, r0, r1
     8cc:	00000001 	andeq	r0, r0, r1
     8d0:	08006430 	stmdaeq	r0, {r4, r5, sl, sp, lr}
     8d4:	0800646e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, sp, lr}
     8d8:	00000001 	andeq	r0, r0, r1
     8dc:	00000001 	andeq	r0, r0, r1
     8e0:	00000001 	andeq	r0, r0, r1
     8e4:	00000001 	andeq	r0, r0, r1
     8e8:	08006470 	stmdaeq	r0, {r4, r5, r6, sl, sp, lr}
     8ec:	080064ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, sl, sp, lr}
     8f0:	00000001 	andeq	r0, r0, r1
     8f4:	00000001 	andeq	r0, r0, r1
     8f8:	00000001 	andeq	r0, r0, r1
     8fc:	00000001 	andeq	r0, r0, r1
     900:	00000001 	andeq	r0, r0, r1
     904:	00000001 	andeq	r0, r0, r1
     908:	00000001 	andeq	r0, r0, r1
     90c:	00000001 	andeq	r0, r0, r1
     910:	00000001 	andeq	r0, r0, r1
     914:	00000001 	andeq	r0, r0, r1
     918:	00000001 	andeq	r0, r0, r1
     91c:	00000001 	andeq	r0, r0, r1
     920:	080064b0 	stmdaeq	r0, {r4, r5, r7, sl, sp, lr}
     924:	080064ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, sp, lr}
     928:	00000001 	andeq	r0, r0, r1
     92c:	00000001 	andeq	r0, r0, r1
     930:	080064d0 	stmdaeq	r0, {r4, r6, r7, sl, sp, lr}
     934:	0800650a 	stmdaeq	r0, {r1, r3, r8, sl, sp, lr}
     938:	00000001 	andeq	r0, r0, r1
     93c:	00000001 	andeq	r0, r0, r1
     940:	00000001 	andeq	r0, r0, r1
     944:	00000001 	andeq	r0, r0, r1
     948:	00000001 	andeq	r0, r0, r1
     94c:	00000001 	andeq	r0, r0, r1
     950:	00000001 	andeq	r0, r0, r1
     954:	00000001 	andeq	r0, r0, r1
     958:	00000001 	andeq	r0, r0, r1
     95c:	00000001 	andeq	r0, r0, r1
     960:	00000001 	andeq	r0, r0, r1
     964:	00000001 	andeq	r0, r0, r1
     968:	00000001 	andeq	r0, r0, r1
     96c:	00000001 	andeq	r0, r0, r1
     970:	00000001 	andeq	r0, r0, r1
     974:	00000001 	andeq	r0, r0, r1
     978:	00000001 	andeq	r0, r0, r1
     97c:	00000001 	andeq	r0, r0, r1
     980:	0800650c 	stmdaeq	r0, {r2, r3, r8, sl, sp, lr}
     984:	0800654a 	stmdaeq	r0, {r1, r3, r6, r8, sl, sp, lr}
     988:	00000001 	andeq	r0, r0, r1
     98c:	00000001 	andeq	r0, r0, r1
     990:	0800654c 	stmdaeq	r0, {r2, r3, r6, r8, sl, sp, lr}
     994:	080065aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, sl, sp, lr}
     998:	00000001 	andeq	r0, r0, r1
     99c:	00000001 	andeq	r0, r0, r1
     9a0:	080065ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, sp, lr}
     9a4:	08006610 	stmdaeq	r0, {r4, r9, sl, sp, lr}
     9a8:	00000001 	andeq	r0, r0, r1
     9ac:	00000001 	andeq	r0, r0, r1
     9b0:	00000001 	andeq	r0, r0, r1
     9b4:	00000001 	andeq	r0, r0, r1
     9b8:	00000001 	andeq	r0, r0, r1
     9bc:	00000001 	andeq	r0, r0, r1
	...
     9c8:	08006610 	stmdaeq	r0, {r4, r9, sl, sp, lr}
     9cc:	08006630 	stmdaeq	r0, {r4, r5, r9, sl, sp, lr}
     9d0:	08006630 	stmdaeq	r0, {r4, r5, r9, sl, sp, lr}
     9d4:	08006650 	stmdaeq	r0, {r4, r6, r9, sl, sp, lr}
     9d8:	08006650 	stmdaeq	r0, {r4, r6, r9, sl, sp, lr}
     9dc:	08006670 	stmdaeq	r0, {r4, r5, r6, r9, sl, sp, lr}
     9e0:	08006670 	stmdaeq	r0, {r4, r5, r6, r9, sl, sp, lr}
     9e4:	08006688 	stmdaeq	r0, {r3, r7, r9, sl, sp, lr}
     9e8:	08006688 	stmdaeq	r0, {r3, r7, r9, sl, sp, lr}
     9ec:	080066a0 	stmdaeq	r0, {r5, r7, r9, sl, sp, lr}
     9f0:	00000001 	andeq	r0, r0, r1
     9f4:	00000001 	andeq	r0, r0, r1
	...
     a00:	00000001 	andeq	r0, r0, r1
     a04:	00000001 	andeq	r0, r0, r1
     a08:	00000001 	andeq	r0, r0, r1
     a0c:	00000001 	andeq	r0, r0, r1
     a10:	080066a0 	stmdaeq	r0, {r5, r7, r9, sl, sp, lr}
     a14:	080066dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, sp, lr}
	...
     a20:	00000001 	andeq	r0, r0, r1
     a24:	00000001 	andeq	r0, r0, r1
     a28:	00000001 	andeq	r0, r0, r1
     a2c:	00000001 	andeq	r0, r0, r1
     a30:	00000001 	andeq	r0, r0, r1
     a34:	00000001 	andeq	r0, r0, r1
     a38:	080066dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, sp, lr}
     a3c:	080066fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, sp, lr}
     a40:	00000001 	andeq	r0, r0, r1
     a44:	00000001 	andeq	r0, r0, r1
     a48:	00000001 	andeq	r0, r0, r1
     a4c:	00000001 	andeq	r0, r0, r1
     a50:	00000001 	andeq	r0, r0, r1
     a54:	00000001 	andeq	r0, r0, r1
     a58:	00000001 	andeq	r0, r0, r1
     a5c:	00000001 	andeq	r0, r0, r1
     a60:	00000001 	andeq	r0, r0, r1
     a64:	00000001 	andeq	r0, r0, r1
     a68:	00000001 	andeq	r0, r0, r1
     a6c:	00000001 	andeq	r0, r0, r1
     a70:	00000001 	andeq	r0, r0, r1
     a74:	00000001 	andeq	r0, r0, r1
	...
     a80:	080066fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, sp, lr}
     a84:	08006710 	stmdaeq	r0, {r4, r8, r9, sl, sp, lr}
     a88:	00000001 	andeq	r0, r0, r1
     a8c:	00000001 	andeq	r0, r0, r1
     a90:	00000001 	andeq	r0, r0, r1
     a94:	00000001 	andeq	r0, r0, r1
     a98:	00000001 	andeq	r0, r0, r1
     a9c:	00000001 	andeq	r0, r0, r1
     aa0:	00000001 	andeq	r0, r0, r1
     aa4:	00000001 	andeq	r0, r0, r1
     aa8:	00000001 	andeq	r0, r0, r1
     aac:	00000001 	andeq	r0, r0, r1
     ab0:	00000001 	andeq	r0, r0, r1
     ab4:	00000001 	andeq	r0, r0, r1
     ab8:	00000001 	andeq	r0, r0, r1
     abc:	00000001 	andeq	r0, r0, r1
     ac0:	00000001 	andeq	r0, r0, r1
     ac4:	00000001 	andeq	r0, r0, r1
     ac8:	00000001 	andeq	r0, r0, r1
     acc:	00000001 	andeq	r0, r0, r1
     ad0:	00000001 	andeq	r0, r0, r1
     ad4:	00000001 	andeq	r0, r0, r1
     ad8:	00000001 	andeq	r0, r0, r1
     adc:	00000001 	andeq	r0, r0, r1
	...
     ae8:	00000001 	andeq	r0, r0, r1
     aec:	00000001 	andeq	r0, r0, r1
     af0:	08006710 	stmdaeq	r0, {r4, r8, r9, sl, sp, lr}
     af4:	08006730 	stmdaeq	r0, {r4, r5, r8, r9, sl, sp, lr}
     af8:	08006730 	stmdaeq	r0, {r4, r5, r8, r9, sl, sp, lr}
     afc:	08006750 	stmdaeq	r0, {r4, r6, r8, r9, sl, sp, lr}
     b00:	00000001 	andeq	r0, r0, r1
     b04:	00000001 	andeq	r0, r0, r1
     b08:	00000001 	andeq	r0, r0, r1
     b0c:	00000001 	andeq	r0, r0, r1
     b10:	08006750 	stmdaeq	r0, {r4, r6, r8, r9, sl, sp, lr}
     b14:	08006784 	stmdaeq	r0, {r2, r7, r8, r9, sl, sp, lr}
     b18:	00000001 	andeq	r0, r0, r1
     b1c:	00000001 	andeq	r0, r0, r1
     b20:	00000001 	andeq	r0, r0, r1
     b24:	00000001 	andeq	r0, r0, r1
     b28:	08006784 	stmdaeq	r0, {r2, r7, r8, r9, sl, sp, lr}
     b2c:	080067a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, sp, lr}
     b30:	00000001 	andeq	r0, r0, r1
     b34:	00000001 	andeq	r0, r0, r1
     b38:	00000001 	andeq	r0, r0, r1
     b3c:	00000001 	andeq	r0, r0, r1
     b40:	00000001 	andeq	r0, r0, r1
     b44:	00000001 	andeq	r0, r0, r1
     b48:	00000001 	andeq	r0, r0, r1
     b4c:	00000001 	andeq	r0, r0, r1
     b50:	00000001 	andeq	r0, r0, r1
     b54:	00000001 	andeq	r0, r0, r1
	...
     b60:	080067a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, sp, lr}
     b64:	080067b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, sp, lr}
     b68:	080067b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, sp, lr}
     b6c:	080067b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl, sp, lr}
     b70:	080067b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, sp, lr}
     b74:	080067be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, sl, sp, lr}
     b78:	080067c0 	stmdaeq	r0, {r6, r7, r8, r9, sl, sp, lr}
     b7c:	080067c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, sl, sp, lr}
     b80:	080067c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, sp, lr}
     b84:	080067ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, sl, sp, lr}
     b88:	080067d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, sp, lr}
     b8c:	080067dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, sp, lr}
     b90:	080067dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, sp, lr}
     b94:	080067e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, sp, lr}
     b98:	080067e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, sp, lr}
     b9c:	0800684c 	stmdaeq	r0, {r2, r3, r6, fp, sp, lr}
     ba0:	0800684c 	stmdaeq	r0, {r2, r3, r6, fp, sp, lr}
     ba4:	08006858 	stmdaeq	r0, {r3, r4, r6, fp, sp, lr}
	...
     bb0:	08006858 	stmdaeq	r0, {r3, r4, r6, fp, sp, lr}
     bb4:	080068dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, sp, lr}
     bb8:	080068dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, sp, lr}
     bbc:	08006924 	stmdaeq	r0, {r2, r5, r8, fp, sp, lr}
     bc0:	08006924 	stmdaeq	r0, {r2, r5, r8, fp, sp, lr}
     bc4:	080069e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, sp, lr}
     bc8:	080069e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, sp, lr}
     bcc:	08006a4a 	stmdaeq	r0, {r1, r3, r6, r9, fp, sp, lr}
     bd0:	08006a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp, sp, lr}
     bd4:	08006a90 	stmdaeq	r0, {r4, r7, r9, fp, sp, lr}
     bd8:	08006a90 	stmdaeq	r0, {r4, r7, r9, fp, sp, lr}
     bdc:	08006ada 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, fp, sp, lr}
	...
     be8:	08006adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, sp, lr}
     bec:	08006af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, sp, lr}
     bf0:	08006af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, sp, lr}
     bf4:	08006b04 	stmdaeq	r0, {r2, r8, r9, fp, sp, lr}
     bf8:	08006b04 	stmdaeq	r0, {r2, r8, r9, fp, sp, lr}
     bfc:	08006b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, sp, lr}
     c00:	08006b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, sp, lr}
     c04:	08006b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, sp, lr}
     c08:	08006b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, sp, lr}
     c0c:	08006bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp, sp, lr}
     c10:	08006bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp, sp, lr}
     c14:	08006c10 	stmdaeq	r0, {r4, sl, fp, sp, lr}
     c18:	08006c10 	stmdaeq	r0, {r4, sl, fp, sp, lr}
     c1c:	08006cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, sp, lr}
     c20:	08006cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, sp, lr}
     c24:	08006eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, sp, lr}
     c28:	08006eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, sp, lr}
     c2c:	08007274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip, sp, lr}
     c30:	08007274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip, sp, lr}
     c34:	0800759c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
     c38:	0800759c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
     c3c:	08007668 	stmdaeq	r0, {r3, r5, r6, r9, sl, ip, sp, lr}
     c40:	08007668 	stmdaeq	r0, {r3, r5, r6, r9, sl, ip, sp, lr}
     c44:	080076b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, ip, sp, lr}
     c48:	080076b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, ip, sp, lr}
     c4c:	080076d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, ip, sp, lr}
	...
     c58:	080076d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, ip, sp, lr}
     c5c:	08007722 	stmdaeq	r0, {r1, r5, r8, r9, sl, ip, sp, lr}
     c60:	08007724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip, sp, lr}
     c64:	08007778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, ip, sp, lr}
     c68:	08007778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, ip, sp, lr}
     c6c:	08007836 	stmdaeq	r0, {r1, r2, r4, r5, fp, ip, sp, lr}
     c70:	00000001 	andeq	r0, r0, r1
     c74:	00000001 	andeq	r0, r0, r1
     c78:	00000001 	andeq	r0, r0, r1
     c7c:	00000001 	andeq	r0, r0, r1
     c80:	08007838 	stmdaeq	r0, {r3, r4, r5, fp, ip, sp, lr}
     c84:	08007874 	stmdaeq	r0, {r2, r4, r5, r6, fp, ip, sp, lr}
     c88:	08007874 	stmdaeq	r0, {r2, r4, r5, r6, fp, ip, sp, lr}
     c8c:	08007906 	stmdaeq	r0, {r1, r2, r8, fp, ip, sp, lr}
     c90:	08007908 	stmdaeq	r0, {r3, r8, fp, ip, sp, lr}
     c94:	08007988 	stmdaeq	r0, {r3, r7, r8, fp, ip, sp, lr}
     c98:	08007988 	stmdaeq	r0, {r3, r7, r8, fp, ip, sp, lr}
     c9c:	080079d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, sp, lr}
     ca0:	080079d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, sp, lr}
     ca4:	080079f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, fp, ip, sp, lr}
     ca8:	080079f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, ip, sp, lr}
     cac:	08007ce6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, fp, ip, sp, lr}
     cb0:	00000001 	andeq	r0, r0, r1
     cb4:	00000001 	andeq	r0, r0, r1
     cb8:	08007ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp, ip, sp, lr}
     cbc:	08007d1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, fp, ip, sp, lr}
     cc0:	00000001 	andeq	r0, r0, r1
     cc4:	00000001 	andeq	r0, r0, r1
     cc8:	00000001 	andeq	r0, r0, r1
     ccc:	00000001 	andeq	r0, r0, r1
     cd0:	00000001 	andeq	r0, r0, r1
     cd4:	00000001 	andeq	r0, r0, r1
     cd8:	08007d20 	stmdaeq	r0, {r5, r8, sl, fp, ip, sp, lr}
     cdc:	08007ea2 	stmdaeq	r0, {r1, r5, r7, r9, sl, fp, ip, sp, lr}
     ce0:	00000001 	andeq	r0, r0, r1
     ce4:	00000001 	andeq	r0, r0, r1
	...
     cf0:	08007ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, sp, lr}
     cf4:	08007ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, ip, sp, lr}
     cf8:	08007ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, ip, sp, lr}
     cfc:	08007efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}
     d00:	08007efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}
     d04:	08007f42 	stmdaeq	r0, {r1, r6, r8, r9, sl, fp, ip, sp, lr}
     d08:	08007f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, ip, sp, lr}
     d0c:	08007fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
     d10:	08007fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
     d14:	08008006 	stmdaeq	r0, {r1, r2, pc}
	...
     d20:	08008008 	stmdaeq	r0, {r3, pc}
     d24:	080080bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, pc}
     d28:	080080bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, pc}
     d2c:	08008118 	stmdaeq	r0, {r3, r4, r8, pc}
     d30:	08008118 	stmdaeq	r0, {r3, r4, r8, pc}
     d34:	08008156 	stmdaeq	r0, {r1, r2, r4, r6, r8, pc}
     d38:	08008158 	stmdaeq	r0, {r3, r4, r6, r8, pc}
     d3c:	0800818c 	stmdaeq	r0, {r2, r3, r7, r8, pc}
     d40:	0800818c 	stmdaeq	r0, {r2, r3, r7, r8, pc}
     d44:	080081bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, pc}
     d48:	080081bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, pc}
     d4c:	08008310 	stmdaeq	r0, {r4, r8, r9, pc}
     d50:	00000001 	andeq	r0, r0, r1
     d54:	00000001 	andeq	r0, r0, r1
     d58:	00000001 	andeq	r0, r0, r1
     d5c:	00000001 	andeq	r0, r0, r1
     d60:	00000001 	andeq	r0, r0, r1
     d64:	00000001 	andeq	r0, r0, r1
     d68:	08008310 	stmdaeq	r0, {r4, r8, r9, pc}
     d6c:	080084a0 	stmdaeq	r0, {r5, r7, sl, pc}
     d70:	00000001 	andeq	r0, r0, r1
     d74:	00000001 	andeq	r0, r0, r1
     d78:	00000001 	andeq	r0, r0, r1
     d7c:	00000001 	andeq	r0, r0, r1
     d80:	00000001 	andeq	r0, r0, r1
     d84:	00000001 	andeq	r0, r0, r1
     d88:	00000001 	andeq	r0, r0, r1
     d8c:	00000001 	andeq	r0, r0, r1
     d90:	00000001 	andeq	r0, r0, r1
     d94:	00000001 	andeq	r0, r0, r1
     d98:	00000001 	andeq	r0, r0, r1
     d9c:	00000001 	andeq	r0, r0, r1
     da0:	00000001 	andeq	r0, r0, r1
     da4:	00000001 	andeq	r0, r0, r1
     da8:	080084a0 	stmdaeq	r0, {r5, r7, sl, pc}
     dac:	080084ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, pc}
     db0:	080084d0 	stmdaeq	r0, {r4, r6, r7, sl, pc}
     db4:	080085a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, pc}
     db8:	00000001 	andeq	r0, r0, r1
     dbc:	00000001 	andeq	r0, r0, r1
     dc0:	080085a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, pc}
     dc4:	08008648 	stmdaeq	r0, {r3, r6, r9, sl, pc}
     dc8:	08008648 	stmdaeq	r0, {r3, r6, r9, sl, pc}
     dcc:	08008674 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, pc}
     dd0:	00000001 	andeq	r0, r0, r1
     dd4:	00000001 	andeq	r0, r0, r1
     dd8:	08008674 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, pc}
     ddc:	080086a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, pc}
     de0:	00000001 	andeq	r0, r0, r1
     de4:	00000001 	andeq	r0, r0, r1
	...
     df0:	080086a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, pc}
     df4:	08008726 	stmdaeq	r0, {r1, r2, r5, r8, r9, sl, pc}
     df8:	08008728 	stmdaeq	r0, {r3, r5, r8, r9, sl, pc}
     dfc:	08008826 	stmdaeq	r0, {r1, r2, r5, fp, pc}
     e00:	08008828 	stmdaeq	r0, {r3, r5, fp, pc}
     e04:	080088fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, pc}
     e08:	00000001 	andeq	r0, r0, r1
     e0c:	00000001 	andeq	r0, r0, r1
     e10:	080088fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, pc}
     e14:	08008944 	stmdaeq	r0, {r2, r6, r8, fp, pc}
     e18:	00000001 	andeq	r0, r0, r1
     e1c:	00000001 	andeq	r0, r0, r1
     e20:	00000001 	andeq	r0, r0, r1
     e24:	00000001 	andeq	r0, r0, r1
     e28:	00000001 	andeq	r0, r0, r1
     e2c:	00000001 	andeq	r0, r0, r1
     e30:	00000001 	andeq	r0, r0, r1
     e34:	00000001 	andeq	r0, r0, r1
     e38:	00000001 	andeq	r0, r0, r1
     e3c:	00000001 	andeq	r0, r0, r1
     e40:	00000001 	andeq	r0, r0, r1
     e44:	00000001 	andeq	r0, r0, r1
     e48:	00000001 	andeq	r0, r0, r1
     e4c:	00000001 	andeq	r0, r0, r1
     e50:	08008944 	stmdaeq	r0, {r2, r6, r8, fp, pc}
     e54:	080089b0 	stmdaeq	r0, {r4, r5, r7, r8, fp, pc}
     e58:	00000001 	andeq	r0, r0, r1
     e5c:	00000001 	andeq	r0, r0, r1
     e60:	080089b0 	stmdaeq	r0, {r4, r5, r7, r8, fp, pc}
     e64:	080089cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp, pc}
     e68:	080089cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp, pc}
     e6c:	08008ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, pc}
     e70:	00000001 	andeq	r0, r0, r1
     e74:	00000001 	andeq	r0, r0, r1
     e78:	00000001 	andeq	r0, r0, r1
     e7c:	00000001 	andeq	r0, r0, r1
     e80:	00000001 	andeq	r0, r0, r1
     e84:	00000001 	andeq	r0, r0, r1
     e88:	00000001 	andeq	r0, r0, r1
     e8c:	00000001 	andeq	r0, r0, r1
     e90:	08008ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, pc}
     e94:	08008c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, pc}
     e98:	08008c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, pc}
     e9c:	08008d10 	stmdaeq	r0, {r4, r8, sl, fp, pc}
     ea0:	08008d10 	stmdaeq	r0, {r4, r8, sl, fp, pc}
     ea4:	08008d3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, fp, pc}
     ea8:	00000001 	andeq	r0, r0, r1
     eac:	00000001 	andeq	r0, r0, r1
     eb0:	08008d3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, fp, pc}
     eb4:	08008de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, pc}
     eb8:	00000001 	andeq	r0, r0, r1
     ebc:	00000001 	andeq	r0, r0, r1
     ec0:	00000001 	andeq	r0, r0, r1
     ec4:	00000001 	andeq	r0, r0, r1
     ec8:	08008de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, pc}
     ecc:	08008e10 	stmdaeq	r0, {r4, r9, sl, fp, pc}
     ed0:	08008e10 	stmdaeq	r0, {r4, r9, sl, fp, pc}
     ed4:	08008e9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, fp, pc}
     ed8:	08008e9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, fp, pc}
     edc:	08008eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, pc}
     ee0:	08008eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, pc}
     ee4:	08008ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, pc}
     ee8:	08008ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, pc}
     eec:	08008f58 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, fp, pc}
     ef0:	08008f58 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, fp, pc}
     ef4:	08008f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, pc}
     ef8:	08008f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, pc}
     efc:	08008fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, pc}
     f00:	00000001 	andeq	r0, r0, r1
     f04:	00000001 	andeq	r0, r0, r1
     f08:	08008fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, pc}
     f0c:	080090a4 	stmdaeq	r0, {r2, r5, r7, ip, pc}
     f10:	080090a4 	stmdaeq	r0, {r2, r5, r7, ip, pc}
     f14:	0800916c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip, pc}
     f18:	0800916c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip, pc}
     f1c:	0800925c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, pc}
     f20:	00000001 	andeq	r0, r0, r1
     f24:	00000001 	andeq	r0, r0, r1
     f28:	0800925c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, pc}
     f2c:	08009284 	stmdaeq	r0, {r2, r7, r9, ip, pc}
     f30:	00000001 	andeq	r0, r0, r1
     f34:	00000001 	andeq	r0, r0, r1
     f38:	00000001 	andeq	r0, r0, r1
     f3c:	00000001 	andeq	r0, r0, r1
     f40:	00000001 	andeq	r0, r0, r1
     f44:	00000001 	andeq	r0, r0, r1
     f48:	00000001 	andeq	r0, r0, r1
     f4c:	00000001 	andeq	r0, r0, r1
     f50:	00000001 	andeq	r0, r0, r1
     f54:	00000001 	andeq	r0, r0, r1
     f58:	00000001 	andeq	r0, r0, r1
     f5c:	00000001 	andeq	r0, r0, r1
     f60:	08009284 	stmdaeq	r0, {r2, r7, r9, ip, pc}
     f64:	08009350 	stmdaeq	r0, {r4, r6, r8, r9, ip, pc}
	...
     f70:	08009350 	stmdaeq	r0, {r4, r6, r8, r9, ip, pc}
     f74:	080093a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, ip, pc}
     f78:	080093a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, ip, pc}
     f7c:	080093d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, ip, pc}
     f80:	080093e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip, pc}
     f84:	08009406 	stmdaeq	r0, {r1, r2, sl, ip, pc}
     f88:	08009408 	stmdaeq	r0, {r3, sl, ip, pc}
     f8c:	08009424 	stmdaeq	r0, {r2, r5, sl, ip, pc}
     f90:	08009428 	stmdaeq	r0, {r3, r5, sl, ip, pc}
     f94:	08009468 	stmdaeq	r0, {r3, r5, r6, sl, ip, pc}
     f98:	00000001 	andeq	r0, r0, r1
     f9c:	00000001 	andeq	r0, r0, r1
     fa0:	08009468 	stmdaeq	r0, {r3, r5, r6, sl, ip, pc}
     fa4:	08009498 	stmdaeq	r0, {r3, r4, r7, sl, ip, pc}
     fa8:	08009498 	stmdaeq	r0, {r3, r4, r7, sl, ip, pc}
     fac:	080094c8 	stmdaeq	r0, {r3, r6, r7, sl, ip, pc}
     fb0:	080094d0 	stmdaeq	r0, {r4, r6, r7, sl, ip, pc}
     fb4:	08009516 	stmdaeq	r0, {r1, r2, r4, r8, sl, ip, pc}
     fb8:	08009518 	stmdaeq	r0, {r3, r4, r8, sl, ip, pc}
     fbc:	08009558 	stmdaeq	r0, {r3, r4, r6, r8, sl, ip, pc}
     fc0:	08009558 	stmdaeq	r0, {r3, r4, r6, r8, sl, ip, pc}
     fc4:	0800958c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip, pc}
	...
     fd0:	0800958c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip, pc}
     fd4:	08009618 	stmdaeq	r0, {r3, r4, r9, sl, ip, pc}
     fd8:	08009618 	stmdaeq	r0, {r3, r4, r9, sl, ip, pc}
     fdc:	0800962a 	stmdaeq	r0, {r1, r3, r5, r9, sl, ip, pc}
     fe0:	00000001 	andeq	r0, r0, r1
     fe4:	00000001 	andeq	r0, r0, r1
     fe8:	00000001 	andeq	r0, r0, r1
     fec:	00000001 	andeq	r0, r0, r1
	...
     ff8:	0000000a 	andeq	r0, r0, sl
     ffc:	0000000e 	andeq	r0, r0, lr
    1000:	00000018 	andeq	r0, r0, r8, lsl r0
    1004:	00000048 	andeq	r0, r0, r8, asr #32
    1008:	0000004a 	andeq	r0, r0, sl, asr #32
    100c:	00000058 	andeq	r0, r0, r8, asr r0
	...
    1018:	0000001e 	andeq	r0, r0, lr, lsl r0
    101c:	00000034 	andeq	r0, r0, r4, lsr r0
    1020:	00000036 	andeq	r0, r0, r6, lsr r0
    1024:	00000048 	andeq	r0, r0, r8, asr #32
    1028:	0000004a 	andeq	r0, r0, sl, asr #32
    102c:	00000058 	andeq	r0, r0, r8, asr r0
	...
    1038:	0000006c 	andeq	r0, r0, ip, rrx
    103c:	00000090 	muleq	r0, r0, r0
    1040:	00000098 	muleq	r0, r8, r0
    1044:	000000e2 	andeq	r0, r0, r2, ror #1
	...
    1050:	0000009e 	muleq	r0, lr, r0
    1054:	000000a4 	andeq	r0, r0, r4, lsr #1
    1058:	000000a6 	andeq	r0, r0, r6, lsr #1
    105c:	000000bc 	strheq	r0, [r0], -ip
    1060:	000000be 	strheq	r0, [r0], -lr
    1064:	000000e2 	andeq	r0, r0, r2, ror #1
	...
    1070:	08000590 	stmdaeq	r0, {r4, r7, r8, sl}
    1074:	0800064a 	stmdaeq	r0, {r1, r3, r6, r9, sl}
	...
    1080:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
    1084:	080006a8 	stmdaeq	r0, {r3, r5, r7, r9, sl}
	...
    1090:	00000020 	andeq	r0, r0, r0, lsr #32
    1094:	00000032 	andeq	r0, r0, r2, lsr r0
    1098:	00000064 	andeq	r0, r0, r4, rrx
    109c:	0000006e 	andeq	r0, r0, lr, rrx
    10a0:	00000084 	andeq	r0, r0, r4, lsl #1
    10a4:	0000008e 	andeq	r0, r0, lr, lsl #1
    10a8:	00000096 	muleq	r0, r6, r0
    10ac:	000000ac 	andeq	r0, r0, ip, lsr #1
	...
    10b8:	00000036 	andeq	r0, r0, r6, lsr r0
    10bc:	00000060 	andeq	r0, r0, r0, rrx
    10c0:	000000ac 	andeq	r0, r0, ip, lsr #1
    10c4:	000000bc 	strheq	r0, [r0], -ip
	...
    10d0:	0000003a 	andeq	r0, r0, sl, lsr r0
    10d4:	000000a4 	andeq	r0, r0, r4, lsr #1
    10d8:	000000a8 	andeq	r0, r0, r8, lsr #1
    10dc:	000000b6 	strheq	r0, [r0], -r6
	...
    10e8:	000000fa 	strdeq	r0, [r0], -sl
    10ec:	0000014c 	andeq	r0, r0, ip, asr #2
    10f0:	0000014e 	andeq	r0, r0, lr, asr #2
    10f4:	00000156 	andeq	r0, r0, r6, asr r1
    10f8:	00000186 	andeq	r0, r0, r6, lsl #3
    10fc:	000001a0 	andeq	r0, r0, r0, lsr #3
	...
    1108:	00000046 	andeq	r0, r0, r6, asr #32
    110c:	00000078 	andeq	r0, r0, r8, ror r0
    1110:	000000f4 	strdeq	r0, [r0], -r4
    1114:	00000106 	andeq	r0, r0, r6, lsl #2
	...
    1120:	000000d6 	ldrdeq	r0, [r0], -r6
    1124:	000000ec 	andeq	r0, r0, ip, ror #1
    1128:	00000126 	andeq	r0, r0, r6, lsr #2
    112c:	0000012c 	andeq	r0, r0, ip, lsr #2
	...
    1138:	00000164 	andeq	r0, r0, r4, ror #2
    113c:	0000016e 	andeq	r0, r0, lr, ror #2
    1140:	00000172 	andeq	r0, r0, r2, ror r1
    1144:	00000186 	andeq	r0, r0, r6, lsl #3
    1148:	0000019a 	muleq	r0, sl, r1
    114c:	000001f6 	strdeq	r0, [r0], -r6
    1150:	000001f8 	strdeq	r0, [r0], -r8
    1154:	00000218 	andeq	r0, r0, r8, lsl r2
    1158:	0000021a 	andeq	r0, r0, sl, lsl r2
    115c:	0000021e 	andeq	r0, r0, lr, lsl r2
    1160:	00000298 	muleq	r0, r8, r2
    1164:	000002ae 	andeq	r0, r0, lr, lsr #5
    1168:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    116c:	000002ee 	andeq	r0, r0, lr, ror #5
    1170:	000002f2 	strdeq	r0, [r0], -r2
    1174:	00000306 	andeq	r0, r0, r6, lsl #6
    1178:	0000030e 	andeq	r0, r0, lr, lsl #6
    117c:	00000322 	andeq	r0, r0, r2, lsr #6
    1180:	00000326 	andeq	r0, r0, r6, lsr #6
    1184:	0000036c 	andeq	r0, r0, ip, ror #6
    1188:	00000378 	andeq	r0, r0, r8, ror r3
    118c:	000003dc 	ldrdeq	r0, [r0], -ip
	...
    1198:	00000242 	andeq	r0, r0, r2, asr #4
    119c:	00000244 	andeq	r0, r0, r4, asr #4
    11a0:	00000248 	andeq	r0, r0, r8, asr #4
    11a4:	0000024a 	andeq	r0, r0, sl, asr #4
    11a8:	0000024c 	andeq	r0, r0, ip, asr #4
    11ac:	00000276 	andeq	r0, r0, r6, ror r2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
{
       0:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
}
       4:	01060002 	tsteq	r6, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
    bitstatus = SET;
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    bitstatus = RESET;
      20:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
  return bitstatus;
      24:	2f767375 	svccs	0x00767375
}
      28:	53414454 	movtpl	r4, #5204	; 0x1454
      2c:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
      30:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
      34:	5349534d 	movtpl	r5, #37709	; 0x934d
      38:	334d432f 	movtcc	r4, #54063	; 0xd32f
      3c:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
      40:	53656369 	cmnpl	r5, #-1543503871	; 0xa4000001
      44:	6f707075 	svcvs	0x00707075
      48:	532f7472 			; <UNDEFINED> instruction: 0x532f7472
      4c:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xfffff0ac
      50:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      54:	00783031 	rsbseq	r3, r8, r1, lsr r0
      58:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      5c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      60:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
            I2C_SendData(OLED_HARDWARE, BMP[j++]);
      64:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      68:	2f62696c 	svccs	0x0062696c
      6c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
      70:	00656e69 	rsbeq	r6, r5, r9, ror #28
      74:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);    	
      78:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      7c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      80:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      84:	2f62696c 	svccs	0x0062696c
        for(x=x0;x<x1;x++){ 
      88:	00737973 	rsbseq	r7, r3, r3, ror r9
      8c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffd8 <BootRAM+0xef70779>
      90:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
      94:	76737572 			; <UNDEFINED> instruction: 0x76737572
        _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
      98:	4144542f 	cmpmi	r4, pc, lsr #8
      9c:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
      a0:	2f544f49 	svccs	0x00544f49
      a4:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
	for(y=y0;y<y1;y++){
      a8:	4d432f53 	stclmi	15, cr2, [r3, #-332]	; 0xfffffeb4
      ac:	6f432f33 	svcvs	0x00432f33
      b0:	75536572 	ldrbvc	r6, [r3, #-1394]	; 0xfffffa8e
}
      b4:	726f7070 	rsbvc	r7, pc, #112	; 0x70
      b8:	73000074 	movwvc	r0, #116	; 0x74
      bc:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
      c0:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
      c4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
      c8:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
      cc:	00010063 	andeq	r0, r1, r3, rrx
      d0:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
      d4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
      d8:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
      dc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
      e0:	00020068 	andeq	r0, r2, r8, rrx
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      e4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      e8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
      ec:	0300682e 	movweq	r6, #2094	; 0x82e
      f0:	6f630000 	svcvs	0x00630000
				prvUnlockQueue( pxQueue );
      f4:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
      f8:	682e336d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
				if( xTaskResumeAll() == pdFALSE )
      fc:	00000400 	andeq	r0, r0, r0, lsl #8
     100:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
					portYIELD_WITHIN_API();
     104:	30316632 	eorscc	r6, r1, r2, lsr r6
     108:	00682e78 	rsbeq	r2, r8, r8, ror lr
     10c:	00000001 	andeq	r0, r0, r1
     110:	e4020500 	str	r0, [r2], #-1280	; 0xfffffb00
     114:	03080012 	movweq	r0, #32786	; 0x8012
				prvUnlockQueue( pxQueue );
     118:	310101d4 	ldrdcc	r0, [r1, -r4]
				( void ) xTaskResumeAll();
     11c:	69856c6a 	stmibvs	r5, {r1, r3, r5, r6, sl, fp, sp, lr}
     120:	03661303 	cmneq	r6, #201326592	; 0xc000000
			prvUnlockQueue( pxQueue );
     124:	4c324a0b 			; <UNDEFINED> instruction: 0x4c324a0b
			( void ) xTaskResumeAll();
     128:	00070221 	andeq	r0, r7, r1, lsr #4
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     12c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     130:	00000002 	andeq	r0, r0, r2
     134:	02b20300 	adcseq	r0, r2, #0, 6
     138:	0b033d01 	bleq	cf544 <_Min_Stack_Size+0xcf344>
}
     13c:	3d775a66 	vldmdbcc	r7!, {s11-s112}
     140:	59243d22 	stmdbpl	r4!, {r1, r5, r8, sl, fp, ip, sp}
     144:	033f4c5b 	teqeq	pc, #23296	; 0x5b00
     148:	4f03663b 	svcmi	0x0003663b
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     14c:	2f036820 	svccs	0x00036820
  SPIx->I2SCFGR = tmpreg;   
     150:	20550366 	subscs	r0, r5, r6, ror #6
     154:	23662b03 	cmncs	r6, #3072	; 0xc00
}
     158:	7592253d 	ldrvc	r2, [r2, #1341]	; 0x53d
     15c:	01000f02 	tsteq	r0, r2, lsl #30
     160:	02050001 	andeq	r0, r5, #1
     164:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
         *(uint16_t*) arg = getSn_KPALVTR(sn);
     168:	0103a303 	tsteq	r3, r3, lsl #6
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     16c:	332e0d03 			; <UNDEFINED> instruction: 0x332e0d03
     170:	01000202 	tsteq	r0, r2, lsl #4
     174:	02050001 	andeq	r0, r5, #1
     178:	08001358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip}
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     17c:	0107dc03 	tsteq	r7, r3, lsl #24
     180:	02004e3d 	andeq	r4, r0, #976	; 0x3d0
     184:	006b0204 	rsbeq	r0, fp, r4, lsl #4
     188:	59020402 	stmdbpl	r2, {r1, sl}
         *(uint8_t*) arg = getSn_SR(sn);
     18c:	02040200 	andeq	r0, r4, #0, 4
     190:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     194:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     198:	3140684c 	cmpcc	r0, ip, asr #16
     19c:	6a67693f 	bvs	19da6a0 <_Min_Stack_Size+0x19da4a0>
     1a0:	1a034d4d 	bne	d36dc <_Min_Stack_Size+0xd34dc>
     1a4:	696b6866 	stmdbvs	fp!, {r1, r2, r5, r6, fp, sp, lr}^
         if(getSn_MR(sn) == Sn_MR_TCP)
     1a8:	01040200 	mrseq	r0, R12_usr
     1ac:	6b062006 	blvs	1881cc <_Min_Stack_Size+0x187fcc>
     1b0:	02006967 	andeq	r6, r0, #1687552	; 0x19c000
     1b4:	20060104 	andcs	r0, r6, r4, lsl #2
     1b8:	66090306 	strvs	r0, [r9], -r6, lsl #6
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1bc:	01000a02 	tsteq	r0, r2, lsl #20
     1c0:	00034901 	andeq	r4, r3, r1, lsl #18
     1c4:	27000200 	strcs	r0, [r0, -r0, lsl #4]
     1c8:	02000001 	andeq	r0, r0, #1
         break;
     1cc:	0d0efb01 	vstreq	d15, [lr, #-4]
            *(uint16_t*)arg = sock_remained_size[sn];
     1d0:	01010100 	mrseq	r0, (UNDEF: 17)
     1d4:	00000001 	andeq	r0, r0, r1
     1d8:	01000001 	tsteq	r0, r1
         CHECK_SOCKMODE(Sn_MR_TCP);
     1dc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 128 <_Min_Heap_Size+0x128>
     1e0:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     1e4:	76737572 			; <UNDEFINED> instruction: 0x76737572
     1e8:	4144542f 	cmpmi	r4, pc, lsr #8
     1ec:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
     1f0:	2f544f49 	svccs	0x00544f49
     1f4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     1f8:	2f007265 	svccs	0x00007265
         *(uint8_t*)arg = sock_pack_info[sn];
     1fc:	2f727375 	svccs	0x00727375
     200:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
         break;
     204:	2f656475 	svccs	0x00656475
         return SOCKERR_SOCKOPT;
     208:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
   return SOCK_OK;
     20c:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 70 <_Min_Heap_Size+0x70>
}
     210:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     214:	2f00656e 	svccs	0x0000656e
     218:	2f727375 	svccs	0x00727375
     21c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     220:	2f656475 	svccs	0x00656475
     224:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     228:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     22c:	2f007379 	svccs	0x00007379
     230:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     234:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
     238:	2f767375 	svccs	0x00767375
     23c:	53414454 	movtpl	r4, #5204	; 0x1454
     240:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
     244:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
     248:	5349534d 	movtpl	r5, #37709	; 0x934d
     24c:	334d432f 	movtcc	r4, #54063	; 0xd32f
     250:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
	memset(packet, 0, sizeof(packet));
     254:	53656369 	cmnpl	r5, #-1543503871	; 0xa4000001
     258:	6f707075 	svcvs	0x00707075
     25c:	532f7472 			; <UNDEFINED> instruction: 0x532f7472
	memcpy(packet, fixed_header, sizeof(fixed_header));
     260:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xfffff0ac
     264:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     268:	00783031 	rsbseq	r3, r8, r1, lsr r0
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1b8 <_Min_Heap_Size+0x1b8>
     270:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     274:	76737572 			; <UNDEFINED> instruction: 0x76737572
     278:	4144542f 	cmpmi	r4, pc, lsr #8
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     27c:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
     280:	2f544f49 	svccs	0x00544f49
     284:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     288:	4d432f53 	stclmi	15, cr2, [r3, #-332]	; 0xfffffeb4
     28c:	6f432f33 	svcvs	0x00432f33
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     290:	75536572 	ldrbvc	r6, [r3, #-1394]	; 0xfffffa8e
     294:	726f7070 	rsbvc	r7, pc, #112	; 0x70
     298:	4f000074 	svcmi	0x00000074
     29c:	2e44454c 	cdpcs	5, 4, cr4, cr4, cr12, {2}
     2a0:	00010063 	andeq	r0, r1, r3, rrx
		return -1;
     2a4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     2a8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
	return 1;
     2ac:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
}
     2b0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     2b4:	00020068 	andeq	r0, r2, r8, rrx
     2b8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     2bc:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     2c0:	0300682e 	movweq	r6, #2094	; 0x82e
     2c4:	74730000 	ldrbtvc	r0, [r3], #-0
     2c8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     2cc:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
     2d0:	00040068 	andeq	r0, r4, r8, rrx
     2d4:	726f6300 	rsbvc	r6, pc, #0, 6
     2d8:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     2dc:	00682e33 	rsbeq	r2, r8, r3, lsr lr
     2e0:	6f000005 	svcvs	0x00000005
     2e4:	6664656c 	strbtvs	r6, [r4], -ip, ror #10
     2e8:	2e746e6f 	cdpcs	14, 7, cr6, cr4, cr15, {3}
     2ec:	00010068 	andeq	r0, r1, r8, rrx
     2f0:	05000000 	streq	r0, [r0, #-0]
     2f4:	00145802 	andseq	r5, r4, r2, lsl #16
     2f8:	01120308 	tsteq	r2, r8, lsl #6
     2fc:	02004d4d 	andeq	r4, r0, #4928	; 0x1340
     300:	20060104 	andcs	r0, r6, r4, lsl #2
     304:	005a7606 	subseq	r7, sl, r6, lsl #12
     308:	06010402 	streq	r0, [r1], -r2, lsl #8
     30c:	3d760620 	ldclcc	6, cr0, [r6, #-128]!	; 0xffffff80
     310:	02004c5a 	andeq	r4, r0, #23040	; 0x5a00
     314:	20060104 	andcs	r0, r6, r4, lsl #2
     318:	0d027606 	stceq	6, cr7, [r2, #-24]	; 0xffffffe8
     31c:	00010100 	andeq	r0, r1, r0, lsl #2
     320:	14d40205 	ldrbne	r0, [r4], #517	; 0x205
     324:	28030800 	stmdacs	r3, {fp}
     328:	853d5c01 	ldrhi	r5, [sp, #-3073]!	; 0xfffff3ff
     32c:	01040200 	mrseq	r0, R12_usr
     330:	02002006 	andeq	r2, r0, #6
     334:	70060204 	andvc	r0, r6, r4, lsl #4
     338:	01040200 	mrseq	r0, R12_usr
     33c:	51063c06 	tstpl	r6, r6, lsl #24
     340:	01040200 	mrseq	r0, R12_usr
     344:	76062006 	strvc	r2, [r6], -r6
     348:	01000b02 	tsteq	r0, r2, lsl #22
     34c:	02050001 	andeq	r0, r5, #1
     350:	08001538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip}
     354:	5b013803 	blpl	4e368 <_Min_Stack_Size+0x4e168>
     358:	753e3e4c 	ldrvc	r3, [lr, #-3660]!	; 0xfffff1b4
     35c:	01040200 	mrseq	r0, R12_usr
     360:	76062006 	strvc	r2, [r6], -r6
     364:	5a3e3d68 	bpl	f8f90c <_Min_Stack_Size+0xf8f70c>
     368:	01040200 	mrseq	r0, R12_usr
     36c:	02002006 	andeq	r2, r0, #6
     370:	70060204 	andvc	r0, r6, r4, lsl #4
     374:	01040200 	mrseq	r0, R12_usr
     378:	02003c06 	andeq	r3, r0, #1536	; 0x600
     37c:	03060204 	movweq	r0, #25092	; 0x6204
     380:	02004a76 	andeq	r4, r0, #483328	; 0x76000
     384:	3c060104 	stfccs	f0, [r6], {4}
     388:	3c120306 	ldccc	3, cr0, [r2], {6}
     38c:	01040200 	mrseq	r0, R12_usr
     390:	76062006 	strvc	r2, [r6], -r6
     394:	01000c02 	tsteq	r0, r2, lsl #24
     398:	02050001 	andeq	r0, r5, #1
     39c:	080015e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip}
     3a0:	0100d403 	tsteq	r0, r3, lsl #8
     3a4:	753e4c5b 	ldrvc	r4, [lr, #-3163]!	; 0xfffff3a5
     3a8:	01040200 	mrseq	r0, R12_usr
     3ac:	76062006 	strvc	r2, [r6], -r6
     3b0:	4c3e3d68 	ldcmi	13, cr3, [lr], #-416	; 0xfffffe60
     3b4:	01040200 	mrseq	r0, R12_usr
     3b8:	02002006 	andeq	r2, r0, #6
     3bc:	70060204 	andvc	r0, r6, r4, lsl #4
     3c0:	01040200 	mrseq	r0, R12_usr
     3c4:	51063c06 	tstpl	r6, r6, lsl #24
     3c8:	01040200 	mrseq	r0, R12_usr
     3cc:	76062006 	strvc	r2, [r6], -r6
     3d0:	01000c02 	tsteq	r0, r2, lsl #24
     3d4:	02050001 	andeq	r0, r5, #1
     3d8:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
     3dc:	0100ed03 	tsteq	r0, r3, lsl #26
     3e0:	02007584 	andeq	r7, r0, #132, 10	; 0x21000000
     3e4:	20060104 	andcs	r0, r6, r4, lsl #2
     3e8:	009f7506 	addseq	r7, pc, r6, lsl #10
     3ec:	06010402 	streq	r0, [r1], -r2, lsl #8
     3f0:	83750620 	cmnhi	r5, #32, 12	; 0x2000000
     3f4:	01040200 	mrseq	r0, R12_usr
     3f8:	76062006 	strvc	r2, [r6], -r6
     3fc:	01000b02 	tsteq	r0, r2, lsl #22
     400:	02050001 	andeq	r0, r5, #1
     404:	0800170c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip}
     408:	0100f903 	tsteq	r0, r3, lsl #18	; <UNPREDICTABLE>
     40c:	913e2fe5 	teqls	lr, r5, ror #31
     410:	673e3e4c 	ldrvs	r3, [lr, -ip, asr #28]!
     414:	02003e3e 	andeq	r3, r0, #992	; 0x3e0
     418:	4a060104 	bmi	180830 <_Min_Stack_Size+0x180630>
     41c:	02040200 	andeq	r0, r4, #0, 4
     420:	04020090 	streq	r0, [r2], #-144	; 0xffffff70
     424:	02006604 	andeq	r6, r0, #4, 12	; 0x400000
     428:	4b060404 	blmi	181440 <_Min_Stack_Size+0x181240>
     42c:	01040200 	mrseq	r0, R12_usr
     430:	02002006 	andeq	r2, r0, #6
     434:	71060204 	tstvc	r6, r4, lsl #4
     438:	01040200 	mrseq	r0, R12_usr
     43c:	42063c06 	andmi	r3, r6, #1536	; 0x600
     440:	3d3e833d 	ldccc	3, cr8, [lr, #-244]!	; 0xffffff0c
     444:	040200ad 	streq	r0, [r2], #-173	; 0xffffff53
     448:	00200601 	eoreq	r0, r0, r1, lsl #12
     44c:	06020402 	streq	r0, [r2], -r2, lsl #8
     450:	04020072 	streq	r0, [r2], #-114	; 0xffffff8e
     454:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     458:	3d673d4f 	stclcc	13, cr3, [r7, #-316]!	; 0xfffffec4
     45c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     460:	004a0601 	subeq	r0, sl, r1, lsl #12
     464:	c8020402 	stmdagt	r2, {r1, sl}
     468:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     46c:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     470:	004b0604 	subeq	r0, fp, r4, lsl #12
     474:	06010402 	streq	r0, [r1], -r2, lsl #8
     478:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
     47c:	00720602 	rsbseq	r0, r2, r2, lsl #12
     480:	06010402 	streq	r0, [r1], -r2, lsl #8
     484:	0042063c 	subeq	r0, r2, ip, lsr r6
     488:	06010402 	streq	r0, [r1], -r2, lsl #8
     48c:	02760620 	rsbseq	r0, r6, #32, 12	; 0x2000000
     490:	0101000f 	tsteq	r1, pc
     494:	b8020500 	stmdalt	r2, {r8, sl}
     498:	03080018 	movweq	r0, #32792	; 0x8018
     49c:	ad0101a4 	stfges	f0, [r1, #-656]	; 0xfffffd70
     4a0:	3dc9212f 	stfcce	f2, [r9, #188]	; 0xbc
     4a4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     4a8:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     4ac:	02003d68 	andeq	r3, r0, #104, 26	; 0x1a00
     4b0:	3c060104 	stfccs	f0, [r6], {4}
     4b4:	77035a06 	strvc	r5, [r3, -r6, lsl #20]
     4b8:	660c033c 			; <UNDEFINED> instruction: 0x660c033c
     4bc:	01000402 	tsteq	r0, r2, lsl #8
     4c0:	02050001 	andeq	r0, r5, #1
     4c4:	00000000 	andeq	r0, r0, r0
     4c8:	0101b503 	tsteq	r1, r3, lsl #10
     4cc:	020030e5 	andeq	r3, r0, #229	; 0xe5
     4d0:	66060104 	strvs	r0, [r6], -r4, lsl #2
     4d4:	3e594b06 	vnmlscc.f64	d20, d9, d6
     4d8:	3d3d683d 	ldccc	8, cr6, [sp, #-244]!	; 0xffffff0c
     4dc:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
     4e0:	00200601 	eoreq	r0, r0, r1, lsl #12
     4e4:	06020402 	streq	r0, [r2], -r2, lsl #8
     4e8:	04020072 	streq	r0, [r2], #-114	; 0xffffff8e
     4ec:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     4f0:	0402004f 	streq	r0, [r2], #-79	; 0xffffffb1
     4f4:	00200601 	eoreq	r0, r0, r1, lsl #12
     4f8:	06020402 	streq	r0, [r2], -r2, lsl #8
     4fc:	00747503 	rsbseq	r7, r4, r3, lsl #10
     500:	06010402 	streq	r0, [r1], -r2, lsl #8
     504:	0e03063c 	mcreq	6, 0, r0, cr3, cr12, {1}
     508:	000a024a 	andeq	r0, sl, sl, asr #4
     50c:	04fa0101 	ldrbteq	r0, [sl], #257	; 0x101
     510:	00020000 	andeq	r0, r2, r0
     514:	000000a1 	andeq	r0, r0, r1, lsr #1
     518:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     51c:	0101000d 	tsteq	r1, sp
     520:	00000101 	andeq	r0, r0, r1, lsl #2
     524:	00000100 	andeq	r0, r0, r0, lsl #2
     528:	6f682f01 	svcvs	0x00682f01
     52c:	762f656d 	strtvc	r6, [pc], -sp, ror #10
     530:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
     534:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
     538:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
     53c:	544f492d 	strbpl	r4, [pc], #-2349	; 544 <_Min_Stack_Size+0x344>
     540:	6874452f 	ldmdavs	r4!, {r0, r1, r2, r3, r5, r8, sl, lr}^
     544:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     548:	752f0074 	strvc	r0, [pc, #-116]!	; 4dc <_Min_Stack_Size+0x2dc>
     54c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     550:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     554:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     558:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     55c:	616d2f62 	cmnvs	sp, r2, ror #30
     560:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     564:	752f0065 	strvc	r0, [pc, #-101]!	; 507 <_Min_Stack_Size+0x307>
     568:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     56c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     570:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     574:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     578:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
     57c:	73000073 	movwvc	r0, #115	; 0x73
     580:	656b636f 	strbvs	r6, [fp, #-879]!	; 0xfffffc91
     584:	00632e74 	rsbeq	r2, r3, r4, ror lr
     588:	5f000001 	svcpl	0x00000001
     58c:	61666564 	cmnvs	r6, r4, ror #10
     590:	5f746c75 	svcpl	0x00746c75
     594:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     598:	00682e73 	rsbeq	r2, r8, r3, ror lr
     59c:	5f000002 	svcpl	0x00000002
     5a0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     5a4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     5a8:	00000300 	andeq	r0, r0, r0, lsl #6
     5ac:	6b636f73 	blvs	18dc380 <_Min_Stack_Size+0x18dc180>
     5b0:	682e7465 	stmdavs	lr!, {r0, r2, r5, r6, sl, ip, sp, lr}
     5b4:	00000100 	andeq	r0, r0, r0, lsl #2
     5b8:	02050000 	andeq	r0, r5, #0
     5bc:	0800193c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip}
     5c0:	0100d003 	tsteq	r0, r3
     5c4:	040200e5 	streq	r0, [r2], #-229	; 0xffffff1b
     5c8:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     5cc:	740c033d 	strvc	r0, [ip], #-829	; 0xfffffcc3
     5d0:	033c7903 	teqeq	ip, #49152	; 0xc000
     5d4:	02002009 	andeq	r2, r0, #9
     5d8:	58060104 	stmdapl	r6, {r2, r8}
     5dc:	033e4106 	teqeq	lr, #-2147483647	; 0x80000001
     5e0:	71035812 	tstvc	r3, r2, lsl r8
     5e4:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
     5e8:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     5ec:	02005a3f 	andeq	r5, r0, #258048	; 0x3f000
     5f0:	4a060104 	bmi	180a08 <_Min_Stack_Size+0x180808>
     5f4:	005a3f06 	subseq	r3, sl, r6, lsl #30
     5f8:	06010402 	streq	r0, [r1], -r2, lsl #8
     5fc:	7703064a 	strvc	r0, [r3, -sl, asr #12]
     600:	2e0c033c 	mcrcs	3, 0, r0, cr12, cr12, {1}
     604:	21084b25 	tstcs	r8, r5, lsr #22
     608:	0200753e 	andeq	r7, r0, #260046848	; 0xf800000
     60c:	66060104 	strvs	r0, [r6], -r4, lsl #2
     610:	ad084c06 	stcge	12, cr4, [r8, #-24]	; 0xffffffe8
     614:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
     618:	06200601 	strteq	r0, [r0], -r1, lsl #12
     61c:	e5e5e5bc 	strb	lr, [r5, #1468]!	; 0x5bc
     620:	02004b59 	andeq	r4, r0, #91136	; 0x16400
     624:	20060104 	andcs	r0, r6, r4, lsl #2
     628:	022fbb06 	eoreq	fp, pc, #6144	; 0x1800
     62c:	0101000e 	tsteq	r1, lr
     630:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
     634:	0308001b 	movweq	r0, #32795	; 0x801b
     638:	59010191 	stmdbpl	r1, {r0, r4, r7, r8}
     63c:	01040200 	mrseq	r0, R12_usr
     640:	3e063c06 	cdpcc	12, 0, cr3, cr6, cr6, {0}
     644:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
     648:	06200601 	strteq	r0, [r0], -r1, lsl #12
     64c:	59e59fbc 	stmibpl	r5!, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip, pc}^
     650:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
     654:	06200601 	strteq	r0, [r0], -r1, lsl #12
     658:	0a0221bb 	beq	88d4c <_Min_Stack_Size+0x88b4c>
     65c:	00010100 	andeq	r0, r1, r0, lsl #2
     660:	00000205 	andeq	r0, r0, r5, lsl #4
     664:	a1030000 	mrsge	r0, (UNDEF: 3)
     668:	00590101 	subseq	r0, r9, r1, lsl #2
     66c:	06010402 	streq	r0, [r1], -r2, lsl #8
     670:	003d063c 	eorseq	r0, sp, ip, lsr r6
     674:	06010402 	streq	r0, [r1], -r2, lsl #8
     678:	003d06ba 	ldrhteq	r0, [sp], -sl
     67c:	06010402 	streq	r0, [r1], -r2, lsl #8
     680:	9f3d06ba 	svcls	0x003d06ba
     684:	01040200 	mrseq	r0, R12_usr
     688:	bb062006 	bllt	1886a8 <_Min_Stack_Size+0x1884a8>
     68c:	374bbc22 	strbcc	fp, [fp, -r2, lsr #24]
     690:	040221c2 	streq	r2, [r2], #-450	; 0xfffffe3e
     694:	00010100 	andeq	r0, r1, r0, lsl #2
     698:	1bfc0205 	blne	fff00eb4 <BootRAM+0xee71655>
     69c:	b4030800 	strlt	r0, [r3], #-2048	; 0xfffff800
     6a0:	00830101 	addeq	r0, r3, r1, lsl #2
     6a4:	06010402 	streq	r0, [r1], -r2, lsl #8
     6a8:	003d063c 	eorseq	r0, sp, ip, lsr r6
     6ac:	06010402 	streq	r0, [r1], -r2, lsl #8
     6b0:	003d06ba 	ldrhteq	r0, [sp], -sl
     6b4:	06010402 	streq	r0, [r1], -r2, lsl #8
     6b8:	003d06ba 	ldrhteq	r0, [sp], -sl
     6bc:	06020402 	streq	r0, [r2], -r2, lsl #8
     6c0:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
     6c4:	3d064a03 	vstrcc	s8, [r6, #-12]
     6c8:	01040200 	mrseq	r0, R12_usr
     6cc:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
     6d0:	9fb008ad 	svcls	0x00b008ad
     6d4:	01040200 	mrseq	r0, R12_usr
     6d8:	bb062006 	bllt	1886f8 <_Min_Stack_Size+0x1884f8>
     6dc:	01040200 	mrseq	r0, R12_usr
     6e0:	31069e06 	tstcc	r6, r6, lsl #28
     6e4:	7803a2d8 	stmdavc	r3, {r3, r4, r6, r7, r9, sp, pc}
     6e8:	ba0f033c 	blt	3c13e0 <_Min_Stack_Size+0x3c11e0>
     6ec:	00060221 	andeq	r0, r6, r1, lsr #4
     6f0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     6f4:	00000002 	andeq	r0, r0, r2
     6f8:	01d50300 	bicseq	r0, r5, r0, lsl #6
     6fc:	02005901 	andeq	r5, r0, #16384	; 0x4000
     700:	3c060104 	stfccs	f0, [r6], {4}
     704:	02003d06 	andeq	r3, r0, #384	; 0x180
     708:	ba060104 	blt	180b20 <_Min_Stack_Size+0x180920>
     70c:	00a03d06 	adceq	r3, r0, r6, lsl #26
     710:	06010402 	streq	r0, [r1], -r2, lsl #8
     714:	e5bb0620 	ldr	r0, [fp, #1568]!	; 0x620
     718:	01040200 	mrseq	r0, R12_usr
     71c:	31069e06 	tstcc	r6, r6, lsl #28
     720:	c2374bd8 	eorsgt	r4, r7, #216, 22	; 0x36000
     724:	00080221 	andeq	r0, r8, r1, lsr #4
     728:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     72c:	001d6802 	andseq	r6, sp, r2, lsl #16
     730:	01e90308 	mvneq	r0, r8, lsl #6
     734:	302f8301 	eorcc	r8, pc, r1, lsl #6
     738:	01040200 	mrseq	r0, R12_usr
     73c:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
     740:	01040200 	mrseq	r0, R12_usr
     744:	3d06ba06 	vstrcc	s22, [r6, #-24]	; 0xffffffe8
     748:	01040200 	mrseq	r0, R12_usr
     74c:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
     750:	040200ad 	streq	r0, [r2], #-173	; 0xffffff53
     754:	003c0601 	eorseq	r0, ip, r1, lsl #12
     758:	3c020402 	cfstrscc	mvf0, [r2], {2}
     75c:	c9a03d06 	stmibgt	r0!, {r1, r2, r8, sl, fp, ip, sp}
     760:	9e09035a 	mcrls	3, 0, r0, cr9, cr10, {2}
     764:	3e4b5af4 			; <UNDEFINED> instruction: 0x3e4b5af4
     768:	0200c930 	andeq	ip, r0, #48, 18	; 0xc0000
     76c:	4a060104 	bmi	180b84 <_Min_Stack_Size+0x180984>
     770:	ad673106 	stfgee	f3, [r7, #-24]!	; 0xffffffe8
     774:	01040200 	mrseq	r0, R12_usr
     778:	3e063c06 	cdpcc	12, 0, cr3, cr6, cr6, {0}
     77c:	02003e4b 	andeq	r3, r0, #1200	; 0x4b0
     780:	9e060104 	adflss	f0, f6, f4
     784:	02040200 	andeq	r0, r4, #0, 4
     788:	4b2f064a 	blmi	bc20b8 <_Min_Stack_Size+0xbc1eb8>
     78c:	a06a221f 	rsbge	r2, sl, pc, lsl r2
     790:	01040200 	mrseq	r0, R12_usr
     794:	bb062006 	bllt	1887b4 <_Min_Stack_Size+0x1885b4>
     798:	090221c9 	stmdbeq	r2, {r0, r3, r6, r7, r8, sp}
     79c:	00010100 	andeq	r0, r1, r0, lsl #2
     7a0:	1f5c0205 	svcne	0x005c0205
     7a4:	a4030800 	strge	r0, [r3], #-2048	; 0xfffff800
     7a8:	2f830102 	svccs	0x00830102
     7ac:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     7b0:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     7b4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     7b8:	06ba0601 	ldrteq	r0, [sl], r1, lsl #12
     7bc:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     7c0:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     7c4:	0200c93e 	andeq	ip, r0, #1015808	; 0xf8000
     7c8:	4a060104 	bmi	180be0 <_Min_Stack_Size+0x1809e0>
     7cc:	ad673106 	stfgee	f3, [r7, #-24]!	; 0xffffffe8
     7d0:	083d3e3e 	ldmdaeq	sp!, {r1, r2, r3, r4, r5, r9, sl, fp, ip, sp}
     7d4:	4b414b30 	blmi	105349c <_Min_Stack_Size+0x105329c>
     7d8:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
     7dc:	009e0601 	addseq	r0, lr, r1, lsl #12
     7e0:	3c020402 	cfstrscc	mvf0, [r2], {2}
     7e4:	033d2f06 	teqeq	sp, #6, 30
     7e8:	0e032071 	mcreq	0, 0, r2, cr3, cr1, {3}
     7ec:	0200222e 	andeq	r2, r0, #-536870910	; 0xe0000002
     7f0:	4a060104 	bmi	180c08 <_Min_Stack_Size+0x180a08>
     7f4:	9f672f06 	svcls	0x00672f06
     7f8:	01040200 	mrseq	r0, R12_usr
     7fc:	bb062006 	bllt	18881c <_Min_Stack_Size+0x18861c>
     800:	00070221 	andeq	r0, r7, r1, lsr #4
     804:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     808:	0020c802 	eoreq	ip, r0, r2, lsl #16
     80c:	02cd0308 	sbceq	r0, sp, #8, 6	; 0x20000000
     810:	2f2f9101 	svccs	0x002f9101
     814:	01040200 	mrseq	r0, R12_usr
     818:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
     81c:	00243adc 	ldrdeq	r3, [r4], -ip	; <UNPREDICTABLE>
     820:	06010402 	streq	r0, [r1], -r2, lsl #8
     824:	003d063c 	eorseq	r0, sp, ip, lsr r6
     828:	06010402 	streq	r0, [r1], -r2, lsl #8
     82c:	003d064a 	eorseq	r0, sp, sl, asr #12
     830:	06010402 	streq	r0, [r1], -r2, lsl #8
     834:	ad3d063c 	ldcge	6, cr0, [sp, #-240]!	; 0xffffff10
     838:	01040200 	mrseq	r0, R12_usr
     83c:	02003c06 	andeq	r3, r0, #1536	; 0x600
     840:	063c0204 	ldrteq	r0, [ip], -r4, lsl #4
     844:	ad08ad3e 	stcge	13, cr10, [r8, #-248]	; 0xffffff08
     848:	040200c9 	streq	r0, [r2], #-201	; 0xffffff37
     84c:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     850:	02006731 	andeq	r6, r0, #12845056	; 0xc40000
     854:	ba060104 	blt	180c6c <_Min_Stack_Size+0x180a6c>
     858:	02003d06 	andeq	r3, r0, #384	; 0x180
     85c:	9e060104 	adflss	f0, f6, f4
     860:	02040200 	andeq	r0, r4, #0, 4
     864:	4b2f064a 	blmi	bc2194 <_Min_Stack_Size+0xbc1f94>
     868:	a06c221f 	rsbge	r2, ip, pc, lsl r2
     86c:	01040200 	mrseq	r0, R12_usr
     870:	c0062006 	andgt	r2, r6, r6
     874:	039f5ac9 	orrseq	r5, pc, #823296	; 0xc9000
     878:	7903200b 	stmdbvc	r3, {r0, r1, r3, sp}
     87c:	339f5a2e 	orrscc	r5, pc, #188416	; 0x2e000
     880:	01000602 	tsteq	r0, r2, lsl #12
     884:	02050001 	andeq	r0, r5, #1
     888:	080022d0 	stmdaeq	r0, {r4, r6, r7, r9, sp}
     88c:	01038d03 	tsteq	r3, r3, lsl #26
     890:	02003093 	andeq	r3, r0, #147	; 0x93
     894:	3c060104 	stfccs	f0, [r6], {4}
     898:	0b033e06 	bleq	d00b8 <_Min_Stack_Size+0xcfeb8>
     89c:	3c7903f2 	ldclcc	3, cr0, [r9], #-968	; 0xfffffc38
     8a0:	00200903 	eoreq	r0, r0, r3, lsl #18
     8a4:	06010402 	streq	r0, [r1], -r2, lsl #8
     8a8:	6a3d063c 	bvs	f421a0 <_Min_Stack_Size+0xf41fa0>
     8ac:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
     8b0:	06ba0601 	ldrteq	r0, [sl], r1, lsl #12
     8b4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     8b8:	009e0601 	addseq	r0, lr, r1, lsl #12
     8bc:	3c020402 	cfstrscc	mvf0, [r2], {2}
     8c0:	1f3d2f06 	svcne	0x003d2f06
     8c4:	68854b23 	stmvs	r5, {r0, r1, r5, r8, r9, fp, lr}
     8c8:	02009f75 	andeq	r9, r0, #468	; 0x1d4
     8cc:	20060104 	andcs	r0, r6, r4, lsl #2
     8d0:	4b3dbc06 	blmi	f6f8f0 <_Min_Stack_Size+0xf6f6f0>
     8d4:	9f4b4b4b 	svcls	0x004b4b4b
     8d8:	004cd767 	subeq	sp, ip, r7, ror #14
     8dc:	06010402 	streq	r0, [r1], -r2, lsl #8
     8e0:	5c3d0674 	ldcpl	6, cr0, [sp], #-464	; 0xfffffe30
     8e4:	75682267 	strbvc	r2, [r8, #-615]!	; 0xfffffd99
     8e8:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
     8ec:	06200601 	strteq	r0, [r0], -r1, lsl #12
     8f0:	84d767bc 	ldrbhi	r6, [r7], #1980	; 0x7bc
     8f4:	004c3e4b 	subeq	r3, ip, fp, asr #28
     8f8:	06010402 	streq	r0, [r1], -r2, lsl #8
     8fc:	593d0674 	ldmdbpl	sp!, {r2, r4, r5, r6, r9, sl}
     900:	20190367 	andscs	r0, r9, r7, ror #6
     904:	a0225967 	eorge	r5, r2, r7, ror #18
     908:	01040200 	mrseq	r0, R12_usr
     90c:	bb062006 	bllt	18892c <_Min_Stack_Size+0x18872c>
     910:	040200ad 	streq	r0, [r2], #-173	; 0xffffff53
     914:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     918:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
     91c:	0a022101 	beq	88d28 <_Min_Stack_Size+0x88b28>
     920:	00010100 	andeq	r0, r1, r0, lsl #2
     924:	25cc0205 	strbcs	r0, [ip, #517]	; 0x205
     928:	81030800 	tsthi	r3, r0, lsl #16
     92c:	2f830104 	svccs	0x00830104
     930:	01040200 	mrseq	r0, R12_usr
     934:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
     938:	003d7708 	eorseq	r7, sp, r8, lsl #14
     93c:	06010402 	streq	r0, [r1], -r2, lsl #8
     940:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
     944:	1ecb0601 	cdpne	6, 12, cr0, cr11, cr1, {0}
     948:	01040200 	mrseq	r0, R12_usr
     94c:	02003c06 	andeq	r3, r0, #1536	; 0x600
     950:	e6060104 	str	r0, [r6], -r4, lsl #2
     954:	22bb3f1f 	adcscs	r3, fp, #31, 30	; 0x7c
     958:	22e522e5 	rsccs	r2, r5, #1342177294	; 0x5000000e
     95c:	01040200 	mrseq	r0, R12_usr
     960:	3d064a06 	vstrcc	s8, [r6, #-24]	; 0xffffffe8
     964:	22e522f3 	rsccs	r2, r5, #805306383	; 0x3000000f
     968:	01040200 	mrseq	r0, R12_usr
     96c:	3d064a06 	vstrcc	s8, [r6, #-24]	; 0xffffffe8
     970:	3ee622f3 	mcrcc	2, 7, r2, cr6, cr3, {7}
     974:	00060221 	andeq	r0, r6, r1, lsr #4
     978:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     97c:	00000002 	andeq	r0, r0, r2
     980:	04a90300 	strteq	r0, [r9], #768	; 0x300
     984:	02008401 	andeq	r8, r0, #16777216	; 0x1000000
     988:	3c060104 	stfccs	f0, [r6], {4}
     98c:	5b083d06 	blpl	20fdac <_Min_Stack_Size+0x20fbac>
     990:	22c922c9 	sbccs	r2, r9, #-1879048180	; 0x9000000c
     994:	ad22c908 			; <UNDEFINED> instruction: 0xad22c908
     998:	23c90822 	biccs	r0, r9, #2228224	; 0x220000
     99c:	01040200 	mrseq	r0, R12_usr
     9a0:	3e06ba06 	vmlacc.f32	s22, s12, s12
     9a4:	01040200 	mrseq	r0, R12_usr
     9a8:	3e06ba06 	vmlacc.f32	s22, s12, s12
     9ac:	9fd8229f 	svcls	0x00d8229f
     9b0:	0023de37 	eoreq	sp, r3, r7, lsr lr
     9b4:	06010402 	streq	r0, [r1], -r2, lsl #8
     9b8:	c93d06ba 	ldmdbgt	sp!, {r1, r3, r4, r5, r7, r9, sl}
     9bc:	02213e24 	eoreq	r3, r1, #36, 28	; 0x240
     9c0:	01010004 	tsteq	r1, r4
     9c4:	00020500 	andeq	r0, r2, r0, lsl #10
     9c8:	03000000 	movweq	r0, #0
     9cc:	830104db 	movwhi	r0, #5339	; 0x14db
     9d0:	01040200 	mrseq	r0, R12_usr
     9d4:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
     9d8:	c9152202 	ldmdbgt	r5, {r1, r9, sp}
     9dc:	c922c922 	stmdbgt	r2!, {r1, r5, r8, fp, lr, pc}
     9e0:	ad5a0822 	ldclge	8, cr0, [sl, #-136]	; 0xffffff78
     9e4:	23ad0822 			; <UNDEFINED> instruction: 0x23ad0822
     9e8:	01040200 	mrseq	r0, R12_usr
     9ec:	3d06ba06 	vstrcc	s22, [r6, #-24]	; 0xffffffe8
     9f0:	848423c9 	strhi	r2, [r4], #969	; 0x3c9
     9f4:	859f22c9 	ldrhi	r2, [pc, #713]	; cc5 <_Min_Stack_Size+0xac5>
     9f8:	0022671f 	eoreq	r6, r2, pc, lsl r7
     9fc:	06010402 	streq	r0, [r1], -r2, lsl #8
     a00:	593d06ba 	ldmdbpl	sp!, {r1, r3, r4, r5, r7, r9, sl}
     a04:	02213e22 	eoreq	r3, r1, #544	; 0x220
     a08:	01010009 	tsteq	r1, r9
     a0c:	0000047b 	andeq	r0, r0, fp, ror r4
     a10:	00ad0002 	adceq	r0, sp, r2
     a14:	01020000 	mrseq	r0, (UNDEF: 2)
     a18:	000d0efb 	strdeq	r0, [sp], -fp
     a1c:	01010101 	tsteq	r1, r1, lsl #2
     a20:	01000000 	mrseq	r0, (UNDEF: 0)
     a24:	2f010000 	svccs	0x00010000
     a28:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     a2c:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
     a30:	2f767375 	svccs	0x00767375
     a34:	53414454 	movtpl	r4, #5204	; 0x1454
     a38:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
     a3c:	452f544f 	strmi	r5, [pc, #-1103]!	; 5f5 <_Min_Stack_Size+0x3f5>
     a40:	72656874 	rsbvc	r6, r5, #116, 16	; 0x740000
     a44:	0074656e 	rsbseq	r6, r4, lr, ror #10
     a48:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     a4c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     a50:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     a54:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
     a58:	2f62696c 	svccs	0x0062696c
     a5c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     a60:	00656e69 	rsbeq	r6, r5, r9, ror #28
     a64:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     a68:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     a6c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     a70:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
     a74:	2f62696c 	svccs	0x0062696c
     a78:	00737973 	rsbseq	r7, r3, r3, ror r9
     a7c:	7a697700 	bvc	1a5e684 <_Min_Stack_Size+0x1a5e484>
     a80:	70696863 	rsbvc	r6, r9, r3, ror #16
     a84:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     a88:	00632e66 	rsbeq	r2, r3, r6, ror #28
     a8c:	5f000001 	svcpl	0x00000001
     a90:	61666564 	cmnvs	r6, r4, ror #10
     a94:	5f746c75 	svcpl	0x00746c75
     a98:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     a9c:	00682e73 	rsbeq	r2, r8, r3, ror lr
     aa0:	5f000002 	svcpl	0x00000002
     aa4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     aa8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     aac:	00000300 	andeq	r0, r0, r0, lsl #6
     ab0:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     ab4:	5f706968 	svcpl	0x00706968
     ab8:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     abc:	0100682e 	tsteq	r0, lr, lsr #16
     ac0:	00000000 	andeq	r0, r0, r0
     ac4:	277c0205 	ldrbcs	r0, [ip, -r5, lsl #4]!
     ac8:	2e030800 	cdpcs	8, 0, cr0, cr3, cr0, {0}
     acc:	04022e01 	streq	r2, [r2], #-3585	; 0xfffff1ff
     ad0:	00010100 	andeq	r0, r1, r0, lsl #2
     ad4:	27880205 	strcs	r0, [r8, r5, lsl #4]
     ad8:	34030800 	strcc	r0, [r3], #-2048	; 0xfffff800
     adc:	04022e01 	streq	r2, [r2], #-3585	; 0xfffff1ff
     ae0:	00010100 	andeq	r0, r1, r0, lsl #2
     ae4:	27940205 	ldrcs	r0, [r4, r5, lsl #4]
     ae8:	3a030800 	bcc	c2af0 <_Min_Stack_Size+0xc28f0>
     aec:	04022e01 	streq	r2, [r2], #-3585	; 0xfffff1ff
     af0:	00010100 	andeq	r0, r1, r0, lsl #2
     af4:	27a00205 	strcs	r0, [r0, r5, lsl #4]!
     af8:	c0030800 	andgt	r0, r3, r0, lsl #16
     afc:	022e0100 	eoreq	r0, lr, #0, 2
     b00:	01010004 	tsteq	r1, r4
     b04:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
     b08:	03080027 	movweq	r0, #32807	; 0x8027
     b0c:	4a0100c6 	bmi	40e2c <_Min_Stack_Size+0x40c2c>
     b10:	01000802 	tsteq	r0, r2, lsl #16
     b14:	02050001 	andeq	r0, r5, #1
     b18:	080027c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, sp}
     b1c:	0100cd03 	tsteq	r0, r3, lsl #26
     b20:	00080266 	andeq	r0, r8, r6, ror #4
     b24:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     b28:	0027e002 	eoreq	lr, r7, r2
     b2c:	00d30308 	sbcseq	r0, r3, r8, lsl #6
     b30:	05022e01 	streq	r2, [r2, #-3585]	; 0xfffff1ff
     b34:	00010100 	andeq	r0, r1, r0, lsl #2
     b38:	27f00205 	ldrbcs	r0, [r0, r5, lsl #4]!
     b3c:	d9030800 	stmdble	r3, {fp}
     b40:	02580100 	subseq	r0, r8, #0, 2
     b44:	01010005 	tsteq	r1, r5
     b48:	04020500 	streq	r0, [r2], #-1280	; 0xfffffb00
     b4c:	03080028 	movweq	r0, #32808	; 0x8028
     b50:	590100f0 	stmdbpl	r1, {r4, r5, r6, r7}
     b54:	01040200 	mrseq	r0, R12_usr
     b58:	3e063c06 	cdpcc	12, 0, cr3, cr6, cr6, {0}
     b5c:	3e3d4e3d 	mrccc	14, 1, r4, cr13, cr13, {1}
     b60:	01000c02 	tsteq	r0, r2, lsl #24
     b64:	02050001 	andeq	r0, r5, #1
     b68:	0800284c 	stmdaeq	r0, {r2, r3, r6, fp, sp}
     b6c:	0100fe03 	tsteq	r0, r3, lsl #28	; <UNPREDICTABLE>
     b70:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
     b74:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     b78:	3d4e3d3e 	stclcc	13, cr3, [lr, #-248]	; 0xffffff08
     b7c:	000c023e 	andeq	r0, ip, lr, lsr r2
     b80:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     b84:	00000002 	andeq	r0, r0, r2
     b88:	018c0300 	orreq	r0, ip, r0, lsl #6
     b8c:	02005901 	andeq	r5, r0, #16384	; 0x4000
     b90:	20060104 	andcs	r0, r6, r4, lsl #2
     b94:	02006806 	andeq	r6, r0, #393216	; 0x60000
     b98:	3c060104 	stfccs	f0, [r6], {4}
     b9c:	4e3d3e06 	cdpmi	14, 3, cr3, cr13, cr6, {0}
     ba0:	0b023e3d 	bleq	9049c <_Min_Stack_Size+0x9029c>
     ba4:	00010100 	andeq	r0, r1, r0, lsl #2
     ba8:	28940205 	ldmcs	r4, {r0, r2, r9}
     bac:	9c030800 	stcls	8, cr0, [r3], {-0}
     bb0:	00590101 	subseq	r0, r9, r1, lsl #2
     bb4:	06010402 	streq	r0, [r1], -r2, lsl #8
     bb8:	00680620 	rsbeq	r0, r8, r0, lsr #12
     bbc:	06010402 	streq	r0, [r1], -r2, lsl #8
     bc0:	3d3e063c 	ldccc	6, cr0, [lr, #-240]!	; 0xffffff10
     bc4:	023e3d4e 	eorseq	r3, lr, #4992	; 0x1380
     bc8:	0101000b 	tsteq	r1, fp
     bcc:	e8020500 	stmda	r2, {r8, sl}
     bd0:	03080028 	movweq	r0, #32808	; 0x8028
     bd4:	670101ac 	strvs	r0, [r1, -ip, lsr #3]
     bd8:	28024b2f 	stmdacs	r2, {r0, r1, r2, r3, r5, r8, r9, fp, lr}
     bdc:	3e222f15 	mcrcc	15, 1, r2, cr2, cr5, {0}
     be0:	59843e2f 	stmibpl	r4, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
     be4:	59226722 	stmdbpl	r2!, {r1, r5, r8, r9, sl, sp, lr}
     be8:	08236722 	stmdaeq	r3!, {r1, r5, r8, r9, sl, sp, lr}
     bec:	21082221 	tstcs	r8, r1, lsr #4
     bf0:	59594b23 	ldmdbpl	r9, {r0, r1, r5, r8, r9, fp, lr}^
     bf4:	234b5959 	movtcs	r5, #47449	; 0xb959
     bf8:	223d222f 	eorscs	r2, sp, #-268435454	; 0xf0000002
     bfc:	4b77243d 	blmi	1dc9cf8 <_Min_Stack_Size+0x1dc9af8>
     c00:	01040200 	mrseq	r0, R12_usr
     c04:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
     c08:	004b223d 	subeq	r2, fp, sp, lsr r2
     c0c:	06010402 	streq	r0, [r1], -r2, lsl #8
     c10:	3d3d063c 	ldccc	6, cr0, [sp, #-240]!	; 0xffffff10
     c14:	3c710322 	ldclcc	3, cr0, [r1], #-136	; 0xffffff78
     c18:	00201103 	eoreq	r1, r0, r3, lsl #2
     c1c:	21010402 	tstcs	r1, r2, lsl #8
     c20:	01000702 	tsteq	r0, r2, lsl #14
     c24:	02050001 	andeq	r0, r5, #1
     c28:	08002aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, sp}
     c2c:	0101f803 	tsteq	r1, r3, lsl #16	; <UNPREDICTABLE>
     c30:	3d230868 	stccc	8, cr0, [r3, #-416]!	; 0xfffffe60
     c34:	76223d22 	strtvc	r3, [r2], -r2, lsr #26
     c38:	223d2267 	eorscs	r2, sp, #1879048198	; 0x70000006
     c3c:	213e223d 	teqcs	lr, sp, lsr r2
     c40:	01000402 	tsteq	r0, r2, lsl #8
     c44:	02050001 	andeq	r0, r5, #1
     c48:	08002b20 	stmdaeq	r0, {r5, r8, r9, fp, sp}
     c4c:	01029403 	tsteq	r2, r3, lsl #8
     c50:	7508753f 	strvc	r7, [r8, #-1343]	; 0xfffffac1
     c54:	83753d4b 	cmnhi	r5, #4800	; 0x12c0
     c58:	04028383 	streq	r8, [r2], #-899	; 0xfffffc7d
     c5c:	00010100 	andeq	r0, r1, r0, lsl #2
     c60:	2bb80205 	blcs	fee0147c <BootRAM+0xdd71c1d>
     c64:	a2030800 	andge	r0, r3, #0, 16
     c68:	2f5a0102 	svccs	0x005a0102
     c6c:	002f3e2f 	eoreq	r3, pc, pc, lsr #28
     c70:	3d030402 	cfstrscc	mvf0, [r3, #-8]
     c74:	03040200 	movweq	r0, #16896	; 0x4200
     c78:	0402008f 	streq	r0, [r2], #-143	; 0xffffff71
     c7c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     c80:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
     c84:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     c88:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     c8c:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
     c90:	00f10304 	rscseq	r0, r1, r4, lsl #6
     c94:	06010402 	streq	r0, [r1], -r2, lsl #8
     c98:	3e4d0666 	cdpcc	6, 4, cr0, cr13, cr6, {3}
     c9c:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     ca0:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
     ca4:	008f0304 	addeq	r0, pc, r4, lsl #6
     ca8:	06010402 	streq	r0, [r1], -r2, lsl #8
     cac:	004c0666 	subeq	r0, ip, r6, ror #12
     cb0:	06010402 	streq	r0, [r1], -r2, lsl #8
     cb4:	003d064a 	eorseq	r0, sp, sl, asr #12
     cb8:	3d030402 	cfstrscc	mvf0, [r3, #-8]
     cbc:	03040200 	movweq	r0, #16896	; 0x4200
     cc0:	040200f1 	streq	r0, [r2], #-241	; 0xffffff0f
     cc4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     cc8:	0402214d 	streq	r2, [r2], #-333	; 0xfffffeb3
     ccc:	00010100 	andeq	r0, r1, r0, lsl #2
     cd0:	2cd00205 	lfmcs	f0, 2, [r0], {5}
     cd4:	bc030800 	stclt	8, cr0, [r3], {-0}
     cd8:	2f590102 	svccs	0x00590102
     cdc:	914a1003 	cmpls	sl, r3
     ce0:	00040268 	andeq	r0, r4, r8, ror #4
     ce4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     ce8:	002d0c02 	eoreq	r0, sp, r2, lsl #24
     cec:	02d40308 	sbcseq	r0, r4, #8, 6	; 0x20000000
     cf0:	2f2f3d01 	svccs	0x002f3d01
     cf4:	09038333 	stmdbeq	r3, {r0, r1, r4, r5, r8, r9, pc}
     cf8:	21752f66 	cmncs	r5, r6, ror #30
     cfc:	01000402 	tsteq	r0, r2, lsl #8
     d00:	02050001 	andeq	r0, r5, #1
     d04:	08002d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, sp}
     d08:	0102ec03 	tsteq	r2, r3, lsl #24
     d0c:	10032f59 	andne	r2, r3, r9, asr pc
     d10:	0268674a 	rsbeq	r6, r8, #19398656	; 0x1280000
     d14:	01010004 	tsteq	r1, r4
     d18:	90020500 	andls	r0, r2, r0, lsl #10
     d1c:	0308002d 	movweq	r0, #32813	; 0x802d
     d20:	3d010384 	stccc	3, cr0, [r1, #-528]	; 0xfffffdf0
     d24:	67332f2f 	ldrvs	r2, [r3, -pc, lsr #30]!
     d28:	2f660903 	svccs	0x00660903
     d2c:	04022175 	streq	r2, [r2], #-373	; 0xfffffe8b
     d30:	00010100 	andeq	r0, r1, r0, lsl #2
     d34:	2dd80205 	lfmcs	f0, 2, [r8, #20]
     d38:	9c030800 	stcls	8, cr0, [r3], {-0}
     d3c:	91440103 	cmpls	r4, r3, lsl #2
     d40:	022f323e 	eoreq	r3, pc, #-536870909	; 0xe0000003
     d44:	01010004 	tsteq	r1, r4
     d48:	08020500 	stmdaeq	r2, {r8, sl}
     d4c:	0308002e 	movweq	r0, #32814	; 0x802e
     d50:	3d0103b1 	stccc	3, cr0, [r1, #-708]	; 0xfffffd3c
     d54:	323e9135 	eorscc	r9, lr, #1073741837	; 0x4000000d
     d58:	0004022f 	andeq	r0, r4, pc, lsr #4
     d5c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     d60:	002e3c02 	eoreq	r3, lr, r2, lsl #24
     d64:	03c60308 	biceq	r0, r6, #8, 6	; 0x20000000
     d68:	4b673d01 	blmi	19d0174 <_Min_Stack_Size+0x19cff74>
     d6c:	674b6767 	strbvs	r6, [fp, -r7, ror #14]
     d70:	01000402 	tsteq	r0, r2, lsl #8
     d74:	02050001 	andeq	r0, r5, #1
     d78:	08002e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, sp}
     d7c:	0103d003 	tsteq	r3, r3
     d80:	5a4b2f4b 	bpl	12ccab4 <_Min_Stack_Size+0x12cc8b4>
     d84:	4c5b4b4b 	mrrcmi	11, 4, r4, fp, cr11
     d88:	4b5c5a4b 	blmi	17176bc <_Min_Stack_Size+0x17174bc>
     d8c:	022f674f 	eoreq	r6, pc, #20709376	; 0x13c0000
     d90:	01010004 	tsteq	r1, r4
     d94:	10020500 	andne	r0, r2, r0, lsl #10
     d98:	0308002f 	movweq	r0, #32815	; 0x802f
     d9c:	4b0103ee 	blmi	41d5c <_Min_Stack_Size+0x41b5c>
     da0:	78ad672f 	stmiavc	sp!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}
     da4:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
     da8:	3d223d95 	stccc	13, cr3, [r2, #-596]!	; 0xfffffdac
     dac:	223d9522 	eorscs	r9, sp, #142606336	; 0x8800000
     db0:	0402223d 	streq	r2, [r2], #-573	; 0xfffffdc3
     db4:	00010100 	andeq	r0, r1, r0, lsl #2
     db8:	00000205 	andeq	r0, r0, r5, lsl #4
     dbc:	95030000 	strls	r0, [r3, #-0]
     dc0:	674b0104 	strbvs	r0, [fp, -r4, lsl #2]
     dc4:	0402adad 	streq	sl, [r2], #-3501	; 0xfffff253
     dc8:	00010100 	andeq	r0, r1, r0, lsl #2
     dcc:	2fa80205 	svccs	0x00a80205
     dd0:	9c030800 	stcls	8, cr0, [r3], {-0}
     dd4:	2f590104 	svccs	0x00590104
     dd8:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
     ddc:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     de0:	5a3d4b3d 	bpl	f53adc <_Min_Stack_Size+0xf538dc>
     de4:	672f674b 	strvs	r6, [pc, -fp, asr #14]!
     de8:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
     dec:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     df0:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
     df4:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     df8:	04022f30 	streq	r2, [r2], #-3888	; 0xfffff0d0
     dfc:	00010100 	andeq	r0, r1, r0, lsl #2
     e00:	303c0205 	eorscc	r0, ip, r5, lsl #4
     e04:	b6030800 	strlt	r0, [r3], -r0, lsl #16
     e08:	754b0104 	strbvc	r0, [fp, #-260]	; 0xfffffefc
     e0c:	4b838383 	blmi	fe0e1c20 <BootRAM+0xd0523c1>
     e10:	4b4b4b4b 	blmi	12d3b44 <_Min_Stack_Size+0x12d3944>
     e14:	01000902 	tsteq	r0, r2, lsl #18
     e18:	02050001 	andeq	r0, r5, #1
     e1c:	080030bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, sp}
     e20:	0104c303 	tsteq	r4, r3, lsl #6
     e24:	8383754b 	orrhi	r7, r3, #314572800	; 0x12c00000
     e28:	4b4b4b83 	blmi	12d3c3c <_Min_Stack_Size+0x12d3a3c>
     e2c:	09024b4b 	stmdbeq	r2, {r0, r1, r3, r6, r8, r9, fp, lr}
     e30:	00010100 	andeq	r0, r1, r0, lsl #2
     e34:	313c0205 	teqcc	ip, r5, lsl #4
     e38:	d0030800 	andle	r0, r3, r0, lsl #16
     e3c:	32590104 	subscc	r0, r9, #4, 2
     e40:	01040200 	mrseq	r0, R12_usr
     e44:	3e065806 	cdpcc	8, 0, cr5, cr6, cr6, {0}
     e48:	21594b59 	cmpcs	r9, r9, asr fp
     e4c:	01000402 	tsteq	r0, r2, lsl #8
     e50:	02050001 	andeq	r0, r5, #1
     e54:	08003180 	stmdaeq	r0, {r7, r8, ip, sp}
     e58:	0104de03 	tsteq	r4, r3, lsl #28
     e5c:	02024b2f 	andeq	r4, r2, #48128	; 0xbc00
     e60:	00010100 	andeq	r0, r1, r0, lsl #2
     e64:	31900205 	orrscc	r0, r0, r5, lsl #4
     e68:	e3030800 	movw	r0, #14336	; 0x3800
     e6c:	754b0104 	strbvc	r0, [fp, #-260]	; 0xfffffefc
     e70:	04022108 	streq	r2, [r2], #-264	; 0xfffffef8
     e74:	00010100 	andeq	r0, r1, r0, lsl #2
     e78:	31d40205 	bicscc	r0, r4, r5, lsl #4
     e7c:	e9030800 	stmdb	r3, {fp}
     e80:	834b0104 	movthi	r0, #45316	; 0xb104
     e84:	04022108 	streq	r2, [r2], #-264	; 0xfffffef8
     e88:	d8010100 	stmdale	r1, {r8}
     e8c:	02000001 	andeq	r0, r0, #1
     e90:	0000b700 	andeq	fp, r0, r0, lsl #14
     e94:	fb010200 	blx	4169e <_Min_Stack_Size+0x4149e>
     e98:	01000d0e 	tsteq	r0, lr, lsl #26
     e9c:	00010101 	andeq	r0, r1, r1, lsl #2
     ea0:	00010000 	andeq	r0, r1, r0
     ea4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     ea8:	2f656d6f 	svccs	0x00656d6f
     eac:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
     eb0:	542f7673 	strtpl	r7, [pc], #-1651	; eb8 <_Min_Stack_Size+0xcb8>
     eb4:	41534144 	cmpmi	r3, r4, asr #2
     eb8:	4f492d54 	svcmi	0x00492d54
     ebc:	74452f54 	strbvc	r2, [r5], #-3924	; 0xfffff0ac
     ec0:	6e726568 	cdpvs	5, 7, cr6, cr2, cr8, {3}
     ec4:	572f7465 	strpl	r7, [pc, -r5, ror #8]!
     ec8:	30303535 	eorscc	r3, r0, r5, lsr r5
     ecc:	73752f00 	cmnvc	r5, #0, 30
     ed0:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     ed4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     ed8:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     edc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     ee0:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
     ee4:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
     ee8:	73752f00 	cmnvc	r5, #0, 30
     eec:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     ef0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     ef4:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     ef8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     efc:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
     f00:	452f2e00 	strmi	r2, [pc, #-3584]!	; 108 <_Min_Heap_Size+0x108>
     f04:	72656874 	rsbvc	r6, r5, #116, 16	; 0x740000
     f08:	0074656e 	rsbseq	r6, r4, lr, ror #10
     f0c:	35357700 	ldrcc	r7, [r5, #-1792]!	; 0xfffff900
     f10:	632e3030 			; <UNDEFINED> instruction: 0x632e3030
     f14:	00000100 	andeq	r0, r0, r0, lsl #2
     f18:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     f1c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     f20:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     f24:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     f28:	00000200 	andeq	r0, r0, r0, lsl #4
     f2c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     f30:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     f34:	00030068 	andeq	r0, r3, r8, rrx
     f38:	7a697700 	bvc	1a5eb40 <_Min_Stack_Size+0x1a5e940>
     f3c:	70696863 	rsbvc	r6, r9, r3, ror #16
     f40:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     f44:	00682e66 	rsbeq	r2, r8, r6, ror #28
     f48:	00000004 	andeq	r0, r0, r4
     f4c:	18020500 	stmdane	r2, {r8, sl}
     f50:	03080032 	movweq	r0, #32818	; 0x8032
     f54:	3d4d0134 	stfcce	f0, [sp, #-208]	; 0xffffff30
     f58:	753c0c03 	ldrvc	r0, [ip, #-3075]!	; 0xfffff3fd
     f5c:	0f036775 	svceq	0x00036775
     f60:	213d3d58 	teqcs	sp, r8, asr sp
     f64:	01000602 	tsteq	r0, r2, lsl #12
     f68:	02050001 	andeq	r0, r5, #1
     f6c:	08003278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, sp}
     f70:	0100dc03 	tsteq	r0, r3, lsl #24
     f74:	51413d67 	cmppl	r1, r7, ror #26
     f78:	03677575 	cmneq	r7, #490733568	; 0x1d400000
     f7c:	3d3d580f 	ldccc	8, cr5, [sp, #-60]!	; 0xffffffc4
     f80:	01000702 	tsteq	r0, r2, lsl #14
     f84:	02050001 	andeq	r0, r5, #1
     f88:	080032e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip, sp}
     f8c:	01018103 	tsteq	r1, r3, lsl #2
     f90:	3d2f2f75 	stccc	15, cr2, [pc, #-468]!	; dc4 <_Min_Stack_Size+0xbc4>
     f94:	67757542 	ldrbvs	r7, [r5, -r2, asr #10]!
     f98:	03040200 	movweq	r0, #16896	; 0x4200
     f9c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     fa0:	02008103 	andeq	r8, r0, #-1073741824	; 0xc0000000
     fa4:	3c060104 	stfccs	f0, [r6], {4}
     fa8:	4a3b0306 	bmi	ec1bc8 <_Min_Stack_Size+0xec19c8>
     fac:	07023d3d 	smladxeq	r2, sp, sp, r3
     fb0:	00010100 	andeq	r0, r1, r0, lsl #2
     fb4:	336c0205 	cmncc	ip, #1342177280	; 0x50000000
     fb8:	ce030800 	cdpgt	8, 0, cr0, cr3, cr0, {0}
     fbc:	2f750101 	svccs	0x00750101
     fc0:	4b413d2f 	blmi	1050484 <_Min_Stack_Size+0x1050284>
     fc4:	00677575 	rsbeq	r7, r7, r5, ror r5
     fc8:	3d030402 	cfstrscc	mvf0, [r3, #-8]
     fcc:	03040200 	movweq	r0, #16896	; 0x4200
     fd0:	04020081 	streq	r0, [r2], #-129	; 0xffffff7f
     fd4:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     fd8:	3d4a3b03 	vstrcc	d19, [sl, #-12]
     fdc:	0007023d 	andeq	r0, r7, sp, lsr r2
     fe0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
     fe4:	0033fc02 	eorseq	pc, r3, r2, lsl #24
     fe8:	029c0308 	addseq	r0, ip, #8, 6	; 0x20000000
     fec:	ad4d5901 	vstrge.16	s11, [sp, #-2]	; <UNPREDICTABLE>
     ff0:	f4ad3ef3 	vld3.<illegal width 64>	{d3[],d5[],d7[]}, [sp :<bad align 192>], r3
     ff4:	0402214b 	streq	r2, [r2], #-331	; 0xfffffeb5
     ff8:	00010100 	andeq	r0, r1, r0, lsl #2
     ffc:	34940205 	ldrcc	r0, [r4], #517	; 0x205
    1000:	ad030800 	stcge	8, cr0, [r3, #-0]
    1004:	4d590102 	ldfmie	f0, [r9, #-8]
    1008:	ad3ef3ad 	ldcge	3, cr15, [lr, #-692]!	; 0xfffffd4c
    100c:	02214bf4 	eoreq	r4, r1, #244, 22	; 0x3d000
    1010:	01010004 	tsteq	r1, r4
    1014:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    1018:	03080035 	movweq	r0, #32821	; 0x8035
    101c:	830102bd 	movwhi	r0, #4797	; 0x12bd
    1020:	083d2f2f 	ldmdaeq	sp!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
    1024:	4b688392 	blmi	1a21e74 <_Min_Stack_Size+0x1a21c74>
    1028:	ba087903 	blt	21f43c <_Min_Stack_Size+0x21f23c>
    102c:	00030228 	andeq	r0, r3, r8, lsr #4
    1030:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1034:	0035e402 	eorseq	lr, r5, r2, lsl #8
    1038:	02cb0308 	sbceq	r0, fp, #8, 6	; 0x20000000
    103c:	302f8301 	eorcc	r8, pc, r1, lsl #6
    1040:	8491083d 	ldrhi	r0, [r1], #2109	; 0x83d
    1044:	79034c67 	stmdbvc	r3, {r0, r1, r2, r5, r6, sl, fp, lr}
    1048:	0228ba08 	eoreq	fp, r8, #8, 20	; 0x8000
    104c:	01010003 	tsteq	r1, r3
    1050:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    1054:	03080036 	movweq	r0, #32822	; 0x8036
    1058:	830102db 	movwhi	r0, #4827	; 0x12db
    105c:	4b91082f 	blmi	fe443120 <BootRAM+0xd3b38c1>
    1060:	0402ad08 	streq	sl, [r2], #-3336	; 0xfffff2f8
    1064:	10010100 	andne	r0, r1, r0, lsl #2
    1068:	02000005 	andeq	r0, r0, #5
    106c:	0000a200 	andeq	sl, r0, r0, lsl #4
    1070:	fb010200 	blx	4187a <_Min_Stack_Size+0x4167a>
    1074:	01000d0e 	tsteq	r0, lr, lsl #26
    1078:	00010101 	andeq	r0, r1, r1, lsl #2
    107c:	00010000 	andeq	r0, r1, r0
    1080:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    1084:	2f656d6f 	svccs	0x00656d6f
    1088:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    108c:	542f7673 	strtpl	r7, [pc], #-1651	; 1094 <_Min_Stack_Size+0xe94>
    1090:	41534144 	cmpmi	r3, r4, asr #2
    1094:	4f492d54 	svcmi	0x00492d54
    1098:	6e492f54 	mcrvs	15, 2, r2, cr9, cr4, {2}
    109c:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    10a0:	442f7465 	strtmi	r7, [pc], #-1125	; 10a8 <_Min_Stack_Size+0xea8>
    10a4:	00504348 	subseq	r4, r0, r8, asr #6
    10a8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    10ac:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    10b0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    10b4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    10b8:	2f62696c 	svccs	0x0062696c
    10bc:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    10c0:	00656e69 	rsbeq	r6, r5, r9, ror #28
    10c4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    10c8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    10cc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    10d0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    10d4:	2f62696c 	svccs	0x0062696c
    10d8:	00737973 	rsbseq	r7, r3, r3, ror r9
    10dc:	63686400 	cmnvs	r8, #0, 8
    10e0:	00632e70 	rsbeq	r2, r3, r0, ror lr
    10e4:	5f000001 	svcpl	0x00000001
    10e8:	61666564 	cmnvs	r6, r4, ror #10
    10ec:	5f746c75 	svcpl	0x00746c75
    10f0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    10f4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    10f8:	5f000002 	svcpl	0x00000002
    10fc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1100:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1104:	00000300 	andeq	r0, r0, r0, lsl #6
    1108:	70636864 	rsbvc	r6, r3, r4, ror #16
    110c:	0100682e 	tsteq	r0, lr, lsr #16
    1110:	00000000 	andeq	r0, r0, r0
    1114:	372c0205 	strcc	r0, [ip, -r5, lsl #4]!
    1118:	ca030800 	bgt	c3120 <_Min_Stack_Size+0xc2f20>
    111c:	022e0100 	eoreq	r0, lr, #0, 2
    1120:	01010004 	tsteq	r1, r4
    1124:	38020500 	stmdacc	r2, {r8, sl}
    1128:	03080037 	movweq	r0, #32823	; 0x8037
    112c:	300100cd 	andcc	r0, r1, sp, asr #1
    1130:	02673d4b 	rsbeq	r3, r7, #4800	; 0x12c0
    1134:	01010005 	tsteq	r1, r5
    1138:	60020500 	andvs	r0, r2, r0, lsl #10
    113c:	03080037 	movweq	r0, #32823	; 0x8037
    1140:	300100d5 	ldrdcc	r0, [r1], -r5
    1144:	75683d4b 	strbvc	r3, [r8, #-3403]!	; 0xfffff2b5
    1148:	09023d2f 	stmdbeq	r2, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}
    114c:	00010100 	andeq	r0, r1, r0, lsl #2
    1150:	37a80205 	strcc	r0, [r8, r5, lsl #4]!
    1154:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
    1158:	303f0100 	eorscc	r0, pc, r0, lsl #2
    115c:	4b4b4b4b 	blmi	12d3e90 <_Min_Stack_Size+0x12d3c90>
    1160:	4b4c4b59 	blmi	1313ecc <_Min_Stack_Size+0x1313ccc>
    1164:	4b4c4b4b 	blmi	1313e98 <_Min_Stack_Size+0x1313c98>
    1168:	4b4c4b4b 	blmi	1313e9c <_Min_Stack_Size+0x1313c9c>
    116c:	4b4c4b4b 	blmi	1313ea0 <_Min_Stack_Size+0x1313ca0>
    1170:	594c4b4b 	stmdbpl	ip, {r0, r1, r3, r6, r8, r9, fp, lr}^
    1174:	67595959 			; <UNDEFINED> instruction: 0x67595959
    1178:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
    117c:	003c0603 	eorseq	r0, ip, r3, lsl #12
    1180:	90010402 	andls	r0, r1, r2, lsl #8
    1184:	02003d06 	andeq	r3, r0, #384	; 0x180
    1188:	3c060304 	stccc	3, cr0, [r6], {4}
    118c:	01040200 	mrseq	r0, R12_usr
    1190:	003d069e 	mlaseq	sp, lr, r6, r0
    1194:	06030402 	streq	r0, [r3], -r2, lsl #8
    1198:	04020090 	streq	r0, [r2], #-144	; 0xffffff70
    119c:	3f069e01 	svccc	0x00069e01
    11a0:	93919191 	orrsls	r9, r1, #1073741860	; 0x40000024
    11a4:	91939191 			; <UNDEFINED> instruction: 0x91939191
    11a8:	bbbb9191 	bllt	feee57f4 <BootRAM+0xde55f95>
    11ac:	bdbbbbbb 			; <UNDEFINED> instruction: 0xbdbbbbbb
    11b0:	bbbb9191 	bllt	feee57fc <BootRAM+0xde55f9d>
    11b4:	bbbbbbbb 	bllt	feef00a8 <BootRAM+0xde60849>
    11b8:	91bdbbbb 			; <UNDEFINED> instruction: 0x91bdbbbb
    11bc:	f3919191 	vsra.u64	d9, d1, #47
    11c0:	92919191 	addsls	r9, r1, #1073741860	; 0x40000024
    11c4:	03040200 	movweq	r0, #16896	; 0x4200
    11c8:	02003c06 	andeq	r3, r0, #1536	; 0x600
    11cc:	069e0104 	ldreq	r0, [lr], r4, lsl #2
    11d0:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
    11d4:	003c0603 	eorseq	r0, ip, r3, lsl #12
    11d8:	9e010402 	cdpls	4, 0, cr0, cr1, cr2, {0}
    11dc:	02bb4206 	adcseq	r4, fp, #1610612736	; 0x60000000
    11e0:	01010008 	tsteq	r1, r8
    11e4:	70020500 	andvc	r0, r2, r0, lsl #10
    11e8:	0308003c 	movweq	r0, #32828	; 0x803c
    11ec:	5b0101e8 	blpl	41994 <_Min_Stack_Size+0x41794>
    11f0:	4b4b4b30 	blmi	12d3eb8 <_Min_Stack_Size+0x12d3cb8>
    11f4:	004c594b 	subeq	r5, ip, fp, asr #18
    11f8:	06010402 	streq	r0, [r1], -r2, lsl #8
    11fc:	4c59064a 	mrrcmi	6, 4, r0, r9, cr10
    1200:	5a595959 	bpl	165776c <_Min_Stack_Size+0x165756c>
    1204:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
    1208:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
    120c:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
    1210:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    1214:	02006867 	andeq	r6, r0, #6750208	; 0x670000
    1218:	3c060304 	stccc	3, cr0, [r6], {4}
    121c:	01040200 	mrseq	r0, R12_usr
    1220:	003d069e 	mlaseq	sp, lr, r6, r0
    1224:	06030402 	streq	r0, [r3], -r2, lsl #8
    1228:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    122c:	3d069e01 	stccc	14, cr9, [r6, #-4]
    1230:	03040200 	movweq	r0, #16896	; 0x4200
    1234:	02009006 	andeq	r9, r0, #6
    1238:	069e0104 	ldreq	r0, [lr], r4, lsl #2
    123c:	9191913f 	orrsls	r9, r1, pc, lsr r1
    1240:	92919193 	addsls	r9, r1, #-1073741788	; 0xc0000024
    1244:	bb919191 	bllt	fe465890 <BootRAM+0xd3d6031>
    1248:	bbbbbbbb 	bllt	feef013c <BootRAM+0xde608dd>
    124c:	919159bc 			; <UNDEFINED> instruction: 0x919159bc
    1250:	bcbbbbbb 	fldmiaxlt	fp!, {d11-d103}	;@ Deprecated
    1254:	bbbb9191 	bllt	feee58a0 <BootRAM+0xde56041>
    1258:	9191bebb 			; <UNDEFINED> instruction: 0x9191bebb
    125c:	bbbb7508 	bllt	feede684 <BootRAM+0xde4ee25>
    1260:	bbbbbbbb 	bllt	feef0154 <BootRAM+0xde608f5>
    1264:	9191bcbb 			; <UNDEFINED> instruction: 0x9191bcbb
    1268:	91919191 			; <UNDEFINED> instruction: 0x91919191
    126c:	91919191 			; <UNDEFINED> instruction: 0x91919191
    1270:	04020092 	streq	r0, [r2], #-146	; 0xffffff6e
    1274:	003c0603 	eorseq	r0, ip, r3, lsl #12
    1278:	9e010402 	cdpls	4, 0, cr0, cr1, cr2, {0}
    127c:	02004d06 	andeq	r4, r0, #384	; 0x180
    1280:	3c060304 	stccc	3, cr0, [r6], {4}
    1284:	01040200 	mrseq	r0, R12_usr
    1288:	ca4206c8 	bgt	1082db0 <_Min_Stack_Size+0x1082bb0>
    128c:	01000c02 	tsteq	r0, r2, lsl #24
    1290:	02050001 	andeq	r0, r5, #1
    1294:	080042a8 	stmdaeq	r0, {r3, r5, r7, r9, lr}
    1298:	0102ec03 	tsteq	r2, r3, lsl #24
    129c:	4b4b303f 	blmi	12cd3a0 <_Min_Stack_Size+0x12cd1a0>
    12a0:	4b594b4b 	blmi	1653fd4 <_Min_Stack_Size+0x1653dd4>
    12a4:	4b4b4b4c 	blmi	12d3fdc <_Min_Stack_Size+0x12d3ddc>
    12a8:	4b4b4b4c 	blmi	12d3fe0 <_Min_Stack_Size+0x12d3de0>
    12ac:	4b4b4b4c 	blmi	12d3fe4 <_Min_Stack_Size+0x12d3de4>
    12b0:	4b4b4b4c 	blmi	12d3fe8 <_Min_Stack_Size+0x12d3de8>
    12b4:	5959594c 	ldmdbpl	r9, {r2, r3, r6, r8, fp, ip, lr}^
    12b8:	00686759 	rsbeq	r6, r8, r9, asr r7
    12bc:	06030402 	streq	r0, [r3], -r2, lsl #8
    12c0:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    12c4:	3d069e01 	stccc	14, cr9, [r6, #-4]
    12c8:	03040200 	movweq	r0, #16896	; 0x4200
    12cc:	02003c06 	andeq	r3, r0, #1536	; 0x600
    12d0:	069e0104 	ldreq	r0, [lr], r4, lsl #2
    12d4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    12d8:	009e0603 	addseq	r0, lr, r3, lsl #12
    12dc:	9e010402 	cdpls	4, 0, cr0, cr1, cr2, {0}
    12e0:	91913f06 	orrsls	r3, r1, r6, lsl #30
    12e4:	91919391 			; <UNDEFINED> instruction: 0x91919391
    12e8:	91919192 			; <UNDEFINED> instruction: 0x91919192
    12ec:	bbbbbbbb 	bllt	feef01e0 <BootRAM+0xde60981>
    12f0:	9191bcbb 			; <UNDEFINED> instruction: 0x9191bcbb
    12f4:	bcbbbbbb 	fldmiaxlt	fp!, {d11-d103}	;@ Deprecated
    12f8:	bbbb9191 	bllt	feee5944 <BootRAM+0xde560e5>
    12fc:	0092bcbb 			; <UNDEFINED> instruction: 0x0092bcbb
    1300:	06030402 	streq	r0, [r3], -r2, lsl #8
    1304:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
    1308:	4d069e01 	stcmi	14, cr9, [r6, #-4]
    130c:	342f2f2f 	strtcc	r2, [pc], #-3887	; 1314 <_Min_Stack_Size+0x1114>
    1310:	000802bc 			; <UNDEFINED> instruction: 0x000802bc
    1314:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1318:	0046e402 	subeq	lr, r6, r2, lsl #8
    131c:	03d90308 	bicseq	r0, r9, #8, 6	; 0x20000000
    1320:	e6315f01 	ldrt	r5, [r1], -r1, lsl #30
    1324:	2f9f3d4c 	svccs	0x009f3d4c
    1328:	02040200 	andeq	r0, r4, #0, 4
    132c:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    1330:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    1334:	04020042 	streq	r0, [r2], #-66	; 0xffffffbe
    1338:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
    133c:	00810304 	addeq	r0, r1, r4, lsl #6
    1340:	06010402 	streq	r0, [r1], -r2, lsl #8
    1344:	2f40063c 	svccs	0x0040063c
    1348:	225a3d3d 	subscs	r3, sl, #3904	; 0xf40
    134c:	223da308 	eorscs	sl, sp, #8, 6	; 0x20000000
    1350:	22593d3d 	subscs	r3, r9, #3904	; 0xf40
    1354:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
    1358:	3c060304 	stccc	3, cr0, [r6], {4}
    135c:	01040200 	mrseq	r0, R12_usr
    1360:	223d069e 	eorscs	r0, sp, #165675008	; 0x9e00000
    1364:	0200593d 	andeq	r5, r0, #999424	; 0xf4000
    1368:	3c060304 	stccc	3, cr0, [r6], {4}
    136c:	01040200 	mrseq	r0, R12_usr
    1370:	003d069e 	mlaseq	sp, lr, r6, r0
    1374:	06030402 	streq	r0, [r3], -r2, lsl #8
    1378:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    137c:	59066601 	stmdbpl	r6, {r0, r9, sl, sp, lr}
    1380:	00593d23 	subseq	r3, r9, r3, lsr #26
    1384:	06030402 	streq	r0, [r3], -r2, lsl #8
    1388:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    138c:	3d069e01 	stccc	14, cr9, [r6, #-4]
    1390:	03040200 	movweq	r0, #16896	; 0x4200
    1394:	02003c06 	andeq	r3, r0, #1536	; 0x600
    1398:	06660104 	strbteq	r0, [r6], -r4, lsl #2
    139c:	593d2459 	ldmdbpl	sp!, {r0, r3, r4, r6, sl, sp}
    13a0:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    13a4:	67593d23 	ldrbvs	r3, [r9, -r3, lsr #26]
    13a8:	23676767 	cmncs	r7, #27000832	; 0x19c0000
    13ac:	034b593d 	movteq	r5, #47421	; 0xb93d
    13b0:	036b2048 	cmneq	fp, #72	; 0x48
    13b4:	022f2039 	eoreq	r2, pc, #57	; 0x39
    13b8:	01010017 	tsteq	r1, r7, lsl r0
    13bc:	80020500 	andhi	r0, r2, r0, lsl #10
    13c0:	03080049 	movweq	r0, #32841	; 0x8049
    13c4:	420104c6 	andmi	r0, r1, #-973078528	; 0xc6000000
    13c8:	689f302f 	ldmvs	pc, {r0, r1, r2, r3, r5, ip, sp}	; <UNPREDICTABLE>
    13cc:	00424c08 	subeq	r4, r2, r8, lsl #24
    13d0:	06030402 	streq	r0, [r3], -r2, lsl #8
    13d4:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    13d8:	3d069e01 	stccc	14, cr9, [r6, #-4]
    13dc:	4b1f3e5a 	blmi	7d0d4c <_Min_Stack_Size+0x7d0b4c>
    13e0:	3d5a4223 	lfmcc	f4, 2, [sl, #-140]	; 0xffffff74
    13e4:	10033d30 	andne	r3, r3, r0, lsr sp
    13e8:	2073032e 	rsbscs	r0, r3, lr, lsr #6
    13ec:	3c0c032f 	stccc	3, cr0, [ip], {47}	; 0x2f
    13f0:	42207603 	eormi	r7, r0, #3145728	; 0x300000
    13f4:	4b1f3e30 	blmi	7d0cbc <_Min_Stack_Size+0x7d0abc>
    13f8:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    13fc:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    1400:	02002f7a 	andeq	r2, r0, #488	; 0x1e8
    1404:	3c060304 	stccc	3, cr0, [r6], {4}
    1408:	01040200 	mrseq	r0, R12_usr
    140c:	003d0690 	mlaseq	sp, r0, r6, r0
    1410:	06030402 	streq	r0, [r3], -r2, lsl #8
    1414:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    1418:	3e06ba01 	vmlacc.f32	s22, s12, s2
    141c:	305a755a 	subscc	r7, sl, sl, asr r5
    1420:	23301e40 	teqcs	r0, #64, 28	; 0x400
    1424:	3d303d42 	ldccc	13, cr3, [r0, #-264]!	; 0xfffffef8
    1428:	02002f83 	andeq	r2, r0, #524	; 0x20c
    142c:	001d0204 	andseq	r0, sp, r4, lsl #4
    1430:	06010402 	streq	r0, [r1], -r2, lsl #8
    1434:	3d44063c 	stclcc	6, cr0, [r4, #-240]	; 0xffffff10
    1438:	03303e2f 	teqeq	r0, #752	; 0x2f0
    143c:	76033c0b 	strvc	r3, [r3], -fp, lsl #24
    1440:	3e304220 	cdpcc	2, 3, cr4, cr0, cr0, {1}
    1444:	23264b1f 			; <UNDEFINED> instruction: 0x23264b1f
    1448:	001f0221 	andseq	r0, pc, r1, lsr #4
    144c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1450:	004bac02 	subeq	sl, fp, r2, lsl #24
    1454:	05d30308 	ldrbeq	r0, [r3, #776]	; 0x308
    1458:	59303e01 	ldmdbpl	r0!, {r0, r9, sl, fp, ip, sp}
    145c:	90150368 	andsls	r0, r5, r8, ror #6
    1460:	2f206e03 	svccs	0x00206e03
    1464:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
    1468:	003c0603 	eorseq	r0, ip, r3, lsl #12
    146c:	9e010402 	cdpls	4, 0, cr0, cr1, cr2, {0}
    1470:	25593d06 	ldrbcs	r3, [r9, #-3334]	; 0xfffff2fa
    1474:	03040200 	movweq	r0, #16896	; 0x4200
    1478:	02003c06 	andeq	r3, r0, #1536	; 0x600
    147c:	06ba0104 	ldrteq	r0, [sl], r4, lsl #2
    1480:	3d26593d 			; <UNDEFINED> instruction: 0x3d26593d
    1484:	0b03a259 	bleq	e9df0 <_Min_Stack_Size+0xe9bf0>
    1488:	20770390 			; <UNDEFINED> instruction: 0x20770390
    148c:	2f232f3d 	svccs	0x00232f3d
    1490:	2130243d 	teqcs	r0, sp, lsr r4
    1494:	01001202 	tsteq	r0, r2, lsl #4
    1498:	02050001 	andeq	r0, r5, #1
    149c:	08004cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, lr}
    14a0:	01069703 	tsteq	r6, r3, lsl #14
    14a4:	af5c6741 	svcge	0x005c6741
    14a8:	2f315168 	svccs	0x00315168
    14ac:	03040200 	movweq	r0, #16896	; 0x4200
    14b0:	02003c06 	andeq	r3, r0, #1536	; 0x600
    14b4:	06660104 	strbteq	r0, [r6], -r4, lsl #2
    14b8:	0a02223d 	beq	89db4 <_Min_Stack_Size+0x89bb4>
    14bc:	00010100 	andeq	r0, r1, r0, lsl #2
    14c0:	4d380205 	lfmmi	f0, 4, [r8, #-20]!	; 0xffffffec
    14c4:	c3030800 	movwgt	r0, #14336	; 0x3800
    14c8:	3d670106 	stfcce	f0, [r7, #-24]!	; 0xffffffe8
    14cc:	67693f3d 			; <UNDEFINED> instruction: 0x67693f3d
    14d0:	753d6867 	ldrvc	r6, [sp, #-2151]!	; 0xfffff799
    14d4:	01001302 	tsteq	r0, r2, lsl #6
    14d8:	02050001 	andeq	r0, r5, #1
    14dc:	08004dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, lr}
    14e0:	0106e403 	tsteq	r6, r3, lsl #8
    14e4:	3d2f592f 			; <UNDEFINED> instruction: 0x3d2f592f
    14e8:	05023d31 	streq	r3, [r2, #-3377]	; 0xfffff2cf
    14ec:	00010100 	andeq	r0, r1, r0, lsl #2
    14f0:	4dec0205 	sfmmi	f0, 2, [ip, #20]!
    14f4:	fa030800 	blx	c34fc <_Min_Stack_Size+0xc32fc>
    14f8:	3d2f0106 	stfccs	f0, [pc, #-24]!	; 14e8 <_Min_Stack_Size+0x12e8>
    14fc:	0b023d3d 	bleq	909f8 <_Min_Stack_Size+0x907f8>
    1500:	00010100 	andeq	r0, r1, r0, lsl #2
    1504:	4e180205 	cdpmi	2, 1, cr0, cr8, cr5, {0}
    1508:	8b030800 	blhi	c3510 <_Min_Stack_Size+0xc3310>
    150c:	592f0107 	stmdbpl	pc!, {r0, r1, r2, r8}	; <UNPREDICTABLE>
    1510:	01000702 	tsteq	r0, r2, lsl #14
    1514:	02050001 	andeq	r0, r5, #1
    1518:	08004e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, lr}
    151c:	01079d03 	tsteq	r7, r3, lsl #26
    1520:	59594b4b 	ldmdbpl	r9, {r0, r1, r3, r6, r8, r9, fp, lr}^
    1524:	00070259 	andeq	r0, r7, r9, asr r2
    1528:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    152c:	004e7002 	subeq	r7, lr, r2
    1530:	07a50308 	streq	r0, [r5, r8, lsl #6]!
    1534:	594b4b01 	stmdbpl	fp, {r0, r8, r9, fp, lr}^
    1538:	07025959 	smlsdeq	r2, r9, r9, r5
    153c:	00010100 	andeq	r0, r1, r0, lsl #2
    1540:	4eac0205 	cdpmi	2, 10, cr0, cr12, cr5, {0}
    1544:	ad030800 	stcge	8, cr0, [r3, #-0]
    1548:	4b4b0107 	blmi	12c196c <_Min_Stack_Size+0x12c176c>
    154c:	02595959 	subseq	r5, r9, #1458176	; 0x164000
    1550:	01010007 	tsteq	r1, r7
    1554:	e8020500 	stmda	r2, {r8, sl}
    1558:	0308004e 	movweq	r0, #32846	; 0x804e
    155c:	4b0107b5 	blmi	43438 <_Min_Stack_Size+0x43238>
    1560:	5959594b 	ldmdbpl	r9, {r0, r1, r3, r6, r8, fp, ip, lr}^
    1564:	01000702 	tsteq	r0, r2, lsl #14
    1568:	02050001 	andeq	r0, r5, #1
    156c:	00000000 	andeq	r0, r0, r0
    1570:	0107c703 	tsteq	r7, r3, lsl #14
    1574:	06022f2f 	streq	r2, [r2], -pc, lsr #30
    1578:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    157c:	02000002 	andeq	r0, r0, #2
    1580:	0000a500 	andeq	sl, r0, r0, lsl #10
    1584:	fb010200 	blx	41d8e <_Min_Stack_Size+0x41b8e>
    1588:	01000d0e 	tsteq	r0, lr, lsl #26
    158c:	00010101 	andeq	r0, r1, r1, lsl #2
    1590:	00010000 	andeq	r0, r1, r0
    1594:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    1598:	2f656d6f 	svccs	0x00656d6f
    159c:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    15a0:	542f7673 	strtpl	r7, [pc], #-1651	; 15a8 <_Min_Stack_Size+0x13a8>
    15a4:	41534144 	cmpmi	r3, r4, asr #2
    15a8:	4f492d54 	svcmi	0x00492d54
    15ac:	6e492f54 	mcrvs	15, 2, r2, cr9, cr4, {2}
    15b0:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    15b4:	442f7465 	strtmi	r7, [pc], #-1125	; 15bc <_Min_Stack_Size+0x13bc>
    15b8:	2f00534e 	svccs	0x0000534e
    15bc:	2f727375 	svccs	0x00727375
    15c0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    15c4:	2f656475 	svccs	0x00656475
    15c8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    15cc:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 1430 <_Min_Stack_Size+0x1230>
    15d0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    15d4:	2f00656e 	svccs	0x0000656e
    15d8:	2f727375 	svccs	0x00727375
    15dc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    15e0:	2f656475 	svccs	0x00656475
    15e4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    15e8:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    15ec:	00007379 	andeq	r7, r0, r9, ror r3
    15f0:	5f736e64 	svcpl	0x00736e64
    15f4:	73726170 	cmnvc	r2, #112, 2
    15f8:	00632e65 	rsbeq	r2, r3, r5, ror #28
    15fc:	5f000001 	svcpl	0x00000001
    1600:	61666564 	cmnvs	r6, r4, ror #10
    1604:	5f746c75 	svcpl	0x00746c75
    1608:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    160c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1610:	5f000002 	svcpl	0x00000002
    1614:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1618:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    161c:	00000300 	andeq	r0, r0, r0, lsl #6
    1620:	2e736e64 	cdpcs	14, 7, cr6, cr3, cr4, {3}
    1624:	00010068 	andeq	r0, r1, r8, rrx
    1628:	05000000 	streq	r0, [r0, #-0]
    162c:	004f2402 	subeq	r2, pc, r2, lsl #8
    1630:	01110308 	tsteq	r1, r8, lsl #6
    1634:	2168754d 	cmncs	r8, sp, asr #10
    1638:	01000502 	tsteq	r0, r2, lsl #10
    163c:	02050001 	andeq	r0, r5, #1
    1640:	08004f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, lr}
    1644:	77012803 	strvc	r2, [r1, -r3, lsl #16]
    1648:	32302f2f 	eorscc	r2, r0, #47, 30	; 0xbc
    164c:	0402005a 	streq	r0, [r2], #-90	; 0xffffffa6
    1650:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    1654:	3d3d5a3e 	vldmdbcc	sp!, {s10-s71}
    1658:	3f5bad30 	svccc	0x005bad30
    165c:	04020076 	streq	r0, [r2], #-118	; 0xffffff8a
    1660:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    1664:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    1668:	003c0601 	eorseq	r0, ip, r1, lsl #12
    166c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1670:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
    1674:	00200602 	eoreq	r0, r0, r2, lsl #12
    1678:	82010402 	andhi	r0, r1, #33554432	; 0x2000000
    167c:	3d595906 	vldrcc.16	s11, [r9, #-12]	; <UNPREDICTABLE>
    1680:	03207503 			; <UNDEFINED> instruction: 0x03207503
    1684:	593f200d 	ldmdbpl	pc!, {r0, r2, r3, sp}	; <UNPREDICTABLE>
    1688:	21685969 	cmncs	r8, r9, ror #18
    168c:	01000502 	tsteq	r0, r2, lsl #10
    1690:	02050001 	andeq	r0, r5, #1
    1694:	08005060 	stmdaeq	r0, {r5, r6, ip, lr}
    1698:	0100ea03 	tsteq	r0, r3, lsl #20
    169c:	0200bd78 	andeq	fp, r0, #120, 26	; 0x1e00
    16a0:	58060104 	stmdapl	r6, {r2, r8}
    16a4:	59753006 	ldmdbpl	r5!, {r1, r2, ip, sp}^
    16a8:	0402005a 	streq	r0, [r2], #-90	; 0xffffffa6
    16ac:	05022f01 	streq	r2, [r2, #-3841]	; 0xfffff0ff
    16b0:	00010100 	andeq	r0, r1, r0, lsl #2
    16b4:	50c40205 	sbcpl	r0, r4, r5, lsl #4
    16b8:	87030800 	strhi	r0, [r3, -r0, lsl #16]
    16bc:	d8b00101 	ldmle	r0!, {r0, r8}
    16c0:	01040200 	mrseq	r0, R12_usr
    16c4:	30065806 	andcc	r5, r6, r6, lsl #16
    16c8:	75758391 	ldrbvc	r8, [r5, #-913]!	; 0xfffffc6f
    16cc:	29027775 	stmdbcs	r2, {r0, r2, r4, r5, r6, r8, r9, sl, ip, sp, lr}
    16d0:	bbbbad16 	bllt	feeecb30 <BootRAM+0xde5d2d1>
    16d4:	200903bb 			; <UNDEFINED> instruction: 0x200903bb
    16d8:	040200d7 	streq	r0, [r2], #-215	; 0xffffff29
    16dc:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    16e0:	9f229130 	svcls	0x00229130
    16e4:	22919f92 	addscs	r9, r1, #584	; 0x248
    16e8:	0200d776 	andeq	sp, r0, #30932992	; 0x1d80000
    16ec:	58060104 	stmdapl	r6, {r2, r8}
    16f0:	23913006 	orrscs	r3, r1, #6
    16f4:	040200d7 	streq	r0, [r2], #-215	; 0xffffff29
    16f8:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    16fc:	00d79330 	sbcseq	r9, r7, r0, lsr r3
    1700:	06010402 	streq	r0, [r1], -r2, lsl #8
    1704:	92300658 	eorsls	r0, r0, #88, 12	; 0x5800000
    1708:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
    170c:	00232675 	eoreq	r2, r3, r5, ror r6
    1710:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    1714:	01000502 	tsteq	r0, r2, lsl #10
    1718:	02050001 	andeq	r0, r5, #1
    171c:	080053bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, ip, lr}
    1720:	0101e703 	tsteq	r1, r3, lsl #14
    1724:	755a2f6c 	ldrbvc	r2, [sl, #-3948]	; 0xfffff094
    1728:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
    172c:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    1730:	0200923e 	andeq	r9, r0, #-536870909	; 0xe0000003
    1734:	58060104 	stmdapl	r6, {r2, r8}
    1738:	02003d06 	andeq	r3, r0, #384	; 0x180
    173c:	58060104 	stmdapl	r6, {r2, r8}
    1740:	02003d06 	andeq	r3, r0, #384	; 0x180
    1744:	58060104 	stmdapl	r6, {r2, r8}
    1748:	02003d06 	andeq	r3, r0, #384	; 0x180
    174c:	58060104 	stmdapl	r6, {r2, r8}
    1750:	91753e06 	cmnls	r5, r6, lsl #28
    1754:	3f949191 	svccc	0x00949191
    1758:	03040200 	movweq	r0, #16896	; 0x4200
    175c:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    1760:	02005603 	andeq	r5, r0, #3145728	; 0x300000
    1764:	3c060104 	stfccs	f0, [r6], {4}
    1768:	02005e06 	andeq	r5, r0, #6, 28	; 0x60
    176c:	003e0304 	eorseq	r0, lr, r4, lsl #6
    1770:	64030402 	strvs	r0, [r3], #-1026	; 0xfffffbfe
    1774:	01040200 	mrseq	r0, R12_usr
    1778:	5e063c06 	cdppl	12, 0, cr3, cr6, cr6, {0}
    177c:	03040200 	movweq	r0, #16896	; 0x4200
    1780:	02003c06 	andeq	r3, r0, #1536	; 0x600
    1784:	063c0104 	ldrteq	r0, [ip], -r4, lsl #2
    1788:	0402005e 	streq	r0, [r2], #-94	; 0xffffffa2
    178c:	003c0603 	eorseq	r0, ip, r3, lsl #12
    1790:	3c010402 	cfstrscc	mvf0, [r1], {2}
    1794:	02005d06 	andeq	r5, r0, #384	; 0x180
    1798:	4a060104 	bmi	181bb0 <_Min_Stack_Size+0x1819b0>
    179c:	02212f06 	eoreq	r2, r1, #6, 30
    17a0:	01010004 	tsteq	r1, r4
    17a4:	00000184 	andeq	r0, r0, r4, lsl #3
    17a8:	009f0002 	addseq	r0, pc, r2
    17ac:	01020000 	mrseq	r0, (UNDEF: 2)
    17b0:	000d0efb 	strdeq	r0, [sp], -fp
    17b4:	01010101 	tsteq	r1, r1, lsl #2
    17b8:	01000000 	mrseq	r0, (UNDEF: 0)
    17bc:	2f010000 	svccs	0x00010000
    17c0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    17c4:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    17c8:	2f767375 	svccs	0x00767375
    17cc:	53414454 	movtpl	r4, #5204	; 0x1454
    17d0:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    17d4:	492f544f 	stmdbmi	pc!, {r0, r1, r2, r3, r6, sl, ip, lr}	; <UNPREDICTABLE>
    17d8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    17dc:	2f74656e 	svccs	0x0074656e
    17e0:	00534e44 	subseq	r4, r3, r4, asr #28
    17e4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    17e8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    17ec:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    17f0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    17f4:	2f62696c 	svccs	0x0062696c
    17f8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    17fc:	00656e69 	rsbeq	r6, r5, r9, ror #28
    1800:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1804:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1808:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    180c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1810:	2f62696c 	svccs	0x0062696c
    1814:	00737973 	rsbseq	r7, r3, r3, ror r9
    1818:	736e6400 	cmnvc	lr, #0, 8
    181c:	0100632e 	tsteq	r0, lr, lsr #6
    1820:	645f0000 	ldrbvs	r0, [pc], #-0	; 1828 <_Min_Stack_Size+0x1628>
    1824:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    1828:	745f746c 	ldrbvc	r7, [pc], #-1132	; 1830 <_Min_Stack_Size+0x1630>
    182c:	73657079 	cmnvc	r5, #121	; 0x79
    1830:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1834:	735f0000 	cmpvc	pc, #0
    1838:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    183c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1840:	64000003 	strvs	r0, [r0], #-3
    1844:	682e736e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
    1848:	00000100 	andeq	r0, r0, r0, lsl #2
    184c:	02050000 	andeq	r0, r5, #0
    1850:	08005534 	stmdaeq	r0, {r2, r4, r5, r8, sl, ip, lr}
    1854:	67013303 	strvs	r3, [r1, -r3, lsl #6]
    1858:	02216883 	eoreq	r6, r1, #8585216	; 0x830000
    185c:	01010005 	tsteq	r1, r5
    1860:	68020500 	stmdavs	r2, {r8, sl}
    1864:	03080055 	movweq	r0, #32853	; 0x8055
    1868:	080100c9 	stmdaeq	r1, {r0, r3, r6, r7}
    186c:	91674c28 	cmnls	r7, r8, lsr #24
    1870:	7575919f 	ldrbvc	r9, [r5, #-415]!	; 0xfffffe61
    1874:	4b837675 	blmi	fe0df250 <BootRAM+0xd04f9f1>
    1878:	02007678 	andeq	r7, r0, #120, 12	; 0x7800000
    187c:	4a060104 	bmi	181c94 <_Min_Stack_Size+0x181a94>
    1880:	9f5a9106 	svcls	0x005a9106
    1884:	4c839f5b 	stcmi	15, cr9, [r3], {91}	; 0x5b
    1888:	9f912275 	svcls	0x00912275
    188c:	03207403 			; <UNDEFINED> instruction: 0x03207403
    1890:	7675200e 	ldrbtvc	r2, [r5], -lr
    1894:	00080267 	andeq	r0, r8, r7, ror #4
    1898:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    189c:	00572402 	subseq	r2, r7, r2, lsl #8
    18a0:	01870308 	orreq	r0, r7, r8, lsl #6
    18a4:	a39f6d01 	orrsge	r6, pc, #1, 26	; 0x40
    18a8:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
    18ac:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    18b0:	1d03e53d 	cfstr32ne	mvfx14, [r3, #-244]	; 0xffffff0c
    18b4:	9e670320 	cdpls	3, 6, cr0, cr7, cr0, {1}
    18b8:	51304f5a 	teqpl	r0, sl, asr pc
    18bc:	a0762308 	rsbsge	r2, r6, r8, lsl #6
    18c0:	01040200 	mrseq	r0, R12_usr
    18c4:	000a0223 	andeq	r0, sl, r3, lsr #4
    18c8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    18cc:	00582802 	subseq	r2, r8, r2, lsl #16
    18d0:	01c40308 	biceq	r0, r4, r8, lsl #6
    18d4:	3d3e6701 	ldccc	7, cr6, [lr, #-4]!
    18d8:	22084e3d 	andcs	r4, r8, #976	; 0x3d0
    18dc:	000c0275 	andeq	r0, ip, r5, ror r2
    18e0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    18e4:	00589802 	subseq	r9, r8, r2, lsl #16
    18e8:	01e10308 	mvneq	r0, r8, lsl #6
    18ec:	3d767b01 	fldmdbxcc	r6!, {d23-d22}	;@ Deprecated
    18f0:	02007541 	andeq	r7, r0, #272629760	; 0x10400000
    18f4:	3c060104 	stfccs	f0, [r6], {4}
    18f8:	215b4006 	cmpcs	fp, r6
    18fc:	01000702 	tsteq	r0, r2, lsl #14
    1900:	02050001 	andeq	r0, r5, #1
    1904:	080058f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, lr}
    1908:	01028703 	tsteq	r2, r3, lsl #14
    190c:	4b3d4c31 	blmi	f549d8 <_Min_Stack_Size+0xf547d8>
    1910:	31673e3d 	cmncc	r7, sp, lsr lr
    1914:	00080221 	andeq	r0, r8, r1, lsr #4
    1918:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    191c:	00593c02 	subseq	r3, r9, r2, lsl #24
    1920:	02a30308 	adceq	r0, r3, #8, 6	; 0x20000000
    1924:	02592f01 	subseq	r2, r9, #1, 30
    1928:	01010007 	tsteq	r1, r7
    192c:	000001c7 	andeq	r0, r0, r7, asr #3
    1930:	01500002 	cmpeq	r0, r2
    1934:	01020000 	mrseq	r0, (UNDEF: 2)
    1938:	000d0efb 	strdeq	r0, [sp], -fp
    193c:	01010101 	tsteq	r1, r1, lsl #2
    1940:	01000000 	mrseq	r0, (UNDEF: 0)
    1944:	2f010000 	svccs	0x00010000
    1948:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    194c:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    1950:	2f767375 	svccs	0x00767375
    1954:	53414454 	movtpl	r4, #5204	; 0x1454
    1958:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    195c:	4c2f544f 	cfstrsmi	mvf5, [pc], #-316	; 1828 <_Min_Stack_Size+0x1628>
    1960:	61726269 	cmnvs	r2, r9, ror #4
    1964:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    1968:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    196c:	73752f00 	cmnvc	r5, #0, 30
    1970:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1974:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1978:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    197c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1980:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    1984:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    1988:	73752f00 	cmnvc	r5, #0, 30
    198c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1990:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1994:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    1998:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    199c:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    19a0:	6f682f00 	svcvs	0x00682f00
    19a4:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    19a8:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    19ac:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    19b0:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    19b4:	544f492d 	strbpl	r4, [pc], #-2349	; 19bc <_Min_Stack_Size+0x17bc>
    19b8:	534d432f 	movtpl	r4, #54063	; 0xd32f
    19bc:	432f5349 			; <UNDEFINED> instruction: 0x432f5349
    19c0:	432f334d 			; <UNDEFINED> instruction: 0x432f334d
    19c4:	5365726f 	cmnpl	r5, #-268435450	; 0xf0000006
    19c8:	6f707075 	svcvs	0x00707075
    19cc:	2f007472 	svccs	0x00007472
    19d0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    19d4:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    19d8:	2f767375 	svccs	0x00767375
    19dc:	53414454 	movtpl	r4, #5204	; 0x1454
    19e0:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    19e4:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    19e8:	5349534d 	movtpl	r5, #37709	; 0x934d
    19ec:	334d432f 	movtcc	r4, #54063	; 0xd32f
    19f0:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    19f4:	53656369 	cmnpl	r5, #-1543503871	; 0xa4000001
    19f8:	6f707075 	svcvs	0x00707075
    19fc:	532f7472 			; <UNDEFINED> instruction: 0x532f7472
    1a00:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xfffff0ac
    1a04:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1a08:	00783031 	rsbseq	r3, r8, r1, lsr r0
    1a0c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1958 <_Min_Stack_Size+0x1758>
    1a10:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1a14:	76737572 			; <UNDEFINED> instruction: 0x76737572
    1a18:	4144542f 	cmpmi	r4, pc, lsr #8
    1a1c:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    1a20:	2f544f49 	svccs	0x00544f49
    1a24:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1a28:	65697261 	strbvs	r7, [r9, #-609]!	; 0xfffffd9f
    1a2c:	6e692f73 	mcrvs	15, 3, r2, cr9, cr3, {3}
    1a30:	6d000063 	stcvs	0, cr0, [r0, #-396]	; 0xfffffe74
    1a34:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
    1a38:	00010063 	andeq	r0, r1, r3, rrx
    1a3c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    1a40:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1a44:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1a48:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    1a4c:	00020068 	andeq	r0, r2, r8, rrx
    1a50:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    1a54:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    1a58:	0300682e 	movweq	r6, #2094	; 0x82e
    1a5c:	6f630000 	svcvs	0x00630000
    1a60:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    1a64:	682e336d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
    1a68:	00000400 	andeq	r0, r0, r0, lsl #8
    1a6c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1a70:	30316632 	eorscc	r6, r1, r2, lsr r6
    1a74:	00682e78 	rsbeq	r2, r8, r8, ror lr
    1a78:	6d000005 	stcvs	0, cr0, [r0, #-20]	; 0xffffffec
    1a7c:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
    1a80:	00060068 	andeq	r0, r6, r8, rrx
    1a84:	05000000 	streq	r0, [r0, #-0]
    1a88:	00595802 	subseq	r5, r9, r2, lsl #16
    1a8c:	00e00308 	rsceq	r0, r0, r8, lsl #6
    1a90:	02754f01 	rsbseq	r4, r5, #1, 30
    1a94:	01010007 	tsteq	r1, r7
    1a98:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
    1a9c:	03080059 	movweq	r0, #32857	; 0x8059
    1aa0:	4b0100f0 	blmi	41e68 <_Min_Stack_Size+0x41c68>
    1aa4:	4b754d6d 	blmi	1d55060 <_Min_Stack_Size+0x1d54e60>
    1aa8:	3e83755a 	mcrcc	5, 4, r7, cr3, cr10, {2}
    1aac:	03736793 	cmneq	r3, #38535168	; 0x24c0000
    1ab0:	671d2e09 	ldrvs	r2, [sp, -r9, lsl #28]
    1ab4:	09024d65 	stmdbeq	r2, {r0, r2, r5, r6, r8, sl, fp, lr}
    1ab8:	00010100 	andeq	r0, r1, r0, lsl #2
    1abc:	00000205 	andeq	r0, r0, r5, lsl #4
    1ac0:	9c030000 	stcls	0, cr0, [r3], {-0}
    1ac4:	915d0101 	cmpls	sp, r1, lsl #2
    1ac8:	01000802 	tsteq	r0, r2, lsl #16
    1acc:	02050001 	andeq	r0, r5, #1
    1ad0:	00000000 	andeq	r0, r0, r0
    1ad4:	0101af03 	tsteq	r1, r3, lsl #30
    1ad8:	1e6c3e87 	cdpne	14, 6, cr3, cr12, cr7, {4}
    1adc:	00070276 	andeq	r0, r7, r6, ror r2
    1ae0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1ae4:	00000002 	andeq	r0, r0, r2
    1ae8:	01c70300 	biceq	r0, r7, r0, lsl #6
    1aec:	6c3e4d01 	ldcvs	13, cr4, [lr], #-4
    1af0:	0802681e 	stmdaeq	r2, {r1, r2, r3, r4, fp, sp, lr}
    1af4:	4f010100 	svcmi	0x00010100
    1af8:	02000004 	andeq	r0, r0, #4
    1afc:	00016200 	andeq	r6, r1, r0, lsl #4
    1b00:	fb010200 	blx	4230a <_Min_Stack_Size+0x4210a>
    1b04:	01000d0e 	tsteq	r0, lr, lsl #26
    1b08:	00010101 	andeq	r0, r1, r1, lsl #2
    1b0c:	00010000 	andeq	r0, r1, r0
    1b10:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    1b14:	2f656d6f 	svccs	0x00656d6f
    1b18:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    1b1c:	542f7673 	strtpl	r7, [pc], #-1651	; 1b24 <_Min_Stack_Size+0x1924>
    1b20:	41534144 	cmpmi	r3, r4, asr #2
    1b24:	4f492d54 	svcmi	0x00492d54
    1b28:	694c2f54 	stmdbvs	ip, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1b2c:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    1b30:	2f736569 	svccs	0x00736569
    1b34:	00637273 	rsbeq	r7, r3, r3, ror r2
    1b38:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1b3c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1b40:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1b44:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1b48:	2f62696c 	svccs	0x0062696c
    1b4c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    1b50:	00656e69 	rsbeq	r6, r5, r9, ror #28
    1b54:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1b58:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1b5c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1b60:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1b64:	2f62696c 	svccs	0x0062696c
    1b68:	00737973 	rsbseq	r7, r3, r3, ror r9
    1b6c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1ab8 <_Min_Stack_Size+0x18b8>
    1b70:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1b74:	76737572 			; <UNDEFINED> instruction: 0x76737572
    1b78:	4144542f 	cmpmi	r4, pc, lsr #8
    1b7c:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    1b80:	2f544f49 	svccs	0x00544f49
    1b84:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    1b88:	4d432f53 	stclmi	15, cr2, [r3, #-332]	; 0xfffffeb4
    1b8c:	65442f33 	strbvs	r2, [r4, #-3891]	; 0xfffff0cd
    1b90:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    1b94:	70707553 	rsbsvc	r7, r0, r3, asr r5
    1b98:	2f74726f 	svccs	0x0074726f
    1b9c:	532f5453 			; <UNDEFINED> instruction: 0x532f5453
    1ba0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1ba4:	78303146 	ldmdavc	r0!, {r1, r2, r6, r8, ip, sp}
    1ba8:	6f682f00 	svcvs	0x00682f00
    1bac:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    1bb0:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    1bb4:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    1bb8:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    1bbc:	544f492d 	strbpl	r4, [pc], #-2349	; 1bc4 <_Min_Stack_Size+0x19c4>
    1bc0:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1bc4:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1bc8:	692f7365 	stmdbvs	pc!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1bcc:	2f00636e 	svccs	0x0000636e
    1bd0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1bd4:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    1bd8:	2f767375 	svccs	0x00767375
    1bdc:	53414454 	movtpl	r4, #5204	; 0x1454
    1be0:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    1be4:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    1be8:	5349534d 	movtpl	r5, #37709	; 0x934d
    1bec:	334d432f 	movtcc	r4, #54063	; 0xd32f
    1bf0:	726f432f 	rsbvc	r4, pc, #-1140850688	; 0xbc000000
    1bf4:	70755365 	rsbsvc	r5, r5, r5, ror #6
    1bf8:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    1bfc:	74730000 	ldrbtvc	r0, [r3], #-0
    1c00:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1c04:	5f783031 	svcpl	0x00783031
    1c08:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    1c0c:	00010063 	andeq	r0, r1, r3, rrx
    1c10:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    1c14:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1c18:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1c1c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    1c20:	00020068 	andeq	r0, r2, r8, rrx
    1c24:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    1c28:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    1c2c:	0300682e 	movweq	r6, #2094	; 0x82e
    1c30:	74730000 	ldrbtvc	r0, [r3], #-0
    1c34:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1c38:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
    1c3c:	00040068 	andeq	r0, r4, r8, rrx
    1c40:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1c44:	31663233 	cmncc	r6, r3, lsr r2
    1c48:	725f7830 	subsvc	r7, pc, #48, 16	; 0x300000
    1c4c:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    1c50:	00000500 	andeq	r0, r0, r0, lsl #10
    1c54:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    1c58:	336d635f 	cmncc	sp, #2080374785	; 0x7c000001
    1c5c:	0600682e 	streq	r6, [r0], -lr, lsr #16
    1c60:	00000000 	andeq	r0, r0, r0
    1c64:	00000205 	andeq	r0, r0, r5, lsl #4
    1c68:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    1c6c:	6a300101 	bvs	c02078 <_Min_Stack_Size+0xc01e78>
    1c70:	0369856c 	cmneq	r9, #108, 10	; 0x1b000000
    1c74:	024d6613 	subeq	r6, sp, #19922944	; 0x1300000
    1c78:	01010008 	tsteq	r1, r8
    1c7c:	00020500 	andeq	r0, r2, r0, lsl #10
    1c80:	03000000 	movweq	r0, #0
    1c84:	4f01028e 	svcmi	0x0001028e
    1c88:	0d036868 	stceq	8, cr6, [r3, #-416]	; 0xfffffe60
    1c8c:	20770374 	rsbscs	r0, r7, r4, ror r3
    1c90:	25672467 	strbcs	r2, [r7, #-1127]!	; 0xfffffb99
    1c94:	01000802 	tsteq	r0, r2, lsl #16
    1c98:	02050001 	andeq	r0, r5, #1
    1c9c:	00000000 	andeq	r0, r0, r0
    1ca0:	0102b003 	tsteq	r2, r3
    1ca4:	002f2f3d 	eoreq	r2, pc, sp, lsr pc	; <UNPREDICTABLE>
    1ca8:	33020402 	movwcc	r0, #9218	; 0x2402
    1cac:	02040200 	andeq	r0, r4, #0, 4
    1cb0:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
    1cb4:	02003d02 	andeq	r3, r0, #2, 26	; 0x80
    1cb8:	4a060104 	bmi	1820d0 <_Min_Stack_Size+0x181ed0>
    1cbc:	40683e06 	rsbmi	r3, r8, r6, lsl #28
    1cc0:	04022130 	streq	r2, [r2], #-304	; 0xfffffed0
    1cc4:	00010100 	andeq	r0, r1, r0, lsl #2
    1cc8:	00000205 	andeq	r0, r0, r5, lsl #4
    1ccc:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    1cd0:	31590102 	cmpcc	r9, r2, lsl #2
    1cd4:	3d5a4c3e 	ldclcc	12, cr4, [sl, #-248]	; 0xffffff08
    1cd8:	01000802 	tsteq	r0, r2, lsl #16
    1cdc:	02050001 	andeq	r0, r5, #1
    1ce0:	00000000 	andeq	r0, r0, r0
    1ce4:	0102e203 	tsteq	r2, r3, lsl #4
    1ce8:	08023d5b 	stmdaeq	r2, {r0, r1, r3, r4, r6, r8, sl, fp, ip, sp}
    1cec:	00010100 	andeq	r0, r1, r0, lsl #2
    1cf0:	00000205 	andeq	r0, r0, r5, lsl #4
    1cf4:	fa030000 	blx	c1cfc <_Min_Stack_Size+0xc1afc>
    1cf8:	34590102 	ldrbcc	r0, [r9], #-258	; 0xfffffefe
    1cfc:	3d684c3e 	stclcc	12, cr4, [r8, #-248]!	; 0xffffff08
    1d00:	01000702 	tsteq	r0, r2, lsl #14
    1d04:	02050001 	andeq	r0, r5, #1
    1d08:	00000000 	andeq	r0, r0, r0
    1d0c:	01039103 	tsteq	r3, r3, lsl #2
    1d10:	08023d5c 	stmdaeq	r2, {r2, r3, r4, r6, r8, sl, fp, ip, sp}
    1d14:	00010100 	andeq	r0, r1, r0, lsl #2
    1d18:	00000205 	andeq	r0, r0, r5, lsl #4
    1d1c:	b4030000 	strlt	r0, [r3], #-0
    1d20:	314b0104 	cmpcc	fp, r4, lsl #2
    1d24:	3d4c4c3e 	stclcc	12, cr4, [ip, #-248]	; 0xffffff08
    1d28:	01000802 	tsteq	r0, r2, lsl #16
    1d2c:	02050001 	andeq	r0, r5, #1
    1d30:	00000000 	andeq	r0, r0, r0
    1d34:	0104cb03 	tsteq	r4, r3, lsl #22
    1d38:	0602672f 	streq	r6, [r2], -pc, lsr #14
    1d3c:	00010100 	andeq	r0, r1, r0, lsl #2
    1d40:	00000205 	andeq	r0, r0, r5, lsl #4
    1d44:	e0030000 	and	r0, r3, r0
    1d48:	314b0104 	cmpcc	fp, r4, lsl #2
    1d4c:	3d4c4c3e 	stclcc	12, cr4, [ip, #-248]	; 0xffffff08
    1d50:	01000802 	tsteq	r0, r2, lsl #16
    1d54:	02050001 	andeq	r0, r5, #1
    1d58:	00000000 	andeq	r0, r0, r0
    1d5c:	0104fa03 	tsteq	r4, r3, lsl #20	; <UNPREDICTABLE>
    1d60:	4c3e314b 	ldfmis	f3, [lr], #-300	; 0xfffffed4
    1d64:	08023d4c 	stmdaeq	r2, {r2, r3, r6, r8, sl, fp, ip, sp}
    1d68:	00010100 	andeq	r0, r1, r0, lsl #2
    1d6c:	00000205 	andeq	r0, r0, r5, lsl #4
    1d70:	94030000 	strls	r0, [r3], #-0
    1d74:	314b0105 	cmpcc	fp, r5, lsl #2
    1d78:	3d5a4c3e 	ldclcc	12, cr4, [sl, #-248]	; 0xffffff08
    1d7c:	01000702 	tsteq	r0, r2, lsl #14
    1d80:	02050001 	andeq	r0, r5, #1
    1d84:	00000000 	andeq	r0, r0, r0
    1d88:	0105bc03 	tsteq	r5, r3, lsl #24
    1d8c:	1e893f86 	cdpne	15, 8, cr3, cr9, cr6, {4}
    1d90:	000802a0 	andeq	r0, r8, r0, lsr #5
    1d94:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1d98:	00000002 	andeq	r0, r0, r2
    1d9c:	05d80300 	ldrbeq	r0, [r8, #768]	; 0x300
    1da0:	023d4e01 	eorseq	r4, sp, #1, 28
    1da4:	01010007 	tsteq	r1, r7
    1da8:	00020500 	andeq	r0, r2, r0, lsl #10
    1dac:	03000000 	movweq	r0, #0
    1db0:	4b0105fe 	blmi	435b0 <_Min_Stack_Size+0x433b0>
    1db4:	4c4c3e31 	mcrrmi	14, 3, r3, ip, cr1
    1db8:	0008023d 	andeq	r0, r8, sp, lsr r2
    1dbc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1dc0:	005a4002 	subseq	r4, sl, r2
    1dc4:	06bd0308 	ldrteq	r0, [sp], r8, lsl #6
    1dc8:	3e3e5d01 	cdpcc	13, 3, cr5, cr14, cr1, {0}
    1dcc:	03580d03 	cmpeq	r8, #3, 26	; 0xc0
    1dd0:	243d2077 	ldrtcs	r2, [sp], #-119	; 0xffffff89
    1dd4:	0702253d 	smladxeq	r2, sp, r5, r2
    1dd8:	00010100 	andeq	r0, r1, r0, lsl #2
    1ddc:	5a800205 	bpl	fe0025f8 <BootRAM+0xcf72d99>
    1de0:	de030800 	cdple	8, 0, cr0, cr3, cr0, {0}
    1de4:	3d5b0106 	ldfcce	f0, [fp, #-24]	; 0xffffffe8
    1de8:	01000802 	tsteq	r0, r2, lsl #16
    1dec:	02050001 	andeq	r0, r5, #1
    1df0:	08005aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip, lr}
    1df4:	0106ef03 	tsteq	r6, r3, lsl #30
    1df8:	0802674e 	stmdaeq	r2, {r1, r2, r3, r6, r8, r9, sl, sp, lr}
    1dfc:	00010100 	andeq	r0, r1, r0, lsl #2
    1e00:	5ac40205 	bpl	ff10261c <BootRAM+0xe072dbd>
    1e04:	fd030800 	stc2	8, cr0, [r3, #-0]
    1e08:	3d5b0106 	ldfcce	f0, [fp, #-24]	; 0xffffffe8
    1e0c:	01000802 	tsteq	r0, r2, lsl #16
    1e10:	02050001 	andeq	r0, r5, #1
    1e14:	08005ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, ip, lr}
    1e18:	01078c03 	tsteq	r7, r3, lsl #24
    1e1c:	820b034b 	andhi	r0, fp, #738197505	; 0x2c000001
    1e20:	223d775a 	eorscs	r7, sp, #23592960	; 0x1680000
    1e24:	5b59243d 	blpl	164af20 <_Min_Stack_Size+0x164ad20>
    1e28:	39033e4c 	stmdbcc	r3, {r2, r3, r6, r9, sl, fp, ip, sp}
    1e2c:	20510366 	subscs	r0, r1, r6, ror #6
    1e30:	662d0368 	strtvs	r0, [sp], -r8, ror #6
    1e34:	03205703 			; <UNDEFINED> instruction: 0x03205703
    1e38:	3d236629 	stccc	6, cr6, [r3, #-164]!	; 0xffffff5c
    1e3c:	683d5925 	ldmdavs	sp!, {r0, r2, r5, r8, fp, ip, lr}
    1e40:	683d5968 	ldmdavs	sp!, {r3, r5, r6, r8, fp, ip, lr}
    1e44:	683d5968 	ldmdavs	sp!, {r3, r5, r6, r8, fp, ip, lr}
    1e48:	683d5968 	ldmdavs	sp!, {r3, r5, r6, r8, fp, ip, lr}
    1e4c:	000f0275 	andeq	r0, pc, r5, ror r2	; <UNPREDICTABLE>
    1e50:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1e54:	00000002 	andeq	r0, r0, r2
    1e58:	08a80300 	stmiaeq	r8!, {r8, r9}
    1e5c:	6c3e6b01 			; <UNDEFINED> instruction: 0x6c3e6b01
    1e60:	0702761e 	smladeq	r2, lr, r6, r7
    1e64:	00010100 	andeq	r0, r1, r0, lsl #2
    1e68:	5c440205 	sfmpl	f0, 2, [r4], {5}
    1e6c:	c7030800 	strgt	r0, [r3, -r0, lsl #16]
    1e70:	3e6a0108 	powcce	f0, f2, #0.0
    1e74:	02761e6c 	rsbseq	r1, r6, #108, 28	; 0x6c0
    1e78:	01010007 	tsteq	r1, r7
    1e7c:	80020500 	andhi	r0, r2, r0, lsl #10
    1e80:	0308005c 	movweq	r0, #32860	; 0x805c
    1e84:	6a0108e6 	bvs	44224 <_Min_Stack_Size+0x44024>
    1e88:	761e6c3e 			; <UNDEFINED> instruction: 0x761e6c3e
    1e8c:	01000702 	tsteq	r0, r2, lsl #14
    1e90:	02050001 	andeq	r0, r5, #1
    1e94:	00000000 	andeq	r0, r0, r0
    1e98:	0109a103 	tsteq	r9, r3, lsl #2
    1e9c:	1e6c3e6a 	cdpne	14, 6, cr3, cr12, cr10, {3}
    1ea0:	00070276 	andeq	r0, r7, r6, ror r2
    1ea4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1ea8:	005cbc02 	subseq	fp, ip, r2, lsl #24
    1eac:	09c00308 	stmibeq	r0, {r3, r8, r9}^
    1eb0:	6c3e6a01 			; <UNDEFINED> instruction: 0x6c3e6a01
    1eb4:	0702761e 	smladeq	r2, lr, r6, r7
    1eb8:	00010100 	andeq	r0, r1, r0, lsl #2
    1ebc:	5cf80205 	lfmpl	f0, 2, [r8], #20
    1ec0:	d5030800 	strle	r0, [r3, #-2048]	; 0xfffff800
    1ec4:	3d5b0109 	ldfcce	f0, [fp, #-36]	; 0xffffffdc
    1ec8:	01000802 	tsteq	r0, r2, lsl #16
    1ecc:	02050001 	andeq	r0, r5, #1
    1ed0:	00000000 	andeq	r0, r0, r0
    1ed4:	0109e203 	tsteq	r9, r3, lsl #4
    1ed8:	08023d5b 	stmdaeq	r2, {r0, r1, r3, r4, r6, r8, sl, fp, ip, sp}
    1edc:	00010100 	andeq	r0, r1, r0, lsl #2
    1ee0:	00000205 	andeq	r0, r0, r5, lsl #4
    1ee4:	82030000 	andhi	r0, r3, #0
    1ee8:	3d5d010a 	ldfcce	f0, [sp, #-40]	; 0xffffffd8
    1eec:	01000802 	tsteq	r0, r2, lsl #16
    1ef0:	02050001 	andeq	r0, r5, #1
    1ef4:	08005d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, ip, lr}
    1ef8:	010aae03 	tsteq	sl, r3, lsl #28
    1efc:	332f2f59 			; <UNDEFINED> instruction: 0x332f2f59
    1f00:	3e4c3e4b 	cdpcc	14, 4, cr3, cr12, cr11, {2}
    1f04:	844b404e 	strbhi	r4, [fp], #-78	; 0xffffffb2
    1f08:	02213240 	eoreq	r3, r1, #64, 4
    1f0c:	01010008 	tsteq	r1, r8
    1f10:	00020500 	andeq	r0, r2, r0, lsl #10
    1f14:	03000000 	movweq	r0, #0
    1f18:	30010adb 	ldrdcc	r0, [r1], -fp
    1f1c:	00060267 	andeq	r0, r6, r7, ror #4
    1f20:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    1f24:	00000002 	andeq	r0, r0, r2
    1f28:	0afa0300 	beq	ffe82b30 <BootRAM+0xedf32d1>
    1f2c:	68335901 	ldmdavs	r3!, {r0, r8, fp, ip, lr}
    1f30:	02213240 	eoreq	r3, r1, #64, 4
    1f34:	01010007 	tsteq	r1, r7
    1f38:	00020500 	andeq	r0, r2, r0, lsl #10
    1f3c:	03000000 	movweq	r0, #0
    1f40:	5e010ba8 	vmlapl.f64	d0, d17, d24
    1f44:	0008023d 	andeq	r0, r8, sp, lsr r2
    1f48:	03540101 	cmpeq	r4, #1073741824	; 0x40000000
    1f4c:	00020000 	andeq	r0, r2, r0
    1f50:	00000164 	andeq	r0, r0, r4, ror #2
    1f54:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1f58:	0101000d 	tsteq	r1, sp
    1f5c:	00000101 	andeq	r0, r0, r1, lsl #2
    1f60:	00000100 	andeq	r0, r0, r0, lsl #2
    1f64:	6f682f01 	svcvs	0x00682f01
    1f68:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    1f6c:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    1f70:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    1f74:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    1f78:	544f492d 	strbpl	r4, [pc], #-2349	; 1f80 <_Min_Stack_Size+0x1d80>
    1f7c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1f80:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1f84:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
    1f88:	2f006372 	svccs	0x00006372
    1f8c:	2f727375 	svccs	0x00727375
    1f90:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1f94:	2f656475 	svccs	0x00656475
    1f98:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1f9c:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 1e00 <_Min_Stack_Size+0x1c00>
    1fa0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    1fa4:	2f00656e 	svccs	0x0000656e
    1fa8:	2f727375 	svccs	0x00727375
    1fac:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1fb0:	2f656475 	svccs	0x00656475
    1fb4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1fb8:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    1fbc:	2f007379 	svccs	0x00007379
    1fc0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1fc4:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    1fc8:	2f767375 	svccs	0x00767375
    1fcc:	53414454 	movtpl	r4, #5204	; 0x1454
    1fd0:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    1fd4:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    1fd8:	5349534d 	movtpl	r5, #37709	; 0x934d
    1fdc:	334d432f 	movtcc	r4, #54063	; 0xd32f
    1fe0:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    1fe4:	53656369 	cmnpl	r5, #-1543503871	; 0xa4000001
    1fe8:	6f707075 	svcvs	0x00707075
    1fec:	532f7472 			; <UNDEFINED> instruction: 0x532f7472
    1ff0:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xfffff0ac
    1ff4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1ff8:	00783031 	rsbseq	r3, r8, r1, lsr r0
    1ffc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1f48 <_Min_Stack_Size+0x1d48>
    2000:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    2004:	76737572 			; <UNDEFINED> instruction: 0x76737572
    2008:	4144542f 	cmpmi	r4, pc, lsr #8
    200c:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    2010:	2f544f49 	svccs	0x00544f49
    2014:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    2018:	65697261 	strbvs	r7, [r9, #-609]!	; 0xfffffd9f
    201c:	6e692f73 	mcrvs	15, 3, r2, cr9, cr3, {3}
    2020:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
    2024:	2f656d6f 	svccs	0x00656d6f
    2028:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    202c:	542f7673 	strtpl	r7, [pc], #-1651	; 2034 <_Min_Stack_Size+0x1e34>
    2030:	41534144 	cmpmi	r3, r4, asr #2
    2034:	4f492d54 	svcmi	0x00492d54
    2038:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    203c:	2f534953 	svccs	0x00534953
    2040:	2f334d43 	svccs	0x00334d43
    2044:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    2048:	70707553 	rsbsvc	r7, r0, r3, asr r5
    204c:	0074726f 	rsbseq	r7, r4, pc, ror #4
    2050:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2054:	31663233 	cmncc	r6, r3, lsr r2
    2058:	675f7830 	smmlarvs	pc, r0, r8, r7	; <UNPREDICTABLE>
    205c:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    2060:	00010063 	andeq	r0, r1, r3, rrx
    2064:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    2068:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    206c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2070:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    2074:	00020068 	andeq	r0, r2, r8, rrx
    2078:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    207c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    2080:	0300682e 	movweq	r6, #2094	; 0x82e
    2084:	74730000 	ldrbtvc	r0, [r3], #-0
    2088:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    208c:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
    2090:	00040068 	andeq	r0, r4, r8, rrx
    2094:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2098:	31663233 	cmncc	r6, r3, lsr r2
    209c:	675f7830 	smmlarvs	pc, r0, r8, r7	; <UNPREDICTABLE>
    20a0:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    20a4:	00050068 	andeq	r0, r5, r8, rrx
    20a8:	726f6300 	rsbvc	r6, pc, #0, 6
    20ac:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    20b0:	00682e33 	rsbeq	r2, r8, r3, lsr lr
    20b4:	00000006 	andeq	r0, r0, r6
    20b8:	00020500 	andeq	r0, r2, r0, lsl #10
    20bc:	03000000 	movweq	r0, #0
    20c0:	4e0100ec 	cdpmi	0, 0, cr0, cr1, cr12, {7}
    20c4:	23034b4c 	movwcs	r4, #15180	; 0x3b4c
    20c8:	205f034a 	subscs	r0, pc, sl, asr #6
    20cc:	1e034b4c 	vmlsne.f64	d4, d3, d12
    20d0:	2064034a 	rsbcs	r0, r4, sl, asr #6
    20d4:	19034b4c 	stmdbne	r3, {r2, r3, r6, r8, r9, fp, lr}
    20d8:	2069034a 	rsbcs	r0, r9, sl, asr #6
    20dc:	14034b4c 	strne	r4, [r3], #-2892	; 0xfffff4b4
    20e0:	206e034a 	rsbcs	r0, lr, sl, asr #6
    20e4:	0f034b4c 	svceq	0x00034b4c
    20e8:	2073034a 	rsbscs	r0, r3, sl, asr #6
    20ec:	0a034b4c 	beq	d4e24 <_Min_Stack_Size+0xd4c24>
    20f0:	207a034a 	rsbscs	r0, sl, sl, asr #6
    20f4:	025b594c 	subseq	r5, fp, #76, 18	; 0x130000
    20f8:	01010012 	tsteq	r1, r2, lsl r0
    20fc:	00020500 	andeq	r0, r2, r0, lsl #10
    2100:	03000000 	movweq	r0, #0
    2104:	2f01019f 	svccs	0x0001019f
    2108:	02024b4b 	andeq	r4, r2, #76800	; 0x12c00
    210c:	00010100 	andeq	r0, r1, r0, lsl #2
    2110:	5d8c0205 	sfmpl	f0, 4, [ip, #20]
    2114:	ad030800 	stcge	8, cr0, [r3, #-0]
    2118:	83590101 	cmphi	r9, #1073741824	; 0x40000000
    211c:	6a6b5951 	bvs	1ad8668 <_Min_Stack_Size+0x1ad8468>
    2120:	5a3e3d5a 	bpl	f91690 <_Min_Stack_Size+0xf91490>
    2124:	593e4c67 	ldmdbpl	lr!, {r0, r1, r2, r5, r6, sl, fp, lr}
    2128:	6b4c765a 	blvs	131fa98 <_Min_Stack_Size+0x131f898>
    212c:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
    2130:	58690302 	stmdapl	r9!, {r1, r8, r9}^
    2134:	01040200 	mrseq	r0, R12_usr
    2138:	03063c06 	movweq	r3, #27654	; 0x6c06
    213c:	4c403c1c 	mcrrmi	12, 1, r3, r0, cr12
    2140:	67683e3d 			; <UNDEFINED> instruction: 0x67683e3d
    2144:	5a593e4c 	bpl	1651a7c <_Min_Stack_Size+0x165187c>
    2148:	4c694c76 	stclmi	12, cr4, [r9], #-472	; 0xfffffe28
    214c:	02040200 	andeq	r0, r4, #0, 4
    2150:	00666b03 	rsbeq	r6, r6, r3, lsl #22
    2154:	06010402 	streq	r0, [r1], -r2, lsl #8
    2158:	1903063c 	stmdbne	r3, {r2, r3, r4, r5, r9, sl}
    215c:	05023e3c 	streq	r3, [r2, #-3644]	; 0xfffff1c4
    2160:	00010100 	andeq	r0, r1, r0, lsl #2
    2164:	00000205 	andeq	r0, r0, r5, lsl #4
    2168:	8a030000 	bhi	c2170 <_Min_Stack_Size+0xc1f70>
    216c:	4b4c0102 	blmi	130257c <_Min_Stack_Size+0x130237c>
    2170:	05023d3d 	streq	r3, [r2, #-3389]	; 0xfffff2c3
    2174:	00010100 	andeq	r0, r1, r0, lsl #2
    2178:	00000205 	andeq	r0, r0, r5, lsl #4
    217c:	99030000 	stmdbls	r3, {}	; <UNPREDICTABLE>
    2180:	34670102 	strbtcc	r0, [r7], #-258	; 0xfffffefe
    2184:	21304068 	teqcs	r0, r8, rrx
    2188:	01000502 	tsteq	r0, r2, lsl #10
    218c:	02050001 	andeq	r0, r5, #1
    2190:	00000000 	andeq	r0, r0, r0
    2194:	0102b103 	tsteq	r2, r3, lsl #2
    2198:	05023d4e 	streq	r3, [r2, #-3406]	; 0xfffff2b2
    219c:	00010100 	andeq	r0, r1, r0, lsl #2
    21a0:	00000205 	andeq	r0, r0, r5, lsl #4
    21a4:	c0030000 	andgt	r0, r3, r0
    21a8:	33670102 	cmncc	r7, #-2147483648	; 0x80000000
    21ac:	21304068 	teqcs	r0, r8, rrx
    21b0:	01000502 	tsteq	r0, r2, lsl #10
    21b4:	02050001 	andeq	r0, r5, #1
    21b8:	00000000 	andeq	r0, r0, r0
    21bc:	0102d703 	tsteq	r2, r3, lsl #14
    21c0:	05023d4e 	streq	r3, [r2, #-3406]	; 0xfffff2b2
    21c4:	00010100 	andeq	r0, r1, r0, lsl #2
    21c8:	5f040205 	svcpl	0x00040205
    21cc:	e6030800 	str	r0, [r3], -r0, lsl #16
    21d0:	3d6b0102 	stfcce	f0, [fp, #-8]!
    21d4:	01000502 	tsteq	r0, r2, lsl #10
    21d8:	02050001 	andeq	r0, r5, #1
    21dc:	08005f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip, lr}
    21e0:	0102f603 	tsteq	r2, r3, lsl #12	; <UNPREDICTABLE>
    21e4:	05023d6b 	streq	r3, [r2, #-3435]	; 0xfffff295
    21e8:	00010100 	andeq	r0, r1, r0, lsl #2
    21ec:	00000205 	andeq	r0, r0, r5, lsl #4
    21f0:	8a030000 	bhi	c21f8 <_Min_Stack_Size+0xc1ff8>
    21f4:	3e880103 	rmfcce	f0, f0, f3
    21f8:	023e1e42 	eorseq	r1, lr, #1056	; 0x420
    21fc:	01010005 	tsteq	r1, r5
    2200:	00020500 	andeq	r0, r2, r0, lsl #10
    2204:	03000000 	movweq	r0, #0
    2208:	6a0103a1 	bvs	43094 <_Min_Stack_Size+0x42e94>
    220c:	0005023d 	andeq	r0, r5, sp, lsr r2
    2210:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2214:	00000002 	andeq	r0, r0, r2
    2218:	03b00300 	movseq	r0, #0, 6
    221c:	4c426701 	mcrrmi	7, 0, r6, r2, cr1
    2220:	3e3e3e3e 	mrccc	14, 1, r3, cr14, cr14, {1}
    2224:	0005023d 	andeq	r0, r5, sp, lsr r2
    2228:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    222c:	00000002 	andeq	r0, r0, r2
    2230:	03ce0300 	biceq	r0, lr, #0, 6
    2234:	3e338301 	cdpcc	3, 3, cr8, cr3, cr1, {0}
    2238:	3d4b5959 	vstrcc.16	s11, [fp, #-178]	; 0xffffff4e	; <UNPREDICTABLE>
    223c:	01000802 	tsteq	r0, r2, lsl #16
    2240:	02050001 	andeq	r0, r5, #1
    2244:	00000000 	andeq	r0, r0, r0
    2248:	0103e303 	tsteq	r3, r3, lsl #6
    224c:	08023d5c 	stmdaeq	r2, {r2, r3, r4, r6, r8, sl, fp, ip, sp}
    2250:	00010100 	andeq	r0, r1, r0, lsl #2
    2254:	00000205 	andeq	r0, r0, r5, lsl #4
    2258:	a5030000 	strge	r0, [r3, #-0]
    225c:	88670104 	stmdahi	r7!, {r2, r8}^
    2260:	593f4e3e 	ldmdbpl	pc!, {r1, r2, r3, r4, r5, r9, sl, fp, lr}	; <UNPREDICTABLE>
    2264:	764b683e 			; <UNDEFINED> instruction: 0x764b683e
    2268:	5c59595a 	mrrcpl	9, 5, r5, r9, cr10	; <UNPREDICTABLE>
    226c:	933e4d9f 	teqls	lr, #10176	; 0x27c0
    2270:	3e1e423e 	mrccc	2, 0, r4, cr14, cr14, {1}
    2274:	01000702 	tsteq	r0, r2, lsl #14
    2278:	02050001 	andeq	r0, r5, #1
    227c:	00000000 	andeq	r0, r0, r0
    2280:	0104e103 	tsteq	r4, r3, lsl #2
    2284:	08833383 	stmeq	r3, {r0, r1, r7, r8, r9, ip, sp}
    2288:	02670821 	rsbeq	r0, r7, #2162688	; 0x210000
    228c:	01010007 	tsteq	r1, r7
    2290:	00020500 	andeq	r0, r2, r0, lsl #10
    2294:	03000000 	movweq	r0, #0
    2298:	4e0104f6 	mcrmi	4, 0, r0, cr1, cr6, {7}
    229c:	0007023d 	andeq	r0, r7, sp, lsr r2
    22a0:	03b10101 			; <UNDEFINED> instruction: 0x03b10101
    22a4:	00020000 	andeq	r0, r2, r0
    22a8:	00000175 	andeq	r0, r0, r5, ror r1
    22ac:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    22b0:	0101000d 	tsteq	r1, sp
    22b4:	00000101 	andeq	r0, r0, r1, lsl #2
    22b8:	00000100 	andeq	r0, r0, r0, lsl #2
    22bc:	6f682f01 	svcvs	0x00682f01
    22c0:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    22c4:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    22c8:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    22cc:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    22d0:	544f492d 	strbpl	r4, [pc], #-2349	; 22d8 <_Min_Stack_Size+0x20d8>
    22d4:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    22d8:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    22dc:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
    22e0:	2f006372 	svccs	0x00006372
    22e4:	2f727375 	svccs	0x00727375
    22e8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    22ec:	2f656475 	svccs	0x00656475
    22f0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    22f4:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 2158 <_Min_Stack_Size+0x1f58>
    22f8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    22fc:	2f00656e 	svccs	0x0000656e
    2300:	2f727375 	svccs	0x00727375
    2304:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2308:	2f656475 	svccs	0x00656475
    230c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    2310:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    2314:	2f007379 	svccs	0x00007379
    2318:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    231c:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    2320:	2f767375 	svccs	0x00767375
    2324:	53414454 	movtpl	r4, #5204	; 0x1454
    2328:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    232c:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    2330:	5349534d 	movtpl	r5, #37709	; 0x934d
    2334:	334d432f 	movtcc	r4, #54063	; 0xd32f
    2338:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    233c:	53656369 	cmnpl	r5, #-1543503871	; 0xa4000001
    2340:	6f707075 	svcvs	0x00707075
    2344:	532f7472 			; <UNDEFINED> instruction: 0x532f7472
    2348:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xfffff0ac
    234c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2350:	00783031 	rsbseq	r3, r8, r1, lsr r0
    2354:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 22a0 <_Min_Stack_Size+0x20a0>
    2358:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    235c:	76737572 			; <UNDEFINED> instruction: 0x76737572
    2360:	4144542f 	cmpmi	r4, pc, lsr #8
    2364:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    2368:	2f544f49 	svccs	0x00544f49
    236c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    2370:	65697261 	strbvs	r7, [r9, #-609]!	; 0xfffffd9f
    2374:	6e692f73 	mcrvs	15, 3, r2, cr9, cr3, {3}
    2378:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
    237c:	2f656d6f 	svccs	0x00656d6f
    2380:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    2384:	542f7673 	strtpl	r7, [pc], #-1651	; 238c <_Min_Stack_Size+0x218c>
    2388:	41534144 	cmpmi	r3, r4, asr #2
    238c:	4f492d54 	svcmi	0x00492d54
    2390:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    2394:	2f534953 	svccs	0x00534953
    2398:	2f334d43 	svccs	0x00334d43
    239c:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    23a0:	70707553 	rsbsvc	r7, r0, r3, asr r5
    23a4:	0074726f 	rsbseq	r7, r4, pc, ror #4
    23a8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    23ac:	31663233 	cmncc	r6, r3, lsr r2
    23b0:	735f7830 	cmpvc	pc, #48, 16	; 0x300000
    23b4:	632e6970 			; <UNDEFINED> instruction: 0x632e6970
    23b8:	00000100 	andeq	r0, r0, r0, lsl #2
    23bc:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    23c0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    23c4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    23c8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    23cc:	00000200 	andeq	r0, r0, r0, lsl #4
    23d0:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    23d4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    23d8:	00030068 	andeq	r0, r3, r8, rrx
    23dc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    23e0:	31663233 	cmncc	r6, r3, lsr r2
    23e4:	682e7830 	stmdavs	lr!, {r4, r5, fp, ip, sp, lr}
    23e8:	00000400 	andeq	r0, r0, r0, lsl #8
    23ec:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    23f0:	30316632 	eorscc	r6, r1, r2, lsr r6
    23f4:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
    23f8:	00682e63 	rsbeq	r2, r8, r3, ror #28
    23fc:	73000005 	movwvc	r0, #5
    2400:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2404:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2408:	6970735f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    240c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    2410:	6f630000 	svcvs	0x00630000
    2414:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    2418:	682e336d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
    241c:	00000600 	andeq	r0, r0, r0, lsl #12
    2420:	02050000 	andeq	r0, r5, #0
    2424:	00000000 	andeq	r0, r0, r0
    2428:	0100f703 	tsteq	r0, r3, lsl #14	; <UNPREDICTABLE>
    242c:	035a4d4e 	cmpeq	sl, #4992	; 0x1380
    2430:	6f035813 	svcvs	0x00035813
    2434:	035a4d20 	cmpeq	sl, #32, 26	; 0x800
    2438:	7803580c 	stmdavc	r3, {r2, r3, fp, ip, lr}
    243c:	5b5a4d20 	blpl	16958c4 <_Min_Stack_Size+0x16956c4>
    2440:	01000a02 	tsteq	r0, r2, lsl #20
    2444:	02050001 	andeq	r0, r5, #1
    2448:	08005f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, ip, lr}
    244c:	01019e03 	tsteq	r1, r3, lsl #28
    2450:	2e120359 	mrccs	3, 0, r0, cr2, cr9, {2}
    2454:	4a09033e 	bmi	243154 <_Min_Stack_Size+0x242f54>
    2458:	2d2f2d67 	stccs	13, cr2, [pc, #-412]!	; 22c4 <_Min_Stack_Size+0x20c4>
    245c:	2c302c30 	ldccs	12, cr2, [r0], #-192	; 0xffffff40
    2460:	2b312b31 	blcs	c4d12c <_Min_Stack_Size+0xc4cf2c>
    2464:	4b863f5d 	blmi	fe1921e0 <BootRAM+0xd102981>
    2468:	01000502 	tsteq	r0, r2, lsl #10
    246c:	02050001 	andeq	r0, r5, #1
    2470:	00000000 	andeq	r0, r0, r0
    2474:	0101db03 	tsteq	r1, r3, lsl #22
    2478:	03308359 	teqeq	r0, #1677721601	; 0x64000001
    247c:	3f9f2e0d 	svccc	0x009f2e0d
    2480:	422f4c3f 	eormi	r4, pc, #16128	; 0x3f00
    2484:	4d32414d 	ldfmis	f4, [r2, #-308]!	; 0xfffffecc
    2488:	3c29034f 	stccc	3, cr0, [r9], #-316	; 0xfffffec4
    248c:	f75b325b 			; <UNDEFINED> instruction: 0xf75b325b
    2490:	5b693208 	blpl	1a4ecb8 <_Min_Stack_Size+0x1a4eab8>
    2494:	0200405b 	andeq	r4, r0, #91	; 0x5b
    2498:	3c060104 	stfccs	f0, [r6], {4}
    249c:	322f3f06 	eorcc	r3, pc, #6, 30
    24a0:	2d4b2fa1 	stclcs	15, cr2, [fp, #-644]	; 0xfffffd7c
    24a4:	023d8749 	eorseq	r8, sp, #19136512	; 0x1240000
    24a8:	01010009 	tsteq	r1, r9
    24ac:	00020500 	andeq	r0, r2, r0, lsl #10
    24b0:	03000000 	movweq	r0, #0
    24b4:	4d0102f2 	sfmmi	f0, 4, [r1, #-968]	; 0xfffffc38
    24b8:	3e3e3e3e 	mrccc	14, 1, r3, cr14, cr14, {1}
    24bc:	3e3e3e3e 	mrccc	14, 1, r3, cr14, cr14, {1}
    24c0:	0005023d 	andeq	r0, r5, sp, lsr r2
    24c4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    24c8:	00000002 	andeq	r0, r0, r2
    24cc:	038e0300 	orreq	r0, lr, #0, 6
    24d0:	3f3f4d01 	svccc	0x003f4d01
    24d4:	3d3f3f3f 	ldccc	15, cr3, [pc, #-252]!	; 23e0 <_Min_Stack_Size+0x21e0>
    24d8:	01000502 	tsteq	r0, r2, lsl #10
    24dc:	02050001 	andeq	r0, r5, #1
    24e0:	08005fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, ip, lr}
    24e4:	0103ab03 	tsteq	r3, r3, lsl #22
    24e8:	1e893f6a 	cdpne	15, 8, cr3, cr9, cr10, {3}
    24ec:	00050284 	andeq	r0, r5, r4, lsl #5
    24f0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    24f4:	00000002 	andeq	r0, r0, r2
    24f8:	03c30300 	biceq	r0, r3, #0, 6
    24fc:	893f6a01 	ldmdbhi	pc!, {r0, r9, fp, sp, lr}	; <UNPREDICTABLE>
    2500:	0502841e 	streq	r8, [r2, #-1054]	; 0xfffffbe2
    2504:	00010100 	andeq	r0, r1, r0, lsl #2
    2508:	00000205 	andeq	r0, r0, r5, lsl #4
    250c:	e2030000 	and	r0, r3, #0
    2510:	51830103 	orrpl	r0, r3, r3, lsl #2
    2514:	893f5a4d 	ldmdbhi	pc!, {r0, r2, r3, r6, r9, fp, ip, lr}	; <UNPREDICTABLE>
    2518:	0502a01e 	streq	sl, [r2, #-30]	; 0xffffffe2
    251c:	00010100 	andeq	r0, r1, r0, lsl #2
    2520:	00000205 	andeq	r0, r0, r5, lsl #4
    2524:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
    2528:	3f870104 	svccc	0x00870104
    252c:	02a01e89 	adceq	r1, r0, #2192	; 0x890
    2530:	01010005 	tsteq	r1, r5
    2534:	04020500 	streq	r0, [r2], #-1280	; 0xfffffb00
    2538:	03080060 	movweq	r0, #32864	; 0x8060
    253c:	6b0104a3 	blvs	437d0 <_Min_Stack_Size+0x435d0>
    2540:	0005023d 	andeq	r0, r5, sp, lsr r2
    2544:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2548:	00602002 	rsbeq	r2, r0, r2
    254c:	04b30308 	ldrteq	r0, [r3], #776	; 0x308
    2550:	023d4f01 	eorseq	r4, sp, #1, 30
    2554:	01010005 	tsteq	r1, r5
    2558:	00020500 	andeq	r0, r2, r0, lsl #10
    255c:	03000000 	movweq	r0, #0
    2560:	6a0104c5 	bvs	4387c <_Min_Stack_Size+0x4367c>
    2564:	841e895b 	ldrhi	r8, [lr], #-2395	; 0xfffff6a5
    2568:	01000502 	tsteq	r0, r2, lsl #10
    256c:	02050001 	andeq	r0, r5, #1
    2570:	00000000 	andeq	r0, r0, r0
    2574:	0104dd03 	tsteq	r4, r3, lsl #26
    2578:	1e893f6a 	cdpne	15, 8, cr3, cr9, cr10, {3}
    257c:	00050284 	andeq	r0, r5, r4, lsl #5
    2580:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2584:	00000002 	andeq	r0, r0, r2
    2588:	04f70300 	ldrbteq	r0, [r7], #768	; 0x300
    258c:	83846b01 	orrhi	r6, r4, #1024	; 0x400
    2590:	01000502 	tsteq	r0, r2, lsl #10
    2594:	02050001 	andeq	r0, r5, #1
    2598:	00000000 	andeq	r0, r0, r0
    259c:	01058703 	tsteq	r5, r3, lsl #14
    25a0:	0502834f 	streq	r8, [r2, #-847]	; 0xfffffcb1
    25a4:	00010100 	andeq	r0, r1, r0, lsl #2
    25a8:	00000205 	andeq	r0, r0, r5, lsl #4
    25ac:	97030000 	strls	r0, [r3, -r0]
    25b0:	3f6a0105 	svccc	0x006a0105
    25b4:	02841e89 	addeq	r1, r4, #2192	; 0x890
    25b8:	01010005 	tsteq	r1, r5
    25bc:	00020500 	andeq	r0, r2, r0, lsl #10
    25c0:	03000000 	movweq	r0, #0
    25c4:	670105b1 			; <UNDEFINED> instruction: 0x670105b1
    25c8:	3f4f3f32 	svccc	0x004f3f32
    25cc:	00050221 	andeq	r0, r5, r1, lsr #4
    25d0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    25d4:	00000002 	andeq	r0, r0, r2
    25d8:	05ca0300 	strbeq	r0, [sl, #768]	; 0x300
    25dc:	023d4f01 	eorseq	r4, sp, #1, 30
    25e0:	01010005 	tsteq	r1, r5
    25e4:	00020500 	andeq	r0, r2, r0, lsl #10
    25e8:	03000000 	movweq	r0, #0
    25ec:	6a0105dc 	bvs	43d64 <_Min_Stack_Size+0x43b64>
    25f0:	841e894d 	ldrhi	r8, [lr], #-2381	; 0xfffff6b3
    25f4:	01000502 	tsteq	r0, r2, lsl #10
    25f8:	02050001 	andeq	r0, r5, #1
    25fc:	08006038 	stmdaeq	r0, {r3, r4, r5, sp, lr}
    2600:	0105fe03 	tsteq	r5, r3, lsl #28	; <UNPREDICTABLE>
    2604:	41853367 	orrmi	r3, r5, r7, ror #6
    2608:	05022131 	streq	r2, [r2, #-305]	; 0xfffffecf
    260c:	00010100 	andeq	r0, r1, r0, lsl #2
    2610:	00000205 	andeq	r0, r0, r5, lsl #4
    2614:	a4030000 	strge	r0, [r3], #-0
    2618:	596c0106 	stmdbpl	ip!, {r1, r2, r8}^
    261c:	01000502 	tsteq	r0, r2, lsl #10
    2620:	02050001 	andeq	r0, r5, #1
    2624:	00000000 	andeq	r0, r0, r0
    2628:	0106bd03 	tsteq	r6, r3, lsl #26
    262c:	776d2f67 	strbvc	r2, [sp, -r7, ror #30]!
    2630:	00695b4d 	rsbeq	r5, r9, sp, asr #22
    2634:	06010402 	streq	r0, [r1], -r2, lsl #8
    2638:	413f0682 	teqmi	pc, r2, lsl #13
    263c:	05022131 	streq	r2, [r2, #-305]	; 0xfffffecf
    2640:	00010100 	andeq	r0, r1, r0, lsl #2
    2644:	00000205 	andeq	r0, r0, r5, lsl #4
    2648:	f3030000 	vhadd.u8	d0, d3, d0
    264c:	34670106 	strbtcc	r0, [r7], #-262	; 0xfffffefa
    2650:	05025977 	streq	r5, [r2, #-2423]	; 0xfffff689
    2654:	d4010100 	strle	r0, [r1], #-256	; 0xffffff00
    2658:	0200000a 	andeq	r0, r0, #10
    265c:	00016200 	andeq	r6, r1, r0, lsl #4
    2660:	fb010200 	blx	42e6a <_Min_Stack_Size+0x42c6a>
    2664:	01000d0e 	tsteq	r0, lr, lsl #26
    2668:	00010101 	andeq	r0, r1, r1, lsl #2
    266c:	00010000 	andeq	r0, r1, r0
    2670:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    2674:	2f656d6f 	svccs	0x00656d6f
    2678:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    267c:	542f7673 	strtpl	r7, [pc], #-1651	; 2684 <_Min_Stack_Size+0x2484>
    2680:	41534144 	cmpmi	r3, r4, asr #2
    2684:	4f492d54 	svcmi	0x00492d54
    2688:	694c2f54 	stmdbvs	ip, {r2, r4, r6, r8, r9, sl, fp, sp}^
    268c:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    2690:	2f736569 	svccs	0x00736569
    2694:	00637273 	rsbeq	r7, r3, r3, ror r2
    2698:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    269c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    26a0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    26a4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    26a8:	2f62696c 	svccs	0x0062696c
    26ac:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    26b0:	00656e69 	rsbeq	r6, r5, r9, ror #28
    26b4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    26b8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    26bc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    26c0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    26c4:	2f62696c 	svccs	0x0062696c
    26c8:	00737973 	rsbseq	r7, r3, r3, ror r9
    26cc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2618 <_Min_Stack_Size+0x2418>
    26d0:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    26d4:	76737572 			; <UNDEFINED> instruction: 0x76737572
    26d8:	4144542f 	cmpmi	r4, pc, lsr #8
    26dc:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    26e0:	2f544f49 	svccs	0x00544f49
    26e4:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    26e8:	4d432f53 	stclmi	15, cr2, [r3, #-332]	; 0xfffffeb4
    26ec:	65442f33 	strbvs	r2, [r4, #-3891]	; 0xfffff0cd
    26f0:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    26f4:	70707553 	rsbsvc	r7, r0, r3, asr r5
    26f8:	2f74726f 	svccs	0x0074726f
    26fc:	532f5453 			; <UNDEFINED> instruction: 0x532f5453
    2700:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2704:	78303146 	ldmdavc	r0!, {r1, r2, r6, r8, ip, sp}
    2708:	6f682f00 	svcvs	0x00682f00
    270c:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    2710:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    2714:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    2718:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    271c:	544f492d 	strbpl	r4, [pc], #-2349	; 2724 <_Min_Stack_Size+0x2524>
    2720:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    2724:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2728:	692f7365 	stmdbvs	pc!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
    272c:	2f00636e 	svccs	0x0000636e
    2730:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    2734:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    2738:	2f767375 	svccs	0x00767375
    273c:	53414454 	movtpl	r4, #5204	; 0x1454
    2740:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    2744:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    2748:	5349534d 	movtpl	r5, #37709	; 0x934d
    274c:	334d432f 	movtcc	r4, #54063	; 0xd32f
    2750:	726f432f 	rsbvc	r4, pc, #-1140850688	; 0xbc000000
    2754:	70755365 	rsbsvc	r5, r5, r5, ror #6
    2758:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    275c:	74730000 	ldrbtvc	r0, [r3], #-0
    2760:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2764:	5f783031 	svcpl	0x00783031
    2768:	2e6d6974 			; <UNDEFINED> instruction: 0x2e6d6974
    276c:	00010063 	andeq	r0, r1, r3, rrx
    2770:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    2774:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    2778:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    277c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    2780:	00020068 	andeq	r0, r2, r8, rrx
    2784:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    2788:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    278c:	0300682e 	movweq	r6, #2094	; 0x82e
    2790:	74730000 	ldrbtvc	r0, [r3], #-0
    2794:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2798:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
    279c:	00040068 	andeq	r0, r4, r8, rrx
    27a0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    27a4:	31663233 	cmncc	r6, r3, lsr r2
    27a8:	745f7830 	ldrbvc	r7, [pc], #-2096	; 27b0 <_Min_Stack_Size+0x25b0>
    27ac:	682e6d69 	stmdavs	lr!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}
    27b0:	00000500 	andeq	r0, r0, r0, lsl #10
    27b4:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    27b8:	336d635f 	cmncc	sp, #2080374785	; 0x7c000001
    27bc:	0600682e 	streq	r6, [r0], -lr, lsr #16
    27c0:	00000000 	andeq	r0, r0, r0
    27c4:	00000205 	andeq	r0, r0, r5, lsl #4
    27c8:	fa030000 	blx	c27d0 <_Min_Stack_Size+0xc25d0>
    27cc:	4c4e0100 	stfmie	f0, [lr], {-0}
    27d0:	00d50359 	sbcseq	r0, r5, r9, asr r3
    27d4:	7fad0358 	svcvc	0x00ad0358
    27d8:	034b4c20 	movteq	r4, #48160	; 0xbc20
    27dc:	034a00d0 	movteq	r0, #41168	; 0xa0d0
    27e0:	4c207fb2 	stcmi	15, cr7, [r0], #-712	; 0xfffffd38
    27e4:	00cb034b 	sbceq	r0, fp, fp, asr #6
    27e8:	7fb7034a 	svcvc	0x00b7034a
    27ec:	034b4c20 	movteq	r4, #48160	; 0xbc20
    27f0:	034a00c6 	movteq	r0, #41158	; 0xa0c6
    27f4:	4c207fbc 	stcmi	15, cr7, [r0], #-752	; 0xfffffd10
    27f8:	00c1034b 	sbceq	r0, r1, fp, asr #6
    27fc:	2041034a 	subcs	r0, r1, sl, asr #6
    2800:	3c034b4c 			; <UNDEFINED> instruction: 0x3c034b4c
    2804:	2046034a 	subcs	r0, r6, sl, asr #6
    2808:	37034b4c 	strcc	r4, [r3, -ip, asr #22]
    280c:	204b034a 	subcs	r0, fp, sl, asr #6
    2810:	3203594c 	andcc	r5, r3, #76, 18	; 0x130000
    2814:	20500358 	subscs	r0, r0, r8, asr r3
    2818:	2d03594c 	vstrcs.16	s10, [r3, #-152]	; 0xffffff68	; <UNPREDICTABLE>
    281c:	20550358 	subscs	r0, r5, r8, asr r3
    2820:	2803594c 	stmdacs	r3, {r2, r3, r6, r8, fp, ip, lr}
    2824:	205a0358 	subscs	r0, sl, r8, asr r3
    2828:	2303594c 	movwcs	r5, #14668	; 0x394c
    282c:	205f0358 	subscs	r0, pc, r8, asr r3	; <UNPREDICTABLE>
    2830:	1e034b4c 	vmlsne.f64	d4, d3, d12
    2834:	2064034a 	rsbcs	r0, r4, sl, asr #6
    2838:	19034b4c 	stmdbne	r3, {r2, r3, r6, r8, r9, fp, lr}
    283c:	2069034a 	rsbcs	r0, r9, sl, asr #6
    2840:	1403594c 	strne	r5, [r3], #-2380	; 0xfffff6b4
    2844:	206e0358 	rsbcs	r0, lr, r8, asr r3
    2848:	0f03594c 	svceq	0x0003594c
    284c:	20730358 	rsbscs	r0, r3, r8, asr r3
    2850:	0a03594c 	beq	d8d88 <_Min_Stack_Size+0xd8b88>
    2854:	207a0358 	rsbscs	r0, sl, r8, asr r3
    2858:	025b594c 	subseq	r5, fp, #76, 18	; 0x130000
    285c:	01010024 	tsteq	r1, r4, lsr #32
    2860:	70020500 	andvc	r0, r2, r0, lsl #10
    2864:	03080060 	movweq	r0, #32864	; 0x8060
    2868:	590101e2 	stmdbpl	r1, {r1, r5, r6, r7, r8}
    286c:	02003e35 	andeq	r3, r0, #848	; 0x350
    2870:	4a060104 	bmi	182c88 <_Min_Stack_Size+0x182a88>
    2874:	02040200 	andeq	r0, r4, #0, 4
    2878:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    287c:	02004a03 	andeq	r4, r0, #12288	; 0x3000
    2880:	064a0404 	strbeq	r0, [sl], -r4, lsl #8
    2884:	5b4b4d4b 	blpl	12d5db8 <_Min_Stack_Size+0x12d5bb8>
    2888:	01040200 	mrseq	r0, R12_usr
    288c:	4d064a06 	vstrmi	s8, [r6, #-24]	; 0xffffffe8
    2890:	4d3f5b4b 	fldmdbxmi	pc!, {d5-d41}	;@ Deprecated
    2894:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
    2898:	004a0601 	subeq	r0, sl, r1, lsl #12
    289c:	4a020402 	bmi	838ac <_Min_Stack_Size+0x836ac>
    28a0:	03040200 	movweq	r0, #16896	; 0x4200
    28a4:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    28a8:	4d064a04 	vstrmi	s8, [r6, #-16]
    28ac:	19023d5d 	stmdbne	r2, {r0, r2, r3, r4, r6, r8, sl, fp, ip, sp}
    28b0:	00010100 	andeq	r0, r1, r0, lsl #2
    28b4:	00000205 	andeq	r0, r0, r5, lsl #4
    28b8:	97030000 	strls	r0, [r3, -r0]
    28bc:	6e590102 	rdfvse	f0, f1, f2
    28c0:	3f3f3e84 	svccc	0x003f3e84
    28c4:	4c5b4d4b 	mrrcmi	13, 4, r4, fp, cr11
    28c8:	02005a5b 	andeq	r5, r0, #372736	; 0x5b000
    28cc:	4a060104 	bmi	182ce4 <_Min_Stack_Size+0x182ae4>
    28d0:	02040200 	andeq	r0, r4, #0, 4
    28d4:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    28d8:	4b064a03 	blmi	1950ec <_Min_Stack_Size+0x194eec>
    28dc:	4c5b4c52 	mrrcmi	12, 5, r4, fp, cr2
    28e0:	5a4d4b5b 	bpl	1355654 <_Min_Stack_Size+0x1355454>
    28e4:	4d3f3f5b 	ldcmi	15, cr3, [pc, #-364]!	; 2780 <_Min_Stack_Size+0x2580>
    28e8:	0010023d 	andseq	r0, r0, sp, lsr r2
    28ec:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    28f0:	00000002 	andeq	r0, r0, r2
    28f4:	02ea0300 	rsceq	r0, sl, #0, 6
    28f8:	856e5901 	strbhi	r5, [lr, #-2305]!	; 0xfffff6ff
    28fc:	4b3f3f3e 	blmi	fd25fc <_Min_Stack_Size+0xfd23fc>
    2900:	774c774d 	strbvc	r7, [ip, -sp, asr #14]
    2904:	04020076 	streq	r0, [r2], #-118	; 0xffffff8a
    2908:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    290c:	4c774c52 	ldclmi	12, cr4, [r7], #-328	; 0xfffffeb8
    2910:	764d4b77 			; <UNDEFINED> instruction: 0x764d4b77
    2914:	4d3f3f77 	ldcmi	15, cr3, [pc, #-476]!	; 2740 <_Min_Stack_Size+0x2540>
    2918:	000a023d 	andeq	r0, sl, sp, lsr r2
    291c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2920:	00000002 	andeq	r0, r0, r2
    2924:	03bc0300 			; <UNDEFINED> instruction: 0x03bc0300
    2928:	856e5901 	strbhi	r5, [lr, #-2305]!	; 0xfffff6ff
    292c:	4b3f3f3e 	blmi	fd262c <_Min_Stack_Size+0xfd242c>
    2930:	774c5b4c 	strbvc	r5, [ip, -ip, asr #22]
    2934:	04020076 	streq	r0, [r2], #-118	; 0xffffff8a
    2938:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    293c:	4d764c52 	ldclmi	12, cr4, [r6, #-328]!	; 0xfffffeb8
    2940:	764c4b76 			; <UNDEFINED> instruction: 0x764c4b76
    2944:	4d3f3f77 	ldcmi	15, cr3, [pc, #-476]!	; 2770 <_Min_Stack_Size+0x2570>
    2948:	000a023d 	andeq	r0, sl, sp, lsr r2
    294c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2950:	00000002 	andeq	r0, r0, r2
    2954:	048b0300 	streq	r0, [fp], #768	; 0x300
    2958:	856e5901 	strbhi	r5, [lr, #-2305]!	; 0xfffff6ff
    295c:	4b3f3f3e 	blmi	fd265c <_Min_Stack_Size+0xfd245c>
    2960:	774c774d 	strbvc	r7, [ip, -sp, asr #14]
    2964:	04020076 	streq	r0, [r2], #-118	; 0xffffff8a
    2968:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    296c:	3f774c4e 	svccc	0x00774c4e
    2970:	023d5b3f 	eorseq	r5, sp, #64512	; 0xfc00
    2974:	0101000a 	tsteq	r1, sl
    2978:	00020500 	andeq	r0, r2, r0, lsl #10
    297c:	03000000 	movweq	r0, #0
    2980:	030104cb 	movweq	r0, #5323	; 0x14cb
    2984:	944e5810 	strbls	r5, [lr], #-2064	; 0xfffff7f0
    2988:	03662003 	cmneq	r6, #3
    298c:	944e2062 	strbls	r2, [lr], #-98	; 0xffffff9e
    2990:	03661603 	cmneq	r6, #3145728	; 0x300000
    2994:	944e206c 	strbls	r2, [lr], #-108	; 0xffffff94
    2998:	03660c03 	cmneq	r6, #768	; 0x300
    299c:	6894207a 	ldmvs	r4, {r1, r3, r4, r5, r6, sp}
    29a0:	01000402 	tsteq	r0, r2, lsl #8
    29a4:	02050001 	andeq	r0, r5, #1
    29a8:	00000000 	andeq	r0, r0, r0
    29ac:	01058e03 	tsteq	r5, r3, lsl #28
    29b0:	4c322f59 	ldcmi	15, cr2, [r2], #-356	; 0xfffffe9c
    29b4:	404c3140 	submi	r3, ip, r0, asr #2
    29b8:	68934d30 	ldmvs	r3, {r4, r5, r8, sl, fp, lr}
    29bc:	660e0376 			; <UNDEFINED> instruction: 0x660e0376
    29c0:	93207703 			; <UNDEFINED> instruction: 0x93207703
    29c4:	02687668 	rsbeq	r7, r8, #104, 12	; 0x6800000
    29c8:	01010004 	tsteq	r1, r4
    29cc:	00020500 	andeq	r0, r2, r0, lsl #10
    29d0:	03000000 	movweq	r0, #0
    29d4:	030105c8 	movweq	r0, #5576	; 0x15c8
    29d8:	2d67580b 	stclcs	8, cr5, [r7, #-44]!	; 0xffffffd4
    29dc:	2c302d2f 	ldccs	13, cr2, [r0], #-188	; 0xffffff44
    29e0:	2b312c30 	blcs	c4daa8 <_Min_Stack_Size+0xc4d8a8>
    29e4:	0005025c 	andeq	r0, r5, ip, asr r2
    29e8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    29ec:	00000002 	andeq	r0, r0, r2
    29f0:	05e00300 	strbeq	r0, [r0, #768]!	; 0x300
    29f4:	3d4b4c01 	stclcc	12, cr4, [fp, #-4]
    29f8:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
    29fc:	01010005 	tsteq	r1, r5
    2a00:	00020500 	andeq	r0, r2, r0, lsl #10
    2a04:	03000000 	movweq	r0, #0
    2a08:	4c0105f0 	cfstr32mi	mvfx0, [r1], {240}	; 0xf0
    2a0c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2a10:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2a14:	01000502 	tsteq	r0, r2, lsl #10
    2a18:	02050001 	andeq	r0, r5, #1
    2a1c:	00000000 	andeq	r0, r0, r0
    2a20:	01068303 	tsteq	r6, r3, lsl #6
    2a24:	3d3d3d4c 	ldccc	13, cr3, [sp, #-304]!	; 0xfffffed0
    2a28:	05023d3d 	streq	r3, [r2, #-3389]	; 0xfffff2c3
    2a2c:	00010100 	andeq	r0, r1, r0, lsl #2
    2a30:	00000205 	andeq	r0, r0, r5, lsl #4
    2a34:	93030000 	movwls	r0, #12288	; 0x3000
    2a38:	3d4c0106 	stfcce	f0, [ip, #-24]	; 0xffffffe8
    2a3c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    2a40:	05023d3d 	streq	r3, [r2, #-3389]	; 0xfffff2c3
    2a44:	00010100 	andeq	r0, r1, r0, lsl #2
    2a48:	61680205 	cmnvs	r8, r5, lsl #4
    2a4c:	a6030800 	strge	r0, [r3], -r0, lsl #16
    2a50:	3f6b0106 	svccc	0x006b0106
    2a54:	02841e89 	addeq	r1, r4, #2192	; 0x890
    2a58:	01010005 	tsteq	r1, r5
    2a5c:	00020500 	andeq	r0, r2, r0, lsl #10
    2a60:	03000000 	movweq	r0, #0
    2a64:	6a0106bf 	bvs	44568 <_Min_Stack_Size+0x44368>
    2a68:	a01ec13f 	andsge	ip, lr, pc, lsr r1
    2a6c:	01000502 	tsteq	r0, r2, lsl #10
    2a70:	02050001 	andeq	r0, r5, #1
    2a74:	080061a8 	stmdaeq	r0, {r3, r5, r7, r8, sp, lr}
    2a78:	0106e803 	tsteq	r6, r3, lsl #16
    2a7c:	1e893f88 	cdpne	15, 8, cr3, cr9, cr8, {4}
    2a80:	000502a0 	andeq	r0, r5, r0, lsr #5
    2a84:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2a88:	00000002 	andeq	r0, r0, r2
    2a8c:	078d0300 	streq	r0, [sp, r0, lsl #6]
    2a90:	023d6c01 	eorseq	r6, sp, #256	; 0x100
    2a94:	01010005 	tsteq	r1, r5
    2a98:	00020500 	andeq	r0, r2, r0, lsl #10
    2a9c:	03000000 	movweq	r0, #0
    2aa0:	880107a9 	stmdahi	r1, {r0, r3, r5, r7, r8, r9, sl}
    2aa4:	00050275 	andeq	r0, r5, r5, ror r2
    2aa8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2aac:	00000002 	andeq	r0, r0, r2
    2ab0:	07c40300 	strbeq	r0, [r4, r0, lsl #6]
    2ab4:	893f8801 	ldmdbhi	pc!, {r0, fp, pc}	; <UNPREDICTABLE>
    2ab8:	0502a01e 	streq	sl, [r2, #-30]	; 0xffffffe2
    2abc:	00010100 	andeq	r0, r1, r0, lsl #2
    2ac0:	00000205 	andeq	r0, r0, r5, lsl #4
    2ac4:	dd030000 	stcle	0, cr0, [r3, #-0]
    2ac8:	834e0107 	movthi	r0, #57607	; 0xe107
    2acc:	01000502 	tsteq	r0, r2, lsl #10
    2ad0:	02050001 	andeq	r0, r5, #1
    2ad4:	00000000 	andeq	r0, r0, r0
    2ad8:	0107f003 	tsteq	r7, r3	; <UNPREDICTABLE>
    2adc:	02835a6b 	addeq	r5, r3, #438272	; 0x6b000
    2ae0:	01010004 	tsteq	r1, r4
    2ae4:	00020500 	andeq	r0, r2, r0, lsl #10
    2ae8:	03000000 	movweq	r0, #0
    2aec:	cf01088c 	svcgt	0x0001088c
    2af0:	5a69783e 	bpl	1a60bf0 <_Min_Stack_Size+0x1a609f0>
    2af4:	00040283 	andeq	r0, r4, r3, lsl #5
    2af8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2afc:	00000002 	andeq	r0, r0, r2
    2b00:	08b40300 	ldmeq	r4!, {r8, r9}
    2b04:	6935c901 	ldmdbvs	r5!, {r0, r8, fp, lr, pc}
    2b08:	4b4c4c3e 	blmi	1315c08 <_Min_Stack_Size+0x1315a08>
    2b0c:	04023d4c 	streq	r3, [r2], #-3404	; 0xfffff2b4
    2b10:	00010100 	andeq	r0, r1, r0, lsl #2
    2b14:	00000205 	andeq	r0, r0, r5, lsl #4
    2b18:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    2b1c:	68cf0108 	stmiavs	pc, {r3, r8}^	; <UNPREDICTABLE>
    2b20:	00040283 	andeq	r0, r4, r3, lsl #5
    2b24:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2b28:	00000002 	andeq	r0, r0, r2
    2b2c:	08fd0300 	ldmeq	sp!, {r8, r9}^
    2b30:	3e34c901 	vaddcc.f16	s24, s8, s2	; <UNPREDICTABLE>
    2b34:	023dbc3e 	eorseq	fp, sp, #15872	; 0x3e00
    2b38:	01010005 	tsteq	r1, r5
    2b3c:	00020500 	andeq	r0, r2, r0, lsl #10
    2b40:	03000000 	movweq	r0, #0
    2b44:	87010998 			; <UNDEFINED> instruction: 0x87010998
    2b48:	05023d3e 	streq	r3, [r2, #-3390]	; 0xfffff2c2
    2b4c:	00010100 	andeq	r0, r1, r0, lsl #2
    2b50:	00000205 	andeq	r0, r0, r5, lsl #4
    2b54:	af030000 	svcge	0x00030000
    2b58:	32670109 	rsbcc	r0, r7, #1073741826	; 0x40000002
    2b5c:	3d4c4c3e 	stclcc	12, cr4, [ip, #-248]	; 0xffffff08
    2b60:	01000502 	tsteq	r0, r2, lsl #10
    2b64:	02050001 	andeq	r0, r5, #1
    2b68:	00000000 	andeq	r0, r0, r0
    2b6c:	0109cd03 	tsteq	r9, r3, lsl #26
    2b70:	4c3e3367 	ldcmi	3, cr3, [lr], #-412	; 0xfffffe64
    2b74:	05023d4c 	streq	r3, [r2, #-3404]	; 0xfffff2b4
    2b78:	00010100 	andeq	r0, r1, r0, lsl #2
    2b7c:	00000205 	andeq	r0, r0, r5, lsl #4
    2b80:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    2b84:	2fc90109 	svccs	0x00c90109
    2b88:	2e09032f 	cdpcs	3, 0, cr0, cr9, cr15, {1}
    2b8c:	4b3f3f3f 	blmi	fd2890 <_Min_Stack_Size+0xfd2690>
    2b90:	4b69674d 	blmi	1a5c8cc <_Min_Stack_Size+0x1a5c6cc>
    2b94:	3d3e3e93 	ldccc	14, cr3, [lr, #-588]!	; 0xfffffdb4
    2b98:	01000502 	tsteq	r0, r2, lsl #10
    2b9c:	02050001 	andeq	r0, r5, #1
    2ba0:	00000000 	andeq	r0, r0, r0
    2ba4:	010aa303 	tsteq	sl, r3, lsl #6
    2ba8:	4c3e3267 	lfmmi	f3, 4, [lr], #-412	; 0xfffffe64
    2bac:	05023d4c 	streq	r3, [r2, #-3404]	; 0xfffff2b4
    2bb0:	00010100 	andeq	r0, r1, r0, lsl #2
    2bb4:	00000205 	andeq	r0, r0, r5, lsl #4
    2bb8:	bb030000 	bllt	c2bc0 <_Min_Stack_Size+0xc29c0>
    2bbc:	3267010a 	rsbcc	r0, r7, #-2147483646	; 0x80000002
    2bc0:	3d684c3e 	stclcc	12, cr4, [r8, #-248]!	; 0xffffff08
    2bc4:	01000502 	tsteq	r0, r2, lsl #10
    2bc8:	02050001 	andeq	r0, r5, #1
    2bcc:	00000000 	andeq	r0, r0, r0
    2bd0:	010ad303 	tsteq	sl, r3, lsl #6
    2bd4:	4c3e3267 	lfmmi	f3, 4, [lr], #-412	; 0xfffffe64
    2bd8:	05023d4c 	streq	r3, [r2, #-3404]	; 0xfffff2b4
    2bdc:	00010100 	andeq	r0, r1, r0, lsl #2
    2be0:	00000205 	andeq	r0, r0, r5, lsl #4
    2be4:	eb030000 	bl	c2bec <_Min_Stack_Size+0xc29ec>
    2be8:	3267010a 	rsbcc	r0, r7, #-2147483646	; 0x80000002
    2bec:	3d684c3e 	stclcc	12, cr4, [r8, #-248]!	; 0xffffff08
    2bf0:	01000502 	tsteq	r0, r2, lsl #10
    2bf4:	02050001 	andeq	r0, r5, #1
    2bf8:	00000000 	andeq	r0, r0, r0
    2bfc:	010b8103 	tsteq	fp, r3, lsl #2
    2c00:	1e893f6a 	cdpne	15, 8, cr3, cr9, cr10, {3}
    2c04:	00050284 	andeq	r0, r5, r4, lsl #5
    2c08:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2c0c:	00000002 	andeq	r0, r0, r2
    2c10:	0b990300 	bleq	fe643818 <BootRAM+0xd5b3fb9>
    2c14:	893f6a01 	ldmdbhi	pc!, {r0, r9, fp, sp, lr}	; <UNPREDICTABLE>
    2c18:	0502841e 	streq	r8, [r2, #-1054]	; 0xfffffbe2
    2c1c:	00010100 	andeq	r0, r1, r0, lsl #2
    2c20:	00000205 	andeq	r0, r0, r5, lsl #4
    2c24:	b2030000 	andlt	r0, r3, #0
    2c28:	3f6a010b 	svccc	0x006a010b
    2c2c:	02841e89 	addeq	r1, r4, #2192	; 0x890
    2c30:	01010005 	tsteq	r1, r5
    2c34:	00020500 	andeq	r0, r2, r0, lsl #10
    2c38:	03000000 	movweq	r0, #0
    2c3c:	6a010bcb 	bvs	45b70 <_Min_Stack_Size+0x45970>
    2c40:	841e893f 	ldrhi	r8, [lr], #-2367	; 0xfffff6c1
    2c44:	01000502 	tsteq	r0, r2, lsl #10
    2c48:	02050001 	andeq	r0, r5, #1
    2c4c:	00000000 	andeq	r0, r0, r0
    2c50:	010be503 	tsteq	fp, r3, lsl #10
    2c54:	4c3e3267 	lfmmi	f3, 4, [lr], #-412	; 0xfffffe64
    2c58:	05023d4c 	streq	r3, [r2, #-3404]	; 0xfffff2b4
    2c5c:	00010100 	andeq	r0, r1, r0, lsl #2
    2c60:	00000205 	andeq	r0, r0, r5, lsl #4
    2c64:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    2c68:	3267010b 	rsbcc	r0, r7, #-1073741822	; 0xc0000002
    2c6c:	3d684c3e 	stclcc	12, cr4, [r8, #-248]!	; 0xffffff08
    2c70:	01000502 	tsteq	r0, r2, lsl #10
    2c74:	02050001 	andeq	r0, r5, #1
    2c78:	00000000 	andeq	r0, r0, r0
    2c7c:	010c9603 	tsteq	ip, r3, lsl #12
    2c80:	4c3e3267 	lfmmi	f3, 4, [lr], #-412	; 0xfffffe64
    2c84:	05023d4c 	streq	r3, [r2, #-3404]	; 0xfffff2b4
    2c88:	00010100 	andeq	r0, r1, r0, lsl #2
    2c8c:	00000205 	andeq	r0, r0, r5, lsl #4
    2c90:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    2c94:	3267010c 	rsbcc	r0, r7, #12, 2
    2c98:	3d684c3e 	stclcc	12, cr4, [r8, #-248]!	; 0xffffff08
    2c9c:	01000502 	tsteq	r0, r2, lsl #10
    2ca0:	02050001 	andeq	r0, r5, #1
    2ca4:	00000000 	andeq	r0, r0, r0
    2ca8:	010cc603 	tsteq	ip, r3, lsl #12
    2cac:	4c3e3367 	ldcmi	3, cr3, [lr], #-412	; 0xfffffe64
    2cb0:	05023d4c 	streq	r3, [r2, #-3404]	; 0xfffff2b4
    2cb4:	00010100 	andeq	r0, r1, r0, lsl #2
    2cb8:	00000205 	andeq	r0, r0, r5, lsl #4
    2cbc:	e0030000 	and	r0, r3, r0
    2cc0:	3367010c 	cmncc	r7, #12, 2
    2cc4:	3d684c3e 	stclcc	12, cr4, [r8, #-248]!	; 0xffffff08
    2cc8:	01000502 	tsteq	r0, r2, lsl #10
    2ccc:	02050001 	andeq	r0, r5, #1
    2cd0:	00000000 	andeq	r0, r0, r0
    2cd4:	010cf903 	tsteq	ip, r3, lsl #18	; <UNPREDICTABLE>
    2cd8:	4c3e3367 	ldcmi	3, cr3, [lr], #-412	; 0xfffffe64
    2cdc:	05023d4c 	streq	r3, [r2, #-3404]	; 0xfffff2b4
    2ce0:	00010100 	andeq	r0, r1, r0, lsl #2
    2ce4:	00000205 	andeq	r0, r0, r5, lsl #4
    2ce8:	92030000 	andls	r0, r3, #0
    2cec:	3367010d 	cmncc	r7, #1073741827	; 0x40000003
    2cf0:	3d684c3e 	stclcc	12, cr4, [r8, #-248]!	; 0xffffff08
    2cf4:	01000502 	tsteq	r0, r2, lsl #10
    2cf8:	02050001 	andeq	r0, r5, #1
    2cfc:	00000000 	andeq	r0, r0, r0
    2d00:	010dab03 	tsteq	sp, r3, lsl #22
    2d04:	4c3f3367 	ldcmi	3, cr3, [pc], #-412	; 2b70 <_Min_Stack_Size+0x2970>
    2d08:	05023d4c 	streq	r3, [r2, #-3404]	; 0xfffff2b4
    2d0c:	00010100 	andeq	r0, r1, r0, lsl #2
    2d10:	00000205 	andeq	r0, r0, r5, lsl #4
    2d14:	c5030000 	strgt	r0, [r3, #-0]
    2d18:	3267010d 	rsbcc	r0, r7, #1073741827	; 0x40000003
    2d1c:	3d684c3e 	stclcc	12, cr4, [r8, #-248]!	; 0xffffff08
    2d20:	01000502 	tsteq	r0, r2, lsl #10
    2d24:	02050001 	andeq	r0, r5, #1
    2d28:	00000000 	andeq	r0, r0, r0
    2d2c:	010ddd03 	tsteq	sp, r3, lsl #26
    2d30:	4c3e3267 	lfmmi	f3, 4, [lr], #-412	; 0xfffffe64
    2d34:	05023d4c 	streq	r3, [r2, #-3404]	; 0xfffff2b4
    2d38:	00010100 	andeq	r0, r1, r0, lsl #2
    2d3c:	00000205 	andeq	r0, r0, r5, lsl #4
    2d40:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
    2d44:	3267010d 	rsbcc	r0, r7, #1073741827	; 0x40000003
    2d48:	3d684c3e 	stclcc	12, cr4, [r8, #-248]!	; 0xffffff08
    2d4c:	01000502 	tsteq	r0, r2, lsl #10
    2d50:	02050001 	andeq	r0, r5, #1
    2d54:	00000000 	andeq	r0, r0, r0
    2d58:	010e8d03 	tsteq	lr, r3, lsl #26
    2d5c:	4b3e3267 	blmi	f8f700 <_Min_Stack_Size+0xf8f500>
    2d60:	05023d4c 	streq	r3, [r2, #-3404]	; 0xfffff2b4
    2d64:	00010100 	andeq	r0, r1, r0, lsl #2
    2d68:	00000205 	andeq	r0, r0, r5, lsl #4
    2d6c:	a4030000 	strge	r0, [r3], #-0
    2d70:	3367010e 	cmncc	r7, #-2147483645	; 0x80000003
    2d74:	3d4c4b3e 	vstrcc	d20, [ip, #-248]	; 0xffffff08
    2d78:	01000502 	tsteq	r0, r2, lsl #10
    2d7c:	02050001 	andeq	r0, r5, #1
    2d80:	00000000 	andeq	r0, r0, r0
    2d84:	010ebc03 	tsteq	lr, r3, lsl #24
    2d88:	4b3e3267 	blmi	f8f72c <_Min_Stack_Size+0xf8f52c>
    2d8c:	05023d68 	streq	r3, [r2, #-3432]	; 0xfffff298
    2d90:	00010100 	andeq	r0, r1, r0, lsl #2
    2d94:	00000205 	andeq	r0, r0, r5, lsl #4
    2d98:	d3030000 	movwle	r0, #12288	; 0x3000
    2d9c:	3367010e 	cmncc	r7, #-2147483645	; 0x80000003
    2da0:	3d684b3e 	vstmdbcc	r8!, {d20-<overflow reg d50>}
    2da4:	01000502 	tsteq	r0, r2, lsl #10
    2da8:	02050001 	andeq	r0, r5, #1
    2dac:	00000000 	andeq	r0, r0, r0
    2db0:	010eeb03 	tsteq	lr, r3, lsl #22
    2db4:	4b3e3267 	blmi	f8f758 <_Min_Stack_Size+0xf8f558>
    2db8:	05023d68 	streq	r3, [r2, #-3432]	; 0xfffff298
    2dbc:	00010100 	andeq	r0, r1, r0, lsl #2
    2dc0:	00000205 	andeq	r0, r0, r5, lsl #4
    2dc4:	82030000 	andhi	r0, r3, #0
    2dc8:	3467010f 	strbtcc	r0, [r7], #-271	; 0xfffffef1
    2dcc:	3d684b3e 	vstmdbcc	r8!, {d20-<overflow reg d50>}
    2dd0:	01000502 	tsteq	r0, r2, lsl #10
    2dd4:	02050001 	andeq	r0, r5, #1
    2dd8:	00000000 	andeq	r0, r0, r0
    2ddc:	010f9b03 	tsteq	pc, r3, lsl #22
    2de0:	4b3e3267 	blmi	f8f784 <_Min_Stack_Size+0xf8f584>
    2de4:	05023d68 	streq	r3, [r2, #-3432]	; 0xfffff298
    2de8:	00010100 	andeq	r0, r1, r0, lsl #2
    2dec:	00000205 	andeq	r0, r0, r5, lsl #4
    2df0:	b6030000 	strlt	r0, [r3], -r0
    2df4:	3583010f 	strcc	r0, [r3, #271]	; 0x10f
    2df8:	02bba15b 	adcseq	sl, fp, #-1073741802	; 0xc0000016
    2dfc:	01010005 	tsteq	r1, r5
    2e00:	00020500 	andeq	r0, r2, r0, lsl #10
    2e04:	03000000 	movweq	r0, #0
    2e08:	83010fd4 	movwhi	r0, #8148	; 0x1fd4
    2e0c:	bba15b35 	bllt	fe859ae8 <BootRAM+0xd7ca289>
    2e10:	01000502 	tsteq	r0, r2, lsl #10
    2e14:	02050001 	andeq	r0, r5, #1
    2e18:	00000000 	andeq	r0, r0, r0
    2e1c:	010ffd03 	tsteq	pc, r3, lsl #26	; <UNPREDICTABLE>
    2e20:	2f352f83 	svccs	0x00352f83
    2e24:	00a05b3e 	adceq	r5, r0, lr, lsr fp
    2e28:	06010402 	streq	r0, [r1], -r2, lsl #8
    2e2c:	773e063c 			; <UNDEFINED> instruction: 0x773e063c
    2e30:	69937869 	ldmibvs	r3, {r0, r3, r5, r6, fp, ip, sp, lr}
    2e34:	00050284 	andeq	r0, r5, r4, lsl #5
    2e38:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2e3c:	00000002 	andeq	r0, r0, r2
    2e40:	10ac0300 	adcne	r0, ip, r0, lsl #6
    2e44:	893f6a01 	ldmdbhi	pc!, {r0, r9, fp, sp, lr}	; <UNPREDICTABLE>
    2e48:	0502841e 	streq	r8, [r2, #-1054]	; 0xfffffbe2
    2e4c:	00010100 	andeq	r0, r1, r0, lsl #2
    2e50:	00000205 	andeq	r0, r0, r5, lsl #4
    2e54:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    2e58:	3f6a0110 	svccc	0x006a0110
    2e5c:	02841e89 	addeq	r1, r4, #2192	; 0x890
    2e60:	01010005 	tsteq	r1, r5
    2e64:	00020500 	andeq	r0, r2, r0, lsl #10
    2e68:	03000000 	movweq	r0, #0
    2e6c:	6a0110e0 	bvs	471f4 <_Min_Stack_Size+0x46ff4>
    2e70:	841e893f 	ldrhi	r8, [lr], #-2367	; 0xfffff6c1
    2e74:	01000502 	tsteq	r0, r2, lsl #10
    2e78:	02050001 	andeq	r0, r5, #1
    2e7c:	00000000 	andeq	r0, r0, r0
    2e80:	0110fa03 	tsteq	r0, r3, lsl #20	; <UNPREDICTABLE>
    2e84:	0283846b 	addeq	r8, r3, #1795162112	; 0x6b000000
    2e88:	01010005 	tsteq	r1, r5
    2e8c:	00020500 	andeq	r0, r2, r0, lsl #10
    2e90:	03000000 	movweq	r0, #0
    2e94:	6b01119a 	blvs	47504 <_Min_Stack_Size+0x47304>
    2e98:	05028384 	streq	r8, [r2, #-900]	; 0xfffffc7c
    2e9c:	00010100 	andeq	r0, r1, r0, lsl #2
    2ea0:	00000205 	andeq	r0, r0, r5, lsl #4
    2ea4:	b1030000 	mrslt	r0, (UNDEF: 3)
    2ea8:	846b0111 	strbthi	r0, [fp], #-273	; 0xfffffeef
    2eac:	00050283 	andeq	r0, r5, r3, lsl #5
    2eb0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2eb4:	00000002 	andeq	r0, r0, r2
    2eb8:	11c60300 	bicne	r0, r6, r0, lsl #6
    2ebc:	83856b01 	orrhi	r6, r5, #1024	; 0x400
    2ec0:	01000502 	tsteq	r0, r2, lsl #10
    2ec4:	02050001 	andeq	r0, r5, #1
    2ec8:	00000000 	andeq	r0, r0, r0
    2ecc:	0111d803 	tsteq	r1, r3, lsl #16
    2ed0:	05023d6a 	streq	r3, [r2, #-3434]	; 0xfffff296
    2ed4:	00010100 	andeq	r0, r1, r0, lsl #2
    2ed8:	00000205 	andeq	r0, r0, r5, lsl #4
    2edc:	e6030000 	str	r0, [r3], -r0
    2ee0:	3d6a0111 	stfcce	f0, [sl, #-68]!	; 0xffffffbc
    2ee4:	01000502 	tsteq	r0, r2, lsl #10
    2ee8:	02050001 	andeq	r0, r5, #1
    2eec:	00000000 	andeq	r0, r0, r0
    2ef0:	0111f403 	tsteq	r1, r3, lsl #8	; <UNPREDICTABLE>
    2ef4:	05023d6a 	streq	r3, [r2, #-3434]	; 0xfffff296
    2ef8:	00010100 	andeq	r0, r1, r0, lsl #2
    2efc:	00000205 	andeq	r0, r0, r5, lsl #4
    2f00:	82030000 	andhi	r0, r3, #0
    2f04:	3d6a0112 	stfcce	f0, [sl, #-72]!	; 0xffffffb8
    2f08:	01000502 	tsteq	r0, r2, lsl #10
    2f0c:	02050001 	andeq	r0, r5, #1
    2f10:	00000000 	andeq	r0, r0, r0
    2f14:	01129003 	tsteq	r2, r3
    2f18:	05023d6a 	streq	r3, [r2, #-3434]	; 0xfffff296
    2f1c:	00010100 	andeq	r0, r1, r0, lsl #2
    2f20:	00000205 	andeq	r0, r0, r5, lsl #4
    2f24:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
    2f28:	4b6a0112 	blmi	1a83378 <_Min_Stack_Size+0x1a83178>
    2f2c:	01000502 	tsteq	r0, r2, lsl #10
    2f30:	02050001 	andeq	r0, r5, #1
    2f34:	00000000 	andeq	r0, r0, r0
    2f38:	0112b103 	tsteq	r2, r3, lsl #2
    2f3c:	0283846b 	addeq	r8, r3, #1795162112	; 0x6b000000
    2f40:	01010005 	tsteq	r1, r5
    2f44:	00020500 	andeq	r0, r2, r0, lsl #10
    2f48:	03000000 	movweq	r0, #0
    2f4c:	6b0112c7 	blvs	47a70 <_Min_Stack_Size+0x47870>
    2f50:	05029f84 	streq	r9, [r2, #-3972]	; 0xfffff07c
    2f54:	00010100 	andeq	r0, r1, r0, lsl #2
    2f58:	00000205 	andeq	r0, r0, r5, lsl #4
    2f5c:	dd030000 	stcle	0, cr0, [r3, #-0]
    2f60:	846b0112 	strbthi	r0, [fp], #-274	; 0xfffffeee
    2f64:	00050283 	andeq	r0, r5, r3, lsl #5
    2f68:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2f6c:	00000002 	andeq	r0, r0, r2
    2f70:	12f30300 	rscsne	r0, r3, #0, 6
    2f74:	9f846b01 	svcls	0x00846b01
    2f78:	01000502 	tsteq	r0, r2, lsl #10
    2f7c:	02050001 	andeq	r0, r5, #1
    2f80:	00000000 	andeq	r0, r0, r0
    2f84:	01138903 	tsteq	r3, r3, lsl #18
    2f88:	0283846b 	addeq	r8, r3, #1795162112	; 0x6b000000
    2f8c:	01010005 	tsteq	r1, r5
    2f90:	00020500 	andeq	r0, r2, r0, lsl #10
    2f94:	03000000 	movweq	r0, #0
    2f98:	4e011399 	mcrmi	3, 0, r1, cr1, cr9, {4}
    2f9c:	0005023d 	andeq	r0, r5, sp, lsr r2
    2fa0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2fa4:	00000002 	andeq	r0, r0, r2
    2fa8:	13a60300 			; <UNDEFINED> instruction: 0x13a60300
    2fac:	023d4e01 	eorseq	r4, sp, #1, 28
    2fb0:	01010005 	tsteq	r1, r5
    2fb4:	00020500 	andeq	r0, r2, r0, lsl #10
    2fb8:	03000000 	movweq	r0, #0
    2fbc:	4e0113b3 	mcrmi	3, 0, r1, cr1, cr3, {5}
    2fc0:	0005023d 	andeq	r0, r5, sp, lsr r2
    2fc4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2fc8:	00000002 	andeq	r0, r0, r2
    2fcc:	13c00300 	bicne	r0, r0, #0, 6
    2fd0:	024b4e01 	subeq	r4, fp, #1, 28
    2fd4:	01010005 	tsteq	r1, r5
    2fd8:	00020500 	andeq	r0, r2, r0, lsl #10
    2fdc:	03000000 	movweq	r0, #0
    2fe0:	4e0113cd 	cdpmi	3, 0, cr1, cr1, cr13, {6}
    2fe4:	0005023d 	andeq	r0, r5, sp, lsr r2
    2fe8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    2fec:	00000002 	andeq	r0, r0, r2
    2ff0:	13da0300 	bicsne	r0, sl, #0, 6
    2ff4:	023d4e01 	eorseq	r4, sp, #1, 28
    2ff8:	01010005 	tsteq	r1, r5
    2ffc:	00020500 	andeq	r0, r2, r0, lsl #10
    3000:	03000000 	movweq	r0, #0
    3004:	670113fc 			; <UNDEFINED> instruction: 0x670113fc
    3008:	30408433 	subcc	r8, r0, r3, lsr r4
    300c:	00050221 	andeq	r0, r5, r1, lsr #4
    3010:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3014:	00000002 	andeq	r0, r0, r2
    3018:	14a80300 	strtne	r0, [r8], #768	; 0x300
    301c:	02596c01 	subseq	r6, r9, #256	; 0x100
    3020:	01010005 	tsteq	r1, r5
    3024:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
    3028:	03080061 	movweq	r0, #32865	; 0x8061
    302c:	670114c8 	strvs	r1, [r1, -r8, asr #9]
    3030:	67684f2f 	strbvs	r4, [r8, -pc, lsr #30]!
    3034:	01040200 	mrseq	r0, R12_usr
    3038:	3e063c06 	cdpcc	12, 0, cr3, cr6, cr6, {0}
    303c:	02213040 	eoreq	r3, r1, #64	; 0x40
    3040:	01010005 	tsteq	r1, r5
    3044:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
    3048:	03080062 	movweq	r0, #32866	; 0x8062
    304c:	6b0114f4 	blvs	48424 <_Min_Stack_Size+0x48224>
    3050:	00050259 	andeq	r0, r5, r9, asr r2
    3054:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3058:	00000002 	andeq	r0, r0, r2
    305c:	158e0300 	strne	r0, [lr, #768]	; 0x300
    3060:	834cc901 	movthi	ip, #51457	; 0xc901
    3064:	924b3e3d 	subls	r3, fp, #976	; 0x3d0
    3068:	01040200 	mrseq	r0, R12_usr
    306c:	02004a06 	andeq	r4, r0, #24576	; 0x6000
    3070:	004a0204 	subeq	r0, sl, r4, lsl #4
    3074:	4a030402 	bmi	c4084 <_Min_Stack_Size+0xc3e84>
    3078:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    307c:	4d4b064a 	stclmi	6, cr0, [fp, #-296]	; 0xfffffed8
    3080:	784b874b 	stmdavc	fp, {r0, r1, r3, r6, r8, r9, sl, pc}^
    3084:	0f023d3d 	svceq	0x00023d3d
    3088:	00010100 	andeq	r0, r1, r0, lsl #2
    308c:	00000205 	andeq	r0, r0, r5, lsl #4
    3090:	bd030000 	stclt	0, cr0, [r3, #-0]
    3094:	68c90115 	stmiavs	r9, {r0, r2, r4, r8}^
    3098:	3e3d3d83 	cdpcc	13, 3, cr3, cr13, cr3, {4}
    309c:	00686767 	rsbeq	r6, r8, r7, ror #14
    30a0:	06010402 	streq	r0, [r1], -r2, lsl #8
    30a4:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    30a8:	02004a02 	andeq	r4, r0, #8192	; 0x2000
    30ac:	004a0304 	subeq	r0, sl, r4, lsl #6
    30b0:	4a040402 	bmi	1040c0 <_Min_Stack_Size+0x103ec0>
    30b4:	4b4d4b06 	blmi	1355cd4 <_Min_Stack_Size+0x1355ad4>
    30b8:	3d784b87 	fldmdbxcc	r8!, {d20-d86}	;@ Deprecated
    30bc:	000f023d 	andeq	r0, pc, sp, lsr r2	; <UNPREDICTABLE>
    30c0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    30c4:	00000002 	andeq	r0, r0, r2
    30c8:	15ee0300 	strbne	r0, [lr, #768]!	; 0x300
    30cc:	8368c901 	cmnhi	r8, #16384	; 0x4000
    30d0:	4b3e3d3d 	blmi	f925cc <_Min_Stack_Size+0xf923cc>
    30d4:	04020092 	streq	r0, [r2], #-146	; 0xffffff6e
    30d8:	004a0601 	subeq	r0, sl, r1, lsl #12
    30dc:	4a020402 	bmi	840ec <_Min_Stack_Size+0x83eec>
    30e0:	03040200 	movweq	r0, #16896	; 0x4200
    30e4:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    30e8:	4b064a04 	blmi	195900 <_Min_Stack_Size+0x195700>
    30ec:	4b874b4d 	blmi	fe1d5e28 <BootRAM+0xd1465c9>
    30f0:	023d3d78 	eorseq	r3, sp, #120, 26	; 0x1e00
    30f4:	01010010 	tsteq	r1, r0, lsl r0
    30f8:	00020500 	andeq	r0, r2, r0, lsl #10
    30fc:	03000000 	movweq	r0, #0
    3100:	c901169e 	stmdbgt	r1, {r1, r2, r3, r4, r7, r9, sl, ip}
    3104:	3d3d8369 	ldccc	3, cr8, [sp, #-420]!	; 0xfffffe5c
    3108:	6867673e 	stmdavs	r7!, {r1, r2, r3, r4, r5, r8, r9, sl, sp, lr}^
    310c:	01040200 	mrseq	r0, R12_usr
    3110:	02004a06 	andeq	r4, r0, #24576	; 0x6000
    3114:	004a0204 	subeq	r0, sl, r4, lsl #4
    3118:	4a030402 	bmi	c4128 <_Min_Stack_Size+0xc3f28>
    311c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    3120:	4d4b064a 	stclmi	6, cr0, [fp, #-296]	; 0xfffffed8
    3124:	7767874b 	strbvc	r8, [r7, -fp, asr #14]!
    3128:	0f023d3d 	svceq	0x00023d3d
    312c:	69010100 	stmdbvs	r1, {r8}
    3130:	02000004 	andeq	r0, r0, #4
    3134:	00017500 	andeq	r7, r1, r0, lsl #10
    3138:	fb010200 	blx	43942 <_Min_Stack_Size+0x43742>
    313c:	01000d0e 	tsteq	r0, lr, lsl #26
    3140:	00010101 	andeq	r0, r1, r1, lsl #2
    3144:	00010000 	andeq	r0, r1, r0
    3148:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    314c:	2f656d6f 	svccs	0x00656d6f
    3150:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    3154:	542f7673 	strtpl	r7, [pc], #-1651	; 315c <_Min_Stack_Size+0x2f5c>
    3158:	41534144 	cmpmi	r3, r4, asr #2
    315c:	4f492d54 	svcmi	0x00492d54
    3160:	694c2f54 	stmdbvs	ip, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3164:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    3168:	2f736569 	svccs	0x00736569
    316c:	00637273 	rsbeq	r7, r3, r3, ror r2
    3170:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3174:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3178:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    317c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3180:	2f62696c 	svccs	0x0062696c
    3184:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3188:	00656e69 	rsbeq	r6, r5, r9, ror #28
    318c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3190:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3194:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3198:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    319c:	2f62696c 	svccs	0x0062696c
    31a0:	00737973 	rsbseq	r7, r3, r3, ror r9
    31a4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 30f0 <_Min_Stack_Size+0x2ef0>
    31a8:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    31ac:	76737572 			; <UNDEFINED> instruction: 0x76737572
    31b0:	4144542f 	cmpmi	r4, pc, lsr #8
    31b4:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    31b8:	2f544f49 	svccs	0x00544f49
    31bc:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    31c0:	4d432f53 	stclmi	15, cr2, [r3, #-332]	; 0xfffffeb4
    31c4:	65442f33 	strbvs	r2, [r4, #-3891]	; 0xfffff0cd
    31c8:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    31cc:	70707553 	rsbsvc	r7, r0, r3, asr r5
    31d0:	2f74726f 	svccs	0x0074726f
    31d4:	532f5453 			; <UNDEFINED> instruction: 0x532f5453
    31d8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    31dc:	78303146 	ldmdavc	r0!, {r1, r2, r6, r8, ip, sp}
    31e0:	6f682f00 	svcvs	0x00682f00
    31e4:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    31e8:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    31ec:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    31f0:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    31f4:	544f492d 	strbpl	r4, [pc], #-2349	; 31fc <_Min_Stack_Size+0x2ffc>
    31f8:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    31fc:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3200:	692f7365 	stmdbvs	pc!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3204:	2f00636e 	svccs	0x0000636e
    3208:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    320c:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    3210:	2f767375 	svccs	0x00767375
    3214:	53414454 	movtpl	r4, #5204	; 0x1454
    3218:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    321c:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    3220:	5349534d 	movtpl	r5, #37709	; 0x934d
    3224:	334d432f 	movtcc	r4, #54063	; 0xd32f
    3228:	726f432f 	rsbvc	r4, pc, #-1140850688	; 0xbc000000
    322c:	70755365 	rsbsvc	r5, r5, r5, ror #6
    3230:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    3234:	74730000 	ldrbtvc	r0, [r3], #-0
    3238:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    323c:	5f783031 	svcpl	0x00783031
    3240:	2e633269 	cdpcs	2, 6, cr3, cr3, cr9, {3}
    3244:	00010063 	andeq	r0, r1, r3, rrx
    3248:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    324c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    3250:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3254:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    3258:	00020068 	andeq	r0, r2, r8, rrx
    325c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    3260:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    3264:	0300682e 	movweq	r6, #2094	; 0x82e
    3268:	74730000 	ldrbtvc	r0, [r3], #-0
    326c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3270:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
    3274:	00040068 	andeq	r0, r4, r8, rrx
    3278:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    327c:	31663233 	cmncc	r6, r3, lsr r2
    3280:	725f7830 	subsvc	r7, pc, #48, 16	; 0x300000
    3284:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    3288:	00000500 	andeq	r0, r0, r0, lsl #10
    328c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3290:	30316632 	eorscc	r6, r1, r2, lsr r6
    3294:	32695f78 	rsbcc	r5, r9, #120, 30	; 0x1e0
    3298:	00682e63 	rsbeq	r2, r8, r3, ror #28
    329c:	63000005 	movwvs	r0, #5
    32a0:	5f65726f 	svcpl	0x0065726f
    32a4:	2e336d63 	cdpcs	13, 3, cr6, cr3, cr3, {3}
    32a8:	00060068 	andeq	r0, r6, r8, rrx
    32ac:	05000000 	streq	r0, [r0, #-0]
    32b0:	00626402 	rsbeq	r6, r2, r2, lsl #8
    32b4:	01a20308 			; <UNDEFINED> instruction: 0x01a20308
    32b8:	5a4d4e01 	bpl	1356ac4 <_Min_Stack_Size+0x13568c4>
    32bc:	1c580903 	mrrcne	9, 0, r0, r8, cr3	; <UNPREDICTABLE>
    32c0:	07025a5a 	smlsdeq	r2, sl, sl, r5
    32c4:	00010100 	andeq	r0, r1, r0, lsl #2
    32c8:	62ac0205 	adcvs	r0, ip, #1342177280	; 0x50000000
    32cc:	bf030800 	svclt	0x00030800
    32d0:	4b590101 	blmi	16436dc <_Min_Stack_Size+0x16434dc>
    32d4:	2e0d032f 	cdpcs	3, 0, cr0, cr13, cr15, {1}
    32d8:	30594c3e 	subscc	r4, r9, lr, lsr ip
    32dc:	85404c67 	strbhi	r4, [r0, #-3175]	; 0xfffff399
    32e0:	3f765b31 	svccc	0x00765b31
    32e4:	696b4c31 	stmdbvs	fp!, {r0, r4, r5, sl, fp, lr}^
    32e8:	5b4eaea3 	blpl	13aed7c <_Min_Stack_Size+0x13aeb7c>
    32ec:	3ef6924d 	cdpcc	2, 15, cr9, cr6, cr13, {2}
    32f0:	926a3e86 	rsbls	r3, sl, #2144	; 0x860
    32f4:	0c028340 	stceq	3, cr8, [r2], {64}	; 0x40
    32f8:	00010100 	andeq	r0, r1, r0, lsl #2
    32fc:	00000205 	andeq	r0, r0, r5, lsl #4
    3300:	aa030000 	bge	c3308 <_Min_Stack_Size+0xc3108>
    3304:	4c4d0102 	stfmie	f0, [sp], {2}
    3308:	3e3e4c3e 	mrccc	12, 1, r4, cr14, cr14, {1}
    330c:	0005024b 	andeq	r0, r5, fp, asr #4
    3310:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3314:	00643002 	rsbeq	r3, r4, r2
    3318:	02c20308 	sbceq	r0, r2, #8, 6	; 0x20000000
    331c:	893f6a01 	ldmdbhi	pc!, {r0, r9, fp, sp, lr}	; <UNPREDICTABLE>
    3320:	0502841e 	streq	r8, [r2, #-1054]	; 0xfffffbe2
    3324:	00010100 	andeq	r0, r1, r0, lsl #2
    3328:	00000205 	andeq	r0, r0, r5, lsl #4
    332c:	da030000 	ble	c3334 <_Min_Stack_Size+0xc3134>
    3330:	3f6a0102 	svccc	0x006a0102
    3334:	02841e89 	addeq	r1, r4, #2192	; 0x890
    3338:	01010005 	tsteq	r1, r5
    333c:	00020500 	andeq	r0, r2, r0, lsl #10
    3340:	03000000 	movweq	r0, #0
    3344:	6a0102f2 	bvs	43f14 <_Min_Stack_Size+0x43d14>
    3348:	841e893f 	ldrhi	r8, [lr], #-2367	; 0xfffff6c1
    334c:	01000502 	tsteq	r0, r2, lsl #10
    3350:	02050001 	andeq	r0, r5, #1
    3354:	08006470 	stmdaeq	r0, {r4, r5, r6, sl, sp, lr}
    3358:	01038a03 	tsteq	r3, r3, lsl #20
    335c:	1e893f6a 	cdpne	15, 8, cr3, cr9, cr10, {3}
    3360:	00050284 	andeq	r0, r5, r4, lsl #5
    3364:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3368:	00000002 	andeq	r0, r0, r2
    336c:	03a20300 			; <UNDEFINED> instruction: 0x03a20300
    3370:	893f6a01 	ldmdbhi	pc!, {r0, r9, fp, sp, lr}	; <UNPREDICTABLE>
    3374:	0502841e 	streq	r8, [r2, #-1054]	; 0xfffffbe2
    3378:	00010100 	andeq	r0, r1, r0, lsl #2
    337c:	00000205 	andeq	r0, r0, r5, lsl #4
    3380:	ba030000 	blt	c3388 <_Min_Stack_Size+0xc3188>
    3384:	3f6a0103 	svccc	0x006a0103
    3388:	02841e89 	addeq	r1, r4, #2192	; 0x890
    338c:	01010005 	tsteq	r1, r5
    3390:	00020500 	andeq	r0, r2, r0, lsl #10
    3394:	03000000 	movweq	r0, #0
    3398:	670103d1 			; <UNDEFINED> instruction: 0x670103d1
    339c:	a14d3f34 	cmpge	sp, r4, lsr pc
    33a0:	0005023d 	andeq	r0, r5, sp, lsr r2
    33a4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    33a8:	00000002 	andeq	r0, r0, r2
    33ac:	03ec0300 	mvneq	r0, #0, 6
    33b0:	893f6a01 	ldmdbhi	pc!, {r0, r9, fp, sp, lr}	; <UNPREDICTABLE>
    33b4:	0502841e 	streq	r8, [r2, #-1054]	; 0xfffffbe2
    33b8:	00010100 	andeq	r0, r1, r0, lsl #2
    33bc:	00000205 	andeq	r0, r0, r5, lsl #4
    33c0:	84030000 	strhi	r0, [r3], #-0
    33c4:	3f6a0104 	svccc	0x006a0104
    33c8:	02841e89 	addeq	r1, r4, #2192	; 0x890
    33cc:	01010005 	tsteq	r1, r5
    33d0:	00020500 	andeq	r0, r2, r0, lsl #10
    33d4:	03000000 	movweq	r0, #0
    33d8:	880104a1 	stmdahi	r1, {r0, r5, r7, sl}
    33dc:	a01e893f 	andsge	r8, lr, pc, lsr r9
    33e0:	01000502 	tsteq	r0, r2, lsl #10
    33e4:	02050001 	andeq	r0, r5, #1
    33e8:	080064b0 	stmdaeq	r0, {r4, r5, r7, sl, sp, lr}
    33ec:	0104ba03 	tsteq	r4, r3, lsl #20
    33f0:	05024b6a 	streq	r4, [r2, #-2922]	; 0xfffff496
    33f4:	00010100 	andeq	r0, r1, r0, lsl #2
    33f8:	00000205 	andeq	r0, r0, r5, lsl #4
    33fc:	c7030000 	strgt	r0, [r3, -r0]
    3400:	4b4e0104 	blmi	1383818 <_Min_Stack_Size+0x1383618>
    3404:	01000502 	tsteq	r0, r2, lsl #10
    3408:	02050001 	andeq	r0, r5, #1
    340c:	080064d0 	stmdaeq	r0, {r4, r6, r7, sl, sp, lr}
    3410:	0104d903 	tsteq	r4, r3, lsl #18
    3414:	4d5d3f87 	ldclmi	15, cr3, [sp, #-540]	; 0xfffffde4
    3418:	0005024b 	andeq	r0, r5, fp, asr #4
    341c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3420:	00000002 	andeq	r0, r0, r2
    3424:	04fc0300 	ldrbteq	r0, [ip], #768	; 0x300
    3428:	2f346701 	svccs	0x00346701
    342c:	05023d4d 	streq	r3, [r2, #-3405]	; 0xfffff2b3
    3430:	00010100 	andeq	r0, r1, r0, lsl #2
    3434:	00000205 	andeq	r0, r0, r5, lsl #4
    3438:	92030000 	andls	r0, r3, #0
    343c:	3f6a0105 	svccc	0x006a0105
    3440:	02841ea5 	addeq	r1, r4, #2640	; 0xa50
    3444:	01010005 	tsteq	r1, r5
    3448:	00020500 	andeq	r0, r2, r0, lsl #10
    344c:	03000000 	movweq	r0, #0
    3450:	6c0105b8 	cfstr32vs	mvfx0, [r1], {184}	; 0xb8
    3454:	841e894d 	ldrhi	r8, [lr], #-2381	; 0xfffff6b3
    3458:	01000502 	tsteq	r0, r2, lsl #10
    345c:	02050001 	andeq	r0, r5, #1
    3460:	00000000 	andeq	r0, r0, r0
    3464:	0105d403 	tsteq	r5, r3, lsl #8
    3468:	1e894d6a 	cdpne	13, 8, cr4, cr9, cr10, {3}
    346c:	00050284 	andeq	r0, r5, r4, lsl #5
    3470:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3474:	00000002 	andeq	r0, r0, r2
    3478:	05ec0300 	strbeq	r0, [ip, #768]!	; 0x300
    347c:	893f6a01 	ldmdbhi	pc!, {r0, r9, fp, sp, lr}	; <UNPREDICTABLE>
    3480:	0502841e 	streq	r8, [r2, #-1054]	; 0xfffffbe2
    3484:	00010100 	andeq	r0, r1, r0, lsl #2
    3488:	00000205 	andeq	r0, r0, r5, lsl #4
    348c:	8b030000 	blhi	c3494 <_Min_Stack_Size+0xc3294>
    3490:	4d6a0106 	stfmie	f0, [sl, #-24]!	; 0xffffffe8
    3494:	02841e89 	addeq	r1, r4, #2192	; 0x890
    3498:	01010005 	tsteq	r1, r5
    349c:	00020500 	andeq	r0, r2, r0, lsl #10
    34a0:	03000000 	movweq	r0, #0
    34a4:	6a0106a3 	bvs	44f38 <_Min_Stack_Size+0x44d38>
    34a8:	841e893f 	ldrhi	r8, [lr], #-2367	; 0xfffff6c1
    34ac:	01000502 	tsteq	r0, r2, lsl #10
    34b0:	02050001 	andeq	r0, r5, #1
    34b4:	00000000 	andeq	r0, r0, r0
    34b8:	0106b903 	tsteq	r6, r3, lsl #18
    34bc:	0502674e 	streq	r6, [r2, #-1870]	; 0xfffff8b2
    34c0:	00010100 	andeq	r0, r1, r0, lsl #2
    34c4:	00000205 	andeq	r0, r0, r5, lsl #4
    34c8:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    34cc:	3f6a0106 	svccc	0x006a0106
    34d0:	02841e89 	addeq	r1, r4, #2192	; 0x890
    34d4:	01010005 	tsteq	r1, r5
    34d8:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
    34dc:	03080065 	movweq	r0, #32869	; 0x8065
    34e0:	6a0106e0 	bvs	45068 <_Min_Stack_Size+0x44e68>
    34e4:	841e893f 	ldrhi	r8, [lr], #-2367	; 0xfffff6c1
    34e8:	01000502 	tsteq	r0, r2, lsl #10
    34ec:	02050001 	andeq	r0, r5, #1
    34f0:	00000000 	andeq	r0, r0, r0
    34f4:	0106fa03 	tsteq	r6, r3, lsl #20	; <UNPREDICTABLE>
    34f8:	1e894d6a 	cdpne	13, 8, cr4, cr9, cr10, {3}
    34fc:	00050284 	andeq	r0, r5, r4, lsl #5
    3500:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3504:	00654c02 	rsbeq	r4, r5, r2, lsl #24
    3508:	08860308 	stmeq	r6, {r3, r8, r9}
    350c:	4b2f5901 	blmi	bd9918 <_Min_Stack_Size+0xbd9718>
    3510:	3f4b4b35 	svccc	0x004b4b35
    3514:	31416969 	cmpcc	r1, r9, ror #18
    3518:	00050221 	andeq	r0, r5, r1, lsr #4
    351c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3520:	00000002 	andeq	r0, r0, r2
    3524:	08b60300 	ldmeq	r6!, {r8, r9}
    3528:	502f4b01 	eorpl	r4, pc, r1, lsl #22
    352c:	693f4b4b 	ldmdbvs	pc!, {r0, r1, r3, r6, r8, r9, fp, lr}	; <UNPREDICTABLE>
    3530:	00050221 	andeq	r0, r5, r1, lsr #4
    3534:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3538:	0065ac02 	rsbeq	sl, r5, r2, lsl #24
    353c:	08ed0308 	stmiaeq	sp!, {r3, r8, r9}^
    3540:	512f5901 			; <UNDEFINED> instruction: 0x512f5901
    3544:	3f4c3f31 	svccc	0x004c3f31
    3548:	693f3e4f 	ldmdbvs	pc!, {r0, r1, r2, r3, r6, r9, sl, fp, ip, sp}	; <UNPREDICTABLE>
    354c:	02213241 	eoreq	r3, r1, #268435460	; 0x10000004
    3550:	01010005 	tsteq	r1, r5
    3554:	00020500 	andeq	r0, r2, r0, lsl #10
    3558:	03000000 	movweq	r0, #0
    355c:	590109bc 	stmdbpl	r1, {r2, r3, r4, r5, r7, r8, fp}
    3560:	02674c33 	rsbeq	r4, r7, #13056	; 0x3300
    3564:	01010005 	tsteq	r1, r5
    3568:	00020500 	andeq	r0, r2, r0, lsl #10
    356c:	03000000 	movweq	r0, #0
    3570:	590109de 	stmdbpl	r1, {r1, r2, r3, r4, r6, r7, r8, fp}
    3574:	4d93352f 	cfldr32mi	mvfx3, [r3, #188]	; 0xbc
    3578:	01040200 	mrseq	r0, R12_usr
    357c:	3f068206 	svccc	0x00068206
    3580:	02213141 	eoreq	r3, r1, #1073741840	; 0x40000010
    3584:	01010005 	tsteq	r1, r5
    3588:	00020500 	andeq	r0, r2, r0, lsl #10
    358c:	03000000 	movweq	r0, #0
    3590:	59010a9b 	stmdbpl	r1, {r0, r1, r3, r4, r7, r9, fp}
    3594:	02674c33 	rsbeq	r4, r7, #13056	; 0x3300
    3598:	01010005 	tsteq	r1, r5
    359c:	000001a0 	andeq	r0, r0, r0, lsr #3
    35a0:	012a0002 			; <UNDEFINED> instruction: 0x012a0002
    35a4:	01020000 	mrseq	r0, (UNDEF: 2)
    35a8:	000d0efb 	strdeq	r0, [sp], -fp
    35ac:	01010101 	tsteq	r1, r1, lsl #2
    35b0:	01000000 	mrseq	r0, (UNDEF: 0)
    35b4:	2f010000 	svccs	0x00010000
    35b8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    35bc:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    35c0:	2f767375 	svccs	0x00767375
    35c4:	53414454 	movtpl	r4, #5204	; 0x1454
    35c8:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    35cc:	4c2f544f 	cfstrsmi	mvf5, [pc], #-316	; 3498 <_Min_Stack_Size+0x3298>
    35d0:	61726269 	cmnvs	r2, r9, ror #4
    35d4:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    35d8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    35dc:	73752f00 	cmnvc	r5, #0, 30
    35e0:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    35e4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    35e8:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    35ec:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    35f0:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    35f4:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    35f8:	73752f00 	cmnvc	r5, #0, 30
    35fc:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    3600:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3604:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    3608:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    360c:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    3610:	6f682f00 	svcvs	0x00682f00
    3614:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    3618:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    361c:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    3620:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    3624:	544f492d 	strbpl	r4, [pc], #-2349	; 362c <_Min_Stack_Size+0x342c>
    3628:	534d432f 	movtpl	r4, #54063	; 0xd32f
    362c:	432f5349 			; <UNDEFINED> instruction: 0x432f5349
    3630:	442f334d 	strtmi	r3, [pc], #-845	; 3638 <_Min_Stack_Size+0x3438>
    3634:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3638:	70755365 	rsbsvc	r5, r5, r5, ror #6
    363c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    3640:	2f54532f 	svccs	0x0054532f
    3644:	334d5453 	movtcc	r5, #54355	; 0xd453
    3648:	30314632 	eorscc	r4, r1, r2, lsr r6
    364c:	682f0078 	stmdavs	pc!, {r3, r4, r5, r6}	; <UNPREDICTABLE>
    3650:	2f656d6f 	svccs	0x00656d6f
    3654:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    3658:	542f7673 	strtpl	r7, [pc], #-1651	; 3660 <_Min_Stack_Size+0x3460>
    365c:	41534144 	cmpmi	r3, r4, asr #2
    3660:	4f492d54 	svcmi	0x00492d54
    3664:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    3668:	2f534953 	svccs	0x00534953
    366c:	2f334d43 	svccs	0x00334d43
    3670:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    3674:	70707553 	rsbsvc	r7, r0, r3, asr r5
    3678:	0074726f 	rsbseq	r7, r4, pc, ror #4
    367c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3680:	31663233 	cmncc	r6, r3, lsr r2
    3684:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    3688:	2e676477 	mcrcs	4, 3, r6, cr7, cr7, {3}
    368c:	00010063 	andeq	r0, r1, r3, rrx
    3690:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    3694:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    3698:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    369c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    36a0:	00020068 	andeq	r0, r2, r8, rrx
    36a4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    36a8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    36ac:	0300682e 	movweq	r6, #2094	; 0x82e
    36b0:	74730000 	ldrbtvc	r0, [r3], #-0
    36b4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    36b8:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
    36bc:	00040068 	andeq	r0, r4, r8, rrx
    36c0:	726f6300 	rsbvc	r6, pc, #0, 6
    36c4:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    36c8:	00682e33 	rsbeq	r2, r8, r3, lsr lr
    36cc:	00000005 	andeq	r0, r0, r5
    36d0:	10020500 	andne	r0, r2, r0, lsl #10
    36d4:	03080066 	movweq	r0, #32870	; 0x8066
    36d8:	5b0100dc 	blpl	43a50 <_Min_Stack_Size+0x43850>
    36dc:	0008023d 	andeq	r0, r8, sp, lsr r2
    36e0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    36e4:	00663002 	rsbeq	r3, r6, r2
    36e8:	00f00308 	rscseq	r0, r0, r8, lsl #6
    36ec:	023d5b01 	eorseq	r5, sp, #1024	; 0x400
    36f0:	01010008 	tsteq	r1, r8
    36f4:	50020500 	andpl	r0, r2, r0, lsl #10
    36f8:	03080066 	movweq	r0, #32870	; 0x8066
    36fc:	5b0100fd 	blpl	43af8 <_Min_Stack_Size+0x438f8>
    3700:	0008023d 	andeq	r0, r8, sp, lsr r2
    3704:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3708:	00667002 	rsbeq	r7, r6, r2
    370c:	018a0308 	orreq	r0, sl, r8, lsl #6
    3710:	024b2f01 	subeq	r2, fp, #1, 30
    3714:	01010006 	tsteq	r1, r6
    3718:	88020500 	stmdahi	r2, {r8, sl}
    371c:	03080066 	movweq	r0, #32870	; 0x8066
    3720:	2f010194 	svccs	0x00010194
    3724:	0006024b 	andeq	r0, r6, fp, asr #4
    3728:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    372c:	00000002 	andeq	r0, r0, r2
    3730:	01a10300 			; <UNDEFINED> instruction: 0x01a10300
    3734:	68315901 	ldmdavs	r1!, {r0, r8, fp, ip, lr}
    3738:	02213140 	eoreq	r3, r1, #64, 2
    373c:	01010007 	tsteq	r1, r7
    3740:	0000016b 	andeq	r0, r0, fp, ror #2
    3744:	012c0002 			; <UNDEFINED> instruction: 0x012c0002
    3748:	01020000 	mrseq	r0, (UNDEF: 2)
    374c:	000d0efb 	strdeq	r0, [sp], -fp
    3750:	01010101 	tsteq	r1, r1, lsl #2
    3754:	01000000 	mrseq	r0, (UNDEF: 0)
    3758:	2f010000 	svccs	0x00010000
    375c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3760:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    3764:	2f767375 	svccs	0x00767375
    3768:	53414454 	movtpl	r4, #5204	; 0x1454
    376c:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    3770:	4c2f544f 	cfstrsmi	mvf5, [pc], #-316	; 363c <_Min_Stack_Size+0x343c>
    3774:	61726269 	cmnvs	r2, r9, ror #4
    3778:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    377c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    3780:	73752f00 	cmnvc	r5, #0, 30
    3784:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    3788:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    378c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    3790:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3794:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    3798:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    379c:	73752f00 	cmnvc	r5, #0, 30
    37a0:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    37a4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    37a8:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    37ac:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    37b0:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    37b4:	6f682f00 	svcvs	0x00682f00
    37b8:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    37bc:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    37c0:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    37c4:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    37c8:	544f492d 	strbpl	r4, [pc], #-2349	; 37d0 <_Min_Stack_Size+0x35d0>
    37cc:	534d432f 	movtpl	r4, #54063	; 0xd32f
    37d0:	432f5349 			; <UNDEFINED> instruction: 0x432f5349
    37d4:	442f334d 	strtmi	r3, [pc], #-845	; 37dc <_Min_Stack_Size+0x35dc>
    37d8:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    37dc:	70755365 	rsbsvc	r5, r5, r5, ror #6
    37e0:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    37e4:	2f54532f 	svccs	0x0054532f
    37e8:	334d5453 	movtcc	r5, #54355	; 0xd453
    37ec:	30314632 	eorscc	r4, r1, r2, lsr r6
    37f0:	682f0078 	stmdavs	pc!, {r3, r4, r5, r6}	; <UNPREDICTABLE>
    37f4:	2f656d6f 	svccs	0x00656d6f
    37f8:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    37fc:	542f7673 	strtpl	r7, [pc], #-1651	; 3804 <_Min_Stack_Size+0x3604>
    3800:	41534144 	cmpmi	r3, r4, asr #2
    3804:	4f492d54 	svcmi	0x00492d54
    3808:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    380c:	2f534953 	svccs	0x00534953
    3810:	2f334d43 	svccs	0x00334d43
    3814:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    3818:	70707553 	rsbsvc	r7, r0, r3, asr r5
    381c:	0074726f 	rsbseq	r7, r4, pc, ror #4
    3820:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3824:	31663233 	cmncc	r6, r3, lsr r2
    3828:	645f7830 	ldrbvs	r7, [pc], #-2096	; 3830 <_Min_Stack_Size+0x3630>
    382c:	636d6762 	cmnvs	sp, #25690112	; 0x1880000
    3830:	00632e75 	rsbeq	r2, r3, r5, ror lr
    3834:	5f000001 	svcpl	0x00000001
    3838:	61666564 	cmnvs	r6, r4, ror #10
    383c:	5f746c75 	svcpl	0x00746c75
    3840:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    3844:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3848:	5f000002 	svcpl	0x00000002
    384c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3850:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3854:	00000300 	andeq	r0, r0, r0, lsl #6
    3858:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    385c:	30316632 	eorscc	r6, r1, r2, lsr r6
    3860:	00682e78 	rsbeq	r2, r8, r8, ror lr
    3864:	63000004 	movwvs	r0, #4
    3868:	5f65726f 	svcpl	0x0065726f
    386c:	2e336d63 	cdpcs	13, 3, cr6, cr3, cr3, {3}
    3870:	00050068 	andeq	r0, r5, r8, rrx
    3874:	05000000 	streq	r0, [r0, #-0]
    3878:	00000002 	andeq	r0, r0, r2
    387c:	00d40300 	sbcseq	r0, r4, r0, lsl #6
    3880:	023d2f01 	eorseq	r2, sp, #1, 30
    3884:	01010007 	tsteq	r1, r7
    3888:	00020500 	andeq	r0, r2, r0, lsl #10
    388c:	03000000 	movweq	r0, #0
    3890:	2f0100de 	svccs	0x000100de
    3894:	0006024b 	andeq	r0, r6, fp, asr #4
    3898:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    389c:	0066a002 	rsbeq	sl, r6, r2
    38a0:	01860308 	orreq	r0, r6, r8, lsl #6
    38a4:	6c3e6b01 			; <UNDEFINED> instruction: 0x6c3e6b01
    38a8:	0702761e 	smladeq	r2, lr, r6, r7
    38ac:	1a010100 	bne	43cb4 <_Min_Stack_Size+0x43ab4>
    38b0:	02000002 	andeq	r0, r0, #2
    38b4:	00012900 	andeq	r2, r1, r0, lsl #18
    38b8:	fb010200 	blx	440c2 <_Min_Stack_Size+0x43ec2>
    38bc:	01000d0e 	tsteq	r0, lr, lsl #26
    38c0:	00010101 	andeq	r0, r1, r1, lsl #2
    38c4:	00010000 	andeq	r0, r1, r0
    38c8:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    38cc:	2f656d6f 	svccs	0x00656d6f
    38d0:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    38d4:	542f7673 	strtpl	r7, [pc], #-1651	; 38dc <_Min_Stack_Size+0x36dc>
    38d8:	41534144 	cmpmi	r3, r4, asr #2
    38dc:	4f492d54 	svcmi	0x00492d54
    38e0:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    38e4:	2f534953 	svccs	0x00534953
    38e8:	2f334d43 	svccs	0x00334d43
    38ec:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    38f0:	70707553 	rsbsvc	r7, r0, r3, asr r5
    38f4:	0074726f 	rsbseq	r7, r4, pc, ror #4
    38f8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3844 <_Min_Stack_Size+0x3644>
    38fc:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    3900:	76737572 			; <UNDEFINED> instruction: 0x76737572
    3904:	4144542f 	cmpmi	r4, pc, lsr #8
    3908:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    390c:	2f544f49 	svccs	0x00544f49
    3910:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    3914:	65697261 	strbvs	r7, [r9, #-609]!	; 0xfffffd9f
    3918:	72732f73 	rsbsvc	r2, r3, #460	; 0x1cc
    391c:	752f0063 	strvc	r0, [pc, #-99]!	; 38c1 <_Min_Stack_Size+0x36c1>
    3920:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3924:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3928:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    392c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3930:	616d2f62 	cmnvs	sp, r2, ror #30
    3934:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    3938:	752f0065 	strvc	r0, [pc, #-101]!	; 38db <_Min_Stack_Size+0x36db>
    393c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3940:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3944:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3948:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    394c:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    3950:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    3954:	2f656d6f 	svccs	0x00656d6f
    3958:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    395c:	542f7673 	strtpl	r7, [pc], #-1651	; 3964 <_Min_Stack_Size+0x3764>
    3960:	41534144 	cmpmi	r3, r4, asr #2
    3964:	4f492d54 	svcmi	0x00492d54
    3968:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    396c:	2f534953 	svccs	0x00534953
    3970:	2f334d43 	svccs	0x00334d43
    3974:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    3978:	75536563 	ldrbvc	r6, [r3, #-1379]	; 0xfffffa9d
    397c:	726f7070 	rsbvc	r7, pc, #112	; 0x70
    3980:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
    3984:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    3988:	31463233 	cmpcc	r6, r3, lsr r2
    398c:	00007830 	andeq	r7, r0, r0, lsr r8
    3990:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    3994:	336d635f 	cmncc	sp, #2080374785	; 0x7c000001
    3998:	0100682e 	tsteq	r0, lr, lsr #16
    399c:	74730000 	ldrbtvc	r0, [r3], #-0
    39a0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    39a4:	5f783031 	svcpl	0x00783031
    39a8:	2e727770 	mrccs	7, 3, r7, cr2, cr0, {3}
    39ac:	00020063 	andeq	r0, r2, r3, rrx
    39b0:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    39b4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    39b8:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    39bc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    39c0:	00030068 	andeq	r0, r3, r8, rrx
    39c4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    39c8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    39cc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    39d0:	74730000 	ldrbtvc	r0, [r3], #-0
    39d4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    39d8:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
    39dc:	00050068 	andeq	r0, r5, r8, rrx
    39e0:	05000000 	streq	r0, [r0, #-0]
    39e4:	00000002 	andeq	r0, r0, r2
    39e8:	09ba0300 	ldmibeq	sl!, {r8, r9}
    39ec:	05022e01 	streq	r2, [r2, #-3585]	; 0xfffff1ff
    39f0:	00010100 	andeq	r0, r1, r0, lsl #2
    39f4:	00000205 	andeq	r0, r0, r5, lsl #4
    39f8:	bb030000 	bllt	c3a00 <_Min_Stack_Size+0xc3800>
    39fc:	022e0109 	eoreq	r0, lr, #1073741826	; 0x40000002
    3a00:	01010005 	tsteq	r1, r5
    3a04:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    3a08:	00000002 	andeq	r0, r0, r2
    3a0c:	00f00300 	rscseq	r0, r0, r0, lsl #6
    3a10:	59592f01 	ldmdbpl	r9, {r0, r8, r9, sl, fp, sp}^
    3a14:	01000202 	tsteq	r0, r2, lsl #4
    3a18:	00020401 	andeq	r0, r2, r1, lsl #8
    3a1c:	66dc0205 	ldrbvs	r0, [ip], r5, lsl #4
    3a20:	fc030800 	stc2	8, cr0, [r3], {-0}
    3a24:	3d5b0100 	ldfcce	f0, [fp, #-0]
    3a28:	01000802 	tsteq	r0, r2, lsl #16
    3a2c:	00020401 	andeq	r0, r2, r1, lsl #8
    3a30:	00000205 	andeq	r0, r0, r5, lsl #4
    3a34:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
    3a38:	3d5b0101 	ldfcce	f0, [fp, #-4]
    3a3c:	01000802 	tsteq	r0, r2, lsl #16
    3a40:	00020401 	andeq	r0, r2, r1, lsl #8
    3a44:	00000205 	andeq	r0, r0, r5, lsl #4
    3a48:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
    3a4c:	314b0101 	cmpcc	fp, r1, lsl #2
    3a50:	3d4c4c3e 	stclcc	12, cr4, [ip, #-248]	; 0xffffff08
    3a54:	01000802 	tsteq	r0, r2, lsl #16
    3a58:	00020401 	andeq	r0, r2, r1, lsl #8
    3a5c:	00000205 	andeq	r0, r0, r5, lsl #4
    3a60:	b2030000 	andlt	r0, r3, #0
    3a64:	3d5b0101 	ldfcce	f0, [fp, #-4]
    3a68:	01000802 	tsteq	r0, r2, lsl #16
    3a6c:	00020401 	andeq	r0, r2, r1, lsl #8
    3a70:	00000205 	andeq	r0, r0, r5, lsl #4
    3a74:	c5030000 	strgt	r0, [r3, #-0]
    3a78:	34670101 	strbtcc	r0, [r7], #-257	; 0xfffffeff
    3a7c:	3e4c4c3e 	mcrcc	12, 2, r4, cr12, cr14, {1}
    3a80:	32413f69 	subcc	r3, r1, #420	; 0x1a4
    3a84:	00080267 	andeq	r0, r8, r7, ror #4
    3a88:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    3a8c:	00020500 	andeq	r0, r2, r0, lsl #10
    3a90:	03000000 	movweq	r0, #0
    3a94:	300101ec 	andcc	r0, r1, ip, ror #3
    3a98:	2f6c6868 	svccs	0x006c6868
    3a9c:	01000602 	tsteq	r0, r2, lsl #12
    3aa0:	00020401 	andeq	r0, r2, r1, lsl #8
    3aa4:	00000205 	andeq	r0, r0, r5, lsl #4
    3aa8:	85030000 	strhi	r0, [r3, #-0]
    3aac:	324b0102 	subcc	r0, fp, #-2147483648	; 0x80000000
    3ab0:	21314068 	teqcs	r1, r8, rrx
    3ab4:	01000802 	tsteq	r0, r2, lsl #16
    3ab8:	00020401 	andeq	r0, r2, r1, lsl #8
    3abc:	00000205 	andeq	r0, r0, r5, lsl #4
    3ac0:	9f030000 	svcls	0x00030000
    3ac4:	754e0102 	strbvc	r0, [lr, #-258]	; 0xfffffefe
    3ac8:	01000702 	tsteq	r0, r2, lsl #14
    3acc:	00021601 	andeq	r1, r2, r1, lsl #12
    3ad0:	29000200 	stmdbcs	r0, {r9}
    3ad4:	02000001 	andeq	r0, r0, #1
    3ad8:	0d0efb01 	vstreq	d15, [lr, #-4]
    3adc:	01010100 	mrseq	r0, (UNDEF: 17)
    3ae0:	00000001 	andeq	r0, r0, r1
    3ae4:	01000001 	tsteq	r0, r1
    3ae8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3a34 <_Min_Stack_Size+0x3834>
    3aec:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    3af0:	76737572 			; <UNDEFINED> instruction: 0x76737572
    3af4:	4144542f 	cmpmi	r4, pc, lsr #8
    3af8:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    3afc:	2f544f49 	svccs	0x00544f49
    3b00:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    3b04:	65697261 	strbvs	r7, [r9, #-609]!	; 0xfffffd9f
    3b08:	72732f73 	rsbsvc	r2, r3, #460	; 0x1cc
    3b0c:	752f0063 	strvc	r0, [pc, #-99]!	; 3ab1 <_Min_Stack_Size+0x38b1>
    3b10:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3b14:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3b18:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3b1c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3b20:	616d2f62 	cmnvs	sp, r2, ror #30
    3b24:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    3b28:	752f0065 	strvc	r0, [pc, #-101]!	; 3acb <_Min_Stack_Size+0x38cb>
    3b2c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3b30:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3b34:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3b38:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3b3c:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    3b40:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    3b44:	2f656d6f 	svccs	0x00656d6f
    3b48:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    3b4c:	542f7673 	strtpl	r7, [pc], #-1651	; 3b54 <_Min_Stack_Size+0x3954>
    3b50:	41534144 	cmpmi	r3, r4, asr #2
    3b54:	4f492d54 	svcmi	0x00492d54
    3b58:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    3b5c:	2f534953 	svccs	0x00534953
    3b60:	2f334d43 	svccs	0x00334d43
    3b64:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    3b68:	75536563 	ldrbvc	r6, [r3, #-1379]	; 0xfffffa9d
    3b6c:	726f7070 	rsbvc	r7, pc, #112	; 0x70
    3b70:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
    3b74:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    3b78:	31463233 	cmpcc	r6, r3, lsr r2
    3b7c:	2f007830 	svccs	0x00007830
    3b80:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3b84:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    3b88:	2f767375 	svccs	0x00767375
    3b8c:	53414454 	movtpl	r4, #5204	; 0x1454
    3b90:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    3b94:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    3b98:	5349534d 	movtpl	r5, #37709	; 0x934d
    3b9c:	334d432f 	movtcc	r4, #54063	; 0xd32f
    3ba0:	726f432f 	rsbvc	r4, pc, #-1140850688	; 0xbc000000
    3ba4:	70755365 	rsbsvc	r5, r5, r5, ror #6
    3ba8:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    3bac:	74730000 	ldrbtvc	r0, [r3], #-0
    3bb0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3bb4:	5f783031 	svcpl	0x00783031
    3bb8:	2e706b62 	vsubcs.f64	d22, d0, d18
    3bbc:	00010063 	andeq	r0, r1, r3, rrx
    3bc0:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    3bc4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    3bc8:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3bcc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    3bd0:	00020068 	andeq	r0, r2, r8, rrx
    3bd4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    3bd8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    3bdc:	0300682e 	movweq	r6, #2094	; 0x82e
    3be0:	74730000 	ldrbtvc	r0, [r3], #-0
    3be4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3be8:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
    3bec:	00040068 	andeq	r0, r4, r8, rrx
    3bf0:	726f6300 	rsbvc	r6, pc, #0, 6
    3bf4:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    3bf8:	00682e33 	rsbeq	r2, r8, r3, lsr lr
    3bfc:	00000005 	andeq	r0, r0, r5
    3c00:	fc020500 	stc2	5, cr0, [r2], {-0}
    3c04:	03080066 	movweq	r0, #32870	; 0x8066
    3c08:	2f0100f8 	svccs	0x000100f8
    3c0c:	02023d3d 	andeq	r3, r2, #3904	; 0xf40
    3c10:	00010100 	andeq	r0, r1, r0, lsl #2
    3c14:	00000205 	andeq	r0, r0, r5, lsl #4
    3c18:	86030000 	strhi	r0, [r3], -r0
    3c1c:	3d5b0101 	ldfcce	f0, [fp, #-4]
    3c20:	01000802 	tsteq	r0, r2, lsl #16
    3c24:	02050001 	andeq	r0, r5, #1
    3c28:	00000000 	andeq	r0, r0, r0
    3c2c:	01019303 	tsteq	r1, r3, lsl #6
    3c30:	08023d5b 	stmdaeq	r2, {r0, r1, r3, r4, r6, r8, sl, fp, ip, sp}
    3c34:	00010100 	andeq	r0, r1, r0, lsl #2
    3c38:	00000205 	andeq	r0, r0, r5, lsl #4
    3c3c:	a0030000 	andge	r0, r3, r0
    3c40:	3d5b0101 	ldfcce	f0, [fp, #-4]
    3c44:	01000802 	tsteq	r0, r2, lsl #16
    3c48:	02050001 	andeq	r0, r5, #1
    3c4c:	00000000 	andeq	r0, r0, r0
    3c50:	0101b403 	tsteq	r1, r3, lsl #8
    3c54:	4d3e3159 	ldfmis	f3, [lr, #-356]!	; 0xfffffe9c
    3c58:	07023d4c 	streq	r3, [r2, -ip, asr #26]
    3c5c:	00010100 	andeq	r0, r1, r0, lsl #2
    3c60:	00000205 	andeq	r0, r0, r5, lsl #4
    3c64:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    3c68:	31590101 	cmpcc	r9, r1, lsl #2
    3c6c:	3d5a4c3e 	ldclcc	12, cr4, [sl, #-248]	; 0xffffff08
    3c70:	01000802 	tsteq	r0, r2, lsl #16
    3c74:	02050001 	andeq	r0, r5, #1
    3c78:	00000000 	andeq	r0, r0, r0
    3c7c:	0101de03 	tsteq	r1, r3, lsl #28
    3c80:	4c2f3383 	stcmi	3, cr3, [pc], #-524	; 3a7c <_Min_Stack_Size+0x387c>
    3c84:	0008024b 	andeq	r0, r8, fp, asr #4
    3c88:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3c8c:	00000002 	andeq	r0, r0, r2
    3c90:	01f10300 	mvnseq	r0, r0, lsl #6
    3c94:	2f335901 	svccs	0x00335901
    3c98:	08023d4c 	stmdaeq	r2, {r2, r3, r6, r8, sl, fp, ip, sp}
    3c9c:	00010100 	andeq	r0, r1, r0, lsl #2
    3ca0:	00000205 	andeq	r0, r0, r5, lsl #4
    3ca4:	83030000 	movwhi	r0, #12288	; 0x3000
    3ca8:	3d2f0102 	stfccs	f0, [pc, #-8]!	; 3ca8 <_Min_Stack_Size+0x3aa8>
    3cac:	01000702 	tsteq	r0, r2, lsl #14
    3cb0:	02050001 	andeq	r0, r5, #1
    3cb4:	00000000 	andeq	r0, r0, r0
    3cb8:	01028d03 	tsteq	r2, r3, lsl #26
    3cbc:	06028330 			; <UNDEFINED> instruction: 0x06028330
    3cc0:	00010100 	andeq	r0, r1, r0, lsl #2
    3cc4:	00000205 	andeq	r0, r0, r5, lsl #4
    3cc8:	98030000 	stmdals	r3, {}	; <UNPREDICTABLE>
    3ccc:	3d2f0102 	stfccs	f0, [pc, #-8]!	; 3ccc <_Min_Stack_Size+0x3acc>
    3cd0:	01000702 	tsteq	r0, r2, lsl #14
    3cd4:	02050001 	andeq	r0, r5, #1
    3cd8:	00000000 	andeq	r0, r0, r0
    3cdc:	0102a203 	tsteq	r2, r3, lsl #4
    3ce0:	06028330 			; <UNDEFINED> instruction: 0x06028330
    3ce4:	5b010100 	blpl	440ec <_Min_Stack_Size+0x43eec>
    3ce8:	02000002 	andeq	r0, r0, #2
    3cec:	00012900 	andeq	r2, r1, r0, lsl #18
    3cf0:	fb010200 	blx	444fa <_Min_Stack_Size+0x442fa>
    3cf4:	01000d0e 	tsteq	r0, lr, lsl #26
    3cf8:	00010101 	andeq	r0, r1, r1, lsl #2
    3cfc:	00010000 	andeq	r0, r1, r0
    3d00:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    3d04:	2f656d6f 	svccs	0x00656d6f
    3d08:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    3d0c:	542f7673 	strtpl	r7, [pc], #-1651	; 3d14 <_Min_Stack_Size+0x3b14>
    3d10:	41534144 	cmpmi	r3, r4, asr #2
    3d14:	4f492d54 	svcmi	0x00492d54
    3d18:	694c2f54 	stmdbvs	ip, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3d1c:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    3d20:	2f736569 	svccs	0x00736569
    3d24:	00637273 	rsbeq	r7, r3, r3, ror r2
    3d28:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3d2c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3d30:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3d34:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3d38:	2f62696c 	svccs	0x0062696c
    3d3c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3d40:	00656e69 	rsbeq	r6, r5, r9, ror #28
    3d44:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3d48:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3d4c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3d50:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3d54:	2f62696c 	svccs	0x0062696c
    3d58:	00737973 	rsbseq	r7, r3, r3, ror r9
    3d5c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3ca8 <_Min_Stack_Size+0x3aa8>
    3d60:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    3d64:	76737572 			; <UNDEFINED> instruction: 0x76737572
    3d68:	4144542f 	cmpmi	r4, pc, lsr #8
    3d6c:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    3d70:	2f544f49 	svccs	0x00544f49
    3d74:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    3d78:	4d432f53 	stclmi	15, cr2, [r3, #-332]	; 0xfffffeb4
    3d7c:	65442f33 	strbvs	r2, [r4, #-3891]	; 0xfffff0cd
    3d80:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    3d84:	70707553 	rsbsvc	r7, r0, r3, asr r5
    3d88:	2f74726f 	svccs	0x0074726f
    3d8c:	532f5453 			; <UNDEFINED> instruction: 0x532f5453
    3d90:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3d94:	78303146 	ldmdavc	r0!, {r1, r2, r6, r8, ip, sp}
    3d98:	6f682f00 	svcvs	0x00682f00
    3d9c:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    3da0:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    3da4:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    3da8:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    3dac:	544f492d 	strbpl	r4, [pc], #-2349	; 3db4 <_Min_Stack_Size+0x3bb4>
    3db0:	534d432f 	movtpl	r4, #54063	; 0xd32f
    3db4:	432f5349 			; <UNDEFINED> instruction: 0x432f5349
    3db8:	432f334d 			; <UNDEFINED> instruction: 0x432f334d
    3dbc:	5365726f 	cmnpl	r5, #-268435450	; 0xf0000006
    3dc0:	6f707075 	svcvs	0x00707075
    3dc4:	00007472 	andeq	r7, r0, r2, ror r4
    3dc8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3dcc:	30316632 	eorscc	r6, r1, r2, lsr r6
    3dd0:	74725f78 	ldrbtvc	r5, [r2], #-3960	; 0xfffff088
    3dd4:	00632e63 	rsbeq	r2, r3, r3, ror #28
    3dd8:	5f000001 	svcpl	0x00000001
    3ddc:	61666564 	cmnvs	r6, r4, ror #10
    3de0:	5f746c75 	svcpl	0x00746c75
    3de4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    3de8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3dec:	5f000002 	svcpl	0x00000002
    3df0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3df4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3df8:	00000300 	andeq	r0, r0, r0, lsl #6
    3dfc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3e00:	30316632 	eorscc	r6, r1, r2, lsr r6
    3e04:	00682e78 	rsbeq	r2, r8, r8, ror lr
    3e08:	63000004 	movwvs	r0, #4
    3e0c:	5f65726f 	svcpl	0x0065726f
    3e10:	2e336d63 	cdpcs	13, 3, cr6, cr3, cr3, {3}
    3e14:	00050068 	andeq	r0, r5, r8, rrx
    3e18:	05000000 	streq	r0, [r0, #-0]
    3e1c:	00000002 	andeq	r0, r0, r2
    3e20:	00da0300 	sbcseq	r0, sl, r0, lsl #6
    3e24:	883e8701 	ldmdahi	lr!, {r0, r8, r9, sl, pc}
    3e28:	0802a01e 	stmdaeq	r2, {r1, r2, r3, r4, sp, pc}
    3e2c:	00010100 	andeq	r0, r1, r0, lsl #2
    3e30:	67100205 	ldrvs	r0, [r0, -r5, lsl #4]
    3e34:	ef030800 	svc	0x00030800
    3e38:	83300100 	teqhi	r0, #0, 2
    3e3c:	01000602 	tsteq	r0, r2, lsl #12
    3e40:	02050001 	andeq	r0, r5, #1
    3e44:	08006730 	stmdaeq	r0, {r4, r5, r8, r9, sl, sp, lr}
    3e48:	0100fa03 	tsteq	r0, r3, lsl #20	; <UNPREDICTABLE>
    3e4c:	06028330 			; <UNDEFINED> instruction: 0x06028330
    3e50:	00010100 	andeq	r0, r1, r0, lsl #2
    3e54:	00000205 	andeq	r0, r0, r5, lsl #4
    3e58:	85030000 	strhi	r0, [r3, #-0]
    3e5c:	2f3d0101 	svccs	0x003d0101
    3e60:	0802673d 	stmdaeq	r2, {r0, r2, r3, r4, r5, r8, r9, sl, sp, lr}
    3e64:	00010100 	andeq	r0, r1, r0, lsl #2
    3e68:	00000205 	andeq	r0, r0, r5, lsl #4
    3e6c:	91030000 	mrsls	r0, (UNDEF: 3)
    3e70:	304b0101 	subcc	r0, fp, r1, lsl #2
    3e74:	022f4b5a 	eoreq	r4, pc, #92160	; 0x16800
    3e78:	01010007 	tsteq	r1, r7
    3e7c:	50020500 	andpl	r0, r2, r0, lsl #10
    3e80:	03080067 	movweq	r0, #32871	; 0x8067
    3e84:	4e0101a0 	adfmidp	f0, f1, f0
    3e88:	2f4b8430 	svccs	0x004b8430
    3e8c:	01000602 	tsteq	r0, r2, lsl #12
    3e90:	02050001 	andeq	r0, r5, #1
    3e94:	00000000 	andeq	r0, r0, r0
    3e98:	0101b203 	tsteq	r1, r3, lsl #4
    3e9c:	4b5a304b 	blmi	168ffd0 <_Min_Stack_Size+0x168fdd0>
    3ea0:	0007022f 	andeq	r0, r7, pc, lsr #4
    3ea4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3ea8:	00000002 	andeq	r0, r0, r2
    3eac:	01c10300 	biceq	r0, r1, r0, lsl #6
    3eb0:	752f3d01 	strvc	r3, [pc, #-3329]!	; 31b7 <_Min_Stack_Size+0x2fb7>
    3eb4:	08022175 	stmdaeq	r2, {r0, r2, r4, r5, r6, r8, sp}
    3eb8:	00010100 	andeq	r0, r1, r0, lsl #2
    3ebc:	67840205 	strvs	r0, [r4, r5, lsl #4]
    3ec0:	cf030800 	svcgt	0x00030800
    3ec4:	00300101 	eorseq	r0, r0, r1, lsl #2
    3ec8:	06010402 	streq	r0, [r1], -r2, lsl #8
    3ecc:	02770620 	rsbseq	r0, r7, #32, 12	; 0x2000000
    3ed0:	01010006 	tsteq	r1, r6
    3ed4:	00020500 	andeq	r0, r2, r0, lsl #10
    3ed8:	03000000 	movweq	r0, #0
    3edc:	300101df 	ldrdcc	r0, [r1], -pc	; <UNPREDICTABLE>
    3ee0:	04020084 	streq	r0, [r2], #-132	; 0xffffff7c
    3ee4:	06200601 	strteq	r0, [r0], -r1, lsl #12
    3ee8:	00060277 	andeq	r0, r6, r7, ror r2
    3eec:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3ef0:	00000002 	andeq	r0, r0, r2
    3ef4:	01f40300 	mvnseq	r0, r0, lsl #6
    3ef8:	84335901 	ldrthi	r5, [r3], #-2305	; 0xfffff6ff
    3efc:	02213040 	eoreq	r3, r1, #64	; 0x40
    3f00:	01010007 	tsteq	r1, r7
    3f04:	00020500 	andeq	r0, r2, r0, lsl #10
    3f08:	03000000 	movweq	r0, #0
    3f0c:	5d010291 	sfmpl	f0, 4, [r1, #-580]	; 0xfffffdbc
    3f10:	0007029f 	muleq	r7, pc, r2	; <UNPREDICTABLE>
    3f14:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    3f18:	00000002 	andeq	r0, r0, r2
    3f1c:	02a30300 	adceq	r0, r3, #0, 6
    3f20:	83325901 	teqhi	r2, #16384	; 0x4000
    3f24:	01040200 	mrseq	r0, R12_usr
    3f28:	3e068206 	cdpcc	2, 0, cr8, cr6, cr6, {0}
    3f2c:	02213040 	eoreq	r3, r1, #64	; 0x40
    3f30:	01010008 	tsteq	r1, r8
    3f34:	00020500 	andeq	r0, r2, r0, lsl #10
    3f38:	03000000 	movweq	r0, #0
    3f3c:	5d0102be 	sfmpl	f0, 4, [r1, #-760]	; 0xfffffd08
    3f40:	0007029f 	muleq	r7, pc, r2	; <UNPREDICTABLE>
    3f44:	01d40101 	bicseq	r0, r4, r1, lsl #2
    3f48:	00020000 	andeq	r0, r2, r0
    3f4c:	0000011f 	andeq	r0, r0, pc, lsl r1
    3f50:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3f54:	0101000d 	tsteq	r1, sp
    3f58:	00000101 	andeq	r0, r0, r1, lsl #2
    3f5c:	00000100 	andeq	r0, r0, r0, lsl #2
    3f60:	6f682f01 	svcvs	0x00682f01
    3f64:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    3f68:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    3f6c:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    3f70:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    3f74:	544f492d 	strbpl	r4, [pc], #-2349	; 3f7c <_Min_Stack_Size+0x3d7c>
    3f78:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
    3f7c:	752f0072 	strvc	r0, [pc, #-114]!	; 3f12 <_Min_Stack_Size+0x3d12>
    3f80:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3f84:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3f88:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3f8c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3f90:	616d2f62 	cmnvs	sp, r2, ror #30
    3f94:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    3f98:	752f0065 	strvc	r0, [pc, #-101]!	; 3f3b <_Min_Stack_Size+0x3d3b>
    3f9c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3fa0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3fa4:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3fa8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3fac:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    3fb0:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    3fb4:	2f656d6f 	svccs	0x00656d6f
    3fb8:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    3fbc:	542f7673 	strtpl	r7, [pc], #-1651	; 3fc4 <_Min_Stack_Size+0x3dc4>
    3fc0:	41534144 	cmpmi	r3, r4, asr #2
    3fc4:	4f492d54 	svcmi	0x00492d54
    3fc8:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    3fcc:	2f534953 	svccs	0x00534953
    3fd0:	2f334d43 	svccs	0x00334d43
    3fd4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    3fd8:	75536563 	ldrbvc	r6, [r3, #-1379]	; 0xfffffa9d
    3fdc:	726f7070 	rsbvc	r7, pc, #112	; 0x70
    3fe0:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
    3fe4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    3fe8:	31463233 	cmpcc	r6, r3, lsr r2
    3fec:	2f007830 	svccs	0x00007830
    3ff0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3ff4:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    3ff8:	2f767375 	svccs	0x00767375
    3ffc:	53414454 	movtpl	r4, #5204	; 0x1454
    4000:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    4004:	432f544f 			; <UNDEFINED> instruction: 0x432f544f
    4008:	5349534d 	movtpl	r5, #37709	; 0x934d
    400c:	334d432f 	movtcc	r4, #54063	; 0xd32f
    4010:	726f432f 	rsbvc	r4, pc, #-1140850688	; 0xbc000000
    4014:	70755365 	rsbsvc	r5, r5, r5, ror #6
    4018:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    401c:	74730000 	ldrbtvc	r0, [r3], #-0
    4020:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    4024:	5f783031 	svcpl	0x00783031
    4028:	632e7469 			; <UNDEFINED> instruction: 0x632e7469
    402c:	00000100 	andeq	r0, r0, r0, lsl #2
    4030:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    4034:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    4038:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    403c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    4040:	00000200 	andeq	r0, r0, r0, lsl #4
    4044:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    4048:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    404c:	00030068 	andeq	r0, r3, r8, rrx
    4050:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    4054:	31663233 	cmncc	r6, r3, lsr r2
    4058:	682e7830 	stmdavs	lr!, {r4, r5, fp, ip, sp, lr}
    405c:	00000400 	andeq	r0, r0, r0, lsl #8
    4060:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    4064:	336d635f 	cmncc	sp, #2080374785	; 0x7c000001
    4068:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    406c:	00000000 	andeq	r0, r0, r0
    4070:	67a40205 	strvs	r0, [r4, r5, lsl #4]!
    4074:	30030800 	andcc	r0, r3, r0, lsl #16
    4078:	04022f01 	streq	r2, [r2], #-3841	; 0xfffff0ff
    407c:	00010100 	andeq	r0, r1, r0, lsl #2
    4080:	67b00205 	ldrvs	r0, [r0, r5, lsl #4]!
    4084:	39030800 	stmdbcc	r3, {fp}
    4088:	04020001 	streq	r0, [r2], #-1
    408c:	01023201 	tsteq	r2, r1, lsl #4
    4090:	00010100 	andeq	r0, r1, r0, lsl #2
    4094:	67b80205 	ldrvs	r0, [r8, r5, lsl #4]!
    4098:	c6030800 	strgt	r0, [r3], -r0, lsl #16
    409c:	02000100 	andeq	r0, r0, #0, 2
    40a0:	02320104 	eorseq	r0, r2, #4, 2
    40a4:	01010001 	tsteq	r1, r1
    40a8:	c0020500 	andgt	r0, r2, r0, lsl #10
    40ac:	03080067 	movweq	r0, #32871	; 0x8067
    40b0:	000100d3 	ldrdeq	r0, [r1], -r3
    40b4:	32010402 	andcc	r0, r1, #33554432	; 0x2000000
    40b8:	01000102 	tsteq	r0, r2, lsl #2
    40bc:	02050001 	andeq	r0, r5, #1
    40c0:	080067c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, sp, lr}
    40c4:	0100e003 	tsteq	r0, r3
    40c8:	01040200 	mrseq	r0, R12_usr
    40cc:	00010232 	andeq	r0, r1, r2, lsr r2
    40d0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    40d4:	0067d002 	rsbeq	sp, r7, r2
    40d8:	01930308 	orrseq	r0, r3, r8, lsl #6
    40dc:	04023001 	streq	r3, [r2], #-1
    40e0:	00010100 	andeq	r0, r1, r0, lsl #2
    40e4:	67dc0205 	ldrbvs	r0, [ip, r5, lsl #4]
    40e8:	98030800 	stmdals	r3, {fp}
    40ec:	02300101 	eorseq	r0, r0, #1073741824	; 0x40000000
    40f0:	01010004 	tsteq	r1, r4
    40f4:	e8020500 	stmda	r2, {r8, sl}
    40f8:	03080067 	movweq	r0, #32871	; 0x8067
    40fc:	3101019d 			; <UNDEFINED> instruction: 0x3101019d
    4100:	3d9f5a83 	vldrcc	s10, [pc, #524]	; 4314 <_Min_Stack_Size+0x4114>
    4104:	5a59312f 	bpl	16505c8 <_Min_Stack_Size+0x16503c8>
    4108:	01000802 	tsteq	r0, r2, lsl #16
    410c:	02050001 	andeq	r0, r5, #1
    4110:	0800684c 	stmdaeq	r0, {r2, r3, r6, fp, sp, lr}
    4114:	0101ae03 	tsteq	r1, r3, lsl #28
    4118:	0004022f 	andeq	r0, r4, pc, lsr #4
    411c:	02670101 	rsbeq	r0, r7, #1073741824	; 0x40000000
    4120:	00020000 	andeq	r0, r2, r0
    4124:	0000019a 	muleq	r0, sl, r1
    4128:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    412c:	0101000d 	tsteq	r1, sp
    4130:	00000101 	andeq	r0, r0, r1, lsl #2
    4134:	00000100 	andeq	r0, r0, r0, lsl #2
    4138:	6f682f01 	svcvs	0x00682f01
    413c:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    4140:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    4144:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    4148:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    414c:	544f492d 	strbpl	r4, [pc], #-2349	; 4154 <_Min_Stack_Size+0x3f54>
    4150:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
    4154:	752f0072 	strvc	r0, [pc, #-114]!	; 40ea <_Min_Stack_Size+0x3eea>
    4158:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    415c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4160:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    4164:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4168:	616d2f62 	cmnvs	sp, r2, ror #30
    416c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    4170:	752f0065 	strvc	r0, [pc, #-101]!	; 4113 <_Min_Stack_Size+0x3f13>
    4174:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    4178:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    417c:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    4180:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4184:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4188:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    418c:	2f656d6f 	svccs	0x00656d6f
    4190:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    4194:	542f7673 	strtpl	r7, [pc], #-1651	; 419c <_Min_Stack_Size+0x3f9c>
    4198:	41534144 	cmpmi	r3, r4, asr #2
    419c:	4f492d54 	svcmi	0x00492d54
    41a0:	4d432f54 	stclmi	15, cr2, [r3, #-336]	; 0xfffffeb0
    41a4:	2f534953 	svccs	0x00534953
    41a8:	2f334d43 	svccs	0x00334d43
    41ac:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    41b0:	75536563 	ldrbvc	r6, [r3, #-1379]	; 0xfffffa9d
    41b4:	726f7070 	rsbvc	r7, pc, #112	; 0x70
    41b8:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
    41bc:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    41c0:	31463233 	cmpcc	r6, r3, lsr r2
    41c4:	2f007830 	svccs	0x00007830
    41c8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    41cc:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    41d0:	2f767375 	svccs	0x00767375
    41d4:	53414454 	movtpl	r4, #5204	; 0x1454
    41d8:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    41dc:	4c2f544f 	cfstrsmi	mvf5, [pc], #-316	; 40a8 <_Min_Stack_Size+0x3ea8>
    41e0:	61726269 	cmnvs	r2, r9, ror #4
    41e4:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    41e8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    41ec:	6f682f00 	svcvs	0x00682f00
    41f0:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    41f4:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    41f8:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    41fc:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    4200:	544f492d 	strbpl	r4, [pc], #-2349	; 4208 <_Min_Stack_Size+0x4008>
    4204:	534d432f 	movtpl	r4, #54063	; 0xd32f
    4208:	432f5349 			; <UNDEFINED> instruction: 0x432f5349
    420c:	432f334d 			; <UNDEFINED> instruction: 0x432f334d
    4210:	5365726f 	cmnpl	r5, #-268435450	; 0xf0000006
    4214:	6f707075 	svcvs	0x00707075
    4218:	00007472 	andeq	r7, r0, r2, ror r4
    421c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    4220:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    4224:	632e657a 			; <UNDEFINED> instruction: 0x632e657a
    4228:	00000100 	andeq	r0, r0, r0, lsl #2
    422c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    4230:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    4234:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    4238:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    423c:	00000200 	andeq	r0, r0, r0, lsl #4
    4240:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    4244:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    4248:	00030068 	andeq	r0, r3, r8, rrx
    424c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    4250:	31663233 	cmncc	r6, r3, lsr r2
    4254:	682e7830 	stmdavs	lr!, {r4, r5, fp, ip, sp, lr}
    4258:	00000400 	andeq	r0, r0, r0, lsl #8
    425c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    4260:	30316632 	eorscc	r6, r1, r2, lsr r6
    4264:	70675f78 	rsbvc	r5, r7, r8, ror pc
    4268:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    426c:	00000500 	andeq	r0, r0, r0, lsl #10
    4270:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    4274:	30316632 	eorscc	r6, r1, r2, lsr r6
    4278:	32695f78 	rsbcc	r5, r9, #120, 30	; 0x1e0
    427c:	00682e63 	rsbeq	r2, r8, r3, ror #28
    4280:	73000005 	movwvc	r0, #5
    4284:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    4288:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    428c:	6970735f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    4290:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    4294:	74730000 	ldrbtvc	r0, [r3], #-0
    4298:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    429c:	5f783031 	svcpl	0x00783031
    42a0:	2e6d6974 			; <UNDEFINED> instruction: 0x2e6d6974
    42a4:	00050068 	andeq	r0, r5, r8, rrx
    42a8:	73696d00 	cmnvc	r9, #0, 26
    42ac:	00682e63 	rsbeq	r2, r8, r3, ror #28
    42b0:	63000005 	movwvs	r0, #5
    42b4:	5f65726f 	svcpl	0x0065726f
    42b8:	2e336d63 	cdpcs	13, 3, cr6, cr3, cr3, {3}
    42bc:	00060068 	andeq	r0, r6, r8, rrx
    42c0:	05000000 	streq	r0, [r0, #-0]
    42c4:	00685802 	rsbeq	r5, r8, r2, lsl #16
    42c8:	011d0308 	tsteq	sp, r8, lsl #6
    42cc:	3d4b593f 	vstrcc.16	s11, [fp, #-126]	; 0xffffff82	; <UNPREDICTABLE>
    42d0:	3d682f2f 	stclcc	15, cr2, [r8, #-188]!	; 0xffffff44
    42d4:	2f3d2f2f 	svccs	0x003d2f2f
    42d8:	4b5a3d3d 	blmi	16937d4 <_Min_Stack_Size+0x16935d4>
    42dc:	000a024b 	andeq	r0, sl, fp, asr #4
    42e0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    42e4:	0068dc02 	rsbeq	sp, r8, r2, lsl #24
    42e8:	01350308 	teqeq	r5, r8, lsl #6
    42ec:	2f3d4b3e 	svccs	0x003d4b3e
    42f0:	59595a2f 	ldmdbpl	r9, {r0, r1, r2, r3, r5, r9, fp, ip, lr}^
    42f4:	01000702 	tsteq	r0, r2, lsl #14
    42f8:	02050001 	andeq	r0, r5, #1
    42fc:	08006924 	stmdaeq	r0, {r2, r5, r8, fp, sp, lr}
    4300:	0100c203 	tsteq	r0, r3, lsl #4
    4304:	580a0340 	stmdapl	sl, {r6, r8, r9}
    4308:	5a2f2f2f 	bpl	bcffcc <_Min_Stack_Size+0xbcfdcc>
    430c:	5b2f2f2f 	blpl	bcffd0 <_Min_Stack_Size+0xbcfdd0>
    4310:	592f2f2f 	stmdbpl	pc!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
    4314:	2f2f3d4d 	svccs	0x002f3d4d
    4318:	2f3d2f5b 	svccs	0x003d2f5b
    431c:	2f3d2f2f 	svccs	0x003d2f2f
    4320:	4b5a2f2f 	blmi	168ffe4 <_Min_Stack_Size+0x168fde4>
    4324:	0008024b 	andeq	r0, r8, fp, asr #4
    4328:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    432c:	0069e802 	rsbeq	lr, r9, r2, lsl #16
    4330:	00f80308 	rscseq	r0, r8, r8, lsl #6
    4334:	2f2f4001 	svccs	0x002f4001
    4338:	4b4d2f2f 	blmi	134fffc <_Min_Stack_Size+0x134fdfc>
    433c:	2f2f3d2f 	svccs	0x002f3d2f
    4340:	02596767 	subseq	r6, r9, #27000832	; 0x19c0000
    4344:	01010004 	tsteq	r1, r4
    4348:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    434c:	0308006a 	movweq	r0, #32874	; 0x806a
    4350:	3001018e 	andcc	r0, r1, lr, lsl #3
    4354:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    4358:	06200601 	strteq	r0, [r0], -r1, lsl #12
    435c:	3e515a68 	vnmlacc.f32	s11, s2, s17
    4360:	022f304c 	eoreq	r3, pc, #76	; 0x4c
    4364:	01010002 	tsteq	r1, r2
    4368:	90020500 	andls	r0, r2, r0, lsl #10
    436c:	0308006a 	movweq	r0, #32874	; 0x806a
    4370:	300101a9 	andcc	r0, r1, r9, lsr #3
    4374:	3d303d5a 	ldccc	13, cr3, [r0, #-360]!	; 0xfffffe98
    4378:	01040200 	mrseq	r0, R12_usr
    437c:	68062006 	stmdavs	r6, {r1, r2, sp}
    4380:	4b2f3d4c 	blmi	bd38b8 <_Min_Stack_Size+0xbd36b8>
    4384:	01000202 	tsteq	r0, r2, lsl #4
    4388:	00054901 	andeq	r4, r5, r1, lsl #18
    438c:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
    4390:	02000002 	andeq	r0, r0, #2
    4394:	0d0efb01 	vstreq	d15, [lr, #-4]
    4398:	01010100 	mrseq	r0, (UNDEF: 17)
    439c:	00000001 	andeq	r0, r0, r1
    43a0:	01000001 	tsteq	r0, r1
    43a4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 42f0 <_Min_Stack_Size+0x40f0>
    43a8:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    43ac:	76737572 			; <UNDEFINED> instruction: 0x76737572
    43b0:	4144542f 	cmpmi	r4, pc, lsr #8
    43b4:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    43b8:	2f544f49 	svccs	0x00544f49
    43bc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    43c0:	6f682f00 	svcvs	0x00682f00
    43c4:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    43c8:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    43cc:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    43d0:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    43d4:	544f492d 	strbpl	r4, [pc], #-2349	; 43dc <_Min_Stack_Size+0x41dc>
    43d8:	2f534f2f 	svccs	0x00534f2f
    43dc:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    43e0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    43e4:	4343472f 	movtmi	r4, #14127	; 0x372f
    43e8:	4d52412f 	ldfmie	f4, [r2, #-188]	; 0xffffff44
    43ec:	334d435f 	movtcc	r4, #54111	; 0xd35f
    43f0:	73752f00 	cmnvc	r5, #0, 30
    43f4:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    43f8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    43fc:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    4400:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4404:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    4408:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    440c:	73752f00 	cmnvc	r5, #0, 30
    4410:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    4414:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4418:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    441c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4420:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    4424:	6f682f00 	svcvs	0x00682f00
    4428:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    442c:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    4430:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    4434:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    4438:	544f492d 	strbpl	r4, [pc], #-2349	; 4440 <_Min_Stack_Size+0x4240>
    443c:	2f534f2f 	svccs	0x00534f2f
    4440:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4444:	00656475 	rsbeq	r6, r5, r5, ror r4
    4448:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4394 <_Min_Stack_Size+0x4194>
    444c:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    4450:	76737572 			; <UNDEFINED> instruction: 0x76737572
    4454:	4144542f 	cmpmi	r4, pc, lsr #8
    4458:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    445c:	2f544f49 	svccs	0x00544f49
    4460:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    4464:	4d432f53 	stclmi	15, cr2, [r3, #-332]	; 0xfffffeb4
    4468:	65442f33 	strbvs	r2, [r4, #-3891]	; 0xfffff0cd
    446c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    4470:	70707553 	rsbsvc	r7, r0, r3, asr r5
    4474:	2f74726f 	svccs	0x0074726f
    4478:	532f5453 			; <UNDEFINED> instruction: 0x532f5453
    447c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    4480:	78303146 	ldmdavc	r0!, {r1, r2, r6, r8, ip, sp}
    4484:	452f2e00 	strmi	r2, [pc, #-3584]!	; 368c <_Min_Stack_Size+0x348c>
    4488:	72656874 	rsbvc	r6, r5, #116, 16	; 0x740000
    448c:	0074656e 	rsbseq	r6, r4, lr, ror #10
    4490:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 43dc <_Min_Stack_Size+0x41dc>
    4494:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    4498:	76737572 			; <UNDEFINED> instruction: 0x76737572
    449c:	4144542f 	cmpmi	r4, pc, lsr #8
    44a0:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    44a4:	2f544f49 	svccs	0x00544f49
    44a8:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
    44ac:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
    44b0:	6f682f00 	svcvs	0x00682f00
    44b4:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    44b8:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    44bc:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    44c0:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    44c4:	544f492d 	strbpl	r4, [pc], #-2349	; 44cc <_Min_Stack_Size+0x42cc>
    44c8:	746e492f 	strbtvc	r4, [lr], #-2351	; 0xfffff6d1
    44cc:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    44d0:	48442f74 	stmdami	r4, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
    44d4:	2f005043 	svccs	0x00005043
    44d8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    44dc:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    44e0:	2f767375 	svccs	0x00767375
    44e4:	53414454 	movtpl	r4, #5204	; 0x1454
    44e8:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    44ec:	6c2f544f 	cfstrsvs	mvf5, [pc], #-316	; 43b8 <_Min_Stack_Size+0x41b8>
    44f0:	6d656269 	sfmvs	f6, 2, [r5, #-420]!	; 0xfffffe5c
    44f4:	2f747471 	svccs	0x00747471
    44f8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    44fc:	00656475 	rsbeq	r6, r5, r5, ror r4
    4500:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 444c <_Min_Stack_Size+0x424c>
    4504:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    4508:	76737572 			; <UNDEFINED> instruction: 0x76737572
    450c:	4144542f 	cmpmi	r4, pc, lsr #8
    4510:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    4514:	2f544f49 	svccs	0x00544f49
    4518:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    451c:	4d432f53 	stclmi	15, cr2, [r3, #-332]	; 0xfffffeb4
    4520:	6f432f33 	svcvs	0x00432f33
    4524:	75536572 	ldrbvc	r6, [r3, #-1394]	; 0xfffffa8e
    4528:	726f7070 	rsbvc	r7, pc, #112	; 0x70
    452c:	682f0074 	stmdavs	pc!, {r2, r4, r5, r6}	; <UNPREDICTABLE>
    4530:	2f656d6f 	svccs	0x00656d6f
    4534:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    4538:	542f7673 	strtpl	r7, [pc], #-1651	; 4540 <_Min_Stack_Size+0x4340>
    453c:	41534144 	cmpmi	r3, r4, asr #2
    4540:	4f492d54 	svcmi	0x00492d54
    4544:	72442f54 	subvc	r2, r4, #84, 30	; 0x150
    4548:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    454c:	616d0000 	cmnvs	sp, r0
    4550:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
    4554:	00000100 	andeq	r0, r0, r0, lsl #2
    4558:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    455c:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
    4560:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4564:	5f000002 	svcpl	0x00000002
    4568:	61666564 	cmnvs	r6, r4, ror #10
    456c:	5f746c75 	svcpl	0x00746c75
    4570:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    4574:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4578:	5f000003 	svcpl	0x00000003
    457c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4580:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4584:	00000400 	andeq	r0, r0, r0, lsl #8
    4588:	6b736174 	blvs	1cdcb60 <_Min_Stack_Size+0x1cdc960>
    458c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    4590:	75710000 	ldrbvc	r0, [r1, #-0]!
    4594:	2e657565 	cdpcs	5, 6, cr7, cr5, cr5, {3}
    4598:	00050068 	andeq	r0, r5, r8, rrx
    459c:	6d657300 	stclvs	3, cr7, [r5, #-0]
    45a0:	2e726870 	mrccs	8, 3, r6, cr2, cr0, {3}
    45a4:	00050068 	andeq	r0, r5, r8, rrx
    45a8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    45ac:	31663233 	cmncc	r6, r3, lsr r2
    45b0:	682e7830 	stmdavs	lr!, {r4, r5, fp, ip, sp, lr}
    45b4:	00000600 	andeq	r0, r0, r0, lsl #12
    45b8:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
    45bc:	5f706968 	svcpl	0x00706968
    45c0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    45c4:	0700682e 	streq	r6, [r0, -lr, lsr #16]
    45c8:	6f730000 	svcvs	0x00730000
    45cc:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xfffff49d
    45d0:	0800682e 	stmdaeq	r0, {r1, r2, r3, r5, fp, sp, lr}
    45d4:	68640000 	stmdavs	r4!, {}^	; <UNPREDICTABLE>
    45d8:	682e7063 	stmdavs	lr!, {r0, r1, r5, r6, ip, sp, lr}
    45dc:	00000900 	andeq	r0, r0, r0, lsl #18
    45e0:	6562696c 	strbvs	r6, [r2, #-2412]!	; 0xfffff694
    45e4:	7474716d 	ldrbtvc	r7, [r4], #-365	; 0xfffffe93
    45e8:	0a00682e 	beq	1e6a8 <_Min_Stack_Size+0x1e4a8>
    45ec:	6f630000 	svcvs	0x00630000
    45f0:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    45f4:	682e336d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
    45f8:	00000b00 	andeq	r0, r0, r0, lsl #22
    45fc:	44454c4f 	strbmi	r4, [r5], #-3151	; 0xfffff3b1
    4600:	0c00682e 	stceq	8, cr6, [r0], {46}	; 0x2e
    4604:	00000000 	andeq	r0, r0, r0
    4608:	6adc0205 	bvs	ff704e24 <BootRAM+0xe6755c5>
    460c:	e6030800 	str	r0, [r3], -r0, lsl #16
    4610:	4b2f0100 	blmi	bc4a18 <_Min_Stack_Size+0xbc4818>
    4614:	01000402 	tsteq	r0, r2, lsl #8
    4618:	02050001 	andeq	r0, r5, #1
    461c:	08006af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, sp, lr}
    4620:	0100ea03 	tsteq	r0, r3, lsl #20
    4624:	04024b2f 	streq	r4, [r2], #-2863	; 0xfffff4d1
    4628:	00010100 	andeq	r0, r1, r0, lsl #2
    462c:	6b040205 	blvs	104e48 <_Min_Stack_Size+0x104c48>
    4630:	ef030800 	svc	0x00030800
    4634:	675a0100 	ldrbvs	r0, [sl, -r0, lsl #2]
    4638:	01040200 	mrseq	r0, R12_usr
    463c:	75062006 	strvc	r2, [r6, #-6]
    4640:	01000702 	tsteq	r0, r2, lsl #14
    4644:	02050001 	andeq	r0, r5, #1
    4648:	08006b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, sp, lr}
    464c:	0100f603 	tsteq	r0, r3, lsl #12	; <UNPREDICTABLE>
    4650:	5a3d593e 	bpl	f5ab50 <_Min_Stack_Size+0xf5a950>
    4654:	00070221 	andeq	r0, r7, r1, lsr #4
    4658:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    465c:	006b6802 	rsbeq	r6, fp, r2, lsl #16
    4660:	01800308 	orreq	r0, r0, r8, lsl #6
    4664:	75305901 	ldrvc	r5, [r0, #-2305]!	; 0xfffff6ff
    4668:	2176834d 	cmncs	r6, sp, asr #6
    466c:	01000c02 	tsteq	r0, r2, lsl #24
    4670:	02050001 	andeq	r0, r5, #1
    4674:	08006bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp, sp, lr}
    4678:	01018d03 	tsteq	r1, r3, lsl #26
    467c:	83752f68 	cmnhi	r5, #104, 30	; 0x1a0
    4680:	07022175 	smlsdxeq	r2, r5, r1, r2
    4684:	00010100 	andeq	r0, r1, r0, lsl #2
    4688:	6c100205 	lfmvs	f0, 4, [r0], {5}
    468c:	96030800 	strls	r0, [r3], -r0, lsl #16
    4690:	323d0101 	eorscc	r0, sp, #1073741824	; 0x40000000
    4694:	759f7568 	ldrvc	r7, [pc, #1384]	; 4c04 <_Min_Stack_Size+0x4a04>
    4698:	004b763e 	subeq	r7, fp, lr, lsr r6
    469c:	06010402 	streq	r0, [r1], -r2, lsl #8
    46a0:	5a3f063c 	bpl	fc5f98 <_Min_Stack_Size+0xfc5d98>
    46a4:	02005a5b 	andeq	r5, r0, #372736	; 0x5b000
    46a8:	4a060104 	bmi	184ac0 <_Min_Stack_Size+0x1848c0>
    46ac:	02003f06 	andeq	r3, r0, #6, 30
    46b0:	f2060104 	vrhadd.s8	d0, d6, d4
    46b4:	4f483d06 	svcmi	0x00483d06
    46b8:	00090221 	andeq	r0, r9, r1, lsr #4
    46bc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    46c0:	006cf402 	rsbeq	pc, ip, r2, lsl #8
    46c4:	01c00308 	biceq	r0, r0, r8, lsl #6
    46c8:	4c2f3d01 	stcmi	13, cr3, [pc], #-4	; 46cc <_Min_Stack_Size+0x44cc>
    46cc:	30303030 	eorscc	r3, r0, r0, lsr r0
    46d0:	4b3d3030 	blmi	f50798 <_Min_Stack_Size+0xf50598>
    46d4:	4a0b0340 	bmi	2c53dc <_Min_Stack_Size+0x2c51dc>
    46d8:	91324d4c 	teqls	r2, ip, asr #26
    46dc:	83313f83 	teqhi	r1, #524	; 0x20c
    46e0:	01040200 	mrseq	r0, R12_usr
    46e4:	00832483 	addeq	r2, r3, r3, lsl #9
    46e8:	4c020402 	cfstrsmi	mvf0, [r2], {2}
    46ec:	02006723 	andeq	r6, r0, #9175040	; 0x8c0000
    46f0:	224c0304 	subcs	r0, ip, #4, 6	; 0x10000000
    46f4:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    46f8:	4b244c04 	blmi	917710 <_Min_Stack_Size+0x917510>
    46fc:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
    4700:	4023d805 	eormi	sp, r3, r5, lsl #16
    4704:	06040200 	streq	r0, [r4], -r0, lsl #4
    4708:	020023d8 	andeq	r2, r0, #216, 6	; 0x60000003
    470c:	23d80704 	bicscs	r0, r8, #4, 14	; 0x100000
    4710:	08040200 	stmdaeq	r4, {r9}
    4714:	212f23d8 	ldrdcs	r2, [pc, -r8]!
    4718:	01003b02 	tsteq	r0, r2, lsl #22
    471c:	02050001 	andeq	r0, r5, #1
    4720:	08006eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, sp, lr}
    4724:	0102ab03 	tsteq	r2, r3, lsl #22
    4728:	5a3e344b 	bpl	f9185c <_Min_Stack_Size+0xf9165c>
    472c:	683d3d85 	ldmdavs	sp!, {r0, r2, r7, r8, sl, fp, ip, sp}
    4730:	0200bb68 	andeq	fp, r0, #104, 22	; 0x1a000
    4734:	3c060104 	stfccs	f0, [r6], {4}
    4738:	02040200 	andeq	r0, r4, #0, 4
    473c:	040200c8 	streq	r0, [r2], #-200	; 0xffffff38
    4740:	02002004 	andeq	r2, r0, #4
    4744:	9f060404 	svcls	0x00060404
    4748:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    474c:	040200f3 	streq	r0, [r2], #-243	; 0xffffff0d
    4750:	00520804 	subseq	r0, r2, r4, lsl #16
    4754:	2f040402 	svccs	0x00040402
    4758:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    475c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    4760:	02004b04 	andeq	r4, r0, #4, 22	; 0x1000
    4764:	004b0404 	subeq	r0, fp, r4, lsl #8
    4768:	4b040402 	blmi	105778 <_Min_Stack_Size+0x105578>
    476c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    4770:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    4774:	002f0804 	eoreq	r0, pc, r4, lsl #16
    4778:	08040402 	stmdaeq	r4, {r1, sl}
    477c:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    4780:	005a0804 	subseq	r0, sl, r4, lsl #16
    4784:	e5040402 	str	r0, [r4, #-1026]	; 0xfffffbfe
    4788:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    478c:	02001308 	andeq	r1, r0, #8, 6	; 0x20000000
    4790:	5a080404 	bpl	2057a8 <_Min_Stack_Size+0x2055a8>
    4794:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    4798:	040200e5 	streq	r0, [r2], #-229	; 0xffffff1b
    479c:	00130804 	andseq	r0, r3, r4, lsl #16
    47a0:	08040402 	stmdaeq	r4, {r1, sl}
    47a4:	0402005a 	streq	r0, [r2], #-90	; 0xffffffa6
    47a8:	0200e504 	andeq	lr, r0, #4, 10	; 0x1000000
    47ac:	13080404 	movwne	r0, #33796	; 0x8404
    47b0:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    47b4:	02005a08 	andeq	r5, r0, #8, 20	; 0x8000
    47b8:	00e50404 	rsceq	r0, r5, r4, lsl #8
    47bc:	08040402 	stmdaeq	r4, {r1, sl}
    47c0:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    47c4:	00590804 	subseq	r0, r9, r4, lsl #16
    47c8:	3d040402 	cfstrscc	mvf0, [r4, #-8]
    47cc:	4b30833d 	blmi	c254c8 <_Min_Stack_Size+0xc252c8>
    47d0:	0013023d 	andseq	r0, r3, sp, lsr r2
    47d4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    47d8:	00727402 	rsbseq	r7, r2, r2, lsl #8
    47dc:	02ed0308 	rsceq	r0, sp, #8, 6	; 0x20000000
    47e0:	4a200301 	bmi	8053ec <_Min_Stack_Size+0x8051ec>
    47e4:	7632865a 			; <UNDEFINED> instruction: 0x7632865a
    47e8:	5a4c314e 	bpl	1310d28 <_Min_Stack_Size+0x1310b28>
    47ec:	67763e76 			; <UNDEFINED> instruction: 0x67763e76
    47f0:	423d4b77 	eorsmi	r4, sp, #121856	; 0x1dc00
    47f4:	4b4c3f31 	blmi	13144c0 <_Min_Stack_Size+0x13142c0>
    47f8:	67244b3d 			; <UNDEFINED> instruction: 0x67244b3d
    47fc:	4b244b3d 	blmi	9174f8 <_Min_Stack_Size+0x9172f8>
    4800:	76274b3d 			; <UNDEFINED> instruction: 0x76274b3d
    4804:	4b3d4b4b 	blmi	f57538 <_Min_Stack_Size+0xf57338>
    4808:	4b3d6723 	blmi	f5e49c <_Min_Stack_Size+0xf5e29c>
    480c:	3d686723 	stclcc	7, cr6, [r8, #-140]!	; 0xffffff74
    4810:	753d244b 	ldrvc	r2, [sp, #-1099]!	; 0xfffffbb5
    4814:	4b3d759f 	blmi	f61e98 <_Min_Stack_Size+0xf61c98>
    4818:	59597722 	ldmdbpl	r9, {r1, r5, r8, r9, sl, ip, sp, lr}^
    481c:	6731223e 			; <UNDEFINED> instruction: 0x6731223e
    4820:	4c403d3d 	mcrrmi	13, 3, r3, r0, cr13
    4824:	4267234b 	rsbmi	r2, r7, #738197505	; 0x2c000001
    4828:	01040200 	mrseq	r0, R12_usr
    482c:	0200c806 	andeq	ip, r0, #393216	; 0x60000
    4830:	003c0204 	eorseq	r0, ip, r4, lsl #4
    4834:	20040402 	andcs	r0, r4, r2, lsl #8
    4838:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    483c:	02002f06 	andeq	r2, r0, #6, 30
    4840:	00830404 	addeq	r0, r3, r4, lsl #8
    4844:	06010402 	streq	r0, [r1], -r2, lsl #8
    4848:	3d9f0658 	ldccc	6, cr0, [pc, #352]	; 49b0 <_Min_Stack_Size+0x47b0>
    484c:	03746303 	cmneq	r4, #201326592	; 0xc000000
    4850:	59597421 	ldmdbpl	r9, {r0, r5, sl, ip, sp, lr}^
    4854:	01003b02 	tsteq	r0, r2, lsl #22
    4858:	02050001 	andeq	r0, r5, #1
    485c:	0800759c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
    4860:	0104a403 	tsteq	r4, r3, lsl #8
    4864:	4b752f4b 	blmi	1d50598 <_Min_Stack_Size+0x1d50398>
    4868:	004c757c 	subeq	r7, ip, ip, ror r5
    486c:	06010402 	streq	r0, [r1], -r2, lsl #8
    4870:	3d3d063c 	ldccc	6, cr0, [sp, #-240]!	; 0xffffff10
    4874:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    4878:	76313e4c 	ldrtvc	r3, [r1], -ip, asr #28
    487c:	1202765a 	andne	r7, r2, #94371840	; 0x5a00000
    4880:	00010100 	andeq	r0, r1, r0, lsl #2
    4884:	76680205 	strbtvc	r0, [r8], -r5, lsl #4
    4888:	ca030800 	bgt	c6890 <_Min_Stack_Size+0xc6690>
    488c:	02000104 	andeq	r0, r0, #4, 2
    4890:	004c0104 	subeq	r0, ip, r4, lsl #2
    4894:	75010402 	strvc	r0, [r1, #-1026]	; 0xfffffbfe
    4898:	01040200 	mrseq	r0, R12_usr
    489c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    48a0:	02005901 	andeq	r5, r0, #16384	; 0x4000
    48a4:	004b0104 	subeq	r0, fp, r4, lsl #2
    48a8:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    48ac:	01040200 	mrseq	r0, R12_usr
    48b0:	00070259 	andeq	r0, r7, r9, asr r2
    48b4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    48b8:	0076b402 	rsbseq	fp, r6, r2, lsl #8
    48bc:	04d60308 	ldrbeq	r0, [r6], #776	; 0x308
    48c0:	03020401 	movweq	r0, #9217	; 0x2401
    48c4:	04587cec 	ldrbeq	r7, [r8], #-3308	; 0xfffff314
    48c8:	04020001 	streq	r0, [r2], #-1
    48cc:	039d0301 	orrseq	r0, sp, #67108864	; 0x4000000
    48d0:	00010290 	muleq	r1, r0, r2
    48d4:	03400101 	movteq	r0, #257	; 0x101
    48d8:	00020000 	andeq	r0, r2, r0
    48dc:	000000d2 	ldrdeq	r0, [r0], -r2
    48e0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    48e4:	0101000d 	tsteq	r1, sp
    48e8:	00000101 	andeq	r0, r0, r1, lsl #2
    48ec:	00000100 	andeq	r0, r0, r0, lsl #2
    48f0:	6f682f01 	svcvs	0x00682f01
    48f4:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    48f8:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    48fc:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    4900:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    4904:	544f492d 	strbpl	r4, [pc], #-2349	; 490c <_Min_Stack_Size+0x470c>
    4908:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    490c:	74716d65 	ldrbtvc	r6, [r1], #-3429	; 0xfffff29b
    4910:	72732f74 	rsbsvc	r2, r3, #116, 30	; 0x1d0
    4914:	752f0063 	strvc	r0, [pc, #-99]!	; 48b9 <_Min_Stack_Size+0x46b9>
    4918:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    491c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4920:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    4924:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4928:	616d2f62 	cmnvs	sp, r2, ror #30
    492c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    4930:	752f0065 	strvc	r0, [pc, #-101]!	; 48d3 <_Min_Stack_Size+0x46d3>
    4934:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    4938:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    493c:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    4940:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4944:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4948:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    494c:	2f656d6f 	svccs	0x00656d6f
    4950:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    4954:	542f7673 	strtpl	r7, [pc], #-1651	; 495c <_Min_Stack_Size+0x475c>
    4958:	41534144 	cmpmi	r3, r4, asr #2
    495c:	4f492d54 	svcmi	0x00492d54
    4960:	696c2f54 	stmdbvs	ip!, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4964:	716d6562 	cmnvc	sp, r2, ror #10
    4968:	692f7474 	stmdbvs	pc!, {r2, r4, r5, r6, sl, ip, sp, lr}	; <UNPREDICTABLE>
    496c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4970:	00006564 	andeq	r6, r0, r4, ror #10
    4974:	6562696c 	strbvs	r6, [r2, #-2412]!	; 0xfffff694
    4978:	7474716d 	ldrbtvc	r7, [r4], #-365	; 0xfffffe93
    497c:	0100632e 	tsteq	r0, lr, lsr #6
    4980:	645f0000 	ldrbvs	r0, [pc], #-0	; 4988 <_Min_Stack_Size+0x4788>
    4984:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    4988:	745f746c 	ldrbvc	r7, [pc], #-1132	; 4990 <_Min_Stack_Size+0x4790>
    498c:	73657079 	cmnvc	r5, #121	; 0x79
    4990:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4994:	735f0000 	cmpvc	pc, #0
    4998:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    499c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    49a0:	6c000003 	stcvs	0, cr0, [r0], {3}
    49a4:	6d656269 	sfmvs	f6, 2, [r5, #-420]!	; 0xfffffe5c
    49a8:	2e747471 	mrccs	4, 3, r7, cr4, cr1, {3}
    49ac:	00040068 	andeq	r0, r4, r8, rrx
    49b0:	05000000 	streq	r0, [r0, #-0]
    49b4:	0076d402 	rsbseq	sp, r6, r2, lsl #8
    49b8:	012c0308 			; <UNDEFINED> instruction: 0x012c0308
    49bc:	3d67324b 	sfmcc	f3, 2, [r7, #-300]!	; 0xfffffed4
    49c0:	40673d67 	rsbmi	r3, r7, r7, ror #26
    49c4:	00050221 	andeq	r0, r5, r1, lsr #4
    49c8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    49cc:	00772402 	rsbseq	r2, r7, r2, lsl #8
    49d0:	013d0308 	teqeq	sp, r8, lsl #6
    49d4:	00332f4b 	eorseq	r2, r3, fp, asr #30
    49d8:	3f010402 	svccc	0x00010402
    49dc:	01040200 	mrseq	r0, R12_usr
    49e0:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    49e4:	0200bb01 	andeq	fp, r0, #1024	; 0x400
    49e8:	003d0104 	eorseq	r0, sp, r4, lsl #2
    49ec:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    49f0:	0502214c 	streq	r2, [r2, #-332]	; 0xfffffeb4
    49f4:	00010100 	andeq	r0, r1, r0, lsl #2
    49f8:	77780205 	ldrbvc	r0, [r8, -r5, lsl #4]!
    49fc:	d0030800 	andle	r0, r3, r0, lsl #16
    4a00:	594b0100 	stmdbpl	fp, {r8}^
    4a04:	02003275 	andeq	r3, r0, #1342177287	; 0x50000007
    4a08:	3c060104 	stfccs	f0, [r6], {4}
    4a0c:	3f3d3d06 	svccc	0x003d3d06
    4a10:	67832f59 			; <UNDEFINED> instruction: 0x67832f59
    4a14:	8359a375 	cmphi	r9, #-738197503	; 0xd4000001
    4a18:	04022193 	streq	r2, [r2], #-403	; 0xfffffe6d
    4a1c:	00010100 	andeq	r0, r1, r0, lsl #2
    4a20:	00000205 	andeq	r0, r0, r5, lsl #4
    4a24:	ee030000 	cdp	0, 0, cr0, cr3, cr0, {0}
    4a28:	865a0100 	ldrbhi	r0, [sl], -r0, lsl #2
    4a2c:	01040200 	mrseq	r0, R12_usr
    4a30:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
    4a34:	04022169 	streq	r2, [r2], #-361	; 0xfffffe97
    4a38:	00010100 	andeq	r0, r1, r0, lsl #2
    4a3c:	00000205 	andeq	r0, r0, r5, lsl #4
    4a40:	fb030000 	blx	c4a4a <_Min_Stack_Size+0xc484a>
    4a44:	32590100 	subscc	r0, r9, #0, 2
    4a48:	92835968 	addls	r5, r3, #104, 18	; 0x1a0000
    4a4c:	02213e76 	eoreq	r3, r1, #1888	; 0x760
    4a50:	01010004 	tsteq	r1, r4
    4a54:	38020500 	stmdacc	r2, {r8, sl}
    4a58:	03080078 	movweq	r0, #32888	; 0x8078
    4a5c:	5d01018d 	stfpls	f0, [r1, #-564]	; 0xfffffdcc
    4a60:	04020084 	streq	r0, [r2], #-132	; 0xffffff7c
    4a64:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    4a68:	0221693d 	eoreq	r6, r1, #999424	; 0xf4000
    4a6c:	01010004 	tsteq	r1, r4
    4a70:	74020500 	strvc	r0, [r2], #-1280	; 0xfffffb00
    4a74:	03080078 	movweq	r0, #32888	; 0x8078
    4a78:	5901019b 	stmdbpl	r1, {r0, r1, r3, r4, r7, r8}
    4a7c:	2f596932 	svccs	0x00596932
    4a80:	3f756883 	svccc	0x00756883
    4a84:	213ef45f 	teqcs	lr, pc, asr r4	; <UNPREDICTABLE>
    4a88:	01000402 	tsteq	r0, r2, lsl #8
    4a8c:	02050001 	andeq	r0, r5, #1
    4a90:	08007908 	stmdaeq	r0, {r3, r8, fp, ip, sp, lr}
    4a94:	0101ba03 	tsteq	r1, r3, lsl #20
    4a98:	754c595a 	strbvc	r5, [ip, #-2394]	; 0xfffff6a6
    4a9c:	843d7575 	ldrthi	r7, [sp], #-1397	; 0xfffffa8b
    4aa0:	07024b77 	smlsdxeq	r2, r7, fp, r4
    4aa4:	00010100 	andeq	r0, r1, r0, lsl #2
    4aa8:	79880205 	stmibvc	r8, {r0, r2, r9}
    4aac:	cb030800 	blgt	c6ab4 <_Min_Stack_Size+0xc68b4>
    4ab0:	00670101 	rsbeq	r0, r7, r1, lsl #2
    4ab4:	06010402 	streq	r0, [r1], -r2, lsl #8
    4ab8:	754b063c 	strbvc	r0, [fp, #-1596]	; 0xfffff9c4
    4abc:	01040200 	mrseq	r0, R12_usr
    4ac0:	4b063c06 	blmi	193ae0 <_Min_Stack_Size+0x1938e0>
    4ac4:	00040275 	andeq	r0, r4, r5, ror r2
    4ac8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4acc:	0079d402 	rsbseq	sp, r9, r2, lsl #8
    4ad0:	01d20308 	bicseq	r0, r2, r8, lsl #6
    4ad4:	024b6701 	subeq	r6, fp, #262144	; 0x40000
    4ad8:	01010005 	tsteq	r1, r5
    4adc:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    4ae0:	03080079 	movweq	r0, #32889	; 0x8079
    4ae4:	580101d7 	stmdapl	r1, {r0, r1, r2, r4, r6, r7, r8}
    4ae8:	75753e2f 	ldrbvc	r3, [r5, #-3631]!	; 0xfffff1d1
    4aec:	673d3f75 			; <UNDEFINED> instruction: 0x673d3f75
    4af0:	68673d68 	stmdavs	r7!, {r3, r5, r6, r8, sl, fp, ip, sp}^
    4af4:	4e086a59 			; <UNDEFINED> instruction: 0x4e086a59
    4af8:	03384e38 	teqeq	r8, #56, 28	; 0x380
    4afc:	593d2e09 	ldmdbpl	sp!, {r0, r3, r9, sl, fp, sp}
    4b00:	23025a4b 	movwcs	r5, #10827	; 0x2a4b
    4b04:	5b4b3f15 	blpl	12d4760 <_Min_Stack_Size+0x12d4560>
    4b08:	2f697675 	svccs	0x00697675
    4b0c:	6767f308 	strbvs	pc, [r7, -r8, lsl #6]!	; <UNPREDICTABLE>
    4b10:	9f3e9f59 	svcls	0x003e9f59
    4b14:	3e4c9183 	sqtcc<illegal precision>	f1, f3
    4b18:	4d91839f 	ldcmi	3, cr8, [r1, #636]	; 0x27c
    4b1c:	91839f3e 	orrls	r9, r3, lr, lsr pc
    4b20:	3d3f9f4e 	ldccc	15, cr9, [pc, #-312]!	; 49f0 <_Min_Stack_Size+0x47f0>
    4b24:	01000502 	tsteq	r0, r2, lsl #10
    4b28:	02050001 	andeq	r0, r5, #1
    4b2c:	00000000 	andeq	r0, r0, r0
    4b30:	0102b003 	tsteq	r2, r3
    4b34:	3fad504b 	svccc	0x00ad504b
    4b38:	01040200 	mrseq	r0, R12_usr
    4b3c:	00040221 	andeq	r0, r4, r1, lsr #4
    4b40:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4b44:	007ce802 	rsbseq	lr, ip, r2, lsl #16
    4b48:	02be0308 	adcseq	r0, lr, #8, 6	; 0x20000000
    4b4c:	ad504b01 	vldrge	d20, [r0, #-4]
    4b50:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
    4b54:	04022101 	streq	r2, [r2], #-257	; 0xfffffeff
    4b58:	00010100 	andeq	r0, r1, r0, lsl #2
    4b5c:	00000205 	andeq	r0, r0, r5, lsl #4
    4b60:	cc030000 	stcgt	0, cr0, [r3], {-0}
    4b64:	bb750102 	bllt	1d44f74 <_Min_Stack_Size+0x1d44d74>
    4b68:	01000402 	tsteq	r0, r2, lsl #8
    4b6c:	02050001 	andeq	r0, r5, #1
    4b70:	00000000 	andeq	r0, r0, r0
    4b74:	0102d003 	tsteq	r2, r3
    4b78:	68672f90 	stmdavs	r7!, {r4, r7, r8, r9, sl, fp, sp}^
    4b7c:	3d4b3d3d 	stclcc	13, cr3, [fp, #-244]	; 0xffffff0c
    4b80:	403d4b4c 	eorsmi	r4, sp, ip, asr #22
    4b84:	67132302 	ldrvs	r2, [r3, -r2, lsl #6]
    4b88:	4b835975 	blmi	fe0db164 <BootRAM+0xd04b905>
    4b8c:	684b91ad 	stmdavs	fp, {r0, r2, r3, r5, r7, r8, ip, pc}^
    4b90:	4b753d89 	blmi	1d541bc <_Min_Stack_Size+0x1d53fbc>
    4b94:	1524025a 	strne	r0, [r4, #-602]!	; 0xfffffda6
    4b98:	4b774b75 	blmi	1dd7974 <_Min_Stack_Size+0x1dd7774>
    4b9c:	77768369 	ldrbvc	r8, [r6, -r9, ror #6]!
    4ba0:	67132702 	ldrvs	r2, [r3, -r2, lsl #14]
    4ba4:	9faf8367 	svcls	0x00af8367
    4ba8:	05022f3f 	streq	r2, [r2, #-3903]	; 0xfffff0c1
    4bac:	00010100 	andeq	r0, r1, r0, lsl #2
    4bb0:	00000205 	andeq	r0, r0, r5, lsl #4
    4bb4:	97030000 	strls	r0, [r3, -r0]
    4bb8:	c2670103 	rsbgt	r0, r7, #-1073741824	; 0xc0000000
    4bbc:	02003fad 	andeq	r3, r0, #692	; 0x2b4
    4bc0:	02210104 	eoreq	r0, r1, #4, 2
    4bc4:	01010004 	tsteq	r1, r4
    4bc8:	20020500 	andcs	r0, r2, r0, lsl #10
    4bcc:	0308007d 	movweq	r0, #32893	; 0x807d
    4bd0:	740103a7 	strvc	r0, [r1], #-935	; 0xfffffc59
    4bd4:	67835c2f 	strvs	r5, [r3, pc, lsr #24]
    4bd8:	02855a3d 	addeq	r5, r5, #249856	; 0x3d000
    4bdc:	67671323 	strbvs	r1, [r7, -r3, lsr #6]!
    4be0:	086b774b 	stmdaeq	fp!, {r0, r1, r3, r6, r8, r9, sl, ip, sp, lr}^
    4be4:	756775f3 	strbvc	r7, [r7, #-1523]!	; 0xfffffa0d
    4be8:	3d3fd777 	ldccc	7, cr13, [pc, #-476]!	; 4a14 <_Min_Stack_Size+0x4814>
    4bec:	01000502 	tsteq	r0, r2, lsl #10
    4bf0:	02050001 	andeq	r0, r5, #1
    4bf4:	00000000 	andeq	r0, r0, r0
    4bf8:	0103ce03 	tsteq	r3, r3, lsl #28
    4bfc:	835c2f74 	cmphi	ip, #116, 30	; 0x1d0
    4c00:	855a3d67 	ldrbhi	r3, [sl, #-3431]	; 0xfffff299
    4c04:	67132302 	ldrvs	r2, [r3, -r2, lsl #6]
    4c08:	6b774b67 	blvs	1dd79ac <_Min_Stack_Size+0x1dd77ac>
    4c0c:	6775f308 	ldrbvs	pc, [r5, -r8, lsl #6]!	; <UNPREDICTABLE>
    4c10:	3fd77775 	svccc	0x00d77775
    4c14:	0005023d 	andeq	r0, r5, sp, lsr r2
    4c18:	01830101 	orreq	r0, r3, r1, lsl #2
    4c1c:	00020000 	andeq	r0, r2, r0
    4c20:	000000f9 	strdeq	r0, [r0], -r9
    4c24:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4c28:	0101000d 	tsteq	r1, sp
    4c2c:	00000101 	andeq	r0, r0, r1, lsl #2
    4c30:	00000100 	andeq	r0, r0, r0, lsl #2
    4c34:	6f682f01 	svcvs	0x00682f01
    4c38:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    4c3c:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    4c40:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    4c44:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    4c48:	544f492d 	strbpl	r4, [pc], #-2349	; 4c50 <_Min_Stack_Size+0x4a50>
    4c4c:	00534f2f 	subseq	r4, r3, pc, lsr #30
    4c50:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4c54:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4c58:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4c5c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4c60:	2f62696c 	svccs	0x0062696c
    4c64:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4c68:	00656e69 	rsbeq	r6, r5, r9, ror #28
    4c6c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4c70:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4c74:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4c78:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4c7c:	2f62696c 	svccs	0x0062696c
    4c80:	00737973 	rsbseq	r7, r3, r3, ror r9
    4c84:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4bd0 <_Min_Stack_Size+0x49d0>
    4c88:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    4c8c:	76737572 			; <UNDEFINED> instruction: 0x76737572
    4c90:	4144542f 	cmpmi	r4, pc, lsr #8
    4c94:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    4c98:	2f544f49 	svccs	0x00544f49
    4c9c:	702f534f 	eorvc	r5, pc, pc, asr #6
    4ca0:	6174726f 	cmnvs	r4, pc, ror #4
    4ca4:	2f656c62 	svccs	0x00656c62
    4ca8:	2f434347 	svccs	0x00434347
    4cac:	5f4d5241 	svcpl	0x004d5241
    4cb0:	00334d43 	eorseq	r4, r3, r3, asr #26
    4cb4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4c00 <_Min_Stack_Size+0x4a00>
    4cb8:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    4cbc:	76737572 			; <UNDEFINED> instruction: 0x76737572
    4cc0:	4144542f 	cmpmi	r4, pc, lsr #8
    4cc4:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    4cc8:	2f544f49 	svccs	0x00544f49
    4ccc:	692f534f 	stmdbvs	pc!, {r0, r1, r2, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    4cd0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4cd4:	00006564 	andeq	r6, r0, r4, ror #10
    4cd8:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
    4cdc:	0100632e 	tsteq	r0, lr, lsr #6
    4ce0:	645f0000 	ldrbvs	r0, [pc], #-0	; 4ce8 <_Min_Stack_Size+0x4ae8>
    4ce4:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    4ce8:	745f746c 	ldrbvc	r7, [pc], #-1132	; 4cf0 <_Min_Stack_Size+0x4af0>
    4cec:	73657079 	cmnvc	r5, #121	; 0x79
    4cf0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4cf4:	735f0000 	cmpvc	pc, #0
    4cf8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4cfc:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4d00:	70000003 	andvc	r0, r0, r3
    4d04:	6d74726f 	lfmvs	f7, 2, [r4, #-444]!	; 0xfffffe44
    4d08:	6f726361 	svcvs	0x00726361
    4d0c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4d10:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    4d14:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    4d18:	00000500 	andeq	r0, r0, r0, lsl #10
    4d1c:	02050000 	andeq	r0, r5, #0
    4d20:	08007ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, sp, lr}
    4d24:	4e012503 	cfsh32mi	mvfx2, mvfx1, #3
    4d28:	5a594e5c 	bpl	16586a0 <_Min_Stack_Size+0x16584a0>
    4d2c:	00050242 	andeq	r0, r5, r2, asr #4
    4d30:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4d34:	007ee402 	rsbseq	lr, lr, r2, lsl #8
    4d38:	013e0308 	teqeq	lr, r8, lsl #6
    4d3c:	0502424c 	streq	r4, [r2, #-588]	; 0xfffffdb4
    4d40:	00010100 	andeq	r0, r1, r0, lsl #2
    4d44:	7efc0205 	cdpvc	2, 15, cr0, cr12, cr5, {0}
    4d48:	ca030800 	bgt	c6d50 <_Min_Stack_Size+0xc6b50>
    4d4c:	03590100 	cmpeq	r9, #0, 2
    4d50:	4f3d3c0b 	svcmi	0x003d3c0b
    4d54:	593e3f4b 	ldmdbpl	lr!, {r0, r1, r3, r6, r8, r9, sl, fp, ip, sp}
    4d58:	01000502 	tsteq	r0, r2, lsl #10
    4d5c:	02050001 	andeq	r0, r5, #1
    4d60:	08007f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, ip, sp, lr}
    4d64:	0100e703 	tsteq	r0, r3, lsl #14
    4d68:	3c10035a 	ldccc	3, cr0, [r0], {90}	; 0x5a
    4d6c:	4a1a034c 	bmi	685aa4 <_Min_Stack_Size+0x6858a4>
    4d70:	03040200 	movweq	r0, #16896	; 0x4200
    4d74:	02004a06 	andeq	r4, r0, #24576	; 0x6000
    4d78:	063c0104 	ldrteq	r0, [ip], -r4, lsl #2
    4d7c:	3d4b4b6d 	vstrcc	d20, [fp, #-436]	; 0xfffffe4c
    4d80:	02593e40 	subseq	r3, r9, #64, 28	; 0x400
    4d84:	01010005 	tsteq	r1, r5
    4d88:	b4020500 	strlt	r0, [r2], #-1280	; 0xfffffb00
    4d8c:	0308007f 	movweq	r0, #32895	; 0x807f
    4d90:	4d0101aa 	stfmis	f0, [r1, #-680]	; 0xfffffd58
    4d94:	5a5e593e 	bpl	179b294 <_Min_Stack_Size+0x179b094>
    4d98:	2f5a3d51 	svccs	0x005a3d51
    4d9c:	01000502 	tsteq	r0, r2, lsl #10
    4da0:	00058001 	andeq	r8, r5, r1
    4da4:	44000200 	strmi	r0, [r0], #-512	; 0xfffffe00
    4da8:	02000001 	andeq	r0, r0, #1
    4dac:	0d0efb01 	vstreq	d15, [lr, #-4]
    4db0:	01010100 	mrseq	r0, (UNDEF: 17)
    4db4:	00000001 	andeq	r0, r0, r1
    4db8:	01000001 	tsteq	r0, r1
    4dbc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4d08 <_Min_Stack_Size+0x4b08>
    4dc0:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    4dc4:	76737572 			; <UNDEFINED> instruction: 0x76737572
    4dc8:	4144542f 	cmpmi	r4, pc, lsr #8
    4dcc:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    4dd0:	2f544f49 	svccs	0x00544f49
    4dd4:	2f00534f 	svccs	0x0000534f
    4dd8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4ddc:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    4de0:	2f767375 	svccs	0x00767375
    4de4:	53414454 	movtpl	r4, #5204	; 0x1454
    4de8:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    4dec:	4f2f544f 	svcmi	0x002f544f
    4df0:	6f702f53 	svcvs	0x00702f53
    4df4:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
    4df8:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
    4dfc:	412f4343 			; <UNDEFINED> instruction: 0x412f4343
    4e00:	435f4d52 	cmpmi	pc, #5248	; 0x1480
    4e04:	2f00334d 	svccs	0x0000334d
    4e08:	2f727375 	svccs	0x00727375
    4e0c:	2f62696c 	svccs	0x0062696c
    4e10:	2f636367 	svccs	0x00636367
    4e14:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4e18:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4e1c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4e20:	2e352f69 	cdpcs	15, 3, cr2, cr5, cr9, {3}
    4e24:	2f312e34 	svccs	0x00312e34
    4e28:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4e2c:	00656475 	rsbeq	r6, r5, r5, ror r4
    4e30:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4e34:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4e38:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4e3c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4e40:	2f62696c 	svccs	0x0062696c
    4e44:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4e48:	00656e69 	rsbeq	r6, r5, r9, ror #28
    4e4c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4e50:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4e54:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4e58:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4e5c:	2f62696c 	svccs	0x0062696c
    4e60:	00737973 	rsbseq	r7, r3, r3, ror r9
    4e64:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4db0 <_Min_Stack_Size+0x4bb0>
    4e68:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    4e6c:	76737572 			; <UNDEFINED> instruction: 0x76737572
    4e70:	4144542f 	cmpmi	r4, pc, lsr #8
    4e74:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    4e78:	2f544f49 	svccs	0x00544f49
    4e7c:	692f534f 	stmdbvs	pc!, {r0, r1, r2, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    4e80:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4e84:	00006564 	andeq	r6, r0, r4, ror #10
    4e88:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
    4e8c:	00632e65 	rsbeq	r2, r3, r5, ror #28
    4e90:	70000001 	andvc	r0, r0, r1
    4e94:	6d74726f 	lfmvs	f7, 2, [r4, #-444]!	; 0xfffffe44
    4e98:	6f726361 	svcvs	0x00726361
    4e9c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4ea0:	74730000 	ldrbtvc	r0, [r3], #-0
    4ea4:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    4ea8:	0300682e 	movweq	r6, #2094	; 0x82e
    4eac:	645f0000 	ldrbvs	r0, [pc], #-0	; 4eb4 <_Min_Stack_Size+0x4cb4>
    4eb0:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    4eb4:	745f746c 	ldrbvc	r7, [pc], #-1132	; 4ebc <_Min_Stack_Size+0x4cbc>
    4eb8:	73657079 	cmnvc	r5, #121	; 0x79
    4ebc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4ec0:	735f0000 	cmpvc	pc, #0
    4ec4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4ec8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4ecc:	6c000005 	stcvs	0, cr0, [r0], {5}
    4ed0:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
    4ed4:	00060068 	andeq	r0, r6, r8, rrx
    4ed8:	73617400 	cmnvc	r1, #0, 8
    4edc:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    4ee0:	71000006 	tstvc	r0, r6
    4ee4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    4ee8:	0600682e 	streq	r6, [r0], -lr, lsr #16
    4eec:	00000000 	andeq	r0, r0, r0
    4ef0:	80080205 	andhi	r0, r8, r5, lsl #4
    4ef4:	ff030800 	vcmla.f16	d0, d3, d0[0], #0
    4ef8:	32590101 	subscc	r0, r9, #1073741824	; 0x40000000
    4efc:	4b3dad30 	blmi	f703c4 <_Min_Stack_Size+0xf701c4>
    4f00:	434c4bbb 	movtmi	r4, #52155	; 0xcbbb
    4f04:	0f03844c 	svceq	0x0003844c
    4f08:	325b5990 	subscc	r5, fp, #144, 18	; 0x240000
    4f0c:	00060221 	andeq	r0, r6, r1, lsr #4
    4f10:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    4f14:	0080bc02 	addeq	fp, r0, r2, lsl #24
    4f18:	02f00308 	rscseq	r0, r0, #8, 6	; 0x20000000
    4f1c:	423f7b01 	eorsmi	r7, pc, #1024	; 0x400
    4f20:	68580c03 	ldmdavs	r8, {r0, r1, sl, fp}^
    4f24:	0b032f40 	bleq	d0c2c <_Min_Stack_Size+0xd0a2c>
    4f28:	0221983c 	eoreq	r9, r1, #60, 16	; 0x3c0000
    4f2c:	01010004 	tsteq	r1, r4
    4f30:	18020500 	stmdane	r2, {r8, sl}
    4f34:	03080081 	movweq	r0, #32897	; 0x8081
    4f38:	790103ad 	stmdbvc	r1, {r0, r2, r3, r5, r7, r8, r9}
    4f3c:	3d414f42 	stclcc	15, cr4, [r1, #-264]	; 0xfffffef8
    4f40:	4a0f033d 	bmi	3c5c3c <_Min_Stack_Size+0x3c5a3c>
    4f44:	01000402 	tsteq	r0, r2, lsl #8
    4f48:	02050001 	andeq	r0, r5, #1
    4f4c:	08008158 	stmdaeq	r0, {r3, r4, r6, r8, pc}
    4f50:	0103d903 	tsteq	r3, r3, lsl #18
    4f54:	3f3d424b 	svccc	0x003d424b
    4f58:	04026c41 	streq	r6, [r2], #-3137	; 0xfffff3bf
    4f5c:	00010100 	andeq	r0, r1, r0, lsl #2
    4f60:	818c0205 	orrhi	r0, ip, r5, lsl #4
    4f64:	f7030800 			; <UNDEFINED> instruction: 0xf7030800
    4f68:	4c5a0103 	ldfmie	f0, [sl], {3}
    4f6c:	02213e75 	eoreq	r3, r1, #1872	; 0x750
    4f70:	01010004 	tsteq	r1, r4
    4f74:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
    4f78:	03080081 	movweq	r0, #32897	; 0x8081
    4f7c:	750105eb 	strvc	r0, [r1, #-1515]	; 0xfffffa15
    4f80:	2e110330 	mrccs	3, 0, r0, cr1, cr0, {1}
    4f84:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
    4f88:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    4f8c:	3c00c203 	sfmcc	f4, 1, [r0], {3}
    4f90:	97884c6a 	strls	r4, [r8, sl, ror #24]
    4f94:	82090342 	andhi	r0, r9, #134217729	; 0x8000001
    4f98:	3340322f 	movtcc	r3, #559	; 0x22f
    4f9c:	03594030 	cmpeq	r9, #48	; 0x30
    4fa0:	2f332e09 	svccs	0x00332e09
    4fa4:	01040200 	mrseq	r0, R12_usr
    4fa8:	02009006 	andeq	r9, r0, #6
    4fac:	004a0304 	subeq	r0, sl, r4, lsl #6
    4fb0:	74040402 	strvc	r0, [r4], #-1026	; 0xfffffbfe
    4fb4:	06040200 	streq	r0, [r4], -r0, lsl #4
    4fb8:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    4fbc:	a0310606 	eorsge	r0, r1, r6, lsl #12
    4fc0:	68437b69 	stmdavs	r3, {r0, r3, r5, r6, r8, r9, fp, ip, sp, lr}^
    4fc4:	3d423d96 	stclcc	13, cr3, [r2, #-600]	; 0xfffffda8
    4fc8:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    4fcc:	06022303 	streq	r2, [r2], -r3, lsl #6
    4fd0:	00010100 	andeq	r0, r1, r0, lsl #2
    4fd4:	00000205 	andeq	r0, r0, r5, lsl #4
    4fd8:	bd030000 	stclt	0, cr0, [r3, #-0]
    4fdc:	04770107 	ldrbteq	r0, [r7], #-263	; 0xfffffef9
    4fe0:	7a920302 	bvc	fe485bf0 <BootRAM+0xd3f6391>
    4fe4:	ba0c032e 	blt	305ca4 <_Min_Stack_Size+0x305aa4>
    4fe8:	fd030104 	stc2	1, cr0, [r3, #-16]
    4fec:	00222005 	eoreq	r2, r2, r5
    4ff0:	06010402 	streq	r0, [r1], -r2, lsl #8
    4ff4:	033e0666 	teqeq	lr, #106954752	; 0x6600000
    4ff8:	035c4a09 	cmpeq	ip, #36864	; 0x9000
    4ffc:	864c5837 			; <UNDEFINED> instruction: 0x864c5837
    5000:	4a17033e 	bmi	5c5d00 <_Min_Stack_Size+0x5c5b00>
    5004:	7f990377 	svcvc	0x00990377
    5008:	00ec032e 	rsceq	r0, ip, lr, lsr #6
    500c:	03020420 	movweq	r0, #9248	; 0x2420
    5010:	044a799a 	strbeq	r7, [sl], #-2458	; 0xfffff666
    5014:	06eb0301 	strbteq	r0, [fp], r1, lsl #6
    5018:	0402213c 	streq	r2, [r2], #-316	; 0xfffffec4
    501c:	00010100 	andeq	r0, r1, r0, lsl #2
    5020:	00000205 	andeq	r0, r0, r5, lsl #4
    5024:	d4030000 	strle	r0, [r3], #-0
    5028:	045b0108 	ldrbeq	r0, [fp], #-264	; 0xfffffef8
    502c:	78fb0302 	ldmvc	fp!, {r1, r8, r9}^
    5030:	ba0c032e 	blt	305cf0 <_Min_Stack_Size+0x305af0>
    5034:	9c030104 	stflss	f0, [r3], {4}
    5038:	41222007 			; <UNDEFINED> instruction: 0x41222007
    503c:	4a0a035a 	bmi	285dac <_Min_Stack_Size+0x285bac>
    5040:	5837034e 	ldmdapl	r7!, {r1, r2, r3, r6, r8, r9}
    5044:	033e864c 	teqeq	lr, #76, 12	; 0x4c00000
    5048:	41774a17 	cmnmi	r7, r7, lsl sl
    504c:	f5030204 			; <UNDEFINED> instruction: 0xf5030204
    5050:	01044a77 	tsteq	r4, r7, ror sl
    5054:	3c089003 	stccc	0, cr9, [r8], {3}
    5058:	00040221 	andeq	r0, r4, r1, lsr #4
    505c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5060:	00000002 	andeq	r0, r0, r2
    5064:	09f90300 	ldmibeq	r9!, {r8, r9}^
    5068:	03306701 	teqeq	r0, #262144	; 0x40000
    506c:	40302e16 	eorsmi	r2, r0, r6, lsl lr
    5070:	4c4f4c3f 	mcrrmi	12, 3, r4, pc, cr15
    5074:	820c0384 	andhi	r0, ip, #132, 6	; 0x10000002
    5078:	3040322f 	subcc	r3, r0, pc, lsr #4
    507c:	03594030 	cmpeq	r9, #48	; 0x30
    5080:	2f332e09 	svccs	0x00332e09
    5084:	01040200 	mrseq	r0, R12_usr
    5088:	02009006 	andeq	r9, r0, #6
    508c:	004a0304 	subeq	r0, sl, r4, lsl #6
    5090:	74040402 	strvc	r0, [r4], #-1026	; 0xfffffbfe
    5094:	06040200 	streq	r0, [r4], -r0, lsl #4
    5098:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    509c:	a2310606 	eorsge	r0, r1, #6291456	; 0x600000
    50a0:	5a3d7569 	bpl	f6264c <_Min_Stack_Size+0xf6244c>
    50a4:	3d900b03 	vldrcc	d0, [r0, #12]
    50a8:	77303d43 	ldrvc	r3, [r0, -r3, asr #26]!
    50ac:	03040200 	movweq	r0, #16896	; 0x4200
    50b0:	00060228 	andeq	r0, r6, r8, lsr #4
    50b4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    50b8:	00831002 	addeq	r1, r3, r2
    50bc:	0b860308 	bleq	fe185ce4 <BootRAM+0xd0f6485>
    50c0:	31305901 	teqcc	r0, r1, lsl #18
    50c4:	322e1703 	eorcc	r1, lr, #786432	; 0xc0000
    50c8:	4e4e4240 	cdpmi	2, 4, cr4, cr14, cr0, {2}
    50cc:	4c580b03 	mrrcmi	11, 0, r0, r8, cr3
    50d0:	820c0384 	andhi	r0, ip, #132, 6	; 0x10000002
    50d4:	0d03322f 	sfmeq	f3, 4, [r3, #-188]	; 0xffffff44
    50d8:	4030303c 	eorsmi	r3, r0, ip, lsr r0
    50dc:	2e090359 	mcrcs	3, 0, r0, cr9, cr9, {2}
    50e0:	02002f33 	andeq	r2, r0, #51, 30	; 0xcc
    50e4:	90060104 	andls	r0, r6, r4, lsl #2
    50e8:	03040200 	movweq	r0, #16896	; 0x4200
    50ec:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    50f0:	02007404 	andeq	r7, r0, #4, 8	; 0x4000000
    50f4:	004a0604 	subeq	r0, sl, r4, lsl #12
    50f8:	06060402 	streq	r0, [r6], -r2, lsl #8
    50fc:	4c6ca431 	cfstrdmi	mvd10, [ip], #-196	; 0xffffff3c
    5100:	09036830 	stmdbeq	r3, {r4, r5, fp, sp, lr}
    5104:	683d752e 	ldmdavs	sp!, {r1, r2, r3, r5, r8, sl, ip, sp, lr}
    5108:	3d900b03 	vldrcc	d0, [r0, #12]
    510c:	7b343d42 	blvc	d1461c <_Min_Stack_Size+0xd1441c>
    5110:	2e09033e 	mcrcs	3, 0, r0, cr9, cr14, {1}
    5114:	0034684b 	eorseq	r6, r4, fp, asr #16
    5118:	28030402 	stmdacs	r3, {r1, sl}
    511c:	01000602 	tsteq	r0, r2, lsl #12
    5120:	02050001 	andeq	r0, r5, #1
    5124:	00000000 	andeq	r0, r0, r0
    5128:	010ce003 	tsteq	ip, r3
    512c:	16033167 	strne	r3, [r3], -r7, ror #2
    5130:	4140302e 	cmpmi	r0, lr, lsr #32
    5134:	4c404e3e 	mcrrmi	14, 3, r4, r0, cr14
    5138:	820c0385 	andhi	r0, ip, #335544322	; 0x14000002
    513c:	3040322f 	subcc	r3, r0, pc, lsr #4
    5140:	03594130 	cmpeq	r9, #48, 2
    5144:	2f332e09 	svccs	0x00332e09
    5148:	01040200 	mrseq	r0, R12_usr
    514c:	02009006 	andeq	r9, r0, #6
    5150:	004a0304 	subeq	r0, sl, r4, lsl #6
    5154:	74040402 	strvc	r0, [r4], #-1026	; 0xfffffbfe
    5158:	06040200 	streq	r0, [r4], -r0, lsl #4
    515c:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    5160:	a2310606 	eorsge	r0, r1, #6291456	; 0x600000
    5164:	5a3d7569 	bpl	f62710 <_Min_Stack_Size+0xf62510>
    5168:	3d900b03 	vldrcc	d0, [r0, #12]
    516c:	77303d43 	ldrvc	r3, [r0, -r3, asr #26]!
    5170:	03040200 	movweq	r0, #16896	; 0x4200
    5174:	00060228 	andeq	r0, r6, r8, lsr #4
    5178:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    517c:	00000002 	andeq	r0, r0, r2
    5180:	0df50300 	ldcleq	3, cr0, [r5]
    5184:	02046901 	andeq	r6, r4, #16384	; 0x4000
    5188:	2e73da03 	vaddcs.f32	s27, s6, s6
    518c:	04ba0c03 	ldrteq	r0, [sl], #3075	; 0xc03
    5190:	0caf0301 	stceq	3, cr0, [pc], #4	; 519c <_Min_Stack_Size+0x4f9c>
    5194:	3e3f2220 	cdpcc	2, 3, cr2, cr15, cr0, {1}
    5198:	5a504b4e 	bpl	1417ed8 <_Min_Stack_Size+0x1417cd8>
    519c:	033e864c 	teqeq	lr, #76, 12	; 0x4c00000
    51a0:	40774a15 	rsbsmi	r4, r7, r5, lsl sl
    51a4:	9f030204 	svcls	0x00030204
    51a8:	01044a73 	tsteq	r4, r3, ror sl
    51ac:	3c0ce703 	stccc	7, cr14, [ip], {3}
    51b0:	00040221 	andeq	r0, r4, r1, lsr #4
    51b4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    51b8:	00000002 	andeq	r0, r0, r2
    51bc:	0ed00300 	cdpeq	3, 13, cr0, cr0, cr0, {0}
    51c0:	02045c01 	andeq	r5, r4, #256	; 0x100
    51c4:	2e72fe03 	cdpcs	14, 7, cr15, cr2, cr3, {0}
    51c8:	04ba0c03 	ldrteq	r0, [sl], #3075	; 0xc03
    51cc:	0d8c0301 	stceq	3, cr0, [ip, #4]
    51d0:	3d502320 	ldclcc	3, cr2, [r0, #-128]	; 0xffffff80
    51d4:	04403e4b 	strbeq	r3, [r0], #-3659	; 0xfffff1b5
    51d8:	72e90302 	rscvc	r0, r9, #134217728	; 0x8000000
    51dc:	0301044a 	movweq	r0, #5194	; 0x144a
    51e0:	213c0d9d 	teqcs	ip, sp	; <illegal shifter operand>
    51e4:	01000402 	tsteq	r0, r2, lsl #8
    51e8:	02050001 	andeq	r0, r5, #1
    51ec:	00000000 	andeq	r0, r0, r0
    51f0:	010f8603 	tsteq	pc, r3, lsl #12
    51f4:	303e304f 	eorscc	r3, lr, pc, asr #32
    51f8:	00040221 	andeq	r0, r4, r1, lsr #4
    51fc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5200:	00000002 	andeq	r0, r0, r2
    5204:	0f960300 	svceq	0x00960300
    5208:	30324c01 	eorscc	r4, r2, r1, lsl #24
    520c:	02213068 	eoreq	r3, r1, #104	; 0x68
    5210:	01010004 	tsteq	r1, r4
    5214:	00020500 	andeq	r0, r2, r0, lsl #10
    5218:	03000000 	movweq	r0, #0
    521c:	4c010fa7 	stcmi	15, cr0, [r1], {167}	; 0xa7
    5220:	02213e31 	eoreq	r3, r1, #784	; 0x310
    5224:	01010005 	tsteq	r1, r5
    5228:	00020500 	andeq	r0, r2, r0, lsl #10
    522c:	03000000 	movweq	r0, #0
    5230:	4b010fb3 	blmi	49104 <_Min_Stack_Size+0x48f04>
    5234:	032e0f03 			; <UNDEFINED> instruction: 0x032e0f03
    5238:	04023c16 	streq	r3, [r2], #-3094	; 0xfffff3ea
    523c:	00010100 	andeq	r0, r1, r0, lsl #2
    5240:	84a00205 	strthi	r0, [r0], #517	; 0x205
    5244:	fd030800 	stc2	8, cr0, [r3, #-0]
    5248:	0903010f 	stmdbeq	r3, {r0, r1, r2, r3, r8}
    524c:	31784c4a 	cmncc	r8, sl, asr #24
    5250:	00050221 	andeq	r0, r5, r1, lsr #4
    5254:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5258:	0084d002 	addeq	sp, r4, r2
    525c:	10960308 	addsne	r0, r6, r8, lsl #6
    5260:	3e336701 	cdpcc	7, 3, cr6, cr3, cr1, {0}
    5264:	03674d4e 	cmneq	r7, #4992	; 0x1380
    5268:	833e4a09 	teqhi	lr, #36864	; 0x9000
    526c:	09036875 	stmdbeq	r3, {r0, r2, r4, r5, r6, fp, sp, lr}
    5270:	68838358 	stmvs	r3, {r3, r4, r6, r8, r9, pc}
    5274:	03423e89 	movteq	r3, #11913	; 0x2e89
    5278:	214c3c0d 	cmpcs	ip, sp, lsl #24
    527c:	01000402 	tsteq	r0, r2, lsl #8
    5280:	02050001 	andeq	r0, r5, #1
    5284:	00000000 	andeq	r0, r0, r0
    5288:	0110e503 	tsteq	r0, r3, lsl #10
    528c:	68754c59 	ldmdavs	r5!, {r0, r3, r4, r6, sl, fp, lr}^
    5290:	04028450 	streq	r8, [r2], #-1104	; 0xfffffbb0
    5294:	00010100 	andeq	r0, r1, r0, lsl #2
    5298:	85a40205 	strhi	r0, [r4, #517]!	; 0x205
    529c:	f7030800 			; <UNDEFINED> instruction: 0xf7030800
    52a0:	30510110 	subscc	r0, r1, r0, lsl r1
    52a4:	2030034d 	eorscs	r0, r0, sp, asr #6
    52a8:	0e03864c 	cfmadd32eq	mvax2, mvfx8, mvfx3, mvfx12
    52ac:	7fbc032e 	svcvc	0x00bc032e
    52b0:	583f034a 	ldmdapl	pc!, {r1, r3, r6, r8, r9}	; <UNPREDICTABLE>
    52b4:	30314c28 	eorscc	r4, r1, r8, lsr #24
    52b8:	844c224c 	strbhi	r2, [ip], #-588	; 0xfffffdb4
    52bc:	4a730335 	bmi	1cc5f98 <_Min_Stack_Size+0x1cc5d98>
    52c0:	24581103 	ldrbcs	r1, [r8], #-259	; 0xfffffefd
    52c4:	04022f4c 	streq	r2, [r2], #-3916	; 0xfffff0b4
    52c8:	00010100 	andeq	r0, r1, r0, lsl #2
    52cc:	86480205 	strbhi	r0, [r8], -r5, lsl #4
    52d0:	ef030800 	svc	0x00030800
    52d4:	304d0111 	subcc	r0, sp, r1, lsl r1
    52d8:	3031404c 	eorscc	r4, r1, ip, asr #32
    52dc:	00040221 	andeq	r0, r4, r1, lsr #4
    52e0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    52e4:	00000002 	andeq	r0, r0, r2
    52e8:	12840300 	addne	r0, r4, #0, 6
    52ec:	4c314c01 	ldcmi	12, cr4, [r1], #-4
    52f0:	02213140 	eoreq	r3, r1, #64, 2
    52f4:	01010005 	tsteq	r1, r5
    52f8:	74020500 	strvc	r0, [r2], #-1280	; 0xfffffb00
    52fc:	03080086 	movweq	r0, #32902	; 0x8086
    5300:	4d011297 	sfmmi	f1, 4, [r1, #-604]	; 0xfffffda4
    5304:	31406830 	cmpcc	r0, r0, lsr r8
    5308:	04022130 	streq	r2, [r2], #-304	; 0xfffffed0
    530c:	00010100 	andeq	r0, r1, r0, lsl #2
    5310:	00000205 	andeq	r0, r0, r5, lsl #4
    5314:	ac030000 	stcge	0, cr0, [r3], {-0}
    5318:	314c0112 	cmpcc	ip, r2, lsl r1
    531c:	21314068 	teqcs	r1, r8, rrx
    5320:	01000502 	tsteq	r0, r2, lsl #10
    5324:	0008b501 	andeq	fp, r8, r1, lsl #10
    5328:	47000200 	strmi	r0, [r0, -r0, lsl #4]
    532c:	02000001 	andeq	r0, r0, #1
    5330:	0d0efb01 	vstreq	d15, [lr, #-4]
    5334:	01010100 	mrseq	r0, (UNDEF: 17)
    5338:	00000001 	andeq	r0, r0, r1
    533c:	01000001 	tsteq	r0, r1
    5340:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 528c <_Min_Stack_Size+0x508c>
    5344:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    5348:	76737572 			; <UNDEFINED> instruction: 0x76737572
    534c:	4144542f 	cmpmi	r4, pc, lsr #8
    5350:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    5354:	2f544f49 	svccs	0x00544f49
    5358:	2f00534f 	svccs	0x0000534f
    535c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5360:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    5364:	2f767375 	svccs	0x00767375
    5368:	53414454 	movtpl	r4, #5204	; 0x1454
    536c:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    5370:	4f2f544f 	svcmi	0x002f544f
    5374:	6f702f53 	svcvs	0x00702f53
    5378:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
    537c:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
    5380:	412f4343 			; <UNDEFINED> instruction: 0x412f4343
    5384:	435f4d52 	cmpmi	pc, #5248	; 0x1480
    5388:	2f00334d 	svccs	0x0000334d
    538c:	2f727375 	svccs	0x00727375
    5390:	2f62696c 	svccs	0x0062696c
    5394:	2f636367 	svccs	0x00636367
    5398:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    539c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    53a0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    53a4:	2e352f69 	cdpcs	15, 3, cr2, cr5, cr9, {3}
    53a8:	2f312e34 	svccs	0x00312e34
    53ac:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    53b0:	00656475 	rsbeq	r6, r5, r5, ror r4
    53b4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    53b8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    53bc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    53c0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    53c4:	2f62696c 	svccs	0x0062696c
    53c8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    53cc:	00656e69 	rsbeq	r6, r5, r9, ror #28
    53d0:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    53d4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    53d8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    53dc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    53e0:	2f62696c 	svccs	0x0062696c
    53e4:	00737973 	rsbseq	r7, r3, r3, ror r9
    53e8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5334 <_Min_Stack_Size+0x5134>
    53ec:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    53f0:	76737572 			; <UNDEFINED> instruction: 0x76737572
    53f4:	4144542f 	cmpmi	r4, pc, lsr #8
    53f8:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    53fc:	2f544f49 	svccs	0x00544f49
    5400:	692f534f 	stmdbvs	pc!, {r0, r1, r2, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    5404:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5408:	00006564 	andeq	r6, r0, r4, ror #10
    540c:	6b736174 	blvs	1cdd9e4 <_Min_Stack_Size+0x1cdd7e4>
    5410:	00632e73 	rsbeq	r2, r3, r3, ror lr
    5414:	70000001 	andvc	r0, r0, r1
    5418:	6d74726f 	lfmvs	f7, 2, [r4, #-444]!	; 0xfffffe44
    541c:	6f726361 	svcvs	0x00726361
    5420:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5424:	74730000 	ldrbtvc	r0, [r3], #-0
    5428:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    542c:	0300682e 	movweq	r6, #2094	; 0x82e
    5430:	645f0000 	ldrbvs	r0, [pc], #-0	; 5438 <_Min_Stack_Size+0x5238>
    5434:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    5438:	745f746c 	ldrbvc	r7, [pc], #-1132	; 5440 <_Min_Stack_Size+0x5240>
    543c:	73657079 	cmnvc	r5, #121	; 0x79
    5440:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    5444:	735f0000 	cmpvc	pc, #0
    5448:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    544c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5450:	70000005 	andvc	r0, r0, r5
    5454:	646a6f72 	strbtvs	r6, [sl], #-3954	; 0xfffff08e
    5458:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
    545c:	00060068 	andeq	r0, r6, r8, rrx
    5460:	73696c00 	cmnvc	r9, #0, 24
    5464:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5468:	74000006 	strvc	r0, [r0], #-6
    546c:	2e6b7361 	cdpcs	3, 6, cr7, cr11, cr1, {3}
    5470:	00060068 	andeq	r0, r6, r8, rrx
    5474:	05000000 	streq	r0, [r0, #-0]
    5478:	0086a402 	addeq	sl, r6, r2, lsl #8
    547c:	05df0308 	ldrbeq	r0, [pc, #776]	; 578c <_Min_Stack_Size+0x558c>
    5480:	82220301 	eorhi	r0, r2, #67108864	; 0x4000000
    5484:	3f4c3f68 	svccc	0x004c3f68
    5488:	03334f50 	teqeq	r3, #80, 30	; 0x140
    548c:	3dd73c0a 	ldclcc	12, cr3, [r7, #40]	; 0x28
    5490:	02213f40 	eoreq	r3, r1, #64, 30	; 0x100
    5494:	01010004 	tsteq	r1, r4
    5498:	28020500 	stmdacs	r2, {r8, sl}
    549c:	03080087 	movweq	r0, #32903	; 0x8087
    54a0:	030106bc 	movweq	r0, #5820	; 0x16bc
    54a4:	0a037416 	beq	e2504 <_Min_Stack_Size+0xe2304>
    54a8:	1b039182 	blne	e9ab8 <_Min_Stack_Size+0xe98b8>
    54ac:	a33e3e4a 	teqge	lr, #1184	; 0x4a0
    54b0:	02040200 	andeq	r0, r4, #0, 4
    54b4:	00667903 	rsbeq	r7, r6, r3, lsl #18
    54b8:	06010402 	streq	r0, [r1], -r2, lsl #8
    54bc:	0903063c 	stmdbeq	r3, {r2, r3, r4, r5, r9, sl}
    54c0:	200a034a 	andcs	r0, sl, sl, asr #6
    54c4:	353e4f5e 	ldrcc	r4, [lr, #-3934]!	; 0xfffff0a2
    54c8:	59403d3f 	stmdbpl	r0, {r0, r1, r2, r3, r4, r5, r8, sl, fp, ip, sp}^
    54cc:	03593f5c 	cmpeq	r9, #92, 30	; 0x170
    54d0:	033d3c2a 	teqeq	sp, #10752	; 0x2a00
    54d4:	40884a3f 	addmi	r4, r8, pc, lsr sl
    54d8:	00040242 	andeq	r0, r4, r2, asr #4
    54dc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    54e0:	00882802 	addeq	r2, r8, r2, lsl #16
    54e4:	08b00308 	ldmeq	r0!, {r3, r8, r9}
    54e8:	59304d01 	ldmdbpl	r0!, {r0, r8, sl, fp, lr}
    54ec:	034f3e4e 	movteq	r3, #65102	; 0xfe4e
    54f0:	764c3c0c 	strbvc	r3, [ip], -ip, lsl #24
    54f4:	033c0d03 	teqeq	ip, #3, 26	; 0xc0
    54f8:	6a08580a 	bvs	21b528 <_Min_Stack_Size+0x21b328>
    54fc:	03764e30 	cmneq	r6, #48, 28	; 0x300
    5500:	1202820b 	andne	r8, r2, #-1342177280	; 0xb0000000
    5504:	00010100 	andeq	r0, r1, r0, lsl #2
    5508:	00000205 	andeq	r0, r0, r5, lsl #4
    550c:	e1030000 	mrs	r0, (UNDEF: 3)
    5510:	345a0109 	ldrbcc	r0, [sl], #-265	; 0xfffffef7
    5514:	5f5a3f32 	svcpl	0x005a3f32
    5518:	01040200 	mrseq	r0, R12_usr
    551c:	4c065806 	stcmi	8, cr5, [r6], {6}
    5520:	003c0c03 	eorseq	r0, ip, r3, lsl #24
    5524:	06010402 	streq	r0, [r1], -r2, lsl #8
    5528:	034c0658 	movteq	r0, #50776	; 0xc658
    552c:	423e2e09 	eorsmi	r2, lr, #9, 28	; 0x90
    5530:	883e407b 	ldmdahi	lr!, {r0, r1, r3, r4, r5, r6, lr}
    5534:	01000802 	tsteq	r0, r2, lsl #16
    5538:	02050001 	andeq	r0, r5, #1
    553c:	080088fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, pc}
    5540:	010ab503 	tsteq	sl, r3, lsl #10
    5544:	033f314b 	teqeq	pc, #-1073741806	; 0xc0000012
    5548:	034c2e0b 	movteq	r2, #52747	; 0xce0b
    554c:	883e3c09 	ldmdahi	lr!, {r0, r3, sl, fp, ip, sp}
    5550:	01000702 	tsteq	r0, r2, lsl #14
    5554:	02050001 	andeq	r0, r5, #1
    5558:	00000000 	andeq	r0, r0, r0
    555c:	010bbe03 	tsteq	fp, r3, lsl #28
    5560:	0200324e 	andeq	r3, r0, #-536870908	; 0xe0000004
    5564:	3c060104 	stfccs	f0, [r6], {4}
    5568:	02040200 	andeq	r0, r4, #0, 4
    556c:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    5570:	02002004 	andeq	r2, r0, #4
    5574:	21060404 	tstcs	r6, r4, lsl #8
    5578:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    557c:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    5580:	02003004 	andeq	r3, r0, #4
    5584:	02210404 	eoreq	r0, r1, #4, 8	; 0x4000000
    5588:	01010006 	tsteq	r1, r6
    558c:	00020500 	andeq	r0, r2, r0, lsl #10
    5590:	03000000 	movweq	r0, #0
    5594:	04010bd4 	streq	r0, [r1], #-3028	; 0xfffff42c
    5598:	75fe0302 	ldrbvc	r0, [lr, #770]!	; 0x302
    559c:	ba0c034a 	blt	3062cc <_Min_Stack_Size+0x3060cc>
    55a0:	8c030104 	stfhis	f0, [r3], {4}
    55a4:	0024200a 	eoreq	r2, r4, sl
    55a8:	06010402 	streq	r0, [r1], -r2, lsl #8
    55ac:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    55b0:	02003c02 	andeq	r3, r0, #512	; 0x200
    55b4:	00200404 	eoreq	r0, r0, r4, lsl #8
    55b8:	06040402 	streq	r0, [r4], -r2, lsl #8
    55bc:	00020421 	andeq	r0, r2, r1, lsr #8
    55c0:	03040402 	movweq	r0, #17410	; 0x4402
    55c4:	045875f5 	ldrbeq	r7, [r8], #-1525	; 0xfffffa0b
    55c8:	04020001 	streq	r0, [r2], #-1
    55cc:	0a8f0304 	beq	fe3c61e4 <BootRAM+0xd336985>
    55d0:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    55d4:	07022104 	streq	r2, [r2, -r4, lsl #2]
    55d8:	00010100 	andeq	r0, r1, r0, lsl #2
    55dc:	00000205 	andeq	r0, r0, r5, lsl #4
    55e0:	fc030000 	stc2	0, cr0, [r3], {-0}
    55e4:	335b010b 	cmpcc	fp, #-1073741822	; 0xc0000002
    55e8:	0032353e 	eorseq	r3, r2, lr, lsr r5
    55ec:	06010402 	streq	r0, [r1], -r2, lsl #8
    55f0:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    55f4:	02003c02 	andeq	r3, r0, #512	; 0x200
    55f8:	00200404 	eoreq	r0, r0, r4, lsl #8
    55fc:	06040402 	streq	r0, [r4], -r2, lsl #8
    5600:	04020026 	streq	r0, [r2], #-38	; 0xffffffda
    5604:	4c4e4404 	cfstrdmi	mvd4, [lr], {4}
    5608:	0e03685d 	mcreq	8, 0, r6, cr3, cr13, {2}
    560c:	0c035d3c 	stceq	13, cr5, [r3], {60}	; 0x3c
    5610:	4468422e 	strbtmi	r4, [r8], #-558	; 0xfffffdd2
    5614:	4c3c0a03 			; <UNDEFINED> instruction: 0x4c3c0a03
    5618:	b1580b03 	cmplt	r8, r3, lsl #22
    561c:	6d08a487 	cfstrsvs	mvf10, [r8, #-540]	; 0xfffffde4
    5620:	820c033e 	andhi	r0, ip, #-134217728	; 0xf8000000
    5624:	000d022f 	andeq	r0, sp, pc, lsr #4
    5628:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    562c:	00000002 	andeq	r0, r0, r2
    5630:	0da00300 	stceq	3, cr0, [r0]
    5634:	00324d01 	eorseq	r4, r2, r1, lsl #26
    5638:	06010402 	streq	r0, [r1], -r2, lsl #8
    563c:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    5640:	02003c02 	andeq	r3, r0, #512	; 0x200
    5644:	00200404 	eoreq	r0, r0, r4, lsl #8
    5648:	06040402 	streq	r0, [r4], -r2, lsl #8
    564c:	02008426 	andeq	r8, r0, #637534208	; 0x26000000
    5650:	ac060104 	stfges	f0, [r6], {4}
    5654:	5f4cb406 	svcpl	0x004cb406
    5658:	304f6a6a 	subcc	r6, pc, sl, ror #20
    565c:	3530304e 	ldrcc	r3, [r0, #-78]!	; 0xffffffb2
    5660:	19034e5a 	stmdbne	r3, {r1, r3, r4, r6, r9, sl, fp, lr}
    5664:	206e0382 	rsbcs	r0, lr, r2, lsl #7
    5668:	3c0c036c 	stccc	3, cr0, [ip], {108}	; 0x6c
    566c:	36207803 	strtcc	r7, [r0], -r3, lsl #16
    5670:	01001302 	tsteq	r0, r2, lsl #6
    5674:	02050001 	andeq	r0, r5, #1
    5678:	00000000 	andeq	r0, r0, r0
    567c:	010e8503 	tsteq	lr, r3, lsl #10
    5680:	09032f4b 	stmdbeq	r3, {r0, r1, r3, r6, r8, r9, sl, fp, sp}
    5684:	4c5c5b2e 	mrrcmi	11, 2, r5, ip, cr14
    5688:	212e1103 			; <UNDEFINED> instruction: 0x212e1103
    568c:	01000902 	tsteq	r0, r2, lsl #18
    5690:	02050001 	andeq	r0, r5, #1
    5694:	00000000 	andeq	r0, r0, r0
    5698:	010eb303 	tsteq	lr, r3, lsl #6
    569c:	0200354b 	andeq	r3, r0, #314572800	; 0x12c00000
    56a0:	58060104 	stmdapl	r6, {r2, r8}
    56a4:	6c303e06 	ldcvs	14, cr3, [r0], #-24	; 0xffffffe8
    56a8:	79690859 	stmdbvc	r9!, {r0, r3, r4, r6, fp}^
    56ac:	34820c03 	strcc	r0, [r2], #3075	; 0xc03
    56b0:	01000d02 	tsteq	r0, r2, lsl #26
    56b4:	02050001 	andeq	r0, r5, #1
    56b8:	00000000 	andeq	r0, r0, r0
    56bc:	010ee903 	tsteq	lr, r3, lsl #18
    56c0:	02042f4b 	andeq	r2, r4, #300	; 0x12c
    56c4:	2e72e703 	cdpcs	7, 7, cr14, cr2, cr3, {0}
    56c8:	04ba0c03 	ldrteq	r0, [sl], #3075	; 0xc03
    56cc:	0da40301 	stceq	3, cr0, [r4, #4]!
    56d0:	4e6b2220 	cdpmi	2, 6, cr2, cr11, cr0, {1}
    56d4:	08593576 	ldmdaeq	r9, {r1, r2, r4, r5, r6, r8, sl, ip, sp}^
    56d8:	0302047b 	movweq	r0, #9339	; 0x247b
    56dc:	048272c6 	streq	r7, [r2], #710	; 0x2c6
    56e0:	0dc40301 	stcleq	3, cr0, [r4, #4]
    56e4:	0e02213c 	mcreq	1, 0, r2, cr2, cr12, {1}
    56e8:	00010100 	andeq	r0, r1, r0, lsl #2
    56ec:	89440205 	stmdbhi	r4, {r0, r2, r9}^
    56f0:	af030800 	svcge	0x00030800
    56f4:	2103010f 	tstcs	r3, pc, lsl #2
    56f8:	ac16033c 	ldcge	3, cr0, [r6], {60}	; 0x3c
    56fc:	dc030204 	sfmle	f0, 4, [r3], {4}
    5700:	01043c71 	tsteq	r4, r1, ror ip
    5704:	900ebe03 	andls	fp, lr, r3, lsl #28
    5708:	0e033d4b 	cdpeq	13, 0, cr3, cr3, cr11, {2}
    570c:	2e15033c 	mrccs	3, 0, r0, cr5, cr12, {1}
    5710:	01001002 	tsteq	r0, r2
    5714:	02050001 	andeq	r0, r5, #1
    5718:	00000000 	andeq	r0, r0, r0
    571c:	0110a903 	tsteq	r0, r3, lsl #18
    5720:	99030204 	stmdbls	r3, {r2, r9}
    5724:	01043c71 	tsteq	r4, r1, ror ip
    5728:	900eec03 	andls	lr, lr, r3, lsl #24
    572c:	07022f3d 	smladxeq	r2, sp, pc, r2	; <UNPREDICTABLE>
    5730:	00010100 	andeq	r0, r1, r0, lsl #2
    5734:	89b00205 	ldmibhi	r0!, {r0, r2, r9}
    5738:	b4030800 	strlt	r0, [r3], #-2048	; 0xfffff800
    573c:	59330110 	ldmdbpl	r3!, {r4, r8}
    5740:	00070213 	andeq	r0, r7, r3, lsl r2
    5744:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5748:	0089cc02 	addeq	ip, r9, r2, lsl #24
    574c:	10fe0308 	rscsne	r0, lr, r8, lsl #6
    5750:	032f3d01 			; <UNDEFINED> instruction: 0x032f3d01
    5754:	5a302e0b 	bpl	c10f88 <_Min_Stack_Size+0xc10d88>
    5758:	4b224e4c 	blmi	899090 <_Min_Stack_Size+0x898e90>
    575c:	6a085959 	bvs	21bcc8 <_Min_Stack_Size+0x21bac8>
    5760:	3c750376 	ldclcc	3, cr0, [r5], #-472	; 0xfffffe28
    5764:	444a1303 	strbmi	r1, [sl], #-771	; 0xfffffcfd
    5768:	5a403e36 	bpl	1015048 <_Min_Stack_Size+0x1014e48>
    576c:	443e3d42 	ldrtmi	r3, [lr], #-3394	; 0xfffff2be
    5770:	0d03314e 	stfeqs	f3, [r3, #-312]	; 0xfffffec8
    5774:	02213082 	eoreq	r3, r1, #130	; 0x82
    5778:	01010017 	tsteq	r1, r7, lsl r0
    577c:	00020500 	andeq	r0, r2, r0, lsl #10
    5780:	03000000 	movweq	r0, #0
    5784:	420111ec 	andmi	r1, r1, #236, 2	; 0x3b
    5788:	07022140 	streq	r2, [r2, -r0, asr #2]
    578c:	00010100 	andeq	r0, r1, r0, lsl #2
    5790:	00000205 	andeq	r0, r0, r5, lsl #4
    5794:	fb030000 	blx	c579e <_Min_Stack_Size+0xc559e>
    5798:	14030111 	strne	r0, [r3], #-273	; 0xfffffeef
    579c:	2140303c 	cmpcs	r0, ip, lsr r0
    57a0:	01000702 	tsteq	r0, r2, lsl #14
    57a4:	02050001 	andeq	r0, r5, #1
    57a8:	00000000 	andeq	r0, r0, r0
    57ac:	01129a03 	tsteq	r2, r3, lsl #20
    57b0:	06022f31 			; <UNDEFINED> instruction: 0x06022f31
    57b4:	00010100 	andeq	r0, r1, r0, lsl #2
    57b8:	00000205 	andeq	r0, r0, r5, lsl #4
    57bc:	a2030000 	andge	r0, r3, #0
    57c0:	004f0112 	subeq	r0, pc, r2, lsl r1	; <UNPREDICTABLE>
    57c4:	06010402 	streq	r0, [r1], -r2, lsl #8
    57c8:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    57cc:	02003c02 	andeq	r3, r0, #512	; 0x200
    57d0:	00200404 	eoreq	r0, r0, r4, lsl #8
    57d4:	06040402 	streq	r0, [r4], -r2, lsl #8
    57d8:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    57dc:	08022f04 	stmdaeq	r2, {r2, r8, r9, sl, fp, sp}
    57e0:	00010100 	andeq	r0, r1, r0, lsl #2
    57e4:	8ae80205 	bhi	ffa06000 <BootRAM+0xe9767a1>
    57e8:	e9030800 	stmdb	r3, {fp}
    57ec:	343f0114 	ldrtcc	r0, [pc], #-276	; 57f4 <_Min_Stack_Size+0x55f4>
    57f0:	3e3e4e4e 	cdpcc	14, 3, cr4, cr14, cr14, {2}
    57f4:	12080b03 	andne	r0, r8, #3072	; 0xc00
    57f8:	284b5f5c 	stmdacs	fp, {r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    57fc:	3d513e59 	ldclcc	14, cr3, [r1, #-356]	; 0xfffffe9c
    5800:	034c5c28 	movteq	r5, #52264	; 0xcc28
    5804:	0a035809 	beq	db830 <_Min_Stack_Size+0xdb630>
    5808:	03766608 	cmneq	r6, #8, 12	; 0x800000
    580c:	bc282e09 	stclt	14, cr2, [r8], #-36	; 0xffffffdc
    5810:	033c1a03 	teqeq	ip, #12288	; 0x3000
    5814:	034c580d 	movteq	r5, #51213	; 0xc80d
    5818:	02212e09 	eoreq	r2, r1, #9, 28	; 0x90
    581c:	0101001b 	tsteq	r1, fp, lsl r0
    5820:	38020500 	stmdacc	r2, {r8, sl}
    5824:	0308008c 	movweq	r0, #32908	; 0x808c
    5828:	3d011783 	stccc	7, cr1, [r1, #-524]	; 0xfffffdf4
    582c:	00c0034e 	sbceq	r0, r0, lr, asr #6
    5830:	2044033c 	subcs	r0, r4, ip, lsr r3
    5834:	003c1f03 	eorseq	r1, ip, r3, lsl #30
    5838:	06020402 	streq	r0, [r2], -r2, lsl #8
    583c:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
    5840:	02006604 	andeq	r6, r0, #4, 12	; 0x400000
    5844:	00660604 	rsbeq	r0, r6, r4, lsl #12
    5848:	66070402 	strvs	r0, [r7], -r2, lsl #8
    584c:	900b0306 	andls	r0, fp, r6, lsl #6
    5850:	cf030204 	svcgt	0x00030204
    5854:	044b3c69 	strbeq	r3, [fp], #-3177	; 0xfffff397
    5858:	16b00301 	ldrtne	r0, [r0], r1, lsl #6
    585c:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    5860:	58080601 	stmdapl	r8, {r0, r9, sl}
    5864:	03040200 	movweq	r0, #16896	; 0x4200
    5868:	12030658 	andne	r0, r3, #88, 12	; 0x5800000
    586c:	000f0258 	andeq	r0, pc, r8, asr r2	; <UNPREDICTABLE>
    5870:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5874:	008d1002 	addeq	r1, sp, r2
    5878:	17cc0308 	strbne	r0, [ip, r8, lsl #6]
    587c:	580a0301 	stmdapl	sl, {r0, r8, r9}
    5880:	06024b76 			; <UNDEFINED> instruction: 0x06024b76
    5884:	00010100 	andeq	r0, r1, r0, lsl #2
    5888:	00000205 	andeq	r0, r0, r5, lsl #4
    588c:	dd030000 	stcle	0, cr0, [r3, #-0]
    5890:	0a030117 	beq	c5cf4 <_Min_Stack_Size+0xc5af4>
    5894:	4b766d66 	blmi	1da0e34 <_Min_Stack_Size+0x1da0c34>
    5898:	01000702 	tsteq	r0, r2, lsl #14
    589c:	02050001 	andeq	r0, r5, #1
    58a0:	08008d3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, fp, pc}
    58a4:	01189603 	tsteq	r8, r3, lsl #12
    58a8:	4c4a1103 	stfmie	f1, [sl], {3}
    58ac:	03594c5a 	cmpeq	r9, #23040	; 0x5a00
    58b0:	69740814 	ldmdbvs	r4!, {r2, r4, fp}^
    58b4:	314e3279 	hvccc	58153	; 0xe329
    58b8:	00100221 	andseq	r0, r0, r1, lsr #4
    58bc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    58c0:	00000002 	andeq	r0, r0, r2
    58c4:	18da0300 	ldmne	sl, {r8, r9}^
    58c8:	3e5c6001 	cdpcc	0, 5, cr6, cr12, cr1, {0}
    58cc:	68085941 	stmdavs	r8, {r0, r6, r8, fp, ip, lr}
    58d0:	0c023e7a 	stceq	14, cr3, [r2], {122}	; 0x7a
    58d4:	00010100 	andeq	r0, r1, r0, lsl #2
    58d8:	00000205 	andeq	r0, r0, r5, lsl #4
    58dc:	fc030000 	stc2	0, cr0, [r3], {-0}
    58e0:	304c0118 	subcc	r0, ip, r8, lsl r1
    58e4:	022f4c4b 	eoreq	r4, pc, #19200	; 0x4b00
    58e8:	01010008 	tsteq	r1, r8
    58ec:	e4020500 	str	r0, [r2], #-1280	; 0xfffffb00
    58f0:	0308008d 	movweq	r0, #32909	; 0x808d
    58f4:	4c011988 			; <UNDEFINED> instruction: 0x4c011988
    58f8:	0a024b4b 	beq	9862c <_Min_Stack_Size+0x9842c>
    58fc:	00010100 	andeq	r0, r1, r0, lsl #2
    5900:	8e100205 	cdphi	2, 1, cr0, cr0, cr5, {0}
    5904:	90030800 	andls	r0, r3, r0, lsl #16
    5908:	315e0119 	cmpcc	lr, r9, lsl r1
    590c:	580e033d 	stmdapl	lr, {r0, r2, r3, r4, r5, r8, r9}
    5910:	0200415d 	andeq	r4, r0, #1073741847	; 0x40000017
    5914:	66060104 	strvs	r0, [r6], -r4, lsl #2
    5918:	5b3e5f06 	blpl	f9d538 <_Min_Stack_Size+0xf9d338>
    591c:	3d403d67 	stclcc	13, cr3, [r0, #-412]	; 0xfffffe64
    5920:	02213031 	eoreq	r3, r1, #49	; 0x31
    5924:	01010008 	tsteq	r1, r8
    5928:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    592c:	0308008e 	movweq	r0, #32910	; 0x808e
    5930:	2f0119cf 	svccs	0x000119cf
    5934:	0007023d 	andeq	r0, r7, sp, lsr r2
    5938:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    593c:	008eb402 	addeq	fp, lr, r2, lsl #8
    5940:	1a860308 	bne	fe186568 <BootRAM+0xd0f6d09>
    5944:	4a100301 	bmi	406550 <_Min_Stack_Size+0x406350>
    5948:	4c2e1703 	stcmi	7, cr1, [lr], #-12
    594c:	8200c703 	andhi	ip, r0, #786432	; 0xc0000
    5950:	01000602 	tsteq	r0, r2, lsl #12
    5954:	02050001 	andeq	r0, r5, #1
    5958:	08008ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, pc}
    595c:	011bda03 	tsteq	fp, r3, lsl #20
    5960:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
    5964:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
    5968:	009c0304 	addseq	r0, ip, r4, lsl #6
    596c:	06010402 	streq	r0, [r1], -r2, lsl #8
    5970:	3d41063c 	stclcc	6, cr0, [r1, #-240]	; 0xffffff10
    5974:	3c0a033d 	stccc	3, cr0, [sl], {61}	; 0x3d
    5978:	023d3d42 	eorseq	r3, sp, #4224	; 0x1080
    597c:	01010012 	tsteq	r1, r2, lsl r0
    5980:	58020500 	stmdapl	r2, {r8, sl}
    5984:	0308008f 	movweq	r0, #32911	; 0x808f
    5988:	03011bfa 	movweq	r1, #7162	; 0x1bfa
    598c:	04022e19 	streq	r2, [r2], #-3609	; 0xfffff1e7
    5990:	00010100 	andeq	r0, r1, r0, lsl #2
    5994:	8f640205 	svchi	0x00640205
    5998:	a8030800 	stmdage	r3, {fp}
    599c:	5e3f011e 	mrcpl	1, 1, r0, cr15, cr14, {0}
    59a0:	1d4a0b03 	vstrne	d16, [sl, #-12]
    59a4:	0a024c59 	beq	98b10 <_Min_Stack_Size+0x98910>
    59a8:	00010100 	andeq	r0, r1, r0, lsl #2
    59ac:	00000205 	andeq	r0, r0, r5, lsl #4
    59b0:	c2030000 	andgt	r0, r3, #0
    59b4:	3e42011e 	mcrcc	1, 2, r0, cr2, cr14, {0}
    59b8:	00070221 	andeq	r0, r7, r1, lsr #4
    59bc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    59c0:	008fa402 	addeq	sl, pc, r2, lsl #8
    59c4:	1eef0308 	cdpne	3, 14, cr0, cr15, cr8, {0}
    59c8:	332f4b01 			; <UNDEFINED> instruction: 0x332f4b01
    59cc:	034c7941 	movteq	r7, #51521	; 0xc941
    59d0:	84bc7409 	ldrthi	r7, [ip], #1033	; 0x409
    59d4:	01040200 	mrseq	r0, R12_usr
    59d8:	b406ac06 	strlt	sl, [r6], #-3078	; 0xfffff3fa
    59dc:	5e790859 	mrcpl	8, 3, r0, cr9, cr9, {2}
    59e0:	74090340 	strvc	r0, [r9], #-832	; 0xfffffcc0
    59e4:	212e0d03 			; <UNDEFINED> instruction: 0x212e0d03
    59e8:	01000a02 	tsteq	r0, r2, lsl #20
    59ec:	02050001 	andeq	r0, r5, #1
    59f0:	080090a4 	stmdaeq	r0, {r2, r5, r7, ip, pc}
    59f4:	011fc603 	tsteq	pc, r3, lsl #12
    59f8:	44302f4b 	ldrtmi	r2, [r0], #-3915	; 0xfffff0b5
    59fc:	8451695c 	ldrbhi	r6, [r1], #-2396	; 0xfffff6a4
    5a00:	01040200 	mrseq	r0, R12_usr
    5a04:	0306ac06 	movweq	sl, #27654	; 0x6c06
    5a08:	674fac0a 	strbvs	sl, [pc, -sl, lsl #24]
    5a0c:	66080a03 	strvs	r0, [r8], -r3, lsl #20
    5a10:	212e1103 			; <UNDEFINED> instruction: 0x212e1103
    5a14:	01000802 	tsteq	r0, r2, lsl #16
    5a18:	02050001 	andeq	r0, r5, #1
    5a1c:	0800916c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip, pc}
    5a20:	01209603 			; <UNDEFINED> instruction: 0x01209603
    5a24:	03303059 	teqeq	r0, #89	; 0x59
    5a28:	405a3c0a 	subsmi	r3, sl, sl, lsl #24
    5a2c:	0b035e40 	bleq	dd334 <_Min_Stack_Size+0xdd134>
    5a30:	4c403d58 	mcrrmi	13, 5, r3, r0, cr8
    5a34:	ae580d03 	cdpge	13, 5, cr0, cr8, cr3, {0}
    5a38:	04020084 	streq	r0, [r2], #-132	; 0xffffff7c
    5a3c:	06ac0601 	strteq	r0, [ip], r1, lsl #12
    5a40:	081503b3 	ldmdaeq	r5, {r0, r1, r4, r5, r7, r8, r9}
    5a44:	00080266 	andeq	r0, r8, r6, ror #4
    5a48:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5a4c:	00000002 	andeq	r0, r0, r2
    5a50:	23b50300 			; <UNDEFINED> instruction: 0x23b50300
    5a54:	844e3f01 	strbhi	r3, [lr], #-3841	; 0xfffff0ff
    5a58:	00080221 	andeq	r0, r8, r1, lsr #4
    5a5c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5a60:	00925c02 	addseq	r5, r2, r2, lsl #24
    5a64:	23c50308 	biccs	r0, r5, #8, 6	; 0x20000000
    5a68:	5b4c3101 	blpl	1311e74 <_Min_Stack_Size+0x1311c74>
    5a6c:	0007022f 	andeq	r0, r7, pc, lsr #4
    5a70:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5a74:	00000002 	andeq	r0, r0, r2
    5a78:	23d60300 	bicscs	r0, r6, #0, 6
    5a7c:	5b315b01 	blpl	c5c688 <_Min_Stack_Size+0xc5c488>
    5a80:	03513e5a 	cmpeq	r1, #1440	; 0x5a0
    5a84:	3130820c 	teqcc	r0, ip, lsl #4
    5a88:	5c3e3e4c 	ldcpl	14, cr3, [lr], #-304	; 0xfffffed0
    5a8c:	21305a60 	teqcs	r0, r0, ror #20
    5a90:	01000802 	tsteq	r0, r2, lsl #16
    5a94:	02050001 	andeq	r0, r5, #1
    5a98:	00000000 	andeq	r0, r0, r0
    5a9c:	01249a03 			; <UNDEFINED> instruction: 0x01249a03
    5aa0:	77793177 			; <UNDEFINED> instruction: 0x77793177
    5aa4:	03513e5a 	cmpeq	r1, #1440	; 0x5a0
    5aa8:	3230820c 	eorscc	r8, r0, #12, 4	; 0xc0000000
    5aac:	42775f40 	rsbsmi	r5, r7, #64, 30	; 0x100
    5ab0:	305a3175 	subscc	r3, sl, r5, ror r1
    5ab4:	00080221 	andeq	r0, r8, r1, lsr #4
    5ab8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5abc:	00000002 	andeq	r0, r0, r2
    5ac0:	24ea0300 	strbtcs	r0, [sl], #768	; 0x300
    5ac4:	30328401 	eorscc	r8, r2, r1, lsl #8
    5ac8:	4c4d3e30 	mcrrmi	14, 3, r3, sp, cr0
    5acc:	6715084c 	ldrvs	r0, [r5, -ip, asr #16]
    5ad0:	3d235923 			; <UNDEFINED> instruction: 0x3d235923
    5ad4:	1e433e23 	cdpne	14, 4, cr3, cr3, cr3, {1}
    5ad8:	200d0330 	andcs	r0, sp, r0, lsr r3
    5adc:	03593e27 	cmpeq	r9, #624	; 0x270
    5ae0:	78660815 	stmdavc	r6!, {r0, r2, r4, fp}^
    5ae4:	30820c03 	addcc	r0, r2, r3, lsl #24
    5ae8:	000d0221 	andeq	r0, sp, r1, lsr #4
    5aec:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5af0:	00000002 	andeq	r0, r0, r2
    5af4:	25dc0300 	ldrbcs	r0, [ip, #768]	; 0x300
    5af8:	17038501 	strne	r8, [r3, -r1, lsl #10]
    5afc:	0302042e 	movweq	r0, #9262	; 0x242e
    5b00:	032e5bdc 			; <UNDEFINED> instruction: 0x032e5bdc
    5b04:	0104ba0c 	tsteq	r4, ip, lsl #20
    5b08:	20249a03 	eorcs	r9, r4, r3, lsl #20
    5b0c:	4b4d3e22 	blmi	135539c <_Min_Stack_Size+0x135519c>
    5b10:	6715084c 	ldrvs	r0, [r5, -ip, asr #16]
    5b14:	3d235923 			; <UNDEFINED> instruction: 0x3d235923
    5b18:	1e433e23 	cdpne	14, 4, cr3, cr3, cr3, {1}
    5b1c:	200c0330 	andcs	r0, ip, r0, lsr r3
    5b20:	594c4127 	stmdbpl	ip, {r0, r1, r2, r5, r8, lr}^
    5b24:	78697a08 	stmdavc	r9!, {r3, r9, fp, ip, sp, lr}^
    5b28:	0204423e 	andeq	r4, r4, #-536870909	; 0xe0000003
    5b2c:	585b9a03 	ldmdapl	fp, {r0, r1, r9, fp, ip, pc}^
    5b30:	f0030104 			; <UNDEFINED> instruction: 0xf0030104
    5b34:	02213c24 	eoreq	r3, r1, #36, 24	; 0x2400
    5b38:	01010010 	tsteq	r1, r0, lsl r0
    5b3c:	00020500 	andeq	r0, r2, r0, lsl #10
    5b40:	03000000 	movweq	r0, #0
    5b44:	030126dd 	movweq	r2, #5853	; 0x16dd
    5b48:	02045819 	andeq	r5, r4, #1638400	; 0x190000
    5b4c:	2e5adc03 	cdpcs	12, 5, cr13, cr10, cr3, {0}
    5b50:	04ba0c03 	ldrteq	r0, [sl], #3075	; 0xc03
    5b54:	259a0301 	ldrcs	r0, [sl, #769]	; 0x301
    5b58:	4e4b2220 	cdpmi	2, 4, cr2, cr11, cr0, {1}
    5b5c:	594c415e 	stmdbpl	ip, {r1, r2, r3, r4, r6, r8, lr}^
    5b60:	78697a08 	stmdavc	r9!, {r3, r9, fp, ip, sp, lr}^
    5b64:	0204423e 	andeq	r4, r4, #-536870909	; 0xe0000003
    5b68:	585ac203 	ldmdapl	sl, {r0, r1, r9, lr, pc}^
    5b6c:	c7030104 	strgt	r0, [r3, -r4, lsl #2]
    5b70:	00083c25 	andeq	r3, r8, r5, lsr #24
    5b74:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5b78:	00000002 	andeq	r0, r0, r2
    5b7c:	27b40300 	ldrcs	r0, [r4, r0, lsl #6]!
    5b80:	02005001 	andeq	r5, r0, #1
    5b84:	3c060104 	stfccs	f0, [r6], {4}
    5b88:	02040200 	andeq	r0, r4, #0, 4
    5b8c:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    5b90:	02002004 	andeq	r2, r0, #4
    5b94:	22060404 	andcs	r0, r6, #4, 8	; 0x4000000
    5b98:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    5b9c:	404b6830 	submi	r6, fp, r0, lsr r8
    5ba0:	02213031 	eoreq	r3, r1, #49	; 0x31
    5ba4:	01010006 	tsteq	r1, r6
    5ba8:	84020500 	strhi	r0, [r2], #-1280	; 0xfffffb00
    5bac:	03080092 	movweq	r0, #32914	; 0x8092
    5bb0:	5a0127d9 	bpl	4fb1c <_Min_Stack_Size+0x4f91c>
    5bb4:	943c0d03 	ldrtls	r0, [ip], #-3331	; 0xfffff2fd
    5bb8:	00ba0903 	adcseq	r0, sl, r3, lsl #18
    5bbc:	06010402 	streq	r0, [r1], -r2, lsl #8
    5bc0:	0341064a 	movteq	r0, #5706	; 0x164a
    5bc4:	037400cb 	cmneq	r4, #203	; 0xcb
    5bc8:	4d207fbc 	stcmi	15, cr7, [r0, #-752]!	; 0xfffffd10
    5bcc:	3b034e4c 	blcc	d9504 <_Min_Stack_Size+0xd9304>
    5bd0:	204b0390 	umaalcs	r0, fp, r0, r3
    5bd4:	2e035a95 			; <UNDEFINED> instruction: 0x2e035a95
    5bd8:	0013023c 	andseq	r0, r3, ip, lsr r2
    5bdc:	020f0101 	andeq	r0, pc, #1073741824	; 0x40000000
    5be0:	00020000 	andeq	r0, r2, r0
    5be4:	000000e2 	andeq	r0, r0, r2, ror #1
    5be8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5bec:	0101000d 	tsteq	r1, sp
    5bf0:	00000101 	andeq	r0, r0, r1, lsl #2
    5bf4:	00000100 	andeq	r0, r0, r0, lsl #2
    5bf8:	6f682f01 	svcvs	0x00682f01
    5bfc:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    5c00:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    5c04:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    5c08:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    5c0c:	544f492d 	strbpl	r4, [pc], #-2349	; 5c14 <_Min_Stack_Size+0x5a14>
    5c10:	2f534f2f 	svccs	0x00534f2f
    5c14:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    5c18:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    5c1c:	4343472f 	movtmi	r4, #14127	; 0x372f
    5c20:	4d52412f 	ldfmie	f4, [r2, #-188]	; 0xffffff44
    5c24:	334d435f 	movtcc	r4, #54111	; 0xd35f
    5c28:	73752f00 	cmnvc	r5, #0, 30
    5c2c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    5c30:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5c34:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    5c38:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5c3c:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    5c40:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    5c44:	73752f00 	cmnvc	r5, #0, 30
    5c48:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    5c4c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5c50:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    5c54:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5c58:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    5c5c:	6f682f00 	svcvs	0x00682f00
    5c60:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    5c64:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    5c68:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    5c6c:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    5c70:	544f492d 	strbpl	r4, [pc], #-2349	; 5c78 <_Min_Stack_Size+0x5a78>
    5c74:	2f534f2f 	svccs	0x00534f2f
    5c78:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5c7c:	00656475 	rsbeq	r6, r5, r5, ror r4
    5c80:	726f7000 	rsbvc	r7, pc, #0
    5c84:	00632e74 	rsbeq	r2, r3, r4, ror lr
    5c88:	70000001 	andvc	r0, r0, r1
    5c8c:	6d74726f 	lfmvs	f7, 2, [r4, #-444]!	; 0xfffffe44
    5c90:	6f726361 	svcvs	0x00726361
    5c94:	0100682e 	tsteq	r0, lr, lsr #16
    5c98:	645f0000 	ldrbvs	r0, [pc], #-0	; 5ca0 <_Min_Stack_Size+0x5aa0>
    5c9c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    5ca0:	745f746c 	ldrbvc	r7, [pc], #-1132	; 5ca8 <_Min_Stack_Size+0x5aa8>
    5ca4:	73657079 	cmnvc	r5, #121	; 0x79
    5ca8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5cac:	735f0000 	cmpvc	pc, #0
    5cb0:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    5cb4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5cb8:	70000003 	andvc	r0, r0, r3
    5cbc:	646a6f72 	strbtvs	r6, [sl], #-3954	; 0xfffff08e
    5cc0:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
    5cc4:	00040068 	andeq	r0, r4, r8, rrx
    5cc8:	05000000 	streq	r0, [r0, #-0]
    5ccc:	00935002 	addseq	r5, r3, r2
    5cd0:	01ae0308 			; <UNDEFINED> instruction: 0x01ae0308
    5cd4:	4b3d6901 	blmi	f600e0 <_Min_Stack_Size+0xf5fee0>
    5cd8:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
    5cdc:	213e3d3d 	teqcs	lr, sp, lsr sp
    5ce0:	01000702 	tsteq	r0, r2, lsl #14
    5ce4:	02050001 	andeq	r0, r5, #1
    5ce8:	080093a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, ip, pc}
    5cec:	0101c003 	tsteq	r1, r3
    5cf0:	2f02043d 	svccs	0x0002043d
    5cf4:	09030104 	stmdbeq	r3, {r2, r8}
    5cf8:	04020090 	streq	r0, [r2], #-144	; 0xffffff70
    5cfc:	06200601 	strteq	r0, [r0], -r1, lsl #12
    5d00:	023c0a03 	eorseq	r0, ip, #12288	; 0x3000
    5d04:	01010005 	tsteq	r1, r5
    5d08:	e0020500 	and	r0, r2, r0, lsl #10
    5d0c:	03080093 	movweq	r0, #32915	; 0x8093
    5d10:	130101d9 	movwne	r0, #4569	; 0x11d9
    5d14:	20080f03 	andcs	r0, r8, r3, lsl #30
    5d18:	01000102 	tsteq	r0, r2, lsl #2
    5d1c:	02050001 	andeq	r0, r5, #1
    5d20:	08009408 	stmdaeq	r0, {r3, sl, ip, pc}
    5d24:	0101ed03 	tsteq	r1, r3, lsl #26
    5d28:	c80c0313 	stmdagt	ip, {r0, r1, r4, r8, r9}
    5d2c:	01000302 	tsteq	r0, r2, lsl #6
    5d30:	02050001 	andeq	r0, r5, #1
    5d34:	08009428 	stmdaeq	r0, {r3, r5, sl, ip, pc}
    5d38:	01028103 	tsteq	r2, r3, lsl #2
    5d3c:	2e00c403 	cdpcs	4, 0, cr12, cr0, cr3, {0}
    5d40:	3f316a67 	svccc	0x00316a67
    5d44:	21312f36 	teqcs	r1, r6, lsr pc
    5d48:	01000602 	tsteq	r0, r2, lsl #12
    5d4c:	02050001 	andeq	r0, r5, #1
    5d50:	00000000 	andeq	r0, r0, r0
    5d54:	0102e103 	tsteq	r2, r3, lsl #2
    5d58:	00040232 	andeq	r0, r4, r2, lsr r2
    5d5c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5d60:	00946802 	addseq	r6, r4, r2, lsl #16
    5d64:	02e90308 	rsceq	r0, r9, #8, 6	; 0x20000000
    5d68:	03020401 	movweq	r0, #9217	; 0x2401
    5d6c:	043c7ed9 	ldrteq	r7, [ip], #-3801	; 0xfffff127
    5d70:	01a90301 			; <UNDEFINED> instruction: 0x01a90301
    5d74:	580b0390 	stmdapl	fp, {r4, r7, r8, r9}
    5d78:	01000702 	tsteq	r0, r2, lsl #14
    5d7c:	02050001 	andeq	r0, r5, #1
    5d80:	08009498 	stmdaeq	r0, {r3, r4, r7, sl, ip, pc}
    5d84:	0102fa03 	tsteq	r2, r3, lsl #20	; <UNPREDICTABLE>
    5d88:	0204593e 	andeq	r5, r4, #1015808	; 0xf8000
    5d8c:	667ee703 	ldrbtvs	lr, [lr], -r3, lsl #14
    5d90:	9d030104 	stflss	f0, [r3, #-16]
    5d94:	07023c01 	streq	r3, [r2, -r1, lsl #24]
    5d98:	00010100 	andeq	r0, r1, r0, lsl #2
    5d9c:	94d00205 	ldrbls	r0, [r0], #517	; 0x205
    5da0:	85030800 	strhi	r0, [r3, #-2048]	; 0xfffff800
    5da4:	03150103 	tsteq	r5, #-1073741824	; 0xc0000000
    5da8:	0122021e 			; <UNDEFINED> instruction: 0x0122021e
    5dac:	01000102 	tsteq	r0, r2, lsl #2
    5db0:	02050001 	andeq	r0, r5, #1
    5db4:	08009518 	stmdaeq	r0, {r3, r4, r8, sl, ip, pc}
    5db8:	0103aa03 	tsteq	r3, r3, lsl #20
    5dbc:	98030204 	stmdals	r3, {r2, r9}
    5dc0:	01043c7e 	tsteq	r4, lr, ror ip
    5dc4:	9001f003 	andls	pc, r1, r3
    5dc8:	0302045c 	movweq	r0, #9308	; 0x245c
    5dcc:	04667eae 	strbteq	r7, [r6], #-3758	; 0xfffff152
    5dd0:	01d60301 	bicseq	r0, r6, r1, lsl #6
    5dd4:	0006023c 	andeq	r0, r6, ip, lsr r2
    5dd8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5ddc:	00955802 	addseq	r5, r5, r2, lsl #16
    5de0:	04e90308 	strbteq	r0, [r9], #776	; 0x308
    5de4:	2e0b0301 	cdpcs	3, 0, cr0, cr11, cr1, {0}
    5de8:	3d3d3f3d 	ldccc	15, cr3, [sp, #-244]!	; 0xffffff0c
    5dec:	01000c02 	tsteq	r0, r2, lsl #24
    5df0:	00013801 	andeq	r3, r1, r1, lsl #16
    5df4:	d5000200 	strle	r0, [r0, #-512]	; 0xfffffe00
    5df8:	02000000 	andeq	r0, r0, #0
    5dfc:	0d0efb01 	vstreq	d15, [lr, #-4]
    5e00:	01010100 	mrseq	r0, (UNDEF: 17)
    5e04:	00000001 	andeq	r0, r0, r1
    5e08:	01000001 	tsteq	r0, r1
    5e0c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5d58 <_Min_Stack_Size+0x5b58>
    5e10:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    5e14:	76737572 			; <UNDEFINED> instruction: 0x76737572
    5e18:	4144542f 	cmpmi	r4, pc, lsr #8
    5e1c:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    5e20:	2f544f49 	svccs	0x00544f49
    5e24:	702f534f 	eorvc	r5, pc, pc, asr #6
    5e28:	6174726f 	cmnvs	r4, pc, ror #4
    5e2c:	2f656c62 	svccs	0x00656c62
    5e30:	4d6d654d 	cfstr64mi	mvdx6, [sp, #-308]!	; 0xfffffecc
    5e34:	00676e61 	rsbeq	r6, r7, r1, ror #28
    5e38:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    5e3c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5e40:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    5e44:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    5e48:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5e4c:	61652d65 	cmnvs	r5, r5, ror #26
    5e50:	352f6962 	strcc	r6, [pc, #-2402]!	; 54f6 <_Min_Stack_Size+0x52f6>
    5e54:	312e342e 			; <UNDEFINED> instruction: 0x312e342e
    5e58:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5e5c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5e60:	73752f00 	cmnvc	r5, #0, 30
    5e64:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    5e68:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5e6c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    5e70:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5e74:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    5e78:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    5e7c:	73752f00 	cmnvc	r5, #0, 30
    5e80:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    5e84:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5e88:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    5e8c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5e90:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    5e94:	65680000 	strbvs	r0, [r8, #-0]!
    5e98:	315f7061 	cmpcc	pc, r1, rrx
    5e9c:	0100632e 	tsteq	r0, lr, lsr #6
    5ea0:	74730000 	ldrbtvc	r0, [r3], #-0
    5ea4:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    5ea8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5eac:	645f0000 	ldrbvs	r0, [pc], #-0	; 5eb4 <_Min_Stack_Size+0x5cb4>
    5eb0:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    5eb4:	745f746c 	ldrbvc	r7, [pc], #-1132	; 5ebc <_Min_Stack_Size+0x5cbc>
    5eb8:	73657079 	cmnvc	r5, #121	; 0x79
    5ebc:	0300682e 	movweq	r6, #2094	; 0x82e
    5ec0:	735f0000 	cmpvc	pc, #0
    5ec4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    5ec8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5ecc:	00000004 	andeq	r0, r0, r4
    5ed0:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    5ed4:	03080095 	movweq	r0, #32917	; 0x8095
    5ed8:	4b0100c5 	blmi	461f4 <_Min_Stack_Size+0x45ff4>
    5edc:	305d5b34 	subscc	r5, sp, r4, lsr fp
    5ee0:	02006a4d 	andeq	r6, r0, #315392	; 0x4d000
    5ee4:	00830104 	addeq	r0, r3, r4, lsl #2
    5ee8:	65010402 	strvs	r0, [r1, #-1026]	; 0xfffffbfe
    5eec:	036b6733 	cmneq	fp, #13369344	; 0xcc0000
    5ef0:	02212e0c 	eoreq	r2, r1, #12, 28	; 0xc0
    5ef4:	0101000b 	tsteq	r1, fp
    5ef8:	18020500 	stmdane	r2, {r8, sl}
    5efc:	03080096 	movweq	r0, #32918	; 0x8096
    5f00:	520100f9 	andpl	r0, r1, #249	; 0xf9
    5f04:	01000502 	tsteq	r0, r2, lsl #10
    5f08:	02050001 	andeq	r0, r5, #1
    5f0c:	00000000 	andeq	r0, r0, r0
    5f10:	01018503 	tsteq	r1, r3, lsl #10
    5f14:	07023d30 	smladxeq	r2, r0, sp, r3
    5f18:	00010100 	andeq	r0, r1, r0, lsl #2
    5f1c:	00000205 	andeq	r0, r0, r5, lsl #4
    5f20:	8c030000 	stchi	0, cr0, [r3], {-0}
    5f24:	592f0101 	stmdbpl	pc!, {r0, r8}	; <UNPREDICTABLE>
    5f28:	01000702 	tsteq	r0, r2, lsl #14
    5f2c:	0000b701 	andeq	fp, r0, r1, lsl #14
    5f30:	53000200 	movwpl	r0, #512	; 0x200
    5f34:	02000000 	andeq	r0, r0, #0
    5f38:	0d0efb01 	vstreq	d15, [lr, #-4]
    5f3c:	01010100 	mrseq	r0, (UNDEF: 17)
    5f40:	00000001 	andeq	r0, r0, r1
    5f44:	01000001 	tsteq	r0, r1
    5f48:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5f4c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5f50:	2f2e2e2f 	svccs	0x002e2e2f
    5f54:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5f58:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5f5c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5f60:	2f62696c 	svccs	0x0062696c
    5f64:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5f68:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    5f6c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    5f70:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    5f74:	656d0000 	strbvs	r0, [sp, #-0]!
    5f78:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    5f7c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    5f80:	2e6d3776 	mcrcs	7, 3, r3, cr13, cr6, {3}
    5f84:	00010053 	andeq	r0, r1, r3, asr r0
    5f88:	05000000 	streq	r0, [r0, #-0]
    5f8c:	00011002 	andeq	r1, r1, r2
    5f90:	00df0308 	sbcseq	r0, pc, r8, lsl #6
    5f94:	2f2f2401 	svccs	0x002f2401
    5f98:	0d032123 	stfeqs	f2, [r3, #-140]	; 0xffffff74
    5f9c:	21e50820 	mvncs	r0, r0, lsr #16
    5fa0:	21232122 			; <UNDEFINED> instruction: 0x21232122
    5fa4:	83200d03 			; <UNDEFINED> instruction: 0x83200d03
    5fa8:	23212221 			; <UNDEFINED> instruction: 0x23212221
    5fac:	2f2f2521 	svccs	0x002f2521
    5fb0:	22212321 	eorcs	r2, r1, #-2080374784	; 0x84000000
    5fb4:	302f2121 	eorcc	r2, pc, r1, lsr #2
    5fb8:	0a032122 	beq	ce448 <_Min_Stack_Size+0xce248>
    5fbc:	0c032420 	cfstrseq	mvf2, [r3], {32}
    5fc0:	2123212e 			; <UNDEFINED> instruction: 0x2123212e
    5fc4:	2f200f03 	svccs	0x00200f03
    5fc8:	21222f22 			; <UNDEFINED> instruction: 0x21222f22
    5fcc:	23302f21 	teqcs	r0, #33, 30	; 0x84
    5fd0:	c0032f2f 	andgt	r2, r3, pc, lsr #30
    5fd4:	23212000 			; <UNDEFINED> instruction: 0x23212000
    5fd8:	222f2f21 	eorcs	r2, pc, #33, 30	; 0x84
    5fdc:	21212121 			; <UNDEFINED> instruction: 0x21212121
    5fe0:	02242321 	eoreq	r2, r4, #-2080374784	; 0x84000000
    5fe4:	01010001 	tsteq	r1, r1
    5fe8:	0000010a 	andeq	r0, r0, sl, lsl #2
    5fec:	00c40002 	sbceq	r0, r4, r2
    5ff0:	01020000 	mrseq	r0, (UNDEF: 2)
    5ff4:	000d0efb 	strdeq	r0, [sp], -fp
    5ff8:	01010101 	tsteq	r1, r1, lsl #2
    5ffc:	01000000 	mrseq	r0, (UNDEF: 0)
    6000:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    6004:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6008:	2f2e2e2f 	svccs	0x002e2e2f
    600c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6010:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6014:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6018:	2f62696c 	svccs	0x0062696c
    601c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    6020:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    6024:	00676e69 	rsbeq	r6, r7, r9, ror #28
    6028:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    602c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6030:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    6034:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    6038:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    603c:	61652d65 	cmnvs	r5, r5, ror #26
    6040:	352f6962 	strcc	r6, [pc, #-2402]!	; 56e6 <_Min_Stack_Size+0x54e6>
    6044:	312e342e 			; <UNDEFINED> instruction: 0x312e342e
    6048:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    604c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6050:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    6054:	2f646c69 	svccs	0x00646c69
    6058:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    605c:	582d6269 	stmdapl	sp!, {r0, r3, r5, r6, r9, sp, lr}
    6060:	317a7541 	cmncc	sl, r1, asr #10
    6064:	656e2f50 	strbvs	r2, [lr, #-3920]!	; 0xfffff0b0
    6068:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    606c:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    6070:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    6074:	30363130 	eorscc	r3, r6, r0, lsr r1
    6078:	2f373235 	svccs	0x00373235
    607c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6080:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5ee4 <_Min_Stack_Size+0x5ce4>
    6084:	2f636269 	svccs	0x00636269
    6088:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    608c:	00656475 	rsbeq	r6, r5, r5, ror r4
    6090:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    6094:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
    6098:	00010063 	andeq	r0, r1, r3, rrx
    609c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    60a0:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    60a4:	00020068 	andeq	r0, r2, r8, rrx
    60a8:	72747300 	rsbsvc	r7, r4, #0, 6
    60ac:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    60b0:	00030068 	andeq	r0, r3, r8, rrx
    60b4:	05000000 	streq	r0, [r0, #-0]
    60b8:	0001fc02 	andeq	pc, r1, r2, lsl #24
    60bc:	01300308 	teqeq	r0, r8, lsl #6
    60c0:	30200a03 	eorcc	r0, r0, r3, lsl #20
    60c4:	03362b91 	teqeq	r6, #148480	; 0x24400
    60c8:	12032e75 	andne	r2, r3, #1872	; 0x750
    60cc:	331b3420 	tstcc	fp, #32, 8	; 0x20000000
    60d0:	207a0350 	rsbscs	r0, sl, r0, asr r3
    60d4:	2f2f2f22 	svccs	0x002f2f22
    60d8:	82090345 	andhi	r0, r9, #335544321	; 0x14000001
    60dc:	033c7703 	teqeq	ip, #786432	; 0xc0000
    60e0:	221d2e0c 	andscs	r2, sp, #12, 28	; 0xc0
    60e4:	820b032c 	andhi	r0, fp, #44, 6	; 0xb0000000
    60e8:	03322d3d 	teqeq	r2, #3904	; 0xf40
    60ec:	77032e53 	smlsdvc	r3, r3, lr, r2
    60f0:	00020220 	andeq	r0, r2, r0, lsr #4
    60f4:	016d0101 	cmneq	sp, r1, lsl #2
    60f8:	00020000 	andeq	r0, r2, r0
    60fc:	00000126 	andeq	r0, r0, r6, lsr #2
    6100:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6104:	0101000d 	tsteq	r1, sp
    6108:	00000101 	andeq	r0, r0, r1, lsl #2
    610c:	00000100 	andeq	r0, r0, r0, lsl #2
    6110:	2f2e2e01 	svccs	0x002e2e01
    6114:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6118:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    611c:	2f2e2e2f 	svccs	0x002e2e2f
    6120:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    6124:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    6128:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    612c:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    6130:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    6134:	622f0062 	eorvs	r0, pc, #98	; 0x62
    6138:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    613c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6140:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    6144:	7a754158 	bvc	1d566ac <_Min_Stack_Size+0x1d564ac>
    6148:	6e2f5031 	mcrvs	0, 1, r5, cr15, cr1, {1}
    614c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    6150:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    6154:	2e302e34 	mrccs	14, 1, r2, cr0, cr4, {1}
    6158:	36313032 			; <UNDEFINED> instruction: 0x36313032
    615c:	37323530 			; <UNDEFINED> instruction: 0x37323530
    6160:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6164:	2f62696c 	svccs	0x0062696c
    6168:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    616c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6170:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6174:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    6178:	73752f00 	cmnvc	r5, #0, 30
    617c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    6180:	63672f62 	cmnvs	r7, #392	; 0x188
    6184:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    6188:	6f6e2d6d 	svcvs	0x006e2d6d
    618c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6190:	2f696261 	svccs	0x00696261
    6194:	2e342e35 	mrccs	14, 1, r2, cr4, cr5, {1}
    6198:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    619c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    61a0:	622f0065 	eorvs	r0, pc, #101	; 0x65
    61a4:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    61a8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    61ac:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    61b0:	7a754158 	bvc	1d56718 <_Min_Stack_Size+0x1d56518>
    61b4:	6e2f5031 	mcrvs	0, 1, r5, cr15, cr1, {1}
    61b8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    61bc:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    61c0:	2e302e34 	mrccs	14, 1, r2, cr0, cr4, {1}
    61c4:	36313032 			; <UNDEFINED> instruction: 0x36313032
    61c8:	37323530 			; <UNDEFINED> instruction: 0x37323530
    61cc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    61d0:	2f62696c 	svccs	0x0062696c
    61d4:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    61d8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    61dc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    61e0:	61720000 	cmnvs	r2, r0
    61e4:	632e646e 			; <UNDEFINED> instruction: 0x632e646e
    61e8:	00000100 	andeq	r0, r0, r0, lsl #2
    61ec:	6b636f6c 	blvs	18e1fa4 <_Min_Stack_Size+0x18e1da4>
    61f0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    61f4:	745f0000 	ldrbvc	r0, [pc], #-0	; 61fc <_Min_Stack_Size+0x5ffc>
    61f8:	73657079 	cmnvc	r5, #121	; 0x79
    61fc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6200:	74730000 	ldrbtvc	r0, [r3], #-0
    6204:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    6208:	0300682e 	movweq	r6, #2094	; 0x82e
    620c:	65720000 	ldrbvs	r0, [r2, #-0]!
    6210:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    6214:	00020068 	andeq	r0, r2, r8, rrx
    6218:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    621c:	2e62696c 	vnmulcs.f16	s13, s4, s25	; <UNPREDICTABLE>
    6220:	00040068 	andeq	r0, r4, r8, rrx
    6224:	05000000 	streq	r0, [r0, #-0]
    6228:	00029802 	andeq	r9, r2, r2, lsl #16
    622c:	00c90308 	sbceq	r0, r9, r8, lsl #6
    6230:	211f2f01 	tstcs	pc, r1, lsl #30
    6234:	02002f22 	andeq	r2, r0, #34, 30	; 0x88
    6238:	00570104 	subseq	r0, r7, r4, lsl #2
    623c:	08010402 	stmdaeq	r1, {r1, sl}
    6240:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
    6244:	02001f01 	andeq	r1, r0, #1, 30
    6248:	6b750104 	blvs	1d46660 <_Min_Stack_Size+0x1d46460>
    624c:	2108332f 	tstcs	r8, pc, lsr #6
    6250:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    6254:	02002a01 	andeq	r2, r0, #4096	; 0x1000
    6258:	25020104 	strcs	r0, [r2, #-260]	; 0xfffffefc
    625c:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    6260:	0f023101 	svceq	0x00023101
    6264:	ef010100 	svc	0x00010100
    6268:	02000001 	andeq	r0, r0, #1
    626c:	00014d00 	andeq	r4, r1, r0, lsl #26
    6270:	fb010200 	blx	46a7a <_Min_Stack_Size+0x4687a>
    6274:	01000d0e 	tsteq	r0, lr, lsl #26
    6278:	00010101 	andeq	r0, r1, r1, lsl #2
    627c:	00010000 	andeq	r0, r1, r0
    6280:	2e2e0100 	sufcse	f0, f6, f0
    6284:	2f2e2e2f 	svccs	0x002e2e2f
    6288:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    628c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6290:	2f2e2e2f 	svccs	0x002e2e2f
    6294:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6298:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 60fc <_Min_Stack_Size+0x5efc>
    629c:	2f636269 	svccs	0x00636269
    62a0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    62a4:	752f006f 	strvc	r0, [pc, #-111]!	; 623d <_Min_Stack_Size+0x603d>
    62a8:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 60e4 <_Min_Stack_Size+0x5ee4>
    62ac:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    62b0:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    62b4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    62b8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    62bc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    62c0:	342e352f 	strtcc	r3, [lr], #-1327	; 0xfffffad1
    62c4:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    62c8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    62cc:	2f006564 	svccs	0x00006564
    62d0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    62d4:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    62d8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    62dc:	7541582d 	strbvc	r5, [r1, #-2093]	; 0xfffff7d3
    62e0:	2f50317a 	svccs	0x0050317a
    62e4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    62e8:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    62ec:	302e342e 	eorcc	r3, lr, lr, lsr #8
    62f0:	3130322e 	teqcc	r0, lr, lsr #4
    62f4:	32353036 	eorscc	r3, r5, #54	; 0x36
    62f8:	656e2f37 	strbvs	r2, [lr, #-3895]!	; 0xfffff0c9
    62fc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6300:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6304:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    6308:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    630c:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    6310:	622f0073 	eorvs	r0, pc, #115	; 0x73
    6314:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    6318:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    631c:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    6320:	7a754158 	bvc	1d56888 <_Min_Stack_Size+0x1d56688>
    6324:	6e2f5031 	mcrvs	0, 1, r5, cr15, cr1, {1}
    6328:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    632c:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    6330:	2e302e34 	mrccs	14, 1, r2, cr0, cr4, {1}
    6334:	36313032 			; <UNDEFINED> instruction: 0x36313032
    6338:	37323530 			; <UNDEFINED> instruction: 0x37323530
    633c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6340:	2f62696c 	svccs	0x0062696c
    6344:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    6348:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    634c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6350:	6e730000 	cdpvs	0, 7, cr0, cr3, cr0, {0}
    6354:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    6358:	632e6674 			; <UNDEFINED> instruction: 0x632e6674
    635c:	00000100 	andeq	r0, r0, r0, lsl #2
    6360:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    6364:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    6368:	00000200 	andeq	r0, r0, r0, lsl #4
    636c:	6b636f6c 	blvs	18e2124 <_Min_Stack_Size+0x18e1f24>
    6370:	0300682e 	movweq	r6, #2094	; 0x82e
    6374:	745f0000 	ldrbvc	r0, [pc], #-0	; 637c <_Min_Stack_Size+0x617c>
    6378:	73657079 	cmnvc	r5, #121	; 0x79
    637c:	0300682e 	movweq	r6, #2094	; 0x82e
    6380:	65720000 	ldrbvs	r0, [r2, #-0]!
    6384:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    6388:	00030068 	andeq	r0, r3, r8, rrx
    638c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    6390:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    6394:	00020068 	andeq	r0, r2, r8, rrx
    6398:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    639c:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    63a0:	003e6e69 	eorseq	r6, lr, r9, ror #28
    63a4:	73000000 	movwvc	r0, #0
    63a8:	6f696474 	svcvs	0x00696474
    63ac:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    63b0:	6f6c0000 	svcvs	0x006c0000
    63b4:	2e6c6163 	powcsez	f6, f4, f3
    63b8:	00010068 	andeq	r0, r1, r8, rrx
    63bc:	05000000 	streq	r0, [r0, #-0]
    63c0:	00039c02 	andeq	r9, r3, r2, lsl #24
    63c4:	012e0308 			; <UNDEFINED> instruction: 0x012e0308
    63c8:	25251b33 	strcs	r1, [r5, #-2867]!	; 0xfffff4cd
    63cc:	30312d4b 	eorscc	r2, r1, fp, asr #26
    63d0:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    63d4:	00200601 	eoreq	r0, r0, r1, lsl #12
    63d8:	06010402 	streq	r0, [r1], -r2, lsl #8
    63dc:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
    63e0:	3c790301 	ldclcc	3, cr0, [r9], #-4
    63e4:	01040200 	mrseq	r0, R12_usr
    63e8:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    63ec:	02003001 	andeq	r3, r0, #1
    63f0:	00240104 	eoreq	r0, r4, r4, lsl #2
    63f4:	30010402 	andcc	r0, r1, r2, lsl #8
    63f8:	79033e31 	stmdbvc	r3, {r0, r4, r5, r9, sl, fp, ip, sp}
    63fc:	3c790358 	ldclcc	3, cr0, [r9], #-352	; 0xfffffea0
    6400:	3024302f 	eorcc	r3, r4, pc, lsr #32
    6404:	035c5433 	cmpeq	ip, #855638016	; 0x33000000
    6408:	032f586d 			; <UNDEFINED> instruction: 0x032f586d
    640c:	22323c29 	eorscs	r3, r2, #10496	; 0x2900
    6410:	24207a03 	strtcs	r7, [r0], #-2563	; 0xfffff5fd
    6414:	2d3d2522 	cfldr32cs	mvfx2, [sp, #-136]!	; 0xffffff78
    6418:	001d3031 	andseq	r3, sp, r1, lsr r0
    641c:	06010402 	streq	r0, [r1], -r2, lsl #8
    6420:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    6424:	00270601 	eoreq	r0, r7, r1, lsl #12
    6428:	03010402 	movweq	r0, #5122	; 0x1402
    642c:	02004a79 	andeq	r4, r0, #495616	; 0x79000
    6430:	002f0104 	eoreq	r0, pc, r4, lsl #2
    6434:	30010402 	andcc	r0, r1, r2, lsl #8
    6438:	01040200 	mrseq	r0, R12_usr
    643c:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
    6440:	3e313001 	cdpcc	0, 3, cr3, cr1, cr1, {0}
    6444:	03587903 	cmpeq	r8, #49152	; 0xc000
    6448:	302f4a79 	eorcc	r4, pc, r9, ror sl	; <UNPREDICTABLE>
    644c:	54333024 	ldrtpl	r3, [r3], #-36	; 0xffffffdc
    6450:	586d035c 	stmdapl	sp!, {r2, r3, r4, r6, r8, r9}^
    6454:	0006022f 	andeq	r0, r6, pc, lsr #4
    6458:	00d60101 	sbcseq	r0, r6, r1, lsl #2
    645c:	00020000 	andeq	r0, r2, r0
    6460:	0000008f 	andeq	r0, r0, pc, lsl #1
    6464:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6468:	0101000d 	tsteq	r1, sp
    646c:	00000101 	andeq	r0, r0, r1, lsl #2
    6470:	00000100 	andeq	r0, r0, r0, lsl #2
    6474:	2f2e2e01 	svccs	0x002e2e01
    6478:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    647c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6480:	2f2e2e2f 	svccs	0x002e2e2f
    6484:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    6488:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    648c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    6490:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    6494:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    6498:	622f0067 	eorvs	r0, pc, #103	; 0x67
    649c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    64a0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    64a4:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    64a8:	7a754158 	bvc	1d56a10 <_Min_Stack_Size+0x1d56810>
    64ac:	6e2f5031 	mcrvs	0, 1, r5, cr15, cr1, {1}
    64b0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    64b4:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    64b8:	2e302e34 	mrccs	14, 1, r2, cr0, cr4, {1}
    64bc:	36313032 			; <UNDEFINED> instruction: 0x36313032
    64c0:	37323530 			; <UNDEFINED> instruction: 0x37323530
    64c4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    64c8:	2f62696c 	svccs	0x0062696c
    64cc:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    64d0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    64d4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    64d8:	74730000 	ldrbtvc	r0, [r3], #-0
    64dc:	72686372 	rsbvc	r6, r8, #-939524095	; 0xc8000001
    64e0:	0100632e 	tsteq	r0, lr, lsr #6
    64e4:	74730000 	ldrbtvc	r0, [r3], #-0
    64e8:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    64ec:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    64f0:	00000000 	andeq	r0, r0, r0
    64f4:	04c00205 	strbeq	r0, [r0], #517	; 0x205
    64f8:	3f030800 	svccc	0x00030800
    64fc:	20090301 	andcs	r0, r9, r1, lsl #6
    6500:	303c1403 	eorscc	r1, ip, r3, lsl #8
    6504:	2a4c483e 	bcs	1318604 <_Min_Stack_Size+0x1318404>
    6508:	207a0326 	rsbscs	r0, sl, r6, lsr #6
    650c:	4d200b03 	fstmdbxmi	r0!, {d0}	;@ Deprecated
    6510:	0b033f1d 	bleq	d618c <_Min_Stack_Size+0xd5f8c>
    6514:	500395f2 	strdpl	r9, [r3], -r2
    6518:	248e302e 	strcs	r3, [lr], #46	; 0x2e
    651c:	1608281c 			; <UNDEFINED> instruction: 0x1608281c
    6520:	03742403 	cmneq	r4, #50331648	; 0x3000000
    6524:	1b032e65 	blne	d1ec0 <_Min_Stack_Size+0xd1cc0>
    6528:	2e650320 	cdpcs	3, 6, cr0, cr5, cr0, {1}
    652c:	02201b03 	eoreq	r1, r0, #3072	; 0xc00
    6530:	01010002 	tsteq	r1, r2
    6534:	000000ad 	andeq	r0, r0, sp, lsr #1
    6538:	00970002 	addseq	r0, r7, r2
    653c:	01020000 	mrseq	r0, (UNDEF: 2)
    6540:	000d0efb 	strdeq	r0, [sp], -fp
    6544:	01010101 	tsteq	r1, r1, lsl #2
    6548:	01000000 	mrseq	r0, (UNDEF: 0)
    654c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    6550:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6554:	2f2e2e2f 	svccs	0x002e2e2f
    6558:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    655c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6560:	2f2e2e2f 	svccs	0x002e2e2f
    6564:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6568:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 63cc <_Min_Stack_Size+0x61cc>
    656c:	2f636269 	svccs	0x00636269
    6570:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    6574:	2f656e69 	svccs	0x00656e69
    6578:	006d7261 	rsbeq	r7, sp, r1, ror #4
    657c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    6580:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    6584:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    6588:	41582d62 	cmpmi	r8, r2, ror #26
    658c:	50317a75 	eorspl	r7, r1, r5, ror sl
    6590:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6594:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    6598:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    659c:	30322e30 	eorscc	r2, r2, r0, lsr lr
    65a0:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    65a4:	6e2f3732 	mcrvs	7, 1, r3, cr15, cr2, {1}
    65a8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    65ac:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    65b0:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    65b4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    65b8:	00006564 	andeq	r6, r0, r4, ror #10
    65bc:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
    65c0:	632e7970 			; <UNDEFINED> instruction: 0x632e7970
    65c4:	00000100 	andeq	r0, r0, r0, lsl #2
    65c8:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    65cc:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    65d0:	00000200 	andeq	r0, r0, r0, lsl #4
    65d4:	02050000 	andeq	r0, r5, #0
    65d8:	08000590 	stmdaeq	r0, {r4, r7, r8, sl}
    65dc:	13012a03 	movwne	r2, #6659	; 0x1a03
    65e0:	01005d02 	tsteq	r0, r2, lsl #26
    65e4:	0000e701 	andeq	lr, r0, r1, lsl #14
    65e8:	d1000200 	mrsle	r0, R8_usr
    65ec:	02000000 	andeq	r0, r0, #0
    65f0:	0d0efb01 	vstreq	d15, [lr, #-4]
    65f4:	01010100 	mrseq	r0, (UNDEF: 17)
    65f8:	00000001 	andeq	r0, r0, r1
    65fc:	01000001 	tsteq	r0, r1
    6600:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6604:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6608:	2f2e2e2f 	svccs	0x002e2e2f
    660c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6610:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6614:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6618:	2f62696c 	svccs	0x0062696c
    661c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    6620:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    6624:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    6628:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    662c:	73752f00 	cmnvc	r5, #0, 30
    6630:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    6634:	63672f62 	cmnvs	r7, #392	; 0x188
    6638:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    663c:	6f6e2d6d 	svcvs	0x006e2d6d
    6640:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6644:	2f696261 	svccs	0x00696261
    6648:	2e342e35 	mrccs	14, 1, r2, cr4, cr5, {1}
    664c:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    6650:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6654:	622f0065 	eorvs	r0, pc, #101	; 0x65
    6658:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    665c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6660:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    6664:	7a754158 	bvc	1d56bcc <_Min_Stack_Size+0x1d569cc>
    6668:	6e2f5031 	mcrvs	0, 1, r5, cr15, cr1, {1}
    666c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    6670:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    6674:	2e302e34 	mrccs	14, 1, r2, cr0, cr4, {1}
    6678:	36313032 			; <UNDEFINED> instruction: 0x36313032
    667c:	37323530 			; <UNDEFINED> instruction: 0x37323530
    6680:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6684:	2f62696c 	svccs	0x0062696c
    6688:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    668c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6690:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6694:	74730000 	ldrbtvc	r0, [r3], #-0
    6698:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
    669c:	7574732d 	ldrbvc	r7, [r4, #-813]!	; 0xfffffcd3
    66a0:	00632e62 	rsbeq	r2, r3, r2, ror #28
    66a4:	73000001 	movwvc	r0, #1
    66a8:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    66ac:	00682e66 	rsbeq	r2, r8, r6, ror #28
    66b0:	73000002 	movwvc	r0, #2
    66b4:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    66b8:	00682e67 	rsbeq	r2, r8, r7, ror #28
    66bc:	00000003 	andeq	r0, r0, r3
    66c0:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    66c4:	03080006 	movweq	r0, #32774	; 0x8006
    66c8:	02130137 	andseq	r0, r3, #-1073741811	; 0xc000000d
    66cc:	0101002e 	tsteq	r1, lr, lsr #32
    66d0:	0000013d 	andeq	r0, r0, sp, lsr r1
    66d4:	00c50002 	sbceq	r0, r5, r2
    66d8:	01020000 	mrseq	r0, (UNDEF: 2)
    66dc:	000d0efb 	strdeq	r0, [sp], -fp
    66e0:	01010101 	tsteq	r1, r1, lsl #2
    66e4:	01000000 	mrseq	r0, (UNDEF: 0)
    66e8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    66ec:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    66f0:	2f2e2e2f 	svccs	0x002e2e2f
    66f4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    66f8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    66fc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6700:	2f62696c 	svccs	0x0062696c
    6704:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    6708:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    670c:	00676e69 	rsbeq	r6, r7, r9, ror #28
    6710:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    6714:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6718:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    671c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    6720:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6724:	61652d65 	cmnvs	r5, r5, ror #26
    6728:	352f6962 	strcc	r6, [pc, #-2402]!	; 5dce <_Min_Stack_Size+0x5bce>
    672c:	312e342e 			; <UNDEFINED> instruction: 0x312e342e
    6730:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6734:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6738:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    673c:	2f646c69 	svccs	0x00646c69
    6740:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6744:	582d6269 	stmdapl	sp!, {r0, r3, r5, r6, r9, sp, lr}
    6748:	317a7541 	cmncc	sl, r1, asr #10
    674c:	656e2f50 	strbvs	r2, [lr, #-3920]!	; 0xfffff0b0
    6750:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6754:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    6758:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    675c:	30363130 	eorscc	r3, r6, r0, lsr r1
    6760:	2f373235 	svccs	0x00373235
    6764:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6768:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 65cc <_Min_Stack_Size+0x63cc>
    676c:	2f636269 	svccs	0x00636269
    6770:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6774:	00656475 	rsbeq	r6, r5, r5, ror r4
    6778:	72747300 	rsbsvc	r7, r4, #0, 6
    677c:	706d636e 	rsbvc	r6, sp, lr, ror #6
    6780:	0100632e 	tsteq	r0, lr, lsr #6
    6784:	74730000 	ldrbtvc	r0, [r3], #-0
    6788:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    678c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6790:	74730000 	ldrbtvc	r0, [r3], #-0
    6794:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    6798:	0300682e 	movweq	r6, #2094	; 0x82e
    679c:	00000000 	andeq	r0, r0, r0
    67a0:	06a80205 	strteq	r0, [r8], r5, lsl #4
    67a4:	c1030800 	tstgt	r3, r0, lsl #16
    67a8:	12030100 	andne	r0, r3, #0, 2
    67ac:	6a033201 	bvs	d2fb8 <_Min_Stack_Size+0xd2db8>
    67b0:	2016034a 	andscs	r0, r6, sl, asr #6
    67b4:	02006c25 	andeq	r6, r0, #9472	; 0x2500
    67b8:	7a030104 	bvc	c6bd0 <_Min_Stack_Size+0xc69d0>
    67bc:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
    67c0:	02004201 	andeq	r4, r0, #268435456	; 0x10000000
    67c4:	7a030104 	bvc	c6bdc <_Min_Stack_Size+0xc69dc>
    67c8:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    67cc:	02002601 	andeq	r2, r0, #1048576	; 0x100000
    67d0:	7a030104 	bvc	c6be8 <_Min_Stack_Size+0xc69e8>
    67d4:	0200262e 	andeq	r2, r0, #48234496	; 0x2e00000
    67d8:	2e060104 	adfcss	f0, f6, f4
    67dc:	3c7a0306 	ldclcc	3, cr0, [sl], #-24	; 0xffffffe8
    67e0:	1f200a03 	svcne	0x00200a03
    67e4:	033c7703 	teqeq	ip, #786432	; 0xc0000
    67e8:	005c2012 	subseq	r2, ip, r2, lsl r0
    67ec:	06010402 	streq	r0, [r1], -r2, lsl #8
    67f0:	031c064a 	tsteq	ip, #77594624	; 0x4a00000
    67f4:	03227409 			; <UNDEFINED> instruction: 0x03227409
    67f8:	25032e5b 	strcs	r2, [r3, #-3675]	; 0xfffff1a5
    67fc:	205b0320 	subscs	r0, fp, r0, lsr #6
    6800:	03202503 			; <UNDEFINED> instruction: 0x03202503
    6804:	25032e5b 	strcs	r2, [r3, #-3675]	; 0xfffff1a5
    6808:	2e5b0320 	cdpcs	3, 5, cr0, cr11, cr0, {1}
    680c:	01000402 	tsteq	r0, r2, lsl #8
    6810:	00010501 	andeq	r0, r1, r1, lsl #10
    6814:	c5000200 	strgt	r0, [r0, #-512]	; 0xfffffe00
    6818:	02000000 	andeq	r0, r0, #0
    681c:	0d0efb01 	vstreq	d15, [lr, #-4]
    6820:	01010100 	mrseq	r0, (UNDEF: 17)
    6824:	00000001 	andeq	r0, r0, r1
    6828:	01000001 	tsteq	r0, r1
    682c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6830:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6834:	2f2e2e2f 	svccs	0x002e2e2f
    6838:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    683c:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    6840:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6844:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6848:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    684c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    6850:	73752f00 	cmnvc	r5, #0, 30
    6854:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    6858:	63672f62 	cmnvs	r7, #392	; 0x188
    685c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    6860:	6f6e2d6d 	svcvs	0x006e2d6d
    6864:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6868:	2f696261 	svccs	0x00696261
    686c:	2e342e35 	mrccs	14, 1, r2, cr4, cr5, {1}
    6870:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    6874:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6878:	622f0065 	eorvs	r0, pc, #101	; 0x65
    687c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    6880:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6884:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    6888:	7a754158 	bvc	1d56df0 <_Min_Stack_Size+0x1d56bf0>
    688c:	6e2f5031 	mcrvs	0, 1, r5, cr15, cr1, {1}
    6890:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    6894:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    6898:	2e302e34 	mrccs	14, 1, r2, cr0, cr4, {1}
    689c:	36313032 			; <UNDEFINED> instruction: 0x36313032
    68a0:	37323530 			; <UNDEFINED> instruction: 0x37323530
    68a4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    68a8:	2f62696c 	svccs	0x0062696c
    68ac:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    68b0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    68b4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    68b8:	74730000 	ldrbtvc	r0, [r3], #-0
    68bc:	70636e72 	rsbvc	r6, r3, r2, ror lr
    68c0:	00632e79 	rsbeq	r2, r3, r9, ror lr
    68c4:	73000001 	movwvc	r0, #1
    68c8:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    68cc:	00682e66 	rsbeq	r2, r8, r6, ror #28
    68d0:	73000002 	movwvc	r0, #2
    68d4:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    68d8:	00682e67 	rsbeq	r2, r8, r7, ror #28
    68dc:	00000003 	andeq	r0, r0, r3
    68e0:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
    68e4:	03080007 	movweq	r0, #32775	; 0x8007
    68e8:	030100c8 	movweq	r0, #4296	; 0x10c8
    68ec:	68030118 	stmdavs	r3, {r3, r4, r8}
    68f0:	2018033c 	andscs	r0, r8, ip, lsr r3
    68f4:	01040200 	mrseq	r0, R12_usr
    68f8:	02002006 	andeq	r2, r0, #6
    68fc:	5f060104 	svcpl	0x00060104
    6900:	39231e92 	stmdbcc	r3!, {r1, r4, r7, r9, sl, fp, ip}
    6904:	23200a03 			; <UNDEFINED> instruction: 0x23200a03
    6908:	2347211f 	movtcs	r2, #28959	; 0x711f
    690c:	2f4e212d 	svccs	0x004e212d
    6910:	5d03333b 	stcpl	3, cr3, [r3, #-236]	; 0xffffff14
    6914:	0002022e 	andeq	r0, r2, lr, lsr #4
    6918:	00e20101 	rsceq	r0, r2, r1, lsl #2
    691c:	00020000 	andeq	r0, r2, r0
    6920:	000000dc 	ldrdeq	r0, [r0], -ip
    6924:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6928:	0101000d 	tsteq	r1, sp
    692c:	00000101 	andeq	r0, r0, r1, lsl #2
    6930:	00000100 	andeq	r0, r0, r0, lsl #2
    6934:	75622f01 	strbvc	r2, [r2, #-3841]!	; 0xfffff0ff
    6938:	2f646c69 	svccs	0x00646c69
    693c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6940:	582d6269 	stmdapl	sp!, {r0, r3, r5, r6, r9, sp, lr}
    6944:	317a7541 	cmncc	sl, r1, asr #10
    6948:	656e2f50 	strbvs	r2, [lr, #-3920]!	; 0xfffff0b0
    694c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6950:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    6954:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    6958:	30363130 	eorscc	r3, r6, r0, lsr r1
    695c:	2f373235 	svccs	0x00373235
    6960:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6964:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 67c8 <_Min_Stack_Size+0x65c8>
    6968:	2f636269 	svccs	0x00636269
    696c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6970:	2f656475 	svccs	0x00656475
    6974:	00737973 	rsbseq	r7, r3, r3, ror r9
    6978:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    697c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6980:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    6984:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    6988:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    698c:	61652d65 	cmnvs	r5, r5, ror #26
    6990:	352f6962 	strcc	r6, [pc, #-2402]!	; 6036 <_Min_Stack_Size+0x5e36>
    6994:	312e342e 			; <UNDEFINED> instruction: 0x312e342e
    6998:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    699c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    69a0:	2f2e2e00 	svccs	0x002e2e00
    69a4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    69a8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    69ac:	2f2e2e2f 	svccs	0x002e2e2f
    69b0:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    69b4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    69b8:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    69bc:	722f6362 	eorvc	r6, pc, #-2013265919	; 0x88000001
    69c0:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    69c4:	6f6c0000 	svcvs	0x006c0000
    69c8:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    69cc:	00000100 	andeq	r0, r0, r0, lsl #2
    69d0:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    69d4:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    69d8:	00000100 	andeq	r0, r0, r0, lsl #2
    69dc:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    69e0:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    69e4:	00000200 	andeq	r0, r0, r0, lsl #4
    69e8:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    69ec:	00682e74 	rsbeq	r2, r8, r4, ror lr
    69f0:	69000001 	stmdbvs	r0, {r0}
    69f4:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    69f8:	00632e65 	rsbeq	r2, r3, r5, ror #28
    69fc:	00000003 	andeq	r0, r0, r3
    6a00:	00000141 	andeq	r0, r0, r1, asr #2
    6a04:	01280002 			; <UNDEFINED> instruction: 0x01280002
    6a08:	01020000 	mrseq	r0, (UNDEF: 2)
    6a0c:	000d0efb 	strdeq	r0, [sp], -fp
    6a10:	01010101 	tsteq	r1, r1, lsl #2
    6a14:	01000000 	mrseq	r0, (UNDEF: 0)
    6a18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    6a1c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6a20:	2f2e2e2f 	svccs	0x002e2e2f
    6a24:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6a28:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6a2c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6a30:	2f62696c 	svccs	0x0062696c
    6a34:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    6a38:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    6a3c:	0062696c 	rsbeq	r6, r2, ip, ror #18
    6a40:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    6a44:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6a48:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    6a4c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    6a50:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6a54:	61652d65 	cmnvs	r5, r5, ror #26
    6a58:	352f6962 	strcc	r6, [pc, #-2402]!	; 60fe <_Min_Stack_Size+0x5efe>
    6a5c:	312e342e 			; <UNDEFINED> instruction: 0x312e342e
    6a60:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6a64:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6a68:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    6a6c:	2f646c69 	svccs	0x00646c69
    6a70:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6a74:	582d6269 	stmdapl	sp!, {r0, r3, r5, r6, r9, sp, lr}
    6a78:	317a7541 	cmncc	sl, r1, asr #10
    6a7c:	656e2f50 	strbvs	r2, [lr, #-3920]!	; 0xfffff0b0
    6a80:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6a84:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    6a88:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    6a8c:	30363130 	eorscc	r3, r6, r0, lsr r1
    6a90:	2f373235 	svccs	0x00373235
    6a94:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6a98:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 68fc <_Min_Stack_Size+0x66fc>
    6a9c:	2f636269 	svccs	0x00636269
    6aa0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6aa4:	2f656475 	svccs	0x00656475
    6aa8:	00737973 	rsbseq	r7, r3, r3, ror r9
    6aac:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    6ab0:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    6ab4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    6ab8:	41582d62 	cmpmi	r8, r2, ror #26
    6abc:	50317a75 	eorspl	r7, r1, r5, ror sl
    6ac0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6ac4:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    6ac8:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    6acc:	30322e30 	eorscc	r2, r2, r0, lsr lr
    6ad0:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    6ad4:	6e2f3732 	mcrvs	7, 1, r3, cr15, cr2, {1}
    6ad8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    6adc:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    6ae0:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    6ae4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6ae8:	00006564 	andeq	r6, r0, r4, ror #10
    6aec:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    6af0:	632e636f 			; <UNDEFINED> instruction: 0x632e636f
    6af4:	00000100 	andeq	r0, r0, r0, lsl #2
    6af8:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    6afc:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    6b00:	00000200 	andeq	r0, r0, r0, lsl #4
    6b04:	6b636f6c 	blvs	18e28bc <_Min_Stack_Size+0x18e26bc>
    6b08:	0300682e 	movweq	r6, #2094	; 0x82e
    6b0c:	745f0000 	ldrbvc	r0, [pc], #-0	; 6b14 <_Min_Stack_Size+0x6914>
    6b10:	73657079 	cmnvc	r5, #121	; 0x79
    6b14:	0300682e 	movweq	r6, #2094	; 0x82e
    6b18:	65720000 	ldrbvs	r0, [r2, #-0]!
    6b1c:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    6b20:	00030068 	andeq	r0, r3, r8, rrx
    6b24:	6c616d00 	stclvs	13, cr6, [r1], #-0
    6b28:	2e636f6c 	cdpcs	15, 6, cr6, cr3, cr12, {3}
    6b2c:	00040068 	andeq	r0, r4, r8, rrx
    6b30:	05000000 	streq	r0, [r0, #-0]
    6b34:	0007ac02 	andeq	sl, r7, r2, lsl #24
    6b38:	01d50308 	bicseq	r0, r5, r8, lsl #6
    6b3c:	13881301 	orrne	r1, r8, #67108864	; 0x4000000
    6b40:	01000802 	tsteq	r0, r2, lsl #16
    6b44:	00014701 	andeq	r4, r1, r1, lsl #14
    6b48:	e3000200 	movw	r0, #512	; 0x200
    6b4c:	02000000 	andeq	r0, r0, #0
    6b50:	0d0efb01 	vstreq	d15, [lr, #-4]
    6b54:	01010100 	mrseq	r0, (UNDEF: 17)
    6b58:	00000001 	andeq	r0, r0, r1
    6b5c:	01000001 	tsteq	r0, r1
    6b60:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6b64:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6b68:	2f2e2e2f 	svccs	0x002e2e2f
    6b6c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6b70:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    6b74:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6b78:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6b7c:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    6b80:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    6b84:	73752f00 	cmnvc	r5, #0, 30
    6b88:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    6b8c:	63672f62 	cmnvs	r7, #392	; 0x188
    6b90:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    6b94:	6f6e2d6d 	svcvs	0x006e2d6d
    6b98:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6b9c:	2f696261 	svccs	0x00696261
    6ba0:	2e342e35 	mrccs	14, 1, r2, cr4, cr5, {1}
    6ba4:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    6ba8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6bac:	622f0065 	eorvs	r0, pc, #101	; 0x65
    6bb0:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    6bb4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6bb8:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    6bbc:	7a754158 	bvc	1d57124 <_Min_Stack_Size+0x1d56f24>
    6bc0:	6e2f5031 	mcrvs	0, 1, r5, cr15, cr1, {1}
    6bc4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    6bc8:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    6bcc:	2e302e34 	mrccs	14, 1, r2, cr0, cr4, {1}
    6bd0:	36313032 			; <UNDEFINED> instruction: 0x36313032
    6bd4:	37323530 			; <UNDEFINED> instruction: 0x37323530
    6bd8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6bdc:	2f62696c 	svccs	0x0062696c
    6be0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    6be4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6be8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6bec:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    6bf0:	616e0000 	cmnvs	lr, r0
    6bf4:	6d2d6f6e 	stcvs	15, cr6, [sp, #-440]!	; 0xfffffe48
    6bf8:	6f6c6c61 	svcvs	0x006c6c61
    6bfc:	632e7263 			; <UNDEFINED> instruction: 0x632e7263
    6c00:	00000100 	andeq	r0, r0, r0, lsl #2
    6c04:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    6c08:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    6c0c:	00000200 	andeq	r0, r0, r0, lsl #4
    6c10:	6b636f6c 	blvs	18e29c8 <_Min_Stack_Size+0x18e27c8>
    6c14:	0300682e 	movweq	r6, #2094	; 0x82e
    6c18:	745f0000 	ldrbvc	r0, [pc], #-0	; 6c20 <_Min_Stack_Size+0x6a20>
    6c1c:	73657079 	cmnvc	r5, #121	; 0x79
    6c20:	0300682e 	movweq	r6, #2094	; 0x82e
    6c24:	65720000 	ldrbvs	r0, [r2, #-0]!
    6c28:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    6c2c:	00030068 	andeq	r0, r3, r8, rrx
    6c30:	05000000 	streq	r0, [r0, #-0]
    6c34:	0007cc02 	andeq	ip, r7, r2, lsl #24
    6c38:	02d20308 	sbcseq	r0, r2, #8, 6	; 0x20000000
    6c3c:	ea032401 	b	cfc48 <_Min_Stack_Size+0xcfa48>
    6c40:	222c207e 	eorcs	r2, ip, #126	; 0x7e
    6c44:	3c019b03 			; <UNDEFINED> instruction: 0x3c019b03
    6c48:	303c0903 	eorscc	r0, ip, r3, lsl #18
    6c4c:	224a0a03 	subcs	r0, sl, #12288	; 0x3000
    6c50:	00203603 	eoreq	r3, r0, r3, lsl #12
    6c54:	03010402 	movweq	r0, #5122	; 0x1402
    6c58:	02002e55 	andeq	r2, r0, #1360	; 0x550
    6c5c:	003b0204 	eorseq	r0, fp, r4, lsl #4
    6c60:	21020402 	tstcs	r2, r2, lsl #8
    6c64:	4a0e0333 	bmi	387938 <_Min_Stack_Size+0x387738>
    6c68:	4a100328 	bmi	407910 <_Min_Stack_Size+0x407710>
    6c6c:	0323211c 			; <UNDEFINED> instruction: 0x0323211c
    6c70:	1503206b 	strne	r2, [r3, #-107]	; 0xffffff95
    6c74:	2e5e032e 	cdpcs	3, 5, cr0, cr14, cr14, {1}
    6c78:	23232b31 			; <UNDEFINED> instruction: 0x23232b31
    6c7c:	5e032f1f 	mcrpl	15, 0, r2, cr3, cr15, {0}
    6c80:	211f212e 	tstcs	pc, lr, lsr #2
    6c84:	213c3103 	teqcs	ip, r3, lsl #2
    6c88:	022f211f 	eoreq	r2, pc, #-1073741817	; 0xc0000007
    6c8c:	01010004 	tsteq	r1, r4
    6c90:	00000190 	muleq	r0, r0, r1
    6c94:	012d0002 			; <UNDEFINED> instruction: 0x012d0002
    6c98:	01020000 	mrseq	r0, (UNDEF: 2)
    6c9c:	000d0efb 	strdeq	r0, [sp], -fp
    6ca0:	01010101 	tsteq	r1, r1, lsl #2
    6ca4:	01000000 	mrseq	r0, (UNDEF: 0)
    6ca8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    6cac:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6cb0:	2f2e2e2f 	svccs	0x002e2e2f
    6cb4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6cb8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6cbc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6cc0:	2f62696c 	svccs	0x0062696c
    6cc4:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    6cc8:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    6ccc:	0062696c 	rsbeq	r6, r2, ip, ror #18
    6cd0:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    6cd4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6cd8:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    6cdc:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    6ce0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6ce4:	61652d65 	cmnvs	r5, r5, ror #26
    6ce8:	352f6962 	strcc	r6, [pc, #-2402]!	; 638e <_Min_Stack_Size+0x618e>
    6cec:	312e342e 			; <UNDEFINED> instruction: 0x312e342e
    6cf0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6cf4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6cf8:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    6cfc:	2f646c69 	svccs	0x00646c69
    6d00:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6d04:	582d6269 	stmdapl	sp!, {r0, r3, r5, r6, r9, sp, lr}
    6d08:	317a7541 	cmncc	sl, r1, asr #10
    6d0c:	656e2f50 	strbvs	r2, [lr, #-3920]!	; 0xfffff0b0
    6d10:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6d14:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    6d18:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    6d1c:	30363130 	eorscc	r3, r6, r0, lsr r1
    6d20:	2f373235 	svccs	0x00373235
    6d24:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6d28:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 6b8c <_Min_Stack_Size+0x698c>
    6d2c:	2f636269 	svccs	0x00636269
    6d30:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6d34:	2f656475 	svccs	0x00656475
    6d38:	00737973 	rsbseq	r7, r3, r3, ror r9
    6d3c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    6d40:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    6d44:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    6d48:	41582d62 	cmpmi	r8, r2, ror #26
    6d4c:	50317a75 	eorspl	r7, r1, r5, ror sl
    6d50:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6d54:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    6d58:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    6d5c:	30322e30 	eorscc	r2, r2, r0, lsr lr
    6d60:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    6d64:	6e2f3732 	mcrvs	7, 1, r3, cr15, cr2, {1}
    6d68:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    6d6c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    6d70:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    6d74:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6d78:	00006564 	andeq	r6, r0, r4, ror #10
    6d7c:	6f6e616e 	svcvs	0x006e616e
    6d80:	6c616d2d 	stclvs	13, cr6, [r1], #-180	; 0xffffff4c
    6d84:	72636f6c 	rsbvc	r6, r3, #108, 30	; 0x1b0
    6d88:	0100632e 	tsteq	r0, lr, lsr #6
    6d8c:	74730000 	ldrbtvc	r0, [r3], #-0
    6d90:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    6d94:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6d98:	6f6c0000 	svcvs	0x006c0000
    6d9c:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    6da0:	00000300 	andeq	r0, r0, r0, lsl #6
    6da4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    6da8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    6dac:	00000300 	andeq	r0, r0, r0, lsl #6
    6db0:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    6db4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6db8:	72000003 	andvc	r0, r0, #3
    6dbc:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    6dc0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    6dc4:	00000000 	andeq	r0, r0, r0
    6dc8:	08580205 	ldmdaeq	r8, {r0, r2, r9}^
    6dcc:	ef030800 	svc	0x00030800
    6dd0:	3e270101 	sufccs	f0, f7, f1
    6dd4:	74033e21 	strvc	r3, [r3], #-3617	; 0xfffff1df
    6dd8:	200c0320 	andcs	r0, ip, r0, lsr #6
    6ddc:	01040200 	mrseq	r0, R12_usr
    6de0:	36062006 	strcc	r2, [r6], -r6
    6de4:	3b212231 	blcc	84f6b0 <_Min_Stack_Size+0x84f4b0>
    6de8:	3c1a0321 	ldccc	3, cr0, [sl], {33}	; 0x21
    6dec:	03206303 			; <UNDEFINED> instruction: 0x03206303
    6df0:	4d4c2e4f 	stclmi	14, cr2, [ip, #-316]	; 0xfffffec4
    6df4:	4b323d31 	blmi	c962c0 <_Min_Stack_Size+0xc960c0>
    6df8:	2e00cf03 	cdpcs	15, 0, cr12, cr0, cr3, {0}
    6dfc:	322e5903 	eorcc	r5, lr, #49152	; 0xc000
    6e00:	27032121 	strcs	r2, [r3, -r1, lsr #2]
    6e04:	30254820 	eorcc	r4, r5, r0, lsr #16
    6e08:	20530341 	subscs	r0, r3, r1, asr #6
    6e0c:	032e0903 			; <UNDEFINED> instruction: 0x032e0903
    6e10:	032f3c5f 			; <UNDEFINED> instruction: 0x032f3c5f
    6e14:	0e032e0d 	cdpeq	14, 0, cr2, cr3, cr13, {0}
    6e18:	2e72034a 	cdpcs	3, 7, cr0, cr2, cr10, {2}
    6e1c:	02584a03 	subseq	r4, r8, #12288	; 0x3000
    6e20:	01010008 	tsteq	r1, r8
    6e24:	00000319 	andeq	r0, r0, r9, lsl r3
    6e28:	01850002 	orreq	r0, r5, r2
    6e2c:	01020000 	mrseq	r0, (UNDEF: 2)
    6e30:	000d0efb 	strdeq	r0, [sp], -fp
    6e34:	01010101 	tsteq	r1, r1, lsl #2
    6e38:	01000000 	mrseq	r0, (UNDEF: 0)
    6e3c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    6e40:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6e44:	2f2e2e2f 	svccs	0x002e2e2f
    6e48:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6e4c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6e50:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6e54:	2f62696c 	svccs	0x0062696c
    6e58:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    6e5c:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    6e60:	2f006f69 	svccs	0x00006f69
    6e64:	2f727375 	svccs	0x00727375
    6e68:	2f62696c 	svccs	0x0062696c
    6e6c:	2f636367 	svccs	0x00636367
    6e70:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6e74:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6e78:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6e7c:	2e352f69 	cdpcs	15, 3, cr2, cr5, cr9, {3}
    6e80:	2f312e34 	svccs	0x00312e34
    6e84:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6e88:	00656475 	rsbeq	r6, r5, r5, ror r4
    6e8c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    6e90:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    6e94:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    6e98:	41582d62 	cmpmi	r8, r2, ror #26
    6e9c:	50317a75 	eorspl	r7, r1, r5, ror sl
    6ea0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6ea4:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    6ea8:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    6eac:	30322e30 	eorscc	r2, r2, r0, lsr lr
    6eb0:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    6eb4:	6e2f3732 	mcrvs	7, 1, r3, cr15, cr2, {1}
    6eb8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    6ebc:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    6ec0:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    6ec4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6ec8:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    6ecc:	2f007379 	svccs	0x00007379
    6ed0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    6ed4:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    6ed8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6edc:	7541582d 	strbvc	r5, [r1, #-2093]	; 0xfffff7d3
    6ee0:	2f50317a 	svccs	0x0050317a
    6ee4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6ee8:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    6eec:	302e342e 	eorcc	r3, lr, lr, lsr #8
    6ef0:	3130322e 	teqcc	r0, lr, lsr #4
    6ef4:	32353036 	eorscc	r3, r5, #54	; 0x36
    6ef8:	656e2f37 	strbvs	r2, [lr, #-3895]!	; 0xfffff0c9
    6efc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6f00:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6f04:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    6f08:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6f0c:	6e000065 	cdpvs	0, 0, cr0, cr0, cr5, {3}
    6f10:	2d6f6e61 	stclcs	14, cr6, [pc, #-388]!	; 6d94 <_Min_Stack_Size+0x6b94>
    6f14:	72706676 	rsbsvc	r6, r0, #123731968	; 0x7600000
    6f18:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    6f1c:	0100632e 	tsteq	r0, lr, lsr #6
    6f20:	74730000 	ldrbtvc	r0, [r3], #-0
    6f24:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    6f28:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6f2c:	6f6c0000 	svcvs	0x006c0000
    6f30:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    6f34:	00000300 	andeq	r0, r0, r0, lsl #6
    6f38:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    6f3c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    6f40:	00000300 	andeq	r0, r0, r0, lsl #6
    6f44:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    6f48:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6f4c:	73000003 	movwvc	r0, #3
    6f50:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    6f54:	00682e67 	rsbeq	r2, r8, r7, ror #28
    6f58:	3c000002 	stccc	0, cr0, [r0], {2}
    6f5c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    6f60:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    6f64:	0000003e 	andeq	r0, r0, lr, lsr r0
    6f68:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    6f6c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    6f70:	00000400 	andeq	r0, r0, r0, lsl #8
    6f74:	72777666 	rsbsvc	r7, r7, #106954752	; 0x6600000
    6f78:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
    6f7c:	00010068 	andeq	r0, r1, r8, rrx
    6f80:	6e616e00 	cdpvs	14, 6, cr6, cr1, cr0, {0}
    6f84:	66762d6f 	ldrbtvs	r2, [r6], -pc, ror #26
    6f88:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    6f8c:	6c5f6674 	mrrcvs	6, 7, r6, pc, cr4	; <UNPREDICTABLE>
    6f90:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    6f94:	0100682e 	tsteq	r0, lr, lsr #16
    6f98:	74730000 	ldrbtvc	r0, [r3], #-0
    6f9c:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    6fa0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    6fa4:	74730000 	ldrbtvc	r0, [r3], #-0
    6fa8:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    6fac:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    6fb0:	00000000 	andeq	r0, r0, r0
    6fb4:	09140205 	ldmdbeq	r4, {r0, r2, r9}
    6fb8:	b3030800 	movwlt	r0, #14336	; 0x3800
    6fbc:	1d310101 	ldfnes	f0, [r1, #-4]!
    6fc0:	00321c24 	eorseq	r1, r2, r4, lsr #24
    6fc4:	06010402 	streq	r0, [r1], -r2, lsl #8
    6fc8:	2e030620 	cfmadd32cs	mvax1, mvfx0, mvfx3, mvfx0
    6fcc:	214b304a 	cmpcs	fp, sl, asr #32
    6fd0:	211f211f 	tstcs	pc, pc, lsl r1	; <UNPREDICTABLE>
    6fd4:	5e033721 	cdppl	7, 0, cr3, cr3, cr1, {1}
    6fd8:	2078032e 	rsbscs	r0, r8, lr, lsr #6
    6fdc:	2e780336 	mrccs	3, 3, r0, cr8, cr6, {1}
    6fe0:	212d2f44 			; <UNDEFINED> instruction: 0x212d2f44
    6fe4:	4b313d3d 	blmi	c564e0 <_Min_Stack_Size+0xc562e0>
    6fe8:	3d784b33 	fldmdbxcc	r8!, {d20-d44}	;@ Deprecated
    6fec:	2b2e0d03 	blcs	b8a400 <_Min_Stack_Size+0xb8a200>
    6ff0:	2f1d212f 	svccs	0x001d212f
    6ff4:	3c760323 	ldclcc	3, cr0, [r6], #-140	; 0xffffff74
    6ff8:	3c13034c 	ldccc	3, cr0, [r3], {76}	; 0x4c
    6ffc:	033e2d21 	teqeq	lr, #2112	; 0x840
    7000:	09033c0a 	stmdbeq	r3, {r1, r3, sl, fp, ip, sp}
    7004:	2077032e 	rsbscs	r0, r7, lr, lsr #6
    7008:	20090320 	andcs	r0, r9, r0, lsr #6
    700c:	820b032b 	andhi	r0, fp, #-1409286144	; 0xac000000
    7010:	00211f35 	eoreq	r1, r1, r5, lsr pc
    7014:	06010402 	streq	r0, [r1], -r2, lsl #8
    7018:	0c03062e 	stceq	6, cr0, [r3], {46}	; 0x2e
    701c:	2078034a 	rsbscs	r0, r8, sl, asr #6
    7020:	2e780328 	cdpcs	3, 7, cr0, cr8, cr8, {1}
    7024:	211f2f36 	tstcs	pc, r6, lsr pc	; <UNPREDICTABLE>
    7028:	4b313e3d 	blmi	c56924 <_Min_Stack_Size+0xc56724>
    702c:	13035933 	movwne	r5, #14643	; 0x3933
    7030:	2f2f2b74 	svccs	0x002f2b74
    7034:	2523211d 	strcs	r2, [r3, #-285]!	; 0xfffffee3
    7038:	2e790352 	mrccs	3, 3, r0, cr9, cr2, {2}
    703c:	26211f21 	strtcs	r1, [r1], -r1, lsr #30
    7040:	21207903 			; <UNDEFINED> instruction: 0x21207903
    7044:	3c410326 	mcrrcc	3, 2, r0, r1, cr6
    7048:	3303212f 	movwcc	r2, #12591	; 0x312f
    704c:	3c6e032e 	stclcc	3, cr0, [lr], #-184	; 0xffffff48
    7050:	034c3f3e 	movteq	r3, #53054	; 0xcf3e
    7054:	1f213c1c 	svcne	0x00213c1c
    7058:	2f212b31 	svccs	0x00212b31
    705c:	7fae0330 	svcvc	0x00ae0330
    7060:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    7064:	0188033c 	orreq	r0, r8, ip, lsr r3
    7068:	3c1a033c 	ldccc	3, cr0, [sl], {60}	; 0x3c
    706c:	03206603 			; <UNDEFINED> instruction: 0x03206603
    7070:	6603201a 			; <UNDEFINED> instruction: 0x6603201a
    7074:	3c1a0320 	ldccc	3, cr0, [sl], {32}
    7078:	01040200 	mrseq	r0, R12_usr
    707c:	03062006 	movweq	r2, #24582	; 0x6006
    7080:	03424a0f 	movteq	r4, #10767	; 0x2a0f
    7084:	03212e78 			; <UNDEFINED> instruction: 0x03212e78
    7088:	3a032023 	bcc	cf11c <_Min_Stack_Size+0xcef1c>
    708c:	7fa20320 	svcvc	0x00a20320
    7090:	0035212e 	eorseq	r2, r5, lr, lsr #2
    7094:	06010402 	streq	r0, [r1], -r2, lsl #8
    7098:	4d063c74 	stcmi	12, cr3, [r6, #-464]	; 0xfffffe30
    709c:	1e22833e 	mcrne	3, 1, r8, cr2, cr14, {1}
    70a0:	3a223330 	bcc	893d68 <_Min_Stack_Size+0x893b68>
    70a4:	30212221 	eorcc	r2, r1, r1, lsr #4
    70a8:	200e031c 	andcs	r0, lr, ip, lsl r3
    70ac:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    70b0:	02002102 	andeq	r2, r0, #-2147483648	; 0x80000000
    70b4:	a1650104 	cmnge	r5, r4, lsl #2
    70b8:	2b24512f 	blcs	91b57c <_Min_Stack_Size+0x91b37c>
    70bc:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
    70c0:	2e120301 	cdpcs	3, 1, cr0, cr2, cr1, {0}
    70c4:	02040200 	andeq	r0, r4, #0, 4
    70c8:	02005806 	andeq	r5, r0, #393216	; 0x60000
    70cc:	2f060204 	svccs	0x00060204
    70d0:	02040200 	andeq	r0, r4, #0, 4
    70d4:	14035d49 	strne	r5, [r3], #-3401	; 0xfffff2b7
    70d8:	2d835a2e 	vstrcs	s10, [r3, #184]	; 0xb8
    70dc:	4b3b2f25 	blmi	ed2d78 <_Min_Stack_Size+0xed2b78>
    70e0:	09033231 	stmdbeq	r3, {r0, r4, r5, r9, ip, sp}
    70e4:	0331972e 	teqeq	r1, #12058624	; 0xb80000
    70e8:	033c7f88 	teqeq	ip, #136, 30	; 0x220
    70ec:	67580180 	ldrbvs	r0, [r8, -r0, lsl #3]
    70f0:	3c7f8203 	lfmcc	f0, 3, [pc], #-12	; 70ec <_Min_Stack_Size+0x6eec>
    70f4:	4a00e503 	bmi	40508 <_Min_Stack_Size+0x40308>
    70f8:	03745d03 	cmneq	r4, #3, 26	; 0xc0
    70fc:	212d4a0a 			; <UNDEFINED> instruction: 0x212d4a0a
    7100:	03207503 			; <UNDEFINED> instruction: 0x03207503
    7104:	00212e0a 	eoreq	r2, r1, sl, lsl #28
    7108:	06020402 	streq	r0, [r2], -r2, lsl #8
    710c:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    7110:	002f0602 	eoreq	r0, pc, r2, lsl #12
    7114:	49020402 	stmdbmi	r2, {r1, sl}
    7118:	3d666403 	cfstrdcc	mvd6, [r6, #-12]!
    711c:	421f211f 	andsmi	r2, pc, #-1073741817	; 0xc0000007
    7120:	1f3c0f03 	svcne	0x003c0f03
    7124:	221f2f2f 	andscs	r2, pc, #47, 30	; 0xbc
    7128:	031d683a 	tsteq	sp, #3801088	; 0x3a0000
    712c:	2d212e6f 	stccs	14, cr2, [r1, #-444]!	; 0xfffffe44
    7130:	2e3c0321 	cdpcs	3, 3, cr0, cr12, cr1, {1}
    7134:	9e7efa03 	vaddls.f32	s31, s28, s6
    7138:	3d392559 	cfldr32cc	mvfx2, [r9, #-356]!	; 0xfffffe9c
    713c:	01000d02 	tsteq	r0, r2, lsl #26
    7140:	00032901 	andeq	r2, r3, r1, lsl #18
    7144:	79000200 	stmdbvc	r0, {r9}
    7148:	02000001 	andeq	r0, r0, #1
    714c:	0d0efb01 	vstreq	d15, [lr, #-4]
    7150:	01010100 	mrseq	r0, (UNDEF: 17)
    7154:	00000001 	andeq	r0, r0, r1
    7158:	01000001 	tsteq	r0, r1
    715c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7160:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7164:	2f2e2e2f 	svccs	0x002e2e2f
    7168:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    716c:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    7170:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    7174:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    7178:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    717c:	006f6964 	rsbeq	r6, pc, r4, ror #18
    7180:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    7184:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    7188:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    718c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    7190:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7194:	61652d65 	cmnvs	r5, r5, ror #26
    7198:	352f6962 	strcc	r6, [pc, #-2402]!	; 683e <_Min_Stack_Size+0x663e>
    719c:	312e342e 			; <UNDEFINED> instruction: 0x312e342e
    71a0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    71a4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    71a8:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    71ac:	2f646c69 	svccs	0x00646c69
    71b0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    71b4:	582d6269 	stmdapl	sp!, {r0, r3, r5, r6, r9, sp, lr}
    71b8:	317a7541 	cmncc	sl, r1, asr #10
    71bc:	656e2f50 	strbvs	r2, [lr, #-3920]!	; 0xfffff0b0
    71c0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    71c4:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    71c8:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    71cc:	30363130 	eorscc	r3, r6, r0, lsr r1
    71d0:	2f373235 	svccs	0x00373235
    71d4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    71d8:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 703c <_Min_Stack_Size+0x6e3c>
    71dc:	2f636269 	svccs	0x00636269
    71e0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    71e4:	2f656475 	svccs	0x00656475
    71e8:	00737973 	rsbseq	r7, r3, r3, ror r9
    71ec:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    71f0:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    71f4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    71f8:	41582d62 	cmpmi	r8, r2, ror #26
    71fc:	50317a75 	eorspl	r7, r1, r5, ror sl
    7200:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    7204:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    7208:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    720c:	30322e30 	eorscc	r2, r2, r0, lsr lr
    7210:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    7214:	6e2f3732 	mcrvs	7, 1, r3, cr15, cr2, {1}
    7218:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    721c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    7220:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    7224:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7228:	00006564 	andeq	r6, r0, r4, ror #10
    722c:	6f6e616e 	svcvs	0x006e616e
    7230:	7066762d 	rsbvc	r7, r6, sp, lsr #12
    7234:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    7238:	2e695f66 	cdpcs	15, 6, cr5, cr9, cr6, {3}
    723c:	00010063 	andeq	r0, r1, r3, rrx
    7240:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    7244:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    7248:	00020068 	andeq	r0, r2, r8, rrx
    724c:	636f6c00 	cmnvs	pc, #0, 24
    7250:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    7254:	5f000003 	svcpl	0x00000003
    7258:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    725c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7260:	72000003 	andvc	r0, r0, #3
    7264:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    7268:	0300682e 	movweq	r6, #2094	; 0x82e
    726c:	74730000 	ldrbtvc	r0, [r3], #-0
    7270:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    7274:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    7278:	623c0000 	eorsvs	r0, ip, #0
    727c:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    7280:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    7284:	00000000 	andeq	r0, r0, r0
    7288:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    728c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7290:	73000003 	movwvc	r0, #3
    7294:	6f696474 	svcvs	0x00696474
    7298:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    729c:	616e0000 	cmnvs	lr, r0
    72a0:	762d6f6e 	strtvc	r6, [sp], -lr, ror #30
    72a4:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    72a8:	5f66746e 	svcpl	0x0066746e
    72ac:	61636f6c 	cmnvs	r3, ip, ror #30
    72b0:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    72b4:	73000001 	movwvc	r0, #1
    72b8:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    72bc:	00682e67 	rsbeq	r2, r8, r7, ror #28
    72c0:	00000004 	andeq	r0, r0, r4
    72c4:	18020500 	stmdane	r2, {r8, sl}
    72c8:	0308000d 	movweq	r0, #32781	; 0x800d
    72cc:	11030136 	tstne	r3, r6, lsr r1
    72d0:	206f032e 	rsbcs	r0, pc, lr, lsr #6
    72d4:	03201103 			; <UNDEFINED> instruction: 0x03201103
    72d8:	1103206f 	tstne	r3, pc, rrx
    72dc:	6e036720 	cdpvs	7, 0, cr6, cr3, cr0, {1}
    72e0:	4a12032e 	bmi	487fa0 <_Min_Stack_Size+0x487da0>
    72e4:	5b3d3e21 	blpl	f56b70 <_Min_Stack_Size+0xf56970>
    72e8:	03040200 	movweq	r0, #16896	; 0x4200
    72ec:	00820659 	addeq	r0, r2, r9, asr r6
    72f0:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
    72f4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    72f8:	18030666 	stmdane	r3, {r1, r2, r5, r6, r9, sl}
    72fc:	586b0390 	stmdapl	fp!, {r4, r7, r8, r9}^
    7300:	2d4b305c 	stclcs	0, cr3, [fp, #-368]	; 0xfffffe90
    7304:	5b764d21 	blpl	1d9a790 <_Min_Stack_Size+0x1d9a590>
    7308:	39213e3a 	stmdbcc	r1!, {r1, r3, r4, r5, r9, sl, fp, ip, sp}
    730c:	02040200 	andeq	r0, r4, #0, 4
    7310:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
    7314:	062e0604 	strteq	r0, [lr], -r4, lsl #12
    7318:	3d9e6a03 	vldrcc	s12, [lr, #12]
    731c:	04020093 	streq	r0, [r2], #-147	; 0xffffff6d
    7320:	660b0301 	strvs	r0, [fp], -r1, lsl #6
    7324:	01040200 	mrseq	r0, R12_usr
    7328:	04020040 	streq	r0, [r2], #-64	; 0xffffffc0
    732c:	02002a01 	andeq	r2, r0, #4096	; 0x1000
    7330:	4d240104 	stfmis	f0, [r4, #-16]!
    7334:	0a03523d 	beq	dbc30 <_Min_Stack_Size+0xdba30>
    7338:	2076033c 	rsbscs	r0, r6, ip, lsr r3
    733c:	03200a03 			; <UNDEFINED> instruction: 0x03200a03
    7340:	03422076 	movteq	r2, #8310	; 0x2076
    7344:	0a032e7a 	beq	d2d34 <_Min_Stack_Size+0xd2b34>
    7348:	ba160320 	blt	587fd0 <_Min_Stack_Size+0x587dd0>
    734c:	033c1203 	teqeq	ip, #805306368	; 0x30000000
    7350:	2b032e55 	blcs	d2cac <_Min_Stack_Size+0xd2aac>
    7354:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    7358:	063c0602 	ldrteq	r0, [ip], -r2, lsl #12
    735c:	03745803 	cmneq	r4, #196608	; 0x30000
    7360:	3f4f9e20 	svccc	0x004f9e20
    7364:	0200302c 	andeq	r3, r0, #44	; 0x2c
    7368:	3c060104 	stfccs	f0, [r6], {4}
    736c:	08040200 	stmdaeq	r4, {r9}
    7370:	02003006 	andeq	r3, r0, #6
    7374:	00210804 	eoreq	r0, r1, r4, lsl #16
    7378:	4d080402 	cfstrsmi	mvf0, [r8, #-8]
    737c:	207a033d 	rsbscs	r0, sl, sp, lsr r3
    7380:	59434026 	stmdbpl	r3, {r1, r2, r5, lr}^
    7384:	04020051 	streq	r0, [r2], #-81	; 0xffffffaf
    7388:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    738c:	3c7fba03 			; <UNDEFINED> instruction: 0x3c7fba03
    7390:	2000d103 	andcs	sp, r0, r3, lsl #2
    7394:	4b223d31 	blmi	896860 <_Min_Stack_Size+0x896660>
    7398:	667fa803 	ldrbtvs	sl, [pc], -r3, lsl #16
    739c:	2000de03 	andcs	sp, r0, r3, lsl #28
    73a0:	832e1a03 			; <UNDEFINED> instruction: 0x832e1a03
    73a4:	1f217631 	svcne	0x00217631
    73a8:	02001f2f 	andeq	r1, r0, #47, 30	; 0xbc
    73ac:	06210304 	strteq	r0, [r1], -r4, lsl #6
    73b0:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
    73b4:	02002e02 	andeq	r2, r0, #2, 28
    73b8:	06580404 	ldrbeq	r0, [r8], -r4, lsl #8
    73bc:	3f392f94 	svccc	0x00392f94
    73c0:	3c7f8003 	ldclcc	0, cr8, [pc], #-12	; 73bc <_Min_Stack_Size+0x71bc>
    73c4:	03663a03 	cmneq	r6, #12288	; 0x3000
    73c8:	2e032052 	mcrcs	0, 0, r2, cr3, cr2, {2}
    73cc:	20510320 	subscs	r0, r1, r0, lsr #6
    73d0:	032e2f03 			; <UNDEFINED> instruction: 0x032e2f03
    73d4:	2e032052 	mcrcs	0, 0, r2, cr3, cr2, {2}
    73d8:	4203212e 	andmi	r2, r3, #-2147483637	; 0x8000000b
    73dc:	2e3e032e 	cdpcs	3, 3, cr0, cr14, cr14, {1}
    73e0:	00205303 	eoreq	r5, r0, r3, lsl #6
    73e4:	03010402 	movweq	r0, #5122	; 0x1402
    73e8:	02002e38 	andeq	r2, r0, #56, 28	; 0x380
    73ec:	00690104 	rsbeq	r0, r9, r4, lsl #2
    73f0:	1d010402 	cfstrsne	mvf0, [r1, #-8]
    73f4:	01040200 	mrseq	r0, R12_usr
    73f8:	02003231 	andeq	r3, r0, #268435459	; 0x10000003
    73fc:	2e060104 	adfcss	f0, f6, f4
    7400:	02040200 	andeq	r0, r4, #0, 4
    7404:	034b063c 	movteq	r0, #46652	; 0xb63c
    7408:	5403585b 	strpl	r5, [r3], #-2139	; 0xfffff7a5
    740c:	2e11032e 	cdpcs	3, 1, cr0, cr1, cr14, {1}
    7410:	32203403 	eorcc	r3, r0, #50331648	; 0x3000000
    7414:	747fba03 	ldrbtvc	fp, [pc], #-2563	; 741c <_Min_Stack_Size+0x721c>
    7418:	04020052 	streq	r0, [r2], #-82	; 0xffffffae
    741c:	00660601 	rsbeq	r0, r6, r1, lsl #12
    7420:	06080402 	streq	r0, [r8], -r2, lsl #8
    7424:	2e74032f 	cdpcs	3, 7, cr0, cr4, cr15, {1}
    7428:	032e1103 			; <UNDEFINED> instruction: 0x032e1103
    742c:	252e00cf 	strcs	r0, [lr, #-207]!	; 0xffffff31
    7430:	2f4c411b 	svccs	0x004c411b
    7434:	1d3d2830 	ldcne	8, cr2, [sp, #-192]!	; 0xffffff40
    7438:	031f2f1f 	tsteq	pc, #31, 30	; 0x7c
    743c:	003c7fa6 	eorseq	r7, ip, r6, lsr #31
    7440:	06010402 	streq	r0, [r1], -r2, lsl #8
    7444:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    7448:	004b0608 	subeq	r0, fp, r8, lsl #12
    744c:	03080402 	movweq	r0, #33794	; 0x8402
    7450:	217a206a 	cmncs	sl, sl, rrx
    7454:	0021751f 	eoreq	r7, r1, pc, lsl r5
    7458:	23020402 	movwcs	r0, #9218	; 0x2402
    745c:	02040200 	andeq	r0, r4, #0, 4
    7460:	03820a03 	orreq	r0, r2, #12288	; 0x3000
    7464:	2fac00c3 	svccs	0x00ac00c3
    7468:	00090284 	andeq	r0, r9, r4, lsl #5
    746c:	01470101 	cmpeq	r7, r1, lsl #2
    7470:	00020000 	andeq	r0, r2, r0
    7474:	00000125 	andeq	r0, r0, r5, lsr #2
    7478:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    747c:	0101000d 	tsteq	r1, sp
    7480:	00000101 	andeq	r0, r0, r1, lsl #2
    7484:	00000100 	andeq	r0, r0, r0, lsl #2
    7488:	2f2e2e01 	svccs	0x002e2e01
    748c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7490:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7494:	2f2e2e2f 	svccs	0x002e2e2f
    7498:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    749c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    74a0:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    74a4:	722f6362 	eorvc	r6, pc, #-2013265919	; 0x88000001
    74a8:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    74ac:	73752f00 	cmnvc	r5, #0, 30
    74b0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    74b4:	63672f62 	cmnvs	r7, #392	; 0x188
    74b8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    74bc:	6f6e2d6d 	svcvs	0x006e2d6d
    74c0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    74c4:	2f696261 	svccs	0x00696261
    74c8:	2e342e35 	mrccs	14, 1, r2, cr4, cr5, {1}
    74cc:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    74d0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    74d4:	622f0065 	eorvs	r0, pc, #101	; 0x65
    74d8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    74dc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    74e0:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    74e4:	7a754158 	bvc	1d57a4c <_Min_Stack_Size+0x1d5784c>
    74e8:	6e2f5031 	mcrvs	0, 1, r5, cr15, cr1, {1}
    74ec:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    74f0:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    74f4:	2e302e34 	mrccs	14, 1, r2, cr0, cr4, {1}
    74f8:	36313032 			; <UNDEFINED> instruction: 0x36313032
    74fc:	37323530 			; <UNDEFINED> instruction: 0x37323530
    7500:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    7504:	2f62696c 	svccs	0x0062696c
    7508:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    750c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    7510:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7514:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    7518:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    751c:	2f646c69 	svccs	0x00646c69
    7520:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    7524:	582d6269 	stmdapl	sp!, {r0, r3, r5, r6, r9, sp, lr}
    7528:	317a7541 	cmncc	sl, r1, asr #10
    752c:	656e2f50 	strbvs	r2, [lr, #-3920]!	; 0xfffff0b0
    7530:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    7534:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    7538:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    753c:	30363130 	eorscc	r3, r6, r0, lsr r1
    7540:	2f373235 	svccs	0x00373235
    7544:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    7548:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 73ac <_Min_Stack_Size+0x71ac>
    754c:	2f636269 	svccs	0x00636269
    7550:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7554:	00656475 	rsbeq	r6, r5, r5, ror r4
    7558:	72627300 	rsbvc	r7, r2, #0, 6
    755c:	632e726b 			; <UNDEFINED> instruction: 0x632e726b
    7560:	00000100 	andeq	r0, r0, r0, lsl #2
    7564:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    7568:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    756c:	00000200 	andeq	r0, r0, r0, lsl #4
    7570:	6b636f6c 	blvs	18e3328 <_Min_Stack_Size+0x18e3128>
    7574:	0300682e 	movweq	r6, #2094	; 0x82e
    7578:	745f0000 	ldrbvc	r0, [pc], #-0	; 7580 <_Min_Stack_Size+0x7380>
    757c:	73657079 	cmnvc	r5, #121	; 0x79
    7580:	0300682e 	movweq	r6, #2094	; 0x82e
    7584:	65720000 	ldrbvs	r0, [r2, #-0]!
    7588:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    758c:	00030068 	andeq	r0, r3, r8, rrx
    7590:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    7594:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    7598:	00000400 	andeq	r0, r0, r0, lsl #8
    759c:	02050000 	andeq	r0, r5, #0
    75a0:	080010f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, ip}
    75a4:	24013403 	strcs	r3, [r1], #-1027	; 0xfffffbfd
    75a8:	211f252a 	tstcs	pc, sl, lsr #10
    75ac:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
    75b0:	223d1d01 	eorscs	r1, sp, #1, 26	; 0x40
    75b4:	01000302 	tsteq	r0, r2, lsl #6
    75b8:	00011d01 	andeq	r1, r1, r1, lsl #26
    75bc:	d9000200 	stmdble	r0, {r9}
    75c0:	02000000 	andeq	r0, r0, #0
    75c4:	0d0efb01 	vstreq	d15, [lr, #-4]
    75c8:	01010100 	mrseq	r0, (UNDEF: 17)
    75cc:	00000001 	andeq	r0, r0, r1
    75d0:	01000001 	tsteq	r0, r1
    75d4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    75d8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    75dc:	2f2e2e2f 	svccs	0x002e2e2f
    75e0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    75e4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    75e8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    75ec:	2f62696c 	svccs	0x0062696c
    75f0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    75f4:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    75f8:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    75fc:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    7600:	2f2e2e2f 	svccs	0x002e2e2f
    7604:	732f2e2e 			; <UNDEFINED> instruction: 0x732f2e2e
    7608:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    760c:	752f0067 	strvc	r0, [pc, #-103]!	; 75ad <_Min_Stack_Size+0x73ad>
    7610:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 744c <_Min_Stack_Size+0x724c>
    7614:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    7618:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    761c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7620:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7624:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7628:	342e352f 	strtcc	r3, [lr], #-1327	; 0xfffffad1
    762c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    7630:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7634:	2f006564 	svccs	0x00006564
    7638:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    763c:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    7640:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    7644:	7541582d 	strbvc	r5, [r1, #-2093]	; 0xfffff7d3
    7648:	2f50317a 	svccs	0x0050317a
    764c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    7650:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    7654:	302e342e 	eorcc	r3, lr, lr, lsr #8
    7658:	3130322e 	teqcc	r0, lr, lsr #4
    765c:	32353036 	eorscc	r3, r5, #54	; 0x36
    7660:	656e2f37 	strbvs	r2, [lr, #-3895]!	; 0xfffff0c9
    7664:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    7668:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    766c:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    7670:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7674:	6d000065 	stcvs	0, cr0, [r0, #-404]	; 0xfffffe6c
    7678:	68636d65 	stmdavs	r3!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    767c:	00632e72 	rsbeq	r2, r3, r2, ror lr
    7680:	73000001 	movwvc	r0, #1
    7684:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    7688:	00682e66 	rsbeq	r2, r8, r6, ror #28
    768c:	73000002 	movwvc	r0, #2
    7690:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    7694:	00682e67 	rsbeq	r2, r8, r7, ror #28
    7698:	00000003 	andeq	r0, r0, r3
    769c:	18020500 	stmdane	r2, {r8, sl}
    76a0:	03080011 	movweq	r0, #32785	; 0x8011
    76a4:	030100cb 	movweq	r0, #4299	; 0x10cb
    76a8:	77030109 	strvc	r0, [r3, -r9, lsl #2]
    76ac:	22272220 	eorcs	r2, r7, #32, 4
    76b0:	46225630 			; <UNDEFINED> instruction: 0x46225630
    76b4:	3c7a0334 	ldclcc	3, cr0, [sl], #-208	; 0xffffff30
    76b8:	03200903 			; <UNDEFINED> instruction: 0x03200903
    76bc:	8e222e20 	cdphi	14, 2, cr2, cr2, cr0, {1}
    76c0:	5a033824 	bpl	d5758 <_Min_Stack_Size+0xd5558>
    76c4:	202e0320 	eorcs	r0, lr, r0, lsr #6
    76c8:	4b3c6303 	blmi	f202dc <_Min_Stack_Size+0xf200dc>
    76cc:	251cbc34 	ldrcs	fp, [ip, #-3124]	; 0xfffff3cc
    76d0:	2e67031b 	mcrcs	3, 3, r0, cr7, cr11, {0}
    76d4:	00020231 	andeq	r0, r2, r1, lsr r2
    76d8:	01190101 	tsteq	r9, r1, lsl #2
    76dc:	00020000 	andeq	r0, r2, r0
    76e0:	000000c5 	andeq	r0, r0, r5, asr #1
    76e4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    76e8:	0101000d 	tsteq	r1, sp
    76ec:	00000101 	andeq	r0, r0, r1, lsl #2
    76f0:	00000100 	andeq	r0, r0, r0, lsl #2
    76f4:	2f2e2e01 	svccs	0x002e2e01
    76f8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    76fc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7700:	2f2e2e2f 	svccs	0x002e2e2f
    7704:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    7708:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    770c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    7710:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    7714:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    7718:	752f0067 	strvc	r0, [pc, #-103]!	; 76b9 <_Min_Stack_Size+0x74b9>
    771c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 7558 <_Min_Stack_Size+0x7358>
    7720:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    7724:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    7728:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    772c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7730:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7734:	342e352f 	strtcc	r3, [lr], #-1327	; 0xfffffad1
    7738:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    773c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7740:	2f006564 	svccs	0x00006564
    7744:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    7748:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    774c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    7750:	7541582d 	strbvc	r5, [r1, #-2093]	; 0xfffff7d3
    7754:	2f50317a 	svccs	0x0050317a
    7758:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    775c:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    7760:	302e342e 	eorcc	r3, lr, lr, lsr #8
    7764:	3130322e 	teqcc	r0, lr, lsr #4
    7768:	32353036 	eorscc	r3, r5, #54	; 0x36
    776c:	656e2f37 	strbvs	r2, [lr, #-3895]!	; 0xfffff0c9
    7770:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    7774:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    7778:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    777c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7780:	6d000065 	stcvs	0, cr0, [r0, #-404]	; 0xfffffe6c
    7784:	6f6d6d65 	svcvs	0x006d6d65
    7788:	632e6576 			; <UNDEFINED> instruction: 0x632e6576
    778c:	00000100 	andeq	r0, r0, r0, lsl #2
    7790:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    7794:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    7798:	00000200 	andeq	r0, r0, r0, lsl #4
    779c:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    77a0:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    77a4:	00000300 	andeq	r0, r0, r0, lsl #6
    77a8:	02050000 	andeq	r0, r5, #0
    77ac:	080011a4 	stmdaeq	r0, {r2, r5, r7, r8, ip}
    77b0:	03013f03 	movweq	r3, #7939	; 0x1f03
    77b4:	6203011e 	andvs	r0, r3, #-2147483641	; 0x80000007
    77b8:	201e0320 	andscs	r0, lr, r0, lsr #6
    77bc:	01040200 	mrseq	r0, R12_usr
    77c0:	40062006 	andmi	r2, r6, r6
    77c4:	222c3e21 	eorcs	r3, ip, #528	; 0x210
    77c8:	2e0a032c 	cdpcs	3, 0, cr0, cr10, cr12, {1}
    77cc:	01040200 	mrseq	r0, R12_usr
    77d0:	064a2e06 	strbeq	r2, [sl], -r6, lsl #28
    77d4:	2f1c3260 	svccs	0x001c3260
    77d8:	672f232b 	strvs	r2, [pc, -fp, lsr #6]!
    77dc:	820a0361 	andhi	r0, sl, #-2080374783	; 0x84000001
    77e0:	2f302553 	svccs	0x00302553
    77e4:	032c221d 			; <UNDEFINED> instruction: 0x032c221d
    77e8:	2c3e9e0b 	ldccs	14, cr9, [lr], #-44	; 0xffffffd4
    77ec:	03282c22 			; <UNDEFINED> instruction: 0x03282c22
    77f0:	0202666d 	andeq	r6, r2, #114294784	; 0x6d00000
    77f4:	5a010100 	bpl	47bfc <_Min_Stack_Size+0x479fc>
    77f8:	02000001 	andeq	r0, r0, #1
    77fc:	00012e00 	andeq	r2, r1, r0, lsl #28
    7800:	fb010200 	blx	4800a <_Min_Stack_Size+0x47e0a>
    7804:	01000d0e 	tsteq	r0, lr, lsl #26
    7808:	00010101 	andeq	r0, r1, r1, lsl #2
    780c:	00010000 	andeq	r0, r1, r0
    7810:	2e2e0100 	sufcse	f0, f6, f0
    7814:	2f2e2e2f 	svccs	0x002e2e2f
    7818:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    781c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7820:	2f2e2e2f 	svccs	0x002e2e2f
    7824:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    7828:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 768c <_Min_Stack_Size+0x748c>
    782c:	2f636269 	svccs	0x00636269
    7830:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    7834:	2f006269 	svccs	0x00006269
    7838:	2f727375 	svccs	0x00727375
    783c:	2f62696c 	svccs	0x0062696c
    7840:	2f636367 	svccs	0x00636367
    7844:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7848:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    784c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7850:	2e352f69 	cdpcs	15, 3, cr2, cr5, cr9, {3}
    7854:	2f312e34 	svccs	0x00312e34
    7858:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    785c:	00656475 	rsbeq	r6, r5, r5, ror r4
    7860:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    7864:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    7868:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    786c:	41582d62 	cmpmi	r8, r2, ror #26
    7870:	50317a75 	eorspl	r7, r1, r5, ror sl
    7874:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    7878:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    787c:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    7880:	30322e30 	eorscc	r2, r2, r0, lsr lr
    7884:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    7888:	6e2f3732 	mcrvs	7, 1, r3, cr15, cr2, {1}
    788c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    7890:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    7894:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    7898:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    789c:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    78a0:	2f007379 	svccs	0x00007379
    78a4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    78a8:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    78ac:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    78b0:	7541582d 	strbvc	r5, [r1, #-2093]	; 0xfffff7d3
    78b4:	2f50317a 	svccs	0x0050317a
    78b8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    78bc:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    78c0:	302e342e 	eorcc	r3, lr, lr, lsr #8
    78c4:	3130322e 	teqcc	r0, lr, lsr #4
    78c8:	32353036 	eorscc	r3, r5, #54	; 0x36
    78cc:	656e2f37 	strbvs	r2, [lr, #-3895]!	; 0xfffff0c9
    78d0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    78d4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    78d8:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    78dc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    78e0:	6e000065 	cdpvs	0, 0, cr0, cr0, cr5, {3}
    78e4:	2d6f6e61 	stclcs	14, cr6, [pc, #-388]!	; 7768 <_Min_Stack_Size+0x7568>
    78e8:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    78ec:	2e72636f 	cdpcs	3, 7, cr6, cr2, cr15, {3}
    78f0:	00010063 	andeq	r0, r1, r3, rrx
    78f4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    78f8:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    78fc:	00020068 	andeq	r0, r2, r8, rrx
    7900:	636f6c00 	cmnvs	pc, #0, 24
    7904:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    7908:	5f000003 	svcpl	0x00000003
    790c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    7910:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7914:	72000003 	andvc	r0, r0, #3
    7918:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    791c:	0300682e 	movweq	r6, #2094	; 0x82e
    7920:	74730000 	ldrbtvc	r0, [r3], #-0
    7924:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    7928:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    792c:	00000000 	andeq	r0, r0, r0
    7930:	126c0205 	rsbne	r0, ip, #1342177280	; 0x50000000
    7934:	c1030800 	tstgt	r3, r0, lsl #16
    7938:	1c160103 	ldfnes	f0, [r6], {3}
    793c:	4b693642 	blmi	1a5524c <_Min_Stack_Size+0x1a5504c>
    7940:	73034b30 	movwvc	r4, #15152	; 0x3b30
    7944:	0f032f66 	svceq	0x00032f66
    7948:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    794c:	206c0301 	rsbcs	r0, ip, r1, lsl #6
    7950:	01000302 	tsteq	r0, r2, lsl #6
    7954:	00017501 	andeq	r7, r1, r1, lsl #10
    7958:	26000200 	strcs	r0, [r0], -r0, lsl #4
    795c:	02000001 	andeq	r0, r0, #1
    7960:	0d0efb01 	vstreq	d15, [lr, #-4]
    7964:	01010100 	mrseq	r0, (UNDEF: 17)
    7968:	00000001 	andeq	r0, r0, r1
    796c:	01000001 	tsteq	r0, r1
    7970:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7974:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7978:	2f2e2e2f 	svccs	0x002e2e2f
    797c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7980:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    7984:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    7988:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    798c:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xfffff09d
    7990:	00746e65 	rsbseq	r6, r4, r5, ror #28
    7994:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    7998:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    799c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    79a0:	41582d62 	cmpmi	r8, r2, ror #26
    79a4:	50317a75 	eorspl	r7, r1, r5, ror sl
    79a8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    79ac:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    79b0:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    79b4:	30322e30 	eorscc	r2, r2, r0, lsr lr
    79b8:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    79bc:	6e2f3732 	mcrvs	7, 1, r3, cr15, cr2, {1}
    79c0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    79c4:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    79c8:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    79cc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    79d0:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    79d4:	2f007379 	svccs	0x00007379
    79d8:	2f727375 	svccs	0x00727375
    79dc:	2f62696c 	svccs	0x0062696c
    79e0:	2f636367 	svccs	0x00636367
    79e4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    79e8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    79ec:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    79f0:	2e352f69 	cdpcs	15, 3, cr2, cr5, cr9, {3}
    79f4:	2f312e34 	svccs	0x00312e34
    79f8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    79fc:	00656475 	rsbeq	r6, r5, r5, ror r4
    7a00:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    7a04:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    7a08:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    7a0c:	41582d62 	cmpmi	r8, r2, ror #26
    7a10:	50317a75 	eorspl	r7, r1, r5, ror sl
    7a14:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    7a18:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    7a1c:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    7a20:	30322e30 	eorscc	r2, r2, r0, lsr lr
    7a24:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    7a28:	6e2f3732 	mcrvs	7, 1, r3, cr15, cr2, {1}
    7a2c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    7a30:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    7a34:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    7a38:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7a3c:	00006564 	andeq	r6, r0, r4, ror #10
    7a40:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    7a44:	00632e74 	rsbeq	r2, r3, r4, ror lr
    7a48:	6c000001 	stcvs	0, cr0, [r0], {1}
    7a4c:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    7a50:	00020068 	andeq	r0, r2, r8, rrx
    7a54:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    7a58:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    7a5c:	00020068 	andeq	r0, r2, r8, rrx
    7a60:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    7a64:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    7a68:	00030068 	andeq	r0, r3, r8, rrx
    7a6c:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    7a70:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    7a74:	00000200 	andeq	r0, r0, r0, lsl #4
    7a78:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    7a7c:	682e6269 	stmdavs	lr!, {r0, r3, r5, r6, r9, sp, lr}
    7a80:	00000400 	andeq	r0, r0, r0, lsl #8
    7a84:	02050000 	andeq	r0, r5, #0
    7a88:	00000000 	andeq	r0, r0, r0
    7a8c:	20012303 	andcs	r2, r1, r3, lsl #6
    7a90:	21221e22 			; <UNDEFINED> instruction: 0x21221e22
    7a94:	422d2f30 	eormi	r2, sp, #48, 30	; 0xc0
    7a98:	331b4e13 	tstcc	fp, #304	; 0x130
    7a9c:	23214331 			; <UNDEFINED> instruction: 0x23214331
    7aa0:	02003821 	andeq	r3, r0, #2162688	; 0x210000
    7aa4:	03610204 	cmneq	r1, #4, 4	; 0x40000000
    7aa8:	2f5a2e0d 	svccs	0x005a2e0d
    7aac:	2f3d2f42 	svccs	0x003d2f42
    7ab0:	2f3d2f3d 	svccs	0x003d2f3d
    7ab4:	2f3d2f3d 	svccs	0x003d2f3d
    7ab8:	16032f3d 			; <UNDEFINED> instruction: 0x16032f3d
    7abc:	40432f3c 	submi	r2, r3, ip, lsr pc
    7ac0:	03263d3e 			; <UNDEFINED> instruction: 0x03263d3e
    7ac4:	4e032e7a 	mcrmi	14, 0, r2, cr3, cr10, {3}
    7ac8:	0008022e 	andeq	r0, r8, lr, lsr #4
    7acc:	00fe0101 	rscseq	r0, lr, r1, lsl #2
    7ad0:	00020000 	andeq	r0, r2, r0
    7ad4:	000000e3 	andeq	r0, r0, r3, ror #1
    7ad8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    7adc:	0101000d 	tsteq	r1, sp
    7ae0:	00000101 	andeq	r0, r0, r1, lsl #2
    7ae4:	00000100 	andeq	r0, r0, r0, lsl #2
    7ae8:	2f2e2e01 	svccs	0x002e2e01
    7aec:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7af0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7af4:	2f2e2e2f 	svccs	0x002e2e2f
    7af8:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    7afc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    7b00:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    7b04:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    7b08:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    7b0c:	752f0062 	strvc	r0, [pc, #-98]!	; 7ab2 <_Min_Stack_Size+0x78b2>
    7b10:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 794c <_Min_Stack_Size+0x774c>
    7b14:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    7b18:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    7b1c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7b20:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7b24:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7b28:	342e352f 	strtcc	r3, [lr], #-1327	; 0xfffffad1
    7b2c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    7b30:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7b34:	2f006564 	svccs	0x00006564
    7b38:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    7b3c:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    7b40:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    7b44:	7541582d 	strbvc	r5, [r1, #-2093]	; 0xfffff7d3
    7b48:	2f50317a 	svccs	0x0050317a
    7b4c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    7b50:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    7b54:	302e342e 	eorcc	r3, lr, lr, lsr #8
    7b58:	3130322e 	teqcc	r0, lr, lsr #4
    7b5c:	32353036 	eorscc	r3, r5, #54	; 0x36
    7b60:	656e2f37 	strbvs	r2, [lr, #-3895]!	; 0xfffff0c9
    7b64:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    7b68:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    7b6c:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    7b70:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7b74:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    7b78:	6e000073 	mcrvs	0, 0, r0, cr0, cr3, {3}
    7b7c:	2d6f6e61 	stclcs	14, cr6, [pc, #-388]!	; 7a00 <_Min_Stack_Size+0x7800>
    7b80:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    7b84:	2e72636f 	cdpcs	3, 7, cr6, cr2, cr15, {3}
    7b88:	00010063 	andeq	r0, r1, r3, rrx
    7b8c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    7b90:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    7b94:	00020068 	andeq	r0, r2, r8, rrx
    7b98:	636f6c00 	cmnvs	pc, #0, 24
    7b9c:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    7ba0:	5f000003 	svcpl	0x00000003
    7ba4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    7ba8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7bac:	72000003 	andvc	r0, r0, #3
    7bb0:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    7bb4:	0300682e 	movweq	r6, #2094	; 0x82e
    7bb8:	00000000 	andeq	r0, r0, r0
    7bbc:	12b40205 	adcsne	r0, r4, #1342177280	; 0x50000000
    7bc0:	8d030800 	stchi	8, cr0, [r3, #-0]
    7bc4:	30140104 	andscc	r0, r4, r4, lsl #2
    7bc8:	02215a24 	eoreq	r5, r1, #36, 20	; 0x24000
    7bcc:	01010001 	tsteq	r1, r1
    7bd0:	00000054 	andeq	r0, r0, r4, asr r0
    7bd4:	003e0002 	eorseq	r0, lr, r2
    7bd8:	01020000 	mrseq	r0, (UNDEF: 2)
    7bdc:	000d0efb 	strdeq	r0, [sp], -fp
    7be0:	01010101 	tsteq	r1, r1, lsl #2
    7be4:	01000000 	mrseq	r0, (UNDEF: 0)
    7be8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    7bec:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7bf0:	2f2e2e2f 	svccs	0x002e2e2f
    7bf4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7bf8:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    7bfc:	6f6c6762 	svcvs	0x006c6762
    7c00:	6c2f7373 	stcvs	3, cr7, [pc], #-460	; 7a3c <_Min_Stack_Size+0x783c>
    7c04:	6f6e6269 	svcvs	0x006e6269
    7c08:	00737973 	rsbseq	r7, r3, r3, ror r9
    7c0c:	72627300 	rsbvc	r7, r2, #0, 6
    7c10:	00632e6b 	rsbeq	r2, r3, fp, ror #28
    7c14:	00000001 	andeq	r0, r0, r1
    7c18:	c8020500 	stmdagt	r2, {r8, sl}
    7c1c:	1a080012 	bne	207c6c <_Min_Stack_Size+0x207a6c>
    7c20:	02316a17 	eorseq	r6, r1, #94208	; 0x17000
    7c24:	01010006 	tsteq	r1, r6

Disassembly of section .debug_str:

00000000 <.debug_str>:
{
       0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffff4c <BootRAM+0xef706ed>
}
       4:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
       8:	76737572 			; <UNDEFINED> instruction: 0x76737572
       c:	4144542f 	cmpmi	r4, pc, lsr #8
      10:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
      14:	2f544f49 	svccs	0x00544f49
      18:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    bitstatus = SET;
      1c:	4d432f53 	stclmi	15, cr2, [r3, #-332]	; 0xfffffeb4
    bitstatus = RESET;
      20:	65442f33 	strbvs	r2, [r4, #-3891]	; 0xfffff0cd
  return bitstatus;
      24:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
}
      28:	70707553 	rsbsvc	r7, r0, r3, asr r5
      2c:	2f74726f 	svccs	0x0074726f
      30:	532f5453 			; <UNDEFINED> instruction: 0x532f5453
      34:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
      38:	78303146 	ldmdavc	r0!, {r1, r2, r6, r8, ip, sp}
      3c:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
      40:	5f6d6574 	svcpl	0x006d6574
      44:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
      48:	30316632 	eorscc	r6, r1, r2, lsr r6
      4c:	00632e78 	rsbeq	r2, r3, r8, ror lr
      50:	31425041 	cmpcc	r2, r1, asr #32
      54:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
      58:	7a697300 	bvc	1a5cc60 <_Min_Stack_Size+0x1a5ca60>
      5c:	70797465 	rsbsvc	r7, r9, r5, ror #8
      60:	44420065 	strbmi	r0, [r2], #-101	; 0xffffff9b
            I2C_SendData(OLED_HARDWARE, BMP[j++]);
      64:	5f005243 	svcpl	0x00005243
      68:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
      6c:	5f323374 	svcpl	0x00323374
      70:	5f5f0074 	svcpl	0x005f0074
      74:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);    	
      78:	745f3631 	ldrbvc	r3, [pc], #-1585	; 80 <_Min_Heap_Size+0x80>
      7c:	45534800 	ldrbmi	r4, [r3, #-2048]	; 0xfffff800
      80:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
      84:	43007375 	movwmi	r7, #885	; 0x375
        for(x=x0;x<x1;x++){ 
      88:	44495550 	strbmi	r5, [r9], #-1360	; 0xfffffab0
      8c:	42504100 	subsmi	r4, r0, #0, 2
      90:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
      94:	6f687300 	svcvs	0x00687300
        _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
      98:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
      9c:	4900746e 	stmdbmi	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
      a0:	00525343 	subseq	r5, r2, r3, asr #6
      a4:	5f434352 	svcpl	0x00434352
	for(y=y0;y<y1;y++){
      a8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
      ac:	00666544 	rsbeq	r6, r6, r4, asr #10
      b0:	4b54504f 	blmi	15141f4 <_Min_Stack_Size+0x1513ff4>
}
      b4:	00525945 	subseq	r5, r2, r5, asr #18
      b8:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      bc:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
      c0:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
      c4:	46420074 			; <UNDEFINED> instruction: 0x46420074
      c8:	70005241 	andvc	r5, r0, r1, asr #4
      cc:	756d6c6c 	strbvc	r6, [sp, #-3180]!	; 0xfffff394
      d0:	41006c6c 	tstmi	r0, ip, ror #24
      d4:	4e454248 	cdpmi	2, 4, cr4, cr5, cr8, {2}
      d8:	50410052 	subpl	r0, r1, r2, asr r0
      dc:	53523242 	cmppl	r2, #536870916	; 0x20000004
      e0:	5f005254 	svcpl	0x00005254
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      e4:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      e8:	745f3874 	ldrbvc	r3, [pc], #-2164	; f0 <_Min_Heap_Size+0xf0>
      ec:	50525700 	subspl	r5, r2, r0, lsl #14
      f0:	46430052 			; <UNDEFINED> instruction: 0x46430052
				prvUnlockQueue( pxQueue );
      f4:	53005253 	movwpl	r5, #595	; 0x253
      f8:	79537465 	ldmdbvc	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
				if( xTaskResumeAll() == pdFALSE )
      fc:	6f6c4373 	svcvs	0x006c4373
     100:	6f546b63 	svcvs	0x00546b63
					portYIELD_WITHIN_API();
     104:	70003237 	andvc	r3, r0, r7, lsr r2
     108:	6f736c6c 	svcvs	0x00736c6c
     10c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     110:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
     114:	31314320 	teqcc	r1, r0, lsr #6
				prvUnlockQueue( pxQueue );
     118:	342e3520 	strtcc	r3, [lr], #-1312	; 0xfffffae0
				( void ) xTaskResumeAll();
     11c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
     120:	30363130 	eorscc	r3, r6, r0, lsr r1
			prvUnlockQueue( pxQueue );
     124:	20393139 	eorscs	r3, r9, r9, lsr r1
			( void ) xTaskResumeAll();
     128:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     12c:	20626d75 	rsbcs	r6, r2, r5, ror sp
     130:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
     134:	6f633d75 	svcvs	0x00633d75
     138:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
}
     13c:	20336d2d 	eorscs	r6, r3, sp, lsr #26
     140:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     144:	2d626d75 	stclcs	13, cr6, [r2, #-468]!	; 0xfffffe2c
     148:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     14c:	726f7772 	rsbvc	r7, pc, #29884416	; 0x1c80000
  SPIx->I2SCFGR = tmpreg;   
     150:	6d2d206b 	stcvs	0, cr2, [sp, #-428]!	; 0xfffffe54
     154:	7474696c 	ldrbtvc	r6, [r4], #-2412	; 0xfffff694
}
     158:	652d656c 	strvs	r6, [sp, #-1388]!	; 0xfffffa94
     15c:	6169646e 	cmnvs	r9, lr, ror #8
     160:	672d206e 	strvs	r2, [sp, -lr, rrx]!
     164:	20626467 	rsbcs	r6, r2, r7, ror #8
         *(uint16_t*) arg = getSn_KPALVTR(sn);
     168:	20304f2d 	eorscs	r4, r0, sp, lsr #30
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     16c:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0xfffff9d3
     170:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     174:	732d6e6f 			; <UNDEFINED> instruction: 0x732d6e6f
     178:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     17c:	20736e6f 	rsbscs	r6, r3, pc, ror #28
     180:	6164662d 	cmnvs	r4, sp, lsr #12
     184:	732d6174 			; <UNDEFINED> instruction: 0x732d6174
     188:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
         *(uint8_t*) arg = getSn_SR(sn);
     18c:	00736e6f 	rsbseq	r6, r3, pc, ror #28
     190:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     194:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     198:	61686320 	cmnvs	r8, r0, lsr #6
     19c:	49410072 	stmdbmi	r1, {r1, r4, r5, r6}^
     1a0:	00524352 	subseq	r4, r2, r2, asr r3
     1a4:	5f424353 	svcpl	0x00424353
         if(getSn_MR(sn) == Sn_MR_TCP)
     1a8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     1ac:	42504100 	subsmi	r4, r0, #0, 2
     1b0:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
     1b4:	61745300 	cmnvs	r4, r0, lsl #6
     1b8:	70557472 	subsvc	r7, r5, r2, ror r4
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1bc:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     1c0:	00726574 	rsbseq	r6, r2, r4, ror r5
     1c4:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     1c8:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
         break;
     1cc:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
            *(uint16_t*)arg = sock_remained_size[sn];
     1d0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     1d4:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     1d8:	5300746e 	movwpl	r7, #1134	; 0x46e
         CHECK_SOCKMODE(Sn_MR_TCP);
     1dc:	52534348 	subspl	r4, r3, #72, 6	; 0x20000001
     1e0:	464d4d00 	strbmi	r4, [sp], -r0, lsl #26
     1e4:	53005241 	movwpl	r5, #577	; 0x241
     1e8:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     1ec:	696e496d 	stmdbvs	lr!, {r0, r2, r3, r5, r6, r8, fp, lr}^
     1f0:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
     1f4:	2074726f 	rsbscs	r7, r4, pc, ror #4
     1f8:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
         *(uint8_t*)arg = sock_pack_info[sn];
     1fc:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     200:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
         break;
     204:	4f545600 	svcmi	0x00545600
         return SOCKERR_SOCKOPT;
     208:	79530052 	ldmdbvc	r3, {r1, r4, r6}^
   return SOCK_OK;
     20c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
}
     210:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
     214:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     218:	6470556b 	ldrbtvs	r5, [r0], #-1387	; 0xfffffa95
     21c:	00657461 	rsbeq	r7, r5, r1, ror #8
     220:	52415349 	subpl	r5, r1, #603979777	; 0x24000001
     224:	53464400 	movtpl	r4, #25600	; 0x6400
     228:	79530052 	ldmdbvc	r3, {r1, r4, r6}^
	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     22c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     230:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
     234:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     238:	4648006b 	strbmi	r0, [r8], -fp, rrx
     23c:	4d005253 	sfmmi	f5, 4, [r0, #-332]	; 0xfffffeb4
     240:	0052464d 	subseq	r4, r2, sp, asr #12
     244:	53746553 	cmnpl	r4, #348127232	; 0x14c00000
     248:	6c437379 	mcrrvs	3, 7, r7, r3, cr9
     24c:	006b636f 	rsbeq	r6, fp, pc, ror #6
     250:	52534641 	subspl	r4, r3, #68157440	; 0x4100000
	memset(packet, 0, sizeof(packet));
     254:	53455200 	movtpl	r5, #20992	; 0x5200
     258:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     25c:	4c460044 	mcrrmi	0, 4, r0, r6, cr4
	memcpy(packet, fixed_header, sizeof(fixed_header));
     260:	5f485341 	svcpl	0x00485341
     264:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     268:	00666544 	rsbeq	r6, r6, r4, asr #10
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	5f4d5449 	svcpl	0x004d5449
     270:	75427852 	strbvc	r7, [r2, #-2130]	; 0xfffff7ae
     274:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     278:	73696400 	cmnvc	r9, #0, 8
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     27c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     280:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
     284:	656c6f00 	strbvs	r6, [ip, #-3840]!	; 0xfffff100
     288:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
     28c:	44007469 	strmi	r7, [r0], #-1129	; 0xfffffb97
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     290:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     294:	4c4f5f72 	mcrrmi	15, 7, r5, pc, cr2
     298:	535f4445 	cmppl	pc, #1157627904	; 0x45000000
     29c:	44646e65 	strbtmi	r6, [r4], #-3685	; 0xfffff19b
     2a0:	73617461 	cmnvc	r1, #1627389952	; 0x61000000
		return -1;
     2a4:	58384600 	ldmdapl	r8!, {r9, sl, lr}
     2a8:	52003631 	andpl	r3, r0, #51380224	; 0x3100000
	return 1;
     2ac:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
}
     2b0:	33444556 	movtcc	r4, #17750	; 0x4556
     2b4:	69724400 	ldmdbvs	r2!, {sl, lr}^
     2b8:	5f726576 	svcpl	0x00726576
     2bc:	44454c4f 	strbmi	r4, [r5], #-3151	; 0xfffff3b1
     2c0:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     2c4:	736f505f 	cmnvc	pc, #95	; 0x5f
     2c8:	6f697469 	svcvs	0x00697469
     2cc:	6f63006e 	svcvs	0x0063006e
     2d0:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
     2d4:	52007364 	andpl	r7, r0, #100, 6	; 0x90000001
     2d8:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     2dc:	36444556 			; <UNDEFINED> instruction: 0x36444556
     2e0:	61684300 	cmnvs	r8, r0, lsl #6
     2e4:	69535f72 	ldmdbvs	r3, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     2e8:	6c00657a 	cfstr32vs	mvfx6, [r0], {122}	; 0x7a
     2ec:	00656e69 	rsbeq	r6, r5, r9, ror #28
     2f0:	41534944 	cmpmi	r3, r4, asr #18
     2f4:	00454c42 	subeq	r4, r5, r2, asr #24
     2f8:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     2fc:	756f6420 	strbvc	r6, [pc, #-1056]!	; fffffee4 <BootRAM+0xef70685>
     300:	00656c62 	rsbeq	r6, r5, r2, ror #24
     304:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 250 <_Min_Stack_Size+0x50>
     308:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     30c:	76737572 			; <UNDEFINED> instruction: 0x76737572
     310:	4144542f 	cmpmi	r4, pc, lsr #8
     314:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
     318:	2f544f49 	svccs	0x00544f49
     31c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     320:	4f2f7265 	svcmi	0x002f7265
     324:	2e44454c 	cdpcs	5, 4, cr4, cr4, cr12, {2}
     328:	72440063 	subvc	r0, r4, #99	; 0x63
     32c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     330:	454c4f5f 	strbmi	r4, [ip, #-3935]	; 0xfffff0a1
     334:	68535f44 	ldmdavs	r3, {r2, r6, r8, r9, sl, fp, ip, lr}^
     338:	7453776f 	ldrbvc	r7, [r3], #-1903	; 0xfffff891
     33c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     340:	52524500 	subspl	r4, r2, #0, 10
     344:	4900524f 	stmdbmi	r0, {r0, r1, r2, r3, r6, r9, ip, lr}
     348:	545f4332 	ldrbpl	r4, [pc], #-818	; 350 <_Min_Stack_Size+0x150>
     34c:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     350:	72006665 	andvc	r6, r0, #105906176	; 0x6500000
     354:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
     358:	69724400 	ldmdbvs	r2!, {sl, lr}^
     35c:	5f726576 	svcpl	0x00726576
     360:	44454c4f 	strbmi	r4, [r5], #-3151	; 0xfffff3b1
     364:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
     368:	6f527261 	svcvs	0x00527261
     36c:	682f0077 	stmdavs	pc!, {r0, r1, r2, r4, r5, r6}	; <UNPREDICTABLE>
     370:	2f656d6f 	svccs	0x00656d6f
     374:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
     378:	542f7673 	strtpl	r7, [pc], #-1651	; 380 <_Min_Stack_Size+0x180>
     37c:	41534144 	cmpmi	r3, r4, asr #2
     380:	4f492d54 	svcmi	0x00492d54
     384:	72440054 	subvc	r0, r4, #84	; 0x54
     388:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     38c:	454c4f5f 	strbmi	r4, [ip, #-3935]	; 0xfffff0a1
     390:	69465f44 	stmdbvs	r6, {r2, r6, r8, r9, sl, fp, ip, lr}^
     394:	44006c6c 	strmi	r6, [r0], #-3180	; 0xfffff394
     398:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     39c:	4c4f5f72 	mcrrmi	15, 7, r5, pc, cr2
     3a0:	535f4445 	cmppl	pc, #1157627904	; 0x45000000
     3a4:	5f776f68 	svcpl	0x00776f68
     3a8:	72616843 	rsbvc	r6, r1, #4390912	; 0x430000
     3ac:	73696400 	cmnvc	r9, #0, 8
     3b0:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     3b4:	006e6f5f 	rsbeq	r6, lr, pc, asr pc
     3b8:	3152414f 	cmpcc	r2, pc, asr #2
     3bc:	52414f00 	subpl	r4, r1, #0, 30
     3c0:	45520032 	ldrbmi	r0, [r2, #-50]	; 0xffffffce
     3c4:	56524553 			; <UNDEFINED> instruction: 0x56524553
     3c8:	00304445 	eorseq	r4, r0, r5, asr #8
     3cc:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     3d0:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     3d4:	45520031 	ldrbmi	r0, [r2, #-49]	; 0xffffffcf
     3d8:	56524553 			; <UNDEFINED> instruction: 0x56524553
     3dc:	00324445 	eorseq	r4, r2, r5, asr #8
     3e0:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     3e4:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xfffff1b7
     3e8:	45520078 	ldrbmi	r0, [r2, #-120]	; 0xffffff88
     3ec:	56524553 			; <UNDEFINED> instruction: 0x56524553
     3f0:	00344445 	eorseq	r4, r4, r5, asr #8
     3f4:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     3f8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     3fc:	72440035 	subvc	r0, r4, #53	; 0x35
     400:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     404:	454c4f5f 	strbmi	r4, [ip, #-3935]	; 0xfffff0a1
     408:	65535f44 	ldrbvs	r5, [r3, #-3908]	; 0xfffff0bc
     40c:	535f646e 	cmppl	pc, #1845493760	; 0x6e000000
     410:	54524154 	ldrbpl	r4, [r2], #-340	; 0xfffffeac
     414:	53455200 	movtpl	r5, #20992	; 0x5200
     418:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     41c:	52003744 	andpl	r3, r0, #68, 14	; 0x1100000
     420:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     424:	38444556 	stmdacc	r4, {r1, r2, r4, r6, r8, sl, lr}^
     428:	78364600 	ldmdavc	r6!, {r9, sl, lr}
     42c:	72440038 	subvc	r0, r4, #56	; 0x38
     430:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     434:	454c4f5f 	strbmi	r4, [ip, #-3935]	; 0xfffff0a1
     438:	72445f44 	subvc	r5, r4, #68, 30	; 0x110
     43c:	4d427761 	stclmi	7, cr7, [r2, #-388]	; 0xfffffe7c
     440:	68630050 	stmdavs	r3!, {r4, r6}^
     444:	69537261 	ldmdbvs	r3, {r0, r5, r6, r9, ip, sp, lr}^
     448:	5400657a 	strpl	r6, [r0], #-1402	; 0xfffffa86
     44c:	45534952 	ldrbmi	r4, [r3, #-2386]	; 0xfffff6ae
     450:	74616400 	strbtvc	r6, [r1], #-1024	; 0xfffffc00
     454:	70795461 	rsbsvc	r5, r9, r1, ror #8
     458:	6f630065 	svcvs	0x00630065
     45c:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
     460:	4e450064 	cdpmi	0, 4, cr0, cr5, cr4, {3}
     464:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
     468:	4b495300 	blmi	1255070 <_Min_Stack_Size+0x1254e70>
     46c:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     470:	54554f45 	ldrbpl	r4, [r5], #-3909	; 0xfffff0bb
     474:	5f534300 	svcpl	0x00534300
     478:	5f544547 	svcpl	0x00544547
     47c:	5258414d 	subspl	r4, r8, #1073741843	; 0x40000013
     480:	46554258 			; <UNDEFINED> instruction: 0x46554258
     484:	746f7300 	strbtvc	r7, [pc], #-768	; 48c <_Min_Stack_Size+0x28c>
     488:	00657079 	rsbeq	r7, r5, r9, ror r0
     48c:	6b636170 	blvs	18d8a54 <_Min_Stack_Size+0x18d8854>
     490:	6e656c5f 	mcrvs	12, 3, r6, cr5, cr15, {2}
     494:	5f4f5300 	svcpl	0x004f5300
     498:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
     49c:	73005355 	movwvc	r5, #853	; 0x355
     4a0:	6f6b636f 	svcvs	0x006b636f
     4a4:	745f7470 	ldrbvc	r7, [pc], #-1136	; 4ac <_Min_Stack_Size+0x2ac>
     4a8:	00657079 	rsbeq	r7, r5, r9, ror r0
     4ac:	79747363 	ldmdbvc	r4!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}^
     4b0:	5f006570 	svcpl	0x00006570
     4b4:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
     4b8:	00745f38 	rsbseq	r5, r4, r8, lsr pc
     4bc:	475f5343 	ldrbmi	r5, [pc, -r3, asr #6]
     4c0:	495f5445 	ldmdbmi	pc, {r0, r2, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     4c4:	444f4d4f 	strbmi	r4, [pc], #-3407	; 4cc <_Min_Stack_Size+0x2cc>
     4c8:	65670045 	strbvs	r0, [r7, #-69]!	; 0xffffffbb
     4cc:	636f7374 	cmnvs	pc, #116, 6	; 0xd0000001
     4d0:	74706f6b 	ldrbtvc	r6, [r0], #-3947	; 0xfffff095
     4d4:	5f4f5300 	svcpl	0x004f5300
     4d8:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
     4dc:	5f4f5300 	svcpl	0x004f5300
     4e0:	4b434150 	blmi	10d0a28 <_Min_Stack_Size+0x10d0828>
     4e4:	4f464e49 	svcmi	0x00464e49
     4e8:	636f7300 	cmnvs	pc, #0, 6
     4ec:	73695f6b 	cmnvc	r9, #428	; 0x1ac
     4f0:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
     4f4:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     4f8:	63657200 	cmnvs	r5, #0, 4
     4fc:	6f726676 	svcvs	0x00726676
     500:	7266006d 	rsbvc	r0, r6, #109	; 0x6d
     504:	69736565 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, sl, sp, lr}^
     508:	7200657a 	andvc	r6, r0, #511705088	; 0x1e800000
     50c:	00766365 	rsbseq	r6, r6, r5, ror #6
     510:	736c7463 	cmnvc	ip, #1660944384	; 0x63000000
     514:	5f6b636f 	svcpl	0x006b636f
     518:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     51c:	5f4f5300 	svcpl	0x004f5300
     520:	004c5454 	subeq	r5, ip, r4, asr r4
     524:	535f4f53 	cmppl	pc, #332	; 0x14c
     528:	42444e45 	submi	r4, r4, #1104	; 0x450
     52c:	43004655 	movwmi	r4, #1621	; 0x655
     530:	45475f53 	strbmi	r5, [r7, #-3923]	; 0xfffff0ad
     534:	414d5f54 	cmpmi	sp, r4, asr pc
     538:	42585458 	subsmi	r5, r8, #88, 8	; 0x58000000
     53c:	43004655 	movwmi	r4, #1621	; 0x655
     540:	45535f53 	ldrbmi	r5, [r3, #-3923]	; 0xfffff0ad
     544:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
     548:	53414d54 	movtpl	r4, #7508	; 0x1d54
     54c:	4953004b 	ldmdbmi	r3, {r0, r1, r3, r6}^
     550:	45535f4b 	ldrbmi	r5, [r3, #-3915]	; 0xfffff0b5
     554:	5300544e 	movwpl	r5, #1102	; 0x44e
     558:	435f4b49 	cmpmi	pc, #74752	; 0x12400
     55c:	454e4e4f 	strbmi	r4, [lr, #-3663]	; 0xfffff1b1
     560:	44455443 	strbmi	r5, [r5], #-1091	; 0xfffffbbd
     564:	73696c00 	cmnvc	r9, #0, 24
     568:	006e6574 	rsbeq	r6, lr, r4, ror r5
     56c:	4d5f4f53 	ldclmi	15, cr4, [pc, #-332]	; 428 <_Min_Stack_Size+0x228>
     570:	73005353 	movwvc	r5, #851	; 0x353
     574:	5f6b636f 	svcpl	0x006b636f
     578:	5f796e61 	svcpl	0x00796e61
     57c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     580:	6c746300 	ldclvs	3, cr6, [r4], #-0
     584:	6b636f73 	blvs	18dc358 <_Min_Stack_Size+0x18dc158>
     588:	43007465 	movwmi	r7, #1125	; 0x465
     58c:	45475f53 	strbmi	r5, [r7, #-3923]	; 0xfffff0ad
     590:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
     594:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
     598:	00545055 	subseq	r5, r4, r5, asr r0
     59c:	6b636f73 	blvs	18dc370 <_Min_Stack_Size+0x18dc170>
     5a0:	5f6f695f 	svcpl	0x006f695f
     5a4:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
     5a8:	636f7300 	cmnvs	pc, #0, 6
     5ac:	61705f6b 	cmnvs	r0, fp, ror #30
     5b0:	695f6b63 	ldmdbvs	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
     5b4:	006f666e 	rsbeq	r6, pc, lr, ror #12
     5b8:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
     5bc:	4b495300 	blmi	12551c4 <_Min_Stack_Size+0x1254fc4>
     5c0:	5349445f 	movtpl	r4, #37983	; 0x945f
     5c4:	4e4e4f43 	cdpmi	15, 4, cr4, cr14, cr3, {2}
     5c8:	45544345 	ldrbmi	r4, [r4, #-837]	; 0xfffffcbb
     5cc:	682f0044 	stmdavs	pc!, {r2, r6}	; <UNPREDICTABLE>
     5d0:	2f656d6f 	svccs	0x00656d6f
     5d4:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
     5d8:	542f7673 	strtpl	r7, [pc], #-1651	; 5e0 <_Min_Stack_Size+0x3e0>
     5dc:	41534144 	cmpmi	r3, r4, asr #2
     5e0:	4f492d54 	svcmi	0x00492d54
     5e4:	74452f54 	strbvc	r2, [r5], #-3924	; 0xfffff0ac
     5e8:	6e726568 	cdpvs	5, 7, cr6, cr2, cr8, {3}
     5ec:	732f7465 			; <UNDEFINED> instruction: 0x732f7465
     5f0:	656b636f 	strbvs	r6, [fp, #-879]!	; 0xfffffc91
     5f4:	00632e74 	rsbeq	r2, r3, r4, ror lr
     5f8:	445f4f53 	ldrbmi	r4, [pc], #-3923	; 600 <_Min_Stack_Size+0x400>
     5fc:	49545345 	ldmdbmi	r4, {r0, r2, r6, r8, r9, ip, lr}^
     600:	49530050 	ldmdbmi	r3, {r4, r6}^
     604:	45525f4b 	ldrbmi	r5, [r2, #-3915]	; 0xfffff0b5
     608:	56494543 	strbpl	r4, [r9], -r3, asr #10
     60c:	53004445 	movwpl	r4, #1093	; 0x445
     610:	4f545f4f 	svcmi	0x00545f4f
     614:	72700053 	rsbsvc	r0, r0, #83	; 0x53
     618:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
     61c:	53006c6f 	movwpl	r6, #3183	; 0xc6f
     620:	454b5f4f 	strbmi	r5, [fp, #-3919]	; 0xfffff0b1
     624:	4c415045 	mcrrmi	0, 4, r5, r1, cr5
     628:	41455649 	cmpmi	r5, r9, asr #12
     62c:	004f5455 	subeq	r5, pc, r5, asr r4	; <UNPREDICTABLE>
     630:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
     634:	5f534300 	svcpl	0x00534300
     638:	5f544547 	svcpl	0x00544547
     63c:	4d544e49 	ldclmi	14, cr4, [r4, #-292]	; 0xfffffedc
     640:	004b5341 	subeq	r5, fp, r1, asr #6
     644:	6b636f73 	blvs	18dc418 <_Min_Stack_Size+0x18dc218>
     648:	6d65725f 	sfmvs	f7, 2, [r5, #-380]!	; 0xfffffe84
     64c:	656e6961 	strbvs	r6, [lr, #-2401]!	; 0xfffff69f
     650:	69735f64 	ldmdbvs	r3!, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     654:	7300657a 	movwvc	r6, #1402	; 0x57a
     658:	74646e65 	strbtvc	r6, [r4], #-3685	; 0xfffff19b
     65c:	4f53006f 	svcmi	0x0053006f
     660:	45454b5f 	strbmi	r4, [r5, #-2911]	; 0xfffff4a1
     664:	494c4150 	stmdbmi	ip, {r4, r6, r8, lr}^
     668:	45534556 	ldrbmi	r4, [r3, #-1366]	; 0xfffffaaa
     66c:	5f00444e 	svcpl	0x0000444e
     670:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
     674:	745f3233 	ldrbvc	r3, [pc], #-563	; 67c <_Min_Stack_Size+0x47c>
     678:	63657200 	cmnvs	r5, #0, 4
     67c:	7a697376 	bvc	1a5d45c <_Min_Stack_Size+0x1a5d25c>
     680:	4f530065 	svcmi	0x00530065
     684:	4345525f 	movtmi	r5, #21087	; 0x525f
     688:	46554256 			; <UNDEFINED> instruction: 0x46554256
     68c:	5f534300 	svcpl	0x00534300
     690:	5f544553 	svcpl	0x00544553
     694:	4f4d4f49 	svcmi	0x004d4f49
     698:	73004544 	movwvc	r4, #1348	; 0x544
     69c:	6f737465 	svcvs	0x00737465
     6a0:	706f6b63 	rsbvc	r6, pc, r3, ror #22
     6a4:	4f530074 	svcmi	0x00530074
     6a8:	5345445f 	movtpl	r4, #21599	; 0x545f
     6ac:	524f5054 	subpl	r5, pc, #84	; 0x54
     6b0:	53430054 	movtpl	r0, #12372	; 0x3054
     6b4:	524c435f 	subpl	r4, ip, #2080374785	; 0x7c000001
     6b8:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
     6bc:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
     6c0:	53005450 	movwpl	r5, #1104	; 0x450
     6c4:	45525f4f 	ldrbmi	r5, [r2, #-3919]	; 0xfffff0b1
     6c8:	4e49414d 	dvfmiem	f4, f1, #5.0
     6cc:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0xfffff6ad
     6d0:	4b495300 	blmi	12552d8 <_Min_Stack_Size+0x12550d8>
     6d4:	4c4c415f 	stfmie	f4, [ip], {95}	; 0x5f
     6d8:	7a697700 	bvc	1a5e2e0 <_Min_Stack_Size+0x1a5e0e0>
     6dc:	70696863 	rsbvc	r6, r9, r3, ror #16
     6e0:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     6e4:	6d74656e 	cfldr64vs	mvdx6, [r4, #-440]!	; 0xfffffe48
     6e8:	0065646f 	rsbeq	r6, r5, pc, ror #8
     6ec:	475f5743 	ldrbmi	r5, [pc, -r3, asr #14]
     6f0:	505f5445 	subspl	r5, pc, r5, asr #8
     6f4:	4f505948 	svcmi	0x00505948
     6f8:	444f4d57 	strbmi	r4, [pc], #-3415	; 700 <_Min_Stack_Size+0x500>
     6fc:	69770045 	ldmdbvs	r7!, {r0, r2, r6}^
     700:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     704:	65735f70 	ldrbvs	r5, [r3, #-3952]!	; 0xfffff090
     708:	746e6974 	strbtvc	r6, [lr], #-2420	; 0xfffff68c
     70c:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
     710:	616d7470 	smcvs	55104	; 0xd740
     714:	77006b73 	smlsdxvc	r0, r3, fp, r6
     718:	68637a69 	stmdavs	r3!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
     71c:	625f7069 	subsvs	r7, pc, #105	; 0x69
     720:	775f7375 			; <UNDEFINED> instruction: 0x775f7375
     724:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     728:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
     72c:	69726300 	ldmdbvs	r2!, {r8, r9, sp, lr}^
     730:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
     734:	575f5f00 	ldrbpl	r5, [pc, -r0, lsl #30]
     738:	48435a49 	stmdami	r3, {r0, r3, r6, r9, fp, ip, lr}^
     73c:	77005049 	strvc	r5, [r0, -r9, asr #32]
     740:	68637a69 	stmdavs	r3!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
     744:	635f7069 	cmpvs	pc, #105	; 0x69
     748:	5f736972 	svcpl	0x00736972
     74c:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
     750:	4d4e0072 	stclmi	0, cr0, [lr, #-456]	; 0xfffffe38
     754:	524f465f 	subpl	r4, pc, #99614720	; 0x5f00000
     758:	52414543 	subpl	r4, r1, #281018368	; 0x10c00000
     75c:	73630050 	cmnvc	r3, #80	; 0x50
     760:	6c65735f 	stclvs	3, cr7, [r5], #-380	; 0xfffffe84
     764:	5f574300 	svcpl	0x00574300
     768:	5f544547 	svcpl	0x00544547
     76c:	53594850 	cmppl	r9, #80, 16	; 0x500000
     770:	55544154 	ldrbpl	r4, [r4, #-340]	; 0xfffffeac
     774:	69770053 	ldmdbvs	r7!, {r0, r1, r4, r6}^
     778:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     77c:	65675f70 	strbvs	r5, [r7, #-3952]!	; 0xfffff090
     780:	746e6974 	strbtvc	r6, [lr], #-2420	; 0xfffff68c
     784:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
     788:	616d7470 	smcvs	55104	; 0xd740
     78c:	43006b73 	movwmi	r6, #2931	; 0xb73
     790:	45475f4e 	strbmi	r5, [r7, #-3918]	; 0xfffff0b2
     794:	454e5f54 	strbmi	r5, [lr, #-3924]	; 0xfffff0ac
     798:	464e4954 			; <UNDEFINED> instruction: 0x464e4954
     79c:	5743004f 	strbpl	r0, [r3, -pc, asr #32]
     7a0:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
     7a4:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
     7a8:	4d495452 	cfstrdmi	mvd5, [r9, #-328]	; 0xfffffeb8
     7ac:	69770045 	ldmdbvs	r7!, {r0, r2, r6}^
     7b0:	654e5f7a 	strbvs	r5, [lr, #-3962]	; 0xfffff086
     7b4:	666e4974 			; <UNDEFINED> instruction: 0x666e4974
     7b8:	00745f6f 	rsbseq	r5, r4, pc, ror #30
     7bc:	5f676572 	svcpl	0x00676572
     7c0:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     7c4:	5f706968 	svcpl	0x00706968
     7c8:	5f737562 	svcpl	0x00737562
     7cc:	75666263 	strbvc	r6, [r6, #-611]!	; 0xfffffd9d
     7d0:	7700636e 	strvc	r6, [r0, -lr, ror #6]
     7d4:	68637a69 	stmdavs	r3!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
     7d8:	735f7069 	cmpvc	pc, #105	; 0x69
     7dc:	775f6970 			; <UNDEFINED> instruction: 0x775f6970
     7e0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     7e4:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
     7e8:	7a697700 	bvc	1a5e3f0 <_Min_Stack_Size+0x1a5e1f0>
     7ec:	70696863 	rsbvc	r6, r9, r3, ror #16
     7f0:	6970735f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
     7f4:	6165725f 	cmnvs	r5, pc, asr r2
     7f8:	74796264 	ldrbtvc	r6, [r9], #-612	; 0xfffffd9c
     7fc:	445f0065 	ldrbmi	r0, [pc], #-101	; 804 <_Min_Stack_Size+0x604>
     800:	5f504348 	svcpl	0x00504348
     804:	73787400 	cmnvc	r8, #0, 8
     808:	00657a69 	rsbeq	r7, r5, r9, ror #20
     80c:	535f5743 	cmppl	pc, #17563648	; 0x10c0000
     810:	495f5445 	ldmdbmi	pc, {r0, r2, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     814:	4d52544e 	cfldrdmi	mvd5, [r2, #-312]	; 0xfffffec8
     818:	004b5341 	subeq	r5, fp, r1, asr #6
     81c:	535f4b49 	cmppl	pc, #74752	; 0x12400
     820:	5f4b434f 	svcpl	0x004b434f
     824:	4d4e0037 	stclmi	0, cr0, [lr, #-220]	; 0xffffff24
     828:	4e49505f 	mcrmi	0, 2, r5, cr9, cr15, {2}
     82c:	4f4c4247 	svcmi	0x004c4247
     830:	63004b43 	movwvs	r4, #2883	; 0xb43
     834:	69776c74 	ldmdbvs	r7!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     838:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     83c:	69770070 	ldmdbvs	r7!, {r4, r5, r6}^
     840:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     844:	65675f70 	strbvs	r5, [r7, #-3952]!	; 0xfffff090
     848:	746e6974 	strbtvc	r6, [lr], #-2420	; 0xfffff68c
     84c:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
     850:	63007470 	movwvs	r7, #1136	; 0x470
     854:	7079746e 	rsbsvc	r7, r9, lr, ror #8
     858:	4d4e0065 	stclmi	0, cr0, [lr, #-404]	; 0xfffffe6c
     85c:	5050505f 	subspl	r5, r0, pc, asr r0
     860:	6e00454f 	cfsh32vs	mvfx4, mvfx0, #47
     864:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     868:	4300656d 	movwmi	r6, #1389	; 0x56d
     86c:	45535f57 	ldrbmi	r5, [r3, #-3927]	; 0xfffff0a9
     870:	48505f54 	ldmdami	r0, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     874:	4e4f4359 	mcrmi	3, 2, r4, cr15, cr9, {2}
     878:	69770046 	ldmdbvs	r7!, {r1, r2, r6}^
     87c:	7968707a 	stmdbvc	r8!, {r1, r3, r4, r5, r6, ip, sp, lr}^
     880:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     884:	63796870 	cmnvs	r9, #112, 16	; 0x700000
     888:	00666e6f 	rsbeq	r6, r6, pc, ror #28
     88c:	475f4e43 	ldrbmi	r4, [pc, -r3, asr #28]
     890:	4e5f5445 	cdpmi	4, 5, cr5, cr15, cr5, {2}
     894:	4f4d5445 	svcmi	0x004d5445
     898:	43004544 	movwmi	r4, #1348	; 0x544
     89c:	45525f57 	ldrbmi	r5, [r2, #-3927]	; 0xfffff0a9
     8a0:	5f544553 	svcpl	0x00544553
     8a4:	435a4957 	cmpmi	sl, #1425408	; 0x15c000
     8a8:	00504948 	subseq	r4, r0, r8, asr #18
     8ac:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
     8b0:	6e635f79 	mcrvs	15, 3, r5, cr3, cr9, {3}
     8b4:	68640074 	stmdavs	r4!, {r2, r4, r5, r6}^
     8b8:	6d5f7063 	ldclvs	0, cr7, [pc, #-396]	; 734 <_Min_Stack_Size+0x534>
     8bc:	0065646f 	rsbeq	r6, r5, pc, ror #8
     8c0:	707a6977 	rsbsvc	r6, sl, r7, ror r9
     8c4:	675f7968 	ldrbvs	r7, [pc, -r8, ror #18]
     8c8:	68707465 	ldmdavs	r0!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     8cc:	6e696c79 	mcrvs	12, 3, r6, cr9, cr9, {3}
     8d0:	7562006b 	strbvc	r0, [r2, #-107]!	; 0xffffff95
     8d4:	62725f73 	rsbsvs	r5, r2, #460	; 0x1cc
     8d8:	7a697700 	bvc	1a5e4e0 <_Min_Stack_Size+0x1a5e2e0>
     8dc:	70696863 	rsbvc	r6, r9, r3, ror #16
     8e0:	5f73635f 	svcpl	0x0073635f
     8e4:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
     8e8:	5f007463 	svcpl	0x00007463
     8ec:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
     8f0:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
     8f4:	4b490065 	blmi	1240a90 <_Min_Stack_Size+0x1240890>
     8f8:	5f50495f 	svcpl	0x0050495f
     8fc:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
     900:	5443494c 	strbpl	r4, [r3], #-2380	; 0xfffff6b4
     904:	7a697700 	bvc	1a5e50c <_Min_Stack_Size+0x1a5e30c>
     908:	74654e5f 	strbtvc	r4, [r5], #-3679	; 0xfffff1a1
     90c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     910:	0074756f 	rsbseq	r7, r4, pc, ror #10
     914:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     918:	5f706968 	svcpl	0x00706968
     91c:	6e746573 	mrcvs	5, 3, r6, cr4, cr3, {3}
     920:	6e697465 	cdpvs	4, 6, cr7, cr9, cr5, {3}
     924:	63006f66 	movwvs	r6, #3942	; 0xf66
     928:	656e6c74 	strbvs	r6, [lr, #-3188]!	; 0xfffff38c
     92c:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
     930:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
     934:	68505f7a 	ldmdavs	r0, {r1, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     938:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
     93c:	00745f66 	rsbseq	r5, r4, r6, ror #30
     940:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     944:	5f706968 	svcpl	0x00706968
     948:	5f737562 	svcpl	0x00737562
     94c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
     950:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
     954:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
     958:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
     95c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     960:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
     964:	315f656d 	cmpcc	pc, sp, ror #10
     968:	73753030 	cmnvc	r5, #48	; 0x30
     96c:	5f4b4900 	svcpl	0x004b4900
     970:	004c4f57 	subeq	r4, ip, r7, asr pc
     974:	535f4e43 	cmppl	pc, #1072	; 0x430
     978:	4e5f5445 	cdpmi	4, 5, cr5, cr15, cr5, {2}
     97c:	4e495445 	cdpmi	4, 4, cr5, cr9, cr5, {2}
     980:	77004f46 	strvc	r4, [r0, -r6, asr #30]
     984:	68707a69 	ldmdavs	r0!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
     988:	65735f79 	ldrbvs	r5, [r3, #-3961]!	; 0xfffff087
     98c:	79687074 	stmdbvc	r8!, {r2, r4, r5, r6, ip, sp, lr}^
     990:	646f6d70 	strbtvs	r6, [pc], #-3440	; 998 <_Min_Stack_Size+0x798>
     994:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
     998:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     99c:	65675f70 	strbvs	r5, [r7, #-3952]!	; 0xfffff090
     9a0:	74656e74 	strbtvc	r6, [r5], #-3700	; 0xfffff18c
     9a4:	6f666e69 	svcvs	0x00666e69
     9a8:	5f4e4300 	svcpl	0x004e4300
     9ac:	5f544553 	svcpl	0x00544553
     9b0:	454d4954 	strbmi	r4, [sp, #-2388]	; 0xfffff6ac
     9b4:	0054554f 	subseq	r5, r4, pc, asr #10
     9b8:	72746e69 	rsbsvc	r6, r4, #1680	; 0x690
     9bc:	69707300 	ldmdbvs	r0!, {r8, r9, ip, sp, lr}^
     9c0:	0062775f 	rsbeq	r7, r2, pc, asr r7
     9c4:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     9c8:	5f706968 	svcpl	0x00706968
     9cc:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
     9d0:	6f656d69 	svcvs	0x00656d69
     9d4:	43007475 	movwmi	r7, #1141	; 0x475
     9d8:	4c435f57 	mcrrmi	15, 5, r5, r3, cr7
     9dc:	4e495f52 	mcrmi	15, 2, r5, cr9, cr2, {2}
     9e0:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
     9e4:	00545055 	subseq	r5, r4, r5, asr r0
     9e8:	5f7a6977 	svcpl	0x007a6977
     9ec:	4974654e 	ldmdbmi	r4!, {r1, r2, r3, r6, r8, sl, sp, lr}^
     9f0:	006f666e 	rsbeq	r6, pc, lr, ror #12
     9f4:	4954454e 	ldmdbmi	r4, {r1, r2, r3, r6, r8, sl, lr}^
     9f8:	5f4f464e 	svcpl	0x004f464e
     9fc:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
     a00:	43004349 	movwmi	r4, #841	; 0x349
     a04:	45535f4e 	ldrbmi	r5, [r3, #-3918]	; 0xfffff0b2
     a08:	454e5f54 	strbmi	r5, [lr, #-3924]	; 0xfffff0ac
     a0c:	444f4d54 	strbmi	r4, [pc], #-3412	; a14 <_Min_Stack_Size+0x814>
     a10:	775f0045 	ldrbvc	r0, [pc, -r5, asr #32]
     a14:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     a18:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
     a1c:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
     a20:	69775f67 	ldmdbvs	r7!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     a24:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     a28:	73635f70 	cmnvc	r3, #112, 30	; 0x1c0
     a2c:	6662635f 			; <UNDEFINED> instruction: 0x6662635f
     a30:	00636e75 	rsbeq	r6, r3, r5, ror lr
     a34:	445f4b49 	ldrbmi	r4, [pc], #-2889	; a3c <_Min_Stack_Size+0x83c>
     a38:	5f545345 	svcpl	0x00545345
     a3c:	45524e55 	ldrbmi	r4, [r2, #-3669]	; 0xfffff1ab
     a40:	00484341 	subeq	r4, r8, r1, asr #6
     a44:	535f5743 	cmppl	pc, #17563648	; 0x10c0000
     a48:	505f5445 	subspl	r5, pc, r5, asr #8
     a4c:	4f505948 	svcmi	0x00505948
     a50:	444f4d57 	strbmi	r4, [pc], #-3415	; a58 <_Min_Stack_Size+0x858>
     a54:	65720045 	ldrbvs	r0, [r2, #-69]!	; 0xffffffbb
     a58:	69775f67 	ldmdbvs	r7!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     a5c:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     a60:	70735f70 	rsbsvc	r5, r3, r0, ror pc
     a64:	62635f69 	rsbvs	r5, r3, #420	; 0x1a4
     a68:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     a6c:	7a697700 	bvc	1a5e674 <_Min_Stack_Size+0x1a5e474>
     a70:	5f796870 	svcpl	0x00796870
     a74:	70746567 	rsbsvc	r6, r4, r7, ror #10
     a78:	74737968 	ldrbtvc	r7, [r3], #-2408	; 0xfffff698
     a7c:	63007461 	movwvs	r7, #1121	; 0x461
     a80:	69776c74 	ldmdbvs	r7!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     a84:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     a88:	79745f70 	ldmdbvc	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     a8c:	43006570 	movwmi	r6, #1392	; 0x570
     a90:	45475f57 	strbmi	r5, [r7, #-3927]	; 0xfffff0a9
     a94:	44495f54 	strbmi	r5, [r9], #-3924	; 0xfffff0ac
     a98:	69726300 	ldmdbvs	r2!, {r8, r9, sp, lr}^
     a9c:	78655f73 	stmdavc	r5!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     aa0:	74776300 	ldrbtvc	r6, [r7], #-768	; 0xfffffd00
     aa4:	00657079 	rsbeq	r7, r5, r9, ror r0
     aa8:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     aac:	5f706968 	svcpl	0x00706968
     ab0:	69726c63 	ldmdbvs	r2!, {r0, r1, r5, r6, sl, fp, sp, lr}^
     ab4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     ab8:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
     abc:	7a697700 	bvc	1a5e6c4 <_Min_Stack_Size+0x1a5e4c4>
     ac0:	70696863 	rsbvc	r6, r9, r3, ror #16
     ac4:	5f73635f 	svcpl	0x0073635f
     ac8:	65736564 	ldrbvs	r6, [r3, #-1380]!	; 0xfffffa9c
     acc:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
     ad0:	656e7000 	strbvs	r7, [lr, #-0]!
     ad4:	666e6974 			; <UNDEFINED> instruction: 0x666e6974
     ad8:	4b49006f 	blmi	1240c9c <_Min_Stack_Size+0x1240a9c>
     adc:	5050505f 	subspl	r5, r0, pc, asr r0
     ae0:	545f454f 	ldrbpl	r4, [pc], #-1359	; ae8 <_Min_Stack_Size+0x8e8>
     ae4:	494d5245 	stmdbmi	sp, {r0, r2, r6, r9, ip, lr}^
     ae8:	4554414e 	ldrbmi	r4, [r4, #-334]	; 0xfffffeb2
     aec:	57430044 	strbpl	r0, [r3, -r4, asr #32]
     af0:	5445475f 	strbpl	r4, [r5], #-1887	; 0xfffff8a1
     af4:	5948505f 	stmdbpl	r8, {r0, r1, r2, r3, r4, r6, ip, lr}^
     af8:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
     afc:	4e445f00 	cdpmi	15, 4, cr5, cr4, cr0, {0}
     b00:	43005f53 	movwmi	r5, #3923	; 0xf53
     b04:	45475f57 	strbmi	r5, [r7, #-3927]	; 0xfffff0a9
     b08:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
     b0c:	414d5254 	cmpmi	sp, r4, asr r2
     b10:	63004b53 	movwvs	r4, #2899	; 0xb53
     b14:	656e6c74 	strbvs	r6, [lr, #-3188]!	; 0xfffff38c
     b18:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
     b1c:	79745f6b 	ldmdbvc	r4!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     b20:	5f006570 	svcpl	0x00006570
     b24:	53495243 	movtpl	r5, #37443	; 0x9243
     b28:	6d747000 	ldclvs	0, cr7, [r4, #-0]
     b2c:	6e690070 	mcrvs	0, 3, r0, cr9, cr0, {3}
     b30:	6b5f7274 	blvs	17dd508 <_Min_Stack_Size+0x17dd308>
     b34:	00646e69 	rsbeq	r6, r4, r9, ror #28
     b38:	475f5743 	ldrbmi	r5, [pc, -r3, asr #14]
     b3c:	505f5445 	subspl	r5, pc, r5, asr #8
     b40:	494c5948 	stmdbmi	ip, {r3, r6, r8, fp, ip, lr}^
     b44:	43004b4e 	movwmi	r4, #2894	; 0xb4e
     b48:	45475f57 	strbmi	r5, [r7, #-3927]	; 0xfffff0a9
     b4c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
     b50:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
     b54:	00545055 	subseq	r5, r4, r5, asr r0
     b58:	6d5f6669 	ldclvs	6, cr6, [pc, #-420]	; 9bc <_Min_Stack_Size+0x7bc>
     b5c:	0065646f 	rsbeq	r6, r5, pc, ror #8
     b60:	726d6973 	rsbvc	r6, sp, #1884160	; 0x1cc000
     b64:	7a697700 	bvc	1a5e76c <_Min_Stack_Size+0x1a5e56c>
     b68:	74654e5f 	strbtvc	r4, [r5], #-3679	; 0xfffff1a1
     b6c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     b70:	5f74756f 	svcpl	0x0074756f
     b74:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
     b78:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     b7c:	77735f70 			; <UNDEFINED> instruction: 0x77735f70
     b80:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
     b84:	49007465 	stmdbmi	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
     b88:	4f535f4b 	svcmi	0x00535f4b
     b8c:	305f4b43 	subscc	r4, pc, r3, asr #22
     b90:	5f4b4900 	svcpl	0x004b4900
     b94:	4b434f53 	blmi	10d48e8 <_Min_Stack_Size+0x10d46e8>
     b98:	4900315f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, ip, sp}
     b9c:	4f535f4b 	svcmi	0x00535f4b
     ba0:	325f4b43 	subscc	r4, pc, #68608	; 0x10c00
     ba4:	5f4b4900 	svcpl	0x004b4900
     ba8:	4b434f53 	blmi	10d48fc <_Min_Stack_Size+0x10d46fc>
     bac:	4900335f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp}
     bb0:	4f535f4b 	svcmi	0x00535f4b
     bb4:	345f4b43 	ldrbcc	r4, [pc], #-2883	; bbc <_Min_Stack_Size+0x9bc>
     bb8:	5f4b4900 	svcpl	0x004b4900
     bbc:	4b434f53 	blmi	10d4910 <_Min_Stack_Size+0x10d4710>
     bc0:	4900355f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp}
     bc4:	4f535f4b 	svcmi	0x00535f4b
     bc8:	365f4b43 	ldrbcc	r4, [pc], -r3, asr #22
     bcc:	6f682f00 	svcvs	0x00682f00
     bd0:	762f656d 	strtvc	r6, [pc], -sp, ror #10
     bd4:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
     bd8:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
     bdc:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
     be0:	544f492d 	strbpl	r4, [pc], #-2349	; be8 <_Min_Stack_Size+0x9e8>
     be4:	6874452f 	ldmdavs	r4!, {r0, r1, r2, r3, r5, r8, sl, lr}^
     be8:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     bec:	69772f74 	ldmdbvs	r7!, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
     bf0:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     bf4:	6f635f70 	svcvs	0x00635f70
     bf8:	632e666e 			; <UNDEFINED> instruction: 0x632e666e
     bfc:	64644100 	strbtvs	r4, [r4], #-256	; 0xffffff00
     c00:	6c655372 	stclvs	3, cr5, [r5], #-456	; 0xfffffe38
     c04:	5f736300 	svcpl	0x00736300
     c08:	65736564 	ldrbvs	r6, [r3, #-1380]!	; 0xfffffa9c
     c0c:	7073006c 	rsbsvc	r0, r3, ip, rrx
     c10:	62725f69 	rsbsvs	r5, r2, #420	; 0x1a4
     c14:	5f574300 	svcpl	0x00574300
     c18:	54494e49 	strbpl	r4, [r9], #-3657	; 0xfffff1b7
     c1c:	5a49575f 	bpl	12569a0 <_Min_Stack_Size+0x12567a0>
     c20:	50494843 	subpl	r4, r9, r3, asr #16
     c24:	70756400 	rsbsvc	r6, r5, r0, lsl #8
     c28:	0078656c 	rsbseq	r6, r8, ip, ror #10
     c2c:	525f5743 	subspl	r5, pc, #17563648	; 0x10c0000
     c30:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
     c34:	5948505f 	stmdbpl	r8, {r0, r1, r2, r3, r4, r6, ip, lr}^
     c38:	7a697700 	bvc	1a5e840 <_Min_Stack_Size+0x1a5e640>
     c3c:	70696863 	rsbvc	r6, r9, r3, ror #16
     c40:	6972635f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
     c44:	78655f73 	stmdavc	r5!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     c48:	43007469 	movwmi	r7, #1129	; 0x469
     c4c:	45475f4e 	strbmi	r5, [r7, #-3918]	; 0xfffff0b2
     c50:	49545f54 	ldmdbmi	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     c54:	554f454d 	strbpl	r4, [pc, #-1357]	; 70f <_Min_Stack_Size+0x50f>
     c58:	69770054 	ldmdbvs	r7!, {r2, r4, r6}^
     c5c:	68505f7a 	ldmdavs	r0, {r1, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     c60:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
     c64:	68640066 	stmdavs	r4!, {r1, r2, r5, r6}^
     c68:	77007063 	strvc	r7, [r0, -r3, rrx]
     c6c:	68637a69 	stmdavs	r3!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
     c70:	735f7069 	cmpvc	pc, #105	; 0x69
     c74:	656e7465 	strbvs	r7, [lr, #-1125]!	; 0xfffffb9b
     c78:	646f6d74 	strbtvs	r6, [pc], #-3444	; c80 <_Min_Stack_Size+0xa80>
     c7c:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
     c80:	69775f67 	ldmdbvs	r7!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     c84:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
     c88:	72635f70 	rsbvc	r5, r3, #112, 30	; 0x1c0
     c8c:	635f7369 	cmpvs	pc, #-1543503871	; 0xa4000001
     c90:	6e756662 	cdpvs	6, 7, cr6, cr5, cr2, {3}
     c94:	70730063 	rsbsvc	r0, r3, r3, rrx
     c98:	00646565 	rsbeq	r6, r4, r5, ror #10
     c9c:	707a6977 	rsbsvc	r6, sl, r7, ror r9
     ca0:	675f7968 	ldrbvs	r7, [pc, -r8, ror #18]
     ca4:	68707465 	ldmdavs	r0!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     ca8:	6e6f6379 	mcrvs	3, 3, r6, cr15, cr9, {3}
     cac:	78720066 	ldmdavc	r2!, {r1, r2, r5, r6}^
     cb0:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     cb4:	5f4d4e00 	svcpl	0x004d4e00
     cb8:	454b4157 	strbmi	r4, [fp, #-343]	; 0xfffffea9
     cbc:	414c4e4f 	cmpmi	ip, pc, asr #28
     cc0:	4b49004e 	blmi	1240e00 <_Min_Stack_Size+0x1240c00>
     cc4:	434f535f 	movtmi	r5, #62303	; 0xf35f
     cc8:	4c415f4b 	mcrrmi	15, 4, r5, r1, cr11
     ccc:	7562004c 	strbvc	r0, [r2, #-76]!	; 0xffffffb4
     cd0:	62775f73 	rsbsvs	r5, r7, #460	; 0x1cc
     cd4:	5f574300 	svcpl	0x00574300
     cd8:	5f544547 	svcpl	0x00544547
     cdc:	52544e49 	subspl	r4, r4, #1168	; 0x490
     ce0:	454d4954 	strbmi	r4, [sp, #-2388]	; 0xfffff6ac
     ce4:	7a697700 	bvc	1a5e8ec <_Min_Stack_Size+0x1a5e6ec>
     ce8:	70696863 	rsbvc	r6, r9, r3, ror #16
     cec:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
     cf0:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
     cf4:	7968707a 	stmdbvc	r8!, {r1, r3, r4, r5, r6, ip, sp, lr}^
     cf8:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
     cfc:	77007465 	strvc	r7, [r0, -r5, ror #8]
     d00:	68637a69 	stmdavs	r3!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
     d04:	675f7069 	ldrbvs	r7, [pc, -r9, rrx]
     d08:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     d0c:	756f656d 	strbvc	r6, [pc, #-1389]!	; 7a7 <_Min_Stack_Size+0x5a7>
     d10:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
     d14:	7968707a 	stmdbvc	r8!, {r1, r3, r4, r5, r6, ip, sp, lr}^
     d18:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     d1c:	70796870 	rsbsvc	r6, r9, r0, ror r8
     d20:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
     d24:	54454e00 	strbpl	r4, [r5], #-3584	; 0xfffff200
     d28:	4f464e49 	svcmi	0x00464e49
     d2c:	4348445f 	movtmi	r4, #33887	; 0x845f
     d30:	64610050 	strbtvs	r0, [r1], #-80	; 0xffffffb0
     d34:	65737264 	ldrbvs	r7, [r3, #-612]!	; 0xfffffd9c
     d38:	4957006c 	ldmdbmi	r7, {r2, r3, r5, r6}^
     d3c:	4948435a 	stmdbmi	r8, {r1, r3, r4, r6, r8, r9, lr}^
     d40:	52575f50 	subspl	r5, r7, #80, 30	; 0x140
     d44:	5f455449 	svcpl	0x00455449
     d48:	00465542 	subeq	r5, r6, r2, asr #10
     d4c:	5f7a6977 	svcpl	0x007a6977
     d50:	76636572 			; <UNDEFINED> instruction: 0x76636572
     d54:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
     d58:	42700061 	rsbsmi	r0, r0, #97	; 0x61
     d5c:	57006675 	smlsdxpl	r0, r5, r6, r6
     d60:	48435a49 	stmdami	r3, {r0, r3, r6, r9, fp, ip, lr}^
     d64:	525f5049 	subspl	r5, pc, #73	; 0x49
     d68:	00444145 	subeq	r4, r4, r5, asr #2
     d6c:	53746567 	cmnpl	r4, #432013312	; 0x19c00000
     d70:	58545f6e 	ldmdapl	r4, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     d74:	5253465f 	subspl	r4, r3, #99614720	; 0x5f00000
     d78:	6c617600 	stclvs	6, cr7, [r1], #-0
     d7c:	69770031 	ldmdbvs	r7!, {r0, r4, r5}^
     d80:	7461647a 	strbtvc	r6, [r1], #-1146	; 0xfffffb86
     d84:	69770061 	ldmdbvs	r7!, {r0, r5, r6}^
     d88:	65725f7a 	ldrbvs	r5, [r2, #-3962]!	; 0xfffff086
     d8c:	695f7663 	ldmdbvs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     d90:	726f6e67 	rsbvc	r6, pc, #1648	; 0x670
     d94:	49570065 	ldmdbmi	r7, {r0, r2, r5, r6}^
     d98:	4948435a 	stmdbmi	r8, {r1, r3, r4, r6, r8, r9, lr}^
     d9c:	45525f50 	ldrbmi	r5, [r2, #-3920]	; 0xfffff0b0
     da0:	425f4441 	subsmi	r4, pc, #1090519040	; 0x41000000
     da4:	67004655 	smlsdvs	r0, r5, r6, r4
     da8:	6e537465 	cdpvs	4, 5, cr7, cr3, cr5, {3}
     dac:	5f58525f 	svcpl	0x0058525f
     db0:	00525352 	subseq	r5, r2, r2, asr r3
     db4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; d00 <_Min_Stack_Size+0xb00>
     db8:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     dbc:	76737572 			; <UNDEFINED> instruction: 0x76737572
     dc0:	4144542f 	cmpmi	r4, pc, lsr #8
     dc4:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
     dc8:	2f544f49 	svccs	0x00544f49
     dcc:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
     dd0:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
     dd4:	3535572f 	ldrcc	r5, [r5, #-1839]!	; 0xfffff8d1
     dd8:	772f3030 			; <UNDEFINED> instruction: 0x772f3030
     ddc:	30303535 	eorscc	r3, r0, r5, lsr r5
     de0:	7700632e 	strvc	r6, [r0, -lr, lsr #6]
     de4:	735f7a69 	cmpvc	pc, #430080	; 0x69000
     de8:	5f646e65 	svcpl	0x00646e65
     dec:	61746164 	cmnvs	r4, r4, ror #2
     df0:	5a495700 	bpl	12569f8 <_Min_Stack_Size+0x12567f8>
     df4:	50494843 	subpl	r4, r9, r3, asr #16
     df8:	4952575f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     dfc:	63004554 	movwvs	r4, #1364	; 0x554
     e00:	6b636568 	blvs	18da3a8 <_Min_Stack_Size+0x18da1a8>
     e04:	4348445f 	movtmi	r4, #33887	; 0x845f
     e08:	74735f50 	ldrbtvc	r5, [r3], #-3920	; 0xfffff0b0
     e0c:	00657461 	rsbeq	r7, r5, r1, ror #8
     e10:	637a6977 	cmnvs	sl, #1949696	; 0x1dc000
     e14:	5f706968 	svcpl	0x00706968
     e18:	0063616d 	rsbeq	r6, r3, sp, ror #2
     e1c:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
     e20:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
     e24:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
     e28:	534f4942 	movtpl	r4, #63810	; 0xf942
     e2c:	706f6373 	rsbvc	r6, pc, r3, ror r3	; <UNPREDICTABLE>
     e30:	48440065 	stmdami	r4, {r0, r2, r5, r6}^
     e34:	615f5043 	cmpvs	pc, r3, asr #32
     e38:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     e3c:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
     e40:	006e735f 	rsbeq	r7, lr, pc, asr r3
     e44:	73706f68 	cmnvc	r0, #104, 30	; 0x1a0
     e48:	43484400 	movtmi	r4, #33792	; 0x8400
     e4c:	41465f50 	cmpmi	r6, r0, asr pc
     e50:	44454c49 	strbmi	r4, [r5], #-3145	; 0xfffff3b7
     e54:	79746800 	ldmdbvc	r4!, {fp, sp, lr}^
     e58:	6c006570 	cfstr32vs	mvfx6, [r0], {112}	; 0x70
     e5c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
     e60:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     e64:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
     e68:	6553656d 	ldrbvs	r6, [r3, #-1389]	; 0xfffffa93
     e6c:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
     e70:	63686400 	cmnvs	r8, #0, 8
     e74:	61504970 	cmpvs	r0, r0, ror r9
     e78:	4c726464 	cfldrdmi	mvd6, [r2], #-400	; 0xfffffe70
     e7c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
     e80:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     e84:	61727400 	cmnvs	r2, r0, lsl #8
     e88:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
     e8c:	61636e45 	cmnvs	r3, r5, asr #28
     e90:	6c757370 	ldclvs	3, cr7, [r5], #-448	; 0xfffffe40
     e94:	6f697461 	svcvs	0x00697461
     e98:	4844006e 	stmdami	r4, {r1, r2, r3, r5, r6}^
     e9c:	525f5043 	subspl	r5, pc, #67	; 0x43
     ea0:	494e4e55 	stmdbmi	lr, {r0, r2, r4, r6, r9, sl, fp, lr}^
     ea4:	6400474e 	strvs	r4, [r0], #-1870	; 0xfffff8b2
     ea8:	52706368 	rsbspl	r6, r0, #104, 6	; 0xa0000001
     eac:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
     eb0:	64657473 	strbtvs	r7, [r5], #-1139	; 0xfffffb8d
     eb4:	64615049 	strbtvs	r5, [r1], #-73	; 0xffffffb7
     eb8:	6f007264 	svcvs	0x00007264
     ebc:	6c5f7470 	cfldrdvs	mvd7, [pc], {112}	; 0x70
     ec0:	6c006e65 	stcvs	14, cr6, [r0], {101}	; 0x65
     ec4:	6553676f 	ldrbvs	r6, [r3, #-1903]	; 0xfffff891
     ec8:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
     ecc:	61696300 	cmnvs	r9, r0, lsl #6
     ed0:	00726464 	rsbseq	r6, r2, r4, ror #8
     ed4:	6e656c68 	cdpvs	12, 6, cr6, cr5, cr8, {3}
     ed8:	43484400 	movtmi	r4, #33792	; 0x8400
     edc:	50495f50 	subpl	r5, r9, r0, asr pc
     ee0:	4148435f 	cmpmi	r8, pc, asr r3
     ee4:	4445474e 	strbmi	r4, [r5], #-1870	; 0xfffff8b2
     ee8:	61686300 	cmnvs	r8, r0, lsl #6
     eec:	00726464 	rsbseq	r6, r2, r4, ror #8
     ef0:	70636864 	rsbvc	r6, r3, r4, ror #16
     ef4:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
     ef8:	6449746e 	strbvs	r7, [r9], #-1134	; 0xfffffb92
     efc:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     f00:	72656966 	rsbvc	r6, r5, #1671168	; 0x198000
     f04:	756f7200 	strbvc	r7, [pc, #-512]!	; d0c <_Min_Stack_Size+0xb0c>
     f08:	53726574 	cmnpl	r2, #116, 10	; 0x1d000000
     f0c:	63696c6f 	cmnvs	r9, #28416	; 0x6f00
     f10:	74617469 	strbtvc	r7, [r1], #-1129	; 0xfffffb97
     f14:	416e6f69 	cmnmi	lr, r9, ror #30
     f18:	00726464 	rsbseq	r6, r2, r4, ror #8
     f1c:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
     f20:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     f24:	68640065 	stmdavs	r4!, {r0, r2, r5, r6}^
     f28:	6c437063 	mcrrvs	0, 6, r7, r3, cr3
     f2c:	49737361 	ldmdbmi	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     f30:	746e6564 	strbtvc	r6, [lr], #-1380	; 0xfffffa9c
     f34:	65696669 	strbvs	r6, [r9, #-1641]!	; 0xfffff997
     f38:	76730072 			; <UNDEFINED> instruction: 0x76730072
     f3c:	6f705f72 	svcvs	0x00705f72
     f40:	6e007472 	mcrvs	4, 0, r7, cr0, cr2, {3}
     f44:	6f447369 	svcvs	0x00447369
     f48:	6e69616d 	powvsez	f6, f1, #5.0
     f4c:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
     f50:	5f796d00 	svcpl	0x00796d00
     f54:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     f58:	63686400 	cmnvs	r8, #0, 8
     f5c:	76315470 			; <UNDEFINED> instruction: 0x76315470
     f60:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     f64:	72656d00 	rsbvc	r6, r5, #0, 26
     f68:	75447469 	strbvc	r7, [r4, #-1129]	; 0xfffffb97
     f6c:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     f70:	4400656c 	strmi	r6, [r0], #-1388	; 0xfffffa94
     f74:	5f504348 	svcpl	0x00504348
     f78:	4b434f53 	blmi	10d4ccc <_Min_Stack_Size+0x10d4acc>
     f7c:	70005445 	andvc	r5, r0, r5, asr #8
     f80:	63696c6f 	cmnvs	r9, #28416	; 0x6f00
     f84:	6c694679 	stclvs	6, cr4, [r9], #-484	; 0xfffffe1c
     f88:	00726574 	rsbseq	r6, r2, r4, ror r5
     f8c:	6e627573 	mcrvs	5, 3, r7, cr2, cr3, {3}
     f90:	614d7465 	cmpvs	sp, r5, ror #8
     f94:	6e006b73 	vmovvs.16	d0[1], r6
     f98:	49427465 	stmdbmi	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
     f9c:	6f6e534f 	svcvs	0x006e534f
     fa0:	79546564 	ldmdbvc	r4, {r2, r5, r6, r8, sl, sp, lr}^
     fa4:	64006570 	strvs	r6, [r0], #-1392	; 0xfffffa90
     fa8:	4d706368 	ldclmi	3, cr6, [r0, #-416]!	; 0xfffffe60
     fac:	734d7861 	movtvc	r7, #55393	; 0xd861
     fb0:	7a695367 	bvc	1a55d54 <_Min_Stack_Size+0x1a55b54>
     fb4:	616d0065 	cmnvs	sp, r5, rrx
     fb8:	72674478 	rsbvc	r4, r7, #120, 8	; 0x78000000
     fbc:	65526d61 	ldrbvs	r6, [r2, #-3425]	; 0xfffff29f
     fc0:	536d7361 	cmnpl	sp, #-2080374783	; 0x84000001
     fc4:	00657a69 	rsbeq	r7, r5, r9, ror #20
     fc8:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
     fcc:	4348445f 	movtmi	r4, #33887	; 0x845f
     fd0:	45525f50 	ldrbmi	r5, [r2, #-3920]	; 0xfffff0b0
     fd4:	53455551 	movtpl	r5, #21841	; 0x5551
     fd8:	48440054 	stmdami	r4, {r2, r4, r6}^
     fdc:	615f5043 	cmpvs	pc, r3, asr #32
     fe0:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     fe4:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
     fe8:	0077675f 	rsbseq	r6, r7, pc, asr r7
     fec:	44706374 	ldrbtmi	r6, [r0], #-884	; 0xfffffc8c
     ff0:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
     ff4:	5454746c 	ldrbpl	r7, [r4], #-1132	; 0xfffffb94
     ff8:	6570004c 	ldrbvs	r0, [r0, #-76]!	; 0xffffffb4
     ffc:	726f6672 	rsbvc	r6, pc, #119537664	; 0x7200000
    1000:	756f526d 	strbvc	r5, [pc, #-621]!	; d9b <_Min_Stack_Size+0xb9b>
    1004:	44726574 	ldrbtmi	r6, [r2], #-1396	; 0xfffffa8c
    1008:	6f637369 	svcvs	0x00637369
    100c:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    1010:	63686400 	cmnvs	r8, #0, 8
    1014:	70695f70 	rsbvc	r5, r9, r0, ror pc
    1018:	6470755f 	ldrbtvs	r7, [r0], #-1375	; 0xfffffaa1
    101c:	00657461 	rsbeq	r7, r5, r1, ror #8
    1020:	50434844 	subpl	r4, r3, r4, asr #16
    1024:	5049535f 	subpl	r5, r9, pc, asr r3
    1028:	61566300 	cmpvs	r6, r0, lsl #6
    102c:	6f6e006c 	svcvs	0x006e006c
    1030:	636f4c6e 	cmnvs	pc, #28160	; 0x6e00
    1034:	6f536c61 	svcvs	0x00536c61
    1038:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    103c:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
    1040:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1044:	65747865 	ldrbvs	r7, [r4, #-2149]!	; 0xfffff79b
    1048:	6f69746e 	svcvs	0x0069746e
    104c:	6150736e 	cmpvs	r0, lr, ror #6
    1050:	62006874 	andvs	r6, r0, #116, 16	; 0x740000
    1054:	64616f72 	strbtvs	r6, [r1], #-3954	; 0xfffff08e
    1058:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
    105c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1060:	63686400 	cmnvs	r8, #0, 8
    1064:	74704f70 	ldrbtvc	r4, [r0], #-3952	; 0xfffff090
    1068:	4f6e6f69 	svcmi	0x006e6f69
    106c:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    1070:	0064616f 	rsbeq	r6, r4, pc, ror #2
    1074:	72706d69 	rsbsvc	r6, r0, #6720	; 0x1a40
    1078:	53737365 	cmnpl	r3, #-1811939327	; 0x94000001
    107c:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1080:	61700072 	cmnvs	r0, r2, ror r0
    1084:	544d6874 	strbpl	r6, [sp], #-2164	; 0xfffff78c
    1088:	69676155 	stmdbvs	r7!, {r0, r2, r4, r6, r8, sp, lr}^
    108c:	6954676e 	ldmdbvs	r4, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1090:	756f656d 	strbvc	r6, [pc, #-1389]!	; b2b <_Min_Stack_Size+0x92b>
    1094:	66690074 			; <UNDEFINED> instruction: 0x66690074
    1098:	0055544d 	subseq	r5, r5, sp, asr #8
    109c:	49746567 	ldmdbmi	r4!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
    10a0:	6f726650 	svcvs	0x00726650
    10a4:	4348446d 	movtmi	r4, #33901	; 0x846d
    10a8:	50490050 	subpl	r0, r9, r0, asr r0
    10ac:	77726f66 	ldrbvc	r6, [r2, -r6, ror #30]!
    10b0:	69647261 	stmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    10b4:	4800676e 	stmdami	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    10b8:	5f54534f 	svcpl	0x0054534f
    10bc:	454d414e 	strbmi	r4, [sp, #-334]	; 0xfffffeb2
    10c0:	43484400 	movtmi	r4, #33792	; 0x8400
    10c4:	6c615f50 	stclvs	15, cr5, [r1], #-320	; 0xfffffec0
    10c8:	61636f6c 	cmnvs	r3, ip, ror #30
    10cc:	5f646574 	svcpl	0x00646574
    10d0:	74007069 	strvc	r7, [r0], #-105	; 0xffffff97
    10d4:	654b7063 	strbvs	r7, [fp, #-99]	; 0xffffff9d
    10d8:	6c617065 	stclvs	0, cr7, [r1], #-404	; 0xfffffe6c
    10dc:	49657669 	stmdbmi	r5!, {r0, r3, r5, r6, r9, sl, ip, sp, lr}^
    10e0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    10e4:	006c6176 	rsbeq	r6, ip, r6, ror r1
    10e8:	61666564 	cmnvs	r6, r4, ror #10
    10ec:	49746c75 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    10f0:	4c545450 	cfldrdmi	mvd5, [r4], {80}	; 0x50
    10f4:	50495200 	subpl	r5, r9, r0, lsl #4
    10f8:	47534d5f 			; <UNDEFINED> instruction: 0x47534d5f
    10fc:	6d6f6400 	cfstrdvs	mvd6, [pc, #-0]	; 1104 <_Min_Stack_Size+0xf04>
    1100:	4e6e6961 	vnmulmi.f16	s13, s28, s3	; <UNPREDICTABLE>
    1104:	00656d61 	rsbeq	r6, r5, r1, ror #26
    1108:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
    110c:	4348445f 	movtmi	r4, #33887	; 0x845f
    1110:	45445f50 	strbmi	r5, [r4, #-3920]	; 0xfffff0b0
    1114:	4e494c43 	cdpmi	12, 4, cr4, cr9, cr3, {2}
    1118:	4c4f0045 	mcrrmi	0, 4, r0, pc, cr5
    111c:	49535f44 	ldmdbmi	r3, {r2, r6, r8, r9, sl, fp, ip, lr}^
    1120:	6e650050 	mcrvs	0, 3, r0, cr5, cr0, {2}
    1124:	74704f64 	ldrbtvc	r4, [r0], #-3940	; 0xfffff09c
    1128:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    112c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1130:	6f526369 	svcvs	0x00526369
    1134:	00657475 	rsbeq	r7, r5, r5, ror r4
    1138:	4274656e 	rsbsmi	r6, r4, #461373440	; 0x1b800000
    113c:	64534f49 	ldrbvs	r4, [r3], #-3913	; 0xfffff0b7
    1140:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    1144:	74736944 	ldrbtvc	r6, [r3], #-2372	; 0xfffff6bc
    1148:	76726553 			; <UNDEFINED> instruction: 0x76726553
    114c:	79007265 	stmdbvc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    1150:	64646169 	strbtvs	r6, [r4], #-361	; 0xfffffe97
    1154:	65760072 	ldrbvs	r0, [r6, #-114]!	; 0xffffff8e
    1158:	726f646e 	rsbvc	r6, pc, #1845493760	; 0x6e000000
    115c:	63657053 	cmnvs	r5, #83	; 0x53
    1160:	63696669 	cmnvs	r9, #110100480	; 0x6900000
    1164:	6f666e49 	svcvs	0x00666e49
    1168:	61566c00 	cmpvs	r6, r0, lsl #24
    116c:	4678006c 	ldrbtmi	r0, [r8], -ip, rrx
    1170:	53746e6f 	cmnpl	r4, #1776	; 0x6f0
    1174:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1178:	65730072 	ldrbvs	r0, [r3, #-114]!	; 0xffffff8e
    117c:	63007363 	movwvs	r7, #867	; 0x363
    1180:	696b6f6f 	stmdbvs	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1184:	72655365 	rsbvc	r5, r5, #-1811939327	; 0x94000001
    1188:	00726576 	rsbseq	r6, r2, r6, ror r5
    118c:	70636864 	rsbvc	r6, r3, r4, ror #16
    1190:	0067734d 	rsbeq	r7, r7, sp, asr #6
    1194:	47746567 	ldrbmi	r6, [r4, -r7, ror #10]!
    1198:	6f726657 	svcvs	0x00726657
    119c:	4348446d 	movtmi	r4, #33901	; 0x846d
    11a0:	48440050 	stmdami	r4, {r4, r6}^
    11a4:	535f5043 	cmppl	pc, #67	; 0x43
    11a8:	73004148 	movwvc	r4, #328	; 0x148
    11ac:	5f646e65 	svcpl	0x00646e65
    11b0:	50434844 	subpl	r4, r3, r4, asr #16
    11b4:	5349445f 	movtpl	r4, #37983	; 0x945f
    11b8:	45564f43 	ldrbmi	r4, [r6, #-3907]	; 0xfffff0bd
    11bc:	616d0052 	qdsubvs	r0, r2, sp
    11c0:	75536b73 	ldrbvc	r6, [r3, #-2931]	; 0xfffff48d
    11c4:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
    11c8:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
    11cc:	5f504348 	svcpl	0x00504348
    11d0:	00444958 	subeq	r4, r4, r8, asr r9
    11d4:	64616967 	strbtvs	r6, [r1], #-2407	; 0xfffff699
    11d8:	70007264 	andvc	r7, r0, r4, ror #4
    11dc:	6f667265 	svcvs	0x00667265
    11e0:	614d6d72 	hvcvs	54994	; 0xd6d2
    11e4:	69446b73 	stmdbvs	r4, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    11e8:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    11ec:	00797265 	rsbseq	r7, r9, r5, ror #4
    11f0:	5372706c 	cmnpl	r2, #108	; 0x6c
    11f4:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    11f8:	755f0072 	ldrbvc	r0, [pc, #-114]	; 118e <_Min_Stack_Size+0xf8e>
    11fc:	326c5f6e 	rsbcc	r5, ip, #440	; 0x1b8
    1200:	6c617663 	stclvs	6, cr7, [r1], #-396	; 0xfffffe74
    1204:	63686400 	cmnvs	r8, #0, 8
    1208:	70695f70 	rsbvc	r5, r9, r0, ror pc
    120c:	7373615f 	cmnvc	r3, #-1073741801	; 0xc0000017
    1210:	006e6769 	rsbeq	r6, lr, r9, ror #14
    1214:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    1218:	66664f72 	uqsub16vs	r4, r6, r2
    121c:	00746573 	rsbseq	r6, r4, r3, ror r5
    1220:	50434844 	subpl	r4, r3, r4, asr #16
    1224:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1228:	6c610074 	stclvs	0, cr0, [r1], #-464	; 0xfffffe30
    122c:	6275536c 	rsbsvs	r5, r5, #108, 6	; 0xb0000001
    1230:	7374656e 	cmnvc	r4, #461373440	; 0x1b800000
    1234:	61636f4c 	cmnvs	r3, ip, asr #30
    1238:	6374006c 	cmnvs	r4, #108	; 0x6c
    123c:	65654b70 	strbvs	r4, [r5, #-2928]!	; 0xfffff490
    1240:	696c6170 	stmdbvs	ip!, {r4, r5, r6, r8, sp, lr}^
    1244:	61476576 	hvcvs	30294	; 0x7656
    1248:	67616272 			; <UNDEFINED> instruction: 0x67616272
    124c:	68640065 	stmdavs	r4!, {r0, r2, r5, r6}^
    1250:	695f7063 	ldmdbvs	pc, {r0, r1, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    1254:	6f635f70 	svcvs	0x00635f70
    1258:	696c666e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r9, sl, sp, lr}^
    125c:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
    1260:	50706368 	rsbspl	r6, r0, r8, ror #6
    1264:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    1268:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
    126c:	00747365 	rsbseq	r7, r4, r5, ror #6
    1270:	5373696e 	cmnpl	r3, #1802240	; 0x1b8000
    1274:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1278:	73007372 	movwvc	r7, #882	; 0x372
    127c:	53706177 	cmnpl	r0, #-1073741795	; 0xc000001d
    1280:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1284:	746e0072 	strbtvc	r0, [lr], #-114	; 0xffffff8e
    1288:	72655370 	rsbvc	r5, r5, #112, 6	; 0xc0000001
    128c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    1290:	73657200 	cmnvc	r5, #0, 4
    1294:	445f7465 	ldrbmi	r7, [pc], #-1125	; 129c <_Min_Stack_Size+0x109c>
    1298:	5f504348 	svcpl	0x00504348
    129c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    12a0:	0074756f 	rsbseq	r7, r4, pc, ror #10
    12a4:	50434844 	subpl	r4, r3, r4, asr #16
    12a8:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    12ac:	61487265 	cmpvs	r8, r5, ror #4
    12b0:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    12b4:	6f720072 	svcvs	0x00720072
    12b8:	72657475 	rsbvc	r7, r5, #1962934272	; 0x75000000
    12bc:	536e4f73 	cmnpl	lr, #460	; 0x1cc
    12c0:	656e6275 	strbvs	r6, [lr, #-629]!	; 0xfffffd8b
    12c4:	74650074 	strbtvc	r0, [r5], #-116	; 0xffffff8c
    12c8:	6e726568 	cdpvs	5, 7, cr6, cr2, cr8, {3}
    12cc:	6e457465 	cdpvs	4, 4, cr7, cr5, cr5, {3}
    12d0:	73706163 	cmnvc	r0, #-1073741800	; 0xc0000018
    12d4:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
    12d8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    12dc:	70636864 	rsbvc	r6, r3, r4, ror #16
    12e0:	61763254 	cmnvs	r6, r4, asr r2
    12e4:	0065756c 	rsbeq	r7, r5, ip, ror #10
    12e8:	73694478 	cmnvc	r9, #120, 8	; 0x78000000
    12ec:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
    12f0:	616e614d 	cmnvs	lr, sp, asr #2
    12f4:	00726567 	rsbseq	r6, r2, r7, ror #10
    12f8:	53746567 	cmnpl	r4, #432013312	; 0x19c00000
    12fc:	6f72664e 	svcvs	0x0072664e
    1300:	4348446d 	movtmi	r4, #33901	; 0x846d
    1304:	48440050 	stmdami	r4, {r4, r6}^
    1308:	615f5043 	cmpvs	pc, r3, asr #32
    130c:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    1310:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
    1314:	736e645f 	cmnvc	lr, #1593835520	; 0x5f000000
    1318:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    131c:	66534e44 	ldrbvs	r4, [r3], -r4, asr #28
    1320:	446d6f72 	strbtmi	r6, [sp], #-3954	; 0xfffff08e
    1324:	00504348 	subseq	r4, r0, r8, asr #6
    1328:	50434844 	subpl	r4, r3, r4, asr #16
    132c:	5f70695f 	svcpl	0x0070695f
    1330:	6e616863 	cdpvs	8, 6, cr6, cr1, cr3, {3}
    1334:	5f646567 	svcpl	0x00646567
    1338:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    133c:	63686400 	cmnvs	r8, #0, 8
    1340:	74735f70 	ldrbtvc	r5, [r3], #-3952	; 0xfffff090
    1344:	00657461 	rsbeq	r7, r5, r1, ror #8
    1348:	44746567 	ldrbtmi	r6, [r4], #-1383	; 0xfffffa99
    134c:	4c504348 	mrrcmi	3, 4, r4, r0, cr8
    1350:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
    1354:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    1358:	72767300 	rsbsvc	r7, r6, #0, 6
    135c:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
    1360:	65720072 	ldrbvs	r0, [r2, #-114]!	; 0xffffff8e
    1364:	72756f73 	rsbsvc	r6, r5, #460	; 0x1cc
    1368:	6f4c6563 	svcvs	0x004c6563
    136c:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    1370:	65536e6f 	ldrbvs	r6, [r3, #-3695]	; 0xfffff191
    1374:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
    1378:	72617000 	rsbvc	r7, r1, #0
    137c:	48446573 	stmdami	r4, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    1380:	534d5043 	movtpl	r5, #53315	; 0xd043
    1384:	72610047 	rsbvc	r0, r1, #71	; 0x47
    1388:	63614370 	cmnvs	r1, #112, 6	; 0xc0000001
    138c:	69546568 	ldmdbvs	r4, {r3, r5, r6, r8, sl, sp, lr}^
    1390:	756f656d 	strbvc	r6, [pc, #-1389]!	; e2b <_Min_Stack_Size+0xc2b>
    1394:	48440074 	stmdami	r4, {r2, r4, r5, r6}^
    1398:	725f5043 	subsvc	r5, pc, #67	; 0x43
    139c:	64006e75 	strvs	r6, [r0], #-3701	; 0xfffff18b
    13a0:	53706368 	cmnpl	r0, #104, 6	; 0xa0000001
    13a4:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    13a8:	65644972 	strbvs	r4, [r4, #-2418]!	; 0xfffff68e
    13ac:	6669746e 	strbtvs	r7, [r9], -lr, ror #8
    13b0:	00726569 	rsbseq	r6, r2, r9, ror #10
    13b4:	64616973 	strbtvs	r6, [r1], #-2419	; 0xfffff68d
    13b8:	72007264 	andvc	r7, r0, #100, 4	; 0x40000006
    13bc:	50746f6f 	rsbspl	r6, r4, pc, ror #30
    13c0:	00687461 	rsbeq	r7, r8, r1, ror #8
    13c4:	50434844 	subpl	r4, r3, r4, asr #16
    13c8:	5f50495f 	svcpl	0x0050495f
    13cc:	5341454c 	movtpl	r4, #5452	; 0x154c
    13d0:	63004445 	movwvs	r4, #1093	; 0x445
    13d4:	6b636568 	blvs	18da97c <_Min_Stack_Size+0x18da77c>
    13d8:	4348445f 	movtmi	r4, #33887	; 0x845f
    13dc:	656c5f50 	strbvs	r5, [ip, #-3920]!	; 0xfffff0b0
    13e0:	64657361 	strbtvs	r7, [r5], #-865	; 0xfffffc9f
    13e4:	62005049 	andvs	r5, r0, #73	; 0x49
    13e8:	46746f6f 	ldrbtmi	r6, [r4], -pc, ror #30
    13ec:	53656c69 	cmnpl	r5, #26880	; 0x6900
    13f0:	00657a69 	rsbeq	r7, r5, r9, ror #20
    13f4:	4274656e 	rsbsmi	r6, r4, #461373440	; 0x1b800000
    13f8:	6e534f49 	cdpvs	15, 5, cr4, cr3, cr9, {2}
    13fc:	53656d61 	cmnpl	r5, #6208	; 0x1840
    1400:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1404:	61700072 	cmnvs	r0, r2, ror r0
    1408:	74704f64 	ldrbtvc	r4, [r0], #-3940	; 0xfffff09c
    140c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1410:	50434844 	subpl	r4, r3, r4, asr #16
    1414:	4355535f 	cmpmi	r5, #2080374785	; 0x7c000001
    1418:	53534543 	cmppl	r3, #281018368	; 0x10c00000
    141c:	65686300 	strbvs	r6, [r8, #-768]!	; 0xfffffd00
    1420:	445f6b63 	ldrbmi	r6, [pc], #-2915	; 1428 <_Min_Stack_Size+0x1228>
    1424:	5f504348 	svcpl	0x00504348
    1428:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    142c:	0074756f 	rsbseq	r7, r4, pc, ror #10
    1430:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
    1434:	6f635f79 	svcvs	0x00635f79
    1438:	00746e75 	rsbseq	r6, r4, r5, ror lr
    143c:	68746170 	ldmdavs	r4!, {r4, r5, r6, r8, sp, lr}^
    1440:	7055544d 	subsvc	r5, r5, sp, asr #8
    1444:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0xfffffe94
    1448:	61547561 	cmpvs	r4, r1, ror #10
    144c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1450:	53524150 	cmppl	r2, #80, 2
    1454:	4e455f45 	cdpmi	15, 4, cr5, cr5, cr5, {2}
    1458:	6e730044 	cdpvs	0, 7, cr0, cr3, cr4, {2}
    145c:	00656d61 	rsbeq	r6, r5, r1, ror #26
    1460:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 13ac <_Min_Stack_Size+0x11ac>
    1464:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1468:	76737572 			; <UNDEFINED> instruction: 0x76737572
    146c:	4144542f 	cmpmi	r4, pc, lsr #8
    1470:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    1474:	2f544f49 	svccs	0x00544f49
    1478:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    147c:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
    1480:	4348442f 	movtmi	r4, #33839	; 0x842f
    1484:	68642f50 	stmdavs	r4!, {r4, r6, r8, r9, sl, fp, sp}^
    1488:	632e7063 			; <UNDEFINED> instruction: 0x632e7063
    148c:	63686400 	cmnvs	r8, #0, 8
    1490:	73654d70 	cmnvc	r5, #112, 26	; 0x1c00
    1494:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    1498:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    149c:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 14a4 <_Min_Stack_Size+0x12a4>
    14a0:	73657270 	cmnvc	r5, #112, 4
    14a4:	00646573 	rsbeq	r6, r4, r3, ror r5
    14a8:	6f636471 	svcvs	0x00636471
    14ac:	00746e75 	rsbseq	r6, r4, r5, ror lr
    14b0:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    14b4:	5f363174 	svcpl	0x00363174
    14b8:	64700074 	ldrbtvs	r0, [r0], #-116	; 0xffffff8c
    14bc:	00726468 	rsbseq	r6, r2, r8, ror #8
    14c0:	5f736e64 	svcpl	0x00736e64
    14c4:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    14c8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    14cc:	656c7300 	strbvs	r7, [ip, #-768]!	; 0xfffffd00
    14d0:	7069006e 	rsbvc	r0, r9, lr, rrx
    14d4:	6f72665f 	svcvs	0x0072665f
    14d8:	6e645f6d 	cdpvs	15, 6, cr5, cr4, cr13, {3}
    14dc:	736e0073 	cmnvc	lr, #115	; 0x73
    14e0:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    14e4:	61700074 	cmnvs	r0, r4, ror r0
    14e8:	5f657372 	svcpl	0x00657372
    14ec:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
    14f0:	63726100 	cmnvs	r2, #0, 2
    14f4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    14f8:	6f682f00 	svcvs	0x00682f00
    14fc:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    1500:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    1504:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    1508:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    150c:	544f492d 	strbpl	r4, [pc], #-2349	; 1514 <_Min_Stack_Size+0x1314>
    1510:	746e492f 	strbtvc	r4, [lr], #-2351	; 0xfffff6d1
    1514:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    1518:	4e442f74 	mcrmi	15, 2, r2, cr4, cr4, {3}
    151c:	6e642f53 	mcrvs	15, 3, r2, cr4, cr3, {2}
    1520:	61705f73 	cmnvs	r0, r3, ror pc
    1524:	2e657372 	mcrcs	3, 3, r7, cr5, cr2, {3}
    1528:	63720063 	cmnvs	r2, #99	; 0x63
    152c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1530:	5f736e64 	svcpl	0x00736e64
    1534:	77736e61 	ldrbvc	r6, [r3, -r1, ror #28]!
    1538:	61007265 	tstvs	r0, r5, ror #4
    153c:	756f636e 	strbvc	r6, [pc, #-878]!	; 11d6 <_Min_Stack_Size+0xfd6>
    1540:	7000746e 	andvc	r7, r0, lr, ror #8
    1544:	00667562 	rsbeq	r7, r6, r2, ror #10
    1548:	6765736e 	strbvs	r7, [r5, -lr, ror #6]!
    154c:	72617000 	rsbvc	r7, r1, #0
    1550:	534d6573 	movtpl	r6, #54643	; 0xd573
    1554:	706f0047 	rsbvc	r0, pc, r7, asr #32
    1558:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    155c:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1560:	69003631 	stmdbvs	r0, {r0, r4, r5, r9, sl, ip, sp}
    1564:	7269646e 	rsbvc	r6, r9, #1845493760	; 0x6e000000
    1568:	00746365 	rsbseq	r6, r4, r5, ror #6
    156c:	5f736e64 	svcpl	0x00736e64
    1570:	76726573 			; <UNDEFINED> instruction: 0x76726573
    1574:	315f7265 	cmpcc	pc, r5, ror #4
    1578:	44007473 	strmi	r7, [r0], #-1139	; 0xfffffb8d
    157c:	745f534e 	ldrbvc	r5, [pc], #-846	; 1584 <_Min_Stack_Size+0x1384>
    1580:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    1584:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1588:	0072656c 	rsbseq	r6, r2, ip, ror #10
    158c:	5f534e44 	svcpl	0x00534e44
    1590:	006e7572 	rsbeq	r7, lr, r2, ror r5
    1594:	5f736e64 	svcpl	0x00736e64
    1598:	00667562 	rsbeq	r7, r6, r2, ror #10
    159c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 14e8 <_Min_Stack_Size+0x12e8>
    15a0:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    15a4:	76737572 			; <UNDEFINED> instruction: 0x76737572
    15a8:	4144542f 	cmpmi	r4, pc, lsr #8
    15ac:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    15b0:	2f544f49 	svccs	0x00544f49
    15b4:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    15b8:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
    15bc:	534e442f 	movtpl	r4, #58415	; 0xe42f
    15c0:	736e642f 	cmnvc	lr, #788529152	; 0x2f000000
    15c4:	7200632e 	andvc	r6, r0, #-1207959552	; 0xb8000000
    15c8:	635f7465 	cmpvs	pc, #1694498816	; 0x65000000
    15cc:	6b636568 	blvs	18dab74 <_Min_Stack_Size+0x18da974>
    15d0:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    15d4:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xfffff09b
    15d8:	74757000 	ldrbtvc	r7, [r5], #-0
    15dc:	64003631 	strvs	r3, [r0], #-1585	; 0xfffff9cf
    15e0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    15e4:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    15e8:	6e325f72 	mrcvs	15, 1, r5, cr2, cr2, {3}
    15ec:	4e440064 	cdpmi	0, 4, cr0, cr4, cr4, {3}
    15f0:	6e695f53 	mcrvs	15, 3, r5, cr9, cr3, {2}
    15f4:	4d007469 	cfstrsmi	mvf7, [r0, #-420]	; 0xfffffe5c
    15f8:	495f4753 	ldmdbmi	pc, {r0, r1, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    15fc:	6e640044 	cdpvs	0, 6, cr0, cr4, cr4, {2}
    1600:	69745f73 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1604:	6400656d 	strvs	r6, [r0], #-1389	; 0xfffffa93
    1608:	705f736e 	subsvc	r7, pc, lr, ror #6
    160c:	0074726f 	rsbseq	r7, r4, pc, ror #4
    1610:	63656863 	cmnvs	r5, #6488064	; 0x630000
    1614:	4e445f6b 	cdpmi	15, 4, cr5, cr4, cr11, {3}
    1618:	69745f53 	ldmdbvs	r4!, {r0, r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    161c:	756f656d 	strbvc	r6, [pc, #-1389]!	; 10b7 <_Min_Stack_Size+0xeb7>
    1620:	6e640074 	mcrvs	0, 3, r0, cr4, cr4, {3}
    1624:	00656d61 	rsbeq	r6, r5, r1, ror #26
    1628:	5f736e64 	svcpl	0x00736e64
    162c:	656b616d 	strbvs	r6, [fp, #-365]!	; 0xfffffe93
    1630:	72657571 	rsbvc	r7, r5, #473956352	; 0x1c400000
    1634:	4e440079 	mcrmi	0, 2, r0, cr4, cr9, {3}
    1638:	75715f53 	ldrbvc	r5, [r1, #-3923]!	; 0xfffff0ad
    163c:	00797265 	rsbseq	r7, r9, r5, ror #4
    1640:	5f534e44 	svcpl	0x00534e44
    1644:	4b434f53 	blmi	10d5398 <_Min_Stack_Size+0x10d5198>
    1648:	49005445 	stmdbmi	r0, {r0, r2, r6, sl, ip, lr}
    164c:	00524241 	subseq	r4, r2, r1, asr #4
    1650:	4349564e 	movtmi	r5, #38478	; 0x964e
    1654:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1658:	70795474 	rsbsvc	r5, r9, r4, ror r4
    165c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1660:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1664:	52495f43 	subpl	r5, r9, #268	; 0x10c
    1668:	61684351 	cmnvs	r8, r1, asr r3
    166c:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1670:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1674:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
    1678:	5f6b6369 	svcpl	0x006b6369
    167c:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    1680:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1684:	564e0065 	strbpl	r0, [lr], -r5, rrx
    1688:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    168c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    1690:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1694:	79530074 	ldmdbvc	r3, {r2, r4, r5, r6}^
    1698:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    169c:	4c435f6b 	mcrrmi	15, 6, r5, r3, cr11
    16a0:	756f534b 	strbvc	r5, [pc, #-843]!	; 135d <_Min_Stack_Size+0x115d>
    16a4:	43656372 	cmnmi	r5, #-939524095	; 0xc8000001
    16a8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    16ac:	564e0067 	strbpl	r0, [lr], -r7, rrx
    16b0:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    16b4:	65567465 	ldrbvs	r7, [r6, #-1125]	; 0xfffffb9b
    16b8:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    16bc:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
    16c0:	564e0065 	strbpl	r0, [lr], -r5, rrx
    16c4:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    16c8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    16cc:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    16d0:	2f006572 	svccs	0x00006572
    16d4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    16d8:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    16dc:	2f767375 	svccs	0x00767375
    16e0:	53414454 	movtpl	r4, #5204	; 0x1454
    16e4:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    16e8:	4c2f544f 	cfstrsmi	mvf5, [pc], #-316	; 15b4 <_Min_Stack_Size+0x13b4>
    16ec:	61726269 	cmnvs	r2, r9, ror #4
    16f0:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    16f4:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    16f8:	73696d2f 	cmnvc	r9, #3008	; 0xbc0
    16fc:	00632e63 	rsbeq	r2, r3, r3, ror #28
    1700:	4349564e 	movtmi	r5, #38478	; 0x964e
    1704:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    1708:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    170c:	6f724779 	svcvs	0x00724779
    1710:	4e007075 	mcrmi	0, 0, r7, cr0, cr5, {3}
    1714:	74537765 	ldrbvc	r7, [r3], #-1893	; 0xfffff89b
    1718:	00657461 	rsbeq	r7, r5, r1, ror #8
    171c:	52495453 	subpl	r5, r9, #1392508928	; 0x53000000
    1720:	45535200 	ldrbmi	r5, [r3, #-512]	; 0xfffffe00
    1724:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    1728:	41430031 	cmpmi	r3, r1, lsr r0
    172c:	0042494c 	subeq	r4, r2, ip, asr #18
    1730:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
    1734:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1738:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    173c:	49006570 	stmdbmi	r0, {r4, r5, r6, r8, sl, sp, lr}
    1740:	00525043 	subseq	r5, r2, r3, asr #32
    1744:	73706d74 	cmnvc	r0, #116, 26	; 0x1d00
    1748:	4e006275 	mcrmi	2, 0, r6, cr0, cr5, {3}
    174c:	5f434956 	svcpl	0x00434956
    1750:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
    1754:	504c6d65 	subpl	r6, ip, r5, ror #26
    1758:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    175c:	53006769 	movwpl	r6, #1897	; 0x769
    1760:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1764:	545f6b63 	ldrbpl	r6, [pc], #-2915	; 176c <_Min_Stack_Size+0x156c>
    1768:	00657079 	rsbeq	r7, r5, r9, ror r0
    176c:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    1770:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1774:	00797469 	rsbseq	r7, r9, r9, ror #8
    1778:	52505349 	subspl	r5, r0, #603979777	; 0x24000001
    177c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1780:	52495f43 	subpl	r5, r9, #268	; 0x10c
    1784:	61684351 	cmnvs	r8, r1, asr r3
    1788:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    178c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1790:	52495f43 	subpl	r5, r9, #268	; 0x10c
    1794:	61684351 	cmnvs	r8, r1, asr r3
    1798:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    179c:	50627553 	rsbpl	r7, r2, r3, asr r5
    17a0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    17a4:	00797469 	rsbseq	r7, r9, r9, ror #8
    17a8:	52454349 	subpl	r4, r5, #603979777	; 0x24000001
    17ac:	45534900 	ldrbmi	r4, [r3, #-2304]	; 0xfffff700
    17b0:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
    17b4:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    17b8:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    17bc:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    17c0:	6572506c 	ldrbvs	r5, [r2, #-108]!	; 0xffffff94
    17c4:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xfffff29b
    17c8:	506e6f69 	rsbpl	r6, lr, r9, ror #30
    17cc:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    17d0:	00797469 	rsbseq	r7, r9, r9, ror #8
    17d4:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
    17d8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    17dc:	74536c61 	ldrbvc	r6, [r3], #-3169	; 0xfffff39f
    17e0:	00657461 	rsbeq	r7, r5, r1, ror #8
    17e4:	4349564e 	movtmi	r5, #38478	; 0x964e
    17e8:	6365565f 	cmnvs	r5, #99614720	; 0x5f00000
    17ec:	62615474 	rsbvs	r5, r1, #116, 8	; 0x74000000
    17f0:	414f4c00 	cmpmi	pc, r0, lsl #24
    17f4:	6f4c0044 	svcvs	0x004c0044
    17f8:	776f5077 			; <UNDEFINED> instruction: 0x776f5077
    17fc:	6f4d7265 	svcvs	0x004d7265
    1800:	4e006564 	cfsh32mi	mvfx6, mvfx0, #52
    1804:	5f434956 	svcpl	0x00434956
    1808:	6f697250 	svcvs	0x00697250
    180c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1810:	756f7247 	strbvc	r7, [pc, #-583]!	; 15d1 <_Min_Stack_Size+0x13d1>
    1814:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    1818:	00676966 	rsbeq	r6, r7, r6, ror #18
    181c:	5f434352 	svcpl	0x00434352
    1820:	4b4c4348 	blmi	1312548 <_Min_Stack_Size+0x1312348>
    1824:	43435200 	movtmi	r5, #12800	; 0x3200
    1828:	4344415f 	movtmi	r4, #16735	; 0x415f
    182c:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    1830:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1834:	43520067 	cmpmi	r2, #103	; 0x67
    1838:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    183c:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1840:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    1844:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1848:	00746942 	rsbseq	r6, r4, r2, asr #18
    184c:	5f434352 	svcpl	0x00434352
    1850:	32425041 	subcc	r5, r2, #65	; 0x41
    1854:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1858:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    185c:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1860:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1864:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    1868:	52004553 	andpl	r4, r0, #348127232	; 0x14c00000
    186c:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    1870:	54497465 	strbpl	r7, [r9], #-1125	; 0xfffffb9b
    1874:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1878:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
    187c:	415f4343 	cmpmi	pc, r3, asr #6
    1880:	50324250 	eorspl	r4, r2, r0, asr r2
    1884:	70697265 	rsbvc	r7, r9, r5, ror #4
    1888:	43520068 	cmpmi	r2, #104	; 0x68
    188c:	43505f43 	cmpmi	r0, #268	; 0x10c
    1890:	00324b4c 	eorseq	r4, r2, ip, asr #22
    1894:	5f434352 	svcpl	0x00434352
    1898:	434c4c50 	movtmi	r4, #52304	; 0xcc50
    189c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    18a0:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    18a4:	6b636f6c 	blvs	18dd65c <_Min_Stack_Size+0x18dd45c>
    18a8:	70795473 	rsbsvc	r5, r9, r3, ror r4
    18ac:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    18b0:	43435200 	movtmi	r5, #12800	; 0x3200
    18b4:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    18b8:	006c754d 	rsbeq	r7, ip, sp, asr #10
    18bc:	5f434352 	svcpl	0x00434352
    18c0:	50424841 	subpl	r4, r2, r1, asr #16
    18c4:	70697265 	rsbvc	r7, r9, r5, ror #4
    18c8:	6f6c4368 	svcvs	0x006c4368
    18cc:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    18d0:	43480064 	movtmi	r0, #32868	; 0x8064
    18d4:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
    18d8:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    18dc:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    18e0:	43435200 	movtmi	r5, #12800	; 0x3200
    18e4:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    18e8:	72655031 	rsbvc	r5, r5, #49	; 0x31
    18ec:	00687069 	rsbeq	r7, r8, r9, rrx
    18f0:	73657270 	cmnvc	r5, #112, 4
    18f4:	43520063 	cmpmi	r2, #99	; 0x63
    18f8:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    18fc:	6e6f434f 	cdpvs	3, 6, cr4, cr15, cr15, {2}
    1900:	00676966 	rsbeq	r6, r7, r6, ror #18
    1904:	5f434352 	svcpl	0x00434352
    1908:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    190c:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
    1910:	575f4343 	ldrbpl	r4, [pc, -r3, asr #6]
    1914:	46746961 	ldrbtmi	r6, [r4], -r1, ror #18
    1918:	5348726f 	movtpl	r7, #33391	; 0x826f
    191c:	61745345 	cmnvs	r4, r5, asr #6
    1920:	70557472 	subsvc	r7, r5, r2, ror r4
    1924:	43435200 	movtmi	r5, #12800	; 0x3200
    1928:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    192c:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    1930:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1934:	43520065 	cmpmi	r2, #101	; 0x65
    1938:	50415f43 	subpl	r5, r1, r3, asr #30
    193c:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    1940:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1944:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1948:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    194c:	43435200 	movtmi	r5, #12800	; 0x3200
    1950:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1954:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1958:	45006769 	strmi	r6, [r0, #-1897]	; 0xfffff897
    195c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    1960:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1964:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
    1968:	555f4343 	ldrbpl	r4, [pc, #-835]	; 162d <_Min_Stack_Size+0x142d>
    196c:	4c434253 	sfmmi	f4, 2, [r3], {83}	; 0x53
    1970:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1974:	00676966 	rsbeq	r6, r7, r6, ror #18
    1978:	5f434352 	svcpl	0x00434352
    197c:	4349534c 	movtmi	r5, #37708	; 0x934c
    1980:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1984:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    1988:	59537465 	ldmdbpl	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    198c:	4b4c4353 	blmi	13126e0 <_Min_Stack_Size+0x13124e0>
    1990:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1994:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    1998:	505f4343 	subspl	r4, pc, r3, asr #6
    199c:	314b4c43 	cmpcc	fp, r3, asr #24
    19a0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    19a4:	74006769 	strvc	r6, [r0], #-1897	; 0xfffff897
    19a8:	6572706d 	ldrbvs	r7, [r2, #-109]!	; 0xffffff93
    19ac:	69620067 	stmdbvs	r2!, {r0, r1, r2, r5, r6}^
    19b0:	61747374 	cmnvs	r4, r4, ror r3
    19b4:	00737574 	rsbseq	r7, r3, r4, ror r5
    19b8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    19bc:	65727375 	ldrbvs	r7, [r2, #-885]!	; 0xfffffc8b
    19c0:	43520067 	cmpmi	r2, #103	; 0x67
    19c4:	50415f43 	subpl	r5, r1, r3, asr #30
    19c8:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    19cc:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    19d0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    19d4:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    19d8:	43435200 	movtmi	r5, #12800	; 0x3200
    19dc:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
    19e0:	5270756b 	rsbspl	r7, r0, #448790528	; 0x1ac00000
    19e4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    19e8:	00646d43 	rsbeq	r6, r4, r3, asr #26
    19ec:	5f434352 	svcpl	0x00434352
    19f0:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    19f4:	43435200 	movtmi	r5, #12800	; 0x3200
    19f8:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    19fc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1a00:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    1a04:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    1a08:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    1a0c:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1a10:	00676966 	rsbeq	r6, r7, r6, ror #18
    1a14:	5f434352 	svcpl	0x00434352
    1a18:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1a1c:	5367616c 	cmnpl	r7, #108, 2
    1a20:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1a24:	43520073 	cmpmi	r2, #115	; 0x73
    1a28:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
    1a2c:	4b4c4343 	blmi	1312740 <_Min_Stack_Size+0x1312540>
    1a30:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1a34:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1a38:	555f4343 	ldrbpl	r4, [pc, #-835]	; 16fd <_Min_Stack_Size+0x14fd>
    1a3c:	4c434253 	sfmmi	f4, 2, [r3], {83}	; 0x53
    1a40:	756f534b 	strbvc	r5, [pc, #-843]!	; 16fd <_Min_Stack_Size+0x14fd>
    1a44:	00656372 	rsbeq	r6, r5, r2, ror r3
    1a48:	5f434352 	svcpl	0x00434352
    1a4c:	61656c43 	cmnvs	r5, r3, asr #24
    1a50:	616c4672 	smcvs	50274	; 0xc462
    1a54:	43520067 	cmpmi	r2, #103	; 0x67
    1a58:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1a5c:	4b4c4353 	blmi	13127b0 <_Min_Stack_Size+0x13125b0>
    1a60:	43444100 	movtmi	r4, #16640	; 0x4100
    1a64:	5f4b4c43 	svcpl	0x004b4c43
    1a68:	71657246 	cmnvc	r5, r6, asr #4
    1a6c:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    1a70:	43520079 	cmpmi	r2, #121	; 0x79
    1a74:	53485f43 	movtpl	r5, #36675	; 0x8f43
    1a78:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
    1a7c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1a80:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1a84:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
    1a88:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    1a8c:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1a90:	43435200 	movtmi	r5, #12800	; 0x3200
    1a94:	6f6c435f 	svcvs	0x006c435f
    1a98:	00736b63 	rsbseq	r6, r3, r3, ror #22
    1a9c:	4b4c4350 	blmi	13127e4 <_Min_Stack_Size+0x13125e4>
    1aa0:	72465f32 	subvc	r5, r6, #50, 30	; 0xc8
    1aa4:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    1aa8:	0079636e 	rsbseq	r6, r9, lr, ror #6
    1aac:	5f434352 	svcpl	0x00434352
    1ab0:	6f435449 	svcvs	0x00435449
    1ab4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1ab8:	43435200 	movtmi	r5, #12800	; 0x3200
    1abc:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1ac0:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1ac4:	43687069 	cmnmi	r8, #105	; 0x69
    1ac8:	6b636f6c 	blvs	18dd880 <_Min_Stack_Size+0x18dd680>
    1acc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1ad0:	5f434352 	svcpl	0x00434352
    1ad4:	00455348 	subeq	r5, r5, r8, asr #6
    1ad8:	5f434352 	svcpl	0x00434352
    1adc:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1ae0:	6f534b4c 	svcvs	0x00534b4c
    1ae4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1ae8:	4c435000 	marmi	acc0, r5, r3
    1aec:	465f314b 	ldrbmi	r3, [pc], -fp, asr #2
    1af0:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    1af4:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1af8:	43435200 	movtmi	r5, #12800	; 0x3200
    1afc:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
    1b00:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1b04:	41006769 	tstmi	r0, r9, ror #14
    1b08:	48414250 	stmdami	r1, {r4, r6, r9, lr}^
    1b0c:	65725042 	ldrbvs	r5, [r2, #-66]!	; 0xffffffbe
    1b10:	61546373 	cmpvs	r4, r3, ror r3
    1b14:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1b18:	5f434352 	svcpl	0x00434352
    1b1c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1b20:	6b636f6c 	blvs	18dd8d8 <_Min_Stack_Size+0x18dd6d8>
    1b24:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0xfffff98d
    1b28:	43520071 	cmpmi	r2, #113	; 0x71
    1b2c:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
    1b30:	4b4c4343 	blmi	1312844 <_Min_Stack_Size+0x1312644>
    1b34:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1b38:	5f434352 	svcpl	0x00434352
    1b3c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1b40:	6365536b 	cmnvs	r5, #-1409286143	; 0xac000001
    1b44:	74697275 	strbtvc	r7, [r9], #-629	; 0xfffffd8b
    1b48:	73795379 	cmnvc	r9, #-469762047	; 0xe4000001
    1b4c:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
    1b50:	2f00646d 	svccs	0x0000646d
    1b54:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1b58:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    1b5c:	2f767375 	svccs	0x00767375
    1b60:	53414454 	movtpl	r4, #5204	; 0x1454
    1b64:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    1b68:	4c2f544f 	cfstrsmi	mvf5, [pc], #-316	; 1a34 <_Min_Stack_Size+0x1834>
    1b6c:	61726269 	cmnvs	r2, r9, ror #4
    1b70:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    1b74:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1b78:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1b7c:	31663233 	cmncc	r6, r3, lsr r2
    1b80:	725f7830 	subsvc	r7, pc, #48, 16	; 0x300000
    1b84:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
    1b88:	43435200 	movtmi	r5, #12800	; 0x3200
    1b8c:	4c43485f 	mcrrmi	8, 5, r4, r3, cr15
    1b90:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1b94:	00676966 	rsbeq	r6, r7, r6, ror #18
    1b98:	5f434352 	svcpl	0x00434352
    1b9c:	43495348 	movtmi	r5, #37704	; 0x9348
    1ba0:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1ba4:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 1aa0 <_Min_Stack_Size+0x18a0>
    1ba8:	52004f43 	andpl	r4, r0, #268	; 0x10c
    1bac:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1bb0:	43520054 	cmpmi	r2, #84	; 0x54
    1bb4:	64415f43 	strbvs	r5, [r1], #-3907	; 0xfffff0bd
    1bb8:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
    1bbc:	43495348 	movtmi	r5, #37704	; 0x9348
    1bc0:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
    1bc4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1bc8:	61566e6f 	cmpvs	r6, pc, ror #28
    1bcc:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1bd0:	5f434352 	svcpl	0x00434352
    1bd4:	50424841 	subpl	r4, r2, r1, asr #16
    1bd8:	70697265 	rsbvc	r7, r9, r5, ror #4
    1bdc:	43520068 	cmpmi	r2, #104	; 0x68
    1be0:	43505f43 	cmpmi	r0, #268	; 0x10c
    1be4:	43324b4c 	teqmi	r2, #76, 22	; 0x13000
    1be8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1bec:	44410067 	strbmi	r0, [r1], #-103	; 0xffffff99
    1bf0:	65725043 	ldrbvs	r5, [r2, #-67]!	; 0xffffffbd
    1bf4:	61546373 	cmpvs	r4, r3, ror r3
    1bf8:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1bfc:	4f495047 	svcmi	0x00495047
    1c00:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1c04:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1c08:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    1c0c:	00736f70 	rsbseq	r6, r3, r0, ror pc
    1c10:	4f495047 	svcmi	0x00495047
    1c14:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    1c18:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    1c1c:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    1c20:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1c24:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    1c28:	754f6461 	strbvc	r6, [pc, #-1121]	; 17cf <_Min_Stack_Size+0x15cf>
    1c2c:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    1c30:	61746144 	cmnvs	r4, r4, asr #2
    1c34:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1c38:	6f4d5f4f 	svcvs	0x004d5f4f
    1c3c:	415f6564 	cmpmi	pc, r4, ror #10
    1c40:	50505f46 	subspl	r5, r0, r6, asr #30
    1c44:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1c48:	76455f4f 	strbvc	r5, [r5], -pc, asr #30
    1c4c:	4f746e65 	svcmi	0x00746e65
    1c50:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    1c54:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    1c58:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1c5c:	74535f4f 	ldrbvc	r5, [r3], #-3919	; 0xfffff0b1
    1c60:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1c64:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1c68:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
    1c6c:	006c6156 	rsbeq	r6, ip, r6, asr r1
    1c70:	5f746942 	svcpl	0x00746942
    1c74:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    1c78:	50470054 	subpl	r0, r7, r4, asr r0
    1c7c:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
    1c80:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1c84:	00746942 	rsbseq	r6, r4, r2, asr #18
    1c88:	4f495047 	svcmi	0x00495047
    1c8c:	4854455f 	ldmdami	r4, {r0, r1, r2, r3, r4, r6, r8, sl, lr}^
    1c90:	64654d5f 	strbtvs	r4, [r5], #-3423	; 0xfffff2a1
    1c94:	6e496169 	dvfvsez	f6, f1, #1.0
    1c98:	66726574 			; <UNDEFINED> instruction: 0x66726574
    1c9c:	00656361 	rsbeq	r6, r5, r1, ror #6
    1ca0:	4f495047 	svcmi	0x00495047
    1ca4:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1ca8:	73746942 	cmnvc	r4, #1081344	; 0x108000
    1cac:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1cb0:	70535f4f 	subsvc	r5, r3, pc, asr #30
    1cb4:	00646565 	rsbeq	r6, r4, r5, ror #10
    1cb8:	4f495047 	svcmi	0x00495047
    1cbc:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1cc0:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
    1cc4:	52434954 	subpl	r4, r3, #84, 18	; 0x150000
    1cc8:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    1ccc:	6b73616d 	blvs	1cda288 <_Min_Stack_Size+0x1cda088>
    1cd0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1cd4:	6f505f4f 	svcvs	0x00505f4f
    1cd8:	6f537472 	svcvs	0x00537472
    1cdc:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1ce0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1ce4:	65445f4f 	strbvs	r5, [r4, #-3919]	; 0xfffff0b1
    1ce8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1cec:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1cf0:	76455f4f 	strbvc	r5, [r5], -pc, asr #30
    1cf4:	4f746e65 	svcmi	0x00746e65
    1cf8:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    1cfc:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    1d00:	00676966 	rsbeq	r6, r7, r6, ror #18
    1d04:	52525342 	subspl	r5, r2, #134217729	; 0x8000001
    1d08:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1d0c:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    1d10:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    1d14:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
    1d18:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    1d1c:	47007469 	strmi	r7, [r0, -r9, ror #8]
    1d20:	5f4f4950 	svcpl	0x004f4950
    1d24:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
    1d28:	30315f64 	eorscc	r5, r1, r4, ror #30
    1d2c:	007a484d 	rsbseq	r4, sl, sp, asr #16
    1d30:	4f495047 	svcmi	0x00495047
    1d34:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 1d3c <_Min_Stack_Size+0x1b3c>
    1d38:	754f5f65 	strbvc	r5, [pc, #-3941]	; ddb <_Min_Stack_Size+0xbdb>
    1d3c:	444f5f74 	strbmi	r5, [pc], #-3956	; 1d44 <_Min_Stack_Size+0x1b44>
    1d40:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1d44:	58455f4f 	stmdapl	r5, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1d48:	694c4954 	stmdbvs	ip, {r2, r4, r6, r8, fp, lr}^
    1d4c:	6f43656e 	svcvs	0x0043656e
    1d50:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1d54:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1d58:	70535f4f 	subsvc	r5, r3, pc, asr #30
    1d5c:	5f646565 	svcpl	0x00646565
    1d60:	7a484d32 	bvc	1215230 <_Min_Stack_Size+0x1215030>
    1d64:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1d68:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
    1d6c:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1d70:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    1d74:	682f0066 	stmdavs	pc!, {r1, r2, r5, r6}	; <UNPREDICTABLE>
    1d78:	2f656d6f 	svccs	0x00656d6f
    1d7c:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    1d80:	542f7673 	strtpl	r7, [pc], #-1651	; 1d88 <_Min_Stack_Size+0x1b88>
    1d84:	41534144 	cmpmi	r3, r4, asr #2
    1d88:	4f492d54 	svcmi	0x00492d54
    1d8c:	694c2f54 	stmdbvs	ip, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1d90:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    1d94:	2f736569 	svccs	0x00736569
    1d98:	2f637273 	svccs	0x00637273
    1d9c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1da0:	30316632 	eorscc	r6, r1, r2, lsr r6
    1da4:	70675f78 	rsbvc	r5, r7, r8, ror pc
    1da8:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    1dac:	726f5000 	rsbvc	r5, pc, #0
    1db0:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    1db4:	72756300 	rsbsvc	r6, r5, #0, 6
    1db8:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    1dbc:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    1dc0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1dc4:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1dc8:	6d65526e 	sfmvs	f5, 2, [r5, #-440]!	; 0xfffffe48
    1dcc:	6f437061 	svcvs	0x00437061
    1dd0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1dd4:	4b434c00 	blmi	10d4ddc <_Min_Stack_Size+0x10d4bdc>
    1dd8:	50470052 	subpl	r0, r7, r2, asr r0
    1ddc:	505f4f49 	subspl	r4, pc, r9, asr #30
    1de0:	6f536e69 	svcvs	0x00536e69
    1de4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1de8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1dec:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    1df0:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    1df4:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
    1df8:	00617461 	rsbeq	r7, r1, r1, ror #8
    1dfc:	6d706d74 	ldclvs	13, cr6, [r0, #-464]!	; 0xfffffe30
    1e00:	006b7361 	rsbeq	r7, fp, r1, ror #6
    1e04:	4f495047 	svcmi	0x00495047
    1e08:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 1e10 <_Min_Stack_Size+0x1c10>
    1e0c:	50495f65 	subpl	r5, r9, r5, ror #30
    1e10:	50470044 	subpl	r0, r7, r4, asr #32
    1e14:	505f4f49 	subspl	r4, pc, r9, asr #30
    1e18:	6f4c6e69 	svcvs	0x004c6e69
    1e1c:	6f436b63 	svcvs	0x00436b63
    1e20:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1e24:	72756300 	rsbsvc	r6, r5, #0, 6
    1e28:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    1e2c:	006e6970 	rsbeq	r6, lr, r0, ror r9
    1e30:	4f495047 	svcmi	0x00495047
    1e34:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    1e38:	47006574 	smlsdxmi	r0, r4, r5, r6
    1e3c:	5f4f4950 	svcpl	0x004f4950
    1e40:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1e44:	5550495f 	ldrbpl	r4, [r0, #-2399]	; 0xfffff6a1
    1e48:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    1e4c:	414d0031 	cmpmi	sp, r1, lsr r0
    1e50:	00325250 	eorseq	r5, r2, r0, asr r2
    1e54:	4f495047 	svcmi	0x00495047
    1e58:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 1e60 <_Min_Stack_Size+0x1c60>
    1e5c:	49415f65 	stmdbmi	r1, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1e60:	5047004e 	subpl	r0, r7, lr, asr #32
    1e64:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1e68:	70616d65 	rsbvc	r6, r1, r5, ror #26
    1e6c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1e70:	6f4d5f4f 	svcvs	0x004d5f4f
    1e74:	41006564 	tstmi	r0, r4, ror #10
    1e78:	5f4f4946 	svcpl	0x004f4946
    1e7c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1e80:	00666544 	rsbeq	r6, r6, r4, asr #10
    1e84:	41746942 	cmnmi	r4, r2, asr #18
    1e88:	6f697463 	svcvs	0x00697463
    1e8c:	5047006e 	subpl	r0, r7, lr, rrx
    1e90:	70534f49 	subsvc	r4, r3, r9, asr #30
    1e94:	5f646565 	svcpl	0x00646565
    1e98:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1e9c:	00666544 	rsbeq	r6, r6, r4, asr #10
    1ea0:	5250414d 	subspl	r4, r0, #1073741843	; 0x40000013
    1ea4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1ea8:	4700784f 	strmi	r7, [r0, -pc, asr #16]
    1eac:	5f4f4950 	svcpl	0x004f4950
    1eb0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1eb4:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    1eb8:	47007463 	strmi	r7, [r0, -r3, ror #8]
    1ebc:	5f4f4950 	svcpl	0x004f4950
    1ec0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1ec4:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xfffff0a1
    1ec8:	0050505f 	subseq	r5, r0, pc, asr r0
    1ecc:	52435645 	subpl	r5, r3, #72351744	; 0x4500000
    1ed0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1ed4:	70535f4f 	subsvc	r5, r3, pc, asr #30
    1ed8:	5f646565 	svcpl	0x00646565
    1edc:	484d3035 	stmdami	sp, {r0, r2, r4, r5, ip, sp}^
    1ee0:	5047007a 	subpl	r0, r7, sl, ror r0
    1ee4:	6f4d4f49 	svcvs	0x004d4f49
    1ee8:	545f6564 	ldrbpl	r6, [pc], #-1380	; 1ef0 <_Min_Stack_Size+0x1cf0>
    1eec:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1ef0:	47006665 	strmi	r6, [r0, -r5, ror #12]
    1ef4:	5f4f4950 	svcpl	0x004f4950
    1ef8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1efc:	74694274 	strbtvc	r4, [r9], #-628	; 0xfffffd8c
    1f00:	50470073 	subpl	r0, r7, r3, ror r0
    1f04:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 1de8 <_Min_Stack_Size+0x1be8>
    1f08:	5f65646f 	svcpl	0x0065646f
    1f0c:	465f4e49 	ldrbmi	r4, [pc], -r9, asr #28
    1f10:	54414f4c 	strbpl	r4, [r1], #-3916	; 0xfffff0b4
    1f14:	00474e49 	subeq	r4, r7, r9, asr #28
    1f18:	4f495047 	svcmi	0x00495047
    1f1c:	6165525f 	cmnvs	r5, pc, asr r2
    1f20:	74754f64 	ldrbtvc	r4, [r5], #-3940	; 0xfffff09c
    1f24:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
    1f28:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    1f2c:	47007469 	strmi	r7, [r0, -r9, ror #8]
    1f30:	5f4f4950 	svcpl	0x004f4950
    1f34:	4f494641 	svcmi	0x00494641
    1f38:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    1f3c:	47007469 	strmi	r7, [r0, -r9, ror #8]
    1f40:	5f4f4950 	svcpl	0x004f4950
    1f44:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1f48:	5f46415f 	svcpl	0x0046415f
    1f4c:	4700444f 	strmi	r4, [r0, -pc, asr #8]
    1f50:	5f4f4950 	svcpl	0x004f4950
    1f54:	5f485445 	svcpl	0x00485445
    1f58:	6964654d 	stmdbvs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
    1f5c:	746e4961 	strbtvc	r4, [lr], #-2401	; 0xfffff69f
    1f60:	61667265 	cmnvs	r6, r5, ror #4
    1f64:	6f436563 	svcvs	0x00436563
    1f68:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1f6c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    1f70:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    1f74:	414d445f 	cmpmi	sp, pc, asr r4
    1f78:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1f7c:	5f495053 	svcpl	0x00495053
    1f80:	41485043 	cmpmi	r8, r3, asr #32
    1f84:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    1f88:	7269445f 	rsbvc	r4, r9, #1593835520	; 0x5f000000
    1f8c:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1f90:	53006e6f 	movwpl	r6, #3695	; 0xe6f
    1f94:	475f4950 			; <UNDEFINED> instruction: 0x475f4950
    1f98:	52437465 	subpl	r7, r3, #1694498816	; 0x65000000
    1f9c:	6c6f5043 	stclvs	0, cr5, [pc], #-268	; 1e98 <_Min_Stack_Size+0x1c98>
    1fa0:	6d6f6e79 	stclvs	14, cr6, [pc, #-484]!	; 1dc4 <_Min_Stack_Size+0x1bc4>
    1fa4:	006c6169 	rsbeq	r6, ip, r9, ror #2
    1fa8:	6f707469 	svcvs	0x00707469
    1fac:	50530073 	subspl	r0, r3, r3, ror r0
    1fb0:	61445f49 	cmpvs	r4, r9, asr #30
    1fb4:	69536174 	ldmdbvs	r3, {r2, r4, r5, r6, r8, sp, lr}^
    1fb8:	5300657a 	movwpl	r6, #1402	; 0x57a
    1fbc:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    1fc0:	465f5332 			; <UNDEFINED> instruction: 0x465f5332
    1fc4:	0047414c 	subeq	r4, r7, ip, asr #2
    1fc8:	5f533249 	svcpl	0x00533249
    1fcc:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    1fd0:	64726164 	ldrbtvs	r6, [r2], #-356	; 0xfffffe9c
    1fd4:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    1fd8:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1fdc:	50530074 	subspl	r0, r3, r4, ror r0
    1fe0:	69465f49 	stmdbvs	r6, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    1fe4:	42747372 	rsbsmi	r7, r4, #-939524095	; 0xc8000001
    1fe8:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    1fec:	435f5332 	cmpmi	pc, #-939524096	; 0xc8000000
    1ff0:	004c4f50 	subeq	r4, ip, r0, asr pc
    1ff4:	6b636170 	blvs	18da5bc <_Min_Stack_Size+0x18da3bc>
    1ff8:	656c7465 	strbvs	r7, [ip, #-1125]!	; 0xfffffb9b
    1ffc:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2000:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2004:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    2008:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    200c:	74614464 	strbtvc	r4, [r1], #-1124	; 0xfffffb9c
    2010:	50530061 	subspl	r0, r3, r1, rrx
    2014:	534e5f49 	movtpl	r5, #61257	; 0xef49
    2018:	50530053 	subspl	r0, r3, r3, asr r0
    201c:	32495f49 	subcc	r5, r9, #292	; 0x124
    2020:	4d445f53 	stclmi	15, cr5, [r4, #-332]	; 0xfffffeb4
    2024:	71655241 	cmnvc	r5, r1, asr #4
    2028:	43585400 	cmpmi	r8, #0, 8
    202c:	00524352 	subseq	r4, r2, r2, asr r3
    2030:	5f495053 	svcpl	0x00495053
    2034:	64756142 	ldrbtvs	r6, [r5], #-322	; 0xfffffebe
    2038:	65746152 	ldrbvs	r6, [r4, #-338]!	; 0xfffffeae
    203c:	73657250 	cmnvc	r5, #80, 4
    2040:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    2044:	58520072 	ldmdapl	r2, {r1, r4, r5, r6}^
    2048:	52435243 	subpl	r5, r3, #805306372	; 0x30000004
    204c:	756f7300 	strbvc	r7, [pc, #-768]!	; 1d54 <_Min_Stack_Size+0x1b54>
    2050:	63656372 	cmnvs	r5, #-939524095	; 0xc8000001
    2054:	6b636f6c 	blvs	18dde0c <_Min_Stack_Size+0x18ddc0c>
    2058:	53324900 	teqpl	r2, #0, 18
    205c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2060:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    2064:	00746375 	rsbseq	r6, r4, r5, ror r3
    2068:	5f533249 	svcpl	0x00533249
    206c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    2070:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    2074:	00666544 	rsbeq	r6, r6, r4, asr #10
    2078:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    207c:	7473656c 	ldrbtvc	r6, [r3], #-1388	; 0xfffffa94
    2080:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2084:	53324900 	teqpl	r2, #0, 18
    2088:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    208c:	32490074 	subcc	r0, r9, #116	; 0x74
    2090:	74535f53 	ldrbvc	r5, [r3], #-3923	; 0xfffff0ad
    2094:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    2098:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    209c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    20a0:	4469425f 	strbtmi	r4, [r9], #-607	; 0xfffffda1
    20a4:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
    20a8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    20ac:	694c6c61 	stmdbvs	ip, {r0, r5, r6, sl, fp, sp, lr}^
    20b0:	6f43656e 	svcvs	0x0043656e
    20b4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    20b8:	73326900 	teqvc	r2, #0, 18
    20bc:	00766964 	rsbseq	r6, r6, r4, ror #18
    20c0:	5f495053 	svcpl	0x00495053
    20c4:	5f533249 	svcpl	0x00533249
    20c8:	6f435449 	svcvs	0x00435449
    20cc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    20d0:	53324900 	teqpl	r2, #0, 18
    20d4:	6475415f 	ldrbtvs	r4, [r5], #-351	; 0xfffffea1
    20d8:	72466f69 	subvc	r6, r6, #420	; 0x1a4
    20dc:	49007165 	stmdbmi	r0, {r0, r2, r5, r6, r8, ip, sp, lr}
    20e0:	4d5f5332 	ldclmi	3, cr5, [pc, #-200]	; 2020 <_Min_Stack_Size+0x1e20>
    20e4:	4f4b4c43 	svcmi	0x004b4c43
    20e8:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    20ec:	50530074 	subspl	r0, r3, r4, ror r0
    20f0:	52435f49 	subpl	r5, r3, #292	; 0x124
    20f4:	50530043 	subspl	r0, r3, r3, asr #32
    20f8:	32495f49 	subcc	r5, r9, #292	; 0x124
    20fc:	54495f53 	strbpl	r5, [r9], #-3923	; 0xfffff0ad
    2100:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2104:	646d435f 	strbtvs	r4, [sp], #-863	; 0xfffffca1
    2108:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    210c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    2110:	00435243 	subeq	r5, r3, r3, asr #4
    2114:	5f495053 	svcpl	0x00495053
    2118:	61746144 	cmnvs	r4, r4, asr #2
    211c:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    2120:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2124:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    2128:	445f5332 	ldrbmi	r5, [pc], #-818	; 2130 <_Min_Stack_Size+0x1f30>
    212c:	46617461 	strbtmi	r7, [r1], -r1, ror #8
    2130:	616d726f 	cmnvs	sp, pc, ror #4
    2134:	50530074 	subspl	r0, r3, r4, ror r0
    2138:	32495f49 	subcc	r5, r9, #292	; 0x124
    213c:	65445f53 	strbvs	r5, [r4, #-3923]	; 0xfffff0ad
    2140:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    2144:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2148:	53534e5f 	cmppl	r3, #1520	; 0x5f0
    214c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    2150:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    2154:	74666f53 	strbtvc	r6, [r6], #-3923	; 0xfffff0ad
    2158:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0xfffffe89
    215c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2160:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    2164:	46435332 			; <UNDEFINED> instruction: 0x46435332
    2168:	53005247 	movwpl	r5, #583	; 0x247
    216c:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    2170:	475f5332 	smmlarmi	pc, r2, r3, r5	; <UNPREDICTABLE>
    2174:	54497465 	strbpl	r7, [r9], #-1125	; 0xfffffb9b
    2178:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    217c:	53007375 	movwpl	r7, #885	; 0x375
    2180:	545f4950 	ldrbpl	r4, [pc], #-2384	; 2188 <_Min_Stack_Size+0x1f88>
    2184:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    2188:	4374696d 	cmnmi	r4, #1785856	; 0x1b4000
    218c:	43004352 	movwmi	r4, #850	; 0x352
    2190:	52504352 	subspl	r4, r0, #1207959553	; 0x48000001
    2194:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    2198:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 21a0 <_Min_Stack_Size+0x1fa0>
    219c:	50530065 	subspl	r0, r3, r5, rrx
    21a0:	79545f49 	ldmdbvc	r4, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    21a4:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    21a8:	50530066 	subspl	r0, r3, r6, rrx
    21ac:	32495f49 	subcc	r5, r9, #292	; 0x124
    21b0:	65525f53 	ldrbvs	r5, [r2, #-3923]	; 0xfffff0ad
    21b4:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    21b8:	74614465 	strbtvc	r4, [r1], #-1125	; 0xfffffb9b
    21bc:	50530061 	subspl	r0, r3, r1, rrx
    21c0:	534e5f49 	movtpl	r5, #61257	; 0xef49
    21c4:	746e4953 	strbtvc	r4, [lr], #-2387	; 0xfffff6ad
    21c8:	616e7265 	cmnvs	lr, r5, ror #4
    21cc:	666f536c 	strbtvs	r5, [pc], -ip, ror #6
    21d0:	50530074 	subspl	r0, r3, r4, ror r0
    21d4:	32495f49 	subcc	r5, r9, #292	; 0x124
    21d8:	6c435f53 	mcrrvs	15, 5, r5, r3, cr3
    21dc:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    21e0:	0067616c 	rsbeq	r6, r7, ip, ror #2
    21e4:	5f533249 	svcpl	0x00533249
    21e8:	00646d43 	rsbeq	r6, r4, r3, asr #26
    21ec:	5f495053 	svcpl	0x00495053
    21f0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    21f4:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    21f8:	53007469 	movwpl	r7, #1129	; 0x469
    21fc:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    2200:	435f5332 	cmpmi	pc, #-939524096	; 0xc8000000
    2204:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2208:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0xfffffbb7
    220c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    2210:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
    2214:	53324900 	teqpl	r2, #0, 18
    2218:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 2220 <_Min_Stack_Size+0x2020>
    221c:	50530065 	subspl	r0, r3, r5, rrx
    2220:	32495f49 	subcc	r5, r9, #292	; 0x124
    2224:	65475f53 	strbvs	r5, [r7, #-3923]	; 0xfffff0ad
    2228:	616c4674 	smcvs	50276	; 0xc464
    222c:	61745367 	cmnvs	r4, r7, ror #6
    2230:	00737574 	rsbseq	r7, r3, r4, ror r5
    2234:	78495053 	stmdavc	r9, {r0, r1, r4, r6, ip, lr}^
    2238:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    223c:	4f53535f 	svcmi	0x0053535f
    2240:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    2244:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    2248:	73326900 	teqvc	r2, #0, 18
    224c:	0064646f 	rsbeq	r6, r4, pc, ror #8
    2250:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 219c <_Min_Stack_Size+0x1f9c>
    2254:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    2258:	76737572 			; <UNDEFINED> instruction: 0x76737572
    225c:	4144542f 	cmpmi	r4, pc, lsr #8
    2260:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    2264:	2f544f49 	svccs	0x00544f49
    2268:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    226c:	65697261 	strbvs	r7, [r9, #-609]!	; 0xfffffd9f
    2270:	72732f73 	rsbsvc	r2, r3, #460	; 0x1cc
    2274:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    2278:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    227c:	5f783031 	svcpl	0x00783031
    2280:	2e697073 	mcrcs	0, 3, r7, cr9, cr3, {3}
    2284:	50530063 	subspl	r0, r3, r3, rrx
    2288:	50435f49 	subpl	r5, r3, r9, asr #30
    228c:	69004c4f 	stmdbvs	r0, {r0, r1, r2, r3, r6, sl, fp, lr}
    2290:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
    2294:	5053006b 	subspl	r0, r3, fp, rrx
    2298:	61435f49 	cmpvs	r3, r9, asr #30
    229c:	6c75636c 	ldclvs	3, cr6, [r5], #-432	; 0xfffffe50
    22a0:	43657461 	cmnmi	r5, #1627389952	; 0x61000000
    22a4:	49004352 	stmdbmi	r0, {r1, r4, r6, r8, r9, lr}
    22a8:	52505332 	subspl	r5, r0, #-939524096	; 0xc8000000
    22ac:	63726300 	cmnvs	r2, #0, 6
    22b0:	00676572 	rsbeq	r6, r7, r2, ror r5
    22b4:	5f495053 	svcpl	0x00495053
    22b8:	50435243 	subpl	r5, r3, r3, asr #4
    22bc:	6e796c6f 	cdpvs	12, 7, cr6, cr9, cr15, {3}
    22c0:	61696d6f 	cmnvs	r9, pc, ror #26
    22c4:	5053006c 	subspl	r0, r3, ip, rrx
    22c8:	6e495f49 	cdpvs	15, 4, cr5, cr9, cr9, {2}
    22cc:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    22d0:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    22d4:	50530066 	subspl	r0, r3, r6, rrx
    22d8:	6e495f49 	cdpvs	15, 4, cr5, cr9, cr9, {2}
    22dc:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    22e0:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    22e4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    22e8:	4d504f5f 	ldclmi	15, cr4, [r0, #-380]	; 0xfffffe84
    22ec:	0065646f 	rsbeq	r6, r5, pc, ror #8
    22f0:	5f4d4954 	svcpl	0x004d4954
    22f4:	63726f46 	cmnvs	r2, #280	; 0x118
    22f8:	434f6465 	movtmi	r6, #62565	; 0xf465
    22fc:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    2300:	00676966 	rsbeq	r6, r7, r6, ror #18
    2304:	5f4d4954 	svcpl	0x004d4954
    2308:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    230c:	6e4f7463 	cdpvs	4, 4, cr7, cr15, cr3, {3}
    2310:	6c755065 	ldclvs	0, cr5, [r5], #-404	; 0xfffffe6c
    2314:	6f4d6573 	svcvs	0x004d6573
    2318:	54006564 	strpl	r6, [r0], #-1380	; 0xfffffa9c
    231c:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 2324 <_Min_Stack_Size+0x2124>
    2320:	6d43414d 	stfvse	f4, [r3, #-308]	; 0xfffffecc
    2324:	49440064 	stmdbmi	r4, {r2, r5, r6}^
    2328:	54005245 	strpl	r5, [r0], #-581	; 0xfffffdbb
    232c:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2330:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    2334:	67697254 			; <UNDEFINED> instruction: 0x67697254
    2338:	53726567 	cmnpl	r2, #432013312	; 0x19c00000
    233c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2340:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2344:	52545f4d 	subspl	r5, r4, #308	; 0x134
    2348:	6f534f47 	svcvs	0x00534f47
    234c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2350:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2354:	756f435f 	strbvc	r4, [pc, #-863]!	; 1ffd <_Min_Stack_Size+0x1dfd>
    2358:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    235c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    2360:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2364:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    2368:	4f646563 	svcmi	0x00646563
    236c:	6f433443 	svcvs	0x00433443
    2370:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2374:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2378:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    237c:	434f7261 	movtmi	r7, #62049	; 0xf261
    2380:	66655231 			; <UNDEFINED> instruction: 0x66655231
    2384:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2388:	414c465f 	cmpmi	ip, pc, asr r6
    238c:	49540047 	ldmdbmi	r4, {r0, r1, r2, r6}^
    2390:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    2394:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 21cc <_Min_Stack_Size+0x1fcc>
    2398:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
    239c:	49540031 	ldmdbmi	r4, {r0, r4, r5}^
    23a0:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    23a4:	6c6f5032 	stclvs	0, cr5, [pc], #-200	; 22e4 <_Min_Stack_Size+0x20e4>
    23a8:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    23ac:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    23b0:	70555f4d 	subsvc	r5, r5, sp, asr #30
    23b4:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    23b8:	61736944 	cmnvs	r3, r4, asr #18
    23bc:	43656c62 	cmnmi	r5, #25088	; 0x6200
    23c0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    23c4:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    23c8:	75505f4d 	ldrbvc	r5, [r0, #-3917]	; 0xfffff0b3
    23cc:	0065736c 	rsbeq	r7, r5, ip, ror #6
    23d0:	63706d74 	cmnvs	r0, #116, 26	; 0x1d00
    23d4:	31726d63 	cmncc	r2, r3, ror #26
    23d8:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    23dc:	726d6363 	rsbvc	r6, sp, #-1946157055	; 0x8c000001
    23e0:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
    23e4:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    23e8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    23ec:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
    23f0:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    23f4:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    23f8:	52434300 	subpl	r4, r3, #0, 6
    23fc:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
    2400:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2404:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    2408:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    240c:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2410:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2414:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    2418:	6b636f6c 	blvs	18de1d0 <_Min_Stack_Size+0x18ddfd0>
    241c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2420:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2424:	4f5f4d49 	svcmi	0x005f4d49
    2428:	6f503243 	svcvs	0x00503243
    242c:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2430:	6f437974 	svcvs	0x00437974
    2434:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2438:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    243c:	5252415f 	subspl	r4, r2, #-1073741801	; 0xc0000017
    2440:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    2444:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    2448:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    244c:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2450:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2454:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    2458:	6f697463 	svcvs	0x00697463
    245c:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    2460:	6e455f4d 	cdpvs	15, 4, cr5, cr5, cr13, {2}
    2464:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    2468:	746e4972 	strbtvc	r4, [lr], #-2418	; 0xfffff68e
    246c:	61667265 	cmnvs	r6, r5, ror #4
    2470:	6f436563 	svcvs	0x00436563
    2474:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2478:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    247c:	32434f5f 	subcc	r4, r3, #380	; 0x17c
    2480:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    2484:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    2488:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    248c:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2490:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xfffff0b3
    2494:	6172656e 	cmnvs	r2, lr, ror #10
    2498:	76456574 			; <UNDEFINED> instruction: 0x76456574
    249c:	00746e65 	rsbseq	r6, r4, r5, ror #28
    24a0:	5f4d4954 	svcpl	0x004d4954
    24a4:	50314349 	eorspl	r4, r1, r9, asr #6
    24a8:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    24ac:	00797469 	rsbseq	r7, r9, r9, ror #8
    24b0:	5f4d4954 	svcpl	0x004d4954
    24b4:	6146434f 	cmpvs	r6, pc, asr #6
    24b8:	54007473 	strpl	r7, [r0], #-1139	; 0xfffffb8d
    24bc:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    24c0:	6e6e6168 	powvsez	f6, f6, #0.0
    24c4:	43006c65 	movwmi	r6, #3173	; 0xc65
    24c8:	31524d43 	cmpcc	r2, r3, asr #26
    24cc:	4d434300 	stclmi	3, cr4, [r3, #-0]
    24d0:	54003252 	strpl	r3, [r0], #-594	; 0xfffffdae
    24d4:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    24d8:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    24dc:	6f4d7265 	svcvs	0x004d7265
    24e0:	6f436564 	svcvs	0x00436564
    24e4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    24e8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    24ec:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    24f0:	41646563 	cmnmi	r4, r3, ror #10
    24f4:	6f697463 	svcvs	0x00697463
    24f8:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    24fc:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
    2500:	646d4378 	strbtvs	r4, [sp], #-888	; 0xfffffc88
    2504:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2508:	50434f5f 	subpl	r4, r3, pc, asr pc
    250c:	6f6c6572 	svcvs	0x006c6572
    2510:	52006461 	andpl	r6, r0, #1627389952	; 0x61000000
    2514:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2518:	31444556 	cmpcc	r4, r6, asr r5
    251c:	45520030 	ldrbmi	r0, [r2, #-48]	; 0xffffffd0
    2520:	56524553 			; <UNDEFINED> instruction: 0x56524553
    2524:	31314445 	teqcc	r1, r5, asr #8
    2528:	53455200 	movtpl	r5, #20992	; 0x5200
    252c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    2530:	00323144 	eorseq	r3, r2, r4, asr #2
    2534:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    2538:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    253c:	52003331 	andpl	r3, r0, #-1006632960	; 0xc4000000
    2540:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2544:	31444556 	cmpcc	r4, r6, asr r5
    2548:	45520034 	ldrbmi	r0, [r2, #-52]	; 0xffffffcc
    254c:	56524553 			; <UNDEFINED> instruction: 0x56524553
    2550:	35314445 	ldrcc	r4, [r1, #-1093]!	; 0xfffffbbb
    2554:	53455200 	movtpl	r5, #20992	; 0x5200
    2558:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    255c:	00363144 	eorseq	r3, r6, r4, asr #2
    2560:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    2564:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    2568:	52003731 	andpl	r3, r0, #12845056	; 0xc40000
    256c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2570:	31444556 	cmpcc	r4, r6, asr r5
    2574:	45520038 	ldrbmi	r0, [r2, #-56]	; 0xffffffc8
    2578:	56524553 			; <UNDEFINED> instruction: 0x56524553
    257c:	39314445 	ldmdbcc	r1!, {r0, r2, r6, sl, lr}
    2580:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2584:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xfffff0a1
    2588:	4e747570 	mrcmi	5, 3, r7, cr4, cr0, {3}
    258c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    2590:	6d740065 	ldclvs	0, cr0, [r4, #-404]!	; 0xfffffe6c
    2594:	6d636370 	stclvs	3, cr6, [r3, #-448]!	; 0xfffffe40
    2598:	43007872 	movwmi	r7, #2162	; 0x872
    259c:	00524543 	subseq	r4, r2, r3, asr #10
    25a0:	5f4d4954 	svcpl	0x004d4954
    25a4:	00444b43 	subeq	r4, r4, r3, asr #22
    25a8:	5f4d4954 	svcpl	0x004d4954
    25ac:	41746553 	cmnmi	r4, r3, asr r5
    25b0:	726f7475 	rsbvc	r7, pc, #1962934272	; 0x75000000
    25b4:	616f6c65 	cmnvs	pc, r5, ror #24
    25b8:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
    25bc:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    25c0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    25c4:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    25c8:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    25cc:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    25d0:	61437465 	cmpvs	r3, r5, ror #8
    25d4:	72757470 	rsbsvc	r7, r5, #112, 8	; 0x70000000
    25d8:	54003265 	strpl	r3, [r0], #-613	; 0xfffffd9b
    25dc:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    25e0:	61437465 	cmpvs	r3, r5, ror #8
    25e4:	72757470 	rsbsvc	r7, r5, #112, 8	; 0x70000000
    25e8:	54003365 	strpl	r3, [r0], #-869	; 0xfffffc9b
    25ec:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    25f0:	61437465 	cmpvs	r3, r5, ror #8
    25f4:	72757470 	rsbsvc	r7, r5, #112, 8	; 0x70000000
    25f8:	54003465 	strpl	r3, [r0], #-1125	; 0xfffffb9b
    25fc:	4f5f4d49 	svcmi	0x005f4d49
    2600:	6e493343 	cdpvs	3, 4, cr3, cr9, cr3, {2}
    2604:	69007469 	stmdbvs	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    2608:	70706f63 	rsbsvc	r6, r0, r3, ror #30
    260c:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    2610:	6c6f7065 	stclvs	0, cr7, [pc], #-404	; 2484 <_Min_Stack_Size+0x2284>
    2614:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    2618:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    261c:	70555f4d 	subsvc	r5, r5, sp, asr #30
    2620:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    2624:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2628:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
    262c:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2630:	004e7843 	subeq	r7, lr, r3, asr #16
    2634:	5f4d4954 	svcpl	0x004d4954
    2638:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    263c:	43437463 	movtmi	r7, #13411	; 0x3463
    2640:	00414d44 	subeq	r4, r1, r4, asr #26
    2644:	5f4d4954 	svcpl	0x004d4954
    2648:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    264c:	00666544 	rsbeq	r6, r6, r4, asr #10
    2650:	5f4d4954 	svcpl	0x004d4954
    2654:	5031434f 	eorspl	r4, r1, pc, asr #6
    2658:	6f6c6572 	svcvs	0x006c6572
    265c:	6f436461 	svcvs	0x00436461
    2660:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2664:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2668:	414d445f 	cmpmi	sp, pc, asr r4
    266c:	73727542 	cmnvc	r2, #276824064	; 0x10800000
    2670:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    2674:	00687467 	rsbeq	r7, r8, r7, ror #8
    2678:	5f4d4954 	svcpl	0x004d4954
    267c:	61656c43 	cmnvs	r5, r3, asr #24
    2680:	616c4672 	smcvs	50274	; 0xc462
    2684:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2688:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    268c:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 24c4 <_Min_Stack_Size+0x22c4>
    2690:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
    2694:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
    2698:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    269c:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 24d4 <_Min_Stack_Size+0x22d4>
    26a0:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
    26a4:	49540033 	ldmdbmi	r4, {r0, r1, r4, r5}^
    26a8:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    26ac:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    26b0:	004d4f43 	subeq	r4, sp, r3, asr #30
    26b4:	63706d74 	cmnvs	r0, #116, 26	; 0x1d00
    26b8:	00726563 	rsbseq	r6, r2, r3, ror #10
    26bc:	5f4d4954 	svcpl	0x004d4954
    26c0:	4e32434f 	cdpmi	3, 3, cr4, cr2, cr15, {2}
    26c4:	616c6f50 	cmnvs	ip, r0, asr pc
    26c8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    26cc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    26d0:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    26d4:	435f3449 	cmpmi	pc, #1224736768	; 0x49000000
    26d8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    26dc:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    26e0:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    26e4:	616c6f50 	cmnvs	ip, r0, asr pc
    26e8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    26ec:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    26f0:	6f6c435f 	svcvs	0x006c435f
    26f4:	69446b63 	stmdbvs	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    26f8:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    26fc:	54006e6f 	strpl	r6, [r0], #-3695	; 0xfffff191
    2700:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    2704:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
    2708:	61637365 	cmnvs	r3, r5, ror #6
    270c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2710:	5f4d4954 	svcpl	0x004d4954
    2714:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2718:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    271c:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    2720:	545f4d49 	ldrbpl	r4, [pc], #-3401	; 2728 <_Min_Stack_Size+0x2528>
    2724:	42656d69 	rsbmi	r6, r5, #6720	; 0x1a40
    2728:	53657361 	cmnpl	r5, #-2080374783	; 0x84000001
    272c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2730:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    2734:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2738:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xfffff0b3
    273c:	70614374 	rsbvc	r4, r1, r4, ror r3
    2740:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    2744:	49540031 	ldmdbmi	r4, {r0, r4, r5}^
    2748:	614d5f4d 	cmpvs	sp, sp, asr #30
    274c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    2750:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    2754:	646f4d65 	strbtvs	r4, [pc], #-3429	; 275c <_Min_Stack_Size+0x255c>
    2758:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    275c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    2760:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2764:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    2768:	646f4d65 	strbtvs	r4, [pc], #-3429	; 2770 <_Min_Stack_Size+0x2570>
    276c:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2770:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    2774:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2778:	7473614d 	ldrbtvc	r6, [r3], #-333	; 0xfffffeb3
    277c:	6c537265 	lfmvs	f7, 2, [r3], {101}	; 0x65
    2780:	4d657661 	stclmi	6, cr7, [r5, #-388]!	; 0xfffffe7c
    2784:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2788:	5f4d4954 	svcpl	0x004d4954
    278c:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    2790:	5367616c 	cmnpl	r7, #108, 2
    2794:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    2798:	49540073 	ldmdbmi	r4, {r0, r1, r4, r5, r6}^
    279c:	44425f4d 	strbmi	r5, [r2], #-3917	; 0xfffff0b3
    27a0:	6e495254 	mcrvs	2, 2, r5, cr9, cr4, {2}
    27a4:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    27a8:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    27ac:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    27b0:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    27b4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    27b8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    27bc:	53007463 	movwpl	r7, #1123	; 0x463
    27c0:	0052434d 	subseq	r4, r2, sp, asr #6
    27c4:	5f4d4954 	svcpl	0x004d4954
    27c8:	5253534f 	subspl	r5, r3, #1006632961	; 0x3c000001
    27cc:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    27d0:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    27d4:	5400784d 	strpl	r7, [r0], #-2125	; 0xfffff7b3
    27d8:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 1a97 <_Min_Stack_Size+0x1897>
    27dc:	646f636e 	strbtvs	r6, [pc], #-878	; 27e4 <_Min_Stack_Size+0x25e4>
    27e0:	6f4d7265 	svcvs	0x004d7265
    27e4:	54006564 	strpl	r6, [r0], #-1380	; 0xfffffa9c
    27e8:	4f5f4d49 	svcmi	0x005f4d49
    27ec:	6f503443 	svcvs	0x00503443
    27f0:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    27f4:	6f437974 	svcvs	0x00437974
    27f8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    27fc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2800:	7475415f 	ldrbtvc	r4, [r5], #-351	; 0xfffffea1
    2804:	74616d6f 	strbtvc	r6, [r1], #-3439	; 0xfffff291
    2808:	754f6369 	strbvc	r6, [pc, #-873]	; 24a7 <_Min_Stack_Size+0x22a7>
    280c:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    2810:	6f682f00 	svcvs	0x00682f00
    2814:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    2818:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    281c:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    2820:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    2824:	544f492d 	strbpl	r4, [pc], #-2349	; 282c <_Min_Stack_Size+0x262c>
    2828:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    282c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2830:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
    2834:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    2838:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    283c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2840:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    2844:	5400632e 	strpl	r6, [r0], #-814	; 0xfffffcd2
    2848:	535f4d49 	cmppl	pc, #4672	; 0x1240
    284c:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2850:	74754f74 	ldrbtvc	r4, [r5], #-3956	; 0xfffff08c
    2854:	54747570 	ldrbtpl	r7, [r4], #-1392	; 0xfffffa90
    2858:	67676972 			; <UNDEFINED> instruction: 0x67676972
    285c:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    2860:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2864:	43497465 	movtmi	r7, #37989	; 0x9465
    2868:	65725031 	ldrbvs	r5, [r2, #-49]!	; 0xffffffcf
    286c:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2870:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    2874:	505f4d49 	subspl	r4, pc, r9, asr #26
    2878:	43494d57 	movtmi	r4, #40279	; 0x9d57
    287c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2880:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2884:	6f435f33 	svcvs	0x00435f33
    2888:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    288c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2890:	414d445f 	cmpmi	sp, pc, asr r4
    2894:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2898:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
    289c:	4f5f4d49 	svcmi	0x005f4d49
    28a0:	72745343 	rsbsvc	r5, r4, #201326593	; 0xc000001
    28a4:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    28a8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    28ac:	5f4d4954 	svcpl	0x004d4954
    28b0:	52435350 	subpl	r5, r3, #80, 6	; 0x40000001
    28b4:	616f6c65 	cmnvs	pc, r5, ror #24
    28b8:	646f4d64 	strbtvs	r4, [pc], #-3428	; 28c0 <_Min_Stack_Size+0x26c0>
    28bc:	6d740065 	ldclvs	0, cr0, [r4, #-404]!	; 0xfffffe6c
    28c0:	636d7370 	cmnvs	sp, #112, 6	; 0xc0000001
    28c4:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    28c8:	78455f4d 	stmdavc	r5, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    28cc:	47525474 			; <UNDEFINED> instruction: 0x47525474
    28d0:	616c6f50 	cmnvs	ip, r0, asr pc
    28d4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    28d8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    28dc:	5444425f 	strbpl	r4, [r4], #-607	; 0xfffffda1
    28e0:	72745352 	rsbsvc	r5, r4, #1207959553	; 0x48000001
    28e4:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    28e8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    28ec:	63706d74 	cmnvs	r0, #116, 26	; 0x1d00
    28f0:	74003172 	strvc	r3, [r0], #-370	; 0xfffffe8e
    28f4:	7263706d 	rsbvc	r7, r3, #109	; 0x6d
    28f8:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
    28fc:	78455f4d 	stmdavc	r5, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    2900:	47525474 			; <UNDEFINED> instruction: 0x47525474
    2904:	73657250 	cmnvc	r5, #80, 4
    2908:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    290c:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    2910:	72425f4d 	subvc	r5, r2, #308	; 0x134
    2914:	006b6165 	rsbeq	r6, fp, r5, ror #2
    2918:	5f4d4954 	svcpl	0x004d4954
    291c:	61656c43 	cmnvs	r5, r3, asr #24
    2920:	33434f72 	movtcc	r4, #16242	; 0x3f72
    2924:	00666552 	rsbeq	r6, r6, r2, asr r5
    2928:	5f4d4954 	svcpl	0x004d4954
    292c:	64616544 	strbtvs	r6, [r1], #-1348	; 0xfffffabc
    2930:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2934:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2938:	31434f5f 	cmpcc	r3, pc, asr pc
    293c:	616c6f50 	cmnvs	ip, r0, asr pc
    2940:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2944:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2948:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    294c:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    2950:	6563726f 	strbvs	r7, [r3, #-623]!	; 0xfffffd91
    2954:	31434f64 	cmpcc	r3, r4, ror #30
    2958:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    295c:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2960:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    2964:	6563726f 	strbvs	r7, [r3, #-623]!	; 0xfffffd91
    2968:	33434f64 	movtcc	r4, #16228	; 0x3f64
    296c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2970:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2974:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2978:	65725043 	ldrbvs	r5, [r2, #-67]!	; 0xffffffbd
    297c:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2980:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    2984:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2988:	434e7843 	movtmi	r7, #59459	; 0xe843
    298c:	5400646d 	strpl	r6, [r0], #-1133	; 0xfffffb93
    2990:	4f5f4d49 	svcmi	0x005f4d49
    2994:	64494e43 	strbvs	r4, [r9], #-3651	; 0xfffff1bd
    2998:	7453656c 	ldrbvc	r6, [r3], #-1388	; 0xfffffa94
    299c:	00657461 	rsbeq	r7, r5, r1, ror #8
    29a0:	5f4d4954 	svcpl	0x004d4954
    29a4:	42414d44 	submi	r4, r1, #68, 26	; 0x1100
    29a8:	00657361 	rsbeq	r7, r5, r1, ror #6
    29ac:	706f6369 	rsbvc	r6, pc, r9, ror #6
    29b0:	69736f70 	ldmdbvs	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    29b4:	65736574 	ldrbvs	r6, [r3, #-1396]!	; 0xfffffa8c
    29b8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    29bc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    29c0:	5f4d4954 	svcpl	0x004d4954
    29c4:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    29c8:	61706d6f 	cmnvs	r0, pc, ror #26
    29cc:	00346572 	eorseq	r6, r4, r2, ror r5
    29d0:	5f4d4954 	svcpl	0x004d4954
    29d4:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    29d8:	61745354 	cmnvs	r4, r4, asr r3
    29dc:	00737574 	rsbseq	r7, r3, r4, ror r5
    29e0:	5f4d4954 	svcpl	0x004d4954
    29e4:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    29e8:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0xfffffebe
    29ec:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    29f0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    29f4:	54007463 	strpl	r7, [r0], #-1123	; 0xfffffb9d
    29f8:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 2a00 <_Min_Stack_Size+0x2800>
    29fc:	6f43414d 	svcvs	0x0043414d
    2a00:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2a04:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2a08:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2a0c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2a10:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
    2a14:	6f697369 	svcvs	0x00697369
    2a18:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    2a1c:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
    2a20:	49540078 	ldmdbmi	r4, {r3, r4, r5, r6}^
    2a24:	754f5f4d 	strbvc	r5, [pc, #-3917]	; 1adf <_Min_Stack_Size+0x18df>
    2a28:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    2a2c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    2a30:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2a34:	76455f4d 	strbvc	r5, [r5], -sp, asr #30
    2a38:	53746e65 	cmnpl	r4, #1616	; 0x650
    2a3c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2a40:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2a44:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2a48:	616c6f50 	cmnvs	ip, r0, asr pc
    2a4c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2a50:	53455200 	movtpl	r5, #20992	; 0x5200
    2a54:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    2a58:	54003944 	strpl	r3, [r0], #-2372	; 0xfffff6bc
    2a5c:	505f4d49 	subspl	r4, pc, r9, asr #26
    2a60:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2a64:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2a68:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2a6c:	7849545f 	stmdavc	r9, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    2a70:	65747845 	ldrbvs	r7, [r4, #-2117]!	; 0xfffff7bb
    2a74:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    2a78:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2a7c:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    2a80:	00676966 	rsbeq	r6, r7, r6, ror #18
    2a84:	5f4d4954 	svcpl	0x004d4954
    2a88:	4b434f4c 	blmi	10d67c0 <_Min_Stack_Size+0x10d65c0>
    2a8c:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
    2a90:	4954006c 	ldmdbmi	r4, {r2, r3, r5, r6}^
    2a94:	74435f4d 	strbvc	r5, [r3], #-3917	; 0xfffff0b3
    2a98:	57506c72 			; <UNDEFINED> instruction: 0x57506c72
    2a9c:	74754f4d 	ldrbtvc	r4, [r5], #-3917	; 0xfffff0b3
    2aa0:	73747570 	cmnvc	r4, #112, 10	; 0x1c000000
    2aa4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2aa8:	5444425f 	strbpl	r4, [r4], #-607	; 0xfffffda1
    2aac:	6e6f4352 	mcrvs	3, 3, r4, cr15, cr2, {2}
    2ab0:	00676966 	rsbeq	r6, r7, r6, ror #18
    2ab4:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    2ab8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2abc:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2ac0:	50324349 	eorspl	r4, r2, r9, asr #6
    2ac4:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2ac8:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2acc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2ad0:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0xffffffa1
    2ad4:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2ad8:	6f437265 	svcvs	0x00437265
    2adc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2ae0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2ae4:	5254495f 	subspl	r4, r4, #1556480	; 0x17c000
    2ae8:	74784578 	ldrbtvc	r4, [r8], #-1400	; 0xfffffa88
    2aec:	616e7265 	cmnvs	lr, r5, ror #4
    2af0:	6f6c436c 	svcvs	0x006c436c
    2af4:	6f436b63 	svcvs	0x00436b63
    2af8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2afc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2b00:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    2b04:	6c6f504e 	stclvs	0, cr5, [pc], #-312	; 29d4 <_Min_Stack_Size+0x27d4>
    2b08:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    2b0c:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    2b10:	00676966 	rsbeq	r6, r7, r6, ror #18
    2b14:	5f4d4954 	svcpl	0x004d4954
    2b18:	4953534f 	ldmdbmi	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    2b1c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    2b20:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2b24:	54495f4d 	strbpl	r5, [r9], #-3917	; 0xfffff0b3
    2b28:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2b2c:	6d69545f 	cfstrdvs	mvd5, [r9, #-380]!	; 0xfffffe84
    2b30:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
    2b34:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    2b38:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2b3c:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    2b40:	74784578 	ldrbtvc	r4, [r8], #-1400	; 0xfffffa88
    2b44:	616e7265 	cmnvs	lr, r5, ror #4
    2b48:	4b4c436c 	blmi	1313900 <_Min_Stack_Size+0x1313700>
    2b4c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2b50:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
    2b54:	425f4d49 	subsmi	r4, pc, #4672	; 0x1240
    2b58:	49525444 	ldmdbmi	r2, {r2, r6, sl, ip, lr}^
    2b5c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2b60:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2b64:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2b68:	6f435f32 	svcvs	0x00435f32
    2b6c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2b70:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2b74:	32434f5f 	subcc	r4, r3, #380	; 0x17c
    2b78:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
    2b7c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2b80:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2b84:	4f5f4d49 	svcmi	0x005f4d49
    2b88:	61463443 	cmpvs	r6, r3, asr #8
    2b8c:	6f437473 	svcvs	0x00437473
    2b90:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2b94:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2b98:	4e434f5f 	mcrmi	15, 2, r4, cr3, cr15, {2}
    2b9c:	616c6f50 	cmnvs	ip, r0, asr pc
    2ba0:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2ba4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2ba8:	5254455f 	subspl	r4, r4, #398458880	; 0x17c00000
    2bac:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2bb0:	646f4d6b 	strbtvs	r4, [pc], #-3435	; 2bb8 <_Min_Stack_Size+0x29b8>
    2bb4:	6f433265 	svcvs	0x00433265
    2bb8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2bbc:	31495400 	cmpcc	r9, r0, lsl #8
    2bc0:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    2bc4:	00676966 	rsbeq	r6, r7, r6, ror #18
    2bc8:	5f4d4954 	svcpl	0x004d4954
    2bcc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2bd0:	52414d44 	subpl	r4, r1, #68, 26	; 0x1100
    2bd4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2bd8:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2bdc:	50334349 	eorspl	r4, r3, r9, asr #6
    2be0:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2be4:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2be8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2bec:	32434f5f 	subcc	r4, r3, #380	; 0x17c
    2bf0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    2bf4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2bf8:	7265505f 	rsbvc	r5, r5, #95	; 0x5f
    2bfc:	00646f69 	rsbeq	r6, r4, r9, ror #30
    2c00:	5f4d4954 	svcpl	0x004d4954
    2c04:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2c08:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0xfffffebe
    2c0c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    2c10:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    2c14:	00666544 	rsbeq	r6, r6, r4, asr #10
    2c18:	5f4d4954 	svcpl	0x004d4954
    2c1c:	61656c43 	cmnvs	r5, r3, asr #24
    2c20:	50544972 	subspl	r4, r4, r2, ror r9
    2c24:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2c28:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2c2c:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2c30:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2c34:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    2c38:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    2c3c:	00666544 	rsbeq	r6, r6, r4, asr #10
    2c40:	5f4d4954 	svcpl	0x004d4954
    2c44:	4934434f 	ldmdbmi	r4!, {r0, r1, r2, r3, r6, r8, r9, lr}
    2c48:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2c4c:	5f4d4954 	svcpl	0x004d4954
    2c50:	6e494349 	cdpvs	3, 4, cr4, cr9, cr9, {2}
    2c54:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    2c58:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2c5c:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2c60:	78434f74 	stmdavc	r3, {r2, r4, r5, r6, r8, r9, sl, fp, lr}^
    2c64:	4954004d 	ldmdbmi	r4, {r0, r2, r3, r6}^
    2c68:	70555f4d 	subsvc	r5, r5, sp, asr #30
    2c6c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    2c70:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
    2c74:	43747365 	cmnmi	r4, #-1811939327	; 0x94000001
    2c78:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2c7c:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2c80:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2c84:	65725034 	ldrbvs	r5, [r2, #-52]!	; 0xffffffcc
    2c88:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    2c8c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2c90:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2c94:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2c98:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0xfffffe94
    2c9c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    2ca0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2ca4:	4d434f5f 	stclmi	15, cr4, [r3, #-380]	; 0xfffffe84
    2ca8:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2cac:	5f4d4954 	svcpl	0x004d4954
    2cb0:	61656c43 	cmnvs	r5, r3, asr #24
    2cb4:	34434f72 	strbcc	r4, [r3], #-3954	; 0xfffff08e
    2cb8:	00666552 	rsbeq	r6, r6, r2, asr r5
    2cbc:	5f4d4954 	svcpl	0x004d4954
    2cc0:	61657242 	cmnvs	r5, r2, asr #4
    2cc4:	6c6f506b 	stclvs	0, cr5, [pc], #-428	; 2b20 <_Min_Stack_Size+0x2920>
    2cc8:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    2ccc:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    2cd0:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2cd4:	6f504e31 	svcvs	0x00504e31
    2cd8:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2cdc:	6f437974 	svcvs	0x00437974
    2ce0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2ce4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2ce8:	5043435f 	subpl	r4, r3, pc, asr r3
    2cec:	6f6c6572 	svcvs	0x006c6572
    2cf0:	6f436461 	svcvs	0x00436461
    2cf4:	6f72746e 	svcvs	0x0072746e
    2cf8:	4343006c 	movtmi	r0, #12396	; 0x306c
    2cfc:	54003152 	strpl	r3, [r0], #-338	; 0xfffffeae
    2d00:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 1fbf <_Min_Stack_Size+0x1dbf>
    2d04:	6c435254 	sfmvs	f5, 2, [r3], {84}	; 0x54
    2d08:	4d6b636f 	stclmi	3, cr6, [fp, #-444]!	; 0xfffffe44
    2d0c:	3165646f 	cmncc	r5, pc, ror #8
    2d10:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2d14:	43006769 	movwmi	r6, #1897	; 0x769
    2d18:	00335243 	eorseq	r5, r3, r3, asr #4
    2d1c:	34524343 	ldrbcc	r4, [r2], #-835	; 0xfffffcbd
    2d20:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2d24:	49434f5f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
    2d28:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
    2d2c:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    2d30:	54006665 	strpl	r6, [r0], #-1637	; 0xfffff99b
    2d34:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2d38:	6f437465 	svcvs	0x00437465
    2d3c:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
    2d40:	74690072 	strbtvc	r0, [r9], #-114	; 0xffffff8e
    2d44:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    2d48:	5400656c 	strpl	r6, [r0], #-1388	; 0xfffffa94
    2d4c:	4f5f4d49 	svcmi	0x005f4d49
    2d50:	6f503343 	svcvs	0x00503343
    2d54:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2d58:	6f437974 	svcvs	0x00437974
    2d5c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2d60:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2d64:	31434f5f 	cmpcc	r3, pc, asr pc
    2d68:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    2d6c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2d70:	7065525f 	rsbvc	r5, r5, pc, asr r2
    2d74:	74697465 	strbtvc	r7, [r9], #-1125	; 0xfffffb9b
    2d78:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    2d7c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    2d80:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    2d84:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2d88:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2d8c:	6c614874 	stclvs	8, cr4, [r1], #-464	; 0xfffffe30
    2d90:	6e65536c 	cdpvs	3, 6, cr5, cr5, cr12, {3}
    2d94:	00726f73 	rsbseq	r6, r2, r3, ror pc
    2d98:	5f4d4954 	svcpl	0x004d4954
    2d9c:	6e494349 	cdpvs	3, 4, cr4, cr9, cr9, {2}
    2da0:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    2da4:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    2da8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2dac:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    2db0:	434f7261 	movtmi	r7, #62049	; 0xf261
    2db4:	66655232 			; <UNDEFINED> instruction: 0x66655232
    2db8:	74784500 	ldrbtvc	r4, [r8], #-1280	; 0xfffffb00
    2dbc:	46475254 			; <UNDEFINED> instruction: 0x46475254
    2dc0:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    2dc4:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    2dc8:	54495f4d 	strbpl	r5, [r9], #-3917	; 0xfffff0b3
    2dcc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2dd0:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2dd4:	4f5f4d49 	svcmi	0x005f4d49
    2dd8:	6c644943 			; <UNDEFINED> instruction: 0x6c644943
    2ddc:	61745365 	cmnvs	r4, r5, ror #6
    2de0:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    2de4:	4f5f4d49 	svcmi	0x005f4d49
    2de8:	656c4343 	strbvs	r4, [ip, #-835]!	; 0xfffffcbd
    2dec:	54007261 	strpl	r7, [r0], #-609	; 0xfffffd9f
    2df0:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2df4:	43535043 	cmpmi	r3, #67	; 0x43
    2df8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2dfc:	5254455f 	subspl	r4, r4, #398458880	; 0x17c00000
    2e00:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2e04:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    2e08:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 2e10 <_Min_Stack_Size+0x2c10>
    2e0c:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    2e10:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2e14:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2e18:	73614633 	cmnvc	r1, #53477376	; 0x3300000
    2e1c:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    2e20:	00676966 	rsbeq	r6, r7, r6, ror #18
    2e24:	5f4d4954 	svcpl	0x004d4954
    2e28:	5033434f 	eorspl	r4, r3, pc, asr #6
    2e2c:	6f6c6572 	svcvs	0x006c6572
    2e30:	6f436461 	svcvs	0x00436461
    2e34:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2e38:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2e3c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2e40:	50344349 	eorspl	r4, r4, r9, asr #6
    2e44:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2e48:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2e4c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2e50:	31434f5f 	cmpcc	r3, pc, asr pc
    2e54:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
    2e58:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2e5c:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    2e60:	525f4332 	subspl	r4, pc, #-939524096	; 0xc8000000
    2e64:	52646165 	rsbpl	r6, r4, #1073741849	; 0x40000019
    2e68:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    2e6c:	00726574 	rsbseq	r6, r2, r4, ror r5
    2e70:	5f433249 	svcpl	0x00433249
    2e74:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    2e78:	5367616c 	cmnpl	r7, #108, 2
    2e7c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    2e80:	32490073 	subcc	r0, r9, #115	; 0x73
    2e84:	61435f43 	cmpvs	r3, r3, asr #30
    2e88:	6c75636c 	ldclvs	3, cr6, [r5], #-432	; 0xfffffe50
    2e8c:	50657461 	rsbpl	r7, r5, r1, ror #8
    2e90:	49004345 	stmdbmi	r0, {r0, r2, r6, r8, r9, lr}
    2e94:	415f4332 	cmpmi	pc, r2, lsr r3	; <UNPREDICTABLE>
    2e98:	6f6e6b63 	svcvs	0x006e6b63
    2e9c:	64656c77 	strbtvs	r6, [r5], #-3191	; 0xfffff389
    2ea0:	41646567 	cmnmi	r4, r7, ror #10
    2ea4:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    2ea8:	49007373 	stmdbmi	r0, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}
    2eac:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    2eb0:	7774666f 	ldrbvc	r6, [r4, -pc, ror #12]!
    2eb4:	52657261 	rsbpl	r7, r5, #268435462	; 0x10000006
    2eb8:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    2ebc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2ec0:	5f433249 	svcpl	0x00433249
    2ec4:	69005449 	stmdbvs	r0, {r0, r3, r6, sl, ip, lr}
    2ec8:	62786332 	rsbsvs	r6, r8, #-939524096	; 0xc8000000
    2ecc:	00657361 	rsbeq	r7, r5, r1, ror #6
    2ed0:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
    2ed4:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
    2ed8:	682f0074 	stmdavs	pc!, {r2, r4, r5, r6}	; <UNPREDICTABLE>
    2edc:	2f656d6f 	svccs	0x00656d6f
    2ee0:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    2ee4:	542f7673 	strtpl	r7, [pc], #-1651	; 2eec <_Min_Stack_Size+0x2cec>
    2ee8:	41534144 	cmpmi	r3, r4, asr #2
    2eec:	4f492d54 	svcmi	0x00492d54
    2ef0:	694c2f54 	stmdbvs	ip, {r2, r4, r6, r8, r9, sl, fp, sp}^
    2ef4:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    2ef8:	2f736569 	svccs	0x00736569
    2efc:	2f637273 	svccs	0x00637273
    2f00:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2f04:	30316632 	eorscc	r6, r1, r2, lsr r6
    2f08:	32695f78 	rsbcc	r5, r9, #120, 30	; 0x1e0
    2f0c:	00632e63 	rsbeq	r2, r3, r3, ror #28
    2f10:	5f433249 	svcpl	0x00433249
    2f14:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
    2f18:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
    2f1c:	504f5453 	subpl	r5, pc, r3, asr r4	; <UNPREDICTABLE>
    2f20:	43324900 	teqmi	r2, #0, 18
    2f24:	646d435f 	strbtvs	r4, [sp], #-863	; 0xfffffca1
    2f28:	43324900 	teqmi	r2, #0, 18
    2f2c:	6172545f 	cmnvs	r2, pc, asr r4
    2f30:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    2f34:	43455074 	movtmi	r5, #20596	; 0x5074
    2f38:	43324900 	teqmi	r2, #0, 18
    2f3c:	63720078 	cmnvs	r2, #120	; 0x78
    2f40:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
    2f44:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    2f48:	43324900 	teqmi	r2, #0, 18
    2f4c:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    2f50:	54497261 	strbpl	r7, [r9], #-609	; 0xfffffd9f
    2f54:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
    2f58:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    2f5c:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    2f60:	465f4332 			; <UNDEFINED> instruction: 0x465f4332
    2f64:	0047414c 	subeq	r4, r7, ip, asr #2
    2f68:	5f433249 	svcpl	0x00433249
    2f6c:	4b43414e 	blmi	10d34ac <_Min_Stack_Size+0x10d32ac>
    2f70:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    2f74:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    2f78:	43324900 	teqmi	r2, #0, 18
    2f7c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2f80:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    2f84:	00746375 	rsbseq	r6, r4, r5, ror r3
    2f88:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    2f8c:	32490031 	subcc	r0, r9, #49	; 0x31
    2f90:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
    2f94:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    2f98:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    2f9c:	32490073 	subcc	r0, r9, #115	; 0x73
    2fa0:	52415f43 	subpl	r5, r1, #268	; 0x10c
    2fa4:	646d4350 	strbtvs	r4, [sp], #-848	; 0xfffffcb0
    2fa8:	6c637000 	stclvs	0, cr7, [r3], #-0
    2fac:	4900316b 	stmdbmi	r0, {r0, r1, r3, r5, r6, r8, ip, sp}
    2fb0:	445f4332 	ldrbmi	r4, [pc], #-818	; 2fb8 <_Min_Stack_Size+0x2db8>
    2fb4:	6d43414d 	stfvse	f4, [r3, #-308]	; 0xfffffecc
    2fb8:	32490064 	subcc	r0, r9, #100	; 0x64
    2fbc:	4d445f43 	stclmi	15, cr5, [r4, #-268]	; 0xfffffef4
    2fc0:	73614c41 	cmnvc	r1, #16640	; 0x4100
    2fc4:	61725474 	cmnvs	r2, r4, ror r4
    2fc8:	6566736e 	strbvs	r7, [r6, #-878]!	; 0xfffffc92
    2fcc:	646d4372 	strbtvs	r4, [sp], #-882	; 0xfffffc8e
    2fd0:	43324900 	teqmi	r2, #0, 18
    2fd4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    2fd8:	00434550 	subeq	r4, r3, r0, asr r5
    2fdc:	5f433249 	svcpl	0x00433249
    2fe0:	6c617544 	cfstr64vs	mvdx7, [r1], #-272	; 0xfffffef0
    2fe4:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    2fe8:	43737365 	cmnmi	r3, #-1811939327	; 0x94000001
    2fec:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    2ff0:	475f4332 	smmlarmi	pc, r2, r3, r4	; <UNPREDICTABLE>
    2ff4:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    2ff8:	61436c61 	cmpvs	r3, r1, ror #24
    2ffc:	6d436c6c 	stclvs	12, cr6, [r3, #-432]	; 0xfffffe50
    3000:	32490064 	subcc	r0, r9, #100	; 0x64
    3004:	414e5f43 	cmpmi	lr, r3, asr #30
    3008:	6f504b43 	svcvs	0x00504b43
    300c:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    3010:	6f436e6f 	svcvs	0x00436e6f
    3014:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3018:	616c6600 	cmnvs	ip, r0, lsl #12
    301c:	736f7067 	cmnvc	pc, #103	; 0x67
    3020:	43324900 	teqmi	r2, #0, 18
    3024:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 302c <_Min_Stack_Size+0x2e2c>
    3028:	32690065 	rsbcc	r0, r9, #101	; 0x65
    302c:	67657263 	strbvs	r7, [r5, -r3, ror #4]!
    3030:	43324900 	teqmi	r2, #0, 18
    3034:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    3038:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
    303c:	61746144 	cmnvs	r4, r4, asr #2
    3040:	43324900 	teqmi	r2, #0, 18
    3044:	7361465f 	cmnvc	r1, #99614720	; 0x5f00000
    3048:	646f4d74 	strbtvs	r4, [pc], #-3444	; 3050 <_Min_Stack_Size+0x2e50>
    304c:	74754465 	ldrbtvc	r4, [r5], #-1125	; 0xfffffb9b
    3050:	63794379 	cmnvs	r9, #-469762047	; 0xe4000001
    3054:	6f43656c 	svcvs	0x0043656c
    3058:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    305c:	43324900 	teqmi	r2, #0, 18
    3060:	424d535f 	submi	r5, sp, #2080374785	; 0x7c000001
    3064:	6c417375 	mcrrvs	3, 7, r7, r1, cr5
    3068:	43747265 	cmnmi	r4, #1342177286	; 0x50000006
    306c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3070:	32490067 	subcc	r0, r9, #103	; 0x67
    3074:	54495f43 	strbpl	r5, [r9], #-3907	; 0xfffff0bd
    3078:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    307c:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    3080:	455f4332 	ldrbmi	r4, [pc, #-818]	; 2d56 <_Min_Stack_Size+0x2b56>
    3084:	544e4556 	strbpl	r4, [lr], #-1366	; 0xfffffaaa
    3088:	43324900 	teqmi	r2, #0, 18
    308c:	6b63415f 	blvs	18d3610 <_Min_Stack_Size+0x18d3410>
    3090:	6c776f6e 	ldclvs	15, cr6, [r7], #-440	; 0xfffffe48
    3094:	65676465 	strbvs	r6, [r7, #-1125]!	; 0xfffffb9b
    3098:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    309c:	66006769 	strvs	r6, [r0], -r9, ror #14
    30a0:	3267616c 	rsbcc	r6, r7, #108, 2
    30a4:	43324900 	teqmi	r2, #0, 18
    30a8:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    30ac:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    30b0:	49006761 	stmdbmi	r0, {r0, r5, r6, r8, r9, sl, sp, lr}
    30b4:	525f4332 	subspl	r4, pc, #-939524096	; 0xc8000000
    30b8:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    30bc:	00726574 	rsbseq	r6, r2, r4, ror r5
    30c0:	5f433249 	svcpl	0x00433249
    30c4:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
    30c8:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
    30cc:	52415453 	subpl	r5, r1, #1392508928	; 0x53000000
    30d0:	32490054 	subcc	r0, r9, #84	; 0x54
    30d4:	774f5f43 	strbvc	r5, [pc, -r3, asr #30]
    30d8:	6464416e 	strbtvs	r4, [r4], #-366	; 0xfffffe92
    30dc:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    30e0:	32490031 	subcc	r0, r9, #49	; 0x31
    30e4:	63415f43 	movtvs	r5, #8003	; 0x1f43
    30e8:	3249006b 	subcc	r0, r9, #107	; 0x6b
    30ec:	45505f43 	ldrbmi	r5, [r0, #-3907]	; 0xfffff0bd
    30f0:	736f5043 	cmnvc	pc, #67	; 0x43
    30f4:	6f697469 	svcvs	0x00697469
    30f8:	6e6f436e 	cdpvs	3, 6, cr4, cr15, cr14, {3}
    30fc:	00676966 	rsbeq	r6, r7, r6, ror #18
    3100:	71657266 	cmnvc	r5, r6, ror #4
    3104:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
    3108:	32490065 	subcc	r0, r9, #101	; 0x65
    310c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    3110:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    3114:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    3118:	32490066 	subcc	r0, r9, #102	; 0x66
    311c:	74535f43 	ldrbvc	r5, [r3], #-3907	; 0xfffff0bd
    3120:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    3124:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    3128:	43324900 	teqmi	r2, #0, 18
    312c:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3130:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3134:	5f433249 	svcpl	0x00433249
    3138:	416e774f 	cmnmi	lr, pc, asr #14
    313c:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    3140:	43327373 	teqmi	r2, #-872415231	; 0xcc000001
    3144:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3148:	32490067 	subcc	r0, r9, #103	; 0x67
    314c:	74535f43 	ldrbvc	r5, [r3], #-3907	; 0xfffff0bd
    3150:	63746572 	cmnvs	r4, #478150656	; 0x1c800000
    3154:	6f6c4368 	svcvs	0x006c4368
    3158:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    315c:	32490064 	subcc	r0, r9, #100	; 0x64
    3160:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    3164:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    3168:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
    316c:	43324900 	teqmi	r2, #0, 18
    3170:	4345505f 	movtmi	r5, #20575	; 0x505f
    3174:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    3178:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    317c:	43324900 	teqmi	r2, #0, 18
    3180:	424d535f 	submi	r5, sp, #2080374785	; 0x7c000001
    3184:	6c417375 	mcrrvs	3, 7, r7, r1, cr5
    3188:	00747265 	rsbseq	r7, r4, r5, ror #4
    318c:	5f433249 	svcpl	0x00433249
    3190:	79747544 	ldmdbvc	r4!, {r2, r6, r8, sl, ip, sp, lr}^
    3194:	6c637943 			; <UNDEFINED> instruction: 0x6c637943
    3198:	32490065 	subcc	r0, r9, #101	; 0x65
    319c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    31a0:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    31a4:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    31a8:	44646e65 	strbtmi	r6, [r4], #-3685	; 0xfffff19b
    31ac:	00617461 	rsbeq	r7, r1, r1, ror #8
    31b0:	5f433249 	svcpl	0x00433249
    31b4:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
    31b8:	74696237 	strbtvc	r6, [r9], #-567	; 0xfffffdc9
    31bc:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    31c0:	00737365 	rsbseq	r7, r3, r5, ror #6
    31c4:	5f433249 	svcpl	0x00433249
    31c8:	63656843 	cmnvs	r5, #4390912	; 0x430000
    31cc:	6576456b 	ldrbvs	r4, [r6, #-1387]!	; 0xfffffa95
    31d0:	4900746e 	stmdbmi	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    31d4:	445f4332 	ldrbmi	r4, [pc], #-818	; 31dc <_Min_Stack_Size+0x2fdc>
    31d8:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
    31dc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    31e0:	43324900 	teqmi	r2, #0, 18
    31e4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    31e8:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0xfffffeb4
    31ec:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    31f0:	57490074 	smlsldxpl	r0, r9, r4, r0
    31f4:	455f4744 	ldrbmi	r4, [pc, #-1860]	; 2ab8 <_Min_Stack_Size+0x28b8>
    31f8:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    31fc:	57490065 	strbpl	r0, [r9, -r5, rrx]
    3200:	505f4744 	subspl	r4, pc, r4, asr #14
    3204:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    3208:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    320c:	44574900 	ldrbmi	r4, [r7], #-2304	; 0xfffff700
    3210:	65535f47 	ldrbvs	r5, [r3, #-3911]	; 0xfffff0b9
    3214:	65725074 	ldrbvs	r5, [r2, #-116]!	; 0xffffff8c
    3218:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    321c:	49007265 	stmdbmi	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    3220:	5f474457 	svcpl	0x00474457
    3224:	52746553 	rsbspl	r6, r4, #348127232	; 0x14c00000
    3228:	616f6c65 	cmnvs	pc, r5, ror #24
    322c:	57490064 	strbpl	r0, [r9, -r4, rrx]
    3230:	525f4744 	subspl	r4, pc, #68, 14	; 0x1100000
    3234:	616f6c65 	cmnvs	pc, r5, ror #24
    3238:	756f4364 	strbvc	r4, [pc, #-868]!	; 2edc <_Min_Stack_Size+0x2cdc>
    323c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    3240:	44574900 	ldrbmi	r4, [r7], #-2304	; 0xfffff700
    3244:	72575f47 	subsvc	r5, r7, #284	; 0x11c
    3248:	41657469 	cmnmi	r5, r9, ror #8
    324c:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
    3250:	646d4373 	strbtvs	r4, [sp], #-883	; 0xfffffc8d
    3254:	6f682f00 	svcvs	0x00682f00
    3258:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    325c:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    3260:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    3264:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    3268:	544f492d 	strbpl	r4, [pc], #-2349	; 3270 <_Min_Stack_Size+0x3070>
    326c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3270:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3274:	732f7365 			; <UNDEFINED> instruction: 0x732f7365
    3278:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    327c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3280:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    3284:	6477695f 	ldrbtvs	r6, [r7], #-2399	; 0xfffff6a1
    3288:	00632e67 	rsbeq	r2, r3, r7, ror #28
    328c:	47445749 	strbmi	r5, [r4, -r9, asr #14]
    3290:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    3294:	63416574 	movtvs	r6, #5492	; 0x1574
    3298:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    329c:	44574900 	ldrbmi	r4, [r7], #-2304	; 0xfffff700
    32a0:	4c465f47 	mcrrmi	15, 4, r5, r6, cr7
    32a4:	49004741 	stmdbmi	r0, {r0, r6, r8, r9, sl, lr}
    32a8:	5f474457 	svcpl	0x00474457
    32ac:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    32b0:	5367616c 	cmnpl	r7, #108, 2
    32b4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    32b8:	57490073 	smlsldxpl	r0, r9, r3, r0
    32bc:	545f4744 	ldrbpl	r4, [pc], #-1860	; 32c4 <_Min_Stack_Size+0x30c4>
    32c0:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    32c4:	44006665 	strmi	r6, [r0], #-1637	; 0xfffff99b
    32c8:	434d4742 	movtmi	r4, #55106	; 0xd742
    32cc:	79545f55 	ldmdbvc	r4, {r0, r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    32d0:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    32d4:	682f0066 	stmdavs	pc!, {r1, r2, r5, r6}	; <UNPREDICTABLE>
    32d8:	2f656d6f 	svccs	0x00656d6f
    32dc:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    32e0:	542f7673 	strtpl	r7, [pc], #-1651	; 32e8 <_Min_Stack_Size+0x30e8>
    32e4:	41534144 	cmpmi	r3, r4, asr #2
    32e8:	4f492d54 	svcmi	0x00492d54
    32ec:	694c2f54 	stmdbvs	ip, {r2, r4, r6, r8, r9, sl, fp, sp}^
    32f0:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    32f4:	2f736569 	svccs	0x00736569
    32f8:	2f637273 	svccs	0x00637273
    32fc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3300:	30316632 	eorscc	r6, r1, r2, lsr r6
    3304:	62645f78 	rsbvs	r5, r4, #120, 30	; 0x1e0
    3308:	75636d67 	strbvc	r6, [r3, #-3431]!	; 0xfffff299
    330c:	4400632e 	strmi	r6, [r0], #-814	; 0xfffffcd2
    3310:	434d4742 	movtmi	r4, #55106	; 0xd742
    3314:	6f435f55 	svcvs	0x00435f55
    3318:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    331c:	47424400 	strbmi	r4, [r2, -r0, lsl #8]
    3320:	5f55434d 	svcpl	0x0055434d
    3324:	52746547 	rsbspl	r6, r4, #297795584	; 0x11c00000
    3328:	44495645 	strbmi	r5, [r9], #-1605	; 0xfffff9bb
    332c:	47424400 	strbmi	r4, [r2, -r0, lsl #8]
    3330:	5f55434d 	svcpl	0x0055434d
    3334:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3338:	49006870 	stmdbmi	r0, {r4, r5, r6, fp, sp, lr}
    333c:	444f4344 	strbmi	r4, [pc], #-836	; 3344 <_Min_Stack_Size+0x3144>
    3340:	42440045 	submi	r0, r4, #69	; 0x45
    3344:	55434d47 	strbpl	r4, [r3, #-3399]	; 0xfffff2b9
    3348:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    334c:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
    3350:	57500044 	ldrbpl	r0, [r0, -r4, asr #32]
    3354:	6e455f52 	mcrvs	15, 2, r5, cr5, cr2, {2}
    3358:	53726574 	cmnpl	r2, #116, 10	; 0x1d000000
    335c:	4d504f54 	ldclmi	15, cr4, [r0, #-336]	; 0xfffffeb0
    3360:	0065646f 	rsbeq	r6, r5, pc, ror #8
    3364:	5f525750 	svcpl	0x00525750
    3368:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    336c:	52575000 	subspl	r5, r7, #0
    3370:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    3374:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    3378:	52575000 	subspl	r5, r7, #0
    337c:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
    3380:	4170756b 	cmnmi	r0, fp, ror #10
    3384:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
    3388:	646d4373 	strbtvs	r4, [sp], #-883	; 0xfffffc8d
    338c:	52575000 	subspl	r5, r7, #0
    3390:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    3394:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    3398:	50006761 	andpl	r6, r0, r1, ror #14
    339c:	445f5257 	ldrbmi	r5, [pc], #-599	; 33a4 <_Min_Stack_Size+0x31a4>
    33a0:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    33a4:	57500074 			; <UNDEFINED> instruction: 0x57500074
    33a8:	54535f52 	ldrbpl	r5, [r3], #-3922	; 0xfffff0ae
    33ac:	6e45504f 	cdpvs	0, 4, cr5, cr5, cr15, {2}
    33b0:	00797274 	rsbseq	r7, r9, r4, ror r2
    33b4:	5f525750 	svcpl	0x00525750
    33b8:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    33bc:	69507055 	ldmdbvs	r0, {r0, r2, r4, r6, ip, sp, lr}^
    33c0:	646d436e 	strbtvs	r4, [sp], #-878	; 0xfffffc92
    33c4:	52575000 	subspl	r5, r7, #0
    33c8:	6765525f 			; <UNDEFINED> instruction: 0x6765525f
    33cc:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
    33d0:	2f00726f 	svccs	0x0000726f
    33d4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    33d8:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    33dc:	2f767375 	svccs	0x00767375
    33e0:	53414454 	movtpl	r4, #5204	; 0x1454
    33e4:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    33e8:	4c2f544f 	cfstrsmi	mvf5, [pc], #-316	; 32b4 <_Min_Stack_Size+0x30b4>
    33ec:	61726269 	cmnvs	r2, r9, ror #4
    33f0:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    33f4:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    33f8:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    33fc:	31663233 	cmncc	r6, r3, lsr r2
    3400:	705f7830 	subsvc	r7, pc, r0, lsr r8	; <UNPREDICTABLE>
    3404:	632e7277 			; <UNDEFINED> instruction: 0x632e7277
    3408:	52575000 	subspl	r5, r7, #0
    340c:	4456505f 	ldrbmi	r5, [r6], #-95	; 0xffffffa1
    3410:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3414:	5f525750 	svcpl	0x00525750
    3418:	4c445650 	mcrrmi	6, 5, r5, r4, cr0
    341c:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
    3420:	52575000 	subspl	r5, r7, #0
    3424:	4456505f 	ldrbmi	r5, [r6], #-95	; 0xffffffa1
    3428:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
    342c:	6e6f436c 	cdpvs	3, 6, cr4, cr15, cr12, {3}
    3430:	00676966 	rsbeq	r6, r7, r6, ror #18
    3434:	46575f5f 	usaxmi	r5, r7, pc	; <UNPREDICTABLE>
    3438:	5f5f0045 	svcpl	0x005f0045
    343c:	00494657 	subeq	r4, r9, r7, asr r6
    3440:	5f525750 	svcpl	0x00525750
    3444:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
    3448:	41545372 	cmpmi	r4, r2, ror r3
    344c:	5942444e 	stmdbpl	r2, {r1, r2, r3, r6, sl, lr}^
    3450:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    3454:	52575000 	subspl	r5, r7, #0
    3458:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    345c:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    3460:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    3464:	42007375 	andmi	r7, r0, #-738197503	; 0xd4000001
    3468:	545f504b 	ldrbpl	r5, [pc], #-75	; 3470 <_Min_Stack_Size+0x3270>
    346c:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    3470:	2f006665 	svccs	0x00006665
    3474:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3478:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    347c:	2f767375 	svccs	0x00767375
    3480:	53414454 	movtpl	r4, #5204	; 0x1454
    3484:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    3488:	4c2f544f 	cfstrsmi	mvf5, [pc], #-316	; 3354 <_Min_Stack_Size+0x3154>
    348c:	61726269 	cmnvs	r2, r9, ror #4
    3490:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    3494:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    3498:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    349c:	31663233 	cmncc	r6, r3, lsr r2
    34a0:	625f7830 	subsvs	r7, pc, #48, 16	; 0x300000
    34a4:	632e706b 			; <UNDEFINED> instruction: 0x632e706b
    34a8:	53455200 	movtpl	r5, #20992	; 0x5200
    34ac:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    34b0:	00303444 	eorseq	r3, r0, r4, asr #8
    34b4:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    34b8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    34bc:	52003134 	andpl	r3, r0, #52, 2
    34c0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    34c4:	34444556 	strbcc	r4, [r4], #-1366	; 0xfffffaaa
    34c8:	45520032 	ldrbmi	r0, [r2, #-50]	; 0xffffffce
    34cc:	56524553 			; <UNDEFINED> instruction: 0x56524553
    34d0:	33344445 	teqcc	r4, #1157627904	; 0x45000000
    34d4:	53455200 	movtpl	r5, #20992	; 0x5200
    34d8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    34dc:	00343444 	eorseq	r3, r4, r4, asr #8
    34e0:	5f504b42 	svcpl	0x00504b42
    34e4:	42005244 	andmi	r5, r0, #68, 4	; 0x40000004
    34e8:	445f504b 	ldrbmi	r5, [pc], #-75	; 34f0 <_Min_Stack_Size+0x32f0>
    34ec:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    34f0:	4b420074 	blmi	10836c8 <_Min_Stack_Size+0x10834c8>
    34f4:	65525f50 	ldrbvs	r5, [r2, #-3920]	; 0xfffff0b0
    34f8:	61426461 	cmpvs	r2, r1, ror #8
    34fc:	70756b63 	rsbsvc	r6, r5, r3, ror #22
    3500:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    3504:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    3508:	504b4200 	subpl	r4, fp, r0, lsl #4
    350c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    3510:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    3514:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    3518:	42007375 	andmi	r7, r0, #-738197503	; 0xd4000001
    351c:	525f504b 	subspl	r5, pc, #75	; 0x4b
    3520:	754f4354 	strbvc	r4, [pc, #-852]	; 31d4 <_Min_Stack_Size+0x2fd4>
    3524:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    3528:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    352c:	42006769 	andmi	r6, r0, #27525120	; 0x1a40000
    3530:	475f504b 	ldrbmi	r5, [pc, -fp, asr #32]
    3534:	54497465 	strbpl	r7, [r9], #-1125	; 0xfffffb9b
    3538:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    353c:	42007375 	andmi	r7, r0, #-738197503	; 0xd4000001
    3540:	435f504b 	cmpmi	pc, #75	; 0x4b
    3544:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    3548:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    354c:	504b4200 	subpl	r4, fp, r0, lsl #4
    3550:	6d61545f 	cfstrdvs	mvd5, [r1, #-380]!	; 0xfffffe84
    3554:	50726570 	rsbspl	r6, r2, r0, ror r5
    3558:	654c6e69 	strbvs	r6, [ip, #-3689]	; 0xfffff197
    355c:	436c6576 	cmnmi	ip, #494927872	; 0x1d800000
    3560:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3564:	4b420067 	blmi	1083708 <_Min_Stack_Size+0x1083508>
    3568:	54525f50 	ldrbpl	r5, [r2], #-3920	; 0xfffff0b0
    356c:	74754f43 	ldrbtvc	r4, [r5], #-3907	; 0xfffff0bd
    3570:	53747570 	cmnpl	r4, #112, 10	; 0x1c000000
    3574:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    3578:	4b420065 	blmi	1083714 <_Min_Stack_Size+0x1083514>
    357c:	65535f50 	ldrbvs	r5, [r3, #-3920]	; 0xfffff0b0
    3580:	43545274 	cmpmi	r4, #116, 4	; 0x40000007
    3584:	696c6143 	stmdbvs	ip!, {r0, r1, r6, r8, sp, lr}^
    3588:	74617262 	strbtvc	r7, [r1], #-610	; 0xfffffd9e
    358c:	566e6f69 	strbtpl	r6, [lr], -r9, ror #30
    3590:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3594:	504b4200 	subpl	r4, fp, r0, lsl #4
    3598:	6d61545f 	cfstrdvs	mvd5, [r1, #-380]!	; 0xfffffe84
    359c:	50726570 	rsbspl	r6, r2, r0, ror r5
    35a0:	654c6e69 	strbvs	r6, [ip, #-3689]	; 0xfffff197
    35a4:	006c6576 	rsbeq	r6, ip, r6, ror r5
    35a8:	31345244 	teqcc	r4, r4, asr #4
    35ac:	31524400 	cmpcc	r2, r0, lsl #8
    35b0:	52440030 	subpl	r0, r4, #48	; 0x30
    35b4:	44003131 	strmi	r3, [r0], #-305	; 0xfffffecf
    35b8:	00323152 	eorseq	r3, r2, r2, asr r1
    35bc:	33315244 	teqcc	r1, #68, 4	; 0x40000004
    35c0:	31524400 	cmpcc	r2, r0, lsl #8
    35c4:	52440034 	subpl	r0, r4, #52	; 0x34
    35c8:	44003531 	strmi	r3, [r0], #-1329	; 0xfffffacf
    35cc:	00363152 	eorseq	r3, r6, r2, asr r1
    35d0:	37315244 	ldrcc	r5, [r1, -r4, asr #4]!
    35d4:	31524400 	cmpcc	r2, r0, lsl #8
    35d8:	52440038 	subpl	r0, r4, #56	; 0x38
    35dc:	42003931 	andmi	r3, r0, #802816	; 0xc4000
    35e0:	545f504b 	ldrbpl	r5, [pc], #-75	; 35e8 <_Min_Stack_Size+0x33e8>
    35e4:	65706d61 	ldrbvs	r6, [r0, #-3425]!	; 0xfffff29f
    35e8:	6e695072 	mcrvs	0, 3, r5, cr9, cr2, {3}
    35ec:	00646d43 	rsbeq	r6, r4, r3, asr #26
    35f0:	30325244 	eorscc	r5, r2, r4, asr #4
    35f4:	32524400 	subscc	r4, r2, #0, 8
    35f8:	52440031 	subpl	r0, r4, #49	; 0x31
    35fc:	44003232 	strmi	r3, [r0], #-562	; 0xfffffdce
    3600:	00333252 	eorseq	r3, r3, r2, asr r2
    3604:	34325244 	ldrtcc	r5, [r2], #-580	; 0xfffffdbc
    3608:	32524400 	subscc	r4, r2, #0, 8
    360c:	52440035 	subpl	r0, r4, #53	; 0x35
    3610:	44003632 	strmi	r3, [r0], #-1586	; 0xfffff9ce
    3614:	00373252 	eorseq	r3, r7, r2, asr r2
    3618:	38325244 	ldmdacc	r2!, {r2, r6, r9, ip, lr}
    361c:	32524400 	subscc	r4, r2, #0, 8
    3620:	45520039 	ldrbmi	r0, [r2, #-57]	; 0xffffffc7
    3624:	56524553 			; <UNDEFINED> instruction: 0x56524553
    3628:	35344445 	ldrcc	r4, [r4, #-1093]!	; 0xfffffbbb
    362c:	33524400 	cmpcc	r2, #0, 8
    3630:	52440030 	subpl	r0, r4, #48	; 0x30
    3634:	44003133 	strmi	r3, [r0], #-307	; 0xfffffecd
    3638:	00323352 	eorseq	r3, r2, r2, asr r3
    363c:	33335244 	teqcc	r3, #68, 4	; 0x40000004
    3640:	33524400 	cmpcc	r2, #0, 8
    3644:	52440034 	subpl	r0, r4, #52	; 0x34
    3648:	44003533 	strmi	r3, [r0], #-1331	; 0xfffffacd
    364c:	00363352 	eorseq	r3, r6, r2, asr r3
    3650:	37335244 	ldrcc	r5, [r3, -r4, asr #4]!
    3654:	33524400 	cmpcc	r2, #0, 8
    3658:	52440038 	subpl	r0, r4, #56	; 0x38
    365c:	42003933 	andmi	r3, r0, #835584	; 0xcc000
    3660:	435f504b 	cmpmi	pc, #75	; 0x4b
    3664:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    3668:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0xfffffbb7
    366c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    3670:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
    3674:	504b4200 	subpl	r4, fp, r0, lsl #4
    3678:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    367c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3680:	52440067 	subpl	r0, r4, #103	; 0x67
    3684:	44003034 	strmi	r3, [r0], #-52	; 0xffffffcc
    3688:	00323452 	eorseq	r3, r2, r2, asr r4
    368c:	43435452 	movtmi	r5, #13394	; 0x3452
    3690:	4b420052 	blmi	10837e0 <_Min_Stack_Size+0x10835e0>
    3694:	72575f50 	subsvc	r5, r7, #80, 30	; 0x140
    3698:	42657469 	rsbmi	r7, r5, #1761607680	; 0x69000000
    369c:	756b6361 	strbvc	r6, [fp, #-865]!	; 0xfffffc9f
    36a0:	67655270 			; <UNDEFINED> instruction: 0x67655270
    36a4:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
    36a8:	45520072 	ldrbmi	r0, [r2, #-114]	; 0xffffff8e
    36ac:	56524553 			; <UNDEFINED> instruction: 0x56524553
    36b0:	30324445 	eorscc	r4, r2, r5, asr #8
    36b4:	53455200 	movtpl	r5, #20992	; 0x5200
    36b8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    36bc:	00313244 	eorseq	r3, r1, r4, asr #4
    36c0:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    36c4:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    36c8:	52003232 	andpl	r3, r0, #536870915	; 0x20000003
    36cc:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    36d0:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
    36d4:	45520033 	ldrbmi	r0, [r2, #-51]	; 0xffffffcd
    36d8:	56524553 			; <UNDEFINED> instruction: 0x56524553
    36dc:	34324445 	ldrtcc	r4, [r2], #-1093	; 0xfffffbbb
    36e0:	53455200 	movtpl	r5, #20992	; 0x5200
    36e4:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    36e8:	00353244 	eorseq	r3, r5, r4, asr #4
    36ec:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    36f0:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    36f4:	52003632 	andpl	r3, r0, #52428800	; 0x3200000
    36f8:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    36fc:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
    3700:	45520037 	ldrbmi	r0, [r2, #-55]	; 0xffffffc9
    3704:	56524553 			; <UNDEFINED> instruction: 0x56524553
    3708:	38324445 	ldmdacc	r2!, {r0, r2, r6, sl, lr}
    370c:	53455200 	movtpl	r5, #20992	; 0x5200
    3710:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    3714:	00393244 	eorseq	r3, r9, r4, asr #4
    3718:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    371c:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    3720:	52003033 	andpl	r3, r0, #51	; 0x33
    3724:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    3728:	33444556 	movtcc	r4, #17750	; 0x4556
    372c:	45520031 	ldrbmi	r0, [r2, #-49]	; 0xffffffcf
    3730:	56524553 			; <UNDEFINED> instruction: 0x56524553
    3734:	32334445 	eorscc	r4, r3, #1157627904	; 0x45000000
    3738:	53455200 	movtpl	r5, #20992	; 0x5200
    373c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    3740:	00333344 	eorseq	r3, r3, r4, asr #6
    3744:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    3748:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    374c:	52003433 	andpl	r3, r0, #855638016	; 0x33000000
    3750:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    3754:	33444556 	movtcc	r4, #17750	; 0x4556
    3758:	45520035 	ldrbmi	r0, [r2, #-53]	; 0xffffffcb
    375c:	56524553 			; <UNDEFINED> instruction: 0x56524553
    3760:	36334445 	ldrtcc	r4, [r3], -r5, asr #8
    3764:	53455200 	movtpl	r5, #20992	; 0x5200
    3768:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    376c:	00373344 	eorseq	r3, r7, r4, asr #6
    3770:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    3774:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    3778:	52003833 	andpl	r3, r0, #3342336	; 0x330000
    377c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    3780:	33444556 	movtcc	r4, #17750	; 0x4556
    3784:	54520039 	ldrbpl	r0, [r2], #-57	; 0xffffffc7
    3788:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xfffff0bd
    378c:	65725074 	ldrbvs	r5, [r2, #-116]!	; 0xffffff8c
    3790:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    3794:	2f007265 	svccs	0x00007265
    3798:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    379c:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    37a0:	2f767375 	svccs	0x00767375
    37a4:	53414454 	movtpl	r4, #5204	; 0x1454
    37a8:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    37ac:	4c2f544f 	cfstrsmi	mvf5, [pc], #-316	; 3678 <_Min_Stack_Size+0x3478>
    37b0:	61726269 	cmnvs	r2, r9, ror #4
    37b4:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    37b8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    37bc:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    37c0:	31663233 	cmncc	r6, r3, lsr r2
    37c4:	725f7830 	subsvc	r7, pc, #48, 16	; 0x300000
    37c8:	632e6374 			; <UNDEFINED> instruction: 0x632e6374
    37cc:	43545200 	cmpmi	r4, #0, 4
    37d0:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    37d4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    37d8:	49440067 	stmdbmi	r4, {r0, r1, r2, r5, r6}^
    37dc:	44004856 	strmi	r4, [r0], #-2134	; 0xfffff7aa
    37e0:	004c5649 	subeq	r5, ip, r9, asr #12
    37e4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    37e8:	56726574 			; <UNDEFINED> instruction: 0x56726574
    37ec:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    37f0:	43545200 	cmpmi	r4, #0, 4
    37f4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    37f8:	74535449 	ldrbvc	r5, [r3], #-1097	; 0xfffffbb7
    37fc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    3800:	43545200 	cmpmi	r4, #0, 4
    3804:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3808:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    380c:	00726574 	rsbseq	r6, r2, r4, ror r5
    3810:	5f435452 	svcpl	0x00435452
    3814:	61656c43 	cmnvs	r5, r3, asr #24
    3818:	616c4672 	smcvs	50274	; 0xc462
    381c:	54520067 	ldrbpl	r0, [r2], #-103	; 0xffffff99
    3820:	4c465f43 	mcrrmi	15, 4, r5, r6, cr3
    3824:	52004741 	andpl	r4, r0, #17039360	; 0x1040000
    3828:	435f4354 	cmpmi	pc, #84, 6	; 0x50000001
    382c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    3830:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0xfffffbb7
    3834:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    3838:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
    383c:	43545200 	cmpmi	r4, #0, 4
    3840:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    3844:	726f4674 	rsbvc	r4, pc, #116, 12	; 0x7400000
    3848:	636e7953 	cmnvs	lr, #1359872	; 0x14c000
    384c:	006f7268 	rsbeq	r7, pc, r8, ror #4
    3850:	5f435452 	svcpl	0x00435452
    3854:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0xfffffab9
    3858:	64697669 	strbtvs	r7, [r9], #-1641	; 0xfffff997
    385c:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
    3860:	575f4354 			; <UNDEFINED> instruction: 0x575f4354
    3864:	46746961 	ldrbtmi	r6, [r4], -r1, ror #18
    3868:	614c726f 	cmpvs	ip, pc, ror #4
    386c:	61547473 	cmpvs	r4, r3, ror r4
    3870:	52006b73 	andpl	r6, r0, #117760	; 0x1cc00
    3874:	475f4354 			; <UNDEFINED> instruction: 0x475f4354
    3878:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    387c:	74536761 	ldrbvc	r6, [r3], #-1889	; 0xfffff89f
    3880:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    3884:	4c525000 	mrami	r5, r2, acc0
    3888:	52500048 	subspl	r0, r0, #72	; 0x48
    388c:	50004c4c 	andpl	r4, r0, ip, asr #24
    3890:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    3894:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    3898:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    389c:	6c410065 	mcrrvs	0, 6, r0, r1, cr5
    38a0:	566d7261 	strbtpl	r7, [sp], -r1, ror #4
    38a4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    38a8:	43545200 	cmpmi	r4, #0, 4
    38ac:	6978455f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, lr}^
    38b0:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    38b4:	4d676966 			; <UNDEFINED> instruction: 0x4d676966
    38b8:	0065646f 	rsbeq	r6, r5, pc, ror #8
    38bc:	5f435452 	svcpl	0x00435452
    38c0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    38c4:	00666544 	rsbeq	r6, r6, r4, asr #10
    38c8:	48544e43 	ldmdami	r4, {r0, r1, r6, r9, sl, fp, lr}^
    38cc:	43545200 	cmpmi	r4, #0, 4
    38d0:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    38d4:	72616c41 	rsbvc	r6, r1, #16640	; 0x4100
    38d8:	5452006d 	ldrbpl	r0, [r2], #-109	; 0xffffff93
    38dc:	6e455f43 	cdpvs	15, 4, cr5, cr5, cr3, {2}
    38e0:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    38e4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    38e8:	646f4d67 	strbtvs	r4, [pc], #-3431	; 38f0 <_Min_Stack_Size+0x36f0>
    38ec:	4e430065 	cdpmi	0, 4, cr0, cr3, cr5, {3}
    38f0:	52004c54 	andpl	r4, r0, #84, 24	; 0x5400
    38f4:	475f4354 			; <UNDEFINED> instruction: 0x475f4354
    38f8:	6f437465 	svcvs	0x00437465
    38fc:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
    3900:	4c410072 	mcrrmi	0, 7, r0, r1, cr2
    3904:	41004852 	tstmi	r0, r2, asr r8
    3908:	004c524c 	subeq	r5, ip, ip, asr #4
    390c:	5f435452 	svcpl	0x00435452
    3910:	44005449 	strmi	r5, [r0], #-1097	; 0xfffffbb7
    3914:	5f31414d 	svcpl	0x0031414d
    3918:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    391c:	356c656e 	strbcc	r6, [ip, #-1390]!	; 0xfffffa92
    3920:	5152495f 	cmppl	r2, pc, asr r9
    3924:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    3928:	0072656c 	rsbseq	r6, r2, ip, ror #10
    392c:	67617355 			; <UNDEFINED> instruction: 0x67617355
    3930:	75614665 	strbvc	r4, [r1, #-1637]!	; 0xfffff99b
    3934:	485f746c 	ldmdami	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3938:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    393c:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    3940:	5f324d49 	svcpl	0x00324d49
    3944:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    3948:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    394c:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    3950:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    3954:	6f435f32 	svcvs	0x00435f32
    3958:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
    395c:	50530072 	subspl	r0, r3, r2, ror r0
    3960:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    3964:	61485152 	cmpvs	r8, r2, asr r1
    3968:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    396c:	69740072 	ldmdbvs	r4!, {r1, r4, r5, r6}^
    3970:	6553656d 	ldrbvs	r6, [r3, #-1389]	; 0xfffffa93
    3974:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
    3978:	72614800 	rsbvc	r4, r1, #0, 16
    397c:	75614664 	strbvc	r4, [r1, #-1636]!	; 0xfffff99c
    3980:	485f746c 	ldmdami	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3984:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    3988:	2f007265 	svccs	0x00007265
    398c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3990:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    3994:	2f767375 	svccs	0x00767375
    3998:	53414454 	movtpl	r4, #5204	; 0x1454
    399c:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    39a0:	552f544f 	strpl	r5, [pc, #-1103]!	; 3559 <_Min_Stack_Size+0x3359>
    39a4:	2f726573 	svccs	0x00726573
    39a8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    39ac:	30316632 	eorscc	r6, r1, r2, lsr r6
    39b0:	74695f78 	strbtvc	r5, [r9], #-3960	; 0xfffff088
    39b4:	4900632e 	stmdbmi	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
    39b8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    39bc:	5f6c6176 	svcpl	0x006c6176
    39c0:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    39c4:	00726574 	rsbseq	r6, r2, r4, ror r5
    39c8:	46737542 	ldrbtmi	r7, [r3], -r2, asr #10
    39cc:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    39d0:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
    39d4:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    39d8:	6d654d00 	stclvs	13, cr4, [r5, #-0]
    39dc:	616e614d 	cmnvs	lr, sp, asr #2
    39e0:	485f6567 	ldmdami	pc, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    39e4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    39e8:	4e007265 	cdpmi	2, 0, cr7, cr0, cr5, {3}
    39ec:	485f494d 	ldmdami	pc, {r0, r2, r3, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    39f0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    39f4:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
    39f8:	5f31414d 	svcpl	0x0031414d
    39fc:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    3a00:	336c656e 	cmncc	ip, #461373440	; 0x1b800000
    3a04:	5152495f 	cmppl	r2, pc, asr r9
    3a08:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    3a0c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    3a10:	5f425355 	svcpl	0x00425355
    3a14:	435f504c 	cmpmi	pc, #76	; 0x4c
    3a18:	5f314e41 	svcpl	0x00314e41
    3a1c:	5f305852 	svcpl	0x00305852
    3a20:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3a24:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    3a28:	43535f31 	cmpmi	r3, #49, 30	; 0xc4
    3a2c:	52495f45 	subpl	r5, r9, #276	; 0x114
    3a30:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
    3a34:	5f31414d 	svcpl	0x0031414d
    3a38:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    3a3c:	376c656e 	strbcc	r6, [ip, -lr, ror #10]!
    3a40:	5152495f 	cmppl	r2, pc, asr r9
    3a44:	3249006e 	subcc	r0, r9, #110	; 0x6e
    3a48:	455f3243 	ldrbmi	r3, [pc, #-579]	; 380d <_Min_Stack_Size+0x360d>
    3a4c:	52495f52 	subpl	r5, r9, #328	; 0x148
    3a50:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
    3a54:	5f74696e 	svcpl	0x0074696e
    3a58:	326d6974 	rsbcc	r6, sp, #116, 18	; 0x1d0000
    3a5c:	5f736d5f 	svcpl	0x00736d5f
    3a60:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    3a64:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    3a68:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    3a6c:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
    3a70:	5f31414d 	svcpl	0x0031414d
    3a74:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    3a78:	326c656e 	rsbcc	r6, ip, #461373440	; 0x1b800000
    3a7c:	5152495f 	cmppl	r2, pc, asr r9
    3a80:	4c46006e 	mcrrmi	0, 6, r0, r6, cr14
    3a84:	5f485341 	svcpl	0x00485341
    3a88:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3a8c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    3a90:	495f3049 	ldmdbmi	pc, {r0, r3, r6, ip, sp}^	; <UNPREDICTABLE>
    3a94:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3a98:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    3a9c:	315f3531 	cmpcc	pc, r1, lsr r5	; <UNPREDICTABLE>
    3aa0:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
    3aa4:	50006e51 	andpl	r6, r0, r1, asr lr
    3aa8:	53646e65 	cmnpl	r4, #1616	; 0x650
    3aac:	52495f56 	subpl	r5, r9, #344	; 0x158
    3ab0:	53006e51 	movwpl	r6, #3665	; 0xe51
    3ab4:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    3ab8:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    3abc:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    3ac0:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    3ac4:	43435200 	movtmi	r5, #12800	; 0x3200
    3ac8:	5152495f 	cmppl	r2, pc, asr r9
    3acc:	654d006e 	strbvs	r0, [sp, #-110]	; 0xffffff92
    3ad0:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3ad4:	616e614d 	cmnvs	lr, sp, asr #2
    3ad8:	656d6567 	strbvs	r6, [sp, #-1383]!	; 0xfffffa99
    3adc:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3ae0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3ae4:	314d4954 	cmpcc	sp, r4, asr r9
    3ae8:	4b52425f 	blmi	149446c <_Min_Stack_Size+0x149426c>
    3aec:	5152495f 	cmppl	r2, pc, asr r9
    3af0:	5053006e 	subspl	r0, r3, lr, rrx
    3af4:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    3af8:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3afc:	31414d44 	cmpcc	r1, r4, asr #26
    3b00:	6168435f 	cmnvs	r8, pc, asr r3
    3b04:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    3b08:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    3b0c:	43006e51 	movwmi	r6, #3665	; 0xe51
    3b10:	5f314e41 	svcpl	0x00314e41
    3b14:	5f315852 	svcpl	0x00315852
    3b18:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3b1c:	42535500 	subsmi	r5, r3, #0, 10
    3b20:	5f50485f 	svcpl	0x0050485f
    3b24:	314e4143 	cmpcc	lr, r3, asr #2
    3b28:	5f58545f 	svcpl	0x0058545f
    3b2c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3b30:	41535500 	cmpmi	r3, r0, lsl #10
    3b34:	5f325452 	svcpl	0x00325452
    3b38:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3b3c:	696e4900 	stmdbvs	lr!, {r8, fp, lr}^
    3b40:	54525f74 	ldrbpl	r5, [r2], #-3956	; 0xfffff08c
    3b44:	4c4f0043 	mcrrmi	0, 4, r0, pc, cr3
    3b48:	475f4445 	ldrbmi	r4, [pc, -r5, asr #8]
    3b4c:	5f4f4950 	svcpl	0x004f4950
    3b50:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    3b54:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    3b58:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    3b5c:	58450065 	stmdapl	r5, {r0, r2, r5, r6}^
    3b60:	5f324954 	svcpl	0x00324954
    3b64:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3b68:	43324900 	teqmi	r2, #0, 18
    3b6c:	56455f32 			; <UNDEFINED> instruction: 0x56455f32
    3b70:	5152495f 	cmppl	r2, pc, asr r9
    3b74:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    3b78:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
    3b7c:	6e6e6168 	powvsez	f6, f6, #0.0
    3b80:	5f366c65 	svcpl	0x00366c65
    3b84:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3b88:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    3b8c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    3b90:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    3b94:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    3b98:	00657275 	rsbeq	r7, r5, r5, ror r2
    3b9c:	334d4954 	movtcc	r4, #55636	; 0xd954
    3ba0:	5152495f 	cmppl	r2, pc, asr r9
    3ba4:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    3ba8:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
    3bac:	6e6e6168 	powvsez	f6, f6, #0.0
    3bb0:	5f316c65 	svcpl	0x00316c65
    3bb4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3bb8:	696e4900 	stmdbvs	lr!, {r8, fp, lr}^
    3bbc:	70735f74 	rsbsvc	r5, r3, r4, ror pc
    3bc0:	775f3169 	ldrbvc	r3, [pc, -r9, ror #2]
    3bc4:	30303535 	eorscc	r3, r0, r5, lsr r5
    3bc8:	454c4f00 	strbmi	r4, [ip, #-3840]	; 0xfffff100
    3bcc:	32495f44 	subcc	r5, r9, #68, 30	; 0x110
    3bd0:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    3bd4:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    3bd8:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    3bdc:	00657275 	rsbeq	r7, r5, r5, ror r2
    3be0:	57425355 	smlsldpl	r5, r2, r5, r3
    3be4:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xfffff49f
    3be8:	52495f70 	subpl	r5, r9, #112, 30	; 0x1c0
    3bec:	57006e51 	smlsdpl	r0, r1, lr, r6
    3bf0:	5f474457 	svcpl	0x00474457
    3bf4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3bf8:	696e4900 	stmdbvs	lr!, {r8, fp, lr}^
    3bfc:	656c5f74 	strbvs	r5, [ip, #-3956]!	; 0xfffff08c
    3c00:	6f6c5f64 	svcvs	0x006c5f64
    3c04:	42006b63 	andmi	r6, r0, #101376	; 0x18c00
    3c08:	61467375 	hvcvs	26421	; 0x6735
    3c0c:	5f746c75 	svcpl	0x00746c75
    3c10:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3c14:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    3c18:	495f3449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
    3c1c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3c20:	5f445650 	svcpl	0x00445650
    3c24:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3c28:	414d4400 	cmpmi	sp, r0, lsl #8
    3c2c:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
    3c30:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    3c34:	495f336c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    3c38:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3c3c:	31433249 	cmpcc	r3, r9, asr #4
    3c40:	5f56455f 	svcpl	0x0056455f
    3c44:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3c48:	696e4900 	stmdbvs	lr!, {r8, fp, lr}^
    3c4c:	32695f74 	rsbcc	r5, r9, #116, 30	; 0x1d0
    3c50:	6f5f3163 	svcvs	0x005f3163
    3c54:	0064656c 	rsbeq	r6, r4, ip, ror #10
    3c58:	314d4954 	cmpcc	sp, r4, asr r9
    3c5c:	5f50555f 	svcpl	0x0050555f
    3c60:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3c64:	43545200 	cmpmi	r4, #0, 4
    3c68:	5152495f 	cmppl	r2, pc, asr r9
    3c6c:	5355006e 	cmppl	r5, #110	; 0x6e
    3c70:	31545241 	cmpcc	r4, r1, asr #4
    3c74:	5152495f 	cmppl	r2, pc, asr r9
    3c78:	6f4e006e 	svcvs	0x004e006e
    3c7c:	73614d6e 	cmnvc	r1, #7040	; 0x1b80
    3c80:	6c62616b 	stfvse	f6, [r2], #-428	; 0xfffffe54
    3c84:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
    3c88:	5152495f 	cmppl	r2, pc, asr r9
    3c8c:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    3c90:	435f314d 	cmpmi	pc, #1073741843	; 0x40000013
    3c94:	52495f43 	subpl	r5, r9, #268	; 0x10c
    3c98:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
    3c9c:	31495458 	cmpcc	r9, r8, asr r4
    3ca0:	5152495f 	cmppl	r2, pc, asr r9
    3ca4:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    3ca8:	545f314d 	ldrbpl	r3, [pc], #-333	; 3cb0 <_Min_Stack_Size+0x3ab0>
    3cac:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
    3cb0:	495f4d4f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    3cb4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3cb8:	31433249 	cmpcc	r3, r9, asr #4
    3cbc:	5f52455f 	svcpl	0x0052455f
    3cc0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3cc4:	73795300 	cmnvc	r9, #0, 6
    3cc8:	6b636954 	blvs	18de220 <_Min_Stack_Size+0x18de020>
    3ccc:	5152495f 	cmppl	r2, pc, asr r9
    3cd0:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    3cd4:	495f324d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    3cd8:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3cdc:	5f4d4954 	svcpl	0x004d4954
    3ce0:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    3ce4:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0xfffffebe
    3ce8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    3cec:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    3cf0:	65440065 	strbvs	r0, [r4, #-101]	; 0xffffff9b
    3cf4:	4d677562 	cfstr64mi	mvdx7, [r7, #-392]!	; 0xfffffe78
    3cf8:	74696e6f 	strbtvc	r6, [r9], #-3695	; 0xfffff191
    3cfc:	495f726f 	ldmdbmi	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    3d00:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3d04:	67617355 			; <UNDEFINED> instruction: 0x67617355
    3d08:	75614665 	strbvc	r4, [r1, #-1637]!	; 0xfffff99b
    3d0c:	495f746c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3d10:	006e5152 	rsbeq	r5, lr, r2, asr r1
    3d14:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    3d18:	5f355f39 	svcpl	0x00355f39
    3d1c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3d20:	43565300 	cmpmi	r6, #0, 6
    3d24:	5f6c6c61 	svcpl	0x006c6c61
    3d28:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3d2c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    3d30:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
    3d34:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
    3d38:	5f31414d 	svcpl	0x0031414d
    3d3c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    3d40:	356c656e 	strbcc	r6, [ip, #-1390]!	; 0xfffffa92
    3d44:	5152495f 	cmppl	r2, pc, asr r9
    3d48:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
    3d4c:	5f334954 	svcpl	0x00334954
    3d50:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3d54:	696e4900 	stmdbvs	lr!, {r8, fp, lr}^
    3d58:	77695f74 			; <UNDEFINED> instruction: 0x77695f74
    3d5c:	725f6764 	subsvc	r6, pc, #100, 14	; 0x1900000
    3d60:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    3d64:	43444100 	movtmi	r4, #16640	; 0x4100
    3d68:	5f325f31 	svcpl	0x00325f31
    3d6c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3d70:	6f682f00 	svcvs	0x00682f00
    3d74:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    3d78:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    3d7c:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    3d80:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    3d84:	544f492d 	strbpl	r4, [pc], #-2349	; 3d8c <_Min_Stack_Size+0x3b8c>
    3d88:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
    3d8c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    3d90:	61697469 	cmnvs	r9, r9, ror #8
    3d94:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
    3d98:	5500632e 	strpl	r6, [r0, #-814]	; 0xfffffcd2
    3d9c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    3da0:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    3da4:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
    3da8:	45504d41 	ldrbmi	r4, [r0, #-3393]	; 0xfffff2bf
    3dac:	52495f52 	subpl	r5, r9, #328	; 0x148
    3db0:	52006e51 	andpl	r6, r0, #1296	; 0x510
    3db4:	6c414354 	mcrrvs	3, 5, r4, r1, cr4
    3db8:	5f6d7261 	svcpl	0x006d7261
    3dbc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    3dc0:	61547600 	cmpvs	r4, r0, lsl #12
    3dc4:	4c5f6b73 	mrrcmi	11, 7, r6, pc, cr3	; <UNPREDICTABLE>
    3dc8:	4f6b636f 	svcmi	0x006b636f
    3dcc:	6573006e 	ldrbvs	r0, [r3, #-110]!	; 0xffffff92
    3dd0:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
    3dd4:	5f797261 	svcpl	0x00797261
    3dd8:	5f736e64 	svcpl	0x00736e64
    3ddc:	76726573 			; <UNDEFINED> instruction: 0x76726573
    3de0:	70007265 	andvc	r7, r0, r5, ror #4
    3de4:	77737361 	ldrbvc	r7, [r3, -r1, ror #6]!
    3de8:	0064726f 	rsbeq	r7, r4, pc, ror #4
    3dec:	70636864 	rsbvc	r6, r3, r4, ror #16
    3df0:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
    3df4:	4e6c7500 	cdpmi	5, 6, cr7, cr12, cr0, {0}
    3df8:	41427765 	cmpmi	r2, r5, ror #14
    3dfc:	52504553 	subspl	r4, r0, #348127232	; 0x14c00000
    3e00:	75510049 	ldrbvc	r0, [r1, #-73]	; 0xffffffb7
    3e04:	48657565 	stmdami	r5!, {r0, r2, r5, r6, r8, sl, ip, sp, lr}^
    3e08:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    3e0c:	00745f65 	rsbseq	r5, r4, r5, ror #30
    3e10:	61656c63 	cmnvs	r5, r3, ror #24
    3e14:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    3e18:	6f697373 	svcvs	0x00697373
    3e1c:	716d006e 	cmnvc	sp, lr, rrx
    3e20:	625f7474 	subsvs	r7, pc, #116, 8	; 0x74000000
    3e24:	656b6f72 	strbvs	r6, [fp, #-3954]!	; 0xfffff08e
    3e28:	61685f72 	smcvs	34290	; 0x85f2
    3e2c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    3e30:	7700745f 	smlsdvc	r0, pc, r4, r7	; <UNPREDICTABLE>
    3e34:	68637a69 	stmdavs	r3!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
    3e38:	735f7069 	cmpvc	pc, #105	; 0x69
    3e3c:	63656c65 	cmnvs	r5, #25856	; 0x6500
    3e40:	6f6c0074 	svcvs	0x006c0074
    3e44:	735f6b63 	cmpvc	pc, #101376	; 0x18c00
    3e48:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    3e4c:	6f680073 	svcvs	0x00680073
    3e50:	616e7473 	smcvs	59203	; 0xe743
    3e54:	7300656d 	movwvc	r6, #1389	; 0x56d
    3e58:	656b636f 	strbvs	r6, [fp, #-879]!	; 0xfffffc91
    3e5c:	636f4c74 	cmnvs	pc, #116, 24	; 0x7400
    3e60:	6864006b 	stmdavs	r4!, {r0, r1, r3, r5, r6}^
    3e64:	6c437063 	mcrrvs	0, 6, r7, r3, cr3
    3e68:	746e6569 	strbtvc	r6, [lr], #-1385	; 0xfffffa97
    3e6c:	6b736154 	blvs	1cdc3c4 <_Min_Stack_Size+0x1cdc1c4>
    3e70:	6f682f00 	svcvs	0x00682f00
    3e74:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    3e78:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    3e7c:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    3e80:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    3e84:	544f492d 	strbpl	r4, [pc], #-2349	; 3e8c <_Min_Stack_Size+0x3c8c>
    3e88:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
    3e8c:	616d2f72 	smcvs	54002	; 0xd2f2
    3e90:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
    3e94:	73615400 	cmnvc	r1, #0, 8
    3e98:	6e61486b 	cdpvs	8, 6, cr4, cr1, cr11, {3}
    3e9c:	5f656c64 	svcpl	0x00656c64
    3ea0:	6c6f0074 	stclvs	0, cr0, [pc], #-464	; 3cd8 <_Min_Stack_Size+0x3ad8>
    3ea4:	61546465 	cmpvs	r4, r5, ror #8
    3ea8:	54006b73 	strpl	r6, [r0], #-2931	; 0xfffff48d
    3eac:	546b6369 	strbtpl	r6, [fp], #-873	; 0xfffffc97
    3eb0:	5f657079 	svcpl	0x00657079
    3eb4:	616d0074 	smcvs	53252	; 0xd004
    3eb8:	61546e69 	cmpvs	r4, r9, ror #28
    3ebc:	6d006b73 	vstrvs	d6, [r0, #-460]	; 0xfffffe34
    3ec0:	5f747471 	svcpl	0x00747471
    3ec4:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
    3ec8:	6361705f 	cmnvs	r1, #95	; 0x5f
    3ecc:	0074656b 	rsbseq	r6, r4, fp, ror #10
    3ed0:	61547870 	cmpvs	r4, r0, ror r8
    3ed4:	74006b73 	strvc	r6, [r0], #-2931	; 0xfffff48d
    3ed8:	6c61746f 	cfstrdvs	mvd7, [r1], #-444	; 0xfffffe44
    3edc:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
    3ee0:	62007365 	andvs	r7, r0, #-1811939327	; 0x94000001
    3ee4:	656b6f72 	strbvs	r6, [fp, #-3954]!	; 0xfffff08e
    3ee8:	79620072 	stmdbvc	r2!, {r1, r4, r5, r6}^
    3eec:	5f736574 	svcpl	0x00736574
    3ef0:	64766372 	ldrbtvs	r6, [r6], #-882	; 0xfffffc8e
    3ef4:	696c6300 	stmdbvs	ip!, {r8, r9, sp, lr}^
    3ef8:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    3efc:	736d0064 	cmnvc	sp, #100	; 0x64
    3f00:	64695f67 	strbtvs	r5, [r9], #-3943	; 0xfffff099
    3f04:	7663725f 			; <UNDEFINED> instruction: 0x7663725f
    3f08:	50767000 	rsbspl	r7, r6, r0
    3f0c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    3f10:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
    3f14:	73750073 	cmnvc	r5, #115	; 0x73
    3f18:	616e7265 	cmnvs	lr, r5, ror #4
    3f1c:	6d00656d 	cfstr32vs	mvfx6, [r0, #-436]	; 0xfffffe4c
    3f20:	5f747471 	svcpl	0x00747471
    3f24:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    3f28:	6361705f 	cmnvs	r1, #95	; 0x5f
    3f2c:	0074656b 	rsbseq	r6, r4, fp, ror #10
    3f30:	70704176 	rsbsvc	r4, r0, r6, ror r1
    3f34:	6163696c 	cmnvs	r3, ip, ror #18
    3f38:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    3f3c:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
    3f40:	65764f6b 	ldrbvs	r4, [r6, #-3947]!	; 0xfffff095
    3f44:	6f6c6672 	svcvs	0x006c6672
    3f48:	6f6f4877 	svcvs	0x006f4877
    3f4c:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
    3f50:	715f6c6c 	cmpvc	pc, ip, ror #24
    3f54:	7600736f 	strvc	r7, [r0], -pc, ror #6
    3f58:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    3f5c:	73696152 	cmnvc	r9, #-2147483628	; 0x80000014
    3f60:	53414265 	movtpl	r4, #4709	; 0x1265
    3f64:	49525045 	ldmdbmi	r2, {r0, r2, r6, ip, lr}^
    3f68:	636f7300 	cmnvs	pc, #0, 6
    3f6c:	5f74656b 	svcpl	0x0074656b
    3f70:	6f666e69 	svcvs	0x00666e69
    3f74:	636f6c00 	cmnvs	pc, #0, 24
    3f78:	7361546b 	cmnvc	r1, #1795162112	; 0x6b000000
    3f7c:	5476006b 	ldrbtpl	r0, [r6], #-107	; 0xffffff95
    3f80:	5f6b7361 	svcpl	0x006b7361
    3f84:	70736944 	rsbsvc	r6, r3, r4, asr #18
    3f88:	0079616c 	rsbseq	r6, r9, ip, ror #2
    3f8c:	5454514d 	ldrbpl	r5, [r4], #-333	; 0xfffffeb3
    3f90:	4f52425f 	svcmi	0x0052425f
    3f94:	5f52454b 	svcpl	0x0052454b
    3f98:	73005049 	movwvc	r5, #73	; 0x49
    3f9c:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    3fa0:	70695f72 	rsbvc	r5, r9, r2, ror pc
    3fa4:	65755100 	ldrbvs	r5, [r5, #-256]!	; 0xffffff00
    3fa8:	65446575 	strbvs	r6, [r4, #-1397]	; 0xfffffa8b
    3fac:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
    3fb0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    3fb4:	7a697700 	bvc	1a61bbc <_Min_Stack_Size+0x1a619bc>
    3fb8:	70696863 	rsbvc	r6, r9, r3, ror #16
    3fbc:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    3fc0:	76006574 			; <UNDEFINED> instruction: 0x76006574
    3fc4:	6b736154 	blvs	1cdc51c <_Min_Stack_Size+0x1cdc31c>
    3fc8:	4348445f 	movtmi	r4, #33887	; 0x845f
    3fcc:	69770050 	ldmdbvs	r7!, {r4, r6}^
    3fd0:	725f6c6c 	subsvc	r6, pc, #108, 24	; 0x6c00
    3fd4:	69617465 	stmdbvs	r1!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    3fd8:	4467006e 	strbtmi	r0, [r7], #-110	; 0xffffff92
    3fdc:	42415441 	submi	r5, r1, #1090519040	; 0x41000000
    3fe0:	67004655 	smlsdvs	r0, r5, r6, r4
    3fe4:	4e5a4957 			; <UNDEFINED> instruction: 0x4e5a4957
    3fe8:	4e495445 	cdpmi	4, 4, cr5, cr9, cr5, {2}
    3fec:	77004f46 	strvc	r4, [r0, -r6, asr #30]
    3ff0:	68637a69 	stmdavs	r3!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
    3ff4:	645f7069 	ldrbvs	r7, [pc], #-105	; 3ffc <_Min_Stack_Size+0x3dfc>
    3ff8:	6c657365 	stclvs	3, cr7, [r5], #-404	; 0xfffffe6c
    3ffc:	00746365 	rsbseq	r6, r4, r5, ror #6
    4000:	616d6553 	cmnvs	sp, r3, asr r5
    4004:	726f6870 	rsbvc	r6, pc, #112, 16	; 0x700000
    4008:	6e614865 	cdpvs	8, 6, cr4, cr1, cr5, {3}
    400c:	5f656c64 	svcpl	0x00656c64
    4010:	54760074 	ldrbtpl	r0, [r6], #-116	; 0xffffff8c
    4014:	5f6b7361 	svcpl	0x006b7361
    4018:	6e69614d 	powvsem	f6, f1, #5.0
    401c:	6b737400 	blvs	1ce1024 <_Min_Stack_Size+0x1ce0e24>
    4020:	6b736154 	blvs	1cdc578 <_Min_Stack_Size+0x1cdc378>
    4024:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
    4028:	426c6f72 	rsbmi	r6, ip, #456	; 0x1c8
    402c:	6b636f6c 	blvs	18dfde4 <_Min_Stack_Size+0x18dfbe4>
    4030:	63617000 	cmnvs	r1, #0
    4034:	5f74656b 	svcpl	0x0074656b
    4038:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    403c:	64006874 	strvs	r6, [r0], #-2164	; 0xfffff78c
    4040:	00707369 	rsbseq	r7, r0, r9, ror #6
    4044:	6b636170 	blvs	18dc60c <_Min_Stack_Size+0x18dc40c>
    4048:	625f7465 	subsvs	r7, pc, #1694498816	; 0x65000000
    404c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    4050:	656d0072 	strbvs	r0, [sp, #-114]!	; 0xffffff8e
    4054:	7a69736d 	bvc	1a60e10 <_Min_Stack_Size+0x1a60c10>
    4058:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
    405c:	6968637a 	stmdbvs	r8!, {r1, r3, r4, r5, r6, r8, r9, sp, lr}^
    4060:	65725f70 	ldrbvs	r5, [r2, #-3952]!	; 0xfffff090
    4064:	70006461 	andvc	r6, r0, r1, ror #8
    4068:	73615463 	cmnvc	r1, #1660944384	; 0x63000000
    406c:	6d614e6b 	stclvs	14, cr4, [r1, #-428]!	; 0xfffffe54
    4070:	35770065 	ldrbcc	r0, [r7, #-101]!	; 0xffffff9b
    4074:	44303035 	ldrtmi	r3, [r0], #-53	; 0xffffffcb
    4078:	00617461 	rsbeq	r7, r1, r1, ror #8
    407c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    4080:	70690073 	rsbvc	r0, r9, r3, ror r0
    4084:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    4088:	65676966 	strbvs	r6, [r7, #-2406]!	; 0xfffff69a
    408c:	6f6c0064 	svcvs	0x006c0064
    4090:	6f4e6b63 	svcvs	0x004e6b63
    4094:	79666974 	stmdbvc	r6!, {r2, r4, r5, r6, r8, fp, sp, lr}^
    4098:	666e6900 	strbtvs	r6, [lr], -r0, lsl #18
    409c:	67734d6f 	ldrbvs	r4, [r3, -pc, ror #26]!
    40a0:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
    40a4:	4255006e 	subsmi	r0, r5, #110	; 0x6e
    40a8:	54657361 	strbtpl	r7, [r5], #-865	; 0xfffffc9f
    40ac:	5f657079 	svcpl	0x00657079
    40b0:	4e440074 	mcrmi	0, 2, r0, cr4, cr4, {3}
    40b4:	696c4353 	stmdbvs	ip!, {r0, r1, r4, r6, r8, r9, lr}^
    40b8:	00746e65 	rsbseq	r6, r4, r5, ror #28
    40bc:	73706d74 	cmnvc	r0, #116, 26	; 0x1d00
    40c0:	66007274 			; <UNDEFINED> instruction: 0x66007274
    40c4:	64657869 	strbtvs	r7, [r5], #-2153	; 0xfffff797
    40c8:	64616548 	strbtvs	r6, [r1], #-1352	; 0xfffffab8
    40cc:	69537265 	ldmdbvs	r3, {r0, r2, r5, r6, r9, ip, sp, lr}^
    40d0:	7200657a 	andvc	r6, r0, #511705088	; 0x1e800000
    40d4:	69616d65 	stmdbvs	r1!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    40d8:	6e654c6e 	cdpvs	12, 6, cr4, cr5, cr14, {3}
    40dc:	78696600 	stmdavc	r9!, {r9, sl, sp, lr}^
    40e0:	685f6465 	ldmdavs	pc, {r0, r2, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
    40e4:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
    40e8:	716d0072 	smcvc	53250	; 0xd002
    40ec:	705f7474 	subsvc	r7, pc, r4, ror r4	; <UNPREDICTABLE>
    40f0:	65737261 	ldrbvs	r7, [r3, #-609]!	; 0xfffffd9f
    40f4:	6275705f 	rsbsvs	r7, r5, #95	; 0x5f
    40f8:	6873696c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    40fc:	67736d5f 			; <UNDEFINED> instruction: 0x67736d5f
    4100:	74716d00 	ldrbtvc	r6, [r1], #-3328	; 0xfffff300
    4104:	61705f74 	cmnvs	r0, r4, ror pc
    4108:	5f657372 	svcpl	0x00657372
    410c:	5f627570 	svcpl	0x00627570
    4110:	69706f74 	ldmdbvs	r0!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    4114:	74705f63 	ldrbtvc	r5, [r0], #-3939	; 0xfffff09d
    4118:	69640072 	stmdbvs	r4!, {r1, r4, r5, r6}^
    411c:	00746967 	rsbseq	r6, r4, r7, ror #18
    4120:	65696c63 	strbvs	r6, [r9, #-3171]!	; 0xfffff39d
    4124:	6469746e 	strbtvs	r7, [r9], #-1134	; 0xfffffb92
    4128:	006e656c 	rsbeq	r6, lr, ip, ror #10
    412c:	7474716d 	ldrbtvc	r7, [r4], #-365	; 0xfffffe93
    4130:	7261705f 	rsbvc	r7, r1, #95	; 0x5f
    4134:	725f6573 	subsvc	r6, pc, #482344960	; 0x1cc00000
    4138:	6c5f6d65 	mrrcvs	13, 6, r6, pc, cr5	; <UNPREDICTABLE>
    413c:	6d006e65 	stcvs	14, cr6, [r0, #-404]	; 0xfffffe6c
    4140:	6c5f6773 	mrrcvs	7, 7, r6, pc, cr3	; <UNPREDICTABLE>
    4144:	75006e65 	strvc	r6, [r0, #-3685]	; 0xfffff19b
    4148:	745f6674 	ldrbvc	r6, [pc], #-1652	; 4150 <_Min_Stack_Size+0x3f50>
    414c:	6369706f 	cmnvs	r9, #111	; 0x6f
    4150:	736f7100 	cmnvc	pc, #0, 2
    4154:	7a69735f 	bvc	1a60ed8 <_Min_Stack_Size+0x1a60cd8>
    4158:	6f740065 	svcvs	0x00740065
    415c:	5f636970 	svcpl	0x00636970
    4160:	006e656c 	rsbeq	r6, lr, ip, ror #10
    4164:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
    4168:	5f656761 	svcpl	0x00656761
    416c:	6d006469 	cfstrsvs	mvf6, [r0, #-420]	; 0xfffffe5c
    4170:	5f747471 	svcpl	0x00747471
    4174:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
    4178:	72617600 	rsbvc	r7, r1, #0, 12
    417c:	6165685f 	cmnvs	r5, pc, asr r8
    4180:	00726564 	rsbseq	r6, r2, r4, ror #10
    4184:	7474716d 	ldrbtvc	r7, [r4], #-365	; 0xfffffe93
    4188:	7261705f 	rsbvc	r7, r1, #95	; 0x5f
    418c:	705f6573 	subsvc	r6, pc, r3, ror r5	; <UNPREDICTABLE>
    4190:	6d5f6275 	lfmvs	f6, 2, [pc, #-468]	; 3fc4 <_Min_Stack_Size+0x3dc4>
    4194:	705f6773 	subsvc	r6, pc, r3, ror r7	; <UNPREDICTABLE>
    4198:	6d007274 	sfmvs	f7, 4, [r0, #-464]	; 0xfffffe30
    419c:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    41a0:	65696c70 	strbvs	r6, [r9, #-3184]!	; 0xfffff390
    41a4:	716d0072 	smcvc	53250	; 0xd002
    41a8:	635f7474 	cmpvs	pc, #116, 8	; 0x74000000
    41ac:	656e6e6f 	strbvs	r6, [lr, #-3695]!	; 0xfffff191
    41b0:	6d007463 	cfstrsvs	mvf7, [r0, #-396]	; 0xfffffe74
    41b4:	656c6773 	strbvs	r6, [ip, #-1907]!	; 0xfffff88d
    41b8:	716d006e 	cmnvc	sp, lr, rrx
    41bc:	695f7474 	ldmdbvs	pc, {r2, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    41c0:	5f74696e 	svcpl	0x0074696e
    41c4:	68747561 	ldmdavs	r4!, {r0, r5, r6, r8, sl, ip, sp, lr}^
    41c8:	74716d00 	ldrbtvc	r6, [r1], #-3328	; 0xfffff300
    41cc:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
    41d0:	73627573 	cmnvc	r2, #482344960	; 0x1cc00000
    41d4:	62697263 	rsbvs	r7, r9, #805306374	; 0x30000006
    41d8:	716d0065 	cmnvc	sp, r5, rrx
    41dc:	695f7474 	ldmdbvs	pc, {r2, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    41e0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    41e4:	73736170 	cmnvc	r3, #112, 2
    41e8:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
    41ec:	006e656c 	rsbeq	r6, lr, ip, ror #10
    41f0:	7474716d 	ldrbtvc	r7, [r4], #-365	; 0xfffffe93
    41f4:	6275735f 	rsbsvs	r7, r5, #2080374785	; 0x7c000001
    41f8:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    41fc:	6d006562 	cfstr32vs	mvfx6, [r0, #-392]	; 0xfffffe78
    4200:	5f747471 	svcpl	0x00747471
    4204:	73726170 	cmnvc	r2, #112, 2
    4208:	75705f65 	ldrbvc	r5, [r0, #-3941]!	; 0xfffff09b
    420c:	6f745f62 	svcvs	0x00745f62
    4210:	00636970 	rsbeq	r6, r3, r0, ror r9
    4214:	7474716d 	ldrbtvc	r7, [r4], #-365	; 0xfffffe93
    4218:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    421c:	6e6e6f63 	cdpvs	15, 6, cr6, cr14, cr3, {3}
    4220:	00746365 	rsbseq	r6, r4, r5, ror #6
    4224:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
    4228:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
    422c:	006e656c 	rsbeq	r6, lr, ip, ror #10
    4230:	6c796170 	ldfvse	f6, [r9], #-448	; 0xfffffe40
    4234:	5f64616f 	svcpl	0x0064616f
    4238:	006e656c 	rsbeq	r6, lr, ip, ror #10
    423c:	69706f74 	ldmdbvs	r0!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    4240:	6e656c63 	cdpvs	12, 6, cr6, cr5, cr3, {3}
    4244:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
    4248:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
    424c:	6d007365 	stcvs	3, cr7, [r0, #-404]	; 0xfffffe6c
    4250:	5f747471 	svcpl	0x00747471
    4254:	72627570 	rsbvc	r7, r2, #112, 10	; 0x1c000000
    4258:	2f006c65 	svccs	0x00006c65
    425c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4260:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    4264:	2f767375 	svccs	0x00767375
    4268:	53414454 	movtpl	r4, #5204	; 0x1454
    426c:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    4270:	6c2f544f 	cfstrsvs	mvf5, [pc], #-316	; 413c <_Min_Stack_Size+0x3f3c>
    4274:	6d656269 	sfmvs	f6, 2, [r5, #-420]!	; 0xfffffe5c
    4278:	2f747471 	svccs	0x00747471
    427c:	2f637273 	svccs	0x00637273
    4280:	6562696c 	strbvs	r6, [r2, #-2412]!	; 0xfffff694
    4284:	7474716d 	ldrbtvc	r7, [r4], #-365	; 0xfffffe93
    4288:	7100632e 	tstvc	r0, lr, lsr #6
    428c:	665f736f 	ldrbvs	r7, [pc], -pc, ror #6
    4290:	0067616c 	rsbeq	r6, r7, ip, ror #2
    4294:	7474716d 	ldrbtvc	r7, [r4], #-365	; 0xfffffe93
    4298:	6d756e5f 	ldclvs	14, cr6, [r5, #-380]!	; 0xfffffe84
    429c:	6d65725f 	sfmvs	f7, 2, [r5, #-380]!	; 0xfffffe84
    42a0:	6e656c5f 	mcrvs	12, 3, r6, cr5, cr15, {2}
    42a4:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
    42a8:	6d007365 	stcvs	3, cr7, [r0, #-404]	; 0xfffffe6c
    42ac:	5f747471 	svcpl	0x00747471
    42b0:	5f746573 	svcpl	0x00746573
    42b4:	76696c61 	strbtvc	r6, [r9], -r1, ror #24
    42b8:	716d0065 	cmnvc	sp, r5, rrx
    42bc:	705f7474 	subsvc	r7, pc, r4, ror r4	; <UNPREDICTABLE>
    42c0:	696c6275 	stmdbvs	ip!, {r0, r2, r4, r5, r6, r9, sp, lr}^
    42c4:	6d006873 	stcvs	8, cr6, [r0, #-460]	; 0xfffffe34
    42c8:	5f747471 	svcpl	0x00747471
    42cc:	73726170 	cmnvc	r2, #112, 2
    42d0:	736d5f65 	cmnvc	sp, #404	; 0x194
    42d4:	64695f67 	strbtvs	r5, [r9], #-3943	; 0xfffff099
    42d8:	74716d00 	ldrbtvc	r6, [r1], #-3328	; 0xfffff300
    42dc:	75705f74 	ldrbvc	r5, [r0, #-3956]!	; 0xfffff08c
    42e0:	73696c62 	cmnvc	r9, #25088	; 0x6200
    42e4:	69775f68 	ldmdbvs	r7!, {r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    42e8:	715f6874 	cmpvc	pc, r4, ror r8	; <UNPREDICTABLE>
    42ec:	2f00736f 	svccs	0x0000736f
    42f0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    42f4:	7269762f 	rsbvc	r7, r9, #49283072	; 0x2f00000
    42f8:	2f767375 	svccs	0x00767375
    42fc:	53414454 	movtpl	r4, #5204	; 0x1454
    4300:	492d5441 	pushmi	{r0, r6, sl, ip, lr}
    4304:	4f2f544f 	svcmi	0x002f544f
    4308:	696c2f53 	stmdbvs	ip!, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    430c:	632e7473 			; <UNDEFINED> instruction: 0x632e7473
    4310:	43767000 	cmnmi	r6, #0
    4314:	61746e6f 	cmnvs	r4, pc, ror #28
    4318:	72656e69 	rsbvc	r6, r5, #1680	; 0x690
    431c:	6e694d00 	cdpvs	13, 6, cr4, cr9, cr0, {0}
    4320:	73694c69 	cmnvc	r9, #26880	; 0x6900
    4324:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0xfffff68c
    4328:	00745f6d 	rsbseq	r5, r4, sp, ror #30
    432c:	65744978 	ldrbvs	r4, [r4, #-2424]!	; 0xfffff688
    4330:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    4334:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    4338:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    433c:	00646e45 	rsbeq	r6, r4, r5, asr #28
    4340:	774f7670 	smlsldxvc	r7, pc, r0, r6	; <UNPREDICTABLE>
    4344:	0072656e 	rsbseq	r6, r2, lr, ror #10
    4348:	53494c78 	movtpl	r4, #40056	; 0x9c78
    434c:	54495f54 	strbpl	r5, [r9], #-3924	; 0xfffff0ac
    4350:	70004d45 	andvc	r4, r0, r5, asr #26
    4354:	65744978 	ldrbvs	r4, [r4, #-2424]!	; 0xfffff688
    4358:	526f546d 	rsbpl	r5, pc, #1828716544	; 0x6d000000
    435c:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
    4360:	4c760065 	ldclmi	0, cr0, [r6], #-404	; 0xfffffe6c
    4364:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
    4368:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    436c:	73696c61 	cmnvc	r9, #24832	; 0x6100
    4370:	65744965 	ldrbvs	r4, [r4, #-2405]!	; 0xfffff69b
    4374:	694c006d 	stmdbvs	ip, {r0, r2, r3, r5, r6}^
    4378:	745f7473 	ldrbvc	r7, [pc], #-1139	; 4380 <_Min_Stack_Size+0x4180>
    437c:	4e787500 	cdpmi	5, 7, cr7, cr8, cr0, {0}
    4380:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
    4384:	49664f72 	stmdbmi	r6!, {r1, r4, r5, r6, r8, r9, sl, fp, lr}^
    4388:	736d6574 	cmnvc	sp, #116, 10	; 0x1d000000
    438c:	694c7600 	stmdbvs	ip, {r9, sl, ip, sp, lr}^
    4390:	6e497473 	mcrvs	4, 2, r7, cr9, cr3, {3}
    4394:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0xfffffa8d
    4398:	00646e45 	rsbeq	r6, r4, r5, asr #28
    439c:	654e7870 	strbvs	r7, [lr, #-2160]	; 0xfffff790
    43a0:	76007478 			; <UNDEFINED> instruction: 0x76007478
    43a4:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    43a8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    43ac:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    43b0:	78006573 	stmdavc	r0, {r0, r1, r4, r5, r6, r8, sl, sp, lr}
    43b4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    43b8:	49664f65 	stmdbmi	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, lr}^
    43bc:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
    43c0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    43c4:	49787000 	ldmdbmi	r8!, {ip, sp, lr}^
    43c8:	006d6574 	rsbeq	r6, sp, r4, ror r5
    43cc:	74497870 	strbvc	r7, [r9], #-2160	; 0xfffff790
    43d0:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
    43d4:	7000726f 	andvc	r7, r0, pc, ror #4
    43d8:	646e4978 	strbtvs	r4, [lr], #-2424	; 0xfffff688
    43dc:	70007865 	andvc	r7, r0, r5, ror #16
    43e0:	65725078 	ldrbvs	r5, [r2, #-120]!	; 0xffffff88
    43e4:	756f6976 	strbvc	r6, [pc, #-2422]!	; 3a76 <_Min_Stack_Size+0x3876>
    43e8:	4d780073 	ldclmi	0, cr0, [r8, #-460]!	; 0xfffffe34
    43ec:	5f494e49 	svcpl	0x00494e49
    43f0:	5453494c 	ldrbpl	r4, [r3], #-2380	; 0xfffff6b4
    43f4:	4554495f 	ldrbmi	r4, [r4, #-2399]	; 0xfffff6a1
    43f8:	7870004d 	ldmdavc	r0!, {r0, r2, r3, r6}^
    43fc:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    4400:	494c7800 	stmdbmi	ip, {fp, ip, sp, lr}^
    4404:	75005453 	strvc	r5, [r0, #-1107]	; 0xfffffbad
    4408:	73694c78 	cmnvc	r9, #120, 24	; 0x7800
    440c:	6d655274 	sfmvs	f5, 2, [r5, #-464]!	; 0xfffffe30
    4410:	0065766f 	rsbeq	r7, r5, pc, ror #12
    4414:	654e7870 	strbvs	r7, [lr, #-2160]	; 0xfffff790
    4418:	73694c77 	cmnvc	r9, #30464	; 0x7700
    441c:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0xfffff68c
    4420:	4c76006d 	ldclmi	0, cr0, [r6], #-436	; 0xfffffe4c
    4424:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
    4428:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
    442c:	78750074 	ldmdavc	r5!, {r2, r4, r5, r6}^
    4430:	616d6553 	cmnvs	sp, r3, asr r5
    4434:	726f6870 	rsbvc	r6, pc, #112, 16	; 0x700000
    4438:	756f4365 	strbvc	r4, [pc, #-869]!	; 40db <_Min_Stack_Size+0x3edb>
    443c:	7800746e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4440:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    4444:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
    4448:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
    444c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    4450:	51780074 	cmnpl	r8, r4, ror r0
    4454:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    4458:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    445c:	00657669 	rsbeq	r7, r5, r9, ror #12
    4460:	4d495478 	cfstrdmi	mvd5, [r9, #-480]	; 0xfffffe20
    4464:	554f5f45 	strbpl	r5, [pc, #-3909]	; 3527 <_Min_Stack_Size+0x3327>
    4468:	69540054 	ldmdbvs	r4, {r2, r4, r6}^
    446c:	754f656d 	strbvc	r6, [pc, #-1389]	; 3f07 <_Min_Stack_Size+0x3d07>
    4470:	00745f74 	rsbseq	r5, r4, r4, ror pc
    4474:	43767270 	cmnmi	r6, #112, 4
    4478:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0xffffff91
    447c:	54617461 	strbtpl	r7, [r1], #-1121	; 0xfffffb9f
    4480:	6575516f 	ldrbvs	r5, [r5, #-367]!	; 0xfffffe91
    4484:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    4488:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    448c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    4490:	48787500 	ldmdami	r8!, {r8, sl, ip, sp, lr}^
    4494:	65686769 	strbvs	r6, [r8, #-1897]!	; 0xfffff897
    4498:	61577473 	cmpvs	r7, r3, ror r4
    449c:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
    44a0:	69725067 	ldmdbvs	r2!, {r0, r1, r2, r5, r6, ip, lr}^
    44a4:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    44a8:	53780079 	cmnpl	r8, #121	; 0x79
    44ac:	70616d65 	rsbvc	r6, r1, r5, ror #26
    44b0:	65726f68 	ldrbvs	r6, [r2, #-3944]!	; 0xfffff098
    44b4:	51787500 	cmnpl	r8, r0, lsl #10
    44b8:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    44bc:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
    44c0:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    44c4:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
    44c8:	00676e69 	rsbeq	r6, r7, r9, ror #28
    44cc:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
    44d0:	65506575 	ldrbvs	r6, [r0, #-1397]	; 0xfffffa8b
    44d4:	72466b65 	subvc	r6, r6, #103424	; 0x19400
    44d8:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
    44dc:	78750052 	ldmdavc	r5!, {r1, r4, r6}^
    44e0:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    44e4:	61705365 	cmnvs	r0, r5, ror #6
    44e8:	41736563 	cmnmi	r3, r3, ror #10
    44ec:	6c696176 	stfvse	f6, [r9], #-472	; 0xfffffe28
    44f0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    44f4:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0xfffff800
    44f8:	52657565 	rsbpl	r7, r5, #423624704	; 0x19400000
    44fc:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    4500:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
    4504:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
    4508:	65530052 	ldrbvs	r0, [r3, #-82]	; 0xffffffae
    450c:	6870616d 	ldmdavs	r0!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4510:	4465726f 	strbtmi	r7, [r5], #-623	; 0xfffffd91
    4514:	5f617461 	svcpl	0x00617461
    4518:	63700074 	cmnvs	r0, #116	; 0x74
    451c:	6769724f 	strbvs	r7, [r9, -pc, asr #4]!
    4520:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
    4524:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    4528:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    452c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    4530:	76727000 	ldrbtvc	r7, [r2], -r0
    4534:	75517349 	ldrbvc	r7, [r1, #-841]	; 0xfffffcb7
    4538:	46657565 	strbtmi	r7, [r5], -r5, ror #10
    453c:	006c6c75 	rsbeq	r6, ip, r5, ror ip
    4540:	61546370 	cmpvs	r4, r0, ror r3
    4544:	78006c69 	stmdavc	r0, {r0, r3, r5, r6, sl, fp, sp, lr}
    4548:	6c656959 			; <UNDEFINED> instruction: 0x6c656959
    454c:	71655264 	cmnvc	r5, r4, ror #4
    4550:	65726975 	ldrbvs	r6, [r2, #-2421]!	; 0xfffff68b
    4554:	50760064 	rsbspl	r0, r6, r4, rrx
    4558:	5374726f 	cmnpl	r4, #-268435450	; 0xf0000006
    455c:	41427465 	cmpmi	r2, r5, ror #8
    4560:	52504553 	subspl	r4, r0, #348127232	; 0x14c00000
    4564:	78750049 	ldmdavc	r5!, {r0, r3, r6}^
    4568:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
    456c:	50747365 	rsbspl	r7, r4, r5, ror #6
    4570:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    4574:	4f797469 	svcmi	0x00797469
    4578:	69615766 	stmdbvs	r1!, {r1, r2, r5, r6, r8, r9, sl, ip, lr}^
    457c:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    4580:	6b736154 	blvs	1cdcad8 <_Min_Stack_Size+0x1cdc8d8>
    4584:	76700073 			; <UNDEFINED> instruction: 0x76700073
    4588:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    458c:	70007265 	andvc	r7, r0, r5, ror #4
    4590:	61654863 	cmnvs	r5, r3, ror #16
    4594:	75700064 	ldrbvc	r0, [r0, #-100]!	; 0xffffff9c
    4598:	65755163 	ldrbvs	r5, [r5, #-355]!	; 0xfffffe9d
    459c:	74536575 	ldrbvc	r6, [r3], #-1397	; 0xfffffa8b
    45a0:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    45a4:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
    45a8:	6574754d 	ldrbvs	r7, [r4, #-1357]!	; 0xfffffab3
    45ac:	6e654c78 	mcrvs	12, 3, r4, cr5, cr8, {3}
    45b0:	00687467 	rsbeq	r7, r8, r7, ror #8
    45b4:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
    45b8:	72436575 	subvc	r6, r3, #490733568	; 0x1d400000
    45bc:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
    45c0:	6574754d 	ldrbvs	r7, [r4, #-1357]!	; 0xfffffab3
    45c4:	78750078 	ldmdavc	r5!, {r3, r4, r5, r6}^
    45c8:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    45cc:	70006874 	andvc	r6, r0, r4, ror r8
    45d0:	65477672 	strbvs	r7, [r7, #-1650]	; 0xfffff98e
    45d4:	73694474 	cmnvc	r9, #116, 8	; 0x74000000
    45d8:	65686e69 	strbvs	r6, [r8, #-3689]!	; 0xfffff197
    45dc:	50746972 	rsbspl	r6, r4, r2, ror r9
    45e0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    45e4:	41797469 	cmnmi	r9, r9, ror #8
    45e8:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
    45ec:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    45f0:	0074756f 	rsbseq	r7, r4, pc, ror #10
    45f4:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
    45f8:	73496575 	movtvc	r6, #38261	; 0x9575
    45fc:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    4600:	706d4565 	rsbvc	r4, sp, r5, ror #10
    4604:	72467974 	subvc	r7, r6, #116, 18	; 0x1d0000
    4608:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
    460c:	63750052 	cmnvs	r5, #82	; 0x52
    4610:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    4614:	70795465 	rsbsvc	r5, r9, r5, ror #8
    4618:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
    461c:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    4620:	73654d65 	cmnvc	r5, #6464	; 0x1940
    4624:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    4628:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
    462c:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    4630:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 4520 <_Min_Stack_Size+0x4320>
    4634:	00525349 	subseq	r5, r2, r9, asr #6
    4638:	45555178 	ldrbmi	r5, [r5, #-376]	; 0xfffffe88
    463c:	75004555 	strvc	r4, [r0, #-1365]	; 0xfffffaab
    4640:	65744978 	ldrbvs	r4, [r4, #-2424]!	; 0xfffff688
    4644:	7a69536d 	bvc	1a59400 <_Min_Stack_Size+0x1a59200>
    4648:	54630065 	strbtpl	r0, [r3], #-101	; 0xffffff9b
    464c:	636f4c78 	cmnvs	pc, #120, 24	; 0x7800
    4650:	7270006b 	rsbsvc	r0, r0, #107	; 0x6b
    4654:	696e4976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, lr}^
    4658:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
    465c:	4e657369 	cdpmi	3, 6, cr7, cr5, cr9, {3}
    4660:	75517765 	ldrbvc	r7, [r1, #-1893]	; 0xfffff89b
    4664:	00657565 	rsbeq	r7, r5, r5, ror #10
    4668:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
    466c:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
    4670:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
    4674:	65724363 	ldrbvs	r4, [r2, #-867]!	; 0xfffffc9d
    4678:	00657461 	rsbeq	r7, r5, r1, ror #8
    467c:	654e7870 	strbvs	r7, [lr, #-2160]	; 0xfffff790
    4680:	65755177 	ldrbvs	r5, [r5, #-375]!	; 0xfffffe89
    4684:	75006575 	strvc	r6, [r0, #-1397]	; 0xfffffa8b
    4688:	63655278 	cmnvs	r5, #120, 4	; 0x80000007
    468c:	69737275 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, ip, sp, lr}^
    4690:	61436576 	hvcvs	13910	; 0x3656
    4694:	6f436c6c 	svcvs	0x00436c6c
    4698:	00746e75 	rsbseq	r6, r4, r5, ror lr
    469c:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	; 0xfffffe20
    46a0:	456e4f65 	strbmi	r4, [lr, #-3941]!	; 0xfffff09b
    46a4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    46a8:	00676e69 	rsbeq	r6, r7, r9, ror #28
    46ac:	65764f78 	ldrbvs	r4, [r6, #-3960]!	; 0xfffff088
    46b0:	6f6c6672 	svcvs	0x006c6672
    46b4:	756f4377 	strbvc	r4, [pc, #-887]!	; 4345 <_Min_Stack_Size+0x4145>
    46b8:	7500746e 	strvc	r7, [r0, #-1134]	; 0xfffffb92
    46bc:	69724f6c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, lr}^
    46c0:	616e6967 	cmnvs	lr, r7, ror #18
    46c4:	5341426c 	movtpl	r4, #4716	; 0x126c
    46c8:	49525045 	ldmdbmi	r2, {r0, r2, r6, ip, lr}^
    46cc:	65755100 	ldrbvs	r5, [r5, #-256]!	; 0xffffff00
    46d0:	745f6575 	ldrbvc	r6, [pc], #-1397	; 46d8 <_Min_Stack_Size+0x44d8>
    46d4:	6f682f00 	svcvs	0x00682f00
    46d8:	762f656d 	strtvc	r6, [pc], -sp, ror #10
    46dc:	73757269 	cmnvc	r5, #-1879048186	; 0x90000006
    46e0:	44542f76 	ldrbmi	r2, [r4], #-3958	; 0xfffff08a
    46e4:	54415341 	strbpl	r5, [r1], #-833	; 0xfffffcbf
    46e8:	544f492d 	strbpl	r4, [pc], #-2349	; 46f0 <_Min_Stack_Size+0x44f0>
    46ec:	2f534f2f 	svccs	0x00534f2f
    46f0:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
    46f4:	00632e65 	rsbeq	r2, r3, r5, ror #28
    46f8:	616d6553 	cmnvs	sp, r3, asr r5
    46fc:	726f6870 	rsbvc	r6, pc, #112, 16	; 0x700000
    4700:	74614465 	strbtvc	r4, [r1], #-1125	; 0xfffffb9b
    4704:	51780061 	cmnpl	r8, r1, rrx
    4708:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    470c:	616d6553 	cmnvs	sp, r3, asr r5
    4710:	726f6870 	rsbvc	r6, pc, #112, 16	; 0x700000
    4714:	6b615465 	blvs	18598b0 <_Min_Stack_Size+0x18596b0>
    4718:	76700065 	ldrbtvc	r0, [r0], -r5, rrx
    471c:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
    4720:	75516f54 	ldrbvc	r6, [r1, #-3924]	; 0xfffff0ac
    4724:	00657565 	rsbeq	r7, r5, r5, ror #10
    4728:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    472c:	6157736b 	cmpvs	r7, fp, ror #6
    4730:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
    4734:	526f5467 	rsbpl	r5, pc, #1728053248	; 0x67000000
    4738:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    473c:	78006576 	stmdavc	r0, {r1, r2, r4, r5, r6, r8, sl, sp, lr}
    4740:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    4744:	7a695365 	bvc	1a594e0 <_Min_Stack_Size+0x1a592e0>
    4748:	426e4965 	rsbmi	r4, lr, #1654784	; 0x194000
    474c:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    4750:	76727000 	ldrbtvc	r7, [r2], -r0
    4754:	6f6c6e55 	svcvs	0x006c6e55
    4758:	75516b63 	ldrbvc	r6, [r1, #-2915]	; 0xfffff49d
    475c:	00657565 	rsbeq	r7, r5, r5, ror #10
    4760:	75517875 	ldrbvc	r7, [r1, #-2165]	; 0xfffff78b
    4764:	4c657565 	cfstr64mi	mvdx7, [r5], #-404	; 0xfffffe6c
    4768:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    476c:	78700068 	ldmdavc	r0!, {r3, r5, r6}^
    4770:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    4774:	51780065 	cmnpl	r8, r5, rrx
    4778:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    477c:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
    4780:	53636972 	cmnpl	r3, #1867776	; 0x1c8000
    4784:	46646e65 	strbtmi	r6, [r4], -r5, ror #28
    4788:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    478c:	70005253 	andvc	r5, r0, r3, asr r2
    4790:	69725763 	ldmdbvs	r2!, {r0, r1, r5, r6, r8, r9, sl, ip, lr}^
    4794:	6f546574 	svcvs	0x00546574
    4798:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0xfffff800
    479c:	47657565 	strbmi	r7, [r5, -r5, ror #10]!
    47a0:	46657669 	strbtmi	r7, [r5], -r9, ror #12
    47a4:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    47a8:	78005253 	stmdavc	r0, {r0, r1, r4, r6, r9, ip, lr}
    47ac:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    47b0:	51734965 	cmnpl	r3, r5, ror #18
    47b4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    47b8:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
    47bc:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 46ac <_Min_Stack_Size+0x44ac>
    47c0:	00525349 	subseq	r5, r2, r9, asr #6
    47c4:	65526370 	ldrbvs	r6, [r2, #-880]	; 0xfffffc90
    47c8:	72466461 	subvc	r6, r6, #1627389952	; 0x61000000
    47cc:	75006d6f 	strvc	r6, [r0, #-3439]	; 0xfffff291
    47d0:	74754d78 	ldrbtvc	r4, [r5], #-3448	; 0xfffff288
    47d4:	69537865 	ldmdbvs	r3, {r0, r2, r5, r6, fp, ip, sp, lr}^
    47d8:	7000657a 	andvc	r6, r0, sl, ror r5
    47dc:	6f437672 	svcvs	0x00437672
    47e0:	61447970 	hvcvs	18320	; 0x4790
    47e4:	72466174 	subvc	r6, r6, #116, 2
    47e8:	75516d6f 	ldrbvc	r6, [r1, #-3439]	; 0xfffff291
    47ec:	00657565 	rsbeq	r7, r5, r5, ror #10
    47f0:	654e6c75 	strbvs	r6, [lr, #-3189]	; 0xfffff38b
    47f4:	73614d77 	cmnvc	r1, #7616	; 0x1dc0
    47f8:	6c61566b 	stclvs	6, cr5, [r1], #-428	; 0xfffffe54
    47fc:	70006575 	andvc	r6, r0, r5, ror r5
    4800:	6e497672 	mcrvs	6, 2, r7, cr9, cr2, {3}
    4804:	61697469 	cmnvs	r9, r9, ror #8
    4808:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0xfffff694
    480c:	6574754d 	ldrbvs	r7, [r4, #-1357]!	; 0xfffffab3
    4810:	45780078 	ldrbmi	r0, [r8, #-120]!	; 0xffffff88
    4814:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    4818:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    481c:	00746553 	rsbseq	r6, r4, r3, asr r5
    4820:	65755176 	ldrbvs	r5, [r5, #-374]!	; 0xfffffe8a
    4824:	65446575 	strbvs	r6, [r4, #-1397]	; 0xfffffa8b
    4828:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    482c:	52787500 	rsbspl	r7, r8, #0, 10
    4830:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
    4834:	4978006e 	ldmdbmi	r8!, {r1, r2, r3, r5, r6}^
    4838:	7265686e 	rsbvc	r6, r5, #7208960	; 0x6e0000
    483c:	6e617469 	cdpvs	4, 6, cr7, cr1, cr9, {3}
    4840:	634f6563 	movtvs	r6, #62819	; 0xf563
    4844:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    4848:	78006465 	stmdavc	r0, {r0, r2, r5, r6, sl, sp, lr}
    484c:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
    4850:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    4854:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    4858:	76727000 	ldrbtvc	r7, [r2], -r0
    485c:	75517349 	ldrbvc	r7, [r1, #-841]	; 0xfffffcb7
    4860:	45657565 	strbmi	r7, [r5, #-1381]!	; 0xfffffa9b
    4864:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    4868:	4d787500 	cfldr64mi	mvdx7, [r8, #-0]
    486c:	61737365 	cmnvs	r3, r5, ror #6
    4870:	57736567 	ldrbpl	r6, [r3, -r7, ror #10]!
    4874:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
    4878:	7500676e 	strvc	r6, [r0, #-1902]	; 0xfffff892
    487c:	76615378 			; <UNDEFINED> instruction: 0x76615378
    4880:	6e496465 	cdpvs	4, 4, cr6, cr9, cr5, {3}
    4884:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    4888:	53747075 	cmnpl	r4, #117	; 0x75
    488c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    4890:	51780073 	cmnpl	r8, r3, ror r0
    4894:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    4898:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
    489c:	53636972 	cmnpl	r3, #1867776	; 0x1c8000
    48a0:	00646e65 	rsbeq	r6, r4, r5, ror #28
    48a4:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    48a8:	696f5065 	stmdbvs	pc!, {r0, r2, r5, r6, ip, lr}^	; <UNPREDICTABLE>
    48ac:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    48b0:	00745f73 	rsbseq	r5, r4, r3, ror pc
    48b4:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    48b8:	696f5065 	stmdbvs	pc!, {r0, r2, r5, r6, ip, lr}^	; <UNPREDICTABLE>
    48bc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    48c0:	78700073 	ldmdavc	r0!, {r0, r1, r4, r5, r6}^
    48c4:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
    48c8:	72507265 	subsvc	r7, r0, #1342177286	; 0x50000006
    48cc:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    48d0:	61547974 	cmpvs	r4, r4, ror r9
    48d4:	6f576b73 	svcvs	0x00576b73
    48d8:	006e656b 	rsbeq	r6, lr, fp, ror #10
    48dc:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
    48e0:	65506575 	ldrbvs	r6, [r0, #-1397]	; 0xfffffa8b
    48e4:	78006b65 	stmdavc	r0, {r0, r2, r5, r6, r8, r9, fp, sp, lr}
    48e8:	6b736154 	blvs	1cdce40 <_Min_Stack_Size+0x1cdcc40>
    48ec:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
    48f0:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    48f4:	65536f54 	ldrbvs	r6, [r3, #-3924]	; 0xfffff0ac
    48f8:	7500646e 	strvc	r6, [r0, #-1134]	; 0xfffffb92
    48fc:	726f506c 	rsbvc	r5, pc, #108	; 0x6c
    4900:	69615274 	stmdbvs	r1!, {r2, r4, r5, r6, r9, ip, lr}^
    4904:	41426573 	hvcmi	9811	; 0x2653
    4908:	52504553 	subspl	r4, r0, #348127232	; 0x14c00000
    490c:	52630049 	rsbpl	r0, r3, #73	; 0x49
    4910:	636f4c78 	cmnvs	pc, #120, 24	; 0x7800
    4914:	7875006b 	ldmdavc	r5!, {r0, r1, r3, r5, r6}^
    4918:	6f697250 	svcvs	0x00697250
    491c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    4920:	43787000 	cmnmi	r8, #0
    4924:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
    4928:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    492c:	50787500 	rsbspl	r7, r8, r0, lsl #10
    4930:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
    4934:	756f4364 	strbvc	r4, [pc, #-868]!	; 45d8 <_Min_Stack_Size+0x43d8>
    4938:	0073746e 	rsbseq	r7, r3, lr, ror #8
    493c:	69426c75 	stmdbvs	r2, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    4940:	6f547374 	svcvs	0x00547374
    4944:	61656c43 	cmnvs	r5, r3, asr #24
    4948:	456e4f72 	strbmi	r4, [lr, #-3954]!	; 0xfffff08e
    494c:	00746978 	rsbseq	r6, r4, r8, ror r9
    4950:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 489c <_Min_Stack_Size+0x469c>
    4954:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    4958:	76737572 			; <UNDEFINED> instruction: 0x76737572
    495c:	4144542f 	cmpmi	r4, pc, lsr #8
    4960:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    4964:	2f544f49 	svccs	0x00544f49
    4968:	742f534f 	strtvc	r5, [pc], #-847	; 4970 <_Min_Stack_Size+0x4770>
    496c:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
    4970:	6500632e 	strvs	r6, [r0, #-814]	; 0xfffffcd2
    4974:	63416f4e 	movtvs	r6, #8014	; 0x1f4e
    4978:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    497c:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
    4980:	6552706f 	ldrbvs	r7, [r2, #-111]	; 0xffffff91
    4984:	50796461 	rsbspl	r6, r9, r1, ror #8
    4988:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    498c:	00797469 	rsbseq	r7, r9, r9, ror #8
    4990:	76457870 			; <UNDEFINED> instruction: 0x76457870
    4994:	4c746e65 	ldclmi	14, cr6, [r4], #-404	; 0xfffffe6c
    4998:	00747369 	rsbseq	r7, r4, r9, ror #6
    499c:	68635378 	stmdavs	r3!, {r3, r4, r5, r6, r8, r9, ip, lr}^
    49a0:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    49a4:	75527265 	ldrbvc	r7, [r2, #-613]	; 0xfffffd9b
    49a8:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
    49ac:	74530067 	ldrbvc	r0, [r3], #-103	; 0xffffff99
    49b0:	546b6361 	strbtpl	r6, [fp], #-865	; 0xfffffc9f
    49b4:	5f657079 	svcpl	0x00657079
    49b8:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
    49bc:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    49c0:	73615479 	cmnvc	r1, #2030043136	; 0x79000000
    49c4:	694c736b 	stmdbvs	ip, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}^
    49c8:	00737473 	rsbseq	r7, r3, r3, ror r4
    49cc:	724f6375 	subvc	r6, pc, #-738197503	; 0xd4000001
    49d0:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
    49d4:	6f4e6c61 	svcvs	0x004e6c61
    49d8:	79666974 	stmdbvc	r6!, {r2, r4, r5, r6, r8, fp, sp, lr}^
    49dc:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    49e0:	54760065 	ldrbtpl	r0, [r6], #-101	; 0xffffff9b
    49e4:	536b7361 	cmnpl	fp, #-2080374783	; 0x84000001
    49e8:	69547465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
    49ec:	754f656d 	strbvc	r6, [pc, #-1389]	; 4487 <_Min_Stack_Size+0x4287>
    49f0:	61745374 	cmnvs	r4, r4, ror r3
    49f4:	78006574 	stmdavc	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
    49f8:	6b736154 	blvs	1cdcf50 <_Min_Stack_Size+0x1cdcd50>
    49fc:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
    4a00:	4e636972 			; <UNDEFINED> instruction: 0x4e636972
    4a04:	6669746f 	strbtvs	r7, [r9], -pc, ror #8
    4a08:	6f724679 	svcvs	0x00724679
    4a0c:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
    4a10:	61547800 	cmpvs	r4, r0, lsl #16
    4a14:	6e496b73 	vmovvs.8	d9[3], r6
    4a18:	6d657263 	sfmvs	f7, 2, [r5, #-396]!	; 0xfffffe74
    4a1c:	54746e65 	ldrbtpl	r6, [r4], #-3685	; 0xfffff19b
    4a20:	006b6369 	rsbeq	r6, fp, r9, ror #6
    4a24:	69426c75 	stmdbvs	r2, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    4a28:	70616d74 	rsbvc	r6, r1, r4, ror sp
    4a2c:	65447800 	strbvs	r7, [r4, #-2048]	; 0xfffff800
    4a30:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
    4a34:	73615464 	cmnvc	r1, #100, 8	; 0x64000000
    4a38:	73694c6b 	cmnvc	r9, #27392	; 0x6b00
    4a3c:	78003174 	stmdavc	r0, {r2, r4, r5, r6, r8, ip, sp}
    4a40:	616c6544 	cmnvs	ip, r4, asr #10
    4a44:	54646579 	strbtpl	r6, [r4], #-1401	; 0xfffffa87
    4a48:	4c6b7361 	stclmi	3, cr7, [fp], #-388	; 0xfffffe7c
    4a4c:	32747369 	rsbscc	r7, r4, #-1543503871	; 0xa4000001
    4a50:	506c7500 	rsbpl	r7, ip, r0, lsl #10
    4a54:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    4a58:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
    4a5c:	54780073 	ldrbtpl	r0, [r8], #-115	; 0xffffff8d
    4a60:	546b7361 	strbtpl	r7, [fp], #-865	; 0xfffffc9f
    4a64:	7365526f 	cmnvc	r5, #-268435450	; 0xf0000006
    4a68:	00656d75 	rsbeq	r6, r5, r5, ror sp
    4a6c:	61547875 	cmpvs	r4, r5, ror r8
    4a70:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xfffff48d
    4a74:	6d754e74 	ldclvs	14, cr4, [r5, #-464]!	; 0xfffffe30
    4a78:	4f726562 	svcmi	0x00726562
    4a7c:	73615466 	cmnvc	r1, #1711276032	; 0x66000000
    4a80:	7000736b 	andvc	r7, r0, fp, ror #6
    4a84:	6d614e63 	stclvs	14, cr4, [r1, #-396]!	; 0xfffffe74
    4a88:	73740065 	cmnvc	r4, #101	; 0x65
    4a8c:	4243546b 	submi	r5, r3, #1795162112	; 0x6b000000
    4a90:	4e637500 	cdpmi	5, 6, cr7, cr3, cr0, {0}
    4a94:	6669746f 	strbtvs	r7, [r9], -pc, ror #8
    4a98:	61745379 	cmnvs	r4, r9, ror r3
    4a9c:	78006574 	stmdavc	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
    4aa0:	6b736154 	blvs	1cdcff8 <_Min_Stack_Size+0x1cdcdf8>
    4aa4:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
    4aa8:	4e636972 			; <UNDEFINED> instruction: 0x4e636972
    4aac:	6669746f 	strbtvs	r7, [r9], -pc, ror #8
    4ab0:	78700079 	ldmdavc	r0!, {r0, r3, r4, r5, r6}^
    4ab4:	6c626e55 	stclvs	14, cr6, [r2], #-340	; 0xfffffeac
    4ab8:	656b636f 	strbvs	r6, [fp, #-879]!	; 0xfffffc91
    4abc:	42435464 	submi	r5, r3, #100, 8	; 0x64000000
    4ac0:	53737500 	cmnpl	r3, #0, 10
    4ac4:	6b636174 	blvs	18dd09c <_Min_Stack_Size+0x18dce9c>
    4ac8:	74706544 	ldrbtvc	r6, [r0], #-1348	; 0xfffffabc
    4acc:	43780068 	cmnmi	r8, #104	; 0x68
    4ad0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    4ad4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    4ad8:	456e4f74 	strbmi	r4, [lr, #-3956]!	; 0xfffff08c
    4adc:	00746978 	rsbseq	r6, r4, r8, ror r9
    4ae0:	616c4578 	smcvs	50264	; 0xc458
    4ae4:	64657370 	strbtvs	r7, [r5], #-880	; 0xfffffc90
    4ae8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    4aec:	65536500 	ldrbvs	r6, [r3, #-1280]	; 0xfffffb00
    4af0:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    4af4:	69576575 	ldmdbvs	r7, {r0, r2, r4, r5, r6, r8, sl, sp, lr}^
    4af8:	764f6874 			; <UNDEFINED> instruction: 0x764f6874
    4afc:	72777265 	rsbsvc	r7, r7, #1342177286	; 0x50000006
    4b00:	00657469 	rsbeq	r7, r5, r9, ror #8
    4b04:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    4b08:	7465476b 	strbtvc	r4, [r5], #-1899	; 0xfffff895
    4b0c:	6b636954 	blvs	18df064 <_Min_Stack_Size+0x18dee64>
    4b10:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    4b14:	6f724674 	svcvs	0x00724674
    4b18:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
    4b1c:	53787500 	cmnpl	r8, #0, 10
    4b20:	64657661 	strbtvs	r7, [r5], #-1633	; 0xfffff99f
    4b24:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    4b28:	70757272 	rsbsvc	r7, r5, r2, ror r2
    4b2c:	61745374 	cmnvs	r4, r4, ror r3
    4b30:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
    4b34:	7469426c 	strbtvc	r4, [r9], #-620	; 0xfffffd94
    4b38:	436f5473 	cmnmi	pc, #1929379840	; 0x73000000
    4b3c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    4b40:	6e456e4f 	cdpvs	14, 4, cr6, cr5, cr15, {2}
    4b44:	00797274 	rsbseq	r7, r9, r4, ror r2
    4b48:	6e655078 	mcrvs	0, 3, r5, cr5, cr8, {3}
    4b4c:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    4b50:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    4b54:	73694c79 	cmnvc	r9, #30976	; 0x7900
    4b58:	54760074 	ldrbtpl	r0, [r6], #-116	; 0xffffff8c
    4b5c:	506b7361 	rsbpl	r7, fp, r1, ror #6
    4b60:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    4b64:	44797469 	ldrbtmi	r7, [r9], #-1129	; 0xfffffb97
    4b68:	6e697369 	cdpvs	3, 6, cr7, cr9, cr9, {3}
    4b6c:	69726568 	ldmdbvs	r2!, {r3, r5, r6, r8, sl, sp, lr}^
    4b70:	74664174 	strbtvc	r4, [r6], #-372	; 0xfffffe8c
    4b74:	69547265 	ldmdbvs	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
    4b78:	756f656d 	strbvc	r6, [pc, #-1389]!	; 4613 <_Min_Stack_Size+0x4413>
    4b7c:	54780074 	ldrbtpl	r0, [r8], #-116	; 0xffffff8c
    4b80:	526b7361 	rsbpl	r7, fp, #-2080374783	; 0x84000001
    4b84:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
    4b88:	6f724665 	svcvs	0x00724665
    4b8c:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
    4b90:	61547600 	cmpvs	r4, r0, lsl #12
    4b94:	75536b73 	ldrbvc	r6, [r3, #-2931]	; 0xfffff48d
    4b98:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
    4b9c:	6c6c4164 	stfvse	f4, [ip], #-400	; 0xfffffe70
    4ba0:	6f4e6500 	svcvs	0x004e6500
    4ba4:	79666974 	stmdbvc	r6!, {r2, r4, r5, r6, r8, fp, sp, lr}^
    4ba8:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    4bac:	75006e6f 	strvc	r6, [r0, #-3695]	; 0xfffff191
    4bb0:	6c6e4f78 	stclvs	15, cr4, [lr], #-480	; 0xfffffe20
    4bb4:	656e4f79 	strbvs	r4, [lr, #-3961]!	; 0xfffff087
    4bb8:	6574754d 	ldrbvs	r7, [r4, #-1357]!	; 0xfffffab3
    4bbc:	6c654878 	stclvs	8, cr4, [r5], #-480	; 0xfffffe20
    4bc0:	54760064 	ldrbtpl	r0, [r6], #-100	; 0xffffff9c
    4bc4:	456b7361 	strbmi	r7, [fp, #-865]!	; 0xfffffc9f
    4bc8:	6353646e 	cmpvs	r3, #1845493760	; 0x6e000000
    4bcc:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
    4bd0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    4bd4:	61547875 	cmpvs	r4, r5, ror r8
    4bd8:	72506b73 	subsvc	r6, r0, #117760	; 0x1cc00
    4bdc:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4be0:	65477974 	strbvs	r7, [r7, #-2420]	; 0xfffff68c
    4be4:	43780074 	cmnmi	r8, #116	; 0x74
    4be8:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
    4bec:	6b636954 	blvs	18df144 <_Min_Stack_Size+0x18def44>
    4bf0:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    4bf4:	53780074 	cmnpl	r8, #116	; 0x74
    4bf8:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0xfffffc8b
    4bfc:	6465646e 	strbtvs	r6, [r5], #-1134	; 0xfffffb92
    4c00:	6b736154 	blvs	1cdd158 <_Min_Stack_Size+0x1cdcf58>
    4c04:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    4c08:	4f787000 	svcmi	0x00787000
    4c0c:	66726576 			; <UNDEFINED> instruction: 0x66726576
    4c10:	44776f6c 	ldrbtmi	r6, [r7], #-3948	; 0xfffff094
    4c14:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    4c18:	61546465 	cmpvs	r4, r5, ror #8
    4c1c:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    4c20:	70007473 	andvc	r7, r0, r3, ror r4
    4c24:	6d655478 	cfstrdvs	mvd5, [r5, #-480]!	; 0xfffffe20
    4c28:	54760070 	ldrbtpl	r0, [r6], #-112	; 0xffffff90
    4c2c:	506b7361 	rsbpl	r7, fp, r1, ror #6
    4c30:	6563616c 	strbvs	r6, [r3, #-364]!	; 0xfffffe94
    4c34:	76456e4f 	strbvc	r6, [r5], -pc, asr #28
    4c38:	4c746e65 	ldclmi	14, cr6, [r4], #-404	; 0xfffffe6c
    4c3c:	00747369 	rsbseq	r7, r4, r9, ror #6
    4c40:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    4c44:	6c65446b 	cfstrdvs	mvd4, [r5], #-428	; 0xfffffe54
    4c48:	70007961 	andvc	r7, r0, r1, ror #18
    4c4c:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    4c50:	636e496b 	cmnvs	lr, #1753088	; 0x1ac000
    4c54:	656d6572 	strbvs	r6, [sp, #-1394]!	; 0xfffffa8e
    4c58:	754d746e 	strbvc	r7, [sp, #-1134]	; 0xfffffb92
    4c5c:	48786574 	ldmdami	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    4c60:	43646c65 	cmnmi	r4, #25856	; 0x6500
    4c64:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    4c68:	4e6c7500 	cdpmi	5, 6, cr7, cr12, cr0, {0}
    4c6c:	6669746f 	strbtvs	r7, [r9], -pc, ror #8
    4c70:	56646569 	strbtpl	r6, [r4], -r9, ror #10
    4c74:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    4c78:	61547600 	cmpvs	r4, r0, lsl #12
    4c7c:	65526b73 	ldrbvs	r6, [r2, #-2931]	; 0xfffff48d
    4c80:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
    4c84:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 4b74 <_Min_Stack_Size+0x4974>
    4c88:	726f6e55 	rsbvc	r6, pc, #1360	; 0x550
    4c8c:	65726564 	ldrbvs	r6, [r2, #-1380]!	; 0xfffffa9c
    4c90:	65764564 	ldrbvs	r4, [r6, #-1380]!	; 0xfffffa9c
    4c94:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    4c98:	75007473 	strvc	r7, [r0, #-1139]	; 0xfffffb8d
    4c9c:	74754d78 	ldrbtvc	r4, [r5], #-3448	; 0xfffff288
    4ca0:	73657865 	cmnvc	r5, #6619136	; 0x650000
    4ca4:	646c6548 	strbtvs	r6, [ip], #-1352	; 0xfffffab8
    4ca8:	61547800 	cmpvs	r4, r0, lsl #16
    4cac:	72506b73 	subsvc	r6, r0, #117760	; 0x1cc00
    4cb0:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4cb4:	69447974 	stmdbvs	r4, {r2, r4, r5, r6, r8, fp, ip, sp, lr}^
    4cb8:	686e6973 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    4cbc:	74697265 	strbtvc	r7, [r9], #-613	; 0xfffffd9b
    4cc0:	61547800 	cmpvs	r4, r0, lsl #16
    4cc4:	65526b73 	ldrbvs	r6, [r2, #-2931]	; 0xfffff48d
    4cc8:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
    4ccc:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 4bbc <_Min_Stack_Size+0x49bc>
    4cd0:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    4cd4:	73694c74 	cmnvc	r9, #116, 24	; 0x7400
    4cd8:	53650074 	cmnpl	r5, #116	; 0x74
    4cdc:	61567465 	cmpvs	r6, r5, ror #8
    4ce0:	5765756c 	strbpl	r7, [r5, -ip, ror #10]!
    4ce4:	6f687469 	svcvs	0x00687469
    4ce8:	764f7475 			; <UNDEFINED> instruction: 0x764f7475
    4cec:	72777265 	rsbsvc	r7, r7, #1342177286	; 0x50000006
    4cf0:	00657469 	rsbeq	r7, r5, r9, ror #8
    4cf4:	74536c75 	ldrbvc	r6, [r3], #-3189	; 0xfffff38b
    4cf8:	446b6361 	strbtmi	r6, [fp], #-865	; 0xfffffc9f
    4cfc:	68747065 	ldmdavs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
    4d00:	68537800 	ldmdavs	r3, {fp, ip, sp, lr}^
    4d04:	646c756f 	strbtvs	r7, [ip], #-1391	; 0xfffffa91
    4d08:	616c6544 	cmnvs	ip, r4, asr #10
    4d0c:	72700079 	rsbsvc	r0, r0, #121	; 0x79
    4d10:	6c644976 			; <UNDEFINED> instruction: 0x6c644976
    4d14:	73615465 	cmnvc	r1, #1694498816	; 0x65000000
    4d18:	6c75006b 	ldclvs	0, cr0, [r5], #-428	; 0xfffffe54
    4d1c:	6b736154 	blvs	1cdd274 <_Min_Stack_Size+0x1cdd074>
    4d20:	69746f4e 	ldmdbvs	r4!, {r1, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
    4d24:	61547966 	cmpvs	r4, r6, ror #18
    4d28:	7800656b 	stmdavc	r0, {r0, r1, r3, r5, r6, r8, sl, sp, lr}
    4d2c:	6b736154 	blvs	1cdd284 <_Min_Stack_Size+0x1cdd084>
    4d30:	69746f4e 	ldmdbvs	r4!, {r1, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
    4d34:	61577966 	cmpvs	r7, r6, ror #18
    4d38:	78007469 	stmdavc	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    4d3c:	6b736154 	blvs	1cdd294 <_Min_Stack_Size+0x1cdd094>
    4d40:	61657243 	cmnvs	r5, r3, asr #4
    4d44:	70006574 	andvc	r6, r0, r4, ror r5
    4d48:	64417672 	strbvs	r7, [r1], #-1650	; 0xfffff98e
    4d4c:	77654e64 	strbvc	r4, [r5, -r4, ror #28]!
    4d50:	6b736154 	blvs	1cdd2a8 <_Min_Stack_Size+0x1cdd0a8>
    4d54:	65526f54 	ldrbvs	r6, [r2, #-3924]	; 0xfffff0ac
    4d58:	4c796461 	cfldrdmi	mvd6, [r9], #-388	; 0xfffffe7c
    4d5c:	00747369 	rsbseq	r7, r4, r9, ror #6
    4d60:	654e7870 	strbvs	r7, [lr, #-2160]	; 0xfffff790
    4d64:	42435477 	submi	r5, r3, #1996488704	; 0x77000000
    4d68:	54787000 	ldrbtpl	r7, [r8], #-0
    4d6c:	436b7361 	cmnmi	fp, #-2080374783	; 0x84000001
    4d70:	0065646f 	rsbeq	r6, r5, pc, ror #8
    4d74:	6f6d654d 	svcvs	0x006d654d
    4d78:	65527972 	ldrbvs	r7, [r2, #-2418]	; 0xfffff68e
    4d7c:	6e6f6967 	vnmulvs.f16	s13, s30, s15	; <UNPREDICTABLE>
    4d80:	7800745f 	stmdavc	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
    4d84:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0xfffffab2
    4d88:	6b736154 	blvs	1cdd2e0 <_Min_Stack_Size+0x1cdd0e0>
    4d8c:	6c626e55 	stclvs	14, cr6, [r2], #-340	; 0xfffffeac
    4d90:	546b636f 	strbtpl	r6, [fp], #-879	; 0xfffffc91
    4d94:	00656d69 	rsbeq	r6, r5, r9, ror #26
    4d98:	63695478 	cmnvs	r9, #120, 8	; 0x78000000
    4d9c:	756f436b 	strbvc	r4, [pc, #-875]!	; 4a39 <_Min_Stack_Size+0x4839>
    4da0:	7500746e 	strvc	r7, [r0, #-1134]	; 0xfffffb92
    4da4:	7465526c 	strbtvc	r5, [r5], #-620	; 0xfffffd94
    4da8:	006e7275 	rsbeq	r7, lr, r5, ror r2
    4dac:	6f506375 	svcvs	0x00506375
    4db0:	6f437472 	svcvs	0x00437472
    4db4:	4c746e75 	ldclmi	14, cr6, [r4], #-468	; 0xfffffe2c
    4db8:	69646165 	stmdbvs	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    4dbc:	655a676e 	ldrbvs	r6, [sl, #-1902]	; 0xfffff892
    4dc0:	00736f72 	rsbseq	r6, r3, r2, ror pc
    4dc4:	654c6c75 	strbvs	r6, [ip, #-3189]	; 0xfffff38b
    4dc8:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    4dcc:	79426e49 	stmdbvc	r2, {r0, r3, r6, r9, sl, fp, sp, lr}^
    4dd0:	00736574 	rsbseq	r6, r3, r4, ror r5
    4dd4:	68436c75 	stmdavs	r3, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    4dd8:	566b6365 	strbtpl	r6, [fp], -r5, ror #6
    4ddc:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    4de0:	76727000 	ldrbtvc	r7, [r2], -r0
    4de4:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    4de8:	78654e74 	stmdavc	r5!, {r2, r4, r5, r6, r9, sl, fp, lr}^
    4dec:	73615474 	cmnvc	r1, #116, 8	; 0x74000000
    4df0:	626e556b 	rsbvs	r5, lr, #448790528	; 0x1ac00000
    4df4:	6b636f6c 	blvs	18e0bac <_Min_Stack_Size+0x18e09ac>
    4df8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    4dfc:	4e787500 	cdpmi	5, 7, cr7, cr8, cr0, {0}
    4e00:	72507765 	subsvc	r7, r0, #26476544	; 0x1940000
    4e04:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4e08:	54007974 	strpl	r7, [r0], #-2420	; 0xfffff68c
    4e0c:	466b7361 	strbtmi	r7, [fp], -r1, ror #6
    4e10:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
    4e14:	5f6e6f69 	svcpl	0x006e6f69
    4e18:	75700074 	ldrbvc	r0, [r0, #-116]!	; 0xffffff8c
    4e1c:	6572506c 	ldrbvs	r5, [r2, #-108]!	; 0xffffff94
    4e20:	756f6976 	strbvc	r6, [pc, #-2422]!	; 44b2 <_Min_Stack_Size+0x42b2>
    4e24:	746f4e73 	strbtvc	r4, [pc], #-3699	; 4e2c <_Min_Stack_Size+0x4c2c>
    4e28:	63696669 	cmnvs	r9, #110100480	; 0x6900000
    4e2c:	6f697461 	svcvs	0x00697461
    4e30:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    4e34:	70006575 	andvc	r6, r0, r5, ror r5
    4e38:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	; 0xfffffe20
    4e3c:	74754f65 	ldrbtvc	r4, [r5], #-3941	; 0xfffff09b
    4e40:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
    4e44:	506b7361 	rsbpl	r7, fp, r1, ror #6
    4e48:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    4e4c:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
    4e50:	72467465 	subvc	r7, r6, #1694498816	; 0x65000000
    4e54:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
    4e58:	54780052 	ldrbtpl	r0, [r8], #-82	; 0xffffffae
    4e5c:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
    4e60:	69547465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
    4e64:	6f436b63 	svcvs	0x00436b63
    4e68:	00746e75 	rsbseq	r6, r4, r5, ror lr
    4e6c:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    4e70:	746e496b 	strbtvc	r4, [lr], #-2411	; 0xfffff695
    4e74:	616e7265 	cmnvs	lr, r5, ror #4
    4e78:	7465536c 	strbtvc	r5, [r5], #-876	; 0xfffffc94
    4e7c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    4e80:	5374754f 	cmnpl	r4, #331350016	; 0x13c00000
    4e84:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    4e88:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
    4e8c:	4e6b7361 	cdpmi	3, 6, cr7, cr11, cr1, {3}
    4e90:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
    4e94:	41650072 	smcmi	20482	; 0x5002
    4e98:	6f697463 	svcvs	0x00697463
    4e9c:	7875006e 	ldmdavc	r5!, {r1, r2, r3, r5, r6}^
    4ea0:	6b736154 	blvs	1cdd3f8 <_Min_Stack_Size+0x1cdd1f8>
    4ea4:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    4ea8:	65764574 	ldrbvs	r4, [r6, #-1396]!	; 0xfffffa8c
    4eac:	7449746e 	strbvc	r7, [r9], #-1134	; 0xfffffb92
    4eb0:	61566d65 	cmpvs	r6, r5, ror #26
    4eb4:	0065756c 	rsbeq	r7, r5, ip, ror #10
    4eb8:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    4ebc:	6972506b 	ldmdbvs	r2!, {r0, r1, r3, r5, r6, ip, lr}^
    4ec0:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    4ec4:	74655379 	strbtvc	r5, [r5], #-889	; 0xfffffc87
    4ec8:	61547800 	cmpvs	r4, r0, lsl #16
    4ecc:	6f546b73 	svcvs	0x00546b73
    4ed0:	72657551 	rsbvc	r7, r5, #339738624	; 0x14400000
    4ed4:	54780079 	ldrbtpl	r0, [r8], #-121	; 0xffffff87
    4ed8:	546b7361 	strbtpl	r7, [fp], #-865	; 0xfffffc9f
    4edc:	746f4e6f 	strbtvc	r4, [pc], #-3695	; 4ee4 <_Min_Stack_Size+0x4ce4>
    4ee0:	00796669 	rsbseq	r6, r9, r9, ror #12
    4ee4:	74655365 	strbtvc	r5, [r5], #-869	; 0xfffffc9b
    4ee8:	73746942 	cmnvc	r4, #1081344	; 0x108000
    4eec:	454d7800 	strbmi	r7, [sp, #-2048]	; 0xfffff800
    4ef0:	59524f4d 	ldmdbpl	r2, {r0, r2, r3, r6, r8, r9, sl, fp, lr}^
    4ef4:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
    4ef8:	004e4f49 	subeq	r4, lr, r9, asr #30
    4efc:	72507875 	subsvc	r7, r0, #7667712	; 0x750000
    4f00:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4f04:	6f547974 	svcvs	0x00547974
    4f08:	00657355 	rsbeq	r7, r5, r5, asr r3
    4f0c:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    4f10:	6977536b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6, r8, r9, ip, lr}^
    4f14:	43686374 	cmnmi	r8, #116, 6	; 0xd0000001
    4f18:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
    4f1c:	78007478 	stmdavc	r0, {r3, r4, r5, r6, sl, ip, sp, lr}
    4f20:	4f6d754e 	svcmi	0x006d754e
    4f24:	65764f66 	ldrbvs	r4, [r6, #-3942]!	; 0xfffff09a
    4f28:	6f6c6672 	svcvs	0x006c6672
    4f2c:	78007377 	stmdavc	r0, {r0, r1, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    4f30:	656c6449 	strbvs	r6, [ip, #-1097]!	; 0xfffffbb7
    4f34:	6b736154 	blvs	1cdd48c <_Min_Stack_Size+0x1cdd28c>
    4f38:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    4f3c:	7500656c 	strvc	r6, [r0, #-1388]	; 0xfffffa94
    4f40:	67694878 			; <UNDEFINED> instruction: 0x67694878
    4f44:	74736568 	ldrbtvc	r6, [r3], #-1384	; 0xfffffa98
    4f48:	6f697250 	svcvs	0x00697250
    4f4c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    4f50:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
    4f54:	54676e69 	strbtpl	r6, [r7], #-3689	; 0xfffff197
    4f58:	006b7361 	rsbeq	r7, fp, r1, ror #6
    4f5c:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
    4f60:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    4f64:	73696c61 	cmnvc	r9, #24832	; 0x6100
    4f68:	77654e65 	strbvc	r4, [r5, -r5, ror #28]!
    4f6c:	6b736154 	blvs	1cdd4c4 <_Min_Stack_Size+0x1cdd2c4>
    4f70:	61547800 	cmpvs	r4, r0, lsl #16
    4f74:	65526b73 	ldrbvs	r6, [r2, #-2931]	; 0xfffff48d
    4f78:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0xfffffa8d
    4f7c:	006c6c41 	rsbeq	r6, ip, r1, asr #24
    4f80:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    4f84:	746f4e6b 	strbtvc	r4, [pc], #-3691	; 4f8c <_Min_Stack_Size+0x4d8c>
    4f88:	47796669 	ldrbmi	r6, [r9, -r9, ror #12]!
    4f8c:	46657669 	strbtmi	r7, [r5], -r9, ror #12
    4f90:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    4f94:	70005253 	andvc	r5, r0, r3, asr r2
    4f98:	6c654478 	cfstrdvs	mvd4, [r5], #-480	; 0xfffffe20
    4f9c:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
    4fa0:	6b736154 	blvs	1cdd4f8 <_Min_Stack_Size+0x1cdd2f8>
    4fa4:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    4fa8:	76727000 	ldrbtvc	r7, [r2], -r0
    4fac:	6b736154 	blvs	1cdd504 <_Min_Stack_Size+0x1cdd304>
    4fb0:	61547349 	cmpvs	r4, r9, asr #6
    4fb4:	75536b73 	ldrbvc	r6, [r3, #-2931]	; 0xfffff48d
    4fb8:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
    4fbc:	00646564 	rsbeq	r6, r4, r4, ror #10
    4fc0:	69775378 	ldmdbvs	r7!, {r3, r4, r5, r6, r8, r9, ip, lr}^
    4fc4:	52686374 	rsbpl	r6, r8, #116, 6	; 0xd0000001
    4fc8:	69757165 	ldmdbvs	r5!, {r0, r2, r5, r6, r8, ip, sp, lr}^
    4fcc:	00646572 	rsbeq	r6, r4, r2, ror r5
    4fd0:	754d7870 	strbvc	r7, [sp, #-2160]	; 0xfffff790
    4fd4:	48786574 	ldmdami	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    4fd8:	65646c6f 	strbvs	r6, [r4, #-3183]!	; 0xfffff391
    4fdc:	78700072 	ldmdavc	r0!, {r1, r4, r5, r6}^
    4fe0:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
    4fe4:	6c75006b 	ldclvs	0, cr0, [r5], #-428	; 0xfffffe54
    4fe8:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    4fec:	54780065 	ldrbtpl	r0, [r8], #-101	; 0xffffff9b
    4ff0:	546b7361 	strbtpl	r7, [fp], #-865	; 0xfffffc9f
    4ff4:	7375536f 	cmnvc	r5, #-1140850687	; 0xbc000001
    4ff8:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    4ffc:	61547800 	cmpvs	r4, r0, lsl #16
    5000:	68436b73 	stmdavs	r3, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    5004:	466b6365 	strbtmi	r6, [fp], -r5, ror #6
    5008:	6954726f 	ldmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    500c:	754f656d 	strbvc	r6, [pc, #-1389]	; 4aa7 <_Min_Stack_Size+0x48a7>
    5010:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
    5014:	76657250 			; <UNDEFINED> instruction: 0x76657250
    5018:	73756f69 	cmnvc	r5, #420	; 0x1a4
    501c:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    5020:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    5024:	52637500 	rsbpl	r7, r3, #0, 10
    5028:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
    502c:	7570006e 	ldrbvc	r0, [r0, #-110]!	; 0xffffff92
    5030:	746f4e6c 	strbtvc	r4, [pc], #-3692	; 5038 <_Min_Stack_Size+0x4e38>
    5034:	63696669 	cmnvs	r9, #110100480	; 0x6900000
    5038:	6f697461 	svcvs	0x00697461
    503c:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    5040:	76006575 			; <UNDEFINED> instruction: 0x76006575
    5044:	6b736154 	blvs	1cdd59c <_Min_Stack_Size+0x1cdd39c>
    5048:	7373694d 	cmnvc	r3, #1261568	; 0x134000
    504c:	69596465 	ldmdbvs	r9, {r0, r2, r5, r6, sl, sp, lr}^
    5050:	00646c65 	rsbeq	r6, r4, r5, ror #24
    5054:	65507875 	ldrbvs	r7, [r0, #-2165]	; 0xfffff78b
    5058:	6465646e 	strbtvs	r6, [r5], #-1134	; 0xfffffb92
    505c:	6b636954 	blvs	18df5b4 <_Min_Stack_Size+0x18df3b4>
    5060:	54780073 	ldrbtpl	r0, [r8], #-115	; 0xffffff8d
    5064:	506b7361 	rsbpl	r7, fp, r1, ror #6
    5068:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    506c:	49797469 	ldmdbmi	r9!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    5070:	7265686e 	rsbvc	r6, r5, #7208960	; 0x6e0000
    5074:	70007469 	andvc	r7, r0, r9, ror #8
    5078:	74754d78 	ldrbtvc	r4, [r5], #-3448	; 0xfffff288
    507c:	6f487865 	svcvs	0x00487865
    5080:	7265646c 	rsbvc	r6, r5, #108, 8	; 0x6c000000
    5084:	00424354 	subeq	r4, r2, r4, asr r3
    5088:	61546370 	cmpvs	r4, r0, ror r3
    508c:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xfffff48d
    5090:	6d614e74 	stclvs	14, cr4, [r1, #-464]!	; 0xfffffe30
    5094:	54780065 	ldrbtpl	r0, [r8], #-101	; 0xffffff9b
    5098:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
    509c:	61547600 	cmpvs	r4, r0, lsl #12
    50a0:	74536b73 	ldrbvc	r6, [r3], #-2931	; 0xfffff48d
    50a4:	53747261 	cmnpl	r4, #268435462	; 0x10000006
    50a8:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    50ac:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    50b0:	61437800 	cmpvs	r3, r0, lsl #16
    50b4:	6f6c426e 	svcvs	0x006c426e
    50b8:	6e496b63 	vmlsvs.f64	d22, d9, d19
    50bc:	69666564 	stmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    50c0:	6574696e 	ldrbvs	r6, [r4, #-2414]!	; 0xfffff692
    50c4:	7000796c 	andvc	r7, r0, ip, ror #18
    50c8:	74536c75 	ldrbvc	r6, [r3], #-3189	; 0xfffff38b
    50cc:	006b6361 	rsbeq	r6, fp, r1, ror #6
    50d0:	61427670 	hvcvs	10080	; 0x2760
    50d4:	64416573 	strbvs	r6, [r1], #-1395	; 0xfffffa8d
    50d8:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    50dc:	54780073 	ldrbtpl	r0, [r8], #-115	; 0xffffff8d
    50e0:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
    50e4:	65446f54 	strbvs	r6, [r4, #-3924]	; 0xfffff0ac
    50e8:	0079616c 	rsbseq	r6, r9, ip, ror #2
    50ec:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    50f0:	616c506b 	cmnvs	ip, fp, rrx
    50f4:	6e4f6563 	cdpvs	5, 4, cr6, cr15, cr3, {3}
    50f8:	726f6e55 	rsbvc	r6, pc, #1360	; 0x550
    50fc:	65726564 	ldrbvs	r6, [r2, #-1380]!	; 0xfffffa9c
    5100:	65764564 	ldrbvs	r4, [r6, #-1380]!	; 0xfffffa9c
    5104:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    5108:	78007473 	stmdavc	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    510c:	6b736154 	blvs	1cdd664 <_Min_Stack_Size+0x1cdd464>
    5110:	69746f4e 	ldmdbvs	r4!, {r1, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
    5114:	74537966 	ldrbvc	r7, [r3], #-2406	; 0xfffff69a
    5118:	43657461 	cmnmi	r5, #1627389952	; 0x61000000
    511c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    5120:	54787000 	ldrbtpl	r7, [r8], #-0
    5124:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
    5128:	61576f54 	cmpvs	r7, r4, asr pc
    512c:	75007469 	strvc	r7, [r0, #-1129]	; 0xfffffb97
    5130:	706f5478 	rsbvc	r5, pc, r8, ror r4	; <UNPREDICTABLE>
    5134:	6f697250 	svcvs	0x00697250
    5138:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    513c:	42787500 	rsbsmi	r7, r8, #0, 10
    5140:	50657361 	rsbpl	r7, r5, r1, ror #6
    5144:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    5148:	00797469 	rsbseq	r7, r9, r9, ror #8
    514c:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    5150:	6c65446b 	cfstrdvs	mvd4, [r5], #-428	; 0xfffffe54
    5154:	6e557961 	vnmlavs.f16	s15, s10, s3	; <UNPREDICTABLE>
    5158:	006c6974 	rsbeq	r6, ip, r4, ror r9
    515c:	72507875 	subsvc	r7, r0, #7667712	; 0x750000
    5160:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    5164:	73557974 	cmpvc	r5, #116, 18	; 0x1d0000
    5168:	6e4f6465 	cdpvs	4, 4, cr6, cr15, cr5, {3}
    516c:	72746e45 	rsbsvc	r6, r4, #1104	; 0x450
    5170:	43540079 	cmpmi	r4, #121	; 0x79
    5174:	00745f42 	rsbseq	r5, r4, r2, asr #30
    5178:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    517c:	7375536b 	cmnvc	r5, #-1409286143	; 0xac000001
    5180:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    5184:	6c417800 	mcrrvs	8, 0, r7, r1, cr0
    5188:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    518c:	65695979 	strbvs	r5, [r9, #-2425]!	; 0xfffff687
    5190:	6465646c 	strbtvs	r6, [r5], #-1132	; 0xfffffb94
    5194:	61547800 	cmpvs	r4, r0, lsl #16
    5198:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xfffff48d
    519c:	72754374 	rsbsvc	r4, r5, #116, 6	; 0xd0000001
    51a0:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    51a4:	6b736154 	blvs	1cdd6fc <_Min_Stack_Size+0x1cdd4fc>
    51a8:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    51ac:	7800656c 	stmdavc	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    51b0:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    51b4:	00736e6f 	rsbseq	r6, r3, pc, ror #28
    51b8:	41767270 	cmnmi	r6, r0, ror r2
    51bc:	75436464 	strbvc	r6, [r3, #-1124]	; 0xfffffb9c
    51c0:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    51c4:	73615474 	cmnvc	r1, #116, 8	; 0x74000000
    51c8:	446f546b 	strbtmi	r5, [pc], #-1131	; 51d0 <_Min_Stack_Size+0x4fd0>
    51cc:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    51d0:	694c6465 	stmdbvs	ip, {r0, r2, r5, r6, sl, sp, lr}^
    51d4:	70007473 	andvc	r7, r0, r3, ror r4
    51d8:	72754378 	rsbsvc	r4, r5, #120, 6	; 0xe0000001
    51dc:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    51e0:	00424354 	subeq	r4, r2, r4, asr r3
    51e4:	75437875 	strbvc	r7, [r3, #-2165]	; 0xfffff78b
    51e8:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    51ec:	6d754e74 	ldclvs	14, cr4, [r5, #-464]!	; 0xfffffe30
    51f0:	4f726562 	svcmi	0x00726562
    51f4:	73615466 	cmnvc	r1, #1711276032	; 0x66000000
    51f8:	7800736b 	stmdavc	r0, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}
    51fc:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    5200:	72636e49 	rsbvc	r6, r3, #1168	; 0x490
    5204:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
    5208:	54780074 	ldrbtpl	r0, [r8], #-116	; 0xffffff8c
    520c:	54656d69 	strbtpl	r6, [r5], #-3433	; 0xfffff297
    5210:	6b61576f 	blvs	185afd4 <_Min_Stack_Size+0x185add4>
    5214:	53780065 	cmnpl	r8, #101	; 0x65
    5218:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    521c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    5220:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
    5224:	54787000 	ldrbtpl	r7, [r8], #-0
    5228:	75004243 	strvc	r4, [r0, #-579]	; 0xfffffdbd
    522c:	68635378 	stmdavs	r3!, {r3, r4, r5, r6, r8, r9, ip, lr}^
    5230:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    5234:	75537265 	ldrbvc	r7, [r3, #-613]	; 0xfffffd9b
    5238:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
    523c:	00646564 	rsbeq	r6, r4, r4, ror #10
    5240:	6f547870 	svcvs	0x00547870
    5244:	53664f70 	cmnpl	r6, #112, 30	; 0x1c0
    5248:	6b636174 	blvs	18dd820 <_Min_Stack_Size+0x18dd620>
    524c:	61547600 	cmpvs	r4, r0, lsl #12
    5250:	65526b73 	ldrbvs	r6, [r2, #-2931]	; 0xfffff48d
    5254:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0xfffffa8d
    5258:	76727000 	ldrbtvc	r7, [r2], -r0
    525c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    5260:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    5264:	61546573 	cmpvs	r4, r3, ror r5
    5268:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    526c:	00737473 	rsbseq	r7, r3, r3, ror r4
    5270:	76457870 			; <UNDEFINED> instruction: 0x76457870
    5274:	4c746e65 	ldclmi	14, cr6, [r4], #-404	; 0xfffffe6c
    5278:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
    527c:	006d6574 	rsbeq	r6, sp, r4, ror r5
    5280:	72437870 	subvc	r7, r3, #112, 16	; 0x700000
    5284:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
    5288:	73615464 	cmnvc	r1, #100, 8	; 0x64000000
    528c:	7270006b 	rsbsvc	r0, r0, #107	; 0x6b
    5290:	65684376 	strbvs	r4, [r8, #-886]!	; 0xfffffc8a
    5294:	61546b63 	cmpvs	r4, r3, ror #22
    5298:	57736b73 			; <UNDEFINED> instruction: 0x57736b73
    529c:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
    52a0:	6554676e 	ldrbvs	r6, [r4, #-1902]	; 0xfffff892
    52a4:	6e696d72 	mcrvs	13, 3, r6, cr9, cr2, {3}
    52a8:	6f697461 	svcvs	0x00697461
    52ac:	7875006e 	ldmdavc	r5!, {r1, r2, r3, r5, r6}^
    52b0:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    52b4:	42746e65 	rsbsmi	r6, r4, #1616	; 0x650
    52b8:	50657361 	rsbpl	r7, r5, r1, ror #6
    52bc:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    52c0:	00797469 	rsbseq	r7, r9, r9, ror #8
    52c4:	65695978 	strbvs	r5, [r9, #-2424]!	; 0xfffff688
    52c8:	6550646c 	ldrbvs	r6, [r0, #-1132]	; 0xfffffb94
    52cc:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    52d0:	50760067 	rsbspl	r0, r6, r7, rrx
    52d4:	4574726f 	ldrbmi	r7, [r4, #-623]!	; 0xfffffd91
    52d8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    52dc:	74697243 	strbtvc	r7, [r9], #-579	; 0xfffffdbd
    52e0:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
    52e4:	43787000 	cmnmi	r8, #0
    52e8:	0065646f 	rsbeq	r6, r5, pc, ror #8
    52ec:	726f5076 	rsbvc	r5, pc, #118	; 0x76
    52f0:	646e4574 	strbtvs	r4, [lr], #-1396	; 0xfffffa8c
    52f4:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
    52f8:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    52fc:	50780072 	rsbspl	r0, r8, r2, ror r0
    5300:	5074726f 	rsbspl	r7, r4, pc, ror #4
    5304:	53646e65 	cmnpl	r4, #1616	; 0x650
    5308:	6e614856 	mcrvs	8, 3, r4, cr1, cr6, {2}
    530c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    5310:	76727000 	ldrbtvc	r7, [r2], -r0
    5314:	6b736154 	blvs	1cdd86c <_Min_Stack_Size+0x1cdd66c>
    5318:	74697845 	strbtvc	r7, [r9], #-2117	; 0xfffff7bb
    531c:	6f727245 	svcvs	0x00727245
    5320:	6c750072 	ldclvs	0, cr0, [r5], #-456	; 0xfffffe38
    5324:	6d6d7544 	cfstr64vs	mvdx7, [sp, #-272]!	; 0xfffffef0
    5328:	78700079 	ldmdavc	r0!, {r0, r3, r4, r5, r6}^
    532c:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    5330:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    5334:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    5338:	74536573 	ldrbvc	r6, [r3], #-1395	; 0xfffffa8d
    533c:	006b6361 	rsbeq	r6, fp, r1, ror #6
    5340:	726f5078 	rsbvc	r5, pc, #120	; 0x78
    5344:	73795374 	cmnvc	r9, #116, 6	; 0xd0000001
    5348:	6b636954 	blvs	18df8a0 <_Min_Stack_Size+0x18df6a0>
    534c:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    5350:	0072656c 	rsbseq	r6, r2, ip, ror #10
    5354:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 52a0 <_Min_Stack_Size+0x50a0>
    5358:	69762f65 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    535c:	76737572 			; <UNDEFINED> instruction: 0x76737572
    5360:	4144542f 	cmpmi	r4, pc, lsr #8
    5364:	2d544153 	ldfcse	f4, [r4, #-332]	; 0xfffffeb4
    5368:	2f544f49 	svccs	0x00544f49
    536c:	702f534f 	eorvc	r5, pc, pc, asr #6
    5370:	6174726f 	cmnvs	r4, pc, ror #4
    5374:	2f656c62 	svccs	0x00656c62
    5378:	2f434347 	svccs	0x00434347
    537c:	5f4d5241 	svcpl	0x004d5241
    5380:	2f334d43 	svccs	0x00334d43
    5384:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    5388:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
    538c:	69724378 	ldmdbvs	r2!, {r3, r4, r5, r6, r8, r9, lr}^
    5390:	61636974 	smcvs	13972	; 0x3694
    5394:	73654e6c 	cmnvc	r5, #108, 28	; 0x6c0
    5398:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    539c:	6f507600 	svcvs	0x00507600
    53a0:	65537472 	ldrbvs	r7, [r3, #-1138]	; 0xfffffb8e
    53a4:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
    53a8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    53ac:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    53b0:	70757272 	rsbsvc	r7, r5, r2, ror r2
    53b4:	50760074 	rsbspl	r0, r6, r4, ror r0
    53b8:	5374726f 	cmnpl	r4, #-268435450	; 0xf0000006
    53bc:	61484356 	cmpvs	r8, r6, asr r3
    53c0:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    53c4:	50760072 	rsbspl	r0, r6, r2, ror r0
    53c8:	4574726f 	ldrbmi	r7, [r4, #-623]!	; 0xfffffd91
    53cc:	43746978 	cmnmi	r4, #120, 18	; 0x1e0000
    53d0:	69746972 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    53d4:	006c6163 	rsbeq	r6, ip, r3, ror #2
    53d8:	50767270 	rsbspl	r7, r6, r0, ror r2
    53dc:	5374726f 	cmnpl	r4, #-268435450	; 0xf0000006
    53e0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    53e4:	73726946 	cmnvc	r2, #1146880	; 0x118000
    53e8:	73615474 	cmnvc	r1, #116, 8	; 0x74000000
    53ec:	5078006b 	rsbspl	r0, r8, fp, rrx
    53f0:	5374726f 	cmnpl	r4, #-268435450	; 0xf0000006
    53f4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    53f8:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
    53fc:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    5400:	682f0072 	stmdavs	pc!, {r1, r4, r5, r6}	; <UNPREDICTABLE>
    5404:	2f656d6f 	svccs	0x00656d6f
    5408:	75726976 	ldrbvc	r6, [r2, #-2422]!	; 0xfffff68a
    540c:	542f7673 	strtpl	r7, [pc], #-1651	; 5414 <_Min_Stack_Size+0x5214>
    5410:	41534144 	cmpmi	r3, r4, asr #2
    5414:	4f492d54 	svcmi	0x00492d54
    5418:	534f2f54 	movtpl	r2, #65364	; 0xff54
    541c:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
    5420:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    5424:	654d2f65 	strbvs	r2, [sp, #-3941]	; 0xfffff09b
    5428:	6e614d6d 	cdpvs	13, 6, cr4, cr1, cr13, {3}
    542c:	65682f67 	strbvs	r2, [r8, #-3943]!	; 0xfffff099
    5430:	315f7061 	cmpcc	pc, r1, rrx
    5434:	7600632e 	strvc	r6, [r0], -lr, lsr #6
    5438:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    543c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    5440:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    5444:	6c426573 	cfstr64vs	mvdx6, [r2], {115}	; 0x73
    5448:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    544c:	6f507800 	svcvs	0x00507800
    5450:	65477472 	strbvs	r7, [r7, #-1138]	; 0xfffffb8e
    5454:	65724674 	ldrbvs	r4, [r2, #-1652]!	; 0xfffff98c
    5458:	61654865 	cmnvs	r5, r5, ror #16
    545c:	7a695370 	bvc	1a5a224 <_Min_Stack_Size+0x1a5a024>
    5460:	76700065 	ldrbtvc	r0, [r0], -r5, rrx
    5464:	75746552 	ldrbvc	r6, [r4, #-1362]!	; 0xfffffaae
    5468:	78006e72 	stmdavc	r0, {r1, r4, r5, r6, r9, sl, fp, sp, lr}
    546c:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0xfffffab2
    5470:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    5474:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
    5478:	63757000 	cmnvs	r5, #0
    547c:	67696c41 	strbvs	r6, [r9, -r1, asr #24]!
    5480:	4864656e 	stmdami	r4!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
    5484:	00706165 	rsbseq	r6, r0, r5, ror #2
    5488:	6f507670 	svcvs	0x00507670
    548c:	614d7472 	hvcvs	55106	; 0xd742
    5490:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    5494:	48637500 	stmdami	r3!, {r8, sl, ip, sp, lr}^
    5498:	00706165 	rsbseq	r6, r0, r5, ror #2
    549c:	6e615778 	mcrvs	7, 3, r5, cr1, cr8, {3}
    54a0:	53646574 	cmnpl	r4, #116, 10	; 0x1d000000
    54a4:	00657a69 	rsbeq	r7, r5, r9, ror #20
    54a8:	726f5076 	rsbvc	r5, pc, #118	; 0x76
    54ac:	65724674 	ldrbvs	r4, [r2, #-1652]!	; 0xfffff98c
    54b0:	6c610065 	stclvs	0, cr0, [r1], #-404	; 0xfffffe6c
    54b4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
    54b8:	64615f64 	strbtvs	r5, [r1], #-3940	; 0xfffff09c
    54bc:	47007264 	strmi	r7, [r0, -r4, ror #4]
    54c0:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
    54c4:	35203131 	strcc	r3, [r0, #-305]!	; 0xfffffecf
    54c8:	312e342e 			; <UNDEFINED> instruction: 0x312e342e
    54cc:	31303220 	teqcc	r0, r0, lsr #4
    54d0:	31393036 	teqcc	r9, r6, lsr r0
    54d4:	6d2d2039 	stcvs	0, cr2, [sp, #-228]!	; 0xffffff1c
    54d8:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    54dc:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
    54e0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    54e4:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    54e8:	6d2d3776 	stcvs	7, cr3, [sp, #-472]!	; 0xfffffe28
    54ec:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
    54f0:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    54f4:	616d2d20 	cmnvs	sp, r0, lsr #26
    54f8:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
    54fc:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    5500:	206d2d37 	rsbcs	r2, sp, r7, lsr sp
    5504:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    5508:	2d20324f 	sfmcs	f3, 4, [r0, #-316]!	; 0xfffffec4
    550c:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; 537c <_Min_Stack_Size+0x517c>
    5510:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5514:	006e6974 	rsbeq	r6, lr, r4, ror r9
    5518:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    551c:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    5520:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5524:	41582d62 	cmpmi	r8, r2, ror #26
    5528:	50317a75 	eorspl	r7, r1, r5, ror sl
    552c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5530:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    5534:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    5538:	30322e30 	eorscc	r2, r2, r0, lsr lr
    553c:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    5540:	622f3732 	eorvs	r3, pc, #13107200	; 0xc80000
    5544:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    5548:	6e616e5f 	mcrvs	14, 3, r6, cr1, cr15, {2}
    554c:	72612f6f 	rsbvc	r2, r1, #444	; 0x1bc
    5550:	6f6e2d6d 	svcvs	0x006e2d6d
    5554:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5558:	2f696261 	svccs	0x00696261
    555c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    5560:	2f6d2d37 	svccs	0x006d2d37
    5564:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5568:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 53cc <_Min_Stack_Size+0x51cc>
    556c:	2f636269 	svccs	0x00636269
    5570:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    5574:	2e00676e 	cdpcs	7, 0, cr6, cr0, cr14, {3}
    5578:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    557c:	2f2e2e2f 	svccs	0x002e2e2f
    5580:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5584:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5588:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    558c:	2f62696c 	svccs	0x0062696c
    5590:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5594:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    5598:	2f676e69 	svccs	0x00676e69
    559c:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
    55a0:	632e7465 			; <UNDEFINED> instruction: 0x632e7465
    55a4:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    55a8:	00746573 	rsbseq	r6, r4, r3, ror r5
    55ac:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    55b0:	5f00636f 	svcpl	0x0000636f
    55b4:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
    55b8:	5f003834 	svcpl	0x00003834
    55bc:	72656d65 	rsbvc	r6, r5, #6464	; 0x1940
    55c0:	636e6567 	cmnvs	lr, #432013312	; 0x19c00000
    55c4:	775f0079 			; <UNDEFINED> instruction: 0x775f0079
    55c8:	6f747263 	svcvs	0x00747263
    55cc:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
    55d0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    55d4:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
    55d8:	6c616e67 	stclvs	14, cr6, [r1], #-412	; 0xfffffe64
    55dc:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
    55e0:	626c5f00 	rsbvs	r5, ip, #0, 30
    55e4:	7a697366 	bvc	1a62384 <_Min_Stack_Size+0x1a62184>
    55e8:	6d5f0065 	ldclvs	0, cr0, [pc, #-404]	; 545c <_Min_Stack_Size+0x525c>
    55ec:	6f747262 	svcvs	0x00747262
    55f0:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
    55f4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    55f8:	63775f00 	cmnvs	r7, #0, 30
    55fc:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
    5600:	6174735f 	cmnvs	r4, pc, asr r3
    5604:	5f006574 	svcpl	0x00006574
    5608:	5f6d745f 	svcpl	0x006d745f
    560c:	00636573 	rsbeq	r6, r3, r3, ror r5
    5610:	7562755f 	strbvc	r7, [r2, #-1375]!	; 0xfffffaa1
    5614:	5f5f0066 	svcpl	0x005f0066
    5618:	685f6d74 	ldmdavs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    561c:	0072756f 	rsbseq	r7, r2, pc, ror #10
    5620:	66735f5f 	uhsaxvs	r5, r3, pc	; <UNPREDICTABLE>
    5624:	6f635f00 	svcvs	0x00635f00
    5628:	65696b6f 	strbvs	r6, [r9, #-2927]!	; 0xfffff491
    562c:	735f5f00 	cmpvc	pc, #0, 30
    5630:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xfffff399
    5634:	706d5f00 	rsbvc	r5, sp, r0, lsl #30
    5638:	00636572 	rsbeq	r6, r3, r2, ror r5
    563c:	616c665f 	cmnvs	ip, pc, asr r6
    5640:	5f007367 	svcpl	0x00007367
    5644:	736b6c62 	cmnvc	fp, #25088	; 0x6200
    5648:	00657a69 	rsbeq	r7, r5, r9, ror #20
    564c:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
    5650:	00667562 	rsbeq	r7, r6, r2, ror #10
    5654:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
    5658:	776f7472 			; <UNDEFINED> instruction: 0x776f7472
    565c:	735f7363 	cmpvc	pc, #-1946157055	; 0x8c000001
    5660:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    5664:	626d5f00 	rsbvs	r5, sp, #0, 30
    5668:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
    566c:	6174735f 	cmnvs	r4, pc, asr r3
    5670:	5f006574 	svcpl	0x00006574
    5674:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    5678:	6c665f00 	stclvs	15, cr5, [r6], #-0
    567c:	5f6b636f 	svcpl	0x006b636f
    5680:	425f0074 	subsmi	r0, pc, #116	; 0x74
    5684:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
    5688:	675f0074 			; <UNDEFINED> instruction: 0x675f0074
    568c:	616d6d61 	cmnvs	sp, r1, ror #26
    5690:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    5694:	6d61676e 	stclvs	7, cr6, [r1, #-440]!	; 0xfffffe48
    5698:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
    569c:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
    56a0:	5f006b5f 	svcpl	0x00006b5f
    56a4:	006d745f 	rsbeq	r7, sp, pc, asr r4
    56a8:	63775f5f 	cmnvs	r7, #380	; 0x17c
    56ac:	5f006268 	svcpl	0x00006268
    56b0:	72736377 	rsbsvc	r6, r3, #-603979775	; 0xdc000001
    56b4:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
    56b8:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
    56bc:	00657461 	rsbeq	r7, r5, r1, ror #8
    56c0:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
    56c4:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    56c8:	7461635f 	strbtvc	r6, [r1], #-863	; 0xfffffca1
    56cc:	726f6765 	rsbvc	r6, pc, #26476544	; 0x1940000
    56d0:	635f0079 	cmpvs	pc, #121	; 0x79
    56d4:	656c7476 	strbvs	r7, [ip, #-1142]!	; 0xfffffb8a
    56d8:	725f006e 	subsvc	r0, pc, #110	; 0x6e
    56dc:	5f003834 	svcpl	0x00003834
    56e0:	626f696e 	rsbvs	r6, pc, #1802240	; 0x1b8000
    56e4:	622f0073 	eorvs	r0, pc, #115	; 0x73
    56e8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    56ec:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    56f0:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    56f4:	7a754158 	bvc	1d55c5c <_Min_Stack_Size+0x1d55a5c>
    56f8:	6e2f5031 	mcrvs	0, 1, r5, cr15, cr1, {1}
    56fc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5700:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    5704:	2e302e34 	mrccs	14, 1, r2, cr0, cr4, {1}
    5708:	36313032 			; <UNDEFINED> instruction: 0x36313032
    570c:	37323530 			; <UNDEFINED> instruction: 0x37323530
    5710:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5714:	6e5f646c 	cdpvs	4, 5, cr6, cr15, cr12, {3}
    5718:	2f6f6e61 	svccs	0x006f6e61
    571c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5720:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5724:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5728:	72612f69 	rsbvc	r2, r1, #420	; 0x1a4
    572c:	2d37766d 	ldccs	6, cr7, [r7, #-436]!	; 0xfffffe4c
    5730:	656e2f6d 	strbvs	r2, [lr, #-3949]!	; 0xfffff093
    5734:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5738:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    573c:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    5740:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    5744:	73615f00 	cmnvc	r1, #0, 30
    5748:	6d697463 	cfstrdvs	mvd7, [r9, #-396]!	; 0xfffffe74
    574c:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
    5750:	725f0066 	subsvc	r0, pc, #102	; 0x66
    5754:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
    5758:	5f5f0074 	svcpl	0x005f0074
    575c:	00686377 	rsbeq	r6, r8, r7, ror r3
    5760:	746e6977 	strbtvc	r6, [lr], #-2423	; 0xfffff689
    5764:	5f00745f 	svcpl	0x0000745f
    5768:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    576c:	5f003273 	svcpl	0x00003273
    5770:	5f6d745f 	svcpl	0x006d745f
    5774:	72616579 	rsbvc	r6, r1, #507510784	; 0x1e400000
    5778:	696d5f00 	stmdbvs	sp!, {r8, r9, sl, fp, ip, lr}^
    577c:	5f006373 	svcpl	0x00006373
    5780:	5f6d745f 	svcpl	0x006d745f
    5784:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
    5788:	64735f5f 	ldrbtvs	r5, [r3], #-3935	; 0xfffff0a1
    578c:	6e696469 	cdpvs	4, 6, cr6, cr9, cr9, {3}
    5790:	5f007469 	svcpl	0x00007469
    5794:	5f66666f 	svcpl	0x0066666f
    5798:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
    579c:	6c656572 	cfstr64vs	mvdx6, [r5], #-456	; 0xfffffe38
    57a0:	00747369 	rsbseq	r7, r4, r9, ror #6
    57a4:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
    57a8:	45525f4b 	ldrbmi	r5, [r2, #-3915]	; 0xfffff0b5
    57ac:	53525543 	cmppl	r2, #281018368	; 0x10c00000
    57b0:	5f455649 	svcpl	0x00455649
    57b4:	72730054 	rsbsvc	r0, r3, #84	; 0x54
    57b8:	00646e61 	rsbeq	r6, r4, r1, ror #28
    57bc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    57c0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    57c4:	2f2e2e2f 	svccs	0x002e2e2f
    57c8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    57cc:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    57d0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    57d4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    57d8:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    57dc:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    57e0:	6e61722f 	cdpvs	2, 6, cr7, cr1, cr15, {1}
    57e4:	00632e64 	rsbeq	r2, r3, r4, ror #28
    57e8:	626f695f 	rsbvs	r6, pc, #1556480	; 0x17c000
    57ec:	5f5f0073 	svcpl	0x005f0073
    57f0:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    57f4:	00796164 	rsbseq	r6, r9, r4, ror #2
    57f8:	62735f5f 	rsbsvs	r5, r3, #380	; 0x17c
    57fc:	5f006675 	svcpl	0x00006675
    5800:	4c49465f 	mcrrmi	6, 5, r4, r9, cr15
    5804:	6d5f0045 	ldclvs	0, cr0, [pc, #-276]	; 56f8 <_Min_Stack_Size+0x54f8>
    5808:	61747362 	cmnvs	r4, r2, ror #6
    580c:	745f6574 	ldrbvc	r6, [pc], #-1396	; 5814 <_Min_Stack_Size+0x5614>
    5810:	735f5f00 	cmpvc	pc, #0, 30
    5814:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
    5818:	626d5f00 	rsbvs	r5, sp, #0, 30
    581c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    5820:	725f0065 	subsvc	r0, pc, #101	; 0x65
    5824:	5f646e61 	svcpl	0x00646e61
    5828:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
    582c:	626d5f00 	rsbvs	r5, sp, #0, 30
    5830:	5f6e656c 	svcpl	0x006e656c
    5834:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    5838:	695f0065 	ldmdbvs	pc, {r0, r2, r5, r6}^	; <UNPREDICTABLE>
    583c:	5f00636e 	svcpl	0x0000636e
    5840:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    5844:	5f746e65 	svcpl	0x00746e65
    5848:	61636f6c 	cmnvs	r3, ip, ror #30
    584c:	5f00656c 	svcpl	0x0000656c
    5850:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
    5854:	70756e61 	rsbsvc	r6, r5, r1, ror #28
    5858:	616d5f00 	cmnvs	sp, r0, lsl #30
    585c:	73647778 	cmnvc	r4, #120, 14	; 0x1e00000
    5860:	65735f00 	ldrbvs	r5, [r3, #-3840]!	; 0xfffff100
    5864:	5f006465 	svcpl	0x00006465
    5868:	756f635f 	strbvc	r6, [pc, #-863]!	; 5511 <_Min_Stack_Size+0x5311>
    586c:	5f00746e 	svcpl	0x0000746e
    5870:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
    5874:	5f006575 	svcpl	0x00006575
    5878:	6b656573 	blvs	195ee4c <_Min_Stack_Size+0x195ec4c>
    587c:	70665f00 	rsbvc	r5, r6, r0, lsl #30
    5880:	745f736f 	ldrbvc	r7, [pc], #-879	; 5888 <_Min_Stack_Size+0x5688>
    5884:	72655f00 	rsbvc	r5, r5, #0, 30
    5888:	006f6e72 	rsbeq	r6, pc, r2, ror lr	; <UNPREDICTABLE>
    588c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    5890:	6e696d5f 	mcrvs	13, 3, r6, cr9, cr15, {2}
    5894:	756d5f00 	strbvc	r5, [sp, #-3840]!	; 0xfffff100
    5898:	5f00746c 	svcpl	0x0000746c
    589c:	74727473 	ldrbtvc	r7, [r2], #-1139	; 0xfffffb8d
    58a0:	6c5f6b6f 	mrrcvs	11, 6, r6, pc, cr15	; <UNPREDICTABLE>
    58a4:	00747361 	rsbseq	r7, r4, r1, ror #6
    58a8:	73696d5f 	cmnvc	r9, #6080	; 0x17c0
    58ac:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
    58b0:	00746e65 	rsbseq	r6, r4, r5, ror #28
    58b4:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
    58b8:	555f5f00 	ldrbpl	r5, [pc, #-3840]	; 49c0 <_Min_Stack_Size+0x47c0>
    58bc:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
    58c0:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
    58c4:	74616474 	strbtvc	r6, [r1], #-1140	; 0xfffffb8c
    58c8:	72655f65 	rsbvc	r5, r5, #404	; 0x194
    58cc:	665f0072 			; <UNDEFINED> instruction: 0x665f0072
    58d0:	00656c69 	rsbeq	r6, r5, r9, ror #24
    58d4:	7364775f 	cmnvc	r4, #24903680	; 0x17c0000
    58d8:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 58e0 <_Min_Stack_Size+0x56e0>
    58dc:	64775f6d 	ldrbtvs	r5, [r7], #-3949	; 0xfffff093
    58e0:	5f007961 	svcpl	0x00007961
    58e4:	6134366c 	teqvs	r4, ip, ror #12
    58e8:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
    58ec:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
    58f0:	75665f67 	strbvc	r5, [r6, #-3943]!	; 0xfffff099
    58f4:	5f00636e 	svcpl	0x0000636e
    58f8:	6675626e 	ldrbtvs	r6, [r5], -lr, ror #4
    58fc:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 5904 <_Min_Stack_Size+0x5704>
    5900:	73695f6d 	cmnvc	r9, #436	; 0x1b4
    5904:	00747364 	rsbseq	r7, r4, r4, ror #6
    5908:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    590c:	69746c61 	ldmdbvs	r4!, {r0, r5, r6, sl, fp, sp, lr}^
    5910:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
    5914:	5f006675 	svcpl	0x00006675
    5918:	736f6c63 	cmnvc	pc, #25344	; 0x6300
    591c:	6d5f0065 	ldclvs	0, cr0, [pc, #-404]	; 5790 <_Min_Stack_Size+0x5590>
    5920:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
    5924:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
    5928:	00657461 	rsbeq	r7, r5, r1, ror #8
    592c:	7335705f 	teqvc	r5, #95	; 0x5f
    5930:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 5938 <_Min_Stack_Size+0x5738>
    5934:	646d5f6d 	strbtvs	r5, [sp], #-3949	; 0xfffff093
    5938:	5f007961 	svcpl	0x00007961
    593c:	72706e73 	rsbsvc	r6, r0, #1840	; 0x730
    5940:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    5944:	2f00725f 	svccs	0x0000725f
    5948:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    594c:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    5950:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5954:	7541582d 	strbvc	r5, [r1, #-2093]	; 0xfffff7d3
    5958:	2f50317a 	svccs	0x0050317a
    595c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5960:	322d6269 	eorcc	r6, sp, #-1879048186	; 0x90000006
    5964:	302e342e 	eorcc	r3, lr, lr, lsr #8
    5968:	3130322e 	teqcc	r0, lr, lsr #4
    596c:	32353036 	eorscc	r3, r5, #54	; 0x36
    5970:	75622f37 	strbvc	r2, [r2, #-3895]!	; 0xfffff0c9
    5974:	5f646c69 	svcpl	0x00646c69
    5978:	6f6e616e 	svcvs	0x006e616e
    597c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    5980:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5984:	61652d65 	cmnvs	r5, r5, ror #26
    5988:	612f6962 			; <UNDEFINED> instruction: 0x612f6962
    598c:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    5990:	6e2f6d2d 	cdpvs	13, 2, cr6, cr15, cr13, {1}
    5994:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5998:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    599c:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    59a0:	6f696474 	svcvs	0x00696474
    59a4:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
    59a8:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    59ac:	2e007473 	mcrcs	4, 0, r7, cr0, cr3, {3}
    59b0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    59b4:	2f2e2e2f 	svccs	0x002e2e2f
    59b8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    59bc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    59c0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    59c4:	2f62696c 	svccs	0x0062696c
    59c8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    59cc:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    59d0:	732f6f69 			; <UNDEFINED> instruction: 0x732f6f69
    59d4:	6972706e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, sp, lr}^
    59d8:	2e66746e 	cdpcs	4, 6, cr7, cr6, cr14, {3}
    59dc:	5f5f0063 	svcpl	0x005f0063
    59e0:	63756e67 	cmnvs	r5, #1648	; 0x670
    59e4:	5f61765f 	svcpl	0x0061765f
    59e8:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
    59ec:	615f5f00 	cmpvs	pc, r0, lsl #30
    59f0:	6e730070 	mrcvs	0, 3, r0, cr3, cr0, {3}
    59f4:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    59f8:	5f006674 	svcpl	0x00006674
    59fc:	70667673 	rsbvc	r7, r6, r3, ror r6
    5a00:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    5a04:	00725f66 	rsbseq	r5, r2, r6, ror #30
    5a08:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
    5a0c:	2e007268 	cdpcs	2, 0, cr7, cr0, cr8, {3}
    5a10:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5a14:	2f2e2e2f 	svccs	0x002e2e2f
    5a18:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5a1c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5a20:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5a24:	2f62696c 	svccs	0x0062696c
    5a28:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5a2c:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    5a30:	2f676e69 	svccs	0x00676e69
    5a34:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
    5a38:	632e7268 			; <UNDEFINED> instruction: 0x632e7268
    5a3c:	72747300 	rsbsvc	r7, r4, #0, 6
    5a40:	00797063 	rsbseq	r7, r9, r3, rrx
    5a44:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5a48:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5a4c:	2f2e2e2f 	svccs	0x002e2e2f
    5a50:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5a54:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5a58:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5a5c:	2f62696c 	svccs	0x0062696c
    5a60:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5a64:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    5a68:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    5a6c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    5a70:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    5a74:	2e797063 	cdpcs	0, 7, cr7, cr9, cr3, {3}
    5a78:	622f0063 	eorvs	r0, pc, #99	; 0x63
    5a7c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    5a80:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5a84:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    5a88:	7a754158 	bvc	1d55ff0 <_Min_Stack_Size+0x1d55df0>
    5a8c:	6e2f5031 	mcrvs	0, 1, r5, cr15, cr1, {1}
    5a90:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5a94:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    5a98:	2e302e34 	mrccs	14, 1, r2, cr0, cr4, {1}
    5a9c:	36313032 			; <UNDEFINED> instruction: 0x36313032
    5aa0:	37323530 			; <UNDEFINED> instruction: 0x37323530
    5aa4:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5aa8:	6e5f646c 	cdpvs	4, 5, cr6, cr15, cr12, {3}
    5aac:	2f6f6e61 	svccs	0x006f6e61
    5ab0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5ab4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5ab8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5abc:	72612f69 	rsbvc	r2, r1, #420	; 0x1a4
    5ac0:	2d37766d 	ldccs	6, cr7, [r7, #-436]!	; 0xfffffe4c
    5ac4:	656e2f6d 	strbvs	r2, [lr, #-3949]!	; 0xfffff093
    5ac8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5acc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5ad0:	616d2f63 	cmnvs	sp, r3, ror #30
    5ad4:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5ad8:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    5adc:	2e2e006d 	cdpcs	0, 2, cr0, cr14, cr13, {3}
    5ae0:	2f2e2e2f 	svccs	0x002e2e2f
    5ae4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5ae8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5aec:	2f2e2e2f 	svccs	0x002e2e2f
    5af0:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    5af4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5af8:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    5afc:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 597c <_Min_Stack_Size+0x577c>
    5b00:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    5b04:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    5b08:	732f6d72 			; <UNDEFINED> instruction: 0x732f6d72
    5b0c:	656c7274 	strbvs	r7, [ip, #-628]!	; 0xfffffd8c
    5b10:	74732d6e 	ldrbtvc	r2, [r3], #-3438	; 0xfffff292
    5b14:	632e6275 			; <UNDEFINED> instruction: 0x632e6275
    5b18:	72747300 	rsbsvc	r7, r4, #0, 6
    5b1c:	006e656c 	rsbeq	r6, lr, ip, ror #10
    5b20:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5b24:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5b28:	2f2e2e2f 	svccs	0x002e2e2f
    5b2c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5b30:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    5b34:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5b38:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5b3c:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    5b40:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    5b44:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    5b48:	706d636e 	rsbvc	r6, sp, lr, ror #6
    5b4c:	7300632e 	movwvc	r6, #814	; 0x32e
    5b50:	636e7274 	cmnvs	lr, #116, 4	; 0x40000007
    5b54:	7300706d 	movwvc	r7, #109	; 0x6d
    5b58:	00306372 	eorseq	r6, r0, r2, ror r3
    5b5c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5b60:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5b64:	2f2e2e2f 	svccs	0x002e2e2f
    5b68:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5b6c:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    5b70:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5b74:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5b78:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    5b7c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    5b80:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    5b84:	7970636e 	ldmdbvc	r0!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    5b88:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
    5b8c:	00307473 	eorseq	r7, r0, r3, ror r4
    5b90:	6e727473 	mrcvs	4, 3, r7, cr2, cr3, {3}
    5b94:	00797063 	rsbseq	r7, r9, r3, rrx
    5b98:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    5b9c:	5f64656e 	svcpl	0x0064656e
    5ba0:	00747364 	rsbseq	r7, r4, r4, ror #6
    5ba4:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    5ba8:	5f64656e 	svcpl	0x0064656e
    5bac:	00637273 	rsbeq	r7, r3, r3, ror r2
    5bb0:	46735f5f 	uhsaxmi	r5, r3, pc	; <UNPREDICTABLE>
    5bb4:	5f454c49 	svcpl	0x00454c49
    5bb8:	656b6166 	strbvs	r6, [fp, #-358]!	; 0xfffffe9a
    5bbc:	735f5f00 	cmpvc	pc, #0, 30
    5bc0:	61665f66 	cmnvs	r6, r6, ror #30
    5bc4:	735f656b 	cmpvc	pc, #448790528	; 0x1ac00000
    5bc8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    5bcc:	735f5f00 	cmpvc	pc, #0, 30
    5bd0:	61665f66 	cmnvs	r6, r6, ror #30
    5bd4:	735f656b 	cmpvc	pc, #448790528	; 0x1ac00000
    5bd8:	756f6474 	strbvc	r6, [pc, #-1140]!	; 576c <_Min_Stack_Size+0x556c>
    5bdc:	622f0074 	eorvs	r0, pc, #116	; 0x74
    5be0:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    5be4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5be8:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    5bec:	7a754158 	bvc	1d56154 <_Min_Stack_Size+0x1d55f54>
    5bf0:	6e2f5031 	mcrvs	0, 1, r5, cr15, cr1, {1}
    5bf4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5bf8:	2e322d62 	cdpcs	13, 3, cr2, cr2, cr2, {3}
    5bfc:	2e302e34 	mrccs	14, 1, r2, cr0, cr4, {1}
    5c00:	36313032 			; <UNDEFINED> instruction: 0x36313032
    5c04:	37323530 			; <UNDEFINED> instruction: 0x37323530
    5c08:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5c0c:	6e5f646c 	cdpvs	4, 5, cr6, cr15, cr12, {3}
    5c10:	2f6f6e61 	svccs	0x006f6e61
    5c14:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5c18:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5c1c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5c20:	72612f69 	rsbvc	r2, r1, #420	; 0x1a4
    5c24:	2d37766d 	ldccs	6, cr7, [r7, #-436]!	; 0xfffffe4c
    5c28:	656e2f6d 	strbvs	r2, [lr, #-3949]!	; 0xfffff093
    5c2c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5c30:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5c34:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xfffff09d
    5c38:	00746e65 	rsbseq	r6, r4, r5, ror #28
    5c3c:	75706d69 	ldrbvc	r6, [r0, #-3433]!	; 0xfffff297
    5c40:	645f6572 	ldrbvs	r6, [pc], #-1394	; 5c48 <_Min_Stack_Size+0x5a48>
    5c44:	00617461 	rsbeq	r7, r1, r1, ror #8
    5c48:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5c4c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5c50:	2f2e2e2f 	svccs	0x002e2e2f
    5c54:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5c58:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    5c5c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5c60:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5c64:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xfffff09d
    5c68:	2f746e65 	svccs	0x00746e65
    5c6c:	75706d69 	ldrbvc	r6, [r0, #-3433]!	; 0xfffff297
    5c70:	632e6572 			; <UNDEFINED> instruction: 0x632e6572
    5c74:	6c675f00 	stclvs	15, cr5, [r7], #-0
    5c78:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    5c7c:	706d695f 	rsbvc	r6, sp, pc, asr r9
    5c80:	5f657275 	svcpl	0x00657275
    5c84:	00727470 	rsbseq	r7, r2, r0, ror r4
    5c88:	66735f5f 	uhsaxvs	r5, r3, pc	; <UNPREDICTABLE>
    5c8c:	6b61665f 	blvs	185f610 <_Min_Stack_Size+0x185f410>
    5c90:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
    5c94:	72726564 	rsbsvc	r6, r2, #100, 10	; 0x19000000
    5c98:	74706100 	ldrbtvc	r6, [r0], #-256	; 0xffffff00
    5c9c:	2e2e0072 	mcrcs	0, 1, r0, cr14, cr2, {3}
    5ca0:	2f2e2e2f 	svccs	0x002e2e2f
    5ca4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5ca8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5cac:	2f2e2e2f 	svccs	0x002e2e2f
    5cb0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5cb4:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5b18 <_Min_Stack_Size+0x5918>
    5cb8:	2f636269 	svccs	0x00636269
    5cbc:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    5cc0:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 5b24 <_Min_Stack_Size+0x5924>
    5cc4:	6f6c6c61 	svcvs	0x006c6c61
    5cc8:	00632e63 	rsbeq	r2, r3, r3, ror #28
    5ccc:	7479626e 	ldrbtvc	r6, [r9], #-622	; 0xfffffd92
    5cd0:	5f007365 	svcpl	0x00007365
    5cd4:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    5cd8:	5f00725f 	svcpl	0x0000725f
    5cdc:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    5ce0:	725f636f 	subsvc	r6, pc, #-1140850687	; 0xbc000001
    5ce4:	6c616d00 	stclvs	13, cr6, [r1], #-0
    5ce8:	5f636f6c 	svcpl	0x00636f6c
    5cec:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    5cf0:	2e00745f 	cfmvsrcs	mvf0, r7
    5cf4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5cf8:	2f2e2e2f 	svccs	0x002e2e2f
    5cfc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5d00:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5d04:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5d08:	2f62696c 	svccs	0x0062696c
    5d0c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5d10:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    5d14:	2f62696c 	svccs	0x0062696c
    5d18:	6f6e616e 	svcvs	0x006e616e
    5d1c:	6c616d2d 	stclvs	13, cr6, [r1], #-180	; 0xffffff4c
    5d20:	72636f6c 	rsbvc	r6, r3, #108, 30	; 0x1b0
    5d24:	7000632e 	andvc	r6, r0, lr, lsr #6
    5d28:	5f6f745f 	svcpl	0x006f745f
    5d2c:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    5d30:	65726600 	ldrbvs	r6, [r2, #-1536]!	; 0xfffffa00
    5d34:	00705f65 	rsbseq	r5, r0, r5, ror #30
    5d38:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    5d3c:	635f636f 	cmpvs	pc, #-1140850687	; 0xbc000001
    5d40:	6b6e7568 	blvs	1ba32e8 <_Min_Stack_Size+0x1ba30e8>
    5d44:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    5d48:	705f746e 	subsvc	r7, pc, lr, ror #8
    5d4c:	67007274 	smlsdxvs	r0, r4, r2, r7
    5d50:	635f7465 	cmpvs	pc, #1694498816	; 0x65000000
    5d54:	6b6e7568 	blvs	1ba32fc <_Min_Stack_Size+0x1ba30fc>
    5d58:	6f72665f 	svcvs	0x0072665f
    5d5c:	74705f6d 	ldrbtvc	r5, [r0], #-3949	; 0xfffff093
    5d60:	5f5f0072 	svcpl	0x005f0072
    5d64:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    5d68:	665f636f 	ldrbvs	r6, [pc], -pc, ror #6
    5d6c:	5f656572 	svcpl	0x00656572
    5d70:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
    5d74:	6d5f5f00 	ldclvs	15, cr5, [pc, #-0]	; 5d7c <_Min_Stack_Size+0x5b7c>
    5d78:	6f6c6c61 	svcvs	0x006c6c61
    5d7c:	62735f63 	rsbsvs	r5, r3, #396	; 0x18c
    5d80:	735f6b72 	cmpvc	pc, #116736	; 0x1c800
    5d84:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    5d88:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
    5d8c:	705f6e67 	subsvc	r6, pc, r7, ror #28
    5d90:	72627300 	rsbvc	r7, r2, #0, 6
    5d94:	6c615f6b 	stclvs	15, cr5, [r1], #-428	; 0xfffffe54
    5d98:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
    5d9c:	6c610064 	stclvs	0, cr0, [r1], #-400	; 0xfffffe70
    5da0:	5f636f6c 	svcpl	0x00636f6c
    5da4:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    5da8:	62735f00 	rsbsvs	r5, r3, #0, 30
    5dac:	725f6b72 	subsvc	r6, pc, #116736	; 0x1c800
    5db0:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
    5db4:	705f6e67 	subsvc	r6, pc, r7, ror #28
    5db8:	47007274 	smlsdxmi	r0, r4, r2, r7
    5dbc:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
    5dc0:	35203131 	strcc	r3, [r0, #-305]!	; 0xfffffecf
    5dc4:	312e342e 			; <UNDEFINED> instruction: 0x312e342e
    5dc8:	31303220 	teqcc	r0, r0, lsr #4
    5dcc:	31393036 	teqcc	r9, r6, lsr r0
    5dd0:	6d2d2039 	stcvs	0, cr2, [sp, #-228]!	; 0xffffff1c
    5dd4:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    5dd8:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
    5ddc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5de0:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    5de4:	6d2d3776 	stcvs	7, cr3, [sp, #-472]!	; 0xfffffe28
    5de8:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
    5dec:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    5df0:	616d2d20 	cmnvs	sp, r0, lsr #26
    5df4:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
    5df8:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    5dfc:	206d2d37 	rsbcs	r2, sp, r7, lsr sp
    5e00:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    5e04:	2d20324f 	sfmcs	f3, 4, [r0, #-316]!	; 0xfffffec4
    5e08:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; 5c78 <_Min_Stack_Size+0x5a78>
    5e0c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5e10:	206e6974 	rsbcs	r6, lr, r4, ror r9
    5e14:	6873662d 	ldmdavs	r3!, {r0, r2, r3, r5, r9, sl, sp, lr}^
    5e18:	2d74726f 	lfmcs	f7, 2, [r4, #-444]!	; 0xfffffe44
    5e1c:	6d756e65 	ldclvs	14, cr6, [r5, #-404]!	; 0xfffffe6c
    5e20:	705f0073 	subsvc	r0, pc, r3, ror r0	; <UNPREDICTABLE>
    5e24:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    5e28:	6c665f66 	stclvs	15, cr5, [r6], #-408	; 0xfffffe68
    5e2c:	0074616f 	rsbseq	r6, r4, pc, ror #2
    5e30:	6f727265 	svcvs	0x00727265
    5e34:	6c660072 	stclvs	0, cr0, [r6], #-456	; 0xfffffe38
    5e38:	635f6761 	cmpvs	pc, #25427968	; 0x1840000
    5e3c:	73726168 	cmnvc	r2, #104, 2
    5e40:	72705f00 	rsbsvc	r5, r0, #0, 30
    5e44:	61645f74 	smcvs	17908	; 0x45f4
    5e48:	745f6174 	ldrbvc	r6, [pc], #-372	; 5e50 <_Min_Stack_Size+0x5c50>
    5e4c:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    5e50:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
    5e54:	6f645f00 	svcvs	0x00645f00
    5e58:	656c6275 	strbvs	r6, [ip, #-629]!	; 0xfffffd8b
    5e5c:	7563005f 	strbvc	r0, [r3, #-95]!	; 0xffffffa1
    5e60:	736f7072 	cmnvc	pc, #114	; 0x72
    5e64:	6f697500 	svcvs	0x00697500
    5e68:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
    5e6c:	2e006469 	cdpcs	4, 0, cr6, cr0, cr9, {3}
    5e70:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5e74:	2f2e2e2f 	svccs	0x002e2e2f
    5e78:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5e7c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5e80:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5e84:	2f62696c 	svccs	0x0062696c
    5e88:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5e8c:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    5e90:	6e2f6f69 	cdpvs	15, 2, cr6, cr15, cr9, {3}
    5e94:	2d6f6e61 	stclcs	14, cr6, [pc, #-388]!	; 5d18 <_Min_Stack_Size+0x5b18>
    5e98:	72706676 	rsbsvc	r6, r0, #123731968	; 0x7600000
    5e9c:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    5ea0:	5f00632e 	svcpl	0x0000632e
    5ea4:	6f69735f 	svcvs	0x0069735f
    5ea8:	66700076 			; <UNDEFINED> instruction: 0x66700076
    5eac:	00636e75 	rsbeq	r6, r3, r5, ror lr
    5eb0:	30746d66 	rsbscc	r6, r4, r6, ror #26
    5eb4:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
    5eb8:	5f006874 	svcpl	0x00006874
    5ebc:	7073735f 	rsbsvc	r7, r3, pc, asr r3
    5ec0:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    5ec4:	6d00725f 	sfmvs	f7, 4, [r0, #-380]	; 0xfffffe84
    5ec8:	68636d65 	stmdavs	r3!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    5ecc:	656c0072 	strbvs	r0, [ip, #-114]!	; 0xffffff8e
    5ed0:	5f006461 	svcpl	0x00006461
    5ed4:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    5ed8:	695f6674 	ldmdbvs	pc, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
    5edc:	766f6900 	strbtvc	r6, [pc], -r0, lsl #18
    5ee0:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
    5ee4:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
    5ee8:	6f695f6f 	svcvs	0x00695f6f
    5eec:	657a0076 	ldrbvs	r0, [sl, #-118]!	; 0xffffff8a
    5ef0:	69006f72 	stmdbvs	r0, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
    5ef4:	6c5f766f 	mrrcvs	6, 6, r7, pc, cr15	; <UNPREDICTABLE>
    5ef8:	6e006e65 	cdpvs	14, 0, cr6, cr0, cr5, {3}
    5efc:	69737765 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5f00:	6400657a 	strvs	r6, [r0], #-1402	; 0xfffffa86
    5f04:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    5f08:	75735f5f 	ldrbvc	r5, [r3, #-3935]!	; 0xfffff0a1
    5f0c:	5f006f69 	svcpl	0x00006f69
    5f10:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
    5f14:	5f636f6c 	svcpl	0x00636f6c
    5f18:	70640072 	rsbvc	r0, r4, r2, ror r0
    5f1c:	00636572 	rsbeq	r6, r3, r2, ror r5
    5f20:	5f747270 	svcpl	0x00747270
    5f24:	61746164 	cmnvs	r4, r4, ror #2
    5f28:	70786500 	rsbsvc	r6, r8, r0, lsl #10
    5f2c:	00727473 	rsbseq	r7, r2, r3, ror r4
    5f30:	73735f5f 	cmnvc	r3, #380	; 0x17c
    5f34:	73747570 	cmnvc	r4, #112, 10	; 0x1c000000
    5f38:	6200725f 	andvs	r7, r0, #-268435451	; 0xf0000005
    5f3c:	6b6e616c 	blvs	1b9e4f4 <_Min_Stack_Size+0x1b9e2f4>
    5f40:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    5f44:	00797063 	rsbseq	r7, r9, r3, rrx
    5f48:	5f6f6975 	svcpl	0x006f6975
    5f4c:	63766f69 	cmnvs	r6, #420	; 0x1a4
    5f50:	7400746e 	strvc	r7, [r0], #-1134	; 0xfffffb92
    5f54:	5f706d65 	svcpl	0x00706d65
    5f58:	64780069 	ldrbtvs	r0, [r8], #-105	; 0xffffff97
    5f5c:	00736769 	rsbseq	r6, r3, r9, ror #14
    5f60:	7571755f 	ldrbvc	r7, [r1, #-1375]!	; 0xfffffaa1
    5f64:	2e006461 	cdpcs	4, 0, cr6, cr0, cr1, {3}
    5f68:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5f6c:	2f2e2e2f 	svccs	0x002e2e2f
    5f70:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5f74:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5f78:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5f7c:	2f62696c 	svccs	0x0062696c
    5f80:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    5f84:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    5f88:	6e2f6f69 	cdpvs	15, 2, cr6, cr15, cr9, {3}
    5f8c:	2d6f6e61 	stclcs	14, cr6, [pc, #-388]!	; 5e10 <_Min_Stack_Size+0x5c10>
    5f90:	72706676 	rsbsvc	r6, r0, #123731968	; 0x7600000
    5f94:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
    5f98:	632e695f 			; <UNDEFINED> instruction: 0x632e695f
    5f9c:	6e6f6e00 	cdpvs	14, 6, cr6, cr15, cr0, {0}
    5fa0:	6d756e5f 	ldclvs	14, cr6, [r5, #-380]!	; 0xfffffe84
    5fa4:	5f726562 	svcpl	0x00726562
    5fa8:	69736f6e 	ldmdbvs	r3!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    5fac:	72006e67 	andvc	r6, r0, #1648	; 0x670
    5fb0:	736c6165 	cmnvc	ip, #1073741849	; 0x40000019
    5fb4:	756e007a 	strbvc	r0, [lr, #-122]!	; 0xffffff86
    5fb8:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    5fbc:	735f7500 	cmpvc	pc, #0, 10
    5fc0:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
    5fc4:	61647000 	cmnvs	r4, r0
    5fc8:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
    5fcc:	6e6f6c5f 	mcrvs	12, 3, r6, cr15, cr15, {2}
    5fd0:	705f0067 	subsvc	r0, pc, r7, rrx
    5fd4:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    5fd8:	6f635f66 	svcvs	0x00635f66
    5fdc:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
    5fe0:	636e6900 	cmnvs	lr, #0, 18
    5fe4:	74700072 	ldrbtvc	r0, [r0], #-114	; 0xffffff8e
    5fe8:	66696472 			; <UNDEFINED> instruction: 0x66696472
    5fec:	00745f66 	rsbseq	r5, r4, r6, ror #30
    5ff0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5ff4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5ff8:	2f2e2e2f 	svccs	0x002e2e2f
    5ffc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6000:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    6004:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6008:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    600c:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xfffff09d
    6010:	2f746e65 	svccs	0x00746e65
    6014:	6b726273 	blvs	1c9e9e8 <_Min_Stack_Size+0x1c9e7e8>
    6018:	00632e72 	rsbeq	r2, r3, r2, ror lr
    601c:	7262735f 	rsbvc	r7, r2, #2080374785	; 0x7c000001
    6020:	7361006b 	cmnvc	r1, #107	; 0x6b
    6024:	2e006372 	mcrcs	3, 0, r6, cr0, cr2, {3}
    6028:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    602c:	2f2e2e2f 	svccs	0x002e2e2f
    6030:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6034:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6038:	2f2e2e2f 	svccs	0x002e2e2f
    603c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6040:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5ea4 <_Min_Stack_Size+0x5ca4>
    6044:	2f636269 	svccs	0x00636269
    6048:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    604c:	2f656e69 	svccs	0x00656e69
    6050:	2f6d7261 	svccs	0x006d7261
    6054:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    6058:	732d7268 			; <UNDEFINED> instruction: 0x732d7268
    605c:	2e627574 	mcrcs	5, 3, r7, cr2, cr4, {3}
    6060:	72730063 	rsbsvc	r0, r3, #99	; 0x63
    6064:	6f765f63 	svcvs	0x00765f63
    6068:	2e006469 	cdpcs	4, 0, cr6, cr0, cr9, {3}
    606c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6070:	2f2e2e2f 	svccs	0x002e2e2f
    6074:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6078:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    607c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    6080:	2f62696c 	svccs	0x0062696c
    6084:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    6088:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    608c:	2f676e69 	svccs	0x00676e69
    6090:	6d6d656d 	cfstr64vs	mvdx6, [sp, #-436]!	; 0xfffffe4c
    6094:	2e65766f 	cdpcs	6, 6, cr7, cr5, cr15, {3}
    6098:	73640063 	cmnvc	r4, #99	; 0x63
    609c:	6f765f74 	svcvs	0x00765f74
    60a0:	70006469 	andvc	r6, r0, r9, ror #8
    60a4:	5f6f745f 	svcpl	0x006f745f
    60a8:	6c616572 	cfstr64vs	mvdx6, [r1], #-456	; 0xfffffe38
    60ac:	00636f6c 	rsbeq	r6, r3, ip, ror #30
    60b0:	6c616d5f 	stclvs	13, cr6, [r1], #-380	; 0xfffffe84
    60b4:	5f636f6c 	svcpl	0x00636f6c
    60b8:	62617375 	rsbvs	r7, r1, #-738197503	; 0xd4000001
    60bc:	735f656c 	cmpvc	pc, #108, 10	; 0x1b000000
    60c0:	5f657a69 	svcpl	0x00657a69
    60c4:	725f0072 	subsvc	r0, pc, #114	; 0x72
    60c8:	616c6365 	cmnvs	ip, r5, ror #6
    60cc:	725f6d69 	subsvc	r6, pc, #6720	; 0x1a40
    60d0:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    60d4:	69687400 	stmdbvs	r8!, {sl, ip, sp, lr}^
    60d8:	656e6f73 	strbvs	r6, [lr, #-3955]!	; 0xfffff08d
    60dc:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
    60e0:	70756e61 	rsbsvc	r6, r5, r1, ror #28
    60e4:	756c675f 	strbvc	r6, [ip, #-1887]!	; 0xfffff8a1
    60e8:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    60ec:	2f2e2e2f 	svccs	0x002e2e2f
    60f0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    60f4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    60f8:	2f2e2e2f 	svccs	0x002e2e2f
    60fc:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6100:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 5f64 <_Min_Stack_Size+0x5d64>
    6104:	2f636269 	svccs	0x00636269
    6108:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    610c:	65722f74 	ldrbvs	r2, [r2, #-3956]!	; 0xfffff08c
    6110:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    6114:	656e0063 	strbvs	r0, [lr, #-99]!	; 0xffffff9d
    6118:	6e6f7478 	mcrvs	4, 3, r7, cr15, cr8, {3}
    611c:	69730065 	ldmdbvs	r3!, {r0, r2, r5, r6}^
    6120:	6f5f657a 	svcvs	0x005f657a
    6124:	666f5f72 	uqsub16vs	r5, pc, r2	; <UNPREDICTABLE>
    6128:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    612c:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    6130:	2f646c69 	svccs	0x00646c69
    6134:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6138:	582d6269 	stmdapl	sp!, {r0, r3, r5, r6, r9, sp, lr}
    613c:	317a7541 	cmncc	sl, r1, asr #10
    6140:	656e2f50 	strbvs	r2, [lr, #-3920]!	; 0xfffff0b0
    6144:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6148:	342e322d 	strtcc	r3, [lr], #-557	; 0xfffffdd3
    614c:	322e302e 	eorcc	r3, lr, #46	; 0x2e
    6150:	30363130 	eorscc	r3, r6, r0, lsr r1
    6154:	2f373235 	svccs	0x00373235
    6158:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    615c:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    6160:	6f6e2d6d 	svcvs	0x006e2d6d
    6164:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6168:	2f696261 	svccs	0x00696261
    616c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    6170:	2f6d2d37 	svccs	0x006d2d37
    6174:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    6178:	73736f6c 	cmnvc	r3, #108, 30	; 0x1b0
    617c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6180:	79736f6e 	ldmdbvc	r3!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    6184:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
    6188:	2f2e2e2f 	svccs	0x002e2e2f
    618c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6190:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6194:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6198:	736f6c67 	cmnvc	pc, #26368	; 0x6700
    619c:	696c2f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    61a0:	736f6e62 	cmnvc	pc, #1568	; 0x620
    61a4:	732f7379 			; <UNDEFINED> instruction: 0x732f7379
    61a8:	2e6b7262 	cdpcs	2, 6, cr7, cr11, cr2, {3}
    61ac:	72700063 	rsbsvc	r0, r0, #99	; 0x63
    61b0:	685f7665 	ldmdavs	pc, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    61b4:	5f706165 	svcpl	0x00706165
    61b8:	00646e65 	rsbeq	r6, r4, r5, ror #28
    61bc:	20554e47 	subscs	r4, r5, r7, asr #28
    61c0:	20313143 	eorscs	r3, r1, r3, asr #2
    61c4:	2e342e35 	mrccs	14, 1, r2, cr4, cr5, {1}
    61c8:	30322031 	eorscc	r2, r2, r1, lsr r0
    61cc:	39303631 	ldmdbcc	r0!, {r0, r4, r5, r9, sl, ip, sp}
    61d0:	2d203931 			; <UNDEFINED> instruction: 0x2d203931
    61d4:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
    61d8:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
    61dc:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
    61e0:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
    61e4:	2d37766d 	ldccs	6, cr7, [r7, #-436]!	; 0xfffffe4c
    61e8:	672d206d 	strvs	r2, [sp, -sp, rrx]!
    61ec:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    61f0:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    61f4:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
	...

Disassembly of section .comment:

00000000 <.comment>:
{
   0:	3a434347 	bcc	10d0d24 <_Min_Stack_Size+0x10d0b24>
}
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	342e353a 	strtcc	r3, [lr], #-1338	; 0xfffffac6
   c:	732b312e 			; <UNDEFINED> instruction: 0x732b312e
  10:	34326e76 	ldrtcc	r6, [r2], #-3702	; 0xfffff18a
  14:	35353131 	ldrcc	r3, [r5, #-305]!	; 0xfffffecf
  18:	2029312d 	eorcs	r3, r9, sp, lsr #2
    bitstatus = SET;
  1c:	2e342e35 	mrccs	14, 1, r2, cr4, cr5, {1}
    bitstatus = RESET;
  20:	30322031 	eorscc	r2, r2, r1, lsr r0
  return bitstatus;
  24:	39303631 	ldmdbcc	r0!, {r0, r4, r5, r9, sl, ip, sp}
}
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
{
       0:	0000000c 	andeq	r0, r0, ip
}
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000018 	andeq	r0, r0, r8, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	080012e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip}
    bitstatus = SET;
      1c:	00000068 	andeq	r0, r0, r8, rrx
    bitstatus = RESET;
      20:	40080e41 	andmi	r0, r8, r1, asr #28
  return bitstatus;
      24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
}
      28:	070d4101 	streq	r4, [sp, -r1, lsl #2]
      2c:	00000024 	andeq	r0, r0, r4, lsr #32
	...
      38:	000000d8 	ldrdeq	r0, [r0], -r8
      3c:	40040e41 	andmi	r0, r4, r1, asr #28
      40:	0e410187 	dvfeqd	f0, f1, f7
      44:	070d4118 	smladeq	sp, r8, r1, r4
      48:	040e5c02 	streq	r5, [lr], #-3074	; 0xfffff3fe
      4c:	410d0d41 	tstmi	sp, r1, asr #26
      50:	000e40c7 	andeq	r4, lr, r7, asr #1
      54:	00000018 	andeq	r0, r0, r8, lsl r0
      58:	00000000 	andeq	r0, r0, r0
      5c:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
      60:	0000000c 	andeq	r0, r0, ip
            I2C_SendData(OLED_HARDWARE, BMP[j++]);
      64:	40080e41 	andmi	r0, r8, r1, asr #28
      68:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      6c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
      70:	00000024 	andeq	r0, r0, r4, lsr #32
      74:	00000000 	andeq	r0, r0, r0
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);    	
      78:	08001358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip}
      7c:	00000100 	andeq	r0, r0, r0, lsl #2
      80:	40040e41 	andmi	r0, r4, r1, asr #28
      84:	0e410187 	dvfeqd	f0, f1, f7
        for(x=x0;x<x1;x++){ 
      88:	070d4110 	smladeq	sp, r0, r1, r4
      8c:	040e7502 	streq	r7, [lr], #-1282	; 0xfffffafe
      90:	410d0d41 	tstmi	sp, r1, asr #26
      94:	000e40c7 	andeq	r4, lr, r7, asr #1
        _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
      98:	0000000c 	andeq	r0, r0, ip
      9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      a0:	7c020001 	stcvc	0, cr0, [r2], {1}
      a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	for(y=y0;y<y1;y++){
      a8:	00000024 	andeq	r0, r0, r4, lsr #32
      ac:	00000098 	muleq	r0, r8, r0
      b0:	08001458 	stmdaeq	r0, {r3, r4, r6, sl, ip}
}
      b4:	0000007c 	andeq	r0, r0, ip, ror r0
      b8:	40080e41 	andmi	r0, r8, r1, asr #28
      bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
      c0:	100e4101 	andne	r4, lr, r1, lsl #2
      c4:	70070d41 	andvc	r0, r7, r1, asr #26
      c8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
      cc:	0000000d 	andeq	r0, r0, sp
      d0:	00000024 	andeq	r0, r0, r4, lsr #32
      d4:	00000098 	muleq	r0, r8, r0
      d8:	080014d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, ip}
      dc:	00000064 	andeq	r0, r0, r4, rrx
      e0:	40080e41 	andmi	r0, r8, r1, asr #28
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      e8:	180e4101 	stmdane	lr, {r0, r8, lr}
      ec:	66070d41 	strvs	r0, [r7], -r1, asr #26
      f0:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
				prvUnlockQueue( pxQueue );
      f4:	0000000d 	andeq	r0, r0, sp
      f8:	00000024 	andeq	r0, r0, r4, lsr #32
				if( xTaskResumeAll() == pdFALSE )
      fc:	00000098 	muleq	r0, r8, r0
     100:	08001538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip}
					portYIELD_WITHIN_API();
     104:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     108:	40080e41 	andmi	r0, r8, r1, asr #28
     10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     110:	180e4101 	stmdane	lr, {r0, r8, lr}
     114:	02070d41 	andeq	r0, r7, #4160	; 0x1040
				prvUnlockQueue( pxQueue );
     118:	41080e4b 	tstmi	r8, fp, asr #28
				( void ) xTaskResumeAll();
     11c:	00000d0d 	andeq	r0, r0, sp, lsl #26
     120:	00000024 	andeq	r0, r0, r4, lsr #32
			prvUnlockQueue( pxQueue );
     124:	00000098 	muleq	r0, r8, r0
			( void ) xTaskResumeAll();
     128:	080015e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip}
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     12c:	0000009c 	muleq	r0, ip, r0
     130:	40080e41 	andmi	r0, r8, r1, asr #28
     134:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     138:	180e4101 	stmdane	lr, {r0, r8, lr}
}
     13c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     140:	41080e41 	tstmi	r8, r1, asr #28
     144:	00000d0d 	andeq	r0, r0, sp, lsl #26
     148:	00000024 	andeq	r0, r0, r4, lsr #32
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     14c:	00000098 	muleq	r0, r8, r0
  SPIx->I2SCFGR = tmpreg;   
     150:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
     154:	00000088 	andeq	r0, r0, r8, lsl #1
}
     158:	40080e41 	andmi	r0, r8, r1, asr #28
     15c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     160:	100e4101 	andne	r4, lr, r1, lsl #2
     164:	78070d41 	stmdavc	r7, {r0, r6, r8, sl, fp}
         *(uint16_t*) arg = getSn_KPALVTR(sn);
     168:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     16c:	0000000d 	andeq	r0, r0, sp
     170:	00000028 	andeq	r0, r0, r8, lsr #32
     174:	00000098 	muleq	r0, r8, r0
     178:	0800170c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip}
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     17c:	000001ac 	andeq	r0, r0, ip, lsr #3
     180:	400c0e41 	andmi	r0, ip, r1, asr #28
     184:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     188:	018e4002 	orreq	r4, lr, r2
         *(uint8_t*) arg = getSn_SR(sn);
     18c:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     190:	c602070d 	strgt	r0, [r2], -sp, lsl #14
     194:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     198:	0000000d 	andeq	r0, r0, sp
     19c:	00000028 	andeq	r0, r0, r8, lsr #32
     1a0:	00000098 	muleq	r0, r8, r0
     1a4:	080018b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, ip}
         if(getSn_MR(sn) == Sn_MR_TCP)
     1a8:	00000084 	andeq	r0, r0, r4, lsl #1
     1ac:	400c0e41 	andmi	r0, ip, r1, asr #28
     1b0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     1b4:	018e4002 	orreq	r4, lr, r2
     1b8:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1bc:	7d20070c 	stcvc	7, cr0, [r0, #-48]!	; 0xffffffd0
     1c0:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     1c4:	0000000d 	andeq	r0, r0, sp
     1c8:	00000028 	andeq	r0, r0, r8, lsr #32
         break;
     1cc:	00000098 	muleq	r0, r8, r0
            *(uint16_t*)arg = sock_remained_size[sn];
     1d0:	00000000 	andeq	r0, r0, r0
     1d4:	000000c8 	andeq	r0, r0, r8, asr #1
     1d8:	400c0e41 	andmi	r0, ip, r1, asr #28
         CHECK_SOCKMODE(Sn_MR_TCP);
     1dc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     1e0:	018e4002 	orreq	r4, lr, r2
     1e4:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     1e8:	5902070d 	stmdbpl	r2, {r0, r2, r3, r8, r9, sl}
     1ec:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     1f0:	0000000d 	andeq	r0, r0, sp
     1f4:	0000000c 	andeq	r0, r0, ip
     1f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
         *(uint8_t*)arg = sock_pack_info[sn];
     1fc:	7c020001 	stcvc	0, cr0, [r2], {1}
     200:	000d0c0e 	andeq	r0, sp, lr, lsl #24
         break;
     204:	00000028 	andeq	r0, r0, r8, lsr #32
         return SOCKERR_SOCKOPT;
     208:	000001f4 	strdeq	r0, [r0], -r4
   return SOCK_OK;
     20c:	0800193c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip}
}
     210:	00000208 	andeq	r0, r0, r8, lsl #4
     214:	400c0e41 	andmi	r0, ip, r1, asr #28
     218:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     21c:	018e4002 	orreq	r4, lr, r2
     220:	41180e41 	tstmi	r8, r1, asr #28
     224:	f502070d 			; <UNDEFINED> instruction: 0xf502070d
     228:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     22c:	0000000d 	andeq	r0, r0, sp
     230:	00000024 	andeq	r0, r0, r4, lsr #32
     234:	000001f4 	strdeq	r0, [r0], -r4
     238:	08001b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip}
     23c:	000000b8 	strheq	r0, [r0], -r8
     240:	40080e41 	andmi	r0, r8, r1, asr #28
     244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     248:	100e4101 	andne	r4, lr, r1, lsl #2
     24c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     250:	41080e51 	tstmi	r8, r1, asr lr
	memset(packet, 0, sizeof(packet));
     254:	00000d0d 	andeq	r0, r0, sp, lsl #26
     258:	00000024 	andeq	r0, r0, r4, lsr #32
     25c:	000001f4 	strdeq	r0, [r0], -r4
	memcpy(packet, fixed_header, sizeof(fixed_header));
     260:	00000000 	andeq	r0, r0, r0
     264:	000000ca 	andeq	r0, r0, sl, asr #1
     268:	40080e41 	andmi	r0, r8, r1, asr #28
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     270:	100e4101 	andne	r4, lr, r1, lsl #2
     274:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     278:	41080e60 	tstmi	r8, r0, ror #28
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     27c:	00000d0d 	andeq	r0, r0, sp, lsl #26
     280:	00000024 	andeq	r0, r0, r4, lsr #32
     284:	000001f4 	strdeq	r0, [r0], -r4
     288:	08001bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip}
     28c:	0000016c 	andeq	r0, r0, ip, ror #2
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     290:	40080e41 	andmi	r0, r8, r1, asr #28
     294:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     298:	100e4101 	andne	r4, lr, r1, lsl #2
     29c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     2a0:	41080eaf 	smlatbmi	r8, pc, lr, r0	; <UNPREDICTABLE>
		return -1;
     2a4:	00000d0d 	andeq	r0, r0, sp, lsl #26
     2a8:	00000024 	andeq	r0, r0, r4, lsr #32
	return 1;
     2ac:	000001f4 	strdeq	r0, [r0], -r4
}
     2b0:	00000000 	andeq	r0, r0, r0
     2b4:	000000ec 	andeq	r0, r0, ip, ror #1
     2b8:	40080e41 	andmi	r0, r8, r1, asr #28
     2bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2c0:	100e4101 	andne	r4, lr, r1, lsl #2
     2c4:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     2c8:	41080e6d 	tstmi	r8, sp, ror #28
     2cc:	00000d0d 	andeq	r0, r0, sp, lsl #26
     2d0:	00000024 	andeq	r0, r0, r4, lsr #32
     2d4:	000001f4 	strdeq	r0, [r0], -r4
     2d8:	08001d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip}
     2dc:	000001f4 	strdeq	r0, [r0], -r4
     2e0:	40080e41 	andmi	r0, r8, r1, asr #28
     2e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2e8:	180e4101 	stmdane	lr, {r0, r8, lr}
     2ec:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     2f0:	41080ef0 	strdmi	r0, [r8, -r0]
     2f4:	00000d0d 	andeq	r0, r0, sp, lsl #26
     2f8:	00000028 	andeq	r0, r0, r8, lsr #32
     2fc:	000001f4 	strdeq	r0, [r0], -r4
     300:	08001f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip}
     304:	0000016c 	andeq	r0, r0, ip, ror #2
     308:	400c0e41 	andmi	r0, ip, r1, asr #28
     30c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     310:	018e4002 	orreq	r4, lr, r2
     314:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     318:	ae02070d 	cdpge	7, 0, cr0, cr2, cr13, {0}
     31c:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     320:	0000000d 	andeq	r0, r0, sp
     324:	00000024 	andeq	r0, r0, r4, lsr #32
     328:	000001f4 	strdeq	r0, [r0], -r4
     32c:	080020c8 	stmdaeq	r0, {r3, r6, r7, sp}
     330:	00000208 	andeq	r0, r0, r8, lsl #4
     334:	40080e41 	andmi	r0, r8, r1, asr #28
     338:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     33c:	200e4101 	andcs	r4, lr, r1, lsl #2
     340:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     344:	41080efd 	strdmi	r0, [r8, -sp]
     348:	00000d0d 	andeq	r0, r0, sp, lsl #26
     34c:	00000024 	andeq	r0, r0, r4, lsr #32
     350:	000001f4 	strdeq	r0, [r0], -r4
     354:	080022d0 	stmdaeq	r0, {r4, r6, r7, r9, sp}
     358:	000002fc 	strdeq	r0, [r0], -ip
     35c:	40080e41 	andmi	r0, r8, r1, asr #28
     360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     364:	280e4101 	stmdacs	lr, {r0, r8, lr}
     368:	03070d41 	movweq	r0, #32065	; 0x7d41
     36c:	080e0173 	stmdaeq	lr, {r0, r1, r4, r5, r6, r8}
     370:	000d0d41 	andeq	r0, sp, r1, asr #26
     374:	00000024 	andeq	r0, r0, r4, lsr #32
     378:	000001f4 	strdeq	r0, [r0], -r4
     37c:	080025cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, sp}
     380:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     384:	40080e41 	andmi	r0, r8, r1, asr #28
     388:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     38c:	180e4101 	stmdane	lr, {r0, r8, lr}
     390:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     394:	41080ed1 	ldrdmi	r0, [r8, -r1]
     398:	00000d0d 	andeq	r0, r0, sp, lsl #26
     39c:	00000024 	andeq	r0, r0, r4, lsr #32
     3a0:	000001f4 	strdeq	r0, [r0], -r4
     3a4:	00000000 	andeq	r0, r0, r0
     3a8:	00000204 	andeq	r0, r0, r4, lsl #4
     3ac:	40080e41 	andmi	r0, r8, r1, asr #28
     3b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     3b4:	180e4101 	stmdane	lr, {r0, r8, lr}
     3b8:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     3bc:	41080efd 	strdmi	r0, [r8, -sp]
     3c0:	00000d0d 	andeq	r0, r0, sp, lsl #26
     3c4:	00000028 	andeq	r0, r0, r8, lsr #32
     3c8:	000001f4 	strdeq	r0, [r0], -r4
     3cc:	00000000 	andeq	r0, r0, r0
     3d0:	00000220 	andeq	r0, r0, r0, lsr #4
     3d4:	400c0e41 	andmi	r0, ip, r1, asr #28
     3d8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     3dc:	018e4002 	orreq	r4, lr, r2
     3e0:	41180e41 	tstmi	r8, r1, asr #28
     3e4:	0603070d 	streq	r0, [r3], -sp, lsl #14
     3e8:	410c0e01 	tstmi	ip, r1, lsl #28
     3ec:	00000d0d 	andeq	r0, r0, sp, lsl #26
     3f0:	0000000c 	andeq	r0, r0, ip
     3f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     3f8:	7c020001 	stcvc	0, cr0, [r2], {1}
     3fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     400:	00000020 	andeq	r0, r0, r0, lsr #32
     404:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     408:	0800277c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, sp}
     40c:	0000000c 	andeq	r0, r0, ip
     410:	40040e41 	andmi	r0, r4, r1, asr #28
     414:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     418:	0d0d4207 	sfmeq	f4, 4, [sp, #-28]	; 0xffffffe4
     41c:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     420:	00000000 	andeq	r0, r0, r0
     424:	00000020 	andeq	r0, r0, r0, lsr #32
     428:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     42c:	08002788 	stmdaeq	r0, {r3, r7, r8, r9, sl, sp}
     430:	0000000c 	andeq	r0, r0, ip
     434:	40040e41 	andmi	r0, r4, r1, asr #28
     438:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     43c:	0d0d4207 	sfmeq	f4, 4, [sp, #-28]	; 0xffffffe4
     440:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     444:	00000000 	andeq	r0, r0, r0
     448:	00000020 	andeq	r0, r0, r0, lsr #32
     44c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     450:	08002794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, sp}
     454:	0000000c 	andeq	r0, r0, ip
     458:	40040e41 	andmi	r0, r4, r1, asr #28
     45c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     460:	0d0d4207 	sfmeq	f4, 4, [sp, #-28]	; 0xffffffe4
     464:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     468:	00000000 	andeq	r0, r0, r0
     46c:	00000020 	andeq	r0, r0, r0, lsr #32
     470:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     474:	080027a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, sp}
     478:	0000000c 	andeq	r0, r0, ip
     47c:	40040e41 	andmi	r0, r4, r1, asr #28
     480:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     484:	0d0d4207 	sfmeq	f4, 4, [sp, #-28]	; 0xffffffe4
     488:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     48c:	00000000 	andeq	r0, r0, r0
     490:	00000024 	andeq	r0, r0, r4, lsr #32
     494:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     498:	080027ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, sp}
     49c:	00000018 	andeq	r0, r0, r8, lsl r0
     4a0:	40040e41 	andmi	r0, r4, r1, asr #28
     4a4:	0e410187 	dvfeqd	f0, f1, f7
     4a8:	070d4110 	smladeq	sp, r0, r1, r4
     4ac:	41040e46 	tstmi	r4, r6, asr #28
     4b0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     4b4:	00000e40 	andeq	r0, r0, r0, asr #28
     4b8:	00000024 	andeq	r0, r0, r4, lsr #32
     4bc:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     4c0:	080027c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, sp}
     4c4:	0000001c 	andeq	r0, r0, ip, lsl r0
     4c8:	40040e41 	andmi	r0, r4, r1, asr #28
     4cc:	0e410187 	dvfeqd	f0, f1, f7
     4d0:	070d4110 	smladeq	sp, r0, r1, r4
     4d4:	41040e48 	tstmi	r4, r8, asr #28
     4d8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     4dc:	00000e40 	andeq	r0, r0, r0, asr #28
     4e0:	00000020 	andeq	r0, r0, r0, lsr #32
     4e4:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     4e8:	080027e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, sp}
     4ec:	0000000e 	andeq	r0, r0, lr
     4f0:	40040e41 	andmi	r0, r4, r1, asr #28
     4f4:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     4f8:	0d0d4307 	stceq	3, cr4, [sp, #-28]	; 0xffffffe4
     4fc:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     500:	00000000 	andeq	r0, r0, r0
     504:	00000024 	andeq	r0, r0, r4, lsr #32
     508:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     50c:	080027f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, sp}
     510:	00000014 	andeq	r0, r0, r4, lsl r0
     514:	40040e41 	andmi	r0, r4, r1, asr #28
     518:	0e410187 	dvfeqd	f0, f1, f7
     51c:	070d4110 	smladeq	sp, r0, r1, r4
     520:	41040e44 	tstmi	r4, r4, asr #28
     524:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     528:	00000e40 	andeq	r0, r0, r0, asr #28
     52c:	00000024 	andeq	r0, r0, r4, lsr #32
     530:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     534:	08002804 	stmdaeq	r0, {r2, fp, sp}
     538:	00000048 	andeq	r0, r0, r8, asr #32
     53c:	40040e41 	andmi	r0, r4, r1, asr #28
     540:	0e410187 	dvfeqd	f0, f1, f7
     544:	070d4110 	smladeq	sp, r0, r1, r4
     548:	41040e57 	tstmi	r4, r7, asr lr
     54c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     550:	00000e40 	andeq	r0, r0, r0, asr #28
     554:	00000024 	andeq	r0, r0, r4, lsr #32
     558:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     55c:	0800284c 	stmdaeq	r0, {r2, r3, r6, fp, sp}
     560:	00000048 	andeq	r0, r0, r8, asr #32
     564:	40040e41 	andmi	r0, r4, r1, asr #28
     568:	0e410187 	dvfeqd	f0, f1, f7
     56c:	070d4110 	smladeq	sp, r0, r1, r4
     570:	41040e57 	tstmi	r4, r7, asr lr
     574:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     578:	00000e40 	andeq	r0, r0, r0, asr #28
     57c:	00000024 	andeq	r0, r0, r4, lsr #32
     580:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     584:	00000000 	andeq	r0, r0, r0
     588:	00000054 	andeq	r0, r0, r4, asr r0
     58c:	40040e41 	andmi	r0, r4, r1, asr #28
     590:	0e410187 	dvfeqd	f0, f1, f7
     594:	070d4110 	smladeq	sp, r0, r1, r4
     598:	41040e5e 	tstmi	r4, lr, asr lr
     59c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     5a0:	00000e40 	andeq	r0, r0, r0, asr #28
     5a4:	00000024 	andeq	r0, r0, r4, lsr #32
     5a8:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     5ac:	08002894 	stmdaeq	r0, {r2, r4, r7, fp, sp}
     5b0:	00000054 	andeq	r0, r0, r4, asr r0
     5b4:	40040e41 	andmi	r0, r4, r1, asr #28
     5b8:	0e410187 	dvfeqd	f0, f1, f7
     5bc:	070d4110 	smladeq	sp, r0, r1, r4
     5c0:	41040e5e 	tstmi	r4, lr, asr lr
     5c4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     5c8:	00000e40 	andeq	r0, r0, r0, asr #28
     5cc:	00000028 	andeq	r0, r0, r8, lsr #32
     5d0:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     5d4:	080028e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, sp}
     5d8:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     5dc:	400c0e41 	andmi	r0, ip, r1, asr #28
     5e0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     5e4:	018e4002 	orreq	r4, lr, r2
     5e8:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
     5ec:	d602070d 	strle	r0, [r2], -sp, lsl #14
     5f0:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     5f4:	0000000d 	andeq	r0, r0, sp
     5f8:	00000024 	andeq	r0, r0, r4, lsr #32
     5fc:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     600:	08002aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, sp}
     604:	0000007c 	andeq	r0, r0, ip, ror r0
     608:	40080e41 	andmi	r0, r8, r1, asr #28
     60c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     610:	100e4101 	andne	r4, lr, r1, lsl #2
     614:	79070d41 	stmdbvc	r7, {r0, r6, r8, sl, fp}
     618:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     61c:	0000000d 	andeq	r0, r0, sp
     620:	00000024 	andeq	r0, r0, r4, lsr #32
     624:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     628:	08002b20 	stmdaeq	r0, {r5, r8, r9, fp, sp}
     62c:	00000098 	muleq	r0, r8, r0
     630:	40080e41 	andmi	r0, r8, r1, asr #28
     634:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     638:	200e4101 	andcs	r4, lr, r1, lsl #2
     63c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     640:	41080e47 	tstmi	r8, r7, asr #28
     644:	00000d0d 	andeq	r0, r0, sp, lsl #26
     648:	00000024 	andeq	r0, r0, r4, lsr #32
     64c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     650:	08002bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, sp}
     654:	00000118 	andeq	r0, r0, r8, lsl r1
     658:	40080e41 	andmi	r0, r8, r1, asr #28
     65c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     660:	180e4101 	stmdane	lr, {r0, r8, lr}
     664:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     668:	41080e87 	smlabbmi	r8, r7, lr, r0
     66c:	00000d0d 	andeq	r0, r0, sp, lsl #26
     670:	00000024 	andeq	r0, r0, r4, lsr #32
     674:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     678:	08002cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, sp}
     67c:	0000003c 	andeq	r0, r0, ip, lsr r0
     680:	40080e41 	andmi	r0, r8, r1, asr #28
     684:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     688:	180e4101 	stmdane	lr, {r0, r8, lr}
     68c:	59070d41 	stmdbpl	r7, {r0, r6, r8, sl, fp}
     690:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     694:	0000000d 	andeq	r0, r0, sp
     698:	00000024 	andeq	r0, r0, r4, lsr #32
     69c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     6a0:	08002d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, sp}
     6a4:	0000004a 	andeq	r0, r0, sl, asr #32
     6a8:	40080e41 	andmi	r0, r8, r1, asr #28
     6ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6b0:	100e4101 	andne	r4, lr, r1, lsl #2
     6b4:	60070d41 	andvs	r0, r7, r1, asr #26
     6b8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     6bc:	0000000d 	andeq	r0, r0, sp
     6c0:	00000024 	andeq	r0, r0, r4, lsr #32
     6c4:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     6c8:	08002d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, sp}
     6cc:	00000036 	andeq	r0, r0, r6, lsr r0
     6d0:	40080e41 	andmi	r0, r8, r1, asr #28
     6d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     6d8:	180e4101 	stmdane	lr, {r0, r8, lr}
     6dc:	56070d41 	strpl	r0, [r7], -r1, asr #26
     6e0:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     6e4:	0000000d 	andeq	r0, r0, sp
     6e8:	00000024 	andeq	r0, r0, r4, lsr #32
     6ec:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     6f0:	08002d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, sp}
     6f4:	00000046 	andeq	r0, r0, r6, asr #32
     6f8:	40080e41 	andmi	r0, r8, r1, asr #28
     6fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     700:	100e4101 	andne	r4, lr, r1, lsl #2
     704:	5e070d41 	cdppl	13, 0, cr0, cr7, cr1, {2}
     708:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     70c:	0000000d 	andeq	r0, r0, sp
     710:	00000024 	andeq	r0, r0, r4, lsr #32
     714:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     718:	08002dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, sp}
     71c:	0000002e 	andeq	r0, r0, lr, lsr #32
     720:	40080e41 	andmi	r0, r8, r1, asr #28
     724:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     728:	100e4101 	andne	r4, lr, r1, lsl #2
     72c:	52070d41 	andpl	r0, r7, #4160	; 0x1040
     730:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     734:	0000000d 	andeq	r0, r0, sp
     738:	00000024 	andeq	r0, r0, r4, lsr #32
     73c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     740:	08002e08 	stmdaeq	r0, {r3, r9, sl, fp, sp}
     744:	00000032 	andeq	r0, r0, r2, lsr r0
     748:	40080e41 	andmi	r0, r8, r1, asr #28
     74c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     750:	100e4101 	andne	r4, lr, r1, lsl #2
     754:	54070d41 	strpl	r0, [r7], #-3393	; 0xfffff2bf
     758:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     75c:	0000000d 	andeq	r0, r0, sp
     760:	00000024 	andeq	r0, r0, r4, lsr #32
     764:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     768:	08002e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, sp}
     76c:	0000004e 	andeq	r0, r0, lr, asr #32
     770:	40080e41 	andmi	r0, r8, r1, asr #28
     774:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     778:	100e4101 	andne	r4, lr, r1, lsl #2
     77c:	62070d41 	andvs	r0, r7, #4160	; 0x1040
     780:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     784:	0000000d 	andeq	r0, r0, sp
     788:	00000024 	andeq	r0, r0, r4, lsr #32
     78c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     790:	08002e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, sp}
     794:	00000084 	andeq	r0, r0, r4, lsl #1
     798:	40080e41 	andmi	r0, r8, r1, asr #28
     79c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7a0:	180e4101 	stmdane	lr, {r0, r8, lr}
     7a4:	7d070d41 	stcvc	13, cr0, [r7, #-260]	; 0xfffffefc
     7a8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     7ac:	0000000d 	andeq	r0, r0, sp
     7b0:	00000024 	andeq	r0, r0, r4, lsr #32
     7b4:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     7b8:	08002f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, sp}
     7bc:	00000098 	muleq	r0, r8, r0
     7c0:	40080e41 	andmi	r0, r8, r1, asr #28
     7c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7c8:	180e4101 	stmdane	lr, {r0, r8, lr}
     7cc:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     7d0:	41080e47 	tstmi	r8, r7, asr #28
     7d4:	00000d0d 	andeq	r0, r0, sp, lsl #26
     7d8:	00000024 	andeq	r0, r0, r4, lsr #32
     7dc:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     7e0:	00000000 	andeq	r0, r0, r0
     7e4:	00000048 	andeq	r0, r0, r8, asr #32
     7e8:	40080e41 	andmi	r0, r8, r1, asr #28
     7ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7f0:	180e4101 	stmdane	lr, {r0, r8, lr}
     7f4:	5f070d41 	svcpl	0x00070d41
     7f8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     7fc:	0000000d 	andeq	r0, r0, sp
     800:	00000024 	andeq	r0, r0, r4, lsr #32
     804:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     808:	08002fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp, sp}
     80c:	00000094 	muleq	r0, r4, r0
     810:	40080e41 	andmi	r0, r8, r1, asr #28
     814:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     818:	180e4101 	stmdane	lr, {r0, r8, lr}
     81c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     820:	41080e45 	tstmi	r8, r5, asr #28
     824:	00000d0d 	andeq	r0, r0, sp, lsl #26
     828:	00000024 	andeq	r0, r0, r4, lsr #32
     82c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     830:	0800303c 	stmdaeq	r0, {r2, r3, r4, r5, ip, sp}
     834:	00000080 	andeq	r0, r0, r0, lsl #1
     838:	40080e41 	andmi	r0, r8, r1, asr #28
     83c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     840:	100e4101 	andne	r4, lr, r1, lsl #2
     844:	76070d41 	strvc	r0, [r7], -r1, asr #26
     848:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     84c:	0000000d 	andeq	r0, r0, sp
     850:	00000024 	andeq	r0, r0, r4, lsr #32
     854:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     858:	080030bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, sp}
     85c:	00000080 	andeq	r0, r0, r0, lsl #1
     860:	40080e41 	andmi	r0, r8, r1, asr #28
     864:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     868:	100e4101 	andne	r4, lr, r1, lsl #2
     86c:	76070d41 	strvc	r0, [r7], -r1, asr #26
     870:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     874:	0000000d 	andeq	r0, r0, sp
     878:	00000024 	andeq	r0, r0, r4, lsr #32
     87c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     880:	0800313c 	stmdaeq	r0, {r2, r3, r4, r5, r8, ip, sp}
     884:	00000044 	andeq	r0, r0, r4, asr #32
     888:	40080e41 	andmi	r0, r8, r1, asr #28
     88c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     890:	180e4101 	stmdane	lr, {r0, r8, lr}
     894:	5d070d41 	stcpl	13, cr0, [r7, #-260]	; 0xfffffefc
     898:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     89c:	0000000d 	andeq	r0, r0, sp
     8a0:	00000018 	andeq	r0, r0, r8, lsl r0
     8a4:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     8a8:	08003180 	stmdaeq	r0, {r7, r8, ip, sp}
     8ac:	00000010 	andeq	r0, r0, r0, lsl r0
     8b0:	40080e41 	andmi	r0, r8, r1, asr #28
     8b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8b8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     8bc:	00000024 	andeq	r0, r0, r4, lsr #32
     8c0:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     8c4:	08003190 	stmdaeq	r0, {r4, r7, r8, ip, sp}
     8c8:	00000042 	andeq	r0, r0, r2, asr #32
     8cc:	40080e41 	andmi	r0, r8, r1, asr #28
     8d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     8d4:	100e4101 	andne	r4, lr, r1, lsl #2
     8d8:	5c070d41 	stcpl	13, cr0, [r7], {65}	; 0x41
     8dc:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     8e0:	0000000d 	andeq	r0, r0, sp
     8e4:	00000024 	andeq	r0, r0, r4, lsr #32
     8e8:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     8ec:	080031d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, ip, sp}
     8f0:	00000044 	andeq	r0, r0, r4, asr #32
     8f4:	400c0e41 	andmi	r0, ip, r1, asr #28
     8f8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     8fc:	018e4002 	orreq	r4, lr, r2
     900:	41180e41 	tstmi	r8, r1, asr #28
     904:	0e5d070d 	cdpeq	7, 5, cr0, cr13, cr13, {0}
     908:	0d0d410c 	stfeqs	f4, [sp, #-48]	; 0xffffffd0
     90c:	0000000c 	andeq	r0, r0, ip
     910:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     914:	7c020001 	stcvc	0, cr0, [r2], {1}
     918:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     91c:	00000024 	andeq	r0, r0, r4, lsr #32
     920:	0000090c 	andeq	r0, r0, ip, lsl #18
     924:	08003218 	stmdaeq	r0, {r3, r4, r9, ip, sp}
     928:	00000060 	andeq	r0, r0, r0, rrx
     92c:	40080e41 	andmi	r0, r8, r1, asr #28
     930:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     934:	180e4101 	stmdane	lr, {r0, r8, lr}
     938:	69070d41 	stmdbvs	r7, {r0, r6, r8, sl, fp}
     93c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     940:	0000000d 	andeq	r0, r0, sp
     944:	00000024 	andeq	r0, r0, r4, lsr #32
     948:	0000090c 	andeq	r0, r0, ip, lsl #18
     94c:	08003278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, sp}
     950:	0000006c 	andeq	r0, r0, ip, rrx
     954:	40080e41 	andmi	r0, r8, r1, asr #28
     958:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     95c:	100e4101 	andne	r4, lr, r1, lsl #2
     960:	6e070d41 	cdpvs	13, 0, cr0, cr7, cr1, {2}
     964:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     968:	0000000d 	andeq	r0, r0, sp
     96c:	00000024 	andeq	r0, r0, r4, lsr #32
     970:	0000090c 	andeq	r0, r0, ip, lsl #18
     974:	080032e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip, sp}
     978:	00000088 	andeq	r0, r0, r8, lsl #1
     97c:	400c0e41 	andmi	r0, ip, r1, asr #28
     980:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     984:	018e4002 	orreq	r4, lr, r2
     988:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
     98c:	0e7c070d 	cdpeq	7, 7, cr0, cr12, cr13, {0}
     990:	0d0d410c 	stfeqs	f4, [sp, #-48]	; 0xffffffd0
     994:	00000024 	andeq	r0, r0, r4, lsr #32
     998:	0000090c 	andeq	r0, r0, ip, lsl #18
     99c:	0800336c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, ip, sp}
     9a0:	00000090 	muleq	r0, r0, r0
     9a4:	40080e41 	andmi	r0, r8, r1, asr #28
     9a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     9ac:	200e4101 	andcs	r4, lr, r1, lsl #2
     9b0:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     9b4:	41080e40 	tstmi	r8, r0, asr #28
     9b8:	00000d0d 	andeq	r0, r0, sp, lsl #26
     9bc:	00000028 	andeq	r0, r0, r8, lsr #32
     9c0:	0000090c 	andeq	r0, r0, ip, lsl #18
     9c4:	080033fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, ip, sp}
     9c8:	00000096 	muleq	r0, r6, r0
     9cc:	400c0e41 	andmi	r0, ip, r1, asr #28
     9d0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     9d4:	018e4002 	orreq	r4, lr, r2
     9d8:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     9dc:	4602070d 	strmi	r0, [r2], -sp, lsl #14
     9e0:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     9e4:	0000000d 	andeq	r0, r0, sp
     9e8:	00000028 	andeq	r0, r0, r8, lsr #32
     9ec:	0000090c 	andeq	r0, r0, ip, lsl #18
     9f0:	08003494 	stmdaeq	r0, {r2, r4, r7, sl, ip, sp}
     9f4:	00000096 	muleq	r0, r6, r0
     9f8:	400c0e41 	andmi	r0, ip, r1, asr #28
     9fc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     a00:	018e4002 	orreq	r4, lr, r2
     a04:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     a08:	4602070d 	strmi	r0, [r2], -sp, lsl #14
     a0c:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     a10:	0000000d 	andeq	r0, r0, sp
     a14:	00000028 	andeq	r0, r0, r8, lsr #32
     a18:	0000090c 	andeq	r0, r0, ip, lsl #18
     a1c:	0800352c 	stmdaeq	r0, {r2, r3, r5, r8, sl, ip, sp}
     a20:	000000b8 	strheq	r0, [r0], -r8
     a24:	400c0e41 	andmi	r0, ip, r1, asr #28
     a28:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     a2c:	018e4002 	orreq	r4, lr, r2
     a30:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     a34:	5702070d 	strpl	r0, [r2, -sp, lsl #14]
     a38:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     a3c:	0000000d 	andeq	r0, r0, sp
     a40:	00000028 	andeq	r0, r0, r8, lsr #32
     a44:	0000090c 	andeq	r0, r0, ip, lsl #18
     a48:	080035e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, ip, sp}
     a4c:	000000b8 	strheq	r0, [r0], -r8
     a50:	400c0e41 	andmi	r0, ip, r1, asr #28
     a54:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     a58:	018e4002 	orreq	r4, lr, r2
     a5c:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     a60:	5702070d 	strpl	r0, [r2, -sp, lsl #14]
     a64:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     a68:	0000000d 	andeq	r0, r0, sp
     a6c:	00000028 	andeq	r0, r0, r8, lsr #32
     a70:	0000090c 	andeq	r0, r0, ip, lsl #18
     a74:	0800369c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, sp}
     a78:	00000090 	muleq	r0, r0, r0
     a7c:	400c0e41 	andmi	r0, ip, r1, asr #28
     a80:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     a84:	018e4002 	orreq	r4, lr, r2
     a88:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
     a8c:	4302070d 	movwmi	r0, #9997	; 0x270d
     a90:	0d410c0e 	stcleq	12, cr0, [r1, #-56]	; 0xffffffc8
     a94:	0000000d 	andeq	r0, r0, sp
     a98:	0000000c 	andeq	r0, r0, ip
     a9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     aa0:	7c020001 	stcvc	0, cr0, [r2], {1}
     aa4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     aa8:	00000020 	andeq	r0, r0, r0, lsr #32
     aac:	00000a98 	muleq	r0, r8, sl
     ab0:	0800372c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, ip, sp}
     ab4:	0000000c 	andeq	r0, r0, ip
     ab8:	40040e41 	andmi	r0, r4, r1, asr #28
     abc:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     ac0:	0d0d4207 	sfmeq	f4, 4, [sp, #-28]	; 0xffffffe4
     ac4:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     ac8:	00000000 	andeq	r0, r0, r0
     acc:	00000018 	andeq	r0, r0, r8, lsl r0
     ad0:	00000a98 	muleq	r0, r8, sl
     ad4:	08003738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, sp}
     ad8:	00000028 	andeq	r0, r0, r8, lsr #32
     adc:	40080e41 	andmi	r0, r8, r1, asr #28
     ae0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ae4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     ae8:	00000018 	andeq	r0, r0, r8, lsl r0
     aec:	00000a98 	muleq	r0, r8, sl
     af0:	08003760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip, sp}
     af4:	00000048 	andeq	r0, r0, r8, asr #32
     af8:	40080e41 	andmi	r0, r8, r1, asr #28
     afc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b00:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     b04:	00000024 	andeq	r0, r0, r4, lsr #32
     b08:	00000a98 	muleq	r0, r8, sl
     b0c:	080037a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, ip, sp}
     b10:	000004c8 	andeq	r0, r0, r8, asr #9
     b14:	40080e41 	andmi	r0, r8, r1, asr #28
     b18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b1c:	180e4101 	stmdane	lr, {r0, r8, lr}
     b20:	10070c41 	andne	r0, r7, r1, asr #24
     b24:	0e025b03 	vmlaeq.f64	d5, d2, d3
     b28:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
     b2c:	00000024 	andeq	r0, r0, r4, lsr #32
     b30:	00000a98 	muleq	r0, r8, sl
     b34:	08003c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, ip, sp}
     b38:	00000638 	andeq	r0, r0, r8, lsr r6
     b3c:	40080e41 	andmi	r0, r8, r1, asr #28
     b40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b44:	280e4101 	stmdacs	lr, {r0, r8, lr}
     b48:	20070c41 	andcs	r0, r7, r1, asr #24
     b4c:	0e030f03 	cdpeq	15, 0, cr0, cr3, cr3, {0}
     b50:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
     b54:	00000024 	andeq	r0, r0, r4, lsr #32
     b58:	00000a98 	muleq	r0, r8, sl
     b5c:	080042a8 	stmdaeq	r0, {r3, r5, r7, r9, lr}
     b60:	0000043c 	andeq	r0, r0, ip, lsr r4
     b64:	40080e41 	andmi	r0, r8, r1, asr #28
     b68:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     b6c:	200e4101 	andcs	r4, lr, r1, lsl #2
     b70:	18070c41 	stmdane	r7, {r0, r6, sl, fp}
     b74:	0e021503 	cfsh32eq	mvfx1, mvfx2, #3
     b78:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
     b7c:	00000028 	andeq	r0, r0, r8, lsr #32
     b80:	00000a98 	muleq	r0, r8, sl
     b84:	080046e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, lr}
     b88:	0000029c 	muleq	r0, ip, r2
     b8c:	400c0e41 	andmi	r0, ip, r1, asr #28
     b90:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     b94:	018e4002 	orreq	r4, lr, r2
     b98:	41400e41 	cmpmi	r0, r1, asr #28
     b9c:	0338070c 	teqeq	r8, #12, 14	; 0x300000
     ba0:	0c0e0136 	stfeqs	f0, [lr], {54}	; 0x36
     ba4:	000d0d41 	andeq	r0, sp, r1, asr #26
     ba8:	00000024 	andeq	r0, r0, r4, lsr #32
     bac:	00000a98 	muleq	r0, r8, sl
     bb0:	08004980 	stmdaeq	r0, {r7, r8, fp, lr}
     bb4:	0000022c 	andeq	r0, r0, ip, lsr #4
     bb8:	40080e41 	andmi	r0, r8, r1, asr #28
     bbc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     bc0:	180e4101 	stmdane	lr, {r0, r8, lr}
     bc4:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     bc8:	41080ef6 	strdmi	r0, [r8, -r6]
     bcc:	00000d0d 	andeq	r0, r0, sp, lsl #26
     bd0:	00000024 	andeq	r0, r0, r4, lsr #32
     bd4:	00000a98 	muleq	r0, r8, sl
     bd8:	08004bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, lr}
     bdc:	00000110 	andeq	r0, r0, r0, lsl r1
     be0:	40080e41 	andmi	r0, r8, r1, asr #28
     be4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     be8:	100e4101 	andne	r4, lr, r1, lsl #2
     bec:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     bf0:	41080e75 	tstmi	r8, r5, ror lr
     bf4:	00000d0d 	andeq	r0, r0, sp, lsl #26
     bf8:	00000024 	andeq	r0, r0, r4, lsr #32
     bfc:	00000a98 	muleq	r0, r8, sl
     c00:	08004cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, lr}
     c04:	0000007c 	andeq	r0, r0, ip, ror r0
     c08:	40080e41 	andmi	r0, r8, r1, asr #28
     c0c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c10:	180e4101 	stmdane	lr, {r0, r8, lr}
     c14:	10070c41 	andne	r0, r7, r1, asr #24
     c18:	41080e73 	tstmi	r8, r3, ror lr
     c1c:	00000d0d 	andeq	r0, r0, sp, lsl #26
     c20:	00000024 	andeq	r0, r0, r4, lsr #32
     c24:	00000a98 	muleq	r0, r8, sl
     c28:	08004d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, lr}
     c2c:	00000088 	andeq	r0, r0, r8, lsl #1
     c30:	40080e41 	andmi	r0, r8, r1, asr #28
     c34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c38:	100e4101 	andne	r4, lr, r1, lsl #2
     c3c:	70070d41 	andvc	r0, r7, r1, asr #26
     c40:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     c44:	0000000d 	andeq	r0, r0, sp
     c48:	00000018 	andeq	r0, r0, r8, lsl r0
     c4c:	00000a98 	muleq	r0, r8, sl
     c50:	08004dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, lr}
     c54:	0000002c 	andeq	r0, r0, ip, lsr #32
     c58:	40080e41 	andmi	r0, r8, r1, asr #28
     c5c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     c60:	070d4101 	streq	r4, [sp, -r1, lsl #2]
     c64:	00000020 	andeq	r0, r0, r0, lsr #32
     c68:	00000a98 	muleq	r0, r8, sl
     c6c:	08004dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, lr}
     c70:	0000002c 	andeq	r0, r0, ip, lsr #32
     c74:	40040e41 	andmi	r0, r4, r1, asr #28
     c78:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     c7c:	0d0d4b07 	vstreq	d4, [sp, #-28]	; 0xffffffe4
     c80:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     c84:	00000000 	andeq	r0, r0, r0
     c88:	00000020 	andeq	r0, r0, r0, lsr #32
     c8c:	00000a98 	muleq	r0, r8, sl
     c90:	08004e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, lr}
     c94:	0000001c 	andeq	r0, r0, ip, lsl r0
     c98:	40040e41 	andmi	r0, r4, r1, asr #28
     c9c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     ca0:	0d0d4707 	stceq	7, cr4, [sp, #-28]	; 0xffffffe4
     ca4:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     ca8:	00000000 	andeq	r0, r0, r0
     cac:	00000024 	andeq	r0, r0, r4, lsr #32
     cb0:	00000a98 	muleq	r0, r8, sl
     cb4:	08004e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, lr}
     cb8:	0000003c 	andeq	r0, r0, ip, lsr r0
     cbc:	40040e41 	andmi	r0, r4, r1, asr #28
     cc0:	0e410187 	dvfeqd	f0, f1, f7
     cc4:	070d4110 	smladeq	sp, r0, r1, r4
     cc8:	41040e56 	tstmi	r4, r6, asr lr
     ccc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     cd0:	00000e40 	andeq	r0, r0, r0, asr #28
     cd4:	00000024 	andeq	r0, r0, r4, lsr #32
     cd8:	00000a98 	muleq	r0, r8, sl
     cdc:	08004e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, lr}
     ce0:	0000003c 	andeq	r0, r0, ip, lsr r0
     ce4:	40040e41 	andmi	r0, r4, r1, asr #28
     ce8:	0e410187 	dvfeqd	f0, f1, f7
     cec:	070d4110 	smladeq	sp, r0, r1, r4
     cf0:	41040e56 	tstmi	r4, r6, asr lr
     cf4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     cf8:	00000e40 	andeq	r0, r0, r0, asr #28
     cfc:	00000024 	andeq	r0, r0, r4, lsr #32
     d00:	00000a98 	muleq	r0, r8, sl
     d04:	08004eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, lr}
     d08:	0000003c 	andeq	r0, r0, ip, lsr r0
     d0c:	40040e41 	andmi	r0, r4, r1, asr #28
     d10:	0e410187 	dvfeqd	f0, f1, f7
     d14:	070d4110 	smladeq	sp, r0, r1, r4
     d18:	41040e56 	tstmi	r4, r6, asr lr
     d1c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     d20:	00000e40 	andeq	r0, r0, r0, asr #28
     d24:	00000024 	andeq	r0, r0, r4, lsr #32
     d28:	00000a98 	muleq	r0, r8, sl
     d2c:	08004ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp, lr}
     d30:	0000003c 	andeq	r0, r0, ip, lsr r0
     d34:	40040e41 	andmi	r0, r4, r1, asr #28
     d38:	0e410187 	dvfeqd	f0, f1, f7
     d3c:	070d4110 	smladeq	sp, r0, r1, r4
     d40:	41040e56 	tstmi	r4, r6, asr lr
     d44:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     d48:	00000e40 	andeq	r0, r0, r0, asr #28
     d4c:	00000020 	andeq	r0, r0, r0, lsr #32
     d50:	00000a98 	muleq	r0, r8, sl
     d54:	00000000 	andeq	r0, r0, r0
     d58:	00000014 	andeq	r0, r0, r4, lsl r0
     d5c:	40040e41 	andmi	r0, r4, r1, asr #28
     d60:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     d64:	0d0d4407 	cfstrseq	mvf4, [sp, #-28]	; 0xffffffe4
     d68:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     d6c:	00000000 	andeq	r0, r0, r0
     d70:	0000000c 	andeq	r0, r0, ip
     d74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d78:	7c020001 	stcvc	0, cr0, [r2], {1}
     d7c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d80:	00000024 	andeq	r0, r0, r4, lsr #32
     d84:	00000d70 	andeq	r0, r0, r0, ror sp
     d88:	08004f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, lr}
     d8c:	0000002e 	andeq	r0, r0, lr, lsr #32
     d90:	40040e41 	andmi	r0, r4, r1, asr #28
     d94:	0e410187 	dvfeqd	f0, f1, f7
     d98:	070d4118 	smladeq	sp, r8, r1, r4
     d9c:	41040e51 	tstmi	r4, r1, asr lr
     da0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     da4:	00000e40 	andeq	r0, r0, r0, asr #28
     da8:	00000024 	andeq	r0, r0, r4, lsr #32
     dac:	00000d70 	andeq	r0, r0, r0, ror sp
     db0:	08004f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, lr}
     db4:	0000010c 	andeq	r0, r0, ip, lsl #2
     db8:	40040e41 	andmi	r0, r4, r1, asr #28
     dbc:	0e410187 	dvfeqd	f0, f1, f7
     dc0:	070d4130 	smladxeq	sp, r0, r1, r4
     dc4:	040e8002 	streq	r8, [lr], #-2
     dc8:	410d0d41 	tstmi	sp, r1, asr #26
     dcc:	000e40c7 	andeq	r4, lr, r7, asr #1
     dd0:	00000024 	andeq	r0, r0, r4, lsr #32
     dd4:	00000d70 	andeq	r0, r0, r0, ror sp
     dd8:	08005060 	stmdaeq	r0, {r5, r6, ip, lr}
     ddc:	00000064 	andeq	r0, r0, r4, rrx
     de0:	40080e41 	andmi	r0, r8, r1, asr #28
     de4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     de8:	980e4101 	stmdals	lr, {r0, r8, lr}
     dec:	070d4102 	streq	r4, [sp, -r2, lsl #2]
     df0:	41080e6d 	tstmi	r8, sp, ror #28
     df4:	00000d0d 	andeq	r0, r0, sp, lsl #26
     df8:	00000024 	andeq	r0, r0, r4, lsr #32
     dfc:	00000d70 	andeq	r0, r0, r0, ror sp
     e00:	080050c4 	stmdaeq	r0, {r2, r6, r7, ip, lr}
     e04:	000002f6 	strdeq	r0, [r0], -r6
     e08:	40080e41 	andmi	r0, r8, r1, asr #28
     e0c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e10:	a00e4101 	andge	r4, lr, r1, lsl #2
     e14:	070d4102 	streq	r4, [sp, -r2, lsl #2]
     e18:	0e017603 	cfmadd32eq	mvax0, mvfx7, mvfx1, mvfx3
     e1c:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
     e20:	00000024 	andeq	r0, r0, r4, lsr #32
     e24:	00000d70 	andeq	r0, r0, r0, ror sp
     e28:	080053bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, ip, lr}
     e2c:	00000176 	andeq	r0, r0, r6, ror r1
     e30:	40080e41 	andmi	r0, r8, r1, asr #28
     e34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     e38:	280e4101 	stmdacs	lr, {r0, r8, lr}
     e3c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     e40:	41080eb6 			; <UNDEFINED> instruction: 0x41080eb6
     e44:	00000d0d 	andeq	r0, r0, sp, lsl #26
     e48:	0000000c 	andeq	r0, r0, ip
     e4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e50:	7c020001 	stcvc	0, cr0, [r2], {1}
     e54:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e58:	00000024 	andeq	r0, r0, r4, lsr #32
     e5c:	00000e48 	andeq	r0, r0, r8, asr #28
     e60:	08005534 	stmdaeq	r0, {r2, r4, r5, r8, sl, ip, lr}
     e64:	00000034 	andeq	r0, r0, r4, lsr r0
     e68:	40040e41 	andmi	r0, r4, r1, asr #28
     e6c:	0e410187 	dvfeqd	f0, f1, f7
     e70:	070d4110 	smladeq	sp, r0, r1, r4
     e74:	41040e54 	tstmi	r4, r4, asr lr
     e78:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     e7c:	00000e40 	andeq	r0, r0, r0, asr #28
     e80:	00000028 	andeq	r0, r0, r8, lsr #32
     e84:	00000e48 	andeq	r0, r0, r8, asr #28
     e88:	08005568 	stmdaeq	r0, {r3, r5, r6, r8, sl, ip, lr}
     e8c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     e90:	400c0e41 	andmi	r0, ip, r1, asr #28
     e94:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     e98:	018e4002 	orreq	r4, lr, r2
     e9c:	02b00e41 	adcseq	r0, r0, #1040	; 0x410
     ea0:	02070d41 	andeq	r0, r7, #4160	; 0x1040
     ea4:	410c0ed6 	ldrdmi	r0, [ip, -r6]
     ea8:	00000d0d 	andeq	r0, r0, sp, lsl #26
     eac:	00000028 	andeq	r0, r0, r8, lsr #32
     eb0:	00000e48 	andeq	r0, r0, r8, asr #28
     eb4:	08005724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip, lr}
     eb8:	00000104 	andeq	r0, r0, r4, lsl #2
     ebc:	400c0e41 	andmi	r0, ip, r1, asr #28
     ec0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
     ec4:	018e4002 	orreq	r4, lr, r2
     ec8:	41480e41 	cmpmi	r8, r1, asr #28
     ecc:	0240070c 	subeq	r0, r0, #12, 14	; 0x300000
     ed0:	410c0e77 	tstmi	ip, r7, ror lr
     ed4:	00000d0d 	andeq	r0, r0, sp, lsl #26
     ed8:	00000024 	andeq	r0, r0, r4, lsr #32
     edc:	00000e48 	andeq	r0, r0, r8, asr #28
     ee0:	08005828 	stmdaeq	r0, {r3, r5, fp, ip, lr}
     ee4:	00000070 	andeq	r0, r0, r0, ror r0
     ee8:	40080e41 	andmi	r0, r8, r1, asr #28
     eec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     ef0:	180e4101 	stmdane	lr, {r0, r8, lr}
     ef4:	6b070d41 	blvs	1c4400 <_Min_Stack_Size+0x1c4200>
     ef8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     efc:	0000000d 	andeq	r0, r0, sp
     f00:	00000024 	andeq	r0, r0, r4, lsr #32
     f04:	00000e48 	andeq	r0, r0, r8, asr #28
     f08:	08005898 	stmdaeq	r0, {r3, r4, r7, fp, ip, lr}
     f0c:	0000005c 	andeq	r0, r0, ip, asr r0
     f10:	40080e41 	andmi	r0, r8, r1, asr #28
     f14:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     f18:	200e4101 	andcs	r4, lr, r1, lsl #2
     f1c:	66070d41 	strvs	r0, [r7], -r1, asr #26
     f20:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
     f24:	0000000d 	andeq	r0, r0, sp
     f28:	00000020 	andeq	r0, r0, r0, lsr #32
     f2c:	00000e48 	andeq	r0, r0, r8, asr #28
     f30:	080058f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, lr}
     f34:	00000048 	andeq	r0, r0, r8, asr #32
     f38:	40040e41 	andmi	r0, r4, r1, asr #28
     f3c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     f40:	0d0d5c07 	stceq	12, cr5, [sp, #-28]	; 0xffffffe4
     f44:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     f48:	00000000 	andeq	r0, r0, r0
     f4c:	00000020 	andeq	r0, r0, r0, lsr #32
     f50:	00000e48 	andeq	r0, r0, r8, asr #28
     f54:	0800593c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip, lr}
     f58:	0000001c 	andeq	r0, r0, ip, lsl r0
     f5c:	40040e41 	andmi	r0, r4, r1, asr #28
     f60:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
     f64:	0d0d4707 	stceq	7, cr4, [sp, #-28]	; 0xffffffe4
     f68:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
     f6c:	00000000 	andeq	r0, r0, r0
     f70:	0000000c 	andeq	r0, r0, ip
     f74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f78:	7c020001 	stcvc	0, cr0, [r2], {1}
     f7c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f80:	00000024 	andeq	r0, r0, r4, lsr #32
     f84:	00000f70 	andeq	r0, r0, r0, ror pc
     f88:	08005958 	stmdaeq	r0, {r3, r4, r6, r8, fp, ip, lr}
     f8c:	00000024 	andeq	r0, r0, r4, lsr #32
     f90:	40040e41 	andmi	r0, r4, r1, asr #28
     f94:	0e410187 	dvfeqd	f0, f1, f7
     f98:	070d4110 	smladeq	sp, r0, r1, r4
     f9c:	41040e4a 	tstmi	r4, sl, asr #28
     fa0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     fa4:	00000e40 	andeq	r0, r0, r0, asr #28
     fa8:	00000024 	andeq	r0, r0, r4, lsr #32
     fac:	00000f70 	andeq	r0, r0, r0, ror pc
     fb0:	0800597c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, ip, lr}
     fb4:	000000c4 	andeq	r0, r0, r4, asr #1
     fb8:	40040e41 	andmi	r0, r4, r1, asr #28
     fbc:	0e410187 	dvfeqd	f0, f1, f7
     fc0:	070d4120 	streq	r4, [sp, -r0, lsr #2]
     fc4:	040e5802 	streq	r5, [lr], #-2050	; 0xfffff7fe
     fc8:	410d0d41 	tstmi	sp, r1, asr #26
     fcc:	000e40c7 	andeq	r4, lr, r7, asr #1
     fd0:	00000024 	andeq	r0, r0, r4, lsr #32
     fd4:	00000f70 	andeq	r0, r0, r0, ror pc
     fd8:	00000000 	andeq	r0, r0, r0
     fdc:	0000002c 	andeq	r0, r0, ip, lsr #32
     fe0:	40040e41 	andmi	r0, r4, r1, asr #28
     fe4:	0e410187 	dvfeqd	f0, f1, f7
     fe8:	070d4110 	smladeq	sp, r0, r1, r4
     fec:	41040e4d 	tstmi	r4, sp, asr #28
     ff0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
     ff4:	00000e40 	andeq	r0, r0, r0, asr #28
     ff8:	00000024 	andeq	r0, r0, r4, lsr #32
     ffc:	00000f70 	andeq	r0, r0, r0, ror pc
    1000:	00000000 	andeq	r0, r0, r0
    1004:	00000040 	andeq	r0, r0, r0, asr #32
    1008:	40040e41 	andmi	r0, r4, r1, asr #28
    100c:	0e410187 	dvfeqd	f0, f1, f7
    1010:	070d4110 	smladeq	sp, r0, r1, r4
    1014:	41040e58 	tstmi	r4, r8, asr lr
    1018:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    101c:	00000e40 	andeq	r0, r0, r0, asr #28
    1020:	00000024 	andeq	r0, r0, r4, lsr #32
    1024:	00000f70 	andeq	r0, r0, r0, ror pc
    1028:	00000000 	andeq	r0, r0, r0
    102c:	00000038 	andeq	r0, r0, r8, lsr r0
    1030:	40040e41 	andmi	r0, r4, r1, asr #28
    1034:	0e410187 	dvfeqd	f0, f1, f7
    1038:	070d4110 	smladeq	sp, r0, r1, r4
    103c:	41040e53 	tstmi	r4, r3, asr lr
    1040:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1044:	00000e40 	andeq	r0, r0, r0, asr #28
    1048:	0000000c 	andeq	r0, r0, ip
    104c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1050:	7c020001 	stcvc	0, cr0, [r2], {1}
    1054:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1058:	00000020 	andeq	r0, r0, r0, lsr #32
    105c:	00001048 	andeq	r1, r0, r8, asr #32
    1060:	00000000 	andeq	r0, r0, r0
    1064:	0000005c 	andeq	r0, r0, ip, asr r0
    1068:	40040e41 	andmi	r0, r4, r1, asr #28
    106c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    1070:	0d0d6607 	stceq	6, cr6, [sp, #-28]	; 0xffffffe4
    1074:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    1078:	00000000 	andeq	r0, r0, r0
    107c:	00000024 	andeq	r0, r0, r4, lsr #32
    1080:	00001048 	andeq	r1, r0, r8, asr #32
    1084:	00000000 	andeq	r0, r0, r0
    1088:	0000005c 	andeq	r0, r0, ip, asr r0
    108c:	40040e41 	andmi	r0, r4, r1, asr #28
    1090:	0e410187 	dvfeqd	f0, f1, f7
    1094:	070d4110 	smladeq	sp, r0, r1, r4
    1098:	41040e65 	tstmi	r4, r5, ror #28
    109c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    10a0:	00000e40 	andeq	r0, r0, r0, asr #28
    10a4:	00000024 	andeq	r0, r0, r4, lsr #32
    10a8:	00001048 	andeq	r1, r0, r8, asr #32
    10ac:	00000000 	andeq	r0, r0, r0
    10b0:	00000050 	andeq	r0, r0, r0, asr r0
    10b4:	40080e41 	andmi	r0, r8, r1, asr #28
    10b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    10bc:	100e4101 	andne	r4, lr, r1, lsl #2
    10c0:	63070d41 	movwvs	r0, #32065	; 0x7d41
    10c4:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    10c8:	0000000d 	andeq	r0, r0, sp
    10cc:	00000024 	andeq	r0, r0, r4, lsr #32
    10d0:	00001048 	andeq	r1, r0, r8, asr #32
    10d4:	00000000 	andeq	r0, r0, r0
    10d8:	0000003c 	andeq	r0, r0, ip, lsr r0
    10dc:	40040e41 	andmi	r0, r4, r1, asr #28
    10e0:	0e410187 	dvfeqd	f0, f1, f7
    10e4:	070d4118 	smladeq	sp, r8, r1, r4
    10e8:	41040e55 	tstmi	r4, r5, asr lr
    10ec:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    10f0:	00000e40 	andeq	r0, r0, r0, asr #28
    10f4:	00000024 	andeq	r0, r0, r4, lsr #32
    10f8:	00001048 	andeq	r1, r0, r8, asr #32
    10fc:	00000000 	andeq	r0, r0, r0
    1100:	00000020 	andeq	r0, r0, r0, lsr #32
    1104:	40040e41 	andmi	r0, r4, r1, asr #28
    1108:	0e410187 	dvfeqd	f0, f1, f7
    110c:	070d4110 	smladeq	sp, r0, r1, r4
    1110:	41040e47 	tstmi	r4, r7, asr #28
    1114:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1118:	00000e40 	andeq	r0, r0, r0, asr #28
    111c:	00000024 	andeq	r0, r0, r4, lsr #32
    1120:	00001048 	andeq	r1, r0, r8, asr #32
    1124:	00000000 	andeq	r0, r0, r0
    1128:	0000003c 	andeq	r0, r0, ip, lsr r0
    112c:	40040e41 	andmi	r0, r4, r1, asr #28
    1130:	0e410187 	dvfeqd	f0, f1, f7
    1134:	070d4118 	smladeq	sp, r8, r1, r4
    1138:	41040e56 	tstmi	r4, r6, asr lr
    113c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1140:	00000e40 	andeq	r0, r0, r0, asr #28
    1144:	00000024 	andeq	r0, r0, r4, lsr #32
    1148:	00001048 	andeq	r1, r0, r8, asr #32
    114c:	00000000 	andeq	r0, r0, r0
    1150:	00000020 	andeq	r0, r0, r0, lsr #32
    1154:	40040e41 	andmi	r0, r4, r1, asr #28
    1158:	0e410187 	dvfeqd	f0, f1, f7
    115c:	070d4110 	smladeq	sp, r0, r1, r4
    1160:	41040e47 	tstmi	r4, r7, asr #28
    1164:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1168:	00000e40 	andeq	r0, r0, r0, asr #28
    116c:	00000024 	andeq	r0, r0, r4, lsr #32
    1170:	00001048 	andeq	r1, r0, r8, asr #32
    1174:	00000000 	andeq	r0, r0, r0
    1178:	00000038 	andeq	r0, r0, r8, lsr r0
    117c:	40040e41 	andmi	r0, r4, r1, asr #28
    1180:	0e410187 	dvfeqd	f0, f1, f7
    1184:	070d4118 	smladeq	sp, r8, r1, r4
    1188:	41040e53 	tstmi	r4, r3, asr lr
    118c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1190:	00000e40 	andeq	r0, r0, r0, asr #28
    1194:	00000020 	andeq	r0, r0, r0, lsr #32
    1198:	00001048 	andeq	r1, r0, r8, asr #32
    119c:	00000000 	andeq	r0, r0, r0
    11a0:	0000001c 	andeq	r0, r0, ip, lsl r0
    11a4:	40040e41 	andmi	r0, r4, r1, asr #28
    11a8:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    11ac:	0d0d4807 	stceq	8, cr4, [sp, #-28]	; 0xffffffe4
    11b0:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    11b4:	00000000 	andeq	r0, r0, r0
    11b8:	00000024 	andeq	r0, r0, r4, lsr #32
    11bc:	00001048 	andeq	r1, r0, r8, asr #32
    11c0:	00000000 	andeq	r0, r0, r0
    11c4:	00000038 	andeq	r0, r0, r8, lsr r0
    11c8:	40040e41 	andmi	r0, r4, r1, asr #28
    11cc:	0e410187 	dvfeqd	f0, f1, f7
    11d0:	070d4118 	smladeq	sp, r8, r1, r4
    11d4:	41040e53 	tstmi	r4, r3, asr lr
    11d8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    11dc:	00000e40 	andeq	r0, r0, r0, asr #28
    11e0:	00000024 	andeq	r0, r0, r4, lsr #32
    11e4:	00001048 	andeq	r1, r0, r8, asr #32
    11e8:	00000000 	andeq	r0, r0, r0
    11ec:	00000038 	andeq	r0, r0, r8, lsr r0
    11f0:	40040e41 	andmi	r0, r4, r1, asr #28
    11f4:	0e410187 	dvfeqd	f0, f1, f7
    11f8:	070d4118 	smladeq	sp, r8, r1, r4
    11fc:	41040e53 	tstmi	r4, r3, asr lr
    1200:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1204:	00000e40 	andeq	r0, r0, r0, asr #28
    1208:	00000024 	andeq	r0, r0, r4, lsr #32
    120c:	00001048 	andeq	r1, r0, r8, asr #32
    1210:	00000000 	andeq	r0, r0, r0
    1214:	00000038 	andeq	r0, r0, r8, lsr r0
    1218:	40040e41 	andmi	r0, r4, r1, asr #28
    121c:	0e410187 	dvfeqd	f0, f1, f7
    1220:	070d4118 	smladeq	sp, r8, r1, r4
    1224:	41040e54 	tstmi	r4, r4, asr lr
    1228:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    122c:	00000e40 	andeq	r0, r0, r0, asr #28
    1230:	00000024 	andeq	r0, r0, r4, lsr #32
    1234:	00001048 	andeq	r1, r0, r8, asr #32
    1238:	00000000 	andeq	r0, r0, r0
    123c:	0000004c 	andeq	r0, r0, ip, asr #32
    1240:	40040e41 	andmi	r0, r4, r1, asr #28
    1244:	0e410187 	dvfeqd	f0, f1, f7
    1248:	070d4110 	smladeq	sp, r0, r1, r4
    124c:	41040e5d 	tstmi	r4, sp, asr lr
    1250:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1254:	00000e40 	andeq	r0, r0, r0, asr #28
    1258:	00000024 	andeq	r0, r0, r4, lsr #32
    125c:	00001048 	andeq	r1, r0, r8, asr #32
    1260:	00000000 	andeq	r0, r0, r0
    1264:	0000001c 	andeq	r0, r0, ip, lsl r0
    1268:	40040e41 	andmi	r0, r4, r1, asr #28
    126c:	0e410187 	dvfeqd	f0, f1, f7
    1270:	070d4110 	smladeq	sp, r0, r1, r4
    1274:	41040e46 	tstmi	r4, r6, asr #28
    1278:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    127c:	00000e40 	andeq	r0, r0, r0, asr #28
    1280:	00000024 	andeq	r0, r0, r4, lsr #32
    1284:	00001048 	andeq	r1, r0, r8, asr #32
    1288:	00000000 	andeq	r0, r0, r0
    128c:	00000038 	andeq	r0, r0, r8, lsr r0
    1290:	40040e41 	andmi	r0, r4, r1, asr #28
    1294:	0e410187 	dvfeqd	f0, f1, f7
    1298:	070d4118 	smladeq	sp, r8, r1, r4
    129c:	41040e53 	tstmi	r4, r3, asr lr
    12a0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    12a4:	00000e40 	andeq	r0, r0, r0, asr #28
    12a8:	00000024 	andeq	r0, r0, r4, lsr #32
    12ac:	00001048 	andeq	r1, r0, r8, asr #32
    12b0:	08005a40 	stmdaeq	r0, {r6, r9, fp, ip, lr}
    12b4:	00000040 	andeq	r0, r0, r0, asr #32
    12b8:	40040e41 	andmi	r0, r4, r1, asr #28
    12bc:	0e410187 	dvfeqd	f0, f1, f7
    12c0:	070d4110 	smladeq	sp, r0, r1, r4
    12c4:	41040e58 	tstmi	r4, r8, asr lr
    12c8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    12cc:	00000e40 	andeq	r0, r0, r0, asr #28
    12d0:	00000024 	andeq	r0, r0, r4, lsr #32
    12d4:	00001048 	andeq	r1, r0, r8, asr #32
    12d8:	08005a80 	stmdaeq	r0, {r7, r9, fp, ip, lr}
    12dc:	00000020 	andeq	r0, r0, r0, lsr #32
    12e0:	40040e41 	andmi	r0, r4, r1, asr #28
    12e4:	0e410187 	dvfeqd	f0, f1, f7
    12e8:	070d4110 	smladeq	sp, r0, r1, r4
    12ec:	41040e47 	tstmi	r4, r7, asr #28
    12f0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    12f4:	00000e40 	andeq	r0, r0, r0, asr #28
    12f8:	00000024 	andeq	r0, r0, r4, lsr #32
    12fc:	00001048 	andeq	r1, r0, r8, asr #32
    1300:	08005aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip, lr}
    1304:	00000024 	andeq	r0, r0, r4, lsr #32
    1308:	40040e41 	andmi	r0, r4, r1, asr #28
    130c:	0e410187 	dvfeqd	f0, f1, f7
    1310:	070d4110 	smladeq	sp, r0, r1, r4
    1314:	41040e49 	tstmi	r4, r9, asr #28
    1318:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    131c:	00000e40 	andeq	r0, r0, r0, asr #28
    1320:	00000024 	andeq	r0, r0, r4, lsr #32
    1324:	00001048 	andeq	r1, r0, r8, asr #32
    1328:	08005ac4 	stmdaeq	r0, {r2, r6, r7, r9, fp, ip, lr}
    132c:	00000020 	andeq	r0, r0, r0, lsr #32
    1330:	40040e41 	andmi	r0, r4, r1, asr #28
    1334:	0e410187 	dvfeqd	f0, f1, f7
    1338:	070d4110 	smladeq	sp, r0, r1, r4
    133c:	41040e47 	tstmi	r4, r7, asr #28
    1340:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1344:	00000e40 	andeq	r0, r0, r0, asr #28
    1348:	00000024 	andeq	r0, r0, r4, lsr #32
    134c:	00001048 	andeq	r1, r0, r8, asr #32
    1350:	08005ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, ip, lr}
    1354:	00000160 	andeq	r0, r0, r0, ror #2
    1358:	40040e41 	andmi	r0, r4, r1, asr #28
    135c:	0e410187 	dvfeqd	f0, f1, f7
    1360:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    1364:	040ea002 	streq	sl, [lr], #-2
    1368:	410d0d41 	tstmi	sp, r1, asr #26
    136c:	000e40c7 	andeq	r4, lr, r7, asr #1
    1370:	00000024 	andeq	r0, r0, r4, lsr #32
    1374:	00001048 	andeq	r1, r0, r8, asr #32
    1378:	00000000 	andeq	r0, r0, r0
    137c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1380:	40040e41 	andmi	r0, r4, r1, asr #28
    1384:	0e410187 	dvfeqd	f0, f1, f7
    1388:	070d4110 	smladeq	sp, r0, r1, r4
    138c:	41040e56 	tstmi	r4, r6, asr lr
    1390:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1394:	00000e40 	andeq	r0, r0, r0, asr #28
    1398:	00000024 	andeq	r0, r0, r4, lsr #32
    139c:	00001048 	andeq	r1, r0, r8, asr #32
    13a0:	08005c44 	stmdaeq	r0, {r2, r6, sl, fp, ip, lr}
    13a4:	0000003c 	andeq	r0, r0, ip, lsr r0
    13a8:	40040e41 	andmi	r0, r4, r1, asr #28
    13ac:	0e410187 	dvfeqd	f0, f1, f7
    13b0:	070d4110 	smladeq	sp, r0, r1, r4
    13b4:	41040e56 	tstmi	r4, r6, asr lr
    13b8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    13bc:	00000e40 	andeq	r0, r0, r0, asr #28
    13c0:	00000024 	andeq	r0, r0, r4, lsr #32
    13c4:	00001048 	andeq	r1, r0, r8, asr #32
    13c8:	08005c80 	stmdaeq	r0, {r7, sl, fp, ip, lr}
    13cc:	0000003c 	andeq	r0, r0, ip, lsr r0
    13d0:	40040e41 	andmi	r0, r4, r1, asr #28
    13d4:	0e410187 	dvfeqd	f0, f1, f7
    13d8:	070d4110 	smladeq	sp, r0, r1, r4
    13dc:	41040e56 	tstmi	r4, r6, asr lr
    13e0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    13e4:	00000e40 	andeq	r0, r0, r0, asr #28
    13e8:	00000024 	andeq	r0, r0, r4, lsr #32
    13ec:	00001048 	andeq	r1, r0, r8, asr #32
    13f0:	00000000 	andeq	r0, r0, r0
    13f4:	0000003c 	andeq	r0, r0, ip, lsr r0
    13f8:	40040e41 	andmi	r0, r4, r1, asr #28
    13fc:	0e410187 	dvfeqd	f0, f1, f7
    1400:	070d4110 	smladeq	sp, r0, r1, r4
    1404:	41040e56 	tstmi	r4, r6, asr lr
    1408:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    140c:	00000e40 	andeq	r0, r0, r0, asr #28
    1410:	00000024 	andeq	r0, r0, r4, lsr #32
    1414:	00001048 	andeq	r1, r0, r8, asr #32
    1418:	08005cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip, lr}
    141c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1420:	40040e41 	andmi	r0, r4, r1, asr #28
    1424:	0e410187 	dvfeqd	f0, f1, f7
    1428:	070d4110 	smladeq	sp, r0, r1, r4
    142c:	41040e56 	tstmi	r4, r6, asr lr
    1430:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1434:	00000e40 	andeq	r0, r0, r0, asr #28
    1438:	00000024 	andeq	r0, r0, r4, lsr #32
    143c:	00001048 	andeq	r1, r0, r8, asr #32
    1440:	08005cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, ip, lr}
    1444:	00000020 	andeq	r0, r0, r0, lsr #32
    1448:	40040e41 	andmi	r0, r4, r1, asr #28
    144c:	0e410187 	dvfeqd	f0, f1, f7
    1450:	070d4110 	smladeq	sp, r0, r1, r4
    1454:	41040e47 	tstmi	r4, r7, asr #28
    1458:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    145c:	00000e40 	andeq	r0, r0, r0, asr #28
    1460:	00000024 	andeq	r0, r0, r4, lsr #32
    1464:	00001048 	andeq	r1, r0, r8, asr #32
    1468:	00000000 	andeq	r0, r0, r0
    146c:	00000020 	andeq	r0, r0, r0, lsr #32
    1470:	40040e41 	andmi	r0, r4, r1, asr #28
    1474:	0e410187 	dvfeqd	f0, f1, f7
    1478:	070d4110 	smladeq	sp, r0, r1, r4
    147c:	41040e47 	tstmi	r4, r7, asr #28
    1480:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1484:	00000e40 	andeq	r0, r0, r0, asr #28
    1488:	00000024 	andeq	r0, r0, r4, lsr #32
    148c:	00001048 	andeq	r1, r0, r8, asr #32
    1490:	00000000 	andeq	r0, r0, r0
    1494:	00000020 	andeq	r0, r0, r0, lsr #32
    1498:	40040e41 	andmi	r0, r4, r1, asr #28
    149c:	0e410187 	dvfeqd	f0, f1, f7
    14a0:	070d4110 	smladeq	sp, r0, r1, r4
    14a4:	41040e47 	tstmi	r4, r7, asr #28
    14a8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    14ac:	00000e40 	andeq	r0, r0, r0, asr #28
    14b0:	00000024 	andeq	r0, r0, r4, lsr #32
    14b4:	00001048 	andeq	r1, r0, r8, asr #32
    14b8:	08005d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, ip, lr}
    14bc:	00000074 	andeq	r0, r0, r4, ror r0
    14c0:	40040e41 	andmi	r0, r4, r1, asr #28
    14c4:	0e410187 	dvfeqd	f0, f1, f7
    14c8:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    14cc:	41040e71 	tstmi	r4, r1, ror lr
    14d0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    14d4:	00000e40 	andeq	r0, r0, r0, asr #28
    14d8:	00000020 	andeq	r0, r0, r0, lsr #32
    14dc:	00001048 	andeq	r1, r0, r8, asr #32
    14e0:	00000000 	andeq	r0, r0, r0
    14e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    14e8:	40040e41 	andmi	r0, r4, r1, asr #28
    14ec:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    14f0:	0d0d4807 	stceq	8, cr4, [sp, #-28]	; 0xffffffe4
    14f4:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    14f8:	00000000 	andeq	r0, r0, r0
    14fc:	00000024 	andeq	r0, r0, r4, lsr #32
    1500:	00001048 	andeq	r1, r0, r8, asr #32
    1504:	00000000 	andeq	r0, r0, r0
    1508:	00000034 	andeq	r0, r0, r4, lsr r0
    150c:	40040e41 	andmi	r0, r4, r1, asr #28
    1510:	0e410187 	dvfeqd	f0, f1, f7
    1514:	070d4118 	smladeq	sp, r8, r1, r4
    1518:	41040e52 	tstmi	r4, r2, asr lr
    151c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1520:	00000e40 	andeq	r0, r0, r0, asr #28
    1524:	00000024 	andeq	r0, r0, r4, lsr #32
    1528:	00001048 	andeq	r1, r0, r8, asr #32
    152c:	00000000 	andeq	r0, r0, r0
    1530:	00000020 	andeq	r0, r0, r0, lsr #32
    1534:	40040e41 	andmi	r0, r4, r1, asr #28
    1538:	0e410187 	dvfeqd	f0, f1, f7
    153c:	070d4110 	smladeq	sp, r0, r1, r4
    1540:	41040e47 	tstmi	r4, r7, asr #28
    1544:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1548:	00000e40 	andeq	r0, r0, r0, asr #28
    154c:	0000000c 	andeq	r0, r0, ip
    1550:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1554:	7c020001 	stcvc	0, cr0, [r2], {1}
    1558:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    155c:	00000024 	andeq	r0, r0, r4, lsr #32
    1560:	0000154c 	andeq	r1, r0, ip, asr #10
    1564:	00000000 	andeq	r0, r0, r0
    1568:	000000e4 	andeq	r0, r0, r4, ror #1
    156c:	40080e41 	andmi	r0, r8, r1, asr #28
    1570:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1574:	100e4101 	andne	r4, lr, r1, lsl #2
    1578:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    157c:	41080e5f 	tstmi	r8, pc, asr lr
    1580:	00000d0d 	andeq	r0, r0, sp, lsl #26
    1584:	00000018 	andeq	r0, r0, r8, lsl r0
    1588:	0000154c 	andeq	r1, r0, ip, asr #10
    158c:	00000000 	andeq	r0, r0, r0
    1590:	00000018 	andeq	r0, r0, r8, lsl r0
    1594:	40080e41 	andmi	r0, r8, r1, asr #28
    1598:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    159c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    15a0:	00000024 	andeq	r0, r0, r4, lsr #32
    15a4:	0000154c 	andeq	r1, r0, ip, asr #10
    15a8:	08005d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp, ip, lr}
    15ac:	00000178 	andeq	r0, r0, r8, ror r1
    15b0:	40040e41 	andmi	r0, r4, r1, asr #28
    15b4:	0e410187 	dvfeqd	f0, f1, f7
    15b8:	070d4128 	streq	r4, [sp, -r8, lsr #2]
    15bc:	040eb602 	streq	fp, [lr], #-1538	; 0xfffff9fe
    15c0:	410d0d41 	tstmi	sp, r1, asr #26
    15c4:	000e40c7 	andeq	r4, lr, r7, asr #1
    15c8:	00000024 	andeq	r0, r0, r4, lsr #32
    15cc:	0000154c 	andeq	r1, r0, ip, asr #10
    15d0:	00000000 	andeq	r0, r0, r0
    15d4:	00000026 	andeq	r0, r0, r6, lsr #32
    15d8:	40040e41 	andmi	r0, r4, r1, asr #28
    15dc:	0e410187 	dvfeqd	f0, f1, f7
    15e0:	070d4110 	smladeq	sp, r0, r1, r4
    15e4:	41040e4d 	tstmi	r4, sp, asr #28
    15e8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    15ec:	00000e40 	andeq	r0, r0, r0, asr #28
    15f0:	00000024 	andeq	r0, r0, r4, lsr #32
    15f4:	0000154c 	andeq	r1, r0, ip, asr #10
    15f8:	00000000 	andeq	r0, r0, r0
    15fc:	00000032 	andeq	r0, r0, r2, lsr r0
    1600:	40040e41 	andmi	r0, r4, r1, asr #28
    1604:	0e410187 	dvfeqd	f0, f1, f7
    1608:	070d4118 	smladeq	sp, r8, r1, r4
    160c:	41040e53 	tstmi	r4, r3, asr lr
    1610:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1614:	00000e40 	andeq	r0, r0, r0, asr #28
    1618:	00000024 	andeq	r0, r0, r4, lsr #32
    161c:	0000154c 	andeq	r1, r0, ip, asr #10
    1620:	00000000 	andeq	r0, r0, r0
    1624:	00000018 	andeq	r0, r0, r8, lsl r0
    1628:	40040e41 	andmi	r0, r4, r1, asr #28
    162c:	0e410187 	dvfeqd	f0, f1, f7
    1630:	070d4110 	smladeq	sp, r0, r1, r4
    1634:	41040e46 	tstmi	r4, r6, asr #28
    1638:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    163c:	00000e40 	andeq	r0, r0, r0, asr #28
    1640:	00000024 	andeq	r0, r0, r4, lsr #32
    1644:	0000154c 	andeq	r1, r0, ip, asr #10
    1648:	00000000 	andeq	r0, r0, r0
    164c:	00000032 	andeq	r0, r0, r2, lsr r0
    1650:	40040e41 	andmi	r0, r4, r1, asr #28
    1654:	0e410187 	dvfeqd	f0, f1, f7
    1658:	070d4118 	smladeq	sp, r8, r1, r4
    165c:	41040e53 	tstmi	r4, r3, asr lr
    1660:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1664:	00000e40 	andeq	r0, r0, r0, asr #28
    1668:	00000024 	andeq	r0, r0, r4, lsr #32
    166c:	0000154c 	andeq	r1, r0, ip, asr #10
    1670:	00000000 	andeq	r0, r0, r0
    1674:	00000018 	andeq	r0, r0, r8, lsl r0
    1678:	40040e41 	andmi	r0, r4, r1, asr #28
    167c:	0e410187 	dvfeqd	f0, f1, f7
    1680:	070d4110 	smladeq	sp, r0, r1, r4
    1684:	41040e46 	tstmi	r4, r6, asr #28
    1688:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    168c:	00000e40 	andeq	r0, r0, r0, asr #28
    1690:	00000024 	andeq	r0, r0, r4, lsr #32
    1694:	0000154c 	andeq	r1, r0, ip, asr #10
    1698:	08005f04 	stmdaeq	r0, {r2, r8, r9, sl, fp, ip, lr}
    169c:	0000001c 	andeq	r0, r0, ip, lsl r0
    16a0:	40040e41 	andmi	r0, r4, r1, asr #28
    16a4:	0e410187 	dvfeqd	f0, f1, f7
    16a8:	070d4110 	smladeq	sp, r0, r1, r4
    16ac:	41040e48 	tstmi	r4, r8, asr #28
    16b0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    16b4:	00000e40 	andeq	r0, r0, r0, asr #28
    16b8:	00000024 	andeq	r0, r0, r4, lsr #32
    16bc:	0000154c 	andeq	r1, r0, ip, asr #10
    16c0:	08005f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip, lr}
    16c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    16c8:	40040e41 	andmi	r0, r4, r1, asr #28
    16cc:	0e410187 	dvfeqd	f0, f1, f7
    16d0:	070d4110 	smladeq	sp, r0, r1, r4
    16d4:	41040e48 	tstmi	r4, r8, asr #28
    16d8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    16dc:	00000e40 	andeq	r0, r0, r0, asr #28
    16e0:	00000024 	andeq	r0, r0, r4, lsr #32
    16e4:	0000154c 	andeq	r1, r0, ip, asr #10
    16e8:	00000000 	andeq	r0, r0, r0
    16ec:	0000002e 	andeq	r0, r0, lr, lsr #32
    16f0:	40040e41 	andmi	r0, r4, r1, asr #28
    16f4:	0e410187 	dvfeqd	f0, f1, f7
    16f8:	070d4110 	smladeq	sp, r0, r1, r4
    16fc:	41040e51 	tstmi	r4, r1, asr lr
    1700:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1704:	00000e40 	andeq	r0, r0, r0, asr #28
    1708:	00000024 	andeq	r0, r0, r4, lsr #32
    170c:	0000154c 	andeq	r1, r0, ip, asr #10
    1710:	00000000 	andeq	r0, r0, r0
    1714:	0000001c 	andeq	r0, r0, ip, lsl r0
    1718:	40040e41 	andmi	r0, r4, r1, asr #28
    171c:	0e410187 	dvfeqd	f0, f1, f7
    1720:	070d4110 	smladeq	sp, r0, r1, r4
    1724:	41040e48 	tstmi	r4, r8, asr #28
    1728:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    172c:	00000e40 	andeq	r0, r0, r0, asr #28
    1730:	00000024 	andeq	r0, r0, r4, lsr #32
    1734:	0000154c 	andeq	r1, r0, ip, asr #10
    1738:	00000000 	andeq	r0, r0, r0
    173c:	00000042 	andeq	r0, r0, r2, asr #32
    1740:	40040e41 	andmi	r0, r4, r1, asr #28
    1744:	0e410187 	dvfeqd	f0, f1, f7
    1748:	070d4118 	smladeq	sp, r8, r1, r4
    174c:	41040e5b 	tstmi	r4, fp, asr lr
    1750:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1754:	00000e40 	andeq	r0, r0, r0, asr #28
    1758:	00000024 	andeq	r0, r0, r4, lsr #32
    175c:	0000154c 	andeq	r1, r0, ip, asr #10
    1760:	00000000 	andeq	r0, r0, r0
    1764:	0000004c 	andeq	r0, r0, ip, asr #32
    1768:	40040e41 	andmi	r0, r4, r1, asr #28
    176c:	0e410187 	dvfeqd	f0, f1, f7
    1770:	070d4118 	smladeq	sp, r8, r1, r4
    1774:	41040e5d 	tstmi	r4, sp, asr lr
    1778:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    177c:	00000e40 	andeq	r0, r0, r0, asr #28
    1780:	00000024 	andeq	r0, r0, r4, lsr #32
    1784:	0000154c 	andeq	r1, r0, ip, asr #10
    1788:	00000000 	andeq	r0, r0, r0
    178c:	00000020 	andeq	r0, r0, r0, lsr #32
    1790:	40040e41 	andmi	r0, r4, r1, asr #28
    1794:	0e410187 	dvfeqd	f0, f1, f7
    1798:	070d4110 	smladeq	sp, r0, r1, r4
    179c:	41040e47 	tstmi	r4, r7, asr #28
    17a0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    17a4:	00000e40 	andeq	r0, r0, r0, asr #28
    17a8:	00000024 	andeq	r0, r0, r4, lsr #32
    17ac:	0000154c 	andeq	r1, r0, ip, asr #10
    17b0:	00000000 	andeq	r0, r0, r0
    17b4:	000000e0 	andeq	r0, r0, r0, ror #1
    17b8:	40040e41 	andmi	r0, r4, r1, asr #28
    17bc:	0e410187 	dvfeqd	f0, f1, f7
    17c0:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    17c4:	040e6802 	streq	r6, [lr], #-2050	; 0xfffff7fe
    17c8:	410d0d41 	tstmi	sp, r1, asr #26
    17cc:	000e40c7 	andeq	r4, lr, r7, asr #1
    17d0:	00000028 	andeq	r0, r0, r8, lsr #32
    17d4:	0000154c 	andeq	r1, r0, ip, asr #10
    17d8:	00000000 	andeq	r0, r0, r0
    17dc:	00000084 	andeq	r0, r0, r4, lsl #1
    17e0:	40080e41 	andmi	r0, r8, r1, asr #28
    17e4:	87400284 	strbhi	r0, [r0, -r4, lsl #5]
    17e8:	180e4101 	stmdane	lr, {r0, r8, lr}
    17ec:	7a070d41 	bvc	1c4cf8 <_Min_Stack_Size+0x1c4af8>
    17f0:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    17f4:	40c7410d 	sbcmi	r4, r7, sp, lsl #2
    17f8:	000e40c4 	andeq	r4, lr, r4, asr #1
    17fc:	00000024 	andeq	r0, r0, r4, lsr #32
    1800:	0000154c 	andeq	r1, r0, ip, asr #10
    1804:	00000000 	andeq	r0, r0, r0
    1808:	0000001c 	andeq	r0, r0, ip, lsl r0
    180c:	40040e41 	andmi	r0, r4, r1, asr #28
    1810:	0e410187 	dvfeqd	f0, f1, f7
    1814:	070d4110 	smladeq	sp, r0, r1, r4
    1818:	41040e46 	tstmi	r4, r6, asr #28
    181c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1820:	00000e40 	andeq	r0, r0, r0, asr #28
    1824:	0000000c 	andeq	r0, r0, ip
    1828:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    182c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1830:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1834:	00000024 	andeq	r0, r0, r4, lsr #32
    1838:	00001824 	andeq	r1, r0, r4, lsr #16
    183c:	00000000 	andeq	r0, r0, r0
    1840:	00000074 	andeq	r0, r0, r4, ror r0
    1844:	40080e41 	andmi	r0, r8, r1, asr #28
    1848:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    184c:	100e4101 	andne	r4, lr, r1, lsl #2
    1850:	6f070d41 	svcvs	0x00070d41
    1854:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    1858:	0000000d 	andeq	r0, r0, sp
    185c:	00000024 	andeq	r0, r0, r4, lsr #32
    1860:	00001824 	andeq	r1, r0, r4, lsr #16
    1864:	08005f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, ip, lr}
    1868:	00000086 	andeq	r0, r0, r6, lsl #1
    186c:	40040e41 	andmi	r0, r4, r1, asr #28
    1870:	0e410187 	dvfeqd	f0, f1, f7
    1874:	070d4118 	smladeq	sp, r8, r1, r4
    1878:	41040e7d 	tstmi	r4, sp, ror lr
    187c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1880:	00000e40 	andeq	r0, r0, r0, asr #28
    1884:	00000024 	andeq	r0, r0, r4, lsr #32
    1888:	00001824 	andeq	r1, r0, r4, lsr #16
    188c:	00000000 	andeq	r0, r0, r0
    1890:	00000168 	andeq	r0, r0, r8, ror #2
    1894:	40080e41 	andmi	r0, r8, r1, asr #28
    1898:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    189c:	380e4101 	stmdacc	lr, {r0, r8, lr}
    18a0:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    18a4:	41080eaa 	smlatbmi	r8, sl, lr, r0
    18a8:	00000d0d 	andeq	r0, r0, sp, lsl #26
    18ac:	00000024 	andeq	r0, r0, r4, lsr #32
    18b0:	00001824 	andeq	r1, r0, r4, lsr #16
    18b4:	00000000 	andeq	r0, r0, r0
    18b8:	00000048 	andeq	r0, r0, r8, asr #32
    18bc:	40040e41 	andmi	r0, r4, r1, asr #28
    18c0:	0e410187 	dvfeqd	f0, f1, f7
    18c4:	070d4110 	smladeq	sp, r0, r1, r4
    18c8:	41040e5e 	tstmi	r4, lr, asr lr
    18cc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    18d0:	00000e40 	andeq	r0, r0, r0, asr #28
    18d4:	00000024 	andeq	r0, r0, r4, lsr #32
    18d8:	00001824 	andeq	r1, r0, r4, lsr #16
    18dc:	00000000 	andeq	r0, r0, r0
    18e0:	00000036 	andeq	r0, r0, r6, lsr r0
    18e4:	40040e41 	andmi	r0, r4, r1, asr #28
    18e8:	0e410187 	dvfeqd	f0, f1, f7
    18ec:	070d4110 	smladeq	sp, r0, r1, r4
    18f0:	41040e55 	tstmi	r4, r5, asr lr
    18f4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    18f8:	00000e40 	andeq	r0, r0, r0, asr #28
    18fc:	00000024 	andeq	r0, r0, r4, lsr #32
    1900:	00001824 	andeq	r1, r0, r4, lsr #16
    1904:	08005fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, ip, lr}
    1908:	0000003e 	andeq	r0, r0, lr, lsr r0
    190c:	40040e41 	andmi	r0, r4, r1, asr #28
    1910:	0e410187 	dvfeqd	f0, f1, f7
    1914:	070d4110 	smladeq	sp, r0, r1, r4
    1918:	41040e59 	tstmi	r4, r9, asr lr
    191c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1920:	00000e40 	andeq	r0, r0, r0, asr #28
    1924:	00000024 	andeq	r0, r0, r4, lsr #32
    1928:	00001824 	andeq	r1, r0, r4, lsr #16
    192c:	00000000 	andeq	r0, r0, r0
    1930:	0000003e 	andeq	r0, r0, lr, lsr r0
    1934:	40040e41 	andmi	r0, r4, r1, asr #28
    1938:	0e410187 	dvfeqd	f0, f1, f7
    193c:	070d4110 	smladeq	sp, r0, r1, r4
    1940:	41040e59 	tstmi	r4, r9, asr lr
    1944:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1948:	00000e40 	andeq	r0, r0, r0, asr #28
    194c:	00000024 	andeq	r0, r0, r4, lsr #32
    1950:	00001824 	andeq	r1, r0, r4, lsr #16
    1954:	00000000 	andeq	r0, r0, r0
    1958:	00000060 	andeq	r0, r0, r0, rrx
    195c:	40040e41 	andmi	r0, r4, r1, asr #28
    1960:	0e410187 	dvfeqd	f0, f1, f7
    1964:	070d4118 	smladeq	sp, r8, r1, r4
    1968:	41040e6a 	tstmi	r4, sl, ror #28
    196c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1970:	00000e40 	andeq	r0, r0, r0, asr #28
    1974:	00000024 	andeq	r0, r0, r4, lsr #32
    1978:	00001824 	andeq	r1, r0, r4, lsr #16
    197c:	00000000 	andeq	r0, r0, r0
    1980:	00000046 	andeq	r0, r0, r6, asr #32
    1984:	40040e41 	andmi	r0, r4, r1, asr #28
    1988:	0e410187 	dvfeqd	f0, f1, f7
    198c:	070d4110 	smladeq	sp, r0, r1, r4
    1990:	41040e5d 	tstmi	r4, sp, asr lr
    1994:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1998:	00000e40 	andeq	r0, r0, r0, asr #28
    199c:	00000024 	andeq	r0, r0, r4, lsr #32
    19a0:	00001824 	andeq	r1, r0, r4, lsr #16
    19a4:	08006004 	stmdaeq	r0, {r2, sp, lr}
    19a8:	0000001c 	andeq	r0, r0, ip, lsl r0
    19ac:	40040e41 	andmi	r0, r4, r1, asr #28
    19b0:	0e410187 	dvfeqd	f0, f1, f7
    19b4:	070d4110 	smladeq	sp, r0, r1, r4
    19b8:	41040e48 	tstmi	r4, r8, asr #28
    19bc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    19c0:	00000e40 	andeq	r0, r0, r0, asr #28
    19c4:	00000024 	andeq	r0, r0, r4, lsr #32
    19c8:	00001824 	andeq	r1, r0, r4, lsr #16
    19cc:	08006020 	stmdaeq	r0, {r5, sp, lr}
    19d0:	00000018 	andeq	r0, r0, r8, lsl r0
    19d4:	40040e41 	andmi	r0, r4, r1, asr #28
    19d8:	0e410187 	dvfeqd	f0, f1, f7
    19dc:	070d4110 	smladeq	sp, r0, r1, r4
    19e0:	41040e46 	tstmi	r4, r6, asr #28
    19e4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    19e8:	00000e40 	andeq	r0, r0, r0, asr #28
    19ec:	00000024 	andeq	r0, r0, r4, lsr #32
    19f0:	00001824 	andeq	r1, r0, r4, lsr #16
    19f4:	00000000 	andeq	r0, r0, r0
    19f8:	00000042 	andeq	r0, r0, r2, asr #32
    19fc:	40040e41 	andmi	r0, r4, r1, asr #28
    1a00:	0e410187 	dvfeqd	f0, f1, f7
    1a04:	070d4110 	smladeq	sp, r0, r1, r4
    1a08:	41040e5b 	tstmi	r4, fp, asr lr
    1a0c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1a10:	00000e40 	andeq	r0, r0, r0, asr #28
    1a14:	00000024 	andeq	r0, r0, r4, lsr #32
    1a18:	00001824 	andeq	r1, r0, r4, lsr #16
    1a1c:	00000000 	andeq	r0, r0, r0
    1a20:	0000003e 	andeq	r0, r0, lr, lsr r0
    1a24:	40040e41 	andmi	r0, r4, r1, asr #28
    1a28:	0e410187 	dvfeqd	f0, f1, f7
    1a2c:	070d4110 	smladeq	sp, r0, r1, r4
    1a30:	41040e59 	tstmi	r4, r9, asr lr
    1a34:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1a38:	00000e40 	andeq	r0, r0, r0, asr #28
    1a3c:	00000024 	andeq	r0, r0, r4, lsr #32
    1a40:	00001824 	andeq	r1, r0, r4, lsr #16
    1a44:	00000000 	andeq	r0, r0, r0
    1a48:	00000036 	andeq	r0, r0, r6, lsr r0
    1a4c:	40040e41 	andmi	r0, r4, r1, asr #28
    1a50:	0e410187 	dvfeqd	f0, f1, f7
    1a54:	070d4110 	smladeq	sp, r0, r1, r4
    1a58:	41040e55 	tstmi	r4, r5, asr lr
    1a5c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1a60:	00000e40 	andeq	r0, r0, r0, asr #28
    1a64:	00000024 	andeq	r0, r0, r4, lsr #32
    1a68:	00001824 	andeq	r1, r0, r4, lsr #16
    1a6c:	00000000 	andeq	r0, r0, r0
    1a70:	00000022 	andeq	r0, r0, r2, lsr #32
    1a74:	40040e41 	andmi	r0, r4, r1, asr #28
    1a78:	0e410187 	dvfeqd	f0, f1, f7
    1a7c:	070d4110 	smladeq	sp, r0, r1, r4
    1a80:	41040e4b 	tstmi	r4, fp, asr #28
    1a84:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1a88:	00000e40 	andeq	r0, r0, r0, asr #28
    1a8c:	00000024 	andeq	r0, r0, r4, lsr #32
    1a90:	00001824 	andeq	r1, r0, r4, lsr #16
    1a94:	00000000 	andeq	r0, r0, r0
    1a98:	0000003e 	andeq	r0, r0, lr, lsr r0
    1a9c:	40040e41 	andmi	r0, r4, r1, asr #28
    1aa0:	0e410187 	dvfeqd	f0, f1, f7
    1aa4:	070d4110 	smladeq	sp, r0, r1, r4
    1aa8:	41040e59 	tstmi	r4, r9, asr lr
    1aac:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1ab0:	00000e40 	andeq	r0, r0, r0, asr #28
    1ab4:	00000024 	andeq	r0, r0, r4, lsr #32
    1ab8:	00001824 	andeq	r1, r0, r4, lsr #16
    1abc:	00000000 	andeq	r0, r0, r0
    1ac0:	00000030 	andeq	r0, r0, r0, lsr r0
    1ac4:	40040e41 	andmi	r0, r4, r1, asr #28
    1ac8:	0e410187 	dvfeqd	f0, f1, f7
    1acc:	070d4118 	smladeq	sp, r8, r1, r4
    1ad0:	41040e52 	tstmi	r4, r2, asr lr
    1ad4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1ad8:	00000e40 	andeq	r0, r0, r0, asr #28
    1adc:	00000024 	andeq	r0, r0, r4, lsr #32
    1ae0:	00001824 	andeq	r1, r0, r4, lsr #16
    1ae4:	00000000 	andeq	r0, r0, r0
    1ae8:	00000018 	andeq	r0, r0, r8, lsl r0
    1aec:	40040e41 	andmi	r0, r4, r1, asr #28
    1af0:	0e410187 	dvfeqd	f0, f1, f7
    1af4:	070d4110 	smladeq	sp, r0, r1, r4
    1af8:	41040e46 	tstmi	r4, r6, asr #28
    1afc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1b00:	00000e40 	andeq	r0, r0, r0, asr #28
    1b04:	00000024 	andeq	r0, r0, r4, lsr #32
    1b08:	00001824 	andeq	r1, r0, r4, lsr #16
    1b0c:	00000000 	andeq	r0, r0, r0
    1b10:	00000040 	andeq	r0, r0, r0, asr #32
    1b14:	40040e41 	andmi	r0, r4, r1, asr #28
    1b18:	0e410187 	dvfeqd	f0, f1, f7
    1b1c:	070d4110 	smladeq	sp, r0, r1, r4
    1b20:	41040e5a 	tstmi	r4, sl, asr lr
    1b24:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1b28:	00000e40 	andeq	r0, r0, r0, asr #28
    1b2c:	00000024 	andeq	r0, r0, r4, lsr #32
    1b30:	00001824 	andeq	r1, r0, r4, lsr #16
    1b34:	08006038 	stmdaeq	r0, {r3, r4, r5, sp, lr}
    1b38:	00000036 	andeq	r0, r0, r6, lsr r0
    1b3c:	40040e41 	andmi	r0, r4, r1, asr #28
    1b40:	0e410187 	dvfeqd	f0, f1, f7
    1b44:	070d4118 	smladeq	sp, r8, r1, r4
    1b48:	41040e55 	tstmi	r4, r5, asr lr
    1b4c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1b50:	00000e40 	andeq	r0, r0, r0, asr #28
    1b54:	00000024 	andeq	r0, r0, r4, lsr #32
    1b58:	00001824 	andeq	r1, r0, r4, lsr #16
    1b5c:	00000000 	andeq	r0, r0, r0
    1b60:	00000020 	andeq	r0, r0, r0, lsr #32
    1b64:	40040e41 	andmi	r0, r4, r1, asr #28
    1b68:	0e410187 	dvfeqd	f0, f1, f7
    1b6c:	070d4110 	smladeq	sp, r0, r1, r4
    1b70:	41040e4a 	tstmi	r4, sl, asr #28
    1b74:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1b78:	00000e40 	andeq	r0, r0, r0, asr #28
    1b7c:	00000024 	andeq	r0, r0, r4, lsr #32
    1b80:	00001824 	andeq	r1, r0, r4, lsr #16
    1b84:	00000000 	andeq	r0, r0, r0
    1b88:	00000074 	andeq	r0, r0, r4, ror r0
    1b8c:	40040e41 	andmi	r0, r4, r1, asr #28
    1b90:	0e410187 	dvfeqd	f0, f1, f7
    1b94:	070d4118 	smladeq	sp, r8, r1, r4
    1b98:	41040e74 	tstmi	r4, r4, ror lr
    1b9c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1ba0:	00000e40 	andeq	r0, r0, r0, asr #28
    1ba4:	00000024 	andeq	r0, r0, r4, lsr #32
    1ba8:	00001824 	andeq	r1, r0, r4, lsr #16
    1bac:	00000000 	andeq	r0, r0, r0
    1bb0:	00000032 	andeq	r0, r0, r2, lsr r0
    1bb4:	40040e41 	andmi	r0, r4, r1, asr #28
    1bb8:	0e410187 	dvfeqd	f0, f1, f7
    1bbc:	070d4118 	smladeq	sp, r8, r1, r4
    1bc0:	41040e53 	tstmi	r4, r3, asr lr
    1bc4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1bc8:	00000e40 	andeq	r0, r0, r0, asr #28
    1bcc:	0000000c 	andeq	r0, r0, ip
    1bd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1bd4:	7c020001 	stcvc	0, cr0, [r2], {1}
    1bd8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1bdc:	00000024 	andeq	r0, r0, r4, lsr #32
    1be0:	00001bcc 	andeq	r1, r0, ip, asr #23
    1be4:	00000000 	andeq	r0, r0, r0
    1be8:	0000022c 	andeq	r0, r0, ip, lsr #4
    1bec:	40080e41 	andmi	r0, r8, r1, asr #28
    1bf0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1bf4:	100e4101 	andne	r4, lr, r1, lsl #2
    1bf8:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    1bfc:	41080ef1 	strdmi	r0, [r8, -r1]
    1c00:	00000d0d 	andeq	r0, r0, sp, lsl #26
    1c04:	00000024 	andeq	r0, r0, r4, lsr #32
    1c08:	00001bcc 	andeq	r1, r0, ip, asr #23
    1c0c:	08006070 	stmdaeq	r0, {r4, r5, r6, sp, lr}
    1c10:	000000f8 	strdeq	r0, [r0], -r8
    1c14:	40040e41 	andmi	r0, r4, r1, asr #28
    1c18:	0e410187 	dvfeqd	f0, f1, f7
    1c1c:	070d4118 	smladeq	sp, r8, r1, r4
    1c20:	040e6202 	streq	r6, [lr], #-514	; 0xfffffdfe
    1c24:	410d0d41 	tstmi	sp, r1, asr #26
    1c28:	000e40c7 	andeq	r4, lr, r7, asr #1
    1c2c:	00000024 	andeq	r0, r0, r4, lsr #32
    1c30:	00001bcc 	andeq	r1, r0, ip, asr #23
    1c34:	00000000 	andeq	r0, r0, r0
    1c38:	00000118 	andeq	r0, r0, r8, lsl r1
    1c3c:	40040e41 	andmi	r0, r4, r1, asr #28
    1c40:	0e410187 	dvfeqd	f0, f1, f7
    1c44:	070d4118 	smladeq	sp, r8, r1, r4
    1c48:	040e7b02 	streq	r7, [lr], #-2818	; 0xfffff4fe
    1c4c:	410d0d41 	tstmi	sp, r1, asr #26
    1c50:	000e40c7 	andeq	r4, lr, r7, asr #1
    1c54:	00000024 	andeq	r0, r0, r4, lsr #32
    1c58:	00001bcc 	andeq	r1, r0, ip, asr #23
    1c5c:	00000000 	andeq	r0, r0, r0
    1c60:	00000110 	andeq	r0, r0, r0, lsl r1
    1c64:	40040e41 	andmi	r0, r4, r1, asr #28
    1c68:	0e410187 	dvfeqd	f0, f1, f7
    1c6c:	070d4118 	smladeq	sp, r8, r1, r4
    1c70:	040e7d02 	streq	r7, [lr], #-3330	; 0xfffff2fe
    1c74:	410d0d41 	tstmi	sp, r1, asr #26
    1c78:	000e40c7 	andeq	r4, lr, r7, asr #1
    1c7c:	00000024 	andeq	r0, r0, r4, lsr #32
    1c80:	00001bcc 	andeq	r1, r0, ip, asr #23
    1c84:	00000000 	andeq	r0, r0, r0
    1c88:	0000010c 	andeq	r0, r0, ip, lsl #2
    1c8c:	40040e41 	andmi	r0, r4, r1, asr #28
    1c90:	0e410187 	dvfeqd	f0, f1, f7
    1c94:	070d4118 	smladeq	sp, r8, r1, r4
    1c98:	040e7b02 	streq	r7, [lr], #-2818	; 0xfffff4fe
    1c9c:	410d0d41 	tstmi	sp, r1, asr #26
    1ca0:	000e40c7 	andeq	r4, lr, r7, asr #1
    1ca4:	00000024 	andeq	r0, r0, r4, lsr #32
    1ca8:	00001bcc 	andeq	r1, r0, ip, asr #23
    1cac:	00000000 	andeq	r0, r0, r0
    1cb0:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1cb4:	40040e41 	andmi	r0, r4, r1, asr #28
    1cb8:	0e410187 	dvfeqd	f0, f1, f7
    1cbc:	070d4118 	smladeq	sp, r8, r1, r4
    1cc0:	040e5d02 	streq	r5, [lr], #-3330	; 0xfffff2fe
    1cc4:	410d0d41 	tstmi	sp, r1, asr #26
    1cc8:	000e40c7 	andeq	r4, lr, r7, asr #1
    1ccc:	00000024 	andeq	r0, r0, r4, lsr #32
    1cd0:	00001bcc 	andeq	r1, r0, ip, asr #23
    1cd4:	00000000 	andeq	r0, r0, r0
    1cd8:	000000a8 	andeq	r0, r0, r8, lsr #1
    1cdc:	40080e41 	andmi	r0, r8, r1, asr #28
    1ce0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1ce4:	100e4101 	andne	r4, lr, r1, lsl #2
    1ce8:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    1cec:	41080e4f 	tstmi	r8, pc, asr #28
    1cf0:	00000d0d 	andeq	r0, r0, sp, lsl #26
    1cf4:	00000024 	andeq	r0, r0, r4, lsr #32
    1cf8:	00001bcc 	andeq	r1, r0, ip, asr #23
    1cfc:	00000000 	andeq	r0, r0, r0
    1d00:	000000b8 	strheq	r0, [r0], -r8
    1d04:	40080e41 	andmi	r0, r8, r1, asr #28
    1d08:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1d0c:	180e4101 	stmdane	lr, {r0, r8, lr}
    1d10:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    1d14:	41080e57 	tstmi	r8, r7, asr lr
    1d18:	00000d0d 	andeq	r0, r0, sp, lsl #26
    1d1c:	00000024 	andeq	r0, r0, r4, lsr #32
    1d20:	00001bcc 	andeq	r1, r0, ip, asr #23
    1d24:	00000000 	andeq	r0, r0, r0
    1d28:	0000004e 	andeq	r0, r0, lr, asr #32
    1d2c:	40040e41 	andmi	r0, r4, r1, asr #28
    1d30:	0e410187 	dvfeqd	f0, f1, f7
    1d34:	070d4110 	smladeq	sp, r0, r1, r4
    1d38:	41040e61 	tstmi	r4, r1, ror #28
    1d3c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1d40:	00000e40 	andeq	r0, r0, r0, asr #28
    1d44:	00000024 	andeq	r0, r0, r4, lsr #32
    1d48:	00001bcc 	andeq	r1, r0, ip, asr #23
    1d4c:	00000000 	andeq	r0, r0, r0
    1d50:	00000032 	andeq	r0, r0, r2, lsr r0
    1d54:	40040e41 	andmi	r0, r4, r1, asr #28
    1d58:	0e410187 	dvfeqd	f0, f1, f7
    1d5c:	070d4110 	smladeq	sp, r0, r1, r4
    1d60:	41040e53 	tstmi	r4, r3, asr lr
    1d64:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1d68:	00000e40 	andeq	r0, r0, r0, asr #28
    1d6c:	00000024 	andeq	r0, r0, r4, lsr #32
    1d70:	00001bcc 	andeq	r1, r0, ip, asr #23
    1d74:	00000000 	andeq	r0, r0, r0
    1d78:	00000042 	andeq	r0, r0, r2, asr #32
    1d7c:	40040e41 	andmi	r0, r4, r1, asr #28
    1d80:	0e410187 	dvfeqd	f0, f1, f7
    1d84:	070d4110 	smladeq	sp, r0, r1, r4
    1d88:	41040e5b 	tstmi	r4, fp, asr lr
    1d8c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1d90:	00000e40 	andeq	r0, r0, r0, asr #28
    1d94:	00000024 	andeq	r0, r0, r4, lsr #32
    1d98:	00001bcc 	andeq	r1, r0, ip, asr #23
    1d9c:	00000000 	andeq	r0, r0, r0
    1da0:	00000030 	andeq	r0, r0, r0, lsr r0
    1da4:	40040e41 	andmi	r0, r4, r1, asr #28
    1da8:	0e410187 	dvfeqd	f0, f1, f7
    1dac:	070d4110 	smladeq	sp, r0, r1, r4
    1db0:	41040e52 	tstmi	r4, r2, asr lr
    1db4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1db8:	00000e40 	andeq	r0, r0, r0, asr #28
    1dbc:	00000024 	andeq	r0, r0, r4, lsr #32
    1dc0:	00001bcc 	andeq	r1, r0, ip, asr #23
    1dc4:	00000000 	andeq	r0, r0, r0
    1dc8:	0000003c 	andeq	r0, r0, ip, lsr r0
    1dcc:	40040e41 	andmi	r0, r4, r1, asr #28
    1dd0:	0e410187 	dvfeqd	f0, f1, f7
    1dd4:	070d4110 	smladeq	sp, r0, r1, r4
    1dd8:	41040e58 	tstmi	r4, r8, asr lr
    1ddc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1de0:	00000e40 	andeq	r0, r0, r0, asr #28
    1de4:	00000024 	andeq	r0, r0, r4, lsr #32
    1de8:	00001bcc 	andeq	r1, r0, ip, asr #23
    1dec:	08006168 	stmdaeq	r0, {r3, r5, r6, r8, sp, lr}
    1df0:	0000003e 	andeq	r0, r0, lr, lsr r0
    1df4:	40040e41 	andmi	r0, r4, r1, asr #28
    1df8:	0e410187 	dvfeqd	f0, f1, f7
    1dfc:	070d4110 	smladeq	sp, r0, r1, r4
    1e00:	41040e59 	tstmi	r4, r9, asr lr
    1e04:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1e08:	00000e40 	andeq	r0, r0, r0, asr #28
    1e0c:	00000024 	andeq	r0, r0, r4, lsr #32
    1e10:	00001bcc 	andeq	r1, r0, ip, asr #23
    1e14:	00000000 	andeq	r0, r0, r0
    1e18:	0000004a 	andeq	r0, r0, sl, asr #32
    1e1c:	40040e41 	andmi	r0, r4, r1, asr #28
    1e20:	0e410187 	dvfeqd	f0, f1, f7
    1e24:	070d4110 	smladeq	sp, r0, r1, r4
    1e28:	41040e5f 	tstmi	r4, pc, asr lr
    1e2c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1e30:	00000e40 	andeq	r0, r0, r0, asr #28
    1e34:	00000024 	andeq	r0, r0, r4, lsr #32
    1e38:	00001bcc 	andeq	r1, r0, ip, asr #23
    1e3c:	080061a8 	stmdaeq	r0, {r3, r5, r7, r8, sp, lr}
    1e40:	00000046 	andeq	r0, r0, r6, asr #32
    1e44:	40040e41 	andmi	r0, r4, r1, asr #28
    1e48:	0e410187 	dvfeqd	f0, f1, f7
    1e4c:	070d4110 	smladeq	sp, r0, r1, r4
    1e50:	41040e5d 	tstmi	r4, sp, asr lr
    1e54:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1e58:	00000e40 	andeq	r0, r0, r0, asr #28
    1e5c:	00000024 	andeq	r0, r0, r4, lsr #32
    1e60:	00001bcc 	andeq	r1, r0, ip, asr #23
    1e64:	00000000 	andeq	r0, r0, r0
    1e68:	0000001c 	andeq	r0, r0, ip, lsl r0
    1e6c:	40040e41 	andmi	r0, r4, r1, asr #28
    1e70:	0e410187 	dvfeqd	f0, f1, f7
    1e74:	070d4110 	smladeq	sp, r0, r1, r4
    1e78:	41040e48 	tstmi	r4, r8, asr #28
    1e7c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1e80:	00000e40 	andeq	r0, r0, r0, asr #28
    1e84:	00000024 	andeq	r0, r0, r4, lsr #32
    1e88:	00001bcc 	andeq	r1, r0, ip, asr #23
    1e8c:	00000000 	andeq	r0, r0, r0
    1e90:	00000028 	andeq	r0, r0, r8, lsr #32
    1e94:	40040e41 	andmi	r0, r4, r1, asr #28
    1e98:	0e410187 	dvfeqd	f0, f1, f7
    1e9c:	070d4110 	smladeq	sp, r0, r1, r4
    1ea0:	41040e4e 	tstmi	r4, lr, asr #28
    1ea4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1ea8:	00000e40 	andeq	r0, r0, r0, asr #28
    1eac:	00000024 	andeq	r0, r0, r4, lsr #32
    1eb0:	00001bcc 	andeq	r1, r0, ip, asr #23
    1eb4:	00000000 	andeq	r0, r0, r0
    1eb8:	00000046 	andeq	r0, r0, r6, asr #32
    1ebc:	40040e41 	andmi	r0, r4, r1, asr #28
    1ec0:	0e410187 	dvfeqd	f0, f1, f7
    1ec4:	070d4110 	smladeq	sp, r0, r1, r4
    1ec8:	41040e5d 	tstmi	r4, sp, asr lr
    1ecc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1ed0:	00000e40 	andeq	r0, r0, r0, asr #28
    1ed4:	00000024 	andeq	r0, r0, r4, lsr #32
    1ed8:	00001bcc 	andeq	r1, r0, ip, asr #23
    1edc:	00000000 	andeq	r0, r0, r0
    1ee0:	00000022 	andeq	r0, r0, r2, lsr #32
    1ee4:	40040e41 	andmi	r0, r4, r1, asr #28
    1ee8:	0e410187 	dvfeqd	f0, f1, f7
    1eec:	070d4110 	smladeq	sp, r0, r1, r4
    1ef0:	41040e4b 	tstmi	r4, fp, asr #28
    1ef4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1ef8:	00000e40 	andeq	r0, r0, r0, asr #28
    1efc:	00000024 	andeq	r0, r0, r4, lsr #32
    1f00:	00001bcc 	andeq	r1, r0, ip, asr #23
    1f04:	00000000 	andeq	r0, r0, r0
    1f08:	0000002e 	andeq	r0, r0, lr, lsr #32
    1f0c:	40080e41 	andmi	r0, r8, r1, asr #28
    1f10:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1f14:	100e4101 	andne	r4, lr, r1, lsl #2
    1f18:	52070d41 	andpl	r0, r7, #4160	; 0x1040
    1f1c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    1f20:	0000000d 	andeq	r0, r0, sp
    1f24:	00000024 	andeq	r0, r0, r4, lsr #32
    1f28:	00001bcc 	andeq	r1, r0, ip, asr #23
    1f2c:	00000000 	andeq	r0, r0, r0
    1f30:	0000005c 	andeq	r0, r0, ip, asr r0
    1f34:	40080e41 	andmi	r0, r8, r1, asr #28
    1f38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1f3c:	180e4101 	stmdane	lr, {r0, r8, lr}
    1f40:	69070d41 	stmdbvs	r7, {r0, r6, r8, sl, fp}
    1f44:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    1f48:	0000000d 	andeq	r0, r0, sp
    1f4c:	00000024 	andeq	r0, r0, r4, lsr #32
    1f50:	00001bcc 	andeq	r1, r0, ip, asr #23
    1f54:	00000000 	andeq	r0, r0, r0
    1f58:	0000005e 	andeq	r0, r0, lr, asr r0
    1f5c:	40080e41 	andmi	r0, r8, r1, asr #28
    1f60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1f64:	200e4101 	andcs	r4, lr, r1, lsl #2
    1f68:	6a070d41 	bvs	1c5474 <_Min_Stack_Size+0x1c5274>
    1f6c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    1f70:	0000000d 	andeq	r0, r0, sp
    1f74:	00000024 	andeq	r0, r0, r4, lsr #32
    1f78:	00001bcc 	andeq	r1, r0, ip, asr #23
    1f7c:	00000000 	andeq	r0, r0, r0
    1f80:	0000003e 	andeq	r0, r0, lr, lsr r0
    1f84:	40080e41 	andmi	r0, r8, r1, asr #28
    1f88:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1f8c:	180e4101 	stmdane	lr, {r0, r8, lr}
    1f90:	5a070d41 	bpl	1c549c <_Min_Stack_Size+0x1c529c>
    1f94:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    1f98:	0000000d 	andeq	r0, r0, sp
    1f9c:	00000024 	andeq	r0, r0, r4, lsr #32
    1fa0:	00001bcc 	andeq	r1, r0, ip, asr #23
    1fa4:	00000000 	andeq	r0, r0, r0
    1fa8:	00000052 	andeq	r0, r0, r2, asr r0
    1fac:	40040e41 	andmi	r0, r4, r1, asr #28
    1fb0:	0e410187 	dvfeqd	f0, f1, f7
    1fb4:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    1fb8:	41040e63 	tstmi	r4, r3, ror #28
    1fbc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1fc0:	00000e40 	andeq	r0, r0, r0, asr #28
    1fc4:	00000024 	andeq	r0, r0, r4, lsr #32
    1fc8:	00001bcc 	andeq	r1, r0, ip, asr #23
    1fcc:	00000000 	andeq	r0, r0, r0
    1fd0:	00000026 	andeq	r0, r0, r6, lsr #32
    1fd4:	40040e41 	andmi	r0, r4, r1, asr #28
    1fd8:	0e410187 	dvfeqd	f0, f1, f7
    1fdc:	070d4110 	smladeq	sp, r0, r1, r4
    1fe0:	41040e4d 	tstmi	r4, sp, asr #28
    1fe4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    1fe8:	00000e40 	andeq	r0, r0, r0, asr #28
    1fec:	00000024 	andeq	r0, r0, r4, lsr #32
    1ff0:	00001bcc 	andeq	r1, r0, ip, asr #23
    1ff4:	00000000 	andeq	r0, r0, r0
    1ff8:	00000036 	andeq	r0, r0, r6, lsr r0
    1ffc:	40040e41 	andmi	r0, r4, r1, asr #28
    2000:	0e410187 	dvfeqd	f0, f1, f7
    2004:	070d4118 	smladeq	sp, r8, r1, r4
    2008:	41040e55 	tstmi	r4, r5, asr lr
    200c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2010:	00000e40 	andeq	r0, r0, r0, asr #28
    2014:	00000024 	andeq	r0, r0, r4, lsr #32
    2018:	00001bcc 	andeq	r1, r0, ip, asr #23
    201c:	00000000 	andeq	r0, r0, r0
    2020:	00000036 	andeq	r0, r0, r6, lsr r0
    2024:	40040e41 	andmi	r0, r4, r1, asr #28
    2028:	0e410187 	dvfeqd	f0, f1, f7
    202c:	070d4118 	smladeq	sp, r8, r1, r4
    2030:	41040e55 	tstmi	r4, r5, asr lr
    2034:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2038:	00000e40 	andeq	r0, r0, r0, asr #28
    203c:	00000024 	andeq	r0, r0, r4, lsr #32
    2040:	00001bcc 	andeq	r1, r0, ip, asr #23
    2044:	00000000 	andeq	r0, r0, r0
    2048:	00000096 	muleq	r0, r6, r0
    204c:	40040e41 	andmi	r0, r4, r1, asr #28
    2050:	0e410187 	dvfeqd	f0, f1, f7
    2054:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    2058:	040e4502 	streq	r4, [lr], #-1282	; 0xfffffafe
    205c:	410d0d41 	tstmi	sp, r1, asr #26
    2060:	000e40c7 	andeq	r4, lr, r7, asr #1
    2064:	00000024 	andeq	r0, r0, r4, lsr #32
    2068:	00001bcc 	andeq	r1, r0, ip, asr #23
    206c:	00000000 	andeq	r0, r0, r0
    2070:	00000036 	andeq	r0, r0, r6, lsr r0
    2074:	40040e41 	andmi	r0, r4, r1, asr #28
    2078:	0e410187 	dvfeqd	f0, f1, f7
    207c:	070d4118 	smladeq	sp, r8, r1, r4
    2080:	41040e55 	tstmi	r4, r5, asr lr
    2084:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2088:	00000e40 	andeq	r0, r0, r0, asr #28
    208c:	00000024 	andeq	r0, r0, r4, lsr #32
    2090:	00001bcc 	andeq	r1, r0, ip, asr #23
    2094:	00000000 	andeq	r0, r0, r0
    2098:	0000003a 	andeq	r0, r0, sl, lsr r0
    209c:	40040e41 	andmi	r0, r4, r1, asr #28
    20a0:	0e410187 	dvfeqd	f0, f1, f7
    20a4:	070d4118 	smladeq	sp, r8, r1, r4
    20a8:	41040e57 	tstmi	r4, r7, asr lr
    20ac:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    20b0:	00000e40 	andeq	r0, r0, r0, asr #28
    20b4:	00000024 	andeq	r0, r0, r4, lsr #32
    20b8:	00001bcc 	andeq	r1, r0, ip, asr #23
    20bc:	00000000 	andeq	r0, r0, r0
    20c0:	00000036 	andeq	r0, r0, r6, lsr r0
    20c4:	40040e41 	andmi	r0, r4, r1, asr #28
    20c8:	0e410187 	dvfeqd	f0, f1, f7
    20cc:	070d4118 	smladeq	sp, r8, r1, r4
    20d0:	41040e55 	tstmi	r4, r5, asr lr
    20d4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    20d8:	00000e40 	andeq	r0, r0, r0, asr #28
    20dc:	00000024 	andeq	r0, r0, r4, lsr #32
    20e0:	00001bcc 	andeq	r1, r0, ip, asr #23
    20e4:	00000000 	andeq	r0, r0, r0
    20e8:	0000003a 	andeq	r0, r0, sl, lsr r0
    20ec:	40040e41 	andmi	r0, r4, r1, asr #28
    20f0:	0e410187 	dvfeqd	f0, f1, f7
    20f4:	070d4118 	smladeq	sp, r8, r1, r4
    20f8:	41040e57 	tstmi	r4, r7, asr lr
    20fc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2100:	00000e40 	andeq	r0, r0, r0, asr #28
    2104:	00000024 	andeq	r0, r0, r4, lsr #32
    2108:	00001bcc 	andeq	r1, r0, ip, asr #23
    210c:	00000000 	andeq	r0, r0, r0
    2110:	0000003e 	andeq	r0, r0, lr, lsr r0
    2114:	40040e41 	andmi	r0, r4, r1, asr #28
    2118:	0e410187 	dvfeqd	f0, f1, f7
    211c:	070d4110 	smladeq	sp, r0, r1, r4
    2120:	41040e59 	tstmi	r4, r9, asr lr
    2124:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2128:	00000e40 	andeq	r0, r0, r0, asr #28
    212c:	00000024 	andeq	r0, r0, r4, lsr #32
    2130:	00001bcc 	andeq	r1, r0, ip, asr #23
    2134:	00000000 	andeq	r0, r0, r0
    2138:	0000003e 	andeq	r0, r0, lr, lsr r0
    213c:	40040e41 	andmi	r0, r4, r1, asr #28
    2140:	0e410187 	dvfeqd	f0, f1, f7
    2144:	070d4110 	smladeq	sp, r0, r1, r4
    2148:	41040e59 	tstmi	r4, r9, asr lr
    214c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2150:	00000e40 	andeq	r0, r0, r0, asr #28
    2154:	00000024 	andeq	r0, r0, r4, lsr #32
    2158:	00001bcc 	andeq	r1, r0, ip, asr #23
    215c:	00000000 	andeq	r0, r0, r0
    2160:	0000003e 	andeq	r0, r0, lr, lsr r0
    2164:	40040e41 	andmi	r0, r4, r1, asr #28
    2168:	0e410187 	dvfeqd	f0, f1, f7
    216c:	070d4110 	smladeq	sp, r0, r1, r4
    2170:	41040e59 	tstmi	r4, r9, asr lr
    2174:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2178:	00000e40 	andeq	r0, r0, r0, asr #28
    217c:	00000024 	andeq	r0, r0, r4, lsr #32
    2180:	00001bcc 	andeq	r1, r0, ip, asr #23
    2184:	00000000 	andeq	r0, r0, r0
    2188:	0000003e 	andeq	r0, r0, lr, lsr r0
    218c:	40040e41 	andmi	r0, r4, r1, asr #28
    2190:	0e410187 	dvfeqd	f0, f1, f7
    2194:	070d4110 	smladeq	sp, r0, r1, r4
    2198:	41040e59 	tstmi	r4, r9, asr lr
    219c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    21a0:	00000e40 	andeq	r0, r0, r0, asr #28
    21a4:	00000024 	andeq	r0, r0, r4, lsr #32
    21a8:	00001bcc 	andeq	r1, r0, ip, asr #23
    21ac:	00000000 	andeq	r0, r0, r0
    21b0:	00000036 	andeq	r0, r0, r6, lsr r0
    21b4:	40040e41 	andmi	r0, r4, r1, asr #28
    21b8:	0e410187 	dvfeqd	f0, f1, f7
    21bc:	070d4118 	smladeq	sp, r8, r1, r4
    21c0:	41040e55 	tstmi	r4, r5, asr lr
    21c4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    21c8:	00000e40 	andeq	r0, r0, r0, asr #28
    21cc:	00000024 	andeq	r0, r0, r4, lsr #32
    21d0:	00001bcc 	andeq	r1, r0, ip, asr #23
    21d4:	00000000 	andeq	r0, r0, r0
    21d8:	0000003a 	andeq	r0, r0, sl, lsr r0
    21dc:	40040e41 	andmi	r0, r4, r1, asr #28
    21e0:	0e410187 	dvfeqd	f0, f1, f7
    21e4:	070d4118 	smladeq	sp, r8, r1, r4
    21e8:	41040e57 	tstmi	r4, r7, asr lr
    21ec:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    21f0:	00000e40 	andeq	r0, r0, r0, asr #28
    21f4:	00000024 	andeq	r0, r0, r4, lsr #32
    21f8:	00001bcc 	andeq	r1, r0, ip, asr #23
    21fc:	00000000 	andeq	r0, r0, r0
    2200:	00000036 	andeq	r0, r0, r6, lsr r0
    2204:	40040e41 	andmi	r0, r4, r1, asr #28
    2208:	0e410187 	dvfeqd	f0, f1, f7
    220c:	070d4118 	smladeq	sp, r8, r1, r4
    2210:	41040e55 	tstmi	r4, r5, asr lr
    2214:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2218:	00000e40 	andeq	r0, r0, r0, asr #28
    221c:	00000024 	andeq	r0, r0, r4, lsr #32
    2220:	00001bcc 	andeq	r1, r0, ip, asr #23
    2224:	00000000 	andeq	r0, r0, r0
    2228:	0000003a 	andeq	r0, r0, sl, lsr r0
    222c:	40040e41 	andmi	r0, r4, r1, asr #28
    2230:	0e410187 	dvfeqd	f0, f1, f7
    2234:	070d4118 	smladeq	sp, r8, r1, r4
    2238:	41040e57 	tstmi	r4, r7, asr lr
    223c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2240:	00000e40 	andeq	r0, r0, r0, asr #28
    2244:	00000024 	andeq	r0, r0, r4, lsr #32
    2248:	00001bcc 	andeq	r1, r0, ip, asr #23
    224c:	00000000 	andeq	r0, r0, r0
    2250:	00000036 	andeq	r0, r0, r6, lsr r0
    2254:	40040e41 	andmi	r0, r4, r1, asr #28
    2258:	0e410187 	dvfeqd	f0, f1, f7
    225c:	070d4118 	smladeq	sp, r8, r1, r4
    2260:	41040e55 	tstmi	r4, r5, asr lr
    2264:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2268:	00000e40 	andeq	r0, r0, r0, asr #28
    226c:	00000024 	andeq	r0, r0, r4, lsr #32
    2270:	00001bcc 	andeq	r1, r0, ip, asr #23
    2274:	00000000 	andeq	r0, r0, r0
    2278:	0000003a 	andeq	r0, r0, sl, lsr r0
    227c:	40040e41 	andmi	r0, r4, r1, asr #28
    2280:	0e410187 	dvfeqd	f0, f1, f7
    2284:	070d4118 	smladeq	sp, r8, r1, r4
    2288:	41040e57 	tstmi	r4, r7, asr lr
    228c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2290:	00000e40 	andeq	r0, r0, r0, asr #28
    2294:	00000024 	andeq	r0, r0, r4, lsr #32
    2298:	00001bcc 	andeq	r1, r0, ip, asr #23
    229c:	00000000 	andeq	r0, r0, r0
    22a0:	00000036 	andeq	r0, r0, r6, lsr r0
    22a4:	40040e41 	andmi	r0, r4, r1, asr #28
    22a8:	0e410187 	dvfeqd	f0, f1, f7
    22ac:	070d4118 	smladeq	sp, r8, r1, r4
    22b0:	41040e55 	tstmi	r4, r5, asr lr
    22b4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    22b8:	00000e40 	andeq	r0, r0, r0, asr #28
    22bc:	00000024 	andeq	r0, r0, r4, lsr #32
    22c0:	00001bcc 	andeq	r1, r0, ip, asr #23
    22c4:	00000000 	andeq	r0, r0, r0
    22c8:	0000003a 	andeq	r0, r0, sl, lsr r0
    22cc:	40040e41 	andmi	r0, r4, r1, asr #28
    22d0:	0e410187 	dvfeqd	f0, f1, f7
    22d4:	070d4118 	smladeq	sp, r8, r1, r4
    22d8:	41040e57 	tstmi	r4, r7, asr lr
    22dc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    22e0:	00000e40 	andeq	r0, r0, r0, asr #28
    22e4:	00000024 	andeq	r0, r0, r4, lsr #32
    22e8:	00001bcc 	andeq	r1, r0, ip, asr #23
    22ec:	00000000 	andeq	r0, r0, r0
    22f0:	00000036 	andeq	r0, r0, r6, lsr r0
    22f4:	40040e41 	andmi	r0, r4, r1, asr #28
    22f8:	0e410187 	dvfeqd	f0, f1, f7
    22fc:	070d4118 	smladeq	sp, r8, r1, r4
    2300:	41040e55 	tstmi	r4, r5, asr lr
    2304:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2308:	00000e40 	andeq	r0, r0, r0, asr #28
    230c:	00000024 	andeq	r0, r0, r4, lsr #32
    2310:	00001bcc 	andeq	r1, r0, ip, asr #23
    2314:	00000000 	andeq	r0, r0, r0
    2318:	0000003a 	andeq	r0, r0, sl, lsr r0
    231c:	40040e41 	andmi	r0, r4, r1, asr #28
    2320:	0e410187 	dvfeqd	f0, f1, f7
    2324:	070d4118 	smladeq	sp, r8, r1, r4
    2328:	41040e57 	tstmi	r4, r7, asr lr
    232c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2330:	00000e40 	andeq	r0, r0, r0, asr #28
    2334:	00000024 	andeq	r0, r0, r4, lsr #32
    2338:	00001bcc 	andeq	r1, r0, ip, asr #23
    233c:	00000000 	andeq	r0, r0, r0
    2340:	00000036 	andeq	r0, r0, r6, lsr r0
    2344:	40040e41 	andmi	r0, r4, r1, asr #28
    2348:	0e410187 	dvfeqd	f0, f1, f7
    234c:	070d4118 	smladeq	sp, r8, r1, r4
    2350:	41040e55 	tstmi	r4, r5, asr lr
    2354:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2358:	00000e40 	andeq	r0, r0, r0, asr #28
    235c:	00000024 	andeq	r0, r0, r4, lsr #32
    2360:	00001bcc 	andeq	r1, r0, ip, asr #23
    2364:	00000000 	andeq	r0, r0, r0
    2368:	0000003a 	andeq	r0, r0, sl, lsr r0
    236c:	40040e41 	andmi	r0, r4, r1, asr #28
    2370:	0e410187 	dvfeqd	f0, f1, f7
    2374:	070d4118 	smladeq	sp, r8, r1, r4
    2378:	41040e57 	tstmi	r4, r7, asr lr
    237c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2380:	00000e40 	andeq	r0, r0, r0, asr #28
    2384:	00000024 	andeq	r0, r0, r4, lsr #32
    2388:	00001bcc 	andeq	r1, r0, ip, asr #23
    238c:	00000000 	andeq	r0, r0, r0
    2390:	00000036 	andeq	r0, r0, r6, lsr r0
    2394:	40040e41 	andmi	r0, r4, r1, asr #28
    2398:	0e410187 	dvfeqd	f0, f1, f7
    239c:	070d4118 	smladeq	sp, r8, r1, r4
    23a0:	41040e55 	tstmi	r4, r5, asr lr
    23a4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    23a8:	00000e40 	andeq	r0, r0, r0, asr #28
    23ac:	00000024 	andeq	r0, r0, r4, lsr #32
    23b0:	00001bcc 	andeq	r1, r0, ip, asr #23
    23b4:	00000000 	andeq	r0, r0, r0
    23b8:	00000036 	andeq	r0, r0, r6, lsr r0
    23bc:	40040e41 	andmi	r0, r4, r1, asr #28
    23c0:	0e410187 	dvfeqd	f0, f1, f7
    23c4:	070d4118 	smladeq	sp, r8, r1, r4
    23c8:	41040e55 	tstmi	r4, r5, asr lr
    23cc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    23d0:	00000e40 	andeq	r0, r0, r0, asr #28
    23d4:	00000024 	andeq	r0, r0, r4, lsr #32
    23d8:	00001bcc 	andeq	r1, r0, ip, asr #23
    23dc:	00000000 	andeq	r0, r0, r0
    23e0:	0000003a 	andeq	r0, r0, sl, lsr r0
    23e4:	40040e41 	andmi	r0, r4, r1, asr #28
    23e8:	0e410187 	dvfeqd	f0, f1, f7
    23ec:	070d4118 	smladeq	sp, r8, r1, r4
    23f0:	41040e57 	tstmi	r4, r7, asr lr
    23f4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    23f8:	00000e40 	andeq	r0, r0, r0, asr #28
    23fc:	00000024 	andeq	r0, r0, r4, lsr #32
    2400:	00001bcc 	andeq	r1, r0, ip, asr #23
    2404:	00000000 	andeq	r0, r0, r0
    2408:	0000003a 	andeq	r0, r0, sl, lsr r0
    240c:	40040e41 	andmi	r0, r4, r1, asr #28
    2410:	0e410187 	dvfeqd	f0, f1, f7
    2414:	070d4118 	smladeq	sp, r8, r1, r4
    2418:	41040e57 	tstmi	r4, r7, asr lr
    241c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2420:	00000e40 	andeq	r0, r0, r0, asr #28
    2424:	00000024 	andeq	r0, r0, r4, lsr #32
    2428:	00001bcc 	andeq	r1, r0, ip, asr #23
    242c:	00000000 	andeq	r0, r0, r0
    2430:	0000003a 	andeq	r0, r0, sl, lsr r0
    2434:	40040e41 	andmi	r0, r4, r1, asr #28
    2438:	0e410187 	dvfeqd	f0, f1, f7
    243c:	070d4118 	smladeq	sp, r8, r1, r4
    2440:	41040e57 	tstmi	r4, r7, asr lr
    2444:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2448:	00000e40 	andeq	r0, r0, r0, asr #28
    244c:	00000024 	andeq	r0, r0, r4, lsr #32
    2450:	00001bcc 	andeq	r1, r0, ip, asr #23
    2454:	00000000 	andeq	r0, r0, r0
    2458:	0000003a 	andeq	r0, r0, sl, lsr r0
    245c:	40040e41 	andmi	r0, r4, r1, asr #28
    2460:	0e410187 	dvfeqd	f0, f1, f7
    2464:	070d4118 	smladeq	sp, r8, r1, r4
    2468:	41040e57 	tstmi	r4, r7, asr lr
    246c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2470:	00000e40 	andeq	r0, r0, r0, asr #28
    2474:	00000024 	andeq	r0, r0, r4, lsr #32
    2478:	00001bcc 	andeq	r1, r0, ip, asr #23
    247c:	00000000 	andeq	r0, r0, r0
    2480:	0000003a 	andeq	r0, r0, sl, lsr r0
    2484:	40040e41 	andmi	r0, r4, r1, asr #28
    2488:	0e410187 	dvfeqd	f0, f1, f7
    248c:	070d4118 	smladeq	sp, r8, r1, r4
    2490:	41040e57 	tstmi	r4, r7, asr lr
    2494:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2498:	00000e40 	andeq	r0, r0, r0, asr #28
    249c:	00000024 	andeq	r0, r0, r4, lsr #32
    24a0:	00001bcc 	andeq	r1, r0, ip, asr #23
    24a4:	00000000 	andeq	r0, r0, r0
    24a8:	00000054 	andeq	r0, r0, r4, asr r0
    24ac:	40040e41 	andmi	r0, r4, r1, asr #28
    24b0:	0e410187 	dvfeqd	f0, f1, f7
    24b4:	070d4118 	smladeq	sp, r8, r1, r4
    24b8:	41040e64 	tstmi	r4, r4, ror #28
    24bc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    24c0:	00000e40 	andeq	r0, r0, r0, asr #28
    24c4:	00000024 	andeq	r0, r0, r4, lsr #32
    24c8:	00001bcc 	andeq	r1, r0, ip, asr #23
    24cc:	00000000 	andeq	r0, r0, r0
    24d0:	00000054 	andeq	r0, r0, r4, asr r0
    24d4:	40040e41 	andmi	r0, r4, r1, asr #28
    24d8:	0e410187 	dvfeqd	f0, f1, f7
    24dc:	070d4118 	smladeq	sp, r8, r1, r4
    24e0:	41040e64 	tstmi	r4, r4, ror #28
    24e4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    24e8:	00000e40 	andeq	r0, r0, r0, asr #28
    24ec:	00000024 	andeq	r0, r0, r4, lsr #32
    24f0:	00001bcc 	andeq	r1, r0, ip, asr #23
    24f4:	00000000 	andeq	r0, r0, r0
    24f8:	000000ac 	andeq	r0, r0, ip, lsr #1
    24fc:	40040e41 	andmi	r0, r4, r1, asr #28
    2500:	0e410187 	dvfeqd	f0, f1, f7
    2504:	070d4118 	smladeq	sp, r8, r1, r4
    2508:	040e5002 	streq	r5, [lr], #-2
    250c:	410d0d41 	tstmi	sp, r1, asr #26
    2510:	000e40c7 	andeq	r4, lr, r7, asr #1
    2514:	00000024 	andeq	r0, r0, r4, lsr #32
    2518:	00001bcc 	andeq	r1, r0, ip, asr #23
    251c:	00000000 	andeq	r0, r0, r0
    2520:	0000003e 	andeq	r0, r0, lr, lsr r0
    2524:	40040e41 	andmi	r0, r4, r1, asr #28
    2528:	0e410187 	dvfeqd	f0, f1, f7
    252c:	070d4110 	smladeq	sp, r0, r1, r4
    2530:	41040e59 	tstmi	r4, r9, asr lr
    2534:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2538:	00000e40 	andeq	r0, r0, r0, asr #28
    253c:	00000024 	andeq	r0, r0, r4, lsr #32
    2540:	00001bcc 	andeq	r1, r0, ip, asr #23
    2544:	00000000 	andeq	r0, r0, r0
    2548:	0000003e 	andeq	r0, r0, lr, lsr r0
    254c:	40040e41 	andmi	r0, r4, r1, asr #28
    2550:	0e410187 	dvfeqd	f0, f1, f7
    2554:	070d4110 	smladeq	sp, r0, r1, r4
    2558:	41040e59 	tstmi	r4, r9, asr lr
    255c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2560:	00000e40 	andeq	r0, r0, r0, asr #28
    2564:	00000024 	andeq	r0, r0, r4, lsr #32
    2568:	00001bcc 	andeq	r1, r0, ip, asr #23
    256c:	00000000 	andeq	r0, r0, r0
    2570:	0000003e 	andeq	r0, r0, lr, lsr r0
    2574:	40040e41 	andmi	r0, r4, r1, asr #28
    2578:	0e410187 	dvfeqd	f0, f1, f7
    257c:	070d4110 	smladeq	sp, r0, r1, r4
    2580:	41040e59 	tstmi	r4, r9, asr lr
    2584:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2588:	00000e40 	andeq	r0, r0, r0, asr #28
    258c:	00000024 	andeq	r0, r0, r4, lsr #32
    2590:	00001bcc 	andeq	r1, r0, ip, asr #23
    2594:	00000000 	andeq	r0, r0, r0
    2598:	00000036 	andeq	r0, r0, r6, lsr r0
    259c:	40040e41 	andmi	r0, r4, r1, asr #28
    25a0:	0e410187 	dvfeqd	f0, f1, f7
    25a4:	070d4110 	smladeq	sp, r0, r1, r4
    25a8:	41040e55 	tstmi	r4, r5, asr lr
    25ac:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    25b0:	00000e40 	andeq	r0, r0, r0, asr #28
    25b4:	00000024 	andeq	r0, r0, r4, lsr #32
    25b8:	00001bcc 	andeq	r1, r0, ip, asr #23
    25bc:	00000000 	andeq	r0, r0, r0
    25c0:	00000036 	andeq	r0, r0, r6, lsr r0
    25c4:	40040e41 	andmi	r0, r4, r1, asr #28
    25c8:	0e410187 	dvfeqd	f0, f1, f7
    25cc:	070d4110 	smladeq	sp, r0, r1, r4
    25d0:	41040e55 	tstmi	r4, r5, asr lr
    25d4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    25d8:	00000e40 	andeq	r0, r0, r0, asr #28
    25dc:	00000024 	andeq	r0, r0, r4, lsr #32
    25e0:	00001bcc 	andeq	r1, r0, ip, asr #23
    25e4:	00000000 	andeq	r0, r0, r0
    25e8:	00000036 	andeq	r0, r0, r6, lsr r0
    25ec:	40040e41 	andmi	r0, r4, r1, asr #28
    25f0:	0e410187 	dvfeqd	f0, f1, f7
    25f4:	070d4110 	smladeq	sp, r0, r1, r4
    25f8:	41040e55 	tstmi	r4, r5, asr lr
    25fc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2600:	00000e40 	andeq	r0, r0, r0, asr #28
    2604:	00000024 	andeq	r0, r0, r4, lsr #32
    2608:	00001bcc 	andeq	r1, r0, ip, asr #23
    260c:	00000000 	andeq	r0, r0, r0
    2610:	00000036 	andeq	r0, r0, r6, lsr r0
    2614:	40040e41 	andmi	r0, r4, r1, asr #28
    2618:	0e410187 	dvfeqd	f0, f1, f7
    261c:	070d4110 	smladeq	sp, r0, r1, r4
    2620:	41040e55 	tstmi	r4, r5, asr lr
    2624:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2628:	00000e40 	andeq	r0, r0, r0, asr #28
    262c:	00000024 	andeq	r0, r0, r4, lsr #32
    2630:	00001bcc 	andeq	r1, r0, ip, asr #23
    2634:	00000000 	andeq	r0, r0, r0
    2638:	0000001c 	andeq	r0, r0, ip, lsl r0
    263c:	40040e41 	andmi	r0, r4, r1, asr #28
    2640:	0e410187 	dvfeqd	f0, f1, f7
    2644:	070d4110 	smladeq	sp, r0, r1, r4
    2648:	41040e48 	tstmi	r4, r8, asr #28
    264c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2650:	00000e40 	andeq	r0, r0, r0, asr #28
    2654:	00000024 	andeq	r0, r0, r4, lsr #32
    2658:	00001bcc 	andeq	r1, r0, ip, asr #23
    265c:	00000000 	andeq	r0, r0, r0
    2660:	0000001c 	andeq	r0, r0, ip, lsl r0
    2664:	40040e41 	andmi	r0, r4, r1, asr #28
    2668:	0e410187 	dvfeqd	f0, f1, f7
    266c:	070d4110 	smladeq	sp, r0, r1, r4
    2670:	41040e48 	tstmi	r4, r8, asr #28
    2674:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2678:	00000e40 	andeq	r0, r0, r0, asr #28
    267c:	00000024 	andeq	r0, r0, r4, lsr #32
    2680:	00001bcc 	andeq	r1, r0, ip, asr #23
    2684:	00000000 	andeq	r0, r0, r0
    2688:	0000001c 	andeq	r0, r0, ip, lsl r0
    268c:	40040e41 	andmi	r0, r4, r1, asr #28
    2690:	0e410187 	dvfeqd	f0, f1, f7
    2694:	070d4110 	smladeq	sp, r0, r1, r4
    2698:	41040e48 	tstmi	r4, r8, asr #28
    269c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    26a0:	00000e40 	andeq	r0, r0, r0, asr #28
    26a4:	00000024 	andeq	r0, r0, r4, lsr #32
    26a8:	00001bcc 	andeq	r1, r0, ip, asr #23
    26ac:	00000000 	andeq	r0, r0, r0
    26b0:	0000001c 	andeq	r0, r0, ip, lsl r0
    26b4:	40040e41 	andmi	r0, r4, r1, asr #28
    26b8:	0e410187 	dvfeqd	f0, f1, f7
    26bc:	070d4110 	smladeq	sp, r0, r1, r4
    26c0:	41040e48 	tstmi	r4, r8, asr #28
    26c4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    26c8:	00000e40 	andeq	r0, r0, r0, asr #28
    26cc:	00000024 	andeq	r0, r0, r4, lsr #32
    26d0:	00001bcc 	andeq	r1, r0, ip, asr #23
    26d4:	00000000 	andeq	r0, r0, r0
    26d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    26dc:	40040e41 	andmi	r0, r4, r1, asr #28
    26e0:	0e410187 	dvfeqd	f0, f1, f7
    26e4:	070d4110 	smladeq	sp, r0, r1, r4
    26e8:	41040e48 	tstmi	r4, r8, asr #28
    26ec:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    26f0:	00000e40 	andeq	r0, r0, r0, asr #28
    26f4:	00000024 	andeq	r0, r0, r4, lsr #32
    26f8:	00001bcc 	andeq	r1, r0, ip, asr #23
    26fc:	00000000 	andeq	r0, r0, r0
    2700:	0000001e 	andeq	r0, r0, lr, lsl r0
    2704:	40040e41 	andmi	r0, r4, r1, asr #28
    2708:	0e410187 	dvfeqd	f0, f1, f7
    270c:	070d4110 	smladeq	sp, r0, r1, r4
    2710:	41040e49 	tstmi	r4, r9, asr #28
    2714:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2718:	00000e40 	andeq	r0, r0, r0, asr #28
    271c:	00000024 	andeq	r0, r0, r4, lsr #32
    2720:	00001bcc 	andeq	r1, r0, ip, asr #23
    2724:	00000000 	andeq	r0, r0, r0
    2728:	00000036 	andeq	r0, r0, r6, lsr r0
    272c:	40040e41 	andmi	r0, r4, r1, asr #28
    2730:	0e410187 	dvfeqd	f0, f1, f7
    2734:	070d4110 	smladeq	sp, r0, r1, r4
    2738:	41040e55 	tstmi	r4, r5, asr lr
    273c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2740:	00000e40 	andeq	r0, r0, r0, asr #28
    2744:	00000024 	andeq	r0, r0, r4, lsr #32
    2748:	00001bcc 	andeq	r1, r0, ip, asr #23
    274c:	00000000 	andeq	r0, r0, r0
    2750:	0000003a 	andeq	r0, r0, sl, lsr r0
    2754:	40040e41 	andmi	r0, r4, r1, asr #28
    2758:	0e410187 	dvfeqd	f0, f1, f7
    275c:	070d4110 	smladeq	sp, r0, r1, r4
    2760:	41040e57 	tstmi	r4, r7, asr lr
    2764:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2768:	00000e40 	andeq	r0, r0, r0, asr #28
    276c:	00000024 	andeq	r0, r0, r4, lsr #32
    2770:	00001bcc 	andeq	r1, r0, ip, asr #23
    2774:	00000000 	andeq	r0, r0, r0
    2778:	00000036 	andeq	r0, r0, r6, lsr r0
    277c:	40040e41 	andmi	r0, r4, r1, asr #28
    2780:	0e410187 	dvfeqd	f0, f1, f7
    2784:	070d4110 	smladeq	sp, r0, r1, r4
    2788:	41040e55 	tstmi	r4, r5, asr lr
    278c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2790:	00000e40 	andeq	r0, r0, r0, asr #28
    2794:	00000024 	andeq	r0, r0, r4, lsr #32
    2798:	00001bcc 	andeq	r1, r0, ip, asr #23
    279c:	00000000 	andeq	r0, r0, r0
    27a0:	0000003a 	andeq	r0, r0, sl, lsr r0
    27a4:	40040e41 	andmi	r0, r4, r1, asr #28
    27a8:	0e410187 	dvfeqd	f0, f1, f7
    27ac:	070d4110 	smladeq	sp, r0, r1, r4
    27b0:	41040e57 	tstmi	r4, r7, asr lr
    27b4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    27b8:	00000e40 	andeq	r0, r0, r0, asr #28
    27bc:	00000024 	andeq	r0, r0, r4, lsr #32
    27c0:	00001bcc 	andeq	r1, r0, ip, asr #23
    27c4:	00000000 	andeq	r0, r0, r0
    27c8:	00000036 	andeq	r0, r0, r6, lsr r0
    27cc:	40040e41 	andmi	r0, r4, r1, asr #28
    27d0:	0e410187 	dvfeqd	f0, f1, f7
    27d4:	070d4110 	smladeq	sp, r0, r1, r4
    27d8:	41040e55 	tstmi	r4, r5, asr lr
    27dc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    27e0:	00000e40 	andeq	r0, r0, r0, asr #28
    27e4:	00000024 	andeq	r0, r0, r4, lsr #32
    27e8:	00001bcc 	andeq	r1, r0, ip, asr #23
    27ec:	00000000 	andeq	r0, r0, r0
    27f0:	00000018 	andeq	r0, r0, r8, lsl r0
    27f4:	40040e41 	andmi	r0, r4, r1, asr #28
    27f8:	0e410187 	dvfeqd	f0, f1, f7
    27fc:	070d4110 	smladeq	sp, r0, r1, r4
    2800:	41040e46 	tstmi	r4, r6, asr #28
    2804:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2808:	00000e40 	andeq	r0, r0, r0, asr #28
    280c:	00000024 	andeq	r0, r0, r4, lsr #32
    2810:	00001bcc 	andeq	r1, r0, ip, asr #23
    2814:	00000000 	andeq	r0, r0, r0
    2818:	00000018 	andeq	r0, r0, r8, lsl r0
    281c:	40040e41 	andmi	r0, r4, r1, asr #28
    2820:	0e410187 	dvfeqd	f0, f1, f7
    2824:	070d4110 	smladeq	sp, r0, r1, r4
    2828:	41040e46 	tstmi	r4, r6, asr #28
    282c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2830:	00000e40 	andeq	r0, r0, r0, asr #28
    2834:	00000024 	andeq	r0, r0, r4, lsr #32
    2838:	00001bcc 	andeq	r1, r0, ip, asr #23
    283c:	00000000 	andeq	r0, r0, r0
    2840:	00000018 	andeq	r0, r0, r8, lsl r0
    2844:	40040e41 	andmi	r0, r4, r1, asr #28
    2848:	0e410187 	dvfeqd	f0, f1, f7
    284c:	070d4110 	smladeq	sp, r0, r1, r4
    2850:	41040e46 	tstmi	r4, r6, asr #28
    2854:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2858:	00000e40 	andeq	r0, r0, r0, asr #28
    285c:	00000024 	andeq	r0, r0, r4, lsr #32
    2860:	00001bcc 	andeq	r1, r0, ip, asr #23
    2864:	00000000 	andeq	r0, r0, r0
    2868:	0000001a 	andeq	r0, r0, sl, lsl r0
    286c:	40040e41 	andmi	r0, r4, r1, asr #28
    2870:	0e410187 	dvfeqd	f0, f1, f7
    2874:	070d4110 	smladeq	sp, r0, r1, r4
    2878:	41040e47 	tstmi	r4, r7, asr #28
    287c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2880:	00000e40 	andeq	r0, r0, r0, asr #28
    2884:	00000024 	andeq	r0, r0, r4, lsr #32
    2888:	00001bcc 	andeq	r1, r0, ip, asr #23
    288c:	00000000 	andeq	r0, r0, r0
    2890:	00000018 	andeq	r0, r0, r8, lsl r0
    2894:	40040e41 	andmi	r0, r4, r1, asr #28
    2898:	0e410187 	dvfeqd	f0, f1, f7
    289c:	070d4110 	smladeq	sp, r0, r1, r4
    28a0:	41040e46 	tstmi	r4, r6, asr #28
    28a4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    28a8:	00000e40 	andeq	r0, r0, r0, asr #28
    28ac:	00000024 	andeq	r0, r0, r4, lsr #32
    28b0:	00001bcc 	andeq	r1, r0, ip, asr #23
    28b4:	00000000 	andeq	r0, r0, r0
    28b8:	00000018 	andeq	r0, r0, r8, lsl r0
    28bc:	40040e41 	andmi	r0, r4, r1, asr #28
    28c0:	0e410187 	dvfeqd	f0, f1, f7
    28c4:	070d4110 	smladeq	sp, r0, r1, r4
    28c8:	41040e46 	tstmi	r4, r6, asr #28
    28cc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    28d0:	00000e40 	andeq	r0, r0, r0, asr #28
    28d4:	00000024 	andeq	r0, r0, r4, lsr #32
    28d8:	00001bcc 	andeq	r1, r0, ip, asr #23
    28dc:	00000000 	andeq	r0, r0, r0
    28e0:	00000036 	andeq	r0, r0, r6, lsr r0
    28e4:	40040e41 	andmi	r0, r4, r1, asr #28
    28e8:	0e410187 	dvfeqd	f0, f1, f7
    28ec:	070d4118 	smladeq	sp, r8, r1, r4
    28f0:	41040e55 	tstmi	r4, r5, asr lr
    28f4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    28f8:	00000e40 	andeq	r0, r0, r0, asr #28
    28fc:	00000024 	andeq	r0, r0, r4, lsr #32
    2900:	00001bcc 	andeq	r1, r0, ip, asr #23
    2904:	00000000 	andeq	r0, r0, r0
    2908:	00000020 	andeq	r0, r0, r0, lsr #32
    290c:	40040e41 	andmi	r0, r4, r1, asr #28
    2910:	0e410187 	dvfeqd	f0, f1, f7
    2914:	070d4110 	smladeq	sp, r0, r1, r4
    2918:	41040e4a 	tstmi	r4, sl, asr #28
    291c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2920:	00000e40 	andeq	r0, r0, r0, asr #28
    2924:	00000024 	andeq	r0, r0, r4, lsr #32
    2928:	00001bcc 	andeq	r1, r0, ip, asr #23
    292c:	080061f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sp, lr}
    2930:	00000052 	andeq	r0, r0, r2, asr r0
    2934:	40040e41 	andmi	r0, r4, r1, asr #28
    2938:	0e410187 	dvfeqd	f0, f1, f7
    293c:	070d4118 	smladeq	sp, r8, r1, r4
    2940:	41040e63 	tstmi	r4, r3, ror #28
    2944:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2948:	00000e40 	andeq	r0, r0, r0, asr #28
    294c:	00000024 	andeq	r0, r0, r4, lsr #32
    2950:	00001bcc 	andeq	r1, r0, ip, asr #23
    2954:	08006244 	stmdaeq	r0, {r2, r6, r9, sp, lr}
    2958:	00000020 	andeq	r0, r0, r0, lsr #32
    295c:	40040e41 	andmi	r0, r4, r1, asr #28
    2960:	0e410187 	dvfeqd	f0, f1, f7
    2964:	070d4110 	smladeq	sp, r0, r1, r4
    2968:	41040e4a 	tstmi	r4, sl, asr #28
    296c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2970:	00000e40 	andeq	r0, r0, r0, asr #28
    2974:	00000024 	andeq	r0, r0, r4, lsr #32
    2978:	00001bcc 	andeq	r1, r0, ip, asr #23
    297c:	00000000 	andeq	r0, r0, r0
    2980:	000000e0 	andeq	r0, r0, r0, ror #1
    2984:	40040e41 	andmi	r0, r4, r1, asr #28
    2988:	0e410187 	dvfeqd	f0, f1, f7
    298c:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    2990:	040e6002 	streq	r6, [lr], #-2
    2994:	410d0d41 	tstmi	sp, r1, asr #26
    2998:	000e40c7 	andeq	r4, lr, r7, asr #1
    299c:	00000024 	andeq	r0, r0, r4, lsr #32
    29a0:	00001bcc 	andeq	r1, r0, ip, asr #23
    29a4:	00000000 	andeq	r0, r0, r0
    29a8:	000000f4 	strdeq	r0, [r0], -r4
    29ac:	40040e41 	andmi	r0, r4, r1, asr #28
    29b0:	0e410187 	dvfeqd	f0, f1, f7
    29b4:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    29b8:	040e6a02 	streq	r6, [lr], #-2562	; 0xfffff5fe
    29bc:	410d0d41 	tstmi	sp, r1, asr #26
    29c0:	000e40c7 	andeq	r4, lr, r7, asr #1
    29c4:	00000024 	andeq	r0, r0, r4, lsr #32
    29c8:	00001bcc 	andeq	r1, r0, ip, asr #23
    29cc:	00000000 	andeq	r0, r0, r0
    29d0:	000000ec 	andeq	r0, r0, ip, ror #1
    29d4:	40040e41 	andmi	r0, r4, r1, asr #28
    29d8:	0e410187 	dvfeqd	f0, f1, f7
    29dc:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    29e0:	040e6502 	streq	r6, [lr], #-1282	; 0xfffffafe
    29e4:	410d0d41 	tstmi	sp, r1, asr #26
    29e8:	000e40c7 	andeq	r4, lr, r7, asr #1
    29ec:	00000024 	andeq	r0, r0, r4, lsr #32
    29f0:	00001bcc 	andeq	r1, r0, ip, asr #23
    29f4:	00000000 	andeq	r0, r0, r0
    29f8:	000000f8 	strdeq	r0, [r0], -r8
    29fc:	40040e41 	andmi	r0, r4, r1, asr #28
    2a00:	0e410187 	dvfeqd	f0, f1, f7
    2a04:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    2a08:	040e6c02 	streq	r6, [lr], #-3074	; 0xfffff3fe
    2a0c:	410d0d41 	tstmi	sp, r1, asr #26
    2a10:	000e40c7 	andeq	r4, lr, r7, asr #1
    2a14:	0000000c 	andeq	r0, r0, ip
    2a18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2a1c:	7c020001 	stcvc	0, cr0, [r2], {1}
    2a20:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2a24:	00000024 	andeq	r0, r0, r4, lsr #32
    2a28:	00002a14 	andeq	r2, r0, r4, lsl sl
    2a2c:	08006264 	stmdaeq	r0, {r2, r5, r6, r9, sp, lr}
    2a30:	00000048 	andeq	r0, r0, r8, asr #32
    2a34:	40080e41 	andmi	r0, r8, r1, asr #28
    2a38:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    2a3c:	100e4101 	andne	r4, lr, r1, lsl #2
    2a40:	5c070d41 	stcpl	13, cr0, [r7], {65}	; 0x41
    2a44:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    2a48:	0000000d 	andeq	r0, r0, sp
    2a4c:	00000024 	andeq	r0, r0, r4, lsr #32
    2a50:	00002a14 	andeq	r2, r0, r4, lsl sl
    2a54:	080062ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sp, lr}
    2a58:	00000184 	andeq	r0, r0, r4, lsl #3
    2a5c:	40080e41 	andmi	r0, r8, r1, asr #28
    2a60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    2a64:	300e4101 	andcc	r4, lr, r1, lsl #2
    2a68:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    2a6c:	41080eb5 			; <UNDEFINED> instruction: 0x41080eb5
    2a70:	00000d0d 	andeq	r0, r0, sp, lsl #26
    2a74:	00000024 	andeq	r0, r0, r4, lsr #32
    2a78:	00002a14 	andeq	r2, r0, r4, lsl sl
    2a7c:	00000000 	andeq	r0, r0, r0
    2a80:	0000003c 	andeq	r0, r0, ip, lsr r0
    2a84:	40040e41 	andmi	r0, r4, r1, asr #28
    2a88:	0e410187 	dvfeqd	f0, f1, f7
    2a8c:	070d4110 	smladeq	sp, r0, r1, r4
    2a90:	41040e58 	tstmi	r4, r8, asr lr
    2a94:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2a98:	00000e40 	andeq	r0, r0, r0, asr #28
    2a9c:	00000024 	andeq	r0, r0, r4, lsr #32
    2aa0:	00002a14 	andeq	r2, r0, r4, lsl sl
    2aa4:	08006430 	stmdaeq	r0, {r4, r5, sl, sp, lr}
    2aa8:	0000003e 	andeq	r0, r0, lr, lsr r0
    2aac:	40040e41 	andmi	r0, r4, r1, asr #28
    2ab0:	0e410187 	dvfeqd	f0, f1, f7
    2ab4:	070d4110 	smladeq	sp, r0, r1, r4
    2ab8:	41040e59 	tstmi	r4, r9, asr lr
    2abc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2ac0:	00000e40 	andeq	r0, r0, r0, asr #28
    2ac4:	00000024 	andeq	r0, r0, r4, lsr #32
    2ac8:	00002a14 	andeq	r2, r0, r4, lsl sl
    2acc:	00000000 	andeq	r0, r0, r0
    2ad0:	0000003e 	andeq	r0, r0, lr, lsr r0
    2ad4:	40040e41 	andmi	r0, r4, r1, asr #28
    2ad8:	0e410187 	dvfeqd	f0, f1, f7
    2adc:	070d4110 	smladeq	sp, r0, r1, r4
    2ae0:	41040e59 	tstmi	r4, r9, asr lr
    2ae4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2ae8:	00000e40 	andeq	r0, r0, r0, asr #28
    2aec:	00000024 	andeq	r0, r0, r4, lsr #32
    2af0:	00002a14 	andeq	r2, r0, r4, lsl sl
    2af4:	00000000 	andeq	r0, r0, r0
    2af8:	0000003e 	andeq	r0, r0, lr, lsr r0
    2afc:	40040e41 	andmi	r0, r4, r1, asr #28
    2b00:	0e410187 	dvfeqd	f0, f1, f7
    2b04:	070d4110 	smladeq	sp, r0, r1, r4
    2b08:	41040e59 	tstmi	r4, r9, asr lr
    2b0c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2b10:	00000e40 	andeq	r0, r0, r0, asr #28
    2b14:	00000024 	andeq	r0, r0, r4, lsr #32
    2b18:	00002a14 	andeq	r2, r0, r4, lsl sl
    2b1c:	08006470 	stmdaeq	r0, {r4, r5, r6, sl, sp, lr}
    2b20:	0000003e 	andeq	r0, r0, lr, lsr r0
    2b24:	40040e41 	andmi	r0, r4, r1, asr #28
    2b28:	0e410187 	dvfeqd	f0, f1, f7
    2b2c:	070d4110 	smladeq	sp, r0, r1, r4
    2b30:	41040e59 	tstmi	r4, r9, asr lr
    2b34:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2b38:	00000e40 	andeq	r0, r0, r0, asr #28
    2b3c:	00000024 	andeq	r0, r0, r4, lsr #32
    2b40:	00002a14 	andeq	r2, r0, r4, lsl sl
    2b44:	00000000 	andeq	r0, r0, r0
    2b48:	0000003e 	andeq	r0, r0, lr, lsr r0
    2b4c:	40040e41 	andmi	r0, r4, r1, asr #28
    2b50:	0e410187 	dvfeqd	f0, f1, f7
    2b54:	070d4110 	smladeq	sp, r0, r1, r4
    2b58:	41040e59 	tstmi	r4, r9, asr lr
    2b5c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2b60:	00000e40 	andeq	r0, r0, r0, asr #28
    2b64:	00000024 	andeq	r0, r0, r4, lsr #32
    2b68:	00002a14 	andeq	r2, r0, r4, lsl sl
    2b6c:	00000000 	andeq	r0, r0, r0
    2b70:	0000003e 	andeq	r0, r0, lr, lsr r0
    2b74:	40040e41 	andmi	r0, r4, r1, asr #28
    2b78:	0e410187 	dvfeqd	f0, f1, f7
    2b7c:	070d4110 	smladeq	sp, r0, r1, r4
    2b80:	41040e59 	tstmi	r4, r9, asr lr
    2b84:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2b88:	00000e40 	andeq	r0, r0, r0, asr #28
    2b8c:	00000024 	andeq	r0, r0, r4, lsr #32
    2b90:	00002a14 	andeq	r2, r0, r4, lsl sl
    2b94:	00000000 	andeq	r0, r0, r0
    2b98:	00000042 	andeq	r0, r0, r2, asr #32
    2b9c:	40040e41 	andmi	r0, r4, r1, asr #28
    2ba0:	0e410187 	dvfeqd	f0, f1, f7
    2ba4:	070d4118 	smladeq	sp, r8, r1, r4
    2ba8:	41040e5b 	tstmi	r4, fp, asr lr
    2bac:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2bb0:	00000e40 	andeq	r0, r0, r0, asr #28
    2bb4:	00000024 	andeq	r0, r0, r4, lsr #32
    2bb8:	00002a14 	andeq	r2, r0, r4, lsl sl
    2bbc:	00000000 	andeq	r0, r0, r0
    2bc0:	0000003e 	andeq	r0, r0, lr, lsr r0
    2bc4:	40040e41 	andmi	r0, r4, r1, asr #28
    2bc8:	0e410187 	dvfeqd	f0, f1, f7
    2bcc:	070d4110 	smladeq	sp, r0, r1, r4
    2bd0:	41040e59 	tstmi	r4, r9, asr lr
    2bd4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2bd8:	00000e40 	andeq	r0, r0, r0, asr #28
    2bdc:	00000024 	andeq	r0, r0, r4, lsr #32
    2be0:	00002a14 	andeq	r2, r0, r4, lsl sl
    2be4:	00000000 	andeq	r0, r0, r0
    2be8:	0000003e 	andeq	r0, r0, lr, lsr r0
    2bec:	40040e41 	andmi	r0, r4, r1, asr #28
    2bf0:	0e410187 	dvfeqd	f0, f1, f7
    2bf4:	070d4110 	smladeq	sp, r0, r1, r4
    2bf8:	41040e59 	tstmi	r4, r9, asr lr
    2bfc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2c00:	00000e40 	andeq	r0, r0, r0, asr #28
    2c04:	00000024 	andeq	r0, r0, r4, lsr #32
    2c08:	00002a14 	andeq	r2, r0, r4, lsl sl
    2c0c:	00000000 	andeq	r0, r0, r0
    2c10:	00000046 	andeq	r0, r0, r6, asr #32
    2c14:	40040e41 	andmi	r0, r4, r1, asr #28
    2c18:	0e410187 	dvfeqd	f0, f1, f7
    2c1c:	070d4110 	smladeq	sp, r0, r1, r4
    2c20:	41040e5d 	tstmi	r4, sp, asr lr
    2c24:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2c28:	00000e40 	andeq	r0, r0, r0, asr #28
    2c2c:	00000024 	andeq	r0, r0, r4, lsr #32
    2c30:	00002a14 	andeq	r2, r0, r4, lsl sl
    2c34:	080064b0 	stmdaeq	r0, {r4, r5, r7, sl, sp, lr}
    2c38:	0000001e 	andeq	r0, r0, lr, lsl r0
    2c3c:	40040e41 	andmi	r0, r4, r1, asr #28
    2c40:	0e410187 	dvfeqd	f0, f1, f7
    2c44:	070d4110 	smladeq	sp, r0, r1, r4
    2c48:	41040e49 	tstmi	r4, r9, asr #28
    2c4c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2c50:	00000e40 	andeq	r0, r0, r0, asr #28
    2c54:	00000024 	andeq	r0, r0, r4, lsr #32
    2c58:	00002a14 	andeq	r2, r0, r4, lsl sl
    2c5c:	00000000 	andeq	r0, r0, r0
    2c60:	0000001a 	andeq	r0, r0, sl, lsl r0
    2c64:	40040e41 	andmi	r0, r4, r1, asr #28
    2c68:	0e410187 	dvfeqd	f0, f1, f7
    2c6c:	070d4110 	smladeq	sp, r0, r1, r4
    2c70:	41040e47 	tstmi	r4, r7, asr #28
    2c74:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2c78:	00000e40 	andeq	r0, r0, r0, asr #28
    2c7c:	00000024 	andeq	r0, r0, r4, lsr #32
    2c80:	00002a14 	andeq	r2, r0, r4, lsl sl
    2c84:	080064d0 	stmdaeq	r0, {r4, r6, r7, sl, sp, lr}
    2c88:	0000003a 	andeq	r0, r0, sl, lsr r0
    2c8c:	40040e41 	andmi	r0, r4, r1, asr #28
    2c90:	0e410187 	dvfeqd	f0, f1, f7
    2c94:	070d4110 	smladeq	sp, r0, r1, r4
    2c98:	41040e57 	tstmi	r4, r7, asr lr
    2c9c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2ca0:	00000e40 	andeq	r0, r0, r0, asr #28
    2ca4:	00000024 	andeq	r0, r0, r4, lsr #32
    2ca8:	00002a14 	andeq	r2, r0, r4, lsl sl
    2cac:	00000000 	andeq	r0, r0, r0
    2cb0:	0000002c 	andeq	r0, r0, ip, lsr #32
    2cb4:	40040e41 	andmi	r0, r4, r1, asr #28
    2cb8:	0e410187 	dvfeqd	f0, f1, f7
    2cbc:	070d4118 	smladeq	sp, r8, r1, r4
    2cc0:	41040e50 	tstmi	r4, r0, asr lr
    2cc4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2cc8:	00000e40 	andeq	r0, r0, r0, asr #28
    2ccc:	00000024 	andeq	r0, r0, r4, lsr #32
    2cd0:	00002a14 	andeq	r2, r0, r4, lsl sl
    2cd4:	00000000 	andeq	r0, r0, r0
    2cd8:	00000042 	andeq	r0, r0, r2, asr #32
    2cdc:	40040e41 	andmi	r0, r4, r1, asr #28
    2ce0:	0e410187 	dvfeqd	f0, f1, f7
    2ce4:	070d4110 	smladeq	sp, r0, r1, r4
    2ce8:	41040e5b 	tstmi	r4, fp, asr lr
    2cec:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2cf0:	00000e40 	andeq	r0, r0, r0, asr #28
    2cf4:	00000024 	andeq	r0, r0, r4, lsr #32
    2cf8:	00002a14 	andeq	r2, r0, r4, lsl sl
    2cfc:	00000000 	andeq	r0, r0, r0
    2d00:	00000040 	andeq	r0, r0, r0, asr #32
    2d04:	40040e41 	andmi	r0, r4, r1, asr #28
    2d08:	0e410187 	dvfeqd	f0, f1, f7
    2d0c:	070d4110 	smladeq	sp, r0, r1, r4
    2d10:	41040e5a 	tstmi	r4, sl, asr lr
    2d14:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2d18:	00000e40 	andeq	r0, r0, r0, asr #28
    2d1c:	00000024 	andeq	r0, r0, r4, lsr #32
    2d20:	00002a14 	andeq	r2, r0, r4, lsl sl
    2d24:	00000000 	andeq	r0, r0, r0
    2d28:	00000040 	andeq	r0, r0, r0, asr #32
    2d2c:	40040e41 	andmi	r0, r4, r1, asr #28
    2d30:	0e410187 	dvfeqd	f0, f1, f7
    2d34:	070d4110 	smladeq	sp, r0, r1, r4
    2d38:	41040e5a 	tstmi	r4, sl, asr lr
    2d3c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2d40:	00000e40 	andeq	r0, r0, r0, asr #28
    2d44:	00000024 	andeq	r0, r0, r4, lsr #32
    2d48:	00002a14 	andeq	r2, r0, r4, lsl sl
    2d4c:	00000000 	andeq	r0, r0, r0
    2d50:	0000003e 	andeq	r0, r0, lr, lsr r0
    2d54:	40040e41 	andmi	r0, r4, r1, asr #28
    2d58:	0e410187 	dvfeqd	f0, f1, f7
    2d5c:	070d4110 	smladeq	sp, r0, r1, r4
    2d60:	41040e59 	tstmi	r4, r9, asr lr
    2d64:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2d68:	00000e40 	andeq	r0, r0, r0, asr #28
    2d6c:	00000024 	andeq	r0, r0, r4, lsr #32
    2d70:	00002a14 	andeq	r2, r0, r4, lsl sl
    2d74:	00000000 	andeq	r0, r0, r0
    2d78:	00000040 	andeq	r0, r0, r0, asr #32
    2d7c:	40040e41 	andmi	r0, r4, r1, asr #28
    2d80:	0e410187 	dvfeqd	f0, f1, f7
    2d84:	070d4110 	smladeq	sp, r0, r1, r4
    2d88:	41040e5a 	tstmi	r4, sl, asr lr
    2d8c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2d90:	00000e40 	andeq	r0, r0, r0, asr #28
    2d94:	00000024 	andeq	r0, r0, r4, lsr #32
    2d98:	00002a14 	andeq	r2, r0, r4, lsl sl
    2d9c:	00000000 	andeq	r0, r0, r0
    2da0:	0000003e 	andeq	r0, r0, lr, lsr r0
    2da4:	40040e41 	andmi	r0, r4, r1, asr #28
    2da8:	0e410187 	dvfeqd	f0, f1, f7
    2dac:	070d4110 	smladeq	sp, r0, r1, r4
    2db0:	41040e59 	tstmi	r4, r9, asr lr
    2db4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2db8:	00000e40 	andeq	r0, r0, r0, asr #28
    2dbc:	00000024 	andeq	r0, r0, r4, lsr #32
    2dc0:	00002a14 	andeq	r2, r0, r4, lsl sl
    2dc4:	00000000 	andeq	r0, r0, r0
    2dc8:	0000001e 	andeq	r0, r0, lr, lsl r0
    2dcc:	40040e41 	andmi	r0, r4, r1, asr #28
    2dd0:	0e410187 	dvfeqd	f0, f1, f7
    2dd4:	070d4110 	smladeq	sp, r0, r1, r4
    2dd8:	41040e49 	tstmi	r4, r9, asr #28
    2ddc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2de0:	00000e40 	andeq	r0, r0, r0, asr #28
    2de4:	00000024 	andeq	r0, r0, r4, lsr #32
    2de8:	00002a14 	andeq	r2, r0, r4, lsl sl
    2dec:	00000000 	andeq	r0, r0, r0
    2df0:	0000003e 	andeq	r0, r0, lr, lsr r0
    2df4:	40040e41 	andmi	r0, r4, r1, asr #28
    2df8:	0e410187 	dvfeqd	f0, f1, f7
    2dfc:	070d4110 	smladeq	sp, r0, r1, r4
    2e00:	41040e59 	tstmi	r4, r9, asr lr
    2e04:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2e08:	00000e40 	andeq	r0, r0, r0, asr #28
    2e0c:	00000024 	andeq	r0, r0, r4, lsr #32
    2e10:	00002a14 	andeq	r2, r0, r4, lsl sl
    2e14:	0800650c 	stmdaeq	r0, {r2, r3, r8, sl, sp, lr}
    2e18:	0000003e 	andeq	r0, r0, lr, lsr r0
    2e1c:	40040e41 	andmi	r0, r4, r1, asr #28
    2e20:	0e410187 	dvfeqd	f0, f1, f7
    2e24:	070d4110 	smladeq	sp, r0, r1, r4
    2e28:	41040e59 	tstmi	r4, r9, asr lr
    2e2c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2e30:	00000e40 	andeq	r0, r0, r0, asr #28
    2e34:	00000024 	andeq	r0, r0, r4, lsr #32
    2e38:	00002a14 	andeq	r2, r0, r4, lsl sl
    2e3c:	00000000 	andeq	r0, r0, r0
    2e40:	00000040 	andeq	r0, r0, r0, asr #32
    2e44:	40040e41 	andmi	r0, r4, r1, asr #28
    2e48:	0e410187 	dvfeqd	f0, f1, f7
    2e4c:	070d4110 	smladeq	sp, r0, r1, r4
    2e50:	41040e5a 	tstmi	r4, sl, asr lr
    2e54:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2e58:	00000e40 	andeq	r0, r0, r0, asr #28
    2e5c:	00000024 	andeq	r0, r0, r4, lsr #32
    2e60:	00002a14 	andeq	r2, r0, r4, lsl sl
    2e64:	0800654c 	stmdaeq	r0, {r2, r3, r6, r8, sl, sp, lr}
    2e68:	0000005e 	andeq	r0, r0, lr, asr r0
    2e6c:	40040e41 	andmi	r0, r4, r1, asr #28
    2e70:	0e410187 	dvfeqd	f0, f1, f7
    2e74:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    2e78:	41040e69 	tstmi	r4, r9, ror #28
    2e7c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2e80:	00000e40 	andeq	r0, r0, r0, asr #28
    2e84:	00000024 	andeq	r0, r0, r4, lsr #32
    2e88:	00002a14 	andeq	r2, r0, r4, lsl sl
    2e8c:	00000000 	andeq	r0, r0, r0
    2e90:	00000042 	andeq	r0, r0, r2, asr #32
    2e94:	40040e41 	andmi	r0, r4, r1, asr #28
    2e98:	0e410187 	dvfeqd	f0, f1, f7
    2e9c:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    2ea0:	41040e5b 	tstmi	r4, fp, asr lr
    2ea4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2ea8:	00000e40 	andeq	r0, r0, r0, asr #28
    2eac:	00000024 	andeq	r0, r0, r4, lsr #32
    2eb0:	00002a14 	andeq	r2, r0, r4, lsl sl
    2eb4:	080065ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, sp, lr}
    2eb8:	00000064 	andeq	r0, r0, r4, rrx
    2ebc:	40040e41 	andmi	r0, r4, r1, asr #28
    2ec0:	0e410187 	dvfeqd	f0, f1, f7
    2ec4:	070d4120 	streq	r4, [sp, -r0, lsr #2]
    2ec8:	41040e6c 	tstmi	r4, ip, ror #28
    2ecc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2ed0:	00000e40 	andeq	r0, r0, r0, asr #28
    2ed4:	00000024 	andeq	r0, r0, r4, lsr #32
    2ed8:	00002a14 	andeq	r2, r0, r4, lsl sl
    2edc:	00000000 	andeq	r0, r0, r0
    2ee0:	0000002c 	andeq	r0, r0, ip, lsr #32
    2ee4:	40040e41 	andmi	r0, r4, r1, asr #28
    2ee8:	0e410187 	dvfeqd	f0, f1, f7
    2eec:	070d4118 	smladeq	sp, r8, r1, r4
    2ef0:	41040e50 	tstmi	r4, r0, asr lr
    2ef4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2ef8:	00000e40 	andeq	r0, r0, r0, asr #28
    2efc:	00000024 	andeq	r0, r0, r4, lsr #32
    2f00:	00002a14 	andeq	r2, r0, r4, lsl sl
    2f04:	00000000 	andeq	r0, r0, r0
    2f08:	00000058 	andeq	r0, r0, r8, asr r0
    2f0c:	40040e41 	andmi	r0, r4, r1, asr #28
    2f10:	0e410187 	dvfeqd	f0, f1, f7
    2f14:	070d4118 	smladeq	sp, r8, r1, r4
    2f18:	41040e66 	tstmi	r4, r6, ror #28
    2f1c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2f20:	00000e40 	andeq	r0, r0, r0, asr #28
    2f24:	00000024 	andeq	r0, r0, r4, lsr #32
    2f28:	00002a14 	andeq	r2, r0, r4, lsl sl
    2f2c:	00000000 	andeq	r0, r0, r0
    2f30:	0000002c 	andeq	r0, r0, ip, lsr #32
    2f34:	40040e41 	andmi	r0, r4, r1, asr #28
    2f38:	0e410187 	dvfeqd	f0, f1, f7
    2f3c:	070d4118 	smladeq	sp, r8, r1, r4
    2f40:	41040e50 	tstmi	r4, r0, asr lr
    2f44:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2f48:	00000e40 	andeq	r0, r0, r0, asr #28
    2f4c:	0000000c 	andeq	r0, r0, ip
    2f50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    2f54:	7c020001 	stcvc	0, cr0, [r2], {1}
    2f58:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    2f5c:	00000024 	andeq	r0, r0, r4, lsr #32
    2f60:	00002f4c 	andeq	r2, r0, ip, asr #30
    2f64:	08006610 	stmdaeq	r0, {r4, r9, sl, sp, lr}
    2f68:	00000020 	andeq	r0, r0, r0, lsr #32
    2f6c:	40040e41 	andmi	r0, r4, r1, asr #28
    2f70:	0e410187 	dvfeqd	f0, f1, f7
    2f74:	070d4110 	smladeq	sp, r0, r1, r4
    2f78:	41040e47 	tstmi	r4, r7, asr #28
    2f7c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2f80:	00000e40 	andeq	r0, r0, r0, asr #28
    2f84:	00000024 	andeq	r0, r0, r4, lsr #32
    2f88:	00002f4c 	andeq	r2, r0, ip, asr #30
    2f8c:	08006630 	stmdaeq	r0, {r4, r5, r9, sl, sp, lr}
    2f90:	00000020 	andeq	r0, r0, r0, lsr #32
    2f94:	40040e41 	andmi	r0, r4, r1, asr #28
    2f98:	0e410187 	dvfeqd	f0, f1, f7
    2f9c:	070d4110 	smladeq	sp, r0, r1, r4
    2fa0:	41040e47 	tstmi	r4, r7, asr #28
    2fa4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2fa8:	00000e40 	andeq	r0, r0, r0, asr #28
    2fac:	00000024 	andeq	r0, r0, r4, lsr #32
    2fb0:	00002f4c 	andeq	r2, r0, ip, asr #30
    2fb4:	08006650 	stmdaeq	r0, {r4, r6, r9, sl, sp, lr}
    2fb8:	00000020 	andeq	r0, r0, r0, lsr #32
    2fbc:	40040e41 	andmi	r0, r4, r1, asr #28
    2fc0:	0e410187 	dvfeqd	f0, f1, f7
    2fc4:	070d4110 	smladeq	sp, r0, r1, r4
    2fc8:	41040e47 	tstmi	r4, r7, asr #28
    2fcc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    2fd0:	00000e40 	andeq	r0, r0, r0, asr #28
    2fd4:	00000020 	andeq	r0, r0, r0, lsr #32
    2fd8:	00002f4c 	andeq	r2, r0, ip, asr #30
    2fdc:	08006670 	stmdaeq	r0, {r4, r5, r6, r9, sl, sp, lr}
    2fe0:	00000018 	andeq	r0, r0, r8, lsl r0
    2fe4:	40040e41 	andmi	r0, r4, r1, asr #28
    2fe8:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    2fec:	0d0d4607 	stceq	6, cr4, [sp, #-28]	; 0xffffffe4
    2ff0:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    2ff4:	00000000 	andeq	r0, r0, r0
    2ff8:	00000020 	andeq	r0, r0, r0, lsr #32
    2ffc:	00002f4c 	andeq	r2, r0, ip, asr #30
    3000:	08006688 	stmdaeq	r0, {r3, r7, r9, sl, sp, lr}
    3004:	00000018 	andeq	r0, r0, r8, lsl r0
    3008:	40040e41 	andmi	r0, r4, r1, asr #28
    300c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3010:	0d0d4607 	stceq	6, cr4, [sp, #-28]	; 0xffffffe4
    3014:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    3018:	00000000 	andeq	r0, r0, r0
    301c:	00000024 	andeq	r0, r0, r4, lsr #32
    3020:	00002f4c 	andeq	r2, r0, ip, asr #30
    3024:	00000000 	andeq	r0, r0, r0
    3028:	00000034 	andeq	r0, r0, r4, lsr r0
    302c:	40040e41 	andmi	r0, r4, r1, asr #28
    3030:	0e410187 	dvfeqd	f0, f1, f7
    3034:	070d4118 	smladeq	sp, r8, r1, r4
    3038:	41040e52 	tstmi	r4, r2, asr lr
    303c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3040:	00000e40 	andeq	r0, r0, r0, asr #28
    3044:	0000000c 	andeq	r0, r0, ip
    3048:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    304c:	7c020001 	stcvc	0, cr0, [r2], {1}
    3050:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3054:	00000020 	andeq	r0, r0, r0, lsr #32
    3058:	00003044 	andeq	r3, r0, r4, asr #32
    305c:	00000000 	andeq	r0, r0, r0
    3060:	00000018 	andeq	r0, r0, r8, lsl r0
    3064:	40040e41 	andmi	r0, r4, r1, asr #28
    3068:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    306c:	0d0d4507 	cfstr32eq	mvfx4, [sp, #-28]	; 0xffffffe4
    3070:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    3074:	00000000 	andeq	r0, r0, r0
    3078:	00000020 	andeq	r0, r0, r0, lsr #32
    307c:	00003044 	andeq	r3, r0, r4, asr #32
    3080:	00000000 	andeq	r0, r0, r0
    3084:	00000018 	andeq	r0, r0, r8, lsl r0
    3088:	40040e41 	andmi	r0, r4, r1, asr #28
    308c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3090:	0d0d4607 	stceq	6, cr4, [sp, #-28]	; 0xffffffe4
    3094:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    3098:	00000000 	andeq	r0, r0, r0
    309c:	00000024 	andeq	r0, r0, r4, lsr #32
    30a0:	00003044 	andeq	r3, r0, r4, asr #32
    30a4:	080066a0 	stmdaeq	r0, {r5, r7, r9, sl, sp, lr}
    30a8:	0000003c 	andeq	r0, r0, ip, lsr r0
    30ac:	40040e41 	andmi	r0, r4, r1, asr #28
    30b0:	0e410187 	dvfeqd	f0, f1, f7
    30b4:	070d4110 	smladeq	sp, r0, r1, r4
    30b8:	41040e56 	tstmi	r4, r6, asr lr
    30bc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    30c0:	00000e40 	andeq	r0, r0, r0, asr #28
    30c4:	0000000c 	andeq	r0, r0, ip
    30c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    30cc:	7c020001 	stcvc	0, cr0, [r2], {1}
    30d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    30d4:	00000020 	andeq	r0, r0, r0, lsr #32
    30d8:	000030c4 	andeq	r3, r0, r4, asr #1
    30dc:	00000000 	andeq	r0, r0, r0
    30e0:	0000000e 	andeq	r0, r0, lr
    30e4:	40040e41 	andmi	r0, r4, r1, asr #28
    30e8:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    30ec:	0d0d4307 	stceq	3, cr4, [sp, #-28]	; 0xffffffe4
    30f0:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    30f4:	00000000 	andeq	r0, r0, r0
    30f8:	00000020 	andeq	r0, r0, r0, lsr #32
    30fc:	000030c4 	andeq	r3, r0, r4, asr #1
    3100:	00000000 	andeq	r0, r0, r0
    3104:	0000000e 	andeq	r0, r0, lr
    3108:	40040e41 	andmi	r0, r4, r1, asr #28
    310c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3110:	0d0d4307 	stceq	3, cr4, [sp, #-28]	; 0xffffffe4
    3114:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    3118:	00000000 	andeq	r0, r0, r0
    311c:	00000018 	andeq	r0, r0, r8, lsl r0
    3120:	000030c4 	andeq	r3, r0, r4, asr #1
    3124:	00000000 	andeq	r0, r0, r0
    3128:	0000001c 	andeq	r0, r0, ip, lsl r0
    312c:	40080e41 	andmi	r0, r8, r1, asr #28
    3130:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3134:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    3138:	00000024 	andeq	r0, r0, r4, lsr #32
    313c:	000030c4 	andeq	r3, r0, r4, asr #1
    3140:	080066dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, sp, lr}
    3144:	00000020 	andeq	r0, r0, r0, lsr #32
    3148:	40040e41 	andmi	r0, r4, r1, asr #28
    314c:	0e410187 	dvfeqd	f0, f1, f7
    3150:	070d4110 	smladeq	sp, r0, r1, r4
    3154:	41040e47 	tstmi	r4, r7, asr #28
    3158:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    315c:	00000e40 	andeq	r0, r0, r0, asr #28
    3160:	00000024 	andeq	r0, r0, r4, lsr #32
    3164:	000030c4 	andeq	r3, r0, r4, asr #1
    3168:	00000000 	andeq	r0, r0, r0
    316c:	00000020 	andeq	r0, r0, r0, lsr #32
    3170:	40040e41 	andmi	r0, r4, r1, asr #28
    3174:	0e410187 	dvfeqd	f0, f1, f7
    3178:	070d4110 	smladeq	sp, r0, r1, r4
    317c:	41040e47 	tstmi	r4, r7, asr #28
    3180:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3184:	00000e40 	andeq	r0, r0, r0, asr #28
    3188:	00000024 	andeq	r0, r0, r4, lsr #32
    318c:	000030c4 	andeq	r3, r0, r4, asr #1
    3190:	00000000 	andeq	r0, r0, r0
    3194:	00000038 	andeq	r0, r0, r8, lsr r0
    3198:	40040e41 	andmi	r0, r4, r1, asr #28
    319c:	0e410187 	dvfeqd	f0, f1, f7
    31a0:	070d4118 	smladeq	sp, r8, r1, r4
    31a4:	41040e53 	tstmi	r4, r3, asr lr
    31a8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    31ac:	00000e40 	andeq	r0, r0, r0, asr #28
    31b0:	00000024 	andeq	r0, r0, r4, lsr #32
    31b4:	000030c4 	andeq	r3, r0, r4, asr #1
    31b8:	00000000 	andeq	r0, r0, r0
    31bc:	00000020 	andeq	r0, r0, r0, lsr #32
    31c0:	40040e41 	andmi	r0, r4, r1, asr #28
    31c4:	0e410187 	dvfeqd	f0, f1, f7
    31c8:	070d4110 	smladeq	sp, r0, r1, r4
    31cc:	41040e47 	tstmi	r4, r7, asr #28
    31d0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    31d4:	00000e40 	andeq	r0, r0, r0, asr #28
    31d8:	00000024 	andeq	r0, r0, r4, lsr #32
    31dc:	000030c4 	andeq	r3, r0, r4, asr #1
    31e0:	00000000 	andeq	r0, r0, r0
    31e4:	00000064 	andeq	r0, r0, r4, rrx
    31e8:	40080e41 	andmi	r0, r8, r1, asr #28
    31ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    31f0:	180e4101 	stmdane	lr, {r0, r8, lr}
    31f4:	69070d41 	stmdbvs	r7, {r0, r6, r8, sl, fp}
    31f8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    31fc:	0000000d 	andeq	r0, r0, sp
    3200:	00000018 	andeq	r0, r0, r8, lsl r0
    3204:	000030c4 	andeq	r3, r0, r4, asr #1
    3208:	00000000 	andeq	r0, r0, r0
    320c:	00000038 	andeq	r0, r0, r8, lsr r0
    3210:	40080e41 	andmi	r0, r8, r1, asr #28
    3214:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3218:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    321c:	00000024 	andeq	r0, r0, r4, lsr #32
    3220:	000030c4 	andeq	r3, r0, r4, asr #1
    3224:	00000000 	andeq	r0, r0, r0
    3228:	00000034 	andeq	r0, r0, r4, lsr r0
    322c:	40040e41 	andmi	r0, r4, r1, asr #28
    3230:	0e410187 	dvfeqd	f0, f1, f7
    3234:	070d4118 	smladeq	sp, r8, r1, r4
    3238:	41040e51 	tstmi	r4, r1, asr lr
    323c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3240:	00000e40 	andeq	r0, r0, r0, asr #28
    3244:	00000024 	andeq	r0, r0, r4, lsr #32
    3248:	000030c4 	andeq	r3, r0, r4, asr #1
    324c:	00000000 	andeq	r0, r0, r0
    3250:	00000024 	andeq	r0, r0, r4, lsr #32
    3254:	40040e41 	andmi	r0, r4, r1, asr #28
    3258:	0e410187 	dvfeqd	f0, f1, f7
    325c:	070d4110 	smladeq	sp, r0, r1, r4
    3260:	41040e4a 	tstmi	r4, sl, asr #28
    3264:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3268:	00000e40 	andeq	r0, r0, r0, asr #28
    326c:	0000000c 	andeq	r0, r0, ip
    3270:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3274:	7c020001 	stcvc	0, cr0, [r2], {1}
    3278:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    327c:	00000018 	andeq	r0, r0, r8, lsl r0
    3280:	0000326c 	andeq	r3, r0, ip, ror #4
    3284:	080066fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, sp, lr}
    3288:	00000014 	andeq	r0, r0, r4, lsl r0
    328c:	40080e41 	andmi	r0, r8, r1, asr #28
    3290:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3294:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    3298:	00000024 	andeq	r0, r0, r4, lsr #32
    329c:	0000326c 	andeq	r3, r0, ip, ror #4
    32a0:	00000000 	andeq	r0, r0, r0
    32a4:	00000020 	andeq	r0, r0, r0, lsr #32
    32a8:	40040e41 	andmi	r0, r4, r1, asr #28
    32ac:	0e410187 	dvfeqd	f0, f1, f7
    32b0:	070d4110 	smladeq	sp, r0, r1, r4
    32b4:	41040e47 	tstmi	r4, r7, asr #28
    32b8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    32bc:	00000e40 	andeq	r0, r0, r0, asr #28
    32c0:	00000024 	andeq	r0, r0, r4, lsr #32
    32c4:	0000326c 	andeq	r3, r0, ip, ror #4
    32c8:	00000000 	andeq	r0, r0, r0
    32cc:	00000020 	andeq	r0, r0, r0, lsr #32
    32d0:	40040e41 	andmi	r0, r4, r1, asr #28
    32d4:	0e410187 	dvfeqd	f0, f1, f7
    32d8:	070d4110 	smladeq	sp, r0, r1, r4
    32dc:	41040e47 	tstmi	r4, r7, asr #28
    32e0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    32e4:	00000e40 	andeq	r0, r0, r0, asr #28
    32e8:	00000024 	andeq	r0, r0, r4, lsr #32
    32ec:	0000326c 	andeq	r3, r0, ip, ror #4
    32f0:	00000000 	andeq	r0, r0, r0
    32f4:	00000020 	andeq	r0, r0, r0, lsr #32
    32f8:	40040e41 	andmi	r0, r4, r1, asr #28
    32fc:	0e410187 	dvfeqd	f0, f1, f7
    3300:	070d4110 	smladeq	sp, r0, r1, r4
    3304:	41040e47 	tstmi	r4, r7, asr #28
    3308:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    330c:	00000e40 	andeq	r0, r0, r0, asr #28
    3310:	00000024 	andeq	r0, r0, r4, lsr #32
    3314:	0000326c 	andeq	r3, r0, ip, ror #4
    3318:	00000000 	andeq	r0, r0, r0
    331c:	00000038 	andeq	r0, r0, r8, lsr r0
    3320:	40040e41 	andmi	r0, r4, r1, asr #28
    3324:	0e410187 	dvfeqd	f0, f1, f7
    3328:	070d4118 	smladeq	sp, r8, r1, r4
    332c:	41040e54 	tstmi	r4, r4, asr lr
    3330:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3334:	00000e40 	andeq	r0, r0, r0, asr #28
    3338:	00000024 	andeq	r0, r0, r4, lsr #32
    333c:	0000326c 	andeq	r3, r0, ip, ror #4
    3340:	00000000 	andeq	r0, r0, r0
    3344:	0000003c 	andeq	r0, r0, ip, lsr r0
    3348:	40040e41 	andmi	r0, r4, r1, asr #28
    334c:	0e410187 	dvfeqd	f0, f1, f7
    3350:	070d4118 	smladeq	sp, r8, r1, r4
    3354:	41040e55 	tstmi	r4, r5, asr lr
    3358:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    335c:	00000e40 	andeq	r0, r0, r0, asr #28
    3360:	00000024 	andeq	r0, r0, r4, lsr #32
    3364:	0000326c 	andeq	r3, r0, ip, ror #4
    3368:	00000000 	andeq	r0, r0, r0
    336c:	00000038 	andeq	r0, r0, r8, lsr r0
    3370:	40040e41 	andmi	r0, r4, r1, asr #28
    3374:	0e410187 	dvfeqd	f0, f1, f7
    3378:	070d4118 	smladeq	sp, r8, r1, r4
    337c:	41040e53 	tstmi	r4, r3, asr lr
    3380:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3384:	00000e40 	andeq	r0, r0, r0, asr #28
    3388:	00000024 	andeq	r0, r0, r4, lsr #32
    338c:	0000326c 	andeq	r3, r0, ip, ror #4
    3390:	00000000 	andeq	r0, r0, r0
    3394:	00000030 	andeq	r0, r0, r0, lsr r0
    3398:	40040e41 	andmi	r0, r4, r1, asr #28
    339c:	0e410187 	dvfeqd	f0, f1, f7
    33a0:	070d4118 	smladeq	sp, r8, r1, r4
    33a4:	41040e4f 	tstmi	r4, pc, asr #28
    33a8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    33ac:	00000e40 	andeq	r0, r0, r0, asr #28
    33b0:	00000020 	andeq	r0, r0, r0, lsr #32
    33b4:	0000326c 	andeq	r3, r0, ip, ror #4
    33b8:	00000000 	andeq	r0, r0, r0
    33bc:	00000018 	andeq	r0, r0, r8, lsl r0
    33c0:	40040e41 	andmi	r0, r4, r1, asr #28
    33c4:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    33c8:	0d0d4507 	cfstr32eq	mvfx4, [sp, #-28]	; 0xffffffe4
    33cc:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    33d0:	00000000 	andeq	r0, r0, r0
    33d4:	00000020 	andeq	r0, r0, r0, lsr #32
    33d8:	0000326c 	andeq	r3, r0, ip, ror #4
    33dc:	00000000 	andeq	r0, r0, r0
    33e0:	00000020 	andeq	r0, r0, r0, lsr #32
    33e4:	40040e41 	andmi	r0, r4, r1, asr #28
    33e8:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    33ec:	0d0d4a07 	vstreq	s8, [sp, #-28]	; 0xffffffe4
    33f0:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    33f4:	00000000 	andeq	r0, r0, r0
    33f8:	00000020 	andeq	r0, r0, r0, lsr #32
    33fc:	0000326c 	andeq	r3, r0, ip, ror #4
    3400:	00000000 	andeq	r0, r0, r0
    3404:	00000018 	andeq	r0, r0, r8, lsl r0
    3408:	40040e41 	andmi	r0, r4, r1, asr #28
    340c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3410:	0d0d4507 	cfstr32eq	mvfx4, [sp, #-28]	; 0xffffffe4
    3414:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    3418:	00000000 	andeq	r0, r0, r0
    341c:	00000020 	andeq	r0, r0, r0, lsr #32
    3420:	0000326c 	andeq	r3, r0, ip, ror #4
    3424:	00000000 	andeq	r0, r0, r0
    3428:	00000020 	andeq	r0, r0, r0, lsr #32
    342c:	40040e41 	andmi	r0, r4, r1, asr #28
    3430:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3434:	0d0d4a07 	vstreq	s8, [sp, #-28]	; 0xffffffe4
    3438:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    343c:	00000000 	andeq	r0, r0, r0
    3440:	0000000c 	andeq	r0, r0, ip
    3444:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3448:	7c020001 	stcvc	0, cr0, [r2], {1}
    344c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3450:	00000024 	andeq	r0, r0, r4, lsr #32
    3454:	00003440 	andeq	r3, r0, r0, asr #8
    3458:	00000000 	andeq	r0, r0, r0
    345c:	0000004c 	andeq	r0, r0, ip, asr #32
    3460:	40040e41 	andmi	r0, r4, r1, asr #28
    3464:	0e410187 	dvfeqd	f0, f1, f7
    3468:	070d4110 	smladeq	sp, r0, r1, r4
    346c:	41040e5d 	tstmi	r4, sp, asr lr
    3470:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3474:	00000e40 	andeq	r0, r0, r0, asr #28
    3478:	00000020 	andeq	r0, r0, r0, lsr #32
    347c:	00003440 	andeq	r3, r0, r0, asr #8
    3480:	08006710 	stmdaeq	r0, {r4, r8, r9, sl, sp, lr}
    3484:	00000020 	andeq	r0, r0, r0, lsr #32
    3488:	40040e41 	andmi	r0, r4, r1, asr #28
    348c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3490:	0d0d4a07 	vstreq	s8, [sp, #-28]	; 0xffffffe4
    3494:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    3498:	00000000 	andeq	r0, r0, r0
    349c:	00000020 	andeq	r0, r0, r0, lsr #32
    34a0:	00003440 	andeq	r3, r0, r0, asr #8
    34a4:	08006730 	stmdaeq	r0, {r4, r5, r8, r9, sl, sp, lr}
    34a8:	00000020 	andeq	r0, r0, r0, lsr #32
    34ac:	40040e41 	andmi	r0, r4, r1, asr #28
    34b0:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    34b4:	0d0d4a07 	vstreq	s8, [sp, #-28]	; 0xffffffe4
    34b8:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    34bc:	00000000 	andeq	r0, r0, r0
    34c0:	00000024 	andeq	r0, r0, r4, lsr #32
    34c4:	00003440 	andeq	r3, r0, r0, asr #8
    34c8:	00000000 	andeq	r0, r0, r0
    34cc:	0000002c 	andeq	r0, r0, ip, lsr #32
    34d0:	40040e41 	andmi	r0, r4, r1, asr #28
    34d4:	0e410187 	dvfeqd	f0, f1, f7
    34d8:	070d4110 	smladeq	sp, r0, r1, r4
    34dc:	41040e4d 	tstmi	r4, sp, asr #28
    34e0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    34e4:	00000e40 	andeq	r0, r0, r0, asr #28
    34e8:	00000024 	andeq	r0, r0, r4, lsr #32
    34ec:	00003440 	andeq	r3, r0, r0, asr #8
    34f0:	00000000 	andeq	r0, r0, r0
    34f4:	00000030 	andeq	r0, r0, r0, lsr r0
    34f8:	40080e41 	andmi	r0, r8, r1, asr #28
    34fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3500:	100e4101 	andne	r4, lr, r1, lsl #2
    3504:	50070d41 	andpl	r0, r7, r1, asr #26
    3508:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    350c:	0000000d 	andeq	r0, r0, sp
    3510:	00000024 	andeq	r0, r0, r4, lsr #32
    3514:	00003440 	andeq	r3, r0, r0, asr #8
    3518:	08006750 	stmdaeq	r0, {r4, r6, r8, r9, sl, sp, lr}
    351c:	00000034 	andeq	r0, r0, r4, lsr r0
    3520:	40080e41 	andmi	r0, r8, r1, asr #28
    3524:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3528:	100e4101 	andne	r4, lr, r1, lsl #2
    352c:	53070d41 	movwpl	r0, #32065	; 0x7d41
    3530:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3534:	0000000d 	andeq	r0, r0, sp
    3538:	00000024 	andeq	r0, r0, r4, lsr #32
    353c:	00003440 	andeq	r3, r0, r0, asr #8
    3540:	00000000 	andeq	r0, r0, r0
    3544:	00000030 	andeq	r0, r0, r0, lsr r0
    3548:	40080e41 	andmi	r0, r8, r1, asr #28
    354c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3550:	100e4101 	andne	r4, lr, r1, lsl #2
    3554:	50070d41 	andpl	r0, r7, r1, asr #26
    3558:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    355c:	0000000d 	andeq	r0, r0, sp
    3560:	00000024 	andeq	r0, r0, r4, lsr #32
    3564:	00003440 	andeq	r3, r0, r0, asr #8
    3568:	00000000 	andeq	r0, r0, r0
    356c:	00000038 	andeq	r0, r0, r8, lsr r0
    3570:	40040e41 	andmi	r0, r4, r1, asr #28
    3574:	0e410187 	dvfeqd	f0, f1, f7
    3578:	070d4110 	smladeq	sp, r0, r1, r4
    357c:	41040e53 	tstmi	r4, r3, asr lr
    3580:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3584:	00000e40 	andeq	r0, r0, r0, asr #28
    3588:	00000020 	andeq	r0, r0, r0, lsr #32
    358c:	00003440 	andeq	r3, r0, r0, asr #8
    3590:	08006784 	stmdaeq	r0, {r2, r7, r8, r9, sl, sp, lr}
    3594:	00000020 	andeq	r0, r0, r0, lsr #32
    3598:	40040e41 	andmi	r0, r4, r1, asr #28
    359c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    35a0:	0d0d4a07 	vstreq	s8, [sp, #-28]	; 0xffffffe4
    35a4:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    35a8:	00000000 	andeq	r0, r0, r0
    35ac:	00000020 	andeq	r0, r0, r0, lsr #32
    35b0:	00003440 	andeq	r3, r0, r0, asr #8
    35b4:	00000000 	andeq	r0, r0, r0
    35b8:	00000030 	andeq	r0, r0, r0, lsr r0
    35bc:	40040e41 	andmi	r0, r4, r1, asr #28
    35c0:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    35c4:	0d0d5207 	sfmeq	f5, 4, [sp, #-28]	; 0xffffffe4
    35c8:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    35cc:	00000000 	andeq	r0, r0, r0
    35d0:	00000024 	andeq	r0, r0, r4, lsr #32
    35d4:	00003440 	andeq	r3, r0, r0, asr #8
    35d8:	00000000 	andeq	r0, r0, r0
    35dc:	00000038 	andeq	r0, r0, r8, lsr r0
    35e0:	40040e41 	andmi	r0, r4, r1, asr #28
    35e4:	0e410187 	dvfeqd	f0, f1, f7
    35e8:	070d4118 	smladeq	sp, r8, r1, r4
    35ec:	41040e54 	tstmi	r4, r4, asr lr
    35f0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    35f4:	00000e40 	andeq	r0, r0, r0, asr #28
    35f8:	00000024 	andeq	r0, r0, r4, lsr #32
    35fc:	00003440 	andeq	r3, r0, r0, asr #8
    3600:	00000000 	andeq	r0, r0, r0
    3604:	0000002c 	andeq	r0, r0, ip, lsr #32
    3608:	40040e41 	andmi	r0, r4, r1, asr #28
    360c:	0e410187 	dvfeqd	f0, f1, f7
    3610:	070d4110 	smladeq	sp, r0, r1, r4
    3614:	41040e4e 	tstmi	r4, lr, asr #28
    3618:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    361c:	00000e40 	andeq	r0, r0, r0, asr #28
    3620:	00000024 	andeq	r0, r0, r4, lsr #32
    3624:	00003440 	andeq	r3, r0, r0, asr #8
    3628:	00000000 	andeq	r0, r0, r0
    362c:	00000050 	andeq	r0, r0, r0, asr r0
    3630:	40040e41 	andmi	r0, r4, r1, asr #28
    3634:	0e410187 	dvfeqd	f0, f1, f7
    3638:	070d4118 	smladeq	sp, r8, r1, r4
    363c:	41040e5f 	tstmi	r4, pc, asr lr
    3640:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3644:	00000e40 	andeq	r0, r0, r0, asr #28
    3648:	00000024 	andeq	r0, r0, r4, lsr #32
    364c:	00003440 	andeq	r3, r0, r0, asr #8
    3650:	00000000 	andeq	r0, r0, r0
    3654:	0000002c 	andeq	r0, r0, ip, lsr #32
    3658:	40040e41 	andmi	r0, r4, r1, asr #28
    365c:	0e410187 	dvfeqd	f0, f1, f7
    3660:	070d4110 	smladeq	sp, r0, r1, r4
    3664:	41040e4e 	tstmi	r4, lr, asr #28
    3668:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    366c:	00000e40 	andeq	r0, r0, r0, asr #28
    3670:	0000000c 	andeq	r0, r0, ip
    3674:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3678:	7c020001 	stcvc	0, cr0, [r2], {1}
    367c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3680:	00000020 	andeq	r0, r0, r0, lsr #32
    3684:	00003670 	andeq	r3, r0, r0, ror r6
    3688:	080067a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, sp, lr}
    368c:	0000000c 	andeq	r0, r0, ip
    3690:	40040e41 	andmi	r0, r4, r1, asr #28
    3694:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3698:	0d0d4207 	sfmeq	f4, 4, [sp, #-28]	; 0xffffffe4
    369c:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    36a0:	00000000 	andeq	r0, r0, r0
    36a4:	00000018 	andeq	r0, r0, r8, lsl r0
    36a8:	00003670 	andeq	r3, r0, r0, ror r6
    36ac:	080067b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, sp, lr}
    36b0:	00000006 	andeq	r0, r0, r6
    36b4:	40040e41 	andmi	r0, r4, r1, asr #28
    36b8:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    36bc:	00000007 	andeq	r0, r0, r7
    36c0:	00000018 	andeq	r0, r0, r8, lsl r0
    36c4:	00003670 	andeq	r3, r0, r0, ror r6
    36c8:	080067b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, sp, lr}
    36cc:	00000006 	andeq	r0, r0, r6
    36d0:	40040e41 	andmi	r0, r4, r1, asr #28
    36d4:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    36d8:	00000007 	andeq	r0, r0, r7
    36dc:	00000018 	andeq	r0, r0, r8, lsl r0
    36e0:	00003670 	andeq	r3, r0, r0, ror r6
    36e4:	080067c0 	stmdaeq	r0, {r6, r7, r8, r9, sl, sp, lr}
    36e8:	00000006 	andeq	r0, r0, r6
    36ec:	40040e41 	andmi	r0, r4, r1, asr #28
    36f0:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    36f4:	00000007 	andeq	r0, r0, r7
    36f8:	00000018 	andeq	r0, r0, r8, lsl r0
    36fc:	00003670 	andeq	r3, r0, r0, ror r6
    3700:	080067c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, sp, lr}
    3704:	00000006 	andeq	r0, r0, r6
    3708:	40040e41 	andmi	r0, r4, r1, asr #28
    370c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3710:	00000007 	andeq	r0, r0, r7
    3714:	00000020 	andeq	r0, r0, r0, lsr #32
    3718:	00003670 	andeq	r3, r0, r0, ror r6
    371c:	080067d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, sp, lr}
    3720:	0000000c 	andeq	r0, r0, ip
    3724:	40040e41 	andmi	r0, r4, r1, asr #28
    3728:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    372c:	0d0d4207 	sfmeq	f4, 4, [sp, #-28]	; 0xffffffe4
    3730:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    3734:	00000000 	andeq	r0, r0, r0
    3738:	00000020 	andeq	r0, r0, r0, lsr #32
    373c:	00003670 	andeq	r3, r0, r0, ror r6
    3740:	080067dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, sp, lr}
    3744:	0000000c 	andeq	r0, r0, ip
    3748:	40040e41 	andmi	r0, r4, r1, asr #28
    374c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3750:	0d0d4207 	sfmeq	f4, 4, [sp, #-28]	; 0xffffffe4
    3754:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    3758:	00000000 	andeq	r0, r0, r0
    375c:	00000018 	andeq	r0, r0, r8, lsl r0
    3760:	00003670 	andeq	r3, r0, r0, ror r6
    3764:	080067e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, sp, lr}
    3768:	00000064 	andeq	r0, r0, r4, rrx
    376c:	40080e41 	andmi	r0, r8, r1, asr #28
    3770:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3774:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    3778:	00000020 	andeq	r0, r0, r0, lsr #32
    377c:	00003670 	andeq	r3, r0, r0, ror r6
    3780:	0800684c 	stmdaeq	r0, {r2, r3, r6, fp, sp, lr}
    3784:	0000000c 	andeq	r0, r0, ip
    3788:	40040e41 	andmi	r0, r4, r1, asr #28
    378c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    3790:	0d0d4207 	sfmeq	f4, 4, [sp, #-28]	; 0xffffffe4
    3794:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    3798:	00000000 	andeq	r0, r0, r0
    379c:	0000000c 	andeq	r0, r0, ip
    37a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    37a4:	7c020001 	stcvc	0, cr0, [r2], {1}
    37a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    37ac:	00000024 	andeq	r0, r0, r4, lsr #32
    37b0:	0000379c 	muleq	r0, ip, r7
    37b4:	08006858 	stmdaeq	r0, {r3, r4, r6, fp, sp, lr}
    37b8:	00000084 	andeq	r0, r0, r4, lsl #1
    37bc:	40080e41 	andmi	r0, r8, r1, asr #28
    37c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    37c4:	200e4101 	andcs	r4, lr, r1, lsl #2
    37c8:	77070d41 	strvc	r0, [r7, -r1, asr #26]
    37cc:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    37d0:	0000000d 	andeq	r0, r0, sp
    37d4:	00000024 	andeq	r0, r0, r4, lsr #32
    37d8:	0000379c 	muleq	r0, ip, r7
    37dc:	080068dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, sp, lr}
    37e0:	00000048 	andeq	r0, r0, r8, asr #32
    37e4:	40080e41 	andmi	r0, r8, r1, asr #28
    37e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    37ec:	100e4101 	andne	r4, lr, r1, lsl #2
    37f0:	5c070d41 	stcpl	13, cr0, [r7], {65}	; 0x41
    37f4:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    37f8:	0000000d 	andeq	r0, r0, sp
    37fc:	00000024 	andeq	r0, r0, r4, lsr #32
    3800:	0000379c 	muleq	r0, ip, r7
    3804:	08006924 	stmdaeq	r0, {r2, r5, r8, fp, sp, lr}
    3808:	000000c4 	andeq	r0, r0, r4, asr #1
    380c:	40080e41 	andmi	r0, r8, r1, asr #28
    3810:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3814:	200e4101 	andcs	r4, lr, r1, lsl #2
    3818:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    381c:	41080e59 	tstmi	r8, r9, asr lr
    3820:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3824:	00000024 	andeq	r0, r0, r4, lsr #32
    3828:	0000379c 	muleq	r0, ip, r7
    382c:	080069e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, sp, lr}
    3830:	00000062 	andeq	r0, r0, r2, rrx
    3834:	40080e41 	andmi	r0, r8, r1, asr #28
    3838:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    383c:	180e4101 	stmdane	lr, {r0, r8, lr}
    3840:	6c070d41 	stcvs	13, cr0, [r7], {65}	; 0x41
    3844:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3848:	0000000d 	andeq	r0, r0, sp
    384c:	00000018 	andeq	r0, r0, r8, lsl r0
    3850:	0000379c 	muleq	r0, ip, r7
    3854:	08006a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp, sp, lr}
    3858:	00000044 	andeq	r0, r0, r4, asr #32
    385c:	40080e41 	andmi	r0, r8, r1, asr #28
    3860:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3864:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    3868:	00000018 	andeq	r0, r0, r8, lsl r0
    386c:	0000379c 	muleq	r0, ip, r7
    3870:	08006a90 	stmdaeq	r0, {r4, r7, r9, fp, sp, lr}
    3874:	0000004a 	andeq	r0, r0, sl, asr #32
    3878:	40080e41 	andmi	r0, r8, r1, asr #28
    387c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3880:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    3884:	0000000c 	andeq	r0, r0, ip
    3888:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    388c:	7c020001 	stcvc	0, cr0, [r2], {1}
    3890:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3894:	00000018 	andeq	r0, r0, r8, lsl r0
    3898:	00003884 	andeq	r3, r0, r4, lsl #17
    389c:	08006adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, sp, lr}
    38a0:	00000014 	andeq	r0, r0, r4, lsl r0
    38a4:	40080e41 	andmi	r0, r8, r1, asr #28
    38a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    38ac:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    38b0:	00000018 	andeq	r0, r0, r8, lsl r0
    38b4:	00003884 	andeq	r3, r0, r4, lsl #17
    38b8:	08006af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, sp, lr}
    38bc:	00000014 	andeq	r0, r0, r4, lsl r0
    38c0:	40080e41 	andmi	r0, r8, r1, asr #28
    38c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    38c8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    38cc:	00000024 	andeq	r0, r0, r4, lsr #32
    38d0:	00003884 	andeq	r3, r0, r4, lsl #17
    38d4:	08006b04 	stmdaeq	r0, {r2, r8, r9, fp, sp, lr}
    38d8:	00000034 	andeq	r0, r0, r4, lsr r0
    38dc:	40080e41 	andmi	r0, r8, r1, asr #28
    38e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    38e4:	100e4101 	andne	r4, lr, r1, lsl #2
    38e8:	52070d41 	andpl	r0, r7, #4160	; 0x1040
    38ec:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    38f0:	0000000d 	andeq	r0, r0, sp
    38f4:	00000024 	andeq	r0, r0, r4, lsr #32
    38f8:	00003884 	andeq	r3, r0, r4, lsl #17
    38fc:	08006b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, sp, lr}
    3900:	00000030 	andeq	r0, r0, r0, lsr r0
    3904:	40080e41 	andmi	r0, r8, r1, asr #28
    3908:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    390c:	100e4101 	andne	r4, lr, r1, lsl #2
    3910:	50070d41 	andpl	r0, r7, r1, asr #26
    3914:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3918:	0000000d 	andeq	r0, r0, sp
    391c:	00000024 	andeq	r0, r0, r4, lsr #32
    3920:	00003884 	andeq	r3, r0, r4, lsl #17
    3924:	08006b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, sp, lr}
    3928:	0000005c 	andeq	r0, r0, ip, asr r0
    392c:	40080e41 	andmi	r0, r8, r1, asr #28
    3930:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3934:	180e4101 	stmdane	lr, {r0, r8, lr}
    3938:	61070d41 	tstvs	r7, r1, asr #26
    393c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3940:	0000000d 	andeq	r0, r0, sp
    3944:	00000024 	andeq	r0, r0, r4, lsr #32
    3948:	00003884 	andeq	r3, r0, r4, lsl #17
    394c:	08006bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp, sp, lr}
    3950:	0000004c 	andeq	r0, r0, ip, asr #32
    3954:	40080e41 	andmi	r0, r8, r1, asr #28
    3958:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    395c:	200e4101 	andcs	r4, lr, r1, lsl #2
    3960:	5e070d41 	cdppl	13, 0, cr0, cr7, cr1, {2}
    3964:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3968:	0000000d 	andeq	r0, r0, sp
    396c:	00000024 	andeq	r0, r0, r4, lsr #32
    3970:	00003884 	andeq	r3, r0, r4, lsl #17
    3974:	08006c10 	stmdaeq	r0, {r4, sl, fp, sp, lr}
    3978:	000000e4 	andeq	r0, r0, r4, ror #1
    397c:	40080e41 	andmi	r0, r8, r1, asr #28
    3980:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3984:	180e4101 	stmdane	lr, {r0, r8, lr}
    3988:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    398c:	41080e68 	tstmi	r8, r8, ror #28
    3990:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3994:	00000024 	andeq	r0, r0, r4, lsr #32
    3998:	00003884 	andeq	r3, r0, r4, lsl #17
    399c:	08006cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, sp, lr}
    39a0:	000001f8 	strdeq	r0, [r0], -r8
    39a4:	40080e41 	andmi	r0, r8, r1, asr #28
    39a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    39ac:	180e4101 	stmdane	lr, {r0, r8, lr}
    39b0:	10070c41 	andne	r0, r7, r1, asr #24
    39b4:	080ec002 	stmdaeq	lr, {r1, lr, pc}
    39b8:	000d0d41 	andeq	r0, sp, r1, asr #26
    39bc:	00000020 	andeq	r0, r0, r0, lsr #32
    39c0:	00003884 	andeq	r3, r0, r4, lsl #17
    39c4:	08006eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, sp, lr}
    39c8:	00000388 	andeq	r0, r0, r8, lsl #7
    39cc:	400c0e41 	andmi	r0, ip, r1, asr #28
    39d0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
    39d4:	018e4002 	orreq	r4, lr, r2
    39d8:	41680e41 	cmnmi	r8, r1, asr #28
    39dc:	0058070c 	subseq	r0, r8, ip, lsl #14
    39e0:	0000001c 	andeq	r0, r0, ip, lsl r0
    39e4:	00003884 	andeq	r3, r0, r4, lsl #17
    39e8:	08007274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip, sp, lr}
    39ec:	00000328 	andeq	r0, r0, r8, lsr #6
    39f0:	40080e41 	andmi	r0, r8, r1, asr #28
    39f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    39f8:	a00e4101 	andge	r4, lr, r1, lsl #2
    39fc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    3a00:	0000001c 	andeq	r0, r0, ip, lsl r0
    3a04:	00003884 	andeq	r3, r0, r4, lsl #17
    3a08:	0800759c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
    3a0c:	000000cc 	andeq	r0, r0, ip, asr #1
    3a10:	40080e41 	andmi	r0, r8, r1, asr #28
    3a14:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3a18:	180e4101 	stmdane	lr, {r0, r8, lr}
    3a1c:	00070d41 	andeq	r0, r7, r1, asr #26
    3a20:	0000001c 	andeq	r0, r0, ip, lsl r0
    3a24:	00003884 	andeq	r3, r0, r4, lsl #17
    3a28:	08007668 	stmdaeq	r0, {r3, r5, r6, r9, sl, ip, sp, lr}
    3a2c:	0000004c 	andeq	r0, r0, ip, asr #32
    3a30:	40080e41 	andmi	r0, r8, r1, asr #28
    3a34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3a38:	100e4101 	andne	r4, lr, r1, lsl #2
    3a3c:	00070d41 	andeq	r0, r7, r1, asr #26
    3a40:	00000018 	andeq	r0, r0, r8, lsl r0
    3a44:	00003884 	andeq	r3, r0, r4, lsl #17
    3a48:	080076b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, ip, sp, lr}
    3a4c:	0000001e 	andeq	r0, r0, lr, lsl r0
    3a50:	40040e41 	andmi	r0, r4, r1, asr #28
    3a54:	0e410187 	dvfeqd	f0, f1, f7
    3a58:	070d4118 	smladeq	sp, r8, r1, r4
    3a5c:	0000000c 	andeq	r0, r0, ip
    3a60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3a64:	7c020001 	stcvc	0, cr0, [r2], {1}
    3a68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3a6c:	00000024 	andeq	r0, r0, r4, lsr #32
    3a70:	00003a5c 	andeq	r3, r0, ip, asr sl
    3a74:	080076d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, ip, sp, lr}
    3a78:	0000004e 	andeq	r0, r0, lr, asr #32
    3a7c:	40040e41 	andmi	r0, r4, r1, asr #28
    3a80:	0e410187 	dvfeqd	f0, f1, f7
    3a84:	070d4118 	smladeq	sp, r8, r1, r4
    3a88:	41040e61 	tstmi	r4, r1, ror #28
    3a8c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3a90:	00000e40 	andeq	r0, r0, r0, asr #28
    3a94:	00000024 	andeq	r0, r0, r4, lsr #32
    3a98:	00003a5c 	andeq	r3, r0, ip, asr sl
    3a9c:	08007724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip, sp, lr}
    3aa0:	00000054 	andeq	r0, r0, r4, asr r0
    3aa4:	40040e41 	andmi	r0, r4, r1, asr #28
    3aa8:	0e410187 	dvfeqd	f0, f1, f7
    3aac:	070d4118 	smladeq	sp, r8, r1, r4
    3ab0:	41040e64 	tstmi	r4, r4, ror #28
    3ab4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3ab8:	00000e40 	andeq	r0, r0, r0, asr #28
    3abc:	00000024 	andeq	r0, r0, r4, lsr #32
    3ac0:	00003a5c 	andeq	r3, r0, ip, asr sl
    3ac4:	08007778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, ip, sp, lr}
    3ac8:	000000be 	strheq	r0, [r0], -lr
    3acc:	40080e41 	andmi	r0, r8, r1, asr #28
    3ad0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3ad4:	180e4101 	stmdane	lr, {r0, r8, lr}
    3ad8:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3adc:	41080e5a 	tstmi	r8, sl, asr lr
    3ae0:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3ae4:	00000024 	andeq	r0, r0, r4, lsr #32
    3ae8:	00003a5c 	andeq	r3, r0, ip, asr sl
    3aec:	00000000 	andeq	r0, r0, r0
    3af0:	0000003c 	andeq	r0, r0, ip, lsr r0
    3af4:	40080e41 	andmi	r0, r8, r1, asr #28
    3af8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3afc:	180e4101 	stmdane	lr, {r0, r8, lr}
    3b00:	59070d41 	stmdbpl	r7, {r0, r6, r8, sl, fp}
    3b04:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3b08:	0000000d 	andeq	r0, r0, sp
    3b0c:	00000024 	andeq	r0, r0, r4, lsr #32
    3b10:	00003a5c 	andeq	r3, r0, ip, asr sl
    3b14:	00000000 	andeq	r0, r0, r0
    3b18:	00000064 	andeq	r0, r0, r4, rrx
    3b1c:	40080e41 	andmi	r0, r8, r1, asr #28
    3b20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3b24:	180e4101 	stmdane	lr, {r0, r8, lr}
    3b28:	6d070d41 	stcvs	13, cr0, [r7, #-260]	; 0xfffffefc
    3b2c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3b30:	0000000d 	andeq	r0, r0, sp
    3b34:	00000024 	andeq	r0, r0, r4, lsr #32
    3b38:	00003a5c 	andeq	r3, r0, ip, asr sl
    3b3c:	08007838 	stmdaeq	r0, {r3, r4, r5, fp, ip, sp, lr}
    3b40:	0000003c 	andeq	r0, r0, ip, lsr r0
    3b44:	40080e41 	andmi	r0, r8, r1, asr #28
    3b48:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3b4c:	180e4101 	stmdane	lr, {r0, r8, lr}
    3b50:	59070d41 	stmdbpl	r7, {r0, r6, r8, sl, fp}
    3b54:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3b58:	0000000d 	andeq	r0, r0, sp
    3b5c:	00000024 	andeq	r0, r0, r4, lsr #32
    3b60:	00003a5c 	andeq	r3, r0, ip, asr sl
    3b64:	08007874 	stmdaeq	r0, {r2, r4, r5, r6, fp, ip, sp, lr}
    3b68:	00000092 	muleq	r0, r2, r0
    3b6c:	40080e41 	andmi	r0, r8, r1, asr #28
    3b70:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3b74:	180e4101 	stmdane	lr, {r0, r8, lr}
    3b78:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3b7c:	41080e44 	tstmi	r8, r4, asr #28
    3b80:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3b84:	00000024 	andeq	r0, r0, r4, lsr #32
    3b88:	00003a5c 	andeq	r3, r0, ip, asr sl
    3b8c:	08007908 	stmdaeq	r0, {r3, r8, fp, ip, sp, lr}
    3b90:	00000080 	andeq	r0, r0, r0, lsl #1
    3b94:	40080e41 	andmi	r0, r8, r1, asr #28
    3b98:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3b9c:	100e4101 	andne	r4, lr, r1, lsl #2
    3ba0:	78070d41 	stmdavc	r7, {r0, r6, r8, sl, fp}
    3ba4:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3ba8:	0000000d 	andeq	r0, r0, sp
    3bac:	00000024 	andeq	r0, r0, r4, lsr #32
    3bb0:	00003a5c 	andeq	r3, r0, ip, asr sl
    3bb4:	08007988 	stmdaeq	r0, {r3, r7, r8, fp, ip, sp, lr}
    3bb8:	0000004c 	andeq	r0, r0, ip, asr #32
    3bbc:	40080e41 	andmi	r0, r8, r1, asr #28
    3bc0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3bc4:	180e4101 	stmdane	lr, {r0, r8, lr}
    3bc8:	61070d41 	tstvs	r7, r1, asr #26
    3bcc:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3bd0:	0000000d 	andeq	r0, r0, sp
    3bd4:	00000024 	andeq	r0, r0, r4, lsr #32
    3bd8:	00003a5c 	andeq	r3, r0, ip, asr sl
    3bdc:	080079d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, sp, lr}
    3be0:	0000001e 	andeq	r0, r0, lr, lsl r0
    3be4:	40040e41 	andmi	r0, r4, r1, asr #28
    3be8:	0e410187 	dvfeqd	f0, f1, f7
    3bec:	070d4110 	smladeq	sp, r0, r1, r4
    3bf0:	41040e49 	tstmi	r4, r9, asr #28
    3bf4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3bf8:	00000e40 	andeq	r0, r0, r0, asr #28
    3bfc:	00000038 	andeq	r0, r0, r8, lsr r0
    3c00:	00003a5c 	andeq	r3, r0, ip, asr sl
    3c04:	080079f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, ip, sp, lr}
    3c08:	000002f2 	strdeq	r0, [r0], -r2
    3c0c:	40240e42 	eormi	r0, r4, r2, asr #28
    3c10:	85400984 	strbhi	r0, [r0, #-2436]	; 0xfffff67c
    3c14:	07864008 	streq	r4, [r6, r8]
    3c18:	40068740 	andmi	r8, r6, r0, asr #14
    3c1c:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
    3c20:	038a4004 	orreq	r4, sl, #4
    3c24:	40028b40 	andmi	r8, r2, r0, asr #22
    3c28:	0e41018e 	dvfeqd	f0, f1, #0.5
    3c2c:	070d4168 	streq	r4, [sp, -r8, ror #2]
    3c30:	0e017203 	cdpeq	2, 0, cr7, cr1, cr3, {0}
    3c34:	0d0d4124 	stfeqs	f4, [sp, #-144]	; 0xffffff70
    3c38:	00000024 	andeq	r0, r0, r4, lsr #32
    3c3c:	00003a5c 	andeq	r3, r0, ip, asr sl
    3c40:	00000000 	andeq	r0, r0, r0
    3c44:	00000036 	andeq	r0, r0, r6, lsr r0
    3c48:	40080e41 	andmi	r0, r8, r1, asr #28
    3c4c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3c50:	180e4101 	stmdane	lr, {r0, r8, lr}
    3c54:	56070d41 	strpl	r0, [r7], -r1, asr #26
    3c58:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3c5c:	0000000d 	andeq	r0, r0, sp
    3c60:	00000024 	andeq	r0, r0, r4, lsr #32
    3c64:	00003a5c 	andeq	r3, r0, ip, asr sl
    3c68:	08007ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp, ip, sp, lr}
    3c6c:	00000036 	andeq	r0, r0, r6, lsr r0
    3c70:	40080e41 	andmi	r0, r8, r1, asr #28
    3c74:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3c78:	180e4101 	stmdane	lr, {r0, r8, lr}
    3c7c:	56070d41 	strpl	r0, [r7], -r1, asr #26
    3c80:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3c84:	0000000d 	andeq	r0, r0, sp
    3c88:	00000024 	andeq	r0, r0, r4, lsr #32
    3c8c:	00003a5c 	andeq	r3, r0, ip, asr sl
    3c90:	00000000 	andeq	r0, r0, r0
    3c94:	0000002e 	andeq	r0, r0, lr, lsr #32
    3c98:	40080e41 	andmi	r0, r8, r1, asr #28
    3c9c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3ca0:	200e4101 	andcs	r4, lr, r1, lsl #2
    3ca4:	18070c41 	stmdane	r7, {r0, r6, sl, fp}
    3ca8:	41080e52 	tstmi	r8, r2, asr lr
    3cac:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3cb0:	0000003c 	andeq	r0, r0, ip, lsr r0
    3cb4:	00003a5c 	andeq	r3, r0, ip, asr sl
    3cb8:	00000000 	andeq	r0, r0, r0
    3cbc:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    3cc0:	40240e42 	eormi	r0, r4, r2, asr #28
    3cc4:	85400984 	strbhi	r0, [r0, #-2436]	; 0xfffff67c
    3cc8:	07864008 	streq	r4, [r6, r8]
    3ccc:	40068740 	andmi	r8, r6, r0, asr #14
    3cd0:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
    3cd4:	038a4004 	orreq	r4, sl, #4
    3cd8:	40028b40 	andmi	r8, r2, r0, asr #22
    3cdc:	0e41018e 	dvfeqd	f0, f1, #0.5
    3ce0:	0d410180 	stfeqe	f0, [r1, #-512]	; 0xfffffe00
    3ce4:	01550307 	cmpeq	r5, r7, lsl #6
    3ce8:	0d41240e 	cfstrdeq	mvd2, [r1, #-56]	; 0xffffffc8
    3cec:	0000000d 	andeq	r0, r0, sp
    3cf0:	00000024 	andeq	r0, r0, r4, lsr #32
    3cf4:	00003a5c 	andeq	r3, r0, ip, asr sl
    3cf8:	00000000 	andeq	r0, r0, r0
    3cfc:	0000004a 	andeq	r0, r0, sl, asr #32
    3d00:	40080e41 	andmi	r0, r8, r1, asr #28
    3d04:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3d08:	180e4101 	stmdane	lr, {r0, r8, lr}
    3d0c:	60070d41 	andvs	r0, r7, r1, asr #26
    3d10:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3d14:	0000000d 	andeq	r0, r0, sp
    3d18:	00000038 	andeq	r0, r0, r8, lsr r0
    3d1c:	00003a5c 	andeq	r3, r0, ip, asr sl
    3d20:	08007d20 	stmdaeq	r0, {r5, r8, sl, fp, ip, sp, lr}
    3d24:	00000182 	andeq	r0, r0, r2, lsl #3
    3d28:	40240e42 	eormi	r0, r4, r2, asr #28
    3d2c:	85400984 	strbhi	r0, [r0, #-2436]	; 0xfffff67c
    3d30:	07864008 	streq	r4, [r6, r8]
    3d34:	40068740 	andmi	r8, r6, r0, asr #14
    3d38:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
    3d3c:	038a4004 	orreq	r4, sl, #4
    3d40:	40028b40 	andmi	r8, r2, r0, asr #22
    3d44:	0e41018e 	dvfeqd	f0, f1, #0.5
    3d48:	070d4160 	streq	r4, [sp, -r0, ror #2]
    3d4c:	240eba02 	strcs	fp, [lr], #-2562	; 0xfffff5fe
    3d50:	000d0d41 	andeq	r0, sp, r1, asr #26
    3d54:	00000038 	andeq	r0, r0, r8, lsr r0
    3d58:	00003a5c 	andeq	r3, r0, ip, asr sl
    3d5c:	00000000 	andeq	r0, r0, r0
    3d60:	00000182 	andeq	r0, r0, r2, lsl #3
    3d64:	40240e42 	eormi	r0, r4, r2, asr #28
    3d68:	85400984 	strbhi	r0, [r0, #-2436]	; 0xfffff67c
    3d6c:	07864008 	streq	r4, [r6, r8]
    3d70:	40068740 	andmi	r8, r6, r0, asr #14
    3d74:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
    3d78:	038a4004 	orreq	r4, sl, #4
    3d7c:	40028b40 	andmi	r8, r2, r0, asr #22
    3d80:	0e41018e 	dvfeqd	f0, f1, #0.5
    3d84:	070d4160 	streq	r4, [sp, -r0, ror #2]
    3d88:	240eba02 	strcs	fp, [lr], #-2562	; 0xfffff5fe
    3d8c:	000d0d41 	andeq	r0, sp, r1, asr #26
    3d90:	0000000c 	andeq	r0, r0, ip
    3d94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3d98:	7c020001 	stcvc	0, cr0, [r2], {1}
    3d9c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3da0:	00000024 	andeq	r0, r0, r4, lsr #32
    3da4:	00003d90 	muleq	r0, r0, sp
    3da8:	08007ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, sp, lr}
    3dac:	0000003e 	andeq	r0, r0, lr, lsr r0
    3db0:	40040e41 	andmi	r0, r4, r1, asr #28
    3db4:	0e410187 	dvfeqd	f0, f1, f7
    3db8:	070d4110 	smladeq	sp, r0, r1, r4
    3dbc:	41040e59 	tstmi	r4, r9, asr lr
    3dc0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3dc4:	00000e40 	andeq	r0, r0, r0, asr #28
    3dc8:	00000024 	andeq	r0, r0, r4, lsr #32
    3dcc:	00003d90 	muleq	r0, r0, sp
    3dd0:	08007ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, ip, sp, lr}
    3dd4:	00000018 	andeq	r0, r0, r8, lsl r0
    3dd8:	40040e41 	andmi	r0, r4, r1, asr #28
    3ddc:	0e410187 	dvfeqd	f0, f1, f7
    3de0:	070d4110 	smladeq	sp, r0, r1, r4
    3de4:	41040e46 	tstmi	r4, r6, asr #28
    3de8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3dec:	00000e40 	andeq	r0, r0, r0, asr #28
    3df0:	00000024 	andeq	r0, r0, r4, lsr #32
    3df4:	00003d90 	muleq	r0, r0, sp
    3df8:	08007efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}
    3dfc:	00000046 	andeq	r0, r0, r6, asr #32
    3e00:	40040e41 	andmi	r0, r4, r1, asr #28
    3e04:	0e410187 	dvfeqd	f0, f1, f7
    3e08:	070d4118 	smladeq	sp, r8, r1, r4
    3e0c:	41040e5d 	tstmi	r4, sp, asr lr
    3e10:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3e14:	00000e40 	andeq	r0, r0, r0, asr #28
    3e18:	00000024 	andeq	r0, r0, r4, lsr #32
    3e1c:	00003d90 	muleq	r0, r0, sp
    3e20:	08007f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, ip, sp, lr}
    3e24:	00000070 	andeq	r0, r0, r0, ror r0
    3e28:	40040e41 	andmi	r0, r4, r1, asr #28
    3e2c:	0e410187 	dvfeqd	f0, f1, f7
    3e30:	070d4118 	smladeq	sp, r8, r1, r4
    3e34:	41040e72 	tstmi	r4, r2, ror lr
    3e38:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3e3c:	00000e40 	andeq	r0, r0, r0, asr #28
    3e40:	00000024 	andeq	r0, r0, r4, lsr #32
    3e44:	00003d90 	muleq	r0, r0, sp
    3e48:	08007fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    3e4c:	00000052 	andeq	r0, r0, r2, asr r0
    3e50:	40040e41 	andmi	r0, r4, r1, asr #28
    3e54:	0e410187 	dvfeqd	f0, f1, f7
    3e58:	070d4118 	smladeq	sp, r8, r1, r4
    3e5c:	41040e63 	tstmi	r4, r3, ror #28
    3e60:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    3e64:	00000e40 	andeq	r0, r0, r0, asr #28
    3e68:	0000000c 	andeq	r0, r0, ip
    3e6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    3e70:	7c020001 	stcvc	0, cr0, [r2], {1}
    3e74:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    3e78:	00000024 	andeq	r0, r0, r4, lsr #32
    3e7c:	00003e68 	andeq	r3, r0, r8, ror #28
    3e80:	08008008 	stmdaeq	r0, {r3, pc}
    3e84:	000000b4 	strheq	r0, [r0], -r4
    3e88:	40080e41 	andmi	r0, r8, r1, asr #28
    3e8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3e90:	180e4101 	stmdane	lr, {r0, r8, lr}
    3e94:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3e98:	41080e53 	tstmi	r8, r3, asr lr
    3e9c:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3ea0:	00000024 	andeq	r0, r0, r4, lsr #32
    3ea4:	00003e68 	andeq	r3, r0, r8, ror #28
    3ea8:	080080bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, pc}
    3eac:	0000005c 	andeq	r0, r0, ip, asr r0
    3eb0:	40080e41 	andmi	r0, r8, r1, asr #28
    3eb4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3eb8:	300e4101 	andcc	r4, lr, r1, lsl #2
    3ebc:	28070c41 	stmdacs	r7, {r0, r6, sl, fp}
    3ec0:	41080e69 	tstmi	r8, r9, ror #28
    3ec4:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3ec8:	00000024 	andeq	r0, r0, r4, lsr #32
    3ecc:	00003e68 	andeq	r3, r0, r8, ror #28
    3ed0:	08008118 	stmdaeq	r0, {r3, r4, r8, pc}
    3ed4:	0000003e 	andeq	r0, r0, lr, lsr r0
    3ed8:	40080e41 	andmi	r0, r8, r1, asr #28
    3edc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3ee0:	180e4101 	stmdane	lr, {r0, r8, lr}
    3ee4:	5a070d41 	bpl	1c73f0 <_Min_Stack_Size+0x1c71f0>
    3ee8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3eec:	0000000d 	andeq	r0, r0, sp
    3ef0:	00000024 	andeq	r0, r0, r4, lsr #32
    3ef4:	00003e68 	andeq	r3, r0, r8, ror #28
    3ef8:	08008158 	stmdaeq	r0, {r3, r4, r6, r8, pc}
    3efc:	00000034 	andeq	r0, r0, r4, lsr r0
    3f00:	40080e41 	andmi	r0, r8, r1, asr #28
    3f04:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3f08:	100e4101 	andne	r4, lr, r1, lsl #2
    3f0c:	55070d41 	strpl	r0, [r7, #-3393]	; 0xfffff2bf
    3f10:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3f14:	0000000d 	andeq	r0, r0, sp
    3f18:	00000024 	andeq	r0, r0, r4, lsr #32
    3f1c:	00003e68 	andeq	r3, r0, r8, ror #28
    3f20:	0800818c 	stmdaeq	r0, {r2, r3, r7, r8, pc}
    3f24:	00000030 	andeq	r0, r0, r0, lsr r0
    3f28:	40080e41 	andmi	r0, r8, r1, asr #28
    3f2c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3f30:	200e4101 	andcs	r4, lr, r1, lsl #2
    3f34:	53070d41 	movwpl	r0, #32065	; 0x7d41
    3f38:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    3f3c:	0000000d 	andeq	r0, r0, sp
    3f40:	00000024 	andeq	r0, r0, r4, lsr #32
    3f44:	00003e68 	andeq	r3, r0, r8, ror #28
    3f48:	080081bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, pc}
    3f4c:	00000154 	andeq	r0, r0, r4, asr r1
    3f50:	40080e41 	andmi	r0, r8, r1, asr #28
    3f54:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3f58:	300e4101 	andcc	r4, lr, r1, lsl #2
    3f5c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3f60:	41080ea3 	smlatbmi	r8, r3, lr, r0
    3f64:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3f68:	00000024 	andeq	r0, r0, r4, lsr #32
    3f6c:	00003e68 	andeq	r3, r0, r8, ror #28
    3f70:	00000000 	andeq	r0, r0, r0
    3f74:	000000ae 	andeq	r0, r0, lr, lsr #1
    3f78:	40080e41 	andmi	r0, r8, r1, asr #28
    3f7c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3f80:	380e4101 	stmdacc	lr, {r0, r8, lr}
    3f84:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3f88:	41080e52 	tstmi	r8, r2, asr lr
    3f8c:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3f90:	00000024 	andeq	r0, r0, r4, lsr #32
    3f94:	00003e68 	andeq	r3, r0, r8, ror #28
    3f98:	00000000 	andeq	r0, r0, r0
    3f9c:	000000a6 	andeq	r0, r0, r6, lsr #1
    3fa0:	40080e41 	andmi	r0, r8, r1, asr #28
    3fa4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3fa8:	300e4101 	andcc	r4, lr, r1, lsl #2
    3fac:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3fb0:	41080e4e 	tstmi	r8, lr, asr #28
    3fb4:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3fb8:	00000024 	andeq	r0, r0, r4, lsr #32
    3fbc:	00003e68 	andeq	r3, r0, r8, ror #28
    3fc0:	00000000 	andeq	r0, r0, r0
    3fc4:	00000144 	andeq	r0, r0, r4, asr #2
    3fc8:	40080e41 	andmi	r0, r8, r1, asr #28
    3fcc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3fd0:	300e4101 	andcc	r4, lr, r1, lsl #2
    3fd4:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    3fd8:	41080e9b 			; <UNDEFINED> instruction: 0x41080e9b
    3fdc:	00000d0d 	andeq	r0, r0, sp, lsl #26
    3fe0:	00000024 	andeq	r0, r0, r4, lsr #32
    3fe4:	00003e68 	andeq	r3, r0, r8, ror #28
    3fe8:	08008310 	stmdaeq	r0, {r4, r8, r9, pc}
    3fec:	00000190 	muleq	r0, r0, r1
    3ff0:	40080e41 	andmi	r0, r8, r1, asr #28
    3ff4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    3ff8:	300e4101 	andcc	r4, lr, r1, lsl #2
    3ffc:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    4000:	41080ec1 	smlabtmi	r8, r1, lr, r0
    4004:	00000d0d 	andeq	r0, r0, sp, lsl #26
    4008:	00000024 	andeq	r0, r0, r4, lsr #32
    400c:	00003e68 	andeq	r3, r0, r8, ror #28
    4010:	00000000 	andeq	r0, r0, r0
    4014:	00000148 	andeq	r0, r0, r8, asr #2
    4018:	40080e41 	andmi	r0, r8, r1, asr #28
    401c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4020:	300e4101 	andcc	r4, lr, r1, lsl #2
    4024:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    4028:	41080e9d 			; <UNDEFINED> instruction: 0x41080e9d
    402c:	00000d0d 	andeq	r0, r0, sp, lsl #26
    4030:	00000024 	andeq	r0, r0, r4, lsr #32
    4034:	00003e68 	andeq	r3, r0, r8, ror #28
    4038:	00000000 	andeq	r0, r0, r0
    403c:	000000ac 	andeq	r0, r0, ip, lsr #1
    4040:	40080e41 	andmi	r0, r8, r1, asr #28
    4044:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4048:	380e4101 	stmdacc	lr, {r0, r8, lr}
    404c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    4050:	41080e51 	tstmi	r8, r1, asr lr
    4054:	00000d0d 	andeq	r0, r0, sp, lsl #26
    4058:	00000024 	andeq	r0, r0, r4, lsr #32
    405c:	00003e68 	andeq	r3, r0, r8, ror #28
    4060:	00000000 	andeq	r0, r0, r0
    4064:	00000064 	andeq	r0, r0, r4, rrx
    4068:	40080e41 	andmi	r0, r8, r1, asr #28
    406c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4070:	300e4101 	andcc	r4, lr, r1, lsl #2
    4074:	6d070d41 	stcvs	13, cr0, [r7, #-260]	; 0xfffffefc
    4078:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    407c:	0000000d 	andeq	r0, r0, sp
    4080:	00000024 	andeq	r0, r0, r4, lsr #32
    4084:	00003e68 	andeq	r3, r0, r8, ror #28
    4088:	00000000 	andeq	r0, r0, r0
    408c:	00000020 	andeq	r0, r0, r0, lsr #32
    4090:	40080e41 	andmi	r0, r8, r1, asr #28
    4094:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4098:	180e4101 	stmdane	lr, {r0, r8, lr}
    409c:	4b070d41 	blmi	1c75a8 <_Min_Stack_Size+0x1c73a8>
    40a0:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    40a4:	0000000d 	andeq	r0, r0, sp
    40a8:	00000024 	andeq	r0, r0, r4, lsr #32
    40ac:	00003e68 	andeq	r3, r0, r8, ror #28
    40b0:	00000000 	andeq	r0, r0, r0
    40b4:	0000002a 	andeq	r0, r0, sl, lsr #32
    40b8:	40080e41 	andmi	r0, r8, r1, asr #28
    40bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    40c0:	180e4101 	stmdane	lr, {r0, r8, lr}
    40c4:	50070d41 	andpl	r0, r7, r1, asr #26
    40c8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    40cc:	0000000d 	andeq	r0, r0, sp
    40d0:	00000024 	andeq	r0, r0, r4, lsr #32
    40d4:	00003e68 	andeq	r3, r0, r8, ror #28
    40d8:	00000000 	andeq	r0, r0, r0
    40dc:	0000001e 	andeq	r0, r0, lr, lsl r0
    40e0:	40040e41 	andmi	r0, r4, r1, asr #28
    40e4:	0e410187 	dvfeqd	f0, f1, f7
    40e8:	070d4118 	smladeq	sp, r8, r1, r4
    40ec:	41040e49 	tstmi	r4, r9, asr #28
    40f0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    40f4:	00000e40 	andeq	r0, r0, r0, asr #28
    40f8:	00000024 	andeq	r0, r0, r4, lsr #32
    40fc:	00003e68 	andeq	r3, r0, r8, ror #28
    4100:	00000000 	andeq	r0, r0, r0
    4104:	0000001a 	andeq	r0, r0, sl, lsl r0
    4108:	40080e41 	andmi	r0, r8, r1, asr #28
    410c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4110:	180e4101 	stmdane	lr, {r0, r8, lr}
    4114:	48070d41 	stmdami	r7, {r0, r6, r8, sl, fp}
    4118:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    411c:	0000000d 	andeq	r0, r0, sp
    4120:	00000024 	andeq	r0, r0, r4, lsr #32
    4124:	00003e68 	andeq	r3, r0, r8, ror #28
    4128:	080084a0 	stmdaeq	r0, {r5, r7, sl, pc}
    412c:	0000002e 	andeq	r0, r0, lr, lsr #32
    4130:	40040e41 	andmi	r0, r4, r1, asr #28
    4134:	0e410187 	dvfeqd	f0, f1, f7
    4138:	070d4118 	smladeq	sp, r8, r1, r4
    413c:	41040e51 	tstmi	r4, r1, asr lr
    4140:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    4144:	00000e40 	andeq	r0, r0, r0, asr #28
    4148:	00000024 	andeq	r0, r0, r4, lsr #32
    414c:	00003e68 	andeq	r3, r0, r8, ror #28
    4150:	080084d0 	stmdaeq	r0, {r4, r6, r7, sl, pc}
    4154:	000000d4 	ldrdeq	r0, [r0], -r4
    4158:	40080e41 	andmi	r0, r8, r1, asr #28
    415c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4160:	200e4101 	andcs	r4, lr, r1, lsl #2
    4164:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    4168:	41080e65 	tstmi	r8, r5, ror #28
    416c:	00000d0d 	andeq	r0, r0, sp, lsl #26
    4170:	00000024 	andeq	r0, r0, r4, lsr #32
    4174:	00003e68 	andeq	r3, r0, r8, ror #28
    4178:	00000000 	andeq	r0, r0, r0
    417c:	0000004c 	andeq	r0, r0, ip, asr #32
    4180:	40080e41 	andmi	r0, r8, r1, asr #28
    4184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4188:	100e4101 	andne	r4, lr, r1, lsl #2
    418c:	61070d41 	tstvs	r7, r1, asr #26
    4190:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    4194:	0000000d 	andeq	r0, r0, sp
    4198:	00000024 	andeq	r0, r0, r4, lsr #32
    419c:	00003e68 	andeq	r3, r0, r8, ror #28
    41a0:	080085a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, pc}
    41a4:	000000a4 	andeq	r0, r0, r4, lsr #1
    41a8:	40080e41 	andmi	r0, r8, r1, asr #28
    41ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    41b0:	180e4101 	stmdane	lr, {r0, r8, lr}
    41b4:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    41b8:	41080e4d 	tstmi	r8, sp, asr #28
    41bc:	00000d0d 	andeq	r0, r0, sp, lsl #26
    41c0:	00000024 	andeq	r0, r0, r4, lsr #32
    41c4:	00003e68 	andeq	r3, r0, r8, ror #28
    41c8:	08008648 	stmdaeq	r0, {r3, r6, r9, sl, pc}
    41cc:	0000002c 	andeq	r0, r0, ip, lsr #32
    41d0:	40080e41 	andmi	r0, r8, r1, asr #28
    41d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    41d8:	180e4101 	stmdane	lr, {r0, r8, lr}
    41dc:	51070d41 	tstpl	r7, r1, asr #26
    41e0:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    41e4:	0000000d 	andeq	r0, r0, sp
    41e8:	00000024 	andeq	r0, r0, r4, lsr #32
    41ec:	00003e68 	andeq	r3, r0, r8, ror #28
    41f0:	00000000 	andeq	r0, r0, r0
    41f4:	0000002a 	andeq	r0, r0, sl, lsr #32
    41f8:	40040e41 	andmi	r0, r4, r1, asr #28
    41fc:	0e410187 	dvfeqd	f0, f1, f7
    4200:	070d4118 	smladeq	sp, r8, r1, r4
    4204:	41040e4f 	tstmi	r4, pc, asr #28
    4208:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    420c:	00000e40 	andeq	r0, r0, r0, asr #28
    4210:	00000024 	andeq	r0, r0, r4, lsr #32
    4214:	00003e68 	andeq	r3, r0, r8, ror #28
    4218:	08008674 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, pc}
    421c:	00000030 	andeq	r0, r0, r0, lsr r0
    4220:	40080e41 	andmi	r0, r8, r1, asr #28
    4224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4228:	180e4101 	stmdane	lr, {r0, r8, lr}
    422c:	53070d41 	movwpl	r0, #32065	; 0x7d41
    4230:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    4234:	0000000d 	andeq	r0, r0, sp
    4238:	00000024 	andeq	r0, r0, r4, lsr #32
    423c:	00003e68 	andeq	r3, r0, r8, ror #28
    4240:	00000000 	andeq	r0, r0, r0
    4244:	0000002e 	andeq	r0, r0, lr, lsr #32
    4248:	40040e41 	andmi	r0, r4, r1, asr #28
    424c:	0e410187 	dvfeqd	f0, f1, f7
    4250:	070d4118 	smladeq	sp, r8, r1, r4
    4254:	41040e51 	tstmi	r4, r1, asr lr
    4258:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    425c:	00000e40 	andeq	r0, r0, r0, asr #28
    4260:	0000000c 	andeq	r0, r0, ip
    4264:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4268:	7c020001 	stcvc	0, cr0, [r2], {1}
    426c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4270:	00000024 	andeq	r0, r0, r4, lsr #32
    4274:	00004260 	andeq	r4, r0, r0, ror #4
    4278:	080086a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, pc}
    427c:	00000082 	andeq	r0, r0, r2, lsl #1
    4280:	40080e41 	andmi	r0, r8, r1, asr #28
    4284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4288:	380e4101 	stmdacc	lr, {r0, r8, lr}
    428c:	28070c41 	stmdacs	r7, {r0, r6, sl, fp}
    4290:	41080e7c 	tstmi	r8, ip, ror lr
    4294:	00000d0d 	andeq	r0, r0, sp, lsl #26
    4298:	00000024 	andeq	r0, r0, r4, lsr #32
    429c:	00004260 	andeq	r4, r0, r0, ror #4
    42a0:	08008728 	stmdaeq	r0, {r3, r5, r8, r9, sl, pc}
    42a4:	000000fe 	strdeq	r0, [r0], -lr
    42a8:	40080e41 	andmi	r0, r8, r1, asr #28
    42ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    42b0:	200e4101 	andcs	r4, lr, r1, lsl #2
    42b4:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    42b8:	41080e7a 	tstmi	r8, sl, ror lr
    42bc:	00000d0d 	andeq	r0, r0, sp, lsl #26
    42c0:	00000024 	andeq	r0, r0, r4, lsr #32
    42c4:	00004260 	andeq	r4, r0, r0, ror #4
    42c8:	08008828 	stmdaeq	r0, {r3, r5, fp, pc}
    42cc:	000000d4 	ldrdeq	r0, [r0], -r4
    42d0:	40080e41 	andmi	r0, r8, r1, asr #28
    42d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    42d8:	100e4101 	andne	r4, lr, r1, lsl #2
    42dc:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    42e0:	41080e57 	tstmi	r8, r7, asr lr
    42e4:	00000d0d 	andeq	r0, r0, sp, lsl #26
    42e8:	00000024 	andeq	r0, r0, r4, lsr #32
    42ec:	00004260 	andeq	r4, r0, r0, ror #4
    42f0:	00000000 	andeq	r0, r0, r0
    42f4:	000000a0 	andeq	r0, r0, r0, lsr #1
    42f8:	40080e41 	andmi	r0, r8, r1, asr #28
    42fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4300:	200e4101 	andcs	r4, lr, r1, lsl #2
    4304:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    4308:	41080e47 	tstmi	r8, r7, asr #28
    430c:	00000d0d 	andeq	r0, r0, sp, lsl #26
    4310:	00000024 	andeq	r0, r0, r4, lsr #32
    4314:	00004260 	andeq	r4, r0, r0, ror #4
    4318:	080088fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, pc}
    431c:	00000048 	andeq	r0, r0, r8, asr #32
    4320:	40080e41 	andmi	r0, r8, r1, asr #28
    4324:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4328:	180e4101 	stmdane	lr, {r0, r8, lr}
    432c:	5c070d41 	stcpl	13, cr0, [r7], {65}	; 0x41
    4330:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    4334:	0000000d 	andeq	r0, r0, sp
    4338:	00000024 	andeq	r0, r0, r4, lsr #32
    433c:	00004260 	andeq	r4, r0, r0, ror #4
    4340:	00000000 	andeq	r0, r0, r0
    4344:	00000034 	andeq	r0, r0, r4, lsr r0
    4348:	40080e41 	andmi	r0, r8, r1, asr #28
    434c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4350:	180e4101 	stmdane	lr, {r0, r8, lr}
    4354:	53070d41 	movwpl	r0, #32065	; 0x7d41
    4358:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    435c:	0000000d 	andeq	r0, r0, sp
    4360:	00000024 	andeq	r0, r0, r4, lsr #32
    4364:	00004260 	andeq	r4, r0, r0, ror #4
    4368:	00000000 	andeq	r0, r0, r0
    436c:	00000054 	andeq	r0, r0, r4, asr r0
    4370:	40040e41 	andmi	r0, r4, r1, asr #28
    4374:	0e410187 	dvfeqd	f0, f1, f7
    4378:	070d4128 	streq	r4, [sp, -r8, lsr #2]
    437c:	41040e62 	tstmi	r4, r2, ror #28
    4380:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    4384:	00000e40 	andeq	r0, r0, r0, asr #28
    4388:	00000024 	andeq	r0, r0, r4, lsr #32
    438c:	00004260 	andeq	r4, r0, r0, ror #4
    4390:	00000000 	andeq	r0, r0, r0
    4394:	00000138 	andeq	r0, r0, r8, lsr r1
    4398:	40080e41 	andmi	r0, r8, r1, asr #28
    439c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    43a0:	200e4101 	andcs	r4, lr, r1, lsl #2
    43a4:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    43a8:	41080e8e 	smlabbmi	r8, lr, lr, r0
    43ac:	00000d0d 	andeq	r0, r0, sp, lsl #26
    43b0:	00000024 	andeq	r0, r0, r4, lsr #32
    43b4:	00004260 	andeq	r4, r0, r0, ror #4
    43b8:	00000000 	andeq	r0, r0, r0
    43bc:	00000104 	andeq	r0, r0, r4, lsl #2
    43c0:	40080e41 	andmi	r0, r8, r1, asr #28
    43c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    43c8:	180e4101 	stmdane	lr, {r0, r8, lr}
    43cc:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    43d0:	41080e6e 	tstmi	r8, lr, ror #28
    43d4:	00000d0d 	andeq	r0, r0, sp, lsl #26
    43d8:	00000024 	andeq	r0, r0, r4, lsr #32
    43dc:	00004260 	andeq	r4, r0, r0, ror #4
    43e0:	00000000 	andeq	r0, r0, r0
    43e4:	00000044 	andeq	r0, r0, r4, asr #32
    43e8:	40040e41 	andmi	r0, r4, r1, asr #28
    43ec:	0e410187 	dvfeqd	f0, f1, f7
    43f0:	070d4118 	smladeq	sp, r8, r1, r4
    43f4:	41040e58 	tstmi	r4, r8, asr lr
    43f8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    43fc:	00000e40 	andeq	r0, r0, r0, asr #28
    4400:	00000024 	andeq	r0, r0, r4, lsr #32
    4404:	00004260 	andeq	r4, r0, r0, ror #4
    4408:	00000000 	andeq	r0, r0, r0
    440c:	000000a0 	andeq	r0, r0, r0, lsr #1
    4410:	40080e41 	andmi	r0, r8, r1, asr #28
    4414:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4418:	180e4101 	stmdane	lr, {r0, r8, lr}
    441c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    4420:	41080e42 	tstmi	r8, r2, asr #28
    4424:	00000d0d 	andeq	r0, r0, sp, lsl #26
    4428:	00000024 	andeq	r0, r0, r4, lsr #32
    442c:	00004260 	andeq	r4, r0, r0, ror #4
    4430:	00000000 	andeq	r0, r0, r0
    4434:	000000c0 	andeq	r0, r0, r0, asr #1
    4438:	40080e41 	andmi	r0, r8, r1, asr #28
    443c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4440:	280e4101 	stmdacs	lr, {r0, r8, lr}
    4444:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    4448:	41080e51 	tstmi	r8, r1, asr lr
    444c:	00000d0d 	andeq	r0, r0, sp, lsl #26
    4450:	00000024 	andeq	r0, r0, r4, lsr #32
    4454:	00004260 	andeq	r4, r0, r0, ror #4
    4458:	08008944 	stmdaeq	r0, {r2, r6, r8, fp, pc}
    445c:	0000006c 	andeq	r0, r0, ip, rrx
    4460:	40080e41 	andmi	r0, r8, r1, asr #28
    4464:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4468:	180e4101 	stmdane	lr, {r0, r8, lr}
    446c:	10070c41 	andne	r0, r7, r1, asr #24
    4470:	41080e65 	tstmi	r8, r5, ror #28
    4474:	00000d0d 	andeq	r0, r0, sp, lsl #26
    4478:	00000024 	andeq	r0, r0, r4, lsr #32
    447c:	00004260 	andeq	r4, r0, r0, ror #4
    4480:	00000000 	andeq	r0, r0, r0
    4484:	00000030 	andeq	r0, r0, r0, lsr r0
    4488:	40080e41 	andmi	r0, r8, r1, asr #28
    448c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4490:	100e4101 	andne	r4, lr, r1, lsl #2
    4494:	50070d41 	andpl	r0, r7, r1, asr #26
    4498:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    449c:	0000000d 	andeq	r0, r0, sp
    44a0:	00000020 	andeq	r0, r0, r0, lsr #32
    44a4:	00004260 	andeq	r4, r0, r0, ror #4
    44a8:	080089b0 	stmdaeq	r0, {r4, r5, r7, r8, fp, pc}
    44ac:	0000001c 	andeq	r0, r0, ip, lsl r0
    44b0:	40040e41 	andmi	r0, r4, r1, asr #28
    44b4:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    44b8:	0d0d4707 	stceq	7, cr4, [sp, #-28]	; 0xffffffe4
    44bc:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    44c0:	00000000 	andeq	r0, r0, r0
    44c4:	00000024 	andeq	r0, r0, r4, lsr #32
    44c8:	00004260 	andeq	r4, r0, r0, ror #4
    44cc:	080089cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp, pc}
    44d0:	0000011c 	andeq	r0, r0, ip, lsl r1
    44d4:	40080e41 	andmi	r0, r8, r1, asr #28
    44d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    44dc:	180e4101 	stmdane	lr, {r0, r8, lr}
    44e0:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    44e4:	41080e76 	tstmi	r8, r6, ror lr
    44e8:	00000d0d 	andeq	r0, r0, sp, lsl #26
    44ec:	00000024 	andeq	r0, r0, r4, lsr #32
    44f0:	00004260 	andeq	r4, r0, r0, ror #4
    44f4:	00000000 	andeq	r0, r0, r0
    44f8:	0000001c 	andeq	r0, r0, ip, lsl r0
    44fc:	40040e41 	andmi	r0, r4, r1, asr #28
    4500:	0e410187 	dvfeqd	f0, f1, f7
    4504:	070d4110 	smladeq	sp, r0, r1, r4
    4508:	41040e46 	tstmi	r4, r6, asr #28
    450c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    4510:	00000e40 	andeq	r0, r0, r0, asr #28
    4514:	00000024 	andeq	r0, r0, r4, lsr #32
    4518:	00004260 	andeq	r4, r0, r0, ror #4
    451c:	00000000 	andeq	r0, r0, r0
    4520:	00000020 	andeq	r0, r0, r0, lsr #32
    4524:	40040e41 	andmi	r0, r4, r1, asr #28
    4528:	0e410187 	dvfeqd	f0, f1, f7
    452c:	070d4110 	smladeq	sp, r0, r1, r4
    4530:	41040e48 	tstmi	r4, r8, asr #28
    4534:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    4538:	00000e40 	andeq	r0, r0, r0, asr #28
    453c:	00000020 	andeq	r0, r0, r0, lsr #32
    4540:	00004260 	andeq	r4, r0, r0, ror #4
    4544:	00000000 	andeq	r0, r0, r0
    4548:	00000014 	andeq	r0, r0, r4, lsl r0
    454c:	40040e41 	andmi	r0, r4, r1, asr #28
    4550:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    4554:	0d0d4407 	cfstrseq	mvf4, [sp, #-28]	; 0xffffffe4
    4558:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    455c:	00000000 	andeq	r0, r0, r0
    4560:	00000024 	andeq	r0, r0, r4, lsr #32
    4564:	00004260 	andeq	r4, r0, r0, ror #4
    4568:	00000000 	andeq	r0, r0, r0
    456c:	0000002c 	andeq	r0, r0, ip, lsr #32
    4570:	40040e41 	andmi	r0, r4, r1, asr #28
    4574:	0e410187 	dvfeqd	f0, f1, f7
    4578:	070d4118 	smladeq	sp, r8, r1, r4
    457c:	41040e4d 	tstmi	r4, sp, asr #28
    4580:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    4584:	00000e40 	andeq	r0, r0, r0, asr #28
    4588:	00000024 	andeq	r0, r0, r4, lsr #32
    458c:	00004260 	andeq	r4, r0, r0, ror #4
    4590:	08008ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, pc}
    4594:	00000150 	andeq	r0, r0, r0, asr r1
    4598:	40080e41 	andmi	r0, r8, r1, asr #28
    459c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    45a0:	200e4101 	andcs	r4, lr, r1, lsl #2
    45a4:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    45a8:	41080e8c 	smlabbmi	r8, ip, lr, r0
    45ac:	00000d0d 	andeq	r0, r0, sp, lsl #26
    45b0:	00000024 	andeq	r0, r0, r4, lsr #32
    45b4:	00004260 	andeq	r4, r0, r0, ror #4
    45b8:	08008c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, pc}
    45bc:	000000d8 	ldrdeq	r0, [r0], -r8
    45c0:	40080e41 	andmi	r0, r8, r1, asr #28
    45c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    45c8:	200e4101 	andcs	r4, lr, r1, lsl #2
    45cc:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    45d0:	41080e5c 	tstmi	r8, ip, asr lr
    45d4:	00000d0d 	andeq	r0, r0, sp, lsl #26
    45d8:	00000024 	andeq	r0, r0, r4, lsr #32
    45dc:	00004260 	andeq	r4, r0, r0, ror #4
    45e0:	08008d10 	stmdaeq	r0, {r4, r8, sl, fp, pc}
    45e4:	0000002c 	andeq	r0, r0, ip, lsr #32
    45e8:	40080e41 	andmi	r0, r8, r1, asr #28
    45ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    45f0:	100e4101 	andne	r4, lr, r1, lsl #2
    45f4:	4f070d41 	svcmi	0x00070d41
    45f8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    45fc:	0000000d 	andeq	r0, r0, sp
    4600:	00000024 	andeq	r0, r0, r4, lsr #32
    4604:	00004260 	andeq	r4, r0, r0, ror #4
    4608:	00000000 	andeq	r0, r0, r0
    460c:	0000003c 	andeq	r0, r0, ip, lsr r0
    4610:	40080e41 	andmi	r0, r8, r1, asr #28
    4614:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4618:	180e4101 	stmdane	lr, {r0, r8, lr}
    461c:	56070d41 	strpl	r0, [r7], -r1, asr #26
    4620:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    4624:	0000000d 	andeq	r0, r0, sp
    4628:	00000024 	andeq	r0, r0, r4, lsr #32
    462c:	00004260 	andeq	r4, r0, r0, ror #4
    4630:	08008d3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, fp, pc}
    4634:	000000a8 	andeq	r0, r0, r8, lsr #1
    4638:	40080e41 	andmi	r0, r8, r1, asr #28
    463c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4640:	180e4101 	stmdane	lr, {r0, r8, lr}
    4644:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    4648:	41080e43 	tstmi	r8, r3, asr #28
    464c:	00000d0d 	andeq	r0, r0, sp, lsl #26
    4650:	00000024 	andeq	r0, r0, r4, lsr #32
    4654:	00004260 	andeq	r4, r0, r0, ror #4
    4658:	00000000 	andeq	r0, r0, r0
    465c:	00000084 	andeq	r0, r0, r4, lsl #1
    4660:	40080e41 	andmi	r0, r8, r1, asr #28
    4664:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4668:	180e4101 	stmdane	lr, {r0, r8, lr}
    466c:	75070d41 	strvc	r0, [r7, #-3393]	; 0xfffff2bf
    4670:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    4674:	0000000d 	andeq	r0, r0, sp
    4678:	00000024 	andeq	r0, r0, r4, lsr #32
    467c:	00004260 	andeq	r4, r0, r0, ror #4
    4680:	00000000 	andeq	r0, r0, r0
    4684:	00000030 	andeq	r0, r0, r0, lsr r0
    4688:	40080e41 	andmi	r0, r8, r1, asr #28
    468c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4690:	100e4101 	andne	r4, lr, r1, lsl #2
    4694:	4f070d41 	svcmi	0x00070d41
    4698:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    469c:	0000000d 	andeq	r0, r0, sp
    46a0:	00000024 	andeq	r0, r0, r4, lsr #32
    46a4:	00004260 	andeq	r4, r0, r0, ror #4
    46a8:	08008de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, pc}
    46ac:	0000002c 	andeq	r0, r0, ip, lsr #32
    46b0:	40040e41 	andmi	r0, r4, r1, asr #28
    46b4:	0e410187 	dvfeqd	f0, f1, f7
    46b8:	070d4110 	smladeq	sp, r0, r1, r4
    46bc:	41040e4b 	tstmi	r4, fp, asr #28
    46c0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    46c4:	00000e40 	andeq	r0, r0, r0, asr #28
    46c8:	00000024 	andeq	r0, r0, r4, lsr #32
    46cc:	00004260 	andeq	r4, r0, r0, ror #4
    46d0:	08008e10 	stmdaeq	r0, {r4, r9, sl, fp, pc}
    46d4:	0000008c 	andeq	r0, r0, ip, lsl #1
    46d8:	40080e41 	andmi	r0, r8, r1, asr #28
    46dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    46e0:	200e4101 	andcs	r4, lr, r1, lsl #2
    46e4:	7d070d41 	stcvc	13, cr0, [r7, #-260]	; 0xfffffefc
    46e8:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    46ec:	0000000d 	andeq	r0, r0, sp
    46f0:	00000020 	andeq	r0, r0, r0, lsr #32
    46f4:	00004260 	andeq	r4, r0, r0, ror #4
    46f8:	08008e9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, fp, pc}
    46fc:	00000018 	andeq	r0, r0, r8, lsl r0
    4700:	40040e41 	andmi	r0, r4, r1, asr #28
    4704:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    4708:	0d0d4507 	cfstr32eq	mvfx4, [sp, #-28]	; 0xffffffe4
    470c:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    4710:	00000000 	andeq	r0, r0, r0
    4714:	0000001c 	andeq	r0, r0, ip, lsl r0
    4718:	00004260 	andeq	r4, r0, r0, ror #4
    471c:	08008eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, pc}
    4720:	00000030 	andeq	r0, r0, r0, lsr r0
    4724:	40080e41 	andmi	r0, r8, r1, asr #28
    4728:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    472c:	100e4101 	andne	r4, lr, r1, lsl #2
    4730:	00070d41 	andeq	r0, r7, r1, asr #26
    4734:	00000024 	andeq	r0, r0, r4, lsr #32
    4738:	00004260 	andeq	r4, r0, r0, ror #4
    473c:	08008ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, pc}
    4740:	00000074 	andeq	r0, r0, r4, ror r0
    4744:	40080e41 	andmi	r0, r8, r1, asr #28
    4748:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    474c:	100e4101 	andne	r4, lr, r1, lsl #2
    4750:	67070d41 	strvs	r0, [r7, -r1, asr #26]
    4754:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    4758:	0000000d 	andeq	r0, r0, sp
    475c:	00000020 	andeq	r0, r0, r0, lsr #32
    4760:	00004260 	andeq	r4, r0, r0, ror #4
    4764:	08008f58 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, fp, pc}
    4768:	0000000c 	andeq	r0, r0, ip
    476c:	40040e41 	andmi	r0, r4, r1, asr #28
    4770:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    4774:	0d0d4207 	sfmeq	f4, 4, [sp, #-28]	; 0xffffffe4
    4778:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    477c:	00000000 	andeq	r0, r0, r0
    4780:	00000024 	andeq	r0, r0, r4, lsr #32
    4784:	00004260 	andeq	r4, r0, r0, ror #4
    4788:	08008f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, pc}
    478c:	00000040 	andeq	r0, r0, r0, asr #32
    4790:	40040e41 	andmi	r0, r4, r1, asr #28
    4794:	0e410187 	dvfeqd	f0, f1, f7
    4798:	070d4110 	smladeq	sp, r0, r1, r4
    479c:	41040e55 	tstmi	r4, r5, asr lr
    47a0:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    47a4:	00000e40 	andeq	r0, r0, r0, asr #28
    47a8:	00000024 	andeq	r0, r0, r4, lsr #32
    47ac:	00004260 	andeq	r4, r0, r0, ror #4
    47b0:	00000000 	andeq	r0, r0, r0
    47b4:	0000001c 	andeq	r0, r0, ip, lsl r0
    47b8:	40040e41 	andmi	r0, r4, r1, asr #28
    47bc:	0e410187 	dvfeqd	f0, f1, f7
    47c0:	070d4110 	smladeq	sp, r0, r1, r4
    47c4:	41040e46 	tstmi	r4, r6, asr #28
    47c8:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    47cc:	00000e40 	andeq	r0, r0, r0, asr #28
    47d0:	00000024 	andeq	r0, r0, r4, lsr #32
    47d4:	00004260 	andeq	r4, r0, r0, ror #4
    47d8:	08008fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, pc}
    47dc:	00000100 	andeq	r0, r0, r0, lsl #2
    47e0:	40080e41 	andmi	r0, r8, r1, asr #28
    47e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    47e8:	180e4101 	stmdane	lr, {r0, r8, lr}
    47ec:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    47f0:	41080e75 	tstmi	r8, r5, ror lr
    47f4:	00000d0d 	andeq	r0, r0, sp, lsl #26
    47f8:	00000024 	andeq	r0, r0, r4, lsr #32
    47fc:	00004260 	andeq	r4, r0, r0, ror #4
    4800:	080090a4 	stmdaeq	r0, {r2, r5, r7, ip, pc}
    4804:	000000c8 	andeq	r0, r0, r8, asr #1
    4808:	40080e41 	andmi	r0, r8, r1, asr #28
    480c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4810:	180e4101 	stmdane	lr, {r0, r8, lr}
    4814:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    4818:	41080e5b 	tstmi	r8, fp, asr lr
    481c:	00000d0d 	andeq	r0, r0, sp, lsl #26
    4820:	00000024 	andeq	r0, r0, r4, lsr #32
    4824:	00004260 	andeq	r4, r0, r0, ror #4
    4828:	0800916c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip, pc}
    482c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4830:	40080e41 	andmi	r0, r8, r1, asr #28
    4834:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4838:	200e4101 	andcs	r4, lr, r1, lsl #2
    483c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    4840:	41080e6f 	tstmi	r8, pc, ror #28
    4844:	00000d0d 	andeq	r0, r0, sp, lsl #26
    4848:	00000024 	andeq	r0, r0, r4, lsr #32
    484c:	00004260 	andeq	r4, r0, r0, ror #4
    4850:	00000000 	andeq	r0, r0, r0
    4854:	00000030 	andeq	r0, r0, r0, lsr r0
    4858:	40040e41 	andmi	r0, r4, r1, asr #28
    485c:	0e410187 	dvfeqd	f0, f1, f7
    4860:	070d4110 	smladeq	sp, r0, r1, r4
    4864:	41040e4f 	tstmi	r4, pc, asr #28
    4868:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    486c:	00000e40 	andeq	r0, r0, r0, asr #28
    4870:	00000020 	andeq	r0, r0, r0, lsr #32
    4874:	00004260 	andeq	r4, r0, r0, ror #4
    4878:	0800925c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, pc}
    487c:	00000028 	andeq	r0, r0, r8, lsr #32
    4880:	40040e41 	andmi	r0, r4, r1, asr #28
    4884:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    4888:	0d0d4d07 	stceq	13, cr4, [sp, #-28]	; 0xffffffe4
    488c:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    4890:	00000000 	andeq	r0, r0, r0
    4894:	00000024 	andeq	r0, r0, r4, lsr #32
    4898:	00004260 	andeq	r4, r0, r0, ror #4
    489c:	00000000 	andeq	r0, r0, r0
    48a0:	00000090 	muleq	r0, r0, r0
    48a4:	40080e41 	andmi	r0, r8, r1, asr #28
    48a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    48ac:	180e4101 	stmdane	lr, {r0, r8, lr}
    48b0:	7f070d41 	svcvc	0x00070d41
    48b4:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    48b8:	0000000d 	andeq	r0, r0, sp
    48bc:	00000024 	andeq	r0, r0, r4, lsr #32
    48c0:	00004260 	andeq	r4, r0, r0, ror #4
    48c4:	00000000 	andeq	r0, r0, r0
    48c8:	000000b4 	strheq	r0, [r0], -r4
    48cc:	40080e41 	andmi	r0, r8, r1, asr #28
    48d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    48d4:	200e4101 	andcs	r4, lr, r1, lsl #2
    48d8:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    48dc:	41080e51 	tstmi	r8, r1, asr lr
    48e0:	00000d0d 	andeq	r0, r0, sp, lsl #26
    48e4:	00000024 	andeq	r0, r0, r4, lsr #32
    48e8:	00004260 	andeq	r4, r0, r0, ror #4
    48ec:	00000000 	andeq	r0, r0, r0
    48f0:	00000110 	andeq	r0, r0, r0, lsl r1
    48f4:	40080e41 	andmi	r0, r8, r1, asr #28
    48f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    48fc:	280e4101 	stmdacs	lr, {r0, r8, lr}
    4900:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    4904:	41080e7a 	tstmi	r8, sl, ror lr
    4908:	00000d0d 	andeq	r0, r0, sp, lsl #26
    490c:	00000024 	andeq	r0, r0, r4, lsr #32
    4910:	00004260 	andeq	r4, r0, r0, ror #4
    4914:	00000000 	andeq	r0, r0, r0
    4918:	0000014c 	andeq	r0, r0, ip, asr #2
    491c:	40080e41 	andmi	r0, r8, r1, asr #28
    4920:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4924:	380e4101 	stmdacc	lr, {r0, r8, lr}
    4928:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    492c:	41080e95 			; <UNDEFINED> instruction: 0x41080e95
    4930:	00000d0d 	andeq	r0, r0, sp, lsl #26
    4934:	00000024 	andeq	r0, r0, r4, lsr #32
    4938:	00004260 	andeq	r4, r0, r0, ror #4
    493c:	00000000 	andeq	r0, r0, r0
    4940:	000000e4 	andeq	r0, r0, r4, ror #1
    4944:	40080e41 	andmi	r0, r8, r1, asr #28
    4948:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    494c:	280e4101 	stmdacs	lr, {r0, r8, lr}
    4950:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    4954:	41080e60 	tstmi	r8, r0, ror #28
    4958:	00000d0d 	andeq	r0, r0, sp, lsl #26
    495c:	00000024 	andeq	r0, r0, r4, lsr #32
    4960:	00004260 	andeq	r4, r0, r0, ror #4
    4964:	00000000 	andeq	r0, r0, r0
    4968:	0000004c 	andeq	r0, r0, ip, asr #32
    496c:	40080e41 	andmi	r0, r8, r1, asr #28
    4970:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4974:	180e4101 	stmdane	lr, {r0, r8, lr}
    4978:	5f070d41 	svcpl	0x00070d41
    497c:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    4980:	0000000d 	andeq	r0, r0, sp
    4984:	00000024 	andeq	r0, r0, r4, lsr #32
    4988:	00004260 	andeq	r4, r0, r0, ror #4
    498c:	08009284 	stmdaeq	r0, {r2, r7, r9, ip, pc}
    4990:	000000cc 	andeq	r0, r0, ip, asr #1
    4994:	40080e41 	andmi	r0, r8, r1, asr #28
    4998:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    499c:	180e4101 	stmdane	lr, {r0, r8, lr}
    49a0:	02070d41 	andeq	r0, r7, #4160	; 0x1040
    49a4:	41080e52 	tstmi	r8, r2, asr lr
    49a8:	00000d0d 	andeq	r0, r0, sp, lsl #26
    49ac:	0000000c 	andeq	r0, r0, ip
    49b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    49b4:	7c020001 	stcvc	0, cr0, [r2], {1}
    49b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    49bc:	00000024 	andeq	r0, r0, r4, lsr #32
    49c0:	000049ac 	andeq	r4, r0, ip, lsr #19
    49c4:	08009350 	stmdaeq	r0, {r4, r6, r8, r9, ip, pc}
    49c8:	00000058 	andeq	r0, r0, r8, asr r0
    49cc:	40040e41 	andmi	r0, r4, r1, asr #28
    49d0:	0e410187 	dvfeqd	f0, f1, f7
    49d4:	070d4118 	smladeq	sp, r8, r1, r4
    49d8:	41040e64 	tstmi	r4, r4, ror #28
    49dc:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    49e0:	00000e40 	andeq	r0, r0, r0, asr #28
    49e4:	00000024 	andeq	r0, r0, r4, lsr #32
    49e8:	000049ac 	andeq	r4, r0, ip, lsr #19
    49ec:	080093a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, ip, pc}
    49f0:	0000002e 	andeq	r0, r0, lr, lsr #32
    49f4:	40040e41 	andmi	r0, r4, r1, asr #28
    49f8:	0e410187 	dvfeqd	f0, f1, f7
    49fc:	070d4110 	smladeq	sp, r0, r1, r4
    4a00:	41040e51 	tstmi	r4, r1, asr lr
    4a04:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    4a08:	00000e40 	andeq	r0, r0, r0, asr #28
    4a0c:	0000000c 	andeq	r0, r0, ip
    4a10:	000049ac 	andeq	r4, r0, ip, lsr #19
    4a14:	080093e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip, pc}
    4a18:	00000026 	andeq	r0, r0, r6, lsr #32
    4a1c:	0000000c 	andeq	r0, r0, ip
    4a20:	000049ac 	andeq	r4, r0, ip, lsr #19
    4a24:	08009408 	stmdaeq	r0, {r3, sl, ip, pc}
    4a28:	0000001c 	andeq	r0, r0, ip, lsl r0
    4a2c:	00000018 	andeq	r0, r0, r8, lsl r0
    4a30:	000049ac 	andeq	r4, r0, ip, lsr #19
    4a34:	08009428 	stmdaeq	r0, {r3, r5, sl, ip, pc}
    4a38:	00000040 	andeq	r0, r0, r0, asr #32
    4a3c:	40080e41 	andmi	r0, r8, r1, asr #28
    4a40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4a44:	070d4101 	streq	r4, [sp, -r1, lsl #2]
    4a48:	00000020 	andeq	r0, r0, r0, lsr #32
    4a4c:	000049ac 	andeq	r4, r0, ip, lsr #19
    4a50:	00000000 	andeq	r0, r0, r0
    4a54:	0000000c 	andeq	r0, r0, ip
    4a58:	40040e41 	andmi	r0, r4, r1, asr #28
    4a5c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    4a60:	0d0d4207 	sfmeq	f4, 4, [sp, #-28]	; 0xffffffe4
    4a64:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    4a68:	00000000 	andeq	r0, r0, r0
    4a6c:	00000024 	andeq	r0, r0, r4, lsr #32
    4a70:	000049ac 	andeq	r4, r0, ip, lsr #19
    4a74:	08009468 	stmdaeq	r0, {r3, r5, r6, sl, ip, pc}
    4a78:	00000030 	andeq	r0, r0, r0, lsr r0
    4a7c:	40040e41 	andmi	r0, r4, r1, asr #28
    4a80:	0e410187 	dvfeqd	f0, f1, f7
    4a84:	070d4110 	smladeq	sp, r0, r1, r4
    4a88:	41040e50 	tstmi	r4, r0, asr lr
    4a8c:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    4a90:	00000e40 	andeq	r0, r0, r0, asr #28
    4a94:	00000024 	andeq	r0, r0, r4, lsr #32
    4a98:	000049ac 	andeq	r4, r0, ip, lsr #19
    4a9c:	08009498 	stmdaeq	r0, {r3, r4, r7, sl, ip, pc}
    4aa0:	00000030 	andeq	r0, r0, r0, lsr r0
    4aa4:	40040e41 	andmi	r0, r4, r1, asr #28
    4aa8:	0e410187 	dvfeqd	f0, f1, f7
    4aac:	070d4110 	smladeq	sp, r0, r1, r4
    4ab0:	41040e50 	tstmi	r4, r0, asr lr
    4ab4:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    4ab8:	00000e40 	andeq	r0, r0, r0, asr #28
    4abc:	0000000c 	andeq	r0, r0, ip
    4ac0:	000049ac 	andeq	r4, r0, ip, lsr #19
    4ac4:	080094d0 	stmdaeq	r0, {r4, r6, r7, sl, ip, pc}
    4ac8:	00000046 	andeq	r0, r0, r6, asr #32
    4acc:	00000024 	andeq	r0, r0, r4, lsr #32
    4ad0:	000049ac 	andeq	r4, r0, ip, lsr #19
    4ad4:	08009518 	stmdaeq	r0, {r3, r4, r8, sl, ip, pc}
    4ad8:	00000040 	andeq	r0, r0, r0, asr #32
    4adc:	40080e41 	andmi	r0, r8, r1, asr #28
    4ae0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4ae4:	100e4101 	andne	r4, lr, r1, lsl #2
    4ae8:	59070d41 	stmdbpl	r7, {r0, r6, r8, sl, fp}
    4aec:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    4af0:	0000000d 	andeq	r0, r0, sp
    4af4:	00000020 	andeq	r0, r0, r0, lsr #32
    4af8:	000049ac 	andeq	r4, r0, ip, lsr #19
    4afc:	08009558 	stmdaeq	r0, {r3, r4, r6, r8, sl, ip, pc}
    4b00:	00000034 	andeq	r0, r0, r4, lsr r0
    4b04:	40040e41 	andmi	r0, r4, r1, asr #28
    4b08:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    4b0c:	0d0d4e07 	stceq	14, cr4, [sp, #-28]	; 0xffffffe4
    4b10:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    4b14:	00000000 	andeq	r0, r0, r0
    4b18:	0000000c 	andeq	r0, r0, ip
    4b1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4b20:	7c020001 	stcvc	0, cr0, [r2], {1}
    4b24:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4b28:	00000024 	andeq	r0, r0, r4, lsr #32
    4b2c:	00004b18 	andeq	r4, r0, r8, lsl fp
    4b30:	0800958c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip, pc}
    4b34:	0000008c 	andeq	r0, r0, ip, lsl #1
    4b38:	40080e41 	andmi	r0, r8, r1, asr #28
    4b3c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    4b40:	180e4101 	stmdane	lr, {r0, r8, lr}
    4b44:	7a070d41 	bvc	1c8050 <_Min_Stack_Size+0x1c7e50>
    4b48:	0d41080e 	stcleq	8, cr0, [r1, #-56]	; 0xffffffc8
    4b4c:	0000000d 	andeq	r0, r0, sp
    4b50:	00000024 	andeq	r0, r0, r4, lsr #32
    4b54:	00004b18 	andeq	r4, r0, r8, lsl fp
    4b58:	08009618 	stmdaeq	r0, {r3, r4, r9, sl, ip, pc}
    4b5c:	00000012 	andeq	r0, r0, r2, lsl r0
    4b60:	40040e41 	andmi	r0, r4, r1, asr #28
    4b64:	0e410187 	dvfeqd	f0, f1, f7
    4b68:	070d4110 	smladeq	sp, r0, r1, r4
    4b6c:	41040e43 	tstmi	r4, r3, asr #28
    4b70:	c7410d0d 	strbgt	r0, [r1, -sp, lsl #26]
    4b74:	00000e40 	andeq	r0, r0, r0, asr #28
    4b78:	00000020 	andeq	r0, r0, r0, lsr #32
    4b7c:	00004b18 	andeq	r4, r0, r8, lsl fp
    4b80:	00000000 	andeq	r0, r0, r0
    4b84:	00000018 	andeq	r0, r0, r8, lsl r0
    4b88:	40040e41 	andmi	r0, r4, r1, asr #28
    4b8c:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    4b90:	0d0d4507 	cfstr32eq	mvfx4, [sp, #-28]	; 0xffffffe4
    4b94:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    4b98:	00000000 	andeq	r0, r0, r0
    4b9c:	00000020 	andeq	r0, r0, r0, lsr #32
    4ba0:	00004b18 	andeq	r4, r0, r8, lsl fp
    4ba4:	00000000 	andeq	r0, r0, r0
    4ba8:	0000001c 	andeq	r0, r0, ip, lsl r0
    4bac:	40040e41 	andmi	r0, r4, r1, asr #28
    4bb0:	0d410187 	stfeqe	f0, [r1, #-540]	; 0xfffffde4
    4bb4:	0d0d4707 	stceq	7, cr4, [sp, #-28]	; 0xffffffe4
    4bb8:	0e40c741 	cdpeq	7, 4, cr12, cr0, cr1, {2}
    4bbc:	00000000 	andeq	r0, r0, r0
    4bc0:	0000000c 	andeq	r0, r0, ip
    4bc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4bc8:	7c020001 	stcvc	0, cr0, [r2], {1}
    4bcc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4bd0:	00000020 	andeq	r0, r0, r0, lsr #32
    4bd4:	00004bc0 	andeq	r4, r0, r0, asr #23
    4bd8:	080001fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8}
    4bdc:	0000009a 	muleq	r0, sl, r0
    4be0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    4be4:	86028503 	strhi	r8, [r2], -r3, lsl #10
    4be8:	0a480201 	beq	12053f4 <_Min_Stack_Size+0x12051f4>
    4bec:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    4bf0:	000b4100 	andeq	r4, fp, r0, lsl #2
    4bf4:	0000000c 	andeq	r0, r0, ip
    4bf8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4bfc:	7c020001 	stcvc	0, cr0, [r2], {1}
    4c00:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4c04:	00000020 	andeq	r0, r0, r0, lsr #32
    4c08:	00004bf4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    4c0c:	08000298 	stmdaeq	r0, {r3, r4, r7, r9}
    4c10:	00000064 	andeq	r0, r0, r4, rrx
    4c14:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
    4c18:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
    4c1c:	87058606 	strhi	r8, [r5, -r6, lsl #12]
    4c20:	89038804 	stmdbhi	r3, {r2, fp, pc}
    4c24:	00018e02 	andeq	r8, r1, r2, lsl #28
    4c28:	00000020 	andeq	r0, r0, r0, lsr #32
    4c2c:	00004bf4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    4c30:	080002fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9}
    4c34:	000000a0 	andeq	r0, r0, r0, lsr #1
    4c38:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
    4c3c:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
    4c40:	87058606 	strhi	r8, [r5, -r6, lsl #12]
    4c44:	89038804 	stmdbhi	r3, {r2, fp, pc}
    4c48:	00018e02 	andeq	r8, r1, r2, lsl #28
    4c4c:	0000000c 	andeq	r0, r0, ip
    4c50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4c54:	7c020001 	stcvc	0, cr0, [r2], {1}
    4c58:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4c5c:	00000058 	andeq	r0, r0, r8, asr r0
    4c60:	00004c4c 	andeq	r4, r0, ip, asr #24
    4c64:	0800039c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9}
    4c68:	0000008c 	andeq	r0, r0, ip, lsl #1
    4c6c:	83040e41 	movwhi	r0, #20033	; 0x4e41
    4c70:	180e4101 	stmdane	lr, {r0, r8, lr}
    4c74:	05850684 	streq	r0, [r5, #1668]	; 0x684
    4c78:	03870486 	orreq	r0, r7, #-2046820352	; 0x86000000
    4c7c:	0e42028e 	cdpeq	2, 4, cr0, cr2, cr14, {4}
    4c80:	0a5e0188 	beq	17852a8 <_Min_Stack_Size+0x17850a8>
    4c84:	c442180e 	strbgt	r1, [r2], #-2062	; 0xfffff7f2
    4c88:	cec7c6c5 	cdpgt	6, 12, cr12, cr7, cr5, {6}
    4c8c:	c341040e 	movtgt	r0, #5134	; 0x140e
    4c90:	0b41000e 	bleq	1044cd0 <_Min_Stack_Size+0x1044ad0>
    4c94:	180e0a4d 	stmdane	lr, {r0, r2, r3, r6, r9, fp}
    4c98:	c6c7ce42 	strbgt	ip, [r7], r2, asr #28
    4c9c:	040ec4c5 	streq	ip, [lr], #-1221	; 0xfffffb3b
    4ca0:	000ec341 	andeq	ip, lr, r1, asr #6
    4ca4:	0a460b41 	beq	11879b0 <_Min_Stack_Size+0x11877b0>
    4ca8:	c442180e 	strbgt	r1, [r2], #-2062	; 0xfffff7f2
    4cac:	cec7c6c5 	cdpgt	6, 12, cr12, cr7, cr5, {6}
    4cb0:	c341040e 	movtgt	r0, #5134	; 0x140e
    4cb4:	0b41000e 	bleq	1044cf4 <_Min_Stack_Size+0x1044af4>
    4cb8:	00000060 	andeq	r0, r0, r0, rrx
    4cbc:	00004c4c 	andeq	r4, r0, ip, asr #24
    4cc0:	08000428 	stmdaeq	r0, {r3, r5, sl}
    4cc4:	00000098 	muleq	r0, r8, r0
    4cc8:	82080e41 	andhi	r0, r8, #1040	; 0x410
    4ccc:	41018302 	tstmi	r1, r2, lsl #6
    4cd0:	07841c0e 	streq	r1, [r4, lr, lsl #24]
    4cd4:	05860685 	streq	r0, [r6, #1669]	; 0x685
    4cd8:	038e0487 	orreq	r0, lr, #-2030043136	; 0x87000000
    4cdc:	01900e43 	orrseq	r0, r0, r3, asr #28
    4ce0:	1c0e0a5f 			; <UNDEFINED> instruction: 0x1c0e0a5f
    4ce4:	c6c5c442 	strbgt	ip, [r5], r2, asr #8
    4ce8:	080ecec7 	stmdaeq	lr, {r0, r1, r2, r6, r7, r9, sl, fp, lr, pc}
    4cec:	0ec3c241 	cdpeq	2, 12, cr12, cr3, cr1, {2}
    4cf0:	4e0b4100 	adfmie	f4, f3, f0
    4cf4:	421c0e0a 	andsmi	r0, ip, #10, 28	; 0xa0
    4cf8:	c5c6c7ce 	strbgt	ip, [r6, #1998]	; 0x7ce
    4cfc:	41080ec4 	smlabtmi	r8, r4, lr, r0
    4d00:	000ec2c3 	andeq	ip, lr, r3, asr #5
    4d04:	0a460b41 	beq	1187a10 <_Min_Stack_Size+0x1187810>
    4d08:	c4421c0e 	strbgt	r1, [r2], #-3086	; 0xfffff3f2
    4d0c:	cec7c6c5 	cdpgt	6, 12, cr12, cr7, cr5, {6}
    4d10:	c241080e 	subgt	r0, r1, #917504	; 0xe0000
    4d14:	41000ec3 	smlabtmi	r0, r3, lr, r0
    4d18:	0000000b 	andeq	r0, r0, fp
    4d1c:	0000000c 	andeq	r0, r0, ip
    4d20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4d24:	7c020001 	stcvc	0, cr0, [r2], {1}
    4d28:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4d2c:	00000038 	andeq	r0, r0, r8, lsr r0
    4d30:	00004d1c 	andeq	r4, r0, ip, lsl sp
    4d34:	080004c0 	stmdaeq	r0, {r6, r7, sl}
    4d38:	000000ce 	andeq	r0, r0, lr, asr #1
    4d3c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    4d40:	86028503 	strhi	r8, [r2], -r3, lsl #10
    4d44:	c60a7701 	strgt	r7, [sl], -r1, lsl #14
    4d48:	000ec4c5 	andeq	ip, lr, r5, asr #9
    4d4c:	0a670b41 	beq	19c7a58 <_Min_Stack_Size+0x19c7858>
    4d50:	0ec6c5c4 	cdpeq	5, 12, cr12, cr6, cr4, {6}
    4d54:	420b4100 	andmi	r4, fp, #0, 2
    4d58:	c6c5c40a 	strbgt	ip, [r5], sl, lsl #8
    4d5c:	0b41000e 	bleq	1044d9c <_Min_Stack_Size+0x1044b9c>
    4d60:	c6c5c442 	strbgt	ip, [r5], r2, asr #8
    4d64:	0000000e 	andeq	r0, r0, lr
    4d68:	0000000c 	andeq	r0, r0, ip
    4d6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4d70:	7c020001 	stcvc	0, cr0, [r2], {1}
    4d74:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4d78:	0000000c 	andeq	r0, r0, ip
    4d7c:	00004d68 	andeq	r4, r0, r8, ror #26
    4d80:	08000590 	stmdaeq	r0, {r4, r7, r8, sl}
    4d84:	000000ba 	strheq	r0, [r0], -sl
    4d88:	0000000c 	andeq	r0, r0, ip
    4d8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4d90:	7c020001 	stcvc	0, cr0, [r2], {1}
    4d94:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4d98:	0000000c 	andeq	r0, r0, ip
    4d9c:	00004d88 	andeq	r4, r0, r8, lsl #27
    4da0:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
    4da4:	0000005c 	andeq	r0, r0, ip, asr r0
    4da8:	0000000c 	andeq	r0, r0, ip
    4dac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4db0:	7c020001 	stcvc	0, cr0, [r2], {1}
    4db4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4db8:	00000040 	andeq	r0, r0, r0, asr #32
    4dbc:	00004da8 	andeq	r4, r0, r8, lsr #27
    4dc0:	080006a8 	stmdaeq	r0, {r3, r5, r7, r9, sl}
    4dc4:	0000009c 	muleq	r0, ip, r0
    4dc8:	84100e47 	ldrhi	r0, [r0], #-3655	; 0xfffff1b9
    4dcc:	86038504 	strhi	r8, [r3], -r4, lsl #10
    4dd0:	7a018702 	bvc	669e0 <_Min_Stack_Size+0x667e0>
    4dd4:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
    4dd8:	0e43000e 	cdpeq	0, 4, cr0, cr3, cr14, {0}
    4ddc:	85048410 	strhi	r8, [r4, #-1040]	; 0xfffffbf0
    4de0:	87028603 	strhi	r8, [r2, -r3, lsl #12]
    4de4:	c40a4201 	strgt	r4, [sl], #-513	; 0xfffffdff
    4de8:	0ec7c6c5 	cdpeq	6, 12, cr12, cr7, cr5, {6}
    4dec:	420b4100 	andmi	r4, fp, #0, 2
    4df0:	c6c5c40a 	strbgt	ip, [r5], sl, lsl #8
    4df4:	41000ec7 	smlabtmi	r0, r7, lr, r0
    4df8:	0000000b 	andeq	r0, r0, fp
    4dfc:	0000000c 	andeq	r0, r0, ip
    4e00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4e04:	7c020001 	stcvc	0, cr0, [r2], {1}
    4e08:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4e0c:	00000020 	andeq	r0, r0, r0, lsr #32
    4e10:	00004dfc 	strdeq	r4, [r0], -ip
    4e14:	08000744 	stmdaeq	r0, {r2, r6, r8, r9, sl}
    4e18:	00000066 	andeq	r0, r0, r6, rrx
    4e1c:	840c0e44 	strhi	r0, [ip], #-3652	; 0xfffff1bc
    4e20:	86028503 	strhi	r8, [r2], -r3, lsl #10
    4e24:	c60a6c01 	strgt	r6, [sl], -r1, lsl #24
    4e28:	000ec4c5 	andeq	ip, lr, r5, asr #9
    4e2c:	00000b41 	andeq	r0, r0, r1, asr #22
    4e30:	0000000c 	andeq	r0, r0, ip
    4e34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4e38:	7c020001 	stcvc	0, cr0, [r2], {1}
    4e3c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4e40:	0000000c 	andeq	r0, r0, ip
    4e44:	00004e30 	andeq	r4, r0, r0, lsr lr
    4e48:	080007ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl}
    4e4c:	00000010 	andeq	r0, r0, r0, lsl r0
    4e50:	0000000c 	andeq	r0, r0, ip
    4e54:	00004e30 	andeq	r4, r0, r0, lsr lr
    4e58:	080007bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl}
    4e5c:	00000010 	andeq	r0, r0, r0, lsl r0
    4e60:	0000000c 	andeq	r0, r0, ip
    4e64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4e68:	7c020001 	stcvc	0, cr0, [r2], {1}
    4e6c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4e70:	0000002c 	andeq	r0, r0, ip, lsr #32
    4e74:	00004e60 	andeq	r4, r0, r0, ror #28
    4e78:	080007cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl}
    4e7c:	0000008c 	andeq	r0, r0, ip, lsl #1
    4e80:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    4e84:	53018502 	movwpl	r8, #5378	; 0x1502
    4e88:	0ec4c50a 	cdpeq	5, 12, cr12, cr4, cr10, {0}
    4e8c:	500b4100 	andpl	r4, fp, r0, lsl #2
    4e90:	0ec5c40a 	cdpeq	4, 12, cr12, cr5, cr10, {0}
    4e94:	430b4300 	movwmi	r4, #45824	; 0xb300
    4e98:	0ec5c40a 	cdpeq	4, 12, cr12, cr5, cr10, {0}
    4e9c:	000b4100 	andeq	r4, fp, r0, lsl #2
    4ea0:	0000000c 	andeq	r0, r0, ip
    4ea4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4ea8:	7c020001 	stcvc	0, cr0, [r2], {1}
    4eac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4eb0:	00000018 	andeq	r0, r0, r8, lsl r0
    4eb4:	00004ea0 	andeq	r4, r0, r0, lsr #29
    4eb8:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
    4ebc:	000000bc 	strheq	r0, [r0], -ip
    4ec0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    4ec4:	86038504 	strhi	r8, [r3], -r4, lsl #10
    4ec8:	00018e02 	andeq	r8, r1, r2, lsl #28
    4ecc:	0000000c 	andeq	r0, r0, ip
    4ed0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4ed4:	7c020001 	stcvc	0, cr0, [r2], {1}
    4ed8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4edc:	00000024 	andeq	r0, r0, r4, lsr #32
    4ee0:	00004ecc 	andeq	r4, r0, ip, asr #29
    4ee4:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
    4ee8:	000000c6 	andeq	r0, r0, r6, asr #1
    4eec:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
    4ef0:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
    4ef4:	87078608 	strhi	r8, [r7, -r8, lsl #12]
    4ef8:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
    4efc:	8b038a04 	blhi	e7714 <_Min_Stack_Size+0xe7514>
    4f00:	00018e02 	andeq	r8, r1, r2, lsl #28
    4f04:	00000030 	andeq	r0, r0, r0, lsr r0
    4f08:	00004ecc 	andeq	r4, r0, ip, asr #29
    4f0c:	080009dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp}
    4f10:	00000100 	andeq	r0, r0, r0, lsl #2
    4f14:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    4f18:	86088509 	strhi	r8, [r8], -r9, lsl #10
    4f1c:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    4f20:	8a048905 	bhi	12733c <_Min_Stack_Size+0x12713c>
    4f24:	8e028b03 	vmlahi.f64	d8, d2, d3
    4f28:	300e4201 	andcc	r4, lr, r1, lsl #4
    4f2c:	0e0a7402 	cdpeq	4, 0, cr7, cr10, cr2, {0}
    4f30:	440b4224 	strmi	r4, [fp], #-548	; 0xfffffddc
    4f34:	0000240e 	andeq	r2, r0, lr, lsl #8
    4f38:	0000002c 	andeq	r0, r0, ip, lsr #32
    4f3c:	00004ecc 	andeq	r4, r0, ip, asr #29
    4f40:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
    4f44:	0000023c 	andeq	r0, r0, ip, lsr r2
    4f48:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    4f4c:	86088509 	strhi	r8, [r8], -r9, lsl #10
    4f50:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    4f54:	8a048905 	bhi	127370 <_Min_Stack_Size+0x127170>
    4f58:	8e028b03 	vmlahi.f64	d8, d2, d3
    4f5c:	980e4301 	stmdals	lr, {r0, r8, r9, lr}
    4f60:	0aac0201 	beq	feb0576c <BootRAM+0xda75f0d>
    4f64:	0b42240e 	bleq	108dfa4 <_Min_Stack_Size+0x108dda4>
    4f68:	0000000c 	andeq	r0, r0, ip
    4f6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4f70:	7c020001 	stcvc	0, cr0, [r2], {1}
    4f74:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4f78:	00000020 	andeq	r0, r0, r0, lsr #32
    4f7c:	00004f68 	andeq	r4, r0, r8, ror #30
    4f80:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
    4f84:	00000132 	andeq	r0, r0, r2, lsr r1
    4f88:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
    4f8c:	86078508 	strhi	r8, [r7], -r8, lsl #10
    4f90:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    4f94:	8a038904 	bhi	e73ac <_Min_Stack_Size+0xe71ac>
    4f98:	00018e02 	andeq	r8, r1, r2, lsl #28
    4f9c:	00000030 	andeq	r0, r0, r0, lsr r0
    4fa0:	00004f68 	andeq	r4, r0, r8, ror #30
    4fa4:	08000e4c 	stmdaeq	r0, {r2, r3, r6, r9, sl, fp}
    4fa8:	000002a8 	andeq	r0, r0, r8, lsr #5
    4fac:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xfffff1be
    4fb0:	86068507 	strhi	r8, [r6], -r7, lsl #10
    4fb4:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    4fb8:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
    4fbc:	300e4301 	andcc	r4, lr, r1, lsl #6
    4fc0:	0e0a9f02 	cdpeq	15, 0, cr9, cr10, cr2, {0}
    4fc4:	440b421c 	strmi	r4, [fp], #-540	; 0xfffffde4
    4fc8:	421c0e0a 	andsmi	r0, ip, #10, 28	; 0xa0
    4fcc:	0000000b 	andeq	r0, r0, fp
    4fd0:	0000000c 	andeq	r0, r0, ip
    4fd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    4fd8:	7c020001 	stcvc	0, cr0, [r2], {1}
    4fdc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    4fe0:	00000018 	andeq	r0, r0, r8, lsl r0
    4fe4:	00004fd0 	ldrdeq	r4, [r0], -r0
    4fe8:	080010f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, ip}
    4fec:	00000024 	andeq	r0, r0, r4, lsr #32
    4ff0:	83100e41 	tsthi	r0, #1040	; 0x410
    4ff4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    4ff8:	00018e02 	andeq	r8, r1, r2, lsl #28
    4ffc:	0000000c 	andeq	r0, r0, ip
    5000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    5004:	7c020001 	stcvc	0, cr0, [r2], {1}
    5008:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    500c:	00000020 	andeq	r0, r0, r0, lsr #32
    5010:	00004ffc 	strdeq	r4, [r0], -ip
    5014:	08001118 	stmdaeq	r0, {r3, r4, r8, ip}
    5018:	0000008c 	andeq	r0, r0, ip, lsl #1
    501c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    5020:	86028503 	strhi	r8, [r2], -r3, lsl #10
    5024:	c60a6701 	strgt	r6, [sl], -r1, lsl #14
    5028:	000ec4c5 	andeq	ip, lr, r5, asr #9
    502c:	00000b41 	andeq	r0, r0, r1, asr #22
    5030:	0000000c 	andeq	r0, r0, ip
    5034:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    5038:	7c020001 	stcvc	0, cr0, [r2], {1}
    503c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    5040:	0000001c 	andeq	r0, r0, ip, lsl r0
    5044:	00005030 	andeq	r5, r0, r0, lsr r0
    5048:	080011a4 	stmdaeq	r0, {r2, r5, r7, r8, ip}
    504c:	000000c6 	andeq	r0, r0, r6, asr #1
    5050:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xfffff1be
    5054:	86048505 	strhi	r8, [r4], -r5, lsl #10
    5058:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    505c:	00000001 	andeq	r0, r0, r1
    5060:	0000000c 	andeq	r0, r0, ip
    5064:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    5068:	7c020001 	stcvc	0, cr0, [r2], {1}
    506c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    5070:	00000024 	andeq	r0, r0, r4, lsr #32
    5074:	00005060 	andeq	r5, r0, r0, rrx
    5078:	0800126c 	stmdaeq	r0, {r2, r3, r5, r6, r9, ip}
    507c:	00000048 	andeq	r0, r0, r8, asr #32
    5080:	83180e42 	tsthi	r8, #1056	; 0x420
    5084:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    5088:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    508c:	5f018e02 	svcpl	0x00018e02
    5090:	c4c3000e 	strbgt	r0, [r3], #14
    5094:	cec7c6c5 	cdpgt	6, 12, cr12, cr7, cr5, {6}
    5098:	0000000c 	andeq	r0, r0, ip
    509c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    50a0:	7c020001 	stcvc	0, cr0, [r2], {1}
    50a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    50a8:	00000020 	andeq	r0, r0, r0, lsr #32
    50ac:	00005098 	muleq	r0, r8, r0
    50b0:	00000000 	andeq	r0, r0, r0
    50b4:	0000001a 	andeq	r0, r0, sl, lsl r0
    50b8:	83100e41 	tsthi	r0, #1040	; 0x410
    50bc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    50c0:	4a018e02 	bmi	688d0 <_Min_Stack_Size+0x686d0>
    50c4:	c3c4c5ce 	bicgt	ip, r4, #864026624	; 0x33800000
    50c8:	0000000e 	andeq	r0, r0, lr
    50cc:	0000002c 	andeq	r0, r0, ip, lsr #32
    50d0:	00005098 	muleq	r0, r8, r0
    50d4:	00000000 	andeq	r0, r0, r0
    50d8:	000000c4 	andeq	r0, r0, r4, asr #1
    50dc:	84100e46 	ldrhi	r0, [r0], #-3654	; 0xfffff1ba
    50e0:	86038504 	strhi	r8, [r3], -r4, lsl #10
    50e4:	02018e02 	andeq	r8, r1, #2, 28
    50e8:	c6ce0a52 			; <UNDEFINED> instruction: 0xc6ce0a52
    50ec:	000ec4c5 	andeq	ip, lr, r5, asr #9
    50f0:	0e440b42 	vmlseq.f64	d16, d4, d2
    50f4:	c6c5c400 	strbgt	ip, [r5], r0, lsl #8
    50f8:	000000ce 	andeq	r0, r0, lr, asr #1
    50fc:	0000000c 	andeq	r0, r0, ip
    5100:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    5104:	7c020001 	stcvc	0, cr0, [r2], {1}
    5108:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    510c:	0000000c 	andeq	r0, r0, ip
    5110:	000050fc 	strdeq	r5, [r0], -ip
    5114:	080012b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, ip}
    5118:	00000014 	andeq	r0, r0, r4, lsl r0
    511c:	0000000c 	andeq	r0, r0, ip
    5120:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    5124:	7c020001 	stcvc	0, cr0, [r2], {1}
    5128:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    512c:	0000000c 	andeq	r0, r0, ip
    5130:	0000511c 	andeq	r5, r0, ip, lsl r1
    5134:	080012c8 	stmdaeq	r0, {r3, r6, r7, r9, ip}
    5138:	0000001c 	andeq	r0, r0, ip, lsl r0

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
{
       0:	00000000 	andeq	r0, r0, r0
}
       4:	00000086 	andeq	r0, r0, r6, lsl #1
       8:	86510001 	ldrbhi	r0, [r1], -r1
       c:	94000000 	strls	r0, [r0], #-0
      10:	04000000 	streq	r0, [r0], #-0
      14:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
      18:	0000949f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    bitstatus = SET;
      1c:	00009a00 	andeq	r9, r0, r0, lsl #20
    bitstatus = RESET;
      20:	51000100 	mrspl	r0, (UNDEF: 16)
	...
}
      30:	00000008 	andeq	r0, r0, r8
      34:	08520001 	ldmdaeq	r2, {r0}^
      38:	14000000 	strne	r0, [r0], #-0
      3c:	01000000 	mrseq	r0, (UNDEF: 0)
      40:	00145400 	andseq	r5, r4, r0, lsl #8
      44:	00180000 	andseq	r0, r8, r0
      48:	00010000 	andeq	r0, r1, r0
      4c:	00001852 	andeq	r1, r0, r2, asr r8
      50:	00002000 	andeq	r2, r0, r0
      54:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
      58:	00000038 	andeq	r0, r0, r8, lsr r0
      5c:	0000003a 	andeq	r0, r0, sl, lsr r0
      60:	3a560001 	bcc	158006c <_Min_Stack_Size+0x157fe6c>
            I2C_SendData(OLED_HARDWARE, BMP[j++]);
      64:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
      68:	03000000 	movweq	r0, #0
      6c:	9f107600 	svcls	0x00107600
      70:	00000048 	andeq	r0, r0, r8, asr #32
      74:	00000064 	andeq	r0, r0, r4, rrx
            _TRY(I2C_CheckEvent(OLED_HARDWARE, I2C_EVENT_MASTER_BYTE_TRANSMITTING) == ERROR);    	
      78:	6a560001 	bvs	1580084 <_Min_Stack_Size+0x157fe84>
      7c:	6c000000 	stcvs	0, cr0, [r0], {-0}
      80:	01000000 	mrseq	r0, (UNDEF: 0)
      84:	006c5200 	rsbeq	r5, ip, r0, lsl #4
        for(x=x0;x<x1;x++){ 
      88:	00720000 	rsbseq	r0, r2, r0
      8c:	00030000 	andeq	r0, r3, r0
      90:	729f0472 	addsvc	r0, pc, #1912602624	; 0x72000000
      94:	76000000 	strvc	r0, [r0], -r0
        _TRY(I2C_GetFlagStatus(OLED_HARDWARE, I2C_FLAG_BTF) == RESET);
      98:	01000000 	mrseq	r0, (UNDEF: 0)
      9c:	00945200 	addseq	r5, r4, r0, lsl #4
      a0:	009a0000 	addseq	r0, sl, r0
      a4:	00010000 	andeq	r0, r1, r0
	for(y=y0;y<y1;y++){
      a8:	00000052 	andeq	r0, r0, r2, asr r0
	...
}
      b4:	00001200 	andeq	r1, r0, r0, lsl #4
      b8:	50000100 	andpl	r0, r0, r0, lsl #2
      bc:	00000012 	andeq	r0, r0, r2, lsl r0
      c0:	00000064 	andeq	r0, r0, r4, rrx
      c4:	82530001 	subshi	r0, r3, #1
      c8:	90000000 	andls	r0, r0, r0
      cc:	01000000 	mrseq	r0, (UNDEF: 0)
      d0:	00945300 	addseq	r5, r4, r0, lsl #6
      d4:	009a0000 	addseq	r0, sl, r0
      d8:	00010000 	andeq	r0, r1, r0
      dc:	00000050 	andeq	r0, r0, r0, asr r0
      e0:	00000000 	andeq	r0, r0, r0
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      e4:	00003000 	andeq	r3, r0, r0
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      e8:	00008200 	andeq	r8, r0, r0, lsl #4
      ec:	08000300 	stmdaeq	r0, {r8, r9}
      f0:	00009f20 	andeq	r9, r0, r0, lsr #30
				prvUnlockQueue( pxQueue );
      f4:	00000000 	andeq	r0, r0, r0
      f8:	002a0000 	eoreq	r0, sl, r0
				if( xTaskResumeAll() == pdFALSE )
      fc:	00820000 	addeq	r0, r2, r0
     100:	00010000 	andeq	r0, r1, r0
					portYIELD_WITHIN_API();
     104:	00000055 	andeq	r0, r0, r5, asr r0
     108:	00000000 	andeq	r0, r0, r0
     10c:	00002600 	andeq	r2, r0, r0, lsl #12
     110:	00003800 	andeq	r3, r0, r0, lsl #16
     114:	53000100 	movwpl	r0, #256	; 0x100
				prvUnlockQueue( pxQueue );
     118:	00000038 	andeq	r0, r0, r8, lsr r0
				( void ) xTaskResumeAll();
     11c:	00000040 	andeq	r0, r0, r0, asr #32
     120:	74720003 	ldrbtvc	r0, [r2], #-3
			prvUnlockQueue( pxQueue );
     124:	0000409f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
			( void ) xTaskResumeAll();
     128:	00004400 	andeq	r4, r0, r0, lsl #8
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     12c:	72000300 	andvc	r0, r0, #0, 6
     130:	00449f78 	subeq	r9, r4, r8, ror pc
     134:	00480000 	subeq	r0, r8, r0
     138:	00030000 	andeq	r0, r3, r0
}
     13c:	489f7c72 	ldmmi	pc, {r1, r4, r5, r6, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
     140:	50000000 	andpl	r0, r0, r0
     144:	01000000 	mrseq	r0, (UNDEF: 0)
     148:	00505200 	subseq	r5, r0, r0, lsl #4
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
     14c:	00560000 	subseq	r0, r6, r0
  SPIx->I2SCFGR = tmpreg;   
     150:	00030000 	andeq	r0, r3, r0
     154:	649f7072 	ldrvs	r7, [pc], #114	; 15c <_Min_Heap_Size+0x15c>
}
     158:	6a000000 	bvs	160 <_Min_Heap_Size+0x160>
     15c:	01000000 	mrseq	r0, (UNDEF: 0)
     160:	006a5300 	rsbeq	r5, sl, r0, lsl #6
     164:	00820000 	addeq	r0, r2, r0
         *(uint16_t*) arg = getSn_KPALVTR(sn);
     168:	00010000 	andeq	r0, r1, r0
         *(uint16_t*) arg = getSn_TX_FSR(sn);
     16c:	00000056 	andeq	r0, r0, r6, asr r0
	...
     178:	00008600 	andeq	r8, r0, r0, lsl #12
         *(uint16_t*) arg = getSn_RX_RSR(sn);
     17c:	71000600 	tstvc	r0, r0, lsl #12
     180:	1aff0800 	bne	fffc2188 <BootRAM+0xef32929>
     184:	0000869f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
     188:	00009400 	andeq	r9, r0, r0, lsl #8
         *(uint8_t*) arg = getSn_SR(sn);
     18c:	f3000700 	vabd.u8	d0, d0, d0
     190:	ff085101 			; <UNDEFINED> instruction: 0xff085101
     194:	00949f1a 	addseq	r9, r4, sl, lsl pc
     198:	009a0000 	addseq	r0, sl, r0
     19c:	00060000 	andeq	r0, r6, r0
     1a0:	ff080071 			; <UNDEFINED> instruction: 0xff080071
     1a4:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
         if(getSn_MR(sn) == Sn_MR_TCP)
     1b0:	001a0000 	andseq	r0, sl, r0
     1b4:	00010000 	andeq	r0, r1, r0
     1b8:	00001a50 	andeq	r1, r0, r0, asr sl
            *(uint16_t*)arg = getSn_RX_RSR(sn);
     1bc:	00006000 	andeq	r6, r0, r0
     1c0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     1c4:	00000060 	andeq	r0, r0, r0, rrx
     1c8:	00000064 	andeq	r0, r0, r4, rrx
         break;
     1cc:	10700002 	rsbsne	r0, r0, r2
	...
            *(uint16_t*)arg = sock_remained_size[sn];
     1d8:	0000000a 	andeq	r0, r0, sl
         CHECK_SOCKMODE(Sn_MR_TCP);
     1dc:	00000060 	andeq	r0, r0, r0, rrx
     1e0:	00540001 	subseq	r0, r4, r1
     1e4:	00000000 	andeq	r0, r0, r0
     1e8:	36000000 	strcc	r0, [r0], -r0
     1ec:	60000000 	andvs	r0, r0, r0
     1f0:	01000000 	mrseq	r0, (UNDEF: 0)
     1f4:	00005400 	andeq	r5, r0, r0, lsl #8
     1f8:	00000000 	andeq	r0, r0, r0
         *(uint8_t*)arg = sock_pack_info[sn];
     1fc:	006c0000 	rsbeq	r0, ip, r0
     200:	00740000 	rsbseq	r0, r4, r0
         break;
     204:	00010000 	andeq	r0, r1, r0
         return SOCKERR_SOCKOPT;
     208:	00009854 	andeq	r9, r0, r4, asr r8
   return SOCK_OK;
     20c:	0000cc00 	andeq	ip, r0, r0, lsl #24
}
     210:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     21c:	000000be 	strheq	r0, [r0], -lr
     220:	000000cc 	andeq	r0, r0, ip, asr #1
     224:	00540001 	subseq	r0, r4, r1
	...
	uint8_t packet[sizeof(fixed_header)+sizeof(var_header)+msglen];
     230:	37000000 	strcc	r0, [r0, -r0]
     234:	01000000 	mrseq	r0, (UNDEF: 0)
     238:	00375000 	eorseq	r5, r7, r0
     23c:	00480000 	subeq	r0, r8, r0
     240:	00010000 	andeq	r0, r1, r0
     244:	00004855 	andeq	r4, r0, r5, asr r8
     248:	00004c00 	andeq	r4, r0, r0, lsl #24
     24c:	f3000400 	vshl.u8	d0, d0, d0
     250:	4c9f5001 	ldcmi	0, cr5, [pc], {1}
	memset(packet, 0, sizeof(packet));
     254:	5f000000 	svcpl	0x00000000
     258:	01000000 	mrseq	r0, (UNDEF: 0)
     25c:	005f5000 	subseq	r5, pc, r0
	memcpy(packet, fixed_header, sizeof(fixed_header));
     260:	00640000 	rsbeq	r0, r4, r0
     264:	00010000 	andeq	r0, r1, r0
     268:	00006455 	andeq	r6, r0, r5, asr r4
	memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
     26c:	00006e00 	andeq	r6, r0, r0, lsl #28
     270:	f3000400 	vshl.u8	d0, d0, d0
     274:	6e9f5001 	cdpvs	0, 9, cr5, cr15, cr1, {0}
     278:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
	memcpy(packet+sizeof(fixed_header)+sizeof(var_header), msg, msglen);
     27c:	01000000 	mrseq	r0, (UNDEF: 0)
     280:	007e5500 	rsbseq	r5, lr, r0, lsl #10
     284:	00820000 	addeq	r0, r2, r0
     288:	00040000 	andeq	r0, r4, r0
     28c:	9f5001f3 	svcls	0x005001f3
	if(broker->send(broker->socket_info, packet, sizeof(packet)) < sizeof(packet)) {
     290:	00000082 	andeq	r0, r0, r2, lsl #1
     294:	0000008a 	andeq	r0, r0, sl, lsl #1
     298:	8a500001 	bhi	14002a4 <_Min_Stack_Size+0x14000a4>
     29c:	8c000000 	stchi	0, cr0, [r0], {-0}
     2a0:	04000000 	streq	r0, [r0], #-0
		return -1;
     2a4:	5001f300 	andpl	pc, r1, r0, lsl #6
     2a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
}
     2b4:	00002a00 	andeq	r2, r0, r0, lsl #20
     2b8:	51000100 	mrspl	r0, (UNDEF: 16)
     2bc:	0000002a 	andeq	r0, r0, sl, lsr #32
     2c0:	00000037 	andeq	r0, r0, r7, lsr r0
     2c4:	00710002 	rsbseq	r0, r1, r2
     2c8:	00000037 	andeq	r0, r0, r7, lsr r0
     2cc:	0000004c 	andeq	r0, r0, ip, asr #32
     2d0:	01f30004 	mvnseq	r0, r4
     2d4:	004c9f51 	subeq	r9, ip, r1, asr pc
     2d8:	00520000 	subseq	r0, r2, r0
     2dc:	00010000 	andeq	r0, r1, r0
     2e0:	00005251 	andeq	r5, r0, r1, asr r2
     2e4:	00005f00 	andeq	r5, r0, r0, lsl #30
     2e8:	71000200 	mrsvc	r0, R8_usr
     2ec:	00005f00 	andeq	r5, r0, r0, lsl #30
     2f0:	00008200 	andeq	r8, r0, r0, lsl #4
     2f4:	f3000400 	vshl.u8	d0, d0, d0
     2f8:	829f5101 	addshi	r5, pc, #1073741824	; 0x40000000
     2fc:	8c000000 	stchi	0, cr0, [r0], {-0}
     300:	01000000 	mrseq	r0, (UNDEF: 0)
     304:	00005100 	andeq	r5, r0, r0, lsl #2
	...
     310:	00280000 	eoreq	r0, r8, r0
     314:	00010000 	andeq	r0, r1, r0
     318:	00002852 	andeq	r2, r0, r2, asr r8
     31c:	00004800 	andeq	r4, r0, r0, lsl #16
     320:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
     324:	00489f01 	subeq	r9, r8, r1, lsl #30
     328:	004c0000 	subeq	r0, ip, r0
     32c:	00040000 	andeq	r0, r4, r0
     330:	9f5201f3 	svcls	0x005201f3
     334:	0000004c 	andeq	r0, r0, ip, asr #32
     338:	00000050 	andeq	r0, r0, r0, asr r0
     33c:	50520001 	subspl	r0, r2, r1
     340:	64000000 	strvs	r0, [r0], #-0
     344:	01000000 	mrseq	r0, (UNDEF: 0)
     348:	00645400 	rsbeq	r5, r4, r0, lsl #8
     34c:	00740000 	rsbseq	r0, r4, r0
     350:	00040000 	andeq	r0, r4, r0
     354:	9f5201f3 	svcls	0x005201f3
     358:	00000074 	andeq	r0, r0, r4, ror r0
     35c:	0000007e 	andeq	r0, r0, lr, ror r0
     360:	7e540001 	cdpvc	0, 5, cr0, cr4, cr1, {0}
     364:	82000000 	andhi	r0, r0, #0
     368:	04000000 	streq	r0, [r0], #-0
     36c:	5201f300 	andpl	pc, r1, #0, 6
     370:	0000829f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
     374:	00008400 	andeq	r8, r0, r0, lsl #8
     378:	52000100 	andpl	r0, r0, #0, 2
     37c:	00000084 	andeq	r0, r0, r4, lsl #1
     380:	0000008c 	andeq	r0, r0, ip, lsl #1
     384:	01f30004 	mvnseq	r0, r4
     388:	00009f52 	andeq	r9, r0, r2, asr pc
     38c:	00000000 	andeq	r0, r0, r0
     390:	00380000 	eorseq	r0, r8, r0
     394:	004c0000 	subeq	r0, ip, r0
     398:	00010000 	andeq	r0, r1, r0
     39c:	00006050 	andeq	r6, r0, r0, asr r0
     3a0:	00006400 	andeq	r6, r0, r0, lsl #8
     3a4:	50000100 	andpl	r0, r0, r0, lsl #2
     3a8:	0000006e 	andeq	r0, r0, lr, rrx
     3ac:	00000082 	andeq	r0, r0, r2, lsl #1
     3b0:	00500001 	subseq	r0, r0, r1
     3b4:	00000000 	andeq	r0, r0, r0
     3b8:	8c000000 	stchi	0, cr0, [r0], {-0}
     3bc:	ba000000 	blt	3c4 <_Min_Stack_Size+0x1c4>
     3c0:	01000000 	mrseq	r0, (UNDEF: 0)
     3c4:	00ba5000 	adcseq	r5, sl, r0
     3c8:	00c70000 	sbceq	r0, r7, r0
     3cc:	00020000 	andeq	r0, r2, r0
     3d0:	00c70071 	sbceq	r0, r7, r1, ror r0
     3d4:	00dc0000 	sbcseq	r0, ip, r0
     3d8:	00040000 	andeq	r0, r4, r0
     3dc:	9f5001f3 	svcls	0x005001f3
     3e0:	000000dc 	ldrdeq	r0, [r0], -ip
     3e4:	000000e4 	andeq	r0, r0, r4, ror #1
     3e8:	e4500001 	ldrb	r0, [r0], #-1
     3ec:	f1000000 	cps	#0
     3f0:	02000000 	andeq	r0, r0, #0
     3f4:	f1007100 			; <UNDEFINED> instruction: 0xf1007100
     3f8:	14000000 	strne	r0, [r0], #-0
     3fc:	04000001 	streq	r0, [r0], #-1
     400:	5001f300 	andpl	pc, r1, r0, lsl #6
     404:	0001149f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
     408:	00011c00 	andeq	r1, r1, r0, lsl #24
     40c:	50000100 	andpl	r0, r0, r0, lsl #2
     410:	0000011c 	andeq	r0, r0, ip, lsl r1
     414:	00000124 	andeq	r0, r0, r4, lsr #2
     418:	01f30004 	mvnseq	r0, r4
     41c:	00009f50 	andeq	r9, r0, r0, asr pc
     420:	00000000 	andeq	r0, r0, r0
     424:	008c0000 	addeq	r0, ip, r0
     428:	00b80000 	adcseq	r0, r8, r0
     42c:	00010000 	andeq	r0, r1, r0
     430:	0000b851 	andeq	fp, r0, r1, asr r8
     434:	0000d800 	andeq	sp, r0, r0, lsl #16
     438:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
     43c:	00d89f01 	sbcseq	r9, r8, r1, lsl #30
     440:	00dc0000 	sbcseq	r0, ip, r0
     444:	00040000 	andeq	r0, r4, r0
     448:	9f5101f3 	svcls	0x005101f3
     44c:	000000dc 	ldrdeq	r0, [r0], -ip
     450:	000000e2 	andeq	r0, r0, r2, ror #1
     454:	e2510001 	subs	r0, r1, #1
     458:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
     45c:	01000000 	mrseq	r0, (UNDEF: 0)
     460:	00f65400 	rscseq	r5, r6, r0, lsl #8
     464:	01060000 	mrseq	r0, (UNDEF: 6)
     468:	00040000 	andeq	r0, r4, r0
     46c:	9f5101f3 	svcls	0x005101f3
     470:	00000106 	andeq	r0, r0, r6, lsl #2
     474:	00000110 	andeq	r0, r0, r0, lsl r1
     478:	10540001 	subsne	r0, r4, r1
     47c:	14000001 	strne	r0, [r0], #-1
     480:	04000001 	streq	r0, [r0], #-1
     484:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     488:	0001149f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
     48c:	00012400 	andeq	r2, r1, r0, lsl #8
     490:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     49c:	000000c8 	andeq	r0, r0, r8, asr #1
     4a0:	000000dc 	ldrdeq	r0, [r0], -ip
     4a4:	f2500001 	vhadd.s16	d16, d0, d1
     4a8:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
     4ac:	01000000 	mrseq	r0, (UNDEF: 0)
     4b0:	01005000 	mrseq	r5, (UNDEF: 0)
     4b4:	01140000 	tsteq	r4, r0
     4b8:	00010000 	andeq	r0, r1, r0
     4bc:	00000050 	andeq	r0, r0, r0, asr r0
     4c0:	00000000 	andeq	r0, r0, r0
     4c4:	00009800 	andeq	r9, r0, r0, lsl #16
     4c8:	0000d800 	andeq	sp, r0, r0, lsl #16
     4cc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     4d0:	000000dc 	ldrdeq	r0, [r0], -ip
     4d4:	000000fc 	strdeq	r0, [r0], -ip
     4d8:	00550001 	subseq	r0, r5, r1
     4dc:	10000001 	andne	r0, r0, r1
     4e0:	01000001 	tsteq	r0, r1
     4e4:	01145500 	tsteq	r4, r0, lsl #10
     4e8:	01240000 			; <UNDEFINED> instruction: 0x01240000
     4ec:	00010000 	andeq	r0, r1, r0
     4f0:	00000055 	andeq	r0, r0, r5, asr r0
	...
     4fc:	00001a00 	andeq	r1, r0, r0, lsl #20
     500:	50000100 	andpl	r0, r0, r0, lsl #2
     504:	0000001a 	andeq	r0, r0, sl, lsl r0
     508:	00000072 	andeq	r0, r0, r2, ror r0
     50c:	01f30004 	mvnseq	r0, r4
     510:	00729f50 	rsbseq	r9, r2, r0, asr pc
     514:	00800000 	addeq	r0, r0, r0
     518:	00010000 	andeq	r0, r1, r0
     51c:	00008050 	andeq	r8, r0, r0, asr r0
     520:	0000ce00 	andeq	ip, r0, r0, lsl #28
     524:	f3000400 	vshl.u8	d0, d0, d0
     528:	009f5001 	addseq	r5, pc, r1
	...
     534:	3c000000 	stccc	0, cr0, [r0], {-0}
     538:	01000000 	mrseq	r0, (UNDEF: 0)
     53c:	003c5100 	eorseq	r5, ip, r0, lsl #2
     540:	00720000 	rsbseq	r0, r2, r0
     544:	00040000 	andeq	r0, r4, r0
     548:	9f5101f3 	svcls	0x005101f3
     54c:	00000072 	andeq	r0, r0, r2, ror r0
     550:	00000080 	andeq	r0, r0, r0, lsl #1
     554:	80510001 	subshi	r0, r1, r1
     558:	c2000000 	andgt	r0, r0, #0
     55c:	04000000 	streq	r0, [r0], #-0
     560:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     564:	0000c29f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
     568:	0000c800 	andeq	ip, r0, r0, lsl #16
     56c:	51000100 	mrspl	r0, (UNDEF: 16)
     570:	000000c8 	andeq	r0, r0, r8, asr #1
     574:	000000ce 	andeq	r0, r0, lr, asr #1
     578:	01f30004 	mvnseq	r0, r4
     57c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
     588:	00260000 	eoreq	r0, r6, r0
     58c:	00010000 	andeq	r0, r1, r0
     590:	00002650 	andeq	r2, r0, r0, asr r6
     594:	00002a00 	andeq	r2, r0, r0, lsl #20
     598:	73000300 	movwvc	r0, #768	; 0x300
     59c:	002a9f7f 	eoreq	r9, sl, pc, ror pc
     5a0:	002c0000 	eoreq	r0, ip, r0
     5a4:	00010000 	andeq	r0, r1, r0
     5a8:	00002c53 	andeq	r2, r0, r3, asr ip
     5ac:	00003c00 	andeq	r3, r0, r0, lsl #24
     5b0:	50000100 	andpl	r0, r0, r0, lsl #2
     5b4:	0000005c 	andeq	r0, r0, ip, asr r0
     5b8:	00000066 	andeq	r0, r0, r6, rrx
     5bc:	66500001 	ldrbvs	r0, [r0], -r1
     5c0:	6a000000 	bvs	5c8 <_Min_Stack_Size+0x3c8>
     5c4:	03000000 	movweq	r0, #0
     5c8:	9f7f7000 	svcls	0x007f7000
     5cc:	00000072 	andeq	r0, r0, r2, ror r0
     5d0:	00000088 	andeq	r0, r0, r8, lsl #1
     5d4:	88500001 	ldmdahi	r0, {r0}^
     5d8:	8c000000 	stchi	0, cr0, [r0], {-0}
     5dc:	03000000 	movweq	r0, #0
     5e0:	9f7f7300 	svcls	0x007f7300
     5e4:	0000008c 	andeq	r0, r0, ip, lsl #1
     5e8:	0000008e 	andeq	r0, r0, lr, lsl #1
     5ec:	8e530001 	cdphi	0, 5, cr0, cr3, cr1, {0}
     5f0:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
     5f4:	01000000 	mrseq	r0, (UNDEF: 0)
     5f8:	00b05000 	adcseq	r5, r0, r0
     5fc:	00ba0000 	adcseq	r0, sl, r0
     600:	00010000 	andeq	r0, r1, r0
     604:	0000ba50 	andeq	fp, r0, r0, asr sl
     608:	0000c200 	andeq	ip, r0, r0, lsl #4
     60c:	70000300 	andvc	r0, r0, r0, lsl #6
     610:	00c29f7f 	sbceq	r9, r2, pc, ror pc
     614:	00c40000 	sbceq	r0, r4, r0
     618:	00010000 	andeq	r0, r1, r0
     61c:	0000c450 	andeq	ip, r0, r0, asr r4
     620:	0000c800 	andeq	ip, r0, r0, lsl #16
     624:	73000300 	movwvc	r0, #768	; 0x300
     628:	00009f7f 	andeq	r9, r0, pc, ror pc
	...
     634:	003c0000 	eorseq	r0, ip, r0
     638:	00010000 	andeq	r0, r1, r0
     63c:	00003c51 	andeq	r3, r0, r1, asr ip
     640:	00007200 	andeq	r7, r0, r0, lsl #4
     644:	f3000400 	vshl.u8	d0, d0, d0
     648:	729f5101 	addsvc	r5, pc, #1073741824	; 0x40000000
     64c:	80000000 	andhi	r0, r0, r0
     650:	01000000 	mrseq	r0, (UNDEF: 0)
     654:	00805100 	addeq	r5, r0, r0, lsl #2
     658:	00c20000 	sbceq	r0, r2, r0
     65c:	00040000 	andeq	r0, r4, r0
     660:	9f5101f3 	svcls	0x005101f3
     664:	000000c2 	andeq	r0, r0, r2, asr #1
     668:	000000c8 	andeq	r0, r0, r8, asr #1
     66c:	c8510001 	ldmdagt	r1, {r0}^
     670:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
     674:	04000000 	streq	r0, [r0], #-0
     678:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     67c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     680:	00000000 	andeq	r0, r0, r0
     684:	00002c00 	andeq	r2, r0, r0, lsl #24
     688:	00003400 	andeq	r3, r0, r0, lsl #8
     68c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     690:	00000034 	andeq	r0, r0, r4, lsr r0
     694:	0000003a 	andeq	r0, r0, sl, lsr r0
     698:	3a560001 	bcc	15806a4 <_Min_Stack_Size+0x15804a4>
     69c:	3c000000 	stccc	0, cr0, [r0], {-0}
     6a0:	0c000000 	stceq	0, cr0, [r0], {-0}
     6a4:	38007100 	stmdacc	r0, {r8, ip, sp, lr}
     6a8:	ff000a24 			; <UNDEFINED> instruction: 0xff000a24
     6ac:	2100741a 	tstcs	r0, sl, lsl r4
     6b0:	00003c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     6b4:	00006e00 	andeq	r6, r0, r0, lsl #28
     6b8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     6c4:	0000002c 	andeq	r0, r0, ip, lsr #32
     6c8:	00000034 	andeq	r0, r0, r4, lsr r0
     6cc:	9f380002 	svcls	0x00380002
     6d0:	00000034 	andeq	r0, r0, r4, lsr r0
     6d4:	0000003c 	andeq	r0, r0, ip, lsr r0
     6d8:	9f400002 	svcls	0x00400002
     6dc:	0000003c 	andeq	r0, r0, ip, lsr r0
     6e0:	0000006e 	andeq	r0, r0, lr, rrx
     6e4:	20080003 	andcs	r0, r8, r3
     6e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     6ec:	00000000 	andeq	r0, r0, r0
     6f0:	00003c00 	andeq	r3, r0, r0, lsl #24
     6f4:	00006200 	andeq	r6, r0, r0, lsl #4
     6f8:	50000100 	andpl	r0, r0, r0, lsl #2
     6fc:	0000008e 	andeq	r0, r0, lr, lsl #1
     700:	000000a2 	andeq	r0, r0, r2, lsr #1
     704:	a2500001 	subsge	r0, r0, #1
     708:	b0000000 	andlt	r0, r0, r0
     70c:	03000000 	movweq	r0, #0
     710:	9f7c7000 	svcls	0x007c7000
	...
     71c:	08000590 	stmdaeq	r0, {r4, r7, r8, sl}
     720:	0800064a 	stmdaeq	r0, {r1, r3, r6, r9, sl}
     724:	4a500001 	bmi	1400730 <_Min_Stack_Size+0x1400530>
     728:	4a080006 	bmi	200748 <_Min_Stack_Size+0x200548>
     72c:	04080006 	streq	r0, [r8], #-6
     730:	5001f300 	andpl	pc, r1, r0, lsl #6
     734:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     738:	00000000 	andeq	r0, r0, r0
     73c:	00064c00 	andeq	r4, r6, r0, lsl #24
     740:	0006a808 	andeq	sl, r6, r8, lsl #16
     744:	50000108 	andpl	r0, r0, r8, lsl #2
     748:	080006a8 	stmdaeq	r0, {r3, r5, r7, r9, sl}
     74c:	080006a8 	stmdaeq	r0, {r3, r5, r7, r9, sl}
     750:	01f30004 	mvnseq	r0, r4
     754:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     760:	00340000 	eorseq	r0, r4, r0
     764:	00010000 	andeq	r0, r1, r0
     768:	00003450 	andeq	r3, r0, r0, asr r4
     76c:	00005c00 	andeq	r5, r0, r0, lsl #24
     770:	f3000400 	vshl.u8	d0, d0, d0
     774:	5c9f5001 	ldcpl	0, cr5, [pc], {1}
     778:	70000000 	andvc	r0, r0, r0
     77c:	01000000 	mrseq	r0, (UNDEF: 0)
     780:	00705000 	rsbseq	r5, r0, r0
     784:	00740000 	rsbseq	r0, r4, r0
     788:	00030000 	andeq	r0, r3, r0
     78c:	749f0170 	ldrvc	r0, [pc], #368	; 794 <_Min_Stack_Size+0x594>
     790:	80000000 	andhi	r0, r0, r0
     794:	01000000 	mrseq	r0, (UNDEF: 0)
     798:	00845000 	addeq	r5, r4, r0
     79c:	00860000 	addeq	r0, r6, r0
     7a0:	00010000 	andeq	r0, r1, r0
     7a4:	00008650 	andeq	r8, r0, r0, asr r6
     7a8:	00008800 	andeq	r8, r0, r0, lsl #16
     7ac:	f3000400 	vshl.u8	d0, d0, d0
     7b0:	949f5001 	ldrls	r5, [pc], #1	; 7b8 <_Min_Stack_Size+0x5b8>
     7b4:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     7b8:	04000000 	streq	r0, [r0], #-0
     7bc:	5001f300 	andpl	pc, r1, r0, lsl #6
     7c0:	0000989f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
     7c4:	00009a00 	andeq	r9, r0, r0, lsl #20
     7c8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     7d8:	00000034 	andeq	r0, r0, r4, lsr r0
     7dc:	34510001 	ldrbcc	r0, [r1], #-1
     7e0:	5c000000 	stcpl	0, cr0, [r0], {-0}
     7e4:	04000000 	streq	r0, [r0], #-0
     7e8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     7ec:	00005c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     7f0:	00006c00 	andeq	r6, r0, r0, lsl #24
     7f4:	51000100 	mrspl	r0, (UNDEF: 16)
     7f8:	00000084 	andeq	r0, r0, r4, lsl #1
     7fc:	00000088 	andeq	r0, r0, r8, lsl #1
     800:	94510001 	ldrbls	r0, [r1], #-1
     804:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     808:	04000000 	streq	r0, [r0], #-0
     80c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     810:	0000989f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
     814:	00009c00 	andeq	r9, r0, r0, lsl #24
     818:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     828:	0000001c 	andeq	r0, r0, ip, lsl r0
     82c:	1c520001 	mrrcne	0, 0, r0, r2, cr1
     830:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     834:	03000000 	movweq	r0, #0
     838:	9f7c7200 	svcls	0x007c7200
     83c:	0000001e 	andeq	r0, r0, lr, lsl r0
     840:	00000048 	andeq	r0, r0, r8, asr #32
     844:	48520001 	ldmdami	r2, {r0}^
     848:	50000000 	andpl	r0, r0, r0
     84c:	03000000 	movweq	r0, #0
     850:	9f047200 	svcls	0x00047200
     854:	00000050 	andeq	r0, r0, r0, asr r0
     858:	00000080 	andeq	r0, r0, r0, lsl #1
     85c:	84520001 	ldrbhi	r0, [r2], #-1
     860:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     864:	01000000 	mrseq	r0, (UNDEF: 0)
     868:	008e5200 	addeq	r5, lr, r0, lsl #4
     86c:	00940000 	addseq	r0, r4, r0
     870:	00010000 	andeq	r0, r1, r0
     874:	00009452 	andeq	r9, r0, r2, asr r4
     878:	00009800 	andeq	r9, r0, r0, lsl #16
     87c:	72000300 	andvc	r0, r0, #0, 6
     880:	00989f04 	addseq	r9, r8, r4, lsl #30
     884:	009c0000 	addseq	r0, ip, r0
     888:	00010000 	andeq	r0, r1, r0
     88c:	00000052 	andeq	r0, r0, r2, asr r0
     890:	00000000 	andeq	r0, r0, r0
     894:	00001000 	andeq	r1, r0, r0
     898:	00005000 	andeq	r5, r0, r0
     89c:	50000100 	andpl	r0, r0, r0, lsl #2
     8a0:	00000050 	andeq	r0, r0, r0, asr r0
     8a4:	00000056 	andeq	r0, r0, r6, asr r0
     8a8:	7c770003 	ldclvc	0, cr0, [r7], #-12
     8ac:	0000569f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
     8b0:	00005c00 	andeq	r5, r0, r0, lsl #24
     8b4:	57000100 	strpl	r0, [r0, -r0, lsl #2]
     8b8:	00000094 	muleq	r0, r4, r0
     8bc:	00000096 	muleq	r0, r6, r0
     8c0:	96500001 	ldrbls	r0, [r0], -r1
     8c4:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     8c8:	03000000 	movweq	r0, #0
     8cc:	9f7c7700 	svcls	0x007c7700
	...
     8d8:	00000010 	andeq	r0, r0, r0, lsl r0
     8dc:	00000050 	andeq	r0, r0, r0, asr r0
     8e0:	50510001 	subspl	r0, r1, r1
     8e4:	54000000 	strpl	r0, [r0], #-0
     8e8:	03000000 	movweq	r0, #0
     8ec:	9f7c7100 	svcls	0x007c7100
     8f0:	00000056 	andeq	r0, r0, r6, asr r0
     8f4:	0000005c 	andeq	r0, r0, ip, asr r0
     8f8:	94510001 	ldrbls	r0, [r1], #-1
     8fc:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     900:	01000000 	mrseq	r0, (UNDEF: 0)
     904:	00005100 	andeq	r5, r0, r0, lsl #2
	...
     910:	00120000 	andseq	r0, r2, r0
     914:	00010000 	andeq	r0, r1, r0
     918:	00001251 	andeq	r1, r0, r1, asr r2
     91c:	00006200 	andeq	r6, r0, r0, lsl #4
     920:	f3000400 	vshl.u8	d0, d0, d0
     924:	629f5101 	addsvs	r5, pc, #1073741824	; 0x40000000
     928:	66000000 	strvs	r0, [r0], -r0
     92c:	01000000 	mrseq	r0, (UNDEF: 0)
     930:	00005100 	andeq	r5, r0, r0, lsl #2
	...
     93c:	00280000 	eoreq	r0, r8, r0
     940:	00010000 	andeq	r0, r1, r0
     944:	00002852 	andeq	r2, r0, r2, asr r8
     948:	00004000 	andeq	r4, r0, r0
     94c:	52000100 	andpl	r0, r0, #0, 2
     950:	00000040 	andeq	r0, r0, r0, asr #32
     954:	00000048 	andeq	r0, r0, r8, asr #32
     958:	7f720003 	svcvc	0x00720003
     95c:	0000489f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
     960:	00005000 	andeq	r5, r0, r0
     964:	52000100 	andpl	r0, r0, #0, 2
     968:	00000050 	andeq	r0, r0, r0, asr r0
     96c:	00000054 	andeq	r0, r0, r4, asr r0
     970:	7f720003 	svcvc	0x00720003
     974:	0000629f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
     978:	00006600 	andeq	r6, r0, r0, lsl #12
     97c:	52000100 	andpl	r0, r0, #0, 2
	...
     98c:	00000032 	andeq	r0, r0, r2, lsr r0
     990:	32500001 	subscc	r0, r0, #1
     994:	4c000000 	stcmi	0, cr0, [r0], {-0}
     998:	01000000 	mrseq	r0, (UNDEF: 0)
     99c:	004c5300 	subeq	r5, ip, r0, lsl #6
     9a0:	00500000 	subseq	r0, r0, r0
     9a4:	00030000 	andeq	r0, r3, r0
     9a8:	509f7f73 	addspl	r7, pc, r3, ror pc	; <UNPREDICTABLE>
     9ac:	62000000 	andvs	r0, r0, #0
     9b0:	01000000 	mrseq	r0, (UNDEF: 0)
     9b4:	00625300 	rsbeq	r5, r2, r0, lsl #6
     9b8:	00660000 	rsbeq	r0, r6, r0
     9bc:	00010000 	andeq	r0, r1, r0
     9c0:	00000050 	andeq	r0, r0, r0, asr r0
	...
     9cc:	00001200 	andeq	r1, r0, r0, lsl #4
     9d0:	51000100 	mrspl	r0, (UNDEF: 16)
     9d4:	00000012 	andeq	r0, r0, r2, lsl r0
     9d8:	00000032 	andeq	r0, r0, r2, lsr r0
     9dc:	01f30004 	mvnseq	r0, r4
     9e0:	00329f51 	eorseq	r9, r2, r1, asr pc
     9e4:	003c0000 	eorseq	r0, ip, r0
     9e8:	00010000 	andeq	r0, r1, r0
     9ec:	00003c51 	andeq	r3, r0, r1, asr ip
     9f0:	00003e00 	andeq	r3, r0, r0, lsl #28
     9f4:	71000300 	mrsvc	r0, LR_irq
     9f8:	003e9f7f 	eorseq	r9, lr, pc, ror pc
     9fc:	00460000 	subeq	r0, r6, r0
     a00:	00010000 	andeq	r0, r1, r0
     a04:	00004651 	andeq	r4, r0, r1, asr r6
     a08:	00004800 	andeq	r4, r0, r0, lsl #16
     a0c:	71000300 	mrsvc	r0, LR_irq
     a10:	00629f7f 	rsbeq	r9, r2, pc, ror pc
     a14:	00660000 	rsbeq	r0, r6, r0
     a18:	00010000 	andeq	r0, r1, r0
     a1c:	00000051 	andeq	r0, r0, r1, asr r0
     a20:	00000000 	andeq	r0, r0, r0
     a24:	00001400 	andeq	r1, r0, r0, lsl #8
     a28:	00002e00 	andeq	r2, r0, r0, lsl #28
     a2c:	53000100 	movwpl	r0, #256	; 0x100
     a30:	0000002e 	andeq	r0, r0, lr, lsr #32
     a34:	00000030 	andeq	r0, r0, r0, lsr r0
     a38:	7c730003 	ldclvc	0, cr0, [r3], #-12
     a3c:	0000309f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a40:	00003200 	andeq	r3, r0, r0, lsl #4
     a44:	53000100 	movwpl	r0, #256	; 0x100
	...
     a50:	00000014 	andeq	r0, r0, r4, lsl r0
     a54:	00000032 	andeq	r0, r0, r2, lsr r0
     a58:	00510001 	subseq	r0, r1, r1
	...
     a64:	06000000 	streq	r0, [r0], -r0
     a68:	01000000 	mrseq	r0, (UNDEF: 0)
     a6c:	00065000 	andeq	r5, r6, r0
     a70:	00090000 	andeq	r0, r9, r0
     a74:	00010000 	andeq	r0, r1, r0
     a78:	00000951 	andeq	r0, r0, r1, asr r9
     a7c:	00001000 	andeq	r1, r0, r0
     a80:	f3000400 	vshl.u8	d0, d0, d0
     a84:	009f5001 	addseq	r5, pc, r1
     a88:	00000000 	andeq	r0, r0, r0
     a8c:	10000000 	andne	r0, r0, r0
     a90:	16000000 	strne	r0, [r0], -r0
     a94:	01000000 	mrseq	r0, (UNDEF: 0)
     a98:	00165000 	andseq	r5, r6, r0
     a9c:	00190000 	andseq	r0, r9, r0
     aa0:	00010000 	andeq	r0, r1, r0
     aa4:	00001951 	andeq	r1, r0, r1, asr r9
     aa8:	00002000 	andeq	r2, r0, r0
     aac:	f3000400 	vshl.u8	d0, d0, d0
     ab0:	009f5001 	addseq	r5, pc, r1
	...
     abc:	1c000000 	stcne	0, cr0, [r0], {-0}
     ac0:	01000000 	mrseq	r0, (UNDEF: 0)
     ac4:	001c5000 	andseq	r5, ip, r0
     ac8:	002a0000 	eoreq	r0, sl, r0
     acc:	00040000 	andeq	r0, r4, r0
     ad0:	9f5001f3 	svcls	0x005001f3
     ad4:	0000002a 	andeq	r0, r0, sl, lsr #32
     ad8:	00000042 	andeq	r0, r0, r2, asr #32
     adc:	42500001 	subsmi	r0, r0, #1
     ae0:	50000000 	andpl	r0, r0, r0
     ae4:	04000000 	streq	r0, [r0], #-0
     ae8:	5001f300 	andpl	pc, r1, r0, lsl #6
     aec:	0000509f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     af0:	00006e00 	andeq	r6, r0, r0, lsl #28
     af4:	50000100 	andpl	r0, r0, r0, lsl #2
     af8:	0000006e 	andeq	r0, r0, lr, rrx
     afc:	0000008c 	andeq	r0, r0, ip, lsl #1
     b00:	01f30004 	mvnseq	r0, r4
     b04:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     b10:	000a0000 	andeq	r0, sl, r0
     b14:	00010000 	andeq	r0, r1, r0
     b18:	00000a51 	andeq	r0, r0, r1, asr sl
     b1c:	00001000 	andeq	r1, r0, r0
     b20:	71000300 	mrsvc	r0, LR_irq
     b24:	00109f04 	andseq	r9, r0, r4, lsl #30
     b28:	008c0000 	addeq	r0, ip, r0
     b2c:	00040000 	andeq	r0, r4, r0
     b30:	9f5101f3 	svcls	0x005101f3
	...
     b3c:	0000002a 	andeq	r0, r0, sl, lsr #32
     b40:	0000006e 	andeq	r0, r0, lr, rrx
     b44:	7a520001 	bvc	1480b50 <_Min_Stack_Size+0x1480950>
     b48:	8c000000 	stchi	0, cr0, [r0], {-0}
     b4c:	01000000 	mrseq	r0, (UNDEF: 0)
     b50:	00005200 	andeq	r5, r0, r0, lsl #4
     b54:	00000000 	andeq	r0, r0, r0
     b58:	002a0000 	eoreq	r0, sl, r0
     b5c:	00300000 	eorseq	r0, r0, r0
     b60:	00010000 	andeq	r0, r1, r0
     b64:	00003053 	andeq	r3, r0, r3, asr r0
     b68:	00003200 	andeq	r3, r0, r0, lsl #4
     b6c:	52000100 	andpl	r0, r0, #0, 2
     b70:	00000032 	andeq	r0, r0, r2, lsr r0
     b74:	00000052 	andeq	r0, r0, r2, asr r0
     b78:	52530001 	subspl	r0, r3, #1
     b7c:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     b80:	02000000 	andeq	r0, r0, #0
     b84:	58047200 	stmdapl	r4, {r9, ip, sp, lr}
     b88:	66000000 	strvs	r0, [r0], -r0
     b8c:	01000000 	mrseq	r0, (UNDEF: 0)
     b90:	00665300 	rsbeq	r5, r6, r0, lsl #6
     b94:	006c0000 	rsbeq	r0, ip, r0
     b98:	00020000 	andeq	r0, r2, r0
     b9c:	007a0472 	rsbseq	r0, sl, r2, ror r4
     ba0:	007e0000 	rsbseq	r0, lr, r0
     ba4:	00010000 	andeq	r0, r1, r0
     ba8:	00007e53 	andeq	r7, r0, r3, asr lr
     bac:	00008400 	andeq	r8, r0, r0, lsl #8
     bb0:	72000200 	andvc	r0, r0, #0, 4
     bb4:	00000004 	andeq	r0, r0, r4
     bb8:	00000000 	andeq	r0, r0, r0
     bbc:	00000400 	andeq	r0, r0, r0, lsl #8
     bc0:	00000a00 	andeq	r0, r0, r0, lsl #20
     bc4:	51000100 	mrspl	r0, (UNDEF: 16)
     bc8:	0000000a 	andeq	r0, r0, sl
     bcc:	00000010 	andeq	r0, r0, r0, lsl r0
     bd0:	04710003 	ldrbteq	r0, [r1], #-3
     bd4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     bd8:	00000000 	andeq	r0, r0, r0
     bdc:	00000a00 	andeq	r0, r0, r0, lsl #20
     be0:	00001000 	andeq	r1, r0, r0
     be4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     bf4:	0000003e 	andeq	r0, r0, lr, lsr r0
     bf8:	3e500001 	cdpcc	0, 5, cr0, cr0, cr1, {0}
     bfc:	64000000 	strvs	r0, [r0], #-0
     c00:	01000000 	mrseq	r0, (UNDEF: 0)
     c04:	00645600 	rsbeq	r5, r4, r0, lsl #12
     c08:	006e0000 	rsbeq	r0, lr, r0
     c0c:	00010000 	andeq	r0, r1, r0
     c10:	00006e50 	andeq	r6, r0, r0, asr lr
     c14:	00008400 	andeq	r8, r0, r0, lsl #8
     c18:	56000100 	strpl	r0, [r0], -r0, lsl #2
     c1c:	00000084 	andeq	r0, r0, r4, lsl #1
     c20:	0000008e 	andeq	r0, r0, lr, lsl #1
     c24:	8e500001 	cdphi	0, 5, cr0, cr0, cr1, {0}
     c28:	96000000 	strls	r0, [r0], -r0
     c2c:	01000000 	mrseq	r0, (UNDEF: 0)
     c30:	00965600 	addseq	r5, r6, r0, lsl #12
     c34:	00ae0000 	adceq	r0, lr, r0
     c38:	00010000 	andeq	r0, r1, r0
     c3c:	0000ae50 	andeq	sl, r0, r0, asr lr
     c40:	0000bc00 	andeq	fp, r0, r0, lsl #24
     c44:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     c54:	0000001c 	andeq	r0, r0, ip, lsl r0
     c58:	1c510001 	mrrcne	0, 0, r0, r1, cr1
     c5c:	bc000000 	stclt	0, cr0, [r0], {-0}
     c60:	04000000 	streq	r0, [r0], #-0
     c64:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     c68:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c6c:	00000000 	andeq	r0, r0, r0
     c70:	00001e00 	andeq	r1, r0, r0, lsl #28
     c74:	00003600 	andeq	r3, r0, r0, lsl #12
     c78:	52000100 	andpl	r0, r0, #0, 2
     c7c:	00000064 	andeq	r0, r0, r4, rrx
     c80:	00000068 	andeq	r0, r0, r8, rrx
     c84:	84520001 	ldrbhi	r0, [r2], #-1
     c88:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
     c8c:	01000000 	mrseq	r0, (UNDEF: 0)
     c90:	00965200 	addseq	r5, r6, r0, lsl #4
     c94:	009e0000 	addseq	r0, lr, r0
     c98:	00010000 	andeq	r0, r1, r0
     c9c:	0000a252 	andeq	sl, r0, r2, asr r2
     ca0:	0000ac00 	andeq	sl, r0, r0, lsl #24
     ca4:	52000100 	andpl	r0, r0, #0, 2
	...
     cb0:	0000001e 	andeq	r0, r0, lr, lsl r0
     cb4:	00000028 	andeq	r0, r0, r8, lsr #32
     cb8:	28520001 	ldmdacs	r2, {r0}^
     cbc:	30000000 	andcc	r0, r0, r0
     cc0:	01000000 	mrseq	r0, (UNDEF: 0)
     cc4:	00305400 	eorseq	r5, r0, r0, lsl #8
     cc8:	00320000 	eorseq	r0, r2, r0
     ccc:	00010000 	andeq	r0, r1, r0
     cd0:	00003252 	andeq	r3, r0, r2, asr r2
     cd4:	00003600 	andeq	r3, r0, r0, lsl #12
     cd8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     cdc:	00000036 	andeq	r0, r0, r6, lsr r0
     ce0:	00000060 	andeq	r0, r0, r0, rrx
     ce4:	9f300002 	svcls	0x00300002
     ce8:	00000064 	andeq	r0, r0, r4, rrx
     cec:	0000008e 	andeq	r0, r0, lr, lsl #1
     cf0:	96540001 	ldrbls	r0, [r4], -r1
     cf4:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
     cf8:	01000000 	mrseq	r0, (UNDEF: 0)
     cfc:	00a25200 	adceq	r5, r2, r0, lsl #4
     d00:	00a60000 	adceq	r0, r6, r0
     d04:	00010000 	andeq	r0, r1, r0
     d08:	0000a652 	andeq	sl, r0, r2, asr r6
     d0c:	0000aa00 	andeq	sl, r0, r0, lsl #20
     d10:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     d14:	000000aa 	andeq	r0, r0, sl, lsr #1
     d18:	000000ac 	andeq	r0, r0, ip, lsr #1
     d1c:	04720002 	ldrbteq	r0, [r2], #-2
     d20:	000000ac 	andeq	r0, r0, ip, lsr #1
     d24:	000000bc 	strheq	r0, [r0], -ip
     d28:	9f300002 	svcls	0x00300002
	...
     d34:	00000078 	andeq	r0, r0, r8, ror r0
     d38:	0000007a 	andeq	r0, r0, sl, ror r0
     d3c:	7a530001 	bvc	14c0d48 <_Min_Stack_Size+0x14c0b48>
     d40:	84000000 	strhi	r0, [r0], #-0
     d44:	03000000 	movweq	r0, #0
     d48:	9f047400 	svcls	0x00047400
	...
     d54:	00000078 	andeq	r0, r0, r8, ror r0
     d58:	00000084 	andeq	r0, r0, r4, lsl #1
     d5c:	00500001 	subseq	r0, r0, r1
     d60:	00000000 	andeq	r0, r0, r0
     d64:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     d68:	7a000000 	bvc	d70 <_Min_Stack_Size+0xb70>
     d6c:	06000000 	streq	r0, [r0], -r0
     d70:	73007000 	movwvc	r7, #0
     d74:	7a9f1c00 	bvc	fe7c7d7c <BootRAM+0xd73851d>
     d78:	84000000 	strhi	r0, [r0], #-0
     d7c:	01000000 	mrseq	r0, (UNDEF: 0)
     d80:	00005300 	andeq	r5, r0, r0, lsl #6
     d84:	00000000 	andeq	r0, r0, r0
     d88:	00080000 	andeq	r0, r8, r0
     d8c:	000a0000 	andeq	r0, sl, r0
     d90:	00030000 	andeq	r0, r3, r0
     d94:	0a9f0475 	beq	fe7c1f70 <BootRAM+0xd732711>
     d98:	10000000 	andne	r0, r0, r0
     d9c:	01000000 	mrseq	r0, (UNDEF: 0)
     da0:	00105500 	andseq	r5, r0, r0, lsl #10
     da4:	001c0000 	andseq	r0, ip, r0
     da8:	001a0000 	andseq	r0, sl, r0
     dac:	fc090371 	stc2	3, cr0, [r9], {113}	; 0x71
     db0:	1208231a 	andne	r2, r8, #1744830464	; 0x68000000
     db4:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
     db8:	4014163c 	andsmi	r1, r4, ip, lsr r6
     dbc:	2b22244b 	blcs	889ef0 <_Min_Stack_Size+0x889cf0>
     dc0:	16000128 	strne	r0, [r0], -r8, lsr #2
     dc4:	001c9f13 	andseq	r9, ip, r3, lsl pc
     dc8:	00bc0000 	adcseq	r0, ip, r0
     dcc:	001d0000 	andseq	r0, sp, r0
     dd0:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
     dd4:	1afc0903 	bne	fff031e8 <BootRAM+0xee73989>
     dd8:	40120823 	andsmi	r0, r2, r3, lsr #16
     ddc:	3c22244b 	cfstrscc	mvf2, [r2], #-300	; 0xfffffed4
     de0:	4b401416 	blmi	1005e40 <_Min_Stack_Size+0x1005c40>
     de4:	282b2224 	stmdacs	fp!, {r2, r5, r9, sp}
     de8:	13160001 	tstne	r6, #1
     dec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     df0:	00000000 	andeq	r0, r0, r0
     df4:	00002200 	andeq	r2, r0, r0, lsl #4
     df8:	00002400 	andeq	r2, r0, r0, lsl #8
     dfc:	73000600 	movwvc	r0, #1536	; 0x600
     e00:	1c007500 	cfstr32ne	mvfx7, [r0], {-0}
     e04:	0000249f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     e08:	00002a00 	andeq	r2, r0, r0, lsl #20
     e0c:	53000100 	movwpl	r0, #256	; 0x100
     e10:	0000002a 	andeq	r0, r0, sl, lsr #32
     e14:	0000002c 	andeq	r0, r0, ip, lsr #32
     e18:	00730006 	rsbseq	r0, r3, r6
     e1c:	9f1c0075 	svcls	0x001c0075
     e20:	0000002c 	andeq	r0, r0, ip, lsr #32
     e24:	00000036 	andeq	r0, r0, r6, lsr r0
     e28:	64530001 	ldrbvs	r0, [r3], #-1
     e2c:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
     e30:	01000000 	mrseq	r0, (UNDEF: 0)
     e34:	00845300 	addeq	r5, r4, r0, lsl #6
     e38:	008a0000 	addeq	r0, sl, r0
     e3c:	00010000 	andeq	r0, r1, r0
     e40:	00008a53 	andeq	r8, r0, r3, asr sl
     e44:	00008e00 	andeq	r8, r0, r0, lsl #28
     e48:	74000700 	strvc	r0, [r0], #-1792	; 0xfffff900
     e4c:	00750600 	rsbseq	r0, r5, r0, lsl #12
     e50:	00969f1c 	addseq	r9, r6, ip, lsl pc
     e54:	009e0000 	addseq	r0, lr, r0
     e58:	00010000 	andeq	r0, r1, r0
     e5c:	0000a253 	andeq	sl, r0, r3, asr r2
     e60:	0000a800 	andeq	sl, r0, r0, lsl #16
     e64:	53000100 	movwpl	r0, #256	; 0x100
     e68:	000000a8 	andeq	r0, r0, r8, lsr #1
     e6c:	000000aa 	andeq	r0, r0, sl, lsr #1
     e70:	00740007 	rsbseq	r0, r4, r7
     e74:	1c007506 	cfstr32ne	mvfx7, [r0], {6}
     e78:	0000aa9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
     e7c:	0000ac00 	andeq	sl, r0, r0, lsl #24
     e80:	72000800 	andvc	r0, r0, #0, 16
     e84:	75060604 	strvc	r0, [r6, #-1540]	; 0xfffff9fc
     e88:	009f1c00 	addseq	r1, pc, r0, lsl #24
     e8c:	00000000 	andeq	r0, r0, r0
     e90:	36000000 	strcc	r0, [r0], -r0
     e94:	60000000 	andvs	r0, r0, r0
     e98:	1d000000 	stcne	0, cr0, [r0, #-0]
     e9c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     ea0:	fc090323 	stc2	3, cr0, [r9], {35}	; 0x23
     ea4:	1208231a 	andne	r2, r8, #1744830464	; 0x68000000
     ea8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
     eac:	4014163c 	andsmi	r1, r4, ip, lsr r6
     eb0:	2b22244b 	blcs	889fe4 <_Min_Stack_Size+0x889de4>
     eb4:	16000128 	strne	r0, [r0], -r8, lsr #2
     eb8:	00ac9f13 	adceq	r9, ip, r3, lsl pc
     ebc:	00bc0000 	adcseq	r0, ip, r0
     ec0:	001d0000 	andseq	r0, sp, r0
     ec4:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
     ec8:	1afc0903 	bne	fff032dc <BootRAM+0xee73a7d>
     ecc:	40120823 	andsmi	r0, r2, r3, lsr #16
     ed0:	3c22244b 	cfstrscc	mvf2, [r2], #-300	; 0xfffffed4
     ed4:	4b401416 	blmi	1005f34 <_Min_Stack_Size+0x1005d34>
     ed8:	282b2224 	stmdacs	fp!, {r2, r5, r9, sp}
     edc:	13160001 	tstne	r6, #1
     ee0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ee4:	00000000 	andeq	r0, r0, r0
     ee8:	00003600 	andeq	r3, r0, r0, lsl #12
     eec:	00003e00 	andeq	r3, r0, r0, lsl #28
     ef0:	50000100 	andpl	r0, r0, r0, lsl #2
     ef4:	0000003e 	andeq	r0, r0, lr, lsr r0
     ef8:	00000060 	andeq	r0, r0, r0, rrx
     efc:	ac560001 	mrrcge	0, 0, r0, r6, cr1
     f00:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
     f04:	01000000 	mrseq	r0, (UNDEF: 0)
     f08:	00ae5000 	adceq	r5, lr, r0
     f0c:	00bc0000 	adcseq	r0, ip, r0
     f10:	00010000 	andeq	r0, r1, r0
     f14:	00000056 	andeq	r0, r0, r6, asr r0
     f18:	00000000 	andeq	r0, r0, r0
     f1c:	00004600 	andeq	r4, r0, r0, lsl #12
     f20:	00005800 	andeq	r5, r0, r0, lsl #16
     f24:	50000100 	andpl	r0, r0, r0, lsl #2
     f28:	00000058 	andeq	r0, r0, r8, asr r0
     f2c:	0000005b 	andeq	r0, r0, fp, asr r0
     f30:	7f730003 	svcvc	0x00730003
     f34:	00005c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     f38:	00005e00 	andeq	r5, r0, r0, lsl #28
     f3c:	50000100 	andpl	r0, r0, r0, lsl #2
     f40:	0000005e 	andeq	r0, r0, lr, asr r0
     f44:	00000060 	andeq	r0, r0, r0, rrx
     f48:	7f700003 	svcvc	0x00700003
     f4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     f50:	00000000 	andeq	r0, r0, r0
     f54:	00005000 	andeq	r5, r0, r0
     f58:	00006000 	andeq	r6, r0, r0
     f5c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     f6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f70:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     f74:	36000000 	strcc	r0, [r0], -r0
     f78:	04000000 	streq	r0, [r0], #-0
     f7c:	5001f300 	andpl	pc, r1, r0, lsl #6
     f80:	0000369f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
     f84:	00005200 	andeq	r5, r0, r0, lsl #4
     f88:	50000100 	andpl	r0, r0, r0, lsl #2
     f8c:	00000052 	andeq	r0, r0, r2, asr r0
     f90:	000000c6 	andeq	r0, r0, r6, asr #1
     f94:	00590001 	subseq	r0, r9, r1
	...
     fa0:	1c000000 	stcne	0, cr0, [r0], {-0}
     fa4:	01000000 	mrseq	r0, (UNDEF: 0)
     fa8:	001c5100 	andseq	r5, ip, r0, lsl #2
     fac:	00360000 	eorseq	r0, r6, r0
     fb0:	00010000 	andeq	r0, r1, r0
     fb4:	00003654 	andeq	r3, r0, r4, asr r6
     fb8:	00004000 	andeq	r4, r0, r0
     fbc:	51000100 	mrspl	r0, (UNDEF: 16)
     fc0:	00000040 	andeq	r0, r0, r0, asr #32
     fc4:	000000c6 	andeq	r0, r0, r6, asr #1
     fc8:	00540001 	subseq	r0, r4, r1
	...
     fd4:	1c000000 	stcne	0, cr0, [r0], {-0}
     fd8:	01000000 	mrseq	r0, (UNDEF: 0)
     fdc:	001c5200 	andseq	r5, ip, r0, lsl #4
     fe0:	00360000 	eorseq	r0, r6, r0
     fe4:	00010000 	andeq	r0, r1, r0
     fe8:	00003658 	andeq	r3, r0, r8, asr r6
     fec:	00003e00 	andeq	r3, r0, r0, lsl #28
     ff0:	52000100 	andpl	r0, r0, #0, 2
     ff4:	0000003e 	andeq	r0, r0, lr, lsr r0
     ff8:	000000c6 	andeq	r0, r0, r6, asr #1
     ffc:	00580001 	subseq	r0, r8, r1
	...
    1008:	12000000 	andne	r0, r0, #0
    100c:	01000000 	mrseq	r0, (UNDEF: 0)
    1010:	00125300 	andseq	r5, r2, r0, lsl #6
    1014:	00360000 	eorseq	r0, r6, r0
    1018:	00010000 	andeq	r0, r1, r0
    101c:	00003657 	andeq	r3, r0, r7, asr r6
    1020:	00003a00 	andeq	r3, r0, r0, lsl #20
    1024:	53000100 	movwpl	r0, #256	; 0x100
    1028:	0000003a 	andeq	r0, r0, sl, lsr r0
    102c:	000000c6 	andeq	r0, r0, r6, asr #1
    1030:	00570001 	subseq	r0, r7, r1
    1034:	00000000 	andeq	r0, r0, r0
    1038:	06000000 	streq	r0, [r0], -r0
    103c:	1c000000 	stcne	0, cr0, [r0], {-0}
    1040:	01000000 	mrseq	r0, (UNDEF: 0)
    1044:	001c5600 	andseq	r5, ip, r0, lsl #12
    1048:	002c0000 	eoreq	r0, ip, r0
    104c:	00010000 	andeq	r0, r1, r0
    1050:	00003a55 	andeq	r3, r0, r5, asr sl
    1054:	0000c600 	andeq	ip, r0, r0, lsl #12
    1058:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    1064:	0000006c 	andeq	r0, r0, ip, rrx
    1068:	00000077 	andeq	r0, r0, r7, ror r0
    106c:	77500001 	ldrbvc	r0, [r0, -r1]
    1070:	86000000 	strhi	r0, [r0], -r0
    1074:	01000000 	mrseq	r0, (UNDEF: 0)
    1078:	008c5b00 	addeq	r5, ip, r0, lsl #22
    107c:	00900000 	addseq	r0, r0, r0
    1080:	00010000 	andeq	r0, r1, r0
    1084:	00009050 	andeq	r9, r0, r0, asr r0
    1088:	0000a800 	andeq	sl, r0, r0, lsl #16
    108c:	5b000100 	blpl	1494 <_Min_Stack_Size+0x1294>
    1090:	000000a8 	andeq	r0, r0, r8, lsr #1
    1094:	000000ac 	andeq	r0, r0, ip, lsr #1
    1098:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    109c:	c6000000 	strgt	r0, [r0], -r0
    10a0:	01000000 	mrseq	r0, (UNDEF: 0)
    10a4:	00005b00 	andeq	r5, r0, r0, lsl #22
    10a8:	00000000 	andeq	r0, r0, r0
    10ac:	00540000 	subseq	r0, r4, r0
    10b0:	00a60000 	adceq	r0, r6, r0
    10b4:	00010000 	andeq	r0, r1, r0
    10b8:	0000a655 	andeq	sl, r0, r5, asr r6
    10bc:	0000a800 	andeq	sl, r0, r0, lsl #16
    10c0:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
    10c4:	0000a814 	andeq	sl, r0, r4, lsl r8
    10c8:	0000c600 	andeq	ip, r0, r0, lsl #12
    10cc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    10d8:	000000c8 	andeq	r0, r0, r8, asr #1
    10dc:	000000e4 	andeq	r0, r0, r4, ror #1
    10e0:	e4500001 	ldrb	r0, [r0], #-1
    10e4:	bc000000 	stclt	0, cr0, [r0], {-0}
    10e8:	01000001 	tsteq	r0, r1
    10ec:	01bc5b00 			; <UNDEFINED> instruction: 0x01bc5b00
    10f0:	01c80000 	biceq	r0, r8, r0
    10f4:	00040000 	andeq	r0, r4, r0
    10f8:	9f5001f3 	svcls	0x005001f3
	...
    1104:	000000c8 	andeq	r0, r0, r8, asr #1
    1108:	000000e6 	andeq	r0, r0, r6, ror #1
    110c:	e6510001 	ldrb	r0, [r1], -r1
    1110:	bc000000 	stclt	0, cr0, [r0], {-0}
    1114:	01000001 	tsteq	r0, r1
    1118:	01bc5500 			; <UNDEFINED> instruction: 0x01bc5500
    111c:	01c80000 	biceq	r0, r8, r0
    1120:	00040000 	andeq	r0, r4, r0
    1124:	9f5101f3 	svcls	0x005101f3
	...
    1130:	000000c8 	andeq	r0, r0, r8, asr #1
    1134:	000000e6 	andeq	r0, r0, r6, ror #1
    1138:	e6520001 	ldrb	r0, [r2], -r1
    113c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    1140:	01000001 	tsteq	r0, r1
    1144:	00005800 	andeq	r5, r0, r0, lsl #16
    1148:	00000000 	andeq	r0, r0, r0
    114c:	00d20000 	sbcseq	r0, r2, r0
    1150:	00e60000 	rsceq	r0, r6, r0
    1154:	00020000 	andeq	r0, r2, r0
    1158:	00e69f30 	rsceq	r9, r6, r0, lsr pc
    115c:	016c0000 	cmneq	ip, r0
    1160:	00010000 	andeq	r0, r1, r0
    1164:	00017054 	andeq	r7, r1, r4, asr r0
    1168:	00017c00 	andeq	r7, r1, r0, lsl #24
    116c:	30000200 	andcc	r0, r0, r0, lsl #4
    1170:	00017c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    1174:	0001bc00 	andeq	fp, r1, r0, lsl #24
    1178:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    117c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    1180:	000001c8 	andeq	r0, r0, r8, asr #3
    1184:	9f300002 	svcls	0x00300002
	...
    1190:	000000ee 	andeq	r0, r0, lr, ror #1
    1194:	000000f4 	strdeq	r0, [r0], -r4
    1198:	f4530001 			; <UNDEFINED> instruction: 0xf4530001
    119c:	fc000000 	stc2	0, cr0, [r0], {-0}
    11a0:	01000000 	mrseq	r0, (UNDEF: 0)
    11a4:	00fc5700 	rscseq	r5, ip, r0, lsl #14
    11a8:	01060000 	mrseq	r0, (UNDEF: 6)
    11ac:	00010000 	andeq	r0, r1, r0
    11b0:	0001505a 	andeq	r5, r1, sl, asr r0
    11b4:	00017000 	andeq	r7, r1, r0
    11b8:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    11bc:	00000182 	andeq	r0, r0, r2, lsl #3
    11c0:	00000186 	andeq	r0, r0, r6, lsl #3
    11c4:	00570001 	subseq	r0, r7, r1
    11c8:	00000000 	andeq	r0, r0, r0
    11cc:	d2000000 	andle	r0, r0, #0
    11d0:	e6000000 	str	r0, [r0], -r0
    11d4:	02000000 	andeq	r0, r0, #0
    11d8:	e6007200 	str	r7, [r0], -r0, lsl #4
    11dc:	bc000000 	stclt	0, cr0, [r0], {-0}
    11e0:	01000001 	tsteq	r0, r1
    11e4:	00005600 	andeq	r5, r0, r0, lsl #12
    11e8:	00000000 	andeq	r0, r0, r0
    11ec:	00c80000 	sbceq	r0, r8, r0
    11f0:	00e60000 	rsceq	r0, r6, r0
    11f4:	00020000 	andeq	r0, r2, r0
    11f8:	01769f30 	cmneq	r6, r0, lsr pc
    11fc:	017e0000 	cmneq	lr, r0
    1200:	00020000 	andeq	r0, r2, r0
    1204:	017e0076 	cmneq	lr, r6, ror r0
    1208:	01800000 	orreq	r0, r0, r0
    120c:	00010000 	andeq	r0, r1, r0
    1210:	00000059 	andeq	r0, r0, r9, asr r0
    1214:	00000000 	andeq	r0, r0, r0
    1218:	00012600 	andeq	r2, r1, r0, lsl #12
    121c:	00013300 	andeq	r3, r1, r0, lsl #6
    1220:	50000100 	andpl	r0, r0, r0, lsl #2
    1224:	00000133 	andeq	r0, r0, r3, lsr r1
    1228:	00000142 	andeq	r0, r0, r2, asr #2
    122c:	54910002 	ldrpl	r0, [r1], #2
    1230:	00000142 	andeq	r0, r0, r2, asr #2
    1234:	00000156 	andeq	r0, r0, r6, asr r1
    1238:	8c530001 	mrrchi	0, 0, r0, r3, cr1
    123c:	96000001 	strls	r0, [r0], -r1
    1240:	01000001 	tsteq	r0, r1
    1244:	01965000 	orrseq	r5, r6, r0
    1248:	01990000 	orrseq	r0, r9, r0
    124c:	00010000 	andeq	r0, r1, r0
    1250:	00000053 	andeq	r0, r0, r3, asr r0
    1254:	00000000 	andeq	r0, r0, r0
    1258:	00010600 	andeq	r0, r1, r0, lsl #12
    125c:	00014e00 	andeq	r4, r1, r0, lsl #28
    1260:	5a000100 	bpl	1668 <_Min_Stack_Size+0x1468>
    1264:	00000186 	andeq	r0, r0, r6, lsl #3
    1268:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    126c:	005a0001 	subseq	r0, sl, r1
    1270:	00000000 	andeq	r0, r0, r0
    1274:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1278:	50000001 	andpl	r0, r0, r1
    127c:	01000001 	tsteq	r0, r1
    1280:	01505700 	cmpeq	r0, r0, lsl #14
    1284:	01560000 	cmpeq	r6, r0
    1288:	00020000 	andeq	r0, r2, r0
    128c:	01861475 	orreq	r1, r6, r5, ror r4
    1290:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
    1294:	00010000 	andeq	r0, r1, r0
    1298:	00000057 	andeq	r0, r0, r7, asr r0
    129c:	00000000 	andeq	r0, r0, r0
    12a0:	0001c800 	andeq	ip, r1, r0, lsl #16
    12a4:	0001e400 	andeq	lr, r1, r0, lsl #8
    12a8:	50000100 	andpl	r0, r0, r0, lsl #2
    12ac:	000001e4 	andeq	r0, r0, r4, ror #3
    12b0:	000003d2 	ldrdeq	r0, [r0], -r2
    12b4:	d2580001 	subsle	r0, r8, #1
    12b8:	d7000003 	strle	r0, [r0, -r3]
    12bc:	01000003 	tsteq	r0, r3
    12c0:	03d75000 	bicseq	r5, r7, #0
    12c4:	04040000 	streq	r0, [r4], #-0
    12c8:	00010000 	andeq	r0, r1, r0
    12cc:	00000058 	andeq	r0, r0, r8, asr r0
    12d0:	00000000 	andeq	r0, r0, r0
    12d4:	0001c800 	andeq	ip, r1, r0, lsl #16
    12d8:	0001d000 	andeq	sp, r1, r0
    12dc:	51000100 	mrspl	r0, (UNDEF: 16)
    12e0:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    12e4:	00000404 	andeq	r0, r0, r4, lsl #8
    12e8:	00570001 	subseq	r0, r7, r1
    12ec:	00000000 	andeq	r0, r0, r0
    12f0:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    12f4:	e4000001 	str	r0, [r0], #-1
    12f8:	01000001 	tsteq	r0, r1
    12fc:	01e45200 	mvneq	r5, r0, lsl #4
    1300:	02040000 	andeq	r0, r4, #0
    1304:	00010000 	andeq	r0, r1, r0
    1308:	0002045a 	andeq	r0, r2, sl, asr r4
    130c:	0003d200 	andeq	sp, r3, r0, lsl #4
    1310:	f3000400 	vshl.u8	d0, d0, d0
    1314:	d29f5201 	addsle	r5, pc, #268435456	; 0x10000000
    1318:	d7000003 	strle	r0, [r0, -r3]
    131c:	01000003 	tsteq	r0, r3
    1320:	03d75200 	bicseq	r5, r7, #0, 4
    1324:	04040000 	streq	r0, [r4], #-0
    1328:	00010000 	andeq	r0, r1, r0
    132c:	0000005a 	andeq	r0, r0, sl, asr r0
    1330:	00000000 	andeq	r0, r0, r0
    1334:	0001e400 	andeq	lr, r1, r0, lsl #8
    1338:	00020a00 	andeq	r0, r2, r0, lsl #20
    133c:	5a000100 	bpl	1744 <_Min_Stack_Size+0x1544>
    1340:	0000020a 	andeq	r0, r0, sl, lsl #4
    1344:	0000020c 	andeq	r0, r0, ip, lsl #4
    1348:	0c540001 	mrrceq	0, 0, r0, r4, cr1
    134c:	12000002 	andne	r0, r0, #2
    1350:	03000002 	movweq	r0, #2
    1354:	9f7f7400 	svcls	0x007f7400
    1358:	00000212 	andeq	r0, r0, r2, lsl r2
    135c:	00000216 	andeq	r0, r0, r6, lsl r2
    1360:	16540001 	ldrbne	r0, [r4], -r1
    1364:	3c000002 	stccc	0, cr0, [r0], {2}
    1368:	03000002 	movweq	r0, #2
    136c:	9f7f7400 	svcls	0x007f7400
    1370:	0000023c 	andeq	r0, r0, ip, lsr r2
    1374:	00000244 	andeq	r0, r0, r4, asr #4
    1378:	01740003 	cmneq	r4, r3
    137c:	0002449f 	muleq	r2, pc, r4	; <UNPREDICTABLE>
    1380:	00025600 	andeq	r5, r2, r0, lsl #12
    1384:	53000100 	movwpl	r0, #256	; 0x100
    1388:	00000256 	andeq	r0, r0, r6, asr r2
    138c:	00000262 	andeq	r0, r0, r2, ror #4
    1390:	625a0001 	subsvs	r0, sl, #1
    1394:	6a000002 	bvs	13a4 <_Min_Stack_Size+0x11a4>
    1398:	01000002 	tsteq	r0, r2
    139c:	026a5300 	rsbeq	r5, sl, #0, 6
    13a0:	02a20000 	adceq	r0, r2, #0
    13a4:	00010000 	andeq	r0, r1, r0
    13a8:	0002a25a 	andeq	sl, r2, sl, asr r2
    13ac:	0002aa00 	andeq	sl, r2, r0, lsl #20
    13b0:	7a000300 	bvc	1fb8 <_Min_Stack_Size+0x1db8>
    13b4:	02b49f7f 	adcseq	r9, r4, #508	; 0x1fc
    13b8:	031c0000 	tsteq	ip, #0
    13bc:	00010000 	andeq	r0, r1, r0
    13c0:	00032e5a 	andeq	r2, r3, sl, asr lr
    13c4:	00033600 	andeq	r3, r3, r0, lsl #12
    13c8:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    13cc:	03369f7f 	teqeq	r6, #508	; 0x1fc
    13d0:	03440000 	movteq	r0, #16384	; 0x4000
    13d4:	00010000 	andeq	r0, r1, r0
    13d8:	0003445a 	andeq	r4, r3, sl, asr r4
    13dc:	00035800 	andeq	r5, r3, r0, lsl #16
    13e0:	7a000300 	bvc	1fe8 <_Min_Stack_Size+0x1de8>
    13e4:	03589f01 	cmpeq	r8, #1, 30
    13e8:	03600000 	cmneq	r0, #0
    13ec:	00010000 	andeq	r0, r1, r0
    13f0:	0003605a 	andeq	r6, r3, sl, asr r0
    13f4:	00036800 	andeq	r6, r3, r0, lsl #16
    13f8:	7a000300 	bvc	2000 <_Min_Stack_Size+0x1e00>
    13fc:	03749f7f 	cmneq	r4, #508	; 0x1fc
    1400:	03820000 	orreq	r0, r2, #0
    1404:	00010000 	andeq	r0, r1, r0
    1408:	0003825a 	andeq	r8, r3, sl, asr r2
    140c:	00038a00 	andeq	r8, r3, r0, lsl #20
    1410:	7a000300 	bvc	2018 <_Min_Stack_Size+0x1e18>
    1414:	038a9f01 	orreq	r9, sl, #1, 30
    1418:	038c0000 	orreq	r0, ip, #0
    141c:	00010000 	andeq	r0, r1, r0
    1420:	00038c5a 	andeq	r8, r3, sl, asr ip
    1424:	00039200 	andeq	r9, r3, r0, lsl #4
    1428:	7a000300 	bvc	2030 <_Min_Stack_Size+0x1e30>
    142c:	03929f01 	orrseq	r9, r2, #1, 30
    1430:	03b20000 			; <UNDEFINED> instruction: 0x03b20000
    1434:	00010000 	andeq	r0, r1, r0
    1438:	0003b250 	andeq	fp, r3, r0, asr r2
    143c:	0003d200 	andeq	sp, r3, r0, lsl #4
    1440:	5a000100 	bpl	1848 <_Min_Stack_Size+0x1648>
	...
    144c:	000001e4 	andeq	r0, r0, r4, ror #3
    1450:	00000308 	andeq	r0, r0, r8, lsl #6
    1454:	08560001 	ldmdaeq	r6, {r0}^
    1458:	0c000003 	stceq	0, cr0, [r0], {3}
    145c:	01000003 	tsteq	r0, r3
    1460:	030c5000 	movweq	r5, #49152	; 0xc000
    1464:	03280000 			; <UNDEFINED> instruction: 0x03280000
    1468:	00010000 	andeq	r0, r1, r0
    146c:	00032e56 	andeq	r2, r3, r6, asr lr
    1470:	0003d000 	andeq	sp, r3, r0
    1474:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1478:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    147c:	000003d2 	ldrdeq	r0, [r0], -r2
    1480:	00500001 	subseq	r0, r0, r1
    1484:	00000000 	andeq	r0, r0, r0
    1488:	1a000000 	bne	1490 <_Min_Stack_Size+0x1290>
    148c:	20000002 	andcs	r0, r0, r2
    1490:	06000002 	streq	r0, [r0], -r2
    1494:	7a007400 	bvc	1e49c <_Min_Stack_Size+0x1e29c>
    1498:	2e9f1c00 	cdpcs	12, 9, cr1, cr15, cr0, {0}
    149c:	36000003 	strcc	r0, [r0], -r3
    14a0:	06000003 	streq	r0, [r0], -r3
    14a4:	7a007400 	bvc	1e4ac <_Min_Stack_Size+0x1e2ac>
    14a8:	009f1c00 	addseq	r1, pc, r0, lsl #24
    14ac:	00000000 	andeq	r0, r0, r0
    14b0:	e4000000 	str	r0, [r0], #-0
    14b4:	0a000001 	beq	14c0 <_Min_Stack_Size+0x12c0>
    14b8:	01000002 	tsteq	r0, r2
    14bc:	020a5a00 	andeq	r5, sl, #0, 20
    14c0:	020c0000 	andeq	r0, ip, #0
    14c4:	00010000 	andeq	r0, r1, r0
    14c8:	00020c54 	andeq	r0, r2, r4, asr ip
    14cc:	00025600 	andeq	r5, r2, r0, lsl #12
    14d0:	5a000100 	bpl	18d8 <_Min_Stack_Size+0x16d8>
    14d4:	00000256 	andeq	r0, r0, r6, asr r2
    14d8:	0000025a 	andeq	r0, r0, sl, asr r2
    14dc:	6e500001 	cdpvs	0, 5, cr0, cr0, cr1, {0}
    14e0:	7a000002 	bvc	14f0 <_Min_Stack_Size+0x12f0>
    14e4:	01000002 	tsteq	r0, r2
    14e8:	02c05000 	sbceq	r5, r0, #0
    14ec:	02c80000 	sbceq	r0, r8, #0
    14f0:	00010000 	andeq	r0, r1, r0
    14f4:	0002ee50 	andeq	lr, r2, r0, asr lr
    14f8:	00030200 	andeq	r0, r3, r0, lsl #4
    14fc:	50000100 	andpl	r0, r0, r0, lsl #2
    1500:	00000312 	andeq	r0, r0, r2, lsl r3
    1504:	0000031c 	andeq	r0, r0, ip, lsl r3
    1508:	2e5a0001 	cdpcs	0, 5, cr0, cr10, cr1, {0}
    150c:	36000003 	strcc	r0, [r0], -r3
    1510:	01000003 	tsteq	r0, r3
    1514:	03365a00 	teqeq	r6, #0, 20
    1518:	03440000 	movteq	r0, #16384	; 0x4000
    151c:	00010000 	andeq	r0, r1, r0
    1520:	0003be50 	andeq	fp, r3, r0, asr lr
    1524:	0003ca00 	andeq	ip, r3, r0, lsl #20
    1528:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1534:	00000250 	andeq	r0, r0, r0, asr r2
    1538:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    153c:	d0030006 	andle	r0, r3, r6
    1540:	9f0800a0 	svcls	0x000800a0
    1544:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    1548:	0000031c 	andeq	r0, r0, ip, lsl r3
    154c:	d8030006 	stmdale	r3, {r1, r2}
    1550:	9f0800a0 	svcls	0x000800a0
    1554:	00000336 	andeq	r0, r0, r6, lsr r3
    1558:	00000344 	andeq	r0, r0, r4, asr #6
    155c:	d8030006 	stmdale	r3, {r1, r2}
    1560:	9f0800a0 	svcls	0x000800a0
    1564:	00000344 	andeq	r0, r0, r4, asr #6
    1568:	000003be 			; <UNDEFINED> instruction: 0x000003be
    156c:	d0030006 	andle	r0, r3, r6
    1570:	9f0800a0 	svcls	0x000800a0
    1574:	000003be 			; <UNDEFINED> instruction: 0x000003be
    1578:	000003d2 	ldrdeq	r0, [r0], -r2
    157c:	d8030006 	stmdale	r3, {r1, r2}
    1580:	9f0800a0 	svcls	0x000800a0
	...
    1590:	0000005a 	andeq	r0, r0, sl, asr r0
    1594:	5a500001 	bpl	14015a0 <_Min_Stack_Size+0x14013a0>
    1598:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    159c:	01000000 	mrseq	r0, (UNDEF: 0)
    15a0:	00ee5600 	rsceq	r5, lr, r0, lsl #12
    15a4:	01120000 	tsteq	r2, r0
    15a8:	00010000 	andeq	r0, r1, r0
    15ac:	00011250 	andeq	r1, r1, r0, asr r2
    15b0:	00013200 	andeq	r3, r1, r0, lsl #4
    15b4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    15c4:	0000000a 	andeq	r0, r0, sl
    15c8:	0a510001 	beq	14415d4 <_Min_Stack_Size+0x14413d4>
    15cc:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    15d0:	01000000 	mrseq	r0, (UNDEF: 0)
    15d4:	00785400 	rsbseq	r5, r8, r0, lsl #8
    15d8:	00800000 	addeq	r0, r0, r0
    15dc:	00040000 	andeq	r0, r4, r0
    15e0:	9f5101f3 	svcls	0x005101f3
    15e4:	00000080 	andeq	r0, r0, r0, lsl #1
    15e8:	000000d2 	ldrdeq	r0, [r0], -r2
    15ec:	d2540001 	subsle	r0, r4, #1
    15f0:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    15f4:	03000000 	movweq	r0, #0
    15f8:	9f667400 	svcls	0x00667400
    15fc:	000000ee 	andeq	r0, r0, lr, ror #1
    1600:	0000012c 	andeq	r0, r0, ip, lsr #2
    1604:	2c540001 	mrrccs	0, 0, r0, r4, cr1
    1608:	32000001 	andcc	r0, r0, #1
    160c:	04000001 	streq	r0, [r0], #-1
    1610:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1614:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1620:	00001000 	andeq	r1, r0, r0
    1624:	52000100 	andpl	r0, r0, #0, 2
    1628:	00000010 	andeq	r0, r0, r0, lsl r0
    162c:	00000078 	andeq	r0, r0, r8, ror r0
    1630:	78590001 	ldmdavc	r9, {r0}^
    1634:	80000000 	andhi	r0, r0, r0
    1638:	04000000 	streq	r0, [r0], #-0
    163c:	5201f300 	andpl	pc, r1, #0, 6
    1640:	0000809f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1644:	0000ca00 	andeq	ip, r0, r0, lsl #20
    1648:	59000100 	stmdbpl	r0, {r8}
    164c:	000000ca 	andeq	r0, r0, sl, asr #1
    1650:	000000ee 	andeq	r0, r0, lr, ror #1
    1654:	01f30004 	mvnseq	r0, r4
    1658:	00ee9f52 	rsceq	r9, lr, r2, asr pc
    165c:	01240000 			; <UNDEFINED> instruction: 0x01240000
    1660:	00010000 	andeq	r0, r1, r0
    1664:	00012459 	andeq	r2, r1, r9, asr r4
    1668:	00013200 	andeq	r3, r1, r0, lsl #4
    166c:	f3000400 	vshl.u8	d0, d0, d0
    1670:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
    167c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    1680:	01000000 	mrseq	r0, (UNDEF: 0)
    1684:	002e5300 	eoreq	r5, lr, r0, lsl #6
    1688:	01320000 	teqeq	r2, r0
    168c:	00010000 	andeq	r0, r1, r0
    1690:	00000057 	andeq	r0, r0, r7, asr r0
	...
    169c:	00008000 	andeq	r8, r0, r0
    16a0:	91000200 	mrsls	r0, R8_usr
    16a4:	00008000 	andeq	r8, r0, r0
    16a8:	00013200 	andeq	r3, r1, r0, lsl #4
    16ac:	91000200 	mrsls	r0, R8_usr
	...
    16b8:	00008200 	andeq	r8, r0, r0, lsl #4
    16bc:	00008c00 	andeq	r8, r0, r0, lsl #24
    16c0:	30000200 	andcc	r0, r0, r0, lsl #4
    16c4:	00008c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    16c8:	00009e00 	andeq	r9, r0, r0, lsl #28
    16cc:	53000100 	movwpl	r0, #256	; 0x100
    16d0:	0000009e 	muleq	r0, lr, r0
    16d4:	000000a0 	andeq	r0, r0, r0, lsr #1
    16d8:	a0520001 	subsge	r0, r2, r1
    16dc:	a6000000 	strge	r0, [r0], -r0
    16e0:	03000000 	movweq	r0, #0
    16e4:	9f017300 	svcls	0x00017300
    16e8:	000000a6 	andeq	r0, r0, r6, lsr #1
    16ec:	000000af 	andeq	r0, r0, pc, lsr #1
    16f0:	b4530001 	ldrblt	r0, [r3], #-1
    16f4:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    16f8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    16fc:	060c7400 	streq	r7, [ip], -r0, lsl #8
    1700:	1c060079 	stcne	0, cr0, [r6], {121}	; 0x79
    1704:	0000be9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    1708:	0000cc00 	andeq	ip, r0, r0, lsl #24
    170c:	30000200 	andcc	r0, r0, r0, lsl #4
    1710:	0000d09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1714:	0000ee00 	andeq	lr, r0, r0, lsl #28
    1718:	59000100 	stmdbpl	r0, {r8}
    171c:	00000106 	andeq	r0, r0, r6, lsl #2
    1720:	00000110 	andeq	r0, r0, r0, lsl r1
    1724:	9f300002 	svcls	0x00300002
    1728:	00000110 	andeq	r0, r0, r0, lsl r1
    172c:	00000112 	andeq	r0, r0, r2, lsl r1
    1730:	12530001 	subsne	r0, r3, #1
    1734:	24000001 	strcs	r0, [r0], #-1
    1738:	08000001 	stmdaeq	r0, {r0}
    173c:	060c7400 	streq	r7, [ip], -r0, lsl #8
    1740:	1c060079 	stcne	0, cr0, [r6], {121}	; 0x79
    1744:	0001249f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    1748:	00012c00 	andeq	r2, r1, r0, lsl #24
    174c:	59000100 	stmdbpl	r0, {r8}
	...
    1758:	00000046 	andeq	r0, r0, r6, asr #32
    175c:	0000005a 	andeq	r0, r0, sl, asr r0
    1760:	9f300002 	svcls	0x00300002
    1764:	0000005a 	andeq	r0, r0, sl, asr r0
    1768:	00000078 	andeq	r0, r0, r8, ror r0
    176c:	80550001 	subshi	r0, r5, r1
    1770:	82000000 	andhi	r0, r0, #0
    1774:	01000000 	mrseq	r0, (UNDEF: 0)
    1778:	00fa5500 	rscseq	r5, sl, r0, lsl #10
    177c:	01060000 	mrseq	r0, (UNDEF: 6)
    1780:	00020000 	andeq	r0, r2, r0
    1784:	00009f30 	andeq	r9, r0, r0, lsr pc
    1788:	00000000 	andeq	r0, r0, r0
    178c:	00d00000 	sbcseq	r0, r0, r0
    1790:	00d60000 	sbcseq	r0, r6, r0
    1794:	00020000 	andeq	r0, r2, r0
    1798:	00d69f30 	sbcseq	r9, r6, r0, lsr pc
    179c:	00ee0000 	rsceq	r0, lr, r0
    17a0:	00010000 	andeq	r0, r1, r0
    17a4:	00012655 	andeq	r2, r1, r5, asr r6
    17a8:	00012c00 	andeq	r2, r1, r0, lsl #24
    17ac:	30000200 	andcc	r0, r0, r0, lsl #4
    17b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    17b4:	00000000 	andeq	r0, r0, r0
    17b8:	00013400 	andeq	r3, r1, r0, lsl #8
    17bc:	00014c00 	andeq	r4, r1, r0, lsl #24
    17c0:	50000100 	andpl	r0, r0, r0, lsl #2
    17c4:	0000014c 	andeq	r0, r0, ip, asr #2
    17c8:	000003dc 	ldrdeq	r0, [r0], -ip
    17cc:	00560001 	subseq	r0, r6, r1
    17d0:	00000000 	andeq	r0, r0, r0
    17d4:	34000000 	strcc	r0, [r0], #-0
    17d8:	3c000001 	stccc	0, cr0, [r0], {1}
    17dc:	01000001 	tsteq	r0, r1
    17e0:	013c5100 	teqeq	ip, r0, lsl #2
    17e4:	03dc0000 	bicseq	r0, ip, #0
    17e8:	00010000 	andeq	r0, r1, r0
    17ec:	00000054 	andeq	r0, r0, r4, asr r0
    17f0:	00000000 	andeq	r0, r0, r0
    17f4:	00013400 	andeq	r3, r1, r0, lsl #8
    17f8:	00016a00 	andeq	r6, r1, r0, lsl #20
    17fc:	52000100 	andpl	r0, r0, #0, 2
    1800:	0000016a 	andeq	r0, r0, sl, ror #2
    1804:	00000186 	andeq	r0, r0, r6, lsl #3
    1808:	86570001 	ldrbhi	r0, [r7], -r1
    180c:	9c000001 	stcls	0, cr0, [r0], {1}
    1810:	01000001 	tsteq	r0, r1
    1814:	019c5200 	orrseq	r5, ip, r0, lsl #4
    1818:	02040000 	andeq	r0, r4, #0
    181c:	00010000 	andeq	r0, r1, r0
    1820:	00020457 	andeq	r0, r2, r7, asr r4
    1824:	00020800 	andeq	r0, r2, r0, lsl #16
    1828:	52000100 	andpl	r0, r0, #0, 2
    182c:	00000208 	andeq	r0, r0, r8, lsl #4
    1830:	0000028c 	andeq	r0, r0, ip, lsl #5
    1834:	8c570001 	mrrchi	0, 0, r0, r7, cr1
    1838:	96000002 	strls	r0, [r0], -r2
    183c:	01000002 	tsteq	r0, r2
    1840:	02965200 	addseq	r5, r6, #0, 4
    1844:	03060000 	movweq	r0, #24576	; 0x6000
    1848:	00010000 	andeq	r0, r1, r0
    184c:	00030657 	andeq	r0, r3, r7, asr r6
    1850:	00031000 	andeq	r1, r3, r0
    1854:	52000100 	andpl	r0, r0, #0, 2
    1858:	00000310 	andeq	r0, r0, r0, lsl r3
    185c:	0000032a 	andeq	r0, r0, sl, lsr #6
    1860:	2a570001 	bcs	15c186c <_Min_Stack_Size+0x15c166c>
    1864:	2e000003 	cdpcs	0, 0, cr0, cr0, cr3, {0}
    1868:	01000003 	tsteq	r0, r3
    186c:	032e5200 			; <UNDEFINED> instruction: 0x032e5200
    1870:	034e0000 	movteq	r0, #57344	; 0xe000
    1874:	00010000 	andeq	r0, r1, r0
    1878:	00034e57 	andeq	r4, r3, r7, asr lr
    187c:	00036000 	andeq	r6, r3, r0
    1880:	52000100 	andpl	r0, r0, #0, 2
    1884:	00000360 	andeq	r0, r0, r0, ror #6
    1888:	0000037a 	andeq	r0, r0, sl, ror r3
    188c:	7a570001 	bvc	15c1898 <_Min_Stack_Size+0x15c1698>
    1890:	7e000003 	cdpvc	0, 0, cr0, cr0, cr3, {0}
    1894:	01000003 	tsteq	r0, r3
    1898:	037e5200 	cmneq	lr, #0, 4
    189c:	03dc0000 	bicseq	r0, ip, #0
    18a0:	00010000 	andeq	r0, r1, r0
    18a4:	00000057 	andeq	r0, r0, r7, asr r0
    18a8:	00000000 	andeq	r0, r0, r0
    18ac:	00013400 	andeq	r3, r1, r0, lsl #8
    18b0:	00016c00 	andeq	r6, r1, r0, lsl #24
    18b4:	53000100 	movwpl	r0, #256	; 0x100
    18b8:	0000016c 	andeq	r0, r0, ip, ror #2
    18bc:	00000186 	andeq	r0, r0, r6, lsl #3
    18c0:	86580001 	ldrbhi	r0, [r8], -r1
    18c4:	a4000001 	strge	r0, [r0], #-1
    18c8:	01000001 	tsteq	r0, r1
    18cc:	01a45300 			; <UNDEFINED> instruction: 0x01a45300
    18d0:	02040000 	andeq	r0, r4, #0
    18d4:	00010000 	andeq	r0, r1, r0
    18d8:	00020458 	andeq	r0, r2, r8, asr r4
    18dc:	00020600 	andeq	r0, r2, r0, lsl #12
    18e0:	53000100 	movwpl	r0, #256	; 0x100
    18e4:	00000206 	andeq	r0, r0, r6, lsl #4
    18e8:	0000028c 	andeq	r0, r0, ip, lsl #5
    18ec:	8c580001 	mrrchi	0, 0, r0, r8, cr1
    18f0:	98000002 	stmdals	r0, {r1}
    18f4:	01000002 	tsteq	r0, r2
    18f8:	02985300 	addseq	r5, r8, #0, 6
    18fc:	03060000 	movweq	r0, #24576	; 0x6000
    1900:	00010000 	andeq	r0, r1, r0
    1904:	00030658 	andeq	r0, r3, r8, asr r6
    1908:	00031200 	andeq	r1, r3, r0, lsl #4
    190c:	53000100 	movwpl	r0, #256	; 0x100
    1910:	00000312 	andeq	r0, r0, r2, lsl r3
    1914:	0000032a 	andeq	r0, r0, sl, lsr #6
    1918:	2a580001 	bcs	1601924 <_Min_Stack_Size+0x1601724>
    191c:	2c000003 	stccs	0, cr0, [r0], {3}
    1920:	01000003 	tsteq	r0, r3
    1924:	032c5300 			; <UNDEFINED> instruction: 0x032c5300
    1928:	034e0000 	movteq	r0, #57344	; 0xe000
    192c:	00010000 	andeq	r0, r1, r0
    1930:	00034e58 	andeq	r4, r3, r8, asr lr
    1934:	00035000 	andeq	r5, r3, r0
    1938:	53000100 	movwpl	r0, #256	; 0x100
    193c:	00000350 	andeq	r0, r0, r0, asr r3
    1940:	0000035c 	andeq	r0, r0, ip, asr r3
    1944:	5c580001 	mrrcpl	0, 0, r0, r8, cr1
    1948:	5e000003 	cdppl	0, 0, cr0, cr0, cr3, {0}
    194c:	01000003 	tsteq	r0, r3
    1950:	035e5300 	cmpeq	lr, #0, 6
    1954:	037a0000 	cmneq	sl, #0
    1958:	00010000 	andeq	r0, r1, r0
    195c:	00037a58 	andeq	r7, r3, r8, asr sl
    1960:	00037c00 	andeq	r7, r3, r0, lsl #24
    1964:	53000100 	movwpl	r0, #256	; 0x100
    1968:	0000037c 	andeq	r0, r0, ip, ror r3
    196c:	000003dc 	ldrdeq	r0, [r0], -ip
    1970:	00580001 	subseq	r0, r8, r1
    1974:	00000000 	andeq	r0, r0, r0
    1978:	34000000 	strcc	r0, [r0], #-0
    197c:	18000001 	stmdane	r0, {r0}
    1980:	02000002 	andeq	r0, r0, #2
    1984:	8c009100 	stfhid	f1, [r0], {-0}
    1988:	cc000002 	stcgt	0, cr0, [r0], {2}
    198c:	02000003 	andeq	r0, r0, #3
    1990:	ce009100 	mvfgts	f1, f0
    1994:	dc000003 	stcle	0, cr0, [r0], {3}
    1998:	02000003 	andeq	r0, r0, #3
    199c:	00009100 	andeq	r9, r0, r0, lsl #2
    19a0:	00000000 	andeq	r0, r0, r0
    19a4:	ba000000 	blt	19ac <_Min_Stack_Size+0x17ac>
    19a8:	f8000001 			; <UNDEFINED> instruction: 0xf8000001
    19ac:	01000001 	tsteq	r0, r1
    19b0:	02985300 	addseq	r5, r8, #0, 6
    19b4:	02bc0000 	adcseq	r0, ip, #0
    19b8:	00010000 	andeq	r0, r1, r0
    19bc:	0002bc53 	andeq	fp, r2, r3, asr ip
    19c0:	0002d200 	andeq	sp, r2, r0, lsl #4
    19c4:	52000100 	andpl	r0, r0, #0, 2
    19c8:	000002ea 	andeq	r0, r0, sl, ror #5
    19cc:	000002f8 	strdeq	r0, [r0], -r8
    19d0:	f8530001 			; <UNDEFINED> instruction: 0xf8530001
    19d4:	06000002 	streq	r0, [r0], -r2
    19d8:	02000003 	andeq	r0, r0, #3
    19dc:	1e9f3000 	cdpne	0, 9, cr3, cr15, cr0, {0}
    19e0:	2a000003 	bcs	19f4 <_Min_Stack_Size+0x17f4>
    19e4:	01000003 	tsteq	r0, r3
    19e8:	036a5300 	cmneq	sl, #0, 6
    19ec:	037a0000 	cmneq	sl, #0
    19f0:	00010000 	andeq	r0, r1, r0
    19f4:	00000053 	andeq	r0, r0, r3, asr r0
    19f8:	00000000 	andeq	r0, r0, r0
    19fc:	0001ba00 	andeq	fp, r1, r0, lsl #20
    1a00:	0001d400 	andeq	sp, r1, r0, lsl #8
    1a04:	40000200 	andmi	r0, r0, r0, lsl #4
    1a08:	0001d49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    1a0c:	0001f800 	andeq	pc, r1, r0, lsl #16
    1a10:	51000100 	mrspl	r0, (UNDEF: 16)
    1a14:	000002a8 	andeq	r0, r0, r8, lsr #5
    1a18:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    1a1c:	9f3a0002 	svcls	0x003a0002
    1a20:	000002ea 	andeq	r0, r0, sl, ror #5
    1a24:	000002ee 	andeq	r0, r0, lr, ror #5
    1a28:	9f400002 	svcls	0x00400002
    1a2c:	000002ee 	andeq	r0, r0, lr, ror #5
    1a30:	000002f4 	strdeq	r0, [r0], -r4
    1a34:	9f3a0002 	svcls	0x003a0002
	...
    1a40:	0000022e 	andeq	r0, r0, lr, lsr #4
    1a44:	00000230 	andeq	r0, r0, r0, lsr r2
    1a48:	30500001 	subscc	r0, r0, r1
    1a4c:	3a000002 	bcc	1a5c <_Min_Stack_Size+0x185c>
    1a50:	03000002 	movweq	r0, #2
    1a54:	9f7f7000 	svcls	0x007f7000
	...
    1a60:	0000014a 	andeq	r0, r0, sl, asr #2
    1a64:	000001f8 	strdeq	r0, [r0], -r8
    1a68:	f85c0001 			; <UNDEFINED> instruction: 0xf85c0001
    1a6c:	04000001 	streq	r0, [r0], #-1
    1a70:	01000002 	tsteq	r0, r2
    1a74:	02045500 	andeq	r5, r4, #0, 10
    1a78:	021e0000 	andseq	r0, lr, #0
    1a7c:	00010000 	andeq	r0, r1, r0
    1a80:	00021e5c 	andeq	r1, r2, ip, asr lr
    1a84:	00025800 	andeq	r5, r2, r0, lsl #16
    1a88:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    1a8c:	0000028c 	andeq	r0, r0, ip, lsl #5
    1a90:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    1a94:	b85c0001 	ldmdalt	ip, {r0}^
    1a98:	ca000002 	bgt	1aa8 <_Min_Stack_Size+0x18a8>
    1a9c:	01000002 	tsteq	r0, r2
    1aa0:	02ca5500 	sbceq	r5, sl, #0, 10
    1aa4:	02ce0000 	sbceq	r0, lr, #0
    1aa8:	00030000 	andeq	r0, r3, r0
    1aac:	ce9f0175 	mrcgt	1, 4, r0, cr15, cr5, {3}
    1ab0:	e0000002 	and	r0, r0, r2
    1ab4:	01000002 	tsteq	r0, r2
    1ab8:	02e05500 	rsceq	r5, r0, #0, 10
    1abc:	02e80000 	rsceq	r0, r8, #0
    1ac0:	00030000 	andeq	r0, r3, r0
    1ac4:	e89f7f75 	ldm	pc, {r0, r2, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    1ac8:	ea000002 	b	1ad8 <_Min_Stack_Size+0x18d8>
    1acc:	01000002 	tsteq	r0, r2
    1ad0:	02ea5500 	rsceq	r5, sl, #0, 10
    1ad4:	03000000 	movweq	r0, #0
    1ad8:	00010000 	andeq	r0, r1, r0
    1adc:	0003005c 	andeq	r0, r3, ip, asr r0
    1ae0:	00030600 	andeq	r0, r3, r0, lsl #12
    1ae4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    1ae8:	00000306 	andeq	r0, r0, r6, lsl #6
    1aec:	00000334 	andeq	r0, r0, r4, lsr r3
    1af0:	345c0001 	ldrbcc	r0, [ip], #-1
    1af4:	4e000003 	cdpmi	0, 0, cr0, cr0, cr3, {0}
    1af8:	01000003 	tsteq	r0, r3
    1afc:	034e5500 	movteq	r5, #58624	; 0xe500
    1b00:	035a0000 	cmpeq	sl, #0
    1b04:	00010000 	andeq	r0, r1, r0
    1b08:	00035a5c 	andeq	r5, r3, ip, asr sl
    1b0c:	00035c00 	andeq	r5, r3, r0, lsl #24
    1b10:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    1b14:	0000035c 	andeq	r0, r0, ip, asr r3
    1b18:	00000386 	andeq	r0, r0, r6, lsl #7
    1b1c:	865c0001 	ldrbhi	r0, [ip], -r1
    1b20:	90000003 	andls	r0, r0, r3
    1b24:	01000003 	tsteq	r0, r3
    1b28:	03905500 	orrseq	r5, r0, #0, 10
    1b2c:	03ce0000 	biceq	r0, lr, #0
    1b30:	00010000 	andeq	r0, r1, r0
    1b34:	0003ce5c 	andeq	ip, r3, ip, asr lr
    1b38:	0003dc00 	andeq	sp, r3, r0, lsl #24
    1b3c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    1b48:	0000014a 	andeq	r0, r0, sl, asr #2
    1b4c:	00000172 	andeq	r0, r0, r2, ror r1
    1b50:	e4030006 	str	r0, [r3], #-6
    1b54:	9f0800a0 	svcls	0x000800a0
    1b58:	00000172 	andeq	r0, r0, r2, ror r1
    1b5c:	00000186 	andeq	r0, r0, r6, lsl #3
    1b60:	865e0001 	ldrbhi	r0, [lr], -r1
    1b64:	a8000001 	stmdage	r0, {r0}
    1b68:	06000001 	streq	r0, [r0], -r1
    1b6c:	a0e40300 	rscge	r0, r4, r0, lsl #6
    1b70:	a89f0800 	ldmge	pc, {fp}	; <UNPREDICTABLE>
    1b74:	b0000001 	andlt	r0, r0, r1
    1b78:	06000001 	streq	r0, [r0], -r1
    1b7c:	a0f80300 	rscsge	r0, r8, r0, lsl #6
    1b80:	b09f0800 	addslt	r0, pc, r0, lsl #16
    1b84:	f8000001 			; <UNDEFINED> instruction: 0xf8000001
    1b88:	01000001 	tsteq	r0, r1
    1b8c:	02045e00 	andeq	r5, r4, #0, 28
    1b90:	021e0000 	andseq	r0, lr, #0
    1b94:	00060000 	andeq	r0, r6, r0
    1b98:	00a0e403 	adceq	lr, r0, r3, lsl #8
    1b9c:	028c9f08 	addeq	r9, ip, #8, 30
    1ba0:	02b60000 	adcseq	r0, r6, #0
    1ba4:	00060000 	andeq	r0, r6, r0
    1ba8:	00a0e403 	adceq	lr, r0, r3, lsl #8
    1bac:	02ea9f08 	rsceq	r9, sl, #8, 30
    1bb0:	02ee0000 	rsceq	r0, lr, #0
    1bb4:	00010000 	andeq	r0, r1, r0
    1bb8:	0002ee5e 	andeq	lr, r2, lr, asr lr
    1bbc:	0002f400 	andeq	pc, r2, r0, lsl #8
    1bc0:	03000600 	movweq	r0, #1536	; 0x600
    1bc4:	0800a0e4 	stmdaeq	r0, {r2, r5, r6, r7, sp, pc}
    1bc8:	0003069f 	muleq	r3, pc, r6	; <UNPREDICTABLE>
    1bcc:	0003dc00 	andeq	sp, r3, r0, lsl #24
    1bd0:	03000600 	movweq	r0, #1536	; 0x600
    1bd4:	0800a0e4 	stmdaeq	r0, {r2, r5, r6, r7, sp, pc}
    1bd8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1bdc:	00000000 	andeq	r0, r0, r0
    1be0:	00033c00 	andeq	r3, r3, r0, lsl #24
    1be4:	00034200 	andeq	r4, r3, r0, lsl #4
    1be8:	50000100 	andpl	r0, r0, r0, lsl #2
    1bec:	000003ce 	andeq	r0, r0, lr, asr #7
    1bf0:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1bf4:	00500001 	subseq	r0, r0, r1
    1bf8:	00000000 	andeq	r0, r0, r0
    1bfc:	4c000000 	stcmi	0, cr0, [r0], {-0}
    1c00:	5a000002 	bpl	1c10 <_Min_Stack_Size+0x1a10>
    1c04:	02000002 	andeq	r0, r0, #2
    1c08:	5a9f3000 	bpl	fe7cdc10 <BootRAM+0xd73e3b1>
    1c0c:	76000002 	strvc	r0, [r0], -r2
    1c10:	01000002 	tsteq	r0, r2
    1c14:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    1c20:	000a0000 	andeq	r0, sl, r0
    1c24:	00010000 	andeq	r0, r1, r0
    1c28:	00000a50 	andeq	r0, r0, r0, asr sl
    1c2c:	00002000 	andeq	r2, r0, r0
    1c30:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    1c34:	00000020 	andeq	r0, r0, r0, lsr #32
    1c38:	00000024 	andeq	r0, r0, r4, lsr #32
    1c3c:	01f30004 	mvnseq	r0, r4
    1c40:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    1c4c:	000f0000 	andeq	r0, pc, r0
    1c50:	00010000 	andeq	r0, r1, r0
    1c54:	00000f51 	andeq	r0, r0, r1, asr pc
    1c58:	00002400 	andeq	r2, r0, r0, lsl #8
    1c5c:	f3000400 	vshl.u8	d0, d0, d0
    1c60:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    1c6c:	16000000 	strne	r0, [r0], -r0
    1c70:	01000000 	mrseq	r0, (UNDEF: 0)
    1c74:	00165000 	andseq	r5, r6, r0
    1c78:	00840000 	addeq	r0, r4, r0
    1c7c:	00040000 	andeq	r0, r4, r0
    1c80:	9f5001f3 	svcls	0x005001f3
    1c84:	00000084 	andeq	r0, r0, r4, lsl #1
    1c88:	00000088 	andeq	r0, r0, r8, lsl #1
    1c8c:	88500001 	ldmdahi	r0, {r0}^
    1c90:	8c000000 	stchi	0, cr0, [r0], {-0}
    1c94:	04000000 	streq	r0, [r0], #-0
    1c98:	5001f300 	andpl	pc, r1, r0, lsl #6
    1c9c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1ca8:	00003000 	andeq	r3, r0, r0
    1cac:	51000100 	mrspl	r0, (UNDEF: 16)
    1cb0:	00000030 	andeq	r0, r0, r0, lsr r0
    1cb4:	00000054 	andeq	r0, r0, r4, asr r0
    1cb8:	01f30004 	mvnseq	r0, r4
    1cbc:	00549f51 	subseq	r9, r4, r1, asr pc
    1cc0:	00620000 	rsbeq	r0, r2, r0
    1cc4:	00010000 	andeq	r0, r1, r0
    1cc8:	00006251 	andeq	r6, r0, r1, asr r2
    1ccc:	00008400 	andeq	r8, r0, r0, lsl #8
    1cd0:	f3000400 	vshl.u8	d0, d0, d0
    1cd4:	849f5101 	ldrhi	r5, [pc], #257	; 1cdc <_Min_Stack_Size+0x1adc>
    1cd8:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    1cdc:	01000000 	mrseq	r0, (UNDEF: 0)
    1ce0:	00885100 	addeq	r5, r8, r0, lsl #2
    1ce4:	008c0000 	addeq	r0, ip, r0
    1ce8:	00040000 	andeq	r0, r4, r0
    1cec:	9f5101f3 	svcls	0x005101f3
	...
    1cfc:	0000000a 	andeq	r0, r0, sl
    1d00:	0a520001 	beq	1481d0c <_Min_Stack_Size+0x1481b0c>
    1d04:	16000000 	strne	r0, [r0], -r0
    1d08:	01000000 	mrseq	r0, (UNDEF: 0)
    1d0c:	00625300 	rsbeq	r5, r2, r0, lsl #6
    1d10:	007c0000 	rsbseq	r0, ip, r0
    1d14:	00030000 	andeq	r0, r3, r0
    1d18:	7c9f7c73 	ldcvc	12, cr7, [pc], {115}	; 0x73
    1d1c:	84000000 	strhi	r0, [r0], #-0
    1d20:	01000000 	mrseq	r0, (UNDEF: 0)
    1d24:	00845300 	addeq	r5, r4, r0, lsl #6
    1d28:	00880000 	addeq	r0, r8, r0
    1d2c:	00010000 	andeq	r0, r1, r0
    1d30:	00000052 	andeq	r0, r0, r2, asr r0
	...
    1d3c:	00002000 	andeq	r2, r0, r0
    1d40:	50000100 	andpl	r0, r0, r0, lsl #2
    1d44:	00000020 	andeq	r0, r0, r0, lsr #32
    1d48:	00000026 	andeq	r0, r0, r6, lsr #32
    1d4c:	7f720003 	svcvc	0x00720003
    1d50:	0000269f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    1d54:	00002a00 	andeq	r2, r0, r0, lsl #20
    1d58:	52000100 	andpl	r0, r0, #0, 2
    1d5c:	0000002a 	andeq	r0, r0, sl, lsr #32
    1d60:	00000044 	andeq	r0, r0, r4, asr #32
    1d64:	44500001 	ldrbmi	r0, [r0], #-1
    1d68:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    1d6c:	03000000 	movweq	r0, #0
    1d70:	9f7f7200 	svcls	0x007f7200
    1d74:	00000048 	andeq	r0, r0, r8, asr #32
    1d78:	0000004c 	andeq	r0, r0, ip, asr #32
    1d7c:	4c520001 	mrrcmi	0, 0, r0, r2, cr1
    1d80:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    1d84:	01000000 	mrseq	r0, (UNDEF: 0)
    1d88:	00545000 	subseq	r5, r4, r0
    1d8c:	007c0000 	rsbseq	r0, ip, r0
    1d90:	00010000 	andeq	r0, r1, r0
    1d94:	00007c50 	andeq	r7, r0, r0, asr ip
    1d98:	00008400 	andeq	r8, r0, r0, lsl #8
    1d9c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1da0:	00000084 	andeq	r0, r0, r4, lsl #1
    1da4:	0000008a 	andeq	r0, r0, sl, lsl #1
    1da8:	00500001 	subseq	r0, r0, r1
    1dac:	00000000 	andeq	r0, r0, r0
    1db0:	06000000 	streq	r0, [r0], -r0
    1db4:	52000000 	andpl	r0, r0, #0
    1db8:	01000000 	mrseq	r0, (UNDEF: 0)
    1dbc:	00525500 	subseq	r5, r2, r0, lsl #10
    1dc0:	00540000 	subseq	r0, r4, r0
    1dc4:	00040000 	andeq	r0, r4, r0
    1dc8:	9f5101f3 	svcls	0x005101f3
    1dcc:	00000054 	andeq	r0, r0, r4, asr r0
    1dd0:	0000008c 	andeq	r0, r0, ip, lsl #1
    1dd4:	00550001 	subseq	r0, r5, r1
    1dd8:	00000000 	andeq	r0, r0, r0
    1ddc:	54000000 	strpl	r0, [r0], #-0
    1de0:	7c000000 	stcvc	0, cr0, [r0], {-0}
    1de4:	01000000 	mrseq	r0, (UNDEF: 0)
    1de8:	007c5000 	rsbseq	r5, ip, r0
    1dec:	00840000 	addeq	r0, r4, r0
    1df0:	00010000 	andeq	r0, r1, r0
    1df4:	00000054 	andeq	r0, r0, r4, asr r0
    1df8:	00000000 	andeq	r0, r0, r0
    1dfc:	00005e00 	andeq	r5, r0, r0, lsl #28
    1e00:	00008400 	andeq	r8, r0, r0, lsl #8
    1e04:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    1e10:	00000062 	andeq	r0, r0, r2, rrx
    1e14:	00000084 	andeq	r0, r0, r4, lsl #1
    1e18:	20080003 	andcs	r0, r8, r3
    1e1c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1e28:	00000e00 	andeq	r0, r0, r0, lsl #28
    1e2c:	51000100 	mrspl	r0, (UNDEF: 16)
    1e30:	0000000e 	andeq	r0, r0, lr
    1e34:	00000022 	andeq	r0, r0, r2, lsr #32
    1e38:	01f30004 	mvnseq	r0, r4
    1e3c:	00229f51 	eoreq	r9, r2, r1, asr pc
    1e40:	007a0000 	rsbseq	r0, sl, r0
    1e44:	00010000 	andeq	r0, r1, r0
    1e48:	00007a51 	andeq	r7, r0, r1, asr sl
    1e4c:	0000b800 	andeq	fp, r0, r0, lsl #16
    1e50:	f3000400 	vshl.u8	d0, d0, d0
    1e54:	b89f5101 	ldmlt	pc, {r0, r8, ip, lr}	; <UNPREDICTABLE>
    1e58:	c0000000 	andgt	r0, r0, r0
    1e5c:	01000000 	mrseq	r0, (UNDEF: 0)
    1e60:	00c05100 	sbceq	r5, r0, r0, lsl #2
    1e64:	00c60000 	sbceq	r0, r6, r0
    1e68:	00040000 	andeq	r0, r4, r0
    1e6c:	9f5101f3 	svcls	0x005101f3
	...
    1e7c:	0000000e 	andeq	r0, r0, lr
    1e80:	0e520001 	cdpeq	0, 5, cr0, cr2, cr1, {0}
    1e84:	14000000 	strne	r0, [r0], #-0
    1e88:	03000000 	movweq	r0, #0
    1e8c:	9f7f7200 	svcls	0x007f7200
    1e90:	00000014 	andeq	r0, r0, r4, lsl r0
    1e94:	00000022 	andeq	r0, r0, r2, lsr #32
    1e98:	0073000b 	rsbseq	r0, r3, fp
    1e9c:	22007320 	andcs	r7, r0, #32, 6	; 0x80000000
    1ea0:	225201f3 	subscs	r0, r2, #-1073741764	; 0xc000003c
    1ea4:	0000229f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    1ea8:	00003800 	andeq	r3, r0, r0, lsl #16
    1eac:	52000100 	andpl	r0, r0, #0, 2
    1eb0:	00000038 	andeq	r0, r0, r8, lsr r0
    1eb4:	0000003e 	andeq	r0, r0, lr, lsr r0
    1eb8:	3e550001 	cdpcc	0, 5, cr0, cr5, cr1, {0}
    1ebc:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    1ec0:	03000000 	movweq	r0, #0
    1ec4:	9f107500 	svcls	0x00107500
    1ec8:	00000058 	andeq	r0, r0, r8, asr r0
    1ecc:	0000007a 	andeq	r0, r0, sl, ror r0
    1ed0:	7a550001 	bvc	1541edc <_Min_Stack_Size+0x1541cdc>
    1ed4:	84000000 	strhi	r0, [r0], #-0
    1ed8:	01000000 	mrseq	r0, (UNDEF: 0)
    1edc:	00845e00 	addeq	r5, r4, r0, lsl #28
    1ee0:	00960000 	addseq	r0, r6, r0
    1ee4:	00010000 	andeq	r0, r1, r0
    1ee8:	0000a454 	andeq	sl, r0, r4, asr r4
    1eec:	0000a600 	andeq	sl, r0, r0, lsl #12
    1ef0:	72000300 	andvc	r0, r0, #0, 6
    1ef4:	00b89f7f 	adcseq	r9, r8, pc, ror pc
    1ef8:	00c00000 	sbceq	r0, r0, r0
    1efc:	00010000 	andeq	r0, r1, r0
    1f00:	0000c052 	andeq	ip, r0, r2, asr r0
    1f04:	0000c200 	andeq	ip, r0, r0, lsl #4
    1f08:	72000300 	andvc	r0, r0, #0, 6
    1f0c:	00c29f7f 	sbceq	r9, r2, pc, ror pc
    1f10:	00c60000 	sbceq	r0, r6, r0
    1f14:	00010000 	andeq	r0, r1, r0
    1f18:	0000005e 	andeq	r0, r0, lr, asr r0
	...
    1f24:	00000e00 	andeq	r0, r0, r0, lsl #28
    1f28:	50000100 	andpl	r0, r0, r0, lsl #2
    1f2c:	0000000e 	andeq	r0, r0, lr
    1f30:	00000014 	andeq	r0, r0, r4, lsl r0
    1f34:	14510001 	ldrbne	r0, [r1], #-1
    1f38:	22000000 	andcs	r0, r0, #0
    1f3c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1f40:	f3007000 	vhadd.u8	d7, d0, d0
    1f44:	31225201 			; <UNDEFINED> instruction: 0x31225201
    1f48:	00229f1c 	eoreq	r9, r2, ip, lsl pc
    1f4c:	00a40000 	adceq	r0, r4, r0
    1f50:	00010000 	andeq	r0, r1, r0
    1f54:	0000a450 	andeq	sl, r0, r0, asr r4
    1f58:	0000a800 	andeq	sl, r0, r0, lsl #16
    1f5c:	53000100 	movwpl	r0, #256	; 0x100
    1f60:	000000a8 	andeq	r0, r0, r8, lsr #1
    1f64:	000000aa 	andeq	r0, r0, sl, lsr #1
    1f68:	01730003 	cmneq	r3, r3
    1f6c:	0000b89f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    1f70:	0000c000 	andeq	ip, r0, r0
    1f74:	50000100 	andpl	r0, r0, r0, lsl #2
    1f78:	000000c0 	andeq	r0, r0, r0, asr #1
    1f7c:	000000c2 	andeq	r0, r0, r2, asr #1
    1f80:	c2530001 	subsgt	r0, r3, #1
    1f84:	c6000000 	strgt	r0, [r0], -r0
    1f88:	01000000 	mrseq	r0, (UNDEF: 0)
    1f8c:	00005000 	andeq	r5, r0, r0
	...
    1f98:	000c0000 	andeq	r0, ip, r0
    1f9c:	00010000 	andeq	r0, r1, r0
    1fa0:	00000c51 	andeq	r0, r0, r1, asr ip
    1fa4:	00001800 	andeq	r1, r0, r0, lsl #16
    1fa8:	53000100 	movwpl	r0, #256	; 0x100
    1fac:	00000018 	andeq	r0, r0, r8, lsl r0
    1fb0:	0000001e 	andeq	r0, r0, lr, lsl r0
    1fb4:	01730003 	cmneq	r3, r3
    1fb8:	00001e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    1fbc:	00002200 	andeq	r2, r0, r0, lsl #4
    1fc0:	53000100 	movwpl	r0, #256	; 0x100
    1fc4:	00000022 	andeq	r0, r0, r2, lsr #32
    1fc8:	0000007a 	andeq	r0, r0, sl, ror r0
    1fcc:	7a510001 	bvc	1441fd8 <_Min_Stack_Size+0x1441dd8>
    1fd0:	a4000000 	strge	r0, [r0], #-0
    1fd4:	04000000 	streq	r0, [r0], #-0
    1fd8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1fdc:	0000a49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    1fe0:	0000ae00 	andeq	sl, r0, r0, lsl #28
    1fe4:	51000100 	mrspl	r0, (UNDEF: 16)
    1fe8:	000000ae 	andeq	r0, r0, lr, lsr #1
    1fec:	000000b4 	strheq	r0, [r0], -r4
    1ff0:	7f710003 	svcvc	0x00710003
    1ff4:	0000b49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    1ff8:	0000b600 	andeq	fp, r0, r0, lsl #12
    1ffc:	51000100 	mrspl	r0, (UNDEF: 16)
    2000:	000000b8 	strheq	r0, [r0], -r8
    2004:	000000c2 	andeq	r0, r0, r2, asr #1
    2008:	c2510001 	subsgt	r0, r1, #1
    200c:	c6000000 	strgt	r0, [r0], -r0
    2010:	04000000 	streq	r0, [r0], #-0
    2014:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2018:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    201c:	00000000 	andeq	r0, r0, r0
    2020:	00007a00 	andeq	r7, r0, r0, lsl #20
    2024:	00007c00 	andeq	r7, r0, r0, lsl #24
    2028:	70000600 	andvc	r0, r0, r0, lsl #12
    202c:	22007300 	andcs	r7, r0, #0, 6
    2030:	00007c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    2034:	00008400 	andeq	r8, r0, r0, lsl #8
    2038:	53000100 	movwpl	r0, #256	; 0x100
    203c:	000000c2 	andeq	r0, r0, r2, asr #1
    2040:	000000c6 	andeq	r0, r0, r6, asr #1
    2044:	00530001 	subseq	r0, r3, r1
    2048:	00000000 	andeq	r0, r0, r0
    204c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2050:	42000000 	andmi	r0, r0, #0
    2054:	03000000 	movweq	r0, #0
    2058:	9f747300 	svcls	0x00747300
    205c:	00000042 	andeq	r0, r0, r2, asr #32
    2060:	0000004c 	andeq	r0, r0, ip, asr #32
    2064:	78730003 	ldmdavc	r3!, {r0, r1}^
    2068:	00004c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    206c:	00005800 	andeq	r5, r0, r0, lsl #16
    2070:	73000300 	movwvc	r0, #768	; 0x300
    2074:	00589f7c 	subseq	r9, r8, ip, ror pc
    2078:	00600000 	rsbeq	r0, r0, r0
    207c:	00010000 	andeq	r0, r1, r0
    2080:	00006053 	andeq	r6, r0, r3, asr r0
    2084:	00006a00 	andeq	r6, r0, r0, lsl #20
    2088:	73000300 	movwvc	r0, #768	; 0x300
    208c:	007a9f70 	rsbseq	r9, sl, r0, ror pc
    2090:	00840000 	addeq	r0, r4, r0
    2094:	00010000 	andeq	r0, r1, r0
    2098:	00008451 	andeq	r8, r0, r1, asr r4
    209c:	00008800 	andeq	r8, r0, r0, lsl #16
    20a0:	56000100 	strpl	r0, [r0], -r0, lsl #2
    20a4:	00000088 	andeq	r0, r0, r8, lsl #1
    20a8:	0000008a 	andeq	r0, r0, sl, lsl #1
    20ac:	7c760003 	ldclvc	0, cr0, [r6], #-12
    20b0:	00008a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    20b4:	0000a400 	andeq	sl, r0, r0, lsl #8
    20b8:	56000100 	strpl	r0, [r0], -r0, lsl #2
    20bc:	000000c2 	andeq	r0, r0, r2, asr #1
    20c0:	000000c6 	andeq	r0, r0, r6, asr #1
    20c4:	00510001 	subseq	r0, r1, r1
	...
    20d0:	0f000000 	svceq	0x00000000
    20d4:	01000000 	mrseq	r0, (UNDEF: 0)
    20d8:	000f5000 	andeq	r5, pc, r0
    20dc:	00380000 	eorseq	r0, r8, r0
    20e0:	00010000 	andeq	r0, r1, r0
    20e4:	00003856 	andeq	r3, r0, r6, asr r8
    20e8:	00003b00 	andeq	r3, r0, r0, lsl #22
    20ec:	50000100 	andpl	r0, r0, r0, lsl #2
    20f0:	0000003b 	andeq	r0, r0, fp, lsr r0
    20f4:	00000042 	andeq	r0, r0, r2, asr #32
    20f8:	42560001 	subsmi	r0, r6, #1
    20fc:	47000000 	strmi	r0, [r0, -r0]
    2100:	01000000 	mrseq	r0, (UNDEF: 0)
    2104:	00475000 	subeq	r5, r7, r0
    2108:	00480000 	subeq	r0, r8, r0
    210c:	00040000 	andeq	r0, r4, r0
    2110:	9f5001f3 	svcls	0x005001f3
	...
    2120:	0000000f 	andeq	r0, r0, pc
    2124:	0f510001 	svceq	0x00510001
    2128:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    212c:	01000000 	mrseq	r0, (UNDEF: 0)
    2130:	00385400 	eorseq	r5, r8, r0, lsl #8
    2134:	003b0000 	eorseq	r0, fp, r0
    2138:	00010000 	andeq	r0, r1, r0
    213c:	00003b51 	andeq	r3, r0, r1, asr fp
    2140:	00004000 	andeq	r4, r0, r0
    2144:	f3000400 	vshl.u8	d0, d0, d0
    2148:	409f5101 	addsmi	r5, pc, r1, lsl #2
    214c:	42000000 	andmi	r0, r0, #0
    2150:	01000000 	mrseq	r0, (UNDEF: 0)
    2154:	00425400 	subeq	r5, r2, r0, lsl #8
    2158:	00440000 	subeq	r0, r4, r0
    215c:	00010000 	andeq	r0, r1, r0
    2160:	00004451 	andeq	r4, r0, r1, asr r4
    2164:	00004800 	andeq	r4, r0, r0, lsl #16
    2168:	f3000400 	vshl.u8	d0, d0, d0
    216c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    2178:	0f000000 	svceq	0x00000000
    217c:	01000000 	mrseq	r0, (UNDEF: 0)
    2180:	000f5200 	andeq	r5, pc, r0, lsl #4
    2184:	00380000 	eorseq	r0, r8, r0
    2188:	00010000 	andeq	r0, r1, r0
    218c:	00003855 	andeq	r3, r0, r5, asr r8
    2190:	00003b00 	andeq	r3, r0, r0, lsl #22
    2194:	52000100 	andpl	r0, r0, #0, 2
    2198:	0000003b 	andeq	r0, r0, fp, lsr r0
    219c:	00000042 	andeq	r0, r0, r2, asr #32
    21a0:	42550001 	subsmi	r0, r5, #1
    21a4:	47000000 	strmi	r0, [r0, -r0]
    21a8:	01000000 	mrseq	r0, (UNDEF: 0)
    21ac:	00475200 	subeq	r5, r7, r0, lsl #4
    21b0:	00480000 	subeq	r0, r8, r0
    21b4:	00040000 	andeq	r0, r4, r0
    21b8:	9f5201f3 	svcls	0x005201f3
	...
    21c4:	00000020 	andeq	r0, r0, r0, lsr #32
    21c8:	0000002b 	andeq	r0, r0, fp, lsr #32
    21cc:	2b500001 	blcs	14021d8 <_Min_Stack_Size+0x1401fd8>
    21d0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    21d4:	01000000 	mrseq	r0, (UNDEF: 0)
    21d8:	00405700 	subeq	r5, r0, r0, lsl #14
    21dc:	00420000 	subeq	r0, r2, r0
    21e0:	00010000 	andeq	r0, r1, r0
    21e4:	00000050 	andeq	r0, r0, r0, asr r0
	...
    21f0:	00000d00 	andeq	r0, r0, r0, lsl #26
    21f4:	50000100 	andpl	r0, r0, r0, lsl #2
    21f8:	0000000d 	andeq	r0, r0, sp
    21fc:	00000016 	andeq	r0, r0, r6, lsl r0
    2200:	16550001 	ldrbne	r0, [r5], -r1
    2204:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    2208:	01000000 	mrseq	r0, (UNDEF: 0)
    220c:	00195000 	andseq	r5, r9, r0
    2210:	001a0000 	andseq	r0, sl, r0
    2214:	00040000 	andeq	r0, r4, r0
    2218:	9f5001f3 	svcls	0x005001f3
	...
    2228:	00000006 	andeq	r0, r0, r6
    222c:	06510001 	ldrbeq	r0, [r1], -r1
    2230:	16000000 	strne	r0, [r0], -r0
    2234:	01000000 	mrseq	r0, (UNDEF: 0)
    2238:	00165400 	andseq	r5, r6, r0, lsl #8
    223c:	00190000 	andseq	r0, r9, r0
    2240:	00010000 	andeq	r0, r1, r0
    2244:	00001951 	andeq	r1, r0, r1, asr r9
    2248:	00001a00 	andeq	r1, r0, r0, lsl #20
    224c:	f3000400 	vshl.u8	d0, d0, d0
    2250:	009f5101 	addseq	r5, pc, r1, lsl #2
    2254:	00000000 	andeq	r0, r0, r0
    2258:	1c000000 	stcne	0, cr0, [r0], {-0}
    225c:	34000000 	strcc	r0, [r0], #-0
    2260:	01000000 	mrseq	r0, (UNDEF: 0)
    2264:	00345000 	eorseq	r5, r4, r0
    2268:	00cc0000 	sbceq	r0, ip, r0
    226c:	00010000 	andeq	r0, r1, r0
    2270:	0000cc55 	andeq	ip, r0, r5, asr ip
    2274:	0000cf00 	andeq	ip, r0, r0, lsl #30
    2278:	50000100 	andpl	r0, r0, r0, lsl #2
    227c:	000000cf 	andeq	r0, r0, pc, asr #1
    2280:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2284:	01f30004 	mvnseq	r0, r4
    2288:	00d09f50 	sbcseq	r9, r0, r0, asr pc
    228c:	00e00000 	rsceq	r0, r0, r0
    2290:	00010000 	andeq	r0, r1, r0
    2294:	00000050 	andeq	r0, r0, r0, asr r0
    2298:	00000000 	andeq	r0, r0, r0
    229c:	00003800 	andeq	r3, r0, r0, lsl #16
    22a0:	00003f00 	andeq	r3, r0, r0, lsl #30
    22a4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    22b0:	00000036 	andeq	r0, r0, r6, lsr r0
    22b4:	0000003a 	andeq	r0, r0, sl, lsr r0
    22b8:	3a510001 	bcc	14422c4 <_Min_Stack_Size+0x14420c4>
    22bc:	4a000000 	bmi	22c4 <_Min_Stack_Size+0x20c4>
    22c0:	01000000 	mrseq	r0, (UNDEF: 0)
    22c4:	004a5400 	subeq	r5, sl, r0, lsl #8
    22c8:	00520000 	subseq	r0, r2, r0
    22cc:	00010000 	andeq	r0, r1, r0
    22d0:	00000051 	andeq	r0, r0, r1, asr r0
	...
    22dc:	00000400 	andeq	r0, r0, r0, lsl #8
    22e0:	50000100 	andpl	r0, r0, r0, lsl #2
    22e4:	00000004 	andeq	r0, r0, r4
    22e8:	00000014 	andeq	r0, r0, r4, lsl r0
    22ec:	01f30004 	mvnseq	r0, r4
    22f0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    22fc:	000a0000 	andeq	r0, sl, r0
    2300:	00010000 	andeq	r0, r1, r0
    2304:	00000a51 	andeq	r0, r0, r1, asr sl
    2308:	00001400 	andeq	r1, r0, r0, lsl #8
    230c:	f3000400 	vshl.u8	d0, d0, d0
    2310:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    231c:	06000000 	streq	r0, [r0], -r0
    2320:	03000000 	movweq	r0, #0
    2324:	9f7c7100 	svcls	0x007c7100
    2328:	00000006 	andeq	r0, r0, r6
    232c:	0000000a 	andeq	r0, r0, sl
    2330:	00700008 	rsbseq	r0, r0, r8
    2334:	34220071 	strtcc	r0, [r2], #-113	; 0xffffff8f
    2338:	000a9f1c 	andeq	r9, sl, ip, lsl pc
    233c:	00100000 	andseq	r0, r0, r0
    2340:	00090000 	andeq	r0, r9, r0
    2344:	705101f3 	ldrshvc	r0, [r1], #-19	; 0xffffffed
    2348:	1c342200 	lfmne	f2, 4, [r4], #-0
    234c:	0000109f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2350:	00001400 	andeq	r1, r0, r0, lsl #8
    2354:	f3000d00 	vpadd.f32	d0, d0, d0
    2358:	01f35101 	mvnseq	r5, r1, lsl #2
    235c:	061c3451 			; <UNDEFINED> instruction: 0x061c3451
    2360:	9f1c3422 	svcls	0x001c3422
	...
    236c:	00000004 	andeq	r0, r0, r4
    2370:	00000010 	andeq	r0, r0, r0, lsl r0
    2374:	10500001 	subsne	r0, r0, r1
    2378:	14000000 	strne	r0, [r0], #-0
    237c:	05000000 	streq	r0, [r0, #-0]
    2380:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2384:	00001c34 	andeq	r1, r0, r4, lsr ip
	...
    2390:	000e0000 	andeq	r0, lr, r0
    2394:	00010000 	andeq	r0, r1, r0
    2398:	00000e50 	andeq	r0, r0, r0, asr lr
    239c:	00001c00 	andeq	r1, r0, r0, lsl #24
    23a0:	f3000400 	vshl.u8	d0, d0, d0
    23a4:	009f5001 	addseq	r5, pc, r1
    23a8:	00000000 	andeq	r0, r0, r0
    23ac:	Address 0x00000000000023ac is out of bounds.

